
ynotag.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010b80  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ef8  08010c40  08010c40  00011c40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011b38  08011b38  00013bb0  2**0
                  CONTENTS
  4 .ARM          00000008  08011b38  08011b38  00012b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011b40  08011b40  00013bb0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011b40  08011b40  00012b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011b44  08011b44  00012b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000bb0  20000000  08011b48  00013000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013fc  20000bb0  080126f8  00013bb0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001fac  080126f8  00013fac  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00013bb0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ca13  00000000  00000000  00013bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039a5  00000000  00000000  000305eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a40  00000000  00000000  00033f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001547  00000000  00000000  000359d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000202e5  00000000  00000000  00036f17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020572  00000000  00000000  000571fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cbb8b  00000000  00000000  0007776e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001432f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000078d8  00000000  00000000  0014333c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000085  00000000  00000000  0014ac14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000bb0 	.word	0x20000bb0
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08010c24 	.word	0x08010c24

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000bb4 	.word	0x20000bb4
 8000100:	08010c24 	.word	0x08010c24

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <strlen>:
 8000118:	2300      	movs	r3, #0
 800011a:	5cc2      	ldrb	r2, [r0, r3]
 800011c:	3301      	adds	r3, #1
 800011e:	2a00      	cmp	r2, #0
 8000120:	d1fb      	bne.n	800011a <strlen+0x2>
 8000122:	1e58      	subs	r0, r3, #1
 8000124:	4770      	bx	lr
	...

08000128 <__gnu_thumb1_case_uqi>:
 8000128:	b402      	push	{r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	5c09      	ldrb	r1, [r1, r0]
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	448e      	add	lr, r1
 8000136:	bc02      	pop	{r1}
 8000138:	4770      	bx	lr
 800013a:	46c0      	nop			@ (mov r8, r8)

0800013c <__gnu_thumb1_case_shi>:
 800013c:	b403      	push	{r0, r1}
 800013e:	4671      	mov	r1, lr
 8000140:	0849      	lsrs	r1, r1, #1
 8000142:	0040      	lsls	r0, r0, #1
 8000144:	0049      	lsls	r1, r1, #1
 8000146:	5e09      	ldrsh	r1, [r1, r0]
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	448e      	add	lr, r1
 800014c:	bc03      	pop	{r0, r1}
 800014e:	4770      	bx	lr

08000150 <__udivsi3>:
 8000150:	2200      	movs	r2, #0
 8000152:	0843      	lsrs	r3, r0, #1
 8000154:	428b      	cmp	r3, r1
 8000156:	d374      	bcc.n	8000242 <__udivsi3+0xf2>
 8000158:	0903      	lsrs	r3, r0, #4
 800015a:	428b      	cmp	r3, r1
 800015c:	d35f      	bcc.n	800021e <__udivsi3+0xce>
 800015e:	0a03      	lsrs	r3, r0, #8
 8000160:	428b      	cmp	r3, r1
 8000162:	d344      	bcc.n	80001ee <__udivsi3+0x9e>
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d328      	bcc.n	80001bc <__udivsi3+0x6c>
 800016a:	0c03      	lsrs	r3, r0, #16
 800016c:	428b      	cmp	r3, r1
 800016e:	d30d      	bcc.n	800018c <__udivsi3+0x3c>
 8000170:	22ff      	movs	r2, #255	@ 0xff
 8000172:	0209      	lsls	r1, r1, #8
 8000174:	ba12      	rev	r2, r2
 8000176:	0c03      	lsrs	r3, r0, #16
 8000178:	428b      	cmp	r3, r1
 800017a:	d302      	bcc.n	8000182 <__udivsi3+0x32>
 800017c:	1212      	asrs	r2, r2, #8
 800017e:	0209      	lsls	r1, r1, #8
 8000180:	d065      	beq.n	800024e <__udivsi3+0xfe>
 8000182:	0b03      	lsrs	r3, r0, #12
 8000184:	428b      	cmp	r3, r1
 8000186:	d319      	bcc.n	80001bc <__udivsi3+0x6c>
 8000188:	e000      	b.n	800018c <__udivsi3+0x3c>
 800018a:	0a09      	lsrs	r1, r1, #8
 800018c:	0bc3      	lsrs	r3, r0, #15
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x46>
 8000192:	03cb      	lsls	r3, r1, #15
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b83      	lsrs	r3, r0, #14
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x52>
 800019e:	038b      	lsls	r3, r1, #14
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0b43      	lsrs	r3, r0, #13
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x5e>
 80001aa:	034b      	lsls	r3, r1, #13
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0b03      	lsrs	r3, r0, #12
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x6a>
 80001b6:	030b      	lsls	r3, r1, #12
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0ac3      	lsrs	r3, r0, #11
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x76>
 80001c2:	02cb      	lsls	r3, r1, #11
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a83      	lsrs	r3, r0, #10
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x82>
 80001ce:	028b      	lsls	r3, r1, #10
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0a43      	lsrs	r3, r0, #9
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x8e>
 80001da:	024b      	lsls	r3, r1, #9
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	0a03      	lsrs	r3, r0, #8
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x9a>
 80001e6:	020b      	lsls	r3, r1, #8
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	d2cd      	bcs.n	800018a <__udivsi3+0x3a>
 80001ee:	09c3      	lsrs	r3, r0, #7
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xa8>
 80001f4:	01cb      	lsls	r3, r1, #7
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0983      	lsrs	r3, r0, #6
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xb4>
 8000200:	018b      	lsls	r3, r1, #6
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0943      	lsrs	r3, r0, #5
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xc0>
 800020c:	014b      	lsls	r3, r1, #5
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0903      	lsrs	r3, r0, #4
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xcc>
 8000218:	010b      	lsls	r3, r1, #4
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	08c3      	lsrs	r3, r0, #3
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xd8>
 8000224:	00cb      	lsls	r3, r1, #3
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0883      	lsrs	r3, r0, #2
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xe4>
 8000230:	008b      	lsls	r3, r1, #2
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	0843      	lsrs	r3, r0, #1
 8000238:	428b      	cmp	r3, r1
 800023a:	d301      	bcc.n	8000240 <__udivsi3+0xf0>
 800023c:	004b      	lsls	r3, r1, #1
 800023e:	1ac0      	subs	r0, r0, r3
 8000240:	4152      	adcs	r2, r2
 8000242:	1a41      	subs	r1, r0, r1
 8000244:	d200      	bcs.n	8000248 <__udivsi3+0xf8>
 8000246:	4601      	mov	r1, r0
 8000248:	4152      	adcs	r2, r2
 800024a:	4610      	mov	r0, r2
 800024c:	4770      	bx	lr
 800024e:	e7ff      	b.n	8000250 <__udivsi3+0x100>
 8000250:	b501      	push	{r0, lr}
 8000252:	2000      	movs	r0, #0
 8000254:	f000 f8f0 	bl	8000438 <__aeabi_idiv0>
 8000258:	bd02      	pop	{r1, pc}
 800025a:	46c0      	nop			@ (mov r8, r8)

0800025c <__aeabi_uidivmod>:
 800025c:	2900      	cmp	r1, #0
 800025e:	d0f7      	beq.n	8000250 <__udivsi3+0x100>
 8000260:	e776      	b.n	8000150 <__udivsi3>
 8000262:	4770      	bx	lr

08000264 <__divsi3>:
 8000264:	4603      	mov	r3, r0
 8000266:	430b      	orrs	r3, r1
 8000268:	d47f      	bmi.n	800036a <__divsi3+0x106>
 800026a:	2200      	movs	r2, #0
 800026c:	0843      	lsrs	r3, r0, #1
 800026e:	428b      	cmp	r3, r1
 8000270:	d374      	bcc.n	800035c <__divsi3+0xf8>
 8000272:	0903      	lsrs	r3, r0, #4
 8000274:	428b      	cmp	r3, r1
 8000276:	d35f      	bcc.n	8000338 <__divsi3+0xd4>
 8000278:	0a03      	lsrs	r3, r0, #8
 800027a:	428b      	cmp	r3, r1
 800027c:	d344      	bcc.n	8000308 <__divsi3+0xa4>
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d328      	bcc.n	80002d6 <__divsi3+0x72>
 8000284:	0c03      	lsrs	r3, r0, #16
 8000286:	428b      	cmp	r3, r1
 8000288:	d30d      	bcc.n	80002a6 <__divsi3+0x42>
 800028a:	22ff      	movs	r2, #255	@ 0xff
 800028c:	0209      	lsls	r1, r1, #8
 800028e:	ba12      	rev	r2, r2
 8000290:	0c03      	lsrs	r3, r0, #16
 8000292:	428b      	cmp	r3, r1
 8000294:	d302      	bcc.n	800029c <__divsi3+0x38>
 8000296:	1212      	asrs	r2, r2, #8
 8000298:	0209      	lsls	r1, r1, #8
 800029a:	d065      	beq.n	8000368 <__divsi3+0x104>
 800029c:	0b03      	lsrs	r3, r0, #12
 800029e:	428b      	cmp	r3, r1
 80002a0:	d319      	bcc.n	80002d6 <__divsi3+0x72>
 80002a2:	e000      	b.n	80002a6 <__divsi3+0x42>
 80002a4:	0a09      	lsrs	r1, r1, #8
 80002a6:	0bc3      	lsrs	r3, r0, #15
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x4c>
 80002ac:	03cb      	lsls	r3, r1, #15
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b83      	lsrs	r3, r0, #14
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x58>
 80002b8:	038b      	lsls	r3, r1, #14
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0b43      	lsrs	r3, r0, #13
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x64>
 80002c4:	034b      	lsls	r3, r1, #13
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0b03      	lsrs	r3, r0, #12
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x70>
 80002d0:	030b      	lsls	r3, r1, #12
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0ac3      	lsrs	r3, r0, #11
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x7c>
 80002dc:	02cb      	lsls	r3, r1, #11
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a83      	lsrs	r3, r0, #10
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0x88>
 80002e8:	028b      	lsls	r3, r1, #10
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	0a43      	lsrs	r3, r0, #9
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d301      	bcc.n	80002f8 <__divsi3+0x94>
 80002f4:	024b      	lsls	r3, r1, #9
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	4152      	adcs	r2, r2
 80002fa:	0a03      	lsrs	r3, r0, #8
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0xa0>
 8000300:	020b      	lsls	r3, r1, #8
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	d2cd      	bcs.n	80002a4 <__divsi3+0x40>
 8000308:	09c3      	lsrs	r3, r0, #7
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xae>
 800030e:	01cb      	lsls	r3, r1, #7
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0983      	lsrs	r3, r0, #6
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xba>
 800031a:	018b      	lsls	r3, r1, #6
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0943      	lsrs	r3, r0, #5
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xc6>
 8000326:	014b      	lsls	r3, r1, #5
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xd2>
 8000332:	010b      	lsls	r3, r1, #4
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	08c3      	lsrs	r3, r0, #3
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xde>
 800033e:	00cb      	lsls	r3, r1, #3
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	0883      	lsrs	r3, r0, #2
 8000346:	428b      	cmp	r3, r1
 8000348:	d301      	bcc.n	800034e <__divsi3+0xea>
 800034a:	008b      	lsls	r3, r1, #2
 800034c:	1ac0      	subs	r0, r0, r3
 800034e:	4152      	adcs	r2, r2
 8000350:	0843      	lsrs	r3, r0, #1
 8000352:	428b      	cmp	r3, r1
 8000354:	d301      	bcc.n	800035a <__divsi3+0xf6>
 8000356:	004b      	lsls	r3, r1, #1
 8000358:	1ac0      	subs	r0, r0, r3
 800035a:	4152      	adcs	r2, r2
 800035c:	1a41      	subs	r1, r0, r1
 800035e:	d200      	bcs.n	8000362 <__divsi3+0xfe>
 8000360:	4601      	mov	r1, r0
 8000362:	4152      	adcs	r2, r2
 8000364:	4610      	mov	r0, r2
 8000366:	4770      	bx	lr
 8000368:	e05d      	b.n	8000426 <__divsi3+0x1c2>
 800036a:	0fca      	lsrs	r2, r1, #31
 800036c:	d000      	beq.n	8000370 <__divsi3+0x10c>
 800036e:	4249      	negs	r1, r1
 8000370:	1003      	asrs	r3, r0, #32
 8000372:	d300      	bcc.n	8000376 <__divsi3+0x112>
 8000374:	4240      	negs	r0, r0
 8000376:	4053      	eors	r3, r2
 8000378:	2200      	movs	r2, #0
 800037a:	469c      	mov	ip, r3
 800037c:	0903      	lsrs	r3, r0, #4
 800037e:	428b      	cmp	r3, r1
 8000380:	d32d      	bcc.n	80003de <__divsi3+0x17a>
 8000382:	0a03      	lsrs	r3, r0, #8
 8000384:	428b      	cmp	r3, r1
 8000386:	d312      	bcc.n	80003ae <__divsi3+0x14a>
 8000388:	22fc      	movs	r2, #252	@ 0xfc
 800038a:	0189      	lsls	r1, r1, #6
 800038c:	ba12      	rev	r2, r2
 800038e:	0a03      	lsrs	r3, r0, #8
 8000390:	428b      	cmp	r3, r1
 8000392:	d30c      	bcc.n	80003ae <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	1192      	asrs	r2, r2, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d308      	bcc.n	80003ae <__divsi3+0x14a>
 800039c:	0189      	lsls	r1, r1, #6
 800039e:	1192      	asrs	r2, r2, #6
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d304      	bcc.n	80003ae <__divsi3+0x14a>
 80003a4:	0189      	lsls	r1, r1, #6
 80003a6:	d03a      	beq.n	800041e <__divsi3+0x1ba>
 80003a8:	1192      	asrs	r2, r2, #6
 80003aa:	e000      	b.n	80003ae <__divsi3+0x14a>
 80003ac:	0989      	lsrs	r1, r1, #6
 80003ae:	09c3      	lsrs	r3, r0, #7
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x154>
 80003b4:	01cb      	lsls	r3, r1, #7
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0983      	lsrs	r3, r0, #6
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x160>
 80003c0:	018b      	lsls	r3, r1, #6
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0943      	lsrs	r3, r0, #5
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x16c>
 80003cc:	014b      	lsls	r3, r1, #5
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0903      	lsrs	r3, r0, #4
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x178>
 80003d8:	010b      	lsls	r3, r1, #4
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	08c3      	lsrs	r3, r0, #3
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x184>
 80003e4:	00cb      	lsls	r3, r1, #3
 80003e6:	1ac0      	subs	r0, r0, r3
 80003e8:	4152      	adcs	r2, r2
 80003ea:	0883      	lsrs	r3, r0, #2
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x190>
 80003f0:	008b      	lsls	r3, r1, #2
 80003f2:	1ac0      	subs	r0, r0, r3
 80003f4:	4152      	adcs	r2, r2
 80003f6:	d2d9      	bcs.n	80003ac <__divsi3+0x148>
 80003f8:	0843      	lsrs	r3, r0, #1
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d301      	bcc.n	8000402 <__divsi3+0x19e>
 80003fe:	004b      	lsls	r3, r1, #1
 8000400:	1ac0      	subs	r0, r0, r3
 8000402:	4152      	adcs	r2, r2
 8000404:	1a41      	subs	r1, r0, r1
 8000406:	d200      	bcs.n	800040a <__divsi3+0x1a6>
 8000408:	4601      	mov	r1, r0
 800040a:	4663      	mov	r3, ip
 800040c:	4152      	adcs	r2, r2
 800040e:	105b      	asrs	r3, r3, #1
 8000410:	4610      	mov	r0, r2
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x1b4>
 8000414:	4240      	negs	r0, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d500      	bpl.n	800041c <__divsi3+0x1b8>
 800041a:	4249      	negs	r1, r1
 800041c:	4770      	bx	lr
 800041e:	4663      	mov	r3, ip
 8000420:	105b      	asrs	r3, r3, #1
 8000422:	d300      	bcc.n	8000426 <__divsi3+0x1c2>
 8000424:	4240      	negs	r0, r0
 8000426:	b501      	push	{r0, lr}
 8000428:	2000      	movs	r0, #0
 800042a:	f000 f805 	bl	8000438 <__aeabi_idiv0>
 800042e:	bd02      	pop	{r1, pc}

08000430 <__aeabi_idivmod>:
 8000430:	2900      	cmp	r1, #0
 8000432:	d0f8      	beq.n	8000426 <__divsi3+0x1c2>
 8000434:	e716      	b.n	8000264 <__divsi3>
 8000436:	4770      	bx	lr

08000438 <__aeabi_idiv0>:
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdrcmple>:
 800043c:	4684      	mov	ip, r0
 800043e:	0010      	movs	r0, r2
 8000440:	4662      	mov	r2, ip
 8000442:	468c      	mov	ip, r1
 8000444:	0019      	movs	r1, r3
 8000446:	4663      	mov	r3, ip
 8000448:	e000      	b.n	800044c <__aeabi_cdcmpeq>
 800044a:	46c0      	nop			@ (mov r8, r8)

0800044c <__aeabi_cdcmpeq>:
 800044c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800044e:	f002 f843 	bl	80024d8 <__ledf2>
 8000452:	2800      	cmp	r0, #0
 8000454:	d401      	bmi.n	800045a <__aeabi_cdcmpeq+0xe>
 8000456:	2100      	movs	r1, #0
 8000458:	42c8      	cmn	r0, r1
 800045a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800045c <__aeabi_dcmpeq>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 ff83 	bl	8002368 <__eqdf2>
 8000462:	4240      	negs	r0, r0
 8000464:	3001      	adds	r0, #1
 8000466:	bd10      	pop	{r4, pc}

08000468 <__aeabi_dcmplt>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f002 f835 	bl	80024d8 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	db01      	blt.n	8000476 <__aeabi_dcmplt+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			@ (mov r8, r8)

0800047c <__aeabi_dcmple>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f002 f82b 	bl	80024d8 <__ledf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dd01      	ble.n	800048a <__aeabi_dcmple+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__aeabi_dcmpgt>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 ffad 	bl	80023f0 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	dc01      	bgt.n	800049e <__aeabi_dcmpgt+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			@ (mov r8, r8)

080004a4 <__aeabi_dcmpge>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	f001 ffa3 	bl	80023f0 <__gedf2>
 80004aa:	2800      	cmp	r0, #0
 80004ac:	da01      	bge.n	80004b2 <__aeabi_dcmpge+0xe>
 80004ae:	2000      	movs	r0, #0
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	2001      	movs	r0, #1
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	46c0      	nop			@ (mov r8, r8)

080004b8 <__aeabi_cfrcmple>:
 80004b8:	4684      	mov	ip, r0
 80004ba:	0008      	movs	r0, r1
 80004bc:	4661      	mov	r1, ip
 80004be:	e7ff      	b.n	80004c0 <__aeabi_cfcmpeq>

080004c0 <__aeabi_cfcmpeq>:
 80004c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004c2:	f000 fcf5 	bl	8000eb0 <__lesf2>
 80004c6:	2800      	cmp	r0, #0
 80004c8:	d401      	bmi.n	80004ce <__aeabi_cfcmpeq+0xe>
 80004ca:	2100      	movs	r1, #0
 80004cc:	42c8      	cmn	r0, r1
 80004ce:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004d0 <__aeabi_fcmpeq>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 fc75 	bl	8000dc0 <__eqsf2>
 80004d6:	4240      	negs	r0, r0
 80004d8:	3001      	adds	r0, #1
 80004da:	bd10      	pop	{r4, pc}

080004dc <__aeabi_fcmplt>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 fce7 	bl	8000eb0 <__lesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	db01      	blt.n	80004ea <__aeabi_fcmplt+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			@ (mov r8, r8)

080004f0 <__aeabi_fcmple>:
 80004f0:	b510      	push	{r4, lr}
 80004f2:	f000 fcdd 	bl	8000eb0 <__lesf2>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	dd01      	ble.n	80004fe <__aeabi_fcmple+0xe>
 80004fa:	2000      	movs	r0, #0
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	2001      	movs	r0, #1
 8000500:	bd10      	pop	{r4, pc}
 8000502:	46c0      	nop			@ (mov r8, r8)

08000504 <__aeabi_fcmpgt>:
 8000504:	b510      	push	{r4, lr}
 8000506:	f000 fc83 	bl	8000e10 <__gesf2>
 800050a:	2800      	cmp	r0, #0
 800050c:	dc01      	bgt.n	8000512 <__aeabi_fcmpgt+0xe>
 800050e:	2000      	movs	r0, #0
 8000510:	bd10      	pop	{r4, pc}
 8000512:	2001      	movs	r0, #1
 8000514:	bd10      	pop	{r4, pc}
 8000516:	46c0      	nop			@ (mov r8, r8)

08000518 <__aeabi_fcmpge>:
 8000518:	b510      	push	{r4, lr}
 800051a:	f000 fc79 	bl	8000e10 <__gesf2>
 800051e:	2800      	cmp	r0, #0
 8000520:	da01      	bge.n	8000526 <__aeabi_fcmpge+0xe>
 8000522:	2000      	movs	r0, #0
 8000524:	bd10      	pop	{r4, pc}
 8000526:	2001      	movs	r0, #1
 8000528:	bd10      	pop	{r4, pc}
 800052a:	46c0      	nop			@ (mov r8, r8)

0800052c <__aeabi_uldivmod>:
 800052c:	2b00      	cmp	r3, #0
 800052e:	d111      	bne.n	8000554 <__aeabi_uldivmod+0x28>
 8000530:	2a00      	cmp	r2, #0
 8000532:	d10f      	bne.n	8000554 <__aeabi_uldivmod+0x28>
 8000534:	2900      	cmp	r1, #0
 8000536:	d100      	bne.n	800053a <__aeabi_uldivmod+0xe>
 8000538:	2800      	cmp	r0, #0
 800053a:	d002      	beq.n	8000542 <__aeabi_uldivmod+0x16>
 800053c:	2100      	movs	r1, #0
 800053e:	43c9      	mvns	r1, r1
 8000540:	0008      	movs	r0, r1
 8000542:	b407      	push	{r0, r1, r2}
 8000544:	4802      	ldr	r0, [pc, #8]	@ (8000550 <__aeabi_uldivmod+0x24>)
 8000546:	a102      	add	r1, pc, #8	@ (adr r1, 8000550 <__aeabi_uldivmod+0x24>)
 8000548:	1840      	adds	r0, r0, r1
 800054a:	9002      	str	r0, [sp, #8]
 800054c:	bd03      	pop	{r0, r1, pc}
 800054e:	46c0      	nop			@ (mov r8, r8)
 8000550:	fffffee9 	.word	0xfffffee9
 8000554:	b403      	push	{r0, r1}
 8000556:	4668      	mov	r0, sp
 8000558:	b501      	push	{r0, lr}
 800055a:	9802      	ldr	r0, [sp, #8]
 800055c:	f000 f8ba 	bl	80006d4 <__udivmoddi4>
 8000560:	9b01      	ldr	r3, [sp, #4]
 8000562:	469e      	mov	lr, r3
 8000564:	b002      	add	sp, #8
 8000566:	bc0c      	pop	{r2, r3}
 8000568:	4770      	bx	lr
 800056a:	46c0      	nop			@ (mov r8, r8)

0800056c <__aeabi_lmul>:
 800056c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800056e:	46ce      	mov	lr, r9
 8000570:	4699      	mov	r9, r3
 8000572:	0c03      	lsrs	r3, r0, #16
 8000574:	469c      	mov	ip, r3
 8000576:	0413      	lsls	r3, r2, #16
 8000578:	4647      	mov	r7, r8
 800057a:	0c1b      	lsrs	r3, r3, #16
 800057c:	001d      	movs	r5, r3
 800057e:	000e      	movs	r6, r1
 8000580:	4661      	mov	r1, ip
 8000582:	0404      	lsls	r4, r0, #16
 8000584:	0c24      	lsrs	r4, r4, #16
 8000586:	b580      	push	{r7, lr}
 8000588:	0007      	movs	r7, r0
 800058a:	0c10      	lsrs	r0, r2, #16
 800058c:	434b      	muls	r3, r1
 800058e:	4365      	muls	r5, r4
 8000590:	4341      	muls	r1, r0
 8000592:	4360      	muls	r0, r4
 8000594:	0c2c      	lsrs	r4, r5, #16
 8000596:	18c0      	adds	r0, r0, r3
 8000598:	1824      	adds	r4, r4, r0
 800059a:	468c      	mov	ip, r1
 800059c:	42a3      	cmp	r3, r4
 800059e:	d903      	bls.n	80005a8 <__aeabi_lmul+0x3c>
 80005a0:	2380      	movs	r3, #128	@ 0x80
 80005a2:	025b      	lsls	r3, r3, #9
 80005a4:	4698      	mov	r8, r3
 80005a6:	44c4      	add	ip, r8
 80005a8:	4649      	mov	r1, r9
 80005aa:	4379      	muls	r1, r7
 80005ac:	4356      	muls	r6, r2
 80005ae:	0c23      	lsrs	r3, r4, #16
 80005b0:	042d      	lsls	r5, r5, #16
 80005b2:	0c2d      	lsrs	r5, r5, #16
 80005b4:	1989      	adds	r1, r1, r6
 80005b6:	4463      	add	r3, ip
 80005b8:	0424      	lsls	r4, r4, #16
 80005ba:	1960      	adds	r0, r4, r5
 80005bc:	18c9      	adds	r1, r1, r3
 80005be:	bcc0      	pop	{r6, r7}
 80005c0:	46b9      	mov	r9, r7
 80005c2:	46b0      	mov	r8, r6
 80005c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005c6:	46c0      	nop			@ (mov r8, r8)

080005c8 <__aeabi_f2uiz>:
 80005c8:	219e      	movs	r1, #158	@ 0x9e
 80005ca:	b510      	push	{r4, lr}
 80005cc:	05c9      	lsls	r1, r1, #23
 80005ce:	1c04      	adds	r4, r0, #0
 80005d0:	f7ff ffa2 	bl	8000518 <__aeabi_fcmpge>
 80005d4:	2800      	cmp	r0, #0
 80005d6:	d103      	bne.n	80005e0 <__aeabi_f2uiz+0x18>
 80005d8:	1c20      	adds	r0, r4, #0
 80005da:	f000 ff99 	bl	8001510 <__aeabi_f2iz>
 80005de:	bd10      	pop	{r4, pc}
 80005e0:	219e      	movs	r1, #158	@ 0x9e
 80005e2:	1c20      	adds	r0, r4, #0
 80005e4:	05c9      	lsls	r1, r1, #23
 80005e6:	f000 fdef 	bl	80011c8 <__aeabi_fsub>
 80005ea:	f000 ff91 	bl	8001510 <__aeabi_f2iz>
 80005ee:	2380      	movs	r3, #128	@ 0x80
 80005f0:	061b      	lsls	r3, r3, #24
 80005f2:	469c      	mov	ip, r3
 80005f4:	4460      	add	r0, ip
 80005f6:	e7f2      	b.n	80005de <__aeabi_f2uiz+0x16>

080005f8 <__aeabi_d2uiz>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	2200      	movs	r2, #0
 80005fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000630 <__aeabi_d2uiz+0x38>)
 80005fe:	0004      	movs	r4, r0
 8000600:	000d      	movs	r5, r1
 8000602:	f7ff ff4f 	bl	80004a4 <__aeabi_dcmpge>
 8000606:	2800      	cmp	r0, #0
 8000608:	d104      	bne.n	8000614 <__aeabi_d2uiz+0x1c>
 800060a:	0020      	movs	r0, r4
 800060c:	0029      	movs	r1, r5
 800060e:	f002 fe5b 	bl	80032c8 <__aeabi_d2iz>
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	4b06      	ldr	r3, [pc, #24]	@ (8000630 <__aeabi_d2uiz+0x38>)
 8000616:	2200      	movs	r2, #0
 8000618:	0020      	movs	r0, r4
 800061a:	0029      	movs	r1, r5
 800061c:	f002 fa96 	bl	8002b4c <__aeabi_dsub>
 8000620:	f002 fe52 	bl	80032c8 <__aeabi_d2iz>
 8000624:	2380      	movs	r3, #128	@ 0x80
 8000626:	061b      	lsls	r3, r3, #24
 8000628:	469c      	mov	ip, r3
 800062a:	4460      	add	r0, ip
 800062c:	e7f1      	b.n	8000612 <__aeabi_d2uiz+0x1a>
 800062e:	46c0      	nop			@ (mov r8, r8)
 8000630:	41e00000 	.word	0x41e00000

08000634 <__aeabi_d2lz>:
 8000634:	b570      	push	{r4, r5, r6, lr}
 8000636:	2200      	movs	r2, #0
 8000638:	2300      	movs	r3, #0
 800063a:	0004      	movs	r4, r0
 800063c:	000d      	movs	r5, r1
 800063e:	f7ff ff13 	bl	8000468 <__aeabi_dcmplt>
 8000642:	2800      	cmp	r0, #0
 8000644:	d108      	bne.n	8000658 <__aeabi_d2lz+0x24>
 8000646:	0020      	movs	r0, r4
 8000648:	0029      	movs	r1, r5
 800064a:	f000 f80f 	bl	800066c <__aeabi_d2ulz>
 800064e:	0002      	movs	r2, r0
 8000650:	000b      	movs	r3, r1
 8000652:	0010      	movs	r0, r2
 8000654:	0019      	movs	r1, r3
 8000656:	bd70      	pop	{r4, r5, r6, pc}
 8000658:	2380      	movs	r3, #128	@ 0x80
 800065a:	061b      	lsls	r3, r3, #24
 800065c:	18e9      	adds	r1, r5, r3
 800065e:	0020      	movs	r0, r4
 8000660:	f000 f804 	bl	800066c <__aeabi_d2ulz>
 8000664:	2300      	movs	r3, #0
 8000666:	4242      	negs	r2, r0
 8000668:	418b      	sbcs	r3, r1
 800066a:	e7f2      	b.n	8000652 <__aeabi_d2lz+0x1e>

0800066c <__aeabi_d2ulz>:
 800066c:	b570      	push	{r4, r5, r6, lr}
 800066e:	2200      	movs	r2, #0
 8000670:	4b0b      	ldr	r3, [pc, #44]	@ (80006a0 <__aeabi_d2ulz+0x34>)
 8000672:	000d      	movs	r5, r1
 8000674:	0004      	movs	r4, r0
 8000676:	f001 ffa1 	bl	80025bc <__aeabi_dmul>
 800067a:	f7ff ffbd 	bl	80005f8 <__aeabi_d2uiz>
 800067e:	0006      	movs	r6, r0
 8000680:	f002 fe8c 	bl	800339c <__aeabi_ui2d>
 8000684:	2200      	movs	r2, #0
 8000686:	4b07      	ldr	r3, [pc, #28]	@ (80006a4 <__aeabi_d2ulz+0x38>)
 8000688:	f001 ff98 	bl	80025bc <__aeabi_dmul>
 800068c:	0002      	movs	r2, r0
 800068e:	000b      	movs	r3, r1
 8000690:	0020      	movs	r0, r4
 8000692:	0029      	movs	r1, r5
 8000694:	f002 fa5a 	bl	8002b4c <__aeabi_dsub>
 8000698:	f7ff ffae 	bl	80005f8 <__aeabi_d2uiz>
 800069c:	0031      	movs	r1, r6
 800069e:	bd70      	pop	{r4, r5, r6, pc}
 80006a0:	3df00000 	.word	0x3df00000
 80006a4:	41f00000 	.word	0x41f00000

080006a8 <__aeabi_l2d>:
 80006a8:	b570      	push	{r4, r5, r6, lr}
 80006aa:	0006      	movs	r6, r0
 80006ac:	0008      	movs	r0, r1
 80006ae:	f002 fe47 	bl	8003340 <__aeabi_i2d>
 80006b2:	2200      	movs	r2, #0
 80006b4:	4b06      	ldr	r3, [pc, #24]	@ (80006d0 <__aeabi_l2d+0x28>)
 80006b6:	f001 ff81 	bl	80025bc <__aeabi_dmul>
 80006ba:	000d      	movs	r5, r1
 80006bc:	0004      	movs	r4, r0
 80006be:	0030      	movs	r0, r6
 80006c0:	f002 fe6c 	bl	800339c <__aeabi_ui2d>
 80006c4:	002b      	movs	r3, r5
 80006c6:	0022      	movs	r2, r4
 80006c8:	f000 ffd0 	bl	800166c <__aeabi_dadd>
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	46c0      	nop			@ (mov r8, r8)
 80006d0:	41f00000 	.word	0x41f00000

080006d4 <__udivmoddi4>:
 80006d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006d6:	4657      	mov	r7, sl
 80006d8:	464e      	mov	r6, r9
 80006da:	4645      	mov	r5, r8
 80006dc:	46de      	mov	lr, fp
 80006de:	b5e0      	push	{r5, r6, r7, lr}
 80006e0:	0004      	movs	r4, r0
 80006e2:	000d      	movs	r5, r1
 80006e4:	4692      	mov	sl, r2
 80006e6:	4699      	mov	r9, r3
 80006e8:	b083      	sub	sp, #12
 80006ea:	428b      	cmp	r3, r1
 80006ec:	d830      	bhi.n	8000750 <__udivmoddi4+0x7c>
 80006ee:	d02d      	beq.n	800074c <__udivmoddi4+0x78>
 80006f0:	4649      	mov	r1, r9
 80006f2:	4650      	mov	r0, sl
 80006f4:	f002 ff60 	bl	80035b8 <__clzdi2>
 80006f8:	0029      	movs	r1, r5
 80006fa:	0006      	movs	r6, r0
 80006fc:	0020      	movs	r0, r4
 80006fe:	f002 ff5b 	bl	80035b8 <__clzdi2>
 8000702:	1a33      	subs	r3, r6, r0
 8000704:	4698      	mov	r8, r3
 8000706:	3b20      	subs	r3, #32
 8000708:	d434      	bmi.n	8000774 <__udivmoddi4+0xa0>
 800070a:	469b      	mov	fp, r3
 800070c:	4653      	mov	r3, sl
 800070e:	465a      	mov	r2, fp
 8000710:	4093      	lsls	r3, r2
 8000712:	4642      	mov	r2, r8
 8000714:	001f      	movs	r7, r3
 8000716:	4653      	mov	r3, sl
 8000718:	4093      	lsls	r3, r2
 800071a:	001e      	movs	r6, r3
 800071c:	42af      	cmp	r7, r5
 800071e:	d83b      	bhi.n	8000798 <__udivmoddi4+0xc4>
 8000720:	42af      	cmp	r7, r5
 8000722:	d100      	bne.n	8000726 <__udivmoddi4+0x52>
 8000724:	e079      	b.n	800081a <__udivmoddi4+0x146>
 8000726:	465b      	mov	r3, fp
 8000728:	1ba4      	subs	r4, r4, r6
 800072a:	41bd      	sbcs	r5, r7
 800072c:	2b00      	cmp	r3, #0
 800072e:	da00      	bge.n	8000732 <__udivmoddi4+0x5e>
 8000730:	e076      	b.n	8000820 <__udivmoddi4+0x14c>
 8000732:	2200      	movs	r2, #0
 8000734:	2300      	movs	r3, #0
 8000736:	9200      	str	r2, [sp, #0]
 8000738:	9301      	str	r3, [sp, #4]
 800073a:	2301      	movs	r3, #1
 800073c:	465a      	mov	r2, fp
 800073e:	4093      	lsls	r3, r2
 8000740:	9301      	str	r3, [sp, #4]
 8000742:	2301      	movs	r3, #1
 8000744:	4642      	mov	r2, r8
 8000746:	4093      	lsls	r3, r2
 8000748:	9300      	str	r3, [sp, #0]
 800074a:	e029      	b.n	80007a0 <__udivmoddi4+0xcc>
 800074c:	4282      	cmp	r2, r0
 800074e:	d9cf      	bls.n	80006f0 <__udivmoddi4+0x1c>
 8000750:	2200      	movs	r2, #0
 8000752:	2300      	movs	r3, #0
 8000754:	9200      	str	r2, [sp, #0]
 8000756:	9301      	str	r3, [sp, #4]
 8000758:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <__udivmoddi4+0x8e>
 800075e:	601c      	str	r4, [r3, #0]
 8000760:	605d      	str	r5, [r3, #4]
 8000762:	9800      	ldr	r0, [sp, #0]
 8000764:	9901      	ldr	r1, [sp, #4]
 8000766:	b003      	add	sp, #12
 8000768:	bcf0      	pop	{r4, r5, r6, r7}
 800076a:	46bb      	mov	fp, r7
 800076c:	46b2      	mov	sl, r6
 800076e:	46a9      	mov	r9, r5
 8000770:	46a0      	mov	r8, r4
 8000772:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000774:	4642      	mov	r2, r8
 8000776:	469b      	mov	fp, r3
 8000778:	2320      	movs	r3, #32
 800077a:	1a9b      	subs	r3, r3, r2
 800077c:	4652      	mov	r2, sl
 800077e:	40da      	lsrs	r2, r3
 8000780:	4641      	mov	r1, r8
 8000782:	0013      	movs	r3, r2
 8000784:	464a      	mov	r2, r9
 8000786:	408a      	lsls	r2, r1
 8000788:	0017      	movs	r7, r2
 800078a:	4642      	mov	r2, r8
 800078c:	431f      	orrs	r7, r3
 800078e:	4653      	mov	r3, sl
 8000790:	4093      	lsls	r3, r2
 8000792:	001e      	movs	r6, r3
 8000794:	42af      	cmp	r7, r5
 8000796:	d9c3      	bls.n	8000720 <__udivmoddi4+0x4c>
 8000798:	2200      	movs	r2, #0
 800079a:	2300      	movs	r3, #0
 800079c:	9200      	str	r2, [sp, #0]
 800079e:	9301      	str	r3, [sp, #4]
 80007a0:	4643      	mov	r3, r8
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d0d8      	beq.n	8000758 <__udivmoddi4+0x84>
 80007a6:	07fb      	lsls	r3, r7, #31
 80007a8:	0872      	lsrs	r2, r6, #1
 80007aa:	431a      	orrs	r2, r3
 80007ac:	4646      	mov	r6, r8
 80007ae:	087b      	lsrs	r3, r7, #1
 80007b0:	e00e      	b.n	80007d0 <__udivmoddi4+0xfc>
 80007b2:	42ab      	cmp	r3, r5
 80007b4:	d101      	bne.n	80007ba <__udivmoddi4+0xe6>
 80007b6:	42a2      	cmp	r2, r4
 80007b8:	d80c      	bhi.n	80007d4 <__udivmoddi4+0x100>
 80007ba:	1aa4      	subs	r4, r4, r2
 80007bc:	419d      	sbcs	r5, r3
 80007be:	2001      	movs	r0, #1
 80007c0:	1924      	adds	r4, r4, r4
 80007c2:	416d      	adcs	r5, r5
 80007c4:	2100      	movs	r1, #0
 80007c6:	3e01      	subs	r6, #1
 80007c8:	1824      	adds	r4, r4, r0
 80007ca:	414d      	adcs	r5, r1
 80007cc:	2e00      	cmp	r6, #0
 80007ce:	d006      	beq.n	80007de <__udivmoddi4+0x10a>
 80007d0:	42ab      	cmp	r3, r5
 80007d2:	d9ee      	bls.n	80007b2 <__udivmoddi4+0xde>
 80007d4:	3e01      	subs	r6, #1
 80007d6:	1924      	adds	r4, r4, r4
 80007d8:	416d      	adcs	r5, r5
 80007da:	2e00      	cmp	r6, #0
 80007dc:	d1f8      	bne.n	80007d0 <__udivmoddi4+0xfc>
 80007de:	9800      	ldr	r0, [sp, #0]
 80007e0:	9901      	ldr	r1, [sp, #4]
 80007e2:	465b      	mov	r3, fp
 80007e4:	1900      	adds	r0, r0, r4
 80007e6:	4169      	adcs	r1, r5
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	db24      	blt.n	8000836 <__udivmoddi4+0x162>
 80007ec:	002b      	movs	r3, r5
 80007ee:	465a      	mov	r2, fp
 80007f0:	4644      	mov	r4, r8
 80007f2:	40d3      	lsrs	r3, r2
 80007f4:	002a      	movs	r2, r5
 80007f6:	40e2      	lsrs	r2, r4
 80007f8:	001c      	movs	r4, r3
 80007fa:	465b      	mov	r3, fp
 80007fc:	0015      	movs	r5, r2
 80007fe:	2b00      	cmp	r3, #0
 8000800:	db2a      	blt.n	8000858 <__udivmoddi4+0x184>
 8000802:	0026      	movs	r6, r4
 8000804:	409e      	lsls	r6, r3
 8000806:	0033      	movs	r3, r6
 8000808:	0026      	movs	r6, r4
 800080a:	4647      	mov	r7, r8
 800080c:	40be      	lsls	r6, r7
 800080e:	0032      	movs	r2, r6
 8000810:	1a80      	subs	r0, r0, r2
 8000812:	4199      	sbcs	r1, r3
 8000814:	9000      	str	r0, [sp, #0]
 8000816:	9101      	str	r1, [sp, #4]
 8000818:	e79e      	b.n	8000758 <__udivmoddi4+0x84>
 800081a:	42a3      	cmp	r3, r4
 800081c:	d8bc      	bhi.n	8000798 <__udivmoddi4+0xc4>
 800081e:	e782      	b.n	8000726 <__udivmoddi4+0x52>
 8000820:	4642      	mov	r2, r8
 8000822:	2320      	movs	r3, #32
 8000824:	2100      	movs	r1, #0
 8000826:	1a9b      	subs	r3, r3, r2
 8000828:	2200      	movs	r2, #0
 800082a:	9100      	str	r1, [sp, #0]
 800082c:	9201      	str	r2, [sp, #4]
 800082e:	2201      	movs	r2, #1
 8000830:	40da      	lsrs	r2, r3
 8000832:	9201      	str	r2, [sp, #4]
 8000834:	e785      	b.n	8000742 <__udivmoddi4+0x6e>
 8000836:	4642      	mov	r2, r8
 8000838:	2320      	movs	r3, #32
 800083a:	1a9b      	subs	r3, r3, r2
 800083c:	002a      	movs	r2, r5
 800083e:	4646      	mov	r6, r8
 8000840:	409a      	lsls	r2, r3
 8000842:	0023      	movs	r3, r4
 8000844:	40f3      	lsrs	r3, r6
 8000846:	4644      	mov	r4, r8
 8000848:	4313      	orrs	r3, r2
 800084a:	002a      	movs	r2, r5
 800084c:	40e2      	lsrs	r2, r4
 800084e:	001c      	movs	r4, r3
 8000850:	465b      	mov	r3, fp
 8000852:	0015      	movs	r5, r2
 8000854:	2b00      	cmp	r3, #0
 8000856:	dad4      	bge.n	8000802 <__udivmoddi4+0x12e>
 8000858:	4642      	mov	r2, r8
 800085a:	002f      	movs	r7, r5
 800085c:	2320      	movs	r3, #32
 800085e:	0026      	movs	r6, r4
 8000860:	4097      	lsls	r7, r2
 8000862:	1a9b      	subs	r3, r3, r2
 8000864:	40de      	lsrs	r6, r3
 8000866:	003b      	movs	r3, r7
 8000868:	4333      	orrs	r3, r6
 800086a:	e7cd      	b.n	8000808 <__udivmoddi4+0x134>

0800086c <__aeabi_fadd>:
 800086c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800086e:	46ce      	mov	lr, r9
 8000870:	4647      	mov	r7, r8
 8000872:	0243      	lsls	r3, r0, #9
 8000874:	0a5a      	lsrs	r2, r3, #9
 8000876:	024e      	lsls	r6, r1, #9
 8000878:	0045      	lsls	r5, r0, #1
 800087a:	0fc4      	lsrs	r4, r0, #31
 800087c:	0048      	lsls	r0, r1, #1
 800087e:	4691      	mov	r9, r2
 8000880:	0e2d      	lsrs	r5, r5, #24
 8000882:	0a72      	lsrs	r2, r6, #9
 8000884:	0e00      	lsrs	r0, r0, #24
 8000886:	4694      	mov	ip, r2
 8000888:	b580      	push	{r7, lr}
 800088a:	099b      	lsrs	r3, r3, #6
 800088c:	0fc9      	lsrs	r1, r1, #31
 800088e:	09b6      	lsrs	r6, r6, #6
 8000890:	1a2a      	subs	r2, r5, r0
 8000892:	428c      	cmp	r4, r1
 8000894:	d021      	beq.n	80008da <__aeabi_fadd+0x6e>
 8000896:	2a00      	cmp	r2, #0
 8000898:	dd0d      	ble.n	80008b6 <__aeabi_fadd+0x4a>
 800089a:	2800      	cmp	r0, #0
 800089c:	d12d      	bne.n	80008fa <__aeabi_fadd+0x8e>
 800089e:	2e00      	cmp	r6, #0
 80008a0:	d100      	bne.n	80008a4 <__aeabi_fadd+0x38>
 80008a2:	e08d      	b.n	80009c0 <__aeabi_fadd+0x154>
 80008a4:	1e51      	subs	r1, r2, #1
 80008a6:	2a01      	cmp	r2, #1
 80008a8:	d100      	bne.n	80008ac <__aeabi_fadd+0x40>
 80008aa:	e11d      	b.n	8000ae8 <__aeabi_fadd+0x27c>
 80008ac:	2aff      	cmp	r2, #255	@ 0xff
 80008ae:	d100      	bne.n	80008b2 <__aeabi_fadd+0x46>
 80008b0:	e0ab      	b.n	8000a0a <__aeabi_fadd+0x19e>
 80008b2:	000a      	movs	r2, r1
 80008b4:	e027      	b.n	8000906 <__aeabi_fadd+0x9a>
 80008b6:	2a00      	cmp	r2, #0
 80008b8:	d04d      	beq.n	8000956 <__aeabi_fadd+0xea>
 80008ba:	1b42      	subs	r2, r0, r5
 80008bc:	2d00      	cmp	r5, #0
 80008be:	d000      	beq.n	80008c2 <__aeabi_fadd+0x56>
 80008c0:	e0cc      	b.n	8000a5c <__aeabi_fadd+0x1f0>
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d100      	bne.n	80008c8 <__aeabi_fadd+0x5c>
 80008c6:	e079      	b.n	80009bc <__aeabi_fadd+0x150>
 80008c8:	1e54      	subs	r4, r2, #1
 80008ca:	2a01      	cmp	r2, #1
 80008cc:	d100      	bne.n	80008d0 <__aeabi_fadd+0x64>
 80008ce:	e128      	b.n	8000b22 <__aeabi_fadd+0x2b6>
 80008d0:	2aff      	cmp	r2, #255	@ 0xff
 80008d2:	d100      	bne.n	80008d6 <__aeabi_fadd+0x6a>
 80008d4:	e097      	b.n	8000a06 <__aeabi_fadd+0x19a>
 80008d6:	0022      	movs	r2, r4
 80008d8:	e0c5      	b.n	8000a66 <__aeabi_fadd+0x1fa>
 80008da:	2a00      	cmp	r2, #0
 80008dc:	dc00      	bgt.n	80008e0 <__aeabi_fadd+0x74>
 80008de:	e096      	b.n	8000a0e <__aeabi_fadd+0x1a2>
 80008e0:	2800      	cmp	r0, #0
 80008e2:	d04f      	beq.n	8000984 <__aeabi_fadd+0x118>
 80008e4:	2dff      	cmp	r5, #255	@ 0xff
 80008e6:	d100      	bne.n	80008ea <__aeabi_fadd+0x7e>
 80008e8:	e08f      	b.n	8000a0a <__aeabi_fadd+0x19e>
 80008ea:	2180      	movs	r1, #128	@ 0x80
 80008ec:	04c9      	lsls	r1, r1, #19
 80008ee:	430e      	orrs	r6, r1
 80008f0:	2a1b      	cmp	r2, #27
 80008f2:	dd51      	ble.n	8000998 <__aeabi_fadd+0x12c>
 80008f4:	002a      	movs	r2, r5
 80008f6:	3301      	adds	r3, #1
 80008f8:	e018      	b.n	800092c <__aeabi_fadd+0xc0>
 80008fa:	2dff      	cmp	r5, #255	@ 0xff
 80008fc:	d100      	bne.n	8000900 <__aeabi_fadd+0x94>
 80008fe:	e084      	b.n	8000a0a <__aeabi_fadd+0x19e>
 8000900:	2180      	movs	r1, #128	@ 0x80
 8000902:	04c9      	lsls	r1, r1, #19
 8000904:	430e      	orrs	r6, r1
 8000906:	2101      	movs	r1, #1
 8000908:	2a1b      	cmp	r2, #27
 800090a:	dc08      	bgt.n	800091e <__aeabi_fadd+0xb2>
 800090c:	0031      	movs	r1, r6
 800090e:	2020      	movs	r0, #32
 8000910:	40d1      	lsrs	r1, r2
 8000912:	1a82      	subs	r2, r0, r2
 8000914:	4096      	lsls	r6, r2
 8000916:	0032      	movs	r2, r6
 8000918:	1e50      	subs	r0, r2, #1
 800091a:	4182      	sbcs	r2, r0
 800091c:	4311      	orrs	r1, r2
 800091e:	1a5b      	subs	r3, r3, r1
 8000920:	015a      	lsls	r2, r3, #5
 8000922:	d459      	bmi.n	80009d8 <__aeabi_fadd+0x16c>
 8000924:	2107      	movs	r1, #7
 8000926:	002a      	movs	r2, r5
 8000928:	4019      	ands	r1, r3
 800092a:	d049      	beq.n	80009c0 <__aeabi_fadd+0x154>
 800092c:	210f      	movs	r1, #15
 800092e:	4019      	ands	r1, r3
 8000930:	2904      	cmp	r1, #4
 8000932:	d000      	beq.n	8000936 <__aeabi_fadd+0xca>
 8000934:	3304      	adds	r3, #4
 8000936:	0159      	lsls	r1, r3, #5
 8000938:	d542      	bpl.n	80009c0 <__aeabi_fadd+0x154>
 800093a:	1c50      	adds	r0, r2, #1
 800093c:	2afe      	cmp	r2, #254	@ 0xfe
 800093e:	d03a      	beq.n	80009b6 <__aeabi_fadd+0x14a>
 8000940:	019b      	lsls	r3, r3, #6
 8000942:	b2c0      	uxtb	r0, r0
 8000944:	0a5b      	lsrs	r3, r3, #9
 8000946:	05c0      	lsls	r0, r0, #23
 8000948:	4318      	orrs	r0, r3
 800094a:	07e4      	lsls	r4, r4, #31
 800094c:	4320      	orrs	r0, r4
 800094e:	bcc0      	pop	{r6, r7}
 8000950:	46b9      	mov	r9, r7
 8000952:	46b0      	mov	r8, r6
 8000954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000956:	20fe      	movs	r0, #254	@ 0xfe
 8000958:	4680      	mov	r8, r0
 800095a:	1c6f      	adds	r7, r5, #1
 800095c:	0038      	movs	r0, r7
 800095e:	4647      	mov	r7, r8
 8000960:	4207      	tst	r7, r0
 8000962:	d000      	beq.n	8000966 <__aeabi_fadd+0xfa>
 8000964:	e08e      	b.n	8000a84 <__aeabi_fadd+0x218>
 8000966:	2d00      	cmp	r5, #0
 8000968:	d000      	beq.n	800096c <__aeabi_fadd+0x100>
 800096a:	e0b4      	b.n	8000ad6 <__aeabi_fadd+0x26a>
 800096c:	2b00      	cmp	r3, #0
 800096e:	d100      	bne.n	8000972 <__aeabi_fadd+0x106>
 8000970:	e0db      	b.n	8000b2a <__aeabi_fadd+0x2be>
 8000972:	2e00      	cmp	r6, #0
 8000974:	d06c      	beq.n	8000a50 <__aeabi_fadd+0x1e4>
 8000976:	1b98      	subs	r0, r3, r6
 8000978:	0145      	lsls	r5, r0, #5
 800097a:	d400      	bmi.n	800097e <__aeabi_fadd+0x112>
 800097c:	e0f7      	b.n	8000b6e <__aeabi_fadd+0x302>
 800097e:	000c      	movs	r4, r1
 8000980:	1af3      	subs	r3, r6, r3
 8000982:	e03d      	b.n	8000a00 <__aeabi_fadd+0x194>
 8000984:	2e00      	cmp	r6, #0
 8000986:	d01b      	beq.n	80009c0 <__aeabi_fadd+0x154>
 8000988:	1e51      	subs	r1, r2, #1
 800098a:	2a01      	cmp	r2, #1
 800098c:	d100      	bne.n	8000990 <__aeabi_fadd+0x124>
 800098e:	e082      	b.n	8000a96 <__aeabi_fadd+0x22a>
 8000990:	2aff      	cmp	r2, #255	@ 0xff
 8000992:	d03a      	beq.n	8000a0a <__aeabi_fadd+0x19e>
 8000994:	000a      	movs	r2, r1
 8000996:	e7ab      	b.n	80008f0 <__aeabi_fadd+0x84>
 8000998:	0031      	movs	r1, r6
 800099a:	2020      	movs	r0, #32
 800099c:	40d1      	lsrs	r1, r2
 800099e:	1a82      	subs	r2, r0, r2
 80009a0:	4096      	lsls	r6, r2
 80009a2:	0032      	movs	r2, r6
 80009a4:	1e50      	subs	r0, r2, #1
 80009a6:	4182      	sbcs	r2, r0
 80009a8:	430a      	orrs	r2, r1
 80009aa:	189b      	adds	r3, r3, r2
 80009ac:	015a      	lsls	r2, r3, #5
 80009ae:	d5b9      	bpl.n	8000924 <__aeabi_fadd+0xb8>
 80009b0:	1c6a      	adds	r2, r5, #1
 80009b2:	2dfe      	cmp	r5, #254	@ 0xfe
 80009b4:	d175      	bne.n	8000aa2 <__aeabi_fadd+0x236>
 80009b6:	20ff      	movs	r0, #255	@ 0xff
 80009b8:	2300      	movs	r3, #0
 80009ba:	e7c4      	b.n	8000946 <__aeabi_fadd+0xda>
 80009bc:	000c      	movs	r4, r1
 80009be:	0033      	movs	r3, r6
 80009c0:	08db      	lsrs	r3, r3, #3
 80009c2:	2aff      	cmp	r2, #255	@ 0xff
 80009c4:	d146      	bne.n	8000a54 <__aeabi_fadd+0x1e8>
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d0f5      	beq.n	80009b6 <__aeabi_fadd+0x14a>
 80009ca:	2280      	movs	r2, #128	@ 0x80
 80009cc:	03d2      	lsls	r2, r2, #15
 80009ce:	4313      	orrs	r3, r2
 80009d0:	025b      	lsls	r3, r3, #9
 80009d2:	20ff      	movs	r0, #255	@ 0xff
 80009d4:	0a5b      	lsrs	r3, r3, #9
 80009d6:	e7b6      	b.n	8000946 <__aeabi_fadd+0xda>
 80009d8:	019f      	lsls	r7, r3, #6
 80009da:	09bf      	lsrs	r7, r7, #6
 80009dc:	0038      	movs	r0, r7
 80009de:	f002 fdcd 	bl	800357c <__clzsi2>
 80009e2:	3805      	subs	r0, #5
 80009e4:	4087      	lsls	r7, r0
 80009e6:	4285      	cmp	r5, r0
 80009e8:	dc24      	bgt.n	8000a34 <__aeabi_fadd+0x1c8>
 80009ea:	003b      	movs	r3, r7
 80009ec:	2120      	movs	r1, #32
 80009ee:	1b42      	subs	r2, r0, r5
 80009f0:	3201      	adds	r2, #1
 80009f2:	40d3      	lsrs	r3, r2
 80009f4:	1a8a      	subs	r2, r1, r2
 80009f6:	4097      	lsls	r7, r2
 80009f8:	1e7a      	subs	r2, r7, #1
 80009fa:	4197      	sbcs	r7, r2
 80009fc:	2200      	movs	r2, #0
 80009fe:	433b      	orrs	r3, r7
 8000a00:	0759      	lsls	r1, r3, #29
 8000a02:	d193      	bne.n	800092c <__aeabi_fadd+0xc0>
 8000a04:	e797      	b.n	8000936 <__aeabi_fadd+0xca>
 8000a06:	000c      	movs	r4, r1
 8000a08:	0033      	movs	r3, r6
 8000a0a:	08db      	lsrs	r3, r3, #3
 8000a0c:	e7db      	b.n	80009c6 <__aeabi_fadd+0x15a>
 8000a0e:	2a00      	cmp	r2, #0
 8000a10:	d014      	beq.n	8000a3c <__aeabi_fadd+0x1d0>
 8000a12:	1b42      	subs	r2, r0, r5
 8000a14:	2d00      	cmp	r5, #0
 8000a16:	d14b      	bne.n	8000ab0 <__aeabi_fadd+0x244>
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d0d0      	beq.n	80009be <__aeabi_fadd+0x152>
 8000a1c:	1e51      	subs	r1, r2, #1
 8000a1e:	2a01      	cmp	r2, #1
 8000a20:	d100      	bne.n	8000a24 <__aeabi_fadd+0x1b8>
 8000a22:	e09e      	b.n	8000b62 <__aeabi_fadd+0x2f6>
 8000a24:	2aff      	cmp	r2, #255	@ 0xff
 8000a26:	d0ef      	beq.n	8000a08 <__aeabi_fadd+0x19c>
 8000a28:	000a      	movs	r2, r1
 8000a2a:	2a1b      	cmp	r2, #27
 8000a2c:	dd5f      	ble.n	8000aee <__aeabi_fadd+0x282>
 8000a2e:	0002      	movs	r2, r0
 8000a30:	1c73      	adds	r3, r6, #1
 8000a32:	e77b      	b.n	800092c <__aeabi_fadd+0xc0>
 8000a34:	4b50      	ldr	r3, [pc, #320]	@ (8000b78 <__aeabi_fadd+0x30c>)
 8000a36:	1a2a      	subs	r2, r5, r0
 8000a38:	403b      	ands	r3, r7
 8000a3a:	e7e1      	b.n	8000a00 <__aeabi_fadd+0x194>
 8000a3c:	21fe      	movs	r1, #254	@ 0xfe
 8000a3e:	1c6a      	adds	r2, r5, #1
 8000a40:	4211      	tst	r1, r2
 8000a42:	d13b      	bne.n	8000abc <__aeabi_fadd+0x250>
 8000a44:	2d00      	cmp	r5, #0
 8000a46:	d15d      	bne.n	8000b04 <__aeabi_fadd+0x298>
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d07f      	beq.n	8000b4c <__aeabi_fadd+0x2e0>
 8000a4c:	2e00      	cmp	r6, #0
 8000a4e:	d17f      	bne.n	8000b50 <__aeabi_fadd+0x2e4>
 8000a50:	2200      	movs	r2, #0
 8000a52:	08db      	lsrs	r3, r3, #3
 8000a54:	025b      	lsls	r3, r3, #9
 8000a56:	0a5b      	lsrs	r3, r3, #9
 8000a58:	b2d0      	uxtb	r0, r2
 8000a5a:	e774      	b.n	8000946 <__aeabi_fadd+0xda>
 8000a5c:	28ff      	cmp	r0, #255	@ 0xff
 8000a5e:	d0d2      	beq.n	8000a06 <__aeabi_fadd+0x19a>
 8000a60:	2480      	movs	r4, #128	@ 0x80
 8000a62:	04e4      	lsls	r4, r4, #19
 8000a64:	4323      	orrs	r3, r4
 8000a66:	2401      	movs	r4, #1
 8000a68:	2a1b      	cmp	r2, #27
 8000a6a:	dc07      	bgt.n	8000a7c <__aeabi_fadd+0x210>
 8000a6c:	001c      	movs	r4, r3
 8000a6e:	2520      	movs	r5, #32
 8000a70:	40d4      	lsrs	r4, r2
 8000a72:	1aaa      	subs	r2, r5, r2
 8000a74:	4093      	lsls	r3, r2
 8000a76:	1e5a      	subs	r2, r3, #1
 8000a78:	4193      	sbcs	r3, r2
 8000a7a:	431c      	orrs	r4, r3
 8000a7c:	1b33      	subs	r3, r6, r4
 8000a7e:	0005      	movs	r5, r0
 8000a80:	000c      	movs	r4, r1
 8000a82:	e74d      	b.n	8000920 <__aeabi_fadd+0xb4>
 8000a84:	1b9f      	subs	r7, r3, r6
 8000a86:	017a      	lsls	r2, r7, #5
 8000a88:	d422      	bmi.n	8000ad0 <__aeabi_fadd+0x264>
 8000a8a:	2f00      	cmp	r7, #0
 8000a8c:	d1a6      	bne.n	80009dc <__aeabi_fadd+0x170>
 8000a8e:	2400      	movs	r4, #0
 8000a90:	2000      	movs	r0, #0
 8000a92:	2300      	movs	r3, #0
 8000a94:	e757      	b.n	8000946 <__aeabi_fadd+0xda>
 8000a96:	199b      	adds	r3, r3, r6
 8000a98:	2501      	movs	r5, #1
 8000a9a:	3201      	adds	r2, #1
 8000a9c:	0159      	lsls	r1, r3, #5
 8000a9e:	d400      	bmi.n	8000aa2 <__aeabi_fadd+0x236>
 8000aa0:	e740      	b.n	8000924 <__aeabi_fadd+0xb8>
 8000aa2:	2101      	movs	r1, #1
 8000aa4:	4835      	ldr	r0, [pc, #212]	@ (8000b7c <__aeabi_fadd+0x310>)
 8000aa6:	4019      	ands	r1, r3
 8000aa8:	085b      	lsrs	r3, r3, #1
 8000aaa:	4003      	ands	r3, r0
 8000aac:	430b      	orrs	r3, r1
 8000aae:	e7a7      	b.n	8000a00 <__aeabi_fadd+0x194>
 8000ab0:	28ff      	cmp	r0, #255	@ 0xff
 8000ab2:	d0a9      	beq.n	8000a08 <__aeabi_fadd+0x19c>
 8000ab4:	2180      	movs	r1, #128	@ 0x80
 8000ab6:	04c9      	lsls	r1, r1, #19
 8000ab8:	430b      	orrs	r3, r1
 8000aba:	e7b6      	b.n	8000a2a <__aeabi_fadd+0x1be>
 8000abc:	2aff      	cmp	r2, #255	@ 0xff
 8000abe:	d100      	bne.n	8000ac2 <__aeabi_fadd+0x256>
 8000ac0:	e779      	b.n	80009b6 <__aeabi_fadd+0x14a>
 8000ac2:	199b      	adds	r3, r3, r6
 8000ac4:	085b      	lsrs	r3, r3, #1
 8000ac6:	0759      	lsls	r1, r3, #29
 8000ac8:	d000      	beq.n	8000acc <__aeabi_fadd+0x260>
 8000aca:	e72f      	b.n	800092c <__aeabi_fadd+0xc0>
 8000acc:	08db      	lsrs	r3, r3, #3
 8000ace:	e7c1      	b.n	8000a54 <__aeabi_fadd+0x1e8>
 8000ad0:	000c      	movs	r4, r1
 8000ad2:	1af7      	subs	r7, r6, r3
 8000ad4:	e782      	b.n	80009dc <__aeabi_fadd+0x170>
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d12c      	bne.n	8000b34 <__aeabi_fadd+0x2c8>
 8000ada:	2e00      	cmp	r6, #0
 8000adc:	d193      	bne.n	8000a06 <__aeabi_fadd+0x19a>
 8000ade:	2380      	movs	r3, #128	@ 0x80
 8000ae0:	2400      	movs	r4, #0
 8000ae2:	20ff      	movs	r0, #255	@ 0xff
 8000ae4:	03db      	lsls	r3, r3, #15
 8000ae6:	e72e      	b.n	8000946 <__aeabi_fadd+0xda>
 8000ae8:	2501      	movs	r5, #1
 8000aea:	1b9b      	subs	r3, r3, r6
 8000aec:	e718      	b.n	8000920 <__aeabi_fadd+0xb4>
 8000aee:	0019      	movs	r1, r3
 8000af0:	2520      	movs	r5, #32
 8000af2:	40d1      	lsrs	r1, r2
 8000af4:	1aaa      	subs	r2, r5, r2
 8000af6:	4093      	lsls	r3, r2
 8000af8:	1e5a      	subs	r2, r3, #1
 8000afa:	4193      	sbcs	r3, r2
 8000afc:	430b      	orrs	r3, r1
 8000afe:	0005      	movs	r5, r0
 8000b00:	199b      	adds	r3, r3, r6
 8000b02:	e753      	b.n	80009ac <__aeabi_fadd+0x140>
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d100      	bne.n	8000b0a <__aeabi_fadd+0x29e>
 8000b08:	e77e      	b.n	8000a08 <__aeabi_fadd+0x19c>
 8000b0a:	2e00      	cmp	r6, #0
 8000b0c:	d100      	bne.n	8000b10 <__aeabi_fadd+0x2a4>
 8000b0e:	e77c      	b.n	8000a0a <__aeabi_fadd+0x19e>
 8000b10:	2280      	movs	r2, #128	@ 0x80
 8000b12:	03d2      	lsls	r2, r2, #15
 8000b14:	4591      	cmp	r9, r2
 8000b16:	d302      	bcc.n	8000b1e <__aeabi_fadd+0x2b2>
 8000b18:	4594      	cmp	ip, r2
 8000b1a:	d200      	bcs.n	8000b1e <__aeabi_fadd+0x2b2>
 8000b1c:	0033      	movs	r3, r6
 8000b1e:	08db      	lsrs	r3, r3, #3
 8000b20:	e753      	b.n	80009ca <__aeabi_fadd+0x15e>
 8000b22:	000c      	movs	r4, r1
 8000b24:	1af3      	subs	r3, r6, r3
 8000b26:	3501      	adds	r5, #1
 8000b28:	e6fa      	b.n	8000920 <__aeabi_fadd+0xb4>
 8000b2a:	2e00      	cmp	r6, #0
 8000b2c:	d0af      	beq.n	8000a8e <__aeabi_fadd+0x222>
 8000b2e:	000c      	movs	r4, r1
 8000b30:	0033      	movs	r3, r6
 8000b32:	e78d      	b.n	8000a50 <__aeabi_fadd+0x1e4>
 8000b34:	2e00      	cmp	r6, #0
 8000b36:	d100      	bne.n	8000b3a <__aeabi_fadd+0x2ce>
 8000b38:	e767      	b.n	8000a0a <__aeabi_fadd+0x19e>
 8000b3a:	2280      	movs	r2, #128	@ 0x80
 8000b3c:	03d2      	lsls	r2, r2, #15
 8000b3e:	4591      	cmp	r9, r2
 8000b40:	d3ed      	bcc.n	8000b1e <__aeabi_fadd+0x2b2>
 8000b42:	4594      	cmp	ip, r2
 8000b44:	d2eb      	bcs.n	8000b1e <__aeabi_fadd+0x2b2>
 8000b46:	000c      	movs	r4, r1
 8000b48:	0033      	movs	r3, r6
 8000b4a:	e7e8      	b.n	8000b1e <__aeabi_fadd+0x2b2>
 8000b4c:	0033      	movs	r3, r6
 8000b4e:	e77f      	b.n	8000a50 <__aeabi_fadd+0x1e4>
 8000b50:	199b      	adds	r3, r3, r6
 8000b52:	2200      	movs	r2, #0
 8000b54:	0159      	lsls	r1, r3, #5
 8000b56:	d5b9      	bpl.n	8000acc <__aeabi_fadd+0x260>
 8000b58:	4a07      	ldr	r2, [pc, #28]	@ (8000b78 <__aeabi_fadd+0x30c>)
 8000b5a:	4013      	ands	r3, r2
 8000b5c:	08db      	lsrs	r3, r3, #3
 8000b5e:	2201      	movs	r2, #1
 8000b60:	e778      	b.n	8000a54 <__aeabi_fadd+0x1e8>
 8000b62:	199b      	adds	r3, r3, r6
 8000b64:	3201      	adds	r2, #1
 8000b66:	3501      	adds	r5, #1
 8000b68:	0159      	lsls	r1, r3, #5
 8000b6a:	d49a      	bmi.n	8000aa2 <__aeabi_fadd+0x236>
 8000b6c:	e6da      	b.n	8000924 <__aeabi_fadd+0xb8>
 8000b6e:	1e03      	subs	r3, r0, #0
 8000b70:	d08d      	beq.n	8000a8e <__aeabi_fadd+0x222>
 8000b72:	08db      	lsrs	r3, r3, #3
 8000b74:	e76e      	b.n	8000a54 <__aeabi_fadd+0x1e8>
 8000b76:	46c0      	nop			@ (mov r8, r8)
 8000b78:	fbffffff 	.word	0xfbffffff
 8000b7c:	7dffffff 	.word	0x7dffffff

08000b80 <__aeabi_fdiv>:
 8000b80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b82:	464f      	mov	r7, r9
 8000b84:	4646      	mov	r6, r8
 8000b86:	46d6      	mov	lr, sl
 8000b88:	0244      	lsls	r4, r0, #9
 8000b8a:	b5c0      	push	{r6, r7, lr}
 8000b8c:	0047      	lsls	r7, r0, #1
 8000b8e:	1c0e      	adds	r6, r1, #0
 8000b90:	0a64      	lsrs	r4, r4, #9
 8000b92:	0e3f      	lsrs	r7, r7, #24
 8000b94:	0fc5      	lsrs	r5, r0, #31
 8000b96:	2f00      	cmp	r7, #0
 8000b98:	d03c      	beq.n	8000c14 <__aeabi_fdiv+0x94>
 8000b9a:	2fff      	cmp	r7, #255	@ 0xff
 8000b9c:	d042      	beq.n	8000c24 <__aeabi_fdiv+0xa4>
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	2280      	movs	r2, #128	@ 0x80
 8000ba2:	4699      	mov	r9, r3
 8000ba4:	469a      	mov	sl, r3
 8000ba6:	00e4      	lsls	r4, r4, #3
 8000ba8:	04d2      	lsls	r2, r2, #19
 8000baa:	4314      	orrs	r4, r2
 8000bac:	3f7f      	subs	r7, #127	@ 0x7f
 8000bae:	0273      	lsls	r3, r6, #9
 8000bb0:	0a5b      	lsrs	r3, r3, #9
 8000bb2:	4698      	mov	r8, r3
 8000bb4:	0073      	lsls	r3, r6, #1
 8000bb6:	0e1b      	lsrs	r3, r3, #24
 8000bb8:	0ff6      	lsrs	r6, r6, #31
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d01b      	beq.n	8000bf6 <__aeabi_fdiv+0x76>
 8000bbe:	2bff      	cmp	r3, #255	@ 0xff
 8000bc0:	d013      	beq.n	8000bea <__aeabi_fdiv+0x6a>
 8000bc2:	4642      	mov	r2, r8
 8000bc4:	2180      	movs	r1, #128	@ 0x80
 8000bc6:	00d2      	lsls	r2, r2, #3
 8000bc8:	04c9      	lsls	r1, r1, #19
 8000bca:	4311      	orrs	r1, r2
 8000bcc:	4688      	mov	r8, r1
 8000bce:	2000      	movs	r0, #0
 8000bd0:	3b7f      	subs	r3, #127	@ 0x7f
 8000bd2:	0029      	movs	r1, r5
 8000bd4:	1aff      	subs	r7, r7, r3
 8000bd6:	464b      	mov	r3, r9
 8000bd8:	4071      	eors	r1, r6
 8000bda:	b2c9      	uxtb	r1, r1
 8000bdc:	2b0f      	cmp	r3, #15
 8000bde:	d900      	bls.n	8000be2 <__aeabi_fdiv+0x62>
 8000be0:	e0b5      	b.n	8000d4e <__aeabi_fdiv+0x1ce>
 8000be2:	4a74      	ldr	r2, [pc, #464]	@ (8000db4 <__aeabi_fdiv+0x234>)
 8000be4:	009b      	lsls	r3, r3, #2
 8000be6:	58d3      	ldr	r3, [r2, r3]
 8000be8:	469f      	mov	pc, r3
 8000bea:	4643      	mov	r3, r8
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d13f      	bne.n	8000c70 <__aeabi_fdiv+0xf0>
 8000bf0:	3fff      	subs	r7, #255	@ 0xff
 8000bf2:	3302      	adds	r3, #2
 8000bf4:	e003      	b.n	8000bfe <__aeabi_fdiv+0x7e>
 8000bf6:	4643      	mov	r3, r8
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d12d      	bne.n	8000c58 <__aeabi_fdiv+0xd8>
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	0029      	movs	r1, r5
 8000c00:	464a      	mov	r2, r9
 8000c02:	4071      	eors	r1, r6
 8000c04:	b2c9      	uxtb	r1, r1
 8000c06:	431a      	orrs	r2, r3
 8000c08:	2a0e      	cmp	r2, #14
 8000c0a:	d838      	bhi.n	8000c7e <__aeabi_fdiv+0xfe>
 8000c0c:	486a      	ldr	r0, [pc, #424]	@ (8000db8 <__aeabi_fdiv+0x238>)
 8000c0e:	0092      	lsls	r2, r2, #2
 8000c10:	5882      	ldr	r2, [r0, r2]
 8000c12:	4697      	mov	pc, r2
 8000c14:	2c00      	cmp	r4, #0
 8000c16:	d113      	bne.n	8000c40 <__aeabi_fdiv+0xc0>
 8000c18:	2304      	movs	r3, #4
 8000c1a:	4699      	mov	r9, r3
 8000c1c:	3b03      	subs	r3, #3
 8000c1e:	2700      	movs	r7, #0
 8000c20:	469a      	mov	sl, r3
 8000c22:	e7c4      	b.n	8000bae <__aeabi_fdiv+0x2e>
 8000c24:	2c00      	cmp	r4, #0
 8000c26:	d105      	bne.n	8000c34 <__aeabi_fdiv+0xb4>
 8000c28:	2308      	movs	r3, #8
 8000c2a:	4699      	mov	r9, r3
 8000c2c:	3b06      	subs	r3, #6
 8000c2e:	27ff      	movs	r7, #255	@ 0xff
 8000c30:	469a      	mov	sl, r3
 8000c32:	e7bc      	b.n	8000bae <__aeabi_fdiv+0x2e>
 8000c34:	230c      	movs	r3, #12
 8000c36:	4699      	mov	r9, r3
 8000c38:	3b09      	subs	r3, #9
 8000c3a:	27ff      	movs	r7, #255	@ 0xff
 8000c3c:	469a      	mov	sl, r3
 8000c3e:	e7b6      	b.n	8000bae <__aeabi_fdiv+0x2e>
 8000c40:	0020      	movs	r0, r4
 8000c42:	f002 fc9b 	bl	800357c <__clzsi2>
 8000c46:	2776      	movs	r7, #118	@ 0x76
 8000c48:	1f43      	subs	r3, r0, #5
 8000c4a:	409c      	lsls	r4, r3
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	427f      	negs	r7, r7
 8000c50:	4699      	mov	r9, r3
 8000c52:	469a      	mov	sl, r3
 8000c54:	1a3f      	subs	r7, r7, r0
 8000c56:	e7aa      	b.n	8000bae <__aeabi_fdiv+0x2e>
 8000c58:	4640      	mov	r0, r8
 8000c5a:	f002 fc8f 	bl	800357c <__clzsi2>
 8000c5e:	4642      	mov	r2, r8
 8000c60:	1f43      	subs	r3, r0, #5
 8000c62:	409a      	lsls	r2, r3
 8000c64:	2376      	movs	r3, #118	@ 0x76
 8000c66:	425b      	negs	r3, r3
 8000c68:	1a1b      	subs	r3, r3, r0
 8000c6a:	4690      	mov	r8, r2
 8000c6c:	2000      	movs	r0, #0
 8000c6e:	e7b0      	b.n	8000bd2 <__aeabi_fdiv+0x52>
 8000c70:	2303      	movs	r3, #3
 8000c72:	464a      	mov	r2, r9
 8000c74:	431a      	orrs	r2, r3
 8000c76:	4691      	mov	r9, r2
 8000c78:	2003      	movs	r0, #3
 8000c7a:	33fc      	adds	r3, #252	@ 0xfc
 8000c7c:	e7a9      	b.n	8000bd2 <__aeabi_fdiv+0x52>
 8000c7e:	000d      	movs	r5, r1
 8000c80:	20ff      	movs	r0, #255	@ 0xff
 8000c82:	2200      	movs	r2, #0
 8000c84:	05c0      	lsls	r0, r0, #23
 8000c86:	07ed      	lsls	r5, r5, #31
 8000c88:	4310      	orrs	r0, r2
 8000c8a:	4328      	orrs	r0, r5
 8000c8c:	bce0      	pop	{r5, r6, r7}
 8000c8e:	46ba      	mov	sl, r7
 8000c90:	46b1      	mov	r9, r6
 8000c92:	46a8      	mov	r8, r5
 8000c94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c96:	000d      	movs	r5, r1
 8000c98:	2000      	movs	r0, #0
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	e7f2      	b.n	8000c84 <__aeabi_fdiv+0x104>
 8000c9e:	4653      	mov	r3, sl
 8000ca0:	2b02      	cmp	r3, #2
 8000ca2:	d0ed      	beq.n	8000c80 <__aeabi_fdiv+0x100>
 8000ca4:	2b03      	cmp	r3, #3
 8000ca6:	d033      	beq.n	8000d10 <__aeabi_fdiv+0x190>
 8000ca8:	46a0      	mov	r8, r4
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	d105      	bne.n	8000cba <__aeabi_fdiv+0x13a>
 8000cae:	2000      	movs	r0, #0
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	e7e7      	b.n	8000c84 <__aeabi_fdiv+0x104>
 8000cb4:	0035      	movs	r5, r6
 8000cb6:	2803      	cmp	r0, #3
 8000cb8:	d07a      	beq.n	8000db0 <__aeabi_fdiv+0x230>
 8000cba:	003b      	movs	r3, r7
 8000cbc:	337f      	adds	r3, #127	@ 0x7f
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	dd2d      	ble.n	8000d1e <__aeabi_fdiv+0x19e>
 8000cc2:	4642      	mov	r2, r8
 8000cc4:	0752      	lsls	r2, r2, #29
 8000cc6:	d007      	beq.n	8000cd8 <__aeabi_fdiv+0x158>
 8000cc8:	220f      	movs	r2, #15
 8000cca:	4641      	mov	r1, r8
 8000ccc:	400a      	ands	r2, r1
 8000cce:	2a04      	cmp	r2, #4
 8000cd0:	d002      	beq.n	8000cd8 <__aeabi_fdiv+0x158>
 8000cd2:	2204      	movs	r2, #4
 8000cd4:	4694      	mov	ip, r2
 8000cd6:	44e0      	add	r8, ip
 8000cd8:	4642      	mov	r2, r8
 8000cda:	0112      	lsls	r2, r2, #4
 8000cdc:	d505      	bpl.n	8000cea <__aeabi_fdiv+0x16a>
 8000cde:	4642      	mov	r2, r8
 8000ce0:	4b36      	ldr	r3, [pc, #216]	@ (8000dbc <__aeabi_fdiv+0x23c>)
 8000ce2:	401a      	ands	r2, r3
 8000ce4:	003b      	movs	r3, r7
 8000ce6:	4690      	mov	r8, r2
 8000ce8:	3380      	adds	r3, #128	@ 0x80
 8000cea:	2bfe      	cmp	r3, #254	@ 0xfe
 8000cec:	dcc8      	bgt.n	8000c80 <__aeabi_fdiv+0x100>
 8000cee:	4642      	mov	r2, r8
 8000cf0:	0192      	lsls	r2, r2, #6
 8000cf2:	0a52      	lsrs	r2, r2, #9
 8000cf4:	b2d8      	uxtb	r0, r3
 8000cf6:	e7c5      	b.n	8000c84 <__aeabi_fdiv+0x104>
 8000cf8:	2280      	movs	r2, #128	@ 0x80
 8000cfa:	2500      	movs	r5, #0
 8000cfc:	20ff      	movs	r0, #255	@ 0xff
 8000cfe:	03d2      	lsls	r2, r2, #15
 8000d00:	e7c0      	b.n	8000c84 <__aeabi_fdiv+0x104>
 8000d02:	2280      	movs	r2, #128	@ 0x80
 8000d04:	03d2      	lsls	r2, r2, #15
 8000d06:	4214      	tst	r4, r2
 8000d08:	d002      	beq.n	8000d10 <__aeabi_fdiv+0x190>
 8000d0a:	4643      	mov	r3, r8
 8000d0c:	4213      	tst	r3, r2
 8000d0e:	d049      	beq.n	8000da4 <__aeabi_fdiv+0x224>
 8000d10:	2280      	movs	r2, #128	@ 0x80
 8000d12:	03d2      	lsls	r2, r2, #15
 8000d14:	4322      	orrs	r2, r4
 8000d16:	0252      	lsls	r2, r2, #9
 8000d18:	20ff      	movs	r0, #255	@ 0xff
 8000d1a:	0a52      	lsrs	r2, r2, #9
 8000d1c:	e7b2      	b.n	8000c84 <__aeabi_fdiv+0x104>
 8000d1e:	2201      	movs	r2, #1
 8000d20:	1ad3      	subs	r3, r2, r3
 8000d22:	2b1b      	cmp	r3, #27
 8000d24:	dcc3      	bgt.n	8000cae <__aeabi_fdiv+0x12e>
 8000d26:	4642      	mov	r2, r8
 8000d28:	40da      	lsrs	r2, r3
 8000d2a:	4643      	mov	r3, r8
 8000d2c:	379e      	adds	r7, #158	@ 0x9e
 8000d2e:	40bb      	lsls	r3, r7
 8000d30:	1e59      	subs	r1, r3, #1
 8000d32:	418b      	sbcs	r3, r1
 8000d34:	431a      	orrs	r2, r3
 8000d36:	0753      	lsls	r3, r2, #29
 8000d38:	d004      	beq.n	8000d44 <__aeabi_fdiv+0x1c4>
 8000d3a:	230f      	movs	r3, #15
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	2b04      	cmp	r3, #4
 8000d40:	d000      	beq.n	8000d44 <__aeabi_fdiv+0x1c4>
 8000d42:	3204      	adds	r2, #4
 8000d44:	0153      	lsls	r3, r2, #5
 8000d46:	d529      	bpl.n	8000d9c <__aeabi_fdiv+0x21c>
 8000d48:	2001      	movs	r0, #1
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	e79a      	b.n	8000c84 <__aeabi_fdiv+0x104>
 8000d4e:	4642      	mov	r2, r8
 8000d50:	0163      	lsls	r3, r4, #5
 8000d52:	0155      	lsls	r5, r2, #5
 8000d54:	42ab      	cmp	r3, r5
 8000d56:	d215      	bcs.n	8000d84 <__aeabi_fdiv+0x204>
 8000d58:	201b      	movs	r0, #27
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	3f01      	subs	r7, #1
 8000d5e:	2601      	movs	r6, #1
 8000d60:	001c      	movs	r4, r3
 8000d62:	0052      	lsls	r2, r2, #1
 8000d64:	005b      	lsls	r3, r3, #1
 8000d66:	2c00      	cmp	r4, #0
 8000d68:	db01      	blt.n	8000d6e <__aeabi_fdiv+0x1ee>
 8000d6a:	429d      	cmp	r5, r3
 8000d6c:	d801      	bhi.n	8000d72 <__aeabi_fdiv+0x1f2>
 8000d6e:	1b5b      	subs	r3, r3, r5
 8000d70:	4332      	orrs	r2, r6
 8000d72:	3801      	subs	r0, #1
 8000d74:	2800      	cmp	r0, #0
 8000d76:	d1f3      	bne.n	8000d60 <__aeabi_fdiv+0x1e0>
 8000d78:	1e58      	subs	r0, r3, #1
 8000d7a:	4183      	sbcs	r3, r0
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	4698      	mov	r8, r3
 8000d80:	000d      	movs	r5, r1
 8000d82:	e79a      	b.n	8000cba <__aeabi_fdiv+0x13a>
 8000d84:	201a      	movs	r0, #26
 8000d86:	2201      	movs	r2, #1
 8000d88:	1b5b      	subs	r3, r3, r5
 8000d8a:	e7e8      	b.n	8000d5e <__aeabi_fdiv+0x1de>
 8000d8c:	3b02      	subs	r3, #2
 8000d8e:	425a      	negs	r2, r3
 8000d90:	4153      	adcs	r3, r2
 8000d92:	425b      	negs	r3, r3
 8000d94:	0035      	movs	r5, r6
 8000d96:	2200      	movs	r2, #0
 8000d98:	b2d8      	uxtb	r0, r3
 8000d9a:	e773      	b.n	8000c84 <__aeabi_fdiv+0x104>
 8000d9c:	0192      	lsls	r2, r2, #6
 8000d9e:	2000      	movs	r0, #0
 8000da0:	0a52      	lsrs	r2, r2, #9
 8000da2:	e76f      	b.n	8000c84 <__aeabi_fdiv+0x104>
 8000da4:	431a      	orrs	r2, r3
 8000da6:	0252      	lsls	r2, r2, #9
 8000da8:	0035      	movs	r5, r6
 8000daa:	20ff      	movs	r0, #255	@ 0xff
 8000dac:	0a52      	lsrs	r2, r2, #9
 8000dae:	e769      	b.n	8000c84 <__aeabi_fdiv+0x104>
 8000db0:	4644      	mov	r4, r8
 8000db2:	e7ad      	b.n	8000d10 <__aeabi_fdiv+0x190>
 8000db4:	08010ec8 	.word	0x08010ec8
 8000db8:	08010f08 	.word	0x08010f08
 8000dbc:	f7ffffff 	.word	0xf7ffffff

08000dc0 <__eqsf2>:
 8000dc0:	b570      	push	{r4, r5, r6, lr}
 8000dc2:	0042      	lsls	r2, r0, #1
 8000dc4:	024e      	lsls	r6, r1, #9
 8000dc6:	004c      	lsls	r4, r1, #1
 8000dc8:	0245      	lsls	r5, r0, #9
 8000dca:	0a6d      	lsrs	r5, r5, #9
 8000dcc:	0e12      	lsrs	r2, r2, #24
 8000dce:	0fc3      	lsrs	r3, r0, #31
 8000dd0:	0a76      	lsrs	r6, r6, #9
 8000dd2:	0e24      	lsrs	r4, r4, #24
 8000dd4:	0fc9      	lsrs	r1, r1, #31
 8000dd6:	2aff      	cmp	r2, #255	@ 0xff
 8000dd8:	d010      	beq.n	8000dfc <__eqsf2+0x3c>
 8000dda:	2cff      	cmp	r4, #255	@ 0xff
 8000ddc:	d00c      	beq.n	8000df8 <__eqsf2+0x38>
 8000dde:	2001      	movs	r0, #1
 8000de0:	42a2      	cmp	r2, r4
 8000de2:	d10a      	bne.n	8000dfa <__eqsf2+0x3a>
 8000de4:	42b5      	cmp	r5, r6
 8000de6:	d108      	bne.n	8000dfa <__eqsf2+0x3a>
 8000de8:	428b      	cmp	r3, r1
 8000dea:	d00f      	beq.n	8000e0c <__eqsf2+0x4c>
 8000dec:	2a00      	cmp	r2, #0
 8000dee:	d104      	bne.n	8000dfa <__eqsf2+0x3a>
 8000df0:	0028      	movs	r0, r5
 8000df2:	1e43      	subs	r3, r0, #1
 8000df4:	4198      	sbcs	r0, r3
 8000df6:	e000      	b.n	8000dfa <__eqsf2+0x3a>
 8000df8:	2001      	movs	r0, #1
 8000dfa:	bd70      	pop	{r4, r5, r6, pc}
 8000dfc:	2001      	movs	r0, #1
 8000dfe:	2cff      	cmp	r4, #255	@ 0xff
 8000e00:	d1fb      	bne.n	8000dfa <__eqsf2+0x3a>
 8000e02:	4335      	orrs	r5, r6
 8000e04:	d1f9      	bne.n	8000dfa <__eqsf2+0x3a>
 8000e06:	404b      	eors	r3, r1
 8000e08:	0018      	movs	r0, r3
 8000e0a:	e7f6      	b.n	8000dfa <__eqsf2+0x3a>
 8000e0c:	2000      	movs	r0, #0
 8000e0e:	e7f4      	b.n	8000dfa <__eqsf2+0x3a>

08000e10 <__gesf2>:
 8000e10:	b530      	push	{r4, r5, lr}
 8000e12:	0042      	lsls	r2, r0, #1
 8000e14:	0244      	lsls	r4, r0, #9
 8000e16:	024d      	lsls	r5, r1, #9
 8000e18:	0fc3      	lsrs	r3, r0, #31
 8000e1a:	0048      	lsls	r0, r1, #1
 8000e1c:	0a64      	lsrs	r4, r4, #9
 8000e1e:	0e12      	lsrs	r2, r2, #24
 8000e20:	0a6d      	lsrs	r5, r5, #9
 8000e22:	0e00      	lsrs	r0, r0, #24
 8000e24:	0fc9      	lsrs	r1, r1, #31
 8000e26:	2aff      	cmp	r2, #255	@ 0xff
 8000e28:	d019      	beq.n	8000e5e <__gesf2+0x4e>
 8000e2a:	28ff      	cmp	r0, #255	@ 0xff
 8000e2c:	d00b      	beq.n	8000e46 <__gesf2+0x36>
 8000e2e:	2a00      	cmp	r2, #0
 8000e30:	d11e      	bne.n	8000e70 <__gesf2+0x60>
 8000e32:	2800      	cmp	r0, #0
 8000e34:	d10b      	bne.n	8000e4e <__gesf2+0x3e>
 8000e36:	2d00      	cmp	r5, #0
 8000e38:	d027      	beq.n	8000e8a <__gesf2+0x7a>
 8000e3a:	2c00      	cmp	r4, #0
 8000e3c:	d134      	bne.n	8000ea8 <__gesf2+0x98>
 8000e3e:	2900      	cmp	r1, #0
 8000e40:	d02f      	beq.n	8000ea2 <__gesf2+0x92>
 8000e42:	0008      	movs	r0, r1
 8000e44:	bd30      	pop	{r4, r5, pc}
 8000e46:	2d00      	cmp	r5, #0
 8000e48:	d128      	bne.n	8000e9c <__gesf2+0x8c>
 8000e4a:	2a00      	cmp	r2, #0
 8000e4c:	d101      	bne.n	8000e52 <__gesf2+0x42>
 8000e4e:	2c00      	cmp	r4, #0
 8000e50:	d0f5      	beq.n	8000e3e <__gesf2+0x2e>
 8000e52:	428b      	cmp	r3, r1
 8000e54:	d107      	bne.n	8000e66 <__gesf2+0x56>
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d023      	beq.n	8000ea2 <__gesf2+0x92>
 8000e5a:	0018      	movs	r0, r3
 8000e5c:	e7f2      	b.n	8000e44 <__gesf2+0x34>
 8000e5e:	2c00      	cmp	r4, #0
 8000e60:	d11c      	bne.n	8000e9c <__gesf2+0x8c>
 8000e62:	28ff      	cmp	r0, #255	@ 0xff
 8000e64:	d014      	beq.n	8000e90 <__gesf2+0x80>
 8000e66:	1e58      	subs	r0, r3, #1
 8000e68:	2302      	movs	r3, #2
 8000e6a:	4018      	ands	r0, r3
 8000e6c:	3801      	subs	r0, #1
 8000e6e:	e7e9      	b.n	8000e44 <__gesf2+0x34>
 8000e70:	2800      	cmp	r0, #0
 8000e72:	d0f8      	beq.n	8000e66 <__gesf2+0x56>
 8000e74:	428b      	cmp	r3, r1
 8000e76:	d1f6      	bne.n	8000e66 <__gesf2+0x56>
 8000e78:	4282      	cmp	r2, r0
 8000e7a:	dcf4      	bgt.n	8000e66 <__gesf2+0x56>
 8000e7c:	dbeb      	blt.n	8000e56 <__gesf2+0x46>
 8000e7e:	42ac      	cmp	r4, r5
 8000e80:	d8f1      	bhi.n	8000e66 <__gesf2+0x56>
 8000e82:	2000      	movs	r0, #0
 8000e84:	42ac      	cmp	r4, r5
 8000e86:	d2dd      	bcs.n	8000e44 <__gesf2+0x34>
 8000e88:	e7e5      	b.n	8000e56 <__gesf2+0x46>
 8000e8a:	2c00      	cmp	r4, #0
 8000e8c:	d0da      	beq.n	8000e44 <__gesf2+0x34>
 8000e8e:	e7ea      	b.n	8000e66 <__gesf2+0x56>
 8000e90:	2d00      	cmp	r5, #0
 8000e92:	d103      	bne.n	8000e9c <__gesf2+0x8c>
 8000e94:	428b      	cmp	r3, r1
 8000e96:	d1e6      	bne.n	8000e66 <__gesf2+0x56>
 8000e98:	2000      	movs	r0, #0
 8000e9a:	e7d3      	b.n	8000e44 <__gesf2+0x34>
 8000e9c:	2002      	movs	r0, #2
 8000e9e:	4240      	negs	r0, r0
 8000ea0:	e7d0      	b.n	8000e44 <__gesf2+0x34>
 8000ea2:	2001      	movs	r0, #1
 8000ea4:	4240      	negs	r0, r0
 8000ea6:	e7cd      	b.n	8000e44 <__gesf2+0x34>
 8000ea8:	428b      	cmp	r3, r1
 8000eaa:	d0e8      	beq.n	8000e7e <__gesf2+0x6e>
 8000eac:	e7db      	b.n	8000e66 <__gesf2+0x56>
 8000eae:	46c0      	nop			@ (mov r8, r8)

08000eb0 <__lesf2>:
 8000eb0:	b530      	push	{r4, r5, lr}
 8000eb2:	0042      	lsls	r2, r0, #1
 8000eb4:	0244      	lsls	r4, r0, #9
 8000eb6:	024d      	lsls	r5, r1, #9
 8000eb8:	0fc3      	lsrs	r3, r0, #31
 8000eba:	0048      	lsls	r0, r1, #1
 8000ebc:	0a64      	lsrs	r4, r4, #9
 8000ebe:	0e12      	lsrs	r2, r2, #24
 8000ec0:	0a6d      	lsrs	r5, r5, #9
 8000ec2:	0e00      	lsrs	r0, r0, #24
 8000ec4:	0fc9      	lsrs	r1, r1, #31
 8000ec6:	2aff      	cmp	r2, #255	@ 0xff
 8000ec8:	d01a      	beq.n	8000f00 <__lesf2+0x50>
 8000eca:	28ff      	cmp	r0, #255	@ 0xff
 8000ecc:	d00e      	beq.n	8000eec <__lesf2+0x3c>
 8000ece:	2a00      	cmp	r2, #0
 8000ed0:	d11e      	bne.n	8000f10 <__lesf2+0x60>
 8000ed2:	2800      	cmp	r0, #0
 8000ed4:	d10e      	bne.n	8000ef4 <__lesf2+0x44>
 8000ed6:	2d00      	cmp	r5, #0
 8000ed8:	d02a      	beq.n	8000f30 <__lesf2+0x80>
 8000eda:	2c00      	cmp	r4, #0
 8000edc:	d00c      	beq.n	8000ef8 <__lesf2+0x48>
 8000ede:	428b      	cmp	r3, r1
 8000ee0:	d01d      	beq.n	8000f1e <__lesf2+0x6e>
 8000ee2:	1e58      	subs	r0, r3, #1
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	4018      	ands	r0, r3
 8000ee8:	3801      	subs	r0, #1
 8000eea:	e010      	b.n	8000f0e <__lesf2+0x5e>
 8000eec:	2d00      	cmp	r5, #0
 8000eee:	d10d      	bne.n	8000f0c <__lesf2+0x5c>
 8000ef0:	2a00      	cmp	r2, #0
 8000ef2:	d120      	bne.n	8000f36 <__lesf2+0x86>
 8000ef4:	2c00      	cmp	r4, #0
 8000ef6:	d11e      	bne.n	8000f36 <__lesf2+0x86>
 8000ef8:	2900      	cmp	r1, #0
 8000efa:	d023      	beq.n	8000f44 <__lesf2+0x94>
 8000efc:	0008      	movs	r0, r1
 8000efe:	e006      	b.n	8000f0e <__lesf2+0x5e>
 8000f00:	2c00      	cmp	r4, #0
 8000f02:	d103      	bne.n	8000f0c <__lesf2+0x5c>
 8000f04:	28ff      	cmp	r0, #255	@ 0xff
 8000f06:	d1ec      	bne.n	8000ee2 <__lesf2+0x32>
 8000f08:	2d00      	cmp	r5, #0
 8000f0a:	d017      	beq.n	8000f3c <__lesf2+0x8c>
 8000f0c:	2002      	movs	r0, #2
 8000f0e:	bd30      	pop	{r4, r5, pc}
 8000f10:	2800      	cmp	r0, #0
 8000f12:	d0e6      	beq.n	8000ee2 <__lesf2+0x32>
 8000f14:	428b      	cmp	r3, r1
 8000f16:	d1e4      	bne.n	8000ee2 <__lesf2+0x32>
 8000f18:	4282      	cmp	r2, r0
 8000f1a:	dce2      	bgt.n	8000ee2 <__lesf2+0x32>
 8000f1c:	db04      	blt.n	8000f28 <__lesf2+0x78>
 8000f1e:	42ac      	cmp	r4, r5
 8000f20:	d8df      	bhi.n	8000ee2 <__lesf2+0x32>
 8000f22:	2000      	movs	r0, #0
 8000f24:	42ac      	cmp	r4, r5
 8000f26:	d2f2      	bcs.n	8000f0e <__lesf2+0x5e>
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d00b      	beq.n	8000f44 <__lesf2+0x94>
 8000f2c:	0018      	movs	r0, r3
 8000f2e:	e7ee      	b.n	8000f0e <__lesf2+0x5e>
 8000f30:	2c00      	cmp	r4, #0
 8000f32:	d0ec      	beq.n	8000f0e <__lesf2+0x5e>
 8000f34:	e7d5      	b.n	8000ee2 <__lesf2+0x32>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d1d3      	bne.n	8000ee2 <__lesf2+0x32>
 8000f3a:	e7f5      	b.n	8000f28 <__lesf2+0x78>
 8000f3c:	2000      	movs	r0, #0
 8000f3e:	428b      	cmp	r3, r1
 8000f40:	d0e5      	beq.n	8000f0e <__lesf2+0x5e>
 8000f42:	e7ce      	b.n	8000ee2 <__lesf2+0x32>
 8000f44:	2001      	movs	r0, #1
 8000f46:	4240      	negs	r0, r0
 8000f48:	e7e1      	b.n	8000f0e <__lesf2+0x5e>
 8000f4a:	46c0      	nop			@ (mov r8, r8)

08000f4c <__aeabi_fmul>:
 8000f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f4e:	464f      	mov	r7, r9
 8000f50:	4646      	mov	r6, r8
 8000f52:	46d6      	mov	lr, sl
 8000f54:	0243      	lsls	r3, r0, #9
 8000f56:	0a5b      	lsrs	r3, r3, #9
 8000f58:	0045      	lsls	r5, r0, #1
 8000f5a:	b5c0      	push	{r6, r7, lr}
 8000f5c:	4699      	mov	r9, r3
 8000f5e:	1c0f      	adds	r7, r1, #0
 8000f60:	0e2d      	lsrs	r5, r5, #24
 8000f62:	0fc6      	lsrs	r6, r0, #31
 8000f64:	2d00      	cmp	r5, #0
 8000f66:	d100      	bne.n	8000f6a <__aeabi_fmul+0x1e>
 8000f68:	e088      	b.n	800107c <__aeabi_fmul+0x130>
 8000f6a:	2dff      	cmp	r5, #255	@ 0xff
 8000f6c:	d100      	bne.n	8000f70 <__aeabi_fmul+0x24>
 8000f6e:	e08d      	b.n	800108c <__aeabi_fmul+0x140>
 8000f70:	2280      	movs	r2, #128	@ 0x80
 8000f72:	00db      	lsls	r3, r3, #3
 8000f74:	04d2      	lsls	r2, r2, #19
 8000f76:	431a      	orrs	r2, r3
 8000f78:	2300      	movs	r3, #0
 8000f7a:	4691      	mov	r9, r2
 8000f7c:	4698      	mov	r8, r3
 8000f7e:	469a      	mov	sl, r3
 8000f80:	3d7f      	subs	r5, #127	@ 0x7f
 8000f82:	027c      	lsls	r4, r7, #9
 8000f84:	007b      	lsls	r3, r7, #1
 8000f86:	0a64      	lsrs	r4, r4, #9
 8000f88:	0e1b      	lsrs	r3, r3, #24
 8000f8a:	0fff      	lsrs	r7, r7, #31
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d068      	beq.n	8001062 <__aeabi_fmul+0x116>
 8000f90:	2bff      	cmp	r3, #255	@ 0xff
 8000f92:	d021      	beq.n	8000fd8 <__aeabi_fmul+0x8c>
 8000f94:	2280      	movs	r2, #128	@ 0x80
 8000f96:	00e4      	lsls	r4, r4, #3
 8000f98:	04d2      	lsls	r2, r2, #19
 8000f9a:	4314      	orrs	r4, r2
 8000f9c:	4642      	mov	r2, r8
 8000f9e:	3b7f      	subs	r3, #127	@ 0x7f
 8000fa0:	195b      	adds	r3, r3, r5
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	1c5d      	adds	r5, r3, #1
 8000fa6:	2a0a      	cmp	r2, #10
 8000fa8:	dc2e      	bgt.n	8001008 <__aeabi_fmul+0xbc>
 8000faa:	407e      	eors	r6, r7
 8000fac:	4642      	mov	r2, r8
 8000fae:	2a02      	cmp	r2, #2
 8000fb0:	dc23      	bgt.n	8000ffa <__aeabi_fmul+0xae>
 8000fb2:	3a01      	subs	r2, #1
 8000fb4:	2a01      	cmp	r2, #1
 8000fb6:	d900      	bls.n	8000fba <__aeabi_fmul+0x6e>
 8000fb8:	e0bd      	b.n	8001136 <__aeabi_fmul+0x1ea>
 8000fba:	2902      	cmp	r1, #2
 8000fbc:	d06e      	beq.n	800109c <__aeabi_fmul+0x150>
 8000fbe:	2901      	cmp	r1, #1
 8000fc0:	d12c      	bne.n	800101c <__aeabi_fmul+0xd0>
 8000fc2:	2000      	movs	r0, #0
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	05c0      	lsls	r0, r0, #23
 8000fc8:	07f6      	lsls	r6, r6, #31
 8000fca:	4310      	orrs	r0, r2
 8000fcc:	4330      	orrs	r0, r6
 8000fce:	bce0      	pop	{r5, r6, r7}
 8000fd0:	46ba      	mov	sl, r7
 8000fd2:	46b1      	mov	r9, r6
 8000fd4:	46a8      	mov	r8, r5
 8000fd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fd8:	002b      	movs	r3, r5
 8000fda:	33ff      	adds	r3, #255	@ 0xff
 8000fdc:	2c00      	cmp	r4, #0
 8000fde:	d065      	beq.n	80010ac <__aeabi_fmul+0x160>
 8000fe0:	2203      	movs	r2, #3
 8000fe2:	4641      	mov	r1, r8
 8000fe4:	4311      	orrs	r1, r2
 8000fe6:	0032      	movs	r2, r6
 8000fe8:	3501      	adds	r5, #1
 8000fea:	4688      	mov	r8, r1
 8000fec:	407a      	eors	r2, r7
 8000fee:	35ff      	adds	r5, #255	@ 0xff
 8000ff0:	290a      	cmp	r1, #10
 8000ff2:	dd00      	ble.n	8000ff6 <__aeabi_fmul+0xaa>
 8000ff4:	e0d8      	b.n	80011a8 <__aeabi_fmul+0x25c>
 8000ff6:	0016      	movs	r6, r2
 8000ff8:	2103      	movs	r1, #3
 8000ffa:	4640      	mov	r0, r8
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	4082      	lsls	r2, r0
 8001000:	20a6      	movs	r0, #166	@ 0xa6
 8001002:	00c0      	lsls	r0, r0, #3
 8001004:	4202      	tst	r2, r0
 8001006:	d020      	beq.n	800104a <__aeabi_fmul+0xfe>
 8001008:	4653      	mov	r3, sl
 800100a:	2b02      	cmp	r3, #2
 800100c:	d046      	beq.n	800109c <__aeabi_fmul+0x150>
 800100e:	2b03      	cmp	r3, #3
 8001010:	d100      	bne.n	8001014 <__aeabi_fmul+0xc8>
 8001012:	e0bb      	b.n	800118c <__aeabi_fmul+0x240>
 8001014:	4651      	mov	r1, sl
 8001016:	464c      	mov	r4, r9
 8001018:	2901      	cmp	r1, #1
 800101a:	d0d2      	beq.n	8000fc2 <__aeabi_fmul+0x76>
 800101c:	002b      	movs	r3, r5
 800101e:	337f      	adds	r3, #127	@ 0x7f
 8001020:	2b00      	cmp	r3, #0
 8001022:	dd70      	ble.n	8001106 <__aeabi_fmul+0x1ba>
 8001024:	0762      	lsls	r2, r4, #29
 8001026:	d004      	beq.n	8001032 <__aeabi_fmul+0xe6>
 8001028:	220f      	movs	r2, #15
 800102a:	4022      	ands	r2, r4
 800102c:	2a04      	cmp	r2, #4
 800102e:	d000      	beq.n	8001032 <__aeabi_fmul+0xe6>
 8001030:	3404      	adds	r4, #4
 8001032:	0122      	lsls	r2, r4, #4
 8001034:	d503      	bpl.n	800103e <__aeabi_fmul+0xf2>
 8001036:	4b63      	ldr	r3, [pc, #396]	@ (80011c4 <__aeabi_fmul+0x278>)
 8001038:	401c      	ands	r4, r3
 800103a:	002b      	movs	r3, r5
 800103c:	3380      	adds	r3, #128	@ 0x80
 800103e:	2bfe      	cmp	r3, #254	@ 0xfe
 8001040:	dc2c      	bgt.n	800109c <__aeabi_fmul+0x150>
 8001042:	01a2      	lsls	r2, r4, #6
 8001044:	0a52      	lsrs	r2, r2, #9
 8001046:	b2d8      	uxtb	r0, r3
 8001048:	e7bd      	b.n	8000fc6 <__aeabi_fmul+0x7a>
 800104a:	2090      	movs	r0, #144	@ 0x90
 800104c:	0080      	lsls	r0, r0, #2
 800104e:	4202      	tst	r2, r0
 8001050:	d127      	bne.n	80010a2 <__aeabi_fmul+0x156>
 8001052:	38b9      	subs	r0, #185	@ 0xb9
 8001054:	38ff      	subs	r0, #255	@ 0xff
 8001056:	4210      	tst	r0, r2
 8001058:	d06d      	beq.n	8001136 <__aeabi_fmul+0x1ea>
 800105a:	003e      	movs	r6, r7
 800105c:	46a1      	mov	r9, r4
 800105e:	468a      	mov	sl, r1
 8001060:	e7d2      	b.n	8001008 <__aeabi_fmul+0xbc>
 8001062:	2c00      	cmp	r4, #0
 8001064:	d141      	bne.n	80010ea <__aeabi_fmul+0x19e>
 8001066:	2301      	movs	r3, #1
 8001068:	4642      	mov	r2, r8
 800106a:	431a      	orrs	r2, r3
 800106c:	4690      	mov	r8, r2
 800106e:	002b      	movs	r3, r5
 8001070:	4642      	mov	r2, r8
 8001072:	2101      	movs	r1, #1
 8001074:	1c5d      	adds	r5, r3, #1
 8001076:	2a0a      	cmp	r2, #10
 8001078:	dd97      	ble.n	8000faa <__aeabi_fmul+0x5e>
 800107a:	e7c5      	b.n	8001008 <__aeabi_fmul+0xbc>
 800107c:	2b00      	cmp	r3, #0
 800107e:	d126      	bne.n	80010ce <__aeabi_fmul+0x182>
 8001080:	2304      	movs	r3, #4
 8001082:	4698      	mov	r8, r3
 8001084:	3b03      	subs	r3, #3
 8001086:	2500      	movs	r5, #0
 8001088:	469a      	mov	sl, r3
 800108a:	e77a      	b.n	8000f82 <__aeabi_fmul+0x36>
 800108c:	2b00      	cmp	r3, #0
 800108e:	d118      	bne.n	80010c2 <__aeabi_fmul+0x176>
 8001090:	2308      	movs	r3, #8
 8001092:	4698      	mov	r8, r3
 8001094:	3b06      	subs	r3, #6
 8001096:	25ff      	movs	r5, #255	@ 0xff
 8001098:	469a      	mov	sl, r3
 800109a:	e772      	b.n	8000f82 <__aeabi_fmul+0x36>
 800109c:	20ff      	movs	r0, #255	@ 0xff
 800109e:	2200      	movs	r2, #0
 80010a0:	e791      	b.n	8000fc6 <__aeabi_fmul+0x7a>
 80010a2:	2280      	movs	r2, #128	@ 0x80
 80010a4:	2600      	movs	r6, #0
 80010a6:	20ff      	movs	r0, #255	@ 0xff
 80010a8:	03d2      	lsls	r2, r2, #15
 80010aa:	e78c      	b.n	8000fc6 <__aeabi_fmul+0x7a>
 80010ac:	4641      	mov	r1, r8
 80010ae:	2202      	movs	r2, #2
 80010b0:	3501      	adds	r5, #1
 80010b2:	4311      	orrs	r1, r2
 80010b4:	4688      	mov	r8, r1
 80010b6:	35ff      	adds	r5, #255	@ 0xff
 80010b8:	290a      	cmp	r1, #10
 80010ba:	dca5      	bgt.n	8001008 <__aeabi_fmul+0xbc>
 80010bc:	2102      	movs	r1, #2
 80010be:	407e      	eors	r6, r7
 80010c0:	e774      	b.n	8000fac <__aeabi_fmul+0x60>
 80010c2:	230c      	movs	r3, #12
 80010c4:	4698      	mov	r8, r3
 80010c6:	3b09      	subs	r3, #9
 80010c8:	25ff      	movs	r5, #255	@ 0xff
 80010ca:	469a      	mov	sl, r3
 80010cc:	e759      	b.n	8000f82 <__aeabi_fmul+0x36>
 80010ce:	0018      	movs	r0, r3
 80010d0:	f002 fa54 	bl	800357c <__clzsi2>
 80010d4:	464a      	mov	r2, r9
 80010d6:	1f43      	subs	r3, r0, #5
 80010d8:	2576      	movs	r5, #118	@ 0x76
 80010da:	409a      	lsls	r2, r3
 80010dc:	2300      	movs	r3, #0
 80010de:	426d      	negs	r5, r5
 80010e0:	4691      	mov	r9, r2
 80010e2:	4698      	mov	r8, r3
 80010e4:	469a      	mov	sl, r3
 80010e6:	1a2d      	subs	r5, r5, r0
 80010e8:	e74b      	b.n	8000f82 <__aeabi_fmul+0x36>
 80010ea:	0020      	movs	r0, r4
 80010ec:	f002 fa46 	bl	800357c <__clzsi2>
 80010f0:	4642      	mov	r2, r8
 80010f2:	1f43      	subs	r3, r0, #5
 80010f4:	409c      	lsls	r4, r3
 80010f6:	1a2b      	subs	r3, r5, r0
 80010f8:	3b76      	subs	r3, #118	@ 0x76
 80010fa:	2100      	movs	r1, #0
 80010fc:	1c5d      	adds	r5, r3, #1
 80010fe:	2a0a      	cmp	r2, #10
 8001100:	dc00      	bgt.n	8001104 <__aeabi_fmul+0x1b8>
 8001102:	e752      	b.n	8000faa <__aeabi_fmul+0x5e>
 8001104:	e780      	b.n	8001008 <__aeabi_fmul+0xbc>
 8001106:	2201      	movs	r2, #1
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	2b1b      	cmp	r3, #27
 800110c:	dd00      	ble.n	8001110 <__aeabi_fmul+0x1c4>
 800110e:	e758      	b.n	8000fc2 <__aeabi_fmul+0x76>
 8001110:	359e      	adds	r5, #158	@ 0x9e
 8001112:	0022      	movs	r2, r4
 8001114:	40ac      	lsls	r4, r5
 8001116:	40da      	lsrs	r2, r3
 8001118:	1e63      	subs	r3, r4, #1
 800111a:	419c      	sbcs	r4, r3
 800111c:	4322      	orrs	r2, r4
 800111e:	0753      	lsls	r3, r2, #29
 8001120:	d004      	beq.n	800112c <__aeabi_fmul+0x1e0>
 8001122:	230f      	movs	r3, #15
 8001124:	4013      	ands	r3, r2
 8001126:	2b04      	cmp	r3, #4
 8001128:	d000      	beq.n	800112c <__aeabi_fmul+0x1e0>
 800112a:	3204      	adds	r2, #4
 800112c:	0153      	lsls	r3, r2, #5
 800112e:	d537      	bpl.n	80011a0 <__aeabi_fmul+0x254>
 8001130:	2001      	movs	r0, #1
 8001132:	2200      	movs	r2, #0
 8001134:	e747      	b.n	8000fc6 <__aeabi_fmul+0x7a>
 8001136:	0c21      	lsrs	r1, r4, #16
 8001138:	464a      	mov	r2, r9
 800113a:	0424      	lsls	r4, r4, #16
 800113c:	0c24      	lsrs	r4, r4, #16
 800113e:	0027      	movs	r7, r4
 8001140:	0c10      	lsrs	r0, r2, #16
 8001142:	0412      	lsls	r2, r2, #16
 8001144:	0c12      	lsrs	r2, r2, #16
 8001146:	4344      	muls	r4, r0
 8001148:	4357      	muls	r7, r2
 800114a:	4348      	muls	r0, r1
 800114c:	4351      	muls	r1, r2
 800114e:	0c3a      	lsrs	r2, r7, #16
 8001150:	1909      	adds	r1, r1, r4
 8001152:	1852      	adds	r2, r2, r1
 8001154:	4294      	cmp	r4, r2
 8001156:	d903      	bls.n	8001160 <__aeabi_fmul+0x214>
 8001158:	2180      	movs	r1, #128	@ 0x80
 800115a:	0249      	lsls	r1, r1, #9
 800115c:	468c      	mov	ip, r1
 800115e:	4460      	add	r0, ip
 8001160:	043f      	lsls	r7, r7, #16
 8001162:	0411      	lsls	r1, r2, #16
 8001164:	0c3f      	lsrs	r7, r7, #16
 8001166:	19c9      	adds	r1, r1, r7
 8001168:	018c      	lsls	r4, r1, #6
 800116a:	1e67      	subs	r7, r4, #1
 800116c:	41bc      	sbcs	r4, r7
 800116e:	0c12      	lsrs	r2, r2, #16
 8001170:	0e89      	lsrs	r1, r1, #26
 8001172:	1812      	adds	r2, r2, r0
 8001174:	430c      	orrs	r4, r1
 8001176:	0192      	lsls	r2, r2, #6
 8001178:	4314      	orrs	r4, r2
 800117a:	0112      	lsls	r2, r2, #4
 800117c:	d50e      	bpl.n	800119c <__aeabi_fmul+0x250>
 800117e:	2301      	movs	r3, #1
 8001180:	0862      	lsrs	r2, r4, #1
 8001182:	401c      	ands	r4, r3
 8001184:	4314      	orrs	r4, r2
 8001186:	e749      	b.n	800101c <__aeabi_fmul+0xd0>
 8001188:	003e      	movs	r6, r7
 800118a:	46a1      	mov	r9, r4
 800118c:	2280      	movs	r2, #128	@ 0x80
 800118e:	464b      	mov	r3, r9
 8001190:	03d2      	lsls	r2, r2, #15
 8001192:	431a      	orrs	r2, r3
 8001194:	0252      	lsls	r2, r2, #9
 8001196:	20ff      	movs	r0, #255	@ 0xff
 8001198:	0a52      	lsrs	r2, r2, #9
 800119a:	e714      	b.n	8000fc6 <__aeabi_fmul+0x7a>
 800119c:	001d      	movs	r5, r3
 800119e:	e73d      	b.n	800101c <__aeabi_fmul+0xd0>
 80011a0:	0192      	lsls	r2, r2, #6
 80011a2:	2000      	movs	r0, #0
 80011a4:	0a52      	lsrs	r2, r2, #9
 80011a6:	e70e      	b.n	8000fc6 <__aeabi_fmul+0x7a>
 80011a8:	290f      	cmp	r1, #15
 80011aa:	d1ed      	bne.n	8001188 <__aeabi_fmul+0x23c>
 80011ac:	2280      	movs	r2, #128	@ 0x80
 80011ae:	464b      	mov	r3, r9
 80011b0:	03d2      	lsls	r2, r2, #15
 80011b2:	4213      	tst	r3, r2
 80011b4:	d0ea      	beq.n	800118c <__aeabi_fmul+0x240>
 80011b6:	4214      	tst	r4, r2
 80011b8:	d1e8      	bne.n	800118c <__aeabi_fmul+0x240>
 80011ba:	003e      	movs	r6, r7
 80011bc:	20ff      	movs	r0, #255	@ 0xff
 80011be:	4322      	orrs	r2, r4
 80011c0:	e701      	b.n	8000fc6 <__aeabi_fmul+0x7a>
 80011c2:	46c0      	nop			@ (mov r8, r8)
 80011c4:	f7ffffff 	.word	0xf7ffffff

080011c8 <__aeabi_fsub>:
 80011c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011ca:	4647      	mov	r7, r8
 80011cc:	46ce      	mov	lr, r9
 80011ce:	024e      	lsls	r6, r1, #9
 80011d0:	0243      	lsls	r3, r0, #9
 80011d2:	0045      	lsls	r5, r0, #1
 80011d4:	0a72      	lsrs	r2, r6, #9
 80011d6:	0fc4      	lsrs	r4, r0, #31
 80011d8:	0048      	lsls	r0, r1, #1
 80011da:	b580      	push	{r7, lr}
 80011dc:	4694      	mov	ip, r2
 80011de:	0a5f      	lsrs	r7, r3, #9
 80011e0:	0e2d      	lsrs	r5, r5, #24
 80011e2:	099b      	lsrs	r3, r3, #6
 80011e4:	0e00      	lsrs	r0, r0, #24
 80011e6:	0fc9      	lsrs	r1, r1, #31
 80011e8:	09b6      	lsrs	r6, r6, #6
 80011ea:	28ff      	cmp	r0, #255	@ 0xff
 80011ec:	d024      	beq.n	8001238 <__aeabi_fsub+0x70>
 80011ee:	2201      	movs	r2, #1
 80011f0:	4051      	eors	r1, r2
 80011f2:	1a2a      	subs	r2, r5, r0
 80011f4:	428c      	cmp	r4, r1
 80011f6:	d00f      	beq.n	8001218 <__aeabi_fsub+0x50>
 80011f8:	2a00      	cmp	r2, #0
 80011fa:	dc00      	bgt.n	80011fe <__aeabi_fsub+0x36>
 80011fc:	e16a      	b.n	80014d4 <__aeabi_fsub+0x30c>
 80011fe:	2800      	cmp	r0, #0
 8001200:	d135      	bne.n	800126e <__aeabi_fsub+0xa6>
 8001202:	2e00      	cmp	r6, #0
 8001204:	d100      	bne.n	8001208 <__aeabi_fsub+0x40>
 8001206:	e0a2      	b.n	800134e <__aeabi_fsub+0x186>
 8001208:	1e51      	subs	r1, r2, #1
 800120a:	2a01      	cmp	r2, #1
 800120c:	d100      	bne.n	8001210 <__aeabi_fsub+0x48>
 800120e:	e124      	b.n	800145a <__aeabi_fsub+0x292>
 8001210:	2aff      	cmp	r2, #255	@ 0xff
 8001212:	d021      	beq.n	8001258 <__aeabi_fsub+0x90>
 8001214:	000a      	movs	r2, r1
 8001216:	e02f      	b.n	8001278 <__aeabi_fsub+0xb0>
 8001218:	2a00      	cmp	r2, #0
 800121a:	dc00      	bgt.n	800121e <__aeabi_fsub+0x56>
 800121c:	e167      	b.n	80014ee <__aeabi_fsub+0x326>
 800121e:	2800      	cmp	r0, #0
 8001220:	d05e      	beq.n	80012e0 <__aeabi_fsub+0x118>
 8001222:	2dff      	cmp	r5, #255	@ 0xff
 8001224:	d018      	beq.n	8001258 <__aeabi_fsub+0x90>
 8001226:	2180      	movs	r1, #128	@ 0x80
 8001228:	04c9      	lsls	r1, r1, #19
 800122a:	430e      	orrs	r6, r1
 800122c:	2a1b      	cmp	r2, #27
 800122e:	dc00      	bgt.n	8001232 <__aeabi_fsub+0x6a>
 8001230:	e076      	b.n	8001320 <__aeabi_fsub+0x158>
 8001232:	002a      	movs	r2, r5
 8001234:	3301      	adds	r3, #1
 8001236:	e032      	b.n	800129e <__aeabi_fsub+0xd6>
 8001238:	002a      	movs	r2, r5
 800123a:	3aff      	subs	r2, #255	@ 0xff
 800123c:	4691      	mov	r9, r2
 800123e:	2e00      	cmp	r6, #0
 8001240:	d042      	beq.n	80012c8 <__aeabi_fsub+0x100>
 8001242:	428c      	cmp	r4, r1
 8001244:	d055      	beq.n	80012f2 <__aeabi_fsub+0x12a>
 8001246:	464a      	mov	r2, r9
 8001248:	2a00      	cmp	r2, #0
 800124a:	d100      	bne.n	800124e <__aeabi_fsub+0x86>
 800124c:	e09c      	b.n	8001388 <__aeabi_fsub+0x1c0>
 800124e:	2d00      	cmp	r5, #0
 8001250:	d100      	bne.n	8001254 <__aeabi_fsub+0x8c>
 8001252:	e077      	b.n	8001344 <__aeabi_fsub+0x17c>
 8001254:	000c      	movs	r4, r1
 8001256:	0033      	movs	r3, r6
 8001258:	08db      	lsrs	r3, r3, #3
 800125a:	2b00      	cmp	r3, #0
 800125c:	d100      	bne.n	8001260 <__aeabi_fsub+0x98>
 800125e:	e06e      	b.n	800133e <__aeabi_fsub+0x176>
 8001260:	2280      	movs	r2, #128	@ 0x80
 8001262:	03d2      	lsls	r2, r2, #15
 8001264:	4313      	orrs	r3, r2
 8001266:	025b      	lsls	r3, r3, #9
 8001268:	20ff      	movs	r0, #255	@ 0xff
 800126a:	0a5b      	lsrs	r3, r3, #9
 800126c:	e024      	b.n	80012b8 <__aeabi_fsub+0xf0>
 800126e:	2dff      	cmp	r5, #255	@ 0xff
 8001270:	d0f2      	beq.n	8001258 <__aeabi_fsub+0x90>
 8001272:	2180      	movs	r1, #128	@ 0x80
 8001274:	04c9      	lsls	r1, r1, #19
 8001276:	430e      	orrs	r6, r1
 8001278:	2101      	movs	r1, #1
 800127a:	2a1b      	cmp	r2, #27
 800127c:	dc08      	bgt.n	8001290 <__aeabi_fsub+0xc8>
 800127e:	0031      	movs	r1, r6
 8001280:	2020      	movs	r0, #32
 8001282:	40d1      	lsrs	r1, r2
 8001284:	1a82      	subs	r2, r0, r2
 8001286:	4096      	lsls	r6, r2
 8001288:	0032      	movs	r2, r6
 800128a:	1e50      	subs	r0, r2, #1
 800128c:	4182      	sbcs	r2, r0
 800128e:	4311      	orrs	r1, r2
 8001290:	1a5b      	subs	r3, r3, r1
 8001292:	015a      	lsls	r2, r3, #5
 8001294:	d460      	bmi.n	8001358 <__aeabi_fsub+0x190>
 8001296:	2107      	movs	r1, #7
 8001298:	002a      	movs	r2, r5
 800129a:	4019      	ands	r1, r3
 800129c:	d057      	beq.n	800134e <__aeabi_fsub+0x186>
 800129e:	210f      	movs	r1, #15
 80012a0:	4019      	ands	r1, r3
 80012a2:	2904      	cmp	r1, #4
 80012a4:	d000      	beq.n	80012a8 <__aeabi_fsub+0xe0>
 80012a6:	3304      	adds	r3, #4
 80012a8:	0159      	lsls	r1, r3, #5
 80012aa:	d550      	bpl.n	800134e <__aeabi_fsub+0x186>
 80012ac:	1c50      	adds	r0, r2, #1
 80012ae:	2afe      	cmp	r2, #254	@ 0xfe
 80012b0:	d045      	beq.n	800133e <__aeabi_fsub+0x176>
 80012b2:	019b      	lsls	r3, r3, #6
 80012b4:	b2c0      	uxtb	r0, r0
 80012b6:	0a5b      	lsrs	r3, r3, #9
 80012b8:	05c0      	lsls	r0, r0, #23
 80012ba:	4318      	orrs	r0, r3
 80012bc:	07e4      	lsls	r4, r4, #31
 80012be:	4320      	orrs	r0, r4
 80012c0:	bcc0      	pop	{r6, r7}
 80012c2:	46b9      	mov	r9, r7
 80012c4:	46b0      	mov	r8, r6
 80012c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012c8:	2201      	movs	r2, #1
 80012ca:	4051      	eors	r1, r2
 80012cc:	428c      	cmp	r4, r1
 80012ce:	d1ba      	bne.n	8001246 <__aeabi_fsub+0x7e>
 80012d0:	464a      	mov	r2, r9
 80012d2:	2a00      	cmp	r2, #0
 80012d4:	d010      	beq.n	80012f8 <__aeabi_fsub+0x130>
 80012d6:	2d00      	cmp	r5, #0
 80012d8:	d100      	bne.n	80012dc <__aeabi_fsub+0x114>
 80012da:	e098      	b.n	800140e <__aeabi_fsub+0x246>
 80012dc:	2300      	movs	r3, #0
 80012de:	e7bb      	b.n	8001258 <__aeabi_fsub+0x90>
 80012e0:	2e00      	cmp	r6, #0
 80012e2:	d034      	beq.n	800134e <__aeabi_fsub+0x186>
 80012e4:	1e51      	subs	r1, r2, #1
 80012e6:	2a01      	cmp	r2, #1
 80012e8:	d06e      	beq.n	80013c8 <__aeabi_fsub+0x200>
 80012ea:	2aff      	cmp	r2, #255	@ 0xff
 80012ec:	d0b4      	beq.n	8001258 <__aeabi_fsub+0x90>
 80012ee:	000a      	movs	r2, r1
 80012f0:	e79c      	b.n	800122c <__aeabi_fsub+0x64>
 80012f2:	2a00      	cmp	r2, #0
 80012f4:	d000      	beq.n	80012f8 <__aeabi_fsub+0x130>
 80012f6:	e088      	b.n	800140a <__aeabi_fsub+0x242>
 80012f8:	20fe      	movs	r0, #254	@ 0xfe
 80012fa:	1c6a      	adds	r2, r5, #1
 80012fc:	4210      	tst	r0, r2
 80012fe:	d000      	beq.n	8001302 <__aeabi_fsub+0x13a>
 8001300:	e092      	b.n	8001428 <__aeabi_fsub+0x260>
 8001302:	2d00      	cmp	r5, #0
 8001304:	d000      	beq.n	8001308 <__aeabi_fsub+0x140>
 8001306:	e0a4      	b.n	8001452 <__aeabi_fsub+0x28a>
 8001308:	2b00      	cmp	r3, #0
 800130a:	d100      	bne.n	800130e <__aeabi_fsub+0x146>
 800130c:	e0cb      	b.n	80014a6 <__aeabi_fsub+0x2de>
 800130e:	2e00      	cmp	r6, #0
 8001310:	d000      	beq.n	8001314 <__aeabi_fsub+0x14c>
 8001312:	e0ca      	b.n	80014aa <__aeabi_fsub+0x2e2>
 8001314:	2200      	movs	r2, #0
 8001316:	08db      	lsrs	r3, r3, #3
 8001318:	025b      	lsls	r3, r3, #9
 800131a:	0a5b      	lsrs	r3, r3, #9
 800131c:	b2d0      	uxtb	r0, r2
 800131e:	e7cb      	b.n	80012b8 <__aeabi_fsub+0xf0>
 8001320:	0031      	movs	r1, r6
 8001322:	2020      	movs	r0, #32
 8001324:	40d1      	lsrs	r1, r2
 8001326:	1a82      	subs	r2, r0, r2
 8001328:	4096      	lsls	r6, r2
 800132a:	0032      	movs	r2, r6
 800132c:	1e50      	subs	r0, r2, #1
 800132e:	4182      	sbcs	r2, r0
 8001330:	430a      	orrs	r2, r1
 8001332:	189b      	adds	r3, r3, r2
 8001334:	015a      	lsls	r2, r3, #5
 8001336:	d5ae      	bpl.n	8001296 <__aeabi_fsub+0xce>
 8001338:	1c6a      	adds	r2, r5, #1
 800133a:	2dfe      	cmp	r5, #254	@ 0xfe
 800133c:	d14a      	bne.n	80013d4 <__aeabi_fsub+0x20c>
 800133e:	20ff      	movs	r0, #255	@ 0xff
 8001340:	2300      	movs	r3, #0
 8001342:	e7b9      	b.n	80012b8 <__aeabi_fsub+0xf0>
 8001344:	22ff      	movs	r2, #255	@ 0xff
 8001346:	2b00      	cmp	r3, #0
 8001348:	d14b      	bne.n	80013e2 <__aeabi_fsub+0x21a>
 800134a:	000c      	movs	r4, r1
 800134c:	0033      	movs	r3, r6
 800134e:	08db      	lsrs	r3, r3, #3
 8001350:	2aff      	cmp	r2, #255	@ 0xff
 8001352:	d100      	bne.n	8001356 <__aeabi_fsub+0x18e>
 8001354:	e781      	b.n	800125a <__aeabi_fsub+0x92>
 8001356:	e7df      	b.n	8001318 <__aeabi_fsub+0x150>
 8001358:	019f      	lsls	r7, r3, #6
 800135a:	09bf      	lsrs	r7, r7, #6
 800135c:	0038      	movs	r0, r7
 800135e:	f002 f90d 	bl	800357c <__clzsi2>
 8001362:	3805      	subs	r0, #5
 8001364:	4087      	lsls	r7, r0
 8001366:	4285      	cmp	r5, r0
 8001368:	dc21      	bgt.n	80013ae <__aeabi_fsub+0x1e6>
 800136a:	003b      	movs	r3, r7
 800136c:	2120      	movs	r1, #32
 800136e:	1b42      	subs	r2, r0, r5
 8001370:	3201      	adds	r2, #1
 8001372:	40d3      	lsrs	r3, r2
 8001374:	1a8a      	subs	r2, r1, r2
 8001376:	4097      	lsls	r7, r2
 8001378:	1e7a      	subs	r2, r7, #1
 800137a:	4197      	sbcs	r7, r2
 800137c:	2200      	movs	r2, #0
 800137e:	433b      	orrs	r3, r7
 8001380:	0759      	lsls	r1, r3, #29
 8001382:	d000      	beq.n	8001386 <__aeabi_fsub+0x1be>
 8001384:	e78b      	b.n	800129e <__aeabi_fsub+0xd6>
 8001386:	e78f      	b.n	80012a8 <__aeabi_fsub+0xe0>
 8001388:	20fe      	movs	r0, #254	@ 0xfe
 800138a:	1c6a      	adds	r2, r5, #1
 800138c:	4210      	tst	r0, r2
 800138e:	d112      	bne.n	80013b6 <__aeabi_fsub+0x1ee>
 8001390:	2d00      	cmp	r5, #0
 8001392:	d152      	bne.n	800143a <__aeabi_fsub+0x272>
 8001394:	2b00      	cmp	r3, #0
 8001396:	d07c      	beq.n	8001492 <__aeabi_fsub+0x2ca>
 8001398:	2e00      	cmp	r6, #0
 800139a:	d0bb      	beq.n	8001314 <__aeabi_fsub+0x14c>
 800139c:	1b9a      	subs	r2, r3, r6
 800139e:	0150      	lsls	r0, r2, #5
 80013a0:	d400      	bmi.n	80013a4 <__aeabi_fsub+0x1dc>
 80013a2:	e08b      	b.n	80014bc <__aeabi_fsub+0x2f4>
 80013a4:	2401      	movs	r4, #1
 80013a6:	2200      	movs	r2, #0
 80013a8:	1af3      	subs	r3, r6, r3
 80013aa:	400c      	ands	r4, r1
 80013ac:	e7e8      	b.n	8001380 <__aeabi_fsub+0x1b8>
 80013ae:	4b56      	ldr	r3, [pc, #344]	@ (8001508 <__aeabi_fsub+0x340>)
 80013b0:	1a2a      	subs	r2, r5, r0
 80013b2:	403b      	ands	r3, r7
 80013b4:	e7e4      	b.n	8001380 <__aeabi_fsub+0x1b8>
 80013b6:	1b9f      	subs	r7, r3, r6
 80013b8:	017a      	lsls	r2, r7, #5
 80013ba:	d446      	bmi.n	800144a <__aeabi_fsub+0x282>
 80013bc:	2f00      	cmp	r7, #0
 80013be:	d1cd      	bne.n	800135c <__aeabi_fsub+0x194>
 80013c0:	2400      	movs	r4, #0
 80013c2:	2000      	movs	r0, #0
 80013c4:	2300      	movs	r3, #0
 80013c6:	e777      	b.n	80012b8 <__aeabi_fsub+0xf0>
 80013c8:	199b      	adds	r3, r3, r6
 80013ca:	2501      	movs	r5, #1
 80013cc:	3201      	adds	r2, #1
 80013ce:	0159      	lsls	r1, r3, #5
 80013d0:	d400      	bmi.n	80013d4 <__aeabi_fsub+0x20c>
 80013d2:	e760      	b.n	8001296 <__aeabi_fsub+0xce>
 80013d4:	2101      	movs	r1, #1
 80013d6:	484d      	ldr	r0, [pc, #308]	@ (800150c <__aeabi_fsub+0x344>)
 80013d8:	4019      	ands	r1, r3
 80013da:	085b      	lsrs	r3, r3, #1
 80013dc:	4003      	ands	r3, r0
 80013de:	430b      	orrs	r3, r1
 80013e0:	e7ce      	b.n	8001380 <__aeabi_fsub+0x1b8>
 80013e2:	1e57      	subs	r7, r2, #1
 80013e4:	2a01      	cmp	r2, #1
 80013e6:	d05a      	beq.n	800149e <__aeabi_fsub+0x2d6>
 80013e8:	000c      	movs	r4, r1
 80013ea:	2aff      	cmp	r2, #255	@ 0xff
 80013ec:	d033      	beq.n	8001456 <__aeabi_fsub+0x28e>
 80013ee:	2201      	movs	r2, #1
 80013f0:	2f1b      	cmp	r7, #27
 80013f2:	dc07      	bgt.n	8001404 <__aeabi_fsub+0x23c>
 80013f4:	2120      	movs	r1, #32
 80013f6:	1bc9      	subs	r1, r1, r7
 80013f8:	001a      	movs	r2, r3
 80013fa:	408b      	lsls	r3, r1
 80013fc:	40fa      	lsrs	r2, r7
 80013fe:	1e59      	subs	r1, r3, #1
 8001400:	418b      	sbcs	r3, r1
 8001402:	431a      	orrs	r2, r3
 8001404:	0005      	movs	r5, r0
 8001406:	1ab3      	subs	r3, r6, r2
 8001408:	e743      	b.n	8001292 <__aeabi_fsub+0xca>
 800140a:	2d00      	cmp	r5, #0
 800140c:	d123      	bne.n	8001456 <__aeabi_fsub+0x28e>
 800140e:	22ff      	movs	r2, #255	@ 0xff
 8001410:	2b00      	cmp	r3, #0
 8001412:	d09b      	beq.n	800134c <__aeabi_fsub+0x184>
 8001414:	1e51      	subs	r1, r2, #1
 8001416:	2a01      	cmp	r2, #1
 8001418:	d0d6      	beq.n	80013c8 <__aeabi_fsub+0x200>
 800141a:	2aff      	cmp	r2, #255	@ 0xff
 800141c:	d01b      	beq.n	8001456 <__aeabi_fsub+0x28e>
 800141e:	291b      	cmp	r1, #27
 8001420:	dd2c      	ble.n	800147c <__aeabi_fsub+0x2b4>
 8001422:	0002      	movs	r2, r0
 8001424:	1c73      	adds	r3, r6, #1
 8001426:	e73a      	b.n	800129e <__aeabi_fsub+0xd6>
 8001428:	2aff      	cmp	r2, #255	@ 0xff
 800142a:	d088      	beq.n	800133e <__aeabi_fsub+0x176>
 800142c:	199b      	adds	r3, r3, r6
 800142e:	085b      	lsrs	r3, r3, #1
 8001430:	0759      	lsls	r1, r3, #29
 8001432:	d000      	beq.n	8001436 <__aeabi_fsub+0x26e>
 8001434:	e733      	b.n	800129e <__aeabi_fsub+0xd6>
 8001436:	08db      	lsrs	r3, r3, #3
 8001438:	e76e      	b.n	8001318 <__aeabi_fsub+0x150>
 800143a:	2b00      	cmp	r3, #0
 800143c:	d110      	bne.n	8001460 <__aeabi_fsub+0x298>
 800143e:	2e00      	cmp	r6, #0
 8001440:	d043      	beq.n	80014ca <__aeabi_fsub+0x302>
 8001442:	2401      	movs	r4, #1
 8001444:	0033      	movs	r3, r6
 8001446:	400c      	ands	r4, r1
 8001448:	e706      	b.n	8001258 <__aeabi_fsub+0x90>
 800144a:	2401      	movs	r4, #1
 800144c:	1af7      	subs	r7, r6, r3
 800144e:	400c      	ands	r4, r1
 8001450:	e784      	b.n	800135c <__aeabi_fsub+0x194>
 8001452:	2b00      	cmp	r3, #0
 8001454:	d104      	bne.n	8001460 <__aeabi_fsub+0x298>
 8001456:	0033      	movs	r3, r6
 8001458:	e6fe      	b.n	8001258 <__aeabi_fsub+0x90>
 800145a:	2501      	movs	r5, #1
 800145c:	1b9b      	subs	r3, r3, r6
 800145e:	e718      	b.n	8001292 <__aeabi_fsub+0xca>
 8001460:	2e00      	cmp	r6, #0
 8001462:	d100      	bne.n	8001466 <__aeabi_fsub+0x29e>
 8001464:	e6f8      	b.n	8001258 <__aeabi_fsub+0x90>
 8001466:	2280      	movs	r2, #128	@ 0x80
 8001468:	03d2      	lsls	r2, r2, #15
 800146a:	4297      	cmp	r7, r2
 800146c:	d304      	bcc.n	8001478 <__aeabi_fsub+0x2b0>
 800146e:	4594      	cmp	ip, r2
 8001470:	d202      	bcs.n	8001478 <__aeabi_fsub+0x2b0>
 8001472:	2401      	movs	r4, #1
 8001474:	0033      	movs	r3, r6
 8001476:	400c      	ands	r4, r1
 8001478:	08db      	lsrs	r3, r3, #3
 800147a:	e6f1      	b.n	8001260 <__aeabi_fsub+0x98>
 800147c:	001a      	movs	r2, r3
 800147e:	2520      	movs	r5, #32
 8001480:	40ca      	lsrs	r2, r1
 8001482:	1a69      	subs	r1, r5, r1
 8001484:	408b      	lsls	r3, r1
 8001486:	1e59      	subs	r1, r3, #1
 8001488:	418b      	sbcs	r3, r1
 800148a:	4313      	orrs	r3, r2
 800148c:	0005      	movs	r5, r0
 800148e:	199b      	adds	r3, r3, r6
 8001490:	e750      	b.n	8001334 <__aeabi_fsub+0x16c>
 8001492:	2e00      	cmp	r6, #0
 8001494:	d094      	beq.n	80013c0 <__aeabi_fsub+0x1f8>
 8001496:	2401      	movs	r4, #1
 8001498:	0033      	movs	r3, r6
 800149a:	400c      	ands	r4, r1
 800149c:	e73a      	b.n	8001314 <__aeabi_fsub+0x14c>
 800149e:	000c      	movs	r4, r1
 80014a0:	2501      	movs	r5, #1
 80014a2:	1af3      	subs	r3, r6, r3
 80014a4:	e6f5      	b.n	8001292 <__aeabi_fsub+0xca>
 80014a6:	0033      	movs	r3, r6
 80014a8:	e734      	b.n	8001314 <__aeabi_fsub+0x14c>
 80014aa:	199b      	adds	r3, r3, r6
 80014ac:	2200      	movs	r2, #0
 80014ae:	0159      	lsls	r1, r3, #5
 80014b0:	d5c1      	bpl.n	8001436 <__aeabi_fsub+0x26e>
 80014b2:	4a15      	ldr	r2, [pc, #84]	@ (8001508 <__aeabi_fsub+0x340>)
 80014b4:	4013      	ands	r3, r2
 80014b6:	08db      	lsrs	r3, r3, #3
 80014b8:	2201      	movs	r2, #1
 80014ba:	e72d      	b.n	8001318 <__aeabi_fsub+0x150>
 80014bc:	2a00      	cmp	r2, #0
 80014be:	d100      	bne.n	80014c2 <__aeabi_fsub+0x2fa>
 80014c0:	e77e      	b.n	80013c0 <__aeabi_fsub+0x1f8>
 80014c2:	0013      	movs	r3, r2
 80014c4:	2200      	movs	r2, #0
 80014c6:	08db      	lsrs	r3, r3, #3
 80014c8:	e726      	b.n	8001318 <__aeabi_fsub+0x150>
 80014ca:	2380      	movs	r3, #128	@ 0x80
 80014cc:	2400      	movs	r4, #0
 80014ce:	20ff      	movs	r0, #255	@ 0xff
 80014d0:	03db      	lsls	r3, r3, #15
 80014d2:	e6f1      	b.n	80012b8 <__aeabi_fsub+0xf0>
 80014d4:	2a00      	cmp	r2, #0
 80014d6:	d100      	bne.n	80014da <__aeabi_fsub+0x312>
 80014d8:	e756      	b.n	8001388 <__aeabi_fsub+0x1c0>
 80014da:	1b47      	subs	r7, r0, r5
 80014dc:	003a      	movs	r2, r7
 80014de:	2d00      	cmp	r5, #0
 80014e0:	d100      	bne.n	80014e4 <__aeabi_fsub+0x31c>
 80014e2:	e730      	b.n	8001346 <__aeabi_fsub+0x17e>
 80014e4:	2280      	movs	r2, #128	@ 0x80
 80014e6:	04d2      	lsls	r2, r2, #19
 80014e8:	000c      	movs	r4, r1
 80014ea:	4313      	orrs	r3, r2
 80014ec:	e77f      	b.n	80013ee <__aeabi_fsub+0x226>
 80014ee:	2a00      	cmp	r2, #0
 80014f0:	d100      	bne.n	80014f4 <__aeabi_fsub+0x32c>
 80014f2:	e701      	b.n	80012f8 <__aeabi_fsub+0x130>
 80014f4:	1b41      	subs	r1, r0, r5
 80014f6:	2d00      	cmp	r5, #0
 80014f8:	d101      	bne.n	80014fe <__aeabi_fsub+0x336>
 80014fa:	000a      	movs	r2, r1
 80014fc:	e788      	b.n	8001410 <__aeabi_fsub+0x248>
 80014fe:	2280      	movs	r2, #128	@ 0x80
 8001500:	04d2      	lsls	r2, r2, #19
 8001502:	4313      	orrs	r3, r2
 8001504:	e78b      	b.n	800141e <__aeabi_fsub+0x256>
 8001506:	46c0      	nop			@ (mov r8, r8)
 8001508:	fbffffff 	.word	0xfbffffff
 800150c:	7dffffff 	.word	0x7dffffff

08001510 <__aeabi_f2iz>:
 8001510:	0241      	lsls	r1, r0, #9
 8001512:	0042      	lsls	r2, r0, #1
 8001514:	0fc3      	lsrs	r3, r0, #31
 8001516:	0a49      	lsrs	r1, r1, #9
 8001518:	2000      	movs	r0, #0
 800151a:	0e12      	lsrs	r2, r2, #24
 800151c:	2a7e      	cmp	r2, #126	@ 0x7e
 800151e:	dd03      	ble.n	8001528 <__aeabi_f2iz+0x18>
 8001520:	2a9d      	cmp	r2, #157	@ 0x9d
 8001522:	dd02      	ble.n	800152a <__aeabi_f2iz+0x1a>
 8001524:	4a09      	ldr	r2, [pc, #36]	@ (800154c <__aeabi_f2iz+0x3c>)
 8001526:	1898      	adds	r0, r3, r2
 8001528:	4770      	bx	lr
 800152a:	2080      	movs	r0, #128	@ 0x80
 800152c:	0400      	lsls	r0, r0, #16
 800152e:	4301      	orrs	r1, r0
 8001530:	2a95      	cmp	r2, #149	@ 0x95
 8001532:	dc07      	bgt.n	8001544 <__aeabi_f2iz+0x34>
 8001534:	2096      	movs	r0, #150	@ 0x96
 8001536:	1a82      	subs	r2, r0, r2
 8001538:	40d1      	lsrs	r1, r2
 800153a:	4248      	negs	r0, r1
 800153c:	2b00      	cmp	r3, #0
 800153e:	d1f3      	bne.n	8001528 <__aeabi_f2iz+0x18>
 8001540:	0008      	movs	r0, r1
 8001542:	e7f1      	b.n	8001528 <__aeabi_f2iz+0x18>
 8001544:	3a96      	subs	r2, #150	@ 0x96
 8001546:	4091      	lsls	r1, r2
 8001548:	e7f7      	b.n	800153a <__aeabi_f2iz+0x2a>
 800154a:	46c0      	nop			@ (mov r8, r8)
 800154c:	7fffffff 	.word	0x7fffffff

08001550 <__aeabi_i2f>:
 8001550:	b570      	push	{r4, r5, r6, lr}
 8001552:	2800      	cmp	r0, #0
 8001554:	d013      	beq.n	800157e <__aeabi_i2f+0x2e>
 8001556:	17c3      	asrs	r3, r0, #31
 8001558:	18c5      	adds	r5, r0, r3
 800155a:	405d      	eors	r5, r3
 800155c:	0fc4      	lsrs	r4, r0, #31
 800155e:	0028      	movs	r0, r5
 8001560:	f002 f80c 	bl	800357c <__clzsi2>
 8001564:	239e      	movs	r3, #158	@ 0x9e
 8001566:	0001      	movs	r1, r0
 8001568:	1a1b      	subs	r3, r3, r0
 800156a:	2b96      	cmp	r3, #150	@ 0x96
 800156c:	dc0f      	bgt.n	800158e <__aeabi_i2f+0x3e>
 800156e:	2808      	cmp	r0, #8
 8001570:	d034      	beq.n	80015dc <__aeabi_i2f+0x8c>
 8001572:	3908      	subs	r1, #8
 8001574:	408d      	lsls	r5, r1
 8001576:	026d      	lsls	r5, r5, #9
 8001578:	0a6d      	lsrs	r5, r5, #9
 800157a:	b2d8      	uxtb	r0, r3
 800157c:	e002      	b.n	8001584 <__aeabi_i2f+0x34>
 800157e:	2400      	movs	r4, #0
 8001580:	2000      	movs	r0, #0
 8001582:	2500      	movs	r5, #0
 8001584:	05c0      	lsls	r0, r0, #23
 8001586:	4328      	orrs	r0, r5
 8001588:	07e4      	lsls	r4, r4, #31
 800158a:	4320      	orrs	r0, r4
 800158c:	bd70      	pop	{r4, r5, r6, pc}
 800158e:	2b99      	cmp	r3, #153	@ 0x99
 8001590:	dc16      	bgt.n	80015c0 <__aeabi_i2f+0x70>
 8001592:	1f42      	subs	r2, r0, #5
 8001594:	2805      	cmp	r0, #5
 8001596:	d000      	beq.n	800159a <__aeabi_i2f+0x4a>
 8001598:	4095      	lsls	r5, r2
 800159a:	002a      	movs	r2, r5
 800159c:	4811      	ldr	r0, [pc, #68]	@ (80015e4 <__aeabi_i2f+0x94>)
 800159e:	4002      	ands	r2, r0
 80015a0:	076e      	lsls	r6, r5, #29
 80015a2:	d009      	beq.n	80015b8 <__aeabi_i2f+0x68>
 80015a4:	260f      	movs	r6, #15
 80015a6:	4035      	ands	r5, r6
 80015a8:	2d04      	cmp	r5, #4
 80015aa:	d005      	beq.n	80015b8 <__aeabi_i2f+0x68>
 80015ac:	3204      	adds	r2, #4
 80015ae:	0155      	lsls	r5, r2, #5
 80015b0:	d502      	bpl.n	80015b8 <__aeabi_i2f+0x68>
 80015b2:	239f      	movs	r3, #159	@ 0x9f
 80015b4:	4002      	ands	r2, r0
 80015b6:	1a5b      	subs	r3, r3, r1
 80015b8:	0192      	lsls	r2, r2, #6
 80015ba:	0a55      	lsrs	r5, r2, #9
 80015bc:	b2d8      	uxtb	r0, r3
 80015be:	e7e1      	b.n	8001584 <__aeabi_i2f+0x34>
 80015c0:	2205      	movs	r2, #5
 80015c2:	1a12      	subs	r2, r2, r0
 80015c4:	0028      	movs	r0, r5
 80015c6:	40d0      	lsrs	r0, r2
 80015c8:	0002      	movs	r2, r0
 80015ca:	0008      	movs	r0, r1
 80015cc:	301b      	adds	r0, #27
 80015ce:	4085      	lsls	r5, r0
 80015d0:	0028      	movs	r0, r5
 80015d2:	1e45      	subs	r5, r0, #1
 80015d4:	41a8      	sbcs	r0, r5
 80015d6:	4302      	orrs	r2, r0
 80015d8:	0015      	movs	r5, r2
 80015da:	e7de      	b.n	800159a <__aeabi_i2f+0x4a>
 80015dc:	026d      	lsls	r5, r5, #9
 80015de:	2096      	movs	r0, #150	@ 0x96
 80015e0:	0a6d      	lsrs	r5, r5, #9
 80015e2:	e7cf      	b.n	8001584 <__aeabi_i2f+0x34>
 80015e4:	fbffffff 	.word	0xfbffffff

080015e8 <__aeabi_ui2f>:
 80015e8:	b570      	push	{r4, r5, r6, lr}
 80015ea:	1e04      	subs	r4, r0, #0
 80015ec:	d00e      	beq.n	800160c <__aeabi_ui2f+0x24>
 80015ee:	f001 ffc5 	bl	800357c <__clzsi2>
 80015f2:	239e      	movs	r3, #158	@ 0x9e
 80015f4:	0001      	movs	r1, r0
 80015f6:	1a1b      	subs	r3, r3, r0
 80015f8:	2b96      	cmp	r3, #150	@ 0x96
 80015fa:	dc0c      	bgt.n	8001616 <__aeabi_ui2f+0x2e>
 80015fc:	2808      	cmp	r0, #8
 80015fe:	d02f      	beq.n	8001660 <__aeabi_ui2f+0x78>
 8001600:	3908      	subs	r1, #8
 8001602:	408c      	lsls	r4, r1
 8001604:	0264      	lsls	r4, r4, #9
 8001606:	0a64      	lsrs	r4, r4, #9
 8001608:	b2d8      	uxtb	r0, r3
 800160a:	e001      	b.n	8001610 <__aeabi_ui2f+0x28>
 800160c:	2000      	movs	r0, #0
 800160e:	2400      	movs	r4, #0
 8001610:	05c0      	lsls	r0, r0, #23
 8001612:	4320      	orrs	r0, r4
 8001614:	bd70      	pop	{r4, r5, r6, pc}
 8001616:	2b99      	cmp	r3, #153	@ 0x99
 8001618:	dc16      	bgt.n	8001648 <__aeabi_ui2f+0x60>
 800161a:	1f42      	subs	r2, r0, #5
 800161c:	2805      	cmp	r0, #5
 800161e:	d000      	beq.n	8001622 <__aeabi_ui2f+0x3a>
 8001620:	4094      	lsls	r4, r2
 8001622:	0022      	movs	r2, r4
 8001624:	4810      	ldr	r0, [pc, #64]	@ (8001668 <__aeabi_ui2f+0x80>)
 8001626:	4002      	ands	r2, r0
 8001628:	0765      	lsls	r5, r4, #29
 800162a:	d009      	beq.n	8001640 <__aeabi_ui2f+0x58>
 800162c:	250f      	movs	r5, #15
 800162e:	402c      	ands	r4, r5
 8001630:	2c04      	cmp	r4, #4
 8001632:	d005      	beq.n	8001640 <__aeabi_ui2f+0x58>
 8001634:	3204      	adds	r2, #4
 8001636:	0154      	lsls	r4, r2, #5
 8001638:	d502      	bpl.n	8001640 <__aeabi_ui2f+0x58>
 800163a:	239f      	movs	r3, #159	@ 0x9f
 800163c:	4002      	ands	r2, r0
 800163e:	1a5b      	subs	r3, r3, r1
 8001640:	0192      	lsls	r2, r2, #6
 8001642:	0a54      	lsrs	r4, r2, #9
 8001644:	b2d8      	uxtb	r0, r3
 8001646:	e7e3      	b.n	8001610 <__aeabi_ui2f+0x28>
 8001648:	0002      	movs	r2, r0
 800164a:	0020      	movs	r0, r4
 800164c:	321b      	adds	r2, #27
 800164e:	4090      	lsls	r0, r2
 8001650:	0002      	movs	r2, r0
 8001652:	1e50      	subs	r0, r2, #1
 8001654:	4182      	sbcs	r2, r0
 8001656:	2005      	movs	r0, #5
 8001658:	1a40      	subs	r0, r0, r1
 800165a:	40c4      	lsrs	r4, r0
 800165c:	4314      	orrs	r4, r2
 800165e:	e7e0      	b.n	8001622 <__aeabi_ui2f+0x3a>
 8001660:	0264      	lsls	r4, r4, #9
 8001662:	2096      	movs	r0, #150	@ 0x96
 8001664:	0a64      	lsrs	r4, r4, #9
 8001666:	e7d3      	b.n	8001610 <__aeabi_ui2f+0x28>
 8001668:	fbffffff 	.word	0xfbffffff

0800166c <__aeabi_dadd>:
 800166c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800166e:	4657      	mov	r7, sl
 8001670:	464e      	mov	r6, r9
 8001672:	4645      	mov	r5, r8
 8001674:	46de      	mov	lr, fp
 8001676:	b5e0      	push	{r5, r6, r7, lr}
 8001678:	b083      	sub	sp, #12
 800167a:	9000      	str	r0, [sp, #0]
 800167c:	9101      	str	r1, [sp, #4]
 800167e:	030c      	lsls	r4, r1, #12
 8001680:	004f      	lsls	r7, r1, #1
 8001682:	0fce      	lsrs	r6, r1, #31
 8001684:	0a61      	lsrs	r1, r4, #9
 8001686:	9c00      	ldr	r4, [sp, #0]
 8001688:	031d      	lsls	r5, r3, #12
 800168a:	0f64      	lsrs	r4, r4, #29
 800168c:	430c      	orrs	r4, r1
 800168e:	9900      	ldr	r1, [sp, #0]
 8001690:	9200      	str	r2, [sp, #0]
 8001692:	9301      	str	r3, [sp, #4]
 8001694:	00c8      	lsls	r0, r1, #3
 8001696:	0059      	lsls	r1, r3, #1
 8001698:	0d4b      	lsrs	r3, r1, #21
 800169a:	4699      	mov	r9, r3
 800169c:	9a00      	ldr	r2, [sp, #0]
 800169e:	9b01      	ldr	r3, [sp, #4]
 80016a0:	0a6d      	lsrs	r5, r5, #9
 80016a2:	0fd9      	lsrs	r1, r3, #31
 80016a4:	0f53      	lsrs	r3, r2, #29
 80016a6:	432b      	orrs	r3, r5
 80016a8:	469a      	mov	sl, r3
 80016aa:	9b00      	ldr	r3, [sp, #0]
 80016ac:	0d7f      	lsrs	r7, r7, #21
 80016ae:	00da      	lsls	r2, r3, #3
 80016b0:	4694      	mov	ip, r2
 80016b2:	464a      	mov	r2, r9
 80016b4:	46b0      	mov	r8, r6
 80016b6:	1aba      	subs	r2, r7, r2
 80016b8:	428e      	cmp	r6, r1
 80016ba:	d100      	bne.n	80016be <__aeabi_dadd+0x52>
 80016bc:	e0b0      	b.n	8001820 <__aeabi_dadd+0x1b4>
 80016be:	2a00      	cmp	r2, #0
 80016c0:	dc00      	bgt.n	80016c4 <__aeabi_dadd+0x58>
 80016c2:	e078      	b.n	80017b6 <__aeabi_dadd+0x14a>
 80016c4:	4649      	mov	r1, r9
 80016c6:	2900      	cmp	r1, #0
 80016c8:	d100      	bne.n	80016cc <__aeabi_dadd+0x60>
 80016ca:	e0e9      	b.n	80018a0 <__aeabi_dadd+0x234>
 80016cc:	49c9      	ldr	r1, [pc, #804]	@ (80019f4 <__aeabi_dadd+0x388>)
 80016ce:	428f      	cmp	r7, r1
 80016d0:	d100      	bne.n	80016d4 <__aeabi_dadd+0x68>
 80016d2:	e195      	b.n	8001a00 <__aeabi_dadd+0x394>
 80016d4:	2501      	movs	r5, #1
 80016d6:	2a38      	cmp	r2, #56	@ 0x38
 80016d8:	dc16      	bgt.n	8001708 <__aeabi_dadd+0x9c>
 80016da:	2180      	movs	r1, #128	@ 0x80
 80016dc:	4653      	mov	r3, sl
 80016de:	0409      	lsls	r1, r1, #16
 80016e0:	430b      	orrs	r3, r1
 80016e2:	469a      	mov	sl, r3
 80016e4:	2a1f      	cmp	r2, #31
 80016e6:	dd00      	ble.n	80016ea <__aeabi_dadd+0x7e>
 80016e8:	e1e7      	b.n	8001aba <__aeabi_dadd+0x44e>
 80016ea:	2120      	movs	r1, #32
 80016ec:	4655      	mov	r5, sl
 80016ee:	1a8b      	subs	r3, r1, r2
 80016f0:	4661      	mov	r1, ip
 80016f2:	409d      	lsls	r5, r3
 80016f4:	40d1      	lsrs	r1, r2
 80016f6:	430d      	orrs	r5, r1
 80016f8:	4661      	mov	r1, ip
 80016fa:	4099      	lsls	r1, r3
 80016fc:	1e4b      	subs	r3, r1, #1
 80016fe:	4199      	sbcs	r1, r3
 8001700:	4653      	mov	r3, sl
 8001702:	40d3      	lsrs	r3, r2
 8001704:	430d      	orrs	r5, r1
 8001706:	1ae4      	subs	r4, r4, r3
 8001708:	1b45      	subs	r5, r0, r5
 800170a:	42a8      	cmp	r0, r5
 800170c:	4180      	sbcs	r0, r0
 800170e:	4240      	negs	r0, r0
 8001710:	1a24      	subs	r4, r4, r0
 8001712:	0223      	lsls	r3, r4, #8
 8001714:	d400      	bmi.n	8001718 <__aeabi_dadd+0xac>
 8001716:	e10f      	b.n	8001938 <__aeabi_dadd+0x2cc>
 8001718:	0264      	lsls	r4, r4, #9
 800171a:	0a64      	lsrs	r4, r4, #9
 800171c:	2c00      	cmp	r4, #0
 800171e:	d100      	bne.n	8001722 <__aeabi_dadd+0xb6>
 8001720:	e139      	b.n	8001996 <__aeabi_dadd+0x32a>
 8001722:	0020      	movs	r0, r4
 8001724:	f001 ff2a 	bl	800357c <__clzsi2>
 8001728:	0003      	movs	r3, r0
 800172a:	3b08      	subs	r3, #8
 800172c:	2120      	movs	r1, #32
 800172e:	0028      	movs	r0, r5
 8001730:	1aca      	subs	r2, r1, r3
 8001732:	40d0      	lsrs	r0, r2
 8001734:	409c      	lsls	r4, r3
 8001736:	0002      	movs	r2, r0
 8001738:	409d      	lsls	r5, r3
 800173a:	4322      	orrs	r2, r4
 800173c:	429f      	cmp	r7, r3
 800173e:	dd00      	ble.n	8001742 <__aeabi_dadd+0xd6>
 8001740:	e173      	b.n	8001a2a <__aeabi_dadd+0x3be>
 8001742:	1bd8      	subs	r0, r3, r7
 8001744:	3001      	adds	r0, #1
 8001746:	1a09      	subs	r1, r1, r0
 8001748:	002c      	movs	r4, r5
 800174a:	408d      	lsls	r5, r1
 800174c:	40c4      	lsrs	r4, r0
 800174e:	1e6b      	subs	r3, r5, #1
 8001750:	419d      	sbcs	r5, r3
 8001752:	0013      	movs	r3, r2
 8001754:	40c2      	lsrs	r2, r0
 8001756:	408b      	lsls	r3, r1
 8001758:	4325      	orrs	r5, r4
 800175a:	2700      	movs	r7, #0
 800175c:	0014      	movs	r4, r2
 800175e:	431d      	orrs	r5, r3
 8001760:	076b      	lsls	r3, r5, #29
 8001762:	d009      	beq.n	8001778 <__aeabi_dadd+0x10c>
 8001764:	230f      	movs	r3, #15
 8001766:	402b      	ands	r3, r5
 8001768:	2b04      	cmp	r3, #4
 800176a:	d005      	beq.n	8001778 <__aeabi_dadd+0x10c>
 800176c:	1d2b      	adds	r3, r5, #4
 800176e:	42ab      	cmp	r3, r5
 8001770:	41ad      	sbcs	r5, r5
 8001772:	426d      	negs	r5, r5
 8001774:	1964      	adds	r4, r4, r5
 8001776:	001d      	movs	r5, r3
 8001778:	0223      	lsls	r3, r4, #8
 800177a:	d400      	bmi.n	800177e <__aeabi_dadd+0x112>
 800177c:	e12d      	b.n	80019da <__aeabi_dadd+0x36e>
 800177e:	4a9d      	ldr	r2, [pc, #628]	@ (80019f4 <__aeabi_dadd+0x388>)
 8001780:	3701      	adds	r7, #1
 8001782:	4297      	cmp	r7, r2
 8001784:	d100      	bne.n	8001788 <__aeabi_dadd+0x11c>
 8001786:	e0d3      	b.n	8001930 <__aeabi_dadd+0x2c4>
 8001788:	4646      	mov	r6, r8
 800178a:	499b      	ldr	r1, [pc, #620]	@ (80019f8 <__aeabi_dadd+0x38c>)
 800178c:	08ed      	lsrs	r5, r5, #3
 800178e:	4021      	ands	r1, r4
 8001790:	074a      	lsls	r2, r1, #29
 8001792:	432a      	orrs	r2, r5
 8001794:	057c      	lsls	r4, r7, #21
 8001796:	024d      	lsls	r5, r1, #9
 8001798:	0b2d      	lsrs	r5, r5, #12
 800179a:	0d64      	lsrs	r4, r4, #21
 800179c:	0524      	lsls	r4, r4, #20
 800179e:	432c      	orrs	r4, r5
 80017a0:	07f6      	lsls	r6, r6, #31
 80017a2:	4334      	orrs	r4, r6
 80017a4:	0010      	movs	r0, r2
 80017a6:	0021      	movs	r1, r4
 80017a8:	b003      	add	sp, #12
 80017aa:	bcf0      	pop	{r4, r5, r6, r7}
 80017ac:	46bb      	mov	fp, r7
 80017ae:	46b2      	mov	sl, r6
 80017b0:	46a9      	mov	r9, r5
 80017b2:	46a0      	mov	r8, r4
 80017b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017b6:	2a00      	cmp	r2, #0
 80017b8:	d100      	bne.n	80017bc <__aeabi_dadd+0x150>
 80017ba:	e084      	b.n	80018c6 <__aeabi_dadd+0x25a>
 80017bc:	464a      	mov	r2, r9
 80017be:	1bd2      	subs	r2, r2, r7
 80017c0:	2f00      	cmp	r7, #0
 80017c2:	d000      	beq.n	80017c6 <__aeabi_dadd+0x15a>
 80017c4:	e16d      	b.n	8001aa2 <__aeabi_dadd+0x436>
 80017c6:	0025      	movs	r5, r4
 80017c8:	4305      	orrs	r5, r0
 80017ca:	d100      	bne.n	80017ce <__aeabi_dadd+0x162>
 80017cc:	e127      	b.n	8001a1e <__aeabi_dadd+0x3b2>
 80017ce:	1e56      	subs	r6, r2, #1
 80017d0:	2a01      	cmp	r2, #1
 80017d2:	d100      	bne.n	80017d6 <__aeabi_dadd+0x16a>
 80017d4:	e23b      	b.n	8001c4e <__aeabi_dadd+0x5e2>
 80017d6:	4d87      	ldr	r5, [pc, #540]	@ (80019f4 <__aeabi_dadd+0x388>)
 80017d8:	42aa      	cmp	r2, r5
 80017da:	d100      	bne.n	80017de <__aeabi_dadd+0x172>
 80017dc:	e26a      	b.n	8001cb4 <__aeabi_dadd+0x648>
 80017de:	2501      	movs	r5, #1
 80017e0:	2e38      	cmp	r6, #56	@ 0x38
 80017e2:	dc12      	bgt.n	800180a <__aeabi_dadd+0x19e>
 80017e4:	0032      	movs	r2, r6
 80017e6:	2a1f      	cmp	r2, #31
 80017e8:	dd00      	ble.n	80017ec <__aeabi_dadd+0x180>
 80017ea:	e1f8      	b.n	8001bde <__aeabi_dadd+0x572>
 80017ec:	2620      	movs	r6, #32
 80017ee:	0025      	movs	r5, r4
 80017f0:	1ab6      	subs	r6, r6, r2
 80017f2:	0007      	movs	r7, r0
 80017f4:	4653      	mov	r3, sl
 80017f6:	40b0      	lsls	r0, r6
 80017f8:	40d4      	lsrs	r4, r2
 80017fa:	40b5      	lsls	r5, r6
 80017fc:	40d7      	lsrs	r7, r2
 80017fe:	1e46      	subs	r6, r0, #1
 8001800:	41b0      	sbcs	r0, r6
 8001802:	1b1b      	subs	r3, r3, r4
 8001804:	469a      	mov	sl, r3
 8001806:	433d      	orrs	r5, r7
 8001808:	4305      	orrs	r5, r0
 800180a:	4662      	mov	r2, ip
 800180c:	1b55      	subs	r5, r2, r5
 800180e:	45ac      	cmp	ip, r5
 8001810:	4192      	sbcs	r2, r2
 8001812:	4653      	mov	r3, sl
 8001814:	4252      	negs	r2, r2
 8001816:	000e      	movs	r6, r1
 8001818:	464f      	mov	r7, r9
 800181a:	4688      	mov	r8, r1
 800181c:	1a9c      	subs	r4, r3, r2
 800181e:	e778      	b.n	8001712 <__aeabi_dadd+0xa6>
 8001820:	2a00      	cmp	r2, #0
 8001822:	dc00      	bgt.n	8001826 <__aeabi_dadd+0x1ba>
 8001824:	e08e      	b.n	8001944 <__aeabi_dadd+0x2d8>
 8001826:	4649      	mov	r1, r9
 8001828:	2900      	cmp	r1, #0
 800182a:	d175      	bne.n	8001918 <__aeabi_dadd+0x2ac>
 800182c:	4661      	mov	r1, ip
 800182e:	4653      	mov	r3, sl
 8001830:	4319      	orrs	r1, r3
 8001832:	d100      	bne.n	8001836 <__aeabi_dadd+0x1ca>
 8001834:	e0f6      	b.n	8001a24 <__aeabi_dadd+0x3b8>
 8001836:	1e51      	subs	r1, r2, #1
 8001838:	2a01      	cmp	r2, #1
 800183a:	d100      	bne.n	800183e <__aeabi_dadd+0x1d2>
 800183c:	e191      	b.n	8001b62 <__aeabi_dadd+0x4f6>
 800183e:	4d6d      	ldr	r5, [pc, #436]	@ (80019f4 <__aeabi_dadd+0x388>)
 8001840:	42aa      	cmp	r2, r5
 8001842:	d100      	bne.n	8001846 <__aeabi_dadd+0x1da>
 8001844:	e0dc      	b.n	8001a00 <__aeabi_dadd+0x394>
 8001846:	2501      	movs	r5, #1
 8001848:	2938      	cmp	r1, #56	@ 0x38
 800184a:	dc14      	bgt.n	8001876 <__aeabi_dadd+0x20a>
 800184c:	000a      	movs	r2, r1
 800184e:	2a1f      	cmp	r2, #31
 8001850:	dd00      	ble.n	8001854 <__aeabi_dadd+0x1e8>
 8001852:	e1a2      	b.n	8001b9a <__aeabi_dadd+0x52e>
 8001854:	2120      	movs	r1, #32
 8001856:	4653      	mov	r3, sl
 8001858:	1a89      	subs	r1, r1, r2
 800185a:	408b      	lsls	r3, r1
 800185c:	001d      	movs	r5, r3
 800185e:	4663      	mov	r3, ip
 8001860:	40d3      	lsrs	r3, r2
 8001862:	431d      	orrs	r5, r3
 8001864:	4663      	mov	r3, ip
 8001866:	408b      	lsls	r3, r1
 8001868:	0019      	movs	r1, r3
 800186a:	1e4b      	subs	r3, r1, #1
 800186c:	4199      	sbcs	r1, r3
 800186e:	4653      	mov	r3, sl
 8001870:	40d3      	lsrs	r3, r2
 8001872:	430d      	orrs	r5, r1
 8001874:	18e4      	adds	r4, r4, r3
 8001876:	182d      	adds	r5, r5, r0
 8001878:	4285      	cmp	r5, r0
 800187a:	4180      	sbcs	r0, r0
 800187c:	4240      	negs	r0, r0
 800187e:	1824      	adds	r4, r4, r0
 8001880:	0223      	lsls	r3, r4, #8
 8001882:	d559      	bpl.n	8001938 <__aeabi_dadd+0x2cc>
 8001884:	4b5b      	ldr	r3, [pc, #364]	@ (80019f4 <__aeabi_dadd+0x388>)
 8001886:	3701      	adds	r7, #1
 8001888:	429f      	cmp	r7, r3
 800188a:	d051      	beq.n	8001930 <__aeabi_dadd+0x2c4>
 800188c:	2101      	movs	r1, #1
 800188e:	4b5a      	ldr	r3, [pc, #360]	@ (80019f8 <__aeabi_dadd+0x38c>)
 8001890:	086a      	lsrs	r2, r5, #1
 8001892:	401c      	ands	r4, r3
 8001894:	4029      	ands	r1, r5
 8001896:	430a      	orrs	r2, r1
 8001898:	07e5      	lsls	r5, r4, #31
 800189a:	4315      	orrs	r5, r2
 800189c:	0864      	lsrs	r4, r4, #1
 800189e:	e75f      	b.n	8001760 <__aeabi_dadd+0xf4>
 80018a0:	4661      	mov	r1, ip
 80018a2:	4653      	mov	r3, sl
 80018a4:	4319      	orrs	r1, r3
 80018a6:	d100      	bne.n	80018aa <__aeabi_dadd+0x23e>
 80018a8:	e0bc      	b.n	8001a24 <__aeabi_dadd+0x3b8>
 80018aa:	1e51      	subs	r1, r2, #1
 80018ac:	2a01      	cmp	r2, #1
 80018ae:	d100      	bne.n	80018b2 <__aeabi_dadd+0x246>
 80018b0:	e164      	b.n	8001b7c <__aeabi_dadd+0x510>
 80018b2:	4d50      	ldr	r5, [pc, #320]	@ (80019f4 <__aeabi_dadd+0x388>)
 80018b4:	42aa      	cmp	r2, r5
 80018b6:	d100      	bne.n	80018ba <__aeabi_dadd+0x24e>
 80018b8:	e16a      	b.n	8001b90 <__aeabi_dadd+0x524>
 80018ba:	2501      	movs	r5, #1
 80018bc:	2938      	cmp	r1, #56	@ 0x38
 80018be:	dd00      	ble.n	80018c2 <__aeabi_dadd+0x256>
 80018c0:	e722      	b.n	8001708 <__aeabi_dadd+0x9c>
 80018c2:	000a      	movs	r2, r1
 80018c4:	e70e      	b.n	80016e4 <__aeabi_dadd+0x78>
 80018c6:	4a4d      	ldr	r2, [pc, #308]	@ (80019fc <__aeabi_dadd+0x390>)
 80018c8:	1c7d      	adds	r5, r7, #1
 80018ca:	4215      	tst	r5, r2
 80018cc:	d000      	beq.n	80018d0 <__aeabi_dadd+0x264>
 80018ce:	e0d0      	b.n	8001a72 <__aeabi_dadd+0x406>
 80018d0:	0025      	movs	r5, r4
 80018d2:	4662      	mov	r2, ip
 80018d4:	4653      	mov	r3, sl
 80018d6:	4305      	orrs	r5, r0
 80018d8:	431a      	orrs	r2, r3
 80018da:	2f00      	cmp	r7, #0
 80018dc:	d000      	beq.n	80018e0 <__aeabi_dadd+0x274>
 80018de:	e137      	b.n	8001b50 <__aeabi_dadd+0x4e4>
 80018e0:	2d00      	cmp	r5, #0
 80018e2:	d100      	bne.n	80018e6 <__aeabi_dadd+0x27a>
 80018e4:	e1a8      	b.n	8001c38 <__aeabi_dadd+0x5cc>
 80018e6:	2a00      	cmp	r2, #0
 80018e8:	d100      	bne.n	80018ec <__aeabi_dadd+0x280>
 80018ea:	e16a      	b.n	8001bc2 <__aeabi_dadd+0x556>
 80018ec:	4663      	mov	r3, ip
 80018ee:	1ac5      	subs	r5, r0, r3
 80018f0:	4653      	mov	r3, sl
 80018f2:	1ae2      	subs	r2, r4, r3
 80018f4:	42a8      	cmp	r0, r5
 80018f6:	419b      	sbcs	r3, r3
 80018f8:	425b      	negs	r3, r3
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	021a      	lsls	r2, r3, #8
 80018fe:	d400      	bmi.n	8001902 <__aeabi_dadd+0x296>
 8001900:	e203      	b.n	8001d0a <__aeabi_dadd+0x69e>
 8001902:	4663      	mov	r3, ip
 8001904:	1a1d      	subs	r5, r3, r0
 8001906:	45ac      	cmp	ip, r5
 8001908:	4192      	sbcs	r2, r2
 800190a:	4653      	mov	r3, sl
 800190c:	4252      	negs	r2, r2
 800190e:	1b1c      	subs	r4, r3, r4
 8001910:	000e      	movs	r6, r1
 8001912:	4688      	mov	r8, r1
 8001914:	1aa4      	subs	r4, r4, r2
 8001916:	e723      	b.n	8001760 <__aeabi_dadd+0xf4>
 8001918:	4936      	ldr	r1, [pc, #216]	@ (80019f4 <__aeabi_dadd+0x388>)
 800191a:	428f      	cmp	r7, r1
 800191c:	d070      	beq.n	8001a00 <__aeabi_dadd+0x394>
 800191e:	2501      	movs	r5, #1
 8001920:	2a38      	cmp	r2, #56	@ 0x38
 8001922:	dca8      	bgt.n	8001876 <__aeabi_dadd+0x20a>
 8001924:	2180      	movs	r1, #128	@ 0x80
 8001926:	4653      	mov	r3, sl
 8001928:	0409      	lsls	r1, r1, #16
 800192a:	430b      	orrs	r3, r1
 800192c:	469a      	mov	sl, r3
 800192e:	e78e      	b.n	800184e <__aeabi_dadd+0x1e2>
 8001930:	003c      	movs	r4, r7
 8001932:	2500      	movs	r5, #0
 8001934:	2200      	movs	r2, #0
 8001936:	e731      	b.n	800179c <__aeabi_dadd+0x130>
 8001938:	2307      	movs	r3, #7
 800193a:	402b      	ands	r3, r5
 800193c:	2b00      	cmp	r3, #0
 800193e:	d000      	beq.n	8001942 <__aeabi_dadd+0x2d6>
 8001940:	e710      	b.n	8001764 <__aeabi_dadd+0xf8>
 8001942:	e093      	b.n	8001a6c <__aeabi_dadd+0x400>
 8001944:	2a00      	cmp	r2, #0
 8001946:	d074      	beq.n	8001a32 <__aeabi_dadd+0x3c6>
 8001948:	464a      	mov	r2, r9
 800194a:	1bd2      	subs	r2, r2, r7
 800194c:	2f00      	cmp	r7, #0
 800194e:	d100      	bne.n	8001952 <__aeabi_dadd+0x2e6>
 8001950:	e0c7      	b.n	8001ae2 <__aeabi_dadd+0x476>
 8001952:	4928      	ldr	r1, [pc, #160]	@ (80019f4 <__aeabi_dadd+0x388>)
 8001954:	4589      	cmp	r9, r1
 8001956:	d100      	bne.n	800195a <__aeabi_dadd+0x2ee>
 8001958:	e185      	b.n	8001c66 <__aeabi_dadd+0x5fa>
 800195a:	2501      	movs	r5, #1
 800195c:	2a38      	cmp	r2, #56	@ 0x38
 800195e:	dc12      	bgt.n	8001986 <__aeabi_dadd+0x31a>
 8001960:	2180      	movs	r1, #128	@ 0x80
 8001962:	0409      	lsls	r1, r1, #16
 8001964:	430c      	orrs	r4, r1
 8001966:	2a1f      	cmp	r2, #31
 8001968:	dd00      	ble.n	800196c <__aeabi_dadd+0x300>
 800196a:	e1ab      	b.n	8001cc4 <__aeabi_dadd+0x658>
 800196c:	2120      	movs	r1, #32
 800196e:	0025      	movs	r5, r4
 8001970:	1a89      	subs	r1, r1, r2
 8001972:	0007      	movs	r7, r0
 8001974:	4088      	lsls	r0, r1
 8001976:	408d      	lsls	r5, r1
 8001978:	40d7      	lsrs	r7, r2
 800197a:	1e41      	subs	r1, r0, #1
 800197c:	4188      	sbcs	r0, r1
 800197e:	40d4      	lsrs	r4, r2
 8001980:	433d      	orrs	r5, r7
 8001982:	4305      	orrs	r5, r0
 8001984:	44a2      	add	sl, r4
 8001986:	4465      	add	r5, ip
 8001988:	4565      	cmp	r5, ip
 800198a:	4192      	sbcs	r2, r2
 800198c:	4252      	negs	r2, r2
 800198e:	4452      	add	r2, sl
 8001990:	0014      	movs	r4, r2
 8001992:	464f      	mov	r7, r9
 8001994:	e774      	b.n	8001880 <__aeabi_dadd+0x214>
 8001996:	0028      	movs	r0, r5
 8001998:	f001 fdf0 	bl	800357c <__clzsi2>
 800199c:	0003      	movs	r3, r0
 800199e:	3318      	adds	r3, #24
 80019a0:	2b1f      	cmp	r3, #31
 80019a2:	dc00      	bgt.n	80019a6 <__aeabi_dadd+0x33a>
 80019a4:	e6c2      	b.n	800172c <__aeabi_dadd+0xc0>
 80019a6:	002a      	movs	r2, r5
 80019a8:	3808      	subs	r0, #8
 80019aa:	4082      	lsls	r2, r0
 80019ac:	429f      	cmp	r7, r3
 80019ae:	dd00      	ble.n	80019b2 <__aeabi_dadd+0x346>
 80019b0:	e0a9      	b.n	8001b06 <__aeabi_dadd+0x49a>
 80019b2:	1bdb      	subs	r3, r3, r7
 80019b4:	1c58      	adds	r0, r3, #1
 80019b6:	281f      	cmp	r0, #31
 80019b8:	dc00      	bgt.n	80019bc <__aeabi_dadd+0x350>
 80019ba:	e1ac      	b.n	8001d16 <__aeabi_dadd+0x6aa>
 80019bc:	0015      	movs	r5, r2
 80019be:	3b1f      	subs	r3, #31
 80019c0:	40dd      	lsrs	r5, r3
 80019c2:	2820      	cmp	r0, #32
 80019c4:	d005      	beq.n	80019d2 <__aeabi_dadd+0x366>
 80019c6:	2340      	movs	r3, #64	@ 0x40
 80019c8:	1a1b      	subs	r3, r3, r0
 80019ca:	409a      	lsls	r2, r3
 80019cc:	1e53      	subs	r3, r2, #1
 80019ce:	419a      	sbcs	r2, r3
 80019d0:	4315      	orrs	r5, r2
 80019d2:	2307      	movs	r3, #7
 80019d4:	2700      	movs	r7, #0
 80019d6:	402b      	ands	r3, r5
 80019d8:	e7b0      	b.n	800193c <__aeabi_dadd+0x2d0>
 80019da:	08ed      	lsrs	r5, r5, #3
 80019dc:	4b05      	ldr	r3, [pc, #20]	@ (80019f4 <__aeabi_dadd+0x388>)
 80019de:	0762      	lsls	r2, r4, #29
 80019e0:	432a      	orrs	r2, r5
 80019e2:	08e4      	lsrs	r4, r4, #3
 80019e4:	429f      	cmp	r7, r3
 80019e6:	d00f      	beq.n	8001a08 <__aeabi_dadd+0x39c>
 80019e8:	0324      	lsls	r4, r4, #12
 80019ea:	0b25      	lsrs	r5, r4, #12
 80019ec:	057c      	lsls	r4, r7, #21
 80019ee:	0d64      	lsrs	r4, r4, #21
 80019f0:	e6d4      	b.n	800179c <__aeabi_dadd+0x130>
 80019f2:	46c0      	nop			@ (mov r8, r8)
 80019f4:	000007ff 	.word	0x000007ff
 80019f8:	ff7fffff 	.word	0xff7fffff
 80019fc:	000007fe 	.word	0x000007fe
 8001a00:	08c0      	lsrs	r0, r0, #3
 8001a02:	0762      	lsls	r2, r4, #29
 8001a04:	4302      	orrs	r2, r0
 8001a06:	08e4      	lsrs	r4, r4, #3
 8001a08:	0013      	movs	r3, r2
 8001a0a:	4323      	orrs	r3, r4
 8001a0c:	d100      	bne.n	8001a10 <__aeabi_dadd+0x3a4>
 8001a0e:	e186      	b.n	8001d1e <__aeabi_dadd+0x6b2>
 8001a10:	2580      	movs	r5, #128	@ 0x80
 8001a12:	032d      	lsls	r5, r5, #12
 8001a14:	4325      	orrs	r5, r4
 8001a16:	032d      	lsls	r5, r5, #12
 8001a18:	4cc3      	ldr	r4, [pc, #780]	@ (8001d28 <__aeabi_dadd+0x6bc>)
 8001a1a:	0b2d      	lsrs	r5, r5, #12
 8001a1c:	e6be      	b.n	800179c <__aeabi_dadd+0x130>
 8001a1e:	4660      	mov	r0, ip
 8001a20:	4654      	mov	r4, sl
 8001a22:	000e      	movs	r6, r1
 8001a24:	0017      	movs	r7, r2
 8001a26:	08c5      	lsrs	r5, r0, #3
 8001a28:	e7d8      	b.n	80019dc <__aeabi_dadd+0x370>
 8001a2a:	4cc0      	ldr	r4, [pc, #768]	@ (8001d2c <__aeabi_dadd+0x6c0>)
 8001a2c:	1aff      	subs	r7, r7, r3
 8001a2e:	4014      	ands	r4, r2
 8001a30:	e696      	b.n	8001760 <__aeabi_dadd+0xf4>
 8001a32:	4abf      	ldr	r2, [pc, #764]	@ (8001d30 <__aeabi_dadd+0x6c4>)
 8001a34:	1c79      	adds	r1, r7, #1
 8001a36:	4211      	tst	r1, r2
 8001a38:	d16b      	bne.n	8001b12 <__aeabi_dadd+0x4a6>
 8001a3a:	0022      	movs	r2, r4
 8001a3c:	4302      	orrs	r2, r0
 8001a3e:	2f00      	cmp	r7, #0
 8001a40:	d000      	beq.n	8001a44 <__aeabi_dadd+0x3d8>
 8001a42:	e0db      	b.n	8001bfc <__aeabi_dadd+0x590>
 8001a44:	2a00      	cmp	r2, #0
 8001a46:	d100      	bne.n	8001a4a <__aeabi_dadd+0x3de>
 8001a48:	e12d      	b.n	8001ca6 <__aeabi_dadd+0x63a>
 8001a4a:	4662      	mov	r2, ip
 8001a4c:	4653      	mov	r3, sl
 8001a4e:	431a      	orrs	r2, r3
 8001a50:	d100      	bne.n	8001a54 <__aeabi_dadd+0x3e8>
 8001a52:	e0b6      	b.n	8001bc2 <__aeabi_dadd+0x556>
 8001a54:	4663      	mov	r3, ip
 8001a56:	18c5      	adds	r5, r0, r3
 8001a58:	4285      	cmp	r5, r0
 8001a5a:	4180      	sbcs	r0, r0
 8001a5c:	4454      	add	r4, sl
 8001a5e:	4240      	negs	r0, r0
 8001a60:	1824      	adds	r4, r4, r0
 8001a62:	0223      	lsls	r3, r4, #8
 8001a64:	d502      	bpl.n	8001a6c <__aeabi_dadd+0x400>
 8001a66:	000f      	movs	r7, r1
 8001a68:	4bb0      	ldr	r3, [pc, #704]	@ (8001d2c <__aeabi_dadd+0x6c0>)
 8001a6a:	401c      	ands	r4, r3
 8001a6c:	003a      	movs	r2, r7
 8001a6e:	0028      	movs	r0, r5
 8001a70:	e7d8      	b.n	8001a24 <__aeabi_dadd+0x3b8>
 8001a72:	4662      	mov	r2, ip
 8001a74:	1a85      	subs	r5, r0, r2
 8001a76:	42a8      	cmp	r0, r5
 8001a78:	4192      	sbcs	r2, r2
 8001a7a:	4653      	mov	r3, sl
 8001a7c:	4252      	negs	r2, r2
 8001a7e:	4691      	mov	r9, r2
 8001a80:	1ae3      	subs	r3, r4, r3
 8001a82:	001a      	movs	r2, r3
 8001a84:	464b      	mov	r3, r9
 8001a86:	1ad2      	subs	r2, r2, r3
 8001a88:	0013      	movs	r3, r2
 8001a8a:	4691      	mov	r9, r2
 8001a8c:	021a      	lsls	r2, r3, #8
 8001a8e:	d454      	bmi.n	8001b3a <__aeabi_dadd+0x4ce>
 8001a90:	464a      	mov	r2, r9
 8001a92:	464c      	mov	r4, r9
 8001a94:	432a      	orrs	r2, r5
 8001a96:	d000      	beq.n	8001a9a <__aeabi_dadd+0x42e>
 8001a98:	e640      	b.n	800171c <__aeabi_dadd+0xb0>
 8001a9a:	2600      	movs	r6, #0
 8001a9c:	2400      	movs	r4, #0
 8001a9e:	2500      	movs	r5, #0
 8001aa0:	e67c      	b.n	800179c <__aeabi_dadd+0x130>
 8001aa2:	4da1      	ldr	r5, [pc, #644]	@ (8001d28 <__aeabi_dadd+0x6bc>)
 8001aa4:	45a9      	cmp	r9, r5
 8001aa6:	d100      	bne.n	8001aaa <__aeabi_dadd+0x43e>
 8001aa8:	e090      	b.n	8001bcc <__aeabi_dadd+0x560>
 8001aaa:	2501      	movs	r5, #1
 8001aac:	2a38      	cmp	r2, #56	@ 0x38
 8001aae:	dd00      	ble.n	8001ab2 <__aeabi_dadd+0x446>
 8001ab0:	e6ab      	b.n	800180a <__aeabi_dadd+0x19e>
 8001ab2:	2580      	movs	r5, #128	@ 0x80
 8001ab4:	042d      	lsls	r5, r5, #16
 8001ab6:	432c      	orrs	r4, r5
 8001ab8:	e695      	b.n	80017e6 <__aeabi_dadd+0x17a>
 8001aba:	0011      	movs	r1, r2
 8001abc:	4655      	mov	r5, sl
 8001abe:	3920      	subs	r1, #32
 8001ac0:	40cd      	lsrs	r5, r1
 8001ac2:	46a9      	mov	r9, r5
 8001ac4:	2a20      	cmp	r2, #32
 8001ac6:	d006      	beq.n	8001ad6 <__aeabi_dadd+0x46a>
 8001ac8:	2140      	movs	r1, #64	@ 0x40
 8001aca:	4653      	mov	r3, sl
 8001acc:	1a8a      	subs	r2, r1, r2
 8001ace:	4093      	lsls	r3, r2
 8001ad0:	4662      	mov	r2, ip
 8001ad2:	431a      	orrs	r2, r3
 8001ad4:	4694      	mov	ip, r2
 8001ad6:	4665      	mov	r5, ip
 8001ad8:	1e6b      	subs	r3, r5, #1
 8001ada:	419d      	sbcs	r5, r3
 8001adc:	464b      	mov	r3, r9
 8001ade:	431d      	orrs	r5, r3
 8001ae0:	e612      	b.n	8001708 <__aeabi_dadd+0x9c>
 8001ae2:	0021      	movs	r1, r4
 8001ae4:	4301      	orrs	r1, r0
 8001ae6:	d100      	bne.n	8001aea <__aeabi_dadd+0x47e>
 8001ae8:	e0c4      	b.n	8001c74 <__aeabi_dadd+0x608>
 8001aea:	1e51      	subs	r1, r2, #1
 8001aec:	2a01      	cmp	r2, #1
 8001aee:	d100      	bne.n	8001af2 <__aeabi_dadd+0x486>
 8001af0:	e0fb      	b.n	8001cea <__aeabi_dadd+0x67e>
 8001af2:	4d8d      	ldr	r5, [pc, #564]	@ (8001d28 <__aeabi_dadd+0x6bc>)
 8001af4:	42aa      	cmp	r2, r5
 8001af6:	d100      	bne.n	8001afa <__aeabi_dadd+0x48e>
 8001af8:	e0b5      	b.n	8001c66 <__aeabi_dadd+0x5fa>
 8001afa:	2501      	movs	r5, #1
 8001afc:	2938      	cmp	r1, #56	@ 0x38
 8001afe:	dd00      	ble.n	8001b02 <__aeabi_dadd+0x496>
 8001b00:	e741      	b.n	8001986 <__aeabi_dadd+0x31a>
 8001b02:	000a      	movs	r2, r1
 8001b04:	e72f      	b.n	8001966 <__aeabi_dadd+0x2fa>
 8001b06:	4c89      	ldr	r4, [pc, #548]	@ (8001d2c <__aeabi_dadd+0x6c0>)
 8001b08:	1aff      	subs	r7, r7, r3
 8001b0a:	4014      	ands	r4, r2
 8001b0c:	0762      	lsls	r2, r4, #29
 8001b0e:	08e4      	lsrs	r4, r4, #3
 8001b10:	e76a      	b.n	80019e8 <__aeabi_dadd+0x37c>
 8001b12:	4a85      	ldr	r2, [pc, #532]	@ (8001d28 <__aeabi_dadd+0x6bc>)
 8001b14:	4291      	cmp	r1, r2
 8001b16:	d100      	bne.n	8001b1a <__aeabi_dadd+0x4ae>
 8001b18:	e0e3      	b.n	8001ce2 <__aeabi_dadd+0x676>
 8001b1a:	4663      	mov	r3, ip
 8001b1c:	18c2      	adds	r2, r0, r3
 8001b1e:	4282      	cmp	r2, r0
 8001b20:	4180      	sbcs	r0, r0
 8001b22:	0023      	movs	r3, r4
 8001b24:	4240      	negs	r0, r0
 8001b26:	4453      	add	r3, sl
 8001b28:	181b      	adds	r3, r3, r0
 8001b2a:	07dd      	lsls	r5, r3, #31
 8001b2c:	085c      	lsrs	r4, r3, #1
 8001b2e:	2307      	movs	r3, #7
 8001b30:	0852      	lsrs	r2, r2, #1
 8001b32:	4315      	orrs	r5, r2
 8001b34:	000f      	movs	r7, r1
 8001b36:	402b      	ands	r3, r5
 8001b38:	e700      	b.n	800193c <__aeabi_dadd+0x2d0>
 8001b3a:	4663      	mov	r3, ip
 8001b3c:	1a1d      	subs	r5, r3, r0
 8001b3e:	45ac      	cmp	ip, r5
 8001b40:	4192      	sbcs	r2, r2
 8001b42:	4653      	mov	r3, sl
 8001b44:	4252      	negs	r2, r2
 8001b46:	1b1c      	subs	r4, r3, r4
 8001b48:	000e      	movs	r6, r1
 8001b4a:	4688      	mov	r8, r1
 8001b4c:	1aa4      	subs	r4, r4, r2
 8001b4e:	e5e5      	b.n	800171c <__aeabi_dadd+0xb0>
 8001b50:	2d00      	cmp	r5, #0
 8001b52:	d000      	beq.n	8001b56 <__aeabi_dadd+0x4ea>
 8001b54:	e091      	b.n	8001c7a <__aeabi_dadd+0x60e>
 8001b56:	2a00      	cmp	r2, #0
 8001b58:	d138      	bne.n	8001bcc <__aeabi_dadd+0x560>
 8001b5a:	2480      	movs	r4, #128	@ 0x80
 8001b5c:	2600      	movs	r6, #0
 8001b5e:	0324      	lsls	r4, r4, #12
 8001b60:	e756      	b.n	8001a10 <__aeabi_dadd+0x3a4>
 8001b62:	4663      	mov	r3, ip
 8001b64:	18c5      	adds	r5, r0, r3
 8001b66:	4285      	cmp	r5, r0
 8001b68:	4180      	sbcs	r0, r0
 8001b6a:	4454      	add	r4, sl
 8001b6c:	4240      	negs	r0, r0
 8001b6e:	1824      	adds	r4, r4, r0
 8001b70:	2701      	movs	r7, #1
 8001b72:	0223      	lsls	r3, r4, #8
 8001b74:	d400      	bmi.n	8001b78 <__aeabi_dadd+0x50c>
 8001b76:	e6df      	b.n	8001938 <__aeabi_dadd+0x2cc>
 8001b78:	2702      	movs	r7, #2
 8001b7a:	e687      	b.n	800188c <__aeabi_dadd+0x220>
 8001b7c:	4663      	mov	r3, ip
 8001b7e:	1ac5      	subs	r5, r0, r3
 8001b80:	42a8      	cmp	r0, r5
 8001b82:	4180      	sbcs	r0, r0
 8001b84:	4653      	mov	r3, sl
 8001b86:	4240      	negs	r0, r0
 8001b88:	1ae4      	subs	r4, r4, r3
 8001b8a:	2701      	movs	r7, #1
 8001b8c:	1a24      	subs	r4, r4, r0
 8001b8e:	e5c0      	b.n	8001712 <__aeabi_dadd+0xa6>
 8001b90:	0762      	lsls	r2, r4, #29
 8001b92:	08c0      	lsrs	r0, r0, #3
 8001b94:	4302      	orrs	r2, r0
 8001b96:	08e4      	lsrs	r4, r4, #3
 8001b98:	e736      	b.n	8001a08 <__aeabi_dadd+0x39c>
 8001b9a:	0011      	movs	r1, r2
 8001b9c:	4653      	mov	r3, sl
 8001b9e:	3920      	subs	r1, #32
 8001ba0:	40cb      	lsrs	r3, r1
 8001ba2:	4699      	mov	r9, r3
 8001ba4:	2a20      	cmp	r2, #32
 8001ba6:	d006      	beq.n	8001bb6 <__aeabi_dadd+0x54a>
 8001ba8:	2140      	movs	r1, #64	@ 0x40
 8001baa:	4653      	mov	r3, sl
 8001bac:	1a8a      	subs	r2, r1, r2
 8001bae:	4093      	lsls	r3, r2
 8001bb0:	4662      	mov	r2, ip
 8001bb2:	431a      	orrs	r2, r3
 8001bb4:	4694      	mov	ip, r2
 8001bb6:	4665      	mov	r5, ip
 8001bb8:	1e6b      	subs	r3, r5, #1
 8001bba:	419d      	sbcs	r5, r3
 8001bbc:	464b      	mov	r3, r9
 8001bbe:	431d      	orrs	r5, r3
 8001bc0:	e659      	b.n	8001876 <__aeabi_dadd+0x20a>
 8001bc2:	0762      	lsls	r2, r4, #29
 8001bc4:	08c0      	lsrs	r0, r0, #3
 8001bc6:	4302      	orrs	r2, r0
 8001bc8:	08e4      	lsrs	r4, r4, #3
 8001bca:	e70d      	b.n	80019e8 <__aeabi_dadd+0x37c>
 8001bcc:	4653      	mov	r3, sl
 8001bce:	075a      	lsls	r2, r3, #29
 8001bd0:	4663      	mov	r3, ip
 8001bd2:	08d8      	lsrs	r0, r3, #3
 8001bd4:	4653      	mov	r3, sl
 8001bd6:	000e      	movs	r6, r1
 8001bd8:	4302      	orrs	r2, r0
 8001bda:	08dc      	lsrs	r4, r3, #3
 8001bdc:	e714      	b.n	8001a08 <__aeabi_dadd+0x39c>
 8001bde:	0015      	movs	r5, r2
 8001be0:	0026      	movs	r6, r4
 8001be2:	3d20      	subs	r5, #32
 8001be4:	40ee      	lsrs	r6, r5
 8001be6:	2a20      	cmp	r2, #32
 8001be8:	d003      	beq.n	8001bf2 <__aeabi_dadd+0x586>
 8001bea:	2540      	movs	r5, #64	@ 0x40
 8001bec:	1aaa      	subs	r2, r5, r2
 8001bee:	4094      	lsls	r4, r2
 8001bf0:	4320      	orrs	r0, r4
 8001bf2:	1e42      	subs	r2, r0, #1
 8001bf4:	4190      	sbcs	r0, r2
 8001bf6:	0005      	movs	r5, r0
 8001bf8:	4335      	orrs	r5, r6
 8001bfa:	e606      	b.n	800180a <__aeabi_dadd+0x19e>
 8001bfc:	2a00      	cmp	r2, #0
 8001bfe:	d07c      	beq.n	8001cfa <__aeabi_dadd+0x68e>
 8001c00:	4662      	mov	r2, ip
 8001c02:	4653      	mov	r3, sl
 8001c04:	08c0      	lsrs	r0, r0, #3
 8001c06:	431a      	orrs	r2, r3
 8001c08:	d100      	bne.n	8001c0c <__aeabi_dadd+0x5a0>
 8001c0a:	e6fa      	b.n	8001a02 <__aeabi_dadd+0x396>
 8001c0c:	0762      	lsls	r2, r4, #29
 8001c0e:	4310      	orrs	r0, r2
 8001c10:	2280      	movs	r2, #128	@ 0x80
 8001c12:	08e4      	lsrs	r4, r4, #3
 8001c14:	0312      	lsls	r2, r2, #12
 8001c16:	4214      	tst	r4, r2
 8001c18:	d008      	beq.n	8001c2c <__aeabi_dadd+0x5c0>
 8001c1a:	08d9      	lsrs	r1, r3, #3
 8001c1c:	4211      	tst	r1, r2
 8001c1e:	d105      	bne.n	8001c2c <__aeabi_dadd+0x5c0>
 8001c20:	4663      	mov	r3, ip
 8001c22:	08d8      	lsrs	r0, r3, #3
 8001c24:	4653      	mov	r3, sl
 8001c26:	000c      	movs	r4, r1
 8001c28:	075b      	lsls	r3, r3, #29
 8001c2a:	4318      	orrs	r0, r3
 8001c2c:	0f42      	lsrs	r2, r0, #29
 8001c2e:	00c0      	lsls	r0, r0, #3
 8001c30:	08c0      	lsrs	r0, r0, #3
 8001c32:	0752      	lsls	r2, r2, #29
 8001c34:	4302      	orrs	r2, r0
 8001c36:	e6e7      	b.n	8001a08 <__aeabi_dadd+0x39c>
 8001c38:	2a00      	cmp	r2, #0
 8001c3a:	d100      	bne.n	8001c3e <__aeabi_dadd+0x5d2>
 8001c3c:	e72d      	b.n	8001a9a <__aeabi_dadd+0x42e>
 8001c3e:	4663      	mov	r3, ip
 8001c40:	08d8      	lsrs	r0, r3, #3
 8001c42:	4653      	mov	r3, sl
 8001c44:	075a      	lsls	r2, r3, #29
 8001c46:	000e      	movs	r6, r1
 8001c48:	4302      	orrs	r2, r0
 8001c4a:	08dc      	lsrs	r4, r3, #3
 8001c4c:	e6cc      	b.n	80019e8 <__aeabi_dadd+0x37c>
 8001c4e:	4663      	mov	r3, ip
 8001c50:	1a1d      	subs	r5, r3, r0
 8001c52:	45ac      	cmp	ip, r5
 8001c54:	4192      	sbcs	r2, r2
 8001c56:	4653      	mov	r3, sl
 8001c58:	4252      	negs	r2, r2
 8001c5a:	1b1c      	subs	r4, r3, r4
 8001c5c:	000e      	movs	r6, r1
 8001c5e:	4688      	mov	r8, r1
 8001c60:	1aa4      	subs	r4, r4, r2
 8001c62:	3701      	adds	r7, #1
 8001c64:	e555      	b.n	8001712 <__aeabi_dadd+0xa6>
 8001c66:	4663      	mov	r3, ip
 8001c68:	08d9      	lsrs	r1, r3, #3
 8001c6a:	4653      	mov	r3, sl
 8001c6c:	075a      	lsls	r2, r3, #29
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	08dc      	lsrs	r4, r3, #3
 8001c72:	e6c9      	b.n	8001a08 <__aeabi_dadd+0x39c>
 8001c74:	4660      	mov	r0, ip
 8001c76:	4654      	mov	r4, sl
 8001c78:	e6d4      	b.n	8001a24 <__aeabi_dadd+0x3b8>
 8001c7a:	08c0      	lsrs	r0, r0, #3
 8001c7c:	2a00      	cmp	r2, #0
 8001c7e:	d100      	bne.n	8001c82 <__aeabi_dadd+0x616>
 8001c80:	e6bf      	b.n	8001a02 <__aeabi_dadd+0x396>
 8001c82:	0762      	lsls	r2, r4, #29
 8001c84:	4310      	orrs	r0, r2
 8001c86:	2280      	movs	r2, #128	@ 0x80
 8001c88:	08e4      	lsrs	r4, r4, #3
 8001c8a:	0312      	lsls	r2, r2, #12
 8001c8c:	4214      	tst	r4, r2
 8001c8e:	d0cd      	beq.n	8001c2c <__aeabi_dadd+0x5c0>
 8001c90:	08dd      	lsrs	r5, r3, #3
 8001c92:	4215      	tst	r5, r2
 8001c94:	d1ca      	bne.n	8001c2c <__aeabi_dadd+0x5c0>
 8001c96:	4663      	mov	r3, ip
 8001c98:	08d8      	lsrs	r0, r3, #3
 8001c9a:	4653      	mov	r3, sl
 8001c9c:	075b      	lsls	r3, r3, #29
 8001c9e:	000e      	movs	r6, r1
 8001ca0:	002c      	movs	r4, r5
 8001ca2:	4318      	orrs	r0, r3
 8001ca4:	e7c2      	b.n	8001c2c <__aeabi_dadd+0x5c0>
 8001ca6:	4663      	mov	r3, ip
 8001ca8:	08d9      	lsrs	r1, r3, #3
 8001caa:	4653      	mov	r3, sl
 8001cac:	075a      	lsls	r2, r3, #29
 8001cae:	430a      	orrs	r2, r1
 8001cb0:	08dc      	lsrs	r4, r3, #3
 8001cb2:	e699      	b.n	80019e8 <__aeabi_dadd+0x37c>
 8001cb4:	4663      	mov	r3, ip
 8001cb6:	08d8      	lsrs	r0, r3, #3
 8001cb8:	4653      	mov	r3, sl
 8001cba:	075a      	lsls	r2, r3, #29
 8001cbc:	000e      	movs	r6, r1
 8001cbe:	4302      	orrs	r2, r0
 8001cc0:	08dc      	lsrs	r4, r3, #3
 8001cc2:	e6a1      	b.n	8001a08 <__aeabi_dadd+0x39c>
 8001cc4:	0011      	movs	r1, r2
 8001cc6:	0027      	movs	r7, r4
 8001cc8:	3920      	subs	r1, #32
 8001cca:	40cf      	lsrs	r7, r1
 8001ccc:	2a20      	cmp	r2, #32
 8001cce:	d003      	beq.n	8001cd8 <__aeabi_dadd+0x66c>
 8001cd0:	2140      	movs	r1, #64	@ 0x40
 8001cd2:	1a8a      	subs	r2, r1, r2
 8001cd4:	4094      	lsls	r4, r2
 8001cd6:	4320      	orrs	r0, r4
 8001cd8:	1e42      	subs	r2, r0, #1
 8001cda:	4190      	sbcs	r0, r2
 8001cdc:	0005      	movs	r5, r0
 8001cde:	433d      	orrs	r5, r7
 8001ce0:	e651      	b.n	8001986 <__aeabi_dadd+0x31a>
 8001ce2:	000c      	movs	r4, r1
 8001ce4:	2500      	movs	r5, #0
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	e558      	b.n	800179c <__aeabi_dadd+0x130>
 8001cea:	4460      	add	r0, ip
 8001cec:	4560      	cmp	r0, ip
 8001cee:	4192      	sbcs	r2, r2
 8001cf0:	4454      	add	r4, sl
 8001cf2:	4252      	negs	r2, r2
 8001cf4:	0005      	movs	r5, r0
 8001cf6:	18a4      	adds	r4, r4, r2
 8001cf8:	e73a      	b.n	8001b70 <__aeabi_dadd+0x504>
 8001cfa:	4653      	mov	r3, sl
 8001cfc:	075a      	lsls	r2, r3, #29
 8001cfe:	4663      	mov	r3, ip
 8001d00:	08d9      	lsrs	r1, r3, #3
 8001d02:	4653      	mov	r3, sl
 8001d04:	430a      	orrs	r2, r1
 8001d06:	08dc      	lsrs	r4, r3, #3
 8001d08:	e67e      	b.n	8001a08 <__aeabi_dadd+0x39c>
 8001d0a:	001a      	movs	r2, r3
 8001d0c:	001c      	movs	r4, r3
 8001d0e:	432a      	orrs	r2, r5
 8001d10:	d000      	beq.n	8001d14 <__aeabi_dadd+0x6a8>
 8001d12:	e6ab      	b.n	8001a6c <__aeabi_dadd+0x400>
 8001d14:	e6c1      	b.n	8001a9a <__aeabi_dadd+0x42e>
 8001d16:	2120      	movs	r1, #32
 8001d18:	2500      	movs	r5, #0
 8001d1a:	1a09      	subs	r1, r1, r0
 8001d1c:	e519      	b.n	8001752 <__aeabi_dadd+0xe6>
 8001d1e:	2200      	movs	r2, #0
 8001d20:	2500      	movs	r5, #0
 8001d22:	4c01      	ldr	r4, [pc, #4]	@ (8001d28 <__aeabi_dadd+0x6bc>)
 8001d24:	e53a      	b.n	800179c <__aeabi_dadd+0x130>
 8001d26:	46c0      	nop			@ (mov r8, r8)
 8001d28:	000007ff 	.word	0x000007ff
 8001d2c:	ff7fffff 	.word	0xff7fffff
 8001d30:	000007fe 	.word	0x000007fe

08001d34 <__aeabi_ddiv>:
 8001d34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d36:	46de      	mov	lr, fp
 8001d38:	4645      	mov	r5, r8
 8001d3a:	4657      	mov	r7, sl
 8001d3c:	464e      	mov	r6, r9
 8001d3e:	b5e0      	push	{r5, r6, r7, lr}
 8001d40:	b087      	sub	sp, #28
 8001d42:	9200      	str	r2, [sp, #0]
 8001d44:	9301      	str	r3, [sp, #4]
 8001d46:	030b      	lsls	r3, r1, #12
 8001d48:	0b1b      	lsrs	r3, r3, #12
 8001d4a:	469b      	mov	fp, r3
 8001d4c:	0fca      	lsrs	r2, r1, #31
 8001d4e:	004b      	lsls	r3, r1, #1
 8001d50:	0004      	movs	r4, r0
 8001d52:	4680      	mov	r8, r0
 8001d54:	0d5b      	lsrs	r3, r3, #21
 8001d56:	9202      	str	r2, [sp, #8]
 8001d58:	d100      	bne.n	8001d5c <__aeabi_ddiv+0x28>
 8001d5a:	e16a      	b.n	8002032 <__aeabi_ddiv+0x2fe>
 8001d5c:	4ad4      	ldr	r2, [pc, #848]	@ (80020b0 <__aeabi_ddiv+0x37c>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d100      	bne.n	8001d64 <__aeabi_ddiv+0x30>
 8001d62:	e18c      	b.n	800207e <__aeabi_ddiv+0x34a>
 8001d64:	4659      	mov	r1, fp
 8001d66:	0f42      	lsrs	r2, r0, #29
 8001d68:	00c9      	lsls	r1, r1, #3
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	2180      	movs	r1, #128	@ 0x80
 8001d6e:	0409      	lsls	r1, r1, #16
 8001d70:	4311      	orrs	r1, r2
 8001d72:	00c2      	lsls	r2, r0, #3
 8001d74:	4690      	mov	r8, r2
 8001d76:	4acf      	ldr	r2, [pc, #828]	@ (80020b4 <__aeabi_ddiv+0x380>)
 8001d78:	4689      	mov	r9, r1
 8001d7a:	4692      	mov	sl, r2
 8001d7c:	449a      	add	sl, r3
 8001d7e:	2300      	movs	r3, #0
 8001d80:	2400      	movs	r4, #0
 8001d82:	9303      	str	r3, [sp, #12]
 8001d84:	9e00      	ldr	r6, [sp, #0]
 8001d86:	9f01      	ldr	r7, [sp, #4]
 8001d88:	033b      	lsls	r3, r7, #12
 8001d8a:	0b1b      	lsrs	r3, r3, #12
 8001d8c:	469b      	mov	fp, r3
 8001d8e:	007b      	lsls	r3, r7, #1
 8001d90:	0030      	movs	r0, r6
 8001d92:	0d5b      	lsrs	r3, r3, #21
 8001d94:	0ffd      	lsrs	r5, r7, #31
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d100      	bne.n	8001d9c <__aeabi_ddiv+0x68>
 8001d9a:	e128      	b.n	8001fee <__aeabi_ddiv+0x2ba>
 8001d9c:	4ac4      	ldr	r2, [pc, #784]	@ (80020b0 <__aeabi_ddiv+0x37c>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d100      	bne.n	8001da4 <__aeabi_ddiv+0x70>
 8001da2:	e177      	b.n	8002094 <__aeabi_ddiv+0x360>
 8001da4:	4659      	mov	r1, fp
 8001da6:	0f72      	lsrs	r2, r6, #29
 8001da8:	00c9      	lsls	r1, r1, #3
 8001daa:	430a      	orrs	r2, r1
 8001dac:	2180      	movs	r1, #128	@ 0x80
 8001dae:	0409      	lsls	r1, r1, #16
 8001db0:	4311      	orrs	r1, r2
 8001db2:	468b      	mov	fp, r1
 8001db4:	49bf      	ldr	r1, [pc, #764]	@ (80020b4 <__aeabi_ddiv+0x380>)
 8001db6:	00f2      	lsls	r2, r6, #3
 8001db8:	468c      	mov	ip, r1
 8001dba:	4651      	mov	r1, sl
 8001dbc:	4463      	add	r3, ip
 8001dbe:	1acb      	subs	r3, r1, r3
 8001dc0:	469a      	mov	sl, r3
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	9e02      	ldr	r6, [sp, #8]
 8001dc6:	406e      	eors	r6, r5
 8001dc8:	2c0f      	cmp	r4, #15
 8001dca:	d827      	bhi.n	8001e1c <__aeabi_ddiv+0xe8>
 8001dcc:	49ba      	ldr	r1, [pc, #744]	@ (80020b8 <__aeabi_ddiv+0x384>)
 8001dce:	00a4      	lsls	r4, r4, #2
 8001dd0:	5909      	ldr	r1, [r1, r4]
 8001dd2:	468f      	mov	pc, r1
 8001dd4:	46cb      	mov	fp, r9
 8001dd6:	4642      	mov	r2, r8
 8001dd8:	9e02      	ldr	r6, [sp, #8]
 8001dda:	9b03      	ldr	r3, [sp, #12]
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d016      	beq.n	8001e0e <__aeabi_ddiv+0xda>
 8001de0:	2b03      	cmp	r3, #3
 8001de2:	d100      	bne.n	8001de6 <__aeabi_ddiv+0xb2>
 8001de4:	e2a6      	b.n	8002334 <__aeabi_ddiv+0x600>
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d000      	beq.n	8001dec <__aeabi_ddiv+0xb8>
 8001dea:	e0df      	b.n	8001fac <__aeabi_ddiv+0x278>
 8001dec:	2200      	movs	r2, #0
 8001dee:	2300      	movs	r3, #0
 8001df0:	2400      	movs	r4, #0
 8001df2:	4690      	mov	r8, r2
 8001df4:	051b      	lsls	r3, r3, #20
 8001df6:	4323      	orrs	r3, r4
 8001df8:	07f6      	lsls	r6, r6, #31
 8001dfa:	4333      	orrs	r3, r6
 8001dfc:	4640      	mov	r0, r8
 8001dfe:	0019      	movs	r1, r3
 8001e00:	b007      	add	sp, #28
 8001e02:	bcf0      	pop	{r4, r5, r6, r7}
 8001e04:	46bb      	mov	fp, r7
 8001e06:	46b2      	mov	sl, r6
 8001e08:	46a9      	mov	r9, r5
 8001e0a:	46a0      	mov	r8, r4
 8001e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e0e:	2200      	movs	r2, #0
 8001e10:	2400      	movs	r4, #0
 8001e12:	4690      	mov	r8, r2
 8001e14:	4ba6      	ldr	r3, [pc, #664]	@ (80020b0 <__aeabi_ddiv+0x37c>)
 8001e16:	e7ed      	b.n	8001df4 <__aeabi_ddiv+0xc0>
 8001e18:	002e      	movs	r6, r5
 8001e1a:	e7df      	b.n	8001ddc <__aeabi_ddiv+0xa8>
 8001e1c:	45cb      	cmp	fp, r9
 8001e1e:	d200      	bcs.n	8001e22 <__aeabi_ddiv+0xee>
 8001e20:	e1d4      	b.n	80021cc <__aeabi_ddiv+0x498>
 8001e22:	d100      	bne.n	8001e26 <__aeabi_ddiv+0xf2>
 8001e24:	e1cf      	b.n	80021c6 <__aeabi_ddiv+0x492>
 8001e26:	2301      	movs	r3, #1
 8001e28:	425b      	negs	r3, r3
 8001e2a:	469c      	mov	ip, r3
 8001e2c:	4644      	mov	r4, r8
 8001e2e:	4648      	mov	r0, r9
 8001e30:	2700      	movs	r7, #0
 8001e32:	44e2      	add	sl, ip
 8001e34:	465b      	mov	r3, fp
 8001e36:	0e15      	lsrs	r5, r2, #24
 8001e38:	021b      	lsls	r3, r3, #8
 8001e3a:	431d      	orrs	r5, r3
 8001e3c:	0c19      	lsrs	r1, r3, #16
 8001e3e:	042b      	lsls	r3, r5, #16
 8001e40:	0212      	lsls	r2, r2, #8
 8001e42:	9500      	str	r5, [sp, #0]
 8001e44:	0c1d      	lsrs	r5, r3, #16
 8001e46:	4691      	mov	r9, r2
 8001e48:	9102      	str	r1, [sp, #8]
 8001e4a:	9503      	str	r5, [sp, #12]
 8001e4c:	f7fe fa06 	bl	800025c <__aeabi_uidivmod>
 8001e50:	0002      	movs	r2, r0
 8001e52:	436a      	muls	r2, r5
 8001e54:	040b      	lsls	r3, r1, #16
 8001e56:	0c21      	lsrs	r1, r4, #16
 8001e58:	4680      	mov	r8, r0
 8001e5a:	4319      	orrs	r1, r3
 8001e5c:	428a      	cmp	r2, r1
 8001e5e:	d909      	bls.n	8001e74 <__aeabi_ddiv+0x140>
 8001e60:	9d00      	ldr	r5, [sp, #0]
 8001e62:	2301      	movs	r3, #1
 8001e64:	46ac      	mov	ip, r5
 8001e66:	425b      	negs	r3, r3
 8001e68:	4461      	add	r1, ip
 8001e6a:	469c      	mov	ip, r3
 8001e6c:	44e0      	add	r8, ip
 8001e6e:	428d      	cmp	r5, r1
 8001e70:	d800      	bhi.n	8001e74 <__aeabi_ddiv+0x140>
 8001e72:	e1fb      	b.n	800226c <__aeabi_ddiv+0x538>
 8001e74:	1a88      	subs	r0, r1, r2
 8001e76:	9902      	ldr	r1, [sp, #8]
 8001e78:	f7fe f9f0 	bl	800025c <__aeabi_uidivmod>
 8001e7c:	9a03      	ldr	r2, [sp, #12]
 8001e7e:	0424      	lsls	r4, r4, #16
 8001e80:	4342      	muls	r2, r0
 8001e82:	0409      	lsls	r1, r1, #16
 8001e84:	0c24      	lsrs	r4, r4, #16
 8001e86:	0003      	movs	r3, r0
 8001e88:	430c      	orrs	r4, r1
 8001e8a:	42a2      	cmp	r2, r4
 8001e8c:	d906      	bls.n	8001e9c <__aeabi_ddiv+0x168>
 8001e8e:	9900      	ldr	r1, [sp, #0]
 8001e90:	3b01      	subs	r3, #1
 8001e92:	468c      	mov	ip, r1
 8001e94:	4464      	add	r4, ip
 8001e96:	42a1      	cmp	r1, r4
 8001e98:	d800      	bhi.n	8001e9c <__aeabi_ddiv+0x168>
 8001e9a:	e1e1      	b.n	8002260 <__aeabi_ddiv+0x52c>
 8001e9c:	1aa0      	subs	r0, r4, r2
 8001e9e:	4642      	mov	r2, r8
 8001ea0:	0412      	lsls	r2, r2, #16
 8001ea2:	431a      	orrs	r2, r3
 8001ea4:	4693      	mov	fp, r2
 8001ea6:	464b      	mov	r3, r9
 8001ea8:	4659      	mov	r1, fp
 8001eaa:	0c1b      	lsrs	r3, r3, #16
 8001eac:	001d      	movs	r5, r3
 8001eae:	9304      	str	r3, [sp, #16]
 8001eb0:	040b      	lsls	r3, r1, #16
 8001eb2:	4649      	mov	r1, r9
 8001eb4:	0409      	lsls	r1, r1, #16
 8001eb6:	0c09      	lsrs	r1, r1, #16
 8001eb8:	000c      	movs	r4, r1
 8001eba:	0c1b      	lsrs	r3, r3, #16
 8001ebc:	435c      	muls	r4, r3
 8001ebe:	0c12      	lsrs	r2, r2, #16
 8001ec0:	436b      	muls	r3, r5
 8001ec2:	4688      	mov	r8, r1
 8001ec4:	4351      	muls	r1, r2
 8001ec6:	436a      	muls	r2, r5
 8001ec8:	0c25      	lsrs	r5, r4, #16
 8001eca:	46ac      	mov	ip, r5
 8001ecc:	185b      	adds	r3, r3, r1
 8001ece:	4463      	add	r3, ip
 8001ed0:	4299      	cmp	r1, r3
 8001ed2:	d903      	bls.n	8001edc <__aeabi_ddiv+0x1a8>
 8001ed4:	2180      	movs	r1, #128	@ 0x80
 8001ed6:	0249      	lsls	r1, r1, #9
 8001ed8:	468c      	mov	ip, r1
 8001eda:	4462      	add	r2, ip
 8001edc:	0c19      	lsrs	r1, r3, #16
 8001ede:	0424      	lsls	r4, r4, #16
 8001ee0:	041b      	lsls	r3, r3, #16
 8001ee2:	0c24      	lsrs	r4, r4, #16
 8001ee4:	188a      	adds	r2, r1, r2
 8001ee6:	191c      	adds	r4, r3, r4
 8001ee8:	4290      	cmp	r0, r2
 8001eea:	d302      	bcc.n	8001ef2 <__aeabi_ddiv+0x1be>
 8001eec:	d116      	bne.n	8001f1c <__aeabi_ddiv+0x1e8>
 8001eee:	42a7      	cmp	r7, r4
 8001ef0:	d214      	bcs.n	8001f1c <__aeabi_ddiv+0x1e8>
 8001ef2:	465b      	mov	r3, fp
 8001ef4:	9d00      	ldr	r5, [sp, #0]
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	444f      	add	r7, r9
 8001efa:	9305      	str	r3, [sp, #20]
 8001efc:	454f      	cmp	r7, r9
 8001efe:	419b      	sbcs	r3, r3
 8001f00:	46ac      	mov	ip, r5
 8001f02:	425b      	negs	r3, r3
 8001f04:	4463      	add	r3, ip
 8001f06:	18c0      	adds	r0, r0, r3
 8001f08:	4285      	cmp	r5, r0
 8001f0a:	d300      	bcc.n	8001f0e <__aeabi_ddiv+0x1da>
 8001f0c:	e1a1      	b.n	8002252 <__aeabi_ddiv+0x51e>
 8001f0e:	4282      	cmp	r2, r0
 8001f10:	d900      	bls.n	8001f14 <__aeabi_ddiv+0x1e0>
 8001f12:	e1f6      	b.n	8002302 <__aeabi_ddiv+0x5ce>
 8001f14:	d100      	bne.n	8001f18 <__aeabi_ddiv+0x1e4>
 8001f16:	e1f1      	b.n	80022fc <__aeabi_ddiv+0x5c8>
 8001f18:	9b05      	ldr	r3, [sp, #20]
 8001f1a:	469b      	mov	fp, r3
 8001f1c:	1b3c      	subs	r4, r7, r4
 8001f1e:	42a7      	cmp	r7, r4
 8001f20:	41bf      	sbcs	r7, r7
 8001f22:	9d00      	ldr	r5, [sp, #0]
 8001f24:	1a80      	subs	r0, r0, r2
 8001f26:	427f      	negs	r7, r7
 8001f28:	1bc0      	subs	r0, r0, r7
 8001f2a:	4285      	cmp	r5, r0
 8001f2c:	d100      	bne.n	8001f30 <__aeabi_ddiv+0x1fc>
 8001f2e:	e1d0      	b.n	80022d2 <__aeabi_ddiv+0x59e>
 8001f30:	9902      	ldr	r1, [sp, #8]
 8001f32:	f7fe f993 	bl	800025c <__aeabi_uidivmod>
 8001f36:	9a03      	ldr	r2, [sp, #12]
 8001f38:	040b      	lsls	r3, r1, #16
 8001f3a:	4342      	muls	r2, r0
 8001f3c:	0c21      	lsrs	r1, r4, #16
 8001f3e:	0007      	movs	r7, r0
 8001f40:	4319      	orrs	r1, r3
 8001f42:	428a      	cmp	r2, r1
 8001f44:	d900      	bls.n	8001f48 <__aeabi_ddiv+0x214>
 8001f46:	e178      	b.n	800223a <__aeabi_ddiv+0x506>
 8001f48:	1a88      	subs	r0, r1, r2
 8001f4a:	9902      	ldr	r1, [sp, #8]
 8001f4c:	f7fe f986 	bl	800025c <__aeabi_uidivmod>
 8001f50:	9a03      	ldr	r2, [sp, #12]
 8001f52:	0424      	lsls	r4, r4, #16
 8001f54:	4342      	muls	r2, r0
 8001f56:	0409      	lsls	r1, r1, #16
 8001f58:	0c24      	lsrs	r4, r4, #16
 8001f5a:	0003      	movs	r3, r0
 8001f5c:	430c      	orrs	r4, r1
 8001f5e:	42a2      	cmp	r2, r4
 8001f60:	d900      	bls.n	8001f64 <__aeabi_ddiv+0x230>
 8001f62:	e15d      	b.n	8002220 <__aeabi_ddiv+0x4ec>
 8001f64:	4641      	mov	r1, r8
 8001f66:	1aa4      	subs	r4, r4, r2
 8001f68:	043a      	lsls	r2, r7, #16
 8001f6a:	431a      	orrs	r2, r3
 8001f6c:	9d04      	ldr	r5, [sp, #16]
 8001f6e:	0413      	lsls	r3, r2, #16
 8001f70:	0c1b      	lsrs	r3, r3, #16
 8001f72:	4359      	muls	r1, r3
 8001f74:	4647      	mov	r7, r8
 8001f76:	436b      	muls	r3, r5
 8001f78:	469c      	mov	ip, r3
 8001f7a:	0c10      	lsrs	r0, r2, #16
 8001f7c:	4347      	muls	r7, r0
 8001f7e:	0c0b      	lsrs	r3, r1, #16
 8001f80:	44bc      	add	ip, r7
 8001f82:	4463      	add	r3, ip
 8001f84:	4368      	muls	r0, r5
 8001f86:	429f      	cmp	r7, r3
 8001f88:	d903      	bls.n	8001f92 <__aeabi_ddiv+0x25e>
 8001f8a:	2580      	movs	r5, #128	@ 0x80
 8001f8c:	026d      	lsls	r5, r5, #9
 8001f8e:	46ac      	mov	ip, r5
 8001f90:	4460      	add	r0, ip
 8001f92:	0c1f      	lsrs	r7, r3, #16
 8001f94:	0409      	lsls	r1, r1, #16
 8001f96:	041b      	lsls	r3, r3, #16
 8001f98:	0c09      	lsrs	r1, r1, #16
 8001f9a:	183f      	adds	r7, r7, r0
 8001f9c:	185b      	adds	r3, r3, r1
 8001f9e:	42bc      	cmp	r4, r7
 8001fa0:	d200      	bcs.n	8001fa4 <__aeabi_ddiv+0x270>
 8001fa2:	e102      	b.n	80021aa <__aeabi_ddiv+0x476>
 8001fa4:	d100      	bne.n	8001fa8 <__aeabi_ddiv+0x274>
 8001fa6:	e0fd      	b.n	80021a4 <__aeabi_ddiv+0x470>
 8001fa8:	2301      	movs	r3, #1
 8001faa:	431a      	orrs	r2, r3
 8001fac:	4b43      	ldr	r3, [pc, #268]	@ (80020bc <__aeabi_ddiv+0x388>)
 8001fae:	4453      	add	r3, sl
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	dc00      	bgt.n	8001fb6 <__aeabi_ddiv+0x282>
 8001fb4:	e0ae      	b.n	8002114 <__aeabi_ddiv+0x3e0>
 8001fb6:	0751      	lsls	r1, r2, #29
 8001fb8:	d000      	beq.n	8001fbc <__aeabi_ddiv+0x288>
 8001fba:	e198      	b.n	80022ee <__aeabi_ddiv+0x5ba>
 8001fbc:	4659      	mov	r1, fp
 8001fbe:	01c9      	lsls	r1, r1, #7
 8001fc0:	d506      	bpl.n	8001fd0 <__aeabi_ddiv+0x29c>
 8001fc2:	4659      	mov	r1, fp
 8001fc4:	4b3e      	ldr	r3, [pc, #248]	@ (80020c0 <__aeabi_ddiv+0x38c>)
 8001fc6:	4019      	ands	r1, r3
 8001fc8:	2380      	movs	r3, #128	@ 0x80
 8001fca:	468b      	mov	fp, r1
 8001fcc:	00db      	lsls	r3, r3, #3
 8001fce:	4453      	add	r3, sl
 8001fd0:	493c      	ldr	r1, [pc, #240]	@ (80020c4 <__aeabi_ddiv+0x390>)
 8001fd2:	428b      	cmp	r3, r1
 8001fd4:	dd00      	ble.n	8001fd8 <__aeabi_ddiv+0x2a4>
 8001fd6:	e71a      	b.n	8001e0e <__aeabi_ddiv+0xda>
 8001fd8:	4659      	mov	r1, fp
 8001fda:	08d2      	lsrs	r2, r2, #3
 8001fdc:	0749      	lsls	r1, r1, #29
 8001fde:	4311      	orrs	r1, r2
 8001fe0:	465a      	mov	r2, fp
 8001fe2:	055b      	lsls	r3, r3, #21
 8001fe4:	0254      	lsls	r4, r2, #9
 8001fe6:	4688      	mov	r8, r1
 8001fe8:	0b24      	lsrs	r4, r4, #12
 8001fea:	0d5b      	lsrs	r3, r3, #21
 8001fec:	e702      	b.n	8001df4 <__aeabi_ddiv+0xc0>
 8001fee:	465a      	mov	r2, fp
 8001ff0:	9b00      	ldr	r3, [sp, #0]
 8001ff2:	431a      	orrs	r2, r3
 8001ff4:	d100      	bne.n	8001ff8 <__aeabi_ddiv+0x2c4>
 8001ff6:	e07e      	b.n	80020f6 <__aeabi_ddiv+0x3c2>
 8001ff8:	465b      	mov	r3, fp
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d100      	bne.n	8002000 <__aeabi_ddiv+0x2cc>
 8001ffe:	e100      	b.n	8002202 <__aeabi_ddiv+0x4ce>
 8002000:	4658      	mov	r0, fp
 8002002:	f001 fabb 	bl	800357c <__clzsi2>
 8002006:	0002      	movs	r2, r0
 8002008:	0003      	movs	r3, r0
 800200a:	3a0b      	subs	r2, #11
 800200c:	271d      	movs	r7, #29
 800200e:	9e00      	ldr	r6, [sp, #0]
 8002010:	1aba      	subs	r2, r7, r2
 8002012:	0019      	movs	r1, r3
 8002014:	4658      	mov	r0, fp
 8002016:	40d6      	lsrs	r6, r2
 8002018:	3908      	subs	r1, #8
 800201a:	4088      	lsls	r0, r1
 800201c:	0032      	movs	r2, r6
 800201e:	4302      	orrs	r2, r0
 8002020:	4693      	mov	fp, r2
 8002022:	9a00      	ldr	r2, [sp, #0]
 8002024:	408a      	lsls	r2, r1
 8002026:	4928      	ldr	r1, [pc, #160]	@ (80020c8 <__aeabi_ddiv+0x394>)
 8002028:	4453      	add	r3, sl
 800202a:	468a      	mov	sl, r1
 800202c:	449a      	add	sl, r3
 800202e:	2300      	movs	r3, #0
 8002030:	e6c8      	b.n	8001dc4 <__aeabi_ddiv+0x90>
 8002032:	465b      	mov	r3, fp
 8002034:	4303      	orrs	r3, r0
 8002036:	4699      	mov	r9, r3
 8002038:	d056      	beq.n	80020e8 <__aeabi_ddiv+0x3b4>
 800203a:	465b      	mov	r3, fp
 800203c:	2b00      	cmp	r3, #0
 800203e:	d100      	bne.n	8002042 <__aeabi_ddiv+0x30e>
 8002040:	e0cd      	b.n	80021de <__aeabi_ddiv+0x4aa>
 8002042:	4658      	mov	r0, fp
 8002044:	f001 fa9a 	bl	800357c <__clzsi2>
 8002048:	230b      	movs	r3, #11
 800204a:	425b      	negs	r3, r3
 800204c:	469c      	mov	ip, r3
 800204e:	0002      	movs	r2, r0
 8002050:	4484      	add	ip, r0
 8002052:	4666      	mov	r6, ip
 8002054:	231d      	movs	r3, #29
 8002056:	1b9b      	subs	r3, r3, r6
 8002058:	0026      	movs	r6, r4
 800205a:	0011      	movs	r1, r2
 800205c:	4658      	mov	r0, fp
 800205e:	40de      	lsrs	r6, r3
 8002060:	3908      	subs	r1, #8
 8002062:	4088      	lsls	r0, r1
 8002064:	0033      	movs	r3, r6
 8002066:	4303      	orrs	r3, r0
 8002068:	4699      	mov	r9, r3
 800206a:	0023      	movs	r3, r4
 800206c:	408b      	lsls	r3, r1
 800206e:	4698      	mov	r8, r3
 8002070:	4b16      	ldr	r3, [pc, #88]	@ (80020cc <__aeabi_ddiv+0x398>)
 8002072:	2400      	movs	r4, #0
 8002074:	1a9b      	subs	r3, r3, r2
 8002076:	469a      	mov	sl, r3
 8002078:	2300      	movs	r3, #0
 800207a:	9303      	str	r3, [sp, #12]
 800207c:	e682      	b.n	8001d84 <__aeabi_ddiv+0x50>
 800207e:	465a      	mov	r2, fp
 8002080:	4302      	orrs	r2, r0
 8002082:	4691      	mov	r9, r2
 8002084:	d12a      	bne.n	80020dc <__aeabi_ddiv+0x3a8>
 8002086:	2200      	movs	r2, #0
 8002088:	469a      	mov	sl, r3
 800208a:	2302      	movs	r3, #2
 800208c:	4690      	mov	r8, r2
 800208e:	2408      	movs	r4, #8
 8002090:	9303      	str	r3, [sp, #12]
 8002092:	e677      	b.n	8001d84 <__aeabi_ddiv+0x50>
 8002094:	465a      	mov	r2, fp
 8002096:	9b00      	ldr	r3, [sp, #0]
 8002098:	431a      	orrs	r2, r3
 800209a:	4b0d      	ldr	r3, [pc, #52]	@ (80020d0 <__aeabi_ddiv+0x39c>)
 800209c:	469c      	mov	ip, r3
 800209e:	44e2      	add	sl, ip
 80020a0:	2a00      	cmp	r2, #0
 80020a2:	d117      	bne.n	80020d4 <__aeabi_ddiv+0x3a0>
 80020a4:	2302      	movs	r3, #2
 80020a6:	431c      	orrs	r4, r3
 80020a8:	2300      	movs	r3, #0
 80020aa:	469b      	mov	fp, r3
 80020ac:	3302      	adds	r3, #2
 80020ae:	e689      	b.n	8001dc4 <__aeabi_ddiv+0x90>
 80020b0:	000007ff 	.word	0x000007ff
 80020b4:	fffffc01 	.word	0xfffffc01
 80020b8:	08010f44 	.word	0x08010f44
 80020bc:	000003ff 	.word	0x000003ff
 80020c0:	feffffff 	.word	0xfeffffff
 80020c4:	000007fe 	.word	0x000007fe
 80020c8:	000003f3 	.word	0x000003f3
 80020cc:	fffffc0d 	.word	0xfffffc0d
 80020d0:	fffff801 	.word	0xfffff801
 80020d4:	2303      	movs	r3, #3
 80020d6:	0032      	movs	r2, r6
 80020d8:	431c      	orrs	r4, r3
 80020da:	e673      	b.n	8001dc4 <__aeabi_ddiv+0x90>
 80020dc:	469a      	mov	sl, r3
 80020de:	2303      	movs	r3, #3
 80020e0:	46d9      	mov	r9, fp
 80020e2:	240c      	movs	r4, #12
 80020e4:	9303      	str	r3, [sp, #12]
 80020e6:	e64d      	b.n	8001d84 <__aeabi_ddiv+0x50>
 80020e8:	2300      	movs	r3, #0
 80020ea:	4698      	mov	r8, r3
 80020ec:	469a      	mov	sl, r3
 80020ee:	3301      	adds	r3, #1
 80020f0:	2404      	movs	r4, #4
 80020f2:	9303      	str	r3, [sp, #12]
 80020f4:	e646      	b.n	8001d84 <__aeabi_ddiv+0x50>
 80020f6:	2301      	movs	r3, #1
 80020f8:	431c      	orrs	r4, r3
 80020fa:	2300      	movs	r3, #0
 80020fc:	469b      	mov	fp, r3
 80020fe:	3301      	adds	r3, #1
 8002100:	e660      	b.n	8001dc4 <__aeabi_ddiv+0x90>
 8002102:	2300      	movs	r3, #0
 8002104:	2480      	movs	r4, #128	@ 0x80
 8002106:	4698      	mov	r8, r3
 8002108:	2600      	movs	r6, #0
 800210a:	4b92      	ldr	r3, [pc, #584]	@ (8002354 <__aeabi_ddiv+0x620>)
 800210c:	0324      	lsls	r4, r4, #12
 800210e:	e671      	b.n	8001df4 <__aeabi_ddiv+0xc0>
 8002110:	2201      	movs	r2, #1
 8002112:	4252      	negs	r2, r2
 8002114:	2101      	movs	r1, #1
 8002116:	1ac9      	subs	r1, r1, r3
 8002118:	2938      	cmp	r1, #56	@ 0x38
 800211a:	dd00      	ble.n	800211e <__aeabi_ddiv+0x3ea>
 800211c:	e666      	b.n	8001dec <__aeabi_ddiv+0xb8>
 800211e:	291f      	cmp	r1, #31
 8002120:	dc00      	bgt.n	8002124 <__aeabi_ddiv+0x3f0>
 8002122:	e0ab      	b.n	800227c <__aeabi_ddiv+0x548>
 8002124:	201f      	movs	r0, #31
 8002126:	4240      	negs	r0, r0
 8002128:	1ac3      	subs	r3, r0, r3
 800212a:	4658      	mov	r0, fp
 800212c:	40d8      	lsrs	r0, r3
 800212e:	0003      	movs	r3, r0
 8002130:	2920      	cmp	r1, #32
 8002132:	d004      	beq.n	800213e <__aeabi_ddiv+0x40a>
 8002134:	4658      	mov	r0, fp
 8002136:	4988      	ldr	r1, [pc, #544]	@ (8002358 <__aeabi_ddiv+0x624>)
 8002138:	4451      	add	r1, sl
 800213a:	4088      	lsls	r0, r1
 800213c:	4302      	orrs	r2, r0
 800213e:	1e51      	subs	r1, r2, #1
 8002140:	418a      	sbcs	r2, r1
 8002142:	431a      	orrs	r2, r3
 8002144:	2307      	movs	r3, #7
 8002146:	0019      	movs	r1, r3
 8002148:	2400      	movs	r4, #0
 800214a:	4011      	ands	r1, r2
 800214c:	4213      	tst	r3, r2
 800214e:	d00c      	beq.n	800216a <__aeabi_ddiv+0x436>
 8002150:	230f      	movs	r3, #15
 8002152:	4013      	ands	r3, r2
 8002154:	2b04      	cmp	r3, #4
 8002156:	d100      	bne.n	800215a <__aeabi_ddiv+0x426>
 8002158:	e0f9      	b.n	800234e <__aeabi_ddiv+0x61a>
 800215a:	1d11      	adds	r1, r2, #4
 800215c:	4291      	cmp	r1, r2
 800215e:	419b      	sbcs	r3, r3
 8002160:	000a      	movs	r2, r1
 8002162:	425b      	negs	r3, r3
 8002164:	0759      	lsls	r1, r3, #29
 8002166:	025b      	lsls	r3, r3, #9
 8002168:	0b1c      	lsrs	r4, r3, #12
 800216a:	08d2      	lsrs	r2, r2, #3
 800216c:	430a      	orrs	r2, r1
 800216e:	4690      	mov	r8, r2
 8002170:	2300      	movs	r3, #0
 8002172:	e63f      	b.n	8001df4 <__aeabi_ddiv+0xc0>
 8002174:	2480      	movs	r4, #128	@ 0x80
 8002176:	464b      	mov	r3, r9
 8002178:	0324      	lsls	r4, r4, #12
 800217a:	4223      	tst	r3, r4
 800217c:	d009      	beq.n	8002192 <__aeabi_ddiv+0x45e>
 800217e:	465b      	mov	r3, fp
 8002180:	4223      	tst	r3, r4
 8002182:	d106      	bne.n	8002192 <__aeabi_ddiv+0x45e>
 8002184:	431c      	orrs	r4, r3
 8002186:	0324      	lsls	r4, r4, #12
 8002188:	002e      	movs	r6, r5
 800218a:	4690      	mov	r8, r2
 800218c:	4b71      	ldr	r3, [pc, #452]	@ (8002354 <__aeabi_ddiv+0x620>)
 800218e:	0b24      	lsrs	r4, r4, #12
 8002190:	e630      	b.n	8001df4 <__aeabi_ddiv+0xc0>
 8002192:	2480      	movs	r4, #128	@ 0x80
 8002194:	464b      	mov	r3, r9
 8002196:	0324      	lsls	r4, r4, #12
 8002198:	431c      	orrs	r4, r3
 800219a:	0324      	lsls	r4, r4, #12
 800219c:	9e02      	ldr	r6, [sp, #8]
 800219e:	4b6d      	ldr	r3, [pc, #436]	@ (8002354 <__aeabi_ddiv+0x620>)
 80021a0:	0b24      	lsrs	r4, r4, #12
 80021a2:	e627      	b.n	8001df4 <__aeabi_ddiv+0xc0>
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d100      	bne.n	80021aa <__aeabi_ddiv+0x476>
 80021a8:	e700      	b.n	8001fac <__aeabi_ddiv+0x278>
 80021aa:	9800      	ldr	r0, [sp, #0]
 80021ac:	1e51      	subs	r1, r2, #1
 80021ae:	4684      	mov	ip, r0
 80021b0:	4464      	add	r4, ip
 80021b2:	4284      	cmp	r4, r0
 80021b4:	d200      	bcs.n	80021b8 <__aeabi_ddiv+0x484>
 80021b6:	e084      	b.n	80022c2 <__aeabi_ddiv+0x58e>
 80021b8:	42bc      	cmp	r4, r7
 80021ba:	d200      	bcs.n	80021be <__aeabi_ddiv+0x48a>
 80021bc:	e0ae      	b.n	800231c <__aeabi_ddiv+0x5e8>
 80021be:	d100      	bne.n	80021c2 <__aeabi_ddiv+0x48e>
 80021c0:	e0c1      	b.n	8002346 <__aeabi_ddiv+0x612>
 80021c2:	000a      	movs	r2, r1
 80021c4:	e6f0      	b.n	8001fa8 <__aeabi_ddiv+0x274>
 80021c6:	4542      	cmp	r2, r8
 80021c8:	d900      	bls.n	80021cc <__aeabi_ddiv+0x498>
 80021ca:	e62c      	b.n	8001e26 <__aeabi_ddiv+0xf2>
 80021cc:	464b      	mov	r3, r9
 80021ce:	07dc      	lsls	r4, r3, #31
 80021d0:	0858      	lsrs	r0, r3, #1
 80021d2:	4643      	mov	r3, r8
 80021d4:	085b      	lsrs	r3, r3, #1
 80021d6:	431c      	orrs	r4, r3
 80021d8:	4643      	mov	r3, r8
 80021da:	07df      	lsls	r7, r3, #31
 80021dc:	e62a      	b.n	8001e34 <__aeabi_ddiv+0x100>
 80021de:	f001 f9cd 	bl	800357c <__clzsi2>
 80021e2:	2315      	movs	r3, #21
 80021e4:	469c      	mov	ip, r3
 80021e6:	4484      	add	ip, r0
 80021e8:	0002      	movs	r2, r0
 80021ea:	4663      	mov	r3, ip
 80021ec:	3220      	adds	r2, #32
 80021ee:	2b1c      	cmp	r3, #28
 80021f0:	dc00      	bgt.n	80021f4 <__aeabi_ddiv+0x4c0>
 80021f2:	e72e      	b.n	8002052 <__aeabi_ddiv+0x31e>
 80021f4:	0023      	movs	r3, r4
 80021f6:	3808      	subs	r0, #8
 80021f8:	4083      	lsls	r3, r0
 80021fa:	4699      	mov	r9, r3
 80021fc:	2300      	movs	r3, #0
 80021fe:	4698      	mov	r8, r3
 8002200:	e736      	b.n	8002070 <__aeabi_ddiv+0x33c>
 8002202:	f001 f9bb 	bl	800357c <__clzsi2>
 8002206:	0002      	movs	r2, r0
 8002208:	0003      	movs	r3, r0
 800220a:	3215      	adds	r2, #21
 800220c:	3320      	adds	r3, #32
 800220e:	2a1c      	cmp	r2, #28
 8002210:	dc00      	bgt.n	8002214 <__aeabi_ddiv+0x4e0>
 8002212:	e6fb      	b.n	800200c <__aeabi_ddiv+0x2d8>
 8002214:	9900      	ldr	r1, [sp, #0]
 8002216:	3808      	subs	r0, #8
 8002218:	4081      	lsls	r1, r0
 800221a:	2200      	movs	r2, #0
 800221c:	468b      	mov	fp, r1
 800221e:	e702      	b.n	8002026 <__aeabi_ddiv+0x2f2>
 8002220:	9900      	ldr	r1, [sp, #0]
 8002222:	3b01      	subs	r3, #1
 8002224:	468c      	mov	ip, r1
 8002226:	4464      	add	r4, ip
 8002228:	42a1      	cmp	r1, r4
 800222a:	d900      	bls.n	800222e <__aeabi_ddiv+0x4fa>
 800222c:	e69a      	b.n	8001f64 <__aeabi_ddiv+0x230>
 800222e:	42a2      	cmp	r2, r4
 8002230:	d800      	bhi.n	8002234 <__aeabi_ddiv+0x500>
 8002232:	e697      	b.n	8001f64 <__aeabi_ddiv+0x230>
 8002234:	1e83      	subs	r3, r0, #2
 8002236:	4464      	add	r4, ip
 8002238:	e694      	b.n	8001f64 <__aeabi_ddiv+0x230>
 800223a:	46ac      	mov	ip, r5
 800223c:	4461      	add	r1, ip
 800223e:	3f01      	subs	r7, #1
 8002240:	428d      	cmp	r5, r1
 8002242:	d900      	bls.n	8002246 <__aeabi_ddiv+0x512>
 8002244:	e680      	b.n	8001f48 <__aeabi_ddiv+0x214>
 8002246:	428a      	cmp	r2, r1
 8002248:	d800      	bhi.n	800224c <__aeabi_ddiv+0x518>
 800224a:	e67d      	b.n	8001f48 <__aeabi_ddiv+0x214>
 800224c:	1e87      	subs	r7, r0, #2
 800224e:	4461      	add	r1, ip
 8002250:	e67a      	b.n	8001f48 <__aeabi_ddiv+0x214>
 8002252:	4285      	cmp	r5, r0
 8002254:	d000      	beq.n	8002258 <__aeabi_ddiv+0x524>
 8002256:	e65f      	b.n	8001f18 <__aeabi_ddiv+0x1e4>
 8002258:	45b9      	cmp	r9, r7
 800225a:	d900      	bls.n	800225e <__aeabi_ddiv+0x52a>
 800225c:	e65c      	b.n	8001f18 <__aeabi_ddiv+0x1e4>
 800225e:	e656      	b.n	8001f0e <__aeabi_ddiv+0x1da>
 8002260:	42a2      	cmp	r2, r4
 8002262:	d800      	bhi.n	8002266 <__aeabi_ddiv+0x532>
 8002264:	e61a      	b.n	8001e9c <__aeabi_ddiv+0x168>
 8002266:	1e83      	subs	r3, r0, #2
 8002268:	4464      	add	r4, ip
 800226a:	e617      	b.n	8001e9c <__aeabi_ddiv+0x168>
 800226c:	428a      	cmp	r2, r1
 800226e:	d800      	bhi.n	8002272 <__aeabi_ddiv+0x53e>
 8002270:	e600      	b.n	8001e74 <__aeabi_ddiv+0x140>
 8002272:	46ac      	mov	ip, r5
 8002274:	1e83      	subs	r3, r0, #2
 8002276:	4698      	mov	r8, r3
 8002278:	4461      	add	r1, ip
 800227a:	e5fb      	b.n	8001e74 <__aeabi_ddiv+0x140>
 800227c:	4837      	ldr	r0, [pc, #220]	@ (800235c <__aeabi_ddiv+0x628>)
 800227e:	0014      	movs	r4, r2
 8002280:	4450      	add	r0, sl
 8002282:	4082      	lsls	r2, r0
 8002284:	465b      	mov	r3, fp
 8002286:	0017      	movs	r7, r2
 8002288:	4083      	lsls	r3, r0
 800228a:	40cc      	lsrs	r4, r1
 800228c:	1e7a      	subs	r2, r7, #1
 800228e:	4197      	sbcs	r7, r2
 8002290:	4323      	orrs	r3, r4
 8002292:	433b      	orrs	r3, r7
 8002294:	001a      	movs	r2, r3
 8002296:	465b      	mov	r3, fp
 8002298:	40cb      	lsrs	r3, r1
 800229a:	0751      	lsls	r1, r2, #29
 800229c:	d009      	beq.n	80022b2 <__aeabi_ddiv+0x57e>
 800229e:	210f      	movs	r1, #15
 80022a0:	4011      	ands	r1, r2
 80022a2:	2904      	cmp	r1, #4
 80022a4:	d005      	beq.n	80022b2 <__aeabi_ddiv+0x57e>
 80022a6:	1d11      	adds	r1, r2, #4
 80022a8:	4291      	cmp	r1, r2
 80022aa:	4192      	sbcs	r2, r2
 80022ac:	4252      	negs	r2, r2
 80022ae:	189b      	adds	r3, r3, r2
 80022b0:	000a      	movs	r2, r1
 80022b2:	0219      	lsls	r1, r3, #8
 80022b4:	d400      	bmi.n	80022b8 <__aeabi_ddiv+0x584>
 80022b6:	e755      	b.n	8002164 <__aeabi_ddiv+0x430>
 80022b8:	2200      	movs	r2, #0
 80022ba:	2301      	movs	r3, #1
 80022bc:	2400      	movs	r4, #0
 80022be:	4690      	mov	r8, r2
 80022c0:	e598      	b.n	8001df4 <__aeabi_ddiv+0xc0>
 80022c2:	000a      	movs	r2, r1
 80022c4:	42bc      	cmp	r4, r7
 80022c6:	d000      	beq.n	80022ca <__aeabi_ddiv+0x596>
 80022c8:	e66e      	b.n	8001fa8 <__aeabi_ddiv+0x274>
 80022ca:	454b      	cmp	r3, r9
 80022cc:	d000      	beq.n	80022d0 <__aeabi_ddiv+0x59c>
 80022ce:	e66b      	b.n	8001fa8 <__aeabi_ddiv+0x274>
 80022d0:	e66c      	b.n	8001fac <__aeabi_ddiv+0x278>
 80022d2:	4b23      	ldr	r3, [pc, #140]	@ (8002360 <__aeabi_ddiv+0x62c>)
 80022d4:	4a23      	ldr	r2, [pc, #140]	@ (8002364 <__aeabi_ddiv+0x630>)
 80022d6:	4453      	add	r3, sl
 80022d8:	4592      	cmp	sl, r2
 80022da:	da00      	bge.n	80022de <__aeabi_ddiv+0x5aa>
 80022dc:	e718      	b.n	8002110 <__aeabi_ddiv+0x3dc>
 80022de:	2101      	movs	r1, #1
 80022e0:	4249      	negs	r1, r1
 80022e2:	1d0a      	adds	r2, r1, #4
 80022e4:	428a      	cmp	r2, r1
 80022e6:	4189      	sbcs	r1, r1
 80022e8:	4249      	negs	r1, r1
 80022ea:	448b      	add	fp, r1
 80022ec:	e666      	b.n	8001fbc <__aeabi_ddiv+0x288>
 80022ee:	210f      	movs	r1, #15
 80022f0:	4011      	ands	r1, r2
 80022f2:	2904      	cmp	r1, #4
 80022f4:	d100      	bne.n	80022f8 <__aeabi_ddiv+0x5c4>
 80022f6:	e661      	b.n	8001fbc <__aeabi_ddiv+0x288>
 80022f8:	0011      	movs	r1, r2
 80022fa:	e7f2      	b.n	80022e2 <__aeabi_ddiv+0x5ae>
 80022fc:	42bc      	cmp	r4, r7
 80022fe:	d800      	bhi.n	8002302 <__aeabi_ddiv+0x5ce>
 8002300:	e60a      	b.n	8001f18 <__aeabi_ddiv+0x1e4>
 8002302:	2302      	movs	r3, #2
 8002304:	425b      	negs	r3, r3
 8002306:	469c      	mov	ip, r3
 8002308:	9900      	ldr	r1, [sp, #0]
 800230a:	444f      	add	r7, r9
 800230c:	454f      	cmp	r7, r9
 800230e:	419b      	sbcs	r3, r3
 8002310:	44e3      	add	fp, ip
 8002312:	468c      	mov	ip, r1
 8002314:	425b      	negs	r3, r3
 8002316:	4463      	add	r3, ip
 8002318:	18c0      	adds	r0, r0, r3
 800231a:	e5ff      	b.n	8001f1c <__aeabi_ddiv+0x1e8>
 800231c:	4649      	mov	r1, r9
 800231e:	9d00      	ldr	r5, [sp, #0]
 8002320:	0048      	lsls	r0, r1, #1
 8002322:	4548      	cmp	r0, r9
 8002324:	4189      	sbcs	r1, r1
 8002326:	46ac      	mov	ip, r5
 8002328:	4249      	negs	r1, r1
 800232a:	4461      	add	r1, ip
 800232c:	4681      	mov	r9, r0
 800232e:	3a02      	subs	r2, #2
 8002330:	1864      	adds	r4, r4, r1
 8002332:	e7c7      	b.n	80022c4 <__aeabi_ddiv+0x590>
 8002334:	2480      	movs	r4, #128	@ 0x80
 8002336:	465b      	mov	r3, fp
 8002338:	0324      	lsls	r4, r4, #12
 800233a:	431c      	orrs	r4, r3
 800233c:	0324      	lsls	r4, r4, #12
 800233e:	4690      	mov	r8, r2
 8002340:	4b04      	ldr	r3, [pc, #16]	@ (8002354 <__aeabi_ddiv+0x620>)
 8002342:	0b24      	lsrs	r4, r4, #12
 8002344:	e556      	b.n	8001df4 <__aeabi_ddiv+0xc0>
 8002346:	4599      	cmp	r9, r3
 8002348:	d3e8      	bcc.n	800231c <__aeabi_ddiv+0x5e8>
 800234a:	000a      	movs	r2, r1
 800234c:	e7bd      	b.n	80022ca <__aeabi_ddiv+0x596>
 800234e:	2300      	movs	r3, #0
 8002350:	e708      	b.n	8002164 <__aeabi_ddiv+0x430>
 8002352:	46c0      	nop			@ (mov r8, r8)
 8002354:	000007ff 	.word	0x000007ff
 8002358:	0000043e 	.word	0x0000043e
 800235c:	0000041e 	.word	0x0000041e
 8002360:	000003ff 	.word	0x000003ff
 8002364:	fffffc02 	.word	0xfffffc02

08002368 <__eqdf2>:
 8002368:	b5f0      	push	{r4, r5, r6, r7, lr}
 800236a:	4657      	mov	r7, sl
 800236c:	46de      	mov	lr, fp
 800236e:	464e      	mov	r6, r9
 8002370:	4645      	mov	r5, r8
 8002372:	b5e0      	push	{r5, r6, r7, lr}
 8002374:	000d      	movs	r5, r1
 8002376:	0004      	movs	r4, r0
 8002378:	0fe8      	lsrs	r0, r5, #31
 800237a:	4683      	mov	fp, r0
 800237c:	0309      	lsls	r1, r1, #12
 800237e:	0fd8      	lsrs	r0, r3, #31
 8002380:	0b09      	lsrs	r1, r1, #12
 8002382:	4682      	mov	sl, r0
 8002384:	4819      	ldr	r0, [pc, #100]	@ (80023ec <__eqdf2+0x84>)
 8002386:	468c      	mov	ip, r1
 8002388:	031f      	lsls	r7, r3, #12
 800238a:	0069      	lsls	r1, r5, #1
 800238c:	005e      	lsls	r6, r3, #1
 800238e:	0d49      	lsrs	r1, r1, #21
 8002390:	0b3f      	lsrs	r7, r7, #12
 8002392:	0d76      	lsrs	r6, r6, #21
 8002394:	4281      	cmp	r1, r0
 8002396:	d018      	beq.n	80023ca <__eqdf2+0x62>
 8002398:	4286      	cmp	r6, r0
 800239a:	d00f      	beq.n	80023bc <__eqdf2+0x54>
 800239c:	2001      	movs	r0, #1
 800239e:	42b1      	cmp	r1, r6
 80023a0:	d10d      	bne.n	80023be <__eqdf2+0x56>
 80023a2:	45bc      	cmp	ip, r7
 80023a4:	d10b      	bne.n	80023be <__eqdf2+0x56>
 80023a6:	4294      	cmp	r4, r2
 80023a8:	d109      	bne.n	80023be <__eqdf2+0x56>
 80023aa:	45d3      	cmp	fp, sl
 80023ac:	d01c      	beq.n	80023e8 <__eqdf2+0x80>
 80023ae:	2900      	cmp	r1, #0
 80023b0:	d105      	bne.n	80023be <__eqdf2+0x56>
 80023b2:	4660      	mov	r0, ip
 80023b4:	4320      	orrs	r0, r4
 80023b6:	1e43      	subs	r3, r0, #1
 80023b8:	4198      	sbcs	r0, r3
 80023ba:	e000      	b.n	80023be <__eqdf2+0x56>
 80023bc:	2001      	movs	r0, #1
 80023be:	bcf0      	pop	{r4, r5, r6, r7}
 80023c0:	46bb      	mov	fp, r7
 80023c2:	46b2      	mov	sl, r6
 80023c4:	46a9      	mov	r9, r5
 80023c6:	46a0      	mov	r8, r4
 80023c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023ca:	2001      	movs	r0, #1
 80023cc:	428e      	cmp	r6, r1
 80023ce:	d1f6      	bne.n	80023be <__eqdf2+0x56>
 80023d0:	4661      	mov	r1, ip
 80023d2:	4339      	orrs	r1, r7
 80023d4:	000f      	movs	r7, r1
 80023d6:	4317      	orrs	r7, r2
 80023d8:	4327      	orrs	r7, r4
 80023da:	d1f0      	bne.n	80023be <__eqdf2+0x56>
 80023dc:	465b      	mov	r3, fp
 80023de:	4652      	mov	r2, sl
 80023e0:	1a98      	subs	r0, r3, r2
 80023e2:	1e43      	subs	r3, r0, #1
 80023e4:	4198      	sbcs	r0, r3
 80023e6:	e7ea      	b.n	80023be <__eqdf2+0x56>
 80023e8:	2000      	movs	r0, #0
 80023ea:	e7e8      	b.n	80023be <__eqdf2+0x56>
 80023ec:	000007ff 	.word	0x000007ff

080023f0 <__gedf2>:
 80023f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023f2:	4657      	mov	r7, sl
 80023f4:	464e      	mov	r6, r9
 80023f6:	4645      	mov	r5, r8
 80023f8:	46de      	mov	lr, fp
 80023fa:	b5e0      	push	{r5, r6, r7, lr}
 80023fc:	000d      	movs	r5, r1
 80023fe:	030f      	lsls	r7, r1, #12
 8002400:	0b39      	lsrs	r1, r7, #12
 8002402:	b083      	sub	sp, #12
 8002404:	0004      	movs	r4, r0
 8002406:	4680      	mov	r8, r0
 8002408:	9101      	str	r1, [sp, #4]
 800240a:	0058      	lsls	r0, r3, #1
 800240c:	0fe9      	lsrs	r1, r5, #31
 800240e:	4f31      	ldr	r7, [pc, #196]	@ (80024d4 <__gedf2+0xe4>)
 8002410:	0d40      	lsrs	r0, r0, #21
 8002412:	468c      	mov	ip, r1
 8002414:	006e      	lsls	r6, r5, #1
 8002416:	0319      	lsls	r1, r3, #12
 8002418:	4682      	mov	sl, r0
 800241a:	4691      	mov	r9, r2
 800241c:	0d76      	lsrs	r6, r6, #21
 800241e:	0b09      	lsrs	r1, r1, #12
 8002420:	0fd8      	lsrs	r0, r3, #31
 8002422:	42be      	cmp	r6, r7
 8002424:	d01f      	beq.n	8002466 <__gedf2+0x76>
 8002426:	45ba      	cmp	sl, r7
 8002428:	d00f      	beq.n	800244a <__gedf2+0x5a>
 800242a:	2e00      	cmp	r6, #0
 800242c:	d12f      	bne.n	800248e <__gedf2+0x9e>
 800242e:	4655      	mov	r5, sl
 8002430:	9e01      	ldr	r6, [sp, #4]
 8002432:	4334      	orrs	r4, r6
 8002434:	2d00      	cmp	r5, #0
 8002436:	d127      	bne.n	8002488 <__gedf2+0x98>
 8002438:	430a      	orrs	r2, r1
 800243a:	d03a      	beq.n	80024b2 <__gedf2+0xc2>
 800243c:	2c00      	cmp	r4, #0
 800243e:	d145      	bne.n	80024cc <__gedf2+0xdc>
 8002440:	2800      	cmp	r0, #0
 8002442:	d11a      	bne.n	800247a <__gedf2+0x8a>
 8002444:	2001      	movs	r0, #1
 8002446:	4240      	negs	r0, r0
 8002448:	e017      	b.n	800247a <__gedf2+0x8a>
 800244a:	4311      	orrs	r1, r2
 800244c:	d13b      	bne.n	80024c6 <__gedf2+0xd6>
 800244e:	2e00      	cmp	r6, #0
 8002450:	d102      	bne.n	8002458 <__gedf2+0x68>
 8002452:	9f01      	ldr	r7, [sp, #4]
 8002454:	4327      	orrs	r7, r4
 8002456:	d0f3      	beq.n	8002440 <__gedf2+0x50>
 8002458:	4584      	cmp	ip, r0
 800245a:	d109      	bne.n	8002470 <__gedf2+0x80>
 800245c:	4663      	mov	r3, ip
 800245e:	2b00      	cmp	r3, #0
 8002460:	d0f0      	beq.n	8002444 <__gedf2+0x54>
 8002462:	4660      	mov	r0, ip
 8002464:	e009      	b.n	800247a <__gedf2+0x8a>
 8002466:	9f01      	ldr	r7, [sp, #4]
 8002468:	4327      	orrs	r7, r4
 800246a:	d12c      	bne.n	80024c6 <__gedf2+0xd6>
 800246c:	45b2      	cmp	sl, r6
 800246e:	d024      	beq.n	80024ba <__gedf2+0xca>
 8002470:	4663      	mov	r3, ip
 8002472:	2002      	movs	r0, #2
 8002474:	3b01      	subs	r3, #1
 8002476:	4018      	ands	r0, r3
 8002478:	3801      	subs	r0, #1
 800247a:	b003      	add	sp, #12
 800247c:	bcf0      	pop	{r4, r5, r6, r7}
 800247e:	46bb      	mov	fp, r7
 8002480:	46b2      	mov	sl, r6
 8002482:	46a9      	mov	r9, r5
 8002484:	46a0      	mov	r8, r4
 8002486:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002488:	2c00      	cmp	r4, #0
 800248a:	d0d9      	beq.n	8002440 <__gedf2+0x50>
 800248c:	e7e4      	b.n	8002458 <__gedf2+0x68>
 800248e:	4654      	mov	r4, sl
 8002490:	2c00      	cmp	r4, #0
 8002492:	d0ed      	beq.n	8002470 <__gedf2+0x80>
 8002494:	4584      	cmp	ip, r0
 8002496:	d1eb      	bne.n	8002470 <__gedf2+0x80>
 8002498:	4556      	cmp	r6, sl
 800249a:	dce9      	bgt.n	8002470 <__gedf2+0x80>
 800249c:	dbde      	blt.n	800245c <__gedf2+0x6c>
 800249e:	9b01      	ldr	r3, [sp, #4]
 80024a0:	428b      	cmp	r3, r1
 80024a2:	d8e5      	bhi.n	8002470 <__gedf2+0x80>
 80024a4:	d1da      	bne.n	800245c <__gedf2+0x6c>
 80024a6:	45c8      	cmp	r8, r9
 80024a8:	d8e2      	bhi.n	8002470 <__gedf2+0x80>
 80024aa:	2000      	movs	r0, #0
 80024ac:	45c8      	cmp	r8, r9
 80024ae:	d2e4      	bcs.n	800247a <__gedf2+0x8a>
 80024b0:	e7d4      	b.n	800245c <__gedf2+0x6c>
 80024b2:	2000      	movs	r0, #0
 80024b4:	2c00      	cmp	r4, #0
 80024b6:	d0e0      	beq.n	800247a <__gedf2+0x8a>
 80024b8:	e7da      	b.n	8002470 <__gedf2+0x80>
 80024ba:	4311      	orrs	r1, r2
 80024bc:	d103      	bne.n	80024c6 <__gedf2+0xd6>
 80024be:	4584      	cmp	ip, r0
 80024c0:	d1d6      	bne.n	8002470 <__gedf2+0x80>
 80024c2:	2000      	movs	r0, #0
 80024c4:	e7d9      	b.n	800247a <__gedf2+0x8a>
 80024c6:	2002      	movs	r0, #2
 80024c8:	4240      	negs	r0, r0
 80024ca:	e7d6      	b.n	800247a <__gedf2+0x8a>
 80024cc:	4584      	cmp	ip, r0
 80024ce:	d0e6      	beq.n	800249e <__gedf2+0xae>
 80024d0:	e7ce      	b.n	8002470 <__gedf2+0x80>
 80024d2:	46c0      	nop			@ (mov r8, r8)
 80024d4:	000007ff 	.word	0x000007ff

080024d8 <__ledf2>:
 80024d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024da:	4657      	mov	r7, sl
 80024dc:	464e      	mov	r6, r9
 80024de:	4645      	mov	r5, r8
 80024e0:	46de      	mov	lr, fp
 80024e2:	b5e0      	push	{r5, r6, r7, lr}
 80024e4:	000d      	movs	r5, r1
 80024e6:	030f      	lsls	r7, r1, #12
 80024e8:	0004      	movs	r4, r0
 80024ea:	4680      	mov	r8, r0
 80024ec:	0fe8      	lsrs	r0, r5, #31
 80024ee:	0b39      	lsrs	r1, r7, #12
 80024f0:	4684      	mov	ip, r0
 80024f2:	b083      	sub	sp, #12
 80024f4:	0058      	lsls	r0, r3, #1
 80024f6:	4f30      	ldr	r7, [pc, #192]	@ (80025b8 <__ledf2+0xe0>)
 80024f8:	0d40      	lsrs	r0, r0, #21
 80024fa:	9101      	str	r1, [sp, #4]
 80024fc:	031e      	lsls	r6, r3, #12
 80024fe:	0069      	lsls	r1, r5, #1
 8002500:	4682      	mov	sl, r0
 8002502:	4691      	mov	r9, r2
 8002504:	0d49      	lsrs	r1, r1, #21
 8002506:	0b36      	lsrs	r6, r6, #12
 8002508:	0fd8      	lsrs	r0, r3, #31
 800250a:	42b9      	cmp	r1, r7
 800250c:	d020      	beq.n	8002550 <__ledf2+0x78>
 800250e:	45ba      	cmp	sl, r7
 8002510:	d00f      	beq.n	8002532 <__ledf2+0x5a>
 8002512:	2900      	cmp	r1, #0
 8002514:	d12b      	bne.n	800256e <__ledf2+0x96>
 8002516:	9901      	ldr	r1, [sp, #4]
 8002518:	430c      	orrs	r4, r1
 800251a:	4651      	mov	r1, sl
 800251c:	2900      	cmp	r1, #0
 800251e:	d137      	bne.n	8002590 <__ledf2+0xb8>
 8002520:	4332      	orrs	r2, r6
 8002522:	d038      	beq.n	8002596 <__ledf2+0xbe>
 8002524:	2c00      	cmp	r4, #0
 8002526:	d144      	bne.n	80025b2 <__ledf2+0xda>
 8002528:	2800      	cmp	r0, #0
 800252a:	d119      	bne.n	8002560 <__ledf2+0x88>
 800252c:	2001      	movs	r0, #1
 800252e:	4240      	negs	r0, r0
 8002530:	e016      	b.n	8002560 <__ledf2+0x88>
 8002532:	4316      	orrs	r6, r2
 8002534:	d113      	bne.n	800255e <__ledf2+0x86>
 8002536:	2900      	cmp	r1, #0
 8002538:	d102      	bne.n	8002540 <__ledf2+0x68>
 800253a:	9f01      	ldr	r7, [sp, #4]
 800253c:	4327      	orrs	r7, r4
 800253e:	d0f3      	beq.n	8002528 <__ledf2+0x50>
 8002540:	4584      	cmp	ip, r0
 8002542:	d020      	beq.n	8002586 <__ledf2+0xae>
 8002544:	4663      	mov	r3, ip
 8002546:	2002      	movs	r0, #2
 8002548:	3b01      	subs	r3, #1
 800254a:	4018      	ands	r0, r3
 800254c:	3801      	subs	r0, #1
 800254e:	e007      	b.n	8002560 <__ledf2+0x88>
 8002550:	9f01      	ldr	r7, [sp, #4]
 8002552:	4327      	orrs	r7, r4
 8002554:	d103      	bne.n	800255e <__ledf2+0x86>
 8002556:	458a      	cmp	sl, r1
 8002558:	d1f4      	bne.n	8002544 <__ledf2+0x6c>
 800255a:	4316      	orrs	r6, r2
 800255c:	d01f      	beq.n	800259e <__ledf2+0xc6>
 800255e:	2002      	movs	r0, #2
 8002560:	b003      	add	sp, #12
 8002562:	bcf0      	pop	{r4, r5, r6, r7}
 8002564:	46bb      	mov	fp, r7
 8002566:	46b2      	mov	sl, r6
 8002568:	46a9      	mov	r9, r5
 800256a:	46a0      	mov	r8, r4
 800256c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800256e:	4654      	mov	r4, sl
 8002570:	2c00      	cmp	r4, #0
 8002572:	d0e7      	beq.n	8002544 <__ledf2+0x6c>
 8002574:	4584      	cmp	ip, r0
 8002576:	d1e5      	bne.n	8002544 <__ledf2+0x6c>
 8002578:	4551      	cmp	r1, sl
 800257a:	dce3      	bgt.n	8002544 <__ledf2+0x6c>
 800257c:	db03      	blt.n	8002586 <__ledf2+0xae>
 800257e:	9b01      	ldr	r3, [sp, #4]
 8002580:	42b3      	cmp	r3, r6
 8002582:	d8df      	bhi.n	8002544 <__ledf2+0x6c>
 8002584:	d00f      	beq.n	80025a6 <__ledf2+0xce>
 8002586:	4663      	mov	r3, ip
 8002588:	2b00      	cmp	r3, #0
 800258a:	d0cf      	beq.n	800252c <__ledf2+0x54>
 800258c:	4660      	mov	r0, ip
 800258e:	e7e7      	b.n	8002560 <__ledf2+0x88>
 8002590:	2c00      	cmp	r4, #0
 8002592:	d0c9      	beq.n	8002528 <__ledf2+0x50>
 8002594:	e7d4      	b.n	8002540 <__ledf2+0x68>
 8002596:	2000      	movs	r0, #0
 8002598:	2c00      	cmp	r4, #0
 800259a:	d0e1      	beq.n	8002560 <__ledf2+0x88>
 800259c:	e7d2      	b.n	8002544 <__ledf2+0x6c>
 800259e:	4584      	cmp	ip, r0
 80025a0:	d1d0      	bne.n	8002544 <__ledf2+0x6c>
 80025a2:	2000      	movs	r0, #0
 80025a4:	e7dc      	b.n	8002560 <__ledf2+0x88>
 80025a6:	45c8      	cmp	r8, r9
 80025a8:	d8cc      	bhi.n	8002544 <__ledf2+0x6c>
 80025aa:	2000      	movs	r0, #0
 80025ac:	45c8      	cmp	r8, r9
 80025ae:	d2d7      	bcs.n	8002560 <__ledf2+0x88>
 80025b0:	e7e9      	b.n	8002586 <__ledf2+0xae>
 80025b2:	4584      	cmp	ip, r0
 80025b4:	d0e3      	beq.n	800257e <__ledf2+0xa6>
 80025b6:	e7c5      	b.n	8002544 <__ledf2+0x6c>
 80025b8:	000007ff 	.word	0x000007ff

080025bc <__aeabi_dmul>:
 80025bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025be:	4657      	mov	r7, sl
 80025c0:	46de      	mov	lr, fp
 80025c2:	464e      	mov	r6, r9
 80025c4:	4645      	mov	r5, r8
 80025c6:	b5e0      	push	{r5, r6, r7, lr}
 80025c8:	001f      	movs	r7, r3
 80025ca:	030b      	lsls	r3, r1, #12
 80025cc:	0b1b      	lsrs	r3, r3, #12
 80025ce:	0016      	movs	r6, r2
 80025d0:	469a      	mov	sl, r3
 80025d2:	0fca      	lsrs	r2, r1, #31
 80025d4:	004b      	lsls	r3, r1, #1
 80025d6:	0004      	movs	r4, r0
 80025d8:	4693      	mov	fp, r2
 80025da:	b087      	sub	sp, #28
 80025dc:	0d5b      	lsrs	r3, r3, #21
 80025de:	d100      	bne.n	80025e2 <__aeabi_dmul+0x26>
 80025e0:	e0d5      	b.n	800278e <__aeabi_dmul+0x1d2>
 80025e2:	4abb      	ldr	r2, [pc, #748]	@ (80028d0 <__aeabi_dmul+0x314>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d100      	bne.n	80025ea <__aeabi_dmul+0x2e>
 80025e8:	e0f8      	b.n	80027dc <__aeabi_dmul+0x220>
 80025ea:	4651      	mov	r1, sl
 80025ec:	0f42      	lsrs	r2, r0, #29
 80025ee:	00c9      	lsls	r1, r1, #3
 80025f0:	430a      	orrs	r2, r1
 80025f2:	2180      	movs	r1, #128	@ 0x80
 80025f4:	0409      	lsls	r1, r1, #16
 80025f6:	4311      	orrs	r1, r2
 80025f8:	00c2      	lsls	r2, r0, #3
 80025fa:	4691      	mov	r9, r2
 80025fc:	4ab5      	ldr	r2, [pc, #724]	@ (80028d4 <__aeabi_dmul+0x318>)
 80025fe:	468a      	mov	sl, r1
 8002600:	189d      	adds	r5, r3, r2
 8002602:	2300      	movs	r3, #0
 8002604:	4698      	mov	r8, r3
 8002606:	9302      	str	r3, [sp, #8]
 8002608:	033c      	lsls	r4, r7, #12
 800260a:	007b      	lsls	r3, r7, #1
 800260c:	0ffa      	lsrs	r2, r7, #31
 800260e:	0030      	movs	r0, r6
 8002610:	0b24      	lsrs	r4, r4, #12
 8002612:	0d5b      	lsrs	r3, r3, #21
 8002614:	9200      	str	r2, [sp, #0]
 8002616:	d100      	bne.n	800261a <__aeabi_dmul+0x5e>
 8002618:	e096      	b.n	8002748 <__aeabi_dmul+0x18c>
 800261a:	4aad      	ldr	r2, [pc, #692]	@ (80028d0 <__aeabi_dmul+0x314>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d031      	beq.n	8002684 <__aeabi_dmul+0xc8>
 8002620:	0f72      	lsrs	r2, r6, #29
 8002622:	00e4      	lsls	r4, r4, #3
 8002624:	4322      	orrs	r2, r4
 8002626:	2480      	movs	r4, #128	@ 0x80
 8002628:	0424      	lsls	r4, r4, #16
 800262a:	4314      	orrs	r4, r2
 800262c:	4aa9      	ldr	r2, [pc, #676]	@ (80028d4 <__aeabi_dmul+0x318>)
 800262e:	00f0      	lsls	r0, r6, #3
 8002630:	4694      	mov	ip, r2
 8002632:	4463      	add	r3, ip
 8002634:	195b      	adds	r3, r3, r5
 8002636:	1c5a      	adds	r2, r3, #1
 8002638:	9201      	str	r2, [sp, #4]
 800263a:	4642      	mov	r2, r8
 800263c:	2600      	movs	r6, #0
 800263e:	2a0a      	cmp	r2, #10
 8002640:	dc42      	bgt.n	80026c8 <__aeabi_dmul+0x10c>
 8002642:	465a      	mov	r2, fp
 8002644:	9900      	ldr	r1, [sp, #0]
 8002646:	404a      	eors	r2, r1
 8002648:	4693      	mov	fp, r2
 800264a:	4642      	mov	r2, r8
 800264c:	2a02      	cmp	r2, #2
 800264e:	dc32      	bgt.n	80026b6 <__aeabi_dmul+0xfa>
 8002650:	3a01      	subs	r2, #1
 8002652:	2a01      	cmp	r2, #1
 8002654:	d900      	bls.n	8002658 <__aeabi_dmul+0x9c>
 8002656:	e149      	b.n	80028ec <__aeabi_dmul+0x330>
 8002658:	2e02      	cmp	r6, #2
 800265a:	d100      	bne.n	800265e <__aeabi_dmul+0xa2>
 800265c:	e0ca      	b.n	80027f4 <__aeabi_dmul+0x238>
 800265e:	2e01      	cmp	r6, #1
 8002660:	d13d      	bne.n	80026de <__aeabi_dmul+0x122>
 8002662:	2300      	movs	r3, #0
 8002664:	2400      	movs	r4, #0
 8002666:	2200      	movs	r2, #0
 8002668:	0010      	movs	r0, r2
 800266a:	465a      	mov	r2, fp
 800266c:	051b      	lsls	r3, r3, #20
 800266e:	4323      	orrs	r3, r4
 8002670:	07d2      	lsls	r2, r2, #31
 8002672:	4313      	orrs	r3, r2
 8002674:	0019      	movs	r1, r3
 8002676:	b007      	add	sp, #28
 8002678:	bcf0      	pop	{r4, r5, r6, r7}
 800267a:	46bb      	mov	fp, r7
 800267c:	46b2      	mov	sl, r6
 800267e:	46a9      	mov	r9, r5
 8002680:	46a0      	mov	r8, r4
 8002682:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002684:	4b92      	ldr	r3, [pc, #584]	@ (80028d0 <__aeabi_dmul+0x314>)
 8002686:	4326      	orrs	r6, r4
 8002688:	18eb      	adds	r3, r5, r3
 800268a:	2e00      	cmp	r6, #0
 800268c:	d100      	bne.n	8002690 <__aeabi_dmul+0xd4>
 800268e:	e0bb      	b.n	8002808 <__aeabi_dmul+0x24c>
 8002690:	2203      	movs	r2, #3
 8002692:	4641      	mov	r1, r8
 8002694:	4311      	orrs	r1, r2
 8002696:	465a      	mov	r2, fp
 8002698:	4688      	mov	r8, r1
 800269a:	9900      	ldr	r1, [sp, #0]
 800269c:	404a      	eors	r2, r1
 800269e:	2180      	movs	r1, #128	@ 0x80
 80026a0:	0109      	lsls	r1, r1, #4
 80026a2:	468c      	mov	ip, r1
 80026a4:	0029      	movs	r1, r5
 80026a6:	4461      	add	r1, ip
 80026a8:	9101      	str	r1, [sp, #4]
 80026aa:	4641      	mov	r1, r8
 80026ac:	290a      	cmp	r1, #10
 80026ae:	dd00      	ble.n	80026b2 <__aeabi_dmul+0xf6>
 80026b0:	e233      	b.n	8002b1a <__aeabi_dmul+0x55e>
 80026b2:	4693      	mov	fp, r2
 80026b4:	2603      	movs	r6, #3
 80026b6:	4642      	mov	r2, r8
 80026b8:	2701      	movs	r7, #1
 80026ba:	4097      	lsls	r7, r2
 80026bc:	21a6      	movs	r1, #166	@ 0xa6
 80026be:	003a      	movs	r2, r7
 80026c0:	00c9      	lsls	r1, r1, #3
 80026c2:	400a      	ands	r2, r1
 80026c4:	420f      	tst	r7, r1
 80026c6:	d031      	beq.n	800272c <__aeabi_dmul+0x170>
 80026c8:	9e02      	ldr	r6, [sp, #8]
 80026ca:	2e02      	cmp	r6, #2
 80026cc:	d100      	bne.n	80026d0 <__aeabi_dmul+0x114>
 80026ce:	e235      	b.n	8002b3c <__aeabi_dmul+0x580>
 80026d0:	2e03      	cmp	r6, #3
 80026d2:	d100      	bne.n	80026d6 <__aeabi_dmul+0x11a>
 80026d4:	e1d2      	b.n	8002a7c <__aeabi_dmul+0x4c0>
 80026d6:	4654      	mov	r4, sl
 80026d8:	4648      	mov	r0, r9
 80026da:	2e01      	cmp	r6, #1
 80026dc:	d0c1      	beq.n	8002662 <__aeabi_dmul+0xa6>
 80026de:	9a01      	ldr	r2, [sp, #4]
 80026e0:	4b7d      	ldr	r3, [pc, #500]	@ (80028d8 <__aeabi_dmul+0x31c>)
 80026e2:	4694      	mov	ip, r2
 80026e4:	4463      	add	r3, ip
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	dc00      	bgt.n	80026ec <__aeabi_dmul+0x130>
 80026ea:	e0c0      	b.n	800286e <__aeabi_dmul+0x2b2>
 80026ec:	0742      	lsls	r2, r0, #29
 80026ee:	d009      	beq.n	8002704 <__aeabi_dmul+0x148>
 80026f0:	220f      	movs	r2, #15
 80026f2:	4002      	ands	r2, r0
 80026f4:	2a04      	cmp	r2, #4
 80026f6:	d005      	beq.n	8002704 <__aeabi_dmul+0x148>
 80026f8:	1d02      	adds	r2, r0, #4
 80026fa:	4282      	cmp	r2, r0
 80026fc:	4180      	sbcs	r0, r0
 80026fe:	4240      	negs	r0, r0
 8002700:	1824      	adds	r4, r4, r0
 8002702:	0010      	movs	r0, r2
 8002704:	01e2      	lsls	r2, r4, #7
 8002706:	d506      	bpl.n	8002716 <__aeabi_dmul+0x15a>
 8002708:	4b74      	ldr	r3, [pc, #464]	@ (80028dc <__aeabi_dmul+0x320>)
 800270a:	9a01      	ldr	r2, [sp, #4]
 800270c:	401c      	ands	r4, r3
 800270e:	2380      	movs	r3, #128	@ 0x80
 8002710:	4694      	mov	ip, r2
 8002712:	00db      	lsls	r3, r3, #3
 8002714:	4463      	add	r3, ip
 8002716:	4a72      	ldr	r2, [pc, #456]	@ (80028e0 <__aeabi_dmul+0x324>)
 8002718:	4293      	cmp	r3, r2
 800271a:	dc6b      	bgt.n	80027f4 <__aeabi_dmul+0x238>
 800271c:	0762      	lsls	r2, r4, #29
 800271e:	08c0      	lsrs	r0, r0, #3
 8002720:	0264      	lsls	r4, r4, #9
 8002722:	055b      	lsls	r3, r3, #21
 8002724:	4302      	orrs	r2, r0
 8002726:	0b24      	lsrs	r4, r4, #12
 8002728:	0d5b      	lsrs	r3, r3, #21
 800272a:	e79d      	b.n	8002668 <__aeabi_dmul+0xac>
 800272c:	2190      	movs	r1, #144	@ 0x90
 800272e:	0089      	lsls	r1, r1, #2
 8002730:	420f      	tst	r7, r1
 8002732:	d163      	bne.n	80027fc <__aeabi_dmul+0x240>
 8002734:	2288      	movs	r2, #136	@ 0x88
 8002736:	423a      	tst	r2, r7
 8002738:	d100      	bne.n	800273c <__aeabi_dmul+0x180>
 800273a:	e0d7      	b.n	80028ec <__aeabi_dmul+0x330>
 800273c:	9b00      	ldr	r3, [sp, #0]
 800273e:	46a2      	mov	sl, r4
 8002740:	469b      	mov	fp, r3
 8002742:	4681      	mov	r9, r0
 8002744:	9602      	str	r6, [sp, #8]
 8002746:	e7bf      	b.n	80026c8 <__aeabi_dmul+0x10c>
 8002748:	0023      	movs	r3, r4
 800274a:	4333      	orrs	r3, r6
 800274c:	d100      	bne.n	8002750 <__aeabi_dmul+0x194>
 800274e:	e07f      	b.n	8002850 <__aeabi_dmul+0x294>
 8002750:	2c00      	cmp	r4, #0
 8002752:	d100      	bne.n	8002756 <__aeabi_dmul+0x19a>
 8002754:	e1ad      	b.n	8002ab2 <__aeabi_dmul+0x4f6>
 8002756:	0020      	movs	r0, r4
 8002758:	f000 ff10 	bl	800357c <__clzsi2>
 800275c:	0002      	movs	r2, r0
 800275e:	0003      	movs	r3, r0
 8002760:	3a0b      	subs	r2, #11
 8002762:	201d      	movs	r0, #29
 8002764:	0019      	movs	r1, r3
 8002766:	1a82      	subs	r2, r0, r2
 8002768:	0030      	movs	r0, r6
 800276a:	3908      	subs	r1, #8
 800276c:	40d0      	lsrs	r0, r2
 800276e:	408c      	lsls	r4, r1
 8002770:	4304      	orrs	r4, r0
 8002772:	0030      	movs	r0, r6
 8002774:	4088      	lsls	r0, r1
 8002776:	4a5b      	ldr	r2, [pc, #364]	@ (80028e4 <__aeabi_dmul+0x328>)
 8002778:	1aeb      	subs	r3, r5, r3
 800277a:	4694      	mov	ip, r2
 800277c:	4463      	add	r3, ip
 800277e:	1c5a      	adds	r2, r3, #1
 8002780:	9201      	str	r2, [sp, #4]
 8002782:	4642      	mov	r2, r8
 8002784:	2600      	movs	r6, #0
 8002786:	2a0a      	cmp	r2, #10
 8002788:	dc00      	bgt.n	800278c <__aeabi_dmul+0x1d0>
 800278a:	e75a      	b.n	8002642 <__aeabi_dmul+0x86>
 800278c:	e79c      	b.n	80026c8 <__aeabi_dmul+0x10c>
 800278e:	4653      	mov	r3, sl
 8002790:	4303      	orrs	r3, r0
 8002792:	4699      	mov	r9, r3
 8002794:	d054      	beq.n	8002840 <__aeabi_dmul+0x284>
 8002796:	4653      	mov	r3, sl
 8002798:	2b00      	cmp	r3, #0
 800279a:	d100      	bne.n	800279e <__aeabi_dmul+0x1e2>
 800279c:	e177      	b.n	8002a8e <__aeabi_dmul+0x4d2>
 800279e:	4650      	mov	r0, sl
 80027a0:	f000 feec 	bl	800357c <__clzsi2>
 80027a4:	230b      	movs	r3, #11
 80027a6:	425b      	negs	r3, r3
 80027a8:	469c      	mov	ip, r3
 80027aa:	0002      	movs	r2, r0
 80027ac:	4484      	add	ip, r0
 80027ae:	0011      	movs	r1, r2
 80027b0:	4650      	mov	r0, sl
 80027b2:	3908      	subs	r1, #8
 80027b4:	4088      	lsls	r0, r1
 80027b6:	231d      	movs	r3, #29
 80027b8:	4680      	mov	r8, r0
 80027ba:	4660      	mov	r0, ip
 80027bc:	1a1b      	subs	r3, r3, r0
 80027be:	0020      	movs	r0, r4
 80027c0:	40d8      	lsrs	r0, r3
 80027c2:	0003      	movs	r3, r0
 80027c4:	4640      	mov	r0, r8
 80027c6:	4303      	orrs	r3, r0
 80027c8:	469a      	mov	sl, r3
 80027ca:	0023      	movs	r3, r4
 80027cc:	408b      	lsls	r3, r1
 80027ce:	4699      	mov	r9, r3
 80027d0:	2300      	movs	r3, #0
 80027d2:	4d44      	ldr	r5, [pc, #272]	@ (80028e4 <__aeabi_dmul+0x328>)
 80027d4:	4698      	mov	r8, r3
 80027d6:	1aad      	subs	r5, r5, r2
 80027d8:	9302      	str	r3, [sp, #8]
 80027da:	e715      	b.n	8002608 <__aeabi_dmul+0x4c>
 80027dc:	4652      	mov	r2, sl
 80027de:	4302      	orrs	r2, r0
 80027e0:	4691      	mov	r9, r2
 80027e2:	d126      	bne.n	8002832 <__aeabi_dmul+0x276>
 80027e4:	2200      	movs	r2, #0
 80027e6:	001d      	movs	r5, r3
 80027e8:	2302      	movs	r3, #2
 80027ea:	4692      	mov	sl, r2
 80027ec:	3208      	adds	r2, #8
 80027ee:	4690      	mov	r8, r2
 80027f0:	9302      	str	r3, [sp, #8]
 80027f2:	e709      	b.n	8002608 <__aeabi_dmul+0x4c>
 80027f4:	2400      	movs	r4, #0
 80027f6:	2200      	movs	r2, #0
 80027f8:	4b35      	ldr	r3, [pc, #212]	@ (80028d0 <__aeabi_dmul+0x314>)
 80027fa:	e735      	b.n	8002668 <__aeabi_dmul+0xac>
 80027fc:	2300      	movs	r3, #0
 80027fe:	2480      	movs	r4, #128	@ 0x80
 8002800:	469b      	mov	fp, r3
 8002802:	0324      	lsls	r4, r4, #12
 8002804:	4b32      	ldr	r3, [pc, #200]	@ (80028d0 <__aeabi_dmul+0x314>)
 8002806:	e72f      	b.n	8002668 <__aeabi_dmul+0xac>
 8002808:	2202      	movs	r2, #2
 800280a:	4641      	mov	r1, r8
 800280c:	4311      	orrs	r1, r2
 800280e:	2280      	movs	r2, #128	@ 0x80
 8002810:	0112      	lsls	r2, r2, #4
 8002812:	4694      	mov	ip, r2
 8002814:	002a      	movs	r2, r5
 8002816:	4462      	add	r2, ip
 8002818:	4688      	mov	r8, r1
 800281a:	9201      	str	r2, [sp, #4]
 800281c:	290a      	cmp	r1, #10
 800281e:	dd00      	ble.n	8002822 <__aeabi_dmul+0x266>
 8002820:	e752      	b.n	80026c8 <__aeabi_dmul+0x10c>
 8002822:	465a      	mov	r2, fp
 8002824:	2000      	movs	r0, #0
 8002826:	9900      	ldr	r1, [sp, #0]
 8002828:	0004      	movs	r4, r0
 800282a:	404a      	eors	r2, r1
 800282c:	4693      	mov	fp, r2
 800282e:	2602      	movs	r6, #2
 8002830:	e70b      	b.n	800264a <__aeabi_dmul+0x8e>
 8002832:	220c      	movs	r2, #12
 8002834:	001d      	movs	r5, r3
 8002836:	2303      	movs	r3, #3
 8002838:	4681      	mov	r9, r0
 800283a:	4690      	mov	r8, r2
 800283c:	9302      	str	r3, [sp, #8]
 800283e:	e6e3      	b.n	8002608 <__aeabi_dmul+0x4c>
 8002840:	2300      	movs	r3, #0
 8002842:	469a      	mov	sl, r3
 8002844:	3304      	adds	r3, #4
 8002846:	4698      	mov	r8, r3
 8002848:	3b03      	subs	r3, #3
 800284a:	2500      	movs	r5, #0
 800284c:	9302      	str	r3, [sp, #8]
 800284e:	e6db      	b.n	8002608 <__aeabi_dmul+0x4c>
 8002850:	4642      	mov	r2, r8
 8002852:	3301      	adds	r3, #1
 8002854:	431a      	orrs	r2, r3
 8002856:	002b      	movs	r3, r5
 8002858:	4690      	mov	r8, r2
 800285a:	1c5a      	adds	r2, r3, #1
 800285c:	9201      	str	r2, [sp, #4]
 800285e:	4642      	mov	r2, r8
 8002860:	2400      	movs	r4, #0
 8002862:	2000      	movs	r0, #0
 8002864:	2601      	movs	r6, #1
 8002866:	2a0a      	cmp	r2, #10
 8002868:	dc00      	bgt.n	800286c <__aeabi_dmul+0x2b0>
 800286a:	e6ea      	b.n	8002642 <__aeabi_dmul+0x86>
 800286c:	e72c      	b.n	80026c8 <__aeabi_dmul+0x10c>
 800286e:	2201      	movs	r2, #1
 8002870:	1ad2      	subs	r2, r2, r3
 8002872:	2a38      	cmp	r2, #56	@ 0x38
 8002874:	dd00      	ble.n	8002878 <__aeabi_dmul+0x2bc>
 8002876:	e6f4      	b.n	8002662 <__aeabi_dmul+0xa6>
 8002878:	2a1f      	cmp	r2, #31
 800287a:	dc00      	bgt.n	800287e <__aeabi_dmul+0x2c2>
 800287c:	e12a      	b.n	8002ad4 <__aeabi_dmul+0x518>
 800287e:	211f      	movs	r1, #31
 8002880:	4249      	negs	r1, r1
 8002882:	1acb      	subs	r3, r1, r3
 8002884:	0021      	movs	r1, r4
 8002886:	40d9      	lsrs	r1, r3
 8002888:	000b      	movs	r3, r1
 800288a:	2a20      	cmp	r2, #32
 800288c:	d005      	beq.n	800289a <__aeabi_dmul+0x2de>
 800288e:	4a16      	ldr	r2, [pc, #88]	@ (80028e8 <__aeabi_dmul+0x32c>)
 8002890:	9d01      	ldr	r5, [sp, #4]
 8002892:	4694      	mov	ip, r2
 8002894:	4465      	add	r5, ip
 8002896:	40ac      	lsls	r4, r5
 8002898:	4320      	orrs	r0, r4
 800289a:	1e42      	subs	r2, r0, #1
 800289c:	4190      	sbcs	r0, r2
 800289e:	4318      	orrs	r0, r3
 80028a0:	2307      	movs	r3, #7
 80028a2:	0019      	movs	r1, r3
 80028a4:	2400      	movs	r4, #0
 80028a6:	4001      	ands	r1, r0
 80028a8:	4203      	tst	r3, r0
 80028aa:	d00c      	beq.n	80028c6 <__aeabi_dmul+0x30a>
 80028ac:	230f      	movs	r3, #15
 80028ae:	4003      	ands	r3, r0
 80028b0:	2b04      	cmp	r3, #4
 80028b2:	d100      	bne.n	80028b6 <__aeabi_dmul+0x2fa>
 80028b4:	e140      	b.n	8002b38 <__aeabi_dmul+0x57c>
 80028b6:	1d03      	adds	r3, r0, #4
 80028b8:	4283      	cmp	r3, r0
 80028ba:	41a4      	sbcs	r4, r4
 80028bc:	0018      	movs	r0, r3
 80028be:	4264      	negs	r4, r4
 80028c0:	0761      	lsls	r1, r4, #29
 80028c2:	0264      	lsls	r4, r4, #9
 80028c4:	0b24      	lsrs	r4, r4, #12
 80028c6:	08c2      	lsrs	r2, r0, #3
 80028c8:	2300      	movs	r3, #0
 80028ca:	430a      	orrs	r2, r1
 80028cc:	e6cc      	b.n	8002668 <__aeabi_dmul+0xac>
 80028ce:	46c0      	nop			@ (mov r8, r8)
 80028d0:	000007ff 	.word	0x000007ff
 80028d4:	fffffc01 	.word	0xfffffc01
 80028d8:	000003ff 	.word	0x000003ff
 80028dc:	feffffff 	.word	0xfeffffff
 80028e0:	000007fe 	.word	0x000007fe
 80028e4:	fffffc0d 	.word	0xfffffc0d
 80028e8:	0000043e 	.word	0x0000043e
 80028ec:	4649      	mov	r1, r9
 80028ee:	464a      	mov	r2, r9
 80028f0:	0409      	lsls	r1, r1, #16
 80028f2:	0c09      	lsrs	r1, r1, #16
 80028f4:	000d      	movs	r5, r1
 80028f6:	0c16      	lsrs	r6, r2, #16
 80028f8:	0c02      	lsrs	r2, r0, #16
 80028fa:	0400      	lsls	r0, r0, #16
 80028fc:	0c00      	lsrs	r0, r0, #16
 80028fe:	4345      	muls	r5, r0
 8002900:	46ac      	mov	ip, r5
 8002902:	0005      	movs	r5, r0
 8002904:	4375      	muls	r5, r6
 8002906:	46a8      	mov	r8, r5
 8002908:	0015      	movs	r5, r2
 800290a:	000f      	movs	r7, r1
 800290c:	4375      	muls	r5, r6
 800290e:	9200      	str	r2, [sp, #0]
 8002910:	9502      	str	r5, [sp, #8]
 8002912:	002a      	movs	r2, r5
 8002914:	9d00      	ldr	r5, [sp, #0]
 8002916:	436f      	muls	r7, r5
 8002918:	4665      	mov	r5, ip
 800291a:	0c2d      	lsrs	r5, r5, #16
 800291c:	46a9      	mov	r9, r5
 800291e:	4447      	add	r7, r8
 8002920:	444f      	add	r7, r9
 8002922:	45b8      	cmp	r8, r7
 8002924:	d905      	bls.n	8002932 <__aeabi_dmul+0x376>
 8002926:	0015      	movs	r5, r2
 8002928:	2280      	movs	r2, #128	@ 0x80
 800292a:	0252      	lsls	r2, r2, #9
 800292c:	4690      	mov	r8, r2
 800292e:	4445      	add	r5, r8
 8002930:	9502      	str	r5, [sp, #8]
 8002932:	0c3d      	lsrs	r5, r7, #16
 8002934:	9503      	str	r5, [sp, #12]
 8002936:	4665      	mov	r5, ip
 8002938:	042d      	lsls	r5, r5, #16
 800293a:	043f      	lsls	r7, r7, #16
 800293c:	0c2d      	lsrs	r5, r5, #16
 800293e:	46ac      	mov	ip, r5
 8002940:	003d      	movs	r5, r7
 8002942:	4465      	add	r5, ip
 8002944:	9504      	str	r5, [sp, #16]
 8002946:	0c25      	lsrs	r5, r4, #16
 8002948:	0424      	lsls	r4, r4, #16
 800294a:	0c24      	lsrs	r4, r4, #16
 800294c:	46ac      	mov	ip, r5
 800294e:	0025      	movs	r5, r4
 8002950:	4375      	muls	r5, r6
 8002952:	46a8      	mov	r8, r5
 8002954:	4665      	mov	r5, ip
 8002956:	000f      	movs	r7, r1
 8002958:	4369      	muls	r1, r5
 800295a:	4441      	add	r1, r8
 800295c:	4689      	mov	r9, r1
 800295e:	4367      	muls	r7, r4
 8002960:	0c39      	lsrs	r1, r7, #16
 8002962:	4449      	add	r1, r9
 8002964:	436e      	muls	r6, r5
 8002966:	4588      	cmp	r8, r1
 8002968:	d903      	bls.n	8002972 <__aeabi_dmul+0x3b6>
 800296a:	2280      	movs	r2, #128	@ 0x80
 800296c:	0252      	lsls	r2, r2, #9
 800296e:	4690      	mov	r8, r2
 8002970:	4446      	add	r6, r8
 8002972:	0c0d      	lsrs	r5, r1, #16
 8002974:	46a8      	mov	r8, r5
 8002976:	0035      	movs	r5, r6
 8002978:	4445      	add	r5, r8
 800297a:	9505      	str	r5, [sp, #20]
 800297c:	9d03      	ldr	r5, [sp, #12]
 800297e:	043f      	lsls	r7, r7, #16
 8002980:	46a8      	mov	r8, r5
 8002982:	0c3f      	lsrs	r7, r7, #16
 8002984:	0409      	lsls	r1, r1, #16
 8002986:	19c9      	adds	r1, r1, r7
 8002988:	4488      	add	r8, r1
 800298a:	4645      	mov	r5, r8
 800298c:	9503      	str	r5, [sp, #12]
 800298e:	4655      	mov	r5, sl
 8002990:	042e      	lsls	r6, r5, #16
 8002992:	0c36      	lsrs	r6, r6, #16
 8002994:	0c2f      	lsrs	r7, r5, #16
 8002996:	0035      	movs	r5, r6
 8002998:	4345      	muls	r5, r0
 800299a:	4378      	muls	r0, r7
 800299c:	4681      	mov	r9, r0
 800299e:	0038      	movs	r0, r7
 80029a0:	46a8      	mov	r8, r5
 80029a2:	0c2d      	lsrs	r5, r5, #16
 80029a4:	46aa      	mov	sl, r5
 80029a6:	9a00      	ldr	r2, [sp, #0]
 80029a8:	4350      	muls	r0, r2
 80029aa:	4372      	muls	r2, r6
 80029ac:	444a      	add	r2, r9
 80029ae:	4452      	add	r2, sl
 80029b0:	4591      	cmp	r9, r2
 80029b2:	d903      	bls.n	80029bc <__aeabi_dmul+0x400>
 80029b4:	2580      	movs	r5, #128	@ 0x80
 80029b6:	026d      	lsls	r5, r5, #9
 80029b8:	46a9      	mov	r9, r5
 80029ba:	4448      	add	r0, r9
 80029bc:	0c15      	lsrs	r5, r2, #16
 80029be:	46a9      	mov	r9, r5
 80029c0:	4645      	mov	r5, r8
 80029c2:	042d      	lsls	r5, r5, #16
 80029c4:	0c2d      	lsrs	r5, r5, #16
 80029c6:	46a8      	mov	r8, r5
 80029c8:	4665      	mov	r5, ip
 80029ca:	437d      	muls	r5, r7
 80029cc:	0412      	lsls	r2, r2, #16
 80029ce:	4448      	add	r0, r9
 80029d0:	4490      	add	r8, r2
 80029d2:	46a9      	mov	r9, r5
 80029d4:	0032      	movs	r2, r6
 80029d6:	4665      	mov	r5, ip
 80029d8:	4362      	muls	r2, r4
 80029da:	436e      	muls	r6, r5
 80029dc:	437c      	muls	r4, r7
 80029de:	0c17      	lsrs	r7, r2, #16
 80029e0:	1936      	adds	r6, r6, r4
 80029e2:	19bf      	adds	r7, r7, r6
 80029e4:	42bc      	cmp	r4, r7
 80029e6:	d903      	bls.n	80029f0 <__aeabi_dmul+0x434>
 80029e8:	2480      	movs	r4, #128	@ 0x80
 80029ea:	0264      	lsls	r4, r4, #9
 80029ec:	46a4      	mov	ip, r4
 80029ee:	44e1      	add	r9, ip
 80029f0:	9c02      	ldr	r4, [sp, #8]
 80029f2:	9e03      	ldr	r6, [sp, #12]
 80029f4:	46a4      	mov	ip, r4
 80029f6:	9d05      	ldr	r5, [sp, #20]
 80029f8:	4466      	add	r6, ip
 80029fa:	428e      	cmp	r6, r1
 80029fc:	4189      	sbcs	r1, r1
 80029fe:	46ac      	mov	ip, r5
 8002a00:	0412      	lsls	r2, r2, #16
 8002a02:	043c      	lsls	r4, r7, #16
 8002a04:	0c12      	lsrs	r2, r2, #16
 8002a06:	18a2      	adds	r2, r4, r2
 8002a08:	4462      	add	r2, ip
 8002a0a:	4249      	negs	r1, r1
 8002a0c:	1854      	adds	r4, r2, r1
 8002a0e:	4446      	add	r6, r8
 8002a10:	46a4      	mov	ip, r4
 8002a12:	4546      	cmp	r6, r8
 8002a14:	41a4      	sbcs	r4, r4
 8002a16:	4682      	mov	sl, r0
 8002a18:	4264      	negs	r4, r4
 8002a1a:	46a0      	mov	r8, r4
 8002a1c:	42aa      	cmp	r2, r5
 8002a1e:	4192      	sbcs	r2, r2
 8002a20:	458c      	cmp	ip, r1
 8002a22:	4189      	sbcs	r1, r1
 8002a24:	44e2      	add	sl, ip
 8002a26:	44d0      	add	r8, sl
 8002a28:	4249      	negs	r1, r1
 8002a2a:	4252      	negs	r2, r2
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	45a0      	cmp	r8, r4
 8002a30:	41a4      	sbcs	r4, r4
 8002a32:	4582      	cmp	sl, r0
 8002a34:	4189      	sbcs	r1, r1
 8002a36:	4264      	negs	r4, r4
 8002a38:	4249      	negs	r1, r1
 8002a3a:	430c      	orrs	r4, r1
 8002a3c:	4641      	mov	r1, r8
 8002a3e:	0c3f      	lsrs	r7, r7, #16
 8002a40:	19d2      	adds	r2, r2, r7
 8002a42:	1912      	adds	r2, r2, r4
 8002a44:	0dcc      	lsrs	r4, r1, #23
 8002a46:	9904      	ldr	r1, [sp, #16]
 8002a48:	0270      	lsls	r0, r6, #9
 8002a4a:	4308      	orrs	r0, r1
 8002a4c:	1e41      	subs	r1, r0, #1
 8002a4e:	4188      	sbcs	r0, r1
 8002a50:	4641      	mov	r1, r8
 8002a52:	444a      	add	r2, r9
 8002a54:	0df6      	lsrs	r6, r6, #23
 8002a56:	0252      	lsls	r2, r2, #9
 8002a58:	4330      	orrs	r0, r6
 8002a5a:	0249      	lsls	r1, r1, #9
 8002a5c:	4314      	orrs	r4, r2
 8002a5e:	4308      	orrs	r0, r1
 8002a60:	01d2      	lsls	r2, r2, #7
 8002a62:	d535      	bpl.n	8002ad0 <__aeabi_dmul+0x514>
 8002a64:	2201      	movs	r2, #1
 8002a66:	0843      	lsrs	r3, r0, #1
 8002a68:	4002      	ands	r2, r0
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	07e0      	lsls	r0, r4, #31
 8002a6e:	4318      	orrs	r0, r3
 8002a70:	0864      	lsrs	r4, r4, #1
 8002a72:	e634      	b.n	80026de <__aeabi_dmul+0x122>
 8002a74:	9b00      	ldr	r3, [sp, #0]
 8002a76:	46a2      	mov	sl, r4
 8002a78:	469b      	mov	fp, r3
 8002a7a:	4681      	mov	r9, r0
 8002a7c:	2480      	movs	r4, #128	@ 0x80
 8002a7e:	4653      	mov	r3, sl
 8002a80:	0324      	lsls	r4, r4, #12
 8002a82:	431c      	orrs	r4, r3
 8002a84:	0324      	lsls	r4, r4, #12
 8002a86:	464a      	mov	r2, r9
 8002a88:	4b2e      	ldr	r3, [pc, #184]	@ (8002b44 <__aeabi_dmul+0x588>)
 8002a8a:	0b24      	lsrs	r4, r4, #12
 8002a8c:	e5ec      	b.n	8002668 <__aeabi_dmul+0xac>
 8002a8e:	f000 fd75 	bl	800357c <__clzsi2>
 8002a92:	2315      	movs	r3, #21
 8002a94:	469c      	mov	ip, r3
 8002a96:	4484      	add	ip, r0
 8002a98:	0002      	movs	r2, r0
 8002a9a:	4663      	mov	r3, ip
 8002a9c:	3220      	adds	r2, #32
 8002a9e:	2b1c      	cmp	r3, #28
 8002aa0:	dc00      	bgt.n	8002aa4 <__aeabi_dmul+0x4e8>
 8002aa2:	e684      	b.n	80027ae <__aeabi_dmul+0x1f2>
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	4699      	mov	r9, r3
 8002aa8:	0023      	movs	r3, r4
 8002aaa:	3808      	subs	r0, #8
 8002aac:	4083      	lsls	r3, r0
 8002aae:	469a      	mov	sl, r3
 8002ab0:	e68e      	b.n	80027d0 <__aeabi_dmul+0x214>
 8002ab2:	f000 fd63 	bl	800357c <__clzsi2>
 8002ab6:	0002      	movs	r2, r0
 8002ab8:	0003      	movs	r3, r0
 8002aba:	3215      	adds	r2, #21
 8002abc:	3320      	adds	r3, #32
 8002abe:	2a1c      	cmp	r2, #28
 8002ac0:	dc00      	bgt.n	8002ac4 <__aeabi_dmul+0x508>
 8002ac2:	e64e      	b.n	8002762 <__aeabi_dmul+0x1a6>
 8002ac4:	0002      	movs	r2, r0
 8002ac6:	0034      	movs	r4, r6
 8002ac8:	3a08      	subs	r2, #8
 8002aca:	2000      	movs	r0, #0
 8002acc:	4094      	lsls	r4, r2
 8002ace:	e652      	b.n	8002776 <__aeabi_dmul+0x1ba>
 8002ad0:	9301      	str	r3, [sp, #4]
 8002ad2:	e604      	b.n	80026de <__aeabi_dmul+0x122>
 8002ad4:	4b1c      	ldr	r3, [pc, #112]	@ (8002b48 <__aeabi_dmul+0x58c>)
 8002ad6:	0021      	movs	r1, r4
 8002ad8:	469c      	mov	ip, r3
 8002ada:	0003      	movs	r3, r0
 8002adc:	9d01      	ldr	r5, [sp, #4]
 8002ade:	40d3      	lsrs	r3, r2
 8002ae0:	4465      	add	r5, ip
 8002ae2:	40a9      	lsls	r1, r5
 8002ae4:	4319      	orrs	r1, r3
 8002ae6:	0003      	movs	r3, r0
 8002ae8:	40ab      	lsls	r3, r5
 8002aea:	1e58      	subs	r0, r3, #1
 8002aec:	4183      	sbcs	r3, r0
 8002aee:	4319      	orrs	r1, r3
 8002af0:	0008      	movs	r0, r1
 8002af2:	40d4      	lsrs	r4, r2
 8002af4:	074b      	lsls	r3, r1, #29
 8002af6:	d009      	beq.n	8002b0c <__aeabi_dmul+0x550>
 8002af8:	230f      	movs	r3, #15
 8002afa:	400b      	ands	r3, r1
 8002afc:	2b04      	cmp	r3, #4
 8002afe:	d005      	beq.n	8002b0c <__aeabi_dmul+0x550>
 8002b00:	1d0b      	adds	r3, r1, #4
 8002b02:	428b      	cmp	r3, r1
 8002b04:	4180      	sbcs	r0, r0
 8002b06:	4240      	negs	r0, r0
 8002b08:	1824      	adds	r4, r4, r0
 8002b0a:	0018      	movs	r0, r3
 8002b0c:	0223      	lsls	r3, r4, #8
 8002b0e:	d400      	bmi.n	8002b12 <__aeabi_dmul+0x556>
 8002b10:	e6d6      	b.n	80028c0 <__aeabi_dmul+0x304>
 8002b12:	2301      	movs	r3, #1
 8002b14:	2400      	movs	r4, #0
 8002b16:	2200      	movs	r2, #0
 8002b18:	e5a6      	b.n	8002668 <__aeabi_dmul+0xac>
 8002b1a:	290f      	cmp	r1, #15
 8002b1c:	d1aa      	bne.n	8002a74 <__aeabi_dmul+0x4b8>
 8002b1e:	2380      	movs	r3, #128	@ 0x80
 8002b20:	4652      	mov	r2, sl
 8002b22:	031b      	lsls	r3, r3, #12
 8002b24:	421a      	tst	r2, r3
 8002b26:	d0a9      	beq.n	8002a7c <__aeabi_dmul+0x4c0>
 8002b28:	421c      	tst	r4, r3
 8002b2a:	d1a7      	bne.n	8002a7c <__aeabi_dmul+0x4c0>
 8002b2c:	431c      	orrs	r4, r3
 8002b2e:	9b00      	ldr	r3, [sp, #0]
 8002b30:	0002      	movs	r2, r0
 8002b32:	469b      	mov	fp, r3
 8002b34:	4b03      	ldr	r3, [pc, #12]	@ (8002b44 <__aeabi_dmul+0x588>)
 8002b36:	e597      	b.n	8002668 <__aeabi_dmul+0xac>
 8002b38:	2400      	movs	r4, #0
 8002b3a:	e6c1      	b.n	80028c0 <__aeabi_dmul+0x304>
 8002b3c:	2400      	movs	r4, #0
 8002b3e:	4b01      	ldr	r3, [pc, #4]	@ (8002b44 <__aeabi_dmul+0x588>)
 8002b40:	0022      	movs	r2, r4
 8002b42:	e591      	b.n	8002668 <__aeabi_dmul+0xac>
 8002b44:	000007ff 	.word	0x000007ff
 8002b48:	0000041e 	.word	0x0000041e

08002b4c <__aeabi_dsub>:
 8002b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b4e:	464e      	mov	r6, r9
 8002b50:	4645      	mov	r5, r8
 8002b52:	46de      	mov	lr, fp
 8002b54:	4657      	mov	r7, sl
 8002b56:	b5e0      	push	{r5, r6, r7, lr}
 8002b58:	b085      	sub	sp, #20
 8002b5a:	9000      	str	r0, [sp, #0]
 8002b5c:	9101      	str	r1, [sp, #4]
 8002b5e:	030c      	lsls	r4, r1, #12
 8002b60:	004f      	lsls	r7, r1, #1
 8002b62:	0fce      	lsrs	r6, r1, #31
 8002b64:	0a61      	lsrs	r1, r4, #9
 8002b66:	9c00      	ldr	r4, [sp, #0]
 8002b68:	46b0      	mov	r8, r6
 8002b6a:	0f64      	lsrs	r4, r4, #29
 8002b6c:	430c      	orrs	r4, r1
 8002b6e:	9900      	ldr	r1, [sp, #0]
 8002b70:	0d7f      	lsrs	r7, r7, #21
 8002b72:	00c8      	lsls	r0, r1, #3
 8002b74:	0011      	movs	r1, r2
 8002b76:	001a      	movs	r2, r3
 8002b78:	031b      	lsls	r3, r3, #12
 8002b7a:	469c      	mov	ip, r3
 8002b7c:	9100      	str	r1, [sp, #0]
 8002b7e:	9201      	str	r2, [sp, #4]
 8002b80:	0051      	lsls	r1, r2, #1
 8002b82:	0d4b      	lsrs	r3, r1, #21
 8002b84:	4699      	mov	r9, r3
 8002b86:	9b01      	ldr	r3, [sp, #4]
 8002b88:	9d00      	ldr	r5, [sp, #0]
 8002b8a:	0fd9      	lsrs	r1, r3, #31
 8002b8c:	4663      	mov	r3, ip
 8002b8e:	0f6a      	lsrs	r2, r5, #29
 8002b90:	0a5b      	lsrs	r3, r3, #9
 8002b92:	4313      	orrs	r3, r2
 8002b94:	00ea      	lsls	r2, r5, #3
 8002b96:	4694      	mov	ip, r2
 8002b98:	4693      	mov	fp, r2
 8002b9a:	4ac1      	ldr	r2, [pc, #772]	@ (8002ea0 <__aeabi_dsub+0x354>)
 8002b9c:	9003      	str	r0, [sp, #12]
 8002b9e:	9302      	str	r3, [sp, #8]
 8002ba0:	4591      	cmp	r9, r2
 8002ba2:	d100      	bne.n	8002ba6 <__aeabi_dsub+0x5a>
 8002ba4:	e0cd      	b.n	8002d42 <__aeabi_dsub+0x1f6>
 8002ba6:	2501      	movs	r5, #1
 8002ba8:	4069      	eors	r1, r5
 8002baa:	464d      	mov	r5, r9
 8002bac:	1b7d      	subs	r5, r7, r5
 8002bae:	46aa      	mov	sl, r5
 8002bb0:	428e      	cmp	r6, r1
 8002bb2:	d100      	bne.n	8002bb6 <__aeabi_dsub+0x6a>
 8002bb4:	e080      	b.n	8002cb8 <__aeabi_dsub+0x16c>
 8002bb6:	2d00      	cmp	r5, #0
 8002bb8:	dc00      	bgt.n	8002bbc <__aeabi_dsub+0x70>
 8002bba:	e335      	b.n	8003228 <__aeabi_dsub+0x6dc>
 8002bbc:	4649      	mov	r1, r9
 8002bbe:	2900      	cmp	r1, #0
 8002bc0:	d100      	bne.n	8002bc4 <__aeabi_dsub+0x78>
 8002bc2:	e0df      	b.n	8002d84 <__aeabi_dsub+0x238>
 8002bc4:	4297      	cmp	r7, r2
 8002bc6:	d100      	bne.n	8002bca <__aeabi_dsub+0x7e>
 8002bc8:	e194      	b.n	8002ef4 <__aeabi_dsub+0x3a8>
 8002bca:	4652      	mov	r2, sl
 8002bcc:	2501      	movs	r5, #1
 8002bce:	2a38      	cmp	r2, #56	@ 0x38
 8002bd0:	dc19      	bgt.n	8002c06 <__aeabi_dsub+0xba>
 8002bd2:	2280      	movs	r2, #128	@ 0x80
 8002bd4:	9b02      	ldr	r3, [sp, #8]
 8002bd6:	0412      	lsls	r2, r2, #16
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	9302      	str	r3, [sp, #8]
 8002bdc:	4652      	mov	r2, sl
 8002bde:	2a1f      	cmp	r2, #31
 8002be0:	dd00      	ble.n	8002be4 <__aeabi_dsub+0x98>
 8002be2:	e1e3      	b.n	8002fac <__aeabi_dsub+0x460>
 8002be4:	4653      	mov	r3, sl
 8002be6:	2220      	movs	r2, #32
 8002be8:	4661      	mov	r1, ip
 8002bea:	9d02      	ldr	r5, [sp, #8]
 8002bec:	1ad2      	subs	r2, r2, r3
 8002bee:	4095      	lsls	r5, r2
 8002bf0:	40d9      	lsrs	r1, r3
 8002bf2:	430d      	orrs	r5, r1
 8002bf4:	4661      	mov	r1, ip
 8002bf6:	4091      	lsls	r1, r2
 8002bf8:	000a      	movs	r2, r1
 8002bfa:	1e51      	subs	r1, r2, #1
 8002bfc:	418a      	sbcs	r2, r1
 8002bfe:	4315      	orrs	r5, r2
 8002c00:	9a02      	ldr	r2, [sp, #8]
 8002c02:	40da      	lsrs	r2, r3
 8002c04:	1aa4      	subs	r4, r4, r2
 8002c06:	1b45      	subs	r5, r0, r5
 8002c08:	42a8      	cmp	r0, r5
 8002c0a:	4180      	sbcs	r0, r0
 8002c0c:	4240      	negs	r0, r0
 8002c0e:	1a24      	subs	r4, r4, r0
 8002c10:	0223      	lsls	r3, r4, #8
 8002c12:	d400      	bmi.n	8002c16 <__aeabi_dsub+0xca>
 8002c14:	e13d      	b.n	8002e92 <__aeabi_dsub+0x346>
 8002c16:	0264      	lsls	r4, r4, #9
 8002c18:	0a64      	lsrs	r4, r4, #9
 8002c1a:	2c00      	cmp	r4, #0
 8002c1c:	d100      	bne.n	8002c20 <__aeabi_dsub+0xd4>
 8002c1e:	e147      	b.n	8002eb0 <__aeabi_dsub+0x364>
 8002c20:	0020      	movs	r0, r4
 8002c22:	f000 fcab 	bl	800357c <__clzsi2>
 8002c26:	0003      	movs	r3, r0
 8002c28:	3b08      	subs	r3, #8
 8002c2a:	2120      	movs	r1, #32
 8002c2c:	0028      	movs	r0, r5
 8002c2e:	1aca      	subs	r2, r1, r3
 8002c30:	40d0      	lsrs	r0, r2
 8002c32:	409c      	lsls	r4, r3
 8002c34:	0002      	movs	r2, r0
 8002c36:	409d      	lsls	r5, r3
 8002c38:	4322      	orrs	r2, r4
 8002c3a:	429f      	cmp	r7, r3
 8002c3c:	dd00      	ble.n	8002c40 <__aeabi_dsub+0xf4>
 8002c3e:	e177      	b.n	8002f30 <__aeabi_dsub+0x3e4>
 8002c40:	1bd8      	subs	r0, r3, r7
 8002c42:	3001      	adds	r0, #1
 8002c44:	1a09      	subs	r1, r1, r0
 8002c46:	002c      	movs	r4, r5
 8002c48:	408d      	lsls	r5, r1
 8002c4a:	40c4      	lsrs	r4, r0
 8002c4c:	1e6b      	subs	r3, r5, #1
 8002c4e:	419d      	sbcs	r5, r3
 8002c50:	0013      	movs	r3, r2
 8002c52:	40c2      	lsrs	r2, r0
 8002c54:	408b      	lsls	r3, r1
 8002c56:	4325      	orrs	r5, r4
 8002c58:	2700      	movs	r7, #0
 8002c5a:	0014      	movs	r4, r2
 8002c5c:	431d      	orrs	r5, r3
 8002c5e:	076b      	lsls	r3, r5, #29
 8002c60:	d009      	beq.n	8002c76 <__aeabi_dsub+0x12a>
 8002c62:	230f      	movs	r3, #15
 8002c64:	402b      	ands	r3, r5
 8002c66:	2b04      	cmp	r3, #4
 8002c68:	d005      	beq.n	8002c76 <__aeabi_dsub+0x12a>
 8002c6a:	1d2b      	adds	r3, r5, #4
 8002c6c:	42ab      	cmp	r3, r5
 8002c6e:	41ad      	sbcs	r5, r5
 8002c70:	426d      	negs	r5, r5
 8002c72:	1964      	adds	r4, r4, r5
 8002c74:	001d      	movs	r5, r3
 8002c76:	0223      	lsls	r3, r4, #8
 8002c78:	d400      	bmi.n	8002c7c <__aeabi_dsub+0x130>
 8002c7a:	e140      	b.n	8002efe <__aeabi_dsub+0x3b2>
 8002c7c:	4a88      	ldr	r2, [pc, #544]	@ (8002ea0 <__aeabi_dsub+0x354>)
 8002c7e:	3701      	adds	r7, #1
 8002c80:	4297      	cmp	r7, r2
 8002c82:	d100      	bne.n	8002c86 <__aeabi_dsub+0x13a>
 8002c84:	e101      	b.n	8002e8a <__aeabi_dsub+0x33e>
 8002c86:	2601      	movs	r6, #1
 8002c88:	4643      	mov	r3, r8
 8002c8a:	4986      	ldr	r1, [pc, #536]	@ (8002ea4 <__aeabi_dsub+0x358>)
 8002c8c:	08ed      	lsrs	r5, r5, #3
 8002c8e:	4021      	ands	r1, r4
 8002c90:	074a      	lsls	r2, r1, #29
 8002c92:	432a      	orrs	r2, r5
 8002c94:	057c      	lsls	r4, r7, #21
 8002c96:	024d      	lsls	r5, r1, #9
 8002c98:	0b2d      	lsrs	r5, r5, #12
 8002c9a:	0d64      	lsrs	r4, r4, #21
 8002c9c:	401e      	ands	r6, r3
 8002c9e:	0524      	lsls	r4, r4, #20
 8002ca0:	432c      	orrs	r4, r5
 8002ca2:	07f6      	lsls	r6, r6, #31
 8002ca4:	4334      	orrs	r4, r6
 8002ca6:	0010      	movs	r0, r2
 8002ca8:	0021      	movs	r1, r4
 8002caa:	b005      	add	sp, #20
 8002cac:	bcf0      	pop	{r4, r5, r6, r7}
 8002cae:	46bb      	mov	fp, r7
 8002cb0:	46b2      	mov	sl, r6
 8002cb2:	46a9      	mov	r9, r5
 8002cb4:	46a0      	mov	r8, r4
 8002cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cb8:	2d00      	cmp	r5, #0
 8002cba:	dc00      	bgt.n	8002cbe <__aeabi_dsub+0x172>
 8002cbc:	e2d0      	b.n	8003260 <__aeabi_dsub+0x714>
 8002cbe:	4649      	mov	r1, r9
 8002cc0:	2900      	cmp	r1, #0
 8002cc2:	d000      	beq.n	8002cc6 <__aeabi_dsub+0x17a>
 8002cc4:	e0d4      	b.n	8002e70 <__aeabi_dsub+0x324>
 8002cc6:	4661      	mov	r1, ip
 8002cc8:	9b02      	ldr	r3, [sp, #8]
 8002cca:	4319      	orrs	r1, r3
 8002ccc:	d100      	bne.n	8002cd0 <__aeabi_dsub+0x184>
 8002cce:	e12b      	b.n	8002f28 <__aeabi_dsub+0x3dc>
 8002cd0:	1e69      	subs	r1, r5, #1
 8002cd2:	2d01      	cmp	r5, #1
 8002cd4:	d100      	bne.n	8002cd8 <__aeabi_dsub+0x18c>
 8002cd6:	e1d9      	b.n	800308c <__aeabi_dsub+0x540>
 8002cd8:	4295      	cmp	r5, r2
 8002cda:	d100      	bne.n	8002cde <__aeabi_dsub+0x192>
 8002cdc:	e10a      	b.n	8002ef4 <__aeabi_dsub+0x3a8>
 8002cde:	2501      	movs	r5, #1
 8002ce0:	2938      	cmp	r1, #56	@ 0x38
 8002ce2:	dc17      	bgt.n	8002d14 <__aeabi_dsub+0x1c8>
 8002ce4:	468a      	mov	sl, r1
 8002ce6:	4653      	mov	r3, sl
 8002ce8:	2b1f      	cmp	r3, #31
 8002cea:	dd00      	ble.n	8002cee <__aeabi_dsub+0x1a2>
 8002cec:	e1e7      	b.n	80030be <__aeabi_dsub+0x572>
 8002cee:	2220      	movs	r2, #32
 8002cf0:	1ad2      	subs	r2, r2, r3
 8002cf2:	9b02      	ldr	r3, [sp, #8]
 8002cf4:	4661      	mov	r1, ip
 8002cf6:	4093      	lsls	r3, r2
 8002cf8:	001d      	movs	r5, r3
 8002cfa:	4653      	mov	r3, sl
 8002cfc:	40d9      	lsrs	r1, r3
 8002cfe:	4663      	mov	r3, ip
 8002d00:	4093      	lsls	r3, r2
 8002d02:	001a      	movs	r2, r3
 8002d04:	430d      	orrs	r5, r1
 8002d06:	1e51      	subs	r1, r2, #1
 8002d08:	418a      	sbcs	r2, r1
 8002d0a:	4653      	mov	r3, sl
 8002d0c:	4315      	orrs	r5, r2
 8002d0e:	9a02      	ldr	r2, [sp, #8]
 8002d10:	40da      	lsrs	r2, r3
 8002d12:	18a4      	adds	r4, r4, r2
 8002d14:	182d      	adds	r5, r5, r0
 8002d16:	4285      	cmp	r5, r0
 8002d18:	4180      	sbcs	r0, r0
 8002d1a:	4240      	negs	r0, r0
 8002d1c:	1824      	adds	r4, r4, r0
 8002d1e:	0223      	lsls	r3, r4, #8
 8002d20:	d400      	bmi.n	8002d24 <__aeabi_dsub+0x1d8>
 8002d22:	e0b6      	b.n	8002e92 <__aeabi_dsub+0x346>
 8002d24:	4b5e      	ldr	r3, [pc, #376]	@ (8002ea0 <__aeabi_dsub+0x354>)
 8002d26:	3701      	adds	r7, #1
 8002d28:	429f      	cmp	r7, r3
 8002d2a:	d100      	bne.n	8002d2e <__aeabi_dsub+0x1e2>
 8002d2c:	e0ad      	b.n	8002e8a <__aeabi_dsub+0x33e>
 8002d2e:	2101      	movs	r1, #1
 8002d30:	4b5c      	ldr	r3, [pc, #368]	@ (8002ea4 <__aeabi_dsub+0x358>)
 8002d32:	086a      	lsrs	r2, r5, #1
 8002d34:	401c      	ands	r4, r3
 8002d36:	4029      	ands	r1, r5
 8002d38:	430a      	orrs	r2, r1
 8002d3a:	07e5      	lsls	r5, r4, #31
 8002d3c:	4315      	orrs	r5, r2
 8002d3e:	0864      	lsrs	r4, r4, #1
 8002d40:	e78d      	b.n	8002c5e <__aeabi_dsub+0x112>
 8002d42:	4a59      	ldr	r2, [pc, #356]	@ (8002ea8 <__aeabi_dsub+0x35c>)
 8002d44:	9b02      	ldr	r3, [sp, #8]
 8002d46:	4692      	mov	sl, r2
 8002d48:	4662      	mov	r2, ip
 8002d4a:	44ba      	add	sl, r7
 8002d4c:	431a      	orrs	r2, r3
 8002d4e:	d02c      	beq.n	8002daa <__aeabi_dsub+0x25e>
 8002d50:	428e      	cmp	r6, r1
 8002d52:	d02e      	beq.n	8002db2 <__aeabi_dsub+0x266>
 8002d54:	4652      	mov	r2, sl
 8002d56:	2a00      	cmp	r2, #0
 8002d58:	d060      	beq.n	8002e1c <__aeabi_dsub+0x2d0>
 8002d5a:	2f00      	cmp	r7, #0
 8002d5c:	d100      	bne.n	8002d60 <__aeabi_dsub+0x214>
 8002d5e:	e0db      	b.n	8002f18 <__aeabi_dsub+0x3cc>
 8002d60:	4663      	mov	r3, ip
 8002d62:	000e      	movs	r6, r1
 8002d64:	9c02      	ldr	r4, [sp, #8]
 8002d66:	08d8      	lsrs	r0, r3, #3
 8002d68:	0762      	lsls	r2, r4, #29
 8002d6a:	4302      	orrs	r2, r0
 8002d6c:	08e4      	lsrs	r4, r4, #3
 8002d6e:	0013      	movs	r3, r2
 8002d70:	4323      	orrs	r3, r4
 8002d72:	d100      	bne.n	8002d76 <__aeabi_dsub+0x22a>
 8002d74:	e254      	b.n	8003220 <__aeabi_dsub+0x6d4>
 8002d76:	2580      	movs	r5, #128	@ 0x80
 8002d78:	032d      	lsls	r5, r5, #12
 8002d7a:	4325      	orrs	r5, r4
 8002d7c:	032d      	lsls	r5, r5, #12
 8002d7e:	4c48      	ldr	r4, [pc, #288]	@ (8002ea0 <__aeabi_dsub+0x354>)
 8002d80:	0b2d      	lsrs	r5, r5, #12
 8002d82:	e78c      	b.n	8002c9e <__aeabi_dsub+0x152>
 8002d84:	4661      	mov	r1, ip
 8002d86:	9b02      	ldr	r3, [sp, #8]
 8002d88:	4319      	orrs	r1, r3
 8002d8a:	d100      	bne.n	8002d8e <__aeabi_dsub+0x242>
 8002d8c:	e0cc      	b.n	8002f28 <__aeabi_dsub+0x3dc>
 8002d8e:	0029      	movs	r1, r5
 8002d90:	3901      	subs	r1, #1
 8002d92:	2d01      	cmp	r5, #1
 8002d94:	d100      	bne.n	8002d98 <__aeabi_dsub+0x24c>
 8002d96:	e188      	b.n	80030aa <__aeabi_dsub+0x55e>
 8002d98:	4295      	cmp	r5, r2
 8002d9a:	d100      	bne.n	8002d9e <__aeabi_dsub+0x252>
 8002d9c:	e0aa      	b.n	8002ef4 <__aeabi_dsub+0x3a8>
 8002d9e:	2501      	movs	r5, #1
 8002da0:	2938      	cmp	r1, #56	@ 0x38
 8002da2:	dd00      	ble.n	8002da6 <__aeabi_dsub+0x25a>
 8002da4:	e72f      	b.n	8002c06 <__aeabi_dsub+0xba>
 8002da6:	468a      	mov	sl, r1
 8002da8:	e718      	b.n	8002bdc <__aeabi_dsub+0x90>
 8002daa:	2201      	movs	r2, #1
 8002dac:	4051      	eors	r1, r2
 8002dae:	428e      	cmp	r6, r1
 8002db0:	d1d0      	bne.n	8002d54 <__aeabi_dsub+0x208>
 8002db2:	4653      	mov	r3, sl
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d100      	bne.n	8002dba <__aeabi_dsub+0x26e>
 8002db8:	e0be      	b.n	8002f38 <__aeabi_dsub+0x3ec>
 8002dba:	2f00      	cmp	r7, #0
 8002dbc:	d000      	beq.n	8002dc0 <__aeabi_dsub+0x274>
 8002dbe:	e138      	b.n	8003032 <__aeabi_dsub+0x4e6>
 8002dc0:	46ca      	mov	sl, r9
 8002dc2:	0022      	movs	r2, r4
 8002dc4:	4302      	orrs	r2, r0
 8002dc6:	d100      	bne.n	8002dca <__aeabi_dsub+0x27e>
 8002dc8:	e1e2      	b.n	8003190 <__aeabi_dsub+0x644>
 8002dca:	4653      	mov	r3, sl
 8002dcc:	1e59      	subs	r1, r3, #1
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d100      	bne.n	8002dd4 <__aeabi_dsub+0x288>
 8002dd2:	e20d      	b.n	80031f0 <__aeabi_dsub+0x6a4>
 8002dd4:	4a32      	ldr	r2, [pc, #200]	@ (8002ea0 <__aeabi_dsub+0x354>)
 8002dd6:	4592      	cmp	sl, r2
 8002dd8:	d100      	bne.n	8002ddc <__aeabi_dsub+0x290>
 8002dda:	e1d2      	b.n	8003182 <__aeabi_dsub+0x636>
 8002ddc:	2701      	movs	r7, #1
 8002dde:	2938      	cmp	r1, #56	@ 0x38
 8002de0:	dc13      	bgt.n	8002e0a <__aeabi_dsub+0x2be>
 8002de2:	291f      	cmp	r1, #31
 8002de4:	dd00      	ble.n	8002de8 <__aeabi_dsub+0x29c>
 8002de6:	e1ee      	b.n	80031c6 <__aeabi_dsub+0x67a>
 8002de8:	2220      	movs	r2, #32
 8002dea:	9b02      	ldr	r3, [sp, #8]
 8002dec:	1a52      	subs	r2, r2, r1
 8002dee:	0025      	movs	r5, r4
 8002df0:	0007      	movs	r7, r0
 8002df2:	469a      	mov	sl, r3
 8002df4:	40cc      	lsrs	r4, r1
 8002df6:	4090      	lsls	r0, r2
 8002df8:	4095      	lsls	r5, r2
 8002dfa:	40cf      	lsrs	r7, r1
 8002dfc:	44a2      	add	sl, r4
 8002dfe:	1e42      	subs	r2, r0, #1
 8002e00:	4190      	sbcs	r0, r2
 8002e02:	4653      	mov	r3, sl
 8002e04:	432f      	orrs	r7, r5
 8002e06:	4307      	orrs	r7, r0
 8002e08:	9302      	str	r3, [sp, #8]
 8002e0a:	003d      	movs	r5, r7
 8002e0c:	4465      	add	r5, ip
 8002e0e:	4565      	cmp	r5, ip
 8002e10:	4192      	sbcs	r2, r2
 8002e12:	9b02      	ldr	r3, [sp, #8]
 8002e14:	4252      	negs	r2, r2
 8002e16:	464f      	mov	r7, r9
 8002e18:	18d4      	adds	r4, r2, r3
 8002e1a:	e780      	b.n	8002d1e <__aeabi_dsub+0x1d2>
 8002e1c:	4a23      	ldr	r2, [pc, #140]	@ (8002eac <__aeabi_dsub+0x360>)
 8002e1e:	1c7d      	adds	r5, r7, #1
 8002e20:	4215      	tst	r5, r2
 8002e22:	d000      	beq.n	8002e26 <__aeabi_dsub+0x2da>
 8002e24:	e0aa      	b.n	8002f7c <__aeabi_dsub+0x430>
 8002e26:	4662      	mov	r2, ip
 8002e28:	0025      	movs	r5, r4
 8002e2a:	9b02      	ldr	r3, [sp, #8]
 8002e2c:	4305      	orrs	r5, r0
 8002e2e:	431a      	orrs	r2, r3
 8002e30:	2f00      	cmp	r7, #0
 8002e32:	d000      	beq.n	8002e36 <__aeabi_dsub+0x2ea>
 8002e34:	e0f5      	b.n	8003022 <__aeabi_dsub+0x4d6>
 8002e36:	2d00      	cmp	r5, #0
 8002e38:	d100      	bne.n	8002e3c <__aeabi_dsub+0x2f0>
 8002e3a:	e16b      	b.n	8003114 <__aeabi_dsub+0x5c8>
 8002e3c:	2a00      	cmp	r2, #0
 8002e3e:	d100      	bne.n	8002e42 <__aeabi_dsub+0x2f6>
 8002e40:	e152      	b.n	80030e8 <__aeabi_dsub+0x59c>
 8002e42:	4663      	mov	r3, ip
 8002e44:	1ac5      	subs	r5, r0, r3
 8002e46:	9b02      	ldr	r3, [sp, #8]
 8002e48:	1ae2      	subs	r2, r4, r3
 8002e4a:	42a8      	cmp	r0, r5
 8002e4c:	419b      	sbcs	r3, r3
 8002e4e:	425b      	negs	r3, r3
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	021a      	lsls	r2, r3, #8
 8002e54:	d400      	bmi.n	8002e58 <__aeabi_dsub+0x30c>
 8002e56:	e1d5      	b.n	8003204 <__aeabi_dsub+0x6b8>
 8002e58:	4663      	mov	r3, ip
 8002e5a:	1a1d      	subs	r5, r3, r0
 8002e5c:	45ac      	cmp	ip, r5
 8002e5e:	4192      	sbcs	r2, r2
 8002e60:	2601      	movs	r6, #1
 8002e62:	9b02      	ldr	r3, [sp, #8]
 8002e64:	4252      	negs	r2, r2
 8002e66:	1b1c      	subs	r4, r3, r4
 8002e68:	4688      	mov	r8, r1
 8002e6a:	1aa4      	subs	r4, r4, r2
 8002e6c:	400e      	ands	r6, r1
 8002e6e:	e6f6      	b.n	8002c5e <__aeabi_dsub+0x112>
 8002e70:	4297      	cmp	r7, r2
 8002e72:	d03f      	beq.n	8002ef4 <__aeabi_dsub+0x3a8>
 8002e74:	4652      	mov	r2, sl
 8002e76:	2501      	movs	r5, #1
 8002e78:	2a38      	cmp	r2, #56	@ 0x38
 8002e7a:	dd00      	ble.n	8002e7e <__aeabi_dsub+0x332>
 8002e7c:	e74a      	b.n	8002d14 <__aeabi_dsub+0x1c8>
 8002e7e:	2280      	movs	r2, #128	@ 0x80
 8002e80:	9b02      	ldr	r3, [sp, #8]
 8002e82:	0412      	lsls	r2, r2, #16
 8002e84:	4313      	orrs	r3, r2
 8002e86:	9302      	str	r3, [sp, #8]
 8002e88:	e72d      	b.n	8002ce6 <__aeabi_dsub+0x19a>
 8002e8a:	003c      	movs	r4, r7
 8002e8c:	2500      	movs	r5, #0
 8002e8e:	2200      	movs	r2, #0
 8002e90:	e705      	b.n	8002c9e <__aeabi_dsub+0x152>
 8002e92:	2307      	movs	r3, #7
 8002e94:	402b      	ands	r3, r5
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d000      	beq.n	8002e9c <__aeabi_dsub+0x350>
 8002e9a:	e6e2      	b.n	8002c62 <__aeabi_dsub+0x116>
 8002e9c:	e06b      	b.n	8002f76 <__aeabi_dsub+0x42a>
 8002e9e:	46c0      	nop			@ (mov r8, r8)
 8002ea0:	000007ff 	.word	0x000007ff
 8002ea4:	ff7fffff 	.word	0xff7fffff
 8002ea8:	fffff801 	.word	0xfffff801
 8002eac:	000007fe 	.word	0x000007fe
 8002eb0:	0028      	movs	r0, r5
 8002eb2:	f000 fb63 	bl	800357c <__clzsi2>
 8002eb6:	0003      	movs	r3, r0
 8002eb8:	3318      	adds	r3, #24
 8002eba:	2b1f      	cmp	r3, #31
 8002ebc:	dc00      	bgt.n	8002ec0 <__aeabi_dsub+0x374>
 8002ebe:	e6b4      	b.n	8002c2a <__aeabi_dsub+0xde>
 8002ec0:	002a      	movs	r2, r5
 8002ec2:	3808      	subs	r0, #8
 8002ec4:	4082      	lsls	r2, r0
 8002ec6:	429f      	cmp	r7, r3
 8002ec8:	dd00      	ble.n	8002ecc <__aeabi_dsub+0x380>
 8002eca:	e0b9      	b.n	8003040 <__aeabi_dsub+0x4f4>
 8002ecc:	1bdb      	subs	r3, r3, r7
 8002ece:	1c58      	adds	r0, r3, #1
 8002ed0:	281f      	cmp	r0, #31
 8002ed2:	dc00      	bgt.n	8002ed6 <__aeabi_dsub+0x38a>
 8002ed4:	e1a0      	b.n	8003218 <__aeabi_dsub+0x6cc>
 8002ed6:	0015      	movs	r5, r2
 8002ed8:	3b1f      	subs	r3, #31
 8002eda:	40dd      	lsrs	r5, r3
 8002edc:	2820      	cmp	r0, #32
 8002ede:	d005      	beq.n	8002eec <__aeabi_dsub+0x3a0>
 8002ee0:	2340      	movs	r3, #64	@ 0x40
 8002ee2:	1a1b      	subs	r3, r3, r0
 8002ee4:	409a      	lsls	r2, r3
 8002ee6:	1e53      	subs	r3, r2, #1
 8002ee8:	419a      	sbcs	r2, r3
 8002eea:	4315      	orrs	r5, r2
 8002eec:	2307      	movs	r3, #7
 8002eee:	2700      	movs	r7, #0
 8002ef0:	402b      	ands	r3, r5
 8002ef2:	e7d0      	b.n	8002e96 <__aeabi_dsub+0x34a>
 8002ef4:	08c0      	lsrs	r0, r0, #3
 8002ef6:	0762      	lsls	r2, r4, #29
 8002ef8:	4302      	orrs	r2, r0
 8002efa:	08e4      	lsrs	r4, r4, #3
 8002efc:	e737      	b.n	8002d6e <__aeabi_dsub+0x222>
 8002efe:	08ea      	lsrs	r2, r5, #3
 8002f00:	0763      	lsls	r3, r4, #29
 8002f02:	431a      	orrs	r2, r3
 8002f04:	4bd3      	ldr	r3, [pc, #844]	@ (8003254 <__aeabi_dsub+0x708>)
 8002f06:	08e4      	lsrs	r4, r4, #3
 8002f08:	429f      	cmp	r7, r3
 8002f0a:	d100      	bne.n	8002f0e <__aeabi_dsub+0x3c2>
 8002f0c:	e72f      	b.n	8002d6e <__aeabi_dsub+0x222>
 8002f0e:	0324      	lsls	r4, r4, #12
 8002f10:	0b25      	lsrs	r5, r4, #12
 8002f12:	057c      	lsls	r4, r7, #21
 8002f14:	0d64      	lsrs	r4, r4, #21
 8002f16:	e6c2      	b.n	8002c9e <__aeabi_dsub+0x152>
 8002f18:	46ca      	mov	sl, r9
 8002f1a:	0022      	movs	r2, r4
 8002f1c:	4302      	orrs	r2, r0
 8002f1e:	d158      	bne.n	8002fd2 <__aeabi_dsub+0x486>
 8002f20:	4663      	mov	r3, ip
 8002f22:	000e      	movs	r6, r1
 8002f24:	9c02      	ldr	r4, [sp, #8]
 8002f26:	9303      	str	r3, [sp, #12]
 8002f28:	9b03      	ldr	r3, [sp, #12]
 8002f2a:	4657      	mov	r7, sl
 8002f2c:	08da      	lsrs	r2, r3, #3
 8002f2e:	e7e7      	b.n	8002f00 <__aeabi_dsub+0x3b4>
 8002f30:	4cc9      	ldr	r4, [pc, #804]	@ (8003258 <__aeabi_dsub+0x70c>)
 8002f32:	1aff      	subs	r7, r7, r3
 8002f34:	4014      	ands	r4, r2
 8002f36:	e692      	b.n	8002c5e <__aeabi_dsub+0x112>
 8002f38:	4dc8      	ldr	r5, [pc, #800]	@ (800325c <__aeabi_dsub+0x710>)
 8002f3a:	1c7a      	adds	r2, r7, #1
 8002f3c:	422a      	tst	r2, r5
 8002f3e:	d000      	beq.n	8002f42 <__aeabi_dsub+0x3f6>
 8002f40:	e084      	b.n	800304c <__aeabi_dsub+0x500>
 8002f42:	0022      	movs	r2, r4
 8002f44:	4302      	orrs	r2, r0
 8002f46:	2f00      	cmp	r7, #0
 8002f48:	d000      	beq.n	8002f4c <__aeabi_dsub+0x400>
 8002f4a:	e0ef      	b.n	800312c <__aeabi_dsub+0x5e0>
 8002f4c:	2a00      	cmp	r2, #0
 8002f4e:	d100      	bne.n	8002f52 <__aeabi_dsub+0x406>
 8002f50:	e0e5      	b.n	800311e <__aeabi_dsub+0x5d2>
 8002f52:	4662      	mov	r2, ip
 8002f54:	9902      	ldr	r1, [sp, #8]
 8002f56:	430a      	orrs	r2, r1
 8002f58:	d100      	bne.n	8002f5c <__aeabi_dsub+0x410>
 8002f5a:	e0c5      	b.n	80030e8 <__aeabi_dsub+0x59c>
 8002f5c:	4663      	mov	r3, ip
 8002f5e:	18c5      	adds	r5, r0, r3
 8002f60:	468c      	mov	ip, r1
 8002f62:	4285      	cmp	r5, r0
 8002f64:	4180      	sbcs	r0, r0
 8002f66:	4464      	add	r4, ip
 8002f68:	4240      	negs	r0, r0
 8002f6a:	1824      	adds	r4, r4, r0
 8002f6c:	0223      	lsls	r3, r4, #8
 8002f6e:	d502      	bpl.n	8002f76 <__aeabi_dsub+0x42a>
 8002f70:	4bb9      	ldr	r3, [pc, #740]	@ (8003258 <__aeabi_dsub+0x70c>)
 8002f72:	3701      	adds	r7, #1
 8002f74:	401c      	ands	r4, r3
 8002f76:	46ba      	mov	sl, r7
 8002f78:	9503      	str	r5, [sp, #12]
 8002f7a:	e7d5      	b.n	8002f28 <__aeabi_dsub+0x3dc>
 8002f7c:	4662      	mov	r2, ip
 8002f7e:	1a85      	subs	r5, r0, r2
 8002f80:	42a8      	cmp	r0, r5
 8002f82:	4192      	sbcs	r2, r2
 8002f84:	4252      	negs	r2, r2
 8002f86:	4691      	mov	r9, r2
 8002f88:	9b02      	ldr	r3, [sp, #8]
 8002f8a:	1ae3      	subs	r3, r4, r3
 8002f8c:	001a      	movs	r2, r3
 8002f8e:	464b      	mov	r3, r9
 8002f90:	1ad2      	subs	r2, r2, r3
 8002f92:	0013      	movs	r3, r2
 8002f94:	4691      	mov	r9, r2
 8002f96:	021a      	lsls	r2, r3, #8
 8002f98:	d46c      	bmi.n	8003074 <__aeabi_dsub+0x528>
 8002f9a:	464a      	mov	r2, r9
 8002f9c:	464c      	mov	r4, r9
 8002f9e:	432a      	orrs	r2, r5
 8002fa0:	d000      	beq.n	8002fa4 <__aeabi_dsub+0x458>
 8002fa2:	e63a      	b.n	8002c1a <__aeabi_dsub+0xce>
 8002fa4:	2600      	movs	r6, #0
 8002fa6:	2400      	movs	r4, #0
 8002fa8:	2500      	movs	r5, #0
 8002faa:	e678      	b.n	8002c9e <__aeabi_dsub+0x152>
 8002fac:	9902      	ldr	r1, [sp, #8]
 8002fae:	4653      	mov	r3, sl
 8002fb0:	000d      	movs	r5, r1
 8002fb2:	3a20      	subs	r2, #32
 8002fb4:	40d5      	lsrs	r5, r2
 8002fb6:	2b20      	cmp	r3, #32
 8002fb8:	d006      	beq.n	8002fc8 <__aeabi_dsub+0x47c>
 8002fba:	2240      	movs	r2, #64	@ 0x40
 8002fbc:	1ad2      	subs	r2, r2, r3
 8002fbe:	000b      	movs	r3, r1
 8002fc0:	4093      	lsls	r3, r2
 8002fc2:	4662      	mov	r2, ip
 8002fc4:	431a      	orrs	r2, r3
 8002fc6:	4693      	mov	fp, r2
 8002fc8:	465b      	mov	r3, fp
 8002fca:	1e5a      	subs	r2, r3, #1
 8002fcc:	4193      	sbcs	r3, r2
 8002fce:	431d      	orrs	r5, r3
 8002fd0:	e619      	b.n	8002c06 <__aeabi_dsub+0xba>
 8002fd2:	4653      	mov	r3, sl
 8002fd4:	1e5a      	subs	r2, r3, #1
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d100      	bne.n	8002fdc <__aeabi_dsub+0x490>
 8002fda:	e0c6      	b.n	800316a <__aeabi_dsub+0x61e>
 8002fdc:	4e9d      	ldr	r6, [pc, #628]	@ (8003254 <__aeabi_dsub+0x708>)
 8002fde:	45b2      	cmp	sl, r6
 8002fe0:	d100      	bne.n	8002fe4 <__aeabi_dsub+0x498>
 8002fe2:	e6bd      	b.n	8002d60 <__aeabi_dsub+0x214>
 8002fe4:	4688      	mov	r8, r1
 8002fe6:	000e      	movs	r6, r1
 8002fe8:	2501      	movs	r5, #1
 8002fea:	2a38      	cmp	r2, #56	@ 0x38
 8002fec:	dc10      	bgt.n	8003010 <__aeabi_dsub+0x4c4>
 8002fee:	2a1f      	cmp	r2, #31
 8002ff0:	dc7f      	bgt.n	80030f2 <__aeabi_dsub+0x5a6>
 8002ff2:	2120      	movs	r1, #32
 8002ff4:	0025      	movs	r5, r4
 8002ff6:	1a89      	subs	r1, r1, r2
 8002ff8:	0007      	movs	r7, r0
 8002ffa:	4088      	lsls	r0, r1
 8002ffc:	408d      	lsls	r5, r1
 8002ffe:	40d7      	lsrs	r7, r2
 8003000:	40d4      	lsrs	r4, r2
 8003002:	1e41      	subs	r1, r0, #1
 8003004:	4188      	sbcs	r0, r1
 8003006:	9b02      	ldr	r3, [sp, #8]
 8003008:	433d      	orrs	r5, r7
 800300a:	1b1b      	subs	r3, r3, r4
 800300c:	4305      	orrs	r5, r0
 800300e:	9302      	str	r3, [sp, #8]
 8003010:	4662      	mov	r2, ip
 8003012:	1b55      	subs	r5, r2, r5
 8003014:	45ac      	cmp	ip, r5
 8003016:	4192      	sbcs	r2, r2
 8003018:	9b02      	ldr	r3, [sp, #8]
 800301a:	4252      	negs	r2, r2
 800301c:	464f      	mov	r7, r9
 800301e:	1a9c      	subs	r4, r3, r2
 8003020:	e5f6      	b.n	8002c10 <__aeabi_dsub+0xc4>
 8003022:	2d00      	cmp	r5, #0
 8003024:	d000      	beq.n	8003028 <__aeabi_dsub+0x4dc>
 8003026:	e0b7      	b.n	8003198 <__aeabi_dsub+0x64c>
 8003028:	2a00      	cmp	r2, #0
 800302a:	d100      	bne.n	800302e <__aeabi_dsub+0x4e2>
 800302c:	e0f0      	b.n	8003210 <__aeabi_dsub+0x6c4>
 800302e:	2601      	movs	r6, #1
 8003030:	400e      	ands	r6, r1
 8003032:	4663      	mov	r3, ip
 8003034:	9802      	ldr	r0, [sp, #8]
 8003036:	08d9      	lsrs	r1, r3, #3
 8003038:	0742      	lsls	r2, r0, #29
 800303a:	430a      	orrs	r2, r1
 800303c:	08c4      	lsrs	r4, r0, #3
 800303e:	e696      	b.n	8002d6e <__aeabi_dsub+0x222>
 8003040:	4c85      	ldr	r4, [pc, #532]	@ (8003258 <__aeabi_dsub+0x70c>)
 8003042:	1aff      	subs	r7, r7, r3
 8003044:	4014      	ands	r4, r2
 8003046:	0762      	lsls	r2, r4, #29
 8003048:	08e4      	lsrs	r4, r4, #3
 800304a:	e760      	b.n	8002f0e <__aeabi_dsub+0x3c2>
 800304c:	4981      	ldr	r1, [pc, #516]	@ (8003254 <__aeabi_dsub+0x708>)
 800304e:	428a      	cmp	r2, r1
 8003050:	d100      	bne.n	8003054 <__aeabi_dsub+0x508>
 8003052:	e0c9      	b.n	80031e8 <__aeabi_dsub+0x69c>
 8003054:	4663      	mov	r3, ip
 8003056:	18c1      	adds	r1, r0, r3
 8003058:	4281      	cmp	r1, r0
 800305a:	4180      	sbcs	r0, r0
 800305c:	9b02      	ldr	r3, [sp, #8]
 800305e:	4240      	negs	r0, r0
 8003060:	18e3      	adds	r3, r4, r3
 8003062:	181b      	adds	r3, r3, r0
 8003064:	07dd      	lsls	r5, r3, #31
 8003066:	085c      	lsrs	r4, r3, #1
 8003068:	2307      	movs	r3, #7
 800306a:	0849      	lsrs	r1, r1, #1
 800306c:	430d      	orrs	r5, r1
 800306e:	0017      	movs	r7, r2
 8003070:	402b      	ands	r3, r5
 8003072:	e710      	b.n	8002e96 <__aeabi_dsub+0x34a>
 8003074:	4663      	mov	r3, ip
 8003076:	1a1d      	subs	r5, r3, r0
 8003078:	45ac      	cmp	ip, r5
 800307a:	4192      	sbcs	r2, r2
 800307c:	2601      	movs	r6, #1
 800307e:	9b02      	ldr	r3, [sp, #8]
 8003080:	4252      	negs	r2, r2
 8003082:	1b1c      	subs	r4, r3, r4
 8003084:	4688      	mov	r8, r1
 8003086:	1aa4      	subs	r4, r4, r2
 8003088:	400e      	ands	r6, r1
 800308a:	e5c6      	b.n	8002c1a <__aeabi_dsub+0xce>
 800308c:	4663      	mov	r3, ip
 800308e:	18c5      	adds	r5, r0, r3
 8003090:	9b02      	ldr	r3, [sp, #8]
 8003092:	4285      	cmp	r5, r0
 8003094:	4180      	sbcs	r0, r0
 8003096:	469c      	mov	ip, r3
 8003098:	4240      	negs	r0, r0
 800309a:	4464      	add	r4, ip
 800309c:	1824      	adds	r4, r4, r0
 800309e:	2701      	movs	r7, #1
 80030a0:	0223      	lsls	r3, r4, #8
 80030a2:	d400      	bmi.n	80030a6 <__aeabi_dsub+0x55a>
 80030a4:	e6f5      	b.n	8002e92 <__aeabi_dsub+0x346>
 80030a6:	2702      	movs	r7, #2
 80030a8:	e641      	b.n	8002d2e <__aeabi_dsub+0x1e2>
 80030aa:	4663      	mov	r3, ip
 80030ac:	1ac5      	subs	r5, r0, r3
 80030ae:	42a8      	cmp	r0, r5
 80030b0:	4180      	sbcs	r0, r0
 80030b2:	9b02      	ldr	r3, [sp, #8]
 80030b4:	4240      	negs	r0, r0
 80030b6:	1ae4      	subs	r4, r4, r3
 80030b8:	2701      	movs	r7, #1
 80030ba:	1a24      	subs	r4, r4, r0
 80030bc:	e5a8      	b.n	8002c10 <__aeabi_dsub+0xc4>
 80030be:	9d02      	ldr	r5, [sp, #8]
 80030c0:	4652      	mov	r2, sl
 80030c2:	002b      	movs	r3, r5
 80030c4:	3a20      	subs	r2, #32
 80030c6:	40d3      	lsrs	r3, r2
 80030c8:	0019      	movs	r1, r3
 80030ca:	4653      	mov	r3, sl
 80030cc:	2b20      	cmp	r3, #32
 80030ce:	d006      	beq.n	80030de <__aeabi_dsub+0x592>
 80030d0:	2240      	movs	r2, #64	@ 0x40
 80030d2:	1ad2      	subs	r2, r2, r3
 80030d4:	002b      	movs	r3, r5
 80030d6:	4093      	lsls	r3, r2
 80030d8:	4662      	mov	r2, ip
 80030da:	431a      	orrs	r2, r3
 80030dc:	4693      	mov	fp, r2
 80030de:	465d      	mov	r5, fp
 80030e0:	1e6b      	subs	r3, r5, #1
 80030e2:	419d      	sbcs	r5, r3
 80030e4:	430d      	orrs	r5, r1
 80030e6:	e615      	b.n	8002d14 <__aeabi_dsub+0x1c8>
 80030e8:	0762      	lsls	r2, r4, #29
 80030ea:	08c0      	lsrs	r0, r0, #3
 80030ec:	4302      	orrs	r2, r0
 80030ee:	08e4      	lsrs	r4, r4, #3
 80030f0:	e70d      	b.n	8002f0e <__aeabi_dsub+0x3c2>
 80030f2:	0011      	movs	r1, r2
 80030f4:	0027      	movs	r7, r4
 80030f6:	3920      	subs	r1, #32
 80030f8:	40cf      	lsrs	r7, r1
 80030fa:	2a20      	cmp	r2, #32
 80030fc:	d005      	beq.n	800310a <__aeabi_dsub+0x5be>
 80030fe:	2140      	movs	r1, #64	@ 0x40
 8003100:	1a8a      	subs	r2, r1, r2
 8003102:	4094      	lsls	r4, r2
 8003104:	0025      	movs	r5, r4
 8003106:	4305      	orrs	r5, r0
 8003108:	9503      	str	r5, [sp, #12]
 800310a:	9d03      	ldr	r5, [sp, #12]
 800310c:	1e6a      	subs	r2, r5, #1
 800310e:	4195      	sbcs	r5, r2
 8003110:	433d      	orrs	r5, r7
 8003112:	e77d      	b.n	8003010 <__aeabi_dsub+0x4c4>
 8003114:	2a00      	cmp	r2, #0
 8003116:	d100      	bne.n	800311a <__aeabi_dsub+0x5ce>
 8003118:	e744      	b.n	8002fa4 <__aeabi_dsub+0x458>
 800311a:	2601      	movs	r6, #1
 800311c:	400e      	ands	r6, r1
 800311e:	4663      	mov	r3, ip
 8003120:	08d9      	lsrs	r1, r3, #3
 8003122:	9b02      	ldr	r3, [sp, #8]
 8003124:	075a      	lsls	r2, r3, #29
 8003126:	430a      	orrs	r2, r1
 8003128:	08dc      	lsrs	r4, r3, #3
 800312a:	e6f0      	b.n	8002f0e <__aeabi_dsub+0x3c2>
 800312c:	2a00      	cmp	r2, #0
 800312e:	d028      	beq.n	8003182 <__aeabi_dsub+0x636>
 8003130:	4662      	mov	r2, ip
 8003132:	9f02      	ldr	r7, [sp, #8]
 8003134:	08c0      	lsrs	r0, r0, #3
 8003136:	433a      	orrs	r2, r7
 8003138:	d100      	bne.n	800313c <__aeabi_dsub+0x5f0>
 800313a:	e6dc      	b.n	8002ef6 <__aeabi_dsub+0x3aa>
 800313c:	0762      	lsls	r2, r4, #29
 800313e:	4310      	orrs	r0, r2
 8003140:	2280      	movs	r2, #128	@ 0x80
 8003142:	08e4      	lsrs	r4, r4, #3
 8003144:	0312      	lsls	r2, r2, #12
 8003146:	4214      	tst	r4, r2
 8003148:	d009      	beq.n	800315e <__aeabi_dsub+0x612>
 800314a:	08fd      	lsrs	r5, r7, #3
 800314c:	4215      	tst	r5, r2
 800314e:	d106      	bne.n	800315e <__aeabi_dsub+0x612>
 8003150:	4663      	mov	r3, ip
 8003152:	2601      	movs	r6, #1
 8003154:	002c      	movs	r4, r5
 8003156:	08d8      	lsrs	r0, r3, #3
 8003158:	077b      	lsls	r3, r7, #29
 800315a:	4318      	orrs	r0, r3
 800315c:	400e      	ands	r6, r1
 800315e:	0f42      	lsrs	r2, r0, #29
 8003160:	00c0      	lsls	r0, r0, #3
 8003162:	08c0      	lsrs	r0, r0, #3
 8003164:	0752      	lsls	r2, r2, #29
 8003166:	4302      	orrs	r2, r0
 8003168:	e601      	b.n	8002d6e <__aeabi_dsub+0x222>
 800316a:	4663      	mov	r3, ip
 800316c:	1a1d      	subs	r5, r3, r0
 800316e:	45ac      	cmp	ip, r5
 8003170:	4192      	sbcs	r2, r2
 8003172:	9b02      	ldr	r3, [sp, #8]
 8003174:	4252      	negs	r2, r2
 8003176:	1b1c      	subs	r4, r3, r4
 8003178:	000e      	movs	r6, r1
 800317a:	4688      	mov	r8, r1
 800317c:	2701      	movs	r7, #1
 800317e:	1aa4      	subs	r4, r4, r2
 8003180:	e546      	b.n	8002c10 <__aeabi_dsub+0xc4>
 8003182:	4663      	mov	r3, ip
 8003184:	08d9      	lsrs	r1, r3, #3
 8003186:	9b02      	ldr	r3, [sp, #8]
 8003188:	075a      	lsls	r2, r3, #29
 800318a:	430a      	orrs	r2, r1
 800318c:	08dc      	lsrs	r4, r3, #3
 800318e:	e5ee      	b.n	8002d6e <__aeabi_dsub+0x222>
 8003190:	4663      	mov	r3, ip
 8003192:	9c02      	ldr	r4, [sp, #8]
 8003194:	9303      	str	r3, [sp, #12]
 8003196:	e6c7      	b.n	8002f28 <__aeabi_dsub+0x3dc>
 8003198:	08c0      	lsrs	r0, r0, #3
 800319a:	2a00      	cmp	r2, #0
 800319c:	d100      	bne.n	80031a0 <__aeabi_dsub+0x654>
 800319e:	e6aa      	b.n	8002ef6 <__aeabi_dsub+0x3aa>
 80031a0:	0762      	lsls	r2, r4, #29
 80031a2:	4310      	orrs	r0, r2
 80031a4:	2280      	movs	r2, #128	@ 0x80
 80031a6:	08e4      	lsrs	r4, r4, #3
 80031a8:	0312      	lsls	r2, r2, #12
 80031aa:	4214      	tst	r4, r2
 80031ac:	d0d7      	beq.n	800315e <__aeabi_dsub+0x612>
 80031ae:	9f02      	ldr	r7, [sp, #8]
 80031b0:	08fd      	lsrs	r5, r7, #3
 80031b2:	4215      	tst	r5, r2
 80031b4:	d1d3      	bne.n	800315e <__aeabi_dsub+0x612>
 80031b6:	4663      	mov	r3, ip
 80031b8:	2601      	movs	r6, #1
 80031ba:	08d8      	lsrs	r0, r3, #3
 80031bc:	077b      	lsls	r3, r7, #29
 80031be:	002c      	movs	r4, r5
 80031c0:	4318      	orrs	r0, r3
 80031c2:	400e      	ands	r6, r1
 80031c4:	e7cb      	b.n	800315e <__aeabi_dsub+0x612>
 80031c6:	000a      	movs	r2, r1
 80031c8:	0027      	movs	r7, r4
 80031ca:	3a20      	subs	r2, #32
 80031cc:	40d7      	lsrs	r7, r2
 80031ce:	2920      	cmp	r1, #32
 80031d0:	d005      	beq.n	80031de <__aeabi_dsub+0x692>
 80031d2:	2240      	movs	r2, #64	@ 0x40
 80031d4:	1a52      	subs	r2, r2, r1
 80031d6:	4094      	lsls	r4, r2
 80031d8:	0025      	movs	r5, r4
 80031da:	4305      	orrs	r5, r0
 80031dc:	9503      	str	r5, [sp, #12]
 80031de:	9d03      	ldr	r5, [sp, #12]
 80031e0:	1e6a      	subs	r2, r5, #1
 80031e2:	4195      	sbcs	r5, r2
 80031e4:	432f      	orrs	r7, r5
 80031e6:	e610      	b.n	8002e0a <__aeabi_dsub+0x2be>
 80031e8:	0014      	movs	r4, r2
 80031ea:	2500      	movs	r5, #0
 80031ec:	2200      	movs	r2, #0
 80031ee:	e556      	b.n	8002c9e <__aeabi_dsub+0x152>
 80031f0:	9b02      	ldr	r3, [sp, #8]
 80031f2:	4460      	add	r0, ip
 80031f4:	4699      	mov	r9, r3
 80031f6:	4560      	cmp	r0, ip
 80031f8:	4192      	sbcs	r2, r2
 80031fa:	444c      	add	r4, r9
 80031fc:	4252      	negs	r2, r2
 80031fe:	0005      	movs	r5, r0
 8003200:	18a4      	adds	r4, r4, r2
 8003202:	e74c      	b.n	800309e <__aeabi_dsub+0x552>
 8003204:	001a      	movs	r2, r3
 8003206:	001c      	movs	r4, r3
 8003208:	432a      	orrs	r2, r5
 800320a:	d000      	beq.n	800320e <__aeabi_dsub+0x6c2>
 800320c:	e6b3      	b.n	8002f76 <__aeabi_dsub+0x42a>
 800320e:	e6c9      	b.n	8002fa4 <__aeabi_dsub+0x458>
 8003210:	2480      	movs	r4, #128	@ 0x80
 8003212:	2600      	movs	r6, #0
 8003214:	0324      	lsls	r4, r4, #12
 8003216:	e5ae      	b.n	8002d76 <__aeabi_dsub+0x22a>
 8003218:	2120      	movs	r1, #32
 800321a:	2500      	movs	r5, #0
 800321c:	1a09      	subs	r1, r1, r0
 800321e:	e517      	b.n	8002c50 <__aeabi_dsub+0x104>
 8003220:	2200      	movs	r2, #0
 8003222:	2500      	movs	r5, #0
 8003224:	4c0b      	ldr	r4, [pc, #44]	@ (8003254 <__aeabi_dsub+0x708>)
 8003226:	e53a      	b.n	8002c9e <__aeabi_dsub+0x152>
 8003228:	2d00      	cmp	r5, #0
 800322a:	d100      	bne.n	800322e <__aeabi_dsub+0x6e2>
 800322c:	e5f6      	b.n	8002e1c <__aeabi_dsub+0x2d0>
 800322e:	464b      	mov	r3, r9
 8003230:	1bda      	subs	r2, r3, r7
 8003232:	4692      	mov	sl, r2
 8003234:	2f00      	cmp	r7, #0
 8003236:	d100      	bne.n	800323a <__aeabi_dsub+0x6ee>
 8003238:	e66f      	b.n	8002f1a <__aeabi_dsub+0x3ce>
 800323a:	2a38      	cmp	r2, #56	@ 0x38
 800323c:	dc05      	bgt.n	800324a <__aeabi_dsub+0x6fe>
 800323e:	2680      	movs	r6, #128	@ 0x80
 8003240:	0436      	lsls	r6, r6, #16
 8003242:	4334      	orrs	r4, r6
 8003244:	4688      	mov	r8, r1
 8003246:	000e      	movs	r6, r1
 8003248:	e6d1      	b.n	8002fee <__aeabi_dsub+0x4a2>
 800324a:	4688      	mov	r8, r1
 800324c:	000e      	movs	r6, r1
 800324e:	2501      	movs	r5, #1
 8003250:	e6de      	b.n	8003010 <__aeabi_dsub+0x4c4>
 8003252:	46c0      	nop			@ (mov r8, r8)
 8003254:	000007ff 	.word	0x000007ff
 8003258:	ff7fffff 	.word	0xff7fffff
 800325c:	000007fe 	.word	0x000007fe
 8003260:	2d00      	cmp	r5, #0
 8003262:	d100      	bne.n	8003266 <__aeabi_dsub+0x71a>
 8003264:	e668      	b.n	8002f38 <__aeabi_dsub+0x3ec>
 8003266:	464b      	mov	r3, r9
 8003268:	1bd9      	subs	r1, r3, r7
 800326a:	2f00      	cmp	r7, #0
 800326c:	d101      	bne.n	8003272 <__aeabi_dsub+0x726>
 800326e:	468a      	mov	sl, r1
 8003270:	e5a7      	b.n	8002dc2 <__aeabi_dsub+0x276>
 8003272:	2701      	movs	r7, #1
 8003274:	2938      	cmp	r1, #56	@ 0x38
 8003276:	dd00      	ble.n	800327a <__aeabi_dsub+0x72e>
 8003278:	e5c7      	b.n	8002e0a <__aeabi_dsub+0x2be>
 800327a:	2280      	movs	r2, #128	@ 0x80
 800327c:	0412      	lsls	r2, r2, #16
 800327e:	4314      	orrs	r4, r2
 8003280:	e5af      	b.n	8002de2 <__aeabi_dsub+0x296>
 8003282:	46c0      	nop			@ (mov r8, r8)

08003284 <__aeabi_dcmpun>:
 8003284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003286:	46c6      	mov	lr, r8
 8003288:	031e      	lsls	r6, r3, #12
 800328a:	0b36      	lsrs	r6, r6, #12
 800328c:	46b0      	mov	r8, r6
 800328e:	4e0d      	ldr	r6, [pc, #52]	@ (80032c4 <__aeabi_dcmpun+0x40>)
 8003290:	030c      	lsls	r4, r1, #12
 8003292:	004d      	lsls	r5, r1, #1
 8003294:	005f      	lsls	r7, r3, #1
 8003296:	b500      	push	{lr}
 8003298:	0b24      	lsrs	r4, r4, #12
 800329a:	0d6d      	lsrs	r5, r5, #21
 800329c:	0d7f      	lsrs	r7, r7, #21
 800329e:	42b5      	cmp	r5, r6
 80032a0:	d00b      	beq.n	80032ba <__aeabi_dcmpun+0x36>
 80032a2:	4908      	ldr	r1, [pc, #32]	@ (80032c4 <__aeabi_dcmpun+0x40>)
 80032a4:	2000      	movs	r0, #0
 80032a6:	428f      	cmp	r7, r1
 80032a8:	d104      	bne.n	80032b4 <__aeabi_dcmpun+0x30>
 80032aa:	4646      	mov	r6, r8
 80032ac:	4316      	orrs	r6, r2
 80032ae:	0030      	movs	r0, r6
 80032b0:	1e43      	subs	r3, r0, #1
 80032b2:	4198      	sbcs	r0, r3
 80032b4:	bc80      	pop	{r7}
 80032b6:	46b8      	mov	r8, r7
 80032b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032ba:	4304      	orrs	r4, r0
 80032bc:	2001      	movs	r0, #1
 80032be:	2c00      	cmp	r4, #0
 80032c0:	d1f8      	bne.n	80032b4 <__aeabi_dcmpun+0x30>
 80032c2:	e7ee      	b.n	80032a2 <__aeabi_dcmpun+0x1e>
 80032c4:	000007ff 	.word	0x000007ff

080032c8 <__aeabi_d2iz>:
 80032c8:	000b      	movs	r3, r1
 80032ca:	0002      	movs	r2, r0
 80032cc:	b570      	push	{r4, r5, r6, lr}
 80032ce:	4d16      	ldr	r5, [pc, #88]	@ (8003328 <__aeabi_d2iz+0x60>)
 80032d0:	030c      	lsls	r4, r1, #12
 80032d2:	b082      	sub	sp, #8
 80032d4:	0049      	lsls	r1, r1, #1
 80032d6:	2000      	movs	r0, #0
 80032d8:	9200      	str	r2, [sp, #0]
 80032da:	9301      	str	r3, [sp, #4]
 80032dc:	0b24      	lsrs	r4, r4, #12
 80032de:	0d49      	lsrs	r1, r1, #21
 80032e0:	0fde      	lsrs	r6, r3, #31
 80032e2:	42a9      	cmp	r1, r5
 80032e4:	dd04      	ble.n	80032f0 <__aeabi_d2iz+0x28>
 80032e6:	4811      	ldr	r0, [pc, #68]	@ (800332c <__aeabi_d2iz+0x64>)
 80032e8:	4281      	cmp	r1, r0
 80032ea:	dd03      	ble.n	80032f4 <__aeabi_d2iz+0x2c>
 80032ec:	4b10      	ldr	r3, [pc, #64]	@ (8003330 <__aeabi_d2iz+0x68>)
 80032ee:	18f0      	adds	r0, r6, r3
 80032f0:	b002      	add	sp, #8
 80032f2:	bd70      	pop	{r4, r5, r6, pc}
 80032f4:	2080      	movs	r0, #128	@ 0x80
 80032f6:	0340      	lsls	r0, r0, #13
 80032f8:	4320      	orrs	r0, r4
 80032fa:	4c0e      	ldr	r4, [pc, #56]	@ (8003334 <__aeabi_d2iz+0x6c>)
 80032fc:	1a64      	subs	r4, r4, r1
 80032fe:	2c1f      	cmp	r4, #31
 8003300:	dd08      	ble.n	8003314 <__aeabi_d2iz+0x4c>
 8003302:	4b0d      	ldr	r3, [pc, #52]	@ (8003338 <__aeabi_d2iz+0x70>)
 8003304:	1a5b      	subs	r3, r3, r1
 8003306:	40d8      	lsrs	r0, r3
 8003308:	0003      	movs	r3, r0
 800330a:	4258      	negs	r0, r3
 800330c:	2e00      	cmp	r6, #0
 800330e:	d1ef      	bne.n	80032f0 <__aeabi_d2iz+0x28>
 8003310:	0018      	movs	r0, r3
 8003312:	e7ed      	b.n	80032f0 <__aeabi_d2iz+0x28>
 8003314:	4b09      	ldr	r3, [pc, #36]	@ (800333c <__aeabi_d2iz+0x74>)
 8003316:	9a00      	ldr	r2, [sp, #0]
 8003318:	469c      	mov	ip, r3
 800331a:	0003      	movs	r3, r0
 800331c:	4461      	add	r1, ip
 800331e:	408b      	lsls	r3, r1
 8003320:	40e2      	lsrs	r2, r4
 8003322:	4313      	orrs	r3, r2
 8003324:	e7f1      	b.n	800330a <__aeabi_d2iz+0x42>
 8003326:	46c0      	nop			@ (mov r8, r8)
 8003328:	000003fe 	.word	0x000003fe
 800332c:	0000041d 	.word	0x0000041d
 8003330:	7fffffff 	.word	0x7fffffff
 8003334:	00000433 	.word	0x00000433
 8003338:	00000413 	.word	0x00000413
 800333c:	fffffbed 	.word	0xfffffbed

08003340 <__aeabi_i2d>:
 8003340:	b570      	push	{r4, r5, r6, lr}
 8003342:	2800      	cmp	r0, #0
 8003344:	d016      	beq.n	8003374 <__aeabi_i2d+0x34>
 8003346:	17c3      	asrs	r3, r0, #31
 8003348:	18c5      	adds	r5, r0, r3
 800334a:	405d      	eors	r5, r3
 800334c:	0fc4      	lsrs	r4, r0, #31
 800334e:	0028      	movs	r0, r5
 8003350:	f000 f914 	bl	800357c <__clzsi2>
 8003354:	4b10      	ldr	r3, [pc, #64]	@ (8003398 <__aeabi_i2d+0x58>)
 8003356:	1a1b      	subs	r3, r3, r0
 8003358:	055b      	lsls	r3, r3, #21
 800335a:	0d5b      	lsrs	r3, r3, #21
 800335c:	280a      	cmp	r0, #10
 800335e:	dc14      	bgt.n	800338a <__aeabi_i2d+0x4a>
 8003360:	0002      	movs	r2, r0
 8003362:	002e      	movs	r6, r5
 8003364:	3215      	adds	r2, #21
 8003366:	4096      	lsls	r6, r2
 8003368:	220b      	movs	r2, #11
 800336a:	1a12      	subs	r2, r2, r0
 800336c:	40d5      	lsrs	r5, r2
 800336e:	032d      	lsls	r5, r5, #12
 8003370:	0b2d      	lsrs	r5, r5, #12
 8003372:	e003      	b.n	800337c <__aeabi_i2d+0x3c>
 8003374:	2400      	movs	r4, #0
 8003376:	2300      	movs	r3, #0
 8003378:	2500      	movs	r5, #0
 800337a:	2600      	movs	r6, #0
 800337c:	051b      	lsls	r3, r3, #20
 800337e:	432b      	orrs	r3, r5
 8003380:	07e4      	lsls	r4, r4, #31
 8003382:	4323      	orrs	r3, r4
 8003384:	0030      	movs	r0, r6
 8003386:	0019      	movs	r1, r3
 8003388:	bd70      	pop	{r4, r5, r6, pc}
 800338a:	380b      	subs	r0, #11
 800338c:	4085      	lsls	r5, r0
 800338e:	032d      	lsls	r5, r5, #12
 8003390:	2600      	movs	r6, #0
 8003392:	0b2d      	lsrs	r5, r5, #12
 8003394:	e7f2      	b.n	800337c <__aeabi_i2d+0x3c>
 8003396:	46c0      	nop			@ (mov r8, r8)
 8003398:	0000041e 	.word	0x0000041e

0800339c <__aeabi_ui2d>:
 800339c:	b510      	push	{r4, lr}
 800339e:	1e04      	subs	r4, r0, #0
 80033a0:	d010      	beq.n	80033c4 <__aeabi_ui2d+0x28>
 80033a2:	f000 f8eb 	bl	800357c <__clzsi2>
 80033a6:	4b0e      	ldr	r3, [pc, #56]	@ (80033e0 <__aeabi_ui2d+0x44>)
 80033a8:	1a1b      	subs	r3, r3, r0
 80033aa:	055b      	lsls	r3, r3, #21
 80033ac:	0d5b      	lsrs	r3, r3, #21
 80033ae:	280a      	cmp	r0, #10
 80033b0:	dc0f      	bgt.n	80033d2 <__aeabi_ui2d+0x36>
 80033b2:	220b      	movs	r2, #11
 80033b4:	0021      	movs	r1, r4
 80033b6:	1a12      	subs	r2, r2, r0
 80033b8:	40d1      	lsrs	r1, r2
 80033ba:	3015      	adds	r0, #21
 80033bc:	030a      	lsls	r2, r1, #12
 80033be:	4084      	lsls	r4, r0
 80033c0:	0b12      	lsrs	r2, r2, #12
 80033c2:	e001      	b.n	80033c8 <__aeabi_ui2d+0x2c>
 80033c4:	2300      	movs	r3, #0
 80033c6:	2200      	movs	r2, #0
 80033c8:	051b      	lsls	r3, r3, #20
 80033ca:	4313      	orrs	r3, r2
 80033cc:	0020      	movs	r0, r4
 80033ce:	0019      	movs	r1, r3
 80033d0:	bd10      	pop	{r4, pc}
 80033d2:	0022      	movs	r2, r4
 80033d4:	380b      	subs	r0, #11
 80033d6:	4082      	lsls	r2, r0
 80033d8:	0312      	lsls	r2, r2, #12
 80033da:	2400      	movs	r4, #0
 80033dc:	0b12      	lsrs	r2, r2, #12
 80033de:	e7f3      	b.n	80033c8 <__aeabi_ui2d+0x2c>
 80033e0:	0000041e 	.word	0x0000041e

080033e4 <__aeabi_f2d>:
 80033e4:	b570      	push	{r4, r5, r6, lr}
 80033e6:	0242      	lsls	r2, r0, #9
 80033e8:	0043      	lsls	r3, r0, #1
 80033ea:	0fc4      	lsrs	r4, r0, #31
 80033ec:	20fe      	movs	r0, #254	@ 0xfe
 80033ee:	0e1b      	lsrs	r3, r3, #24
 80033f0:	1c59      	adds	r1, r3, #1
 80033f2:	0a55      	lsrs	r5, r2, #9
 80033f4:	4208      	tst	r0, r1
 80033f6:	d00c      	beq.n	8003412 <__aeabi_f2d+0x2e>
 80033f8:	21e0      	movs	r1, #224	@ 0xe0
 80033fa:	0089      	lsls	r1, r1, #2
 80033fc:	468c      	mov	ip, r1
 80033fe:	076d      	lsls	r5, r5, #29
 8003400:	0b12      	lsrs	r2, r2, #12
 8003402:	4463      	add	r3, ip
 8003404:	051b      	lsls	r3, r3, #20
 8003406:	4313      	orrs	r3, r2
 8003408:	07e4      	lsls	r4, r4, #31
 800340a:	4323      	orrs	r3, r4
 800340c:	0028      	movs	r0, r5
 800340e:	0019      	movs	r1, r3
 8003410:	bd70      	pop	{r4, r5, r6, pc}
 8003412:	2b00      	cmp	r3, #0
 8003414:	d114      	bne.n	8003440 <__aeabi_f2d+0x5c>
 8003416:	2d00      	cmp	r5, #0
 8003418:	d01b      	beq.n	8003452 <__aeabi_f2d+0x6e>
 800341a:	0028      	movs	r0, r5
 800341c:	f000 f8ae 	bl	800357c <__clzsi2>
 8003420:	280a      	cmp	r0, #10
 8003422:	dc1c      	bgt.n	800345e <__aeabi_f2d+0x7a>
 8003424:	230b      	movs	r3, #11
 8003426:	002a      	movs	r2, r5
 8003428:	1a1b      	subs	r3, r3, r0
 800342a:	40da      	lsrs	r2, r3
 800342c:	0003      	movs	r3, r0
 800342e:	3315      	adds	r3, #21
 8003430:	409d      	lsls	r5, r3
 8003432:	4b0e      	ldr	r3, [pc, #56]	@ (800346c <__aeabi_f2d+0x88>)
 8003434:	0312      	lsls	r2, r2, #12
 8003436:	1a1b      	subs	r3, r3, r0
 8003438:	055b      	lsls	r3, r3, #21
 800343a:	0b12      	lsrs	r2, r2, #12
 800343c:	0d5b      	lsrs	r3, r3, #21
 800343e:	e7e1      	b.n	8003404 <__aeabi_f2d+0x20>
 8003440:	2d00      	cmp	r5, #0
 8003442:	d009      	beq.n	8003458 <__aeabi_f2d+0x74>
 8003444:	0b13      	lsrs	r3, r2, #12
 8003446:	2280      	movs	r2, #128	@ 0x80
 8003448:	0312      	lsls	r2, r2, #12
 800344a:	431a      	orrs	r2, r3
 800344c:	076d      	lsls	r5, r5, #29
 800344e:	4b08      	ldr	r3, [pc, #32]	@ (8003470 <__aeabi_f2d+0x8c>)
 8003450:	e7d8      	b.n	8003404 <__aeabi_f2d+0x20>
 8003452:	2300      	movs	r3, #0
 8003454:	2200      	movs	r2, #0
 8003456:	e7d5      	b.n	8003404 <__aeabi_f2d+0x20>
 8003458:	2200      	movs	r2, #0
 800345a:	4b05      	ldr	r3, [pc, #20]	@ (8003470 <__aeabi_f2d+0x8c>)
 800345c:	e7d2      	b.n	8003404 <__aeabi_f2d+0x20>
 800345e:	0003      	movs	r3, r0
 8003460:	002a      	movs	r2, r5
 8003462:	3b0b      	subs	r3, #11
 8003464:	409a      	lsls	r2, r3
 8003466:	2500      	movs	r5, #0
 8003468:	e7e3      	b.n	8003432 <__aeabi_f2d+0x4e>
 800346a:	46c0      	nop			@ (mov r8, r8)
 800346c:	00000389 	.word	0x00000389
 8003470:	000007ff 	.word	0x000007ff

08003474 <__aeabi_d2f>:
 8003474:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003476:	004b      	lsls	r3, r1, #1
 8003478:	030f      	lsls	r7, r1, #12
 800347a:	0d5b      	lsrs	r3, r3, #21
 800347c:	4c3b      	ldr	r4, [pc, #236]	@ (800356c <__aeabi_d2f+0xf8>)
 800347e:	0f45      	lsrs	r5, r0, #29
 8003480:	b083      	sub	sp, #12
 8003482:	0a7f      	lsrs	r7, r7, #9
 8003484:	1c5e      	adds	r6, r3, #1
 8003486:	432f      	orrs	r7, r5
 8003488:	9000      	str	r0, [sp, #0]
 800348a:	9101      	str	r1, [sp, #4]
 800348c:	0fca      	lsrs	r2, r1, #31
 800348e:	00c5      	lsls	r5, r0, #3
 8003490:	4226      	tst	r6, r4
 8003492:	d00b      	beq.n	80034ac <__aeabi_d2f+0x38>
 8003494:	4936      	ldr	r1, [pc, #216]	@ (8003570 <__aeabi_d2f+0xfc>)
 8003496:	185c      	adds	r4, r3, r1
 8003498:	2cfe      	cmp	r4, #254	@ 0xfe
 800349a:	dd13      	ble.n	80034c4 <__aeabi_d2f+0x50>
 800349c:	20ff      	movs	r0, #255	@ 0xff
 800349e:	2300      	movs	r3, #0
 80034a0:	05c0      	lsls	r0, r0, #23
 80034a2:	4318      	orrs	r0, r3
 80034a4:	07d2      	lsls	r2, r2, #31
 80034a6:	4310      	orrs	r0, r2
 80034a8:	b003      	add	sp, #12
 80034aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d102      	bne.n	80034b6 <__aeabi_d2f+0x42>
 80034b0:	2000      	movs	r0, #0
 80034b2:	2300      	movs	r3, #0
 80034b4:	e7f4      	b.n	80034a0 <__aeabi_d2f+0x2c>
 80034b6:	433d      	orrs	r5, r7
 80034b8:	d0f0      	beq.n	800349c <__aeabi_d2f+0x28>
 80034ba:	2380      	movs	r3, #128	@ 0x80
 80034bc:	03db      	lsls	r3, r3, #15
 80034be:	20ff      	movs	r0, #255	@ 0xff
 80034c0:	433b      	orrs	r3, r7
 80034c2:	e7ed      	b.n	80034a0 <__aeabi_d2f+0x2c>
 80034c4:	2c00      	cmp	r4, #0
 80034c6:	dd14      	ble.n	80034f2 <__aeabi_d2f+0x7e>
 80034c8:	9b00      	ldr	r3, [sp, #0]
 80034ca:	00ff      	lsls	r7, r7, #3
 80034cc:	019b      	lsls	r3, r3, #6
 80034ce:	1e58      	subs	r0, r3, #1
 80034d0:	4183      	sbcs	r3, r0
 80034d2:	0f69      	lsrs	r1, r5, #29
 80034d4:	433b      	orrs	r3, r7
 80034d6:	430b      	orrs	r3, r1
 80034d8:	0759      	lsls	r1, r3, #29
 80034da:	d041      	beq.n	8003560 <__aeabi_d2f+0xec>
 80034dc:	210f      	movs	r1, #15
 80034de:	4019      	ands	r1, r3
 80034e0:	2904      	cmp	r1, #4
 80034e2:	d028      	beq.n	8003536 <__aeabi_d2f+0xc2>
 80034e4:	3304      	adds	r3, #4
 80034e6:	0159      	lsls	r1, r3, #5
 80034e8:	d525      	bpl.n	8003536 <__aeabi_d2f+0xc2>
 80034ea:	3401      	adds	r4, #1
 80034ec:	2300      	movs	r3, #0
 80034ee:	b2e0      	uxtb	r0, r4
 80034f0:	e7d6      	b.n	80034a0 <__aeabi_d2f+0x2c>
 80034f2:	0021      	movs	r1, r4
 80034f4:	3117      	adds	r1, #23
 80034f6:	dbdb      	blt.n	80034b0 <__aeabi_d2f+0x3c>
 80034f8:	2180      	movs	r1, #128	@ 0x80
 80034fa:	201e      	movs	r0, #30
 80034fc:	0409      	lsls	r1, r1, #16
 80034fe:	4339      	orrs	r1, r7
 8003500:	1b00      	subs	r0, r0, r4
 8003502:	281f      	cmp	r0, #31
 8003504:	dd1b      	ble.n	800353e <__aeabi_d2f+0xca>
 8003506:	2602      	movs	r6, #2
 8003508:	4276      	negs	r6, r6
 800350a:	1b34      	subs	r4, r6, r4
 800350c:	000e      	movs	r6, r1
 800350e:	40e6      	lsrs	r6, r4
 8003510:	0034      	movs	r4, r6
 8003512:	2820      	cmp	r0, #32
 8003514:	d004      	beq.n	8003520 <__aeabi_d2f+0xac>
 8003516:	4817      	ldr	r0, [pc, #92]	@ (8003574 <__aeabi_d2f+0x100>)
 8003518:	4684      	mov	ip, r0
 800351a:	4463      	add	r3, ip
 800351c:	4099      	lsls	r1, r3
 800351e:	430d      	orrs	r5, r1
 8003520:	002b      	movs	r3, r5
 8003522:	1e59      	subs	r1, r3, #1
 8003524:	418b      	sbcs	r3, r1
 8003526:	4323      	orrs	r3, r4
 8003528:	0759      	lsls	r1, r3, #29
 800352a:	d015      	beq.n	8003558 <__aeabi_d2f+0xe4>
 800352c:	210f      	movs	r1, #15
 800352e:	2400      	movs	r4, #0
 8003530:	4019      	ands	r1, r3
 8003532:	2904      	cmp	r1, #4
 8003534:	d117      	bne.n	8003566 <__aeabi_d2f+0xf2>
 8003536:	019b      	lsls	r3, r3, #6
 8003538:	0a5b      	lsrs	r3, r3, #9
 800353a:	b2e0      	uxtb	r0, r4
 800353c:	e7b0      	b.n	80034a0 <__aeabi_d2f+0x2c>
 800353e:	4c0e      	ldr	r4, [pc, #56]	@ (8003578 <__aeabi_d2f+0x104>)
 8003540:	191c      	adds	r4, r3, r4
 8003542:	002b      	movs	r3, r5
 8003544:	40a5      	lsls	r5, r4
 8003546:	40c3      	lsrs	r3, r0
 8003548:	40a1      	lsls	r1, r4
 800354a:	1e68      	subs	r0, r5, #1
 800354c:	4185      	sbcs	r5, r0
 800354e:	4329      	orrs	r1, r5
 8003550:	430b      	orrs	r3, r1
 8003552:	2400      	movs	r4, #0
 8003554:	0759      	lsls	r1, r3, #29
 8003556:	d1c1      	bne.n	80034dc <__aeabi_d2f+0x68>
 8003558:	019b      	lsls	r3, r3, #6
 800355a:	2000      	movs	r0, #0
 800355c:	0a5b      	lsrs	r3, r3, #9
 800355e:	e79f      	b.n	80034a0 <__aeabi_d2f+0x2c>
 8003560:	08db      	lsrs	r3, r3, #3
 8003562:	b2e0      	uxtb	r0, r4
 8003564:	e79c      	b.n	80034a0 <__aeabi_d2f+0x2c>
 8003566:	3304      	adds	r3, #4
 8003568:	e7e5      	b.n	8003536 <__aeabi_d2f+0xc2>
 800356a:	46c0      	nop			@ (mov r8, r8)
 800356c:	000007fe 	.word	0x000007fe
 8003570:	fffffc80 	.word	0xfffffc80
 8003574:	fffffca2 	.word	0xfffffca2
 8003578:	fffffc82 	.word	0xfffffc82

0800357c <__clzsi2>:
 800357c:	211c      	movs	r1, #28
 800357e:	2301      	movs	r3, #1
 8003580:	041b      	lsls	r3, r3, #16
 8003582:	4298      	cmp	r0, r3
 8003584:	d301      	bcc.n	800358a <__clzsi2+0xe>
 8003586:	0c00      	lsrs	r0, r0, #16
 8003588:	3910      	subs	r1, #16
 800358a:	0a1b      	lsrs	r3, r3, #8
 800358c:	4298      	cmp	r0, r3
 800358e:	d301      	bcc.n	8003594 <__clzsi2+0x18>
 8003590:	0a00      	lsrs	r0, r0, #8
 8003592:	3908      	subs	r1, #8
 8003594:	091b      	lsrs	r3, r3, #4
 8003596:	4298      	cmp	r0, r3
 8003598:	d301      	bcc.n	800359e <__clzsi2+0x22>
 800359a:	0900      	lsrs	r0, r0, #4
 800359c:	3904      	subs	r1, #4
 800359e:	a202      	add	r2, pc, #8	@ (adr r2, 80035a8 <__clzsi2+0x2c>)
 80035a0:	5c10      	ldrb	r0, [r2, r0]
 80035a2:	1840      	adds	r0, r0, r1
 80035a4:	4770      	bx	lr
 80035a6:	46c0      	nop			@ (mov r8, r8)
 80035a8:	02020304 	.word	0x02020304
 80035ac:	01010101 	.word	0x01010101
	...

080035b8 <__clzdi2>:
 80035b8:	b510      	push	{r4, lr}
 80035ba:	2900      	cmp	r1, #0
 80035bc:	d103      	bne.n	80035c6 <__clzdi2+0xe>
 80035be:	f7ff ffdd 	bl	800357c <__clzsi2>
 80035c2:	3020      	adds	r0, #32
 80035c4:	e002      	b.n	80035cc <__clzdi2+0x14>
 80035c6:	0008      	movs	r0, r1
 80035c8:	f7ff ffd8 	bl	800357c <__clzsi2>
 80035cc:	bd10      	pop	{r4, pc}
 80035ce:	46c0      	nop			@ (mov r8, r8)

080035d0 <drawPixel>:
extern uint8_t _rowstart;       ///< Some displays need this changed to offset
extern uint8_t _xstart;
extern uint8_t _ystart;

void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 80035d0:	b590      	push	{r4, r7, lr}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	0004      	movs	r4, r0
 80035d8:	0008      	movs	r0, r1
 80035da:	0011      	movs	r1, r2
 80035dc:	1dbb      	adds	r3, r7, #6
 80035de:	1c22      	adds	r2, r4, #0
 80035e0:	801a      	strh	r2, [r3, #0]
 80035e2:	1d3b      	adds	r3, r7, #4
 80035e4:	1c02      	adds	r2, r0, #0
 80035e6:	801a      	strh	r2, [r3, #0]
 80035e8:	1cbb      	adds	r3, r7, #2
 80035ea:	1c0a      	adds	r2, r1, #0
 80035ec:	801a      	strh	r2, [r3, #0]
	ST7735_DrawPixel(y,x, color);
 80035ee:	1d3b      	adds	r3, r7, #4
 80035f0:	8818      	ldrh	r0, [r3, #0]
 80035f2:	1dbb      	adds	r3, r7, #6
 80035f4:	8819      	ldrh	r1, [r3, #0]
 80035f6:	1cbb      	adds	r3, r7, #2
 80035f8:	881b      	ldrh	r3, [r3, #0]
 80035fa:	001a      	movs	r2, r3
 80035fc:	f000 fee8 	bl	80043d0 <ST7735_DrawPixel>
}
 8003600:	46c0      	nop			@ (mov r8, r8)
 8003602:	46bd      	mov	sp, r7
 8003604:	b003      	add	sp, #12
 8003606:	bd90      	pop	{r4, r7, pc}

08003608 <fillRect>:

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8003608:	b5f0      	push	{r4, r5, r6, r7, lr}
 800360a:	46c6      	mov	lr, r8
 800360c:	b500      	push	{lr}
 800360e:	b090      	sub	sp, #64	@ 0x40
 8003610:	af04      	add	r7, sp, #16
 8003612:	468c      	mov	ip, r1
 8003614:	0016      	movs	r6, r2
 8003616:	0019      	movs	r1, r3
 8003618:	221e      	movs	r2, #30
 800361a:	18ba      	adds	r2, r7, r2
 800361c:	1c03      	adds	r3, r0, #0
 800361e:	8013      	strh	r3, [r2, #0]
 8003620:	231c      	movs	r3, #28
 8003622:	18fb      	adds	r3, r7, r3
 8003624:	4662      	mov	r2, ip
 8003626:	801a      	strh	r2, [r3, #0]
 8003628:	201a      	movs	r0, #26
 800362a:	183b      	adds	r3, r7, r0
 800362c:	1c32      	adds	r2, r6, #0
 800362e:	801a      	strh	r2, [r3, #0]
 8003630:	2018      	movs	r0, #24
 8003632:	183b      	adds	r3, r7, r0
 8003634:	1c0a      	adds	r2, r1, #0
 8003636:	801a      	strh	r2, [r3, #0]
 8003638:	466b      	mov	r3, sp
 800363a:	4698      	mov	r8, r3
	uint16_t pallette[] = {color};
 800363c:	230c      	movs	r3, #12
 800363e:	0001      	movs	r1, r0
 8003640:	185e      	adds	r6, r3, r1
 8003642:	19f2      	adds	r2, r6, r7
 8003644:	2030      	movs	r0, #48	@ 0x30
 8003646:	1846      	adds	r6, r0, r1
 8003648:	19f3      	adds	r3, r6, r7
 800364a:	881b      	ldrh	r3, [r3, #0]
 800364c:	8013      	strh	r3, [r2, #0]
	    uint16_t pixels[w*h][2];
 800364e:	201a      	movs	r0, #26
 8003650:	183b      	adds	r3, r7, r0
 8003652:	2200      	movs	r2, #0
 8003654:	5e9b      	ldrsh	r3, [r3, r2]
 8003656:	187a      	adds	r2, r7, r1
 8003658:	2000      	movs	r0, #0
 800365a:	5e12      	ldrsh	r2, [r2, r0]
 800365c:	4353      	muls	r3, r2
 800365e:	1e5a      	subs	r2, r3, #1
 8003660:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003662:	001a      	movs	r2, r3
 8003664:	60ba      	str	r2, [r7, #8]
 8003666:	2200      	movs	r2, #0
 8003668:	60fa      	str	r2, [r7, #12]
 800366a:	68b8      	ldr	r0, [r7, #8]
 800366c:	68f9      	ldr	r1, [r7, #12]
 800366e:	0002      	movs	r2, r0
 8003670:	0ed2      	lsrs	r2, r2, #27
 8003672:	000e      	movs	r6, r1
 8003674:	0176      	lsls	r6, r6, #5
 8003676:	617e      	str	r6, [r7, #20]
 8003678:	697e      	ldr	r6, [r7, #20]
 800367a:	4316      	orrs	r6, r2
 800367c:	617e      	str	r6, [r7, #20]
 800367e:	0002      	movs	r2, r0
 8003680:	0152      	lsls	r2, r2, #5
 8003682:	613a      	str	r2, [r7, #16]
 8003684:	001a      	movs	r2, r3
 8003686:	603a      	str	r2, [r7, #0]
 8003688:	2200      	movs	r2, #0
 800368a:	607a      	str	r2, [r7, #4]
 800368c:	6838      	ldr	r0, [r7, #0]
 800368e:	6879      	ldr	r1, [r7, #4]
 8003690:	0002      	movs	r2, r0
 8003692:	0ed2      	lsrs	r2, r2, #27
 8003694:	000e      	movs	r6, r1
 8003696:	0175      	lsls	r5, r6, #5
 8003698:	4315      	orrs	r5, r2
 800369a:	0002      	movs	r2, r0
 800369c:	0154      	lsls	r4, r2, #5
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	3307      	adds	r3, #7
 80036a2:	08db      	lsrs	r3, r3, #3
 80036a4:	00db      	lsls	r3, r3, #3
 80036a6:	466a      	mov	r2, sp
 80036a8:	1ad2      	subs	r2, r2, r3
 80036aa:	4695      	mov	sp, r2
 80036ac:	ab04      	add	r3, sp, #16
 80036ae:	3301      	adds	r3, #1
 80036b0:	085b      	lsrs	r3, r3, #1
 80036b2:	005b      	lsls	r3, r3, #1
 80036b4:	62bb      	str	r3, [r7, #40]	@ 0x28

	    pixels[0][0] = 0;
 80036b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036b8:	2200      	movs	r2, #0
 80036ba:	801a      	strh	r2, [r3, #0]
	    pixels[0][1] = w*h;
 80036bc:	201a      	movs	r0, #26
 80036be:	183b      	adds	r3, r7, r0
 80036c0:	881b      	ldrh	r3, [r3, #0]
 80036c2:	2118      	movs	r1, #24
 80036c4:	187a      	adds	r2, r7, r1
 80036c6:	8812      	ldrh	r2, [r2, #0]
 80036c8:	4353      	muls	r3, r2
 80036ca:	b29a      	uxth	r2, r3
 80036cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036ce:	805a      	strh	r2, [r3, #2]
	    drawImage(pixels, pallette, x, y, w, h, 1);
 80036d0:	221e      	movs	r2, #30
 80036d2:	18bb      	adds	r3, r7, r2
 80036d4:	881c      	ldrh	r4, [r3, #0]
 80036d6:	231c      	movs	r3, #28
 80036d8:	18fb      	adds	r3, r7, r3
 80036da:	881d      	ldrh	r5, [r3, #0]
 80036dc:	183b      	adds	r3, r7, r0
 80036de:	881b      	ldrh	r3, [r3, #0]
 80036e0:	0008      	movs	r0, r1
 80036e2:	187a      	adds	r2, r7, r1
 80036e4:	8812      	ldrh	r2, [r2, #0]
 80036e6:	210c      	movs	r1, #12
 80036e8:	1809      	adds	r1, r1, r0
 80036ea:	19c9      	adds	r1, r1, r7
 80036ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80036ee:	2601      	movs	r6, #1
 80036f0:	46b4      	mov	ip, r6
 80036f2:	4666      	mov	r6, ip
 80036f4:	9602      	str	r6, [sp, #8]
 80036f6:	9201      	str	r2, [sp, #4]
 80036f8:	9300      	str	r3, [sp, #0]
 80036fa:	002b      	movs	r3, r5
 80036fc:	0022      	movs	r2, r4
 80036fe:	f000 fbc5 	bl	8003e8c <drawImage>
 8003702:	46c5      	mov	sp, r8

	//ST7735_FillRectangle(x, y, w, h, color);
}
 8003704:	46c0      	nop			@ (mov r8, r8)
 8003706:	46bd      	mov	sp, r7
 8003708:	b00c      	add	sp, #48	@ 0x30
 800370a:	bc80      	pop	{r7}
 800370c:	46b8      	mov	r8, r7
 800370e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003710 <writePixel>:

#define min(a, b) (((a) < (b)) ? (a) : (b))


void writePixel(int16_t x, int16_t y, uint16_t color)
{
 8003710:	b590      	push	{r4, r7, lr}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	0004      	movs	r4, r0
 8003718:	0008      	movs	r0, r1
 800371a:	0011      	movs	r1, r2
 800371c:	1dbb      	adds	r3, r7, #6
 800371e:	1c22      	adds	r2, r4, #0
 8003720:	801a      	strh	r2, [r3, #0]
 8003722:	1d3b      	adds	r3, r7, #4
 8003724:	1c02      	adds	r2, r0, #0
 8003726:	801a      	strh	r2, [r3, #0]
 8003728:	1cbb      	adds	r3, r7, #2
 800372a:	1c0a      	adds	r2, r1, #0
 800372c:	801a      	strh	r2, [r3, #0]
    drawPixel(x, y, color);
 800372e:	1cbb      	adds	r3, r7, #2
 8003730:	881a      	ldrh	r2, [r3, #0]
 8003732:	1d3b      	adds	r3, r7, #4
 8003734:	2100      	movs	r1, #0
 8003736:	5e59      	ldrsh	r1, [r3, r1]
 8003738:	1dbb      	adds	r3, r7, #6
 800373a:	2000      	movs	r0, #0
 800373c:	5e1b      	ldrsh	r3, [r3, r0]
 800373e:	0018      	movs	r0, r3
 8003740:	f7ff ff46 	bl	80035d0 <drawPixel>
}
 8003744:	46c0      	nop			@ (mov r8, r8)
 8003746:	46bd      	mov	sp, r7
 8003748:	b003      	add	sp, #12
 800374a:	bd90      	pop	{r4, r7, pc}

0800374c <writeLine>:

void writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 800374c:	b5b0      	push	{r4, r5, r7, lr}
 800374e:	b088      	sub	sp, #32
 8003750:	af00      	add	r7, sp, #0
 8003752:	0005      	movs	r5, r0
 8003754:	000c      	movs	r4, r1
 8003756:	0010      	movs	r0, r2
 8003758:	0019      	movs	r1, r3
 800375a:	1dbb      	adds	r3, r7, #6
 800375c:	1c2a      	adds	r2, r5, #0
 800375e:	801a      	strh	r2, [r3, #0]
 8003760:	1d3b      	adds	r3, r7, #4
 8003762:	1c22      	adds	r2, r4, #0
 8003764:	801a      	strh	r2, [r3, #0]
 8003766:	1cbb      	adds	r3, r7, #2
 8003768:	1c02      	adds	r2, r0, #0
 800376a:	801a      	strh	r2, [r3, #0]
 800376c:	003b      	movs	r3, r7
 800376e:	1c0a      	adds	r2, r1, #0
 8003770:	801a      	strh	r2, [r3, #0]
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8003772:	003b      	movs	r3, r7
 8003774:	2200      	movs	r2, #0
 8003776:	5e9a      	ldrsh	r2, [r3, r2]
 8003778:	1d3b      	adds	r3, r7, #4
 800377a:	2100      	movs	r1, #0
 800377c:	5e5b      	ldrsh	r3, [r3, r1]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	17d9      	asrs	r1, r3, #31
 8003782:	185a      	adds	r2, r3, r1
 8003784:	404a      	eors	r2, r1
 8003786:	1cbb      	adds	r3, r7, #2
 8003788:	2100      	movs	r1, #0
 800378a:	5e59      	ldrsh	r1, [r3, r1]
 800378c:	1dbb      	adds	r3, r7, #6
 800378e:	2000      	movs	r0, #0
 8003790:	5e1b      	ldrsh	r3, [r3, r0]
 8003792:	1acb      	subs	r3, r1, r3
 8003794:	17d9      	asrs	r1, r3, #31
 8003796:	185b      	adds	r3, r3, r1
 8003798:	404b      	eors	r3, r1
 800379a:	2101      	movs	r1, #1
 800379c:	429a      	cmp	r2, r3
 800379e:	dc01      	bgt.n	80037a4 <writeLine+0x58>
 80037a0:	2300      	movs	r3, #0
 80037a2:	1c19      	adds	r1, r3, #0
 80037a4:	b2ca      	uxtb	r2, r1
 80037a6:	211a      	movs	r1, #26
 80037a8:	187b      	adds	r3, r7, r1
 80037aa:	801a      	strh	r2, [r3, #0]
    if (steep) {
 80037ac:	187b      	adds	r3, r7, r1
 80037ae:	2200      	movs	r2, #0
 80037b0:	5e9b      	ldrsh	r3, [r3, r2]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d019      	beq.n	80037ea <writeLine+0x9e>
        _swap_int16_t(x0, y0);
 80037b6:	2118      	movs	r1, #24
 80037b8:	187b      	adds	r3, r7, r1
 80037ba:	1dba      	adds	r2, r7, #6
 80037bc:	8812      	ldrh	r2, [r2, #0]
 80037be:	801a      	strh	r2, [r3, #0]
 80037c0:	1dbb      	adds	r3, r7, #6
 80037c2:	1d3a      	adds	r2, r7, #4
 80037c4:	8812      	ldrh	r2, [r2, #0]
 80037c6:	801a      	strh	r2, [r3, #0]
 80037c8:	1d3b      	adds	r3, r7, #4
 80037ca:	187a      	adds	r2, r7, r1
 80037cc:	8812      	ldrh	r2, [r2, #0]
 80037ce:	801a      	strh	r2, [r3, #0]
        _swap_int16_t(x1, y1);
 80037d0:	2116      	movs	r1, #22
 80037d2:	187b      	adds	r3, r7, r1
 80037d4:	1cba      	adds	r2, r7, #2
 80037d6:	8812      	ldrh	r2, [r2, #0]
 80037d8:	801a      	strh	r2, [r3, #0]
 80037da:	1cbb      	adds	r3, r7, #2
 80037dc:	003a      	movs	r2, r7
 80037de:	8812      	ldrh	r2, [r2, #0]
 80037e0:	801a      	strh	r2, [r3, #0]
 80037e2:	003b      	movs	r3, r7
 80037e4:	187a      	adds	r2, r7, r1
 80037e6:	8812      	ldrh	r2, [r2, #0]
 80037e8:	801a      	strh	r2, [r3, #0]
    }

    if (x0 > x1) {
 80037ea:	1dba      	adds	r2, r7, #6
 80037ec:	1cbb      	adds	r3, r7, #2
 80037ee:	2100      	movs	r1, #0
 80037f0:	5e52      	ldrsh	r2, [r2, r1]
 80037f2:	2100      	movs	r1, #0
 80037f4:	5e5b      	ldrsh	r3, [r3, r1]
 80037f6:	429a      	cmp	r2, r3
 80037f8:	dd19      	ble.n	800382e <writeLine+0xe2>
        _swap_int16_t(x0, x1);
 80037fa:	2114      	movs	r1, #20
 80037fc:	187b      	adds	r3, r7, r1
 80037fe:	1dba      	adds	r2, r7, #6
 8003800:	8812      	ldrh	r2, [r2, #0]
 8003802:	801a      	strh	r2, [r3, #0]
 8003804:	1dbb      	adds	r3, r7, #6
 8003806:	1cba      	adds	r2, r7, #2
 8003808:	8812      	ldrh	r2, [r2, #0]
 800380a:	801a      	strh	r2, [r3, #0]
 800380c:	1cbb      	adds	r3, r7, #2
 800380e:	187a      	adds	r2, r7, r1
 8003810:	8812      	ldrh	r2, [r2, #0]
 8003812:	801a      	strh	r2, [r3, #0]
        _swap_int16_t(y0, y1);
 8003814:	2112      	movs	r1, #18
 8003816:	187b      	adds	r3, r7, r1
 8003818:	1d3a      	adds	r2, r7, #4
 800381a:	8812      	ldrh	r2, [r2, #0]
 800381c:	801a      	strh	r2, [r3, #0]
 800381e:	1d3b      	adds	r3, r7, #4
 8003820:	003a      	movs	r2, r7
 8003822:	8812      	ldrh	r2, [r2, #0]
 8003824:	801a      	strh	r2, [r3, #0]
 8003826:	003b      	movs	r3, r7
 8003828:	187a      	adds	r2, r7, r1
 800382a:	8812      	ldrh	r2, [r2, #0]
 800382c:	801a      	strh	r2, [r3, #0]
    }

    int16_t dx, dy;
    dx = x1 - x0;
 800382e:	1cbb      	adds	r3, r7, #2
 8003830:	881a      	ldrh	r2, [r3, #0]
 8003832:	1dbb      	adds	r3, r7, #6
 8003834:	881b      	ldrh	r3, [r3, #0]
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	b29a      	uxth	r2, r3
 800383a:	2010      	movs	r0, #16
 800383c:	183b      	adds	r3, r7, r0
 800383e:	801a      	strh	r2, [r3, #0]
    dy = abs(y1 - y0);
 8003840:	003b      	movs	r3, r7
 8003842:	2200      	movs	r2, #0
 8003844:	5e9a      	ldrsh	r2, [r3, r2]
 8003846:	1d3b      	adds	r3, r7, #4
 8003848:	2100      	movs	r1, #0
 800384a:	5e5b      	ldrsh	r3, [r3, r1]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	17d9      	asrs	r1, r3, #31
 8003850:	185a      	adds	r2, r3, r1
 8003852:	404a      	eors	r2, r1
 8003854:	230e      	movs	r3, #14
 8003856:	18fb      	adds	r3, r7, r3
 8003858:	801a      	strh	r2, [r3, #0]

    int16_t err = dx / 2;
 800385a:	231e      	movs	r3, #30
 800385c:	18fa      	adds	r2, r7, r3
 800385e:	183b      	adds	r3, r7, r0
 8003860:	2100      	movs	r1, #0
 8003862:	5e5b      	ldrsh	r3, [r3, r1]
 8003864:	2b00      	cmp	r3, #0
 8003866:	da00      	bge.n	800386a <writeLine+0x11e>
 8003868:	3301      	adds	r3, #1
 800386a:	105b      	asrs	r3, r3, #1
 800386c:	8013      	strh	r3, [r2, #0]
    int16_t ystep;

    if (y0 < y1) {
 800386e:	1d3a      	adds	r2, r7, #4
 8003870:	003b      	movs	r3, r7
 8003872:	2100      	movs	r1, #0
 8003874:	5e52      	ldrsh	r2, [r2, r1]
 8003876:	2100      	movs	r1, #0
 8003878:	5e5b      	ldrsh	r3, [r3, r1]
 800387a:	429a      	cmp	r2, r3
 800387c:	da04      	bge.n	8003888 <writeLine+0x13c>
        ystep = 1;
 800387e:	231c      	movs	r3, #28
 8003880:	18fb      	adds	r3, r7, r3
 8003882:	2201      	movs	r2, #1
 8003884:	801a      	strh	r2, [r3, #0]
 8003886:	e04d      	b.n	8003924 <writeLine+0x1d8>
    } else {
        ystep = -1;
 8003888:	231c      	movs	r3, #28
 800388a:	18fb      	adds	r3, r7, r3
 800388c:	2201      	movs	r2, #1
 800388e:	4252      	negs	r2, r2
 8003890:	801a      	strh	r2, [r3, #0]
    }

    for (; x0<=x1; x0++) {
 8003892:	e047      	b.n	8003924 <writeLine+0x1d8>
        if (steep) {
 8003894:	231a      	movs	r3, #26
 8003896:	18fb      	adds	r3, r7, r3
 8003898:	2200      	movs	r2, #0
 800389a:	5e9b      	ldrsh	r3, [r3, r2]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d00c      	beq.n	80038ba <writeLine+0x16e>
            writePixel(y0, x0, color);
 80038a0:	2330      	movs	r3, #48	@ 0x30
 80038a2:	18fb      	adds	r3, r7, r3
 80038a4:	881a      	ldrh	r2, [r3, #0]
 80038a6:	1dbb      	adds	r3, r7, #6
 80038a8:	2100      	movs	r1, #0
 80038aa:	5e59      	ldrsh	r1, [r3, r1]
 80038ac:	1d3b      	adds	r3, r7, #4
 80038ae:	2000      	movs	r0, #0
 80038b0:	5e1b      	ldrsh	r3, [r3, r0]
 80038b2:	0018      	movs	r0, r3
 80038b4:	f7ff ff2c 	bl	8003710 <writePixel>
 80038b8:	e00b      	b.n	80038d2 <writeLine+0x186>
        } else {
            writePixel(x0, y0, color);
 80038ba:	2330      	movs	r3, #48	@ 0x30
 80038bc:	18fb      	adds	r3, r7, r3
 80038be:	881a      	ldrh	r2, [r3, #0]
 80038c0:	1d3b      	adds	r3, r7, #4
 80038c2:	2100      	movs	r1, #0
 80038c4:	5e59      	ldrsh	r1, [r3, r1]
 80038c6:	1dbb      	adds	r3, r7, #6
 80038c8:	2000      	movs	r0, #0
 80038ca:	5e1b      	ldrsh	r3, [r3, r0]
 80038cc:	0018      	movs	r0, r3
 80038ce:	f7ff ff1f 	bl	8003710 <writePixel>
        }
        err -= dy;
 80038d2:	211e      	movs	r1, #30
 80038d4:	187b      	adds	r3, r7, r1
 80038d6:	881a      	ldrh	r2, [r3, #0]
 80038d8:	230e      	movs	r3, #14
 80038da:	18fb      	adds	r3, r7, r3
 80038dc:	881b      	ldrh	r3, [r3, #0]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	b29a      	uxth	r2, r3
 80038e2:	187b      	adds	r3, r7, r1
 80038e4:	801a      	strh	r2, [r3, #0]
        if (err < 0) {
 80038e6:	187b      	adds	r3, r7, r1
 80038e8:	2200      	movs	r2, #0
 80038ea:	5e9b      	ldrsh	r3, [r3, r2]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	da11      	bge.n	8003914 <writeLine+0x1c8>
            y0 += ystep;
 80038f0:	1d3b      	adds	r3, r7, #4
 80038f2:	881a      	ldrh	r2, [r3, #0]
 80038f4:	231c      	movs	r3, #28
 80038f6:	18fb      	adds	r3, r7, r3
 80038f8:	881b      	ldrh	r3, [r3, #0]
 80038fa:	18d3      	adds	r3, r2, r3
 80038fc:	b29a      	uxth	r2, r3
 80038fe:	1d3b      	adds	r3, r7, #4
 8003900:	801a      	strh	r2, [r3, #0]
            err += dx;
 8003902:	187b      	adds	r3, r7, r1
 8003904:	881a      	ldrh	r2, [r3, #0]
 8003906:	2310      	movs	r3, #16
 8003908:	18fb      	adds	r3, r7, r3
 800390a:	881b      	ldrh	r3, [r3, #0]
 800390c:	18d3      	adds	r3, r2, r3
 800390e:	b29a      	uxth	r2, r3
 8003910:	187b      	adds	r3, r7, r1
 8003912:	801a      	strh	r2, [r3, #0]
    for (; x0<=x1; x0++) {
 8003914:	1dbb      	adds	r3, r7, #6
 8003916:	2200      	movs	r2, #0
 8003918:	5e9b      	ldrsh	r3, [r3, r2]
 800391a:	b29b      	uxth	r3, r3
 800391c:	3301      	adds	r3, #1
 800391e:	b29a      	uxth	r2, r3
 8003920:	1dbb      	adds	r3, r7, #6
 8003922:	801a      	strh	r2, [r3, #0]
 8003924:	1dba      	adds	r2, r7, #6
 8003926:	1cbb      	adds	r3, r7, #2
 8003928:	2100      	movs	r1, #0
 800392a:	5e52      	ldrsh	r2, [r2, r1]
 800392c:	2100      	movs	r1, #0
 800392e:	5e5b      	ldrsh	r3, [r3, r1]
 8003930:	429a      	cmp	r2, r3
 8003932:	ddaf      	ble.n	8003894 <writeLine+0x148>
        }
    }
}
 8003934:	46c0      	nop			@ (mov r8, r8)
 8003936:	46c0      	nop			@ (mov r8, r8)
 8003938:	46bd      	mov	sp, r7
 800393a:	b008      	add	sp, #32
 800393c:	bdb0      	pop	{r4, r5, r7, pc}

0800393e <drawFastVLine>:

void  drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 800393e:	b5b0      	push	{r4, r5, r7, lr}
 8003940:	b084      	sub	sp, #16
 8003942:	af02      	add	r7, sp, #8
 8003944:	0005      	movs	r5, r0
 8003946:	000c      	movs	r4, r1
 8003948:	0010      	movs	r0, r2
 800394a:	0019      	movs	r1, r3
 800394c:	1dbb      	adds	r3, r7, #6
 800394e:	1c2a      	adds	r2, r5, #0
 8003950:	801a      	strh	r2, [r3, #0]
 8003952:	1d3b      	adds	r3, r7, #4
 8003954:	1c22      	adds	r2, r4, #0
 8003956:	801a      	strh	r2, [r3, #0]
 8003958:	1cbb      	adds	r3, r7, #2
 800395a:	1c02      	adds	r2, r0, #0
 800395c:	801a      	strh	r2, [r3, #0]
 800395e:	003b      	movs	r3, r7
 8003960:	1c0a      	adds	r2, r1, #0
 8003962:	801a      	strh	r2, [r3, #0]
	writeLine(x, y, x, y + h - 1, color);
 8003964:	1d3b      	adds	r3, r7, #4
 8003966:	881a      	ldrh	r2, [r3, #0]
 8003968:	1cbb      	adds	r3, r7, #2
 800396a:	881b      	ldrh	r3, [r3, #0]
 800396c:	18d3      	adds	r3, r2, r3
 800396e:	b29b      	uxth	r3, r3
 8003970:	3b01      	subs	r3, #1
 8003972:	b29b      	uxth	r3, r3
 8003974:	b21c      	sxth	r4, r3
 8003976:	1dbb      	adds	r3, r7, #6
 8003978:	2200      	movs	r2, #0
 800397a:	5e9a      	ldrsh	r2, [r3, r2]
 800397c:	1d3b      	adds	r3, r7, #4
 800397e:	2100      	movs	r1, #0
 8003980:	5e59      	ldrsh	r1, [r3, r1]
 8003982:	1dbb      	adds	r3, r7, #6
 8003984:	2000      	movs	r0, #0
 8003986:	5e18      	ldrsh	r0, [r3, r0]
 8003988:	003b      	movs	r3, r7
 800398a:	881b      	ldrh	r3, [r3, #0]
 800398c:	9300      	str	r3, [sp, #0]
 800398e:	0023      	movs	r3, r4
 8003990:	f7ff fedc 	bl	800374c <writeLine>
}
 8003994:	46c0      	nop			@ (mov r8, r8)
 8003996:	46bd      	mov	sp, r7
 8003998:	b002      	add	sp, #8
 800399a:	bdb0      	pop	{r4, r5, r7, pc}

0800399c <drawFastHLine>:
void  drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 800399c:	b5b0      	push	{r4, r5, r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af02      	add	r7, sp, #8
 80039a2:	0005      	movs	r5, r0
 80039a4:	000c      	movs	r4, r1
 80039a6:	0010      	movs	r0, r2
 80039a8:	0019      	movs	r1, r3
 80039aa:	1dbb      	adds	r3, r7, #6
 80039ac:	1c2a      	adds	r2, r5, #0
 80039ae:	801a      	strh	r2, [r3, #0]
 80039b0:	1d3b      	adds	r3, r7, #4
 80039b2:	1c22      	adds	r2, r4, #0
 80039b4:	801a      	strh	r2, [r3, #0]
 80039b6:	1cbb      	adds	r3, r7, #2
 80039b8:	1c02      	adds	r2, r0, #0
 80039ba:	801a      	strh	r2, [r3, #0]
 80039bc:	003b      	movs	r3, r7
 80039be:	1c0a      	adds	r2, r1, #0
 80039c0:	801a      	strh	r2, [r3, #0]
	writeLine(x, y, x + w - 1, y, color);
 80039c2:	1dbb      	adds	r3, r7, #6
 80039c4:	881a      	ldrh	r2, [r3, #0]
 80039c6:	1cbb      	adds	r3, r7, #2
 80039c8:	881b      	ldrh	r3, [r3, #0]
 80039ca:	18d3      	adds	r3, r2, r3
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	3b01      	subs	r3, #1
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	b21a      	sxth	r2, r3
 80039d4:	1d3b      	adds	r3, r7, #4
 80039d6:	2400      	movs	r4, #0
 80039d8:	5f1c      	ldrsh	r4, [r3, r4]
 80039da:	1d3b      	adds	r3, r7, #4
 80039dc:	2100      	movs	r1, #0
 80039de:	5e59      	ldrsh	r1, [r3, r1]
 80039e0:	1dbb      	adds	r3, r7, #6
 80039e2:	2000      	movs	r0, #0
 80039e4:	5e18      	ldrsh	r0, [r3, r0]
 80039e6:	003b      	movs	r3, r7
 80039e8:	881b      	ldrh	r3, [r3, #0]
 80039ea:	9300      	str	r3, [sp, #0]
 80039ec:	0023      	movs	r3, r4
 80039ee:	f7ff fead 	bl	800374c <writeLine>
}
 80039f2:	46c0      	nop			@ (mov r8, r8)
 80039f4:	46bd      	mov	sp, r7
 80039f6:	b002      	add	sp, #8
 80039f8:	bdb0      	pop	{r4, r5, r7, pc}

080039fa <drawLine>:

void drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 80039fa:	b5b0      	push	{r4, r5, r7, lr}
 80039fc:	b086      	sub	sp, #24
 80039fe:	af02      	add	r7, sp, #8
 8003a00:	0005      	movs	r5, r0
 8003a02:	000c      	movs	r4, r1
 8003a04:	0010      	movs	r0, r2
 8003a06:	0019      	movs	r1, r3
 8003a08:	1dbb      	adds	r3, r7, #6
 8003a0a:	1c2a      	adds	r2, r5, #0
 8003a0c:	801a      	strh	r2, [r3, #0]
 8003a0e:	1d3b      	adds	r3, r7, #4
 8003a10:	1c22      	adds	r2, r4, #0
 8003a12:	801a      	strh	r2, [r3, #0]
 8003a14:	1cbb      	adds	r3, r7, #2
 8003a16:	1c02      	adds	r2, r0, #0
 8003a18:	801a      	strh	r2, [r3, #0]
 8003a1a:	003b      	movs	r3, r7
 8003a1c:	1c0a      	adds	r2, r1, #0
 8003a1e:	801a      	strh	r2, [r3, #0]
    if(x0 == x1){
 8003a20:	1dba      	adds	r2, r7, #6
 8003a22:	1cbb      	adds	r3, r7, #2
 8003a24:	2100      	movs	r1, #0
 8003a26:	5e52      	ldrsh	r2, [r2, r1]
 8003a28:	2100      	movs	r1, #0
 8003a2a:	5e5b      	ldrsh	r3, [r3, r1]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d12a      	bne.n	8003a86 <drawLine+0x8c>
        if(y0 > y1) _swap_int16_t(y0, y1);
 8003a30:	1d3a      	adds	r2, r7, #4
 8003a32:	003b      	movs	r3, r7
 8003a34:	2100      	movs	r1, #0
 8003a36:	5e52      	ldrsh	r2, [r2, r1]
 8003a38:	2100      	movs	r1, #0
 8003a3a:	5e5b      	ldrsh	r3, [r3, r1]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	dd0c      	ble.n	8003a5a <drawLine+0x60>
 8003a40:	210c      	movs	r1, #12
 8003a42:	187b      	adds	r3, r7, r1
 8003a44:	1d3a      	adds	r2, r7, #4
 8003a46:	8812      	ldrh	r2, [r2, #0]
 8003a48:	801a      	strh	r2, [r3, #0]
 8003a4a:	1d3b      	adds	r3, r7, #4
 8003a4c:	003a      	movs	r2, r7
 8003a4e:	8812      	ldrh	r2, [r2, #0]
 8003a50:	801a      	strh	r2, [r3, #0]
 8003a52:	003b      	movs	r3, r7
 8003a54:	187a      	adds	r2, r7, r1
 8003a56:	8812      	ldrh	r2, [r2, #0]
 8003a58:	801a      	strh	r2, [r3, #0]
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
 8003a5a:	003b      	movs	r3, r7
 8003a5c:	881a      	ldrh	r2, [r3, #0]
 8003a5e:	1d3b      	adds	r3, r7, #4
 8003a60:	881b      	ldrh	r3, [r3, #0]
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	3301      	adds	r3, #1
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	b21a      	sxth	r2, r3
 8003a6c:	2320      	movs	r3, #32
 8003a6e:	18fb      	adds	r3, r7, r3
 8003a70:	881c      	ldrh	r4, [r3, #0]
 8003a72:	1d3b      	adds	r3, r7, #4
 8003a74:	2100      	movs	r1, #0
 8003a76:	5e59      	ldrsh	r1, [r3, r1]
 8003a78:	1dbb      	adds	r3, r7, #6
 8003a7a:	2000      	movs	r0, #0
 8003a7c:	5e18      	ldrsh	r0, [r3, r0]
 8003a7e:	0023      	movs	r3, r4
 8003a80:	f7ff ff5d 	bl	800393e <drawFastVLine>
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
    } else {
        writeLine(x0, y0, x1, y1, color);
    }
}
 8003a84:	e045      	b.n	8003b12 <drawLine+0x118>
    } else if(y0 == y1){
 8003a86:	1d3a      	adds	r2, r7, #4
 8003a88:	003b      	movs	r3, r7
 8003a8a:	2100      	movs	r1, #0
 8003a8c:	5e52      	ldrsh	r2, [r2, r1]
 8003a8e:	2100      	movs	r1, #0
 8003a90:	5e5b      	ldrsh	r3, [r3, r1]
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d12a      	bne.n	8003aec <drawLine+0xf2>
        if(x0 > x1) _swap_int16_t(x0, x1);
 8003a96:	1dba      	adds	r2, r7, #6
 8003a98:	1cbb      	adds	r3, r7, #2
 8003a9a:	2100      	movs	r1, #0
 8003a9c:	5e52      	ldrsh	r2, [r2, r1]
 8003a9e:	2100      	movs	r1, #0
 8003aa0:	5e5b      	ldrsh	r3, [r3, r1]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	dd0c      	ble.n	8003ac0 <drawLine+0xc6>
 8003aa6:	210e      	movs	r1, #14
 8003aa8:	187b      	adds	r3, r7, r1
 8003aaa:	1dba      	adds	r2, r7, #6
 8003aac:	8812      	ldrh	r2, [r2, #0]
 8003aae:	801a      	strh	r2, [r3, #0]
 8003ab0:	1dbb      	adds	r3, r7, #6
 8003ab2:	1cba      	adds	r2, r7, #2
 8003ab4:	8812      	ldrh	r2, [r2, #0]
 8003ab6:	801a      	strh	r2, [r3, #0]
 8003ab8:	1cbb      	adds	r3, r7, #2
 8003aba:	187a      	adds	r2, r7, r1
 8003abc:	8812      	ldrh	r2, [r2, #0]
 8003abe:	801a      	strh	r2, [r3, #0]
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
 8003ac0:	1cbb      	adds	r3, r7, #2
 8003ac2:	881a      	ldrh	r2, [r3, #0]
 8003ac4:	1dbb      	adds	r3, r7, #6
 8003ac6:	881b      	ldrh	r3, [r3, #0]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	3301      	adds	r3, #1
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	b21a      	sxth	r2, r3
 8003ad2:	2320      	movs	r3, #32
 8003ad4:	18fb      	adds	r3, r7, r3
 8003ad6:	881c      	ldrh	r4, [r3, #0]
 8003ad8:	1d3b      	adds	r3, r7, #4
 8003ada:	2100      	movs	r1, #0
 8003adc:	5e59      	ldrsh	r1, [r3, r1]
 8003ade:	1dbb      	adds	r3, r7, #6
 8003ae0:	2000      	movs	r0, #0
 8003ae2:	5e18      	ldrsh	r0, [r3, r0]
 8003ae4:	0023      	movs	r3, r4
 8003ae6:	f7ff ff59 	bl	800399c <drawFastHLine>
}
 8003aea:	e012      	b.n	8003b12 <drawLine+0x118>
        writeLine(x0, y0, x1, y1, color);
 8003aec:	003b      	movs	r3, r7
 8003aee:	2400      	movs	r4, #0
 8003af0:	5f1c      	ldrsh	r4, [r3, r4]
 8003af2:	1cbb      	adds	r3, r7, #2
 8003af4:	2200      	movs	r2, #0
 8003af6:	5e9a      	ldrsh	r2, [r3, r2]
 8003af8:	1d3b      	adds	r3, r7, #4
 8003afa:	2100      	movs	r1, #0
 8003afc:	5e59      	ldrsh	r1, [r3, r1]
 8003afe:	1dbb      	adds	r3, r7, #6
 8003b00:	2000      	movs	r0, #0
 8003b02:	5e18      	ldrsh	r0, [r3, r0]
 8003b04:	2320      	movs	r3, #32
 8003b06:	18fb      	adds	r3, r7, r3
 8003b08:	881b      	ldrh	r3, [r3, #0]
 8003b0a:	9300      	str	r3, [sp, #0]
 8003b0c:	0023      	movs	r3, r4
 8003b0e:	f7ff fe1d 	bl	800374c <writeLine>
}
 8003b12:	46c0      	nop			@ (mov r8, r8)
 8003b14:	46bd      	mov	sp, r7
 8003b16:	b004      	add	sp, #16
 8003b18:	bdb0      	pop	{r4, r5, r7, pc}

08003b1a <drawString>:
void drawString(int16_t x, int16_t y, char* c, int16_t textColor, int16_t bgColor, uint8_t size, uint8_t spacing)
{
 8003b1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b1c:	b089      	sub	sp, #36	@ 0x24
 8003b1e:	af02      	add	r7, sp, #8
 8003b20:	0004      	movs	r4, r0
 8003b22:	0008      	movs	r0, r1
 8003b24:	60ba      	str	r2, [r7, #8]
 8003b26:	0019      	movs	r1, r3
 8003b28:	230e      	movs	r3, #14
 8003b2a:	18fb      	adds	r3, r7, r3
 8003b2c:	1c22      	adds	r2, r4, #0
 8003b2e:	801a      	strh	r2, [r3, #0]
 8003b30:	230c      	movs	r3, #12
 8003b32:	18fb      	adds	r3, r7, r3
 8003b34:	1c02      	adds	r2, r0, #0
 8003b36:	801a      	strh	r2, [r3, #0]
 8003b38:	1dbb      	adds	r3, r7, #6
 8003b3a:	1c0a      	adds	r2, r1, #0
 8003b3c:	801a      	strh	r2, [r3, #0]
	uint16_t i =0;
 8003b3e:	2316      	movs	r3, #22
 8003b40:	18fb      	adds	r3, r7, r3
 8003b42:	2200      	movs	r2, #0
 8003b44:	801a      	strh	r2, [r3, #0]

	while(c[i])
 8003b46:	e03f      	b.n	8003bc8 <drawString+0xae>
	{
		drawChar(x, y, c[i], textColor, bgColor, size);
 8003b48:	2516      	movs	r5, #22
 8003b4a:	197b      	adds	r3, r7, r5
 8003b4c:	881b      	ldrh	r3, [r3, #0]
 8003b4e:	68ba      	ldr	r2, [r7, #8]
 8003b50:	18d3      	adds	r3, r2, r3
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	469c      	mov	ip, r3
 8003b56:	1dbb      	adds	r3, r7, #6
 8003b58:	2400      	movs	r4, #0
 8003b5a:	5f1c      	ldrsh	r4, [r3, r4]
 8003b5c:	230c      	movs	r3, #12
 8003b5e:	18fb      	adds	r3, r7, r3
 8003b60:	2100      	movs	r1, #0
 8003b62:	5e59      	ldrsh	r1, [r3, r1]
 8003b64:	260e      	movs	r6, #14
 8003b66:	19bb      	adds	r3, r7, r6
 8003b68:	2000      	movs	r0, #0
 8003b6a:	5e18      	ldrsh	r0, [r3, r0]
 8003b6c:	232c      	movs	r3, #44	@ 0x2c
 8003b6e:	2208      	movs	r2, #8
 8003b70:	189b      	adds	r3, r3, r2
 8003b72:	19db      	adds	r3, r3, r7
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	9301      	str	r3, [sp, #4]
 8003b78:	2328      	movs	r3, #40	@ 0x28
 8003b7a:	189b      	adds	r3, r3, r2
 8003b7c:	19db      	adds	r3, r3, r7
 8003b7e:	2200      	movs	r2, #0
 8003b80:	5e9b      	ldrsh	r3, [r3, r2]
 8003b82:	9300      	str	r3, [sp, #0]
 8003b84:	0023      	movs	r3, r4
 8003b86:	4662      	mov	r2, ip
 8003b88:	f000 f82c 	bl	8003be4 <drawChar>
		x+=(size*6)+spacing;
 8003b8c:	232c      	movs	r3, #44	@ 0x2c
 8003b8e:	2108      	movs	r1, #8
 8003b90:	185b      	adds	r3, r3, r1
 8003b92:	19db      	adds	r3, r3, r7
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	1c1a      	adds	r2, r3, #0
 8003b9a:	1c13      	adds	r3, r2, #0
 8003b9c:	18db      	adds	r3, r3, r3
 8003b9e:	189b      	adds	r3, r3, r2
 8003ba0:	18db      	adds	r3, r3, r3
 8003ba2:	b29a      	uxth	r2, r3
 8003ba4:	2330      	movs	r3, #48	@ 0x30
 8003ba6:	185b      	adds	r3, r3, r1
 8003ba8:	19db      	adds	r3, r3, r7
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	18d3      	adds	r3, r2, r3
 8003bb0:	b29a      	uxth	r2, r3
 8003bb2:	19bb      	adds	r3, r7, r6
 8003bb4:	881b      	ldrh	r3, [r3, #0]
 8003bb6:	18d3      	adds	r3, r2, r3
 8003bb8:	b29a      	uxth	r2, r3
 8003bba:	19bb      	adds	r3, r7, r6
 8003bbc:	801a      	strh	r2, [r3, #0]
		i++;
 8003bbe:	197b      	adds	r3, r7, r5
 8003bc0:	881a      	ldrh	r2, [r3, #0]
 8003bc2:	197b      	adds	r3, r7, r5
 8003bc4:	3201      	adds	r2, #1
 8003bc6:	801a      	strh	r2, [r3, #0]
	while(c[i])
 8003bc8:	2316      	movs	r3, #22
 8003bca:	18fb      	adds	r3, r7, r3
 8003bcc:	881b      	ldrh	r3, [r3, #0]
 8003bce:	68ba      	ldr	r2, [r7, #8]
 8003bd0:	18d3      	adds	r3, r2, r3
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d1b7      	bne.n	8003b48 <drawString+0x2e>
	}
}
 8003bd8:	46c0      	nop			@ (mov r8, r8)
 8003bda:	46c0      	nop			@ (mov r8, r8)
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	b007      	add	sp, #28
 8003be0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003be4 <drawChar>:
void drawChar(int16_t x, int16_t y, char c, int16_t textColor, int16_t bgColor, uint8_t size){
 8003be4:	b5b0      	push	{r4, r5, r7, lr}
 8003be6:	b088      	sub	sp, #32
 8003be8:	af02      	add	r7, sp, #8
 8003bea:	0005      	movs	r5, r0
 8003bec:	000c      	movs	r4, r1
 8003bee:	0010      	movs	r0, r2
 8003bf0:	0019      	movs	r1, r3
 8003bf2:	1dbb      	adds	r3, r7, #6
 8003bf4:	1c2a      	adds	r2, r5, #0
 8003bf6:	801a      	strh	r2, [r3, #0]
 8003bf8:	1d3b      	adds	r3, r7, #4
 8003bfa:	1c22      	adds	r2, r4, #0
 8003bfc:	801a      	strh	r2, [r3, #0]
 8003bfe:	1cfb      	adds	r3, r7, #3
 8003c00:	1c02      	adds	r2, r0, #0
 8003c02:	701a      	strb	r2, [r3, #0]
 8003c04:	003b      	movs	r3, r7
 8003c06:	1c0a      	adds	r2, r1, #0
 8003c08:	801a      	strh	r2, [r3, #0]
     //(y >= _height))           //||
     //((x + 5 * size - 1) < 0) ||
     //((y + 8 * size - 1) < 0))
   // return;

  for (i=0; i<6; i++ ) {
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	613b      	str	r3, [r7, #16]
 8003c0e:	e0bd      	b.n	8003d8c <drawChar+0x1a8>
    if ((i) == 5)
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	2b05      	cmp	r3, #5
 8003c14:	d104      	bne.n	8003c20 <drawChar+0x3c>
      line = 0x0;
 8003c16:	2317      	movs	r3, #23
 8003c18:	18fb      	adds	r3, r7, r3
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	701a      	strb	r2, [r3, #0]
 8003c1e:	e00b      	b.n	8003c38 <drawChar+0x54>
    else
      line = Font[(c*5)+(i)];
 8003c20:	1cfb      	adds	r3, r7, #3
 8003c22:	781a      	ldrb	r2, [r3, #0]
 8003c24:	0013      	movs	r3, r2
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	189a      	adds	r2, r3, r2
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	18d2      	adds	r2, r2, r3
 8003c2e:	2317      	movs	r3, #23
 8003c30:	18fb      	adds	r3, r7, r3
 8003c32:	495b      	ldr	r1, [pc, #364]	@ (8003da0 <drawChar+0x1bc>)
 8003c34:	5c8a      	ldrb	r2, [r1, r2]
 8003c36:	701a      	strb	r2, [r3, #0]
    for (j = 0; j<8; j++) {
 8003c38:	2300      	movs	r3, #0
 8003c3a:	60fb      	str	r3, [r7, #12]
 8003c3c:	e09f      	b.n	8003d7e <drawChar+0x19a>
      if (line & 0x1) {
 8003c3e:	2317      	movs	r3, #23
 8003c40:	18fb      	adds	r3, r7, r3
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	2201      	movs	r2, #1
 8003c46:	4013      	ands	r3, r2
 8003c48:	d043      	beq.n	8003cd2 <drawChar+0xee>
        if (size == 1)
 8003c4a:	232c      	movs	r3, #44	@ 0x2c
 8003c4c:	18fb      	adds	r3, r7, r3
 8003c4e:	781b      	ldrb	r3, [r3, #0]
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d115      	bne.n	8003c80 <drawChar+0x9c>
          writePixel(x+(i), y+(7-j), textColor);
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	b29a      	uxth	r2, r3
 8003c58:	1dbb      	adds	r3, r7, #6
 8003c5a:	881b      	ldrh	r3, [r3, #0]
 8003c5c:	18d3      	adds	r3, r2, r3
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	b218      	sxth	r0, r3
 8003c62:	1d3b      	adds	r3, r7, #4
 8003c64:	881a      	ldrh	r2, [r3, #0]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	3307      	adds	r3, #7
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	b219      	sxth	r1, r3
 8003c74:	003b      	movs	r3, r7
 8003c76:	881b      	ldrh	r3, [r3, #0]
 8003c78:	001a      	movs	r2, r3
 8003c7a:	f7ff fd49 	bl	8003710 <writePixel>
 8003c7e:	e075      	b.n	8003d6c <drawChar+0x188>
        else {
          fillRect(x+((i)*size), y+((7-j)*size), size, size, textColor);
 8003c80:	212c      	movs	r1, #44	@ 0x2c
 8003c82:	187b      	adds	r3, r7, r1
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	693a      	ldr	r2, [r7, #16]
 8003c8a:	b292      	uxth	r2, r2
 8003c8c:	4353      	muls	r3, r2
 8003c8e:	b29a      	uxth	r2, r3
 8003c90:	1dbb      	adds	r3, r7, #6
 8003c92:	881b      	ldrh	r3, [r3, #0]
 8003c94:	18d3      	adds	r3, r2, r3
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	b218      	sxth	r0, r3
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2207      	movs	r2, #7
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	000c      	movs	r4, r1
 8003ca4:	187a      	adds	r2, r7, r1
 8003ca6:	7812      	ldrb	r2, [r2, #0]
 8003ca8:	b292      	uxth	r2, r2
 8003caa:	4353      	muls	r3, r2
 8003cac:	b29a      	uxth	r2, r3
 8003cae:	1d3b      	adds	r3, r7, #4
 8003cb0:	881b      	ldrh	r3, [r3, #0]
 8003cb2:	18d3      	adds	r3, r2, r3
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	b219      	sxth	r1, r3
 8003cb8:	193b      	adds	r3, r7, r4
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	b21a      	sxth	r2, r3
 8003cbe:	193b      	adds	r3, r7, r4
 8003cc0:	781b      	ldrb	r3, [r3, #0]
 8003cc2:	b21c      	sxth	r4, r3
 8003cc4:	003b      	movs	r3, r7
 8003cc6:	881b      	ldrh	r3, [r3, #0]
 8003cc8:	9300      	str	r3, [sp, #0]
 8003cca:	0023      	movs	r3, r4
 8003ccc:	f7ff fc9c 	bl	8003608 <fillRect>
 8003cd0:	e04c      	b.n	8003d6c <drawChar+0x188>
        }
      } else if (bgColor != textColor) {
 8003cd2:	2428      	movs	r4, #40	@ 0x28
 8003cd4:	193b      	adds	r3, r7, r4
 8003cd6:	0039      	movs	r1, r7
 8003cd8:	2200      	movs	r2, #0
 8003cda:	5e9a      	ldrsh	r2, [r3, r2]
 8003cdc:	2300      	movs	r3, #0
 8003cde:	5ecb      	ldrsh	r3, [r1, r3]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d043      	beq.n	8003d6c <drawChar+0x188>
        if (size == 1) // default size
 8003ce4:	232c      	movs	r3, #44	@ 0x2c
 8003ce6:	18fb      	adds	r3, r7, r3
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d115      	bne.n	8003d1a <drawChar+0x136>
          writePixel(x+(i), y+(7-j), bgColor);
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	b29a      	uxth	r2, r3
 8003cf2:	1dbb      	adds	r3, r7, #6
 8003cf4:	881b      	ldrh	r3, [r3, #0]
 8003cf6:	18d3      	adds	r3, r2, r3
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	b218      	sxth	r0, r3
 8003cfc:	1d3b      	adds	r3, r7, #4
 8003cfe:	881a      	ldrh	r2, [r3, #0]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	3307      	adds	r3, #7
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	b219      	sxth	r1, r3
 8003d0e:	193b      	adds	r3, r7, r4
 8003d10:	881b      	ldrh	r3, [r3, #0]
 8003d12:	001a      	movs	r2, r3
 8003d14:	f7ff fcfc 	bl	8003710 <writePixel>
 8003d18:	e028      	b.n	8003d6c <drawChar+0x188>
        else {  // big size
          fillRect(x+(i)*size, y+(7-j)*size, size, size, bgColor);
 8003d1a:	212c      	movs	r1, #44	@ 0x2c
 8003d1c:	187b      	adds	r3, r7, r1
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	693a      	ldr	r2, [r7, #16]
 8003d24:	b292      	uxth	r2, r2
 8003d26:	4353      	muls	r3, r2
 8003d28:	b29a      	uxth	r2, r3
 8003d2a:	1dbb      	adds	r3, r7, #6
 8003d2c:	881b      	ldrh	r3, [r3, #0]
 8003d2e:	18d3      	adds	r3, r2, r3
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	b218      	sxth	r0, r3
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2207      	movs	r2, #7
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	000c      	movs	r4, r1
 8003d3e:	187a      	adds	r2, r7, r1
 8003d40:	7812      	ldrb	r2, [r2, #0]
 8003d42:	b292      	uxth	r2, r2
 8003d44:	4353      	muls	r3, r2
 8003d46:	b29a      	uxth	r2, r3
 8003d48:	1d3b      	adds	r3, r7, #4
 8003d4a:	881b      	ldrh	r3, [r3, #0]
 8003d4c:	18d3      	adds	r3, r2, r3
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	b219      	sxth	r1, r3
 8003d52:	193b      	adds	r3, r7, r4
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	b21a      	sxth	r2, r3
 8003d58:	193b      	adds	r3, r7, r4
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	b21c      	sxth	r4, r3
 8003d5e:	2328      	movs	r3, #40	@ 0x28
 8003d60:	18fb      	adds	r3, r7, r3
 8003d62:	881b      	ldrh	r3, [r3, #0]
 8003d64:	9300      	str	r3, [sp, #0]
 8003d66:	0023      	movs	r3, r4
 8003d68:	f7ff fc4e 	bl	8003608 <fillRect>
        }
      }
      line >>= 1;
 8003d6c:	2217      	movs	r2, #23
 8003d6e:	18bb      	adds	r3, r7, r2
 8003d70:	18ba      	adds	r2, r7, r2
 8003d72:	7812      	ldrb	r2, [r2, #0]
 8003d74:	0852      	lsrs	r2, r2, #1
 8003d76:	701a      	strb	r2, [r3, #0]
    for (j = 0; j<8; j++) {
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	60fb      	str	r3, [r7, #12]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2b07      	cmp	r3, #7
 8003d82:	dc00      	bgt.n	8003d86 <drawChar+0x1a2>
 8003d84:	e75b      	b.n	8003c3e <drawChar+0x5a>
  for (i=0; i<6; i++ ) {
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	3301      	adds	r3, #1
 8003d8a:	613b      	str	r3, [r7, #16]
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	2b05      	cmp	r3, #5
 8003d90:	dc00      	bgt.n	8003d94 <drawChar+0x1b0>
 8003d92:	e73d      	b.n	8003c10 <drawChar+0x2c>
    }
  }
}
 8003d94:	46c0      	nop			@ (mov r8, r8)
 8003d96:	46c0      	nop			@ (mov r8, r8)
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	b006      	add	sp, #24
 8003d9c:	bdb0      	pop	{r4, r5, r7, pc}
 8003d9e:	46c0      	nop			@ (mov r8, r8)
 8003da0:	08010f84 	.word	0x08010f84

08003da4 <fillScreen>:
        if(a > b) _swap_int16_t(a,b);
        drawFastHLine(a, y, b-a+1, color);
    }
}

void fillScreen(uint16_t color) {
 8003da4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003da6:	b091      	sub	sp, #68	@ 0x44
 8003da8:	af04      	add	r7, sp, #16
 8003daa:	231e      	movs	r3, #30
 8003dac:	18f9      	adds	r1, r7, r3
 8003dae:	8008      	strh	r0, [r1, #0]
 8003db0:	4669      	mov	r1, sp
 8003db2:	000e      	movs	r6, r1
    uint16_t pallette[] = {color};
 8003db4:	210c      	movs	r1, #12
 8003db6:	2318      	movs	r3, #24
 8003db8:	18cb      	adds	r3, r1, r3
 8003dba:	19d9      	adds	r1, r3, r7
 8003dbc:	231e      	movs	r3, #30
 8003dbe:	18f8      	adds	r0, r7, r3
 8003dc0:	8800      	ldrh	r0, [r0, #0]
 8003dc2:	8008      	strh	r0, [r1, #0]
    uint16_t pixels[_width*_height][2];
 8003dc4:	492f      	ldr	r1, [pc, #188]	@ (8003e84 <fillScreen+0xe0>)
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	5ec9      	ldrsh	r1, [r1, r3]
 8003dca:	0008      	movs	r0, r1
 8003dcc:	492e      	ldr	r1, [pc, #184]	@ (8003e88 <fillScreen+0xe4>)
 8003dce:	2300      	movs	r3, #0
 8003dd0:	5ec9      	ldrsh	r1, [r1, r3]
 8003dd2:	4341      	muls	r1, r0
 8003dd4:	1e48      	subs	r0, r1, #1
 8003dd6:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8003dd8:	0008      	movs	r0, r1
 8003dda:	6138      	str	r0, [r7, #16]
 8003ddc:	2000      	movs	r0, #0
 8003dde:	6178      	str	r0, [r7, #20]
 8003de0:	693a      	ldr	r2, [r7, #16]
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	0010      	movs	r0, r2
 8003de6:	0ec0      	lsrs	r0, r0, #27
 8003de8:	613a      	str	r2, [r7, #16]
 8003dea:	617b      	str	r3, [r7, #20]
 8003dec:	015d      	lsls	r5, r3, #5
 8003dee:	4305      	orrs	r5, r0
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	015c      	lsls	r4, r3, #5
 8003df4:	0008      	movs	r0, r1
 8003df6:	6038      	str	r0, [r7, #0]
 8003df8:	2000      	movs	r0, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	683c      	ldr	r4, [r7, #0]
 8003dfe:	687d      	ldr	r5, [r7, #4]
 8003e00:	0023      	movs	r3, r4
 8003e02:	0ed8      	lsrs	r0, r3, #27
 8003e04:	002b      	movs	r3, r5
 8003e06:	015b      	lsls	r3, r3, #5
 8003e08:	60fb      	str	r3, [r7, #12]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	4303      	orrs	r3, r0
 8003e0e:	60fb      	str	r3, [r7, #12]
 8003e10:	0023      	movs	r3, r4
 8003e12:	015b      	lsls	r3, r3, #5
 8003e14:	60bb      	str	r3, [r7, #8]
 8003e16:	000b      	movs	r3, r1
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	3307      	adds	r3, #7
 8003e1c:	08db      	lsrs	r3, r3, #3
 8003e1e:	00db      	lsls	r3, r3, #3
 8003e20:	466a      	mov	r2, sp
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	469d      	mov	sp, r3
 8003e26:	ab04      	add	r3, sp, #16
 8003e28:	3301      	adds	r3, #1
 8003e2a:	085b      	lsrs	r3, r3, #1
 8003e2c:	005b      	lsls	r3, r3, #1
 8003e2e:	62bb      	str	r3, [r7, #40]	@ 0x28

    pixels[0][0] = 0;
 8003e30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e32:	2200      	movs	r2, #0
 8003e34:	801a      	strh	r2, [r3, #0]
    pixels[0][1] = _width*_height;
 8003e36:	4b13      	ldr	r3, [pc, #76]	@ (8003e84 <fillScreen+0xe0>)
 8003e38:	2200      	movs	r2, #0
 8003e3a:	5e9b      	ldrsh	r3, [r3, r2]
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	4a12      	ldr	r2, [pc, #72]	@ (8003e88 <fillScreen+0xe4>)
 8003e40:	2000      	movs	r0, #0
 8003e42:	5e12      	ldrsh	r2, [r2, r0]
 8003e44:	b292      	uxth	r2, r2
 8003e46:	4353      	muls	r3, r2
 8003e48:	b29a      	uxth	r2, r3
 8003e4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e4c:	805a      	strh	r2, [r3, #2]
    drawImage(pixels, pallette, 0, 0, _width, _height, 1);
 8003e4e:	4b0d      	ldr	r3, [pc, #52]	@ (8003e84 <fillScreen+0xe0>)
 8003e50:	2200      	movs	r2, #0
 8003e52:	5e9b      	ldrsh	r3, [r3, r2]
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	4a0c      	ldr	r2, [pc, #48]	@ (8003e88 <fillScreen+0xe4>)
 8003e58:	2000      	movs	r0, #0
 8003e5a:	5e12      	ldrsh	r2, [r2, r0]
 8003e5c:	b292      	uxth	r2, r2
 8003e5e:	210c      	movs	r1, #12
 8003e60:	2018      	movs	r0, #24
 8003e62:	1809      	adds	r1, r1, r0
 8003e64:	19c9      	adds	r1, r1, r7
 8003e66:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003e68:	2401      	movs	r4, #1
 8003e6a:	9402      	str	r4, [sp, #8]
 8003e6c:	9201      	str	r2, [sp, #4]
 8003e6e:	9300      	str	r3, [sp, #0]
 8003e70:	2300      	movs	r3, #0
 8003e72:	2200      	movs	r2, #0
 8003e74:	f000 f80a 	bl	8003e8c <drawImage>
 8003e78:	46b5      	mov	sp, r6
	//fillRect(0, 0, _width, _height, color);
}
 8003e7a:	46c0      	nop			@ (mov r8, r8)
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	b00d      	add	sp, #52	@ 0x34
 8003e80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e82:	46c0      	nop			@ (mov r8, r8)
 8003e84:	20000bcc 	.word	0x20000bcc
 8003e88:	20000bce 	.word	0x20000bce

08003e8c <drawImage>:

void drawImage(uint16_t image[][2], uint16_t palette[], uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t c)
{
 8003e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e8e:	46c6      	mov	lr, r8
 8003e90:	b500      	push	{lr}
 8003e92:	b092      	sub	sp, #72	@ 0x48
 8003e94:	af02      	add	r7, sp, #8
 8003e96:	6278      	str	r0, [r7, #36]	@ 0x24
 8003e98:	6239      	str	r1, [r7, #32]
 8003e9a:	0019      	movs	r1, r3
 8003e9c:	231e      	movs	r3, #30
 8003e9e:	18fb      	adds	r3, r7, r3
 8003ea0:	801a      	strh	r2, [r3, #0]
 8003ea2:	231c      	movs	r3, #28
 8003ea4:	18fb      	adds	r3, r7, r3
 8003ea6:	1c0a      	adds	r2, r1, #0
 8003ea8:	801a      	strh	r2, [r3, #0]
 8003eaa:	466b      	mov	r3, sp
 8003eac:	4698      	mov	r8, r3
	uint16_t i;
	uint16_t j;
	uint16_t totalInd =0;
 8003eae:	2322      	movs	r3, #34	@ 0x22
 8003eb0:	2118      	movs	r1, #24
 8003eb2:	185b      	adds	r3, r3, r1
 8003eb4:	19db      	adds	r3, r3, r7
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	801a      	strh	r2, [r3, #0]
	uint16_t ind;
	uint16_t count;
	uint16_t bufffer[w*h];
 8003eba:	2340      	movs	r3, #64	@ 0x40
 8003ebc:	185b      	adds	r3, r3, r1
 8003ebe:	19db      	adds	r3, r3, r7
 8003ec0:	881b      	ldrh	r3, [r3, #0]
 8003ec2:	2244      	movs	r2, #68	@ 0x44
 8003ec4:	1852      	adds	r2, r2, r1
 8003ec6:	19d2      	adds	r2, r2, r7
 8003ec8:	8812      	ldrh	r2, [r2, #0]
 8003eca:	4353      	muls	r3, r2
 8003ecc:	1e5a      	subs	r2, r3, #1
 8003ece:	637a      	str	r2, [r7, #52]	@ 0x34
 8003ed0:	001a      	movs	r2, r3
 8003ed2:	60ba      	str	r2, [r7, #8]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	60fa      	str	r2, [r7, #12]
 8003ed8:	68b8      	ldr	r0, [r7, #8]
 8003eda:	68f9      	ldr	r1, [r7, #12]
 8003edc:	0002      	movs	r2, r0
 8003ede:	0f12      	lsrs	r2, r2, #28
 8003ee0:	000e      	movs	r6, r1
 8003ee2:	0136      	lsls	r6, r6, #4
 8003ee4:	617e      	str	r6, [r7, #20]
 8003ee6:	697e      	ldr	r6, [r7, #20]
 8003ee8:	4316      	orrs	r6, r2
 8003eea:	617e      	str	r6, [r7, #20]
 8003eec:	0002      	movs	r2, r0
 8003eee:	0112      	lsls	r2, r2, #4
 8003ef0:	613a      	str	r2, [r7, #16]
 8003ef2:	001a      	movs	r2, r3
 8003ef4:	603a      	str	r2, [r7, #0]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	607a      	str	r2, [r7, #4]
 8003efa:	6838      	ldr	r0, [r7, #0]
 8003efc:	6879      	ldr	r1, [r7, #4]
 8003efe:	0002      	movs	r2, r0
 8003f00:	0f12      	lsrs	r2, r2, #28
 8003f02:	000e      	movs	r6, r1
 8003f04:	0135      	lsls	r5, r6, #4
 8003f06:	4315      	orrs	r5, r2
 8003f08:	0002      	movs	r2, r0
 8003f0a:	0114      	lsls	r4, r2, #4
 8003f0c:	005b      	lsls	r3, r3, #1
 8003f0e:	3307      	adds	r3, #7
 8003f10:	08db      	lsrs	r3, r3, #3
 8003f12:	00db      	lsls	r3, r3, #3
 8003f14:	466a      	mov	r2, sp
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	469d      	mov	sp, r3
 8003f1a:	ab02      	add	r3, sp, #8
 8003f1c:	3301      	adds	r3, #1
 8003f1e:	085b      	lsrs	r3, r3, #1
 8003f20:	005b      	lsls	r3, r3, #1
 8003f22:	633b      	str	r3, [r7, #48]	@ 0x30
for(i=0; i<c; i++)
 8003f24:	2326      	movs	r3, #38	@ 0x26
 8003f26:	2118      	movs	r1, #24
 8003f28:	185b      	adds	r3, r3, r1
 8003f2a:	19db      	adds	r3, r3, r7
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	801a      	strh	r2, [r3, #0]
 8003f30:	e04d      	b.n	8003fce <drawImage+0x142>
{
	ind = image[i][0];
 8003f32:	2126      	movs	r1, #38	@ 0x26
 8003f34:	2018      	movs	r0, #24
 8003f36:	180b      	adds	r3, r1, r0
 8003f38:	19db      	adds	r3, r3, r7
 8003f3a:	881b      	ldrh	r3, [r3, #0]
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f40:	18d2      	adds	r2, r2, r3
 8003f42:	2316      	movs	r3, #22
 8003f44:	181b      	adds	r3, r3, r0
 8003f46:	19db      	adds	r3, r3, r7
 8003f48:	8812      	ldrh	r2, [r2, #0]
 8003f4a:	801a      	strh	r2, [r3, #0]
	count = image[i][1];
 8003f4c:	180b      	adds	r3, r1, r0
 8003f4e:	19db      	adds	r3, r3, r7
 8003f50:	881b      	ldrh	r3, [r3, #0]
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f56:	18d2      	adds	r2, r2, r3
 8003f58:	2314      	movs	r3, #20
 8003f5a:	181b      	adds	r3, r3, r0
 8003f5c:	19db      	adds	r3, r3, r7
 8003f5e:	8852      	ldrh	r2, [r2, #2]
 8003f60:	801a      	strh	r2, [r3, #0]
	for(j=0; j<count; j++)
 8003f62:	2324      	movs	r3, #36	@ 0x24
 8003f64:	181b      	adds	r3, r3, r0
 8003f66:	19db      	adds	r3, r3, r7
 8003f68:	2200      	movs	r2, #0
 8003f6a:	801a      	strh	r2, [r3, #0]
 8003f6c:	e01c      	b.n	8003fa8 <drawImage+0x11c>
	{
		bufffer[totalInd++] = palette[ind];
 8003f6e:	2316      	movs	r3, #22
 8003f70:	2418      	movs	r4, #24
 8003f72:	191b      	adds	r3, r3, r4
 8003f74:	19db      	adds	r3, r3, r7
 8003f76:	881b      	ldrh	r3, [r3, #0]
 8003f78:	005b      	lsls	r3, r3, #1
 8003f7a:	6a3a      	ldr	r2, [r7, #32]
 8003f7c:	18d2      	adds	r2, r2, r3
 8003f7e:	2122      	movs	r1, #34	@ 0x22
 8003f80:	190b      	adds	r3, r1, r4
 8003f82:	19db      	adds	r3, r3, r7
 8003f84:	881b      	ldrh	r3, [r3, #0]
 8003f86:	1909      	adds	r1, r1, r4
 8003f88:	19c9      	adds	r1, r1, r7
 8003f8a:	1c58      	adds	r0, r3, #1
 8003f8c:	8008      	strh	r0, [r1, #0]
 8003f8e:	0018      	movs	r0, r3
 8003f90:	8811      	ldrh	r1, [r2, #0]
 8003f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f94:	0042      	lsls	r2, r0, #1
 8003f96:	52d1      	strh	r1, [r2, r3]
	for(j=0; j<count; j++)
 8003f98:	2124      	movs	r1, #36	@ 0x24
 8003f9a:	190b      	adds	r3, r1, r4
 8003f9c:	19db      	adds	r3, r3, r7
 8003f9e:	881a      	ldrh	r2, [r3, #0]
 8003fa0:	190b      	adds	r3, r1, r4
 8003fa2:	19db      	adds	r3, r3, r7
 8003fa4:	3201      	adds	r2, #1
 8003fa6:	801a      	strh	r2, [r3, #0]
 8003fa8:	2324      	movs	r3, #36	@ 0x24
 8003faa:	2018      	movs	r0, #24
 8003fac:	181b      	adds	r3, r3, r0
 8003fae:	19da      	adds	r2, r3, r7
 8003fb0:	2314      	movs	r3, #20
 8003fb2:	181b      	adds	r3, r3, r0
 8003fb4:	19db      	adds	r3, r3, r7
 8003fb6:	8812      	ldrh	r2, [r2, #0]
 8003fb8:	881b      	ldrh	r3, [r3, #0]
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d3d7      	bcc.n	8003f6e <drawImage+0xe2>
for(i=0; i<c; i++)
 8003fbe:	2126      	movs	r1, #38	@ 0x26
 8003fc0:	180b      	adds	r3, r1, r0
 8003fc2:	19db      	adds	r3, r3, r7
 8003fc4:	881a      	ldrh	r2, [r3, #0]
 8003fc6:	180b      	adds	r3, r1, r0
 8003fc8:	19db      	adds	r3, r3, r7
 8003fca:	3201      	adds	r2, #1
 8003fcc:	801a      	strh	r2, [r3, #0]
 8003fce:	2326      	movs	r3, #38	@ 0x26
 8003fd0:	2118      	movs	r1, #24
 8003fd2:	185b      	adds	r3, r3, r1
 8003fd4:	19da      	adds	r2, r3, r7
 8003fd6:	2348      	movs	r3, #72	@ 0x48
 8003fd8:	185b      	adds	r3, r3, r1
 8003fda:	19db      	adds	r3, r3, r7
 8003fdc:	8812      	ldrh	r2, [r2, #0]
 8003fde:	881b      	ldrh	r3, [r3, #0]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d3a6      	bcc.n	8003f32 <drawImage+0xa6>
	}
}
ST7735_DrawImage(y, x, w, h, bufffer);
 8003fe4:	2344      	movs	r3, #68	@ 0x44
 8003fe6:	185b      	adds	r3, r3, r1
 8003fe8:	19db      	adds	r3, r3, r7
 8003fea:	881c      	ldrh	r4, [r3, #0]
 8003fec:	2340      	movs	r3, #64	@ 0x40
 8003fee:	185b      	adds	r3, r3, r1
 8003ff0:	19db      	adds	r3, r3, r7
 8003ff2:	881a      	ldrh	r2, [r3, #0]
 8003ff4:	231e      	movs	r3, #30
 8003ff6:	18fb      	adds	r3, r7, r3
 8003ff8:	8819      	ldrh	r1, [r3, #0]
 8003ffa:	231c      	movs	r3, #28
 8003ffc:	18fb      	adds	r3, r7, r3
 8003ffe:	8818      	ldrh	r0, [r3, #0]
 8004000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004002:	9300      	str	r3, [sp, #0]
 8004004:	0023      	movs	r3, r4
 8004006:	f000 fa31 	bl	800446c <ST7735_DrawImage>
 800400a:	46c5      	mov	sp, r8
}
 800400c:	46c0      	nop			@ (mov r8, r8)
 800400e:	46bd      	mov	sp, r7
 8004010:	b010      	add	sp, #64	@ 0x40
 8004012:	bc80      	pop	{r7}
 8004014:	46b8      	mov	r8, r7
 8004016:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004018 <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 8004018:	b580      	push	{r7, lr}
 800401a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 800401c:	23a0      	movs	r3, #160	@ 0xa0
 800401e:	05db      	lsls	r3, r3, #23
 8004020:	2200      	movs	r2, #0
 8004022:	2120      	movs	r1, #32
 8004024:	0018      	movs	r0, r3
 8004026:	f004 fab8 	bl	800859a <HAL_GPIO_WritePin>
}
 800402a:	46c0      	nop			@ (mov r8, r8)
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <ST7735_Unselect>:

void ST7735_Unselect()
{
 8004030:	b580      	push	{r7, lr}
 8004032:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8004034:	23a0      	movs	r3, #160	@ 0xa0
 8004036:	05db      	lsls	r3, r3, #23
 8004038:	2201      	movs	r2, #1
 800403a:	2120      	movs	r1, #32
 800403c:	0018      	movs	r0, r3
 800403e:	f004 faac 	bl	800859a <HAL_GPIO_WritePin>
}
 8004042:	46c0      	nop			@ (mov r8, r8)
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}

08004048 <ST7735_Reset>:

void ST7735_Reset()
{
 8004048:	b580      	push	{r7, lr}
 800404a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 800404c:	2380      	movs	r3, #128	@ 0x80
 800404e:	0219      	lsls	r1, r3, #8
 8004050:	23a0      	movs	r3, #160	@ 0xa0
 8004052:	05db      	lsls	r3, r3, #23
 8004054:	2200      	movs	r2, #0
 8004056:	0018      	movs	r0, r3
 8004058:	f004 fa9f 	bl	800859a <HAL_GPIO_WritePin>
    HAL_Delay(5);
 800405c:	2005      	movs	r0, #5
 800405e:	f003 fffb 	bl	8008058 <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 8004062:	2380      	movs	r3, #128	@ 0x80
 8004064:	0219      	lsls	r1, r3, #8
 8004066:	23a0      	movs	r3, #160	@ 0xa0
 8004068:	05db      	lsls	r3, r3, #23
 800406a:	2201      	movs	r2, #1
 800406c:	0018      	movs	r0, r3
 800406e:	f004 fa94 	bl	800859a <HAL_GPIO_WritePin>
}
 8004072:	46c0      	nop			@ (mov r8, r8)
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}

08004078 <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 8004078:	b580      	push	{r7, lr}
 800407a:	b082      	sub	sp, #8
 800407c:	af00      	add	r7, sp, #0
 800407e:	0002      	movs	r2, r0
 8004080:	1dfb      	adds	r3, r7, #7
 8004082:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 8004084:	23a0      	movs	r3, #160	@ 0xa0
 8004086:	05db      	lsls	r3, r3, #23
 8004088:	2200      	movs	r2, #0
 800408a:	2110      	movs	r1, #16
 800408c:	0018      	movs	r0, r3
 800408e:	f004 fa84 	bl	800859a <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8004092:	2301      	movs	r3, #1
 8004094:	425b      	negs	r3, r3
 8004096:	1df9      	adds	r1, r7, #7
 8004098:	4803      	ldr	r0, [pc, #12]	@ (80040a8 <ST7735_WriteCommand+0x30>)
 800409a:	2201      	movs	r2, #1
 800409c:	f006 ff36 	bl	800af0c <HAL_SPI_Transmit>
}
 80040a0:	46c0      	nop			@ (mov r8, r8)
 80040a2:	46bd      	mov	sp, r7
 80040a4:	b002      	add	sp, #8
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	20001c80 	.word	0x20001c80

080040ac <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b082      	sub	sp, #8
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 80040b6:	23a0      	movs	r3, #160	@ 0xa0
 80040b8:	05db      	lsls	r3, r3, #23
 80040ba:	2201      	movs	r2, #1
 80040bc:	2110      	movs	r1, #16
 80040be:	0018      	movs	r0, r3
 80040c0:	f004 fa6b 	bl	800859a <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	b29a      	uxth	r2, r3
 80040c8:	2301      	movs	r3, #1
 80040ca:	425b      	negs	r3, r3
 80040cc:	6879      	ldr	r1, [r7, #4]
 80040ce:	4803      	ldr	r0, [pc, #12]	@ (80040dc <ST7735_WriteData+0x30>)
 80040d0:	f006 ff1c 	bl	800af0c <HAL_SPI_Transmit>
}
 80040d4:	46c0      	nop			@ (mov r8, r8)
 80040d6:	46bd      	mov	sp, r7
 80040d8:	b002      	add	sp, #8
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	20001c80 	.word	0x20001c80

080040e0 <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 80040e0:	b590      	push	{r4, r7, lr}
 80040e2:	b085      	sub	sp, #20
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	1c5a      	adds	r2, r3, #1
 80040ec:	607a      	str	r2, [r7, #4]
 80040ee:	220f      	movs	r2, #15
 80040f0:	18ba      	adds	r2, r7, r2
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	7013      	strb	r3, [r2, #0]
    while(numCommands--) {
 80040f6:	e04a      	b.n	800418e <DisplayInit+0xae>
        uint8_t cmd = *addr++;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	1c5a      	adds	r2, r3, #1
 80040fc:	607a      	str	r2, [r7, #4]
 80040fe:	210b      	movs	r1, #11
 8004100:	187a      	adds	r2, r7, r1
 8004102:	781b      	ldrb	r3, [r3, #0]
 8004104:	7013      	strb	r3, [r2, #0]
        ST7735_WriteCommand(cmd);
 8004106:	187b      	adds	r3, r7, r1
 8004108:	781b      	ldrb	r3, [r3, #0]
 800410a:	0018      	movs	r0, r3
 800410c:	f7ff ffb4 	bl	8004078 <ST7735_WriteCommand>

        numArgs = *addr++;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	1c5a      	adds	r2, r3, #1
 8004114:	607a      	str	r2, [r7, #4]
 8004116:	200a      	movs	r0, #10
 8004118:	183a      	adds	r2, r7, r0
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	7013      	strb	r3, [r2, #0]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 800411e:	183b      	adds	r3, r7, r0
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	b29a      	uxth	r2, r3
 8004124:	230c      	movs	r3, #12
 8004126:	18fb      	adds	r3, r7, r3
 8004128:	2180      	movs	r1, #128	@ 0x80
 800412a:	400a      	ands	r2, r1
 800412c:	801a      	strh	r2, [r3, #0]
        numArgs &= ~DELAY;
 800412e:	183b      	adds	r3, r7, r0
 8004130:	183a      	adds	r2, r7, r0
 8004132:	7812      	ldrb	r2, [r2, #0]
 8004134:	217f      	movs	r1, #127	@ 0x7f
 8004136:	400a      	ands	r2, r1
 8004138:	701a      	strb	r2, [r3, #0]
        if(numArgs) {
 800413a:	183b      	adds	r3, r7, r0
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d00c      	beq.n	800415c <DisplayInit+0x7c>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8004142:	0004      	movs	r4, r0
 8004144:	183b      	adds	r3, r7, r0
 8004146:	781a      	ldrb	r2, [r3, #0]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	0011      	movs	r1, r2
 800414c:	0018      	movs	r0, r3
 800414e:	f7ff ffad 	bl	80040ac <ST7735_WriteData>
            addr += numArgs;
 8004152:	193b      	adds	r3, r7, r4
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	18d3      	adds	r3, r2, r3
 800415a:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 800415c:	210c      	movs	r1, #12
 800415e:	187b      	adds	r3, r7, r1
 8004160:	881b      	ldrh	r3, [r3, #0]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d013      	beq.n	800418e <DisplayInit+0xae>
            ms = *addr++;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	1c5a      	adds	r2, r3, #1
 800416a:	607a      	str	r2, [r7, #4]
 800416c:	781a      	ldrb	r2, [r3, #0]
 800416e:	187b      	adds	r3, r7, r1
 8004170:	801a      	strh	r2, [r3, #0]
            if(ms == 255) ms = 500;
 8004172:	187b      	adds	r3, r7, r1
 8004174:	881b      	ldrh	r3, [r3, #0]
 8004176:	2bff      	cmp	r3, #255	@ 0xff
 8004178:	d103      	bne.n	8004182 <DisplayInit+0xa2>
 800417a:	187b      	adds	r3, r7, r1
 800417c:	22fa      	movs	r2, #250	@ 0xfa
 800417e:	0052      	lsls	r2, r2, #1
 8004180:	801a      	strh	r2, [r3, #0]
            HAL_Delay(ms);
 8004182:	230c      	movs	r3, #12
 8004184:	18fb      	adds	r3, r7, r3
 8004186:	881b      	ldrh	r3, [r3, #0]
 8004188:	0018      	movs	r0, r3
 800418a:	f003 ff65 	bl	8008058 <HAL_Delay>
    while(numCommands--) {
 800418e:	220f      	movs	r2, #15
 8004190:	18bb      	adds	r3, r7, r2
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	18ba      	adds	r2, r7, r2
 8004196:	1e59      	subs	r1, r3, #1
 8004198:	7011      	strb	r1, [r2, #0]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d1ac      	bne.n	80040f8 <DisplayInit+0x18>
        }
    }
}
 800419e:	46c0      	nop			@ (mov r8, r8)
 80041a0:	46c0      	nop			@ (mov r8, r8)
 80041a2:	46bd      	mov	sp, r7
 80041a4:	b005      	add	sp, #20
 80041a6:	bd90      	pop	{r4, r7, pc}

080041a8 <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 80041a8:	b5b0      	push	{r4, r5, r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	0005      	movs	r5, r0
 80041b0:	000c      	movs	r4, r1
 80041b2:	0010      	movs	r0, r2
 80041b4:	0019      	movs	r1, r3
 80041b6:	1dfb      	adds	r3, r7, #7
 80041b8:	1c2a      	adds	r2, r5, #0
 80041ba:	701a      	strb	r2, [r3, #0]
 80041bc:	1dbb      	adds	r3, r7, #6
 80041be:	1c22      	adds	r2, r4, #0
 80041c0:	701a      	strb	r2, [r3, #0]
 80041c2:	1d7b      	adds	r3, r7, #5
 80041c4:	1c02      	adds	r2, r0, #0
 80041c6:	701a      	strb	r2, [r3, #0]
 80041c8:	1d3b      	adds	r3, r7, #4
 80041ca:	1c0a      	adds	r2, r1, #0
 80041cc:	701a      	strb	r2, [r3, #0]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 80041ce:	202a      	movs	r0, #42	@ 0x2a
 80041d0:	f7ff ff52 	bl	8004078 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 80041d4:	210c      	movs	r1, #12
 80041d6:	187b      	adds	r3, r7, r1
 80041d8:	2200      	movs	r2, #0
 80041da:	701a      	strb	r2, [r3, #0]
 80041dc:	4b1c      	ldr	r3, [pc, #112]	@ (8004250 <ST7735_SetAddressWindow+0xa8>)
 80041de:	781a      	ldrb	r2, [r3, #0]
 80041e0:	1dfb      	adds	r3, r7, #7
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	18d3      	adds	r3, r2, r3
 80041e6:	b2da      	uxtb	r2, r3
 80041e8:	187b      	adds	r3, r7, r1
 80041ea:	705a      	strb	r2, [r3, #1]
 80041ec:	187b      	adds	r3, r7, r1
 80041ee:	2200      	movs	r2, #0
 80041f0:	709a      	strb	r2, [r3, #2]
 80041f2:	4b17      	ldr	r3, [pc, #92]	@ (8004250 <ST7735_SetAddressWindow+0xa8>)
 80041f4:	781a      	ldrb	r2, [r3, #0]
 80041f6:	1d7b      	adds	r3, r7, #5
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	18d3      	adds	r3, r2, r3
 80041fc:	b2da      	uxtb	r2, r3
 80041fe:	187b      	adds	r3, r7, r1
 8004200:	70da      	strb	r2, [r3, #3]
    ST7735_WriteData(data, sizeof(data));
 8004202:	000c      	movs	r4, r1
 8004204:	187b      	adds	r3, r7, r1
 8004206:	2104      	movs	r1, #4
 8004208:	0018      	movs	r0, r3
 800420a:	f7ff ff4f 	bl	80040ac <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 800420e:	202b      	movs	r0, #43	@ 0x2b
 8004210:	f7ff ff32 	bl	8004078 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 8004214:	4b0f      	ldr	r3, [pc, #60]	@ (8004254 <ST7735_SetAddressWindow+0xac>)
 8004216:	781a      	ldrb	r2, [r3, #0]
 8004218:	1dbb      	adds	r3, r7, #6
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	18d3      	adds	r3, r2, r3
 800421e:	b2da      	uxtb	r2, r3
 8004220:	0021      	movs	r1, r4
 8004222:	187b      	adds	r3, r7, r1
 8004224:	705a      	strb	r2, [r3, #1]
    data[3] = y1 + _ystart;
 8004226:	4b0b      	ldr	r3, [pc, #44]	@ (8004254 <ST7735_SetAddressWindow+0xac>)
 8004228:	781a      	ldrb	r2, [r3, #0]
 800422a:	1d3b      	adds	r3, r7, #4
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	18d3      	adds	r3, r2, r3
 8004230:	b2da      	uxtb	r2, r3
 8004232:	187b      	adds	r3, r7, r1
 8004234:	70da      	strb	r2, [r3, #3]
    ST7735_WriteData(data, sizeof(data));
 8004236:	187b      	adds	r3, r7, r1
 8004238:	2104      	movs	r1, #4
 800423a:	0018      	movs	r0, r3
 800423c:	f7ff ff36 	bl	80040ac <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8004240:	202c      	movs	r0, #44	@ 0x2c
 8004242:	f7ff ff19 	bl	8004078 <ST7735_WriteCommand>
}
 8004246:	46c0      	nop			@ (mov r8, r8)
 8004248:	46bd      	mov	sp, r7
 800424a:	b004      	add	sp, #16
 800424c:	bdb0      	pop	{r4, r5, r7, pc}
 800424e:	46c0      	nop			@ (mov r8, r8)
 8004250:	20000bd3 	.word	0x20000bd3
 8004254:	20000bd4 	.word	0x20000bd4

08004258 <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0
 800425e:	0002      	movs	r2, r0
 8004260:	1dfb      	adds	r3, r7, #7
 8004262:	701a      	strb	r2, [r3, #0]
    ST7735_Select();
 8004264:	f7ff fed8 	bl	8004018 <ST7735_Select>
    ST7735_Reset();
 8004268:	f7ff feee 	bl	8004048 <ST7735_Reset>
    DisplayInit(init_cmds1);
 800426c:	4b0e      	ldr	r3, [pc, #56]	@ (80042a8 <ST7735_Init+0x50>)
 800426e:	0018      	movs	r0, r3
 8004270:	f7ff ff36 	bl	80040e0 <DisplayInit>
    DisplayInit(init_cmds2);
 8004274:	4b0d      	ldr	r3, [pc, #52]	@ (80042ac <ST7735_Init+0x54>)
 8004276:	0018      	movs	r0, r3
 8004278:	f7ff ff32 	bl	80040e0 <DisplayInit>
    DisplayInit(init_cmds3);
 800427c:	4b0c      	ldr	r3, [pc, #48]	@ (80042b0 <ST7735_Init+0x58>)
 800427e:	0018      	movs	r0, r3
 8004280:	f7ff ff2e 	bl	80040e0 <DisplayInit>

#elif ST7735_IS_128X128
    _colstart = 2;
    _rowstart = 3;
#else
    _colstart = 0;
 8004284:	4b0b      	ldr	r3, [pc, #44]	@ (80042b4 <ST7735_Init+0x5c>)
 8004286:	2200      	movs	r2, #0
 8004288:	701a      	strb	r2, [r3, #0]
    _rowstart = 0;
 800428a:	4b0b      	ldr	r3, [pc, #44]	@ (80042b8 <ST7735_Init+0x60>)
 800428c:	2200      	movs	r2, #0
 800428e:	701a      	strb	r2, [r3, #0]
#endif
    ST7735_SetRotation (rotation);
 8004290:	1dfb      	adds	r3, r7, #7
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	0018      	movs	r0, r3
 8004296:	f000 f811 	bl	80042bc <ST7735_SetRotation>
    ST7735_Unselect();
 800429a:	f7ff fec9 	bl	8004030 <ST7735_Unselect>

}
 800429e:	46c0      	nop			@ (mov r8, r8)
 80042a0:	46bd      	mov	sp, r7
 80042a2:	b002      	add	sp, #8
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	46c0      	nop			@ (mov r8, r8)
 80042a8:	08011480 	.word	0x08011480
 80042ac:	080114b8 	.word	0x080114b8
 80042b0:	080114c8 	.word	0x080114c8
 80042b4:	20000bd1 	.word	0x20000bd1
 80042b8:	20000bd2 	.word	0x20000bd2

080042bc <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b084      	sub	sp, #16
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	0002      	movs	r2, r0
 80042c4:	1dfb      	adds	r3, r7, #7
 80042c6:	701a      	strb	r2, [r3, #0]

  uint8_t madctl = 0;
 80042c8:	230f      	movs	r3, #15
 80042ca:	18fb      	adds	r3, r7, r3
 80042cc:	2200      	movs	r2, #0
 80042ce:	701a      	strb	r2, [r3, #0]

  rotation = m % 4; // can't be higher than 3
 80042d0:	1dfb      	adds	r3, r7, #7
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	2203      	movs	r2, #3
 80042d6:	4013      	ands	r3, r2
 80042d8:	b2da      	uxtb	r2, r3
 80042da:	4b36      	ldr	r3, [pc, #216]	@ (80043b4 <ST7735_SetRotation+0xf8>)
 80042dc:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 80042de:	4b35      	ldr	r3, [pc, #212]	@ (80043b4 <ST7735_SetRotation+0xf8>)
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	2b03      	cmp	r3, #3
 80042e4:	d041      	beq.n	800436a <ST7735_SetRotation+0xae>
 80042e6:	dc53      	bgt.n	8004390 <ST7735_SetRotation+0xd4>
 80042e8:	2b02      	cmp	r3, #2
 80042ea:	d02b      	beq.n	8004344 <ST7735_SetRotation+0x88>
 80042ec:	dc50      	bgt.n	8004390 <ST7735_SetRotation+0xd4>
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d002      	beq.n	80042f8 <ST7735_SetRotation+0x3c>
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d013      	beq.n	800431e <ST7735_SetRotation+0x62>
 80042f6:	e04b      	b.n	8004390 <ST7735_SetRotation+0xd4>
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 80042f8:	230f      	movs	r3, #15
 80042fa:	18fb      	adds	r3, r7, r3
 80042fc:	22c0      	movs	r2, #192	@ 0xc0
 80042fe:	701a      	strb	r2, [r3, #0]
      _height = ST7735_HEIGHT;
 8004300:	4b2d      	ldr	r3, [pc, #180]	@ (80043b8 <ST7735_SetRotation+0xfc>)
 8004302:	22a0      	movs	r2, #160	@ 0xa0
 8004304:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8004306:	4b2d      	ldr	r3, [pc, #180]	@ (80043bc <ST7735_SetRotation+0x100>)
 8004308:	2280      	movs	r2, #128	@ 0x80
 800430a:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 800430c:	4b2c      	ldr	r3, [pc, #176]	@ (80043c0 <ST7735_SetRotation+0x104>)
 800430e:	781a      	ldrb	r2, [r3, #0]
 8004310:	4b2c      	ldr	r3, [pc, #176]	@ (80043c4 <ST7735_SetRotation+0x108>)
 8004312:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 8004314:	4b2c      	ldr	r3, [pc, #176]	@ (80043c8 <ST7735_SetRotation+0x10c>)
 8004316:	781a      	ldrb	r2, [r3, #0]
 8004318:	4b2c      	ldr	r3, [pc, #176]	@ (80043cc <ST7735_SetRotation+0x110>)
 800431a:	701a      	strb	r2, [r3, #0]
#endif
    break;
 800431c:	e038      	b.n	8004390 <ST7735_SetRotation+0xd4>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 800431e:	230f      	movs	r3, #15
 8004320:	18fb      	adds	r3, r7, r3
 8004322:	22a0      	movs	r2, #160	@ 0xa0
 8004324:	701a      	strb	r2, [r3, #0]
      _width = ST7735_HEIGHT;
 8004326:	4b25      	ldr	r3, [pc, #148]	@ (80043bc <ST7735_SetRotation+0x100>)
 8004328:	22a0      	movs	r2, #160	@ 0xa0
 800432a:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 800432c:	4b22      	ldr	r3, [pc, #136]	@ (80043b8 <ST7735_SetRotation+0xfc>)
 800432e:	2280      	movs	r2, #128	@ 0x80
 8004330:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8004332:	4b23      	ldr	r3, [pc, #140]	@ (80043c0 <ST7735_SetRotation+0x104>)
 8004334:	781a      	ldrb	r2, [r3, #0]
 8004336:	4b25      	ldr	r3, [pc, #148]	@ (80043cc <ST7735_SetRotation+0x110>)
 8004338:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 800433a:	4b23      	ldr	r3, [pc, #140]	@ (80043c8 <ST7735_SetRotation+0x10c>)
 800433c:	781a      	ldrb	r2, [r3, #0]
 800433e:	4b21      	ldr	r3, [pc, #132]	@ (80043c4 <ST7735_SetRotation+0x108>)
 8004340:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8004342:	e025      	b.n	8004390 <ST7735_SetRotation+0xd4>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 8004344:	230f      	movs	r3, #15
 8004346:	18fb      	adds	r3, r7, r3
 8004348:	2200      	movs	r2, #0
 800434a:	701a      	strb	r2, [r3, #0]
      _height = ST7735_HEIGHT;
 800434c:	4b1a      	ldr	r3, [pc, #104]	@ (80043b8 <ST7735_SetRotation+0xfc>)
 800434e:	22a0      	movs	r2, #160	@ 0xa0
 8004350:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8004352:	4b1a      	ldr	r3, [pc, #104]	@ (80043bc <ST7735_SetRotation+0x100>)
 8004354:	2280      	movs	r2, #128	@ 0x80
 8004356:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 8004358:	4b19      	ldr	r3, [pc, #100]	@ (80043c0 <ST7735_SetRotation+0x104>)
 800435a:	781a      	ldrb	r2, [r3, #0]
 800435c:	4b19      	ldr	r3, [pc, #100]	@ (80043c4 <ST7735_SetRotation+0x108>)
 800435e:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 8004360:	4b19      	ldr	r3, [pc, #100]	@ (80043c8 <ST7735_SetRotation+0x10c>)
 8004362:	781a      	ldrb	r2, [r3, #0]
 8004364:	4b19      	ldr	r3, [pc, #100]	@ (80043cc <ST7735_SetRotation+0x110>)
 8004366:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8004368:	e012      	b.n	8004390 <ST7735_SetRotation+0xd4>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 800436a:	230f      	movs	r3, #15
 800436c:	18fb      	adds	r3, r7, r3
 800436e:	2260      	movs	r2, #96	@ 0x60
 8004370:	701a      	strb	r2, [r3, #0]
      _width = ST7735_HEIGHT;
 8004372:	4b12      	ldr	r3, [pc, #72]	@ (80043bc <ST7735_SetRotation+0x100>)
 8004374:	22a0      	movs	r2, #160	@ 0xa0
 8004376:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8004378:	4b0f      	ldr	r3, [pc, #60]	@ (80043b8 <ST7735_SetRotation+0xfc>)
 800437a:	2280      	movs	r2, #128	@ 0x80
 800437c:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 800437e:	4b10      	ldr	r3, [pc, #64]	@ (80043c0 <ST7735_SetRotation+0x104>)
 8004380:	781a      	ldrb	r2, [r3, #0]
 8004382:	4b12      	ldr	r3, [pc, #72]	@ (80043cc <ST7735_SetRotation+0x110>)
 8004384:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8004386:	4b10      	ldr	r3, [pc, #64]	@ (80043c8 <ST7735_SetRotation+0x10c>)
 8004388:	781a      	ldrb	r2, [r3, #0]
 800438a:	4b0e      	ldr	r3, [pc, #56]	@ (80043c4 <ST7735_SetRotation+0x108>)
 800438c:	701a      	strb	r2, [r3, #0]
#endif
    break;
 800438e:	46c0      	nop			@ (mov r8, r8)
  }
  ST7735_Select();
 8004390:	f7ff fe42 	bl	8004018 <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 8004394:	2036      	movs	r0, #54	@ 0x36
 8004396:	f7ff fe6f 	bl	8004078 <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 800439a:	230f      	movs	r3, #15
 800439c:	18fb      	adds	r3, r7, r3
 800439e:	2101      	movs	r1, #1
 80043a0:	0018      	movs	r0, r3
 80043a2:	f7ff fe83 	bl	80040ac <ST7735_WriteData>
  ST7735_Unselect();
 80043a6:	f7ff fe43 	bl	8004030 <ST7735_Unselect>
}
 80043aa:	46c0      	nop			@ (mov r8, r8)
 80043ac:	46bd      	mov	sp, r7
 80043ae:	b004      	add	sp, #16
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	46c0      	nop			@ (mov r8, r8)
 80043b4:	20000bd0 	.word	0x20000bd0
 80043b8:	20000bce 	.word	0x20000bce
 80043bc:	20000bcc 	.word	0x20000bcc
 80043c0:	20000bd1 	.word	0x20000bd1
 80043c4:	20000bd3 	.word	0x20000bd3
 80043c8:	20000bd2 	.word	0x20000bd2
 80043cc:	20000bd4 	.word	0x20000bd4

080043d0 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 80043d0:	b590      	push	{r4, r7, lr}
 80043d2:	b085      	sub	sp, #20
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	0004      	movs	r4, r0
 80043d8:	0008      	movs	r0, r1
 80043da:	0011      	movs	r1, r2
 80043dc:	1dbb      	adds	r3, r7, #6
 80043de:	1c22      	adds	r2, r4, #0
 80043e0:	801a      	strh	r2, [r3, #0]
 80043e2:	1d3b      	adds	r3, r7, #4
 80043e4:	1c02      	adds	r2, r0, #0
 80043e6:	801a      	strh	r2, [r3, #0]
 80043e8:	1cbb      	adds	r3, r7, #2
 80043ea:	1c0a      	adds	r2, r1, #0
 80043ec:	801a      	strh	r2, [r3, #0]
    if((x >= _width) || (y >= _height))
 80043ee:	1dbb      	adds	r3, r7, #6
 80043f0:	881b      	ldrh	r3, [r3, #0]
 80043f2:	4a1c      	ldr	r2, [pc, #112]	@ (8004464 <ST7735_DrawPixel+0x94>)
 80043f4:	2100      	movs	r1, #0
 80043f6:	5e52      	ldrsh	r2, [r2, r1]
 80043f8:	4293      	cmp	r3, r2
 80043fa:	da2f      	bge.n	800445c <ST7735_DrawPixel+0x8c>
 80043fc:	1d3b      	adds	r3, r7, #4
 80043fe:	881b      	ldrh	r3, [r3, #0]
 8004400:	4a19      	ldr	r2, [pc, #100]	@ (8004468 <ST7735_DrawPixel+0x98>)
 8004402:	2100      	movs	r1, #0
 8004404:	5e52      	ldrsh	r2, [r2, r1]
 8004406:	4293      	cmp	r3, r2
 8004408:	da28      	bge.n	800445c <ST7735_DrawPixel+0x8c>
        return;

    ST7735_Select();
 800440a:	f7ff fe05 	bl	8004018 <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 800440e:	1dbb      	adds	r3, r7, #6
 8004410:	881b      	ldrh	r3, [r3, #0]
 8004412:	b2d8      	uxtb	r0, r3
 8004414:	1d3b      	adds	r3, r7, #4
 8004416:	881b      	ldrh	r3, [r3, #0]
 8004418:	b2d9      	uxtb	r1, r3
 800441a:	1dbb      	adds	r3, r7, #6
 800441c:	881b      	ldrh	r3, [r3, #0]
 800441e:	b2db      	uxtb	r3, r3
 8004420:	3301      	adds	r3, #1
 8004422:	b2da      	uxtb	r2, r3
 8004424:	1d3b      	adds	r3, r7, #4
 8004426:	881b      	ldrh	r3, [r3, #0]
 8004428:	b2db      	uxtb	r3, r3
 800442a:	3301      	adds	r3, #1
 800442c:	b2db      	uxtb	r3, r3
 800442e:	f7ff febb 	bl	80041a8 <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 8004432:	1cbb      	adds	r3, r7, #2
 8004434:	881b      	ldrh	r3, [r3, #0]
 8004436:	0a1b      	lsrs	r3, r3, #8
 8004438:	b29b      	uxth	r3, r3
 800443a:	b2da      	uxtb	r2, r3
 800443c:	210c      	movs	r1, #12
 800443e:	187b      	adds	r3, r7, r1
 8004440:	701a      	strb	r2, [r3, #0]
 8004442:	1cbb      	adds	r3, r7, #2
 8004444:	881b      	ldrh	r3, [r3, #0]
 8004446:	b2da      	uxtb	r2, r3
 8004448:	187b      	adds	r3, r7, r1
 800444a:	705a      	strb	r2, [r3, #1]
    ST7735_WriteData(data, sizeof(data));
 800444c:	187b      	adds	r3, r7, r1
 800444e:	2102      	movs	r1, #2
 8004450:	0018      	movs	r0, r3
 8004452:	f7ff fe2b 	bl	80040ac <ST7735_WriteData>

    ST7735_Unselect();
 8004456:	f7ff fdeb 	bl	8004030 <ST7735_Unselect>
 800445a:	e000      	b.n	800445e <ST7735_DrawPixel+0x8e>
        return;
 800445c:	46c0      	nop			@ (mov r8, r8)
}
 800445e:	46bd      	mov	sp, r7
 8004460:	b005      	add	sp, #20
 8004462:	bd90      	pop	{r4, r7, pc}
 8004464:	20000bcc 	.word	0x20000bcc
 8004468:	20000bce 	.word	0x20000bce

0800446c <ST7735_DrawImage>:
    }

    ST7735_Unselect();
}

void ST7735_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data) {
 800446c:	b5b0      	push	{r4, r5, r7, lr}
 800446e:	b082      	sub	sp, #8
 8004470:	af00      	add	r7, sp, #0
 8004472:	0005      	movs	r5, r0
 8004474:	000c      	movs	r4, r1
 8004476:	0010      	movs	r0, r2
 8004478:	0019      	movs	r1, r3
 800447a:	1dbb      	adds	r3, r7, #6
 800447c:	1c2a      	adds	r2, r5, #0
 800447e:	801a      	strh	r2, [r3, #0]
 8004480:	1d3b      	adds	r3, r7, #4
 8004482:	1c22      	adds	r2, r4, #0
 8004484:	801a      	strh	r2, [r3, #0]
 8004486:	1cbb      	adds	r3, r7, #2
 8004488:	1c02      	adds	r2, r0, #0
 800448a:	801a      	strh	r2, [r3, #0]
 800448c:	003b      	movs	r3, r7
 800448e:	1c0a      	adds	r2, r1, #0
 8004490:	801a      	strh	r2, [r3, #0]
    if((x >= _width) || (y >= _height)) return;
 8004492:	1dbb      	adds	r3, r7, #6
 8004494:	881b      	ldrh	r3, [r3, #0]
 8004496:	4a2a      	ldr	r2, [pc, #168]	@ (8004540 <ST7735_DrawImage+0xd4>)
 8004498:	2100      	movs	r1, #0
 800449a:	5e52      	ldrsh	r2, [r2, r1]
 800449c:	4293      	cmp	r3, r2
 800449e:	da47      	bge.n	8004530 <ST7735_DrawImage+0xc4>
 80044a0:	1d3b      	adds	r3, r7, #4
 80044a2:	881b      	ldrh	r3, [r3, #0]
 80044a4:	4a27      	ldr	r2, [pc, #156]	@ (8004544 <ST7735_DrawImage+0xd8>)
 80044a6:	2100      	movs	r1, #0
 80044a8:	5e52      	ldrsh	r2, [r2, r1]
 80044aa:	4293      	cmp	r3, r2
 80044ac:	da40      	bge.n	8004530 <ST7735_DrawImage+0xc4>
    if((x + w - 1) >= _width) return;
 80044ae:	1dbb      	adds	r3, r7, #6
 80044b0:	881a      	ldrh	r2, [r3, #0]
 80044b2:	1cbb      	adds	r3, r7, #2
 80044b4:	881b      	ldrh	r3, [r3, #0]
 80044b6:	18d3      	adds	r3, r2, r3
 80044b8:	4a21      	ldr	r2, [pc, #132]	@ (8004540 <ST7735_DrawImage+0xd4>)
 80044ba:	2100      	movs	r1, #0
 80044bc:	5e52      	ldrsh	r2, [r2, r1]
 80044be:	4293      	cmp	r3, r2
 80044c0:	dc38      	bgt.n	8004534 <ST7735_DrawImage+0xc8>
    if((y + h - 1) >= _height) return;
 80044c2:	1d3b      	adds	r3, r7, #4
 80044c4:	881a      	ldrh	r2, [r3, #0]
 80044c6:	003b      	movs	r3, r7
 80044c8:	881b      	ldrh	r3, [r3, #0]
 80044ca:	18d3      	adds	r3, r2, r3
 80044cc:	4a1d      	ldr	r2, [pc, #116]	@ (8004544 <ST7735_DrawImage+0xd8>)
 80044ce:	2100      	movs	r1, #0
 80044d0:	5e52      	ldrsh	r2, [r2, r1]
 80044d2:	4293      	cmp	r3, r2
 80044d4:	dc30      	bgt.n	8004538 <ST7735_DrawImage+0xcc>

    ST7735_Select();
 80044d6:	f7ff fd9f 	bl	8004018 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 80044da:	1dbb      	adds	r3, r7, #6
 80044dc:	881b      	ldrh	r3, [r3, #0]
 80044de:	b2d8      	uxtb	r0, r3
 80044e0:	1d3b      	adds	r3, r7, #4
 80044e2:	881b      	ldrh	r3, [r3, #0]
 80044e4:	b2d9      	uxtb	r1, r3
 80044e6:	1dbb      	adds	r3, r7, #6
 80044e8:	881b      	ldrh	r3, [r3, #0]
 80044ea:	b2da      	uxtb	r2, r3
 80044ec:	1cbb      	adds	r3, r7, #2
 80044ee:	881b      	ldrh	r3, [r3, #0]
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	18d3      	adds	r3, r2, r3
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	3b01      	subs	r3, #1
 80044f8:	b2dc      	uxtb	r4, r3
 80044fa:	1d3b      	adds	r3, r7, #4
 80044fc:	881b      	ldrh	r3, [r3, #0]
 80044fe:	b2da      	uxtb	r2, r3
 8004500:	003b      	movs	r3, r7
 8004502:	881b      	ldrh	r3, [r3, #0]
 8004504:	b2db      	uxtb	r3, r3
 8004506:	18d3      	adds	r3, r2, r3
 8004508:	b2db      	uxtb	r3, r3
 800450a:	3b01      	subs	r3, #1
 800450c:	b2db      	uxtb	r3, r3
 800450e:	0022      	movs	r2, r4
 8004510:	f7ff fe4a 	bl	80041a8 <ST7735_SetAddressWindow>
    ST7735_WriteData((uint8_t*)data, sizeof(uint16_t)*w*h);
 8004514:	1cbb      	adds	r3, r7, #2
 8004516:	881b      	ldrh	r3, [r3, #0]
 8004518:	003a      	movs	r2, r7
 800451a:	8812      	ldrh	r2, [r2, #0]
 800451c:	4353      	muls	r3, r2
 800451e:	005a      	lsls	r2, r3, #1
 8004520:	69bb      	ldr	r3, [r7, #24]
 8004522:	0011      	movs	r1, r2
 8004524:	0018      	movs	r0, r3
 8004526:	f7ff fdc1 	bl	80040ac <ST7735_WriteData>
    ST7735_Unselect();
 800452a:	f7ff fd81 	bl	8004030 <ST7735_Unselect>
 800452e:	e004      	b.n	800453a <ST7735_DrawImage+0xce>
    if((x >= _width) || (y >= _height)) return;
 8004530:	46c0      	nop			@ (mov r8, r8)
 8004532:	e002      	b.n	800453a <ST7735_DrawImage+0xce>
    if((x + w - 1) >= _width) return;
 8004534:	46c0      	nop			@ (mov r8, r8)
 8004536:	e000      	b.n	800453a <ST7735_DrawImage+0xce>
    if((y + h - 1) >= _height) return;
 8004538:	46c0      	nop			@ (mov r8, r8)
}
 800453a:	46bd      	mov	sp, r7
 800453c:	b002      	add	sp, #8
 800453e:	bdb0      	pop	{r4, r5, r7, pc}
 8004540:	20000bcc 	.word	0x20000bcc
 8004544:	20000bce 	.word	0x20000bce

08004548 <minmea_tocoord>:
/**
 * Convert a raw coordinate to a floating point DD.DDD... value.
 * Returns NaN for "unknown" values.
 */
static inline float minmea_tocoord(struct minmea_float *f)
{
 8004548:	b5b0      	push	{r4, r5, r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
    if (f->scale == 0)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d101      	bne.n	800455c <minmea_tocoord+0x14>
        return NAN;
 8004558:	4b1c      	ldr	r3, [pc, #112]	@ (80045cc <minmea_tocoord+0x84>)
 800455a:	e033      	b.n	80045c4 <minmea_tocoord+0x7c>
    int_least32_t degrees = f->value / (f->scale * 100);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	2164      	movs	r1, #100	@ 0x64
 8004566:	434b      	muls	r3, r1
 8004568:	0019      	movs	r1, r3
 800456a:	0010      	movs	r0, r2
 800456c:	f7fb fe7a 	bl	8000264 <__divsi3>
 8004570:	0003      	movs	r3, r0
 8004572:	60fb      	str	r3, [r7, #12]
    int_least32_t minutes = f->value % (f->scale * 100);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	2164      	movs	r1, #100	@ 0x64
 800457e:	434b      	muls	r3, r1
 8004580:	0019      	movs	r1, r3
 8004582:	0010      	movs	r0, r2
 8004584:	f7fb ff54 	bl	8000430 <__aeabi_idivmod>
 8004588:	000b      	movs	r3, r1
 800458a:	60bb      	str	r3, [r7, #8]
    return (float) degrees + (float) minutes / (60 * f->scale);
 800458c:	68f8      	ldr	r0, [r7, #12]
 800458e:	f7fc ffdf 	bl	8001550 <__aeabi_i2f>
 8004592:	1c04      	adds	r4, r0, #0
 8004594:	68b8      	ldr	r0, [r7, #8]
 8004596:	f7fc ffdb 	bl	8001550 <__aeabi_i2f>
 800459a:	1c05      	adds	r5, r0, #0
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	685a      	ldr	r2, [r3, #4]
 80045a0:	0013      	movs	r3, r2
 80045a2:	011b      	lsls	r3, r3, #4
 80045a4:	1a9b      	subs	r3, r3, r2
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	0018      	movs	r0, r3
 80045aa:	f7fc ffd1 	bl	8001550 <__aeabi_i2f>
 80045ae:	1c03      	adds	r3, r0, #0
 80045b0:	1c19      	adds	r1, r3, #0
 80045b2:	1c28      	adds	r0, r5, #0
 80045b4:	f7fc fae4 	bl	8000b80 <__aeabi_fdiv>
 80045b8:	1c03      	adds	r3, r0, #0
 80045ba:	1c19      	adds	r1, r3, #0
 80045bc:	1c20      	adds	r0, r4, #0
 80045be:	f7fc f955 	bl	800086c <__aeabi_fadd>
 80045c2:	1c03      	adds	r3, r0, #0
}
 80045c4:	1c18      	adds	r0, r3, #0
 80045c6:	46bd      	mov	sp, r7
 80045c8:	b004      	add	sp, #16
 80045ca:	bdb0      	pop	{r4, r5, r7, pc}
 80045cc:	7fc00000 	.word	0x7fc00000

080045d0 <json_getSibling>:

/** Get the next sibling of a JSON property that is within a JSON object or array.
  * @param json A valid handler of a json property.
  * @retval The handler of the next sibling if found.
  * @retval Null pointer if the json property is the last one. */
static inline json_t const* json_getSibling( json_t const* json ) {
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b082      	sub	sp, #8
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
    return json->sibling;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
}
 80045dc:	0018      	movs	r0, r3
 80045de:	46bd      	mov	sp, r7
 80045e0:	b002      	add	sp, #8
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <json_getChild>:
/** Get the first property of a JSON object or array.
  * @param json A valid handler of a json property.
  *             Its type must be JSON_OBJ or JSON_ARRAY.
  * @retval The handler of the first property if there is.
  * @retval Null pointer if the json object has not properties. */
static inline json_t const* json_getChild( json_t const* json ) {
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b082      	sub	sp, #8
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
    return json->u.c.child;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	689b      	ldr	r3, [r3, #8]
}
 80045f0:	0018      	movs	r0, r3
 80045f2:	46bd      	mov	sp, r7
 80045f4:	b002      	add	sp, #8
 80045f6:	bd80      	pop	{r7, pc}

080045f8 <json_getInteger>:
}

/** Get the value of a json integer property.
  * @param property A valid handler of a json object. Its type must be JSON_INTEGER.
  * @return The value stdint. */
static inline int64_t json_getInteger( json_t const* property ) {
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b082      	sub	sp, #8
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  return strtoll( property->u.value,(char**)NULL, 10);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	220a      	movs	r2, #10
 8004606:	2100      	movs	r1, #0
 8004608:	0018      	movs	r0, r3
 800460a:	f009 fe7b 	bl	800e304 <strtoll>
 800460e:	0002      	movs	r2, r0
 8004610:	000b      	movs	r3, r1
}
 8004612:	0010      	movs	r0, r2
 8004614:	0019      	movs	r1, r3
 8004616:	46bd      	mov	sp, r7
 8004618:	b002      	add	sp, #8
 800461a:	bd80      	pop	{r7, pc}

0800461c <json_getReal>:

/** Get the value of a json real property.
  * @param property A valid handler of a json object. Its type must be JSON_REAL.
  * @return The value. */
static inline double json_getReal( json_t const* property ) {
 800461c:	b580      	push	{r7, lr}
 800461e:	b082      	sub	sp, #8
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  return strtod( property->u.value,(char**)NULL );
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	2100      	movs	r1, #0
 800462a:	0018      	movs	r0, r3
 800462c:	f009 fd22 	bl	800e074 <strtod>
 8004630:	0002      	movs	r2, r0
 8004632:	000b      	movs	r3, r1
}
 8004634:	0010      	movs	r0, r2
 8004636:	0019      	movs	r1, r3
 8004638:	46bd      	mov	sp, r7
 800463a:	b002      	add	sp, #8
 800463c:	bd80      	pop	{r7, pc}
	...

08004640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004640:	b5b0      	push	{r4, r5, r7, lr}
 8004642:	b08e      	sub	sp, #56	@ 0x38
 8004644:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004646:	f003 fc81 	bl	8007f4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800464a:	f000 fd31 	bl	80050b0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  steps=0;
 800464e:	4be0      	ldr	r3, [pc, #896]	@ (80049d0 <main+0x390>)
 8004650:	2200      	movs	r2, #0
 8004652:	701a      	strb	r2, [r3, #0]
  sitting0.Body = *imgSitting0;
 8004654:	4bdf      	ldr	r3, [pc, #892]	@ (80049d4 <main+0x394>)
 8004656:	4ae0      	ldr	r2, [pc, #896]	@ (80049d8 <main+0x398>)
 8004658:	601a      	str	r2, [r3, #0]
  sitting0.Size = 307;
 800465a:	4bde      	ldr	r3, [pc, #888]	@ (80049d4 <main+0x394>)
 800465c:	2234      	movs	r2, #52	@ 0x34
 800465e:	32ff      	adds	r2, #255	@ 0xff
 8004660:	605a      	str	r2, [r3, #4]
  sitting1.Body = *imgSitting1;
 8004662:	4bde      	ldr	r3, [pc, #888]	@ (80049dc <main+0x39c>)
 8004664:	4ade      	ldr	r2, [pc, #888]	@ (80049e0 <main+0x3a0>)
 8004666:	601a      	str	r2, [r3, #0]
  sitting1.Size = 305;
 8004668:	4bdc      	ldr	r3, [pc, #880]	@ (80049dc <main+0x39c>)
 800466a:	2232      	movs	r2, #50	@ 0x32
 800466c:	32ff      	adds	r2, #255	@ 0xff
 800466e:	605a      	str	r2, [r3, #4]
  animSitting[0] = sitting0;
 8004670:	4bdc      	ldr	r3, [pc, #880]	@ (80049e4 <main+0x3a4>)
 8004672:	4ad8      	ldr	r2, [pc, #864]	@ (80049d4 <main+0x394>)
 8004674:	ca03      	ldmia	r2!, {r0, r1}
 8004676:	c303      	stmia	r3!, {r0, r1}
  animSitting[1] = sitting1;
 8004678:	4bda      	ldr	r3, [pc, #872]	@ (80049e4 <main+0x3a4>)
 800467a:	4ad8      	ldr	r2, [pc, #864]	@ (80049dc <main+0x39c>)
 800467c:	3308      	adds	r3, #8
 800467e:	ca03      	ldmia	r2!, {r0, r1}
 8004680:	c303      	stmia	r3!, {r0, r1}
  game.evo=0;
 8004682:	4bd9      	ldr	r3, [pc, #868]	@ (80049e8 <main+0x3a8>)
 8004684:	2200      	movs	r2, #0
 8004686:	741a      	strb	r2, [r3, #16]
  game.uid[0]='h';
 8004688:	4ad7      	ldr	r2, [pc, #860]	@ (80049e8 <main+0x3a8>)
 800468a:	2398      	movs	r3, #152	@ 0x98
 800468c:	005b      	lsls	r3, r3, #1
 800468e:	2168      	movs	r1, #104	@ 0x68
 8004690:	54d1      	strb	r1, [r2, r3]
  game.uid[1]='i';
 8004692:	4ad5      	ldr	r2, [pc, #852]	@ (80049e8 <main+0x3a8>)
 8004694:	2332      	movs	r3, #50	@ 0x32
 8004696:	33ff      	adds	r3, #255	@ 0xff
 8004698:	2169      	movs	r1, #105	@ 0x69
 800469a:	54d1      	strb	r1, [r2, r3]
  game.allSteps=0;
 800469c:	4ad2      	ldr	r2, [pc, #840]	@ (80049e8 <main+0x3a8>)
 800469e:	238c      	movs	r3, #140	@ 0x8c
 80046a0:	005b      	lsls	r3, r3, #1
 80046a2:	2100      	movs	r1, #0
 80046a4:	50d1      	str	r1, [r2, r3]
  game.mood=100;
 80046a6:	4bd0      	ldr	r3, [pc, #832]	@ (80049e8 <main+0x3a8>)
 80046a8:	2264      	movs	r2, #100	@ 0x64
 80046aa:	745a      	strb	r2, [r3, #17]
  game.numLocations=3;
 80046ac:	4bce      	ldr	r3, [pc, #824]	@ (80049e8 <main+0x3a8>)
 80046ae:	2203      	movs	r2, #3
 80046b0:	615a      	str	r2, [r3, #20]
  game.stepsToday=0;
 80046b2:	4acd      	ldr	r2, [pc, #820]	@ (80049e8 <main+0x3a8>)
 80046b4:	2390      	movs	r3, #144	@ 0x90
 80046b6:	005b      	lsls	r3, r3, #1
 80046b8:	2100      	movs	r1, #0
 80046ba:	50d1      	str	r1, [r2, r3]
  game.weeklySteps=0;
 80046bc:	4aca      	ldr	r2, [pc, #808]	@ (80049e8 <main+0x3a8>)
 80046be:	238e      	movs	r3, #142	@ 0x8e
 80046c0:	005b      	lsls	r3, r3, #1
 80046c2:	2100      	movs	r1, #0
 80046c4:	50d1      	str	r1, [r2, r3]
  game.dailyGoal=2000;
 80046c6:	4ac8      	ldr	r2, [pc, #800]	@ (80049e8 <main+0x3a8>)
 80046c8:	2394      	movs	r3, #148	@ 0x94
 80046ca:	005b      	lsls	r3, r3, #1
 80046cc:	21fa      	movs	r1, #250	@ 0xfa
 80046ce:	00c9      	lsls	r1, r1, #3
 80046d0:	50d1      	str	r1, [r2, r3]
  dummy.lat=12.34567;
 80046d2:	4bc6      	ldr	r3, [pc, #792]	@ (80049ec <main+0x3ac>)
 80046d4:	4ac6      	ldr	r2, [pc, #792]	@ (80049f0 <main+0x3b0>)
 80046d6:	601a      	str	r2, [r3, #0]
  dummy.lon=-89.10111;
 80046d8:	4bc4      	ldr	r3, [pc, #784]	@ (80049ec <main+0x3ac>)
 80046da:	4ac6      	ldr	r2, [pc, #792]	@ (80049f4 <main+0x3b4>)
 80046dc:	605a      	str	r2, [r3, #4]
  game.positions[0]=dummy;
 80046de:	4bc2      	ldr	r3, [pc, #776]	@ (80049e8 <main+0x3a8>)
 80046e0:	4ac2      	ldr	r2, [pc, #776]	@ (80049ec <main+0x3ac>)
 80046e2:	3318      	adds	r3, #24
 80046e4:	ca03      	ldmia	r2!, {r0, r1}
 80046e6:	c303      	stmia	r3!, {r0, r1}
  game.positions[1]=dummy;
 80046e8:	4bbf      	ldr	r3, [pc, #764]	@ (80049e8 <main+0x3a8>)
 80046ea:	4ac0      	ldr	r2, [pc, #768]	@ (80049ec <main+0x3ac>)
 80046ec:	3320      	adds	r3, #32
 80046ee:	ca03      	ldmia	r2!, {r0, r1}
 80046f0:	c303      	stmia	r3!, {r0, r1}
  game.positions[2]=dummy;
 80046f2:	4bbd      	ldr	r3, [pc, #756]	@ (80049e8 <main+0x3a8>)
 80046f4:	4abd      	ldr	r2, [pc, #756]	@ (80049ec <main+0x3ac>)
 80046f6:	3328      	adds	r3, #40	@ 0x28
 80046f8:	ca03      	ldmia	r2!, {r0, r1}
 80046fa:	c303      	stmia	r3!, {r0, r1}
  game.time.hours=0;
 80046fc:	4bba      	ldr	r3, [pc, #744]	@ (80049e8 <main+0x3a8>)
 80046fe:	2200      	movs	r2, #0
 8004700:	601a      	str	r2, [r3, #0]
  gpsThreshold = .0001;
 8004702:	4bbd      	ldr	r3, [pc, #756]	@ (80049f8 <main+0x3b8>)
 8004704:	4abd      	ldr	r2, [pc, #756]	@ (80049fc <main+0x3bc>)
 8004706:	601a      	str	r2, [r3, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004708:	f000 ff88 	bl	800561c <MX_GPIO_Init>
  MX_I2C1_Init();
 800470c:	f000 fd32 	bl	8005174 <MX_I2C1_Init>
  MX_SPI1_Init();
 8004710:	f000 fe20 	bl	8005354 <MX_SPI1_Init>
  MX_TIM17_Init();
 8004714:	f000 fe5e 	bl	80053d4 <MX_TIM17_Init>
  MX_USART1_UART_Init();
 8004718:	f000 fee4 	bl	80054e4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800471c:	f000 ff30 	bl	8005580 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8004720:	f000 fd68 	bl	80051f4 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  //HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
  ST7735_Unselect();
 8004724:	f7ff fc84 	bl	8004030 <ST7735_Unselect>
  ST7735_Init(1);
 8004728:	2001      	movs	r0, #1
 800472a:	f7ff fd95 	bl	8004258 <ST7735_Init>
  //testAll();
  buffer[0] = 'A';
 800472e:	4bb4      	ldr	r3, [pc, #720]	@ (8004a00 <main+0x3c0>)
 8004730:	2241      	movs	r2, #65	@ 0x41
 8004732:	701a      	strb	r2, [r3, #0]
  buffer[1] = 'B';
 8004734:	4bb2      	ldr	r3, [pc, #712]	@ (8004a00 <main+0x3c0>)
 8004736:	2242      	movs	r2, #66	@ 0x42
 8004738:	705a      	strb	r2, [r3, #1]
  TIM17->CCR1 = 5;
 800473a:	4bb2      	ldr	r3, [pc, #712]	@ (8004a04 <main+0x3c4>)
 800473c:	2205      	movs	r2, #5
 800473e:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM17->PSC=64;
 8004740:	4bb0      	ldr	r3, [pc, #704]	@ (8004a04 <main+0x3c4>)
 8004742:	2240      	movs	r2, #64	@ 0x40
 8004744:	629a      	str	r2, [r3, #40]	@ 0x28
  uint8_t ret=0;
 8004746:	2327      	movs	r3, #39	@ 0x27
 8004748:	18fb      	adds	r3, r7, r3
 800474a:	2200      	movs	r2, #0
 800474c:	701a      	strb	r2, [r3, #0]
    //_ADXL343_Init();

      //Pedometer Setup
      _ADXL343_WriteReg8(0x19, 0x02);
 800474e:	2102      	movs	r1, #2
 8004750:	2019      	movs	r0, #25
 8004752:	f001 f9f9 	bl	8005b48 <_ADXL343_WriteReg8>
      ////wait

      _ADXL343_WriteReg8(0x7C, 0x01);
 8004756:	2101      	movs	r1, #1
 8004758:	207c      	movs	r0, #124	@ 0x7c
 800475a:	f001 f9f5 	bl	8005b48 <_ADXL343_WriteReg8>
       _ADXL343_WriteReg8(0x1A, 0x38);
 800475e:	2138      	movs	r1, #56	@ 0x38
 8004760:	201a      	movs	r0, #26
 8004762:	f001 f9f1 	bl	8005b48 <_ADXL343_WriteReg8>
      _ADXL343_WriteReg8(0x1B, 0x04);
 8004766:	2104      	movs	r1, #4
 8004768:	201b      	movs	r0, #27
 800476a:	f001 f9ed 	bl	8005b48 <_ADXL343_WriteReg8>
      _ADXL343_WriteReg8(0x1F, 0x80);
 800476e:	2180      	movs	r1, #128	@ 0x80
 8004770:	201f      	movs	r0, #31
 8004772:	f001 f9e9 	bl	8005b48 <_ADXL343_WriteReg8>
      _ADXL343_WriteReg8(0x21, 0x80);
 8004776:	2180      	movs	r1, #128	@ 0x80
 8004778:	2021      	movs	r0, #33	@ 0x21
 800477a:	f001 f9e5 	bl	8005b48 <_ADXL343_WriteReg8>



      //  //Step Counter
      _ADXL343_WriteReg8(0x18, 0x01); // enable walking mode
 800477e:	2101      	movs	r1, #1
 8004780:	2018      	movs	r0, #24
 8004782:	f001 f9e1 	bl	8005b48 <_ADXL343_WriteReg8>
      _ADXL343_WriteReg8(0x20, 0x01); // enable step interrupt
 8004786:	2101      	movs	r1, #1
 8004788:	2020      	movs	r0, #32
 800478a:	f001 f9dd 	bl	8005b48 <_ADXL343_WriteReg8>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
      //Before entering the while, fill the screen to clear it once
      fillScreen(BLACK);
 800478e:	2000      	movs	r0, #0
 8004790:	f7ff fb08 	bl	8003da4 <fillScreen>
  while (1)
  {
	  _ADXL343_ReadReg8(0x15, &steps, 1);
 8004794:	4b8e      	ldr	r3, [pc, #568]	@ (80049d0 <main+0x390>)
 8004796:	2201      	movs	r2, #1
 8004798:	0019      	movs	r1, r3
 800479a:	2015      	movs	r0, #21
 800479c:	f001 f9a2 	bl	8005ae4 <_ADXL343_ReadReg8>

	  //SendData();
	  //ReceiveData();
	  //_ADXL343_ReadReg8(0x00, &steps, 1);
	  if(checkTime){
 80047a0:	4b99      	ldr	r3, [pc, #612]	@ (8004a08 <main+0x3c8>)
 80047a2:	881b      	ldrh	r3, [r3, #0]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d02b      	beq.n	8004800 <main+0x1c0>
	  if(((game.time.minutes%dayLength)==0) && game.time.seconds>0){
 80047a8:	4b8f      	ldr	r3, [pc, #572]	@ (80049e8 <main+0x3a8>)
 80047aa:	685a      	ldr	r2, [r3, #4]
 80047ac:	4b97      	ldr	r3, [pc, #604]	@ (8004a0c <main+0x3cc>)
 80047ae:	881b      	ldrh	r3, [r3, #0]
 80047b0:	0019      	movs	r1, r3
 80047b2:	0010      	movs	r0, r2
 80047b4:	f7fb fe3c 	bl	8000430 <__aeabi_idivmod>
 80047b8:	1e0b      	subs	r3, r1, #0
 80047ba:	d10b      	bne.n	80047d4 <main+0x194>
 80047bc:	4b8a      	ldr	r3, [pc, #552]	@ (80049e8 <main+0x3a8>)
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	dd07      	ble.n	80047d4 <main+0x194>
		  game.stepsToday=0;
 80047c4:	4a88      	ldr	r2, [pc, #544]	@ (80049e8 <main+0x3a8>)
 80047c6:	2390      	movs	r3, #144	@ 0x90
 80047c8:	005b      	lsls	r3, r3, #1
 80047ca:	2100      	movs	r1, #0
 80047cc:	50d1      	str	r1, [r2, r3]
		  checkTime=0;
 80047ce:	4b8e      	ldr	r3, [pc, #568]	@ (8004a08 <main+0x3c8>)
 80047d0:	2200      	movs	r2, #0
 80047d2:	801a      	strh	r2, [r3, #0]
	  }

	  if(((game.time.minutes%weekLength)==0) && game.time.seconds>0){
 80047d4:	4b84      	ldr	r3, [pc, #528]	@ (80049e8 <main+0x3a8>)
 80047d6:	685a      	ldr	r2, [r3, #4]
 80047d8:	4b8d      	ldr	r3, [pc, #564]	@ (8004a10 <main+0x3d0>)
 80047da:	881b      	ldrh	r3, [r3, #0]
 80047dc:	0019      	movs	r1, r3
 80047de:	0010      	movs	r0, r2
 80047e0:	f7fb fe26 	bl	8000430 <__aeabi_idivmod>
 80047e4:	1e0b      	subs	r3, r1, #0
 80047e6:	d10b      	bne.n	8004800 <main+0x1c0>
 80047e8:	4b7f      	ldr	r3, [pc, #508]	@ (80049e8 <main+0x3a8>)
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	dd07      	ble.n	8004800 <main+0x1c0>
		  game.weeklySteps=0;
 80047f0:	4a7d      	ldr	r2, [pc, #500]	@ (80049e8 <main+0x3a8>)
 80047f2:	238e      	movs	r3, #142	@ 0x8e
 80047f4:	005b      	lsls	r3, r3, #1
 80047f6:	2100      	movs	r1, #0
 80047f8:	50d1      	str	r1, [r2, r3]
		  checkTime=0;
 80047fa:	4b83      	ldr	r3, [pc, #524]	@ (8004a08 <main+0x3c8>)
 80047fc:	2200      	movs	r2, #0
 80047fe:	801a      	strh	r2, [r3, #0]
	  }
	  }
	  if((game.time.minutes%dayLength)==1) checkTime=1;
 8004800:	4b79      	ldr	r3, [pc, #484]	@ (80049e8 <main+0x3a8>)
 8004802:	685a      	ldr	r2, [r3, #4]
 8004804:	4b81      	ldr	r3, [pc, #516]	@ (8004a0c <main+0x3cc>)
 8004806:	881b      	ldrh	r3, [r3, #0]
 8004808:	0019      	movs	r1, r3
 800480a:	0010      	movs	r0, r2
 800480c:	f7fb fe10 	bl	8000430 <__aeabi_idivmod>
 8004810:	000b      	movs	r3, r1
 8004812:	2b01      	cmp	r3, #1
 8004814:	d102      	bne.n	800481c <main+0x1dc>
 8004816:	4b7c      	ldr	r3, [pc, #496]	@ (8004a08 <main+0x3c8>)
 8004818:	2201      	movs	r2, #1
 800481a:	801a      	strh	r2, [r3, #0]
	  if(steps!=0){
 800481c:	4b6c      	ldr	r3, [pc, #432]	@ (80049d0 <main+0x390>)
 800481e:	781b      	ldrb	r3, [r3, #0]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d033      	beq.n	800488c <main+0x24c>
	  game.stepsToday +=steps*game.numLocations;
 8004824:	4a70      	ldr	r2, [pc, #448]	@ (80049e8 <main+0x3a8>)
 8004826:	2390      	movs	r3, #144	@ 0x90
 8004828:	005b      	lsls	r3, r3, #1
 800482a:	58d2      	ldr	r2, [r2, r3]
 800482c:	4b68      	ldr	r3, [pc, #416]	@ (80049d0 <main+0x390>)
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	0019      	movs	r1, r3
 8004832:	4b6d      	ldr	r3, [pc, #436]	@ (80049e8 <main+0x3a8>)
 8004834:	695b      	ldr	r3, [r3, #20]
 8004836:	434b      	muls	r3, r1
 8004838:	18d1      	adds	r1, r2, r3
 800483a:	4a6b      	ldr	r2, [pc, #428]	@ (80049e8 <main+0x3a8>)
 800483c:	2390      	movs	r3, #144	@ 0x90
 800483e:	005b      	lsls	r3, r3, #1
 8004840:	50d1      	str	r1, [r2, r3]
	  game.weeklySteps+=steps*game.numLocations;
 8004842:	4a69      	ldr	r2, [pc, #420]	@ (80049e8 <main+0x3a8>)
 8004844:	238e      	movs	r3, #142	@ 0x8e
 8004846:	005b      	lsls	r3, r3, #1
 8004848:	58d2      	ldr	r2, [r2, r3]
 800484a:	4b61      	ldr	r3, [pc, #388]	@ (80049d0 <main+0x390>)
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	0019      	movs	r1, r3
 8004850:	4b65      	ldr	r3, [pc, #404]	@ (80049e8 <main+0x3a8>)
 8004852:	695b      	ldr	r3, [r3, #20]
 8004854:	434b      	muls	r3, r1
 8004856:	18d1      	adds	r1, r2, r3
 8004858:	4a63      	ldr	r2, [pc, #396]	@ (80049e8 <main+0x3a8>)
 800485a:	238e      	movs	r3, #142	@ 0x8e
 800485c:	005b      	lsls	r3, r3, #1
 800485e:	50d1      	str	r1, [r2, r3]
	  game.allSteps+=steps*game.numLocations;
 8004860:	4a61      	ldr	r2, [pc, #388]	@ (80049e8 <main+0x3a8>)
 8004862:	238c      	movs	r3, #140	@ 0x8c
 8004864:	005b      	lsls	r3, r3, #1
 8004866:	58d2      	ldr	r2, [r2, r3]
 8004868:	4b59      	ldr	r3, [pc, #356]	@ (80049d0 <main+0x390>)
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	0019      	movs	r1, r3
 800486e:	4b5e      	ldr	r3, [pc, #376]	@ (80049e8 <main+0x3a8>)
 8004870:	695b      	ldr	r3, [r3, #20]
 8004872:	434b      	muls	r3, r1
 8004874:	18d1      	adds	r1, r2, r3
 8004876:	4a5c      	ldr	r2, [pc, #368]	@ (80049e8 <main+0x3a8>)
 8004878:	238c      	movs	r3, #140	@ 0x8c
 800487a:	005b      	lsls	r3, r3, #1
 800487c:	50d1      	str	r1, [r2, r3]
	  steps=0;
 800487e:	4b54      	ldr	r3, [pc, #336]	@ (80049d0 <main+0x390>)
 8004880:	2200      	movs	r2, #0
 8004882:	701a      	strb	r2, [r3, #0]
	  _ADXL343_WriteReg8(0x7E, 0xB1);
 8004884:	21b1      	movs	r1, #177	@ 0xb1
 8004886:	207e      	movs	r0, #126	@ 0x7e
 8004888:	f001 f95e 	bl	8005b48 <_ADXL343_WriteReg8>
	  }
	  ++updateScreen;
 800488c:	4b61      	ldr	r3, [pc, #388]	@ (8004a14 <main+0x3d4>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	1c5a      	adds	r2, r3, #1
 8004892:	4b60      	ldr	r3, [pc, #384]	@ (8004a14 <main+0x3d4>)
 8004894:	601a      	str	r2, [r3, #0]
	  //SendData();
	  //HAL_UART_Transmit(&huart2, "hello", 5, 100);
	  switch(currentMenu){
 8004896:	4b60      	ldr	r3, [pc, #384]	@ (8004a18 <main+0x3d8>)
 8004898:	781b      	ldrb	r3, [r3, #0]
 800489a:	2b04      	cmp	r3, #4
 800489c:	d100      	bne.n	80048a0 <main+0x260>
 800489e:	e2a9      	b.n	8004df4 <main+0x7b4>
 80048a0:	dd01      	ble.n	80048a6 <main+0x266>
 80048a2:	f000 fbd4 	bl	800504e <main+0xa0e>
 80048a6:	2b02      	cmp	r3, #2
 80048a8:	d100      	bne.n	80048ac <main+0x26c>
 80048aa:	e23c      	b.n	8004d26 <main+0x6e6>
 80048ac:	dd01      	ble.n	80048b2 <main+0x272>
 80048ae:	f000 fbce 	bl	800504e <main+0xa0e>
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d100      	bne.n	80048b8 <main+0x278>
 80048b6:	e0c1      	b.n	8004a3c <main+0x3fc>
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d001      	beq.n	80048c0 <main+0x280>
 80048bc:	f000 fbc7 	bl	800504e <main+0xa0e>
	  case Main:
		  if((totalFrames)%600==0) GetLatLon();
 80048c0:	4b56      	ldr	r3, [pc, #344]	@ (8004a1c <main+0x3dc>)
 80048c2:	881b      	ldrh	r3, [r3, #0]
 80048c4:	2296      	movs	r2, #150	@ 0x96
 80048c6:	0091      	lsls	r1, r2, #2
 80048c8:	0018      	movs	r0, r3
 80048ca:	f7fb fcc7 	bl	800025c <__aeabi_uidivmod>
 80048ce:	000b      	movs	r3, r1
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d101      	bne.n	80048da <main+0x29a>
 80048d6:	f001 fc13 	bl	8006100 <GetLatLon>
		  if(updateScreen>=5)
 80048da:	4b4e      	ldr	r3, [pc, #312]	@ (8004a14 <main+0x3d4>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2b04      	cmp	r3, #4
 80048e0:	d92a      	bls.n	8004938 <main+0x2f8>
		  {
			  //Animate character
			  Animate(animSitting,1);
 80048e2:	4b40      	ldr	r3, [pc, #256]	@ (80049e4 <main+0x3a4>)
 80048e4:	2101      	movs	r1, #1
 80048e6:	0018      	movs	r0, r3
 80048e8:	f001 f8ca 	bl	8005a80 <Animate>
			  updateScreen = 0;
 80048ec:	4b49      	ldr	r3, [pc, #292]	@ (8004a14 <main+0x3d4>)
 80048ee:	2200      	movs	r2, #0
 80048f0:	601a      	str	r2, [r3, #0]
			  //Update steps
			  drawString(0,150,"-SILLY LITTLE GUY-",WHITE,BLACK,1,1);
 80048f2:	2301      	movs	r3, #1
 80048f4:	425b      	negs	r3, r3
 80048f6:	4a4a      	ldr	r2, [pc, #296]	@ (8004a20 <main+0x3e0>)
 80048f8:	2101      	movs	r1, #1
 80048fa:	9102      	str	r1, [sp, #8]
 80048fc:	2101      	movs	r1, #1
 80048fe:	9101      	str	r1, [sp, #4]
 8004900:	2100      	movs	r1, #0
 8004902:	9100      	str	r1, [sp, #0]
 8004904:	2196      	movs	r1, #150	@ 0x96
 8004906:	2000      	movs	r0, #0
 8004908:	f7ff f907 	bl	8003b1a <drawString>
			  sprintf(buffer2, "Steps: %d ", game.stepsToday);
 800490c:	4a36      	ldr	r2, [pc, #216]	@ (80049e8 <main+0x3a8>)
 800490e:	2390      	movs	r3, #144	@ 0x90
 8004910:	005b      	lsls	r3, r3, #1
 8004912:	58d2      	ldr	r2, [r2, r3]
 8004914:	4943      	ldr	r1, [pc, #268]	@ (8004a24 <main+0x3e4>)
 8004916:	4b44      	ldr	r3, [pc, #272]	@ (8004a28 <main+0x3e8>)
 8004918:	0018      	movs	r0, r3
 800491a:	f009 fdc3 	bl	800e4a4 <siprintf>
			  drawString(0, 10, buffer2, WHITE, BLACK, 1, 1);
 800491e:	2301      	movs	r3, #1
 8004920:	425b      	negs	r3, r3
 8004922:	4a41      	ldr	r2, [pc, #260]	@ (8004a28 <main+0x3e8>)
 8004924:	2101      	movs	r1, #1
 8004926:	9102      	str	r1, [sp, #8]
 8004928:	2101      	movs	r1, #1
 800492a:	9101      	str	r1, [sp, #4]
 800492c:	2100      	movs	r1, #0
 800492e:	9100      	str	r1, [sp, #0]
 8004930:	210a      	movs	r1, #10
 8004932:	2000      	movs	r0, #0
 8004934:	f7ff f8f1 	bl	8003b1a <drawString>
		  }

		  //Interact with the SLG
		  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1) == GPIO_PIN_SET )
 8004938:	4b3c      	ldr	r3, [pc, #240]	@ (8004a2c <main+0x3ec>)
 800493a:	2102      	movs	r1, #2
 800493c:	0018      	movs	r0, r3
 800493e:	f003 fe0f 	bl	8008560 <HAL_GPIO_ReadPin>
 8004942:	0003      	movs	r3, r0
 8004944:	2b01      	cmp	r3, #1
 8004946:	d107      	bne.n	8004958 <main+0x318>
		  {
			  effect = Evolution;
 8004948:	4b39      	ldr	r3, [pc, #228]	@ (8004a30 <main+0x3f0>)
 800494a:	2206      	movs	r2, #6
 800494c:	701a      	strb	r2, [r3, #0]
			  PlayEffect(effect);
 800494e:	4b38      	ldr	r3, [pc, #224]	@ (8004a30 <main+0x3f0>)
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	0018      	movs	r0, r3
 8004954:	f000 ff30 	bl	80057b8 <PlayEffect>
		  }


		  //Change current Menu
		  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_SET ) {
 8004958:	4b36      	ldr	r3, [pc, #216]	@ (8004a34 <main+0x3f4>)
 800495a:	2104      	movs	r1, #4
 800495c:	0018      	movs	r0, r3
 800495e:	f003 fdff 	bl	8008560 <HAL_GPIO_ReadPin>
 8004962:	0003      	movs	r3, r0
 8004964:	2b01      	cmp	r3, #1
 8004966:	d111      	bne.n	800498c <main+0x34c>
			  effect = MenuBeep;
 8004968:	4b31      	ldr	r3, [pc, #196]	@ (8004a30 <main+0x3f0>)
 800496a:	2200      	movs	r2, #0
 800496c:	701a      	strb	r2, [r3, #0]
			  PlayEffect(effect);
 800496e:	4b30      	ldr	r3, [pc, #192]	@ (8004a30 <main+0x3f0>)
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	0018      	movs	r0, r3
 8004974:	f000 ff20 	bl	80057b8 <PlayEffect>

			  currentMenu = Settings;
 8004978:	4b27      	ldr	r3, [pc, #156]	@ (8004a18 <main+0x3d8>)
 800497a:	2204      	movs	r2, #4
 800497c:	701a      	strb	r2, [r3, #0]
			  canChange = 0;
 800497e:	4b2e      	ldr	r3, [pc, #184]	@ (8004a38 <main+0x3f8>)
 8004980:	2200      	movs	r2, #0
 8004982:	701a      	strb	r2, [r3, #0]
			  fillScreen(BLACK);
 8004984:	2000      	movs	r0, #0
 8004986:	f7ff fa0d 	bl	8003da4 <fillScreen>
		  }
		  else
			  canChange = 1;


		  break;
 800498a:	e360      	b.n	800504e <main+0xa0e>
		  else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_SET ) {
 800498c:	2380      	movs	r3, #128	@ 0x80
 800498e:	011a      	lsls	r2, r3, #4
 8004990:	23a0      	movs	r3, #160	@ 0xa0
 8004992:	05db      	lsls	r3, r3, #23
 8004994:	0011      	movs	r1, r2
 8004996:	0018      	movs	r0, r3
 8004998:	f003 fde2 	bl	8008560 <HAL_GPIO_ReadPin>
 800499c:	0003      	movs	r3, r0
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d111      	bne.n	80049c6 <main+0x386>
			  effect = MenuBeep;
 80049a2:	4b23      	ldr	r3, [pc, #140]	@ (8004a30 <main+0x3f0>)
 80049a4:	2200      	movs	r2, #0
 80049a6:	701a      	strb	r2, [r3, #0]
			  PlayEffect(effect);
 80049a8:	4b21      	ldr	r3, [pc, #132]	@ (8004a30 <main+0x3f0>)
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	0018      	movs	r0, r3
 80049ae:	f000 ff03 	bl	80057b8 <PlayEffect>
			  currentMenu = StatsDisplay;
 80049b2:	4b19      	ldr	r3, [pc, #100]	@ (8004a18 <main+0x3d8>)
 80049b4:	2200      	movs	r2, #0
 80049b6:	701a      	strb	r2, [r3, #0]
			  canChange = 0;
 80049b8:	4b1f      	ldr	r3, [pc, #124]	@ (8004a38 <main+0x3f8>)
 80049ba:	2200      	movs	r2, #0
 80049bc:	701a      	strb	r2, [r3, #0]
			  fillScreen(BLACK);
 80049be:	2000      	movs	r0, #0
 80049c0:	f7ff f9f0 	bl	8003da4 <fillScreen>
		  break;
 80049c4:	e343      	b.n	800504e <main+0xa0e>
			  canChange = 1;
 80049c6:	4b1c      	ldr	r3, [pc, #112]	@ (8004a38 <main+0x3f8>)
 80049c8:	2201      	movs	r2, #1
 80049ca:	701a      	strb	r2, [r3, #0]
		  break;
 80049cc:	e33f      	b.n	800504e <main+0xa0e>
 80049ce:	46c0      	nop			@ (mov r8, r8)
 80049d0:	20001bf0 	.word	0x20001bf0
 80049d4:	20001b54 	.word	0x20001b54
 80049d8:	20000008 	.word	0x20000008
 80049dc:	20001b5c 	.word	0x20001b5c
 80049e0:	200004d4 	.word	0x200004d4
 80049e4:	20001b64 	.word	0x20001b64
 80049e8:	20000bdc 	.word	0x20000bdc
 80049ec:	20000d2c 	.word	0x20000d2c
 80049f0:	414587dd 	.word	0x414587dd
 80049f4:	c2b233c5 	.word	0xc2b233c5
 80049f8:	20001b78 	.word	0x20001b78
 80049fc:	38d1b717 	.word	0x38d1b717
 8004a00:	20000d88 	.word	0x20000d88
 8004a04:	40014800 	.word	0x40014800
 8004a08:	20000000 	.word	0x20000000
 8004a0c:	20000002 	.word	0x20000002
 8004a10:	20000004 	.word	0x20000004
 8004a14:	20001b50 	.word	0x20001b50
 8004a18:	200009c4 	.word	0x200009c4
 8004a1c:	20000d84 	.word	0x20000d84
 8004a20:	08010c40 	.word	0x08010c40
 8004a24:	08010c54 	.word	0x08010c54
 8004a28:	20001b8c 	.word	0x20001b8c
 8004a2c:	50000800 	.word	0x50000800
 8004a30:	20000bd8 	.word	0x20000bd8
 8004a34:	50000400 	.word	0x50000400
 8004a38:	200009c5 	.word	0x200009c5
	  case StatsDisplay:

		  if(updateScreen>=5)
 8004a3c:	4bd4      	ldr	r3, [pc, #848]	@ (8004d90 <main+0x750>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2b04      	cmp	r3, #4
 8004a42:	d800      	bhi.n	8004a46 <main+0x406>
 8004a44:	e151      	b.n	8004cea <main+0x6aa>
		  {
			  //fillScreen(BLACK);

			  drawString(0, 150, "STEPS", WHITE, BLACK, 1, 1);
 8004a46:	2301      	movs	r3, #1
 8004a48:	425b      	negs	r3, r3
 8004a4a:	4ad2      	ldr	r2, [pc, #840]	@ (8004d94 <main+0x754>)
 8004a4c:	2101      	movs	r1, #1
 8004a4e:	9102      	str	r1, [sp, #8]
 8004a50:	2101      	movs	r1, #1
 8004a52:	9101      	str	r1, [sp, #4]
 8004a54:	2100      	movs	r1, #0
 8004a56:	9100      	str	r1, [sp, #0]
 8004a58:	2196      	movs	r1, #150	@ 0x96
 8004a5a:	2000      	movs	r0, #0
 8004a5c:	f7ff f85d 	bl	8003b1a <drawString>
			  sprintf(buffer2, "Today: %d ", game.stepsToday);
 8004a60:	4acd      	ldr	r2, [pc, #820]	@ (8004d98 <main+0x758>)
 8004a62:	2390      	movs	r3, #144	@ 0x90
 8004a64:	005b      	lsls	r3, r3, #1
 8004a66:	58d2      	ldr	r2, [r2, r3]
 8004a68:	49cc      	ldr	r1, [pc, #816]	@ (8004d9c <main+0x75c>)
 8004a6a:	4bcd      	ldr	r3, [pc, #820]	@ (8004da0 <main+0x760>)
 8004a6c:	0018      	movs	r0, r3
 8004a6e:	f009 fd19 	bl	800e4a4 <siprintf>
			  drawString(0, 140, buffer2, WHITE, BLACK, 1, 1);
 8004a72:	2301      	movs	r3, #1
 8004a74:	425b      	negs	r3, r3
 8004a76:	4aca      	ldr	r2, [pc, #808]	@ (8004da0 <main+0x760>)
 8004a78:	2101      	movs	r1, #1
 8004a7a:	9102      	str	r1, [sp, #8]
 8004a7c:	2101      	movs	r1, #1
 8004a7e:	9101      	str	r1, [sp, #4]
 8004a80:	2100      	movs	r1, #0
 8004a82:	9100      	str	r1, [sp, #0]
 8004a84:	218c      	movs	r1, #140	@ 0x8c
 8004a86:	2000      	movs	r0, #0
 8004a88:	f7ff f847 	bl	8003b1a <drawString>
			  sprintf(buffer2, "This week: %d ", game.weeklySteps);
 8004a8c:	4ac2      	ldr	r2, [pc, #776]	@ (8004d98 <main+0x758>)
 8004a8e:	238e      	movs	r3, #142	@ 0x8e
 8004a90:	005b      	lsls	r3, r3, #1
 8004a92:	58d2      	ldr	r2, [r2, r3]
 8004a94:	49c3      	ldr	r1, [pc, #780]	@ (8004da4 <main+0x764>)
 8004a96:	4bc2      	ldr	r3, [pc, #776]	@ (8004da0 <main+0x760>)
 8004a98:	0018      	movs	r0, r3
 8004a9a:	f009 fd03 	bl	800e4a4 <siprintf>
			  drawString(0, 130, buffer2, WHITE, BLACK, 1, 1);
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	425b      	negs	r3, r3
 8004aa2:	4abf      	ldr	r2, [pc, #764]	@ (8004da0 <main+0x760>)
 8004aa4:	2101      	movs	r1, #1
 8004aa6:	9102      	str	r1, [sp, #8]
 8004aa8:	2101      	movs	r1, #1
 8004aaa:	9101      	str	r1, [sp, #4]
 8004aac:	2100      	movs	r1, #0
 8004aae:	9100      	str	r1, [sp, #0]
 8004ab0:	2182      	movs	r1, #130	@ 0x82
 8004ab2:	2000      	movs	r0, #0
 8004ab4:	f7ff f831 	bl	8003b1a <drawString>
			  sprintf(buffer2, "All time: %d ", game.allSteps);
 8004ab8:	4ab7      	ldr	r2, [pc, #732]	@ (8004d98 <main+0x758>)
 8004aba:	238c      	movs	r3, #140	@ 0x8c
 8004abc:	005b      	lsls	r3, r3, #1
 8004abe:	58d2      	ldr	r2, [r2, r3]
 8004ac0:	49b9      	ldr	r1, [pc, #740]	@ (8004da8 <main+0x768>)
 8004ac2:	4bb7      	ldr	r3, [pc, #732]	@ (8004da0 <main+0x760>)
 8004ac4:	0018      	movs	r0, r3
 8004ac6:	f009 fced 	bl	800e4a4 <siprintf>
			  drawString(0, 120, buffer2, WHITE, BLACK, 1, 1);
 8004aca:	2301      	movs	r3, #1
 8004acc:	425b      	negs	r3, r3
 8004ace:	4ab4      	ldr	r2, [pc, #720]	@ (8004da0 <main+0x760>)
 8004ad0:	2101      	movs	r1, #1
 8004ad2:	9102      	str	r1, [sp, #8]
 8004ad4:	2101      	movs	r1, #1
 8004ad6:	9101      	str	r1, [sp, #4]
 8004ad8:	2100      	movs	r1, #0
 8004ada:	9100      	str	r1, [sp, #0]
 8004adc:	2178      	movs	r1, #120	@ 0x78
 8004ade:	2000      	movs	r0, #0
 8004ae0:	f7ff f81b 	bl	8003b1a <drawString>
			  drawString(0, 110, "POSITIONS", WHITE, BLACK, 1,1);
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	425b      	negs	r3, r3
 8004ae8:	4ab0      	ldr	r2, [pc, #704]	@ (8004dac <main+0x76c>)
 8004aea:	2101      	movs	r1, #1
 8004aec:	9102      	str	r1, [sp, #8]
 8004aee:	2101      	movs	r1, #1
 8004af0:	9101      	str	r1, [sp, #4]
 8004af2:	2100      	movs	r1, #0
 8004af4:	9100      	str	r1, [sp, #0]
 8004af6:	216e      	movs	r1, #110	@ 0x6e
 8004af8:	2000      	movs	r0, #0
 8004afa:	f7ff f80e 	bl	8003b1a <drawString>
			  sprintf(buffer2, "Count/Mult: %d", game.numLocations);
 8004afe:	4ba6      	ldr	r3, [pc, #664]	@ (8004d98 <main+0x758>)
 8004b00:	695a      	ldr	r2, [r3, #20]
 8004b02:	49ab      	ldr	r1, [pc, #684]	@ (8004db0 <main+0x770>)
 8004b04:	4ba6      	ldr	r3, [pc, #664]	@ (8004da0 <main+0x760>)
 8004b06:	0018      	movs	r0, r3
 8004b08:	f009 fccc 	bl	800e4a4 <siprintf>
			  drawString(0, 100, buffer2, WHITE, BLACK, 1, 1);
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	425b      	negs	r3, r3
 8004b10:	4aa3      	ldr	r2, [pc, #652]	@ (8004da0 <main+0x760>)
 8004b12:	2101      	movs	r1, #1
 8004b14:	9102      	str	r1, [sp, #8]
 8004b16:	2101      	movs	r1, #1
 8004b18:	9101      	str	r1, [sp, #4]
 8004b1a:	2100      	movs	r1, #0
 8004b1c:	9100      	str	r1, [sp, #0]
 8004b1e:	2164      	movs	r1, #100	@ 0x64
 8004b20:	2000      	movs	r0, #0
 8004b22:	f7fe fffa 	bl	8003b1a <drawString>
			  sprintf(buffer2, "Old Lat: %d.%d", (int)(game.positions[game.numLocations-1].lat), abs((int)(((game.positions[game.numLocations-1].lat)*10000))%10000));
 8004b26:	4b9c      	ldr	r3, [pc, #624]	@ (8004d98 <main+0x758>)
 8004b28:	695b      	ldr	r3, [r3, #20]
 8004b2a:	1e5a      	subs	r2, r3, #1
 8004b2c:	4b9a      	ldr	r3, [pc, #616]	@ (8004d98 <main+0x758>)
 8004b2e:	3203      	adds	r2, #3
 8004b30:	00d2      	lsls	r2, r2, #3
 8004b32:	58d3      	ldr	r3, [r2, r3]
 8004b34:	1c18      	adds	r0, r3, #0
 8004b36:	f7fc fceb 	bl	8001510 <__aeabi_f2iz>
 8004b3a:	0004      	movs	r4, r0
 8004b3c:	4b96      	ldr	r3, [pc, #600]	@ (8004d98 <main+0x758>)
 8004b3e:	695b      	ldr	r3, [r3, #20]
 8004b40:	1e5a      	subs	r2, r3, #1
 8004b42:	4b95      	ldr	r3, [pc, #596]	@ (8004d98 <main+0x758>)
 8004b44:	3203      	adds	r2, #3
 8004b46:	00d2      	lsls	r2, r2, #3
 8004b48:	58d3      	ldr	r3, [r2, r3]
 8004b4a:	499a      	ldr	r1, [pc, #616]	@ (8004db4 <main+0x774>)
 8004b4c:	1c18      	adds	r0, r3, #0
 8004b4e:	f7fc f9fd 	bl	8000f4c <__aeabi_fmul>
 8004b52:	1c03      	adds	r3, r0, #0
 8004b54:	1c18      	adds	r0, r3, #0
 8004b56:	f7fc fcdb 	bl	8001510 <__aeabi_f2iz>
 8004b5a:	0003      	movs	r3, r0
 8004b5c:	4996      	ldr	r1, [pc, #600]	@ (8004db8 <main+0x778>)
 8004b5e:	0018      	movs	r0, r3
 8004b60:	f7fb fc66 	bl	8000430 <__aeabi_idivmod>
 8004b64:	000b      	movs	r3, r1
 8004b66:	17da      	asrs	r2, r3, #31
 8004b68:	189b      	adds	r3, r3, r2
 8004b6a:	4053      	eors	r3, r2
 8004b6c:	4993      	ldr	r1, [pc, #588]	@ (8004dbc <main+0x77c>)
 8004b6e:	488c      	ldr	r0, [pc, #560]	@ (8004da0 <main+0x760>)
 8004b70:	0022      	movs	r2, r4
 8004b72:	f009 fc97 	bl	800e4a4 <siprintf>
			  drawString(0, 90, buffer2, WHITE, BLACK, 1, 1);
 8004b76:	2301      	movs	r3, #1
 8004b78:	425b      	negs	r3, r3
 8004b7a:	4a89      	ldr	r2, [pc, #548]	@ (8004da0 <main+0x760>)
 8004b7c:	2101      	movs	r1, #1
 8004b7e:	9102      	str	r1, [sp, #8]
 8004b80:	2101      	movs	r1, #1
 8004b82:	9101      	str	r1, [sp, #4]
 8004b84:	2100      	movs	r1, #0
 8004b86:	9100      	str	r1, [sp, #0]
 8004b88:	215a      	movs	r1, #90	@ 0x5a
 8004b8a:	2000      	movs	r0, #0
 8004b8c:	f7fe ffc5 	bl	8003b1a <drawString>
			  sprintf(buffer2, "Old Lon: %d.%d", (int)(game.positions[game.numLocations-1].lon), abs((int)(((game.positions[game.numLocations-1].lon)*10000))%10000));
 8004b90:	4b81      	ldr	r3, [pc, #516]	@ (8004d98 <main+0x758>)
 8004b92:	695b      	ldr	r3, [r3, #20]
 8004b94:	3b01      	subs	r3, #1
 8004b96:	4a80      	ldr	r2, [pc, #512]	@ (8004d98 <main+0x758>)
 8004b98:	3303      	adds	r3, #3
 8004b9a:	00db      	lsls	r3, r3, #3
 8004b9c:	18d3      	adds	r3, r2, r3
 8004b9e:	3304      	adds	r3, #4
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	1c18      	adds	r0, r3, #0
 8004ba4:	f7fc fcb4 	bl	8001510 <__aeabi_f2iz>
 8004ba8:	0004      	movs	r4, r0
 8004baa:	4b7b      	ldr	r3, [pc, #492]	@ (8004d98 <main+0x758>)
 8004bac:	695b      	ldr	r3, [r3, #20]
 8004bae:	3b01      	subs	r3, #1
 8004bb0:	4a79      	ldr	r2, [pc, #484]	@ (8004d98 <main+0x758>)
 8004bb2:	3303      	adds	r3, #3
 8004bb4:	00db      	lsls	r3, r3, #3
 8004bb6:	18d3      	adds	r3, r2, r3
 8004bb8:	3304      	adds	r3, #4
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	497d      	ldr	r1, [pc, #500]	@ (8004db4 <main+0x774>)
 8004bbe:	1c18      	adds	r0, r3, #0
 8004bc0:	f7fc f9c4 	bl	8000f4c <__aeabi_fmul>
 8004bc4:	1c03      	adds	r3, r0, #0
 8004bc6:	1c18      	adds	r0, r3, #0
 8004bc8:	f7fc fca2 	bl	8001510 <__aeabi_f2iz>
 8004bcc:	0003      	movs	r3, r0
 8004bce:	497a      	ldr	r1, [pc, #488]	@ (8004db8 <main+0x778>)
 8004bd0:	0018      	movs	r0, r3
 8004bd2:	f7fb fc2d 	bl	8000430 <__aeabi_idivmod>
 8004bd6:	000b      	movs	r3, r1
 8004bd8:	17da      	asrs	r2, r3, #31
 8004bda:	189b      	adds	r3, r3, r2
 8004bdc:	4053      	eors	r3, r2
 8004bde:	4978      	ldr	r1, [pc, #480]	@ (8004dc0 <main+0x780>)
 8004be0:	486f      	ldr	r0, [pc, #444]	@ (8004da0 <main+0x760>)
 8004be2:	0022      	movs	r2, r4
 8004be4:	f009 fc5e 	bl	800e4a4 <siprintf>
			  drawString(0, 80, buffer2, WHITE, BLACK, 1, 1);
 8004be8:	2301      	movs	r3, #1
 8004bea:	425b      	negs	r3, r3
 8004bec:	4a6c      	ldr	r2, [pc, #432]	@ (8004da0 <main+0x760>)
 8004bee:	2101      	movs	r1, #1
 8004bf0:	9102      	str	r1, [sp, #8]
 8004bf2:	2101      	movs	r1, #1
 8004bf4:	9101      	str	r1, [sp, #4]
 8004bf6:	2100      	movs	r1, #0
 8004bf8:	9100      	str	r1, [sp, #0]
 8004bfa:	2150      	movs	r1, #80	@ 0x50
 8004bfc:	2000      	movs	r0, #0
 8004bfe:	f7fe ff8c 	bl	8003b1a <drawString>
			  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1)==GPIO_PIN_SET){
 8004c02:	4b70      	ldr	r3, [pc, #448]	@ (8004dc4 <main+0x784>)
 8004c04:	2102      	movs	r1, #2
 8004c06:	0018      	movs	r0, r3
 8004c08:	f003 fcaa 	bl	8008560 <HAL_GPIO_ReadPin>
 8004c0c:	0003      	movs	r3, r0
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d168      	bne.n	8004ce4 <main+0x6a4>
			  sprintf(buffer2, "Lat: %d.%d", (int)(GetJustLatLon().lat), abs(((int)((GetJustLatLon().lat)*10000))%10000));
 8004c12:	1d3b      	adds	r3, r7, #4
 8004c14:	0018      	movs	r0, r3
 8004c16:	f001 fbcb 	bl	80063b0 <GetJustLatLon>
 8004c1a:	1d3b      	adds	r3, r7, #4
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	1c18      	adds	r0, r3, #0
 8004c20:	f7fc fc76 	bl	8001510 <__aeabi_f2iz>
 8004c24:	0004      	movs	r4, r0
 8004c26:	250c      	movs	r5, #12
 8004c28:	197b      	adds	r3, r7, r5
 8004c2a:	0018      	movs	r0, r3
 8004c2c:	f001 fbc0 	bl	80063b0 <GetJustLatLon>
 8004c30:	197b      	adds	r3, r7, r5
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	495f      	ldr	r1, [pc, #380]	@ (8004db4 <main+0x774>)
 8004c36:	1c18      	adds	r0, r3, #0
 8004c38:	f7fc f988 	bl	8000f4c <__aeabi_fmul>
 8004c3c:	1c03      	adds	r3, r0, #0
 8004c3e:	1c18      	adds	r0, r3, #0
 8004c40:	f7fc fc66 	bl	8001510 <__aeabi_f2iz>
 8004c44:	0003      	movs	r3, r0
 8004c46:	495c      	ldr	r1, [pc, #368]	@ (8004db8 <main+0x778>)
 8004c48:	0018      	movs	r0, r3
 8004c4a:	f7fb fbf1 	bl	8000430 <__aeabi_idivmod>
 8004c4e:	000b      	movs	r3, r1
 8004c50:	17da      	asrs	r2, r3, #31
 8004c52:	189b      	adds	r3, r3, r2
 8004c54:	4053      	eors	r3, r2
 8004c56:	495c      	ldr	r1, [pc, #368]	@ (8004dc8 <main+0x788>)
 8004c58:	4851      	ldr	r0, [pc, #324]	@ (8004da0 <main+0x760>)
 8004c5a:	0022      	movs	r2, r4
 8004c5c:	f009 fc22 	bl	800e4a4 <siprintf>
			  drawString(0, 70, buffer2, WHITE, BLACK, 1, 1);
 8004c60:	2301      	movs	r3, #1
 8004c62:	425b      	negs	r3, r3
 8004c64:	4a4e      	ldr	r2, [pc, #312]	@ (8004da0 <main+0x760>)
 8004c66:	2101      	movs	r1, #1
 8004c68:	9102      	str	r1, [sp, #8]
 8004c6a:	2101      	movs	r1, #1
 8004c6c:	9101      	str	r1, [sp, #4]
 8004c6e:	2100      	movs	r1, #0
 8004c70:	9100      	str	r1, [sp, #0]
 8004c72:	2146      	movs	r1, #70	@ 0x46
 8004c74:	2000      	movs	r0, #0
 8004c76:	f7fe ff50 	bl	8003b1a <drawString>
			  sprintf(buffer2, "Lon: %d.%d", (int)(GetJustLatLon().lon), abs((int)(((GetJustLatLon().lon)*10000))%10000));
 8004c7a:	2414      	movs	r4, #20
 8004c7c:	193b      	adds	r3, r7, r4
 8004c7e:	0018      	movs	r0, r3
 8004c80:	f001 fb96 	bl	80063b0 <GetJustLatLon>
 8004c84:	193b      	adds	r3, r7, r4
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	1c18      	adds	r0, r3, #0
 8004c8a:	f7fc fc41 	bl	8001510 <__aeabi_f2iz>
 8004c8e:	0004      	movs	r4, r0
 8004c90:	251c      	movs	r5, #28
 8004c92:	197b      	adds	r3, r7, r5
 8004c94:	0018      	movs	r0, r3
 8004c96:	f001 fb8b 	bl	80063b0 <GetJustLatLon>
 8004c9a:	197b      	adds	r3, r7, r5
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	4945      	ldr	r1, [pc, #276]	@ (8004db4 <main+0x774>)
 8004ca0:	1c18      	adds	r0, r3, #0
 8004ca2:	f7fc f953 	bl	8000f4c <__aeabi_fmul>
 8004ca6:	1c03      	adds	r3, r0, #0
 8004ca8:	1c18      	adds	r0, r3, #0
 8004caa:	f7fc fc31 	bl	8001510 <__aeabi_f2iz>
 8004cae:	0003      	movs	r3, r0
 8004cb0:	4941      	ldr	r1, [pc, #260]	@ (8004db8 <main+0x778>)
 8004cb2:	0018      	movs	r0, r3
 8004cb4:	f7fb fbbc 	bl	8000430 <__aeabi_idivmod>
 8004cb8:	000b      	movs	r3, r1
 8004cba:	17da      	asrs	r2, r3, #31
 8004cbc:	189b      	adds	r3, r3, r2
 8004cbe:	4053      	eors	r3, r2
 8004cc0:	4942      	ldr	r1, [pc, #264]	@ (8004dcc <main+0x78c>)
 8004cc2:	4837      	ldr	r0, [pc, #220]	@ (8004da0 <main+0x760>)
 8004cc4:	0022      	movs	r2, r4
 8004cc6:	f009 fbed 	bl	800e4a4 <siprintf>
			  drawString(0, 60, buffer2, WHITE, BLACK, 1, 1);
 8004cca:	2301      	movs	r3, #1
 8004ccc:	425b      	negs	r3, r3
 8004cce:	4a34      	ldr	r2, [pc, #208]	@ (8004da0 <main+0x760>)
 8004cd0:	2101      	movs	r1, #1
 8004cd2:	9102      	str	r1, [sp, #8]
 8004cd4:	2101      	movs	r1, #1
 8004cd6:	9101      	str	r1, [sp, #4]
 8004cd8:	2100      	movs	r1, #0
 8004cda:	9100      	str	r1, [sp, #0]
 8004cdc:	213c      	movs	r1, #60	@ 0x3c
 8004cde:	2000      	movs	r0, #0
 8004ce0:	f7fe ff1b 	bl	8003b1a <drawString>
			  }
			  updateScreen = 0;
 8004ce4:	4b2a      	ldr	r3, [pc, #168]	@ (8004d90 <main+0x750>)
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	601a      	str	r2, [r3, #0]
		  }
	  	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_SET ){
 8004cea:	4b39      	ldr	r3, [pc, #228]	@ (8004dd0 <main+0x790>)
 8004cec:	2104      	movs	r1, #4
 8004cee:	0018      	movs	r0, r3
 8004cf0:	f003 fc36 	bl	8008560 <HAL_GPIO_ReadPin>
 8004cf4:	0003      	movs	r3, r0
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d111      	bne.n	8004d1e <main+0x6de>
	  		effect = MenuBeep;
 8004cfa:	4b36      	ldr	r3, [pc, #216]	@ (8004dd4 <main+0x794>)
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	701a      	strb	r2, [r3, #0]
	  		PlayEffect(effect);
 8004d00:	4b34      	ldr	r3, [pc, #208]	@ (8004dd4 <main+0x794>)
 8004d02:	781b      	ldrb	r3, [r3, #0]
 8004d04:	0018      	movs	r0, r3
 8004d06:	f000 fd57 	bl	80057b8 <PlayEffect>

	  		currentMenu = Main;
 8004d0a:	4b33      	ldr	r3, [pc, #204]	@ (8004dd8 <main+0x798>)
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	701a      	strb	r2, [r3, #0]
	  		canChange = 0;
 8004d10:	4b32      	ldr	r3, [pc, #200]	@ (8004ddc <main+0x79c>)
 8004d12:	2200      	movs	r2, #0
 8004d14:	701a      	strb	r2, [r3, #0]
	  		fillScreen(BLACK);
 8004d16:	2000      	movs	r0, #0
 8004d18:	f7ff f844 	bl	8003da4 <fillScreen>
	  	  }
	  	  else
	  	      canChange = 1;

	  	  break;
 8004d1c:	e197      	b.n	800504e <main+0xa0e>
	  	      canChange = 1;
 8004d1e:	4b2f      	ldr	r3, [pc, #188]	@ (8004ddc <main+0x79c>)
 8004d20:	2201      	movs	r2, #1
 8004d22:	701a      	strb	r2, [r3, #0]
	  	  break;
 8004d24:	e193      	b.n	800504e <main+0xa0e>
	  case MusicTest:
		  //fillScreen(BLUE);
		  if((totalFrames++)%1000000==0){
 8004d26:	4b2e      	ldr	r3, [pc, #184]	@ (8004de0 <main+0x7a0>)
 8004d28:	881b      	ldrh	r3, [r3, #0]
 8004d2a:	1c5a      	adds	r2, r3, #1
 8004d2c:	b291      	uxth	r1, r2
 8004d2e:	4a2c      	ldr	r2, [pc, #176]	@ (8004de0 <main+0x7a0>)
 8004d30:	8011      	strh	r1, [r2, #0]
 8004d32:	492c      	ldr	r1, [pc, #176]	@ (8004de4 <main+0x7a4>)
 8004d34:	0018      	movs	r0, r3
 8004d36:	f7fb fb7b 	bl	8000430 <__aeabi_idivmod>
 8004d3a:	1e0b      	subs	r3, r1, #0
 8004d3c:	d000      	beq.n	8004d40 <main+0x700>
 8004d3e:	e185      	b.n	800504c <main+0xa0c>
			  freq = scale[toneIndex++%13];
 8004d40:	4b29      	ldr	r3, [pc, #164]	@ (8004de8 <main+0x7a8>)
 8004d42:	881b      	ldrh	r3, [r3, #0]
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	1c5a      	adds	r2, r3, #1
 8004d48:	b291      	uxth	r1, r2
 8004d4a:	4a27      	ldr	r2, [pc, #156]	@ (8004de8 <main+0x7a8>)
 8004d4c:	8011      	strh	r1, [r2, #0]
 8004d4e:	210d      	movs	r1, #13
 8004d50:	0018      	movs	r0, r3
 8004d52:	f7fb fa83 	bl	800025c <__aeabi_uidivmod>
 8004d56:	000b      	movs	r3, r1
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	001a      	movs	r2, r3
 8004d5c:	4b23      	ldr	r3, [pc, #140]	@ (8004dec <main+0x7ac>)
 8004d5e:	0052      	lsls	r2, r2, #1
 8004d60:	5ad3      	ldrh	r3, [r2, r3]
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	0018      	movs	r0, r3
 8004d66:	f7fe fb19 	bl	800339c <__aeabi_ui2d>
 8004d6a:	0002      	movs	r2, r0
 8004d6c:	000b      	movs	r3, r1
 8004d6e:	4920      	ldr	r1, [pc, #128]	@ (8004df0 <main+0x7b0>)
 8004d70:	600a      	str	r2, [r1, #0]
 8004d72:	604b      	str	r3, [r1, #4]
			  ChangeNote(freq);
 8004d74:	4b1e      	ldr	r3, [pc, #120]	@ (8004df0 <main+0x7b0>)
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	0010      	movs	r0, r2
 8004d7c:	0019      	movs	r1, r3
 8004d7e:	f7fb fc3b 	bl	80005f8 <__aeabi_d2uiz>
 8004d82:	0003      	movs	r3, r0
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	0018      	movs	r0, r3
 8004d88:	f000 fcf6 	bl	8005778 <ChangeNote>
		  }
		  break;
 8004d8c:	e15e      	b.n	800504c <main+0xa0c>
 8004d8e:	46c0      	nop			@ (mov r8, r8)
 8004d90:	20001b50 	.word	0x20001b50
 8004d94:	08010c60 	.word	0x08010c60
 8004d98:	20000bdc 	.word	0x20000bdc
 8004d9c:	08010c68 	.word	0x08010c68
 8004da0:	20001b8c 	.word	0x20001b8c
 8004da4:	08010c74 	.word	0x08010c74
 8004da8:	08010c84 	.word	0x08010c84
 8004dac:	08010c94 	.word	0x08010c94
 8004db0:	08010ca0 	.word	0x08010ca0
 8004db4:	461c4000 	.word	0x461c4000
 8004db8:	00002710 	.word	0x00002710
 8004dbc:	08010cb0 	.word	0x08010cb0
 8004dc0:	08010cc0 	.word	0x08010cc0
 8004dc4:	50000800 	.word	0x50000800
 8004dc8:	08010cd0 	.word	0x08010cd0
 8004dcc:	08010cdc 	.word	0x08010cdc
 8004dd0:	50000400 	.word	0x50000400
 8004dd4:	20000bd8 	.word	0x20000bd8
 8004dd8:	200009c4 	.word	0x200009c4
 8004ddc:	200009c5 	.word	0x200009c5
 8004de0:	20000d84 	.word	0x20000d84
 8004de4:	000f4240 	.word	0x000f4240
 8004de8:	20001b88 	.word	0x20001b88
 8004dec:	20000998 	.word	0x20000998
 8004df0:	20001b80 	.word	0x20001b80
		  //{
			  //SendData();
			  //ReceiveData();
		  //}

		  if(updateScreen>=2)
 8004df4:	4b9a      	ldr	r3, [pc, #616]	@ (8005060 <main+0xa20>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d800      	bhi.n	8004dfe <main+0x7be>
 8004dfc:	e101      	b.n	8005002 <main+0x9c2>
		  {
			  updateScreen = 0;
 8004dfe:	4b98      	ldr	r3, [pc, #608]	@ (8005060 <main+0xa20>)
 8004e00:	2200      	movs	r2, #0
 8004e02:	601a      	str	r2, [r3, #0]
			  drawString(0, 150, "-OPTIONS-", WHITE, BLACK, 1, 1);
 8004e04:	2301      	movs	r3, #1
 8004e06:	425b      	negs	r3, r3
 8004e08:	4a96      	ldr	r2, [pc, #600]	@ (8005064 <main+0xa24>)
 8004e0a:	2101      	movs	r1, #1
 8004e0c:	9102      	str	r1, [sp, #8]
 8004e0e:	2101      	movs	r1, #1
 8004e10:	9101      	str	r1, [sp, #4]
 8004e12:	2100      	movs	r1, #0
 8004e14:	9100      	str	r1, [sp, #0]
 8004e16:	2196      	movs	r1, #150	@ 0x96
 8004e18:	2000      	movs	r0, #0
 8004e1a:	f7fe fe7e 	bl	8003b1a <drawString>
			  sprintf(buffer2, "GOAL: %d ", game.dailyGoal);
 8004e1e:	4a92      	ldr	r2, [pc, #584]	@ (8005068 <main+0xa28>)
 8004e20:	2394      	movs	r3, #148	@ 0x94
 8004e22:	005b      	lsls	r3, r3, #1
 8004e24:	58d2      	ldr	r2, [r2, r3]
 8004e26:	4991      	ldr	r1, [pc, #580]	@ (800506c <main+0xa2c>)
 8004e28:	4b91      	ldr	r3, [pc, #580]	@ (8005070 <main+0xa30>)
 8004e2a:	0018      	movs	r0, r3
 8004e2c:	f009 fb3a 	bl	800e4a4 <siprintf>
			  drawString(0, 130, buffer2, WHITE, BLACK, 1, 1); //Display the current difficulty
 8004e30:	2301      	movs	r3, #1
 8004e32:	425b      	negs	r3, r3
 8004e34:	4a8e      	ldr	r2, [pc, #568]	@ (8005070 <main+0xa30>)
 8004e36:	2101      	movs	r1, #1
 8004e38:	9102      	str	r1, [sp, #8]
 8004e3a:	2101      	movs	r1, #1
 8004e3c:	9101      	str	r1, [sp, #4]
 8004e3e:	2100      	movs	r1, #0
 8004e40:	9100      	str	r1, [sp, #0]
 8004e42:	2182      	movs	r1, #130	@ 0x82
 8004e44:	2000      	movs	r0, #0
 8004e46:	f7fe fe68 	bl	8003b1a <drawString>
			  drawString(0,110,"UPLOAD DATA",WHITE,BLACK,1,1);
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	425b      	negs	r3, r3
 8004e4e:	4a89      	ldr	r2, [pc, #548]	@ (8005074 <main+0xa34>)
 8004e50:	2101      	movs	r1, #1
 8004e52:	9102      	str	r1, [sp, #8]
 8004e54:	2101      	movs	r1, #1
 8004e56:	9101      	str	r1, [sp, #4]
 8004e58:	2100      	movs	r1, #0
 8004e5a:	9100      	str	r1, [sp, #0]
 8004e5c:	216e      	movs	r1, #110	@ 0x6e
 8004e5e:	2000      	movs	r0, #0
 8004e60:	f7fe fe5b 	bl	8003b1a <drawString>
			  if(editDifficulty)
 8004e64:	4b84      	ldr	r3, [pc, #528]	@ (8005078 <main+0xa38>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d063      	beq.n	8004f34 <main+0x8f4>
			  {
				  //Editing difficulty
				  drawLine(0,125,128,125,WHITE);
 8004e6c:	4b83      	ldr	r3, [pc, #524]	@ (800507c <main+0xa3c>)
 8004e6e:	9300      	str	r3, [sp, #0]
 8004e70:	237d      	movs	r3, #125	@ 0x7d
 8004e72:	2280      	movs	r2, #128	@ 0x80
 8004e74:	217d      	movs	r1, #125	@ 0x7d
 8004e76:	2000      	movs	r0, #0
 8004e78:	f7fe fdbf 	bl	80039fa <drawLine>
				  //GET OUT when the center button is pressed!
				  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1))
 8004e7c:	4b80      	ldr	r3, [pc, #512]	@ (8005080 <main+0xa40>)
 8004e7e:	2102      	movs	r1, #2
 8004e80:	0018      	movs	r0, r3
 8004e82:	f003 fb6d 	bl	8008560 <HAL_GPIO_ReadPin>
 8004e86:	1e03      	subs	r3, r0, #0
 8004e88:	d00b      	beq.n	8004ea2 <main+0x862>
				  {
					  editDifficulty = 0;
 8004e8a:	4b7b      	ldr	r3, [pc, #492]	@ (8005078 <main+0xa38>)
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	601a      	str	r2, [r3, #0]
					  drawLine(0,125,128,125,BLACK);
 8004e90:	2300      	movs	r3, #0
 8004e92:	9300      	str	r3, [sp, #0]
 8004e94:	237d      	movs	r3, #125	@ 0x7d
 8004e96:	2280      	movs	r2, #128	@ 0x80
 8004e98:	217d      	movs	r1, #125	@ 0x7d
 8004e9a:	2000      	movs	r0, #0
 8004e9c:	f7fe fdad 	bl	80039fa <drawLine>
 8004ea0:	e026      	b.n	8004ef0 <main+0x8b0>
				  }
				  //Right increments the goal
				  else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2))
 8004ea2:	4b78      	ldr	r3, [pc, #480]	@ (8005084 <main+0xa44>)
 8004ea4:	2104      	movs	r1, #4
 8004ea6:	0018      	movs	r0, r3
 8004ea8:	f003 fb5a 	bl	8008560 <HAL_GPIO_ReadPin>
 8004eac:	1e03      	subs	r3, r0, #0
 8004eae:	d00b      	beq.n	8004ec8 <main+0x888>
				  {
					  game.dailyGoal += 1000;
 8004eb0:	4a6d      	ldr	r2, [pc, #436]	@ (8005068 <main+0xa28>)
 8004eb2:	2394      	movs	r3, #148	@ 0x94
 8004eb4:	005b      	lsls	r3, r3, #1
 8004eb6:	58d3      	ldr	r3, [r2, r3]
 8004eb8:	22fa      	movs	r2, #250	@ 0xfa
 8004eba:	0092      	lsls	r2, r2, #2
 8004ebc:	1899      	adds	r1, r3, r2
 8004ebe:	4a6a      	ldr	r2, [pc, #424]	@ (8005068 <main+0xa28>)
 8004ec0:	2394      	movs	r3, #148	@ 0x94
 8004ec2:	005b      	lsls	r3, r3, #1
 8004ec4:	50d1      	str	r1, [r2, r3]
 8004ec6:	e013      	b.n	8004ef0 <main+0x8b0>
				  }
				  //Left decrements the goal
				  else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11))
 8004ec8:	2380      	movs	r3, #128	@ 0x80
 8004eca:	011a      	lsls	r2, r3, #4
 8004ecc:	23a0      	movs	r3, #160	@ 0xa0
 8004ece:	05db      	lsls	r3, r3, #23
 8004ed0:	0011      	movs	r1, r2
 8004ed2:	0018      	movs	r0, r3
 8004ed4:	f003 fb44 	bl	8008560 <HAL_GPIO_ReadPin>
 8004ed8:	1e03      	subs	r3, r0, #0
 8004eda:	d009      	beq.n	8004ef0 <main+0x8b0>
				  {
					  game.dailyGoal -= 1000;
 8004edc:	4a62      	ldr	r2, [pc, #392]	@ (8005068 <main+0xa28>)
 8004ede:	2394      	movs	r3, #148	@ 0x94
 8004ee0:	005b      	lsls	r3, r3, #1
 8004ee2:	58d3      	ldr	r3, [r2, r3]
 8004ee4:	4a68      	ldr	r2, [pc, #416]	@ (8005088 <main+0xa48>)
 8004ee6:	1899      	adds	r1, r3, r2
 8004ee8:	4a5f      	ldr	r2, [pc, #380]	@ (8005068 <main+0xa28>)
 8004eea:	2394      	movs	r3, #148	@ 0x94
 8004eec:	005b      	lsls	r3, r3, #1
 8004eee:	50d1      	str	r1, [r2, r3]
				  }

				  if(game.dailyGoal>=999000)
 8004ef0:	4a5d      	ldr	r2, [pc, #372]	@ (8005068 <main+0xa28>)
 8004ef2:	2394      	movs	r3, #148	@ 0x94
 8004ef4:	005b      	lsls	r3, r3, #1
 8004ef6:	58d3      	ldr	r3, [r2, r3]
 8004ef8:	4a64      	ldr	r2, [pc, #400]	@ (800508c <main+0xa4c>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d905      	bls.n	8004f0a <main+0x8ca>
				  {
					  game.dailyGoal = 0;
 8004efe:	4a5a      	ldr	r2, [pc, #360]	@ (8005068 <main+0xa28>)
 8004f00:	2394      	movs	r3, #148	@ 0x94
 8004f02:	005b      	lsls	r3, r3, #1
 8004f04:	2100      	movs	r1, #0
 8004f06:	50d1      	str	r1, [r2, r3]
 8004f08:	e00a      	b.n	8004f20 <main+0x8e0>
				  }
				  else if (game.dailyGoal<=0)
 8004f0a:	4a57      	ldr	r2, [pc, #348]	@ (8005068 <main+0xa28>)
 8004f0c:	2394      	movs	r3, #148	@ 0x94
 8004f0e:	005b      	lsls	r3, r3, #1
 8004f10:	58d3      	ldr	r3, [r2, r3]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d104      	bne.n	8004f20 <main+0x8e0>
				  {
					  game.dailyGoal=999000;
 8004f16:	4a54      	ldr	r2, [pc, #336]	@ (8005068 <main+0xa28>)
 8004f18:	2394      	movs	r3, #148	@ 0x94
 8004f1a:	005b      	lsls	r3, r3, #1
 8004f1c:	495c      	ldr	r1, [pc, #368]	@ (8005090 <main+0xa50>)
 8004f1e:	50d1      	str	r1, [r2, r3]
				  }
				  sprintf(buffer2, "DIFFICULTY: %d ", game.dailyGoal);
 8004f20:	4a51      	ldr	r2, [pc, #324]	@ (8005068 <main+0xa28>)
 8004f22:	2394      	movs	r3, #148	@ 0x94
 8004f24:	005b      	lsls	r3, r3, #1
 8004f26:	58d2      	ldr	r2, [r2, r3]
 8004f28:	495a      	ldr	r1, [pc, #360]	@ (8005094 <main+0xa54>)
 8004f2a:	4b51      	ldr	r3, [pc, #324]	@ (8005070 <main+0xa30>)
 8004f2c:	0018      	movs	r0, r3
 8004f2e:	f009 fab9 	bl	800e4a4 <siprintf>
 8004f32:	e066      	b.n	8005002 <main+0x9c2>

			  }
			  else if(userUpload)
 8004f34:	4b58      	ldr	r3, [pc, #352]	@ (8005098 <main+0xa58>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d007      	beq.n	8004f4c <main+0x90c>
			  {
				  userUpload=0;
 8004f3c:	4b56      	ldr	r3, [pc, #344]	@ (8005098 <main+0xa58>)
 8004f3e:	2200      	movs	r2, #0
 8004f40:	601a      	str	r2, [r3, #0]
				  SendData();
 8004f42:	f000 fe29 	bl	8005b98 <SendData>
				  ReceiveData();
 8004f46:	f000 feef 	bl	8005d28 <ReceiveData>
 8004f4a:	e05a      	b.n	8005002 <main+0x9c2>
			  }
			  else{
			  //Difficulty
			  if(currentSetting==0)
 8004f4c:	4b53      	ldr	r3, [pc, #332]	@ (800509c <main+0xa5c>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d110      	bne.n	8004f76 <main+0x936>
			  {
				  //Try to underline the option being selected
				  drawLine(0,125,20,125,WHITE);
 8004f54:	4b49      	ldr	r3, [pc, #292]	@ (800507c <main+0xa3c>)
 8004f56:	9300      	str	r3, [sp, #0]
 8004f58:	237d      	movs	r3, #125	@ 0x7d
 8004f5a:	2214      	movs	r2, #20
 8004f5c:	217d      	movs	r1, #125	@ 0x7d
 8004f5e:	2000      	movs	r0, #0
 8004f60:	f7fe fd4b 	bl	80039fa <drawLine>
				  //Then erase the highlight under the other option not being selected
				  drawLine(0,105,20,105,BLACK);
 8004f64:	2300      	movs	r3, #0
 8004f66:	9300      	str	r3, [sp, #0]
 8004f68:	2369      	movs	r3, #105	@ 0x69
 8004f6a:	2214      	movs	r2, #20
 8004f6c:	2169      	movs	r1, #105	@ 0x69
 8004f6e:	2000      	movs	r0, #0
 8004f70:	f7fe fd43 	bl	80039fa <drawLine>
 8004f74:	e013      	b.n	8004f9e <main+0x95e>
			  }
			  //Upload
			  else if(currentSetting==1)
 8004f76:	4b49      	ldr	r3, [pc, #292]	@ (800509c <main+0xa5c>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d10f      	bne.n	8004f9e <main+0x95e>
			  {
				  drawLine(0,105,20,105,WHITE);
 8004f7e:	4b3f      	ldr	r3, [pc, #252]	@ (800507c <main+0xa3c>)
 8004f80:	9300      	str	r3, [sp, #0]
 8004f82:	2369      	movs	r3, #105	@ 0x69
 8004f84:	2214      	movs	r2, #20
 8004f86:	2169      	movs	r1, #105	@ 0x69
 8004f88:	2000      	movs	r0, #0
 8004f8a:	f7fe fd36 	bl	80039fa <drawLine>
				  drawLine(0,125,20,125,BLACK);
 8004f8e:	2300      	movs	r3, #0
 8004f90:	9300      	str	r3, [sp, #0]
 8004f92:	237d      	movs	r3, #125	@ 0x7d
 8004f94:	2214      	movs	r2, #20
 8004f96:	217d      	movs	r1, #125	@ 0x7d
 8004f98:	2000      	movs	r0, #0
 8004f9a:	f7fe fd2e 	bl	80039fa <drawLine>
			  }
			  //IF RIGHT BUTTON IS PRESSED, INCREMENT THE SETTINGS MENU
			  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_SET)
 8004f9e:	4b39      	ldr	r3, [pc, #228]	@ (8005084 <main+0xa44>)
 8004fa0:	2104      	movs	r1, #4
 8004fa2:	0018      	movs	r0, r3
 8004fa4:	f003 fadc 	bl	8008560 <HAL_GPIO_ReadPin>
 8004fa8:	0003      	movs	r3, r0
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	d10c      	bne.n	8004fc8 <main+0x988>
			  {
				  ++currentSetting;
 8004fae:	4b3b      	ldr	r3, [pc, #236]	@ (800509c <main+0xa5c>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	1c5a      	adds	r2, r3, #1
 8004fb4:	4b39      	ldr	r3, [pc, #228]	@ (800509c <main+0xa5c>)
 8004fb6:	601a      	str	r2, [r3, #0]
				  if(currentSetting>1)
 8004fb8:	4b38      	ldr	r3, [pc, #224]	@ (800509c <main+0xa5c>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d920      	bls.n	8005002 <main+0x9c2>
					  currentSetting=0;
 8004fc0:	4b36      	ldr	r3, [pc, #216]	@ (800509c <main+0xa5c>)
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	601a      	str	r2, [r3, #0]
 8004fc6:	e01c      	b.n	8005002 <main+0x9c2>
			  }
			  //PD6=Center button
			  else if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1) && currentSetting==0)
 8004fc8:	4b2d      	ldr	r3, [pc, #180]	@ (8005080 <main+0xa40>)
 8004fca:	2102      	movs	r1, #2
 8004fcc:	0018      	movs	r0, r3
 8004fce:	f003 fac7 	bl	8008560 <HAL_GPIO_ReadPin>
 8004fd2:	1e03      	subs	r3, r0, #0
 8004fd4:	d007      	beq.n	8004fe6 <main+0x9a6>
 8004fd6:	4b31      	ldr	r3, [pc, #196]	@ (800509c <main+0xa5c>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d103      	bne.n	8004fe6 <main+0x9a6>
			  {
				  editDifficulty=1;
 8004fde:	4b26      	ldr	r3, [pc, #152]	@ (8005078 <main+0xa38>)
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	601a      	str	r2, [r3, #0]
 8004fe4:	e00d      	b.n	8005002 <main+0x9c2>
			  }
			  else if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1) && currentSetting==1)
 8004fe6:	4b26      	ldr	r3, [pc, #152]	@ (8005080 <main+0xa40>)
 8004fe8:	2102      	movs	r1, #2
 8004fea:	0018      	movs	r0, r3
 8004fec:	f003 fab8 	bl	8008560 <HAL_GPIO_ReadPin>
 8004ff0:	1e03      	subs	r3, r0, #0
 8004ff2:	d006      	beq.n	8005002 <main+0x9c2>
 8004ff4:	4b29      	ldr	r3, [pc, #164]	@ (800509c <main+0xa5c>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d102      	bne.n	8005002 <main+0x9c2>
			  {
				  userUpload=1;
 8004ffc:	4b26      	ldr	r3, [pc, #152]	@ (8005098 <main+0xa58>)
 8004ffe:	2201      	movs	r2, #1
 8005000:	601a      	str	r2, [r3, #0]
			  }
		  }
		  }

		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_SET && !editDifficulty) {
 8005002:	2380      	movs	r3, #128	@ 0x80
 8005004:	011a      	lsls	r2, r3, #4
 8005006:	23a0      	movs	r3, #160	@ 0xa0
 8005008:	05db      	lsls	r3, r3, #23
 800500a:	0011      	movs	r1, r2
 800500c:	0018      	movs	r0, r3
 800500e:	f003 faa7 	bl	8008560 <HAL_GPIO_ReadPin>
 8005012:	0003      	movs	r3, r0
 8005014:	2b01      	cmp	r3, #1
 8005016:	d115      	bne.n	8005044 <main+0xa04>
 8005018:	4b17      	ldr	r3, [pc, #92]	@ (8005078 <main+0xa38>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d111      	bne.n	8005044 <main+0xa04>
			  effect = MenuBeep;
 8005020:	4b1f      	ldr	r3, [pc, #124]	@ (80050a0 <main+0xa60>)
 8005022:	2200      	movs	r2, #0
 8005024:	701a      	strb	r2, [r3, #0]
			  PlayEffect(effect);
 8005026:	4b1e      	ldr	r3, [pc, #120]	@ (80050a0 <main+0xa60>)
 8005028:	781b      	ldrb	r3, [r3, #0]
 800502a:	0018      	movs	r0, r3
 800502c:	f000 fbc4 	bl	80057b8 <PlayEffect>

			  currentMenu = Main;
 8005030:	4b1c      	ldr	r3, [pc, #112]	@ (80050a4 <main+0xa64>)
 8005032:	2201      	movs	r2, #1
 8005034:	701a      	strb	r2, [r3, #0]
			  canChange = 0;
 8005036:	4b1c      	ldr	r3, [pc, #112]	@ (80050a8 <main+0xa68>)
 8005038:	2200      	movs	r2, #0
 800503a:	701a      	strb	r2, [r3, #0]
			  fillScreen(BLACK);
 800503c:	2000      	movs	r0, #0
 800503e:	f7fe feb1 	bl	8003da4 <fillScreen>
		  }
		  else
			  canChange = 1;
		  break;
 8005042:	e004      	b.n	800504e <main+0xa0e>
			  canChange = 1;
 8005044:	4b18      	ldr	r3, [pc, #96]	@ (80050a8 <main+0xa68>)
 8005046:	2201      	movs	r2, #1
 8005048:	701a      	strb	r2, [r3, #0]
		  break;
 800504a:	e000      	b.n	800504e <main+0xa0e>
		  break;
 800504c:	46c0      	nop			@ (mov r8, r8)
		  	  drawString(70, 70, buffer, BLACK, GREEN, 1, 1);

		  break;*/

	  }
	  totalFrames++;
 800504e:	4b17      	ldr	r3, [pc, #92]	@ (80050ac <main+0xa6c>)
 8005050:	881b      	ldrh	r3, [r3, #0]
 8005052:	3301      	adds	r3, #1
 8005054:	b29a      	uxth	r2, r3
 8005056:	4b15      	ldr	r3, [pc, #84]	@ (80050ac <main+0xa6c>)
 8005058:	801a      	strh	r2, [r3, #0]
	  _ADXL343_ReadReg8(0x15, &steps, 1);
 800505a:	f7ff fb9b 	bl	8004794 <main+0x154>
 800505e:	46c0      	nop			@ (mov r8, r8)
 8005060:	20001b50 	.word	0x20001b50
 8005064:	08010ce8 	.word	0x08010ce8
 8005068:	20000bdc 	.word	0x20000bdc
 800506c:	08010cf4 	.word	0x08010cf4
 8005070:	20001b8c 	.word	0x20001b8c
 8005074:	08010d00 	.word	0x08010d00
 8005078:	20001bf8 	.word	0x20001bf8
 800507c:	0000ffff 	.word	0x0000ffff
 8005080:	50000800 	.word	0x50000800
 8005084:	50000400 	.word	0x50000400
 8005088:	fffffc18 	.word	0xfffffc18
 800508c:	000f3e57 	.word	0x000f3e57
 8005090:	000f3e58 	.word	0x000f3e58
 8005094:	08010d0c 	.word	0x08010d0c
 8005098:	20001bfc 	.word	0x20001bfc
 800509c:	20001bf4 	.word	0x20001bf4
 80050a0:	20000bd8 	.word	0x20000bd8
 80050a4:	200009c4 	.word	0x200009c4
 80050a8:	200009c5 	.word	0x200009c5
 80050ac:	20000d84 	.word	0x20000d84

080050b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80050b0:	b590      	push	{r4, r7, lr}
 80050b2:	b095      	sub	sp, #84	@ 0x54
 80050b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80050b6:	2414      	movs	r4, #20
 80050b8:	193b      	adds	r3, r7, r4
 80050ba:	0018      	movs	r0, r3
 80050bc:	233c      	movs	r3, #60	@ 0x3c
 80050be:	001a      	movs	r2, r3
 80050c0:	2100      	movs	r1, #0
 80050c2:	f009 fa5b 	bl	800e57c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80050c6:	1d3b      	adds	r3, r7, #4
 80050c8:	0018      	movs	r0, r3
 80050ca:	2310      	movs	r3, #16
 80050cc:	001a      	movs	r2, r3
 80050ce:	2100      	movs	r1, #0
 80050d0:	f009 fa54 	bl	800e57c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80050d4:	2380      	movs	r3, #128	@ 0x80
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	0018      	movs	r0, r3
 80050da:	f004 f8f3 	bl	80092c4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80050de:	193b      	adds	r3, r7, r4
 80050e0:	220a      	movs	r2, #10
 80050e2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80050e4:	193b      	adds	r3, r7, r4
 80050e6:	2280      	movs	r2, #128	@ 0x80
 80050e8:	0052      	lsls	r2, r2, #1
 80050ea:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80050ec:	0021      	movs	r1, r4
 80050ee:	187b      	adds	r3, r7, r1
 80050f0:	2200      	movs	r2, #0
 80050f2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80050f4:	187b      	adds	r3, r7, r1
 80050f6:	2240      	movs	r2, #64	@ 0x40
 80050f8:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80050fa:	187b      	adds	r3, r7, r1
 80050fc:	2201      	movs	r2, #1
 80050fe:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005100:	187b      	adds	r3, r7, r1
 8005102:	2202      	movs	r2, #2
 8005104:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005106:	187b      	adds	r3, r7, r1
 8005108:	2202      	movs	r2, #2
 800510a:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800510c:	187b      	adds	r3, r7, r1
 800510e:	2200      	movs	r2, #0
 8005110:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 8005112:	187b      	adds	r3, r7, r1
 8005114:	2208      	movs	r2, #8
 8005116:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005118:	187b      	adds	r3, r7, r1
 800511a:	2280      	movs	r2, #128	@ 0x80
 800511c:	0292      	lsls	r2, r2, #10
 800511e:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8005120:	187b      	adds	r3, r7, r1
 8005122:	2280      	movs	r2, #128	@ 0x80
 8005124:	0492      	lsls	r2, r2, #18
 8005126:	635a      	str	r2, [r3, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8005128:	187b      	adds	r3, r7, r1
 800512a:	2280      	movs	r2, #128	@ 0x80
 800512c:	0592      	lsls	r2, r2, #22
 800512e:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005130:	187b      	adds	r3, r7, r1
 8005132:	0018      	movs	r0, r3
 8005134:	f004 f912 	bl	800935c <HAL_RCC_OscConfig>
 8005138:	1e03      	subs	r3, r0, #0
 800513a:	d001      	beq.n	8005140 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800513c:	f001 f9f4 	bl	8006528 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005140:	1d3b      	adds	r3, r7, #4
 8005142:	2207      	movs	r2, #7
 8005144:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005146:	1d3b      	adds	r3, r7, #4
 8005148:	2202      	movs	r2, #2
 800514a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800514c:	1d3b      	adds	r3, r7, #4
 800514e:	2200      	movs	r2, #0
 8005150:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005152:	1d3b      	adds	r3, r7, #4
 8005154:	2200      	movs	r2, #0
 8005156:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005158:	1d3b      	adds	r3, r7, #4
 800515a:	2102      	movs	r1, #2
 800515c:	0018      	movs	r0, r3
 800515e:	f004 fc5d 	bl	8009a1c <HAL_RCC_ClockConfig>
 8005162:	1e03      	subs	r3, r0, #0
 8005164:	d001      	beq.n	800516a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8005166:	f001 f9df 	bl	8006528 <Error_Handler>
  }
}
 800516a:	46c0      	nop			@ (mov r8, r8)
 800516c:	46bd      	mov	sp, r7
 800516e:	b015      	add	sp, #84	@ 0x54
 8005170:	bd90      	pop	{r4, r7, pc}
	...

08005174 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005178:	4b1b      	ldr	r3, [pc, #108]	@ (80051e8 <MX_I2C1_Init+0x74>)
 800517a:	4a1c      	ldr	r2, [pc, #112]	@ (80051ec <MX_I2C1_Init+0x78>)
 800517c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10B17DB5;
 800517e:	4b1a      	ldr	r3, [pc, #104]	@ (80051e8 <MX_I2C1_Init+0x74>)
 8005180:	4a1b      	ldr	r2, [pc, #108]	@ (80051f0 <MX_I2C1_Init+0x7c>)
 8005182:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8005184:	4b18      	ldr	r3, [pc, #96]	@ (80051e8 <MX_I2C1_Init+0x74>)
 8005186:	2200      	movs	r2, #0
 8005188:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800518a:	4b17      	ldr	r3, [pc, #92]	@ (80051e8 <MX_I2C1_Init+0x74>)
 800518c:	2201      	movs	r2, #1
 800518e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005190:	4b15      	ldr	r3, [pc, #84]	@ (80051e8 <MX_I2C1_Init+0x74>)
 8005192:	2200      	movs	r2, #0
 8005194:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8005196:	4b14      	ldr	r3, [pc, #80]	@ (80051e8 <MX_I2C1_Init+0x74>)
 8005198:	2200      	movs	r2, #0
 800519a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800519c:	4b12      	ldr	r3, [pc, #72]	@ (80051e8 <MX_I2C1_Init+0x74>)
 800519e:	2200      	movs	r2, #0
 80051a0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80051a2:	4b11      	ldr	r3, [pc, #68]	@ (80051e8 <MX_I2C1_Init+0x74>)
 80051a4:	2200      	movs	r2, #0
 80051a6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80051a8:	4b0f      	ldr	r3, [pc, #60]	@ (80051e8 <MX_I2C1_Init+0x74>)
 80051aa:	2200      	movs	r2, #0
 80051ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80051ae:	4b0e      	ldr	r3, [pc, #56]	@ (80051e8 <MX_I2C1_Init+0x74>)
 80051b0:	0018      	movs	r0, r3
 80051b2:	f003 fa43 	bl	800863c <HAL_I2C_Init>
 80051b6:	1e03      	subs	r3, r0, #0
 80051b8:	d001      	beq.n	80051be <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80051ba:	f001 f9b5 	bl	8006528 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80051be:	4b0a      	ldr	r3, [pc, #40]	@ (80051e8 <MX_I2C1_Init+0x74>)
 80051c0:	2100      	movs	r1, #0
 80051c2:	0018      	movs	r0, r3
 80051c4:	f003 ffe6 	bl	8009194 <HAL_I2CEx_ConfigAnalogFilter>
 80051c8:	1e03      	subs	r3, r0, #0
 80051ca:	d001      	beq.n	80051d0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80051cc:	f001 f9ac 	bl	8006528 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80051d0:	4b05      	ldr	r3, [pc, #20]	@ (80051e8 <MX_I2C1_Init+0x74>)
 80051d2:	2100      	movs	r1, #0
 80051d4:	0018      	movs	r0, r3
 80051d6:	f004 f829 	bl	800922c <HAL_I2CEx_ConfigDigitalFilter>
 80051da:	1e03      	subs	r3, r0, #0
 80051dc:	d001      	beq.n	80051e2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80051de:	f001 f9a3 	bl	8006528 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80051e2:	46c0      	nop			@ (mov r8, r8)
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	20001c00 	.word	0x20001c00
 80051ec:	40005400 	.word	0x40005400
 80051f0:	10b17db5 	.word	0x10b17db5

080051f4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b090      	sub	sp, #64	@ 0x40
 80051f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80051fa:	232c      	movs	r3, #44	@ 0x2c
 80051fc:	18fb      	adds	r3, r7, r3
 80051fe:	0018      	movs	r0, r3
 8005200:	2314      	movs	r3, #20
 8005202:	001a      	movs	r2, r3
 8005204:	2100      	movs	r1, #0
 8005206:	f009 f9b9 	bl	800e57c <memset>
  RTC_DateTypeDef sDate = {0};
 800520a:	2328      	movs	r3, #40	@ 0x28
 800520c:	18fb      	adds	r3, r7, r3
 800520e:	2200      	movs	r2, #0
 8005210:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8005212:	003b      	movs	r3, r7
 8005214:	0018      	movs	r0, r3
 8005216:	2328      	movs	r3, #40	@ 0x28
 8005218:	001a      	movs	r2, r3
 800521a:	2100      	movs	r1, #0
 800521c:	f009 f9ae 	bl	800e57c <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8005220:	4b49      	ldr	r3, [pc, #292]	@ (8005348 <MX_RTC_Init+0x154>)
 8005222:	4a4a      	ldr	r2, [pc, #296]	@ (800534c <MX_RTC_Init+0x158>)
 8005224:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8005226:	4b48      	ldr	r3, [pc, #288]	@ (8005348 <MX_RTC_Init+0x154>)
 8005228:	2200      	movs	r2, #0
 800522a:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 800522c:	4b46      	ldr	r3, [pc, #280]	@ (8005348 <MX_RTC_Init+0x154>)
 800522e:	227f      	movs	r2, #127	@ 0x7f
 8005230:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8005232:	4b45      	ldr	r3, [pc, #276]	@ (8005348 <MX_RTC_Init+0x154>)
 8005234:	22ff      	movs	r2, #255	@ 0xff
 8005236:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8005238:	4b43      	ldr	r3, [pc, #268]	@ (8005348 <MX_RTC_Init+0x154>)
 800523a:	2200      	movs	r2, #0
 800523c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800523e:	4b42      	ldr	r3, [pc, #264]	@ (8005348 <MX_RTC_Init+0x154>)
 8005240:	2200      	movs	r2, #0
 8005242:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8005244:	4b40      	ldr	r3, [pc, #256]	@ (8005348 <MX_RTC_Init+0x154>)
 8005246:	2200      	movs	r2, #0
 8005248:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800524a:	4b3f      	ldr	r3, [pc, #252]	@ (8005348 <MX_RTC_Init+0x154>)
 800524c:	2280      	movs	r2, #128	@ 0x80
 800524e:	05d2      	lsls	r2, r2, #23
 8005250:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8005252:	4b3d      	ldr	r3, [pc, #244]	@ (8005348 <MX_RTC_Init+0x154>)
 8005254:	2200      	movs	r2, #0
 8005256:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8005258:	4b3b      	ldr	r3, [pc, #236]	@ (8005348 <MX_RTC_Init+0x154>)
 800525a:	0018      	movs	r0, r3
 800525c:	f004 ffc4 	bl	800a1e8 <HAL_RTC_Init>
 8005260:	1e03      	subs	r3, r0, #0
 8005262:	d001      	beq.n	8005268 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 8005264:	f001 f960 	bl	8006528 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8005268:	212c      	movs	r1, #44	@ 0x2c
 800526a:	187b      	adds	r3, r7, r1
 800526c:	2200      	movs	r2, #0
 800526e:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8005270:	187b      	adds	r3, r7, r1
 8005272:	2200      	movs	r2, #0
 8005274:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8005276:	187b      	adds	r3, r7, r1
 8005278:	2200      	movs	r2, #0
 800527a:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 800527c:	187b      	adds	r3, r7, r1
 800527e:	2200      	movs	r2, #0
 8005280:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8005282:	187b      	adds	r3, r7, r1
 8005284:	2200      	movs	r2, #0
 8005286:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8005288:	187b      	adds	r3, r7, r1
 800528a:	2200      	movs	r2, #0
 800528c:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800528e:	1879      	adds	r1, r7, r1
 8005290:	4b2d      	ldr	r3, [pc, #180]	@ (8005348 <MX_RTC_Init+0x154>)
 8005292:	2201      	movs	r2, #1
 8005294:	0018      	movs	r0, r3
 8005296:	f005 f849 	bl	800a32c <HAL_RTC_SetTime>
 800529a:	1e03      	subs	r3, r0, #0
 800529c:	d001      	beq.n	80052a2 <MX_RTC_Init+0xae>
  {
    Error_Handler();
 800529e:	f001 f943 	bl	8006528 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80052a2:	2128      	movs	r1, #40	@ 0x28
 80052a4:	187b      	adds	r3, r7, r1
 80052a6:	2201      	movs	r2, #1
 80052a8:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80052aa:	187b      	adds	r3, r7, r1
 80052ac:	2201      	movs	r2, #1
 80052ae:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 80052b0:	187b      	adds	r3, r7, r1
 80052b2:	2201      	movs	r2, #1
 80052b4:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 80052b6:	187b      	adds	r3, r7, r1
 80052b8:	2200      	movs	r2, #0
 80052ba:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80052bc:	1879      	adds	r1, r7, r1
 80052be:	4b22      	ldr	r3, [pc, #136]	@ (8005348 <MX_RTC_Init+0x154>)
 80052c0:	2201      	movs	r2, #1
 80052c2:	0018      	movs	r0, r3
 80052c4:	f005 f8da 	bl	800a47c <HAL_RTC_SetDate>
 80052c8:	1e03      	subs	r3, r0, #0
 80052ca:	d001      	beq.n	80052d0 <MX_RTC_Init+0xdc>
  {
    Error_Handler();
 80052cc:	f001 f92c 	bl	8006528 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80052d0:	003b      	movs	r3, r7
 80052d2:	2200      	movs	r2, #0
 80052d4:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80052d6:	003b      	movs	r3, r7
 80052d8:	2200      	movs	r2, #0
 80052da:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x1;
 80052dc:	003b      	movs	r3, r7
 80052de:	2201      	movs	r2, #1
 80052e0:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80052e2:	003b      	movs	r3, r7
 80052e4:	2200      	movs	r2, #0
 80052e6:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80052e8:	003b      	movs	r3, r7
 80052ea:	2200      	movs	r2, #0
 80052ec:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80052ee:	003b      	movs	r3, r7
 80052f0:	2200      	movs	r2, #0
 80052f2:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80052f4:	003b      	movs	r3, r7
 80052f6:	2200      	movs	r2, #0
 80052f8:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80052fa:	003b      	movs	r3, r7
 80052fc:	2200      	movs	r2, #0
 80052fe:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8005300:	003b      	movs	r3, r7
 8005302:	2200      	movs	r2, #0
 8005304:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8005306:	003b      	movs	r3, r7
 8005308:	2220      	movs	r2, #32
 800530a:	2101      	movs	r1, #1
 800530c:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 800530e:	003b      	movs	r3, r7
 8005310:	2280      	movs	r2, #128	@ 0x80
 8005312:	0052      	lsls	r2, r2, #1
 8005314:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8005316:	0039      	movs	r1, r7
 8005318:	4b0b      	ldr	r3, [pc, #44]	@ (8005348 <MX_RTC_Init+0x154>)
 800531a:	2201      	movs	r2, #1
 800531c:	0018      	movs	r0, r3
 800531e:	f005 f93f 	bl	800a5a0 <HAL_RTC_SetAlarm_IT>
 8005322:	1e03      	subs	r3, r0, #0
 8005324:	d001      	beq.n	800532a <MX_RTC_Init+0x136>
  {
    Error_Handler();
 8005326:	f001 f8ff 	bl	8006528 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0x500B, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800532a:	4909      	ldr	r1, [pc, #36]	@ (8005350 <MX_RTC_Init+0x15c>)
 800532c:	4b06      	ldr	r3, [pc, #24]	@ (8005348 <MX_RTC_Init+0x154>)
 800532e:	2200      	movs	r2, #0
 8005330:	0018      	movs	r0, r3
 8005332:	f005 fc6b 	bl	800ac0c <HAL_RTCEx_SetWakeUpTimer_IT>
 8005336:	1e03      	subs	r3, r0, #0
 8005338:	d001      	beq.n	800533e <MX_RTC_Init+0x14a>
  {
    Error_Handler();
 800533a:	f001 f8f5 	bl	8006528 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800533e:	46c0      	nop			@ (mov r8, r8)
 8005340:	46bd      	mov	sp, r7
 8005342:	b010      	add	sp, #64	@ 0x40
 8005344:	bd80      	pop	{r7, pc}
 8005346:	46c0      	nop			@ (mov r8, r8)
 8005348:	20001c54 	.word	0x20001c54
 800534c:	40002800 	.word	0x40002800
 8005350:	0000500b 	.word	0x0000500b

08005354 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8005358:	4b1c      	ldr	r3, [pc, #112]	@ (80053cc <MX_SPI1_Init+0x78>)
 800535a:	4a1d      	ldr	r2, [pc, #116]	@ (80053d0 <MX_SPI1_Init+0x7c>)
 800535c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800535e:	4b1b      	ldr	r3, [pc, #108]	@ (80053cc <MX_SPI1_Init+0x78>)
 8005360:	2282      	movs	r2, #130	@ 0x82
 8005362:	0052      	lsls	r2, r2, #1
 8005364:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8005366:	4b19      	ldr	r3, [pc, #100]	@ (80053cc <MX_SPI1_Init+0x78>)
 8005368:	2280      	movs	r2, #128	@ 0x80
 800536a:	0212      	lsls	r2, r2, #8
 800536c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800536e:	4b17      	ldr	r3, [pc, #92]	@ (80053cc <MX_SPI1_Init+0x78>)
 8005370:	22e0      	movs	r2, #224	@ 0xe0
 8005372:	00d2      	lsls	r2, r2, #3
 8005374:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005376:	4b15      	ldr	r3, [pc, #84]	@ (80053cc <MX_SPI1_Init+0x78>)
 8005378:	2200      	movs	r2, #0
 800537a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800537c:	4b13      	ldr	r3, [pc, #76]	@ (80053cc <MX_SPI1_Init+0x78>)
 800537e:	2200      	movs	r2, #0
 8005380:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005382:	4b12      	ldr	r3, [pc, #72]	@ (80053cc <MX_SPI1_Init+0x78>)
 8005384:	2280      	movs	r2, #128	@ 0x80
 8005386:	0092      	lsls	r2, r2, #2
 8005388:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800538a:	4b10      	ldr	r3, [pc, #64]	@ (80053cc <MX_SPI1_Init+0x78>)
 800538c:	2220      	movs	r2, #32
 800538e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005390:	4b0e      	ldr	r3, [pc, #56]	@ (80053cc <MX_SPI1_Init+0x78>)
 8005392:	2200      	movs	r2, #0
 8005394:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005396:	4b0d      	ldr	r3, [pc, #52]	@ (80053cc <MX_SPI1_Init+0x78>)
 8005398:	2200      	movs	r2, #0
 800539a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800539c:	4b0b      	ldr	r3, [pc, #44]	@ (80053cc <MX_SPI1_Init+0x78>)
 800539e:	2200      	movs	r2, #0
 80053a0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80053a2:	4b0a      	ldr	r3, [pc, #40]	@ (80053cc <MX_SPI1_Init+0x78>)
 80053a4:	2207      	movs	r2, #7
 80053a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80053a8:	4b08      	ldr	r3, [pc, #32]	@ (80053cc <MX_SPI1_Init+0x78>)
 80053aa:	2200      	movs	r2, #0
 80053ac:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80053ae:	4b07      	ldr	r3, [pc, #28]	@ (80053cc <MX_SPI1_Init+0x78>)
 80053b0:	2208      	movs	r2, #8
 80053b2:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80053b4:	4b05      	ldr	r3, [pc, #20]	@ (80053cc <MX_SPI1_Init+0x78>)
 80053b6:	0018      	movs	r0, r3
 80053b8:	f005 fcf0 	bl	800ad9c <HAL_SPI_Init>
 80053bc:	1e03      	subs	r3, r0, #0
 80053be:	d001      	beq.n	80053c4 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 80053c0:	f001 f8b2 	bl	8006528 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80053c4:	46c0      	nop			@ (mov r8, r8)
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}
 80053ca:	46c0      	nop			@ (mov r8, r8)
 80053cc:	20001c80 	.word	0x20001c80
 80053d0:	40013000 	.word	0x40013000

080053d4 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b094      	sub	sp, #80	@ 0x50
 80053d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80053da:	2334      	movs	r3, #52	@ 0x34
 80053dc:	18fb      	adds	r3, r7, r3
 80053de:	0018      	movs	r0, r3
 80053e0:	231c      	movs	r3, #28
 80053e2:	001a      	movs	r2, r3
 80053e4:	2100      	movs	r1, #0
 80053e6:	f009 f8c9 	bl	800e57c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80053ea:	003b      	movs	r3, r7
 80053ec:	0018      	movs	r0, r3
 80053ee:	2334      	movs	r3, #52	@ 0x34
 80053f0:	001a      	movs	r2, r3
 80053f2:	2100      	movs	r1, #0
 80053f4:	f009 f8c2 	bl	800e57c <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80053f8:	4b37      	ldr	r3, [pc, #220]	@ (80054d8 <MX_TIM17_Init+0x104>)
 80053fa:	4a38      	ldr	r2, [pc, #224]	@ (80054dc <MX_TIM17_Init+0x108>)
 80053fc:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 80053fe:	4b36      	ldr	r3, [pc, #216]	@ (80054d8 <MX_TIM17_Init+0x104>)
 8005400:	2200      	movs	r2, #0
 8005402:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005404:	4b34      	ldr	r3, [pc, #208]	@ (80054d8 <MX_TIM17_Init+0x104>)
 8005406:	2200      	movs	r2, #0
 8005408:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 800540a:	4b33      	ldr	r3, [pc, #204]	@ (80054d8 <MX_TIM17_Init+0x104>)
 800540c:	4a34      	ldr	r2, [pc, #208]	@ (80054e0 <MX_TIM17_Init+0x10c>)
 800540e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005410:	4b31      	ldr	r3, [pc, #196]	@ (80054d8 <MX_TIM17_Init+0x104>)
 8005412:	2200      	movs	r2, #0
 8005414:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8005416:	4b30      	ldr	r3, [pc, #192]	@ (80054d8 <MX_TIM17_Init+0x104>)
 8005418:	2200      	movs	r2, #0
 800541a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800541c:	4b2e      	ldr	r3, [pc, #184]	@ (80054d8 <MX_TIM17_Init+0x104>)
 800541e:	2200      	movs	r2, #0
 8005420:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8005422:	4b2d      	ldr	r3, [pc, #180]	@ (80054d8 <MX_TIM17_Init+0x104>)
 8005424:	0018      	movs	r0, r3
 8005426:	f006 f847 	bl	800b4b8 <HAL_TIM_Base_Init>
 800542a:	1e03      	subs	r3, r0, #0
 800542c:	d001      	beq.n	8005432 <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 800542e:	f001 f87b 	bl	8006528 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8005432:	4b29      	ldr	r3, [pc, #164]	@ (80054d8 <MX_TIM17_Init+0x104>)
 8005434:	0018      	movs	r0, r3
 8005436:	f006 f897 	bl	800b568 <HAL_TIM_PWM_Init>
 800543a:	1e03      	subs	r3, r0, #0
 800543c:	d001      	beq.n	8005442 <MX_TIM17_Init+0x6e>
  {
    Error_Handler();
 800543e:	f001 f873 	bl	8006528 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005442:	2134      	movs	r1, #52	@ 0x34
 8005444:	187b      	adds	r3, r7, r1
 8005446:	2260      	movs	r2, #96	@ 0x60
 8005448:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800544a:	187b      	adds	r3, r7, r1
 800544c:	2200      	movs	r2, #0
 800544e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005450:	187b      	adds	r3, r7, r1
 8005452:	2200      	movs	r2, #0
 8005454:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005456:	187b      	adds	r3, r7, r1
 8005458:	2200      	movs	r2, #0
 800545a:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800545c:	187b      	adds	r3, r7, r1
 800545e:	2200      	movs	r2, #0
 8005460:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005462:	187b      	adds	r3, r7, r1
 8005464:	2200      	movs	r2, #0
 8005466:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005468:	187b      	adds	r3, r7, r1
 800546a:	2200      	movs	r2, #0
 800546c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800546e:	1879      	adds	r1, r7, r1
 8005470:	4b19      	ldr	r3, [pc, #100]	@ (80054d8 <MX_TIM17_Init+0x104>)
 8005472:	2200      	movs	r2, #0
 8005474:	0018      	movs	r0, r3
 8005476:	f006 fa53 	bl	800b920 <HAL_TIM_PWM_ConfigChannel>
 800547a:	1e03      	subs	r3, r0, #0
 800547c:	d001      	beq.n	8005482 <MX_TIM17_Init+0xae>
  {
    Error_Handler();
 800547e:	f001 f853 	bl	8006528 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005482:	003b      	movs	r3, r7
 8005484:	2200      	movs	r2, #0
 8005486:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005488:	003b      	movs	r3, r7
 800548a:	2200      	movs	r2, #0
 800548c:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800548e:	003b      	movs	r3, r7
 8005490:	2200      	movs	r2, #0
 8005492:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005494:	003b      	movs	r3, r7
 8005496:	2200      	movs	r2, #0
 8005498:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800549a:	003b      	movs	r3, r7
 800549c:	2200      	movs	r2, #0
 800549e:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80054a0:	003b      	movs	r3, r7
 80054a2:	2280      	movs	r2, #128	@ 0x80
 80054a4:	0192      	lsls	r2, r2, #6
 80054a6:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80054a8:	003b      	movs	r3, r7
 80054aa:	2200      	movs	r2, #0
 80054ac:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80054ae:	003b      	movs	r3, r7
 80054b0:	2200      	movs	r2, #0
 80054b2:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80054b4:	003a      	movs	r2, r7
 80054b6:	4b08      	ldr	r3, [pc, #32]	@ (80054d8 <MX_TIM17_Init+0x104>)
 80054b8:	0011      	movs	r1, r2
 80054ba:	0018      	movs	r0, r3
 80054bc:	f006 feb0 	bl	800c220 <HAL_TIMEx_ConfigBreakDeadTime>
 80054c0:	1e03      	subs	r3, r0, #0
 80054c2:	d001      	beq.n	80054c8 <MX_TIM17_Init+0xf4>
  {
    Error_Handler();
 80054c4:	f001 f830 	bl	8006528 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 80054c8:	4b03      	ldr	r3, [pc, #12]	@ (80054d8 <MX_TIM17_Init+0x104>)
 80054ca:	0018      	movs	r0, r3
 80054cc:	f001 fddc 	bl	8007088 <HAL_TIM_MspPostInit>

}
 80054d0:	46c0      	nop			@ (mov r8, r8)
 80054d2:	46bd      	mov	sp, r7
 80054d4:	b014      	add	sp, #80	@ 0x50
 80054d6:	bd80      	pop	{r7, pc}
 80054d8:	20001ce4 	.word	0x20001ce4
 80054dc:	40014800 	.word	0x40014800
 80054e0:	0000ffff 	.word	0x0000ffff

080054e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80054e8:	4b23      	ldr	r3, [pc, #140]	@ (8005578 <MX_USART1_UART_Init+0x94>)
 80054ea:	4a24      	ldr	r2, [pc, #144]	@ (800557c <MX_USART1_UART_Init+0x98>)
 80054ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80054ee:	4b22      	ldr	r3, [pc, #136]	@ (8005578 <MX_USART1_UART_Init+0x94>)
 80054f0:	2296      	movs	r2, #150	@ 0x96
 80054f2:	0192      	lsls	r2, r2, #6
 80054f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80054f6:	4b20      	ldr	r3, [pc, #128]	@ (8005578 <MX_USART1_UART_Init+0x94>)
 80054f8:	2200      	movs	r2, #0
 80054fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80054fc:	4b1e      	ldr	r3, [pc, #120]	@ (8005578 <MX_USART1_UART_Init+0x94>)
 80054fe:	2200      	movs	r2, #0
 8005500:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005502:	4b1d      	ldr	r3, [pc, #116]	@ (8005578 <MX_USART1_UART_Init+0x94>)
 8005504:	2200      	movs	r2, #0
 8005506:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005508:	4b1b      	ldr	r3, [pc, #108]	@ (8005578 <MX_USART1_UART_Init+0x94>)
 800550a:	220c      	movs	r2, #12
 800550c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800550e:	4b1a      	ldr	r3, [pc, #104]	@ (8005578 <MX_USART1_UART_Init+0x94>)
 8005510:	2200      	movs	r2, #0
 8005512:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005514:	4b18      	ldr	r3, [pc, #96]	@ (8005578 <MX_USART1_UART_Init+0x94>)
 8005516:	2200      	movs	r2, #0
 8005518:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800551a:	4b17      	ldr	r3, [pc, #92]	@ (8005578 <MX_USART1_UART_Init+0x94>)
 800551c:	2200      	movs	r2, #0
 800551e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005520:	4b15      	ldr	r3, [pc, #84]	@ (8005578 <MX_USART1_UART_Init+0x94>)
 8005522:	2200      	movs	r2, #0
 8005524:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005526:	4b14      	ldr	r3, [pc, #80]	@ (8005578 <MX_USART1_UART_Init+0x94>)
 8005528:	2200      	movs	r2, #0
 800552a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800552c:	4b12      	ldr	r3, [pc, #72]	@ (8005578 <MX_USART1_UART_Init+0x94>)
 800552e:	0018      	movs	r0, r3
 8005530:	f006 ff12 	bl	800c358 <HAL_UART_Init>
 8005534:	1e03      	subs	r3, r0, #0
 8005536:	d001      	beq.n	800553c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8005538:	f000 fff6 	bl	8006528 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800553c:	4b0e      	ldr	r3, [pc, #56]	@ (8005578 <MX_USART1_UART_Init+0x94>)
 800553e:	2100      	movs	r1, #0
 8005540:	0018      	movs	r0, r3
 8005542:	f007 fead 	bl	800d2a0 <HAL_UARTEx_SetTxFifoThreshold>
 8005546:	1e03      	subs	r3, r0, #0
 8005548:	d001      	beq.n	800554e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800554a:	f000 ffed 	bl	8006528 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800554e:	4b0a      	ldr	r3, [pc, #40]	@ (8005578 <MX_USART1_UART_Init+0x94>)
 8005550:	2100      	movs	r1, #0
 8005552:	0018      	movs	r0, r3
 8005554:	f007 fee4 	bl	800d320 <HAL_UARTEx_SetRxFifoThreshold>
 8005558:	1e03      	subs	r3, r0, #0
 800555a:	d001      	beq.n	8005560 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800555c:	f000 ffe4 	bl	8006528 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8005560:	4b05      	ldr	r3, [pc, #20]	@ (8005578 <MX_USART1_UART_Init+0x94>)
 8005562:	0018      	movs	r0, r3
 8005564:	f007 fe62 	bl	800d22c <HAL_UARTEx_DisableFifoMode>
 8005568:	1e03      	subs	r3, r0, #0
 800556a:	d001      	beq.n	8005570 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800556c:	f000 ffdc 	bl	8006528 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005570:	46c0      	nop			@ (mov r8, r8)
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	46c0      	nop			@ (mov r8, r8)
 8005578:	20001d30 	.word	0x20001d30
 800557c:	40013800 	.word	0x40013800

08005580 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005584:	4b23      	ldr	r3, [pc, #140]	@ (8005614 <MX_USART2_UART_Init+0x94>)
 8005586:	4a24      	ldr	r2, [pc, #144]	@ (8005618 <MX_USART2_UART_Init+0x98>)
 8005588:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800558a:	4b22      	ldr	r3, [pc, #136]	@ (8005614 <MX_USART2_UART_Init+0x94>)
 800558c:	22e1      	movs	r2, #225	@ 0xe1
 800558e:	0252      	lsls	r2, r2, #9
 8005590:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005592:	4b20      	ldr	r3, [pc, #128]	@ (8005614 <MX_USART2_UART_Init+0x94>)
 8005594:	2200      	movs	r2, #0
 8005596:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005598:	4b1e      	ldr	r3, [pc, #120]	@ (8005614 <MX_USART2_UART_Init+0x94>)
 800559a:	2200      	movs	r2, #0
 800559c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800559e:	4b1d      	ldr	r3, [pc, #116]	@ (8005614 <MX_USART2_UART_Init+0x94>)
 80055a0:	2200      	movs	r2, #0
 80055a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80055a4:	4b1b      	ldr	r3, [pc, #108]	@ (8005614 <MX_USART2_UART_Init+0x94>)
 80055a6:	220c      	movs	r2, #12
 80055a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80055aa:	4b1a      	ldr	r3, [pc, #104]	@ (8005614 <MX_USART2_UART_Init+0x94>)
 80055ac:	2200      	movs	r2, #0
 80055ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80055b0:	4b18      	ldr	r3, [pc, #96]	@ (8005614 <MX_USART2_UART_Init+0x94>)
 80055b2:	2200      	movs	r2, #0
 80055b4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80055b6:	4b17      	ldr	r3, [pc, #92]	@ (8005614 <MX_USART2_UART_Init+0x94>)
 80055b8:	2200      	movs	r2, #0
 80055ba:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80055bc:	4b15      	ldr	r3, [pc, #84]	@ (8005614 <MX_USART2_UART_Init+0x94>)
 80055be:	2200      	movs	r2, #0
 80055c0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80055c2:	4b14      	ldr	r3, [pc, #80]	@ (8005614 <MX_USART2_UART_Init+0x94>)
 80055c4:	2200      	movs	r2, #0
 80055c6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80055c8:	4b12      	ldr	r3, [pc, #72]	@ (8005614 <MX_USART2_UART_Init+0x94>)
 80055ca:	0018      	movs	r0, r3
 80055cc:	f006 fec4 	bl	800c358 <HAL_UART_Init>
 80055d0:	1e03      	subs	r3, r0, #0
 80055d2:	d001      	beq.n	80055d8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80055d4:	f000 ffa8 	bl	8006528 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80055d8:	4b0e      	ldr	r3, [pc, #56]	@ (8005614 <MX_USART2_UART_Init+0x94>)
 80055da:	2100      	movs	r1, #0
 80055dc:	0018      	movs	r0, r3
 80055de:	f007 fe5f 	bl	800d2a0 <HAL_UARTEx_SetTxFifoThreshold>
 80055e2:	1e03      	subs	r3, r0, #0
 80055e4:	d001      	beq.n	80055ea <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80055e6:	f000 ff9f 	bl	8006528 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80055ea:	4b0a      	ldr	r3, [pc, #40]	@ (8005614 <MX_USART2_UART_Init+0x94>)
 80055ec:	2100      	movs	r1, #0
 80055ee:	0018      	movs	r0, r3
 80055f0:	f007 fe96 	bl	800d320 <HAL_UARTEx_SetRxFifoThreshold>
 80055f4:	1e03      	subs	r3, r0, #0
 80055f6:	d001      	beq.n	80055fc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80055f8:	f000 ff96 	bl	8006528 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80055fc:	4b05      	ldr	r3, [pc, #20]	@ (8005614 <MX_USART2_UART_Init+0x94>)
 80055fe:	0018      	movs	r0, r3
 8005600:	f007 fe14 	bl	800d22c <HAL_UARTEx_DisableFifoMode>
 8005604:	1e03      	subs	r3, r0, #0
 8005606:	d001      	beq.n	800560c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8005608:	f000 ff8e 	bl	8006528 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800560c:	46c0      	nop			@ (mov r8, r8)
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
 8005612:	46c0      	nop			@ (mov r8, r8)
 8005614:	20001dc4 	.word	0x20001dc4
 8005618:	40004400 	.word	0x40004400

0800561c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800561c:	b590      	push	{r4, r7, lr}
 800561e:	b08b      	sub	sp, #44	@ 0x2c
 8005620:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005622:	2414      	movs	r4, #20
 8005624:	193b      	adds	r3, r7, r4
 8005626:	0018      	movs	r0, r3
 8005628:	2314      	movs	r3, #20
 800562a:	001a      	movs	r2, r3
 800562c:	2100      	movs	r1, #0
 800562e:	f008 ffa5 	bl	800e57c <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005632:	4b4d      	ldr	r3, [pc, #308]	@ (8005768 <MX_GPIO_Init+0x14c>)
 8005634:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005636:	4b4c      	ldr	r3, [pc, #304]	@ (8005768 <MX_GPIO_Init+0x14c>)
 8005638:	2104      	movs	r1, #4
 800563a:	430a      	orrs	r2, r1
 800563c:	635a      	str	r2, [r3, #52]	@ 0x34
 800563e:	4b4a      	ldr	r3, [pc, #296]	@ (8005768 <MX_GPIO_Init+0x14c>)
 8005640:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005642:	2204      	movs	r2, #4
 8005644:	4013      	ands	r3, r2
 8005646:	613b      	str	r3, [r7, #16]
 8005648:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800564a:	4b47      	ldr	r3, [pc, #284]	@ (8005768 <MX_GPIO_Init+0x14c>)
 800564c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800564e:	4b46      	ldr	r3, [pc, #280]	@ (8005768 <MX_GPIO_Init+0x14c>)
 8005650:	2101      	movs	r1, #1
 8005652:	430a      	orrs	r2, r1
 8005654:	635a      	str	r2, [r3, #52]	@ 0x34
 8005656:	4b44      	ldr	r3, [pc, #272]	@ (8005768 <MX_GPIO_Init+0x14c>)
 8005658:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800565a:	2201      	movs	r2, #1
 800565c:	4013      	ands	r3, r2
 800565e:	60fb      	str	r3, [r7, #12]
 8005660:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005662:	4b41      	ldr	r3, [pc, #260]	@ (8005768 <MX_GPIO_Init+0x14c>)
 8005664:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005666:	4b40      	ldr	r3, [pc, #256]	@ (8005768 <MX_GPIO_Init+0x14c>)
 8005668:	2102      	movs	r1, #2
 800566a:	430a      	orrs	r2, r1
 800566c:	635a      	str	r2, [r3, #52]	@ 0x34
 800566e:	4b3e      	ldr	r3, [pc, #248]	@ (8005768 <MX_GPIO_Init+0x14c>)
 8005670:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005672:	2202      	movs	r2, #2
 8005674:	4013      	ands	r3, r2
 8005676:	60bb      	str	r3, [r7, #8]
 8005678:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800567a:	4b3b      	ldr	r3, [pc, #236]	@ (8005768 <MX_GPIO_Init+0x14c>)
 800567c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800567e:	4b3a      	ldr	r3, [pc, #232]	@ (8005768 <MX_GPIO_Init+0x14c>)
 8005680:	2108      	movs	r1, #8
 8005682:	430a      	orrs	r2, r1
 8005684:	635a      	str	r2, [r3, #52]	@ 0x34
 8005686:	4b38      	ldr	r3, [pc, #224]	@ (8005768 <MX_GPIO_Init+0x14c>)
 8005688:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800568a:	2208      	movs	r2, #8
 800568c:	4013      	ands	r3, r2
 800568e:	607b      	str	r3, [r7, #4]
 8005690:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_15, GPIO_PIN_RESET);
 8005692:	4936      	ldr	r1, [pc, #216]	@ (800576c <MX_GPIO_Init+0x150>)
 8005694:	23a0      	movs	r3, #160	@ 0xa0
 8005696:	05db      	lsls	r3, r3, #23
 8005698:	2200      	movs	r2, #0
 800569a:	0018      	movs	r0, r3
 800569c:	f002 ff7d 	bl	800859a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80056a0:	193b      	adds	r3, r7, r4
 80056a2:	2202      	movs	r2, #2
 80056a4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80056a6:	193b      	adds	r3, r7, r4
 80056a8:	2288      	movs	r2, #136	@ 0x88
 80056aa:	0352      	lsls	r2, r2, #13
 80056ac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056ae:	193b      	adds	r3, r7, r4
 80056b0:	2200      	movs	r2, #0
 80056b2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80056b4:	193b      	adds	r3, r7, r4
 80056b6:	4a2e      	ldr	r2, [pc, #184]	@ (8005770 <MX_GPIO_Init+0x154>)
 80056b8:	0019      	movs	r1, r3
 80056ba:	0010      	movs	r0, r2
 80056bc:	f002 fde4 	bl	8008288 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_15;
 80056c0:	193b      	adds	r3, r7, r4
 80056c2:	4a2a      	ldr	r2, [pc, #168]	@ (800576c <MX_GPIO_Init+0x150>)
 80056c4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80056c6:	193b      	adds	r3, r7, r4
 80056c8:	2201      	movs	r2, #1
 80056ca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056cc:	193b      	adds	r3, r7, r4
 80056ce:	2200      	movs	r2, #0
 80056d0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056d2:	193b      	adds	r3, r7, r4
 80056d4:	2200      	movs	r2, #0
 80056d6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056d8:	193a      	adds	r2, r7, r4
 80056da:	23a0      	movs	r3, #160	@ 0xa0
 80056dc:	05db      	lsls	r3, r3, #23
 80056de:	0011      	movs	r1, r2
 80056e0:	0018      	movs	r0, r3
 80056e2:	f002 fdd1 	bl	8008288 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80056e6:	0021      	movs	r1, r4
 80056e8:	187b      	adds	r3, r7, r1
 80056ea:	2204      	movs	r2, #4
 80056ec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80056ee:	187b      	adds	r3, r7, r1
 80056f0:	2288      	movs	r2, #136	@ 0x88
 80056f2:	0352      	lsls	r2, r2, #13
 80056f4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056f6:	187b      	adds	r3, r7, r1
 80056f8:	2200      	movs	r2, #0
 80056fa:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80056fc:	000c      	movs	r4, r1
 80056fe:	187b      	adds	r3, r7, r1
 8005700:	4a1c      	ldr	r2, [pc, #112]	@ (8005774 <MX_GPIO_Init+0x158>)
 8005702:	0019      	movs	r1, r3
 8005704:	0010      	movs	r0, r2
 8005706:	f002 fdbf 	bl	8008288 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800570a:	0021      	movs	r1, r4
 800570c:	187b      	adds	r3, r7, r1
 800570e:	2280      	movs	r2, #128	@ 0x80
 8005710:	0112      	lsls	r2, r2, #4
 8005712:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005714:	187b      	adds	r3, r7, r1
 8005716:	2288      	movs	r2, #136	@ 0x88
 8005718:	0352      	lsls	r2, r2, #13
 800571a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800571c:	187b      	adds	r3, r7, r1
 800571e:	2200      	movs	r2, #0
 8005720:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005722:	187a      	adds	r2, r7, r1
 8005724:	23a0      	movs	r3, #160	@ 0xa0
 8005726:	05db      	lsls	r3, r3, #23
 8005728:	0011      	movs	r1, r2
 800572a:	0018      	movs	r0, r3
 800572c:	f002 fdac 	bl	8008288 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8005730:	2200      	movs	r2, #0
 8005732:	2100      	movs	r1, #0
 8005734:	2005      	movs	r0, #5
 8005736:	f002 fd75 	bl	8008224 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800573a:	2005      	movs	r0, #5
 800573c:	f002 fd87 	bl	800824e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8005740:	2200      	movs	r2, #0
 8005742:	2100      	movs	r1, #0
 8005744:	2006      	movs	r0, #6
 8005746:	f002 fd6d 	bl	8008224 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 800574a:	2006      	movs	r0, #6
 800574c:	f002 fd7f 	bl	800824e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8005750:	2200      	movs	r2, #0
 8005752:	2100      	movs	r1, #0
 8005754:	2007      	movs	r0, #7
 8005756:	f002 fd65 	bl	8008224 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800575a:	2007      	movs	r0, #7
 800575c:	f002 fd77 	bl	800824e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8005760:	46c0      	nop			@ (mov r8, r8)
 8005762:	46bd      	mov	sp, r7
 8005764:	b00b      	add	sp, #44	@ 0x2c
 8005766:	bd90      	pop	{r4, r7, pc}
 8005768:	40021000 	.word	0x40021000
 800576c:	00008030 	.word	0x00008030
 8005770:	50000800 	.word	0x50000800
 8005774:	50000400 	.word	0x50000400

08005778 <ChangeNote>:

/* USER CODE BEGIN 4 */
void ChangeNote(enum Scale freq)
{
 8005778:	b590      	push	{r4, r7, lr}
 800577a:	b083      	sub	sp, #12
 800577c:	af00      	add	r7, sp, #0
 800577e:	0002      	movs	r2, r0
 8005780:	1dbb      	adds	r3, r7, #6
 8005782:	801a      	strh	r2, [r3, #0]
    TIM17->ARR=(uint32_t)(987*(float)1000/(float)freq);
 8005784:	1dbb      	adds	r3, r7, #6
 8005786:	881b      	ldrh	r3, [r3, #0]
 8005788:	0018      	movs	r0, r3
 800578a:	f7fb ff2d 	bl	80015e8 <__aeabi_ui2f>
 800578e:	1c03      	adds	r3, r0, #0
 8005790:	1c19      	adds	r1, r3, #0
 8005792:	4807      	ldr	r0, [pc, #28]	@ (80057b0 <ChangeNote+0x38>)
 8005794:	f7fb f9f4 	bl	8000b80 <__aeabi_fdiv>
 8005798:	1c03      	adds	r3, r0, #0
 800579a:	4c06      	ldr	r4, [pc, #24]	@ (80057b4 <ChangeNote+0x3c>)
 800579c:	1c18      	adds	r0, r3, #0
 800579e:	f7fa ff13 	bl	80005c8 <__aeabi_f2uiz>
 80057a2:	0003      	movs	r3, r0
 80057a4:	62e3      	str	r3, [r4, #44]	@ 0x2c
}
 80057a6:	46c0      	nop			@ (mov r8, r8)
 80057a8:	46bd      	mov	sp, r7
 80057aa:	b003      	add	sp, #12
 80057ac:	bd90      	pop	{r4, r7, pc}
 80057ae:	46c0      	nop			@ (mov r8, r8)
 80057b0:	4970f780 	.word	0x4970f780
 80057b4:	40014800 	.word	0x40014800

080057b8 <PlayEffect>:
void PlayEffect(enum SoundEffects effect) {
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b082      	sub	sp, #8
 80057bc:	af00      	add	r7, sp, #0
 80057be:	0002      	movs	r2, r0
 80057c0:	1dfb      	adds	r3, r7, #7
 80057c2:	701a      	strb	r2, [r3, #0]
	HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 80057c4:	4ba0      	ldr	r3, [pc, #640]	@ (8005a48 <PlayEffect+0x290>)
 80057c6:	2100      	movs	r1, #0
 80057c8:	0018      	movs	r0, r3
 80057ca:	f005 ff2d 	bl	800b628 <HAL_TIM_PWM_Start>
	HAL_Delay(5);
 80057ce:	2005      	movs	r0, #5
 80057d0:	f002 fc42 	bl	8008058 <HAL_Delay>
    switch(effect){
 80057d4:	1dfb      	adds	r3, r7, #7
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	2b06      	cmp	r3, #6
 80057da:	d900      	bls.n	80057de <PlayEffect+0x26>
 80057dc:	e12a      	b.n	8005a34 <PlayEffect+0x27c>
 80057de:	009a      	lsls	r2, r3, #2
 80057e0:	4b9a      	ldr	r3, [pc, #616]	@ (8005a4c <PlayEffect+0x294>)
 80057e2:	18d3      	adds	r3, r2, r3
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	469f      	mov	pc, r3
        case MenuBeep:

        	curNote = G*3;
 80057e8:	4b99      	ldr	r3, [pc, #612]	@ (8005a50 <PlayEffect+0x298>)
 80057ea:	2293      	movs	r2, #147	@ 0x93
 80057ec:	0112      	lsls	r2, r2, #4
 80057ee:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 80057f0:	4b97      	ldr	r3, [pc, #604]	@ (8005a50 <PlayEffect+0x298>)
 80057f2:	881b      	ldrh	r3, [r3, #0]
 80057f4:	0018      	movs	r0, r3
 80057f6:	f7ff ffbf 	bl	8005778 <ChangeNote>
        	HAL_Delay(25);
 80057fa:	2019      	movs	r0, #25
 80057fc:	f002 fc2c 	bl	8008058 <HAL_Delay>

        	curNote = G*2;
 8005800:	4b93      	ldr	r3, [pc, #588]	@ (8005a50 <PlayEffect+0x298>)
 8005802:	22c4      	movs	r2, #196	@ 0xc4
 8005804:	00d2      	lsls	r2, r2, #3
 8005806:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 8005808:	4b91      	ldr	r3, [pc, #580]	@ (8005a50 <PlayEffect+0x298>)
 800580a:	881b      	ldrh	r3, [r3, #0]
 800580c:	0018      	movs	r0, r3
 800580e:	f7ff ffb3 	bl	8005778 <ChangeNote>
        	HAL_Delay(25);
 8005812:	2019      	movs	r0, #25
 8005814:	f002 fc20 	bl	8008058 <HAL_Delay>

            break;
 8005818:	e10c      	b.n	8005a34 <PlayEffect+0x27c>
        case EggNoise:

        	curNote = A;
 800581a:	4b8d      	ldr	r3, [pc, #564]	@ (8005a50 <PlayEffect+0x298>)
 800581c:	22dc      	movs	r2, #220	@ 0xdc
 800581e:	0052      	lsls	r2, r2, #1
 8005820:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 8005822:	4b8b      	ldr	r3, [pc, #556]	@ (8005a50 <PlayEffect+0x298>)
 8005824:	881b      	ldrh	r3, [r3, #0]
 8005826:	0018      	movs	r0, r3
 8005828:	f7ff ffa6 	bl	8005778 <ChangeNote>
        	HAL_Delay(20);
 800582c:	2014      	movs	r0, #20
 800582e:	f002 fc13 	bl	8008058 <HAL_Delay>

        	curNote = C;
 8005832:	4b87      	ldr	r3, [pc, #540]	@ (8005a50 <PlayEffect+0x298>)
 8005834:	4a87      	ldr	r2, [pc, #540]	@ (8005a54 <PlayEffect+0x29c>)
 8005836:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 8005838:	4b85      	ldr	r3, [pc, #532]	@ (8005a50 <PlayEffect+0x298>)
 800583a:	881b      	ldrh	r3, [r3, #0]
 800583c:	0018      	movs	r0, r3
 800583e:	f7ff ff9b 	bl	8005778 <ChangeNote>
        	HAL_Delay(20);
 8005842:	2014      	movs	r0, #20
 8005844:	f002 fc08 	bl	8008058 <HAL_Delay>

        	curNote = A;
 8005848:	4b81      	ldr	r3, [pc, #516]	@ (8005a50 <PlayEffect+0x298>)
 800584a:	22dc      	movs	r2, #220	@ 0xdc
 800584c:	0052      	lsls	r2, r2, #1
 800584e:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 8005850:	4b7f      	ldr	r3, [pc, #508]	@ (8005a50 <PlayEffect+0x298>)
 8005852:	881b      	ldrh	r3, [r3, #0]
 8005854:	0018      	movs	r0, r3
 8005856:	f7ff ff8f 	bl	8005778 <ChangeNote>
        	HAL_Delay(20);
 800585a:	2014      	movs	r0, #20
 800585c:	f002 fbfc 	bl	8008058 <HAL_Delay>

        	curNote = C;
 8005860:	4b7b      	ldr	r3, [pc, #492]	@ (8005a50 <PlayEffect+0x298>)
 8005862:	4a7c      	ldr	r2, [pc, #496]	@ (8005a54 <PlayEffect+0x29c>)
 8005864:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 8005866:	4b7a      	ldr	r3, [pc, #488]	@ (8005a50 <PlayEffect+0x298>)
 8005868:	881b      	ldrh	r3, [r3, #0]
 800586a:	0018      	movs	r0, r3
 800586c:	f7ff ff84 	bl	8005778 <ChangeNote>
        	HAL_Delay(20);
 8005870:	2014      	movs	r0, #20
 8005872:	f002 fbf1 	bl	8008058 <HAL_Delay>

            break;
 8005876:	e0dd      	b.n	8005a34 <PlayEffect+0x27c>
        case YoungNoiseHappy:

        	curNote = F*4;
 8005878:	4b75      	ldr	r3, [pc, #468]	@ (8005a50 <PlayEffect+0x298>)
 800587a:	4a77      	ldr	r2, [pc, #476]	@ (8005a58 <PlayEffect+0x2a0>)
 800587c:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 800587e:	4b74      	ldr	r3, [pc, #464]	@ (8005a50 <PlayEffect+0x298>)
 8005880:	881b      	ldrh	r3, [r3, #0]
 8005882:	0018      	movs	r0, r3
 8005884:	f7ff ff78 	bl	8005778 <ChangeNote>
        	HAL_Delay(35);
 8005888:	2023      	movs	r0, #35	@ 0x23
 800588a:	f002 fbe5 	bl	8008058 <HAL_Delay>

        	curNote = B*4;
 800588e:	4b70      	ldr	r3, [pc, #448]	@ (8005a50 <PlayEffect+0x298>)
 8005890:	22f7      	movs	r2, #247	@ 0xf7
 8005892:	00d2      	lsls	r2, r2, #3
 8005894:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 8005896:	4b6e      	ldr	r3, [pc, #440]	@ (8005a50 <PlayEffect+0x298>)
 8005898:	881b      	ldrh	r3, [r3, #0]
 800589a:	0018      	movs	r0, r3
 800589c:	f7ff ff6c 	bl	8005778 <ChangeNote>
        	HAL_Delay(15);
 80058a0:	200f      	movs	r0, #15
 80058a2:	f002 fbd9 	bl	8008058 <HAL_Delay>

            break;
 80058a6:	e0c5      	b.n	8005a34 <PlayEffect+0x27c>
        case YoungNoiseSad:

        	curNote = B*4;
 80058a8:	4b69      	ldr	r3, [pc, #420]	@ (8005a50 <PlayEffect+0x298>)
 80058aa:	22f7      	movs	r2, #247	@ 0xf7
 80058ac:	00d2      	lsls	r2, r2, #3
 80058ae:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 80058b0:	4b67      	ldr	r3, [pc, #412]	@ (8005a50 <PlayEffect+0x298>)
 80058b2:	881b      	ldrh	r3, [r3, #0]
 80058b4:	0018      	movs	r0, r3
 80058b6:	f7ff ff5f 	bl	8005778 <ChangeNote>
        	HAL_Delay(35);
 80058ba:	2023      	movs	r0, #35	@ 0x23
 80058bc:	f002 fbcc 	bl	8008058 <HAL_Delay>

        	curNote = B*3;
 80058c0:	4b63      	ldr	r3, [pc, #396]	@ (8005a50 <PlayEffect+0x298>)
 80058c2:	4a66      	ldr	r2, [pc, #408]	@ (8005a5c <PlayEffect+0x2a4>)
 80058c4:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 80058c6:	4b62      	ldr	r3, [pc, #392]	@ (8005a50 <PlayEffect+0x298>)
 80058c8:	881b      	ldrh	r3, [r3, #0]
 80058ca:	0018      	movs	r0, r3
 80058cc:	f7ff ff54 	bl	8005778 <ChangeNote>
        	HAL_Delay(15);
 80058d0:	200f      	movs	r0, #15
 80058d2:	f002 fbc1 	bl	8008058 <HAL_Delay>

            break;
 80058d6:	e0ad      	b.n	8005a34 <PlayEffect+0x27c>
        case AdultNoiseHappy:

        	curNote = F/4;
 80058d8:	4b5d      	ldr	r3, [pc, #372]	@ (8005a50 <PlayEffect+0x298>)
 80058da:	22ae      	movs	r2, #174	@ 0xae
 80058dc:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 80058de:	4b5c      	ldr	r3, [pc, #368]	@ (8005a50 <PlayEffect+0x298>)
 80058e0:	881b      	ldrh	r3, [r3, #0]
 80058e2:	0018      	movs	r0, r3
 80058e4:	f7ff ff48 	bl	8005778 <ChangeNote>
        	HAL_Delay(35);
 80058e8:	2023      	movs	r0, #35	@ 0x23
 80058ea:	f002 fbb5 	bl	8008058 <HAL_Delay>

        	curNote = B/4;
 80058ee:	4b58      	ldr	r3, [pc, #352]	@ (8005a50 <PlayEffect+0x298>)
 80058f0:	227b      	movs	r2, #123	@ 0x7b
 80058f2:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 80058f4:	4b56      	ldr	r3, [pc, #344]	@ (8005a50 <PlayEffect+0x298>)
 80058f6:	881b      	ldrh	r3, [r3, #0]
 80058f8:	0018      	movs	r0, r3
 80058fa:	f7ff ff3d 	bl	8005778 <ChangeNote>
        	HAL_Delay(15);
 80058fe:	200f      	movs	r0, #15
 8005900:	f002 fbaa 	bl	8008058 <HAL_Delay>

            break;
 8005904:	e096      	b.n	8005a34 <PlayEffect+0x27c>
        case AdultNoiseSad:

        	curNote = C/4;
 8005906:	4b52      	ldr	r3, [pc, #328]	@ (8005a50 <PlayEffect+0x298>)
 8005908:	2282      	movs	r2, #130	@ 0x82
 800590a:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 800590c:	4b50      	ldr	r3, [pc, #320]	@ (8005a50 <PlayEffect+0x298>)
 800590e:	881b      	ldrh	r3, [r3, #0]
 8005910:	0018      	movs	r0, r3
 8005912:	f7ff ff31 	bl	8005778 <ChangeNote>
        	HAL_Delay(35);
 8005916:	2023      	movs	r0, #35	@ 0x23
 8005918:	f002 fb9e 	bl	8008058 <HAL_Delay>

        	curNote = A/4;
 800591c:	4b4c      	ldr	r3, [pc, #304]	@ (8005a50 <PlayEffect+0x298>)
 800591e:	226e      	movs	r2, #110	@ 0x6e
 8005920:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 8005922:	4b4b      	ldr	r3, [pc, #300]	@ (8005a50 <PlayEffect+0x298>)
 8005924:	881b      	ldrh	r3, [r3, #0]
 8005926:	0018      	movs	r0, r3
 8005928:	f7ff ff26 	bl	8005778 <ChangeNote>
        	HAL_Delay(15);
 800592c:	200f      	movs	r0, #15
 800592e:	f002 fb93 	bl	8008058 <HAL_Delay>

        	break;
 8005932:	e07f      	b.n	8005a34 <PlayEffect+0x27c>
        case Evolution:

        	curNote = A*2;
 8005934:	4b46      	ldr	r3, [pc, #280]	@ (8005a50 <PlayEffect+0x298>)
 8005936:	22dc      	movs	r2, #220	@ 0xdc
 8005938:	0092      	lsls	r2, r2, #2
 800593a:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 800593c:	4b44      	ldr	r3, [pc, #272]	@ (8005a50 <PlayEffect+0x298>)
 800593e:	881b      	ldrh	r3, [r3, #0]
 8005940:	0018      	movs	r0, r3
 8005942:	f7ff ff19 	bl	8005778 <ChangeNote>
        	HAL_Delay(50);
 8005946:	2032      	movs	r0, #50	@ 0x32
 8005948:	f002 fb86 	bl	8008058 <HAL_Delay>

        	curNote = B*2;
 800594c:	4b40      	ldr	r3, [pc, #256]	@ (8005a50 <PlayEffect+0x298>)
 800594e:	22f7      	movs	r2, #247	@ 0xf7
 8005950:	0092      	lsls	r2, r2, #2
 8005952:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 8005954:	4b3e      	ldr	r3, [pc, #248]	@ (8005a50 <PlayEffect+0x298>)
 8005956:	881b      	ldrh	r3, [r3, #0]
 8005958:	0018      	movs	r0, r3
 800595a:	f7ff ff0d 	bl	8005778 <ChangeNote>
        	HAL_Delay(50);
 800595e:	2032      	movs	r0, #50	@ 0x32
 8005960:	f002 fb7a 	bl	8008058 <HAL_Delay>

        	curNote = C*2;
 8005964:	4b3a      	ldr	r3, [pc, #232]	@ (8005a50 <PlayEffect+0x298>)
 8005966:	4a3e      	ldr	r2, [pc, #248]	@ (8005a60 <PlayEffect+0x2a8>)
 8005968:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 800596a:	4b39      	ldr	r3, [pc, #228]	@ (8005a50 <PlayEffect+0x298>)
 800596c:	881b      	ldrh	r3, [r3, #0]
 800596e:	0018      	movs	r0, r3
 8005970:	f7ff ff02 	bl	8005778 <ChangeNote>
        	HAL_Delay(50);
 8005974:	2032      	movs	r0, #50	@ 0x32
 8005976:	f002 fb6f 	bl	8008058 <HAL_Delay>

        	curNote = A*2;
 800597a:	4b35      	ldr	r3, [pc, #212]	@ (8005a50 <PlayEffect+0x298>)
 800597c:	22dc      	movs	r2, #220	@ 0xdc
 800597e:	0092      	lsls	r2, r2, #2
 8005980:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 8005982:	4b33      	ldr	r3, [pc, #204]	@ (8005a50 <PlayEffect+0x298>)
 8005984:	881b      	ldrh	r3, [r3, #0]
 8005986:	0018      	movs	r0, r3
 8005988:	f7ff fef6 	bl	8005778 <ChangeNote>
        	HAL_Delay(50);
 800598c:	2032      	movs	r0, #50	@ 0x32
 800598e:	f002 fb63 	bl	8008058 <HAL_Delay>

        	curNote = C*2;
 8005992:	4b2f      	ldr	r3, [pc, #188]	@ (8005a50 <PlayEffect+0x298>)
 8005994:	4a32      	ldr	r2, [pc, #200]	@ (8005a60 <PlayEffect+0x2a8>)
 8005996:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 8005998:	4b2d      	ldr	r3, [pc, #180]	@ (8005a50 <PlayEffect+0x298>)
 800599a:	881b      	ldrh	r3, [r3, #0]
 800599c:	0018      	movs	r0, r3
 800599e:	f7ff feeb 	bl	8005778 <ChangeNote>
        	HAL_Delay(50);
 80059a2:	2032      	movs	r0, #50	@ 0x32
 80059a4:	f002 fb58 	bl	8008058 <HAL_Delay>

        	curNote = D*2;
 80059a8:	4b29      	ldr	r3, [pc, #164]	@ (8005a50 <PlayEffect+0x298>)
 80059aa:	4a2e      	ldr	r2, [pc, #184]	@ (8005a64 <PlayEffect+0x2ac>)
 80059ac:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 80059ae:	4b28      	ldr	r3, [pc, #160]	@ (8005a50 <PlayEffect+0x298>)
 80059b0:	881b      	ldrh	r3, [r3, #0]
 80059b2:	0018      	movs	r0, r3
 80059b4:	f7ff fee0 	bl	8005778 <ChangeNote>
        	HAL_Delay(50);
 80059b8:	2032      	movs	r0, #50	@ 0x32
 80059ba:	f002 fb4d 	bl	8008058 <HAL_Delay>

        	curNote = B*2;
 80059be:	4b24      	ldr	r3, [pc, #144]	@ (8005a50 <PlayEffect+0x298>)
 80059c0:	22f7      	movs	r2, #247	@ 0xf7
 80059c2:	0092      	lsls	r2, r2, #2
 80059c4:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 80059c6:	4b22      	ldr	r3, [pc, #136]	@ (8005a50 <PlayEffect+0x298>)
 80059c8:	881b      	ldrh	r3, [r3, #0]
 80059ca:	0018      	movs	r0, r3
 80059cc:	f7ff fed4 	bl	8005778 <ChangeNote>
        	HAL_Delay(50);
 80059d0:	2032      	movs	r0, #50	@ 0x32
 80059d2:	f002 fb41 	bl	8008058 <HAL_Delay>

        	curNote = D*2;
 80059d6:	4b1e      	ldr	r3, [pc, #120]	@ (8005a50 <PlayEffect+0x298>)
 80059d8:	4a22      	ldr	r2, [pc, #136]	@ (8005a64 <PlayEffect+0x2ac>)
 80059da:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 80059dc:	4b1c      	ldr	r3, [pc, #112]	@ (8005a50 <PlayEffect+0x298>)
 80059de:	881b      	ldrh	r3, [r3, #0]
 80059e0:	0018      	movs	r0, r3
 80059e2:	f7ff fec9 	bl	8005778 <ChangeNote>
        	HAL_Delay(50);
 80059e6:	2032      	movs	r0, #50	@ 0x32
 80059e8:	f002 fb36 	bl	8008058 <HAL_Delay>

        	curNote = E*2;
 80059ec:	4b18      	ldr	r3, [pc, #96]	@ (8005a50 <PlayEffect+0x298>)
 80059ee:	4a1e      	ldr	r2, [pc, #120]	@ (8005a68 <PlayEffect+0x2b0>)
 80059f0:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 80059f2:	4b17      	ldr	r3, [pc, #92]	@ (8005a50 <PlayEffect+0x298>)
 80059f4:	881b      	ldrh	r3, [r3, #0]
 80059f6:	0018      	movs	r0, r3
 80059f8:	f7ff febe 	bl	8005778 <ChangeNote>
        	HAL_Delay(50);
 80059fc:	2032      	movs	r0, #50	@ 0x32
 80059fe:	f002 fb2b 	bl	8008058 <HAL_Delay>

        	curNote = G*2;
 8005a02:	4b13      	ldr	r3, [pc, #76]	@ (8005a50 <PlayEffect+0x298>)
 8005a04:	22c4      	movs	r2, #196	@ 0xc4
 8005a06:	00d2      	lsls	r2, r2, #3
 8005a08:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 8005a0a:	4b11      	ldr	r3, [pc, #68]	@ (8005a50 <PlayEffect+0x298>)
 8005a0c:	881b      	ldrh	r3, [r3, #0]
 8005a0e:	0018      	movs	r0, r3
 8005a10:	f7ff feb2 	bl	8005778 <ChangeNote>
        	HAL_Delay(50);
 8005a14:	2032      	movs	r0, #50	@ 0x32
 8005a16:	f002 fb1f 	bl	8008058 <HAL_Delay>

        	curNote = G*2;
 8005a1a:	4b0d      	ldr	r3, [pc, #52]	@ (8005a50 <PlayEffect+0x298>)
 8005a1c:	22c4      	movs	r2, #196	@ 0xc4
 8005a1e:	00d2      	lsls	r2, r2, #3
 8005a20:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 8005a22:	4b0b      	ldr	r3, [pc, #44]	@ (8005a50 <PlayEffect+0x298>)
 8005a24:	881b      	ldrh	r3, [r3, #0]
 8005a26:	0018      	movs	r0, r3
 8005a28:	f7ff fea6 	bl	8005778 <ChangeNote>
        	HAL_Delay(50);
 8005a2c:	2032      	movs	r0, #50	@ 0x32
 8005a2e:	f002 fb13 	bl	8008058 <HAL_Delay>

        	break;
 8005a32:	46c0      	nop			@ (mov r8, r8)
    }
    HAL_TIM_PWM_Stop(&htim17, TIM_CHANNEL_1);
 8005a34:	4b04      	ldr	r3, [pc, #16]	@ (8005a48 <PlayEffect+0x290>)
 8005a36:	2100      	movs	r1, #0
 8005a38:	0018      	movs	r0, r3
 8005a3a:	f005 fee5 	bl	800b808 <HAL_TIM_PWM_Stop>
}
 8005a3e:	46c0      	nop			@ (mov r8, r8)
 8005a40:	46bd      	mov	sp, r7
 8005a42:	b002      	add	sp, #8
 8005a44:	bd80      	pop	{r7, pc}
 8005a46:	46c0      	nop			@ (mov r8, r8)
 8005a48:	20001ce4 	.word	0x20001ce4
 8005a4c:	080114f4 	.word	0x080114f4
 8005a50:	20000bd6 	.word	0x20000bd6
 8005a54:	0000020b 	.word	0x0000020b
 8005a58:	00000ae8 	.word	0x00000ae8
 8005a5c:	000005ca 	.word	0x000005ca
 8005a60:	00000416 	.word	0x00000416
 8005a64:	00000496 	.word	0x00000496
 8005a68:	00000526 	.word	0x00000526

08005a6c <HAL_GPIO_EXTI_Rising_Callback>:
//INTERRUPTS ARE CALLED BACK HERE
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b082      	sub	sp, #8
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	0002      	movs	r2, r0
 8005a74:	1dbb      	adds	r3, r7, #6
 8005a76:	801a      	strh	r2, [r3, #0]
	//Left=2048
	else if(GPIO_PIN==2048)
	{

	}*/
}
 8005a78:	46c0      	nop			@ (mov r8, r8)
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	b002      	add	sp, #8
 8005a7e:	bd80      	pop	{r7, pc}

08005a80 <Animate>:


//AURORA: Put custom functions here!
void Animate (struct Img* animation, unsigned int size)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b086      	sub	sp, #24
 8005a84:	af04      	add	r7, sp, #16
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	6039      	str	r1, [r7, #0]
	++currentFrame;
 8005a8a:	4b14      	ldr	r3, [pc, #80]	@ (8005adc <Animate+0x5c>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	1c5a      	adds	r2, r3, #1
 8005a90:	4b12      	ldr	r3, [pc, #72]	@ (8005adc <Animate+0x5c>)
 8005a92:	601a      	str	r2, [r3, #0]
	if(currentFrame > size)
 8005a94:	4b11      	ldr	r3, [pc, #68]	@ (8005adc <Animate+0x5c>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	683a      	ldr	r2, [r7, #0]
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d202      	bcs.n	8005aa4 <Animate+0x24>
	{
		currentFrame = 0;
 8005a9e:	4b0f      	ldr	r3, [pc, #60]	@ (8005adc <Animate+0x5c>)
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	601a      	str	r2, [r3, #0]
	}
	drawImage(animation[currentFrame].Body, palette, 30, 40, 64, 64, animation[currentFrame].Size);
 8005aa4:	4b0d      	ldr	r3, [pc, #52]	@ (8005adc <Animate+0x5c>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	00db      	lsls	r3, r3, #3
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	18d3      	adds	r3, r2, r3
 8005aae:	6818      	ldr	r0, [r3, #0]
 8005ab0:	4b0a      	ldr	r3, [pc, #40]	@ (8005adc <Animate+0x5c>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	00db      	lsls	r3, r3, #3
 8005ab6:	687a      	ldr	r2, [r7, #4]
 8005ab8:	18d3      	adds	r3, r2, r3
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	4908      	ldr	r1, [pc, #32]	@ (8005ae0 <Animate+0x60>)
 8005ac0:	9302      	str	r3, [sp, #8]
 8005ac2:	2340      	movs	r3, #64	@ 0x40
 8005ac4:	9301      	str	r3, [sp, #4]
 8005ac6:	2340      	movs	r3, #64	@ 0x40
 8005ac8:	9300      	str	r3, [sp, #0]
 8005aca:	2328      	movs	r3, #40	@ 0x28
 8005acc:	221e      	movs	r2, #30
 8005ace:	f7fe f9dd 	bl	8003e8c <drawImage>
	return;
 8005ad2:	46c0      	nop			@ (mov r8, r8)
}
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	b002      	add	sp, #8
 8005ad8:	bd80      	pop	{r7, pc}
 8005ada:	46c0      	nop			@ (mov r8, r8)
 8005adc:	20001b74 	.word	0x20001b74
 8005ae0:	200009b4 	.word	0x200009b4

08005ae4 <_ADXL343_ReadReg8>:
int _ADXL343_ReadReg8 (unsigned char TargetRegister, unsigned char * TargetValue, uint8_t size)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b084      	sub	sp, #16
 8005ae8:	af02      	add	r7, sp, #8
 8005aea:	6039      	str	r1, [r7, #0]
 8005aec:	0011      	movs	r1, r2
 8005aee:	1dfb      	adds	r3, r7, #7
 8005af0:	1c02      	adds	r2, r0, #0
 8005af2:	701a      	strb	r2, [r3, #0]
 8005af4:	1dbb      	adds	r3, r7, #6
 8005af6:	1c0a      	adds	r2, r1, #0
 8005af8:	701a      	strb	r2, [r3, #0]
  if (!HAL_I2C_Master_Transmit(&hi2c1, 0x14<<1, &TargetRegister, 1, 1000)==HAL_OK)
 8005afa:	1dfa      	adds	r2, r7, #7
 8005afc:	4811      	ldr	r0, [pc, #68]	@ (8005b44 <_ADXL343_ReadReg8+0x60>)
 8005afe:	23fa      	movs	r3, #250	@ 0xfa
 8005b00:	009b      	lsls	r3, r3, #2
 8005b02:	9300      	str	r3, [sp, #0]
 8005b04:	2301      	movs	r3, #1
 8005b06:	2128      	movs	r1, #40	@ 0x28
 8005b08:	f002 fe3e 	bl	8008788 <HAL_I2C_Master_Transmit>
 8005b0c:	1e03      	subs	r3, r0, #0
 8005b0e:	d002      	beq.n	8005b16 <_ADXL343_ReadReg8+0x32>
      return -1;
 8005b10:	2301      	movs	r3, #1
 8005b12:	425b      	negs	r3, r3
 8005b14:	e011      	b.n	8005b3a <_ADXL343_ReadReg8+0x56>

  if (!HAL_I2C_Master_Receive(&hi2c1, 0x14<<1, TargetValue, size, 1000)==HAL_OK)
 8005b16:	1dbb      	adds	r3, r7, #6
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	b299      	uxth	r1, r3
 8005b1c:	683a      	ldr	r2, [r7, #0]
 8005b1e:	4809      	ldr	r0, [pc, #36]	@ (8005b44 <_ADXL343_ReadReg8+0x60>)
 8005b20:	23fa      	movs	r3, #250	@ 0xfa
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	9300      	str	r3, [sp, #0]
 8005b26:	000b      	movs	r3, r1
 8005b28:	2128      	movs	r1, #40	@ 0x28
 8005b2a:	f002 ff57 	bl	80089dc <HAL_I2C_Master_Receive>
 8005b2e:	1e03      	subs	r3, r0, #0
 8005b30:	d002      	beq.n	8005b38 <_ADXL343_ReadReg8+0x54>
    return -2;
 8005b32:	2302      	movs	r3, #2
 8005b34:	425b      	negs	r3, r3
 8005b36:	e000      	b.n	8005b3a <_ADXL343_ReadReg8+0x56>

  return 0;
 8005b38:	2300      	movs	r3, #0
}
 8005b3a:	0018      	movs	r0, r3
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	b002      	add	sp, #8
 8005b40:	bd80      	pop	{r7, pc}
 8005b42:	46c0      	nop			@ (mov r8, r8)
 8005b44:	20001c00 	.word	0x20001c00

08005b48 <_ADXL343_WriteReg8>:

int _ADXL343_WriteReg8 (unsigned char TargetRegister, unsigned char TargetValue)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b086      	sub	sp, #24
 8005b4c:	af02      	add	r7, sp, #8
 8005b4e:	0002      	movs	r2, r0
 8005b50:	1dfb      	adds	r3, r7, #7
 8005b52:	701a      	strb	r2, [r3, #0]
 8005b54:	1dbb      	adds	r3, r7, #6
 8005b56:	1c0a      	adds	r2, r1, #0
 8005b58:	701a      	strb	r2, [r3, #0]
  unsigned char buff [2];
  buff[0] = TargetRegister;
 8005b5a:	210c      	movs	r1, #12
 8005b5c:	187b      	adds	r3, r7, r1
 8005b5e:	1dfa      	adds	r2, r7, #7
 8005b60:	7812      	ldrb	r2, [r2, #0]
 8005b62:	701a      	strb	r2, [r3, #0]
  buff[1] = TargetValue;
 8005b64:	187b      	adds	r3, r7, r1
 8005b66:	1dba      	adds	r2, r7, #6
 8005b68:	7812      	ldrb	r2, [r2, #0]
 8005b6a:	705a      	strb	r2, [r3, #1]

  if (HAL_I2C_Master_Transmit(&hi2c1, 0x14<<1, buff, 2, 1000)==HAL_OK)
 8005b6c:	187a      	adds	r2, r7, r1
 8005b6e:	4809      	ldr	r0, [pc, #36]	@ (8005b94 <_ADXL343_WriteReg8+0x4c>)
 8005b70:	23fa      	movs	r3, #250	@ 0xfa
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	9300      	str	r3, [sp, #0]
 8005b76:	2302      	movs	r3, #2
 8005b78:	2128      	movs	r1, #40	@ 0x28
 8005b7a:	f002 fe05 	bl	8008788 <HAL_I2C_Master_Transmit>
 8005b7e:	1e03      	subs	r3, r0, #0
 8005b80:	d102      	bne.n	8005b88 <_ADXL343_WriteReg8+0x40>
      return -1;
 8005b82:	2301      	movs	r3, #1
 8005b84:	425b      	negs	r3, r3
 8005b86:	e000      	b.n	8005b8a <_ADXL343_WriteReg8+0x42>

  return 0;
 8005b88:	2300      	movs	r3, #0
}
 8005b8a:	0018      	movs	r0, r3
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	b004      	add	sp, #16
 8005b90:	bd80      	pop	{r7, pc}
 8005b92:	46c0      	nop			@ (mov r8, r8)
 8005b94:	20001c00 	.word	0x20001c00

08005b98 <SendData>:
void SendData()
{
 8005b98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b9a:	46c6      	mov	lr, r8
 8005b9c:	b500      	push	{lr}
 8005b9e:	b088      	sub	sp, #32
 8005ba0:	af06      	add	r7, sp, #24
	unsigned int posIndex;
	unsigned int clrIndex;
	sprintf(sendBuffer, "(lifeSteps:%d),(weeklySteps:%d),(dailySteps:%d),(uid:%s),(friendship:%d),(password:password),(difficulty:%d),(evolution:%d) \n\r", game.allSteps,game.weeklySteps,game.stepsToday, game.uid, game.mood, game.dailyGoal, game.evo);
 8005ba2:	4a59      	ldr	r2, [pc, #356]	@ (8005d08 <SendData+0x170>)
 8005ba4:	238c      	movs	r3, #140	@ 0x8c
 8005ba6:	005b      	lsls	r3, r3, #1
 8005ba8:	58d4      	ldr	r4, [r2, r3]
 8005baa:	4a57      	ldr	r2, [pc, #348]	@ (8005d08 <SendData+0x170>)
 8005bac:	238e      	movs	r3, #142	@ 0x8e
 8005bae:	005b      	lsls	r3, r3, #1
 8005bb0:	58d5      	ldr	r5, [r2, r3]
 8005bb2:	4a55      	ldr	r2, [pc, #340]	@ (8005d08 <SendData+0x170>)
 8005bb4:	2390      	movs	r3, #144	@ 0x90
 8005bb6:	005b      	lsls	r3, r3, #1
 8005bb8:	58d3      	ldr	r3, [r2, r3]
 8005bba:	4698      	mov	r8, r3
 8005bbc:	4a52      	ldr	r2, [pc, #328]	@ (8005d08 <SendData+0x170>)
 8005bbe:	7c52      	ldrb	r2, [r2, #17]
 8005bc0:	0016      	movs	r6, r2
 8005bc2:	4951      	ldr	r1, [pc, #324]	@ (8005d08 <SendData+0x170>)
 8005bc4:	2294      	movs	r2, #148	@ 0x94
 8005bc6:	0052      	lsls	r2, r2, #1
 8005bc8:	588a      	ldr	r2, [r1, r2]
 8005bca:	494f      	ldr	r1, [pc, #316]	@ (8005d08 <SendData+0x170>)
 8005bcc:	7c09      	ldrb	r1, [r1, #16]
 8005bce:	468c      	mov	ip, r1
 8005bd0:	494e      	ldr	r1, [pc, #312]	@ (8005d0c <SendData+0x174>)
 8005bd2:	484f      	ldr	r0, [pc, #316]	@ (8005d10 <SendData+0x178>)
 8005bd4:	4663      	mov	r3, ip
 8005bd6:	9304      	str	r3, [sp, #16]
 8005bd8:	9203      	str	r2, [sp, #12]
 8005bda:	9602      	str	r6, [sp, #8]
 8005bdc:	4a4d      	ldr	r2, [pc, #308]	@ (8005d14 <SendData+0x17c>)
 8005bde:	9201      	str	r2, [sp, #4]
 8005be0:	4643      	mov	r3, r8
 8005be2:	9300      	str	r3, [sp, #0]
 8005be4:	002b      	movs	r3, r5
 8005be6:	0022      	movs	r2, r4
 8005be8:	f008 fc5c 	bl	800e4a4 <siprintf>
	HAL_UART_Transmit(&huart2, sendBuffer, strlen(sendBuffer), 200);
 8005bec:	4b48      	ldr	r3, [pc, #288]	@ (8005d10 <SendData+0x178>)
 8005bee:	0018      	movs	r0, r3
 8005bf0:	f7fa fa92 	bl	8000118 <strlen>
 8005bf4:	0003      	movs	r3, r0
 8005bf6:	b29a      	uxth	r2, r3
 8005bf8:	4945      	ldr	r1, [pc, #276]	@ (8005d10 <SendData+0x178>)
 8005bfa:	4847      	ldr	r0, [pc, #284]	@ (8005d18 <SendData+0x180>)
 8005bfc:	23c8      	movs	r3, #200	@ 0xc8
 8005bfe:	f006 fc01 	bl	800c404 <HAL_UART_Transmit>
	for(posIndex=0; posIndex<game.numLocations; posIndex++)
 8005c02:	2300      	movs	r3, #0
 8005c04:	607b      	str	r3, [r7, #4]
 8005c06:	e072      	b.n	8005cee <SendData+0x156>
	{       HAL_Delay(5);
 8005c08:	2005      	movs	r0, #5
 8005c0a:	f002 fa25 	bl	8008058 <HAL_Delay>
		for(clrIndex=0;clrIndex<400;clrIndex++) sendBuffer[clrIndex]=0;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	603b      	str	r3, [r7, #0]
 8005c12:	e007      	b.n	8005c24 <SendData+0x8c>
 8005c14:	4a3e      	ldr	r2, [pc, #248]	@ (8005d10 <SendData+0x178>)
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	18d3      	adds	r3, r2, r3
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	701a      	strb	r2, [r3, #0]
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	3301      	adds	r3, #1
 8005c22:	603b      	str	r3, [r7, #0]
 8005c24:	683a      	ldr	r2, [r7, #0]
 8005c26:	23c8      	movs	r3, #200	@ 0xc8
 8005c28:	005b      	lsls	r3, r3, #1
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d3f2      	bcc.n	8005c14 <SendData+0x7c>
		sprintf(sendBuffer, "(lat:%d.%d),(lon:%d.%d),", ((int)game.positions[posIndex].lat), abs((int)((fmod((double)game.positions[posIndex].lat, (double)1))*10000)),((int)game.positions[posIndex].lon), abs((int)((fmod((double)game.positions[posIndex].lon, (double)1))*10000)));
 8005c2e:	4b36      	ldr	r3, [pc, #216]	@ (8005d08 <SendData+0x170>)
 8005c30:	687a      	ldr	r2, [r7, #4]
 8005c32:	3203      	adds	r2, #3
 8005c34:	00d2      	lsls	r2, r2, #3
 8005c36:	58d3      	ldr	r3, [r2, r3]
 8005c38:	1c18      	adds	r0, r3, #0
 8005c3a:	f7fb fc69 	bl	8001510 <__aeabi_f2iz>
 8005c3e:	0006      	movs	r6, r0
 8005c40:	4b31      	ldr	r3, [pc, #196]	@ (8005d08 <SendData+0x170>)
 8005c42:	687a      	ldr	r2, [r7, #4]
 8005c44:	3203      	adds	r2, #3
 8005c46:	00d2      	lsls	r2, r2, #3
 8005c48:	58d3      	ldr	r3, [r2, r3]
 8005c4a:	1c18      	adds	r0, r3, #0
 8005c4c:	f7fd fbca 	bl	80033e4 <__aeabi_f2d>
 8005c50:	2200      	movs	r2, #0
 8005c52:	4b32      	ldr	r3, [pc, #200]	@ (8005d1c <SendData+0x184>)
 8005c54:	f00a fd98 	bl	8010788 <fmod>
 8005c58:	2200      	movs	r2, #0
 8005c5a:	4b31      	ldr	r3, [pc, #196]	@ (8005d20 <SendData+0x188>)
 8005c5c:	f7fc fcae 	bl	80025bc <__aeabi_dmul>
 8005c60:	0002      	movs	r2, r0
 8005c62:	000b      	movs	r3, r1
 8005c64:	0010      	movs	r0, r2
 8005c66:	0019      	movs	r1, r3
 8005c68:	f7fd fb2e 	bl	80032c8 <__aeabi_d2iz>
 8005c6c:	0003      	movs	r3, r0
 8005c6e:	17da      	asrs	r2, r3, #31
 8005c70:	189c      	adds	r4, r3, r2
 8005c72:	4054      	eors	r4, r2
 8005c74:	4a24      	ldr	r2, [pc, #144]	@ (8005d08 <SendData+0x170>)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	3303      	adds	r3, #3
 8005c7a:	00db      	lsls	r3, r3, #3
 8005c7c:	18d3      	adds	r3, r2, r3
 8005c7e:	3304      	adds	r3, #4
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	1c18      	adds	r0, r3, #0
 8005c84:	f7fb fc44 	bl	8001510 <__aeabi_f2iz>
 8005c88:	0005      	movs	r5, r0
 8005c8a:	4a1f      	ldr	r2, [pc, #124]	@ (8005d08 <SendData+0x170>)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	3303      	adds	r3, #3
 8005c90:	00db      	lsls	r3, r3, #3
 8005c92:	18d3      	adds	r3, r2, r3
 8005c94:	3304      	adds	r3, #4
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	1c18      	adds	r0, r3, #0
 8005c9a:	f7fd fba3 	bl	80033e4 <__aeabi_f2d>
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	4b1e      	ldr	r3, [pc, #120]	@ (8005d1c <SendData+0x184>)
 8005ca2:	f00a fd71 	bl	8010788 <fmod>
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	4b1d      	ldr	r3, [pc, #116]	@ (8005d20 <SendData+0x188>)
 8005caa:	f7fc fc87 	bl	80025bc <__aeabi_dmul>
 8005cae:	0002      	movs	r2, r0
 8005cb0:	000b      	movs	r3, r1
 8005cb2:	0010      	movs	r0, r2
 8005cb4:	0019      	movs	r1, r3
 8005cb6:	f7fd fb07 	bl	80032c8 <__aeabi_d2iz>
 8005cba:	0003      	movs	r3, r0
 8005cbc:	17da      	asrs	r2, r3, #31
 8005cbe:	189b      	adds	r3, r3, r2
 8005cc0:	4053      	eors	r3, r2
 8005cc2:	4918      	ldr	r1, [pc, #96]	@ (8005d24 <SendData+0x18c>)
 8005cc4:	4812      	ldr	r0, [pc, #72]	@ (8005d10 <SendData+0x178>)
 8005cc6:	9301      	str	r3, [sp, #4]
 8005cc8:	9500      	str	r5, [sp, #0]
 8005cca:	0023      	movs	r3, r4
 8005ccc:	0032      	movs	r2, r6
 8005cce:	f008 fbe9 	bl	800e4a4 <siprintf>
		HAL_UART_Transmit(&huart2, sendBuffer, strlen(sendBuffer), 200);
 8005cd2:	4b0f      	ldr	r3, [pc, #60]	@ (8005d10 <SendData+0x178>)
 8005cd4:	0018      	movs	r0, r3
 8005cd6:	f7fa fa1f 	bl	8000118 <strlen>
 8005cda:	0003      	movs	r3, r0
 8005cdc:	b29a      	uxth	r2, r3
 8005cde:	490c      	ldr	r1, [pc, #48]	@ (8005d10 <SendData+0x178>)
 8005ce0:	480d      	ldr	r0, [pc, #52]	@ (8005d18 <SendData+0x180>)
 8005ce2:	23c8      	movs	r3, #200	@ 0xc8
 8005ce4:	f006 fb8e 	bl	800c404 <HAL_UART_Transmit>
	for(posIndex=0; posIndex<game.numLocations; posIndex++)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	3301      	adds	r3, #1
 8005cec:	607b      	str	r3, [r7, #4]
 8005cee:	4b06      	ldr	r3, [pc, #24]	@ (8005d08 <SendData+0x170>)
 8005cf0:	695b      	ldr	r3, [r3, #20]
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d387      	bcc.n	8005c08 <SendData+0x70>

	}
}
 8005cf8:	46c0      	nop			@ (mov r8, r8)
 8005cfa:	46c0      	nop			@ (mov r8, r8)
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	b002      	add	sp, #8
 8005d00:	bc80      	pop	{r7}
 8005d02:	46b8      	mov	r8, r7
 8005d04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d06:	46c0      	nop			@ (mov r8, r8)
 8005d08:	20000bdc 	.word	0x20000bdc
 8005d0c:	08010d1c 	.word	0x08010d1c
 8005d10:	20000e08 	.word	0x20000e08
 8005d14:	20000d0c 	.word	0x20000d0c
 8005d18:	20001dc4 	.word	0x20001dc4
 8005d1c:	3ff00000 	.word	0x3ff00000
 8005d20:	40c38800 	.word	0x40c38800
 8005d24:	08010d9c 	.word	0x08010d9c

08005d28 <ReceiveData>:
void ReceiveData()
{
 8005d28:	b5b0      	push	{r4, r5, r7, lr}
 8005d2a:	4cda      	ldr	r4, [pc, #872]	@ (8006094 <ReceiveData+0x36c>)
 8005d2c:	44a5      	add	sp, r4
 8005d2e:	af00      	add	r7, sp, #0
int rI=0;
 8005d30:	2300      	movs	r3, #0
 8005d32:	4ad9      	ldr	r2, [pc, #868]	@ (8006098 <ReceiveData+0x370>)
 8005d34:	18ba      	adds	r2, r7, r2
 8005d36:	6013      	str	r3, [r2, #0]
while(HAL_UART_Receive(&huart2, &(syncBuffer[rI]), 1, 1000)==HAL_OK)
 8005d38:	e197      	b.n	800606a <ReceiveData+0x342>
{
	if(syncBuffer[rI]&&syncBuffer[rI]=='\r')
 8005d3a:	4ad8      	ldr	r2, [pc, #864]	@ (800609c <ReceiveData+0x374>)
 8005d3c:	49d6      	ldr	r1, [pc, #856]	@ (8006098 <ReceiveData+0x370>)
 8005d3e:	187b      	adds	r3, r7, r1
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	18d3      	adds	r3, r2, r3
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d100      	bne.n	8005d4c <ReceiveData+0x24>
 8005d4a:	e188      	b.n	800605e <ReceiveData+0x336>
 8005d4c:	4ad3      	ldr	r2, [pc, #844]	@ (800609c <ReceiveData+0x374>)
 8005d4e:	187b      	adds	r3, r7, r1
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	18d3      	adds	r3, r2, r3
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	2b0d      	cmp	r3, #13
 8005d58:	d000      	beq.n	8005d5c <ReceiveData+0x34>
 8005d5a:	e180      	b.n	800605e <ReceiveData+0x336>
	{
	 enum { MAX_FIELDS = 255 };
	 json_t pool[ MAX_FIELDS ];
	 json_t const* parent = json_create(syncBuffer, pool, MAX_FIELDS);
 8005d5c:	0039      	movs	r1, r7
 8005d5e:	4bcf      	ldr	r3, [pc, #828]	@ (800609c <ReceiveData+0x374>)
 8005d60:	22ff      	movs	r2, #255	@ 0xff
 8005d62:	0018      	movs	r0, r3
 8005d64:	f001 fc18 	bl	8007598 <json_create>
 8005d68:	0003      	movs	r3, r0
 8005d6a:	49cd      	ldr	r1, [pc, #820]	@ (80060a0 <ReceiveData+0x378>)
 8005d6c:	187a      	adds	r2, r7, r1
 8005d6e:	6013      	str	r3, [r2, #0]
	 if(parent)
 8005d70:	187b      	adds	r3, r7, r1
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d100      	bne.n	8005d7a <ReceiveData+0x52>
 8005d78:	e152      	b.n	8006020 <ReceiveData+0x2f8>
	 {
		 int locI=0;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	4ac9      	ldr	r2, [pc, #804]	@ (80060a4 <ReceiveData+0x37c>)
 8005d7e:	18ba      	adds	r2, r7, r2
 8005d80:	6013      	str	r3, [r2, #0]
		 struct latLon tempLoc;
		 char const* uidRxStr = json_getPropertyValue(parent, "uid");
 8005d82:	4ac9      	ldr	r2, [pc, #804]	@ (80060a8 <ReceiveData+0x380>)
 8005d84:	187b      	adds	r3, r7, r1
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	0011      	movs	r1, r2
 8005d8a:	0018      	movs	r0, r3
 8005d8c:	f001 fba0 	bl	80074d0 <json_getPropertyValue>
 8005d90:	0003      	movs	r3, r0
 8005d92:	4ac6      	ldr	r2, [pc, #792]	@ (80060ac <ReceiveData+0x384>)
 8005d94:	18ba      	adds	r2, r7, r2
 8005d96:	6013      	str	r3, [r2, #0]
		 //HAL_UART_Transmit(&huart2, json_getPropertyValue(parent, "uid"), strlen(json_getPropertyValue(parent, "uid")), 1000);
		 for(int strI =0; strI<strlen(uidRxStr); strI++) game.uid[strI]=uidRxStr[strI];
 8005d98:	2300      	movs	r3, #0
 8005d9a:	4ac5      	ldr	r2, [pc, #788]	@ (80060b0 <ReceiveData+0x388>)
 8005d9c:	18ba      	adds	r2, r7, r2
 8005d9e:	6013      	str	r3, [r2, #0]
 8005da0:	e015      	b.n	8005dce <ReceiveData+0xa6>
 8005da2:	4cc3      	ldr	r4, [pc, #780]	@ (80060b0 <ReceiveData+0x388>)
 8005da4:	193b      	adds	r3, r7, r4
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4ac0      	ldr	r2, [pc, #768]	@ (80060ac <ReceiveData+0x384>)
 8005daa:	18ba      	adds	r2, r7, r2
 8005dac:	6812      	ldr	r2, [r2, #0]
 8005dae:	18d3      	adds	r3, r2, r3
 8005db0:	7818      	ldrb	r0, [r3, #0]
 8005db2:	49c0      	ldr	r1, [pc, #768]	@ (80060b4 <ReceiveData+0x38c>)
 8005db4:	2398      	movs	r3, #152	@ 0x98
 8005db6:	005b      	lsls	r3, r3, #1
 8005db8:	193a      	adds	r2, r7, r4
 8005dba:	6812      	ldr	r2, [r2, #0]
 8005dbc:	188a      	adds	r2, r1, r2
 8005dbe:	18d3      	adds	r3, r2, r3
 8005dc0:	1c02      	adds	r2, r0, #0
 8005dc2:	701a      	strb	r2, [r3, #0]
 8005dc4:	193b      	adds	r3, r7, r4
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	3301      	adds	r3, #1
 8005dca:	193a      	adds	r2, r7, r4
 8005dcc:	6013      	str	r3, [r2, #0]
 8005dce:	4bb7      	ldr	r3, [pc, #732]	@ (80060ac <ReceiveData+0x384>)
 8005dd0:	18fb      	adds	r3, r7, r3
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	0018      	movs	r0, r3
 8005dd6:	f7fa f99f 	bl	8000118 <strlen>
 8005dda:	0002      	movs	r2, r0
 8005ddc:	4bb4      	ldr	r3, [pc, #720]	@ (80060b0 <ReceiveData+0x388>)
 8005dde:	18fb      	adds	r3, r7, r3
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d8dd      	bhi.n	8005da2 <ReceiveData+0x7a>
		 game.allSteps = (unsigned int)json_getInteger(json_getProperty(parent, "lifeSteps"));
 8005de6:	4ab4      	ldr	r2, [pc, #720]	@ (80060b8 <ReceiveData+0x390>)
 8005de8:	4cad      	ldr	r4, [pc, #692]	@ (80060a0 <ReceiveData+0x378>)
 8005dea:	193b      	adds	r3, r7, r4
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	0011      	movs	r1, r2
 8005df0:	0018      	movs	r0, r3
 8005df2:	f001 fb4a 	bl	800748a <json_getProperty>
 8005df6:	0003      	movs	r3, r0
 8005df8:	0018      	movs	r0, r3
 8005dfa:	f7fe fbfd 	bl	80045f8 <json_getInteger>
 8005dfe:	0002      	movs	r2, r0
 8005e00:	000b      	movs	r3, r1
 8005e02:	0011      	movs	r1, r2
 8005e04:	4aab      	ldr	r2, [pc, #684]	@ (80060b4 <ReceiveData+0x38c>)
 8005e06:	238c      	movs	r3, #140	@ 0x8c
 8005e08:	005b      	lsls	r3, r3, #1
 8005e0a:	50d1      	str	r1, [r2, r3]
		 game.dailyGoal = (unsigned int)json_getInteger(json_getProperty(parent, "difficulty"));
 8005e0c:	4aab      	ldr	r2, [pc, #684]	@ (80060bc <ReceiveData+0x394>)
 8005e0e:	193b      	adds	r3, r7, r4
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	0011      	movs	r1, r2
 8005e14:	0018      	movs	r0, r3
 8005e16:	f001 fb38 	bl	800748a <json_getProperty>
 8005e1a:	0003      	movs	r3, r0
 8005e1c:	0018      	movs	r0, r3
 8005e1e:	f7fe fbeb 	bl	80045f8 <json_getInteger>
 8005e22:	0002      	movs	r2, r0
 8005e24:	000b      	movs	r3, r1
 8005e26:	0011      	movs	r1, r2
 8005e28:	4aa2      	ldr	r2, [pc, #648]	@ (80060b4 <ReceiveData+0x38c>)
 8005e2a:	2394      	movs	r3, #148	@ 0x94
 8005e2c:	005b      	lsls	r3, r3, #1
 8005e2e:	50d1      	str	r1, [r2, r3]
		 game.evo = (unsigned int)json_getInteger(json_getProperty(parent, "evolution"));
 8005e30:	4aa3      	ldr	r2, [pc, #652]	@ (80060c0 <ReceiveData+0x398>)
 8005e32:	193b      	adds	r3, r7, r4
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	0011      	movs	r1, r2
 8005e38:	0018      	movs	r0, r3
 8005e3a:	f001 fb26 	bl	800748a <json_getProperty>
 8005e3e:	0003      	movs	r3, r0
 8005e40:	0018      	movs	r0, r3
 8005e42:	f7fe fbd9 	bl	80045f8 <json_getInteger>
 8005e46:	0002      	movs	r2, r0
 8005e48:	000b      	movs	r3, r1
 8005e4a:	b2d2      	uxtb	r2, r2
 8005e4c:	4b99      	ldr	r3, [pc, #612]	@ (80060b4 <ReceiveData+0x38c>)
 8005e4e:	741a      	strb	r2, [r3, #16]
		 game.mood = (unsigned int)json_getInteger(json_getProperty(parent, "friendship"));
 8005e50:	4a9c      	ldr	r2, [pc, #624]	@ (80060c4 <ReceiveData+0x39c>)
 8005e52:	193b      	adds	r3, r7, r4
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	0011      	movs	r1, r2
 8005e58:	0018      	movs	r0, r3
 8005e5a:	f001 fb16 	bl	800748a <json_getProperty>
 8005e5e:	0003      	movs	r3, r0
 8005e60:	0018      	movs	r0, r3
 8005e62:	f7fe fbc9 	bl	80045f8 <json_getInteger>
 8005e66:	0002      	movs	r2, r0
 8005e68:	000b      	movs	r3, r1
 8005e6a:	b2d2      	uxtb	r2, r2
 8005e6c:	4b91      	ldr	r3, [pc, #580]	@ (80060b4 <ReceiveData+0x38c>)
 8005e6e:	745a      	strb	r2, [r3, #17]
		 game.stepsToday = (unsigned int)json_getInteger(json_getProperty(parent, "dailySteps"));
 8005e70:	4a95      	ldr	r2, [pc, #596]	@ (80060c8 <ReceiveData+0x3a0>)
 8005e72:	193b      	adds	r3, r7, r4
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	0011      	movs	r1, r2
 8005e78:	0018      	movs	r0, r3
 8005e7a:	f001 fb06 	bl	800748a <json_getProperty>
 8005e7e:	0003      	movs	r3, r0
 8005e80:	0018      	movs	r0, r3
 8005e82:	f7fe fbb9 	bl	80045f8 <json_getInteger>
 8005e86:	0002      	movs	r2, r0
 8005e88:	000b      	movs	r3, r1
 8005e8a:	0011      	movs	r1, r2
 8005e8c:	4a89      	ldr	r2, [pc, #548]	@ (80060b4 <ReceiveData+0x38c>)
 8005e8e:	2390      	movs	r3, #144	@ 0x90
 8005e90:	005b      	lsls	r3, r3, #1
 8005e92:	50d1      	str	r1, [r2, r3]
		 game.weeklySteps = (unsigned int) json_getInteger(json_getProperty(parent, "weeklySteps"));
 8005e94:	4a8d      	ldr	r2, [pc, #564]	@ (80060cc <ReceiveData+0x3a4>)
 8005e96:	193b      	adds	r3, r7, r4
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	0011      	movs	r1, r2
 8005e9c:	0018      	movs	r0, r3
 8005e9e:	f001 faf4 	bl	800748a <json_getProperty>
 8005ea2:	0003      	movs	r3, r0
 8005ea4:	0018      	movs	r0, r3
 8005ea6:	f7fe fba7 	bl	80045f8 <json_getInteger>
 8005eaa:	0002      	movs	r2, r0
 8005eac:	000b      	movs	r3, r1
 8005eae:	0011      	movs	r1, r2
 8005eb0:	4a80      	ldr	r2, [pc, #512]	@ (80060b4 <ReceiveData+0x38c>)
 8005eb2:	238e      	movs	r3, #142	@ 0x8e
 8005eb4:	005b      	lsls	r3, r3, #1
 8005eb6:	50d1      	str	r1, [r2, r3]
		 json_t const* location;
		 json_t const* locations = json_getProperty(parent, "locations");
 8005eb8:	4a85      	ldr	r2, [pc, #532]	@ (80060d0 <ReceiveData+0x3a8>)
 8005eba:	193b      	adds	r3, r7, r4
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	0011      	movs	r1, r2
 8005ec0:	0018      	movs	r0, r3
 8005ec2:	f001 fae2 	bl	800748a <json_getProperty>
 8005ec6:	0003      	movs	r3, r0
 8005ec8:	4a82      	ldr	r2, [pc, #520]	@ (80060d4 <ReceiveData+0x3ac>)
 8005eca:	18b9      	adds	r1, r7, r2
 8005ecc:	600b      	str	r3, [r1, #0]
		 for(location = json_getChild(locations); location; location=json_getSibling(location))
 8005ece:	18bb      	adds	r3, r7, r2
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	0018      	movs	r0, r3
 8005ed4:	f7fe fb86 	bl	80045e4 <json_getChild>
 8005ed8:	0003      	movs	r3, r0
 8005eda:	22a0      	movs	r2, #160	@ 0xa0
 8005edc:	0152      	lsls	r2, r2, #5
 8005ede:	18ba      	adds	r2, r7, r2
 8005ee0:	6013      	str	r3, [r2, #0]
 8005ee2:	e07a      	b.n	8005fda <ReceiveData+0x2b2>
		{
			 tempLoc.lat = (float)json_getReal(json_getProperty(location, "lat"));
 8005ee4:	4a7c      	ldr	r2, [pc, #496]	@ (80060d8 <ReceiveData+0x3b0>)
 8005ee6:	25a0      	movs	r5, #160	@ 0xa0
 8005ee8:	016d      	lsls	r5, r5, #5
 8005eea:	197b      	adds	r3, r7, r5
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	0011      	movs	r1, r2
 8005ef0:	0018      	movs	r0, r3
 8005ef2:	f001 faca 	bl	800748a <json_getProperty>
 8005ef6:	0003      	movs	r3, r0
 8005ef8:	0018      	movs	r0, r3
 8005efa:	f7fe fb8f 	bl	800461c <json_getReal>
 8005efe:	0002      	movs	r2, r0
 8005f00:	000b      	movs	r3, r1
 8005f02:	0010      	movs	r0, r2
 8005f04:	0019      	movs	r1, r3
 8005f06:	f7fd fab5 	bl	8003474 <__aeabi_d2f>
 8005f0a:	1c02      	adds	r2, r0, #0
 8005f0c:	4c73      	ldr	r4, [pc, #460]	@ (80060dc <ReceiveData+0x3b4>)
 8005f0e:	193b      	adds	r3, r7, r4
 8005f10:	601a      	str	r2, [r3, #0]
			 tempLoc.lon = (float)json_getReal(json_getProperty(location, "lng"));
 8005f12:	4a73      	ldr	r2, [pc, #460]	@ (80060e0 <ReceiveData+0x3b8>)
 8005f14:	197b      	adds	r3, r7, r5
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	0011      	movs	r1, r2
 8005f1a:	0018      	movs	r0, r3
 8005f1c:	f001 fab5 	bl	800748a <json_getProperty>
 8005f20:	0003      	movs	r3, r0
 8005f22:	0018      	movs	r0, r3
 8005f24:	f7fe fb7a 	bl	800461c <json_getReal>
 8005f28:	0002      	movs	r2, r0
 8005f2a:	000b      	movs	r3, r1
 8005f2c:	0010      	movs	r0, r2
 8005f2e:	0019      	movs	r1, r3
 8005f30:	f7fd faa0 	bl	8003474 <__aeabi_d2f>
 8005f34:	1c02      	adds	r2, r0, #0
 8005f36:	193b      	adds	r3, r7, r4
 8005f38:	605a      	str	r2, [r3, #4]
			 if(fabs(tempLoc.lat)<.00001)
 8005f3a:	193b      	adds	r3, r7, r4
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	005b      	lsls	r3, r3, #1
 8005f40:	085b      	lsrs	r3, r3, #1
 8005f42:	1c18      	adds	r0, r3, #0
 8005f44:	f7fd fa4e 	bl	80033e4 <__aeabi_f2d>
 8005f48:	4a66      	ldr	r2, [pc, #408]	@ (80060e4 <ReceiveData+0x3bc>)
 8005f4a:	4b67      	ldr	r3, [pc, #412]	@ (80060e8 <ReceiveData+0x3c0>)
 8005f4c:	f7fa fa8c 	bl	8000468 <__aeabi_dcmplt>
 8005f50:	1e03      	subs	r3, r0, #0
 8005f52:	d027      	beq.n	8005fa4 <ReceiveData+0x27c>
			 {

				 tempLoc.lat = (float)json_getReal(json_getProperty(location, "Lat"));
 8005f54:	4a65      	ldr	r2, [pc, #404]	@ (80060ec <ReceiveData+0x3c4>)
 8005f56:	197b      	adds	r3, r7, r5
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	0011      	movs	r1, r2
 8005f5c:	0018      	movs	r0, r3
 8005f5e:	f001 fa94 	bl	800748a <json_getProperty>
 8005f62:	0003      	movs	r3, r0
 8005f64:	0018      	movs	r0, r3
 8005f66:	f7fe fb59 	bl	800461c <json_getReal>
 8005f6a:	0002      	movs	r2, r0
 8005f6c:	000b      	movs	r3, r1
 8005f6e:	0010      	movs	r0, r2
 8005f70:	0019      	movs	r1, r3
 8005f72:	f7fd fa7f 	bl	8003474 <__aeabi_d2f>
 8005f76:	1c02      	adds	r2, r0, #0
 8005f78:	193b      	adds	r3, r7, r4
 8005f7a:	601a      	str	r2, [r3, #0]
				 			 tempLoc.lon = (float)json_getReal(json_getProperty(location, "Lng"));
 8005f7c:	4a5c      	ldr	r2, [pc, #368]	@ (80060f0 <ReceiveData+0x3c8>)
 8005f7e:	197b      	adds	r3, r7, r5
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	0011      	movs	r1, r2
 8005f84:	0018      	movs	r0, r3
 8005f86:	f001 fa80 	bl	800748a <json_getProperty>
 8005f8a:	0003      	movs	r3, r0
 8005f8c:	0018      	movs	r0, r3
 8005f8e:	f7fe fb45 	bl	800461c <json_getReal>
 8005f92:	0002      	movs	r2, r0
 8005f94:	000b      	movs	r3, r1
 8005f96:	0010      	movs	r0, r2
 8005f98:	0019      	movs	r1, r3
 8005f9a:	f7fd fa6b 	bl	8003474 <__aeabi_d2f>
 8005f9e:	1c02      	adds	r2, r0, #0
 8005fa0:	193b      	adds	r3, r7, r4
 8005fa2:	605a      	str	r2, [r3, #4]
			 }
			 game.positions[locI] = tempLoc;
 8005fa4:	4a43      	ldr	r2, [pc, #268]	@ (80060b4 <ReceiveData+0x38c>)
 8005fa6:	4c3f      	ldr	r4, [pc, #252]	@ (80060a4 <ReceiveData+0x37c>)
 8005fa8:	193b      	adds	r3, r7, r4
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	3303      	adds	r3, #3
 8005fae:	00db      	lsls	r3, r3, #3
 8005fb0:	494a      	ldr	r1, [pc, #296]	@ (80060dc <ReceiveData+0x3b4>)
 8005fb2:	1879      	adds	r1, r7, r1
 8005fb4:	18d3      	adds	r3, r2, r3
 8005fb6:	000a      	movs	r2, r1
 8005fb8:	ca03      	ldmia	r2!, {r0, r1}
 8005fba:	c303      	stmia	r3!, {r0, r1}
			 locI++;
 8005fbc:	193b      	adds	r3, r7, r4
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	3301      	adds	r3, #1
 8005fc2:	193a      	adds	r2, r7, r4
 8005fc4:	6013      	str	r3, [r2, #0]
		 for(location = json_getChild(locations); location; location=json_getSibling(location))
 8005fc6:	24a0      	movs	r4, #160	@ 0xa0
 8005fc8:	0164      	lsls	r4, r4, #5
 8005fca:	193b      	adds	r3, r7, r4
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	0018      	movs	r0, r3
 8005fd0:	f7fe fafe 	bl	80045d0 <json_getSibling>
 8005fd4:	0003      	movs	r3, r0
 8005fd6:	193a      	adds	r2, r7, r4
 8005fd8:	6013      	str	r3, [r2, #0]
 8005fda:	23a0      	movs	r3, #160	@ 0xa0
 8005fdc:	015b      	lsls	r3, r3, #5
 8005fde:	18fb      	adds	r3, r7, r3
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d000      	beq.n	8005fe8 <ReceiveData+0x2c0>
 8005fe6:	e77d      	b.n	8005ee4 <ReceiveData+0x1bc>
		}
		game.numLocations = locI;
 8005fe8:	4b2e      	ldr	r3, [pc, #184]	@ (80060a4 <ReceiveData+0x37c>)
 8005fea:	18fb      	adds	r3, r7, r3
 8005fec:	681a      	ldr	r2, [r3, #0]
 8005fee:	4b31      	ldr	r3, [pc, #196]	@ (80060b4 <ReceiveData+0x38c>)
 8005ff0:	615a      	str	r2, [r3, #20]
		for(locI=locI; locI<32; locI++)
 8005ff2:	e010      	b.n	8006016 <ReceiveData+0x2ee>
		{
			memset(&game.positions[locI], 0, sizeof(game.positions[locI]));
 8005ff4:	4c2b      	ldr	r4, [pc, #172]	@ (80060a4 <ReceiveData+0x37c>)
 8005ff6:	193b      	adds	r3, r7, r4
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	3303      	adds	r3, #3
 8005ffc:	00da      	lsls	r2, r3, #3
 8005ffe:	4b2d      	ldr	r3, [pc, #180]	@ (80060b4 <ReceiveData+0x38c>)
 8006000:	18d3      	adds	r3, r2, r3
 8006002:	2208      	movs	r2, #8
 8006004:	2100      	movs	r1, #0
 8006006:	0018      	movs	r0, r3
 8006008:	f008 fab8 	bl	800e57c <memset>
		for(locI=locI; locI<32; locI++)
 800600c:	193b      	adds	r3, r7, r4
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	3301      	adds	r3, #1
 8006012:	193a      	adds	r2, r7, r4
 8006014:	6013      	str	r3, [r2, #0]
 8006016:	4b23      	ldr	r3, [pc, #140]	@ (80060a4 <ReceiveData+0x37c>)
 8006018:	18fb      	adds	r3, r7, r3
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	2b1f      	cmp	r3, #31
 800601e:	dde9      	ble.n	8005ff4 <ReceiveData+0x2cc>
		}
		 //SendData();
	 }
     for(ii=0;ii<=rI;ii++) syncBuffer[ii]=0;
 8006020:	4b34      	ldr	r3, [pc, #208]	@ (80060f4 <ReceiveData+0x3cc>)
 8006022:	2200      	movs	r2, #0
 8006024:	801a      	strh	r2, [r3, #0]
 8006026:	e00d      	b.n	8006044 <ReceiveData+0x31c>
 8006028:	4b32      	ldr	r3, [pc, #200]	@ (80060f4 <ReceiveData+0x3cc>)
 800602a:	881b      	ldrh	r3, [r3, #0]
 800602c:	b29b      	uxth	r3, r3
 800602e:	001a      	movs	r2, r3
 8006030:	4b1a      	ldr	r3, [pc, #104]	@ (800609c <ReceiveData+0x374>)
 8006032:	2100      	movs	r1, #0
 8006034:	5499      	strb	r1, [r3, r2]
 8006036:	4b2f      	ldr	r3, [pc, #188]	@ (80060f4 <ReceiveData+0x3cc>)
 8006038:	881b      	ldrh	r3, [r3, #0]
 800603a:	b29b      	uxth	r3, r3
 800603c:	3301      	adds	r3, #1
 800603e:	b29a      	uxth	r2, r3
 8006040:	4b2c      	ldr	r3, [pc, #176]	@ (80060f4 <ReceiveData+0x3cc>)
 8006042:	801a      	strh	r2, [r3, #0]
 8006044:	4b2b      	ldr	r3, [pc, #172]	@ (80060f4 <ReceiveData+0x3cc>)
 8006046:	881b      	ldrh	r3, [r3, #0]
 8006048:	b29b      	uxth	r3, r3
 800604a:	001a      	movs	r2, r3
 800604c:	4912      	ldr	r1, [pc, #72]	@ (8006098 <ReceiveData+0x370>)
 800604e:	187b      	adds	r3, r7, r1
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4293      	cmp	r3, r2
 8006054:	dae8      	bge.n	8006028 <ReceiveData+0x300>
     rI=0;
 8006056:	2300      	movs	r3, #0
 8006058:	187a      	adds	r2, r7, r1
 800605a:	6013      	str	r3, [r2, #0]
     break;
 800605c:	e014      	b.n	8006088 <ReceiveData+0x360>
	}
	else
	{
		rI++;
 800605e:	4a0e      	ldr	r2, [pc, #56]	@ (8006098 <ReceiveData+0x370>)
 8006060:	18bb      	adds	r3, r7, r2
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	3301      	adds	r3, #1
 8006066:	18ba      	adds	r2, r7, r2
 8006068:	6013      	str	r3, [r2, #0]
while(HAL_UART_Receive(&huart2, &(syncBuffer[rI]), 1, 1000)==HAL_OK)
 800606a:	4b0b      	ldr	r3, [pc, #44]	@ (8006098 <ReceiveData+0x370>)
 800606c:	18fb      	adds	r3, r7, r3
 800606e:	681a      	ldr	r2, [r3, #0]
 8006070:	4b0a      	ldr	r3, [pc, #40]	@ (800609c <ReceiveData+0x374>)
 8006072:	18d1      	adds	r1, r2, r3
 8006074:	23fa      	movs	r3, #250	@ 0xfa
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	481f      	ldr	r0, [pc, #124]	@ (80060f8 <ReceiveData+0x3d0>)
 800607a:	2201      	movs	r2, #1
 800607c:	f006 fa66 	bl	800c54c <HAL_UART_Receive>
 8006080:	1e03      	subs	r3, r0, #0
 8006082:	d100      	bne.n	8006086 <ReceiveData+0x35e>
 8006084:	e659      	b.n	8005d3a <ReceiveData+0x12>
	}
}

}
 8006086:	46c0      	nop			@ (mov r8, r8)
 8006088:	46c0      	nop			@ (mov r8, r8)
 800608a:	46bd      	mov	sp, r7
 800608c:	4b1b      	ldr	r3, [pc, #108]	@ (80060fc <ReceiveData+0x3d4>)
 800608e:	449d      	add	sp, r3
 8006090:	bdb0      	pop	{r4, r5, r7, pc}
 8006092:	46c0      	nop			@ (mov r8, r8)
 8006094:	ffffebf0 	.word	0xffffebf0
 8006098:	0000140c 	.word	0x0000140c
 800609c:	20000f98 	.word	0x20000f98
 80060a0:	000013fc 	.word	0x000013fc
 80060a4:	00001408 	.word	0x00001408
 80060a8:	08010db8 	.word	0x08010db8
 80060ac:	000013f8 	.word	0x000013f8
 80060b0:	00001404 	.word	0x00001404
 80060b4:	20000bdc 	.word	0x20000bdc
 80060b8:	08010dbc 	.word	0x08010dbc
 80060bc:	08010dc8 	.word	0x08010dc8
 80060c0:	08010dd4 	.word	0x08010dd4
 80060c4:	08010de0 	.word	0x08010de0
 80060c8:	08010dec 	.word	0x08010dec
 80060cc:	08010df8 	.word	0x08010df8
 80060d0:	08010e04 	.word	0x08010e04
 80060d4:	000013f4 	.word	0x000013f4
 80060d8:	08010e10 	.word	0x08010e10
 80060dc:	000013ec 	.word	0x000013ec
 80060e0:	08010e14 	.word	0x08010e14
 80060e4:	88e368f1 	.word	0x88e368f1
 80060e8:	3ee4f8b5 	.word	0x3ee4f8b5
 80060ec:	08010e18 	.word	0x08010e18
 80060f0:	08010e1c 	.word	0x08010e1c
 80060f4:	20000d34 	.word	0x20000d34
 80060f8:	20001dc4 	.word	0x20001dc4
 80060fc:	00001410 	.word	0x00001410

08006100 <GetLatLon>:
void GetLatLon()
{
 8006100:	b5b0      	push	{r4, r5, r7, lr}
 8006102:	b08a      	sub	sp, #40	@ 0x28
 8006104:	af00      	add	r7, sp, #0
	int gpsI=0;
 8006106:	2300      	movs	r3, #0
 8006108:	627b      	str	r3, [r7, #36]	@ 0x24
	struct latLon pos;
	struct latLon tempPos;
	double checkW;
	double checkH;
	int posCheckI=0;
 800610a:	2300      	movs	r3, #0
 800610c:	623b      	str	r3, [r7, #32]
	//HAL_UART_Recieve();
	while(HAL_UART_Receive(&huart1, &(buffer[gpsI]), 1, 1000)==HAL_OK||1)
 800610e:	e121      	b.n	8006354 <GetLatLon+0x254>
			  		  	{
							if(buffer[gpsI]=='$')
							{
								for(ii=0;ii<=127;ii++) buffer[ii]=0;
 8006110:	4b9c      	ldr	r3, [pc, #624]	@ (8006384 <GetLatLon+0x284>)
 8006112:	2200      	movs	r2, #0
 8006114:	801a      	strh	r2, [r3, #0]
 8006116:	e00d      	b.n	8006134 <GetLatLon+0x34>
 8006118:	4b9a      	ldr	r3, [pc, #616]	@ (8006384 <GetLatLon+0x284>)
 800611a:	881b      	ldrh	r3, [r3, #0]
 800611c:	b29b      	uxth	r3, r3
 800611e:	001a      	movs	r2, r3
 8006120:	4b99      	ldr	r3, [pc, #612]	@ (8006388 <GetLatLon+0x288>)
 8006122:	2100      	movs	r1, #0
 8006124:	5499      	strb	r1, [r3, r2]
 8006126:	4b97      	ldr	r3, [pc, #604]	@ (8006384 <GetLatLon+0x284>)
 8006128:	881b      	ldrh	r3, [r3, #0]
 800612a:	b29b      	uxth	r3, r3
 800612c:	3301      	adds	r3, #1
 800612e:	b29a      	uxth	r2, r3
 8006130:	4b94      	ldr	r3, [pc, #592]	@ (8006384 <GetLatLon+0x284>)
 8006132:	801a      	strh	r2, [r3, #0]
 8006134:	4b93      	ldr	r3, [pc, #588]	@ (8006384 <GetLatLon+0x284>)
 8006136:	881b      	ldrh	r3, [r3, #0]
 8006138:	b29b      	uxth	r3, r3
 800613a:	2b7f      	cmp	r3, #127	@ 0x7f
 800613c:	d9ec      	bls.n	8006118 <GetLatLon+0x18>
								buffer[0]='$';
 800613e:	4b92      	ldr	r3, [pc, #584]	@ (8006388 <GetLatLon+0x288>)
 8006140:	2224      	movs	r2, #36	@ 0x24
 8006142:	701a      	strb	r2, [r3, #0]
								gpsI=0;
 8006144:	2300      	movs	r3, #0
 8006146:	627b      	str	r3, [r7, #36]	@ 0x24
							}//HAL_UART_Transmit(&huart2, buffer[i], 1, 1000);
			  			  if(buffer[gpsI]=='\n')
 8006148:	4a8f      	ldr	r2, [pc, #572]	@ (8006388 <GetLatLon+0x288>)
 800614a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800614c:	18d3      	adds	r3, r2, r3
 800614e:	781b      	ldrb	r3, [r3, #0]
 8006150:	2b0a      	cmp	r3, #10
 8006152:	d000      	beq.n	8006156 <GetLatLon+0x56>
 8006154:	e0fb      	b.n	800634e <GetLatLon+0x24e>
			  				    	  else return;
			  				      }

			  				      break;
			  				  }*/
			  				if(minmea_parse_gga(&ggaStruct, &(buffer))){
 8006156:	4a8c      	ldr	r2, [pc, #560]	@ (8006388 <GetLatLon+0x288>)
 8006158:	4b8c      	ldr	r3, [pc, #560]	@ (800638c <GetLatLon+0x28c>)
 800615a:	0011      	movs	r1, r2
 800615c:	0018      	movs	r0, r3
 800615e:	f000 fd9f 	bl	8006ca0 <minmea_parse_gga>
 8006162:	1e03      	subs	r3, r0, #0
 8006164:	d100      	bne.n	8006168 <GetLatLon+0x68>
 8006166:	e0db      	b.n	8006320 <GetLatLon+0x220>
			  							  				      pos.lat = minmea_tocoord(&ggaStruct.latitude);
 8006168:	4b89      	ldr	r3, [pc, #548]	@ (8006390 <GetLatLon+0x290>)
 800616a:	0018      	movs	r0, r3
 800616c:	f7fe f9ec 	bl	8004548 <minmea_tocoord>
 8006170:	1c02      	adds	r2, r0, #0
 8006172:	2408      	movs	r4, #8
 8006174:	193b      	adds	r3, r7, r4
 8006176:	601a      	str	r2, [r3, #0]
			  							  				      pos.lon = minmea_tocoord(&ggaStruct.longitude);
 8006178:	4b86      	ldr	r3, [pc, #536]	@ (8006394 <GetLatLon+0x294>)
 800617a:	0018      	movs	r0, r3
 800617c:	f7fe f9e4 	bl	8004548 <minmea_tocoord>
 8006180:	1c02      	adds	r2, r0, #0
 8006182:	193b      	adds	r3, r7, r4
 8006184:	605a      	str	r2, [r3, #4]
			  							  				      game.time = ggaStruct.time;
 8006186:	4b84      	ldr	r3, [pc, #528]	@ (8006398 <GetLatLon+0x298>)
 8006188:	4a80      	ldr	r2, [pc, #512]	@ (800638c <GetLatLon+0x28c>)
 800618a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800618c:	c313      	stmia	r3!, {r0, r1, r4}
 800618e:	6812      	ldr	r2, [r2, #0]
 8006190:	601a      	str	r2, [r3, #0]
			  							  				      frameGot=1;
 8006192:	4b82      	ldr	r3, [pc, #520]	@ (800639c <GetLatLon+0x29c>)
 8006194:	2201      	movs	r2, #1
 8006196:	701a      	strb	r2, [r3, #0]
			  							  				  posCheckI=0;
 8006198:	2300      	movs	r3, #0
 800619a:	623b      	str	r3, [r7, #32]
			  							  				  for(posCheckI=0;posCheckI<game.numLocations;posCheckI++)
 800619c:	2300      	movs	r3, #0
 800619e:	623b      	str	r3, [r7, #32]
 80061a0:	e0a0      	b.n	80062e4 <GetLatLon+0x1e4>
			  							  				  			  				      {

			  							  				  			  				    	  tempPos = game.positions[posCheckI];
 80061a2:	003a      	movs	r2, r7
 80061a4:	497c      	ldr	r1, [pc, #496]	@ (8006398 <GetLatLon+0x298>)
 80061a6:	6a3b      	ldr	r3, [r7, #32]
 80061a8:	3303      	adds	r3, #3
 80061aa:	00db      	lsls	r3, r3, #3
 80061ac:	18cb      	adds	r3, r1, r3
 80061ae:	cb03      	ldmia	r3!, {r0, r1}
 80061b0:	c203      	stmia	r2!, {r0, r1}
			  							  				  			  				    	  if((tempPos.lat>.000001f||tempPos.lat<-.000001f)&&(tempPos.lon>.000001f||tempPos.lon<-.000001f)&&(pos.lat>.000001f||pos.lat<-.000001f)&&(pos.lat>.000001f||pos.lat<-.000001f)){
 80061b2:	003b      	movs	r3, r7
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	497a      	ldr	r1, [pc, #488]	@ (80063a0 <GetLatLon+0x2a0>)
 80061b8:	1c18      	adds	r0, r3, #0
 80061ba:	f7fa f9a3 	bl	8000504 <__aeabi_fcmpgt>
 80061be:	1e03      	subs	r3, r0, #0
 80061c0:	d108      	bne.n	80061d4 <GetLatLon+0xd4>
 80061c2:	003b      	movs	r3, r7
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4977      	ldr	r1, [pc, #476]	@ (80063a4 <GetLatLon+0x2a4>)
 80061c8:	1c18      	adds	r0, r3, #0
 80061ca:	f7fa f987 	bl	80004dc <__aeabi_fcmplt>
 80061ce:	1e03      	subs	r3, r0, #0
 80061d0:	d100      	bne.n	80061d4 <GetLatLon+0xd4>
			  							  				  			  				    	  checkW = fabs(tempPos.lat-pos.lat);
			  							  				  			  				    	  checkH = fabs(tempPos.lon-pos.lon);
			  							  				  			  				    	  if(sqrt((checkW*checkW)+(checkH*checkH))<gpsThreshold) return;

			  							  				  			  				    	  }
			  							  				  			  				    	  else return;
 80061d2:	e0d3      	b.n	800637c <GetLatLon+0x27c>
			  							  				  			  				    	  if((tempPos.lat>.000001f||tempPos.lat<-.000001f)&&(tempPos.lon>.000001f||tempPos.lon<-.000001f)&&(pos.lat>.000001f||pos.lat<-.000001f)&&(pos.lat>.000001f||pos.lat<-.000001f)){
 80061d4:	003b      	movs	r3, r7
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	4971      	ldr	r1, [pc, #452]	@ (80063a0 <GetLatLon+0x2a0>)
 80061da:	1c18      	adds	r0, r3, #0
 80061dc:	f7fa f992 	bl	8000504 <__aeabi_fcmpgt>
 80061e0:	1e03      	subs	r3, r0, #0
 80061e2:	d108      	bne.n	80061f6 <GetLatLon+0xf6>
 80061e4:	003b      	movs	r3, r7
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	496e      	ldr	r1, [pc, #440]	@ (80063a4 <GetLatLon+0x2a4>)
 80061ea:	1c18      	adds	r0, r3, #0
 80061ec:	f7fa f976 	bl	80004dc <__aeabi_fcmplt>
 80061f0:	1e03      	subs	r3, r0, #0
 80061f2:	d100      	bne.n	80061f6 <GetLatLon+0xf6>
			  							  				  			  				    	  else return;
 80061f4:	e0c2      	b.n	800637c <GetLatLon+0x27c>
			  							  				  			  				    	  if((tempPos.lat>.000001f||tempPos.lat<-.000001f)&&(tempPos.lon>.000001f||tempPos.lon<-.000001f)&&(pos.lat>.000001f||pos.lat<-.000001f)&&(pos.lat>.000001f||pos.lat<-.000001f)){
 80061f6:	2408      	movs	r4, #8
 80061f8:	193b      	adds	r3, r7, r4
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4968      	ldr	r1, [pc, #416]	@ (80063a0 <GetLatLon+0x2a0>)
 80061fe:	1c18      	adds	r0, r3, #0
 8006200:	f7fa f980 	bl	8000504 <__aeabi_fcmpgt>
 8006204:	1e03      	subs	r3, r0, #0
 8006206:	d108      	bne.n	800621a <GetLatLon+0x11a>
 8006208:	193b      	adds	r3, r7, r4
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4965      	ldr	r1, [pc, #404]	@ (80063a4 <GetLatLon+0x2a4>)
 800620e:	1c18      	adds	r0, r3, #0
 8006210:	f7fa f964 	bl	80004dc <__aeabi_fcmplt>
 8006214:	1e03      	subs	r3, r0, #0
 8006216:	d100      	bne.n	800621a <GetLatLon+0x11a>
			  							  				  			  				    	  else return;
 8006218:	e0b0      	b.n	800637c <GetLatLon+0x27c>
			  							  				  			  				    	  if((tempPos.lat>.000001f||tempPos.lat<-.000001f)&&(tempPos.lon>.000001f||tempPos.lon<-.000001f)&&(pos.lat>.000001f||pos.lat<-.000001f)&&(pos.lat>.000001f||pos.lat<-.000001f)){
 800621a:	2408      	movs	r4, #8
 800621c:	193b      	adds	r3, r7, r4
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	495f      	ldr	r1, [pc, #380]	@ (80063a0 <GetLatLon+0x2a0>)
 8006222:	1c18      	adds	r0, r3, #0
 8006224:	f7fa f96e 	bl	8000504 <__aeabi_fcmpgt>
 8006228:	1e03      	subs	r3, r0, #0
 800622a:	d108      	bne.n	800623e <GetLatLon+0x13e>
 800622c:	193b      	adds	r3, r7, r4
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	495c      	ldr	r1, [pc, #368]	@ (80063a4 <GetLatLon+0x2a4>)
 8006232:	1c18      	adds	r0, r3, #0
 8006234:	f7fa f952 	bl	80004dc <__aeabi_fcmplt>
 8006238:	1e03      	subs	r3, r0, #0
 800623a:	d100      	bne.n	800623e <GetLatLon+0x13e>
			  							  				  			  				    	  else return;
 800623c:	e09e      	b.n	800637c <GetLatLon+0x27c>
			  							  				  			  				    	  checkW = fabs(tempPos.lat-pos.lat);
 800623e:	003b      	movs	r3, r7
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	2408      	movs	r4, #8
 8006244:	193b      	adds	r3, r7, r4
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	1c19      	adds	r1, r3, #0
 800624a:	1c10      	adds	r0, r2, #0
 800624c:	f7fa ffbc 	bl	80011c8 <__aeabi_fsub>
 8006250:	1c03      	adds	r3, r0, #0
 8006252:	005b      	lsls	r3, r3, #1
 8006254:	085b      	lsrs	r3, r3, #1
 8006256:	1c18      	adds	r0, r3, #0
 8006258:	f7fd f8c4 	bl	80033e4 <__aeabi_f2d>
 800625c:	0002      	movs	r2, r0
 800625e:	000b      	movs	r3, r1
 8006260:	61ba      	str	r2, [r7, #24]
 8006262:	61fb      	str	r3, [r7, #28]
			  							  				  			  				    	  checkH = fabs(tempPos.lon-pos.lon);
 8006264:	003b      	movs	r3, r7
 8006266:	685a      	ldr	r2, [r3, #4]
 8006268:	193b      	adds	r3, r7, r4
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	1c19      	adds	r1, r3, #0
 800626e:	1c10      	adds	r0, r2, #0
 8006270:	f7fa ffaa 	bl	80011c8 <__aeabi_fsub>
 8006274:	1c03      	adds	r3, r0, #0
 8006276:	005b      	lsls	r3, r3, #1
 8006278:	085b      	lsrs	r3, r3, #1
 800627a:	1c18      	adds	r0, r3, #0
 800627c:	f7fd f8b2 	bl	80033e4 <__aeabi_f2d>
 8006280:	0002      	movs	r2, r0
 8006282:	000b      	movs	r3, r1
 8006284:	613a      	str	r2, [r7, #16]
 8006286:	617b      	str	r3, [r7, #20]
			  							  				  			  				    	  if(sqrt((checkW*checkW)+(checkH*checkH))<gpsThreshold) return;
 8006288:	69ba      	ldr	r2, [r7, #24]
 800628a:	69fb      	ldr	r3, [r7, #28]
 800628c:	69b8      	ldr	r0, [r7, #24]
 800628e:	69f9      	ldr	r1, [r7, #28]
 8006290:	f7fc f994 	bl	80025bc <__aeabi_dmul>
 8006294:	0002      	movs	r2, r0
 8006296:	000b      	movs	r3, r1
 8006298:	0014      	movs	r4, r2
 800629a:	001d      	movs	r5, r3
 800629c:	693a      	ldr	r2, [r7, #16]
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	6938      	ldr	r0, [r7, #16]
 80062a2:	6979      	ldr	r1, [r7, #20]
 80062a4:	f7fc f98a 	bl	80025bc <__aeabi_dmul>
 80062a8:	0002      	movs	r2, r0
 80062aa:	000b      	movs	r3, r1
 80062ac:	0020      	movs	r0, r4
 80062ae:	0029      	movs	r1, r5
 80062b0:	f7fb f9dc 	bl	800166c <__aeabi_dadd>
 80062b4:	0002      	movs	r2, r0
 80062b6:	000b      	movs	r3, r1
 80062b8:	0010      	movs	r0, r2
 80062ba:	0019      	movs	r1, r3
 80062bc:	f00a fa8d 	bl	80107da <sqrt>
 80062c0:	0004      	movs	r4, r0
 80062c2:	000d      	movs	r5, r1
 80062c4:	4b38      	ldr	r3, [pc, #224]	@ (80063a8 <GetLatLon+0x2a8>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	1c18      	adds	r0, r3, #0
 80062ca:	f7fd f88b 	bl	80033e4 <__aeabi_f2d>
 80062ce:	0002      	movs	r2, r0
 80062d0:	000b      	movs	r3, r1
 80062d2:	0020      	movs	r0, r4
 80062d4:	0029      	movs	r1, r5
 80062d6:	f7fa f8c7 	bl	8000468 <__aeabi_dcmplt>
 80062da:	1e03      	subs	r3, r0, #0
 80062dc:	d14b      	bne.n	8006376 <GetLatLon+0x276>
			  							  				  for(posCheckI=0;posCheckI<game.numLocations;posCheckI++)
 80062de:	6a3b      	ldr	r3, [r7, #32]
 80062e0:	3301      	adds	r3, #1
 80062e2:	623b      	str	r3, [r7, #32]
 80062e4:	4b2c      	ldr	r3, [pc, #176]	@ (8006398 <GetLatLon+0x298>)
 80062e6:	695a      	ldr	r2, [r3, #20]
 80062e8:	6a3b      	ldr	r3, [r7, #32]
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d900      	bls.n	80062f0 <GetLatLon+0x1f0>
 80062ee:	e758      	b.n	80061a2 <GetLatLon+0xa2>

			  							  				  			  				      }
			  							  				game.positions[game.numLocations] = pos;
 80062f0:	4b29      	ldr	r3, [pc, #164]	@ (8006398 <GetLatLon+0x298>)
 80062f2:	695b      	ldr	r3, [r3, #20]
 80062f4:	4a28      	ldr	r2, [pc, #160]	@ (8006398 <GetLatLon+0x298>)
 80062f6:	3303      	adds	r3, #3
 80062f8:	00db      	lsls	r3, r3, #3
 80062fa:	2108      	movs	r1, #8
 80062fc:	1879      	adds	r1, r7, r1
 80062fe:	18d3      	adds	r3, r2, r3
 8006300:	000a      	movs	r2, r1
 8006302:	ca03      	ldmia	r2!, {r0, r1}
 8006304:	c303      	stmia	r3!, {r0, r1}
			  							  				game.numLocations++;
 8006306:	4b24      	ldr	r3, [pc, #144]	@ (8006398 <GetLatLon+0x298>)
 8006308:	695b      	ldr	r3, [r3, #20]
 800630a:	1c5a      	adds	r2, r3, #1
 800630c:	4b22      	ldr	r3, [pc, #136]	@ (8006398 <GetLatLon+0x298>)
 800630e:	615a      	str	r2, [r3, #20]
			  							  				if(game.numLocations>31)game.numLocations=0;
 8006310:	4b21      	ldr	r3, [pc, #132]	@ (8006398 <GetLatLon+0x298>)
 8006312:	695b      	ldr	r3, [r3, #20]
 8006314:	2b1f      	cmp	r3, #31
 8006316:	d930      	bls.n	800637a <GetLatLon+0x27a>
 8006318:	4b1f      	ldr	r3, [pc, #124]	@ (8006398 <GetLatLon+0x298>)
 800631a:	2200      	movs	r2, #0
 800631c:	615a      	str	r2, [r3, #20]
			  							  				      break;
 800631e:	e02c      	b.n	800637a <GetLatLon+0x27a>
			  							  				  }

			  				for(ii=0;ii<=127;ii++) buffer[ii]=0;
 8006320:	4b18      	ldr	r3, [pc, #96]	@ (8006384 <GetLatLon+0x284>)
 8006322:	2200      	movs	r2, #0
 8006324:	801a      	strh	r2, [r3, #0]
 8006326:	e00d      	b.n	8006344 <GetLatLon+0x244>
 8006328:	4b16      	ldr	r3, [pc, #88]	@ (8006384 <GetLatLon+0x284>)
 800632a:	881b      	ldrh	r3, [r3, #0]
 800632c:	b29b      	uxth	r3, r3
 800632e:	001a      	movs	r2, r3
 8006330:	4b15      	ldr	r3, [pc, #84]	@ (8006388 <GetLatLon+0x288>)
 8006332:	2100      	movs	r1, #0
 8006334:	5499      	strb	r1, [r3, r2]
 8006336:	4b13      	ldr	r3, [pc, #76]	@ (8006384 <GetLatLon+0x284>)
 8006338:	881b      	ldrh	r3, [r3, #0]
 800633a:	b29b      	uxth	r3, r3
 800633c:	3301      	adds	r3, #1
 800633e:	b29a      	uxth	r2, r3
 8006340:	4b10      	ldr	r3, [pc, #64]	@ (8006384 <GetLatLon+0x284>)
 8006342:	801a      	strh	r2, [r3, #0]
 8006344:	4b0f      	ldr	r3, [pc, #60]	@ (8006384 <GetLatLon+0x284>)
 8006346:	881b      	ldrh	r3, [r3, #0]
 8006348:	b29b      	uxth	r3, r3
 800634a:	2b7f      	cmp	r3, #127	@ 0x7f
 800634c:	d9ec      	bls.n	8006328 <GetLatLon+0x228>
			  				  }
			  			  gpsI++;
 800634e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006350:	3301      	adds	r3, #1
 8006352:	627b      	str	r3, [r7, #36]	@ 0x24
	while(HAL_UART_Receive(&huart1, &(buffer[gpsI]), 1, 1000)==HAL_OK||1)
 8006354:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006356:	4b0c      	ldr	r3, [pc, #48]	@ (8006388 <GetLatLon+0x288>)
 8006358:	18d1      	adds	r1, r2, r3
 800635a:	23fa      	movs	r3, #250	@ 0xfa
 800635c:	009b      	lsls	r3, r3, #2
 800635e:	4813      	ldr	r0, [pc, #76]	@ (80063ac <GetLatLon+0x2ac>)
 8006360:	2201      	movs	r2, #1
 8006362:	f006 f8f3 	bl	800c54c <HAL_UART_Receive>
							if(buffer[gpsI]=='$')
 8006366:	4a08      	ldr	r2, [pc, #32]	@ (8006388 <GetLatLon+0x288>)
 8006368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800636a:	18d3      	adds	r3, r2, r3
 800636c:	781b      	ldrb	r3, [r3, #0]
 800636e:	2b24      	cmp	r3, #36	@ 0x24
 8006370:	d000      	beq.n	8006374 <GetLatLon+0x274>
 8006372:	e6e9      	b.n	8006148 <GetLatLon+0x48>
 8006374:	e6cc      	b.n	8006110 <GetLatLon+0x10>
			  							  				  			  				    	  if(sqrt((checkW*checkW)+(checkH*checkH))<gpsThreshold) return;
 8006376:	46c0      	nop			@ (mov r8, r8)
 8006378:	e000      	b.n	800637c <GetLatLon+0x27c>
			  							  				      break;
 800637a:	46c0      	nop			@ (mov r8, r8)


			  		  	}


}
 800637c:	46bd      	mov	sp, r7
 800637e:	b00a      	add	sp, #40	@ 0x28
 8006380:	bdb0      	pop	{r4, r5, r7, pc}
 8006382:	46c0      	nop			@ (mov r8, r8)
 8006384:	20000d34 	.word	0x20000d34
 8006388:	20000d88 	.word	0x20000d88
 800638c:	20000d38 	.word	0x20000d38
 8006390:	20000d48 	.word	0x20000d48
 8006394:	20000d50 	.word	0x20000d50
 8006398:	20000bdc 	.word	0x20000bdc
 800639c:	20000d86 	.word	0x20000d86
 80063a0:	358637bd 	.word	0x358637bd
 80063a4:	b58637bd 	.word	0xb58637bd
 80063a8:	20001b78 	.word	0x20001b78
 80063ac:	20001d30 	.word	0x20001d30

080063b0 <GetJustLatLon>:
struct latLon GetJustLatLon()
{
 80063b0:	b590      	push	{r4, r7, lr}
 80063b2:	b089      	sub	sp, #36	@ 0x24
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
	int gpsI=0;
 80063b8:	2300      	movs	r3, #0
 80063ba:	61fb      	str	r3, [r7, #28]
	struct latLon pos;
	struct latLon tempPos;
	double checkW;
	double checkH;
	int posCheckI=0;
 80063bc:	2300      	movs	r3, #0
 80063be:	61bb      	str	r3, [r7, #24]
	//HAL_UART_Recieve();
	while(HAL_UART_Receive(&huart1, &(buffer[gpsI]), 1, 1000)==HAL_OK||1)
 80063c0:	e057      	b.n	8006472 <GetJustLatLon+0xc2>
			  		  	{
							if(buffer[gpsI]=='$')
							{
								for(ii=0;ii<=127;ii++) buffer[ii]=0;
 80063c2:	4b36      	ldr	r3, [pc, #216]	@ (800649c <GetJustLatLon+0xec>)
 80063c4:	2200      	movs	r2, #0
 80063c6:	801a      	strh	r2, [r3, #0]
 80063c8:	e00d      	b.n	80063e6 <GetJustLatLon+0x36>
 80063ca:	4b34      	ldr	r3, [pc, #208]	@ (800649c <GetJustLatLon+0xec>)
 80063cc:	881b      	ldrh	r3, [r3, #0]
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	001a      	movs	r2, r3
 80063d2:	4b33      	ldr	r3, [pc, #204]	@ (80064a0 <GetJustLatLon+0xf0>)
 80063d4:	2100      	movs	r1, #0
 80063d6:	5499      	strb	r1, [r3, r2]
 80063d8:	4b30      	ldr	r3, [pc, #192]	@ (800649c <GetJustLatLon+0xec>)
 80063da:	881b      	ldrh	r3, [r3, #0]
 80063dc:	b29b      	uxth	r3, r3
 80063de:	3301      	adds	r3, #1
 80063e0:	b29a      	uxth	r2, r3
 80063e2:	4b2e      	ldr	r3, [pc, #184]	@ (800649c <GetJustLatLon+0xec>)
 80063e4:	801a      	strh	r2, [r3, #0]
 80063e6:	4b2d      	ldr	r3, [pc, #180]	@ (800649c <GetJustLatLon+0xec>)
 80063e8:	881b      	ldrh	r3, [r3, #0]
 80063ea:	b29b      	uxth	r3, r3
 80063ec:	2b7f      	cmp	r3, #127	@ 0x7f
 80063ee:	d9ec      	bls.n	80063ca <GetJustLatLon+0x1a>
								buffer[0]='$';
 80063f0:	4b2b      	ldr	r3, [pc, #172]	@ (80064a0 <GetJustLatLon+0xf0>)
 80063f2:	2224      	movs	r2, #36	@ 0x24
 80063f4:	701a      	strb	r2, [r3, #0]
								gpsI=0;
 80063f6:	2300      	movs	r3, #0
 80063f8:	61fb      	str	r3, [r7, #28]
							}//HAL_UART_Transmit(&huart2, buffer[i], 1, 1000);
			  			  if(buffer[gpsI]=='\n')
 80063fa:	4a29      	ldr	r2, [pc, #164]	@ (80064a0 <GetJustLatLon+0xf0>)
 80063fc:	69fb      	ldr	r3, [r7, #28]
 80063fe:	18d3      	adds	r3, r2, r3
 8006400:	781b      	ldrb	r3, [r3, #0]
 8006402:	2b0a      	cmp	r3, #10
 8006404:	d132      	bne.n	800646c <GetJustLatLon+0xbc>
			  				    	  else return;
			  				      }

			  				      break;
			  				  }*/
			  				if(minmea_parse_gga(&ggaStruct, &(buffer))){
 8006406:	4a26      	ldr	r2, [pc, #152]	@ (80064a0 <GetJustLatLon+0xf0>)
 8006408:	4b26      	ldr	r3, [pc, #152]	@ (80064a4 <GetJustLatLon+0xf4>)
 800640a:	0011      	movs	r1, r2
 800640c:	0018      	movs	r0, r3
 800640e:	f000 fc47 	bl	8006ca0 <minmea_parse_gga>
 8006412:	1e03      	subs	r3, r0, #0
 8006414:	d013      	beq.n	800643e <GetJustLatLon+0x8e>
			  							  				      pos.lat = minmea_tocoord(&ggaStruct.latitude);
 8006416:	4b24      	ldr	r3, [pc, #144]	@ (80064a8 <GetJustLatLon+0xf8>)
 8006418:	0018      	movs	r0, r3
 800641a:	f7fe f895 	bl	8004548 <minmea_tocoord>
 800641e:	1c02      	adds	r2, r0, #0
 8006420:	2410      	movs	r4, #16
 8006422:	193b      	adds	r3, r7, r4
 8006424:	601a      	str	r2, [r3, #0]
			  							  				      pos.lon = minmea_tocoord(&ggaStruct.longitude);
 8006426:	4b21      	ldr	r3, [pc, #132]	@ (80064ac <GetJustLatLon+0xfc>)
 8006428:	0018      	movs	r0, r3
 800642a:	f7fe f88d 	bl	8004548 <minmea_tocoord>
 800642e:	1c02      	adds	r2, r0, #0
 8006430:	193b      	adds	r3, r7, r4
 8006432:	605a      	str	r2, [r3, #4]
			  							  				      return pos;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	193a      	adds	r2, r7, r4
 8006438:	ca03      	ldmia	r2!, {r0, r1}
 800643a:	c303      	stmia	r3!, {r0, r1}
 800643c:	e029      	b.n	8006492 <GetJustLatLon+0xe2>
			  							  				      break;
			  							  				  }

			  				for(ii=0;ii<=127;ii++) buffer[ii]=0;
 800643e:	4b17      	ldr	r3, [pc, #92]	@ (800649c <GetJustLatLon+0xec>)
 8006440:	2200      	movs	r2, #0
 8006442:	801a      	strh	r2, [r3, #0]
 8006444:	e00d      	b.n	8006462 <GetJustLatLon+0xb2>
 8006446:	4b15      	ldr	r3, [pc, #84]	@ (800649c <GetJustLatLon+0xec>)
 8006448:	881b      	ldrh	r3, [r3, #0]
 800644a:	b29b      	uxth	r3, r3
 800644c:	001a      	movs	r2, r3
 800644e:	4b14      	ldr	r3, [pc, #80]	@ (80064a0 <GetJustLatLon+0xf0>)
 8006450:	2100      	movs	r1, #0
 8006452:	5499      	strb	r1, [r3, r2]
 8006454:	4b11      	ldr	r3, [pc, #68]	@ (800649c <GetJustLatLon+0xec>)
 8006456:	881b      	ldrh	r3, [r3, #0]
 8006458:	b29b      	uxth	r3, r3
 800645a:	3301      	adds	r3, #1
 800645c:	b29a      	uxth	r2, r3
 800645e:	4b0f      	ldr	r3, [pc, #60]	@ (800649c <GetJustLatLon+0xec>)
 8006460:	801a      	strh	r2, [r3, #0]
 8006462:	4b0e      	ldr	r3, [pc, #56]	@ (800649c <GetJustLatLon+0xec>)
 8006464:	881b      	ldrh	r3, [r3, #0]
 8006466:	b29b      	uxth	r3, r3
 8006468:	2b7f      	cmp	r3, #127	@ 0x7f
 800646a:	d9ec      	bls.n	8006446 <GetJustLatLon+0x96>
			  				  }
			  			  gpsI++;
 800646c:	69fb      	ldr	r3, [r7, #28]
 800646e:	3301      	adds	r3, #1
 8006470:	61fb      	str	r3, [r7, #28]
	while(HAL_UART_Receive(&huart1, &(buffer[gpsI]), 1, 1000)==HAL_OK||1)
 8006472:	69fa      	ldr	r2, [r7, #28]
 8006474:	4b0a      	ldr	r3, [pc, #40]	@ (80064a0 <GetJustLatLon+0xf0>)
 8006476:	18d1      	adds	r1, r2, r3
 8006478:	23fa      	movs	r3, #250	@ 0xfa
 800647a:	009b      	lsls	r3, r3, #2
 800647c:	480c      	ldr	r0, [pc, #48]	@ (80064b0 <GetJustLatLon+0x100>)
 800647e:	2201      	movs	r2, #1
 8006480:	f006 f864 	bl	800c54c <HAL_UART_Receive>
							if(buffer[gpsI]=='$')
 8006484:	4a06      	ldr	r2, [pc, #24]	@ (80064a0 <GetJustLatLon+0xf0>)
 8006486:	69fb      	ldr	r3, [r7, #28]
 8006488:	18d3      	adds	r3, r2, r3
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	2b24      	cmp	r3, #36	@ 0x24
 800648e:	d1b4      	bne.n	80063fa <GetJustLatLon+0x4a>
 8006490:	e797      	b.n	80063c2 <GetJustLatLon+0x12>


			  		  	}


}
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	46bd      	mov	sp, r7
 8006496:	b009      	add	sp, #36	@ 0x24
 8006498:	bd90      	pop	{r4, r7, pc}
 800649a:	46c0      	nop			@ (mov r8, r8)
 800649c:	20000d34 	.word	0x20000d34
 80064a0:	20000d88 	.word	0x20000d88
 80064a4:	20000d38 	.word	0x20000d38
 80064a8:	20000d48 	.word	0x20000d48
 80064ac:	20000d50 	.word	0x20000d50
 80064b0:	20001d30 	.word	0x20001d30

080064b4 <HAL_RTC_AlarmAEventCallback>:
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 80064b4:	b590      	push	{r4, r7, lr}
 80064b6:	b091      	sub	sp, #68	@ 0x44
 80064b8:	af04      	add	r7, sp, #16
 80064ba:	6078      	str	r0, [r7, #4]
  RTC_AlarmTypeDef sAlarm;
  HAL_RTC_GetAlarm(hrtc,&sAlarm,RTC_ALARM_A,FORMAT_BIN);
 80064bc:	2380      	movs	r3, #128	@ 0x80
 80064be:	005a      	lsls	r2, r3, #1
 80064c0:	2408      	movs	r4, #8
 80064c2:	1939      	adds	r1, r7, r4
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	2300      	movs	r3, #0
 80064c8:	f004 f9aa 	bl	800a820 <HAL_RTC_GetAlarm>
  if(sAlarm.AlarmTime.Seconds>58) {
 80064cc:	0022      	movs	r2, r4
 80064ce:	18bb      	adds	r3, r7, r2
 80064d0:	789b      	ldrb	r3, [r3, #2]
 80064d2:	2b3a      	cmp	r3, #58	@ 0x3a
 80064d4:	d903      	bls.n	80064de <HAL_RTC_AlarmAEventCallback+0x2a>
    sAlarm.AlarmTime.Seconds=0;
 80064d6:	18bb      	adds	r3, r7, r2
 80064d8:	2200      	movs	r2, #0
 80064da:	709a      	strb	r2, [r3, #2]
 80064dc:	e006      	b.n	80064ec <HAL_RTC_AlarmAEventCallback+0x38>
  }else{
    sAlarm.AlarmTime.Seconds=sAlarm.AlarmTime.Seconds+1;
 80064de:	2108      	movs	r1, #8
 80064e0:	187b      	adds	r3, r7, r1
 80064e2:	789b      	ldrb	r3, [r3, #2]
 80064e4:	3301      	adds	r3, #1
 80064e6:	b2da      	uxtb	r2, r3
 80064e8:	187b      	adds	r3, r7, r1
 80064ea:	709a      	strb	r2, [r3, #2]
  }
    while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){}
 80064ec:	46c0      	nop			@ (mov r8, r8)
 80064ee:	2308      	movs	r3, #8
 80064f0:	18f9      	adds	r1, r7, r3
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2200      	movs	r2, #0
 80064f6:	0018      	movs	r0, r3
 80064f8:	f004 f852 	bl	800a5a0 <HAL_RTC_SetAlarm_IT>
 80064fc:	1e03      	subs	r3, r0, #0
 80064fe:	d1f6      	bne.n	80064ee <HAL_RTC_AlarmAEventCallback+0x3a>
  	  drawString(30, 30, "testTime", BLACK, GREEN, 1, 1);
 8006500:	4a07      	ldr	r2, [pc, #28]	@ (8006520 <HAL_RTC_AlarmAEventCallback+0x6c>)
 8006502:	2301      	movs	r3, #1
 8006504:	9302      	str	r3, [sp, #8]
 8006506:	2301      	movs	r3, #1
 8006508:	9301      	str	r3, [sp, #4]
 800650a:	4b06      	ldr	r3, [pc, #24]	@ (8006524 <HAL_RTC_AlarmAEventCallback+0x70>)
 800650c:	9300      	str	r3, [sp, #0]
 800650e:	2300      	movs	r3, #0
 8006510:	211e      	movs	r1, #30
 8006512:	201e      	movs	r0, #30
 8006514:	f7fd fb01 	bl	8003b1a <drawString>
}
 8006518:	46c0      	nop			@ (mov r8, r8)
 800651a:	46bd      	mov	sp, r7
 800651c:	b00d      	add	sp, #52	@ 0x34
 800651e:	bd90      	pop	{r4, r7, pc}
 8006520:	08010e20 	.word	0x08010e20
 8006524:	ffffe007 	.word	0xffffe007

08006528 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800652c:	b672      	cpsid	i
}
 800652e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006530:	46c0      	nop			@ (mov r8, r8)
 8006532:	e7fd      	b.n	8006530 <Error_Handler+0x8>

08006534 <minmea_isfield>:
        return false;

    return true;
}

static inline bool minmea_isfield(char c) {
 8006534:	b580      	push	{r7, lr}
 8006536:	b082      	sub	sp, #8
 8006538:	af00      	add	r7, sp, #0
 800653a:	0002      	movs	r2, r0
 800653c:	1dfb      	adds	r3, r7, #7
 800653e:	701a      	strb	r2, [r3, #0]
    return isprint((unsigned char) c) && c != ',' && c != '*';
 8006540:	1dfb      	adds	r3, r7, #7
 8006542:	781b      	ldrb	r3, [r3, #0]
 8006544:	1c5a      	adds	r2, r3, #1
 8006546:	4b0d      	ldr	r3, [pc, #52]	@ (800657c <minmea_isfield+0x48>)
 8006548:	18d3      	adds	r3, r2, r3
 800654a:	781b      	ldrb	r3, [r3, #0]
 800654c:	001a      	movs	r2, r3
 800654e:	2397      	movs	r3, #151	@ 0x97
 8006550:	4013      	ands	r3, r2
 8006552:	d009      	beq.n	8006568 <minmea_isfield+0x34>
 8006554:	1dfb      	adds	r3, r7, #7
 8006556:	781b      	ldrb	r3, [r3, #0]
 8006558:	2b2c      	cmp	r3, #44	@ 0x2c
 800655a:	d005      	beq.n	8006568 <minmea_isfield+0x34>
 800655c:	1dfb      	adds	r3, r7, #7
 800655e:	781b      	ldrb	r3, [r3, #0]
 8006560:	2b2a      	cmp	r3, #42	@ 0x2a
 8006562:	d001      	beq.n	8006568 <minmea_isfield+0x34>
 8006564:	2301      	movs	r3, #1
 8006566:	e000      	b.n	800656a <minmea_isfield+0x36>
 8006568:	2300      	movs	r3, #0
 800656a:	1c1a      	adds	r2, r3, #0
 800656c:	2301      	movs	r3, #1
 800656e:	4013      	ands	r3, r2
 8006570:	b2db      	uxtb	r3, r3
}
 8006572:	0018      	movs	r0, r3
 8006574:	46bd      	mov	sp, r7
 8006576:	b002      	add	sp, #8
 8006578:	bd80      	pop	{r7, pc}
 800657a:	46c0      	nop			@ (mov r8, r8)
 800657c:	080117d0 	.word	0x080117d0

08006580 <minmea_scan>:

bool minmea_scan(const char *sentence, const char *format, ...)
{
 8006580:	b40e      	push	{r1, r2, r3}
 8006582:	b5b0      	push	{r4, r5, r7, lr}
 8006584:	b0a7      	sub	sp, #156	@ 0x9c
 8006586:	af00      	add	r7, sp, #0
 8006588:	6078      	str	r0, [r7, #4]
    bool result = false;
 800658a:	2397      	movs	r3, #151	@ 0x97
 800658c:	18fb      	adds	r3, r7, r3
 800658e:	2200      	movs	r2, #0
 8006590:	701a      	strb	r2, [r3, #0]
    bool optional = false;
 8006592:	2396      	movs	r3, #150	@ 0x96
 8006594:	18fb      	adds	r3, r7, r3
 8006596:	2200      	movs	r2, #0
 8006598:	701a      	strb	r2, [r3, #0]
    va_list ap;
    va_start(ap, format);
 800659a:	23a8      	movs	r3, #168	@ 0xa8
 800659c:	2208      	movs	r2, #8
 800659e:	189b      	adds	r3, r3, r2
 80065a0:	19db      	adds	r3, r3, r7
 80065a2:	62fb      	str	r3, [r7, #44]	@ 0x2c

    const char *field = sentence;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2290      	movs	r2, #144	@ 0x90
 80065a8:	18ba      	adds	r2, r7, r2
 80065aa:	6013      	str	r3, [r2, #0]
        } else { \
            field = NULL; \
        } \
    } while (0)

    while (*format) {
 80065ac:	e345      	b.n	8006c3a <minmea_scan+0x6ba>
        char type = *format++;
 80065ae:	21a4      	movs	r1, #164	@ 0xa4
 80065b0:	2008      	movs	r0, #8
 80065b2:	180b      	adds	r3, r1, r0
 80065b4:	19db      	adds	r3, r3, r7
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	1c5a      	adds	r2, r3, #1
 80065ba:	1809      	adds	r1, r1, r0
 80065bc:	19c9      	adds	r1, r1, r7
 80065be:	600a      	str	r2, [r1, #0]
 80065c0:	2143      	movs	r1, #67	@ 0x43
 80065c2:	187a      	adds	r2, r7, r1
 80065c4:	781b      	ldrb	r3, [r3, #0]
 80065c6:	7013      	strb	r3, [r2, #0]

        if (type == ';') {
 80065c8:	187b      	adds	r3, r7, r1
 80065ca:	781b      	ldrb	r3, [r3, #0]
 80065cc:	2b3b      	cmp	r3, #59	@ 0x3b
 80065ce:	d104      	bne.n	80065da <minmea_scan+0x5a>
            // All further fields are optional.
            optional = true;
 80065d0:	2396      	movs	r3, #150	@ 0x96
 80065d2:	18fb      	adds	r3, r7, r3
 80065d4:	2201      	movs	r2, #1
 80065d6:	701a      	strb	r2, [r3, #0]
            continue;
 80065d8:	e32f      	b.n	8006c3a <minmea_scan+0x6ba>
        }

        if (!field && !optional) {
 80065da:	2390      	movs	r3, #144	@ 0x90
 80065dc:	18fb      	adds	r3, r7, r3
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d108      	bne.n	80065f6 <minmea_scan+0x76>
 80065e4:	2396      	movs	r3, #150	@ 0x96
 80065e6:	18fb      	adds	r3, r7, r3
 80065e8:	781b      	ldrb	r3, [r3, #0]
 80065ea:	2201      	movs	r2, #1
 80065ec:	4053      	eors	r3, r2
 80065ee:	b2db      	uxtb	r3, r3
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d000      	beq.n	80065f6 <minmea_scan+0x76>
 80065f4:	e32f      	b.n	8006c56 <minmea_scan+0x6d6>
            // Field requested but we ran out if input. Bail out.
            goto parse_error;
        }

        switch (type) {
 80065f6:	2343      	movs	r3, #67	@ 0x43
 80065f8:	18fb      	adds	r3, r7, r3
 80065fa:	781b      	ldrb	r3, [r3, #0]
 80065fc:	3b44      	subs	r3, #68	@ 0x44
 80065fe:	2b30      	cmp	r3, #48	@ 0x30
 8006600:	d900      	bls.n	8006604 <minmea_scan+0x84>
 8006602:	e32a      	b.n	8006c5a <minmea_scan+0x6da>
 8006604:	009a      	lsls	r2, r3, #2
 8006606:	4bbd      	ldr	r3, [pc, #756]	@ (80068fc <minmea_scan+0x37c>)
 8006608:	18d3      	adds	r3, r2, r3
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	469f      	mov	pc, r3
            case 'c': { // Single character field (char).
                char value = '\0';
 800660e:	258f      	movs	r5, #143	@ 0x8f
 8006610:	197b      	adds	r3, r7, r5
 8006612:	2200      	movs	r2, #0
 8006614:	701a      	strb	r2, [r3, #0]

                if (field && minmea_isfield(*field))
 8006616:	2490      	movs	r4, #144	@ 0x90
 8006618:	193b      	adds	r3, r7, r4
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d00c      	beq.n	800663a <minmea_scan+0xba>
 8006620:	193b      	adds	r3, r7, r4
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	781b      	ldrb	r3, [r3, #0]
 8006626:	0018      	movs	r0, r3
 8006628:	f7ff ff84 	bl	8006534 <minmea_isfield>
 800662c:	1e03      	subs	r3, r0, #0
 800662e:	d004      	beq.n	800663a <minmea_scan+0xba>
                    value = *field;
 8006630:	197b      	adds	r3, r7, r5
 8006632:	193a      	adds	r2, r7, r4
 8006634:	6812      	ldr	r2, [r2, #0]
 8006636:	7812      	ldrb	r2, [r2, #0]
 8006638:	701a      	strb	r2, [r3, #0]

                *va_arg(ap, char *) = value;
 800663a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800663c:	1d1a      	adds	r2, r3, #4
 800663e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	228f      	movs	r2, #143	@ 0x8f
 8006644:	18ba      	adds	r2, r7, r2
 8006646:	7812      	ldrb	r2, [r2, #0]
 8006648:	701a      	strb	r2, [r3, #0]
            } break;
 800664a:	e2db      	b.n	8006c04 <minmea_scan+0x684>

            case 'd': { // Single character direction field (int).
                int value = 0;
 800664c:	2300      	movs	r3, #0
 800664e:	2288      	movs	r2, #136	@ 0x88
 8006650:	18ba      	adds	r2, r7, r2
 8006652:	6013      	str	r3, [r2, #0]

                if (field && minmea_isfield(*field)) {
 8006654:	2490      	movs	r4, #144	@ 0x90
 8006656:	193b      	adds	r3, r7, r4
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d022      	beq.n	80066a4 <minmea_scan+0x124>
 800665e:	193b      	adds	r3, r7, r4
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	781b      	ldrb	r3, [r3, #0]
 8006664:	0018      	movs	r0, r3
 8006666:	f7ff ff65 	bl	8006534 <minmea_isfield>
 800666a:	1e03      	subs	r3, r0, #0
 800666c:	d01a      	beq.n	80066a4 <minmea_scan+0x124>
                    switch (*field) {
 800666e:	193b      	adds	r3, r7, r4
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	781b      	ldrb	r3, [r3, #0]
 8006674:	2b57      	cmp	r3, #87	@ 0x57
 8006676:	d00f      	beq.n	8006698 <minmea_scan+0x118>
 8006678:	dd00      	ble.n	800667c <minmea_scan+0xfc>
 800667a:	e2f0      	b.n	8006c5e <minmea_scan+0x6de>
 800667c:	2b53      	cmp	r3, #83	@ 0x53
 800667e:	d00b      	beq.n	8006698 <minmea_scan+0x118>
 8006680:	dd00      	ble.n	8006684 <minmea_scan+0x104>
 8006682:	e2ec      	b.n	8006c5e <minmea_scan+0x6de>
 8006684:	2b45      	cmp	r3, #69	@ 0x45
 8006686:	d002      	beq.n	800668e <minmea_scan+0x10e>
 8006688:	2b4e      	cmp	r3, #78	@ 0x4e
 800668a:	d000      	beq.n	800668e <minmea_scan+0x10e>
 800668c:	e2e7      	b.n	8006c5e <minmea_scan+0x6de>
                        case 'N':
                        case 'E':
                            value = 1;
 800668e:	2301      	movs	r3, #1
 8006690:	2288      	movs	r2, #136	@ 0x88
 8006692:	18ba      	adds	r2, r7, r2
 8006694:	6013      	str	r3, [r2, #0]
                            break;
 8006696:	e005      	b.n	80066a4 <minmea_scan+0x124>
                        case 'S':
                        case 'W':
                            value = -1;
 8006698:	2301      	movs	r3, #1
 800669a:	425b      	negs	r3, r3
 800669c:	2288      	movs	r2, #136	@ 0x88
 800669e:	18ba      	adds	r2, r7, r2
 80066a0:	6013      	str	r3, [r2, #0]
                            break;
 80066a2:	46c0      	nop			@ (mov r8, r8)
                        default:
                            goto parse_error;
                    }
                }

                *va_arg(ap, int *) = value;
 80066a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066a6:	1d1a      	adds	r2, r3, #4
 80066a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	2288      	movs	r2, #136	@ 0x88
 80066ae:	18ba      	adds	r2, r7, r2
 80066b0:	6812      	ldr	r2, [r2, #0]
 80066b2:	601a      	str	r2, [r3, #0]
            } break;
 80066b4:	e2a6      	b.n	8006c04 <minmea_scan+0x684>

            case 'f': { // Fractional value with scale (struct minmea_float).
                int sign = 0;
 80066b6:	2300      	movs	r3, #0
 80066b8:	2284      	movs	r2, #132	@ 0x84
 80066ba:	18ba      	adds	r2, r7, r2
 80066bc:	6013      	str	r3, [r2, #0]
                int_least32_t value = -1;
 80066be:	2301      	movs	r3, #1
 80066c0:	425b      	negs	r3, r3
 80066c2:	2280      	movs	r2, #128	@ 0x80
 80066c4:	18ba      	adds	r2, r7, r2
 80066c6:	6013      	str	r3, [r2, #0]
                int_least32_t scale = 0;
 80066c8:	2300      	movs	r3, #0
 80066ca:	67fb      	str	r3, [r7, #124]	@ 0x7c

                if (field) {
 80066cc:	2390      	movs	r3, #144	@ 0x90
 80066ce:	18fb      	adds	r3, r7, r3
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d100      	bne.n	80066d8 <minmea_scan+0x158>
 80066d6:	e088      	b.n	80067ea <minmea_scan+0x26a>
                    while (minmea_isfield(*field)) {
 80066d8:	e07d      	b.n	80067d6 <minmea_scan+0x256>
                        if (*field == '+' && !sign && value == -1) {
 80066da:	2390      	movs	r3, #144	@ 0x90
 80066dc:	18fb      	adds	r3, r7, r3
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	781b      	ldrb	r3, [r3, #0]
 80066e2:	2b2b      	cmp	r3, #43	@ 0x2b
 80066e4:	d10d      	bne.n	8006702 <minmea_scan+0x182>
 80066e6:	2284      	movs	r2, #132	@ 0x84
 80066e8:	18bb      	adds	r3, r7, r2
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d108      	bne.n	8006702 <minmea_scan+0x182>
 80066f0:	2380      	movs	r3, #128	@ 0x80
 80066f2:	18fb      	adds	r3, r7, r3
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	3301      	adds	r3, #1
 80066f8:	d103      	bne.n	8006702 <minmea_scan+0x182>
                            sign = 1;
 80066fa:	2301      	movs	r3, #1
 80066fc:	18ba      	adds	r2, r7, r2
 80066fe:	6013      	str	r3, [r2, #0]
 8006700:	e063      	b.n	80067ca <minmea_scan+0x24a>
                        } else if (*field == '-' && !sign && value == -1) {
 8006702:	2390      	movs	r3, #144	@ 0x90
 8006704:	18fb      	adds	r3, r7, r3
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	781b      	ldrb	r3, [r3, #0]
 800670a:	2b2d      	cmp	r3, #45	@ 0x2d
 800670c:	d10e      	bne.n	800672c <minmea_scan+0x1ac>
 800670e:	2284      	movs	r2, #132	@ 0x84
 8006710:	18bb      	adds	r3, r7, r2
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d109      	bne.n	800672c <minmea_scan+0x1ac>
 8006718:	2380      	movs	r3, #128	@ 0x80
 800671a:	18fb      	adds	r3, r7, r3
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	3301      	adds	r3, #1
 8006720:	d104      	bne.n	800672c <minmea_scan+0x1ac>
                            sign = -1;
 8006722:	2301      	movs	r3, #1
 8006724:	425b      	negs	r3, r3
 8006726:	18ba      	adds	r2, r7, r2
 8006728:	6013      	str	r3, [r2, #0]
 800672a:	e04e      	b.n	80067ca <minmea_scan+0x24a>
                        } else if (isdigit((unsigned char) *field)) {
 800672c:	2190      	movs	r1, #144	@ 0x90
 800672e:	187b      	adds	r3, r7, r1
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	1c5a      	adds	r2, r3, #1
 8006736:	4b72      	ldr	r3, [pc, #456]	@ (8006900 <minmea_scan+0x380>)
 8006738:	18d3      	adds	r3, r2, r3
 800673a:	781b      	ldrb	r3, [r3, #0]
 800673c:	001a      	movs	r2, r3
 800673e:	2304      	movs	r3, #4
 8006740:	4013      	ands	r3, r2
 8006742:	d035      	beq.n	80067b0 <minmea_scan+0x230>
                            int digit = *field - '0';
 8006744:	187b      	adds	r3, r7, r1
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	781b      	ldrb	r3, [r3, #0]
 800674a:	3b30      	subs	r3, #48	@ 0x30
 800674c:	63bb      	str	r3, [r7, #56]	@ 0x38
                            if (value == -1)
 800674e:	2280      	movs	r2, #128	@ 0x80
 8006750:	18bb      	adds	r3, r7, r2
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	3301      	adds	r3, #1
 8006756:	d102      	bne.n	800675e <minmea_scan+0x1de>
                                value = 0;
 8006758:	2300      	movs	r3, #0
 800675a:	18ba      	adds	r2, r7, r2
 800675c:	6013      	str	r3, [r2, #0]
                            if (value > (INT_LEAST32_MAX-digit) / 10) {
 800675e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006760:	4a68      	ldr	r2, [pc, #416]	@ (8006904 <minmea_scan+0x384>)
 8006762:	1ad3      	subs	r3, r2, r3
 8006764:	210a      	movs	r1, #10
 8006766:	0018      	movs	r0, r3
 8006768:	f7f9 fd7c 	bl	8000264 <__divsi3>
 800676c:	0003      	movs	r3, r0
 800676e:	001a      	movs	r2, r3
 8006770:	2380      	movs	r3, #128	@ 0x80
 8006772:	18fb      	adds	r3, r7, r3
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4293      	cmp	r3, r2
 8006778:	dd04      	ble.n	8006784 <minmea_scan+0x204>
                                /* we ran out of bits, what do we do? */
                                if (scale) {
 800677a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800677c:	2b00      	cmp	r3, #0
 800677e:	d100      	bne.n	8006782 <minmea_scan+0x202>
 8006780:	e26f      	b.n	8006c62 <minmea_scan+0x6e2>
                                    /* truncate extra precision */
                                    break;
 8006782:	e032      	b.n	80067ea <minmea_scan+0x26a>
                                } else {
                                    /* integer overflow. bail out. */
                                    goto parse_error;
                                }
                            }
                            value = (10 * value) + digit;
 8006784:	2180      	movs	r1, #128	@ 0x80
 8006786:	187b      	adds	r3, r7, r1
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	0013      	movs	r3, r2
 800678c:	009b      	lsls	r3, r3, #2
 800678e:	189b      	adds	r3, r3, r2
 8006790:	005b      	lsls	r3, r3, #1
 8006792:	001a      	movs	r2, r3
 8006794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006796:	189b      	adds	r3, r3, r2
 8006798:	187a      	adds	r2, r7, r1
 800679a:	6013      	str	r3, [r2, #0]
                            if (scale)
 800679c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d013      	beq.n	80067ca <minmea_scan+0x24a>
                                scale *= 10;
 80067a2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80067a4:	0013      	movs	r3, r2
 80067a6:	009b      	lsls	r3, r3, #2
 80067a8:	189b      	adds	r3, r3, r2
 80067aa:	005b      	lsls	r3, r3, #1
 80067ac:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80067ae:	e00c      	b.n	80067ca <minmea_scan+0x24a>
                        } else if (*field == '.' && scale == 0) {
 80067b0:	2390      	movs	r3, #144	@ 0x90
 80067b2:	18fb      	adds	r3, r7, r3
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	781b      	ldrb	r3, [r3, #0]
 80067b8:	2b2e      	cmp	r3, #46	@ 0x2e
 80067ba:	d000      	beq.n	80067be <minmea_scan+0x23e>
 80067bc:	e253      	b.n	8006c66 <minmea_scan+0x6e6>
 80067be:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d000      	beq.n	80067c6 <minmea_scan+0x246>
 80067c4:	e24f      	b.n	8006c66 <minmea_scan+0x6e6>
                            scale = 1;
 80067c6:	2301      	movs	r3, #1
 80067c8:	67fb      	str	r3, [r7, #124]	@ 0x7c
                        } else {
                            goto parse_error;
                        }
                        field++;
 80067ca:	2290      	movs	r2, #144	@ 0x90
 80067cc:	18bb      	adds	r3, r7, r2
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	3301      	adds	r3, #1
 80067d2:	18ba      	adds	r2, r7, r2
 80067d4:	6013      	str	r3, [r2, #0]
                    while (minmea_isfield(*field)) {
 80067d6:	2390      	movs	r3, #144	@ 0x90
 80067d8:	18fb      	adds	r3, r7, r3
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	781b      	ldrb	r3, [r3, #0]
 80067de:	0018      	movs	r0, r3
 80067e0:	f7ff fea8 	bl	8006534 <minmea_isfield>
 80067e4:	1e03      	subs	r3, r0, #0
 80067e6:	d000      	beq.n	80067ea <minmea_scan+0x26a>
 80067e8:	e777      	b.n	80066da <minmea_scan+0x15a>
                    }
                }

                if ((sign || scale) && value == -1)
 80067ea:	2384      	movs	r3, #132	@ 0x84
 80067ec:	18fb      	adds	r3, r7, r3
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d102      	bne.n	80067fa <minmea_scan+0x27a>
 80067f4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d005      	beq.n	8006806 <minmea_scan+0x286>
 80067fa:	2380      	movs	r3, #128	@ 0x80
 80067fc:	18fb      	adds	r3, r7, r3
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	3301      	adds	r3, #1
 8006802:	d100      	bne.n	8006806 <minmea_scan+0x286>
 8006804:	e231      	b.n	8006c6a <minmea_scan+0x6ea>
                    goto parse_error;

                if (value == -1) {
 8006806:	2280      	movs	r2, #128	@ 0x80
 8006808:	18bb      	adds	r3, r7, r2
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	3301      	adds	r3, #1
 800680e:	d105      	bne.n	800681c <minmea_scan+0x29c>
                    /* No digits were scanned. */
                    value = 0;
 8006810:	2300      	movs	r3, #0
 8006812:	18ba      	adds	r2, r7, r2
 8006814:	6013      	str	r3, [r2, #0]
                    scale = 0;
 8006816:	2300      	movs	r3, #0
 8006818:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800681a:	e004      	b.n	8006826 <minmea_scan+0x2a6>
                } else if (scale == 0) {
 800681c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800681e:	2b00      	cmp	r3, #0
 8006820:	d101      	bne.n	8006826 <minmea_scan+0x2a6>
                    /* No decimal point. */
                    scale = 1;
 8006822:	2301      	movs	r3, #1
 8006824:	67fb      	str	r3, [r7, #124]	@ 0x7c
                }
                if (sign)
 8006826:	2284      	movs	r2, #132	@ 0x84
 8006828:	18bb      	adds	r3, r7, r2
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d007      	beq.n	8006840 <minmea_scan+0x2c0>
                    value *= sign;
 8006830:	2180      	movs	r1, #128	@ 0x80
 8006832:	187b      	adds	r3, r7, r1
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	18ba      	adds	r2, r7, r2
 8006838:	6812      	ldr	r2, [r2, #0]
 800683a:	4353      	muls	r3, r2
 800683c:	187a      	adds	r2, r7, r1
 800683e:	6013      	str	r3, [r2, #0]

                *va_arg(ap, struct minmea_float *) = (struct minmea_float) {value, scale};
 8006840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006842:	1d1a      	adds	r2, r3, #4
 8006844:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	2280      	movs	r2, #128	@ 0x80
 800684a:	18ba      	adds	r2, r7, r2
 800684c:	6812      	ldr	r2, [r2, #0]
 800684e:	601a      	str	r2, [r3, #0]
 8006850:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006852:	605a      	str	r2, [r3, #4]
            } break;
 8006854:	e1d6      	b.n	8006c04 <minmea_scan+0x684>

            case 'i': { // Integer value, default 0 (int).
                int value = 0;
 8006856:	2300      	movs	r3, #0
 8006858:	67bb      	str	r3, [r7, #120]	@ 0x78

                if (field) {
 800685a:	2290      	movs	r2, #144	@ 0x90
 800685c:	18bb      	adds	r3, r7, r2
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d011      	beq.n	8006888 <minmea_scan+0x308>
                    char *endptr;
                    value = strtol(field, &endptr, 10);
 8006864:	2320      	movs	r3, #32
 8006866:	18f9      	adds	r1, r7, r3
 8006868:	18bb      	adds	r3, r7, r2
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	220a      	movs	r2, #10
 800686e:	0018      	movs	r0, r3
 8006870:	f007 fc98 	bl	800e1a4 <strtol>
 8006874:	0003      	movs	r3, r0
 8006876:	67bb      	str	r3, [r7, #120]	@ 0x78
                    if (minmea_isfield(*endptr))
 8006878:	6a3b      	ldr	r3, [r7, #32]
 800687a:	781b      	ldrb	r3, [r3, #0]
 800687c:	0018      	movs	r0, r3
 800687e:	f7ff fe59 	bl	8006534 <minmea_isfield>
 8006882:	1e03      	subs	r3, r0, #0
 8006884:	d000      	beq.n	8006888 <minmea_scan+0x308>
 8006886:	e1f2      	b.n	8006c6e <minmea_scan+0x6ee>
                        goto parse_error;
                }

                *va_arg(ap, int *) = value;
 8006888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800688a:	1d1a      	adds	r2, r3, #4
 800688c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8006892:	601a      	str	r2, [r3, #0]
            } break;
 8006894:	e1b6      	b.n	8006c04 <minmea_scan+0x684>

            case 's': { // String value (char *).
                char *buf = va_arg(ap, char *);
 8006896:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006898:	1d1a      	adds	r2, r3, #4
 800689a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	677b      	str	r3, [r7, #116]	@ 0x74

                if (field) {
 80068a0:	2390      	movs	r3, #144	@ 0x90
 80068a2:	18fb      	adds	r3, r7, r3
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d014      	beq.n	80068d4 <minmea_scan+0x354>
                    while (minmea_isfield(*field))
 80068aa:	e00a      	b.n	80068c2 <minmea_scan+0x342>
                        *buf++ = *field++;
 80068ac:	2190      	movs	r1, #144	@ 0x90
 80068ae:	187b      	adds	r3, r7, r1
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	1c53      	adds	r3, r2, #1
 80068b4:	1879      	adds	r1, r7, r1
 80068b6:	600b      	str	r3, [r1, #0]
 80068b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80068ba:	1c59      	adds	r1, r3, #1
 80068bc:	6779      	str	r1, [r7, #116]	@ 0x74
 80068be:	7812      	ldrb	r2, [r2, #0]
 80068c0:	701a      	strb	r2, [r3, #0]
                    while (minmea_isfield(*field))
 80068c2:	2390      	movs	r3, #144	@ 0x90
 80068c4:	18fb      	adds	r3, r7, r3
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	781b      	ldrb	r3, [r3, #0]
 80068ca:	0018      	movs	r0, r3
 80068cc:	f7ff fe32 	bl	8006534 <minmea_isfield>
 80068d0:	1e03      	subs	r3, r0, #0
 80068d2:	d1eb      	bne.n	80068ac <minmea_scan+0x32c>
                }

                *buf = '\0';
 80068d4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80068d6:	2200      	movs	r2, #0
 80068d8:	701a      	strb	r2, [r3, #0]
            } break;
 80068da:	e193      	b.n	8006c04 <minmea_scan+0x684>

            case 't': { // NMEA talker+sentence identifier (char *).
                // This field is always mandatory.
                if (!field)
 80068dc:	2290      	movs	r2, #144	@ 0x90
 80068de:	18bb      	adds	r3, r7, r2
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d100      	bne.n	80068e8 <minmea_scan+0x368>
 80068e6:	e1c4      	b.n	8006c72 <minmea_scan+0x6f2>
                    goto parse_error;

                if (field[0] != '$')
 80068e8:	18bb      	adds	r3, r7, r2
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	781b      	ldrb	r3, [r3, #0]
 80068ee:	2b24      	cmp	r3, #36	@ 0x24
 80068f0:	d000      	beq.n	80068f4 <minmea_scan+0x374>
 80068f2:	e1c0      	b.n	8006c76 <minmea_scan+0x6f6>
                    goto parse_error;
                for (int i=0; i<5; i++)
 80068f4:	2300      	movs	r3, #0
 80068f6:	673b      	str	r3, [r7, #112]	@ 0x70
 80068f8:	e01c      	b.n	8006934 <minmea_scan+0x3b4>
 80068fa:	46c0      	nop			@ (mov r8, r8)
 80068fc:	08011510 	.word	0x08011510
 8006900:	080117d0 	.word	0x080117d0
 8006904:	7fffffff 	.word	0x7fffffff
                    if (!minmea_isfield(field[1+i]))
 8006908:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800690a:	3301      	adds	r3, #1
 800690c:	001a      	movs	r2, r3
 800690e:	2390      	movs	r3, #144	@ 0x90
 8006910:	18fb      	adds	r3, r7, r3
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	189b      	adds	r3, r3, r2
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	0018      	movs	r0, r3
 800691a:	f7ff fe0b 	bl	8006534 <minmea_isfield>
 800691e:	0003      	movs	r3, r0
 8006920:	001a      	movs	r2, r3
 8006922:	2301      	movs	r3, #1
 8006924:	4053      	eors	r3, r2
 8006926:	b2db      	uxtb	r3, r3
 8006928:	2b00      	cmp	r3, #0
 800692a:	d000      	beq.n	800692e <minmea_scan+0x3ae>
 800692c:	e1a5      	b.n	8006c7a <minmea_scan+0x6fa>
                for (int i=0; i<5; i++)
 800692e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006930:	3301      	adds	r3, #1
 8006932:	673b      	str	r3, [r7, #112]	@ 0x70
 8006934:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006936:	2b04      	cmp	r3, #4
 8006938:	dde6      	ble.n	8006908 <minmea_scan+0x388>
                        goto parse_error;

                char *buf = va_arg(ap, char *);
 800693a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800693c:	1d1a      	adds	r2, r3, #4
 800693e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	63fb      	str	r3, [r7, #60]	@ 0x3c
                memcpy(buf, field+1, 5);
 8006944:	2390      	movs	r3, #144	@ 0x90
 8006946:	18fb      	adds	r3, r7, r3
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	1c59      	adds	r1, r3, #1
 800694c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800694e:	2205      	movs	r2, #5
 8006950:	0018      	movs	r0, r3
 8006952:	f007 fea8 	bl	800e6a6 <memcpy>
                buf[5] = '\0';
 8006956:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006958:	3305      	adds	r3, #5
 800695a:	2200      	movs	r2, #0
 800695c:	701a      	strb	r2, [r3, #0]
            } break;
 800695e:	e151      	b.n	8006c04 <minmea_scan+0x684>

            case 'D': { // Date (int, int, int), -1 if empty.
                struct minmea_date *date = va_arg(ap, struct minmea_date *);
 8006960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006962:	1d1a      	adds	r2, r3, #4
 8006964:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	633b      	str	r3, [r7, #48]	@ 0x30

                int d = -1, m = -1, y = -1;
 800696a:	2301      	movs	r3, #1
 800696c:	425b      	negs	r3, r3
 800696e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006970:	2301      	movs	r3, #1
 8006972:	425b      	negs	r3, r3
 8006974:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006976:	2301      	movs	r3, #1
 8006978:	425b      	negs	r3, r3
 800697a:	667b      	str	r3, [r7, #100]	@ 0x64

                if (field && minmea_isfield(*field)) {
 800697c:	2290      	movs	r2, #144	@ 0x90
 800697e:	18bb      	adds	r3, r7, r2
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d067      	beq.n	8006a56 <minmea_scan+0x4d6>
 8006986:	18bb      	adds	r3, r7, r2
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	781b      	ldrb	r3, [r3, #0]
 800698c:	0018      	movs	r0, r3
 800698e:	f7ff fdd1 	bl	8006534 <minmea_isfield>
 8006992:	1e03      	subs	r3, r0, #0
 8006994:	d05f      	beq.n	8006a56 <minmea_scan+0x4d6>
                    // Always six digits.
                    for (int i=0; i<6; i++)
 8006996:	2300      	movs	r3, #0
 8006998:	663b      	str	r3, [r7, #96]	@ 0x60
 800699a:	e011      	b.n	80069c0 <minmea_scan+0x440>
                        if (!isdigit((unsigned char) field[i]))
 800699c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800699e:	2290      	movs	r2, #144	@ 0x90
 80069a0:	18ba      	adds	r2, r7, r2
 80069a2:	6812      	ldr	r2, [r2, #0]
 80069a4:	18d3      	adds	r3, r2, r3
 80069a6:	781b      	ldrb	r3, [r3, #0]
 80069a8:	1c5a      	adds	r2, r3, #1
 80069aa:	4bbb      	ldr	r3, [pc, #748]	@ (8006c98 <minmea_scan+0x718>)
 80069ac:	18d3      	adds	r3, r2, r3
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	001a      	movs	r2, r3
 80069b2:	2304      	movs	r3, #4
 80069b4:	4013      	ands	r3, r2
 80069b6:	d100      	bne.n	80069ba <minmea_scan+0x43a>
 80069b8:	e161      	b.n	8006c7e <minmea_scan+0x6fe>
                    for (int i=0; i<6; i++)
 80069ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80069bc:	3301      	adds	r3, #1
 80069be:	663b      	str	r3, [r7, #96]	@ 0x60
 80069c0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80069c2:	2b05      	cmp	r3, #5
 80069c4:	ddea      	ble.n	800699c <minmea_scan+0x41c>
                            goto parse_error;

                    d = strtol((char[]) {field[0], field[1], '\0'}, NULL, 10);
 80069c6:	2490      	movs	r4, #144	@ 0x90
 80069c8:	193b      	adds	r3, r7, r4
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	781a      	ldrb	r2, [r3, #0]
 80069ce:	211c      	movs	r1, #28
 80069d0:	187b      	adds	r3, r7, r1
 80069d2:	701a      	strb	r2, [r3, #0]
 80069d4:	193b      	adds	r3, r7, r4
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	3301      	adds	r3, #1
 80069da:	781a      	ldrb	r2, [r3, #0]
 80069dc:	187b      	adds	r3, r7, r1
 80069de:	705a      	strb	r2, [r3, #1]
 80069e0:	187b      	adds	r3, r7, r1
 80069e2:	2200      	movs	r2, #0
 80069e4:	709a      	strb	r2, [r3, #2]
 80069e6:	187b      	adds	r3, r7, r1
 80069e8:	220a      	movs	r2, #10
 80069ea:	2100      	movs	r1, #0
 80069ec:	0018      	movs	r0, r3
 80069ee:	f007 fbd9 	bl	800e1a4 <strtol>
 80069f2:	0003      	movs	r3, r0
 80069f4:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    m = strtol((char[]) {field[2], field[3], '\0'}, NULL, 10);
 80069f6:	193b      	adds	r3, r7, r4
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	3302      	adds	r3, #2
 80069fc:	781a      	ldrb	r2, [r3, #0]
 80069fe:	2118      	movs	r1, #24
 8006a00:	187b      	adds	r3, r7, r1
 8006a02:	701a      	strb	r2, [r3, #0]
 8006a04:	193b      	adds	r3, r7, r4
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	3303      	adds	r3, #3
 8006a0a:	781a      	ldrb	r2, [r3, #0]
 8006a0c:	187b      	adds	r3, r7, r1
 8006a0e:	705a      	strb	r2, [r3, #1]
 8006a10:	187b      	adds	r3, r7, r1
 8006a12:	2200      	movs	r2, #0
 8006a14:	709a      	strb	r2, [r3, #2]
 8006a16:	187b      	adds	r3, r7, r1
 8006a18:	220a      	movs	r2, #10
 8006a1a:	2100      	movs	r1, #0
 8006a1c:	0018      	movs	r0, r3
 8006a1e:	f007 fbc1 	bl	800e1a4 <strtol>
 8006a22:	0003      	movs	r3, r0
 8006a24:	66bb      	str	r3, [r7, #104]	@ 0x68
                    y = strtol((char[]) {field[4], field[5], '\0'}, NULL, 10);
 8006a26:	193b      	adds	r3, r7, r4
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	3304      	adds	r3, #4
 8006a2c:	781a      	ldrb	r2, [r3, #0]
 8006a2e:	2114      	movs	r1, #20
 8006a30:	187b      	adds	r3, r7, r1
 8006a32:	701a      	strb	r2, [r3, #0]
 8006a34:	193b      	adds	r3, r7, r4
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	3305      	adds	r3, #5
 8006a3a:	781a      	ldrb	r2, [r3, #0]
 8006a3c:	187b      	adds	r3, r7, r1
 8006a3e:	705a      	strb	r2, [r3, #1]
 8006a40:	187b      	adds	r3, r7, r1
 8006a42:	2200      	movs	r2, #0
 8006a44:	709a      	strb	r2, [r3, #2]
 8006a46:	187b      	adds	r3, r7, r1
 8006a48:	220a      	movs	r2, #10
 8006a4a:	2100      	movs	r1, #0
 8006a4c:	0018      	movs	r0, r3
 8006a4e:	f007 fba9 	bl	800e1a4 <strtol>
 8006a52:	0003      	movs	r3, r0
 8006a54:	667b      	str	r3, [r7, #100]	@ 0x64
                }

                date->day = d;
 8006a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a58:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006a5a:	601a      	str	r2, [r3, #0]
                date->month = m;
 8006a5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a5e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006a60:	605a      	str	r2, [r3, #4]
                date->year = y;
 8006a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a64:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006a66:	609a      	str	r2, [r3, #8]
            } break;
 8006a68:	e0cc      	b.n	8006c04 <minmea_scan+0x684>

            case 'T': { // Time (int, int, int, int), -1 if empty.
                struct minmea_time *time = va_arg(ap, struct minmea_time *);
 8006a6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a6c:	1d1a      	adds	r2, r3, #4
 8006a6e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	637b      	str	r3, [r7, #52]	@ 0x34

                int h = -1, i = -1, s = -1, u = -1;
 8006a74:	2301      	movs	r3, #1
 8006a76:	425b      	negs	r3, r3
 8006a78:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	425b      	negs	r3, r3
 8006a7e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006a80:	2301      	movs	r3, #1
 8006a82:	425b      	negs	r3, r3
 8006a84:	657b      	str	r3, [r7, #84]	@ 0x54
 8006a86:	2301      	movs	r3, #1
 8006a88:	425b      	negs	r3, r3
 8006a8a:	653b      	str	r3, [r7, #80]	@ 0x50

                if (field && minmea_isfield(*field)) {
 8006a8c:	2290      	movs	r2, #144	@ 0x90
 8006a8e:	18bb      	adds	r3, r7, r2
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d100      	bne.n	8006a98 <minmea_scan+0x518>
 8006a96:	e0a7      	b.n	8006be8 <minmea_scan+0x668>
 8006a98:	18bb      	adds	r3, r7, r2
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	781b      	ldrb	r3, [r3, #0]
 8006a9e:	0018      	movs	r0, r3
 8006aa0:	f7ff fd48 	bl	8006534 <minmea_isfield>
 8006aa4:	1e03      	subs	r3, r0, #0
 8006aa6:	d100      	bne.n	8006aaa <minmea_scan+0x52a>
 8006aa8:	e09e      	b.n	8006be8 <minmea_scan+0x668>
                    // Minimum required: integer time.
                    for (int i=0; i<6; i++)
 8006aaa:	2300      	movs	r3, #0
 8006aac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006aae:	e011      	b.n	8006ad4 <minmea_scan+0x554>
                        if (!isdigit((unsigned char) field[i]))
 8006ab0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ab2:	2290      	movs	r2, #144	@ 0x90
 8006ab4:	18ba      	adds	r2, r7, r2
 8006ab6:	6812      	ldr	r2, [r2, #0]
 8006ab8:	18d3      	adds	r3, r2, r3
 8006aba:	781b      	ldrb	r3, [r3, #0]
 8006abc:	1c5a      	adds	r2, r3, #1
 8006abe:	4b76      	ldr	r3, [pc, #472]	@ (8006c98 <minmea_scan+0x718>)
 8006ac0:	18d3      	adds	r3, r2, r3
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	001a      	movs	r2, r3
 8006ac6:	2304      	movs	r3, #4
 8006ac8:	4013      	ands	r3, r2
 8006aca:	d100      	bne.n	8006ace <minmea_scan+0x54e>
 8006acc:	e0d9      	b.n	8006c82 <minmea_scan+0x702>
                    for (int i=0; i<6; i++)
 8006ace:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ad0:	3301      	adds	r3, #1
 8006ad2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ad4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ad6:	2b05      	cmp	r3, #5
 8006ad8:	ddea      	ble.n	8006ab0 <minmea_scan+0x530>
                            goto parse_error;

                    h = strtol((char[]) {field[0], field[1], '\0'}, NULL, 10);
 8006ada:	2490      	movs	r4, #144	@ 0x90
 8006adc:	193b      	adds	r3, r7, r4
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	781a      	ldrb	r2, [r3, #0]
 8006ae2:	2110      	movs	r1, #16
 8006ae4:	187b      	adds	r3, r7, r1
 8006ae6:	701a      	strb	r2, [r3, #0]
 8006ae8:	193b      	adds	r3, r7, r4
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	3301      	adds	r3, #1
 8006aee:	781a      	ldrb	r2, [r3, #0]
 8006af0:	187b      	adds	r3, r7, r1
 8006af2:	705a      	strb	r2, [r3, #1]
 8006af4:	187b      	adds	r3, r7, r1
 8006af6:	2200      	movs	r2, #0
 8006af8:	709a      	strb	r2, [r3, #2]
 8006afa:	187b      	adds	r3, r7, r1
 8006afc:	220a      	movs	r2, #10
 8006afe:	2100      	movs	r1, #0
 8006b00:	0018      	movs	r0, r3
 8006b02:	f007 fb4f 	bl	800e1a4 <strtol>
 8006b06:	0003      	movs	r3, r0
 8006b08:	65fb      	str	r3, [r7, #92]	@ 0x5c
                    i = strtol((char[]) {field[2], field[3], '\0'}, NULL, 10);
 8006b0a:	193b      	adds	r3, r7, r4
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	3302      	adds	r3, #2
 8006b10:	781a      	ldrb	r2, [r3, #0]
 8006b12:	210c      	movs	r1, #12
 8006b14:	187b      	adds	r3, r7, r1
 8006b16:	701a      	strb	r2, [r3, #0]
 8006b18:	193b      	adds	r3, r7, r4
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	3303      	adds	r3, #3
 8006b1e:	781a      	ldrb	r2, [r3, #0]
 8006b20:	187b      	adds	r3, r7, r1
 8006b22:	705a      	strb	r2, [r3, #1]
 8006b24:	187b      	adds	r3, r7, r1
 8006b26:	2200      	movs	r2, #0
 8006b28:	709a      	strb	r2, [r3, #2]
 8006b2a:	187b      	adds	r3, r7, r1
 8006b2c:	220a      	movs	r2, #10
 8006b2e:	2100      	movs	r1, #0
 8006b30:	0018      	movs	r0, r3
 8006b32:	f007 fb37 	bl	800e1a4 <strtol>
 8006b36:	0003      	movs	r3, r0
 8006b38:	65bb      	str	r3, [r7, #88]	@ 0x58
                    s = strtol((char[]) {field[4], field[5], '\0'}, NULL, 10);
 8006b3a:	193b      	adds	r3, r7, r4
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	3304      	adds	r3, #4
 8006b40:	781a      	ldrb	r2, [r3, #0]
 8006b42:	2108      	movs	r1, #8
 8006b44:	187b      	adds	r3, r7, r1
 8006b46:	701a      	strb	r2, [r3, #0]
 8006b48:	193b      	adds	r3, r7, r4
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	3305      	adds	r3, #5
 8006b4e:	781a      	ldrb	r2, [r3, #0]
 8006b50:	187b      	adds	r3, r7, r1
 8006b52:	705a      	strb	r2, [r3, #1]
 8006b54:	187b      	adds	r3, r7, r1
 8006b56:	2200      	movs	r2, #0
 8006b58:	709a      	strb	r2, [r3, #2]
 8006b5a:	187b      	adds	r3, r7, r1
 8006b5c:	220a      	movs	r2, #10
 8006b5e:	2100      	movs	r1, #0
 8006b60:	0018      	movs	r0, r3
 8006b62:	f007 fb1f 	bl	800e1a4 <strtol>
 8006b66:	0003      	movs	r3, r0
 8006b68:	657b      	str	r3, [r7, #84]	@ 0x54
                    field += 6;
 8006b6a:	193b      	adds	r3, r7, r4
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	3306      	adds	r3, #6
 8006b70:	193a      	adds	r2, r7, r4
 8006b72:	6013      	str	r3, [r2, #0]

                    // Extra: fractional time. Saved as microseconds.
                    if (*field++ == '.') {
 8006b74:	193b      	adds	r3, r7, r4
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	1c5a      	adds	r2, r3, #1
 8006b7a:	1939      	adds	r1, r7, r4
 8006b7c:	600a      	str	r2, [r1, #0]
 8006b7e:	781b      	ldrb	r3, [r3, #0]
 8006b80:	2b2e      	cmp	r3, #46	@ 0x2e
 8006b82:	d12f      	bne.n	8006be4 <minmea_scan+0x664>
                        int value = 0;
 8006b84:	2300      	movs	r3, #0
 8006b86:	64bb      	str	r3, [r7, #72]	@ 0x48
                        int scale = 1000000;
 8006b88:	4b44      	ldr	r3, [pc, #272]	@ (8006c9c <minmea_scan+0x71c>)
 8006b8a:	647b      	str	r3, [r7, #68]	@ 0x44
                        while (isdigit((unsigned char) *field) && scale > 1) {
 8006b8c:	e016      	b.n	8006bbc <minmea_scan+0x63c>
                            value = (value * 10) + (*field++ - '0');
 8006b8e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b90:	0013      	movs	r3, r2
 8006b92:	009b      	lsls	r3, r3, #2
 8006b94:	189b      	adds	r3, r3, r2
 8006b96:	005b      	lsls	r3, r3, #1
 8006b98:	0019      	movs	r1, r3
 8006b9a:	2090      	movs	r0, #144	@ 0x90
 8006b9c:	183b      	adds	r3, r7, r0
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	1c5a      	adds	r2, r3, #1
 8006ba2:	1838      	adds	r0, r7, r0
 8006ba4:	6002      	str	r2, [r0, #0]
 8006ba6:	781b      	ldrb	r3, [r3, #0]
 8006ba8:	3b30      	subs	r3, #48	@ 0x30
 8006baa:	18cb      	adds	r3, r1, r3
 8006bac:	64bb      	str	r3, [r7, #72]	@ 0x48
                            scale /= 10;
 8006bae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006bb0:	210a      	movs	r1, #10
 8006bb2:	0018      	movs	r0, r3
 8006bb4:	f7f9 fb56 	bl	8000264 <__divsi3>
 8006bb8:	0003      	movs	r3, r0
 8006bba:	647b      	str	r3, [r7, #68]	@ 0x44
                        while (isdigit((unsigned char) *field) && scale > 1) {
 8006bbc:	2390      	movs	r3, #144	@ 0x90
 8006bbe:	18fb      	adds	r3, r7, r3
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	781b      	ldrb	r3, [r3, #0]
 8006bc4:	1c5a      	adds	r2, r3, #1
 8006bc6:	4b34      	ldr	r3, [pc, #208]	@ (8006c98 <minmea_scan+0x718>)
 8006bc8:	18d3      	adds	r3, r2, r3
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	001a      	movs	r2, r3
 8006bce:	2304      	movs	r3, #4
 8006bd0:	4013      	ands	r3, r2
 8006bd2:	d002      	beq.n	8006bda <minmea_scan+0x65a>
 8006bd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006bd6:	2b01      	cmp	r3, #1
 8006bd8:	dcd9      	bgt.n	8006b8e <minmea_scan+0x60e>
                        }
                        u = value * scale;
 8006bda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006bdc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006bde:	4353      	muls	r3, r2
 8006be0:	653b      	str	r3, [r7, #80]	@ 0x50
 8006be2:	e001      	b.n	8006be8 <minmea_scan+0x668>
                    } else {
                        u = 0;
 8006be4:	2300      	movs	r3, #0
 8006be6:	653b      	str	r3, [r7, #80]	@ 0x50
                    }
                }

                time->hours = h;
 8006be8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bea:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006bec:	601a      	str	r2, [r3, #0]
                time->minutes = i;
 8006bee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bf0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006bf2:	605a      	str	r2, [r3, #4]
                time->seconds = s;
 8006bf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bf6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006bf8:	609a      	str	r2, [r3, #8]
                time->microseconds = u;
 8006bfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bfc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006bfe:	60da      	str	r2, [r3, #12]
            } break;
 8006c00:	e000      	b.n	8006c04 <minmea_scan+0x684>

            case '_': { // Ignore the field.
            } break;
 8006c02:	46c0      	nop			@ (mov r8, r8)
            default: { // Unknown.
                goto parse_error;
            } break;
        }

        next_field();
 8006c04:	e002      	b.n	8006c0c <minmea_scan+0x68c>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	3301      	adds	r3, #1
 8006c0a:	607b      	str	r3, [r7, #4]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	781b      	ldrb	r3, [r3, #0]
 8006c10:	0018      	movs	r0, r3
 8006c12:	f7ff fc8f 	bl	8006534 <minmea_isfield>
 8006c16:	1e03      	subs	r3, r0, #0
 8006c18:	d1f5      	bne.n	8006c06 <minmea_scan+0x686>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	781b      	ldrb	r3, [r3, #0]
 8006c1e:	2b2c      	cmp	r3, #44	@ 0x2c
 8006c20:	d107      	bne.n	8006c32 <minmea_scan+0x6b2>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	3301      	adds	r3, #1
 8006c26:	607b      	str	r3, [r7, #4]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2290      	movs	r2, #144	@ 0x90
 8006c2c:	18ba      	adds	r2, r7, r2
 8006c2e:	6013      	str	r3, [r2, #0]
 8006c30:	e003      	b.n	8006c3a <minmea_scan+0x6ba>
 8006c32:	2300      	movs	r3, #0
 8006c34:	2290      	movs	r2, #144	@ 0x90
 8006c36:	18ba      	adds	r2, r7, r2
 8006c38:	6013      	str	r3, [r2, #0]
    while (*format) {
 8006c3a:	23a4      	movs	r3, #164	@ 0xa4
 8006c3c:	2208      	movs	r2, #8
 8006c3e:	189b      	adds	r3, r3, r2
 8006c40:	19db      	adds	r3, r3, r7
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d000      	beq.n	8006c4c <minmea_scan+0x6cc>
 8006c4a:	e4b0      	b.n	80065ae <minmea_scan+0x2e>
    }

    result = true;
 8006c4c:	2397      	movs	r3, #151	@ 0x97
 8006c4e:	18fb      	adds	r3, r7, r3
 8006c50:	2201      	movs	r2, #1
 8006c52:	701a      	strb	r2, [r3, #0]
 8006c54:	e016      	b.n	8006c84 <minmea_scan+0x704>
            goto parse_error;
 8006c56:	46c0      	nop			@ (mov r8, r8)
 8006c58:	e014      	b.n	8006c84 <minmea_scan+0x704>
                goto parse_error;
 8006c5a:	46c0      	nop			@ (mov r8, r8)
 8006c5c:	e012      	b.n	8006c84 <minmea_scan+0x704>
                            goto parse_error;
 8006c5e:	46c0      	nop			@ (mov r8, r8)
 8006c60:	e010      	b.n	8006c84 <minmea_scan+0x704>
                                    goto parse_error;
 8006c62:	46c0      	nop			@ (mov r8, r8)
 8006c64:	e00e      	b.n	8006c84 <minmea_scan+0x704>
                            goto parse_error;
 8006c66:	46c0      	nop			@ (mov r8, r8)
 8006c68:	e00c      	b.n	8006c84 <minmea_scan+0x704>
                    goto parse_error;
 8006c6a:	46c0      	nop			@ (mov r8, r8)
 8006c6c:	e00a      	b.n	8006c84 <minmea_scan+0x704>
                        goto parse_error;
 8006c6e:	46c0      	nop			@ (mov r8, r8)
 8006c70:	e008      	b.n	8006c84 <minmea_scan+0x704>
                    goto parse_error;
 8006c72:	46c0      	nop			@ (mov r8, r8)
 8006c74:	e006      	b.n	8006c84 <minmea_scan+0x704>
                    goto parse_error;
 8006c76:	46c0      	nop			@ (mov r8, r8)
 8006c78:	e004      	b.n	8006c84 <minmea_scan+0x704>
                        goto parse_error;
 8006c7a:	46c0      	nop			@ (mov r8, r8)
 8006c7c:	e002      	b.n	8006c84 <minmea_scan+0x704>
                            goto parse_error;
 8006c7e:	46c0      	nop			@ (mov r8, r8)
 8006c80:	e000      	b.n	8006c84 <minmea_scan+0x704>
                            goto parse_error;
 8006c82:	46c0      	nop			@ (mov r8, r8)

parse_error:
    va_end(ap);
    return result;
 8006c84:	2397      	movs	r3, #151	@ 0x97
 8006c86:	18fb      	adds	r3, r7, r3
 8006c88:	781b      	ldrb	r3, [r3, #0]
}
 8006c8a:	0018      	movs	r0, r3
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	b027      	add	sp, #156	@ 0x9c
 8006c90:	bcb0      	pop	{r4, r5, r7}
 8006c92:	bc08      	pop	{r3}
 8006c94:	b003      	add	sp, #12
 8006c96:	4718      	bx	r3
 8006c98:	080117d0 	.word	0x080117d0
 8006c9c:	000f4240 	.word	0x000f4240

08006ca0 <minmea_parse_gga>:

    return true;
}

bool minmea_parse_gga(struct minmea_sentence_gga *frame, const char *sentence)
{
 8006ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ca2:	46de      	mov	lr, fp
 8006ca4:	4657      	mov	r7, sl
 8006ca6:	464e      	mov	r6, r9
 8006ca8:	4645      	mov	r5, r8
 8006caa:	b5e0      	push	{r5, r6, r7, lr}
 8006cac:	b097      	sub	sp, #92	@ 0x5c
 8006cae:	af0c      	add	r7, sp, #48	@ 0x30
 8006cb0:	6178      	str	r0, [r7, #20]
 8006cb2:	6139      	str	r1, [r7, #16]
    // $GPGGA,123519,4807.038,N,01131.000,E,1,08,0.9,545.4,M,46.9,M,,*47
    char type[6];
    int latitude_direction;
    int longitude_direction;

    if (!minmea_scan(sentence, "tTfdfdiiffcfci_",
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	60fb      	str	r3, [r7, #12]
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	001a      	movs	r2, r3
 8006cbc:	3210      	adds	r2, #16
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	0019      	movs	r1, r3
 8006cc2:	3118      	adds	r1, #24
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	001c      	movs	r4, r3
 8006cc8:	3420      	adds	r4, #32
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	001d      	movs	r5, r3
 8006cce:	3524      	adds	r5, #36	@ 0x24
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	001e      	movs	r6, r3
 8006cd4:	3628      	adds	r6, #40	@ 0x28
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	2030      	movs	r0, #48	@ 0x30
 8006cda:	4684      	mov	ip, r0
 8006cdc:	449c      	add	ip, r3
 8006cde:	4663      	mov	r3, ip
 8006ce0:	607b      	str	r3, [r7, #4]
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	2038      	movs	r0, #56	@ 0x38
 8006ce6:	4680      	mov	r8, r0
 8006ce8:	4498      	add	r8, r3
 8006cea:	4643      	mov	r3, r8
 8006cec:	603b      	str	r3, [r7, #0]
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	203c      	movs	r0, #60	@ 0x3c
 8006cf2:	4681      	mov	r9, r0
 8006cf4:	4499      	add	r9, r3
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	2044      	movs	r0, #68	@ 0x44
 8006cfa:	4682      	mov	sl, r0
 8006cfc:	449a      	add	sl, r3
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	3348      	adds	r3, #72	@ 0x48
 8006d02:	2010      	movs	r0, #16
 8006d04:	4683      	mov	fp, r0
 8006d06:	2008      	movs	r0, #8
 8006d08:	4684      	mov	ip, r0
 8006d0a:	2008      	movs	r0, #8
 8006d0c:	4680      	mov	r8, r0
 8006d0e:	44b8      	add	r8, r7
 8006d10:	44c4      	add	ip, r8
 8006d12:	44e3      	add	fp, ip
 8006d14:	4658      	mov	r0, fp
 8006d16:	60b8      	str	r0, [r7, #8]
 8006d18:	482a      	ldr	r0, [pc, #168]	@ (8006dc4 <minmea_parse_gga+0x124>)
 8006d1a:	4683      	mov	fp, r0
 8006d1c:	6938      	ldr	r0, [r7, #16]
 8006d1e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006d20:	4653      	mov	r3, sl
 8006d22:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d24:	464b      	mov	r3, r9
 8006d26:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	9308      	str	r3, [sp, #32]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	9307      	str	r3, [sp, #28]
 8006d30:	9606      	str	r6, [sp, #24]
 8006d32:	9505      	str	r5, [sp, #20]
 8006d34:	9404      	str	r4, [sp, #16]
 8006d36:	2408      	movs	r4, #8
 8006d38:	2508      	movs	r5, #8
 8006d3a:	1963      	adds	r3, r4, r5
 8006d3c:	2408      	movs	r4, #8
 8006d3e:	46a4      	mov	ip, r4
 8006d40:	44bc      	add	ip, r7
 8006d42:	4463      	add	r3, ip
 8006d44:	9303      	str	r3, [sp, #12]
 8006d46:	9102      	str	r1, [sp, #8]
 8006d48:	210c      	movs	r1, #12
 8006d4a:	194b      	adds	r3, r1, r5
 8006d4c:	2108      	movs	r1, #8
 8006d4e:	468c      	mov	ip, r1
 8006d50:	44bc      	add	ip, r7
 8006d52:	4463      	add	r3, ip
 8006d54:	9301      	str	r3, [sp, #4]
 8006d56:	9200      	str	r2, [sp, #0]
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	68ba      	ldr	r2, [r7, #8]
 8006d5c:	4659      	mov	r1, fp
 8006d5e:	f7ff fc0f 	bl	8006580 <minmea_scan>
 8006d62:	0003      	movs	r3, r0
 8006d64:	001a      	movs	r2, r3
 8006d66:	2301      	movs	r3, #1
 8006d68:	4053      	eors	r3, r2
 8006d6a:	b2db      	uxtb	r3, r3
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d001      	beq.n	8006d74 <minmea_parse_gga+0xd4>
            &frame->satellites_tracked,
            &frame->hdop,
            &frame->altitude, &frame->altitude_units,
            &frame->height, &frame->height_units,
            &frame->dgps_age))
        return false;
 8006d70:	2300      	movs	r3, #0
 8006d72:	e01d      	b.n	8006db0 <minmea_parse_gga+0x110>
    if (strcmp(type+2, "GGA"))
 8006d74:	2310      	movs	r3, #16
 8006d76:	2208      	movs	r2, #8
 8006d78:	189b      	adds	r3, r3, r2
 8006d7a:	2208      	movs	r2, #8
 8006d7c:	4694      	mov	ip, r2
 8006d7e:	44bc      	add	ip, r7
 8006d80:	4463      	add	r3, ip
 8006d82:	3302      	adds	r3, #2
 8006d84:	4a10      	ldr	r2, [pc, #64]	@ (8006dc8 <minmea_parse_gga+0x128>)
 8006d86:	0011      	movs	r1, r2
 8006d88:	0018      	movs	r0, r3
 8006d8a:	f7f9 f9bb 	bl	8000104 <strcmp>
 8006d8e:	1e03      	subs	r3, r0, #0
 8006d90:	d001      	beq.n	8006d96 <minmea_parse_gga+0xf6>
        return false;
 8006d92:	2300      	movs	r3, #0
 8006d94:	e00c      	b.n	8006db0 <minmea_parse_gga+0x110>

    frame->latitude.value *= latitude_direction;
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	691b      	ldr	r3, [r3, #16]
 8006d9a:	69fa      	ldr	r2, [r7, #28]
 8006d9c:	435a      	muls	r2, r3
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	611a      	str	r2, [r3, #16]
    frame->longitude.value *= longitude_direction;
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	699b      	ldr	r3, [r3, #24]
 8006da6:	69ba      	ldr	r2, [r7, #24]
 8006da8:	435a      	muls	r2, r3
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	619a      	str	r2, [r3, #24]

    return true;
 8006dae:	2301      	movs	r3, #1
}
 8006db0:	0018      	movs	r0, r3
 8006db2:	46bd      	mov	sp, r7
 8006db4:	b00b      	add	sp, #44	@ 0x2c
 8006db6:	bcf0      	pop	{r4, r5, r6, r7}
 8006db8:	46bb      	mov	fp, r7
 8006dba:	46b2      	mov	sl, r6
 8006dbc:	46a9      	mov	r9, r5
 8006dbe:	46a0      	mov	r8, r4
 8006dc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006dc2:	46c0      	nop			@ (mov r8, r8)
 8006dc4:	08010e5c 	.word	0x08010e5c
 8006dc8:	08010e3c 	.word	0x08010e3c

08006dcc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b082      	sub	sp, #8
 8006dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006dd2:	4b11      	ldr	r3, [pc, #68]	@ (8006e18 <HAL_MspInit+0x4c>)
 8006dd4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006dd6:	4b10      	ldr	r3, [pc, #64]	@ (8006e18 <HAL_MspInit+0x4c>)
 8006dd8:	2101      	movs	r1, #1
 8006dda:	430a      	orrs	r2, r1
 8006ddc:	641a      	str	r2, [r3, #64]	@ 0x40
 8006dde:	4b0e      	ldr	r3, [pc, #56]	@ (8006e18 <HAL_MspInit+0x4c>)
 8006de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006de2:	2201      	movs	r2, #1
 8006de4:	4013      	ands	r3, r2
 8006de6:	607b      	str	r3, [r7, #4]
 8006de8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006dea:	4b0b      	ldr	r3, [pc, #44]	@ (8006e18 <HAL_MspInit+0x4c>)
 8006dec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006dee:	4b0a      	ldr	r3, [pc, #40]	@ (8006e18 <HAL_MspInit+0x4c>)
 8006df0:	2180      	movs	r1, #128	@ 0x80
 8006df2:	0549      	lsls	r1, r1, #21
 8006df4:	430a      	orrs	r2, r1
 8006df6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006df8:	4b07      	ldr	r3, [pc, #28]	@ (8006e18 <HAL_MspInit+0x4c>)
 8006dfa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006dfc:	2380      	movs	r3, #128	@ 0x80
 8006dfe:	055b      	lsls	r3, r3, #21
 8006e00:	4013      	ands	r3, r2
 8006e02:	603b      	str	r3, [r7, #0]
 8006e04:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8006e06:	23c0      	movs	r3, #192	@ 0xc0
 8006e08:	00db      	lsls	r3, r3, #3
 8006e0a:	0018      	movs	r0, r3
 8006e0c:	f001 f948 	bl	80080a0 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006e10:	46c0      	nop			@ (mov r8, r8)
 8006e12:	46bd      	mov	sp, r7
 8006e14:	b002      	add	sp, #8
 8006e16:	bd80      	pop	{r7, pc}
 8006e18:	40021000 	.word	0x40021000

08006e1c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006e1c:	b590      	push	{r4, r7, lr}
 8006e1e:	b09d      	sub	sp, #116	@ 0x74
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e24:	235c      	movs	r3, #92	@ 0x5c
 8006e26:	18fb      	adds	r3, r7, r3
 8006e28:	0018      	movs	r0, r3
 8006e2a:	2314      	movs	r3, #20
 8006e2c:	001a      	movs	r2, r3
 8006e2e:	2100      	movs	r1, #0
 8006e30:	f007 fba4 	bl	800e57c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006e34:	2410      	movs	r4, #16
 8006e36:	193b      	adds	r3, r7, r4
 8006e38:	0018      	movs	r0, r3
 8006e3a:	234c      	movs	r3, #76	@ 0x4c
 8006e3c:	001a      	movs	r2, r3
 8006e3e:	2100      	movs	r1, #0
 8006e40:	f007 fb9c 	bl	800e57c <memset>
  if(hi2c->Instance==I2C1)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a23      	ldr	r2, [pc, #140]	@ (8006ed8 <HAL_I2C_MspInit+0xbc>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d13f      	bne.n	8006ece <HAL_I2C_MspInit+0xb2>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8006e4e:	193b      	adds	r3, r7, r4
 8006e50:	2220      	movs	r2, #32
 8006e52:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8006e54:	193b      	adds	r3, r7, r4
 8006e56:	2200      	movs	r2, #0
 8006e58:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006e5a:	193b      	adds	r3, r7, r4
 8006e5c:	0018      	movs	r0, r3
 8006e5e:	f002 ff87 	bl	8009d70 <HAL_RCCEx_PeriphCLKConfig>
 8006e62:	1e03      	subs	r3, r0, #0
 8006e64:	d001      	beq.n	8006e6a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8006e66:	f7ff fb5f 	bl	8006528 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006e6a:	4b1c      	ldr	r3, [pc, #112]	@ (8006edc <HAL_I2C_MspInit+0xc0>)
 8006e6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e6e:	4b1b      	ldr	r3, [pc, #108]	@ (8006edc <HAL_I2C_MspInit+0xc0>)
 8006e70:	2101      	movs	r1, #1
 8006e72:	430a      	orrs	r2, r1
 8006e74:	635a      	str	r2, [r3, #52]	@ 0x34
 8006e76:	4b19      	ldr	r3, [pc, #100]	@ (8006edc <HAL_I2C_MspInit+0xc0>)
 8006e78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	4013      	ands	r3, r2
 8006e7e:	60fb      	str	r3, [r7, #12]
 8006e80:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8006e82:	215c      	movs	r1, #92	@ 0x5c
 8006e84:	187b      	adds	r3, r7, r1
 8006e86:	22c0      	movs	r2, #192	@ 0xc0
 8006e88:	00d2      	lsls	r2, r2, #3
 8006e8a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006e8c:	187b      	adds	r3, r7, r1
 8006e8e:	2212      	movs	r2, #18
 8006e90:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e92:	187b      	adds	r3, r7, r1
 8006e94:	2200      	movs	r2, #0
 8006e96:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e98:	187b      	adds	r3, r7, r1
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8006e9e:	187b      	adds	r3, r7, r1
 8006ea0:	2206      	movs	r2, #6
 8006ea2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ea4:	187a      	adds	r2, r7, r1
 8006ea6:	23a0      	movs	r3, #160	@ 0xa0
 8006ea8:	05db      	lsls	r3, r3, #23
 8006eaa:	0011      	movs	r1, r2
 8006eac:	0018      	movs	r0, r3
 8006eae:	f001 f9eb 	bl	8008288 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006eb2:	4b0a      	ldr	r3, [pc, #40]	@ (8006edc <HAL_I2C_MspInit+0xc0>)
 8006eb4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006eb6:	4b09      	ldr	r3, [pc, #36]	@ (8006edc <HAL_I2C_MspInit+0xc0>)
 8006eb8:	2180      	movs	r1, #128	@ 0x80
 8006eba:	0389      	lsls	r1, r1, #14
 8006ebc:	430a      	orrs	r2, r1
 8006ebe:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006ec0:	4b06      	ldr	r3, [pc, #24]	@ (8006edc <HAL_I2C_MspInit+0xc0>)
 8006ec2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006ec4:	2380      	movs	r3, #128	@ 0x80
 8006ec6:	039b      	lsls	r3, r3, #14
 8006ec8:	4013      	ands	r3, r2
 8006eca:	60bb      	str	r3, [r7, #8]
 8006ecc:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8006ece:	46c0      	nop			@ (mov r8, r8)
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	b01d      	add	sp, #116	@ 0x74
 8006ed4:	bd90      	pop	{r4, r7, pc}
 8006ed6:	46c0      	nop			@ (mov r8, r8)
 8006ed8:	40005400 	.word	0x40005400
 8006edc:	40021000 	.word	0x40021000

08006ee0 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8006ee0:	b590      	push	{r4, r7, lr}
 8006ee2:	b097      	sub	sp, #92	@ 0x5c
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006ee8:	240c      	movs	r4, #12
 8006eea:	193b      	adds	r3, r7, r4
 8006eec:	0018      	movs	r0, r3
 8006eee:	234c      	movs	r3, #76	@ 0x4c
 8006ef0:	001a      	movs	r2, r3
 8006ef2:	2100      	movs	r1, #0
 8006ef4:	f007 fb42 	bl	800e57c <memset>
  if(hrtc->Instance==RTC)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a19      	ldr	r2, [pc, #100]	@ (8006f64 <HAL_RTC_MspInit+0x84>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d12c      	bne.n	8006f5c <HAL_RTC_MspInit+0x7c>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8006f02:	193b      	adds	r3, r7, r4
 8006f04:	2280      	movs	r2, #128	@ 0x80
 8006f06:	0292      	lsls	r2, r2, #10
 8006f08:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8006f0a:	193b      	adds	r3, r7, r4
 8006f0c:	2280      	movs	r2, #128	@ 0x80
 8006f0e:	0092      	lsls	r2, r2, #2
 8006f10:	641a      	str	r2, [r3, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006f12:	193b      	adds	r3, r7, r4
 8006f14:	0018      	movs	r0, r3
 8006f16:	f002 ff2b 	bl	8009d70 <HAL_RCCEx_PeriphCLKConfig>
 8006f1a:	1e03      	subs	r3, r0, #0
 8006f1c:	d001      	beq.n	8006f22 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8006f1e:	f7ff fb03 	bl	8006528 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8006f22:	4b11      	ldr	r3, [pc, #68]	@ (8006f68 <HAL_RTC_MspInit+0x88>)
 8006f24:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006f26:	4b10      	ldr	r3, [pc, #64]	@ (8006f68 <HAL_RTC_MspInit+0x88>)
 8006f28:	2180      	movs	r1, #128	@ 0x80
 8006f2a:	0209      	lsls	r1, r1, #8
 8006f2c:	430a      	orrs	r2, r1
 8006f2e:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8006f30:	4b0d      	ldr	r3, [pc, #52]	@ (8006f68 <HAL_RTC_MspInit+0x88>)
 8006f32:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006f34:	4b0c      	ldr	r3, [pc, #48]	@ (8006f68 <HAL_RTC_MspInit+0x88>)
 8006f36:	2180      	movs	r1, #128	@ 0x80
 8006f38:	00c9      	lsls	r1, r1, #3
 8006f3a:	430a      	orrs	r2, r1
 8006f3c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006f3e:	4b0a      	ldr	r3, [pc, #40]	@ (8006f68 <HAL_RTC_MspInit+0x88>)
 8006f40:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006f42:	2380      	movs	r3, #128	@ 0x80
 8006f44:	00db      	lsls	r3, r3, #3
 8006f46:	4013      	ands	r3, r2
 8006f48:	60bb      	str	r3, [r7, #8]
 8006f4a:	68bb      	ldr	r3, [r7, #8]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	2100      	movs	r1, #0
 8006f50:	2002      	movs	r0, #2
 8006f52:	f001 f967 	bl	8008224 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 8006f56:	2002      	movs	r0, #2
 8006f58:	f001 f979 	bl	800824e <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8006f5c:	46c0      	nop			@ (mov r8, r8)
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	b017      	add	sp, #92	@ 0x5c
 8006f62:	bd90      	pop	{r4, r7, pc}
 8006f64:	40002800 	.word	0x40002800
 8006f68:	40021000 	.word	0x40021000

08006f6c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006f6c:	b590      	push	{r4, r7, lr}
 8006f6e:	b08b      	sub	sp, #44	@ 0x2c
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f74:	2414      	movs	r4, #20
 8006f76:	193b      	adds	r3, r7, r4
 8006f78:	0018      	movs	r0, r3
 8006f7a:	2314      	movs	r3, #20
 8006f7c:	001a      	movs	r2, r3
 8006f7e:	2100      	movs	r1, #0
 8006f80:	f007 fafc 	bl	800e57c <memset>
  if(hspi->Instance==SPI1)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a2c      	ldr	r2, [pc, #176]	@ (800703c <HAL_SPI_MspInit+0xd0>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d151      	bne.n	8007032 <HAL_SPI_MspInit+0xc6>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006f8e:	4b2c      	ldr	r3, [pc, #176]	@ (8007040 <HAL_SPI_MspInit+0xd4>)
 8006f90:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006f92:	4b2b      	ldr	r3, [pc, #172]	@ (8007040 <HAL_SPI_MspInit+0xd4>)
 8006f94:	2180      	movs	r1, #128	@ 0x80
 8006f96:	0149      	lsls	r1, r1, #5
 8006f98:	430a      	orrs	r2, r1
 8006f9a:	641a      	str	r2, [r3, #64]	@ 0x40
 8006f9c:	4b28      	ldr	r3, [pc, #160]	@ (8007040 <HAL_SPI_MspInit+0xd4>)
 8006f9e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006fa0:	2380      	movs	r3, #128	@ 0x80
 8006fa2:	015b      	lsls	r3, r3, #5
 8006fa4:	4013      	ands	r3, r2
 8006fa6:	613b      	str	r3, [r7, #16]
 8006fa8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006faa:	4b25      	ldr	r3, [pc, #148]	@ (8007040 <HAL_SPI_MspInit+0xd4>)
 8006fac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006fae:	4b24      	ldr	r3, [pc, #144]	@ (8007040 <HAL_SPI_MspInit+0xd4>)
 8006fb0:	2101      	movs	r1, #1
 8006fb2:	430a      	orrs	r2, r1
 8006fb4:	635a      	str	r2, [r3, #52]	@ 0x34
 8006fb6:	4b22      	ldr	r3, [pc, #136]	@ (8007040 <HAL_SPI_MspInit+0xd4>)
 8006fb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fba:	2201      	movs	r2, #1
 8006fbc:	4013      	ands	r3, r2
 8006fbe:	60fb      	str	r3, [r7, #12]
 8006fc0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006fc2:	4b1f      	ldr	r3, [pc, #124]	@ (8007040 <HAL_SPI_MspInit+0xd4>)
 8006fc4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006fc6:	4b1e      	ldr	r3, [pc, #120]	@ (8007040 <HAL_SPI_MspInit+0xd4>)
 8006fc8:	2108      	movs	r1, #8
 8006fca:	430a      	orrs	r2, r1
 8006fcc:	635a      	str	r2, [r3, #52]	@ 0x34
 8006fce:	4b1c      	ldr	r3, [pc, #112]	@ (8007040 <HAL_SPI_MspInit+0xd4>)
 8006fd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fd2:	2208      	movs	r2, #8
 8006fd4:	4013      	ands	r3, r2
 8006fd6:	60bb      	str	r3, [r7, #8]
 8006fd8:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PD5     ------> SPI1_MISO
    PD6     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8006fda:	193b      	adds	r3, r7, r4
 8006fdc:	2202      	movs	r2, #2
 8006fde:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006fe0:	193b      	adds	r3, r7, r4
 8006fe2:	2202      	movs	r2, #2
 8006fe4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fe6:	193b      	adds	r3, r7, r4
 8006fe8:	2200      	movs	r2, #0
 8006fea:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006fec:	193b      	adds	r3, r7, r4
 8006fee:	2200      	movs	r2, #0
 8006ff0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8006ff2:	193b      	adds	r3, r7, r4
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ff8:	193a      	adds	r2, r7, r4
 8006ffa:	23a0      	movs	r3, #160	@ 0xa0
 8006ffc:	05db      	lsls	r3, r3, #23
 8006ffe:	0011      	movs	r1, r2
 8007000:	0018      	movs	r0, r3
 8007002:	f001 f941 	bl	8008288 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8007006:	0021      	movs	r1, r4
 8007008:	187b      	adds	r3, r7, r1
 800700a:	2260      	movs	r2, #96	@ 0x60
 800700c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800700e:	187b      	adds	r3, r7, r1
 8007010:	2202      	movs	r2, #2
 8007012:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007014:	187b      	adds	r3, r7, r1
 8007016:	2200      	movs	r2, #0
 8007018:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800701a:	187b      	adds	r3, r7, r1
 800701c:	2200      	movs	r2, #0
 800701e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI1;
 8007020:	187b      	adds	r3, r7, r1
 8007022:	2201      	movs	r2, #1
 8007024:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007026:	187b      	adds	r3, r7, r1
 8007028:	4a06      	ldr	r2, [pc, #24]	@ (8007044 <HAL_SPI_MspInit+0xd8>)
 800702a:	0019      	movs	r1, r3
 800702c:	0010      	movs	r0, r2
 800702e:	f001 f92b 	bl	8008288 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8007032:	46c0      	nop			@ (mov r8, r8)
 8007034:	46bd      	mov	sp, r7
 8007036:	b00b      	add	sp, #44	@ 0x2c
 8007038:	bd90      	pop	{r4, r7, pc}
 800703a:	46c0      	nop			@ (mov r8, r8)
 800703c:	40013000 	.word	0x40013000
 8007040:	40021000 	.word	0x40021000
 8007044:	50000c00 	.word	0x50000c00

08007048 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b084      	sub	sp, #16
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a0a      	ldr	r2, [pc, #40]	@ (8007080 <HAL_TIM_Base_MspInit+0x38>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d10d      	bne.n	8007076 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM17_MspInit 0 */

    /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 800705a:	4b0a      	ldr	r3, [pc, #40]	@ (8007084 <HAL_TIM_Base_MspInit+0x3c>)
 800705c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800705e:	4b09      	ldr	r3, [pc, #36]	@ (8007084 <HAL_TIM_Base_MspInit+0x3c>)
 8007060:	2180      	movs	r1, #128	@ 0x80
 8007062:	02c9      	lsls	r1, r1, #11
 8007064:	430a      	orrs	r2, r1
 8007066:	641a      	str	r2, [r3, #64]	@ 0x40
 8007068:	4b06      	ldr	r3, [pc, #24]	@ (8007084 <HAL_TIM_Base_MspInit+0x3c>)
 800706a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800706c:	2380      	movs	r3, #128	@ 0x80
 800706e:	02db      	lsls	r3, r3, #11
 8007070:	4013      	ands	r3, r2
 8007072:	60fb      	str	r3, [r7, #12]
 8007074:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM17_MspInit 1 */

  }

}
 8007076:	46c0      	nop			@ (mov r8, r8)
 8007078:	46bd      	mov	sp, r7
 800707a:	b004      	add	sp, #16
 800707c:	bd80      	pop	{r7, pc}
 800707e:	46c0      	nop			@ (mov r8, r8)
 8007080:	40014800 	.word	0x40014800
 8007084:	40021000 	.word	0x40021000

08007088 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8007088:	b590      	push	{r4, r7, lr}
 800708a:	b089      	sub	sp, #36	@ 0x24
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007090:	240c      	movs	r4, #12
 8007092:	193b      	adds	r3, r7, r4
 8007094:	0018      	movs	r0, r3
 8007096:	2314      	movs	r3, #20
 8007098:	001a      	movs	r2, r3
 800709a:	2100      	movs	r1, #0
 800709c:	f007 fa6e 	bl	800e57c <memset>
  if(htim->Instance==TIM17)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a14      	ldr	r2, [pc, #80]	@ (80070f8 <HAL_TIM_MspPostInit+0x70>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d122      	bne.n	80070f0 <HAL_TIM_MspPostInit+0x68>
  {
    /* USER CODE BEGIN TIM17_MspPostInit 0 */

    /* USER CODE END TIM17_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80070aa:	4b14      	ldr	r3, [pc, #80]	@ (80070fc <HAL_TIM_MspPostInit+0x74>)
 80070ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80070ae:	4b13      	ldr	r3, [pc, #76]	@ (80070fc <HAL_TIM_MspPostInit+0x74>)
 80070b0:	2101      	movs	r1, #1
 80070b2:	430a      	orrs	r2, r1
 80070b4:	635a      	str	r2, [r3, #52]	@ 0x34
 80070b6:	4b11      	ldr	r3, [pc, #68]	@ (80070fc <HAL_TIM_MspPostInit+0x74>)
 80070b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070ba:	2201      	movs	r2, #1
 80070bc:	4013      	ands	r3, r2
 80070be:	60bb      	str	r3, [r7, #8]
 80070c0:	68bb      	ldr	r3, [r7, #8]
    /**TIM17 GPIO Configuration
    PA7     ------> TIM17_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80070c2:	0021      	movs	r1, r4
 80070c4:	187b      	adds	r3, r7, r1
 80070c6:	2280      	movs	r2, #128	@ 0x80
 80070c8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070ca:	187b      	adds	r3, r7, r1
 80070cc:	2202      	movs	r2, #2
 80070ce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070d0:	187b      	adds	r3, r7, r1
 80070d2:	2200      	movs	r2, #0
 80070d4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80070d6:	187b      	adds	r3, r7, r1
 80070d8:	2200      	movs	r2, #0
 80070da:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM17;
 80070dc:	187b      	adds	r3, r7, r1
 80070de:	2205      	movs	r2, #5
 80070e0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80070e2:	187a      	adds	r2, r7, r1
 80070e4:	23a0      	movs	r3, #160	@ 0xa0
 80070e6:	05db      	lsls	r3, r3, #23
 80070e8:	0011      	movs	r1, r2
 80070ea:	0018      	movs	r0, r3
 80070ec:	f001 f8cc 	bl	8008288 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM17_MspPostInit 1 */

    /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 80070f0:	46c0      	nop			@ (mov r8, r8)
 80070f2:	46bd      	mov	sp, r7
 80070f4:	b009      	add	sp, #36	@ 0x24
 80070f6:	bd90      	pop	{r4, r7, pc}
 80070f8:	40014800 	.word	0x40014800
 80070fc:	40021000 	.word	0x40021000

08007100 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007100:	b590      	push	{r4, r7, lr}
 8007102:	b09f      	sub	sp, #124	@ 0x7c
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007108:	2364      	movs	r3, #100	@ 0x64
 800710a:	18fb      	adds	r3, r7, r3
 800710c:	0018      	movs	r0, r3
 800710e:	2314      	movs	r3, #20
 8007110:	001a      	movs	r2, r3
 8007112:	2100      	movs	r1, #0
 8007114:	f007 fa32 	bl	800e57c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007118:	2418      	movs	r4, #24
 800711a:	193b      	adds	r3, r7, r4
 800711c:	0018      	movs	r0, r3
 800711e:	234c      	movs	r3, #76	@ 0x4c
 8007120:	001a      	movs	r2, r3
 8007122:	2100      	movs	r1, #0
 8007124:	f007 fa2a 	bl	800e57c <memset>
  if(huart->Instance==USART1)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a45      	ldr	r2, [pc, #276]	@ (8007244 <HAL_UART_MspInit+0x144>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d13e      	bne.n	80071b0 <HAL_UART_MspInit+0xb0>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8007132:	193b      	adds	r3, r7, r4
 8007134:	2201      	movs	r2, #1
 8007136:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8007138:	193b      	adds	r3, r7, r4
 800713a:	2200      	movs	r2, #0
 800713c:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800713e:	193b      	adds	r3, r7, r4
 8007140:	0018      	movs	r0, r3
 8007142:	f002 fe15 	bl	8009d70 <HAL_RCCEx_PeriphCLKConfig>
 8007146:	1e03      	subs	r3, r0, #0
 8007148:	d001      	beq.n	800714e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800714a:	f7ff f9ed 	bl	8006528 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800714e:	4b3e      	ldr	r3, [pc, #248]	@ (8007248 <HAL_UART_MspInit+0x148>)
 8007150:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007152:	4b3d      	ldr	r3, [pc, #244]	@ (8007248 <HAL_UART_MspInit+0x148>)
 8007154:	2180      	movs	r1, #128	@ 0x80
 8007156:	01c9      	lsls	r1, r1, #7
 8007158:	430a      	orrs	r2, r1
 800715a:	641a      	str	r2, [r3, #64]	@ 0x40
 800715c:	4b3a      	ldr	r3, [pc, #232]	@ (8007248 <HAL_UART_MspInit+0x148>)
 800715e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007160:	2380      	movs	r3, #128	@ 0x80
 8007162:	01db      	lsls	r3, r3, #7
 8007164:	4013      	ands	r3, r2
 8007166:	617b      	str	r3, [r7, #20]
 8007168:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800716a:	4b37      	ldr	r3, [pc, #220]	@ (8007248 <HAL_UART_MspInit+0x148>)
 800716c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800716e:	4b36      	ldr	r3, [pc, #216]	@ (8007248 <HAL_UART_MspInit+0x148>)
 8007170:	2104      	movs	r1, #4
 8007172:	430a      	orrs	r2, r1
 8007174:	635a      	str	r2, [r3, #52]	@ 0x34
 8007176:	4b34      	ldr	r3, [pc, #208]	@ (8007248 <HAL_UART_MspInit+0x148>)
 8007178:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800717a:	2204      	movs	r2, #4
 800717c:	4013      	ands	r3, r2
 800717e:	613b      	str	r3, [r7, #16]
 8007180:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8007182:	2164      	movs	r1, #100	@ 0x64
 8007184:	187b      	adds	r3, r7, r1
 8007186:	2230      	movs	r2, #48	@ 0x30
 8007188:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800718a:	187b      	adds	r3, r7, r1
 800718c:	2202      	movs	r2, #2
 800718e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007190:	187b      	adds	r3, r7, r1
 8007192:	2200      	movs	r2, #0
 8007194:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007196:	187b      	adds	r3, r7, r1
 8007198:	2200      	movs	r2, #0
 800719a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800719c:	187b      	adds	r3, r7, r1
 800719e:	2201      	movs	r2, #1
 80071a0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80071a2:	187b      	adds	r3, r7, r1
 80071a4:	4a29      	ldr	r2, [pc, #164]	@ (800724c <HAL_UART_MspInit+0x14c>)
 80071a6:	0019      	movs	r1, r3
 80071a8:	0010      	movs	r0, r2
 80071aa:	f001 f86d 	bl	8008288 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 80071ae:	e044      	b.n	800723a <HAL_UART_MspInit+0x13a>
  else if(huart->Instance==USART2)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a26      	ldr	r2, [pc, #152]	@ (8007250 <HAL_UART_MspInit+0x150>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d13f      	bne.n	800723a <HAL_UART_MspInit+0x13a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80071ba:	2118      	movs	r1, #24
 80071bc:	187b      	adds	r3, r7, r1
 80071be:	2202      	movs	r2, #2
 80071c0:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80071c2:	187b      	adds	r3, r7, r1
 80071c4:	2200      	movs	r2, #0
 80071c6:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80071c8:	187b      	adds	r3, r7, r1
 80071ca:	0018      	movs	r0, r3
 80071cc:	f002 fdd0 	bl	8009d70 <HAL_RCCEx_PeriphCLKConfig>
 80071d0:	1e03      	subs	r3, r0, #0
 80071d2:	d001      	beq.n	80071d8 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 80071d4:	f7ff f9a8 	bl	8006528 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80071d8:	4b1b      	ldr	r3, [pc, #108]	@ (8007248 <HAL_UART_MspInit+0x148>)
 80071da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80071dc:	4b1a      	ldr	r3, [pc, #104]	@ (8007248 <HAL_UART_MspInit+0x148>)
 80071de:	2180      	movs	r1, #128	@ 0x80
 80071e0:	0289      	lsls	r1, r1, #10
 80071e2:	430a      	orrs	r2, r1
 80071e4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80071e6:	4b18      	ldr	r3, [pc, #96]	@ (8007248 <HAL_UART_MspInit+0x148>)
 80071e8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80071ea:	2380      	movs	r3, #128	@ 0x80
 80071ec:	029b      	lsls	r3, r3, #10
 80071ee:	4013      	ands	r3, r2
 80071f0:	60fb      	str	r3, [r7, #12]
 80071f2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80071f4:	4b14      	ldr	r3, [pc, #80]	@ (8007248 <HAL_UART_MspInit+0x148>)
 80071f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80071f8:	4b13      	ldr	r3, [pc, #76]	@ (8007248 <HAL_UART_MspInit+0x148>)
 80071fa:	2101      	movs	r1, #1
 80071fc:	430a      	orrs	r2, r1
 80071fe:	635a      	str	r2, [r3, #52]	@ 0x34
 8007200:	4b11      	ldr	r3, [pc, #68]	@ (8007248 <HAL_UART_MspInit+0x148>)
 8007202:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007204:	2201      	movs	r2, #1
 8007206:	4013      	ands	r3, r2
 8007208:	60bb      	str	r3, [r7, #8]
 800720a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800720c:	2164      	movs	r1, #100	@ 0x64
 800720e:	187b      	adds	r3, r7, r1
 8007210:	220c      	movs	r2, #12
 8007212:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007214:	187b      	adds	r3, r7, r1
 8007216:	2202      	movs	r2, #2
 8007218:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800721a:	187b      	adds	r3, r7, r1
 800721c:	2200      	movs	r2, #0
 800721e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007220:	187b      	adds	r3, r7, r1
 8007222:	2200      	movs	r2, #0
 8007224:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8007226:	187b      	adds	r3, r7, r1
 8007228:	2201      	movs	r2, #1
 800722a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800722c:	187a      	adds	r2, r7, r1
 800722e:	23a0      	movs	r3, #160	@ 0xa0
 8007230:	05db      	lsls	r3, r3, #23
 8007232:	0011      	movs	r1, r2
 8007234:	0018      	movs	r0, r3
 8007236:	f001 f827 	bl	8008288 <HAL_GPIO_Init>
}
 800723a:	46c0      	nop			@ (mov r8, r8)
 800723c:	46bd      	mov	sp, r7
 800723e:	b01f      	add	sp, #124	@ 0x7c
 8007240:	bd90      	pop	{r4, r7, pc}
 8007242:	46c0      	nop			@ (mov r8, r8)
 8007244:	40013800 	.word	0x40013800
 8007248:	40021000 	.word	0x40021000
 800724c:	50000800 	.word	0x50000800
 8007250:	40004400 	.word	0x40004400

08007254 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8007258:	46c0      	nop			@ (mov r8, r8)
 800725a:	e7fd      	b.n	8007258 <NMI_Handler+0x4>

0800725c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	//drawString(0, 150, "ERROR", WHITE, BLACK, 10, 10);
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007260:	46c0      	nop			@ (mov r8, r8)
 8007262:	e7fd      	b.n	8007260 <HardFault_Handler+0x4>

08007264 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8007268:	46c0      	nop			@ (mov r8, r8)
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}

0800726e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800726e:	b580      	push	{r7, lr}
 8007270:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007272:	46c0      	nop			@ (mov r8, r8)
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}

08007278 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800727c:	f000 fed0 	bl	8008020 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007280:	46c0      	nop			@ (mov r8, r8)
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}
	...

08007288 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800728c:	4b05      	ldr	r3, [pc, #20]	@ (80072a4 <RTC_TAMP_IRQHandler+0x1c>)
 800728e:	0018      	movs	r0, r3
 8007290:	f003 fb8c 	bl	800a9ac <HAL_RTC_AlarmIRQHandler>
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8007294:	4b03      	ldr	r3, [pc, #12]	@ (80072a4 <RTC_TAMP_IRQHandler+0x1c>)
 8007296:	0018      	movs	r0, r3
 8007298:	f003 fd52 	bl	800ad40 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 800729c:	46c0      	nop			@ (mov r8, r8)
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}
 80072a2:	46c0      	nop			@ (mov r8, r8)
 80072a4:	20001c54 	.word	0x20001c54

080072a8 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80072ac:	2002      	movs	r0, #2
 80072ae:	f001 f991 	bl	80085d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80072b2:	46c0      	nop			@ (mov r8, r8)
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}

080072b8 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80072bc:	2004      	movs	r0, #4
 80072be:	f001 f989 	bl	80085d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 80072c2:	46c0      	nop			@ (mov r8, r8)
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}

080072c8 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80072cc:	2380      	movs	r3, #128	@ 0x80
 80072ce:	011b      	lsls	r3, r3, #4
 80072d0:	0018      	movs	r0, r3
 80072d2:	f001 f97f 	bl	80085d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80072d6:	46c0      	nop			@ (mov r8, r8)
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}

080072dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	af00      	add	r7, sp, #0
  return 1;
 80072e0:	2301      	movs	r3, #1
}
 80072e2:	0018      	movs	r0, r3
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}

080072e8 <_kill>:

int _kill(int pid, int sig)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b082      	sub	sp, #8
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
 80072f0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80072f2:	f007 f9ab 	bl	800e64c <__errno>
 80072f6:	0003      	movs	r3, r0
 80072f8:	2216      	movs	r2, #22
 80072fa:	601a      	str	r2, [r3, #0]
  return -1;
 80072fc:	2301      	movs	r3, #1
 80072fe:	425b      	negs	r3, r3
}
 8007300:	0018      	movs	r0, r3
 8007302:	46bd      	mov	sp, r7
 8007304:	b002      	add	sp, #8
 8007306:	bd80      	pop	{r7, pc}

08007308 <_exit>:

void _exit (int status)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b082      	sub	sp, #8
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8007310:	2301      	movs	r3, #1
 8007312:	425a      	negs	r2, r3
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	0011      	movs	r1, r2
 8007318:	0018      	movs	r0, r3
 800731a:	f7ff ffe5 	bl	80072e8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800731e:	46c0      	nop			@ (mov r8, r8)
 8007320:	e7fd      	b.n	800731e <_exit+0x16>

08007322 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007322:	b580      	push	{r7, lr}
 8007324:	b086      	sub	sp, #24
 8007326:	af00      	add	r7, sp, #0
 8007328:	60f8      	str	r0, [r7, #12]
 800732a:	60b9      	str	r1, [r7, #8]
 800732c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800732e:	2300      	movs	r3, #0
 8007330:	617b      	str	r3, [r7, #20]
 8007332:	e00a      	b.n	800734a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8007334:	e000      	b.n	8007338 <_read+0x16>
 8007336:	bf00      	nop
 8007338:	0001      	movs	r1, r0
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	1c5a      	adds	r2, r3, #1
 800733e:	60ba      	str	r2, [r7, #8]
 8007340:	b2ca      	uxtb	r2, r1
 8007342:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	3301      	adds	r3, #1
 8007348:	617b      	str	r3, [r7, #20]
 800734a:	697a      	ldr	r2, [r7, #20]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	429a      	cmp	r2, r3
 8007350:	dbf0      	blt.n	8007334 <_read+0x12>
  }

  return len;
 8007352:	687b      	ldr	r3, [r7, #4]
}
 8007354:	0018      	movs	r0, r3
 8007356:	46bd      	mov	sp, r7
 8007358:	b006      	add	sp, #24
 800735a:	bd80      	pop	{r7, pc}

0800735c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b086      	sub	sp, #24
 8007360:	af00      	add	r7, sp, #0
 8007362:	60f8      	str	r0, [r7, #12]
 8007364:	60b9      	str	r1, [r7, #8]
 8007366:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007368:	2300      	movs	r3, #0
 800736a:	617b      	str	r3, [r7, #20]
 800736c:	e009      	b.n	8007382 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	1c5a      	adds	r2, r3, #1
 8007372:	60ba      	str	r2, [r7, #8]
 8007374:	781b      	ldrb	r3, [r3, #0]
 8007376:	0018      	movs	r0, r3
 8007378:	e000      	b.n	800737c <_write+0x20>
 800737a:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	3301      	adds	r3, #1
 8007380:	617b      	str	r3, [r7, #20]
 8007382:	697a      	ldr	r2, [r7, #20]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	429a      	cmp	r2, r3
 8007388:	dbf1      	blt.n	800736e <_write+0x12>
  }
  return len;
 800738a:	687b      	ldr	r3, [r7, #4]
}
 800738c:	0018      	movs	r0, r3
 800738e:	46bd      	mov	sp, r7
 8007390:	b006      	add	sp, #24
 8007392:	bd80      	pop	{r7, pc}

08007394 <_close>:

int _close(int file)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b082      	sub	sp, #8
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800739c:	2301      	movs	r3, #1
 800739e:	425b      	negs	r3, r3
}
 80073a0:	0018      	movs	r0, r3
 80073a2:	46bd      	mov	sp, r7
 80073a4:	b002      	add	sp, #8
 80073a6:	bd80      	pop	{r7, pc}

080073a8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b082      	sub	sp, #8
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	2280      	movs	r2, #128	@ 0x80
 80073b6:	0192      	lsls	r2, r2, #6
 80073b8:	605a      	str	r2, [r3, #4]
  return 0;
 80073ba:	2300      	movs	r3, #0
}
 80073bc:	0018      	movs	r0, r3
 80073be:	46bd      	mov	sp, r7
 80073c0:	b002      	add	sp, #8
 80073c2:	bd80      	pop	{r7, pc}

080073c4 <_isatty>:

int _isatty(int file)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b082      	sub	sp, #8
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80073cc:	2301      	movs	r3, #1
}
 80073ce:	0018      	movs	r0, r3
 80073d0:	46bd      	mov	sp, r7
 80073d2:	b002      	add	sp, #8
 80073d4:	bd80      	pop	{r7, pc}

080073d6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80073d6:	b580      	push	{r7, lr}
 80073d8:	b084      	sub	sp, #16
 80073da:	af00      	add	r7, sp, #0
 80073dc:	60f8      	str	r0, [r7, #12]
 80073de:	60b9      	str	r1, [r7, #8]
 80073e0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80073e2:	2300      	movs	r3, #0
}
 80073e4:	0018      	movs	r0, r3
 80073e6:	46bd      	mov	sp, r7
 80073e8:	b004      	add	sp, #16
 80073ea:	bd80      	pop	{r7, pc}

080073ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b086      	sub	sp, #24
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80073f4:	4a14      	ldr	r2, [pc, #80]	@ (8007448 <_sbrk+0x5c>)
 80073f6:	4b15      	ldr	r3, [pc, #84]	@ (800744c <_sbrk+0x60>)
 80073f8:	1ad3      	subs	r3, r2, r3
 80073fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007400:	4b13      	ldr	r3, [pc, #76]	@ (8007450 <_sbrk+0x64>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d102      	bne.n	800740e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007408:	4b11      	ldr	r3, [pc, #68]	@ (8007450 <_sbrk+0x64>)
 800740a:	4a12      	ldr	r2, [pc, #72]	@ (8007454 <_sbrk+0x68>)
 800740c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800740e:	4b10      	ldr	r3, [pc, #64]	@ (8007450 <_sbrk+0x64>)
 8007410:	681a      	ldr	r2, [r3, #0]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	18d3      	adds	r3, r2, r3
 8007416:	693a      	ldr	r2, [r7, #16]
 8007418:	429a      	cmp	r2, r3
 800741a:	d207      	bcs.n	800742c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800741c:	f007 f916 	bl	800e64c <__errno>
 8007420:	0003      	movs	r3, r0
 8007422:	220c      	movs	r2, #12
 8007424:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007426:	2301      	movs	r3, #1
 8007428:	425b      	negs	r3, r3
 800742a:	e009      	b.n	8007440 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800742c:	4b08      	ldr	r3, [pc, #32]	@ (8007450 <_sbrk+0x64>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007432:	4b07      	ldr	r3, [pc, #28]	@ (8007450 <_sbrk+0x64>)
 8007434:	681a      	ldr	r2, [r3, #0]
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	18d2      	adds	r2, r2, r3
 800743a:	4b05      	ldr	r3, [pc, #20]	@ (8007450 <_sbrk+0x64>)
 800743c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800743e:	68fb      	ldr	r3, [r7, #12]
}
 8007440:	0018      	movs	r0, r3
 8007442:	46bd      	mov	sp, r7
 8007444:	b006      	add	sp, #24
 8007446:	bd80      	pop	{r7, pc}
 8007448:	20024000 	.word	0x20024000
 800744c:	00000400 	.word	0x00000400
 8007450:	20001e58 	.word	0x20001e58
 8007454:	20001fb0 	.word	0x20001fb0

08007458 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800745c:	46c0      	nop			@ (mov r8, r8)
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}

08007462 <json_getValue>:
static inline char const* json_getValue( json_t const* property ) {
 8007462:	b580      	push	{r7, lr}
 8007464:	b082      	sub	sp, #8
 8007466:	af00      	add	r7, sp, #0
 8007468:	6078      	str	r0, [r7, #4]
    return property->u.value;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	689b      	ldr	r3, [r3, #8]
}
 800746e:	0018      	movs	r0, r3
 8007470:	46bd      	mov	sp, r7
 8007472:	b002      	add	sp, #8
 8007474:	bd80      	pop	{r7, pc}

08007476 <json_getType>:
static inline jsonType_t json_getType( json_t const* json ) {
 8007476:	b580      	push	{r7, lr}
 8007478:	b082      	sub	sp, #8
 800747a:	af00      	add	r7, sp, #0
 800747c:	6078      	str	r0, [r7, #4]
    return json->type;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	7c1b      	ldrb	r3, [r3, #16]
}
 8007482:	0018      	movs	r0, r3
 8007484:	46bd      	mov	sp, r7
 8007486:	b002      	add	sp, #8
 8007488:	bd80      	pop	{r7, pc}

0800748a <json_getProperty>:
    unsigned int nextFree;  /**< The index of the next free json property. */
    jsonPool_t pool;
} jsonStaticPool_t;

/* Search a property by its name in a JSON object. */
json_t const* json_getProperty( json_t const* obj, char const* property ) {
 800748a:	b580      	push	{r7, lr}
 800748c:	b084      	sub	sp, #16
 800748e:	af00      	add	r7, sp, #0
 8007490:	6078      	str	r0, [r7, #4]
 8007492:	6039      	str	r1, [r7, #0]
    json_t const* sibling;
    for( sibling = obj->u.c.child; sibling; sibling = sibling->sibling )
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	689b      	ldr	r3, [r3, #8]
 8007498:	60fb      	str	r3, [r7, #12]
 800749a:	e011      	b.n	80074c0 <json_getProperty+0x36>
        if ( sibling->name && !strcmp( sibling->name, property ) )
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d00a      	beq.n	80074ba <json_getProperty+0x30>
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	683a      	ldr	r2, [r7, #0]
 80074aa:	0011      	movs	r1, r2
 80074ac:	0018      	movs	r0, r3
 80074ae:	f7f8 fe29 	bl	8000104 <strcmp>
 80074b2:	1e03      	subs	r3, r0, #0
 80074b4:	d101      	bne.n	80074ba <json_getProperty+0x30>
            return sibling;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	e006      	b.n	80074c8 <json_getProperty+0x3e>
    for( sibling = obj->u.c.child; sibling; sibling = sibling->sibling )
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	60fb      	str	r3, [r7, #12]
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d1ea      	bne.n	800749c <json_getProperty+0x12>
    return 0;
 80074c6:	2300      	movs	r3, #0
}
 80074c8:	0018      	movs	r0, r3
 80074ca:	46bd      	mov	sp, r7
 80074cc:	b004      	add	sp, #16
 80074ce:	bd80      	pop	{r7, pc}

080074d0 <json_getPropertyValue>:

/* Search a property by its name in a JSON object and return its value. */
char const* json_getPropertyValue( json_t const* obj, char const* property ) {
 80074d0:	b5b0      	push	{r4, r5, r7, lr}
 80074d2:	b084      	sub	sp, #16
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
 80074d8:	6039      	str	r1, [r7, #0]
	json_t const* field = json_getProperty( obj, property );
 80074da:	683a      	ldr	r2, [r7, #0]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	0011      	movs	r1, r2
 80074e0:	0018      	movs	r0, r3
 80074e2:	f7ff ffd2 	bl	800748a <json_getProperty>
 80074e6:	0003      	movs	r3, r0
 80074e8:	60fb      	str	r3, [r7, #12]
	if ( !field ) return 0;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d101      	bne.n	80074f4 <json_getPropertyValue+0x24>
 80074f0:	2300      	movs	r3, #0
 80074f2:	e012      	b.n	800751a <json_getPropertyValue+0x4a>
        jsonType_t type = json_getType( field );
 80074f4:	250b      	movs	r5, #11
 80074f6:	197c      	adds	r4, r7, r5
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	0018      	movs	r0, r3
 80074fc:	f7ff ffbb 	bl	8007476 <json_getType>
 8007500:	0003      	movs	r3, r0
 8007502:	7023      	strb	r3, [r4, #0]
        if ( JSON_ARRAY >= type ) return 0;
 8007504:	197b      	adds	r3, r7, r5
 8007506:	781b      	ldrb	r3, [r3, #0]
 8007508:	2b01      	cmp	r3, #1
 800750a:	d801      	bhi.n	8007510 <json_getPropertyValue+0x40>
 800750c:	2300      	movs	r3, #0
 800750e:	e004      	b.n	800751a <json_getPropertyValue+0x4a>
	return json_getValue( field );
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	0018      	movs	r0, r3
 8007514:	f7ff ffa5 	bl	8007462 <json_getValue>
 8007518:	0003      	movs	r3, r0
}
 800751a:	0018      	movs	r0, r3
 800751c:	46bd      	mov	sp, r7
 800751e:	b004      	add	sp, #16
 8007520:	bdb0      	pop	{r4, r5, r7, pc}

08007522 <json_createWithPool>:
static char* objValue( char* ptr, json_t* obj, jsonPool_t* pool );
static char* setToNull( char* ch );
static bool isEndOfPrimitive( char ch );

/* Parse a string to get a json. */
json_t const* json_createWithPool( char *str, jsonPool_t *pool ) {
 8007522:	b580      	push	{r7, lr}
 8007524:	b084      	sub	sp, #16
 8007526:	af00      	add	r7, sp, #0
 8007528:	6078      	str	r0, [r7, #4]
 800752a:	6039      	str	r1, [r7, #0]
    char* ptr = goBlank( str );
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	0018      	movs	r0, r3
 8007530:	f000 fc66 	bl	8007e00 <goBlank>
 8007534:	0003      	movs	r3, r0
 8007536:	60fb      	str	r3, [r7, #12]
    if ( !ptr || (*ptr != '{' && *ptr != '[') ) return 0;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d007      	beq.n	800754e <json_createWithPool+0x2c>
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	781b      	ldrb	r3, [r3, #0]
 8007542:	2b7b      	cmp	r3, #123	@ 0x7b
 8007544:	d005      	beq.n	8007552 <json_createWithPool+0x30>
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	781b      	ldrb	r3, [r3, #0]
 800754a:	2b5b      	cmp	r3, #91	@ 0x5b
 800754c:	d001      	beq.n	8007552 <json_createWithPool+0x30>
 800754e:	2300      	movs	r3, #0
 8007550:	e01d      	b.n	800758e <json_createWithPool+0x6c>
    json_t* obj = pool->init( pool );
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	683a      	ldr	r2, [r7, #0]
 8007558:	0010      	movs	r0, r2
 800755a:	4798      	blx	r3
 800755c:	0003      	movs	r3, r0
 800755e:	60bb      	str	r3, [r7, #8]
    obj->name    = 0;
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	2200      	movs	r2, #0
 8007564:	605a      	str	r2, [r3, #4]
    obj->sibling = 0;
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	2200      	movs	r2, #0
 800756a:	601a      	str	r2, [r3, #0]
    obj->u.c.child = 0;
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	2200      	movs	r2, #0
 8007570:	609a      	str	r2, [r3, #8]
    ptr = objValue( ptr, obj, pool );
 8007572:	683a      	ldr	r2, [r7, #0]
 8007574:	68b9      	ldr	r1, [r7, #8]
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	0018      	movs	r0, r3
 800757a:	f000 faeb 	bl	8007b54 <objValue>
 800757e:	0003      	movs	r3, r0
 8007580:	60fb      	str	r3, [r7, #12]
    if ( !ptr ) return 0;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d101      	bne.n	800758c <json_createWithPool+0x6a>
 8007588:	2300      	movs	r3, #0
 800758a:	e000      	b.n	800758e <json_createWithPool+0x6c>
    return obj;
 800758c:	68bb      	ldr	r3, [r7, #8]
}
 800758e:	0018      	movs	r0, r3
 8007590:	46bd      	mov	sp, r7
 8007592:	b004      	add	sp, #16
 8007594:	bd80      	pop	{r7, pc}
	...

08007598 <json_create>:

/* Parse a string to get a json. */
json_t const* json_create( char* str, json_t mem[], unsigned int qty ) {
 8007598:	b580      	push	{r7, lr}
 800759a:	b08a      	sub	sp, #40	@ 0x28
 800759c:	af00      	add	r7, sp, #0
 800759e:	60f8      	str	r0, [r7, #12]
 80075a0:	60b9      	str	r1, [r7, #8]
 80075a2:	607a      	str	r2, [r7, #4]
    jsonStaticPool_t spool;
    spool.mem = mem;
 80075a4:	2114      	movs	r1, #20
 80075a6:	187b      	adds	r3, r7, r1
 80075a8:	68ba      	ldr	r2, [r7, #8]
 80075aa:	601a      	str	r2, [r3, #0]
    spool.qty = qty;
 80075ac:	187b      	adds	r3, r7, r1
 80075ae:	687a      	ldr	r2, [r7, #4]
 80075b0:	605a      	str	r2, [r3, #4]
    spool.pool.init = poolInit;
 80075b2:	187b      	adds	r3, r7, r1
 80075b4:	4a08      	ldr	r2, [pc, #32]	@ (80075d8 <json_create+0x40>)
 80075b6:	60da      	str	r2, [r3, #12]
    spool.pool.alloc = poolAlloc;
 80075b8:	187b      	adds	r3, r7, r1
 80075ba:	4a08      	ldr	r2, [pc, #32]	@ (80075dc <json_create+0x44>)
 80075bc:	611a      	str	r2, [r3, #16]
    return json_createWithPool( str, &spool.pool );
 80075be:	187b      	adds	r3, r7, r1
 80075c0:	330c      	adds	r3, #12
 80075c2:	001a      	movs	r2, r3
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	0011      	movs	r1, r2
 80075c8:	0018      	movs	r0, r3
 80075ca:	f7ff ffaa 	bl	8007522 <json_createWithPool>
 80075ce:	0003      	movs	r3, r0
}
 80075d0:	0018      	movs	r0, r3
 80075d2:	46bd      	mov	sp, r7
 80075d4:	b00a      	add	sp, #40	@ 0x28
 80075d6:	bd80      	pop	{r7, pc}
 80075d8:	08007d29 	.word	0x08007d29
 80075dc:	08007d49 	.word	0x08007d49

080075e0 <getEscape>:

/** Get a special character with its escape character. Examples:
  * 'b' -> '\\b', 'n' -> '\\n', 't' -> '\\t'
  * @param ch The escape character.
  * @retval  The character code. */
static char getEscape( char ch ) {
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b084      	sub	sp, #16
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	0002      	movs	r2, r0
 80075e8:	1dfb      	adds	r3, r7, #7
 80075ea:	701a      	strb	r2, [r3, #0]
        { '/',  '/'  }, { 'b',  '\b' },
        { 'f',  '\f' }, { 'n',  '\n' },
        { 'r',  '\r' }, { 't',  '\t' },
    };
    unsigned int i;
    for( i = 0; i < sizeof pair / sizeof *pair; ++i )
 80075ec:	2300      	movs	r3, #0
 80075ee:	60fb      	str	r3, [r7, #12]
 80075f0:	e011      	b.n	8007616 <getEscape+0x36>
        if ( pair[i].ch == ch )
 80075f2:	4b0d      	ldr	r3, [pc, #52]	@ (8007628 <getEscape+0x48>)
 80075f4:	68fa      	ldr	r2, [r7, #12]
 80075f6:	0052      	lsls	r2, r2, #1
 80075f8:	5cd3      	ldrb	r3, [r2, r3]
 80075fa:	1dfa      	adds	r2, r7, #7
 80075fc:	7812      	ldrb	r2, [r2, #0]
 80075fe:	429a      	cmp	r2, r3
 8007600:	d106      	bne.n	8007610 <getEscape+0x30>
            return pair[i].code;
 8007602:	4a09      	ldr	r2, [pc, #36]	@ (8007628 <getEscape+0x48>)
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	005b      	lsls	r3, r3, #1
 8007608:	18d3      	adds	r3, r2, r3
 800760a:	3301      	adds	r3, #1
 800760c:	781b      	ldrb	r3, [r3, #0]
 800760e:	e006      	b.n	800761e <getEscape+0x3e>
    for( i = 0; i < sizeof pair / sizeof *pair; ++i )
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	3301      	adds	r3, #1
 8007614:	60fb      	str	r3, [r7, #12]
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	2b07      	cmp	r3, #7
 800761a:	d9ea      	bls.n	80075f2 <getEscape+0x12>
    return '\0';
 800761c:	2300      	movs	r3, #0
}
 800761e:	0018      	movs	r0, r3
 8007620:	46bd      	mov	sp, r7
 8007622:	b004      	add	sp, #16
 8007624:	bd80      	pop	{r7, pc}
 8007626:	46c0      	nop			@ (mov r8, r8)
 8007628:	080116b8 	.word	0x080116b8

0800762c <getCharFromUnicode>:

/** Parse 4 characters.
  * @param str Pointer to  first digit.
  * @retval '?' If the four characters are hexadecimal digits.
  * @retval '\0' In other cases. */
static unsigned char getCharFromUnicode( unsigned char const* str ) {
 800762c:	b580      	push	{r7, lr}
 800762e:	b084      	sub	sp, #16
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
    unsigned int i;
    for( i = 0; i < 4; ++i )
 8007634:	2300      	movs	r3, #0
 8007636:	60fb      	str	r3, [r7, #12]
 8007638:	e010      	b.n	800765c <getCharFromUnicode+0x30>
        if ( !isxdigit( str[i] ) )
 800763a:	687a      	ldr	r2, [r7, #4]
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	18d3      	adds	r3, r2, r3
 8007640:	781b      	ldrb	r3, [r3, #0]
 8007642:	1c5a      	adds	r2, r3, #1
 8007644:	4b09      	ldr	r3, [pc, #36]	@ (800766c <getCharFromUnicode+0x40>)
 8007646:	18d3      	adds	r3, r2, r3
 8007648:	781b      	ldrb	r3, [r3, #0]
 800764a:	001a      	movs	r2, r3
 800764c:	2344      	movs	r3, #68	@ 0x44
 800764e:	4013      	ands	r3, r2
 8007650:	d101      	bne.n	8007656 <getCharFromUnicode+0x2a>
            return '\0';
 8007652:	2300      	movs	r3, #0
 8007654:	e006      	b.n	8007664 <getCharFromUnicode+0x38>
    for( i = 0; i < 4; ++i )
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	3301      	adds	r3, #1
 800765a:	60fb      	str	r3, [r7, #12]
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	2b03      	cmp	r3, #3
 8007660:	d9eb      	bls.n	800763a <getCharFromUnicode+0xe>
    return '?';
 8007662:	233f      	movs	r3, #63	@ 0x3f
}
 8007664:	0018      	movs	r0, r3
 8007666:	46bd      	mov	sp, r7
 8007668:	b004      	add	sp, #16
 800766a:	bd80      	pop	{r7, pc}
 800766c:	080117d0 	.word	0x080117d0

08007670 <parseString>:
/** Parse a string and replace the scape characters by their meaning characters.
  * This parser stops when finds the character '\"'. Then replaces '\"' by '\0'.
  * @param str Pointer to first character.
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* parseString( char* str ) {
 8007670:	b5b0      	push	{r4, r5, r7, lr}
 8007672:	b086      	sub	sp, #24
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
    unsigned char* head = (unsigned char*)str;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	617b      	str	r3, [r7, #20]
    unsigned char* tail = (unsigned char*)str;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	613b      	str	r3, [r7, #16]
    for( ; *head; ++head, ++tail ) {
 8007680:	e04f      	b.n	8007722 <parseString+0xb2>
        if ( *head == '\"' ) {
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	781b      	ldrb	r3, [r3, #0]
 8007686:	2b22      	cmp	r3, #34	@ 0x22
 8007688:	d107      	bne.n	800769a <parseString+0x2a>
            *tail = '\0';
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	2200      	movs	r2, #0
 800768e:	701a      	strb	r2, [r3, #0]
            return (char*)++head;
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	3301      	adds	r3, #1
 8007694:	617b      	str	r3, [r7, #20]
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	e048      	b.n	800772c <parseString+0xbc>
        }
        if ( *head == '\\' ) {
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	781b      	ldrb	r3, [r3, #0]
 800769e:	2b5c      	cmp	r3, #92	@ 0x5c
 80076a0:	d135      	bne.n	800770e <parseString+0x9e>
            if ( *++head == 'u' ) {
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	3301      	adds	r3, #1
 80076a6:	617b      	str	r3, [r7, #20]
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	781b      	ldrb	r3, [r3, #0]
 80076ac:	2b75      	cmp	r3, #117	@ 0x75
 80076ae:	d119      	bne.n	80076e4 <parseString+0x74>
                char const ch = getCharFromUnicode( ++head );
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	3301      	adds	r3, #1
 80076b4:	617b      	str	r3, [r7, #20]
 80076b6:	250e      	movs	r5, #14
 80076b8:	197c      	adds	r4, r7, r5
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	0018      	movs	r0, r3
 80076be:	f7ff ffb5 	bl	800762c <getCharFromUnicode>
 80076c2:	0003      	movs	r3, r0
 80076c4:	7023      	strb	r3, [r4, #0]
                if ( ch == '\0' ) return 0;
 80076c6:	197b      	adds	r3, r7, r5
 80076c8:	781b      	ldrb	r3, [r3, #0]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d101      	bne.n	80076d2 <parseString+0x62>
 80076ce:	2300      	movs	r3, #0
 80076d0:	e02c      	b.n	800772c <parseString+0xbc>
                *tail = ch;
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	220e      	movs	r2, #14
 80076d6:	18ba      	adds	r2, r7, r2
 80076d8:	7812      	ldrb	r2, [r2, #0]
 80076da:	701a      	strb	r2, [r3, #0]
                head += 3;
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	3303      	adds	r3, #3
 80076e0:	617b      	str	r3, [r7, #20]
 80076e2:	e018      	b.n	8007716 <parseString+0xa6>
            }
            else {
                char const esc = getEscape( *head );
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	781b      	ldrb	r3, [r3, #0]
 80076e8:	250f      	movs	r5, #15
 80076ea:	197c      	adds	r4, r7, r5
 80076ec:	0018      	movs	r0, r3
 80076ee:	f7ff ff77 	bl	80075e0 <getEscape>
 80076f2:	0003      	movs	r3, r0
 80076f4:	7023      	strb	r3, [r4, #0]
                if ( esc == '\0' ) return 0;
 80076f6:	197b      	adds	r3, r7, r5
 80076f8:	781b      	ldrb	r3, [r3, #0]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d101      	bne.n	8007702 <parseString+0x92>
 80076fe:	2300      	movs	r3, #0
 8007700:	e014      	b.n	800772c <parseString+0xbc>
                *tail = esc;
 8007702:	693b      	ldr	r3, [r7, #16]
 8007704:	220f      	movs	r2, #15
 8007706:	18ba      	adds	r2, r7, r2
 8007708:	7812      	ldrb	r2, [r2, #0]
 800770a:	701a      	strb	r2, [r3, #0]
 800770c:	e003      	b.n	8007716 <parseString+0xa6>
            }
        }
        else *tail = *head;
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	781a      	ldrb	r2, [r3, #0]
 8007712:	693b      	ldr	r3, [r7, #16]
 8007714:	701a      	strb	r2, [r3, #0]
    for( ; *head; ++head, ++tail ) {
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	3301      	adds	r3, #1
 800771a:	617b      	str	r3, [r7, #20]
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	3301      	adds	r3, #1
 8007720:	613b      	str	r3, [r7, #16]
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	781b      	ldrb	r3, [r3, #0]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d1ab      	bne.n	8007682 <parseString+0x12>
    }
    return 0;
 800772a:	2300      	movs	r3, #0
}
 800772c:	0018      	movs	r0, r3
 800772e:	46bd      	mov	sp, r7
 8007730:	b006      	add	sp, #24
 8007732:	bdb0      	pop	{r4, r5, r7, pc}

08007734 <propertyName>:
/** Parse a string to get the name of a property.
  * @param ptr Pointer to first character.
  * @param property The property to assign the name.
  * @retval Pointer to first of property value. If success.
  * @retval Null pointer if any error occur. */
static char* propertyName( char* ptr, json_t* property ) {
 8007734:	b580      	push	{r7, lr}
 8007736:	b082      	sub	sp, #8
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
 800773c:	6039      	str	r1, [r7, #0]
    property->name = ++ptr;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	3301      	adds	r3, #1
 8007742:	607b      	str	r3, [r7, #4]
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	687a      	ldr	r2, [r7, #4]
 8007748:	605a      	str	r2, [r3, #4]
    ptr = parseString( ptr );
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	0018      	movs	r0, r3
 800774e:	f7ff ff8f 	bl	8007670 <parseString>
 8007752:	0003      	movs	r3, r0
 8007754:	607b      	str	r3, [r7, #4]
    if ( !ptr ) return 0;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d101      	bne.n	8007760 <propertyName+0x2c>
 800775c:	2300      	movs	r3, #0
 800775e:	e017      	b.n	8007790 <propertyName+0x5c>
    ptr = goBlank( ptr );
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	0018      	movs	r0, r3
 8007764:	f000 fb4c 	bl	8007e00 <goBlank>
 8007768:	0003      	movs	r3, r0
 800776a:	607b      	str	r3, [r7, #4]
    if ( !ptr ) return 0;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d101      	bne.n	8007776 <propertyName+0x42>
 8007772:	2300      	movs	r3, #0
 8007774:	e00c      	b.n	8007790 <propertyName+0x5c>
    if ( *ptr++ != ':' ) return 0;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	1c5a      	adds	r2, r3, #1
 800777a:	607a      	str	r2, [r7, #4]
 800777c:	781b      	ldrb	r3, [r3, #0]
 800777e:	2b3a      	cmp	r3, #58	@ 0x3a
 8007780:	d001      	beq.n	8007786 <propertyName+0x52>
 8007782:	2300      	movs	r3, #0
 8007784:	e004      	b.n	8007790 <propertyName+0x5c>
    return goBlank( ptr );
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	0018      	movs	r0, r3
 800778a:	f000 fb39 	bl	8007e00 <goBlank>
 800778e:	0003      	movs	r3, r0
}
 8007790:	0018      	movs	r0, r3
 8007792:	46bd      	mov	sp, r7
 8007794:	b002      	add	sp, #8
 8007796:	bd80      	pop	{r7, pc}

08007798 <textValue>:
/** Parse a string to get the value of a property when its type is JSON_TEXT.
  * @param ptr Pointer to first character ('\"').
  * @param property The property to assign the name.
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* textValue( char* ptr, json_t* property ) {
 8007798:	b580      	push	{r7, lr}
 800779a:	b082      	sub	sp, #8
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
 80077a0:	6039      	str	r1, [r7, #0]
    ++property->u.value;
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	689b      	ldr	r3, [r3, #8]
 80077a6:	1c5a      	adds	r2, r3, #1
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	609a      	str	r2, [r3, #8]
    ptr = parseString( ++ptr );
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	3301      	adds	r3, #1
 80077b0:	607b      	str	r3, [r7, #4]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	0018      	movs	r0, r3
 80077b6:	f7ff ff5b 	bl	8007670 <parseString>
 80077ba:	0003      	movs	r3, r0
 80077bc:	607b      	str	r3, [r7, #4]
    if ( !ptr ) return 0;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d101      	bne.n	80077c8 <textValue+0x30>
 80077c4:	2300      	movs	r3, #0
 80077c6:	e003      	b.n	80077d0 <textValue+0x38>
    property->type = JSON_TEXT;
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	2202      	movs	r2, #2
 80077cc:	741a      	strb	r2, [r3, #16]
    return ptr;
 80077ce:	687b      	ldr	r3, [r7, #4]
}
 80077d0:	0018      	movs	r0, r3
 80077d2:	46bd      	mov	sp, r7
 80077d4:	b002      	add	sp, #8
 80077d6:	bd80      	pop	{r7, pc}

080077d8 <checkStr>:
/** Compare two strings until get the null character in the second one.
  * @param ptr sub string
  * @param str main string
  * @retval Pointer to next character.
  * @retval Null pointer if any error occur. */
static char* checkStr( char* ptr, char const* str ) {
 80077d8:	b580      	push	{r7, lr}
 80077da:	b082      	sub	sp, #8
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
 80077e0:	6039      	str	r1, [r7, #0]
    while( *str )
 80077e2:	e00b      	b.n	80077fc <checkStr+0x24>
        if ( *ptr++ != *str++ )
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	1c5a      	adds	r2, r3, #1
 80077e8:	607a      	str	r2, [r7, #4]
 80077ea:	781a      	ldrb	r2, [r3, #0]
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	1c59      	adds	r1, r3, #1
 80077f0:	6039      	str	r1, [r7, #0]
 80077f2:	781b      	ldrb	r3, [r3, #0]
 80077f4:	429a      	cmp	r2, r3
 80077f6:	d001      	beq.n	80077fc <checkStr+0x24>
            return 0;
 80077f8:	2300      	movs	r3, #0
 80077fa:	e004      	b.n	8007806 <checkStr+0x2e>
    while( *str )
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	781b      	ldrb	r3, [r3, #0]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d1ef      	bne.n	80077e4 <checkStr+0xc>
    return ptr;
 8007804:	687b      	ldr	r3, [r7, #4]
}
 8007806:	0018      	movs	r0, r3
 8007808:	46bd      	mov	sp, r7
 800780a:	b002      	add	sp, #8
 800780c:	bd80      	pop	{r7, pc}

0800780e <primitiveValue>:
  * @param property Property handler to set the value and the type, (true, false or null).
  * @param value String with the primitive literal.
  * @param type The code of the type. ( JSON_BOOLEAN or JSON_NULL )
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* primitiveValue( char* ptr, json_t* property, char const* value, jsonType_t type ) {
 800780e:	b580      	push	{r7, lr}
 8007810:	b084      	sub	sp, #16
 8007812:	af00      	add	r7, sp, #0
 8007814:	60f8      	str	r0, [r7, #12]
 8007816:	60b9      	str	r1, [r7, #8]
 8007818:	607a      	str	r2, [r7, #4]
 800781a:	001a      	movs	r2, r3
 800781c:	1cfb      	adds	r3, r7, #3
 800781e:	701a      	strb	r2, [r3, #0]
    ptr = checkStr( ptr, value );
 8007820:	687a      	ldr	r2, [r7, #4]
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	0011      	movs	r1, r2
 8007826:	0018      	movs	r0, r3
 8007828:	f7ff ffd6 	bl	80077d8 <checkStr>
 800782c:	0003      	movs	r3, r0
 800782e:	60fb      	str	r3, [r7, #12]
    if ( !ptr || !isEndOfPrimitive( *ptr ) ) return 0;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d00b      	beq.n	800784e <primitiveValue+0x40>
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	781b      	ldrb	r3, [r3, #0]
 800783a:	0018      	movs	r0, r3
 800783c:	f000 fb30 	bl	8007ea0 <isEndOfPrimitive>
 8007840:	0003      	movs	r3, r0
 8007842:	001a      	movs	r2, r3
 8007844:	2301      	movs	r3, #1
 8007846:	4053      	eors	r3, r2
 8007848:	b2db      	uxtb	r3, r3
 800784a:	2b00      	cmp	r3, #0
 800784c:	d001      	beq.n	8007852 <primitiveValue+0x44>
 800784e:	2300      	movs	r3, #0
 8007850:	e00a      	b.n	8007868 <primitiveValue+0x5a>
    ptr = setToNull( ptr );
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	0018      	movs	r0, r3
 8007856:	f000 fb05 	bl	8007e64 <setToNull>
 800785a:	0003      	movs	r3, r0
 800785c:	60fb      	str	r3, [r7, #12]
    property->type = type;
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	1cfa      	adds	r2, r7, #3
 8007862:	7812      	ldrb	r2, [r2, #0]
 8007864:	741a      	strb	r2, [r3, #16]
    return ptr;
 8007866:	68fb      	ldr	r3, [r7, #12]
}
 8007868:	0018      	movs	r0, r3
 800786a:	46bd      	mov	sp, r7
 800786c:	b004      	add	sp, #16
 800786e:	bd80      	pop	{r7, pc}

08007870 <trueValue>:
  * If the first character after the value is different of '}' or ']' is set to '\0'.
  * @param ptr Pointer to first character.
  * @param property Property handler to set the value and the type, (true, false or null).
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* trueValue( char* ptr, json_t* property ) {
 8007870:	b580      	push	{r7, lr}
 8007872:	b082      	sub	sp, #8
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
 8007878:	6039      	str	r1, [r7, #0]
    return primitiveValue( ptr, property, "true", JSON_BOOLEAN );
 800787a:	4a05      	ldr	r2, [pc, #20]	@ (8007890 <trueValue+0x20>)
 800787c:	6839      	ldr	r1, [r7, #0]
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	2303      	movs	r3, #3
 8007882:	f7ff ffc4 	bl	800780e <primitiveValue>
 8007886:	0003      	movs	r3, r0
}
 8007888:	0018      	movs	r0, r3
 800788a:	46bd      	mov	sp, r7
 800788c:	b002      	add	sp, #8
 800788e:	bd80      	pop	{r7, pc}
 8007890:	08010ea4 	.word	0x08010ea4

08007894 <falseValue>:
  * If the first character after the value is different of '}' or ']' is set to '\0'.
  * @param ptr Pointer to first character.
  * @param property Property handler to set the value and the type, (true, false or null).
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* falseValue( char* ptr, json_t* property ) {
 8007894:	b580      	push	{r7, lr}
 8007896:	b082      	sub	sp, #8
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
 800789c:	6039      	str	r1, [r7, #0]
    return primitiveValue( ptr, property, "false", JSON_BOOLEAN );
 800789e:	4a05      	ldr	r2, [pc, #20]	@ (80078b4 <falseValue+0x20>)
 80078a0:	6839      	ldr	r1, [r7, #0]
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	2303      	movs	r3, #3
 80078a6:	f7ff ffb2 	bl	800780e <primitiveValue>
 80078aa:	0003      	movs	r3, r0
}
 80078ac:	0018      	movs	r0, r3
 80078ae:	46bd      	mov	sp, r7
 80078b0:	b002      	add	sp, #8
 80078b2:	bd80      	pop	{r7, pc}
 80078b4:	08010eac 	.word	0x08010eac

080078b8 <nullValue>:
  * If the first character after the value is different of '}' or ']' is set to '\0'.
  * @param ptr Pointer to first character.
  * @param property Property handler to set the value and the type, (true, false or null).
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* nullValue( char* ptr, json_t* property ) {
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b082      	sub	sp, #8
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
 80078c0:	6039      	str	r1, [r7, #0]
    return primitiveValue( ptr, property, "null", JSON_NULL );
 80078c2:	4a05      	ldr	r2, [pc, #20]	@ (80078d8 <nullValue+0x20>)
 80078c4:	6839      	ldr	r1, [r7, #0]
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	2306      	movs	r3, #6
 80078ca:	f7ff ffa0 	bl	800780e <primitiveValue>
 80078ce:	0003      	movs	r3, r0
}
 80078d0:	0018      	movs	r0, r3
 80078d2:	46bd      	mov	sp, r7
 80078d4:	b002      	add	sp, #8
 80078d6:	bd80      	pop	{r7, pc}
 80078d8:	08010eb4 	.word	0x08010eb4

080078dc <expValue>:

/** Analyze the exponential part of a real number.
  * @param ptr Pointer to first character.
  * @retval Pointer to first non numerical after the string. If success.
  * @retval Null pointer if any error occur. */
static char* expValue( char* ptr ) {
 80078dc:	b580      	push	{r7, lr}
 80078de:	b082      	sub	sp, #8
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
    if ( *ptr == '-' || *ptr == '+' ) ++ptr;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	781b      	ldrb	r3, [r3, #0]
 80078e8:	2b2d      	cmp	r3, #45	@ 0x2d
 80078ea:	d003      	beq.n	80078f4 <expValue+0x18>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	781b      	ldrb	r3, [r3, #0]
 80078f0:	2b2b      	cmp	r3, #43	@ 0x2b
 80078f2:	d102      	bne.n	80078fa <expValue+0x1e>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	3301      	adds	r3, #1
 80078f8:	607b      	str	r3, [r7, #4]
    if ( !isdigit( (int)(*ptr) ) ) return 0;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	781b      	ldrb	r3, [r3, #0]
 80078fe:	1c5a      	adds	r2, r3, #1
 8007900:	4b0b      	ldr	r3, [pc, #44]	@ (8007930 <expValue+0x54>)
 8007902:	18d3      	adds	r3, r2, r3
 8007904:	781b      	ldrb	r3, [r3, #0]
 8007906:	001a      	movs	r2, r3
 8007908:	2304      	movs	r3, #4
 800790a:	4013      	ands	r3, r2
 800790c:	d101      	bne.n	8007912 <expValue+0x36>
 800790e:	2300      	movs	r3, #0
 8007910:	e009      	b.n	8007926 <expValue+0x4a>
    ptr = goNum( ++ptr );
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	3301      	adds	r3, #1
 8007916:	607b      	str	r3, [r7, #4]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	0018      	movs	r0, r3
 800791c:	f000 fa82 	bl	8007e24 <goNum>
 8007920:	0003      	movs	r3, r0
 8007922:	607b      	str	r3, [r7, #4]
    return ptr;
 8007924:	687b      	ldr	r3, [r7, #4]
}
 8007926:	0018      	movs	r0, r3
 8007928:	46bd      	mov	sp, r7
 800792a:	b002      	add	sp, #8
 800792c:	bd80      	pop	{r7, pc}
 800792e:	46c0      	nop			@ (mov r8, r8)
 8007930:	080117d0 	.word	0x080117d0

08007934 <fraqValue>:

/** Analyze the decimal part of a real number.
  * @param ptr Pointer to first character.
  * @retval Pointer to first non numerical after the string. If success.
  * @retval Null pointer if any error occur. */
static char* fraqValue( char* ptr ) {
 8007934:	b580      	push	{r7, lr}
 8007936:	b082      	sub	sp, #8
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
    if ( !isdigit( (int)(*ptr) ) ) return 0;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	781b      	ldrb	r3, [r3, #0]
 8007940:	1c5a      	adds	r2, r3, #1
 8007942:	4b0e      	ldr	r3, [pc, #56]	@ (800797c <fraqValue+0x48>)
 8007944:	18d3      	adds	r3, r2, r3
 8007946:	781b      	ldrb	r3, [r3, #0]
 8007948:	001a      	movs	r2, r3
 800794a:	2304      	movs	r3, #4
 800794c:	4013      	ands	r3, r2
 800794e:	d101      	bne.n	8007954 <fraqValue+0x20>
 8007950:	2300      	movs	r3, #0
 8007952:	e00e      	b.n	8007972 <fraqValue+0x3e>
    ptr = goNum( ++ptr );
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	3301      	adds	r3, #1
 8007958:	607b      	str	r3, [r7, #4]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	0018      	movs	r0, r3
 800795e:	f000 fa61 	bl	8007e24 <goNum>
 8007962:	0003      	movs	r3, r0
 8007964:	607b      	str	r3, [r7, #4]
    if ( !ptr ) return 0;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d101      	bne.n	8007970 <fraqValue+0x3c>
 800796c:	2300      	movs	r3, #0
 800796e:	e000      	b.n	8007972 <fraqValue+0x3e>
    return ptr;
 8007970:	687b      	ldr	r3, [r7, #4]
}
 8007972:	0018      	movs	r0, r3
 8007974:	46bd      	mov	sp, r7
 8007976:	b002      	add	sp, #8
 8007978:	bd80      	pop	{r7, pc}
 800797a:	46c0      	nop			@ (mov r8, r8)
 800797c:	080117d0 	.word	0x080117d0

08007980 <numValue>:
  * If the first character after the value is different of '}' or ']' is set to '\0'.
  * @param ptr Pointer to first character.
  * @param property Property handler to set the value and the type: JSON_REAL or JSON_INTEGER.
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* numValue( char* ptr, json_t* property ) {
 8007980:	b580      	push	{r7, lr}
 8007982:	b088      	sub	sp, #32
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	6039      	str	r1, [r7, #0]
    if ( *ptr == '-' ) ++ptr;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	781b      	ldrb	r3, [r3, #0]
 800798e:	2b2d      	cmp	r3, #45	@ 0x2d
 8007990:	d102      	bne.n	8007998 <numValue+0x18>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	3301      	adds	r3, #1
 8007996:	607b      	str	r3, [r7, #4]
    if ( !isdigit( (int)(*ptr) ) ) return 0;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	781b      	ldrb	r3, [r3, #0]
 800799c:	1c5a      	adds	r2, r3, #1
 800799e:	4b5b      	ldr	r3, [pc, #364]	@ (8007b0c <numValue+0x18c>)
 80079a0:	18d3      	adds	r3, r2, r3
 80079a2:	781b      	ldrb	r3, [r3, #0]
 80079a4:	001a      	movs	r2, r3
 80079a6:	2304      	movs	r3, #4
 80079a8:	4013      	ands	r3, r2
 80079aa:	d101      	bne.n	80079b0 <numValue+0x30>
 80079ac:	2300      	movs	r3, #0
 80079ae:	e0a8      	b.n	8007b02 <numValue+0x182>
    if ( *ptr != '0' ) {
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	781b      	ldrb	r3, [r3, #0]
 80079b4:	2b30      	cmp	r3, #48	@ 0x30
 80079b6:	d00a      	beq.n	80079ce <numValue+0x4e>
        ptr = goNum( ptr );
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	0018      	movs	r0, r3
 80079bc:	f000 fa32 	bl	8007e24 <goNum>
 80079c0:	0003      	movs	r3, r0
 80079c2:	607b      	str	r3, [r7, #4]
        if ( !ptr ) return 0;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d110      	bne.n	80079ec <numValue+0x6c>
 80079ca:	2300      	movs	r3, #0
 80079cc:	e099      	b.n	8007b02 <numValue+0x182>
    }
    else if ( isdigit( (int)(*++ptr) ) ) return 0;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	3301      	adds	r3, #1
 80079d2:	607b      	str	r3, [r7, #4]
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	781b      	ldrb	r3, [r3, #0]
 80079d8:	1c5a      	adds	r2, r3, #1
 80079da:	4b4c      	ldr	r3, [pc, #304]	@ (8007b0c <numValue+0x18c>)
 80079dc:	18d3      	adds	r3, r2, r3
 80079de:	781b      	ldrb	r3, [r3, #0]
 80079e0:	001a      	movs	r2, r3
 80079e2:	2304      	movs	r3, #4
 80079e4:	4013      	ands	r3, r2
 80079e6:	d001      	beq.n	80079ec <numValue+0x6c>
 80079e8:	2300      	movs	r3, #0
 80079ea:	e08a      	b.n	8007b02 <numValue+0x182>
    property->type = JSON_INTEGER;
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	2204      	movs	r2, #4
 80079f0:	741a      	strb	r2, [r3, #16]
    if ( *ptr == '.' ) {
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	781b      	ldrb	r3, [r3, #0]
 80079f6:	2b2e      	cmp	r3, #46	@ 0x2e
 80079f8:	d110      	bne.n	8007a1c <numValue+0x9c>
        ptr = fraqValue( ++ptr );
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	3301      	adds	r3, #1
 80079fe:	607b      	str	r3, [r7, #4]
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	0018      	movs	r0, r3
 8007a04:	f7ff ff96 	bl	8007934 <fraqValue>
 8007a08:	0003      	movs	r3, r0
 8007a0a:	607b      	str	r3, [r7, #4]
        if ( !ptr ) return 0;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d101      	bne.n	8007a16 <numValue+0x96>
 8007a12:	2300      	movs	r3, #0
 8007a14:	e075      	b.n	8007b02 <numValue+0x182>
        property->type = JSON_REAL;
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	2205      	movs	r2, #5
 8007a1a:	741a      	strb	r2, [r3, #16]
    }
    if ( *ptr == 'e' || *ptr == 'E' ) {
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	781b      	ldrb	r3, [r3, #0]
 8007a20:	2b65      	cmp	r3, #101	@ 0x65
 8007a22:	d003      	beq.n	8007a2c <numValue+0xac>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	781b      	ldrb	r3, [r3, #0]
 8007a28:	2b45      	cmp	r3, #69	@ 0x45
 8007a2a:	d110      	bne.n	8007a4e <numValue+0xce>
        ptr = expValue( ++ptr );
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	3301      	adds	r3, #1
 8007a30:	607b      	str	r3, [r7, #4]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	0018      	movs	r0, r3
 8007a36:	f7ff ff51 	bl	80078dc <expValue>
 8007a3a:	0003      	movs	r3, r0
 8007a3c:	607b      	str	r3, [r7, #4]
        if ( !ptr ) return 0;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d101      	bne.n	8007a48 <numValue+0xc8>
 8007a44:	2300      	movs	r3, #0
 8007a46:	e05c      	b.n	8007b02 <numValue+0x182>
        property->type = JSON_REAL;
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	2205      	movs	r2, #5
 8007a4c:	741a      	strb	r2, [r3, #16]
    }
    if ( !isEndOfPrimitive( *ptr ) ) return 0;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	781b      	ldrb	r3, [r3, #0]
 8007a52:	0018      	movs	r0, r3
 8007a54:	f000 fa24 	bl	8007ea0 <isEndOfPrimitive>
 8007a58:	0003      	movs	r3, r0
 8007a5a:	001a      	movs	r2, r3
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	4053      	eors	r3, r2
 8007a60:	b2db      	uxtb	r3, r3
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d001      	beq.n	8007a6a <numValue+0xea>
 8007a66:	2300      	movs	r3, #0
 8007a68:	e04b      	b.n	8007b02 <numValue+0x182>
    if ( JSON_INTEGER == property->type ) {
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	7c1b      	ldrb	r3, [r3, #16]
 8007a6e:	2b04      	cmp	r3, #4
 8007a70:	d140      	bne.n	8007af4 <numValue+0x174>
        char const* value = property->u.value;
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	689b      	ldr	r3, [r3, #8]
 8007a76:	61fb      	str	r3, [r7, #28]
        bool const negative = *value == '-';
 8007a78:	69fb      	ldr	r3, [r7, #28]
 8007a7a:	781a      	ldrb	r2, [r3, #0]
 8007a7c:	201b      	movs	r0, #27
 8007a7e:	183b      	adds	r3, r7, r0
 8007a80:	3a2d      	subs	r2, #45	@ 0x2d
 8007a82:	4251      	negs	r1, r2
 8007a84:	414a      	adcs	r2, r1
 8007a86:	701a      	strb	r2, [r3, #0]
        static char const min[] = "-9223372036854775808";
        static char const max[] = "9223372036854775807";
        unsigned int const maxdigits = ( negative? sizeof min: sizeof max ) - 1;
 8007a88:	183b      	adds	r3, r7, r0
 8007a8a:	781b      	ldrb	r3, [r3, #0]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d001      	beq.n	8007a94 <numValue+0x114>
 8007a90:	2314      	movs	r3, #20
 8007a92:	e000      	b.n	8007a96 <numValue+0x116>
 8007a94:	2313      	movs	r3, #19
 8007a96:	617b      	str	r3, [r7, #20]
        unsigned int const len = ( unsigned int const ) ( ptr - value );
 8007a98:	687a      	ldr	r2, [r7, #4]
 8007a9a:	69fb      	ldr	r3, [r7, #28]
 8007a9c:	1ad3      	subs	r3, r2, r3
 8007a9e:	613b      	str	r3, [r7, #16]
        if ( len > maxdigits ) return 0;
 8007aa0:	693a      	ldr	r2, [r7, #16]
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	429a      	cmp	r2, r3
 8007aa6:	d901      	bls.n	8007aac <numValue+0x12c>
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	e02a      	b.n	8007b02 <numValue+0x182>
        if ( len == maxdigits ) {
 8007aac:	693a      	ldr	r2, [r7, #16]
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	d11f      	bne.n	8007af4 <numValue+0x174>
            char const tmp = *ptr;
 8007ab4:	230f      	movs	r3, #15
 8007ab6:	18fb      	adds	r3, r7, r3
 8007ab8:	687a      	ldr	r2, [r7, #4]
 8007aba:	7812      	ldrb	r2, [r2, #0]
 8007abc:	701a      	strb	r2, [r3, #0]
            *ptr = '\0';
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	701a      	strb	r2, [r3, #0]
            char const* const threshold = negative ? min: max;
 8007ac4:	231b      	movs	r3, #27
 8007ac6:	18fb      	adds	r3, r7, r3
 8007ac8:	781b      	ldrb	r3, [r3, #0]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d001      	beq.n	8007ad2 <numValue+0x152>
 8007ace:	4b10      	ldr	r3, [pc, #64]	@ (8007b10 <numValue+0x190>)
 8007ad0:	e000      	b.n	8007ad4 <numValue+0x154>
 8007ad2:	4b10      	ldr	r3, [pc, #64]	@ (8007b14 <numValue+0x194>)
 8007ad4:	60bb      	str	r3, [r7, #8]
            if ( 0 > strcmp( threshold, value ) ) return 0;
 8007ad6:	69fa      	ldr	r2, [r7, #28]
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	0011      	movs	r1, r2
 8007adc:	0018      	movs	r0, r3
 8007ade:	f7f8 fb11 	bl	8000104 <strcmp>
 8007ae2:	1e03      	subs	r3, r0, #0
 8007ae4:	da01      	bge.n	8007aea <numValue+0x16a>
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	e00b      	b.n	8007b02 <numValue+0x182>
            *ptr = tmp;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	220f      	movs	r2, #15
 8007aee:	18ba      	adds	r2, r7, r2
 8007af0:	7812      	ldrb	r2, [r2, #0]
 8007af2:	701a      	strb	r2, [r3, #0]
        }
    }
    ptr = setToNull( ptr );
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	0018      	movs	r0, r3
 8007af8:	f000 f9b4 	bl	8007e64 <setToNull>
 8007afc:	0003      	movs	r3, r0
 8007afe:	607b      	str	r3, [r7, #4]
    return ptr;
 8007b00:	687b      	ldr	r3, [r7, #4]
}
 8007b02:	0018      	movs	r0, r3
 8007b04:	46bd      	mov	sp, r7
 8007b06:	b008      	add	sp, #32
 8007b08:	bd80      	pop	{r7, pc}
 8007b0a:	46c0      	nop			@ (mov r8, r8)
 8007b0c:	080117d0 	.word	0x080117d0
 8007b10:	080116c8 	.word	0x080116c8
 8007b14:	080116e0 	.word	0x080116e0

08007b18 <add>:

/** Add a property to a JSON object or array.
  * @param obj The handler of the JSON object or array.
  * @param property The handler of the property to be added. */
static void add( json_t* obj, json_t* property ) {
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b082      	sub	sp, #8
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	6039      	str	r1, [r7, #0]
    property->sibling = 0;
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	2200      	movs	r2, #0
 8007b26:	601a      	str	r2, [r3, #0]
    if ( !obj->u.c.child ){
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	689b      	ldr	r3, [r3, #8]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d106      	bne.n	8007b3e <add+0x26>
	    obj->u.c.child = property;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	683a      	ldr	r2, [r7, #0]
 8007b34:	609a      	str	r2, [r3, #8]
	    obj->u.c.last_child = property;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	683a      	ldr	r2, [r7, #0]
 8007b3a:	60da      	str	r2, [r3, #12]
    } else {
	    obj->u.c.last_child->sibling = property;
	    obj->u.c.last_child = property;
    }
}
 8007b3c:	e006      	b.n	8007b4c <add+0x34>
	    obj->u.c.last_child->sibling = property;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	68db      	ldr	r3, [r3, #12]
 8007b42:	683a      	ldr	r2, [r7, #0]
 8007b44:	601a      	str	r2, [r3, #0]
	    obj->u.c.last_child = property;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	683a      	ldr	r2, [r7, #0]
 8007b4a:	60da      	str	r2, [r3, #12]
}
 8007b4c:	46c0      	nop			@ (mov r8, r8)
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	b002      	add	sp, #8
 8007b52:	bd80      	pop	{r7, pc}

08007b54 <objValue>:
  * @param ptr Pointer to first character.
  * @param obj The handler of the JSON root object or array.
  * @param pool The handler of a json pool for creating json instances.
  * @retval Pointer to first character after the value. If success.
  * @retval Null pointer if any error occur. */
static char* objValue( char* ptr, json_t* obj, jsonPool_t* pool ) {
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b088      	sub	sp, #32
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	60f8      	str	r0, [r7, #12]
 8007b5c:	60b9      	str	r1, [r7, #8]
 8007b5e:	607a      	str	r2, [r7, #4]
    obj->type    = *ptr == '{' ? JSON_OBJ : JSON_ARRAY;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	781b      	ldrb	r3, [r3, #0]
 8007b64:	3b7b      	subs	r3, #123	@ 0x7b
 8007b66:	1e5a      	subs	r2, r3, #1
 8007b68:	4193      	sbcs	r3, r2
 8007b6a:	b2db      	uxtb	r3, r3
 8007b6c:	001a      	movs	r2, r3
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	741a      	strb	r2, [r3, #16]
    obj->u.c.child = 0;
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	2200      	movs	r2, #0
 8007b76:	609a      	str	r2, [r3, #8]
    obj->sibling = 0;
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	601a      	str	r2, [r3, #0]
    ptr++;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	3301      	adds	r3, #1
 8007b82:	60fb      	str	r3, [r7, #12]
    for(;;) {
        ptr = goBlank( ptr );
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	0018      	movs	r0, r3
 8007b88:	f000 f93a 	bl	8007e00 <goBlank>
 8007b8c:	0003      	movs	r3, r0
 8007b8e:	60fb      	str	r3, [r7, #12]
        if ( !ptr ) return 0;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d101      	bne.n	8007b9a <objValue+0x46>
 8007b96:	2300      	movs	r3, #0
 8007b98:	e0c0      	b.n	8007d1c <objValue+0x1c8>
        if ( *ptr == ',' ) {
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	781b      	ldrb	r3, [r3, #0]
 8007b9e:	2b2c      	cmp	r3, #44	@ 0x2c
 8007ba0:	d103      	bne.n	8007baa <objValue+0x56>
            ++ptr;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	3301      	adds	r3, #1
 8007ba6:	60fb      	str	r3, [r7, #12]
            continue;
 8007ba8:	e0b7      	b.n	8007d1a <objValue+0x1c6>
        }
        char const endchar = ( obj->type == JSON_OBJ )? '}': ']';
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	7c1b      	ldrb	r3, [r3, #16]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d101      	bne.n	8007bb6 <objValue+0x62>
 8007bb2:	227d      	movs	r2, #125	@ 0x7d
 8007bb4:	e000      	b.n	8007bb8 <objValue+0x64>
 8007bb6:	225d      	movs	r2, #93	@ 0x5d
 8007bb8:	211f      	movs	r1, #31
 8007bba:	187b      	adds	r3, r7, r1
 8007bbc:	701a      	strb	r2, [r3, #0]
        if ( *ptr == endchar ) {
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	781b      	ldrb	r3, [r3, #0]
 8007bc2:	187a      	adds	r2, r7, r1
 8007bc4:	7812      	ldrb	r2, [r2, #0]
 8007bc6:	429a      	cmp	r2, r3
 8007bc8:	d116      	bne.n	8007bf8 <objValue+0xa4>
            *ptr = '\0';
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	701a      	strb	r2, [r3, #0]
            json_t* parentObj = obj->sibling;
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	617b      	str	r3, [r7, #20]
            if ( !parentObj ) return ++ptr;
 8007bd6:	697b      	ldr	r3, [r7, #20]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d104      	bne.n	8007be6 <objValue+0x92>
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	3301      	adds	r3, #1
 8007be0:	60fb      	str	r3, [r7, #12]
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	e09a      	b.n	8007d1c <objValue+0x1c8>
            obj->sibling = 0;
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	2200      	movs	r2, #0
 8007bea:	601a      	str	r2, [r3, #0]
            obj = parentObj;
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	60bb      	str	r3, [r7, #8]
            ++ptr;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	3301      	adds	r3, #1
 8007bf4:	60fb      	str	r3, [r7, #12]
            continue;
 8007bf6:	e090      	b.n	8007d1a <objValue+0x1c6>
        }
        json_t* property = pool->alloc( pool );
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	685b      	ldr	r3, [r3, #4]
 8007bfc:	687a      	ldr	r2, [r7, #4]
 8007bfe:	0010      	movs	r0, r2
 8007c00:	4798      	blx	r3
 8007c02:	0003      	movs	r3, r0
 8007c04:	61bb      	str	r3, [r7, #24]
        if ( !property ) return 0;
 8007c06:	69bb      	ldr	r3, [r7, #24]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d101      	bne.n	8007c10 <objValue+0xbc>
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	e085      	b.n	8007d1c <objValue+0x1c8>
        if( obj->type != JSON_ARRAY ) {
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	7c1b      	ldrb	r3, [r3, #16]
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	d012      	beq.n	8007c3e <objValue+0xea>
            if ( *ptr != '\"' ) return 0;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	781b      	ldrb	r3, [r3, #0]
 8007c1c:	2b22      	cmp	r3, #34	@ 0x22
 8007c1e:	d001      	beq.n	8007c24 <objValue+0xd0>
 8007c20:	2300      	movs	r3, #0
 8007c22:	e07b      	b.n	8007d1c <objValue+0x1c8>
            ptr = propertyName( ptr, property );
 8007c24:	69ba      	ldr	r2, [r7, #24]
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	0011      	movs	r1, r2
 8007c2a:	0018      	movs	r0, r3
 8007c2c:	f7ff fd82 	bl	8007734 <propertyName>
 8007c30:	0003      	movs	r3, r0
 8007c32:	60fb      	str	r3, [r7, #12]
            if ( !ptr ) return 0;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d104      	bne.n	8007c44 <objValue+0xf0>
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	e06e      	b.n	8007d1c <objValue+0x1c8>
        }
        else property->name = 0;
 8007c3e:	69bb      	ldr	r3, [r7, #24]
 8007c40:	2200      	movs	r2, #0
 8007c42:	605a      	str	r2, [r3, #4]
        add( obj, property );
 8007c44:	69ba      	ldr	r2, [r7, #24]
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	0011      	movs	r1, r2
 8007c4a:	0018      	movs	r0, r3
 8007c4c:	f7ff ff64 	bl	8007b18 <add>
        property->u.value = ptr;
 8007c50:	69bb      	ldr	r3, [r7, #24]
 8007c52:	68fa      	ldr	r2, [r7, #12]
 8007c54:	609a      	str	r2, [r3, #8]
        switch( *ptr ) {
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	781b      	ldrb	r3, [r3, #0]
 8007c5a:	2b22      	cmp	r3, #34	@ 0x22
 8007c5c:	d02a      	beq.n	8007cb4 <objValue+0x160>
 8007c5e:	db4d      	blt.n	8007cfc <objValue+0x1a8>
 8007c60:	2b7b      	cmp	r3, #123	@ 0x7b
 8007c62:	dc4b      	bgt.n	8007cfc <objValue+0x1a8>
 8007c64:	2b5b      	cmp	r3, #91	@ 0x5b
 8007c66:	db49      	blt.n	8007cfc <objValue+0x1a8>
 8007c68:	3b5b      	subs	r3, #91	@ 0x5b
 8007c6a:	2b20      	cmp	r3, #32
 8007c6c:	d846      	bhi.n	8007cfc <objValue+0x1a8>
 8007c6e:	009a      	lsls	r2, r3, #2
 8007c70:	4b2c      	ldr	r3, [pc, #176]	@ (8007d24 <objValue+0x1d0>)
 8007c72:	18d3      	adds	r3, r2, r3
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	469f      	mov	pc, r3
            case '{':
                property->type    = JSON_OBJ;
 8007c78:	69bb      	ldr	r3, [r7, #24]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	741a      	strb	r2, [r3, #16]
                property->u.c.child = 0;
 8007c7e:	69bb      	ldr	r3, [r7, #24]
 8007c80:	2200      	movs	r2, #0
 8007c82:	609a      	str	r2, [r3, #8]
                property->sibling = obj;
 8007c84:	69bb      	ldr	r3, [r7, #24]
 8007c86:	68ba      	ldr	r2, [r7, #8]
 8007c88:	601a      	str	r2, [r3, #0]
                obj = property;
 8007c8a:	69bb      	ldr	r3, [r7, #24]
 8007c8c:	60bb      	str	r3, [r7, #8]
                ++ptr;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	3301      	adds	r3, #1
 8007c92:	60fb      	str	r3, [r7, #12]
                break;
 8007c94:	e03b      	b.n	8007d0e <objValue+0x1ba>
            case '[':
                property->type    = JSON_ARRAY;
 8007c96:	69bb      	ldr	r3, [r7, #24]
 8007c98:	2201      	movs	r2, #1
 8007c9a:	741a      	strb	r2, [r3, #16]
                property->u.c.child = 0;
 8007c9c:	69bb      	ldr	r3, [r7, #24]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	609a      	str	r2, [r3, #8]
                property->sibling = obj;
 8007ca2:	69bb      	ldr	r3, [r7, #24]
 8007ca4:	68ba      	ldr	r2, [r7, #8]
 8007ca6:	601a      	str	r2, [r3, #0]
                obj = property;
 8007ca8:	69bb      	ldr	r3, [r7, #24]
 8007caa:	60bb      	str	r3, [r7, #8]
                ++ptr;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	3301      	adds	r3, #1
 8007cb0:	60fb      	str	r3, [r7, #12]
                break;
 8007cb2:	e02c      	b.n	8007d0e <objValue+0x1ba>
            case '\"': ptr = textValue( ptr, property );  break;
 8007cb4:	69ba      	ldr	r2, [r7, #24]
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	0011      	movs	r1, r2
 8007cba:	0018      	movs	r0, r3
 8007cbc:	f7ff fd6c 	bl	8007798 <textValue>
 8007cc0:	0003      	movs	r3, r0
 8007cc2:	60fb      	str	r3, [r7, #12]
 8007cc4:	e023      	b.n	8007d0e <objValue+0x1ba>
            case 't':  ptr = trueValue( ptr, property );  break;
 8007cc6:	69ba      	ldr	r2, [r7, #24]
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	0011      	movs	r1, r2
 8007ccc:	0018      	movs	r0, r3
 8007cce:	f7ff fdcf 	bl	8007870 <trueValue>
 8007cd2:	0003      	movs	r3, r0
 8007cd4:	60fb      	str	r3, [r7, #12]
 8007cd6:	e01a      	b.n	8007d0e <objValue+0x1ba>
            case 'f':  ptr = falseValue( ptr, property ); break;
 8007cd8:	69ba      	ldr	r2, [r7, #24]
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	0011      	movs	r1, r2
 8007cde:	0018      	movs	r0, r3
 8007ce0:	f7ff fdd8 	bl	8007894 <falseValue>
 8007ce4:	0003      	movs	r3, r0
 8007ce6:	60fb      	str	r3, [r7, #12]
 8007ce8:	e011      	b.n	8007d0e <objValue+0x1ba>
            case 'n':  ptr = nullValue( ptr, property );  break;
 8007cea:	69ba      	ldr	r2, [r7, #24]
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	0011      	movs	r1, r2
 8007cf0:	0018      	movs	r0, r3
 8007cf2:	f7ff fde1 	bl	80078b8 <nullValue>
 8007cf6:	0003      	movs	r3, r0
 8007cf8:	60fb      	str	r3, [r7, #12]
 8007cfa:	e008      	b.n	8007d0e <objValue+0x1ba>
            default:   ptr = numValue( ptr, property );   break;
 8007cfc:	69ba      	ldr	r2, [r7, #24]
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	0011      	movs	r1, r2
 8007d02:	0018      	movs	r0, r3
 8007d04:	f7ff fe3c 	bl	8007980 <numValue>
 8007d08:	0003      	movs	r3, r0
 8007d0a:	60fb      	str	r3, [r7, #12]
 8007d0c:	46c0      	nop			@ (mov r8, r8)
        }
        if ( !ptr ) return 0;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d000      	beq.n	8007d16 <objValue+0x1c2>
 8007d14:	e736      	b.n	8007b84 <objValue+0x30>
 8007d16:	2300      	movs	r3, #0
 8007d18:	e000      	b.n	8007d1c <objValue+0x1c8>
    for(;;) {
 8007d1a:	e733      	b.n	8007b84 <objValue+0x30>
    }
}
 8007d1c:	0018      	movs	r0, r3
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	b008      	add	sp, #32
 8007d22:	bd80      	pop	{r7, pc}
 8007d24:	08011634 	.word	0x08011634

08007d28 <poolInit>:

/** Initialize a json pool.
  * @param pool The handler of the pool.
  * @return a instance of a json. */
static json_t* poolInit( jsonPool_t* pool ) {
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b084      	sub	sp, #16
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
    jsonStaticPool_t *spool = json_containerOf( pool, jsonStaticPool_t, pool );
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	3b0c      	subs	r3, #12
 8007d34:	60fb      	str	r3, [r7, #12]
    spool->nextFree = 1;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2201      	movs	r2, #1
 8007d3a:	609a      	str	r2, [r3, #8]
    return spool->mem;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
}
 8007d40:	0018      	movs	r0, r3
 8007d42:	46bd      	mov	sp, r7
 8007d44:	b004      	add	sp, #16
 8007d46:	bd80      	pop	{r7, pc}

08007d48 <poolAlloc>:

/** Create an instance of a json from a pool.
  * @param pool The handler of the pool.
  * @retval The handler of the new instance if success.
  * @retval Null pointer if the pool was empty. */
static json_t* poolAlloc( jsonPool_t* pool ) {
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b084      	sub	sp, #16
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
    jsonStaticPool_t *spool = json_containerOf( pool, jsonStaticPool_t, pool );
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	3b0c      	subs	r3, #12
 8007d54:	60fb      	str	r3, [r7, #12]
    if ( spool->nextFree >= spool->qty ) return 0;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	689a      	ldr	r2, [r3, #8]
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	685b      	ldr	r3, [r3, #4]
 8007d5e:	429a      	cmp	r2, r3
 8007d60:	d301      	bcc.n	8007d66 <poolAlloc+0x1e>
 8007d62:	2300      	movs	r3, #0
 8007d64:	e00b      	b.n	8007d7e <poolAlloc+0x36>
    return spool->mem + spool->nextFree++;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	6819      	ldr	r1, [r3, #0]
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	689a      	ldr	r2, [r3, #8]
 8007d6e:	1c50      	adds	r0, r2, #1
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	6098      	str	r0, [r3, #8]
 8007d74:	0013      	movs	r3, r2
 8007d76:	009b      	lsls	r3, r3, #2
 8007d78:	189b      	adds	r3, r3, r2
 8007d7a:	009b      	lsls	r3, r3, #2
 8007d7c:	18cb      	adds	r3, r1, r3
}
 8007d7e:	0018      	movs	r0, r3
 8007d80:	46bd      	mov	sp, r7
 8007d82:	b004      	add	sp, #16
 8007d84:	bd80      	pop	{r7, pc}

08007d86 <isOneOfThem>:

/** Checks whether an character belongs to set.
  * @param ch Character value to be checked.
  * @param set Set of characters. It is just a null-terminated string.
  * @return true or false there is membership or not. */
static bool isOneOfThem( char ch, char const* set ) {
 8007d86:	b580      	push	{r7, lr}
 8007d88:	b082      	sub	sp, #8
 8007d8a:	af00      	add	r7, sp, #0
 8007d8c:	0002      	movs	r2, r0
 8007d8e:	6039      	str	r1, [r7, #0]
 8007d90:	1dfb      	adds	r3, r7, #7
 8007d92:	701a      	strb	r2, [r3, #0]
    while( *set != '\0' )
 8007d94:	e009      	b.n	8007daa <isOneOfThem+0x24>
        if ( ch == *set++ )
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	1c5a      	adds	r2, r3, #1
 8007d9a:	603a      	str	r2, [r7, #0]
 8007d9c:	781b      	ldrb	r3, [r3, #0]
 8007d9e:	1dfa      	adds	r2, r7, #7
 8007da0:	7812      	ldrb	r2, [r2, #0]
 8007da2:	429a      	cmp	r2, r3
 8007da4:	d101      	bne.n	8007daa <isOneOfThem+0x24>
            return true;
 8007da6:	2301      	movs	r3, #1
 8007da8:	e004      	b.n	8007db4 <isOneOfThem+0x2e>
    while( *set != '\0' )
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	781b      	ldrb	r3, [r3, #0]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d1f1      	bne.n	8007d96 <isOneOfThem+0x10>
    return false;
 8007db2:	2300      	movs	r3, #0
}
 8007db4:	0018      	movs	r0, r3
 8007db6:	46bd      	mov	sp, r7
 8007db8:	b002      	add	sp, #8
 8007dba:	bd80      	pop	{r7, pc}

08007dbc <goWhile>:

/** Increases a pointer while it points to a character that belongs to a set.
  * @param str The initial pointer value.
  * @param set Set of characters. It is just a null-terminated string.
  * @return The final pointer value or null pointer if the null character was found. */
static char* goWhile( char* str, char const* set ) {
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b082      	sub	sp, #8
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
 8007dc4:	6039      	str	r1, [r7, #0]
    for(; *str != '\0'; ++str ) {
 8007dc6:	e012      	b.n	8007dee <goWhile+0x32>
        if ( !isOneOfThem( *str, set ) )
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	781b      	ldrb	r3, [r3, #0]
 8007dcc:	683a      	ldr	r2, [r7, #0]
 8007dce:	0011      	movs	r1, r2
 8007dd0:	0018      	movs	r0, r3
 8007dd2:	f7ff ffd8 	bl	8007d86 <isOneOfThem>
 8007dd6:	0003      	movs	r3, r0
 8007dd8:	001a      	movs	r2, r3
 8007dda:	2301      	movs	r3, #1
 8007ddc:	4053      	eors	r3, r2
 8007dde:	b2db      	uxtb	r3, r3
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d001      	beq.n	8007de8 <goWhile+0x2c>
            return str;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	e007      	b.n	8007df8 <goWhile+0x3c>
    for(; *str != '\0'; ++str ) {
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	3301      	adds	r3, #1
 8007dec:	607b      	str	r3, [r7, #4]
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	781b      	ldrb	r3, [r3, #0]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d1e8      	bne.n	8007dc8 <goWhile+0xc>
    }
    return 0;
 8007df6:	2300      	movs	r3, #0
}
 8007df8:	0018      	movs	r0, r3
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	b002      	add	sp, #8
 8007dfe:	bd80      	pop	{r7, pc}

08007e00 <goBlank>:
static char const* const blank = " \n\r\t\f";

/** Increases a pointer while it points to a white space character.
  * @param str The initial pointer value.
  * @return The final pointer value or null pointer if the null character was found. */
static char* goBlank( char* str ) {
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b082      	sub	sp, #8
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
    return goWhile( str, blank );
 8007e08:	4a05      	ldr	r2, [pc, #20]	@ (8007e20 <goBlank+0x20>)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	0011      	movs	r1, r2
 8007e0e:	0018      	movs	r0, r3
 8007e10:	f7ff ffd4 	bl	8007dbc <goWhile>
 8007e14:	0003      	movs	r3, r0
}
 8007e16:	0018      	movs	r0, r3
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	b002      	add	sp, #8
 8007e1c:	bd80      	pop	{r7, pc}
 8007e1e:	46c0      	nop			@ (mov r8, r8)
 8007e20:	08010ebc 	.word	0x08010ebc

08007e24 <goNum>:

/** Increases a pointer while it points to a decimal digit character.
  * @param str The initial pointer value.
  * @return The final pointer value or null pointer if the null character was found. */
static char* goNum( char* str ) {
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b082      	sub	sp, #8
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
    for( ; *str != '\0'; ++str ) {
 8007e2c:	e00e      	b.n	8007e4c <goNum+0x28>
        if ( !isdigit( (int)(*str) ) )
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	781b      	ldrb	r3, [r3, #0]
 8007e32:	1c5a      	adds	r2, r3, #1
 8007e34:	4b0a      	ldr	r3, [pc, #40]	@ (8007e60 <goNum+0x3c>)
 8007e36:	18d3      	adds	r3, r2, r3
 8007e38:	781b      	ldrb	r3, [r3, #0]
 8007e3a:	001a      	movs	r2, r3
 8007e3c:	2304      	movs	r3, #4
 8007e3e:	4013      	ands	r3, r2
 8007e40:	d101      	bne.n	8007e46 <goNum+0x22>
            return str;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	e007      	b.n	8007e56 <goNum+0x32>
    for( ; *str != '\0'; ++str ) {
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	3301      	adds	r3, #1
 8007e4a:	607b      	str	r3, [r7, #4]
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	781b      	ldrb	r3, [r3, #0]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d1ec      	bne.n	8007e2e <goNum+0xa>
    }
    return 0;
 8007e54:	2300      	movs	r3, #0
}
 8007e56:	0018      	movs	r0, r3
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	b002      	add	sp, #8
 8007e5c:	bd80      	pop	{r7, pc}
 8007e5e:	46c0      	nop			@ (mov r8, r8)
 8007e60:	080117d0 	.word	0x080117d0

08007e64 <setToNull>:
static char const* const endofblock = "}]";

/** Set a char to '\0' and increase its pointer if the char is different to '}' or ']'.
  * @param ch Pointer to character.
  * @return  Final value pointer. */
static char* setToNull( char* ch ) {
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b082      	sub	sp, #8
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
    if ( !isOneOfThem( *ch, endofblock ) ) *ch++ = '\0';
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	781b      	ldrb	r3, [r3, #0]
 8007e70:	4a0a      	ldr	r2, [pc, #40]	@ (8007e9c <setToNull+0x38>)
 8007e72:	0011      	movs	r1, r2
 8007e74:	0018      	movs	r0, r3
 8007e76:	f7ff ff86 	bl	8007d86 <isOneOfThem>
 8007e7a:	0003      	movs	r3, r0
 8007e7c:	001a      	movs	r2, r3
 8007e7e:	2301      	movs	r3, #1
 8007e80:	4053      	eors	r3, r2
 8007e82:	b2db      	uxtb	r3, r3
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d004      	beq.n	8007e92 <setToNull+0x2e>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	1c5a      	adds	r2, r3, #1
 8007e8c:	607a      	str	r2, [r7, #4]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	701a      	strb	r2, [r3, #0]
    return ch;
 8007e92:	687b      	ldr	r3, [r7, #4]
}
 8007e94:	0018      	movs	r0, r3
 8007e96:	46bd      	mov	sp, r7
 8007e98:	b002      	add	sp, #8
 8007e9a:	bd80      	pop	{r7, pc}
 8007e9c:	08010ec4 	.word	0x08010ec4

08007ea0 <isEndOfPrimitive>:

/** Indicate if a character is the end of a primitive value. */
static bool isEndOfPrimitive( char ch ) {
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b082      	sub	sp, #8
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	0002      	movs	r2, r0
 8007ea8:	1dfb      	adds	r3, r7, #7
 8007eaa:	701a      	strb	r2, [r3, #0]
    return ch == ',' || isOneOfThem( ch, blank ) || isOneOfThem( ch, endofblock );
 8007eac:	1dfb      	adds	r3, r7, #7
 8007eae:	781b      	ldrb	r3, [r3, #0]
 8007eb0:	2b2c      	cmp	r3, #44	@ 0x2c
 8007eb2:	d011      	beq.n	8007ed8 <isEndOfPrimitive+0x38>
 8007eb4:	4a0e      	ldr	r2, [pc, #56]	@ (8007ef0 <isEndOfPrimitive+0x50>)
 8007eb6:	1dfb      	adds	r3, r7, #7
 8007eb8:	781b      	ldrb	r3, [r3, #0]
 8007eba:	0011      	movs	r1, r2
 8007ebc:	0018      	movs	r0, r3
 8007ebe:	f7ff ff62 	bl	8007d86 <isOneOfThem>
 8007ec2:	1e03      	subs	r3, r0, #0
 8007ec4:	d108      	bne.n	8007ed8 <isEndOfPrimitive+0x38>
 8007ec6:	4a0b      	ldr	r2, [pc, #44]	@ (8007ef4 <isEndOfPrimitive+0x54>)
 8007ec8:	1dfb      	adds	r3, r7, #7
 8007eca:	781b      	ldrb	r3, [r3, #0]
 8007ecc:	0011      	movs	r1, r2
 8007ece:	0018      	movs	r0, r3
 8007ed0:	f7ff ff59 	bl	8007d86 <isOneOfThem>
 8007ed4:	1e03      	subs	r3, r0, #0
 8007ed6:	d001      	beq.n	8007edc <isEndOfPrimitive+0x3c>
 8007ed8:	2301      	movs	r3, #1
 8007eda:	e000      	b.n	8007ede <isEndOfPrimitive+0x3e>
 8007edc:	2300      	movs	r3, #0
 8007ede:	1c1a      	adds	r2, r3, #0
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	4013      	ands	r3, r2
 8007ee4:	b2db      	uxtb	r3, r3
}
 8007ee6:	0018      	movs	r0, r3
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	b002      	add	sp, #8
 8007eec:	bd80      	pop	{r7, pc}
 8007eee:	46c0      	nop			@ (mov r8, r8)
 8007ef0:	08010ebc 	.word	0x08010ebc
 8007ef4:	08010ec4 	.word	0x08010ec4

08007ef8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8007ef8:	480d      	ldr	r0, [pc, #52]	@ (8007f30 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8007efa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8007efc:	f7ff faac 	bl	8007458 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007f00:	480c      	ldr	r0, [pc, #48]	@ (8007f34 <LoopForever+0x6>)
  ldr r1, =_edata
 8007f02:	490d      	ldr	r1, [pc, #52]	@ (8007f38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8007f04:	4a0d      	ldr	r2, [pc, #52]	@ (8007f3c <LoopForever+0xe>)
  movs r3, #0
 8007f06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007f08:	e002      	b.n	8007f10 <LoopCopyDataInit>

08007f0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007f0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007f0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007f0e:	3304      	adds	r3, #4

08007f10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007f10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007f12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007f14:	d3f9      	bcc.n	8007f0a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007f16:	4a0a      	ldr	r2, [pc, #40]	@ (8007f40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8007f18:	4c0a      	ldr	r4, [pc, #40]	@ (8007f44 <LoopForever+0x16>)
  movs r3, #0
 8007f1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007f1c:	e001      	b.n	8007f22 <LoopFillZerobss>

08007f1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007f1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007f20:	3204      	adds	r2, #4

08007f22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007f22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007f24:	d3fb      	bcc.n	8007f1e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8007f26:	f006 fb97 	bl	800e658 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8007f2a:	f7fc fb89 	bl	8004640 <main>

08007f2e <LoopForever>:

LoopForever:
  b LoopForever
 8007f2e:	e7fe      	b.n	8007f2e <LoopForever>
  ldr   r0, =_estack
 8007f30:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8007f34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007f38:	20000bb0 	.word	0x20000bb0
  ldr r2, =_sidata
 8007f3c:	08011b48 	.word	0x08011b48
  ldr r2, =_sbss
 8007f40:	20000bb0 	.word	0x20000bb0
  ldr r4, =_ebss
 8007f44:	20001fac 	.word	0x20001fac

08007f48 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007f48:	e7fe      	b.n	8007f48 <ADC1_COMP_IRQHandler>
	...

08007f4c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b082      	sub	sp, #8
 8007f50:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8007f52:	1dfb      	adds	r3, r7, #7
 8007f54:	2200      	movs	r2, #0
 8007f56:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007f58:	4b0b      	ldr	r3, [pc, #44]	@ (8007f88 <HAL_Init+0x3c>)
 8007f5a:	681a      	ldr	r2, [r3, #0]
 8007f5c:	4b0a      	ldr	r3, [pc, #40]	@ (8007f88 <HAL_Init+0x3c>)
 8007f5e:	2180      	movs	r1, #128	@ 0x80
 8007f60:	0049      	lsls	r1, r1, #1
 8007f62:	430a      	orrs	r2, r1
 8007f64:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007f66:	2003      	movs	r0, #3
 8007f68:	f000 f810 	bl	8007f8c <HAL_InitTick>
 8007f6c:	1e03      	subs	r3, r0, #0
 8007f6e:	d003      	beq.n	8007f78 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8007f70:	1dfb      	adds	r3, r7, #7
 8007f72:	2201      	movs	r2, #1
 8007f74:	701a      	strb	r2, [r3, #0]
 8007f76:	e001      	b.n	8007f7c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8007f78:	f7fe ff28 	bl	8006dcc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8007f7c:	1dfb      	adds	r3, r7, #7
 8007f7e:	781b      	ldrb	r3, [r3, #0]
}
 8007f80:	0018      	movs	r0, r3
 8007f82:	46bd      	mov	sp, r7
 8007f84:	b002      	add	sp, #8
 8007f86:	bd80      	pop	{r7, pc}
 8007f88:	40022000 	.word	0x40022000

08007f8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007f8c:	b590      	push	{r4, r7, lr}
 8007f8e:	b085      	sub	sp, #20
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8007f94:	230f      	movs	r3, #15
 8007f96:	18fb      	adds	r3, r7, r3
 8007f98:	2200      	movs	r2, #0
 8007f9a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8007f9c:	4b1d      	ldr	r3, [pc, #116]	@ (8008014 <HAL_InitTick+0x88>)
 8007f9e:	781b      	ldrb	r3, [r3, #0]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d02b      	beq.n	8007ffc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8007fa4:	4b1c      	ldr	r3, [pc, #112]	@ (8008018 <HAL_InitTick+0x8c>)
 8007fa6:	681c      	ldr	r4, [r3, #0]
 8007fa8:	4b1a      	ldr	r3, [pc, #104]	@ (8008014 <HAL_InitTick+0x88>)
 8007faa:	781b      	ldrb	r3, [r3, #0]
 8007fac:	0019      	movs	r1, r3
 8007fae:	23fa      	movs	r3, #250	@ 0xfa
 8007fb0:	0098      	lsls	r0, r3, #2
 8007fb2:	f7f8 f8cd 	bl	8000150 <__udivsi3>
 8007fb6:	0003      	movs	r3, r0
 8007fb8:	0019      	movs	r1, r3
 8007fba:	0020      	movs	r0, r4
 8007fbc:	f7f8 f8c8 	bl	8000150 <__udivsi3>
 8007fc0:	0003      	movs	r3, r0
 8007fc2:	0018      	movs	r0, r3
 8007fc4:	f000 f953 	bl	800826e <HAL_SYSTICK_Config>
 8007fc8:	1e03      	subs	r3, r0, #0
 8007fca:	d112      	bne.n	8007ff2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2b03      	cmp	r3, #3
 8007fd0:	d80a      	bhi.n	8007fe8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007fd2:	6879      	ldr	r1, [r7, #4]
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	425b      	negs	r3, r3
 8007fd8:	2200      	movs	r2, #0
 8007fda:	0018      	movs	r0, r3
 8007fdc:	f000 f922 	bl	8008224 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8007fe0:	4b0e      	ldr	r3, [pc, #56]	@ (800801c <HAL_InitTick+0x90>)
 8007fe2:	687a      	ldr	r2, [r7, #4]
 8007fe4:	601a      	str	r2, [r3, #0]
 8007fe6:	e00d      	b.n	8008004 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8007fe8:	230f      	movs	r3, #15
 8007fea:	18fb      	adds	r3, r7, r3
 8007fec:	2201      	movs	r2, #1
 8007fee:	701a      	strb	r2, [r3, #0]
 8007ff0:	e008      	b.n	8008004 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8007ff2:	230f      	movs	r3, #15
 8007ff4:	18fb      	adds	r3, r7, r3
 8007ff6:	2201      	movs	r2, #1
 8007ff8:	701a      	strb	r2, [r3, #0]
 8007ffa:	e003      	b.n	8008004 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8007ffc:	230f      	movs	r3, #15
 8007ffe:	18fb      	adds	r3, r7, r3
 8008000:	2201      	movs	r2, #1
 8008002:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8008004:	230f      	movs	r3, #15
 8008006:	18fb      	adds	r3, r7, r3
 8008008:	781b      	ldrb	r3, [r3, #0]
}
 800800a:	0018      	movs	r0, r3
 800800c:	46bd      	mov	sp, r7
 800800e:	b005      	add	sp, #20
 8008010:	bd90      	pop	{r4, r7, pc}
 8008012:	46c0      	nop			@ (mov r8, r8)
 8008014:	200009d0 	.word	0x200009d0
 8008018:	200009c8 	.word	0x200009c8
 800801c:	200009cc 	.word	0x200009cc

08008020 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8008024:	4b05      	ldr	r3, [pc, #20]	@ (800803c <HAL_IncTick+0x1c>)
 8008026:	781b      	ldrb	r3, [r3, #0]
 8008028:	001a      	movs	r2, r3
 800802a:	4b05      	ldr	r3, [pc, #20]	@ (8008040 <HAL_IncTick+0x20>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	18d2      	adds	r2, r2, r3
 8008030:	4b03      	ldr	r3, [pc, #12]	@ (8008040 <HAL_IncTick+0x20>)
 8008032:	601a      	str	r2, [r3, #0]
}
 8008034:	46c0      	nop			@ (mov r8, r8)
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}
 800803a:	46c0      	nop			@ (mov r8, r8)
 800803c:	200009d0 	.word	0x200009d0
 8008040:	20001e5c 	.word	0x20001e5c

08008044 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	af00      	add	r7, sp, #0
  return uwTick;
 8008048:	4b02      	ldr	r3, [pc, #8]	@ (8008054 <HAL_GetTick+0x10>)
 800804a:	681b      	ldr	r3, [r3, #0]
}
 800804c:	0018      	movs	r0, r3
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}
 8008052:	46c0      	nop			@ (mov r8, r8)
 8008054:	20001e5c 	.word	0x20001e5c

08008058 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b084      	sub	sp, #16
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008060:	f7ff fff0 	bl	8008044 <HAL_GetTick>
 8008064:	0003      	movs	r3, r0
 8008066:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	3301      	adds	r3, #1
 8008070:	d005      	beq.n	800807e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008072:	4b0a      	ldr	r3, [pc, #40]	@ (800809c <HAL_Delay+0x44>)
 8008074:	781b      	ldrb	r3, [r3, #0]
 8008076:	001a      	movs	r2, r3
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	189b      	adds	r3, r3, r2
 800807c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800807e:	46c0      	nop			@ (mov r8, r8)
 8008080:	f7ff ffe0 	bl	8008044 <HAL_GetTick>
 8008084:	0002      	movs	r2, r0
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	1ad3      	subs	r3, r2, r3
 800808a:	68fa      	ldr	r2, [r7, #12]
 800808c:	429a      	cmp	r2, r3
 800808e:	d8f7      	bhi.n	8008080 <HAL_Delay+0x28>
  {
  }
}
 8008090:	46c0      	nop			@ (mov r8, r8)
 8008092:	46c0      	nop			@ (mov r8, r8)
 8008094:	46bd      	mov	sp, r7
 8008096:	b004      	add	sp, #16
 8008098:	bd80      	pop	{r7, pc}
 800809a:	46c0      	nop			@ (mov r8, r8)
 800809c:	200009d0 	.word	0x200009d0

080080a0 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b082      	sub	sp, #8
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80080a8:	4b06      	ldr	r3, [pc, #24]	@ (80080c4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	4a06      	ldr	r2, [pc, #24]	@ (80080c8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80080ae:	4013      	ands	r3, r2
 80080b0:	0019      	movs	r1, r3
 80080b2:	4b04      	ldr	r3, [pc, #16]	@ (80080c4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80080b4:	687a      	ldr	r2, [r7, #4]
 80080b6:	430a      	orrs	r2, r1
 80080b8:	601a      	str	r2, [r3, #0]
}
 80080ba:	46c0      	nop			@ (mov r8, r8)
 80080bc:	46bd      	mov	sp, r7
 80080be:	b002      	add	sp, #8
 80080c0:	bd80      	pop	{r7, pc}
 80080c2:	46c0      	nop			@ (mov r8, r8)
 80080c4:	40010000 	.word	0x40010000
 80080c8:	fffff9ff 	.word	0xfffff9ff

080080cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b082      	sub	sp, #8
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	0002      	movs	r2, r0
 80080d4:	1dfb      	adds	r3, r7, #7
 80080d6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80080d8:	1dfb      	adds	r3, r7, #7
 80080da:	781b      	ldrb	r3, [r3, #0]
 80080dc:	2b7f      	cmp	r3, #127	@ 0x7f
 80080de:	d809      	bhi.n	80080f4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80080e0:	1dfb      	adds	r3, r7, #7
 80080e2:	781b      	ldrb	r3, [r3, #0]
 80080e4:	001a      	movs	r2, r3
 80080e6:	231f      	movs	r3, #31
 80080e8:	401a      	ands	r2, r3
 80080ea:	4b04      	ldr	r3, [pc, #16]	@ (80080fc <__NVIC_EnableIRQ+0x30>)
 80080ec:	2101      	movs	r1, #1
 80080ee:	4091      	lsls	r1, r2
 80080f0:	000a      	movs	r2, r1
 80080f2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80080f4:	46c0      	nop			@ (mov r8, r8)
 80080f6:	46bd      	mov	sp, r7
 80080f8:	b002      	add	sp, #8
 80080fa:	bd80      	pop	{r7, pc}
 80080fc:	e000e100 	.word	0xe000e100

08008100 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008100:	b590      	push	{r4, r7, lr}
 8008102:	b083      	sub	sp, #12
 8008104:	af00      	add	r7, sp, #0
 8008106:	0002      	movs	r2, r0
 8008108:	6039      	str	r1, [r7, #0]
 800810a:	1dfb      	adds	r3, r7, #7
 800810c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800810e:	1dfb      	adds	r3, r7, #7
 8008110:	781b      	ldrb	r3, [r3, #0]
 8008112:	2b7f      	cmp	r3, #127	@ 0x7f
 8008114:	d828      	bhi.n	8008168 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008116:	4a2f      	ldr	r2, [pc, #188]	@ (80081d4 <__NVIC_SetPriority+0xd4>)
 8008118:	1dfb      	adds	r3, r7, #7
 800811a:	781b      	ldrb	r3, [r3, #0]
 800811c:	b25b      	sxtb	r3, r3
 800811e:	089b      	lsrs	r3, r3, #2
 8008120:	33c0      	adds	r3, #192	@ 0xc0
 8008122:	009b      	lsls	r3, r3, #2
 8008124:	589b      	ldr	r3, [r3, r2]
 8008126:	1dfa      	adds	r2, r7, #7
 8008128:	7812      	ldrb	r2, [r2, #0]
 800812a:	0011      	movs	r1, r2
 800812c:	2203      	movs	r2, #3
 800812e:	400a      	ands	r2, r1
 8008130:	00d2      	lsls	r2, r2, #3
 8008132:	21ff      	movs	r1, #255	@ 0xff
 8008134:	4091      	lsls	r1, r2
 8008136:	000a      	movs	r2, r1
 8008138:	43d2      	mvns	r2, r2
 800813a:	401a      	ands	r2, r3
 800813c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	019b      	lsls	r3, r3, #6
 8008142:	22ff      	movs	r2, #255	@ 0xff
 8008144:	401a      	ands	r2, r3
 8008146:	1dfb      	adds	r3, r7, #7
 8008148:	781b      	ldrb	r3, [r3, #0]
 800814a:	0018      	movs	r0, r3
 800814c:	2303      	movs	r3, #3
 800814e:	4003      	ands	r3, r0
 8008150:	00db      	lsls	r3, r3, #3
 8008152:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008154:	481f      	ldr	r0, [pc, #124]	@ (80081d4 <__NVIC_SetPriority+0xd4>)
 8008156:	1dfb      	adds	r3, r7, #7
 8008158:	781b      	ldrb	r3, [r3, #0]
 800815a:	b25b      	sxtb	r3, r3
 800815c:	089b      	lsrs	r3, r3, #2
 800815e:	430a      	orrs	r2, r1
 8008160:	33c0      	adds	r3, #192	@ 0xc0
 8008162:	009b      	lsls	r3, r3, #2
 8008164:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8008166:	e031      	b.n	80081cc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008168:	4a1b      	ldr	r2, [pc, #108]	@ (80081d8 <__NVIC_SetPriority+0xd8>)
 800816a:	1dfb      	adds	r3, r7, #7
 800816c:	781b      	ldrb	r3, [r3, #0]
 800816e:	0019      	movs	r1, r3
 8008170:	230f      	movs	r3, #15
 8008172:	400b      	ands	r3, r1
 8008174:	3b08      	subs	r3, #8
 8008176:	089b      	lsrs	r3, r3, #2
 8008178:	3306      	adds	r3, #6
 800817a:	009b      	lsls	r3, r3, #2
 800817c:	18d3      	adds	r3, r2, r3
 800817e:	3304      	adds	r3, #4
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	1dfa      	adds	r2, r7, #7
 8008184:	7812      	ldrb	r2, [r2, #0]
 8008186:	0011      	movs	r1, r2
 8008188:	2203      	movs	r2, #3
 800818a:	400a      	ands	r2, r1
 800818c:	00d2      	lsls	r2, r2, #3
 800818e:	21ff      	movs	r1, #255	@ 0xff
 8008190:	4091      	lsls	r1, r2
 8008192:	000a      	movs	r2, r1
 8008194:	43d2      	mvns	r2, r2
 8008196:	401a      	ands	r2, r3
 8008198:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	019b      	lsls	r3, r3, #6
 800819e:	22ff      	movs	r2, #255	@ 0xff
 80081a0:	401a      	ands	r2, r3
 80081a2:	1dfb      	adds	r3, r7, #7
 80081a4:	781b      	ldrb	r3, [r3, #0]
 80081a6:	0018      	movs	r0, r3
 80081a8:	2303      	movs	r3, #3
 80081aa:	4003      	ands	r3, r0
 80081ac:	00db      	lsls	r3, r3, #3
 80081ae:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80081b0:	4809      	ldr	r0, [pc, #36]	@ (80081d8 <__NVIC_SetPriority+0xd8>)
 80081b2:	1dfb      	adds	r3, r7, #7
 80081b4:	781b      	ldrb	r3, [r3, #0]
 80081b6:	001c      	movs	r4, r3
 80081b8:	230f      	movs	r3, #15
 80081ba:	4023      	ands	r3, r4
 80081bc:	3b08      	subs	r3, #8
 80081be:	089b      	lsrs	r3, r3, #2
 80081c0:	430a      	orrs	r2, r1
 80081c2:	3306      	adds	r3, #6
 80081c4:	009b      	lsls	r3, r3, #2
 80081c6:	18c3      	adds	r3, r0, r3
 80081c8:	3304      	adds	r3, #4
 80081ca:	601a      	str	r2, [r3, #0]
}
 80081cc:	46c0      	nop			@ (mov r8, r8)
 80081ce:	46bd      	mov	sp, r7
 80081d0:	b003      	add	sp, #12
 80081d2:	bd90      	pop	{r4, r7, pc}
 80081d4:	e000e100 	.word	0xe000e100
 80081d8:	e000ed00 	.word	0xe000ed00

080081dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b082      	sub	sp, #8
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	1e5a      	subs	r2, r3, #1
 80081e8:	2380      	movs	r3, #128	@ 0x80
 80081ea:	045b      	lsls	r3, r3, #17
 80081ec:	429a      	cmp	r2, r3
 80081ee:	d301      	bcc.n	80081f4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80081f0:	2301      	movs	r3, #1
 80081f2:	e010      	b.n	8008216 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80081f4:	4b0a      	ldr	r3, [pc, #40]	@ (8008220 <SysTick_Config+0x44>)
 80081f6:	687a      	ldr	r2, [r7, #4]
 80081f8:	3a01      	subs	r2, #1
 80081fa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80081fc:	2301      	movs	r3, #1
 80081fe:	425b      	negs	r3, r3
 8008200:	2103      	movs	r1, #3
 8008202:	0018      	movs	r0, r3
 8008204:	f7ff ff7c 	bl	8008100 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008208:	4b05      	ldr	r3, [pc, #20]	@ (8008220 <SysTick_Config+0x44>)
 800820a:	2200      	movs	r2, #0
 800820c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800820e:	4b04      	ldr	r3, [pc, #16]	@ (8008220 <SysTick_Config+0x44>)
 8008210:	2207      	movs	r2, #7
 8008212:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008214:	2300      	movs	r3, #0
}
 8008216:	0018      	movs	r0, r3
 8008218:	46bd      	mov	sp, r7
 800821a:	b002      	add	sp, #8
 800821c:	bd80      	pop	{r7, pc}
 800821e:	46c0      	nop			@ (mov r8, r8)
 8008220:	e000e010 	.word	0xe000e010

08008224 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b084      	sub	sp, #16
 8008228:	af00      	add	r7, sp, #0
 800822a:	60b9      	str	r1, [r7, #8]
 800822c:	607a      	str	r2, [r7, #4]
 800822e:	210f      	movs	r1, #15
 8008230:	187b      	adds	r3, r7, r1
 8008232:	1c02      	adds	r2, r0, #0
 8008234:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8008236:	68ba      	ldr	r2, [r7, #8]
 8008238:	187b      	adds	r3, r7, r1
 800823a:	781b      	ldrb	r3, [r3, #0]
 800823c:	b25b      	sxtb	r3, r3
 800823e:	0011      	movs	r1, r2
 8008240:	0018      	movs	r0, r3
 8008242:	f7ff ff5d 	bl	8008100 <__NVIC_SetPriority>
}
 8008246:	46c0      	nop			@ (mov r8, r8)
 8008248:	46bd      	mov	sp, r7
 800824a:	b004      	add	sp, #16
 800824c:	bd80      	pop	{r7, pc}

0800824e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800824e:	b580      	push	{r7, lr}
 8008250:	b082      	sub	sp, #8
 8008252:	af00      	add	r7, sp, #0
 8008254:	0002      	movs	r2, r0
 8008256:	1dfb      	adds	r3, r7, #7
 8008258:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800825a:	1dfb      	adds	r3, r7, #7
 800825c:	781b      	ldrb	r3, [r3, #0]
 800825e:	b25b      	sxtb	r3, r3
 8008260:	0018      	movs	r0, r3
 8008262:	f7ff ff33 	bl	80080cc <__NVIC_EnableIRQ>
}
 8008266:	46c0      	nop			@ (mov r8, r8)
 8008268:	46bd      	mov	sp, r7
 800826a:	b002      	add	sp, #8
 800826c:	bd80      	pop	{r7, pc}

0800826e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800826e:	b580      	push	{r7, lr}
 8008270:	b082      	sub	sp, #8
 8008272:	af00      	add	r7, sp, #0
 8008274:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	0018      	movs	r0, r3
 800827a:	f7ff ffaf 	bl	80081dc <SysTick_Config>
 800827e:	0003      	movs	r3, r0
}
 8008280:	0018      	movs	r0, r3
 8008282:	46bd      	mov	sp, r7
 8008284:	b002      	add	sp, #8
 8008286:	bd80      	pop	{r7, pc}

08008288 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b086      	sub	sp, #24
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
 8008290:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008292:	2300      	movs	r3, #0
 8008294:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008296:	e14d      	b.n	8008534 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	2101      	movs	r1, #1
 800829e:	697a      	ldr	r2, [r7, #20]
 80082a0:	4091      	lsls	r1, r2
 80082a2:	000a      	movs	r2, r1
 80082a4:	4013      	ands	r3, r2
 80082a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d100      	bne.n	80082b0 <HAL_GPIO_Init+0x28>
 80082ae:	e13e      	b.n	800852e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	685b      	ldr	r3, [r3, #4]
 80082b4:	2203      	movs	r2, #3
 80082b6:	4013      	ands	r3, r2
 80082b8:	2b01      	cmp	r3, #1
 80082ba:	d005      	beq.n	80082c8 <HAL_GPIO_Init+0x40>
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	685b      	ldr	r3, [r3, #4]
 80082c0:	2203      	movs	r2, #3
 80082c2:	4013      	ands	r3, r2
 80082c4:	2b02      	cmp	r3, #2
 80082c6:	d130      	bne.n	800832a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	689b      	ldr	r3, [r3, #8]
 80082cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	005b      	lsls	r3, r3, #1
 80082d2:	2203      	movs	r2, #3
 80082d4:	409a      	lsls	r2, r3
 80082d6:	0013      	movs	r3, r2
 80082d8:	43da      	mvns	r2, r3
 80082da:	693b      	ldr	r3, [r7, #16]
 80082dc:	4013      	ands	r3, r2
 80082de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	68da      	ldr	r2, [r3, #12]
 80082e4:	697b      	ldr	r3, [r7, #20]
 80082e6:	005b      	lsls	r3, r3, #1
 80082e8:	409a      	lsls	r2, r3
 80082ea:	0013      	movs	r3, r2
 80082ec:	693a      	ldr	r2, [r7, #16]
 80082ee:	4313      	orrs	r3, r2
 80082f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	693a      	ldr	r2, [r7, #16]
 80082f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	685b      	ldr	r3, [r3, #4]
 80082fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80082fe:	2201      	movs	r2, #1
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	409a      	lsls	r2, r3
 8008304:	0013      	movs	r3, r2
 8008306:	43da      	mvns	r2, r3
 8008308:	693b      	ldr	r3, [r7, #16]
 800830a:	4013      	ands	r3, r2
 800830c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	685b      	ldr	r3, [r3, #4]
 8008312:	091b      	lsrs	r3, r3, #4
 8008314:	2201      	movs	r2, #1
 8008316:	401a      	ands	r2, r3
 8008318:	697b      	ldr	r3, [r7, #20]
 800831a:	409a      	lsls	r2, r3
 800831c:	0013      	movs	r3, r2
 800831e:	693a      	ldr	r2, [r7, #16]
 8008320:	4313      	orrs	r3, r2
 8008322:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	693a      	ldr	r2, [r7, #16]
 8008328:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	685b      	ldr	r3, [r3, #4]
 800832e:	2203      	movs	r2, #3
 8008330:	4013      	ands	r3, r2
 8008332:	2b03      	cmp	r3, #3
 8008334:	d017      	beq.n	8008366 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	68db      	ldr	r3, [r3, #12]
 800833a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800833c:	697b      	ldr	r3, [r7, #20]
 800833e:	005b      	lsls	r3, r3, #1
 8008340:	2203      	movs	r2, #3
 8008342:	409a      	lsls	r2, r3
 8008344:	0013      	movs	r3, r2
 8008346:	43da      	mvns	r2, r3
 8008348:	693b      	ldr	r3, [r7, #16]
 800834a:	4013      	ands	r3, r2
 800834c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	689a      	ldr	r2, [r3, #8]
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	005b      	lsls	r3, r3, #1
 8008356:	409a      	lsls	r2, r3
 8008358:	0013      	movs	r3, r2
 800835a:	693a      	ldr	r2, [r7, #16]
 800835c:	4313      	orrs	r3, r2
 800835e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	693a      	ldr	r2, [r7, #16]
 8008364:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	685b      	ldr	r3, [r3, #4]
 800836a:	2203      	movs	r2, #3
 800836c:	4013      	ands	r3, r2
 800836e:	2b02      	cmp	r3, #2
 8008370:	d123      	bne.n	80083ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8008372:	697b      	ldr	r3, [r7, #20]
 8008374:	08da      	lsrs	r2, r3, #3
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	3208      	adds	r2, #8
 800837a:	0092      	lsls	r2, r2, #2
 800837c:	58d3      	ldr	r3, [r2, r3]
 800837e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008380:	697b      	ldr	r3, [r7, #20]
 8008382:	2207      	movs	r2, #7
 8008384:	4013      	ands	r3, r2
 8008386:	009b      	lsls	r3, r3, #2
 8008388:	220f      	movs	r2, #15
 800838a:	409a      	lsls	r2, r3
 800838c:	0013      	movs	r3, r2
 800838e:	43da      	mvns	r2, r3
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	4013      	ands	r3, r2
 8008394:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	691a      	ldr	r2, [r3, #16]
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	2107      	movs	r1, #7
 800839e:	400b      	ands	r3, r1
 80083a0:	009b      	lsls	r3, r3, #2
 80083a2:	409a      	lsls	r2, r3
 80083a4:	0013      	movs	r3, r2
 80083a6:	693a      	ldr	r2, [r7, #16]
 80083a8:	4313      	orrs	r3, r2
 80083aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80083ac:	697b      	ldr	r3, [r7, #20]
 80083ae:	08da      	lsrs	r2, r3, #3
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	3208      	adds	r2, #8
 80083b4:	0092      	lsls	r2, r2, #2
 80083b6:	6939      	ldr	r1, [r7, #16]
 80083b8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80083c0:	697b      	ldr	r3, [r7, #20]
 80083c2:	005b      	lsls	r3, r3, #1
 80083c4:	2203      	movs	r2, #3
 80083c6:	409a      	lsls	r2, r3
 80083c8:	0013      	movs	r3, r2
 80083ca:	43da      	mvns	r2, r3
 80083cc:	693b      	ldr	r3, [r7, #16]
 80083ce:	4013      	ands	r3, r2
 80083d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	685b      	ldr	r3, [r3, #4]
 80083d6:	2203      	movs	r2, #3
 80083d8:	401a      	ands	r2, r3
 80083da:	697b      	ldr	r3, [r7, #20]
 80083dc:	005b      	lsls	r3, r3, #1
 80083de:	409a      	lsls	r2, r3
 80083e0:	0013      	movs	r3, r2
 80083e2:	693a      	ldr	r2, [r7, #16]
 80083e4:	4313      	orrs	r3, r2
 80083e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	693a      	ldr	r2, [r7, #16]
 80083ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	685a      	ldr	r2, [r3, #4]
 80083f2:	23c0      	movs	r3, #192	@ 0xc0
 80083f4:	029b      	lsls	r3, r3, #10
 80083f6:	4013      	ands	r3, r2
 80083f8:	d100      	bne.n	80083fc <HAL_GPIO_Init+0x174>
 80083fa:	e098      	b.n	800852e <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80083fc:	4a53      	ldr	r2, [pc, #332]	@ (800854c <HAL_GPIO_Init+0x2c4>)
 80083fe:	697b      	ldr	r3, [r7, #20]
 8008400:	089b      	lsrs	r3, r3, #2
 8008402:	3318      	adds	r3, #24
 8008404:	009b      	lsls	r3, r3, #2
 8008406:	589b      	ldr	r3, [r3, r2]
 8008408:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	2203      	movs	r2, #3
 800840e:	4013      	ands	r3, r2
 8008410:	00db      	lsls	r3, r3, #3
 8008412:	220f      	movs	r2, #15
 8008414:	409a      	lsls	r2, r3
 8008416:	0013      	movs	r3, r2
 8008418:	43da      	mvns	r2, r3
 800841a:	693b      	ldr	r3, [r7, #16]
 800841c:	4013      	ands	r3, r2
 800841e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8008420:	687a      	ldr	r2, [r7, #4]
 8008422:	23a0      	movs	r3, #160	@ 0xa0
 8008424:	05db      	lsls	r3, r3, #23
 8008426:	429a      	cmp	r2, r3
 8008428:	d019      	beq.n	800845e <HAL_GPIO_Init+0x1d6>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	4a48      	ldr	r2, [pc, #288]	@ (8008550 <HAL_GPIO_Init+0x2c8>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d013      	beq.n	800845a <HAL_GPIO_Init+0x1d2>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	4a47      	ldr	r2, [pc, #284]	@ (8008554 <HAL_GPIO_Init+0x2cc>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d00d      	beq.n	8008456 <HAL_GPIO_Init+0x1ce>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	4a46      	ldr	r2, [pc, #280]	@ (8008558 <HAL_GPIO_Init+0x2d0>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d007      	beq.n	8008452 <HAL_GPIO_Init+0x1ca>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	4a45      	ldr	r2, [pc, #276]	@ (800855c <HAL_GPIO_Init+0x2d4>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d101      	bne.n	800844e <HAL_GPIO_Init+0x1c6>
 800844a:	2304      	movs	r3, #4
 800844c:	e008      	b.n	8008460 <HAL_GPIO_Init+0x1d8>
 800844e:	2305      	movs	r3, #5
 8008450:	e006      	b.n	8008460 <HAL_GPIO_Init+0x1d8>
 8008452:	2303      	movs	r3, #3
 8008454:	e004      	b.n	8008460 <HAL_GPIO_Init+0x1d8>
 8008456:	2302      	movs	r3, #2
 8008458:	e002      	b.n	8008460 <HAL_GPIO_Init+0x1d8>
 800845a:	2301      	movs	r3, #1
 800845c:	e000      	b.n	8008460 <HAL_GPIO_Init+0x1d8>
 800845e:	2300      	movs	r3, #0
 8008460:	697a      	ldr	r2, [r7, #20]
 8008462:	2103      	movs	r1, #3
 8008464:	400a      	ands	r2, r1
 8008466:	00d2      	lsls	r2, r2, #3
 8008468:	4093      	lsls	r3, r2
 800846a:	693a      	ldr	r2, [r7, #16]
 800846c:	4313      	orrs	r3, r2
 800846e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8008470:	4936      	ldr	r1, [pc, #216]	@ (800854c <HAL_GPIO_Init+0x2c4>)
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	089b      	lsrs	r3, r3, #2
 8008476:	3318      	adds	r3, #24
 8008478:	009b      	lsls	r3, r3, #2
 800847a:	693a      	ldr	r2, [r7, #16]
 800847c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800847e:	4b33      	ldr	r3, [pc, #204]	@ (800854c <HAL_GPIO_Init+0x2c4>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	43da      	mvns	r2, r3
 8008488:	693b      	ldr	r3, [r7, #16]
 800848a:	4013      	ands	r3, r2
 800848c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	685a      	ldr	r2, [r3, #4]
 8008492:	2380      	movs	r3, #128	@ 0x80
 8008494:	035b      	lsls	r3, r3, #13
 8008496:	4013      	ands	r3, r2
 8008498:	d003      	beq.n	80084a2 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800849a:	693a      	ldr	r2, [r7, #16]
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	4313      	orrs	r3, r2
 80084a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80084a2:	4b2a      	ldr	r3, [pc, #168]	@ (800854c <HAL_GPIO_Init+0x2c4>)
 80084a4:	693a      	ldr	r2, [r7, #16]
 80084a6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80084a8:	4b28      	ldr	r3, [pc, #160]	@ (800854c <HAL_GPIO_Init+0x2c4>)
 80084aa:	685b      	ldr	r3, [r3, #4]
 80084ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	43da      	mvns	r2, r3
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	4013      	ands	r3, r2
 80084b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	685a      	ldr	r2, [r3, #4]
 80084bc:	2380      	movs	r3, #128	@ 0x80
 80084be:	039b      	lsls	r3, r3, #14
 80084c0:	4013      	ands	r3, r2
 80084c2:	d003      	beq.n	80084cc <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80084c4:	693a      	ldr	r2, [r7, #16]
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	4313      	orrs	r3, r2
 80084ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80084cc:	4b1f      	ldr	r3, [pc, #124]	@ (800854c <HAL_GPIO_Init+0x2c4>)
 80084ce:	693a      	ldr	r2, [r7, #16]
 80084d0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80084d2:	4a1e      	ldr	r2, [pc, #120]	@ (800854c <HAL_GPIO_Init+0x2c4>)
 80084d4:	2384      	movs	r3, #132	@ 0x84
 80084d6:	58d3      	ldr	r3, [r2, r3]
 80084d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	43da      	mvns	r2, r3
 80084de:	693b      	ldr	r3, [r7, #16]
 80084e0:	4013      	ands	r3, r2
 80084e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	685a      	ldr	r2, [r3, #4]
 80084e8:	2380      	movs	r3, #128	@ 0x80
 80084ea:	029b      	lsls	r3, r3, #10
 80084ec:	4013      	ands	r3, r2
 80084ee:	d003      	beq.n	80084f8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80084f0:	693a      	ldr	r2, [r7, #16]
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	4313      	orrs	r3, r2
 80084f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80084f8:	4914      	ldr	r1, [pc, #80]	@ (800854c <HAL_GPIO_Init+0x2c4>)
 80084fa:	2284      	movs	r2, #132	@ 0x84
 80084fc:	693b      	ldr	r3, [r7, #16]
 80084fe:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8008500:	4a12      	ldr	r2, [pc, #72]	@ (800854c <HAL_GPIO_Init+0x2c4>)
 8008502:	2380      	movs	r3, #128	@ 0x80
 8008504:	58d3      	ldr	r3, [r2, r3]
 8008506:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	43da      	mvns	r2, r3
 800850c:	693b      	ldr	r3, [r7, #16]
 800850e:	4013      	ands	r3, r2
 8008510:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	685a      	ldr	r2, [r3, #4]
 8008516:	2380      	movs	r3, #128	@ 0x80
 8008518:	025b      	lsls	r3, r3, #9
 800851a:	4013      	ands	r3, r2
 800851c:	d003      	beq.n	8008526 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800851e:	693a      	ldr	r2, [r7, #16]
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	4313      	orrs	r3, r2
 8008524:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008526:	4909      	ldr	r1, [pc, #36]	@ (800854c <HAL_GPIO_Init+0x2c4>)
 8008528:	2280      	movs	r2, #128	@ 0x80
 800852a:	693b      	ldr	r3, [r7, #16]
 800852c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	3301      	adds	r3, #1
 8008532:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	681a      	ldr	r2, [r3, #0]
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	40da      	lsrs	r2, r3
 800853c:	1e13      	subs	r3, r2, #0
 800853e:	d000      	beq.n	8008542 <HAL_GPIO_Init+0x2ba>
 8008540:	e6aa      	b.n	8008298 <HAL_GPIO_Init+0x10>
  }
}
 8008542:	46c0      	nop			@ (mov r8, r8)
 8008544:	46c0      	nop			@ (mov r8, r8)
 8008546:	46bd      	mov	sp, r7
 8008548:	b006      	add	sp, #24
 800854a:	bd80      	pop	{r7, pc}
 800854c:	40021800 	.word	0x40021800
 8008550:	50000400 	.word	0x50000400
 8008554:	50000800 	.word	0x50000800
 8008558:	50000c00 	.word	0x50000c00
 800855c:	50001000 	.word	0x50001000

08008560 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b084      	sub	sp, #16
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
 8008568:	000a      	movs	r2, r1
 800856a:	1cbb      	adds	r3, r7, #2
 800856c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	691b      	ldr	r3, [r3, #16]
 8008572:	1cba      	adds	r2, r7, #2
 8008574:	8812      	ldrh	r2, [r2, #0]
 8008576:	4013      	ands	r3, r2
 8008578:	d004      	beq.n	8008584 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800857a:	230f      	movs	r3, #15
 800857c:	18fb      	adds	r3, r7, r3
 800857e:	2201      	movs	r2, #1
 8008580:	701a      	strb	r2, [r3, #0]
 8008582:	e003      	b.n	800858c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008584:	230f      	movs	r3, #15
 8008586:	18fb      	adds	r3, r7, r3
 8008588:	2200      	movs	r2, #0
 800858a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800858c:	230f      	movs	r3, #15
 800858e:	18fb      	adds	r3, r7, r3
 8008590:	781b      	ldrb	r3, [r3, #0]
}
 8008592:	0018      	movs	r0, r3
 8008594:	46bd      	mov	sp, r7
 8008596:	b004      	add	sp, #16
 8008598:	bd80      	pop	{r7, pc}

0800859a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800859a:	b580      	push	{r7, lr}
 800859c:	b082      	sub	sp, #8
 800859e:	af00      	add	r7, sp, #0
 80085a0:	6078      	str	r0, [r7, #4]
 80085a2:	0008      	movs	r0, r1
 80085a4:	0011      	movs	r1, r2
 80085a6:	1cbb      	adds	r3, r7, #2
 80085a8:	1c02      	adds	r2, r0, #0
 80085aa:	801a      	strh	r2, [r3, #0]
 80085ac:	1c7b      	adds	r3, r7, #1
 80085ae:	1c0a      	adds	r2, r1, #0
 80085b0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80085b2:	1c7b      	adds	r3, r7, #1
 80085b4:	781b      	ldrb	r3, [r3, #0]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d004      	beq.n	80085c4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80085ba:	1cbb      	adds	r3, r7, #2
 80085bc:	881a      	ldrh	r2, [r3, #0]
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80085c2:	e003      	b.n	80085cc <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80085c4:	1cbb      	adds	r3, r7, #2
 80085c6:	881a      	ldrh	r2, [r3, #0]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80085cc:	46c0      	nop			@ (mov r8, r8)
 80085ce:	46bd      	mov	sp, r7
 80085d0:	b002      	add	sp, #8
 80085d2:	bd80      	pop	{r7, pc}

080085d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b082      	sub	sp, #8
 80085d8:	af00      	add	r7, sp, #0
 80085da:	0002      	movs	r2, r0
 80085dc:	1dbb      	adds	r3, r7, #6
 80085de:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80085e0:	4b10      	ldr	r3, [pc, #64]	@ (8008624 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80085e2:	68db      	ldr	r3, [r3, #12]
 80085e4:	1dba      	adds	r2, r7, #6
 80085e6:	8812      	ldrh	r2, [r2, #0]
 80085e8:	4013      	ands	r3, r2
 80085ea:	d008      	beq.n	80085fe <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80085ec:	4b0d      	ldr	r3, [pc, #52]	@ (8008624 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80085ee:	1dba      	adds	r2, r7, #6
 80085f0:	8812      	ldrh	r2, [r2, #0]
 80085f2:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80085f4:	1dbb      	adds	r3, r7, #6
 80085f6:	881b      	ldrh	r3, [r3, #0]
 80085f8:	0018      	movs	r0, r3
 80085fa:	f7fd fa37 	bl	8005a6c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80085fe:	4b09      	ldr	r3, [pc, #36]	@ (8008624 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8008600:	691b      	ldr	r3, [r3, #16]
 8008602:	1dba      	adds	r2, r7, #6
 8008604:	8812      	ldrh	r2, [r2, #0]
 8008606:	4013      	ands	r3, r2
 8008608:	d008      	beq.n	800861c <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800860a:	4b06      	ldr	r3, [pc, #24]	@ (8008624 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800860c:	1dba      	adds	r2, r7, #6
 800860e:	8812      	ldrh	r2, [r2, #0]
 8008610:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8008612:	1dbb      	adds	r3, r7, #6
 8008614:	881b      	ldrh	r3, [r3, #0]
 8008616:	0018      	movs	r0, r3
 8008618:	f000 f806 	bl	8008628 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800861c:	46c0      	nop			@ (mov r8, r8)
 800861e:	46bd      	mov	sp, r7
 8008620:	b002      	add	sp, #8
 8008622:	bd80      	pop	{r7, pc}
 8008624:	40021800 	.word	0x40021800

08008628 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b082      	sub	sp, #8
 800862c:	af00      	add	r7, sp, #0
 800862e:	0002      	movs	r2, r0
 8008630:	1dbb      	adds	r3, r7, #6
 8008632:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8008634:	46c0      	nop			@ (mov r8, r8)
 8008636:	46bd      	mov	sp, r7
 8008638:	b002      	add	sp, #8
 800863a:	bd80      	pop	{r7, pc}

0800863c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b082      	sub	sp, #8
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d101      	bne.n	800864e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800864a:	2301      	movs	r3, #1
 800864c:	e08f      	b.n	800876e <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2241      	movs	r2, #65	@ 0x41
 8008652:	5c9b      	ldrb	r3, [r3, r2]
 8008654:	b2db      	uxtb	r3, r3
 8008656:	2b00      	cmp	r3, #0
 8008658:	d107      	bne.n	800866a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2240      	movs	r2, #64	@ 0x40
 800865e:	2100      	movs	r1, #0
 8008660:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	0018      	movs	r0, r3
 8008666:	f7fe fbd9 	bl	8006e1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2241      	movs	r2, #65	@ 0x41
 800866e:	2124      	movs	r1, #36	@ 0x24
 8008670:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	681a      	ldr	r2, [r3, #0]
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	2101      	movs	r1, #1
 800867e:	438a      	bics	r2, r1
 8008680:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	685a      	ldr	r2, [r3, #4]
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	493b      	ldr	r1, [pc, #236]	@ (8008778 <HAL_I2C_Init+0x13c>)
 800868c:	400a      	ands	r2, r1
 800868e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	689a      	ldr	r2, [r3, #8]
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4938      	ldr	r1, [pc, #224]	@ (800877c <HAL_I2C_Init+0x140>)
 800869c:	400a      	ands	r2, r1
 800869e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	68db      	ldr	r3, [r3, #12]
 80086a4:	2b01      	cmp	r3, #1
 80086a6:	d108      	bne.n	80086ba <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	689a      	ldr	r2, [r3, #8]
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	2180      	movs	r1, #128	@ 0x80
 80086b2:	0209      	lsls	r1, r1, #8
 80086b4:	430a      	orrs	r2, r1
 80086b6:	609a      	str	r2, [r3, #8]
 80086b8:	e007      	b.n	80086ca <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	689a      	ldr	r2, [r3, #8]
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	2184      	movs	r1, #132	@ 0x84
 80086c4:	0209      	lsls	r1, r1, #8
 80086c6:	430a      	orrs	r2, r1
 80086c8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	68db      	ldr	r3, [r3, #12]
 80086ce:	2b02      	cmp	r3, #2
 80086d0:	d109      	bne.n	80086e6 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	685a      	ldr	r2, [r3, #4]
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	2180      	movs	r1, #128	@ 0x80
 80086de:	0109      	lsls	r1, r1, #4
 80086e0:	430a      	orrs	r2, r1
 80086e2:	605a      	str	r2, [r3, #4]
 80086e4:	e007      	b.n	80086f6 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	685a      	ldr	r2, [r3, #4]
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4923      	ldr	r1, [pc, #140]	@ (8008780 <HAL_I2C_Init+0x144>)
 80086f2:	400a      	ands	r2, r1
 80086f4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	685a      	ldr	r2, [r3, #4]
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4920      	ldr	r1, [pc, #128]	@ (8008784 <HAL_I2C_Init+0x148>)
 8008702:	430a      	orrs	r2, r1
 8008704:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	68da      	ldr	r2, [r3, #12]
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	491a      	ldr	r1, [pc, #104]	@ (800877c <HAL_I2C_Init+0x140>)
 8008712:	400a      	ands	r2, r1
 8008714:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	691a      	ldr	r2, [r3, #16]
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	695b      	ldr	r3, [r3, #20]
 800871e:	431a      	orrs	r2, r3
 8008720:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	699b      	ldr	r3, [r3, #24]
 8008726:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	430a      	orrs	r2, r1
 800872e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	69d9      	ldr	r1, [r3, #28]
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6a1a      	ldr	r2, [r3, #32]
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	430a      	orrs	r2, r1
 800873e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	681a      	ldr	r2, [r3, #0]
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	2101      	movs	r1, #1
 800874c:	430a      	orrs	r2, r1
 800874e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2200      	movs	r2, #0
 8008754:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2241      	movs	r2, #65	@ 0x41
 800875a:	2120      	movs	r1, #32
 800875c:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2200      	movs	r2, #0
 8008762:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2242      	movs	r2, #66	@ 0x42
 8008768:	2100      	movs	r1, #0
 800876a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800876c:	2300      	movs	r3, #0
}
 800876e:	0018      	movs	r0, r3
 8008770:	46bd      	mov	sp, r7
 8008772:	b002      	add	sp, #8
 8008774:	bd80      	pop	{r7, pc}
 8008776:	46c0      	nop			@ (mov r8, r8)
 8008778:	f0ffffff 	.word	0xf0ffffff
 800877c:	ffff7fff 	.word	0xffff7fff
 8008780:	fffff7ff 	.word	0xfffff7ff
 8008784:	02008000 	.word	0x02008000

08008788 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008788:	b590      	push	{r4, r7, lr}
 800878a:	b089      	sub	sp, #36	@ 0x24
 800878c:	af02      	add	r7, sp, #8
 800878e:	60f8      	str	r0, [r7, #12]
 8008790:	0008      	movs	r0, r1
 8008792:	607a      	str	r2, [r7, #4]
 8008794:	0019      	movs	r1, r3
 8008796:	230a      	movs	r3, #10
 8008798:	18fb      	adds	r3, r7, r3
 800879a:	1c02      	adds	r2, r0, #0
 800879c:	801a      	strh	r2, [r3, #0]
 800879e:	2308      	movs	r3, #8
 80087a0:	18fb      	adds	r3, r7, r3
 80087a2:	1c0a      	adds	r2, r1, #0
 80087a4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	2241      	movs	r2, #65	@ 0x41
 80087aa:	5c9b      	ldrb	r3, [r3, r2]
 80087ac:	b2db      	uxtb	r3, r3
 80087ae:	2b20      	cmp	r3, #32
 80087b0:	d000      	beq.n	80087b4 <HAL_I2C_Master_Transmit+0x2c>
 80087b2:	e10a      	b.n	80089ca <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	2240      	movs	r2, #64	@ 0x40
 80087b8:	5c9b      	ldrb	r3, [r3, r2]
 80087ba:	2b01      	cmp	r3, #1
 80087bc:	d101      	bne.n	80087c2 <HAL_I2C_Master_Transmit+0x3a>
 80087be:	2302      	movs	r3, #2
 80087c0:	e104      	b.n	80089cc <HAL_I2C_Master_Transmit+0x244>
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	2240      	movs	r2, #64	@ 0x40
 80087c6:	2101      	movs	r1, #1
 80087c8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80087ca:	f7ff fc3b 	bl	8008044 <HAL_GetTick>
 80087ce:	0003      	movs	r3, r0
 80087d0:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80087d2:	2380      	movs	r3, #128	@ 0x80
 80087d4:	0219      	lsls	r1, r3, #8
 80087d6:	68f8      	ldr	r0, [r7, #12]
 80087d8:	693b      	ldr	r3, [r7, #16]
 80087da:	9300      	str	r3, [sp, #0]
 80087dc:	2319      	movs	r3, #25
 80087de:	2201      	movs	r2, #1
 80087e0:	f000 fa26 	bl	8008c30 <I2C_WaitOnFlagUntilTimeout>
 80087e4:	1e03      	subs	r3, r0, #0
 80087e6:	d001      	beq.n	80087ec <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80087e8:	2301      	movs	r3, #1
 80087ea:	e0ef      	b.n	80089cc <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	2241      	movs	r2, #65	@ 0x41
 80087f0:	2121      	movs	r1, #33	@ 0x21
 80087f2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	2242      	movs	r2, #66	@ 0x42
 80087f8:	2110      	movs	r1, #16
 80087fa:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	2200      	movs	r2, #0
 8008800:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	687a      	ldr	r2, [r7, #4]
 8008806:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	2208      	movs	r2, #8
 800880c:	18ba      	adds	r2, r7, r2
 800880e:	8812      	ldrh	r2, [r2, #0]
 8008810:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	2200      	movs	r2, #0
 8008816:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800881c:	b29b      	uxth	r3, r3
 800881e:	2bff      	cmp	r3, #255	@ 0xff
 8008820:	d906      	bls.n	8008830 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	22ff      	movs	r2, #255	@ 0xff
 8008826:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8008828:	2380      	movs	r3, #128	@ 0x80
 800882a:	045b      	lsls	r3, r3, #17
 800882c:	617b      	str	r3, [r7, #20]
 800882e:	e007      	b.n	8008840 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008834:	b29a      	uxth	r2, r3
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800883a:	2380      	movs	r3, #128	@ 0x80
 800883c:	049b      	lsls	r3, r3, #18
 800883e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008844:	2b00      	cmp	r3, #0
 8008846:	d027      	beq.n	8008898 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800884c:	781a      	ldrb	r2, [r3, #0]
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008858:	1c5a      	adds	r2, r3, #1
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008862:	b29b      	uxth	r3, r3
 8008864:	3b01      	subs	r3, #1
 8008866:	b29a      	uxth	r2, r3
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008870:	3b01      	subs	r3, #1
 8008872:	b29a      	uxth	r2, r3
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800887c:	b2db      	uxtb	r3, r3
 800887e:	3301      	adds	r3, #1
 8008880:	b2da      	uxtb	r2, r3
 8008882:	697c      	ldr	r4, [r7, #20]
 8008884:	230a      	movs	r3, #10
 8008886:	18fb      	adds	r3, r7, r3
 8008888:	8819      	ldrh	r1, [r3, #0]
 800888a:	68f8      	ldr	r0, [r7, #12]
 800888c:	4b51      	ldr	r3, [pc, #324]	@ (80089d4 <HAL_I2C_Master_Transmit+0x24c>)
 800888e:	9300      	str	r3, [sp, #0]
 8008890:	0023      	movs	r3, r4
 8008892:	f000 fc45 	bl	8009120 <I2C_TransferConfig>
 8008896:	e06f      	b.n	8008978 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800889c:	b2da      	uxtb	r2, r3
 800889e:	697c      	ldr	r4, [r7, #20]
 80088a0:	230a      	movs	r3, #10
 80088a2:	18fb      	adds	r3, r7, r3
 80088a4:	8819      	ldrh	r1, [r3, #0]
 80088a6:	68f8      	ldr	r0, [r7, #12]
 80088a8:	4b4a      	ldr	r3, [pc, #296]	@ (80089d4 <HAL_I2C_Master_Transmit+0x24c>)
 80088aa:	9300      	str	r3, [sp, #0]
 80088ac:	0023      	movs	r3, r4
 80088ae:	f000 fc37 	bl	8009120 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80088b2:	e061      	b.n	8008978 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80088b4:	693a      	ldr	r2, [r7, #16]
 80088b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	0018      	movs	r0, r3
 80088bc:	f000 fa10 	bl	8008ce0 <I2C_WaitOnTXISFlagUntilTimeout>
 80088c0:	1e03      	subs	r3, r0, #0
 80088c2:	d001      	beq.n	80088c8 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 80088c4:	2301      	movs	r3, #1
 80088c6:	e081      	b.n	80089cc <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088cc:	781a      	ldrb	r2, [r3, #0]
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088d8:	1c5a      	adds	r2, r3, #1
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80088e2:	b29b      	uxth	r3, r3
 80088e4:	3b01      	subs	r3, #1
 80088e6:	b29a      	uxth	r2, r3
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80088f0:	3b01      	subs	r3, #1
 80088f2:	b29a      	uxth	r2, r3
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80088fc:	b29b      	uxth	r3, r3
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d03a      	beq.n	8008978 <HAL_I2C_Master_Transmit+0x1f0>
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008906:	2b00      	cmp	r3, #0
 8008908:	d136      	bne.n	8008978 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800890a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800890c:	68f8      	ldr	r0, [r7, #12]
 800890e:	693b      	ldr	r3, [r7, #16]
 8008910:	9300      	str	r3, [sp, #0]
 8008912:	0013      	movs	r3, r2
 8008914:	2200      	movs	r2, #0
 8008916:	2180      	movs	r1, #128	@ 0x80
 8008918:	f000 f98a 	bl	8008c30 <I2C_WaitOnFlagUntilTimeout>
 800891c:	1e03      	subs	r3, r0, #0
 800891e:	d001      	beq.n	8008924 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8008920:	2301      	movs	r3, #1
 8008922:	e053      	b.n	80089cc <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008928:	b29b      	uxth	r3, r3
 800892a:	2bff      	cmp	r3, #255	@ 0xff
 800892c:	d911      	bls.n	8008952 <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	22ff      	movs	r2, #255	@ 0xff
 8008932:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008938:	b2da      	uxtb	r2, r3
 800893a:	2380      	movs	r3, #128	@ 0x80
 800893c:	045c      	lsls	r4, r3, #17
 800893e:	230a      	movs	r3, #10
 8008940:	18fb      	adds	r3, r7, r3
 8008942:	8819      	ldrh	r1, [r3, #0]
 8008944:	68f8      	ldr	r0, [r7, #12]
 8008946:	2300      	movs	r3, #0
 8008948:	9300      	str	r3, [sp, #0]
 800894a:	0023      	movs	r3, r4
 800894c:	f000 fbe8 	bl	8009120 <I2C_TransferConfig>
 8008950:	e012      	b.n	8008978 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008956:	b29a      	uxth	r2, r3
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008960:	b2da      	uxtb	r2, r3
 8008962:	2380      	movs	r3, #128	@ 0x80
 8008964:	049c      	lsls	r4, r3, #18
 8008966:	230a      	movs	r3, #10
 8008968:	18fb      	adds	r3, r7, r3
 800896a:	8819      	ldrh	r1, [r3, #0]
 800896c:	68f8      	ldr	r0, [r7, #12]
 800896e:	2300      	movs	r3, #0
 8008970:	9300      	str	r3, [sp, #0]
 8008972:	0023      	movs	r3, r4
 8008974:	f000 fbd4 	bl	8009120 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800897c:	b29b      	uxth	r3, r3
 800897e:	2b00      	cmp	r3, #0
 8008980:	d198      	bne.n	80088b4 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008982:	693a      	ldr	r2, [r7, #16]
 8008984:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	0018      	movs	r0, r3
 800898a:	f000 f9ef 	bl	8008d6c <I2C_WaitOnSTOPFlagUntilTimeout>
 800898e:	1e03      	subs	r3, r0, #0
 8008990:	d001      	beq.n	8008996 <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8008992:	2301      	movs	r3, #1
 8008994:	e01a      	b.n	80089cc <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	2220      	movs	r2, #32
 800899c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	685a      	ldr	r2, [r3, #4]
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	490b      	ldr	r1, [pc, #44]	@ (80089d8 <HAL_I2C_Master_Transmit+0x250>)
 80089aa:	400a      	ands	r2, r1
 80089ac:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	2241      	movs	r2, #65	@ 0x41
 80089b2:	2120      	movs	r1, #32
 80089b4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	2242      	movs	r2, #66	@ 0x42
 80089ba:	2100      	movs	r1, #0
 80089bc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	2240      	movs	r2, #64	@ 0x40
 80089c2:	2100      	movs	r1, #0
 80089c4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80089c6:	2300      	movs	r3, #0
 80089c8:	e000      	b.n	80089cc <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 80089ca:	2302      	movs	r3, #2
  }
}
 80089cc:	0018      	movs	r0, r3
 80089ce:	46bd      	mov	sp, r7
 80089d0:	b007      	add	sp, #28
 80089d2:	bd90      	pop	{r4, r7, pc}
 80089d4:	80002000 	.word	0x80002000
 80089d8:	fe00e800 	.word	0xfe00e800

080089dc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80089dc:	b590      	push	{r4, r7, lr}
 80089de:	b089      	sub	sp, #36	@ 0x24
 80089e0:	af02      	add	r7, sp, #8
 80089e2:	60f8      	str	r0, [r7, #12]
 80089e4:	0008      	movs	r0, r1
 80089e6:	607a      	str	r2, [r7, #4]
 80089e8:	0019      	movs	r1, r3
 80089ea:	230a      	movs	r3, #10
 80089ec:	18fb      	adds	r3, r7, r3
 80089ee:	1c02      	adds	r2, r0, #0
 80089f0:	801a      	strh	r2, [r3, #0]
 80089f2:	2308      	movs	r3, #8
 80089f4:	18fb      	adds	r3, r7, r3
 80089f6:	1c0a      	adds	r2, r1, #0
 80089f8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	2241      	movs	r2, #65	@ 0x41
 80089fe:	5c9b      	ldrb	r3, [r3, r2]
 8008a00:	b2db      	uxtb	r3, r3
 8008a02:	2b20      	cmp	r3, #32
 8008a04:	d000      	beq.n	8008a08 <HAL_I2C_Master_Receive+0x2c>
 8008a06:	e0e8      	b.n	8008bda <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	2240      	movs	r2, #64	@ 0x40
 8008a0c:	5c9b      	ldrb	r3, [r3, r2]
 8008a0e:	2b01      	cmp	r3, #1
 8008a10:	d101      	bne.n	8008a16 <HAL_I2C_Master_Receive+0x3a>
 8008a12:	2302      	movs	r3, #2
 8008a14:	e0e2      	b.n	8008bdc <HAL_I2C_Master_Receive+0x200>
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	2240      	movs	r2, #64	@ 0x40
 8008a1a:	2101      	movs	r1, #1
 8008a1c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008a1e:	f7ff fb11 	bl	8008044 <HAL_GetTick>
 8008a22:	0003      	movs	r3, r0
 8008a24:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008a26:	2380      	movs	r3, #128	@ 0x80
 8008a28:	0219      	lsls	r1, r3, #8
 8008a2a:	68f8      	ldr	r0, [r7, #12]
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	9300      	str	r3, [sp, #0]
 8008a30:	2319      	movs	r3, #25
 8008a32:	2201      	movs	r2, #1
 8008a34:	f000 f8fc 	bl	8008c30 <I2C_WaitOnFlagUntilTimeout>
 8008a38:	1e03      	subs	r3, r0, #0
 8008a3a:	d001      	beq.n	8008a40 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	e0cd      	b.n	8008bdc <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	2241      	movs	r2, #65	@ 0x41
 8008a44:	2122      	movs	r1, #34	@ 0x22
 8008a46:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	2242      	movs	r2, #66	@ 0x42
 8008a4c:	2110      	movs	r1, #16
 8008a4e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	2200      	movs	r2, #0
 8008a54:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	687a      	ldr	r2, [r7, #4]
 8008a5a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	2208      	movs	r2, #8
 8008a60:	18ba      	adds	r2, r7, r2
 8008a62:	8812      	ldrh	r2, [r2, #0]
 8008a64:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	2200      	movs	r2, #0
 8008a6a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a70:	b29b      	uxth	r3, r3
 8008a72:	2bff      	cmp	r3, #255	@ 0xff
 8008a74:	d911      	bls.n	8008a9a <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	22ff      	movs	r2, #255	@ 0xff
 8008a7a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a80:	b2da      	uxtb	r2, r3
 8008a82:	2380      	movs	r3, #128	@ 0x80
 8008a84:	045c      	lsls	r4, r3, #17
 8008a86:	230a      	movs	r3, #10
 8008a88:	18fb      	adds	r3, r7, r3
 8008a8a:	8819      	ldrh	r1, [r3, #0]
 8008a8c:	68f8      	ldr	r0, [r7, #12]
 8008a8e:	4b55      	ldr	r3, [pc, #340]	@ (8008be4 <HAL_I2C_Master_Receive+0x208>)
 8008a90:	9300      	str	r3, [sp, #0]
 8008a92:	0023      	movs	r3, r4
 8008a94:	f000 fb44 	bl	8009120 <I2C_TransferConfig>
 8008a98:	e076      	b.n	8008b88 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a9e:	b29a      	uxth	r2, r3
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008aa8:	b2da      	uxtb	r2, r3
 8008aaa:	2380      	movs	r3, #128	@ 0x80
 8008aac:	049c      	lsls	r4, r3, #18
 8008aae:	230a      	movs	r3, #10
 8008ab0:	18fb      	adds	r3, r7, r3
 8008ab2:	8819      	ldrh	r1, [r3, #0]
 8008ab4:	68f8      	ldr	r0, [r7, #12]
 8008ab6:	4b4b      	ldr	r3, [pc, #300]	@ (8008be4 <HAL_I2C_Master_Receive+0x208>)
 8008ab8:	9300      	str	r3, [sp, #0]
 8008aba:	0023      	movs	r3, r4
 8008abc:	f000 fb30 	bl	8009120 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8008ac0:	e062      	b.n	8008b88 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008ac2:	697a      	ldr	r2, [r7, #20]
 8008ac4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	0018      	movs	r0, r3
 8008aca:	f000 f993 	bl	8008df4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008ace:	1e03      	subs	r3, r0, #0
 8008ad0:	d001      	beq.n	8008ad6 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	e082      	b.n	8008bdc <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ae0:	b2d2      	uxtb	r2, r2
 8008ae2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ae8:	1c5a      	adds	r2, r3, #1
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008af2:	3b01      	subs	r3, #1
 8008af4:	b29a      	uxth	r2, r3
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008afe:	b29b      	uxth	r3, r3
 8008b00:	3b01      	subs	r3, #1
 8008b02:	b29a      	uxth	r2, r3
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b0c:	b29b      	uxth	r3, r3
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d03a      	beq.n	8008b88 <HAL_I2C_Master_Receive+0x1ac>
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d136      	bne.n	8008b88 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008b1a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008b1c:	68f8      	ldr	r0, [r7, #12]
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	9300      	str	r3, [sp, #0]
 8008b22:	0013      	movs	r3, r2
 8008b24:	2200      	movs	r2, #0
 8008b26:	2180      	movs	r1, #128	@ 0x80
 8008b28:	f000 f882 	bl	8008c30 <I2C_WaitOnFlagUntilTimeout>
 8008b2c:	1e03      	subs	r3, r0, #0
 8008b2e:	d001      	beq.n	8008b34 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8008b30:	2301      	movs	r3, #1
 8008b32:	e053      	b.n	8008bdc <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b38:	b29b      	uxth	r3, r3
 8008b3a:	2bff      	cmp	r3, #255	@ 0xff
 8008b3c:	d911      	bls.n	8008b62 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	22ff      	movs	r2, #255	@ 0xff
 8008b42:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b48:	b2da      	uxtb	r2, r3
 8008b4a:	2380      	movs	r3, #128	@ 0x80
 8008b4c:	045c      	lsls	r4, r3, #17
 8008b4e:	230a      	movs	r3, #10
 8008b50:	18fb      	adds	r3, r7, r3
 8008b52:	8819      	ldrh	r1, [r3, #0]
 8008b54:	68f8      	ldr	r0, [r7, #12]
 8008b56:	2300      	movs	r3, #0
 8008b58:	9300      	str	r3, [sp, #0]
 8008b5a:	0023      	movs	r3, r4
 8008b5c:	f000 fae0 	bl	8009120 <I2C_TransferConfig>
 8008b60:	e012      	b.n	8008b88 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b66:	b29a      	uxth	r2, r3
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b70:	b2da      	uxtb	r2, r3
 8008b72:	2380      	movs	r3, #128	@ 0x80
 8008b74:	049c      	lsls	r4, r3, #18
 8008b76:	230a      	movs	r3, #10
 8008b78:	18fb      	adds	r3, r7, r3
 8008b7a:	8819      	ldrh	r1, [r3, #0]
 8008b7c:	68f8      	ldr	r0, [r7, #12]
 8008b7e:	2300      	movs	r3, #0
 8008b80:	9300      	str	r3, [sp, #0]
 8008b82:	0023      	movs	r3, r4
 8008b84:	f000 facc 	bl	8009120 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b8c:	b29b      	uxth	r3, r3
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d197      	bne.n	8008ac2 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008b92:	697a      	ldr	r2, [r7, #20]
 8008b94:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	0018      	movs	r0, r3
 8008b9a:	f000 f8e7 	bl	8008d6c <I2C_WaitOnSTOPFlagUntilTimeout>
 8008b9e:	1e03      	subs	r3, r0, #0
 8008ba0:	d001      	beq.n	8008ba6 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8008ba2:	2301      	movs	r3, #1
 8008ba4:	e01a      	b.n	8008bdc <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	2220      	movs	r2, #32
 8008bac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	685a      	ldr	r2, [r3, #4]
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	490b      	ldr	r1, [pc, #44]	@ (8008be8 <HAL_I2C_Master_Receive+0x20c>)
 8008bba:	400a      	ands	r2, r1
 8008bbc:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	2241      	movs	r2, #65	@ 0x41
 8008bc2:	2120      	movs	r1, #32
 8008bc4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	2242      	movs	r2, #66	@ 0x42
 8008bca:	2100      	movs	r1, #0
 8008bcc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	2240      	movs	r2, #64	@ 0x40
 8008bd2:	2100      	movs	r1, #0
 8008bd4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	e000      	b.n	8008bdc <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8008bda:	2302      	movs	r3, #2
  }
}
 8008bdc:	0018      	movs	r0, r3
 8008bde:	46bd      	mov	sp, r7
 8008be0:	b007      	add	sp, #28
 8008be2:	bd90      	pop	{r4, r7, pc}
 8008be4:	80002400 	.word	0x80002400
 8008be8:	fe00e800 	.word	0xfe00e800

08008bec <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b082      	sub	sp, #8
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	699b      	ldr	r3, [r3, #24]
 8008bfa:	2202      	movs	r2, #2
 8008bfc:	4013      	ands	r3, r2
 8008bfe:	2b02      	cmp	r3, #2
 8008c00:	d103      	bne.n	8008c0a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	2200      	movs	r2, #0
 8008c08:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	699b      	ldr	r3, [r3, #24]
 8008c10:	2201      	movs	r2, #1
 8008c12:	4013      	ands	r3, r2
 8008c14:	2b01      	cmp	r3, #1
 8008c16:	d007      	beq.n	8008c28 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	699a      	ldr	r2, [r3, #24]
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	2101      	movs	r1, #1
 8008c24:	430a      	orrs	r2, r1
 8008c26:	619a      	str	r2, [r3, #24]
  }
}
 8008c28:	46c0      	nop			@ (mov r8, r8)
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	b002      	add	sp, #8
 8008c2e:	bd80      	pop	{r7, pc}

08008c30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b084      	sub	sp, #16
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	60f8      	str	r0, [r7, #12]
 8008c38:	60b9      	str	r1, [r7, #8]
 8008c3a:	603b      	str	r3, [r7, #0]
 8008c3c:	1dfb      	adds	r3, r7, #7
 8008c3e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008c40:	e03a      	b.n	8008cb8 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008c42:	69ba      	ldr	r2, [r7, #24]
 8008c44:	6839      	ldr	r1, [r7, #0]
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	0018      	movs	r0, r3
 8008c4a:	f000 f971 	bl	8008f30 <I2C_IsErrorOccurred>
 8008c4e:	1e03      	subs	r3, r0, #0
 8008c50:	d001      	beq.n	8008c56 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8008c52:	2301      	movs	r3, #1
 8008c54:	e040      	b.n	8008cd8 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	3301      	adds	r3, #1
 8008c5a:	d02d      	beq.n	8008cb8 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c5c:	f7ff f9f2 	bl	8008044 <HAL_GetTick>
 8008c60:	0002      	movs	r2, r0
 8008c62:	69bb      	ldr	r3, [r7, #24]
 8008c64:	1ad3      	subs	r3, r2, r3
 8008c66:	683a      	ldr	r2, [r7, #0]
 8008c68:	429a      	cmp	r2, r3
 8008c6a:	d302      	bcc.n	8008c72 <I2C_WaitOnFlagUntilTimeout+0x42>
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d122      	bne.n	8008cb8 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	699b      	ldr	r3, [r3, #24]
 8008c78:	68ba      	ldr	r2, [r7, #8]
 8008c7a:	4013      	ands	r3, r2
 8008c7c:	68ba      	ldr	r2, [r7, #8]
 8008c7e:	1ad3      	subs	r3, r2, r3
 8008c80:	425a      	negs	r2, r3
 8008c82:	4153      	adcs	r3, r2
 8008c84:	b2db      	uxtb	r3, r3
 8008c86:	001a      	movs	r2, r3
 8008c88:	1dfb      	adds	r3, r7, #7
 8008c8a:	781b      	ldrb	r3, [r3, #0]
 8008c8c:	429a      	cmp	r2, r3
 8008c8e:	d113      	bne.n	8008cb8 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c94:	2220      	movs	r2, #32
 8008c96:	431a      	orrs	r2, r3
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	2241      	movs	r2, #65	@ 0x41
 8008ca0:	2120      	movs	r1, #32
 8008ca2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	2242      	movs	r2, #66	@ 0x42
 8008ca8:	2100      	movs	r1, #0
 8008caa:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	2240      	movs	r2, #64	@ 0x40
 8008cb0:	2100      	movs	r1, #0
 8008cb2:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	e00f      	b.n	8008cd8 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	699b      	ldr	r3, [r3, #24]
 8008cbe:	68ba      	ldr	r2, [r7, #8]
 8008cc0:	4013      	ands	r3, r2
 8008cc2:	68ba      	ldr	r2, [r7, #8]
 8008cc4:	1ad3      	subs	r3, r2, r3
 8008cc6:	425a      	negs	r2, r3
 8008cc8:	4153      	adcs	r3, r2
 8008cca:	b2db      	uxtb	r3, r3
 8008ccc:	001a      	movs	r2, r3
 8008cce:	1dfb      	adds	r3, r7, #7
 8008cd0:	781b      	ldrb	r3, [r3, #0]
 8008cd2:	429a      	cmp	r2, r3
 8008cd4:	d0b5      	beq.n	8008c42 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008cd6:	2300      	movs	r3, #0
}
 8008cd8:	0018      	movs	r0, r3
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	b004      	add	sp, #16
 8008cde:	bd80      	pop	{r7, pc}

08008ce0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b084      	sub	sp, #16
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	60f8      	str	r0, [r7, #12]
 8008ce8:	60b9      	str	r1, [r7, #8]
 8008cea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008cec:	e032      	b.n	8008d54 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008cee:	687a      	ldr	r2, [r7, #4]
 8008cf0:	68b9      	ldr	r1, [r7, #8]
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	0018      	movs	r0, r3
 8008cf6:	f000 f91b 	bl	8008f30 <I2C_IsErrorOccurred>
 8008cfa:	1e03      	subs	r3, r0, #0
 8008cfc:	d001      	beq.n	8008d02 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008cfe:	2301      	movs	r3, #1
 8008d00:	e030      	b.n	8008d64 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	3301      	adds	r3, #1
 8008d06:	d025      	beq.n	8008d54 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d08:	f7ff f99c 	bl	8008044 <HAL_GetTick>
 8008d0c:	0002      	movs	r2, r0
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	1ad3      	subs	r3, r2, r3
 8008d12:	68ba      	ldr	r2, [r7, #8]
 8008d14:	429a      	cmp	r2, r3
 8008d16:	d302      	bcc.n	8008d1e <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d11a      	bne.n	8008d54 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	699b      	ldr	r3, [r3, #24]
 8008d24:	2202      	movs	r2, #2
 8008d26:	4013      	ands	r3, r2
 8008d28:	2b02      	cmp	r3, #2
 8008d2a:	d013      	beq.n	8008d54 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d30:	2220      	movs	r2, #32
 8008d32:	431a      	orrs	r2, r3
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	2241      	movs	r2, #65	@ 0x41
 8008d3c:	2120      	movs	r1, #32
 8008d3e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	2242      	movs	r2, #66	@ 0x42
 8008d44:	2100      	movs	r1, #0
 8008d46:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	2240      	movs	r2, #64	@ 0x40
 8008d4c:	2100      	movs	r1, #0
 8008d4e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8008d50:	2301      	movs	r3, #1
 8008d52:	e007      	b.n	8008d64 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	699b      	ldr	r3, [r3, #24]
 8008d5a:	2202      	movs	r2, #2
 8008d5c:	4013      	ands	r3, r2
 8008d5e:	2b02      	cmp	r3, #2
 8008d60:	d1c5      	bne.n	8008cee <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008d62:	2300      	movs	r3, #0
}
 8008d64:	0018      	movs	r0, r3
 8008d66:	46bd      	mov	sp, r7
 8008d68:	b004      	add	sp, #16
 8008d6a:	bd80      	pop	{r7, pc}

08008d6c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b084      	sub	sp, #16
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	60f8      	str	r0, [r7, #12]
 8008d74:	60b9      	str	r1, [r7, #8]
 8008d76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008d78:	e02f      	b.n	8008dda <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008d7a:	687a      	ldr	r2, [r7, #4]
 8008d7c:	68b9      	ldr	r1, [r7, #8]
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	0018      	movs	r0, r3
 8008d82:	f000 f8d5 	bl	8008f30 <I2C_IsErrorOccurred>
 8008d86:	1e03      	subs	r3, r0, #0
 8008d88:	d001      	beq.n	8008d8e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	e02d      	b.n	8008dea <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d8e:	f7ff f959 	bl	8008044 <HAL_GetTick>
 8008d92:	0002      	movs	r2, r0
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	1ad3      	subs	r3, r2, r3
 8008d98:	68ba      	ldr	r2, [r7, #8]
 8008d9a:	429a      	cmp	r2, r3
 8008d9c:	d302      	bcc.n	8008da4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008d9e:	68bb      	ldr	r3, [r7, #8]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d11a      	bne.n	8008dda <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	699b      	ldr	r3, [r3, #24]
 8008daa:	2220      	movs	r2, #32
 8008dac:	4013      	ands	r3, r2
 8008dae:	2b20      	cmp	r3, #32
 8008db0:	d013      	beq.n	8008dda <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008db6:	2220      	movs	r2, #32
 8008db8:	431a      	orrs	r2, r3
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	2241      	movs	r2, #65	@ 0x41
 8008dc2:	2120      	movs	r1, #32
 8008dc4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	2242      	movs	r2, #66	@ 0x42
 8008dca:	2100      	movs	r1, #0
 8008dcc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	2240      	movs	r2, #64	@ 0x40
 8008dd2:	2100      	movs	r1, #0
 8008dd4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	e007      	b.n	8008dea <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	699b      	ldr	r3, [r3, #24]
 8008de0:	2220      	movs	r2, #32
 8008de2:	4013      	ands	r3, r2
 8008de4:	2b20      	cmp	r3, #32
 8008de6:	d1c8      	bne.n	8008d7a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008de8:	2300      	movs	r3, #0
}
 8008dea:	0018      	movs	r0, r3
 8008dec:	46bd      	mov	sp, r7
 8008dee:	b004      	add	sp, #16
 8008df0:	bd80      	pop	{r7, pc}
	...

08008df4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b086      	sub	sp, #24
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	60f8      	str	r0, [r7, #12]
 8008dfc:	60b9      	str	r1, [r7, #8]
 8008dfe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008e00:	2317      	movs	r3, #23
 8008e02:	18fb      	adds	r3, r7, r3
 8008e04:	2200      	movs	r2, #0
 8008e06:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8008e08:	e07b      	b.n	8008f02 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008e0a:	687a      	ldr	r2, [r7, #4]
 8008e0c:	68b9      	ldr	r1, [r7, #8]
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	0018      	movs	r0, r3
 8008e12:	f000 f88d 	bl	8008f30 <I2C_IsErrorOccurred>
 8008e16:	1e03      	subs	r3, r0, #0
 8008e18:	d003      	beq.n	8008e22 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 8008e1a:	2317      	movs	r3, #23
 8008e1c:	18fb      	adds	r3, r7, r3
 8008e1e:	2201      	movs	r2, #1
 8008e20:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	699b      	ldr	r3, [r3, #24]
 8008e28:	2220      	movs	r2, #32
 8008e2a:	4013      	ands	r3, r2
 8008e2c:	2b20      	cmp	r3, #32
 8008e2e:	d140      	bne.n	8008eb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 8008e30:	2117      	movs	r1, #23
 8008e32:	187b      	adds	r3, r7, r1
 8008e34:	781b      	ldrb	r3, [r3, #0]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d13b      	bne.n	8008eb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	699b      	ldr	r3, [r3, #24]
 8008e40:	2204      	movs	r2, #4
 8008e42:	4013      	ands	r3, r2
 8008e44:	2b04      	cmp	r3, #4
 8008e46:	d106      	bne.n	8008e56 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d002      	beq.n	8008e56 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8008e50:	187b      	adds	r3, r7, r1
 8008e52:	2200      	movs	r2, #0
 8008e54:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	699b      	ldr	r3, [r3, #24]
 8008e5c:	2210      	movs	r2, #16
 8008e5e:	4013      	ands	r3, r2
 8008e60:	2b10      	cmp	r3, #16
 8008e62:	d123      	bne.n	8008eac <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	2210      	movs	r2, #16
 8008e6a:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	2204      	movs	r2, #4
 8008e70:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	2220      	movs	r2, #32
 8008e78:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	685a      	ldr	r2, [r3, #4]
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	4929      	ldr	r1, [pc, #164]	@ (8008f2c <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 8008e86:	400a      	ands	r2, r1
 8008e88:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	2241      	movs	r2, #65	@ 0x41
 8008e8e:	2120      	movs	r1, #32
 8008e90:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	2242      	movs	r2, #66	@ 0x42
 8008e96:	2100      	movs	r1, #0
 8008e98:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	2240      	movs	r2, #64	@ 0x40
 8008e9e:	2100      	movs	r1, #0
 8008ea0:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8008ea2:	2317      	movs	r3, #23
 8008ea4:	18fb      	adds	r3, r7, r3
 8008ea6:	2201      	movs	r2, #1
 8008ea8:	701a      	strb	r2, [r3, #0]
 8008eaa:	e002      	b.n	8008eb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	2200      	movs	r2, #0
 8008eb0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8008eb2:	f7ff f8c7 	bl	8008044 <HAL_GetTick>
 8008eb6:	0002      	movs	r2, r0
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	1ad3      	subs	r3, r2, r3
 8008ebc:	68ba      	ldr	r2, [r7, #8]
 8008ebe:	429a      	cmp	r2, r3
 8008ec0:	d302      	bcc.n	8008ec8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d11c      	bne.n	8008f02 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 8008ec8:	2017      	movs	r0, #23
 8008eca:	183b      	adds	r3, r7, r0
 8008ecc:	781b      	ldrb	r3, [r3, #0]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d117      	bne.n	8008f02 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	699b      	ldr	r3, [r3, #24]
 8008ed8:	2204      	movs	r2, #4
 8008eda:	4013      	ands	r3, r2
 8008edc:	2b04      	cmp	r3, #4
 8008ede:	d010      	beq.n	8008f02 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ee4:	2220      	movs	r2, #32
 8008ee6:	431a      	orrs	r2, r3
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	2241      	movs	r2, #65	@ 0x41
 8008ef0:	2120      	movs	r1, #32
 8008ef2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	2240      	movs	r2, #64	@ 0x40
 8008ef8:	2100      	movs	r1, #0
 8008efa:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8008efc:	183b      	adds	r3, r7, r0
 8008efe:	2201      	movs	r2, #1
 8008f00:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	699b      	ldr	r3, [r3, #24]
 8008f08:	2204      	movs	r2, #4
 8008f0a:	4013      	ands	r3, r2
 8008f0c:	2b04      	cmp	r3, #4
 8008f0e:	d005      	beq.n	8008f1c <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8008f10:	2317      	movs	r3, #23
 8008f12:	18fb      	adds	r3, r7, r3
 8008f14:	781b      	ldrb	r3, [r3, #0]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d100      	bne.n	8008f1c <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8008f1a:	e776      	b.n	8008e0a <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 8008f1c:	2317      	movs	r3, #23
 8008f1e:	18fb      	adds	r3, r7, r3
 8008f20:	781b      	ldrb	r3, [r3, #0]
}
 8008f22:	0018      	movs	r0, r3
 8008f24:	46bd      	mov	sp, r7
 8008f26:	b006      	add	sp, #24
 8008f28:	bd80      	pop	{r7, pc}
 8008f2a:	46c0      	nop			@ (mov r8, r8)
 8008f2c:	fe00e800 	.word	0xfe00e800

08008f30 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b08a      	sub	sp, #40	@ 0x28
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	60f8      	str	r0, [r7, #12]
 8008f38:	60b9      	str	r1, [r7, #8]
 8008f3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008f3c:	2327      	movs	r3, #39	@ 0x27
 8008f3e:	18fb      	adds	r3, r7, r3
 8008f40:	2200      	movs	r2, #0
 8008f42:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	699b      	ldr	r3, [r3, #24]
 8008f4a:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008f54:	69bb      	ldr	r3, [r7, #24]
 8008f56:	2210      	movs	r2, #16
 8008f58:	4013      	ands	r3, r2
 8008f5a:	d100      	bne.n	8008f5e <I2C_IsErrorOccurred+0x2e>
 8008f5c:	e079      	b.n	8009052 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	2210      	movs	r2, #16
 8008f64:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008f66:	e057      	b.n	8009018 <I2C_IsErrorOccurred+0xe8>
 8008f68:	2227      	movs	r2, #39	@ 0x27
 8008f6a:	18bb      	adds	r3, r7, r2
 8008f6c:	18ba      	adds	r2, r7, r2
 8008f6e:	7812      	ldrb	r2, [r2, #0]
 8008f70:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	3301      	adds	r3, #1
 8008f76:	d04f      	beq.n	8009018 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008f78:	f7ff f864 	bl	8008044 <HAL_GetTick>
 8008f7c:	0002      	movs	r2, r0
 8008f7e:	69fb      	ldr	r3, [r7, #28]
 8008f80:	1ad3      	subs	r3, r2, r3
 8008f82:	68ba      	ldr	r2, [r7, #8]
 8008f84:	429a      	cmp	r2, r3
 8008f86:	d302      	bcc.n	8008f8e <I2C_IsErrorOccurred+0x5e>
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d144      	bne.n	8009018 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	685a      	ldr	r2, [r3, #4]
 8008f94:	2380      	movs	r3, #128	@ 0x80
 8008f96:	01db      	lsls	r3, r3, #7
 8008f98:	4013      	ands	r3, r2
 8008f9a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008f9c:	2013      	movs	r0, #19
 8008f9e:	183b      	adds	r3, r7, r0
 8008fa0:	68fa      	ldr	r2, [r7, #12]
 8008fa2:	2142      	movs	r1, #66	@ 0x42
 8008fa4:	5c52      	ldrb	r2, [r2, r1]
 8008fa6:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	699a      	ldr	r2, [r3, #24]
 8008fae:	2380      	movs	r3, #128	@ 0x80
 8008fb0:	021b      	lsls	r3, r3, #8
 8008fb2:	401a      	ands	r2, r3
 8008fb4:	2380      	movs	r3, #128	@ 0x80
 8008fb6:	021b      	lsls	r3, r3, #8
 8008fb8:	429a      	cmp	r2, r3
 8008fba:	d126      	bne.n	800900a <I2C_IsErrorOccurred+0xda>
 8008fbc:	697a      	ldr	r2, [r7, #20]
 8008fbe:	2380      	movs	r3, #128	@ 0x80
 8008fc0:	01db      	lsls	r3, r3, #7
 8008fc2:	429a      	cmp	r2, r3
 8008fc4:	d021      	beq.n	800900a <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8008fc6:	183b      	adds	r3, r7, r0
 8008fc8:	781b      	ldrb	r3, [r3, #0]
 8008fca:	2b20      	cmp	r3, #32
 8008fcc:	d01d      	beq.n	800900a <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	685a      	ldr	r2, [r3, #4]
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	2180      	movs	r1, #128	@ 0x80
 8008fda:	01c9      	lsls	r1, r1, #7
 8008fdc:	430a      	orrs	r2, r1
 8008fde:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008fe0:	f7ff f830 	bl	8008044 <HAL_GetTick>
 8008fe4:	0003      	movs	r3, r0
 8008fe6:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008fe8:	e00f      	b.n	800900a <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008fea:	f7ff f82b 	bl	8008044 <HAL_GetTick>
 8008fee:	0002      	movs	r2, r0
 8008ff0:	69fb      	ldr	r3, [r7, #28]
 8008ff2:	1ad3      	subs	r3, r2, r3
 8008ff4:	2b19      	cmp	r3, #25
 8008ff6:	d908      	bls.n	800900a <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8008ff8:	6a3b      	ldr	r3, [r7, #32]
 8008ffa:	2220      	movs	r2, #32
 8008ffc:	4313      	orrs	r3, r2
 8008ffe:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009000:	2327      	movs	r3, #39	@ 0x27
 8009002:	18fb      	adds	r3, r7, r3
 8009004:	2201      	movs	r2, #1
 8009006:	701a      	strb	r2, [r3, #0]

              break;
 8009008:	e006      	b.n	8009018 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	699b      	ldr	r3, [r3, #24]
 8009010:	2220      	movs	r2, #32
 8009012:	4013      	ands	r3, r2
 8009014:	2b20      	cmp	r3, #32
 8009016:	d1e8      	bne.n	8008fea <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	699b      	ldr	r3, [r3, #24]
 800901e:	2220      	movs	r2, #32
 8009020:	4013      	ands	r3, r2
 8009022:	2b20      	cmp	r3, #32
 8009024:	d004      	beq.n	8009030 <I2C_IsErrorOccurred+0x100>
 8009026:	2327      	movs	r3, #39	@ 0x27
 8009028:	18fb      	adds	r3, r7, r3
 800902a:	781b      	ldrb	r3, [r3, #0]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d09b      	beq.n	8008f68 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009030:	2327      	movs	r3, #39	@ 0x27
 8009032:	18fb      	adds	r3, r7, r3
 8009034:	781b      	ldrb	r3, [r3, #0]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d103      	bne.n	8009042 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	2220      	movs	r2, #32
 8009040:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009042:	6a3b      	ldr	r3, [r7, #32]
 8009044:	2204      	movs	r2, #4
 8009046:	4313      	orrs	r3, r2
 8009048:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800904a:	2327      	movs	r3, #39	@ 0x27
 800904c:	18fb      	adds	r3, r7, r3
 800904e:	2201      	movs	r2, #1
 8009050:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	699b      	ldr	r3, [r3, #24]
 8009058:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800905a:	69ba      	ldr	r2, [r7, #24]
 800905c:	2380      	movs	r3, #128	@ 0x80
 800905e:	005b      	lsls	r3, r3, #1
 8009060:	4013      	ands	r3, r2
 8009062:	d00c      	beq.n	800907e <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009064:	6a3b      	ldr	r3, [r7, #32]
 8009066:	2201      	movs	r2, #1
 8009068:	4313      	orrs	r3, r2
 800906a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	2280      	movs	r2, #128	@ 0x80
 8009072:	0052      	lsls	r2, r2, #1
 8009074:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009076:	2327      	movs	r3, #39	@ 0x27
 8009078:	18fb      	adds	r3, r7, r3
 800907a:	2201      	movs	r2, #1
 800907c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800907e:	69ba      	ldr	r2, [r7, #24]
 8009080:	2380      	movs	r3, #128	@ 0x80
 8009082:	00db      	lsls	r3, r3, #3
 8009084:	4013      	ands	r3, r2
 8009086:	d00c      	beq.n	80090a2 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009088:	6a3b      	ldr	r3, [r7, #32]
 800908a:	2208      	movs	r2, #8
 800908c:	4313      	orrs	r3, r2
 800908e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	2280      	movs	r2, #128	@ 0x80
 8009096:	00d2      	lsls	r2, r2, #3
 8009098:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800909a:	2327      	movs	r3, #39	@ 0x27
 800909c:	18fb      	adds	r3, r7, r3
 800909e:	2201      	movs	r2, #1
 80090a0:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80090a2:	69ba      	ldr	r2, [r7, #24]
 80090a4:	2380      	movs	r3, #128	@ 0x80
 80090a6:	009b      	lsls	r3, r3, #2
 80090a8:	4013      	ands	r3, r2
 80090aa:	d00c      	beq.n	80090c6 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80090ac:	6a3b      	ldr	r3, [r7, #32]
 80090ae:	2202      	movs	r2, #2
 80090b0:	4313      	orrs	r3, r2
 80090b2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	2280      	movs	r2, #128	@ 0x80
 80090ba:	0092      	lsls	r2, r2, #2
 80090bc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80090be:	2327      	movs	r3, #39	@ 0x27
 80090c0:	18fb      	adds	r3, r7, r3
 80090c2:	2201      	movs	r2, #1
 80090c4:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80090c6:	2327      	movs	r3, #39	@ 0x27
 80090c8:	18fb      	adds	r3, r7, r3
 80090ca:	781b      	ldrb	r3, [r3, #0]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d01d      	beq.n	800910c <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	0018      	movs	r0, r3
 80090d4:	f7ff fd8a 	bl	8008bec <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	685a      	ldr	r2, [r3, #4]
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	490e      	ldr	r1, [pc, #56]	@ (800911c <I2C_IsErrorOccurred+0x1ec>)
 80090e4:	400a      	ands	r2, r1
 80090e6:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80090ec:	6a3b      	ldr	r3, [r7, #32]
 80090ee:	431a      	orrs	r2, r3
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	2241      	movs	r2, #65	@ 0x41
 80090f8:	2120      	movs	r1, #32
 80090fa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	2242      	movs	r2, #66	@ 0x42
 8009100:	2100      	movs	r1, #0
 8009102:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	2240      	movs	r2, #64	@ 0x40
 8009108:	2100      	movs	r1, #0
 800910a:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800910c:	2327      	movs	r3, #39	@ 0x27
 800910e:	18fb      	adds	r3, r7, r3
 8009110:	781b      	ldrb	r3, [r3, #0]
}
 8009112:	0018      	movs	r0, r3
 8009114:	46bd      	mov	sp, r7
 8009116:	b00a      	add	sp, #40	@ 0x28
 8009118:	bd80      	pop	{r7, pc}
 800911a:	46c0      	nop			@ (mov r8, r8)
 800911c:	fe00e800 	.word	0xfe00e800

08009120 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009120:	b590      	push	{r4, r7, lr}
 8009122:	b087      	sub	sp, #28
 8009124:	af00      	add	r7, sp, #0
 8009126:	60f8      	str	r0, [r7, #12]
 8009128:	0008      	movs	r0, r1
 800912a:	0011      	movs	r1, r2
 800912c:	607b      	str	r3, [r7, #4]
 800912e:	240a      	movs	r4, #10
 8009130:	193b      	adds	r3, r7, r4
 8009132:	1c02      	adds	r2, r0, #0
 8009134:	801a      	strh	r2, [r3, #0]
 8009136:	2009      	movs	r0, #9
 8009138:	183b      	adds	r3, r7, r0
 800913a:	1c0a      	adds	r2, r1, #0
 800913c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800913e:	193b      	adds	r3, r7, r4
 8009140:	881b      	ldrh	r3, [r3, #0]
 8009142:	059b      	lsls	r3, r3, #22
 8009144:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009146:	183b      	adds	r3, r7, r0
 8009148:	781b      	ldrb	r3, [r3, #0]
 800914a:	0419      	lsls	r1, r3, #16
 800914c:	23ff      	movs	r3, #255	@ 0xff
 800914e:	041b      	lsls	r3, r3, #16
 8009150:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009152:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800915a:	4313      	orrs	r3, r2
 800915c:	005b      	lsls	r3, r3, #1
 800915e:	085b      	lsrs	r3, r3, #1
 8009160:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	685b      	ldr	r3, [r3, #4]
 8009168:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800916a:	0d51      	lsrs	r1, r2, #21
 800916c:	2280      	movs	r2, #128	@ 0x80
 800916e:	00d2      	lsls	r2, r2, #3
 8009170:	400a      	ands	r2, r1
 8009172:	4907      	ldr	r1, [pc, #28]	@ (8009190 <I2C_TransferConfig+0x70>)
 8009174:	430a      	orrs	r2, r1
 8009176:	43d2      	mvns	r2, r2
 8009178:	401a      	ands	r2, r3
 800917a:	0011      	movs	r1, r2
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	697a      	ldr	r2, [r7, #20]
 8009182:	430a      	orrs	r2, r1
 8009184:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009186:	46c0      	nop			@ (mov r8, r8)
 8009188:	46bd      	mov	sp, r7
 800918a:	b007      	add	sp, #28
 800918c:	bd90      	pop	{r4, r7, pc}
 800918e:	46c0      	nop			@ (mov r8, r8)
 8009190:	03ff63ff 	.word	0x03ff63ff

08009194 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b082      	sub	sp, #8
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
 800919c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2241      	movs	r2, #65	@ 0x41
 80091a2:	5c9b      	ldrb	r3, [r3, r2]
 80091a4:	b2db      	uxtb	r3, r3
 80091a6:	2b20      	cmp	r3, #32
 80091a8:	d138      	bne.n	800921c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2240      	movs	r2, #64	@ 0x40
 80091ae:	5c9b      	ldrb	r3, [r3, r2]
 80091b0:	2b01      	cmp	r3, #1
 80091b2:	d101      	bne.n	80091b8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80091b4:	2302      	movs	r3, #2
 80091b6:	e032      	b.n	800921e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2240      	movs	r2, #64	@ 0x40
 80091bc:	2101      	movs	r1, #1
 80091be:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2241      	movs	r2, #65	@ 0x41
 80091c4:	2124      	movs	r1, #36	@ 0x24
 80091c6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	681a      	ldr	r2, [r3, #0]
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	2101      	movs	r1, #1
 80091d4:	438a      	bics	r2, r1
 80091d6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	681a      	ldr	r2, [r3, #0]
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	4911      	ldr	r1, [pc, #68]	@ (8009228 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80091e4:	400a      	ands	r2, r1
 80091e6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	6819      	ldr	r1, [r3, #0]
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	683a      	ldr	r2, [r7, #0]
 80091f4:	430a      	orrs	r2, r1
 80091f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	681a      	ldr	r2, [r3, #0]
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	2101      	movs	r1, #1
 8009204:	430a      	orrs	r2, r1
 8009206:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2241      	movs	r2, #65	@ 0x41
 800920c:	2120      	movs	r1, #32
 800920e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2240      	movs	r2, #64	@ 0x40
 8009214:	2100      	movs	r1, #0
 8009216:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009218:	2300      	movs	r3, #0
 800921a:	e000      	b.n	800921e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800921c:	2302      	movs	r3, #2
  }
}
 800921e:	0018      	movs	r0, r3
 8009220:	46bd      	mov	sp, r7
 8009222:	b002      	add	sp, #8
 8009224:	bd80      	pop	{r7, pc}
 8009226:	46c0      	nop			@ (mov r8, r8)
 8009228:	ffffefff 	.word	0xffffefff

0800922c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b084      	sub	sp, #16
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
 8009234:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2241      	movs	r2, #65	@ 0x41
 800923a:	5c9b      	ldrb	r3, [r3, r2]
 800923c:	b2db      	uxtb	r3, r3
 800923e:	2b20      	cmp	r3, #32
 8009240:	d139      	bne.n	80092b6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2240      	movs	r2, #64	@ 0x40
 8009246:	5c9b      	ldrb	r3, [r3, r2]
 8009248:	2b01      	cmp	r3, #1
 800924a:	d101      	bne.n	8009250 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800924c:	2302      	movs	r3, #2
 800924e:	e033      	b.n	80092b8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2240      	movs	r2, #64	@ 0x40
 8009254:	2101      	movs	r1, #1
 8009256:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2241      	movs	r2, #65	@ 0x41
 800925c:	2124      	movs	r1, #36	@ 0x24
 800925e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	681a      	ldr	r2, [r3, #0]
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	2101      	movs	r1, #1
 800926c:	438a      	bics	r2, r1
 800926e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	4a11      	ldr	r2, [pc, #68]	@ (80092c0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800927c:	4013      	ands	r3, r2
 800927e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	021b      	lsls	r3, r3, #8
 8009284:	68fa      	ldr	r2, [r7, #12]
 8009286:	4313      	orrs	r3, r2
 8009288:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	68fa      	ldr	r2, [r7, #12]
 8009290:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	681a      	ldr	r2, [r3, #0]
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	2101      	movs	r1, #1
 800929e:	430a      	orrs	r2, r1
 80092a0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2241      	movs	r2, #65	@ 0x41
 80092a6:	2120      	movs	r1, #32
 80092a8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2240      	movs	r2, #64	@ 0x40
 80092ae:	2100      	movs	r1, #0
 80092b0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80092b2:	2300      	movs	r3, #0
 80092b4:	e000      	b.n	80092b8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80092b6:	2302      	movs	r3, #2
  }
}
 80092b8:	0018      	movs	r0, r3
 80092ba:	46bd      	mov	sp, r7
 80092bc:	b004      	add	sp, #16
 80092be:	bd80      	pop	{r7, pc}
 80092c0:	fffff0ff 	.word	0xfffff0ff

080092c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b084      	sub	sp, #16
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80092cc:	4b19      	ldr	r3, [pc, #100]	@ (8009334 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	4a19      	ldr	r2, [pc, #100]	@ (8009338 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80092d2:	4013      	ands	r3, r2
 80092d4:	0019      	movs	r1, r3
 80092d6:	4b17      	ldr	r3, [pc, #92]	@ (8009334 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80092d8:	687a      	ldr	r2, [r7, #4]
 80092da:	430a      	orrs	r2, r1
 80092dc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80092de:	687a      	ldr	r2, [r7, #4]
 80092e0:	2380      	movs	r3, #128	@ 0x80
 80092e2:	009b      	lsls	r3, r3, #2
 80092e4:	429a      	cmp	r2, r3
 80092e6:	d11f      	bne.n	8009328 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80092e8:	4b14      	ldr	r3, [pc, #80]	@ (800933c <HAL_PWREx_ControlVoltageScaling+0x78>)
 80092ea:	681a      	ldr	r2, [r3, #0]
 80092ec:	0013      	movs	r3, r2
 80092ee:	005b      	lsls	r3, r3, #1
 80092f0:	189b      	adds	r3, r3, r2
 80092f2:	005b      	lsls	r3, r3, #1
 80092f4:	4912      	ldr	r1, [pc, #72]	@ (8009340 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80092f6:	0018      	movs	r0, r3
 80092f8:	f7f6 ff2a 	bl	8000150 <__udivsi3>
 80092fc:	0003      	movs	r3, r0
 80092fe:	3301      	adds	r3, #1
 8009300:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009302:	e008      	b.n	8009316 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d003      	beq.n	8009312 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	3b01      	subs	r3, #1
 800930e:	60fb      	str	r3, [r7, #12]
 8009310:	e001      	b.n	8009316 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8009312:	2303      	movs	r3, #3
 8009314:	e009      	b.n	800932a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009316:	4b07      	ldr	r3, [pc, #28]	@ (8009334 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8009318:	695a      	ldr	r2, [r3, #20]
 800931a:	2380      	movs	r3, #128	@ 0x80
 800931c:	00db      	lsls	r3, r3, #3
 800931e:	401a      	ands	r2, r3
 8009320:	2380      	movs	r3, #128	@ 0x80
 8009322:	00db      	lsls	r3, r3, #3
 8009324:	429a      	cmp	r2, r3
 8009326:	d0ed      	beq.n	8009304 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8009328:	2300      	movs	r3, #0
}
 800932a:	0018      	movs	r0, r3
 800932c:	46bd      	mov	sp, r7
 800932e:	b004      	add	sp, #16
 8009330:	bd80      	pop	{r7, pc}
 8009332:	46c0      	nop			@ (mov r8, r8)
 8009334:	40007000 	.word	0x40007000
 8009338:	fffff9ff 	.word	0xfffff9ff
 800933c:	200009c8 	.word	0x200009c8
 8009340:	000f4240 	.word	0x000f4240

08009344 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8009348:	4b03      	ldr	r3, [pc, #12]	@ (8009358 <LL_RCC_GetAPB1Prescaler+0x14>)
 800934a:	689a      	ldr	r2, [r3, #8]
 800934c:	23e0      	movs	r3, #224	@ 0xe0
 800934e:	01db      	lsls	r3, r3, #7
 8009350:	4013      	ands	r3, r2
}
 8009352:	0018      	movs	r0, r3
 8009354:	46bd      	mov	sp, r7
 8009356:	bd80      	pop	{r7, pc}
 8009358:	40021000 	.word	0x40021000

0800935c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b088      	sub	sp, #32
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d102      	bne.n	8009370 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800936a:	2301      	movs	r3, #1
 800936c:	f000 fb50 	bl	8009a10 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	2201      	movs	r2, #1
 8009376:	4013      	ands	r3, r2
 8009378:	d100      	bne.n	800937c <HAL_RCC_OscConfig+0x20>
 800937a:	e07c      	b.n	8009476 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800937c:	4bc3      	ldr	r3, [pc, #780]	@ (800968c <HAL_RCC_OscConfig+0x330>)
 800937e:	689b      	ldr	r3, [r3, #8]
 8009380:	2238      	movs	r2, #56	@ 0x38
 8009382:	4013      	ands	r3, r2
 8009384:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009386:	4bc1      	ldr	r3, [pc, #772]	@ (800968c <HAL_RCC_OscConfig+0x330>)
 8009388:	68db      	ldr	r3, [r3, #12]
 800938a:	2203      	movs	r2, #3
 800938c:	4013      	ands	r3, r2
 800938e:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8009390:	69bb      	ldr	r3, [r7, #24]
 8009392:	2b10      	cmp	r3, #16
 8009394:	d102      	bne.n	800939c <HAL_RCC_OscConfig+0x40>
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	2b03      	cmp	r3, #3
 800939a:	d002      	beq.n	80093a2 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800939c:	69bb      	ldr	r3, [r7, #24]
 800939e:	2b08      	cmp	r3, #8
 80093a0:	d10b      	bne.n	80093ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80093a2:	4bba      	ldr	r3, [pc, #744]	@ (800968c <HAL_RCC_OscConfig+0x330>)
 80093a4:	681a      	ldr	r2, [r3, #0]
 80093a6:	2380      	movs	r3, #128	@ 0x80
 80093a8:	029b      	lsls	r3, r3, #10
 80093aa:	4013      	ands	r3, r2
 80093ac:	d062      	beq.n	8009474 <HAL_RCC_OscConfig+0x118>
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	685b      	ldr	r3, [r3, #4]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d15e      	bne.n	8009474 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 80093b6:	2301      	movs	r3, #1
 80093b8:	e32a      	b.n	8009a10 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	685a      	ldr	r2, [r3, #4]
 80093be:	2380      	movs	r3, #128	@ 0x80
 80093c0:	025b      	lsls	r3, r3, #9
 80093c2:	429a      	cmp	r2, r3
 80093c4:	d107      	bne.n	80093d6 <HAL_RCC_OscConfig+0x7a>
 80093c6:	4bb1      	ldr	r3, [pc, #708]	@ (800968c <HAL_RCC_OscConfig+0x330>)
 80093c8:	681a      	ldr	r2, [r3, #0]
 80093ca:	4bb0      	ldr	r3, [pc, #704]	@ (800968c <HAL_RCC_OscConfig+0x330>)
 80093cc:	2180      	movs	r1, #128	@ 0x80
 80093ce:	0249      	lsls	r1, r1, #9
 80093d0:	430a      	orrs	r2, r1
 80093d2:	601a      	str	r2, [r3, #0]
 80093d4:	e020      	b.n	8009418 <HAL_RCC_OscConfig+0xbc>
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	685a      	ldr	r2, [r3, #4]
 80093da:	23a0      	movs	r3, #160	@ 0xa0
 80093dc:	02db      	lsls	r3, r3, #11
 80093de:	429a      	cmp	r2, r3
 80093e0:	d10e      	bne.n	8009400 <HAL_RCC_OscConfig+0xa4>
 80093e2:	4baa      	ldr	r3, [pc, #680]	@ (800968c <HAL_RCC_OscConfig+0x330>)
 80093e4:	681a      	ldr	r2, [r3, #0]
 80093e6:	4ba9      	ldr	r3, [pc, #676]	@ (800968c <HAL_RCC_OscConfig+0x330>)
 80093e8:	2180      	movs	r1, #128	@ 0x80
 80093ea:	02c9      	lsls	r1, r1, #11
 80093ec:	430a      	orrs	r2, r1
 80093ee:	601a      	str	r2, [r3, #0]
 80093f0:	4ba6      	ldr	r3, [pc, #664]	@ (800968c <HAL_RCC_OscConfig+0x330>)
 80093f2:	681a      	ldr	r2, [r3, #0]
 80093f4:	4ba5      	ldr	r3, [pc, #660]	@ (800968c <HAL_RCC_OscConfig+0x330>)
 80093f6:	2180      	movs	r1, #128	@ 0x80
 80093f8:	0249      	lsls	r1, r1, #9
 80093fa:	430a      	orrs	r2, r1
 80093fc:	601a      	str	r2, [r3, #0]
 80093fe:	e00b      	b.n	8009418 <HAL_RCC_OscConfig+0xbc>
 8009400:	4ba2      	ldr	r3, [pc, #648]	@ (800968c <HAL_RCC_OscConfig+0x330>)
 8009402:	681a      	ldr	r2, [r3, #0]
 8009404:	4ba1      	ldr	r3, [pc, #644]	@ (800968c <HAL_RCC_OscConfig+0x330>)
 8009406:	49a2      	ldr	r1, [pc, #648]	@ (8009690 <HAL_RCC_OscConfig+0x334>)
 8009408:	400a      	ands	r2, r1
 800940a:	601a      	str	r2, [r3, #0]
 800940c:	4b9f      	ldr	r3, [pc, #636]	@ (800968c <HAL_RCC_OscConfig+0x330>)
 800940e:	681a      	ldr	r2, [r3, #0]
 8009410:	4b9e      	ldr	r3, [pc, #632]	@ (800968c <HAL_RCC_OscConfig+0x330>)
 8009412:	49a0      	ldr	r1, [pc, #640]	@ (8009694 <HAL_RCC_OscConfig+0x338>)
 8009414:	400a      	ands	r2, r1
 8009416:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	685b      	ldr	r3, [r3, #4]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d014      	beq.n	800944a <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009420:	f7fe fe10 	bl	8008044 <HAL_GetTick>
 8009424:	0003      	movs	r3, r0
 8009426:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009428:	e008      	b.n	800943c <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800942a:	f7fe fe0b 	bl	8008044 <HAL_GetTick>
 800942e:	0002      	movs	r2, r0
 8009430:	693b      	ldr	r3, [r7, #16]
 8009432:	1ad3      	subs	r3, r2, r3
 8009434:	2b64      	cmp	r3, #100	@ 0x64
 8009436:	d901      	bls.n	800943c <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8009438:	2303      	movs	r3, #3
 800943a:	e2e9      	b.n	8009a10 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800943c:	4b93      	ldr	r3, [pc, #588]	@ (800968c <HAL_RCC_OscConfig+0x330>)
 800943e:	681a      	ldr	r2, [r3, #0]
 8009440:	2380      	movs	r3, #128	@ 0x80
 8009442:	029b      	lsls	r3, r3, #10
 8009444:	4013      	ands	r3, r2
 8009446:	d0f0      	beq.n	800942a <HAL_RCC_OscConfig+0xce>
 8009448:	e015      	b.n	8009476 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800944a:	f7fe fdfb 	bl	8008044 <HAL_GetTick>
 800944e:	0003      	movs	r3, r0
 8009450:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009452:	e008      	b.n	8009466 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009454:	f7fe fdf6 	bl	8008044 <HAL_GetTick>
 8009458:	0002      	movs	r2, r0
 800945a:	693b      	ldr	r3, [r7, #16]
 800945c:	1ad3      	subs	r3, r2, r3
 800945e:	2b64      	cmp	r3, #100	@ 0x64
 8009460:	d901      	bls.n	8009466 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8009462:	2303      	movs	r3, #3
 8009464:	e2d4      	b.n	8009a10 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009466:	4b89      	ldr	r3, [pc, #548]	@ (800968c <HAL_RCC_OscConfig+0x330>)
 8009468:	681a      	ldr	r2, [r3, #0]
 800946a:	2380      	movs	r3, #128	@ 0x80
 800946c:	029b      	lsls	r3, r3, #10
 800946e:	4013      	ands	r3, r2
 8009470:	d1f0      	bne.n	8009454 <HAL_RCC_OscConfig+0xf8>
 8009472:	e000      	b.n	8009476 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009474:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	2202      	movs	r2, #2
 800947c:	4013      	ands	r3, r2
 800947e:	d100      	bne.n	8009482 <HAL_RCC_OscConfig+0x126>
 8009480:	e099      	b.n	80095b6 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009482:	4b82      	ldr	r3, [pc, #520]	@ (800968c <HAL_RCC_OscConfig+0x330>)
 8009484:	689b      	ldr	r3, [r3, #8]
 8009486:	2238      	movs	r2, #56	@ 0x38
 8009488:	4013      	ands	r3, r2
 800948a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800948c:	4b7f      	ldr	r3, [pc, #508]	@ (800968c <HAL_RCC_OscConfig+0x330>)
 800948e:	68db      	ldr	r3, [r3, #12]
 8009490:	2203      	movs	r2, #3
 8009492:	4013      	ands	r3, r2
 8009494:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8009496:	69bb      	ldr	r3, [r7, #24]
 8009498:	2b10      	cmp	r3, #16
 800949a:	d102      	bne.n	80094a2 <HAL_RCC_OscConfig+0x146>
 800949c:	697b      	ldr	r3, [r7, #20]
 800949e:	2b02      	cmp	r3, #2
 80094a0:	d002      	beq.n	80094a8 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80094a2:	69bb      	ldr	r3, [r7, #24]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d135      	bne.n	8009514 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80094a8:	4b78      	ldr	r3, [pc, #480]	@ (800968c <HAL_RCC_OscConfig+0x330>)
 80094aa:	681a      	ldr	r2, [r3, #0]
 80094ac:	2380      	movs	r3, #128	@ 0x80
 80094ae:	00db      	lsls	r3, r3, #3
 80094b0:	4013      	ands	r3, r2
 80094b2:	d005      	beq.n	80094c0 <HAL_RCC_OscConfig+0x164>
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	68db      	ldr	r3, [r3, #12]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d101      	bne.n	80094c0 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 80094bc:	2301      	movs	r3, #1
 80094be:	e2a7      	b.n	8009a10 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80094c0:	4b72      	ldr	r3, [pc, #456]	@ (800968c <HAL_RCC_OscConfig+0x330>)
 80094c2:	685b      	ldr	r3, [r3, #4]
 80094c4:	4a74      	ldr	r2, [pc, #464]	@ (8009698 <HAL_RCC_OscConfig+0x33c>)
 80094c6:	4013      	ands	r3, r2
 80094c8:	0019      	movs	r1, r3
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	695b      	ldr	r3, [r3, #20]
 80094ce:	021a      	lsls	r2, r3, #8
 80094d0:	4b6e      	ldr	r3, [pc, #440]	@ (800968c <HAL_RCC_OscConfig+0x330>)
 80094d2:	430a      	orrs	r2, r1
 80094d4:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80094d6:	69bb      	ldr	r3, [r7, #24]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d112      	bne.n	8009502 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80094dc:	4b6b      	ldr	r3, [pc, #428]	@ (800968c <HAL_RCC_OscConfig+0x330>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	4a6e      	ldr	r2, [pc, #440]	@ (800969c <HAL_RCC_OscConfig+0x340>)
 80094e2:	4013      	ands	r3, r2
 80094e4:	0019      	movs	r1, r3
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	691a      	ldr	r2, [r3, #16]
 80094ea:	4b68      	ldr	r3, [pc, #416]	@ (800968c <HAL_RCC_OscConfig+0x330>)
 80094ec:	430a      	orrs	r2, r1
 80094ee:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80094f0:	4b66      	ldr	r3, [pc, #408]	@ (800968c <HAL_RCC_OscConfig+0x330>)
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	0adb      	lsrs	r3, r3, #11
 80094f6:	2207      	movs	r2, #7
 80094f8:	4013      	ands	r3, r2
 80094fa:	4a69      	ldr	r2, [pc, #420]	@ (80096a0 <HAL_RCC_OscConfig+0x344>)
 80094fc:	40da      	lsrs	r2, r3
 80094fe:	4b69      	ldr	r3, [pc, #420]	@ (80096a4 <HAL_RCC_OscConfig+0x348>)
 8009500:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8009502:	4b69      	ldr	r3, [pc, #420]	@ (80096a8 <HAL_RCC_OscConfig+0x34c>)
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	0018      	movs	r0, r3
 8009508:	f7fe fd40 	bl	8007f8c <HAL_InitTick>
 800950c:	1e03      	subs	r3, r0, #0
 800950e:	d051      	beq.n	80095b4 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8009510:	2301      	movs	r3, #1
 8009512:	e27d      	b.n	8009a10 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	68db      	ldr	r3, [r3, #12]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d030      	beq.n	800957e <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800951c:	4b5b      	ldr	r3, [pc, #364]	@ (800968c <HAL_RCC_OscConfig+0x330>)
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	4a5e      	ldr	r2, [pc, #376]	@ (800969c <HAL_RCC_OscConfig+0x340>)
 8009522:	4013      	ands	r3, r2
 8009524:	0019      	movs	r1, r3
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	691a      	ldr	r2, [r3, #16]
 800952a:	4b58      	ldr	r3, [pc, #352]	@ (800968c <HAL_RCC_OscConfig+0x330>)
 800952c:	430a      	orrs	r2, r1
 800952e:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8009530:	4b56      	ldr	r3, [pc, #344]	@ (800968c <HAL_RCC_OscConfig+0x330>)
 8009532:	681a      	ldr	r2, [r3, #0]
 8009534:	4b55      	ldr	r3, [pc, #340]	@ (800968c <HAL_RCC_OscConfig+0x330>)
 8009536:	2180      	movs	r1, #128	@ 0x80
 8009538:	0049      	lsls	r1, r1, #1
 800953a:	430a      	orrs	r2, r1
 800953c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800953e:	f7fe fd81 	bl	8008044 <HAL_GetTick>
 8009542:	0003      	movs	r3, r0
 8009544:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009546:	e008      	b.n	800955a <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009548:	f7fe fd7c 	bl	8008044 <HAL_GetTick>
 800954c:	0002      	movs	r2, r0
 800954e:	693b      	ldr	r3, [r7, #16]
 8009550:	1ad3      	subs	r3, r2, r3
 8009552:	2b02      	cmp	r3, #2
 8009554:	d901      	bls.n	800955a <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8009556:	2303      	movs	r3, #3
 8009558:	e25a      	b.n	8009a10 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800955a:	4b4c      	ldr	r3, [pc, #304]	@ (800968c <HAL_RCC_OscConfig+0x330>)
 800955c:	681a      	ldr	r2, [r3, #0]
 800955e:	2380      	movs	r3, #128	@ 0x80
 8009560:	00db      	lsls	r3, r3, #3
 8009562:	4013      	ands	r3, r2
 8009564:	d0f0      	beq.n	8009548 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009566:	4b49      	ldr	r3, [pc, #292]	@ (800968c <HAL_RCC_OscConfig+0x330>)
 8009568:	685b      	ldr	r3, [r3, #4]
 800956a:	4a4b      	ldr	r2, [pc, #300]	@ (8009698 <HAL_RCC_OscConfig+0x33c>)
 800956c:	4013      	ands	r3, r2
 800956e:	0019      	movs	r1, r3
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	695b      	ldr	r3, [r3, #20]
 8009574:	021a      	lsls	r2, r3, #8
 8009576:	4b45      	ldr	r3, [pc, #276]	@ (800968c <HAL_RCC_OscConfig+0x330>)
 8009578:	430a      	orrs	r2, r1
 800957a:	605a      	str	r2, [r3, #4]
 800957c:	e01b      	b.n	80095b6 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800957e:	4b43      	ldr	r3, [pc, #268]	@ (800968c <HAL_RCC_OscConfig+0x330>)
 8009580:	681a      	ldr	r2, [r3, #0]
 8009582:	4b42      	ldr	r3, [pc, #264]	@ (800968c <HAL_RCC_OscConfig+0x330>)
 8009584:	4949      	ldr	r1, [pc, #292]	@ (80096ac <HAL_RCC_OscConfig+0x350>)
 8009586:	400a      	ands	r2, r1
 8009588:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800958a:	f7fe fd5b 	bl	8008044 <HAL_GetTick>
 800958e:	0003      	movs	r3, r0
 8009590:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009592:	e008      	b.n	80095a6 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009594:	f7fe fd56 	bl	8008044 <HAL_GetTick>
 8009598:	0002      	movs	r2, r0
 800959a:	693b      	ldr	r3, [r7, #16]
 800959c:	1ad3      	subs	r3, r2, r3
 800959e:	2b02      	cmp	r3, #2
 80095a0:	d901      	bls.n	80095a6 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 80095a2:	2303      	movs	r3, #3
 80095a4:	e234      	b.n	8009a10 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80095a6:	4b39      	ldr	r3, [pc, #228]	@ (800968c <HAL_RCC_OscConfig+0x330>)
 80095a8:	681a      	ldr	r2, [r3, #0]
 80095aa:	2380      	movs	r3, #128	@ 0x80
 80095ac:	00db      	lsls	r3, r3, #3
 80095ae:	4013      	ands	r3, r2
 80095b0:	d1f0      	bne.n	8009594 <HAL_RCC_OscConfig+0x238>
 80095b2:	e000      	b.n	80095b6 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80095b4:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	2208      	movs	r2, #8
 80095bc:	4013      	ands	r3, r2
 80095be:	d047      	beq.n	8009650 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80095c0:	4b32      	ldr	r3, [pc, #200]	@ (800968c <HAL_RCC_OscConfig+0x330>)
 80095c2:	689b      	ldr	r3, [r3, #8]
 80095c4:	2238      	movs	r2, #56	@ 0x38
 80095c6:	4013      	ands	r3, r2
 80095c8:	2b18      	cmp	r3, #24
 80095ca:	d10a      	bne.n	80095e2 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80095cc:	4b2f      	ldr	r3, [pc, #188]	@ (800968c <HAL_RCC_OscConfig+0x330>)
 80095ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80095d0:	2202      	movs	r2, #2
 80095d2:	4013      	ands	r3, r2
 80095d4:	d03c      	beq.n	8009650 <HAL_RCC_OscConfig+0x2f4>
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	699b      	ldr	r3, [r3, #24]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d138      	bne.n	8009650 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80095de:	2301      	movs	r3, #1
 80095e0:	e216      	b.n	8009a10 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	699b      	ldr	r3, [r3, #24]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d019      	beq.n	800961e <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80095ea:	4b28      	ldr	r3, [pc, #160]	@ (800968c <HAL_RCC_OscConfig+0x330>)
 80095ec:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80095ee:	4b27      	ldr	r3, [pc, #156]	@ (800968c <HAL_RCC_OscConfig+0x330>)
 80095f0:	2101      	movs	r1, #1
 80095f2:	430a      	orrs	r2, r1
 80095f4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095f6:	f7fe fd25 	bl	8008044 <HAL_GetTick>
 80095fa:	0003      	movs	r3, r0
 80095fc:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80095fe:	e008      	b.n	8009612 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009600:	f7fe fd20 	bl	8008044 <HAL_GetTick>
 8009604:	0002      	movs	r2, r0
 8009606:	693b      	ldr	r3, [r7, #16]
 8009608:	1ad3      	subs	r3, r2, r3
 800960a:	2b02      	cmp	r3, #2
 800960c:	d901      	bls.n	8009612 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 800960e:	2303      	movs	r3, #3
 8009610:	e1fe      	b.n	8009a10 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009612:	4b1e      	ldr	r3, [pc, #120]	@ (800968c <HAL_RCC_OscConfig+0x330>)
 8009614:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009616:	2202      	movs	r2, #2
 8009618:	4013      	ands	r3, r2
 800961a:	d0f1      	beq.n	8009600 <HAL_RCC_OscConfig+0x2a4>
 800961c:	e018      	b.n	8009650 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800961e:	4b1b      	ldr	r3, [pc, #108]	@ (800968c <HAL_RCC_OscConfig+0x330>)
 8009620:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8009622:	4b1a      	ldr	r3, [pc, #104]	@ (800968c <HAL_RCC_OscConfig+0x330>)
 8009624:	2101      	movs	r1, #1
 8009626:	438a      	bics	r2, r1
 8009628:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800962a:	f7fe fd0b 	bl	8008044 <HAL_GetTick>
 800962e:	0003      	movs	r3, r0
 8009630:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009632:	e008      	b.n	8009646 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009634:	f7fe fd06 	bl	8008044 <HAL_GetTick>
 8009638:	0002      	movs	r2, r0
 800963a:	693b      	ldr	r3, [r7, #16]
 800963c:	1ad3      	subs	r3, r2, r3
 800963e:	2b02      	cmp	r3, #2
 8009640:	d901      	bls.n	8009646 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8009642:	2303      	movs	r3, #3
 8009644:	e1e4      	b.n	8009a10 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009646:	4b11      	ldr	r3, [pc, #68]	@ (800968c <HAL_RCC_OscConfig+0x330>)
 8009648:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800964a:	2202      	movs	r2, #2
 800964c:	4013      	ands	r3, r2
 800964e:	d1f1      	bne.n	8009634 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	2204      	movs	r2, #4
 8009656:	4013      	ands	r3, r2
 8009658:	d100      	bne.n	800965c <HAL_RCC_OscConfig+0x300>
 800965a:	e0c7      	b.n	80097ec <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 800965c:	231f      	movs	r3, #31
 800965e:	18fb      	adds	r3, r7, r3
 8009660:	2200      	movs	r2, #0
 8009662:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8009664:	4b09      	ldr	r3, [pc, #36]	@ (800968c <HAL_RCC_OscConfig+0x330>)
 8009666:	689b      	ldr	r3, [r3, #8]
 8009668:	2238      	movs	r2, #56	@ 0x38
 800966a:	4013      	ands	r3, r2
 800966c:	2b20      	cmp	r3, #32
 800966e:	d11f      	bne.n	80096b0 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8009670:	4b06      	ldr	r3, [pc, #24]	@ (800968c <HAL_RCC_OscConfig+0x330>)
 8009672:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009674:	2202      	movs	r2, #2
 8009676:	4013      	ands	r3, r2
 8009678:	d100      	bne.n	800967c <HAL_RCC_OscConfig+0x320>
 800967a:	e0b7      	b.n	80097ec <HAL_RCC_OscConfig+0x490>
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	689b      	ldr	r3, [r3, #8]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d000      	beq.n	8009686 <HAL_RCC_OscConfig+0x32a>
 8009684:	e0b2      	b.n	80097ec <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8009686:	2301      	movs	r3, #1
 8009688:	e1c2      	b.n	8009a10 <HAL_RCC_OscConfig+0x6b4>
 800968a:	46c0      	nop			@ (mov r8, r8)
 800968c:	40021000 	.word	0x40021000
 8009690:	fffeffff 	.word	0xfffeffff
 8009694:	fffbffff 	.word	0xfffbffff
 8009698:	ffff80ff 	.word	0xffff80ff
 800969c:	ffffc7ff 	.word	0xffffc7ff
 80096a0:	00f42400 	.word	0x00f42400
 80096a4:	200009c8 	.word	0x200009c8
 80096a8:	200009cc 	.word	0x200009cc
 80096ac:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80096b0:	4bb5      	ldr	r3, [pc, #724]	@ (8009988 <HAL_RCC_OscConfig+0x62c>)
 80096b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80096b4:	2380      	movs	r3, #128	@ 0x80
 80096b6:	055b      	lsls	r3, r3, #21
 80096b8:	4013      	ands	r3, r2
 80096ba:	d101      	bne.n	80096c0 <HAL_RCC_OscConfig+0x364>
 80096bc:	2301      	movs	r3, #1
 80096be:	e000      	b.n	80096c2 <HAL_RCC_OscConfig+0x366>
 80096c0:	2300      	movs	r3, #0
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d011      	beq.n	80096ea <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80096c6:	4bb0      	ldr	r3, [pc, #704]	@ (8009988 <HAL_RCC_OscConfig+0x62c>)
 80096c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80096ca:	4baf      	ldr	r3, [pc, #700]	@ (8009988 <HAL_RCC_OscConfig+0x62c>)
 80096cc:	2180      	movs	r1, #128	@ 0x80
 80096ce:	0549      	lsls	r1, r1, #21
 80096d0:	430a      	orrs	r2, r1
 80096d2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80096d4:	4bac      	ldr	r3, [pc, #688]	@ (8009988 <HAL_RCC_OscConfig+0x62c>)
 80096d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80096d8:	2380      	movs	r3, #128	@ 0x80
 80096da:	055b      	lsls	r3, r3, #21
 80096dc:	4013      	ands	r3, r2
 80096de:	60fb      	str	r3, [r7, #12]
 80096e0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80096e2:	231f      	movs	r3, #31
 80096e4:	18fb      	adds	r3, r7, r3
 80096e6:	2201      	movs	r2, #1
 80096e8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80096ea:	4ba8      	ldr	r3, [pc, #672]	@ (800998c <HAL_RCC_OscConfig+0x630>)
 80096ec:	681a      	ldr	r2, [r3, #0]
 80096ee:	2380      	movs	r3, #128	@ 0x80
 80096f0:	005b      	lsls	r3, r3, #1
 80096f2:	4013      	ands	r3, r2
 80096f4:	d11a      	bne.n	800972c <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80096f6:	4ba5      	ldr	r3, [pc, #660]	@ (800998c <HAL_RCC_OscConfig+0x630>)
 80096f8:	681a      	ldr	r2, [r3, #0]
 80096fa:	4ba4      	ldr	r3, [pc, #656]	@ (800998c <HAL_RCC_OscConfig+0x630>)
 80096fc:	2180      	movs	r1, #128	@ 0x80
 80096fe:	0049      	lsls	r1, r1, #1
 8009700:	430a      	orrs	r2, r1
 8009702:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8009704:	f7fe fc9e 	bl	8008044 <HAL_GetTick>
 8009708:	0003      	movs	r3, r0
 800970a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800970c:	e008      	b.n	8009720 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800970e:	f7fe fc99 	bl	8008044 <HAL_GetTick>
 8009712:	0002      	movs	r2, r0
 8009714:	693b      	ldr	r3, [r7, #16]
 8009716:	1ad3      	subs	r3, r2, r3
 8009718:	2b02      	cmp	r3, #2
 800971a:	d901      	bls.n	8009720 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 800971c:	2303      	movs	r3, #3
 800971e:	e177      	b.n	8009a10 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009720:	4b9a      	ldr	r3, [pc, #616]	@ (800998c <HAL_RCC_OscConfig+0x630>)
 8009722:	681a      	ldr	r2, [r3, #0]
 8009724:	2380      	movs	r3, #128	@ 0x80
 8009726:	005b      	lsls	r3, r3, #1
 8009728:	4013      	ands	r3, r2
 800972a:	d0f0      	beq.n	800970e <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	689b      	ldr	r3, [r3, #8]
 8009730:	2b01      	cmp	r3, #1
 8009732:	d106      	bne.n	8009742 <HAL_RCC_OscConfig+0x3e6>
 8009734:	4b94      	ldr	r3, [pc, #592]	@ (8009988 <HAL_RCC_OscConfig+0x62c>)
 8009736:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009738:	4b93      	ldr	r3, [pc, #588]	@ (8009988 <HAL_RCC_OscConfig+0x62c>)
 800973a:	2101      	movs	r1, #1
 800973c:	430a      	orrs	r2, r1
 800973e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009740:	e01c      	b.n	800977c <HAL_RCC_OscConfig+0x420>
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	689b      	ldr	r3, [r3, #8]
 8009746:	2b05      	cmp	r3, #5
 8009748:	d10c      	bne.n	8009764 <HAL_RCC_OscConfig+0x408>
 800974a:	4b8f      	ldr	r3, [pc, #572]	@ (8009988 <HAL_RCC_OscConfig+0x62c>)
 800974c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800974e:	4b8e      	ldr	r3, [pc, #568]	@ (8009988 <HAL_RCC_OscConfig+0x62c>)
 8009750:	2104      	movs	r1, #4
 8009752:	430a      	orrs	r2, r1
 8009754:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009756:	4b8c      	ldr	r3, [pc, #560]	@ (8009988 <HAL_RCC_OscConfig+0x62c>)
 8009758:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800975a:	4b8b      	ldr	r3, [pc, #556]	@ (8009988 <HAL_RCC_OscConfig+0x62c>)
 800975c:	2101      	movs	r1, #1
 800975e:	430a      	orrs	r2, r1
 8009760:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009762:	e00b      	b.n	800977c <HAL_RCC_OscConfig+0x420>
 8009764:	4b88      	ldr	r3, [pc, #544]	@ (8009988 <HAL_RCC_OscConfig+0x62c>)
 8009766:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009768:	4b87      	ldr	r3, [pc, #540]	@ (8009988 <HAL_RCC_OscConfig+0x62c>)
 800976a:	2101      	movs	r1, #1
 800976c:	438a      	bics	r2, r1
 800976e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009770:	4b85      	ldr	r3, [pc, #532]	@ (8009988 <HAL_RCC_OscConfig+0x62c>)
 8009772:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009774:	4b84      	ldr	r3, [pc, #528]	@ (8009988 <HAL_RCC_OscConfig+0x62c>)
 8009776:	2104      	movs	r1, #4
 8009778:	438a      	bics	r2, r1
 800977a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	689b      	ldr	r3, [r3, #8]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d014      	beq.n	80097ae <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009784:	f7fe fc5e 	bl	8008044 <HAL_GetTick>
 8009788:	0003      	movs	r3, r0
 800978a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800978c:	e009      	b.n	80097a2 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800978e:	f7fe fc59 	bl	8008044 <HAL_GetTick>
 8009792:	0002      	movs	r2, r0
 8009794:	693b      	ldr	r3, [r7, #16]
 8009796:	1ad3      	subs	r3, r2, r3
 8009798:	4a7d      	ldr	r2, [pc, #500]	@ (8009990 <HAL_RCC_OscConfig+0x634>)
 800979a:	4293      	cmp	r3, r2
 800979c:	d901      	bls.n	80097a2 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800979e:	2303      	movs	r3, #3
 80097a0:	e136      	b.n	8009a10 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80097a2:	4b79      	ldr	r3, [pc, #484]	@ (8009988 <HAL_RCC_OscConfig+0x62c>)
 80097a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80097a6:	2202      	movs	r2, #2
 80097a8:	4013      	ands	r3, r2
 80097aa:	d0f0      	beq.n	800978e <HAL_RCC_OscConfig+0x432>
 80097ac:	e013      	b.n	80097d6 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097ae:	f7fe fc49 	bl	8008044 <HAL_GetTick>
 80097b2:	0003      	movs	r3, r0
 80097b4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80097b6:	e009      	b.n	80097cc <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80097b8:	f7fe fc44 	bl	8008044 <HAL_GetTick>
 80097bc:	0002      	movs	r2, r0
 80097be:	693b      	ldr	r3, [r7, #16]
 80097c0:	1ad3      	subs	r3, r2, r3
 80097c2:	4a73      	ldr	r2, [pc, #460]	@ (8009990 <HAL_RCC_OscConfig+0x634>)
 80097c4:	4293      	cmp	r3, r2
 80097c6:	d901      	bls.n	80097cc <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 80097c8:	2303      	movs	r3, #3
 80097ca:	e121      	b.n	8009a10 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80097cc:	4b6e      	ldr	r3, [pc, #440]	@ (8009988 <HAL_RCC_OscConfig+0x62c>)
 80097ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80097d0:	2202      	movs	r2, #2
 80097d2:	4013      	ands	r3, r2
 80097d4:	d1f0      	bne.n	80097b8 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80097d6:	231f      	movs	r3, #31
 80097d8:	18fb      	adds	r3, r7, r3
 80097da:	781b      	ldrb	r3, [r3, #0]
 80097dc:	2b01      	cmp	r3, #1
 80097de:	d105      	bne.n	80097ec <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80097e0:	4b69      	ldr	r3, [pc, #420]	@ (8009988 <HAL_RCC_OscConfig+0x62c>)
 80097e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80097e4:	4b68      	ldr	r3, [pc, #416]	@ (8009988 <HAL_RCC_OscConfig+0x62c>)
 80097e6:	496b      	ldr	r1, [pc, #428]	@ (8009994 <HAL_RCC_OscConfig+0x638>)
 80097e8:	400a      	ands	r2, r1
 80097ea:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	2220      	movs	r2, #32
 80097f2:	4013      	ands	r3, r2
 80097f4:	d039      	beq.n	800986a <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	69db      	ldr	r3, [r3, #28]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d01b      	beq.n	8009836 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80097fe:	4b62      	ldr	r3, [pc, #392]	@ (8009988 <HAL_RCC_OscConfig+0x62c>)
 8009800:	681a      	ldr	r2, [r3, #0]
 8009802:	4b61      	ldr	r3, [pc, #388]	@ (8009988 <HAL_RCC_OscConfig+0x62c>)
 8009804:	2180      	movs	r1, #128	@ 0x80
 8009806:	03c9      	lsls	r1, r1, #15
 8009808:	430a      	orrs	r2, r1
 800980a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800980c:	f7fe fc1a 	bl	8008044 <HAL_GetTick>
 8009810:	0003      	movs	r3, r0
 8009812:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8009814:	e008      	b.n	8009828 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009816:	f7fe fc15 	bl	8008044 <HAL_GetTick>
 800981a:	0002      	movs	r2, r0
 800981c:	693b      	ldr	r3, [r7, #16]
 800981e:	1ad3      	subs	r3, r2, r3
 8009820:	2b02      	cmp	r3, #2
 8009822:	d901      	bls.n	8009828 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8009824:	2303      	movs	r3, #3
 8009826:	e0f3      	b.n	8009a10 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8009828:	4b57      	ldr	r3, [pc, #348]	@ (8009988 <HAL_RCC_OscConfig+0x62c>)
 800982a:	681a      	ldr	r2, [r3, #0]
 800982c:	2380      	movs	r3, #128	@ 0x80
 800982e:	041b      	lsls	r3, r3, #16
 8009830:	4013      	ands	r3, r2
 8009832:	d0f0      	beq.n	8009816 <HAL_RCC_OscConfig+0x4ba>
 8009834:	e019      	b.n	800986a <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009836:	4b54      	ldr	r3, [pc, #336]	@ (8009988 <HAL_RCC_OscConfig+0x62c>)
 8009838:	681a      	ldr	r2, [r3, #0]
 800983a:	4b53      	ldr	r3, [pc, #332]	@ (8009988 <HAL_RCC_OscConfig+0x62c>)
 800983c:	4956      	ldr	r1, [pc, #344]	@ (8009998 <HAL_RCC_OscConfig+0x63c>)
 800983e:	400a      	ands	r2, r1
 8009840:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009842:	f7fe fbff 	bl	8008044 <HAL_GetTick>
 8009846:	0003      	movs	r3, r0
 8009848:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800984a:	e008      	b.n	800985e <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800984c:	f7fe fbfa 	bl	8008044 <HAL_GetTick>
 8009850:	0002      	movs	r2, r0
 8009852:	693b      	ldr	r3, [r7, #16]
 8009854:	1ad3      	subs	r3, r2, r3
 8009856:	2b02      	cmp	r3, #2
 8009858:	d901      	bls.n	800985e <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 800985a:	2303      	movs	r3, #3
 800985c:	e0d8      	b.n	8009a10 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800985e:	4b4a      	ldr	r3, [pc, #296]	@ (8009988 <HAL_RCC_OscConfig+0x62c>)
 8009860:	681a      	ldr	r2, [r3, #0]
 8009862:	2380      	movs	r3, #128	@ 0x80
 8009864:	041b      	lsls	r3, r3, #16
 8009866:	4013      	ands	r3, r2
 8009868:	d1f0      	bne.n	800984c <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6a1b      	ldr	r3, [r3, #32]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d100      	bne.n	8009874 <HAL_RCC_OscConfig+0x518>
 8009872:	e0cc      	b.n	8009a0e <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009874:	4b44      	ldr	r3, [pc, #272]	@ (8009988 <HAL_RCC_OscConfig+0x62c>)
 8009876:	689b      	ldr	r3, [r3, #8]
 8009878:	2238      	movs	r2, #56	@ 0x38
 800987a:	4013      	ands	r3, r2
 800987c:	2b10      	cmp	r3, #16
 800987e:	d100      	bne.n	8009882 <HAL_RCC_OscConfig+0x526>
 8009880:	e07b      	b.n	800997a <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6a1b      	ldr	r3, [r3, #32]
 8009886:	2b02      	cmp	r3, #2
 8009888:	d156      	bne.n	8009938 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800988a:	4b3f      	ldr	r3, [pc, #252]	@ (8009988 <HAL_RCC_OscConfig+0x62c>)
 800988c:	681a      	ldr	r2, [r3, #0]
 800988e:	4b3e      	ldr	r3, [pc, #248]	@ (8009988 <HAL_RCC_OscConfig+0x62c>)
 8009890:	4942      	ldr	r1, [pc, #264]	@ (800999c <HAL_RCC_OscConfig+0x640>)
 8009892:	400a      	ands	r2, r1
 8009894:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009896:	f7fe fbd5 	bl	8008044 <HAL_GetTick>
 800989a:	0003      	movs	r3, r0
 800989c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800989e:	e008      	b.n	80098b2 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80098a0:	f7fe fbd0 	bl	8008044 <HAL_GetTick>
 80098a4:	0002      	movs	r2, r0
 80098a6:	693b      	ldr	r3, [r7, #16]
 80098a8:	1ad3      	subs	r3, r2, r3
 80098aa:	2b02      	cmp	r3, #2
 80098ac:	d901      	bls.n	80098b2 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 80098ae:	2303      	movs	r3, #3
 80098b0:	e0ae      	b.n	8009a10 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80098b2:	4b35      	ldr	r3, [pc, #212]	@ (8009988 <HAL_RCC_OscConfig+0x62c>)
 80098b4:	681a      	ldr	r2, [r3, #0]
 80098b6:	2380      	movs	r3, #128	@ 0x80
 80098b8:	049b      	lsls	r3, r3, #18
 80098ba:	4013      	ands	r3, r2
 80098bc:	d1f0      	bne.n	80098a0 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80098be:	4b32      	ldr	r3, [pc, #200]	@ (8009988 <HAL_RCC_OscConfig+0x62c>)
 80098c0:	68db      	ldr	r3, [r3, #12]
 80098c2:	4a37      	ldr	r2, [pc, #220]	@ (80099a0 <HAL_RCC_OscConfig+0x644>)
 80098c4:	4013      	ands	r3, r2
 80098c6:	0019      	movs	r1, r3
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098d0:	431a      	orrs	r2, r3
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098d6:	021b      	lsls	r3, r3, #8
 80098d8:	431a      	orrs	r2, r3
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098de:	431a      	orrs	r2, r3
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098e4:	431a      	orrs	r2, r3
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098ea:	431a      	orrs	r2, r3
 80098ec:	4b26      	ldr	r3, [pc, #152]	@ (8009988 <HAL_RCC_OscConfig+0x62c>)
 80098ee:	430a      	orrs	r2, r1
 80098f0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80098f2:	4b25      	ldr	r3, [pc, #148]	@ (8009988 <HAL_RCC_OscConfig+0x62c>)
 80098f4:	681a      	ldr	r2, [r3, #0]
 80098f6:	4b24      	ldr	r3, [pc, #144]	@ (8009988 <HAL_RCC_OscConfig+0x62c>)
 80098f8:	2180      	movs	r1, #128	@ 0x80
 80098fa:	0449      	lsls	r1, r1, #17
 80098fc:	430a      	orrs	r2, r1
 80098fe:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8009900:	4b21      	ldr	r3, [pc, #132]	@ (8009988 <HAL_RCC_OscConfig+0x62c>)
 8009902:	68da      	ldr	r2, [r3, #12]
 8009904:	4b20      	ldr	r3, [pc, #128]	@ (8009988 <HAL_RCC_OscConfig+0x62c>)
 8009906:	2180      	movs	r1, #128	@ 0x80
 8009908:	0549      	lsls	r1, r1, #21
 800990a:	430a      	orrs	r2, r1
 800990c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800990e:	f7fe fb99 	bl	8008044 <HAL_GetTick>
 8009912:	0003      	movs	r3, r0
 8009914:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009916:	e008      	b.n	800992a <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009918:	f7fe fb94 	bl	8008044 <HAL_GetTick>
 800991c:	0002      	movs	r2, r0
 800991e:	693b      	ldr	r3, [r7, #16]
 8009920:	1ad3      	subs	r3, r2, r3
 8009922:	2b02      	cmp	r3, #2
 8009924:	d901      	bls.n	800992a <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8009926:	2303      	movs	r3, #3
 8009928:	e072      	b.n	8009a10 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800992a:	4b17      	ldr	r3, [pc, #92]	@ (8009988 <HAL_RCC_OscConfig+0x62c>)
 800992c:	681a      	ldr	r2, [r3, #0]
 800992e:	2380      	movs	r3, #128	@ 0x80
 8009930:	049b      	lsls	r3, r3, #18
 8009932:	4013      	ands	r3, r2
 8009934:	d0f0      	beq.n	8009918 <HAL_RCC_OscConfig+0x5bc>
 8009936:	e06a      	b.n	8009a0e <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009938:	4b13      	ldr	r3, [pc, #76]	@ (8009988 <HAL_RCC_OscConfig+0x62c>)
 800993a:	681a      	ldr	r2, [r3, #0]
 800993c:	4b12      	ldr	r3, [pc, #72]	@ (8009988 <HAL_RCC_OscConfig+0x62c>)
 800993e:	4917      	ldr	r1, [pc, #92]	@ (800999c <HAL_RCC_OscConfig+0x640>)
 8009940:	400a      	ands	r2, r1
 8009942:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009944:	f7fe fb7e 	bl	8008044 <HAL_GetTick>
 8009948:	0003      	movs	r3, r0
 800994a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800994c:	e008      	b.n	8009960 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800994e:	f7fe fb79 	bl	8008044 <HAL_GetTick>
 8009952:	0002      	movs	r2, r0
 8009954:	693b      	ldr	r3, [r7, #16]
 8009956:	1ad3      	subs	r3, r2, r3
 8009958:	2b02      	cmp	r3, #2
 800995a:	d901      	bls.n	8009960 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 800995c:	2303      	movs	r3, #3
 800995e:	e057      	b.n	8009a10 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009960:	4b09      	ldr	r3, [pc, #36]	@ (8009988 <HAL_RCC_OscConfig+0x62c>)
 8009962:	681a      	ldr	r2, [r3, #0]
 8009964:	2380      	movs	r3, #128	@ 0x80
 8009966:	049b      	lsls	r3, r3, #18
 8009968:	4013      	ands	r3, r2
 800996a:	d1f0      	bne.n	800994e <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800996c:	4b06      	ldr	r3, [pc, #24]	@ (8009988 <HAL_RCC_OscConfig+0x62c>)
 800996e:	68da      	ldr	r2, [r3, #12]
 8009970:	4b05      	ldr	r3, [pc, #20]	@ (8009988 <HAL_RCC_OscConfig+0x62c>)
 8009972:	490c      	ldr	r1, [pc, #48]	@ (80099a4 <HAL_RCC_OscConfig+0x648>)
 8009974:	400a      	ands	r2, r1
 8009976:	60da      	str	r2, [r3, #12]
 8009978:	e049      	b.n	8009a0e <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	6a1b      	ldr	r3, [r3, #32]
 800997e:	2b01      	cmp	r3, #1
 8009980:	d112      	bne.n	80099a8 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8009982:	2301      	movs	r3, #1
 8009984:	e044      	b.n	8009a10 <HAL_RCC_OscConfig+0x6b4>
 8009986:	46c0      	nop			@ (mov r8, r8)
 8009988:	40021000 	.word	0x40021000
 800998c:	40007000 	.word	0x40007000
 8009990:	00001388 	.word	0x00001388
 8009994:	efffffff 	.word	0xefffffff
 8009998:	ffbfffff 	.word	0xffbfffff
 800999c:	feffffff 	.word	0xfeffffff
 80099a0:	11c1808c 	.word	0x11c1808c
 80099a4:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80099a8:	4b1b      	ldr	r3, [pc, #108]	@ (8009a18 <HAL_RCC_OscConfig+0x6bc>)
 80099aa:	68db      	ldr	r3, [r3, #12]
 80099ac:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80099ae:	697b      	ldr	r3, [r7, #20]
 80099b0:	2203      	movs	r2, #3
 80099b2:	401a      	ands	r2, r3
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099b8:	429a      	cmp	r2, r3
 80099ba:	d126      	bne.n	8009a0a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80099bc:	697b      	ldr	r3, [r7, #20]
 80099be:	2270      	movs	r2, #112	@ 0x70
 80099c0:	401a      	ands	r2, r3
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80099c6:	429a      	cmp	r2, r3
 80099c8:	d11f      	bne.n	8009a0a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80099ca:	697a      	ldr	r2, [r7, #20]
 80099cc:	23fe      	movs	r3, #254	@ 0xfe
 80099ce:	01db      	lsls	r3, r3, #7
 80099d0:	401a      	ands	r2, r3
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099d6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80099d8:	429a      	cmp	r2, r3
 80099da:	d116      	bne.n	8009a0a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80099dc:	697a      	ldr	r2, [r7, #20]
 80099de:	23f8      	movs	r3, #248	@ 0xf8
 80099e0:	039b      	lsls	r3, r3, #14
 80099e2:	401a      	ands	r2, r3
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80099e8:	429a      	cmp	r2, r3
 80099ea:	d10e      	bne.n	8009a0a <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80099ec:	697a      	ldr	r2, [r7, #20]
 80099ee:	23e0      	movs	r3, #224	@ 0xe0
 80099f0:	051b      	lsls	r3, r3, #20
 80099f2:	401a      	ands	r2, r3
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80099f8:	429a      	cmp	r2, r3
 80099fa:	d106      	bne.n	8009a0a <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80099fc:	697b      	ldr	r3, [r7, #20]
 80099fe:	0f5b      	lsrs	r3, r3, #29
 8009a00:	075a      	lsls	r2, r3, #29
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8009a06:	429a      	cmp	r2, r3
 8009a08:	d001      	beq.n	8009a0e <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8009a0a:	2301      	movs	r3, #1
 8009a0c:	e000      	b.n	8009a10 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8009a0e:	2300      	movs	r3, #0
}
 8009a10:	0018      	movs	r0, r3
 8009a12:	46bd      	mov	sp, r7
 8009a14:	b008      	add	sp, #32
 8009a16:	bd80      	pop	{r7, pc}
 8009a18:	40021000 	.word	0x40021000

08009a1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b084      	sub	sp, #16
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
 8009a24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d101      	bne.n	8009a30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	e0e9      	b.n	8009c04 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009a30:	4b76      	ldr	r3, [pc, #472]	@ (8009c0c <HAL_RCC_ClockConfig+0x1f0>)
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	2207      	movs	r2, #7
 8009a36:	4013      	ands	r3, r2
 8009a38:	683a      	ldr	r2, [r7, #0]
 8009a3a:	429a      	cmp	r2, r3
 8009a3c:	d91e      	bls.n	8009a7c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009a3e:	4b73      	ldr	r3, [pc, #460]	@ (8009c0c <HAL_RCC_ClockConfig+0x1f0>)
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	2207      	movs	r2, #7
 8009a44:	4393      	bics	r3, r2
 8009a46:	0019      	movs	r1, r3
 8009a48:	4b70      	ldr	r3, [pc, #448]	@ (8009c0c <HAL_RCC_ClockConfig+0x1f0>)
 8009a4a:	683a      	ldr	r2, [r7, #0]
 8009a4c:	430a      	orrs	r2, r1
 8009a4e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8009a50:	f7fe faf8 	bl	8008044 <HAL_GetTick>
 8009a54:	0003      	movs	r3, r0
 8009a56:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8009a58:	e009      	b.n	8009a6e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009a5a:	f7fe faf3 	bl	8008044 <HAL_GetTick>
 8009a5e:	0002      	movs	r2, r0
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	1ad3      	subs	r3, r2, r3
 8009a64:	4a6a      	ldr	r2, [pc, #424]	@ (8009c10 <HAL_RCC_ClockConfig+0x1f4>)
 8009a66:	4293      	cmp	r3, r2
 8009a68:	d901      	bls.n	8009a6e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8009a6a:	2303      	movs	r3, #3
 8009a6c:	e0ca      	b.n	8009c04 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8009a6e:	4b67      	ldr	r3, [pc, #412]	@ (8009c0c <HAL_RCC_ClockConfig+0x1f0>)
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	2207      	movs	r2, #7
 8009a74:	4013      	ands	r3, r2
 8009a76:	683a      	ldr	r2, [r7, #0]
 8009a78:	429a      	cmp	r2, r3
 8009a7a:	d1ee      	bne.n	8009a5a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	2202      	movs	r2, #2
 8009a82:	4013      	ands	r3, r2
 8009a84:	d015      	beq.n	8009ab2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	2204      	movs	r2, #4
 8009a8c:	4013      	ands	r3, r2
 8009a8e:	d006      	beq.n	8009a9e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8009a90:	4b60      	ldr	r3, [pc, #384]	@ (8009c14 <HAL_RCC_ClockConfig+0x1f8>)
 8009a92:	689a      	ldr	r2, [r3, #8]
 8009a94:	4b5f      	ldr	r3, [pc, #380]	@ (8009c14 <HAL_RCC_ClockConfig+0x1f8>)
 8009a96:	21e0      	movs	r1, #224	@ 0xe0
 8009a98:	01c9      	lsls	r1, r1, #7
 8009a9a:	430a      	orrs	r2, r1
 8009a9c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009a9e:	4b5d      	ldr	r3, [pc, #372]	@ (8009c14 <HAL_RCC_ClockConfig+0x1f8>)
 8009aa0:	689b      	ldr	r3, [r3, #8]
 8009aa2:	4a5d      	ldr	r2, [pc, #372]	@ (8009c18 <HAL_RCC_ClockConfig+0x1fc>)
 8009aa4:	4013      	ands	r3, r2
 8009aa6:	0019      	movs	r1, r3
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	689a      	ldr	r2, [r3, #8]
 8009aac:	4b59      	ldr	r3, [pc, #356]	@ (8009c14 <HAL_RCC_ClockConfig+0x1f8>)
 8009aae:	430a      	orrs	r2, r1
 8009ab0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	2201      	movs	r2, #1
 8009ab8:	4013      	ands	r3, r2
 8009aba:	d057      	beq.n	8009b6c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	685b      	ldr	r3, [r3, #4]
 8009ac0:	2b01      	cmp	r3, #1
 8009ac2:	d107      	bne.n	8009ad4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009ac4:	4b53      	ldr	r3, [pc, #332]	@ (8009c14 <HAL_RCC_ClockConfig+0x1f8>)
 8009ac6:	681a      	ldr	r2, [r3, #0]
 8009ac8:	2380      	movs	r3, #128	@ 0x80
 8009aca:	029b      	lsls	r3, r3, #10
 8009acc:	4013      	ands	r3, r2
 8009ace:	d12b      	bne.n	8009b28 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	e097      	b.n	8009c04 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	685b      	ldr	r3, [r3, #4]
 8009ad8:	2b02      	cmp	r3, #2
 8009ada:	d107      	bne.n	8009aec <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009adc:	4b4d      	ldr	r3, [pc, #308]	@ (8009c14 <HAL_RCC_ClockConfig+0x1f8>)
 8009ade:	681a      	ldr	r2, [r3, #0]
 8009ae0:	2380      	movs	r3, #128	@ 0x80
 8009ae2:	049b      	lsls	r3, r3, #18
 8009ae4:	4013      	ands	r3, r2
 8009ae6:	d11f      	bne.n	8009b28 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8009ae8:	2301      	movs	r3, #1
 8009aea:	e08b      	b.n	8009c04 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	685b      	ldr	r3, [r3, #4]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d107      	bne.n	8009b04 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009af4:	4b47      	ldr	r3, [pc, #284]	@ (8009c14 <HAL_RCC_ClockConfig+0x1f8>)
 8009af6:	681a      	ldr	r2, [r3, #0]
 8009af8:	2380      	movs	r3, #128	@ 0x80
 8009afa:	00db      	lsls	r3, r3, #3
 8009afc:	4013      	ands	r3, r2
 8009afe:	d113      	bne.n	8009b28 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8009b00:	2301      	movs	r3, #1
 8009b02:	e07f      	b.n	8009c04 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	685b      	ldr	r3, [r3, #4]
 8009b08:	2b03      	cmp	r3, #3
 8009b0a:	d106      	bne.n	8009b1a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009b0c:	4b41      	ldr	r3, [pc, #260]	@ (8009c14 <HAL_RCC_ClockConfig+0x1f8>)
 8009b0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009b10:	2202      	movs	r2, #2
 8009b12:	4013      	ands	r3, r2
 8009b14:	d108      	bne.n	8009b28 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8009b16:	2301      	movs	r3, #1
 8009b18:	e074      	b.n	8009c04 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009b1a:	4b3e      	ldr	r3, [pc, #248]	@ (8009c14 <HAL_RCC_ClockConfig+0x1f8>)
 8009b1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009b1e:	2202      	movs	r2, #2
 8009b20:	4013      	ands	r3, r2
 8009b22:	d101      	bne.n	8009b28 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8009b24:	2301      	movs	r3, #1
 8009b26:	e06d      	b.n	8009c04 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009b28:	4b3a      	ldr	r3, [pc, #232]	@ (8009c14 <HAL_RCC_ClockConfig+0x1f8>)
 8009b2a:	689b      	ldr	r3, [r3, #8]
 8009b2c:	2207      	movs	r2, #7
 8009b2e:	4393      	bics	r3, r2
 8009b30:	0019      	movs	r1, r3
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	685a      	ldr	r2, [r3, #4]
 8009b36:	4b37      	ldr	r3, [pc, #220]	@ (8009c14 <HAL_RCC_ClockConfig+0x1f8>)
 8009b38:	430a      	orrs	r2, r1
 8009b3a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b3c:	f7fe fa82 	bl	8008044 <HAL_GetTick>
 8009b40:	0003      	movs	r3, r0
 8009b42:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009b44:	e009      	b.n	8009b5a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009b46:	f7fe fa7d 	bl	8008044 <HAL_GetTick>
 8009b4a:	0002      	movs	r2, r0
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	1ad3      	subs	r3, r2, r3
 8009b50:	4a2f      	ldr	r2, [pc, #188]	@ (8009c10 <HAL_RCC_ClockConfig+0x1f4>)
 8009b52:	4293      	cmp	r3, r2
 8009b54:	d901      	bls.n	8009b5a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8009b56:	2303      	movs	r3, #3
 8009b58:	e054      	b.n	8009c04 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009b5a:	4b2e      	ldr	r3, [pc, #184]	@ (8009c14 <HAL_RCC_ClockConfig+0x1f8>)
 8009b5c:	689b      	ldr	r3, [r3, #8]
 8009b5e:	2238      	movs	r2, #56	@ 0x38
 8009b60:	401a      	ands	r2, r3
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	685b      	ldr	r3, [r3, #4]
 8009b66:	00db      	lsls	r3, r3, #3
 8009b68:	429a      	cmp	r2, r3
 8009b6a:	d1ec      	bne.n	8009b46 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009b6c:	4b27      	ldr	r3, [pc, #156]	@ (8009c0c <HAL_RCC_ClockConfig+0x1f0>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	2207      	movs	r2, #7
 8009b72:	4013      	ands	r3, r2
 8009b74:	683a      	ldr	r2, [r7, #0]
 8009b76:	429a      	cmp	r2, r3
 8009b78:	d21e      	bcs.n	8009bb8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009b7a:	4b24      	ldr	r3, [pc, #144]	@ (8009c0c <HAL_RCC_ClockConfig+0x1f0>)
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	2207      	movs	r2, #7
 8009b80:	4393      	bics	r3, r2
 8009b82:	0019      	movs	r1, r3
 8009b84:	4b21      	ldr	r3, [pc, #132]	@ (8009c0c <HAL_RCC_ClockConfig+0x1f0>)
 8009b86:	683a      	ldr	r2, [r7, #0]
 8009b88:	430a      	orrs	r2, r1
 8009b8a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8009b8c:	f7fe fa5a 	bl	8008044 <HAL_GetTick>
 8009b90:	0003      	movs	r3, r0
 8009b92:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8009b94:	e009      	b.n	8009baa <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009b96:	f7fe fa55 	bl	8008044 <HAL_GetTick>
 8009b9a:	0002      	movs	r2, r0
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	1ad3      	subs	r3, r2, r3
 8009ba0:	4a1b      	ldr	r2, [pc, #108]	@ (8009c10 <HAL_RCC_ClockConfig+0x1f4>)
 8009ba2:	4293      	cmp	r3, r2
 8009ba4:	d901      	bls.n	8009baa <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8009ba6:	2303      	movs	r3, #3
 8009ba8:	e02c      	b.n	8009c04 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8009baa:	4b18      	ldr	r3, [pc, #96]	@ (8009c0c <HAL_RCC_ClockConfig+0x1f0>)
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	2207      	movs	r2, #7
 8009bb0:	4013      	ands	r3, r2
 8009bb2:	683a      	ldr	r2, [r7, #0]
 8009bb4:	429a      	cmp	r2, r3
 8009bb6:	d1ee      	bne.n	8009b96 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	2204      	movs	r2, #4
 8009bbe:	4013      	ands	r3, r2
 8009bc0:	d009      	beq.n	8009bd6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8009bc2:	4b14      	ldr	r3, [pc, #80]	@ (8009c14 <HAL_RCC_ClockConfig+0x1f8>)
 8009bc4:	689b      	ldr	r3, [r3, #8]
 8009bc6:	4a15      	ldr	r2, [pc, #84]	@ (8009c1c <HAL_RCC_ClockConfig+0x200>)
 8009bc8:	4013      	ands	r3, r2
 8009bca:	0019      	movs	r1, r3
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	68da      	ldr	r2, [r3, #12]
 8009bd0:	4b10      	ldr	r3, [pc, #64]	@ (8009c14 <HAL_RCC_ClockConfig+0x1f8>)
 8009bd2:	430a      	orrs	r2, r1
 8009bd4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8009bd6:	f000 f829 	bl	8009c2c <HAL_RCC_GetSysClockFreq>
 8009bda:	0001      	movs	r1, r0
 8009bdc:	4b0d      	ldr	r3, [pc, #52]	@ (8009c14 <HAL_RCC_ClockConfig+0x1f8>)
 8009bde:	689b      	ldr	r3, [r3, #8]
 8009be0:	0a1b      	lsrs	r3, r3, #8
 8009be2:	220f      	movs	r2, #15
 8009be4:	401a      	ands	r2, r3
 8009be6:	4b0e      	ldr	r3, [pc, #56]	@ (8009c20 <HAL_RCC_ClockConfig+0x204>)
 8009be8:	0092      	lsls	r2, r2, #2
 8009bea:	58d3      	ldr	r3, [r2, r3]
 8009bec:	221f      	movs	r2, #31
 8009bee:	4013      	ands	r3, r2
 8009bf0:	000a      	movs	r2, r1
 8009bf2:	40da      	lsrs	r2, r3
 8009bf4:	4b0b      	ldr	r3, [pc, #44]	@ (8009c24 <HAL_RCC_ClockConfig+0x208>)
 8009bf6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8009bf8:	4b0b      	ldr	r3, [pc, #44]	@ (8009c28 <HAL_RCC_ClockConfig+0x20c>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	0018      	movs	r0, r3
 8009bfe:	f7fe f9c5 	bl	8007f8c <HAL_InitTick>
 8009c02:	0003      	movs	r3, r0
}
 8009c04:	0018      	movs	r0, r3
 8009c06:	46bd      	mov	sp, r7
 8009c08:	b004      	add	sp, #16
 8009c0a:	bd80      	pop	{r7, pc}
 8009c0c:	40022000 	.word	0x40022000
 8009c10:	00001388 	.word	0x00001388
 8009c14:	40021000 	.word	0x40021000
 8009c18:	fffff0ff 	.word	0xfffff0ff
 8009c1c:	ffff8fff 	.word	0xffff8fff
 8009c20:	080115d4 	.word	0x080115d4
 8009c24:	200009c8 	.word	0x200009c8
 8009c28:	200009cc 	.word	0x200009cc

08009c2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b086      	sub	sp, #24
 8009c30:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009c32:	4b3c      	ldr	r3, [pc, #240]	@ (8009d24 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009c34:	689b      	ldr	r3, [r3, #8]
 8009c36:	2238      	movs	r2, #56	@ 0x38
 8009c38:	4013      	ands	r3, r2
 8009c3a:	d10f      	bne.n	8009c5c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8009c3c:	4b39      	ldr	r3, [pc, #228]	@ (8009d24 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	0adb      	lsrs	r3, r3, #11
 8009c42:	2207      	movs	r2, #7
 8009c44:	4013      	ands	r3, r2
 8009c46:	2201      	movs	r2, #1
 8009c48:	409a      	lsls	r2, r3
 8009c4a:	0013      	movs	r3, r2
 8009c4c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8009c4e:	6839      	ldr	r1, [r7, #0]
 8009c50:	4835      	ldr	r0, [pc, #212]	@ (8009d28 <HAL_RCC_GetSysClockFreq+0xfc>)
 8009c52:	f7f6 fa7d 	bl	8000150 <__udivsi3>
 8009c56:	0003      	movs	r3, r0
 8009c58:	613b      	str	r3, [r7, #16]
 8009c5a:	e05d      	b.n	8009d18 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009c5c:	4b31      	ldr	r3, [pc, #196]	@ (8009d24 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009c5e:	689b      	ldr	r3, [r3, #8]
 8009c60:	2238      	movs	r2, #56	@ 0x38
 8009c62:	4013      	ands	r3, r2
 8009c64:	2b08      	cmp	r3, #8
 8009c66:	d102      	bne.n	8009c6e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009c68:	4b30      	ldr	r3, [pc, #192]	@ (8009d2c <HAL_RCC_GetSysClockFreq+0x100>)
 8009c6a:	613b      	str	r3, [r7, #16]
 8009c6c:	e054      	b.n	8009d18 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009c6e:	4b2d      	ldr	r3, [pc, #180]	@ (8009d24 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009c70:	689b      	ldr	r3, [r3, #8]
 8009c72:	2238      	movs	r2, #56	@ 0x38
 8009c74:	4013      	ands	r3, r2
 8009c76:	2b10      	cmp	r3, #16
 8009c78:	d138      	bne.n	8009cec <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8009c7a:	4b2a      	ldr	r3, [pc, #168]	@ (8009d24 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009c7c:	68db      	ldr	r3, [r3, #12]
 8009c7e:	2203      	movs	r2, #3
 8009c80:	4013      	ands	r3, r2
 8009c82:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009c84:	4b27      	ldr	r3, [pc, #156]	@ (8009d24 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009c86:	68db      	ldr	r3, [r3, #12]
 8009c88:	091b      	lsrs	r3, r3, #4
 8009c8a:	2207      	movs	r2, #7
 8009c8c:	4013      	ands	r3, r2
 8009c8e:	3301      	adds	r3, #1
 8009c90:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	2b03      	cmp	r3, #3
 8009c96:	d10d      	bne.n	8009cb4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009c98:	68b9      	ldr	r1, [r7, #8]
 8009c9a:	4824      	ldr	r0, [pc, #144]	@ (8009d2c <HAL_RCC_GetSysClockFreq+0x100>)
 8009c9c:	f7f6 fa58 	bl	8000150 <__udivsi3>
 8009ca0:	0003      	movs	r3, r0
 8009ca2:	0019      	movs	r1, r3
 8009ca4:	4b1f      	ldr	r3, [pc, #124]	@ (8009d24 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009ca6:	68db      	ldr	r3, [r3, #12]
 8009ca8:	0a1b      	lsrs	r3, r3, #8
 8009caa:	227f      	movs	r2, #127	@ 0x7f
 8009cac:	4013      	ands	r3, r2
 8009cae:	434b      	muls	r3, r1
 8009cb0:	617b      	str	r3, [r7, #20]
        break;
 8009cb2:	e00d      	b.n	8009cd0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8009cb4:	68b9      	ldr	r1, [r7, #8]
 8009cb6:	481c      	ldr	r0, [pc, #112]	@ (8009d28 <HAL_RCC_GetSysClockFreq+0xfc>)
 8009cb8:	f7f6 fa4a 	bl	8000150 <__udivsi3>
 8009cbc:	0003      	movs	r3, r0
 8009cbe:	0019      	movs	r1, r3
 8009cc0:	4b18      	ldr	r3, [pc, #96]	@ (8009d24 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009cc2:	68db      	ldr	r3, [r3, #12]
 8009cc4:	0a1b      	lsrs	r3, r3, #8
 8009cc6:	227f      	movs	r2, #127	@ 0x7f
 8009cc8:	4013      	ands	r3, r2
 8009cca:	434b      	muls	r3, r1
 8009ccc:	617b      	str	r3, [r7, #20]
        break;
 8009cce:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8009cd0:	4b14      	ldr	r3, [pc, #80]	@ (8009d24 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009cd2:	68db      	ldr	r3, [r3, #12]
 8009cd4:	0f5b      	lsrs	r3, r3, #29
 8009cd6:	2207      	movs	r2, #7
 8009cd8:	4013      	ands	r3, r2
 8009cda:	3301      	adds	r3, #1
 8009cdc:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8009cde:	6879      	ldr	r1, [r7, #4]
 8009ce0:	6978      	ldr	r0, [r7, #20]
 8009ce2:	f7f6 fa35 	bl	8000150 <__udivsi3>
 8009ce6:	0003      	movs	r3, r0
 8009ce8:	613b      	str	r3, [r7, #16]
 8009cea:	e015      	b.n	8009d18 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8009cec:	4b0d      	ldr	r3, [pc, #52]	@ (8009d24 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009cee:	689b      	ldr	r3, [r3, #8]
 8009cf0:	2238      	movs	r2, #56	@ 0x38
 8009cf2:	4013      	ands	r3, r2
 8009cf4:	2b20      	cmp	r3, #32
 8009cf6:	d103      	bne.n	8009d00 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8009cf8:	2380      	movs	r3, #128	@ 0x80
 8009cfa:	021b      	lsls	r3, r3, #8
 8009cfc:	613b      	str	r3, [r7, #16]
 8009cfe:	e00b      	b.n	8009d18 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8009d00:	4b08      	ldr	r3, [pc, #32]	@ (8009d24 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009d02:	689b      	ldr	r3, [r3, #8]
 8009d04:	2238      	movs	r2, #56	@ 0x38
 8009d06:	4013      	ands	r3, r2
 8009d08:	2b18      	cmp	r3, #24
 8009d0a:	d103      	bne.n	8009d14 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8009d0c:	23fa      	movs	r3, #250	@ 0xfa
 8009d0e:	01db      	lsls	r3, r3, #7
 8009d10:	613b      	str	r3, [r7, #16]
 8009d12:	e001      	b.n	8009d18 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8009d14:	2300      	movs	r3, #0
 8009d16:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8009d18:	693b      	ldr	r3, [r7, #16]
}
 8009d1a:	0018      	movs	r0, r3
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	b006      	add	sp, #24
 8009d20:	bd80      	pop	{r7, pc}
 8009d22:	46c0      	nop			@ (mov r8, r8)
 8009d24:	40021000 	.word	0x40021000
 8009d28:	00f42400 	.word	0x00f42400
 8009d2c:	007a1200 	.word	0x007a1200

08009d30 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009d34:	4b02      	ldr	r3, [pc, #8]	@ (8009d40 <HAL_RCC_GetHCLKFreq+0x10>)
 8009d36:	681b      	ldr	r3, [r3, #0]
}
 8009d38:	0018      	movs	r0, r3
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}
 8009d3e:	46c0      	nop			@ (mov r8, r8)
 8009d40:	200009c8 	.word	0x200009c8

08009d44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009d44:	b5b0      	push	{r4, r5, r7, lr}
 8009d46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8009d48:	f7ff fff2 	bl	8009d30 <HAL_RCC_GetHCLKFreq>
 8009d4c:	0004      	movs	r4, r0
 8009d4e:	f7ff faf9 	bl	8009344 <LL_RCC_GetAPB1Prescaler>
 8009d52:	0003      	movs	r3, r0
 8009d54:	0b1a      	lsrs	r2, r3, #12
 8009d56:	4b05      	ldr	r3, [pc, #20]	@ (8009d6c <HAL_RCC_GetPCLK1Freq+0x28>)
 8009d58:	0092      	lsls	r2, r2, #2
 8009d5a:	58d3      	ldr	r3, [r2, r3]
 8009d5c:	221f      	movs	r2, #31
 8009d5e:	4013      	ands	r3, r2
 8009d60:	40dc      	lsrs	r4, r3
 8009d62:	0023      	movs	r3, r4
}
 8009d64:	0018      	movs	r0, r3
 8009d66:	46bd      	mov	sp, r7
 8009d68:	bdb0      	pop	{r4, r5, r7, pc}
 8009d6a:	46c0      	nop			@ (mov r8, r8)
 8009d6c:	08011614 	.word	0x08011614

08009d70 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b086      	sub	sp, #24
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8009d78:	2313      	movs	r3, #19
 8009d7a:	18fb      	adds	r3, r7, r3
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009d80:	2312      	movs	r3, #18
 8009d82:	18fb      	adds	r3, r7, r3
 8009d84:	2200      	movs	r2, #0
 8009d86:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681a      	ldr	r2, [r3, #0]
 8009d8c:	2380      	movs	r3, #128	@ 0x80
 8009d8e:	029b      	lsls	r3, r3, #10
 8009d90:	4013      	ands	r3, r2
 8009d92:	d100      	bne.n	8009d96 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8009d94:	e0ad      	b.n	8009ef2 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009d96:	2011      	movs	r0, #17
 8009d98:	183b      	adds	r3, r7, r0
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009d9e:	4b47      	ldr	r3, [pc, #284]	@ (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8009da0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009da2:	2380      	movs	r3, #128	@ 0x80
 8009da4:	055b      	lsls	r3, r3, #21
 8009da6:	4013      	ands	r3, r2
 8009da8:	d110      	bne.n	8009dcc <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009daa:	4b44      	ldr	r3, [pc, #272]	@ (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8009dac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009dae:	4b43      	ldr	r3, [pc, #268]	@ (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8009db0:	2180      	movs	r1, #128	@ 0x80
 8009db2:	0549      	lsls	r1, r1, #21
 8009db4:	430a      	orrs	r2, r1
 8009db6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8009db8:	4b40      	ldr	r3, [pc, #256]	@ (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8009dba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009dbc:	2380      	movs	r3, #128	@ 0x80
 8009dbe:	055b      	lsls	r3, r3, #21
 8009dc0:	4013      	ands	r3, r2
 8009dc2:	60bb      	str	r3, [r7, #8]
 8009dc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009dc6:	183b      	adds	r3, r7, r0
 8009dc8:	2201      	movs	r2, #1
 8009dca:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009dcc:	4b3c      	ldr	r3, [pc, #240]	@ (8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8009dce:	681a      	ldr	r2, [r3, #0]
 8009dd0:	4b3b      	ldr	r3, [pc, #236]	@ (8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8009dd2:	2180      	movs	r1, #128	@ 0x80
 8009dd4:	0049      	lsls	r1, r1, #1
 8009dd6:	430a      	orrs	r2, r1
 8009dd8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009dda:	f7fe f933 	bl	8008044 <HAL_GetTick>
 8009dde:	0003      	movs	r3, r0
 8009de0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009de2:	e00b      	b.n	8009dfc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009de4:	f7fe f92e 	bl	8008044 <HAL_GetTick>
 8009de8:	0002      	movs	r2, r0
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	1ad3      	subs	r3, r2, r3
 8009dee:	2b02      	cmp	r3, #2
 8009df0:	d904      	bls.n	8009dfc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8009df2:	2313      	movs	r3, #19
 8009df4:	18fb      	adds	r3, r7, r3
 8009df6:	2203      	movs	r2, #3
 8009df8:	701a      	strb	r2, [r3, #0]
        break;
 8009dfa:	e005      	b.n	8009e08 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009dfc:	4b30      	ldr	r3, [pc, #192]	@ (8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8009dfe:	681a      	ldr	r2, [r3, #0]
 8009e00:	2380      	movs	r3, #128	@ 0x80
 8009e02:	005b      	lsls	r3, r3, #1
 8009e04:	4013      	ands	r3, r2
 8009e06:	d0ed      	beq.n	8009de4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8009e08:	2313      	movs	r3, #19
 8009e0a:	18fb      	adds	r3, r7, r3
 8009e0c:	781b      	ldrb	r3, [r3, #0]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d15e      	bne.n	8009ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009e12:	4b2a      	ldr	r3, [pc, #168]	@ (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8009e14:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009e16:	23c0      	movs	r3, #192	@ 0xc0
 8009e18:	009b      	lsls	r3, r3, #2
 8009e1a:	4013      	ands	r3, r2
 8009e1c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009e1e:	697b      	ldr	r3, [r7, #20]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d019      	beq.n	8009e58 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e28:	697a      	ldr	r2, [r7, #20]
 8009e2a:	429a      	cmp	r2, r3
 8009e2c:	d014      	beq.n	8009e58 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009e2e:	4b23      	ldr	r3, [pc, #140]	@ (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8009e30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009e32:	4a24      	ldr	r2, [pc, #144]	@ (8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8009e34:	4013      	ands	r3, r2
 8009e36:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009e38:	4b20      	ldr	r3, [pc, #128]	@ (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8009e3a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009e3c:	4b1f      	ldr	r3, [pc, #124]	@ (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8009e3e:	2180      	movs	r1, #128	@ 0x80
 8009e40:	0249      	lsls	r1, r1, #9
 8009e42:	430a      	orrs	r2, r1
 8009e44:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009e46:	4b1d      	ldr	r3, [pc, #116]	@ (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8009e48:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009e4a:	4b1c      	ldr	r3, [pc, #112]	@ (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8009e4c:	491e      	ldr	r1, [pc, #120]	@ (8009ec8 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8009e4e:	400a      	ands	r2, r1
 8009e50:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009e52:	4b1a      	ldr	r3, [pc, #104]	@ (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8009e54:	697a      	ldr	r2, [r7, #20]
 8009e56:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009e58:	697b      	ldr	r3, [r7, #20]
 8009e5a:	2201      	movs	r2, #1
 8009e5c:	4013      	ands	r3, r2
 8009e5e:	d016      	beq.n	8009e8e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e60:	f7fe f8f0 	bl	8008044 <HAL_GetTick>
 8009e64:	0003      	movs	r3, r0
 8009e66:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009e68:	e00c      	b.n	8009e84 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009e6a:	f7fe f8eb 	bl	8008044 <HAL_GetTick>
 8009e6e:	0002      	movs	r2, r0
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	1ad3      	subs	r3, r2, r3
 8009e74:	4a15      	ldr	r2, [pc, #84]	@ (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8009e76:	4293      	cmp	r3, r2
 8009e78:	d904      	bls.n	8009e84 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8009e7a:	2313      	movs	r3, #19
 8009e7c:	18fb      	adds	r3, r7, r3
 8009e7e:	2203      	movs	r2, #3
 8009e80:	701a      	strb	r2, [r3, #0]
            break;
 8009e82:	e004      	b.n	8009e8e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009e84:	4b0d      	ldr	r3, [pc, #52]	@ (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8009e86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009e88:	2202      	movs	r2, #2
 8009e8a:	4013      	ands	r3, r2
 8009e8c:	d0ed      	beq.n	8009e6a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8009e8e:	2313      	movs	r3, #19
 8009e90:	18fb      	adds	r3, r7, r3
 8009e92:	781b      	ldrb	r3, [r3, #0]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d10a      	bne.n	8009eae <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009e98:	4b08      	ldr	r3, [pc, #32]	@ (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8009e9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009e9c:	4a09      	ldr	r2, [pc, #36]	@ (8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8009e9e:	4013      	ands	r3, r2
 8009ea0:	0019      	movs	r1, r3
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009ea6:	4b05      	ldr	r3, [pc, #20]	@ (8009ebc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8009ea8:	430a      	orrs	r2, r1
 8009eaa:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009eac:	e016      	b.n	8009edc <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009eae:	2312      	movs	r3, #18
 8009eb0:	18fb      	adds	r3, r7, r3
 8009eb2:	2213      	movs	r2, #19
 8009eb4:	18ba      	adds	r2, r7, r2
 8009eb6:	7812      	ldrb	r2, [r2, #0]
 8009eb8:	701a      	strb	r2, [r3, #0]
 8009eba:	e00f      	b.n	8009edc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8009ebc:	40021000 	.word	0x40021000
 8009ec0:	40007000 	.word	0x40007000
 8009ec4:	fffffcff 	.word	0xfffffcff
 8009ec8:	fffeffff 	.word	0xfffeffff
 8009ecc:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ed0:	2312      	movs	r3, #18
 8009ed2:	18fb      	adds	r3, r7, r3
 8009ed4:	2213      	movs	r2, #19
 8009ed6:	18ba      	adds	r2, r7, r2
 8009ed8:	7812      	ldrb	r2, [r2, #0]
 8009eda:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009edc:	2311      	movs	r3, #17
 8009ede:	18fb      	adds	r3, r7, r3
 8009ee0:	781b      	ldrb	r3, [r3, #0]
 8009ee2:	2b01      	cmp	r3, #1
 8009ee4:	d105      	bne.n	8009ef2 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009ee6:	4bb6      	ldr	r3, [pc, #728]	@ (800a1c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009ee8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009eea:	4bb5      	ldr	r3, [pc, #724]	@ (800a1c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009eec:	49b5      	ldr	r1, [pc, #724]	@ (800a1c4 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8009eee:	400a      	ands	r2, r1
 8009ef0:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	2201      	movs	r2, #1
 8009ef8:	4013      	ands	r3, r2
 8009efa:	d009      	beq.n	8009f10 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009efc:	4bb0      	ldr	r3, [pc, #704]	@ (800a1c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009efe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f00:	2203      	movs	r2, #3
 8009f02:	4393      	bics	r3, r2
 8009f04:	0019      	movs	r1, r3
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	685a      	ldr	r2, [r3, #4]
 8009f0a:	4bad      	ldr	r3, [pc, #692]	@ (800a1c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009f0c:	430a      	orrs	r2, r1
 8009f0e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	2202      	movs	r2, #2
 8009f16:	4013      	ands	r3, r2
 8009f18:	d009      	beq.n	8009f2e <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009f1a:	4ba9      	ldr	r3, [pc, #676]	@ (800a1c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009f1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f1e:	220c      	movs	r2, #12
 8009f20:	4393      	bics	r3, r2
 8009f22:	0019      	movs	r1, r3
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	689a      	ldr	r2, [r3, #8]
 8009f28:	4ba5      	ldr	r3, [pc, #660]	@ (800a1c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009f2a:	430a      	orrs	r2, r1
 8009f2c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	2204      	movs	r2, #4
 8009f34:	4013      	ands	r3, r2
 8009f36:	d009      	beq.n	8009f4c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009f38:	4ba1      	ldr	r3, [pc, #644]	@ (800a1c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009f3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f3c:	2230      	movs	r2, #48	@ 0x30
 8009f3e:	4393      	bics	r3, r2
 8009f40:	0019      	movs	r1, r3
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	68da      	ldr	r2, [r3, #12]
 8009f46:	4b9e      	ldr	r3, [pc, #632]	@ (800a1c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009f48:	430a      	orrs	r2, r1
 8009f4a:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	2210      	movs	r2, #16
 8009f52:	4013      	ands	r3, r2
 8009f54:	d009      	beq.n	8009f6a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009f56:	4b9a      	ldr	r3, [pc, #616]	@ (800a1c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009f58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f5a:	4a9b      	ldr	r2, [pc, #620]	@ (800a1c8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8009f5c:	4013      	ands	r3, r2
 8009f5e:	0019      	movs	r1, r3
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	691a      	ldr	r2, [r3, #16]
 8009f64:	4b96      	ldr	r3, [pc, #600]	@ (800a1c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009f66:	430a      	orrs	r2, r1
 8009f68:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681a      	ldr	r2, [r3, #0]
 8009f6e:	2380      	movs	r3, #128	@ 0x80
 8009f70:	015b      	lsls	r3, r3, #5
 8009f72:	4013      	ands	r3, r2
 8009f74:	d009      	beq.n	8009f8a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8009f76:	4b92      	ldr	r3, [pc, #584]	@ (800a1c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009f78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f7a:	4a94      	ldr	r2, [pc, #592]	@ (800a1cc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8009f7c:	4013      	ands	r3, r2
 8009f7e:	0019      	movs	r1, r3
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	695a      	ldr	r2, [r3, #20]
 8009f84:	4b8e      	ldr	r3, [pc, #568]	@ (800a1c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009f86:	430a      	orrs	r2, r1
 8009f88:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681a      	ldr	r2, [r3, #0]
 8009f8e:	2380      	movs	r3, #128	@ 0x80
 8009f90:	009b      	lsls	r3, r3, #2
 8009f92:	4013      	ands	r3, r2
 8009f94:	d009      	beq.n	8009faa <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009f96:	4b8a      	ldr	r3, [pc, #552]	@ (800a1c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009f98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f9a:	4a8d      	ldr	r2, [pc, #564]	@ (800a1d0 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8009f9c:	4013      	ands	r3, r2
 8009f9e:	0019      	movs	r1, r3
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009fa4:	4b86      	ldr	r3, [pc, #536]	@ (800a1c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009fa6:	430a      	orrs	r2, r1
 8009fa8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681a      	ldr	r2, [r3, #0]
 8009fae:	2380      	movs	r3, #128	@ 0x80
 8009fb0:	00db      	lsls	r3, r3, #3
 8009fb2:	4013      	ands	r3, r2
 8009fb4:	d009      	beq.n	8009fca <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009fb6:	4b82      	ldr	r3, [pc, #520]	@ (800a1c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009fb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009fba:	4a86      	ldr	r2, [pc, #536]	@ (800a1d4 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8009fbc:	4013      	ands	r3, r2
 8009fbe:	0019      	movs	r1, r3
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009fc4:	4b7e      	ldr	r3, [pc, #504]	@ (800a1c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009fc6:	430a      	orrs	r2, r1
 8009fc8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	2220      	movs	r2, #32
 8009fd0:	4013      	ands	r3, r2
 8009fd2:	d009      	beq.n	8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009fd4:	4b7a      	ldr	r3, [pc, #488]	@ (800a1c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009fd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009fd8:	4a7f      	ldr	r2, [pc, #508]	@ (800a1d8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009fda:	4013      	ands	r3, r2
 8009fdc:	0019      	movs	r1, r3
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	699a      	ldr	r2, [r3, #24]
 8009fe2:	4b77      	ldr	r3, [pc, #476]	@ (800a1c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009fe4:	430a      	orrs	r2, r1
 8009fe6:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	2240      	movs	r2, #64	@ 0x40
 8009fee:	4013      	ands	r3, r2
 8009ff0:	d009      	beq.n	800a006 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009ff2:	4b73      	ldr	r3, [pc, #460]	@ (800a1c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009ff4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ff6:	4a79      	ldr	r2, [pc, #484]	@ (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8009ff8:	4013      	ands	r3, r2
 8009ffa:	0019      	movs	r1, r3
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	69da      	ldr	r2, [r3, #28]
 800a000:	4b6f      	ldr	r3, [pc, #444]	@ (800a1c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a002:	430a      	orrs	r2, r1
 800a004:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681a      	ldr	r2, [r3, #0]
 800a00a:	2380      	movs	r3, #128	@ 0x80
 800a00c:	01db      	lsls	r3, r3, #7
 800a00e:	4013      	ands	r3, r2
 800a010:	d015      	beq.n	800a03e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a012:	4b6b      	ldr	r3, [pc, #428]	@ (800a1c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a014:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a016:	009b      	lsls	r3, r3, #2
 800a018:	0899      	lsrs	r1, r3, #2
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a01e:	4b68      	ldr	r3, [pc, #416]	@ (800a1c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a020:	430a      	orrs	r2, r1
 800a022:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a028:	2380      	movs	r3, #128	@ 0x80
 800a02a:	05db      	lsls	r3, r3, #23
 800a02c:	429a      	cmp	r2, r3
 800a02e:	d106      	bne.n	800a03e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800a030:	4b63      	ldr	r3, [pc, #396]	@ (800a1c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a032:	68da      	ldr	r2, [r3, #12]
 800a034:	4b62      	ldr	r3, [pc, #392]	@ (800a1c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a036:	2180      	movs	r1, #128	@ 0x80
 800a038:	0249      	lsls	r1, r1, #9
 800a03a:	430a      	orrs	r2, r1
 800a03c:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681a      	ldr	r2, [r3, #0]
 800a042:	2380      	movs	r3, #128	@ 0x80
 800a044:	031b      	lsls	r3, r3, #12
 800a046:	4013      	ands	r3, r2
 800a048:	d009      	beq.n	800a05e <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a04a:	4b5d      	ldr	r3, [pc, #372]	@ (800a1c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a04c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a04e:	2240      	movs	r2, #64	@ 0x40
 800a050:	4393      	bics	r3, r2
 800a052:	0019      	movs	r1, r3
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a058:	4b59      	ldr	r3, [pc, #356]	@ (800a1c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a05a:	430a      	orrs	r2, r1
 800a05c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681a      	ldr	r2, [r3, #0]
 800a062:	2380      	movs	r3, #128	@ 0x80
 800a064:	039b      	lsls	r3, r3, #14
 800a066:	4013      	ands	r3, r2
 800a068:	d016      	beq.n	800a098 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800a06a:	4b55      	ldr	r3, [pc, #340]	@ (800a1c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a06c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a06e:	4a5c      	ldr	r2, [pc, #368]	@ (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800a070:	4013      	ands	r3, r2
 800a072:	0019      	movs	r1, r3
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a078:	4b51      	ldr	r3, [pc, #324]	@ (800a1c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a07a:	430a      	orrs	r2, r1
 800a07c:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a082:	2380      	movs	r3, #128	@ 0x80
 800a084:	03db      	lsls	r3, r3, #15
 800a086:	429a      	cmp	r2, r3
 800a088:	d106      	bne.n	800a098 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800a08a:	4b4d      	ldr	r3, [pc, #308]	@ (800a1c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a08c:	68da      	ldr	r2, [r3, #12]
 800a08e:	4b4c      	ldr	r3, [pc, #304]	@ (800a1c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a090:	2180      	movs	r1, #128	@ 0x80
 800a092:	0449      	lsls	r1, r1, #17
 800a094:	430a      	orrs	r2, r1
 800a096:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681a      	ldr	r2, [r3, #0]
 800a09c:	2380      	movs	r3, #128	@ 0x80
 800a09e:	03db      	lsls	r3, r3, #15
 800a0a0:	4013      	ands	r3, r2
 800a0a2:	d016      	beq.n	800a0d2 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800a0a4:	4b46      	ldr	r3, [pc, #280]	@ (800a1c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a0a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a0a8:	4a4e      	ldr	r2, [pc, #312]	@ (800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800a0aa:	4013      	ands	r3, r2
 800a0ac:	0019      	movs	r1, r3
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a0b2:	4b43      	ldr	r3, [pc, #268]	@ (800a1c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a0b4:	430a      	orrs	r2, r1
 800a0b6:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a0bc:	2380      	movs	r3, #128	@ 0x80
 800a0be:	045b      	lsls	r3, r3, #17
 800a0c0:	429a      	cmp	r2, r3
 800a0c2:	d106      	bne.n	800a0d2 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800a0c4:	4b3e      	ldr	r3, [pc, #248]	@ (800a1c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a0c6:	68da      	ldr	r2, [r3, #12]
 800a0c8:	4b3d      	ldr	r3, [pc, #244]	@ (800a1c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a0ca:	2180      	movs	r1, #128	@ 0x80
 800a0cc:	0449      	lsls	r1, r1, #17
 800a0ce:	430a      	orrs	r2, r1
 800a0d0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681a      	ldr	r2, [r3, #0]
 800a0d6:	2380      	movs	r3, #128	@ 0x80
 800a0d8:	011b      	lsls	r3, r3, #4
 800a0da:	4013      	ands	r3, r2
 800a0dc:	d014      	beq.n	800a108 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800a0de:	4b38      	ldr	r3, [pc, #224]	@ (800a1c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a0e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a0e2:	2203      	movs	r2, #3
 800a0e4:	4393      	bics	r3, r2
 800a0e6:	0019      	movs	r1, r3
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	6a1a      	ldr	r2, [r3, #32]
 800a0ec:	4b34      	ldr	r3, [pc, #208]	@ (800a1c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a0ee:	430a      	orrs	r2, r1
 800a0f0:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	6a1b      	ldr	r3, [r3, #32]
 800a0f6:	2b01      	cmp	r3, #1
 800a0f8:	d106      	bne.n	800a108 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800a0fa:	4b31      	ldr	r3, [pc, #196]	@ (800a1c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a0fc:	68da      	ldr	r2, [r3, #12]
 800a0fe:	4b30      	ldr	r3, [pc, #192]	@ (800a1c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a100:	2180      	movs	r1, #128	@ 0x80
 800a102:	0249      	lsls	r1, r1, #9
 800a104:	430a      	orrs	r2, r1
 800a106:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681a      	ldr	r2, [r3, #0]
 800a10c:	2380      	movs	r3, #128	@ 0x80
 800a10e:	019b      	lsls	r3, r3, #6
 800a110:	4013      	ands	r3, r2
 800a112:	d014      	beq.n	800a13e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800a114:	4b2a      	ldr	r3, [pc, #168]	@ (800a1c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a116:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a118:	220c      	movs	r2, #12
 800a11a:	4393      	bics	r3, r2
 800a11c:	0019      	movs	r1, r3
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a122:	4b27      	ldr	r3, [pc, #156]	@ (800a1c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a124:	430a      	orrs	r2, r1
 800a126:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a12c:	2b04      	cmp	r3, #4
 800a12e:	d106      	bne.n	800a13e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800a130:	4b23      	ldr	r3, [pc, #140]	@ (800a1c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a132:	68da      	ldr	r2, [r3, #12]
 800a134:	4b22      	ldr	r3, [pc, #136]	@ (800a1c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a136:	2180      	movs	r1, #128	@ 0x80
 800a138:	0249      	lsls	r1, r1, #9
 800a13a:	430a      	orrs	r2, r1
 800a13c:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681a      	ldr	r2, [r3, #0]
 800a142:	2380      	movs	r3, #128	@ 0x80
 800a144:	045b      	lsls	r3, r3, #17
 800a146:	4013      	ands	r3, r2
 800a148:	d016      	beq.n	800a178 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a14a:	4b1d      	ldr	r3, [pc, #116]	@ (800a1c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a14c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a14e:	4a22      	ldr	r2, [pc, #136]	@ (800a1d8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a150:	4013      	ands	r3, r2
 800a152:	0019      	movs	r1, r3
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a158:	4b19      	ldr	r3, [pc, #100]	@ (800a1c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a15a:	430a      	orrs	r2, r1
 800a15c:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a162:	2380      	movs	r3, #128	@ 0x80
 800a164:	019b      	lsls	r3, r3, #6
 800a166:	429a      	cmp	r2, r3
 800a168:	d106      	bne.n	800a178 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800a16a:	4b15      	ldr	r3, [pc, #84]	@ (800a1c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a16c:	68da      	ldr	r2, [r3, #12]
 800a16e:	4b14      	ldr	r3, [pc, #80]	@ (800a1c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a170:	2180      	movs	r1, #128	@ 0x80
 800a172:	0449      	lsls	r1, r1, #17
 800a174:	430a      	orrs	r2, r1
 800a176:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681a      	ldr	r2, [r3, #0]
 800a17c:	2380      	movs	r3, #128	@ 0x80
 800a17e:	049b      	lsls	r3, r3, #18
 800a180:	4013      	ands	r3, r2
 800a182:	d016      	beq.n	800a1b2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a184:	4b0e      	ldr	r3, [pc, #56]	@ (800a1c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a186:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a188:	4a10      	ldr	r2, [pc, #64]	@ (800a1cc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800a18a:	4013      	ands	r3, r2
 800a18c:	0019      	movs	r1, r3
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a192:	4b0b      	ldr	r3, [pc, #44]	@ (800a1c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a194:	430a      	orrs	r2, r1
 800a196:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a19c:	2380      	movs	r3, #128	@ 0x80
 800a19e:	005b      	lsls	r3, r3, #1
 800a1a0:	429a      	cmp	r2, r3
 800a1a2:	d106      	bne.n	800a1b2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800a1a4:	4b06      	ldr	r3, [pc, #24]	@ (800a1c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a1a6:	68da      	ldr	r2, [r3, #12]
 800a1a8:	4b05      	ldr	r3, [pc, #20]	@ (800a1c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a1aa:	2180      	movs	r1, #128	@ 0x80
 800a1ac:	0449      	lsls	r1, r1, #17
 800a1ae:	430a      	orrs	r2, r1
 800a1b0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800a1b2:	2312      	movs	r3, #18
 800a1b4:	18fb      	adds	r3, r7, r3
 800a1b6:	781b      	ldrb	r3, [r3, #0]
}
 800a1b8:	0018      	movs	r0, r3
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	b006      	add	sp, #24
 800a1be:	bd80      	pop	{r7, pc}
 800a1c0:	40021000 	.word	0x40021000
 800a1c4:	efffffff 	.word	0xefffffff
 800a1c8:	fffff3ff 	.word	0xfffff3ff
 800a1cc:	fffffcff 	.word	0xfffffcff
 800a1d0:	fff3ffff 	.word	0xfff3ffff
 800a1d4:	ffcfffff 	.word	0xffcfffff
 800a1d8:	ffffcfff 	.word	0xffffcfff
 800a1dc:	ffff3fff 	.word	0xffff3fff
 800a1e0:	ffbfffff 	.word	0xffbfffff
 800a1e4:	feffffff 	.word	0xfeffffff

0800a1e8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a1e8:	b5b0      	push	{r4, r5, r7, lr}
 800a1ea:	b084      	sub	sp, #16
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a1f0:	230f      	movs	r3, #15
 800a1f2:	18fb      	adds	r3, r7, r3
 800a1f4:	2201      	movs	r2, #1
 800a1f6:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d100      	bne.n	800a200 <HAL_RTC_Init+0x18>
 800a1fe:	e08c      	b.n	800a31a <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2229      	movs	r2, #41	@ 0x29
 800a204:	5c9b      	ldrb	r3, [r3, r2]
 800a206:	b2db      	uxtb	r3, r3
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d10b      	bne.n	800a224 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2228      	movs	r2, #40	@ 0x28
 800a210:	2100      	movs	r1, #0
 800a212:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2288      	movs	r2, #136	@ 0x88
 800a218:	0212      	lsls	r2, r2, #8
 800a21a:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	0018      	movs	r0, r3
 800a220:	f7fc fe5e 	bl	8006ee0 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2229      	movs	r2, #41	@ 0x29
 800a228:	2102      	movs	r1, #2
 800a22a:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	68db      	ldr	r3, [r3, #12]
 800a232:	2210      	movs	r2, #16
 800a234:	4013      	ands	r3, r2
 800a236:	2b10      	cmp	r3, #16
 800a238:	d062      	beq.n	800a300 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	22ca      	movs	r2, #202	@ 0xca
 800a240:	625a      	str	r2, [r3, #36]	@ 0x24
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	2253      	movs	r2, #83	@ 0x53
 800a248:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800a24a:	250f      	movs	r5, #15
 800a24c:	197c      	adds	r4, r7, r5
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	0018      	movs	r0, r3
 800a252:	f000 fc0f 	bl	800aa74 <RTC_EnterInitMode>
 800a256:	0003      	movs	r3, r0
 800a258:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 800a25a:	0028      	movs	r0, r5
 800a25c:	183b      	adds	r3, r7, r0
 800a25e:	781b      	ldrb	r3, [r3, #0]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d12c      	bne.n	800a2be <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	699a      	ldr	r2, [r3, #24]
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	492e      	ldr	r1, [pc, #184]	@ (800a328 <HAL_RTC_Init+0x140>)
 800a270:	400a      	ands	r2, r1
 800a272:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	6999      	ldr	r1, [r3, #24]
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	689a      	ldr	r2, [r3, #8]
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	695b      	ldr	r3, [r3, #20]
 800a282:	431a      	orrs	r2, r3
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	69db      	ldr	r3, [r3, #28]
 800a288:	431a      	orrs	r2, r3
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	430a      	orrs	r2, r1
 800a290:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	687a      	ldr	r2, [r7, #4]
 800a298:	6912      	ldr	r2, [r2, #16]
 800a29a:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	6919      	ldr	r1, [r3, #16]
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	68db      	ldr	r3, [r3, #12]
 800a2a6:	041a      	lsls	r2, r3, #16
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	430a      	orrs	r2, r1
 800a2ae:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800a2b0:	183c      	adds	r4, r7, r0
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	0018      	movs	r0, r3
 800a2b6:	f000 fc1f 	bl	800aaf8 <RTC_ExitInitMode>
 800a2ba:	0003      	movs	r3, r0
 800a2bc:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 800a2be:	230f      	movs	r3, #15
 800a2c0:	18fb      	adds	r3, r7, r3
 800a2c2:	781b      	ldrb	r3, [r3, #0]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d116      	bne.n	800a2f6 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	699a      	ldr	r2, [r3, #24]
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	00d2      	lsls	r2, r2, #3
 800a2d4:	08d2      	lsrs	r2, r2, #3
 800a2d6:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	6999      	ldr	r1, [r3, #24]
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	6a1b      	ldr	r3, [r3, #32]
 800a2e6:	431a      	orrs	r2, r3
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	699b      	ldr	r3, [r3, #24]
 800a2ec:	431a      	orrs	r2, r3
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	430a      	orrs	r2, r1
 800a2f4:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	22ff      	movs	r2, #255	@ 0xff
 800a2fc:	625a      	str	r2, [r3, #36]	@ 0x24
 800a2fe:	e003      	b.n	800a308 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800a300:	230f      	movs	r3, #15
 800a302:	18fb      	adds	r3, r7, r3
 800a304:	2200      	movs	r2, #0
 800a306:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 800a308:	230f      	movs	r3, #15
 800a30a:	18fb      	adds	r3, r7, r3
 800a30c:	781b      	ldrb	r3, [r3, #0]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d103      	bne.n	800a31a <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	2229      	movs	r2, #41	@ 0x29
 800a316:	2101      	movs	r1, #1
 800a318:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 800a31a:	230f      	movs	r3, #15
 800a31c:	18fb      	adds	r3, r7, r3
 800a31e:	781b      	ldrb	r3, [r3, #0]
}
 800a320:	0018      	movs	r0, r3
 800a322:	46bd      	mov	sp, r7
 800a324:	b004      	add	sp, #16
 800a326:	bdb0      	pop	{r4, r5, r7, pc}
 800a328:	fb8fffbf 	.word	0xfb8fffbf

0800a32c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a32c:	b5b0      	push	{r4, r5, r7, lr}
 800a32e:	b086      	sub	sp, #24
 800a330:	af00      	add	r7, sp, #0
 800a332:	60f8      	str	r0, [r7, #12]
 800a334:	60b9      	str	r1, [r7, #8]
 800a336:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	2228      	movs	r2, #40	@ 0x28
 800a33c:	5c9b      	ldrb	r3, [r3, r2]
 800a33e:	2b01      	cmp	r3, #1
 800a340:	d101      	bne.n	800a346 <HAL_RTC_SetTime+0x1a>
 800a342:	2302      	movs	r3, #2
 800a344:	e092      	b.n	800a46c <HAL_RTC_SetTime+0x140>
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	2228      	movs	r2, #40	@ 0x28
 800a34a:	2101      	movs	r1, #1
 800a34c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	2229      	movs	r2, #41	@ 0x29
 800a352:	2102      	movs	r1, #2
 800a354:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	22ca      	movs	r2, #202	@ 0xca
 800a35c:	625a      	str	r2, [r3, #36]	@ 0x24
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	2253      	movs	r2, #83	@ 0x53
 800a364:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a366:	2513      	movs	r5, #19
 800a368:	197c      	adds	r4, r7, r5
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	0018      	movs	r0, r3
 800a36e:	f000 fb81 	bl	800aa74 <RTC_EnterInitMode>
 800a372:	0003      	movs	r3, r0
 800a374:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 800a376:	197b      	adds	r3, r7, r5
 800a378:	781b      	ldrb	r3, [r3, #0]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d162      	bne.n	800a444 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d125      	bne.n	800a3d0 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	699b      	ldr	r3, [r3, #24]
 800a38a:	2240      	movs	r2, #64	@ 0x40
 800a38c:	4013      	ands	r3, r2
 800a38e:	d102      	bne.n	800a396 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800a390:	68bb      	ldr	r3, [r7, #8]
 800a392:	2200      	movs	r2, #0
 800a394:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a396:	68bb      	ldr	r3, [r7, #8]
 800a398:	781b      	ldrb	r3, [r3, #0]
 800a39a:	0018      	movs	r0, r3
 800a39c:	f000 fbf0 	bl	800ab80 <RTC_ByteToBcd2>
 800a3a0:	0003      	movs	r3, r0
 800a3a2:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a3a4:	68bb      	ldr	r3, [r7, #8]
 800a3a6:	785b      	ldrb	r3, [r3, #1]
 800a3a8:	0018      	movs	r0, r3
 800a3aa:	f000 fbe9 	bl	800ab80 <RTC_ByteToBcd2>
 800a3ae:	0003      	movs	r3, r0
 800a3b0:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a3b2:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800a3b4:	68bb      	ldr	r3, [r7, #8]
 800a3b6:	789b      	ldrb	r3, [r3, #2]
 800a3b8:	0018      	movs	r0, r3
 800a3ba:	f000 fbe1 	bl	800ab80 <RTC_ByteToBcd2>
 800a3be:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a3c0:	0022      	movs	r2, r4
 800a3c2:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800a3c4:	68bb      	ldr	r3, [r7, #8]
 800a3c6:	78db      	ldrb	r3, [r3, #3]
 800a3c8:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a3ca:	4313      	orrs	r3, r2
 800a3cc:	617b      	str	r3, [r7, #20]
 800a3ce:	e017      	b.n	800a400 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	699b      	ldr	r3, [r3, #24]
 800a3d6:	2240      	movs	r2, #64	@ 0x40
 800a3d8:	4013      	ands	r3, r2
 800a3da:	d102      	bne.n	800a3e2 <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800a3dc:	68bb      	ldr	r3, [r7, #8]
 800a3de:	2200      	movs	r2, #0
 800a3e0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a3e2:	68bb      	ldr	r3, [r7, #8]
 800a3e4:	781b      	ldrb	r3, [r3, #0]
 800a3e6:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a3e8:	68bb      	ldr	r3, [r7, #8]
 800a3ea:	785b      	ldrb	r3, [r3, #1]
 800a3ec:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a3ee:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800a3f0:	68ba      	ldr	r2, [r7, #8]
 800a3f2:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a3f4:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800a3f6:	68bb      	ldr	r3, [r7, #8]
 800a3f8:	78db      	ldrb	r3, [r3, #3]
 800a3fa:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a3fc:	4313      	orrs	r3, r2
 800a3fe:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	697a      	ldr	r2, [r7, #20]
 800a406:	491b      	ldr	r1, [pc, #108]	@ (800a474 <HAL_RTC_SetTime+0x148>)
 800a408:	400a      	ands	r2, r1
 800a40a:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	699a      	ldr	r2, [r3, #24]
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	4918      	ldr	r1, [pc, #96]	@ (800a478 <HAL_RTC_SetTime+0x14c>)
 800a418:	400a      	ands	r2, r1
 800a41a:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	6999      	ldr	r1, [r3, #24]
 800a422:	68bb      	ldr	r3, [r7, #8]
 800a424:	68da      	ldr	r2, [r3, #12]
 800a426:	68bb      	ldr	r3, [r7, #8]
 800a428:	691b      	ldr	r3, [r3, #16]
 800a42a:	431a      	orrs	r2, r3
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	430a      	orrs	r2, r1
 800a432:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a434:	2313      	movs	r3, #19
 800a436:	18fc      	adds	r4, r7, r3
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	0018      	movs	r0, r3
 800a43c:	f000 fb5c 	bl	800aaf8 <RTC_ExitInitMode>
 800a440:	0003      	movs	r3, r0
 800a442:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	22ff      	movs	r2, #255	@ 0xff
 800a44a:	625a      	str	r2, [r3, #36]	@ 0x24
  
  if (status == HAL_OK)
 800a44c:	2313      	movs	r3, #19
 800a44e:	18fb      	adds	r3, r7, r3
 800a450:	781b      	ldrb	r3, [r3, #0]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d103      	bne.n	800a45e <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	2229      	movs	r2, #41	@ 0x29
 800a45a:	2101      	movs	r1, #1
 800a45c:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	2228      	movs	r2, #40	@ 0x28
 800a462:	2100      	movs	r1, #0
 800a464:	5499      	strb	r1, [r3, r2]

  return status;
 800a466:	2313      	movs	r3, #19
 800a468:	18fb      	adds	r3, r7, r3
 800a46a:	781b      	ldrb	r3, [r3, #0]
}
 800a46c:	0018      	movs	r0, r3
 800a46e:	46bd      	mov	sp, r7
 800a470:	b006      	add	sp, #24
 800a472:	bdb0      	pop	{r4, r5, r7, pc}
 800a474:	007f7f7f 	.word	0x007f7f7f
 800a478:	fffbffff 	.word	0xfffbffff

0800a47c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a47c:	b5b0      	push	{r4, r5, r7, lr}
 800a47e:	b086      	sub	sp, #24
 800a480:	af00      	add	r7, sp, #0
 800a482:	60f8      	str	r0, [r7, #12]
 800a484:	60b9      	str	r1, [r7, #8]
 800a486:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	2228      	movs	r2, #40	@ 0x28
 800a48c:	5c9b      	ldrb	r3, [r3, r2]
 800a48e:	2b01      	cmp	r3, #1
 800a490:	d101      	bne.n	800a496 <HAL_RTC_SetDate+0x1a>
 800a492:	2302      	movs	r3, #2
 800a494:	e07e      	b.n	800a594 <HAL_RTC_SetDate+0x118>
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	2228      	movs	r2, #40	@ 0x28
 800a49a:	2101      	movs	r1, #1
 800a49c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	2229      	movs	r2, #41	@ 0x29
 800a4a2:	2102      	movs	r1, #2
 800a4a4:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d10e      	bne.n	800a4ca <HAL_RTC_SetDate+0x4e>
 800a4ac:	68bb      	ldr	r3, [r7, #8]
 800a4ae:	785b      	ldrb	r3, [r3, #1]
 800a4b0:	001a      	movs	r2, r3
 800a4b2:	2310      	movs	r3, #16
 800a4b4:	4013      	ands	r3, r2
 800a4b6:	d008      	beq.n	800a4ca <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800a4b8:	68bb      	ldr	r3, [r7, #8]
 800a4ba:	785b      	ldrb	r3, [r3, #1]
 800a4bc:	2210      	movs	r2, #16
 800a4be:	4393      	bics	r3, r2
 800a4c0:	b2db      	uxtb	r3, r3
 800a4c2:	330a      	adds	r3, #10
 800a4c4:	b2da      	uxtb	r2, r3
 800a4c6:	68bb      	ldr	r3, [r7, #8]
 800a4c8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d11c      	bne.n	800a50a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800a4d0:	68bb      	ldr	r3, [r7, #8]
 800a4d2:	78db      	ldrb	r3, [r3, #3]
 800a4d4:	0018      	movs	r0, r3
 800a4d6:	f000 fb53 	bl	800ab80 <RTC_ByteToBcd2>
 800a4da:	0003      	movs	r3, r0
 800a4dc:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800a4de:	68bb      	ldr	r3, [r7, #8]
 800a4e0:	785b      	ldrb	r3, [r3, #1]
 800a4e2:	0018      	movs	r0, r3
 800a4e4:	f000 fb4c 	bl	800ab80 <RTC_ByteToBcd2>
 800a4e8:	0003      	movs	r3, r0
 800a4ea:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800a4ec:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800a4ee:	68bb      	ldr	r3, [r7, #8]
 800a4f0:	789b      	ldrb	r3, [r3, #2]
 800a4f2:	0018      	movs	r0, r3
 800a4f4:	f000 fb44 	bl	800ab80 <RTC_ByteToBcd2>
 800a4f8:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800a4fa:	0022      	movs	r2, r4
 800a4fc:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800a4fe:	68bb      	ldr	r3, [r7, #8]
 800a500:	781b      	ldrb	r3, [r3, #0]
 800a502:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800a504:	4313      	orrs	r3, r2
 800a506:	617b      	str	r3, [r7, #20]
 800a508:	e00e      	b.n	800a528 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800a50a:	68bb      	ldr	r3, [r7, #8]
 800a50c:	78db      	ldrb	r3, [r3, #3]
 800a50e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800a510:	68bb      	ldr	r3, [r7, #8]
 800a512:	785b      	ldrb	r3, [r3, #1]
 800a514:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800a516:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 800a518:	68ba      	ldr	r2, [r7, #8]
 800a51a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800a51c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800a51e:	68bb      	ldr	r3, [r7, #8]
 800a520:	781b      	ldrb	r3, [r3, #0]
 800a522:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800a524:	4313      	orrs	r3, r2
 800a526:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	22ca      	movs	r2, #202	@ 0xca
 800a52e:	625a      	str	r2, [r3, #36]	@ 0x24
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	2253      	movs	r2, #83	@ 0x53
 800a536:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a538:	2513      	movs	r5, #19
 800a53a:	197c      	adds	r4, r7, r5
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	0018      	movs	r0, r3
 800a540:	f000 fa98 	bl	800aa74 <RTC_EnterInitMode>
 800a544:	0003      	movs	r3, r0
 800a546:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 800a548:	0028      	movs	r0, r5
 800a54a:	183b      	adds	r3, r7, r0
 800a54c:	781b      	ldrb	r3, [r3, #0]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d10c      	bne.n	800a56c <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	697a      	ldr	r2, [r7, #20]
 800a558:	4910      	ldr	r1, [pc, #64]	@ (800a59c <HAL_RTC_SetDate+0x120>)
 800a55a:	400a      	ands	r2, r1
 800a55c:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a55e:	183c      	adds	r4, r7, r0
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	0018      	movs	r0, r3
 800a564:	f000 fac8 	bl	800aaf8 <RTC_ExitInitMode>
 800a568:	0003      	movs	r3, r0
 800a56a:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	22ff      	movs	r2, #255	@ 0xff
 800a572:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800a574:	2313      	movs	r3, #19
 800a576:	18fb      	adds	r3, r7, r3
 800a578:	781b      	ldrb	r3, [r3, #0]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d103      	bne.n	800a586 <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	2229      	movs	r2, #41	@ 0x29
 800a582:	2101      	movs	r1, #1
 800a584:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	2228      	movs	r2, #40	@ 0x28
 800a58a:	2100      	movs	r1, #0
 800a58c:	5499      	strb	r1, [r3, r2]

  return status;
 800a58e:	2313      	movs	r3, #19
 800a590:	18fb      	adds	r3, r7, r3
 800a592:	781b      	ldrb	r3, [r3, #0]
}
 800a594:	0018      	movs	r0, r3
 800a596:	46bd      	mov	sp, r7
 800a598:	b006      	add	sp, #24
 800a59a:	bdb0      	pop	{r4, r5, r7, pc}
 800a59c:	00ffff3f 	.word	0x00ffff3f

0800a5a0 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800a5a0:	b590      	push	{r4, r7, lr}
 800a5a2:	b089      	sub	sp, #36	@ 0x24
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	60f8      	str	r0, [r7, #12]
 800a5a8:	60b9      	str	r1, [r7, #8]
 800a5aa:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	2228      	movs	r2, #40	@ 0x28
 800a5b0:	5c9b      	ldrb	r3, [r3, r2]
 800a5b2:	2b01      	cmp	r3, #1
 800a5b4:	d101      	bne.n	800a5ba <HAL_RTC_SetAlarm_IT+0x1a>
 800a5b6:	2302      	movs	r3, #2
 800a5b8:	e127      	b.n	800a80a <HAL_RTC_SetAlarm_IT+0x26a>
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	2228      	movs	r2, #40	@ 0x28
 800a5be:	2101      	movs	r1, #1
 800a5c0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	2229      	movs	r2, #41	@ 0x29
 800a5c6:	2102      	movs	r1, #2
 800a5c8:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d136      	bne.n	800a63e <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	699b      	ldr	r3, [r3, #24]
 800a5d6:	2240      	movs	r2, #64	@ 0x40
 800a5d8:	4013      	ands	r3, r2
 800a5da:	d102      	bne.n	800a5e2 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800a5dc:	68bb      	ldr	r3, [r7, #8]
 800a5de:	2200      	movs	r2, #0
 800a5e0:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800a5e2:	68bb      	ldr	r3, [r7, #8]
 800a5e4:	781b      	ldrb	r3, [r3, #0]
 800a5e6:	0018      	movs	r0, r3
 800a5e8:	f000 faca 	bl	800ab80 <RTC_ByteToBcd2>
 800a5ec:	0003      	movs	r3, r0
 800a5ee:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800a5f0:	68bb      	ldr	r3, [r7, #8]
 800a5f2:	785b      	ldrb	r3, [r3, #1]
 800a5f4:	0018      	movs	r0, r3
 800a5f6:	f000 fac3 	bl	800ab80 <RTC_ByteToBcd2>
 800a5fa:	0003      	movs	r3, r0
 800a5fc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800a5fe:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	789b      	ldrb	r3, [r3, #2]
 800a604:	0018      	movs	r0, r3
 800a606:	f000 fabb 	bl	800ab80 <RTC_ByteToBcd2>
 800a60a:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800a60c:	0022      	movs	r2, r4
 800a60e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800a610:	68bb      	ldr	r3, [r7, #8]
 800a612:	78db      	ldrb	r3, [r3, #3]
 800a614:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800a616:	431a      	orrs	r2, r3
 800a618:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	2220      	movs	r2, #32
 800a61e:	5c9b      	ldrb	r3, [r3, r2]
 800a620:	0018      	movs	r0, r3
 800a622:	f000 faad 	bl	800ab80 <RTC_ByteToBcd2>
 800a626:	0003      	movs	r3, r0
 800a628:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800a62a:	0022      	movs	r2, r4
 800a62c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800a62e:	68bb      	ldr	r3, [r7, #8]
 800a630:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800a632:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800a634:	68bb      	ldr	r3, [r7, #8]
 800a636:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800a638:	4313      	orrs	r3, r2
 800a63a:	61fb      	str	r3, [r7, #28]
 800a63c:	e022      	b.n	800a684 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	699b      	ldr	r3, [r3, #24]
 800a644:	2240      	movs	r2, #64	@ 0x40
 800a646:	4013      	ands	r3, r2
 800a648:	d102      	bne.n	800a650 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800a64a:	68bb      	ldr	r3, [r7, #8]
 800a64c:	2200      	movs	r2, #0
 800a64e:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800a650:	68bb      	ldr	r3, [r7, #8]
 800a652:	781b      	ldrb	r3, [r3, #0]
 800a654:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800a656:	68bb      	ldr	r3, [r7, #8]
 800a658:	785b      	ldrb	r3, [r3, #1]
 800a65a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800a65c:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800a65e:	68ba      	ldr	r2, [r7, #8]
 800a660:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800a662:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800a664:	68bb      	ldr	r3, [r7, #8]
 800a666:	78db      	ldrb	r3, [r3, #3]
 800a668:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800a66a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800a66c:	68bb      	ldr	r3, [r7, #8]
 800a66e:	2120      	movs	r1, #32
 800a670:	5c5b      	ldrb	r3, [r3, r1]
 800a672:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800a674:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800a676:	68bb      	ldr	r3, [r7, #8]
 800a678:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800a67a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800a67c:	68bb      	ldr	r3, [r7, #8]
 800a67e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800a680:	4313      	orrs	r3, r2
 800a682:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800a684:	68bb      	ldr	r3, [r7, #8]
 800a686:	685a      	ldr	r2, [r3, #4]
 800a688:	68bb      	ldr	r3, [r7, #8]
 800a68a:	699b      	ldr	r3, [r3, #24]
 800a68c:	4313      	orrs	r3, r2
 800a68e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	22ca      	movs	r2, #202	@ 0xca
 800a696:	625a      	str	r2, [r3, #36]	@ 0x24
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	2253      	movs	r2, #83	@ 0x53
 800a69e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800a6a0:	68bb      	ldr	r3, [r7, #8]
 800a6a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a6a4:	2380      	movs	r3, #128	@ 0x80
 800a6a6:	005b      	lsls	r3, r3, #1
 800a6a8:	429a      	cmp	r2, r3
 800a6aa:	d14c      	bne.n	800a746 <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	699a      	ldr	r2, [r3, #24]
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	4957      	ldr	r1, [pc, #348]	@ (800a814 <HAL_RTC_SetAlarm_IT+0x274>)
 800a6b8:	400a      	ands	r2, r1
 800a6ba:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	2101      	movs	r1, #1
 800a6c8:	430a      	orrs	r2, r1
 800a6ca:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 800a6cc:	f7fd fcba 	bl	8008044 <HAL_GetTick>
 800a6d0:	0003      	movs	r3, r0
 800a6d2:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800a6d4:	e016      	b.n	800a704 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a6d6:	f7fd fcb5 	bl	8008044 <HAL_GetTick>
 800a6da:	0002      	movs	r2, r0
 800a6dc:	697b      	ldr	r3, [r7, #20]
 800a6de:	1ad2      	subs	r2, r2, r3
 800a6e0:	23fa      	movs	r3, #250	@ 0xfa
 800a6e2:	009b      	lsls	r3, r3, #2
 800a6e4:	429a      	cmp	r2, r3
 800a6e6:	d90d      	bls.n	800a704 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	22ff      	movs	r2, #255	@ 0xff
 800a6ee:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	2229      	movs	r2, #41	@ 0x29
 800a6f4:	2103      	movs	r1, #3
 800a6f6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	2228      	movs	r2, #40	@ 0x28
 800a6fc:	2100      	movs	r1, #0
 800a6fe:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800a700:	2303      	movs	r3, #3
 800a702:	e082      	b.n	800a80a <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	68db      	ldr	r3, [r3, #12]
 800a70a:	2201      	movs	r2, #1
 800a70c:	4013      	ands	r3, r2
 800a70e:	d0e2      	beq.n	800a6d6 <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	69fa      	ldr	r2, [r7, #28]
 800a716:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	69ba      	ldr	r2, [r7, #24]
 800a71e:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	699a      	ldr	r2, [r3, #24]
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	2180      	movs	r1, #128	@ 0x80
 800a72c:	0049      	lsls	r1, r1, #1
 800a72e:	430a      	orrs	r2, r1
 800a730:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	699a      	ldr	r2, [r3, #24]
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	2180      	movs	r1, #128	@ 0x80
 800a73e:	0149      	lsls	r1, r1, #5
 800a740:	430a      	orrs	r2, r1
 800a742:	619a      	str	r2, [r3, #24]
 800a744:	e04b      	b.n	800a7de <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	699a      	ldr	r2, [r3, #24]
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	4931      	ldr	r1, [pc, #196]	@ (800a818 <HAL_RTC_SetAlarm_IT+0x278>)
 800a752:	400a      	ands	r2, r1
 800a754:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	2102      	movs	r1, #2
 800a762:	430a      	orrs	r2, r1
 800a764:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 800a766:	f7fd fc6d 	bl	8008044 <HAL_GetTick>
 800a76a:	0003      	movs	r3, r0
 800a76c:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800a76e:	e016      	b.n	800a79e <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a770:	f7fd fc68 	bl	8008044 <HAL_GetTick>
 800a774:	0002      	movs	r2, r0
 800a776:	697b      	ldr	r3, [r7, #20]
 800a778:	1ad2      	subs	r2, r2, r3
 800a77a:	23fa      	movs	r3, #250	@ 0xfa
 800a77c:	009b      	lsls	r3, r3, #2
 800a77e:	429a      	cmp	r2, r3
 800a780:	d90d      	bls.n	800a79e <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	22ff      	movs	r2, #255	@ 0xff
 800a788:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	2229      	movs	r2, #41	@ 0x29
 800a78e:	2103      	movs	r1, #3
 800a790:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	2228      	movs	r2, #40	@ 0x28
 800a796:	2100      	movs	r1, #0
 800a798:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800a79a:	2303      	movs	r3, #3
 800a79c:	e035      	b.n	800a80a <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	68db      	ldr	r3, [r3, #12]
 800a7a4:	2202      	movs	r2, #2
 800a7a6:	4013      	ands	r3, r2
 800a7a8:	d0e2      	beq.n	800a770 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	69fa      	ldr	r2, [r7, #28]
 800a7b0:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	69ba      	ldr	r2, [r7, #24]
 800a7b8:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	699a      	ldr	r2, [r3, #24]
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	2180      	movs	r1, #128	@ 0x80
 800a7c6:	0089      	lsls	r1, r1, #2
 800a7c8:	430a      	orrs	r2, r1
 800a7ca:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	699a      	ldr	r2, [r3, #24]
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	2180      	movs	r1, #128	@ 0x80
 800a7d8:	0189      	lsls	r1, r1, #6
 800a7da:	430a      	orrs	r2, r1
 800a7dc:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800a7de:	4a0f      	ldr	r2, [pc, #60]	@ (800a81c <HAL_RTC_SetAlarm_IT+0x27c>)
 800a7e0:	2380      	movs	r3, #128	@ 0x80
 800a7e2:	58d3      	ldr	r3, [r2, r3]
 800a7e4:	490d      	ldr	r1, [pc, #52]	@ (800a81c <HAL_RTC_SetAlarm_IT+0x27c>)
 800a7e6:	2280      	movs	r2, #128	@ 0x80
 800a7e8:	0312      	lsls	r2, r2, #12
 800a7ea:	4313      	orrs	r3, r2
 800a7ec:	2280      	movs	r2, #128	@ 0x80
 800a7ee:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	22ff      	movs	r2, #255	@ 0xff
 800a7f6:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	2229      	movs	r2, #41	@ 0x29
 800a7fc:	2101      	movs	r1, #1
 800a7fe:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	2228      	movs	r2, #40	@ 0x28
 800a804:	2100      	movs	r1, #0
 800a806:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a808:	2300      	movs	r3, #0
}
 800a80a:	0018      	movs	r0, r3
 800a80c:	46bd      	mov	sp, r7
 800a80e:	b009      	add	sp, #36	@ 0x24
 800a810:	bd90      	pop	{r4, r7, pc}
 800a812:	46c0      	nop			@ (mov r8, r8)
 800a814:	fffffeff 	.word	0xfffffeff
 800a818:	fffffdff 	.word	0xfffffdff
 800a81c:	40021800 	.word	0x40021800

0800a820 <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b086      	sub	sp, #24
 800a824:	af00      	add	r7, sp, #0
 800a826:	60f8      	str	r0, [r7, #12]
 800a828:	60b9      	str	r1, [r7, #8]
 800a82a:	607a      	str	r2, [r7, #4]
 800a82c:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if(Alarm == RTC_ALARM_A)
 800a82e:	687a      	ldr	r2, [r7, #4]
 800a830:	2380      	movs	r3, #128	@ 0x80
 800a832:	005b      	lsls	r3, r3, #1
 800a834:	429a      	cmp	r2, r3
 800a836:	d144      	bne.n	800a8c2 <HAL_RTC_GetAlarm+0xa2>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 800a838:	68bb      	ldr	r3, [r7, #8]
 800a83a:	2280      	movs	r2, #128	@ 0x80
 800a83c:	0052      	lsls	r2, r2, #1
 800a83e:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a846:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR ) & RTC_ALRMASSR_SS);
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a84e:	045b      	lsls	r3, r3, #17
 800a850:	0c5b      	lsrs	r3, r3, #17
 800a852:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> RTC_ALRMAR_HU_Pos);
 800a854:	697b      	ldr	r3, [r7, #20]
 800a856:	0c1b      	lsrs	r3, r3, #16
 800a858:	b2db      	uxtb	r3, r3
 800a85a:	223f      	movs	r2, #63	@ 0x3f
 800a85c:	4013      	ands	r3, r2
 800a85e:	b2da      	uxtb	r2, r3
 800a860:	68bb      	ldr	r3, [r7, #8]
 800a862:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 800a864:	697b      	ldr	r3, [r7, #20]
 800a866:	0a1b      	lsrs	r3, r3, #8
 800a868:	b2db      	uxtb	r3, r3
 800a86a:	227f      	movs	r2, #127	@ 0x7f
 800a86c:	4013      	ands	r3, r2
 800a86e:	b2da      	uxtb	r2, r3
 800a870:	68bb      	ldr	r3, [r7, #8]
 800a872:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU)) >> RTC_ALRMAR_SU_Pos);
 800a874:	697b      	ldr	r3, [r7, #20]
 800a876:	b2db      	uxtb	r3, r3
 800a878:	227f      	movs	r2, #127	@ 0x7f
 800a87a:	4013      	ands	r3, r2
 800a87c:	b2da      	uxtb	r2, r3
 800a87e:	68bb      	ldr	r3, [r7, #8]
 800a880:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMAR_PM) >> RTC_ALRMAR_PM_Pos);
 800a882:	697b      	ldr	r3, [r7, #20]
 800a884:	0d9b      	lsrs	r3, r3, #22
 800a886:	b2db      	uxtb	r3, r3
 800a888:	2201      	movs	r2, #1
 800a88a:	4013      	ands	r3, r2
 800a88c:	b2da      	uxtb	r2, r3
 800a88e:	68bb      	ldr	r3, [r7, #8]
 800a890:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 800a892:	68bb      	ldr	r3, [r7, #8]
 800a894:	693a      	ldr	r2, [r7, #16]
 800a896:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> RTC_ALRMAR_DU_Pos);
 800a898:	697b      	ldr	r3, [r7, #20]
 800a89a:	0e1b      	lsrs	r3, r3, #24
 800a89c:	b2db      	uxtb	r3, r3
 800a89e:	223f      	movs	r2, #63	@ 0x3f
 800a8a0:	4013      	ands	r3, r2
 800a8a2:	b2d9      	uxtb	r1, r3
 800a8a4:	68bb      	ldr	r3, [r7, #8]
 800a8a6:	2220      	movs	r2, #32
 800a8a8:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 800a8aa:	697a      	ldr	r2, [r7, #20]
 800a8ac:	2380      	movs	r3, #128	@ 0x80
 800a8ae:	05db      	lsls	r3, r3, #23
 800a8b0:	401a      	ands	r2, r3
 800a8b2:	68bb      	ldr	r3, [r7, #8]
 800a8b4:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 800a8b6:	697b      	ldr	r3, [r7, #20]
 800a8b8:	4a3b      	ldr	r2, [pc, #236]	@ (800a9a8 <HAL_RTC_GetAlarm+0x188>)
 800a8ba:	401a      	ands	r2, r3
 800a8bc:	68bb      	ldr	r3, [r7, #8]
 800a8be:	615a      	str	r2, [r3, #20]
 800a8c0:	e043      	b.n	800a94a <HAL_RTC_GetAlarm+0x12a>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 800a8c2:	68bb      	ldr	r3, [r7, #8]
 800a8c4:	2280      	movs	r2, #128	@ 0x80
 800a8c6:	0092      	lsls	r2, r2, #2
 800a8c8:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a8d0:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a8d8:	045b      	lsls	r3, r3, #17
 800a8da:	0c5b      	lsrs	r3, r3, #17
 800a8dc:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMBR_HT | RTC_ALRMBR_HU)) >> RTC_ALRMBR_HU_Pos);
 800a8de:	697b      	ldr	r3, [r7, #20]
 800a8e0:	0c1b      	lsrs	r3, r3, #16
 800a8e2:	b2db      	uxtb	r3, r3
 800a8e4:	223f      	movs	r2, #63	@ 0x3f
 800a8e6:	4013      	ands	r3, r2
 800a8e8:	b2da      	uxtb	r2, r3
 800a8ea:	68bb      	ldr	r3, [r7, #8]
 800a8ec:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> RTC_ALRMBR_MNU_Pos);
 800a8ee:	697b      	ldr	r3, [r7, #20]
 800a8f0:	0a1b      	lsrs	r3, r3, #8
 800a8f2:	b2db      	uxtb	r3, r3
 800a8f4:	227f      	movs	r2, #127	@ 0x7f
 800a8f6:	4013      	ands	r3, r2
 800a8f8:	b2da      	uxtb	r2, r3
 800a8fa:	68bb      	ldr	r3, [r7, #8]
 800a8fc:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMBR_ST | RTC_ALRMBR_SU)) >> RTC_ALRMBR_SU_Pos);
 800a8fe:	697b      	ldr	r3, [r7, #20]
 800a900:	b2db      	uxtb	r3, r3
 800a902:	227f      	movs	r2, #127	@ 0x7f
 800a904:	4013      	ands	r3, r2
 800a906:	b2da      	uxtb	r2, r3
 800a908:	68bb      	ldr	r3, [r7, #8]
 800a90a:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMBR_PM) >> RTC_ALRMBR_PM_Pos);
 800a90c:	697b      	ldr	r3, [r7, #20]
 800a90e:	0d9b      	lsrs	r3, r3, #22
 800a910:	b2db      	uxtb	r3, r3
 800a912:	2201      	movs	r2, #1
 800a914:	4013      	ands	r3, r2
 800a916:	b2da      	uxtb	r2, r3
 800a918:	68bb      	ldr	r3, [r7, #8]
 800a91a:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 800a91c:	68bb      	ldr	r3, [r7, #8]
 800a91e:	693a      	ldr	r2, [r7, #16]
 800a920:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU)) >> RTC_ALRMBR_DU_Pos);
 800a922:	697b      	ldr	r3, [r7, #20]
 800a924:	0e1b      	lsrs	r3, r3, #24
 800a926:	b2db      	uxtb	r3, r3
 800a928:	223f      	movs	r2, #63	@ 0x3f
 800a92a:	4013      	ands	r3, r2
 800a92c:	b2d9      	uxtb	r1, r3
 800a92e:	68bb      	ldr	r3, [r7, #8]
 800a930:	2220      	movs	r2, #32
 800a932:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMBR_WDSEL);
 800a934:	697a      	ldr	r2, [r7, #20]
 800a936:	2380      	movs	r3, #128	@ 0x80
 800a938:	05db      	lsls	r3, r3, #23
 800a93a:	401a      	ands	r2, r3
 800a93c:	68bb      	ldr	r3, [r7, #8]
 800a93e:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 800a940:	697b      	ldr	r3, [r7, #20]
 800a942:	4a19      	ldr	r2, [pc, #100]	@ (800a9a8 <HAL_RTC_GetAlarm+0x188>)
 800a944:	401a      	ands	r2, r3
 800a946:	68bb      	ldr	r3, [r7, #8]
 800a948:	615a      	str	r2, [r3, #20]
  }

  if(Format == RTC_FORMAT_BIN)
 800a94a:	683b      	ldr	r3, [r7, #0]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d125      	bne.n	800a99c <HAL_RTC_GetAlarm+0x17c>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 800a950:	68bb      	ldr	r3, [r7, #8]
 800a952:	781b      	ldrb	r3, [r3, #0]
 800a954:	0018      	movs	r0, r3
 800a956:	f000 f93b 	bl	800abd0 <RTC_Bcd2ToByte>
 800a95a:	0003      	movs	r3, r0
 800a95c:	001a      	movs	r2, r3
 800a95e:	68bb      	ldr	r3, [r7, #8]
 800a960:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 800a962:	68bb      	ldr	r3, [r7, #8]
 800a964:	785b      	ldrb	r3, [r3, #1]
 800a966:	0018      	movs	r0, r3
 800a968:	f000 f932 	bl	800abd0 <RTC_Bcd2ToByte>
 800a96c:	0003      	movs	r3, r0
 800a96e:	001a      	movs	r2, r3
 800a970:	68bb      	ldr	r3, [r7, #8]
 800a972:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 800a974:	68bb      	ldr	r3, [r7, #8]
 800a976:	789b      	ldrb	r3, [r3, #2]
 800a978:	0018      	movs	r0, r3
 800a97a:	f000 f929 	bl	800abd0 <RTC_Bcd2ToByte>
 800a97e:	0003      	movs	r3, r0
 800a980:	001a      	movs	r2, r3
 800a982:	68bb      	ldr	r3, [r7, #8]
 800a984:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 800a986:	68bb      	ldr	r3, [r7, #8]
 800a988:	2220      	movs	r2, #32
 800a98a:	5c9b      	ldrb	r3, [r3, r2]
 800a98c:	0018      	movs	r0, r3
 800a98e:	f000 f91f 	bl	800abd0 <RTC_Bcd2ToByte>
 800a992:	0003      	movs	r3, r0
 800a994:	0019      	movs	r1, r3
 800a996:	68bb      	ldr	r3, [r7, #8]
 800a998:	2220      	movs	r2, #32
 800a99a:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 800a99c:	2300      	movs	r3, #0
}
 800a99e:	0018      	movs	r0, r3
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	b006      	add	sp, #24
 800a9a4:	bd80      	pop	{r7, pc}
 800a9a6:	46c0      	nop			@ (mov r8, r8)
 800a9a8:	80808080 	.word	0x80808080

0800a9ac <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b082      	sub	sp, #8
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	699a      	ldr	r2, [r3, #24]
 800a9ba:	2380      	movs	r3, #128	@ 0x80
 800a9bc:	015b      	lsls	r3, r3, #5
 800a9be:	4013      	ands	r3, r2
 800a9c0:	d011      	beq.n	800a9e6 <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a9c8:	2201      	movs	r2, #1
 800a9ca:	4013      	ands	r3, r2
 800a9cc:	d00b      	beq.n	800a9e6 <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	2101      	movs	r1, #1
 800a9da:	430a      	orrs	r2, r1
 800a9dc:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	0018      	movs	r0, r3
 800a9e2:	f7fb fd67 	bl	80064b4 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	699a      	ldr	r2, [r3, #24]
 800a9ec:	2380      	movs	r3, #128	@ 0x80
 800a9ee:	019b      	lsls	r3, r3, #6
 800a9f0:	4013      	ands	r3, r2
 800a9f2:	d011      	beq.n	800aa18 <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a9fa:	2202      	movs	r2, #2
 800a9fc:	4013      	ands	r3, r2
 800a9fe:	d00b      	beq.n	800aa18 <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	2102      	movs	r1, #2
 800aa0c:	430a      	orrs	r2, r1
 800aa0e:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	0018      	movs	r0, r3
 800aa14:	f000 f9ba 	bl	800ad8c <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	2229      	movs	r2, #41	@ 0x29
 800aa1c:	2101      	movs	r1, #1
 800aa1e:	5499      	strb	r1, [r3, r2]
}
 800aa20:	46c0      	nop			@ (mov r8, r8)
 800aa22:	46bd      	mov	sp, r7
 800aa24:	b002      	add	sp, #8
 800aa26:	bd80      	pop	{r7, pc}

0800aa28 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b084      	sub	sp, #16
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	4a0e      	ldr	r2, [pc, #56]	@ (800aa70 <HAL_RTC_WaitForSynchro+0x48>)
 800aa36:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800aa38:	f7fd fb04 	bl	8008044 <HAL_GetTick>
 800aa3c:	0003      	movs	r3, r0
 800aa3e:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800aa40:	e00a      	b.n	800aa58 <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800aa42:	f7fd faff 	bl	8008044 <HAL_GetTick>
 800aa46:	0002      	movs	r2, r0
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	1ad2      	subs	r2, r2, r3
 800aa4c:	23fa      	movs	r3, #250	@ 0xfa
 800aa4e:	009b      	lsls	r3, r3, #2
 800aa50:	429a      	cmp	r2, r3
 800aa52:	d901      	bls.n	800aa58 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800aa54:	2303      	movs	r3, #3
 800aa56:	e006      	b.n	800aa66 <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	68db      	ldr	r3, [r3, #12]
 800aa5e:	2220      	movs	r2, #32
 800aa60:	4013      	ands	r3, r2
 800aa62:	d0ee      	beq.n	800aa42 <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 800aa64:	2300      	movs	r3, #0
}
 800aa66:	0018      	movs	r0, r3
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	b004      	add	sp, #16
 800aa6c:	bd80      	pop	{r7, pc}
 800aa6e:	46c0      	nop			@ (mov r8, r8)
 800aa70:	0001005f 	.word	0x0001005f

0800aa74 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b084      	sub	sp, #16
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 800aa7c:	230f      	movs	r3, #15
 800aa7e:	18fb      	adds	r3, r7, r3
 800aa80:	2200      	movs	r2, #0
 800aa82:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	68db      	ldr	r3, [r3, #12]
 800aa8a:	2240      	movs	r2, #64	@ 0x40
 800aa8c:	4013      	ands	r3, r2
 800aa8e:	d12c      	bne.n	800aaea <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	68da      	ldr	r2, [r3, #12]
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	2180      	movs	r1, #128	@ 0x80
 800aa9c:	430a      	orrs	r2, r1
 800aa9e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800aaa0:	f7fd fad0 	bl	8008044 <HAL_GetTick>
 800aaa4:	0003      	movs	r3, r0
 800aaa6:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800aaa8:	e014      	b.n	800aad4 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800aaaa:	f7fd facb 	bl	8008044 <HAL_GetTick>
 800aaae:	0002      	movs	r2, r0
 800aab0:	68bb      	ldr	r3, [r7, #8]
 800aab2:	1ad2      	subs	r2, r2, r3
 800aab4:	200f      	movs	r0, #15
 800aab6:	183b      	adds	r3, r7, r0
 800aab8:	1839      	adds	r1, r7, r0
 800aaba:	7809      	ldrb	r1, [r1, #0]
 800aabc:	7019      	strb	r1, [r3, #0]
 800aabe:	23fa      	movs	r3, #250	@ 0xfa
 800aac0:	009b      	lsls	r3, r3, #2
 800aac2:	429a      	cmp	r2, r3
 800aac4:	d906      	bls.n	800aad4 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 800aac6:	183b      	adds	r3, r7, r0
 800aac8:	2203      	movs	r2, #3
 800aaca:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2229      	movs	r2, #41	@ 0x29
 800aad0:	2103      	movs	r1, #3
 800aad2:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	68db      	ldr	r3, [r3, #12]
 800aada:	2240      	movs	r2, #64	@ 0x40
 800aadc:	4013      	ands	r3, r2
 800aade:	d104      	bne.n	800aaea <RTC_EnterInitMode+0x76>
 800aae0:	230f      	movs	r3, #15
 800aae2:	18fb      	adds	r3, r7, r3
 800aae4:	781b      	ldrb	r3, [r3, #0]
 800aae6:	2b03      	cmp	r3, #3
 800aae8:	d1df      	bne.n	800aaaa <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800aaea:	230f      	movs	r3, #15
 800aaec:	18fb      	adds	r3, r7, r3
 800aaee:	781b      	ldrb	r3, [r3, #0]
}
 800aaf0:	0018      	movs	r0, r3
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	b004      	add	sp, #16
 800aaf6:	bd80      	pop	{r7, pc}

0800aaf8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800aaf8:	b590      	push	{r4, r7, lr}
 800aafa:	b085      	sub	sp, #20
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ab00:	240f      	movs	r4, #15
 800ab02:	193b      	adds	r3, r7, r4
 800ab04:	2200      	movs	r2, #0
 800ab06:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800ab08:	4b1c      	ldr	r3, [pc, #112]	@ (800ab7c <RTC_ExitInitMode+0x84>)
 800ab0a:	68da      	ldr	r2, [r3, #12]
 800ab0c:	4b1b      	ldr	r3, [pc, #108]	@ (800ab7c <RTC_ExitInitMode+0x84>)
 800ab0e:	2180      	movs	r1, #128	@ 0x80
 800ab10:	438a      	bics	r2, r1
 800ab12:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800ab14:	4b19      	ldr	r3, [pc, #100]	@ (800ab7c <RTC_ExitInitMode+0x84>)
 800ab16:	699b      	ldr	r3, [r3, #24]
 800ab18:	2220      	movs	r2, #32
 800ab1a:	4013      	ands	r3, r2
 800ab1c:	d10d      	bne.n	800ab3a <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	0018      	movs	r0, r3
 800ab22:	f7ff ff81 	bl	800aa28 <HAL_RTC_WaitForSynchro>
 800ab26:	1e03      	subs	r3, r0, #0
 800ab28:	d021      	beq.n	800ab6e <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	2229      	movs	r2, #41	@ 0x29
 800ab2e:	2103      	movs	r1, #3
 800ab30:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800ab32:	193b      	adds	r3, r7, r4
 800ab34:	2203      	movs	r2, #3
 800ab36:	701a      	strb	r2, [r3, #0]
 800ab38:	e019      	b.n	800ab6e <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800ab3a:	4b10      	ldr	r3, [pc, #64]	@ (800ab7c <RTC_ExitInitMode+0x84>)
 800ab3c:	699a      	ldr	r2, [r3, #24]
 800ab3e:	4b0f      	ldr	r3, [pc, #60]	@ (800ab7c <RTC_ExitInitMode+0x84>)
 800ab40:	2120      	movs	r1, #32
 800ab42:	438a      	bics	r2, r1
 800ab44:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	0018      	movs	r0, r3
 800ab4a:	f7ff ff6d 	bl	800aa28 <HAL_RTC_WaitForSynchro>
 800ab4e:	1e03      	subs	r3, r0, #0
 800ab50:	d007      	beq.n	800ab62 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	2229      	movs	r2, #41	@ 0x29
 800ab56:	2103      	movs	r1, #3
 800ab58:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800ab5a:	230f      	movs	r3, #15
 800ab5c:	18fb      	adds	r3, r7, r3
 800ab5e:	2203      	movs	r2, #3
 800ab60:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800ab62:	4b06      	ldr	r3, [pc, #24]	@ (800ab7c <RTC_ExitInitMode+0x84>)
 800ab64:	699a      	ldr	r2, [r3, #24]
 800ab66:	4b05      	ldr	r3, [pc, #20]	@ (800ab7c <RTC_ExitInitMode+0x84>)
 800ab68:	2120      	movs	r1, #32
 800ab6a:	430a      	orrs	r2, r1
 800ab6c:	619a      	str	r2, [r3, #24]
  }

  return status;
 800ab6e:	230f      	movs	r3, #15
 800ab70:	18fb      	adds	r3, r7, r3
 800ab72:	781b      	ldrb	r3, [r3, #0]
}
 800ab74:	0018      	movs	r0, r3
 800ab76:	46bd      	mov	sp, r7
 800ab78:	b005      	add	sp, #20
 800ab7a:	bd90      	pop	{r4, r7, pc}
 800ab7c:	40002800 	.word	0x40002800

0800ab80 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b084      	sub	sp, #16
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	0002      	movs	r2, r0
 800ab88:	1dfb      	adds	r3, r7, #7
 800ab8a:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 800ab90:	230b      	movs	r3, #11
 800ab92:	18fb      	adds	r3, r7, r3
 800ab94:	1dfa      	adds	r2, r7, #7
 800ab96:	7812      	ldrb	r2, [r2, #0]
 800ab98:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 800ab9a:	e008      	b.n	800abae <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	3301      	adds	r3, #1
 800aba0:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800aba2:	220b      	movs	r2, #11
 800aba4:	18bb      	adds	r3, r7, r2
 800aba6:	18ba      	adds	r2, r7, r2
 800aba8:	7812      	ldrb	r2, [r2, #0]
 800abaa:	3a0a      	subs	r2, #10
 800abac:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 800abae:	210b      	movs	r1, #11
 800abb0:	187b      	adds	r3, r7, r1
 800abb2:	781b      	ldrb	r3, [r3, #0]
 800abb4:	2b09      	cmp	r3, #9
 800abb6:	d8f1      	bhi.n	800ab9c <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	b2db      	uxtb	r3, r3
 800abbc:	011b      	lsls	r3, r3, #4
 800abbe:	b2da      	uxtb	r2, r3
 800abc0:	187b      	adds	r3, r7, r1
 800abc2:	781b      	ldrb	r3, [r3, #0]
 800abc4:	4313      	orrs	r3, r2
 800abc6:	b2db      	uxtb	r3, r3
}
 800abc8:	0018      	movs	r0, r3
 800abca:	46bd      	mov	sp, r7
 800abcc:	b004      	add	sp, #16
 800abce:	bd80      	pop	{r7, pc}

0800abd0 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b084      	sub	sp, #16
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	0002      	movs	r2, r0
 800abd8:	1dfb      	adds	r3, r7, #7
 800abda:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800abdc:	1dfb      	adds	r3, r7, #7
 800abde:	781b      	ldrb	r3, [r3, #0]
 800abe0:	091b      	lsrs	r3, r3, #4
 800abe2:	b2db      	uxtb	r3, r3
 800abe4:	001a      	movs	r2, r3
 800abe6:	0013      	movs	r3, r2
 800abe8:	009b      	lsls	r3, r3, #2
 800abea:	189b      	adds	r3, r3, r2
 800abec:	005b      	lsls	r3, r3, #1
 800abee:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	b2da      	uxtb	r2, r3
 800abf4:	1dfb      	adds	r3, r7, #7
 800abf6:	781b      	ldrb	r3, [r3, #0]
 800abf8:	210f      	movs	r1, #15
 800abfa:	400b      	ands	r3, r1
 800abfc:	b2db      	uxtb	r3, r3
 800abfe:	18d3      	adds	r3, r2, r3
 800ac00:	b2db      	uxtb	r3, r3
}
 800ac02:	0018      	movs	r0, r3
 800ac04:	46bd      	mov	sp, r7
 800ac06:	b004      	add	sp, #16
 800ac08:	bd80      	pop	{r7, pc}
	...

0800ac0c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b086      	sub	sp, #24
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	60f8      	str	r0, [r7, #12]
 800ac14:	60b9      	str	r1, [r7, #8]
 800ac16:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	2228      	movs	r2, #40	@ 0x28
 800ac1c:	5c9b      	ldrb	r3, [r3, r2]
 800ac1e:	2b01      	cmp	r3, #1
 800ac20:	d101      	bne.n	800ac26 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800ac22:	2302      	movs	r3, #2
 800ac24:	e082      	b.n	800ad2c <HAL_RTCEx_SetWakeUpTimer_IT+0x120>
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	2228      	movs	r2, #40	@ 0x28
 800ac2a:	2101      	movs	r1, #1
 800ac2c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	2229      	movs	r2, #41	@ 0x29
 800ac32:	2102      	movs	r1, #2
 800ac34:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	22ca      	movs	r2, #202	@ 0xca
 800ac3c:	625a      	str	r2, [r3, #36]	@ 0x24
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	2253      	movs	r2, #83	@ 0x53
 800ac44:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	699a      	ldr	r2, [r3, #24]
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	4938      	ldr	r1, [pc, #224]	@ (800ad34 <HAL_RTCEx_SetWakeUpTimer_IT+0x128>)
 800ac52:	400a      	ands	r2, r1
 800ac54:	619a      	str	r2, [r3, #24]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	2104      	movs	r1, #4
 800ac62:	430a      	orrs	r2, r1
 800ac64:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800ac66:	4b34      	ldr	r3, [pc, #208]	@ (800ad38 <HAL_RTCEx_SetWakeUpTimer_IT+0x12c>)
 800ac68:	68db      	ldr	r3, [r3, #12]
 800ac6a:	2240      	movs	r2, #64	@ 0x40
 800ac6c:	4013      	ands	r3, r2
 800ac6e:	d121      	bne.n	800acb4 <HAL_RTCEx_SetWakeUpTimer_IT+0xa8>
  {
    tickstart = HAL_GetTick();
 800ac70:	f7fd f9e8 	bl	8008044 <HAL_GetTick>
 800ac74:	0003      	movs	r3, r0
 800ac76:	617b      	str	r3, [r7, #20]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800ac78:	e016      	b.n	800aca8 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800ac7a:	f7fd f9e3 	bl	8008044 <HAL_GetTick>
 800ac7e:	0002      	movs	r2, r0
 800ac80:	697b      	ldr	r3, [r7, #20]
 800ac82:	1ad2      	subs	r2, r2, r3
 800ac84:	23fa      	movs	r3, #250	@ 0xfa
 800ac86:	009b      	lsls	r3, r3, #2
 800ac88:	429a      	cmp	r2, r3
 800ac8a:	d90d      	bls.n	800aca8 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	22ff      	movs	r2, #255	@ 0xff
 800ac92:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	2229      	movs	r2, #41	@ 0x29
 800ac98:	2103      	movs	r1, #3
 800ac9a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	2228      	movs	r2, #40	@ 0x28
 800aca0:	2100      	movs	r1, #0
 800aca2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800aca4:	2303      	movs	r3, #3
 800aca6:	e041      	b.n	800ad2c <HAL_RTCEx_SetWakeUpTimer_IT+0x120>
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	68db      	ldr	r3, [r3, #12]
 800acae:	2204      	movs	r2, #4
 800acb0:	4013      	ands	r3, r2
 800acb2:	d0e2      	beq.n	800ac7a <HAL_RTCEx_SetWakeUpTimer_IT+0x6e>
      }
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	68ba      	ldr	r2, [r7, #8]
 800acba:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	699a      	ldr	r2, [r3, #24]
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	2107      	movs	r1, #7
 800acc8:	438a      	bics	r2, r1
 800acca:	619a      	str	r2, [r3, #24]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	6999      	ldr	r1, [r3, #24]
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	687a      	ldr	r2, [r7, #4]
 800acd8:	430a      	orrs	r2, r1
 800acda:	619a      	str	r2, [r3, #24]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800acdc:	4a17      	ldr	r2, [pc, #92]	@ (800ad3c <HAL_RTCEx_SetWakeUpTimer_IT+0x130>)
 800acde:	2380      	movs	r3, #128	@ 0x80
 800ace0:	58d3      	ldr	r3, [r2, r3]
 800ace2:	4916      	ldr	r1, [pc, #88]	@ (800ad3c <HAL_RTCEx_SetWakeUpTimer_IT+0x130>)
 800ace4:	2280      	movs	r2, #128	@ 0x80
 800ace6:	0312      	lsls	r2, r2, #12
 800ace8:	4313      	orrs	r3, r2
 800acea:	2280      	movs	r2, #128	@ 0x80
 800acec:	508b      	str	r3, [r1, r2]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	699a      	ldr	r2, [r3, #24]
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	2180      	movs	r1, #128	@ 0x80
 800acfa:	01c9      	lsls	r1, r1, #7
 800acfc:	430a      	orrs	r2, r1
 800acfe:	619a      	str	r2, [r3, #24]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	699a      	ldr	r2, [r3, #24]
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	2180      	movs	r1, #128	@ 0x80
 800ad0c:	00c9      	lsls	r1, r1, #3
 800ad0e:	430a      	orrs	r2, r1
 800ad10:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	22ff      	movs	r2, #255	@ 0xff
 800ad18:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	2229      	movs	r2, #41	@ 0x29
 800ad1e:	2101      	movs	r1, #1
 800ad20:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	2228      	movs	r2, #40	@ 0x28
 800ad26:	2100      	movs	r1, #0
 800ad28:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ad2a:	2300      	movs	r3, #0
}
 800ad2c:	0018      	movs	r0, r3
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	b006      	add	sp, #24
 800ad32:	bd80      	pop	{r7, pc}
 800ad34:	fffffbff 	.word	0xfffffbff
 800ad38:	40002800 	.word	0x40002800
 800ad3c:	40021800 	.word	0x40021800

0800ad40 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b082      	sub	sp, #8
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
    /* Get the pending status of the WAKEUPTIMER Interrupt */
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ad4e:	2204      	movs	r2, #4
 800ad50:	4013      	ands	r3, r2
 800ad52:	d00b      	beq.n	800ad6c <HAL_RTCEx_WakeUpTimerIRQHandler+0x2c>
    {
      /* Clear the WAKEUPTIMER interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	2104      	movs	r1, #4
 800ad60:	430a      	orrs	r2, r1
 800ad62:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call WakeUpTimerEvent registered Callback */
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      /* WAKEUPTIMER callback */
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	0018      	movs	r0, r3
 800ad68:	f000 f808 	bl	800ad7c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2229      	movs	r2, #41	@ 0x29
 800ad70:	2101      	movs	r1, #1
 800ad72:	5499      	strb	r1, [r3, r2]
}
 800ad74:	46c0      	nop			@ (mov r8, r8)
 800ad76:	46bd      	mov	sp, r7
 800ad78:	b002      	add	sp, #8
 800ad7a:	bd80      	pop	{r7, pc}

0800ad7c <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b082      	sub	sp, #8
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 800ad84:	46c0      	nop			@ (mov r8, r8)
 800ad86:	46bd      	mov	sp, r7
 800ad88:	b002      	add	sp, #8
 800ad8a:	bd80      	pop	{r7, pc}

0800ad8c <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b082      	sub	sp, #8
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800ad94:	46c0      	nop			@ (mov r8, r8)
 800ad96:	46bd      	mov	sp, r7
 800ad98:	b002      	add	sp, #8
 800ad9a:	bd80      	pop	{r7, pc}

0800ad9c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b084      	sub	sp, #16
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d101      	bne.n	800adae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800adaa:	2301      	movs	r3, #1
 800adac:	e0a8      	b.n	800af00 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d109      	bne.n	800adca <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	685a      	ldr	r2, [r3, #4]
 800adba:	2382      	movs	r3, #130	@ 0x82
 800adbc:	005b      	lsls	r3, r3, #1
 800adbe:	429a      	cmp	r2, r3
 800adc0:	d009      	beq.n	800add6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	2200      	movs	r2, #0
 800adc6:	61da      	str	r2, [r3, #28]
 800adc8:	e005      	b.n	800add6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	2200      	movs	r2, #0
 800adce:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	2200      	movs	r2, #0
 800add4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	2200      	movs	r2, #0
 800adda:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	225d      	movs	r2, #93	@ 0x5d
 800ade0:	5c9b      	ldrb	r3, [r3, r2]
 800ade2:	b2db      	uxtb	r3, r3
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d107      	bne.n	800adf8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	225c      	movs	r2, #92	@ 0x5c
 800adec:	2100      	movs	r1, #0
 800adee:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	0018      	movs	r0, r3
 800adf4:	f7fc f8ba 	bl	8006f6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	225d      	movs	r2, #93	@ 0x5d
 800adfc:	2102      	movs	r1, #2
 800adfe:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	681a      	ldr	r2, [r3, #0]
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	2140      	movs	r1, #64	@ 0x40
 800ae0c:	438a      	bics	r2, r1
 800ae0e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	68da      	ldr	r2, [r3, #12]
 800ae14:	23e0      	movs	r3, #224	@ 0xe0
 800ae16:	00db      	lsls	r3, r3, #3
 800ae18:	429a      	cmp	r2, r3
 800ae1a:	d902      	bls.n	800ae22 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	60fb      	str	r3, [r7, #12]
 800ae20:	e002      	b.n	800ae28 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800ae22:	2380      	movs	r3, #128	@ 0x80
 800ae24:	015b      	lsls	r3, r3, #5
 800ae26:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	68da      	ldr	r2, [r3, #12]
 800ae2c:	23f0      	movs	r3, #240	@ 0xf0
 800ae2e:	011b      	lsls	r3, r3, #4
 800ae30:	429a      	cmp	r2, r3
 800ae32:	d008      	beq.n	800ae46 <HAL_SPI_Init+0xaa>
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	68da      	ldr	r2, [r3, #12]
 800ae38:	23e0      	movs	r3, #224	@ 0xe0
 800ae3a:	00db      	lsls	r3, r3, #3
 800ae3c:	429a      	cmp	r2, r3
 800ae3e:	d002      	beq.n	800ae46 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	2200      	movs	r2, #0
 800ae44:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	685a      	ldr	r2, [r3, #4]
 800ae4a:	2382      	movs	r3, #130	@ 0x82
 800ae4c:	005b      	lsls	r3, r3, #1
 800ae4e:	401a      	ands	r2, r3
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	6899      	ldr	r1, [r3, #8]
 800ae54:	2384      	movs	r3, #132	@ 0x84
 800ae56:	021b      	lsls	r3, r3, #8
 800ae58:	400b      	ands	r3, r1
 800ae5a:	431a      	orrs	r2, r3
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	691b      	ldr	r3, [r3, #16]
 800ae60:	2102      	movs	r1, #2
 800ae62:	400b      	ands	r3, r1
 800ae64:	431a      	orrs	r2, r3
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	695b      	ldr	r3, [r3, #20]
 800ae6a:	2101      	movs	r1, #1
 800ae6c:	400b      	ands	r3, r1
 800ae6e:	431a      	orrs	r2, r3
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	6999      	ldr	r1, [r3, #24]
 800ae74:	2380      	movs	r3, #128	@ 0x80
 800ae76:	009b      	lsls	r3, r3, #2
 800ae78:	400b      	ands	r3, r1
 800ae7a:	431a      	orrs	r2, r3
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	69db      	ldr	r3, [r3, #28]
 800ae80:	2138      	movs	r1, #56	@ 0x38
 800ae82:	400b      	ands	r3, r1
 800ae84:	431a      	orrs	r2, r3
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	6a1b      	ldr	r3, [r3, #32]
 800ae8a:	2180      	movs	r1, #128	@ 0x80
 800ae8c:	400b      	ands	r3, r1
 800ae8e:	431a      	orrs	r2, r3
 800ae90:	0011      	movs	r1, r2
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ae96:	2380      	movs	r3, #128	@ 0x80
 800ae98:	019b      	lsls	r3, r3, #6
 800ae9a:	401a      	ands	r2, r3
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	430a      	orrs	r2, r1
 800aea2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	699b      	ldr	r3, [r3, #24]
 800aea8:	0c1b      	lsrs	r3, r3, #16
 800aeaa:	2204      	movs	r2, #4
 800aeac:	401a      	ands	r2, r3
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aeb2:	2110      	movs	r1, #16
 800aeb4:	400b      	ands	r3, r1
 800aeb6:	431a      	orrs	r2, r3
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aebc:	2108      	movs	r1, #8
 800aebe:	400b      	ands	r3, r1
 800aec0:	431a      	orrs	r2, r3
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	68d9      	ldr	r1, [r3, #12]
 800aec6:	23f0      	movs	r3, #240	@ 0xf0
 800aec8:	011b      	lsls	r3, r3, #4
 800aeca:	400b      	ands	r3, r1
 800aecc:	431a      	orrs	r2, r3
 800aece:	0011      	movs	r1, r2
 800aed0:	68fa      	ldr	r2, [r7, #12]
 800aed2:	2380      	movs	r3, #128	@ 0x80
 800aed4:	015b      	lsls	r3, r3, #5
 800aed6:	401a      	ands	r2, r3
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	430a      	orrs	r2, r1
 800aede:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	69da      	ldr	r2, [r3, #28]
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	4907      	ldr	r1, [pc, #28]	@ (800af08 <HAL_SPI_Init+0x16c>)
 800aeec:	400a      	ands	r2, r1
 800aeee:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	2200      	movs	r2, #0
 800aef4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	225d      	movs	r2, #93	@ 0x5d
 800aefa:	2101      	movs	r1, #1
 800aefc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800aefe:	2300      	movs	r3, #0
}
 800af00:	0018      	movs	r0, r3
 800af02:	46bd      	mov	sp, r7
 800af04:	b004      	add	sp, #16
 800af06:	bd80      	pop	{r7, pc}
 800af08:	fffff7ff 	.word	0xfffff7ff

0800af0c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b088      	sub	sp, #32
 800af10:	af00      	add	r7, sp, #0
 800af12:	60f8      	str	r0, [r7, #12]
 800af14:	60b9      	str	r1, [r7, #8]
 800af16:	603b      	str	r3, [r7, #0]
 800af18:	1dbb      	adds	r3, r7, #6
 800af1a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800af1c:	231f      	movs	r3, #31
 800af1e:	18fb      	adds	r3, r7, r3
 800af20:	2200      	movs	r2, #0
 800af22:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	225c      	movs	r2, #92	@ 0x5c
 800af28:	5c9b      	ldrb	r3, [r3, r2]
 800af2a:	2b01      	cmp	r3, #1
 800af2c:	d101      	bne.n	800af32 <HAL_SPI_Transmit+0x26>
 800af2e:	2302      	movs	r3, #2
 800af30:	e147      	b.n	800b1c2 <HAL_SPI_Transmit+0x2b6>
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	225c      	movs	r2, #92	@ 0x5c
 800af36:	2101      	movs	r1, #1
 800af38:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800af3a:	f7fd f883 	bl	8008044 <HAL_GetTick>
 800af3e:	0003      	movs	r3, r0
 800af40:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800af42:	2316      	movs	r3, #22
 800af44:	18fb      	adds	r3, r7, r3
 800af46:	1dba      	adds	r2, r7, #6
 800af48:	8812      	ldrh	r2, [r2, #0]
 800af4a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	225d      	movs	r2, #93	@ 0x5d
 800af50:	5c9b      	ldrb	r3, [r3, r2]
 800af52:	b2db      	uxtb	r3, r3
 800af54:	2b01      	cmp	r3, #1
 800af56:	d004      	beq.n	800af62 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800af58:	231f      	movs	r3, #31
 800af5a:	18fb      	adds	r3, r7, r3
 800af5c:	2202      	movs	r2, #2
 800af5e:	701a      	strb	r2, [r3, #0]
    goto error;
 800af60:	e128      	b.n	800b1b4 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 800af62:	68bb      	ldr	r3, [r7, #8]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d003      	beq.n	800af70 <HAL_SPI_Transmit+0x64>
 800af68:	1dbb      	adds	r3, r7, #6
 800af6a:	881b      	ldrh	r3, [r3, #0]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d104      	bne.n	800af7a <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800af70:	231f      	movs	r3, #31
 800af72:	18fb      	adds	r3, r7, r3
 800af74:	2201      	movs	r2, #1
 800af76:	701a      	strb	r2, [r3, #0]
    goto error;
 800af78:	e11c      	b.n	800b1b4 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	225d      	movs	r2, #93	@ 0x5d
 800af7e:	2103      	movs	r1, #3
 800af80:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	2200      	movs	r2, #0
 800af86:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	68ba      	ldr	r2, [r7, #8]
 800af8c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	1dba      	adds	r2, r7, #6
 800af92:	8812      	ldrh	r2, [r2, #0]
 800af94:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	1dba      	adds	r2, r7, #6
 800af9a:	8812      	ldrh	r2, [r2, #0]
 800af9c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	2200      	movs	r2, #0
 800afa2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	2244      	movs	r2, #68	@ 0x44
 800afa8:	2100      	movs	r1, #0
 800afaa:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	2246      	movs	r2, #70	@ 0x46
 800afb0:	2100      	movs	r1, #0
 800afb2:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	2200      	movs	r2, #0
 800afb8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	2200      	movs	r2, #0
 800afbe:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	689a      	ldr	r2, [r3, #8]
 800afc4:	2380      	movs	r3, #128	@ 0x80
 800afc6:	021b      	lsls	r3, r3, #8
 800afc8:	429a      	cmp	r2, r3
 800afca:	d110      	bne.n	800afee <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	681a      	ldr	r2, [r3, #0]
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	2140      	movs	r1, #64	@ 0x40
 800afd8:	438a      	bics	r2, r1
 800afda:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	681a      	ldr	r2, [r3, #0]
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	2180      	movs	r1, #128	@ 0x80
 800afe8:	01c9      	lsls	r1, r1, #7
 800afea:	430a      	orrs	r2, r1
 800afec:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	2240      	movs	r2, #64	@ 0x40
 800aff6:	4013      	ands	r3, r2
 800aff8:	2b40      	cmp	r3, #64	@ 0x40
 800affa:	d007      	beq.n	800b00c <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	681a      	ldr	r2, [r3, #0]
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	2140      	movs	r1, #64	@ 0x40
 800b008:	430a      	orrs	r2, r1
 800b00a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	68da      	ldr	r2, [r3, #12]
 800b010:	23e0      	movs	r3, #224	@ 0xe0
 800b012:	00db      	lsls	r3, r3, #3
 800b014:	429a      	cmp	r2, r3
 800b016:	d952      	bls.n	800b0be <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	685b      	ldr	r3, [r3, #4]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d004      	beq.n	800b02a <HAL_SPI_Transmit+0x11e>
 800b020:	2316      	movs	r3, #22
 800b022:	18fb      	adds	r3, r7, r3
 800b024:	881b      	ldrh	r3, [r3, #0]
 800b026:	2b01      	cmp	r3, #1
 800b028:	d143      	bne.n	800b0b2 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b02e:	881a      	ldrh	r2, [r3, #0]
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b03a:	1c9a      	adds	r2, r3, #2
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b044:	b29b      	uxth	r3, r3
 800b046:	3b01      	subs	r3, #1
 800b048:	b29a      	uxth	r2, r3
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b04e:	e030      	b.n	800b0b2 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	689b      	ldr	r3, [r3, #8]
 800b056:	2202      	movs	r2, #2
 800b058:	4013      	ands	r3, r2
 800b05a:	2b02      	cmp	r3, #2
 800b05c:	d112      	bne.n	800b084 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b062:	881a      	ldrh	r2, [r3, #0]
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b06e:	1c9a      	adds	r2, r3, #2
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b078:	b29b      	uxth	r3, r3
 800b07a:	3b01      	subs	r3, #1
 800b07c:	b29a      	uxth	r2, r3
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800b082:	e016      	b.n	800b0b2 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b084:	f7fc ffde 	bl	8008044 <HAL_GetTick>
 800b088:	0002      	movs	r2, r0
 800b08a:	69bb      	ldr	r3, [r7, #24]
 800b08c:	1ad3      	subs	r3, r2, r3
 800b08e:	683a      	ldr	r2, [r7, #0]
 800b090:	429a      	cmp	r2, r3
 800b092:	d802      	bhi.n	800b09a <HAL_SPI_Transmit+0x18e>
 800b094:	683b      	ldr	r3, [r7, #0]
 800b096:	3301      	adds	r3, #1
 800b098:	d102      	bne.n	800b0a0 <HAL_SPI_Transmit+0x194>
 800b09a:	683b      	ldr	r3, [r7, #0]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d108      	bne.n	800b0b2 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 800b0a0:	231f      	movs	r3, #31
 800b0a2:	18fb      	adds	r3, r7, r3
 800b0a4:	2203      	movs	r2, #3
 800b0a6:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	225d      	movs	r2, #93	@ 0x5d
 800b0ac:	2101      	movs	r1, #1
 800b0ae:	5499      	strb	r1, [r3, r2]
          goto error;
 800b0b0:	e080      	b.n	800b1b4 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b0b6:	b29b      	uxth	r3, r3
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d1c9      	bne.n	800b050 <HAL_SPI_Transmit+0x144>
 800b0bc:	e053      	b.n	800b166 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	685b      	ldr	r3, [r3, #4]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d004      	beq.n	800b0d0 <HAL_SPI_Transmit+0x1c4>
 800b0c6:	2316      	movs	r3, #22
 800b0c8:	18fb      	adds	r3, r7, r3
 800b0ca:	881b      	ldrh	r3, [r3, #0]
 800b0cc:	2b01      	cmp	r3, #1
 800b0ce:	d145      	bne.n	800b15c <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	330c      	adds	r3, #12
 800b0da:	7812      	ldrb	r2, [r2, #0]
 800b0dc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0e2:	1c5a      	adds	r2, r3, #1
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b0ec:	b29b      	uxth	r3, r3
 800b0ee:	3b01      	subs	r3, #1
 800b0f0:	b29a      	uxth	r2, r3
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800b0f6:	e031      	b.n	800b15c <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	689b      	ldr	r3, [r3, #8]
 800b0fe:	2202      	movs	r2, #2
 800b100:	4013      	ands	r3, r2
 800b102:	2b02      	cmp	r3, #2
 800b104:	d113      	bne.n	800b12e <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	330c      	adds	r3, #12
 800b110:	7812      	ldrb	r2, [r2, #0]
 800b112:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b118:	1c5a      	adds	r2, r3, #1
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b122:	b29b      	uxth	r3, r3
 800b124:	3b01      	subs	r3, #1
 800b126:	b29a      	uxth	r2, r3
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800b12c:	e016      	b.n	800b15c <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b12e:	f7fc ff89 	bl	8008044 <HAL_GetTick>
 800b132:	0002      	movs	r2, r0
 800b134:	69bb      	ldr	r3, [r7, #24]
 800b136:	1ad3      	subs	r3, r2, r3
 800b138:	683a      	ldr	r2, [r7, #0]
 800b13a:	429a      	cmp	r2, r3
 800b13c:	d802      	bhi.n	800b144 <HAL_SPI_Transmit+0x238>
 800b13e:	683b      	ldr	r3, [r7, #0]
 800b140:	3301      	adds	r3, #1
 800b142:	d102      	bne.n	800b14a <HAL_SPI_Transmit+0x23e>
 800b144:	683b      	ldr	r3, [r7, #0]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d108      	bne.n	800b15c <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 800b14a:	231f      	movs	r3, #31
 800b14c:	18fb      	adds	r3, r7, r3
 800b14e:	2203      	movs	r2, #3
 800b150:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	225d      	movs	r2, #93	@ 0x5d
 800b156:	2101      	movs	r1, #1
 800b158:	5499      	strb	r1, [r3, r2]
          goto error;
 800b15a:	e02b      	b.n	800b1b4 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b160:	b29b      	uxth	r3, r3
 800b162:	2b00      	cmp	r3, #0
 800b164:	d1c8      	bne.n	800b0f8 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b166:	69ba      	ldr	r2, [r7, #24]
 800b168:	6839      	ldr	r1, [r7, #0]
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	0018      	movs	r0, r3
 800b16e:	f000 f95d 	bl	800b42c <SPI_EndRxTxTransaction>
 800b172:	1e03      	subs	r3, r0, #0
 800b174:	d002      	beq.n	800b17c <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	2220      	movs	r2, #32
 800b17a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	689b      	ldr	r3, [r3, #8]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d10a      	bne.n	800b19a <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b184:	2300      	movs	r3, #0
 800b186:	613b      	str	r3, [r7, #16]
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	68db      	ldr	r3, [r3, #12]
 800b18e:	613b      	str	r3, [r7, #16]
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	689b      	ldr	r3, [r3, #8]
 800b196:	613b      	str	r3, [r7, #16]
 800b198:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d004      	beq.n	800b1ac <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 800b1a2:	231f      	movs	r3, #31
 800b1a4:	18fb      	adds	r3, r7, r3
 800b1a6:	2201      	movs	r2, #1
 800b1a8:	701a      	strb	r2, [r3, #0]
 800b1aa:	e003      	b.n	800b1b4 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	225d      	movs	r2, #93	@ 0x5d
 800b1b0:	2101      	movs	r1, #1
 800b1b2:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	225c      	movs	r2, #92	@ 0x5c
 800b1b8:	2100      	movs	r1, #0
 800b1ba:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800b1bc:	231f      	movs	r3, #31
 800b1be:	18fb      	adds	r3, r7, r3
 800b1c0:	781b      	ldrb	r3, [r3, #0]
}
 800b1c2:	0018      	movs	r0, r3
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	b008      	add	sp, #32
 800b1c8:	bd80      	pop	{r7, pc}
	...

0800b1cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b088      	sub	sp, #32
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	60f8      	str	r0, [r7, #12]
 800b1d4:	60b9      	str	r1, [r7, #8]
 800b1d6:	603b      	str	r3, [r7, #0]
 800b1d8:	1dfb      	adds	r3, r7, #7
 800b1da:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b1dc:	f7fc ff32 	bl	8008044 <HAL_GetTick>
 800b1e0:	0002      	movs	r2, r0
 800b1e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1e4:	1a9b      	subs	r3, r3, r2
 800b1e6:	683a      	ldr	r2, [r7, #0]
 800b1e8:	18d3      	adds	r3, r2, r3
 800b1ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b1ec:	f7fc ff2a 	bl	8008044 <HAL_GetTick>
 800b1f0:	0003      	movs	r3, r0
 800b1f2:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b1f4:	4b3a      	ldr	r3, [pc, #232]	@ (800b2e0 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	015b      	lsls	r3, r3, #5
 800b1fa:	0d1b      	lsrs	r3, r3, #20
 800b1fc:	69fa      	ldr	r2, [r7, #28]
 800b1fe:	4353      	muls	r3, r2
 800b200:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b202:	e058      	b.n	800b2b6 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b204:	683b      	ldr	r3, [r7, #0]
 800b206:	3301      	adds	r3, #1
 800b208:	d055      	beq.n	800b2b6 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b20a:	f7fc ff1b 	bl	8008044 <HAL_GetTick>
 800b20e:	0002      	movs	r2, r0
 800b210:	69bb      	ldr	r3, [r7, #24]
 800b212:	1ad3      	subs	r3, r2, r3
 800b214:	69fa      	ldr	r2, [r7, #28]
 800b216:	429a      	cmp	r2, r3
 800b218:	d902      	bls.n	800b220 <SPI_WaitFlagStateUntilTimeout+0x54>
 800b21a:	69fb      	ldr	r3, [r7, #28]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d142      	bne.n	800b2a6 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	685a      	ldr	r2, [r3, #4]
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	21e0      	movs	r1, #224	@ 0xe0
 800b22c:	438a      	bics	r2, r1
 800b22e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	685a      	ldr	r2, [r3, #4]
 800b234:	2382      	movs	r3, #130	@ 0x82
 800b236:	005b      	lsls	r3, r3, #1
 800b238:	429a      	cmp	r2, r3
 800b23a:	d113      	bne.n	800b264 <SPI_WaitFlagStateUntilTimeout+0x98>
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	689a      	ldr	r2, [r3, #8]
 800b240:	2380      	movs	r3, #128	@ 0x80
 800b242:	021b      	lsls	r3, r3, #8
 800b244:	429a      	cmp	r2, r3
 800b246:	d005      	beq.n	800b254 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	689a      	ldr	r2, [r3, #8]
 800b24c:	2380      	movs	r3, #128	@ 0x80
 800b24e:	00db      	lsls	r3, r3, #3
 800b250:	429a      	cmp	r2, r3
 800b252:	d107      	bne.n	800b264 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	681a      	ldr	r2, [r3, #0]
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	2140      	movs	r1, #64	@ 0x40
 800b260:	438a      	bics	r2, r1
 800b262:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b268:	2380      	movs	r3, #128	@ 0x80
 800b26a:	019b      	lsls	r3, r3, #6
 800b26c:	429a      	cmp	r2, r3
 800b26e:	d110      	bne.n	800b292 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	681a      	ldr	r2, [r3, #0]
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	491a      	ldr	r1, [pc, #104]	@ (800b2e4 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800b27c:	400a      	ands	r2, r1
 800b27e:	601a      	str	r2, [r3, #0]
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	681a      	ldr	r2, [r3, #0]
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	2180      	movs	r1, #128	@ 0x80
 800b28c:	0189      	lsls	r1, r1, #6
 800b28e:	430a      	orrs	r2, r1
 800b290:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	225d      	movs	r2, #93	@ 0x5d
 800b296:	2101      	movs	r1, #1
 800b298:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	225c      	movs	r2, #92	@ 0x5c
 800b29e:	2100      	movs	r1, #0
 800b2a0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800b2a2:	2303      	movs	r3, #3
 800b2a4:	e017      	b.n	800b2d6 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b2a6:	697b      	ldr	r3, [r7, #20]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d101      	bne.n	800b2b0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b2b0:	697b      	ldr	r3, [r7, #20]
 800b2b2:	3b01      	subs	r3, #1
 800b2b4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	689b      	ldr	r3, [r3, #8]
 800b2bc:	68ba      	ldr	r2, [r7, #8]
 800b2be:	4013      	ands	r3, r2
 800b2c0:	68ba      	ldr	r2, [r7, #8]
 800b2c2:	1ad3      	subs	r3, r2, r3
 800b2c4:	425a      	negs	r2, r3
 800b2c6:	4153      	adcs	r3, r2
 800b2c8:	b2db      	uxtb	r3, r3
 800b2ca:	001a      	movs	r2, r3
 800b2cc:	1dfb      	adds	r3, r7, #7
 800b2ce:	781b      	ldrb	r3, [r3, #0]
 800b2d0:	429a      	cmp	r2, r3
 800b2d2:	d197      	bne.n	800b204 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b2d4:	2300      	movs	r3, #0
}
 800b2d6:	0018      	movs	r0, r3
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	b008      	add	sp, #32
 800b2dc:	bd80      	pop	{r7, pc}
 800b2de:	46c0      	nop			@ (mov r8, r8)
 800b2e0:	200009c8 	.word	0x200009c8
 800b2e4:	ffffdfff 	.word	0xffffdfff

0800b2e8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b08a      	sub	sp, #40	@ 0x28
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	60f8      	str	r0, [r7, #12]
 800b2f0:	60b9      	str	r1, [r7, #8]
 800b2f2:	607a      	str	r2, [r7, #4]
 800b2f4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800b2f6:	2317      	movs	r3, #23
 800b2f8:	18fb      	adds	r3, r7, r3
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800b2fe:	f7fc fea1 	bl	8008044 <HAL_GetTick>
 800b302:	0002      	movs	r2, r0
 800b304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b306:	1a9b      	subs	r3, r3, r2
 800b308:	683a      	ldr	r2, [r7, #0]
 800b30a:	18d3      	adds	r3, r2, r3
 800b30c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800b30e:	f7fc fe99 	bl	8008044 <HAL_GetTick>
 800b312:	0003      	movs	r3, r0
 800b314:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	330c      	adds	r3, #12
 800b31c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800b31e:	4b41      	ldr	r3, [pc, #260]	@ (800b424 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 800b320:	681a      	ldr	r2, [r3, #0]
 800b322:	0013      	movs	r3, r2
 800b324:	009b      	lsls	r3, r3, #2
 800b326:	189b      	adds	r3, r3, r2
 800b328:	00da      	lsls	r2, r3, #3
 800b32a:	1ad3      	subs	r3, r2, r3
 800b32c:	0d1b      	lsrs	r3, r3, #20
 800b32e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b330:	4353      	muls	r3, r2
 800b332:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800b334:	e068      	b.n	800b408 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800b336:	68ba      	ldr	r2, [r7, #8]
 800b338:	23c0      	movs	r3, #192	@ 0xc0
 800b33a:	00db      	lsls	r3, r3, #3
 800b33c:	429a      	cmp	r2, r3
 800b33e:	d10a      	bne.n	800b356 <SPI_WaitFifoStateUntilTimeout+0x6e>
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d107      	bne.n	800b356 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800b346:	69fb      	ldr	r3, [r7, #28]
 800b348:	781b      	ldrb	r3, [r3, #0]
 800b34a:	b2da      	uxtb	r2, r3
 800b34c:	2117      	movs	r1, #23
 800b34e:	187b      	adds	r3, r7, r1
 800b350:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800b352:	187b      	adds	r3, r7, r1
 800b354:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	3301      	adds	r3, #1
 800b35a:	d055      	beq.n	800b408 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b35c:	f7fc fe72 	bl	8008044 <HAL_GetTick>
 800b360:	0002      	movs	r2, r0
 800b362:	6a3b      	ldr	r3, [r7, #32]
 800b364:	1ad3      	subs	r3, r2, r3
 800b366:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b368:	429a      	cmp	r2, r3
 800b36a:	d902      	bls.n	800b372 <SPI_WaitFifoStateUntilTimeout+0x8a>
 800b36c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d142      	bne.n	800b3f8 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	685a      	ldr	r2, [r3, #4]
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	21e0      	movs	r1, #224	@ 0xe0
 800b37e:	438a      	bics	r2, r1
 800b380:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	685a      	ldr	r2, [r3, #4]
 800b386:	2382      	movs	r3, #130	@ 0x82
 800b388:	005b      	lsls	r3, r3, #1
 800b38a:	429a      	cmp	r2, r3
 800b38c:	d113      	bne.n	800b3b6 <SPI_WaitFifoStateUntilTimeout+0xce>
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	689a      	ldr	r2, [r3, #8]
 800b392:	2380      	movs	r3, #128	@ 0x80
 800b394:	021b      	lsls	r3, r3, #8
 800b396:	429a      	cmp	r2, r3
 800b398:	d005      	beq.n	800b3a6 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	689a      	ldr	r2, [r3, #8]
 800b39e:	2380      	movs	r3, #128	@ 0x80
 800b3a0:	00db      	lsls	r3, r3, #3
 800b3a2:	429a      	cmp	r2, r3
 800b3a4:	d107      	bne.n	800b3b6 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	681a      	ldr	r2, [r3, #0]
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	2140      	movs	r1, #64	@ 0x40
 800b3b2:	438a      	bics	r2, r1
 800b3b4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b3ba:	2380      	movs	r3, #128	@ 0x80
 800b3bc:	019b      	lsls	r3, r3, #6
 800b3be:	429a      	cmp	r2, r3
 800b3c0:	d110      	bne.n	800b3e4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	681a      	ldr	r2, [r3, #0]
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	4916      	ldr	r1, [pc, #88]	@ (800b428 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800b3ce:	400a      	ands	r2, r1
 800b3d0:	601a      	str	r2, [r3, #0]
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	681a      	ldr	r2, [r3, #0]
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	2180      	movs	r1, #128	@ 0x80
 800b3de:	0189      	lsls	r1, r1, #6
 800b3e0:	430a      	orrs	r2, r1
 800b3e2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	225d      	movs	r2, #93	@ 0x5d
 800b3e8:	2101      	movs	r1, #1
 800b3ea:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	225c      	movs	r2, #92	@ 0x5c
 800b3f0:	2100      	movs	r1, #0
 800b3f2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800b3f4:	2303      	movs	r3, #3
 800b3f6:	e010      	b.n	800b41a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b3f8:	69bb      	ldr	r3, [r7, #24]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d101      	bne.n	800b402 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800b3fe:	2300      	movs	r3, #0
 800b400:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800b402:	69bb      	ldr	r3, [r7, #24]
 800b404:	3b01      	subs	r3, #1
 800b406:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	689b      	ldr	r3, [r3, #8]
 800b40e:	68ba      	ldr	r2, [r7, #8]
 800b410:	4013      	ands	r3, r2
 800b412:	687a      	ldr	r2, [r7, #4]
 800b414:	429a      	cmp	r2, r3
 800b416:	d18e      	bne.n	800b336 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800b418:	2300      	movs	r3, #0
}
 800b41a:	0018      	movs	r0, r3
 800b41c:	46bd      	mov	sp, r7
 800b41e:	b00a      	add	sp, #40	@ 0x28
 800b420:	bd80      	pop	{r7, pc}
 800b422:	46c0      	nop			@ (mov r8, r8)
 800b424:	200009c8 	.word	0x200009c8
 800b428:	ffffdfff 	.word	0xffffdfff

0800b42c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b086      	sub	sp, #24
 800b430:	af02      	add	r7, sp, #8
 800b432:	60f8      	str	r0, [r7, #12]
 800b434:	60b9      	str	r1, [r7, #8]
 800b436:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b438:	68ba      	ldr	r2, [r7, #8]
 800b43a:	23c0      	movs	r3, #192	@ 0xc0
 800b43c:	0159      	lsls	r1, r3, #5
 800b43e:	68f8      	ldr	r0, [r7, #12]
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	9300      	str	r3, [sp, #0]
 800b444:	0013      	movs	r3, r2
 800b446:	2200      	movs	r2, #0
 800b448:	f7ff ff4e 	bl	800b2e8 <SPI_WaitFifoStateUntilTimeout>
 800b44c:	1e03      	subs	r3, r0, #0
 800b44e:	d007      	beq.n	800b460 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b454:	2220      	movs	r2, #32
 800b456:	431a      	orrs	r2, r3
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800b45c:	2303      	movs	r3, #3
 800b45e:	e027      	b.n	800b4b0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b460:	68ba      	ldr	r2, [r7, #8]
 800b462:	68f8      	ldr	r0, [r7, #12]
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	9300      	str	r3, [sp, #0]
 800b468:	0013      	movs	r3, r2
 800b46a:	2200      	movs	r2, #0
 800b46c:	2180      	movs	r1, #128	@ 0x80
 800b46e:	f7ff fead 	bl	800b1cc <SPI_WaitFlagStateUntilTimeout>
 800b472:	1e03      	subs	r3, r0, #0
 800b474:	d007      	beq.n	800b486 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b47a:	2220      	movs	r2, #32
 800b47c:	431a      	orrs	r2, r3
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800b482:	2303      	movs	r3, #3
 800b484:	e014      	b.n	800b4b0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b486:	68ba      	ldr	r2, [r7, #8]
 800b488:	23c0      	movs	r3, #192	@ 0xc0
 800b48a:	00d9      	lsls	r1, r3, #3
 800b48c:	68f8      	ldr	r0, [r7, #12]
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	9300      	str	r3, [sp, #0]
 800b492:	0013      	movs	r3, r2
 800b494:	2200      	movs	r2, #0
 800b496:	f7ff ff27 	bl	800b2e8 <SPI_WaitFifoStateUntilTimeout>
 800b49a:	1e03      	subs	r3, r0, #0
 800b49c:	d007      	beq.n	800b4ae <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b4a2:	2220      	movs	r2, #32
 800b4a4:	431a      	orrs	r2, r3
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800b4aa:	2303      	movs	r3, #3
 800b4ac:	e000      	b.n	800b4b0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800b4ae:	2300      	movs	r3, #0
}
 800b4b0:	0018      	movs	r0, r3
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	b004      	add	sp, #16
 800b4b6:	bd80      	pop	{r7, pc}

0800b4b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b082      	sub	sp, #8
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d101      	bne.n	800b4ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b4c6:	2301      	movs	r3, #1
 800b4c8:	e04a      	b.n	800b560 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	223d      	movs	r2, #61	@ 0x3d
 800b4ce:	5c9b      	ldrb	r3, [r3, r2]
 800b4d0:	b2db      	uxtb	r3, r3
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d107      	bne.n	800b4e6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	223c      	movs	r2, #60	@ 0x3c
 800b4da:	2100      	movs	r1, #0
 800b4dc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	0018      	movs	r0, r3
 800b4e2:	f7fb fdb1 	bl	8007048 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	223d      	movs	r2, #61	@ 0x3d
 800b4ea:	2102      	movs	r1, #2
 800b4ec:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681a      	ldr	r2, [r3, #0]
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	3304      	adds	r3, #4
 800b4f6:	0019      	movs	r1, r3
 800b4f8:	0010      	movs	r0, r2
 800b4fa:	f000 fb11 	bl	800bb20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	2248      	movs	r2, #72	@ 0x48
 800b502:	2101      	movs	r1, #1
 800b504:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	223e      	movs	r2, #62	@ 0x3e
 800b50a:	2101      	movs	r1, #1
 800b50c:	5499      	strb	r1, [r3, r2]
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	223f      	movs	r2, #63	@ 0x3f
 800b512:	2101      	movs	r1, #1
 800b514:	5499      	strb	r1, [r3, r2]
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	2240      	movs	r2, #64	@ 0x40
 800b51a:	2101      	movs	r1, #1
 800b51c:	5499      	strb	r1, [r3, r2]
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	2241      	movs	r2, #65	@ 0x41
 800b522:	2101      	movs	r1, #1
 800b524:	5499      	strb	r1, [r3, r2]
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	2242      	movs	r2, #66	@ 0x42
 800b52a:	2101      	movs	r1, #1
 800b52c:	5499      	strb	r1, [r3, r2]
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	2243      	movs	r2, #67	@ 0x43
 800b532:	2101      	movs	r1, #1
 800b534:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	2244      	movs	r2, #68	@ 0x44
 800b53a:	2101      	movs	r1, #1
 800b53c:	5499      	strb	r1, [r3, r2]
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	2245      	movs	r2, #69	@ 0x45
 800b542:	2101      	movs	r1, #1
 800b544:	5499      	strb	r1, [r3, r2]
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	2246      	movs	r2, #70	@ 0x46
 800b54a:	2101      	movs	r1, #1
 800b54c:	5499      	strb	r1, [r3, r2]
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	2247      	movs	r2, #71	@ 0x47
 800b552:	2101      	movs	r1, #1
 800b554:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	223d      	movs	r2, #61	@ 0x3d
 800b55a:	2101      	movs	r1, #1
 800b55c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b55e:	2300      	movs	r3, #0
}
 800b560:	0018      	movs	r0, r3
 800b562:	46bd      	mov	sp, r7
 800b564:	b002      	add	sp, #8
 800b566:	bd80      	pop	{r7, pc}

0800b568 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b082      	sub	sp, #8
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d101      	bne.n	800b57a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b576:	2301      	movs	r3, #1
 800b578:	e04a      	b.n	800b610 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	223d      	movs	r2, #61	@ 0x3d
 800b57e:	5c9b      	ldrb	r3, [r3, r2]
 800b580:	b2db      	uxtb	r3, r3
 800b582:	2b00      	cmp	r3, #0
 800b584:	d107      	bne.n	800b596 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	223c      	movs	r2, #60	@ 0x3c
 800b58a:	2100      	movs	r1, #0
 800b58c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	0018      	movs	r0, r3
 800b592:	f000 f841 	bl	800b618 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	223d      	movs	r2, #61	@ 0x3d
 800b59a:	2102      	movs	r1, #2
 800b59c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681a      	ldr	r2, [r3, #0]
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	3304      	adds	r3, #4
 800b5a6:	0019      	movs	r1, r3
 800b5a8:	0010      	movs	r0, r2
 800b5aa:	f000 fab9 	bl	800bb20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	2248      	movs	r2, #72	@ 0x48
 800b5b2:	2101      	movs	r1, #1
 800b5b4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	223e      	movs	r2, #62	@ 0x3e
 800b5ba:	2101      	movs	r1, #1
 800b5bc:	5499      	strb	r1, [r3, r2]
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	223f      	movs	r2, #63	@ 0x3f
 800b5c2:	2101      	movs	r1, #1
 800b5c4:	5499      	strb	r1, [r3, r2]
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	2240      	movs	r2, #64	@ 0x40
 800b5ca:	2101      	movs	r1, #1
 800b5cc:	5499      	strb	r1, [r3, r2]
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	2241      	movs	r2, #65	@ 0x41
 800b5d2:	2101      	movs	r1, #1
 800b5d4:	5499      	strb	r1, [r3, r2]
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	2242      	movs	r2, #66	@ 0x42
 800b5da:	2101      	movs	r1, #1
 800b5dc:	5499      	strb	r1, [r3, r2]
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	2243      	movs	r2, #67	@ 0x43
 800b5e2:	2101      	movs	r1, #1
 800b5e4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	2244      	movs	r2, #68	@ 0x44
 800b5ea:	2101      	movs	r1, #1
 800b5ec:	5499      	strb	r1, [r3, r2]
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	2245      	movs	r2, #69	@ 0x45
 800b5f2:	2101      	movs	r1, #1
 800b5f4:	5499      	strb	r1, [r3, r2]
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	2246      	movs	r2, #70	@ 0x46
 800b5fa:	2101      	movs	r1, #1
 800b5fc:	5499      	strb	r1, [r3, r2]
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	2247      	movs	r2, #71	@ 0x47
 800b602:	2101      	movs	r1, #1
 800b604:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	223d      	movs	r2, #61	@ 0x3d
 800b60a:	2101      	movs	r1, #1
 800b60c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b60e:	2300      	movs	r3, #0
}
 800b610:	0018      	movs	r0, r3
 800b612:	46bd      	mov	sp, r7
 800b614:	b002      	add	sp, #8
 800b616:	bd80      	pop	{r7, pc}

0800b618 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b618:	b580      	push	{r7, lr}
 800b61a:	b082      	sub	sp, #8
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b620:	46c0      	nop			@ (mov r8, r8)
 800b622:	46bd      	mov	sp, r7
 800b624:	b002      	add	sp, #8
 800b626:	bd80      	pop	{r7, pc}

0800b628 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b084      	sub	sp, #16
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	6078      	str	r0, [r7, #4]
 800b630:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b632:	683b      	ldr	r3, [r7, #0]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d108      	bne.n	800b64a <HAL_TIM_PWM_Start+0x22>
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	223e      	movs	r2, #62	@ 0x3e
 800b63c:	5c9b      	ldrb	r3, [r3, r2]
 800b63e:	b2db      	uxtb	r3, r3
 800b640:	3b01      	subs	r3, #1
 800b642:	1e5a      	subs	r2, r3, #1
 800b644:	4193      	sbcs	r3, r2
 800b646:	b2db      	uxtb	r3, r3
 800b648:	e037      	b.n	800b6ba <HAL_TIM_PWM_Start+0x92>
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	2b04      	cmp	r3, #4
 800b64e:	d108      	bne.n	800b662 <HAL_TIM_PWM_Start+0x3a>
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	223f      	movs	r2, #63	@ 0x3f
 800b654:	5c9b      	ldrb	r3, [r3, r2]
 800b656:	b2db      	uxtb	r3, r3
 800b658:	3b01      	subs	r3, #1
 800b65a:	1e5a      	subs	r2, r3, #1
 800b65c:	4193      	sbcs	r3, r2
 800b65e:	b2db      	uxtb	r3, r3
 800b660:	e02b      	b.n	800b6ba <HAL_TIM_PWM_Start+0x92>
 800b662:	683b      	ldr	r3, [r7, #0]
 800b664:	2b08      	cmp	r3, #8
 800b666:	d108      	bne.n	800b67a <HAL_TIM_PWM_Start+0x52>
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	2240      	movs	r2, #64	@ 0x40
 800b66c:	5c9b      	ldrb	r3, [r3, r2]
 800b66e:	b2db      	uxtb	r3, r3
 800b670:	3b01      	subs	r3, #1
 800b672:	1e5a      	subs	r2, r3, #1
 800b674:	4193      	sbcs	r3, r2
 800b676:	b2db      	uxtb	r3, r3
 800b678:	e01f      	b.n	800b6ba <HAL_TIM_PWM_Start+0x92>
 800b67a:	683b      	ldr	r3, [r7, #0]
 800b67c:	2b0c      	cmp	r3, #12
 800b67e:	d108      	bne.n	800b692 <HAL_TIM_PWM_Start+0x6a>
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	2241      	movs	r2, #65	@ 0x41
 800b684:	5c9b      	ldrb	r3, [r3, r2]
 800b686:	b2db      	uxtb	r3, r3
 800b688:	3b01      	subs	r3, #1
 800b68a:	1e5a      	subs	r2, r3, #1
 800b68c:	4193      	sbcs	r3, r2
 800b68e:	b2db      	uxtb	r3, r3
 800b690:	e013      	b.n	800b6ba <HAL_TIM_PWM_Start+0x92>
 800b692:	683b      	ldr	r3, [r7, #0]
 800b694:	2b10      	cmp	r3, #16
 800b696:	d108      	bne.n	800b6aa <HAL_TIM_PWM_Start+0x82>
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	2242      	movs	r2, #66	@ 0x42
 800b69c:	5c9b      	ldrb	r3, [r3, r2]
 800b69e:	b2db      	uxtb	r3, r3
 800b6a0:	3b01      	subs	r3, #1
 800b6a2:	1e5a      	subs	r2, r3, #1
 800b6a4:	4193      	sbcs	r3, r2
 800b6a6:	b2db      	uxtb	r3, r3
 800b6a8:	e007      	b.n	800b6ba <HAL_TIM_PWM_Start+0x92>
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	2243      	movs	r2, #67	@ 0x43
 800b6ae:	5c9b      	ldrb	r3, [r3, r2]
 800b6b0:	b2db      	uxtb	r3, r3
 800b6b2:	3b01      	subs	r3, #1
 800b6b4:	1e5a      	subs	r2, r3, #1
 800b6b6:	4193      	sbcs	r3, r2
 800b6b8:	b2db      	uxtb	r3, r3
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d001      	beq.n	800b6c2 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800b6be:	2301      	movs	r3, #1
 800b6c0:	e090      	b.n	800b7e4 <HAL_TIM_PWM_Start+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b6c2:	683b      	ldr	r3, [r7, #0]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d104      	bne.n	800b6d2 <HAL_TIM_PWM_Start+0xaa>
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	223e      	movs	r2, #62	@ 0x3e
 800b6cc:	2102      	movs	r1, #2
 800b6ce:	5499      	strb	r1, [r3, r2]
 800b6d0:	e023      	b.n	800b71a <HAL_TIM_PWM_Start+0xf2>
 800b6d2:	683b      	ldr	r3, [r7, #0]
 800b6d4:	2b04      	cmp	r3, #4
 800b6d6:	d104      	bne.n	800b6e2 <HAL_TIM_PWM_Start+0xba>
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	223f      	movs	r2, #63	@ 0x3f
 800b6dc:	2102      	movs	r1, #2
 800b6de:	5499      	strb	r1, [r3, r2]
 800b6e0:	e01b      	b.n	800b71a <HAL_TIM_PWM_Start+0xf2>
 800b6e2:	683b      	ldr	r3, [r7, #0]
 800b6e4:	2b08      	cmp	r3, #8
 800b6e6:	d104      	bne.n	800b6f2 <HAL_TIM_PWM_Start+0xca>
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	2240      	movs	r2, #64	@ 0x40
 800b6ec:	2102      	movs	r1, #2
 800b6ee:	5499      	strb	r1, [r3, r2]
 800b6f0:	e013      	b.n	800b71a <HAL_TIM_PWM_Start+0xf2>
 800b6f2:	683b      	ldr	r3, [r7, #0]
 800b6f4:	2b0c      	cmp	r3, #12
 800b6f6:	d104      	bne.n	800b702 <HAL_TIM_PWM_Start+0xda>
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	2241      	movs	r2, #65	@ 0x41
 800b6fc:	2102      	movs	r1, #2
 800b6fe:	5499      	strb	r1, [r3, r2]
 800b700:	e00b      	b.n	800b71a <HAL_TIM_PWM_Start+0xf2>
 800b702:	683b      	ldr	r3, [r7, #0]
 800b704:	2b10      	cmp	r3, #16
 800b706:	d104      	bne.n	800b712 <HAL_TIM_PWM_Start+0xea>
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	2242      	movs	r2, #66	@ 0x42
 800b70c:	2102      	movs	r1, #2
 800b70e:	5499      	strb	r1, [r3, r2]
 800b710:	e003      	b.n	800b71a <HAL_TIM_PWM_Start+0xf2>
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	2243      	movs	r2, #67	@ 0x43
 800b716:	2102      	movs	r1, #2
 800b718:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	6839      	ldr	r1, [r7, #0]
 800b720:	2201      	movs	r2, #1
 800b722:	0018      	movs	r0, r3
 800b724:	f000 fd58 	bl	800c1d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	4a2f      	ldr	r2, [pc, #188]	@ (800b7ec <HAL_TIM_PWM_Start+0x1c4>)
 800b72e:	4293      	cmp	r3, r2
 800b730:	d00e      	beq.n	800b750 <HAL_TIM_PWM_Start+0x128>
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	4a2e      	ldr	r2, [pc, #184]	@ (800b7f0 <HAL_TIM_PWM_Start+0x1c8>)
 800b738:	4293      	cmp	r3, r2
 800b73a:	d009      	beq.n	800b750 <HAL_TIM_PWM_Start+0x128>
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	4a2c      	ldr	r2, [pc, #176]	@ (800b7f4 <HAL_TIM_PWM_Start+0x1cc>)
 800b742:	4293      	cmp	r3, r2
 800b744:	d004      	beq.n	800b750 <HAL_TIM_PWM_Start+0x128>
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	4a2b      	ldr	r2, [pc, #172]	@ (800b7f8 <HAL_TIM_PWM_Start+0x1d0>)
 800b74c:	4293      	cmp	r3, r2
 800b74e:	d101      	bne.n	800b754 <HAL_TIM_PWM_Start+0x12c>
 800b750:	2301      	movs	r3, #1
 800b752:	e000      	b.n	800b756 <HAL_TIM_PWM_Start+0x12e>
 800b754:	2300      	movs	r3, #0
 800b756:	2b00      	cmp	r3, #0
 800b758:	d008      	beq.n	800b76c <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	2180      	movs	r1, #128	@ 0x80
 800b766:	0209      	lsls	r1, r1, #8
 800b768:	430a      	orrs	r2, r1
 800b76a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	4a1e      	ldr	r2, [pc, #120]	@ (800b7ec <HAL_TIM_PWM_Start+0x1c4>)
 800b772:	4293      	cmp	r3, r2
 800b774:	d014      	beq.n	800b7a0 <HAL_TIM_PWM_Start+0x178>
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681a      	ldr	r2, [r3, #0]
 800b77a:	2380      	movs	r3, #128	@ 0x80
 800b77c:	05db      	lsls	r3, r3, #23
 800b77e:	429a      	cmp	r2, r3
 800b780:	d00e      	beq.n	800b7a0 <HAL_TIM_PWM_Start+0x178>
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	4a1d      	ldr	r2, [pc, #116]	@ (800b7fc <HAL_TIM_PWM_Start+0x1d4>)
 800b788:	4293      	cmp	r3, r2
 800b78a:	d009      	beq.n	800b7a0 <HAL_TIM_PWM_Start+0x178>
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	4a1b      	ldr	r2, [pc, #108]	@ (800b800 <HAL_TIM_PWM_Start+0x1d8>)
 800b792:	4293      	cmp	r3, r2
 800b794:	d004      	beq.n	800b7a0 <HAL_TIM_PWM_Start+0x178>
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	4a15      	ldr	r2, [pc, #84]	@ (800b7f0 <HAL_TIM_PWM_Start+0x1c8>)
 800b79c:	4293      	cmp	r3, r2
 800b79e:	d116      	bne.n	800b7ce <HAL_TIM_PWM_Start+0x1a6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	689b      	ldr	r3, [r3, #8]
 800b7a6:	4a17      	ldr	r2, [pc, #92]	@ (800b804 <HAL_TIM_PWM_Start+0x1dc>)
 800b7a8:	4013      	ands	r3, r2
 800b7aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	2b06      	cmp	r3, #6
 800b7b0:	d016      	beq.n	800b7e0 <HAL_TIM_PWM_Start+0x1b8>
 800b7b2:	68fa      	ldr	r2, [r7, #12]
 800b7b4:	2380      	movs	r3, #128	@ 0x80
 800b7b6:	025b      	lsls	r3, r3, #9
 800b7b8:	429a      	cmp	r2, r3
 800b7ba:	d011      	beq.n	800b7e0 <HAL_TIM_PWM_Start+0x1b8>
    {
      __HAL_TIM_ENABLE(htim);
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	681a      	ldr	r2, [r3, #0]
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	2101      	movs	r1, #1
 800b7c8:	430a      	orrs	r2, r1
 800b7ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b7cc:	e008      	b.n	800b7e0 <HAL_TIM_PWM_Start+0x1b8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	681a      	ldr	r2, [r3, #0]
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	2101      	movs	r1, #1
 800b7da:	430a      	orrs	r2, r1
 800b7dc:	601a      	str	r2, [r3, #0]
 800b7de:	e000      	b.n	800b7e2 <HAL_TIM_PWM_Start+0x1ba>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b7e0:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800b7e2:	2300      	movs	r3, #0
}
 800b7e4:	0018      	movs	r0, r3
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	b004      	add	sp, #16
 800b7ea:	bd80      	pop	{r7, pc}
 800b7ec:	40012c00 	.word	0x40012c00
 800b7f0:	40014000 	.word	0x40014000
 800b7f4:	40014400 	.word	0x40014400
 800b7f8:	40014800 	.word	0x40014800
 800b7fc:	40000400 	.word	0x40000400
 800b800:	40000800 	.word	0x40000800
 800b804:	00010007 	.word	0x00010007

0800b808 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b082      	sub	sp, #8
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]
 800b810:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	6839      	ldr	r1, [r7, #0]
 800b818:	2200      	movs	r2, #0
 800b81a:	0018      	movs	r0, r3
 800b81c:	f000 fcdc 	bl	800c1d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	4a37      	ldr	r2, [pc, #220]	@ (800b904 <HAL_TIM_PWM_Stop+0xfc>)
 800b826:	4293      	cmp	r3, r2
 800b828:	d00e      	beq.n	800b848 <HAL_TIM_PWM_Stop+0x40>
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	4a36      	ldr	r2, [pc, #216]	@ (800b908 <HAL_TIM_PWM_Stop+0x100>)
 800b830:	4293      	cmp	r3, r2
 800b832:	d009      	beq.n	800b848 <HAL_TIM_PWM_Stop+0x40>
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	4a34      	ldr	r2, [pc, #208]	@ (800b90c <HAL_TIM_PWM_Stop+0x104>)
 800b83a:	4293      	cmp	r3, r2
 800b83c:	d004      	beq.n	800b848 <HAL_TIM_PWM_Stop+0x40>
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	4a33      	ldr	r2, [pc, #204]	@ (800b910 <HAL_TIM_PWM_Stop+0x108>)
 800b844:	4293      	cmp	r3, r2
 800b846:	d101      	bne.n	800b84c <HAL_TIM_PWM_Stop+0x44>
 800b848:	2301      	movs	r3, #1
 800b84a:	e000      	b.n	800b84e <HAL_TIM_PWM_Stop+0x46>
 800b84c:	2300      	movs	r3, #0
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d013      	beq.n	800b87a <HAL_TIM_PWM_Stop+0x72>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	6a1b      	ldr	r3, [r3, #32]
 800b858:	4a2e      	ldr	r2, [pc, #184]	@ (800b914 <HAL_TIM_PWM_Stop+0x10c>)
 800b85a:	4013      	ands	r3, r2
 800b85c:	d10d      	bne.n	800b87a <HAL_TIM_PWM_Stop+0x72>
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	6a1b      	ldr	r3, [r3, #32]
 800b864:	4a2c      	ldr	r2, [pc, #176]	@ (800b918 <HAL_TIM_PWM_Stop+0x110>)
 800b866:	4013      	ands	r3, r2
 800b868:	d107      	bne.n	800b87a <HAL_TIM_PWM_Stop+0x72>
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	4929      	ldr	r1, [pc, #164]	@ (800b91c <HAL_TIM_PWM_Stop+0x114>)
 800b876:	400a      	ands	r2, r1
 800b878:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	6a1b      	ldr	r3, [r3, #32]
 800b880:	4a24      	ldr	r2, [pc, #144]	@ (800b914 <HAL_TIM_PWM_Stop+0x10c>)
 800b882:	4013      	ands	r3, r2
 800b884:	d10d      	bne.n	800b8a2 <HAL_TIM_PWM_Stop+0x9a>
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	6a1b      	ldr	r3, [r3, #32]
 800b88c:	4a22      	ldr	r2, [pc, #136]	@ (800b918 <HAL_TIM_PWM_Stop+0x110>)
 800b88e:	4013      	ands	r3, r2
 800b890:	d107      	bne.n	800b8a2 <HAL_TIM_PWM_Stop+0x9a>
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	681a      	ldr	r2, [r3, #0]
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	2101      	movs	r1, #1
 800b89e:	438a      	bics	r2, r1
 800b8a0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800b8a2:	683b      	ldr	r3, [r7, #0]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d104      	bne.n	800b8b2 <HAL_TIM_PWM_Stop+0xaa>
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	223e      	movs	r2, #62	@ 0x3e
 800b8ac:	2101      	movs	r1, #1
 800b8ae:	5499      	strb	r1, [r3, r2]
 800b8b0:	e023      	b.n	800b8fa <HAL_TIM_PWM_Stop+0xf2>
 800b8b2:	683b      	ldr	r3, [r7, #0]
 800b8b4:	2b04      	cmp	r3, #4
 800b8b6:	d104      	bne.n	800b8c2 <HAL_TIM_PWM_Stop+0xba>
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	223f      	movs	r2, #63	@ 0x3f
 800b8bc:	2101      	movs	r1, #1
 800b8be:	5499      	strb	r1, [r3, r2]
 800b8c0:	e01b      	b.n	800b8fa <HAL_TIM_PWM_Stop+0xf2>
 800b8c2:	683b      	ldr	r3, [r7, #0]
 800b8c4:	2b08      	cmp	r3, #8
 800b8c6:	d104      	bne.n	800b8d2 <HAL_TIM_PWM_Stop+0xca>
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	2240      	movs	r2, #64	@ 0x40
 800b8cc:	2101      	movs	r1, #1
 800b8ce:	5499      	strb	r1, [r3, r2]
 800b8d0:	e013      	b.n	800b8fa <HAL_TIM_PWM_Stop+0xf2>
 800b8d2:	683b      	ldr	r3, [r7, #0]
 800b8d4:	2b0c      	cmp	r3, #12
 800b8d6:	d104      	bne.n	800b8e2 <HAL_TIM_PWM_Stop+0xda>
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	2241      	movs	r2, #65	@ 0x41
 800b8dc:	2101      	movs	r1, #1
 800b8de:	5499      	strb	r1, [r3, r2]
 800b8e0:	e00b      	b.n	800b8fa <HAL_TIM_PWM_Stop+0xf2>
 800b8e2:	683b      	ldr	r3, [r7, #0]
 800b8e4:	2b10      	cmp	r3, #16
 800b8e6:	d104      	bne.n	800b8f2 <HAL_TIM_PWM_Stop+0xea>
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	2242      	movs	r2, #66	@ 0x42
 800b8ec:	2101      	movs	r1, #1
 800b8ee:	5499      	strb	r1, [r3, r2]
 800b8f0:	e003      	b.n	800b8fa <HAL_TIM_PWM_Stop+0xf2>
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	2243      	movs	r2, #67	@ 0x43
 800b8f6:	2101      	movs	r1, #1
 800b8f8:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800b8fa:	2300      	movs	r3, #0
}
 800b8fc:	0018      	movs	r0, r3
 800b8fe:	46bd      	mov	sp, r7
 800b900:	b002      	add	sp, #8
 800b902:	bd80      	pop	{r7, pc}
 800b904:	40012c00 	.word	0x40012c00
 800b908:	40014000 	.word	0x40014000
 800b90c:	40014400 	.word	0x40014400
 800b910:	40014800 	.word	0x40014800
 800b914:	00001111 	.word	0x00001111
 800b918:	00000444 	.word	0x00000444
 800b91c:	ffff7fff 	.word	0xffff7fff

0800b920 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b920:	b580      	push	{r7, lr}
 800b922:	b086      	sub	sp, #24
 800b924:	af00      	add	r7, sp, #0
 800b926:	60f8      	str	r0, [r7, #12]
 800b928:	60b9      	str	r1, [r7, #8]
 800b92a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b92c:	2317      	movs	r3, #23
 800b92e:	18fb      	adds	r3, r7, r3
 800b930:	2200      	movs	r2, #0
 800b932:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	223c      	movs	r2, #60	@ 0x3c
 800b938:	5c9b      	ldrb	r3, [r3, r2]
 800b93a:	2b01      	cmp	r3, #1
 800b93c:	d101      	bne.n	800b942 <HAL_TIM_PWM_ConfigChannel+0x22>
 800b93e:	2302      	movs	r3, #2
 800b940:	e0e5      	b.n	800bb0e <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	223c      	movs	r2, #60	@ 0x3c
 800b946:	2101      	movs	r1, #1
 800b948:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	2b14      	cmp	r3, #20
 800b94e:	d900      	bls.n	800b952 <HAL_TIM_PWM_ConfigChannel+0x32>
 800b950:	e0d1      	b.n	800baf6 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	009a      	lsls	r2, r3, #2
 800b956:	4b70      	ldr	r3, [pc, #448]	@ (800bb18 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800b958:	18d3      	adds	r3, r2, r3
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	68ba      	ldr	r2, [r7, #8]
 800b964:	0011      	movs	r1, r2
 800b966:	0018      	movs	r0, r3
 800b968:	f000 f972 	bl	800bc50 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	699a      	ldr	r2, [r3, #24]
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	2108      	movs	r1, #8
 800b978:	430a      	orrs	r2, r1
 800b97a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	699a      	ldr	r2, [r3, #24]
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	2104      	movs	r1, #4
 800b988:	438a      	bics	r2, r1
 800b98a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	6999      	ldr	r1, [r3, #24]
 800b992:	68bb      	ldr	r3, [r7, #8]
 800b994:	691a      	ldr	r2, [r3, #16]
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	430a      	orrs	r2, r1
 800b99c:	619a      	str	r2, [r3, #24]
      break;
 800b99e:	e0af      	b.n	800bb00 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	68ba      	ldr	r2, [r7, #8]
 800b9a6:	0011      	movs	r1, r2
 800b9a8:	0018      	movs	r0, r3
 800b9aa:	f000 f9db 	bl	800bd64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	699a      	ldr	r2, [r3, #24]
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	2180      	movs	r1, #128	@ 0x80
 800b9ba:	0109      	lsls	r1, r1, #4
 800b9bc:	430a      	orrs	r2, r1
 800b9be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	699a      	ldr	r2, [r3, #24]
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	4954      	ldr	r1, [pc, #336]	@ (800bb1c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800b9cc:	400a      	ands	r2, r1
 800b9ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	6999      	ldr	r1, [r3, #24]
 800b9d6:	68bb      	ldr	r3, [r7, #8]
 800b9d8:	691b      	ldr	r3, [r3, #16]
 800b9da:	021a      	lsls	r2, r3, #8
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	430a      	orrs	r2, r1
 800b9e2:	619a      	str	r2, [r3, #24]
      break;
 800b9e4:	e08c      	b.n	800bb00 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	68ba      	ldr	r2, [r7, #8]
 800b9ec:	0011      	movs	r1, r2
 800b9ee:	0018      	movs	r0, r3
 800b9f0:	f000 fa3c 	bl	800be6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	69da      	ldr	r2, [r3, #28]
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	2108      	movs	r1, #8
 800ba00:	430a      	orrs	r2, r1
 800ba02:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	69da      	ldr	r2, [r3, #28]
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	2104      	movs	r1, #4
 800ba10:	438a      	bics	r2, r1
 800ba12:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	69d9      	ldr	r1, [r3, #28]
 800ba1a:	68bb      	ldr	r3, [r7, #8]
 800ba1c:	691a      	ldr	r2, [r3, #16]
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	430a      	orrs	r2, r1
 800ba24:	61da      	str	r2, [r3, #28]
      break;
 800ba26:	e06b      	b.n	800bb00 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	68ba      	ldr	r2, [r7, #8]
 800ba2e:	0011      	movs	r1, r2
 800ba30:	0018      	movs	r0, r3
 800ba32:	f000 faa3 	bl	800bf7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	69da      	ldr	r2, [r3, #28]
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	2180      	movs	r1, #128	@ 0x80
 800ba42:	0109      	lsls	r1, r1, #4
 800ba44:	430a      	orrs	r2, r1
 800ba46:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	69da      	ldr	r2, [r3, #28]
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	4932      	ldr	r1, [pc, #200]	@ (800bb1c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800ba54:	400a      	ands	r2, r1
 800ba56:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	69d9      	ldr	r1, [r3, #28]
 800ba5e:	68bb      	ldr	r3, [r7, #8]
 800ba60:	691b      	ldr	r3, [r3, #16]
 800ba62:	021a      	lsls	r2, r3, #8
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	430a      	orrs	r2, r1
 800ba6a:	61da      	str	r2, [r3, #28]
      break;
 800ba6c:	e048      	b.n	800bb00 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	68ba      	ldr	r2, [r7, #8]
 800ba74:	0011      	movs	r1, r2
 800ba76:	0018      	movs	r0, r3
 800ba78:	f000 faea 	bl	800c050 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	2108      	movs	r1, #8
 800ba88:	430a      	orrs	r2, r1
 800ba8a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	2104      	movs	r1, #4
 800ba98:	438a      	bics	r2, r1
 800ba9a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800baa2:	68bb      	ldr	r3, [r7, #8]
 800baa4:	691a      	ldr	r2, [r3, #16]
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	430a      	orrs	r2, r1
 800baac:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800baae:	e027      	b.n	800bb00 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	68ba      	ldr	r2, [r7, #8]
 800bab6:	0011      	movs	r1, r2
 800bab8:	0018      	movs	r0, r3
 800baba:	f000 fb29 	bl	800c110 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	2180      	movs	r1, #128	@ 0x80
 800baca:	0109      	lsls	r1, r1, #4
 800bacc:	430a      	orrs	r2, r1
 800bace:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	4910      	ldr	r1, [pc, #64]	@ (800bb1c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800badc:	400a      	ands	r2, r1
 800bade:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800bae6:	68bb      	ldr	r3, [r7, #8]
 800bae8:	691b      	ldr	r3, [r3, #16]
 800baea:	021a      	lsls	r2, r3, #8
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	430a      	orrs	r2, r1
 800baf2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800baf4:	e004      	b.n	800bb00 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800baf6:	2317      	movs	r3, #23
 800baf8:	18fb      	adds	r3, r7, r3
 800bafa:	2201      	movs	r2, #1
 800bafc:	701a      	strb	r2, [r3, #0]
      break;
 800bafe:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	223c      	movs	r2, #60	@ 0x3c
 800bb04:	2100      	movs	r1, #0
 800bb06:	5499      	strb	r1, [r3, r2]

  return status;
 800bb08:	2317      	movs	r3, #23
 800bb0a:	18fb      	adds	r3, r7, r3
 800bb0c:	781b      	ldrb	r3, [r3, #0]
}
 800bb0e:	0018      	movs	r0, r3
 800bb10:	46bd      	mov	sp, r7
 800bb12:	b006      	add	sp, #24
 800bb14:	bd80      	pop	{r7, pc}
 800bb16:	46c0      	nop			@ (mov r8, r8)
 800bb18:	080116f4 	.word	0x080116f4
 800bb1c:	fffffbff 	.word	0xfffffbff

0800bb20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b084      	sub	sp, #16
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]
 800bb28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	4a3f      	ldr	r2, [pc, #252]	@ (800bc30 <TIM_Base_SetConfig+0x110>)
 800bb34:	4293      	cmp	r3, r2
 800bb36:	d00c      	beq.n	800bb52 <TIM_Base_SetConfig+0x32>
 800bb38:	687a      	ldr	r2, [r7, #4]
 800bb3a:	2380      	movs	r3, #128	@ 0x80
 800bb3c:	05db      	lsls	r3, r3, #23
 800bb3e:	429a      	cmp	r2, r3
 800bb40:	d007      	beq.n	800bb52 <TIM_Base_SetConfig+0x32>
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	4a3b      	ldr	r2, [pc, #236]	@ (800bc34 <TIM_Base_SetConfig+0x114>)
 800bb46:	4293      	cmp	r3, r2
 800bb48:	d003      	beq.n	800bb52 <TIM_Base_SetConfig+0x32>
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	4a3a      	ldr	r2, [pc, #232]	@ (800bc38 <TIM_Base_SetConfig+0x118>)
 800bb4e:	4293      	cmp	r3, r2
 800bb50:	d108      	bne.n	800bb64 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	2270      	movs	r2, #112	@ 0x70
 800bb56:	4393      	bics	r3, r2
 800bb58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bb5a:	683b      	ldr	r3, [r7, #0]
 800bb5c:	685b      	ldr	r3, [r3, #4]
 800bb5e:	68fa      	ldr	r2, [r7, #12]
 800bb60:	4313      	orrs	r3, r2
 800bb62:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	4a32      	ldr	r2, [pc, #200]	@ (800bc30 <TIM_Base_SetConfig+0x110>)
 800bb68:	4293      	cmp	r3, r2
 800bb6a:	d01c      	beq.n	800bba6 <TIM_Base_SetConfig+0x86>
 800bb6c:	687a      	ldr	r2, [r7, #4]
 800bb6e:	2380      	movs	r3, #128	@ 0x80
 800bb70:	05db      	lsls	r3, r3, #23
 800bb72:	429a      	cmp	r2, r3
 800bb74:	d017      	beq.n	800bba6 <TIM_Base_SetConfig+0x86>
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	4a2e      	ldr	r2, [pc, #184]	@ (800bc34 <TIM_Base_SetConfig+0x114>)
 800bb7a:	4293      	cmp	r3, r2
 800bb7c:	d013      	beq.n	800bba6 <TIM_Base_SetConfig+0x86>
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	4a2d      	ldr	r2, [pc, #180]	@ (800bc38 <TIM_Base_SetConfig+0x118>)
 800bb82:	4293      	cmp	r3, r2
 800bb84:	d00f      	beq.n	800bba6 <TIM_Base_SetConfig+0x86>
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	4a2c      	ldr	r2, [pc, #176]	@ (800bc3c <TIM_Base_SetConfig+0x11c>)
 800bb8a:	4293      	cmp	r3, r2
 800bb8c:	d00b      	beq.n	800bba6 <TIM_Base_SetConfig+0x86>
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	4a2b      	ldr	r2, [pc, #172]	@ (800bc40 <TIM_Base_SetConfig+0x120>)
 800bb92:	4293      	cmp	r3, r2
 800bb94:	d007      	beq.n	800bba6 <TIM_Base_SetConfig+0x86>
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	4a2a      	ldr	r2, [pc, #168]	@ (800bc44 <TIM_Base_SetConfig+0x124>)
 800bb9a:	4293      	cmp	r3, r2
 800bb9c:	d003      	beq.n	800bba6 <TIM_Base_SetConfig+0x86>
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	4a29      	ldr	r2, [pc, #164]	@ (800bc48 <TIM_Base_SetConfig+0x128>)
 800bba2:	4293      	cmp	r3, r2
 800bba4:	d108      	bne.n	800bbb8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	4a28      	ldr	r2, [pc, #160]	@ (800bc4c <TIM_Base_SetConfig+0x12c>)
 800bbaa:	4013      	ands	r3, r2
 800bbac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bbae:	683b      	ldr	r3, [r7, #0]
 800bbb0:	68db      	ldr	r3, [r3, #12]
 800bbb2:	68fa      	ldr	r2, [r7, #12]
 800bbb4:	4313      	orrs	r3, r2
 800bbb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	2280      	movs	r2, #128	@ 0x80
 800bbbc:	4393      	bics	r3, r2
 800bbbe:	001a      	movs	r2, r3
 800bbc0:	683b      	ldr	r3, [r7, #0]
 800bbc2:	695b      	ldr	r3, [r3, #20]
 800bbc4:	4313      	orrs	r3, r2
 800bbc6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	68fa      	ldr	r2, [r7, #12]
 800bbcc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bbce:	683b      	ldr	r3, [r7, #0]
 800bbd0:	689a      	ldr	r2, [r3, #8]
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bbd6:	683b      	ldr	r3, [r7, #0]
 800bbd8:	681a      	ldr	r2, [r3, #0]
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	4a13      	ldr	r2, [pc, #76]	@ (800bc30 <TIM_Base_SetConfig+0x110>)
 800bbe2:	4293      	cmp	r3, r2
 800bbe4:	d00b      	beq.n	800bbfe <TIM_Base_SetConfig+0xde>
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	4a15      	ldr	r2, [pc, #84]	@ (800bc40 <TIM_Base_SetConfig+0x120>)
 800bbea:	4293      	cmp	r3, r2
 800bbec:	d007      	beq.n	800bbfe <TIM_Base_SetConfig+0xde>
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	4a14      	ldr	r2, [pc, #80]	@ (800bc44 <TIM_Base_SetConfig+0x124>)
 800bbf2:	4293      	cmp	r3, r2
 800bbf4:	d003      	beq.n	800bbfe <TIM_Base_SetConfig+0xde>
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	4a13      	ldr	r2, [pc, #76]	@ (800bc48 <TIM_Base_SetConfig+0x128>)
 800bbfa:	4293      	cmp	r3, r2
 800bbfc:	d103      	bne.n	800bc06 <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bbfe:	683b      	ldr	r3, [r7, #0]
 800bc00:	691a      	ldr	r2, [r3, #16]
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	2201      	movs	r2, #1
 800bc0a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	691b      	ldr	r3, [r3, #16]
 800bc10:	2201      	movs	r2, #1
 800bc12:	4013      	ands	r3, r2
 800bc14:	2b01      	cmp	r3, #1
 800bc16:	d106      	bne.n	800bc26 <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	691b      	ldr	r3, [r3, #16]
 800bc1c:	2201      	movs	r2, #1
 800bc1e:	4393      	bics	r3, r2
 800bc20:	001a      	movs	r2, r3
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	611a      	str	r2, [r3, #16]
  }
}
 800bc26:	46c0      	nop			@ (mov r8, r8)
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	b004      	add	sp, #16
 800bc2c:	bd80      	pop	{r7, pc}
 800bc2e:	46c0      	nop			@ (mov r8, r8)
 800bc30:	40012c00 	.word	0x40012c00
 800bc34:	40000400 	.word	0x40000400
 800bc38:	40000800 	.word	0x40000800
 800bc3c:	40002000 	.word	0x40002000
 800bc40:	40014000 	.word	0x40014000
 800bc44:	40014400 	.word	0x40014400
 800bc48:	40014800 	.word	0x40014800
 800bc4c:	fffffcff 	.word	0xfffffcff

0800bc50 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bc50:	b580      	push	{r7, lr}
 800bc52:	b086      	sub	sp, #24
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]
 800bc58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	6a1b      	ldr	r3, [r3, #32]
 800bc5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	6a1b      	ldr	r3, [r3, #32]
 800bc64:	2201      	movs	r2, #1
 800bc66:	4393      	bics	r3, r2
 800bc68:	001a      	movs	r2, r3
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	685b      	ldr	r3, [r3, #4]
 800bc72:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	699b      	ldr	r3, [r3, #24]
 800bc78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	4a32      	ldr	r2, [pc, #200]	@ (800bd48 <TIM_OC1_SetConfig+0xf8>)
 800bc7e:	4013      	ands	r3, r2
 800bc80:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	2203      	movs	r2, #3
 800bc86:	4393      	bics	r3, r2
 800bc88:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bc8a:	683b      	ldr	r3, [r7, #0]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	68fa      	ldr	r2, [r7, #12]
 800bc90:	4313      	orrs	r3, r2
 800bc92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bc94:	697b      	ldr	r3, [r7, #20]
 800bc96:	2202      	movs	r2, #2
 800bc98:	4393      	bics	r3, r2
 800bc9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bc9c:	683b      	ldr	r3, [r7, #0]
 800bc9e:	689b      	ldr	r3, [r3, #8]
 800bca0:	697a      	ldr	r2, [r7, #20]
 800bca2:	4313      	orrs	r3, r2
 800bca4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	4a28      	ldr	r2, [pc, #160]	@ (800bd4c <TIM_OC1_SetConfig+0xfc>)
 800bcaa:	4293      	cmp	r3, r2
 800bcac:	d00b      	beq.n	800bcc6 <TIM_OC1_SetConfig+0x76>
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	4a27      	ldr	r2, [pc, #156]	@ (800bd50 <TIM_OC1_SetConfig+0x100>)
 800bcb2:	4293      	cmp	r3, r2
 800bcb4:	d007      	beq.n	800bcc6 <TIM_OC1_SetConfig+0x76>
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	4a26      	ldr	r2, [pc, #152]	@ (800bd54 <TIM_OC1_SetConfig+0x104>)
 800bcba:	4293      	cmp	r3, r2
 800bcbc:	d003      	beq.n	800bcc6 <TIM_OC1_SetConfig+0x76>
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	4a25      	ldr	r2, [pc, #148]	@ (800bd58 <TIM_OC1_SetConfig+0x108>)
 800bcc2:	4293      	cmp	r3, r2
 800bcc4:	d10c      	bne.n	800bce0 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bcc6:	697b      	ldr	r3, [r7, #20]
 800bcc8:	2208      	movs	r2, #8
 800bcca:	4393      	bics	r3, r2
 800bccc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bcce:	683b      	ldr	r3, [r7, #0]
 800bcd0:	68db      	ldr	r3, [r3, #12]
 800bcd2:	697a      	ldr	r2, [r7, #20]
 800bcd4:	4313      	orrs	r3, r2
 800bcd6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bcd8:	697b      	ldr	r3, [r7, #20]
 800bcda:	2204      	movs	r2, #4
 800bcdc:	4393      	bics	r3, r2
 800bcde:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	4a1a      	ldr	r2, [pc, #104]	@ (800bd4c <TIM_OC1_SetConfig+0xfc>)
 800bce4:	4293      	cmp	r3, r2
 800bce6:	d00b      	beq.n	800bd00 <TIM_OC1_SetConfig+0xb0>
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	4a19      	ldr	r2, [pc, #100]	@ (800bd50 <TIM_OC1_SetConfig+0x100>)
 800bcec:	4293      	cmp	r3, r2
 800bcee:	d007      	beq.n	800bd00 <TIM_OC1_SetConfig+0xb0>
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	4a18      	ldr	r2, [pc, #96]	@ (800bd54 <TIM_OC1_SetConfig+0x104>)
 800bcf4:	4293      	cmp	r3, r2
 800bcf6:	d003      	beq.n	800bd00 <TIM_OC1_SetConfig+0xb0>
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	4a17      	ldr	r2, [pc, #92]	@ (800bd58 <TIM_OC1_SetConfig+0x108>)
 800bcfc:	4293      	cmp	r3, r2
 800bcfe:	d111      	bne.n	800bd24 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bd00:	693b      	ldr	r3, [r7, #16]
 800bd02:	4a16      	ldr	r2, [pc, #88]	@ (800bd5c <TIM_OC1_SetConfig+0x10c>)
 800bd04:	4013      	ands	r3, r2
 800bd06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bd08:	693b      	ldr	r3, [r7, #16]
 800bd0a:	4a15      	ldr	r2, [pc, #84]	@ (800bd60 <TIM_OC1_SetConfig+0x110>)
 800bd0c:	4013      	ands	r3, r2
 800bd0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bd10:	683b      	ldr	r3, [r7, #0]
 800bd12:	695b      	ldr	r3, [r3, #20]
 800bd14:	693a      	ldr	r2, [r7, #16]
 800bd16:	4313      	orrs	r3, r2
 800bd18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bd1a:	683b      	ldr	r3, [r7, #0]
 800bd1c:	699b      	ldr	r3, [r3, #24]
 800bd1e:	693a      	ldr	r2, [r7, #16]
 800bd20:	4313      	orrs	r3, r2
 800bd22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	693a      	ldr	r2, [r7, #16]
 800bd28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	68fa      	ldr	r2, [r7, #12]
 800bd2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bd30:	683b      	ldr	r3, [r7, #0]
 800bd32:	685a      	ldr	r2, [r3, #4]
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	697a      	ldr	r2, [r7, #20]
 800bd3c:	621a      	str	r2, [r3, #32]
}
 800bd3e:	46c0      	nop			@ (mov r8, r8)
 800bd40:	46bd      	mov	sp, r7
 800bd42:	b006      	add	sp, #24
 800bd44:	bd80      	pop	{r7, pc}
 800bd46:	46c0      	nop			@ (mov r8, r8)
 800bd48:	fffeff8f 	.word	0xfffeff8f
 800bd4c:	40012c00 	.word	0x40012c00
 800bd50:	40014000 	.word	0x40014000
 800bd54:	40014400 	.word	0x40014400
 800bd58:	40014800 	.word	0x40014800
 800bd5c:	fffffeff 	.word	0xfffffeff
 800bd60:	fffffdff 	.word	0xfffffdff

0800bd64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b086      	sub	sp, #24
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	6078      	str	r0, [r7, #4]
 800bd6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	6a1b      	ldr	r3, [r3, #32]
 800bd72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	6a1b      	ldr	r3, [r3, #32]
 800bd78:	2210      	movs	r2, #16
 800bd7a:	4393      	bics	r3, r2
 800bd7c:	001a      	movs	r2, r3
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	685b      	ldr	r3, [r3, #4]
 800bd86:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	699b      	ldr	r3, [r3, #24]
 800bd8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	4a2e      	ldr	r2, [pc, #184]	@ (800be4c <TIM_OC2_SetConfig+0xe8>)
 800bd92:	4013      	ands	r3, r2
 800bd94:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	4a2d      	ldr	r2, [pc, #180]	@ (800be50 <TIM_OC2_SetConfig+0xec>)
 800bd9a:	4013      	ands	r3, r2
 800bd9c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bd9e:	683b      	ldr	r3, [r7, #0]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	021b      	lsls	r3, r3, #8
 800bda4:	68fa      	ldr	r2, [r7, #12]
 800bda6:	4313      	orrs	r3, r2
 800bda8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bdaa:	697b      	ldr	r3, [r7, #20]
 800bdac:	2220      	movs	r2, #32
 800bdae:	4393      	bics	r3, r2
 800bdb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bdb2:	683b      	ldr	r3, [r7, #0]
 800bdb4:	689b      	ldr	r3, [r3, #8]
 800bdb6:	011b      	lsls	r3, r3, #4
 800bdb8:	697a      	ldr	r2, [r7, #20]
 800bdba:	4313      	orrs	r3, r2
 800bdbc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	4a24      	ldr	r2, [pc, #144]	@ (800be54 <TIM_OC2_SetConfig+0xf0>)
 800bdc2:	4293      	cmp	r3, r2
 800bdc4:	d10d      	bne.n	800bde2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bdc6:	697b      	ldr	r3, [r7, #20]
 800bdc8:	2280      	movs	r2, #128	@ 0x80
 800bdca:	4393      	bics	r3, r2
 800bdcc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bdce:	683b      	ldr	r3, [r7, #0]
 800bdd0:	68db      	ldr	r3, [r3, #12]
 800bdd2:	011b      	lsls	r3, r3, #4
 800bdd4:	697a      	ldr	r2, [r7, #20]
 800bdd6:	4313      	orrs	r3, r2
 800bdd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bdda:	697b      	ldr	r3, [r7, #20]
 800bddc:	2240      	movs	r2, #64	@ 0x40
 800bdde:	4393      	bics	r3, r2
 800bde0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	4a1b      	ldr	r2, [pc, #108]	@ (800be54 <TIM_OC2_SetConfig+0xf0>)
 800bde6:	4293      	cmp	r3, r2
 800bde8:	d00b      	beq.n	800be02 <TIM_OC2_SetConfig+0x9e>
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	4a1a      	ldr	r2, [pc, #104]	@ (800be58 <TIM_OC2_SetConfig+0xf4>)
 800bdee:	4293      	cmp	r3, r2
 800bdf0:	d007      	beq.n	800be02 <TIM_OC2_SetConfig+0x9e>
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	4a19      	ldr	r2, [pc, #100]	@ (800be5c <TIM_OC2_SetConfig+0xf8>)
 800bdf6:	4293      	cmp	r3, r2
 800bdf8:	d003      	beq.n	800be02 <TIM_OC2_SetConfig+0x9e>
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	4a18      	ldr	r2, [pc, #96]	@ (800be60 <TIM_OC2_SetConfig+0xfc>)
 800bdfe:	4293      	cmp	r3, r2
 800be00:	d113      	bne.n	800be2a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800be02:	693b      	ldr	r3, [r7, #16]
 800be04:	4a17      	ldr	r2, [pc, #92]	@ (800be64 <TIM_OC2_SetConfig+0x100>)
 800be06:	4013      	ands	r3, r2
 800be08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800be0a:	693b      	ldr	r3, [r7, #16]
 800be0c:	4a16      	ldr	r2, [pc, #88]	@ (800be68 <TIM_OC2_SetConfig+0x104>)
 800be0e:	4013      	ands	r3, r2
 800be10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800be12:	683b      	ldr	r3, [r7, #0]
 800be14:	695b      	ldr	r3, [r3, #20]
 800be16:	009b      	lsls	r3, r3, #2
 800be18:	693a      	ldr	r2, [r7, #16]
 800be1a:	4313      	orrs	r3, r2
 800be1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800be1e:	683b      	ldr	r3, [r7, #0]
 800be20:	699b      	ldr	r3, [r3, #24]
 800be22:	009b      	lsls	r3, r3, #2
 800be24:	693a      	ldr	r2, [r7, #16]
 800be26:	4313      	orrs	r3, r2
 800be28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	693a      	ldr	r2, [r7, #16]
 800be2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	68fa      	ldr	r2, [r7, #12]
 800be34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800be36:	683b      	ldr	r3, [r7, #0]
 800be38:	685a      	ldr	r2, [r3, #4]
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	697a      	ldr	r2, [r7, #20]
 800be42:	621a      	str	r2, [r3, #32]
}
 800be44:	46c0      	nop			@ (mov r8, r8)
 800be46:	46bd      	mov	sp, r7
 800be48:	b006      	add	sp, #24
 800be4a:	bd80      	pop	{r7, pc}
 800be4c:	feff8fff 	.word	0xfeff8fff
 800be50:	fffffcff 	.word	0xfffffcff
 800be54:	40012c00 	.word	0x40012c00
 800be58:	40014000 	.word	0x40014000
 800be5c:	40014400 	.word	0x40014400
 800be60:	40014800 	.word	0x40014800
 800be64:	fffffbff 	.word	0xfffffbff
 800be68:	fffff7ff 	.word	0xfffff7ff

0800be6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800be6c:	b580      	push	{r7, lr}
 800be6e:	b086      	sub	sp, #24
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
 800be74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	6a1b      	ldr	r3, [r3, #32]
 800be7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	6a1b      	ldr	r3, [r3, #32]
 800be80:	4a33      	ldr	r2, [pc, #204]	@ (800bf50 <TIM_OC3_SetConfig+0xe4>)
 800be82:	401a      	ands	r2, r3
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	685b      	ldr	r3, [r3, #4]
 800be8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	69db      	ldr	r3, [r3, #28]
 800be92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	4a2f      	ldr	r2, [pc, #188]	@ (800bf54 <TIM_OC3_SetConfig+0xe8>)
 800be98:	4013      	ands	r3, r2
 800be9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	2203      	movs	r2, #3
 800bea0:	4393      	bics	r3, r2
 800bea2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bea4:	683b      	ldr	r3, [r7, #0]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	68fa      	ldr	r2, [r7, #12]
 800beaa:	4313      	orrs	r3, r2
 800beac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800beae:	697b      	ldr	r3, [r7, #20]
 800beb0:	4a29      	ldr	r2, [pc, #164]	@ (800bf58 <TIM_OC3_SetConfig+0xec>)
 800beb2:	4013      	ands	r3, r2
 800beb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800beb6:	683b      	ldr	r3, [r7, #0]
 800beb8:	689b      	ldr	r3, [r3, #8]
 800beba:	021b      	lsls	r3, r3, #8
 800bebc:	697a      	ldr	r2, [r7, #20]
 800bebe:	4313      	orrs	r3, r2
 800bec0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	4a25      	ldr	r2, [pc, #148]	@ (800bf5c <TIM_OC3_SetConfig+0xf0>)
 800bec6:	4293      	cmp	r3, r2
 800bec8:	d10d      	bne.n	800bee6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800beca:	697b      	ldr	r3, [r7, #20]
 800becc:	4a24      	ldr	r2, [pc, #144]	@ (800bf60 <TIM_OC3_SetConfig+0xf4>)
 800bece:	4013      	ands	r3, r2
 800bed0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bed2:	683b      	ldr	r3, [r7, #0]
 800bed4:	68db      	ldr	r3, [r3, #12]
 800bed6:	021b      	lsls	r3, r3, #8
 800bed8:	697a      	ldr	r2, [r7, #20]
 800beda:	4313      	orrs	r3, r2
 800bedc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bede:	697b      	ldr	r3, [r7, #20]
 800bee0:	4a20      	ldr	r2, [pc, #128]	@ (800bf64 <TIM_OC3_SetConfig+0xf8>)
 800bee2:	4013      	ands	r3, r2
 800bee4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	4a1c      	ldr	r2, [pc, #112]	@ (800bf5c <TIM_OC3_SetConfig+0xf0>)
 800beea:	4293      	cmp	r3, r2
 800beec:	d00b      	beq.n	800bf06 <TIM_OC3_SetConfig+0x9a>
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	4a1d      	ldr	r2, [pc, #116]	@ (800bf68 <TIM_OC3_SetConfig+0xfc>)
 800bef2:	4293      	cmp	r3, r2
 800bef4:	d007      	beq.n	800bf06 <TIM_OC3_SetConfig+0x9a>
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	4a1c      	ldr	r2, [pc, #112]	@ (800bf6c <TIM_OC3_SetConfig+0x100>)
 800befa:	4293      	cmp	r3, r2
 800befc:	d003      	beq.n	800bf06 <TIM_OC3_SetConfig+0x9a>
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	4a1b      	ldr	r2, [pc, #108]	@ (800bf70 <TIM_OC3_SetConfig+0x104>)
 800bf02:	4293      	cmp	r3, r2
 800bf04:	d113      	bne.n	800bf2e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bf06:	693b      	ldr	r3, [r7, #16]
 800bf08:	4a1a      	ldr	r2, [pc, #104]	@ (800bf74 <TIM_OC3_SetConfig+0x108>)
 800bf0a:	4013      	ands	r3, r2
 800bf0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bf0e:	693b      	ldr	r3, [r7, #16]
 800bf10:	4a19      	ldr	r2, [pc, #100]	@ (800bf78 <TIM_OC3_SetConfig+0x10c>)
 800bf12:	4013      	ands	r3, r2
 800bf14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bf16:	683b      	ldr	r3, [r7, #0]
 800bf18:	695b      	ldr	r3, [r3, #20]
 800bf1a:	011b      	lsls	r3, r3, #4
 800bf1c:	693a      	ldr	r2, [r7, #16]
 800bf1e:	4313      	orrs	r3, r2
 800bf20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bf22:	683b      	ldr	r3, [r7, #0]
 800bf24:	699b      	ldr	r3, [r3, #24]
 800bf26:	011b      	lsls	r3, r3, #4
 800bf28:	693a      	ldr	r2, [r7, #16]
 800bf2a:	4313      	orrs	r3, r2
 800bf2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	693a      	ldr	r2, [r7, #16]
 800bf32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	68fa      	ldr	r2, [r7, #12]
 800bf38:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bf3a:	683b      	ldr	r3, [r7, #0]
 800bf3c:	685a      	ldr	r2, [r3, #4]
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	697a      	ldr	r2, [r7, #20]
 800bf46:	621a      	str	r2, [r3, #32]
}
 800bf48:	46c0      	nop			@ (mov r8, r8)
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	b006      	add	sp, #24
 800bf4e:	bd80      	pop	{r7, pc}
 800bf50:	fffffeff 	.word	0xfffffeff
 800bf54:	fffeff8f 	.word	0xfffeff8f
 800bf58:	fffffdff 	.word	0xfffffdff
 800bf5c:	40012c00 	.word	0x40012c00
 800bf60:	fffff7ff 	.word	0xfffff7ff
 800bf64:	fffffbff 	.word	0xfffffbff
 800bf68:	40014000 	.word	0x40014000
 800bf6c:	40014400 	.word	0x40014400
 800bf70:	40014800 	.word	0x40014800
 800bf74:	ffffefff 	.word	0xffffefff
 800bf78:	ffffdfff 	.word	0xffffdfff

0800bf7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b086      	sub	sp, #24
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	6078      	str	r0, [r7, #4]
 800bf84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	6a1b      	ldr	r3, [r3, #32]
 800bf8a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	6a1b      	ldr	r3, [r3, #32]
 800bf90:	4a26      	ldr	r2, [pc, #152]	@ (800c02c <TIM_OC4_SetConfig+0xb0>)
 800bf92:	401a      	ands	r2, r3
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	685b      	ldr	r3, [r3, #4]
 800bf9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	69db      	ldr	r3, [r3, #28]
 800bfa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	4a22      	ldr	r2, [pc, #136]	@ (800c030 <TIM_OC4_SetConfig+0xb4>)
 800bfa8:	4013      	ands	r3, r2
 800bfaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	4a21      	ldr	r2, [pc, #132]	@ (800c034 <TIM_OC4_SetConfig+0xb8>)
 800bfb0:	4013      	ands	r3, r2
 800bfb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bfb4:	683b      	ldr	r3, [r7, #0]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	021b      	lsls	r3, r3, #8
 800bfba:	68fa      	ldr	r2, [r7, #12]
 800bfbc:	4313      	orrs	r3, r2
 800bfbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bfc0:	693b      	ldr	r3, [r7, #16]
 800bfc2:	4a1d      	ldr	r2, [pc, #116]	@ (800c038 <TIM_OC4_SetConfig+0xbc>)
 800bfc4:	4013      	ands	r3, r2
 800bfc6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bfc8:	683b      	ldr	r3, [r7, #0]
 800bfca:	689b      	ldr	r3, [r3, #8]
 800bfcc:	031b      	lsls	r3, r3, #12
 800bfce:	693a      	ldr	r2, [r7, #16]
 800bfd0:	4313      	orrs	r3, r2
 800bfd2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	4a19      	ldr	r2, [pc, #100]	@ (800c03c <TIM_OC4_SetConfig+0xc0>)
 800bfd8:	4293      	cmp	r3, r2
 800bfda:	d00b      	beq.n	800bff4 <TIM_OC4_SetConfig+0x78>
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	4a18      	ldr	r2, [pc, #96]	@ (800c040 <TIM_OC4_SetConfig+0xc4>)
 800bfe0:	4293      	cmp	r3, r2
 800bfe2:	d007      	beq.n	800bff4 <TIM_OC4_SetConfig+0x78>
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	4a17      	ldr	r2, [pc, #92]	@ (800c044 <TIM_OC4_SetConfig+0xc8>)
 800bfe8:	4293      	cmp	r3, r2
 800bfea:	d003      	beq.n	800bff4 <TIM_OC4_SetConfig+0x78>
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	4a16      	ldr	r2, [pc, #88]	@ (800c048 <TIM_OC4_SetConfig+0xcc>)
 800bff0:	4293      	cmp	r3, r2
 800bff2:	d109      	bne.n	800c008 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bff4:	697b      	ldr	r3, [r7, #20]
 800bff6:	4a15      	ldr	r2, [pc, #84]	@ (800c04c <TIM_OC4_SetConfig+0xd0>)
 800bff8:	4013      	ands	r3, r2
 800bffa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bffc:	683b      	ldr	r3, [r7, #0]
 800bffe:	695b      	ldr	r3, [r3, #20]
 800c000:	019b      	lsls	r3, r3, #6
 800c002:	697a      	ldr	r2, [r7, #20]
 800c004:	4313      	orrs	r3, r2
 800c006:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	697a      	ldr	r2, [r7, #20]
 800c00c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	68fa      	ldr	r2, [r7, #12]
 800c012:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c014:	683b      	ldr	r3, [r7, #0]
 800c016:	685a      	ldr	r2, [r3, #4]
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	693a      	ldr	r2, [r7, #16]
 800c020:	621a      	str	r2, [r3, #32]
}
 800c022:	46c0      	nop			@ (mov r8, r8)
 800c024:	46bd      	mov	sp, r7
 800c026:	b006      	add	sp, #24
 800c028:	bd80      	pop	{r7, pc}
 800c02a:	46c0      	nop			@ (mov r8, r8)
 800c02c:	ffffefff 	.word	0xffffefff
 800c030:	feff8fff 	.word	0xfeff8fff
 800c034:	fffffcff 	.word	0xfffffcff
 800c038:	ffffdfff 	.word	0xffffdfff
 800c03c:	40012c00 	.word	0x40012c00
 800c040:	40014000 	.word	0x40014000
 800c044:	40014400 	.word	0x40014400
 800c048:	40014800 	.word	0x40014800
 800c04c:	ffffbfff 	.word	0xffffbfff

0800c050 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c050:	b580      	push	{r7, lr}
 800c052:	b086      	sub	sp, #24
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
 800c058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	6a1b      	ldr	r3, [r3, #32]
 800c05e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	6a1b      	ldr	r3, [r3, #32]
 800c064:	4a23      	ldr	r2, [pc, #140]	@ (800c0f4 <TIM_OC5_SetConfig+0xa4>)
 800c066:	401a      	ands	r2, r3
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	685b      	ldr	r3, [r3, #4]
 800c070:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	4a1f      	ldr	r2, [pc, #124]	@ (800c0f8 <TIM_OC5_SetConfig+0xa8>)
 800c07c:	4013      	ands	r3, r2
 800c07e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c080:	683b      	ldr	r3, [r7, #0]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	68fa      	ldr	r2, [r7, #12]
 800c086:	4313      	orrs	r3, r2
 800c088:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c08a:	693b      	ldr	r3, [r7, #16]
 800c08c:	4a1b      	ldr	r2, [pc, #108]	@ (800c0fc <TIM_OC5_SetConfig+0xac>)
 800c08e:	4013      	ands	r3, r2
 800c090:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c092:	683b      	ldr	r3, [r7, #0]
 800c094:	689b      	ldr	r3, [r3, #8]
 800c096:	041b      	lsls	r3, r3, #16
 800c098:	693a      	ldr	r2, [r7, #16]
 800c09a:	4313      	orrs	r3, r2
 800c09c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	4a17      	ldr	r2, [pc, #92]	@ (800c100 <TIM_OC5_SetConfig+0xb0>)
 800c0a2:	4293      	cmp	r3, r2
 800c0a4:	d00b      	beq.n	800c0be <TIM_OC5_SetConfig+0x6e>
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	4a16      	ldr	r2, [pc, #88]	@ (800c104 <TIM_OC5_SetConfig+0xb4>)
 800c0aa:	4293      	cmp	r3, r2
 800c0ac:	d007      	beq.n	800c0be <TIM_OC5_SetConfig+0x6e>
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	4a15      	ldr	r2, [pc, #84]	@ (800c108 <TIM_OC5_SetConfig+0xb8>)
 800c0b2:	4293      	cmp	r3, r2
 800c0b4:	d003      	beq.n	800c0be <TIM_OC5_SetConfig+0x6e>
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	4a14      	ldr	r2, [pc, #80]	@ (800c10c <TIM_OC5_SetConfig+0xbc>)
 800c0ba:	4293      	cmp	r3, r2
 800c0bc:	d109      	bne.n	800c0d2 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c0be:	697b      	ldr	r3, [r7, #20]
 800c0c0:	4a0c      	ldr	r2, [pc, #48]	@ (800c0f4 <TIM_OC5_SetConfig+0xa4>)
 800c0c2:	4013      	ands	r3, r2
 800c0c4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c0c6:	683b      	ldr	r3, [r7, #0]
 800c0c8:	695b      	ldr	r3, [r3, #20]
 800c0ca:	021b      	lsls	r3, r3, #8
 800c0cc:	697a      	ldr	r2, [r7, #20]
 800c0ce:	4313      	orrs	r3, r2
 800c0d0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	697a      	ldr	r2, [r7, #20]
 800c0d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	68fa      	ldr	r2, [r7, #12]
 800c0dc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c0de:	683b      	ldr	r3, [r7, #0]
 800c0e0:	685a      	ldr	r2, [r3, #4]
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	693a      	ldr	r2, [r7, #16]
 800c0ea:	621a      	str	r2, [r3, #32]
}
 800c0ec:	46c0      	nop			@ (mov r8, r8)
 800c0ee:	46bd      	mov	sp, r7
 800c0f0:	b006      	add	sp, #24
 800c0f2:	bd80      	pop	{r7, pc}
 800c0f4:	fffeffff 	.word	0xfffeffff
 800c0f8:	fffeff8f 	.word	0xfffeff8f
 800c0fc:	fffdffff 	.word	0xfffdffff
 800c100:	40012c00 	.word	0x40012c00
 800c104:	40014000 	.word	0x40014000
 800c108:	40014400 	.word	0x40014400
 800c10c:	40014800 	.word	0x40014800

0800c110 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c110:	b580      	push	{r7, lr}
 800c112:	b086      	sub	sp, #24
 800c114:	af00      	add	r7, sp, #0
 800c116:	6078      	str	r0, [r7, #4]
 800c118:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	6a1b      	ldr	r3, [r3, #32]
 800c11e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	6a1b      	ldr	r3, [r3, #32]
 800c124:	4a24      	ldr	r2, [pc, #144]	@ (800c1b8 <TIM_OC6_SetConfig+0xa8>)
 800c126:	401a      	ands	r2, r3
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	685b      	ldr	r3, [r3, #4]
 800c130:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	4a20      	ldr	r2, [pc, #128]	@ (800c1bc <TIM_OC6_SetConfig+0xac>)
 800c13c:	4013      	ands	r3, r2
 800c13e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c140:	683b      	ldr	r3, [r7, #0]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	021b      	lsls	r3, r3, #8
 800c146:	68fa      	ldr	r2, [r7, #12]
 800c148:	4313      	orrs	r3, r2
 800c14a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c14c:	693b      	ldr	r3, [r7, #16]
 800c14e:	4a1c      	ldr	r2, [pc, #112]	@ (800c1c0 <TIM_OC6_SetConfig+0xb0>)
 800c150:	4013      	ands	r3, r2
 800c152:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c154:	683b      	ldr	r3, [r7, #0]
 800c156:	689b      	ldr	r3, [r3, #8]
 800c158:	051b      	lsls	r3, r3, #20
 800c15a:	693a      	ldr	r2, [r7, #16]
 800c15c:	4313      	orrs	r3, r2
 800c15e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	4a18      	ldr	r2, [pc, #96]	@ (800c1c4 <TIM_OC6_SetConfig+0xb4>)
 800c164:	4293      	cmp	r3, r2
 800c166:	d00b      	beq.n	800c180 <TIM_OC6_SetConfig+0x70>
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	4a17      	ldr	r2, [pc, #92]	@ (800c1c8 <TIM_OC6_SetConfig+0xb8>)
 800c16c:	4293      	cmp	r3, r2
 800c16e:	d007      	beq.n	800c180 <TIM_OC6_SetConfig+0x70>
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	4a16      	ldr	r2, [pc, #88]	@ (800c1cc <TIM_OC6_SetConfig+0xbc>)
 800c174:	4293      	cmp	r3, r2
 800c176:	d003      	beq.n	800c180 <TIM_OC6_SetConfig+0x70>
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	4a15      	ldr	r2, [pc, #84]	@ (800c1d0 <TIM_OC6_SetConfig+0xc0>)
 800c17c:	4293      	cmp	r3, r2
 800c17e:	d109      	bne.n	800c194 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c180:	697b      	ldr	r3, [r7, #20]
 800c182:	4a14      	ldr	r2, [pc, #80]	@ (800c1d4 <TIM_OC6_SetConfig+0xc4>)
 800c184:	4013      	ands	r3, r2
 800c186:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c188:	683b      	ldr	r3, [r7, #0]
 800c18a:	695b      	ldr	r3, [r3, #20]
 800c18c:	029b      	lsls	r3, r3, #10
 800c18e:	697a      	ldr	r2, [r7, #20]
 800c190:	4313      	orrs	r3, r2
 800c192:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	697a      	ldr	r2, [r7, #20]
 800c198:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	68fa      	ldr	r2, [r7, #12]
 800c19e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c1a0:	683b      	ldr	r3, [r7, #0]
 800c1a2:	685a      	ldr	r2, [r3, #4]
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	693a      	ldr	r2, [r7, #16]
 800c1ac:	621a      	str	r2, [r3, #32]
}
 800c1ae:	46c0      	nop			@ (mov r8, r8)
 800c1b0:	46bd      	mov	sp, r7
 800c1b2:	b006      	add	sp, #24
 800c1b4:	bd80      	pop	{r7, pc}
 800c1b6:	46c0      	nop			@ (mov r8, r8)
 800c1b8:	ffefffff 	.word	0xffefffff
 800c1bc:	feff8fff 	.word	0xfeff8fff
 800c1c0:	ffdfffff 	.word	0xffdfffff
 800c1c4:	40012c00 	.word	0x40012c00
 800c1c8:	40014000 	.word	0x40014000
 800c1cc:	40014400 	.word	0x40014400
 800c1d0:	40014800 	.word	0x40014800
 800c1d4:	fffbffff 	.word	0xfffbffff

0800c1d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	b086      	sub	sp, #24
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	60f8      	str	r0, [r7, #12]
 800c1e0:	60b9      	str	r1, [r7, #8]
 800c1e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c1e4:	68bb      	ldr	r3, [r7, #8]
 800c1e6:	221f      	movs	r2, #31
 800c1e8:	4013      	ands	r3, r2
 800c1ea:	2201      	movs	r2, #1
 800c1ec:	409a      	lsls	r2, r3
 800c1ee:	0013      	movs	r3, r2
 800c1f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	6a1b      	ldr	r3, [r3, #32]
 800c1f6:	697a      	ldr	r2, [r7, #20]
 800c1f8:	43d2      	mvns	r2, r2
 800c1fa:	401a      	ands	r2, r3
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	6a1a      	ldr	r2, [r3, #32]
 800c204:	68bb      	ldr	r3, [r7, #8]
 800c206:	211f      	movs	r1, #31
 800c208:	400b      	ands	r3, r1
 800c20a:	6879      	ldr	r1, [r7, #4]
 800c20c:	4099      	lsls	r1, r3
 800c20e:	000b      	movs	r3, r1
 800c210:	431a      	orrs	r2, r3
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	621a      	str	r2, [r3, #32]
}
 800c216:	46c0      	nop			@ (mov r8, r8)
 800c218:	46bd      	mov	sp, r7
 800c21a:	b006      	add	sp, #24
 800c21c:	bd80      	pop	{r7, pc}
	...

0800c220 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c220:	b580      	push	{r7, lr}
 800c222:	b084      	sub	sp, #16
 800c224:	af00      	add	r7, sp, #0
 800c226:	6078      	str	r0, [r7, #4]
 800c228:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c22a:	2300      	movs	r3, #0
 800c22c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	223c      	movs	r2, #60	@ 0x3c
 800c232:	5c9b      	ldrb	r3, [r3, r2]
 800c234:	2b01      	cmp	r3, #1
 800c236:	d101      	bne.n	800c23c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c238:	2302      	movs	r3, #2
 800c23a:	e06f      	b.n	800c31c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	223c      	movs	r2, #60	@ 0x3c
 800c240:	2101      	movs	r1, #1
 800c242:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	22ff      	movs	r2, #255	@ 0xff
 800c248:	4393      	bics	r3, r2
 800c24a:	001a      	movs	r2, r3
 800c24c:	683b      	ldr	r3, [r7, #0]
 800c24e:	68db      	ldr	r3, [r3, #12]
 800c250:	4313      	orrs	r3, r2
 800c252:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	4a33      	ldr	r2, [pc, #204]	@ (800c324 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 800c258:	401a      	ands	r2, r3
 800c25a:	683b      	ldr	r3, [r7, #0]
 800c25c:	689b      	ldr	r3, [r3, #8]
 800c25e:	4313      	orrs	r3, r2
 800c260:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	4a30      	ldr	r2, [pc, #192]	@ (800c328 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800c266:	401a      	ands	r2, r3
 800c268:	683b      	ldr	r3, [r7, #0]
 800c26a:	685b      	ldr	r3, [r3, #4]
 800c26c:	4313      	orrs	r3, r2
 800c26e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	4a2e      	ldr	r2, [pc, #184]	@ (800c32c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 800c274:	401a      	ands	r2, r3
 800c276:	683b      	ldr	r3, [r7, #0]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	4313      	orrs	r3, r2
 800c27c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	4a2b      	ldr	r2, [pc, #172]	@ (800c330 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800c282:	401a      	ands	r2, r3
 800c284:	683b      	ldr	r3, [r7, #0]
 800c286:	691b      	ldr	r3, [r3, #16]
 800c288:	4313      	orrs	r3, r2
 800c28a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	4a29      	ldr	r2, [pc, #164]	@ (800c334 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800c290:	401a      	ands	r2, r3
 800c292:	683b      	ldr	r3, [r7, #0]
 800c294:	695b      	ldr	r3, [r3, #20]
 800c296:	4313      	orrs	r3, r2
 800c298:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	4a26      	ldr	r2, [pc, #152]	@ (800c338 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800c29e:	401a      	ands	r2, r3
 800c2a0:	683b      	ldr	r3, [r7, #0]
 800c2a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c2a4:	4313      	orrs	r3, r2
 800c2a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	4a24      	ldr	r2, [pc, #144]	@ (800c33c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800c2ac:	401a      	ands	r2, r3
 800c2ae:	683b      	ldr	r3, [r7, #0]
 800c2b0:	699b      	ldr	r3, [r3, #24]
 800c2b2:	041b      	lsls	r3, r3, #16
 800c2b4:	4313      	orrs	r3, r2
 800c2b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	4a21      	ldr	r2, [pc, #132]	@ (800c340 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800c2bc:	401a      	ands	r2, r3
 800c2be:	683b      	ldr	r3, [r7, #0]
 800c2c0:	69db      	ldr	r3, [r3, #28]
 800c2c2:	4313      	orrs	r3, r2
 800c2c4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	4a1e      	ldr	r2, [pc, #120]	@ (800c344 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800c2cc:	4293      	cmp	r3, r2
 800c2ce:	d11c      	bne.n	800c30a <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	4a1d      	ldr	r2, [pc, #116]	@ (800c348 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800c2d4:	401a      	ands	r2, r3
 800c2d6:	683b      	ldr	r3, [r7, #0]
 800c2d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2da:	051b      	lsls	r3, r3, #20
 800c2dc:	4313      	orrs	r3, r2
 800c2de:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	4a1a      	ldr	r2, [pc, #104]	@ (800c34c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800c2e4:	401a      	ands	r2, r3
 800c2e6:	683b      	ldr	r3, [r7, #0]
 800c2e8:	6a1b      	ldr	r3, [r3, #32]
 800c2ea:	4313      	orrs	r3, r2
 800c2ec:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	4a17      	ldr	r2, [pc, #92]	@ (800c350 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800c2f2:	401a      	ands	r2, r3
 800c2f4:	683b      	ldr	r3, [r7, #0]
 800c2f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2f8:	4313      	orrs	r3, r2
 800c2fa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	4a15      	ldr	r2, [pc, #84]	@ (800c354 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800c300:	401a      	ands	r2, r3
 800c302:	683b      	ldr	r3, [r7, #0]
 800c304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c306:	4313      	orrs	r3, r2
 800c308:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	68fa      	ldr	r2, [r7, #12]
 800c310:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	223c      	movs	r2, #60	@ 0x3c
 800c316:	2100      	movs	r1, #0
 800c318:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c31a:	2300      	movs	r3, #0
}
 800c31c:	0018      	movs	r0, r3
 800c31e:	46bd      	mov	sp, r7
 800c320:	b004      	add	sp, #16
 800c322:	bd80      	pop	{r7, pc}
 800c324:	fffffcff 	.word	0xfffffcff
 800c328:	fffffbff 	.word	0xfffffbff
 800c32c:	fffff7ff 	.word	0xfffff7ff
 800c330:	ffffefff 	.word	0xffffefff
 800c334:	ffffdfff 	.word	0xffffdfff
 800c338:	ffffbfff 	.word	0xffffbfff
 800c33c:	fff0ffff 	.word	0xfff0ffff
 800c340:	efffffff 	.word	0xefffffff
 800c344:	40012c00 	.word	0x40012c00
 800c348:	ff0fffff 	.word	0xff0fffff
 800c34c:	feffffff 	.word	0xfeffffff
 800c350:	fdffffff 	.word	0xfdffffff
 800c354:	dfffffff 	.word	0xdfffffff

0800c358 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c358:	b580      	push	{r7, lr}
 800c35a:	b082      	sub	sp, #8
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d101      	bne.n	800c36a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c366:	2301      	movs	r3, #1
 800c368:	e046      	b.n	800c3f8 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	2288      	movs	r2, #136	@ 0x88
 800c36e:	589b      	ldr	r3, [r3, r2]
 800c370:	2b00      	cmp	r3, #0
 800c372:	d107      	bne.n	800c384 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	2284      	movs	r2, #132	@ 0x84
 800c378:	2100      	movs	r1, #0
 800c37a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	0018      	movs	r0, r3
 800c380:	f7fa febe 	bl	8007100 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	2288      	movs	r2, #136	@ 0x88
 800c388:	2124      	movs	r1, #36	@ 0x24
 800c38a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	681a      	ldr	r2, [r3, #0]
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	2101      	movs	r1, #1
 800c398:	438a      	bics	r2, r1
 800c39a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d003      	beq.n	800c3ac <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	0018      	movs	r0, r3
 800c3a8:	f000 fd0c 	bl	800cdc4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	0018      	movs	r0, r3
 800c3b0:	f000 f9b2 	bl	800c718 <UART_SetConfig>
 800c3b4:	0003      	movs	r3, r0
 800c3b6:	2b01      	cmp	r3, #1
 800c3b8:	d101      	bne.n	800c3be <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800c3ba:	2301      	movs	r3, #1
 800c3bc:	e01c      	b.n	800c3f8 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	685a      	ldr	r2, [r3, #4]
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	490d      	ldr	r1, [pc, #52]	@ (800c400 <HAL_UART_Init+0xa8>)
 800c3ca:	400a      	ands	r2, r1
 800c3cc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	689a      	ldr	r2, [r3, #8]
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	212a      	movs	r1, #42	@ 0x2a
 800c3da:	438a      	bics	r2, r1
 800c3dc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	681a      	ldr	r2, [r3, #0]
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	2101      	movs	r1, #1
 800c3ea:	430a      	orrs	r2, r1
 800c3ec:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	0018      	movs	r0, r3
 800c3f2:	f000 fd9b 	bl	800cf2c <UART_CheckIdleState>
 800c3f6:	0003      	movs	r3, r0
}
 800c3f8:	0018      	movs	r0, r3
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	b002      	add	sp, #8
 800c3fe:	bd80      	pop	{r7, pc}
 800c400:	ffffb7ff 	.word	0xffffb7ff

0800c404 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c404:	b580      	push	{r7, lr}
 800c406:	b08a      	sub	sp, #40	@ 0x28
 800c408:	af02      	add	r7, sp, #8
 800c40a:	60f8      	str	r0, [r7, #12]
 800c40c:	60b9      	str	r1, [r7, #8]
 800c40e:	603b      	str	r3, [r7, #0]
 800c410:	1dbb      	adds	r3, r7, #6
 800c412:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	2288      	movs	r2, #136	@ 0x88
 800c418:	589b      	ldr	r3, [r3, r2]
 800c41a:	2b20      	cmp	r3, #32
 800c41c:	d000      	beq.n	800c420 <HAL_UART_Transmit+0x1c>
 800c41e:	e090      	b.n	800c542 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c420:	68bb      	ldr	r3, [r7, #8]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d003      	beq.n	800c42e <HAL_UART_Transmit+0x2a>
 800c426:	1dbb      	adds	r3, r7, #6
 800c428:	881b      	ldrh	r3, [r3, #0]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d101      	bne.n	800c432 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800c42e:	2301      	movs	r3, #1
 800c430:	e088      	b.n	800c544 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	689a      	ldr	r2, [r3, #8]
 800c436:	2380      	movs	r3, #128	@ 0x80
 800c438:	015b      	lsls	r3, r3, #5
 800c43a:	429a      	cmp	r2, r3
 800c43c:	d109      	bne.n	800c452 <HAL_UART_Transmit+0x4e>
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	691b      	ldr	r3, [r3, #16]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d105      	bne.n	800c452 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800c446:	68bb      	ldr	r3, [r7, #8]
 800c448:	2201      	movs	r2, #1
 800c44a:	4013      	ands	r3, r2
 800c44c:	d001      	beq.n	800c452 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800c44e:	2301      	movs	r3, #1
 800c450:	e078      	b.n	800c544 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	2290      	movs	r2, #144	@ 0x90
 800c456:	2100      	movs	r1, #0
 800c458:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	2288      	movs	r2, #136	@ 0x88
 800c45e:	2121      	movs	r1, #33	@ 0x21
 800c460:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c462:	f7fb fdef 	bl	8008044 <HAL_GetTick>
 800c466:	0003      	movs	r3, r0
 800c468:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	1dba      	adds	r2, r7, #6
 800c46e:	2154      	movs	r1, #84	@ 0x54
 800c470:	8812      	ldrh	r2, [r2, #0]
 800c472:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	1dba      	adds	r2, r7, #6
 800c478:	2156      	movs	r1, #86	@ 0x56
 800c47a:	8812      	ldrh	r2, [r2, #0]
 800c47c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	689a      	ldr	r2, [r3, #8]
 800c482:	2380      	movs	r3, #128	@ 0x80
 800c484:	015b      	lsls	r3, r3, #5
 800c486:	429a      	cmp	r2, r3
 800c488:	d108      	bne.n	800c49c <HAL_UART_Transmit+0x98>
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	691b      	ldr	r3, [r3, #16]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d104      	bne.n	800c49c <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800c492:	2300      	movs	r3, #0
 800c494:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c496:	68bb      	ldr	r3, [r7, #8]
 800c498:	61bb      	str	r3, [r7, #24]
 800c49a:	e003      	b.n	800c4a4 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 800c49c:	68bb      	ldr	r3, [r7, #8]
 800c49e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c4a4:	e030      	b.n	800c508 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c4a6:	697a      	ldr	r2, [r7, #20]
 800c4a8:	68f8      	ldr	r0, [r7, #12]
 800c4aa:	683b      	ldr	r3, [r7, #0]
 800c4ac:	9300      	str	r3, [sp, #0]
 800c4ae:	0013      	movs	r3, r2
 800c4b0:	2200      	movs	r2, #0
 800c4b2:	2180      	movs	r1, #128	@ 0x80
 800c4b4:	f000 fde4 	bl	800d080 <UART_WaitOnFlagUntilTimeout>
 800c4b8:	1e03      	subs	r3, r0, #0
 800c4ba:	d005      	beq.n	800c4c8 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	2288      	movs	r2, #136	@ 0x88
 800c4c0:	2120      	movs	r1, #32
 800c4c2:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 800c4c4:	2303      	movs	r3, #3
 800c4c6:	e03d      	b.n	800c544 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 800c4c8:	69fb      	ldr	r3, [r7, #28]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d10b      	bne.n	800c4e6 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c4ce:	69bb      	ldr	r3, [r7, #24]
 800c4d0:	881b      	ldrh	r3, [r3, #0]
 800c4d2:	001a      	movs	r2, r3
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	05d2      	lsls	r2, r2, #23
 800c4da:	0dd2      	lsrs	r2, r2, #23
 800c4dc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800c4de:	69bb      	ldr	r3, [r7, #24]
 800c4e0:	3302      	adds	r3, #2
 800c4e2:	61bb      	str	r3, [r7, #24]
 800c4e4:	e007      	b.n	800c4f6 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c4e6:	69fb      	ldr	r3, [r7, #28]
 800c4e8:	781a      	ldrb	r2, [r3, #0]
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800c4f0:	69fb      	ldr	r3, [r7, #28]
 800c4f2:	3301      	adds	r3, #1
 800c4f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	2256      	movs	r2, #86	@ 0x56
 800c4fa:	5a9b      	ldrh	r3, [r3, r2]
 800c4fc:	b29b      	uxth	r3, r3
 800c4fe:	3b01      	subs	r3, #1
 800c500:	b299      	uxth	r1, r3
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	2256      	movs	r2, #86	@ 0x56
 800c506:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	2256      	movs	r2, #86	@ 0x56
 800c50c:	5a9b      	ldrh	r3, [r3, r2]
 800c50e:	b29b      	uxth	r3, r3
 800c510:	2b00      	cmp	r3, #0
 800c512:	d1c8      	bne.n	800c4a6 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c514:	697a      	ldr	r2, [r7, #20]
 800c516:	68f8      	ldr	r0, [r7, #12]
 800c518:	683b      	ldr	r3, [r7, #0]
 800c51a:	9300      	str	r3, [sp, #0]
 800c51c:	0013      	movs	r3, r2
 800c51e:	2200      	movs	r2, #0
 800c520:	2140      	movs	r1, #64	@ 0x40
 800c522:	f000 fdad 	bl	800d080 <UART_WaitOnFlagUntilTimeout>
 800c526:	1e03      	subs	r3, r0, #0
 800c528:	d005      	beq.n	800c536 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	2288      	movs	r2, #136	@ 0x88
 800c52e:	2120      	movs	r1, #32
 800c530:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 800c532:	2303      	movs	r3, #3
 800c534:	e006      	b.n	800c544 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	2288      	movs	r2, #136	@ 0x88
 800c53a:	2120      	movs	r1, #32
 800c53c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800c53e:	2300      	movs	r3, #0
 800c540:	e000      	b.n	800c544 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 800c542:	2302      	movs	r3, #2
  }
}
 800c544:	0018      	movs	r0, r3
 800c546:	46bd      	mov	sp, r7
 800c548:	b008      	add	sp, #32
 800c54a:	bd80      	pop	{r7, pc}

0800c54c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c54c:	b580      	push	{r7, lr}
 800c54e:	b08a      	sub	sp, #40	@ 0x28
 800c550:	af02      	add	r7, sp, #8
 800c552:	60f8      	str	r0, [r7, #12]
 800c554:	60b9      	str	r1, [r7, #8]
 800c556:	603b      	str	r3, [r7, #0]
 800c558:	1dbb      	adds	r3, r7, #6
 800c55a:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	228c      	movs	r2, #140	@ 0x8c
 800c560:	589b      	ldr	r3, [r3, r2]
 800c562:	2b20      	cmp	r3, #32
 800c564:	d000      	beq.n	800c568 <HAL_UART_Receive+0x1c>
 800c566:	e0d0      	b.n	800c70a <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 800c568:	68bb      	ldr	r3, [r7, #8]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d003      	beq.n	800c576 <HAL_UART_Receive+0x2a>
 800c56e:	1dbb      	adds	r3, r7, #6
 800c570:	881b      	ldrh	r3, [r3, #0]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d101      	bne.n	800c57a <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 800c576:	2301      	movs	r3, #1
 800c578:	e0c8      	b.n	800c70c <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	689a      	ldr	r2, [r3, #8]
 800c57e:	2380      	movs	r3, #128	@ 0x80
 800c580:	015b      	lsls	r3, r3, #5
 800c582:	429a      	cmp	r2, r3
 800c584:	d109      	bne.n	800c59a <HAL_UART_Receive+0x4e>
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	691b      	ldr	r3, [r3, #16]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d105      	bne.n	800c59a <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800c58e:	68bb      	ldr	r3, [r7, #8]
 800c590:	2201      	movs	r2, #1
 800c592:	4013      	ands	r3, r2
 800c594:	d001      	beq.n	800c59a <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 800c596:	2301      	movs	r3, #1
 800c598:	e0b8      	b.n	800c70c <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	2290      	movs	r2, #144	@ 0x90
 800c59e:	2100      	movs	r1, #0
 800c5a0:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	228c      	movs	r2, #140	@ 0x8c
 800c5a6:	2122      	movs	r1, #34	@ 0x22
 800c5a8:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	2200      	movs	r2, #0
 800c5ae:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c5b0:	f7fb fd48 	bl	8008044 <HAL_GetTick>
 800c5b4:	0003      	movs	r3, r0
 800c5b6:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	1dba      	adds	r2, r7, #6
 800c5bc:	215c      	movs	r1, #92	@ 0x5c
 800c5be:	8812      	ldrh	r2, [r2, #0]
 800c5c0:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	1dba      	adds	r2, r7, #6
 800c5c6:	215e      	movs	r1, #94	@ 0x5e
 800c5c8:	8812      	ldrh	r2, [r2, #0]
 800c5ca:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	689a      	ldr	r2, [r3, #8]
 800c5d0:	2380      	movs	r3, #128	@ 0x80
 800c5d2:	015b      	lsls	r3, r3, #5
 800c5d4:	429a      	cmp	r2, r3
 800c5d6:	d10d      	bne.n	800c5f4 <HAL_UART_Receive+0xa8>
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	691b      	ldr	r3, [r3, #16]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d104      	bne.n	800c5ea <HAL_UART_Receive+0x9e>
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	2260      	movs	r2, #96	@ 0x60
 800c5e4:	494b      	ldr	r1, [pc, #300]	@ (800c714 <HAL_UART_Receive+0x1c8>)
 800c5e6:	5299      	strh	r1, [r3, r2]
 800c5e8:	e02e      	b.n	800c648 <HAL_UART_Receive+0xfc>
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	2260      	movs	r2, #96	@ 0x60
 800c5ee:	21ff      	movs	r1, #255	@ 0xff
 800c5f0:	5299      	strh	r1, [r3, r2]
 800c5f2:	e029      	b.n	800c648 <HAL_UART_Receive+0xfc>
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	689b      	ldr	r3, [r3, #8]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d10d      	bne.n	800c618 <HAL_UART_Receive+0xcc>
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	691b      	ldr	r3, [r3, #16]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d104      	bne.n	800c60e <HAL_UART_Receive+0xc2>
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	2260      	movs	r2, #96	@ 0x60
 800c608:	21ff      	movs	r1, #255	@ 0xff
 800c60a:	5299      	strh	r1, [r3, r2]
 800c60c:	e01c      	b.n	800c648 <HAL_UART_Receive+0xfc>
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	2260      	movs	r2, #96	@ 0x60
 800c612:	217f      	movs	r1, #127	@ 0x7f
 800c614:	5299      	strh	r1, [r3, r2]
 800c616:	e017      	b.n	800c648 <HAL_UART_Receive+0xfc>
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	689a      	ldr	r2, [r3, #8]
 800c61c:	2380      	movs	r3, #128	@ 0x80
 800c61e:	055b      	lsls	r3, r3, #21
 800c620:	429a      	cmp	r2, r3
 800c622:	d10d      	bne.n	800c640 <HAL_UART_Receive+0xf4>
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	691b      	ldr	r3, [r3, #16]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d104      	bne.n	800c636 <HAL_UART_Receive+0xea>
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	2260      	movs	r2, #96	@ 0x60
 800c630:	217f      	movs	r1, #127	@ 0x7f
 800c632:	5299      	strh	r1, [r3, r2]
 800c634:	e008      	b.n	800c648 <HAL_UART_Receive+0xfc>
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	2260      	movs	r2, #96	@ 0x60
 800c63a:	213f      	movs	r1, #63	@ 0x3f
 800c63c:	5299      	strh	r1, [r3, r2]
 800c63e:	e003      	b.n	800c648 <HAL_UART_Receive+0xfc>
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	2260      	movs	r2, #96	@ 0x60
 800c644:	2100      	movs	r1, #0
 800c646:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 800c648:	2312      	movs	r3, #18
 800c64a:	18fb      	adds	r3, r7, r3
 800c64c:	68fa      	ldr	r2, [r7, #12]
 800c64e:	2160      	movs	r1, #96	@ 0x60
 800c650:	5a52      	ldrh	r2, [r2, r1]
 800c652:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	689a      	ldr	r2, [r3, #8]
 800c658:	2380      	movs	r3, #128	@ 0x80
 800c65a:	015b      	lsls	r3, r3, #5
 800c65c:	429a      	cmp	r2, r3
 800c65e:	d108      	bne.n	800c672 <HAL_UART_Receive+0x126>
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	691b      	ldr	r3, [r3, #16]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d104      	bne.n	800c672 <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 800c668:	2300      	movs	r3, #0
 800c66a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800c66c:	68bb      	ldr	r3, [r7, #8]
 800c66e:	61bb      	str	r3, [r7, #24]
 800c670:	e003      	b.n	800c67a <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 800c672:	68bb      	ldr	r3, [r7, #8]
 800c674:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c676:	2300      	movs	r3, #0
 800c678:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800c67a:	e03a      	b.n	800c6f2 <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800c67c:	697a      	ldr	r2, [r7, #20]
 800c67e:	68f8      	ldr	r0, [r7, #12]
 800c680:	683b      	ldr	r3, [r7, #0]
 800c682:	9300      	str	r3, [sp, #0]
 800c684:	0013      	movs	r3, r2
 800c686:	2200      	movs	r2, #0
 800c688:	2120      	movs	r1, #32
 800c68a:	f000 fcf9 	bl	800d080 <UART_WaitOnFlagUntilTimeout>
 800c68e:	1e03      	subs	r3, r0, #0
 800c690:	d005      	beq.n	800c69e <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	228c      	movs	r2, #140	@ 0x8c
 800c696:	2120      	movs	r1, #32
 800c698:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 800c69a:	2303      	movs	r3, #3
 800c69c:	e036      	b.n	800c70c <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 800c69e:	69fb      	ldr	r3, [r7, #28]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d10e      	bne.n	800c6c2 <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6aa:	b29b      	uxth	r3, r3
 800c6ac:	2212      	movs	r2, #18
 800c6ae:	18ba      	adds	r2, r7, r2
 800c6b0:	8812      	ldrh	r2, [r2, #0]
 800c6b2:	4013      	ands	r3, r2
 800c6b4:	b29a      	uxth	r2, r3
 800c6b6:	69bb      	ldr	r3, [r7, #24]
 800c6b8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800c6ba:	69bb      	ldr	r3, [r7, #24]
 800c6bc:	3302      	adds	r3, #2
 800c6be:	61bb      	str	r3, [r7, #24]
 800c6c0:	e00e      	b.n	800c6e0 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6c8:	b2db      	uxtb	r3, r3
 800c6ca:	2212      	movs	r2, #18
 800c6cc:	18ba      	adds	r2, r7, r2
 800c6ce:	8812      	ldrh	r2, [r2, #0]
 800c6d0:	b2d2      	uxtb	r2, r2
 800c6d2:	4013      	ands	r3, r2
 800c6d4:	b2da      	uxtb	r2, r3
 800c6d6:	69fb      	ldr	r3, [r7, #28]
 800c6d8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800c6da:	69fb      	ldr	r3, [r7, #28]
 800c6dc:	3301      	adds	r3, #1
 800c6de:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	225e      	movs	r2, #94	@ 0x5e
 800c6e4:	5a9b      	ldrh	r3, [r3, r2]
 800c6e6:	b29b      	uxth	r3, r3
 800c6e8:	3b01      	subs	r3, #1
 800c6ea:	b299      	uxth	r1, r3
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	225e      	movs	r2, #94	@ 0x5e
 800c6f0:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	225e      	movs	r2, #94	@ 0x5e
 800c6f6:	5a9b      	ldrh	r3, [r3, r2]
 800c6f8:	b29b      	uxth	r3, r3
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d1be      	bne.n	800c67c <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	228c      	movs	r2, #140	@ 0x8c
 800c702:	2120      	movs	r1, #32
 800c704:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800c706:	2300      	movs	r3, #0
 800c708:	e000      	b.n	800c70c <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 800c70a:	2302      	movs	r3, #2
  }
}
 800c70c:	0018      	movs	r0, r3
 800c70e:	46bd      	mov	sp, r7
 800c710:	b008      	add	sp, #32
 800c712:	bd80      	pop	{r7, pc}
 800c714:	000001ff 	.word	0x000001ff

0800c718 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c718:	b5b0      	push	{r4, r5, r7, lr}
 800c71a:	b090      	sub	sp, #64	@ 0x40
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c720:	231a      	movs	r3, #26
 800c722:	2220      	movs	r2, #32
 800c724:	189b      	adds	r3, r3, r2
 800c726:	19db      	adds	r3, r3, r7
 800c728:	2200      	movs	r2, #0
 800c72a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c72c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c72e:	689a      	ldr	r2, [r3, #8]
 800c730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c732:	691b      	ldr	r3, [r3, #16]
 800c734:	431a      	orrs	r2, r3
 800c736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c738:	695b      	ldr	r3, [r3, #20]
 800c73a:	431a      	orrs	r2, r3
 800c73c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c73e:	69db      	ldr	r3, [r3, #28]
 800c740:	4313      	orrs	r3, r2
 800c742:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	4ac1      	ldr	r2, [pc, #772]	@ (800ca50 <UART_SetConfig+0x338>)
 800c74c:	4013      	ands	r3, r2
 800c74e:	0019      	movs	r1, r3
 800c750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c752:	681a      	ldr	r2, [r3, #0]
 800c754:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c756:	430b      	orrs	r3, r1
 800c758:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c75a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	685b      	ldr	r3, [r3, #4]
 800c760:	4abc      	ldr	r2, [pc, #752]	@ (800ca54 <UART_SetConfig+0x33c>)
 800c762:	4013      	ands	r3, r2
 800c764:	0018      	movs	r0, r3
 800c766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c768:	68d9      	ldr	r1, [r3, #12]
 800c76a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c76c:	681a      	ldr	r2, [r3, #0]
 800c76e:	0003      	movs	r3, r0
 800c770:	430b      	orrs	r3, r1
 800c772:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c776:	699b      	ldr	r3, [r3, #24]
 800c778:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c77a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	4ab6      	ldr	r2, [pc, #728]	@ (800ca58 <UART_SetConfig+0x340>)
 800c780:	4293      	cmp	r3, r2
 800c782:	d009      	beq.n	800c798 <UART_SetConfig+0x80>
 800c784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	4ab4      	ldr	r2, [pc, #720]	@ (800ca5c <UART_SetConfig+0x344>)
 800c78a:	4293      	cmp	r3, r2
 800c78c:	d004      	beq.n	800c798 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c78e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c790:	6a1b      	ldr	r3, [r3, #32]
 800c792:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c794:	4313      	orrs	r3, r2
 800c796:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	689b      	ldr	r3, [r3, #8]
 800c79e:	4ab0      	ldr	r2, [pc, #704]	@ (800ca60 <UART_SetConfig+0x348>)
 800c7a0:	4013      	ands	r3, r2
 800c7a2:	0019      	movs	r1, r3
 800c7a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7a6:	681a      	ldr	r2, [r3, #0]
 800c7a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c7aa:	430b      	orrs	r3, r1
 800c7ac:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c7ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7b4:	220f      	movs	r2, #15
 800c7b6:	4393      	bics	r3, r2
 800c7b8:	0018      	movs	r0, r3
 800c7ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7bc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800c7be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7c0:	681a      	ldr	r2, [r3, #0]
 800c7c2:	0003      	movs	r3, r0
 800c7c4:	430b      	orrs	r3, r1
 800c7c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c7c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	4aa5      	ldr	r2, [pc, #660]	@ (800ca64 <UART_SetConfig+0x34c>)
 800c7ce:	4293      	cmp	r3, r2
 800c7d0:	d131      	bne.n	800c836 <UART_SetConfig+0x11e>
 800c7d2:	4ba5      	ldr	r3, [pc, #660]	@ (800ca68 <UART_SetConfig+0x350>)
 800c7d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c7d6:	2203      	movs	r2, #3
 800c7d8:	4013      	ands	r3, r2
 800c7da:	2b03      	cmp	r3, #3
 800c7dc:	d01d      	beq.n	800c81a <UART_SetConfig+0x102>
 800c7de:	d823      	bhi.n	800c828 <UART_SetConfig+0x110>
 800c7e0:	2b02      	cmp	r3, #2
 800c7e2:	d00c      	beq.n	800c7fe <UART_SetConfig+0xe6>
 800c7e4:	d820      	bhi.n	800c828 <UART_SetConfig+0x110>
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d002      	beq.n	800c7f0 <UART_SetConfig+0xd8>
 800c7ea:	2b01      	cmp	r3, #1
 800c7ec:	d00e      	beq.n	800c80c <UART_SetConfig+0xf4>
 800c7ee:	e01b      	b.n	800c828 <UART_SetConfig+0x110>
 800c7f0:	231b      	movs	r3, #27
 800c7f2:	2220      	movs	r2, #32
 800c7f4:	189b      	adds	r3, r3, r2
 800c7f6:	19db      	adds	r3, r3, r7
 800c7f8:	2200      	movs	r2, #0
 800c7fa:	701a      	strb	r2, [r3, #0]
 800c7fc:	e154      	b.n	800caa8 <UART_SetConfig+0x390>
 800c7fe:	231b      	movs	r3, #27
 800c800:	2220      	movs	r2, #32
 800c802:	189b      	adds	r3, r3, r2
 800c804:	19db      	adds	r3, r3, r7
 800c806:	2202      	movs	r2, #2
 800c808:	701a      	strb	r2, [r3, #0]
 800c80a:	e14d      	b.n	800caa8 <UART_SetConfig+0x390>
 800c80c:	231b      	movs	r3, #27
 800c80e:	2220      	movs	r2, #32
 800c810:	189b      	adds	r3, r3, r2
 800c812:	19db      	adds	r3, r3, r7
 800c814:	2204      	movs	r2, #4
 800c816:	701a      	strb	r2, [r3, #0]
 800c818:	e146      	b.n	800caa8 <UART_SetConfig+0x390>
 800c81a:	231b      	movs	r3, #27
 800c81c:	2220      	movs	r2, #32
 800c81e:	189b      	adds	r3, r3, r2
 800c820:	19db      	adds	r3, r3, r7
 800c822:	2208      	movs	r2, #8
 800c824:	701a      	strb	r2, [r3, #0]
 800c826:	e13f      	b.n	800caa8 <UART_SetConfig+0x390>
 800c828:	231b      	movs	r3, #27
 800c82a:	2220      	movs	r2, #32
 800c82c:	189b      	adds	r3, r3, r2
 800c82e:	19db      	adds	r3, r3, r7
 800c830:	2210      	movs	r2, #16
 800c832:	701a      	strb	r2, [r3, #0]
 800c834:	e138      	b.n	800caa8 <UART_SetConfig+0x390>
 800c836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	4a8c      	ldr	r2, [pc, #560]	@ (800ca6c <UART_SetConfig+0x354>)
 800c83c:	4293      	cmp	r3, r2
 800c83e:	d131      	bne.n	800c8a4 <UART_SetConfig+0x18c>
 800c840:	4b89      	ldr	r3, [pc, #548]	@ (800ca68 <UART_SetConfig+0x350>)
 800c842:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c844:	220c      	movs	r2, #12
 800c846:	4013      	ands	r3, r2
 800c848:	2b0c      	cmp	r3, #12
 800c84a:	d01d      	beq.n	800c888 <UART_SetConfig+0x170>
 800c84c:	d823      	bhi.n	800c896 <UART_SetConfig+0x17e>
 800c84e:	2b08      	cmp	r3, #8
 800c850:	d00c      	beq.n	800c86c <UART_SetConfig+0x154>
 800c852:	d820      	bhi.n	800c896 <UART_SetConfig+0x17e>
 800c854:	2b00      	cmp	r3, #0
 800c856:	d002      	beq.n	800c85e <UART_SetConfig+0x146>
 800c858:	2b04      	cmp	r3, #4
 800c85a:	d00e      	beq.n	800c87a <UART_SetConfig+0x162>
 800c85c:	e01b      	b.n	800c896 <UART_SetConfig+0x17e>
 800c85e:	231b      	movs	r3, #27
 800c860:	2220      	movs	r2, #32
 800c862:	189b      	adds	r3, r3, r2
 800c864:	19db      	adds	r3, r3, r7
 800c866:	2200      	movs	r2, #0
 800c868:	701a      	strb	r2, [r3, #0]
 800c86a:	e11d      	b.n	800caa8 <UART_SetConfig+0x390>
 800c86c:	231b      	movs	r3, #27
 800c86e:	2220      	movs	r2, #32
 800c870:	189b      	adds	r3, r3, r2
 800c872:	19db      	adds	r3, r3, r7
 800c874:	2202      	movs	r2, #2
 800c876:	701a      	strb	r2, [r3, #0]
 800c878:	e116      	b.n	800caa8 <UART_SetConfig+0x390>
 800c87a:	231b      	movs	r3, #27
 800c87c:	2220      	movs	r2, #32
 800c87e:	189b      	adds	r3, r3, r2
 800c880:	19db      	adds	r3, r3, r7
 800c882:	2204      	movs	r2, #4
 800c884:	701a      	strb	r2, [r3, #0]
 800c886:	e10f      	b.n	800caa8 <UART_SetConfig+0x390>
 800c888:	231b      	movs	r3, #27
 800c88a:	2220      	movs	r2, #32
 800c88c:	189b      	adds	r3, r3, r2
 800c88e:	19db      	adds	r3, r3, r7
 800c890:	2208      	movs	r2, #8
 800c892:	701a      	strb	r2, [r3, #0]
 800c894:	e108      	b.n	800caa8 <UART_SetConfig+0x390>
 800c896:	231b      	movs	r3, #27
 800c898:	2220      	movs	r2, #32
 800c89a:	189b      	adds	r3, r3, r2
 800c89c:	19db      	adds	r3, r3, r7
 800c89e:	2210      	movs	r2, #16
 800c8a0:	701a      	strb	r2, [r3, #0]
 800c8a2:	e101      	b.n	800caa8 <UART_SetConfig+0x390>
 800c8a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	4a71      	ldr	r2, [pc, #452]	@ (800ca70 <UART_SetConfig+0x358>)
 800c8aa:	4293      	cmp	r3, r2
 800c8ac:	d131      	bne.n	800c912 <UART_SetConfig+0x1fa>
 800c8ae:	4b6e      	ldr	r3, [pc, #440]	@ (800ca68 <UART_SetConfig+0x350>)
 800c8b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c8b2:	2230      	movs	r2, #48	@ 0x30
 800c8b4:	4013      	ands	r3, r2
 800c8b6:	2b30      	cmp	r3, #48	@ 0x30
 800c8b8:	d01d      	beq.n	800c8f6 <UART_SetConfig+0x1de>
 800c8ba:	d823      	bhi.n	800c904 <UART_SetConfig+0x1ec>
 800c8bc:	2b20      	cmp	r3, #32
 800c8be:	d00c      	beq.n	800c8da <UART_SetConfig+0x1c2>
 800c8c0:	d820      	bhi.n	800c904 <UART_SetConfig+0x1ec>
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d002      	beq.n	800c8cc <UART_SetConfig+0x1b4>
 800c8c6:	2b10      	cmp	r3, #16
 800c8c8:	d00e      	beq.n	800c8e8 <UART_SetConfig+0x1d0>
 800c8ca:	e01b      	b.n	800c904 <UART_SetConfig+0x1ec>
 800c8cc:	231b      	movs	r3, #27
 800c8ce:	2220      	movs	r2, #32
 800c8d0:	189b      	adds	r3, r3, r2
 800c8d2:	19db      	adds	r3, r3, r7
 800c8d4:	2200      	movs	r2, #0
 800c8d6:	701a      	strb	r2, [r3, #0]
 800c8d8:	e0e6      	b.n	800caa8 <UART_SetConfig+0x390>
 800c8da:	231b      	movs	r3, #27
 800c8dc:	2220      	movs	r2, #32
 800c8de:	189b      	adds	r3, r3, r2
 800c8e0:	19db      	adds	r3, r3, r7
 800c8e2:	2202      	movs	r2, #2
 800c8e4:	701a      	strb	r2, [r3, #0]
 800c8e6:	e0df      	b.n	800caa8 <UART_SetConfig+0x390>
 800c8e8:	231b      	movs	r3, #27
 800c8ea:	2220      	movs	r2, #32
 800c8ec:	189b      	adds	r3, r3, r2
 800c8ee:	19db      	adds	r3, r3, r7
 800c8f0:	2204      	movs	r2, #4
 800c8f2:	701a      	strb	r2, [r3, #0]
 800c8f4:	e0d8      	b.n	800caa8 <UART_SetConfig+0x390>
 800c8f6:	231b      	movs	r3, #27
 800c8f8:	2220      	movs	r2, #32
 800c8fa:	189b      	adds	r3, r3, r2
 800c8fc:	19db      	adds	r3, r3, r7
 800c8fe:	2208      	movs	r2, #8
 800c900:	701a      	strb	r2, [r3, #0]
 800c902:	e0d1      	b.n	800caa8 <UART_SetConfig+0x390>
 800c904:	231b      	movs	r3, #27
 800c906:	2220      	movs	r2, #32
 800c908:	189b      	adds	r3, r3, r2
 800c90a:	19db      	adds	r3, r3, r7
 800c90c:	2210      	movs	r2, #16
 800c90e:	701a      	strb	r2, [r3, #0]
 800c910:	e0ca      	b.n	800caa8 <UART_SetConfig+0x390>
 800c912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	4a57      	ldr	r2, [pc, #348]	@ (800ca74 <UART_SetConfig+0x35c>)
 800c918:	4293      	cmp	r3, r2
 800c91a:	d106      	bne.n	800c92a <UART_SetConfig+0x212>
 800c91c:	231b      	movs	r3, #27
 800c91e:	2220      	movs	r2, #32
 800c920:	189b      	adds	r3, r3, r2
 800c922:	19db      	adds	r3, r3, r7
 800c924:	2200      	movs	r2, #0
 800c926:	701a      	strb	r2, [r3, #0]
 800c928:	e0be      	b.n	800caa8 <UART_SetConfig+0x390>
 800c92a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	4a52      	ldr	r2, [pc, #328]	@ (800ca78 <UART_SetConfig+0x360>)
 800c930:	4293      	cmp	r3, r2
 800c932:	d106      	bne.n	800c942 <UART_SetConfig+0x22a>
 800c934:	231b      	movs	r3, #27
 800c936:	2220      	movs	r2, #32
 800c938:	189b      	adds	r3, r3, r2
 800c93a:	19db      	adds	r3, r3, r7
 800c93c:	2200      	movs	r2, #0
 800c93e:	701a      	strb	r2, [r3, #0]
 800c940:	e0b2      	b.n	800caa8 <UART_SetConfig+0x390>
 800c942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	4a4d      	ldr	r2, [pc, #308]	@ (800ca7c <UART_SetConfig+0x364>)
 800c948:	4293      	cmp	r3, r2
 800c94a:	d106      	bne.n	800c95a <UART_SetConfig+0x242>
 800c94c:	231b      	movs	r3, #27
 800c94e:	2220      	movs	r2, #32
 800c950:	189b      	adds	r3, r3, r2
 800c952:	19db      	adds	r3, r3, r7
 800c954:	2200      	movs	r2, #0
 800c956:	701a      	strb	r2, [r3, #0]
 800c958:	e0a6      	b.n	800caa8 <UART_SetConfig+0x390>
 800c95a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	4a3e      	ldr	r2, [pc, #248]	@ (800ca58 <UART_SetConfig+0x340>)
 800c960:	4293      	cmp	r3, r2
 800c962:	d13e      	bne.n	800c9e2 <UART_SetConfig+0x2ca>
 800c964:	4b40      	ldr	r3, [pc, #256]	@ (800ca68 <UART_SetConfig+0x350>)
 800c966:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c968:	23c0      	movs	r3, #192	@ 0xc0
 800c96a:	011b      	lsls	r3, r3, #4
 800c96c:	4013      	ands	r3, r2
 800c96e:	22c0      	movs	r2, #192	@ 0xc0
 800c970:	0112      	lsls	r2, r2, #4
 800c972:	4293      	cmp	r3, r2
 800c974:	d027      	beq.n	800c9c6 <UART_SetConfig+0x2ae>
 800c976:	22c0      	movs	r2, #192	@ 0xc0
 800c978:	0112      	lsls	r2, r2, #4
 800c97a:	4293      	cmp	r3, r2
 800c97c:	d82a      	bhi.n	800c9d4 <UART_SetConfig+0x2bc>
 800c97e:	2280      	movs	r2, #128	@ 0x80
 800c980:	0112      	lsls	r2, r2, #4
 800c982:	4293      	cmp	r3, r2
 800c984:	d011      	beq.n	800c9aa <UART_SetConfig+0x292>
 800c986:	2280      	movs	r2, #128	@ 0x80
 800c988:	0112      	lsls	r2, r2, #4
 800c98a:	4293      	cmp	r3, r2
 800c98c:	d822      	bhi.n	800c9d4 <UART_SetConfig+0x2bc>
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d004      	beq.n	800c99c <UART_SetConfig+0x284>
 800c992:	2280      	movs	r2, #128	@ 0x80
 800c994:	00d2      	lsls	r2, r2, #3
 800c996:	4293      	cmp	r3, r2
 800c998:	d00e      	beq.n	800c9b8 <UART_SetConfig+0x2a0>
 800c99a:	e01b      	b.n	800c9d4 <UART_SetConfig+0x2bc>
 800c99c:	231b      	movs	r3, #27
 800c99e:	2220      	movs	r2, #32
 800c9a0:	189b      	adds	r3, r3, r2
 800c9a2:	19db      	adds	r3, r3, r7
 800c9a4:	2200      	movs	r2, #0
 800c9a6:	701a      	strb	r2, [r3, #0]
 800c9a8:	e07e      	b.n	800caa8 <UART_SetConfig+0x390>
 800c9aa:	231b      	movs	r3, #27
 800c9ac:	2220      	movs	r2, #32
 800c9ae:	189b      	adds	r3, r3, r2
 800c9b0:	19db      	adds	r3, r3, r7
 800c9b2:	2202      	movs	r2, #2
 800c9b4:	701a      	strb	r2, [r3, #0]
 800c9b6:	e077      	b.n	800caa8 <UART_SetConfig+0x390>
 800c9b8:	231b      	movs	r3, #27
 800c9ba:	2220      	movs	r2, #32
 800c9bc:	189b      	adds	r3, r3, r2
 800c9be:	19db      	adds	r3, r3, r7
 800c9c0:	2204      	movs	r2, #4
 800c9c2:	701a      	strb	r2, [r3, #0]
 800c9c4:	e070      	b.n	800caa8 <UART_SetConfig+0x390>
 800c9c6:	231b      	movs	r3, #27
 800c9c8:	2220      	movs	r2, #32
 800c9ca:	189b      	adds	r3, r3, r2
 800c9cc:	19db      	adds	r3, r3, r7
 800c9ce:	2208      	movs	r2, #8
 800c9d0:	701a      	strb	r2, [r3, #0]
 800c9d2:	e069      	b.n	800caa8 <UART_SetConfig+0x390>
 800c9d4:	231b      	movs	r3, #27
 800c9d6:	2220      	movs	r2, #32
 800c9d8:	189b      	adds	r3, r3, r2
 800c9da:	19db      	adds	r3, r3, r7
 800c9dc:	2210      	movs	r2, #16
 800c9de:	701a      	strb	r2, [r3, #0]
 800c9e0:	e062      	b.n	800caa8 <UART_SetConfig+0x390>
 800c9e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	4a1d      	ldr	r2, [pc, #116]	@ (800ca5c <UART_SetConfig+0x344>)
 800c9e8:	4293      	cmp	r3, r2
 800c9ea:	d157      	bne.n	800ca9c <UART_SetConfig+0x384>
 800c9ec:	4b1e      	ldr	r3, [pc, #120]	@ (800ca68 <UART_SetConfig+0x350>)
 800c9ee:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c9f0:	23c0      	movs	r3, #192	@ 0xc0
 800c9f2:	009b      	lsls	r3, r3, #2
 800c9f4:	4013      	ands	r3, r2
 800c9f6:	22c0      	movs	r2, #192	@ 0xc0
 800c9f8:	0092      	lsls	r2, r2, #2
 800c9fa:	4293      	cmp	r3, r2
 800c9fc:	d040      	beq.n	800ca80 <UART_SetConfig+0x368>
 800c9fe:	22c0      	movs	r2, #192	@ 0xc0
 800ca00:	0092      	lsls	r2, r2, #2
 800ca02:	4293      	cmp	r3, r2
 800ca04:	d843      	bhi.n	800ca8e <UART_SetConfig+0x376>
 800ca06:	2280      	movs	r2, #128	@ 0x80
 800ca08:	0092      	lsls	r2, r2, #2
 800ca0a:	4293      	cmp	r3, r2
 800ca0c:	d011      	beq.n	800ca32 <UART_SetConfig+0x31a>
 800ca0e:	2280      	movs	r2, #128	@ 0x80
 800ca10:	0092      	lsls	r2, r2, #2
 800ca12:	4293      	cmp	r3, r2
 800ca14:	d83b      	bhi.n	800ca8e <UART_SetConfig+0x376>
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d004      	beq.n	800ca24 <UART_SetConfig+0x30c>
 800ca1a:	2280      	movs	r2, #128	@ 0x80
 800ca1c:	0052      	lsls	r2, r2, #1
 800ca1e:	4293      	cmp	r3, r2
 800ca20:	d00e      	beq.n	800ca40 <UART_SetConfig+0x328>
 800ca22:	e034      	b.n	800ca8e <UART_SetConfig+0x376>
 800ca24:	231b      	movs	r3, #27
 800ca26:	2220      	movs	r2, #32
 800ca28:	189b      	adds	r3, r3, r2
 800ca2a:	19db      	adds	r3, r3, r7
 800ca2c:	2200      	movs	r2, #0
 800ca2e:	701a      	strb	r2, [r3, #0]
 800ca30:	e03a      	b.n	800caa8 <UART_SetConfig+0x390>
 800ca32:	231b      	movs	r3, #27
 800ca34:	2220      	movs	r2, #32
 800ca36:	189b      	adds	r3, r3, r2
 800ca38:	19db      	adds	r3, r3, r7
 800ca3a:	2202      	movs	r2, #2
 800ca3c:	701a      	strb	r2, [r3, #0]
 800ca3e:	e033      	b.n	800caa8 <UART_SetConfig+0x390>
 800ca40:	231b      	movs	r3, #27
 800ca42:	2220      	movs	r2, #32
 800ca44:	189b      	adds	r3, r3, r2
 800ca46:	19db      	adds	r3, r3, r7
 800ca48:	2204      	movs	r2, #4
 800ca4a:	701a      	strb	r2, [r3, #0]
 800ca4c:	e02c      	b.n	800caa8 <UART_SetConfig+0x390>
 800ca4e:	46c0      	nop			@ (mov r8, r8)
 800ca50:	cfff69f3 	.word	0xcfff69f3
 800ca54:	ffffcfff 	.word	0xffffcfff
 800ca58:	40008000 	.word	0x40008000
 800ca5c:	40008400 	.word	0x40008400
 800ca60:	11fff4ff 	.word	0x11fff4ff
 800ca64:	40013800 	.word	0x40013800
 800ca68:	40021000 	.word	0x40021000
 800ca6c:	40004400 	.word	0x40004400
 800ca70:	40004800 	.word	0x40004800
 800ca74:	40004c00 	.word	0x40004c00
 800ca78:	40005000 	.word	0x40005000
 800ca7c:	40013c00 	.word	0x40013c00
 800ca80:	231b      	movs	r3, #27
 800ca82:	2220      	movs	r2, #32
 800ca84:	189b      	adds	r3, r3, r2
 800ca86:	19db      	adds	r3, r3, r7
 800ca88:	2208      	movs	r2, #8
 800ca8a:	701a      	strb	r2, [r3, #0]
 800ca8c:	e00c      	b.n	800caa8 <UART_SetConfig+0x390>
 800ca8e:	231b      	movs	r3, #27
 800ca90:	2220      	movs	r2, #32
 800ca92:	189b      	adds	r3, r3, r2
 800ca94:	19db      	adds	r3, r3, r7
 800ca96:	2210      	movs	r2, #16
 800ca98:	701a      	strb	r2, [r3, #0]
 800ca9a:	e005      	b.n	800caa8 <UART_SetConfig+0x390>
 800ca9c:	231b      	movs	r3, #27
 800ca9e:	2220      	movs	r2, #32
 800caa0:	189b      	adds	r3, r3, r2
 800caa2:	19db      	adds	r3, r3, r7
 800caa4:	2210      	movs	r2, #16
 800caa6:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800caa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	4ac1      	ldr	r2, [pc, #772]	@ (800cdb4 <UART_SetConfig+0x69c>)
 800caae:	4293      	cmp	r3, r2
 800cab0:	d005      	beq.n	800cabe <UART_SetConfig+0x3a6>
 800cab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	4ac0      	ldr	r2, [pc, #768]	@ (800cdb8 <UART_SetConfig+0x6a0>)
 800cab8:	4293      	cmp	r3, r2
 800caba:	d000      	beq.n	800cabe <UART_SetConfig+0x3a6>
 800cabc:	e093      	b.n	800cbe6 <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800cabe:	231b      	movs	r3, #27
 800cac0:	2220      	movs	r2, #32
 800cac2:	189b      	adds	r3, r3, r2
 800cac4:	19db      	adds	r3, r3, r7
 800cac6:	781b      	ldrb	r3, [r3, #0]
 800cac8:	2b08      	cmp	r3, #8
 800caca:	d015      	beq.n	800caf8 <UART_SetConfig+0x3e0>
 800cacc:	dc18      	bgt.n	800cb00 <UART_SetConfig+0x3e8>
 800cace:	2b04      	cmp	r3, #4
 800cad0:	d00d      	beq.n	800caee <UART_SetConfig+0x3d6>
 800cad2:	dc15      	bgt.n	800cb00 <UART_SetConfig+0x3e8>
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d002      	beq.n	800cade <UART_SetConfig+0x3c6>
 800cad8:	2b02      	cmp	r3, #2
 800cada:	d005      	beq.n	800cae8 <UART_SetConfig+0x3d0>
 800cadc:	e010      	b.n	800cb00 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cade:	f7fd f931 	bl	8009d44 <HAL_RCC_GetPCLK1Freq>
 800cae2:	0003      	movs	r3, r0
 800cae4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cae6:	e014      	b.n	800cb12 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cae8:	4bb4      	ldr	r3, [pc, #720]	@ (800cdbc <UART_SetConfig+0x6a4>)
 800caea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800caec:	e011      	b.n	800cb12 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800caee:	f7fd f89d 	bl	8009c2c <HAL_RCC_GetSysClockFreq>
 800caf2:	0003      	movs	r3, r0
 800caf4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800caf6:	e00c      	b.n	800cb12 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800caf8:	2380      	movs	r3, #128	@ 0x80
 800cafa:	021b      	lsls	r3, r3, #8
 800cafc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cafe:	e008      	b.n	800cb12 <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 800cb00:	2300      	movs	r3, #0
 800cb02:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800cb04:	231a      	movs	r3, #26
 800cb06:	2220      	movs	r2, #32
 800cb08:	189b      	adds	r3, r3, r2
 800cb0a:	19db      	adds	r3, r3, r7
 800cb0c:	2201      	movs	r2, #1
 800cb0e:	701a      	strb	r2, [r3, #0]
        break;
 800cb10:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800cb12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d100      	bne.n	800cb1a <UART_SetConfig+0x402>
 800cb18:	e135      	b.n	800cd86 <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800cb1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb1c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cb1e:	4ba8      	ldr	r3, [pc, #672]	@ (800cdc0 <UART_SetConfig+0x6a8>)
 800cb20:	0052      	lsls	r2, r2, #1
 800cb22:	5ad3      	ldrh	r3, [r2, r3]
 800cb24:	0019      	movs	r1, r3
 800cb26:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800cb28:	f7f3 fb12 	bl	8000150 <__udivsi3>
 800cb2c:	0003      	movs	r3, r0
 800cb2e:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cb30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb32:	685a      	ldr	r2, [r3, #4]
 800cb34:	0013      	movs	r3, r2
 800cb36:	005b      	lsls	r3, r3, #1
 800cb38:	189b      	adds	r3, r3, r2
 800cb3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cb3c:	429a      	cmp	r2, r3
 800cb3e:	d305      	bcc.n	800cb4c <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800cb40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb42:	685b      	ldr	r3, [r3, #4]
 800cb44:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cb46:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cb48:	429a      	cmp	r2, r3
 800cb4a:	d906      	bls.n	800cb5a <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 800cb4c:	231a      	movs	r3, #26
 800cb4e:	2220      	movs	r2, #32
 800cb50:	189b      	adds	r3, r3, r2
 800cb52:	19db      	adds	r3, r3, r7
 800cb54:	2201      	movs	r2, #1
 800cb56:	701a      	strb	r2, [r3, #0]
 800cb58:	e044      	b.n	800cbe4 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cb5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb5c:	61bb      	str	r3, [r7, #24]
 800cb5e:	2300      	movs	r3, #0
 800cb60:	61fb      	str	r3, [r7, #28]
 800cb62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb64:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cb66:	4b96      	ldr	r3, [pc, #600]	@ (800cdc0 <UART_SetConfig+0x6a8>)
 800cb68:	0052      	lsls	r2, r2, #1
 800cb6a:	5ad3      	ldrh	r3, [r2, r3]
 800cb6c:	613b      	str	r3, [r7, #16]
 800cb6e:	2300      	movs	r3, #0
 800cb70:	617b      	str	r3, [r7, #20]
 800cb72:	693a      	ldr	r2, [r7, #16]
 800cb74:	697b      	ldr	r3, [r7, #20]
 800cb76:	69b8      	ldr	r0, [r7, #24]
 800cb78:	69f9      	ldr	r1, [r7, #28]
 800cb7a:	f7f3 fcd7 	bl	800052c <__aeabi_uldivmod>
 800cb7e:	0002      	movs	r2, r0
 800cb80:	000b      	movs	r3, r1
 800cb82:	0e11      	lsrs	r1, r2, #24
 800cb84:	021d      	lsls	r5, r3, #8
 800cb86:	430d      	orrs	r5, r1
 800cb88:	0214      	lsls	r4, r2, #8
 800cb8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb8c:	685b      	ldr	r3, [r3, #4]
 800cb8e:	085b      	lsrs	r3, r3, #1
 800cb90:	60bb      	str	r3, [r7, #8]
 800cb92:	2300      	movs	r3, #0
 800cb94:	60fb      	str	r3, [r7, #12]
 800cb96:	68b8      	ldr	r0, [r7, #8]
 800cb98:	68f9      	ldr	r1, [r7, #12]
 800cb9a:	1900      	adds	r0, r0, r4
 800cb9c:	4169      	adcs	r1, r5
 800cb9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cba0:	685b      	ldr	r3, [r3, #4]
 800cba2:	603b      	str	r3, [r7, #0]
 800cba4:	2300      	movs	r3, #0
 800cba6:	607b      	str	r3, [r7, #4]
 800cba8:	683a      	ldr	r2, [r7, #0]
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	f7f3 fcbe 	bl	800052c <__aeabi_uldivmod>
 800cbb0:	0002      	movs	r2, r0
 800cbb2:	000b      	movs	r3, r1
 800cbb4:	0013      	movs	r3, r2
 800cbb6:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cbb8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cbba:	23c0      	movs	r3, #192	@ 0xc0
 800cbbc:	009b      	lsls	r3, r3, #2
 800cbbe:	429a      	cmp	r2, r3
 800cbc0:	d309      	bcc.n	800cbd6 <UART_SetConfig+0x4be>
 800cbc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cbc4:	2380      	movs	r3, #128	@ 0x80
 800cbc6:	035b      	lsls	r3, r3, #13
 800cbc8:	429a      	cmp	r2, r3
 800cbca:	d204      	bcs.n	800cbd6 <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 800cbcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cbd2:	60da      	str	r2, [r3, #12]
 800cbd4:	e006      	b.n	800cbe4 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 800cbd6:	231a      	movs	r3, #26
 800cbd8:	2220      	movs	r2, #32
 800cbda:	189b      	adds	r3, r3, r2
 800cbdc:	19db      	adds	r3, r3, r7
 800cbde:	2201      	movs	r2, #1
 800cbe0:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 800cbe2:	e0d0      	b.n	800cd86 <UART_SetConfig+0x66e>
 800cbe4:	e0cf      	b.n	800cd86 <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cbe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbe8:	69da      	ldr	r2, [r3, #28]
 800cbea:	2380      	movs	r3, #128	@ 0x80
 800cbec:	021b      	lsls	r3, r3, #8
 800cbee:	429a      	cmp	r2, r3
 800cbf0:	d000      	beq.n	800cbf4 <UART_SetConfig+0x4dc>
 800cbf2:	e070      	b.n	800ccd6 <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 800cbf4:	231b      	movs	r3, #27
 800cbf6:	2220      	movs	r2, #32
 800cbf8:	189b      	adds	r3, r3, r2
 800cbfa:	19db      	adds	r3, r3, r7
 800cbfc:	781b      	ldrb	r3, [r3, #0]
 800cbfe:	2b08      	cmp	r3, #8
 800cc00:	d015      	beq.n	800cc2e <UART_SetConfig+0x516>
 800cc02:	dc18      	bgt.n	800cc36 <UART_SetConfig+0x51e>
 800cc04:	2b04      	cmp	r3, #4
 800cc06:	d00d      	beq.n	800cc24 <UART_SetConfig+0x50c>
 800cc08:	dc15      	bgt.n	800cc36 <UART_SetConfig+0x51e>
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d002      	beq.n	800cc14 <UART_SetConfig+0x4fc>
 800cc0e:	2b02      	cmp	r3, #2
 800cc10:	d005      	beq.n	800cc1e <UART_SetConfig+0x506>
 800cc12:	e010      	b.n	800cc36 <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cc14:	f7fd f896 	bl	8009d44 <HAL_RCC_GetPCLK1Freq>
 800cc18:	0003      	movs	r3, r0
 800cc1a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cc1c:	e014      	b.n	800cc48 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cc1e:	4b67      	ldr	r3, [pc, #412]	@ (800cdbc <UART_SetConfig+0x6a4>)
 800cc20:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cc22:	e011      	b.n	800cc48 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cc24:	f7fd f802 	bl	8009c2c <HAL_RCC_GetSysClockFreq>
 800cc28:	0003      	movs	r3, r0
 800cc2a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cc2c:	e00c      	b.n	800cc48 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cc2e:	2380      	movs	r3, #128	@ 0x80
 800cc30:	021b      	lsls	r3, r3, #8
 800cc32:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cc34:	e008      	b.n	800cc48 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 800cc36:	2300      	movs	r3, #0
 800cc38:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800cc3a:	231a      	movs	r3, #26
 800cc3c:	2220      	movs	r2, #32
 800cc3e:	189b      	adds	r3, r3, r2
 800cc40:	19db      	adds	r3, r3, r7
 800cc42:	2201      	movs	r2, #1
 800cc44:	701a      	strb	r2, [r3, #0]
        break;
 800cc46:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cc48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d100      	bne.n	800cc50 <UART_SetConfig+0x538>
 800cc4e:	e09a      	b.n	800cd86 <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cc50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc52:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cc54:	4b5a      	ldr	r3, [pc, #360]	@ (800cdc0 <UART_SetConfig+0x6a8>)
 800cc56:	0052      	lsls	r2, r2, #1
 800cc58:	5ad3      	ldrh	r3, [r2, r3]
 800cc5a:	0019      	movs	r1, r3
 800cc5c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800cc5e:	f7f3 fa77 	bl	8000150 <__udivsi3>
 800cc62:	0003      	movs	r3, r0
 800cc64:	005a      	lsls	r2, r3, #1
 800cc66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc68:	685b      	ldr	r3, [r3, #4]
 800cc6a:	085b      	lsrs	r3, r3, #1
 800cc6c:	18d2      	adds	r2, r2, r3
 800cc6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc70:	685b      	ldr	r3, [r3, #4]
 800cc72:	0019      	movs	r1, r3
 800cc74:	0010      	movs	r0, r2
 800cc76:	f7f3 fa6b 	bl	8000150 <__udivsi3>
 800cc7a:	0003      	movs	r3, r0
 800cc7c:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cc7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc80:	2b0f      	cmp	r3, #15
 800cc82:	d921      	bls.n	800ccc8 <UART_SetConfig+0x5b0>
 800cc84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cc86:	2380      	movs	r3, #128	@ 0x80
 800cc88:	025b      	lsls	r3, r3, #9
 800cc8a:	429a      	cmp	r2, r3
 800cc8c:	d21c      	bcs.n	800ccc8 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cc8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc90:	b29a      	uxth	r2, r3
 800cc92:	200e      	movs	r0, #14
 800cc94:	2420      	movs	r4, #32
 800cc96:	1903      	adds	r3, r0, r4
 800cc98:	19db      	adds	r3, r3, r7
 800cc9a:	210f      	movs	r1, #15
 800cc9c:	438a      	bics	r2, r1
 800cc9e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cca2:	085b      	lsrs	r3, r3, #1
 800cca4:	b29b      	uxth	r3, r3
 800cca6:	2207      	movs	r2, #7
 800cca8:	4013      	ands	r3, r2
 800ccaa:	b299      	uxth	r1, r3
 800ccac:	1903      	adds	r3, r0, r4
 800ccae:	19db      	adds	r3, r3, r7
 800ccb0:	1902      	adds	r2, r0, r4
 800ccb2:	19d2      	adds	r2, r2, r7
 800ccb4:	8812      	ldrh	r2, [r2, #0]
 800ccb6:	430a      	orrs	r2, r1
 800ccb8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800ccba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	1902      	adds	r2, r0, r4
 800ccc0:	19d2      	adds	r2, r2, r7
 800ccc2:	8812      	ldrh	r2, [r2, #0]
 800ccc4:	60da      	str	r2, [r3, #12]
 800ccc6:	e05e      	b.n	800cd86 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 800ccc8:	231a      	movs	r3, #26
 800ccca:	2220      	movs	r2, #32
 800cccc:	189b      	adds	r3, r3, r2
 800ccce:	19db      	adds	r3, r3, r7
 800ccd0:	2201      	movs	r2, #1
 800ccd2:	701a      	strb	r2, [r3, #0]
 800ccd4:	e057      	b.n	800cd86 <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ccd6:	231b      	movs	r3, #27
 800ccd8:	2220      	movs	r2, #32
 800ccda:	189b      	adds	r3, r3, r2
 800ccdc:	19db      	adds	r3, r3, r7
 800ccde:	781b      	ldrb	r3, [r3, #0]
 800cce0:	2b08      	cmp	r3, #8
 800cce2:	d015      	beq.n	800cd10 <UART_SetConfig+0x5f8>
 800cce4:	dc18      	bgt.n	800cd18 <UART_SetConfig+0x600>
 800cce6:	2b04      	cmp	r3, #4
 800cce8:	d00d      	beq.n	800cd06 <UART_SetConfig+0x5ee>
 800ccea:	dc15      	bgt.n	800cd18 <UART_SetConfig+0x600>
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d002      	beq.n	800ccf6 <UART_SetConfig+0x5de>
 800ccf0:	2b02      	cmp	r3, #2
 800ccf2:	d005      	beq.n	800cd00 <UART_SetConfig+0x5e8>
 800ccf4:	e010      	b.n	800cd18 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ccf6:	f7fd f825 	bl	8009d44 <HAL_RCC_GetPCLK1Freq>
 800ccfa:	0003      	movs	r3, r0
 800ccfc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ccfe:	e014      	b.n	800cd2a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cd00:	4b2e      	ldr	r3, [pc, #184]	@ (800cdbc <UART_SetConfig+0x6a4>)
 800cd02:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cd04:	e011      	b.n	800cd2a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cd06:	f7fc ff91 	bl	8009c2c <HAL_RCC_GetSysClockFreq>
 800cd0a:	0003      	movs	r3, r0
 800cd0c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cd0e:	e00c      	b.n	800cd2a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cd10:	2380      	movs	r3, #128	@ 0x80
 800cd12:	021b      	lsls	r3, r3, #8
 800cd14:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cd16:	e008      	b.n	800cd2a <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 800cd18:	2300      	movs	r3, #0
 800cd1a:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800cd1c:	231a      	movs	r3, #26
 800cd1e:	2220      	movs	r2, #32
 800cd20:	189b      	adds	r3, r3, r2
 800cd22:	19db      	adds	r3, r3, r7
 800cd24:	2201      	movs	r2, #1
 800cd26:	701a      	strb	r2, [r3, #0]
        break;
 800cd28:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800cd2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d02a      	beq.n	800cd86 <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cd30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd32:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cd34:	4b22      	ldr	r3, [pc, #136]	@ (800cdc0 <UART_SetConfig+0x6a8>)
 800cd36:	0052      	lsls	r2, r2, #1
 800cd38:	5ad3      	ldrh	r3, [r2, r3]
 800cd3a:	0019      	movs	r1, r3
 800cd3c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800cd3e:	f7f3 fa07 	bl	8000150 <__udivsi3>
 800cd42:	0003      	movs	r3, r0
 800cd44:	001a      	movs	r2, r3
 800cd46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd48:	685b      	ldr	r3, [r3, #4]
 800cd4a:	085b      	lsrs	r3, r3, #1
 800cd4c:	18d2      	adds	r2, r2, r3
 800cd4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd50:	685b      	ldr	r3, [r3, #4]
 800cd52:	0019      	movs	r1, r3
 800cd54:	0010      	movs	r0, r2
 800cd56:	f7f3 f9fb 	bl	8000150 <__udivsi3>
 800cd5a:	0003      	movs	r3, r0
 800cd5c:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cd5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd60:	2b0f      	cmp	r3, #15
 800cd62:	d90a      	bls.n	800cd7a <UART_SetConfig+0x662>
 800cd64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cd66:	2380      	movs	r3, #128	@ 0x80
 800cd68:	025b      	lsls	r3, r3, #9
 800cd6a:	429a      	cmp	r2, r3
 800cd6c:	d205      	bcs.n	800cd7a <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cd6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd70:	b29a      	uxth	r2, r3
 800cd72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	60da      	str	r2, [r3, #12]
 800cd78:	e005      	b.n	800cd86 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 800cd7a:	231a      	movs	r3, #26
 800cd7c:	2220      	movs	r2, #32
 800cd7e:	189b      	adds	r3, r3, r2
 800cd80:	19db      	adds	r3, r3, r7
 800cd82:	2201      	movs	r2, #1
 800cd84:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800cd86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd88:	226a      	movs	r2, #106	@ 0x6a
 800cd8a:	2101      	movs	r1, #1
 800cd8c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800cd8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd90:	2268      	movs	r2, #104	@ 0x68
 800cd92:	2101      	movs	r1, #1
 800cd94:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cd96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd98:	2200      	movs	r2, #0
 800cd9a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800cd9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd9e:	2200      	movs	r2, #0
 800cda0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800cda2:	231a      	movs	r3, #26
 800cda4:	2220      	movs	r2, #32
 800cda6:	189b      	adds	r3, r3, r2
 800cda8:	19db      	adds	r3, r3, r7
 800cdaa:	781b      	ldrb	r3, [r3, #0]
}
 800cdac:	0018      	movs	r0, r3
 800cdae:	46bd      	mov	sp, r7
 800cdb0:	b010      	add	sp, #64	@ 0x40
 800cdb2:	bdb0      	pop	{r4, r5, r7, pc}
 800cdb4:	40008000 	.word	0x40008000
 800cdb8:	40008400 	.word	0x40008400
 800cdbc:	00f42400 	.word	0x00f42400
 800cdc0:	08011748 	.word	0x08011748

0800cdc4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cdc4:	b580      	push	{r7, lr}
 800cdc6:	b082      	sub	sp, #8
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cdd0:	2208      	movs	r2, #8
 800cdd2:	4013      	ands	r3, r2
 800cdd4:	d00b      	beq.n	800cdee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	685b      	ldr	r3, [r3, #4]
 800cddc:	4a4a      	ldr	r2, [pc, #296]	@ (800cf08 <UART_AdvFeatureConfig+0x144>)
 800cdde:	4013      	ands	r3, r2
 800cde0:	0019      	movs	r1, r3
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	430a      	orrs	r2, r1
 800cdec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cdf2:	2201      	movs	r2, #1
 800cdf4:	4013      	ands	r3, r2
 800cdf6:	d00b      	beq.n	800ce10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	685b      	ldr	r3, [r3, #4]
 800cdfe:	4a43      	ldr	r2, [pc, #268]	@ (800cf0c <UART_AdvFeatureConfig+0x148>)
 800ce00:	4013      	ands	r3, r2
 800ce02:	0019      	movs	r1, r3
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	430a      	orrs	r2, r1
 800ce0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce14:	2202      	movs	r2, #2
 800ce16:	4013      	ands	r3, r2
 800ce18:	d00b      	beq.n	800ce32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	685b      	ldr	r3, [r3, #4]
 800ce20:	4a3b      	ldr	r2, [pc, #236]	@ (800cf10 <UART_AdvFeatureConfig+0x14c>)
 800ce22:	4013      	ands	r3, r2
 800ce24:	0019      	movs	r1, r3
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	430a      	orrs	r2, r1
 800ce30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce36:	2204      	movs	r2, #4
 800ce38:	4013      	ands	r3, r2
 800ce3a:	d00b      	beq.n	800ce54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	685b      	ldr	r3, [r3, #4]
 800ce42:	4a34      	ldr	r2, [pc, #208]	@ (800cf14 <UART_AdvFeatureConfig+0x150>)
 800ce44:	4013      	ands	r3, r2
 800ce46:	0019      	movs	r1, r3
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	430a      	orrs	r2, r1
 800ce52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce58:	2210      	movs	r2, #16
 800ce5a:	4013      	ands	r3, r2
 800ce5c:	d00b      	beq.n	800ce76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	689b      	ldr	r3, [r3, #8]
 800ce64:	4a2c      	ldr	r2, [pc, #176]	@ (800cf18 <UART_AdvFeatureConfig+0x154>)
 800ce66:	4013      	ands	r3, r2
 800ce68:	0019      	movs	r1, r3
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	430a      	orrs	r2, r1
 800ce74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce7a:	2220      	movs	r2, #32
 800ce7c:	4013      	ands	r3, r2
 800ce7e:	d00b      	beq.n	800ce98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	689b      	ldr	r3, [r3, #8]
 800ce86:	4a25      	ldr	r2, [pc, #148]	@ (800cf1c <UART_AdvFeatureConfig+0x158>)
 800ce88:	4013      	ands	r3, r2
 800ce8a:	0019      	movs	r1, r3
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	430a      	orrs	r2, r1
 800ce96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce9c:	2240      	movs	r2, #64	@ 0x40
 800ce9e:	4013      	ands	r3, r2
 800cea0:	d01d      	beq.n	800cede <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	685b      	ldr	r3, [r3, #4]
 800cea8:	4a1d      	ldr	r2, [pc, #116]	@ (800cf20 <UART_AdvFeatureConfig+0x15c>)
 800ceaa:	4013      	ands	r3, r2
 800ceac:	0019      	movs	r1, r3
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	430a      	orrs	r2, r1
 800ceb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cebe:	2380      	movs	r3, #128	@ 0x80
 800cec0:	035b      	lsls	r3, r3, #13
 800cec2:	429a      	cmp	r2, r3
 800cec4:	d10b      	bne.n	800cede <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	685b      	ldr	r3, [r3, #4]
 800cecc:	4a15      	ldr	r2, [pc, #84]	@ (800cf24 <UART_AdvFeatureConfig+0x160>)
 800cece:	4013      	ands	r3, r2
 800ced0:	0019      	movs	r1, r3
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	430a      	orrs	r2, r1
 800cedc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cee2:	2280      	movs	r2, #128	@ 0x80
 800cee4:	4013      	ands	r3, r2
 800cee6:	d00b      	beq.n	800cf00 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	685b      	ldr	r3, [r3, #4]
 800ceee:	4a0e      	ldr	r2, [pc, #56]	@ (800cf28 <UART_AdvFeatureConfig+0x164>)
 800cef0:	4013      	ands	r3, r2
 800cef2:	0019      	movs	r1, r3
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	430a      	orrs	r2, r1
 800cefe:	605a      	str	r2, [r3, #4]
  }
}
 800cf00:	46c0      	nop			@ (mov r8, r8)
 800cf02:	46bd      	mov	sp, r7
 800cf04:	b002      	add	sp, #8
 800cf06:	bd80      	pop	{r7, pc}
 800cf08:	ffff7fff 	.word	0xffff7fff
 800cf0c:	fffdffff 	.word	0xfffdffff
 800cf10:	fffeffff 	.word	0xfffeffff
 800cf14:	fffbffff 	.word	0xfffbffff
 800cf18:	ffffefff 	.word	0xffffefff
 800cf1c:	ffffdfff 	.word	0xffffdfff
 800cf20:	ffefffff 	.word	0xffefffff
 800cf24:	ff9fffff 	.word	0xff9fffff
 800cf28:	fff7ffff 	.word	0xfff7ffff

0800cf2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	b092      	sub	sp, #72	@ 0x48
 800cf30:	af02      	add	r7, sp, #8
 800cf32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	2290      	movs	r2, #144	@ 0x90
 800cf38:	2100      	movs	r1, #0
 800cf3a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cf3c:	f7fb f882 	bl	8008044 <HAL_GetTick>
 800cf40:	0003      	movs	r3, r0
 800cf42:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	2208      	movs	r2, #8
 800cf4c:	4013      	ands	r3, r2
 800cf4e:	2b08      	cmp	r3, #8
 800cf50:	d12d      	bne.n	800cfae <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cf52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf54:	2280      	movs	r2, #128	@ 0x80
 800cf56:	0391      	lsls	r1, r2, #14
 800cf58:	6878      	ldr	r0, [r7, #4]
 800cf5a:	4a47      	ldr	r2, [pc, #284]	@ (800d078 <UART_CheckIdleState+0x14c>)
 800cf5c:	9200      	str	r2, [sp, #0]
 800cf5e:	2200      	movs	r2, #0
 800cf60:	f000 f88e 	bl	800d080 <UART_WaitOnFlagUntilTimeout>
 800cf64:	1e03      	subs	r3, r0, #0
 800cf66:	d022      	beq.n	800cfae <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cf68:	f3ef 8310 	mrs	r3, PRIMASK
 800cf6c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800cf6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800cf70:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cf72:	2301      	movs	r3, #1
 800cf74:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cf76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf78:	f383 8810 	msr	PRIMASK, r3
}
 800cf7c:	46c0      	nop			@ (mov r8, r8)
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	681a      	ldr	r2, [r3, #0]
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	2180      	movs	r1, #128	@ 0x80
 800cf8a:	438a      	bics	r2, r1
 800cf8c:	601a      	str	r2, [r3, #0]
 800cf8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cf92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf94:	f383 8810 	msr	PRIMASK, r3
}
 800cf98:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	2288      	movs	r2, #136	@ 0x88
 800cf9e:	2120      	movs	r1, #32
 800cfa0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	2284      	movs	r2, #132	@ 0x84
 800cfa6:	2100      	movs	r1, #0
 800cfa8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cfaa:	2303      	movs	r3, #3
 800cfac:	e060      	b.n	800d070 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	2204      	movs	r2, #4
 800cfb6:	4013      	ands	r3, r2
 800cfb8:	2b04      	cmp	r3, #4
 800cfba:	d146      	bne.n	800d04a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cfbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cfbe:	2280      	movs	r2, #128	@ 0x80
 800cfc0:	03d1      	lsls	r1, r2, #15
 800cfc2:	6878      	ldr	r0, [r7, #4]
 800cfc4:	4a2c      	ldr	r2, [pc, #176]	@ (800d078 <UART_CheckIdleState+0x14c>)
 800cfc6:	9200      	str	r2, [sp, #0]
 800cfc8:	2200      	movs	r2, #0
 800cfca:	f000 f859 	bl	800d080 <UART_WaitOnFlagUntilTimeout>
 800cfce:	1e03      	subs	r3, r0, #0
 800cfd0:	d03b      	beq.n	800d04a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cfd2:	f3ef 8310 	mrs	r3, PRIMASK
 800cfd6:	60fb      	str	r3, [r7, #12]
  return(result);
 800cfd8:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cfda:	637b      	str	r3, [r7, #52]	@ 0x34
 800cfdc:	2301      	movs	r3, #1
 800cfde:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cfe0:	693b      	ldr	r3, [r7, #16]
 800cfe2:	f383 8810 	msr	PRIMASK, r3
}
 800cfe6:	46c0      	nop			@ (mov r8, r8)
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	681a      	ldr	r2, [r3, #0]
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	4922      	ldr	r1, [pc, #136]	@ (800d07c <UART_CheckIdleState+0x150>)
 800cff4:	400a      	ands	r2, r1
 800cff6:	601a      	str	r2, [r3, #0]
 800cff8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cffa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cffc:	697b      	ldr	r3, [r7, #20]
 800cffe:	f383 8810 	msr	PRIMASK, r3
}
 800d002:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d004:	f3ef 8310 	mrs	r3, PRIMASK
 800d008:	61bb      	str	r3, [r7, #24]
  return(result);
 800d00a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d00c:	633b      	str	r3, [r7, #48]	@ 0x30
 800d00e:	2301      	movs	r3, #1
 800d010:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d012:	69fb      	ldr	r3, [r7, #28]
 800d014:	f383 8810 	msr	PRIMASK, r3
}
 800d018:	46c0      	nop			@ (mov r8, r8)
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	689a      	ldr	r2, [r3, #8]
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	2101      	movs	r1, #1
 800d026:	438a      	bics	r2, r1
 800d028:	609a      	str	r2, [r3, #8]
 800d02a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d02c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d02e:	6a3b      	ldr	r3, [r7, #32]
 800d030:	f383 8810 	msr	PRIMASK, r3
}
 800d034:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	228c      	movs	r2, #140	@ 0x8c
 800d03a:	2120      	movs	r1, #32
 800d03c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	2284      	movs	r2, #132	@ 0x84
 800d042:	2100      	movs	r1, #0
 800d044:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d046:	2303      	movs	r3, #3
 800d048:	e012      	b.n	800d070 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	2288      	movs	r2, #136	@ 0x88
 800d04e:	2120      	movs	r1, #32
 800d050:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	228c      	movs	r2, #140	@ 0x8c
 800d056:	2120      	movs	r1, #32
 800d058:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	2200      	movs	r2, #0
 800d05e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	2200      	movs	r2, #0
 800d064:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	2284      	movs	r2, #132	@ 0x84
 800d06a:	2100      	movs	r1, #0
 800d06c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800d06e:	2300      	movs	r3, #0
}
 800d070:	0018      	movs	r0, r3
 800d072:	46bd      	mov	sp, r7
 800d074:	b010      	add	sp, #64	@ 0x40
 800d076:	bd80      	pop	{r7, pc}
 800d078:	01ffffff 	.word	0x01ffffff
 800d07c:	fffffedf 	.word	0xfffffedf

0800d080 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d080:	b580      	push	{r7, lr}
 800d082:	b084      	sub	sp, #16
 800d084:	af00      	add	r7, sp, #0
 800d086:	60f8      	str	r0, [r7, #12]
 800d088:	60b9      	str	r1, [r7, #8]
 800d08a:	603b      	str	r3, [r7, #0]
 800d08c:	1dfb      	adds	r3, r7, #7
 800d08e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d090:	e051      	b.n	800d136 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d092:	69bb      	ldr	r3, [r7, #24]
 800d094:	3301      	adds	r3, #1
 800d096:	d04e      	beq.n	800d136 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d098:	f7fa ffd4 	bl	8008044 <HAL_GetTick>
 800d09c:	0002      	movs	r2, r0
 800d09e:	683b      	ldr	r3, [r7, #0]
 800d0a0:	1ad3      	subs	r3, r2, r3
 800d0a2:	69ba      	ldr	r2, [r7, #24]
 800d0a4:	429a      	cmp	r2, r3
 800d0a6:	d302      	bcc.n	800d0ae <UART_WaitOnFlagUntilTimeout+0x2e>
 800d0a8:	69bb      	ldr	r3, [r7, #24]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d101      	bne.n	800d0b2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800d0ae:	2303      	movs	r3, #3
 800d0b0:	e051      	b.n	800d156 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	2204      	movs	r2, #4
 800d0ba:	4013      	ands	r3, r2
 800d0bc:	d03b      	beq.n	800d136 <UART_WaitOnFlagUntilTimeout+0xb6>
 800d0be:	68bb      	ldr	r3, [r7, #8]
 800d0c0:	2b80      	cmp	r3, #128	@ 0x80
 800d0c2:	d038      	beq.n	800d136 <UART_WaitOnFlagUntilTimeout+0xb6>
 800d0c4:	68bb      	ldr	r3, [r7, #8]
 800d0c6:	2b40      	cmp	r3, #64	@ 0x40
 800d0c8:	d035      	beq.n	800d136 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	69db      	ldr	r3, [r3, #28]
 800d0d0:	2208      	movs	r2, #8
 800d0d2:	4013      	ands	r3, r2
 800d0d4:	2b08      	cmp	r3, #8
 800d0d6:	d111      	bne.n	800d0fc <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	2208      	movs	r2, #8
 800d0de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	0018      	movs	r0, r3
 800d0e4:	f000 f83c 	bl	800d160 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	2290      	movs	r2, #144	@ 0x90
 800d0ec:	2108      	movs	r1, #8
 800d0ee:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	2284      	movs	r2, #132	@ 0x84
 800d0f4:	2100      	movs	r1, #0
 800d0f6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800d0f8:	2301      	movs	r3, #1
 800d0fa:	e02c      	b.n	800d156 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	69da      	ldr	r2, [r3, #28]
 800d102:	2380      	movs	r3, #128	@ 0x80
 800d104:	011b      	lsls	r3, r3, #4
 800d106:	401a      	ands	r2, r3
 800d108:	2380      	movs	r3, #128	@ 0x80
 800d10a:	011b      	lsls	r3, r3, #4
 800d10c:	429a      	cmp	r2, r3
 800d10e:	d112      	bne.n	800d136 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	2280      	movs	r2, #128	@ 0x80
 800d116:	0112      	lsls	r2, r2, #4
 800d118:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	0018      	movs	r0, r3
 800d11e:	f000 f81f 	bl	800d160 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	2290      	movs	r2, #144	@ 0x90
 800d126:	2120      	movs	r1, #32
 800d128:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	2284      	movs	r2, #132	@ 0x84
 800d12e:	2100      	movs	r1, #0
 800d130:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800d132:	2303      	movs	r3, #3
 800d134:	e00f      	b.n	800d156 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	69db      	ldr	r3, [r3, #28]
 800d13c:	68ba      	ldr	r2, [r7, #8]
 800d13e:	4013      	ands	r3, r2
 800d140:	68ba      	ldr	r2, [r7, #8]
 800d142:	1ad3      	subs	r3, r2, r3
 800d144:	425a      	negs	r2, r3
 800d146:	4153      	adcs	r3, r2
 800d148:	b2db      	uxtb	r3, r3
 800d14a:	001a      	movs	r2, r3
 800d14c:	1dfb      	adds	r3, r7, #7
 800d14e:	781b      	ldrb	r3, [r3, #0]
 800d150:	429a      	cmp	r2, r3
 800d152:	d09e      	beq.n	800d092 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d154:	2300      	movs	r3, #0
}
 800d156:	0018      	movs	r0, r3
 800d158:	46bd      	mov	sp, r7
 800d15a:	b004      	add	sp, #16
 800d15c:	bd80      	pop	{r7, pc}
	...

0800d160 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d160:	b580      	push	{r7, lr}
 800d162:	b08e      	sub	sp, #56	@ 0x38
 800d164:	af00      	add	r7, sp, #0
 800d166:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d168:	f3ef 8310 	mrs	r3, PRIMASK
 800d16c:	617b      	str	r3, [r7, #20]
  return(result);
 800d16e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d170:	637b      	str	r3, [r7, #52]	@ 0x34
 800d172:	2301      	movs	r3, #1
 800d174:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d176:	69bb      	ldr	r3, [r7, #24]
 800d178:	f383 8810 	msr	PRIMASK, r3
}
 800d17c:	46c0      	nop			@ (mov r8, r8)
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	681a      	ldr	r2, [r3, #0]
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	4926      	ldr	r1, [pc, #152]	@ (800d224 <UART_EndRxTransfer+0xc4>)
 800d18a:	400a      	ands	r2, r1
 800d18c:	601a      	str	r2, [r3, #0]
 800d18e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d190:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d192:	69fb      	ldr	r3, [r7, #28]
 800d194:	f383 8810 	msr	PRIMASK, r3
}
 800d198:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d19a:	f3ef 8310 	mrs	r3, PRIMASK
 800d19e:	623b      	str	r3, [r7, #32]
  return(result);
 800d1a0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d1a2:	633b      	str	r3, [r7, #48]	@ 0x30
 800d1a4:	2301      	movs	r3, #1
 800d1a6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d1a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1aa:	f383 8810 	msr	PRIMASK, r3
}
 800d1ae:	46c0      	nop			@ (mov r8, r8)
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	689a      	ldr	r2, [r3, #8]
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	491b      	ldr	r1, [pc, #108]	@ (800d228 <UART_EndRxTransfer+0xc8>)
 800d1bc:	400a      	ands	r2, r1
 800d1be:	609a      	str	r2, [r3, #8]
 800d1c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d1c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1c6:	f383 8810 	msr	PRIMASK, r3
}
 800d1ca:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d1d0:	2b01      	cmp	r3, #1
 800d1d2:	d118      	bne.n	800d206 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d1d4:	f3ef 8310 	mrs	r3, PRIMASK
 800d1d8:	60bb      	str	r3, [r7, #8]
  return(result);
 800d1da:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d1dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d1de:	2301      	movs	r3, #1
 800d1e0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	f383 8810 	msr	PRIMASK, r3
}
 800d1e8:	46c0      	nop			@ (mov r8, r8)
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	681a      	ldr	r2, [r3, #0]
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	2110      	movs	r1, #16
 800d1f6:	438a      	bics	r2, r1
 800d1f8:	601a      	str	r2, [r3, #0]
 800d1fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d1fe:	693b      	ldr	r3, [r7, #16]
 800d200:	f383 8810 	msr	PRIMASK, r3
}
 800d204:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	228c      	movs	r2, #140	@ 0x8c
 800d20a:	2120      	movs	r1, #32
 800d20c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	2200      	movs	r2, #0
 800d212:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	2200      	movs	r2, #0
 800d218:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800d21a:	46c0      	nop			@ (mov r8, r8)
 800d21c:	46bd      	mov	sp, r7
 800d21e:	b00e      	add	sp, #56	@ 0x38
 800d220:	bd80      	pop	{r7, pc}
 800d222:	46c0      	nop			@ (mov r8, r8)
 800d224:	fffffedf 	.word	0xfffffedf
 800d228:	effffffe 	.word	0xeffffffe

0800d22c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d22c:	b580      	push	{r7, lr}
 800d22e:	b084      	sub	sp, #16
 800d230:	af00      	add	r7, sp, #0
 800d232:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	2284      	movs	r2, #132	@ 0x84
 800d238:	5c9b      	ldrb	r3, [r3, r2]
 800d23a:	2b01      	cmp	r3, #1
 800d23c:	d101      	bne.n	800d242 <HAL_UARTEx_DisableFifoMode+0x16>
 800d23e:	2302      	movs	r3, #2
 800d240:	e027      	b.n	800d292 <HAL_UARTEx_DisableFifoMode+0x66>
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	2284      	movs	r2, #132	@ 0x84
 800d246:	2101      	movs	r1, #1
 800d248:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	2288      	movs	r2, #136	@ 0x88
 800d24e:	2124      	movs	r1, #36	@ 0x24
 800d250:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	681a      	ldr	r2, [r3, #0]
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	2101      	movs	r1, #1
 800d266:	438a      	bics	r2, r1
 800d268:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	4a0b      	ldr	r2, [pc, #44]	@ (800d29c <HAL_UARTEx_DisableFifoMode+0x70>)
 800d26e:	4013      	ands	r3, r2
 800d270:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	2200      	movs	r2, #0
 800d276:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	68fa      	ldr	r2, [r7, #12]
 800d27e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	2288      	movs	r2, #136	@ 0x88
 800d284:	2120      	movs	r1, #32
 800d286:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	2284      	movs	r2, #132	@ 0x84
 800d28c:	2100      	movs	r1, #0
 800d28e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800d290:	2300      	movs	r3, #0
}
 800d292:	0018      	movs	r0, r3
 800d294:	46bd      	mov	sp, r7
 800d296:	b004      	add	sp, #16
 800d298:	bd80      	pop	{r7, pc}
 800d29a:	46c0      	nop			@ (mov r8, r8)
 800d29c:	dfffffff 	.word	0xdfffffff

0800d2a0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d2a0:	b580      	push	{r7, lr}
 800d2a2:	b084      	sub	sp, #16
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	6078      	str	r0, [r7, #4]
 800d2a8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	2284      	movs	r2, #132	@ 0x84
 800d2ae:	5c9b      	ldrb	r3, [r3, r2]
 800d2b0:	2b01      	cmp	r3, #1
 800d2b2:	d101      	bne.n	800d2b8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d2b4:	2302      	movs	r3, #2
 800d2b6:	e02e      	b.n	800d316 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	2284      	movs	r2, #132	@ 0x84
 800d2bc:	2101      	movs	r1, #1
 800d2be:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	2288      	movs	r2, #136	@ 0x88
 800d2c4:	2124      	movs	r1, #36	@ 0x24
 800d2c6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	681a      	ldr	r2, [r3, #0]
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	2101      	movs	r1, #1
 800d2dc:	438a      	bics	r2, r1
 800d2de:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	689b      	ldr	r3, [r3, #8]
 800d2e6:	00db      	lsls	r3, r3, #3
 800d2e8:	08d9      	lsrs	r1, r3, #3
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	683a      	ldr	r2, [r7, #0]
 800d2f0:	430a      	orrs	r2, r1
 800d2f2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	0018      	movs	r0, r3
 800d2f8:	f000 f854 	bl	800d3a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	68fa      	ldr	r2, [r7, #12]
 800d302:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	2288      	movs	r2, #136	@ 0x88
 800d308:	2120      	movs	r1, #32
 800d30a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	2284      	movs	r2, #132	@ 0x84
 800d310:	2100      	movs	r1, #0
 800d312:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800d314:	2300      	movs	r3, #0
}
 800d316:	0018      	movs	r0, r3
 800d318:	46bd      	mov	sp, r7
 800d31a:	b004      	add	sp, #16
 800d31c:	bd80      	pop	{r7, pc}
	...

0800d320 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d320:	b580      	push	{r7, lr}
 800d322:	b084      	sub	sp, #16
 800d324:	af00      	add	r7, sp, #0
 800d326:	6078      	str	r0, [r7, #4]
 800d328:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	2284      	movs	r2, #132	@ 0x84
 800d32e:	5c9b      	ldrb	r3, [r3, r2]
 800d330:	2b01      	cmp	r3, #1
 800d332:	d101      	bne.n	800d338 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d334:	2302      	movs	r3, #2
 800d336:	e02f      	b.n	800d398 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	2284      	movs	r2, #132	@ 0x84
 800d33c:	2101      	movs	r1, #1
 800d33e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	2288      	movs	r2, #136	@ 0x88
 800d344:	2124      	movs	r1, #36	@ 0x24
 800d346:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	681a      	ldr	r2, [r3, #0]
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	2101      	movs	r1, #1
 800d35c:	438a      	bics	r2, r1
 800d35e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	689b      	ldr	r3, [r3, #8]
 800d366:	4a0e      	ldr	r2, [pc, #56]	@ (800d3a0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800d368:	4013      	ands	r3, r2
 800d36a:	0019      	movs	r1, r3
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	683a      	ldr	r2, [r7, #0]
 800d372:	430a      	orrs	r2, r1
 800d374:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	0018      	movs	r0, r3
 800d37a:	f000 f813 	bl	800d3a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	68fa      	ldr	r2, [r7, #12]
 800d384:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	2288      	movs	r2, #136	@ 0x88
 800d38a:	2120      	movs	r1, #32
 800d38c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	2284      	movs	r2, #132	@ 0x84
 800d392:	2100      	movs	r1, #0
 800d394:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800d396:	2300      	movs	r3, #0
}
 800d398:	0018      	movs	r0, r3
 800d39a:	46bd      	mov	sp, r7
 800d39c:	b004      	add	sp, #16
 800d39e:	bd80      	pop	{r7, pc}
 800d3a0:	f1ffffff 	.word	0xf1ffffff

0800d3a4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d3a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d3a6:	b085      	sub	sp, #20
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d108      	bne.n	800d3c6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	226a      	movs	r2, #106	@ 0x6a
 800d3b8:	2101      	movs	r1, #1
 800d3ba:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	2268      	movs	r2, #104	@ 0x68
 800d3c0:	2101      	movs	r1, #1
 800d3c2:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d3c4:	e043      	b.n	800d44e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d3c6:	260f      	movs	r6, #15
 800d3c8:	19bb      	adds	r3, r7, r6
 800d3ca:	2208      	movs	r2, #8
 800d3cc:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d3ce:	200e      	movs	r0, #14
 800d3d0:	183b      	adds	r3, r7, r0
 800d3d2:	2208      	movs	r2, #8
 800d3d4:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	689b      	ldr	r3, [r3, #8]
 800d3dc:	0e5b      	lsrs	r3, r3, #25
 800d3de:	b2da      	uxtb	r2, r3
 800d3e0:	240d      	movs	r4, #13
 800d3e2:	193b      	adds	r3, r7, r4
 800d3e4:	2107      	movs	r1, #7
 800d3e6:	400a      	ands	r2, r1
 800d3e8:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	689b      	ldr	r3, [r3, #8]
 800d3f0:	0f5b      	lsrs	r3, r3, #29
 800d3f2:	b2da      	uxtb	r2, r3
 800d3f4:	250c      	movs	r5, #12
 800d3f6:	197b      	adds	r3, r7, r5
 800d3f8:	2107      	movs	r1, #7
 800d3fa:	400a      	ands	r2, r1
 800d3fc:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d3fe:	183b      	adds	r3, r7, r0
 800d400:	781b      	ldrb	r3, [r3, #0]
 800d402:	197a      	adds	r2, r7, r5
 800d404:	7812      	ldrb	r2, [r2, #0]
 800d406:	4914      	ldr	r1, [pc, #80]	@ (800d458 <UARTEx_SetNbDataToProcess+0xb4>)
 800d408:	5c8a      	ldrb	r2, [r1, r2]
 800d40a:	435a      	muls	r2, r3
 800d40c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800d40e:	197b      	adds	r3, r7, r5
 800d410:	781b      	ldrb	r3, [r3, #0]
 800d412:	4a12      	ldr	r2, [pc, #72]	@ (800d45c <UARTEx_SetNbDataToProcess+0xb8>)
 800d414:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d416:	0019      	movs	r1, r3
 800d418:	f7f2 ff24 	bl	8000264 <__divsi3>
 800d41c:	0003      	movs	r3, r0
 800d41e:	b299      	uxth	r1, r3
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	226a      	movs	r2, #106	@ 0x6a
 800d424:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d426:	19bb      	adds	r3, r7, r6
 800d428:	781b      	ldrb	r3, [r3, #0]
 800d42a:	193a      	adds	r2, r7, r4
 800d42c:	7812      	ldrb	r2, [r2, #0]
 800d42e:	490a      	ldr	r1, [pc, #40]	@ (800d458 <UARTEx_SetNbDataToProcess+0xb4>)
 800d430:	5c8a      	ldrb	r2, [r1, r2]
 800d432:	435a      	muls	r2, r3
 800d434:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800d436:	193b      	adds	r3, r7, r4
 800d438:	781b      	ldrb	r3, [r3, #0]
 800d43a:	4a08      	ldr	r2, [pc, #32]	@ (800d45c <UARTEx_SetNbDataToProcess+0xb8>)
 800d43c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d43e:	0019      	movs	r1, r3
 800d440:	f7f2 ff10 	bl	8000264 <__divsi3>
 800d444:	0003      	movs	r3, r0
 800d446:	b299      	uxth	r1, r3
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	2268      	movs	r2, #104	@ 0x68
 800d44c:	5299      	strh	r1, [r3, r2]
}
 800d44e:	46c0      	nop			@ (mov r8, r8)
 800d450:	46bd      	mov	sp, r7
 800d452:	b005      	add	sp, #20
 800d454:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d456:	46c0      	nop			@ (mov r8, r8)
 800d458:	08011760 	.word	0x08011760
 800d45c:	08011768 	.word	0x08011768

0800d460 <sulp>:
 800d460:	b570      	push	{r4, r5, r6, lr}
 800d462:	0016      	movs	r6, r2
 800d464:	000d      	movs	r5, r1
 800d466:	f002 f925 	bl	800f6b4 <__ulp>
 800d46a:	2e00      	cmp	r6, #0
 800d46c:	d00d      	beq.n	800d48a <sulp+0x2a>
 800d46e:	236b      	movs	r3, #107	@ 0x6b
 800d470:	006a      	lsls	r2, r5, #1
 800d472:	0d52      	lsrs	r2, r2, #21
 800d474:	1a9b      	subs	r3, r3, r2
 800d476:	2b00      	cmp	r3, #0
 800d478:	dd07      	ble.n	800d48a <sulp+0x2a>
 800d47a:	2400      	movs	r4, #0
 800d47c:	4a03      	ldr	r2, [pc, #12]	@ (800d48c <sulp+0x2c>)
 800d47e:	051b      	lsls	r3, r3, #20
 800d480:	189d      	adds	r5, r3, r2
 800d482:	002b      	movs	r3, r5
 800d484:	0022      	movs	r2, r4
 800d486:	f7f5 f899 	bl	80025bc <__aeabi_dmul>
 800d48a:	bd70      	pop	{r4, r5, r6, pc}
 800d48c:	3ff00000 	.word	0x3ff00000

0800d490 <_strtod_l>:
 800d490:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d492:	b0a3      	sub	sp, #140	@ 0x8c
 800d494:	921b      	str	r2, [sp, #108]	@ 0x6c
 800d496:	2200      	movs	r2, #0
 800d498:	2600      	movs	r6, #0
 800d49a:	2700      	movs	r7, #0
 800d49c:	9005      	str	r0, [sp, #20]
 800d49e:	9109      	str	r1, [sp, #36]	@ 0x24
 800d4a0:	921e      	str	r2, [sp, #120]	@ 0x78
 800d4a2:	911d      	str	r1, [sp, #116]	@ 0x74
 800d4a4:	780a      	ldrb	r2, [r1, #0]
 800d4a6:	2a2b      	cmp	r2, #43	@ 0x2b
 800d4a8:	d053      	beq.n	800d552 <_strtod_l+0xc2>
 800d4aa:	d83f      	bhi.n	800d52c <_strtod_l+0x9c>
 800d4ac:	2a0d      	cmp	r2, #13
 800d4ae:	d839      	bhi.n	800d524 <_strtod_l+0x94>
 800d4b0:	2a08      	cmp	r2, #8
 800d4b2:	d839      	bhi.n	800d528 <_strtod_l+0x98>
 800d4b4:	2a00      	cmp	r2, #0
 800d4b6:	d042      	beq.n	800d53e <_strtod_l+0xae>
 800d4b8:	2200      	movs	r2, #0
 800d4ba:	9212      	str	r2, [sp, #72]	@ 0x48
 800d4bc:	2100      	movs	r1, #0
 800d4be:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 800d4c0:	910c      	str	r1, [sp, #48]	@ 0x30
 800d4c2:	782a      	ldrb	r2, [r5, #0]
 800d4c4:	2a30      	cmp	r2, #48	@ 0x30
 800d4c6:	d000      	beq.n	800d4ca <_strtod_l+0x3a>
 800d4c8:	e083      	b.n	800d5d2 <_strtod_l+0x142>
 800d4ca:	786a      	ldrb	r2, [r5, #1]
 800d4cc:	3120      	adds	r1, #32
 800d4ce:	438a      	bics	r2, r1
 800d4d0:	2a58      	cmp	r2, #88	@ 0x58
 800d4d2:	d000      	beq.n	800d4d6 <_strtod_l+0x46>
 800d4d4:	e073      	b.n	800d5be <_strtod_l+0x12e>
 800d4d6:	9302      	str	r3, [sp, #8]
 800d4d8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d4da:	4a95      	ldr	r2, [pc, #596]	@ (800d730 <_strtod_l+0x2a0>)
 800d4dc:	9301      	str	r3, [sp, #4]
 800d4de:	ab1e      	add	r3, sp, #120	@ 0x78
 800d4e0:	9300      	str	r3, [sp, #0]
 800d4e2:	9805      	ldr	r0, [sp, #20]
 800d4e4:	ab1f      	add	r3, sp, #124	@ 0x7c
 800d4e6:	a91d      	add	r1, sp, #116	@ 0x74
 800d4e8:	f001 f99e 	bl	800e828 <__gethex>
 800d4ec:	230f      	movs	r3, #15
 800d4ee:	0002      	movs	r2, r0
 800d4f0:	401a      	ands	r2, r3
 800d4f2:	0004      	movs	r4, r0
 800d4f4:	9206      	str	r2, [sp, #24]
 800d4f6:	4218      	tst	r0, r3
 800d4f8:	d005      	beq.n	800d506 <_strtod_l+0x76>
 800d4fa:	2a06      	cmp	r2, #6
 800d4fc:	d12b      	bne.n	800d556 <_strtod_l+0xc6>
 800d4fe:	2300      	movs	r3, #0
 800d500:	3501      	adds	r5, #1
 800d502:	951d      	str	r5, [sp, #116]	@ 0x74
 800d504:	9312      	str	r3, [sp, #72]	@ 0x48
 800d506:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d002      	beq.n	800d512 <_strtod_l+0x82>
 800d50c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d50e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800d510:	6013      	str	r3, [r2, #0]
 800d512:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d514:	2b00      	cmp	r3, #0
 800d516:	d019      	beq.n	800d54c <_strtod_l+0xbc>
 800d518:	2380      	movs	r3, #128	@ 0x80
 800d51a:	0030      	movs	r0, r6
 800d51c:	061b      	lsls	r3, r3, #24
 800d51e:	18f9      	adds	r1, r7, r3
 800d520:	b023      	add	sp, #140	@ 0x8c
 800d522:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d524:	2a20      	cmp	r2, #32
 800d526:	d1c7      	bne.n	800d4b8 <_strtod_l+0x28>
 800d528:	3101      	adds	r1, #1
 800d52a:	e7ba      	b.n	800d4a2 <_strtod_l+0x12>
 800d52c:	2a2d      	cmp	r2, #45	@ 0x2d
 800d52e:	d1c3      	bne.n	800d4b8 <_strtod_l+0x28>
 800d530:	3a2c      	subs	r2, #44	@ 0x2c
 800d532:	9212      	str	r2, [sp, #72]	@ 0x48
 800d534:	1c4a      	adds	r2, r1, #1
 800d536:	921d      	str	r2, [sp, #116]	@ 0x74
 800d538:	784a      	ldrb	r2, [r1, #1]
 800d53a:	2a00      	cmp	r2, #0
 800d53c:	d1be      	bne.n	800d4bc <_strtod_l+0x2c>
 800d53e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d540:	931d      	str	r3, [sp, #116]	@ 0x74
 800d542:	2300      	movs	r3, #0
 800d544:	9312      	str	r3, [sp, #72]	@ 0x48
 800d546:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d1df      	bne.n	800d50c <_strtod_l+0x7c>
 800d54c:	0030      	movs	r0, r6
 800d54e:	0039      	movs	r1, r7
 800d550:	e7e6      	b.n	800d520 <_strtod_l+0x90>
 800d552:	2200      	movs	r2, #0
 800d554:	e7ed      	b.n	800d532 <_strtod_l+0xa2>
 800d556:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 800d558:	2a00      	cmp	r2, #0
 800d55a:	d007      	beq.n	800d56c <_strtod_l+0xdc>
 800d55c:	2135      	movs	r1, #53	@ 0x35
 800d55e:	a820      	add	r0, sp, #128	@ 0x80
 800d560:	f002 f99e 	bl	800f8a0 <__copybits>
 800d564:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800d566:	9805      	ldr	r0, [sp, #20]
 800d568:	f001 fd58 	bl	800f01c <_Bfree>
 800d56c:	9806      	ldr	r0, [sp, #24]
 800d56e:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800d570:	3801      	subs	r0, #1
 800d572:	2804      	cmp	r0, #4
 800d574:	d806      	bhi.n	800d584 <_strtod_l+0xf4>
 800d576:	f7f2 fdd7 	bl	8000128 <__gnu_thumb1_case_uqi>
 800d57a:	0312      	.short	0x0312
 800d57c:	1e1c      	.short	0x1e1c
 800d57e:	12          	.byte	0x12
 800d57f:	00          	.byte	0x00
 800d580:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800d582:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 800d584:	05e4      	lsls	r4, r4, #23
 800d586:	d502      	bpl.n	800d58e <_strtod_l+0xfe>
 800d588:	2380      	movs	r3, #128	@ 0x80
 800d58a:	061b      	lsls	r3, r3, #24
 800d58c:	431f      	orrs	r7, r3
 800d58e:	4b69      	ldr	r3, [pc, #420]	@ (800d734 <_strtod_l+0x2a4>)
 800d590:	423b      	tst	r3, r7
 800d592:	d1b8      	bne.n	800d506 <_strtod_l+0x76>
 800d594:	f001 f85a 	bl	800e64c <__errno>
 800d598:	2322      	movs	r3, #34	@ 0x22
 800d59a:	6003      	str	r3, [r0, #0]
 800d59c:	e7b3      	b.n	800d506 <_strtod_l+0x76>
 800d59e:	4966      	ldr	r1, [pc, #408]	@ (800d738 <_strtod_l+0x2a8>)
 800d5a0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800d5a2:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800d5a4:	400a      	ands	r2, r1
 800d5a6:	4965      	ldr	r1, [pc, #404]	@ (800d73c <_strtod_l+0x2ac>)
 800d5a8:	185b      	adds	r3, r3, r1
 800d5aa:	051b      	lsls	r3, r3, #20
 800d5ac:	431a      	orrs	r2, r3
 800d5ae:	0017      	movs	r7, r2
 800d5b0:	e7e8      	b.n	800d584 <_strtod_l+0xf4>
 800d5b2:	4f60      	ldr	r7, [pc, #384]	@ (800d734 <_strtod_l+0x2a4>)
 800d5b4:	e7e6      	b.n	800d584 <_strtod_l+0xf4>
 800d5b6:	2601      	movs	r6, #1
 800d5b8:	4f61      	ldr	r7, [pc, #388]	@ (800d740 <_strtod_l+0x2b0>)
 800d5ba:	4276      	negs	r6, r6
 800d5bc:	e7e2      	b.n	800d584 <_strtod_l+0xf4>
 800d5be:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d5c0:	1c5a      	adds	r2, r3, #1
 800d5c2:	921d      	str	r2, [sp, #116]	@ 0x74
 800d5c4:	785b      	ldrb	r3, [r3, #1]
 800d5c6:	2b30      	cmp	r3, #48	@ 0x30
 800d5c8:	d0f9      	beq.n	800d5be <_strtod_l+0x12e>
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d09b      	beq.n	800d506 <_strtod_l+0x76>
 800d5ce:	2301      	movs	r3, #1
 800d5d0:	930c      	str	r3, [sp, #48]	@ 0x30
 800d5d2:	2500      	movs	r5, #0
 800d5d4:	220a      	movs	r2, #10
 800d5d6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d5d8:	950d      	str	r5, [sp, #52]	@ 0x34
 800d5da:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d5dc:	9508      	str	r5, [sp, #32]
 800d5de:	981d      	ldr	r0, [sp, #116]	@ 0x74
 800d5e0:	7804      	ldrb	r4, [r0, #0]
 800d5e2:	0023      	movs	r3, r4
 800d5e4:	3b30      	subs	r3, #48	@ 0x30
 800d5e6:	b2d9      	uxtb	r1, r3
 800d5e8:	2909      	cmp	r1, #9
 800d5ea:	d927      	bls.n	800d63c <_strtod_l+0x1ac>
 800d5ec:	2201      	movs	r2, #1
 800d5ee:	4955      	ldr	r1, [pc, #340]	@ (800d744 <_strtod_l+0x2b4>)
 800d5f0:	f000 ffcc 	bl	800e58c <strncmp>
 800d5f4:	2800      	cmp	r0, #0
 800d5f6:	d031      	beq.n	800d65c <_strtod_l+0x1cc>
 800d5f8:	2000      	movs	r0, #0
 800d5fa:	0023      	movs	r3, r4
 800d5fc:	4684      	mov	ip, r0
 800d5fe:	9a08      	ldr	r2, [sp, #32]
 800d600:	900e      	str	r0, [sp, #56]	@ 0x38
 800d602:	9206      	str	r2, [sp, #24]
 800d604:	2220      	movs	r2, #32
 800d606:	0019      	movs	r1, r3
 800d608:	4391      	bics	r1, r2
 800d60a:	000a      	movs	r2, r1
 800d60c:	2100      	movs	r1, #0
 800d60e:	9107      	str	r1, [sp, #28]
 800d610:	2a45      	cmp	r2, #69	@ 0x45
 800d612:	d000      	beq.n	800d616 <_strtod_l+0x186>
 800d614:	e0c0      	b.n	800d798 <_strtod_l+0x308>
 800d616:	9b06      	ldr	r3, [sp, #24]
 800d618:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d61a:	4303      	orrs	r3, r0
 800d61c:	4313      	orrs	r3, r2
 800d61e:	428b      	cmp	r3, r1
 800d620:	d08d      	beq.n	800d53e <_strtod_l+0xae>
 800d622:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d624:	9309      	str	r3, [sp, #36]	@ 0x24
 800d626:	3301      	adds	r3, #1
 800d628:	931d      	str	r3, [sp, #116]	@ 0x74
 800d62a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d62c:	785b      	ldrb	r3, [r3, #1]
 800d62e:	2b2b      	cmp	r3, #43	@ 0x2b
 800d630:	d070      	beq.n	800d714 <_strtod_l+0x284>
 800d632:	000c      	movs	r4, r1
 800d634:	2b2d      	cmp	r3, #45	@ 0x2d
 800d636:	d173      	bne.n	800d720 <_strtod_l+0x290>
 800d638:	2401      	movs	r4, #1
 800d63a:	e06c      	b.n	800d716 <_strtod_l+0x286>
 800d63c:	9908      	ldr	r1, [sp, #32]
 800d63e:	2908      	cmp	r1, #8
 800d640:	dc09      	bgt.n	800d656 <_strtod_l+0x1c6>
 800d642:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800d644:	4351      	muls	r1, r2
 800d646:	185b      	adds	r3, r3, r1
 800d648:	930d      	str	r3, [sp, #52]	@ 0x34
 800d64a:	9b08      	ldr	r3, [sp, #32]
 800d64c:	3001      	adds	r0, #1
 800d64e:	3301      	adds	r3, #1
 800d650:	9308      	str	r3, [sp, #32]
 800d652:	901d      	str	r0, [sp, #116]	@ 0x74
 800d654:	e7c3      	b.n	800d5de <_strtod_l+0x14e>
 800d656:	4355      	muls	r5, r2
 800d658:	195d      	adds	r5, r3, r5
 800d65a:	e7f6      	b.n	800d64a <_strtod_l+0x1ba>
 800d65c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d65e:	1c5a      	adds	r2, r3, #1
 800d660:	921d      	str	r2, [sp, #116]	@ 0x74
 800d662:	9a08      	ldr	r2, [sp, #32]
 800d664:	785b      	ldrb	r3, [r3, #1]
 800d666:	2a00      	cmp	r2, #0
 800d668:	d03a      	beq.n	800d6e0 <_strtod_l+0x250>
 800d66a:	900e      	str	r0, [sp, #56]	@ 0x38
 800d66c:	9206      	str	r2, [sp, #24]
 800d66e:	001a      	movs	r2, r3
 800d670:	3a30      	subs	r2, #48	@ 0x30
 800d672:	2a09      	cmp	r2, #9
 800d674:	d912      	bls.n	800d69c <_strtod_l+0x20c>
 800d676:	2201      	movs	r2, #1
 800d678:	4694      	mov	ip, r2
 800d67a:	e7c3      	b.n	800d604 <_strtod_l+0x174>
 800d67c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d67e:	3001      	adds	r0, #1
 800d680:	1c5a      	adds	r2, r3, #1
 800d682:	921d      	str	r2, [sp, #116]	@ 0x74
 800d684:	785b      	ldrb	r3, [r3, #1]
 800d686:	2b30      	cmp	r3, #48	@ 0x30
 800d688:	d0f8      	beq.n	800d67c <_strtod_l+0x1ec>
 800d68a:	001a      	movs	r2, r3
 800d68c:	3a31      	subs	r2, #49	@ 0x31
 800d68e:	2a08      	cmp	r2, #8
 800d690:	d83b      	bhi.n	800d70a <_strtod_l+0x27a>
 800d692:	900e      	str	r0, [sp, #56]	@ 0x38
 800d694:	2000      	movs	r0, #0
 800d696:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800d698:	9006      	str	r0, [sp, #24]
 800d69a:	9213      	str	r2, [sp, #76]	@ 0x4c
 800d69c:	001a      	movs	r2, r3
 800d69e:	1c41      	adds	r1, r0, #1
 800d6a0:	3a30      	subs	r2, #48	@ 0x30
 800d6a2:	2b30      	cmp	r3, #48	@ 0x30
 800d6a4:	d016      	beq.n	800d6d4 <_strtod_l+0x244>
 800d6a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d6a8:	185b      	adds	r3, r3, r1
 800d6aa:	930e      	str	r3, [sp, #56]	@ 0x38
 800d6ac:	9b06      	ldr	r3, [sp, #24]
 800d6ae:	210a      	movs	r1, #10
 800d6b0:	469c      	mov	ip, r3
 800d6b2:	4484      	add	ip, r0
 800d6b4:	459c      	cmp	ip, r3
 800d6b6:	d115      	bne.n	800d6e4 <_strtod_l+0x254>
 800d6b8:	9906      	ldr	r1, [sp, #24]
 800d6ba:	9b06      	ldr	r3, [sp, #24]
 800d6bc:	3101      	adds	r1, #1
 800d6be:	1809      	adds	r1, r1, r0
 800d6c0:	181b      	adds	r3, r3, r0
 800d6c2:	9106      	str	r1, [sp, #24]
 800d6c4:	2b08      	cmp	r3, #8
 800d6c6:	dc19      	bgt.n	800d6fc <_strtod_l+0x26c>
 800d6c8:	230a      	movs	r3, #10
 800d6ca:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800d6cc:	434b      	muls	r3, r1
 800d6ce:	2100      	movs	r1, #0
 800d6d0:	18d3      	adds	r3, r2, r3
 800d6d2:	930d      	str	r3, [sp, #52]	@ 0x34
 800d6d4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d6d6:	0008      	movs	r0, r1
 800d6d8:	1c5a      	adds	r2, r3, #1
 800d6da:	921d      	str	r2, [sp, #116]	@ 0x74
 800d6dc:	785b      	ldrb	r3, [r3, #1]
 800d6de:	e7c6      	b.n	800d66e <_strtod_l+0x1de>
 800d6e0:	9808      	ldr	r0, [sp, #32]
 800d6e2:	e7d0      	b.n	800d686 <_strtod_l+0x1f6>
 800d6e4:	1c5c      	adds	r4, r3, #1
 800d6e6:	2b08      	cmp	r3, #8
 800d6e8:	dc04      	bgt.n	800d6f4 <_strtod_l+0x264>
 800d6ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d6ec:	434b      	muls	r3, r1
 800d6ee:	930d      	str	r3, [sp, #52]	@ 0x34
 800d6f0:	0023      	movs	r3, r4
 800d6f2:	e7df      	b.n	800d6b4 <_strtod_l+0x224>
 800d6f4:	2c10      	cmp	r4, #16
 800d6f6:	dcfb      	bgt.n	800d6f0 <_strtod_l+0x260>
 800d6f8:	434d      	muls	r5, r1
 800d6fa:	e7f9      	b.n	800d6f0 <_strtod_l+0x260>
 800d6fc:	2100      	movs	r1, #0
 800d6fe:	2b0f      	cmp	r3, #15
 800d700:	dce8      	bgt.n	800d6d4 <_strtod_l+0x244>
 800d702:	230a      	movs	r3, #10
 800d704:	435d      	muls	r5, r3
 800d706:	1955      	adds	r5, r2, r5
 800d708:	e7e4      	b.n	800d6d4 <_strtod_l+0x244>
 800d70a:	2200      	movs	r2, #0
 800d70c:	920e      	str	r2, [sp, #56]	@ 0x38
 800d70e:	9206      	str	r2, [sp, #24]
 800d710:	3201      	adds	r2, #1
 800d712:	e7b1      	b.n	800d678 <_strtod_l+0x1e8>
 800d714:	2400      	movs	r4, #0
 800d716:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d718:	3302      	adds	r3, #2
 800d71a:	931d      	str	r3, [sp, #116]	@ 0x74
 800d71c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d71e:	789b      	ldrb	r3, [r3, #2]
 800d720:	001a      	movs	r2, r3
 800d722:	3a30      	subs	r2, #48	@ 0x30
 800d724:	2a09      	cmp	r2, #9
 800d726:	d913      	bls.n	800d750 <_strtod_l+0x2c0>
 800d728:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d72a:	921d      	str	r2, [sp, #116]	@ 0x74
 800d72c:	2200      	movs	r2, #0
 800d72e:	e032      	b.n	800d796 <_strtod_l+0x306>
 800d730:	08011794 	.word	0x08011794
 800d734:	7ff00000 	.word	0x7ff00000
 800d738:	ffefffff 	.word	0xffefffff
 800d73c:	00000433 	.word	0x00000433
 800d740:	7fffffff 	.word	0x7fffffff
 800d744:	08011770 	.word	0x08011770
 800d748:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d74a:	1c5a      	adds	r2, r3, #1
 800d74c:	921d      	str	r2, [sp, #116]	@ 0x74
 800d74e:	785b      	ldrb	r3, [r3, #1]
 800d750:	2b30      	cmp	r3, #48	@ 0x30
 800d752:	d0f9      	beq.n	800d748 <_strtod_l+0x2b8>
 800d754:	2200      	movs	r2, #0
 800d756:	9207      	str	r2, [sp, #28]
 800d758:	001a      	movs	r2, r3
 800d75a:	3a31      	subs	r2, #49	@ 0x31
 800d75c:	2a08      	cmp	r2, #8
 800d75e:	d81b      	bhi.n	800d798 <_strtod_l+0x308>
 800d760:	3b30      	subs	r3, #48	@ 0x30
 800d762:	9310      	str	r3, [sp, #64]	@ 0x40
 800d764:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d766:	9307      	str	r3, [sp, #28]
 800d768:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d76a:	1c59      	adds	r1, r3, #1
 800d76c:	911d      	str	r1, [sp, #116]	@ 0x74
 800d76e:	785b      	ldrb	r3, [r3, #1]
 800d770:	001a      	movs	r2, r3
 800d772:	3a30      	subs	r2, #48	@ 0x30
 800d774:	2a09      	cmp	r2, #9
 800d776:	d93a      	bls.n	800d7ee <_strtod_l+0x35e>
 800d778:	9a07      	ldr	r2, [sp, #28]
 800d77a:	1a8a      	subs	r2, r1, r2
 800d77c:	49b4      	ldr	r1, [pc, #720]	@ (800da50 <_strtod_l+0x5c0>)
 800d77e:	9107      	str	r1, [sp, #28]
 800d780:	2a08      	cmp	r2, #8
 800d782:	dc04      	bgt.n	800d78e <_strtod_l+0x2fe>
 800d784:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800d786:	9207      	str	r2, [sp, #28]
 800d788:	428a      	cmp	r2, r1
 800d78a:	dd00      	ble.n	800d78e <_strtod_l+0x2fe>
 800d78c:	9107      	str	r1, [sp, #28]
 800d78e:	2c00      	cmp	r4, #0
 800d790:	d002      	beq.n	800d798 <_strtod_l+0x308>
 800d792:	9a07      	ldr	r2, [sp, #28]
 800d794:	4252      	negs	r2, r2
 800d796:	9207      	str	r2, [sp, #28]
 800d798:	9a06      	ldr	r2, [sp, #24]
 800d79a:	2a00      	cmp	r2, #0
 800d79c:	d14d      	bne.n	800d83a <_strtod_l+0x3aa>
 800d79e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d7a0:	4310      	orrs	r0, r2
 800d7a2:	d000      	beq.n	800d7a6 <_strtod_l+0x316>
 800d7a4:	e6af      	b.n	800d506 <_strtod_l+0x76>
 800d7a6:	4662      	mov	r2, ip
 800d7a8:	2a00      	cmp	r2, #0
 800d7aa:	d000      	beq.n	800d7ae <_strtod_l+0x31e>
 800d7ac:	e6c7      	b.n	800d53e <_strtod_l+0xae>
 800d7ae:	2b69      	cmp	r3, #105	@ 0x69
 800d7b0:	d027      	beq.n	800d802 <_strtod_l+0x372>
 800d7b2:	dc23      	bgt.n	800d7fc <_strtod_l+0x36c>
 800d7b4:	2b49      	cmp	r3, #73	@ 0x49
 800d7b6:	d024      	beq.n	800d802 <_strtod_l+0x372>
 800d7b8:	2b4e      	cmp	r3, #78	@ 0x4e
 800d7ba:	d000      	beq.n	800d7be <_strtod_l+0x32e>
 800d7bc:	e6bf      	b.n	800d53e <_strtod_l+0xae>
 800d7be:	49a5      	ldr	r1, [pc, #660]	@ (800da54 <_strtod_l+0x5c4>)
 800d7c0:	a81d      	add	r0, sp, #116	@ 0x74
 800d7c2:	f001 fa67 	bl	800ec94 <__match>
 800d7c6:	2800      	cmp	r0, #0
 800d7c8:	d100      	bne.n	800d7cc <_strtod_l+0x33c>
 800d7ca:	e6b8      	b.n	800d53e <_strtod_l+0xae>
 800d7cc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d7ce:	781b      	ldrb	r3, [r3, #0]
 800d7d0:	2b28      	cmp	r3, #40	@ 0x28
 800d7d2:	d12c      	bne.n	800d82e <_strtod_l+0x39e>
 800d7d4:	49a0      	ldr	r1, [pc, #640]	@ (800da58 <_strtod_l+0x5c8>)
 800d7d6:	aa20      	add	r2, sp, #128	@ 0x80
 800d7d8:	a81d      	add	r0, sp, #116	@ 0x74
 800d7da:	f001 fa6f 	bl	800ecbc <__hexnan>
 800d7de:	2805      	cmp	r0, #5
 800d7e0:	d125      	bne.n	800d82e <_strtod_l+0x39e>
 800d7e2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d7e4:	4a9d      	ldr	r2, [pc, #628]	@ (800da5c <_strtod_l+0x5cc>)
 800d7e6:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800d7e8:	431a      	orrs	r2, r3
 800d7ea:	0017      	movs	r7, r2
 800d7ec:	e68b      	b.n	800d506 <_strtod_l+0x76>
 800d7ee:	220a      	movs	r2, #10
 800d7f0:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800d7f2:	434a      	muls	r2, r1
 800d7f4:	18d2      	adds	r2, r2, r3
 800d7f6:	3a30      	subs	r2, #48	@ 0x30
 800d7f8:	9210      	str	r2, [sp, #64]	@ 0x40
 800d7fa:	e7b5      	b.n	800d768 <_strtod_l+0x2d8>
 800d7fc:	2b6e      	cmp	r3, #110	@ 0x6e
 800d7fe:	d0de      	beq.n	800d7be <_strtod_l+0x32e>
 800d800:	e69d      	b.n	800d53e <_strtod_l+0xae>
 800d802:	4997      	ldr	r1, [pc, #604]	@ (800da60 <_strtod_l+0x5d0>)
 800d804:	a81d      	add	r0, sp, #116	@ 0x74
 800d806:	f001 fa45 	bl	800ec94 <__match>
 800d80a:	2800      	cmp	r0, #0
 800d80c:	d100      	bne.n	800d810 <_strtod_l+0x380>
 800d80e:	e696      	b.n	800d53e <_strtod_l+0xae>
 800d810:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d812:	4994      	ldr	r1, [pc, #592]	@ (800da64 <_strtod_l+0x5d4>)
 800d814:	3b01      	subs	r3, #1
 800d816:	a81d      	add	r0, sp, #116	@ 0x74
 800d818:	931d      	str	r3, [sp, #116]	@ 0x74
 800d81a:	f001 fa3b 	bl	800ec94 <__match>
 800d81e:	2800      	cmp	r0, #0
 800d820:	d102      	bne.n	800d828 <_strtod_l+0x398>
 800d822:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d824:	3301      	adds	r3, #1
 800d826:	931d      	str	r3, [sp, #116]	@ 0x74
 800d828:	2600      	movs	r6, #0
 800d82a:	4f8c      	ldr	r7, [pc, #560]	@ (800da5c <_strtod_l+0x5cc>)
 800d82c:	e66b      	b.n	800d506 <_strtod_l+0x76>
 800d82e:	488e      	ldr	r0, [pc, #568]	@ (800da68 <_strtod_l+0x5d8>)
 800d830:	f000 ff42 	bl	800e6b8 <nan>
 800d834:	0006      	movs	r6, r0
 800d836:	000f      	movs	r7, r1
 800d838:	e665      	b.n	800d506 <_strtod_l+0x76>
 800d83a:	9b07      	ldr	r3, [sp, #28]
 800d83c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d83e:	1a9b      	subs	r3, r3, r2
 800d840:	930c      	str	r3, [sp, #48]	@ 0x30
 800d842:	9b08      	ldr	r3, [sp, #32]
 800d844:	2b00      	cmp	r3, #0
 800d846:	d101      	bne.n	800d84c <_strtod_l+0x3bc>
 800d848:	9b06      	ldr	r3, [sp, #24]
 800d84a:	9308      	str	r3, [sp, #32]
 800d84c:	9c06      	ldr	r4, [sp, #24]
 800d84e:	2c10      	cmp	r4, #16
 800d850:	dd00      	ble.n	800d854 <_strtod_l+0x3c4>
 800d852:	2410      	movs	r4, #16
 800d854:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800d856:	f7f5 fda1 	bl	800339c <__aeabi_ui2d>
 800d85a:	9b06      	ldr	r3, [sp, #24]
 800d85c:	0006      	movs	r6, r0
 800d85e:	000f      	movs	r7, r1
 800d860:	2b09      	cmp	r3, #9
 800d862:	dc13      	bgt.n	800d88c <_strtod_l+0x3fc>
 800d864:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d866:	2b00      	cmp	r3, #0
 800d868:	d100      	bne.n	800d86c <_strtod_l+0x3dc>
 800d86a:	e64c      	b.n	800d506 <_strtod_l+0x76>
 800d86c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d86e:	2b00      	cmp	r3, #0
 800d870:	dc00      	bgt.n	800d874 <_strtod_l+0x3e4>
 800d872:	e07e      	b.n	800d972 <_strtod_l+0x4e2>
 800d874:	2b16      	cmp	r3, #22
 800d876:	dc63      	bgt.n	800d940 <_strtod_l+0x4b0>
 800d878:	497c      	ldr	r1, [pc, #496]	@ (800da6c <_strtod_l+0x5dc>)
 800d87a:	00db      	lsls	r3, r3, #3
 800d87c:	18c9      	adds	r1, r1, r3
 800d87e:	0032      	movs	r2, r6
 800d880:	6808      	ldr	r0, [r1, #0]
 800d882:	6849      	ldr	r1, [r1, #4]
 800d884:	003b      	movs	r3, r7
 800d886:	f7f4 fe99 	bl	80025bc <__aeabi_dmul>
 800d88a:	e7d3      	b.n	800d834 <_strtod_l+0x3a4>
 800d88c:	0022      	movs	r2, r4
 800d88e:	4b77      	ldr	r3, [pc, #476]	@ (800da6c <_strtod_l+0x5dc>)
 800d890:	3a09      	subs	r2, #9
 800d892:	00d2      	lsls	r2, r2, #3
 800d894:	189b      	adds	r3, r3, r2
 800d896:	681a      	ldr	r2, [r3, #0]
 800d898:	685b      	ldr	r3, [r3, #4]
 800d89a:	f7f4 fe8f 	bl	80025bc <__aeabi_dmul>
 800d89e:	0006      	movs	r6, r0
 800d8a0:	0028      	movs	r0, r5
 800d8a2:	000f      	movs	r7, r1
 800d8a4:	f7f5 fd7a 	bl	800339c <__aeabi_ui2d>
 800d8a8:	000b      	movs	r3, r1
 800d8aa:	0002      	movs	r2, r0
 800d8ac:	0039      	movs	r1, r7
 800d8ae:	0030      	movs	r0, r6
 800d8b0:	f7f3 fedc 	bl	800166c <__aeabi_dadd>
 800d8b4:	9b06      	ldr	r3, [sp, #24]
 800d8b6:	0006      	movs	r6, r0
 800d8b8:	000f      	movs	r7, r1
 800d8ba:	2b0f      	cmp	r3, #15
 800d8bc:	ddd2      	ble.n	800d864 <_strtod_l+0x3d4>
 800d8be:	9b06      	ldr	r3, [sp, #24]
 800d8c0:	1b1c      	subs	r4, r3, r4
 800d8c2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d8c4:	18e4      	adds	r4, r4, r3
 800d8c6:	2c00      	cmp	r4, #0
 800d8c8:	dc00      	bgt.n	800d8cc <_strtod_l+0x43c>
 800d8ca:	e09b      	b.n	800da04 <_strtod_l+0x574>
 800d8cc:	220f      	movs	r2, #15
 800d8ce:	0023      	movs	r3, r4
 800d8d0:	4013      	ands	r3, r2
 800d8d2:	4214      	tst	r4, r2
 800d8d4:	d00a      	beq.n	800d8ec <_strtod_l+0x45c>
 800d8d6:	4965      	ldr	r1, [pc, #404]	@ (800da6c <_strtod_l+0x5dc>)
 800d8d8:	00db      	lsls	r3, r3, #3
 800d8da:	18c9      	adds	r1, r1, r3
 800d8dc:	0032      	movs	r2, r6
 800d8de:	6808      	ldr	r0, [r1, #0]
 800d8e0:	6849      	ldr	r1, [r1, #4]
 800d8e2:	003b      	movs	r3, r7
 800d8e4:	f7f4 fe6a 	bl	80025bc <__aeabi_dmul>
 800d8e8:	0006      	movs	r6, r0
 800d8ea:	000f      	movs	r7, r1
 800d8ec:	230f      	movs	r3, #15
 800d8ee:	439c      	bics	r4, r3
 800d8f0:	d073      	beq.n	800d9da <_strtod_l+0x54a>
 800d8f2:	3326      	adds	r3, #38	@ 0x26
 800d8f4:	33ff      	adds	r3, #255	@ 0xff
 800d8f6:	429c      	cmp	r4, r3
 800d8f8:	dd4b      	ble.n	800d992 <_strtod_l+0x502>
 800d8fa:	2300      	movs	r3, #0
 800d8fc:	9306      	str	r3, [sp, #24]
 800d8fe:	9307      	str	r3, [sp, #28]
 800d900:	930d      	str	r3, [sp, #52]	@ 0x34
 800d902:	9308      	str	r3, [sp, #32]
 800d904:	2322      	movs	r3, #34	@ 0x22
 800d906:	2600      	movs	r6, #0
 800d908:	9a05      	ldr	r2, [sp, #20]
 800d90a:	4f54      	ldr	r7, [pc, #336]	@ (800da5c <_strtod_l+0x5cc>)
 800d90c:	6013      	str	r3, [r2, #0]
 800d90e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d910:	42b3      	cmp	r3, r6
 800d912:	d100      	bne.n	800d916 <_strtod_l+0x486>
 800d914:	e5f7      	b.n	800d506 <_strtod_l+0x76>
 800d916:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800d918:	9805      	ldr	r0, [sp, #20]
 800d91a:	f001 fb7f 	bl	800f01c <_Bfree>
 800d91e:	9908      	ldr	r1, [sp, #32]
 800d920:	9805      	ldr	r0, [sp, #20]
 800d922:	f001 fb7b 	bl	800f01c <_Bfree>
 800d926:	9907      	ldr	r1, [sp, #28]
 800d928:	9805      	ldr	r0, [sp, #20]
 800d92a:	f001 fb77 	bl	800f01c <_Bfree>
 800d92e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800d930:	9805      	ldr	r0, [sp, #20]
 800d932:	f001 fb73 	bl	800f01c <_Bfree>
 800d936:	9906      	ldr	r1, [sp, #24]
 800d938:	9805      	ldr	r0, [sp, #20]
 800d93a:	f001 fb6f 	bl	800f01c <_Bfree>
 800d93e:	e5e2      	b.n	800d506 <_strtod_l+0x76>
 800d940:	2325      	movs	r3, #37	@ 0x25
 800d942:	9a06      	ldr	r2, [sp, #24]
 800d944:	1a9b      	subs	r3, r3, r2
 800d946:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d948:	4293      	cmp	r3, r2
 800d94a:	dbb8      	blt.n	800d8be <_strtod_l+0x42e>
 800d94c:	240f      	movs	r4, #15
 800d94e:	9b06      	ldr	r3, [sp, #24]
 800d950:	4d46      	ldr	r5, [pc, #280]	@ (800da6c <_strtod_l+0x5dc>)
 800d952:	1ae4      	subs	r4, r4, r3
 800d954:	00e1      	lsls	r1, r4, #3
 800d956:	1869      	adds	r1, r5, r1
 800d958:	0032      	movs	r2, r6
 800d95a:	6808      	ldr	r0, [r1, #0]
 800d95c:	6849      	ldr	r1, [r1, #4]
 800d95e:	003b      	movs	r3, r7
 800d960:	f7f4 fe2c 	bl	80025bc <__aeabi_dmul>
 800d964:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d966:	1b1c      	subs	r4, r3, r4
 800d968:	00e4      	lsls	r4, r4, #3
 800d96a:	192d      	adds	r5, r5, r4
 800d96c:	682a      	ldr	r2, [r5, #0]
 800d96e:	686b      	ldr	r3, [r5, #4]
 800d970:	e789      	b.n	800d886 <_strtod_l+0x3f6>
 800d972:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d974:	3316      	adds	r3, #22
 800d976:	dba2      	blt.n	800d8be <_strtod_l+0x42e>
 800d978:	9907      	ldr	r1, [sp, #28]
 800d97a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d97c:	4b3b      	ldr	r3, [pc, #236]	@ (800da6c <_strtod_l+0x5dc>)
 800d97e:	1a52      	subs	r2, r2, r1
 800d980:	00d2      	lsls	r2, r2, #3
 800d982:	189b      	adds	r3, r3, r2
 800d984:	0030      	movs	r0, r6
 800d986:	681a      	ldr	r2, [r3, #0]
 800d988:	685b      	ldr	r3, [r3, #4]
 800d98a:	0039      	movs	r1, r7
 800d98c:	f7f4 f9d2 	bl	8001d34 <__aeabi_ddiv>
 800d990:	e750      	b.n	800d834 <_strtod_l+0x3a4>
 800d992:	2300      	movs	r3, #0
 800d994:	0030      	movs	r0, r6
 800d996:	0039      	movs	r1, r7
 800d998:	4d35      	ldr	r5, [pc, #212]	@ (800da70 <_strtod_l+0x5e0>)
 800d99a:	1124      	asrs	r4, r4, #4
 800d99c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d99e:	2c01      	cmp	r4, #1
 800d9a0:	dc1e      	bgt.n	800d9e0 <_strtod_l+0x550>
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d001      	beq.n	800d9aa <_strtod_l+0x51a>
 800d9a6:	0006      	movs	r6, r0
 800d9a8:	000f      	movs	r7, r1
 800d9aa:	4b32      	ldr	r3, [pc, #200]	@ (800da74 <_strtod_l+0x5e4>)
 800d9ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d9ae:	18ff      	adds	r7, r7, r3
 800d9b0:	4b2f      	ldr	r3, [pc, #188]	@ (800da70 <_strtod_l+0x5e0>)
 800d9b2:	00d5      	lsls	r5, r2, #3
 800d9b4:	195d      	adds	r5, r3, r5
 800d9b6:	0032      	movs	r2, r6
 800d9b8:	6828      	ldr	r0, [r5, #0]
 800d9ba:	6869      	ldr	r1, [r5, #4]
 800d9bc:	003b      	movs	r3, r7
 800d9be:	f7f4 fdfd 	bl	80025bc <__aeabi_dmul>
 800d9c2:	4b26      	ldr	r3, [pc, #152]	@ (800da5c <_strtod_l+0x5cc>)
 800d9c4:	4a2c      	ldr	r2, [pc, #176]	@ (800da78 <_strtod_l+0x5e8>)
 800d9c6:	0006      	movs	r6, r0
 800d9c8:	400b      	ands	r3, r1
 800d9ca:	4293      	cmp	r3, r2
 800d9cc:	d895      	bhi.n	800d8fa <_strtod_l+0x46a>
 800d9ce:	4a2b      	ldr	r2, [pc, #172]	@ (800da7c <_strtod_l+0x5ec>)
 800d9d0:	4293      	cmp	r3, r2
 800d9d2:	d913      	bls.n	800d9fc <_strtod_l+0x56c>
 800d9d4:	2601      	movs	r6, #1
 800d9d6:	4f2a      	ldr	r7, [pc, #168]	@ (800da80 <_strtod_l+0x5f0>)
 800d9d8:	4276      	negs	r6, r6
 800d9da:	2300      	movs	r3, #0
 800d9dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800d9de:	e086      	b.n	800daee <_strtod_l+0x65e>
 800d9e0:	2201      	movs	r2, #1
 800d9e2:	4214      	tst	r4, r2
 800d9e4:	d004      	beq.n	800d9f0 <_strtod_l+0x560>
 800d9e6:	682a      	ldr	r2, [r5, #0]
 800d9e8:	686b      	ldr	r3, [r5, #4]
 800d9ea:	f7f4 fde7 	bl	80025bc <__aeabi_dmul>
 800d9ee:	2301      	movs	r3, #1
 800d9f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d9f2:	1064      	asrs	r4, r4, #1
 800d9f4:	3201      	adds	r2, #1
 800d9f6:	9209      	str	r2, [sp, #36]	@ 0x24
 800d9f8:	3508      	adds	r5, #8
 800d9fa:	e7d0      	b.n	800d99e <_strtod_l+0x50e>
 800d9fc:	23d4      	movs	r3, #212	@ 0xd4
 800d9fe:	049b      	lsls	r3, r3, #18
 800da00:	18cf      	adds	r7, r1, r3
 800da02:	e7ea      	b.n	800d9da <_strtod_l+0x54a>
 800da04:	2c00      	cmp	r4, #0
 800da06:	d0e8      	beq.n	800d9da <_strtod_l+0x54a>
 800da08:	4264      	negs	r4, r4
 800da0a:	230f      	movs	r3, #15
 800da0c:	0022      	movs	r2, r4
 800da0e:	401a      	ands	r2, r3
 800da10:	421c      	tst	r4, r3
 800da12:	d00a      	beq.n	800da2a <_strtod_l+0x59a>
 800da14:	4b15      	ldr	r3, [pc, #84]	@ (800da6c <_strtod_l+0x5dc>)
 800da16:	00d2      	lsls	r2, r2, #3
 800da18:	189b      	adds	r3, r3, r2
 800da1a:	0030      	movs	r0, r6
 800da1c:	681a      	ldr	r2, [r3, #0]
 800da1e:	685b      	ldr	r3, [r3, #4]
 800da20:	0039      	movs	r1, r7
 800da22:	f7f4 f987 	bl	8001d34 <__aeabi_ddiv>
 800da26:	0006      	movs	r6, r0
 800da28:	000f      	movs	r7, r1
 800da2a:	1124      	asrs	r4, r4, #4
 800da2c:	d0d5      	beq.n	800d9da <_strtod_l+0x54a>
 800da2e:	2c1f      	cmp	r4, #31
 800da30:	dd28      	ble.n	800da84 <_strtod_l+0x5f4>
 800da32:	2300      	movs	r3, #0
 800da34:	9306      	str	r3, [sp, #24]
 800da36:	9307      	str	r3, [sp, #28]
 800da38:	930d      	str	r3, [sp, #52]	@ 0x34
 800da3a:	9308      	str	r3, [sp, #32]
 800da3c:	2322      	movs	r3, #34	@ 0x22
 800da3e:	9a05      	ldr	r2, [sp, #20]
 800da40:	2600      	movs	r6, #0
 800da42:	6013      	str	r3, [r2, #0]
 800da44:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800da46:	2700      	movs	r7, #0
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d000      	beq.n	800da4e <_strtod_l+0x5be>
 800da4c:	e763      	b.n	800d916 <_strtod_l+0x486>
 800da4e:	e55a      	b.n	800d506 <_strtod_l+0x76>
 800da50:	00004e1f 	.word	0x00004e1f
 800da54:	0801177b 	.word	0x0801177b
 800da58:	08011780 	.word	0x08011780
 800da5c:	7ff00000 	.word	0x7ff00000
 800da60:	08011772 	.word	0x08011772
 800da64:	08011775 	.word	0x08011775
 800da68:	08011b26 	.word	0x08011b26
 800da6c:	080119f0 	.word	0x080119f0
 800da70:	080119c8 	.word	0x080119c8
 800da74:	fcb00000 	.word	0xfcb00000
 800da78:	7ca00000 	.word	0x7ca00000
 800da7c:	7c900000 	.word	0x7c900000
 800da80:	7fefffff 	.word	0x7fefffff
 800da84:	2310      	movs	r3, #16
 800da86:	0022      	movs	r2, r4
 800da88:	401a      	ands	r2, r3
 800da8a:	9209      	str	r2, [sp, #36]	@ 0x24
 800da8c:	421c      	tst	r4, r3
 800da8e:	d001      	beq.n	800da94 <_strtod_l+0x604>
 800da90:	335a      	adds	r3, #90	@ 0x5a
 800da92:	9309      	str	r3, [sp, #36]	@ 0x24
 800da94:	0030      	movs	r0, r6
 800da96:	0039      	movs	r1, r7
 800da98:	2300      	movs	r3, #0
 800da9a:	4dbf      	ldr	r5, [pc, #764]	@ (800dd98 <_strtod_l+0x908>)
 800da9c:	2201      	movs	r2, #1
 800da9e:	4214      	tst	r4, r2
 800daa0:	d004      	beq.n	800daac <_strtod_l+0x61c>
 800daa2:	682a      	ldr	r2, [r5, #0]
 800daa4:	686b      	ldr	r3, [r5, #4]
 800daa6:	f7f4 fd89 	bl	80025bc <__aeabi_dmul>
 800daaa:	2301      	movs	r3, #1
 800daac:	1064      	asrs	r4, r4, #1
 800daae:	3508      	adds	r5, #8
 800dab0:	2c00      	cmp	r4, #0
 800dab2:	d1f3      	bne.n	800da9c <_strtod_l+0x60c>
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d001      	beq.n	800dabc <_strtod_l+0x62c>
 800dab8:	0006      	movs	r6, r0
 800daba:	000f      	movs	r7, r1
 800dabc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d00d      	beq.n	800dade <_strtod_l+0x64e>
 800dac2:	236b      	movs	r3, #107	@ 0x6b
 800dac4:	007a      	lsls	r2, r7, #1
 800dac6:	0d52      	lsrs	r2, r2, #21
 800dac8:	0039      	movs	r1, r7
 800daca:	1a9b      	subs	r3, r3, r2
 800dacc:	2b00      	cmp	r3, #0
 800dace:	dd06      	ble.n	800dade <_strtod_l+0x64e>
 800dad0:	2b1f      	cmp	r3, #31
 800dad2:	dd5a      	ble.n	800db8a <_strtod_l+0x6fa>
 800dad4:	2600      	movs	r6, #0
 800dad6:	2b34      	cmp	r3, #52	@ 0x34
 800dad8:	dd50      	ble.n	800db7c <_strtod_l+0x6ec>
 800dada:	27dc      	movs	r7, #220	@ 0xdc
 800dadc:	04bf      	lsls	r7, r7, #18
 800dade:	2200      	movs	r2, #0
 800dae0:	2300      	movs	r3, #0
 800dae2:	0030      	movs	r0, r6
 800dae4:	0039      	movs	r1, r7
 800dae6:	f7f2 fcb9 	bl	800045c <__aeabi_dcmpeq>
 800daea:	2800      	cmp	r0, #0
 800daec:	d1a1      	bne.n	800da32 <_strtod_l+0x5a2>
 800daee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800daf0:	9a08      	ldr	r2, [sp, #32]
 800daf2:	9300      	str	r3, [sp, #0]
 800daf4:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800daf6:	9b06      	ldr	r3, [sp, #24]
 800daf8:	9805      	ldr	r0, [sp, #20]
 800dafa:	f001 faf7 	bl	800f0ec <__s2b>
 800dafe:	900d      	str	r0, [sp, #52]	@ 0x34
 800db00:	2800      	cmp	r0, #0
 800db02:	d100      	bne.n	800db06 <_strtod_l+0x676>
 800db04:	e6f9      	b.n	800d8fa <_strtod_l+0x46a>
 800db06:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800db08:	9907      	ldr	r1, [sp, #28]
 800db0a:	17da      	asrs	r2, r3, #31
 800db0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800db0e:	1a5b      	subs	r3, r3, r1
 800db10:	401a      	ands	r2, r3
 800db12:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800db14:	9217      	str	r2, [sp, #92]	@ 0x5c
 800db16:	43db      	mvns	r3, r3
 800db18:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800db1a:	17db      	asrs	r3, r3, #31
 800db1c:	401a      	ands	r2, r3
 800db1e:	2300      	movs	r3, #0
 800db20:	921a      	str	r2, [sp, #104]	@ 0x68
 800db22:	9306      	str	r3, [sp, #24]
 800db24:	9307      	str	r3, [sp, #28]
 800db26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800db28:	9805      	ldr	r0, [sp, #20]
 800db2a:	6859      	ldr	r1, [r3, #4]
 800db2c:	f001 fa32 	bl	800ef94 <_Balloc>
 800db30:	9008      	str	r0, [sp, #32]
 800db32:	2800      	cmp	r0, #0
 800db34:	d100      	bne.n	800db38 <_strtod_l+0x6a8>
 800db36:	e6e5      	b.n	800d904 <_strtod_l+0x474>
 800db38:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800db3a:	300c      	adds	r0, #12
 800db3c:	0019      	movs	r1, r3
 800db3e:	691a      	ldr	r2, [r3, #16]
 800db40:	310c      	adds	r1, #12
 800db42:	3202      	adds	r2, #2
 800db44:	0092      	lsls	r2, r2, #2
 800db46:	f000 fdae 	bl	800e6a6 <memcpy>
 800db4a:	ab20      	add	r3, sp, #128	@ 0x80
 800db4c:	9301      	str	r3, [sp, #4]
 800db4e:	ab1f      	add	r3, sp, #124	@ 0x7c
 800db50:	9300      	str	r3, [sp, #0]
 800db52:	0032      	movs	r2, r6
 800db54:	003b      	movs	r3, r7
 800db56:	9805      	ldr	r0, [sp, #20]
 800db58:	9610      	str	r6, [sp, #64]	@ 0x40
 800db5a:	9711      	str	r7, [sp, #68]	@ 0x44
 800db5c:	f001 fe16 	bl	800f78c <__d2b>
 800db60:	901e      	str	r0, [sp, #120]	@ 0x78
 800db62:	2800      	cmp	r0, #0
 800db64:	d100      	bne.n	800db68 <_strtod_l+0x6d8>
 800db66:	e6cd      	b.n	800d904 <_strtod_l+0x474>
 800db68:	2101      	movs	r1, #1
 800db6a:	9805      	ldr	r0, [sp, #20]
 800db6c:	f001 fb5a 	bl	800f224 <__i2b>
 800db70:	9007      	str	r0, [sp, #28]
 800db72:	2800      	cmp	r0, #0
 800db74:	d10e      	bne.n	800db94 <_strtod_l+0x704>
 800db76:	2300      	movs	r3, #0
 800db78:	9307      	str	r3, [sp, #28]
 800db7a:	e6c3      	b.n	800d904 <_strtod_l+0x474>
 800db7c:	234b      	movs	r3, #75	@ 0x4b
 800db7e:	1a9a      	subs	r2, r3, r2
 800db80:	3b4c      	subs	r3, #76	@ 0x4c
 800db82:	4093      	lsls	r3, r2
 800db84:	4019      	ands	r1, r3
 800db86:	000f      	movs	r7, r1
 800db88:	e7a9      	b.n	800dade <_strtod_l+0x64e>
 800db8a:	2201      	movs	r2, #1
 800db8c:	4252      	negs	r2, r2
 800db8e:	409a      	lsls	r2, r3
 800db90:	4016      	ands	r6, r2
 800db92:	e7a4      	b.n	800dade <_strtod_l+0x64e>
 800db94:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800db96:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800db98:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 800db9a:	1ad4      	subs	r4, r2, r3
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	db01      	blt.n	800dba4 <_strtod_l+0x714>
 800dba0:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 800dba2:	195d      	adds	r5, r3, r5
 800dba4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dba6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800dba8:	1a5b      	subs	r3, r3, r1
 800dbaa:	2136      	movs	r1, #54	@ 0x36
 800dbac:	189b      	adds	r3, r3, r2
 800dbae:	1a8a      	subs	r2, r1, r2
 800dbb0:	497a      	ldr	r1, [pc, #488]	@ (800dd9c <_strtod_l+0x90c>)
 800dbb2:	2001      	movs	r0, #1
 800dbb4:	468c      	mov	ip, r1
 800dbb6:	2100      	movs	r1, #0
 800dbb8:	3b01      	subs	r3, #1
 800dbba:	9116      	str	r1, [sp, #88]	@ 0x58
 800dbbc:	9014      	str	r0, [sp, #80]	@ 0x50
 800dbbe:	4563      	cmp	r3, ip
 800dbc0:	da06      	bge.n	800dbd0 <_strtod_l+0x740>
 800dbc2:	4661      	mov	r1, ip
 800dbc4:	1ac9      	subs	r1, r1, r3
 800dbc6:	1a52      	subs	r2, r2, r1
 800dbc8:	291f      	cmp	r1, #31
 800dbca:	dc3f      	bgt.n	800dc4c <_strtod_l+0x7bc>
 800dbcc:	4088      	lsls	r0, r1
 800dbce:	9014      	str	r0, [sp, #80]	@ 0x50
 800dbd0:	18ab      	adds	r3, r5, r2
 800dbd2:	930e      	str	r3, [sp, #56]	@ 0x38
 800dbd4:	18a4      	adds	r4, r4, r2
 800dbd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dbd8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dbda:	191c      	adds	r4, r3, r4
 800dbdc:	002b      	movs	r3, r5
 800dbde:	4295      	cmp	r5, r2
 800dbe0:	dd00      	ble.n	800dbe4 <_strtod_l+0x754>
 800dbe2:	0013      	movs	r3, r2
 800dbe4:	42a3      	cmp	r3, r4
 800dbe6:	dd00      	ble.n	800dbea <_strtod_l+0x75a>
 800dbe8:	0023      	movs	r3, r4
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	dd04      	ble.n	800dbf8 <_strtod_l+0x768>
 800dbee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dbf0:	1ae4      	subs	r4, r4, r3
 800dbf2:	1ad2      	subs	r2, r2, r3
 800dbf4:	920e      	str	r2, [sp, #56]	@ 0x38
 800dbf6:	1aed      	subs	r5, r5, r3
 800dbf8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	dd16      	ble.n	800dc2c <_strtod_l+0x79c>
 800dbfe:	001a      	movs	r2, r3
 800dc00:	9907      	ldr	r1, [sp, #28]
 800dc02:	9805      	ldr	r0, [sp, #20]
 800dc04:	f001 fbd8 	bl	800f3b8 <__pow5mult>
 800dc08:	9007      	str	r0, [sp, #28]
 800dc0a:	2800      	cmp	r0, #0
 800dc0c:	d0b3      	beq.n	800db76 <_strtod_l+0x6e6>
 800dc0e:	0001      	movs	r1, r0
 800dc10:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 800dc12:	9805      	ldr	r0, [sp, #20]
 800dc14:	f001 fb1e 	bl	800f254 <__multiply>
 800dc18:	9013      	str	r0, [sp, #76]	@ 0x4c
 800dc1a:	2800      	cmp	r0, #0
 800dc1c:	d100      	bne.n	800dc20 <_strtod_l+0x790>
 800dc1e:	e671      	b.n	800d904 <_strtod_l+0x474>
 800dc20:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800dc22:	9805      	ldr	r0, [sp, #20]
 800dc24:	f001 f9fa 	bl	800f01c <_Bfree>
 800dc28:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800dc2a:	931e      	str	r3, [sp, #120]	@ 0x78
 800dc2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	dc12      	bgt.n	800dc58 <_strtod_l+0x7c8>
 800dc32:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	dd18      	ble.n	800dc6a <_strtod_l+0x7da>
 800dc38:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800dc3a:	9908      	ldr	r1, [sp, #32]
 800dc3c:	9805      	ldr	r0, [sp, #20]
 800dc3e:	f001 fbbb 	bl	800f3b8 <__pow5mult>
 800dc42:	9008      	str	r0, [sp, #32]
 800dc44:	2800      	cmp	r0, #0
 800dc46:	d110      	bne.n	800dc6a <_strtod_l+0x7da>
 800dc48:	2300      	movs	r3, #0
 800dc4a:	e65a      	b.n	800d902 <_strtod_l+0x472>
 800dc4c:	4954      	ldr	r1, [pc, #336]	@ (800dda0 <_strtod_l+0x910>)
 800dc4e:	1acb      	subs	r3, r1, r3
 800dc50:	0001      	movs	r1, r0
 800dc52:	4099      	lsls	r1, r3
 800dc54:	9116      	str	r1, [sp, #88]	@ 0x58
 800dc56:	e7ba      	b.n	800dbce <_strtod_l+0x73e>
 800dc58:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dc5a:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800dc5c:	9805      	ldr	r0, [sp, #20]
 800dc5e:	f001 fc07 	bl	800f470 <__lshift>
 800dc62:	901e      	str	r0, [sp, #120]	@ 0x78
 800dc64:	2800      	cmp	r0, #0
 800dc66:	d1e4      	bne.n	800dc32 <_strtod_l+0x7a2>
 800dc68:	e64c      	b.n	800d904 <_strtod_l+0x474>
 800dc6a:	2c00      	cmp	r4, #0
 800dc6c:	dd07      	ble.n	800dc7e <_strtod_l+0x7ee>
 800dc6e:	0022      	movs	r2, r4
 800dc70:	9908      	ldr	r1, [sp, #32]
 800dc72:	9805      	ldr	r0, [sp, #20]
 800dc74:	f001 fbfc 	bl	800f470 <__lshift>
 800dc78:	9008      	str	r0, [sp, #32]
 800dc7a:	2800      	cmp	r0, #0
 800dc7c:	d0e4      	beq.n	800dc48 <_strtod_l+0x7b8>
 800dc7e:	2d00      	cmp	r5, #0
 800dc80:	dd08      	ble.n	800dc94 <_strtod_l+0x804>
 800dc82:	002a      	movs	r2, r5
 800dc84:	9907      	ldr	r1, [sp, #28]
 800dc86:	9805      	ldr	r0, [sp, #20]
 800dc88:	f001 fbf2 	bl	800f470 <__lshift>
 800dc8c:	9007      	str	r0, [sp, #28]
 800dc8e:	2800      	cmp	r0, #0
 800dc90:	d100      	bne.n	800dc94 <_strtod_l+0x804>
 800dc92:	e637      	b.n	800d904 <_strtod_l+0x474>
 800dc94:	9a08      	ldr	r2, [sp, #32]
 800dc96:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800dc98:	9805      	ldr	r0, [sp, #20]
 800dc9a:	f001 fc71 	bl	800f580 <__mdiff>
 800dc9e:	9006      	str	r0, [sp, #24]
 800dca0:	2800      	cmp	r0, #0
 800dca2:	d100      	bne.n	800dca6 <_strtod_l+0x816>
 800dca4:	e62e      	b.n	800d904 <_strtod_l+0x474>
 800dca6:	68c3      	ldr	r3, [r0, #12]
 800dca8:	9907      	ldr	r1, [sp, #28]
 800dcaa:	9313      	str	r3, [sp, #76]	@ 0x4c
 800dcac:	2300      	movs	r3, #0
 800dcae:	60c3      	str	r3, [r0, #12]
 800dcb0:	f001 fc4a 	bl	800f548 <__mcmp>
 800dcb4:	2800      	cmp	r0, #0
 800dcb6:	da3b      	bge.n	800dd30 <_strtod_l+0x8a0>
 800dcb8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800dcba:	4333      	orrs	r3, r6
 800dcbc:	d167      	bne.n	800dd8e <_strtod_l+0x8fe>
 800dcbe:	033b      	lsls	r3, r7, #12
 800dcc0:	d165      	bne.n	800dd8e <_strtod_l+0x8fe>
 800dcc2:	22d6      	movs	r2, #214	@ 0xd6
 800dcc4:	4b37      	ldr	r3, [pc, #220]	@ (800dda4 <_strtod_l+0x914>)
 800dcc6:	04d2      	lsls	r2, r2, #19
 800dcc8:	403b      	ands	r3, r7
 800dcca:	4293      	cmp	r3, r2
 800dccc:	d95f      	bls.n	800dd8e <_strtod_l+0x8fe>
 800dcce:	9b06      	ldr	r3, [sp, #24]
 800dcd0:	695b      	ldr	r3, [r3, #20]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d103      	bne.n	800dcde <_strtod_l+0x84e>
 800dcd6:	9b06      	ldr	r3, [sp, #24]
 800dcd8:	691b      	ldr	r3, [r3, #16]
 800dcda:	2b01      	cmp	r3, #1
 800dcdc:	dd57      	ble.n	800dd8e <_strtod_l+0x8fe>
 800dcde:	9906      	ldr	r1, [sp, #24]
 800dce0:	2201      	movs	r2, #1
 800dce2:	9805      	ldr	r0, [sp, #20]
 800dce4:	f001 fbc4 	bl	800f470 <__lshift>
 800dce8:	9907      	ldr	r1, [sp, #28]
 800dcea:	9006      	str	r0, [sp, #24]
 800dcec:	f001 fc2c 	bl	800f548 <__mcmp>
 800dcf0:	2800      	cmp	r0, #0
 800dcf2:	dd4c      	ble.n	800dd8e <_strtod_l+0x8fe>
 800dcf4:	4b2b      	ldr	r3, [pc, #172]	@ (800dda4 <_strtod_l+0x914>)
 800dcf6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dcf8:	403b      	ands	r3, r7
 800dcfa:	2a00      	cmp	r2, #0
 800dcfc:	d074      	beq.n	800dde8 <_strtod_l+0x958>
 800dcfe:	22d6      	movs	r2, #214	@ 0xd6
 800dd00:	04d2      	lsls	r2, r2, #19
 800dd02:	4293      	cmp	r3, r2
 800dd04:	d870      	bhi.n	800dde8 <_strtod_l+0x958>
 800dd06:	22dc      	movs	r2, #220	@ 0xdc
 800dd08:	0492      	lsls	r2, r2, #18
 800dd0a:	4293      	cmp	r3, r2
 800dd0c:	d800      	bhi.n	800dd10 <_strtod_l+0x880>
 800dd0e:	e695      	b.n	800da3c <_strtod_l+0x5ac>
 800dd10:	0030      	movs	r0, r6
 800dd12:	0039      	movs	r1, r7
 800dd14:	4b24      	ldr	r3, [pc, #144]	@ (800dda8 <_strtod_l+0x918>)
 800dd16:	2200      	movs	r2, #0
 800dd18:	f7f4 fc50 	bl	80025bc <__aeabi_dmul>
 800dd1c:	4b21      	ldr	r3, [pc, #132]	@ (800dda4 <_strtod_l+0x914>)
 800dd1e:	0006      	movs	r6, r0
 800dd20:	000f      	movs	r7, r1
 800dd22:	420b      	tst	r3, r1
 800dd24:	d000      	beq.n	800dd28 <_strtod_l+0x898>
 800dd26:	e5f6      	b.n	800d916 <_strtod_l+0x486>
 800dd28:	2322      	movs	r3, #34	@ 0x22
 800dd2a:	9a05      	ldr	r2, [sp, #20]
 800dd2c:	6013      	str	r3, [r2, #0]
 800dd2e:	e5f2      	b.n	800d916 <_strtod_l+0x486>
 800dd30:	970e      	str	r7, [sp, #56]	@ 0x38
 800dd32:	2800      	cmp	r0, #0
 800dd34:	d175      	bne.n	800de22 <_strtod_l+0x992>
 800dd36:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800dd38:	033b      	lsls	r3, r7, #12
 800dd3a:	0b1b      	lsrs	r3, r3, #12
 800dd3c:	2a00      	cmp	r2, #0
 800dd3e:	d039      	beq.n	800ddb4 <_strtod_l+0x924>
 800dd40:	4a1a      	ldr	r2, [pc, #104]	@ (800ddac <_strtod_l+0x91c>)
 800dd42:	4293      	cmp	r3, r2
 800dd44:	d138      	bne.n	800ddb8 <_strtod_l+0x928>
 800dd46:	2101      	movs	r1, #1
 800dd48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd4a:	4249      	negs	r1, r1
 800dd4c:	0032      	movs	r2, r6
 800dd4e:	0008      	movs	r0, r1
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d00b      	beq.n	800dd6c <_strtod_l+0x8dc>
 800dd54:	24d4      	movs	r4, #212	@ 0xd4
 800dd56:	4b13      	ldr	r3, [pc, #76]	@ (800dda4 <_strtod_l+0x914>)
 800dd58:	0008      	movs	r0, r1
 800dd5a:	403b      	ands	r3, r7
 800dd5c:	04e4      	lsls	r4, r4, #19
 800dd5e:	42a3      	cmp	r3, r4
 800dd60:	d804      	bhi.n	800dd6c <_strtod_l+0x8dc>
 800dd62:	306c      	adds	r0, #108	@ 0x6c
 800dd64:	0d1b      	lsrs	r3, r3, #20
 800dd66:	1ac3      	subs	r3, r0, r3
 800dd68:	4099      	lsls	r1, r3
 800dd6a:	0008      	movs	r0, r1
 800dd6c:	4282      	cmp	r2, r0
 800dd6e:	d123      	bne.n	800ddb8 <_strtod_l+0x928>
 800dd70:	4b0f      	ldr	r3, [pc, #60]	@ (800ddb0 <_strtod_l+0x920>)
 800dd72:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800dd74:	4299      	cmp	r1, r3
 800dd76:	d102      	bne.n	800dd7e <_strtod_l+0x8ee>
 800dd78:	3201      	adds	r2, #1
 800dd7a:	d100      	bne.n	800dd7e <_strtod_l+0x8ee>
 800dd7c:	e5c2      	b.n	800d904 <_strtod_l+0x474>
 800dd7e:	4b09      	ldr	r3, [pc, #36]	@ (800dda4 <_strtod_l+0x914>)
 800dd80:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dd82:	2600      	movs	r6, #0
 800dd84:	401a      	ands	r2, r3
 800dd86:	0013      	movs	r3, r2
 800dd88:	2280      	movs	r2, #128	@ 0x80
 800dd8a:	0352      	lsls	r2, r2, #13
 800dd8c:	189f      	adds	r7, r3, r2
 800dd8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d1bd      	bne.n	800dd10 <_strtod_l+0x880>
 800dd94:	e5bf      	b.n	800d916 <_strtod_l+0x486>
 800dd96:	46c0      	nop			@ (mov r8, r8)
 800dd98:	080117a8 	.word	0x080117a8
 800dd9c:	fffffc02 	.word	0xfffffc02
 800dda0:	fffffbe2 	.word	0xfffffbe2
 800dda4:	7ff00000 	.word	0x7ff00000
 800dda8:	39500000 	.word	0x39500000
 800ddac:	000fffff 	.word	0x000fffff
 800ddb0:	7fefffff 	.word	0x7fefffff
 800ddb4:	4333      	orrs	r3, r6
 800ddb6:	d09d      	beq.n	800dcf4 <_strtod_l+0x864>
 800ddb8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d01c      	beq.n	800ddf8 <_strtod_l+0x968>
 800ddbe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ddc0:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800ddc2:	4213      	tst	r3, r2
 800ddc4:	d0e3      	beq.n	800dd8e <_strtod_l+0x8fe>
 800ddc6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ddc8:	0030      	movs	r0, r6
 800ddca:	0039      	movs	r1, r7
 800ddcc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d016      	beq.n	800de00 <_strtod_l+0x970>
 800ddd2:	f7ff fb45 	bl	800d460 <sulp>
 800ddd6:	0002      	movs	r2, r0
 800ddd8:	000b      	movs	r3, r1
 800ddda:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800dddc:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800ddde:	f7f3 fc45 	bl	800166c <__aeabi_dadd>
 800dde2:	0006      	movs	r6, r0
 800dde4:	000f      	movs	r7, r1
 800dde6:	e7d2      	b.n	800dd8e <_strtod_l+0x8fe>
 800dde8:	2601      	movs	r6, #1
 800ddea:	4a92      	ldr	r2, [pc, #584]	@ (800e034 <_strtod_l+0xba4>)
 800ddec:	4276      	negs	r6, r6
 800ddee:	189b      	adds	r3, r3, r2
 800ddf0:	4a91      	ldr	r2, [pc, #580]	@ (800e038 <_strtod_l+0xba8>)
 800ddf2:	431a      	orrs	r2, r3
 800ddf4:	0017      	movs	r7, r2
 800ddf6:	e7ca      	b.n	800dd8e <_strtod_l+0x8fe>
 800ddf8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ddfa:	4233      	tst	r3, r6
 800ddfc:	d0c7      	beq.n	800dd8e <_strtod_l+0x8fe>
 800ddfe:	e7e2      	b.n	800ddc6 <_strtod_l+0x936>
 800de00:	f7ff fb2e 	bl	800d460 <sulp>
 800de04:	0002      	movs	r2, r0
 800de06:	000b      	movs	r3, r1
 800de08:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800de0a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800de0c:	f7f4 fe9e 	bl	8002b4c <__aeabi_dsub>
 800de10:	2200      	movs	r2, #0
 800de12:	2300      	movs	r3, #0
 800de14:	0006      	movs	r6, r0
 800de16:	000f      	movs	r7, r1
 800de18:	f7f2 fb20 	bl	800045c <__aeabi_dcmpeq>
 800de1c:	2800      	cmp	r0, #0
 800de1e:	d0b6      	beq.n	800dd8e <_strtod_l+0x8fe>
 800de20:	e60c      	b.n	800da3c <_strtod_l+0x5ac>
 800de22:	9907      	ldr	r1, [sp, #28]
 800de24:	9806      	ldr	r0, [sp, #24]
 800de26:	f001 fd11 	bl	800f84c <__ratio>
 800de2a:	2380      	movs	r3, #128	@ 0x80
 800de2c:	2200      	movs	r2, #0
 800de2e:	05db      	lsls	r3, r3, #23
 800de30:	0004      	movs	r4, r0
 800de32:	000d      	movs	r5, r1
 800de34:	f7f2 fb22 	bl	800047c <__aeabi_dcmple>
 800de38:	2800      	cmp	r0, #0
 800de3a:	d06c      	beq.n	800df16 <_strtod_l+0xa86>
 800de3c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d177      	bne.n	800df32 <_strtod_l+0xaa2>
 800de42:	2e00      	cmp	r6, #0
 800de44:	d157      	bne.n	800def6 <_strtod_l+0xa66>
 800de46:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800de48:	031b      	lsls	r3, r3, #12
 800de4a:	d15a      	bne.n	800df02 <_strtod_l+0xa72>
 800de4c:	2200      	movs	r2, #0
 800de4e:	0020      	movs	r0, r4
 800de50:	0029      	movs	r1, r5
 800de52:	4b7a      	ldr	r3, [pc, #488]	@ (800e03c <_strtod_l+0xbac>)
 800de54:	f7f2 fb08 	bl	8000468 <__aeabi_dcmplt>
 800de58:	2800      	cmp	r0, #0
 800de5a:	d159      	bne.n	800df10 <_strtod_l+0xa80>
 800de5c:	0020      	movs	r0, r4
 800de5e:	0029      	movs	r1, r5
 800de60:	2200      	movs	r2, #0
 800de62:	4b77      	ldr	r3, [pc, #476]	@ (800e040 <_strtod_l+0xbb0>)
 800de64:	f7f4 fbaa 	bl	80025bc <__aeabi_dmul>
 800de68:	0004      	movs	r4, r0
 800de6a:	000d      	movs	r5, r1
 800de6c:	2380      	movs	r3, #128	@ 0x80
 800de6e:	061b      	lsls	r3, r3, #24
 800de70:	18eb      	adds	r3, r5, r3
 800de72:	940a      	str	r4, [sp, #40]	@ 0x28
 800de74:	930b      	str	r3, [sp, #44]	@ 0x2c
 800de76:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800de78:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800de7a:	9214      	str	r2, [sp, #80]	@ 0x50
 800de7c:	9315      	str	r3, [sp, #84]	@ 0x54
 800de7e:	4a71      	ldr	r2, [pc, #452]	@ (800e044 <_strtod_l+0xbb4>)
 800de80:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800de82:	4013      	ands	r3, r2
 800de84:	9316      	str	r3, [sp, #88]	@ 0x58
 800de86:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800de88:	4b6f      	ldr	r3, [pc, #444]	@ (800e048 <_strtod_l+0xbb8>)
 800de8a:	429a      	cmp	r2, r3
 800de8c:	d000      	beq.n	800de90 <_strtod_l+0xa00>
 800de8e:	e087      	b.n	800dfa0 <_strtod_l+0xb10>
 800de90:	4a6e      	ldr	r2, [pc, #440]	@ (800e04c <_strtod_l+0xbbc>)
 800de92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800de94:	4694      	mov	ip, r2
 800de96:	4463      	add	r3, ip
 800de98:	001f      	movs	r7, r3
 800de9a:	0030      	movs	r0, r6
 800de9c:	0019      	movs	r1, r3
 800de9e:	f001 fc09 	bl	800f6b4 <__ulp>
 800dea2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800dea4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dea6:	f7f4 fb89 	bl	80025bc <__aeabi_dmul>
 800deaa:	0032      	movs	r2, r6
 800deac:	003b      	movs	r3, r7
 800deae:	f7f3 fbdd 	bl	800166c <__aeabi_dadd>
 800deb2:	4a64      	ldr	r2, [pc, #400]	@ (800e044 <_strtod_l+0xbb4>)
 800deb4:	4b66      	ldr	r3, [pc, #408]	@ (800e050 <_strtod_l+0xbc0>)
 800deb6:	0006      	movs	r6, r0
 800deb8:	400a      	ands	r2, r1
 800deba:	429a      	cmp	r2, r3
 800debc:	d940      	bls.n	800df40 <_strtod_l+0xab0>
 800debe:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800dec0:	4a64      	ldr	r2, [pc, #400]	@ (800e054 <_strtod_l+0xbc4>)
 800dec2:	4293      	cmp	r3, r2
 800dec4:	d103      	bne.n	800dece <_strtod_l+0xa3e>
 800dec6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800dec8:	3301      	adds	r3, #1
 800deca:	d100      	bne.n	800dece <_strtod_l+0xa3e>
 800decc:	e51a      	b.n	800d904 <_strtod_l+0x474>
 800dece:	2601      	movs	r6, #1
 800ded0:	4f60      	ldr	r7, [pc, #384]	@ (800e054 <_strtod_l+0xbc4>)
 800ded2:	4276      	negs	r6, r6
 800ded4:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800ded6:	9805      	ldr	r0, [sp, #20]
 800ded8:	f001 f8a0 	bl	800f01c <_Bfree>
 800dedc:	9908      	ldr	r1, [sp, #32]
 800dede:	9805      	ldr	r0, [sp, #20]
 800dee0:	f001 f89c 	bl	800f01c <_Bfree>
 800dee4:	9907      	ldr	r1, [sp, #28]
 800dee6:	9805      	ldr	r0, [sp, #20]
 800dee8:	f001 f898 	bl	800f01c <_Bfree>
 800deec:	9906      	ldr	r1, [sp, #24]
 800deee:	9805      	ldr	r0, [sp, #20]
 800def0:	f001 f894 	bl	800f01c <_Bfree>
 800def4:	e617      	b.n	800db26 <_strtod_l+0x696>
 800def6:	2e01      	cmp	r6, #1
 800def8:	d103      	bne.n	800df02 <_strtod_l+0xa72>
 800defa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800defc:	2b00      	cmp	r3, #0
 800defe:	d100      	bne.n	800df02 <_strtod_l+0xa72>
 800df00:	e59c      	b.n	800da3c <_strtod_l+0x5ac>
 800df02:	2300      	movs	r3, #0
 800df04:	4c54      	ldr	r4, [pc, #336]	@ (800e058 <_strtod_l+0xbc8>)
 800df06:	4d4d      	ldr	r5, [pc, #308]	@ (800e03c <_strtod_l+0xbac>)
 800df08:	930a      	str	r3, [sp, #40]	@ 0x28
 800df0a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800df0c:	2400      	movs	r4, #0
 800df0e:	e7b2      	b.n	800de76 <_strtod_l+0x9e6>
 800df10:	2400      	movs	r4, #0
 800df12:	4d4b      	ldr	r5, [pc, #300]	@ (800e040 <_strtod_l+0xbb0>)
 800df14:	e7aa      	b.n	800de6c <_strtod_l+0x9dc>
 800df16:	0020      	movs	r0, r4
 800df18:	0029      	movs	r1, r5
 800df1a:	4b49      	ldr	r3, [pc, #292]	@ (800e040 <_strtod_l+0xbb0>)
 800df1c:	2200      	movs	r2, #0
 800df1e:	f7f4 fb4d 	bl	80025bc <__aeabi_dmul>
 800df22:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800df24:	0004      	movs	r4, r0
 800df26:	000d      	movs	r5, r1
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d09f      	beq.n	800de6c <_strtod_l+0x9dc>
 800df2c:	940a      	str	r4, [sp, #40]	@ 0x28
 800df2e:	950b      	str	r5, [sp, #44]	@ 0x2c
 800df30:	e7a1      	b.n	800de76 <_strtod_l+0x9e6>
 800df32:	2300      	movs	r3, #0
 800df34:	4c41      	ldr	r4, [pc, #260]	@ (800e03c <_strtod_l+0xbac>)
 800df36:	0025      	movs	r5, r4
 800df38:	930a      	str	r3, [sp, #40]	@ 0x28
 800df3a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800df3c:	001c      	movs	r4, r3
 800df3e:	e79a      	b.n	800de76 <_strtod_l+0x9e6>
 800df40:	23d4      	movs	r3, #212	@ 0xd4
 800df42:	049b      	lsls	r3, r3, #18
 800df44:	18cf      	adds	r7, r1, r3
 800df46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df48:	9710      	str	r7, [sp, #64]	@ 0x40
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d1c2      	bne.n	800ded4 <_strtod_l+0xa44>
 800df4e:	4b3d      	ldr	r3, [pc, #244]	@ (800e044 <_strtod_l+0xbb4>)
 800df50:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800df52:	403b      	ands	r3, r7
 800df54:	429a      	cmp	r2, r3
 800df56:	d1bd      	bne.n	800ded4 <_strtod_l+0xa44>
 800df58:	0020      	movs	r0, r4
 800df5a:	0029      	movs	r1, r5
 800df5c:	f7f2 fb6a 	bl	8000634 <__aeabi_d2lz>
 800df60:	f7f2 fba2 	bl	80006a8 <__aeabi_l2d>
 800df64:	0002      	movs	r2, r0
 800df66:	000b      	movs	r3, r1
 800df68:	0020      	movs	r0, r4
 800df6a:	0029      	movs	r1, r5
 800df6c:	f7f4 fdee 	bl	8002b4c <__aeabi_dsub>
 800df70:	033c      	lsls	r4, r7, #12
 800df72:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800df74:	0b24      	lsrs	r4, r4, #12
 800df76:	4334      	orrs	r4, r6
 800df78:	900e      	str	r0, [sp, #56]	@ 0x38
 800df7a:	910f      	str	r1, [sp, #60]	@ 0x3c
 800df7c:	4a37      	ldr	r2, [pc, #220]	@ (800e05c <_strtod_l+0xbcc>)
 800df7e:	431c      	orrs	r4, r3
 800df80:	d052      	beq.n	800e028 <_strtod_l+0xb98>
 800df82:	4b37      	ldr	r3, [pc, #220]	@ (800e060 <_strtod_l+0xbd0>)
 800df84:	f7f2 fa70 	bl	8000468 <__aeabi_dcmplt>
 800df88:	2800      	cmp	r0, #0
 800df8a:	d000      	beq.n	800df8e <_strtod_l+0xafe>
 800df8c:	e4c3      	b.n	800d916 <_strtod_l+0x486>
 800df8e:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800df90:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800df92:	4a34      	ldr	r2, [pc, #208]	@ (800e064 <_strtod_l+0xbd4>)
 800df94:	4b2a      	ldr	r3, [pc, #168]	@ (800e040 <_strtod_l+0xbb0>)
 800df96:	f7f2 fa7b 	bl	8000490 <__aeabi_dcmpgt>
 800df9a:	2800      	cmp	r0, #0
 800df9c:	d09a      	beq.n	800ded4 <_strtod_l+0xa44>
 800df9e:	e4ba      	b.n	800d916 <_strtod_l+0x486>
 800dfa0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d02a      	beq.n	800dffc <_strtod_l+0xb6c>
 800dfa6:	23d4      	movs	r3, #212	@ 0xd4
 800dfa8:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800dfaa:	04db      	lsls	r3, r3, #19
 800dfac:	429a      	cmp	r2, r3
 800dfae:	d825      	bhi.n	800dffc <_strtod_l+0xb6c>
 800dfb0:	0020      	movs	r0, r4
 800dfb2:	0029      	movs	r1, r5
 800dfb4:	4a2c      	ldr	r2, [pc, #176]	@ (800e068 <_strtod_l+0xbd8>)
 800dfb6:	4b2d      	ldr	r3, [pc, #180]	@ (800e06c <_strtod_l+0xbdc>)
 800dfb8:	f7f2 fa60 	bl	800047c <__aeabi_dcmple>
 800dfbc:	2800      	cmp	r0, #0
 800dfbe:	d016      	beq.n	800dfee <_strtod_l+0xb5e>
 800dfc0:	0020      	movs	r0, r4
 800dfc2:	0029      	movs	r1, r5
 800dfc4:	f7f2 fb18 	bl	80005f8 <__aeabi_d2uiz>
 800dfc8:	2800      	cmp	r0, #0
 800dfca:	d100      	bne.n	800dfce <_strtod_l+0xb3e>
 800dfcc:	3001      	adds	r0, #1
 800dfce:	f7f5 f9e5 	bl	800339c <__aeabi_ui2d>
 800dfd2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800dfd4:	0004      	movs	r4, r0
 800dfd6:	000d      	movs	r5, r1
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d122      	bne.n	800e022 <_strtod_l+0xb92>
 800dfdc:	2380      	movs	r3, #128	@ 0x80
 800dfde:	061b      	lsls	r3, r3, #24
 800dfe0:	18cb      	adds	r3, r1, r3
 800dfe2:	9018      	str	r0, [sp, #96]	@ 0x60
 800dfe4:	9319      	str	r3, [sp, #100]	@ 0x64
 800dfe6:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800dfe8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dfea:	9214      	str	r2, [sp, #80]	@ 0x50
 800dfec:	9315      	str	r3, [sp, #84]	@ 0x54
 800dfee:	22d6      	movs	r2, #214	@ 0xd6
 800dff0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800dff2:	04d2      	lsls	r2, r2, #19
 800dff4:	189b      	adds	r3, r3, r2
 800dff6:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800dff8:	1a9b      	subs	r3, r3, r2
 800dffa:	9315      	str	r3, [sp, #84]	@ 0x54
 800dffc:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800dffe:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800e000:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800e002:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800e004:	f001 fb56 	bl	800f6b4 <__ulp>
 800e008:	0002      	movs	r2, r0
 800e00a:	000b      	movs	r3, r1
 800e00c:	0030      	movs	r0, r6
 800e00e:	0039      	movs	r1, r7
 800e010:	f7f4 fad4 	bl	80025bc <__aeabi_dmul>
 800e014:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800e016:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e018:	f7f3 fb28 	bl	800166c <__aeabi_dadd>
 800e01c:	0006      	movs	r6, r0
 800e01e:	000f      	movs	r7, r1
 800e020:	e791      	b.n	800df46 <_strtod_l+0xab6>
 800e022:	9418      	str	r4, [sp, #96]	@ 0x60
 800e024:	9519      	str	r5, [sp, #100]	@ 0x64
 800e026:	e7de      	b.n	800dfe6 <_strtod_l+0xb56>
 800e028:	4b11      	ldr	r3, [pc, #68]	@ (800e070 <_strtod_l+0xbe0>)
 800e02a:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800e02c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800e02e:	f7f2 fa1b 	bl	8000468 <__aeabi_dcmplt>
 800e032:	e7b2      	b.n	800df9a <_strtod_l+0xb0a>
 800e034:	fff00000 	.word	0xfff00000
 800e038:	000fffff 	.word	0x000fffff
 800e03c:	3ff00000 	.word	0x3ff00000
 800e040:	3fe00000 	.word	0x3fe00000
 800e044:	7ff00000 	.word	0x7ff00000
 800e048:	7fe00000 	.word	0x7fe00000
 800e04c:	fcb00000 	.word	0xfcb00000
 800e050:	7c9fffff 	.word	0x7c9fffff
 800e054:	7fefffff 	.word	0x7fefffff
 800e058:	bff00000 	.word	0xbff00000
 800e05c:	94a03595 	.word	0x94a03595
 800e060:	3fdfffff 	.word	0x3fdfffff
 800e064:	35afe535 	.word	0x35afe535
 800e068:	ffc00000 	.word	0xffc00000
 800e06c:	41dfffff 	.word	0x41dfffff
 800e070:	3fcfffff 	.word	0x3fcfffff

0800e074 <strtod>:
 800e074:	b510      	push	{r4, lr}
 800e076:	4c04      	ldr	r4, [pc, #16]	@ (800e088 <strtod+0x14>)
 800e078:	000a      	movs	r2, r1
 800e07a:	0001      	movs	r1, r0
 800e07c:	4b03      	ldr	r3, [pc, #12]	@ (800e08c <strtod+0x18>)
 800e07e:	6820      	ldr	r0, [r4, #0]
 800e080:	f7ff fa06 	bl	800d490 <_strtod_l>
 800e084:	bd10      	pop	{r4, pc}
 800e086:	46c0      	nop			@ (mov r8, r8)
 800e088:	20000b4c 	.word	0x20000b4c
 800e08c:	200009e0 	.word	0x200009e0

0800e090 <_strtol_l.constprop.0>:
 800e090:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e092:	b085      	sub	sp, #20
 800e094:	0017      	movs	r7, r2
 800e096:	001e      	movs	r6, r3
 800e098:	9003      	str	r0, [sp, #12]
 800e09a:	9101      	str	r1, [sp, #4]
 800e09c:	2b24      	cmp	r3, #36	@ 0x24
 800e09e:	d844      	bhi.n	800e12a <_strtol_l.constprop.0+0x9a>
 800e0a0:	000c      	movs	r4, r1
 800e0a2:	2b01      	cmp	r3, #1
 800e0a4:	d041      	beq.n	800e12a <_strtol_l.constprop.0+0x9a>
 800e0a6:	4b3d      	ldr	r3, [pc, #244]	@ (800e19c <_strtol_l.constprop.0+0x10c>)
 800e0a8:	2208      	movs	r2, #8
 800e0aa:	469c      	mov	ip, r3
 800e0ac:	0023      	movs	r3, r4
 800e0ae:	4661      	mov	r1, ip
 800e0b0:	781d      	ldrb	r5, [r3, #0]
 800e0b2:	3401      	adds	r4, #1
 800e0b4:	5d48      	ldrb	r0, [r1, r5]
 800e0b6:	0001      	movs	r1, r0
 800e0b8:	4011      	ands	r1, r2
 800e0ba:	4210      	tst	r0, r2
 800e0bc:	d1f6      	bne.n	800e0ac <_strtol_l.constprop.0+0x1c>
 800e0be:	2d2d      	cmp	r5, #45	@ 0x2d
 800e0c0:	d13a      	bne.n	800e138 <_strtol_l.constprop.0+0xa8>
 800e0c2:	7825      	ldrb	r5, [r4, #0]
 800e0c4:	1c9c      	adds	r4, r3, #2
 800e0c6:	2301      	movs	r3, #1
 800e0c8:	9300      	str	r3, [sp, #0]
 800e0ca:	2210      	movs	r2, #16
 800e0cc:	0033      	movs	r3, r6
 800e0ce:	4393      	bics	r3, r2
 800e0d0:	d109      	bne.n	800e0e6 <_strtol_l.constprop.0+0x56>
 800e0d2:	2d30      	cmp	r5, #48	@ 0x30
 800e0d4:	d136      	bne.n	800e144 <_strtol_l.constprop.0+0xb4>
 800e0d6:	2120      	movs	r1, #32
 800e0d8:	7823      	ldrb	r3, [r4, #0]
 800e0da:	438b      	bics	r3, r1
 800e0dc:	2b58      	cmp	r3, #88	@ 0x58
 800e0de:	d131      	bne.n	800e144 <_strtol_l.constprop.0+0xb4>
 800e0e0:	0016      	movs	r6, r2
 800e0e2:	7865      	ldrb	r5, [r4, #1]
 800e0e4:	3402      	adds	r4, #2
 800e0e6:	4a2e      	ldr	r2, [pc, #184]	@ (800e1a0 <_strtol_l.constprop.0+0x110>)
 800e0e8:	9b00      	ldr	r3, [sp, #0]
 800e0ea:	4694      	mov	ip, r2
 800e0ec:	4463      	add	r3, ip
 800e0ee:	0031      	movs	r1, r6
 800e0f0:	0018      	movs	r0, r3
 800e0f2:	9302      	str	r3, [sp, #8]
 800e0f4:	f7f2 f8b2 	bl	800025c <__aeabi_uidivmod>
 800e0f8:	2200      	movs	r2, #0
 800e0fa:	4684      	mov	ip, r0
 800e0fc:	0010      	movs	r0, r2
 800e0fe:	002b      	movs	r3, r5
 800e100:	3b30      	subs	r3, #48	@ 0x30
 800e102:	2b09      	cmp	r3, #9
 800e104:	d825      	bhi.n	800e152 <_strtol_l.constprop.0+0xc2>
 800e106:	001d      	movs	r5, r3
 800e108:	42ae      	cmp	r6, r5
 800e10a:	dd31      	ble.n	800e170 <_strtol_l.constprop.0+0xe0>
 800e10c:	1c53      	adds	r3, r2, #1
 800e10e:	d009      	beq.n	800e124 <_strtol_l.constprop.0+0x94>
 800e110:	2201      	movs	r2, #1
 800e112:	4252      	negs	r2, r2
 800e114:	4584      	cmp	ip, r0
 800e116:	d305      	bcc.n	800e124 <_strtol_l.constprop.0+0x94>
 800e118:	d101      	bne.n	800e11e <_strtol_l.constprop.0+0x8e>
 800e11a:	42a9      	cmp	r1, r5
 800e11c:	db25      	blt.n	800e16a <_strtol_l.constprop.0+0xda>
 800e11e:	2201      	movs	r2, #1
 800e120:	4370      	muls	r0, r6
 800e122:	1828      	adds	r0, r5, r0
 800e124:	7825      	ldrb	r5, [r4, #0]
 800e126:	3401      	adds	r4, #1
 800e128:	e7e9      	b.n	800e0fe <_strtol_l.constprop.0+0x6e>
 800e12a:	f000 fa8f 	bl	800e64c <__errno>
 800e12e:	2316      	movs	r3, #22
 800e130:	6003      	str	r3, [r0, #0]
 800e132:	2000      	movs	r0, #0
 800e134:	b005      	add	sp, #20
 800e136:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e138:	9100      	str	r1, [sp, #0]
 800e13a:	2d2b      	cmp	r5, #43	@ 0x2b
 800e13c:	d1c5      	bne.n	800e0ca <_strtol_l.constprop.0+0x3a>
 800e13e:	7825      	ldrb	r5, [r4, #0]
 800e140:	1c9c      	adds	r4, r3, #2
 800e142:	e7c2      	b.n	800e0ca <_strtol_l.constprop.0+0x3a>
 800e144:	2e00      	cmp	r6, #0
 800e146:	d1ce      	bne.n	800e0e6 <_strtol_l.constprop.0+0x56>
 800e148:	3608      	adds	r6, #8
 800e14a:	2d30      	cmp	r5, #48	@ 0x30
 800e14c:	d0cb      	beq.n	800e0e6 <_strtol_l.constprop.0+0x56>
 800e14e:	3602      	adds	r6, #2
 800e150:	e7c9      	b.n	800e0e6 <_strtol_l.constprop.0+0x56>
 800e152:	002b      	movs	r3, r5
 800e154:	3b41      	subs	r3, #65	@ 0x41
 800e156:	2b19      	cmp	r3, #25
 800e158:	d801      	bhi.n	800e15e <_strtol_l.constprop.0+0xce>
 800e15a:	3d37      	subs	r5, #55	@ 0x37
 800e15c:	e7d4      	b.n	800e108 <_strtol_l.constprop.0+0x78>
 800e15e:	002b      	movs	r3, r5
 800e160:	3b61      	subs	r3, #97	@ 0x61
 800e162:	2b19      	cmp	r3, #25
 800e164:	d804      	bhi.n	800e170 <_strtol_l.constprop.0+0xe0>
 800e166:	3d57      	subs	r5, #87	@ 0x57
 800e168:	e7ce      	b.n	800e108 <_strtol_l.constprop.0+0x78>
 800e16a:	2201      	movs	r2, #1
 800e16c:	4252      	negs	r2, r2
 800e16e:	e7d9      	b.n	800e124 <_strtol_l.constprop.0+0x94>
 800e170:	1c53      	adds	r3, r2, #1
 800e172:	d108      	bne.n	800e186 <_strtol_l.constprop.0+0xf6>
 800e174:	2322      	movs	r3, #34	@ 0x22
 800e176:	9a03      	ldr	r2, [sp, #12]
 800e178:	9802      	ldr	r0, [sp, #8]
 800e17a:	6013      	str	r3, [r2, #0]
 800e17c:	2f00      	cmp	r7, #0
 800e17e:	d0d9      	beq.n	800e134 <_strtol_l.constprop.0+0xa4>
 800e180:	1e63      	subs	r3, r4, #1
 800e182:	9301      	str	r3, [sp, #4]
 800e184:	e007      	b.n	800e196 <_strtol_l.constprop.0+0x106>
 800e186:	9b00      	ldr	r3, [sp, #0]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d000      	beq.n	800e18e <_strtol_l.constprop.0+0xfe>
 800e18c:	4240      	negs	r0, r0
 800e18e:	2f00      	cmp	r7, #0
 800e190:	d0d0      	beq.n	800e134 <_strtol_l.constprop.0+0xa4>
 800e192:	2a00      	cmp	r2, #0
 800e194:	d1f4      	bne.n	800e180 <_strtol_l.constprop.0+0xf0>
 800e196:	9b01      	ldr	r3, [sp, #4]
 800e198:	603b      	str	r3, [r7, #0]
 800e19a:	e7cb      	b.n	800e134 <_strtol_l.constprop.0+0xa4>
 800e19c:	080117d1 	.word	0x080117d1
 800e1a0:	7fffffff 	.word	0x7fffffff

0800e1a4 <strtol>:
 800e1a4:	b510      	push	{r4, lr}
 800e1a6:	4c04      	ldr	r4, [pc, #16]	@ (800e1b8 <strtol+0x14>)
 800e1a8:	0013      	movs	r3, r2
 800e1aa:	000a      	movs	r2, r1
 800e1ac:	0001      	movs	r1, r0
 800e1ae:	6820      	ldr	r0, [r4, #0]
 800e1b0:	f7ff ff6e 	bl	800e090 <_strtol_l.constprop.0>
 800e1b4:	bd10      	pop	{r4, pc}
 800e1b6:	46c0      	nop			@ (mov r8, r8)
 800e1b8:	20000b4c 	.word	0x20000b4c

0800e1bc <_strtoll_l.constprop.0>:
 800e1bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e1be:	b08d      	sub	sp, #52	@ 0x34
 800e1c0:	000c      	movs	r4, r1
 800e1c2:	9102      	str	r1, [sp, #8]
 800e1c4:	001e      	movs	r6, r3
 800e1c6:	2108      	movs	r1, #8
 800e1c8:	4f4c      	ldr	r7, [pc, #304]	@ (800e2fc <_strtoll_l.constprop.0+0x140>)
 800e1ca:	900a      	str	r0, [sp, #40]	@ 0x28
 800e1cc:	9203      	str	r2, [sp, #12]
 800e1ce:	0023      	movs	r3, r4
 800e1d0:	781a      	ldrb	r2, [r3, #0]
 800e1d2:	3401      	adds	r4, #1
 800e1d4:	5cbd      	ldrb	r5, [r7, r2]
 800e1d6:	0028      	movs	r0, r5
 800e1d8:	4008      	ands	r0, r1
 800e1da:	420d      	tst	r5, r1
 800e1dc:	d1f7      	bne.n	800e1ce <_strtoll_l.constprop.0+0x12>
 800e1de:	0015      	movs	r5, r2
 800e1e0:	2a2d      	cmp	r2, #45	@ 0x2d
 800e1e2:	d14f      	bne.n	800e284 <_strtoll_l.constprop.0+0xc8>
 800e1e4:	7825      	ldrb	r5, [r4, #0]
 800e1e6:	1c9c      	adds	r4, r3, #2
 800e1e8:	2301      	movs	r3, #1
 800e1ea:	9301      	str	r3, [sp, #4]
 800e1ec:	2210      	movs	r2, #16
 800e1ee:	0033      	movs	r3, r6
 800e1f0:	4393      	bics	r3, r2
 800e1f2:	d109      	bne.n	800e208 <_strtoll_l.constprop.0+0x4c>
 800e1f4:	2d30      	cmp	r5, #48	@ 0x30
 800e1f6:	d14b      	bne.n	800e290 <_strtoll_l.constprop.0+0xd4>
 800e1f8:	2120      	movs	r1, #32
 800e1fa:	7823      	ldrb	r3, [r4, #0]
 800e1fc:	438b      	bics	r3, r1
 800e1fe:	2b58      	cmp	r3, #88	@ 0x58
 800e200:	d146      	bne.n	800e290 <_strtoll_l.constprop.0+0xd4>
 800e202:	0016      	movs	r6, r2
 800e204:	7865      	ldrb	r5, [r4, #1]
 800e206:	3402      	adds	r4, #2
 800e208:	2001      	movs	r0, #1
 800e20a:	2300      	movs	r3, #0
 800e20c:	493c      	ldr	r1, [pc, #240]	@ (800e300 <_strtoll_l.constprop.0+0x144>)
 800e20e:	9a01      	ldr	r2, [sp, #4]
 800e210:	4240      	negs	r0, r0
 800e212:	1812      	adds	r2, r2, r0
 800e214:	414b      	adcs	r3, r1
 800e216:	9204      	str	r2, [sp, #16]
 800e218:	9305      	str	r3, [sp, #20]
 800e21a:	9804      	ldr	r0, [sp, #16]
 800e21c:	9905      	ldr	r1, [sp, #20]
 800e21e:	17f3      	asrs	r3, r6, #31
 800e220:	0032      	movs	r2, r6
 800e222:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e224:	f7f2 f982 	bl	800052c <__aeabi_uldivmod>
 800e228:	2300      	movs	r3, #0
 800e22a:	000f      	movs	r7, r1
 800e22c:	9008      	str	r0, [sp, #32]
 800e22e:	2100      	movs	r1, #0
 800e230:	2000      	movs	r0, #0
 800e232:	9209      	str	r2, [sp, #36]	@ 0x24
 800e234:	002a      	movs	r2, r5
 800e236:	3a30      	subs	r2, #48	@ 0x30
 800e238:	2a09      	cmp	r2, #9
 800e23a:	d830      	bhi.n	800e29e <_strtoll_l.constprop.0+0xe2>
 800e23c:	0015      	movs	r5, r2
 800e23e:	42ae      	cmp	r6, r5
 800e240:	dd3c      	ble.n	800e2bc <_strtoll_l.constprop.0+0x100>
 800e242:	1c5a      	adds	r2, r3, #1
 800e244:	d01b      	beq.n	800e27e <_strtoll_l.constprop.0+0xc2>
 800e246:	42b9      	cmp	r1, r7
 800e248:	d835      	bhi.n	800e2b6 <_strtoll_l.constprop.0+0xfa>
 800e24a:	d102      	bne.n	800e252 <_strtoll_l.constprop.0+0x96>
 800e24c:	9b08      	ldr	r3, [sp, #32]
 800e24e:	4298      	cmp	r0, r3
 800e250:	d831      	bhi.n	800e2b6 <_strtoll_l.constprop.0+0xfa>
 800e252:	9b08      	ldr	r3, [sp, #32]
 800e254:	4283      	cmp	r3, r0
 800e256:	d104      	bne.n	800e262 <_strtoll_l.constprop.0+0xa6>
 800e258:	428f      	cmp	r7, r1
 800e25a:	d102      	bne.n	800e262 <_strtoll_l.constprop.0+0xa6>
 800e25c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e25e:	42ab      	cmp	r3, r5
 800e260:	db29      	blt.n	800e2b6 <_strtoll_l.constprop.0+0xfa>
 800e262:	0002      	movs	r2, r0
 800e264:	000b      	movs	r3, r1
 800e266:	0030      	movs	r0, r6
 800e268:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e26a:	f7f2 f97f 	bl	800056c <__aeabi_lmul>
 800e26e:	17eb      	asrs	r3, r5, #31
 800e270:	9506      	str	r5, [sp, #24]
 800e272:	9307      	str	r3, [sp, #28]
 800e274:	9a06      	ldr	r2, [sp, #24]
 800e276:	9b07      	ldr	r3, [sp, #28]
 800e278:	1880      	adds	r0, r0, r2
 800e27a:	4159      	adcs	r1, r3
 800e27c:	2301      	movs	r3, #1
 800e27e:	7825      	ldrb	r5, [r4, #0]
 800e280:	3401      	adds	r4, #1
 800e282:	e7d7      	b.n	800e234 <_strtoll_l.constprop.0+0x78>
 800e284:	9001      	str	r0, [sp, #4]
 800e286:	2a2b      	cmp	r2, #43	@ 0x2b
 800e288:	d1b0      	bne.n	800e1ec <_strtoll_l.constprop.0+0x30>
 800e28a:	7825      	ldrb	r5, [r4, #0]
 800e28c:	1c9c      	adds	r4, r3, #2
 800e28e:	e7ad      	b.n	800e1ec <_strtoll_l.constprop.0+0x30>
 800e290:	2e00      	cmp	r6, #0
 800e292:	d1b9      	bne.n	800e208 <_strtoll_l.constprop.0+0x4c>
 800e294:	3608      	adds	r6, #8
 800e296:	2d30      	cmp	r5, #48	@ 0x30
 800e298:	d0b6      	beq.n	800e208 <_strtoll_l.constprop.0+0x4c>
 800e29a:	3602      	adds	r6, #2
 800e29c:	e7b4      	b.n	800e208 <_strtoll_l.constprop.0+0x4c>
 800e29e:	002a      	movs	r2, r5
 800e2a0:	3a41      	subs	r2, #65	@ 0x41
 800e2a2:	2a19      	cmp	r2, #25
 800e2a4:	d801      	bhi.n	800e2aa <_strtoll_l.constprop.0+0xee>
 800e2a6:	3d37      	subs	r5, #55	@ 0x37
 800e2a8:	e7c9      	b.n	800e23e <_strtoll_l.constprop.0+0x82>
 800e2aa:	002a      	movs	r2, r5
 800e2ac:	3a61      	subs	r2, #97	@ 0x61
 800e2ae:	2a19      	cmp	r2, #25
 800e2b0:	d804      	bhi.n	800e2bc <_strtoll_l.constprop.0+0x100>
 800e2b2:	3d57      	subs	r5, #87	@ 0x57
 800e2b4:	e7c3      	b.n	800e23e <_strtoll_l.constprop.0+0x82>
 800e2b6:	2301      	movs	r3, #1
 800e2b8:	425b      	negs	r3, r3
 800e2ba:	e7e0      	b.n	800e27e <_strtoll_l.constprop.0+0xc2>
 800e2bc:	1c5a      	adds	r2, r3, #1
 800e2be:	d109      	bne.n	800e2d4 <_strtoll_l.constprop.0+0x118>
 800e2c0:	9804      	ldr	r0, [sp, #16]
 800e2c2:	9905      	ldr	r1, [sp, #20]
 800e2c4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e2c6:	3323      	adds	r3, #35	@ 0x23
 800e2c8:	6013      	str	r3, [r2, #0]
 800e2ca:	9b03      	ldr	r3, [sp, #12]
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d10e      	bne.n	800e2ee <_strtoll_l.constprop.0+0x132>
 800e2d0:	b00d      	add	sp, #52	@ 0x34
 800e2d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e2d4:	9a01      	ldr	r2, [sp, #4]
 800e2d6:	2a00      	cmp	r2, #0
 800e2d8:	d004      	beq.n	800e2e4 <_strtoll_l.constprop.0+0x128>
 800e2da:	0005      	movs	r5, r0
 800e2dc:	000e      	movs	r6, r1
 800e2de:	2100      	movs	r1, #0
 800e2e0:	4268      	negs	r0, r5
 800e2e2:	41b1      	sbcs	r1, r6
 800e2e4:	9a03      	ldr	r2, [sp, #12]
 800e2e6:	2a00      	cmp	r2, #0
 800e2e8:	d0f2      	beq.n	800e2d0 <_strtoll_l.constprop.0+0x114>
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d001      	beq.n	800e2f2 <_strtoll_l.constprop.0+0x136>
 800e2ee:	1e63      	subs	r3, r4, #1
 800e2f0:	9302      	str	r3, [sp, #8]
 800e2f2:	9b03      	ldr	r3, [sp, #12]
 800e2f4:	9a02      	ldr	r2, [sp, #8]
 800e2f6:	601a      	str	r2, [r3, #0]
 800e2f8:	e7ea      	b.n	800e2d0 <_strtoll_l.constprop.0+0x114>
 800e2fa:	46c0      	nop			@ (mov r8, r8)
 800e2fc:	080117d1 	.word	0x080117d1
 800e300:	7fffffff 	.word	0x7fffffff

0800e304 <strtoll>:
 800e304:	b510      	push	{r4, lr}
 800e306:	4c04      	ldr	r4, [pc, #16]	@ (800e318 <strtoll+0x14>)
 800e308:	0013      	movs	r3, r2
 800e30a:	000a      	movs	r2, r1
 800e30c:	0001      	movs	r1, r0
 800e30e:	6820      	ldr	r0, [r4, #0]
 800e310:	f7ff ff54 	bl	800e1bc <_strtoll_l.constprop.0>
 800e314:	bd10      	pop	{r4, pc}
 800e316:	46c0      	nop			@ (mov r8, r8)
 800e318:	20000b4c 	.word	0x20000b4c

0800e31c <std>:
 800e31c:	2300      	movs	r3, #0
 800e31e:	b510      	push	{r4, lr}
 800e320:	0004      	movs	r4, r0
 800e322:	6003      	str	r3, [r0, #0]
 800e324:	6043      	str	r3, [r0, #4]
 800e326:	6083      	str	r3, [r0, #8]
 800e328:	8181      	strh	r1, [r0, #12]
 800e32a:	6643      	str	r3, [r0, #100]	@ 0x64
 800e32c:	81c2      	strh	r2, [r0, #14]
 800e32e:	6103      	str	r3, [r0, #16]
 800e330:	6143      	str	r3, [r0, #20]
 800e332:	6183      	str	r3, [r0, #24]
 800e334:	0019      	movs	r1, r3
 800e336:	2208      	movs	r2, #8
 800e338:	305c      	adds	r0, #92	@ 0x5c
 800e33a:	f000 f91f 	bl	800e57c <memset>
 800e33e:	4b0b      	ldr	r3, [pc, #44]	@ (800e36c <std+0x50>)
 800e340:	6224      	str	r4, [r4, #32]
 800e342:	6263      	str	r3, [r4, #36]	@ 0x24
 800e344:	4b0a      	ldr	r3, [pc, #40]	@ (800e370 <std+0x54>)
 800e346:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e348:	4b0a      	ldr	r3, [pc, #40]	@ (800e374 <std+0x58>)
 800e34a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e34c:	4b0a      	ldr	r3, [pc, #40]	@ (800e378 <std+0x5c>)
 800e34e:	6323      	str	r3, [r4, #48]	@ 0x30
 800e350:	4b0a      	ldr	r3, [pc, #40]	@ (800e37c <std+0x60>)
 800e352:	429c      	cmp	r4, r3
 800e354:	d005      	beq.n	800e362 <std+0x46>
 800e356:	4b0a      	ldr	r3, [pc, #40]	@ (800e380 <std+0x64>)
 800e358:	429c      	cmp	r4, r3
 800e35a:	d002      	beq.n	800e362 <std+0x46>
 800e35c:	4b09      	ldr	r3, [pc, #36]	@ (800e384 <std+0x68>)
 800e35e:	429c      	cmp	r4, r3
 800e360:	d103      	bne.n	800e36a <std+0x4e>
 800e362:	0020      	movs	r0, r4
 800e364:	3058      	adds	r0, #88	@ 0x58
 800e366:	f000 f99b 	bl	800e6a0 <__retarget_lock_init_recursive>
 800e36a:	bd10      	pop	{r4, pc}
 800e36c:	0800e4e5 	.word	0x0800e4e5
 800e370:	0800e50d 	.word	0x0800e50d
 800e374:	0800e545 	.word	0x0800e545
 800e378:	0800e571 	.word	0x0800e571
 800e37c:	20001e60 	.word	0x20001e60
 800e380:	20001ec8 	.word	0x20001ec8
 800e384:	20001f30 	.word	0x20001f30

0800e388 <stdio_exit_handler>:
 800e388:	b510      	push	{r4, lr}
 800e38a:	4a03      	ldr	r2, [pc, #12]	@ (800e398 <stdio_exit_handler+0x10>)
 800e38c:	4903      	ldr	r1, [pc, #12]	@ (800e39c <stdio_exit_handler+0x14>)
 800e38e:	4804      	ldr	r0, [pc, #16]	@ (800e3a0 <stdio_exit_handler+0x18>)
 800e390:	f000 f86c 	bl	800e46c <_fwalk_sglue>
 800e394:	bd10      	pop	{r4, pc}
 800e396:	46c0      	nop			@ (mov r8, r8)
 800e398:	200009d4 	.word	0x200009d4
 800e39c:	08010291 	.word	0x08010291
 800e3a0:	20000b50 	.word	0x20000b50

0800e3a4 <cleanup_stdio>:
 800e3a4:	6841      	ldr	r1, [r0, #4]
 800e3a6:	4b0b      	ldr	r3, [pc, #44]	@ (800e3d4 <cleanup_stdio+0x30>)
 800e3a8:	b510      	push	{r4, lr}
 800e3aa:	0004      	movs	r4, r0
 800e3ac:	4299      	cmp	r1, r3
 800e3ae:	d001      	beq.n	800e3b4 <cleanup_stdio+0x10>
 800e3b0:	f001 ff6e 	bl	8010290 <_fflush_r>
 800e3b4:	68a1      	ldr	r1, [r4, #8]
 800e3b6:	4b08      	ldr	r3, [pc, #32]	@ (800e3d8 <cleanup_stdio+0x34>)
 800e3b8:	4299      	cmp	r1, r3
 800e3ba:	d002      	beq.n	800e3c2 <cleanup_stdio+0x1e>
 800e3bc:	0020      	movs	r0, r4
 800e3be:	f001 ff67 	bl	8010290 <_fflush_r>
 800e3c2:	68e1      	ldr	r1, [r4, #12]
 800e3c4:	4b05      	ldr	r3, [pc, #20]	@ (800e3dc <cleanup_stdio+0x38>)
 800e3c6:	4299      	cmp	r1, r3
 800e3c8:	d002      	beq.n	800e3d0 <cleanup_stdio+0x2c>
 800e3ca:	0020      	movs	r0, r4
 800e3cc:	f001 ff60 	bl	8010290 <_fflush_r>
 800e3d0:	bd10      	pop	{r4, pc}
 800e3d2:	46c0      	nop			@ (mov r8, r8)
 800e3d4:	20001e60 	.word	0x20001e60
 800e3d8:	20001ec8 	.word	0x20001ec8
 800e3dc:	20001f30 	.word	0x20001f30

0800e3e0 <global_stdio_init.part.0>:
 800e3e0:	b510      	push	{r4, lr}
 800e3e2:	4b09      	ldr	r3, [pc, #36]	@ (800e408 <global_stdio_init.part.0+0x28>)
 800e3e4:	4a09      	ldr	r2, [pc, #36]	@ (800e40c <global_stdio_init.part.0+0x2c>)
 800e3e6:	2104      	movs	r1, #4
 800e3e8:	601a      	str	r2, [r3, #0]
 800e3ea:	4809      	ldr	r0, [pc, #36]	@ (800e410 <global_stdio_init.part.0+0x30>)
 800e3ec:	2200      	movs	r2, #0
 800e3ee:	f7ff ff95 	bl	800e31c <std>
 800e3f2:	2201      	movs	r2, #1
 800e3f4:	2109      	movs	r1, #9
 800e3f6:	4807      	ldr	r0, [pc, #28]	@ (800e414 <global_stdio_init.part.0+0x34>)
 800e3f8:	f7ff ff90 	bl	800e31c <std>
 800e3fc:	2202      	movs	r2, #2
 800e3fe:	2112      	movs	r1, #18
 800e400:	4805      	ldr	r0, [pc, #20]	@ (800e418 <global_stdio_init.part.0+0x38>)
 800e402:	f7ff ff8b 	bl	800e31c <std>
 800e406:	bd10      	pop	{r4, pc}
 800e408:	20001f98 	.word	0x20001f98
 800e40c:	0800e389 	.word	0x0800e389
 800e410:	20001e60 	.word	0x20001e60
 800e414:	20001ec8 	.word	0x20001ec8
 800e418:	20001f30 	.word	0x20001f30

0800e41c <__sfp_lock_acquire>:
 800e41c:	b510      	push	{r4, lr}
 800e41e:	4802      	ldr	r0, [pc, #8]	@ (800e428 <__sfp_lock_acquire+0xc>)
 800e420:	f000 f93f 	bl	800e6a2 <__retarget_lock_acquire_recursive>
 800e424:	bd10      	pop	{r4, pc}
 800e426:	46c0      	nop			@ (mov r8, r8)
 800e428:	20001fa1 	.word	0x20001fa1

0800e42c <__sfp_lock_release>:
 800e42c:	b510      	push	{r4, lr}
 800e42e:	4802      	ldr	r0, [pc, #8]	@ (800e438 <__sfp_lock_release+0xc>)
 800e430:	f000 f938 	bl	800e6a4 <__retarget_lock_release_recursive>
 800e434:	bd10      	pop	{r4, pc}
 800e436:	46c0      	nop			@ (mov r8, r8)
 800e438:	20001fa1 	.word	0x20001fa1

0800e43c <__sinit>:
 800e43c:	b510      	push	{r4, lr}
 800e43e:	0004      	movs	r4, r0
 800e440:	f7ff ffec 	bl	800e41c <__sfp_lock_acquire>
 800e444:	6a23      	ldr	r3, [r4, #32]
 800e446:	2b00      	cmp	r3, #0
 800e448:	d002      	beq.n	800e450 <__sinit+0x14>
 800e44a:	f7ff ffef 	bl	800e42c <__sfp_lock_release>
 800e44e:	bd10      	pop	{r4, pc}
 800e450:	4b04      	ldr	r3, [pc, #16]	@ (800e464 <__sinit+0x28>)
 800e452:	6223      	str	r3, [r4, #32]
 800e454:	4b04      	ldr	r3, [pc, #16]	@ (800e468 <__sinit+0x2c>)
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d1f6      	bne.n	800e44a <__sinit+0xe>
 800e45c:	f7ff ffc0 	bl	800e3e0 <global_stdio_init.part.0>
 800e460:	e7f3      	b.n	800e44a <__sinit+0xe>
 800e462:	46c0      	nop			@ (mov r8, r8)
 800e464:	0800e3a5 	.word	0x0800e3a5
 800e468:	20001f98 	.word	0x20001f98

0800e46c <_fwalk_sglue>:
 800e46c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e46e:	0014      	movs	r4, r2
 800e470:	2600      	movs	r6, #0
 800e472:	9000      	str	r0, [sp, #0]
 800e474:	9101      	str	r1, [sp, #4]
 800e476:	68a5      	ldr	r5, [r4, #8]
 800e478:	6867      	ldr	r7, [r4, #4]
 800e47a:	3f01      	subs	r7, #1
 800e47c:	d504      	bpl.n	800e488 <_fwalk_sglue+0x1c>
 800e47e:	6824      	ldr	r4, [r4, #0]
 800e480:	2c00      	cmp	r4, #0
 800e482:	d1f8      	bne.n	800e476 <_fwalk_sglue+0xa>
 800e484:	0030      	movs	r0, r6
 800e486:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e488:	89ab      	ldrh	r3, [r5, #12]
 800e48a:	2b01      	cmp	r3, #1
 800e48c:	d908      	bls.n	800e4a0 <_fwalk_sglue+0x34>
 800e48e:	220e      	movs	r2, #14
 800e490:	5eab      	ldrsh	r3, [r5, r2]
 800e492:	3301      	adds	r3, #1
 800e494:	d004      	beq.n	800e4a0 <_fwalk_sglue+0x34>
 800e496:	0029      	movs	r1, r5
 800e498:	9800      	ldr	r0, [sp, #0]
 800e49a:	9b01      	ldr	r3, [sp, #4]
 800e49c:	4798      	blx	r3
 800e49e:	4306      	orrs	r6, r0
 800e4a0:	3568      	adds	r5, #104	@ 0x68
 800e4a2:	e7ea      	b.n	800e47a <_fwalk_sglue+0xe>

0800e4a4 <siprintf>:
 800e4a4:	b40e      	push	{r1, r2, r3}
 800e4a6:	b500      	push	{lr}
 800e4a8:	490b      	ldr	r1, [pc, #44]	@ (800e4d8 <siprintf+0x34>)
 800e4aa:	b09c      	sub	sp, #112	@ 0x70
 800e4ac:	ab1d      	add	r3, sp, #116	@ 0x74
 800e4ae:	9002      	str	r0, [sp, #8]
 800e4b0:	9006      	str	r0, [sp, #24]
 800e4b2:	9107      	str	r1, [sp, #28]
 800e4b4:	9104      	str	r1, [sp, #16]
 800e4b6:	4809      	ldr	r0, [pc, #36]	@ (800e4dc <siprintf+0x38>)
 800e4b8:	4909      	ldr	r1, [pc, #36]	@ (800e4e0 <siprintf+0x3c>)
 800e4ba:	cb04      	ldmia	r3!, {r2}
 800e4bc:	9105      	str	r1, [sp, #20]
 800e4be:	6800      	ldr	r0, [r0, #0]
 800e4c0:	a902      	add	r1, sp, #8
 800e4c2:	9301      	str	r3, [sp, #4]
 800e4c4:	f001 fa9e 	bl	800fa04 <_svfiprintf_r>
 800e4c8:	2200      	movs	r2, #0
 800e4ca:	9b02      	ldr	r3, [sp, #8]
 800e4cc:	701a      	strb	r2, [r3, #0]
 800e4ce:	b01c      	add	sp, #112	@ 0x70
 800e4d0:	bc08      	pop	{r3}
 800e4d2:	b003      	add	sp, #12
 800e4d4:	4718      	bx	r3
 800e4d6:	46c0      	nop			@ (mov r8, r8)
 800e4d8:	7fffffff 	.word	0x7fffffff
 800e4dc:	20000b4c 	.word	0x20000b4c
 800e4e0:	ffff0208 	.word	0xffff0208

0800e4e4 <__sread>:
 800e4e4:	b570      	push	{r4, r5, r6, lr}
 800e4e6:	000c      	movs	r4, r1
 800e4e8:	250e      	movs	r5, #14
 800e4ea:	5f49      	ldrsh	r1, [r1, r5]
 800e4ec:	f000 f886 	bl	800e5fc <_read_r>
 800e4f0:	2800      	cmp	r0, #0
 800e4f2:	db03      	blt.n	800e4fc <__sread+0x18>
 800e4f4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800e4f6:	181b      	adds	r3, r3, r0
 800e4f8:	6563      	str	r3, [r4, #84]	@ 0x54
 800e4fa:	bd70      	pop	{r4, r5, r6, pc}
 800e4fc:	89a3      	ldrh	r3, [r4, #12]
 800e4fe:	4a02      	ldr	r2, [pc, #8]	@ (800e508 <__sread+0x24>)
 800e500:	4013      	ands	r3, r2
 800e502:	81a3      	strh	r3, [r4, #12]
 800e504:	e7f9      	b.n	800e4fa <__sread+0x16>
 800e506:	46c0      	nop			@ (mov r8, r8)
 800e508:	ffffefff 	.word	0xffffefff

0800e50c <__swrite>:
 800e50c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e50e:	001f      	movs	r7, r3
 800e510:	898b      	ldrh	r3, [r1, #12]
 800e512:	0005      	movs	r5, r0
 800e514:	000c      	movs	r4, r1
 800e516:	0016      	movs	r6, r2
 800e518:	05db      	lsls	r3, r3, #23
 800e51a:	d505      	bpl.n	800e528 <__swrite+0x1c>
 800e51c:	230e      	movs	r3, #14
 800e51e:	5ec9      	ldrsh	r1, [r1, r3]
 800e520:	2200      	movs	r2, #0
 800e522:	2302      	movs	r3, #2
 800e524:	f000 f856 	bl	800e5d4 <_lseek_r>
 800e528:	89a3      	ldrh	r3, [r4, #12]
 800e52a:	4a05      	ldr	r2, [pc, #20]	@ (800e540 <__swrite+0x34>)
 800e52c:	0028      	movs	r0, r5
 800e52e:	4013      	ands	r3, r2
 800e530:	81a3      	strh	r3, [r4, #12]
 800e532:	0032      	movs	r2, r6
 800e534:	230e      	movs	r3, #14
 800e536:	5ee1      	ldrsh	r1, [r4, r3]
 800e538:	003b      	movs	r3, r7
 800e53a:	f000 f873 	bl	800e624 <_write_r>
 800e53e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e540:	ffffefff 	.word	0xffffefff

0800e544 <__sseek>:
 800e544:	b570      	push	{r4, r5, r6, lr}
 800e546:	000c      	movs	r4, r1
 800e548:	250e      	movs	r5, #14
 800e54a:	5f49      	ldrsh	r1, [r1, r5]
 800e54c:	f000 f842 	bl	800e5d4 <_lseek_r>
 800e550:	89a3      	ldrh	r3, [r4, #12]
 800e552:	1c42      	adds	r2, r0, #1
 800e554:	d103      	bne.n	800e55e <__sseek+0x1a>
 800e556:	4a05      	ldr	r2, [pc, #20]	@ (800e56c <__sseek+0x28>)
 800e558:	4013      	ands	r3, r2
 800e55a:	81a3      	strh	r3, [r4, #12]
 800e55c:	bd70      	pop	{r4, r5, r6, pc}
 800e55e:	2280      	movs	r2, #128	@ 0x80
 800e560:	0152      	lsls	r2, r2, #5
 800e562:	4313      	orrs	r3, r2
 800e564:	81a3      	strh	r3, [r4, #12]
 800e566:	6560      	str	r0, [r4, #84]	@ 0x54
 800e568:	e7f8      	b.n	800e55c <__sseek+0x18>
 800e56a:	46c0      	nop			@ (mov r8, r8)
 800e56c:	ffffefff 	.word	0xffffefff

0800e570 <__sclose>:
 800e570:	b510      	push	{r4, lr}
 800e572:	230e      	movs	r3, #14
 800e574:	5ec9      	ldrsh	r1, [r1, r3]
 800e576:	f000 f81b 	bl	800e5b0 <_close_r>
 800e57a:	bd10      	pop	{r4, pc}

0800e57c <memset>:
 800e57c:	0003      	movs	r3, r0
 800e57e:	1882      	adds	r2, r0, r2
 800e580:	4293      	cmp	r3, r2
 800e582:	d100      	bne.n	800e586 <memset+0xa>
 800e584:	4770      	bx	lr
 800e586:	7019      	strb	r1, [r3, #0]
 800e588:	3301      	adds	r3, #1
 800e58a:	e7f9      	b.n	800e580 <memset+0x4>

0800e58c <strncmp>:
 800e58c:	b530      	push	{r4, r5, lr}
 800e58e:	0005      	movs	r5, r0
 800e590:	1e10      	subs	r0, r2, #0
 800e592:	d00b      	beq.n	800e5ac <strncmp+0x20>
 800e594:	2400      	movs	r4, #0
 800e596:	3a01      	subs	r2, #1
 800e598:	5d2b      	ldrb	r3, [r5, r4]
 800e59a:	5d08      	ldrb	r0, [r1, r4]
 800e59c:	4283      	cmp	r3, r0
 800e59e:	d104      	bne.n	800e5aa <strncmp+0x1e>
 800e5a0:	42a2      	cmp	r2, r4
 800e5a2:	d002      	beq.n	800e5aa <strncmp+0x1e>
 800e5a4:	3401      	adds	r4, #1
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d1f6      	bne.n	800e598 <strncmp+0xc>
 800e5aa:	1a18      	subs	r0, r3, r0
 800e5ac:	bd30      	pop	{r4, r5, pc}
	...

0800e5b0 <_close_r>:
 800e5b0:	2300      	movs	r3, #0
 800e5b2:	b570      	push	{r4, r5, r6, lr}
 800e5b4:	4d06      	ldr	r5, [pc, #24]	@ (800e5d0 <_close_r+0x20>)
 800e5b6:	0004      	movs	r4, r0
 800e5b8:	0008      	movs	r0, r1
 800e5ba:	602b      	str	r3, [r5, #0]
 800e5bc:	f7f8 feea 	bl	8007394 <_close>
 800e5c0:	1c43      	adds	r3, r0, #1
 800e5c2:	d103      	bne.n	800e5cc <_close_r+0x1c>
 800e5c4:	682b      	ldr	r3, [r5, #0]
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d000      	beq.n	800e5cc <_close_r+0x1c>
 800e5ca:	6023      	str	r3, [r4, #0]
 800e5cc:	bd70      	pop	{r4, r5, r6, pc}
 800e5ce:	46c0      	nop			@ (mov r8, r8)
 800e5d0:	20001f9c 	.word	0x20001f9c

0800e5d4 <_lseek_r>:
 800e5d4:	b570      	push	{r4, r5, r6, lr}
 800e5d6:	0004      	movs	r4, r0
 800e5d8:	0008      	movs	r0, r1
 800e5da:	0011      	movs	r1, r2
 800e5dc:	001a      	movs	r2, r3
 800e5de:	2300      	movs	r3, #0
 800e5e0:	4d05      	ldr	r5, [pc, #20]	@ (800e5f8 <_lseek_r+0x24>)
 800e5e2:	602b      	str	r3, [r5, #0]
 800e5e4:	f7f8 fef7 	bl	80073d6 <_lseek>
 800e5e8:	1c43      	adds	r3, r0, #1
 800e5ea:	d103      	bne.n	800e5f4 <_lseek_r+0x20>
 800e5ec:	682b      	ldr	r3, [r5, #0]
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d000      	beq.n	800e5f4 <_lseek_r+0x20>
 800e5f2:	6023      	str	r3, [r4, #0]
 800e5f4:	bd70      	pop	{r4, r5, r6, pc}
 800e5f6:	46c0      	nop			@ (mov r8, r8)
 800e5f8:	20001f9c 	.word	0x20001f9c

0800e5fc <_read_r>:
 800e5fc:	b570      	push	{r4, r5, r6, lr}
 800e5fe:	0004      	movs	r4, r0
 800e600:	0008      	movs	r0, r1
 800e602:	0011      	movs	r1, r2
 800e604:	001a      	movs	r2, r3
 800e606:	2300      	movs	r3, #0
 800e608:	4d05      	ldr	r5, [pc, #20]	@ (800e620 <_read_r+0x24>)
 800e60a:	602b      	str	r3, [r5, #0]
 800e60c:	f7f8 fe89 	bl	8007322 <_read>
 800e610:	1c43      	adds	r3, r0, #1
 800e612:	d103      	bne.n	800e61c <_read_r+0x20>
 800e614:	682b      	ldr	r3, [r5, #0]
 800e616:	2b00      	cmp	r3, #0
 800e618:	d000      	beq.n	800e61c <_read_r+0x20>
 800e61a:	6023      	str	r3, [r4, #0]
 800e61c:	bd70      	pop	{r4, r5, r6, pc}
 800e61e:	46c0      	nop			@ (mov r8, r8)
 800e620:	20001f9c 	.word	0x20001f9c

0800e624 <_write_r>:
 800e624:	b570      	push	{r4, r5, r6, lr}
 800e626:	0004      	movs	r4, r0
 800e628:	0008      	movs	r0, r1
 800e62a:	0011      	movs	r1, r2
 800e62c:	001a      	movs	r2, r3
 800e62e:	2300      	movs	r3, #0
 800e630:	4d05      	ldr	r5, [pc, #20]	@ (800e648 <_write_r+0x24>)
 800e632:	602b      	str	r3, [r5, #0]
 800e634:	f7f8 fe92 	bl	800735c <_write>
 800e638:	1c43      	adds	r3, r0, #1
 800e63a:	d103      	bne.n	800e644 <_write_r+0x20>
 800e63c:	682b      	ldr	r3, [r5, #0]
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d000      	beq.n	800e644 <_write_r+0x20>
 800e642:	6023      	str	r3, [r4, #0]
 800e644:	bd70      	pop	{r4, r5, r6, pc}
 800e646:	46c0      	nop			@ (mov r8, r8)
 800e648:	20001f9c 	.word	0x20001f9c

0800e64c <__errno>:
 800e64c:	4b01      	ldr	r3, [pc, #4]	@ (800e654 <__errno+0x8>)
 800e64e:	6818      	ldr	r0, [r3, #0]
 800e650:	4770      	bx	lr
 800e652:	46c0      	nop			@ (mov r8, r8)
 800e654:	20000b4c 	.word	0x20000b4c

0800e658 <__libc_init_array>:
 800e658:	b570      	push	{r4, r5, r6, lr}
 800e65a:	2600      	movs	r6, #0
 800e65c:	4c0c      	ldr	r4, [pc, #48]	@ (800e690 <__libc_init_array+0x38>)
 800e65e:	4d0d      	ldr	r5, [pc, #52]	@ (800e694 <__libc_init_array+0x3c>)
 800e660:	1b64      	subs	r4, r4, r5
 800e662:	10a4      	asrs	r4, r4, #2
 800e664:	42a6      	cmp	r6, r4
 800e666:	d109      	bne.n	800e67c <__libc_init_array+0x24>
 800e668:	2600      	movs	r6, #0
 800e66a:	f002 fadb 	bl	8010c24 <_init>
 800e66e:	4c0a      	ldr	r4, [pc, #40]	@ (800e698 <__libc_init_array+0x40>)
 800e670:	4d0a      	ldr	r5, [pc, #40]	@ (800e69c <__libc_init_array+0x44>)
 800e672:	1b64      	subs	r4, r4, r5
 800e674:	10a4      	asrs	r4, r4, #2
 800e676:	42a6      	cmp	r6, r4
 800e678:	d105      	bne.n	800e686 <__libc_init_array+0x2e>
 800e67a:	bd70      	pop	{r4, r5, r6, pc}
 800e67c:	00b3      	lsls	r3, r6, #2
 800e67e:	58eb      	ldr	r3, [r5, r3]
 800e680:	4798      	blx	r3
 800e682:	3601      	adds	r6, #1
 800e684:	e7ee      	b.n	800e664 <__libc_init_array+0xc>
 800e686:	00b3      	lsls	r3, r6, #2
 800e688:	58eb      	ldr	r3, [r5, r3]
 800e68a:	4798      	blx	r3
 800e68c:	3601      	adds	r6, #1
 800e68e:	e7f2      	b.n	800e676 <__libc_init_array+0x1e>
 800e690:	08011b40 	.word	0x08011b40
 800e694:	08011b40 	.word	0x08011b40
 800e698:	08011b44 	.word	0x08011b44
 800e69c:	08011b40 	.word	0x08011b40

0800e6a0 <__retarget_lock_init_recursive>:
 800e6a0:	4770      	bx	lr

0800e6a2 <__retarget_lock_acquire_recursive>:
 800e6a2:	4770      	bx	lr

0800e6a4 <__retarget_lock_release_recursive>:
 800e6a4:	4770      	bx	lr

0800e6a6 <memcpy>:
 800e6a6:	2300      	movs	r3, #0
 800e6a8:	b510      	push	{r4, lr}
 800e6aa:	429a      	cmp	r2, r3
 800e6ac:	d100      	bne.n	800e6b0 <memcpy+0xa>
 800e6ae:	bd10      	pop	{r4, pc}
 800e6b0:	5ccc      	ldrb	r4, [r1, r3]
 800e6b2:	54c4      	strb	r4, [r0, r3]
 800e6b4:	3301      	adds	r3, #1
 800e6b6:	e7f8      	b.n	800e6aa <memcpy+0x4>

0800e6b8 <nan>:
 800e6b8:	2000      	movs	r0, #0
 800e6ba:	4901      	ldr	r1, [pc, #4]	@ (800e6c0 <nan+0x8>)
 800e6bc:	4770      	bx	lr
 800e6be:	46c0      	nop			@ (mov r8, r8)
 800e6c0:	7ff80000 	.word	0x7ff80000

0800e6c4 <_free_r>:
 800e6c4:	b570      	push	{r4, r5, r6, lr}
 800e6c6:	0005      	movs	r5, r0
 800e6c8:	1e0c      	subs	r4, r1, #0
 800e6ca:	d010      	beq.n	800e6ee <_free_r+0x2a>
 800e6cc:	3c04      	subs	r4, #4
 800e6ce:	6823      	ldr	r3, [r4, #0]
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	da00      	bge.n	800e6d6 <_free_r+0x12>
 800e6d4:	18e4      	adds	r4, r4, r3
 800e6d6:	0028      	movs	r0, r5
 800e6d8:	f000 fc4c 	bl	800ef74 <__malloc_lock>
 800e6dc:	4a1d      	ldr	r2, [pc, #116]	@ (800e754 <_free_r+0x90>)
 800e6de:	6813      	ldr	r3, [r2, #0]
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d105      	bne.n	800e6f0 <_free_r+0x2c>
 800e6e4:	6063      	str	r3, [r4, #4]
 800e6e6:	6014      	str	r4, [r2, #0]
 800e6e8:	0028      	movs	r0, r5
 800e6ea:	f000 fc4b 	bl	800ef84 <__malloc_unlock>
 800e6ee:	bd70      	pop	{r4, r5, r6, pc}
 800e6f0:	42a3      	cmp	r3, r4
 800e6f2:	d908      	bls.n	800e706 <_free_r+0x42>
 800e6f4:	6820      	ldr	r0, [r4, #0]
 800e6f6:	1821      	adds	r1, r4, r0
 800e6f8:	428b      	cmp	r3, r1
 800e6fa:	d1f3      	bne.n	800e6e4 <_free_r+0x20>
 800e6fc:	6819      	ldr	r1, [r3, #0]
 800e6fe:	685b      	ldr	r3, [r3, #4]
 800e700:	1809      	adds	r1, r1, r0
 800e702:	6021      	str	r1, [r4, #0]
 800e704:	e7ee      	b.n	800e6e4 <_free_r+0x20>
 800e706:	001a      	movs	r2, r3
 800e708:	685b      	ldr	r3, [r3, #4]
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d001      	beq.n	800e712 <_free_r+0x4e>
 800e70e:	42a3      	cmp	r3, r4
 800e710:	d9f9      	bls.n	800e706 <_free_r+0x42>
 800e712:	6811      	ldr	r1, [r2, #0]
 800e714:	1850      	adds	r0, r2, r1
 800e716:	42a0      	cmp	r0, r4
 800e718:	d10b      	bne.n	800e732 <_free_r+0x6e>
 800e71a:	6820      	ldr	r0, [r4, #0]
 800e71c:	1809      	adds	r1, r1, r0
 800e71e:	1850      	adds	r0, r2, r1
 800e720:	6011      	str	r1, [r2, #0]
 800e722:	4283      	cmp	r3, r0
 800e724:	d1e0      	bne.n	800e6e8 <_free_r+0x24>
 800e726:	6818      	ldr	r0, [r3, #0]
 800e728:	685b      	ldr	r3, [r3, #4]
 800e72a:	1841      	adds	r1, r0, r1
 800e72c:	6011      	str	r1, [r2, #0]
 800e72e:	6053      	str	r3, [r2, #4]
 800e730:	e7da      	b.n	800e6e8 <_free_r+0x24>
 800e732:	42a0      	cmp	r0, r4
 800e734:	d902      	bls.n	800e73c <_free_r+0x78>
 800e736:	230c      	movs	r3, #12
 800e738:	602b      	str	r3, [r5, #0]
 800e73a:	e7d5      	b.n	800e6e8 <_free_r+0x24>
 800e73c:	6820      	ldr	r0, [r4, #0]
 800e73e:	1821      	adds	r1, r4, r0
 800e740:	428b      	cmp	r3, r1
 800e742:	d103      	bne.n	800e74c <_free_r+0x88>
 800e744:	6819      	ldr	r1, [r3, #0]
 800e746:	685b      	ldr	r3, [r3, #4]
 800e748:	1809      	adds	r1, r1, r0
 800e74a:	6021      	str	r1, [r4, #0]
 800e74c:	6063      	str	r3, [r4, #4]
 800e74e:	6054      	str	r4, [r2, #4]
 800e750:	e7ca      	b.n	800e6e8 <_free_r+0x24>
 800e752:	46c0      	nop			@ (mov r8, r8)
 800e754:	20001fa8 	.word	0x20001fa8

0800e758 <rshift>:
 800e758:	0002      	movs	r2, r0
 800e75a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e75c:	6904      	ldr	r4, [r0, #16]
 800e75e:	b085      	sub	sp, #20
 800e760:	3214      	adds	r2, #20
 800e762:	114b      	asrs	r3, r1, #5
 800e764:	0016      	movs	r6, r2
 800e766:	9302      	str	r3, [sp, #8]
 800e768:	429c      	cmp	r4, r3
 800e76a:	dd31      	ble.n	800e7d0 <rshift+0x78>
 800e76c:	261f      	movs	r6, #31
 800e76e:	000f      	movs	r7, r1
 800e770:	009b      	lsls	r3, r3, #2
 800e772:	00a5      	lsls	r5, r4, #2
 800e774:	18d3      	adds	r3, r2, r3
 800e776:	4037      	ands	r7, r6
 800e778:	1955      	adds	r5, r2, r5
 800e77a:	9300      	str	r3, [sp, #0]
 800e77c:	9701      	str	r7, [sp, #4]
 800e77e:	4231      	tst	r1, r6
 800e780:	d10d      	bne.n	800e79e <rshift+0x46>
 800e782:	0016      	movs	r6, r2
 800e784:	0019      	movs	r1, r3
 800e786:	428d      	cmp	r5, r1
 800e788:	d836      	bhi.n	800e7f8 <rshift+0xa0>
 800e78a:	9b00      	ldr	r3, [sp, #0]
 800e78c:	2600      	movs	r6, #0
 800e78e:	3b03      	subs	r3, #3
 800e790:	429d      	cmp	r5, r3
 800e792:	d302      	bcc.n	800e79a <rshift+0x42>
 800e794:	9b02      	ldr	r3, [sp, #8]
 800e796:	1ae4      	subs	r4, r4, r3
 800e798:	00a6      	lsls	r6, r4, #2
 800e79a:	1996      	adds	r6, r2, r6
 800e79c:	e018      	b.n	800e7d0 <rshift+0x78>
 800e79e:	2120      	movs	r1, #32
 800e7a0:	9e01      	ldr	r6, [sp, #4]
 800e7a2:	9f01      	ldr	r7, [sp, #4]
 800e7a4:	1b89      	subs	r1, r1, r6
 800e7a6:	9e00      	ldr	r6, [sp, #0]
 800e7a8:	9103      	str	r1, [sp, #12]
 800e7aa:	ce02      	ldmia	r6!, {r1}
 800e7ac:	4694      	mov	ip, r2
 800e7ae:	40f9      	lsrs	r1, r7
 800e7b0:	42b5      	cmp	r5, r6
 800e7b2:	d816      	bhi.n	800e7e2 <rshift+0x8a>
 800e7b4:	9b00      	ldr	r3, [sp, #0]
 800e7b6:	2600      	movs	r6, #0
 800e7b8:	3301      	adds	r3, #1
 800e7ba:	429d      	cmp	r5, r3
 800e7bc:	d303      	bcc.n	800e7c6 <rshift+0x6e>
 800e7be:	9b02      	ldr	r3, [sp, #8]
 800e7c0:	1ae4      	subs	r4, r4, r3
 800e7c2:	00a6      	lsls	r6, r4, #2
 800e7c4:	3e04      	subs	r6, #4
 800e7c6:	1996      	adds	r6, r2, r6
 800e7c8:	6031      	str	r1, [r6, #0]
 800e7ca:	2900      	cmp	r1, #0
 800e7cc:	d000      	beq.n	800e7d0 <rshift+0x78>
 800e7ce:	3604      	adds	r6, #4
 800e7d0:	1ab1      	subs	r1, r6, r2
 800e7d2:	1089      	asrs	r1, r1, #2
 800e7d4:	6101      	str	r1, [r0, #16]
 800e7d6:	4296      	cmp	r6, r2
 800e7d8:	d101      	bne.n	800e7de <rshift+0x86>
 800e7da:	2300      	movs	r3, #0
 800e7dc:	6143      	str	r3, [r0, #20]
 800e7de:	b005      	add	sp, #20
 800e7e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e7e2:	6837      	ldr	r7, [r6, #0]
 800e7e4:	9b03      	ldr	r3, [sp, #12]
 800e7e6:	409f      	lsls	r7, r3
 800e7e8:	430f      	orrs	r7, r1
 800e7ea:	4661      	mov	r1, ip
 800e7ec:	c180      	stmia	r1!, {r7}
 800e7ee:	468c      	mov	ip, r1
 800e7f0:	9b01      	ldr	r3, [sp, #4]
 800e7f2:	ce02      	ldmia	r6!, {r1}
 800e7f4:	40d9      	lsrs	r1, r3
 800e7f6:	e7db      	b.n	800e7b0 <rshift+0x58>
 800e7f8:	c980      	ldmia	r1!, {r7}
 800e7fa:	c680      	stmia	r6!, {r7}
 800e7fc:	e7c3      	b.n	800e786 <rshift+0x2e>

0800e7fe <__hexdig_fun>:
 800e7fe:	0002      	movs	r2, r0
 800e800:	3a30      	subs	r2, #48	@ 0x30
 800e802:	0003      	movs	r3, r0
 800e804:	2a09      	cmp	r2, #9
 800e806:	d802      	bhi.n	800e80e <__hexdig_fun+0x10>
 800e808:	3b20      	subs	r3, #32
 800e80a:	b2d8      	uxtb	r0, r3
 800e80c:	4770      	bx	lr
 800e80e:	0002      	movs	r2, r0
 800e810:	3a61      	subs	r2, #97	@ 0x61
 800e812:	2a05      	cmp	r2, #5
 800e814:	d801      	bhi.n	800e81a <__hexdig_fun+0x1c>
 800e816:	3b47      	subs	r3, #71	@ 0x47
 800e818:	e7f7      	b.n	800e80a <__hexdig_fun+0xc>
 800e81a:	001a      	movs	r2, r3
 800e81c:	3a41      	subs	r2, #65	@ 0x41
 800e81e:	2000      	movs	r0, #0
 800e820:	2a05      	cmp	r2, #5
 800e822:	d8f3      	bhi.n	800e80c <__hexdig_fun+0xe>
 800e824:	3b27      	subs	r3, #39	@ 0x27
 800e826:	e7f0      	b.n	800e80a <__hexdig_fun+0xc>

0800e828 <__gethex>:
 800e828:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e82a:	b089      	sub	sp, #36	@ 0x24
 800e82c:	9307      	str	r3, [sp, #28]
 800e82e:	680b      	ldr	r3, [r1, #0]
 800e830:	9201      	str	r2, [sp, #4]
 800e832:	9003      	str	r0, [sp, #12]
 800e834:	9106      	str	r1, [sp, #24]
 800e836:	1c9a      	adds	r2, r3, #2
 800e838:	0011      	movs	r1, r2
 800e83a:	3201      	adds	r2, #1
 800e83c:	1e50      	subs	r0, r2, #1
 800e83e:	7800      	ldrb	r0, [r0, #0]
 800e840:	2830      	cmp	r0, #48	@ 0x30
 800e842:	d0f9      	beq.n	800e838 <__gethex+0x10>
 800e844:	1acb      	subs	r3, r1, r3
 800e846:	3b02      	subs	r3, #2
 800e848:	9305      	str	r3, [sp, #20]
 800e84a:	9100      	str	r1, [sp, #0]
 800e84c:	f7ff ffd7 	bl	800e7fe <__hexdig_fun>
 800e850:	2300      	movs	r3, #0
 800e852:	001d      	movs	r5, r3
 800e854:	9302      	str	r3, [sp, #8]
 800e856:	4298      	cmp	r0, r3
 800e858:	d11e      	bne.n	800e898 <__gethex+0x70>
 800e85a:	2201      	movs	r2, #1
 800e85c:	49a6      	ldr	r1, [pc, #664]	@ (800eaf8 <__gethex+0x2d0>)
 800e85e:	9800      	ldr	r0, [sp, #0]
 800e860:	f7ff fe94 	bl	800e58c <strncmp>
 800e864:	0007      	movs	r7, r0
 800e866:	42a8      	cmp	r0, r5
 800e868:	d000      	beq.n	800e86c <__gethex+0x44>
 800e86a:	e06a      	b.n	800e942 <__gethex+0x11a>
 800e86c:	9b00      	ldr	r3, [sp, #0]
 800e86e:	7858      	ldrb	r0, [r3, #1]
 800e870:	1c5c      	adds	r4, r3, #1
 800e872:	f7ff ffc4 	bl	800e7fe <__hexdig_fun>
 800e876:	2301      	movs	r3, #1
 800e878:	9302      	str	r3, [sp, #8]
 800e87a:	42a8      	cmp	r0, r5
 800e87c:	d02f      	beq.n	800e8de <__gethex+0xb6>
 800e87e:	9400      	str	r4, [sp, #0]
 800e880:	9b00      	ldr	r3, [sp, #0]
 800e882:	7818      	ldrb	r0, [r3, #0]
 800e884:	2830      	cmp	r0, #48	@ 0x30
 800e886:	d009      	beq.n	800e89c <__gethex+0x74>
 800e888:	f7ff ffb9 	bl	800e7fe <__hexdig_fun>
 800e88c:	4242      	negs	r2, r0
 800e88e:	4142      	adcs	r2, r0
 800e890:	2301      	movs	r3, #1
 800e892:	0025      	movs	r5, r4
 800e894:	9202      	str	r2, [sp, #8]
 800e896:	9305      	str	r3, [sp, #20]
 800e898:	9c00      	ldr	r4, [sp, #0]
 800e89a:	e004      	b.n	800e8a6 <__gethex+0x7e>
 800e89c:	9b00      	ldr	r3, [sp, #0]
 800e89e:	3301      	adds	r3, #1
 800e8a0:	9300      	str	r3, [sp, #0]
 800e8a2:	e7ed      	b.n	800e880 <__gethex+0x58>
 800e8a4:	3401      	adds	r4, #1
 800e8a6:	7820      	ldrb	r0, [r4, #0]
 800e8a8:	f7ff ffa9 	bl	800e7fe <__hexdig_fun>
 800e8ac:	1e07      	subs	r7, r0, #0
 800e8ae:	d1f9      	bne.n	800e8a4 <__gethex+0x7c>
 800e8b0:	2201      	movs	r2, #1
 800e8b2:	0020      	movs	r0, r4
 800e8b4:	4990      	ldr	r1, [pc, #576]	@ (800eaf8 <__gethex+0x2d0>)
 800e8b6:	f7ff fe69 	bl	800e58c <strncmp>
 800e8ba:	2800      	cmp	r0, #0
 800e8bc:	d10d      	bne.n	800e8da <__gethex+0xb2>
 800e8be:	2d00      	cmp	r5, #0
 800e8c0:	d106      	bne.n	800e8d0 <__gethex+0xa8>
 800e8c2:	3401      	adds	r4, #1
 800e8c4:	0025      	movs	r5, r4
 800e8c6:	7820      	ldrb	r0, [r4, #0]
 800e8c8:	f7ff ff99 	bl	800e7fe <__hexdig_fun>
 800e8cc:	2800      	cmp	r0, #0
 800e8ce:	d102      	bne.n	800e8d6 <__gethex+0xae>
 800e8d0:	1b2d      	subs	r5, r5, r4
 800e8d2:	00af      	lsls	r7, r5, #2
 800e8d4:	e003      	b.n	800e8de <__gethex+0xb6>
 800e8d6:	3401      	adds	r4, #1
 800e8d8:	e7f5      	b.n	800e8c6 <__gethex+0x9e>
 800e8da:	2d00      	cmp	r5, #0
 800e8dc:	d1f8      	bne.n	800e8d0 <__gethex+0xa8>
 800e8de:	2220      	movs	r2, #32
 800e8e0:	7823      	ldrb	r3, [r4, #0]
 800e8e2:	0026      	movs	r6, r4
 800e8e4:	4393      	bics	r3, r2
 800e8e6:	2b50      	cmp	r3, #80	@ 0x50
 800e8e8:	d11d      	bne.n	800e926 <__gethex+0xfe>
 800e8ea:	7863      	ldrb	r3, [r4, #1]
 800e8ec:	2b2b      	cmp	r3, #43	@ 0x2b
 800e8ee:	d02d      	beq.n	800e94c <__gethex+0x124>
 800e8f0:	2b2d      	cmp	r3, #45	@ 0x2d
 800e8f2:	d02f      	beq.n	800e954 <__gethex+0x12c>
 800e8f4:	2300      	movs	r3, #0
 800e8f6:	1c66      	adds	r6, r4, #1
 800e8f8:	9304      	str	r3, [sp, #16]
 800e8fa:	7830      	ldrb	r0, [r6, #0]
 800e8fc:	f7ff ff7f 	bl	800e7fe <__hexdig_fun>
 800e900:	1e43      	subs	r3, r0, #1
 800e902:	b2db      	uxtb	r3, r3
 800e904:	0005      	movs	r5, r0
 800e906:	2b18      	cmp	r3, #24
 800e908:	d82a      	bhi.n	800e960 <__gethex+0x138>
 800e90a:	7870      	ldrb	r0, [r6, #1]
 800e90c:	f7ff ff77 	bl	800e7fe <__hexdig_fun>
 800e910:	1e43      	subs	r3, r0, #1
 800e912:	b2db      	uxtb	r3, r3
 800e914:	3601      	adds	r6, #1
 800e916:	3d10      	subs	r5, #16
 800e918:	2b18      	cmp	r3, #24
 800e91a:	d91d      	bls.n	800e958 <__gethex+0x130>
 800e91c:	9b04      	ldr	r3, [sp, #16]
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d000      	beq.n	800e924 <__gethex+0xfc>
 800e922:	426d      	negs	r5, r5
 800e924:	197f      	adds	r7, r7, r5
 800e926:	9b06      	ldr	r3, [sp, #24]
 800e928:	601e      	str	r6, [r3, #0]
 800e92a:	9b02      	ldr	r3, [sp, #8]
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d019      	beq.n	800e964 <__gethex+0x13c>
 800e930:	9b05      	ldr	r3, [sp, #20]
 800e932:	2606      	movs	r6, #6
 800e934:	425a      	negs	r2, r3
 800e936:	4153      	adcs	r3, r2
 800e938:	425b      	negs	r3, r3
 800e93a:	401e      	ands	r6, r3
 800e93c:	0030      	movs	r0, r6
 800e93e:	b009      	add	sp, #36	@ 0x24
 800e940:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e942:	2301      	movs	r3, #1
 800e944:	2700      	movs	r7, #0
 800e946:	9c00      	ldr	r4, [sp, #0]
 800e948:	9302      	str	r3, [sp, #8]
 800e94a:	e7c8      	b.n	800e8de <__gethex+0xb6>
 800e94c:	2300      	movs	r3, #0
 800e94e:	9304      	str	r3, [sp, #16]
 800e950:	1ca6      	adds	r6, r4, #2
 800e952:	e7d2      	b.n	800e8fa <__gethex+0xd2>
 800e954:	2301      	movs	r3, #1
 800e956:	e7fa      	b.n	800e94e <__gethex+0x126>
 800e958:	230a      	movs	r3, #10
 800e95a:	435d      	muls	r5, r3
 800e95c:	182d      	adds	r5, r5, r0
 800e95e:	e7d4      	b.n	800e90a <__gethex+0xe2>
 800e960:	0026      	movs	r6, r4
 800e962:	e7e0      	b.n	800e926 <__gethex+0xfe>
 800e964:	9b00      	ldr	r3, [sp, #0]
 800e966:	9902      	ldr	r1, [sp, #8]
 800e968:	1ae3      	subs	r3, r4, r3
 800e96a:	3b01      	subs	r3, #1
 800e96c:	2b07      	cmp	r3, #7
 800e96e:	dc0a      	bgt.n	800e986 <__gethex+0x15e>
 800e970:	9803      	ldr	r0, [sp, #12]
 800e972:	f000 fb0f 	bl	800ef94 <_Balloc>
 800e976:	1e05      	subs	r5, r0, #0
 800e978:	d108      	bne.n	800e98c <__gethex+0x164>
 800e97a:	002a      	movs	r2, r5
 800e97c:	21e4      	movs	r1, #228	@ 0xe4
 800e97e:	4b5f      	ldr	r3, [pc, #380]	@ (800eafc <__gethex+0x2d4>)
 800e980:	485f      	ldr	r0, [pc, #380]	@ (800eb00 <__gethex+0x2d8>)
 800e982:	f001 fd83 	bl	801048c <__assert_func>
 800e986:	3101      	adds	r1, #1
 800e988:	105b      	asrs	r3, r3, #1
 800e98a:	e7ef      	b.n	800e96c <__gethex+0x144>
 800e98c:	0003      	movs	r3, r0
 800e98e:	3314      	adds	r3, #20
 800e990:	9302      	str	r3, [sp, #8]
 800e992:	9305      	str	r3, [sp, #20]
 800e994:	2300      	movs	r3, #0
 800e996:	001e      	movs	r6, r3
 800e998:	9304      	str	r3, [sp, #16]
 800e99a:	9b00      	ldr	r3, [sp, #0]
 800e99c:	42a3      	cmp	r3, r4
 800e99e:	d338      	bcc.n	800ea12 <__gethex+0x1ea>
 800e9a0:	9c05      	ldr	r4, [sp, #20]
 800e9a2:	9b02      	ldr	r3, [sp, #8]
 800e9a4:	c440      	stmia	r4!, {r6}
 800e9a6:	1ae4      	subs	r4, r4, r3
 800e9a8:	10a4      	asrs	r4, r4, #2
 800e9aa:	0030      	movs	r0, r6
 800e9ac:	612c      	str	r4, [r5, #16]
 800e9ae:	f000 fbe9 	bl	800f184 <__hi0bits>
 800e9b2:	9b01      	ldr	r3, [sp, #4]
 800e9b4:	0164      	lsls	r4, r4, #5
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	1a26      	subs	r6, r4, r0
 800e9ba:	9300      	str	r3, [sp, #0]
 800e9bc:	429e      	cmp	r6, r3
 800e9be:	dd52      	ble.n	800ea66 <__gethex+0x23e>
 800e9c0:	1af6      	subs	r6, r6, r3
 800e9c2:	0031      	movs	r1, r6
 800e9c4:	0028      	movs	r0, r5
 800e9c6:	f000 ff8c 	bl	800f8e2 <__any_on>
 800e9ca:	1e04      	subs	r4, r0, #0
 800e9cc:	d00f      	beq.n	800e9ee <__gethex+0x1c6>
 800e9ce:	2401      	movs	r4, #1
 800e9d0:	231f      	movs	r3, #31
 800e9d2:	0020      	movs	r0, r4
 800e9d4:	1e72      	subs	r2, r6, #1
 800e9d6:	4013      	ands	r3, r2
 800e9d8:	4098      	lsls	r0, r3
 800e9da:	0003      	movs	r3, r0
 800e9dc:	1151      	asrs	r1, r2, #5
 800e9de:	9802      	ldr	r0, [sp, #8]
 800e9e0:	0089      	lsls	r1, r1, #2
 800e9e2:	5809      	ldr	r1, [r1, r0]
 800e9e4:	4219      	tst	r1, r3
 800e9e6:	d002      	beq.n	800e9ee <__gethex+0x1c6>
 800e9e8:	42a2      	cmp	r2, r4
 800e9ea:	dc34      	bgt.n	800ea56 <__gethex+0x22e>
 800e9ec:	2402      	movs	r4, #2
 800e9ee:	0031      	movs	r1, r6
 800e9f0:	0028      	movs	r0, r5
 800e9f2:	f7ff feb1 	bl	800e758 <rshift>
 800e9f6:	19bf      	adds	r7, r7, r6
 800e9f8:	9b01      	ldr	r3, [sp, #4]
 800e9fa:	689b      	ldr	r3, [r3, #8]
 800e9fc:	42bb      	cmp	r3, r7
 800e9fe:	da42      	bge.n	800ea86 <__gethex+0x25e>
 800ea00:	0029      	movs	r1, r5
 800ea02:	9803      	ldr	r0, [sp, #12]
 800ea04:	f000 fb0a 	bl	800f01c <_Bfree>
 800ea08:	2300      	movs	r3, #0
 800ea0a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ea0c:	26a3      	movs	r6, #163	@ 0xa3
 800ea0e:	6013      	str	r3, [r2, #0]
 800ea10:	e794      	b.n	800e93c <__gethex+0x114>
 800ea12:	3c01      	subs	r4, #1
 800ea14:	7823      	ldrb	r3, [r4, #0]
 800ea16:	2b2e      	cmp	r3, #46	@ 0x2e
 800ea18:	d012      	beq.n	800ea40 <__gethex+0x218>
 800ea1a:	9b04      	ldr	r3, [sp, #16]
 800ea1c:	2b20      	cmp	r3, #32
 800ea1e:	d104      	bne.n	800ea2a <__gethex+0x202>
 800ea20:	9b05      	ldr	r3, [sp, #20]
 800ea22:	c340      	stmia	r3!, {r6}
 800ea24:	2600      	movs	r6, #0
 800ea26:	9305      	str	r3, [sp, #20]
 800ea28:	9604      	str	r6, [sp, #16]
 800ea2a:	7820      	ldrb	r0, [r4, #0]
 800ea2c:	f7ff fee7 	bl	800e7fe <__hexdig_fun>
 800ea30:	230f      	movs	r3, #15
 800ea32:	4018      	ands	r0, r3
 800ea34:	9b04      	ldr	r3, [sp, #16]
 800ea36:	4098      	lsls	r0, r3
 800ea38:	3304      	adds	r3, #4
 800ea3a:	4306      	orrs	r6, r0
 800ea3c:	9304      	str	r3, [sp, #16]
 800ea3e:	e7ac      	b.n	800e99a <__gethex+0x172>
 800ea40:	9b00      	ldr	r3, [sp, #0]
 800ea42:	42a3      	cmp	r3, r4
 800ea44:	d8e9      	bhi.n	800ea1a <__gethex+0x1f2>
 800ea46:	2201      	movs	r2, #1
 800ea48:	0020      	movs	r0, r4
 800ea4a:	492b      	ldr	r1, [pc, #172]	@ (800eaf8 <__gethex+0x2d0>)
 800ea4c:	f7ff fd9e 	bl	800e58c <strncmp>
 800ea50:	2800      	cmp	r0, #0
 800ea52:	d1e2      	bne.n	800ea1a <__gethex+0x1f2>
 800ea54:	e7a1      	b.n	800e99a <__gethex+0x172>
 800ea56:	0028      	movs	r0, r5
 800ea58:	1eb1      	subs	r1, r6, #2
 800ea5a:	f000 ff42 	bl	800f8e2 <__any_on>
 800ea5e:	2800      	cmp	r0, #0
 800ea60:	d0c4      	beq.n	800e9ec <__gethex+0x1c4>
 800ea62:	2403      	movs	r4, #3
 800ea64:	e7c3      	b.n	800e9ee <__gethex+0x1c6>
 800ea66:	9b00      	ldr	r3, [sp, #0]
 800ea68:	2400      	movs	r4, #0
 800ea6a:	429e      	cmp	r6, r3
 800ea6c:	dac4      	bge.n	800e9f8 <__gethex+0x1d0>
 800ea6e:	1b9e      	subs	r6, r3, r6
 800ea70:	0029      	movs	r1, r5
 800ea72:	0032      	movs	r2, r6
 800ea74:	9803      	ldr	r0, [sp, #12]
 800ea76:	f000 fcfb 	bl	800f470 <__lshift>
 800ea7a:	0003      	movs	r3, r0
 800ea7c:	3314      	adds	r3, #20
 800ea7e:	0005      	movs	r5, r0
 800ea80:	1bbf      	subs	r7, r7, r6
 800ea82:	9302      	str	r3, [sp, #8]
 800ea84:	e7b8      	b.n	800e9f8 <__gethex+0x1d0>
 800ea86:	9b01      	ldr	r3, [sp, #4]
 800ea88:	685e      	ldr	r6, [r3, #4]
 800ea8a:	42be      	cmp	r6, r7
 800ea8c:	dd6f      	ble.n	800eb6e <__gethex+0x346>
 800ea8e:	9b00      	ldr	r3, [sp, #0]
 800ea90:	1bf6      	subs	r6, r6, r7
 800ea92:	42b3      	cmp	r3, r6
 800ea94:	dc36      	bgt.n	800eb04 <__gethex+0x2dc>
 800ea96:	9b01      	ldr	r3, [sp, #4]
 800ea98:	68db      	ldr	r3, [r3, #12]
 800ea9a:	2b02      	cmp	r3, #2
 800ea9c:	d024      	beq.n	800eae8 <__gethex+0x2c0>
 800ea9e:	2b03      	cmp	r3, #3
 800eaa0:	d026      	beq.n	800eaf0 <__gethex+0x2c8>
 800eaa2:	2b01      	cmp	r3, #1
 800eaa4:	d117      	bne.n	800ead6 <__gethex+0x2ae>
 800eaa6:	9b00      	ldr	r3, [sp, #0]
 800eaa8:	42b3      	cmp	r3, r6
 800eaaa:	d114      	bne.n	800ead6 <__gethex+0x2ae>
 800eaac:	2b01      	cmp	r3, #1
 800eaae:	d10b      	bne.n	800eac8 <__gethex+0x2a0>
 800eab0:	9b01      	ldr	r3, [sp, #4]
 800eab2:	9a07      	ldr	r2, [sp, #28]
 800eab4:	685b      	ldr	r3, [r3, #4]
 800eab6:	2662      	movs	r6, #98	@ 0x62
 800eab8:	6013      	str	r3, [r2, #0]
 800eaba:	2301      	movs	r3, #1
 800eabc:	9a02      	ldr	r2, [sp, #8]
 800eabe:	612b      	str	r3, [r5, #16]
 800eac0:	6013      	str	r3, [r2, #0]
 800eac2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eac4:	601d      	str	r5, [r3, #0]
 800eac6:	e739      	b.n	800e93c <__gethex+0x114>
 800eac8:	9900      	ldr	r1, [sp, #0]
 800eaca:	0028      	movs	r0, r5
 800eacc:	3901      	subs	r1, #1
 800eace:	f000 ff08 	bl	800f8e2 <__any_on>
 800ead2:	2800      	cmp	r0, #0
 800ead4:	d1ec      	bne.n	800eab0 <__gethex+0x288>
 800ead6:	0029      	movs	r1, r5
 800ead8:	9803      	ldr	r0, [sp, #12]
 800eada:	f000 fa9f 	bl	800f01c <_Bfree>
 800eade:	2300      	movs	r3, #0
 800eae0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800eae2:	2650      	movs	r6, #80	@ 0x50
 800eae4:	6013      	str	r3, [r2, #0]
 800eae6:	e729      	b.n	800e93c <__gethex+0x114>
 800eae8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d1f3      	bne.n	800ead6 <__gethex+0x2ae>
 800eaee:	e7df      	b.n	800eab0 <__gethex+0x288>
 800eaf0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d1dc      	bne.n	800eab0 <__gethex+0x288>
 800eaf6:	e7ee      	b.n	800ead6 <__gethex+0x2ae>
 800eaf8:	08011770 	.word	0x08011770
 800eafc:	080118d9 	.word	0x080118d9
 800eb00:	080118ea 	.word	0x080118ea
 800eb04:	1e77      	subs	r7, r6, #1
 800eb06:	2c00      	cmp	r4, #0
 800eb08:	d12f      	bne.n	800eb6a <__gethex+0x342>
 800eb0a:	2f00      	cmp	r7, #0
 800eb0c:	d004      	beq.n	800eb18 <__gethex+0x2f0>
 800eb0e:	0039      	movs	r1, r7
 800eb10:	0028      	movs	r0, r5
 800eb12:	f000 fee6 	bl	800f8e2 <__any_on>
 800eb16:	0004      	movs	r4, r0
 800eb18:	231f      	movs	r3, #31
 800eb1a:	117a      	asrs	r2, r7, #5
 800eb1c:	401f      	ands	r7, r3
 800eb1e:	3b1e      	subs	r3, #30
 800eb20:	40bb      	lsls	r3, r7
 800eb22:	9902      	ldr	r1, [sp, #8]
 800eb24:	0092      	lsls	r2, r2, #2
 800eb26:	5852      	ldr	r2, [r2, r1]
 800eb28:	421a      	tst	r2, r3
 800eb2a:	d001      	beq.n	800eb30 <__gethex+0x308>
 800eb2c:	2302      	movs	r3, #2
 800eb2e:	431c      	orrs	r4, r3
 800eb30:	9b00      	ldr	r3, [sp, #0]
 800eb32:	0031      	movs	r1, r6
 800eb34:	1b9b      	subs	r3, r3, r6
 800eb36:	2602      	movs	r6, #2
 800eb38:	0028      	movs	r0, r5
 800eb3a:	9300      	str	r3, [sp, #0]
 800eb3c:	f7ff fe0c 	bl	800e758 <rshift>
 800eb40:	9b01      	ldr	r3, [sp, #4]
 800eb42:	685f      	ldr	r7, [r3, #4]
 800eb44:	2c00      	cmp	r4, #0
 800eb46:	d03f      	beq.n	800ebc8 <__gethex+0x3a0>
 800eb48:	9b01      	ldr	r3, [sp, #4]
 800eb4a:	68db      	ldr	r3, [r3, #12]
 800eb4c:	2b02      	cmp	r3, #2
 800eb4e:	d010      	beq.n	800eb72 <__gethex+0x34a>
 800eb50:	2b03      	cmp	r3, #3
 800eb52:	d012      	beq.n	800eb7a <__gethex+0x352>
 800eb54:	2b01      	cmp	r3, #1
 800eb56:	d106      	bne.n	800eb66 <__gethex+0x33e>
 800eb58:	07a2      	lsls	r2, r4, #30
 800eb5a:	d504      	bpl.n	800eb66 <__gethex+0x33e>
 800eb5c:	9a02      	ldr	r2, [sp, #8]
 800eb5e:	6812      	ldr	r2, [r2, #0]
 800eb60:	4314      	orrs	r4, r2
 800eb62:	421c      	tst	r4, r3
 800eb64:	d10c      	bne.n	800eb80 <__gethex+0x358>
 800eb66:	2310      	movs	r3, #16
 800eb68:	e02d      	b.n	800ebc6 <__gethex+0x39e>
 800eb6a:	2401      	movs	r4, #1
 800eb6c:	e7d4      	b.n	800eb18 <__gethex+0x2f0>
 800eb6e:	2601      	movs	r6, #1
 800eb70:	e7e8      	b.n	800eb44 <__gethex+0x31c>
 800eb72:	2301      	movs	r3, #1
 800eb74:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800eb76:	1a9b      	subs	r3, r3, r2
 800eb78:	930f      	str	r3, [sp, #60]	@ 0x3c
 800eb7a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d0f2      	beq.n	800eb66 <__gethex+0x33e>
 800eb80:	692b      	ldr	r3, [r5, #16]
 800eb82:	2000      	movs	r0, #0
 800eb84:	9302      	str	r3, [sp, #8]
 800eb86:	009b      	lsls	r3, r3, #2
 800eb88:	9304      	str	r3, [sp, #16]
 800eb8a:	002b      	movs	r3, r5
 800eb8c:	9a04      	ldr	r2, [sp, #16]
 800eb8e:	3314      	adds	r3, #20
 800eb90:	1899      	adds	r1, r3, r2
 800eb92:	681a      	ldr	r2, [r3, #0]
 800eb94:	1c54      	adds	r4, r2, #1
 800eb96:	d01c      	beq.n	800ebd2 <__gethex+0x3aa>
 800eb98:	3201      	adds	r2, #1
 800eb9a:	601a      	str	r2, [r3, #0]
 800eb9c:	002b      	movs	r3, r5
 800eb9e:	3314      	adds	r3, #20
 800eba0:	2e02      	cmp	r6, #2
 800eba2:	d13f      	bne.n	800ec24 <__gethex+0x3fc>
 800eba4:	9a01      	ldr	r2, [sp, #4]
 800eba6:	9900      	ldr	r1, [sp, #0]
 800eba8:	6812      	ldr	r2, [r2, #0]
 800ebaa:	3a01      	subs	r2, #1
 800ebac:	428a      	cmp	r2, r1
 800ebae:	d109      	bne.n	800ebc4 <__gethex+0x39c>
 800ebb0:	000a      	movs	r2, r1
 800ebb2:	201f      	movs	r0, #31
 800ebb4:	4010      	ands	r0, r2
 800ebb6:	2201      	movs	r2, #1
 800ebb8:	4082      	lsls	r2, r0
 800ebba:	1149      	asrs	r1, r1, #5
 800ebbc:	0089      	lsls	r1, r1, #2
 800ebbe:	58cb      	ldr	r3, [r1, r3]
 800ebc0:	4213      	tst	r3, r2
 800ebc2:	d13d      	bne.n	800ec40 <__gethex+0x418>
 800ebc4:	2320      	movs	r3, #32
 800ebc6:	431e      	orrs	r6, r3
 800ebc8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ebca:	601d      	str	r5, [r3, #0]
 800ebcc:	9b07      	ldr	r3, [sp, #28]
 800ebce:	601f      	str	r7, [r3, #0]
 800ebd0:	e6b4      	b.n	800e93c <__gethex+0x114>
 800ebd2:	c301      	stmia	r3!, {r0}
 800ebd4:	4299      	cmp	r1, r3
 800ebd6:	d8dc      	bhi.n	800eb92 <__gethex+0x36a>
 800ebd8:	68ab      	ldr	r3, [r5, #8]
 800ebda:	9a02      	ldr	r2, [sp, #8]
 800ebdc:	429a      	cmp	r2, r3
 800ebde:	db18      	blt.n	800ec12 <__gethex+0x3ea>
 800ebe0:	6869      	ldr	r1, [r5, #4]
 800ebe2:	9803      	ldr	r0, [sp, #12]
 800ebe4:	3101      	adds	r1, #1
 800ebe6:	f000 f9d5 	bl	800ef94 <_Balloc>
 800ebea:	1e04      	subs	r4, r0, #0
 800ebec:	d104      	bne.n	800ebf8 <__gethex+0x3d0>
 800ebee:	0022      	movs	r2, r4
 800ebf0:	2184      	movs	r1, #132	@ 0x84
 800ebf2:	4b1d      	ldr	r3, [pc, #116]	@ (800ec68 <__gethex+0x440>)
 800ebf4:	481d      	ldr	r0, [pc, #116]	@ (800ec6c <__gethex+0x444>)
 800ebf6:	e6c4      	b.n	800e982 <__gethex+0x15a>
 800ebf8:	0029      	movs	r1, r5
 800ebfa:	692a      	ldr	r2, [r5, #16]
 800ebfc:	310c      	adds	r1, #12
 800ebfe:	3202      	adds	r2, #2
 800ec00:	0092      	lsls	r2, r2, #2
 800ec02:	300c      	adds	r0, #12
 800ec04:	f7ff fd4f 	bl	800e6a6 <memcpy>
 800ec08:	0029      	movs	r1, r5
 800ec0a:	9803      	ldr	r0, [sp, #12]
 800ec0c:	f000 fa06 	bl	800f01c <_Bfree>
 800ec10:	0025      	movs	r5, r4
 800ec12:	692b      	ldr	r3, [r5, #16]
 800ec14:	1c5a      	adds	r2, r3, #1
 800ec16:	612a      	str	r2, [r5, #16]
 800ec18:	2201      	movs	r2, #1
 800ec1a:	3304      	adds	r3, #4
 800ec1c:	009b      	lsls	r3, r3, #2
 800ec1e:	18eb      	adds	r3, r5, r3
 800ec20:	605a      	str	r2, [r3, #4]
 800ec22:	e7bb      	b.n	800eb9c <__gethex+0x374>
 800ec24:	692a      	ldr	r2, [r5, #16]
 800ec26:	9902      	ldr	r1, [sp, #8]
 800ec28:	428a      	cmp	r2, r1
 800ec2a:	dd0b      	ble.n	800ec44 <__gethex+0x41c>
 800ec2c:	2101      	movs	r1, #1
 800ec2e:	0028      	movs	r0, r5
 800ec30:	f7ff fd92 	bl	800e758 <rshift>
 800ec34:	9b01      	ldr	r3, [sp, #4]
 800ec36:	3701      	adds	r7, #1
 800ec38:	689b      	ldr	r3, [r3, #8]
 800ec3a:	42bb      	cmp	r3, r7
 800ec3c:	da00      	bge.n	800ec40 <__gethex+0x418>
 800ec3e:	e6df      	b.n	800ea00 <__gethex+0x1d8>
 800ec40:	2601      	movs	r6, #1
 800ec42:	e7bf      	b.n	800ebc4 <__gethex+0x39c>
 800ec44:	221f      	movs	r2, #31
 800ec46:	9c00      	ldr	r4, [sp, #0]
 800ec48:	9900      	ldr	r1, [sp, #0]
 800ec4a:	4014      	ands	r4, r2
 800ec4c:	4211      	tst	r1, r2
 800ec4e:	d0f7      	beq.n	800ec40 <__gethex+0x418>
 800ec50:	9a04      	ldr	r2, [sp, #16]
 800ec52:	189b      	adds	r3, r3, r2
 800ec54:	3b04      	subs	r3, #4
 800ec56:	6818      	ldr	r0, [r3, #0]
 800ec58:	f000 fa94 	bl	800f184 <__hi0bits>
 800ec5c:	2320      	movs	r3, #32
 800ec5e:	1b1b      	subs	r3, r3, r4
 800ec60:	4298      	cmp	r0, r3
 800ec62:	dbe3      	blt.n	800ec2c <__gethex+0x404>
 800ec64:	e7ec      	b.n	800ec40 <__gethex+0x418>
 800ec66:	46c0      	nop			@ (mov r8, r8)
 800ec68:	080118d9 	.word	0x080118d9
 800ec6c:	080118ea 	.word	0x080118ea

0800ec70 <L_shift>:
 800ec70:	2308      	movs	r3, #8
 800ec72:	b570      	push	{r4, r5, r6, lr}
 800ec74:	2520      	movs	r5, #32
 800ec76:	1a9a      	subs	r2, r3, r2
 800ec78:	0092      	lsls	r2, r2, #2
 800ec7a:	1aad      	subs	r5, r5, r2
 800ec7c:	6843      	ldr	r3, [r0, #4]
 800ec7e:	6804      	ldr	r4, [r0, #0]
 800ec80:	001e      	movs	r6, r3
 800ec82:	40ae      	lsls	r6, r5
 800ec84:	40d3      	lsrs	r3, r2
 800ec86:	4334      	orrs	r4, r6
 800ec88:	6004      	str	r4, [r0, #0]
 800ec8a:	6043      	str	r3, [r0, #4]
 800ec8c:	3004      	adds	r0, #4
 800ec8e:	4288      	cmp	r0, r1
 800ec90:	d3f4      	bcc.n	800ec7c <L_shift+0xc>
 800ec92:	bd70      	pop	{r4, r5, r6, pc}

0800ec94 <__match>:
 800ec94:	b530      	push	{r4, r5, lr}
 800ec96:	6803      	ldr	r3, [r0, #0]
 800ec98:	780c      	ldrb	r4, [r1, #0]
 800ec9a:	3301      	adds	r3, #1
 800ec9c:	2c00      	cmp	r4, #0
 800ec9e:	d102      	bne.n	800eca6 <__match+0x12>
 800eca0:	6003      	str	r3, [r0, #0]
 800eca2:	2001      	movs	r0, #1
 800eca4:	bd30      	pop	{r4, r5, pc}
 800eca6:	781a      	ldrb	r2, [r3, #0]
 800eca8:	0015      	movs	r5, r2
 800ecaa:	3d41      	subs	r5, #65	@ 0x41
 800ecac:	2d19      	cmp	r5, #25
 800ecae:	d800      	bhi.n	800ecb2 <__match+0x1e>
 800ecb0:	3220      	adds	r2, #32
 800ecb2:	3101      	adds	r1, #1
 800ecb4:	42a2      	cmp	r2, r4
 800ecb6:	d0ef      	beq.n	800ec98 <__match+0x4>
 800ecb8:	2000      	movs	r0, #0
 800ecba:	e7f3      	b.n	800eca4 <__match+0x10>

0800ecbc <__hexnan>:
 800ecbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ecbe:	680b      	ldr	r3, [r1, #0]
 800ecc0:	b08b      	sub	sp, #44	@ 0x2c
 800ecc2:	9201      	str	r2, [sp, #4]
 800ecc4:	9901      	ldr	r1, [sp, #4]
 800ecc6:	115a      	asrs	r2, r3, #5
 800ecc8:	0092      	lsls	r2, r2, #2
 800ecca:	188a      	adds	r2, r1, r2
 800eccc:	9202      	str	r2, [sp, #8]
 800ecce:	0019      	movs	r1, r3
 800ecd0:	221f      	movs	r2, #31
 800ecd2:	4011      	ands	r1, r2
 800ecd4:	9008      	str	r0, [sp, #32]
 800ecd6:	9106      	str	r1, [sp, #24]
 800ecd8:	4213      	tst	r3, r2
 800ecda:	d002      	beq.n	800ece2 <__hexnan+0x26>
 800ecdc:	9b02      	ldr	r3, [sp, #8]
 800ecde:	3304      	adds	r3, #4
 800ece0:	9302      	str	r3, [sp, #8]
 800ece2:	9b02      	ldr	r3, [sp, #8]
 800ece4:	2500      	movs	r5, #0
 800ece6:	1f1f      	subs	r7, r3, #4
 800ece8:	003e      	movs	r6, r7
 800ecea:	003c      	movs	r4, r7
 800ecec:	9b08      	ldr	r3, [sp, #32]
 800ecee:	603d      	str	r5, [r7, #0]
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	9507      	str	r5, [sp, #28]
 800ecf4:	9305      	str	r3, [sp, #20]
 800ecf6:	9503      	str	r5, [sp, #12]
 800ecf8:	9b05      	ldr	r3, [sp, #20]
 800ecfa:	3301      	adds	r3, #1
 800ecfc:	9309      	str	r3, [sp, #36]	@ 0x24
 800ecfe:	9b05      	ldr	r3, [sp, #20]
 800ed00:	785b      	ldrb	r3, [r3, #1]
 800ed02:	9304      	str	r3, [sp, #16]
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d028      	beq.n	800ed5a <__hexnan+0x9e>
 800ed08:	9804      	ldr	r0, [sp, #16]
 800ed0a:	f7ff fd78 	bl	800e7fe <__hexdig_fun>
 800ed0e:	2800      	cmp	r0, #0
 800ed10:	d155      	bne.n	800edbe <__hexnan+0x102>
 800ed12:	9b04      	ldr	r3, [sp, #16]
 800ed14:	2b20      	cmp	r3, #32
 800ed16:	d819      	bhi.n	800ed4c <__hexnan+0x90>
 800ed18:	9b03      	ldr	r3, [sp, #12]
 800ed1a:	9a07      	ldr	r2, [sp, #28]
 800ed1c:	4293      	cmp	r3, r2
 800ed1e:	dd12      	ble.n	800ed46 <__hexnan+0x8a>
 800ed20:	42b4      	cmp	r4, r6
 800ed22:	d206      	bcs.n	800ed32 <__hexnan+0x76>
 800ed24:	2d07      	cmp	r5, #7
 800ed26:	dc04      	bgt.n	800ed32 <__hexnan+0x76>
 800ed28:	002a      	movs	r2, r5
 800ed2a:	0031      	movs	r1, r6
 800ed2c:	0020      	movs	r0, r4
 800ed2e:	f7ff ff9f 	bl	800ec70 <L_shift>
 800ed32:	9b01      	ldr	r3, [sp, #4]
 800ed34:	2508      	movs	r5, #8
 800ed36:	429c      	cmp	r4, r3
 800ed38:	d905      	bls.n	800ed46 <__hexnan+0x8a>
 800ed3a:	1f26      	subs	r6, r4, #4
 800ed3c:	2500      	movs	r5, #0
 800ed3e:	0034      	movs	r4, r6
 800ed40:	9b03      	ldr	r3, [sp, #12]
 800ed42:	6035      	str	r5, [r6, #0]
 800ed44:	9307      	str	r3, [sp, #28]
 800ed46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed48:	9305      	str	r3, [sp, #20]
 800ed4a:	e7d5      	b.n	800ecf8 <__hexnan+0x3c>
 800ed4c:	9b04      	ldr	r3, [sp, #16]
 800ed4e:	2b29      	cmp	r3, #41	@ 0x29
 800ed50:	d15a      	bne.n	800ee08 <__hexnan+0x14c>
 800ed52:	9b05      	ldr	r3, [sp, #20]
 800ed54:	9a08      	ldr	r2, [sp, #32]
 800ed56:	3302      	adds	r3, #2
 800ed58:	6013      	str	r3, [r2, #0]
 800ed5a:	9b03      	ldr	r3, [sp, #12]
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d053      	beq.n	800ee08 <__hexnan+0x14c>
 800ed60:	42b4      	cmp	r4, r6
 800ed62:	d206      	bcs.n	800ed72 <__hexnan+0xb6>
 800ed64:	2d07      	cmp	r5, #7
 800ed66:	dc04      	bgt.n	800ed72 <__hexnan+0xb6>
 800ed68:	002a      	movs	r2, r5
 800ed6a:	0031      	movs	r1, r6
 800ed6c:	0020      	movs	r0, r4
 800ed6e:	f7ff ff7f 	bl	800ec70 <L_shift>
 800ed72:	9b01      	ldr	r3, [sp, #4]
 800ed74:	429c      	cmp	r4, r3
 800ed76:	d936      	bls.n	800ede6 <__hexnan+0x12a>
 800ed78:	001a      	movs	r2, r3
 800ed7a:	0023      	movs	r3, r4
 800ed7c:	cb02      	ldmia	r3!, {r1}
 800ed7e:	c202      	stmia	r2!, {r1}
 800ed80:	429f      	cmp	r7, r3
 800ed82:	d2fb      	bcs.n	800ed7c <__hexnan+0xc0>
 800ed84:	9b02      	ldr	r3, [sp, #8]
 800ed86:	1c61      	adds	r1, r4, #1
 800ed88:	1eda      	subs	r2, r3, #3
 800ed8a:	2304      	movs	r3, #4
 800ed8c:	4291      	cmp	r1, r2
 800ed8e:	d805      	bhi.n	800ed9c <__hexnan+0xe0>
 800ed90:	9b02      	ldr	r3, [sp, #8]
 800ed92:	3b04      	subs	r3, #4
 800ed94:	1b1b      	subs	r3, r3, r4
 800ed96:	089b      	lsrs	r3, r3, #2
 800ed98:	3301      	adds	r3, #1
 800ed9a:	009b      	lsls	r3, r3, #2
 800ed9c:	9a01      	ldr	r2, [sp, #4]
 800ed9e:	18d3      	adds	r3, r2, r3
 800eda0:	2200      	movs	r2, #0
 800eda2:	c304      	stmia	r3!, {r2}
 800eda4:	429f      	cmp	r7, r3
 800eda6:	d2fc      	bcs.n	800eda2 <__hexnan+0xe6>
 800eda8:	683b      	ldr	r3, [r7, #0]
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d104      	bne.n	800edb8 <__hexnan+0xfc>
 800edae:	9b01      	ldr	r3, [sp, #4]
 800edb0:	429f      	cmp	r7, r3
 800edb2:	d127      	bne.n	800ee04 <__hexnan+0x148>
 800edb4:	2301      	movs	r3, #1
 800edb6:	603b      	str	r3, [r7, #0]
 800edb8:	2005      	movs	r0, #5
 800edba:	b00b      	add	sp, #44	@ 0x2c
 800edbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800edbe:	9b03      	ldr	r3, [sp, #12]
 800edc0:	3501      	adds	r5, #1
 800edc2:	3301      	adds	r3, #1
 800edc4:	9303      	str	r3, [sp, #12]
 800edc6:	2d08      	cmp	r5, #8
 800edc8:	dd06      	ble.n	800edd8 <__hexnan+0x11c>
 800edca:	9b01      	ldr	r3, [sp, #4]
 800edcc:	429c      	cmp	r4, r3
 800edce:	d9ba      	bls.n	800ed46 <__hexnan+0x8a>
 800edd0:	2300      	movs	r3, #0
 800edd2:	2501      	movs	r5, #1
 800edd4:	3c04      	subs	r4, #4
 800edd6:	6023      	str	r3, [r4, #0]
 800edd8:	220f      	movs	r2, #15
 800edda:	6823      	ldr	r3, [r4, #0]
 800eddc:	4010      	ands	r0, r2
 800edde:	011b      	lsls	r3, r3, #4
 800ede0:	4303      	orrs	r3, r0
 800ede2:	6023      	str	r3, [r4, #0]
 800ede4:	e7af      	b.n	800ed46 <__hexnan+0x8a>
 800ede6:	9b06      	ldr	r3, [sp, #24]
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d0dd      	beq.n	800eda8 <__hexnan+0xec>
 800edec:	2320      	movs	r3, #32
 800edee:	9a06      	ldr	r2, [sp, #24]
 800edf0:	9902      	ldr	r1, [sp, #8]
 800edf2:	1a9b      	subs	r3, r3, r2
 800edf4:	2201      	movs	r2, #1
 800edf6:	4252      	negs	r2, r2
 800edf8:	40da      	lsrs	r2, r3
 800edfa:	3904      	subs	r1, #4
 800edfc:	680b      	ldr	r3, [r1, #0]
 800edfe:	4013      	ands	r3, r2
 800ee00:	600b      	str	r3, [r1, #0]
 800ee02:	e7d1      	b.n	800eda8 <__hexnan+0xec>
 800ee04:	3f04      	subs	r7, #4
 800ee06:	e7cf      	b.n	800eda8 <__hexnan+0xec>
 800ee08:	2004      	movs	r0, #4
 800ee0a:	e7d6      	b.n	800edba <__hexnan+0xfe>

0800ee0c <sbrk_aligned>:
 800ee0c:	b570      	push	{r4, r5, r6, lr}
 800ee0e:	4e0f      	ldr	r6, [pc, #60]	@ (800ee4c <sbrk_aligned+0x40>)
 800ee10:	000d      	movs	r5, r1
 800ee12:	6831      	ldr	r1, [r6, #0]
 800ee14:	0004      	movs	r4, r0
 800ee16:	2900      	cmp	r1, #0
 800ee18:	d102      	bne.n	800ee20 <sbrk_aligned+0x14>
 800ee1a:	f001 fb19 	bl	8010450 <_sbrk_r>
 800ee1e:	6030      	str	r0, [r6, #0]
 800ee20:	0029      	movs	r1, r5
 800ee22:	0020      	movs	r0, r4
 800ee24:	f001 fb14 	bl	8010450 <_sbrk_r>
 800ee28:	1c43      	adds	r3, r0, #1
 800ee2a:	d103      	bne.n	800ee34 <sbrk_aligned+0x28>
 800ee2c:	2501      	movs	r5, #1
 800ee2e:	426d      	negs	r5, r5
 800ee30:	0028      	movs	r0, r5
 800ee32:	bd70      	pop	{r4, r5, r6, pc}
 800ee34:	2303      	movs	r3, #3
 800ee36:	1cc5      	adds	r5, r0, #3
 800ee38:	439d      	bics	r5, r3
 800ee3a:	42a8      	cmp	r0, r5
 800ee3c:	d0f8      	beq.n	800ee30 <sbrk_aligned+0x24>
 800ee3e:	1a29      	subs	r1, r5, r0
 800ee40:	0020      	movs	r0, r4
 800ee42:	f001 fb05 	bl	8010450 <_sbrk_r>
 800ee46:	3001      	adds	r0, #1
 800ee48:	d1f2      	bne.n	800ee30 <sbrk_aligned+0x24>
 800ee4a:	e7ef      	b.n	800ee2c <sbrk_aligned+0x20>
 800ee4c:	20001fa4 	.word	0x20001fa4

0800ee50 <_malloc_r>:
 800ee50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ee52:	2203      	movs	r2, #3
 800ee54:	1ccb      	adds	r3, r1, #3
 800ee56:	4393      	bics	r3, r2
 800ee58:	3308      	adds	r3, #8
 800ee5a:	0005      	movs	r5, r0
 800ee5c:	001f      	movs	r7, r3
 800ee5e:	2b0c      	cmp	r3, #12
 800ee60:	d234      	bcs.n	800eecc <_malloc_r+0x7c>
 800ee62:	270c      	movs	r7, #12
 800ee64:	42b9      	cmp	r1, r7
 800ee66:	d833      	bhi.n	800eed0 <_malloc_r+0x80>
 800ee68:	0028      	movs	r0, r5
 800ee6a:	f000 f883 	bl	800ef74 <__malloc_lock>
 800ee6e:	4e37      	ldr	r6, [pc, #220]	@ (800ef4c <_malloc_r+0xfc>)
 800ee70:	6833      	ldr	r3, [r6, #0]
 800ee72:	001c      	movs	r4, r3
 800ee74:	2c00      	cmp	r4, #0
 800ee76:	d12f      	bne.n	800eed8 <_malloc_r+0x88>
 800ee78:	0039      	movs	r1, r7
 800ee7a:	0028      	movs	r0, r5
 800ee7c:	f7ff ffc6 	bl	800ee0c <sbrk_aligned>
 800ee80:	0004      	movs	r4, r0
 800ee82:	1c43      	adds	r3, r0, #1
 800ee84:	d15f      	bne.n	800ef46 <_malloc_r+0xf6>
 800ee86:	6834      	ldr	r4, [r6, #0]
 800ee88:	9400      	str	r4, [sp, #0]
 800ee8a:	9b00      	ldr	r3, [sp, #0]
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d14a      	bne.n	800ef26 <_malloc_r+0xd6>
 800ee90:	2c00      	cmp	r4, #0
 800ee92:	d052      	beq.n	800ef3a <_malloc_r+0xea>
 800ee94:	6823      	ldr	r3, [r4, #0]
 800ee96:	0028      	movs	r0, r5
 800ee98:	18e3      	adds	r3, r4, r3
 800ee9a:	9900      	ldr	r1, [sp, #0]
 800ee9c:	9301      	str	r3, [sp, #4]
 800ee9e:	f001 fad7 	bl	8010450 <_sbrk_r>
 800eea2:	9b01      	ldr	r3, [sp, #4]
 800eea4:	4283      	cmp	r3, r0
 800eea6:	d148      	bne.n	800ef3a <_malloc_r+0xea>
 800eea8:	6823      	ldr	r3, [r4, #0]
 800eeaa:	0028      	movs	r0, r5
 800eeac:	1aff      	subs	r7, r7, r3
 800eeae:	0039      	movs	r1, r7
 800eeb0:	f7ff ffac 	bl	800ee0c <sbrk_aligned>
 800eeb4:	3001      	adds	r0, #1
 800eeb6:	d040      	beq.n	800ef3a <_malloc_r+0xea>
 800eeb8:	6823      	ldr	r3, [r4, #0]
 800eeba:	19db      	adds	r3, r3, r7
 800eebc:	6023      	str	r3, [r4, #0]
 800eebe:	6833      	ldr	r3, [r6, #0]
 800eec0:	685a      	ldr	r2, [r3, #4]
 800eec2:	2a00      	cmp	r2, #0
 800eec4:	d133      	bne.n	800ef2e <_malloc_r+0xde>
 800eec6:	9b00      	ldr	r3, [sp, #0]
 800eec8:	6033      	str	r3, [r6, #0]
 800eeca:	e019      	b.n	800ef00 <_malloc_r+0xb0>
 800eecc:	2b00      	cmp	r3, #0
 800eece:	dac9      	bge.n	800ee64 <_malloc_r+0x14>
 800eed0:	230c      	movs	r3, #12
 800eed2:	602b      	str	r3, [r5, #0]
 800eed4:	2000      	movs	r0, #0
 800eed6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800eed8:	6821      	ldr	r1, [r4, #0]
 800eeda:	1bc9      	subs	r1, r1, r7
 800eedc:	d420      	bmi.n	800ef20 <_malloc_r+0xd0>
 800eede:	290b      	cmp	r1, #11
 800eee0:	d90a      	bls.n	800eef8 <_malloc_r+0xa8>
 800eee2:	19e2      	adds	r2, r4, r7
 800eee4:	6027      	str	r7, [r4, #0]
 800eee6:	42a3      	cmp	r3, r4
 800eee8:	d104      	bne.n	800eef4 <_malloc_r+0xa4>
 800eeea:	6032      	str	r2, [r6, #0]
 800eeec:	6863      	ldr	r3, [r4, #4]
 800eeee:	6011      	str	r1, [r2, #0]
 800eef0:	6053      	str	r3, [r2, #4]
 800eef2:	e005      	b.n	800ef00 <_malloc_r+0xb0>
 800eef4:	605a      	str	r2, [r3, #4]
 800eef6:	e7f9      	b.n	800eeec <_malloc_r+0x9c>
 800eef8:	6862      	ldr	r2, [r4, #4]
 800eefa:	42a3      	cmp	r3, r4
 800eefc:	d10e      	bne.n	800ef1c <_malloc_r+0xcc>
 800eefe:	6032      	str	r2, [r6, #0]
 800ef00:	0028      	movs	r0, r5
 800ef02:	f000 f83f 	bl	800ef84 <__malloc_unlock>
 800ef06:	0020      	movs	r0, r4
 800ef08:	2207      	movs	r2, #7
 800ef0a:	300b      	adds	r0, #11
 800ef0c:	1d23      	adds	r3, r4, #4
 800ef0e:	4390      	bics	r0, r2
 800ef10:	1ac2      	subs	r2, r0, r3
 800ef12:	4298      	cmp	r0, r3
 800ef14:	d0df      	beq.n	800eed6 <_malloc_r+0x86>
 800ef16:	1a1b      	subs	r3, r3, r0
 800ef18:	50a3      	str	r3, [r4, r2]
 800ef1a:	e7dc      	b.n	800eed6 <_malloc_r+0x86>
 800ef1c:	605a      	str	r2, [r3, #4]
 800ef1e:	e7ef      	b.n	800ef00 <_malloc_r+0xb0>
 800ef20:	0023      	movs	r3, r4
 800ef22:	6864      	ldr	r4, [r4, #4]
 800ef24:	e7a6      	b.n	800ee74 <_malloc_r+0x24>
 800ef26:	9c00      	ldr	r4, [sp, #0]
 800ef28:	6863      	ldr	r3, [r4, #4]
 800ef2a:	9300      	str	r3, [sp, #0]
 800ef2c:	e7ad      	b.n	800ee8a <_malloc_r+0x3a>
 800ef2e:	001a      	movs	r2, r3
 800ef30:	685b      	ldr	r3, [r3, #4]
 800ef32:	42a3      	cmp	r3, r4
 800ef34:	d1fb      	bne.n	800ef2e <_malloc_r+0xde>
 800ef36:	2300      	movs	r3, #0
 800ef38:	e7da      	b.n	800eef0 <_malloc_r+0xa0>
 800ef3a:	230c      	movs	r3, #12
 800ef3c:	0028      	movs	r0, r5
 800ef3e:	602b      	str	r3, [r5, #0]
 800ef40:	f000 f820 	bl	800ef84 <__malloc_unlock>
 800ef44:	e7c6      	b.n	800eed4 <_malloc_r+0x84>
 800ef46:	6007      	str	r7, [r0, #0]
 800ef48:	e7da      	b.n	800ef00 <_malloc_r+0xb0>
 800ef4a:	46c0      	nop			@ (mov r8, r8)
 800ef4c:	20001fa8 	.word	0x20001fa8

0800ef50 <__ascii_mbtowc>:
 800ef50:	b082      	sub	sp, #8
 800ef52:	2900      	cmp	r1, #0
 800ef54:	d100      	bne.n	800ef58 <__ascii_mbtowc+0x8>
 800ef56:	a901      	add	r1, sp, #4
 800ef58:	1e10      	subs	r0, r2, #0
 800ef5a:	d006      	beq.n	800ef6a <__ascii_mbtowc+0x1a>
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d006      	beq.n	800ef6e <__ascii_mbtowc+0x1e>
 800ef60:	7813      	ldrb	r3, [r2, #0]
 800ef62:	600b      	str	r3, [r1, #0]
 800ef64:	7810      	ldrb	r0, [r2, #0]
 800ef66:	1e43      	subs	r3, r0, #1
 800ef68:	4198      	sbcs	r0, r3
 800ef6a:	b002      	add	sp, #8
 800ef6c:	4770      	bx	lr
 800ef6e:	2002      	movs	r0, #2
 800ef70:	4240      	negs	r0, r0
 800ef72:	e7fa      	b.n	800ef6a <__ascii_mbtowc+0x1a>

0800ef74 <__malloc_lock>:
 800ef74:	b510      	push	{r4, lr}
 800ef76:	4802      	ldr	r0, [pc, #8]	@ (800ef80 <__malloc_lock+0xc>)
 800ef78:	f7ff fb93 	bl	800e6a2 <__retarget_lock_acquire_recursive>
 800ef7c:	bd10      	pop	{r4, pc}
 800ef7e:	46c0      	nop			@ (mov r8, r8)
 800ef80:	20001fa0 	.word	0x20001fa0

0800ef84 <__malloc_unlock>:
 800ef84:	b510      	push	{r4, lr}
 800ef86:	4802      	ldr	r0, [pc, #8]	@ (800ef90 <__malloc_unlock+0xc>)
 800ef88:	f7ff fb8c 	bl	800e6a4 <__retarget_lock_release_recursive>
 800ef8c:	bd10      	pop	{r4, pc}
 800ef8e:	46c0      	nop			@ (mov r8, r8)
 800ef90:	20001fa0 	.word	0x20001fa0

0800ef94 <_Balloc>:
 800ef94:	b570      	push	{r4, r5, r6, lr}
 800ef96:	69c5      	ldr	r5, [r0, #28]
 800ef98:	0006      	movs	r6, r0
 800ef9a:	000c      	movs	r4, r1
 800ef9c:	2d00      	cmp	r5, #0
 800ef9e:	d10e      	bne.n	800efbe <_Balloc+0x2a>
 800efa0:	2010      	movs	r0, #16
 800efa2:	f001 fabf 	bl	8010524 <malloc>
 800efa6:	1e02      	subs	r2, r0, #0
 800efa8:	61f0      	str	r0, [r6, #28]
 800efaa:	d104      	bne.n	800efb6 <_Balloc+0x22>
 800efac:	216b      	movs	r1, #107	@ 0x6b
 800efae:	4b19      	ldr	r3, [pc, #100]	@ (800f014 <_Balloc+0x80>)
 800efb0:	4819      	ldr	r0, [pc, #100]	@ (800f018 <_Balloc+0x84>)
 800efb2:	f001 fa6b 	bl	801048c <__assert_func>
 800efb6:	6045      	str	r5, [r0, #4]
 800efb8:	6085      	str	r5, [r0, #8]
 800efba:	6005      	str	r5, [r0, #0]
 800efbc:	60c5      	str	r5, [r0, #12]
 800efbe:	69f5      	ldr	r5, [r6, #28]
 800efc0:	68eb      	ldr	r3, [r5, #12]
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d013      	beq.n	800efee <_Balloc+0x5a>
 800efc6:	69f3      	ldr	r3, [r6, #28]
 800efc8:	00a2      	lsls	r2, r4, #2
 800efca:	68db      	ldr	r3, [r3, #12]
 800efcc:	189b      	adds	r3, r3, r2
 800efce:	6818      	ldr	r0, [r3, #0]
 800efd0:	2800      	cmp	r0, #0
 800efd2:	d118      	bne.n	800f006 <_Balloc+0x72>
 800efd4:	2101      	movs	r1, #1
 800efd6:	000d      	movs	r5, r1
 800efd8:	40a5      	lsls	r5, r4
 800efda:	1d6a      	adds	r2, r5, #5
 800efdc:	0030      	movs	r0, r6
 800efde:	0092      	lsls	r2, r2, #2
 800efe0:	f001 fa72 	bl	80104c8 <_calloc_r>
 800efe4:	2800      	cmp	r0, #0
 800efe6:	d00c      	beq.n	800f002 <_Balloc+0x6e>
 800efe8:	6044      	str	r4, [r0, #4]
 800efea:	6085      	str	r5, [r0, #8]
 800efec:	e00d      	b.n	800f00a <_Balloc+0x76>
 800efee:	2221      	movs	r2, #33	@ 0x21
 800eff0:	2104      	movs	r1, #4
 800eff2:	0030      	movs	r0, r6
 800eff4:	f001 fa68 	bl	80104c8 <_calloc_r>
 800eff8:	69f3      	ldr	r3, [r6, #28]
 800effa:	60e8      	str	r0, [r5, #12]
 800effc:	68db      	ldr	r3, [r3, #12]
 800effe:	2b00      	cmp	r3, #0
 800f000:	d1e1      	bne.n	800efc6 <_Balloc+0x32>
 800f002:	2000      	movs	r0, #0
 800f004:	bd70      	pop	{r4, r5, r6, pc}
 800f006:	6802      	ldr	r2, [r0, #0]
 800f008:	601a      	str	r2, [r3, #0]
 800f00a:	2300      	movs	r3, #0
 800f00c:	6103      	str	r3, [r0, #16]
 800f00e:	60c3      	str	r3, [r0, #12]
 800f010:	e7f8      	b.n	800f004 <_Balloc+0x70>
 800f012:	46c0      	nop			@ (mov r8, r8)
 800f014:	0801194a 	.word	0x0801194a
 800f018:	08011961 	.word	0x08011961

0800f01c <_Bfree>:
 800f01c:	b570      	push	{r4, r5, r6, lr}
 800f01e:	69c6      	ldr	r6, [r0, #28]
 800f020:	0005      	movs	r5, r0
 800f022:	000c      	movs	r4, r1
 800f024:	2e00      	cmp	r6, #0
 800f026:	d10e      	bne.n	800f046 <_Bfree+0x2a>
 800f028:	2010      	movs	r0, #16
 800f02a:	f001 fa7b 	bl	8010524 <malloc>
 800f02e:	1e02      	subs	r2, r0, #0
 800f030:	61e8      	str	r0, [r5, #28]
 800f032:	d104      	bne.n	800f03e <_Bfree+0x22>
 800f034:	218f      	movs	r1, #143	@ 0x8f
 800f036:	4b09      	ldr	r3, [pc, #36]	@ (800f05c <_Bfree+0x40>)
 800f038:	4809      	ldr	r0, [pc, #36]	@ (800f060 <_Bfree+0x44>)
 800f03a:	f001 fa27 	bl	801048c <__assert_func>
 800f03e:	6046      	str	r6, [r0, #4]
 800f040:	6086      	str	r6, [r0, #8]
 800f042:	6006      	str	r6, [r0, #0]
 800f044:	60c6      	str	r6, [r0, #12]
 800f046:	2c00      	cmp	r4, #0
 800f048:	d007      	beq.n	800f05a <_Bfree+0x3e>
 800f04a:	69eb      	ldr	r3, [r5, #28]
 800f04c:	6862      	ldr	r2, [r4, #4]
 800f04e:	68db      	ldr	r3, [r3, #12]
 800f050:	0092      	lsls	r2, r2, #2
 800f052:	189b      	adds	r3, r3, r2
 800f054:	681a      	ldr	r2, [r3, #0]
 800f056:	6022      	str	r2, [r4, #0]
 800f058:	601c      	str	r4, [r3, #0]
 800f05a:	bd70      	pop	{r4, r5, r6, pc}
 800f05c:	0801194a 	.word	0x0801194a
 800f060:	08011961 	.word	0x08011961

0800f064 <__multadd>:
 800f064:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f066:	000f      	movs	r7, r1
 800f068:	9001      	str	r0, [sp, #4]
 800f06a:	000c      	movs	r4, r1
 800f06c:	001e      	movs	r6, r3
 800f06e:	2000      	movs	r0, #0
 800f070:	690d      	ldr	r5, [r1, #16]
 800f072:	3714      	adds	r7, #20
 800f074:	683b      	ldr	r3, [r7, #0]
 800f076:	3001      	adds	r0, #1
 800f078:	b299      	uxth	r1, r3
 800f07a:	4351      	muls	r1, r2
 800f07c:	0c1b      	lsrs	r3, r3, #16
 800f07e:	4353      	muls	r3, r2
 800f080:	1989      	adds	r1, r1, r6
 800f082:	0c0e      	lsrs	r6, r1, #16
 800f084:	199b      	adds	r3, r3, r6
 800f086:	0c1e      	lsrs	r6, r3, #16
 800f088:	b289      	uxth	r1, r1
 800f08a:	041b      	lsls	r3, r3, #16
 800f08c:	185b      	adds	r3, r3, r1
 800f08e:	c708      	stmia	r7!, {r3}
 800f090:	4285      	cmp	r5, r0
 800f092:	dcef      	bgt.n	800f074 <__multadd+0x10>
 800f094:	2e00      	cmp	r6, #0
 800f096:	d022      	beq.n	800f0de <__multadd+0x7a>
 800f098:	68a3      	ldr	r3, [r4, #8]
 800f09a:	42ab      	cmp	r3, r5
 800f09c:	dc19      	bgt.n	800f0d2 <__multadd+0x6e>
 800f09e:	6861      	ldr	r1, [r4, #4]
 800f0a0:	9801      	ldr	r0, [sp, #4]
 800f0a2:	3101      	adds	r1, #1
 800f0a4:	f7ff ff76 	bl	800ef94 <_Balloc>
 800f0a8:	1e07      	subs	r7, r0, #0
 800f0aa:	d105      	bne.n	800f0b8 <__multadd+0x54>
 800f0ac:	003a      	movs	r2, r7
 800f0ae:	21ba      	movs	r1, #186	@ 0xba
 800f0b0:	4b0c      	ldr	r3, [pc, #48]	@ (800f0e4 <__multadd+0x80>)
 800f0b2:	480d      	ldr	r0, [pc, #52]	@ (800f0e8 <__multadd+0x84>)
 800f0b4:	f001 f9ea 	bl	801048c <__assert_func>
 800f0b8:	0021      	movs	r1, r4
 800f0ba:	6922      	ldr	r2, [r4, #16]
 800f0bc:	310c      	adds	r1, #12
 800f0be:	3202      	adds	r2, #2
 800f0c0:	0092      	lsls	r2, r2, #2
 800f0c2:	300c      	adds	r0, #12
 800f0c4:	f7ff faef 	bl	800e6a6 <memcpy>
 800f0c8:	0021      	movs	r1, r4
 800f0ca:	9801      	ldr	r0, [sp, #4]
 800f0cc:	f7ff ffa6 	bl	800f01c <_Bfree>
 800f0d0:	003c      	movs	r4, r7
 800f0d2:	1d2b      	adds	r3, r5, #4
 800f0d4:	009b      	lsls	r3, r3, #2
 800f0d6:	18e3      	adds	r3, r4, r3
 800f0d8:	3501      	adds	r5, #1
 800f0da:	605e      	str	r6, [r3, #4]
 800f0dc:	6125      	str	r5, [r4, #16]
 800f0de:	0020      	movs	r0, r4
 800f0e0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f0e2:	46c0      	nop			@ (mov r8, r8)
 800f0e4:	080118d9 	.word	0x080118d9
 800f0e8:	08011961 	.word	0x08011961

0800f0ec <__s2b>:
 800f0ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f0ee:	0007      	movs	r7, r0
 800f0f0:	0018      	movs	r0, r3
 800f0f2:	000c      	movs	r4, r1
 800f0f4:	3008      	adds	r0, #8
 800f0f6:	2109      	movs	r1, #9
 800f0f8:	9301      	str	r3, [sp, #4]
 800f0fa:	0015      	movs	r5, r2
 800f0fc:	f7f1 f8b2 	bl	8000264 <__divsi3>
 800f100:	2301      	movs	r3, #1
 800f102:	2100      	movs	r1, #0
 800f104:	4283      	cmp	r3, r0
 800f106:	db0a      	blt.n	800f11e <__s2b+0x32>
 800f108:	0038      	movs	r0, r7
 800f10a:	f7ff ff43 	bl	800ef94 <_Balloc>
 800f10e:	1e01      	subs	r1, r0, #0
 800f110:	d108      	bne.n	800f124 <__s2b+0x38>
 800f112:	000a      	movs	r2, r1
 800f114:	4b19      	ldr	r3, [pc, #100]	@ (800f17c <__s2b+0x90>)
 800f116:	481a      	ldr	r0, [pc, #104]	@ (800f180 <__s2b+0x94>)
 800f118:	31d3      	adds	r1, #211	@ 0xd3
 800f11a:	f001 f9b7 	bl	801048c <__assert_func>
 800f11e:	005b      	lsls	r3, r3, #1
 800f120:	3101      	adds	r1, #1
 800f122:	e7ef      	b.n	800f104 <__s2b+0x18>
 800f124:	9b08      	ldr	r3, [sp, #32]
 800f126:	6143      	str	r3, [r0, #20]
 800f128:	2301      	movs	r3, #1
 800f12a:	6103      	str	r3, [r0, #16]
 800f12c:	2d09      	cmp	r5, #9
 800f12e:	dd18      	ble.n	800f162 <__s2b+0x76>
 800f130:	0023      	movs	r3, r4
 800f132:	3309      	adds	r3, #9
 800f134:	001e      	movs	r6, r3
 800f136:	9300      	str	r3, [sp, #0]
 800f138:	1964      	adds	r4, r4, r5
 800f13a:	7833      	ldrb	r3, [r6, #0]
 800f13c:	220a      	movs	r2, #10
 800f13e:	0038      	movs	r0, r7
 800f140:	3b30      	subs	r3, #48	@ 0x30
 800f142:	f7ff ff8f 	bl	800f064 <__multadd>
 800f146:	3601      	adds	r6, #1
 800f148:	0001      	movs	r1, r0
 800f14a:	42a6      	cmp	r6, r4
 800f14c:	d1f5      	bne.n	800f13a <__s2b+0x4e>
 800f14e:	002c      	movs	r4, r5
 800f150:	9b00      	ldr	r3, [sp, #0]
 800f152:	3c08      	subs	r4, #8
 800f154:	191c      	adds	r4, r3, r4
 800f156:	002e      	movs	r6, r5
 800f158:	9b01      	ldr	r3, [sp, #4]
 800f15a:	429e      	cmp	r6, r3
 800f15c:	db04      	blt.n	800f168 <__s2b+0x7c>
 800f15e:	0008      	movs	r0, r1
 800f160:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f162:	2509      	movs	r5, #9
 800f164:	340a      	adds	r4, #10
 800f166:	e7f6      	b.n	800f156 <__s2b+0x6a>
 800f168:	1b63      	subs	r3, r4, r5
 800f16a:	5d9b      	ldrb	r3, [r3, r6]
 800f16c:	220a      	movs	r2, #10
 800f16e:	0038      	movs	r0, r7
 800f170:	3b30      	subs	r3, #48	@ 0x30
 800f172:	f7ff ff77 	bl	800f064 <__multadd>
 800f176:	3601      	adds	r6, #1
 800f178:	0001      	movs	r1, r0
 800f17a:	e7ed      	b.n	800f158 <__s2b+0x6c>
 800f17c:	080118d9 	.word	0x080118d9
 800f180:	08011961 	.word	0x08011961

0800f184 <__hi0bits>:
 800f184:	2280      	movs	r2, #128	@ 0x80
 800f186:	0003      	movs	r3, r0
 800f188:	0252      	lsls	r2, r2, #9
 800f18a:	2000      	movs	r0, #0
 800f18c:	4293      	cmp	r3, r2
 800f18e:	d201      	bcs.n	800f194 <__hi0bits+0x10>
 800f190:	041b      	lsls	r3, r3, #16
 800f192:	3010      	adds	r0, #16
 800f194:	2280      	movs	r2, #128	@ 0x80
 800f196:	0452      	lsls	r2, r2, #17
 800f198:	4293      	cmp	r3, r2
 800f19a:	d201      	bcs.n	800f1a0 <__hi0bits+0x1c>
 800f19c:	3008      	adds	r0, #8
 800f19e:	021b      	lsls	r3, r3, #8
 800f1a0:	2280      	movs	r2, #128	@ 0x80
 800f1a2:	0552      	lsls	r2, r2, #21
 800f1a4:	4293      	cmp	r3, r2
 800f1a6:	d201      	bcs.n	800f1ac <__hi0bits+0x28>
 800f1a8:	3004      	adds	r0, #4
 800f1aa:	011b      	lsls	r3, r3, #4
 800f1ac:	2280      	movs	r2, #128	@ 0x80
 800f1ae:	05d2      	lsls	r2, r2, #23
 800f1b0:	4293      	cmp	r3, r2
 800f1b2:	d201      	bcs.n	800f1b8 <__hi0bits+0x34>
 800f1b4:	3002      	adds	r0, #2
 800f1b6:	009b      	lsls	r3, r3, #2
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	db03      	blt.n	800f1c4 <__hi0bits+0x40>
 800f1bc:	3001      	adds	r0, #1
 800f1be:	4213      	tst	r3, r2
 800f1c0:	d100      	bne.n	800f1c4 <__hi0bits+0x40>
 800f1c2:	2020      	movs	r0, #32
 800f1c4:	4770      	bx	lr

0800f1c6 <__lo0bits>:
 800f1c6:	6803      	ldr	r3, [r0, #0]
 800f1c8:	0001      	movs	r1, r0
 800f1ca:	2207      	movs	r2, #7
 800f1cc:	0018      	movs	r0, r3
 800f1ce:	4010      	ands	r0, r2
 800f1d0:	4213      	tst	r3, r2
 800f1d2:	d00d      	beq.n	800f1f0 <__lo0bits+0x2a>
 800f1d4:	3a06      	subs	r2, #6
 800f1d6:	2000      	movs	r0, #0
 800f1d8:	4213      	tst	r3, r2
 800f1da:	d105      	bne.n	800f1e8 <__lo0bits+0x22>
 800f1dc:	3002      	adds	r0, #2
 800f1de:	4203      	tst	r3, r0
 800f1e0:	d003      	beq.n	800f1ea <__lo0bits+0x24>
 800f1e2:	40d3      	lsrs	r3, r2
 800f1e4:	0010      	movs	r0, r2
 800f1e6:	600b      	str	r3, [r1, #0]
 800f1e8:	4770      	bx	lr
 800f1ea:	089b      	lsrs	r3, r3, #2
 800f1ec:	600b      	str	r3, [r1, #0]
 800f1ee:	e7fb      	b.n	800f1e8 <__lo0bits+0x22>
 800f1f0:	b29a      	uxth	r2, r3
 800f1f2:	2a00      	cmp	r2, #0
 800f1f4:	d101      	bne.n	800f1fa <__lo0bits+0x34>
 800f1f6:	2010      	movs	r0, #16
 800f1f8:	0c1b      	lsrs	r3, r3, #16
 800f1fa:	b2da      	uxtb	r2, r3
 800f1fc:	2a00      	cmp	r2, #0
 800f1fe:	d101      	bne.n	800f204 <__lo0bits+0x3e>
 800f200:	3008      	adds	r0, #8
 800f202:	0a1b      	lsrs	r3, r3, #8
 800f204:	071a      	lsls	r2, r3, #28
 800f206:	d101      	bne.n	800f20c <__lo0bits+0x46>
 800f208:	3004      	adds	r0, #4
 800f20a:	091b      	lsrs	r3, r3, #4
 800f20c:	079a      	lsls	r2, r3, #30
 800f20e:	d101      	bne.n	800f214 <__lo0bits+0x4e>
 800f210:	3002      	adds	r0, #2
 800f212:	089b      	lsrs	r3, r3, #2
 800f214:	07da      	lsls	r2, r3, #31
 800f216:	d4e9      	bmi.n	800f1ec <__lo0bits+0x26>
 800f218:	3001      	adds	r0, #1
 800f21a:	085b      	lsrs	r3, r3, #1
 800f21c:	d1e6      	bne.n	800f1ec <__lo0bits+0x26>
 800f21e:	2020      	movs	r0, #32
 800f220:	e7e2      	b.n	800f1e8 <__lo0bits+0x22>
	...

0800f224 <__i2b>:
 800f224:	b510      	push	{r4, lr}
 800f226:	000c      	movs	r4, r1
 800f228:	2101      	movs	r1, #1
 800f22a:	f7ff feb3 	bl	800ef94 <_Balloc>
 800f22e:	2800      	cmp	r0, #0
 800f230:	d107      	bne.n	800f242 <__i2b+0x1e>
 800f232:	2146      	movs	r1, #70	@ 0x46
 800f234:	4c05      	ldr	r4, [pc, #20]	@ (800f24c <__i2b+0x28>)
 800f236:	0002      	movs	r2, r0
 800f238:	4b05      	ldr	r3, [pc, #20]	@ (800f250 <__i2b+0x2c>)
 800f23a:	0020      	movs	r0, r4
 800f23c:	31ff      	adds	r1, #255	@ 0xff
 800f23e:	f001 f925 	bl	801048c <__assert_func>
 800f242:	2301      	movs	r3, #1
 800f244:	6144      	str	r4, [r0, #20]
 800f246:	6103      	str	r3, [r0, #16]
 800f248:	bd10      	pop	{r4, pc}
 800f24a:	46c0      	nop			@ (mov r8, r8)
 800f24c:	08011961 	.word	0x08011961
 800f250:	080118d9 	.word	0x080118d9

0800f254 <__multiply>:
 800f254:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f256:	0014      	movs	r4, r2
 800f258:	690a      	ldr	r2, [r1, #16]
 800f25a:	6923      	ldr	r3, [r4, #16]
 800f25c:	000d      	movs	r5, r1
 800f25e:	b08b      	sub	sp, #44	@ 0x2c
 800f260:	429a      	cmp	r2, r3
 800f262:	db02      	blt.n	800f26a <__multiply+0x16>
 800f264:	0023      	movs	r3, r4
 800f266:	000c      	movs	r4, r1
 800f268:	001d      	movs	r5, r3
 800f26a:	6927      	ldr	r7, [r4, #16]
 800f26c:	692e      	ldr	r6, [r5, #16]
 800f26e:	6861      	ldr	r1, [r4, #4]
 800f270:	19bb      	adds	r3, r7, r6
 800f272:	9303      	str	r3, [sp, #12]
 800f274:	68a3      	ldr	r3, [r4, #8]
 800f276:	19ba      	adds	r2, r7, r6
 800f278:	4293      	cmp	r3, r2
 800f27a:	da00      	bge.n	800f27e <__multiply+0x2a>
 800f27c:	3101      	adds	r1, #1
 800f27e:	f7ff fe89 	bl	800ef94 <_Balloc>
 800f282:	9002      	str	r0, [sp, #8]
 800f284:	2800      	cmp	r0, #0
 800f286:	d106      	bne.n	800f296 <__multiply+0x42>
 800f288:	21b1      	movs	r1, #177	@ 0xb1
 800f28a:	4b49      	ldr	r3, [pc, #292]	@ (800f3b0 <__multiply+0x15c>)
 800f28c:	4849      	ldr	r0, [pc, #292]	@ (800f3b4 <__multiply+0x160>)
 800f28e:	9a02      	ldr	r2, [sp, #8]
 800f290:	0049      	lsls	r1, r1, #1
 800f292:	f001 f8fb 	bl	801048c <__assert_func>
 800f296:	9b02      	ldr	r3, [sp, #8]
 800f298:	2200      	movs	r2, #0
 800f29a:	3314      	adds	r3, #20
 800f29c:	469c      	mov	ip, r3
 800f29e:	19bb      	adds	r3, r7, r6
 800f2a0:	009b      	lsls	r3, r3, #2
 800f2a2:	4463      	add	r3, ip
 800f2a4:	9304      	str	r3, [sp, #16]
 800f2a6:	4663      	mov	r3, ip
 800f2a8:	9904      	ldr	r1, [sp, #16]
 800f2aa:	428b      	cmp	r3, r1
 800f2ac:	d32a      	bcc.n	800f304 <__multiply+0xb0>
 800f2ae:	0023      	movs	r3, r4
 800f2b0:	00bf      	lsls	r7, r7, #2
 800f2b2:	3314      	adds	r3, #20
 800f2b4:	3514      	adds	r5, #20
 800f2b6:	9308      	str	r3, [sp, #32]
 800f2b8:	00b6      	lsls	r6, r6, #2
 800f2ba:	19db      	adds	r3, r3, r7
 800f2bc:	9305      	str	r3, [sp, #20]
 800f2be:	19ab      	adds	r3, r5, r6
 800f2c0:	9309      	str	r3, [sp, #36]	@ 0x24
 800f2c2:	2304      	movs	r3, #4
 800f2c4:	9306      	str	r3, [sp, #24]
 800f2c6:	0023      	movs	r3, r4
 800f2c8:	9a05      	ldr	r2, [sp, #20]
 800f2ca:	3315      	adds	r3, #21
 800f2cc:	9501      	str	r5, [sp, #4]
 800f2ce:	429a      	cmp	r2, r3
 800f2d0:	d305      	bcc.n	800f2de <__multiply+0x8a>
 800f2d2:	1b13      	subs	r3, r2, r4
 800f2d4:	3b15      	subs	r3, #21
 800f2d6:	089b      	lsrs	r3, r3, #2
 800f2d8:	3301      	adds	r3, #1
 800f2da:	009b      	lsls	r3, r3, #2
 800f2dc:	9306      	str	r3, [sp, #24]
 800f2de:	9b01      	ldr	r3, [sp, #4]
 800f2e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f2e2:	4293      	cmp	r3, r2
 800f2e4:	d310      	bcc.n	800f308 <__multiply+0xb4>
 800f2e6:	9b03      	ldr	r3, [sp, #12]
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	dd05      	ble.n	800f2f8 <__multiply+0xa4>
 800f2ec:	9b04      	ldr	r3, [sp, #16]
 800f2ee:	3b04      	subs	r3, #4
 800f2f0:	9304      	str	r3, [sp, #16]
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d056      	beq.n	800f3a6 <__multiply+0x152>
 800f2f8:	9b02      	ldr	r3, [sp, #8]
 800f2fa:	9a03      	ldr	r2, [sp, #12]
 800f2fc:	0018      	movs	r0, r3
 800f2fe:	611a      	str	r2, [r3, #16]
 800f300:	b00b      	add	sp, #44	@ 0x2c
 800f302:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f304:	c304      	stmia	r3!, {r2}
 800f306:	e7cf      	b.n	800f2a8 <__multiply+0x54>
 800f308:	9b01      	ldr	r3, [sp, #4]
 800f30a:	6818      	ldr	r0, [r3, #0]
 800f30c:	b280      	uxth	r0, r0
 800f30e:	2800      	cmp	r0, #0
 800f310:	d01e      	beq.n	800f350 <__multiply+0xfc>
 800f312:	4667      	mov	r7, ip
 800f314:	2500      	movs	r5, #0
 800f316:	9e08      	ldr	r6, [sp, #32]
 800f318:	ce02      	ldmia	r6!, {r1}
 800f31a:	683b      	ldr	r3, [r7, #0]
 800f31c:	9307      	str	r3, [sp, #28]
 800f31e:	b28b      	uxth	r3, r1
 800f320:	4343      	muls	r3, r0
 800f322:	001a      	movs	r2, r3
 800f324:	466b      	mov	r3, sp
 800f326:	0c09      	lsrs	r1, r1, #16
 800f328:	8b9b      	ldrh	r3, [r3, #28]
 800f32a:	4341      	muls	r1, r0
 800f32c:	18d3      	adds	r3, r2, r3
 800f32e:	9a07      	ldr	r2, [sp, #28]
 800f330:	195b      	adds	r3, r3, r5
 800f332:	0c12      	lsrs	r2, r2, #16
 800f334:	1889      	adds	r1, r1, r2
 800f336:	0c1a      	lsrs	r2, r3, #16
 800f338:	188a      	adds	r2, r1, r2
 800f33a:	b29b      	uxth	r3, r3
 800f33c:	0c15      	lsrs	r5, r2, #16
 800f33e:	0412      	lsls	r2, r2, #16
 800f340:	431a      	orrs	r2, r3
 800f342:	9b05      	ldr	r3, [sp, #20]
 800f344:	c704      	stmia	r7!, {r2}
 800f346:	42b3      	cmp	r3, r6
 800f348:	d8e6      	bhi.n	800f318 <__multiply+0xc4>
 800f34a:	4663      	mov	r3, ip
 800f34c:	9a06      	ldr	r2, [sp, #24]
 800f34e:	509d      	str	r5, [r3, r2]
 800f350:	9b01      	ldr	r3, [sp, #4]
 800f352:	6818      	ldr	r0, [r3, #0]
 800f354:	0c00      	lsrs	r0, r0, #16
 800f356:	d020      	beq.n	800f39a <__multiply+0x146>
 800f358:	4663      	mov	r3, ip
 800f35a:	0025      	movs	r5, r4
 800f35c:	4661      	mov	r1, ip
 800f35e:	2700      	movs	r7, #0
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	3514      	adds	r5, #20
 800f364:	682a      	ldr	r2, [r5, #0]
 800f366:	680e      	ldr	r6, [r1, #0]
 800f368:	b292      	uxth	r2, r2
 800f36a:	4342      	muls	r2, r0
 800f36c:	0c36      	lsrs	r6, r6, #16
 800f36e:	1992      	adds	r2, r2, r6
 800f370:	19d2      	adds	r2, r2, r7
 800f372:	0416      	lsls	r6, r2, #16
 800f374:	b29b      	uxth	r3, r3
 800f376:	431e      	orrs	r6, r3
 800f378:	600e      	str	r6, [r1, #0]
 800f37a:	cd40      	ldmia	r5!, {r6}
 800f37c:	684b      	ldr	r3, [r1, #4]
 800f37e:	0c36      	lsrs	r6, r6, #16
 800f380:	4346      	muls	r6, r0
 800f382:	b29b      	uxth	r3, r3
 800f384:	0c12      	lsrs	r2, r2, #16
 800f386:	18f3      	adds	r3, r6, r3
 800f388:	189b      	adds	r3, r3, r2
 800f38a:	9a05      	ldr	r2, [sp, #20]
 800f38c:	0c1f      	lsrs	r7, r3, #16
 800f38e:	3104      	adds	r1, #4
 800f390:	42aa      	cmp	r2, r5
 800f392:	d8e7      	bhi.n	800f364 <__multiply+0x110>
 800f394:	4662      	mov	r2, ip
 800f396:	9906      	ldr	r1, [sp, #24]
 800f398:	5053      	str	r3, [r2, r1]
 800f39a:	9b01      	ldr	r3, [sp, #4]
 800f39c:	3304      	adds	r3, #4
 800f39e:	9301      	str	r3, [sp, #4]
 800f3a0:	2304      	movs	r3, #4
 800f3a2:	449c      	add	ip, r3
 800f3a4:	e79b      	b.n	800f2de <__multiply+0x8a>
 800f3a6:	9b03      	ldr	r3, [sp, #12]
 800f3a8:	3b01      	subs	r3, #1
 800f3aa:	9303      	str	r3, [sp, #12]
 800f3ac:	e79b      	b.n	800f2e6 <__multiply+0x92>
 800f3ae:	46c0      	nop			@ (mov r8, r8)
 800f3b0:	080118d9 	.word	0x080118d9
 800f3b4:	08011961 	.word	0x08011961

0800f3b8 <__pow5mult>:
 800f3b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f3ba:	2303      	movs	r3, #3
 800f3bc:	0015      	movs	r5, r2
 800f3be:	0007      	movs	r7, r0
 800f3c0:	000e      	movs	r6, r1
 800f3c2:	401a      	ands	r2, r3
 800f3c4:	421d      	tst	r5, r3
 800f3c6:	d008      	beq.n	800f3da <__pow5mult+0x22>
 800f3c8:	4925      	ldr	r1, [pc, #148]	@ (800f460 <__pow5mult+0xa8>)
 800f3ca:	3a01      	subs	r2, #1
 800f3cc:	0092      	lsls	r2, r2, #2
 800f3ce:	5852      	ldr	r2, [r2, r1]
 800f3d0:	2300      	movs	r3, #0
 800f3d2:	0031      	movs	r1, r6
 800f3d4:	f7ff fe46 	bl	800f064 <__multadd>
 800f3d8:	0006      	movs	r6, r0
 800f3da:	10ad      	asrs	r5, r5, #2
 800f3dc:	d03d      	beq.n	800f45a <__pow5mult+0xa2>
 800f3de:	69fc      	ldr	r4, [r7, #28]
 800f3e0:	2c00      	cmp	r4, #0
 800f3e2:	d10f      	bne.n	800f404 <__pow5mult+0x4c>
 800f3e4:	2010      	movs	r0, #16
 800f3e6:	f001 f89d 	bl	8010524 <malloc>
 800f3ea:	1e02      	subs	r2, r0, #0
 800f3ec:	61f8      	str	r0, [r7, #28]
 800f3ee:	d105      	bne.n	800f3fc <__pow5mult+0x44>
 800f3f0:	21b4      	movs	r1, #180	@ 0xb4
 800f3f2:	4b1c      	ldr	r3, [pc, #112]	@ (800f464 <__pow5mult+0xac>)
 800f3f4:	481c      	ldr	r0, [pc, #112]	@ (800f468 <__pow5mult+0xb0>)
 800f3f6:	31ff      	adds	r1, #255	@ 0xff
 800f3f8:	f001 f848 	bl	801048c <__assert_func>
 800f3fc:	6044      	str	r4, [r0, #4]
 800f3fe:	6084      	str	r4, [r0, #8]
 800f400:	6004      	str	r4, [r0, #0]
 800f402:	60c4      	str	r4, [r0, #12]
 800f404:	69fb      	ldr	r3, [r7, #28]
 800f406:	689c      	ldr	r4, [r3, #8]
 800f408:	9301      	str	r3, [sp, #4]
 800f40a:	2c00      	cmp	r4, #0
 800f40c:	d108      	bne.n	800f420 <__pow5mult+0x68>
 800f40e:	0038      	movs	r0, r7
 800f410:	4916      	ldr	r1, [pc, #88]	@ (800f46c <__pow5mult+0xb4>)
 800f412:	f7ff ff07 	bl	800f224 <__i2b>
 800f416:	9b01      	ldr	r3, [sp, #4]
 800f418:	0004      	movs	r4, r0
 800f41a:	6098      	str	r0, [r3, #8]
 800f41c:	2300      	movs	r3, #0
 800f41e:	6003      	str	r3, [r0, #0]
 800f420:	2301      	movs	r3, #1
 800f422:	421d      	tst	r5, r3
 800f424:	d00a      	beq.n	800f43c <__pow5mult+0x84>
 800f426:	0031      	movs	r1, r6
 800f428:	0022      	movs	r2, r4
 800f42a:	0038      	movs	r0, r7
 800f42c:	f7ff ff12 	bl	800f254 <__multiply>
 800f430:	0031      	movs	r1, r6
 800f432:	9001      	str	r0, [sp, #4]
 800f434:	0038      	movs	r0, r7
 800f436:	f7ff fdf1 	bl	800f01c <_Bfree>
 800f43a:	9e01      	ldr	r6, [sp, #4]
 800f43c:	106d      	asrs	r5, r5, #1
 800f43e:	d00c      	beq.n	800f45a <__pow5mult+0xa2>
 800f440:	6820      	ldr	r0, [r4, #0]
 800f442:	2800      	cmp	r0, #0
 800f444:	d107      	bne.n	800f456 <__pow5mult+0x9e>
 800f446:	0022      	movs	r2, r4
 800f448:	0021      	movs	r1, r4
 800f44a:	0038      	movs	r0, r7
 800f44c:	f7ff ff02 	bl	800f254 <__multiply>
 800f450:	2300      	movs	r3, #0
 800f452:	6020      	str	r0, [r4, #0]
 800f454:	6003      	str	r3, [r0, #0]
 800f456:	0004      	movs	r4, r0
 800f458:	e7e2      	b.n	800f420 <__pow5mult+0x68>
 800f45a:	0030      	movs	r0, r6
 800f45c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f45e:	46c0      	nop			@ (mov r8, r8)
 800f460:	080119bc 	.word	0x080119bc
 800f464:	0801194a 	.word	0x0801194a
 800f468:	08011961 	.word	0x08011961
 800f46c:	00000271 	.word	0x00000271

0800f470 <__lshift>:
 800f470:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f472:	000c      	movs	r4, r1
 800f474:	0016      	movs	r6, r2
 800f476:	6923      	ldr	r3, [r4, #16]
 800f478:	1157      	asrs	r7, r2, #5
 800f47a:	b085      	sub	sp, #20
 800f47c:	18fb      	adds	r3, r7, r3
 800f47e:	9301      	str	r3, [sp, #4]
 800f480:	3301      	adds	r3, #1
 800f482:	9300      	str	r3, [sp, #0]
 800f484:	6849      	ldr	r1, [r1, #4]
 800f486:	68a3      	ldr	r3, [r4, #8]
 800f488:	9002      	str	r0, [sp, #8]
 800f48a:	9a00      	ldr	r2, [sp, #0]
 800f48c:	4293      	cmp	r3, r2
 800f48e:	db10      	blt.n	800f4b2 <__lshift+0x42>
 800f490:	9802      	ldr	r0, [sp, #8]
 800f492:	f7ff fd7f 	bl	800ef94 <_Balloc>
 800f496:	2300      	movs	r3, #0
 800f498:	0001      	movs	r1, r0
 800f49a:	0005      	movs	r5, r0
 800f49c:	001a      	movs	r2, r3
 800f49e:	3114      	adds	r1, #20
 800f4a0:	4298      	cmp	r0, r3
 800f4a2:	d10c      	bne.n	800f4be <__lshift+0x4e>
 800f4a4:	21ef      	movs	r1, #239	@ 0xef
 800f4a6:	002a      	movs	r2, r5
 800f4a8:	4b25      	ldr	r3, [pc, #148]	@ (800f540 <__lshift+0xd0>)
 800f4aa:	4826      	ldr	r0, [pc, #152]	@ (800f544 <__lshift+0xd4>)
 800f4ac:	0049      	lsls	r1, r1, #1
 800f4ae:	f000 ffed 	bl	801048c <__assert_func>
 800f4b2:	3101      	adds	r1, #1
 800f4b4:	005b      	lsls	r3, r3, #1
 800f4b6:	e7e8      	b.n	800f48a <__lshift+0x1a>
 800f4b8:	0098      	lsls	r0, r3, #2
 800f4ba:	500a      	str	r2, [r1, r0]
 800f4bc:	3301      	adds	r3, #1
 800f4be:	42bb      	cmp	r3, r7
 800f4c0:	dbfa      	blt.n	800f4b8 <__lshift+0x48>
 800f4c2:	43fb      	mvns	r3, r7
 800f4c4:	17db      	asrs	r3, r3, #31
 800f4c6:	401f      	ands	r7, r3
 800f4c8:	00bf      	lsls	r7, r7, #2
 800f4ca:	0023      	movs	r3, r4
 800f4cc:	201f      	movs	r0, #31
 800f4ce:	19c9      	adds	r1, r1, r7
 800f4d0:	0037      	movs	r7, r6
 800f4d2:	6922      	ldr	r2, [r4, #16]
 800f4d4:	3314      	adds	r3, #20
 800f4d6:	0092      	lsls	r2, r2, #2
 800f4d8:	189a      	adds	r2, r3, r2
 800f4da:	4007      	ands	r7, r0
 800f4dc:	4206      	tst	r6, r0
 800f4de:	d029      	beq.n	800f534 <__lshift+0xc4>
 800f4e0:	3001      	adds	r0, #1
 800f4e2:	1bc0      	subs	r0, r0, r7
 800f4e4:	9003      	str	r0, [sp, #12]
 800f4e6:	468c      	mov	ip, r1
 800f4e8:	2000      	movs	r0, #0
 800f4ea:	681e      	ldr	r6, [r3, #0]
 800f4ec:	40be      	lsls	r6, r7
 800f4ee:	4306      	orrs	r6, r0
 800f4f0:	4660      	mov	r0, ip
 800f4f2:	c040      	stmia	r0!, {r6}
 800f4f4:	4684      	mov	ip, r0
 800f4f6:	9e03      	ldr	r6, [sp, #12]
 800f4f8:	cb01      	ldmia	r3!, {r0}
 800f4fa:	40f0      	lsrs	r0, r6
 800f4fc:	429a      	cmp	r2, r3
 800f4fe:	d8f4      	bhi.n	800f4ea <__lshift+0x7a>
 800f500:	0026      	movs	r6, r4
 800f502:	3615      	adds	r6, #21
 800f504:	2304      	movs	r3, #4
 800f506:	42b2      	cmp	r2, r6
 800f508:	d304      	bcc.n	800f514 <__lshift+0xa4>
 800f50a:	1b13      	subs	r3, r2, r4
 800f50c:	3b15      	subs	r3, #21
 800f50e:	089b      	lsrs	r3, r3, #2
 800f510:	3301      	adds	r3, #1
 800f512:	009b      	lsls	r3, r3, #2
 800f514:	50c8      	str	r0, [r1, r3]
 800f516:	2800      	cmp	r0, #0
 800f518:	d002      	beq.n	800f520 <__lshift+0xb0>
 800f51a:	9b01      	ldr	r3, [sp, #4]
 800f51c:	3302      	adds	r3, #2
 800f51e:	9300      	str	r3, [sp, #0]
 800f520:	9b00      	ldr	r3, [sp, #0]
 800f522:	9802      	ldr	r0, [sp, #8]
 800f524:	3b01      	subs	r3, #1
 800f526:	0021      	movs	r1, r4
 800f528:	612b      	str	r3, [r5, #16]
 800f52a:	f7ff fd77 	bl	800f01c <_Bfree>
 800f52e:	0028      	movs	r0, r5
 800f530:	b005      	add	sp, #20
 800f532:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f534:	cb01      	ldmia	r3!, {r0}
 800f536:	c101      	stmia	r1!, {r0}
 800f538:	429a      	cmp	r2, r3
 800f53a:	d8fb      	bhi.n	800f534 <__lshift+0xc4>
 800f53c:	e7f0      	b.n	800f520 <__lshift+0xb0>
 800f53e:	46c0      	nop			@ (mov r8, r8)
 800f540:	080118d9 	.word	0x080118d9
 800f544:	08011961 	.word	0x08011961

0800f548 <__mcmp>:
 800f548:	b530      	push	{r4, r5, lr}
 800f54a:	690b      	ldr	r3, [r1, #16]
 800f54c:	6904      	ldr	r4, [r0, #16]
 800f54e:	0002      	movs	r2, r0
 800f550:	1ae0      	subs	r0, r4, r3
 800f552:	429c      	cmp	r4, r3
 800f554:	d10f      	bne.n	800f576 <__mcmp+0x2e>
 800f556:	3214      	adds	r2, #20
 800f558:	009b      	lsls	r3, r3, #2
 800f55a:	3114      	adds	r1, #20
 800f55c:	0014      	movs	r4, r2
 800f55e:	18c9      	adds	r1, r1, r3
 800f560:	18d2      	adds	r2, r2, r3
 800f562:	3a04      	subs	r2, #4
 800f564:	3904      	subs	r1, #4
 800f566:	6815      	ldr	r5, [r2, #0]
 800f568:	680b      	ldr	r3, [r1, #0]
 800f56a:	429d      	cmp	r5, r3
 800f56c:	d004      	beq.n	800f578 <__mcmp+0x30>
 800f56e:	2001      	movs	r0, #1
 800f570:	429d      	cmp	r5, r3
 800f572:	d200      	bcs.n	800f576 <__mcmp+0x2e>
 800f574:	3802      	subs	r0, #2
 800f576:	bd30      	pop	{r4, r5, pc}
 800f578:	4294      	cmp	r4, r2
 800f57a:	d3f2      	bcc.n	800f562 <__mcmp+0x1a>
 800f57c:	e7fb      	b.n	800f576 <__mcmp+0x2e>
	...

0800f580 <__mdiff>:
 800f580:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f582:	000c      	movs	r4, r1
 800f584:	b087      	sub	sp, #28
 800f586:	9000      	str	r0, [sp, #0]
 800f588:	0011      	movs	r1, r2
 800f58a:	0020      	movs	r0, r4
 800f58c:	0017      	movs	r7, r2
 800f58e:	f7ff ffdb 	bl	800f548 <__mcmp>
 800f592:	1e05      	subs	r5, r0, #0
 800f594:	d110      	bne.n	800f5b8 <__mdiff+0x38>
 800f596:	0001      	movs	r1, r0
 800f598:	9800      	ldr	r0, [sp, #0]
 800f59a:	f7ff fcfb 	bl	800ef94 <_Balloc>
 800f59e:	1e02      	subs	r2, r0, #0
 800f5a0:	d104      	bne.n	800f5ac <__mdiff+0x2c>
 800f5a2:	4b40      	ldr	r3, [pc, #256]	@ (800f6a4 <__mdiff+0x124>)
 800f5a4:	4840      	ldr	r0, [pc, #256]	@ (800f6a8 <__mdiff+0x128>)
 800f5a6:	4941      	ldr	r1, [pc, #260]	@ (800f6ac <__mdiff+0x12c>)
 800f5a8:	f000 ff70 	bl	801048c <__assert_func>
 800f5ac:	2301      	movs	r3, #1
 800f5ae:	6145      	str	r5, [r0, #20]
 800f5b0:	6103      	str	r3, [r0, #16]
 800f5b2:	0010      	movs	r0, r2
 800f5b4:	b007      	add	sp, #28
 800f5b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f5b8:	2600      	movs	r6, #0
 800f5ba:	42b0      	cmp	r0, r6
 800f5bc:	da03      	bge.n	800f5c6 <__mdiff+0x46>
 800f5be:	0023      	movs	r3, r4
 800f5c0:	003c      	movs	r4, r7
 800f5c2:	001f      	movs	r7, r3
 800f5c4:	3601      	adds	r6, #1
 800f5c6:	6861      	ldr	r1, [r4, #4]
 800f5c8:	9800      	ldr	r0, [sp, #0]
 800f5ca:	f7ff fce3 	bl	800ef94 <_Balloc>
 800f5ce:	1e02      	subs	r2, r0, #0
 800f5d0:	d103      	bne.n	800f5da <__mdiff+0x5a>
 800f5d2:	4b34      	ldr	r3, [pc, #208]	@ (800f6a4 <__mdiff+0x124>)
 800f5d4:	4834      	ldr	r0, [pc, #208]	@ (800f6a8 <__mdiff+0x128>)
 800f5d6:	4936      	ldr	r1, [pc, #216]	@ (800f6b0 <__mdiff+0x130>)
 800f5d8:	e7e6      	b.n	800f5a8 <__mdiff+0x28>
 800f5da:	6923      	ldr	r3, [r4, #16]
 800f5dc:	3414      	adds	r4, #20
 800f5de:	9300      	str	r3, [sp, #0]
 800f5e0:	009b      	lsls	r3, r3, #2
 800f5e2:	18e3      	adds	r3, r4, r3
 800f5e4:	0021      	movs	r1, r4
 800f5e6:	9401      	str	r4, [sp, #4]
 800f5e8:	003c      	movs	r4, r7
 800f5ea:	9302      	str	r3, [sp, #8]
 800f5ec:	693b      	ldr	r3, [r7, #16]
 800f5ee:	3414      	adds	r4, #20
 800f5f0:	009b      	lsls	r3, r3, #2
 800f5f2:	18e3      	adds	r3, r4, r3
 800f5f4:	9303      	str	r3, [sp, #12]
 800f5f6:	0003      	movs	r3, r0
 800f5f8:	60c6      	str	r6, [r0, #12]
 800f5fa:	468c      	mov	ip, r1
 800f5fc:	2000      	movs	r0, #0
 800f5fe:	3314      	adds	r3, #20
 800f600:	9304      	str	r3, [sp, #16]
 800f602:	9305      	str	r3, [sp, #20]
 800f604:	4663      	mov	r3, ip
 800f606:	cb20      	ldmia	r3!, {r5}
 800f608:	b2a9      	uxth	r1, r5
 800f60a:	000e      	movs	r6, r1
 800f60c:	469c      	mov	ip, r3
 800f60e:	cc08      	ldmia	r4!, {r3}
 800f610:	0c2d      	lsrs	r5, r5, #16
 800f612:	b299      	uxth	r1, r3
 800f614:	1a71      	subs	r1, r6, r1
 800f616:	1809      	adds	r1, r1, r0
 800f618:	0c1b      	lsrs	r3, r3, #16
 800f61a:	1408      	asrs	r0, r1, #16
 800f61c:	1aeb      	subs	r3, r5, r3
 800f61e:	181b      	adds	r3, r3, r0
 800f620:	1418      	asrs	r0, r3, #16
 800f622:	b289      	uxth	r1, r1
 800f624:	041b      	lsls	r3, r3, #16
 800f626:	4319      	orrs	r1, r3
 800f628:	9b05      	ldr	r3, [sp, #20]
 800f62a:	c302      	stmia	r3!, {r1}
 800f62c:	9305      	str	r3, [sp, #20]
 800f62e:	9b03      	ldr	r3, [sp, #12]
 800f630:	42a3      	cmp	r3, r4
 800f632:	d8e7      	bhi.n	800f604 <__mdiff+0x84>
 800f634:	0039      	movs	r1, r7
 800f636:	9c03      	ldr	r4, [sp, #12]
 800f638:	3115      	adds	r1, #21
 800f63a:	2304      	movs	r3, #4
 800f63c:	428c      	cmp	r4, r1
 800f63e:	d304      	bcc.n	800f64a <__mdiff+0xca>
 800f640:	1be3      	subs	r3, r4, r7
 800f642:	3b15      	subs	r3, #21
 800f644:	089b      	lsrs	r3, r3, #2
 800f646:	3301      	adds	r3, #1
 800f648:	009b      	lsls	r3, r3, #2
 800f64a:	9901      	ldr	r1, [sp, #4]
 800f64c:	18cd      	adds	r5, r1, r3
 800f64e:	9904      	ldr	r1, [sp, #16]
 800f650:	002e      	movs	r6, r5
 800f652:	18cb      	adds	r3, r1, r3
 800f654:	001f      	movs	r7, r3
 800f656:	9902      	ldr	r1, [sp, #8]
 800f658:	428e      	cmp	r6, r1
 800f65a:	d311      	bcc.n	800f680 <__mdiff+0x100>
 800f65c:	9c02      	ldr	r4, [sp, #8]
 800f65e:	1ee9      	subs	r1, r5, #3
 800f660:	2000      	movs	r0, #0
 800f662:	428c      	cmp	r4, r1
 800f664:	d304      	bcc.n	800f670 <__mdiff+0xf0>
 800f666:	0021      	movs	r1, r4
 800f668:	3103      	adds	r1, #3
 800f66a:	1b49      	subs	r1, r1, r5
 800f66c:	0889      	lsrs	r1, r1, #2
 800f66e:	0088      	lsls	r0, r1, #2
 800f670:	181b      	adds	r3, r3, r0
 800f672:	3b04      	subs	r3, #4
 800f674:	6819      	ldr	r1, [r3, #0]
 800f676:	2900      	cmp	r1, #0
 800f678:	d010      	beq.n	800f69c <__mdiff+0x11c>
 800f67a:	9b00      	ldr	r3, [sp, #0]
 800f67c:	6113      	str	r3, [r2, #16]
 800f67e:	e798      	b.n	800f5b2 <__mdiff+0x32>
 800f680:	4684      	mov	ip, r0
 800f682:	ce02      	ldmia	r6!, {r1}
 800f684:	b288      	uxth	r0, r1
 800f686:	4460      	add	r0, ip
 800f688:	1400      	asrs	r0, r0, #16
 800f68a:	0c0c      	lsrs	r4, r1, #16
 800f68c:	1904      	adds	r4, r0, r4
 800f68e:	4461      	add	r1, ip
 800f690:	1420      	asrs	r0, r4, #16
 800f692:	b289      	uxth	r1, r1
 800f694:	0424      	lsls	r4, r4, #16
 800f696:	4321      	orrs	r1, r4
 800f698:	c702      	stmia	r7!, {r1}
 800f69a:	e7dc      	b.n	800f656 <__mdiff+0xd6>
 800f69c:	9900      	ldr	r1, [sp, #0]
 800f69e:	3901      	subs	r1, #1
 800f6a0:	9100      	str	r1, [sp, #0]
 800f6a2:	e7e6      	b.n	800f672 <__mdiff+0xf2>
 800f6a4:	080118d9 	.word	0x080118d9
 800f6a8:	08011961 	.word	0x08011961
 800f6ac:	00000237 	.word	0x00000237
 800f6b0:	00000245 	.word	0x00000245

0800f6b4 <__ulp>:
 800f6b4:	b510      	push	{r4, lr}
 800f6b6:	2400      	movs	r4, #0
 800f6b8:	4b0c      	ldr	r3, [pc, #48]	@ (800f6ec <__ulp+0x38>)
 800f6ba:	4a0d      	ldr	r2, [pc, #52]	@ (800f6f0 <__ulp+0x3c>)
 800f6bc:	400b      	ands	r3, r1
 800f6be:	189b      	adds	r3, r3, r2
 800f6c0:	42a3      	cmp	r3, r4
 800f6c2:	dc06      	bgt.n	800f6d2 <__ulp+0x1e>
 800f6c4:	425b      	negs	r3, r3
 800f6c6:	151a      	asrs	r2, r3, #20
 800f6c8:	2a13      	cmp	r2, #19
 800f6ca:	dc05      	bgt.n	800f6d8 <__ulp+0x24>
 800f6cc:	2380      	movs	r3, #128	@ 0x80
 800f6ce:	031b      	lsls	r3, r3, #12
 800f6d0:	4113      	asrs	r3, r2
 800f6d2:	0019      	movs	r1, r3
 800f6d4:	0020      	movs	r0, r4
 800f6d6:	bd10      	pop	{r4, pc}
 800f6d8:	3a14      	subs	r2, #20
 800f6da:	2401      	movs	r4, #1
 800f6dc:	2a1e      	cmp	r2, #30
 800f6de:	dc02      	bgt.n	800f6e6 <__ulp+0x32>
 800f6e0:	2480      	movs	r4, #128	@ 0x80
 800f6e2:	0624      	lsls	r4, r4, #24
 800f6e4:	40d4      	lsrs	r4, r2
 800f6e6:	2300      	movs	r3, #0
 800f6e8:	e7f3      	b.n	800f6d2 <__ulp+0x1e>
 800f6ea:	46c0      	nop			@ (mov r8, r8)
 800f6ec:	7ff00000 	.word	0x7ff00000
 800f6f0:	fcc00000 	.word	0xfcc00000

0800f6f4 <__b2d>:
 800f6f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f6f6:	0006      	movs	r6, r0
 800f6f8:	6903      	ldr	r3, [r0, #16]
 800f6fa:	3614      	adds	r6, #20
 800f6fc:	009b      	lsls	r3, r3, #2
 800f6fe:	18f3      	adds	r3, r6, r3
 800f700:	1f1d      	subs	r5, r3, #4
 800f702:	682c      	ldr	r4, [r5, #0]
 800f704:	000f      	movs	r7, r1
 800f706:	0020      	movs	r0, r4
 800f708:	9301      	str	r3, [sp, #4]
 800f70a:	f7ff fd3b 	bl	800f184 <__hi0bits>
 800f70e:	2220      	movs	r2, #32
 800f710:	1a12      	subs	r2, r2, r0
 800f712:	603a      	str	r2, [r7, #0]
 800f714:	0003      	movs	r3, r0
 800f716:	4a1c      	ldr	r2, [pc, #112]	@ (800f788 <__b2d+0x94>)
 800f718:	280a      	cmp	r0, #10
 800f71a:	dc15      	bgt.n	800f748 <__b2d+0x54>
 800f71c:	210b      	movs	r1, #11
 800f71e:	0027      	movs	r7, r4
 800f720:	1a09      	subs	r1, r1, r0
 800f722:	40cf      	lsrs	r7, r1
 800f724:	433a      	orrs	r2, r7
 800f726:	468c      	mov	ip, r1
 800f728:	0011      	movs	r1, r2
 800f72a:	2200      	movs	r2, #0
 800f72c:	42ae      	cmp	r6, r5
 800f72e:	d202      	bcs.n	800f736 <__b2d+0x42>
 800f730:	9a01      	ldr	r2, [sp, #4]
 800f732:	3a08      	subs	r2, #8
 800f734:	6812      	ldr	r2, [r2, #0]
 800f736:	3315      	adds	r3, #21
 800f738:	409c      	lsls	r4, r3
 800f73a:	4663      	mov	r3, ip
 800f73c:	0027      	movs	r7, r4
 800f73e:	40da      	lsrs	r2, r3
 800f740:	4317      	orrs	r7, r2
 800f742:	0038      	movs	r0, r7
 800f744:	b003      	add	sp, #12
 800f746:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f748:	2700      	movs	r7, #0
 800f74a:	42ae      	cmp	r6, r5
 800f74c:	d202      	bcs.n	800f754 <__b2d+0x60>
 800f74e:	9d01      	ldr	r5, [sp, #4]
 800f750:	3d08      	subs	r5, #8
 800f752:	682f      	ldr	r7, [r5, #0]
 800f754:	210b      	movs	r1, #11
 800f756:	4249      	negs	r1, r1
 800f758:	468c      	mov	ip, r1
 800f75a:	449c      	add	ip, r3
 800f75c:	2b0b      	cmp	r3, #11
 800f75e:	d010      	beq.n	800f782 <__b2d+0x8e>
 800f760:	4661      	mov	r1, ip
 800f762:	2320      	movs	r3, #32
 800f764:	408c      	lsls	r4, r1
 800f766:	1a5b      	subs	r3, r3, r1
 800f768:	0039      	movs	r1, r7
 800f76a:	40d9      	lsrs	r1, r3
 800f76c:	430c      	orrs	r4, r1
 800f76e:	4322      	orrs	r2, r4
 800f770:	0011      	movs	r1, r2
 800f772:	2200      	movs	r2, #0
 800f774:	42b5      	cmp	r5, r6
 800f776:	d901      	bls.n	800f77c <__b2d+0x88>
 800f778:	3d04      	subs	r5, #4
 800f77a:	682a      	ldr	r2, [r5, #0]
 800f77c:	4664      	mov	r4, ip
 800f77e:	40a7      	lsls	r7, r4
 800f780:	e7dd      	b.n	800f73e <__b2d+0x4a>
 800f782:	4322      	orrs	r2, r4
 800f784:	0011      	movs	r1, r2
 800f786:	e7dc      	b.n	800f742 <__b2d+0x4e>
 800f788:	3ff00000 	.word	0x3ff00000

0800f78c <__d2b>:
 800f78c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f78e:	2101      	movs	r1, #1
 800f790:	0016      	movs	r6, r2
 800f792:	001f      	movs	r7, r3
 800f794:	f7ff fbfe 	bl	800ef94 <_Balloc>
 800f798:	1e04      	subs	r4, r0, #0
 800f79a:	d105      	bne.n	800f7a8 <__d2b+0x1c>
 800f79c:	0022      	movs	r2, r4
 800f79e:	4b25      	ldr	r3, [pc, #148]	@ (800f834 <__d2b+0xa8>)
 800f7a0:	4825      	ldr	r0, [pc, #148]	@ (800f838 <__d2b+0xac>)
 800f7a2:	4926      	ldr	r1, [pc, #152]	@ (800f83c <__d2b+0xb0>)
 800f7a4:	f000 fe72 	bl	801048c <__assert_func>
 800f7a8:	033b      	lsls	r3, r7, #12
 800f7aa:	007d      	lsls	r5, r7, #1
 800f7ac:	0b1b      	lsrs	r3, r3, #12
 800f7ae:	0d6d      	lsrs	r5, r5, #21
 800f7b0:	d002      	beq.n	800f7b8 <__d2b+0x2c>
 800f7b2:	2280      	movs	r2, #128	@ 0x80
 800f7b4:	0352      	lsls	r2, r2, #13
 800f7b6:	4313      	orrs	r3, r2
 800f7b8:	9301      	str	r3, [sp, #4]
 800f7ba:	2e00      	cmp	r6, #0
 800f7bc:	d025      	beq.n	800f80a <__d2b+0x7e>
 800f7be:	4668      	mov	r0, sp
 800f7c0:	9600      	str	r6, [sp, #0]
 800f7c2:	f7ff fd00 	bl	800f1c6 <__lo0bits>
 800f7c6:	9b01      	ldr	r3, [sp, #4]
 800f7c8:	9900      	ldr	r1, [sp, #0]
 800f7ca:	2800      	cmp	r0, #0
 800f7cc:	d01b      	beq.n	800f806 <__d2b+0x7a>
 800f7ce:	2220      	movs	r2, #32
 800f7d0:	001e      	movs	r6, r3
 800f7d2:	1a12      	subs	r2, r2, r0
 800f7d4:	4096      	lsls	r6, r2
 800f7d6:	0032      	movs	r2, r6
 800f7d8:	40c3      	lsrs	r3, r0
 800f7da:	430a      	orrs	r2, r1
 800f7dc:	6162      	str	r2, [r4, #20]
 800f7de:	9301      	str	r3, [sp, #4]
 800f7e0:	9e01      	ldr	r6, [sp, #4]
 800f7e2:	61a6      	str	r6, [r4, #24]
 800f7e4:	1e73      	subs	r3, r6, #1
 800f7e6:	419e      	sbcs	r6, r3
 800f7e8:	3601      	adds	r6, #1
 800f7ea:	6126      	str	r6, [r4, #16]
 800f7ec:	2d00      	cmp	r5, #0
 800f7ee:	d014      	beq.n	800f81a <__d2b+0x8e>
 800f7f0:	2635      	movs	r6, #53	@ 0x35
 800f7f2:	4b13      	ldr	r3, [pc, #76]	@ (800f840 <__d2b+0xb4>)
 800f7f4:	18ed      	adds	r5, r5, r3
 800f7f6:	9b08      	ldr	r3, [sp, #32]
 800f7f8:	182d      	adds	r5, r5, r0
 800f7fa:	601d      	str	r5, [r3, #0]
 800f7fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f7fe:	1a36      	subs	r6, r6, r0
 800f800:	601e      	str	r6, [r3, #0]
 800f802:	0020      	movs	r0, r4
 800f804:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f806:	6161      	str	r1, [r4, #20]
 800f808:	e7ea      	b.n	800f7e0 <__d2b+0x54>
 800f80a:	a801      	add	r0, sp, #4
 800f80c:	f7ff fcdb 	bl	800f1c6 <__lo0bits>
 800f810:	9b01      	ldr	r3, [sp, #4]
 800f812:	2601      	movs	r6, #1
 800f814:	6163      	str	r3, [r4, #20]
 800f816:	3020      	adds	r0, #32
 800f818:	e7e7      	b.n	800f7ea <__d2b+0x5e>
 800f81a:	4b0a      	ldr	r3, [pc, #40]	@ (800f844 <__d2b+0xb8>)
 800f81c:	18c0      	adds	r0, r0, r3
 800f81e:	9b08      	ldr	r3, [sp, #32]
 800f820:	6018      	str	r0, [r3, #0]
 800f822:	4b09      	ldr	r3, [pc, #36]	@ (800f848 <__d2b+0xbc>)
 800f824:	18f3      	adds	r3, r6, r3
 800f826:	009b      	lsls	r3, r3, #2
 800f828:	18e3      	adds	r3, r4, r3
 800f82a:	6958      	ldr	r0, [r3, #20]
 800f82c:	f7ff fcaa 	bl	800f184 <__hi0bits>
 800f830:	0176      	lsls	r6, r6, #5
 800f832:	e7e3      	b.n	800f7fc <__d2b+0x70>
 800f834:	080118d9 	.word	0x080118d9
 800f838:	08011961 	.word	0x08011961
 800f83c:	0000030f 	.word	0x0000030f
 800f840:	fffffbcd 	.word	0xfffffbcd
 800f844:	fffffbce 	.word	0xfffffbce
 800f848:	3fffffff 	.word	0x3fffffff

0800f84c <__ratio>:
 800f84c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f84e:	b087      	sub	sp, #28
 800f850:	000f      	movs	r7, r1
 800f852:	a904      	add	r1, sp, #16
 800f854:	0006      	movs	r6, r0
 800f856:	f7ff ff4d 	bl	800f6f4 <__b2d>
 800f85a:	9000      	str	r0, [sp, #0]
 800f85c:	9101      	str	r1, [sp, #4]
 800f85e:	9b00      	ldr	r3, [sp, #0]
 800f860:	9c01      	ldr	r4, [sp, #4]
 800f862:	0038      	movs	r0, r7
 800f864:	a905      	add	r1, sp, #20
 800f866:	9302      	str	r3, [sp, #8]
 800f868:	9403      	str	r4, [sp, #12]
 800f86a:	f7ff ff43 	bl	800f6f4 <__b2d>
 800f86e:	000d      	movs	r5, r1
 800f870:	0002      	movs	r2, r0
 800f872:	000b      	movs	r3, r1
 800f874:	6930      	ldr	r0, [r6, #16]
 800f876:	6939      	ldr	r1, [r7, #16]
 800f878:	9e04      	ldr	r6, [sp, #16]
 800f87a:	1a40      	subs	r0, r0, r1
 800f87c:	9905      	ldr	r1, [sp, #20]
 800f87e:	0140      	lsls	r0, r0, #5
 800f880:	1a71      	subs	r1, r6, r1
 800f882:	1841      	adds	r1, r0, r1
 800f884:	0508      	lsls	r0, r1, #20
 800f886:	2900      	cmp	r1, #0
 800f888:	dd08      	ble.n	800f89c <__ratio+0x50>
 800f88a:	9901      	ldr	r1, [sp, #4]
 800f88c:	1841      	adds	r1, r0, r1
 800f88e:	9103      	str	r1, [sp, #12]
 800f890:	9802      	ldr	r0, [sp, #8]
 800f892:	9903      	ldr	r1, [sp, #12]
 800f894:	f7f2 fa4e 	bl	8001d34 <__aeabi_ddiv>
 800f898:	b007      	add	sp, #28
 800f89a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f89c:	1a2b      	subs	r3, r5, r0
 800f89e:	e7f7      	b.n	800f890 <__ratio+0x44>

0800f8a0 <__copybits>:
 800f8a0:	b570      	push	{r4, r5, r6, lr}
 800f8a2:	0014      	movs	r4, r2
 800f8a4:	0005      	movs	r5, r0
 800f8a6:	3901      	subs	r1, #1
 800f8a8:	6913      	ldr	r3, [r2, #16]
 800f8aa:	1149      	asrs	r1, r1, #5
 800f8ac:	3101      	adds	r1, #1
 800f8ae:	0089      	lsls	r1, r1, #2
 800f8b0:	3414      	adds	r4, #20
 800f8b2:	009b      	lsls	r3, r3, #2
 800f8b4:	1841      	adds	r1, r0, r1
 800f8b6:	18e3      	adds	r3, r4, r3
 800f8b8:	42a3      	cmp	r3, r4
 800f8ba:	d80d      	bhi.n	800f8d8 <__copybits+0x38>
 800f8bc:	0014      	movs	r4, r2
 800f8be:	3411      	adds	r4, #17
 800f8c0:	2500      	movs	r5, #0
 800f8c2:	429c      	cmp	r4, r3
 800f8c4:	d803      	bhi.n	800f8ce <__copybits+0x2e>
 800f8c6:	1a9b      	subs	r3, r3, r2
 800f8c8:	3b11      	subs	r3, #17
 800f8ca:	089b      	lsrs	r3, r3, #2
 800f8cc:	009d      	lsls	r5, r3, #2
 800f8ce:	2300      	movs	r3, #0
 800f8d0:	1940      	adds	r0, r0, r5
 800f8d2:	4281      	cmp	r1, r0
 800f8d4:	d803      	bhi.n	800f8de <__copybits+0x3e>
 800f8d6:	bd70      	pop	{r4, r5, r6, pc}
 800f8d8:	cc40      	ldmia	r4!, {r6}
 800f8da:	c540      	stmia	r5!, {r6}
 800f8dc:	e7ec      	b.n	800f8b8 <__copybits+0x18>
 800f8de:	c008      	stmia	r0!, {r3}
 800f8e0:	e7f7      	b.n	800f8d2 <__copybits+0x32>

0800f8e2 <__any_on>:
 800f8e2:	0002      	movs	r2, r0
 800f8e4:	6900      	ldr	r0, [r0, #16]
 800f8e6:	b510      	push	{r4, lr}
 800f8e8:	3214      	adds	r2, #20
 800f8ea:	114b      	asrs	r3, r1, #5
 800f8ec:	4298      	cmp	r0, r3
 800f8ee:	db13      	blt.n	800f918 <__any_on+0x36>
 800f8f0:	dd0c      	ble.n	800f90c <__any_on+0x2a>
 800f8f2:	241f      	movs	r4, #31
 800f8f4:	0008      	movs	r0, r1
 800f8f6:	4020      	ands	r0, r4
 800f8f8:	4221      	tst	r1, r4
 800f8fa:	d007      	beq.n	800f90c <__any_on+0x2a>
 800f8fc:	0099      	lsls	r1, r3, #2
 800f8fe:	588c      	ldr	r4, [r1, r2]
 800f900:	0021      	movs	r1, r4
 800f902:	40c1      	lsrs	r1, r0
 800f904:	4081      	lsls	r1, r0
 800f906:	2001      	movs	r0, #1
 800f908:	428c      	cmp	r4, r1
 800f90a:	d104      	bne.n	800f916 <__any_on+0x34>
 800f90c:	009b      	lsls	r3, r3, #2
 800f90e:	18d3      	adds	r3, r2, r3
 800f910:	4293      	cmp	r3, r2
 800f912:	d803      	bhi.n	800f91c <__any_on+0x3a>
 800f914:	2000      	movs	r0, #0
 800f916:	bd10      	pop	{r4, pc}
 800f918:	0003      	movs	r3, r0
 800f91a:	e7f7      	b.n	800f90c <__any_on+0x2a>
 800f91c:	3b04      	subs	r3, #4
 800f91e:	6819      	ldr	r1, [r3, #0]
 800f920:	2900      	cmp	r1, #0
 800f922:	d0f5      	beq.n	800f910 <__any_on+0x2e>
 800f924:	2001      	movs	r0, #1
 800f926:	e7f6      	b.n	800f916 <__any_on+0x34>

0800f928 <__ascii_wctomb>:
 800f928:	0003      	movs	r3, r0
 800f92a:	1e08      	subs	r0, r1, #0
 800f92c:	d005      	beq.n	800f93a <__ascii_wctomb+0x12>
 800f92e:	2aff      	cmp	r2, #255	@ 0xff
 800f930:	d904      	bls.n	800f93c <__ascii_wctomb+0x14>
 800f932:	228a      	movs	r2, #138	@ 0x8a
 800f934:	2001      	movs	r0, #1
 800f936:	601a      	str	r2, [r3, #0]
 800f938:	4240      	negs	r0, r0
 800f93a:	4770      	bx	lr
 800f93c:	2001      	movs	r0, #1
 800f93e:	700a      	strb	r2, [r1, #0]
 800f940:	e7fb      	b.n	800f93a <__ascii_wctomb+0x12>
	...

0800f944 <__ssputs_r>:
 800f944:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f946:	688e      	ldr	r6, [r1, #8]
 800f948:	b085      	sub	sp, #20
 800f94a:	001f      	movs	r7, r3
 800f94c:	000c      	movs	r4, r1
 800f94e:	680b      	ldr	r3, [r1, #0]
 800f950:	9002      	str	r0, [sp, #8]
 800f952:	9203      	str	r2, [sp, #12]
 800f954:	42be      	cmp	r6, r7
 800f956:	d830      	bhi.n	800f9ba <__ssputs_r+0x76>
 800f958:	210c      	movs	r1, #12
 800f95a:	5e62      	ldrsh	r2, [r4, r1]
 800f95c:	2190      	movs	r1, #144	@ 0x90
 800f95e:	00c9      	lsls	r1, r1, #3
 800f960:	420a      	tst	r2, r1
 800f962:	d028      	beq.n	800f9b6 <__ssputs_r+0x72>
 800f964:	2003      	movs	r0, #3
 800f966:	6921      	ldr	r1, [r4, #16]
 800f968:	1a5b      	subs	r3, r3, r1
 800f96a:	9301      	str	r3, [sp, #4]
 800f96c:	6963      	ldr	r3, [r4, #20]
 800f96e:	4343      	muls	r3, r0
 800f970:	9801      	ldr	r0, [sp, #4]
 800f972:	0fdd      	lsrs	r5, r3, #31
 800f974:	18ed      	adds	r5, r5, r3
 800f976:	1c7b      	adds	r3, r7, #1
 800f978:	181b      	adds	r3, r3, r0
 800f97a:	106d      	asrs	r5, r5, #1
 800f97c:	42ab      	cmp	r3, r5
 800f97e:	d900      	bls.n	800f982 <__ssputs_r+0x3e>
 800f980:	001d      	movs	r5, r3
 800f982:	0552      	lsls	r2, r2, #21
 800f984:	d528      	bpl.n	800f9d8 <__ssputs_r+0x94>
 800f986:	0029      	movs	r1, r5
 800f988:	9802      	ldr	r0, [sp, #8]
 800f98a:	f7ff fa61 	bl	800ee50 <_malloc_r>
 800f98e:	1e06      	subs	r6, r0, #0
 800f990:	d02c      	beq.n	800f9ec <__ssputs_r+0xa8>
 800f992:	9a01      	ldr	r2, [sp, #4]
 800f994:	6921      	ldr	r1, [r4, #16]
 800f996:	f7fe fe86 	bl	800e6a6 <memcpy>
 800f99a:	89a2      	ldrh	r2, [r4, #12]
 800f99c:	4b18      	ldr	r3, [pc, #96]	@ (800fa00 <__ssputs_r+0xbc>)
 800f99e:	401a      	ands	r2, r3
 800f9a0:	2380      	movs	r3, #128	@ 0x80
 800f9a2:	4313      	orrs	r3, r2
 800f9a4:	81a3      	strh	r3, [r4, #12]
 800f9a6:	9b01      	ldr	r3, [sp, #4]
 800f9a8:	6126      	str	r6, [r4, #16]
 800f9aa:	18f6      	adds	r6, r6, r3
 800f9ac:	6026      	str	r6, [r4, #0]
 800f9ae:	003e      	movs	r6, r7
 800f9b0:	6165      	str	r5, [r4, #20]
 800f9b2:	1aed      	subs	r5, r5, r3
 800f9b4:	60a5      	str	r5, [r4, #8]
 800f9b6:	42be      	cmp	r6, r7
 800f9b8:	d900      	bls.n	800f9bc <__ssputs_r+0x78>
 800f9ba:	003e      	movs	r6, r7
 800f9bc:	0032      	movs	r2, r6
 800f9be:	9903      	ldr	r1, [sp, #12]
 800f9c0:	6820      	ldr	r0, [r4, #0]
 800f9c2:	f000 fd31 	bl	8010428 <memmove>
 800f9c6:	2000      	movs	r0, #0
 800f9c8:	68a3      	ldr	r3, [r4, #8]
 800f9ca:	1b9b      	subs	r3, r3, r6
 800f9cc:	60a3      	str	r3, [r4, #8]
 800f9ce:	6823      	ldr	r3, [r4, #0]
 800f9d0:	199b      	adds	r3, r3, r6
 800f9d2:	6023      	str	r3, [r4, #0]
 800f9d4:	b005      	add	sp, #20
 800f9d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f9d8:	002a      	movs	r2, r5
 800f9da:	9802      	ldr	r0, [sp, #8]
 800f9dc:	f000 fdac 	bl	8010538 <_realloc_r>
 800f9e0:	1e06      	subs	r6, r0, #0
 800f9e2:	d1e0      	bne.n	800f9a6 <__ssputs_r+0x62>
 800f9e4:	6921      	ldr	r1, [r4, #16]
 800f9e6:	9802      	ldr	r0, [sp, #8]
 800f9e8:	f7fe fe6c 	bl	800e6c4 <_free_r>
 800f9ec:	230c      	movs	r3, #12
 800f9ee:	2001      	movs	r0, #1
 800f9f0:	9a02      	ldr	r2, [sp, #8]
 800f9f2:	4240      	negs	r0, r0
 800f9f4:	6013      	str	r3, [r2, #0]
 800f9f6:	89a2      	ldrh	r2, [r4, #12]
 800f9f8:	3334      	adds	r3, #52	@ 0x34
 800f9fa:	4313      	orrs	r3, r2
 800f9fc:	81a3      	strh	r3, [r4, #12]
 800f9fe:	e7e9      	b.n	800f9d4 <__ssputs_r+0x90>
 800fa00:	fffffb7f 	.word	0xfffffb7f

0800fa04 <_svfiprintf_r>:
 800fa04:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa06:	b0a1      	sub	sp, #132	@ 0x84
 800fa08:	9003      	str	r0, [sp, #12]
 800fa0a:	001d      	movs	r5, r3
 800fa0c:	898b      	ldrh	r3, [r1, #12]
 800fa0e:	000f      	movs	r7, r1
 800fa10:	0016      	movs	r6, r2
 800fa12:	061b      	lsls	r3, r3, #24
 800fa14:	d511      	bpl.n	800fa3a <_svfiprintf_r+0x36>
 800fa16:	690b      	ldr	r3, [r1, #16]
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d10e      	bne.n	800fa3a <_svfiprintf_r+0x36>
 800fa1c:	2140      	movs	r1, #64	@ 0x40
 800fa1e:	f7ff fa17 	bl	800ee50 <_malloc_r>
 800fa22:	6038      	str	r0, [r7, #0]
 800fa24:	6138      	str	r0, [r7, #16]
 800fa26:	2800      	cmp	r0, #0
 800fa28:	d105      	bne.n	800fa36 <_svfiprintf_r+0x32>
 800fa2a:	230c      	movs	r3, #12
 800fa2c:	9a03      	ldr	r2, [sp, #12]
 800fa2e:	6013      	str	r3, [r2, #0]
 800fa30:	2001      	movs	r0, #1
 800fa32:	4240      	negs	r0, r0
 800fa34:	e0cf      	b.n	800fbd6 <_svfiprintf_r+0x1d2>
 800fa36:	2340      	movs	r3, #64	@ 0x40
 800fa38:	617b      	str	r3, [r7, #20]
 800fa3a:	2300      	movs	r3, #0
 800fa3c:	ac08      	add	r4, sp, #32
 800fa3e:	6163      	str	r3, [r4, #20]
 800fa40:	3320      	adds	r3, #32
 800fa42:	7663      	strb	r3, [r4, #25]
 800fa44:	3310      	adds	r3, #16
 800fa46:	76a3      	strb	r3, [r4, #26]
 800fa48:	9507      	str	r5, [sp, #28]
 800fa4a:	0035      	movs	r5, r6
 800fa4c:	782b      	ldrb	r3, [r5, #0]
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d001      	beq.n	800fa56 <_svfiprintf_r+0x52>
 800fa52:	2b25      	cmp	r3, #37	@ 0x25
 800fa54:	d148      	bne.n	800fae8 <_svfiprintf_r+0xe4>
 800fa56:	1bab      	subs	r3, r5, r6
 800fa58:	9305      	str	r3, [sp, #20]
 800fa5a:	42b5      	cmp	r5, r6
 800fa5c:	d00b      	beq.n	800fa76 <_svfiprintf_r+0x72>
 800fa5e:	0032      	movs	r2, r6
 800fa60:	0039      	movs	r1, r7
 800fa62:	9803      	ldr	r0, [sp, #12]
 800fa64:	f7ff ff6e 	bl	800f944 <__ssputs_r>
 800fa68:	3001      	adds	r0, #1
 800fa6a:	d100      	bne.n	800fa6e <_svfiprintf_r+0x6a>
 800fa6c:	e0ae      	b.n	800fbcc <_svfiprintf_r+0x1c8>
 800fa6e:	6963      	ldr	r3, [r4, #20]
 800fa70:	9a05      	ldr	r2, [sp, #20]
 800fa72:	189b      	adds	r3, r3, r2
 800fa74:	6163      	str	r3, [r4, #20]
 800fa76:	782b      	ldrb	r3, [r5, #0]
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d100      	bne.n	800fa7e <_svfiprintf_r+0x7a>
 800fa7c:	e0a6      	b.n	800fbcc <_svfiprintf_r+0x1c8>
 800fa7e:	2201      	movs	r2, #1
 800fa80:	2300      	movs	r3, #0
 800fa82:	4252      	negs	r2, r2
 800fa84:	6062      	str	r2, [r4, #4]
 800fa86:	a904      	add	r1, sp, #16
 800fa88:	3254      	adds	r2, #84	@ 0x54
 800fa8a:	1852      	adds	r2, r2, r1
 800fa8c:	1c6e      	adds	r6, r5, #1
 800fa8e:	6023      	str	r3, [r4, #0]
 800fa90:	60e3      	str	r3, [r4, #12]
 800fa92:	60a3      	str	r3, [r4, #8]
 800fa94:	7013      	strb	r3, [r2, #0]
 800fa96:	65a3      	str	r3, [r4, #88]	@ 0x58
 800fa98:	4b54      	ldr	r3, [pc, #336]	@ (800fbec <_svfiprintf_r+0x1e8>)
 800fa9a:	2205      	movs	r2, #5
 800fa9c:	0018      	movs	r0, r3
 800fa9e:	7831      	ldrb	r1, [r6, #0]
 800faa0:	9305      	str	r3, [sp, #20]
 800faa2:	f000 fce7 	bl	8010474 <memchr>
 800faa6:	1c75      	adds	r5, r6, #1
 800faa8:	2800      	cmp	r0, #0
 800faaa:	d11f      	bne.n	800faec <_svfiprintf_r+0xe8>
 800faac:	6822      	ldr	r2, [r4, #0]
 800faae:	06d3      	lsls	r3, r2, #27
 800fab0:	d504      	bpl.n	800fabc <_svfiprintf_r+0xb8>
 800fab2:	2353      	movs	r3, #83	@ 0x53
 800fab4:	a904      	add	r1, sp, #16
 800fab6:	185b      	adds	r3, r3, r1
 800fab8:	2120      	movs	r1, #32
 800faba:	7019      	strb	r1, [r3, #0]
 800fabc:	0713      	lsls	r3, r2, #28
 800fabe:	d504      	bpl.n	800faca <_svfiprintf_r+0xc6>
 800fac0:	2353      	movs	r3, #83	@ 0x53
 800fac2:	a904      	add	r1, sp, #16
 800fac4:	185b      	adds	r3, r3, r1
 800fac6:	212b      	movs	r1, #43	@ 0x2b
 800fac8:	7019      	strb	r1, [r3, #0]
 800faca:	7833      	ldrb	r3, [r6, #0]
 800facc:	2b2a      	cmp	r3, #42	@ 0x2a
 800face:	d016      	beq.n	800fafe <_svfiprintf_r+0xfa>
 800fad0:	0035      	movs	r5, r6
 800fad2:	2100      	movs	r1, #0
 800fad4:	200a      	movs	r0, #10
 800fad6:	68e3      	ldr	r3, [r4, #12]
 800fad8:	782a      	ldrb	r2, [r5, #0]
 800fada:	1c6e      	adds	r6, r5, #1
 800fadc:	3a30      	subs	r2, #48	@ 0x30
 800fade:	2a09      	cmp	r2, #9
 800fae0:	d950      	bls.n	800fb84 <_svfiprintf_r+0x180>
 800fae2:	2900      	cmp	r1, #0
 800fae4:	d111      	bne.n	800fb0a <_svfiprintf_r+0x106>
 800fae6:	e017      	b.n	800fb18 <_svfiprintf_r+0x114>
 800fae8:	3501      	adds	r5, #1
 800faea:	e7af      	b.n	800fa4c <_svfiprintf_r+0x48>
 800faec:	9b05      	ldr	r3, [sp, #20]
 800faee:	6822      	ldr	r2, [r4, #0]
 800faf0:	1ac0      	subs	r0, r0, r3
 800faf2:	2301      	movs	r3, #1
 800faf4:	4083      	lsls	r3, r0
 800faf6:	4313      	orrs	r3, r2
 800faf8:	002e      	movs	r6, r5
 800fafa:	6023      	str	r3, [r4, #0]
 800fafc:	e7cc      	b.n	800fa98 <_svfiprintf_r+0x94>
 800fafe:	9b07      	ldr	r3, [sp, #28]
 800fb00:	1d19      	adds	r1, r3, #4
 800fb02:	681b      	ldr	r3, [r3, #0]
 800fb04:	9107      	str	r1, [sp, #28]
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	db01      	blt.n	800fb0e <_svfiprintf_r+0x10a>
 800fb0a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fb0c:	e004      	b.n	800fb18 <_svfiprintf_r+0x114>
 800fb0e:	425b      	negs	r3, r3
 800fb10:	60e3      	str	r3, [r4, #12]
 800fb12:	2302      	movs	r3, #2
 800fb14:	4313      	orrs	r3, r2
 800fb16:	6023      	str	r3, [r4, #0]
 800fb18:	782b      	ldrb	r3, [r5, #0]
 800fb1a:	2b2e      	cmp	r3, #46	@ 0x2e
 800fb1c:	d10c      	bne.n	800fb38 <_svfiprintf_r+0x134>
 800fb1e:	786b      	ldrb	r3, [r5, #1]
 800fb20:	2b2a      	cmp	r3, #42	@ 0x2a
 800fb22:	d134      	bne.n	800fb8e <_svfiprintf_r+0x18a>
 800fb24:	9b07      	ldr	r3, [sp, #28]
 800fb26:	3502      	adds	r5, #2
 800fb28:	1d1a      	adds	r2, r3, #4
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	9207      	str	r2, [sp, #28]
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	da01      	bge.n	800fb36 <_svfiprintf_r+0x132>
 800fb32:	2301      	movs	r3, #1
 800fb34:	425b      	negs	r3, r3
 800fb36:	9309      	str	r3, [sp, #36]	@ 0x24
 800fb38:	4e2d      	ldr	r6, [pc, #180]	@ (800fbf0 <_svfiprintf_r+0x1ec>)
 800fb3a:	2203      	movs	r2, #3
 800fb3c:	0030      	movs	r0, r6
 800fb3e:	7829      	ldrb	r1, [r5, #0]
 800fb40:	f000 fc98 	bl	8010474 <memchr>
 800fb44:	2800      	cmp	r0, #0
 800fb46:	d006      	beq.n	800fb56 <_svfiprintf_r+0x152>
 800fb48:	2340      	movs	r3, #64	@ 0x40
 800fb4a:	1b80      	subs	r0, r0, r6
 800fb4c:	4083      	lsls	r3, r0
 800fb4e:	6822      	ldr	r2, [r4, #0]
 800fb50:	3501      	adds	r5, #1
 800fb52:	4313      	orrs	r3, r2
 800fb54:	6023      	str	r3, [r4, #0]
 800fb56:	7829      	ldrb	r1, [r5, #0]
 800fb58:	2206      	movs	r2, #6
 800fb5a:	4826      	ldr	r0, [pc, #152]	@ (800fbf4 <_svfiprintf_r+0x1f0>)
 800fb5c:	1c6e      	adds	r6, r5, #1
 800fb5e:	7621      	strb	r1, [r4, #24]
 800fb60:	f000 fc88 	bl	8010474 <memchr>
 800fb64:	2800      	cmp	r0, #0
 800fb66:	d038      	beq.n	800fbda <_svfiprintf_r+0x1d6>
 800fb68:	4b23      	ldr	r3, [pc, #140]	@ (800fbf8 <_svfiprintf_r+0x1f4>)
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d122      	bne.n	800fbb4 <_svfiprintf_r+0x1b0>
 800fb6e:	2207      	movs	r2, #7
 800fb70:	9b07      	ldr	r3, [sp, #28]
 800fb72:	3307      	adds	r3, #7
 800fb74:	4393      	bics	r3, r2
 800fb76:	3308      	adds	r3, #8
 800fb78:	9307      	str	r3, [sp, #28]
 800fb7a:	6963      	ldr	r3, [r4, #20]
 800fb7c:	9a04      	ldr	r2, [sp, #16]
 800fb7e:	189b      	adds	r3, r3, r2
 800fb80:	6163      	str	r3, [r4, #20]
 800fb82:	e762      	b.n	800fa4a <_svfiprintf_r+0x46>
 800fb84:	4343      	muls	r3, r0
 800fb86:	0035      	movs	r5, r6
 800fb88:	2101      	movs	r1, #1
 800fb8a:	189b      	adds	r3, r3, r2
 800fb8c:	e7a4      	b.n	800fad8 <_svfiprintf_r+0xd4>
 800fb8e:	2300      	movs	r3, #0
 800fb90:	200a      	movs	r0, #10
 800fb92:	0019      	movs	r1, r3
 800fb94:	3501      	adds	r5, #1
 800fb96:	6063      	str	r3, [r4, #4]
 800fb98:	782a      	ldrb	r2, [r5, #0]
 800fb9a:	1c6e      	adds	r6, r5, #1
 800fb9c:	3a30      	subs	r2, #48	@ 0x30
 800fb9e:	2a09      	cmp	r2, #9
 800fba0:	d903      	bls.n	800fbaa <_svfiprintf_r+0x1a6>
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d0c8      	beq.n	800fb38 <_svfiprintf_r+0x134>
 800fba6:	9109      	str	r1, [sp, #36]	@ 0x24
 800fba8:	e7c6      	b.n	800fb38 <_svfiprintf_r+0x134>
 800fbaa:	4341      	muls	r1, r0
 800fbac:	0035      	movs	r5, r6
 800fbae:	2301      	movs	r3, #1
 800fbb0:	1889      	adds	r1, r1, r2
 800fbb2:	e7f1      	b.n	800fb98 <_svfiprintf_r+0x194>
 800fbb4:	aa07      	add	r2, sp, #28
 800fbb6:	9200      	str	r2, [sp, #0]
 800fbb8:	0021      	movs	r1, r4
 800fbba:	003a      	movs	r2, r7
 800fbbc:	4b0f      	ldr	r3, [pc, #60]	@ (800fbfc <_svfiprintf_r+0x1f8>)
 800fbbe:	9803      	ldr	r0, [sp, #12]
 800fbc0:	e000      	b.n	800fbc4 <_svfiprintf_r+0x1c0>
 800fbc2:	bf00      	nop
 800fbc4:	9004      	str	r0, [sp, #16]
 800fbc6:	9b04      	ldr	r3, [sp, #16]
 800fbc8:	3301      	adds	r3, #1
 800fbca:	d1d6      	bne.n	800fb7a <_svfiprintf_r+0x176>
 800fbcc:	89bb      	ldrh	r3, [r7, #12]
 800fbce:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800fbd0:	065b      	lsls	r3, r3, #25
 800fbd2:	d500      	bpl.n	800fbd6 <_svfiprintf_r+0x1d2>
 800fbd4:	e72c      	b.n	800fa30 <_svfiprintf_r+0x2c>
 800fbd6:	b021      	add	sp, #132	@ 0x84
 800fbd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fbda:	aa07      	add	r2, sp, #28
 800fbdc:	9200      	str	r2, [sp, #0]
 800fbde:	0021      	movs	r1, r4
 800fbe0:	003a      	movs	r2, r7
 800fbe2:	4b06      	ldr	r3, [pc, #24]	@ (800fbfc <_svfiprintf_r+0x1f8>)
 800fbe4:	9803      	ldr	r0, [sp, #12]
 800fbe6:	f000 f9bf 	bl	800ff68 <_printf_i>
 800fbea:	e7eb      	b.n	800fbc4 <_svfiprintf_r+0x1c0>
 800fbec:	08011ab8 	.word	0x08011ab8
 800fbf0:	08011abe 	.word	0x08011abe
 800fbf4:	08011ac2 	.word	0x08011ac2
 800fbf8:	00000000 	.word	0x00000000
 800fbfc:	0800f945 	.word	0x0800f945

0800fc00 <__sfputc_r>:
 800fc00:	6893      	ldr	r3, [r2, #8]
 800fc02:	b510      	push	{r4, lr}
 800fc04:	3b01      	subs	r3, #1
 800fc06:	6093      	str	r3, [r2, #8]
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	da04      	bge.n	800fc16 <__sfputc_r+0x16>
 800fc0c:	6994      	ldr	r4, [r2, #24]
 800fc0e:	42a3      	cmp	r3, r4
 800fc10:	db07      	blt.n	800fc22 <__sfputc_r+0x22>
 800fc12:	290a      	cmp	r1, #10
 800fc14:	d005      	beq.n	800fc22 <__sfputc_r+0x22>
 800fc16:	6813      	ldr	r3, [r2, #0]
 800fc18:	1c58      	adds	r0, r3, #1
 800fc1a:	6010      	str	r0, [r2, #0]
 800fc1c:	7019      	strb	r1, [r3, #0]
 800fc1e:	0008      	movs	r0, r1
 800fc20:	bd10      	pop	{r4, pc}
 800fc22:	f000 fb60 	bl	80102e6 <__swbuf_r>
 800fc26:	0001      	movs	r1, r0
 800fc28:	e7f9      	b.n	800fc1e <__sfputc_r+0x1e>

0800fc2a <__sfputs_r>:
 800fc2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc2c:	0006      	movs	r6, r0
 800fc2e:	000f      	movs	r7, r1
 800fc30:	0014      	movs	r4, r2
 800fc32:	18d5      	adds	r5, r2, r3
 800fc34:	42ac      	cmp	r4, r5
 800fc36:	d101      	bne.n	800fc3c <__sfputs_r+0x12>
 800fc38:	2000      	movs	r0, #0
 800fc3a:	e007      	b.n	800fc4c <__sfputs_r+0x22>
 800fc3c:	7821      	ldrb	r1, [r4, #0]
 800fc3e:	003a      	movs	r2, r7
 800fc40:	0030      	movs	r0, r6
 800fc42:	f7ff ffdd 	bl	800fc00 <__sfputc_r>
 800fc46:	3401      	adds	r4, #1
 800fc48:	1c43      	adds	r3, r0, #1
 800fc4a:	d1f3      	bne.n	800fc34 <__sfputs_r+0xa>
 800fc4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fc50 <_vfiprintf_r>:
 800fc50:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fc52:	b0a1      	sub	sp, #132	@ 0x84
 800fc54:	000f      	movs	r7, r1
 800fc56:	0015      	movs	r5, r2
 800fc58:	001e      	movs	r6, r3
 800fc5a:	9003      	str	r0, [sp, #12]
 800fc5c:	2800      	cmp	r0, #0
 800fc5e:	d004      	beq.n	800fc6a <_vfiprintf_r+0x1a>
 800fc60:	6a03      	ldr	r3, [r0, #32]
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d101      	bne.n	800fc6a <_vfiprintf_r+0x1a>
 800fc66:	f7fe fbe9 	bl	800e43c <__sinit>
 800fc6a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fc6c:	07db      	lsls	r3, r3, #31
 800fc6e:	d405      	bmi.n	800fc7c <_vfiprintf_r+0x2c>
 800fc70:	89bb      	ldrh	r3, [r7, #12]
 800fc72:	059b      	lsls	r3, r3, #22
 800fc74:	d402      	bmi.n	800fc7c <_vfiprintf_r+0x2c>
 800fc76:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800fc78:	f7fe fd13 	bl	800e6a2 <__retarget_lock_acquire_recursive>
 800fc7c:	89bb      	ldrh	r3, [r7, #12]
 800fc7e:	071b      	lsls	r3, r3, #28
 800fc80:	d502      	bpl.n	800fc88 <_vfiprintf_r+0x38>
 800fc82:	693b      	ldr	r3, [r7, #16]
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d113      	bne.n	800fcb0 <_vfiprintf_r+0x60>
 800fc88:	0039      	movs	r1, r7
 800fc8a:	9803      	ldr	r0, [sp, #12]
 800fc8c:	f000 fb6e 	bl	801036c <__swsetup_r>
 800fc90:	2800      	cmp	r0, #0
 800fc92:	d00d      	beq.n	800fcb0 <_vfiprintf_r+0x60>
 800fc94:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fc96:	07db      	lsls	r3, r3, #31
 800fc98:	d503      	bpl.n	800fca2 <_vfiprintf_r+0x52>
 800fc9a:	2001      	movs	r0, #1
 800fc9c:	4240      	negs	r0, r0
 800fc9e:	b021      	add	sp, #132	@ 0x84
 800fca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fca2:	89bb      	ldrh	r3, [r7, #12]
 800fca4:	059b      	lsls	r3, r3, #22
 800fca6:	d4f8      	bmi.n	800fc9a <_vfiprintf_r+0x4a>
 800fca8:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800fcaa:	f7fe fcfb 	bl	800e6a4 <__retarget_lock_release_recursive>
 800fcae:	e7f4      	b.n	800fc9a <_vfiprintf_r+0x4a>
 800fcb0:	2300      	movs	r3, #0
 800fcb2:	ac08      	add	r4, sp, #32
 800fcb4:	6163      	str	r3, [r4, #20]
 800fcb6:	3320      	adds	r3, #32
 800fcb8:	7663      	strb	r3, [r4, #25]
 800fcba:	3310      	adds	r3, #16
 800fcbc:	76a3      	strb	r3, [r4, #26]
 800fcbe:	9607      	str	r6, [sp, #28]
 800fcc0:	002e      	movs	r6, r5
 800fcc2:	7833      	ldrb	r3, [r6, #0]
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d001      	beq.n	800fccc <_vfiprintf_r+0x7c>
 800fcc8:	2b25      	cmp	r3, #37	@ 0x25
 800fcca:	d148      	bne.n	800fd5e <_vfiprintf_r+0x10e>
 800fccc:	1b73      	subs	r3, r6, r5
 800fcce:	9305      	str	r3, [sp, #20]
 800fcd0:	42ae      	cmp	r6, r5
 800fcd2:	d00b      	beq.n	800fcec <_vfiprintf_r+0x9c>
 800fcd4:	002a      	movs	r2, r5
 800fcd6:	0039      	movs	r1, r7
 800fcd8:	9803      	ldr	r0, [sp, #12]
 800fcda:	f7ff ffa6 	bl	800fc2a <__sfputs_r>
 800fcde:	3001      	adds	r0, #1
 800fce0:	d100      	bne.n	800fce4 <_vfiprintf_r+0x94>
 800fce2:	e0ae      	b.n	800fe42 <_vfiprintf_r+0x1f2>
 800fce4:	6963      	ldr	r3, [r4, #20]
 800fce6:	9a05      	ldr	r2, [sp, #20]
 800fce8:	189b      	adds	r3, r3, r2
 800fcea:	6163      	str	r3, [r4, #20]
 800fcec:	7833      	ldrb	r3, [r6, #0]
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d100      	bne.n	800fcf4 <_vfiprintf_r+0xa4>
 800fcf2:	e0a6      	b.n	800fe42 <_vfiprintf_r+0x1f2>
 800fcf4:	2201      	movs	r2, #1
 800fcf6:	2300      	movs	r3, #0
 800fcf8:	4252      	negs	r2, r2
 800fcfa:	6062      	str	r2, [r4, #4]
 800fcfc:	a904      	add	r1, sp, #16
 800fcfe:	3254      	adds	r2, #84	@ 0x54
 800fd00:	1852      	adds	r2, r2, r1
 800fd02:	1c75      	adds	r5, r6, #1
 800fd04:	6023      	str	r3, [r4, #0]
 800fd06:	60e3      	str	r3, [r4, #12]
 800fd08:	60a3      	str	r3, [r4, #8]
 800fd0a:	7013      	strb	r3, [r2, #0]
 800fd0c:	65a3      	str	r3, [r4, #88]	@ 0x58
 800fd0e:	4b59      	ldr	r3, [pc, #356]	@ (800fe74 <_vfiprintf_r+0x224>)
 800fd10:	2205      	movs	r2, #5
 800fd12:	0018      	movs	r0, r3
 800fd14:	7829      	ldrb	r1, [r5, #0]
 800fd16:	9305      	str	r3, [sp, #20]
 800fd18:	f000 fbac 	bl	8010474 <memchr>
 800fd1c:	1c6e      	adds	r6, r5, #1
 800fd1e:	2800      	cmp	r0, #0
 800fd20:	d11f      	bne.n	800fd62 <_vfiprintf_r+0x112>
 800fd22:	6822      	ldr	r2, [r4, #0]
 800fd24:	06d3      	lsls	r3, r2, #27
 800fd26:	d504      	bpl.n	800fd32 <_vfiprintf_r+0xe2>
 800fd28:	2353      	movs	r3, #83	@ 0x53
 800fd2a:	a904      	add	r1, sp, #16
 800fd2c:	185b      	adds	r3, r3, r1
 800fd2e:	2120      	movs	r1, #32
 800fd30:	7019      	strb	r1, [r3, #0]
 800fd32:	0713      	lsls	r3, r2, #28
 800fd34:	d504      	bpl.n	800fd40 <_vfiprintf_r+0xf0>
 800fd36:	2353      	movs	r3, #83	@ 0x53
 800fd38:	a904      	add	r1, sp, #16
 800fd3a:	185b      	adds	r3, r3, r1
 800fd3c:	212b      	movs	r1, #43	@ 0x2b
 800fd3e:	7019      	strb	r1, [r3, #0]
 800fd40:	782b      	ldrb	r3, [r5, #0]
 800fd42:	2b2a      	cmp	r3, #42	@ 0x2a
 800fd44:	d016      	beq.n	800fd74 <_vfiprintf_r+0x124>
 800fd46:	002e      	movs	r6, r5
 800fd48:	2100      	movs	r1, #0
 800fd4a:	200a      	movs	r0, #10
 800fd4c:	68e3      	ldr	r3, [r4, #12]
 800fd4e:	7832      	ldrb	r2, [r6, #0]
 800fd50:	1c75      	adds	r5, r6, #1
 800fd52:	3a30      	subs	r2, #48	@ 0x30
 800fd54:	2a09      	cmp	r2, #9
 800fd56:	d950      	bls.n	800fdfa <_vfiprintf_r+0x1aa>
 800fd58:	2900      	cmp	r1, #0
 800fd5a:	d111      	bne.n	800fd80 <_vfiprintf_r+0x130>
 800fd5c:	e017      	b.n	800fd8e <_vfiprintf_r+0x13e>
 800fd5e:	3601      	adds	r6, #1
 800fd60:	e7af      	b.n	800fcc2 <_vfiprintf_r+0x72>
 800fd62:	9b05      	ldr	r3, [sp, #20]
 800fd64:	6822      	ldr	r2, [r4, #0]
 800fd66:	1ac0      	subs	r0, r0, r3
 800fd68:	2301      	movs	r3, #1
 800fd6a:	4083      	lsls	r3, r0
 800fd6c:	4313      	orrs	r3, r2
 800fd6e:	0035      	movs	r5, r6
 800fd70:	6023      	str	r3, [r4, #0]
 800fd72:	e7cc      	b.n	800fd0e <_vfiprintf_r+0xbe>
 800fd74:	9b07      	ldr	r3, [sp, #28]
 800fd76:	1d19      	adds	r1, r3, #4
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	9107      	str	r1, [sp, #28]
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	db01      	blt.n	800fd84 <_vfiprintf_r+0x134>
 800fd80:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fd82:	e004      	b.n	800fd8e <_vfiprintf_r+0x13e>
 800fd84:	425b      	negs	r3, r3
 800fd86:	60e3      	str	r3, [r4, #12]
 800fd88:	2302      	movs	r3, #2
 800fd8a:	4313      	orrs	r3, r2
 800fd8c:	6023      	str	r3, [r4, #0]
 800fd8e:	7833      	ldrb	r3, [r6, #0]
 800fd90:	2b2e      	cmp	r3, #46	@ 0x2e
 800fd92:	d10c      	bne.n	800fdae <_vfiprintf_r+0x15e>
 800fd94:	7873      	ldrb	r3, [r6, #1]
 800fd96:	2b2a      	cmp	r3, #42	@ 0x2a
 800fd98:	d134      	bne.n	800fe04 <_vfiprintf_r+0x1b4>
 800fd9a:	9b07      	ldr	r3, [sp, #28]
 800fd9c:	3602      	adds	r6, #2
 800fd9e:	1d1a      	adds	r2, r3, #4
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	9207      	str	r2, [sp, #28]
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	da01      	bge.n	800fdac <_vfiprintf_r+0x15c>
 800fda8:	2301      	movs	r3, #1
 800fdaa:	425b      	negs	r3, r3
 800fdac:	9309      	str	r3, [sp, #36]	@ 0x24
 800fdae:	4d32      	ldr	r5, [pc, #200]	@ (800fe78 <_vfiprintf_r+0x228>)
 800fdb0:	2203      	movs	r2, #3
 800fdb2:	0028      	movs	r0, r5
 800fdb4:	7831      	ldrb	r1, [r6, #0]
 800fdb6:	f000 fb5d 	bl	8010474 <memchr>
 800fdba:	2800      	cmp	r0, #0
 800fdbc:	d006      	beq.n	800fdcc <_vfiprintf_r+0x17c>
 800fdbe:	2340      	movs	r3, #64	@ 0x40
 800fdc0:	1b40      	subs	r0, r0, r5
 800fdc2:	4083      	lsls	r3, r0
 800fdc4:	6822      	ldr	r2, [r4, #0]
 800fdc6:	3601      	adds	r6, #1
 800fdc8:	4313      	orrs	r3, r2
 800fdca:	6023      	str	r3, [r4, #0]
 800fdcc:	7831      	ldrb	r1, [r6, #0]
 800fdce:	2206      	movs	r2, #6
 800fdd0:	482a      	ldr	r0, [pc, #168]	@ (800fe7c <_vfiprintf_r+0x22c>)
 800fdd2:	1c75      	adds	r5, r6, #1
 800fdd4:	7621      	strb	r1, [r4, #24]
 800fdd6:	f000 fb4d 	bl	8010474 <memchr>
 800fdda:	2800      	cmp	r0, #0
 800fddc:	d040      	beq.n	800fe60 <_vfiprintf_r+0x210>
 800fdde:	4b28      	ldr	r3, [pc, #160]	@ (800fe80 <_vfiprintf_r+0x230>)
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d122      	bne.n	800fe2a <_vfiprintf_r+0x1da>
 800fde4:	2207      	movs	r2, #7
 800fde6:	9b07      	ldr	r3, [sp, #28]
 800fde8:	3307      	adds	r3, #7
 800fdea:	4393      	bics	r3, r2
 800fdec:	3308      	adds	r3, #8
 800fdee:	9307      	str	r3, [sp, #28]
 800fdf0:	6963      	ldr	r3, [r4, #20]
 800fdf2:	9a04      	ldr	r2, [sp, #16]
 800fdf4:	189b      	adds	r3, r3, r2
 800fdf6:	6163      	str	r3, [r4, #20]
 800fdf8:	e762      	b.n	800fcc0 <_vfiprintf_r+0x70>
 800fdfa:	4343      	muls	r3, r0
 800fdfc:	002e      	movs	r6, r5
 800fdfe:	2101      	movs	r1, #1
 800fe00:	189b      	adds	r3, r3, r2
 800fe02:	e7a4      	b.n	800fd4e <_vfiprintf_r+0xfe>
 800fe04:	2300      	movs	r3, #0
 800fe06:	200a      	movs	r0, #10
 800fe08:	0019      	movs	r1, r3
 800fe0a:	3601      	adds	r6, #1
 800fe0c:	6063      	str	r3, [r4, #4]
 800fe0e:	7832      	ldrb	r2, [r6, #0]
 800fe10:	1c75      	adds	r5, r6, #1
 800fe12:	3a30      	subs	r2, #48	@ 0x30
 800fe14:	2a09      	cmp	r2, #9
 800fe16:	d903      	bls.n	800fe20 <_vfiprintf_r+0x1d0>
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d0c8      	beq.n	800fdae <_vfiprintf_r+0x15e>
 800fe1c:	9109      	str	r1, [sp, #36]	@ 0x24
 800fe1e:	e7c6      	b.n	800fdae <_vfiprintf_r+0x15e>
 800fe20:	4341      	muls	r1, r0
 800fe22:	002e      	movs	r6, r5
 800fe24:	2301      	movs	r3, #1
 800fe26:	1889      	adds	r1, r1, r2
 800fe28:	e7f1      	b.n	800fe0e <_vfiprintf_r+0x1be>
 800fe2a:	aa07      	add	r2, sp, #28
 800fe2c:	9200      	str	r2, [sp, #0]
 800fe2e:	0021      	movs	r1, r4
 800fe30:	003a      	movs	r2, r7
 800fe32:	4b14      	ldr	r3, [pc, #80]	@ (800fe84 <_vfiprintf_r+0x234>)
 800fe34:	9803      	ldr	r0, [sp, #12]
 800fe36:	e000      	b.n	800fe3a <_vfiprintf_r+0x1ea>
 800fe38:	bf00      	nop
 800fe3a:	9004      	str	r0, [sp, #16]
 800fe3c:	9b04      	ldr	r3, [sp, #16]
 800fe3e:	3301      	adds	r3, #1
 800fe40:	d1d6      	bne.n	800fdf0 <_vfiprintf_r+0x1a0>
 800fe42:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fe44:	07db      	lsls	r3, r3, #31
 800fe46:	d405      	bmi.n	800fe54 <_vfiprintf_r+0x204>
 800fe48:	89bb      	ldrh	r3, [r7, #12]
 800fe4a:	059b      	lsls	r3, r3, #22
 800fe4c:	d402      	bmi.n	800fe54 <_vfiprintf_r+0x204>
 800fe4e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800fe50:	f7fe fc28 	bl	800e6a4 <__retarget_lock_release_recursive>
 800fe54:	89bb      	ldrh	r3, [r7, #12]
 800fe56:	065b      	lsls	r3, r3, #25
 800fe58:	d500      	bpl.n	800fe5c <_vfiprintf_r+0x20c>
 800fe5a:	e71e      	b.n	800fc9a <_vfiprintf_r+0x4a>
 800fe5c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800fe5e:	e71e      	b.n	800fc9e <_vfiprintf_r+0x4e>
 800fe60:	aa07      	add	r2, sp, #28
 800fe62:	9200      	str	r2, [sp, #0]
 800fe64:	0021      	movs	r1, r4
 800fe66:	003a      	movs	r2, r7
 800fe68:	4b06      	ldr	r3, [pc, #24]	@ (800fe84 <_vfiprintf_r+0x234>)
 800fe6a:	9803      	ldr	r0, [sp, #12]
 800fe6c:	f000 f87c 	bl	800ff68 <_printf_i>
 800fe70:	e7e3      	b.n	800fe3a <_vfiprintf_r+0x1ea>
 800fe72:	46c0      	nop			@ (mov r8, r8)
 800fe74:	08011ab8 	.word	0x08011ab8
 800fe78:	08011abe 	.word	0x08011abe
 800fe7c:	08011ac2 	.word	0x08011ac2
 800fe80:	00000000 	.word	0x00000000
 800fe84:	0800fc2b 	.word	0x0800fc2b

0800fe88 <_printf_common>:
 800fe88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fe8a:	0016      	movs	r6, r2
 800fe8c:	9301      	str	r3, [sp, #4]
 800fe8e:	688a      	ldr	r2, [r1, #8]
 800fe90:	690b      	ldr	r3, [r1, #16]
 800fe92:	000c      	movs	r4, r1
 800fe94:	9000      	str	r0, [sp, #0]
 800fe96:	4293      	cmp	r3, r2
 800fe98:	da00      	bge.n	800fe9c <_printf_common+0x14>
 800fe9a:	0013      	movs	r3, r2
 800fe9c:	0022      	movs	r2, r4
 800fe9e:	6033      	str	r3, [r6, #0]
 800fea0:	3243      	adds	r2, #67	@ 0x43
 800fea2:	7812      	ldrb	r2, [r2, #0]
 800fea4:	2a00      	cmp	r2, #0
 800fea6:	d001      	beq.n	800feac <_printf_common+0x24>
 800fea8:	3301      	adds	r3, #1
 800feaa:	6033      	str	r3, [r6, #0]
 800feac:	6823      	ldr	r3, [r4, #0]
 800feae:	069b      	lsls	r3, r3, #26
 800feb0:	d502      	bpl.n	800feb8 <_printf_common+0x30>
 800feb2:	6833      	ldr	r3, [r6, #0]
 800feb4:	3302      	adds	r3, #2
 800feb6:	6033      	str	r3, [r6, #0]
 800feb8:	6822      	ldr	r2, [r4, #0]
 800feba:	2306      	movs	r3, #6
 800febc:	0015      	movs	r5, r2
 800febe:	401d      	ands	r5, r3
 800fec0:	421a      	tst	r2, r3
 800fec2:	d027      	beq.n	800ff14 <_printf_common+0x8c>
 800fec4:	0023      	movs	r3, r4
 800fec6:	3343      	adds	r3, #67	@ 0x43
 800fec8:	781b      	ldrb	r3, [r3, #0]
 800feca:	1e5a      	subs	r2, r3, #1
 800fecc:	4193      	sbcs	r3, r2
 800fece:	6822      	ldr	r2, [r4, #0]
 800fed0:	0692      	lsls	r2, r2, #26
 800fed2:	d430      	bmi.n	800ff36 <_printf_common+0xae>
 800fed4:	0022      	movs	r2, r4
 800fed6:	9901      	ldr	r1, [sp, #4]
 800fed8:	9800      	ldr	r0, [sp, #0]
 800feda:	9d08      	ldr	r5, [sp, #32]
 800fedc:	3243      	adds	r2, #67	@ 0x43
 800fede:	47a8      	blx	r5
 800fee0:	3001      	adds	r0, #1
 800fee2:	d025      	beq.n	800ff30 <_printf_common+0xa8>
 800fee4:	2206      	movs	r2, #6
 800fee6:	6823      	ldr	r3, [r4, #0]
 800fee8:	2500      	movs	r5, #0
 800feea:	4013      	ands	r3, r2
 800feec:	2b04      	cmp	r3, #4
 800feee:	d105      	bne.n	800fefc <_printf_common+0x74>
 800fef0:	6833      	ldr	r3, [r6, #0]
 800fef2:	68e5      	ldr	r5, [r4, #12]
 800fef4:	1aed      	subs	r5, r5, r3
 800fef6:	43eb      	mvns	r3, r5
 800fef8:	17db      	asrs	r3, r3, #31
 800fefa:	401d      	ands	r5, r3
 800fefc:	68a3      	ldr	r3, [r4, #8]
 800fefe:	6922      	ldr	r2, [r4, #16]
 800ff00:	4293      	cmp	r3, r2
 800ff02:	dd01      	ble.n	800ff08 <_printf_common+0x80>
 800ff04:	1a9b      	subs	r3, r3, r2
 800ff06:	18ed      	adds	r5, r5, r3
 800ff08:	2600      	movs	r6, #0
 800ff0a:	42b5      	cmp	r5, r6
 800ff0c:	d120      	bne.n	800ff50 <_printf_common+0xc8>
 800ff0e:	2000      	movs	r0, #0
 800ff10:	e010      	b.n	800ff34 <_printf_common+0xac>
 800ff12:	3501      	adds	r5, #1
 800ff14:	68e3      	ldr	r3, [r4, #12]
 800ff16:	6832      	ldr	r2, [r6, #0]
 800ff18:	1a9b      	subs	r3, r3, r2
 800ff1a:	42ab      	cmp	r3, r5
 800ff1c:	ddd2      	ble.n	800fec4 <_printf_common+0x3c>
 800ff1e:	0022      	movs	r2, r4
 800ff20:	2301      	movs	r3, #1
 800ff22:	9901      	ldr	r1, [sp, #4]
 800ff24:	9800      	ldr	r0, [sp, #0]
 800ff26:	9f08      	ldr	r7, [sp, #32]
 800ff28:	3219      	adds	r2, #25
 800ff2a:	47b8      	blx	r7
 800ff2c:	3001      	adds	r0, #1
 800ff2e:	d1f0      	bne.n	800ff12 <_printf_common+0x8a>
 800ff30:	2001      	movs	r0, #1
 800ff32:	4240      	negs	r0, r0
 800ff34:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ff36:	2030      	movs	r0, #48	@ 0x30
 800ff38:	18e1      	adds	r1, r4, r3
 800ff3a:	3143      	adds	r1, #67	@ 0x43
 800ff3c:	7008      	strb	r0, [r1, #0]
 800ff3e:	0021      	movs	r1, r4
 800ff40:	1c5a      	adds	r2, r3, #1
 800ff42:	3145      	adds	r1, #69	@ 0x45
 800ff44:	7809      	ldrb	r1, [r1, #0]
 800ff46:	18a2      	adds	r2, r4, r2
 800ff48:	3243      	adds	r2, #67	@ 0x43
 800ff4a:	3302      	adds	r3, #2
 800ff4c:	7011      	strb	r1, [r2, #0]
 800ff4e:	e7c1      	b.n	800fed4 <_printf_common+0x4c>
 800ff50:	0022      	movs	r2, r4
 800ff52:	2301      	movs	r3, #1
 800ff54:	9901      	ldr	r1, [sp, #4]
 800ff56:	9800      	ldr	r0, [sp, #0]
 800ff58:	9f08      	ldr	r7, [sp, #32]
 800ff5a:	321a      	adds	r2, #26
 800ff5c:	47b8      	blx	r7
 800ff5e:	3001      	adds	r0, #1
 800ff60:	d0e6      	beq.n	800ff30 <_printf_common+0xa8>
 800ff62:	3601      	adds	r6, #1
 800ff64:	e7d1      	b.n	800ff0a <_printf_common+0x82>
	...

0800ff68 <_printf_i>:
 800ff68:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff6a:	b08b      	sub	sp, #44	@ 0x2c
 800ff6c:	9206      	str	r2, [sp, #24]
 800ff6e:	000a      	movs	r2, r1
 800ff70:	3243      	adds	r2, #67	@ 0x43
 800ff72:	9307      	str	r3, [sp, #28]
 800ff74:	9005      	str	r0, [sp, #20]
 800ff76:	9203      	str	r2, [sp, #12]
 800ff78:	7e0a      	ldrb	r2, [r1, #24]
 800ff7a:	000c      	movs	r4, r1
 800ff7c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ff7e:	2a78      	cmp	r2, #120	@ 0x78
 800ff80:	d809      	bhi.n	800ff96 <_printf_i+0x2e>
 800ff82:	2a62      	cmp	r2, #98	@ 0x62
 800ff84:	d80b      	bhi.n	800ff9e <_printf_i+0x36>
 800ff86:	2a00      	cmp	r2, #0
 800ff88:	d100      	bne.n	800ff8c <_printf_i+0x24>
 800ff8a:	e0bc      	b.n	8010106 <_printf_i+0x19e>
 800ff8c:	497b      	ldr	r1, [pc, #492]	@ (801017c <_printf_i+0x214>)
 800ff8e:	9104      	str	r1, [sp, #16]
 800ff90:	2a58      	cmp	r2, #88	@ 0x58
 800ff92:	d100      	bne.n	800ff96 <_printf_i+0x2e>
 800ff94:	e090      	b.n	80100b8 <_printf_i+0x150>
 800ff96:	0025      	movs	r5, r4
 800ff98:	3542      	adds	r5, #66	@ 0x42
 800ff9a:	702a      	strb	r2, [r5, #0]
 800ff9c:	e022      	b.n	800ffe4 <_printf_i+0x7c>
 800ff9e:	0010      	movs	r0, r2
 800ffa0:	3863      	subs	r0, #99	@ 0x63
 800ffa2:	2815      	cmp	r0, #21
 800ffa4:	d8f7      	bhi.n	800ff96 <_printf_i+0x2e>
 800ffa6:	f7f0 f8c9 	bl	800013c <__gnu_thumb1_case_shi>
 800ffaa:	0016      	.short	0x0016
 800ffac:	fff6001f 	.word	0xfff6001f
 800ffb0:	fff6fff6 	.word	0xfff6fff6
 800ffb4:	001ffff6 	.word	0x001ffff6
 800ffb8:	fff6fff6 	.word	0xfff6fff6
 800ffbc:	fff6fff6 	.word	0xfff6fff6
 800ffc0:	003600a1 	.word	0x003600a1
 800ffc4:	fff60080 	.word	0xfff60080
 800ffc8:	00b2fff6 	.word	0x00b2fff6
 800ffcc:	0036fff6 	.word	0x0036fff6
 800ffd0:	fff6fff6 	.word	0xfff6fff6
 800ffd4:	0084      	.short	0x0084
 800ffd6:	0025      	movs	r5, r4
 800ffd8:	681a      	ldr	r2, [r3, #0]
 800ffda:	3542      	adds	r5, #66	@ 0x42
 800ffdc:	1d11      	adds	r1, r2, #4
 800ffde:	6019      	str	r1, [r3, #0]
 800ffe0:	6813      	ldr	r3, [r2, #0]
 800ffe2:	702b      	strb	r3, [r5, #0]
 800ffe4:	2301      	movs	r3, #1
 800ffe6:	e0a0      	b.n	801012a <_printf_i+0x1c2>
 800ffe8:	6818      	ldr	r0, [r3, #0]
 800ffea:	6809      	ldr	r1, [r1, #0]
 800ffec:	1d02      	adds	r2, r0, #4
 800ffee:	060d      	lsls	r5, r1, #24
 800fff0:	d50b      	bpl.n	801000a <_printf_i+0xa2>
 800fff2:	6806      	ldr	r6, [r0, #0]
 800fff4:	601a      	str	r2, [r3, #0]
 800fff6:	2e00      	cmp	r6, #0
 800fff8:	da03      	bge.n	8010002 <_printf_i+0x9a>
 800fffa:	232d      	movs	r3, #45	@ 0x2d
 800fffc:	9a03      	ldr	r2, [sp, #12]
 800fffe:	4276      	negs	r6, r6
 8010000:	7013      	strb	r3, [r2, #0]
 8010002:	4b5e      	ldr	r3, [pc, #376]	@ (801017c <_printf_i+0x214>)
 8010004:	270a      	movs	r7, #10
 8010006:	9304      	str	r3, [sp, #16]
 8010008:	e018      	b.n	801003c <_printf_i+0xd4>
 801000a:	6806      	ldr	r6, [r0, #0]
 801000c:	601a      	str	r2, [r3, #0]
 801000e:	0649      	lsls	r1, r1, #25
 8010010:	d5f1      	bpl.n	800fff6 <_printf_i+0x8e>
 8010012:	b236      	sxth	r6, r6
 8010014:	e7ef      	b.n	800fff6 <_printf_i+0x8e>
 8010016:	6808      	ldr	r0, [r1, #0]
 8010018:	6819      	ldr	r1, [r3, #0]
 801001a:	c940      	ldmia	r1!, {r6}
 801001c:	0605      	lsls	r5, r0, #24
 801001e:	d402      	bmi.n	8010026 <_printf_i+0xbe>
 8010020:	0640      	lsls	r0, r0, #25
 8010022:	d500      	bpl.n	8010026 <_printf_i+0xbe>
 8010024:	b2b6      	uxth	r6, r6
 8010026:	6019      	str	r1, [r3, #0]
 8010028:	4b54      	ldr	r3, [pc, #336]	@ (801017c <_printf_i+0x214>)
 801002a:	270a      	movs	r7, #10
 801002c:	9304      	str	r3, [sp, #16]
 801002e:	2a6f      	cmp	r2, #111	@ 0x6f
 8010030:	d100      	bne.n	8010034 <_printf_i+0xcc>
 8010032:	3f02      	subs	r7, #2
 8010034:	0023      	movs	r3, r4
 8010036:	2200      	movs	r2, #0
 8010038:	3343      	adds	r3, #67	@ 0x43
 801003a:	701a      	strb	r2, [r3, #0]
 801003c:	6863      	ldr	r3, [r4, #4]
 801003e:	60a3      	str	r3, [r4, #8]
 8010040:	2b00      	cmp	r3, #0
 8010042:	db03      	blt.n	801004c <_printf_i+0xe4>
 8010044:	2104      	movs	r1, #4
 8010046:	6822      	ldr	r2, [r4, #0]
 8010048:	438a      	bics	r2, r1
 801004a:	6022      	str	r2, [r4, #0]
 801004c:	2e00      	cmp	r6, #0
 801004e:	d102      	bne.n	8010056 <_printf_i+0xee>
 8010050:	9d03      	ldr	r5, [sp, #12]
 8010052:	2b00      	cmp	r3, #0
 8010054:	d00c      	beq.n	8010070 <_printf_i+0x108>
 8010056:	9d03      	ldr	r5, [sp, #12]
 8010058:	0030      	movs	r0, r6
 801005a:	0039      	movs	r1, r7
 801005c:	f7f0 f8fe 	bl	800025c <__aeabi_uidivmod>
 8010060:	9b04      	ldr	r3, [sp, #16]
 8010062:	3d01      	subs	r5, #1
 8010064:	5c5b      	ldrb	r3, [r3, r1]
 8010066:	702b      	strb	r3, [r5, #0]
 8010068:	0033      	movs	r3, r6
 801006a:	0006      	movs	r6, r0
 801006c:	429f      	cmp	r7, r3
 801006e:	d9f3      	bls.n	8010058 <_printf_i+0xf0>
 8010070:	2f08      	cmp	r7, #8
 8010072:	d109      	bne.n	8010088 <_printf_i+0x120>
 8010074:	6823      	ldr	r3, [r4, #0]
 8010076:	07db      	lsls	r3, r3, #31
 8010078:	d506      	bpl.n	8010088 <_printf_i+0x120>
 801007a:	6862      	ldr	r2, [r4, #4]
 801007c:	6923      	ldr	r3, [r4, #16]
 801007e:	429a      	cmp	r2, r3
 8010080:	dc02      	bgt.n	8010088 <_printf_i+0x120>
 8010082:	2330      	movs	r3, #48	@ 0x30
 8010084:	3d01      	subs	r5, #1
 8010086:	702b      	strb	r3, [r5, #0]
 8010088:	9b03      	ldr	r3, [sp, #12]
 801008a:	1b5b      	subs	r3, r3, r5
 801008c:	6123      	str	r3, [r4, #16]
 801008e:	9b07      	ldr	r3, [sp, #28]
 8010090:	0021      	movs	r1, r4
 8010092:	9300      	str	r3, [sp, #0]
 8010094:	9805      	ldr	r0, [sp, #20]
 8010096:	9b06      	ldr	r3, [sp, #24]
 8010098:	aa09      	add	r2, sp, #36	@ 0x24
 801009a:	f7ff fef5 	bl	800fe88 <_printf_common>
 801009e:	3001      	adds	r0, #1
 80100a0:	d148      	bne.n	8010134 <_printf_i+0x1cc>
 80100a2:	2001      	movs	r0, #1
 80100a4:	4240      	negs	r0, r0
 80100a6:	b00b      	add	sp, #44	@ 0x2c
 80100a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80100aa:	2220      	movs	r2, #32
 80100ac:	6809      	ldr	r1, [r1, #0]
 80100ae:	430a      	orrs	r2, r1
 80100b0:	6022      	str	r2, [r4, #0]
 80100b2:	2278      	movs	r2, #120	@ 0x78
 80100b4:	4932      	ldr	r1, [pc, #200]	@ (8010180 <_printf_i+0x218>)
 80100b6:	9104      	str	r1, [sp, #16]
 80100b8:	0021      	movs	r1, r4
 80100ba:	3145      	adds	r1, #69	@ 0x45
 80100bc:	700a      	strb	r2, [r1, #0]
 80100be:	6819      	ldr	r1, [r3, #0]
 80100c0:	6822      	ldr	r2, [r4, #0]
 80100c2:	c940      	ldmia	r1!, {r6}
 80100c4:	0610      	lsls	r0, r2, #24
 80100c6:	d402      	bmi.n	80100ce <_printf_i+0x166>
 80100c8:	0650      	lsls	r0, r2, #25
 80100ca:	d500      	bpl.n	80100ce <_printf_i+0x166>
 80100cc:	b2b6      	uxth	r6, r6
 80100ce:	6019      	str	r1, [r3, #0]
 80100d0:	07d3      	lsls	r3, r2, #31
 80100d2:	d502      	bpl.n	80100da <_printf_i+0x172>
 80100d4:	2320      	movs	r3, #32
 80100d6:	4313      	orrs	r3, r2
 80100d8:	6023      	str	r3, [r4, #0]
 80100da:	2e00      	cmp	r6, #0
 80100dc:	d001      	beq.n	80100e2 <_printf_i+0x17a>
 80100de:	2710      	movs	r7, #16
 80100e0:	e7a8      	b.n	8010034 <_printf_i+0xcc>
 80100e2:	2220      	movs	r2, #32
 80100e4:	6823      	ldr	r3, [r4, #0]
 80100e6:	4393      	bics	r3, r2
 80100e8:	6023      	str	r3, [r4, #0]
 80100ea:	e7f8      	b.n	80100de <_printf_i+0x176>
 80100ec:	681a      	ldr	r2, [r3, #0]
 80100ee:	680d      	ldr	r5, [r1, #0]
 80100f0:	1d10      	adds	r0, r2, #4
 80100f2:	6949      	ldr	r1, [r1, #20]
 80100f4:	6018      	str	r0, [r3, #0]
 80100f6:	6813      	ldr	r3, [r2, #0]
 80100f8:	062e      	lsls	r6, r5, #24
 80100fa:	d501      	bpl.n	8010100 <_printf_i+0x198>
 80100fc:	6019      	str	r1, [r3, #0]
 80100fe:	e002      	b.n	8010106 <_printf_i+0x19e>
 8010100:	066d      	lsls	r5, r5, #25
 8010102:	d5fb      	bpl.n	80100fc <_printf_i+0x194>
 8010104:	8019      	strh	r1, [r3, #0]
 8010106:	2300      	movs	r3, #0
 8010108:	9d03      	ldr	r5, [sp, #12]
 801010a:	6123      	str	r3, [r4, #16]
 801010c:	e7bf      	b.n	801008e <_printf_i+0x126>
 801010e:	681a      	ldr	r2, [r3, #0]
 8010110:	1d11      	adds	r1, r2, #4
 8010112:	6019      	str	r1, [r3, #0]
 8010114:	6815      	ldr	r5, [r2, #0]
 8010116:	2100      	movs	r1, #0
 8010118:	0028      	movs	r0, r5
 801011a:	6862      	ldr	r2, [r4, #4]
 801011c:	f000 f9aa 	bl	8010474 <memchr>
 8010120:	2800      	cmp	r0, #0
 8010122:	d001      	beq.n	8010128 <_printf_i+0x1c0>
 8010124:	1b40      	subs	r0, r0, r5
 8010126:	6060      	str	r0, [r4, #4]
 8010128:	6863      	ldr	r3, [r4, #4]
 801012a:	6123      	str	r3, [r4, #16]
 801012c:	2300      	movs	r3, #0
 801012e:	9a03      	ldr	r2, [sp, #12]
 8010130:	7013      	strb	r3, [r2, #0]
 8010132:	e7ac      	b.n	801008e <_printf_i+0x126>
 8010134:	002a      	movs	r2, r5
 8010136:	6923      	ldr	r3, [r4, #16]
 8010138:	9906      	ldr	r1, [sp, #24]
 801013a:	9805      	ldr	r0, [sp, #20]
 801013c:	9d07      	ldr	r5, [sp, #28]
 801013e:	47a8      	blx	r5
 8010140:	3001      	adds	r0, #1
 8010142:	d0ae      	beq.n	80100a2 <_printf_i+0x13a>
 8010144:	6823      	ldr	r3, [r4, #0]
 8010146:	079b      	lsls	r3, r3, #30
 8010148:	d415      	bmi.n	8010176 <_printf_i+0x20e>
 801014a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801014c:	68e0      	ldr	r0, [r4, #12]
 801014e:	4298      	cmp	r0, r3
 8010150:	daa9      	bge.n	80100a6 <_printf_i+0x13e>
 8010152:	0018      	movs	r0, r3
 8010154:	e7a7      	b.n	80100a6 <_printf_i+0x13e>
 8010156:	0022      	movs	r2, r4
 8010158:	2301      	movs	r3, #1
 801015a:	9906      	ldr	r1, [sp, #24]
 801015c:	9805      	ldr	r0, [sp, #20]
 801015e:	9e07      	ldr	r6, [sp, #28]
 8010160:	3219      	adds	r2, #25
 8010162:	47b0      	blx	r6
 8010164:	3001      	adds	r0, #1
 8010166:	d09c      	beq.n	80100a2 <_printf_i+0x13a>
 8010168:	3501      	adds	r5, #1
 801016a:	68e3      	ldr	r3, [r4, #12]
 801016c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801016e:	1a9b      	subs	r3, r3, r2
 8010170:	42ab      	cmp	r3, r5
 8010172:	dcf0      	bgt.n	8010156 <_printf_i+0x1ee>
 8010174:	e7e9      	b.n	801014a <_printf_i+0x1e2>
 8010176:	2500      	movs	r5, #0
 8010178:	e7f7      	b.n	801016a <_printf_i+0x202>
 801017a:	46c0      	nop			@ (mov r8, r8)
 801017c:	08011ac9 	.word	0x08011ac9
 8010180:	08011ada 	.word	0x08011ada

08010184 <__sflush_r>:
 8010184:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010186:	220c      	movs	r2, #12
 8010188:	5e8b      	ldrsh	r3, [r1, r2]
 801018a:	0005      	movs	r5, r0
 801018c:	000c      	movs	r4, r1
 801018e:	071a      	lsls	r2, r3, #28
 8010190:	d456      	bmi.n	8010240 <__sflush_r+0xbc>
 8010192:	684a      	ldr	r2, [r1, #4]
 8010194:	2a00      	cmp	r2, #0
 8010196:	dc02      	bgt.n	801019e <__sflush_r+0x1a>
 8010198:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 801019a:	2a00      	cmp	r2, #0
 801019c:	dd4e      	ble.n	801023c <__sflush_r+0xb8>
 801019e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80101a0:	2f00      	cmp	r7, #0
 80101a2:	d04b      	beq.n	801023c <__sflush_r+0xb8>
 80101a4:	2200      	movs	r2, #0
 80101a6:	2080      	movs	r0, #128	@ 0x80
 80101a8:	682e      	ldr	r6, [r5, #0]
 80101aa:	602a      	str	r2, [r5, #0]
 80101ac:	001a      	movs	r2, r3
 80101ae:	0140      	lsls	r0, r0, #5
 80101b0:	6a21      	ldr	r1, [r4, #32]
 80101b2:	4002      	ands	r2, r0
 80101b4:	4203      	tst	r3, r0
 80101b6:	d033      	beq.n	8010220 <__sflush_r+0x9c>
 80101b8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80101ba:	89a3      	ldrh	r3, [r4, #12]
 80101bc:	075b      	lsls	r3, r3, #29
 80101be:	d506      	bpl.n	80101ce <__sflush_r+0x4a>
 80101c0:	6863      	ldr	r3, [r4, #4]
 80101c2:	1ad2      	subs	r2, r2, r3
 80101c4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d001      	beq.n	80101ce <__sflush_r+0x4a>
 80101ca:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80101cc:	1ad2      	subs	r2, r2, r3
 80101ce:	2300      	movs	r3, #0
 80101d0:	0028      	movs	r0, r5
 80101d2:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80101d4:	6a21      	ldr	r1, [r4, #32]
 80101d6:	47b8      	blx	r7
 80101d8:	89a2      	ldrh	r2, [r4, #12]
 80101da:	1c43      	adds	r3, r0, #1
 80101dc:	d106      	bne.n	80101ec <__sflush_r+0x68>
 80101de:	6829      	ldr	r1, [r5, #0]
 80101e0:	291d      	cmp	r1, #29
 80101e2:	d846      	bhi.n	8010272 <__sflush_r+0xee>
 80101e4:	4b29      	ldr	r3, [pc, #164]	@ (801028c <__sflush_r+0x108>)
 80101e6:	410b      	asrs	r3, r1
 80101e8:	07db      	lsls	r3, r3, #31
 80101ea:	d442      	bmi.n	8010272 <__sflush_r+0xee>
 80101ec:	2300      	movs	r3, #0
 80101ee:	6063      	str	r3, [r4, #4]
 80101f0:	6923      	ldr	r3, [r4, #16]
 80101f2:	6023      	str	r3, [r4, #0]
 80101f4:	04d2      	lsls	r2, r2, #19
 80101f6:	d505      	bpl.n	8010204 <__sflush_r+0x80>
 80101f8:	1c43      	adds	r3, r0, #1
 80101fa:	d102      	bne.n	8010202 <__sflush_r+0x7e>
 80101fc:	682b      	ldr	r3, [r5, #0]
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d100      	bne.n	8010204 <__sflush_r+0x80>
 8010202:	6560      	str	r0, [r4, #84]	@ 0x54
 8010204:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010206:	602e      	str	r6, [r5, #0]
 8010208:	2900      	cmp	r1, #0
 801020a:	d017      	beq.n	801023c <__sflush_r+0xb8>
 801020c:	0023      	movs	r3, r4
 801020e:	3344      	adds	r3, #68	@ 0x44
 8010210:	4299      	cmp	r1, r3
 8010212:	d002      	beq.n	801021a <__sflush_r+0x96>
 8010214:	0028      	movs	r0, r5
 8010216:	f7fe fa55 	bl	800e6c4 <_free_r>
 801021a:	2300      	movs	r3, #0
 801021c:	6363      	str	r3, [r4, #52]	@ 0x34
 801021e:	e00d      	b.n	801023c <__sflush_r+0xb8>
 8010220:	2301      	movs	r3, #1
 8010222:	0028      	movs	r0, r5
 8010224:	47b8      	blx	r7
 8010226:	0002      	movs	r2, r0
 8010228:	1c43      	adds	r3, r0, #1
 801022a:	d1c6      	bne.n	80101ba <__sflush_r+0x36>
 801022c:	682b      	ldr	r3, [r5, #0]
 801022e:	2b00      	cmp	r3, #0
 8010230:	d0c3      	beq.n	80101ba <__sflush_r+0x36>
 8010232:	2b1d      	cmp	r3, #29
 8010234:	d001      	beq.n	801023a <__sflush_r+0xb6>
 8010236:	2b16      	cmp	r3, #22
 8010238:	d11a      	bne.n	8010270 <__sflush_r+0xec>
 801023a:	602e      	str	r6, [r5, #0]
 801023c:	2000      	movs	r0, #0
 801023e:	e01e      	b.n	801027e <__sflush_r+0xfa>
 8010240:	690e      	ldr	r6, [r1, #16]
 8010242:	2e00      	cmp	r6, #0
 8010244:	d0fa      	beq.n	801023c <__sflush_r+0xb8>
 8010246:	680f      	ldr	r7, [r1, #0]
 8010248:	600e      	str	r6, [r1, #0]
 801024a:	1bba      	subs	r2, r7, r6
 801024c:	9201      	str	r2, [sp, #4]
 801024e:	2200      	movs	r2, #0
 8010250:	079b      	lsls	r3, r3, #30
 8010252:	d100      	bne.n	8010256 <__sflush_r+0xd2>
 8010254:	694a      	ldr	r2, [r1, #20]
 8010256:	60a2      	str	r2, [r4, #8]
 8010258:	9b01      	ldr	r3, [sp, #4]
 801025a:	2b00      	cmp	r3, #0
 801025c:	ddee      	ble.n	801023c <__sflush_r+0xb8>
 801025e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8010260:	0032      	movs	r2, r6
 8010262:	001f      	movs	r7, r3
 8010264:	0028      	movs	r0, r5
 8010266:	9b01      	ldr	r3, [sp, #4]
 8010268:	6a21      	ldr	r1, [r4, #32]
 801026a:	47b8      	blx	r7
 801026c:	2800      	cmp	r0, #0
 801026e:	dc07      	bgt.n	8010280 <__sflush_r+0xfc>
 8010270:	89a2      	ldrh	r2, [r4, #12]
 8010272:	2340      	movs	r3, #64	@ 0x40
 8010274:	2001      	movs	r0, #1
 8010276:	4313      	orrs	r3, r2
 8010278:	b21b      	sxth	r3, r3
 801027a:	81a3      	strh	r3, [r4, #12]
 801027c:	4240      	negs	r0, r0
 801027e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010280:	9b01      	ldr	r3, [sp, #4]
 8010282:	1836      	adds	r6, r6, r0
 8010284:	1a1b      	subs	r3, r3, r0
 8010286:	9301      	str	r3, [sp, #4]
 8010288:	e7e6      	b.n	8010258 <__sflush_r+0xd4>
 801028a:	46c0      	nop			@ (mov r8, r8)
 801028c:	dfbffffe 	.word	0xdfbffffe

08010290 <_fflush_r>:
 8010290:	690b      	ldr	r3, [r1, #16]
 8010292:	b570      	push	{r4, r5, r6, lr}
 8010294:	0005      	movs	r5, r0
 8010296:	000c      	movs	r4, r1
 8010298:	2b00      	cmp	r3, #0
 801029a:	d102      	bne.n	80102a2 <_fflush_r+0x12>
 801029c:	2500      	movs	r5, #0
 801029e:	0028      	movs	r0, r5
 80102a0:	bd70      	pop	{r4, r5, r6, pc}
 80102a2:	2800      	cmp	r0, #0
 80102a4:	d004      	beq.n	80102b0 <_fflush_r+0x20>
 80102a6:	6a03      	ldr	r3, [r0, #32]
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	d101      	bne.n	80102b0 <_fflush_r+0x20>
 80102ac:	f7fe f8c6 	bl	800e43c <__sinit>
 80102b0:	220c      	movs	r2, #12
 80102b2:	5ea3      	ldrsh	r3, [r4, r2]
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d0f1      	beq.n	801029c <_fflush_r+0xc>
 80102b8:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80102ba:	07d2      	lsls	r2, r2, #31
 80102bc:	d404      	bmi.n	80102c8 <_fflush_r+0x38>
 80102be:	059b      	lsls	r3, r3, #22
 80102c0:	d402      	bmi.n	80102c8 <_fflush_r+0x38>
 80102c2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80102c4:	f7fe f9ed 	bl	800e6a2 <__retarget_lock_acquire_recursive>
 80102c8:	0028      	movs	r0, r5
 80102ca:	0021      	movs	r1, r4
 80102cc:	f7ff ff5a 	bl	8010184 <__sflush_r>
 80102d0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80102d2:	0005      	movs	r5, r0
 80102d4:	07db      	lsls	r3, r3, #31
 80102d6:	d4e2      	bmi.n	801029e <_fflush_r+0xe>
 80102d8:	89a3      	ldrh	r3, [r4, #12]
 80102da:	059b      	lsls	r3, r3, #22
 80102dc:	d4df      	bmi.n	801029e <_fflush_r+0xe>
 80102de:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80102e0:	f7fe f9e0 	bl	800e6a4 <__retarget_lock_release_recursive>
 80102e4:	e7db      	b.n	801029e <_fflush_r+0xe>

080102e6 <__swbuf_r>:
 80102e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102e8:	0006      	movs	r6, r0
 80102ea:	000d      	movs	r5, r1
 80102ec:	0014      	movs	r4, r2
 80102ee:	2800      	cmp	r0, #0
 80102f0:	d004      	beq.n	80102fc <__swbuf_r+0x16>
 80102f2:	6a03      	ldr	r3, [r0, #32]
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d101      	bne.n	80102fc <__swbuf_r+0x16>
 80102f8:	f7fe f8a0 	bl	800e43c <__sinit>
 80102fc:	69a3      	ldr	r3, [r4, #24]
 80102fe:	60a3      	str	r3, [r4, #8]
 8010300:	89a3      	ldrh	r3, [r4, #12]
 8010302:	071b      	lsls	r3, r3, #28
 8010304:	d502      	bpl.n	801030c <__swbuf_r+0x26>
 8010306:	6923      	ldr	r3, [r4, #16]
 8010308:	2b00      	cmp	r3, #0
 801030a:	d109      	bne.n	8010320 <__swbuf_r+0x3a>
 801030c:	0021      	movs	r1, r4
 801030e:	0030      	movs	r0, r6
 8010310:	f000 f82c 	bl	801036c <__swsetup_r>
 8010314:	2800      	cmp	r0, #0
 8010316:	d003      	beq.n	8010320 <__swbuf_r+0x3a>
 8010318:	2501      	movs	r5, #1
 801031a:	426d      	negs	r5, r5
 801031c:	0028      	movs	r0, r5
 801031e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010320:	6923      	ldr	r3, [r4, #16]
 8010322:	6820      	ldr	r0, [r4, #0]
 8010324:	b2ef      	uxtb	r7, r5
 8010326:	1ac0      	subs	r0, r0, r3
 8010328:	6963      	ldr	r3, [r4, #20]
 801032a:	b2ed      	uxtb	r5, r5
 801032c:	4283      	cmp	r3, r0
 801032e:	dc05      	bgt.n	801033c <__swbuf_r+0x56>
 8010330:	0021      	movs	r1, r4
 8010332:	0030      	movs	r0, r6
 8010334:	f7ff ffac 	bl	8010290 <_fflush_r>
 8010338:	2800      	cmp	r0, #0
 801033a:	d1ed      	bne.n	8010318 <__swbuf_r+0x32>
 801033c:	68a3      	ldr	r3, [r4, #8]
 801033e:	3001      	adds	r0, #1
 8010340:	3b01      	subs	r3, #1
 8010342:	60a3      	str	r3, [r4, #8]
 8010344:	6823      	ldr	r3, [r4, #0]
 8010346:	1c5a      	adds	r2, r3, #1
 8010348:	6022      	str	r2, [r4, #0]
 801034a:	701f      	strb	r7, [r3, #0]
 801034c:	6963      	ldr	r3, [r4, #20]
 801034e:	4283      	cmp	r3, r0
 8010350:	d004      	beq.n	801035c <__swbuf_r+0x76>
 8010352:	89a3      	ldrh	r3, [r4, #12]
 8010354:	07db      	lsls	r3, r3, #31
 8010356:	d5e1      	bpl.n	801031c <__swbuf_r+0x36>
 8010358:	2d0a      	cmp	r5, #10
 801035a:	d1df      	bne.n	801031c <__swbuf_r+0x36>
 801035c:	0021      	movs	r1, r4
 801035e:	0030      	movs	r0, r6
 8010360:	f7ff ff96 	bl	8010290 <_fflush_r>
 8010364:	2800      	cmp	r0, #0
 8010366:	d0d9      	beq.n	801031c <__swbuf_r+0x36>
 8010368:	e7d6      	b.n	8010318 <__swbuf_r+0x32>
	...

0801036c <__swsetup_r>:
 801036c:	4b2d      	ldr	r3, [pc, #180]	@ (8010424 <__swsetup_r+0xb8>)
 801036e:	b570      	push	{r4, r5, r6, lr}
 8010370:	0005      	movs	r5, r0
 8010372:	6818      	ldr	r0, [r3, #0]
 8010374:	000c      	movs	r4, r1
 8010376:	2800      	cmp	r0, #0
 8010378:	d004      	beq.n	8010384 <__swsetup_r+0x18>
 801037a:	6a03      	ldr	r3, [r0, #32]
 801037c:	2b00      	cmp	r3, #0
 801037e:	d101      	bne.n	8010384 <__swsetup_r+0x18>
 8010380:	f7fe f85c 	bl	800e43c <__sinit>
 8010384:	230c      	movs	r3, #12
 8010386:	5ee2      	ldrsh	r2, [r4, r3]
 8010388:	0713      	lsls	r3, r2, #28
 801038a:	d423      	bmi.n	80103d4 <__swsetup_r+0x68>
 801038c:	06d3      	lsls	r3, r2, #27
 801038e:	d407      	bmi.n	80103a0 <__swsetup_r+0x34>
 8010390:	2309      	movs	r3, #9
 8010392:	602b      	str	r3, [r5, #0]
 8010394:	2340      	movs	r3, #64	@ 0x40
 8010396:	2001      	movs	r0, #1
 8010398:	4313      	orrs	r3, r2
 801039a:	81a3      	strh	r3, [r4, #12]
 801039c:	4240      	negs	r0, r0
 801039e:	e03a      	b.n	8010416 <__swsetup_r+0xaa>
 80103a0:	0752      	lsls	r2, r2, #29
 80103a2:	d513      	bpl.n	80103cc <__swsetup_r+0x60>
 80103a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80103a6:	2900      	cmp	r1, #0
 80103a8:	d008      	beq.n	80103bc <__swsetup_r+0x50>
 80103aa:	0023      	movs	r3, r4
 80103ac:	3344      	adds	r3, #68	@ 0x44
 80103ae:	4299      	cmp	r1, r3
 80103b0:	d002      	beq.n	80103b8 <__swsetup_r+0x4c>
 80103b2:	0028      	movs	r0, r5
 80103b4:	f7fe f986 	bl	800e6c4 <_free_r>
 80103b8:	2300      	movs	r3, #0
 80103ba:	6363      	str	r3, [r4, #52]	@ 0x34
 80103bc:	2224      	movs	r2, #36	@ 0x24
 80103be:	89a3      	ldrh	r3, [r4, #12]
 80103c0:	4393      	bics	r3, r2
 80103c2:	81a3      	strh	r3, [r4, #12]
 80103c4:	2300      	movs	r3, #0
 80103c6:	6063      	str	r3, [r4, #4]
 80103c8:	6923      	ldr	r3, [r4, #16]
 80103ca:	6023      	str	r3, [r4, #0]
 80103cc:	2308      	movs	r3, #8
 80103ce:	89a2      	ldrh	r2, [r4, #12]
 80103d0:	4313      	orrs	r3, r2
 80103d2:	81a3      	strh	r3, [r4, #12]
 80103d4:	6923      	ldr	r3, [r4, #16]
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d10b      	bne.n	80103f2 <__swsetup_r+0x86>
 80103da:	21a0      	movs	r1, #160	@ 0xa0
 80103dc:	2280      	movs	r2, #128	@ 0x80
 80103de:	89a3      	ldrh	r3, [r4, #12]
 80103e0:	0089      	lsls	r1, r1, #2
 80103e2:	0092      	lsls	r2, r2, #2
 80103e4:	400b      	ands	r3, r1
 80103e6:	4293      	cmp	r3, r2
 80103e8:	d003      	beq.n	80103f2 <__swsetup_r+0x86>
 80103ea:	0021      	movs	r1, r4
 80103ec:	0028      	movs	r0, r5
 80103ee:	f000 f90d 	bl	801060c <__smakebuf_r>
 80103f2:	230c      	movs	r3, #12
 80103f4:	5ee2      	ldrsh	r2, [r4, r3]
 80103f6:	2101      	movs	r1, #1
 80103f8:	0013      	movs	r3, r2
 80103fa:	400b      	ands	r3, r1
 80103fc:	420a      	tst	r2, r1
 80103fe:	d00b      	beq.n	8010418 <__swsetup_r+0xac>
 8010400:	2300      	movs	r3, #0
 8010402:	60a3      	str	r3, [r4, #8]
 8010404:	6963      	ldr	r3, [r4, #20]
 8010406:	425b      	negs	r3, r3
 8010408:	61a3      	str	r3, [r4, #24]
 801040a:	2000      	movs	r0, #0
 801040c:	6923      	ldr	r3, [r4, #16]
 801040e:	4283      	cmp	r3, r0
 8010410:	d101      	bne.n	8010416 <__swsetup_r+0xaa>
 8010412:	0613      	lsls	r3, r2, #24
 8010414:	d4be      	bmi.n	8010394 <__swsetup_r+0x28>
 8010416:	bd70      	pop	{r4, r5, r6, pc}
 8010418:	0791      	lsls	r1, r2, #30
 801041a:	d400      	bmi.n	801041e <__swsetup_r+0xb2>
 801041c:	6963      	ldr	r3, [r4, #20]
 801041e:	60a3      	str	r3, [r4, #8]
 8010420:	e7f3      	b.n	801040a <__swsetup_r+0x9e>
 8010422:	46c0      	nop			@ (mov r8, r8)
 8010424:	20000b4c 	.word	0x20000b4c

08010428 <memmove>:
 8010428:	b510      	push	{r4, lr}
 801042a:	4288      	cmp	r0, r1
 801042c:	d806      	bhi.n	801043c <memmove+0x14>
 801042e:	2300      	movs	r3, #0
 8010430:	429a      	cmp	r2, r3
 8010432:	d008      	beq.n	8010446 <memmove+0x1e>
 8010434:	5ccc      	ldrb	r4, [r1, r3]
 8010436:	54c4      	strb	r4, [r0, r3]
 8010438:	3301      	adds	r3, #1
 801043a:	e7f9      	b.n	8010430 <memmove+0x8>
 801043c:	188b      	adds	r3, r1, r2
 801043e:	4298      	cmp	r0, r3
 8010440:	d2f5      	bcs.n	801042e <memmove+0x6>
 8010442:	3a01      	subs	r2, #1
 8010444:	d200      	bcs.n	8010448 <memmove+0x20>
 8010446:	bd10      	pop	{r4, pc}
 8010448:	5c8b      	ldrb	r3, [r1, r2]
 801044a:	5483      	strb	r3, [r0, r2]
 801044c:	e7f9      	b.n	8010442 <memmove+0x1a>
	...

08010450 <_sbrk_r>:
 8010450:	2300      	movs	r3, #0
 8010452:	b570      	push	{r4, r5, r6, lr}
 8010454:	4d06      	ldr	r5, [pc, #24]	@ (8010470 <_sbrk_r+0x20>)
 8010456:	0004      	movs	r4, r0
 8010458:	0008      	movs	r0, r1
 801045a:	602b      	str	r3, [r5, #0]
 801045c:	f7f6 ffc6 	bl	80073ec <_sbrk>
 8010460:	1c43      	adds	r3, r0, #1
 8010462:	d103      	bne.n	801046c <_sbrk_r+0x1c>
 8010464:	682b      	ldr	r3, [r5, #0]
 8010466:	2b00      	cmp	r3, #0
 8010468:	d000      	beq.n	801046c <_sbrk_r+0x1c>
 801046a:	6023      	str	r3, [r4, #0]
 801046c:	bd70      	pop	{r4, r5, r6, pc}
 801046e:	46c0      	nop			@ (mov r8, r8)
 8010470:	20001f9c 	.word	0x20001f9c

08010474 <memchr>:
 8010474:	b2c9      	uxtb	r1, r1
 8010476:	1882      	adds	r2, r0, r2
 8010478:	4290      	cmp	r0, r2
 801047a:	d101      	bne.n	8010480 <memchr+0xc>
 801047c:	2000      	movs	r0, #0
 801047e:	4770      	bx	lr
 8010480:	7803      	ldrb	r3, [r0, #0]
 8010482:	428b      	cmp	r3, r1
 8010484:	d0fb      	beq.n	801047e <memchr+0xa>
 8010486:	3001      	adds	r0, #1
 8010488:	e7f6      	b.n	8010478 <memchr+0x4>
	...

0801048c <__assert_func>:
 801048c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801048e:	0014      	movs	r4, r2
 8010490:	001a      	movs	r2, r3
 8010492:	4b09      	ldr	r3, [pc, #36]	@ (80104b8 <__assert_func+0x2c>)
 8010494:	0005      	movs	r5, r0
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	000e      	movs	r6, r1
 801049a:	68d8      	ldr	r0, [r3, #12]
 801049c:	4b07      	ldr	r3, [pc, #28]	@ (80104bc <__assert_func+0x30>)
 801049e:	2c00      	cmp	r4, #0
 80104a0:	d101      	bne.n	80104a6 <__assert_func+0x1a>
 80104a2:	4b07      	ldr	r3, [pc, #28]	@ (80104c0 <__assert_func+0x34>)
 80104a4:	001c      	movs	r4, r3
 80104a6:	4907      	ldr	r1, [pc, #28]	@ (80104c4 <__assert_func+0x38>)
 80104a8:	9301      	str	r3, [sp, #4]
 80104aa:	9402      	str	r4, [sp, #8]
 80104ac:	002b      	movs	r3, r5
 80104ae:	9600      	str	r6, [sp, #0]
 80104b0:	f000 f872 	bl	8010598 <fiprintf>
 80104b4:	f000 f910 	bl	80106d8 <abort>
 80104b8:	20000b4c 	.word	0x20000b4c
 80104bc:	08011aeb 	.word	0x08011aeb
 80104c0:	08011b26 	.word	0x08011b26
 80104c4:	08011af8 	.word	0x08011af8

080104c8 <_calloc_r>:
 80104c8:	b570      	push	{r4, r5, r6, lr}
 80104ca:	0c0b      	lsrs	r3, r1, #16
 80104cc:	0c15      	lsrs	r5, r2, #16
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d11e      	bne.n	8010510 <_calloc_r+0x48>
 80104d2:	2d00      	cmp	r5, #0
 80104d4:	d10c      	bne.n	80104f0 <_calloc_r+0x28>
 80104d6:	b289      	uxth	r1, r1
 80104d8:	b294      	uxth	r4, r2
 80104da:	434c      	muls	r4, r1
 80104dc:	0021      	movs	r1, r4
 80104de:	f7fe fcb7 	bl	800ee50 <_malloc_r>
 80104e2:	1e05      	subs	r5, r0, #0
 80104e4:	d01a      	beq.n	801051c <_calloc_r+0x54>
 80104e6:	0022      	movs	r2, r4
 80104e8:	2100      	movs	r1, #0
 80104ea:	f7fe f847 	bl	800e57c <memset>
 80104ee:	e016      	b.n	801051e <_calloc_r+0x56>
 80104f0:	1c2b      	adds	r3, r5, #0
 80104f2:	1c0c      	adds	r4, r1, #0
 80104f4:	b289      	uxth	r1, r1
 80104f6:	b292      	uxth	r2, r2
 80104f8:	434a      	muls	r2, r1
 80104fa:	b29b      	uxth	r3, r3
 80104fc:	b2a1      	uxth	r1, r4
 80104fe:	4359      	muls	r1, r3
 8010500:	0c14      	lsrs	r4, r2, #16
 8010502:	190c      	adds	r4, r1, r4
 8010504:	0c23      	lsrs	r3, r4, #16
 8010506:	d107      	bne.n	8010518 <_calloc_r+0x50>
 8010508:	0424      	lsls	r4, r4, #16
 801050a:	b292      	uxth	r2, r2
 801050c:	4314      	orrs	r4, r2
 801050e:	e7e5      	b.n	80104dc <_calloc_r+0x14>
 8010510:	2d00      	cmp	r5, #0
 8010512:	d101      	bne.n	8010518 <_calloc_r+0x50>
 8010514:	1c14      	adds	r4, r2, #0
 8010516:	e7ed      	b.n	80104f4 <_calloc_r+0x2c>
 8010518:	230c      	movs	r3, #12
 801051a:	6003      	str	r3, [r0, #0]
 801051c:	2500      	movs	r5, #0
 801051e:	0028      	movs	r0, r5
 8010520:	bd70      	pop	{r4, r5, r6, pc}
	...

08010524 <malloc>:
 8010524:	b510      	push	{r4, lr}
 8010526:	4b03      	ldr	r3, [pc, #12]	@ (8010534 <malloc+0x10>)
 8010528:	0001      	movs	r1, r0
 801052a:	6818      	ldr	r0, [r3, #0]
 801052c:	f7fe fc90 	bl	800ee50 <_malloc_r>
 8010530:	bd10      	pop	{r4, pc}
 8010532:	46c0      	nop			@ (mov r8, r8)
 8010534:	20000b4c 	.word	0x20000b4c

08010538 <_realloc_r>:
 8010538:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801053a:	0006      	movs	r6, r0
 801053c:	000c      	movs	r4, r1
 801053e:	0015      	movs	r5, r2
 8010540:	2900      	cmp	r1, #0
 8010542:	d105      	bne.n	8010550 <_realloc_r+0x18>
 8010544:	0011      	movs	r1, r2
 8010546:	f7fe fc83 	bl	800ee50 <_malloc_r>
 801054a:	0004      	movs	r4, r0
 801054c:	0020      	movs	r0, r4
 801054e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010550:	2a00      	cmp	r2, #0
 8010552:	d103      	bne.n	801055c <_realloc_r+0x24>
 8010554:	f7fe f8b6 	bl	800e6c4 <_free_r>
 8010558:	2400      	movs	r4, #0
 801055a:	e7f7      	b.n	801054c <_realloc_r+0x14>
 801055c:	f000 f8c3 	bl	80106e6 <_malloc_usable_size_r>
 8010560:	0007      	movs	r7, r0
 8010562:	4285      	cmp	r5, r0
 8010564:	d802      	bhi.n	801056c <_realloc_r+0x34>
 8010566:	0843      	lsrs	r3, r0, #1
 8010568:	42ab      	cmp	r3, r5
 801056a:	d3ef      	bcc.n	801054c <_realloc_r+0x14>
 801056c:	0029      	movs	r1, r5
 801056e:	0030      	movs	r0, r6
 8010570:	f7fe fc6e 	bl	800ee50 <_malloc_r>
 8010574:	9001      	str	r0, [sp, #4]
 8010576:	2800      	cmp	r0, #0
 8010578:	d0ee      	beq.n	8010558 <_realloc_r+0x20>
 801057a:	002a      	movs	r2, r5
 801057c:	42bd      	cmp	r5, r7
 801057e:	d900      	bls.n	8010582 <_realloc_r+0x4a>
 8010580:	003a      	movs	r2, r7
 8010582:	0021      	movs	r1, r4
 8010584:	9801      	ldr	r0, [sp, #4]
 8010586:	f7fe f88e 	bl	800e6a6 <memcpy>
 801058a:	0021      	movs	r1, r4
 801058c:	0030      	movs	r0, r6
 801058e:	f7fe f899 	bl	800e6c4 <_free_r>
 8010592:	9c01      	ldr	r4, [sp, #4]
 8010594:	e7da      	b.n	801054c <_realloc_r+0x14>
	...

08010598 <fiprintf>:
 8010598:	b40e      	push	{r1, r2, r3}
 801059a:	b517      	push	{r0, r1, r2, r4, lr}
 801059c:	4c05      	ldr	r4, [pc, #20]	@ (80105b4 <fiprintf+0x1c>)
 801059e:	ab05      	add	r3, sp, #20
 80105a0:	cb04      	ldmia	r3!, {r2}
 80105a2:	0001      	movs	r1, r0
 80105a4:	6820      	ldr	r0, [r4, #0]
 80105a6:	9301      	str	r3, [sp, #4]
 80105a8:	f7ff fb52 	bl	800fc50 <_vfiprintf_r>
 80105ac:	bc1e      	pop	{r1, r2, r3, r4}
 80105ae:	bc08      	pop	{r3}
 80105b0:	b003      	add	sp, #12
 80105b2:	4718      	bx	r3
 80105b4:	20000b4c 	.word	0x20000b4c

080105b8 <__swhatbuf_r>:
 80105b8:	b570      	push	{r4, r5, r6, lr}
 80105ba:	000e      	movs	r6, r1
 80105bc:	001d      	movs	r5, r3
 80105be:	230e      	movs	r3, #14
 80105c0:	5ec9      	ldrsh	r1, [r1, r3]
 80105c2:	0014      	movs	r4, r2
 80105c4:	b096      	sub	sp, #88	@ 0x58
 80105c6:	2900      	cmp	r1, #0
 80105c8:	da0c      	bge.n	80105e4 <__swhatbuf_r+0x2c>
 80105ca:	89b2      	ldrh	r2, [r6, #12]
 80105cc:	2380      	movs	r3, #128	@ 0x80
 80105ce:	0011      	movs	r1, r2
 80105d0:	4019      	ands	r1, r3
 80105d2:	421a      	tst	r2, r3
 80105d4:	d114      	bne.n	8010600 <__swhatbuf_r+0x48>
 80105d6:	2380      	movs	r3, #128	@ 0x80
 80105d8:	00db      	lsls	r3, r3, #3
 80105da:	2000      	movs	r0, #0
 80105dc:	6029      	str	r1, [r5, #0]
 80105de:	6023      	str	r3, [r4, #0]
 80105e0:	b016      	add	sp, #88	@ 0x58
 80105e2:	bd70      	pop	{r4, r5, r6, pc}
 80105e4:	466a      	mov	r2, sp
 80105e6:	f000 f853 	bl	8010690 <_fstat_r>
 80105ea:	2800      	cmp	r0, #0
 80105ec:	dbed      	blt.n	80105ca <__swhatbuf_r+0x12>
 80105ee:	23f0      	movs	r3, #240	@ 0xf0
 80105f0:	9901      	ldr	r1, [sp, #4]
 80105f2:	021b      	lsls	r3, r3, #8
 80105f4:	4019      	ands	r1, r3
 80105f6:	4b04      	ldr	r3, [pc, #16]	@ (8010608 <__swhatbuf_r+0x50>)
 80105f8:	18c9      	adds	r1, r1, r3
 80105fa:	424b      	negs	r3, r1
 80105fc:	4159      	adcs	r1, r3
 80105fe:	e7ea      	b.n	80105d6 <__swhatbuf_r+0x1e>
 8010600:	2100      	movs	r1, #0
 8010602:	2340      	movs	r3, #64	@ 0x40
 8010604:	e7e9      	b.n	80105da <__swhatbuf_r+0x22>
 8010606:	46c0      	nop			@ (mov r8, r8)
 8010608:	ffffe000 	.word	0xffffe000

0801060c <__smakebuf_r>:
 801060c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801060e:	2602      	movs	r6, #2
 8010610:	898b      	ldrh	r3, [r1, #12]
 8010612:	0005      	movs	r5, r0
 8010614:	000c      	movs	r4, r1
 8010616:	b085      	sub	sp, #20
 8010618:	4233      	tst	r3, r6
 801061a:	d007      	beq.n	801062c <__smakebuf_r+0x20>
 801061c:	0023      	movs	r3, r4
 801061e:	3347      	adds	r3, #71	@ 0x47
 8010620:	6023      	str	r3, [r4, #0]
 8010622:	6123      	str	r3, [r4, #16]
 8010624:	2301      	movs	r3, #1
 8010626:	6163      	str	r3, [r4, #20]
 8010628:	b005      	add	sp, #20
 801062a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801062c:	ab03      	add	r3, sp, #12
 801062e:	aa02      	add	r2, sp, #8
 8010630:	f7ff ffc2 	bl	80105b8 <__swhatbuf_r>
 8010634:	9f02      	ldr	r7, [sp, #8]
 8010636:	9001      	str	r0, [sp, #4]
 8010638:	0039      	movs	r1, r7
 801063a:	0028      	movs	r0, r5
 801063c:	f7fe fc08 	bl	800ee50 <_malloc_r>
 8010640:	2800      	cmp	r0, #0
 8010642:	d108      	bne.n	8010656 <__smakebuf_r+0x4a>
 8010644:	220c      	movs	r2, #12
 8010646:	5ea3      	ldrsh	r3, [r4, r2]
 8010648:	059a      	lsls	r2, r3, #22
 801064a:	d4ed      	bmi.n	8010628 <__smakebuf_r+0x1c>
 801064c:	2203      	movs	r2, #3
 801064e:	4393      	bics	r3, r2
 8010650:	431e      	orrs	r6, r3
 8010652:	81a6      	strh	r6, [r4, #12]
 8010654:	e7e2      	b.n	801061c <__smakebuf_r+0x10>
 8010656:	2380      	movs	r3, #128	@ 0x80
 8010658:	89a2      	ldrh	r2, [r4, #12]
 801065a:	6020      	str	r0, [r4, #0]
 801065c:	4313      	orrs	r3, r2
 801065e:	81a3      	strh	r3, [r4, #12]
 8010660:	9b03      	ldr	r3, [sp, #12]
 8010662:	6120      	str	r0, [r4, #16]
 8010664:	6167      	str	r7, [r4, #20]
 8010666:	2b00      	cmp	r3, #0
 8010668:	d00c      	beq.n	8010684 <__smakebuf_r+0x78>
 801066a:	0028      	movs	r0, r5
 801066c:	230e      	movs	r3, #14
 801066e:	5ee1      	ldrsh	r1, [r4, r3]
 8010670:	f000 f820 	bl	80106b4 <_isatty_r>
 8010674:	2800      	cmp	r0, #0
 8010676:	d005      	beq.n	8010684 <__smakebuf_r+0x78>
 8010678:	2303      	movs	r3, #3
 801067a:	89a2      	ldrh	r2, [r4, #12]
 801067c:	439a      	bics	r2, r3
 801067e:	3b02      	subs	r3, #2
 8010680:	4313      	orrs	r3, r2
 8010682:	81a3      	strh	r3, [r4, #12]
 8010684:	89a3      	ldrh	r3, [r4, #12]
 8010686:	9a01      	ldr	r2, [sp, #4]
 8010688:	4313      	orrs	r3, r2
 801068a:	81a3      	strh	r3, [r4, #12]
 801068c:	e7cc      	b.n	8010628 <__smakebuf_r+0x1c>
	...

08010690 <_fstat_r>:
 8010690:	2300      	movs	r3, #0
 8010692:	b570      	push	{r4, r5, r6, lr}
 8010694:	4d06      	ldr	r5, [pc, #24]	@ (80106b0 <_fstat_r+0x20>)
 8010696:	0004      	movs	r4, r0
 8010698:	0008      	movs	r0, r1
 801069a:	0011      	movs	r1, r2
 801069c:	602b      	str	r3, [r5, #0]
 801069e:	f7f6 fe83 	bl	80073a8 <_fstat>
 80106a2:	1c43      	adds	r3, r0, #1
 80106a4:	d103      	bne.n	80106ae <_fstat_r+0x1e>
 80106a6:	682b      	ldr	r3, [r5, #0]
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d000      	beq.n	80106ae <_fstat_r+0x1e>
 80106ac:	6023      	str	r3, [r4, #0]
 80106ae:	bd70      	pop	{r4, r5, r6, pc}
 80106b0:	20001f9c 	.word	0x20001f9c

080106b4 <_isatty_r>:
 80106b4:	2300      	movs	r3, #0
 80106b6:	b570      	push	{r4, r5, r6, lr}
 80106b8:	4d06      	ldr	r5, [pc, #24]	@ (80106d4 <_isatty_r+0x20>)
 80106ba:	0004      	movs	r4, r0
 80106bc:	0008      	movs	r0, r1
 80106be:	602b      	str	r3, [r5, #0]
 80106c0:	f7f6 fe80 	bl	80073c4 <_isatty>
 80106c4:	1c43      	adds	r3, r0, #1
 80106c6:	d103      	bne.n	80106d0 <_isatty_r+0x1c>
 80106c8:	682b      	ldr	r3, [r5, #0]
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d000      	beq.n	80106d0 <_isatty_r+0x1c>
 80106ce:	6023      	str	r3, [r4, #0]
 80106d0:	bd70      	pop	{r4, r5, r6, pc}
 80106d2:	46c0      	nop			@ (mov r8, r8)
 80106d4:	20001f9c 	.word	0x20001f9c

080106d8 <abort>:
 80106d8:	2006      	movs	r0, #6
 80106da:	b510      	push	{r4, lr}
 80106dc:	f000 f834 	bl	8010748 <raise>
 80106e0:	2001      	movs	r0, #1
 80106e2:	f7f6 fe11 	bl	8007308 <_exit>

080106e6 <_malloc_usable_size_r>:
 80106e6:	1f0b      	subs	r3, r1, #4
 80106e8:	681b      	ldr	r3, [r3, #0]
 80106ea:	1f18      	subs	r0, r3, #4
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	da01      	bge.n	80106f4 <_malloc_usable_size_r+0xe>
 80106f0:	580b      	ldr	r3, [r1, r0]
 80106f2:	18c0      	adds	r0, r0, r3
 80106f4:	4770      	bx	lr

080106f6 <_raise_r>:
 80106f6:	b570      	push	{r4, r5, r6, lr}
 80106f8:	0004      	movs	r4, r0
 80106fa:	000d      	movs	r5, r1
 80106fc:	291f      	cmp	r1, #31
 80106fe:	d904      	bls.n	801070a <_raise_r+0x14>
 8010700:	2316      	movs	r3, #22
 8010702:	6003      	str	r3, [r0, #0]
 8010704:	2001      	movs	r0, #1
 8010706:	4240      	negs	r0, r0
 8010708:	bd70      	pop	{r4, r5, r6, pc}
 801070a:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 801070c:	2b00      	cmp	r3, #0
 801070e:	d004      	beq.n	801071a <_raise_r+0x24>
 8010710:	008a      	lsls	r2, r1, #2
 8010712:	189b      	adds	r3, r3, r2
 8010714:	681a      	ldr	r2, [r3, #0]
 8010716:	2a00      	cmp	r2, #0
 8010718:	d108      	bne.n	801072c <_raise_r+0x36>
 801071a:	0020      	movs	r0, r4
 801071c:	f000 f830 	bl	8010780 <_getpid_r>
 8010720:	002a      	movs	r2, r5
 8010722:	0001      	movs	r1, r0
 8010724:	0020      	movs	r0, r4
 8010726:	f000 f819 	bl	801075c <_kill_r>
 801072a:	e7ed      	b.n	8010708 <_raise_r+0x12>
 801072c:	2a01      	cmp	r2, #1
 801072e:	d009      	beq.n	8010744 <_raise_r+0x4e>
 8010730:	1c51      	adds	r1, r2, #1
 8010732:	d103      	bne.n	801073c <_raise_r+0x46>
 8010734:	2316      	movs	r3, #22
 8010736:	6003      	str	r3, [r0, #0]
 8010738:	2001      	movs	r0, #1
 801073a:	e7e5      	b.n	8010708 <_raise_r+0x12>
 801073c:	2100      	movs	r1, #0
 801073e:	0028      	movs	r0, r5
 8010740:	6019      	str	r1, [r3, #0]
 8010742:	4790      	blx	r2
 8010744:	2000      	movs	r0, #0
 8010746:	e7df      	b.n	8010708 <_raise_r+0x12>

08010748 <raise>:
 8010748:	b510      	push	{r4, lr}
 801074a:	4b03      	ldr	r3, [pc, #12]	@ (8010758 <raise+0x10>)
 801074c:	0001      	movs	r1, r0
 801074e:	6818      	ldr	r0, [r3, #0]
 8010750:	f7ff ffd1 	bl	80106f6 <_raise_r>
 8010754:	bd10      	pop	{r4, pc}
 8010756:	46c0      	nop			@ (mov r8, r8)
 8010758:	20000b4c 	.word	0x20000b4c

0801075c <_kill_r>:
 801075c:	2300      	movs	r3, #0
 801075e:	b570      	push	{r4, r5, r6, lr}
 8010760:	4d06      	ldr	r5, [pc, #24]	@ (801077c <_kill_r+0x20>)
 8010762:	0004      	movs	r4, r0
 8010764:	0008      	movs	r0, r1
 8010766:	0011      	movs	r1, r2
 8010768:	602b      	str	r3, [r5, #0]
 801076a:	f7f6 fdbd 	bl	80072e8 <_kill>
 801076e:	1c43      	adds	r3, r0, #1
 8010770:	d103      	bne.n	801077a <_kill_r+0x1e>
 8010772:	682b      	ldr	r3, [r5, #0]
 8010774:	2b00      	cmp	r3, #0
 8010776:	d000      	beq.n	801077a <_kill_r+0x1e>
 8010778:	6023      	str	r3, [r4, #0]
 801077a:	bd70      	pop	{r4, r5, r6, pc}
 801077c:	20001f9c 	.word	0x20001f9c

08010780 <_getpid_r>:
 8010780:	b510      	push	{r4, lr}
 8010782:	f7f6 fdab 	bl	80072dc <_getpid>
 8010786:	bd10      	pop	{r4, pc}

08010788 <fmod>:
 8010788:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801078a:	0014      	movs	r4, r2
 801078c:	001d      	movs	r5, r3
 801078e:	9000      	str	r0, [sp, #0]
 8010790:	9101      	str	r1, [sp, #4]
 8010792:	f000 f931 	bl	80109f8 <__ieee754_fmod>
 8010796:	0022      	movs	r2, r4
 8010798:	0006      	movs	r6, r0
 801079a:	000f      	movs	r7, r1
 801079c:	9800      	ldr	r0, [sp, #0]
 801079e:	9901      	ldr	r1, [sp, #4]
 80107a0:	002b      	movs	r3, r5
 80107a2:	f7f2 fd6f 	bl	8003284 <__aeabi_dcmpun>
 80107a6:	2800      	cmp	r0, #0
 80107a8:	d113      	bne.n	80107d2 <fmod+0x4a>
 80107aa:	2200      	movs	r2, #0
 80107ac:	2300      	movs	r3, #0
 80107ae:	0020      	movs	r0, r4
 80107b0:	0029      	movs	r1, r5
 80107b2:	f7ef fe53 	bl	800045c <__aeabi_dcmpeq>
 80107b6:	2800      	cmp	r0, #0
 80107b8:	d00b      	beq.n	80107d2 <fmod+0x4a>
 80107ba:	f7fd ff47 	bl	800e64c <__errno>
 80107be:	2321      	movs	r3, #33	@ 0x21
 80107c0:	2200      	movs	r2, #0
 80107c2:	6003      	str	r3, [r0, #0]
 80107c4:	2300      	movs	r3, #0
 80107c6:	0010      	movs	r0, r2
 80107c8:	0019      	movs	r1, r3
 80107ca:	f7f1 fab3 	bl	8001d34 <__aeabi_ddiv>
 80107ce:	0006      	movs	r6, r0
 80107d0:	000f      	movs	r7, r1
 80107d2:	0030      	movs	r0, r6
 80107d4:	0039      	movs	r1, r7
 80107d6:	b003      	add	sp, #12
 80107d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080107da <sqrt>:
 80107da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107dc:	0004      	movs	r4, r0
 80107de:	000d      	movs	r5, r1
 80107e0:	f000 f822 	bl	8010828 <__ieee754_sqrt>
 80107e4:	0022      	movs	r2, r4
 80107e6:	0006      	movs	r6, r0
 80107e8:	000f      	movs	r7, r1
 80107ea:	002b      	movs	r3, r5
 80107ec:	0020      	movs	r0, r4
 80107ee:	0029      	movs	r1, r5
 80107f0:	f7f2 fd48 	bl	8003284 <__aeabi_dcmpun>
 80107f4:	2800      	cmp	r0, #0
 80107f6:	d113      	bne.n	8010820 <sqrt+0x46>
 80107f8:	2200      	movs	r2, #0
 80107fa:	2300      	movs	r3, #0
 80107fc:	0020      	movs	r0, r4
 80107fe:	0029      	movs	r1, r5
 8010800:	f7ef fe32 	bl	8000468 <__aeabi_dcmplt>
 8010804:	2800      	cmp	r0, #0
 8010806:	d00b      	beq.n	8010820 <sqrt+0x46>
 8010808:	f7fd ff20 	bl	800e64c <__errno>
 801080c:	2321      	movs	r3, #33	@ 0x21
 801080e:	2200      	movs	r2, #0
 8010810:	6003      	str	r3, [r0, #0]
 8010812:	2300      	movs	r3, #0
 8010814:	0010      	movs	r0, r2
 8010816:	0019      	movs	r1, r3
 8010818:	f7f1 fa8c 	bl	8001d34 <__aeabi_ddiv>
 801081c:	0006      	movs	r6, r0
 801081e:	000f      	movs	r7, r1
 8010820:	0030      	movs	r0, r6
 8010822:	0039      	movs	r1, r7
 8010824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010828 <__ieee754_sqrt>:
 8010828:	b5f0      	push	{r4, r5, r6, r7, lr}
 801082a:	000a      	movs	r2, r1
 801082c:	000d      	movs	r5, r1
 801082e:	496d      	ldr	r1, [pc, #436]	@ (80109e4 <__ieee754_sqrt+0x1bc>)
 8010830:	0004      	movs	r4, r0
 8010832:	0003      	movs	r3, r0
 8010834:	0008      	movs	r0, r1
 8010836:	b087      	sub	sp, #28
 8010838:	4028      	ands	r0, r5
 801083a:	4288      	cmp	r0, r1
 801083c:	d111      	bne.n	8010862 <__ieee754_sqrt+0x3a>
 801083e:	0022      	movs	r2, r4
 8010840:	002b      	movs	r3, r5
 8010842:	0020      	movs	r0, r4
 8010844:	0029      	movs	r1, r5
 8010846:	f7f1 feb9 	bl	80025bc <__aeabi_dmul>
 801084a:	0002      	movs	r2, r0
 801084c:	000b      	movs	r3, r1
 801084e:	0020      	movs	r0, r4
 8010850:	0029      	movs	r1, r5
 8010852:	f7f0 ff0b 	bl	800166c <__aeabi_dadd>
 8010856:	0004      	movs	r4, r0
 8010858:	000d      	movs	r5, r1
 801085a:	0020      	movs	r0, r4
 801085c:	0029      	movs	r1, r5
 801085e:	b007      	add	sp, #28
 8010860:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010862:	2d00      	cmp	r5, #0
 8010864:	dc11      	bgt.n	801088a <__ieee754_sqrt+0x62>
 8010866:	0069      	lsls	r1, r5, #1
 8010868:	0849      	lsrs	r1, r1, #1
 801086a:	4321      	orrs	r1, r4
 801086c:	d0f5      	beq.n	801085a <__ieee754_sqrt+0x32>
 801086e:	2000      	movs	r0, #0
 8010870:	4285      	cmp	r5, r0
 8010872:	d010      	beq.n	8010896 <__ieee754_sqrt+0x6e>
 8010874:	0022      	movs	r2, r4
 8010876:	002b      	movs	r3, r5
 8010878:	0020      	movs	r0, r4
 801087a:	0029      	movs	r1, r5
 801087c:	f7f2 f966 	bl	8002b4c <__aeabi_dsub>
 8010880:	0002      	movs	r2, r0
 8010882:	000b      	movs	r3, r1
 8010884:	f7f1 fa56 	bl	8001d34 <__aeabi_ddiv>
 8010888:	e7e5      	b.n	8010856 <__ieee754_sqrt+0x2e>
 801088a:	1528      	asrs	r0, r5, #20
 801088c:	d115      	bne.n	80108ba <__ieee754_sqrt+0x92>
 801088e:	2480      	movs	r4, #128	@ 0x80
 8010890:	2100      	movs	r1, #0
 8010892:	0364      	lsls	r4, r4, #13
 8010894:	e007      	b.n	80108a6 <__ieee754_sqrt+0x7e>
 8010896:	0ada      	lsrs	r2, r3, #11
 8010898:	3815      	subs	r0, #21
 801089a:	055b      	lsls	r3, r3, #21
 801089c:	2a00      	cmp	r2, #0
 801089e:	d0fa      	beq.n	8010896 <__ieee754_sqrt+0x6e>
 80108a0:	e7f5      	b.n	801088e <__ieee754_sqrt+0x66>
 80108a2:	0052      	lsls	r2, r2, #1
 80108a4:	3101      	adds	r1, #1
 80108a6:	4222      	tst	r2, r4
 80108a8:	d0fb      	beq.n	80108a2 <__ieee754_sqrt+0x7a>
 80108aa:	1e4c      	subs	r4, r1, #1
 80108ac:	1b00      	subs	r0, r0, r4
 80108ae:	2420      	movs	r4, #32
 80108b0:	001d      	movs	r5, r3
 80108b2:	1a64      	subs	r4, r4, r1
 80108b4:	40e5      	lsrs	r5, r4
 80108b6:	408b      	lsls	r3, r1
 80108b8:	432a      	orrs	r2, r5
 80108ba:	494b      	ldr	r1, [pc, #300]	@ (80109e8 <__ieee754_sqrt+0x1c0>)
 80108bc:	0312      	lsls	r2, r2, #12
 80108be:	1844      	adds	r4, r0, r1
 80108c0:	2180      	movs	r1, #128	@ 0x80
 80108c2:	0b12      	lsrs	r2, r2, #12
 80108c4:	0349      	lsls	r1, r1, #13
 80108c6:	4311      	orrs	r1, r2
 80108c8:	07c0      	lsls	r0, r0, #31
 80108ca:	d403      	bmi.n	80108d4 <__ieee754_sqrt+0xac>
 80108cc:	0fda      	lsrs	r2, r3, #31
 80108ce:	0049      	lsls	r1, r1, #1
 80108d0:	1851      	adds	r1, r2, r1
 80108d2:	005b      	lsls	r3, r3, #1
 80108d4:	2500      	movs	r5, #0
 80108d6:	1062      	asrs	r2, r4, #1
 80108d8:	0049      	lsls	r1, r1, #1
 80108da:	2480      	movs	r4, #128	@ 0x80
 80108dc:	9205      	str	r2, [sp, #20]
 80108de:	0fda      	lsrs	r2, r3, #31
 80108e0:	1852      	adds	r2, r2, r1
 80108e2:	2016      	movs	r0, #22
 80108e4:	0029      	movs	r1, r5
 80108e6:	005b      	lsls	r3, r3, #1
 80108e8:	03a4      	lsls	r4, r4, #14
 80108ea:	190e      	adds	r6, r1, r4
 80108ec:	4296      	cmp	r6, r2
 80108ee:	dc02      	bgt.n	80108f6 <__ieee754_sqrt+0xce>
 80108f0:	1931      	adds	r1, r6, r4
 80108f2:	1b92      	subs	r2, r2, r6
 80108f4:	192d      	adds	r5, r5, r4
 80108f6:	0fde      	lsrs	r6, r3, #31
 80108f8:	0052      	lsls	r2, r2, #1
 80108fa:	3801      	subs	r0, #1
 80108fc:	1992      	adds	r2, r2, r6
 80108fe:	005b      	lsls	r3, r3, #1
 8010900:	0864      	lsrs	r4, r4, #1
 8010902:	2800      	cmp	r0, #0
 8010904:	d1f1      	bne.n	80108ea <__ieee754_sqrt+0xc2>
 8010906:	2620      	movs	r6, #32
 8010908:	2780      	movs	r7, #128	@ 0x80
 801090a:	0004      	movs	r4, r0
 801090c:	9604      	str	r6, [sp, #16]
 801090e:	063f      	lsls	r7, r7, #24
 8010910:	19c6      	adds	r6, r0, r7
 8010912:	46b4      	mov	ip, r6
 8010914:	4291      	cmp	r1, r2
 8010916:	db02      	blt.n	801091e <__ieee754_sqrt+0xf6>
 8010918:	d114      	bne.n	8010944 <__ieee754_sqrt+0x11c>
 801091a:	429e      	cmp	r6, r3
 801091c:	d812      	bhi.n	8010944 <__ieee754_sqrt+0x11c>
 801091e:	4660      	mov	r0, ip
 8010920:	4666      	mov	r6, ip
 8010922:	19c0      	adds	r0, r0, r7
 8010924:	9100      	str	r1, [sp, #0]
 8010926:	2e00      	cmp	r6, #0
 8010928:	da03      	bge.n	8010932 <__ieee754_sqrt+0x10a>
 801092a:	43c6      	mvns	r6, r0
 801092c:	0ff6      	lsrs	r6, r6, #31
 801092e:	198e      	adds	r6, r1, r6
 8010930:	9600      	str	r6, [sp, #0]
 8010932:	1a52      	subs	r2, r2, r1
 8010934:	4563      	cmp	r3, ip
 8010936:	4189      	sbcs	r1, r1
 8010938:	4249      	negs	r1, r1
 801093a:	1a52      	subs	r2, r2, r1
 801093c:	4661      	mov	r1, ip
 801093e:	1a5b      	subs	r3, r3, r1
 8010940:	9900      	ldr	r1, [sp, #0]
 8010942:	19e4      	adds	r4, r4, r7
 8010944:	0fde      	lsrs	r6, r3, #31
 8010946:	0052      	lsls	r2, r2, #1
 8010948:	1992      	adds	r2, r2, r6
 801094a:	9e04      	ldr	r6, [sp, #16]
 801094c:	005b      	lsls	r3, r3, #1
 801094e:	3e01      	subs	r6, #1
 8010950:	087f      	lsrs	r7, r7, #1
 8010952:	9604      	str	r6, [sp, #16]
 8010954:	2e00      	cmp	r6, #0
 8010956:	d1db      	bne.n	8010910 <__ieee754_sqrt+0xe8>
 8010958:	431a      	orrs	r2, r3
 801095a:	d01f      	beq.n	801099c <__ieee754_sqrt+0x174>
 801095c:	4e23      	ldr	r6, [pc, #140]	@ (80109ec <__ieee754_sqrt+0x1c4>)
 801095e:	4f24      	ldr	r7, [pc, #144]	@ (80109f0 <__ieee754_sqrt+0x1c8>)
 8010960:	6830      	ldr	r0, [r6, #0]
 8010962:	6871      	ldr	r1, [r6, #4]
 8010964:	683a      	ldr	r2, [r7, #0]
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	9200      	str	r2, [sp, #0]
 801096a:	9301      	str	r3, [sp, #4]
 801096c:	6832      	ldr	r2, [r6, #0]
 801096e:	6873      	ldr	r3, [r6, #4]
 8010970:	9202      	str	r2, [sp, #8]
 8010972:	9303      	str	r3, [sp, #12]
 8010974:	9a00      	ldr	r2, [sp, #0]
 8010976:	9b01      	ldr	r3, [sp, #4]
 8010978:	f7f2 f8e8 	bl	8002b4c <__aeabi_dsub>
 801097c:	0002      	movs	r2, r0
 801097e:	000b      	movs	r3, r1
 8010980:	9802      	ldr	r0, [sp, #8]
 8010982:	9903      	ldr	r1, [sp, #12]
 8010984:	f7ef fd7a 	bl	800047c <__aeabi_dcmple>
 8010988:	2800      	cmp	r0, #0
 801098a:	d007      	beq.n	801099c <__ieee754_sqrt+0x174>
 801098c:	6830      	ldr	r0, [r6, #0]
 801098e:	6871      	ldr	r1, [r6, #4]
 8010990:	683a      	ldr	r2, [r7, #0]
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	1c67      	adds	r7, r4, #1
 8010996:	d10f      	bne.n	80109b8 <__ieee754_sqrt+0x190>
 8010998:	9c04      	ldr	r4, [sp, #16]
 801099a:	3501      	adds	r5, #1
 801099c:	4b15      	ldr	r3, [pc, #84]	@ (80109f4 <__ieee754_sqrt+0x1cc>)
 801099e:	106a      	asrs	r2, r5, #1
 80109a0:	18d2      	adds	r2, r2, r3
 80109a2:	0863      	lsrs	r3, r4, #1
 80109a4:	07ed      	lsls	r5, r5, #31
 80109a6:	d502      	bpl.n	80109ae <__ieee754_sqrt+0x186>
 80109a8:	2180      	movs	r1, #128	@ 0x80
 80109aa:	0609      	lsls	r1, r1, #24
 80109ac:	430b      	orrs	r3, r1
 80109ae:	9905      	ldr	r1, [sp, #20]
 80109b0:	001c      	movs	r4, r3
 80109b2:	0509      	lsls	r1, r1, #20
 80109b4:	188d      	adds	r5, r1, r2
 80109b6:	e750      	b.n	801085a <__ieee754_sqrt+0x32>
 80109b8:	f7f0 fe58 	bl	800166c <__aeabi_dadd>
 80109bc:	6877      	ldr	r7, [r6, #4]
 80109be:	6836      	ldr	r6, [r6, #0]
 80109c0:	0002      	movs	r2, r0
 80109c2:	000b      	movs	r3, r1
 80109c4:	0030      	movs	r0, r6
 80109c6:	0039      	movs	r1, r7
 80109c8:	f7ef fd4e 	bl	8000468 <__aeabi_dcmplt>
 80109cc:	2800      	cmp	r0, #0
 80109ce:	d004      	beq.n	80109da <__ieee754_sqrt+0x1b2>
 80109d0:	3402      	adds	r4, #2
 80109d2:	4263      	negs	r3, r4
 80109d4:	4163      	adcs	r3, r4
 80109d6:	18ed      	adds	r5, r5, r3
 80109d8:	e7e0      	b.n	801099c <__ieee754_sqrt+0x174>
 80109da:	2301      	movs	r3, #1
 80109dc:	3401      	adds	r4, #1
 80109de:	439c      	bics	r4, r3
 80109e0:	e7dc      	b.n	801099c <__ieee754_sqrt+0x174>
 80109e2:	46c0      	nop			@ (mov r8, r8)
 80109e4:	7ff00000 	.word	0x7ff00000
 80109e8:	fffffc01 	.word	0xfffffc01
 80109ec:	20000ba8 	.word	0x20000ba8
 80109f0:	20000ba0 	.word	0x20000ba0
 80109f4:	3fe00000 	.word	0x3fe00000

080109f8 <__ieee754_fmod>:
 80109f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80109fa:	b085      	sub	sp, #20
 80109fc:	9200      	str	r2, [sp, #0]
 80109fe:	9301      	str	r3, [sp, #4]
 8010a00:	9b01      	ldr	r3, [sp, #4]
 8010a02:	9e00      	ldr	r6, [sp, #0]
 8010a04:	005b      	lsls	r3, r3, #1
 8010a06:	085b      	lsrs	r3, r3, #1
 8010a08:	469c      	mov	ip, r3
 8010a0a:	9603      	str	r6, [sp, #12]
 8010a0c:	4333      	orrs	r3, r6
 8010a0e:	d00d      	beq.n	8010a2c <__ieee754_fmod+0x34>
 8010a10:	4b7a      	ldr	r3, [pc, #488]	@ (8010bfc <__ieee754_fmod+0x204>)
 8010a12:	004a      	lsls	r2, r1, #1
 8010a14:	000d      	movs	r5, r1
 8010a16:	0852      	lsrs	r2, r2, #1
 8010a18:	429a      	cmp	r2, r3
 8010a1a:	d807      	bhi.n	8010a2c <__ieee754_fmod+0x34>
 8010a1c:	4664      	mov	r4, ip
 8010a1e:	4273      	negs	r3, r6
 8010a20:	4333      	orrs	r3, r6
 8010a22:	0fdb      	lsrs	r3, r3, #31
 8010a24:	4323      	orrs	r3, r4
 8010a26:	4c76      	ldr	r4, [pc, #472]	@ (8010c00 <__ieee754_fmod+0x208>)
 8010a28:	42a3      	cmp	r3, r4
 8010a2a:	d909      	bls.n	8010a40 <__ieee754_fmod+0x48>
 8010a2c:	9a00      	ldr	r2, [sp, #0]
 8010a2e:	9b01      	ldr	r3, [sp, #4]
 8010a30:	f7f1 fdc4 	bl	80025bc <__aeabi_dmul>
 8010a34:	0002      	movs	r2, r0
 8010a36:	000b      	movs	r3, r1
 8010a38:	f7f1 f97c 	bl	8001d34 <__aeabi_ddiv>
 8010a3c:	b005      	add	sp, #20
 8010a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010a40:	0fcc      	lsrs	r4, r1, #31
 8010a42:	07e4      	lsls	r4, r4, #31
 8010a44:	0007      	movs	r7, r0
 8010a46:	0003      	movs	r3, r0
 8010a48:	9402      	str	r4, [sp, #8]
 8010a4a:	4562      	cmp	r2, ip
 8010a4c:	dc0a      	bgt.n	8010a64 <__ieee754_fmod+0x6c>
 8010a4e:	dbf5      	blt.n	8010a3c <__ieee754_fmod+0x44>
 8010a50:	4286      	cmp	r6, r0
 8010a52:	d8f3      	bhi.n	8010a3c <__ieee754_fmod+0x44>
 8010a54:	d106      	bne.n	8010a64 <__ieee754_fmod+0x6c>
 8010a56:	0022      	movs	r2, r4
 8010a58:	4b6a      	ldr	r3, [pc, #424]	@ (8010c04 <__ieee754_fmod+0x20c>)
 8010a5a:	0f12      	lsrs	r2, r2, #28
 8010a5c:	189b      	adds	r3, r3, r2
 8010a5e:	6818      	ldr	r0, [r3, #0]
 8010a60:	6859      	ldr	r1, [r3, #4]
 8010a62:	e7eb      	b.n	8010a3c <__ieee754_fmod+0x44>
 8010a64:	4866      	ldr	r0, [pc, #408]	@ (8010c00 <__ieee754_fmod+0x208>)
 8010a66:	4205      	tst	r5, r0
 8010a68:	d14c      	bne.n	8010b04 <__ieee754_fmod+0x10c>
 8010a6a:	2a00      	cmp	r2, #0
 8010a6c:	d143      	bne.n	8010af6 <__ieee754_fmod+0xfe>
 8010a6e:	0038      	movs	r0, r7
 8010a70:	4965      	ldr	r1, [pc, #404]	@ (8010c08 <__ieee754_fmod+0x210>)
 8010a72:	2800      	cmp	r0, #0
 8010a74:	dc3c      	bgt.n	8010af0 <__ieee754_fmod+0xf8>
 8010a76:	4862      	ldr	r0, [pc, #392]	@ (8010c00 <__ieee754_fmod+0x208>)
 8010a78:	9c01      	ldr	r4, [sp, #4]
 8010a7a:	4220      	tst	r0, r4
 8010a7c:	d150      	bne.n	8010b20 <__ieee754_fmod+0x128>
 8010a7e:	4660      	mov	r0, ip
 8010a80:	2800      	cmp	r0, #0
 8010a82:	d146      	bne.n	8010b12 <__ieee754_fmod+0x11a>
 8010a84:	4860      	ldr	r0, [pc, #384]	@ (8010c08 <__ieee754_fmod+0x210>)
 8010a86:	2e00      	cmp	r6, #0
 8010a88:	dc40      	bgt.n	8010b0c <__ieee754_fmod+0x114>
 8010a8a:	4c60      	ldr	r4, [pc, #384]	@ (8010c0c <__ieee754_fmod+0x214>)
 8010a8c:	42a1      	cmp	r1, r4
 8010a8e:	db4c      	blt.n	8010b2a <__ieee754_fmod+0x132>
 8010a90:	2280      	movs	r2, #128	@ 0x80
 8010a92:	032f      	lsls	r7, r5, #12
 8010a94:	0b3f      	lsrs	r7, r7, #12
 8010a96:	0352      	lsls	r2, r2, #13
 8010a98:	433a      	orrs	r2, r7
 8010a9a:	4c5c      	ldr	r4, [pc, #368]	@ (8010c0c <__ieee754_fmod+0x214>)
 8010a9c:	42a0      	cmp	r0, r4
 8010a9e:	db59      	blt.n	8010b54 <__ieee754_fmod+0x15c>
 8010aa0:	2580      	movs	r5, #128	@ 0x80
 8010aa2:	9c01      	ldr	r4, [sp, #4]
 8010aa4:	036d      	lsls	r5, r5, #13
 8010aa6:	0324      	lsls	r4, r4, #12
 8010aa8:	0b24      	lsrs	r4, r4, #12
 8010aaa:	4325      	orrs	r5, r4
 8010aac:	1a09      	subs	r1, r1, r0
 8010aae:	9e03      	ldr	r6, [sp, #12]
 8010ab0:	1b54      	subs	r4, r2, r5
 8010ab2:	1b9f      	subs	r7, r3, r6
 8010ab4:	2900      	cmp	r1, #0
 8010ab6:	d165      	bne.n	8010b84 <__ieee754_fmod+0x18c>
 8010ab8:	42b3      	cmp	r3, r6
 8010aba:	4189      	sbcs	r1, r1
 8010abc:	4249      	negs	r1, r1
 8010abe:	1a64      	subs	r4, r4, r1
 8010ac0:	d401      	bmi.n	8010ac6 <__ieee754_fmod+0xce>
 8010ac2:	003b      	movs	r3, r7
 8010ac4:	0022      	movs	r2, r4
 8010ac6:	0011      	movs	r1, r2
 8010ac8:	4319      	orrs	r1, r3
 8010aca:	d06a      	beq.n	8010ba2 <__ieee754_fmod+0x1aa>
 8010acc:	2180      	movs	r1, #128	@ 0x80
 8010ace:	0349      	lsls	r1, r1, #13
 8010ad0:	428a      	cmp	r2, r1
 8010ad2:	db6e      	blt.n	8010bb2 <__ieee754_fmod+0x1ba>
 8010ad4:	494d      	ldr	r1, [pc, #308]	@ (8010c0c <__ieee754_fmod+0x214>)
 8010ad6:	4288      	cmp	r0, r1
 8010ad8:	db71      	blt.n	8010bbe <__ieee754_fmod+0x1c6>
 8010ada:	494d      	ldr	r1, [pc, #308]	@ (8010c10 <__ieee754_fmod+0x218>)
 8010adc:	1852      	adds	r2, r2, r1
 8010ade:	9902      	ldr	r1, [sp, #8]
 8010ae0:	430a      	orrs	r2, r1
 8010ae2:	494c      	ldr	r1, [pc, #304]	@ (8010c14 <__ieee754_fmod+0x21c>)
 8010ae4:	1840      	adds	r0, r0, r1
 8010ae6:	0504      	lsls	r4, r0, #20
 8010ae8:	4322      	orrs	r2, r4
 8010aea:	0011      	movs	r1, r2
 8010aec:	0018      	movs	r0, r3
 8010aee:	e7a5      	b.n	8010a3c <__ieee754_fmod+0x44>
 8010af0:	3901      	subs	r1, #1
 8010af2:	0040      	lsls	r0, r0, #1
 8010af4:	e7bd      	b.n	8010a72 <__ieee754_fmod+0x7a>
 8010af6:	4945      	ldr	r1, [pc, #276]	@ (8010c0c <__ieee754_fmod+0x214>)
 8010af8:	02d0      	lsls	r0, r2, #11
 8010afa:	2800      	cmp	r0, #0
 8010afc:	ddbb      	ble.n	8010a76 <__ieee754_fmod+0x7e>
 8010afe:	3901      	subs	r1, #1
 8010b00:	0040      	lsls	r0, r0, #1
 8010b02:	e7fa      	b.n	8010afa <__ieee754_fmod+0x102>
 8010b04:	4844      	ldr	r0, [pc, #272]	@ (8010c18 <__ieee754_fmod+0x220>)
 8010b06:	1511      	asrs	r1, r2, #20
 8010b08:	1809      	adds	r1, r1, r0
 8010b0a:	e7b4      	b.n	8010a76 <__ieee754_fmod+0x7e>
 8010b0c:	3801      	subs	r0, #1
 8010b0e:	0076      	lsls	r6, r6, #1
 8010b10:	e7b9      	b.n	8010a86 <__ieee754_fmod+0x8e>
 8010b12:	02c6      	lsls	r6, r0, #11
 8010b14:	483d      	ldr	r0, [pc, #244]	@ (8010c0c <__ieee754_fmod+0x214>)
 8010b16:	2e00      	cmp	r6, #0
 8010b18:	ddb7      	ble.n	8010a8a <__ieee754_fmod+0x92>
 8010b1a:	3801      	subs	r0, #1
 8010b1c:	0076      	lsls	r6, r6, #1
 8010b1e:	e7fa      	b.n	8010b16 <__ieee754_fmod+0x11e>
 8010b20:	4660      	mov	r0, ip
 8010b22:	4c3d      	ldr	r4, [pc, #244]	@ (8010c18 <__ieee754_fmod+0x220>)
 8010b24:	1500      	asrs	r0, r0, #20
 8010b26:	1900      	adds	r0, r0, r4
 8010b28:	e7af      	b.n	8010a8a <__ieee754_fmod+0x92>
 8010b2a:	4b38      	ldr	r3, [pc, #224]	@ (8010c0c <__ieee754_fmod+0x214>)
 8010b2c:	1a5b      	subs	r3, r3, r1
 8010b2e:	2b1f      	cmp	r3, #31
 8010b30:	dc0a      	bgt.n	8010b48 <__ieee754_fmod+0x150>
 8010b32:	409a      	lsls	r2, r3
 8010b34:	003c      	movs	r4, r7
 8010b36:	0015      	movs	r5, r2
 8010b38:	4a38      	ldr	r2, [pc, #224]	@ (8010c1c <__ieee754_fmod+0x224>)
 8010b3a:	409f      	lsls	r7, r3
 8010b3c:	188a      	adds	r2, r1, r2
 8010b3e:	40d4      	lsrs	r4, r2
 8010b40:	0022      	movs	r2, r4
 8010b42:	003b      	movs	r3, r7
 8010b44:	432a      	orrs	r2, r5
 8010b46:	e7a8      	b.n	8010a9a <__ieee754_fmod+0xa2>
 8010b48:	003a      	movs	r2, r7
 8010b4a:	4b35      	ldr	r3, [pc, #212]	@ (8010c20 <__ieee754_fmod+0x228>)
 8010b4c:	1a5b      	subs	r3, r3, r1
 8010b4e:	409a      	lsls	r2, r3
 8010b50:	2300      	movs	r3, #0
 8010b52:	e7a2      	b.n	8010a9a <__ieee754_fmod+0xa2>
 8010b54:	4c2d      	ldr	r4, [pc, #180]	@ (8010c0c <__ieee754_fmod+0x214>)
 8010b56:	1a27      	subs	r7, r4, r0
 8010b58:	2f1f      	cmp	r7, #31
 8010b5a:	dc0c      	bgt.n	8010b76 <__ieee754_fmod+0x17e>
 8010b5c:	4c2f      	ldr	r4, [pc, #188]	@ (8010c1c <__ieee754_fmod+0x224>)
 8010b5e:	4665      	mov	r5, ip
 8010b60:	46a4      	mov	ip, r4
 8010b62:	4484      	add	ip, r0
 8010b64:	4666      	mov	r6, ip
 8010b66:	9c00      	ldr	r4, [sp, #0]
 8010b68:	40bd      	lsls	r5, r7
 8010b6a:	40f4      	lsrs	r4, r6
 8010b6c:	4325      	orrs	r5, r4
 8010b6e:	9c00      	ldr	r4, [sp, #0]
 8010b70:	40bc      	lsls	r4, r7
 8010b72:	9403      	str	r4, [sp, #12]
 8010b74:	e79a      	b.n	8010aac <__ieee754_fmod+0xb4>
 8010b76:	4d2a      	ldr	r5, [pc, #168]	@ (8010c20 <__ieee754_fmod+0x228>)
 8010b78:	9c00      	ldr	r4, [sp, #0]
 8010b7a:	1a2d      	subs	r5, r5, r0
 8010b7c:	40ac      	lsls	r4, r5
 8010b7e:	0025      	movs	r5, r4
 8010b80:	2400      	movs	r4, #0
 8010b82:	e7f6      	b.n	8010b72 <__ieee754_fmod+0x17a>
 8010b84:	9e03      	ldr	r6, [sp, #12]
 8010b86:	42b3      	cmp	r3, r6
 8010b88:	41b6      	sbcs	r6, r6
 8010b8a:	4276      	negs	r6, r6
 8010b8c:	1ba4      	subs	r4, r4, r6
 8010b8e:	d505      	bpl.n	8010b9c <__ieee754_fmod+0x1a4>
 8010b90:	0fdc      	lsrs	r4, r3, #31
 8010b92:	0052      	lsls	r2, r2, #1
 8010b94:	1912      	adds	r2, r2, r4
 8010b96:	005b      	lsls	r3, r3, #1
 8010b98:	3901      	subs	r1, #1
 8010b9a:	e788      	b.n	8010aae <__ieee754_fmod+0xb6>
 8010b9c:	0023      	movs	r3, r4
 8010b9e:	433b      	orrs	r3, r7
 8010ba0:	d102      	bne.n	8010ba8 <__ieee754_fmod+0x1b0>
 8010ba2:	4b18      	ldr	r3, [pc, #96]	@ (8010c04 <__ieee754_fmod+0x20c>)
 8010ba4:	9a02      	ldr	r2, [sp, #8]
 8010ba6:	e758      	b.n	8010a5a <__ieee754_fmod+0x62>
 8010ba8:	0064      	lsls	r4, r4, #1
 8010baa:	0ffa      	lsrs	r2, r7, #31
 8010bac:	18a2      	adds	r2, r4, r2
 8010bae:	007b      	lsls	r3, r7, #1
 8010bb0:	e7f2      	b.n	8010b98 <__ieee754_fmod+0x1a0>
 8010bb2:	0fdc      	lsrs	r4, r3, #31
 8010bb4:	0052      	lsls	r2, r2, #1
 8010bb6:	1912      	adds	r2, r2, r4
 8010bb8:	005b      	lsls	r3, r3, #1
 8010bba:	3801      	subs	r0, #1
 8010bbc:	e788      	b.n	8010ad0 <__ieee754_fmod+0xd8>
 8010bbe:	4913      	ldr	r1, [pc, #76]	@ (8010c0c <__ieee754_fmod+0x214>)
 8010bc0:	1a0e      	subs	r6, r1, r0
 8010bc2:	2e14      	cmp	r6, #20
 8010bc4:	dc0b      	bgt.n	8010bde <__ieee754_fmod+0x1e6>
 8010bc6:	40f3      	lsrs	r3, r6
 8010bc8:	0019      	movs	r1, r3
 8010bca:	4b14      	ldr	r3, [pc, #80]	@ (8010c1c <__ieee754_fmod+0x224>)
 8010bcc:	18c0      	adds	r0, r0, r3
 8010bce:	0013      	movs	r3, r2
 8010bd0:	4083      	lsls	r3, r0
 8010bd2:	4132      	asrs	r2, r6
 8010bd4:	430b      	orrs	r3, r1
 8010bd6:	9c02      	ldr	r4, [sp, #8]
 8010bd8:	4314      	orrs	r4, r2
 8010bda:	0021      	movs	r1, r4
 8010bdc:	e786      	b.n	8010aec <__ieee754_fmod+0xf4>
 8010bde:	2e1f      	cmp	r6, #31
 8010be0:	dc06      	bgt.n	8010bf0 <__ieee754_fmod+0x1f8>
 8010be2:	490e      	ldr	r1, [pc, #56]	@ (8010c1c <__ieee754_fmod+0x224>)
 8010be4:	40f3      	lsrs	r3, r6
 8010be6:	1840      	adds	r0, r0, r1
 8010be8:	4082      	lsls	r2, r0
 8010bea:	4313      	orrs	r3, r2
 8010bec:	9a02      	ldr	r2, [sp, #8]
 8010bee:	e7f2      	b.n	8010bd6 <__ieee754_fmod+0x1de>
 8010bf0:	4b0b      	ldr	r3, [pc, #44]	@ (8010c20 <__ieee754_fmod+0x228>)
 8010bf2:	1a1b      	subs	r3, r3, r0
 8010bf4:	411a      	asrs	r2, r3
 8010bf6:	0013      	movs	r3, r2
 8010bf8:	e7f8      	b.n	8010bec <__ieee754_fmod+0x1f4>
 8010bfa:	46c0      	nop			@ (mov r8, r8)
 8010bfc:	7fefffff 	.word	0x7fefffff
 8010c00:	7ff00000 	.word	0x7ff00000
 8010c04:	08011b28 	.word	0x08011b28
 8010c08:	fffffbed 	.word	0xfffffbed
 8010c0c:	fffffc02 	.word	0xfffffc02
 8010c10:	fff00000 	.word	0xfff00000
 8010c14:	000003ff 	.word	0x000003ff
 8010c18:	fffffc01 	.word	0xfffffc01
 8010c1c:	0000041e 	.word	0x0000041e
 8010c20:	fffffbe2 	.word	0xfffffbe2

08010c24 <_init>:
 8010c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c26:	46c0      	nop			@ (mov r8, r8)
 8010c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010c2a:	bc08      	pop	{r3}
 8010c2c:	469e      	mov	lr, r3
 8010c2e:	4770      	bx	lr

08010c30 <_fini>:
 8010c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c32:	46c0      	nop			@ (mov r8, r8)
 8010c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010c36:	bc08      	pop	{r3}
 8010c38:	469e      	mov	lr, r3
 8010c3a:	4770      	bx	lr
