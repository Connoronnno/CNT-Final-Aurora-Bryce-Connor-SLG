
ynotag.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fbd0  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000eb8  0800fc90  0800fc90  00010c90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010b48  08010b48  00012bb0  2**0
                  CONTENTS
  4 .ARM          00000008  08010b48  08010b48  00011b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010b50  08010b50  00012bb0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010b50  08010b50  00011b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010b54  08010b54  00011b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000bb0  20000000  08010b58  00012000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013e8  20000bb0  08011708  00012bb0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001f98  08011708  00012f98  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00012bb0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c7de  00000000  00000000  00012bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000399a  00000000  00000000  0002f3b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a20  00000000  00000000  00032d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000152f  00000000  00000000  00034770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000202e5  00000000  00000000  00035c9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002045c  00000000  00000000  00055f84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cbb09  00000000  00000000  000763e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00141ee9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007864  00000000  00000000  00141f2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  00149790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000bb0 	.word	0x20000bb0
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800fc74 	.word	0x0800fc74

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000bb4 	.word	0x20000bb4
 8000100:	0800fc74 	.word	0x0800fc74

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <strlen>:
 8000118:	2300      	movs	r3, #0
 800011a:	5cc2      	ldrb	r2, [r0, r3]
 800011c:	3301      	adds	r3, #1
 800011e:	2a00      	cmp	r2, #0
 8000120:	d1fb      	bne.n	800011a <strlen+0x2>
 8000122:	1e58      	subs	r0, r3, #1
 8000124:	4770      	bx	lr
	...

08000128 <__gnu_thumb1_case_uqi>:
 8000128:	b402      	push	{r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	5c09      	ldrb	r1, [r1, r0]
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	448e      	add	lr, r1
 8000136:	bc02      	pop	{r1}
 8000138:	4770      	bx	lr
 800013a:	46c0      	nop			@ (mov r8, r8)

0800013c <__gnu_thumb1_case_shi>:
 800013c:	b403      	push	{r0, r1}
 800013e:	4671      	mov	r1, lr
 8000140:	0849      	lsrs	r1, r1, #1
 8000142:	0040      	lsls	r0, r0, #1
 8000144:	0049      	lsls	r1, r1, #1
 8000146:	5e09      	ldrsh	r1, [r1, r0]
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	448e      	add	lr, r1
 800014c:	bc03      	pop	{r0, r1}
 800014e:	4770      	bx	lr

08000150 <__udivsi3>:
 8000150:	2200      	movs	r2, #0
 8000152:	0843      	lsrs	r3, r0, #1
 8000154:	428b      	cmp	r3, r1
 8000156:	d374      	bcc.n	8000242 <__udivsi3+0xf2>
 8000158:	0903      	lsrs	r3, r0, #4
 800015a:	428b      	cmp	r3, r1
 800015c:	d35f      	bcc.n	800021e <__udivsi3+0xce>
 800015e:	0a03      	lsrs	r3, r0, #8
 8000160:	428b      	cmp	r3, r1
 8000162:	d344      	bcc.n	80001ee <__udivsi3+0x9e>
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d328      	bcc.n	80001bc <__udivsi3+0x6c>
 800016a:	0c03      	lsrs	r3, r0, #16
 800016c:	428b      	cmp	r3, r1
 800016e:	d30d      	bcc.n	800018c <__udivsi3+0x3c>
 8000170:	22ff      	movs	r2, #255	@ 0xff
 8000172:	0209      	lsls	r1, r1, #8
 8000174:	ba12      	rev	r2, r2
 8000176:	0c03      	lsrs	r3, r0, #16
 8000178:	428b      	cmp	r3, r1
 800017a:	d302      	bcc.n	8000182 <__udivsi3+0x32>
 800017c:	1212      	asrs	r2, r2, #8
 800017e:	0209      	lsls	r1, r1, #8
 8000180:	d065      	beq.n	800024e <__udivsi3+0xfe>
 8000182:	0b03      	lsrs	r3, r0, #12
 8000184:	428b      	cmp	r3, r1
 8000186:	d319      	bcc.n	80001bc <__udivsi3+0x6c>
 8000188:	e000      	b.n	800018c <__udivsi3+0x3c>
 800018a:	0a09      	lsrs	r1, r1, #8
 800018c:	0bc3      	lsrs	r3, r0, #15
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x46>
 8000192:	03cb      	lsls	r3, r1, #15
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b83      	lsrs	r3, r0, #14
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x52>
 800019e:	038b      	lsls	r3, r1, #14
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0b43      	lsrs	r3, r0, #13
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x5e>
 80001aa:	034b      	lsls	r3, r1, #13
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0b03      	lsrs	r3, r0, #12
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x6a>
 80001b6:	030b      	lsls	r3, r1, #12
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0ac3      	lsrs	r3, r0, #11
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x76>
 80001c2:	02cb      	lsls	r3, r1, #11
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a83      	lsrs	r3, r0, #10
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x82>
 80001ce:	028b      	lsls	r3, r1, #10
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0a43      	lsrs	r3, r0, #9
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x8e>
 80001da:	024b      	lsls	r3, r1, #9
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	0a03      	lsrs	r3, r0, #8
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x9a>
 80001e6:	020b      	lsls	r3, r1, #8
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	d2cd      	bcs.n	800018a <__udivsi3+0x3a>
 80001ee:	09c3      	lsrs	r3, r0, #7
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xa8>
 80001f4:	01cb      	lsls	r3, r1, #7
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0983      	lsrs	r3, r0, #6
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xb4>
 8000200:	018b      	lsls	r3, r1, #6
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0943      	lsrs	r3, r0, #5
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xc0>
 800020c:	014b      	lsls	r3, r1, #5
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0903      	lsrs	r3, r0, #4
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xcc>
 8000218:	010b      	lsls	r3, r1, #4
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	08c3      	lsrs	r3, r0, #3
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xd8>
 8000224:	00cb      	lsls	r3, r1, #3
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0883      	lsrs	r3, r0, #2
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xe4>
 8000230:	008b      	lsls	r3, r1, #2
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	0843      	lsrs	r3, r0, #1
 8000238:	428b      	cmp	r3, r1
 800023a:	d301      	bcc.n	8000240 <__udivsi3+0xf0>
 800023c:	004b      	lsls	r3, r1, #1
 800023e:	1ac0      	subs	r0, r0, r3
 8000240:	4152      	adcs	r2, r2
 8000242:	1a41      	subs	r1, r0, r1
 8000244:	d200      	bcs.n	8000248 <__udivsi3+0xf8>
 8000246:	4601      	mov	r1, r0
 8000248:	4152      	adcs	r2, r2
 800024a:	4610      	mov	r0, r2
 800024c:	4770      	bx	lr
 800024e:	e7ff      	b.n	8000250 <__udivsi3+0x100>
 8000250:	b501      	push	{r0, lr}
 8000252:	2000      	movs	r0, #0
 8000254:	f000 f8f0 	bl	8000438 <__aeabi_idiv0>
 8000258:	bd02      	pop	{r1, pc}
 800025a:	46c0      	nop			@ (mov r8, r8)

0800025c <__aeabi_uidivmod>:
 800025c:	2900      	cmp	r1, #0
 800025e:	d0f7      	beq.n	8000250 <__udivsi3+0x100>
 8000260:	e776      	b.n	8000150 <__udivsi3>
 8000262:	4770      	bx	lr

08000264 <__divsi3>:
 8000264:	4603      	mov	r3, r0
 8000266:	430b      	orrs	r3, r1
 8000268:	d47f      	bmi.n	800036a <__divsi3+0x106>
 800026a:	2200      	movs	r2, #0
 800026c:	0843      	lsrs	r3, r0, #1
 800026e:	428b      	cmp	r3, r1
 8000270:	d374      	bcc.n	800035c <__divsi3+0xf8>
 8000272:	0903      	lsrs	r3, r0, #4
 8000274:	428b      	cmp	r3, r1
 8000276:	d35f      	bcc.n	8000338 <__divsi3+0xd4>
 8000278:	0a03      	lsrs	r3, r0, #8
 800027a:	428b      	cmp	r3, r1
 800027c:	d344      	bcc.n	8000308 <__divsi3+0xa4>
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d328      	bcc.n	80002d6 <__divsi3+0x72>
 8000284:	0c03      	lsrs	r3, r0, #16
 8000286:	428b      	cmp	r3, r1
 8000288:	d30d      	bcc.n	80002a6 <__divsi3+0x42>
 800028a:	22ff      	movs	r2, #255	@ 0xff
 800028c:	0209      	lsls	r1, r1, #8
 800028e:	ba12      	rev	r2, r2
 8000290:	0c03      	lsrs	r3, r0, #16
 8000292:	428b      	cmp	r3, r1
 8000294:	d302      	bcc.n	800029c <__divsi3+0x38>
 8000296:	1212      	asrs	r2, r2, #8
 8000298:	0209      	lsls	r1, r1, #8
 800029a:	d065      	beq.n	8000368 <__divsi3+0x104>
 800029c:	0b03      	lsrs	r3, r0, #12
 800029e:	428b      	cmp	r3, r1
 80002a0:	d319      	bcc.n	80002d6 <__divsi3+0x72>
 80002a2:	e000      	b.n	80002a6 <__divsi3+0x42>
 80002a4:	0a09      	lsrs	r1, r1, #8
 80002a6:	0bc3      	lsrs	r3, r0, #15
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x4c>
 80002ac:	03cb      	lsls	r3, r1, #15
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b83      	lsrs	r3, r0, #14
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x58>
 80002b8:	038b      	lsls	r3, r1, #14
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0b43      	lsrs	r3, r0, #13
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x64>
 80002c4:	034b      	lsls	r3, r1, #13
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0b03      	lsrs	r3, r0, #12
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x70>
 80002d0:	030b      	lsls	r3, r1, #12
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0ac3      	lsrs	r3, r0, #11
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x7c>
 80002dc:	02cb      	lsls	r3, r1, #11
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a83      	lsrs	r3, r0, #10
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0x88>
 80002e8:	028b      	lsls	r3, r1, #10
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	0a43      	lsrs	r3, r0, #9
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d301      	bcc.n	80002f8 <__divsi3+0x94>
 80002f4:	024b      	lsls	r3, r1, #9
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	4152      	adcs	r2, r2
 80002fa:	0a03      	lsrs	r3, r0, #8
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0xa0>
 8000300:	020b      	lsls	r3, r1, #8
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	d2cd      	bcs.n	80002a4 <__divsi3+0x40>
 8000308:	09c3      	lsrs	r3, r0, #7
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xae>
 800030e:	01cb      	lsls	r3, r1, #7
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0983      	lsrs	r3, r0, #6
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xba>
 800031a:	018b      	lsls	r3, r1, #6
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0943      	lsrs	r3, r0, #5
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xc6>
 8000326:	014b      	lsls	r3, r1, #5
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xd2>
 8000332:	010b      	lsls	r3, r1, #4
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	08c3      	lsrs	r3, r0, #3
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xde>
 800033e:	00cb      	lsls	r3, r1, #3
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	0883      	lsrs	r3, r0, #2
 8000346:	428b      	cmp	r3, r1
 8000348:	d301      	bcc.n	800034e <__divsi3+0xea>
 800034a:	008b      	lsls	r3, r1, #2
 800034c:	1ac0      	subs	r0, r0, r3
 800034e:	4152      	adcs	r2, r2
 8000350:	0843      	lsrs	r3, r0, #1
 8000352:	428b      	cmp	r3, r1
 8000354:	d301      	bcc.n	800035a <__divsi3+0xf6>
 8000356:	004b      	lsls	r3, r1, #1
 8000358:	1ac0      	subs	r0, r0, r3
 800035a:	4152      	adcs	r2, r2
 800035c:	1a41      	subs	r1, r0, r1
 800035e:	d200      	bcs.n	8000362 <__divsi3+0xfe>
 8000360:	4601      	mov	r1, r0
 8000362:	4152      	adcs	r2, r2
 8000364:	4610      	mov	r0, r2
 8000366:	4770      	bx	lr
 8000368:	e05d      	b.n	8000426 <__divsi3+0x1c2>
 800036a:	0fca      	lsrs	r2, r1, #31
 800036c:	d000      	beq.n	8000370 <__divsi3+0x10c>
 800036e:	4249      	negs	r1, r1
 8000370:	1003      	asrs	r3, r0, #32
 8000372:	d300      	bcc.n	8000376 <__divsi3+0x112>
 8000374:	4240      	negs	r0, r0
 8000376:	4053      	eors	r3, r2
 8000378:	2200      	movs	r2, #0
 800037a:	469c      	mov	ip, r3
 800037c:	0903      	lsrs	r3, r0, #4
 800037e:	428b      	cmp	r3, r1
 8000380:	d32d      	bcc.n	80003de <__divsi3+0x17a>
 8000382:	0a03      	lsrs	r3, r0, #8
 8000384:	428b      	cmp	r3, r1
 8000386:	d312      	bcc.n	80003ae <__divsi3+0x14a>
 8000388:	22fc      	movs	r2, #252	@ 0xfc
 800038a:	0189      	lsls	r1, r1, #6
 800038c:	ba12      	rev	r2, r2
 800038e:	0a03      	lsrs	r3, r0, #8
 8000390:	428b      	cmp	r3, r1
 8000392:	d30c      	bcc.n	80003ae <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	1192      	asrs	r2, r2, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d308      	bcc.n	80003ae <__divsi3+0x14a>
 800039c:	0189      	lsls	r1, r1, #6
 800039e:	1192      	asrs	r2, r2, #6
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d304      	bcc.n	80003ae <__divsi3+0x14a>
 80003a4:	0189      	lsls	r1, r1, #6
 80003a6:	d03a      	beq.n	800041e <__divsi3+0x1ba>
 80003a8:	1192      	asrs	r2, r2, #6
 80003aa:	e000      	b.n	80003ae <__divsi3+0x14a>
 80003ac:	0989      	lsrs	r1, r1, #6
 80003ae:	09c3      	lsrs	r3, r0, #7
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x154>
 80003b4:	01cb      	lsls	r3, r1, #7
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0983      	lsrs	r3, r0, #6
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x160>
 80003c0:	018b      	lsls	r3, r1, #6
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0943      	lsrs	r3, r0, #5
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x16c>
 80003cc:	014b      	lsls	r3, r1, #5
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0903      	lsrs	r3, r0, #4
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x178>
 80003d8:	010b      	lsls	r3, r1, #4
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	08c3      	lsrs	r3, r0, #3
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x184>
 80003e4:	00cb      	lsls	r3, r1, #3
 80003e6:	1ac0      	subs	r0, r0, r3
 80003e8:	4152      	adcs	r2, r2
 80003ea:	0883      	lsrs	r3, r0, #2
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x190>
 80003f0:	008b      	lsls	r3, r1, #2
 80003f2:	1ac0      	subs	r0, r0, r3
 80003f4:	4152      	adcs	r2, r2
 80003f6:	d2d9      	bcs.n	80003ac <__divsi3+0x148>
 80003f8:	0843      	lsrs	r3, r0, #1
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d301      	bcc.n	8000402 <__divsi3+0x19e>
 80003fe:	004b      	lsls	r3, r1, #1
 8000400:	1ac0      	subs	r0, r0, r3
 8000402:	4152      	adcs	r2, r2
 8000404:	1a41      	subs	r1, r0, r1
 8000406:	d200      	bcs.n	800040a <__divsi3+0x1a6>
 8000408:	4601      	mov	r1, r0
 800040a:	4663      	mov	r3, ip
 800040c:	4152      	adcs	r2, r2
 800040e:	105b      	asrs	r3, r3, #1
 8000410:	4610      	mov	r0, r2
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x1b4>
 8000414:	4240      	negs	r0, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d500      	bpl.n	800041c <__divsi3+0x1b8>
 800041a:	4249      	negs	r1, r1
 800041c:	4770      	bx	lr
 800041e:	4663      	mov	r3, ip
 8000420:	105b      	asrs	r3, r3, #1
 8000422:	d300      	bcc.n	8000426 <__divsi3+0x1c2>
 8000424:	4240      	negs	r0, r0
 8000426:	b501      	push	{r0, lr}
 8000428:	2000      	movs	r0, #0
 800042a:	f000 f805 	bl	8000438 <__aeabi_idiv0>
 800042e:	bd02      	pop	{r1, pc}

08000430 <__aeabi_idivmod>:
 8000430:	2900      	cmp	r1, #0
 8000432:	d0f8      	beq.n	8000426 <__divsi3+0x1c2>
 8000434:	e716      	b.n	8000264 <__divsi3>
 8000436:	4770      	bx	lr

08000438 <__aeabi_idiv0>:
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdrcmple>:
 800043c:	4684      	mov	ip, r0
 800043e:	0010      	movs	r0, r2
 8000440:	4662      	mov	r2, ip
 8000442:	468c      	mov	ip, r1
 8000444:	0019      	movs	r1, r3
 8000446:	4663      	mov	r3, ip
 8000448:	e000      	b.n	800044c <__aeabi_cdcmpeq>
 800044a:	46c0      	nop			@ (mov r8, r8)

0800044c <__aeabi_cdcmpeq>:
 800044c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800044e:	f002 f843 	bl	80024d8 <__ledf2>
 8000452:	2800      	cmp	r0, #0
 8000454:	d401      	bmi.n	800045a <__aeabi_cdcmpeq+0xe>
 8000456:	2100      	movs	r1, #0
 8000458:	42c8      	cmn	r0, r1
 800045a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800045c <__aeabi_dcmpeq>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 ff83 	bl	8002368 <__eqdf2>
 8000462:	4240      	negs	r0, r0
 8000464:	3001      	adds	r0, #1
 8000466:	bd10      	pop	{r4, pc}

08000468 <__aeabi_dcmplt>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f002 f835 	bl	80024d8 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	db01      	blt.n	8000476 <__aeabi_dcmplt+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			@ (mov r8, r8)

0800047c <__aeabi_dcmple>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f002 f82b 	bl	80024d8 <__ledf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dd01      	ble.n	800048a <__aeabi_dcmple+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__aeabi_dcmpgt>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 ffad 	bl	80023f0 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	dc01      	bgt.n	800049e <__aeabi_dcmpgt+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			@ (mov r8, r8)

080004a4 <__aeabi_dcmpge>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	f001 ffa3 	bl	80023f0 <__gedf2>
 80004aa:	2800      	cmp	r0, #0
 80004ac:	da01      	bge.n	80004b2 <__aeabi_dcmpge+0xe>
 80004ae:	2000      	movs	r0, #0
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	2001      	movs	r0, #1
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	46c0      	nop			@ (mov r8, r8)

080004b8 <__aeabi_cfrcmple>:
 80004b8:	4684      	mov	ip, r0
 80004ba:	0008      	movs	r0, r1
 80004bc:	4661      	mov	r1, ip
 80004be:	e7ff      	b.n	80004c0 <__aeabi_cfcmpeq>

080004c0 <__aeabi_cfcmpeq>:
 80004c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004c2:	f000 fcf5 	bl	8000eb0 <__lesf2>
 80004c6:	2800      	cmp	r0, #0
 80004c8:	d401      	bmi.n	80004ce <__aeabi_cfcmpeq+0xe>
 80004ca:	2100      	movs	r1, #0
 80004cc:	42c8      	cmn	r0, r1
 80004ce:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004d0 <__aeabi_fcmpeq>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 fc75 	bl	8000dc0 <__eqsf2>
 80004d6:	4240      	negs	r0, r0
 80004d8:	3001      	adds	r0, #1
 80004da:	bd10      	pop	{r4, pc}

080004dc <__aeabi_fcmplt>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 fce7 	bl	8000eb0 <__lesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	db01      	blt.n	80004ea <__aeabi_fcmplt+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			@ (mov r8, r8)

080004f0 <__aeabi_fcmple>:
 80004f0:	b510      	push	{r4, lr}
 80004f2:	f000 fcdd 	bl	8000eb0 <__lesf2>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	dd01      	ble.n	80004fe <__aeabi_fcmple+0xe>
 80004fa:	2000      	movs	r0, #0
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	2001      	movs	r0, #1
 8000500:	bd10      	pop	{r4, pc}
 8000502:	46c0      	nop			@ (mov r8, r8)

08000504 <__aeabi_fcmpgt>:
 8000504:	b510      	push	{r4, lr}
 8000506:	f000 fc83 	bl	8000e10 <__gesf2>
 800050a:	2800      	cmp	r0, #0
 800050c:	dc01      	bgt.n	8000512 <__aeabi_fcmpgt+0xe>
 800050e:	2000      	movs	r0, #0
 8000510:	bd10      	pop	{r4, pc}
 8000512:	2001      	movs	r0, #1
 8000514:	bd10      	pop	{r4, pc}
 8000516:	46c0      	nop			@ (mov r8, r8)

08000518 <__aeabi_fcmpge>:
 8000518:	b510      	push	{r4, lr}
 800051a:	f000 fc79 	bl	8000e10 <__gesf2>
 800051e:	2800      	cmp	r0, #0
 8000520:	da01      	bge.n	8000526 <__aeabi_fcmpge+0xe>
 8000522:	2000      	movs	r0, #0
 8000524:	bd10      	pop	{r4, pc}
 8000526:	2001      	movs	r0, #1
 8000528:	bd10      	pop	{r4, pc}
 800052a:	46c0      	nop			@ (mov r8, r8)

0800052c <__aeabi_uldivmod>:
 800052c:	2b00      	cmp	r3, #0
 800052e:	d111      	bne.n	8000554 <__aeabi_uldivmod+0x28>
 8000530:	2a00      	cmp	r2, #0
 8000532:	d10f      	bne.n	8000554 <__aeabi_uldivmod+0x28>
 8000534:	2900      	cmp	r1, #0
 8000536:	d100      	bne.n	800053a <__aeabi_uldivmod+0xe>
 8000538:	2800      	cmp	r0, #0
 800053a:	d002      	beq.n	8000542 <__aeabi_uldivmod+0x16>
 800053c:	2100      	movs	r1, #0
 800053e:	43c9      	mvns	r1, r1
 8000540:	0008      	movs	r0, r1
 8000542:	b407      	push	{r0, r1, r2}
 8000544:	4802      	ldr	r0, [pc, #8]	@ (8000550 <__aeabi_uldivmod+0x24>)
 8000546:	a102      	add	r1, pc, #8	@ (adr r1, 8000550 <__aeabi_uldivmod+0x24>)
 8000548:	1840      	adds	r0, r0, r1
 800054a:	9002      	str	r0, [sp, #8]
 800054c:	bd03      	pop	{r0, r1, pc}
 800054e:	46c0      	nop			@ (mov r8, r8)
 8000550:	fffffee9 	.word	0xfffffee9
 8000554:	b403      	push	{r0, r1}
 8000556:	4668      	mov	r0, sp
 8000558:	b501      	push	{r0, lr}
 800055a:	9802      	ldr	r0, [sp, #8]
 800055c:	f000 f8ba 	bl	80006d4 <__udivmoddi4>
 8000560:	9b01      	ldr	r3, [sp, #4]
 8000562:	469e      	mov	lr, r3
 8000564:	b002      	add	sp, #8
 8000566:	bc0c      	pop	{r2, r3}
 8000568:	4770      	bx	lr
 800056a:	46c0      	nop			@ (mov r8, r8)

0800056c <__aeabi_lmul>:
 800056c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800056e:	46ce      	mov	lr, r9
 8000570:	4699      	mov	r9, r3
 8000572:	0c03      	lsrs	r3, r0, #16
 8000574:	469c      	mov	ip, r3
 8000576:	0413      	lsls	r3, r2, #16
 8000578:	4647      	mov	r7, r8
 800057a:	0c1b      	lsrs	r3, r3, #16
 800057c:	001d      	movs	r5, r3
 800057e:	000e      	movs	r6, r1
 8000580:	4661      	mov	r1, ip
 8000582:	0404      	lsls	r4, r0, #16
 8000584:	0c24      	lsrs	r4, r4, #16
 8000586:	b580      	push	{r7, lr}
 8000588:	0007      	movs	r7, r0
 800058a:	0c10      	lsrs	r0, r2, #16
 800058c:	434b      	muls	r3, r1
 800058e:	4365      	muls	r5, r4
 8000590:	4341      	muls	r1, r0
 8000592:	4360      	muls	r0, r4
 8000594:	0c2c      	lsrs	r4, r5, #16
 8000596:	18c0      	adds	r0, r0, r3
 8000598:	1824      	adds	r4, r4, r0
 800059a:	468c      	mov	ip, r1
 800059c:	42a3      	cmp	r3, r4
 800059e:	d903      	bls.n	80005a8 <__aeabi_lmul+0x3c>
 80005a0:	2380      	movs	r3, #128	@ 0x80
 80005a2:	025b      	lsls	r3, r3, #9
 80005a4:	4698      	mov	r8, r3
 80005a6:	44c4      	add	ip, r8
 80005a8:	4649      	mov	r1, r9
 80005aa:	4379      	muls	r1, r7
 80005ac:	4356      	muls	r6, r2
 80005ae:	0c23      	lsrs	r3, r4, #16
 80005b0:	042d      	lsls	r5, r5, #16
 80005b2:	0c2d      	lsrs	r5, r5, #16
 80005b4:	1989      	adds	r1, r1, r6
 80005b6:	4463      	add	r3, ip
 80005b8:	0424      	lsls	r4, r4, #16
 80005ba:	1960      	adds	r0, r4, r5
 80005bc:	18c9      	adds	r1, r1, r3
 80005be:	bcc0      	pop	{r6, r7}
 80005c0:	46b9      	mov	r9, r7
 80005c2:	46b0      	mov	r8, r6
 80005c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005c6:	46c0      	nop			@ (mov r8, r8)

080005c8 <__aeabi_f2uiz>:
 80005c8:	219e      	movs	r1, #158	@ 0x9e
 80005ca:	b510      	push	{r4, lr}
 80005cc:	05c9      	lsls	r1, r1, #23
 80005ce:	1c04      	adds	r4, r0, #0
 80005d0:	f7ff ffa2 	bl	8000518 <__aeabi_fcmpge>
 80005d4:	2800      	cmp	r0, #0
 80005d6:	d103      	bne.n	80005e0 <__aeabi_f2uiz+0x18>
 80005d8:	1c20      	adds	r0, r4, #0
 80005da:	f000 ff99 	bl	8001510 <__aeabi_f2iz>
 80005de:	bd10      	pop	{r4, pc}
 80005e0:	219e      	movs	r1, #158	@ 0x9e
 80005e2:	1c20      	adds	r0, r4, #0
 80005e4:	05c9      	lsls	r1, r1, #23
 80005e6:	f000 fdef 	bl	80011c8 <__aeabi_fsub>
 80005ea:	f000 ff91 	bl	8001510 <__aeabi_f2iz>
 80005ee:	2380      	movs	r3, #128	@ 0x80
 80005f0:	061b      	lsls	r3, r3, #24
 80005f2:	469c      	mov	ip, r3
 80005f4:	4460      	add	r0, ip
 80005f6:	e7f2      	b.n	80005de <__aeabi_f2uiz+0x16>

080005f8 <__aeabi_d2uiz>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	2200      	movs	r2, #0
 80005fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000630 <__aeabi_d2uiz+0x38>)
 80005fe:	0004      	movs	r4, r0
 8000600:	000d      	movs	r5, r1
 8000602:	f7ff ff4f 	bl	80004a4 <__aeabi_dcmpge>
 8000606:	2800      	cmp	r0, #0
 8000608:	d104      	bne.n	8000614 <__aeabi_d2uiz+0x1c>
 800060a:	0020      	movs	r0, r4
 800060c:	0029      	movs	r1, r5
 800060e:	f002 fe5b 	bl	80032c8 <__aeabi_d2iz>
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	4b06      	ldr	r3, [pc, #24]	@ (8000630 <__aeabi_d2uiz+0x38>)
 8000616:	2200      	movs	r2, #0
 8000618:	0020      	movs	r0, r4
 800061a:	0029      	movs	r1, r5
 800061c:	f002 fa96 	bl	8002b4c <__aeabi_dsub>
 8000620:	f002 fe52 	bl	80032c8 <__aeabi_d2iz>
 8000624:	2380      	movs	r3, #128	@ 0x80
 8000626:	061b      	lsls	r3, r3, #24
 8000628:	469c      	mov	ip, r3
 800062a:	4460      	add	r0, ip
 800062c:	e7f1      	b.n	8000612 <__aeabi_d2uiz+0x1a>
 800062e:	46c0      	nop			@ (mov r8, r8)
 8000630:	41e00000 	.word	0x41e00000

08000634 <__aeabi_d2lz>:
 8000634:	b570      	push	{r4, r5, r6, lr}
 8000636:	2200      	movs	r2, #0
 8000638:	2300      	movs	r3, #0
 800063a:	0004      	movs	r4, r0
 800063c:	000d      	movs	r5, r1
 800063e:	f7ff ff13 	bl	8000468 <__aeabi_dcmplt>
 8000642:	2800      	cmp	r0, #0
 8000644:	d108      	bne.n	8000658 <__aeabi_d2lz+0x24>
 8000646:	0020      	movs	r0, r4
 8000648:	0029      	movs	r1, r5
 800064a:	f000 f80f 	bl	800066c <__aeabi_d2ulz>
 800064e:	0002      	movs	r2, r0
 8000650:	000b      	movs	r3, r1
 8000652:	0010      	movs	r0, r2
 8000654:	0019      	movs	r1, r3
 8000656:	bd70      	pop	{r4, r5, r6, pc}
 8000658:	2380      	movs	r3, #128	@ 0x80
 800065a:	061b      	lsls	r3, r3, #24
 800065c:	18e9      	adds	r1, r5, r3
 800065e:	0020      	movs	r0, r4
 8000660:	f000 f804 	bl	800066c <__aeabi_d2ulz>
 8000664:	2300      	movs	r3, #0
 8000666:	4242      	negs	r2, r0
 8000668:	418b      	sbcs	r3, r1
 800066a:	e7f2      	b.n	8000652 <__aeabi_d2lz+0x1e>

0800066c <__aeabi_d2ulz>:
 800066c:	b570      	push	{r4, r5, r6, lr}
 800066e:	2200      	movs	r2, #0
 8000670:	4b0b      	ldr	r3, [pc, #44]	@ (80006a0 <__aeabi_d2ulz+0x34>)
 8000672:	000d      	movs	r5, r1
 8000674:	0004      	movs	r4, r0
 8000676:	f001 ffa1 	bl	80025bc <__aeabi_dmul>
 800067a:	f7ff ffbd 	bl	80005f8 <__aeabi_d2uiz>
 800067e:	0006      	movs	r6, r0
 8000680:	f002 fe8c 	bl	800339c <__aeabi_ui2d>
 8000684:	2200      	movs	r2, #0
 8000686:	4b07      	ldr	r3, [pc, #28]	@ (80006a4 <__aeabi_d2ulz+0x38>)
 8000688:	f001 ff98 	bl	80025bc <__aeabi_dmul>
 800068c:	0002      	movs	r2, r0
 800068e:	000b      	movs	r3, r1
 8000690:	0020      	movs	r0, r4
 8000692:	0029      	movs	r1, r5
 8000694:	f002 fa5a 	bl	8002b4c <__aeabi_dsub>
 8000698:	f7ff ffae 	bl	80005f8 <__aeabi_d2uiz>
 800069c:	0031      	movs	r1, r6
 800069e:	bd70      	pop	{r4, r5, r6, pc}
 80006a0:	3df00000 	.word	0x3df00000
 80006a4:	41f00000 	.word	0x41f00000

080006a8 <__aeabi_l2d>:
 80006a8:	b570      	push	{r4, r5, r6, lr}
 80006aa:	0006      	movs	r6, r0
 80006ac:	0008      	movs	r0, r1
 80006ae:	f002 fe47 	bl	8003340 <__aeabi_i2d>
 80006b2:	2200      	movs	r2, #0
 80006b4:	4b06      	ldr	r3, [pc, #24]	@ (80006d0 <__aeabi_l2d+0x28>)
 80006b6:	f001 ff81 	bl	80025bc <__aeabi_dmul>
 80006ba:	000d      	movs	r5, r1
 80006bc:	0004      	movs	r4, r0
 80006be:	0030      	movs	r0, r6
 80006c0:	f002 fe6c 	bl	800339c <__aeabi_ui2d>
 80006c4:	002b      	movs	r3, r5
 80006c6:	0022      	movs	r2, r4
 80006c8:	f000 ffd0 	bl	800166c <__aeabi_dadd>
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	46c0      	nop			@ (mov r8, r8)
 80006d0:	41f00000 	.word	0x41f00000

080006d4 <__udivmoddi4>:
 80006d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006d6:	4657      	mov	r7, sl
 80006d8:	464e      	mov	r6, r9
 80006da:	4645      	mov	r5, r8
 80006dc:	46de      	mov	lr, fp
 80006de:	b5e0      	push	{r5, r6, r7, lr}
 80006e0:	0004      	movs	r4, r0
 80006e2:	000d      	movs	r5, r1
 80006e4:	4692      	mov	sl, r2
 80006e6:	4699      	mov	r9, r3
 80006e8:	b083      	sub	sp, #12
 80006ea:	428b      	cmp	r3, r1
 80006ec:	d830      	bhi.n	8000750 <__udivmoddi4+0x7c>
 80006ee:	d02d      	beq.n	800074c <__udivmoddi4+0x78>
 80006f0:	4649      	mov	r1, r9
 80006f2:	4650      	mov	r0, sl
 80006f4:	f002 ff60 	bl	80035b8 <__clzdi2>
 80006f8:	0029      	movs	r1, r5
 80006fa:	0006      	movs	r6, r0
 80006fc:	0020      	movs	r0, r4
 80006fe:	f002 ff5b 	bl	80035b8 <__clzdi2>
 8000702:	1a33      	subs	r3, r6, r0
 8000704:	4698      	mov	r8, r3
 8000706:	3b20      	subs	r3, #32
 8000708:	d434      	bmi.n	8000774 <__udivmoddi4+0xa0>
 800070a:	469b      	mov	fp, r3
 800070c:	4653      	mov	r3, sl
 800070e:	465a      	mov	r2, fp
 8000710:	4093      	lsls	r3, r2
 8000712:	4642      	mov	r2, r8
 8000714:	001f      	movs	r7, r3
 8000716:	4653      	mov	r3, sl
 8000718:	4093      	lsls	r3, r2
 800071a:	001e      	movs	r6, r3
 800071c:	42af      	cmp	r7, r5
 800071e:	d83b      	bhi.n	8000798 <__udivmoddi4+0xc4>
 8000720:	42af      	cmp	r7, r5
 8000722:	d100      	bne.n	8000726 <__udivmoddi4+0x52>
 8000724:	e079      	b.n	800081a <__udivmoddi4+0x146>
 8000726:	465b      	mov	r3, fp
 8000728:	1ba4      	subs	r4, r4, r6
 800072a:	41bd      	sbcs	r5, r7
 800072c:	2b00      	cmp	r3, #0
 800072e:	da00      	bge.n	8000732 <__udivmoddi4+0x5e>
 8000730:	e076      	b.n	8000820 <__udivmoddi4+0x14c>
 8000732:	2200      	movs	r2, #0
 8000734:	2300      	movs	r3, #0
 8000736:	9200      	str	r2, [sp, #0]
 8000738:	9301      	str	r3, [sp, #4]
 800073a:	2301      	movs	r3, #1
 800073c:	465a      	mov	r2, fp
 800073e:	4093      	lsls	r3, r2
 8000740:	9301      	str	r3, [sp, #4]
 8000742:	2301      	movs	r3, #1
 8000744:	4642      	mov	r2, r8
 8000746:	4093      	lsls	r3, r2
 8000748:	9300      	str	r3, [sp, #0]
 800074a:	e029      	b.n	80007a0 <__udivmoddi4+0xcc>
 800074c:	4282      	cmp	r2, r0
 800074e:	d9cf      	bls.n	80006f0 <__udivmoddi4+0x1c>
 8000750:	2200      	movs	r2, #0
 8000752:	2300      	movs	r3, #0
 8000754:	9200      	str	r2, [sp, #0]
 8000756:	9301      	str	r3, [sp, #4]
 8000758:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <__udivmoddi4+0x8e>
 800075e:	601c      	str	r4, [r3, #0]
 8000760:	605d      	str	r5, [r3, #4]
 8000762:	9800      	ldr	r0, [sp, #0]
 8000764:	9901      	ldr	r1, [sp, #4]
 8000766:	b003      	add	sp, #12
 8000768:	bcf0      	pop	{r4, r5, r6, r7}
 800076a:	46bb      	mov	fp, r7
 800076c:	46b2      	mov	sl, r6
 800076e:	46a9      	mov	r9, r5
 8000770:	46a0      	mov	r8, r4
 8000772:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000774:	4642      	mov	r2, r8
 8000776:	469b      	mov	fp, r3
 8000778:	2320      	movs	r3, #32
 800077a:	1a9b      	subs	r3, r3, r2
 800077c:	4652      	mov	r2, sl
 800077e:	40da      	lsrs	r2, r3
 8000780:	4641      	mov	r1, r8
 8000782:	0013      	movs	r3, r2
 8000784:	464a      	mov	r2, r9
 8000786:	408a      	lsls	r2, r1
 8000788:	0017      	movs	r7, r2
 800078a:	4642      	mov	r2, r8
 800078c:	431f      	orrs	r7, r3
 800078e:	4653      	mov	r3, sl
 8000790:	4093      	lsls	r3, r2
 8000792:	001e      	movs	r6, r3
 8000794:	42af      	cmp	r7, r5
 8000796:	d9c3      	bls.n	8000720 <__udivmoddi4+0x4c>
 8000798:	2200      	movs	r2, #0
 800079a:	2300      	movs	r3, #0
 800079c:	9200      	str	r2, [sp, #0]
 800079e:	9301      	str	r3, [sp, #4]
 80007a0:	4643      	mov	r3, r8
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d0d8      	beq.n	8000758 <__udivmoddi4+0x84>
 80007a6:	07fb      	lsls	r3, r7, #31
 80007a8:	0872      	lsrs	r2, r6, #1
 80007aa:	431a      	orrs	r2, r3
 80007ac:	4646      	mov	r6, r8
 80007ae:	087b      	lsrs	r3, r7, #1
 80007b0:	e00e      	b.n	80007d0 <__udivmoddi4+0xfc>
 80007b2:	42ab      	cmp	r3, r5
 80007b4:	d101      	bne.n	80007ba <__udivmoddi4+0xe6>
 80007b6:	42a2      	cmp	r2, r4
 80007b8:	d80c      	bhi.n	80007d4 <__udivmoddi4+0x100>
 80007ba:	1aa4      	subs	r4, r4, r2
 80007bc:	419d      	sbcs	r5, r3
 80007be:	2001      	movs	r0, #1
 80007c0:	1924      	adds	r4, r4, r4
 80007c2:	416d      	adcs	r5, r5
 80007c4:	2100      	movs	r1, #0
 80007c6:	3e01      	subs	r6, #1
 80007c8:	1824      	adds	r4, r4, r0
 80007ca:	414d      	adcs	r5, r1
 80007cc:	2e00      	cmp	r6, #0
 80007ce:	d006      	beq.n	80007de <__udivmoddi4+0x10a>
 80007d0:	42ab      	cmp	r3, r5
 80007d2:	d9ee      	bls.n	80007b2 <__udivmoddi4+0xde>
 80007d4:	3e01      	subs	r6, #1
 80007d6:	1924      	adds	r4, r4, r4
 80007d8:	416d      	adcs	r5, r5
 80007da:	2e00      	cmp	r6, #0
 80007dc:	d1f8      	bne.n	80007d0 <__udivmoddi4+0xfc>
 80007de:	9800      	ldr	r0, [sp, #0]
 80007e0:	9901      	ldr	r1, [sp, #4]
 80007e2:	465b      	mov	r3, fp
 80007e4:	1900      	adds	r0, r0, r4
 80007e6:	4169      	adcs	r1, r5
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	db24      	blt.n	8000836 <__udivmoddi4+0x162>
 80007ec:	002b      	movs	r3, r5
 80007ee:	465a      	mov	r2, fp
 80007f0:	4644      	mov	r4, r8
 80007f2:	40d3      	lsrs	r3, r2
 80007f4:	002a      	movs	r2, r5
 80007f6:	40e2      	lsrs	r2, r4
 80007f8:	001c      	movs	r4, r3
 80007fa:	465b      	mov	r3, fp
 80007fc:	0015      	movs	r5, r2
 80007fe:	2b00      	cmp	r3, #0
 8000800:	db2a      	blt.n	8000858 <__udivmoddi4+0x184>
 8000802:	0026      	movs	r6, r4
 8000804:	409e      	lsls	r6, r3
 8000806:	0033      	movs	r3, r6
 8000808:	0026      	movs	r6, r4
 800080a:	4647      	mov	r7, r8
 800080c:	40be      	lsls	r6, r7
 800080e:	0032      	movs	r2, r6
 8000810:	1a80      	subs	r0, r0, r2
 8000812:	4199      	sbcs	r1, r3
 8000814:	9000      	str	r0, [sp, #0]
 8000816:	9101      	str	r1, [sp, #4]
 8000818:	e79e      	b.n	8000758 <__udivmoddi4+0x84>
 800081a:	42a3      	cmp	r3, r4
 800081c:	d8bc      	bhi.n	8000798 <__udivmoddi4+0xc4>
 800081e:	e782      	b.n	8000726 <__udivmoddi4+0x52>
 8000820:	4642      	mov	r2, r8
 8000822:	2320      	movs	r3, #32
 8000824:	2100      	movs	r1, #0
 8000826:	1a9b      	subs	r3, r3, r2
 8000828:	2200      	movs	r2, #0
 800082a:	9100      	str	r1, [sp, #0]
 800082c:	9201      	str	r2, [sp, #4]
 800082e:	2201      	movs	r2, #1
 8000830:	40da      	lsrs	r2, r3
 8000832:	9201      	str	r2, [sp, #4]
 8000834:	e785      	b.n	8000742 <__udivmoddi4+0x6e>
 8000836:	4642      	mov	r2, r8
 8000838:	2320      	movs	r3, #32
 800083a:	1a9b      	subs	r3, r3, r2
 800083c:	002a      	movs	r2, r5
 800083e:	4646      	mov	r6, r8
 8000840:	409a      	lsls	r2, r3
 8000842:	0023      	movs	r3, r4
 8000844:	40f3      	lsrs	r3, r6
 8000846:	4644      	mov	r4, r8
 8000848:	4313      	orrs	r3, r2
 800084a:	002a      	movs	r2, r5
 800084c:	40e2      	lsrs	r2, r4
 800084e:	001c      	movs	r4, r3
 8000850:	465b      	mov	r3, fp
 8000852:	0015      	movs	r5, r2
 8000854:	2b00      	cmp	r3, #0
 8000856:	dad4      	bge.n	8000802 <__udivmoddi4+0x12e>
 8000858:	4642      	mov	r2, r8
 800085a:	002f      	movs	r7, r5
 800085c:	2320      	movs	r3, #32
 800085e:	0026      	movs	r6, r4
 8000860:	4097      	lsls	r7, r2
 8000862:	1a9b      	subs	r3, r3, r2
 8000864:	40de      	lsrs	r6, r3
 8000866:	003b      	movs	r3, r7
 8000868:	4333      	orrs	r3, r6
 800086a:	e7cd      	b.n	8000808 <__udivmoddi4+0x134>

0800086c <__aeabi_fadd>:
 800086c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800086e:	46ce      	mov	lr, r9
 8000870:	4647      	mov	r7, r8
 8000872:	0243      	lsls	r3, r0, #9
 8000874:	0a5a      	lsrs	r2, r3, #9
 8000876:	024e      	lsls	r6, r1, #9
 8000878:	0045      	lsls	r5, r0, #1
 800087a:	0fc4      	lsrs	r4, r0, #31
 800087c:	0048      	lsls	r0, r1, #1
 800087e:	4691      	mov	r9, r2
 8000880:	0e2d      	lsrs	r5, r5, #24
 8000882:	0a72      	lsrs	r2, r6, #9
 8000884:	0e00      	lsrs	r0, r0, #24
 8000886:	4694      	mov	ip, r2
 8000888:	b580      	push	{r7, lr}
 800088a:	099b      	lsrs	r3, r3, #6
 800088c:	0fc9      	lsrs	r1, r1, #31
 800088e:	09b6      	lsrs	r6, r6, #6
 8000890:	1a2a      	subs	r2, r5, r0
 8000892:	428c      	cmp	r4, r1
 8000894:	d021      	beq.n	80008da <__aeabi_fadd+0x6e>
 8000896:	2a00      	cmp	r2, #0
 8000898:	dd0d      	ble.n	80008b6 <__aeabi_fadd+0x4a>
 800089a:	2800      	cmp	r0, #0
 800089c:	d12d      	bne.n	80008fa <__aeabi_fadd+0x8e>
 800089e:	2e00      	cmp	r6, #0
 80008a0:	d100      	bne.n	80008a4 <__aeabi_fadd+0x38>
 80008a2:	e08d      	b.n	80009c0 <__aeabi_fadd+0x154>
 80008a4:	1e51      	subs	r1, r2, #1
 80008a6:	2a01      	cmp	r2, #1
 80008a8:	d100      	bne.n	80008ac <__aeabi_fadd+0x40>
 80008aa:	e11d      	b.n	8000ae8 <__aeabi_fadd+0x27c>
 80008ac:	2aff      	cmp	r2, #255	@ 0xff
 80008ae:	d100      	bne.n	80008b2 <__aeabi_fadd+0x46>
 80008b0:	e0ab      	b.n	8000a0a <__aeabi_fadd+0x19e>
 80008b2:	000a      	movs	r2, r1
 80008b4:	e027      	b.n	8000906 <__aeabi_fadd+0x9a>
 80008b6:	2a00      	cmp	r2, #0
 80008b8:	d04d      	beq.n	8000956 <__aeabi_fadd+0xea>
 80008ba:	1b42      	subs	r2, r0, r5
 80008bc:	2d00      	cmp	r5, #0
 80008be:	d000      	beq.n	80008c2 <__aeabi_fadd+0x56>
 80008c0:	e0cc      	b.n	8000a5c <__aeabi_fadd+0x1f0>
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d100      	bne.n	80008c8 <__aeabi_fadd+0x5c>
 80008c6:	e079      	b.n	80009bc <__aeabi_fadd+0x150>
 80008c8:	1e54      	subs	r4, r2, #1
 80008ca:	2a01      	cmp	r2, #1
 80008cc:	d100      	bne.n	80008d0 <__aeabi_fadd+0x64>
 80008ce:	e128      	b.n	8000b22 <__aeabi_fadd+0x2b6>
 80008d0:	2aff      	cmp	r2, #255	@ 0xff
 80008d2:	d100      	bne.n	80008d6 <__aeabi_fadd+0x6a>
 80008d4:	e097      	b.n	8000a06 <__aeabi_fadd+0x19a>
 80008d6:	0022      	movs	r2, r4
 80008d8:	e0c5      	b.n	8000a66 <__aeabi_fadd+0x1fa>
 80008da:	2a00      	cmp	r2, #0
 80008dc:	dc00      	bgt.n	80008e0 <__aeabi_fadd+0x74>
 80008de:	e096      	b.n	8000a0e <__aeabi_fadd+0x1a2>
 80008e0:	2800      	cmp	r0, #0
 80008e2:	d04f      	beq.n	8000984 <__aeabi_fadd+0x118>
 80008e4:	2dff      	cmp	r5, #255	@ 0xff
 80008e6:	d100      	bne.n	80008ea <__aeabi_fadd+0x7e>
 80008e8:	e08f      	b.n	8000a0a <__aeabi_fadd+0x19e>
 80008ea:	2180      	movs	r1, #128	@ 0x80
 80008ec:	04c9      	lsls	r1, r1, #19
 80008ee:	430e      	orrs	r6, r1
 80008f0:	2a1b      	cmp	r2, #27
 80008f2:	dd51      	ble.n	8000998 <__aeabi_fadd+0x12c>
 80008f4:	002a      	movs	r2, r5
 80008f6:	3301      	adds	r3, #1
 80008f8:	e018      	b.n	800092c <__aeabi_fadd+0xc0>
 80008fa:	2dff      	cmp	r5, #255	@ 0xff
 80008fc:	d100      	bne.n	8000900 <__aeabi_fadd+0x94>
 80008fe:	e084      	b.n	8000a0a <__aeabi_fadd+0x19e>
 8000900:	2180      	movs	r1, #128	@ 0x80
 8000902:	04c9      	lsls	r1, r1, #19
 8000904:	430e      	orrs	r6, r1
 8000906:	2101      	movs	r1, #1
 8000908:	2a1b      	cmp	r2, #27
 800090a:	dc08      	bgt.n	800091e <__aeabi_fadd+0xb2>
 800090c:	0031      	movs	r1, r6
 800090e:	2020      	movs	r0, #32
 8000910:	40d1      	lsrs	r1, r2
 8000912:	1a82      	subs	r2, r0, r2
 8000914:	4096      	lsls	r6, r2
 8000916:	0032      	movs	r2, r6
 8000918:	1e50      	subs	r0, r2, #1
 800091a:	4182      	sbcs	r2, r0
 800091c:	4311      	orrs	r1, r2
 800091e:	1a5b      	subs	r3, r3, r1
 8000920:	015a      	lsls	r2, r3, #5
 8000922:	d459      	bmi.n	80009d8 <__aeabi_fadd+0x16c>
 8000924:	2107      	movs	r1, #7
 8000926:	002a      	movs	r2, r5
 8000928:	4019      	ands	r1, r3
 800092a:	d049      	beq.n	80009c0 <__aeabi_fadd+0x154>
 800092c:	210f      	movs	r1, #15
 800092e:	4019      	ands	r1, r3
 8000930:	2904      	cmp	r1, #4
 8000932:	d000      	beq.n	8000936 <__aeabi_fadd+0xca>
 8000934:	3304      	adds	r3, #4
 8000936:	0159      	lsls	r1, r3, #5
 8000938:	d542      	bpl.n	80009c0 <__aeabi_fadd+0x154>
 800093a:	1c50      	adds	r0, r2, #1
 800093c:	2afe      	cmp	r2, #254	@ 0xfe
 800093e:	d03a      	beq.n	80009b6 <__aeabi_fadd+0x14a>
 8000940:	019b      	lsls	r3, r3, #6
 8000942:	b2c0      	uxtb	r0, r0
 8000944:	0a5b      	lsrs	r3, r3, #9
 8000946:	05c0      	lsls	r0, r0, #23
 8000948:	4318      	orrs	r0, r3
 800094a:	07e4      	lsls	r4, r4, #31
 800094c:	4320      	orrs	r0, r4
 800094e:	bcc0      	pop	{r6, r7}
 8000950:	46b9      	mov	r9, r7
 8000952:	46b0      	mov	r8, r6
 8000954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000956:	20fe      	movs	r0, #254	@ 0xfe
 8000958:	4680      	mov	r8, r0
 800095a:	1c6f      	adds	r7, r5, #1
 800095c:	0038      	movs	r0, r7
 800095e:	4647      	mov	r7, r8
 8000960:	4207      	tst	r7, r0
 8000962:	d000      	beq.n	8000966 <__aeabi_fadd+0xfa>
 8000964:	e08e      	b.n	8000a84 <__aeabi_fadd+0x218>
 8000966:	2d00      	cmp	r5, #0
 8000968:	d000      	beq.n	800096c <__aeabi_fadd+0x100>
 800096a:	e0b4      	b.n	8000ad6 <__aeabi_fadd+0x26a>
 800096c:	2b00      	cmp	r3, #0
 800096e:	d100      	bne.n	8000972 <__aeabi_fadd+0x106>
 8000970:	e0db      	b.n	8000b2a <__aeabi_fadd+0x2be>
 8000972:	2e00      	cmp	r6, #0
 8000974:	d06c      	beq.n	8000a50 <__aeabi_fadd+0x1e4>
 8000976:	1b98      	subs	r0, r3, r6
 8000978:	0145      	lsls	r5, r0, #5
 800097a:	d400      	bmi.n	800097e <__aeabi_fadd+0x112>
 800097c:	e0f7      	b.n	8000b6e <__aeabi_fadd+0x302>
 800097e:	000c      	movs	r4, r1
 8000980:	1af3      	subs	r3, r6, r3
 8000982:	e03d      	b.n	8000a00 <__aeabi_fadd+0x194>
 8000984:	2e00      	cmp	r6, #0
 8000986:	d01b      	beq.n	80009c0 <__aeabi_fadd+0x154>
 8000988:	1e51      	subs	r1, r2, #1
 800098a:	2a01      	cmp	r2, #1
 800098c:	d100      	bne.n	8000990 <__aeabi_fadd+0x124>
 800098e:	e082      	b.n	8000a96 <__aeabi_fadd+0x22a>
 8000990:	2aff      	cmp	r2, #255	@ 0xff
 8000992:	d03a      	beq.n	8000a0a <__aeabi_fadd+0x19e>
 8000994:	000a      	movs	r2, r1
 8000996:	e7ab      	b.n	80008f0 <__aeabi_fadd+0x84>
 8000998:	0031      	movs	r1, r6
 800099a:	2020      	movs	r0, #32
 800099c:	40d1      	lsrs	r1, r2
 800099e:	1a82      	subs	r2, r0, r2
 80009a0:	4096      	lsls	r6, r2
 80009a2:	0032      	movs	r2, r6
 80009a4:	1e50      	subs	r0, r2, #1
 80009a6:	4182      	sbcs	r2, r0
 80009a8:	430a      	orrs	r2, r1
 80009aa:	189b      	adds	r3, r3, r2
 80009ac:	015a      	lsls	r2, r3, #5
 80009ae:	d5b9      	bpl.n	8000924 <__aeabi_fadd+0xb8>
 80009b0:	1c6a      	adds	r2, r5, #1
 80009b2:	2dfe      	cmp	r5, #254	@ 0xfe
 80009b4:	d175      	bne.n	8000aa2 <__aeabi_fadd+0x236>
 80009b6:	20ff      	movs	r0, #255	@ 0xff
 80009b8:	2300      	movs	r3, #0
 80009ba:	e7c4      	b.n	8000946 <__aeabi_fadd+0xda>
 80009bc:	000c      	movs	r4, r1
 80009be:	0033      	movs	r3, r6
 80009c0:	08db      	lsrs	r3, r3, #3
 80009c2:	2aff      	cmp	r2, #255	@ 0xff
 80009c4:	d146      	bne.n	8000a54 <__aeabi_fadd+0x1e8>
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d0f5      	beq.n	80009b6 <__aeabi_fadd+0x14a>
 80009ca:	2280      	movs	r2, #128	@ 0x80
 80009cc:	03d2      	lsls	r2, r2, #15
 80009ce:	4313      	orrs	r3, r2
 80009d0:	025b      	lsls	r3, r3, #9
 80009d2:	20ff      	movs	r0, #255	@ 0xff
 80009d4:	0a5b      	lsrs	r3, r3, #9
 80009d6:	e7b6      	b.n	8000946 <__aeabi_fadd+0xda>
 80009d8:	019f      	lsls	r7, r3, #6
 80009da:	09bf      	lsrs	r7, r7, #6
 80009dc:	0038      	movs	r0, r7
 80009de:	f002 fdcd 	bl	800357c <__clzsi2>
 80009e2:	3805      	subs	r0, #5
 80009e4:	4087      	lsls	r7, r0
 80009e6:	4285      	cmp	r5, r0
 80009e8:	dc24      	bgt.n	8000a34 <__aeabi_fadd+0x1c8>
 80009ea:	003b      	movs	r3, r7
 80009ec:	2120      	movs	r1, #32
 80009ee:	1b42      	subs	r2, r0, r5
 80009f0:	3201      	adds	r2, #1
 80009f2:	40d3      	lsrs	r3, r2
 80009f4:	1a8a      	subs	r2, r1, r2
 80009f6:	4097      	lsls	r7, r2
 80009f8:	1e7a      	subs	r2, r7, #1
 80009fa:	4197      	sbcs	r7, r2
 80009fc:	2200      	movs	r2, #0
 80009fe:	433b      	orrs	r3, r7
 8000a00:	0759      	lsls	r1, r3, #29
 8000a02:	d193      	bne.n	800092c <__aeabi_fadd+0xc0>
 8000a04:	e797      	b.n	8000936 <__aeabi_fadd+0xca>
 8000a06:	000c      	movs	r4, r1
 8000a08:	0033      	movs	r3, r6
 8000a0a:	08db      	lsrs	r3, r3, #3
 8000a0c:	e7db      	b.n	80009c6 <__aeabi_fadd+0x15a>
 8000a0e:	2a00      	cmp	r2, #0
 8000a10:	d014      	beq.n	8000a3c <__aeabi_fadd+0x1d0>
 8000a12:	1b42      	subs	r2, r0, r5
 8000a14:	2d00      	cmp	r5, #0
 8000a16:	d14b      	bne.n	8000ab0 <__aeabi_fadd+0x244>
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d0d0      	beq.n	80009be <__aeabi_fadd+0x152>
 8000a1c:	1e51      	subs	r1, r2, #1
 8000a1e:	2a01      	cmp	r2, #1
 8000a20:	d100      	bne.n	8000a24 <__aeabi_fadd+0x1b8>
 8000a22:	e09e      	b.n	8000b62 <__aeabi_fadd+0x2f6>
 8000a24:	2aff      	cmp	r2, #255	@ 0xff
 8000a26:	d0ef      	beq.n	8000a08 <__aeabi_fadd+0x19c>
 8000a28:	000a      	movs	r2, r1
 8000a2a:	2a1b      	cmp	r2, #27
 8000a2c:	dd5f      	ble.n	8000aee <__aeabi_fadd+0x282>
 8000a2e:	0002      	movs	r2, r0
 8000a30:	1c73      	adds	r3, r6, #1
 8000a32:	e77b      	b.n	800092c <__aeabi_fadd+0xc0>
 8000a34:	4b50      	ldr	r3, [pc, #320]	@ (8000b78 <__aeabi_fadd+0x30c>)
 8000a36:	1a2a      	subs	r2, r5, r0
 8000a38:	403b      	ands	r3, r7
 8000a3a:	e7e1      	b.n	8000a00 <__aeabi_fadd+0x194>
 8000a3c:	21fe      	movs	r1, #254	@ 0xfe
 8000a3e:	1c6a      	adds	r2, r5, #1
 8000a40:	4211      	tst	r1, r2
 8000a42:	d13b      	bne.n	8000abc <__aeabi_fadd+0x250>
 8000a44:	2d00      	cmp	r5, #0
 8000a46:	d15d      	bne.n	8000b04 <__aeabi_fadd+0x298>
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d07f      	beq.n	8000b4c <__aeabi_fadd+0x2e0>
 8000a4c:	2e00      	cmp	r6, #0
 8000a4e:	d17f      	bne.n	8000b50 <__aeabi_fadd+0x2e4>
 8000a50:	2200      	movs	r2, #0
 8000a52:	08db      	lsrs	r3, r3, #3
 8000a54:	025b      	lsls	r3, r3, #9
 8000a56:	0a5b      	lsrs	r3, r3, #9
 8000a58:	b2d0      	uxtb	r0, r2
 8000a5a:	e774      	b.n	8000946 <__aeabi_fadd+0xda>
 8000a5c:	28ff      	cmp	r0, #255	@ 0xff
 8000a5e:	d0d2      	beq.n	8000a06 <__aeabi_fadd+0x19a>
 8000a60:	2480      	movs	r4, #128	@ 0x80
 8000a62:	04e4      	lsls	r4, r4, #19
 8000a64:	4323      	orrs	r3, r4
 8000a66:	2401      	movs	r4, #1
 8000a68:	2a1b      	cmp	r2, #27
 8000a6a:	dc07      	bgt.n	8000a7c <__aeabi_fadd+0x210>
 8000a6c:	001c      	movs	r4, r3
 8000a6e:	2520      	movs	r5, #32
 8000a70:	40d4      	lsrs	r4, r2
 8000a72:	1aaa      	subs	r2, r5, r2
 8000a74:	4093      	lsls	r3, r2
 8000a76:	1e5a      	subs	r2, r3, #1
 8000a78:	4193      	sbcs	r3, r2
 8000a7a:	431c      	orrs	r4, r3
 8000a7c:	1b33      	subs	r3, r6, r4
 8000a7e:	0005      	movs	r5, r0
 8000a80:	000c      	movs	r4, r1
 8000a82:	e74d      	b.n	8000920 <__aeabi_fadd+0xb4>
 8000a84:	1b9f      	subs	r7, r3, r6
 8000a86:	017a      	lsls	r2, r7, #5
 8000a88:	d422      	bmi.n	8000ad0 <__aeabi_fadd+0x264>
 8000a8a:	2f00      	cmp	r7, #0
 8000a8c:	d1a6      	bne.n	80009dc <__aeabi_fadd+0x170>
 8000a8e:	2400      	movs	r4, #0
 8000a90:	2000      	movs	r0, #0
 8000a92:	2300      	movs	r3, #0
 8000a94:	e757      	b.n	8000946 <__aeabi_fadd+0xda>
 8000a96:	199b      	adds	r3, r3, r6
 8000a98:	2501      	movs	r5, #1
 8000a9a:	3201      	adds	r2, #1
 8000a9c:	0159      	lsls	r1, r3, #5
 8000a9e:	d400      	bmi.n	8000aa2 <__aeabi_fadd+0x236>
 8000aa0:	e740      	b.n	8000924 <__aeabi_fadd+0xb8>
 8000aa2:	2101      	movs	r1, #1
 8000aa4:	4835      	ldr	r0, [pc, #212]	@ (8000b7c <__aeabi_fadd+0x310>)
 8000aa6:	4019      	ands	r1, r3
 8000aa8:	085b      	lsrs	r3, r3, #1
 8000aaa:	4003      	ands	r3, r0
 8000aac:	430b      	orrs	r3, r1
 8000aae:	e7a7      	b.n	8000a00 <__aeabi_fadd+0x194>
 8000ab0:	28ff      	cmp	r0, #255	@ 0xff
 8000ab2:	d0a9      	beq.n	8000a08 <__aeabi_fadd+0x19c>
 8000ab4:	2180      	movs	r1, #128	@ 0x80
 8000ab6:	04c9      	lsls	r1, r1, #19
 8000ab8:	430b      	orrs	r3, r1
 8000aba:	e7b6      	b.n	8000a2a <__aeabi_fadd+0x1be>
 8000abc:	2aff      	cmp	r2, #255	@ 0xff
 8000abe:	d100      	bne.n	8000ac2 <__aeabi_fadd+0x256>
 8000ac0:	e779      	b.n	80009b6 <__aeabi_fadd+0x14a>
 8000ac2:	199b      	adds	r3, r3, r6
 8000ac4:	085b      	lsrs	r3, r3, #1
 8000ac6:	0759      	lsls	r1, r3, #29
 8000ac8:	d000      	beq.n	8000acc <__aeabi_fadd+0x260>
 8000aca:	e72f      	b.n	800092c <__aeabi_fadd+0xc0>
 8000acc:	08db      	lsrs	r3, r3, #3
 8000ace:	e7c1      	b.n	8000a54 <__aeabi_fadd+0x1e8>
 8000ad0:	000c      	movs	r4, r1
 8000ad2:	1af7      	subs	r7, r6, r3
 8000ad4:	e782      	b.n	80009dc <__aeabi_fadd+0x170>
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d12c      	bne.n	8000b34 <__aeabi_fadd+0x2c8>
 8000ada:	2e00      	cmp	r6, #0
 8000adc:	d193      	bne.n	8000a06 <__aeabi_fadd+0x19a>
 8000ade:	2380      	movs	r3, #128	@ 0x80
 8000ae0:	2400      	movs	r4, #0
 8000ae2:	20ff      	movs	r0, #255	@ 0xff
 8000ae4:	03db      	lsls	r3, r3, #15
 8000ae6:	e72e      	b.n	8000946 <__aeabi_fadd+0xda>
 8000ae8:	2501      	movs	r5, #1
 8000aea:	1b9b      	subs	r3, r3, r6
 8000aec:	e718      	b.n	8000920 <__aeabi_fadd+0xb4>
 8000aee:	0019      	movs	r1, r3
 8000af0:	2520      	movs	r5, #32
 8000af2:	40d1      	lsrs	r1, r2
 8000af4:	1aaa      	subs	r2, r5, r2
 8000af6:	4093      	lsls	r3, r2
 8000af8:	1e5a      	subs	r2, r3, #1
 8000afa:	4193      	sbcs	r3, r2
 8000afc:	430b      	orrs	r3, r1
 8000afe:	0005      	movs	r5, r0
 8000b00:	199b      	adds	r3, r3, r6
 8000b02:	e753      	b.n	80009ac <__aeabi_fadd+0x140>
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d100      	bne.n	8000b0a <__aeabi_fadd+0x29e>
 8000b08:	e77e      	b.n	8000a08 <__aeabi_fadd+0x19c>
 8000b0a:	2e00      	cmp	r6, #0
 8000b0c:	d100      	bne.n	8000b10 <__aeabi_fadd+0x2a4>
 8000b0e:	e77c      	b.n	8000a0a <__aeabi_fadd+0x19e>
 8000b10:	2280      	movs	r2, #128	@ 0x80
 8000b12:	03d2      	lsls	r2, r2, #15
 8000b14:	4591      	cmp	r9, r2
 8000b16:	d302      	bcc.n	8000b1e <__aeabi_fadd+0x2b2>
 8000b18:	4594      	cmp	ip, r2
 8000b1a:	d200      	bcs.n	8000b1e <__aeabi_fadd+0x2b2>
 8000b1c:	0033      	movs	r3, r6
 8000b1e:	08db      	lsrs	r3, r3, #3
 8000b20:	e753      	b.n	80009ca <__aeabi_fadd+0x15e>
 8000b22:	000c      	movs	r4, r1
 8000b24:	1af3      	subs	r3, r6, r3
 8000b26:	3501      	adds	r5, #1
 8000b28:	e6fa      	b.n	8000920 <__aeabi_fadd+0xb4>
 8000b2a:	2e00      	cmp	r6, #0
 8000b2c:	d0af      	beq.n	8000a8e <__aeabi_fadd+0x222>
 8000b2e:	000c      	movs	r4, r1
 8000b30:	0033      	movs	r3, r6
 8000b32:	e78d      	b.n	8000a50 <__aeabi_fadd+0x1e4>
 8000b34:	2e00      	cmp	r6, #0
 8000b36:	d100      	bne.n	8000b3a <__aeabi_fadd+0x2ce>
 8000b38:	e767      	b.n	8000a0a <__aeabi_fadd+0x19e>
 8000b3a:	2280      	movs	r2, #128	@ 0x80
 8000b3c:	03d2      	lsls	r2, r2, #15
 8000b3e:	4591      	cmp	r9, r2
 8000b40:	d3ed      	bcc.n	8000b1e <__aeabi_fadd+0x2b2>
 8000b42:	4594      	cmp	ip, r2
 8000b44:	d2eb      	bcs.n	8000b1e <__aeabi_fadd+0x2b2>
 8000b46:	000c      	movs	r4, r1
 8000b48:	0033      	movs	r3, r6
 8000b4a:	e7e8      	b.n	8000b1e <__aeabi_fadd+0x2b2>
 8000b4c:	0033      	movs	r3, r6
 8000b4e:	e77f      	b.n	8000a50 <__aeabi_fadd+0x1e4>
 8000b50:	199b      	adds	r3, r3, r6
 8000b52:	2200      	movs	r2, #0
 8000b54:	0159      	lsls	r1, r3, #5
 8000b56:	d5b9      	bpl.n	8000acc <__aeabi_fadd+0x260>
 8000b58:	4a07      	ldr	r2, [pc, #28]	@ (8000b78 <__aeabi_fadd+0x30c>)
 8000b5a:	4013      	ands	r3, r2
 8000b5c:	08db      	lsrs	r3, r3, #3
 8000b5e:	2201      	movs	r2, #1
 8000b60:	e778      	b.n	8000a54 <__aeabi_fadd+0x1e8>
 8000b62:	199b      	adds	r3, r3, r6
 8000b64:	3201      	adds	r2, #1
 8000b66:	3501      	adds	r5, #1
 8000b68:	0159      	lsls	r1, r3, #5
 8000b6a:	d49a      	bmi.n	8000aa2 <__aeabi_fadd+0x236>
 8000b6c:	e6da      	b.n	8000924 <__aeabi_fadd+0xb8>
 8000b6e:	1e03      	subs	r3, r0, #0
 8000b70:	d08d      	beq.n	8000a8e <__aeabi_fadd+0x222>
 8000b72:	08db      	lsrs	r3, r3, #3
 8000b74:	e76e      	b.n	8000a54 <__aeabi_fadd+0x1e8>
 8000b76:	46c0      	nop			@ (mov r8, r8)
 8000b78:	fbffffff 	.word	0xfbffffff
 8000b7c:	7dffffff 	.word	0x7dffffff

08000b80 <__aeabi_fdiv>:
 8000b80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b82:	464f      	mov	r7, r9
 8000b84:	4646      	mov	r6, r8
 8000b86:	46d6      	mov	lr, sl
 8000b88:	0244      	lsls	r4, r0, #9
 8000b8a:	b5c0      	push	{r6, r7, lr}
 8000b8c:	0047      	lsls	r7, r0, #1
 8000b8e:	1c0e      	adds	r6, r1, #0
 8000b90:	0a64      	lsrs	r4, r4, #9
 8000b92:	0e3f      	lsrs	r7, r7, #24
 8000b94:	0fc5      	lsrs	r5, r0, #31
 8000b96:	2f00      	cmp	r7, #0
 8000b98:	d03c      	beq.n	8000c14 <__aeabi_fdiv+0x94>
 8000b9a:	2fff      	cmp	r7, #255	@ 0xff
 8000b9c:	d042      	beq.n	8000c24 <__aeabi_fdiv+0xa4>
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	2280      	movs	r2, #128	@ 0x80
 8000ba2:	4699      	mov	r9, r3
 8000ba4:	469a      	mov	sl, r3
 8000ba6:	00e4      	lsls	r4, r4, #3
 8000ba8:	04d2      	lsls	r2, r2, #19
 8000baa:	4314      	orrs	r4, r2
 8000bac:	3f7f      	subs	r7, #127	@ 0x7f
 8000bae:	0273      	lsls	r3, r6, #9
 8000bb0:	0a5b      	lsrs	r3, r3, #9
 8000bb2:	4698      	mov	r8, r3
 8000bb4:	0073      	lsls	r3, r6, #1
 8000bb6:	0e1b      	lsrs	r3, r3, #24
 8000bb8:	0ff6      	lsrs	r6, r6, #31
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d01b      	beq.n	8000bf6 <__aeabi_fdiv+0x76>
 8000bbe:	2bff      	cmp	r3, #255	@ 0xff
 8000bc0:	d013      	beq.n	8000bea <__aeabi_fdiv+0x6a>
 8000bc2:	4642      	mov	r2, r8
 8000bc4:	2180      	movs	r1, #128	@ 0x80
 8000bc6:	00d2      	lsls	r2, r2, #3
 8000bc8:	04c9      	lsls	r1, r1, #19
 8000bca:	4311      	orrs	r1, r2
 8000bcc:	4688      	mov	r8, r1
 8000bce:	2000      	movs	r0, #0
 8000bd0:	3b7f      	subs	r3, #127	@ 0x7f
 8000bd2:	0029      	movs	r1, r5
 8000bd4:	1aff      	subs	r7, r7, r3
 8000bd6:	464b      	mov	r3, r9
 8000bd8:	4071      	eors	r1, r6
 8000bda:	b2c9      	uxtb	r1, r1
 8000bdc:	2b0f      	cmp	r3, #15
 8000bde:	d900      	bls.n	8000be2 <__aeabi_fdiv+0x62>
 8000be0:	e0b5      	b.n	8000d4e <__aeabi_fdiv+0x1ce>
 8000be2:	4a74      	ldr	r2, [pc, #464]	@ (8000db4 <__aeabi_fdiv+0x234>)
 8000be4:	009b      	lsls	r3, r3, #2
 8000be6:	58d3      	ldr	r3, [r2, r3]
 8000be8:	469f      	mov	pc, r3
 8000bea:	4643      	mov	r3, r8
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d13f      	bne.n	8000c70 <__aeabi_fdiv+0xf0>
 8000bf0:	3fff      	subs	r7, #255	@ 0xff
 8000bf2:	3302      	adds	r3, #2
 8000bf4:	e003      	b.n	8000bfe <__aeabi_fdiv+0x7e>
 8000bf6:	4643      	mov	r3, r8
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d12d      	bne.n	8000c58 <__aeabi_fdiv+0xd8>
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	0029      	movs	r1, r5
 8000c00:	464a      	mov	r2, r9
 8000c02:	4071      	eors	r1, r6
 8000c04:	b2c9      	uxtb	r1, r1
 8000c06:	431a      	orrs	r2, r3
 8000c08:	2a0e      	cmp	r2, #14
 8000c0a:	d838      	bhi.n	8000c7e <__aeabi_fdiv+0xfe>
 8000c0c:	486a      	ldr	r0, [pc, #424]	@ (8000db8 <__aeabi_fdiv+0x238>)
 8000c0e:	0092      	lsls	r2, r2, #2
 8000c10:	5882      	ldr	r2, [r0, r2]
 8000c12:	4697      	mov	pc, r2
 8000c14:	2c00      	cmp	r4, #0
 8000c16:	d113      	bne.n	8000c40 <__aeabi_fdiv+0xc0>
 8000c18:	2304      	movs	r3, #4
 8000c1a:	4699      	mov	r9, r3
 8000c1c:	3b03      	subs	r3, #3
 8000c1e:	2700      	movs	r7, #0
 8000c20:	469a      	mov	sl, r3
 8000c22:	e7c4      	b.n	8000bae <__aeabi_fdiv+0x2e>
 8000c24:	2c00      	cmp	r4, #0
 8000c26:	d105      	bne.n	8000c34 <__aeabi_fdiv+0xb4>
 8000c28:	2308      	movs	r3, #8
 8000c2a:	4699      	mov	r9, r3
 8000c2c:	3b06      	subs	r3, #6
 8000c2e:	27ff      	movs	r7, #255	@ 0xff
 8000c30:	469a      	mov	sl, r3
 8000c32:	e7bc      	b.n	8000bae <__aeabi_fdiv+0x2e>
 8000c34:	230c      	movs	r3, #12
 8000c36:	4699      	mov	r9, r3
 8000c38:	3b09      	subs	r3, #9
 8000c3a:	27ff      	movs	r7, #255	@ 0xff
 8000c3c:	469a      	mov	sl, r3
 8000c3e:	e7b6      	b.n	8000bae <__aeabi_fdiv+0x2e>
 8000c40:	0020      	movs	r0, r4
 8000c42:	f002 fc9b 	bl	800357c <__clzsi2>
 8000c46:	2776      	movs	r7, #118	@ 0x76
 8000c48:	1f43      	subs	r3, r0, #5
 8000c4a:	409c      	lsls	r4, r3
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	427f      	negs	r7, r7
 8000c50:	4699      	mov	r9, r3
 8000c52:	469a      	mov	sl, r3
 8000c54:	1a3f      	subs	r7, r7, r0
 8000c56:	e7aa      	b.n	8000bae <__aeabi_fdiv+0x2e>
 8000c58:	4640      	mov	r0, r8
 8000c5a:	f002 fc8f 	bl	800357c <__clzsi2>
 8000c5e:	4642      	mov	r2, r8
 8000c60:	1f43      	subs	r3, r0, #5
 8000c62:	409a      	lsls	r2, r3
 8000c64:	2376      	movs	r3, #118	@ 0x76
 8000c66:	425b      	negs	r3, r3
 8000c68:	1a1b      	subs	r3, r3, r0
 8000c6a:	4690      	mov	r8, r2
 8000c6c:	2000      	movs	r0, #0
 8000c6e:	e7b0      	b.n	8000bd2 <__aeabi_fdiv+0x52>
 8000c70:	2303      	movs	r3, #3
 8000c72:	464a      	mov	r2, r9
 8000c74:	431a      	orrs	r2, r3
 8000c76:	4691      	mov	r9, r2
 8000c78:	2003      	movs	r0, #3
 8000c7a:	33fc      	adds	r3, #252	@ 0xfc
 8000c7c:	e7a9      	b.n	8000bd2 <__aeabi_fdiv+0x52>
 8000c7e:	000d      	movs	r5, r1
 8000c80:	20ff      	movs	r0, #255	@ 0xff
 8000c82:	2200      	movs	r2, #0
 8000c84:	05c0      	lsls	r0, r0, #23
 8000c86:	07ed      	lsls	r5, r5, #31
 8000c88:	4310      	orrs	r0, r2
 8000c8a:	4328      	orrs	r0, r5
 8000c8c:	bce0      	pop	{r5, r6, r7}
 8000c8e:	46ba      	mov	sl, r7
 8000c90:	46b1      	mov	r9, r6
 8000c92:	46a8      	mov	r8, r5
 8000c94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c96:	000d      	movs	r5, r1
 8000c98:	2000      	movs	r0, #0
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	e7f2      	b.n	8000c84 <__aeabi_fdiv+0x104>
 8000c9e:	4653      	mov	r3, sl
 8000ca0:	2b02      	cmp	r3, #2
 8000ca2:	d0ed      	beq.n	8000c80 <__aeabi_fdiv+0x100>
 8000ca4:	2b03      	cmp	r3, #3
 8000ca6:	d033      	beq.n	8000d10 <__aeabi_fdiv+0x190>
 8000ca8:	46a0      	mov	r8, r4
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	d105      	bne.n	8000cba <__aeabi_fdiv+0x13a>
 8000cae:	2000      	movs	r0, #0
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	e7e7      	b.n	8000c84 <__aeabi_fdiv+0x104>
 8000cb4:	0035      	movs	r5, r6
 8000cb6:	2803      	cmp	r0, #3
 8000cb8:	d07a      	beq.n	8000db0 <__aeabi_fdiv+0x230>
 8000cba:	003b      	movs	r3, r7
 8000cbc:	337f      	adds	r3, #127	@ 0x7f
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	dd2d      	ble.n	8000d1e <__aeabi_fdiv+0x19e>
 8000cc2:	4642      	mov	r2, r8
 8000cc4:	0752      	lsls	r2, r2, #29
 8000cc6:	d007      	beq.n	8000cd8 <__aeabi_fdiv+0x158>
 8000cc8:	220f      	movs	r2, #15
 8000cca:	4641      	mov	r1, r8
 8000ccc:	400a      	ands	r2, r1
 8000cce:	2a04      	cmp	r2, #4
 8000cd0:	d002      	beq.n	8000cd8 <__aeabi_fdiv+0x158>
 8000cd2:	2204      	movs	r2, #4
 8000cd4:	4694      	mov	ip, r2
 8000cd6:	44e0      	add	r8, ip
 8000cd8:	4642      	mov	r2, r8
 8000cda:	0112      	lsls	r2, r2, #4
 8000cdc:	d505      	bpl.n	8000cea <__aeabi_fdiv+0x16a>
 8000cde:	4642      	mov	r2, r8
 8000ce0:	4b36      	ldr	r3, [pc, #216]	@ (8000dbc <__aeabi_fdiv+0x23c>)
 8000ce2:	401a      	ands	r2, r3
 8000ce4:	003b      	movs	r3, r7
 8000ce6:	4690      	mov	r8, r2
 8000ce8:	3380      	adds	r3, #128	@ 0x80
 8000cea:	2bfe      	cmp	r3, #254	@ 0xfe
 8000cec:	dcc8      	bgt.n	8000c80 <__aeabi_fdiv+0x100>
 8000cee:	4642      	mov	r2, r8
 8000cf0:	0192      	lsls	r2, r2, #6
 8000cf2:	0a52      	lsrs	r2, r2, #9
 8000cf4:	b2d8      	uxtb	r0, r3
 8000cf6:	e7c5      	b.n	8000c84 <__aeabi_fdiv+0x104>
 8000cf8:	2280      	movs	r2, #128	@ 0x80
 8000cfa:	2500      	movs	r5, #0
 8000cfc:	20ff      	movs	r0, #255	@ 0xff
 8000cfe:	03d2      	lsls	r2, r2, #15
 8000d00:	e7c0      	b.n	8000c84 <__aeabi_fdiv+0x104>
 8000d02:	2280      	movs	r2, #128	@ 0x80
 8000d04:	03d2      	lsls	r2, r2, #15
 8000d06:	4214      	tst	r4, r2
 8000d08:	d002      	beq.n	8000d10 <__aeabi_fdiv+0x190>
 8000d0a:	4643      	mov	r3, r8
 8000d0c:	4213      	tst	r3, r2
 8000d0e:	d049      	beq.n	8000da4 <__aeabi_fdiv+0x224>
 8000d10:	2280      	movs	r2, #128	@ 0x80
 8000d12:	03d2      	lsls	r2, r2, #15
 8000d14:	4322      	orrs	r2, r4
 8000d16:	0252      	lsls	r2, r2, #9
 8000d18:	20ff      	movs	r0, #255	@ 0xff
 8000d1a:	0a52      	lsrs	r2, r2, #9
 8000d1c:	e7b2      	b.n	8000c84 <__aeabi_fdiv+0x104>
 8000d1e:	2201      	movs	r2, #1
 8000d20:	1ad3      	subs	r3, r2, r3
 8000d22:	2b1b      	cmp	r3, #27
 8000d24:	dcc3      	bgt.n	8000cae <__aeabi_fdiv+0x12e>
 8000d26:	4642      	mov	r2, r8
 8000d28:	40da      	lsrs	r2, r3
 8000d2a:	4643      	mov	r3, r8
 8000d2c:	379e      	adds	r7, #158	@ 0x9e
 8000d2e:	40bb      	lsls	r3, r7
 8000d30:	1e59      	subs	r1, r3, #1
 8000d32:	418b      	sbcs	r3, r1
 8000d34:	431a      	orrs	r2, r3
 8000d36:	0753      	lsls	r3, r2, #29
 8000d38:	d004      	beq.n	8000d44 <__aeabi_fdiv+0x1c4>
 8000d3a:	230f      	movs	r3, #15
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	2b04      	cmp	r3, #4
 8000d40:	d000      	beq.n	8000d44 <__aeabi_fdiv+0x1c4>
 8000d42:	3204      	adds	r2, #4
 8000d44:	0153      	lsls	r3, r2, #5
 8000d46:	d529      	bpl.n	8000d9c <__aeabi_fdiv+0x21c>
 8000d48:	2001      	movs	r0, #1
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	e79a      	b.n	8000c84 <__aeabi_fdiv+0x104>
 8000d4e:	4642      	mov	r2, r8
 8000d50:	0163      	lsls	r3, r4, #5
 8000d52:	0155      	lsls	r5, r2, #5
 8000d54:	42ab      	cmp	r3, r5
 8000d56:	d215      	bcs.n	8000d84 <__aeabi_fdiv+0x204>
 8000d58:	201b      	movs	r0, #27
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	3f01      	subs	r7, #1
 8000d5e:	2601      	movs	r6, #1
 8000d60:	001c      	movs	r4, r3
 8000d62:	0052      	lsls	r2, r2, #1
 8000d64:	005b      	lsls	r3, r3, #1
 8000d66:	2c00      	cmp	r4, #0
 8000d68:	db01      	blt.n	8000d6e <__aeabi_fdiv+0x1ee>
 8000d6a:	429d      	cmp	r5, r3
 8000d6c:	d801      	bhi.n	8000d72 <__aeabi_fdiv+0x1f2>
 8000d6e:	1b5b      	subs	r3, r3, r5
 8000d70:	4332      	orrs	r2, r6
 8000d72:	3801      	subs	r0, #1
 8000d74:	2800      	cmp	r0, #0
 8000d76:	d1f3      	bne.n	8000d60 <__aeabi_fdiv+0x1e0>
 8000d78:	1e58      	subs	r0, r3, #1
 8000d7a:	4183      	sbcs	r3, r0
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	4698      	mov	r8, r3
 8000d80:	000d      	movs	r5, r1
 8000d82:	e79a      	b.n	8000cba <__aeabi_fdiv+0x13a>
 8000d84:	201a      	movs	r0, #26
 8000d86:	2201      	movs	r2, #1
 8000d88:	1b5b      	subs	r3, r3, r5
 8000d8a:	e7e8      	b.n	8000d5e <__aeabi_fdiv+0x1de>
 8000d8c:	3b02      	subs	r3, #2
 8000d8e:	425a      	negs	r2, r3
 8000d90:	4153      	adcs	r3, r2
 8000d92:	425b      	negs	r3, r3
 8000d94:	0035      	movs	r5, r6
 8000d96:	2200      	movs	r2, #0
 8000d98:	b2d8      	uxtb	r0, r3
 8000d9a:	e773      	b.n	8000c84 <__aeabi_fdiv+0x104>
 8000d9c:	0192      	lsls	r2, r2, #6
 8000d9e:	2000      	movs	r0, #0
 8000da0:	0a52      	lsrs	r2, r2, #9
 8000da2:	e76f      	b.n	8000c84 <__aeabi_fdiv+0x104>
 8000da4:	431a      	orrs	r2, r3
 8000da6:	0252      	lsls	r2, r2, #9
 8000da8:	0035      	movs	r5, r6
 8000daa:	20ff      	movs	r0, #255	@ 0xff
 8000dac:	0a52      	lsrs	r2, r2, #9
 8000dae:	e769      	b.n	8000c84 <__aeabi_fdiv+0x104>
 8000db0:	4644      	mov	r4, r8
 8000db2:	e7ad      	b.n	8000d10 <__aeabi_fdiv+0x190>
 8000db4:	0800fed8 	.word	0x0800fed8
 8000db8:	0800ff18 	.word	0x0800ff18
 8000dbc:	f7ffffff 	.word	0xf7ffffff

08000dc0 <__eqsf2>:
 8000dc0:	b570      	push	{r4, r5, r6, lr}
 8000dc2:	0042      	lsls	r2, r0, #1
 8000dc4:	024e      	lsls	r6, r1, #9
 8000dc6:	004c      	lsls	r4, r1, #1
 8000dc8:	0245      	lsls	r5, r0, #9
 8000dca:	0a6d      	lsrs	r5, r5, #9
 8000dcc:	0e12      	lsrs	r2, r2, #24
 8000dce:	0fc3      	lsrs	r3, r0, #31
 8000dd0:	0a76      	lsrs	r6, r6, #9
 8000dd2:	0e24      	lsrs	r4, r4, #24
 8000dd4:	0fc9      	lsrs	r1, r1, #31
 8000dd6:	2aff      	cmp	r2, #255	@ 0xff
 8000dd8:	d010      	beq.n	8000dfc <__eqsf2+0x3c>
 8000dda:	2cff      	cmp	r4, #255	@ 0xff
 8000ddc:	d00c      	beq.n	8000df8 <__eqsf2+0x38>
 8000dde:	2001      	movs	r0, #1
 8000de0:	42a2      	cmp	r2, r4
 8000de2:	d10a      	bne.n	8000dfa <__eqsf2+0x3a>
 8000de4:	42b5      	cmp	r5, r6
 8000de6:	d108      	bne.n	8000dfa <__eqsf2+0x3a>
 8000de8:	428b      	cmp	r3, r1
 8000dea:	d00f      	beq.n	8000e0c <__eqsf2+0x4c>
 8000dec:	2a00      	cmp	r2, #0
 8000dee:	d104      	bne.n	8000dfa <__eqsf2+0x3a>
 8000df0:	0028      	movs	r0, r5
 8000df2:	1e43      	subs	r3, r0, #1
 8000df4:	4198      	sbcs	r0, r3
 8000df6:	e000      	b.n	8000dfa <__eqsf2+0x3a>
 8000df8:	2001      	movs	r0, #1
 8000dfa:	bd70      	pop	{r4, r5, r6, pc}
 8000dfc:	2001      	movs	r0, #1
 8000dfe:	2cff      	cmp	r4, #255	@ 0xff
 8000e00:	d1fb      	bne.n	8000dfa <__eqsf2+0x3a>
 8000e02:	4335      	orrs	r5, r6
 8000e04:	d1f9      	bne.n	8000dfa <__eqsf2+0x3a>
 8000e06:	404b      	eors	r3, r1
 8000e08:	0018      	movs	r0, r3
 8000e0a:	e7f6      	b.n	8000dfa <__eqsf2+0x3a>
 8000e0c:	2000      	movs	r0, #0
 8000e0e:	e7f4      	b.n	8000dfa <__eqsf2+0x3a>

08000e10 <__gesf2>:
 8000e10:	b530      	push	{r4, r5, lr}
 8000e12:	0042      	lsls	r2, r0, #1
 8000e14:	0244      	lsls	r4, r0, #9
 8000e16:	024d      	lsls	r5, r1, #9
 8000e18:	0fc3      	lsrs	r3, r0, #31
 8000e1a:	0048      	lsls	r0, r1, #1
 8000e1c:	0a64      	lsrs	r4, r4, #9
 8000e1e:	0e12      	lsrs	r2, r2, #24
 8000e20:	0a6d      	lsrs	r5, r5, #9
 8000e22:	0e00      	lsrs	r0, r0, #24
 8000e24:	0fc9      	lsrs	r1, r1, #31
 8000e26:	2aff      	cmp	r2, #255	@ 0xff
 8000e28:	d019      	beq.n	8000e5e <__gesf2+0x4e>
 8000e2a:	28ff      	cmp	r0, #255	@ 0xff
 8000e2c:	d00b      	beq.n	8000e46 <__gesf2+0x36>
 8000e2e:	2a00      	cmp	r2, #0
 8000e30:	d11e      	bne.n	8000e70 <__gesf2+0x60>
 8000e32:	2800      	cmp	r0, #0
 8000e34:	d10b      	bne.n	8000e4e <__gesf2+0x3e>
 8000e36:	2d00      	cmp	r5, #0
 8000e38:	d027      	beq.n	8000e8a <__gesf2+0x7a>
 8000e3a:	2c00      	cmp	r4, #0
 8000e3c:	d134      	bne.n	8000ea8 <__gesf2+0x98>
 8000e3e:	2900      	cmp	r1, #0
 8000e40:	d02f      	beq.n	8000ea2 <__gesf2+0x92>
 8000e42:	0008      	movs	r0, r1
 8000e44:	bd30      	pop	{r4, r5, pc}
 8000e46:	2d00      	cmp	r5, #0
 8000e48:	d128      	bne.n	8000e9c <__gesf2+0x8c>
 8000e4a:	2a00      	cmp	r2, #0
 8000e4c:	d101      	bne.n	8000e52 <__gesf2+0x42>
 8000e4e:	2c00      	cmp	r4, #0
 8000e50:	d0f5      	beq.n	8000e3e <__gesf2+0x2e>
 8000e52:	428b      	cmp	r3, r1
 8000e54:	d107      	bne.n	8000e66 <__gesf2+0x56>
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d023      	beq.n	8000ea2 <__gesf2+0x92>
 8000e5a:	0018      	movs	r0, r3
 8000e5c:	e7f2      	b.n	8000e44 <__gesf2+0x34>
 8000e5e:	2c00      	cmp	r4, #0
 8000e60:	d11c      	bne.n	8000e9c <__gesf2+0x8c>
 8000e62:	28ff      	cmp	r0, #255	@ 0xff
 8000e64:	d014      	beq.n	8000e90 <__gesf2+0x80>
 8000e66:	1e58      	subs	r0, r3, #1
 8000e68:	2302      	movs	r3, #2
 8000e6a:	4018      	ands	r0, r3
 8000e6c:	3801      	subs	r0, #1
 8000e6e:	e7e9      	b.n	8000e44 <__gesf2+0x34>
 8000e70:	2800      	cmp	r0, #0
 8000e72:	d0f8      	beq.n	8000e66 <__gesf2+0x56>
 8000e74:	428b      	cmp	r3, r1
 8000e76:	d1f6      	bne.n	8000e66 <__gesf2+0x56>
 8000e78:	4282      	cmp	r2, r0
 8000e7a:	dcf4      	bgt.n	8000e66 <__gesf2+0x56>
 8000e7c:	dbeb      	blt.n	8000e56 <__gesf2+0x46>
 8000e7e:	42ac      	cmp	r4, r5
 8000e80:	d8f1      	bhi.n	8000e66 <__gesf2+0x56>
 8000e82:	2000      	movs	r0, #0
 8000e84:	42ac      	cmp	r4, r5
 8000e86:	d2dd      	bcs.n	8000e44 <__gesf2+0x34>
 8000e88:	e7e5      	b.n	8000e56 <__gesf2+0x46>
 8000e8a:	2c00      	cmp	r4, #0
 8000e8c:	d0da      	beq.n	8000e44 <__gesf2+0x34>
 8000e8e:	e7ea      	b.n	8000e66 <__gesf2+0x56>
 8000e90:	2d00      	cmp	r5, #0
 8000e92:	d103      	bne.n	8000e9c <__gesf2+0x8c>
 8000e94:	428b      	cmp	r3, r1
 8000e96:	d1e6      	bne.n	8000e66 <__gesf2+0x56>
 8000e98:	2000      	movs	r0, #0
 8000e9a:	e7d3      	b.n	8000e44 <__gesf2+0x34>
 8000e9c:	2002      	movs	r0, #2
 8000e9e:	4240      	negs	r0, r0
 8000ea0:	e7d0      	b.n	8000e44 <__gesf2+0x34>
 8000ea2:	2001      	movs	r0, #1
 8000ea4:	4240      	negs	r0, r0
 8000ea6:	e7cd      	b.n	8000e44 <__gesf2+0x34>
 8000ea8:	428b      	cmp	r3, r1
 8000eaa:	d0e8      	beq.n	8000e7e <__gesf2+0x6e>
 8000eac:	e7db      	b.n	8000e66 <__gesf2+0x56>
 8000eae:	46c0      	nop			@ (mov r8, r8)

08000eb0 <__lesf2>:
 8000eb0:	b530      	push	{r4, r5, lr}
 8000eb2:	0042      	lsls	r2, r0, #1
 8000eb4:	0244      	lsls	r4, r0, #9
 8000eb6:	024d      	lsls	r5, r1, #9
 8000eb8:	0fc3      	lsrs	r3, r0, #31
 8000eba:	0048      	lsls	r0, r1, #1
 8000ebc:	0a64      	lsrs	r4, r4, #9
 8000ebe:	0e12      	lsrs	r2, r2, #24
 8000ec0:	0a6d      	lsrs	r5, r5, #9
 8000ec2:	0e00      	lsrs	r0, r0, #24
 8000ec4:	0fc9      	lsrs	r1, r1, #31
 8000ec6:	2aff      	cmp	r2, #255	@ 0xff
 8000ec8:	d01a      	beq.n	8000f00 <__lesf2+0x50>
 8000eca:	28ff      	cmp	r0, #255	@ 0xff
 8000ecc:	d00e      	beq.n	8000eec <__lesf2+0x3c>
 8000ece:	2a00      	cmp	r2, #0
 8000ed0:	d11e      	bne.n	8000f10 <__lesf2+0x60>
 8000ed2:	2800      	cmp	r0, #0
 8000ed4:	d10e      	bne.n	8000ef4 <__lesf2+0x44>
 8000ed6:	2d00      	cmp	r5, #0
 8000ed8:	d02a      	beq.n	8000f30 <__lesf2+0x80>
 8000eda:	2c00      	cmp	r4, #0
 8000edc:	d00c      	beq.n	8000ef8 <__lesf2+0x48>
 8000ede:	428b      	cmp	r3, r1
 8000ee0:	d01d      	beq.n	8000f1e <__lesf2+0x6e>
 8000ee2:	1e58      	subs	r0, r3, #1
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	4018      	ands	r0, r3
 8000ee8:	3801      	subs	r0, #1
 8000eea:	e010      	b.n	8000f0e <__lesf2+0x5e>
 8000eec:	2d00      	cmp	r5, #0
 8000eee:	d10d      	bne.n	8000f0c <__lesf2+0x5c>
 8000ef0:	2a00      	cmp	r2, #0
 8000ef2:	d120      	bne.n	8000f36 <__lesf2+0x86>
 8000ef4:	2c00      	cmp	r4, #0
 8000ef6:	d11e      	bne.n	8000f36 <__lesf2+0x86>
 8000ef8:	2900      	cmp	r1, #0
 8000efa:	d023      	beq.n	8000f44 <__lesf2+0x94>
 8000efc:	0008      	movs	r0, r1
 8000efe:	e006      	b.n	8000f0e <__lesf2+0x5e>
 8000f00:	2c00      	cmp	r4, #0
 8000f02:	d103      	bne.n	8000f0c <__lesf2+0x5c>
 8000f04:	28ff      	cmp	r0, #255	@ 0xff
 8000f06:	d1ec      	bne.n	8000ee2 <__lesf2+0x32>
 8000f08:	2d00      	cmp	r5, #0
 8000f0a:	d017      	beq.n	8000f3c <__lesf2+0x8c>
 8000f0c:	2002      	movs	r0, #2
 8000f0e:	bd30      	pop	{r4, r5, pc}
 8000f10:	2800      	cmp	r0, #0
 8000f12:	d0e6      	beq.n	8000ee2 <__lesf2+0x32>
 8000f14:	428b      	cmp	r3, r1
 8000f16:	d1e4      	bne.n	8000ee2 <__lesf2+0x32>
 8000f18:	4282      	cmp	r2, r0
 8000f1a:	dce2      	bgt.n	8000ee2 <__lesf2+0x32>
 8000f1c:	db04      	blt.n	8000f28 <__lesf2+0x78>
 8000f1e:	42ac      	cmp	r4, r5
 8000f20:	d8df      	bhi.n	8000ee2 <__lesf2+0x32>
 8000f22:	2000      	movs	r0, #0
 8000f24:	42ac      	cmp	r4, r5
 8000f26:	d2f2      	bcs.n	8000f0e <__lesf2+0x5e>
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d00b      	beq.n	8000f44 <__lesf2+0x94>
 8000f2c:	0018      	movs	r0, r3
 8000f2e:	e7ee      	b.n	8000f0e <__lesf2+0x5e>
 8000f30:	2c00      	cmp	r4, #0
 8000f32:	d0ec      	beq.n	8000f0e <__lesf2+0x5e>
 8000f34:	e7d5      	b.n	8000ee2 <__lesf2+0x32>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d1d3      	bne.n	8000ee2 <__lesf2+0x32>
 8000f3a:	e7f5      	b.n	8000f28 <__lesf2+0x78>
 8000f3c:	2000      	movs	r0, #0
 8000f3e:	428b      	cmp	r3, r1
 8000f40:	d0e5      	beq.n	8000f0e <__lesf2+0x5e>
 8000f42:	e7ce      	b.n	8000ee2 <__lesf2+0x32>
 8000f44:	2001      	movs	r0, #1
 8000f46:	4240      	negs	r0, r0
 8000f48:	e7e1      	b.n	8000f0e <__lesf2+0x5e>
 8000f4a:	46c0      	nop			@ (mov r8, r8)

08000f4c <__aeabi_fmul>:
 8000f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f4e:	464f      	mov	r7, r9
 8000f50:	4646      	mov	r6, r8
 8000f52:	46d6      	mov	lr, sl
 8000f54:	0243      	lsls	r3, r0, #9
 8000f56:	0a5b      	lsrs	r3, r3, #9
 8000f58:	0045      	lsls	r5, r0, #1
 8000f5a:	b5c0      	push	{r6, r7, lr}
 8000f5c:	4699      	mov	r9, r3
 8000f5e:	1c0f      	adds	r7, r1, #0
 8000f60:	0e2d      	lsrs	r5, r5, #24
 8000f62:	0fc6      	lsrs	r6, r0, #31
 8000f64:	2d00      	cmp	r5, #0
 8000f66:	d100      	bne.n	8000f6a <__aeabi_fmul+0x1e>
 8000f68:	e088      	b.n	800107c <__aeabi_fmul+0x130>
 8000f6a:	2dff      	cmp	r5, #255	@ 0xff
 8000f6c:	d100      	bne.n	8000f70 <__aeabi_fmul+0x24>
 8000f6e:	e08d      	b.n	800108c <__aeabi_fmul+0x140>
 8000f70:	2280      	movs	r2, #128	@ 0x80
 8000f72:	00db      	lsls	r3, r3, #3
 8000f74:	04d2      	lsls	r2, r2, #19
 8000f76:	431a      	orrs	r2, r3
 8000f78:	2300      	movs	r3, #0
 8000f7a:	4691      	mov	r9, r2
 8000f7c:	4698      	mov	r8, r3
 8000f7e:	469a      	mov	sl, r3
 8000f80:	3d7f      	subs	r5, #127	@ 0x7f
 8000f82:	027c      	lsls	r4, r7, #9
 8000f84:	007b      	lsls	r3, r7, #1
 8000f86:	0a64      	lsrs	r4, r4, #9
 8000f88:	0e1b      	lsrs	r3, r3, #24
 8000f8a:	0fff      	lsrs	r7, r7, #31
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d068      	beq.n	8001062 <__aeabi_fmul+0x116>
 8000f90:	2bff      	cmp	r3, #255	@ 0xff
 8000f92:	d021      	beq.n	8000fd8 <__aeabi_fmul+0x8c>
 8000f94:	2280      	movs	r2, #128	@ 0x80
 8000f96:	00e4      	lsls	r4, r4, #3
 8000f98:	04d2      	lsls	r2, r2, #19
 8000f9a:	4314      	orrs	r4, r2
 8000f9c:	4642      	mov	r2, r8
 8000f9e:	3b7f      	subs	r3, #127	@ 0x7f
 8000fa0:	195b      	adds	r3, r3, r5
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	1c5d      	adds	r5, r3, #1
 8000fa6:	2a0a      	cmp	r2, #10
 8000fa8:	dc2e      	bgt.n	8001008 <__aeabi_fmul+0xbc>
 8000faa:	407e      	eors	r6, r7
 8000fac:	4642      	mov	r2, r8
 8000fae:	2a02      	cmp	r2, #2
 8000fb0:	dc23      	bgt.n	8000ffa <__aeabi_fmul+0xae>
 8000fb2:	3a01      	subs	r2, #1
 8000fb4:	2a01      	cmp	r2, #1
 8000fb6:	d900      	bls.n	8000fba <__aeabi_fmul+0x6e>
 8000fb8:	e0bd      	b.n	8001136 <__aeabi_fmul+0x1ea>
 8000fba:	2902      	cmp	r1, #2
 8000fbc:	d06e      	beq.n	800109c <__aeabi_fmul+0x150>
 8000fbe:	2901      	cmp	r1, #1
 8000fc0:	d12c      	bne.n	800101c <__aeabi_fmul+0xd0>
 8000fc2:	2000      	movs	r0, #0
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	05c0      	lsls	r0, r0, #23
 8000fc8:	07f6      	lsls	r6, r6, #31
 8000fca:	4310      	orrs	r0, r2
 8000fcc:	4330      	orrs	r0, r6
 8000fce:	bce0      	pop	{r5, r6, r7}
 8000fd0:	46ba      	mov	sl, r7
 8000fd2:	46b1      	mov	r9, r6
 8000fd4:	46a8      	mov	r8, r5
 8000fd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fd8:	002b      	movs	r3, r5
 8000fda:	33ff      	adds	r3, #255	@ 0xff
 8000fdc:	2c00      	cmp	r4, #0
 8000fde:	d065      	beq.n	80010ac <__aeabi_fmul+0x160>
 8000fe0:	2203      	movs	r2, #3
 8000fe2:	4641      	mov	r1, r8
 8000fe4:	4311      	orrs	r1, r2
 8000fe6:	0032      	movs	r2, r6
 8000fe8:	3501      	adds	r5, #1
 8000fea:	4688      	mov	r8, r1
 8000fec:	407a      	eors	r2, r7
 8000fee:	35ff      	adds	r5, #255	@ 0xff
 8000ff0:	290a      	cmp	r1, #10
 8000ff2:	dd00      	ble.n	8000ff6 <__aeabi_fmul+0xaa>
 8000ff4:	e0d8      	b.n	80011a8 <__aeabi_fmul+0x25c>
 8000ff6:	0016      	movs	r6, r2
 8000ff8:	2103      	movs	r1, #3
 8000ffa:	4640      	mov	r0, r8
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	4082      	lsls	r2, r0
 8001000:	20a6      	movs	r0, #166	@ 0xa6
 8001002:	00c0      	lsls	r0, r0, #3
 8001004:	4202      	tst	r2, r0
 8001006:	d020      	beq.n	800104a <__aeabi_fmul+0xfe>
 8001008:	4653      	mov	r3, sl
 800100a:	2b02      	cmp	r3, #2
 800100c:	d046      	beq.n	800109c <__aeabi_fmul+0x150>
 800100e:	2b03      	cmp	r3, #3
 8001010:	d100      	bne.n	8001014 <__aeabi_fmul+0xc8>
 8001012:	e0bb      	b.n	800118c <__aeabi_fmul+0x240>
 8001014:	4651      	mov	r1, sl
 8001016:	464c      	mov	r4, r9
 8001018:	2901      	cmp	r1, #1
 800101a:	d0d2      	beq.n	8000fc2 <__aeabi_fmul+0x76>
 800101c:	002b      	movs	r3, r5
 800101e:	337f      	adds	r3, #127	@ 0x7f
 8001020:	2b00      	cmp	r3, #0
 8001022:	dd70      	ble.n	8001106 <__aeabi_fmul+0x1ba>
 8001024:	0762      	lsls	r2, r4, #29
 8001026:	d004      	beq.n	8001032 <__aeabi_fmul+0xe6>
 8001028:	220f      	movs	r2, #15
 800102a:	4022      	ands	r2, r4
 800102c:	2a04      	cmp	r2, #4
 800102e:	d000      	beq.n	8001032 <__aeabi_fmul+0xe6>
 8001030:	3404      	adds	r4, #4
 8001032:	0122      	lsls	r2, r4, #4
 8001034:	d503      	bpl.n	800103e <__aeabi_fmul+0xf2>
 8001036:	4b63      	ldr	r3, [pc, #396]	@ (80011c4 <__aeabi_fmul+0x278>)
 8001038:	401c      	ands	r4, r3
 800103a:	002b      	movs	r3, r5
 800103c:	3380      	adds	r3, #128	@ 0x80
 800103e:	2bfe      	cmp	r3, #254	@ 0xfe
 8001040:	dc2c      	bgt.n	800109c <__aeabi_fmul+0x150>
 8001042:	01a2      	lsls	r2, r4, #6
 8001044:	0a52      	lsrs	r2, r2, #9
 8001046:	b2d8      	uxtb	r0, r3
 8001048:	e7bd      	b.n	8000fc6 <__aeabi_fmul+0x7a>
 800104a:	2090      	movs	r0, #144	@ 0x90
 800104c:	0080      	lsls	r0, r0, #2
 800104e:	4202      	tst	r2, r0
 8001050:	d127      	bne.n	80010a2 <__aeabi_fmul+0x156>
 8001052:	38b9      	subs	r0, #185	@ 0xb9
 8001054:	38ff      	subs	r0, #255	@ 0xff
 8001056:	4210      	tst	r0, r2
 8001058:	d06d      	beq.n	8001136 <__aeabi_fmul+0x1ea>
 800105a:	003e      	movs	r6, r7
 800105c:	46a1      	mov	r9, r4
 800105e:	468a      	mov	sl, r1
 8001060:	e7d2      	b.n	8001008 <__aeabi_fmul+0xbc>
 8001062:	2c00      	cmp	r4, #0
 8001064:	d141      	bne.n	80010ea <__aeabi_fmul+0x19e>
 8001066:	2301      	movs	r3, #1
 8001068:	4642      	mov	r2, r8
 800106a:	431a      	orrs	r2, r3
 800106c:	4690      	mov	r8, r2
 800106e:	002b      	movs	r3, r5
 8001070:	4642      	mov	r2, r8
 8001072:	2101      	movs	r1, #1
 8001074:	1c5d      	adds	r5, r3, #1
 8001076:	2a0a      	cmp	r2, #10
 8001078:	dd97      	ble.n	8000faa <__aeabi_fmul+0x5e>
 800107a:	e7c5      	b.n	8001008 <__aeabi_fmul+0xbc>
 800107c:	2b00      	cmp	r3, #0
 800107e:	d126      	bne.n	80010ce <__aeabi_fmul+0x182>
 8001080:	2304      	movs	r3, #4
 8001082:	4698      	mov	r8, r3
 8001084:	3b03      	subs	r3, #3
 8001086:	2500      	movs	r5, #0
 8001088:	469a      	mov	sl, r3
 800108a:	e77a      	b.n	8000f82 <__aeabi_fmul+0x36>
 800108c:	2b00      	cmp	r3, #0
 800108e:	d118      	bne.n	80010c2 <__aeabi_fmul+0x176>
 8001090:	2308      	movs	r3, #8
 8001092:	4698      	mov	r8, r3
 8001094:	3b06      	subs	r3, #6
 8001096:	25ff      	movs	r5, #255	@ 0xff
 8001098:	469a      	mov	sl, r3
 800109a:	e772      	b.n	8000f82 <__aeabi_fmul+0x36>
 800109c:	20ff      	movs	r0, #255	@ 0xff
 800109e:	2200      	movs	r2, #0
 80010a0:	e791      	b.n	8000fc6 <__aeabi_fmul+0x7a>
 80010a2:	2280      	movs	r2, #128	@ 0x80
 80010a4:	2600      	movs	r6, #0
 80010a6:	20ff      	movs	r0, #255	@ 0xff
 80010a8:	03d2      	lsls	r2, r2, #15
 80010aa:	e78c      	b.n	8000fc6 <__aeabi_fmul+0x7a>
 80010ac:	4641      	mov	r1, r8
 80010ae:	2202      	movs	r2, #2
 80010b0:	3501      	adds	r5, #1
 80010b2:	4311      	orrs	r1, r2
 80010b4:	4688      	mov	r8, r1
 80010b6:	35ff      	adds	r5, #255	@ 0xff
 80010b8:	290a      	cmp	r1, #10
 80010ba:	dca5      	bgt.n	8001008 <__aeabi_fmul+0xbc>
 80010bc:	2102      	movs	r1, #2
 80010be:	407e      	eors	r6, r7
 80010c0:	e774      	b.n	8000fac <__aeabi_fmul+0x60>
 80010c2:	230c      	movs	r3, #12
 80010c4:	4698      	mov	r8, r3
 80010c6:	3b09      	subs	r3, #9
 80010c8:	25ff      	movs	r5, #255	@ 0xff
 80010ca:	469a      	mov	sl, r3
 80010cc:	e759      	b.n	8000f82 <__aeabi_fmul+0x36>
 80010ce:	0018      	movs	r0, r3
 80010d0:	f002 fa54 	bl	800357c <__clzsi2>
 80010d4:	464a      	mov	r2, r9
 80010d6:	1f43      	subs	r3, r0, #5
 80010d8:	2576      	movs	r5, #118	@ 0x76
 80010da:	409a      	lsls	r2, r3
 80010dc:	2300      	movs	r3, #0
 80010de:	426d      	negs	r5, r5
 80010e0:	4691      	mov	r9, r2
 80010e2:	4698      	mov	r8, r3
 80010e4:	469a      	mov	sl, r3
 80010e6:	1a2d      	subs	r5, r5, r0
 80010e8:	e74b      	b.n	8000f82 <__aeabi_fmul+0x36>
 80010ea:	0020      	movs	r0, r4
 80010ec:	f002 fa46 	bl	800357c <__clzsi2>
 80010f0:	4642      	mov	r2, r8
 80010f2:	1f43      	subs	r3, r0, #5
 80010f4:	409c      	lsls	r4, r3
 80010f6:	1a2b      	subs	r3, r5, r0
 80010f8:	3b76      	subs	r3, #118	@ 0x76
 80010fa:	2100      	movs	r1, #0
 80010fc:	1c5d      	adds	r5, r3, #1
 80010fe:	2a0a      	cmp	r2, #10
 8001100:	dc00      	bgt.n	8001104 <__aeabi_fmul+0x1b8>
 8001102:	e752      	b.n	8000faa <__aeabi_fmul+0x5e>
 8001104:	e780      	b.n	8001008 <__aeabi_fmul+0xbc>
 8001106:	2201      	movs	r2, #1
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	2b1b      	cmp	r3, #27
 800110c:	dd00      	ble.n	8001110 <__aeabi_fmul+0x1c4>
 800110e:	e758      	b.n	8000fc2 <__aeabi_fmul+0x76>
 8001110:	359e      	adds	r5, #158	@ 0x9e
 8001112:	0022      	movs	r2, r4
 8001114:	40ac      	lsls	r4, r5
 8001116:	40da      	lsrs	r2, r3
 8001118:	1e63      	subs	r3, r4, #1
 800111a:	419c      	sbcs	r4, r3
 800111c:	4322      	orrs	r2, r4
 800111e:	0753      	lsls	r3, r2, #29
 8001120:	d004      	beq.n	800112c <__aeabi_fmul+0x1e0>
 8001122:	230f      	movs	r3, #15
 8001124:	4013      	ands	r3, r2
 8001126:	2b04      	cmp	r3, #4
 8001128:	d000      	beq.n	800112c <__aeabi_fmul+0x1e0>
 800112a:	3204      	adds	r2, #4
 800112c:	0153      	lsls	r3, r2, #5
 800112e:	d537      	bpl.n	80011a0 <__aeabi_fmul+0x254>
 8001130:	2001      	movs	r0, #1
 8001132:	2200      	movs	r2, #0
 8001134:	e747      	b.n	8000fc6 <__aeabi_fmul+0x7a>
 8001136:	0c21      	lsrs	r1, r4, #16
 8001138:	464a      	mov	r2, r9
 800113a:	0424      	lsls	r4, r4, #16
 800113c:	0c24      	lsrs	r4, r4, #16
 800113e:	0027      	movs	r7, r4
 8001140:	0c10      	lsrs	r0, r2, #16
 8001142:	0412      	lsls	r2, r2, #16
 8001144:	0c12      	lsrs	r2, r2, #16
 8001146:	4344      	muls	r4, r0
 8001148:	4357      	muls	r7, r2
 800114a:	4348      	muls	r0, r1
 800114c:	4351      	muls	r1, r2
 800114e:	0c3a      	lsrs	r2, r7, #16
 8001150:	1909      	adds	r1, r1, r4
 8001152:	1852      	adds	r2, r2, r1
 8001154:	4294      	cmp	r4, r2
 8001156:	d903      	bls.n	8001160 <__aeabi_fmul+0x214>
 8001158:	2180      	movs	r1, #128	@ 0x80
 800115a:	0249      	lsls	r1, r1, #9
 800115c:	468c      	mov	ip, r1
 800115e:	4460      	add	r0, ip
 8001160:	043f      	lsls	r7, r7, #16
 8001162:	0411      	lsls	r1, r2, #16
 8001164:	0c3f      	lsrs	r7, r7, #16
 8001166:	19c9      	adds	r1, r1, r7
 8001168:	018c      	lsls	r4, r1, #6
 800116a:	1e67      	subs	r7, r4, #1
 800116c:	41bc      	sbcs	r4, r7
 800116e:	0c12      	lsrs	r2, r2, #16
 8001170:	0e89      	lsrs	r1, r1, #26
 8001172:	1812      	adds	r2, r2, r0
 8001174:	430c      	orrs	r4, r1
 8001176:	0192      	lsls	r2, r2, #6
 8001178:	4314      	orrs	r4, r2
 800117a:	0112      	lsls	r2, r2, #4
 800117c:	d50e      	bpl.n	800119c <__aeabi_fmul+0x250>
 800117e:	2301      	movs	r3, #1
 8001180:	0862      	lsrs	r2, r4, #1
 8001182:	401c      	ands	r4, r3
 8001184:	4314      	orrs	r4, r2
 8001186:	e749      	b.n	800101c <__aeabi_fmul+0xd0>
 8001188:	003e      	movs	r6, r7
 800118a:	46a1      	mov	r9, r4
 800118c:	2280      	movs	r2, #128	@ 0x80
 800118e:	464b      	mov	r3, r9
 8001190:	03d2      	lsls	r2, r2, #15
 8001192:	431a      	orrs	r2, r3
 8001194:	0252      	lsls	r2, r2, #9
 8001196:	20ff      	movs	r0, #255	@ 0xff
 8001198:	0a52      	lsrs	r2, r2, #9
 800119a:	e714      	b.n	8000fc6 <__aeabi_fmul+0x7a>
 800119c:	001d      	movs	r5, r3
 800119e:	e73d      	b.n	800101c <__aeabi_fmul+0xd0>
 80011a0:	0192      	lsls	r2, r2, #6
 80011a2:	2000      	movs	r0, #0
 80011a4:	0a52      	lsrs	r2, r2, #9
 80011a6:	e70e      	b.n	8000fc6 <__aeabi_fmul+0x7a>
 80011a8:	290f      	cmp	r1, #15
 80011aa:	d1ed      	bne.n	8001188 <__aeabi_fmul+0x23c>
 80011ac:	2280      	movs	r2, #128	@ 0x80
 80011ae:	464b      	mov	r3, r9
 80011b0:	03d2      	lsls	r2, r2, #15
 80011b2:	4213      	tst	r3, r2
 80011b4:	d0ea      	beq.n	800118c <__aeabi_fmul+0x240>
 80011b6:	4214      	tst	r4, r2
 80011b8:	d1e8      	bne.n	800118c <__aeabi_fmul+0x240>
 80011ba:	003e      	movs	r6, r7
 80011bc:	20ff      	movs	r0, #255	@ 0xff
 80011be:	4322      	orrs	r2, r4
 80011c0:	e701      	b.n	8000fc6 <__aeabi_fmul+0x7a>
 80011c2:	46c0      	nop			@ (mov r8, r8)
 80011c4:	f7ffffff 	.word	0xf7ffffff

080011c8 <__aeabi_fsub>:
 80011c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011ca:	4647      	mov	r7, r8
 80011cc:	46ce      	mov	lr, r9
 80011ce:	024e      	lsls	r6, r1, #9
 80011d0:	0243      	lsls	r3, r0, #9
 80011d2:	0045      	lsls	r5, r0, #1
 80011d4:	0a72      	lsrs	r2, r6, #9
 80011d6:	0fc4      	lsrs	r4, r0, #31
 80011d8:	0048      	lsls	r0, r1, #1
 80011da:	b580      	push	{r7, lr}
 80011dc:	4694      	mov	ip, r2
 80011de:	0a5f      	lsrs	r7, r3, #9
 80011e0:	0e2d      	lsrs	r5, r5, #24
 80011e2:	099b      	lsrs	r3, r3, #6
 80011e4:	0e00      	lsrs	r0, r0, #24
 80011e6:	0fc9      	lsrs	r1, r1, #31
 80011e8:	09b6      	lsrs	r6, r6, #6
 80011ea:	28ff      	cmp	r0, #255	@ 0xff
 80011ec:	d024      	beq.n	8001238 <__aeabi_fsub+0x70>
 80011ee:	2201      	movs	r2, #1
 80011f0:	4051      	eors	r1, r2
 80011f2:	1a2a      	subs	r2, r5, r0
 80011f4:	428c      	cmp	r4, r1
 80011f6:	d00f      	beq.n	8001218 <__aeabi_fsub+0x50>
 80011f8:	2a00      	cmp	r2, #0
 80011fa:	dc00      	bgt.n	80011fe <__aeabi_fsub+0x36>
 80011fc:	e16a      	b.n	80014d4 <__aeabi_fsub+0x30c>
 80011fe:	2800      	cmp	r0, #0
 8001200:	d135      	bne.n	800126e <__aeabi_fsub+0xa6>
 8001202:	2e00      	cmp	r6, #0
 8001204:	d100      	bne.n	8001208 <__aeabi_fsub+0x40>
 8001206:	e0a2      	b.n	800134e <__aeabi_fsub+0x186>
 8001208:	1e51      	subs	r1, r2, #1
 800120a:	2a01      	cmp	r2, #1
 800120c:	d100      	bne.n	8001210 <__aeabi_fsub+0x48>
 800120e:	e124      	b.n	800145a <__aeabi_fsub+0x292>
 8001210:	2aff      	cmp	r2, #255	@ 0xff
 8001212:	d021      	beq.n	8001258 <__aeabi_fsub+0x90>
 8001214:	000a      	movs	r2, r1
 8001216:	e02f      	b.n	8001278 <__aeabi_fsub+0xb0>
 8001218:	2a00      	cmp	r2, #0
 800121a:	dc00      	bgt.n	800121e <__aeabi_fsub+0x56>
 800121c:	e167      	b.n	80014ee <__aeabi_fsub+0x326>
 800121e:	2800      	cmp	r0, #0
 8001220:	d05e      	beq.n	80012e0 <__aeabi_fsub+0x118>
 8001222:	2dff      	cmp	r5, #255	@ 0xff
 8001224:	d018      	beq.n	8001258 <__aeabi_fsub+0x90>
 8001226:	2180      	movs	r1, #128	@ 0x80
 8001228:	04c9      	lsls	r1, r1, #19
 800122a:	430e      	orrs	r6, r1
 800122c:	2a1b      	cmp	r2, #27
 800122e:	dc00      	bgt.n	8001232 <__aeabi_fsub+0x6a>
 8001230:	e076      	b.n	8001320 <__aeabi_fsub+0x158>
 8001232:	002a      	movs	r2, r5
 8001234:	3301      	adds	r3, #1
 8001236:	e032      	b.n	800129e <__aeabi_fsub+0xd6>
 8001238:	002a      	movs	r2, r5
 800123a:	3aff      	subs	r2, #255	@ 0xff
 800123c:	4691      	mov	r9, r2
 800123e:	2e00      	cmp	r6, #0
 8001240:	d042      	beq.n	80012c8 <__aeabi_fsub+0x100>
 8001242:	428c      	cmp	r4, r1
 8001244:	d055      	beq.n	80012f2 <__aeabi_fsub+0x12a>
 8001246:	464a      	mov	r2, r9
 8001248:	2a00      	cmp	r2, #0
 800124a:	d100      	bne.n	800124e <__aeabi_fsub+0x86>
 800124c:	e09c      	b.n	8001388 <__aeabi_fsub+0x1c0>
 800124e:	2d00      	cmp	r5, #0
 8001250:	d100      	bne.n	8001254 <__aeabi_fsub+0x8c>
 8001252:	e077      	b.n	8001344 <__aeabi_fsub+0x17c>
 8001254:	000c      	movs	r4, r1
 8001256:	0033      	movs	r3, r6
 8001258:	08db      	lsrs	r3, r3, #3
 800125a:	2b00      	cmp	r3, #0
 800125c:	d100      	bne.n	8001260 <__aeabi_fsub+0x98>
 800125e:	e06e      	b.n	800133e <__aeabi_fsub+0x176>
 8001260:	2280      	movs	r2, #128	@ 0x80
 8001262:	03d2      	lsls	r2, r2, #15
 8001264:	4313      	orrs	r3, r2
 8001266:	025b      	lsls	r3, r3, #9
 8001268:	20ff      	movs	r0, #255	@ 0xff
 800126a:	0a5b      	lsrs	r3, r3, #9
 800126c:	e024      	b.n	80012b8 <__aeabi_fsub+0xf0>
 800126e:	2dff      	cmp	r5, #255	@ 0xff
 8001270:	d0f2      	beq.n	8001258 <__aeabi_fsub+0x90>
 8001272:	2180      	movs	r1, #128	@ 0x80
 8001274:	04c9      	lsls	r1, r1, #19
 8001276:	430e      	orrs	r6, r1
 8001278:	2101      	movs	r1, #1
 800127a:	2a1b      	cmp	r2, #27
 800127c:	dc08      	bgt.n	8001290 <__aeabi_fsub+0xc8>
 800127e:	0031      	movs	r1, r6
 8001280:	2020      	movs	r0, #32
 8001282:	40d1      	lsrs	r1, r2
 8001284:	1a82      	subs	r2, r0, r2
 8001286:	4096      	lsls	r6, r2
 8001288:	0032      	movs	r2, r6
 800128a:	1e50      	subs	r0, r2, #1
 800128c:	4182      	sbcs	r2, r0
 800128e:	4311      	orrs	r1, r2
 8001290:	1a5b      	subs	r3, r3, r1
 8001292:	015a      	lsls	r2, r3, #5
 8001294:	d460      	bmi.n	8001358 <__aeabi_fsub+0x190>
 8001296:	2107      	movs	r1, #7
 8001298:	002a      	movs	r2, r5
 800129a:	4019      	ands	r1, r3
 800129c:	d057      	beq.n	800134e <__aeabi_fsub+0x186>
 800129e:	210f      	movs	r1, #15
 80012a0:	4019      	ands	r1, r3
 80012a2:	2904      	cmp	r1, #4
 80012a4:	d000      	beq.n	80012a8 <__aeabi_fsub+0xe0>
 80012a6:	3304      	adds	r3, #4
 80012a8:	0159      	lsls	r1, r3, #5
 80012aa:	d550      	bpl.n	800134e <__aeabi_fsub+0x186>
 80012ac:	1c50      	adds	r0, r2, #1
 80012ae:	2afe      	cmp	r2, #254	@ 0xfe
 80012b0:	d045      	beq.n	800133e <__aeabi_fsub+0x176>
 80012b2:	019b      	lsls	r3, r3, #6
 80012b4:	b2c0      	uxtb	r0, r0
 80012b6:	0a5b      	lsrs	r3, r3, #9
 80012b8:	05c0      	lsls	r0, r0, #23
 80012ba:	4318      	orrs	r0, r3
 80012bc:	07e4      	lsls	r4, r4, #31
 80012be:	4320      	orrs	r0, r4
 80012c0:	bcc0      	pop	{r6, r7}
 80012c2:	46b9      	mov	r9, r7
 80012c4:	46b0      	mov	r8, r6
 80012c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012c8:	2201      	movs	r2, #1
 80012ca:	4051      	eors	r1, r2
 80012cc:	428c      	cmp	r4, r1
 80012ce:	d1ba      	bne.n	8001246 <__aeabi_fsub+0x7e>
 80012d0:	464a      	mov	r2, r9
 80012d2:	2a00      	cmp	r2, #0
 80012d4:	d010      	beq.n	80012f8 <__aeabi_fsub+0x130>
 80012d6:	2d00      	cmp	r5, #0
 80012d8:	d100      	bne.n	80012dc <__aeabi_fsub+0x114>
 80012da:	e098      	b.n	800140e <__aeabi_fsub+0x246>
 80012dc:	2300      	movs	r3, #0
 80012de:	e7bb      	b.n	8001258 <__aeabi_fsub+0x90>
 80012e0:	2e00      	cmp	r6, #0
 80012e2:	d034      	beq.n	800134e <__aeabi_fsub+0x186>
 80012e4:	1e51      	subs	r1, r2, #1
 80012e6:	2a01      	cmp	r2, #1
 80012e8:	d06e      	beq.n	80013c8 <__aeabi_fsub+0x200>
 80012ea:	2aff      	cmp	r2, #255	@ 0xff
 80012ec:	d0b4      	beq.n	8001258 <__aeabi_fsub+0x90>
 80012ee:	000a      	movs	r2, r1
 80012f0:	e79c      	b.n	800122c <__aeabi_fsub+0x64>
 80012f2:	2a00      	cmp	r2, #0
 80012f4:	d000      	beq.n	80012f8 <__aeabi_fsub+0x130>
 80012f6:	e088      	b.n	800140a <__aeabi_fsub+0x242>
 80012f8:	20fe      	movs	r0, #254	@ 0xfe
 80012fa:	1c6a      	adds	r2, r5, #1
 80012fc:	4210      	tst	r0, r2
 80012fe:	d000      	beq.n	8001302 <__aeabi_fsub+0x13a>
 8001300:	e092      	b.n	8001428 <__aeabi_fsub+0x260>
 8001302:	2d00      	cmp	r5, #0
 8001304:	d000      	beq.n	8001308 <__aeabi_fsub+0x140>
 8001306:	e0a4      	b.n	8001452 <__aeabi_fsub+0x28a>
 8001308:	2b00      	cmp	r3, #0
 800130a:	d100      	bne.n	800130e <__aeabi_fsub+0x146>
 800130c:	e0cb      	b.n	80014a6 <__aeabi_fsub+0x2de>
 800130e:	2e00      	cmp	r6, #0
 8001310:	d000      	beq.n	8001314 <__aeabi_fsub+0x14c>
 8001312:	e0ca      	b.n	80014aa <__aeabi_fsub+0x2e2>
 8001314:	2200      	movs	r2, #0
 8001316:	08db      	lsrs	r3, r3, #3
 8001318:	025b      	lsls	r3, r3, #9
 800131a:	0a5b      	lsrs	r3, r3, #9
 800131c:	b2d0      	uxtb	r0, r2
 800131e:	e7cb      	b.n	80012b8 <__aeabi_fsub+0xf0>
 8001320:	0031      	movs	r1, r6
 8001322:	2020      	movs	r0, #32
 8001324:	40d1      	lsrs	r1, r2
 8001326:	1a82      	subs	r2, r0, r2
 8001328:	4096      	lsls	r6, r2
 800132a:	0032      	movs	r2, r6
 800132c:	1e50      	subs	r0, r2, #1
 800132e:	4182      	sbcs	r2, r0
 8001330:	430a      	orrs	r2, r1
 8001332:	189b      	adds	r3, r3, r2
 8001334:	015a      	lsls	r2, r3, #5
 8001336:	d5ae      	bpl.n	8001296 <__aeabi_fsub+0xce>
 8001338:	1c6a      	adds	r2, r5, #1
 800133a:	2dfe      	cmp	r5, #254	@ 0xfe
 800133c:	d14a      	bne.n	80013d4 <__aeabi_fsub+0x20c>
 800133e:	20ff      	movs	r0, #255	@ 0xff
 8001340:	2300      	movs	r3, #0
 8001342:	e7b9      	b.n	80012b8 <__aeabi_fsub+0xf0>
 8001344:	22ff      	movs	r2, #255	@ 0xff
 8001346:	2b00      	cmp	r3, #0
 8001348:	d14b      	bne.n	80013e2 <__aeabi_fsub+0x21a>
 800134a:	000c      	movs	r4, r1
 800134c:	0033      	movs	r3, r6
 800134e:	08db      	lsrs	r3, r3, #3
 8001350:	2aff      	cmp	r2, #255	@ 0xff
 8001352:	d100      	bne.n	8001356 <__aeabi_fsub+0x18e>
 8001354:	e781      	b.n	800125a <__aeabi_fsub+0x92>
 8001356:	e7df      	b.n	8001318 <__aeabi_fsub+0x150>
 8001358:	019f      	lsls	r7, r3, #6
 800135a:	09bf      	lsrs	r7, r7, #6
 800135c:	0038      	movs	r0, r7
 800135e:	f002 f90d 	bl	800357c <__clzsi2>
 8001362:	3805      	subs	r0, #5
 8001364:	4087      	lsls	r7, r0
 8001366:	4285      	cmp	r5, r0
 8001368:	dc21      	bgt.n	80013ae <__aeabi_fsub+0x1e6>
 800136a:	003b      	movs	r3, r7
 800136c:	2120      	movs	r1, #32
 800136e:	1b42      	subs	r2, r0, r5
 8001370:	3201      	adds	r2, #1
 8001372:	40d3      	lsrs	r3, r2
 8001374:	1a8a      	subs	r2, r1, r2
 8001376:	4097      	lsls	r7, r2
 8001378:	1e7a      	subs	r2, r7, #1
 800137a:	4197      	sbcs	r7, r2
 800137c:	2200      	movs	r2, #0
 800137e:	433b      	orrs	r3, r7
 8001380:	0759      	lsls	r1, r3, #29
 8001382:	d000      	beq.n	8001386 <__aeabi_fsub+0x1be>
 8001384:	e78b      	b.n	800129e <__aeabi_fsub+0xd6>
 8001386:	e78f      	b.n	80012a8 <__aeabi_fsub+0xe0>
 8001388:	20fe      	movs	r0, #254	@ 0xfe
 800138a:	1c6a      	adds	r2, r5, #1
 800138c:	4210      	tst	r0, r2
 800138e:	d112      	bne.n	80013b6 <__aeabi_fsub+0x1ee>
 8001390:	2d00      	cmp	r5, #0
 8001392:	d152      	bne.n	800143a <__aeabi_fsub+0x272>
 8001394:	2b00      	cmp	r3, #0
 8001396:	d07c      	beq.n	8001492 <__aeabi_fsub+0x2ca>
 8001398:	2e00      	cmp	r6, #0
 800139a:	d0bb      	beq.n	8001314 <__aeabi_fsub+0x14c>
 800139c:	1b9a      	subs	r2, r3, r6
 800139e:	0150      	lsls	r0, r2, #5
 80013a0:	d400      	bmi.n	80013a4 <__aeabi_fsub+0x1dc>
 80013a2:	e08b      	b.n	80014bc <__aeabi_fsub+0x2f4>
 80013a4:	2401      	movs	r4, #1
 80013a6:	2200      	movs	r2, #0
 80013a8:	1af3      	subs	r3, r6, r3
 80013aa:	400c      	ands	r4, r1
 80013ac:	e7e8      	b.n	8001380 <__aeabi_fsub+0x1b8>
 80013ae:	4b56      	ldr	r3, [pc, #344]	@ (8001508 <__aeabi_fsub+0x340>)
 80013b0:	1a2a      	subs	r2, r5, r0
 80013b2:	403b      	ands	r3, r7
 80013b4:	e7e4      	b.n	8001380 <__aeabi_fsub+0x1b8>
 80013b6:	1b9f      	subs	r7, r3, r6
 80013b8:	017a      	lsls	r2, r7, #5
 80013ba:	d446      	bmi.n	800144a <__aeabi_fsub+0x282>
 80013bc:	2f00      	cmp	r7, #0
 80013be:	d1cd      	bne.n	800135c <__aeabi_fsub+0x194>
 80013c0:	2400      	movs	r4, #0
 80013c2:	2000      	movs	r0, #0
 80013c4:	2300      	movs	r3, #0
 80013c6:	e777      	b.n	80012b8 <__aeabi_fsub+0xf0>
 80013c8:	199b      	adds	r3, r3, r6
 80013ca:	2501      	movs	r5, #1
 80013cc:	3201      	adds	r2, #1
 80013ce:	0159      	lsls	r1, r3, #5
 80013d0:	d400      	bmi.n	80013d4 <__aeabi_fsub+0x20c>
 80013d2:	e760      	b.n	8001296 <__aeabi_fsub+0xce>
 80013d4:	2101      	movs	r1, #1
 80013d6:	484d      	ldr	r0, [pc, #308]	@ (800150c <__aeabi_fsub+0x344>)
 80013d8:	4019      	ands	r1, r3
 80013da:	085b      	lsrs	r3, r3, #1
 80013dc:	4003      	ands	r3, r0
 80013de:	430b      	orrs	r3, r1
 80013e0:	e7ce      	b.n	8001380 <__aeabi_fsub+0x1b8>
 80013e2:	1e57      	subs	r7, r2, #1
 80013e4:	2a01      	cmp	r2, #1
 80013e6:	d05a      	beq.n	800149e <__aeabi_fsub+0x2d6>
 80013e8:	000c      	movs	r4, r1
 80013ea:	2aff      	cmp	r2, #255	@ 0xff
 80013ec:	d033      	beq.n	8001456 <__aeabi_fsub+0x28e>
 80013ee:	2201      	movs	r2, #1
 80013f0:	2f1b      	cmp	r7, #27
 80013f2:	dc07      	bgt.n	8001404 <__aeabi_fsub+0x23c>
 80013f4:	2120      	movs	r1, #32
 80013f6:	1bc9      	subs	r1, r1, r7
 80013f8:	001a      	movs	r2, r3
 80013fa:	408b      	lsls	r3, r1
 80013fc:	40fa      	lsrs	r2, r7
 80013fe:	1e59      	subs	r1, r3, #1
 8001400:	418b      	sbcs	r3, r1
 8001402:	431a      	orrs	r2, r3
 8001404:	0005      	movs	r5, r0
 8001406:	1ab3      	subs	r3, r6, r2
 8001408:	e743      	b.n	8001292 <__aeabi_fsub+0xca>
 800140a:	2d00      	cmp	r5, #0
 800140c:	d123      	bne.n	8001456 <__aeabi_fsub+0x28e>
 800140e:	22ff      	movs	r2, #255	@ 0xff
 8001410:	2b00      	cmp	r3, #0
 8001412:	d09b      	beq.n	800134c <__aeabi_fsub+0x184>
 8001414:	1e51      	subs	r1, r2, #1
 8001416:	2a01      	cmp	r2, #1
 8001418:	d0d6      	beq.n	80013c8 <__aeabi_fsub+0x200>
 800141a:	2aff      	cmp	r2, #255	@ 0xff
 800141c:	d01b      	beq.n	8001456 <__aeabi_fsub+0x28e>
 800141e:	291b      	cmp	r1, #27
 8001420:	dd2c      	ble.n	800147c <__aeabi_fsub+0x2b4>
 8001422:	0002      	movs	r2, r0
 8001424:	1c73      	adds	r3, r6, #1
 8001426:	e73a      	b.n	800129e <__aeabi_fsub+0xd6>
 8001428:	2aff      	cmp	r2, #255	@ 0xff
 800142a:	d088      	beq.n	800133e <__aeabi_fsub+0x176>
 800142c:	199b      	adds	r3, r3, r6
 800142e:	085b      	lsrs	r3, r3, #1
 8001430:	0759      	lsls	r1, r3, #29
 8001432:	d000      	beq.n	8001436 <__aeabi_fsub+0x26e>
 8001434:	e733      	b.n	800129e <__aeabi_fsub+0xd6>
 8001436:	08db      	lsrs	r3, r3, #3
 8001438:	e76e      	b.n	8001318 <__aeabi_fsub+0x150>
 800143a:	2b00      	cmp	r3, #0
 800143c:	d110      	bne.n	8001460 <__aeabi_fsub+0x298>
 800143e:	2e00      	cmp	r6, #0
 8001440:	d043      	beq.n	80014ca <__aeabi_fsub+0x302>
 8001442:	2401      	movs	r4, #1
 8001444:	0033      	movs	r3, r6
 8001446:	400c      	ands	r4, r1
 8001448:	e706      	b.n	8001258 <__aeabi_fsub+0x90>
 800144a:	2401      	movs	r4, #1
 800144c:	1af7      	subs	r7, r6, r3
 800144e:	400c      	ands	r4, r1
 8001450:	e784      	b.n	800135c <__aeabi_fsub+0x194>
 8001452:	2b00      	cmp	r3, #0
 8001454:	d104      	bne.n	8001460 <__aeabi_fsub+0x298>
 8001456:	0033      	movs	r3, r6
 8001458:	e6fe      	b.n	8001258 <__aeabi_fsub+0x90>
 800145a:	2501      	movs	r5, #1
 800145c:	1b9b      	subs	r3, r3, r6
 800145e:	e718      	b.n	8001292 <__aeabi_fsub+0xca>
 8001460:	2e00      	cmp	r6, #0
 8001462:	d100      	bne.n	8001466 <__aeabi_fsub+0x29e>
 8001464:	e6f8      	b.n	8001258 <__aeabi_fsub+0x90>
 8001466:	2280      	movs	r2, #128	@ 0x80
 8001468:	03d2      	lsls	r2, r2, #15
 800146a:	4297      	cmp	r7, r2
 800146c:	d304      	bcc.n	8001478 <__aeabi_fsub+0x2b0>
 800146e:	4594      	cmp	ip, r2
 8001470:	d202      	bcs.n	8001478 <__aeabi_fsub+0x2b0>
 8001472:	2401      	movs	r4, #1
 8001474:	0033      	movs	r3, r6
 8001476:	400c      	ands	r4, r1
 8001478:	08db      	lsrs	r3, r3, #3
 800147a:	e6f1      	b.n	8001260 <__aeabi_fsub+0x98>
 800147c:	001a      	movs	r2, r3
 800147e:	2520      	movs	r5, #32
 8001480:	40ca      	lsrs	r2, r1
 8001482:	1a69      	subs	r1, r5, r1
 8001484:	408b      	lsls	r3, r1
 8001486:	1e59      	subs	r1, r3, #1
 8001488:	418b      	sbcs	r3, r1
 800148a:	4313      	orrs	r3, r2
 800148c:	0005      	movs	r5, r0
 800148e:	199b      	adds	r3, r3, r6
 8001490:	e750      	b.n	8001334 <__aeabi_fsub+0x16c>
 8001492:	2e00      	cmp	r6, #0
 8001494:	d094      	beq.n	80013c0 <__aeabi_fsub+0x1f8>
 8001496:	2401      	movs	r4, #1
 8001498:	0033      	movs	r3, r6
 800149a:	400c      	ands	r4, r1
 800149c:	e73a      	b.n	8001314 <__aeabi_fsub+0x14c>
 800149e:	000c      	movs	r4, r1
 80014a0:	2501      	movs	r5, #1
 80014a2:	1af3      	subs	r3, r6, r3
 80014a4:	e6f5      	b.n	8001292 <__aeabi_fsub+0xca>
 80014a6:	0033      	movs	r3, r6
 80014a8:	e734      	b.n	8001314 <__aeabi_fsub+0x14c>
 80014aa:	199b      	adds	r3, r3, r6
 80014ac:	2200      	movs	r2, #0
 80014ae:	0159      	lsls	r1, r3, #5
 80014b0:	d5c1      	bpl.n	8001436 <__aeabi_fsub+0x26e>
 80014b2:	4a15      	ldr	r2, [pc, #84]	@ (8001508 <__aeabi_fsub+0x340>)
 80014b4:	4013      	ands	r3, r2
 80014b6:	08db      	lsrs	r3, r3, #3
 80014b8:	2201      	movs	r2, #1
 80014ba:	e72d      	b.n	8001318 <__aeabi_fsub+0x150>
 80014bc:	2a00      	cmp	r2, #0
 80014be:	d100      	bne.n	80014c2 <__aeabi_fsub+0x2fa>
 80014c0:	e77e      	b.n	80013c0 <__aeabi_fsub+0x1f8>
 80014c2:	0013      	movs	r3, r2
 80014c4:	2200      	movs	r2, #0
 80014c6:	08db      	lsrs	r3, r3, #3
 80014c8:	e726      	b.n	8001318 <__aeabi_fsub+0x150>
 80014ca:	2380      	movs	r3, #128	@ 0x80
 80014cc:	2400      	movs	r4, #0
 80014ce:	20ff      	movs	r0, #255	@ 0xff
 80014d0:	03db      	lsls	r3, r3, #15
 80014d2:	e6f1      	b.n	80012b8 <__aeabi_fsub+0xf0>
 80014d4:	2a00      	cmp	r2, #0
 80014d6:	d100      	bne.n	80014da <__aeabi_fsub+0x312>
 80014d8:	e756      	b.n	8001388 <__aeabi_fsub+0x1c0>
 80014da:	1b47      	subs	r7, r0, r5
 80014dc:	003a      	movs	r2, r7
 80014de:	2d00      	cmp	r5, #0
 80014e0:	d100      	bne.n	80014e4 <__aeabi_fsub+0x31c>
 80014e2:	e730      	b.n	8001346 <__aeabi_fsub+0x17e>
 80014e4:	2280      	movs	r2, #128	@ 0x80
 80014e6:	04d2      	lsls	r2, r2, #19
 80014e8:	000c      	movs	r4, r1
 80014ea:	4313      	orrs	r3, r2
 80014ec:	e77f      	b.n	80013ee <__aeabi_fsub+0x226>
 80014ee:	2a00      	cmp	r2, #0
 80014f0:	d100      	bne.n	80014f4 <__aeabi_fsub+0x32c>
 80014f2:	e701      	b.n	80012f8 <__aeabi_fsub+0x130>
 80014f4:	1b41      	subs	r1, r0, r5
 80014f6:	2d00      	cmp	r5, #0
 80014f8:	d101      	bne.n	80014fe <__aeabi_fsub+0x336>
 80014fa:	000a      	movs	r2, r1
 80014fc:	e788      	b.n	8001410 <__aeabi_fsub+0x248>
 80014fe:	2280      	movs	r2, #128	@ 0x80
 8001500:	04d2      	lsls	r2, r2, #19
 8001502:	4313      	orrs	r3, r2
 8001504:	e78b      	b.n	800141e <__aeabi_fsub+0x256>
 8001506:	46c0      	nop			@ (mov r8, r8)
 8001508:	fbffffff 	.word	0xfbffffff
 800150c:	7dffffff 	.word	0x7dffffff

08001510 <__aeabi_f2iz>:
 8001510:	0241      	lsls	r1, r0, #9
 8001512:	0042      	lsls	r2, r0, #1
 8001514:	0fc3      	lsrs	r3, r0, #31
 8001516:	0a49      	lsrs	r1, r1, #9
 8001518:	2000      	movs	r0, #0
 800151a:	0e12      	lsrs	r2, r2, #24
 800151c:	2a7e      	cmp	r2, #126	@ 0x7e
 800151e:	dd03      	ble.n	8001528 <__aeabi_f2iz+0x18>
 8001520:	2a9d      	cmp	r2, #157	@ 0x9d
 8001522:	dd02      	ble.n	800152a <__aeabi_f2iz+0x1a>
 8001524:	4a09      	ldr	r2, [pc, #36]	@ (800154c <__aeabi_f2iz+0x3c>)
 8001526:	1898      	adds	r0, r3, r2
 8001528:	4770      	bx	lr
 800152a:	2080      	movs	r0, #128	@ 0x80
 800152c:	0400      	lsls	r0, r0, #16
 800152e:	4301      	orrs	r1, r0
 8001530:	2a95      	cmp	r2, #149	@ 0x95
 8001532:	dc07      	bgt.n	8001544 <__aeabi_f2iz+0x34>
 8001534:	2096      	movs	r0, #150	@ 0x96
 8001536:	1a82      	subs	r2, r0, r2
 8001538:	40d1      	lsrs	r1, r2
 800153a:	4248      	negs	r0, r1
 800153c:	2b00      	cmp	r3, #0
 800153e:	d1f3      	bne.n	8001528 <__aeabi_f2iz+0x18>
 8001540:	0008      	movs	r0, r1
 8001542:	e7f1      	b.n	8001528 <__aeabi_f2iz+0x18>
 8001544:	3a96      	subs	r2, #150	@ 0x96
 8001546:	4091      	lsls	r1, r2
 8001548:	e7f7      	b.n	800153a <__aeabi_f2iz+0x2a>
 800154a:	46c0      	nop			@ (mov r8, r8)
 800154c:	7fffffff 	.word	0x7fffffff

08001550 <__aeabi_i2f>:
 8001550:	b570      	push	{r4, r5, r6, lr}
 8001552:	2800      	cmp	r0, #0
 8001554:	d013      	beq.n	800157e <__aeabi_i2f+0x2e>
 8001556:	17c3      	asrs	r3, r0, #31
 8001558:	18c5      	adds	r5, r0, r3
 800155a:	405d      	eors	r5, r3
 800155c:	0fc4      	lsrs	r4, r0, #31
 800155e:	0028      	movs	r0, r5
 8001560:	f002 f80c 	bl	800357c <__clzsi2>
 8001564:	239e      	movs	r3, #158	@ 0x9e
 8001566:	0001      	movs	r1, r0
 8001568:	1a1b      	subs	r3, r3, r0
 800156a:	2b96      	cmp	r3, #150	@ 0x96
 800156c:	dc0f      	bgt.n	800158e <__aeabi_i2f+0x3e>
 800156e:	2808      	cmp	r0, #8
 8001570:	d034      	beq.n	80015dc <__aeabi_i2f+0x8c>
 8001572:	3908      	subs	r1, #8
 8001574:	408d      	lsls	r5, r1
 8001576:	026d      	lsls	r5, r5, #9
 8001578:	0a6d      	lsrs	r5, r5, #9
 800157a:	b2d8      	uxtb	r0, r3
 800157c:	e002      	b.n	8001584 <__aeabi_i2f+0x34>
 800157e:	2400      	movs	r4, #0
 8001580:	2000      	movs	r0, #0
 8001582:	2500      	movs	r5, #0
 8001584:	05c0      	lsls	r0, r0, #23
 8001586:	4328      	orrs	r0, r5
 8001588:	07e4      	lsls	r4, r4, #31
 800158a:	4320      	orrs	r0, r4
 800158c:	bd70      	pop	{r4, r5, r6, pc}
 800158e:	2b99      	cmp	r3, #153	@ 0x99
 8001590:	dc16      	bgt.n	80015c0 <__aeabi_i2f+0x70>
 8001592:	1f42      	subs	r2, r0, #5
 8001594:	2805      	cmp	r0, #5
 8001596:	d000      	beq.n	800159a <__aeabi_i2f+0x4a>
 8001598:	4095      	lsls	r5, r2
 800159a:	002a      	movs	r2, r5
 800159c:	4811      	ldr	r0, [pc, #68]	@ (80015e4 <__aeabi_i2f+0x94>)
 800159e:	4002      	ands	r2, r0
 80015a0:	076e      	lsls	r6, r5, #29
 80015a2:	d009      	beq.n	80015b8 <__aeabi_i2f+0x68>
 80015a4:	260f      	movs	r6, #15
 80015a6:	4035      	ands	r5, r6
 80015a8:	2d04      	cmp	r5, #4
 80015aa:	d005      	beq.n	80015b8 <__aeabi_i2f+0x68>
 80015ac:	3204      	adds	r2, #4
 80015ae:	0155      	lsls	r5, r2, #5
 80015b0:	d502      	bpl.n	80015b8 <__aeabi_i2f+0x68>
 80015b2:	239f      	movs	r3, #159	@ 0x9f
 80015b4:	4002      	ands	r2, r0
 80015b6:	1a5b      	subs	r3, r3, r1
 80015b8:	0192      	lsls	r2, r2, #6
 80015ba:	0a55      	lsrs	r5, r2, #9
 80015bc:	b2d8      	uxtb	r0, r3
 80015be:	e7e1      	b.n	8001584 <__aeabi_i2f+0x34>
 80015c0:	2205      	movs	r2, #5
 80015c2:	1a12      	subs	r2, r2, r0
 80015c4:	0028      	movs	r0, r5
 80015c6:	40d0      	lsrs	r0, r2
 80015c8:	0002      	movs	r2, r0
 80015ca:	0008      	movs	r0, r1
 80015cc:	301b      	adds	r0, #27
 80015ce:	4085      	lsls	r5, r0
 80015d0:	0028      	movs	r0, r5
 80015d2:	1e45      	subs	r5, r0, #1
 80015d4:	41a8      	sbcs	r0, r5
 80015d6:	4302      	orrs	r2, r0
 80015d8:	0015      	movs	r5, r2
 80015da:	e7de      	b.n	800159a <__aeabi_i2f+0x4a>
 80015dc:	026d      	lsls	r5, r5, #9
 80015de:	2096      	movs	r0, #150	@ 0x96
 80015e0:	0a6d      	lsrs	r5, r5, #9
 80015e2:	e7cf      	b.n	8001584 <__aeabi_i2f+0x34>
 80015e4:	fbffffff 	.word	0xfbffffff

080015e8 <__aeabi_ui2f>:
 80015e8:	b570      	push	{r4, r5, r6, lr}
 80015ea:	1e04      	subs	r4, r0, #0
 80015ec:	d00e      	beq.n	800160c <__aeabi_ui2f+0x24>
 80015ee:	f001 ffc5 	bl	800357c <__clzsi2>
 80015f2:	239e      	movs	r3, #158	@ 0x9e
 80015f4:	0001      	movs	r1, r0
 80015f6:	1a1b      	subs	r3, r3, r0
 80015f8:	2b96      	cmp	r3, #150	@ 0x96
 80015fa:	dc0c      	bgt.n	8001616 <__aeabi_ui2f+0x2e>
 80015fc:	2808      	cmp	r0, #8
 80015fe:	d02f      	beq.n	8001660 <__aeabi_ui2f+0x78>
 8001600:	3908      	subs	r1, #8
 8001602:	408c      	lsls	r4, r1
 8001604:	0264      	lsls	r4, r4, #9
 8001606:	0a64      	lsrs	r4, r4, #9
 8001608:	b2d8      	uxtb	r0, r3
 800160a:	e001      	b.n	8001610 <__aeabi_ui2f+0x28>
 800160c:	2000      	movs	r0, #0
 800160e:	2400      	movs	r4, #0
 8001610:	05c0      	lsls	r0, r0, #23
 8001612:	4320      	orrs	r0, r4
 8001614:	bd70      	pop	{r4, r5, r6, pc}
 8001616:	2b99      	cmp	r3, #153	@ 0x99
 8001618:	dc16      	bgt.n	8001648 <__aeabi_ui2f+0x60>
 800161a:	1f42      	subs	r2, r0, #5
 800161c:	2805      	cmp	r0, #5
 800161e:	d000      	beq.n	8001622 <__aeabi_ui2f+0x3a>
 8001620:	4094      	lsls	r4, r2
 8001622:	0022      	movs	r2, r4
 8001624:	4810      	ldr	r0, [pc, #64]	@ (8001668 <__aeabi_ui2f+0x80>)
 8001626:	4002      	ands	r2, r0
 8001628:	0765      	lsls	r5, r4, #29
 800162a:	d009      	beq.n	8001640 <__aeabi_ui2f+0x58>
 800162c:	250f      	movs	r5, #15
 800162e:	402c      	ands	r4, r5
 8001630:	2c04      	cmp	r4, #4
 8001632:	d005      	beq.n	8001640 <__aeabi_ui2f+0x58>
 8001634:	3204      	adds	r2, #4
 8001636:	0154      	lsls	r4, r2, #5
 8001638:	d502      	bpl.n	8001640 <__aeabi_ui2f+0x58>
 800163a:	239f      	movs	r3, #159	@ 0x9f
 800163c:	4002      	ands	r2, r0
 800163e:	1a5b      	subs	r3, r3, r1
 8001640:	0192      	lsls	r2, r2, #6
 8001642:	0a54      	lsrs	r4, r2, #9
 8001644:	b2d8      	uxtb	r0, r3
 8001646:	e7e3      	b.n	8001610 <__aeabi_ui2f+0x28>
 8001648:	0002      	movs	r2, r0
 800164a:	0020      	movs	r0, r4
 800164c:	321b      	adds	r2, #27
 800164e:	4090      	lsls	r0, r2
 8001650:	0002      	movs	r2, r0
 8001652:	1e50      	subs	r0, r2, #1
 8001654:	4182      	sbcs	r2, r0
 8001656:	2005      	movs	r0, #5
 8001658:	1a40      	subs	r0, r0, r1
 800165a:	40c4      	lsrs	r4, r0
 800165c:	4314      	orrs	r4, r2
 800165e:	e7e0      	b.n	8001622 <__aeabi_ui2f+0x3a>
 8001660:	0264      	lsls	r4, r4, #9
 8001662:	2096      	movs	r0, #150	@ 0x96
 8001664:	0a64      	lsrs	r4, r4, #9
 8001666:	e7d3      	b.n	8001610 <__aeabi_ui2f+0x28>
 8001668:	fbffffff 	.word	0xfbffffff

0800166c <__aeabi_dadd>:
 800166c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800166e:	4657      	mov	r7, sl
 8001670:	464e      	mov	r6, r9
 8001672:	4645      	mov	r5, r8
 8001674:	46de      	mov	lr, fp
 8001676:	b5e0      	push	{r5, r6, r7, lr}
 8001678:	b083      	sub	sp, #12
 800167a:	9000      	str	r0, [sp, #0]
 800167c:	9101      	str	r1, [sp, #4]
 800167e:	030c      	lsls	r4, r1, #12
 8001680:	004f      	lsls	r7, r1, #1
 8001682:	0fce      	lsrs	r6, r1, #31
 8001684:	0a61      	lsrs	r1, r4, #9
 8001686:	9c00      	ldr	r4, [sp, #0]
 8001688:	031d      	lsls	r5, r3, #12
 800168a:	0f64      	lsrs	r4, r4, #29
 800168c:	430c      	orrs	r4, r1
 800168e:	9900      	ldr	r1, [sp, #0]
 8001690:	9200      	str	r2, [sp, #0]
 8001692:	9301      	str	r3, [sp, #4]
 8001694:	00c8      	lsls	r0, r1, #3
 8001696:	0059      	lsls	r1, r3, #1
 8001698:	0d4b      	lsrs	r3, r1, #21
 800169a:	4699      	mov	r9, r3
 800169c:	9a00      	ldr	r2, [sp, #0]
 800169e:	9b01      	ldr	r3, [sp, #4]
 80016a0:	0a6d      	lsrs	r5, r5, #9
 80016a2:	0fd9      	lsrs	r1, r3, #31
 80016a4:	0f53      	lsrs	r3, r2, #29
 80016a6:	432b      	orrs	r3, r5
 80016a8:	469a      	mov	sl, r3
 80016aa:	9b00      	ldr	r3, [sp, #0]
 80016ac:	0d7f      	lsrs	r7, r7, #21
 80016ae:	00da      	lsls	r2, r3, #3
 80016b0:	4694      	mov	ip, r2
 80016b2:	464a      	mov	r2, r9
 80016b4:	46b0      	mov	r8, r6
 80016b6:	1aba      	subs	r2, r7, r2
 80016b8:	428e      	cmp	r6, r1
 80016ba:	d100      	bne.n	80016be <__aeabi_dadd+0x52>
 80016bc:	e0b0      	b.n	8001820 <__aeabi_dadd+0x1b4>
 80016be:	2a00      	cmp	r2, #0
 80016c0:	dc00      	bgt.n	80016c4 <__aeabi_dadd+0x58>
 80016c2:	e078      	b.n	80017b6 <__aeabi_dadd+0x14a>
 80016c4:	4649      	mov	r1, r9
 80016c6:	2900      	cmp	r1, #0
 80016c8:	d100      	bne.n	80016cc <__aeabi_dadd+0x60>
 80016ca:	e0e9      	b.n	80018a0 <__aeabi_dadd+0x234>
 80016cc:	49c9      	ldr	r1, [pc, #804]	@ (80019f4 <__aeabi_dadd+0x388>)
 80016ce:	428f      	cmp	r7, r1
 80016d0:	d100      	bne.n	80016d4 <__aeabi_dadd+0x68>
 80016d2:	e195      	b.n	8001a00 <__aeabi_dadd+0x394>
 80016d4:	2501      	movs	r5, #1
 80016d6:	2a38      	cmp	r2, #56	@ 0x38
 80016d8:	dc16      	bgt.n	8001708 <__aeabi_dadd+0x9c>
 80016da:	2180      	movs	r1, #128	@ 0x80
 80016dc:	4653      	mov	r3, sl
 80016de:	0409      	lsls	r1, r1, #16
 80016e0:	430b      	orrs	r3, r1
 80016e2:	469a      	mov	sl, r3
 80016e4:	2a1f      	cmp	r2, #31
 80016e6:	dd00      	ble.n	80016ea <__aeabi_dadd+0x7e>
 80016e8:	e1e7      	b.n	8001aba <__aeabi_dadd+0x44e>
 80016ea:	2120      	movs	r1, #32
 80016ec:	4655      	mov	r5, sl
 80016ee:	1a8b      	subs	r3, r1, r2
 80016f0:	4661      	mov	r1, ip
 80016f2:	409d      	lsls	r5, r3
 80016f4:	40d1      	lsrs	r1, r2
 80016f6:	430d      	orrs	r5, r1
 80016f8:	4661      	mov	r1, ip
 80016fa:	4099      	lsls	r1, r3
 80016fc:	1e4b      	subs	r3, r1, #1
 80016fe:	4199      	sbcs	r1, r3
 8001700:	4653      	mov	r3, sl
 8001702:	40d3      	lsrs	r3, r2
 8001704:	430d      	orrs	r5, r1
 8001706:	1ae4      	subs	r4, r4, r3
 8001708:	1b45      	subs	r5, r0, r5
 800170a:	42a8      	cmp	r0, r5
 800170c:	4180      	sbcs	r0, r0
 800170e:	4240      	negs	r0, r0
 8001710:	1a24      	subs	r4, r4, r0
 8001712:	0223      	lsls	r3, r4, #8
 8001714:	d400      	bmi.n	8001718 <__aeabi_dadd+0xac>
 8001716:	e10f      	b.n	8001938 <__aeabi_dadd+0x2cc>
 8001718:	0264      	lsls	r4, r4, #9
 800171a:	0a64      	lsrs	r4, r4, #9
 800171c:	2c00      	cmp	r4, #0
 800171e:	d100      	bne.n	8001722 <__aeabi_dadd+0xb6>
 8001720:	e139      	b.n	8001996 <__aeabi_dadd+0x32a>
 8001722:	0020      	movs	r0, r4
 8001724:	f001 ff2a 	bl	800357c <__clzsi2>
 8001728:	0003      	movs	r3, r0
 800172a:	3b08      	subs	r3, #8
 800172c:	2120      	movs	r1, #32
 800172e:	0028      	movs	r0, r5
 8001730:	1aca      	subs	r2, r1, r3
 8001732:	40d0      	lsrs	r0, r2
 8001734:	409c      	lsls	r4, r3
 8001736:	0002      	movs	r2, r0
 8001738:	409d      	lsls	r5, r3
 800173a:	4322      	orrs	r2, r4
 800173c:	429f      	cmp	r7, r3
 800173e:	dd00      	ble.n	8001742 <__aeabi_dadd+0xd6>
 8001740:	e173      	b.n	8001a2a <__aeabi_dadd+0x3be>
 8001742:	1bd8      	subs	r0, r3, r7
 8001744:	3001      	adds	r0, #1
 8001746:	1a09      	subs	r1, r1, r0
 8001748:	002c      	movs	r4, r5
 800174a:	408d      	lsls	r5, r1
 800174c:	40c4      	lsrs	r4, r0
 800174e:	1e6b      	subs	r3, r5, #1
 8001750:	419d      	sbcs	r5, r3
 8001752:	0013      	movs	r3, r2
 8001754:	40c2      	lsrs	r2, r0
 8001756:	408b      	lsls	r3, r1
 8001758:	4325      	orrs	r5, r4
 800175a:	2700      	movs	r7, #0
 800175c:	0014      	movs	r4, r2
 800175e:	431d      	orrs	r5, r3
 8001760:	076b      	lsls	r3, r5, #29
 8001762:	d009      	beq.n	8001778 <__aeabi_dadd+0x10c>
 8001764:	230f      	movs	r3, #15
 8001766:	402b      	ands	r3, r5
 8001768:	2b04      	cmp	r3, #4
 800176a:	d005      	beq.n	8001778 <__aeabi_dadd+0x10c>
 800176c:	1d2b      	adds	r3, r5, #4
 800176e:	42ab      	cmp	r3, r5
 8001770:	41ad      	sbcs	r5, r5
 8001772:	426d      	negs	r5, r5
 8001774:	1964      	adds	r4, r4, r5
 8001776:	001d      	movs	r5, r3
 8001778:	0223      	lsls	r3, r4, #8
 800177a:	d400      	bmi.n	800177e <__aeabi_dadd+0x112>
 800177c:	e12d      	b.n	80019da <__aeabi_dadd+0x36e>
 800177e:	4a9d      	ldr	r2, [pc, #628]	@ (80019f4 <__aeabi_dadd+0x388>)
 8001780:	3701      	adds	r7, #1
 8001782:	4297      	cmp	r7, r2
 8001784:	d100      	bne.n	8001788 <__aeabi_dadd+0x11c>
 8001786:	e0d3      	b.n	8001930 <__aeabi_dadd+0x2c4>
 8001788:	4646      	mov	r6, r8
 800178a:	499b      	ldr	r1, [pc, #620]	@ (80019f8 <__aeabi_dadd+0x38c>)
 800178c:	08ed      	lsrs	r5, r5, #3
 800178e:	4021      	ands	r1, r4
 8001790:	074a      	lsls	r2, r1, #29
 8001792:	432a      	orrs	r2, r5
 8001794:	057c      	lsls	r4, r7, #21
 8001796:	024d      	lsls	r5, r1, #9
 8001798:	0b2d      	lsrs	r5, r5, #12
 800179a:	0d64      	lsrs	r4, r4, #21
 800179c:	0524      	lsls	r4, r4, #20
 800179e:	432c      	orrs	r4, r5
 80017a0:	07f6      	lsls	r6, r6, #31
 80017a2:	4334      	orrs	r4, r6
 80017a4:	0010      	movs	r0, r2
 80017a6:	0021      	movs	r1, r4
 80017a8:	b003      	add	sp, #12
 80017aa:	bcf0      	pop	{r4, r5, r6, r7}
 80017ac:	46bb      	mov	fp, r7
 80017ae:	46b2      	mov	sl, r6
 80017b0:	46a9      	mov	r9, r5
 80017b2:	46a0      	mov	r8, r4
 80017b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017b6:	2a00      	cmp	r2, #0
 80017b8:	d100      	bne.n	80017bc <__aeabi_dadd+0x150>
 80017ba:	e084      	b.n	80018c6 <__aeabi_dadd+0x25a>
 80017bc:	464a      	mov	r2, r9
 80017be:	1bd2      	subs	r2, r2, r7
 80017c0:	2f00      	cmp	r7, #0
 80017c2:	d000      	beq.n	80017c6 <__aeabi_dadd+0x15a>
 80017c4:	e16d      	b.n	8001aa2 <__aeabi_dadd+0x436>
 80017c6:	0025      	movs	r5, r4
 80017c8:	4305      	orrs	r5, r0
 80017ca:	d100      	bne.n	80017ce <__aeabi_dadd+0x162>
 80017cc:	e127      	b.n	8001a1e <__aeabi_dadd+0x3b2>
 80017ce:	1e56      	subs	r6, r2, #1
 80017d0:	2a01      	cmp	r2, #1
 80017d2:	d100      	bne.n	80017d6 <__aeabi_dadd+0x16a>
 80017d4:	e23b      	b.n	8001c4e <__aeabi_dadd+0x5e2>
 80017d6:	4d87      	ldr	r5, [pc, #540]	@ (80019f4 <__aeabi_dadd+0x388>)
 80017d8:	42aa      	cmp	r2, r5
 80017da:	d100      	bne.n	80017de <__aeabi_dadd+0x172>
 80017dc:	e26a      	b.n	8001cb4 <__aeabi_dadd+0x648>
 80017de:	2501      	movs	r5, #1
 80017e0:	2e38      	cmp	r6, #56	@ 0x38
 80017e2:	dc12      	bgt.n	800180a <__aeabi_dadd+0x19e>
 80017e4:	0032      	movs	r2, r6
 80017e6:	2a1f      	cmp	r2, #31
 80017e8:	dd00      	ble.n	80017ec <__aeabi_dadd+0x180>
 80017ea:	e1f8      	b.n	8001bde <__aeabi_dadd+0x572>
 80017ec:	2620      	movs	r6, #32
 80017ee:	0025      	movs	r5, r4
 80017f0:	1ab6      	subs	r6, r6, r2
 80017f2:	0007      	movs	r7, r0
 80017f4:	4653      	mov	r3, sl
 80017f6:	40b0      	lsls	r0, r6
 80017f8:	40d4      	lsrs	r4, r2
 80017fa:	40b5      	lsls	r5, r6
 80017fc:	40d7      	lsrs	r7, r2
 80017fe:	1e46      	subs	r6, r0, #1
 8001800:	41b0      	sbcs	r0, r6
 8001802:	1b1b      	subs	r3, r3, r4
 8001804:	469a      	mov	sl, r3
 8001806:	433d      	orrs	r5, r7
 8001808:	4305      	orrs	r5, r0
 800180a:	4662      	mov	r2, ip
 800180c:	1b55      	subs	r5, r2, r5
 800180e:	45ac      	cmp	ip, r5
 8001810:	4192      	sbcs	r2, r2
 8001812:	4653      	mov	r3, sl
 8001814:	4252      	negs	r2, r2
 8001816:	000e      	movs	r6, r1
 8001818:	464f      	mov	r7, r9
 800181a:	4688      	mov	r8, r1
 800181c:	1a9c      	subs	r4, r3, r2
 800181e:	e778      	b.n	8001712 <__aeabi_dadd+0xa6>
 8001820:	2a00      	cmp	r2, #0
 8001822:	dc00      	bgt.n	8001826 <__aeabi_dadd+0x1ba>
 8001824:	e08e      	b.n	8001944 <__aeabi_dadd+0x2d8>
 8001826:	4649      	mov	r1, r9
 8001828:	2900      	cmp	r1, #0
 800182a:	d175      	bne.n	8001918 <__aeabi_dadd+0x2ac>
 800182c:	4661      	mov	r1, ip
 800182e:	4653      	mov	r3, sl
 8001830:	4319      	orrs	r1, r3
 8001832:	d100      	bne.n	8001836 <__aeabi_dadd+0x1ca>
 8001834:	e0f6      	b.n	8001a24 <__aeabi_dadd+0x3b8>
 8001836:	1e51      	subs	r1, r2, #1
 8001838:	2a01      	cmp	r2, #1
 800183a:	d100      	bne.n	800183e <__aeabi_dadd+0x1d2>
 800183c:	e191      	b.n	8001b62 <__aeabi_dadd+0x4f6>
 800183e:	4d6d      	ldr	r5, [pc, #436]	@ (80019f4 <__aeabi_dadd+0x388>)
 8001840:	42aa      	cmp	r2, r5
 8001842:	d100      	bne.n	8001846 <__aeabi_dadd+0x1da>
 8001844:	e0dc      	b.n	8001a00 <__aeabi_dadd+0x394>
 8001846:	2501      	movs	r5, #1
 8001848:	2938      	cmp	r1, #56	@ 0x38
 800184a:	dc14      	bgt.n	8001876 <__aeabi_dadd+0x20a>
 800184c:	000a      	movs	r2, r1
 800184e:	2a1f      	cmp	r2, #31
 8001850:	dd00      	ble.n	8001854 <__aeabi_dadd+0x1e8>
 8001852:	e1a2      	b.n	8001b9a <__aeabi_dadd+0x52e>
 8001854:	2120      	movs	r1, #32
 8001856:	4653      	mov	r3, sl
 8001858:	1a89      	subs	r1, r1, r2
 800185a:	408b      	lsls	r3, r1
 800185c:	001d      	movs	r5, r3
 800185e:	4663      	mov	r3, ip
 8001860:	40d3      	lsrs	r3, r2
 8001862:	431d      	orrs	r5, r3
 8001864:	4663      	mov	r3, ip
 8001866:	408b      	lsls	r3, r1
 8001868:	0019      	movs	r1, r3
 800186a:	1e4b      	subs	r3, r1, #1
 800186c:	4199      	sbcs	r1, r3
 800186e:	4653      	mov	r3, sl
 8001870:	40d3      	lsrs	r3, r2
 8001872:	430d      	orrs	r5, r1
 8001874:	18e4      	adds	r4, r4, r3
 8001876:	182d      	adds	r5, r5, r0
 8001878:	4285      	cmp	r5, r0
 800187a:	4180      	sbcs	r0, r0
 800187c:	4240      	negs	r0, r0
 800187e:	1824      	adds	r4, r4, r0
 8001880:	0223      	lsls	r3, r4, #8
 8001882:	d559      	bpl.n	8001938 <__aeabi_dadd+0x2cc>
 8001884:	4b5b      	ldr	r3, [pc, #364]	@ (80019f4 <__aeabi_dadd+0x388>)
 8001886:	3701      	adds	r7, #1
 8001888:	429f      	cmp	r7, r3
 800188a:	d051      	beq.n	8001930 <__aeabi_dadd+0x2c4>
 800188c:	2101      	movs	r1, #1
 800188e:	4b5a      	ldr	r3, [pc, #360]	@ (80019f8 <__aeabi_dadd+0x38c>)
 8001890:	086a      	lsrs	r2, r5, #1
 8001892:	401c      	ands	r4, r3
 8001894:	4029      	ands	r1, r5
 8001896:	430a      	orrs	r2, r1
 8001898:	07e5      	lsls	r5, r4, #31
 800189a:	4315      	orrs	r5, r2
 800189c:	0864      	lsrs	r4, r4, #1
 800189e:	e75f      	b.n	8001760 <__aeabi_dadd+0xf4>
 80018a0:	4661      	mov	r1, ip
 80018a2:	4653      	mov	r3, sl
 80018a4:	4319      	orrs	r1, r3
 80018a6:	d100      	bne.n	80018aa <__aeabi_dadd+0x23e>
 80018a8:	e0bc      	b.n	8001a24 <__aeabi_dadd+0x3b8>
 80018aa:	1e51      	subs	r1, r2, #1
 80018ac:	2a01      	cmp	r2, #1
 80018ae:	d100      	bne.n	80018b2 <__aeabi_dadd+0x246>
 80018b0:	e164      	b.n	8001b7c <__aeabi_dadd+0x510>
 80018b2:	4d50      	ldr	r5, [pc, #320]	@ (80019f4 <__aeabi_dadd+0x388>)
 80018b4:	42aa      	cmp	r2, r5
 80018b6:	d100      	bne.n	80018ba <__aeabi_dadd+0x24e>
 80018b8:	e16a      	b.n	8001b90 <__aeabi_dadd+0x524>
 80018ba:	2501      	movs	r5, #1
 80018bc:	2938      	cmp	r1, #56	@ 0x38
 80018be:	dd00      	ble.n	80018c2 <__aeabi_dadd+0x256>
 80018c0:	e722      	b.n	8001708 <__aeabi_dadd+0x9c>
 80018c2:	000a      	movs	r2, r1
 80018c4:	e70e      	b.n	80016e4 <__aeabi_dadd+0x78>
 80018c6:	4a4d      	ldr	r2, [pc, #308]	@ (80019fc <__aeabi_dadd+0x390>)
 80018c8:	1c7d      	adds	r5, r7, #1
 80018ca:	4215      	tst	r5, r2
 80018cc:	d000      	beq.n	80018d0 <__aeabi_dadd+0x264>
 80018ce:	e0d0      	b.n	8001a72 <__aeabi_dadd+0x406>
 80018d0:	0025      	movs	r5, r4
 80018d2:	4662      	mov	r2, ip
 80018d4:	4653      	mov	r3, sl
 80018d6:	4305      	orrs	r5, r0
 80018d8:	431a      	orrs	r2, r3
 80018da:	2f00      	cmp	r7, #0
 80018dc:	d000      	beq.n	80018e0 <__aeabi_dadd+0x274>
 80018de:	e137      	b.n	8001b50 <__aeabi_dadd+0x4e4>
 80018e0:	2d00      	cmp	r5, #0
 80018e2:	d100      	bne.n	80018e6 <__aeabi_dadd+0x27a>
 80018e4:	e1a8      	b.n	8001c38 <__aeabi_dadd+0x5cc>
 80018e6:	2a00      	cmp	r2, #0
 80018e8:	d100      	bne.n	80018ec <__aeabi_dadd+0x280>
 80018ea:	e16a      	b.n	8001bc2 <__aeabi_dadd+0x556>
 80018ec:	4663      	mov	r3, ip
 80018ee:	1ac5      	subs	r5, r0, r3
 80018f0:	4653      	mov	r3, sl
 80018f2:	1ae2      	subs	r2, r4, r3
 80018f4:	42a8      	cmp	r0, r5
 80018f6:	419b      	sbcs	r3, r3
 80018f8:	425b      	negs	r3, r3
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	021a      	lsls	r2, r3, #8
 80018fe:	d400      	bmi.n	8001902 <__aeabi_dadd+0x296>
 8001900:	e203      	b.n	8001d0a <__aeabi_dadd+0x69e>
 8001902:	4663      	mov	r3, ip
 8001904:	1a1d      	subs	r5, r3, r0
 8001906:	45ac      	cmp	ip, r5
 8001908:	4192      	sbcs	r2, r2
 800190a:	4653      	mov	r3, sl
 800190c:	4252      	negs	r2, r2
 800190e:	1b1c      	subs	r4, r3, r4
 8001910:	000e      	movs	r6, r1
 8001912:	4688      	mov	r8, r1
 8001914:	1aa4      	subs	r4, r4, r2
 8001916:	e723      	b.n	8001760 <__aeabi_dadd+0xf4>
 8001918:	4936      	ldr	r1, [pc, #216]	@ (80019f4 <__aeabi_dadd+0x388>)
 800191a:	428f      	cmp	r7, r1
 800191c:	d070      	beq.n	8001a00 <__aeabi_dadd+0x394>
 800191e:	2501      	movs	r5, #1
 8001920:	2a38      	cmp	r2, #56	@ 0x38
 8001922:	dca8      	bgt.n	8001876 <__aeabi_dadd+0x20a>
 8001924:	2180      	movs	r1, #128	@ 0x80
 8001926:	4653      	mov	r3, sl
 8001928:	0409      	lsls	r1, r1, #16
 800192a:	430b      	orrs	r3, r1
 800192c:	469a      	mov	sl, r3
 800192e:	e78e      	b.n	800184e <__aeabi_dadd+0x1e2>
 8001930:	003c      	movs	r4, r7
 8001932:	2500      	movs	r5, #0
 8001934:	2200      	movs	r2, #0
 8001936:	e731      	b.n	800179c <__aeabi_dadd+0x130>
 8001938:	2307      	movs	r3, #7
 800193a:	402b      	ands	r3, r5
 800193c:	2b00      	cmp	r3, #0
 800193e:	d000      	beq.n	8001942 <__aeabi_dadd+0x2d6>
 8001940:	e710      	b.n	8001764 <__aeabi_dadd+0xf8>
 8001942:	e093      	b.n	8001a6c <__aeabi_dadd+0x400>
 8001944:	2a00      	cmp	r2, #0
 8001946:	d074      	beq.n	8001a32 <__aeabi_dadd+0x3c6>
 8001948:	464a      	mov	r2, r9
 800194a:	1bd2      	subs	r2, r2, r7
 800194c:	2f00      	cmp	r7, #0
 800194e:	d100      	bne.n	8001952 <__aeabi_dadd+0x2e6>
 8001950:	e0c7      	b.n	8001ae2 <__aeabi_dadd+0x476>
 8001952:	4928      	ldr	r1, [pc, #160]	@ (80019f4 <__aeabi_dadd+0x388>)
 8001954:	4589      	cmp	r9, r1
 8001956:	d100      	bne.n	800195a <__aeabi_dadd+0x2ee>
 8001958:	e185      	b.n	8001c66 <__aeabi_dadd+0x5fa>
 800195a:	2501      	movs	r5, #1
 800195c:	2a38      	cmp	r2, #56	@ 0x38
 800195e:	dc12      	bgt.n	8001986 <__aeabi_dadd+0x31a>
 8001960:	2180      	movs	r1, #128	@ 0x80
 8001962:	0409      	lsls	r1, r1, #16
 8001964:	430c      	orrs	r4, r1
 8001966:	2a1f      	cmp	r2, #31
 8001968:	dd00      	ble.n	800196c <__aeabi_dadd+0x300>
 800196a:	e1ab      	b.n	8001cc4 <__aeabi_dadd+0x658>
 800196c:	2120      	movs	r1, #32
 800196e:	0025      	movs	r5, r4
 8001970:	1a89      	subs	r1, r1, r2
 8001972:	0007      	movs	r7, r0
 8001974:	4088      	lsls	r0, r1
 8001976:	408d      	lsls	r5, r1
 8001978:	40d7      	lsrs	r7, r2
 800197a:	1e41      	subs	r1, r0, #1
 800197c:	4188      	sbcs	r0, r1
 800197e:	40d4      	lsrs	r4, r2
 8001980:	433d      	orrs	r5, r7
 8001982:	4305      	orrs	r5, r0
 8001984:	44a2      	add	sl, r4
 8001986:	4465      	add	r5, ip
 8001988:	4565      	cmp	r5, ip
 800198a:	4192      	sbcs	r2, r2
 800198c:	4252      	negs	r2, r2
 800198e:	4452      	add	r2, sl
 8001990:	0014      	movs	r4, r2
 8001992:	464f      	mov	r7, r9
 8001994:	e774      	b.n	8001880 <__aeabi_dadd+0x214>
 8001996:	0028      	movs	r0, r5
 8001998:	f001 fdf0 	bl	800357c <__clzsi2>
 800199c:	0003      	movs	r3, r0
 800199e:	3318      	adds	r3, #24
 80019a0:	2b1f      	cmp	r3, #31
 80019a2:	dc00      	bgt.n	80019a6 <__aeabi_dadd+0x33a>
 80019a4:	e6c2      	b.n	800172c <__aeabi_dadd+0xc0>
 80019a6:	002a      	movs	r2, r5
 80019a8:	3808      	subs	r0, #8
 80019aa:	4082      	lsls	r2, r0
 80019ac:	429f      	cmp	r7, r3
 80019ae:	dd00      	ble.n	80019b2 <__aeabi_dadd+0x346>
 80019b0:	e0a9      	b.n	8001b06 <__aeabi_dadd+0x49a>
 80019b2:	1bdb      	subs	r3, r3, r7
 80019b4:	1c58      	adds	r0, r3, #1
 80019b6:	281f      	cmp	r0, #31
 80019b8:	dc00      	bgt.n	80019bc <__aeabi_dadd+0x350>
 80019ba:	e1ac      	b.n	8001d16 <__aeabi_dadd+0x6aa>
 80019bc:	0015      	movs	r5, r2
 80019be:	3b1f      	subs	r3, #31
 80019c0:	40dd      	lsrs	r5, r3
 80019c2:	2820      	cmp	r0, #32
 80019c4:	d005      	beq.n	80019d2 <__aeabi_dadd+0x366>
 80019c6:	2340      	movs	r3, #64	@ 0x40
 80019c8:	1a1b      	subs	r3, r3, r0
 80019ca:	409a      	lsls	r2, r3
 80019cc:	1e53      	subs	r3, r2, #1
 80019ce:	419a      	sbcs	r2, r3
 80019d0:	4315      	orrs	r5, r2
 80019d2:	2307      	movs	r3, #7
 80019d4:	2700      	movs	r7, #0
 80019d6:	402b      	ands	r3, r5
 80019d8:	e7b0      	b.n	800193c <__aeabi_dadd+0x2d0>
 80019da:	08ed      	lsrs	r5, r5, #3
 80019dc:	4b05      	ldr	r3, [pc, #20]	@ (80019f4 <__aeabi_dadd+0x388>)
 80019de:	0762      	lsls	r2, r4, #29
 80019e0:	432a      	orrs	r2, r5
 80019e2:	08e4      	lsrs	r4, r4, #3
 80019e4:	429f      	cmp	r7, r3
 80019e6:	d00f      	beq.n	8001a08 <__aeabi_dadd+0x39c>
 80019e8:	0324      	lsls	r4, r4, #12
 80019ea:	0b25      	lsrs	r5, r4, #12
 80019ec:	057c      	lsls	r4, r7, #21
 80019ee:	0d64      	lsrs	r4, r4, #21
 80019f0:	e6d4      	b.n	800179c <__aeabi_dadd+0x130>
 80019f2:	46c0      	nop			@ (mov r8, r8)
 80019f4:	000007ff 	.word	0x000007ff
 80019f8:	ff7fffff 	.word	0xff7fffff
 80019fc:	000007fe 	.word	0x000007fe
 8001a00:	08c0      	lsrs	r0, r0, #3
 8001a02:	0762      	lsls	r2, r4, #29
 8001a04:	4302      	orrs	r2, r0
 8001a06:	08e4      	lsrs	r4, r4, #3
 8001a08:	0013      	movs	r3, r2
 8001a0a:	4323      	orrs	r3, r4
 8001a0c:	d100      	bne.n	8001a10 <__aeabi_dadd+0x3a4>
 8001a0e:	e186      	b.n	8001d1e <__aeabi_dadd+0x6b2>
 8001a10:	2580      	movs	r5, #128	@ 0x80
 8001a12:	032d      	lsls	r5, r5, #12
 8001a14:	4325      	orrs	r5, r4
 8001a16:	032d      	lsls	r5, r5, #12
 8001a18:	4cc3      	ldr	r4, [pc, #780]	@ (8001d28 <__aeabi_dadd+0x6bc>)
 8001a1a:	0b2d      	lsrs	r5, r5, #12
 8001a1c:	e6be      	b.n	800179c <__aeabi_dadd+0x130>
 8001a1e:	4660      	mov	r0, ip
 8001a20:	4654      	mov	r4, sl
 8001a22:	000e      	movs	r6, r1
 8001a24:	0017      	movs	r7, r2
 8001a26:	08c5      	lsrs	r5, r0, #3
 8001a28:	e7d8      	b.n	80019dc <__aeabi_dadd+0x370>
 8001a2a:	4cc0      	ldr	r4, [pc, #768]	@ (8001d2c <__aeabi_dadd+0x6c0>)
 8001a2c:	1aff      	subs	r7, r7, r3
 8001a2e:	4014      	ands	r4, r2
 8001a30:	e696      	b.n	8001760 <__aeabi_dadd+0xf4>
 8001a32:	4abf      	ldr	r2, [pc, #764]	@ (8001d30 <__aeabi_dadd+0x6c4>)
 8001a34:	1c79      	adds	r1, r7, #1
 8001a36:	4211      	tst	r1, r2
 8001a38:	d16b      	bne.n	8001b12 <__aeabi_dadd+0x4a6>
 8001a3a:	0022      	movs	r2, r4
 8001a3c:	4302      	orrs	r2, r0
 8001a3e:	2f00      	cmp	r7, #0
 8001a40:	d000      	beq.n	8001a44 <__aeabi_dadd+0x3d8>
 8001a42:	e0db      	b.n	8001bfc <__aeabi_dadd+0x590>
 8001a44:	2a00      	cmp	r2, #0
 8001a46:	d100      	bne.n	8001a4a <__aeabi_dadd+0x3de>
 8001a48:	e12d      	b.n	8001ca6 <__aeabi_dadd+0x63a>
 8001a4a:	4662      	mov	r2, ip
 8001a4c:	4653      	mov	r3, sl
 8001a4e:	431a      	orrs	r2, r3
 8001a50:	d100      	bne.n	8001a54 <__aeabi_dadd+0x3e8>
 8001a52:	e0b6      	b.n	8001bc2 <__aeabi_dadd+0x556>
 8001a54:	4663      	mov	r3, ip
 8001a56:	18c5      	adds	r5, r0, r3
 8001a58:	4285      	cmp	r5, r0
 8001a5a:	4180      	sbcs	r0, r0
 8001a5c:	4454      	add	r4, sl
 8001a5e:	4240      	negs	r0, r0
 8001a60:	1824      	adds	r4, r4, r0
 8001a62:	0223      	lsls	r3, r4, #8
 8001a64:	d502      	bpl.n	8001a6c <__aeabi_dadd+0x400>
 8001a66:	000f      	movs	r7, r1
 8001a68:	4bb0      	ldr	r3, [pc, #704]	@ (8001d2c <__aeabi_dadd+0x6c0>)
 8001a6a:	401c      	ands	r4, r3
 8001a6c:	003a      	movs	r2, r7
 8001a6e:	0028      	movs	r0, r5
 8001a70:	e7d8      	b.n	8001a24 <__aeabi_dadd+0x3b8>
 8001a72:	4662      	mov	r2, ip
 8001a74:	1a85      	subs	r5, r0, r2
 8001a76:	42a8      	cmp	r0, r5
 8001a78:	4192      	sbcs	r2, r2
 8001a7a:	4653      	mov	r3, sl
 8001a7c:	4252      	negs	r2, r2
 8001a7e:	4691      	mov	r9, r2
 8001a80:	1ae3      	subs	r3, r4, r3
 8001a82:	001a      	movs	r2, r3
 8001a84:	464b      	mov	r3, r9
 8001a86:	1ad2      	subs	r2, r2, r3
 8001a88:	0013      	movs	r3, r2
 8001a8a:	4691      	mov	r9, r2
 8001a8c:	021a      	lsls	r2, r3, #8
 8001a8e:	d454      	bmi.n	8001b3a <__aeabi_dadd+0x4ce>
 8001a90:	464a      	mov	r2, r9
 8001a92:	464c      	mov	r4, r9
 8001a94:	432a      	orrs	r2, r5
 8001a96:	d000      	beq.n	8001a9a <__aeabi_dadd+0x42e>
 8001a98:	e640      	b.n	800171c <__aeabi_dadd+0xb0>
 8001a9a:	2600      	movs	r6, #0
 8001a9c:	2400      	movs	r4, #0
 8001a9e:	2500      	movs	r5, #0
 8001aa0:	e67c      	b.n	800179c <__aeabi_dadd+0x130>
 8001aa2:	4da1      	ldr	r5, [pc, #644]	@ (8001d28 <__aeabi_dadd+0x6bc>)
 8001aa4:	45a9      	cmp	r9, r5
 8001aa6:	d100      	bne.n	8001aaa <__aeabi_dadd+0x43e>
 8001aa8:	e090      	b.n	8001bcc <__aeabi_dadd+0x560>
 8001aaa:	2501      	movs	r5, #1
 8001aac:	2a38      	cmp	r2, #56	@ 0x38
 8001aae:	dd00      	ble.n	8001ab2 <__aeabi_dadd+0x446>
 8001ab0:	e6ab      	b.n	800180a <__aeabi_dadd+0x19e>
 8001ab2:	2580      	movs	r5, #128	@ 0x80
 8001ab4:	042d      	lsls	r5, r5, #16
 8001ab6:	432c      	orrs	r4, r5
 8001ab8:	e695      	b.n	80017e6 <__aeabi_dadd+0x17a>
 8001aba:	0011      	movs	r1, r2
 8001abc:	4655      	mov	r5, sl
 8001abe:	3920      	subs	r1, #32
 8001ac0:	40cd      	lsrs	r5, r1
 8001ac2:	46a9      	mov	r9, r5
 8001ac4:	2a20      	cmp	r2, #32
 8001ac6:	d006      	beq.n	8001ad6 <__aeabi_dadd+0x46a>
 8001ac8:	2140      	movs	r1, #64	@ 0x40
 8001aca:	4653      	mov	r3, sl
 8001acc:	1a8a      	subs	r2, r1, r2
 8001ace:	4093      	lsls	r3, r2
 8001ad0:	4662      	mov	r2, ip
 8001ad2:	431a      	orrs	r2, r3
 8001ad4:	4694      	mov	ip, r2
 8001ad6:	4665      	mov	r5, ip
 8001ad8:	1e6b      	subs	r3, r5, #1
 8001ada:	419d      	sbcs	r5, r3
 8001adc:	464b      	mov	r3, r9
 8001ade:	431d      	orrs	r5, r3
 8001ae0:	e612      	b.n	8001708 <__aeabi_dadd+0x9c>
 8001ae2:	0021      	movs	r1, r4
 8001ae4:	4301      	orrs	r1, r0
 8001ae6:	d100      	bne.n	8001aea <__aeabi_dadd+0x47e>
 8001ae8:	e0c4      	b.n	8001c74 <__aeabi_dadd+0x608>
 8001aea:	1e51      	subs	r1, r2, #1
 8001aec:	2a01      	cmp	r2, #1
 8001aee:	d100      	bne.n	8001af2 <__aeabi_dadd+0x486>
 8001af0:	e0fb      	b.n	8001cea <__aeabi_dadd+0x67e>
 8001af2:	4d8d      	ldr	r5, [pc, #564]	@ (8001d28 <__aeabi_dadd+0x6bc>)
 8001af4:	42aa      	cmp	r2, r5
 8001af6:	d100      	bne.n	8001afa <__aeabi_dadd+0x48e>
 8001af8:	e0b5      	b.n	8001c66 <__aeabi_dadd+0x5fa>
 8001afa:	2501      	movs	r5, #1
 8001afc:	2938      	cmp	r1, #56	@ 0x38
 8001afe:	dd00      	ble.n	8001b02 <__aeabi_dadd+0x496>
 8001b00:	e741      	b.n	8001986 <__aeabi_dadd+0x31a>
 8001b02:	000a      	movs	r2, r1
 8001b04:	e72f      	b.n	8001966 <__aeabi_dadd+0x2fa>
 8001b06:	4c89      	ldr	r4, [pc, #548]	@ (8001d2c <__aeabi_dadd+0x6c0>)
 8001b08:	1aff      	subs	r7, r7, r3
 8001b0a:	4014      	ands	r4, r2
 8001b0c:	0762      	lsls	r2, r4, #29
 8001b0e:	08e4      	lsrs	r4, r4, #3
 8001b10:	e76a      	b.n	80019e8 <__aeabi_dadd+0x37c>
 8001b12:	4a85      	ldr	r2, [pc, #532]	@ (8001d28 <__aeabi_dadd+0x6bc>)
 8001b14:	4291      	cmp	r1, r2
 8001b16:	d100      	bne.n	8001b1a <__aeabi_dadd+0x4ae>
 8001b18:	e0e3      	b.n	8001ce2 <__aeabi_dadd+0x676>
 8001b1a:	4663      	mov	r3, ip
 8001b1c:	18c2      	adds	r2, r0, r3
 8001b1e:	4282      	cmp	r2, r0
 8001b20:	4180      	sbcs	r0, r0
 8001b22:	0023      	movs	r3, r4
 8001b24:	4240      	negs	r0, r0
 8001b26:	4453      	add	r3, sl
 8001b28:	181b      	adds	r3, r3, r0
 8001b2a:	07dd      	lsls	r5, r3, #31
 8001b2c:	085c      	lsrs	r4, r3, #1
 8001b2e:	2307      	movs	r3, #7
 8001b30:	0852      	lsrs	r2, r2, #1
 8001b32:	4315      	orrs	r5, r2
 8001b34:	000f      	movs	r7, r1
 8001b36:	402b      	ands	r3, r5
 8001b38:	e700      	b.n	800193c <__aeabi_dadd+0x2d0>
 8001b3a:	4663      	mov	r3, ip
 8001b3c:	1a1d      	subs	r5, r3, r0
 8001b3e:	45ac      	cmp	ip, r5
 8001b40:	4192      	sbcs	r2, r2
 8001b42:	4653      	mov	r3, sl
 8001b44:	4252      	negs	r2, r2
 8001b46:	1b1c      	subs	r4, r3, r4
 8001b48:	000e      	movs	r6, r1
 8001b4a:	4688      	mov	r8, r1
 8001b4c:	1aa4      	subs	r4, r4, r2
 8001b4e:	e5e5      	b.n	800171c <__aeabi_dadd+0xb0>
 8001b50:	2d00      	cmp	r5, #0
 8001b52:	d000      	beq.n	8001b56 <__aeabi_dadd+0x4ea>
 8001b54:	e091      	b.n	8001c7a <__aeabi_dadd+0x60e>
 8001b56:	2a00      	cmp	r2, #0
 8001b58:	d138      	bne.n	8001bcc <__aeabi_dadd+0x560>
 8001b5a:	2480      	movs	r4, #128	@ 0x80
 8001b5c:	2600      	movs	r6, #0
 8001b5e:	0324      	lsls	r4, r4, #12
 8001b60:	e756      	b.n	8001a10 <__aeabi_dadd+0x3a4>
 8001b62:	4663      	mov	r3, ip
 8001b64:	18c5      	adds	r5, r0, r3
 8001b66:	4285      	cmp	r5, r0
 8001b68:	4180      	sbcs	r0, r0
 8001b6a:	4454      	add	r4, sl
 8001b6c:	4240      	negs	r0, r0
 8001b6e:	1824      	adds	r4, r4, r0
 8001b70:	2701      	movs	r7, #1
 8001b72:	0223      	lsls	r3, r4, #8
 8001b74:	d400      	bmi.n	8001b78 <__aeabi_dadd+0x50c>
 8001b76:	e6df      	b.n	8001938 <__aeabi_dadd+0x2cc>
 8001b78:	2702      	movs	r7, #2
 8001b7a:	e687      	b.n	800188c <__aeabi_dadd+0x220>
 8001b7c:	4663      	mov	r3, ip
 8001b7e:	1ac5      	subs	r5, r0, r3
 8001b80:	42a8      	cmp	r0, r5
 8001b82:	4180      	sbcs	r0, r0
 8001b84:	4653      	mov	r3, sl
 8001b86:	4240      	negs	r0, r0
 8001b88:	1ae4      	subs	r4, r4, r3
 8001b8a:	2701      	movs	r7, #1
 8001b8c:	1a24      	subs	r4, r4, r0
 8001b8e:	e5c0      	b.n	8001712 <__aeabi_dadd+0xa6>
 8001b90:	0762      	lsls	r2, r4, #29
 8001b92:	08c0      	lsrs	r0, r0, #3
 8001b94:	4302      	orrs	r2, r0
 8001b96:	08e4      	lsrs	r4, r4, #3
 8001b98:	e736      	b.n	8001a08 <__aeabi_dadd+0x39c>
 8001b9a:	0011      	movs	r1, r2
 8001b9c:	4653      	mov	r3, sl
 8001b9e:	3920      	subs	r1, #32
 8001ba0:	40cb      	lsrs	r3, r1
 8001ba2:	4699      	mov	r9, r3
 8001ba4:	2a20      	cmp	r2, #32
 8001ba6:	d006      	beq.n	8001bb6 <__aeabi_dadd+0x54a>
 8001ba8:	2140      	movs	r1, #64	@ 0x40
 8001baa:	4653      	mov	r3, sl
 8001bac:	1a8a      	subs	r2, r1, r2
 8001bae:	4093      	lsls	r3, r2
 8001bb0:	4662      	mov	r2, ip
 8001bb2:	431a      	orrs	r2, r3
 8001bb4:	4694      	mov	ip, r2
 8001bb6:	4665      	mov	r5, ip
 8001bb8:	1e6b      	subs	r3, r5, #1
 8001bba:	419d      	sbcs	r5, r3
 8001bbc:	464b      	mov	r3, r9
 8001bbe:	431d      	orrs	r5, r3
 8001bc0:	e659      	b.n	8001876 <__aeabi_dadd+0x20a>
 8001bc2:	0762      	lsls	r2, r4, #29
 8001bc4:	08c0      	lsrs	r0, r0, #3
 8001bc6:	4302      	orrs	r2, r0
 8001bc8:	08e4      	lsrs	r4, r4, #3
 8001bca:	e70d      	b.n	80019e8 <__aeabi_dadd+0x37c>
 8001bcc:	4653      	mov	r3, sl
 8001bce:	075a      	lsls	r2, r3, #29
 8001bd0:	4663      	mov	r3, ip
 8001bd2:	08d8      	lsrs	r0, r3, #3
 8001bd4:	4653      	mov	r3, sl
 8001bd6:	000e      	movs	r6, r1
 8001bd8:	4302      	orrs	r2, r0
 8001bda:	08dc      	lsrs	r4, r3, #3
 8001bdc:	e714      	b.n	8001a08 <__aeabi_dadd+0x39c>
 8001bde:	0015      	movs	r5, r2
 8001be0:	0026      	movs	r6, r4
 8001be2:	3d20      	subs	r5, #32
 8001be4:	40ee      	lsrs	r6, r5
 8001be6:	2a20      	cmp	r2, #32
 8001be8:	d003      	beq.n	8001bf2 <__aeabi_dadd+0x586>
 8001bea:	2540      	movs	r5, #64	@ 0x40
 8001bec:	1aaa      	subs	r2, r5, r2
 8001bee:	4094      	lsls	r4, r2
 8001bf0:	4320      	orrs	r0, r4
 8001bf2:	1e42      	subs	r2, r0, #1
 8001bf4:	4190      	sbcs	r0, r2
 8001bf6:	0005      	movs	r5, r0
 8001bf8:	4335      	orrs	r5, r6
 8001bfa:	e606      	b.n	800180a <__aeabi_dadd+0x19e>
 8001bfc:	2a00      	cmp	r2, #0
 8001bfe:	d07c      	beq.n	8001cfa <__aeabi_dadd+0x68e>
 8001c00:	4662      	mov	r2, ip
 8001c02:	4653      	mov	r3, sl
 8001c04:	08c0      	lsrs	r0, r0, #3
 8001c06:	431a      	orrs	r2, r3
 8001c08:	d100      	bne.n	8001c0c <__aeabi_dadd+0x5a0>
 8001c0a:	e6fa      	b.n	8001a02 <__aeabi_dadd+0x396>
 8001c0c:	0762      	lsls	r2, r4, #29
 8001c0e:	4310      	orrs	r0, r2
 8001c10:	2280      	movs	r2, #128	@ 0x80
 8001c12:	08e4      	lsrs	r4, r4, #3
 8001c14:	0312      	lsls	r2, r2, #12
 8001c16:	4214      	tst	r4, r2
 8001c18:	d008      	beq.n	8001c2c <__aeabi_dadd+0x5c0>
 8001c1a:	08d9      	lsrs	r1, r3, #3
 8001c1c:	4211      	tst	r1, r2
 8001c1e:	d105      	bne.n	8001c2c <__aeabi_dadd+0x5c0>
 8001c20:	4663      	mov	r3, ip
 8001c22:	08d8      	lsrs	r0, r3, #3
 8001c24:	4653      	mov	r3, sl
 8001c26:	000c      	movs	r4, r1
 8001c28:	075b      	lsls	r3, r3, #29
 8001c2a:	4318      	orrs	r0, r3
 8001c2c:	0f42      	lsrs	r2, r0, #29
 8001c2e:	00c0      	lsls	r0, r0, #3
 8001c30:	08c0      	lsrs	r0, r0, #3
 8001c32:	0752      	lsls	r2, r2, #29
 8001c34:	4302      	orrs	r2, r0
 8001c36:	e6e7      	b.n	8001a08 <__aeabi_dadd+0x39c>
 8001c38:	2a00      	cmp	r2, #0
 8001c3a:	d100      	bne.n	8001c3e <__aeabi_dadd+0x5d2>
 8001c3c:	e72d      	b.n	8001a9a <__aeabi_dadd+0x42e>
 8001c3e:	4663      	mov	r3, ip
 8001c40:	08d8      	lsrs	r0, r3, #3
 8001c42:	4653      	mov	r3, sl
 8001c44:	075a      	lsls	r2, r3, #29
 8001c46:	000e      	movs	r6, r1
 8001c48:	4302      	orrs	r2, r0
 8001c4a:	08dc      	lsrs	r4, r3, #3
 8001c4c:	e6cc      	b.n	80019e8 <__aeabi_dadd+0x37c>
 8001c4e:	4663      	mov	r3, ip
 8001c50:	1a1d      	subs	r5, r3, r0
 8001c52:	45ac      	cmp	ip, r5
 8001c54:	4192      	sbcs	r2, r2
 8001c56:	4653      	mov	r3, sl
 8001c58:	4252      	negs	r2, r2
 8001c5a:	1b1c      	subs	r4, r3, r4
 8001c5c:	000e      	movs	r6, r1
 8001c5e:	4688      	mov	r8, r1
 8001c60:	1aa4      	subs	r4, r4, r2
 8001c62:	3701      	adds	r7, #1
 8001c64:	e555      	b.n	8001712 <__aeabi_dadd+0xa6>
 8001c66:	4663      	mov	r3, ip
 8001c68:	08d9      	lsrs	r1, r3, #3
 8001c6a:	4653      	mov	r3, sl
 8001c6c:	075a      	lsls	r2, r3, #29
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	08dc      	lsrs	r4, r3, #3
 8001c72:	e6c9      	b.n	8001a08 <__aeabi_dadd+0x39c>
 8001c74:	4660      	mov	r0, ip
 8001c76:	4654      	mov	r4, sl
 8001c78:	e6d4      	b.n	8001a24 <__aeabi_dadd+0x3b8>
 8001c7a:	08c0      	lsrs	r0, r0, #3
 8001c7c:	2a00      	cmp	r2, #0
 8001c7e:	d100      	bne.n	8001c82 <__aeabi_dadd+0x616>
 8001c80:	e6bf      	b.n	8001a02 <__aeabi_dadd+0x396>
 8001c82:	0762      	lsls	r2, r4, #29
 8001c84:	4310      	orrs	r0, r2
 8001c86:	2280      	movs	r2, #128	@ 0x80
 8001c88:	08e4      	lsrs	r4, r4, #3
 8001c8a:	0312      	lsls	r2, r2, #12
 8001c8c:	4214      	tst	r4, r2
 8001c8e:	d0cd      	beq.n	8001c2c <__aeabi_dadd+0x5c0>
 8001c90:	08dd      	lsrs	r5, r3, #3
 8001c92:	4215      	tst	r5, r2
 8001c94:	d1ca      	bne.n	8001c2c <__aeabi_dadd+0x5c0>
 8001c96:	4663      	mov	r3, ip
 8001c98:	08d8      	lsrs	r0, r3, #3
 8001c9a:	4653      	mov	r3, sl
 8001c9c:	075b      	lsls	r3, r3, #29
 8001c9e:	000e      	movs	r6, r1
 8001ca0:	002c      	movs	r4, r5
 8001ca2:	4318      	orrs	r0, r3
 8001ca4:	e7c2      	b.n	8001c2c <__aeabi_dadd+0x5c0>
 8001ca6:	4663      	mov	r3, ip
 8001ca8:	08d9      	lsrs	r1, r3, #3
 8001caa:	4653      	mov	r3, sl
 8001cac:	075a      	lsls	r2, r3, #29
 8001cae:	430a      	orrs	r2, r1
 8001cb0:	08dc      	lsrs	r4, r3, #3
 8001cb2:	e699      	b.n	80019e8 <__aeabi_dadd+0x37c>
 8001cb4:	4663      	mov	r3, ip
 8001cb6:	08d8      	lsrs	r0, r3, #3
 8001cb8:	4653      	mov	r3, sl
 8001cba:	075a      	lsls	r2, r3, #29
 8001cbc:	000e      	movs	r6, r1
 8001cbe:	4302      	orrs	r2, r0
 8001cc0:	08dc      	lsrs	r4, r3, #3
 8001cc2:	e6a1      	b.n	8001a08 <__aeabi_dadd+0x39c>
 8001cc4:	0011      	movs	r1, r2
 8001cc6:	0027      	movs	r7, r4
 8001cc8:	3920      	subs	r1, #32
 8001cca:	40cf      	lsrs	r7, r1
 8001ccc:	2a20      	cmp	r2, #32
 8001cce:	d003      	beq.n	8001cd8 <__aeabi_dadd+0x66c>
 8001cd0:	2140      	movs	r1, #64	@ 0x40
 8001cd2:	1a8a      	subs	r2, r1, r2
 8001cd4:	4094      	lsls	r4, r2
 8001cd6:	4320      	orrs	r0, r4
 8001cd8:	1e42      	subs	r2, r0, #1
 8001cda:	4190      	sbcs	r0, r2
 8001cdc:	0005      	movs	r5, r0
 8001cde:	433d      	orrs	r5, r7
 8001ce0:	e651      	b.n	8001986 <__aeabi_dadd+0x31a>
 8001ce2:	000c      	movs	r4, r1
 8001ce4:	2500      	movs	r5, #0
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	e558      	b.n	800179c <__aeabi_dadd+0x130>
 8001cea:	4460      	add	r0, ip
 8001cec:	4560      	cmp	r0, ip
 8001cee:	4192      	sbcs	r2, r2
 8001cf0:	4454      	add	r4, sl
 8001cf2:	4252      	negs	r2, r2
 8001cf4:	0005      	movs	r5, r0
 8001cf6:	18a4      	adds	r4, r4, r2
 8001cf8:	e73a      	b.n	8001b70 <__aeabi_dadd+0x504>
 8001cfa:	4653      	mov	r3, sl
 8001cfc:	075a      	lsls	r2, r3, #29
 8001cfe:	4663      	mov	r3, ip
 8001d00:	08d9      	lsrs	r1, r3, #3
 8001d02:	4653      	mov	r3, sl
 8001d04:	430a      	orrs	r2, r1
 8001d06:	08dc      	lsrs	r4, r3, #3
 8001d08:	e67e      	b.n	8001a08 <__aeabi_dadd+0x39c>
 8001d0a:	001a      	movs	r2, r3
 8001d0c:	001c      	movs	r4, r3
 8001d0e:	432a      	orrs	r2, r5
 8001d10:	d000      	beq.n	8001d14 <__aeabi_dadd+0x6a8>
 8001d12:	e6ab      	b.n	8001a6c <__aeabi_dadd+0x400>
 8001d14:	e6c1      	b.n	8001a9a <__aeabi_dadd+0x42e>
 8001d16:	2120      	movs	r1, #32
 8001d18:	2500      	movs	r5, #0
 8001d1a:	1a09      	subs	r1, r1, r0
 8001d1c:	e519      	b.n	8001752 <__aeabi_dadd+0xe6>
 8001d1e:	2200      	movs	r2, #0
 8001d20:	2500      	movs	r5, #0
 8001d22:	4c01      	ldr	r4, [pc, #4]	@ (8001d28 <__aeabi_dadd+0x6bc>)
 8001d24:	e53a      	b.n	800179c <__aeabi_dadd+0x130>
 8001d26:	46c0      	nop			@ (mov r8, r8)
 8001d28:	000007ff 	.word	0x000007ff
 8001d2c:	ff7fffff 	.word	0xff7fffff
 8001d30:	000007fe 	.word	0x000007fe

08001d34 <__aeabi_ddiv>:
 8001d34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d36:	46de      	mov	lr, fp
 8001d38:	4645      	mov	r5, r8
 8001d3a:	4657      	mov	r7, sl
 8001d3c:	464e      	mov	r6, r9
 8001d3e:	b5e0      	push	{r5, r6, r7, lr}
 8001d40:	b087      	sub	sp, #28
 8001d42:	9200      	str	r2, [sp, #0]
 8001d44:	9301      	str	r3, [sp, #4]
 8001d46:	030b      	lsls	r3, r1, #12
 8001d48:	0b1b      	lsrs	r3, r3, #12
 8001d4a:	469b      	mov	fp, r3
 8001d4c:	0fca      	lsrs	r2, r1, #31
 8001d4e:	004b      	lsls	r3, r1, #1
 8001d50:	0004      	movs	r4, r0
 8001d52:	4680      	mov	r8, r0
 8001d54:	0d5b      	lsrs	r3, r3, #21
 8001d56:	9202      	str	r2, [sp, #8]
 8001d58:	d100      	bne.n	8001d5c <__aeabi_ddiv+0x28>
 8001d5a:	e16a      	b.n	8002032 <__aeabi_ddiv+0x2fe>
 8001d5c:	4ad4      	ldr	r2, [pc, #848]	@ (80020b0 <__aeabi_ddiv+0x37c>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d100      	bne.n	8001d64 <__aeabi_ddiv+0x30>
 8001d62:	e18c      	b.n	800207e <__aeabi_ddiv+0x34a>
 8001d64:	4659      	mov	r1, fp
 8001d66:	0f42      	lsrs	r2, r0, #29
 8001d68:	00c9      	lsls	r1, r1, #3
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	2180      	movs	r1, #128	@ 0x80
 8001d6e:	0409      	lsls	r1, r1, #16
 8001d70:	4311      	orrs	r1, r2
 8001d72:	00c2      	lsls	r2, r0, #3
 8001d74:	4690      	mov	r8, r2
 8001d76:	4acf      	ldr	r2, [pc, #828]	@ (80020b4 <__aeabi_ddiv+0x380>)
 8001d78:	4689      	mov	r9, r1
 8001d7a:	4692      	mov	sl, r2
 8001d7c:	449a      	add	sl, r3
 8001d7e:	2300      	movs	r3, #0
 8001d80:	2400      	movs	r4, #0
 8001d82:	9303      	str	r3, [sp, #12]
 8001d84:	9e00      	ldr	r6, [sp, #0]
 8001d86:	9f01      	ldr	r7, [sp, #4]
 8001d88:	033b      	lsls	r3, r7, #12
 8001d8a:	0b1b      	lsrs	r3, r3, #12
 8001d8c:	469b      	mov	fp, r3
 8001d8e:	007b      	lsls	r3, r7, #1
 8001d90:	0030      	movs	r0, r6
 8001d92:	0d5b      	lsrs	r3, r3, #21
 8001d94:	0ffd      	lsrs	r5, r7, #31
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d100      	bne.n	8001d9c <__aeabi_ddiv+0x68>
 8001d9a:	e128      	b.n	8001fee <__aeabi_ddiv+0x2ba>
 8001d9c:	4ac4      	ldr	r2, [pc, #784]	@ (80020b0 <__aeabi_ddiv+0x37c>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d100      	bne.n	8001da4 <__aeabi_ddiv+0x70>
 8001da2:	e177      	b.n	8002094 <__aeabi_ddiv+0x360>
 8001da4:	4659      	mov	r1, fp
 8001da6:	0f72      	lsrs	r2, r6, #29
 8001da8:	00c9      	lsls	r1, r1, #3
 8001daa:	430a      	orrs	r2, r1
 8001dac:	2180      	movs	r1, #128	@ 0x80
 8001dae:	0409      	lsls	r1, r1, #16
 8001db0:	4311      	orrs	r1, r2
 8001db2:	468b      	mov	fp, r1
 8001db4:	49bf      	ldr	r1, [pc, #764]	@ (80020b4 <__aeabi_ddiv+0x380>)
 8001db6:	00f2      	lsls	r2, r6, #3
 8001db8:	468c      	mov	ip, r1
 8001dba:	4651      	mov	r1, sl
 8001dbc:	4463      	add	r3, ip
 8001dbe:	1acb      	subs	r3, r1, r3
 8001dc0:	469a      	mov	sl, r3
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	9e02      	ldr	r6, [sp, #8]
 8001dc6:	406e      	eors	r6, r5
 8001dc8:	2c0f      	cmp	r4, #15
 8001dca:	d827      	bhi.n	8001e1c <__aeabi_ddiv+0xe8>
 8001dcc:	49ba      	ldr	r1, [pc, #744]	@ (80020b8 <__aeabi_ddiv+0x384>)
 8001dce:	00a4      	lsls	r4, r4, #2
 8001dd0:	5909      	ldr	r1, [r1, r4]
 8001dd2:	468f      	mov	pc, r1
 8001dd4:	46cb      	mov	fp, r9
 8001dd6:	4642      	mov	r2, r8
 8001dd8:	9e02      	ldr	r6, [sp, #8]
 8001dda:	9b03      	ldr	r3, [sp, #12]
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d016      	beq.n	8001e0e <__aeabi_ddiv+0xda>
 8001de0:	2b03      	cmp	r3, #3
 8001de2:	d100      	bne.n	8001de6 <__aeabi_ddiv+0xb2>
 8001de4:	e2a6      	b.n	8002334 <__aeabi_ddiv+0x600>
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d000      	beq.n	8001dec <__aeabi_ddiv+0xb8>
 8001dea:	e0df      	b.n	8001fac <__aeabi_ddiv+0x278>
 8001dec:	2200      	movs	r2, #0
 8001dee:	2300      	movs	r3, #0
 8001df0:	2400      	movs	r4, #0
 8001df2:	4690      	mov	r8, r2
 8001df4:	051b      	lsls	r3, r3, #20
 8001df6:	4323      	orrs	r3, r4
 8001df8:	07f6      	lsls	r6, r6, #31
 8001dfa:	4333      	orrs	r3, r6
 8001dfc:	4640      	mov	r0, r8
 8001dfe:	0019      	movs	r1, r3
 8001e00:	b007      	add	sp, #28
 8001e02:	bcf0      	pop	{r4, r5, r6, r7}
 8001e04:	46bb      	mov	fp, r7
 8001e06:	46b2      	mov	sl, r6
 8001e08:	46a9      	mov	r9, r5
 8001e0a:	46a0      	mov	r8, r4
 8001e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e0e:	2200      	movs	r2, #0
 8001e10:	2400      	movs	r4, #0
 8001e12:	4690      	mov	r8, r2
 8001e14:	4ba6      	ldr	r3, [pc, #664]	@ (80020b0 <__aeabi_ddiv+0x37c>)
 8001e16:	e7ed      	b.n	8001df4 <__aeabi_ddiv+0xc0>
 8001e18:	002e      	movs	r6, r5
 8001e1a:	e7df      	b.n	8001ddc <__aeabi_ddiv+0xa8>
 8001e1c:	45cb      	cmp	fp, r9
 8001e1e:	d200      	bcs.n	8001e22 <__aeabi_ddiv+0xee>
 8001e20:	e1d4      	b.n	80021cc <__aeabi_ddiv+0x498>
 8001e22:	d100      	bne.n	8001e26 <__aeabi_ddiv+0xf2>
 8001e24:	e1cf      	b.n	80021c6 <__aeabi_ddiv+0x492>
 8001e26:	2301      	movs	r3, #1
 8001e28:	425b      	negs	r3, r3
 8001e2a:	469c      	mov	ip, r3
 8001e2c:	4644      	mov	r4, r8
 8001e2e:	4648      	mov	r0, r9
 8001e30:	2700      	movs	r7, #0
 8001e32:	44e2      	add	sl, ip
 8001e34:	465b      	mov	r3, fp
 8001e36:	0e15      	lsrs	r5, r2, #24
 8001e38:	021b      	lsls	r3, r3, #8
 8001e3a:	431d      	orrs	r5, r3
 8001e3c:	0c19      	lsrs	r1, r3, #16
 8001e3e:	042b      	lsls	r3, r5, #16
 8001e40:	0212      	lsls	r2, r2, #8
 8001e42:	9500      	str	r5, [sp, #0]
 8001e44:	0c1d      	lsrs	r5, r3, #16
 8001e46:	4691      	mov	r9, r2
 8001e48:	9102      	str	r1, [sp, #8]
 8001e4a:	9503      	str	r5, [sp, #12]
 8001e4c:	f7fe fa06 	bl	800025c <__aeabi_uidivmod>
 8001e50:	0002      	movs	r2, r0
 8001e52:	436a      	muls	r2, r5
 8001e54:	040b      	lsls	r3, r1, #16
 8001e56:	0c21      	lsrs	r1, r4, #16
 8001e58:	4680      	mov	r8, r0
 8001e5a:	4319      	orrs	r1, r3
 8001e5c:	428a      	cmp	r2, r1
 8001e5e:	d909      	bls.n	8001e74 <__aeabi_ddiv+0x140>
 8001e60:	9d00      	ldr	r5, [sp, #0]
 8001e62:	2301      	movs	r3, #1
 8001e64:	46ac      	mov	ip, r5
 8001e66:	425b      	negs	r3, r3
 8001e68:	4461      	add	r1, ip
 8001e6a:	469c      	mov	ip, r3
 8001e6c:	44e0      	add	r8, ip
 8001e6e:	428d      	cmp	r5, r1
 8001e70:	d800      	bhi.n	8001e74 <__aeabi_ddiv+0x140>
 8001e72:	e1fb      	b.n	800226c <__aeabi_ddiv+0x538>
 8001e74:	1a88      	subs	r0, r1, r2
 8001e76:	9902      	ldr	r1, [sp, #8]
 8001e78:	f7fe f9f0 	bl	800025c <__aeabi_uidivmod>
 8001e7c:	9a03      	ldr	r2, [sp, #12]
 8001e7e:	0424      	lsls	r4, r4, #16
 8001e80:	4342      	muls	r2, r0
 8001e82:	0409      	lsls	r1, r1, #16
 8001e84:	0c24      	lsrs	r4, r4, #16
 8001e86:	0003      	movs	r3, r0
 8001e88:	430c      	orrs	r4, r1
 8001e8a:	42a2      	cmp	r2, r4
 8001e8c:	d906      	bls.n	8001e9c <__aeabi_ddiv+0x168>
 8001e8e:	9900      	ldr	r1, [sp, #0]
 8001e90:	3b01      	subs	r3, #1
 8001e92:	468c      	mov	ip, r1
 8001e94:	4464      	add	r4, ip
 8001e96:	42a1      	cmp	r1, r4
 8001e98:	d800      	bhi.n	8001e9c <__aeabi_ddiv+0x168>
 8001e9a:	e1e1      	b.n	8002260 <__aeabi_ddiv+0x52c>
 8001e9c:	1aa0      	subs	r0, r4, r2
 8001e9e:	4642      	mov	r2, r8
 8001ea0:	0412      	lsls	r2, r2, #16
 8001ea2:	431a      	orrs	r2, r3
 8001ea4:	4693      	mov	fp, r2
 8001ea6:	464b      	mov	r3, r9
 8001ea8:	4659      	mov	r1, fp
 8001eaa:	0c1b      	lsrs	r3, r3, #16
 8001eac:	001d      	movs	r5, r3
 8001eae:	9304      	str	r3, [sp, #16]
 8001eb0:	040b      	lsls	r3, r1, #16
 8001eb2:	4649      	mov	r1, r9
 8001eb4:	0409      	lsls	r1, r1, #16
 8001eb6:	0c09      	lsrs	r1, r1, #16
 8001eb8:	000c      	movs	r4, r1
 8001eba:	0c1b      	lsrs	r3, r3, #16
 8001ebc:	435c      	muls	r4, r3
 8001ebe:	0c12      	lsrs	r2, r2, #16
 8001ec0:	436b      	muls	r3, r5
 8001ec2:	4688      	mov	r8, r1
 8001ec4:	4351      	muls	r1, r2
 8001ec6:	436a      	muls	r2, r5
 8001ec8:	0c25      	lsrs	r5, r4, #16
 8001eca:	46ac      	mov	ip, r5
 8001ecc:	185b      	adds	r3, r3, r1
 8001ece:	4463      	add	r3, ip
 8001ed0:	4299      	cmp	r1, r3
 8001ed2:	d903      	bls.n	8001edc <__aeabi_ddiv+0x1a8>
 8001ed4:	2180      	movs	r1, #128	@ 0x80
 8001ed6:	0249      	lsls	r1, r1, #9
 8001ed8:	468c      	mov	ip, r1
 8001eda:	4462      	add	r2, ip
 8001edc:	0c19      	lsrs	r1, r3, #16
 8001ede:	0424      	lsls	r4, r4, #16
 8001ee0:	041b      	lsls	r3, r3, #16
 8001ee2:	0c24      	lsrs	r4, r4, #16
 8001ee4:	188a      	adds	r2, r1, r2
 8001ee6:	191c      	adds	r4, r3, r4
 8001ee8:	4290      	cmp	r0, r2
 8001eea:	d302      	bcc.n	8001ef2 <__aeabi_ddiv+0x1be>
 8001eec:	d116      	bne.n	8001f1c <__aeabi_ddiv+0x1e8>
 8001eee:	42a7      	cmp	r7, r4
 8001ef0:	d214      	bcs.n	8001f1c <__aeabi_ddiv+0x1e8>
 8001ef2:	465b      	mov	r3, fp
 8001ef4:	9d00      	ldr	r5, [sp, #0]
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	444f      	add	r7, r9
 8001efa:	9305      	str	r3, [sp, #20]
 8001efc:	454f      	cmp	r7, r9
 8001efe:	419b      	sbcs	r3, r3
 8001f00:	46ac      	mov	ip, r5
 8001f02:	425b      	negs	r3, r3
 8001f04:	4463      	add	r3, ip
 8001f06:	18c0      	adds	r0, r0, r3
 8001f08:	4285      	cmp	r5, r0
 8001f0a:	d300      	bcc.n	8001f0e <__aeabi_ddiv+0x1da>
 8001f0c:	e1a1      	b.n	8002252 <__aeabi_ddiv+0x51e>
 8001f0e:	4282      	cmp	r2, r0
 8001f10:	d900      	bls.n	8001f14 <__aeabi_ddiv+0x1e0>
 8001f12:	e1f6      	b.n	8002302 <__aeabi_ddiv+0x5ce>
 8001f14:	d100      	bne.n	8001f18 <__aeabi_ddiv+0x1e4>
 8001f16:	e1f1      	b.n	80022fc <__aeabi_ddiv+0x5c8>
 8001f18:	9b05      	ldr	r3, [sp, #20]
 8001f1a:	469b      	mov	fp, r3
 8001f1c:	1b3c      	subs	r4, r7, r4
 8001f1e:	42a7      	cmp	r7, r4
 8001f20:	41bf      	sbcs	r7, r7
 8001f22:	9d00      	ldr	r5, [sp, #0]
 8001f24:	1a80      	subs	r0, r0, r2
 8001f26:	427f      	negs	r7, r7
 8001f28:	1bc0      	subs	r0, r0, r7
 8001f2a:	4285      	cmp	r5, r0
 8001f2c:	d100      	bne.n	8001f30 <__aeabi_ddiv+0x1fc>
 8001f2e:	e1d0      	b.n	80022d2 <__aeabi_ddiv+0x59e>
 8001f30:	9902      	ldr	r1, [sp, #8]
 8001f32:	f7fe f993 	bl	800025c <__aeabi_uidivmod>
 8001f36:	9a03      	ldr	r2, [sp, #12]
 8001f38:	040b      	lsls	r3, r1, #16
 8001f3a:	4342      	muls	r2, r0
 8001f3c:	0c21      	lsrs	r1, r4, #16
 8001f3e:	0007      	movs	r7, r0
 8001f40:	4319      	orrs	r1, r3
 8001f42:	428a      	cmp	r2, r1
 8001f44:	d900      	bls.n	8001f48 <__aeabi_ddiv+0x214>
 8001f46:	e178      	b.n	800223a <__aeabi_ddiv+0x506>
 8001f48:	1a88      	subs	r0, r1, r2
 8001f4a:	9902      	ldr	r1, [sp, #8]
 8001f4c:	f7fe f986 	bl	800025c <__aeabi_uidivmod>
 8001f50:	9a03      	ldr	r2, [sp, #12]
 8001f52:	0424      	lsls	r4, r4, #16
 8001f54:	4342      	muls	r2, r0
 8001f56:	0409      	lsls	r1, r1, #16
 8001f58:	0c24      	lsrs	r4, r4, #16
 8001f5a:	0003      	movs	r3, r0
 8001f5c:	430c      	orrs	r4, r1
 8001f5e:	42a2      	cmp	r2, r4
 8001f60:	d900      	bls.n	8001f64 <__aeabi_ddiv+0x230>
 8001f62:	e15d      	b.n	8002220 <__aeabi_ddiv+0x4ec>
 8001f64:	4641      	mov	r1, r8
 8001f66:	1aa4      	subs	r4, r4, r2
 8001f68:	043a      	lsls	r2, r7, #16
 8001f6a:	431a      	orrs	r2, r3
 8001f6c:	9d04      	ldr	r5, [sp, #16]
 8001f6e:	0413      	lsls	r3, r2, #16
 8001f70:	0c1b      	lsrs	r3, r3, #16
 8001f72:	4359      	muls	r1, r3
 8001f74:	4647      	mov	r7, r8
 8001f76:	436b      	muls	r3, r5
 8001f78:	469c      	mov	ip, r3
 8001f7a:	0c10      	lsrs	r0, r2, #16
 8001f7c:	4347      	muls	r7, r0
 8001f7e:	0c0b      	lsrs	r3, r1, #16
 8001f80:	44bc      	add	ip, r7
 8001f82:	4463      	add	r3, ip
 8001f84:	4368      	muls	r0, r5
 8001f86:	429f      	cmp	r7, r3
 8001f88:	d903      	bls.n	8001f92 <__aeabi_ddiv+0x25e>
 8001f8a:	2580      	movs	r5, #128	@ 0x80
 8001f8c:	026d      	lsls	r5, r5, #9
 8001f8e:	46ac      	mov	ip, r5
 8001f90:	4460      	add	r0, ip
 8001f92:	0c1f      	lsrs	r7, r3, #16
 8001f94:	0409      	lsls	r1, r1, #16
 8001f96:	041b      	lsls	r3, r3, #16
 8001f98:	0c09      	lsrs	r1, r1, #16
 8001f9a:	183f      	adds	r7, r7, r0
 8001f9c:	185b      	adds	r3, r3, r1
 8001f9e:	42bc      	cmp	r4, r7
 8001fa0:	d200      	bcs.n	8001fa4 <__aeabi_ddiv+0x270>
 8001fa2:	e102      	b.n	80021aa <__aeabi_ddiv+0x476>
 8001fa4:	d100      	bne.n	8001fa8 <__aeabi_ddiv+0x274>
 8001fa6:	e0fd      	b.n	80021a4 <__aeabi_ddiv+0x470>
 8001fa8:	2301      	movs	r3, #1
 8001faa:	431a      	orrs	r2, r3
 8001fac:	4b43      	ldr	r3, [pc, #268]	@ (80020bc <__aeabi_ddiv+0x388>)
 8001fae:	4453      	add	r3, sl
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	dc00      	bgt.n	8001fb6 <__aeabi_ddiv+0x282>
 8001fb4:	e0ae      	b.n	8002114 <__aeabi_ddiv+0x3e0>
 8001fb6:	0751      	lsls	r1, r2, #29
 8001fb8:	d000      	beq.n	8001fbc <__aeabi_ddiv+0x288>
 8001fba:	e198      	b.n	80022ee <__aeabi_ddiv+0x5ba>
 8001fbc:	4659      	mov	r1, fp
 8001fbe:	01c9      	lsls	r1, r1, #7
 8001fc0:	d506      	bpl.n	8001fd0 <__aeabi_ddiv+0x29c>
 8001fc2:	4659      	mov	r1, fp
 8001fc4:	4b3e      	ldr	r3, [pc, #248]	@ (80020c0 <__aeabi_ddiv+0x38c>)
 8001fc6:	4019      	ands	r1, r3
 8001fc8:	2380      	movs	r3, #128	@ 0x80
 8001fca:	468b      	mov	fp, r1
 8001fcc:	00db      	lsls	r3, r3, #3
 8001fce:	4453      	add	r3, sl
 8001fd0:	493c      	ldr	r1, [pc, #240]	@ (80020c4 <__aeabi_ddiv+0x390>)
 8001fd2:	428b      	cmp	r3, r1
 8001fd4:	dd00      	ble.n	8001fd8 <__aeabi_ddiv+0x2a4>
 8001fd6:	e71a      	b.n	8001e0e <__aeabi_ddiv+0xda>
 8001fd8:	4659      	mov	r1, fp
 8001fda:	08d2      	lsrs	r2, r2, #3
 8001fdc:	0749      	lsls	r1, r1, #29
 8001fde:	4311      	orrs	r1, r2
 8001fe0:	465a      	mov	r2, fp
 8001fe2:	055b      	lsls	r3, r3, #21
 8001fe4:	0254      	lsls	r4, r2, #9
 8001fe6:	4688      	mov	r8, r1
 8001fe8:	0b24      	lsrs	r4, r4, #12
 8001fea:	0d5b      	lsrs	r3, r3, #21
 8001fec:	e702      	b.n	8001df4 <__aeabi_ddiv+0xc0>
 8001fee:	465a      	mov	r2, fp
 8001ff0:	9b00      	ldr	r3, [sp, #0]
 8001ff2:	431a      	orrs	r2, r3
 8001ff4:	d100      	bne.n	8001ff8 <__aeabi_ddiv+0x2c4>
 8001ff6:	e07e      	b.n	80020f6 <__aeabi_ddiv+0x3c2>
 8001ff8:	465b      	mov	r3, fp
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d100      	bne.n	8002000 <__aeabi_ddiv+0x2cc>
 8001ffe:	e100      	b.n	8002202 <__aeabi_ddiv+0x4ce>
 8002000:	4658      	mov	r0, fp
 8002002:	f001 fabb 	bl	800357c <__clzsi2>
 8002006:	0002      	movs	r2, r0
 8002008:	0003      	movs	r3, r0
 800200a:	3a0b      	subs	r2, #11
 800200c:	271d      	movs	r7, #29
 800200e:	9e00      	ldr	r6, [sp, #0]
 8002010:	1aba      	subs	r2, r7, r2
 8002012:	0019      	movs	r1, r3
 8002014:	4658      	mov	r0, fp
 8002016:	40d6      	lsrs	r6, r2
 8002018:	3908      	subs	r1, #8
 800201a:	4088      	lsls	r0, r1
 800201c:	0032      	movs	r2, r6
 800201e:	4302      	orrs	r2, r0
 8002020:	4693      	mov	fp, r2
 8002022:	9a00      	ldr	r2, [sp, #0]
 8002024:	408a      	lsls	r2, r1
 8002026:	4928      	ldr	r1, [pc, #160]	@ (80020c8 <__aeabi_ddiv+0x394>)
 8002028:	4453      	add	r3, sl
 800202a:	468a      	mov	sl, r1
 800202c:	449a      	add	sl, r3
 800202e:	2300      	movs	r3, #0
 8002030:	e6c8      	b.n	8001dc4 <__aeabi_ddiv+0x90>
 8002032:	465b      	mov	r3, fp
 8002034:	4303      	orrs	r3, r0
 8002036:	4699      	mov	r9, r3
 8002038:	d056      	beq.n	80020e8 <__aeabi_ddiv+0x3b4>
 800203a:	465b      	mov	r3, fp
 800203c:	2b00      	cmp	r3, #0
 800203e:	d100      	bne.n	8002042 <__aeabi_ddiv+0x30e>
 8002040:	e0cd      	b.n	80021de <__aeabi_ddiv+0x4aa>
 8002042:	4658      	mov	r0, fp
 8002044:	f001 fa9a 	bl	800357c <__clzsi2>
 8002048:	230b      	movs	r3, #11
 800204a:	425b      	negs	r3, r3
 800204c:	469c      	mov	ip, r3
 800204e:	0002      	movs	r2, r0
 8002050:	4484      	add	ip, r0
 8002052:	4666      	mov	r6, ip
 8002054:	231d      	movs	r3, #29
 8002056:	1b9b      	subs	r3, r3, r6
 8002058:	0026      	movs	r6, r4
 800205a:	0011      	movs	r1, r2
 800205c:	4658      	mov	r0, fp
 800205e:	40de      	lsrs	r6, r3
 8002060:	3908      	subs	r1, #8
 8002062:	4088      	lsls	r0, r1
 8002064:	0033      	movs	r3, r6
 8002066:	4303      	orrs	r3, r0
 8002068:	4699      	mov	r9, r3
 800206a:	0023      	movs	r3, r4
 800206c:	408b      	lsls	r3, r1
 800206e:	4698      	mov	r8, r3
 8002070:	4b16      	ldr	r3, [pc, #88]	@ (80020cc <__aeabi_ddiv+0x398>)
 8002072:	2400      	movs	r4, #0
 8002074:	1a9b      	subs	r3, r3, r2
 8002076:	469a      	mov	sl, r3
 8002078:	2300      	movs	r3, #0
 800207a:	9303      	str	r3, [sp, #12]
 800207c:	e682      	b.n	8001d84 <__aeabi_ddiv+0x50>
 800207e:	465a      	mov	r2, fp
 8002080:	4302      	orrs	r2, r0
 8002082:	4691      	mov	r9, r2
 8002084:	d12a      	bne.n	80020dc <__aeabi_ddiv+0x3a8>
 8002086:	2200      	movs	r2, #0
 8002088:	469a      	mov	sl, r3
 800208a:	2302      	movs	r3, #2
 800208c:	4690      	mov	r8, r2
 800208e:	2408      	movs	r4, #8
 8002090:	9303      	str	r3, [sp, #12]
 8002092:	e677      	b.n	8001d84 <__aeabi_ddiv+0x50>
 8002094:	465a      	mov	r2, fp
 8002096:	9b00      	ldr	r3, [sp, #0]
 8002098:	431a      	orrs	r2, r3
 800209a:	4b0d      	ldr	r3, [pc, #52]	@ (80020d0 <__aeabi_ddiv+0x39c>)
 800209c:	469c      	mov	ip, r3
 800209e:	44e2      	add	sl, ip
 80020a0:	2a00      	cmp	r2, #0
 80020a2:	d117      	bne.n	80020d4 <__aeabi_ddiv+0x3a0>
 80020a4:	2302      	movs	r3, #2
 80020a6:	431c      	orrs	r4, r3
 80020a8:	2300      	movs	r3, #0
 80020aa:	469b      	mov	fp, r3
 80020ac:	3302      	adds	r3, #2
 80020ae:	e689      	b.n	8001dc4 <__aeabi_ddiv+0x90>
 80020b0:	000007ff 	.word	0x000007ff
 80020b4:	fffffc01 	.word	0xfffffc01
 80020b8:	0800ff54 	.word	0x0800ff54
 80020bc:	000003ff 	.word	0x000003ff
 80020c0:	feffffff 	.word	0xfeffffff
 80020c4:	000007fe 	.word	0x000007fe
 80020c8:	000003f3 	.word	0x000003f3
 80020cc:	fffffc0d 	.word	0xfffffc0d
 80020d0:	fffff801 	.word	0xfffff801
 80020d4:	2303      	movs	r3, #3
 80020d6:	0032      	movs	r2, r6
 80020d8:	431c      	orrs	r4, r3
 80020da:	e673      	b.n	8001dc4 <__aeabi_ddiv+0x90>
 80020dc:	469a      	mov	sl, r3
 80020de:	2303      	movs	r3, #3
 80020e0:	46d9      	mov	r9, fp
 80020e2:	240c      	movs	r4, #12
 80020e4:	9303      	str	r3, [sp, #12]
 80020e6:	e64d      	b.n	8001d84 <__aeabi_ddiv+0x50>
 80020e8:	2300      	movs	r3, #0
 80020ea:	4698      	mov	r8, r3
 80020ec:	469a      	mov	sl, r3
 80020ee:	3301      	adds	r3, #1
 80020f0:	2404      	movs	r4, #4
 80020f2:	9303      	str	r3, [sp, #12]
 80020f4:	e646      	b.n	8001d84 <__aeabi_ddiv+0x50>
 80020f6:	2301      	movs	r3, #1
 80020f8:	431c      	orrs	r4, r3
 80020fa:	2300      	movs	r3, #0
 80020fc:	469b      	mov	fp, r3
 80020fe:	3301      	adds	r3, #1
 8002100:	e660      	b.n	8001dc4 <__aeabi_ddiv+0x90>
 8002102:	2300      	movs	r3, #0
 8002104:	2480      	movs	r4, #128	@ 0x80
 8002106:	4698      	mov	r8, r3
 8002108:	2600      	movs	r6, #0
 800210a:	4b92      	ldr	r3, [pc, #584]	@ (8002354 <__aeabi_ddiv+0x620>)
 800210c:	0324      	lsls	r4, r4, #12
 800210e:	e671      	b.n	8001df4 <__aeabi_ddiv+0xc0>
 8002110:	2201      	movs	r2, #1
 8002112:	4252      	negs	r2, r2
 8002114:	2101      	movs	r1, #1
 8002116:	1ac9      	subs	r1, r1, r3
 8002118:	2938      	cmp	r1, #56	@ 0x38
 800211a:	dd00      	ble.n	800211e <__aeabi_ddiv+0x3ea>
 800211c:	e666      	b.n	8001dec <__aeabi_ddiv+0xb8>
 800211e:	291f      	cmp	r1, #31
 8002120:	dc00      	bgt.n	8002124 <__aeabi_ddiv+0x3f0>
 8002122:	e0ab      	b.n	800227c <__aeabi_ddiv+0x548>
 8002124:	201f      	movs	r0, #31
 8002126:	4240      	negs	r0, r0
 8002128:	1ac3      	subs	r3, r0, r3
 800212a:	4658      	mov	r0, fp
 800212c:	40d8      	lsrs	r0, r3
 800212e:	0003      	movs	r3, r0
 8002130:	2920      	cmp	r1, #32
 8002132:	d004      	beq.n	800213e <__aeabi_ddiv+0x40a>
 8002134:	4658      	mov	r0, fp
 8002136:	4988      	ldr	r1, [pc, #544]	@ (8002358 <__aeabi_ddiv+0x624>)
 8002138:	4451      	add	r1, sl
 800213a:	4088      	lsls	r0, r1
 800213c:	4302      	orrs	r2, r0
 800213e:	1e51      	subs	r1, r2, #1
 8002140:	418a      	sbcs	r2, r1
 8002142:	431a      	orrs	r2, r3
 8002144:	2307      	movs	r3, #7
 8002146:	0019      	movs	r1, r3
 8002148:	2400      	movs	r4, #0
 800214a:	4011      	ands	r1, r2
 800214c:	4213      	tst	r3, r2
 800214e:	d00c      	beq.n	800216a <__aeabi_ddiv+0x436>
 8002150:	230f      	movs	r3, #15
 8002152:	4013      	ands	r3, r2
 8002154:	2b04      	cmp	r3, #4
 8002156:	d100      	bne.n	800215a <__aeabi_ddiv+0x426>
 8002158:	e0f9      	b.n	800234e <__aeabi_ddiv+0x61a>
 800215a:	1d11      	adds	r1, r2, #4
 800215c:	4291      	cmp	r1, r2
 800215e:	419b      	sbcs	r3, r3
 8002160:	000a      	movs	r2, r1
 8002162:	425b      	negs	r3, r3
 8002164:	0759      	lsls	r1, r3, #29
 8002166:	025b      	lsls	r3, r3, #9
 8002168:	0b1c      	lsrs	r4, r3, #12
 800216a:	08d2      	lsrs	r2, r2, #3
 800216c:	430a      	orrs	r2, r1
 800216e:	4690      	mov	r8, r2
 8002170:	2300      	movs	r3, #0
 8002172:	e63f      	b.n	8001df4 <__aeabi_ddiv+0xc0>
 8002174:	2480      	movs	r4, #128	@ 0x80
 8002176:	464b      	mov	r3, r9
 8002178:	0324      	lsls	r4, r4, #12
 800217a:	4223      	tst	r3, r4
 800217c:	d009      	beq.n	8002192 <__aeabi_ddiv+0x45e>
 800217e:	465b      	mov	r3, fp
 8002180:	4223      	tst	r3, r4
 8002182:	d106      	bne.n	8002192 <__aeabi_ddiv+0x45e>
 8002184:	431c      	orrs	r4, r3
 8002186:	0324      	lsls	r4, r4, #12
 8002188:	002e      	movs	r6, r5
 800218a:	4690      	mov	r8, r2
 800218c:	4b71      	ldr	r3, [pc, #452]	@ (8002354 <__aeabi_ddiv+0x620>)
 800218e:	0b24      	lsrs	r4, r4, #12
 8002190:	e630      	b.n	8001df4 <__aeabi_ddiv+0xc0>
 8002192:	2480      	movs	r4, #128	@ 0x80
 8002194:	464b      	mov	r3, r9
 8002196:	0324      	lsls	r4, r4, #12
 8002198:	431c      	orrs	r4, r3
 800219a:	0324      	lsls	r4, r4, #12
 800219c:	9e02      	ldr	r6, [sp, #8]
 800219e:	4b6d      	ldr	r3, [pc, #436]	@ (8002354 <__aeabi_ddiv+0x620>)
 80021a0:	0b24      	lsrs	r4, r4, #12
 80021a2:	e627      	b.n	8001df4 <__aeabi_ddiv+0xc0>
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d100      	bne.n	80021aa <__aeabi_ddiv+0x476>
 80021a8:	e700      	b.n	8001fac <__aeabi_ddiv+0x278>
 80021aa:	9800      	ldr	r0, [sp, #0]
 80021ac:	1e51      	subs	r1, r2, #1
 80021ae:	4684      	mov	ip, r0
 80021b0:	4464      	add	r4, ip
 80021b2:	4284      	cmp	r4, r0
 80021b4:	d200      	bcs.n	80021b8 <__aeabi_ddiv+0x484>
 80021b6:	e084      	b.n	80022c2 <__aeabi_ddiv+0x58e>
 80021b8:	42bc      	cmp	r4, r7
 80021ba:	d200      	bcs.n	80021be <__aeabi_ddiv+0x48a>
 80021bc:	e0ae      	b.n	800231c <__aeabi_ddiv+0x5e8>
 80021be:	d100      	bne.n	80021c2 <__aeabi_ddiv+0x48e>
 80021c0:	e0c1      	b.n	8002346 <__aeabi_ddiv+0x612>
 80021c2:	000a      	movs	r2, r1
 80021c4:	e6f0      	b.n	8001fa8 <__aeabi_ddiv+0x274>
 80021c6:	4542      	cmp	r2, r8
 80021c8:	d900      	bls.n	80021cc <__aeabi_ddiv+0x498>
 80021ca:	e62c      	b.n	8001e26 <__aeabi_ddiv+0xf2>
 80021cc:	464b      	mov	r3, r9
 80021ce:	07dc      	lsls	r4, r3, #31
 80021d0:	0858      	lsrs	r0, r3, #1
 80021d2:	4643      	mov	r3, r8
 80021d4:	085b      	lsrs	r3, r3, #1
 80021d6:	431c      	orrs	r4, r3
 80021d8:	4643      	mov	r3, r8
 80021da:	07df      	lsls	r7, r3, #31
 80021dc:	e62a      	b.n	8001e34 <__aeabi_ddiv+0x100>
 80021de:	f001 f9cd 	bl	800357c <__clzsi2>
 80021e2:	2315      	movs	r3, #21
 80021e4:	469c      	mov	ip, r3
 80021e6:	4484      	add	ip, r0
 80021e8:	0002      	movs	r2, r0
 80021ea:	4663      	mov	r3, ip
 80021ec:	3220      	adds	r2, #32
 80021ee:	2b1c      	cmp	r3, #28
 80021f0:	dc00      	bgt.n	80021f4 <__aeabi_ddiv+0x4c0>
 80021f2:	e72e      	b.n	8002052 <__aeabi_ddiv+0x31e>
 80021f4:	0023      	movs	r3, r4
 80021f6:	3808      	subs	r0, #8
 80021f8:	4083      	lsls	r3, r0
 80021fa:	4699      	mov	r9, r3
 80021fc:	2300      	movs	r3, #0
 80021fe:	4698      	mov	r8, r3
 8002200:	e736      	b.n	8002070 <__aeabi_ddiv+0x33c>
 8002202:	f001 f9bb 	bl	800357c <__clzsi2>
 8002206:	0002      	movs	r2, r0
 8002208:	0003      	movs	r3, r0
 800220a:	3215      	adds	r2, #21
 800220c:	3320      	adds	r3, #32
 800220e:	2a1c      	cmp	r2, #28
 8002210:	dc00      	bgt.n	8002214 <__aeabi_ddiv+0x4e0>
 8002212:	e6fb      	b.n	800200c <__aeabi_ddiv+0x2d8>
 8002214:	9900      	ldr	r1, [sp, #0]
 8002216:	3808      	subs	r0, #8
 8002218:	4081      	lsls	r1, r0
 800221a:	2200      	movs	r2, #0
 800221c:	468b      	mov	fp, r1
 800221e:	e702      	b.n	8002026 <__aeabi_ddiv+0x2f2>
 8002220:	9900      	ldr	r1, [sp, #0]
 8002222:	3b01      	subs	r3, #1
 8002224:	468c      	mov	ip, r1
 8002226:	4464      	add	r4, ip
 8002228:	42a1      	cmp	r1, r4
 800222a:	d900      	bls.n	800222e <__aeabi_ddiv+0x4fa>
 800222c:	e69a      	b.n	8001f64 <__aeabi_ddiv+0x230>
 800222e:	42a2      	cmp	r2, r4
 8002230:	d800      	bhi.n	8002234 <__aeabi_ddiv+0x500>
 8002232:	e697      	b.n	8001f64 <__aeabi_ddiv+0x230>
 8002234:	1e83      	subs	r3, r0, #2
 8002236:	4464      	add	r4, ip
 8002238:	e694      	b.n	8001f64 <__aeabi_ddiv+0x230>
 800223a:	46ac      	mov	ip, r5
 800223c:	4461      	add	r1, ip
 800223e:	3f01      	subs	r7, #1
 8002240:	428d      	cmp	r5, r1
 8002242:	d900      	bls.n	8002246 <__aeabi_ddiv+0x512>
 8002244:	e680      	b.n	8001f48 <__aeabi_ddiv+0x214>
 8002246:	428a      	cmp	r2, r1
 8002248:	d800      	bhi.n	800224c <__aeabi_ddiv+0x518>
 800224a:	e67d      	b.n	8001f48 <__aeabi_ddiv+0x214>
 800224c:	1e87      	subs	r7, r0, #2
 800224e:	4461      	add	r1, ip
 8002250:	e67a      	b.n	8001f48 <__aeabi_ddiv+0x214>
 8002252:	4285      	cmp	r5, r0
 8002254:	d000      	beq.n	8002258 <__aeabi_ddiv+0x524>
 8002256:	e65f      	b.n	8001f18 <__aeabi_ddiv+0x1e4>
 8002258:	45b9      	cmp	r9, r7
 800225a:	d900      	bls.n	800225e <__aeabi_ddiv+0x52a>
 800225c:	e65c      	b.n	8001f18 <__aeabi_ddiv+0x1e4>
 800225e:	e656      	b.n	8001f0e <__aeabi_ddiv+0x1da>
 8002260:	42a2      	cmp	r2, r4
 8002262:	d800      	bhi.n	8002266 <__aeabi_ddiv+0x532>
 8002264:	e61a      	b.n	8001e9c <__aeabi_ddiv+0x168>
 8002266:	1e83      	subs	r3, r0, #2
 8002268:	4464      	add	r4, ip
 800226a:	e617      	b.n	8001e9c <__aeabi_ddiv+0x168>
 800226c:	428a      	cmp	r2, r1
 800226e:	d800      	bhi.n	8002272 <__aeabi_ddiv+0x53e>
 8002270:	e600      	b.n	8001e74 <__aeabi_ddiv+0x140>
 8002272:	46ac      	mov	ip, r5
 8002274:	1e83      	subs	r3, r0, #2
 8002276:	4698      	mov	r8, r3
 8002278:	4461      	add	r1, ip
 800227a:	e5fb      	b.n	8001e74 <__aeabi_ddiv+0x140>
 800227c:	4837      	ldr	r0, [pc, #220]	@ (800235c <__aeabi_ddiv+0x628>)
 800227e:	0014      	movs	r4, r2
 8002280:	4450      	add	r0, sl
 8002282:	4082      	lsls	r2, r0
 8002284:	465b      	mov	r3, fp
 8002286:	0017      	movs	r7, r2
 8002288:	4083      	lsls	r3, r0
 800228a:	40cc      	lsrs	r4, r1
 800228c:	1e7a      	subs	r2, r7, #1
 800228e:	4197      	sbcs	r7, r2
 8002290:	4323      	orrs	r3, r4
 8002292:	433b      	orrs	r3, r7
 8002294:	001a      	movs	r2, r3
 8002296:	465b      	mov	r3, fp
 8002298:	40cb      	lsrs	r3, r1
 800229a:	0751      	lsls	r1, r2, #29
 800229c:	d009      	beq.n	80022b2 <__aeabi_ddiv+0x57e>
 800229e:	210f      	movs	r1, #15
 80022a0:	4011      	ands	r1, r2
 80022a2:	2904      	cmp	r1, #4
 80022a4:	d005      	beq.n	80022b2 <__aeabi_ddiv+0x57e>
 80022a6:	1d11      	adds	r1, r2, #4
 80022a8:	4291      	cmp	r1, r2
 80022aa:	4192      	sbcs	r2, r2
 80022ac:	4252      	negs	r2, r2
 80022ae:	189b      	adds	r3, r3, r2
 80022b0:	000a      	movs	r2, r1
 80022b2:	0219      	lsls	r1, r3, #8
 80022b4:	d400      	bmi.n	80022b8 <__aeabi_ddiv+0x584>
 80022b6:	e755      	b.n	8002164 <__aeabi_ddiv+0x430>
 80022b8:	2200      	movs	r2, #0
 80022ba:	2301      	movs	r3, #1
 80022bc:	2400      	movs	r4, #0
 80022be:	4690      	mov	r8, r2
 80022c0:	e598      	b.n	8001df4 <__aeabi_ddiv+0xc0>
 80022c2:	000a      	movs	r2, r1
 80022c4:	42bc      	cmp	r4, r7
 80022c6:	d000      	beq.n	80022ca <__aeabi_ddiv+0x596>
 80022c8:	e66e      	b.n	8001fa8 <__aeabi_ddiv+0x274>
 80022ca:	454b      	cmp	r3, r9
 80022cc:	d000      	beq.n	80022d0 <__aeabi_ddiv+0x59c>
 80022ce:	e66b      	b.n	8001fa8 <__aeabi_ddiv+0x274>
 80022d0:	e66c      	b.n	8001fac <__aeabi_ddiv+0x278>
 80022d2:	4b23      	ldr	r3, [pc, #140]	@ (8002360 <__aeabi_ddiv+0x62c>)
 80022d4:	4a23      	ldr	r2, [pc, #140]	@ (8002364 <__aeabi_ddiv+0x630>)
 80022d6:	4453      	add	r3, sl
 80022d8:	4592      	cmp	sl, r2
 80022da:	da00      	bge.n	80022de <__aeabi_ddiv+0x5aa>
 80022dc:	e718      	b.n	8002110 <__aeabi_ddiv+0x3dc>
 80022de:	2101      	movs	r1, #1
 80022e0:	4249      	negs	r1, r1
 80022e2:	1d0a      	adds	r2, r1, #4
 80022e4:	428a      	cmp	r2, r1
 80022e6:	4189      	sbcs	r1, r1
 80022e8:	4249      	negs	r1, r1
 80022ea:	448b      	add	fp, r1
 80022ec:	e666      	b.n	8001fbc <__aeabi_ddiv+0x288>
 80022ee:	210f      	movs	r1, #15
 80022f0:	4011      	ands	r1, r2
 80022f2:	2904      	cmp	r1, #4
 80022f4:	d100      	bne.n	80022f8 <__aeabi_ddiv+0x5c4>
 80022f6:	e661      	b.n	8001fbc <__aeabi_ddiv+0x288>
 80022f8:	0011      	movs	r1, r2
 80022fa:	e7f2      	b.n	80022e2 <__aeabi_ddiv+0x5ae>
 80022fc:	42bc      	cmp	r4, r7
 80022fe:	d800      	bhi.n	8002302 <__aeabi_ddiv+0x5ce>
 8002300:	e60a      	b.n	8001f18 <__aeabi_ddiv+0x1e4>
 8002302:	2302      	movs	r3, #2
 8002304:	425b      	negs	r3, r3
 8002306:	469c      	mov	ip, r3
 8002308:	9900      	ldr	r1, [sp, #0]
 800230a:	444f      	add	r7, r9
 800230c:	454f      	cmp	r7, r9
 800230e:	419b      	sbcs	r3, r3
 8002310:	44e3      	add	fp, ip
 8002312:	468c      	mov	ip, r1
 8002314:	425b      	negs	r3, r3
 8002316:	4463      	add	r3, ip
 8002318:	18c0      	adds	r0, r0, r3
 800231a:	e5ff      	b.n	8001f1c <__aeabi_ddiv+0x1e8>
 800231c:	4649      	mov	r1, r9
 800231e:	9d00      	ldr	r5, [sp, #0]
 8002320:	0048      	lsls	r0, r1, #1
 8002322:	4548      	cmp	r0, r9
 8002324:	4189      	sbcs	r1, r1
 8002326:	46ac      	mov	ip, r5
 8002328:	4249      	negs	r1, r1
 800232a:	4461      	add	r1, ip
 800232c:	4681      	mov	r9, r0
 800232e:	3a02      	subs	r2, #2
 8002330:	1864      	adds	r4, r4, r1
 8002332:	e7c7      	b.n	80022c4 <__aeabi_ddiv+0x590>
 8002334:	2480      	movs	r4, #128	@ 0x80
 8002336:	465b      	mov	r3, fp
 8002338:	0324      	lsls	r4, r4, #12
 800233a:	431c      	orrs	r4, r3
 800233c:	0324      	lsls	r4, r4, #12
 800233e:	4690      	mov	r8, r2
 8002340:	4b04      	ldr	r3, [pc, #16]	@ (8002354 <__aeabi_ddiv+0x620>)
 8002342:	0b24      	lsrs	r4, r4, #12
 8002344:	e556      	b.n	8001df4 <__aeabi_ddiv+0xc0>
 8002346:	4599      	cmp	r9, r3
 8002348:	d3e8      	bcc.n	800231c <__aeabi_ddiv+0x5e8>
 800234a:	000a      	movs	r2, r1
 800234c:	e7bd      	b.n	80022ca <__aeabi_ddiv+0x596>
 800234e:	2300      	movs	r3, #0
 8002350:	e708      	b.n	8002164 <__aeabi_ddiv+0x430>
 8002352:	46c0      	nop			@ (mov r8, r8)
 8002354:	000007ff 	.word	0x000007ff
 8002358:	0000043e 	.word	0x0000043e
 800235c:	0000041e 	.word	0x0000041e
 8002360:	000003ff 	.word	0x000003ff
 8002364:	fffffc02 	.word	0xfffffc02

08002368 <__eqdf2>:
 8002368:	b5f0      	push	{r4, r5, r6, r7, lr}
 800236a:	4657      	mov	r7, sl
 800236c:	46de      	mov	lr, fp
 800236e:	464e      	mov	r6, r9
 8002370:	4645      	mov	r5, r8
 8002372:	b5e0      	push	{r5, r6, r7, lr}
 8002374:	000d      	movs	r5, r1
 8002376:	0004      	movs	r4, r0
 8002378:	0fe8      	lsrs	r0, r5, #31
 800237a:	4683      	mov	fp, r0
 800237c:	0309      	lsls	r1, r1, #12
 800237e:	0fd8      	lsrs	r0, r3, #31
 8002380:	0b09      	lsrs	r1, r1, #12
 8002382:	4682      	mov	sl, r0
 8002384:	4819      	ldr	r0, [pc, #100]	@ (80023ec <__eqdf2+0x84>)
 8002386:	468c      	mov	ip, r1
 8002388:	031f      	lsls	r7, r3, #12
 800238a:	0069      	lsls	r1, r5, #1
 800238c:	005e      	lsls	r6, r3, #1
 800238e:	0d49      	lsrs	r1, r1, #21
 8002390:	0b3f      	lsrs	r7, r7, #12
 8002392:	0d76      	lsrs	r6, r6, #21
 8002394:	4281      	cmp	r1, r0
 8002396:	d018      	beq.n	80023ca <__eqdf2+0x62>
 8002398:	4286      	cmp	r6, r0
 800239a:	d00f      	beq.n	80023bc <__eqdf2+0x54>
 800239c:	2001      	movs	r0, #1
 800239e:	42b1      	cmp	r1, r6
 80023a0:	d10d      	bne.n	80023be <__eqdf2+0x56>
 80023a2:	45bc      	cmp	ip, r7
 80023a4:	d10b      	bne.n	80023be <__eqdf2+0x56>
 80023a6:	4294      	cmp	r4, r2
 80023a8:	d109      	bne.n	80023be <__eqdf2+0x56>
 80023aa:	45d3      	cmp	fp, sl
 80023ac:	d01c      	beq.n	80023e8 <__eqdf2+0x80>
 80023ae:	2900      	cmp	r1, #0
 80023b0:	d105      	bne.n	80023be <__eqdf2+0x56>
 80023b2:	4660      	mov	r0, ip
 80023b4:	4320      	orrs	r0, r4
 80023b6:	1e43      	subs	r3, r0, #1
 80023b8:	4198      	sbcs	r0, r3
 80023ba:	e000      	b.n	80023be <__eqdf2+0x56>
 80023bc:	2001      	movs	r0, #1
 80023be:	bcf0      	pop	{r4, r5, r6, r7}
 80023c0:	46bb      	mov	fp, r7
 80023c2:	46b2      	mov	sl, r6
 80023c4:	46a9      	mov	r9, r5
 80023c6:	46a0      	mov	r8, r4
 80023c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023ca:	2001      	movs	r0, #1
 80023cc:	428e      	cmp	r6, r1
 80023ce:	d1f6      	bne.n	80023be <__eqdf2+0x56>
 80023d0:	4661      	mov	r1, ip
 80023d2:	4339      	orrs	r1, r7
 80023d4:	000f      	movs	r7, r1
 80023d6:	4317      	orrs	r7, r2
 80023d8:	4327      	orrs	r7, r4
 80023da:	d1f0      	bne.n	80023be <__eqdf2+0x56>
 80023dc:	465b      	mov	r3, fp
 80023de:	4652      	mov	r2, sl
 80023e0:	1a98      	subs	r0, r3, r2
 80023e2:	1e43      	subs	r3, r0, #1
 80023e4:	4198      	sbcs	r0, r3
 80023e6:	e7ea      	b.n	80023be <__eqdf2+0x56>
 80023e8:	2000      	movs	r0, #0
 80023ea:	e7e8      	b.n	80023be <__eqdf2+0x56>
 80023ec:	000007ff 	.word	0x000007ff

080023f0 <__gedf2>:
 80023f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023f2:	4657      	mov	r7, sl
 80023f4:	464e      	mov	r6, r9
 80023f6:	4645      	mov	r5, r8
 80023f8:	46de      	mov	lr, fp
 80023fa:	b5e0      	push	{r5, r6, r7, lr}
 80023fc:	000d      	movs	r5, r1
 80023fe:	030f      	lsls	r7, r1, #12
 8002400:	0b39      	lsrs	r1, r7, #12
 8002402:	b083      	sub	sp, #12
 8002404:	0004      	movs	r4, r0
 8002406:	4680      	mov	r8, r0
 8002408:	9101      	str	r1, [sp, #4]
 800240a:	0058      	lsls	r0, r3, #1
 800240c:	0fe9      	lsrs	r1, r5, #31
 800240e:	4f31      	ldr	r7, [pc, #196]	@ (80024d4 <__gedf2+0xe4>)
 8002410:	0d40      	lsrs	r0, r0, #21
 8002412:	468c      	mov	ip, r1
 8002414:	006e      	lsls	r6, r5, #1
 8002416:	0319      	lsls	r1, r3, #12
 8002418:	4682      	mov	sl, r0
 800241a:	4691      	mov	r9, r2
 800241c:	0d76      	lsrs	r6, r6, #21
 800241e:	0b09      	lsrs	r1, r1, #12
 8002420:	0fd8      	lsrs	r0, r3, #31
 8002422:	42be      	cmp	r6, r7
 8002424:	d01f      	beq.n	8002466 <__gedf2+0x76>
 8002426:	45ba      	cmp	sl, r7
 8002428:	d00f      	beq.n	800244a <__gedf2+0x5a>
 800242a:	2e00      	cmp	r6, #0
 800242c:	d12f      	bne.n	800248e <__gedf2+0x9e>
 800242e:	4655      	mov	r5, sl
 8002430:	9e01      	ldr	r6, [sp, #4]
 8002432:	4334      	orrs	r4, r6
 8002434:	2d00      	cmp	r5, #0
 8002436:	d127      	bne.n	8002488 <__gedf2+0x98>
 8002438:	430a      	orrs	r2, r1
 800243a:	d03a      	beq.n	80024b2 <__gedf2+0xc2>
 800243c:	2c00      	cmp	r4, #0
 800243e:	d145      	bne.n	80024cc <__gedf2+0xdc>
 8002440:	2800      	cmp	r0, #0
 8002442:	d11a      	bne.n	800247a <__gedf2+0x8a>
 8002444:	2001      	movs	r0, #1
 8002446:	4240      	negs	r0, r0
 8002448:	e017      	b.n	800247a <__gedf2+0x8a>
 800244a:	4311      	orrs	r1, r2
 800244c:	d13b      	bne.n	80024c6 <__gedf2+0xd6>
 800244e:	2e00      	cmp	r6, #0
 8002450:	d102      	bne.n	8002458 <__gedf2+0x68>
 8002452:	9f01      	ldr	r7, [sp, #4]
 8002454:	4327      	orrs	r7, r4
 8002456:	d0f3      	beq.n	8002440 <__gedf2+0x50>
 8002458:	4584      	cmp	ip, r0
 800245a:	d109      	bne.n	8002470 <__gedf2+0x80>
 800245c:	4663      	mov	r3, ip
 800245e:	2b00      	cmp	r3, #0
 8002460:	d0f0      	beq.n	8002444 <__gedf2+0x54>
 8002462:	4660      	mov	r0, ip
 8002464:	e009      	b.n	800247a <__gedf2+0x8a>
 8002466:	9f01      	ldr	r7, [sp, #4]
 8002468:	4327      	orrs	r7, r4
 800246a:	d12c      	bne.n	80024c6 <__gedf2+0xd6>
 800246c:	45b2      	cmp	sl, r6
 800246e:	d024      	beq.n	80024ba <__gedf2+0xca>
 8002470:	4663      	mov	r3, ip
 8002472:	2002      	movs	r0, #2
 8002474:	3b01      	subs	r3, #1
 8002476:	4018      	ands	r0, r3
 8002478:	3801      	subs	r0, #1
 800247a:	b003      	add	sp, #12
 800247c:	bcf0      	pop	{r4, r5, r6, r7}
 800247e:	46bb      	mov	fp, r7
 8002480:	46b2      	mov	sl, r6
 8002482:	46a9      	mov	r9, r5
 8002484:	46a0      	mov	r8, r4
 8002486:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002488:	2c00      	cmp	r4, #0
 800248a:	d0d9      	beq.n	8002440 <__gedf2+0x50>
 800248c:	e7e4      	b.n	8002458 <__gedf2+0x68>
 800248e:	4654      	mov	r4, sl
 8002490:	2c00      	cmp	r4, #0
 8002492:	d0ed      	beq.n	8002470 <__gedf2+0x80>
 8002494:	4584      	cmp	ip, r0
 8002496:	d1eb      	bne.n	8002470 <__gedf2+0x80>
 8002498:	4556      	cmp	r6, sl
 800249a:	dce9      	bgt.n	8002470 <__gedf2+0x80>
 800249c:	dbde      	blt.n	800245c <__gedf2+0x6c>
 800249e:	9b01      	ldr	r3, [sp, #4]
 80024a0:	428b      	cmp	r3, r1
 80024a2:	d8e5      	bhi.n	8002470 <__gedf2+0x80>
 80024a4:	d1da      	bne.n	800245c <__gedf2+0x6c>
 80024a6:	45c8      	cmp	r8, r9
 80024a8:	d8e2      	bhi.n	8002470 <__gedf2+0x80>
 80024aa:	2000      	movs	r0, #0
 80024ac:	45c8      	cmp	r8, r9
 80024ae:	d2e4      	bcs.n	800247a <__gedf2+0x8a>
 80024b0:	e7d4      	b.n	800245c <__gedf2+0x6c>
 80024b2:	2000      	movs	r0, #0
 80024b4:	2c00      	cmp	r4, #0
 80024b6:	d0e0      	beq.n	800247a <__gedf2+0x8a>
 80024b8:	e7da      	b.n	8002470 <__gedf2+0x80>
 80024ba:	4311      	orrs	r1, r2
 80024bc:	d103      	bne.n	80024c6 <__gedf2+0xd6>
 80024be:	4584      	cmp	ip, r0
 80024c0:	d1d6      	bne.n	8002470 <__gedf2+0x80>
 80024c2:	2000      	movs	r0, #0
 80024c4:	e7d9      	b.n	800247a <__gedf2+0x8a>
 80024c6:	2002      	movs	r0, #2
 80024c8:	4240      	negs	r0, r0
 80024ca:	e7d6      	b.n	800247a <__gedf2+0x8a>
 80024cc:	4584      	cmp	ip, r0
 80024ce:	d0e6      	beq.n	800249e <__gedf2+0xae>
 80024d0:	e7ce      	b.n	8002470 <__gedf2+0x80>
 80024d2:	46c0      	nop			@ (mov r8, r8)
 80024d4:	000007ff 	.word	0x000007ff

080024d8 <__ledf2>:
 80024d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024da:	4657      	mov	r7, sl
 80024dc:	464e      	mov	r6, r9
 80024de:	4645      	mov	r5, r8
 80024e0:	46de      	mov	lr, fp
 80024e2:	b5e0      	push	{r5, r6, r7, lr}
 80024e4:	000d      	movs	r5, r1
 80024e6:	030f      	lsls	r7, r1, #12
 80024e8:	0004      	movs	r4, r0
 80024ea:	4680      	mov	r8, r0
 80024ec:	0fe8      	lsrs	r0, r5, #31
 80024ee:	0b39      	lsrs	r1, r7, #12
 80024f0:	4684      	mov	ip, r0
 80024f2:	b083      	sub	sp, #12
 80024f4:	0058      	lsls	r0, r3, #1
 80024f6:	4f30      	ldr	r7, [pc, #192]	@ (80025b8 <__ledf2+0xe0>)
 80024f8:	0d40      	lsrs	r0, r0, #21
 80024fa:	9101      	str	r1, [sp, #4]
 80024fc:	031e      	lsls	r6, r3, #12
 80024fe:	0069      	lsls	r1, r5, #1
 8002500:	4682      	mov	sl, r0
 8002502:	4691      	mov	r9, r2
 8002504:	0d49      	lsrs	r1, r1, #21
 8002506:	0b36      	lsrs	r6, r6, #12
 8002508:	0fd8      	lsrs	r0, r3, #31
 800250a:	42b9      	cmp	r1, r7
 800250c:	d020      	beq.n	8002550 <__ledf2+0x78>
 800250e:	45ba      	cmp	sl, r7
 8002510:	d00f      	beq.n	8002532 <__ledf2+0x5a>
 8002512:	2900      	cmp	r1, #0
 8002514:	d12b      	bne.n	800256e <__ledf2+0x96>
 8002516:	9901      	ldr	r1, [sp, #4]
 8002518:	430c      	orrs	r4, r1
 800251a:	4651      	mov	r1, sl
 800251c:	2900      	cmp	r1, #0
 800251e:	d137      	bne.n	8002590 <__ledf2+0xb8>
 8002520:	4332      	orrs	r2, r6
 8002522:	d038      	beq.n	8002596 <__ledf2+0xbe>
 8002524:	2c00      	cmp	r4, #0
 8002526:	d144      	bne.n	80025b2 <__ledf2+0xda>
 8002528:	2800      	cmp	r0, #0
 800252a:	d119      	bne.n	8002560 <__ledf2+0x88>
 800252c:	2001      	movs	r0, #1
 800252e:	4240      	negs	r0, r0
 8002530:	e016      	b.n	8002560 <__ledf2+0x88>
 8002532:	4316      	orrs	r6, r2
 8002534:	d113      	bne.n	800255e <__ledf2+0x86>
 8002536:	2900      	cmp	r1, #0
 8002538:	d102      	bne.n	8002540 <__ledf2+0x68>
 800253a:	9f01      	ldr	r7, [sp, #4]
 800253c:	4327      	orrs	r7, r4
 800253e:	d0f3      	beq.n	8002528 <__ledf2+0x50>
 8002540:	4584      	cmp	ip, r0
 8002542:	d020      	beq.n	8002586 <__ledf2+0xae>
 8002544:	4663      	mov	r3, ip
 8002546:	2002      	movs	r0, #2
 8002548:	3b01      	subs	r3, #1
 800254a:	4018      	ands	r0, r3
 800254c:	3801      	subs	r0, #1
 800254e:	e007      	b.n	8002560 <__ledf2+0x88>
 8002550:	9f01      	ldr	r7, [sp, #4]
 8002552:	4327      	orrs	r7, r4
 8002554:	d103      	bne.n	800255e <__ledf2+0x86>
 8002556:	458a      	cmp	sl, r1
 8002558:	d1f4      	bne.n	8002544 <__ledf2+0x6c>
 800255a:	4316      	orrs	r6, r2
 800255c:	d01f      	beq.n	800259e <__ledf2+0xc6>
 800255e:	2002      	movs	r0, #2
 8002560:	b003      	add	sp, #12
 8002562:	bcf0      	pop	{r4, r5, r6, r7}
 8002564:	46bb      	mov	fp, r7
 8002566:	46b2      	mov	sl, r6
 8002568:	46a9      	mov	r9, r5
 800256a:	46a0      	mov	r8, r4
 800256c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800256e:	4654      	mov	r4, sl
 8002570:	2c00      	cmp	r4, #0
 8002572:	d0e7      	beq.n	8002544 <__ledf2+0x6c>
 8002574:	4584      	cmp	ip, r0
 8002576:	d1e5      	bne.n	8002544 <__ledf2+0x6c>
 8002578:	4551      	cmp	r1, sl
 800257a:	dce3      	bgt.n	8002544 <__ledf2+0x6c>
 800257c:	db03      	blt.n	8002586 <__ledf2+0xae>
 800257e:	9b01      	ldr	r3, [sp, #4]
 8002580:	42b3      	cmp	r3, r6
 8002582:	d8df      	bhi.n	8002544 <__ledf2+0x6c>
 8002584:	d00f      	beq.n	80025a6 <__ledf2+0xce>
 8002586:	4663      	mov	r3, ip
 8002588:	2b00      	cmp	r3, #0
 800258a:	d0cf      	beq.n	800252c <__ledf2+0x54>
 800258c:	4660      	mov	r0, ip
 800258e:	e7e7      	b.n	8002560 <__ledf2+0x88>
 8002590:	2c00      	cmp	r4, #0
 8002592:	d0c9      	beq.n	8002528 <__ledf2+0x50>
 8002594:	e7d4      	b.n	8002540 <__ledf2+0x68>
 8002596:	2000      	movs	r0, #0
 8002598:	2c00      	cmp	r4, #0
 800259a:	d0e1      	beq.n	8002560 <__ledf2+0x88>
 800259c:	e7d2      	b.n	8002544 <__ledf2+0x6c>
 800259e:	4584      	cmp	ip, r0
 80025a0:	d1d0      	bne.n	8002544 <__ledf2+0x6c>
 80025a2:	2000      	movs	r0, #0
 80025a4:	e7dc      	b.n	8002560 <__ledf2+0x88>
 80025a6:	45c8      	cmp	r8, r9
 80025a8:	d8cc      	bhi.n	8002544 <__ledf2+0x6c>
 80025aa:	2000      	movs	r0, #0
 80025ac:	45c8      	cmp	r8, r9
 80025ae:	d2d7      	bcs.n	8002560 <__ledf2+0x88>
 80025b0:	e7e9      	b.n	8002586 <__ledf2+0xae>
 80025b2:	4584      	cmp	ip, r0
 80025b4:	d0e3      	beq.n	800257e <__ledf2+0xa6>
 80025b6:	e7c5      	b.n	8002544 <__ledf2+0x6c>
 80025b8:	000007ff 	.word	0x000007ff

080025bc <__aeabi_dmul>:
 80025bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025be:	4657      	mov	r7, sl
 80025c0:	46de      	mov	lr, fp
 80025c2:	464e      	mov	r6, r9
 80025c4:	4645      	mov	r5, r8
 80025c6:	b5e0      	push	{r5, r6, r7, lr}
 80025c8:	001f      	movs	r7, r3
 80025ca:	030b      	lsls	r3, r1, #12
 80025cc:	0b1b      	lsrs	r3, r3, #12
 80025ce:	0016      	movs	r6, r2
 80025d0:	469a      	mov	sl, r3
 80025d2:	0fca      	lsrs	r2, r1, #31
 80025d4:	004b      	lsls	r3, r1, #1
 80025d6:	0004      	movs	r4, r0
 80025d8:	4693      	mov	fp, r2
 80025da:	b087      	sub	sp, #28
 80025dc:	0d5b      	lsrs	r3, r3, #21
 80025de:	d100      	bne.n	80025e2 <__aeabi_dmul+0x26>
 80025e0:	e0d5      	b.n	800278e <__aeabi_dmul+0x1d2>
 80025e2:	4abb      	ldr	r2, [pc, #748]	@ (80028d0 <__aeabi_dmul+0x314>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d100      	bne.n	80025ea <__aeabi_dmul+0x2e>
 80025e8:	e0f8      	b.n	80027dc <__aeabi_dmul+0x220>
 80025ea:	4651      	mov	r1, sl
 80025ec:	0f42      	lsrs	r2, r0, #29
 80025ee:	00c9      	lsls	r1, r1, #3
 80025f0:	430a      	orrs	r2, r1
 80025f2:	2180      	movs	r1, #128	@ 0x80
 80025f4:	0409      	lsls	r1, r1, #16
 80025f6:	4311      	orrs	r1, r2
 80025f8:	00c2      	lsls	r2, r0, #3
 80025fa:	4691      	mov	r9, r2
 80025fc:	4ab5      	ldr	r2, [pc, #724]	@ (80028d4 <__aeabi_dmul+0x318>)
 80025fe:	468a      	mov	sl, r1
 8002600:	189d      	adds	r5, r3, r2
 8002602:	2300      	movs	r3, #0
 8002604:	4698      	mov	r8, r3
 8002606:	9302      	str	r3, [sp, #8]
 8002608:	033c      	lsls	r4, r7, #12
 800260a:	007b      	lsls	r3, r7, #1
 800260c:	0ffa      	lsrs	r2, r7, #31
 800260e:	0030      	movs	r0, r6
 8002610:	0b24      	lsrs	r4, r4, #12
 8002612:	0d5b      	lsrs	r3, r3, #21
 8002614:	9200      	str	r2, [sp, #0]
 8002616:	d100      	bne.n	800261a <__aeabi_dmul+0x5e>
 8002618:	e096      	b.n	8002748 <__aeabi_dmul+0x18c>
 800261a:	4aad      	ldr	r2, [pc, #692]	@ (80028d0 <__aeabi_dmul+0x314>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d031      	beq.n	8002684 <__aeabi_dmul+0xc8>
 8002620:	0f72      	lsrs	r2, r6, #29
 8002622:	00e4      	lsls	r4, r4, #3
 8002624:	4322      	orrs	r2, r4
 8002626:	2480      	movs	r4, #128	@ 0x80
 8002628:	0424      	lsls	r4, r4, #16
 800262a:	4314      	orrs	r4, r2
 800262c:	4aa9      	ldr	r2, [pc, #676]	@ (80028d4 <__aeabi_dmul+0x318>)
 800262e:	00f0      	lsls	r0, r6, #3
 8002630:	4694      	mov	ip, r2
 8002632:	4463      	add	r3, ip
 8002634:	195b      	adds	r3, r3, r5
 8002636:	1c5a      	adds	r2, r3, #1
 8002638:	9201      	str	r2, [sp, #4]
 800263a:	4642      	mov	r2, r8
 800263c:	2600      	movs	r6, #0
 800263e:	2a0a      	cmp	r2, #10
 8002640:	dc42      	bgt.n	80026c8 <__aeabi_dmul+0x10c>
 8002642:	465a      	mov	r2, fp
 8002644:	9900      	ldr	r1, [sp, #0]
 8002646:	404a      	eors	r2, r1
 8002648:	4693      	mov	fp, r2
 800264a:	4642      	mov	r2, r8
 800264c:	2a02      	cmp	r2, #2
 800264e:	dc32      	bgt.n	80026b6 <__aeabi_dmul+0xfa>
 8002650:	3a01      	subs	r2, #1
 8002652:	2a01      	cmp	r2, #1
 8002654:	d900      	bls.n	8002658 <__aeabi_dmul+0x9c>
 8002656:	e149      	b.n	80028ec <__aeabi_dmul+0x330>
 8002658:	2e02      	cmp	r6, #2
 800265a:	d100      	bne.n	800265e <__aeabi_dmul+0xa2>
 800265c:	e0ca      	b.n	80027f4 <__aeabi_dmul+0x238>
 800265e:	2e01      	cmp	r6, #1
 8002660:	d13d      	bne.n	80026de <__aeabi_dmul+0x122>
 8002662:	2300      	movs	r3, #0
 8002664:	2400      	movs	r4, #0
 8002666:	2200      	movs	r2, #0
 8002668:	0010      	movs	r0, r2
 800266a:	465a      	mov	r2, fp
 800266c:	051b      	lsls	r3, r3, #20
 800266e:	4323      	orrs	r3, r4
 8002670:	07d2      	lsls	r2, r2, #31
 8002672:	4313      	orrs	r3, r2
 8002674:	0019      	movs	r1, r3
 8002676:	b007      	add	sp, #28
 8002678:	bcf0      	pop	{r4, r5, r6, r7}
 800267a:	46bb      	mov	fp, r7
 800267c:	46b2      	mov	sl, r6
 800267e:	46a9      	mov	r9, r5
 8002680:	46a0      	mov	r8, r4
 8002682:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002684:	4b92      	ldr	r3, [pc, #584]	@ (80028d0 <__aeabi_dmul+0x314>)
 8002686:	4326      	orrs	r6, r4
 8002688:	18eb      	adds	r3, r5, r3
 800268a:	2e00      	cmp	r6, #0
 800268c:	d100      	bne.n	8002690 <__aeabi_dmul+0xd4>
 800268e:	e0bb      	b.n	8002808 <__aeabi_dmul+0x24c>
 8002690:	2203      	movs	r2, #3
 8002692:	4641      	mov	r1, r8
 8002694:	4311      	orrs	r1, r2
 8002696:	465a      	mov	r2, fp
 8002698:	4688      	mov	r8, r1
 800269a:	9900      	ldr	r1, [sp, #0]
 800269c:	404a      	eors	r2, r1
 800269e:	2180      	movs	r1, #128	@ 0x80
 80026a0:	0109      	lsls	r1, r1, #4
 80026a2:	468c      	mov	ip, r1
 80026a4:	0029      	movs	r1, r5
 80026a6:	4461      	add	r1, ip
 80026a8:	9101      	str	r1, [sp, #4]
 80026aa:	4641      	mov	r1, r8
 80026ac:	290a      	cmp	r1, #10
 80026ae:	dd00      	ble.n	80026b2 <__aeabi_dmul+0xf6>
 80026b0:	e233      	b.n	8002b1a <__aeabi_dmul+0x55e>
 80026b2:	4693      	mov	fp, r2
 80026b4:	2603      	movs	r6, #3
 80026b6:	4642      	mov	r2, r8
 80026b8:	2701      	movs	r7, #1
 80026ba:	4097      	lsls	r7, r2
 80026bc:	21a6      	movs	r1, #166	@ 0xa6
 80026be:	003a      	movs	r2, r7
 80026c0:	00c9      	lsls	r1, r1, #3
 80026c2:	400a      	ands	r2, r1
 80026c4:	420f      	tst	r7, r1
 80026c6:	d031      	beq.n	800272c <__aeabi_dmul+0x170>
 80026c8:	9e02      	ldr	r6, [sp, #8]
 80026ca:	2e02      	cmp	r6, #2
 80026cc:	d100      	bne.n	80026d0 <__aeabi_dmul+0x114>
 80026ce:	e235      	b.n	8002b3c <__aeabi_dmul+0x580>
 80026d0:	2e03      	cmp	r6, #3
 80026d2:	d100      	bne.n	80026d6 <__aeabi_dmul+0x11a>
 80026d4:	e1d2      	b.n	8002a7c <__aeabi_dmul+0x4c0>
 80026d6:	4654      	mov	r4, sl
 80026d8:	4648      	mov	r0, r9
 80026da:	2e01      	cmp	r6, #1
 80026dc:	d0c1      	beq.n	8002662 <__aeabi_dmul+0xa6>
 80026de:	9a01      	ldr	r2, [sp, #4]
 80026e0:	4b7d      	ldr	r3, [pc, #500]	@ (80028d8 <__aeabi_dmul+0x31c>)
 80026e2:	4694      	mov	ip, r2
 80026e4:	4463      	add	r3, ip
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	dc00      	bgt.n	80026ec <__aeabi_dmul+0x130>
 80026ea:	e0c0      	b.n	800286e <__aeabi_dmul+0x2b2>
 80026ec:	0742      	lsls	r2, r0, #29
 80026ee:	d009      	beq.n	8002704 <__aeabi_dmul+0x148>
 80026f0:	220f      	movs	r2, #15
 80026f2:	4002      	ands	r2, r0
 80026f4:	2a04      	cmp	r2, #4
 80026f6:	d005      	beq.n	8002704 <__aeabi_dmul+0x148>
 80026f8:	1d02      	adds	r2, r0, #4
 80026fa:	4282      	cmp	r2, r0
 80026fc:	4180      	sbcs	r0, r0
 80026fe:	4240      	negs	r0, r0
 8002700:	1824      	adds	r4, r4, r0
 8002702:	0010      	movs	r0, r2
 8002704:	01e2      	lsls	r2, r4, #7
 8002706:	d506      	bpl.n	8002716 <__aeabi_dmul+0x15a>
 8002708:	4b74      	ldr	r3, [pc, #464]	@ (80028dc <__aeabi_dmul+0x320>)
 800270a:	9a01      	ldr	r2, [sp, #4]
 800270c:	401c      	ands	r4, r3
 800270e:	2380      	movs	r3, #128	@ 0x80
 8002710:	4694      	mov	ip, r2
 8002712:	00db      	lsls	r3, r3, #3
 8002714:	4463      	add	r3, ip
 8002716:	4a72      	ldr	r2, [pc, #456]	@ (80028e0 <__aeabi_dmul+0x324>)
 8002718:	4293      	cmp	r3, r2
 800271a:	dc6b      	bgt.n	80027f4 <__aeabi_dmul+0x238>
 800271c:	0762      	lsls	r2, r4, #29
 800271e:	08c0      	lsrs	r0, r0, #3
 8002720:	0264      	lsls	r4, r4, #9
 8002722:	055b      	lsls	r3, r3, #21
 8002724:	4302      	orrs	r2, r0
 8002726:	0b24      	lsrs	r4, r4, #12
 8002728:	0d5b      	lsrs	r3, r3, #21
 800272a:	e79d      	b.n	8002668 <__aeabi_dmul+0xac>
 800272c:	2190      	movs	r1, #144	@ 0x90
 800272e:	0089      	lsls	r1, r1, #2
 8002730:	420f      	tst	r7, r1
 8002732:	d163      	bne.n	80027fc <__aeabi_dmul+0x240>
 8002734:	2288      	movs	r2, #136	@ 0x88
 8002736:	423a      	tst	r2, r7
 8002738:	d100      	bne.n	800273c <__aeabi_dmul+0x180>
 800273a:	e0d7      	b.n	80028ec <__aeabi_dmul+0x330>
 800273c:	9b00      	ldr	r3, [sp, #0]
 800273e:	46a2      	mov	sl, r4
 8002740:	469b      	mov	fp, r3
 8002742:	4681      	mov	r9, r0
 8002744:	9602      	str	r6, [sp, #8]
 8002746:	e7bf      	b.n	80026c8 <__aeabi_dmul+0x10c>
 8002748:	0023      	movs	r3, r4
 800274a:	4333      	orrs	r3, r6
 800274c:	d100      	bne.n	8002750 <__aeabi_dmul+0x194>
 800274e:	e07f      	b.n	8002850 <__aeabi_dmul+0x294>
 8002750:	2c00      	cmp	r4, #0
 8002752:	d100      	bne.n	8002756 <__aeabi_dmul+0x19a>
 8002754:	e1ad      	b.n	8002ab2 <__aeabi_dmul+0x4f6>
 8002756:	0020      	movs	r0, r4
 8002758:	f000 ff10 	bl	800357c <__clzsi2>
 800275c:	0002      	movs	r2, r0
 800275e:	0003      	movs	r3, r0
 8002760:	3a0b      	subs	r2, #11
 8002762:	201d      	movs	r0, #29
 8002764:	0019      	movs	r1, r3
 8002766:	1a82      	subs	r2, r0, r2
 8002768:	0030      	movs	r0, r6
 800276a:	3908      	subs	r1, #8
 800276c:	40d0      	lsrs	r0, r2
 800276e:	408c      	lsls	r4, r1
 8002770:	4304      	orrs	r4, r0
 8002772:	0030      	movs	r0, r6
 8002774:	4088      	lsls	r0, r1
 8002776:	4a5b      	ldr	r2, [pc, #364]	@ (80028e4 <__aeabi_dmul+0x328>)
 8002778:	1aeb      	subs	r3, r5, r3
 800277a:	4694      	mov	ip, r2
 800277c:	4463      	add	r3, ip
 800277e:	1c5a      	adds	r2, r3, #1
 8002780:	9201      	str	r2, [sp, #4]
 8002782:	4642      	mov	r2, r8
 8002784:	2600      	movs	r6, #0
 8002786:	2a0a      	cmp	r2, #10
 8002788:	dc00      	bgt.n	800278c <__aeabi_dmul+0x1d0>
 800278a:	e75a      	b.n	8002642 <__aeabi_dmul+0x86>
 800278c:	e79c      	b.n	80026c8 <__aeabi_dmul+0x10c>
 800278e:	4653      	mov	r3, sl
 8002790:	4303      	orrs	r3, r0
 8002792:	4699      	mov	r9, r3
 8002794:	d054      	beq.n	8002840 <__aeabi_dmul+0x284>
 8002796:	4653      	mov	r3, sl
 8002798:	2b00      	cmp	r3, #0
 800279a:	d100      	bne.n	800279e <__aeabi_dmul+0x1e2>
 800279c:	e177      	b.n	8002a8e <__aeabi_dmul+0x4d2>
 800279e:	4650      	mov	r0, sl
 80027a0:	f000 feec 	bl	800357c <__clzsi2>
 80027a4:	230b      	movs	r3, #11
 80027a6:	425b      	negs	r3, r3
 80027a8:	469c      	mov	ip, r3
 80027aa:	0002      	movs	r2, r0
 80027ac:	4484      	add	ip, r0
 80027ae:	0011      	movs	r1, r2
 80027b0:	4650      	mov	r0, sl
 80027b2:	3908      	subs	r1, #8
 80027b4:	4088      	lsls	r0, r1
 80027b6:	231d      	movs	r3, #29
 80027b8:	4680      	mov	r8, r0
 80027ba:	4660      	mov	r0, ip
 80027bc:	1a1b      	subs	r3, r3, r0
 80027be:	0020      	movs	r0, r4
 80027c0:	40d8      	lsrs	r0, r3
 80027c2:	0003      	movs	r3, r0
 80027c4:	4640      	mov	r0, r8
 80027c6:	4303      	orrs	r3, r0
 80027c8:	469a      	mov	sl, r3
 80027ca:	0023      	movs	r3, r4
 80027cc:	408b      	lsls	r3, r1
 80027ce:	4699      	mov	r9, r3
 80027d0:	2300      	movs	r3, #0
 80027d2:	4d44      	ldr	r5, [pc, #272]	@ (80028e4 <__aeabi_dmul+0x328>)
 80027d4:	4698      	mov	r8, r3
 80027d6:	1aad      	subs	r5, r5, r2
 80027d8:	9302      	str	r3, [sp, #8]
 80027da:	e715      	b.n	8002608 <__aeabi_dmul+0x4c>
 80027dc:	4652      	mov	r2, sl
 80027de:	4302      	orrs	r2, r0
 80027e0:	4691      	mov	r9, r2
 80027e2:	d126      	bne.n	8002832 <__aeabi_dmul+0x276>
 80027e4:	2200      	movs	r2, #0
 80027e6:	001d      	movs	r5, r3
 80027e8:	2302      	movs	r3, #2
 80027ea:	4692      	mov	sl, r2
 80027ec:	3208      	adds	r2, #8
 80027ee:	4690      	mov	r8, r2
 80027f0:	9302      	str	r3, [sp, #8]
 80027f2:	e709      	b.n	8002608 <__aeabi_dmul+0x4c>
 80027f4:	2400      	movs	r4, #0
 80027f6:	2200      	movs	r2, #0
 80027f8:	4b35      	ldr	r3, [pc, #212]	@ (80028d0 <__aeabi_dmul+0x314>)
 80027fa:	e735      	b.n	8002668 <__aeabi_dmul+0xac>
 80027fc:	2300      	movs	r3, #0
 80027fe:	2480      	movs	r4, #128	@ 0x80
 8002800:	469b      	mov	fp, r3
 8002802:	0324      	lsls	r4, r4, #12
 8002804:	4b32      	ldr	r3, [pc, #200]	@ (80028d0 <__aeabi_dmul+0x314>)
 8002806:	e72f      	b.n	8002668 <__aeabi_dmul+0xac>
 8002808:	2202      	movs	r2, #2
 800280a:	4641      	mov	r1, r8
 800280c:	4311      	orrs	r1, r2
 800280e:	2280      	movs	r2, #128	@ 0x80
 8002810:	0112      	lsls	r2, r2, #4
 8002812:	4694      	mov	ip, r2
 8002814:	002a      	movs	r2, r5
 8002816:	4462      	add	r2, ip
 8002818:	4688      	mov	r8, r1
 800281a:	9201      	str	r2, [sp, #4]
 800281c:	290a      	cmp	r1, #10
 800281e:	dd00      	ble.n	8002822 <__aeabi_dmul+0x266>
 8002820:	e752      	b.n	80026c8 <__aeabi_dmul+0x10c>
 8002822:	465a      	mov	r2, fp
 8002824:	2000      	movs	r0, #0
 8002826:	9900      	ldr	r1, [sp, #0]
 8002828:	0004      	movs	r4, r0
 800282a:	404a      	eors	r2, r1
 800282c:	4693      	mov	fp, r2
 800282e:	2602      	movs	r6, #2
 8002830:	e70b      	b.n	800264a <__aeabi_dmul+0x8e>
 8002832:	220c      	movs	r2, #12
 8002834:	001d      	movs	r5, r3
 8002836:	2303      	movs	r3, #3
 8002838:	4681      	mov	r9, r0
 800283a:	4690      	mov	r8, r2
 800283c:	9302      	str	r3, [sp, #8]
 800283e:	e6e3      	b.n	8002608 <__aeabi_dmul+0x4c>
 8002840:	2300      	movs	r3, #0
 8002842:	469a      	mov	sl, r3
 8002844:	3304      	adds	r3, #4
 8002846:	4698      	mov	r8, r3
 8002848:	3b03      	subs	r3, #3
 800284a:	2500      	movs	r5, #0
 800284c:	9302      	str	r3, [sp, #8]
 800284e:	e6db      	b.n	8002608 <__aeabi_dmul+0x4c>
 8002850:	4642      	mov	r2, r8
 8002852:	3301      	adds	r3, #1
 8002854:	431a      	orrs	r2, r3
 8002856:	002b      	movs	r3, r5
 8002858:	4690      	mov	r8, r2
 800285a:	1c5a      	adds	r2, r3, #1
 800285c:	9201      	str	r2, [sp, #4]
 800285e:	4642      	mov	r2, r8
 8002860:	2400      	movs	r4, #0
 8002862:	2000      	movs	r0, #0
 8002864:	2601      	movs	r6, #1
 8002866:	2a0a      	cmp	r2, #10
 8002868:	dc00      	bgt.n	800286c <__aeabi_dmul+0x2b0>
 800286a:	e6ea      	b.n	8002642 <__aeabi_dmul+0x86>
 800286c:	e72c      	b.n	80026c8 <__aeabi_dmul+0x10c>
 800286e:	2201      	movs	r2, #1
 8002870:	1ad2      	subs	r2, r2, r3
 8002872:	2a38      	cmp	r2, #56	@ 0x38
 8002874:	dd00      	ble.n	8002878 <__aeabi_dmul+0x2bc>
 8002876:	e6f4      	b.n	8002662 <__aeabi_dmul+0xa6>
 8002878:	2a1f      	cmp	r2, #31
 800287a:	dc00      	bgt.n	800287e <__aeabi_dmul+0x2c2>
 800287c:	e12a      	b.n	8002ad4 <__aeabi_dmul+0x518>
 800287e:	211f      	movs	r1, #31
 8002880:	4249      	negs	r1, r1
 8002882:	1acb      	subs	r3, r1, r3
 8002884:	0021      	movs	r1, r4
 8002886:	40d9      	lsrs	r1, r3
 8002888:	000b      	movs	r3, r1
 800288a:	2a20      	cmp	r2, #32
 800288c:	d005      	beq.n	800289a <__aeabi_dmul+0x2de>
 800288e:	4a16      	ldr	r2, [pc, #88]	@ (80028e8 <__aeabi_dmul+0x32c>)
 8002890:	9d01      	ldr	r5, [sp, #4]
 8002892:	4694      	mov	ip, r2
 8002894:	4465      	add	r5, ip
 8002896:	40ac      	lsls	r4, r5
 8002898:	4320      	orrs	r0, r4
 800289a:	1e42      	subs	r2, r0, #1
 800289c:	4190      	sbcs	r0, r2
 800289e:	4318      	orrs	r0, r3
 80028a0:	2307      	movs	r3, #7
 80028a2:	0019      	movs	r1, r3
 80028a4:	2400      	movs	r4, #0
 80028a6:	4001      	ands	r1, r0
 80028a8:	4203      	tst	r3, r0
 80028aa:	d00c      	beq.n	80028c6 <__aeabi_dmul+0x30a>
 80028ac:	230f      	movs	r3, #15
 80028ae:	4003      	ands	r3, r0
 80028b0:	2b04      	cmp	r3, #4
 80028b2:	d100      	bne.n	80028b6 <__aeabi_dmul+0x2fa>
 80028b4:	e140      	b.n	8002b38 <__aeabi_dmul+0x57c>
 80028b6:	1d03      	adds	r3, r0, #4
 80028b8:	4283      	cmp	r3, r0
 80028ba:	41a4      	sbcs	r4, r4
 80028bc:	0018      	movs	r0, r3
 80028be:	4264      	negs	r4, r4
 80028c0:	0761      	lsls	r1, r4, #29
 80028c2:	0264      	lsls	r4, r4, #9
 80028c4:	0b24      	lsrs	r4, r4, #12
 80028c6:	08c2      	lsrs	r2, r0, #3
 80028c8:	2300      	movs	r3, #0
 80028ca:	430a      	orrs	r2, r1
 80028cc:	e6cc      	b.n	8002668 <__aeabi_dmul+0xac>
 80028ce:	46c0      	nop			@ (mov r8, r8)
 80028d0:	000007ff 	.word	0x000007ff
 80028d4:	fffffc01 	.word	0xfffffc01
 80028d8:	000003ff 	.word	0x000003ff
 80028dc:	feffffff 	.word	0xfeffffff
 80028e0:	000007fe 	.word	0x000007fe
 80028e4:	fffffc0d 	.word	0xfffffc0d
 80028e8:	0000043e 	.word	0x0000043e
 80028ec:	4649      	mov	r1, r9
 80028ee:	464a      	mov	r2, r9
 80028f0:	0409      	lsls	r1, r1, #16
 80028f2:	0c09      	lsrs	r1, r1, #16
 80028f4:	000d      	movs	r5, r1
 80028f6:	0c16      	lsrs	r6, r2, #16
 80028f8:	0c02      	lsrs	r2, r0, #16
 80028fa:	0400      	lsls	r0, r0, #16
 80028fc:	0c00      	lsrs	r0, r0, #16
 80028fe:	4345      	muls	r5, r0
 8002900:	46ac      	mov	ip, r5
 8002902:	0005      	movs	r5, r0
 8002904:	4375      	muls	r5, r6
 8002906:	46a8      	mov	r8, r5
 8002908:	0015      	movs	r5, r2
 800290a:	000f      	movs	r7, r1
 800290c:	4375      	muls	r5, r6
 800290e:	9200      	str	r2, [sp, #0]
 8002910:	9502      	str	r5, [sp, #8]
 8002912:	002a      	movs	r2, r5
 8002914:	9d00      	ldr	r5, [sp, #0]
 8002916:	436f      	muls	r7, r5
 8002918:	4665      	mov	r5, ip
 800291a:	0c2d      	lsrs	r5, r5, #16
 800291c:	46a9      	mov	r9, r5
 800291e:	4447      	add	r7, r8
 8002920:	444f      	add	r7, r9
 8002922:	45b8      	cmp	r8, r7
 8002924:	d905      	bls.n	8002932 <__aeabi_dmul+0x376>
 8002926:	0015      	movs	r5, r2
 8002928:	2280      	movs	r2, #128	@ 0x80
 800292a:	0252      	lsls	r2, r2, #9
 800292c:	4690      	mov	r8, r2
 800292e:	4445      	add	r5, r8
 8002930:	9502      	str	r5, [sp, #8]
 8002932:	0c3d      	lsrs	r5, r7, #16
 8002934:	9503      	str	r5, [sp, #12]
 8002936:	4665      	mov	r5, ip
 8002938:	042d      	lsls	r5, r5, #16
 800293a:	043f      	lsls	r7, r7, #16
 800293c:	0c2d      	lsrs	r5, r5, #16
 800293e:	46ac      	mov	ip, r5
 8002940:	003d      	movs	r5, r7
 8002942:	4465      	add	r5, ip
 8002944:	9504      	str	r5, [sp, #16]
 8002946:	0c25      	lsrs	r5, r4, #16
 8002948:	0424      	lsls	r4, r4, #16
 800294a:	0c24      	lsrs	r4, r4, #16
 800294c:	46ac      	mov	ip, r5
 800294e:	0025      	movs	r5, r4
 8002950:	4375      	muls	r5, r6
 8002952:	46a8      	mov	r8, r5
 8002954:	4665      	mov	r5, ip
 8002956:	000f      	movs	r7, r1
 8002958:	4369      	muls	r1, r5
 800295a:	4441      	add	r1, r8
 800295c:	4689      	mov	r9, r1
 800295e:	4367      	muls	r7, r4
 8002960:	0c39      	lsrs	r1, r7, #16
 8002962:	4449      	add	r1, r9
 8002964:	436e      	muls	r6, r5
 8002966:	4588      	cmp	r8, r1
 8002968:	d903      	bls.n	8002972 <__aeabi_dmul+0x3b6>
 800296a:	2280      	movs	r2, #128	@ 0x80
 800296c:	0252      	lsls	r2, r2, #9
 800296e:	4690      	mov	r8, r2
 8002970:	4446      	add	r6, r8
 8002972:	0c0d      	lsrs	r5, r1, #16
 8002974:	46a8      	mov	r8, r5
 8002976:	0035      	movs	r5, r6
 8002978:	4445      	add	r5, r8
 800297a:	9505      	str	r5, [sp, #20]
 800297c:	9d03      	ldr	r5, [sp, #12]
 800297e:	043f      	lsls	r7, r7, #16
 8002980:	46a8      	mov	r8, r5
 8002982:	0c3f      	lsrs	r7, r7, #16
 8002984:	0409      	lsls	r1, r1, #16
 8002986:	19c9      	adds	r1, r1, r7
 8002988:	4488      	add	r8, r1
 800298a:	4645      	mov	r5, r8
 800298c:	9503      	str	r5, [sp, #12]
 800298e:	4655      	mov	r5, sl
 8002990:	042e      	lsls	r6, r5, #16
 8002992:	0c36      	lsrs	r6, r6, #16
 8002994:	0c2f      	lsrs	r7, r5, #16
 8002996:	0035      	movs	r5, r6
 8002998:	4345      	muls	r5, r0
 800299a:	4378      	muls	r0, r7
 800299c:	4681      	mov	r9, r0
 800299e:	0038      	movs	r0, r7
 80029a0:	46a8      	mov	r8, r5
 80029a2:	0c2d      	lsrs	r5, r5, #16
 80029a4:	46aa      	mov	sl, r5
 80029a6:	9a00      	ldr	r2, [sp, #0]
 80029a8:	4350      	muls	r0, r2
 80029aa:	4372      	muls	r2, r6
 80029ac:	444a      	add	r2, r9
 80029ae:	4452      	add	r2, sl
 80029b0:	4591      	cmp	r9, r2
 80029b2:	d903      	bls.n	80029bc <__aeabi_dmul+0x400>
 80029b4:	2580      	movs	r5, #128	@ 0x80
 80029b6:	026d      	lsls	r5, r5, #9
 80029b8:	46a9      	mov	r9, r5
 80029ba:	4448      	add	r0, r9
 80029bc:	0c15      	lsrs	r5, r2, #16
 80029be:	46a9      	mov	r9, r5
 80029c0:	4645      	mov	r5, r8
 80029c2:	042d      	lsls	r5, r5, #16
 80029c4:	0c2d      	lsrs	r5, r5, #16
 80029c6:	46a8      	mov	r8, r5
 80029c8:	4665      	mov	r5, ip
 80029ca:	437d      	muls	r5, r7
 80029cc:	0412      	lsls	r2, r2, #16
 80029ce:	4448      	add	r0, r9
 80029d0:	4490      	add	r8, r2
 80029d2:	46a9      	mov	r9, r5
 80029d4:	0032      	movs	r2, r6
 80029d6:	4665      	mov	r5, ip
 80029d8:	4362      	muls	r2, r4
 80029da:	436e      	muls	r6, r5
 80029dc:	437c      	muls	r4, r7
 80029de:	0c17      	lsrs	r7, r2, #16
 80029e0:	1936      	adds	r6, r6, r4
 80029e2:	19bf      	adds	r7, r7, r6
 80029e4:	42bc      	cmp	r4, r7
 80029e6:	d903      	bls.n	80029f0 <__aeabi_dmul+0x434>
 80029e8:	2480      	movs	r4, #128	@ 0x80
 80029ea:	0264      	lsls	r4, r4, #9
 80029ec:	46a4      	mov	ip, r4
 80029ee:	44e1      	add	r9, ip
 80029f0:	9c02      	ldr	r4, [sp, #8]
 80029f2:	9e03      	ldr	r6, [sp, #12]
 80029f4:	46a4      	mov	ip, r4
 80029f6:	9d05      	ldr	r5, [sp, #20]
 80029f8:	4466      	add	r6, ip
 80029fa:	428e      	cmp	r6, r1
 80029fc:	4189      	sbcs	r1, r1
 80029fe:	46ac      	mov	ip, r5
 8002a00:	0412      	lsls	r2, r2, #16
 8002a02:	043c      	lsls	r4, r7, #16
 8002a04:	0c12      	lsrs	r2, r2, #16
 8002a06:	18a2      	adds	r2, r4, r2
 8002a08:	4462      	add	r2, ip
 8002a0a:	4249      	negs	r1, r1
 8002a0c:	1854      	adds	r4, r2, r1
 8002a0e:	4446      	add	r6, r8
 8002a10:	46a4      	mov	ip, r4
 8002a12:	4546      	cmp	r6, r8
 8002a14:	41a4      	sbcs	r4, r4
 8002a16:	4682      	mov	sl, r0
 8002a18:	4264      	negs	r4, r4
 8002a1a:	46a0      	mov	r8, r4
 8002a1c:	42aa      	cmp	r2, r5
 8002a1e:	4192      	sbcs	r2, r2
 8002a20:	458c      	cmp	ip, r1
 8002a22:	4189      	sbcs	r1, r1
 8002a24:	44e2      	add	sl, ip
 8002a26:	44d0      	add	r8, sl
 8002a28:	4249      	negs	r1, r1
 8002a2a:	4252      	negs	r2, r2
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	45a0      	cmp	r8, r4
 8002a30:	41a4      	sbcs	r4, r4
 8002a32:	4582      	cmp	sl, r0
 8002a34:	4189      	sbcs	r1, r1
 8002a36:	4264      	negs	r4, r4
 8002a38:	4249      	negs	r1, r1
 8002a3a:	430c      	orrs	r4, r1
 8002a3c:	4641      	mov	r1, r8
 8002a3e:	0c3f      	lsrs	r7, r7, #16
 8002a40:	19d2      	adds	r2, r2, r7
 8002a42:	1912      	adds	r2, r2, r4
 8002a44:	0dcc      	lsrs	r4, r1, #23
 8002a46:	9904      	ldr	r1, [sp, #16]
 8002a48:	0270      	lsls	r0, r6, #9
 8002a4a:	4308      	orrs	r0, r1
 8002a4c:	1e41      	subs	r1, r0, #1
 8002a4e:	4188      	sbcs	r0, r1
 8002a50:	4641      	mov	r1, r8
 8002a52:	444a      	add	r2, r9
 8002a54:	0df6      	lsrs	r6, r6, #23
 8002a56:	0252      	lsls	r2, r2, #9
 8002a58:	4330      	orrs	r0, r6
 8002a5a:	0249      	lsls	r1, r1, #9
 8002a5c:	4314      	orrs	r4, r2
 8002a5e:	4308      	orrs	r0, r1
 8002a60:	01d2      	lsls	r2, r2, #7
 8002a62:	d535      	bpl.n	8002ad0 <__aeabi_dmul+0x514>
 8002a64:	2201      	movs	r2, #1
 8002a66:	0843      	lsrs	r3, r0, #1
 8002a68:	4002      	ands	r2, r0
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	07e0      	lsls	r0, r4, #31
 8002a6e:	4318      	orrs	r0, r3
 8002a70:	0864      	lsrs	r4, r4, #1
 8002a72:	e634      	b.n	80026de <__aeabi_dmul+0x122>
 8002a74:	9b00      	ldr	r3, [sp, #0]
 8002a76:	46a2      	mov	sl, r4
 8002a78:	469b      	mov	fp, r3
 8002a7a:	4681      	mov	r9, r0
 8002a7c:	2480      	movs	r4, #128	@ 0x80
 8002a7e:	4653      	mov	r3, sl
 8002a80:	0324      	lsls	r4, r4, #12
 8002a82:	431c      	orrs	r4, r3
 8002a84:	0324      	lsls	r4, r4, #12
 8002a86:	464a      	mov	r2, r9
 8002a88:	4b2e      	ldr	r3, [pc, #184]	@ (8002b44 <__aeabi_dmul+0x588>)
 8002a8a:	0b24      	lsrs	r4, r4, #12
 8002a8c:	e5ec      	b.n	8002668 <__aeabi_dmul+0xac>
 8002a8e:	f000 fd75 	bl	800357c <__clzsi2>
 8002a92:	2315      	movs	r3, #21
 8002a94:	469c      	mov	ip, r3
 8002a96:	4484      	add	ip, r0
 8002a98:	0002      	movs	r2, r0
 8002a9a:	4663      	mov	r3, ip
 8002a9c:	3220      	adds	r2, #32
 8002a9e:	2b1c      	cmp	r3, #28
 8002aa0:	dc00      	bgt.n	8002aa4 <__aeabi_dmul+0x4e8>
 8002aa2:	e684      	b.n	80027ae <__aeabi_dmul+0x1f2>
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	4699      	mov	r9, r3
 8002aa8:	0023      	movs	r3, r4
 8002aaa:	3808      	subs	r0, #8
 8002aac:	4083      	lsls	r3, r0
 8002aae:	469a      	mov	sl, r3
 8002ab0:	e68e      	b.n	80027d0 <__aeabi_dmul+0x214>
 8002ab2:	f000 fd63 	bl	800357c <__clzsi2>
 8002ab6:	0002      	movs	r2, r0
 8002ab8:	0003      	movs	r3, r0
 8002aba:	3215      	adds	r2, #21
 8002abc:	3320      	adds	r3, #32
 8002abe:	2a1c      	cmp	r2, #28
 8002ac0:	dc00      	bgt.n	8002ac4 <__aeabi_dmul+0x508>
 8002ac2:	e64e      	b.n	8002762 <__aeabi_dmul+0x1a6>
 8002ac4:	0002      	movs	r2, r0
 8002ac6:	0034      	movs	r4, r6
 8002ac8:	3a08      	subs	r2, #8
 8002aca:	2000      	movs	r0, #0
 8002acc:	4094      	lsls	r4, r2
 8002ace:	e652      	b.n	8002776 <__aeabi_dmul+0x1ba>
 8002ad0:	9301      	str	r3, [sp, #4]
 8002ad2:	e604      	b.n	80026de <__aeabi_dmul+0x122>
 8002ad4:	4b1c      	ldr	r3, [pc, #112]	@ (8002b48 <__aeabi_dmul+0x58c>)
 8002ad6:	0021      	movs	r1, r4
 8002ad8:	469c      	mov	ip, r3
 8002ada:	0003      	movs	r3, r0
 8002adc:	9d01      	ldr	r5, [sp, #4]
 8002ade:	40d3      	lsrs	r3, r2
 8002ae0:	4465      	add	r5, ip
 8002ae2:	40a9      	lsls	r1, r5
 8002ae4:	4319      	orrs	r1, r3
 8002ae6:	0003      	movs	r3, r0
 8002ae8:	40ab      	lsls	r3, r5
 8002aea:	1e58      	subs	r0, r3, #1
 8002aec:	4183      	sbcs	r3, r0
 8002aee:	4319      	orrs	r1, r3
 8002af0:	0008      	movs	r0, r1
 8002af2:	40d4      	lsrs	r4, r2
 8002af4:	074b      	lsls	r3, r1, #29
 8002af6:	d009      	beq.n	8002b0c <__aeabi_dmul+0x550>
 8002af8:	230f      	movs	r3, #15
 8002afa:	400b      	ands	r3, r1
 8002afc:	2b04      	cmp	r3, #4
 8002afe:	d005      	beq.n	8002b0c <__aeabi_dmul+0x550>
 8002b00:	1d0b      	adds	r3, r1, #4
 8002b02:	428b      	cmp	r3, r1
 8002b04:	4180      	sbcs	r0, r0
 8002b06:	4240      	negs	r0, r0
 8002b08:	1824      	adds	r4, r4, r0
 8002b0a:	0018      	movs	r0, r3
 8002b0c:	0223      	lsls	r3, r4, #8
 8002b0e:	d400      	bmi.n	8002b12 <__aeabi_dmul+0x556>
 8002b10:	e6d6      	b.n	80028c0 <__aeabi_dmul+0x304>
 8002b12:	2301      	movs	r3, #1
 8002b14:	2400      	movs	r4, #0
 8002b16:	2200      	movs	r2, #0
 8002b18:	e5a6      	b.n	8002668 <__aeabi_dmul+0xac>
 8002b1a:	290f      	cmp	r1, #15
 8002b1c:	d1aa      	bne.n	8002a74 <__aeabi_dmul+0x4b8>
 8002b1e:	2380      	movs	r3, #128	@ 0x80
 8002b20:	4652      	mov	r2, sl
 8002b22:	031b      	lsls	r3, r3, #12
 8002b24:	421a      	tst	r2, r3
 8002b26:	d0a9      	beq.n	8002a7c <__aeabi_dmul+0x4c0>
 8002b28:	421c      	tst	r4, r3
 8002b2a:	d1a7      	bne.n	8002a7c <__aeabi_dmul+0x4c0>
 8002b2c:	431c      	orrs	r4, r3
 8002b2e:	9b00      	ldr	r3, [sp, #0]
 8002b30:	0002      	movs	r2, r0
 8002b32:	469b      	mov	fp, r3
 8002b34:	4b03      	ldr	r3, [pc, #12]	@ (8002b44 <__aeabi_dmul+0x588>)
 8002b36:	e597      	b.n	8002668 <__aeabi_dmul+0xac>
 8002b38:	2400      	movs	r4, #0
 8002b3a:	e6c1      	b.n	80028c0 <__aeabi_dmul+0x304>
 8002b3c:	2400      	movs	r4, #0
 8002b3e:	4b01      	ldr	r3, [pc, #4]	@ (8002b44 <__aeabi_dmul+0x588>)
 8002b40:	0022      	movs	r2, r4
 8002b42:	e591      	b.n	8002668 <__aeabi_dmul+0xac>
 8002b44:	000007ff 	.word	0x000007ff
 8002b48:	0000041e 	.word	0x0000041e

08002b4c <__aeabi_dsub>:
 8002b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b4e:	464e      	mov	r6, r9
 8002b50:	4645      	mov	r5, r8
 8002b52:	46de      	mov	lr, fp
 8002b54:	4657      	mov	r7, sl
 8002b56:	b5e0      	push	{r5, r6, r7, lr}
 8002b58:	b085      	sub	sp, #20
 8002b5a:	9000      	str	r0, [sp, #0]
 8002b5c:	9101      	str	r1, [sp, #4]
 8002b5e:	030c      	lsls	r4, r1, #12
 8002b60:	004f      	lsls	r7, r1, #1
 8002b62:	0fce      	lsrs	r6, r1, #31
 8002b64:	0a61      	lsrs	r1, r4, #9
 8002b66:	9c00      	ldr	r4, [sp, #0]
 8002b68:	46b0      	mov	r8, r6
 8002b6a:	0f64      	lsrs	r4, r4, #29
 8002b6c:	430c      	orrs	r4, r1
 8002b6e:	9900      	ldr	r1, [sp, #0]
 8002b70:	0d7f      	lsrs	r7, r7, #21
 8002b72:	00c8      	lsls	r0, r1, #3
 8002b74:	0011      	movs	r1, r2
 8002b76:	001a      	movs	r2, r3
 8002b78:	031b      	lsls	r3, r3, #12
 8002b7a:	469c      	mov	ip, r3
 8002b7c:	9100      	str	r1, [sp, #0]
 8002b7e:	9201      	str	r2, [sp, #4]
 8002b80:	0051      	lsls	r1, r2, #1
 8002b82:	0d4b      	lsrs	r3, r1, #21
 8002b84:	4699      	mov	r9, r3
 8002b86:	9b01      	ldr	r3, [sp, #4]
 8002b88:	9d00      	ldr	r5, [sp, #0]
 8002b8a:	0fd9      	lsrs	r1, r3, #31
 8002b8c:	4663      	mov	r3, ip
 8002b8e:	0f6a      	lsrs	r2, r5, #29
 8002b90:	0a5b      	lsrs	r3, r3, #9
 8002b92:	4313      	orrs	r3, r2
 8002b94:	00ea      	lsls	r2, r5, #3
 8002b96:	4694      	mov	ip, r2
 8002b98:	4693      	mov	fp, r2
 8002b9a:	4ac1      	ldr	r2, [pc, #772]	@ (8002ea0 <__aeabi_dsub+0x354>)
 8002b9c:	9003      	str	r0, [sp, #12]
 8002b9e:	9302      	str	r3, [sp, #8]
 8002ba0:	4591      	cmp	r9, r2
 8002ba2:	d100      	bne.n	8002ba6 <__aeabi_dsub+0x5a>
 8002ba4:	e0cd      	b.n	8002d42 <__aeabi_dsub+0x1f6>
 8002ba6:	2501      	movs	r5, #1
 8002ba8:	4069      	eors	r1, r5
 8002baa:	464d      	mov	r5, r9
 8002bac:	1b7d      	subs	r5, r7, r5
 8002bae:	46aa      	mov	sl, r5
 8002bb0:	428e      	cmp	r6, r1
 8002bb2:	d100      	bne.n	8002bb6 <__aeabi_dsub+0x6a>
 8002bb4:	e080      	b.n	8002cb8 <__aeabi_dsub+0x16c>
 8002bb6:	2d00      	cmp	r5, #0
 8002bb8:	dc00      	bgt.n	8002bbc <__aeabi_dsub+0x70>
 8002bba:	e335      	b.n	8003228 <__aeabi_dsub+0x6dc>
 8002bbc:	4649      	mov	r1, r9
 8002bbe:	2900      	cmp	r1, #0
 8002bc0:	d100      	bne.n	8002bc4 <__aeabi_dsub+0x78>
 8002bc2:	e0df      	b.n	8002d84 <__aeabi_dsub+0x238>
 8002bc4:	4297      	cmp	r7, r2
 8002bc6:	d100      	bne.n	8002bca <__aeabi_dsub+0x7e>
 8002bc8:	e194      	b.n	8002ef4 <__aeabi_dsub+0x3a8>
 8002bca:	4652      	mov	r2, sl
 8002bcc:	2501      	movs	r5, #1
 8002bce:	2a38      	cmp	r2, #56	@ 0x38
 8002bd0:	dc19      	bgt.n	8002c06 <__aeabi_dsub+0xba>
 8002bd2:	2280      	movs	r2, #128	@ 0x80
 8002bd4:	9b02      	ldr	r3, [sp, #8]
 8002bd6:	0412      	lsls	r2, r2, #16
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	9302      	str	r3, [sp, #8]
 8002bdc:	4652      	mov	r2, sl
 8002bde:	2a1f      	cmp	r2, #31
 8002be0:	dd00      	ble.n	8002be4 <__aeabi_dsub+0x98>
 8002be2:	e1e3      	b.n	8002fac <__aeabi_dsub+0x460>
 8002be4:	4653      	mov	r3, sl
 8002be6:	2220      	movs	r2, #32
 8002be8:	4661      	mov	r1, ip
 8002bea:	9d02      	ldr	r5, [sp, #8]
 8002bec:	1ad2      	subs	r2, r2, r3
 8002bee:	4095      	lsls	r5, r2
 8002bf0:	40d9      	lsrs	r1, r3
 8002bf2:	430d      	orrs	r5, r1
 8002bf4:	4661      	mov	r1, ip
 8002bf6:	4091      	lsls	r1, r2
 8002bf8:	000a      	movs	r2, r1
 8002bfa:	1e51      	subs	r1, r2, #1
 8002bfc:	418a      	sbcs	r2, r1
 8002bfe:	4315      	orrs	r5, r2
 8002c00:	9a02      	ldr	r2, [sp, #8]
 8002c02:	40da      	lsrs	r2, r3
 8002c04:	1aa4      	subs	r4, r4, r2
 8002c06:	1b45      	subs	r5, r0, r5
 8002c08:	42a8      	cmp	r0, r5
 8002c0a:	4180      	sbcs	r0, r0
 8002c0c:	4240      	negs	r0, r0
 8002c0e:	1a24      	subs	r4, r4, r0
 8002c10:	0223      	lsls	r3, r4, #8
 8002c12:	d400      	bmi.n	8002c16 <__aeabi_dsub+0xca>
 8002c14:	e13d      	b.n	8002e92 <__aeabi_dsub+0x346>
 8002c16:	0264      	lsls	r4, r4, #9
 8002c18:	0a64      	lsrs	r4, r4, #9
 8002c1a:	2c00      	cmp	r4, #0
 8002c1c:	d100      	bne.n	8002c20 <__aeabi_dsub+0xd4>
 8002c1e:	e147      	b.n	8002eb0 <__aeabi_dsub+0x364>
 8002c20:	0020      	movs	r0, r4
 8002c22:	f000 fcab 	bl	800357c <__clzsi2>
 8002c26:	0003      	movs	r3, r0
 8002c28:	3b08      	subs	r3, #8
 8002c2a:	2120      	movs	r1, #32
 8002c2c:	0028      	movs	r0, r5
 8002c2e:	1aca      	subs	r2, r1, r3
 8002c30:	40d0      	lsrs	r0, r2
 8002c32:	409c      	lsls	r4, r3
 8002c34:	0002      	movs	r2, r0
 8002c36:	409d      	lsls	r5, r3
 8002c38:	4322      	orrs	r2, r4
 8002c3a:	429f      	cmp	r7, r3
 8002c3c:	dd00      	ble.n	8002c40 <__aeabi_dsub+0xf4>
 8002c3e:	e177      	b.n	8002f30 <__aeabi_dsub+0x3e4>
 8002c40:	1bd8      	subs	r0, r3, r7
 8002c42:	3001      	adds	r0, #1
 8002c44:	1a09      	subs	r1, r1, r0
 8002c46:	002c      	movs	r4, r5
 8002c48:	408d      	lsls	r5, r1
 8002c4a:	40c4      	lsrs	r4, r0
 8002c4c:	1e6b      	subs	r3, r5, #1
 8002c4e:	419d      	sbcs	r5, r3
 8002c50:	0013      	movs	r3, r2
 8002c52:	40c2      	lsrs	r2, r0
 8002c54:	408b      	lsls	r3, r1
 8002c56:	4325      	orrs	r5, r4
 8002c58:	2700      	movs	r7, #0
 8002c5a:	0014      	movs	r4, r2
 8002c5c:	431d      	orrs	r5, r3
 8002c5e:	076b      	lsls	r3, r5, #29
 8002c60:	d009      	beq.n	8002c76 <__aeabi_dsub+0x12a>
 8002c62:	230f      	movs	r3, #15
 8002c64:	402b      	ands	r3, r5
 8002c66:	2b04      	cmp	r3, #4
 8002c68:	d005      	beq.n	8002c76 <__aeabi_dsub+0x12a>
 8002c6a:	1d2b      	adds	r3, r5, #4
 8002c6c:	42ab      	cmp	r3, r5
 8002c6e:	41ad      	sbcs	r5, r5
 8002c70:	426d      	negs	r5, r5
 8002c72:	1964      	adds	r4, r4, r5
 8002c74:	001d      	movs	r5, r3
 8002c76:	0223      	lsls	r3, r4, #8
 8002c78:	d400      	bmi.n	8002c7c <__aeabi_dsub+0x130>
 8002c7a:	e140      	b.n	8002efe <__aeabi_dsub+0x3b2>
 8002c7c:	4a88      	ldr	r2, [pc, #544]	@ (8002ea0 <__aeabi_dsub+0x354>)
 8002c7e:	3701      	adds	r7, #1
 8002c80:	4297      	cmp	r7, r2
 8002c82:	d100      	bne.n	8002c86 <__aeabi_dsub+0x13a>
 8002c84:	e101      	b.n	8002e8a <__aeabi_dsub+0x33e>
 8002c86:	2601      	movs	r6, #1
 8002c88:	4643      	mov	r3, r8
 8002c8a:	4986      	ldr	r1, [pc, #536]	@ (8002ea4 <__aeabi_dsub+0x358>)
 8002c8c:	08ed      	lsrs	r5, r5, #3
 8002c8e:	4021      	ands	r1, r4
 8002c90:	074a      	lsls	r2, r1, #29
 8002c92:	432a      	orrs	r2, r5
 8002c94:	057c      	lsls	r4, r7, #21
 8002c96:	024d      	lsls	r5, r1, #9
 8002c98:	0b2d      	lsrs	r5, r5, #12
 8002c9a:	0d64      	lsrs	r4, r4, #21
 8002c9c:	401e      	ands	r6, r3
 8002c9e:	0524      	lsls	r4, r4, #20
 8002ca0:	432c      	orrs	r4, r5
 8002ca2:	07f6      	lsls	r6, r6, #31
 8002ca4:	4334      	orrs	r4, r6
 8002ca6:	0010      	movs	r0, r2
 8002ca8:	0021      	movs	r1, r4
 8002caa:	b005      	add	sp, #20
 8002cac:	bcf0      	pop	{r4, r5, r6, r7}
 8002cae:	46bb      	mov	fp, r7
 8002cb0:	46b2      	mov	sl, r6
 8002cb2:	46a9      	mov	r9, r5
 8002cb4:	46a0      	mov	r8, r4
 8002cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cb8:	2d00      	cmp	r5, #0
 8002cba:	dc00      	bgt.n	8002cbe <__aeabi_dsub+0x172>
 8002cbc:	e2d0      	b.n	8003260 <__aeabi_dsub+0x714>
 8002cbe:	4649      	mov	r1, r9
 8002cc0:	2900      	cmp	r1, #0
 8002cc2:	d000      	beq.n	8002cc6 <__aeabi_dsub+0x17a>
 8002cc4:	e0d4      	b.n	8002e70 <__aeabi_dsub+0x324>
 8002cc6:	4661      	mov	r1, ip
 8002cc8:	9b02      	ldr	r3, [sp, #8]
 8002cca:	4319      	orrs	r1, r3
 8002ccc:	d100      	bne.n	8002cd0 <__aeabi_dsub+0x184>
 8002cce:	e12b      	b.n	8002f28 <__aeabi_dsub+0x3dc>
 8002cd0:	1e69      	subs	r1, r5, #1
 8002cd2:	2d01      	cmp	r5, #1
 8002cd4:	d100      	bne.n	8002cd8 <__aeabi_dsub+0x18c>
 8002cd6:	e1d9      	b.n	800308c <__aeabi_dsub+0x540>
 8002cd8:	4295      	cmp	r5, r2
 8002cda:	d100      	bne.n	8002cde <__aeabi_dsub+0x192>
 8002cdc:	e10a      	b.n	8002ef4 <__aeabi_dsub+0x3a8>
 8002cde:	2501      	movs	r5, #1
 8002ce0:	2938      	cmp	r1, #56	@ 0x38
 8002ce2:	dc17      	bgt.n	8002d14 <__aeabi_dsub+0x1c8>
 8002ce4:	468a      	mov	sl, r1
 8002ce6:	4653      	mov	r3, sl
 8002ce8:	2b1f      	cmp	r3, #31
 8002cea:	dd00      	ble.n	8002cee <__aeabi_dsub+0x1a2>
 8002cec:	e1e7      	b.n	80030be <__aeabi_dsub+0x572>
 8002cee:	2220      	movs	r2, #32
 8002cf0:	1ad2      	subs	r2, r2, r3
 8002cf2:	9b02      	ldr	r3, [sp, #8]
 8002cf4:	4661      	mov	r1, ip
 8002cf6:	4093      	lsls	r3, r2
 8002cf8:	001d      	movs	r5, r3
 8002cfa:	4653      	mov	r3, sl
 8002cfc:	40d9      	lsrs	r1, r3
 8002cfe:	4663      	mov	r3, ip
 8002d00:	4093      	lsls	r3, r2
 8002d02:	001a      	movs	r2, r3
 8002d04:	430d      	orrs	r5, r1
 8002d06:	1e51      	subs	r1, r2, #1
 8002d08:	418a      	sbcs	r2, r1
 8002d0a:	4653      	mov	r3, sl
 8002d0c:	4315      	orrs	r5, r2
 8002d0e:	9a02      	ldr	r2, [sp, #8]
 8002d10:	40da      	lsrs	r2, r3
 8002d12:	18a4      	adds	r4, r4, r2
 8002d14:	182d      	adds	r5, r5, r0
 8002d16:	4285      	cmp	r5, r0
 8002d18:	4180      	sbcs	r0, r0
 8002d1a:	4240      	negs	r0, r0
 8002d1c:	1824      	adds	r4, r4, r0
 8002d1e:	0223      	lsls	r3, r4, #8
 8002d20:	d400      	bmi.n	8002d24 <__aeabi_dsub+0x1d8>
 8002d22:	e0b6      	b.n	8002e92 <__aeabi_dsub+0x346>
 8002d24:	4b5e      	ldr	r3, [pc, #376]	@ (8002ea0 <__aeabi_dsub+0x354>)
 8002d26:	3701      	adds	r7, #1
 8002d28:	429f      	cmp	r7, r3
 8002d2a:	d100      	bne.n	8002d2e <__aeabi_dsub+0x1e2>
 8002d2c:	e0ad      	b.n	8002e8a <__aeabi_dsub+0x33e>
 8002d2e:	2101      	movs	r1, #1
 8002d30:	4b5c      	ldr	r3, [pc, #368]	@ (8002ea4 <__aeabi_dsub+0x358>)
 8002d32:	086a      	lsrs	r2, r5, #1
 8002d34:	401c      	ands	r4, r3
 8002d36:	4029      	ands	r1, r5
 8002d38:	430a      	orrs	r2, r1
 8002d3a:	07e5      	lsls	r5, r4, #31
 8002d3c:	4315      	orrs	r5, r2
 8002d3e:	0864      	lsrs	r4, r4, #1
 8002d40:	e78d      	b.n	8002c5e <__aeabi_dsub+0x112>
 8002d42:	4a59      	ldr	r2, [pc, #356]	@ (8002ea8 <__aeabi_dsub+0x35c>)
 8002d44:	9b02      	ldr	r3, [sp, #8]
 8002d46:	4692      	mov	sl, r2
 8002d48:	4662      	mov	r2, ip
 8002d4a:	44ba      	add	sl, r7
 8002d4c:	431a      	orrs	r2, r3
 8002d4e:	d02c      	beq.n	8002daa <__aeabi_dsub+0x25e>
 8002d50:	428e      	cmp	r6, r1
 8002d52:	d02e      	beq.n	8002db2 <__aeabi_dsub+0x266>
 8002d54:	4652      	mov	r2, sl
 8002d56:	2a00      	cmp	r2, #0
 8002d58:	d060      	beq.n	8002e1c <__aeabi_dsub+0x2d0>
 8002d5a:	2f00      	cmp	r7, #0
 8002d5c:	d100      	bne.n	8002d60 <__aeabi_dsub+0x214>
 8002d5e:	e0db      	b.n	8002f18 <__aeabi_dsub+0x3cc>
 8002d60:	4663      	mov	r3, ip
 8002d62:	000e      	movs	r6, r1
 8002d64:	9c02      	ldr	r4, [sp, #8]
 8002d66:	08d8      	lsrs	r0, r3, #3
 8002d68:	0762      	lsls	r2, r4, #29
 8002d6a:	4302      	orrs	r2, r0
 8002d6c:	08e4      	lsrs	r4, r4, #3
 8002d6e:	0013      	movs	r3, r2
 8002d70:	4323      	orrs	r3, r4
 8002d72:	d100      	bne.n	8002d76 <__aeabi_dsub+0x22a>
 8002d74:	e254      	b.n	8003220 <__aeabi_dsub+0x6d4>
 8002d76:	2580      	movs	r5, #128	@ 0x80
 8002d78:	032d      	lsls	r5, r5, #12
 8002d7a:	4325      	orrs	r5, r4
 8002d7c:	032d      	lsls	r5, r5, #12
 8002d7e:	4c48      	ldr	r4, [pc, #288]	@ (8002ea0 <__aeabi_dsub+0x354>)
 8002d80:	0b2d      	lsrs	r5, r5, #12
 8002d82:	e78c      	b.n	8002c9e <__aeabi_dsub+0x152>
 8002d84:	4661      	mov	r1, ip
 8002d86:	9b02      	ldr	r3, [sp, #8]
 8002d88:	4319      	orrs	r1, r3
 8002d8a:	d100      	bne.n	8002d8e <__aeabi_dsub+0x242>
 8002d8c:	e0cc      	b.n	8002f28 <__aeabi_dsub+0x3dc>
 8002d8e:	0029      	movs	r1, r5
 8002d90:	3901      	subs	r1, #1
 8002d92:	2d01      	cmp	r5, #1
 8002d94:	d100      	bne.n	8002d98 <__aeabi_dsub+0x24c>
 8002d96:	e188      	b.n	80030aa <__aeabi_dsub+0x55e>
 8002d98:	4295      	cmp	r5, r2
 8002d9a:	d100      	bne.n	8002d9e <__aeabi_dsub+0x252>
 8002d9c:	e0aa      	b.n	8002ef4 <__aeabi_dsub+0x3a8>
 8002d9e:	2501      	movs	r5, #1
 8002da0:	2938      	cmp	r1, #56	@ 0x38
 8002da2:	dd00      	ble.n	8002da6 <__aeabi_dsub+0x25a>
 8002da4:	e72f      	b.n	8002c06 <__aeabi_dsub+0xba>
 8002da6:	468a      	mov	sl, r1
 8002da8:	e718      	b.n	8002bdc <__aeabi_dsub+0x90>
 8002daa:	2201      	movs	r2, #1
 8002dac:	4051      	eors	r1, r2
 8002dae:	428e      	cmp	r6, r1
 8002db0:	d1d0      	bne.n	8002d54 <__aeabi_dsub+0x208>
 8002db2:	4653      	mov	r3, sl
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d100      	bne.n	8002dba <__aeabi_dsub+0x26e>
 8002db8:	e0be      	b.n	8002f38 <__aeabi_dsub+0x3ec>
 8002dba:	2f00      	cmp	r7, #0
 8002dbc:	d000      	beq.n	8002dc0 <__aeabi_dsub+0x274>
 8002dbe:	e138      	b.n	8003032 <__aeabi_dsub+0x4e6>
 8002dc0:	46ca      	mov	sl, r9
 8002dc2:	0022      	movs	r2, r4
 8002dc4:	4302      	orrs	r2, r0
 8002dc6:	d100      	bne.n	8002dca <__aeabi_dsub+0x27e>
 8002dc8:	e1e2      	b.n	8003190 <__aeabi_dsub+0x644>
 8002dca:	4653      	mov	r3, sl
 8002dcc:	1e59      	subs	r1, r3, #1
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d100      	bne.n	8002dd4 <__aeabi_dsub+0x288>
 8002dd2:	e20d      	b.n	80031f0 <__aeabi_dsub+0x6a4>
 8002dd4:	4a32      	ldr	r2, [pc, #200]	@ (8002ea0 <__aeabi_dsub+0x354>)
 8002dd6:	4592      	cmp	sl, r2
 8002dd8:	d100      	bne.n	8002ddc <__aeabi_dsub+0x290>
 8002dda:	e1d2      	b.n	8003182 <__aeabi_dsub+0x636>
 8002ddc:	2701      	movs	r7, #1
 8002dde:	2938      	cmp	r1, #56	@ 0x38
 8002de0:	dc13      	bgt.n	8002e0a <__aeabi_dsub+0x2be>
 8002de2:	291f      	cmp	r1, #31
 8002de4:	dd00      	ble.n	8002de8 <__aeabi_dsub+0x29c>
 8002de6:	e1ee      	b.n	80031c6 <__aeabi_dsub+0x67a>
 8002de8:	2220      	movs	r2, #32
 8002dea:	9b02      	ldr	r3, [sp, #8]
 8002dec:	1a52      	subs	r2, r2, r1
 8002dee:	0025      	movs	r5, r4
 8002df0:	0007      	movs	r7, r0
 8002df2:	469a      	mov	sl, r3
 8002df4:	40cc      	lsrs	r4, r1
 8002df6:	4090      	lsls	r0, r2
 8002df8:	4095      	lsls	r5, r2
 8002dfa:	40cf      	lsrs	r7, r1
 8002dfc:	44a2      	add	sl, r4
 8002dfe:	1e42      	subs	r2, r0, #1
 8002e00:	4190      	sbcs	r0, r2
 8002e02:	4653      	mov	r3, sl
 8002e04:	432f      	orrs	r7, r5
 8002e06:	4307      	orrs	r7, r0
 8002e08:	9302      	str	r3, [sp, #8]
 8002e0a:	003d      	movs	r5, r7
 8002e0c:	4465      	add	r5, ip
 8002e0e:	4565      	cmp	r5, ip
 8002e10:	4192      	sbcs	r2, r2
 8002e12:	9b02      	ldr	r3, [sp, #8]
 8002e14:	4252      	negs	r2, r2
 8002e16:	464f      	mov	r7, r9
 8002e18:	18d4      	adds	r4, r2, r3
 8002e1a:	e780      	b.n	8002d1e <__aeabi_dsub+0x1d2>
 8002e1c:	4a23      	ldr	r2, [pc, #140]	@ (8002eac <__aeabi_dsub+0x360>)
 8002e1e:	1c7d      	adds	r5, r7, #1
 8002e20:	4215      	tst	r5, r2
 8002e22:	d000      	beq.n	8002e26 <__aeabi_dsub+0x2da>
 8002e24:	e0aa      	b.n	8002f7c <__aeabi_dsub+0x430>
 8002e26:	4662      	mov	r2, ip
 8002e28:	0025      	movs	r5, r4
 8002e2a:	9b02      	ldr	r3, [sp, #8]
 8002e2c:	4305      	orrs	r5, r0
 8002e2e:	431a      	orrs	r2, r3
 8002e30:	2f00      	cmp	r7, #0
 8002e32:	d000      	beq.n	8002e36 <__aeabi_dsub+0x2ea>
 8002e34:	e0f5      	b.n	8003022 <__aeabi_dsub+0x4d6>
 8002e36:	2d00      	cmp	r5, #0
 8002e38:	d100      	bne.n	8002e3c <__aeabi_dsub+0x2f0>
 8002e3a:	e16b      	b.n	8003114 <__aeabi_dsub+0x5c8>
 8002e3c:	2a00      	cmp	r2, #0
 8002e3e:	d100      	bne.n	8002e42 <__aeabi_dsub+0x2f6>
 8002e40:	e152      	b.n	80030e8 <__aeabi_dsub+0x59c>
 8002e42:	4663      	mov	r3, ip
 8002e44:	1ac5      	subs	r5, r0, r3
 8002e46:	9b02      	ldr	r3, [sp, #8]
 8002e48:	1ae2      	subs	r2, r4, r3
 8002e4a:	42a8      	cmp	r0, r5
 8002e4c:	419b      	sbcs	r3, r3
 8002e4e:	425b      	negs	r3, r3
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	021a      	lsls	r2, r3, #8
 8002e54:	d400      	bmi.n	8002e58 <__aeabi_dsub+0x30c>
 8002e56:	e1d5      	b.n	8003204 <__aeabi_dsub+0x6b8>
 8002e58:	4663      	mov	r3, ip
 8002e5a:	1a1d      	subs	r5, r3, r0
 8002e5c:	45ac      	cmp	ip, r5
 8002e5e:	4192      	sbcs	r2, r2
 8002e60:	2601      	movs	r6, #1
 8002e62:	9b02      	ldr	r3, [sp, #8]
 8002e64:	4252      	negs	r2, r2
 8002e66:	1b1c      	subs	r4, r3, r4
 8002e68:	4688      	mov	r8, r1
 8002e6a:	1aa4      	subs	r4, r4, r2
 8002e6c:	400e      	ands	r6, r1
 8002e6e:	e6f6      	b.n	8002c5e <__aeabi_dsub+0x112>
 8002e70:	4297      	cmp	r7, r2
 8002e72:	d03f      	beq.n	8002ef4 <__aeabi_dsub+0x3a8>
 8002e74:	4652      	mov	r2, sl
 8002e76:	2501      	movs	r5, #1
 8002e78:	2a38      	cmp	r2, #56	@ 0x38
 8002e7a:	dd00      	ble.n	8002e7e <__aeabi_dsub+0x332>
 8002e7c:	e74a      	b.n	8002d14 <__aeabi_dsub+0x1c8>
 8002e7e:	2280      	movs	r2, #128	@ 0x80
 8002e80:	9b02      	ldr	r3, [sp, #8]
 8002e82:	0412      	lsls	r2, r2, #16
 8002e84:	4313      	orrs	r3, r2
 8002e86:	9302      	str	r3, [sp, #8]
 8002e88:	e72d      	b.n	8002ce6 <__aeabi_dsub+0x19a>
 8002e8a:	003c      	movs	r4, r7
 8002e8c:	2500      	movs	r5, #0
 8002e8e:	2200      	movs	r2, #0
 8002e90:	e705      	b.n	8002c9e <__aeabi_dsub+0x152>
 8002e92:	2307      	movs	r3, #7
 8002e94:	402b      	ands	r3, r5
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d000      	beq.n	8002e9c <__aeabi_dsub+0x350>
 8002e9a:	e6e2      	b.n	8002c62 <__aeabi_dsub+0x116>
 8002e9c:	e06b      	b.n	8002f76 <__aeabi_dsub+0x42a>
 8002e9e:	46c0      	nop			@ (mov r8, r8)
 8002ea0:	000007ff 	.word	0x000007ff
 8002ea4:	ff7fffff 	.word	0xff7fffff
 8002ea8:	fffff801 	.word	0xfffff801
 8002eac:	000007fe 	.word	0x000007fe
 8002eb0:	0028      	movs	r0, r5
 8002eb2:	f000 fb63 	bl	800357c <__clzsi2>
 8002eb6:	0003      	movs	r3, r0
 8002eb8:	3318      	adds	r3, #24
 8002eba:	2b1f      	cmp	r3, #31
 8002ebc:	dc00      	bgt.n	8002ec0 <__aeabi_dsub+0x374>
 8002ebe:	e6b4      	b.n	8002c2a <__aeabi_dsub+0xde>
 8002ec0:	002a      	movs	r2, r5
 8002ec2:	3808      	subs	r0, #8
 8002ec4:	4082      	lsls	r2, r0
 8002ec6:	429f      	cmp	r7, r3
 8002ec8:	dd00      	ble.n	8002ecc <__aeabi_dsub+0x380>
 8002eca:	e0b9      	b.n	8003040 <__aeabi_dsub+0x4f4>
 8002ecc:	1bdb      	subs	r3, r3, r7
 8002ece:	1c58      	adds	r0, r3, #1
 8002ed0:	281f      	cmp	r0, #31
 8002ed2:	dc00      	bgt.n	8002ed6 <__aeabi_dsub+0x38a>
 8002ed4:	e1a0      	b.n	8003218 <__aeabi_dsub+0x6cc>
 8002ed6:	0015      	movs	r5, r2
 8002ed8:	3b1f      	subs	r3, #31
 8002eda:	40dd      	lsrs	r5, r3
 8002edc:	2820      	cmp	r0, #32
 8002ede:	d005      	beq.n	8002eec <__aeabi_dsub+0x3a0>
 8002ee0:	2340      	movs	r3, #64	@ 0x40
 8002ee2:	1a1b      	subs	r3, r3, r0
 8002ee4:	409a      	lsls	r2, r3
 8002ee6:	1e53      	subs	r3, r2, #1
 8002ee8:	419a      	sbcs	r2, r3
 8002eea:	4315      	orrs	r5, r2
 8002eec:	2307      	movs	r3, #7
 8002eee:	2700      	movs	r7, #0
 8002ef0:	402b      	ands	r3, r5
 8002ef2:	e7d0      	b.n	8002e96 <__aeabi_dsub+0x34a>
 8002ef4:	08c0      	lsrs	r0, r0, #3
 8002ef6:	0762      	lsls	r2, r4, #29
 8002ef8:	4302      	orrs	r2, r0
 8002efa:	08e4      	lsrs	r4, r4, #3
 8002efc:	e737      	b.n	8002d6e <__aeabi_dsub+0x222>
 8002efe:	08ea      	lsrs	r2, r5, #3
 8002f00:	0763      	lsls	r3, r4, #29
 8002f02:	431a      	orrs	r2, r3
 8002f04:	4bd3      	ldr	r3, [pc, #844]	@ (8003254 <__aeabi_dsub+0x708>)
 8002f06:	08e4      	lsrs	r4, r4, #3
 8002f08:	429f      	cmp	r7, r3
 8002f0a:	d100      	bne.n	8002f0e <__aeabi_dsub+0x3c2>
 8002f0c:	e72f      	b.n	8002d6e <__aeabi_dsub+0x222>
 8002f0e:	0324      	lsls	r4, r4, #12
 8002f10:	0b25      	lsrs	r5, r4, #12
 8002f12:	057c      	lsls	r4, r7, #21
 8002f14:	0d64      	lsrs	r4, r4, #21
 8002f16:	e6c2      	b.n	8002c9e <__aeabi_dsub+0x152>
 8002f18:	46ca      	mov	sl, r9
 8002f1a:	0022      	movs	r2, r4
 8002f1c:	4302      	orrs	r2, r0
 8002f1e:	d158      	bne.n	8002fd2 <__aeabi_dsub+0x486>
 8002f20:	4663      	mov	r3, ip
 8002f22:	000e      	movs	r6, r1
 8002f24:	9c02      	ldr	r4, [sp, #8]
 8002f26:	9303      	str	r3, [sp, #12]
 8002f28:	9b03      	ldr	r3, [sp, #12]
 8002f2a:	4657      	mov	r7, sl
 8002f2c:	08da      	lsrs	r2, r3, #3
 8002f2e:	e7e7      	b.n	8002f00 <__aeabi_dsub+0x3b4>
 8002f30:	4cc9      	ldr	r4, [pc, #804]	@ (8003258 <__aeabi_dsub+0x70c>)
 8002f32:	1aff      	subs	r7, r7, r3
 8002f34:	4014      	ands	r4, r2
 8002f36:	e692      	b.n	8002c5e <__aeabi_dsub+0x112>
 8002f38:	4dc8      	ldr	r5, [pc, #800]	@ (800325c <__aeabi_dsub+0x710>)
 8002f3a:	1c7a      	adds	r2, r7, #1
 8002f3c:	422a      	tst	r2, r5
 8002f3e:	d000      	beq.n	8002f42 <__aeabi_dsub+0x3f6>
 8002f40:	e084      	b.n	800304c <__aeabi_dsub+0x500>
 8002f42:	0022      	movs	r2, r4
 8002f44:	4302      	orrs	r2, r0
 8002f46:	2f00      	cmp	r7, #0
 8002f48:	d000      	beq.n	8002f4c <__aeabi_dsub+0x400>
 8002f4a:	e0ef      	b.n	800312c <__aeabi_dsub+0x5e0>
 8002f4c:	2a00      	cmp	r2, #0
 8002f4e:	d100      	bne.n	8002f52 <__aeabi_dsub+0x406>
 8002f50:	e0e5      	b.n	800311e <__aeabi_dsub+0x5d2>
 8002f52:	4662      	mov	r2, ip
 8002f54:	9902      	ldr	r1, [sp, #8]
 8002f56:	430a      	orrs	r2, r1
 8002f58:	d100      	bne.n	8002f5c <__aeabi_dsub+0x410>
 8002f5a:	e0c5      	b.n	80030e8 <__aeabi_dsub+0x59c>
 8002f5c:	4663      	mov	r3, ip
 8002f5e:	18c5      	adds	r5, r0, r3
 8002f60:	468c      	mov	ip, r1
 8002f62:	4285      	cmp	r5, r0
 8002f64:	4180      	sbcs	r0, r0
 8002f66:	4464      	add	r4, ip
 8002f68:	4240      	negs	r0, r0
 8002f6a:	1824      	adds	r4, r4, r0
 8002f6c:	0223      	lsls	r3, r4, #8
 8002f6e:	d502      	bpl.n	8002f76 <__aeabi_dsub+0x42a>
 8002f70:	4bb9      	ldr	r3, [pc, #740]	@ (8003258 <__aeabi_dsub+0x70c>)
 8002f72:	3701      	adds	r7, #1
 8002f74:	401c      	ands	r4, r3
 8002f76:	46ba      	mov	sl, r7
 8002f78:	9503      	str	r5, [sp, #12]
 8002f7a:	e7d5      	b.n	8002f28 <__aeabi_dsub+0x3dc>
 8002f7c:	4662      	mov	r2, ip
 8002f7e:	1a85      	subs	r5, r0, r2
 8002f80:	42a8      	cmp	r0, r5
 8002f82:	4192      	sbcs	r2, r2
 8002f84:	4252      	negs	r2, r2
 8002f86:	4691      	mov	r9, r2
 8002f88:	9b02      	ldr	r3, [sp, #8]
 8002f8a:	1ae3      	subs	r3, r4, r3
 8002f8c:	001a      	movs	r2, r3
 8002f8e:	464b      	mov	r3, r9
 8002f90:	1ad2      	subs	r2, r2, r3
 8002f92:	0013      	movs	r3, r2
 8002f94:	4691      	mov	r9, r2
 8002f96:	021a      	lsls	r2, r3, #8
 8002f98:	d46c      	bmi.n	8003074 <__aeabi_dsub+0x528>
 8002f9a:	464a      	mov	r2, r9
 8002f9c:	464c      	mov	r4, r9
 8002f9e:	432a      	orrs	r2, r5
 8002fa0:	d000      	beq.n	8002fa4 <__aeabi_dsub+0x458>
 8002fa2:	e63a      	b.n	8002c1a <__aeabi_dsub+0xce>
 8002fa4:	2600      	movs	r6, #0
 8002fa6:	2400      	movs	r4, #0
 8002fa8:	2500      	movs	r5, #0
 8002faa:	e678      	b.n	8002c9e <__aeabi_dsub+0x152>
 8002fac:	9902      	ldr	r1, [sp, #8]
 8002fae:	4653      	mov	r3, sl
 8002fb0:	000d      	movs	r5, r1
 8002fb2:	3a20      	subs	r2, #32
 8002fb4:	40d5      	lsrs	r5, r2
 8002fb6:	2b20      	cmp	r3, #32
 8002fb8:	d006      	beq.n	8002fc8 <__aeabi_dsub+0x47c>
 8002fba:	2240      	movs	r2, #64	@ 0x40
 8002fbc:	1ad2      	subs	r2, r2, r3
 8002fbe:	000b      	movs	r3, r1
 8002fc0:	4093      	lsls	r3, r2
 8002fc2:	4662      	mov	r2, ip
 8002fc4:	431a      	orrs	r2, r3
 8002fc6:	4693      	mov	fp, r2
 8002fc8:	465b      	mov	r3, fp
 8002fca:	1e5a      	subs	r2, r3, #1
 8002fcc:	4193      	sbcs	r3, r2
 8002fce:	431d      	orrs	r5, r3
 8002fd0:	e619      	b.n	8002c06 <__aeabi_dsub+0xba>
 8002fd2:	4653      	mov	r3, sl
 8002fd4:	1e5a      	subs	r2, r3, #1
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d100      	bne.n	8002fdc <__aeabi_dsub+0x490>
 8002fda:	e0c6      	b.n	800316a <__aeabi_dsub+0x61e>
 8002fdc:	4e9d      	ldr	r6, [pc, #628]	@ (8003254 <__aeabi_dsub+0x708>)
 8002fde:	45b2      	cmp	sl, r6
 8002fe0:	d100      	bne.n	8002fe4 <__aeabi_dsub+0x498>
 8002fe2:	e6bd      	b.n	8002d60 <__aeabi_dsub+0x214>
 8002fe4:	4688      	mov	r8, r1
 8002fe6:	000e      	movs	r6, r1
 8002fe8:	2501      	movs	r5, #1
 8002fea:	2a38      	cmp	r2, #56	@ 0x38
 8002fec:	dc10      	bgt.n	8003010 <__aeabi_dsub+0x4c4>
 8002fee:	2a1f      	cmp	r2, #31
 8002ff0:	dc7f      	bgt.n	80030f2 <__aeabi_dsub+0x5a6>
 8002ff2:	2120      	movs	r1, #32
 8002ff4:	0025      	movs	r5, r4
 8002ff6:	1a89      	subs	r1, r1, r2
 8002ff8:	0007      	movs	r7, r0
 8002ffa:	4088      	lsls	r0, r1
 8002ffc:	408d      	lsls	r5, r1
 8002ffe:	40d7      	lsrs	r7, r2
 8003000:	40d4      	lsrs	r4, r2
 8003002:	1e41      	subs	r1, r0, #1
 8003004:	4188      	sbcs	r0, r1
 8003006:	9b02      	ldr	r3, [sp, #8]
 8003008:	433d      	orrs	r5, r7
 800300a:	1b1b      	subs	r3, r3, r4
 800300c:	4305      	orrs	r5, r0
 800300e:	9302      	str	r3, [sp, #8]
 8003010:	4662      	mov	r2, ip
 8003012:	1b55      	subs	r5, r2, r5
 8003014:	45ac      	cmp	ip, r5
 8003016:	4192      	sbcs	r2, r2
 8003018:	9b02      	ldr	r3, [sp, #8]
 800301a:	4252      	negs	r2, r2
 800301c:	464f      	mov	r7, r9
 800301e:	1a9c      	subs	r4, r3, r2
 8003020:	e5f6      	b.n	8002c10 <__aeabi_dsub+0xc4>
 8003022:	2d00      	cmp	r5, #0
 8003024:	d000      	beq.n	8003028 <__aeabi_dsub+0x4dc>
 8003026:	e0b7      	b.n	8003198 <__aeabi_dsub+0x64c>
 8003028:	2a00      	cmp	r2, #0
 800302a:	d100      	bne.n	800302e <__aeabi_dsub+0x4e2>
 800302c:	e0f0      	b.n	8003210 <__aeabi_dsub+0x6c4>
 800302e:	2601      	movs	r6, #1
 8003030:	400e      	ands	r6, r1
 8003032:	4663      	mov	r3, ip
 8003034:	9802      	ldr	r0, [sp, #8]
 8003036:	08d9      	lsrs	r1, r3, #3
 8003038:	0742      	lsls	r2, r0, #29
 800303a:	430a      	orrs	r2, r1
 800303c:	08c4      	lsrs	r4, r0, #3
 800303e:	e696      	b.n	8002d6e <__aeabi_dsub+0x222>
 8003040:	4c85      	ldr	r4, [pc, #532]	@ (8003258 <__aeabi_dsub+0x70c>)
 8003042:	1aff      	subs	r7, r7, r3
 8003044:	4014      	ands	r4, r2
 8003046:	0762      	lsls	r2, r4, #29
 8003048:	08e4      	lsrs	r4, r4, #3
 800304a:	e760      	b.n	8002f0e <__aeabi_dsub+0x3c2>
 800304c:	4981      	ldr	r1, [pc, #516]	@ (8003254 <__aeabi_dsub+0x708>)
 800304e:	428a      	cmp	r2, r1
 8003050:	d100      	bne.n	8003054 <__aeabi_dsub+0x508>
 8003052:	e0c9      	b.n	80031e8 <__aeabi_dsub+0x69c>
 8003054:	4663      	mov	r3, ip
 8003056:	18c1      	adds	r1, r0, r3
 8003058:	4281      	cmp	r1, r0
 800305a:	4180      	sbcs	r0, r0
 800305c:	9b02      	ldr	r3, [sp, #8]
 800305e:	4240      	negs	r0, r0
 8003060:	18e3      	adds	r3, r4, r3
 8003062:	181b      	adds	r3, r3, r0
 8003064:	07dd      	lsls	r5, r3, #31
 8003066:	085c      	lsrs	r4, r3, #1
 8003068:	2307      	movs	r3, #7
 800306a:	0849      	lsrs	r1, r1, #1
 800306c:	430d      	orrs	r5, r1
 800306e:	0017      	movs	r7, r2
 8003070:	402b      	ands	r3, r5
 8003072:	e710      	b.n	8002e96 <__aeabi_dsub+0x34a>
 8003074:	4663      	mov	r3, ip
 8003076:	1a1d      	subs	r5, r3, r0
 8003078:	45ac      	cmp	ip, r5
 800307a:	4192      	sbcs	r2, r2
 800307c:	2601      	movs	r6, #1
 800307e:	9b02      	ldr	r3, [sp, #8]
 8003080:	4252      	negs	r2, r2
 8003082:	1b1c      	subs	r4, r3, r4
 8003084:	4688      	mov	r8, r1
 8003086:	1aa4      	subs	r4, r4, r2
 8003088:	400e      	ands	r6, r1
 800308a:	e5c6      	b.n	8002c1a <__aeabi_dsub+0xce>
 800308c:	4663      	mov	r3, ip
 800308e:	18c5      	adds	r5, r0, r3
 8003090:	9b02      	ldr	r3, [sp, #8]
 8003092:	4285      	cmp	r5, r0
 8003094:	4180      	sbcs	r0, r0
 8003096:	469c      	mov	ip, r3
 8003098:	4240      	negs	r0, r0
 800309a:	4464      	add	r4, ip
 800309c:	1824      	adds	r4, r4, r0
 800309e:	2701      	movs	r7, #1
 80030a0:	0223      	lsls	r3, r4, #8
 80030a2:	d400      	bmi.n	80030a6 <__aeabi_dsub+0x55a>
 80030a4:	e6f5      	b.n	8002e92 <__aeabi_dsub+0x346>
 80030a6:	2702      	movs	r7, #2
 80030a8:	e641      	b.n	8002d2e <__aeabi_dsub+0x1e2>
 80030aa:	4663      	mov	r3, ip
 80030ac:	1ac5      	subs	r5, r0, r3
 80030ae:	42a8      	cmp	r0, r5
 80030b0:	4180      	sbcs	r0, r0
 80030b2:	9b02      	ldr	r3, [sp, #8]
 80030b4:	4240      	negs	r0, r0
 80030b6:	1ae4      	subs	r4, r4, r3
 80030b8:	2701      	movs	r7, #1
 80030ba:	1a24      	subs	r4, r4, r0
 80030bc:	e5a8      	b.n	8002c10 <__aeabi_dsub+0xc4>
 80030be:	9d02      	ldr	r5, [sp, #8]
 80030c0:	4652      	mov	r2, sl
 80030c2:	002b      	movs	r3, r5
 80030c4:	3a20      	subs	r2, #32
 80030c6:	40d3      	lsrs	r3, r2
 80030c8:	0019      	movs	r1, r3
 80030ca:	4653      	mov	r3, sl
 80030cc:	2b20      	cmp	r3, #32
 80030ce:	d006      	beq.n	80030de <__aeabi_dsub+0x592>
 80030d0:	2240      	movs	r2, #64	@ 0x40
 80030d2:	1ad2      	subs	r2, r2, r3
 80030d4:	002b      	movs	r3, r5
 80030d6:	4093      	lsls	r3, r2
 80030d8:	4662      	mov	r2, ip
 80030da:	431a      	orrs	r2, r3
 80030dc:	4693      	mov	fp, r2
 80030de:	465d      	mov	r5, fp
 80030e0:	1e6b      	subs	r3, r5, #1
 80030e2:	419d      	sbcs	r5, r3
 80030e4:	430d      	orrs	r5, r1
 80030e6:	e615      	b.n	8002d14 <__aeabi_dsub+0x1c8>
 80030e8:	0762      	lsls	r2, r4, #29
 80030ea:	08c0      	lsrs	r0, r0, #3
 80030ec:	4302      	orrs	r2, r0
 80030ee:	08e4      	lsrs	r4, r4, #3
 80030f0:	e70d      	b.n	8002f0e <__aeabi_dsub+0x3c2>
 80030f2:	0011      	movs	r1, r2
 80030f4:	0027      	movs	r7, r4
 80030f6:	3920      	subs	r1, #32
 80030f8:	40cf      	lsrs	r7, r1
 80030fa:	2a20      	cmp	r2, #32
 80030fc:	d005      	beq.n	800310a <__aeabi_dsub+0x5be>
 80030fe:	2140      	movs	r1, #64	@ 0x40
 8003100:	1a8a      	subs	r2, r1, r2
 8003102:	4094      	lsls	r4, r2
 8003104:	0025      	movs	r5, r4
 8003106:	4305      	orrs	r5, r0
 8003108:	9503      	str	r5, [sp, #12]
 800310a:	9d03      	ldr	r5, [sp, #12]
 800310c:	1e6a      	subs	r2, r5, #1
 800310e:	4195      	sbcs	r5, r2
 8003110:	433d      	orrs	r5, r7
 8003112:	e77d      	b.n	8003010 <__aeabi_dsub+0x4c4>
 8003114:	2a00      	cmp	r2, #0
 8003116:	d100      	bne.n	800311a <__aeabi_dsub+0x5ce>
 8003118:	e744      	b.n	8002fa4 <__aeabi_dsub+0x458>
 800311a:	2601      	movs	r6, #1
 800311c:	400e      	ands	r6, r1
 800311e:	4663      	mov	r3, ip
 8003120:	08d9      	lsrs	r1, r3, #3
 8003122:	9b02      	ldr	r3, [sp, #8]
 8003124:	075a      	lsls	r2, r3, #29
 8003126:	430a      	orrs	r2, r1
 8003128:	08dc      	lsrs	r4, r3, #3
 800312a:	e6f0      	b.n	8002f0e <__aeabi_dsub+0x3c2>
 800312c:	2a00      	cmp	r2, #0
 800312e:	d028      	beq.n	8003182 <__aeabi_dsub+0x636>
 8003130:	4662      	mov	r2, ip
 8003132:	9f02      	ldr	r7, [sp, #8]
 8003134:	08c0      	lsrs	r0, r0, #3
 8003136:	433a      	orrs	r2, r7
 8003138:	d100      	bne.n	800313c <__aeabi_dsub+0x5f0>
 800313a:	e6dc      	b.n	8002ef6 <__aeabi_dsub+0x3aa>
 800313c:	0762      	lsls	r2, r4, #29
 800313e:	4310      	orrs	r0, r2
 8003140:	2280      	movs	r2, #128	@ 0x80
 8003142:	08e4      	lsrs	r4, r4, #3
 8003144:	0312      	lsls	r2, r2, #12
 8003146:	4214      	tst	r4, r2
 8003148:	d009      	beq.n	800315e <__aeabi_dsub+0x612>
 800314a:	08fd      	lsrs	r5, r7, #3
 800314c:	4215      	tst	r5, r2
 800314e:	d106      	bne.n	800315e <__aeabi_dsub+0x612>
 8003150:	4663      	mov	r3, ip
 8003152:	2601      	movs	r6, #1
 8003154:	002c      	movs	r4, r5
 8003156:	08d8      	lsrs	r0, r3, #3
 8003158:	077b      	lsls	r3, r7, #29
 800315a:	4318      	orrs	r0, r3
 800315c:	400e      	ands	r6, r1
 800315e:	0f42      	lsrs	r2, r0, #29
 8003160:	00c0      	lsls	r0, r0, #3
 8003162:	08c0      	lsrs	r0, r0, #3
 8003164:	0752      	lsls	r2, r2, #29
 8003166:	4302      	orrs	r2, r0
 8003168:	e601      	b.n	8002d6e <__aeabi_dsub+0x222>
 800316a:	4663      	mov	r3, ip
 800316c:	1a1d      	subs	r5, r3, r0
 800316e:	45ac      	cmp	ip, r5
 8003170:	4192      	sbcs	r2, r2
 8003172:	9b02      	ldr	r3, [sp, #8]
 8003174:	4252      	negs	r2, r2
 8003176:	1b1c      	subs	r4, r3, r4
 8003178:	000e      	movs	r6, r1
 800317a:	4688      	mov	r8, r1
 800317c:	2701      	movs	r7, #1
 800317e:	1aa4      	subs	r4, r4, r2
 8003180:	e546      	b.n	8002c10 <__aeabi_dsub+0xc4>
 8003182:	4663      	mov	r3, ip
 8003184:	08d9      	lsrs	r1, r3, #3
 8003186:	9b02      	ldr	r3, [sp, #8]
 8003188:	075a      	lsls	r2, r3, #29
 800318a:	430a      	orrs	r2, r1
 800318c:	08dc      	lsrs	r4, r3, #3
 800318e:	e5ee      	b.n	8002d6e <__aeabi_dsub+0x222>
 8003190:	4663      	mov	r3, ip
 8003192:	9c02      	ldr	r4, [sp, #8]
 8003194:	9303      	str	r3, [sp, #12]
 8003196:	e6c7      	b.n	8002f28 <__aeabi_dsub+0x3dc>
 8003198:	08c0      	lsrs	r0, r0, #3
 800319a:	2a00      	cmp	r2, #0
 800319c:	d100      	bne.n	80031a0 <__aeabi_dsub+0x654>
 800319e:	e6aa      	b.n	8002ef6 <__aeabi_dsub+0x3aa>
 80031a0:	0762      	lsls	r2, r4, #29
 80031a2:	4310      	orrs	r0, r2
 80031a4:	2280      	movs	r2, #128	@ 0x80
 80031a6:	08e4      	lsrs	r4, r4, #3
 80031a8:	0312      	lsls	r2, r2, #12
 80031aa:	4214      	tst	r4, r2
 80031ac:	d0d7      	beq.n	800315e <__aeabi_dsub+0x612>
 80031ae:	9f02      	ldr	r7, [sp, #8]
 80031b0:	08fd      	lsrs	r5, r7, #3
 80031b2:	4215      	tst	r5, r2
 80031b4:	d1d3      	bne.n	800315e <__aeabi_dsub+0x612>
 80031b6:	4663      	mov	r3, ip
 80031b8:	2601      	movs	r6, #1
 80031ba:	08d8      	lsrs	r0, r3, #3
 80031bc:	077b      	lsls	r3, r7, #29
 80031be:	002c      	movs	r4, r5
 80031c0:	4318      	orrs	r0, r3
 80031c2:	400e      	ands	r6, r1
 80031c4:	e7cb      	b.n	800315e <__aeabi_dsub+0x612>
 80031c6:	000a      	movs	r2, r1
 80031c8:	0027      	movs	r7, r4
 80031ca:	3a20      	subs	r2, #32
 80031cc:	40d7      	lsrs	r7, r2
 80031ce:	2920      	cmp	r1, #32
 80031d0:	d005      	beq.n	80031de <__aeabi_dsub+0x692>
 80031d2:	2240      	movs	r2, #64	@ 0x40
 80031d4:	1a52      	subs	r2, r2, r1
 80031d6:	4094      	lsls	r4, r2
 80031d8:	0025      	movs	r5, r4
 80031da:	4305      	orrs	r5, r0
 80031dc:	9503      	str	r5, [sp, #12]
 80031de:	9d03      	ldr	r5, [sp, #12]
 80031e0:	1e6a      	subs	r2, r5, #1
 80031e2:	4195      	sbcs	r5, r2
 80031e4:	432f      	orrs	r7, r5
 80031e6:	e610      	b.n	8002e0a <__aeabi_dsub+0x2be>
 80031e8:	0014      	movs	r4, r2
 80031ea:	2500      	movs	r5, #0
 80031ec:	2200      	movs	r2, #0
 80031ee:	e556      	b.n	8002c9e <__aeabi_dsub+0x152>
 80031f0:	9b02      	ldr	r3, [sp, #8]
 80031f2:	4460      	add	r0, ip
 80031f4:	4699      	mov	r9, r3
 80031f6:	4560      	cmp	r0, ip
 80031f8:	4192      	sbcs	r2, r2
 80031fa:	444c      	add	r4, r9
 80031fc:	4252      	negs	r2, r2
 80031fe:	0005      	movs	r5, r0
 8003200:	18a4      	adds	r4, r4, r2
 8003202:	e74c      	b.n	800309e <__aeabi_dsub+0x552>
 8003204:	001a      	movs	r2, r3
 8003206:	001c      	movs	r4, r3
 8003208:	432a      	orrs	r2, r5
 800320a:	d000      	beq.n	800320e <__aeabi_dsub+0x6c2>
 800320c:	e6b3      	b.n	8002f76 <__aeabi_dsub+0x42a>
 800320e:	e6c9      	b.n	8002fa4 <__aeabi_dsub+0x458>
 8003210:	2480      	movs	r4, #128	@ 0x80
 8003212:	2600      	movs	r6, #0
 8003214:	0324      	lsls	r4, r4, #12
 8003216:	e5ae      	b.n	8002d76 <__aeabi_dsub+0x22a>
 8003218:	2120      	movs	r1, #32
 800321a:	2500      	movs	r5, #0
 800321c:	1a09      	subs	r1, r1, r0
 800321e:	e517      	b.n	8002c50 <__aeabi_dsub+0x104>
 8003220:	2200      	movs	r2, #0
 8003222:	2500      	movs	r5, #0
 8003224:	4c0b      	ldr	r4, [pc, #44]	@ (8003254 <__aeabi_dsub+0x708>)
 8003226:	e53a      	b.n	8002c9e <__aeabi_dsub+0x152>
 8003228:	2d00      	cmp	r5, #0
 800322a:	d100      	bne.n	800322e <__aeabi_dsub+0x6e2>
 800322c:	e5f6      	b.n	8002e1c <__aeabi_dsub+0x2d0>
 800322e:	464b      	mov	r3, r9
 8003230:	1bda      	subs	r2, r3, r7
 8003232:	4692      	mov	sl, r2
 8003234:	2f00      	cmp	r7, #0
 8003236:	d100      	bne.n	800323a <__aeabi_dsub+0x6ee>
 8003238:	e66f      	b.n	8002f1a <__aeabi_dsub+0x3ce>
 800323a:	2a38      	cmp	r2, #56	@ 0x38
 800323c:	dc05      	bgt.n	800324a <__aeabi_dsub+0x6fe>
 800323e:	2680      	movs	r6, #128	@ 0x80
 8003240:	0436      	lsls	r6, r6, #16
 8003242:	4334      	orrs	r4, r6
 8003244:	4688      	mov	r8, r1
 8003246:	000e      	movs	r6, r1
 8003248:	e6d1      	b.n	8002fee <__aeabi_dsub+0x4a2>
 800324a:	4688      	mov	r8, r1
 800324c:	000e      	movs	r6, r1
 800324e:	2501      	movs	r5, #1
 8003250:	e6de      	b.n	8003010 <__aeabi_dsub+0x4c4>
 8003252:	46c0      	nop			@ (mov r8, r8)
 8003254:	000007ff 	.word	0x000007ff
 8003258:	ff7fffff 	.word	0xff7fffff
 800325c:	000007fe 	.word	0x000007fe
 8003260:	2d00      	cmp	r5, #0
 8003262:	d100      	bne.n	8003266 <__aeabi_dsub+0x71a>
 8003264:	e668      	b.n	8002f38 <__aeabi_dsub+0x3ec>
 8003266:	464b      	mov	r3, r9
 8003268:	1bd9      	subs	r1, r3, r7
 800326a:	2f00      	cmp	r7, #0
 800326c:	d101      	bne.n	8003272 <__aeabi_dsub+0x726>
 800326e:	468a      	mov	sl, r1
 8003270:	e5a7      	b.n	8002dc2 <__aeabi_dsub+0x276>
 8003272:	2701      	movs	r7, #1
 8003274:	2938      	cmp	r1, #56	@ 0x38
 8003276:	dd00      	ble.n	800327a <__aeabi_dsub+0x72e>
 8003278:	e5c7      	b.n	8002e0a <__aeabi_dsub+0x2be>
 800327a:	2280      	movs	r2, #128	@ 0x80
 800327c:	0412      	lsls	r2, r2, #16
 800327e:	4314      	orrs	r4, r2
 8003280:	e5af      	b.n	8002de2 <__aeabi_dsub+0x296>
 8003282:	46c0      	nop			@ (mov r8, r8)

08003284 <__aeabi_dcmpun>:
 8003284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003286:	46c6      	mov	lr, r8
 8003288:	031e      	lsls	r6, r3, #12
 800328a:	0b36      	lsrs	r6, r6, #12
 800328c:	46b0      	mov	r8, r6
 800328e:	4e0d      	ldr	r6, [pc, #52]	@ (80032c4 <__aeabi_dcmpun+0x40>)
 8003290:	030c      	lsls	r4, r1, #12
 8003292:	004d      	lsls	r5, r1, #1
 8003294:	005f      	lsls	r7, r3, #1
 8003296:	b500      	push	{lr}
 8003298:	0b24      	lsrs	r4, r4, #12
 800329a:	0d6d      	lsrs	r5, r5, #21
 800329c:	0d7f      	lsrs	r7, r7, #21
 800329e:	42b5      	cmp	r5, r6
 80032a0:	d00b      	beq.n	80032ba <__aeabi_dcmpun+0x36>
 80032a2:	4908      	ldr	r1, [pc, #32]	@ (80032c4 <__aeabi_dcmpun+0x40>)
 80032a4:	2000      	movs	r0, #0
 80032a6:	428f      	cmp	r7, r1
 80032a8:	d104      	bne.n	80032b4 <__aeabi_dcmpun+0x30>
 80032aa:	4646      	mov	r6, r8
 80032ac:	4316      	orrs	r6, r2
 80032ae:	0030      	movs	r0, r6
 80032b0:	1e43      	subs	r3, r0, #1
 80032b2:	4198      	sbcs	r0, r3
 80032b4:	bc80      	pop	{r7}
 80032b6:	46b8      	mov	r8, r7
 80032b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032ba:	4304      	orrs	r4, r0
 80032bc:	2001      	movs	r0, #1
 80032be:	2c00      	cmp	r4, #0
 80032c0:	d1f8      	bne.n	80032b4 <__aeabi_dcmpun+0x30>
 80032c2:	e7ee      	b.n	80032a2 <__aeabi_dcmpun+0x1e>
 80032c4:	000007ff 	.word	0x000007ff

080032c8 <__aeabi_d2iz>:
 80032c8:	000b      	movs	r3, r1
 80032ca:	0002      	movs	r2, r0
 80032cc:	b570      	push	{r4, r5, r6, lr}
 80032ce:	4d16      	ldr	r5, [pc, #88]	@ (8003328 <__aeabi_d2iz+0x60>)
 80032d0:	030c      	lsls	r4, r1, #12
 80032d2:	b082      	sub	sp, #8
 80032d4:	0049      	lsls	r1, r1, #1
 80032d6:	2000      	movs	r0, #0
 80032d8:	9200      	str	r2, [sp, #0]
 80032da:	9301      	str	r3, [sp, #4]
 80032dc:	0b24      	lsrs	r4, r4, #12
 80032de:	0d49      	lsrs	r1, r1, #21
 80032e0:	0fde      	lsrs	r6, r3, #31
 80032e2:	42a9      	cmp	r1, r5
 80032e4:	dd04      	ble.n	80032f0 <__aeabi_d2iz+0x28>
 80032e6:	4811      	ldr	r0, [pc, #68]	@ (800332c <__aeabi_d2iz+0x64>)
 80032e8:	4281      	cmp	r1, r0
 80032ea:	dd03      	ble.n	80032f4 <__aeabi_d2iz+0x2c>
 80032ec:	4b10      	ldr	r3, [pc, #64]	@ (8003330 <__aeabi_d2iz+0x68>)
 80032ee:	18f0      	adds	r0, r6, r3
 80032f0:	b002      	add	sp, #8
 80032f2:	bd70      	pop	{r4, r5, r6, pc}
 80032f4:	2080      	movs	r0, #128	@ 0x80
 80032f6:	0340      	lsls	r0, r0, #13
 80032f8:	4320      	orrs	r0, r4
 80032fa:	4c0e      	ldr	r4, [pc, #56]	@ (8003334 <__aeabi_d2iz+0x6c>)
 80032fc:	1a64      	subs	r4, r4, r1
 80032fe:	2c1f      	cmp	r4, #31
 8003300:	dd08      	ble.n	8003314 <__aeabi_d2iz+0x4c>
 8003302:	4b0d      	ldr	r3, [pc, #52]	@ (8003338 <__aeabi_d2iz+0x70>)
 8003304:	1a5b      	subs	r3, r3, r1
 8003306:	40d8      	lsrs	r0, r3
 8003308:	0003      	movs	r3, r0
 800330a:	4258      	negs	r0, r3
 800330c:	2e00      	cmp	r6, #0
 800330e:	d1ef      	bne.n	80032f0 <__aeabi_d2iz+0x28>
 8003310:	0018      	movs	r0, r3
 8003312:	e7ed      	b.n	80032f0 <__aeabi_d2iz+0x28>
 8003314:	4b09      	ldr	r3, [pc, #36]	@ (800333c <__aeabi_d2iz+0x74>)
 8003316:	9a00      	ldr	r2, [sp, #0]
 8003318:	469c      	mov	ip, r3
 800331a:	0003      	movs	r3, r0
 800331c:	4461      	add	r1, ip
 800331e:	408b      	lsls	r3, r1
 8003320:	40e2      	lsrs	r2, r4
 8003322:	4313      	orrs	r3, r2
 8003324:	e7f1      	b.n	800330a <__aeabi_d2iz+0x42>
 8003326:	46c0      	nop			@ (mov r8, r8)
 8003328:	000003fe 	.word	0x000003fe
 800332c:	0000041d 	.word	0x0000041d
 8003330:	7fffffff 	.word	0x7fffffff
 8003334:	00000433 	.word	0x00000433
 8003338:	00000413 	.word	0x00000413
 800333c:	fffffbed 	.word	0xfffffbed

08003340 <__aeabi_i2d>:
 8003340:	b570      	push	{r4, r5, r6, lr}
 8003342:	2800      	cmp	r0, #0
 8003344:	d016      	beq.n	8003374 <__aeabi_i2d+0x34>
 8003346:	17c3      	asrs	r3, r0, #31
 8003348:	18c5      	adds	r5, r0, r3
 800334a:	405d      	eors	r5, r3
 800334c:	0fc4      	lsrs	r4, r0, #31
 800334e:	0028      	movs	r0, r5
 8003350:	f000 f914 	bl	800357c <__clzsi2>
 8003354:	4b10      	ldr	r3, [pc, #64]	@ (8003398 <__aeabi_i2d+0x58>)
 8003356:	1a1b      	subs	r3, r3, r0
 8003358:	055b      	lsls	r3, r3, #21
 800335a:	0d5b      	lsrs	r3, r3, #21
 800335c:	280a      	cmp	r0, #10
 800335e:	dc14      	bgt.n	800338a <__aeabi_i2d+0x4a>
 8003360:	0002      	movs	r2, r0
 8003362:	002e      	movs	r6, r5
 8003364:	3215      	adds	r2, #21
 8003366:	4096      	lsls	r6, r2
 8003368:	220b      	movs	r2, #11
 800336a:	1a12      	subs	r2, r2, r0
 800336c:	40d5      	lsrs	r5, r2
 800336e:	032d      	lsls	r5, r5, #12
 8003370:	0b2d      	lsrs	r5, r5, #12
 8003372:	e003      	b.n	800337c <__aeabi_i2d+0x3c>
 8003374:	2400      	movs	r4, #0
 8003376:	2300      	movs	r3, #0
 8003378:	2500      	movs	r5, #0
 800337a:	2600      	movs	r6, #0
 800337c:	051b      	lsls	r3, r3, #20
 800337e:	432b      	orrs	r3, r5
 8003380:	07e4      	lsls	r4, r4, #31
 8003382:	4323      	orrs	r3, r4
 8003384:	0030      	movs	r0, r6
 8003386:	0019      	movs	r1, r3
 8003388:	bd70      	pop	{r4, r5, r6, pc}
 800338a:	380b      	subs	r0, #11
 800338c:	4085      	lsls	r5, r0
 800338e:	032d      	lsls	r5, r5, #12
 8003390:	2600      	movs	r6, #0
 8003392:	0b2d      	lsrs	r5, r5, #12
 8003394:	e7f2      	b.n	800337c <__aeabi_i2d+0x3c>
 8003396:	46c0      	nop			@ (mov r8, r8)
 8003398:	0000041e 	.word	0x0000041e

0800339c <__aeabi_ui2d>:
 800339c:	b510      	push	{r4, lr}
 800339e:	1e04      	subs	r4, r0, #0
 80033a0:	d010      	beq.n	80033c4 <__aeabi_ui2d+0x28>
 80033a2:	f000 f8eb 	bl	800357c <__clzsi2>
 80033a6:	4b0e      	ldr	r3, [pc, #56]	@ (80033e0 <__aeabi_ui2d+0x44>)
 80033a8:	1a1b      	subs	r3, r3, r0
 80033aa:	055b      	lsls	r3, r3, #21
 80033ac:	0d5b      	lsrs	r3, r3, #21
 80033ae:	280a      	cmp	r0, #10
 80033b0:	dc0f      	bgt.n	80033d2 <__aeabi_ui2d+0x36>
 80033b2:	220b      	movs	r2, #11
 80033b4:	0021      	movs	r1, r4
 80033b6:	1a12      	subs	r2, r2, r0
 80033b8:	40d1      	lsrs	r1, r2
 80033ba:	3015      	adds	r0, #21
 80033bc:	030a      	lsls	r2, r1, #12
 80033be:	4084      	lsls	r4, r0
 80033c0:	0b12      	lsrs	r2, r2, #12
 80033c2:	e001      	b.n	80033c8 <__aeabi_ui2d+0x2c>
 80033c4:	2300      	movs	r3, #0
 80033c6:	2200      	movs	r2, #0
 80033c8:	051b      	lsls	r3, r3, #20
 80033ca:	4313      	orrs	r3, r2
 80033cc:	0020      	movs	r0, r4
 80033ce:	0019      	movs	r1, r3
 80033d0:	bd10      	pop	{r4, pc}
 80033d2:	0022      	movs	r2, r4
 80033d4:	380b      	subs	r0, #11
 80033d6:	4082      	lsls	r2, r0
 80033d8:	0312      	lsls	r2, r2, #12
 80033da:	2400      	movs	r4, #0
 80033dc:	0b12      	lsrs	r2, r2, #12
 80033de:	e7f3      	b.n	80033c8 <__aeabi_ui2d+0x2c>
 80033e0:	0000041e 	.word	0x0000041e

080033e4 <__aeabi_f2d>:
 80033e4:	b570      	push	{r4, r5, r6, lr}
 80033e6:	0242      	lsls	r2, r0, #9
 80033e8:	0043      	lsls	r3, r0, #1
 80033ea:	0fc4      	lsrs	r4, r0, #31
 80033ec:	20fe      	movs	r0, #254	@ 0xfe
 80033ee:	0e1b      	lsrs	r3, r3, #24
 80033f0:	1c59      	adds	r1, r3, #1
 80033f2:	0a55      	lsrs	r5, r2, #9
 80033f4:	4208      	tst	r0, r1
 80033f6:	d00c      	beq.n	8003412 <__aeabi_f2d+0x2e>
 80033f8:	21e0      	movs	r1, #224	@ 0xe0
 80033fa:	0089      	lsls	r1, r1, #2
 80033fc:	468c      	mov	ip, r1
 80033fe:	076d      	lsls	r5, r5, #29
 8003400:	0b12      	lsrs	r2, r2, #12
 8003402:	4463      	add	r3, ip
 8003404:	051b      	lsls	r3, r3, #20
 8003406:	4313      	orrs	r3, r2
 8003408:	07e4      	lsls	r4, r4, #31
 800340a:	4323      	orrs	r3, r4
 800340c:	0028      	movs	r0, r5
 800340e:	0019      	movs	r1, r3
 8003410:	bd70      	pop	{r4, r5, r6, pc}
 8003412:	2b00      	cmp	r3, #0
 8003414:	d114      	bne.n	8003440 <__aeabi_f2d+0x5c>
 8003416:	2d00      	cmp	r5, #0
 8003418:	d01b      	beq.n	8003452 <__aeabi_f2d+0x6e>
 800341a:	0028      	movs	r0, r5
 800341c:	f000 f8ae 	bl	800357c <__clzsi2>
 8003420:	280a      	cmp	r0, #10
 8003422:	dc1c      	bgt.n	800345e <__aeabi_f2d+0x7a>
 8003424:	230b      	movs	r3, #11
 8003426:	002a      	movs	r2, r5
 8003428:	1a1b      	subs	r3, r3, r0
 800342a:	40da      	lsrs	r2, r3
 800342c:	0003      	movs	r3, r0
 800342e:	3315      	adds	r3, #21
 8003430:	409d      	lsls	r5, r3
 8003432:	4b0e      	ldr	r3, [pc, #56]	@ (800346c <__aeabi_f2d+0x88>)
 8003434:	0312      	lsls	r2, r2, #12
 8003436:	1a1b      	subs	r3, r3, r0
 8003438:	055b      	lsls	r3, r3, #21
 800343a:	0b12      	lsrs	r2, r2, #12
 800343c:	0d5b      	lsrs	r3, r3, #21
 800343e:	e7e1      	b.n	8003404 <__aeabi_f2d+0x20>
 8003440:	2d00      	cmp	r5, #0
 8003442:	d009      	beq.n	8003458 <__aeabi_f2d+0x74>
 8003444:	0b13      	lsrs	r3, r2, #12
 8003446:	2280      	movs	r2, #128	@ 0x80
 8003448:	0312      	lsls	r2, r2, #12
 800344a:	431a      	orrs	r2, r3
 800344c:	076d      	lsls	r5, r5, #29
 800344e:	4b08      	ldr	r3, [pc, #32]	@ (8003470 <__aeabi_f2d+0x8c>)
 8003450:	e7d8      	b.n	8003404 <__aeabi_f2d+0x20>
 8003452:	2300      	movs	r3, #0
 8003454:	2200      	movs	r2, #0
 8003456:	e7d5      	b.n	8003404 <__aeabi_f2d+0x20>
 8003458:	2200      	movs	r2, #0
 800345a:	4b05      	ldr	r3, [pc, #20]	@ (8003470 <__aeabi_f2d+0x8c>)
 800345c:	e7d2      	b.n	8003404 <__aeabi_f2d+0x20>
 800345e:	0003      	movs	r3, r0
 8003460:	002a      	movs	r2, r5
 8003462:	3b0b      	subs	r3, #11
 8003464:	409a      	lsls	r2, r3
 8003466:	2500      	movs	r5, #0
 8003468:	e7e3      	b.n	8003432 <__aeabi_f2d+0x4e>
 800346a:	46c0      	nop			@ (mov r8, r8)
 800346c:	00000389 	.word	0x00000389
 8003470:	000007ff 	.word	0x000007ff

08003474 <__aeabi_d2f>:
 8003474:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003476:	004b      	lsls	r3, r1, #1
 8003478:	030f      	lsls	r7, r1, #12
 800347a:	0d5b      	lsrs	r3, r3, #21
 800347c:	4c3b      	ldr	r4, [pc, #236]	@ (800356c <__aeabi_d2f+0xf8>)
 800347e:	0f45      	lsrs	r5, r0, #29
 8003480:	b083      	sub	sp, #12
 8003482:	0a7f      	lsrs	r7, r7, #9
 8003484:	1c5e      	adds	r6, r3, #1
 8003486:	432f      	orrs	r7, r5
 8003488:	9000      	str	r0, [sp, #0]
 800348a:	9101      	str	r1, [sp, #4]
 800348c:	0fca      	lsrs	r2, r1, #31
 800348e:	00c5      	lsls	r5, r0, #3
 8003490:	4226      	tst	r6, r4
 8003492:	d00b      	beq.n	80034ac <__aeabi_d2f+0x38>
 8003494:	4936      	ldr	r1, [pc, #216]	@ (8003570 <__aeabi_d2f+0xfc>)
 8003496:	185c      	adds	r4, r3, r1
 8003498:	2cfe      	cmp	r4, #254	@ 0xfe
 800349a:	dd13      	ble.n	80034c4 <__aeabi_d2f+0x50>
 800349c:	20ff      	movs	r0, #255	@ 0xff
 800349e:	2300      	movs	r3, #0
 80034a0:	05c0      	lsls	r0, r0, #23
 80034a2:	4318      	orrs	r0, r3
 80034a4:	07d2      	lsls	r2, r2, #31
 80034a6:	4310      	orrs	r0, r2
 80034a8:	b003      	add	sp, #12
 80034aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d102      	bne.n	80034b6 <__aeabi_d2f+0x42>
 80034b0:	2000      	movs	r0, #0
 80034b2:	2300      	movs	r3, #0
 80034b4:	e7f4      	b.n	80034a0 <__aeabi_d2f+0x2c>
 80034b6:	433d      	orrs	r5, r7
 80034b8:	d0f0      	beq.n	800349c <__aeabi_d2f+0x28>
 80034ba:	2380      	movs	r3, #128	@ 0x80
 80034bc:	03db      	lsls	r3, r3, #15
 80034be:	20ff      	movs	r0, #255	@ 0xff
 80034c0:	433b      	orrs	r3, r7
 80034c2:	e7ed      	b.n	80034a0 <__aeabi_d2f+0x2c>
 80034c4:	2c00      	cmp	r4, #0
 80034c6:	dd14      	ble.n	80034f2 <__aeabi_d2f+0x7e>
 80034c8:	9b00      	ldr	r3, [sp, #0]
 80034ca:	00ff      	lsls	r7, r7, #3
 80034cc:	019b      	lsls	r3, r3, #6
 80034ce:	1e58      	subs	r0, r3, #1
 80034d0:	4183      	sbcs	r3, r0
 80034d2:	0f69      	lsrs	r1, r5, #29
 80034d4:	433b      	orrs	r3, r7
 80034d6:	430b      	orrs	r3, r1
 80034d8:	0759      	lsls	r1, r3, #29
 80034da:	d041      	beq.n	8003560 <__aeabi_d2f+0xec>
 80034dc:	210f      	movs	r1, #15
 80034de:	4019      	ands	r1, r3
 80034e0:	2904      	cmp	r1, #4
 80034e2:	d028      	beq.n	8003536 <__aeabi_d2f+0xc2>
 80034e4:	3304      	adds	r3, #4
 80034e6:	0159      	lsls	r1, r3, #5
 80034e8:	d525      	bpl.n	8003536 <__aeabi_d2f+0xc2>
 80034ea:	3401      	adds	r4, #1
 80034ec:	2300      	movs	r3, #0
 80034ee:	b2e0      	uxtb	r0, r4
 80034f0:	e7d6      	b.n	80034a0 <__aeabi_d2f+0x2c>
 80034f2:	0021      	movs	r1, r4
 80034f4:	3117      	adds	r1, #23
 80034f6:	dbdb      	blt.n	80034b0 <__aeabi_d2f+0x3c>
 80034f8:	2180      	movs	r1, #128	@ 0x80
 80034fa:	201e      	movs	r0, #30
 80034fc:	0409      	lsls	r1, r1, #16
 80034fe:	4339      	orrs	r1, r7
 8003500:	1b00      	subs	r0, r0, r4
 8003502:	281f      	cmp	r0, #31
 8003504:	dd1b      	ble.n	800353e <__aeabi_d2f+0xca>
 8003506:	2602      	movs	r6, #2
 8003508:	4276      	negs	r6, r6
 800350a:	1b34      	subs	r4, r6, r4
 800350c:	000e      	movs	r6, r1
 800350e:	40e6      	lsrs	r6, r4
 8003510:	0034      	movs	r4, r6
 8003512:	2820      	cmp	r0, #32
 8003514:	d004      	beq.n	8003520 <__aeabi_d2f+0xac>
 8003516:	4817      	ldr	r0, [pc, #92]	@ (8003574 <__aeabi_d2f+0x100>)
 8003518:	4684      	mov	ip, r0
 800351a:	4463      	add	r3, ip
 800351c:	4099      	lsls	r1, r3
 800351e:	430d      	orrs	r5, r1
 8003520:	002b      	movs	r3, r5
 8003522:	1e59      	subs	r1, r3, #1
 8003524:	418b      	sbcs	r3, r1
 8003526:	4323      	orrs	r3, r4
 8003528:	0759      	lsls	r1, r3, #29
 800352a:	d015      	beq.n	8003558 <__aeabi_d2f+0xe4>
 800352c:	210f      	movs	r1, #15
 800352e:	2400      	movs	r4, #0
 8003530:	4019      	ands	r1, r3
 8003532:	2904      	cmp	r1, #4
 8003534:	d117      	bne.n	8003566 <__aeabi_d2f+0xf2>
 8003536:	019b      	lsls	r3, r3, #6
 8003538:	0a5b      	lsrs	r3, r3, #9
 800353a:	b2e0      	uxtb	r0, r4
 800353c:	e7b0      	b.n	80034a0 <__aeabi_d2f+0x2c>
 800353e:	4c0e      	ldr	r4, [pc, #56]	@ (8003578 <__aeabi_d2f+0x104>)
 8003540:	191c      	adds	r4, r3, r4
 8003542:	002b      	movs	r3, r5
 8003544:	40a5      	lsls	r5, r4
 8003546:	40c3      	lsrs	r3, r0
 8003548:	40a1      	lsls	r1, r4
 800354a:	1e68      	subs	r0, r5, #1
 800354c:	4185      	sbcs	r5, r0
 800354e:	4329      	orrs	r1, r5
 8003550:	430b      	orrs	r3, r1
 8003552:	2400      	movs	r4, #0
 8003554:	0759      	lsls	r1, r3, #29
 8003556:	d1c1      	bne.n	80034dc <__aeabi_d2f+0x68>
 8003558:	019b      	lsls	r3, r3, #6
 800355a:	2000      	movs	r0, #0
 800355c:	0a5b      	lsrs	r3, r3, #9
 800355e:	e79f      	b.n	80034a0 <__aeabi_d2f+0x2c>
 8003560:	08db      	lsrs	r3, r3, #3
 8003562:	b2e0      	uxtb	r0, r4
 8003564:	e79c      	b.n	80034a0 <__aeabi_d2f+0x2c>
 8003566:	3304      	adds	r3, #4
 8003568:	e7e5      	b.n	8003536 <__aeabi_d2f+0xc2>
 800356a:	46c0      	nop			@ (mov r8, r8)
 800356c:	000007fe 	.word	0x000007fe
 8003570:	fffffc80 	.word	0xfffffc80
 8003574:	fffffca2 	.word	0xfffffca2
 8003578:	fffffc82 	.word	0xfffffc82

0800357c <__clzsi2>:
 800357c:	211c      	movs	r1, #28
 800357e:	2301      	movs	r3, #1
 8003580:	041b      	lsls	r3, r3, #16
 8003582:	4298      	cmp	r0, r3
 8003584:	d301      	bcc.n	800358a <__clzsi2+0xe>
 8003586:	0c00      	lsrs	r0, r0, #16
 8003588:	3910      	subs	r1, #16
 800358a:	0a1b      	lsrs	r3, r3, #8
 800358c:	4298      	cmp	r0, r3
 800358e:	d301      	bcc.n	8003594 <__clzsi2+0x18>
 8003590:	0a00      	lsrs	r0, r0, #8
 8003592:	3908      	subs	r1, #8
 8003594:	091b      	lsrs	r3, r3, #4
 8003596:	4298      	cmp	r0, r3
 8003598:	d301      	bcc.n	800359e <__clzsi2+0x22>
 800359a:	0900      	lsrs	r0, r0, #4
 800359c:	3904      	subs	r1, #4
 800359e:	a202      	add	r2, pc, #8	@ (adr r2, 80035a8 <__clzsi2+0x2c>)
 80035a0:	5c10      	ldrb	r0, [r2, r0]
 80035a2:	1840      	adds	r0, r0, r1
 80035a4:	4770      	bx	lr
 80035a6:	46c0      	nop			@ (mov r8, r8)
 80035a8:	02020304 	.word	0x02020304
 80035ac:	01010101 	.word	0x01010101
	...

080035b8 <__clzdi2>:
 80035b8:	b510      	push	{r4, lr}
 80035ba:	2900      	cmp	r1, #0
 80035bc:	d103      	bne.n	80035c6 <__clzdi2+0xe>
 80035be:	f7ff ffdd 	bl	800357c <__clzsi2>
 80035c2:	3020      	adds	r0, #32
 80035c4:	e002      	b.n	80035cc <__clzdi2+0x14>
 80035c6:	0008      	movs	r0, r1
 80035c8:	f7ff ffd8 	bl	800357c <__clzsi2>
 80035cc:	bd10      	pop	{r4, pc}
 80035ce:	46c0      	nop			@ (mov r8, r8)

080035d0 <drawPixel>:
extern uint8_t _rowstart;       ///< Some displays need this changed to offset
extern uint8_t _xstart;
extern uint8_t _ystart;

void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 80035d0:	b590      	push	{r4, r7, lr}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	0004      	movs	r4, r0
 80035d8:	0008      	movs	r0, r1
 80035da:	0011      	movs	r1, r2
 80035dc:	1dbb      	adds	r3, r7, #6
 80035de:	1c22      	adds	r2, r4, #0
 80035e0:	801a      	strh	r2, [r3, #0]
 80035e2:	1d3b      	adds	r3, r7, #4
 80035e4:	1c02      	adds	r2, r0, #0
 80035e6:	801a      	strh	r2, [r3, #0]
 80035e8:	1cbb      	adds	r3, r7, #2
 80035ea:	1c0a      	adds	r2, r1, #0
 80035ec:	801a      	strh	r2, [r3, #0]
	ST7735_DrawPixel(y,x, color);
 80035ee:	1d3b      	adds	r3, r7, #4
 80035f0:	8818      	ldrh	r0, [r3, #0]
 80035f2:	1dbb      	adds	r3, r7, #6
 80035f4:	8819      	ldrh	r1, [r3, #0]
 80035f6:	1cbb      	adds	r3, r7, #2
 80035f8:	881b      	ldrh	r3, [r3, #0]
 80035fa:	001a      	movs	r2, r3
 80035fc:	f000 fd00 	bl	8004000 <ST7735_DrawPixel>
}
 8003600:	46c0      	nop			@ (mov r8, r8)
 8003602:	46bd      	mov	sp, r7
 8003604:	b003      	add	sp, #12
 8003606:	bd90      	pop	{r4, r7, pc}

08003608 <fillRect>:

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8003608:	b5f0      	push	{r4, r5, r6, r7, lr}
 800360a:	46c6      	mov	lr, r8
 800360c:	b500      	push	{lr}
 800360e:	b090      	sub	sp, #64	@ 0x40
 8003610:	af04      	add	r7, sp, #16
 8003612:	468c      	mov	ip, r1
 8003614:	0016      	movs	r6, r2
 8003616:	0019      	movs	r1, r3
 8003618:	221e      	movs	r2, #30
 800361a:	18ba      	adds	r2, r7, r2
 800361c:	1c03      	adds	r3, r0, #0
 800361e:	8013      	strh	r3, [r2, #0]
 8003620:	231c      	movs	r3, #28
 8003622:	18fb      	adds	r3, r7, r3
 8003624:	4662      	mov	r2, ip
 8003626:	801a      	strh	r2, [r3, #0]
 8003628:	201a      	movs	r0, #26
 800362a:	183b      	adds	r3, r7, r0
 800362c:	1c32      	adds	r2, r6, #0
 800362e:	801a      	strh	r2, [r3, #0]
 8003630:	2018      	movs	r0, #24
 8003632:	183b      	adds	r3, r7, r0
 8003634:	1c0a      	adds	r2, r1, #0
 8003636:	801a      	strh	r2, [r3, #0]
 8003638:	466b      	mov	r3, sp
 800363a:	4698      	mov	r8, r3
	uint16_t pallette[] = {color};
 800363c:	230c      	movs	r3, #12
 800363e:	0001      	movs	r1, r0
 8003640:	185e      	adds	r6, r3, r1
 8003642:	19f2      	adds	r2, r6, r7
 8003644:	2030      	movs	r0, #48	@ 0x30
 8003646:	1846      	adds	r6, r0, r1
 8003648:	19f3      	adds	r3, r6, r7
 800364a:	881b      	ldrh	r3, [r3, #0]
 800364c:	8013      	strh	r3, [r2, #0]
	    uint16_t pixels[w*h][2];
 800364e:	201a      	movs	r0, #26
 8003650:	183b      	adds	r3, r7, r0
 8003652:	2200      	movs	r2, #0
 8003654:	5e9b      	ldrsh	r3, [r3, r2]
 8003656:	187a      	adds	r2, r7, r1
 8003658:	2000      	movs	r0, #0
 800365a:	5e12      	ldrsh	r2, [r2, r0]
 800365c:	4353      	muls	r3, r2
 800365e:	1e5a      	subs	r2, r3, #1
 8003660:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003662:	001a      	movs	r2, r3
 8003664:	60ba      	str	r2, [r7, #8]
 8003666:	2200      	movs	r2, #0
 8003668:	60fa      	str	r2, [r7, #12]
 800366a:	68b8      	ldr	r0, [r7, #8]
 800366c:	68f9      	ldr	r1, [r7, #12]
 800366e:	0002      	movs	r2, r0
 8003670:	0ed2      	lsrs	r2, r2, #27
 8003672:	000e      	movs	r6, r1
 8003674:	0176      	lsls	r6, r6, #5
 8003676:	617e      	str	r6, [r7, #20]
 8003678:	697e      	ldr	r6, [r7, #20]
 800367a:	4316      	orrs	r6, r2
 800367c:	617e      	str	r6, [r7, #20]
 800367e:	0002      	movs	r2, r0
 8003680:	0152      	lsls	r2, r2, #5
 8003682:	613a      	str	r2, [r7, #16]
 8003684:	001a      	movs	r2, r3
 8003686:	603a      	str	r2, [r7, #0]
 8003688:	2200      	movs	r2, #0
 800368a:	607a      	str	r2, [r7, #4]
 800368c:	6838      	ldr	r0, [r7, #0]
 800368e:	6879      	ldr	r1, [r7, #4]
 8003690:	0002      	movs	r2, r0
 8003692:	0ed2      	lsrs	r2, r2, #27
 8003694:	000e      	movs	r6, r1
 8003696:	0175      	lsls	r5, r6, #5
 8003698:	4315      	orrs	r5, r2
 800369a:	0002      	movs	r2, r0
 800369c:	0154      	lsls	r4, r2, #5
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	3307      	adds	r3, #7
 80036a2:	08db      	lsrs	r3, r3, #3
 80036a4:	00db      	lsls	r3, r3, #3
 80036a6:	466a      	mov	r2, sp
 80036a8:	1ad2      	subs	r2, r2, r3
 80036aa:	4695      	mov	sp, r2
 80036ac:	ab04      	add	r3, sp, #16
 80036ae:	3301      	adds	r3, #1
 80036b0:	085b      	lsrs	r3, r3, #1
 80036b2:	005b      	lsls	r3, r3, #1
 80036b4:	62bb      	str	r3, [r7, #40]	@ 0x28

	    pixels[0][0] = 0;
 80036b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036b8:	2200      	movs	r2, #0
 80036ba:	801a      	strh	r2, [r3, #0]
	    pixels[0][1] = w*h;
 80036bc:	201a      	movs	r0, #26
 80036be:	183b      	adds	r3, r7, r0
 80036c0:	881b      	ldrh	r3, [r3, #0]
 80036c2:	2118      	movs	r1, #24
 80036c4:	187a      	adds	r2, r7, r1
 80036c6:	8812      	ldrh	r2, [r2, #0]
 80036c8:	4353      	muls	r3, r2
 80036ca:	b29a      	uxth	r2, r3
 80036cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036ce:	805a      	strh	r2, [r3, #2]
	    drawImage(pixels, pallette, x, y, w, h, 1);
 80036d0:	221e      	movs	r2, #30
 80036d2:	18bb      	adds	r3, r7, r2
 80036d4:	881c      	ldrh	r4, [r3, #0]
 80036d6:	231c      	movs	r3, #28
 80036d8:	18fb      	adds	r3, r7, r3
 80036da:	881d      	ldrh	r5, [r3, #0]
 80036dc:	183b      	adds	r3, r7, r0
 80036de:	881b      	ldrh	r3, [r3, #0]
 80036e0:	0008      	movs	r0, r1
 80036e2:	187a      	adds	r2, r7, r1
 80036e4:	8812      	ldrh	r2, [r2, #0]
 80036e6:	210c      	movs	r1, #12
 80036e8:	1809      	adds	r1, r1, r0
 80036ea:	19c9      	adds	r1, r1, r7
 80036ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80036ee:	2601      	movs	r6, #1
 80036f0:	46b4      	mov	ip, r6
 80036f2:	4666      	mov	r6, ip
 80036f4:	9602      	str	r6, [sp, #8]
 80036f6:	9201      	str	r2, [sp, #4]
 80036f8:	9300      	str	r3, [sp, #0]
 80036fa:	002b      	movs	r3, r5
 80036fc:	0022      	movs	r2, r4
 80036fe:	f000 f9dd 	bl	8003abc <drawImage>
 8003702:	46c5      	mov	sp, r8

	//ST7735_FillRectangle(x, y, w, h, color);
}
 8003704:	46c0      	nop			@ (mov r8, r8)
 8003706:	46bd      	mov	sp, r7
 8003708:	b00c      	add	sp, #48	@ 0x30
 800370a:	bc80      	pop	{r7}
 800370c:	46b8      	mov	r8, r7
 800370e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003710 <writePixel>:

#define min(a, b) (((a) < (b)) ? (a) : (b))


void writePixel(int16_t x, int16_t y, uint16_t color)
{
 8003710:	b590      	push	{r4, r7, lr}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	0004      	movs	r4, r0
 8003718:	0008      	movs	r0, r1
 800371a:	0011      	movs	r1, r2
 800371c:	1dbb      	adds	r3, r7, #6
 800371e:	1c22      	adds	r2, r4, #0
 8003720:	801a      	strh	r2, [r3, #0]
 8003722:	1d3b      	adds	r3, r7, #4
 8003724:	1c02      	adds	r2, r0, #0
 8003726:	801a      	strh	r2, [r3, #0]
 8003728:	1cbb      	adds	r3, r7, #2
 800372a:	1c0a      	adds	r2, r1, #0
 800372c:	801a      	strh	r2, [r3, #0]
    drawPixel(x, y, color);
 800372e:	1cbb      	adds	r3, r7, #2
 8003730:	881a      	ldrh	r2, [r3, #0]
 8003732:	1d3b      	adds	r3, r7, #4
 8003734:	2100      	movs	r1, #0
 8003736:	5e59      	ldrsh	r1, [r3, r1]
 8003738:	1dbb      	adds	r3, r7, #6
 800373a:	2000      	movs	r0, #0
 800373c:	5e1b      	ldrsh	r3, [r3, r0]
 800373e:	0018      	movs	r0, r3
 8003740:	f7ff ff46 	bl	80035d0 <drawPixel>
}
 8003744:	46c0      	nop			@ (mov r8, r8)
 8003746:	46bd      	mov	sp, r7
 8003748:	b003      	add	sp, #12
 800374a:	bd90      	pop	{r4, r7, pc}

0800374c <drawString>:
    } else {
        writeLine(x0, y0, x1, y1, color);
    }
}
void drawString(int16_t x, int16_t y, char* c, int16_t textColor, int16_t bgColor, uint8_t size, uint8_t spacing)
{
 800374c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800374e:	b089      	sub	sp, #36	@ 0x24
 8003750:	af02      	add	r7, sp, #8
 8003752:	0004      	movs	r4, r0
 8003754:	0008      	movs	r0, r1
 8003756:	60ba      	str	r2, [r7, #8]
 8003758:	0019      	movs	r1, r3
 800375a:	230e      	movs	r3, #14
 800375c:	18fb      	adds	r3, r7, r3
 800375e:	1c22      	adds	r2, r4, #0
 8003760:	801a      	strh	r2, [r3, #0]
 8003762:	230c      	movs	r3, #12
 8003764:	18fb      	adds	r3, r7, r3
 8003766:	1c02      	adds	r2, r0, #0
 8003768:	801a      	strh	r2, [r3, #0]
 800376a:	1dbb      	adds	r3, r7, #6
 800376c:	1c0a      	adds	r2, r1, #0
 800376e:	801a      	strh	r2, [r3, #0]
	uint16_t i =0;
 8003770:	2316      	movs	r3, #22
 8003772:	18fb      	adds	r3, r7, r3
 8003774:	2200      	movs	r2, #0
 8003776:	801a      	strh	r2, [r3, #0]

	while(c[i])
 8003778:	e03f      	b.n	80037fa <drawString+0xae>
	{
		drawChar(x, y, c[i], textColor, bgColor, size);
 800377a:	2516      	movs	r5, #22
 800377c:	197b      	adds	r3, r7, r5
 800377e:	881b      	ldrh	r3, [r3, #0]
 8003780:	68ba      	ldr	r2, [r7, #8]
 8003782:	18d3      	adds	r3, r2, r3
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	469c      	mov	ip, r3
 8003788:	1dbb      	adds	r3, r7, #6
 800378a:	2400      	movs	r4, #0
 800378c:	5f1c      	ldrsh	r4, [r3, r4]
 800378e:	230c      	movs	r3, #12
 8003790:	18fb      	adds	r3, r7, r3
 8003792:	2100      	movs	r1, #0
 8003794:	5e59      	ldrsh	r1, [r3, r1]
 8003796:	260e      	movs	r6, #14
 8003798:	19bb      	adds	r3, r7, r6
 800379a:	2000      	movs	r0, #0
 800379c:	5e18      	ldrsh	r0, [r3, r0]
 800379e:	232c      	movs	r3, #44	@ 0x2c
 80037a0:	2208      	movs	r2, #8
 80037a2:	189b      	adds	r3, r3, r2
 80037a4:	19db      	adds	r3, r3, r7
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	9301      	str	r3, [sp, #4]
 80037aa:	2328      	movs	r3, #40	@ 0x28
 80037ac:	189b      	adds	r3, r3, r2
 80037ae:	19db      	adds	r3, r3, r7
 80037b0:	2200      	movs	r2, #0
 80037b2:	5e9b      	ldrsh	r3, [r3, r2]
 80037b4:	9300      	str	r3, [sp, #0]
 80037b6:	0023      	movs	r3, r4
 80037b8:	4662      	mov	r2, ip
 80037ba:	f000 f82b 	bl	8003814 <drawChar>
		x+=(size*6)+spacing;
 80037be:	232c      	movs	r3, #44	@ 0x2c
 80037c0:	2108      	movs	r1, #8
 80037c2:	185b      	adds	r3, r3, r1
 80037c4:	19db      	adds	r3, r3, r7
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	1c1a      	adds	r2, r3, #0
 80037cc:	1c13      	adds	r3, r2, #0
 80037ce:	18db      	adds	r3, r3, r3
 80037d0:	189b      	adds	r3, r3, r2
 80037d2:	18db      	adds	r3, r3, r3
 80037d4:	b29a      	uxth	r2, r3
 80037d6:	2330      	movs	r3, #48	@ 0x30
 80037d8:	185b      	adds	r3, r3, r1
 80037da:	19db      	adds	r3, r3, r7
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	b29b      	uxth	r3, r3
 80037e0:	18d3      	adds	r3, r2, r3
 80037e2:	b29a      	uxth	r2, r3
 80037e4:	19bb      	adds	r3, r7, r6
 80037e6:	881b      	ldrh	r3, [r3, #0]
 80037e8:	18d3      	adds	r3, r2, r3
 80037ea:	b29a      	uxth	r2, r3
 80037ec:	19bb      	adds	r3, r7, r6
 80037ee:	801a      	strh	r2, [r3, #0]
		i++;
 80037f0:	197b      	adds	r3, r7, r5
 80037f2:	881a      	ldrh	r2, [r3, #0]
 80037f4:	197b      	adds	r3, r7, r5
 80037f6:	3201      	adds	r2, #1
 80037f8:	801a      	strh	r2, [r3, #0]
	while(c[i])
 80037fa:	2316      	movs	r3, #22
 80037fc:	18fb      	adds	r3, r7, r3
 80037fe:	881b      	ldrh	r3, [r3, #0]
 8003800:	68ba      	ldr	r2, [r7, #8]
 8003802:	18d3      	adds	r3, r2, r3
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d1b7      	bne.n	800377a <drawString+0x2e>
	}
}
 800380a:	46c0      	nop			@ (mov r8, r8)
 800380c:	46c0      	nop			@ (mov r8, r8)
 800380e:	46bd      	mov	sp, r7
 8003810:	b007      	add	sp, #28
 8003812:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003814 <drawChar>:
void drawChar(int16_t x, int16_t y, char c, int16_t textColor, int16_t bgColor, uint8_t size){
 8003814:	b5b0      	push	{r4, r5, r7, lr}
 8003816:	b088      	sub	sp, #32
 8003818:	af02      	add	r7, sp, #8
 800381a:	0005      	movs	r5, r0
 800381c:	000c      	movs	r4, r1
 800381e:	0010      	movs	r0, r2
 8003820:	0019      	movs	r1, r3
 8003822:	1dbb      	adds	r3, r7, #6
 8003824:	1c2a      	adds	r2, r5, #0
 8003826:	801a      	strh	r2, [r3, #0]
 8003828:	1d3b      	adds	r3, r7, #4
 800382a:	1c22      	adds	r2, r4, #0
 800382c:	801a      	strh	r2, [r3, #0]
 800382e:	1cfb      	adds	r3, r7, #3
 8003830:	1c02      	adds	r2, r0, #0
 8003832:	701a      	strb	r2, [r3, #0]
 8003834:	003b      	movs	r3, r7
 8003836:	1c0a      	adds	r2, r1, #0
 8003838:	801a      	strh	r2, [r3, #0]
     //(y >= _height))           //||
     //((x + 5 * size - 1) < 0) ||
     //((y + 8 * size - 1) < 0))
   // return;

  for (i=0; i<6; i++ ) {
 800383a:	2300      	movs	r3, #0
 800383c:	613b      	str	r3, [r7, #16]
 800383e:	e0bd      	b.n	80039bc <drawChar+0x1a8>
    if ((i) == 5)
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	2b05      	cmp	r3, #5
 8003844:	d104      	bne.n	8003850 <drawChar+0x3c>
      line = 0x0;
 8003846:	2317      	movs	r3, #23
 8003848:	18fb      	adds	r3, r7, r3
 800384a:	2200      	movs	r2, #0
 800384c:	701a      	strb	r2, [r3, #0]
 800384e:	e00b      	b.n	8003868 <drawChar+0x54>
    else
      line = Font[(c*5)+(i)];
 8003850:	1cfb      	adds	r3, r7, #3
 8003852:	781a      	ldrb	r2, [r3, #0]
 8003854:	0013      	movs	r3, r2
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	189a      	adds	r2, r3, r2
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	18d2      	adds	r2, r2, r3
 800385e:	2317      	movs	r3, #23
 8003860:	18fb      	adds	r3, r7, r3
 8003862:	495b      	ldr	r1, [pc, #364]	@ (80039d0 <drawChar+0x1bc>)
 8003864:	5c8a      	ldrb	r2, [r1, r2]
 8003866:	701a      	strb	r2, [r3, #0]
    for (j = 0; j<8; j++) {
 8003868:	2300      	movs	r3, #0
 800386a:	60fb      	str	r3, [r7, #12]
 800386c:	e09f      	b.n	80039ae <drawChar+0x19a>
      if (line & 0x1) {
 800386e:	2317      	movs	r3, #23
 8003870:	18fb      	adds	r3, r7, r3
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	2201      	movs	r2, #1
 8003876:	4013      	ands	r3, r2
 8003878:	d043      	beq.n	8003902 <drawChar+0xee>
        if (size == 1)
 800387a:	232c      	movs	r3, #44	@ 0x2c
 800387c:	18fb      	adds	r3, r7, r3
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	2b01      	cmp	r3, #1
 8003882:	d115      	bne.n	80038b0 <drawChar+0x9c>
          writePixel(x+(i), y+(7-j), textColor);
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	b29a      	uxth	r2, r3
 8003888:	1dbb      	adds	r3, r7, #6
 800388a:	881b      	ldrh	r3, [r3, #0]
 800388c:	18d3      	adds	r3, r2, r3
 800388e:	b29b      	uxth	r3, r3
 8003890:	b218      	sxth	r0, r3
 8003892:	1d3b      	adds	r3, r7, #4
 8003894:	881a      	ldrh	r2, [r3, #0]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	b29b      	uxth	r3, r3
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	b29b      	uxth	r3, r3
 800389e:	3307      	adds	r3, #7
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	b219      	sxth	r1, r3
 80038a4:	003b      	movs	r3, r7
 80038a6:	881b      	ldrh	r3, [r3, #0]
 80038a8:	001a      	movs	r2, r3
 80038aa:	f7ff ff31 	bl	8003710 <writePixel>
 80038ae:	e075      	b.n	800399c <drawChar+0x188>
        else {
          fillRect(x+((i)*size), y+((7-j)*size), size, size, textColor);
 80038b0:	212c      	movs	r1, #44	@ 0x2c
 80038b2:	187b      	adds	r3, r7, r1
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	693a      	ldr	r2, [r7, #16]
 80038ba:	b292      	uxth	r2, r2
 80038bc:	4353      	muls	r3, r2
 80038be:	b29a      	uxth	r2, r3
 80038c0:	1dbb      	adds	r3, r7, #6
 80038c2:	881b      	ldrh	r3, [r3, #0]
 80038c4:	18d3      	adds	r3, r2, r3
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	b218      	sxth	r0, r3
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2207      	movs	r2, #7
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	000c      	movs	r4, r1
 80038d4:	187a      	adds	r2, r7, r1
 80038d6:	7812      	ldrb	r2, [r2, #0]
 80038d8:	b292      	uxth	r2, r2
 80038da:	4353      	muls	r3, r2
 80038dc:	b29a      	uxth	r2, r3
 80038de:	1d3b      	adds	r3, r7, #4
 80038e0:	881b      	ldrh	r3, [r3, #0]
 80038e2:	18d3      	adds	r3, r2, r3
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	b219      	sxth	r1, r3
 80038e8:	193b      	adds	r3, r7, r4
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	b21a      	sxth	r2, r3
 80038ee:	193b      	adds	r3, r7, r4
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	b21c      	sxth	r4, r3
 80038f4:	003b      	movs	r3, r7
 80038f6:	881b      	ldrh	r3, [r3, #0]
 80038f8:	9300      	str	r3, [sp, #0]
 80038fa:	0023      	movs	r3, r4
 80038fc:	f7ff fe84 	bl	8003608 <fillRect>
 8003900:	e04c      	b.n	800399c <drawChar+0x188>
        }
      } else if (bgColor != textColor) {
 8003902:	2428      	movs	r4, #40	@ 0x28
 8003904:	193b      	adds	r3, r7, r4
 8003906:	0039      	movs	r1, r7
 8003908:	2200      	movs	r2, #0
 800390a:	5e9a      	ldrsh	r2, [r3, r2]
 800390c:	2300      	movs	r3, #0
 800390e:	5ecb      	ldrsh	r3, [r1, r3]
 8003910:	429a      	cmp	r2, r3
 8003912:	d043      	beq.n	800399c <drawChar+0x188>
        if (size == 1) // default size
 8003914:	232c      	movs	r3, #44	@ 0x2c
 8003916:	18fb      	adds	r3, r7, r3
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	2b01      	cmp	r3, #1
 800391c:	d115      	bne.n	800394a <drawChar+0x136>
          writePixel(x+(i), y+(7-j), bgColor);
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	b29a      	uxth	r2, r3
 8003922:	1dbb      	adds	r3, r7, #6
 8003924:	881b      	ldrh	r3, [r3, #0]
 8003926:	18d3      	adds	r3, r2, r3
 8003928:	b29b      	uxth	r3, r3
 800392a:	b218      	sxth	r0, r3
 800392c:	1d3b      	adds	r3, r7, #4
 800392e:	881a      	ldrh	r2, [r3, #0]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	b29b      	uxth	r3, r3
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	b29b      	uxth	r3, r3
 8003938:	3307      	adds	r3, #7
 800393a:	b29b      	uxth	r3, r3
 800393c:	b219      	sxth	r1, r3
 800393e:	193b      	adds	r3, r7, r4
 8003940:	881b      	ldrh	r3, [r3, #0]
 8003942:	001a      	movs	r2, r3
 8003944:	f7ff fee4 	bl	8003710 <writePixel>
 8003948:	e028      	b.n	800399c <drawChar+0x188>
        else {  // big size
          fillRect(x+(i)*size, y+(7-j)*size, size, size, bgColor);
 800394a:	212c      	movs	r1, #44	@ 0x2c
 800394c:	187b      	adds	r3, r7, r1
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	b29b      	uxth	r3, r3
 8003952:	693a      	ldr	r2, [r7, #16]
 8003954:	b292      	uxth	r2, r2
 8003956:	4353      	muls	r3, r2
 8003958:	b29a      	uxth	r2, r3
 800395a:	1dbb      	adds	r3, r7, #6
 800395c:	881b      	ldrh	r3, [r3, #0]
 800395e:	18d3      	adds	r3, r2, r3
 8003960:	b29b      	uxth	r3, r3
 8003962:	b218      	sxth	r0, r3
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2207      	movs	r2, #7
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	b29b      	uxth	r3, r3
 800396c:	000c      	movs	r4, r1
 800396e:	187a      	adds	r2, r7, r1
 8003970:	7812      	ldrb	r2, [r2, #0]
 8003972:	b292      	uxth	r2, r2
 8003974:	4353      	muls	r3, r2
 8003976:	b29a      	uxth	r2, r3
 8003978:	1d3b      	adds	r3, r7, #4
 800397a:	881b      	ldrh	r3, [r3, #0]
 800397c:	18d3      	adds	r3, r2, r3
 800397e:	b29b      	uxth	r3, r3
 8003980:	b219      	sxth	r1, r3
 8003982:	193b      	adds	r3, r7, r4
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	b21a      	sxth	r2, r3
 8003988:	193b      	adds	r3, r7, r4
 800398a:	781b      	ldrb	r3, [r3, #0]
 800398c:	b21c      	sxth	r4, r3
 800398e:	2328      	movs	r3, #40	@ 0x28
 8003990:	18fb      	adds	r3, r7, r3
 8003992:	881b      	ldrh	r3, [r3, #0]
 8003994:	9300      	str	r3, [sp, #0]
 8003996:	0023      	movs	r3, r4
 8003998:	f7ff fe36 	bl	8003608 <fillRect>
        }
      }
      line >>= 1;
 800399c:	2217      	movs	r2, #23
 800399e:	18bb      	adds	r3, r7, r2
 80039a0:	18ba      	adds	r2, r7, r2
 80039a2:	7812      	ldrb	r2, [r2, #0]
 80039a4:	0852      	lsrs	r2, r2, #1
 80039a6:	701a      	strb	r2, [r3, #0]
    for (j = 0; j<8; j++) {
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	3301      	adds	r3, #1
 80039ac:	60fb      	str	r3, [r7, #12]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2b07      	cmp	r3, #7
 80039b2:	dc00      	bgt.n	80039b6 <drawChar+0x1a2>
 80039b4:	e75b      	b.n	800386e <drawChar+0x5a>
  for (i=0; i<6; i++ ) {
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	3301      	adds	r3, #1
 80039ba:	613b      	str	r3, [r7, #16]
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	2b05      	cmp	r3, #5
 80039c0:	dc00      	bgt.n	80039c4 <drawChar+0x1b0>
 80039c2:	e73d      	b.n	8003840 <drawChar+0x2c>
    }
  }
}
 80039c4:	46c0      	nop			@ (mov r8, r8)
 80039c6:	46c0      	nop			@ (mov r8, r8)
 80039c8:	46bd      	mov	sp, r7
 80039ca:	b006      	add	sp, #24
 80039cc:	bdb0      	pop	{r4, r5, r7, pc}
 80039ce:	46c0      	nop			@ (mov r8, r8)
 80039d0:	0800ff94 	.word	0x0800ff94

080039d4 <fillScreen>:
        if(a > b) _swap_int16_t(a,b);
        drawFastHLine(a, y, b-a+1, color);
    }
}

void fillScreen(uint16_t color) {
 80039d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039d6:	b091      	sub	sp, #68	@ 0x44
 80039d8:	af04      	add	r7, sp, #16
 80039da:	231e      	movs	r3, #30
 80039dc:	18f9      	adds	r1, r7, r3
 80039de:	8008      	strh	r0, [r1, #0]
 80039e0:	4669      	mov	r1, sp
 80039e2:	000e      	movs	r6, r1
    uint16_t pallette[] = {color};
 80039e4:	210c      	movs	r1, #12
 80039e6:	2318      	movs	r3, #24
 80039e8:	18cb      	adds	r3, r1, r3
 80039ea:	19d9      	adds	r1, r3, r7
 80039ec:	231e      	movs	r3, #30
 80039ee:	18f8      	adds	r0, r7, r3
 80039f0:	8800      	ldrh	r0, [r0, #0]
 80039f2:	8008      	strh	r0, [r1, #0]
    uint16_t pixels[_width*_height][2];
 80039f4:	492f      	ldr	r1, [pc, #188]	@ (8003ab4 <fillScreen+0xe0>)
 80039f6:	2300      	movs	r3, #0
 80039f8:	5ec9      	ldrsh	r1, [r1, r3]
 80039fa:	0008      	movs	r0, r1
 80039fc:	492e      	ldr	r1, [pc, #184]	@ (8003ab8 <fillScreen+0xe4>)
 80039fe:	2300      	movs	r3, #0
 8003a00:	5ec9      	ldrsh	r1, [r1, r3]
 8003a02:	4341      	muls	r1, r0
 8003a04:	1e48      	subs	r0, r1, #1
 8003a06:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8003a08:	0008      	movs	r0, r1
 8003a0a:	6138      	str	r0, [r7, #16]
 8003a0c:	2000      	movs	r0, #0
 8003a0e:	6178      	str	r0, [r7, #20]
 8003a10:	693a      	ldr	r2, [r7, #16]
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	0010      	movs	r0, r2
 8003a16:	0ec0      	lsrs	r0, r0, #27
 8003a18:	613a      	str	r2, [r7, #16]
 8003a1a:	617b      	str	r3, [r7, #20]
 8003a1c:	015d      	lsls	r5, r3, #5
 8003a1e:	4305      	orrs	r5, r0
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	015c      	lsls	r4, r3, #5
 8003a24:	0008      	movs	r0, r1
 8003a26:	6038      	str	r0, [r7, #0]
 8003a28:	2000      	movs	r0, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	683c      	ldr	r4, [r7, #0]
 8003a2e:	687d      	ldr	r5, [r7, #4]
 8003a30:	0023      	movs	r3, r4
 8003a32:	0ed8      	lsrs	r0, r3, #27
 8003a34:	002b      	movs	r3, r5
 8003a36:	015b      	lsls	r3, r3, #5
 8003a38:	60fb      	str	r3, [r7, #12]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	4303      	orrs	r3, r0
 8003a3e:	60fb      	str	r3, [r7, #12]
 8003a40:	0023      	movs	r3, r4
 8003a42:	015b      	lsls	r3, r3, #5
 8003a44:	60bb      	str	r3, [r7, #8]
 8003a46:	000b      	movs	r3, r1
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	3307      	adds	r3, #7
 8003a4c:	08db      	lsrs	r3, r3, #3
 8003a4e:	00db      	lsls	r3, r3, #3
 8003a50:	466a      	mov	r2, sp
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	469d      	mov	sp, r3
 8003a56:	ab04      	add	r3, sp, #16
 8003a58:	3301      	adds	r3, #1
 8003a5a:	085b      	lsrs	r3, r3, #1
 8003a5c:	005b      	lsls	r3, r3, #1
 8003a5e:	62bb      	str	r3, [r7, #40]	@ 0x28

    pixels[0][0] = 0;
 8003a60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a62:	2200      	movs	r2, #0
 8003a64:	801a      	strh	r2, [r3, #0]
    pixels[0][1] = _width*_height;
 8003a66:	4b13      	ldr	r3, [pc, #76]	@ (8003ab4 <fillScreen+0xe0>)
 8003a68:	2200      	movs	r2, #0
 8003a6a:	5e9b      	ldrsh	r3, [r3, r2]
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	4a12      	ldr	r2, [pc, #72]	@ (8003ab8 <fillScreen+0xe4>)
 8003a70:	2000      	movs	r0, #0
 8003a72:	5e12      	ldrsh	r2, [r2, r0]
 8003a74:	b292      	uxth	r2, r2
 8003a76:	4353      	muls	r3, r2
 8003a78:	b29a      	uxth	r2, r3
 8003a7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a7c:	805a      	strh	r2, [r3, #2]
    drawImage(pixels, pallette, 0, 0, _width, _height, 1);
 8003a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8003ab4 <fillScreen+0xe0>)
 8003a80:	2200      	movs	r2, #0
 8003a82:	5e9b      	ldrsh	r3, [r3, r2]
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	4a0c      	ldr	r2, [pc, #48]	@ (8003ab8 <fillScreen+0xe4>)
 8003a88:	2000      	movs	r0, #0
 8003a8a:	5e12      	ldrsh	r2, [r2, r0]
 8003a8c:	b292      	uxth	r2, r2
 8003a8e:	210c      	movs	r1, #12
 8003a90:	2018      	movs	r0, #24
 8003a92:	1809      	adds	r1, r1, r0
 8003a94:	19c9      	adds	r1, r1, r7
 8003a96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003a98:	2401      	movs	r4, #1
 8003a9a:	9402      	str	r4, [sp, #8]
 8003a9c:	9201      	str	r2, [sp, #4]
 8003a9e:	9300      	str	r3, [sp, #0]
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f000 f80a 	bl	8003abc <drawImage>
 8003aa8:	46b5      	mov	sp, r6
	//fillRect(0, 0, _width, _height, color);
}
 8003aaa:	46c0      	nop			@ (mov r8, r8)
 8003aac:	46bd      	mov	sp, r7
 8003aae:	b00d      	add	sp, #52	@ 0x34
 8003ab0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ab2:	46c0      	nop			@ (mov r8, r8)
 8003ab4:	20000bcc 	.word	0x20000bcc
 8003ab8:	20000bce 	.word	0x20000bce

08003abc <drawImage>:

void drawImage(uint16_t image[][2], uint16_t palette[], uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t c)
{
 8003abc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003abe:	46c6      	mov	lr, r8
 8003ac0:	b500      	push	{lr}
 8003ac2:	b092      	sub	sp, #72	@ 0x48
 8003ac4:	af02      	add	r7, sp, #8
 8003ac6:	6278      	str	r0, [r7, #36]	@ 0x24
 8003ac8:	6239      	str	r1, [r7, #32]
 8003aca:	0019      	movs	r1, r3
 8003acc:	231e      	movs	r3, #30
 8003ace:	18fb      	adds	r3, r7, r3
 8003ad0:	801a      	strh	r2, [r3, #0]
 8003ad2:	231c      	movs	r3, #28
 8003ad4:	18fb      	adds	r3, r7, r3
 8003ad6:	1c0a      	adds	r2, r1, #0
 8003ad8:	801a      	strh	r2, [r3, #0]
 8003ada:	466b      	mov	r3, sp
 8003adc:	4698      	mov	r8, r3
	uint16_t i;
	uint16_t j;
	uint16_t totalInd =0;
 8003ade:	2322      	movs	r3, #34	@ 0x22
 8003ae0:	2118      	movs	r1, #24
 8003ae2:	185b      	adds	r3, r3, r1
 8003ae4:	19db      	adds	r3, r3, r7
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	801a      	strh	r2, [r3, #0]
	uint16_t ind;
	uint16_t count;
	uint16_t bufffer[w*h];
 8003aea:	2340      	movs	r3, #64	@ 0x40
 8003aec:	185b      	adds	r3, r3, r1
 8003aee:	19db      	adds	r3, r3, r7
 8003af0:	881b      	ldrh	r3, [r3, #0]
 8003af2:	2244      	movs	r2, #68	@ 0x44
 8003af4:	1852      	adds	r2, r2, r1
 8003af6:	19d2      	adds	r2, r2, r7
 8003af8:	8812      	ldrh	r2, [r2, #0]
 8003afa:	4353      	muls	r3, r2
 8003afc:	1e5a      	subs	r2, r3, #1
 8003afe:	637a      	str	r2, [r7, #52]	@ 0x34
 8003b00:	001a      	movs	r2, r3
 8003b02:	60ba      	str	r2, [r7, #8]
 8003b04:	2200      	movs	r2, #0
 8003b06:	60fa      	str	r2, [r7, #12]
 8003b08:	68b8      	ldr	r0, [r7, #8]
 8003b0a:	68f9      	ldr	r1, [r7, #12]
 8003b0c:	0002      	movs	r2, r0
 8003b0e:	0f12      	lsrs	r2, r2, #28
 8003b10:	000e      	movs	r6, r1
 8003b12:	0136      	lsls	r6, r6, #4
 8003b14:	617e      	str	r6, [r7, #20]
 8003b16:	697e      	ldr	r6, [r7, #20]
 8003b18:	4316      	orrs	r6, r2
 8003b1a:	617e      	str	r6, [r7, #20]
 8003b1c:	0002      	movs	r2, r0
 8003b1e:	0112      	lsls	r2, r2, #4
 8003b20:	613a      	str	r2, [r7, #16]
 8003b22:	001a      	movs	r2, r3
 8003b24:	603a      	str	r2, [r7, #0]
 8003b26:	2200      	movs	r2, #0
 8003b28:	607a      	str	r2, [r7, #4]
 8003b2a:	6838      	ldr	r0, [r7, #0]
 8003b2c:	6879      	ldr	r1, [r7, #4]
 8003b2e:	0002      	movs	r2, r0
 8003b30:	0f12      	lsrs	r2, r2, #28
 8003b32:	000e      	movs	r6, r1
 8003b34:	0135      	lsls	r5, r6, #4
 8003b36:	4315      	orrs	r5, r2
 8003b38:	0002      	movs	r2, r0
 8003b3a:	0114      	lsls	r4, r2, #4
 8003b3c:	005b      	lsls	r3, r3, #1
 8003b3e:	3307      	adds	r3, #7
 8003b40:	08db      	lsrs	r3, r3, #3
 8003b42:	00db      	lsls	r3, r3, #3
 8003b44:	466a      	mov	r2, sp
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	469d      	mov	sp, r3
 8003b4a:	ab02      	add	r3, sp, #8
 8003b4c:	3301      	adds	r3, #1
 8003b4e:	085b      	lsrs	r3, r3, #1
 8003b50:	005b      	lsls	r3, r3, #1
 8003b52:	633b      	str	r3, [r7, #48]	@ 0x30
for(i=0; i<c; i++)
 8003b54:	2326      	movs	r3, #38	@ 0x26
 8003b56:	2118      	movs	r1, #24
 8003b58:	185b      	adds	r3, r3, r1
 8003b5a:	19db      	adds	r3, r3, r7
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	801a      	strh	r2, [r3, #0]
 8003b60:	e04d      	b.n	8003bfe <drawImage+0x142>
{
	ind = image[i][0];
 8003b62:	2126      	movs	r1, #38	@ 0x26
 8003b64:	2018      	movs	r0, #24
 8003b66:	180b      	adds	r3, r1, r0
 8003b68:	19db      	adds	r3, r3, r7
 8003b6a:	881b      	ldrh	r3, [r3, #0]
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b70:	18d2      	adds	r2, r2, r3
 8003b72:	2316      	movs	r3, #22
 8003b74:	181b      	adds	r3, r3, r0
 8003b76:	19db      	adds	r3, r3, r7
 8003b78:	8812      	ldrh	r2, [r2, #0]
 8003b7a:	801a      	strh	r2, [r3, #0]
	count = image[i][1];
 8003b7c:	180b      	adds	r3, r1, r0
 8003b7e:	19db      	adds	r3, r3, r7
 8003b80:	881b      	ldrh	r3, [r3, #0]
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b86:	18d2      	adds	r2, r2, r3
 8003b88:	2314      	movs	r3, #20
 8003b8a:	181b      	adds	r3, r3, r0
 8003b8c:	19db      	adds	r3, r3, r7
 8003b8e:	8852      	ldrh	r2, [r2, #2]
 8003b90:	801a      	strh	r2, [r3, #0]
	for(j=0; j<count; j++)
 8003b92:	2324      	movs	r3, #36	@ 0x24
 8003b94:	181b      	adds	r3, r3, r0
 8003b96:	19db      	adds	r3, r3, r7
 8003b98:	2200      	movs	r2, #0
 8003b9a:	801a      	strh	r2, [r3, #0]
 8003b9c:	e01c      	b.n	8003bd8 <drawImage+0x11c>
	{
		bufffer[totalInd++] = palette[ind];
 8003b9e:	2316      	movs	r3, #22
 8003ba0:	2418      	movs	r4, #24
 8003ba2:	191b      	adds	r3, r3, r4
 8003ba4:	19db      	adds	r3, r3, r7
 8003ba6:	881b      	ldrh	r3, [r3, #0]
 8003ba8:	005b      	lsls	r3, r3, #1
 8003baa:	6a3a      	ldr	r2, [r7, #32]
 8003bac:	18d2      	adds	r2, r2, r3
 8003bae:	2122      	movs	r1, #34	@ 0x22
 8003bb0:	190b      	adds	r3, r1, r4
 8003bb2:	19db      	adds	r3, r3, r7
 8003bb4:	881b      	ldrh	r3, [r3, #0]
 8003bb6:	1909      	adds	r1, r1, r4
 8003bb8:	19c9      	adds	r1, r1, r7
 8003bba:	1c58      	adds	r0, r3, #1
 8003bbc:	8008      	strh	r0, [r1, #0]
 8003bbe:	0018      	movs	r0, r3
 8003bc0:	8811      	ldrh	r1, [r2, #0]
 8003bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bc4:	0042      	lsls	r2, r0, #1
 8003bc6:	52d1      	strh	r1, [r2, r3]
	for(j=0; j<count; j++)
 8003bc8:	2124      	movs	r1, #36	@ 0x24
 8003bca:	190b      	adds	r3, r1, r4
 8003bcc:	19db      	adds	r3, r3, r7
 8003bce:	881a      	ldrh	r2, [r3, #0]
 8003bd0:	190b      	adds	r3, r1, r4
 8003bd2:	19db      	adds	r3, r3, r7
 8003bd4:	3201      	adds	r2, #1
 8003bd6:	801a      	strh	r2, [r3, #0]
 8003bd8:	2324      	movs	r3, #36	@ 0x24
 8003bda:	2018      	movs	r0, #24
 8003bdc:	181b      	adds	r3, r3, r0
 8003bde:	19da      	adds	r2, r3, r7
 8003be0:	2314      	movs	r3, #20
 8003be2:	181b      	adds	r3, r3, r0
 8003be4:	19db      	adds	r3, r3, r7
 8003be6:	8812      	ldrh	r2, [r2, #0]
 8003be8:	881b      	ldrh	r3, [r3, #0]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d3d7      	bcc.n	8003b9e <drawImage+0xe2>
for(i=0; i<c; i++)
 8003bee:	2126      	movs	r1, #38	@ 0x26
 8003bf0:	180b      	adds	r3, r1, r0
 8003bf2:	19db      	adds	r3, r3, r7
 8003bf4:	881a      	ldrh	r2, [r3, #0]
 8003bf6:	180b      	adds	r3, r1, r0
 8003bf8:	19db      	adds	r3, r3, r7
 8003bfa:	3201      	adds	r2, #1
 8003bfc:	801a      	strh	r2, [r3, #0]
 8003bfe:	2326      	movs	r3, #38	@ 0x26
 8003c00:	2118      	movs	r1, #24
 8003c02:	185b      	adds	r3, r3, r1
 8003c04:	19da      	adds	r2, r3, r7
 8003c06:	2348      	movs	r3, #72	@ 0x48
 8003c08:	185b      	adds	r3, r3, r1
 8003c0a:	19db      	adds	r3, r3, r7
 8003c0c:	8812      	ldrh	r2, [r2, #0]
 8003c0e:	881b      	ldrh	r3, [r3, #0]
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d3a6      	bcc.n	8003b62 <drawImage+0xa6>
	}
}
ST7735_DrawImage(y, x, w, h, bufffer);
 8003c14:	2344      	movs	r3, #68	@ 0x44
 8003c16:	185b      	adds	r3, r3, r1
 8003c18:	19db      	adds	r3, r3, r7
 8003c1a:	881c      	ldrh	r4, [r3, #0]
 8003c1c:	2340      	movs	r3, #64	@ 0x40
 8003c1e:	185b      	adds	r3, r3, r1
 8003c20:	19db      	adds	r3, r3, r7
 8003c22:	881a      	ldrh	r2, [r3, #0]
 8003c24:	231e      	movs	r3, #30
 8003c26:	18fb      	adds	r3, r7, r3
 8003c28:	8819      	ldrh	r1, [r3, #0]
 8003c2a:	231c      	movs	r3, #28
 8003c2c:	18fb      	adds	r3, r7, r3
 8003c2e:	8818      	ldrh	r0, [r3, #0]
 8003c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c32:	9300      	str	r3, [sp, #0]
 8003c34:	0023      	movs	r3, r4
 8003c36:	f000 fa31 	bl	800409c <ST7735_DrawImage>
 8003c3a:	46c5      	mov	sp, r8
}
 8003c3c:	46c0      	nop			@ (mov r8, r8)
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	b010      	add	sp, #64	@ 0x40
 8003c42:	bc80      	pop	{r7}
 8003c44:	46b8      	mov	r8, r7
 8003c46:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003c48 <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8003c4c:	23a0      	movs	r3, #160	@ 0xa0
 8003c4e:	05db      	lsls	r3, r3, #23
 8003c50:	2200      	movs	r2, #0
 8003c52:	2120      	movs	r1, #32
 8003c54:	0018      	movs	r0, r3
 8003c56:	f004 f81e 	bl	8007c96 <HAL_GPIO_WritePin>
}
 8003c5a:	46c0      	nop			@ (mov r8, r8)
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <ST7735_Unselect>:

void ST7735_Unselect()
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8003c64:	23a0      	movs	r3, #160	@ 0xa0
 8003c66:	05db      	lsls	r3, r3, #23
 8003c68:	2201      	movs	r2, #1
 8003c6a:	2120      	movs	r1, #32
 8003c6c:	0018      	movs	r0, r3
 8003c6e:	f004 f812 	bl	8007c96 <HAL_GPIO_WritePin>
}
 8003c72:	46c0      	nop			@ (mov r8, r8)
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <ST7735_Reset>:

void ST7735_Reset()
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 8003c7c:	2380      	movs	r3, #128	@ 0x80
 8003c7e:	0219      	lsls	r1, r3, #8
 8003c80:	23a0      	movs	r3, #160	@ 0xa0
 8003c82:	05db      	lsls	r3, r3, #23
 8003c84:	2200      	movs	r2, #0
 8003c86:	0018      	movs	r0, r3
 8003c88:	f004 f805 	bl	8007c96 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8003c8c:	2005      	movs	r0, #5
 8003c8e:	f003 fd8b 	bl	80077a8 <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 8003c92:	2380      	movs	r3, #128	@ 0x80
 8003c94:	0219      	lsls	r1, r3, #8
 8003c96:	23a0      	movs	r3, #160	@ 0xa0
 8003c98:	05db      	lsls	r3, r3, #23
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	0018      	movs	r0, r3
 8003c9e:	f003 fffa 	bl	8007c96 <HAL_GPIO_WritePin>
}
 8003ca2:	46c0      	nop			@ (mov r8, r8)
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	0002      	movs	r2, r0
 8003cb0:	1dfb      	adds	r3, r7, #7
 8003cb2:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 8003cb4:	23a0      	movs	r3, #160	@ 0xa0
 8003cb6:	05db      	lsls	r3, r3, #23
 8003cb8:	2200      	movs	r2, #0
 8003cba:	2110      	movs	r1, #16
 8003cbc:	0018      	movs	r0, r3
 8003cbe:	f003 ffea 	bl	8007c96 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	425b      	negs	r3, r3
 8003cc6:	1df9      	adds	r1, r7, #7
 8003cc8:	4803      	ldr	r0, [pc, #12]	@ (8003cd8 <ST7735_WriteCommand+0x30>)
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f006 f946 	bl	8009f5c <HAL_SPI_Transmit>
}
 8003cd0:	46c0      	nop			@ (mov r8, r8)
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	b002      	add	sp, #8
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	20001c6c 	.word	0x20001c6c

08003cdc <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b082      	sub	sp, #8
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8003ce6:	23a0      	movs	r3, #160	@ 0xa0
 8003ce8:	05db      	lsls	r3, r3, #23
 8003cea:	2201      	movs	r2, #1
 8003cec:	2110      	movs	r1, #16
 8003cee:	0018      	movs	r0, r3
 8003cf0:	f003 ffd1 	bl	8007c96 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	b29a      	uxth	r2, r3
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	425b      	negs	r3, r3
 8003cfc:	6879      	ldr	r1, [r7, #4]
 8003cfe:	4803      	ldr	r0, [pc, #12]	@ (8003d0c <ST7735_WriteData+0x30>)
 8003d00:	f006 f92c 	bl	8009f5c <HAL_SPI_Transmit>
}
 8003d04:	46c0      	nop			@ (mov r8, r8)
 8003d06:	46bd      	mov	sp, r7
 8003d08:	b002      	add	sp, #8
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	20001c6c 	.word	0x20001c6c

08003d10 <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 8003d10:	b590      	push	{r4, r7, lr}
 8003d12:	b085      	sub	sp, #20
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	1c5a      	adds	r2, r3, #1
 8003d1c:	607a      	str	r2, [r7, #4]
 8003d1e:	220f      	movs	r2, #15
 8003d20:	18ba      	adds	r2, r7, r2
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	7013      	strb	r3, [r2, #0]
    while(numCommands--) {
 8003d26:	e04a      	b.n	8003dbe <DisplayInit+0xae>
        uint8_t cmd = *addr++;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	1c5a      	adds	r2, r3, #1
 8003d2c:	607a      	str	r2, [r7, #4]
 8003d2e:	210b      	movs	r1, #11
 8003d30:	187a      	adds	r2, r7, r1
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	7013      	strb	r3, [r2, #0]
        ST7735_WriteCommand(cmd);
 8003d36:	187b      	adds	r3, r7, r1
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	0018      	movs	r0, r3
 8003d3c:	f7ff ffb4 	bl	8003ca8 <ST7735_WriteCommand>

        numArgs = *addr++;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	1c5a      	adds	r2, r3, #1
 8003d44:	607a      	str	r2, [r7, #4]
 8003d46:	200a      	movs	r0, #10
 8003d48:	183a      	adds	r2, r7, r0
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	7013      	strb	r3, [r2, #0]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8003d4e:	183b      	adds	r3, r7, r0
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	b29a      	uxth	r2, r3
 8003d54:	230c      	movs	r3, #12
 8003d56:	18fb      	adds	r3, r7, r3
 8003d58:	2180      	movs	r1, #128	@ 0x80
 8003d5a:	400a      	ands	r2, r1
 8003d5c:	801a      	strh	r2, [r3, #0]
        numArgs &= ~DELAY;
 8003d5e:	183b      	adds	r3, r7, r0
 8003d60:	183a      	adds	r2, r7, r0
 8003d62:	7812      	ldrb	r2, [r2, #0]
 8003d64:	217f      	movs	r1, #127	@ 0x7f
 8003d66:	400a      	ands	r2, r1
 8003d68:	701a      	strb	r2, [r3, #0]
        if(numArgs) {
 8003d6a:	183b      	adds	r3, r7, r0
 8003d6c:	781b      	ldrb	r3, [r3, #0]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d00c      	beq.n	8003d8c <DisplayInit+0x7c>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8003d72:	0004      	movs	r4, r0
 8003d74:	183b      	adds	r3, r7, r0
 8003d76:	781a      	ldrb	r2, [r3, #0]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	0011      	movs	r1, r2
 8003d7c:	0018      	movs	r0, r3
 8003d7e:	f7ff ffad 	bl	8003cdc <ST7735_WriteData>
            addr += numArgs;
 8003d82:	193b      	adds	r3, r7, r4
 8003d84:	781b      	ldrb	r3, [r3, #0]
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	18d3      	adds	r3, r2, r3
 8003d8a:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8003d8c:	210c      	movs	r1, #12
 8003d8e:	187b      	adds	r3, r7, r1
 8003d90:	881b      	ldrh	r3, [r3, #0]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d013      	beq.n	8003dbe <DisplayInit+0xae>
            ms = *addr++;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	1c5a      	adds	r2, r3, #1
 8003d9a:	607a      	str	r2, [r7, #4]
 8003d9c:	781a      	ldrb	r2, [r3, #0]
 8003d9e:	187b      	adds	r3, r7, r1
 8003da0:	801a      	strh	r2, [r3, #0]
            if(ms == 255) ms = 500;
 8003da2:	187b      	adds	r3, r7, r1
 8003da4:	881b      	ldrh	r3, [r3, #0]
 8003da6:	2bff      	cmp	r3, #255	@ 0xff
 8003da8:	d103      	bne.n	8003db2 <DisplayInit+0xa2>
 8003daa:	187b      	adds	r3, r7, r1
 8003dac:	22fa      	movs	r2, #250	@ 0xfa
 8003dae:	0052      	lsls	r2, r2, #1
 8003db0:	801a      	strh	r2, [r3, #0]
            HAL_Delay(ms);
 8003db2:	230c      	movs	r3, #12
 8003db4:	18fb      	adds	r3, r7, r3
 8003db6:	881b      	ldrh	r3, [r3, #0]
 8003db8:	0018      	movs	r0, r3
 8003dba:	f003 fcf5 	bl	80077a8 <HAL_Delay>
    while(numCommands--) {
 8003dbe:	220f      	movs	r2, #15
 8003dc0:	18bb      	adds	r3, r7, r2
 8003dc2:	781b      	ldrb	r3, [r3, #0]
 8003dc4:	18ba      	adds	r2, r7, r2
 8003dc6:	1e59      	subs	r1, r3, #1
 8003dc8:	7011      	strb	r1, [r2, #0]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d1ac      	bne.n	8003d28 <DisplayInit+0x18>
        }
    }
}
 8003dce:	46c0      	nop			@ (mov r8, r8)
 8003dd0:	46c0      	nop			@ (mov r8, r8)
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	b005      	add	sp, #20
 8003dd6:	bd90      	pop	{r4, r7, pc}

08003dd8 <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8003dd8:	b5b0      	push	{r4, r5, r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	0005      	movs	r5, r0
 8003de0:	000c      	movs	r4, r1
 8003de2:	0010      	movs	r0, r2
 8003de4:	0019      	movs	r1, r3
 8003de6:	1dfb      	adds	r3, r7, #7
 8003de8:	1c2a      	adds	r2, r5, #0
 8003dea:	701a      	strb	r2, [r3, #0]
 8003dec:	1dbb      	adds	r3, r7, #6
 8003dee:	1c22      	adds	r2, r4, #0
 8003df0:	701a      	strb	r2, [r3, #0]
 8003df2:	1d7b      	adds	r3, r7, #5
 8003df4:	1c02      	adds	r2, r0, #0
 8003df6:	701a      	strb	r2, [r3, #0]
 8003df8:	1d3b      	adds	r3, r7, #4
 8003dfa:	1c0a      	adds	r2, r1, #0
 8003dfc:	701a      	strb	r2, [r3, #0]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8003dfe:	202a      	movs	r0, #42	@ 0x2a
 8003e00:	f7ff ff52 	bl	8003ca8 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 8003e04:	210c      	movs	r1, #12
 8003e06:	187b      	adds	r3, r7, r1
 8003e08:	2200      	movs	r2, #0
 8003e0a:	701a      	strb	r2, [r3, #0]
 8003e0c:	4b1c      	ldr	r3, [pc, #112]	@ (8003e80 <ST7735_SetAddressWindow+0xa8>)
 8003e0e:	781a      	ldrb	r2, [r3, #0]
 8003e10:	1dfb      	adds	r3, r7, #7
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	18d3      	adds	r3, r2, r3
 8003e16:	b2da      	uxtb	r2, r3
 8003e18:	187b      	adds	r3, r7, r1
 8003e1a:	705a      	strb	r2, [r3, #1]
 8003e1c:	187b      	adds	r3, r7, r1
 8003e1e:	2200      	movs	r2, #0
 8003e20:	709a      	strb	r2, [r3, #2]
 8003e22:	4b17      	ldr	r3, [pc, #92]	@ (8003e80 <ST7735_SetAddressWindow+0xa8>)
 8003e24:	781a      	ldrb	r2, [r3, #0]
 8003e26:	1d7b      	adds	r3, r7, #5
 8003e28:	781b      	ldrb	r3, [r3, #0]
 8003e2a:	18d3      	adds	r3, r2, r3
 8003e2c:	b2da      	uxtb	r2, r3
 8003e2e:	187b      	adds	r3, r7, r1
 8003e30:	70da      	strb	r2, [r3, #3]
    ST7735_WriteData(data, sizeof(data));
 8003e32:	000c      	movs	r4, r1
 8003e34:	187b      	adds	r3, r7, r1
 8003e36:	2104      	movs	r1, #4
 8003e38:	0018      	movs	r0, r3
 8003e3a:	f7ff ff4f 	bl	8003cdc <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8003e3e:	202b      	movs	r0, #43	@ 0x2b
 8003e40:	f7ff ff32 	bl	8003ca8 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 8003e44:	4b0f      	ldr	r3, [pc, #60]	@ (8003e84 <ST7735_SetAddressWindow+0xac>)
 8003e46:	781a      	ldrb	r2, [r3, #0]
 8003e48:	1dbb      	adds	r3, r7, #6
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	18d3      	adds	r3, r2, r3
 8003e4e:	b2da      	uxtb	r2, r3
 8003e50:	0021      	movs	r1, r4
 8003e52:	187b      	adds	r3, r7, r1
 8003e54:	705a      	strb	r2, [r3, #1]
    data[3] = y1 + _ystart;
 8003e56:	4b0b      	ldr	r3, [pc, #44]	@ (8003e84 <ST7735_SetAddressWindow+0xac>)
 8003e58:	781a      	ldrb	r2, [r3, #0]
 8003e5a:	1d3b      	adds	r3, r7, #4
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	18d3      	adds	r3, r2, r3
 8003e60:	b2da      	uxtb	r2, r3
 8003e62:	187b      	adds	r3, r7, r1
 8003e64:	70da      	strb	r2, [r3, #3]
    ST7735_WriteData(data, sizeof(data));
 8003e66:	187b      	adds	r3, r7, r1
 8003e68:	2104      	movs	r1, #4
 8003e6a:	0018      	movs	r0, r3
 8003e6c:	f7ff ff36 	bl	8003cdc <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8003e70:	202c      	movs	r0, #44	@ 0x2c
 8003e72:	f7ff ff19 	bl	8003ca8 <ST7735_WriteCommand>
}
 8003e76:	46c0      	nop			@ (mov r8, r8)
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	b004      	add	sp, #16
 8003e7c:	bdb0      	pop	{r4, r5, r7, pc}
 8003e7e:	46c0      	nop			@ (mov r8, r8)
 8003e80:	20000bd3 	.word	0x20000bd3
 8003e84:	20000bd4 	.word	0x20000bd4

08003e88 <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	0002      	movs	r2, r0
 8003e90:	1dfb      	adds	r3, r7, #7
 8003e92:	701a      	strb	r2, [r3, #0]
    ST7735_Select();
 8003e94:	f7ff fed8 	bl	8003c48 <ST7735_Select>
    ST7735_Reset();
 8003e98:	f7ff feee 	bl	8003c78 <ST7735_Reset>
    DisplayInit(init_cmds1);
 8003e9c:	4b0e      	ldr	r3, [pc, #56]	@ (8003ed8 <ST7735_Init+0x50>)
 8003e9e:	0018      	movs	r0, r3
 8003ea0:	f7ff ff36 	bl	8003d10 <DisplayInit>
    DisplayInit(init_cmds2);
 8003ea4:	4b0d      	ldr	r3, [pc, #52]	@ (8003edc <ST7735_Init+0x54>)
 8003ea6:	0018      	movs	r0, r3
 8003ea8:	f7ff ff32 	bl	8003d10 <DisplayInit>
    DisplayInit(init_cmds3);
 8003eac:	4b0c      	ldr	r3, [pc, #48]	@ (8003ee0 <ST7735_Init+0x58>)
 8003eae:	0018      	movs	r0, r3
 8003eb0:	f7ff ff2e 	bl	8003d10 <DisplayInit>

#elif ST7735_IS_128X128
    _colstart = 2;
    _rowstart = 3;
#else
    _colstart = 0;
 8003eb4:	4b0b      	ldr	r3, [pc, #44]	@ (8003ee4 <ST7735_Init+0x5c>)
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	701a      	strb	r2, [r3, #0]
    _rowstart = 0;
 8003eba:	4b0b      	ldr	r3, [pc, #44]	@ (8003ee8 <ST7735_Init+0x60>)
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	701a      	strb	r2, [r3, #0]
#endif
    ST7735_SetRotation (rotation);
 8003ec0:	1dfb      	adds	r3, r7, #7
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	0018      	movs	r0, r3
 8003ec6:	f000 f811 	bl	8003eec <ST7735_SetRotation>
    ST7735_Unselect();
 8003eca:	f7ff fec9 	bl	8003c60 <ST7735_Unselect>

}
 8003ece:	46c0      	nop			@ (mov r8, r8)
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	b002      	add	sp, #8
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	46c0      	nop			@ (mov r8, r8)
 8003ed8:	08010490 	.word	0x08010490
 8003edc:	080104c8 	.word	0x080104c8
 8003ee0:	080104d8 	.word	0x080104d8
 8003ee4:	20000bd1 	.word	0x20000bd1
 8003ee8:	20000bd2 	.word	0x20000bd2

08003eec <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	0002      	movs	r2, r0
 8003ef4:	1dfb      	adds	r3, r7, #7
 8003ef6:	701a      	strb	r2, [r3, #0]

  uint8_t madctl = 0;
 8003ef8:	230f      	movs	r3, #15
 8003efa:	18fb      	adds	r3, r7, r3
 8003efc:	2200      	movs	r2, #0
 8003efe:	701a      	strb	r2, [r3, #0]

  rotation = m % 4; // can't be higher than 3
 8003f00:	1dfb      	adds	r3, r7, #7
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	2203      	movs	r2, #3
 8003f06:	4013      	ands	r3, r2
 8003f08:	b2da      	uxtb	r2, r3
 8003f0a:	4b36      	ldr	r3, [pc, #216]	@ (8003fe4 <ST7735_SetRotation+0xf8>)
 8003f0c:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 8003f0e:	4b35      	ldr	r3, [pc, #212]	@ (8003fe4 <ST7735_SetRotation+0xf8>)
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	2b03      	cmp	r3, #3
 8003f14:	d041      	beq.n	8003f9a <ST7735_SetRotation+0xae>
 8003f16:	dc53      	bgt.n	8003fc0 <ST7735_SetRotation+0xd4>
 8003f18:	2b02      	cmp	r3, #2
 8003f1a:	d02b      	beq.n	8003f74 <ST7735_SetRotation+0x88>
 8003f1c:	dc50      	bgt.n	8003fc0 <ST7735_SetRotation+0xd4>
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d002      	beq.n	8003f28 <ST7735_SetRotation+0x3c>
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d013      	beq.n	8003f4e <ST7735_SetRotation+0x62>
 8003f26:	e04b      	b.n	8003fc0 <ST7735_SetRotation+0xd4>
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 8003f28:	230f      	movs	r3, #15
 8003f2a:	18fb      	adds	r3, r7, r3
 8003f2c:	22c0      	movs	r2, #192	@ 0xc0
 8003f2e:	701a      	strb	r2, [r3, #0]
      _height = ST7735_HEIGHT;
 8003f30:	4b2d      	ldr	r3, [pc, #180]	@ (8003fe8 <ST7735_SetRotation+0xfc>)
 8003f32:	22a0      	movs	r2, #160	@ 0xa0
 8003f34:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8003f36:	4b2d      	ldr	r3, [pc, #180]	@ (8003fec <ST7735_SetRotation+0x100>)
 8003f38:	2280      	movs	r2, #128	@ 0x80
 8003f3a:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 8003f3c:	4b2c      	ldr	r3, [pc, #176]	@ (8003ff0 <ST7735_SetRotation+0x104>)
 8003f3e:	781a      	ldrb	r2, [r3, #0]
 8003f40:	4b2c      	ldr	r3, [pc, #176]	@ (8003ff4 <ST7735_SetRotation+0x108>)
 8003f42:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 8003f44:	4b2c      	ldr	r3, [pc, #176]	@ (8003ff8 <ST7735_SetRotation+0x10c>)
 8003f46:	781a      	ldrb	r2, [r3, #0]
 8003f48:	4b2c      	ldr	r3, [pc, #176]	@ (8003ffc <ST7735_SetRotation+0x110>)
 8003f4a:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8003f4c:	e038      	b.n	8003fc0 <ST7735_SetRotation+0xd4>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8003f4e:	230f      	movs	r3, #15
 8003f50:	18fb      	adds	r3, r7, r3
 8003f52:	22a0      	movs	r2, #160	@ 0xa0
 8003f54:	701a      	strb	r2, [r3, #0]
      _width = ST7735_HEIGHT;
 8003f56:	4b25      	ldr	r3, [pc, #148]	@ (8003fec <ST7735_SetRotation+0x100>)
 8003f58:	22a0      	movs	r2, #160	@ 0xa0
 8003f5a:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8003f5c:	4b22      	ldr	r3, [pc, #136]	@ (8003fe8 <ST7735_SetRotation+0xfc>)
 8003f5e:	2280      	movs	r2, #128	@ 0x80
 8003f60:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8003f62:	4b23      	ldr	r3, [pc, #140]	@ (8003ff0 <ST7735_SetRotation+0x104>)
 8003f64:	781a      	ldrb	r2, [r3, #0]
 8003f66:	4b25      	ldr	r3, [pc, #148]	@ (8003ffc <ST7735_SetRotation+0x110>)
 8003f68:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8003f6a:	4b23      	ldr	r3, [pc, #140]	@ (8003ff8 <ST7735_SetRotation+0x10c>)
 8003f6c:	781a      	ldrb	r2, [r3, #0]
 8003f6e:	4b21      	ldr	r3, [pc, #132]	@ (8003ff4 <ST7735_SetRotation+0x108>)
 8003f70:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8003f72:	e025      	b.n	8003fc0 <ST7735_SetRotation+0xd4>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 8003f74:	230f      	movs	r3, #15
 8003f76:	18fb      	adds	r3, r7, r3
 8003f78:	2200      	movs	r2, #0
 8003f7a:	701a      	strb	r2, [r3, #0]
      _height = ST7735_HEIGHT;
 8003f7c:	4b1a      	ldr	r3, [pc, #104]	@ (8003fe8 <ST7735_SetRotation+0xfc>)
 8003f7e:	22a0      	movs	r2, #160	@ 0xa0
 8003f80:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8003f82:	4b1a      	ldr	r3, [pc, #104]	@ (8003fec <ST7735_SetRotation+0x100>)
 8003f84:	2280      	movs	r2, #128	@ 0x80
 8003f86:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 8003f88:	4b19      	ldr	r3, [pc, #100]	@ (8003ff0 <ST7735_SetRotation+0x104>)
 8003f8a:	781a      	ldrb	r2, [r3, #0]
 8003f8c:	4b19      	ldr	r3, [pc, #100]	@ (8003ff4 <ST7735_SetRotation+0x108>)
 8003f8e:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 8003f90:	4b19      	ldr	r3, [pc, #100]	@ (8003ff8 <ST7735_SetRotation+0x10c>)
 8003f92:	781a      	ldrb	r2, [r3, #0]
 8003f94:	4b19      	ldr	r3, [pc, #100]	@ (8003ffc <ST7735_SetRotation+0x110>)
 8003f96:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8003f98:	e012      	b.n	8003fc0 <ST7735_SetRotation+0xd4>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8003f9a:	230f      	movs	r3, #15
 8003f9c:	18fb      	adds	r3, r7, r3
 8003f9e:	2260      	movs	r2, #96	@ 0x60
 8003fa0:	701a      	strb	r2, [r3, #0]
      _width = ST7735_HEIGHT;
 8003fa2:	4b12      	ldr	r3, [pc, #72]	@ (8003fec <ST7735_SetRotation+0x100>)
 8003fa4:	22a0      	movs	r2, #160	@ 0xa0
 8003fa6:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8003fa8:	4b0f      	ldr	r3, [pc, #60]	@ (8003fe8 <ST7735_SetRotation+0xfc>)
 8003faa:	2280      	movs	r2, #128	@ 0x80
 8003fac:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8003fae:	4b10      	ldr	r3, [pc, #64]	@ (8003ff0 <ST7735_SetRotation+0x104>)
 8003fb0:	781a      	ldrb	r2, [r3, #0]
 8003fb2:	4b12      	ldr	r3, [pc, #72]	@ (8003ffc <ST7735_SetRotation+0x110>)
 8003fb4:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8003fb6:	4b10      	ldr	r3, [pc, #64]	@ (8003ff8 <ST7735_SetRotation+0x10c>)
 8003fb8:	781a      	ldrb	r2, [r3, #0]
 8003fba:	4b0e      	ldr	r3, [pc, #56]	@ (8003ff4 <ST7735_SetRotation+0x108>)
 8003fbc:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8003fbe:	46c0      	nop			@ (mov r8, r8)
  }
  ST7735_Select();
 8003fc0:	f7ff fe42 	bl	8003c48 <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 8003fc4:	2036      	movs	r0, #54	@ 0x36
 8003fc6:	f7ff fe6f 	bl	8003ca8 <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 8003fca:	230f      	movs	r3, #15
 8003fcc:	18fb      	adds	r3, r7, r3
 8003fce:	2101      	movs	r1, #1
 8003fd0:	0018      	movs	r0, r3
 8003fd2:	f7ff fe83 	bl	8003cdc <ST7735_WriteData>
  ST7735_Unselect();
 8003fd6:	f7ff fe43 	bl	8003c60 <ST7735_Unselect>
}
 8003fda:	46c0      	nop			@ (mov r8, r8)
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	b004      	add	sp, #16
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	46c0      	nop			@ (mov r8, r8)
 8003fe4:	20000bd0 	.word	0x20000bd0
 8003fe8:	20000bce 	.word	0x20000bce
 8003fec:	20000bcc 	.word	0x20000bcc
 8003ff0:	20000bd1 	.word	0x20000bd1
 8003ff4:	20000bd3 	.word	0x20000bd3
 8003ff8:	20000bd2 	.word	0x20000bd2
 8003ffc:	20000bd4 	.word	0x20000bd4

08004000 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8004000:	b590      	push	{r4, r7, lr}
 8004002:	b085      	sub	sp, #20
 8004004:	af00      	add	r7, sp, #0
 8004006:	0004      	movs	r4, r0
 8004008:	0008      	movs	r0, r1
 800400a:	0011      	movs	r1, r2
 800400c:	1dbb      	adds	r3, r7, #6
 800400e:	1c22      	adds	r2, r4, #0
 8004010:	801a      	strh	r2, [r3, #0]
 8004012:	1d3b      	adds	r3, r7, #4
 8004014:	1c02      	adds	r2, r0, #0
 8004016:	801a      	strh	r2, [r3, #0]
 8004018:	1cbb      	adds	r3, r7, #2
 800401a:	1c0a      	adds	r2, r1, #0
 800401c:	801a      	strh	r2, [r3, #0]
    if((x >= _width) || (y >= _height))
 800401e:	1dbb      	adds	r3, r7, #6
 8004020:	881b      	ldrh	r3, [r3, #0]
 8004022:	4a1c      	ldr	r2, [pc, #112]	@ (8004094 <ST7735_DrawPixel+0x94>)
 8004024:	2100      	movs	r1, #0
 8004026:	5e52      	ldrsh	r2, [r2, r1]
 8004028:	4293      	cmp	r3, r2
 800402a:	da2f      	bge.n	800408c <ST7735_DrawPixel+0x8c>
 800402c:	1d3b      	adds	r3, r7, #4
 800402e:	881b      	ldrh	r3, [r3, #0]
 8004030:	4a19      	ldr	r2, [pc, #100]	@ (8004098 <ST7735_DrawPixel+0x98>)
 8004032:	2100      	movs	r1, #0
 8004034:	5e52      	ldrsh	r2, [r2, r1]
 8004036:	4293      	cmp	r3, r2
 8004038:	da28      	bge.n	800408c <ST7735_DrawPixel+0x8c>
        return;

    ST7735_Select();
 800403a:	f7ff fe05 	bl	8003c48 <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 800403e:	1dbb      	adds	r3, r7, #6
 8004040:	881b      	ldrh	r3, [r3, #0]
 8004042:	b2d8      	uxtb	r0, r3
 8004044:	1d3b      	adds	r3, r7, #4
 8004046:	881b      	ldrh	r3, [r3, #0]
 8004048:	b2d9      	uxtb	r1, r3
 800404a:	1dbb      	adds	r3, r7, #6
 800404c:	881b      	ldrh	r3, [r3, #0]
 800404e:	b2db      	uxtb	r3, r3
 8004050:	3301      	adds	r3, #1
 8004052:	b2da      	uxtb	r2, r3
 8004054:	1d3b      	adds	r3, r7, #4
 8004056:	881b      	ldrh	r3, [r3, #0]
 8004058:	b2db      	uxtb	r3, r3
 800405a:	3301      	adds	r3, #1
 800405c:	b2db      	uxtb	r3, r3
 800405e:	f7ff febb 	bl	8003dd8 <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 8004062:	1cbb      	adds	r3, r7, #2
 8004064:	881b      	ldrh	r3, [r3, #0]
 8004066:	0a1b      	lsrs	r3, r3, #8
 8004068:	b29b      	uxth	r3, r3
 800406a:	b2da      	uxtb	r2, r3
 800406c:	210c      	movs	r1, #12
 800406e:	187b      	adds	r3, r7, r1
 8004070:	701a      	strb	r2, [r3, #0]
 8004072:	1cbb      	adds	r3, r7, #2
 8004074:	881b      	ldrh	r3, [r3, #0]
 8004076:	b2da      	uxtb	r2, r3
 8004078:	187b      	adds	r3, r7, r1
 800407a:	705a      	strb	r2, [r3, #1]
    ST7735_WriteData(data, sizeof(data));
 800407c:	187b      	adds	r3, r7, r1
 800407e:	2102      	movs	r1, #2
 8004080:	0018      	movs	r0, r3
 8004082:	f7ff fe2b 	bl	8003cdc <ST7735_WriteData>

    ST7735_Unselect();
 8004086:	f7ff fdeb 	bl	8003c60 <ST7735_Unselect>
 800408a:	e000      	b.n	800408e <ST7735_DrawPixel+0x8e>
        return;
 800408c:	46c0      	nop			@ (mov r8, r8)
}
 800408e:	46bd      	mov	sp, r7
 8004090:	b005      	add	sp, #20
 8004092:	bd90      	pop	{r4, r7, pc}
 8004094:	20000bcc 	.word	0x20000bcc
 8004098:	20000bce 	.word	0x20000bce

0800409c <ST7735_DrawImage>:
    }

    ST7735_Unselect();
}

void ST7735_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data) {
 800409c:	b5b0      	push	{r4, r5, r7, lr}
 800409e:	b082      	sub	sp, #8
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	0005      	movs	r5, r0
 80040a4:	000c      	movs	r4, r1
 80040a6:	0010      	movs	r0, r2
 80040a8:	0019      	movs	r1, r3
 80040aa:	1dbb      	adds	r3, r7, #6
 80040ac:	1c2a      	adds	r2, r5, #0
 80040ae:	801a      	strh	r2, [r3, #0]
 80040b0:	1d3b      	adds	r3, r7, #4
 80040b2:	1c22      	adds	r2, r4, #0
 80040b4:	801a      	strh	r2, [r3, #0]
 80040b6:	1cbb      	adds	r3, r7, #2
 80040b8:	1c02      	adds	r2, r0, #0
 80040ba:	801a      	strh	r2, [r3, #0]
 80040bc:	003b      	movs	r3, r7
 80040be:	1c0a      	adds	r2, r1, #0
 80040c0:	801a      	strh	r2, [r3, #0]
    if((x >= _width) || (y >= _height)) return;
 80040c2:	1dbb      	adds	r3, r7, #6
 80040c4:	881b      	ldrh	r3, [r3, #0]
 80040c6:	4a2a      	ldr	r2, [pc, #168]	@ (8004170 <ST7735_DrawImage+0xd4>)
 80040c8:	2100      	movs	r1, #0
 80040ca:	5e52      	ldrsh	r2, [r2, r1]
 80040cc:	4293      	cmp	r3, r2
 80040ce:	da47      	bge.n	8004160 <ST7735_DrawImage+0xc4>
 80040d0:	1d3b      	adds	r3, r7, #4
 80040d2:	881b      	ldrh	r3, [r3, #0]
 80040d4:	4a27      	ldr	r2, [pc, #156]	@ (8004174 <ST7735_DrawImage+0xd8>)
 80040d6:	2100      	movs	r1, #0
 80040d8:	5e52      	ldrsh	r2, [r2, r1]
 80040da:	4293      	cmp	r3, r2
 80040dc:	da40      	bge.n	8004160 <ST7735_DrawImage+0xc4>
    if((x + w - 1) >= _width) return;
 80040de:	1dbb      	adds	r3, r7, #6
 80040e0:	881a      	ldrh	r2, [r3, #0]
 80040e2:	1cbb      	adds	r3, r7, #2
 80040e4:	881b      	ldrh	r3, [r3, #0]
 80040e6:	18d3      	adds	r3, r2, r3
 80040e8:	4a21      	ldr	r2, [pc, #132]	@ (8004170 <ST7735_DrawImage+0xd4>)
 80040ea:	2100      	movs	r1, #0
 80040ec:	5e52      	ldrsh	r2, [r2, r1]
 80040ee:	4293      	cmp	r3, r2
 80040f0:	dc38      	bgt.n	8004164 <ST7735_DrawImage+0xc8>
    if((y + h - 1) >= _height) return;
 80040f2:	1d3b      	adds	r3, r7, #4
 80040f4:	881a      	ldrh	r2, [r3, #0]
 80040f6:	003b      	movs	r3, r7
 80040f8:	881b      	ldrh	r3, [r3, #0]
 80040fa:	18d3      	adds	r3, r2, r3
 80040fc:	4a1d      	ldr	r2, [pc, #116]	@ (8004174 <ST7735_DrawImage+0xd8>)
 80040fe:	2100      	movs	r1, #0
 8004100:	5e52      	ldrsh	r2, [r2, r1]
 8004102:	4293      	cmp	r3, r2
 8004104:	dc30      	bgt.n	8004168 <ST7735_DrawImage+0xcc>

    ST7735_Select();
 8004106:	f7ff fd9f 	bl	8003c48 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 800410a:	1dbb      	adds	r3, r7, #6
 800410c:	881b      	ldrh	r3, [r3, #0]
 800410e:	b2d8      	uxtb	r0, r3
 8004110:	1d3b      	adds	r3, r7, #4
 8004112:	881b      	ldrh	r3, [r3, #0]
 8004114:	b2d9      	uxtb	r1, r3
 8004116:	1dbb      	adds	r3, r7, #6
 8004118:	881b      	ldrh	r3, [r3, #0]
 800411a:	b2da      	uxtb	r2, r3
 800411c:	1cbb      	adds	r3, r7, #2
 800411e:	881b      	ldrh	r3, [r3, #0]
 8004120:	b2db      	uxtb	r3, r3
 8004122:	18d3      	adds	r3, r2, r3
 8004124:	b2db      	uxtb	r3, r3
 8004126:	3b01      	subs	r3, #1
 8004128:	b2dc      	uxtb	r4, r3
 800412a:	1d3b      	adds	r3, r7, #4
 800412c:	881b      	ldrh	r3, [r3, #0]
 800412e:	b2da      	uxtb	r2, r3
 8004130:	003b      	movs	r3, r7
 8004132:	881b      	ldrh	r3, [r3, #0]
 8004134:	b2db      	uxtb	r3, r3
 8004136:	18d3      	adds	r3, r2, r3
 8004138:	b2db      	uxtb	r3, r3
 800413a:	3b01      	subs	r3, #1
 800413c:	b2db      	uxtb	r3, r3
 800413e:	0022      	movs	r2, r4
 8004140:	f7ff fe4a 	bl	8003dd8 <ST7735_SetAddressWindow>
    ST7735_WriteData((uint8_t*)data, sizeof(uint16_t)*w*h);
 8004144:	1cbb      	adds	r3, r7, #2
 8004146:	881b      	ldrh	r3, [r3, #0]
 8004148:	003a      	movs	r2, r7
 800414a:	8812      	ldrh	r2, [r2, #0]
 800414c:	4353      	muls	r3, r2
 800414e:	005a      	lsls	r2, r3, #1
 8004150:	69bb      	ldr	r3, [r7, #24]
 8004152:	0011      	movs	r1, r2
 8004154:	0018      	movs	r0, r3
 8004156:	f7ff fdc1 	bl	8003cdc <ST7735_WriteData>
    ST7735_Unselect();
 800415a:	f7ff fd81 	bl	8003c60 <ST7735_Unselect>
 800415e:	e004      	b.n	800416a <ST7735_DrawImage+0xce>
    if((x >= _width) || (y >= _height)) return;
 8004160:	46c0      	nop			@ (mov r8, r8)
 8004162:	e002      	b.n	800416a <ST7735_DrawImage+0xce>
    if((x + w - 1) >= _width) return;
 8004164:	46c0      	nop			@ (mov r8, r8)
 8004166:	e000      	b.n	800416a <ST7735_DrawImage+0xce>
    if((y + h - 1) >= _height) return;
 8004168:	46c0      	nop			@ (mov r8, r8)
}
 800416a:	46bd      	mov	sp, r7
 800416c:	b002      	add	sp, #8
 800416e:	bdb0      	pop	{r4, r5, r7, pc}
 8004170:	20000bcc 	.word	0x20000bcc
 8004174:	20000bce 	.word	0x20000bce

08004178 <minmea_tocoord>:
/**
 * Convert a raw coordinate to a floating point DD.DDD... value.
 * Returns NaN for "unknown" values.
 */
static inline float minmea_tocoord(struct minmea_float *f)
{
 8004178:	b5b0      	push	{r4, r5, r7, lr}
 800417a:	b084      	sub	sp, #16
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
    if (f->scale == 0)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d101      	bne.n	800418c <minmea_tocoord+0x14>
        return NAN;
 8004188:	4b1c      	ldr	r3, [pc, #112]	@ (80041fc <minmea_tocoord+0x84>)
 800418a:	e033      	b.n	80041f4 <minmea_tocoord+0x7c>
    int_least32_t degrees = f->value / (f->scale * 100);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	2164      	movs	r1, #100	@ 0x64
 8004196:	434b      	muls	r3, r1
 8004198:	0019      	movs	r1, r3
 800419a:	0010      	movs	r0, r2
 800419c:	f7fc f862 	bl	8000264 <__divsi3>
 80041a0:	0003      	movs	r3, r0
 80041a2:	60fb      	str	r3, [r7, #12]
    int_least32_t minutes = f->value % (f->scale * 100);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	2164      	movs	r1, #100	@ 0x64
 80041ae:	434b      	muls	r3, r1
 80041b0:	0019      	movs	r1, r3
 80041b2:	0010      	movs	r0, r2
 80041b4:	f7fc f93c 	bl	8000430 <__aeabi_idivmod>
 80041b8:	000b      	movs	r3, r1
 80041ba:	60bb      	str	r3, [r7, #8]
    return (float) degrees + (float) minutes / (60 * f->scale);
 80041bc:	68f8      	ldr	r0, [r7, #12]
 80041be:	f7fd f9c7 	bl	8001550 <__aeabi_i2f>
 80041c2:	1c04      	adds	r4, r0, #0
 80041c4:	68b8      	ldr	r0, [r7, #8]
 80041c6:	f7fd f9c3 	bl	8001550 <__aeabi_i2f>
 80041ca:	1c05      	adds	r5, r0, #0
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	685a      	ldr	r2, [r3, #4]
 80041d0:	0013      	movs	r3, r2
 80041d2:	011b      	lsls	r3, r3, #4
 80041d4:	1a9b      	subs	r3, r3, r2
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	0018      	movs	r0, r3
 80041da:	f7fd f9b9 	bl	8001550 <__aeabi_i2f>
 80041de:	1c03      	adds	r3, r0, #0
 80041e0:	1c19      	adds	r1, r3, #0
 80041e2:	1c28      	adds	r0, r5, #0
 80041e4:	f7fc fccc 	bl	8000b80 <__aeabi_fdiv>
 80041e8:	1c03      	adds	r3, r0, #0
 80041ea:	1c19      	adds	r1, r3, #0
 80041ec:	1c20      	adds	r0, r4, #0
 80041ee:	f7fc fb3d 	bl	800086c <__aeabi_fadd>
 80041f2:	1c03      	adds	r3, r0, #0
}
 80041f4:	1c18      	adds	r0, r3, #0
 80041f6:	46bd      	mov	sp, r7
 80041f8:	b004      	add	sp, #16
 80041fa:	bdb0      	pop	{r4, r5, r7, pc}
 80041fc:	7fc00000 	.word	0x7fc00000

08004200 <json_getSibling>:

/** Get the next sibling of a JSON property that is within a JSON object or array.
  * @param json A valid handler of a json property.
  * @retval The handler of the next sibling if found.
  * @retval Null pointer if the json property is the last one. */
static inline json_t const* json_getSibling( json_t const* json ) {
 8004200:	b580      	push	{r7, lr}
 8004202:	b082      	sub	sp, #8
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
    return json->sibling;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
}
 800420c:	0018      	movs	r0, r3
 800420e:	46bd      	mov	sp, r7
 8004210:	b002      	add	sp, #8
 8004212:	bd80      	pop	{r7, pc}

08004214 <json_getChild>:
/** Get the first property of a JSON object or array.
  * @param json A valid handler of a json property.
  *             Its type must be JSON_OBJ or JSON_ARRAY.
  * @retval The handler of the first property if there is.
  * @retval Null pointer if the json object has not properties. */
static inline json_t const* json_getChild( json_t const* json ) {
 8004214:	b580      	push	{r7, lr}
 8004216:	b082      	sub	sp, #8
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
    return json->u.c.child;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	689b      	ldr	r3, [r3, #8]
}
 8004220:	0018      	movs	r0, r3
 8004222:	46bd      	mov	sp, r7
 8004224:	b002      	add	sp, #8
 8004226:	bd80      	pop	{r7, pc}

08004228 <json_getInteger>:
}

/** Get the value of a json integer property.
  * @param property A valid handler of a json object. Its type must be JSON_INTEGER.
  * @return The value stdint. */
static inline int64_t json_getInteger( json_t const* property ) {
 8004228:	b580      	push	{r7, lr}
 800422a:	b082      	sub	sp, #8
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  return strtoll( property->u.value,(char**)NULL, 10);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	220a      	movs	r2, #10
 8004236:	2100      	movs	r1, #0
 8004238:	0018      	movs	r0, r3
 800423a:	f009 f88b 	bl	800d354 <strtoll>
 800423e:	0002      	movs	r2, r0
 8004240:	000b      	movs	r3, r1
}
 8004242:	0010      	movs	r0, r2
 8004244:	0019      	movs	r1, r3
 8004246:	46bd      	mov	sp, r7
 8004248:	b002      	add	sp, #8
 800424a:	bd80      	pop	{r7, pc}

0800424c <json_getReal>:

/** Get the value of a json real property.
  * @param property A valid handler of a json object. Its type must be JSON_REAL.
  * @return The value. */
static inline double json_getReal( json_t const* property ) {
 800424c:	b580      	push	{r7, lr}
 800424e:	b082      	sub	sp, #8
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  return strtod( property->u.value,(char**)NULL );
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	2100      	movs	r1, #0
 800425a:	0018      	movs	r0, r3
 800425c:	f008 ff32 	bl	800d0c4 <strtod>
 8004260:	0002      	movs	r2, r0
 8004262:	000b      	movs	r3, r1
}
 8004264:	0010      	movs	r0, r2
 8004266:	0019      	movs	r1, r3
 8004268:	46bd      	mov	sp, r7
 800426a:	b002      	add	sp, #8
 800426c:	bd80      	pop	{r7, pc}
	...

08004270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004270:	b5b0      	push	{r4, r5, r7, lr}
 8004272:	b08e      	sub	sp, #56	@ 0x38
 8004274:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004276:	f003 fa11 	bl	800769c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800427a:	f000 fbf7 	bl	8004a6c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  steps=0;
 800427e:	4bd6      	ldr	r3, [pc, #856]	@ (80045d8 <main+0x368>)
 8004280:	2200      	movs	r2, #0
 8004282:	701a      	strb	r2, [r3, #0]
  sitting0.Body = *imgSitting0;
 8004284:	4bd5      	ldr	r3, [pc, #852]	@ (80045dc <main+0x36c>)
 8004286:	4ad6      	ldr	r2, [pc, #856]	@ (80045e0 <main+0x370>)
 8004288:	601a      	str	r2, [r3, #0]
  sitting0.Size = 307;
 800428a:	4bd4      	ldr	r3, [pc, #848]	@ (80045dc <main+0x36c>)
 800428c:	2234      	movs	r2, #52	@ 0x34
 800428e:	32ff      	adds	r2, #255	@ 0xff
 8004290:	605a      	str	r2, [r3, #4]
  sitting1.Body = *imgSitting1;
 8004292:	4bd4      	ldr	r3, [pc, #848]	@ (80045e4 <main+0x374>)
 8004294:	4ad4      	ldr	r2, [pc, #848]	@ (80045e8 <main+0x378>)
 8004296:	601a      	str	r2, [r3, #0]
  sitting1.Size = 305;
 8004298:	4bd2      	ldr	r3, [pc, #840]	@ (80045e4 <main+0x374>)
 800429a:	2232      	movs	r2, #50	@ 0x32
 800429c:	32ff      	adds	r2, #255	@ 0xff
 800429e:	605a      	str	r2, [r3, #4]
  animSitting[0] = sitting0;
 80042a0:	4bd2      	ldr	r3, [pc, #840]	@ (80045ec <main+0x37c>)
 80042a2:	4ace      	ldr	r2, [pc, #824]	@ (80045dc <main+0x36c>)
 80042a4:	ca03      	ldmia	r2!, {r0, r1}
 80042a6:	c303      	stmia	r3!, {r0, r1}
  animSitting[1] = sitting1;
 80042a8:	4bd0      	ldr	r3, [pc, #832]	@ (80045ec <main+0x37c>)
 80042aa:	4ace      	ldr	r2, [pc, #824]	@ (80045e4 <main+0x374>)
 80042ac:	3308      	adds	r3, #8
 80042ae:	ca03      	ldmia	r2!, {r0, r1}
 80042b0:	c303      	stmia	r3!, {r0, r1}
  game.evo=0;
 80042b2:	4bcf      	ldr	r3, [pc, #828]	@ (80045f0 <main+0x380>)
 80042b4:	2200      	movs	r2, #0
 80042b6:	741a      	strb	r2, [r3, #16]
  game.uid[0]='h';
 80042b8:	4acd      	ldr	r2, [pc, #820]	@ (80045f0 <main+0x380>)
 80042ba:	2394      	movs	r3, #148	@ 0x94
 80042bc:	005b      	lsls	r3, r3, #1
 80042be:	2168      	movs	r1, #104	@ 0x68
 80042c0:	54d1      	strb	r1, [r2, r3]
  game.uid[1]='i';
 80042c2:	4acb      	ldr	r2, [pc, #812]	@ (80045f0 <main+0x380>)
 80042c4:	232a      	movs	r3, #42	@ 0x2a
 80042c6:	33ff      	adds	r3, #255	@ 0xff
 80042c8:	2169      	movs	r1, #105	@ 0x69
 80042ca:	54d1      	strb	r1, [r2, r3]
  game.allSteps=0;
 80042cc:	4ac8      	ldr	r2, [pc, #800]	@ (80045f0 <main+0x380>)
 80042ce:	238c      	movs	r3, #140	@ 0x8c
 80042d0:	005b      	lsls	r3, r3, #1
 80042d2:	2100      	movs	r1, #0
 80042d4:	50d1      	str	r1, [r2, r3]
  game.mood=100;
 80042d6:	4bc6      	ldr	r3, [pc, #792]	@ (80045f0 <main+0x380>)
 80042d8:	2264      	movs	r2, #100	@ 0x64
 80042da:	745a      	strb	r2, [r3, #17]
  game.numLocations=3;
 80042dc:	4bc4      	ldr	r3, [pc, #784]	@ (80045f0 <main+0x380>)
 80042de:	2203      	movs	r2, #3
 80042e0:	615a      	str	r2, [r3, #20]
  game.stepsToday=0;
 80042e2:	4ac3      	ldr	r2, [pc, #780]	@ (80045f0 <main+0x380>)
 80042e4:	2390      	movs	r3, #144	@ 0x90
 80042e6:	005b      	lsls	r3, r3, #1
 80042e8:	2100      	movs	r1, #0
 80042ea:	50d1      	str	r1, [r2, r3]
  game.weeklySteps=0;
 80042ec:	4ac0      	ldr	r2, [pc, #768]	@ (80045f0 <main+0x380>)
 80042ee:	238e      	movs	r3, #142	@ 0x8e
 80042f0:	005b      	lsls	r3, r3, #1
 80042f2:	2100      	movs	r1, #0
 80042f4:	50d1      	str	r1, [r2, r3]
  game.challengeGoal=20000;
 80042f6:	4abe      	ldr	r2, [pc, #760]	@ (80045f0 <main+0x380>)
 80042f8:	2392      	movs	r3, #146	@ 0x92
 80042fa:	005b      	lsls	r3, r3, #1
 80042fc:	49bd      	ldr	r1, [pc, #756]	@ (80045f4 <main+0x384>)
 80042fe:	50d1      	str	r1, [r2, r3]
  dummy.lat=12.34567;
 8004300:	4bbd      	ldr	r3, [pc, #756]	@ (80045f8 <main+0x388>)
 8004302:	4abe      	ldr	r2, [pc, #760]	@ (80045fc <main+0x38c>)
 8004304:	601a      	str	r2, [r3, #0]
  dummy.lon=-89.10111;
 8004306:	4bbc      	ldr	r3, [pc, #752]	@ (80045f8 <main+0x388>)
 8004308:	4abd      	ldr	r2, [pc, #756]	@ (8004600 <main+0x390>)
 800430a:	605a      	str	r2, [r3, #4]
  game.positions[0]=dummy;
 800430c:	4bb8      	ldr	r3, [pc, #736]	@ (80045f0 <main+0x380>)
 800430e:	4aba      	ldr	r2, [pc, #744]	@ (80045f8 <main+0x388>)
 8004310:	3318      	adds	r3, #24
 8004312:	ca03      	ldmia	r2!, {r0, r1}
 8004314:	c303      	stmia	r3!, {r0, r1}
  game.positions[1]=dummy;
 8004316:	4bb6      	ldr	r3, [pc, #728]	@ (80045f0 <main+0x380>)
 8004318:	4ab7      	ldr	r2, [pc, #732]	@ (80045f8 <main+0x388>)
 800431a:	3320      	adds	r3, #32
 800431c:	ca03      	ldmia	r2!, {r0, r1}
 800431e:	c303      	stmia	r3!, {r0, r1}
  game.positions[2]=dummy;
 8004320:	4bb3      	ldr	r3, [pc, #716]	@ (80045f0 <main+0x380>)
 8004322:	4ab5      	ldr	r2, [pc, #724]	@ (80045f8 <main+0x388>)
 8004324:	3328      	adds	r3, #40	@ 0x28
 8004326:	ca03      	ldmia	r2!, {r0, r1}
 8004328:	c303      	stmia	r3!, {r0, r1}
  game.time.hours=0;
 800432a:	4bb1      	ldr	r3, [pc, #708]	@ (80045f0 <main+0x380>)
 800432c:	2200      	movs	r2, #0
 800432e:	601a      	str	r2, [r3, #0]
  gpsThreshold = .0001;
 8004330:	4bb4      	ldr	r3, [pc, #720]	@ (8004604 <main+0x394>)
 8004332:	4ab5      	ldr	r2, [pc, #724]	@ (8004608 <main+0x398>)
 8004334:	601a      	str	r2, [r3, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004336:	f000 fd9f 	bl	8004e78 <MX_GPIO_Init>
  MX_I2C1_Init();
 800433a:	f000 fbf9 	bl	8004b30 <MX_I2C1_Init>
  MX_SPI1_Init();
 800433e:	f000 fc37 	bl	8004bb0 <MX_SPI1_Init>
  MX_TIM17_Init();
 8004342:	f000 fc75 	bl	8004c30 <MX_TIM17_Init>
  MX_USART1_UART_Init();
 8004346:	f000 fcfb 	bl	8004d40 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800434a:	f000 fd47 	bl	8004ddc <MX_USART2_UART_Init>
  //MX_RTC_Init();
  /* USER CODE BEGIN 2 */
  //HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
  ST7735_Unselect();
 800434e:	f7ff fc87 	bl	8003c60 <ST7735_Unselect>
  ST7735_Init(1);
 8004352:	2001      	movs	r0, #1
 8004354:	f7ff fd98 	bl	8003e88 <ST7735_Init>
  //testAll();
  buffer[0] = 'A';
 8004358:	4bac      	ldr	r3, [pc, #688]	@ (800460c <main+0x39c>)
 800435a:	2241      	movs	r2, #65	@ 0x41
 800435c:	701a      	strb	r2, [r3, #0]
  buffer[1] = 'B';
 800435e:	4bab      	ldr	r3, [pc, #684]	@ (800460c <main+0x39c>)
 8004360:	2242      	movs	r2, #66	@ 0x42
 8004362:	705a      	strb	r2, [r3, #1]
  TIM17->CCR1 = 5;
 8004364:	4baa      	ldr	r3, [pc, #680]	@ (8004610 <main+0x3a0>)
 8004366:	2205      	movs	r2, #5
 8004368:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM17->PSC=64;
 800436a:	4ba9      	ldr	r3, [pc, #676]	@ (8004610 <main+0x3a0>)
 800436c:	2240      	movs	r2, #64	@ 0x40
 800436e:	629a      	str	r2, [r3, #40]	@ 0x28
  uint8_t ret=0;
 8004370:	2327      	movs	r3, #39	@ 0x27
 8004372:	18fb      	adds	r3, r7, r3
 8004374:	2200      	movs	r2, #0
 8004376:	701a      	strb	r2, [r3, #0]
    //_ADXL343_Init();

      //Pedometer Setup
      _ADXL343_WriteReg8(0x19, 0x02);
 8004378:	2102      	movs	r1, #2
 800437a:	2019      	movs	r0, #25
 800437c:	f000 ffec 	bl	8005358 <_ADXL343_WriteReg8>
      ////wait

      _ADXL343_WriteReg8(0x7C, 0x01);
 8004380:	2101      	movs	r1, #1
 8004382:	207c      	movs	r0, #124	@ 0x7c
 8004384:	f000 ffe8 	bl	8005358 <_ADXL343_WriteReg8>
       _ADXL343_WriteReg8(0x1A, 0x38);
 8004388:	2138      	movs	r1, #56	@ 0x38
 800438a:	201a      	movs	r0, #26
 800438c:	f000 ffe4 	bl	8005358 <_ADXL343_WriteReg8>
      _ADXL343_WriteReg8(0x1B, 0x04);
 8004390:	2104      	movs	r1, #4
 8004392:	201b      	movs	r0, #27
 8004394:	f000 ffe0 	bl	8005358 <_ADXL343_WriteReg8>
      _ADXL343_WriteReg8(0x1F, 0x80);
 8004398:	2180      	movs	r1, #128	@ 0x80
 800439a:	201f      	movs	r0, #31
 800439c:	f000 ffdc 	bl	8005358 <_ADXL343_WriteReg8>
      _ADXL343_WriteReg8(0x21, 0x80);
 80043a0:	2180      	movs	r1, #128	@ 0x80
 80043a2:	2021      	movs	r0, #33	@ 0x21
 80043a4:	f000 ffd8 	bl	8005358 <_ADXL343_WriteReg8>



      //  //Step Counter
      _ADXL343_WriteReg8(0x18, 0x01); // enable walking mode
 80043a8:	2101      	movs	r1, #1
 80043aa:	2018      	movs	r0, #24
 80043ac:	f000 ffd4 	bl	8005358 <_ADXL343_WriteReg8>
      _ADXL343_WriteReg8(0x20, 0x01); // enable step interrupt
 80043b0:	2101      	movs	r1, #1
 80043b2:	2020      	movs	r0, #32
 80043b4:	f000 ffd0 	bl	8005358 <_ADXL343_WriteReg8>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
      //Before entering the while, fill the screen to clear it once
      fillScreen(BLACK);
 80043b8:	2000      	movs	r0, #0
 80043ba:	f7ff fb0b 	bl	80039d4 <fillScreen>
  while (1)
  {
	  _ADXL343_ReadReg8(0x15, &steps, 1);
 80043be:	4b86      	ldr	r3, [pc, #536]	@ (80045d8 <main+0x368>)
 80043c0:	2201      	movs	r2, #1
 80043c2:	0019      	movs	r1, r3
 80043c4:	2015      	movs	r0, #21
 80043c6:	f000 ff95 	bl	80052f4 <_ADXL343_ReadReg8>

	  //SendData();
	  //ReceiveData();
	  //_ADXL343_ReadReg8(0x00, &steps, 1);
	  if(checkTime){
 80043ca:	4b92      	ldr	r3, [pc, #584]	@ (8004614 <main+0x3a4>)
 80043cc:	881b      	ldrh	r3, [r3, #0]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d02b      	beq.n	800442a <main+0x1ba>
	  if(((game.time.minutes%dayLength)==0) && game.time.seconds>0){
 80043d2:	4b87      	ldr	r3, [pc, #540]	@ (80045f0 <main+0x380>)
 80043d4:	685a      	ldr	r2, [r3, #4]
 80043d6:	4b90      	ldr	r3, [pc, #576]	@ (8004618 <main+0x3a8>)
 80043d8:	881b      	ldrh	r3, [r3, #0]
 80043da:	0019      	movs	r1, r3
 80043dc:	0010      	movs	r0, r2
 80043de:	f7fc f827 	bl	8000430 <__aeabi_idivmod>
 80043e2:	1e0b      	subs	r3, r1, #0
 80043e4:	d10b      	bne.n	80043fe <main+0x18e>
 80043e6:	4b82      	ldr	r3, [pc, #520]	@ (80045f0 <main+0x380>)
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	dd07      	ble.n	80043fe <main+0x18e>
		  game.stepsToday=0;
 80043ee:	4a80      	ldr	r2, [pc, #512]	@ (80045f0 <main+0x380>)
 80043f0:	2390      	movs	r3, #144	@ 0x90
 80043f2:	005b      	lsls	r3, r3, #1
 80043f4:	2100      	movs	r1, #0
 80043f6:	50d1      	str	r1, [r2, r3]
		  checkTime=0;
 80043f8:	4b86      	ldr	r3, [pc, #536]	@ (8004614 <main+0x3a4>)
 80043fa:	2200      	movs	r2, #0
 80043fc:	801a      	strh	r2, [r3, #0]
	  }

	  if(((game.time.minutes%weekLength)==0) && game.time.seconds>0){
 80043fe:	4b7c      	ldr	r3, [pc, #496]	@ (80045f0 <main+0x380>)
 8004400:	685a      	ldr	r2, [r3, #4]
 8004402:	4b86      	ldr	r3, [pc, #536]	@ (800461c <main+0x3ac>)
 8004404:	881b      	ldrh	r3, [r3, #0]
 8004406:	0019      	movs	r1, r3
 8004408:	0010      	movs	r0, r2
 800440a:	f7fc f811 	bl	8000430 <__aeabi_idivmod>
 800440e:	1e0b      	subs	r3, r1, #0
 8004410:	d10b      	bne.n	800442a <main+0x1ba>
 8004412:	4b77      	ldr	r3, [pc, #476]	@ (80045f0 <main+0x380>)
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	2b00      	cmp	r3, #0
 8004418:	dd07      	ble.n	800442a <main+0x1ba>
		  game.weeklySteps=0;
 800441a:	4a75      	ldr	r2, [pc, #468]	@ (80045f0 <main+0x380>)
 800441c:	238e      	movs	r3, #142	@ 0x8e
 800441e:	005b      	lsls	r3, r3, #1
 8004420:	2100      	movs	r1, #0
 8004422:	50d1      	str	r1, [r2, r3]
		  checkTime=0;
 8004424:	4b7b      	ldr	r3, [pc, #492]	@ (8004614 <main+0x3a4>)
 8004426:	2200      	movs	r2, #0
 8004428:	801a      	strh	r2, [r3, #0]
	  }
	  }
	  if((game.time.minutes%dayLength)==1) checkTime=1;
 800442a:	4b71      	ldr	r3, [pc, #452]	@ (80045f0 <main+0x380>)
 800442c:	685a      	ldr	r2, [r3, #4]
 800442e:	4b7a      	ldr	r3, [pc, #488]	@ (8004618 <main+0x3a8>)
 8004430:	881b      	ldrh	r3, [r3, #0]
 8004432:	0019      	movs	r1, r3
 8004434:	0010      	movs	r0, r2
 8004436:	f7fb fffb 	bl	8000430 <__aeabi_idivmod>
 800443a:	000b      	movs	r3, r1
 800443c:	2b01      	cmp	r3, #1
 800443e:	d102      	bne.n	8004446 <main+0x1d6>
 8004440:	4b74      	ldr	r3, [pc, #464]	@ (8004614 <main+0x3a4>)
 8004442:	2201      	movs	r2, #1
 8004444:	801a      	strh	r2, [r3, #0]
	  if(steps!=0){
 8004446:	4b64      	ldr	r3, [pc, #400]	@ (80045d8 <main+0x368>)
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d033      	beq.n	80044b6 <main+0x246>
	  game.stepsToday +=steps*game.numLocations;
 800444e:	4a68      	ldr	r2, [pc, #416]	@ (80045f0 <main+0x380>)
 8004450:	2390      	movs	r3, #144	@ 0x90
 8004452:	005b      	lsls	r3, r3, #1
 8004454:	58d2      	ldr	r2, [r2, r3]
 8004456:	4b60      	ldr	r3, [pc, #384]	@ (80045d8 <main+0x368>)
 8004458:	781b      	ldrb	r3, [r3, #0]
 800445a:	0019      	movs	r1, r3
 800445c:	4b64      	ldr	r3, [pc, #400]	@ (80045f0 <main+0x380>)
 800445e:	695b      	ldr	r3, [r3, #20]
 8004460:	434b      	muls	r3, r1
 8004462:	18d1      	adds	r1, r2, r3
 8004464:	4a62      	ldr	r2, [pc, #392]	@ (80045f0 <main+0x380>)
 8004466:	2390      	movs	r3, #144	@ 0x90
 8004468:	005b      	lsls	r3, r3, #1
 800446a:	50d1      	str	r1, [r2, r3]
	  game.weeklySteps+=steps*game.numLocations;
 800446c:	4a60      	ldr	r2, [pc, #384]	@ (80045f0 <main+0x380>)
 800446e:	238e      	movs	r3, #142	@ 0x8e
 8004470:	005b      	lsls	r3, r3, #1
 8004472:	58d2      	ldr	r2, [r2, r3]
 8004474:	4b58      	ldr	r3, [pc, #352]	@ (80045d8 <main+0x368>)
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	0019      	movs	r1, r3
 800447a:	4b5d      	ldr	r3, [pc, #372]	@ (80045f0 <main+0x380>)
 800447c:	695b      	ldr	r3, [r3, #20]
 800447e:	434b      	muls	r3, r1
 8004480:	18d1      	adds	r1, r2, r3
 8004482:	4a5b      	ldr	r2, [pc, #364]	@ (80045f0 <main+0x380>)
 8004484:	238e      	movs	r3, #142	@ 0x8e
 8004486:	005b      	lsls	r3, r3, #1
 8004488:	50d1      	str	r1, [r2, r3]
	  game.allSteps+=steps*game.numLocations;
 800448a:	4a59      	ldr	r2, [pc, #356]	@ (80045f0 <main+0x380>)
 800448c:	238c      	movs	r3, #140	@ 0x8c
 800448e:	005b      	lsls	r3, r3, #1
 8004490:	58d2      	ldr	r2, [r2, r3]
 8004492:	4b51      	ldr	r3, [pc, #324]	@ (80045d8 <main+0x368>)
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	0019      	movs	r1, r3
 8004498:	4b55      	ldr	r3, [pc, #340]	@ (80045f0 <main+0x380>)
 800449a:	695b      	ldr	r3, [r3, #20]
 800449c:	434b      	muls	r3, r1
 800449e:	18d1      	adds	r1, r2, r3
 80044a0:	4a53      	ldr	r2, [pc, #332]	@ (80045f0 <main+0x380>)
 80044a2:	238c      	movs	r3, #140	@ 0x8c
 80044a4:	005b      	lsls	r3, r3, #1
 80044a6:	50d1      	str	r1, [r2, r3]
	  steps=0;
 80044a8:	4b4b      	ldr	r3, [pc, #300]	@ (80045d8 <main+0x368>)
 80044aa:	2200      	movs	r2, #0
 80044ac:	701a      	strb	r2, [r3, #0]
	  _ADXL343_WriteReg8(0x7E, 0xB1);
 80044ae:	21b1      	movs	r1, #177	@ 0xb1
 80044b0:	207e      	movs	r0, #126	@ 0x7e
 80044b2:	f000 ff51 	bl	8005358 <_ADXL343_WriteReg8>
	  }
	  //SendData();
	  //HAL_UART_Transmit(&huart2, "hello", 5, 100);
	  switch(currentMenu){
 80044b6:	4b5a      	ldr	r3, [pc, #360]	@ (8004620 <main+0x3b0>)
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	2b04      	cmp	r3, #4
 80044bc:	d100      	bne.n	80044c0 <main+0x250>
 80044be:	e26e      	b.n	800499e <main+0x72e>
 80044c0:	dd00      	ble.n	80044c4 <main+0x254>
 80044c2:	e29a      	b.n	80049fa <main+0x78a>
 80044c4:	2b02      	cmp	r3, #2
 80044c6:	d100      	bne.n	80044ca <main+0x25a>
 80044c8:	e236      	b.n	8004938 <main+0x6c8>
 80044ca:	dd00      	ble.n	80044ce <main+0x25e>
 80044cc:	e295      	b.n	80049fa <main+0x78a>
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d100      	bne.n	80044d4 <main+0x264>
 80044d2:	e0b7      	b.n	8004644 <main+0x3d4>
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d000      	beq.n	80044da <main+0x26a>
 80044d8:	e28f      	b.n	80049fa <main+0x78a>
	  case Main:

		  if((totalFrames)%600==0) GetLatLon();
 80044da:	4b52      	ldr	r3, [pc, #328]	@ (8004624 <main+0x3b4>)
 80044dc:	881b      	ldrh	r3, [r3, #0]
 80044de:	2296      	movs	r2, #150	@ 0x96
 80044e0:	0091      	lsls	r1, r2, #2
 80044e2:	0018      	movs	r0, r3
 80044e4:	f7fb feba 	bl	800025c <__aeabi_uidivmod>
 80044e8:	000b      	movs	r3, r1
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d101      	bne.n	80044f4 <main+0x284>
 80044f0:	f001 fa0e 	bl	8005910 <GetLatLon>
		  if((++updateScreen)>=5)
 80044f4:	4b4c      	ldr	r3, [pc, #304]	@ (8004628 <main+0x3b8>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	1c5a      	adds	r2, r3, #1
 80044fa:	4b4b      	ldr	r3, [pc, #300]	@ (8004628 <main+0x3b8>)
 80044fc:	601a      	str	r2, [r3, #0]
 80044fe:	4b4a      	ldr	r3, [pc, #296]	@ (8004628 <main+0x3b8>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2b04      	cmp	r3, #4
 8004504:	d91c      	bls.n	8004540 <main+0x2d0>
		  {
			  //Animate character
			  Animate(animSitting,1);
 8004506:	4b39      	ldr	r3, [pc, #228]	@ (80045ec <main+0x37c>)
 8004508:	2101      	movs	r1, #1
 800450a:	0018      	movs	r0, r3
 800450c:	f000 fec0 	bl	8005290 <Animate>
			  updateScreen = 0;
 8004510:	4b45      	ldr	r3, [pc, #276]	@ (8004628 <main+0x3b8>)
 8004512:	2200      	movs	r2, #0
 8004514:	601a      	str	r2, [r3, #0]
			  //Update steps
			  sprintf(buffer2, "Steps today: %d ", steps);
 8004516:	4b30      	ldr	r3, [pc, #192]	@ (80045d8 <main+0x368>)
 8004518:	781b      	ldrb	r3, [r3, #0]
 800451a:	001a      	movs	r2, r3
 800451c:	4943      	ldr	r1, [pc, #268]	@ (800462c <main+0x3bc>)
 800451e:	4b44      	ldr	r3, [pc, #272]	@ (8004630 <main+0x3c0>)
 8004520:	0018      	movs	r0, r3
 8004522:	f008 ffe7 	bl	800d4f4 <siprintf>
			  drawString(0, 20, buffer2, WHITE, BLACK, 1, 1);
 8004526:	2301      	movs	r3, #1
 8004528:	425b      	negs	r3, r3
 800452a:	4a41      	ldr	r2, [pc, #260]	@ (8004630 <main+0x3c0>)
 800452c:	2101      	movs	r1, #1
 800452e:	9102      	str	r1, [sp, #8]
 8004530:	2101      	movs	r1, #1
 8004532:	9101      	str	r1, [sp, #4]
 8004534:	2100      	movs	r1, #0
 8004536:	9100      	str	r1, [sp, #0]
 8004538:	2114      	movs	r1, #20
 800453a:	2000      	movs	r0, #0
 800453c:	f7ff f906 	bl	800374c <drawString>
		  }

		  //Interact with the SLG
		  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1)==GPIO_PIN_SET)
 8004540:	4b3c      	ldr	r3, [pc, #240]	@ (8004634 <main+0x3c4>)
 8004542:	2102      	movs	r1, #2
 8004544:	0018      	movs	r0, r3
 8004546:	f003 fb89 	bl	8007c5c <HAL_GPIO_ReadPin>
 800454a:	0003      	movs	r3, r0
 800454c:	2b01      	cmp	r3, #1
 800454e:	d107      	bne.n	8004560 <main+0x2f0>
		  {
			  effect = Evolution;
 8004550:	4b39      	ldr	r3, [pc, #228]	@ (8004638 <main+0x3c8>)
 8004552:	2206      	movs	r2, #6
 8004554:	701a      	strb	r2, [r3, #0]
			  PlayEffect(effect);
 8004556:	4b38      	ldr	r3, [pc, #224]	@ (8004638 <main+0x3c8>)
 8004558:	781b      	ldrb	r3, [r3, #0]
 800455a:	0018      	movs	r0, r3
 800455c:	f000 fd3e 	bl	8004fdc <PlayEffect>
		  }


		  //Change current Menu
		  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_SET ) {
 8004560:	4b36      	ldr	r3, [pc, #216]	@ (800463c <main+0x3cc>)
 8004562:	2104      	movs	r1, #4
 8004564:	0018      	movs	r0, r3
 8004566:	f003 fb79 	bl	8007c5c <HAL_GPIO_ReadPin>
 800456a:	0003      	movs	r3, r0
 800456c:	2b01      	cmp	r3, #1
 800456e:	d111      	bne.n	8004594 <main+0x324>
			  effect = MenuBeep;
 8004570:	4b31      	ldr	r3, [pc, #196]	@ (8004638 <main+0x3c8>)
 8004572:	2200      	movs	r2, #0
 8004574:	701a      	strb	r2, [r3, #0]
			  PlayEffect(effect);
 8004576:	4b30      	ldr	r3, [pc, #192]	@ (8004638 <main+0x3c8>)
 8004578:	781b      	ldrb	r3, [r3, #0]
 800457a:	0018      	movs	r0, r3
 800457c:	f000 fd2e 	bl	8004fdc <PlayEffect>

			  currentMenu = Settings;
 8004580:	4b27      	ldr	r3, [pc, #156]	@ (8004620 <main+0x3b0>)
 8004582:	2204      	movs	r2, #4
 8004584:	701a      	strb	r2, [r3, #0]
			  canChange = 0;
 8004586:	4b2e      	ldr	r3, [pc, #184]	@ (8004640 <main+0x3d0>)
 8004588:	2200      	movs	r2, #0
 800458a:	701a      	strb	r2, [r3, #0]
			  fillScreen(BLACK);
 800458c:	2000      	movs	r0, #0
 800458e:	f7ff fa21 	bl	80039d4 <fillScreen>
		  }
		  else
			  canChange = 1;


		  break;
 8004592:	e232      	b.n	80049fa <main+0x78a>
		  else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_SET ) {
 8004594:	2380      	movs	r3, #128	@ 0x80
 8004596:	011a      	lsls	r2, r3, #4
 8004598:	23a0      	movs	r3, #160	@ 0xa0
 800459a:	05db      	lsls	r3, r3, #23
 800459c:	0011      	movs	r1, r2
 800459e:	0018      	movs	r0, r3
 80045a0:	f003 fb5c 	bl	8007c5c <HAL_GPIO_ReadPin>
 80045a4:	0003      	movs	r3, r0
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d111      	bne.n	80045ce <main+0x35e>
			  effect = MenuBeep;
 80045aa:	4b23      	ldr	r3, [pc, #140]	@ (8004638 <main+0x3c8>)
 80045ac:	2200      	movs	r2, #0
 80045ae:	701a      	strb	r2, [r3, #0]
			  PlayEffect(effect);
 80045b0:	4b21      	ldr	r3, [pc, #132]	@ (8004638 <main+0x3c8>)
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	0018      	movs	r0, r3
 80045b6:	f000 fd11 	bl	8004fdc <PlayEffect>
			  currentMenu = StatsDisplay;
 80045ba:	4b19      	ldr	r3, [pc, #100]	@ (8004620 <main+0x3b0>)
 80045bc:	2200      	movs	r2, #0
 80045be:	701a      	strb	r2, [r3, #0]
			  canChange = 0;
 80045c0:	4b1f      	ldr	r3, [pc, #124]	@ (8004640 <main+0x3d0>)
 80045c2:	2200      	movs	r2, #0
 80045c4:	701a      	strb	r2, [r3, #0]
			  fillScreen(BLACK);
 80045c6:	2000      	movs	r0, #0
 80045c8:	f7ff fa04 	bl	80039d4 <fillScreen>
		  break;
 80045cc:	e215      	b.n	80049fa <main+0x78a>
			  canChange = 1;
 80045ce:	4b1c      	ldr	r3, [pc, #112]	@ (8004640 <main+0x3d0>)
 80045d0:	2201      	movs	r2, #1
 80045d2:	701a      	strb	r2, [r3, #0]
		  break;
 80045d4:	e211      	b.n	80049fa <main+0x78a>
 80045d6:	46c0      	nop			@ (mov r8, r8)
 80045d8:	20001be8 	.word	0x20001be8
 80045dc:	20001b4c 	.word	0x20001b4c
 80045e0:	20000008 	.word	0x20000008
 80045e4:	20001b54 	.word	0x20001b54
 80045e8:	200004d4 	.word	0x200004d4
 80045ec:	20001b5c 	.word	0x20001b5c
 80045f0:	20000bdc 	.word	0x20000bdc
 80045f4:	00004e20 	.word	0x00004e20
 80045f8:	20000d24 	.word	0x20000d24
 80045fc:	414587dd 	.word	0x414587dd
 8004600:	c2b233c5 	.word	0xc2b233c5
 8004604:	20001b70 	.word	0x20001b70
 8004608:	38d1b717 	.word	0x38d1b717
 800460c:	20000d80 	.word	0x20000d80
 8004610:	40014800 	.word	0x40014800
 8004614:	20000000 	.word	0x20000000
 8004618:	20000002 	.word	0x20000002
 800461c:	20000004 	.word	0x20000004
 8004620:	200009c4 	.word	0x200009c4
 8004624:	20000d7c 	.word	0x20000d7c
 8004628:	20001b48 	.word	0x20001b48
 800462c:	0800fc90 	.word	0x0800fc90
 8004630:	20001b84 	.word	0x20001b84
 8004634:	50000800 	.word	0x50000800
 8004638:	20000bd8 	.word	0x20000bd8
 800463c:	50000400 	.word	0x50000400
 8004640:	200009c5 	.word	0x200009c5
	  case StatsDisplay:

		  if((++updateScreen)>=5)
 8004644:	4bf0      	ldr	r3, [pc, #960]	@ (8004a08 <main+0x798>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	1c5a      	adds	r2, r3, #1
 800464a:	4bef      	ldr	r3, [pc, #956]	@ (8004a08 <main+0x798>)
 800464c:	601a      	str	r2, [r3, #0]
 800464e:	4bee      	ldr	r3, [pc, #952]	@ (8004a08 <main+0x798>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	2b04      	cmp	r3, #4
 8004654:	d800      	bhi.n	8004658 <main+0x3e8>
 8004656:	e151      	b.n	80048fc <main+0x68c>
		  {
			  //fillScreen(BLACK);

			  drawString(0, 150, "STEPS", WHITE, BLACK, 1, 1);
 8004658:	2301      	movs	r3, #1
 800465a:	425b      	negs	r3, r3
 800465c:	4aeb      	ldr	r2, [pc, #940]	@ (8004a0c <main+0x79c>)
 800465e:	2101      	movs	r1, #1
 8004660:	9102      	str	r1, [sp, #8]
 8004662:	2101      	movs	r1, #1
 8004664:	9101      	str	r1, [sp, #4]
 8004666:	2100      	movs	r1, #0
 8004668:	9100      	str	r1, [sp, #0]
 800466a:	2196      	movs	r1, #150	@ 0x96
 800466c:	2000      	movs	r0, #0
 800466e:	f7ff f86d 	bl	800374c <drawString>
			  sprintf(buffer2, "Today: %d ", game.stepsToday);
 8004672:	4ae7      	ldr	r2, [pc, #924]	@ (8004a10 <main+0x7a0>)
 8004674:	2390      	movs	r3, #144	@ 0x90
 8004676:	005b      	lsls	r3, r3, #1
 8004678:	58d2      	ldr	r2, [r2, r3]
 800467a:	49e6      	ldr	r1, [pc, #920]	@ (8004a14 <main+0x7a4>)
 800467c:	4be6      	ldr	r3, [pc, #920]	@ (8004a18 <main+0x7a8>)
 800467e:	0018      	movs	r0, r3
 8004680:	f008 ff38 	bl	800d4f4 <siprintf>
			  drawString(0, 140, buffer2, WHITE, BLACK, 1, 1);
 8004684:	2301      	movs	r3, #1
 8004686:	425b      	negs	r3, r3
 8004688:	4ae3      	ldr	r2, [pc, #908]	@ (8004a18 <main+0x7a8>)
 800468a:	2101      	movs	r1, #1
 800468c:	9102      	str	r1, [sp, #8]
 800468e:	2101      	movs	r1, #1
 8004690:	9101      	str	r1, [sp, #4]
 8004692:	2100      	movs	r1, #0
 8004694:	9100      	str	r1, [sp, #0]
 8004696:	218c      	movs	r1, #140	@ 0x8c
 8004698:	2000      	movs	r0, #0
 800469a:	f7ff f857 	bl	800374c <drawString>
			  sprintf(buffer2, "This week: %d ", game.weeklySteps);
 800469e:	4adc      	ldr	r2, [pc, #880]	@ (8004a10 <main+0x7a0>)
 80046a0:	238e      	movs	r3, #142	@ 0x8e
 80046a2:	005b      	lsls	r3, r3, #1
 80046a4:	58d2      	ldr	r2, [r2, r3]
 80046a6:	49dd      	ldr	r1, [pc, #884]	@ (8004a1c <main+0x7ac>)
 80046a8:	4bdb      	ldr	r3, [pc, #876]	@ (8004a18 <main+0x7a8>)
 80046aa:	0018      	movs	r0, r3
 80046ac:	f008 ff22 	bl	800d4f4 <siprintf>
			  drawString(0, 130, buffer2, WHITE, BLACK, 1, 1);
 80046b0:	2301      	movs	r3, #1
 80046b2:	425b      	negs	r3, r3
 80046b4:	4ad8      	ldr	r2, [pc, #864]	@ (8004a18 <main+0x7a8>)
 80046b6:	2101      	movs	r1, #1
 80046b8:	9102      	str	r1, [sp, #8]
 80046ba:	2101      	movs	r1, #1
 80046bc:	9101      	str	r1, [sp, #4]
 80046be:	2100      	movs	r1, #0
 80046c0:	9100      	str	r1, [sp, #0]
 80046c2:	2182      	movs	r1, #130	@ 0x82
 80046c4:	2000      	movs	r0, #0
 80046c6:	f7ff f841 	bl	800374c <drawString>
			  sprintf(buffer2, "All time: %d ", game.allSteps);
 80046ca:	4ad1      	ldr	r2, [pc, #836]	@ (8004a10 <main+0x7a0>)
 80046cc:	238c      	movs	r3, #140	@ 0x8c
 80046ce:	005b      	lsls	r3, r3, #1
 80046d0:	58d2      	ldr	r2, [r2, r3]
 80046d2:	49d3      	ldr	r1, [pc, #844]	@ (8004a20 <main+0x7b0>)
 80046d4:	4bd0      	ldr	r3, [pc, #832]	@ (8004a18 <main+0x7a8>)
 80046d6:	0018      	movs	r0, r3
 80046d8:	f008 ff0c 	bl	800d4f4 <siprintf>
			  drawString(0, 120, buffer2, WHITE, BLACK, 1, 1);
 80046dc:	2301      	movs	r3, #1
 80046de:	425b      	negs	r3, r3
 80046e0:	4acd      	ldr	r2, [pc, #820]	@ (8004a18 <main+0x7a8>)
 80046e2:	2101      	movs	r1, #1
 80046e4:	9102      	str	r1, [sp, #8]
 80046e6:	2101      	movs	r1, #1
 80046e8:	9101      	str	r1, [sp, #4]
 80046ea:	2100      	movs	r1, #0
 80046ec:	9100      	str	r1, [sp, #0]
 80046ee:	2178      	movs	r1, #120	@ 0x78
 80046f0:	2000      	movs	r0, #0
 80046f2:	f7ff f82b 	bl	800374c <drawString>
			  drawString(0, 110, "POSITIONS", WHITE, BLACK, 1,1);
 80046f6:	2301      	movs	r3, #1
 80046f8:	425b      	negs	r3, r3
 80046fa:	4aca      	ldr	r2, [pc, #808]	@ (8004a24 <main+0x7b4>)
 80046fc:	2101      	movs	r1, #1
 80046fe:	9102      	str	r1, [sp, #8]
 8004700:	2101      	movs	r1, #1
 8004702:	9101      	str	r1, [sp, #4]
 8004704:	2100      	movs	r1, #0
 8004706:	9100      	str	r1, [sp, #0]
 8004708:	216e      	movs	r1, #110	@ 0x6e
 800470a:	2000      	movs	r0, #0
 800470c:	f7ff f81e 	bl	800374c <drawString>
			  sprintf(buffer2, "Count/Mult: %d", game.numLocations);
 8004710:	4bbf      	ldr	r3, [pc, #764]	@ (8004a10 <main+0x7a0>)
 8004712:	695a      	ldr	r2, [r3, #20]
 8004714:	49c4      	ldr	r1, [pc, #784]	@ (8004a28 <main+0x7b8>)
 8004716:	4bc0      	ldr	r3, [pc, #768]	@ (8004a18 <main+0x7a8>)
 8004718:	0018      	movs	r0, r3
 800471a:	f008 feeb 	bl	800d4f4 <siprintf>
			  drawString(0, 100, buffer2, WHITE, BLACK, 1, 1);
 800471e:	2301      	movs	r3, #1
 8004720:	425b      	negs	r3, r3
 8004722:	4abd      	ldr	r2, [pc, #756]	@ (8004a18 <main+0x7a8>)
 8004724:	2101      	movs	r1, #1
 8004726:	9102      	str	r1, [sp, #8]
 8004728:	2101      	movs	r1, #1
 800472a:	9101      	str	r1, [sp, #4]
 800472c:	2100      	movs	r1, #0
 800472e:	9100      	str	r1, [sp, #0]
 8004730:	2164      	movs	r1, #100	@ 0x64
 8004732:	2000      	movs	r0, #0
 8004734:	f7ff f80a 	bl	800374c <drawString>
			  sprintf(buffer2, "Old Lat: %d.%d", (int)(game.positions[game.numLocations-1].lat), abs((int)(((game.positions[game.numLocations-1].lat)*10000))%10000));
 8004738:	4bb5      	ldr	r3, [pc, #724]	@ (8004a10 <main+0x7a0>)
 800473a:	695b      	ldr	r3, [r3, #20]
 800473c:	1e5a      	subs	r2, r3, #1
 800473e:	4bb4      	ldr	r3, [pc, #720]	@ (8004a10 <main+0x7a0>)
 8004740:	3203      	adds	r2, #3
 8004742:	00d2      	lsls	r2, r2, #3
 8004744:	58d3      	ldr	r3, [r2, r3]
 8004746:	1c18      	adds	r0, r3, #0
 8004748:	f7fc fee2 	bl	8001510 <__aeabi_f2iz>
 800474c:	0004      	movs	r4, r0
 800474e:	4bb0      	ldr	r3, [pc, #704]	@ (8004a10 <main+0x7a0>)
 8004750:	695b      	ldr	r3, [r3, #20]
 8004752:	1e5a      	subs	r2, r3, #1
 8004754:	4bae      	ldr	r3, [pc, #696]	@ (8004a10 <main+0x7a0>)
 8004756:	3203      	adds	r2, #3
 8004758:	00d2      	lsls	r2, r2, #3
 800475a:	58d3      	ldr	r3, [r2, r3]
 800475c:	49b3      	ldr	r1, [pc, #716]	@ (8004a2c <main+0x7bc>)
 800475e:	1c18      	adds	r0, r3, #0
 8004760:	f7fc fbf4 	bl	8000f4c <__aeabi_fmul>
 8004764:	1c03      	adds	r3, r0, #0
 8004766:	1c18      	adds	r0, r3, #0
 8004768:	f7fc fed2 	bl	8001510 <__aeabi_f2iz>
 800476c:	0003      	movs	r3, r0
 800476e:	49b0      	ldr	r1, [pc, #704]	@ (8004a30 <main+0x7c0>)
 8004770:	0018      	movs	r0, r3
 8004772:	f7fb fe5d 	bl	8000430 <__aeabi_idivmod>
 8004776:	000b      	movs	r3, r1
 8004778:	17da      	asrs	r2, r3, #31
 800477a:	189b      	adds	r3, r3, r2
 800477c:	4053      	eors	r3, r2
 800477e:	49ad      	ldr	r1, [pc, #692]	@ (8004a34 <main+0x7c4>)
 8004780:	48a5      	ldr	r0, [pc, #660]	@ (8004a18 <main+0x7a8>)
 8004782:	0022      	movs	r2, r4
 8004784:	f008 feb6 	bl	800d4f4 <siprintf>
			  drawString(0, 90, buffer2, WHITE, BLACK, 1, 1);
 8004788:	2301      	movs	r3, #1
 800478a:	425b      	negs	r3, r3
 800478c:	4aa2      	ldr	r2, [pc, #648]	@ (8004a18 <main+0x7a8>)
 800478e:	2101      	movs	r1, #1
 8004790:	9102      	str	r1, [sp, #8]
 8004792:	2101      	movs	r1, #1
 8004794:	9101      	str	r1, [sp, #4]
 8004796:	2100      	movs	r1, #0
 8004798:	9100      	str	r1, [sp, #0]
 800479a:	215a      	movs	r1, #90	@ 0x5a
 800479c:	2000      	movs	r0, #0
 800479e:	f7fe ffd5 	bl	800374c <drawString>
			  sprintf(buffer2, "Old Lon: %d.%d", (int)(game.positions[game.numLocations-1].lon), abs((int)(((game.positions[game.numLocations-1].lon)*10000))%10000));
 80047a2:	4b9b      	ldr	r3, [pc, #620]	@ (8004a10 <main+0x7a0>)
 80047a4:	695b      	ldr	r3, [r3, #20]
 80047a6:	3b01      	subs	r3, #1
 80047a8:	4a99      	ldr	r2, [pc, #612]	@ (8004a10 <main+0x7a0>)
 80047aa:	3303      	adds	r3, #3
 80047ac:	00db      	lsls	r3, r3, #3
 80047ae:	18d3      	adds	r3, r2, r3
 80047b0:	3304      	adds	r3, #4
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	1c18      	adds	r0, r3, #0
 80047b6:	f7fc feab 	bl	8001510 <__aeabi_f2iz>
 80047ba:	0004      	movs	r4, r0
 80047bc:	4b94      	ldr	r3, [pc, #592]	@ (8004a10 <main+0x7a0>)
 80047be:	695b      	ldr	r3, [r3, #20]
 80047c0:	3b01      	subs	r3, #1
 80047c2:	4a93      	ldr	r2, [pc, #588]	@ (8004a10 <main+0x7a0>)
 80047c4:	3303      	adds	r3, #3
 80047c6:	00db      	lsls	r3, r3, #3
 80047c8:	18d3      	adds	r3, r2, r3
 80047ca:	3304      	adds	r3, #4
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4997      	ldr	r1, [pc, #604]	@ (8004a2c <main+0x7bc>)
 80047d0:	1c18      	adds	r0, r3, #0
 80047d2:	f7fc fbbb 	bl	8000f4c <__aeabi_fmul>
 80047d6:	1c03      	adds	r3, r0, #0
 80047d8:	1c18      	adds	r0, r3, #0
 80047da:	f7fc fe99 	bl	8001510 <__aeabi_f2iz>
 80047de:	0003      	movs	r3, r0
 80047e0:	4993      	ldr	r1, [pc, #588]	@ (8004a30 <main+0x7c0>)
 80047e2:	0018      	movs	r0, r3
 80047e4:	f7fb fe24 	bl	8000430 <__aeabi_idivmod>
 80047e8:	000b      	movs	r3, r1
 80047ea:	17da      	asrs	r2, r3, #31
 80047ec:	189b      	adds	r3, r3, r2
 80047ee:	4053      	eors	r3, r2
 80047f0:	4991      	ldr	r1, [pc, #580]	@ (8004a38 <main+0x7c8>)
 80047f2:	4889      	ldr	r0, [pc, #548]	@ (8004a18 <main+0x7a8>)
 80047f4:	0022      	movs	r2, r4
 80047f6:	f008 fe7d 	bl	800d4f4 <siprintf>
			  drawString(0, 80, buffer2, WHITE, BLACK, 1, 1);
 80047fa:	2301      	movs	r3, #1
 80047fc:	425b      	negs	r3, r3
 80047fe:	4a86      	ldr	r2, [pc, #536]	@ (8004a18 <main+0x7a8>)
 8004800:	2101      	movs	r1, #1
 8004802:	9102      	str	r1, [sp, #8]
 8004804:	2101      	movs	r1, #1
 8004806:	9101      	str	r1, [sp, #4]
 8004808:	2100      	movs	r1, #0
 800480a:	9100      	str	r1, [sp, #0]
 800480c:	2150      	movs	r1, #80	@ 0x50
 800480e:	2000      	movs	r0, #0
 8004810:	f7fe ff9c 	bl	800374c <drawString>
			  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1)==GPIO_PIN_SET){
 8004814:	4b89      	ldr	r3, [pc, #548]	@ (8004a3c <main+0x7cc>)
 8004816:	2102      	movs	r1, #2
 8004818:	0018      	movs	r0, r3
 800481a:	f003 fa1f 	bl	8007c5c <HAL_GPIO_ReadPin>
 800481e:	0003      	movs	r3, r0
 8004820:	2b01      	cmp	r3, #1
 8004822:	d168      	bne.n	80048f6 <main+0x686>
			  sprintf(buffer2, "Lat: %d.%d", (int)(GetJustLatLon().lat), abs(((int)((GetJustLatLon().lat)*10000))%10000));
 8004824:	1d3b      	adds	r3, r7, #4
 8004826:	0018      	movs	r0, r3
 8004828:	f001 f9ca 	bl	8005bc0 <GetJustLatLon>
 800482c:	1d3b      	adds	r3, r7, #4
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	1c18      	adds	r0, r3, #0
 8004832:	f7fc fe6d 	bl	8001510 <__aeabi_f2iz>
 8004836:	0004      	movs	r4, r0
 8004838:	250c      	movs	r5, #12
 800483a:	197b      	adds	r3, r7, r5
 800483c:	0018      	movs	r0, r3
 800483e:	f001 f9bf 	bl	8005bc0 <GetJustLatLon>
 8004842:	197b      	adds	r3, r7, r5
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4979      	ldr	r1, [pc, #484]	@ (8004a2c <main+0x7bc>)
 8004848:	1c18      	adds	r0, r3, #0
 800484a:	f7fc fb7f 	bl	8000f4c <__aeabi_fmul>
 800484e:	1c03      	adds	r3, r0, #0
 8004850:	1c18      	adds	r0, r3, #0
 8004852:	f7fc fe5d 	bl	8001510 <__aeabi_f2iz>
 8004856:	0003      	movs	r3, r0
 8004858:	4975      	ldr	r1, [pc, #468]	@ (8004a30 <main+0x7c0>)
 800485a:	0018      	movs	r0, r3
 800485c:	f7fb fde8 	bl	8000430 <__aeabi_idivmod>
 8004860:	000b      	movs	r3, r1
 8004862:	17da      	asrs	r2, r3, #31
 8004864:	189b      	adds	r3, r3, r2
 8004866:	4053      	eors	r3, r2
 8004868:	4975      	ldr	r1, [pc, #468]	@ (8004a40 <main+0x7d0>)
 800486a:	486b      	ldr	r0, [pc, #428]	@ (8004a18 <main+0x7a8>)
 800486c:	0022      	movs	r2, r4
 800486e:	f008 fe41 	bl	800d4f4 <siprintf>
			  drawString(0, 70, buffer2, WHITE, BLACK, 1, 1);
 8004872:	2301      	movs	r3, #1
 8004874:	425b      	negs	r3, r3
 8004876:	4a68      	ldr	r2, [pc, #416]	@ (8004a18 <main+0x7a8>)
 8004878:	2101      	movs	r1, #1
 800487a:	9102      	str	r1, [sp, #8]
 800487c:	2101      	movs	r1, #1
 800487e:	9101      	str	r1, [sp, #4]
 8004880:	2100      	movs	r1, #0
 8004882:	9100      	str	r1, [sp, #0]
 8004884:	2146      	movs	r1, #70	@ 0x46
 8004886:	2000      	movs	r0, #0
 8004888:	f7fe ff60 	bl	800374c <drawString>
			  sprintf(buffer2, "Lon: %d.%d", (int)(GetJustLatLon().lon), abs((int)(((GetJustLatLon().lon)*10000))%10000));
 800488c:	2414      	movs	r4, #20
 800488e:	193b      	adds	r3, r7, r4
 8004890:	0018      	movs	r0, r3
 8004892:	f001 f995 	bl	8005bc0 <GetJustLatLon>
 8004896:	193b      	adds	r3, r7, r4
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	1c18      	adds	r0, r3, #0
 800489c:	f7fc fe38 	bl	8001510 <__aeabi_f2iz>
 80048a0:	0004      	movs	r4, r0
 80048a2:	251c      	movs	r5, #28
 80048a4:	197b      	adds	r3, r7, r5
 80048a6:	0018      	movs	r0, r3
 80048a8:	f001 f98a 	bl	8005bc0 <GetJustLatLon>
 80048ac:	197b      	adds	r3, r7, r5
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	495e      	ldr	r1, [pc, #376]	@ (8004a2c <main+0x7bc>)
 80048b2:	1c18      	adds	r0, r3, #0
 80048b4:	f7fc fb4a 	bl	8000f4c <__aeabi_fmul>
 80048b8:	1c03      	adds	r3, r0, #0
 80048ba:	1c18      	adds	r0, r3, #0
 80048bc:	f7fc fe28 	bl	8001510 <__aeabi_f2iz>
 80048c0:	0003      	movs	r3, r0
 80048c2:	495b      	ldr	r1, [pc, #364]	@ (8004a30 <main+0x7c0>)
 80048c4:	0018      	movs	r0, r3
 80048c6:	f7fb fdb3 	bl	8000430 <__aeabi_idivmod>
 80048ca:	000b      	movs	r3, r1
 80048cc:	17da      	asrs	r2, r3, #31
 80048ce:	189b      	adds	r3, r3, r2
 80048d0:	4053      	eors	r3, r2
 80048d2:	495c      	ldr	r1, [pc, #368]	@ (8004a44 <main+0x7d4>)
 80048d4:	4850      	ldr	r0, [pc, #320]	@ (8004a18 <main+0x7a8>)
 80048d6:	0022      	movs	r2, r4
 80048d8:	f008 fe0c 	bl	800d4f4 <siprintf>
			  drawString(0, 60, buffer2, WHITE, BLACK, 1, 1);
 80048dc:	2301      	movs	r3, #1
 80048de:	425b      	negs	r3, r3
 80048e0:	4a4d      	ldr	r2, [pc, #308]	@ (8004a18 <main+0x7a8>)
 80048e2:	2101      	movs	r1, #1
 80048e4:	9102      	str	r1, [sp, #8]
 80048e6:	2101      	movs	r1, #1
 80048e8:	9101      	str	r1, [sp, #4]
 80048ea:	2100      	movs	r1, #0
 80048ec:	9100      	str	r1, [sp, #0]
 80048ee:	213c      	movs	r1, #60	@ 0x3c
 80048f0:	2000      	movs	r0, #0
 80048f2:	f7fe ff2b 	bl	800374c <drawString>
			  }

			  //drawString(0, 70, "PET", WHITE, BLACK, 1, 1);
			  updateScreen = 0;
 80048f6:	4b44      	ldr	r3, [pc, #272]	@ (8004a08 <main+0x798>)
 80048f8:	2200      	movs	r2, #0
 80048fa:	601a      	str	r2, [r3, #0]
		  }
	  	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_SET ){
 80048fc:	4b52      	ldr	r3, [pc, #328]	@ (8004a48 <main+0x7d8>)
 80048fe:	2104      	movs	r1, #4
 8004900:	0018      	movs	r0, r3
 8004902:	f003 f9ab 	bl	8007c5c <HAL_GPIO_ReadPin>
 8004906:	0003      	movs	r3, r0
 8004908:	2b01      	cmp	r3, #1
 800490a:	d111      	bne.n	8004930 <main+0x6c0>
	  		effect = MenuBeep;
 800490c:	4b4f      	ldr	r3, [pc, #316]	@ (8004a4c <main+0x7dc>)
 800490e:	2200      	movs	r2, #0
 8004910:	701a      	strb	r2, [r3, #0]
	  		PlayEffect(effect);
 8004912:	4b4e      	ldr	r3, [pc, #312]	@ (8004a4c <main+0x7dc>)
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	0018      	movs	r0, r3
 8004918:	f000 fb60 	bl	8004fdc <PlayEffect>

	  		currentMenu = Main;
 800491c:	4b4c      	ldr	r3, [pc, #304]	@ (8004a50 <main+0x7e0>)
 800491e:	2201      	movs	r2, #1
 8004920:	701a      	strb	r2, [r3, #0]
	  		canChange = 0;
 8004922:	4b4c      	ldr	r3, [pc, #304]	@ (8004a54 <main+0x7e4>)
 8004924:	2200      	movs	r2, #0
 8004926:	701a      	strb	r2, [r3, #0]
	  		fillScreen(BLACK);
 8004928:	2000      	movs	r0, #0
 800492a:	f7ff f853 	bl	80039d4 <fillScreen>
	  	  }
	  	  else
	  	      canChange = 1;

	  	  break;
 800492e:	e064      	b.n	80049fa <main+0x78a>
	  	      canChange = 1;
 8004930:	4b48      	ldr	r3, [pc, #288]	@ (8004a54 <main+0x7e4>)
 8004932:	2201      	movs	r2, #1
 8004934:	701a      	strb	r2, [r3, #0]
	  	  break;
 8004936:	e060      	b.n	80049fa <main+0x78a>
	  case MusicTest:
		  //fillScreen(BLUE);
		  if((totalFrames++)%1000000==0){
 8004938:	4b47      	ldr	r3, [pc, #284]	@ (8004a58 <main+0x7e8>)
 800493a:	881b      	ldrh	r3, [r3, #0]
 800493c:	1c5a      	adds	r2, r3, #1
 800493e:	b291      	uxth	r1, r2
 8004940:	4a45      	ldr	r2, [pc, #276]	@ (8004a58 <main+0x7e8>)
 8004942:	8011      	strh	r1, [r2, #0]
 8004944:	4945      	ldr	r1, [pc, #276]	@ (8004a5c <main+0x7ec>)
 8004946:	0018      	movs	r0, r3
 8004948:	f7fb fd72 	bl	8000430 <__aeabi_idivmod>
 800494c:	1e0b      	subs	r3, r1, #0
 800494e:	d153      	bne.n	80049f8 <main+0x788>
			  freq = scale[toneIndex++%13];
 8004950:	4b43      	ldr	r3, [pc, #268]	@ (8004a60 <main+0x7f0>)
 8004952:	881b      	ldrh	r3, [r3, #0]
 8004954:	b29b      	uxth	r3, r3
 8004956:	1c5a      	adds	r2, r3, #1
 8004958:	b291      	uxth	r1, r2
 800495a:	4a41      	ldr	r2, [pc, #260]	@ (8004a60 <main+0x7f0>)
 800495c:	8011      	strh	r1, [r2, #0]
 800495e:	210d      	movs	r1, #13
 8004960:	0018      	movs	r0, r3
 8004962:	f7fb fc7b 	bl	800025c <__aeabi_uidivmod>
 8004966:	000b      	movs	r3, r1
 8004968:	b29b      	uxth	r3, r3
 800496a:	001a      	movs	r2, r3
 800496c:	4b3d      	ldr	r3, [pc, #244]	@ (8004a64 <main+0x7f4>)
 800496e:	0052      	lsls	r2, r2, #1
 8004970:	5ad3      	ldrh	r3, [r2, r3]
 8004972:	b29b      	uxth	r3, r3
 8004974:	0018      	movs	r0, r3
 8004976:	f7fe fd11 	bl	800339c <__aeabi_ui2d>
 800497a:	0002      	movs	r2, r0
 800497c:	000b      	movs	r3, r1
 800497e:	493a      	ldr	r1, [pc, #232]	@ (8004a68 <main+0x7f8>)
 8004980:	600a      	str	r2, [r1, #0]
 8004982:	604b      	str	r3, [r1, #4]
			  ChangeNote(freq);
 8004984:	4b38      	ldr	r3, [pc, #224]	@ (8004a68 <main+0x7f8>)
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	0010      	movs	r0, r2
 800498c:	0019      	movs	r1, r3
 800498e:	f7fb fe33 	bl	80005f8 <__aeabi_d2uiz>
 8004992:	0003      	movs	r3, r0
 8004994:	b29b      	uxth	r3, r3
 8004996:	0018      	movs	r0, r3
 8004998:	f000 fb00 	bl	8004f9c <ChangeNote>
		  }
		  break;
 800499c:	e02c      	b.n	80049f8 <main+0x788>

	  case Settings:
		  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1)==GPIO_PIN_SET)
 800499e:	4b27      	ldr	r3, [pc, #156]	@ (8004a3c <main+0x7cc>)
 80049a0:	2102      	movs	r1, #2
 80049a2:	0018      	movs	r0, r3
 80049a4:	f003 f95a 	bl	8007c5c <HAL_GPIO_ReadPin>
 80049a8:	0003      	movs	r3, r0
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d103      	bne.n	80049b6 <main+0x746>
		  {
			  SendData();
 80049ae:	f000 fcfb 	bl	80053a8 <SendData>
			  ReceiveData();
 80049b2:	f000 fdc1 	bl	8005538 <ReceiveData>
		  }
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_SET) {
 80049b6:	2380      	movs	r3, #128	@ 0x80
 80049b8:	011a      	lsls	r2, r3, #4
 80049ba:	23a0      	movs	r3, #160	@ 0xa0
 80049bc:	05db      	lsls	r3, r3, #23
 80049be:	0011      	movs	r1, r2
 80049c0:	0018      	movs	r0, r3
 80049c2:	f003 f94b 	bl	8007c5c <HAL_GPIO_ReadPin>
 80049c6:	0003      	movs	r3, r0
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d111      	bne.n	80049f0 <main+0x780>
			  effect = MenuBeep;
 80049cc:	4b1f      	ldr	r3, [pc, #124]	@ (8004a4c <main+0x7dc>)
 80049ce:	2200      	movs	r2, #0
 80049d0:	701a      	strb	r2, [r3, #0]
			  PlayEffect(effect);
 80049d2:	4b1e      	ldr	r3, [pc, #120]	@ (8004a4c <main+0x7dc>)
 80049d4:	781b      	ldrb	r3, [r3, #0]
 80049d6:	0018      	movs	r0, r3
 80049d8:	f000 fb00 	bl	8004fdc <PlayEffect>

			  currentMenu = Main;
 80049dc:	4b1c      	ldr	r3, [pc, #112]	@ (8004a50 <main+0x7e0>)
 80049de:	2201      	movs	r2, #1
 80049e0:	701a      	strb	r2, [r3, #0]
			  canChange = 0;
 80049e2:	4b1c      	ldr	r3, [pc, #112]	@ (8004a54 <main+0x7e4>)
 80049e4:	2200      	movs	r2, #0
 80049e6:	701a      	strb	r2, [r3, #0]
			  fillScreen(BLACK);
 80049e8:	2000      	movs	r0, #0
 80049ea:	f7fe fff3 	bl	80039d4 <fillScreen>
		  }
		  else
			  canChange = 1;

		  break;
 80049ee:	e004      	b.n	80049fa <main+0x78a>
			  canChange = 1;
 80049f0:	4b18      	ldr	r3, [pc, #96]	@ (8004a54 <main+0x7e4>)
 80049f2:	2201      	movs	r2, #1
 80049f4:	701a      	strb	r2, [r3, #0]
		  break;
 80049f6:	e000      	b.n	80049fa <main+0x78a>
		  break;
 80049f8:	46c0      	nop			@ (mov r8, r8)
		  	  drawString(70, 70, buffer, BLACK, GREEN, 1, 1);

		  break;*/

	  }
	  totalFrames++;
 80049fa:	4b17      	ldr	r3, [pc, #92]	@ (8004a58 <main+0x7e8>)
 80049fc:	881b      	ldrh	r3, [r3, #0]
 80049fe:	3301      	adds	r3, #1
 8004a00:	b29a      	uxth	r2, r3
 8004a02:	4b15      	ldr	r3, [pc, #84]	@ (8004a58 <main+0x7e8>)
 8004a04:	801a      	strh	r2, [r3, #0]
	  _ADXL343_ReadReg8(0x15, &steps, 1);
 8004a06:	e4da      	b.n	80043be <main+0x14e>
 8004a08:	20001b48 	.word	0x20001b48
 8004a0c:	0800fca4 	.word	0x0800fca4
 8004a10:	20000bdc 	.word	0x20000bdc
 8004a14:	0800fcac 	.word	0x0800fcac
 8004a18:	20001b84 	.word	0x20001b84
 8004a1c:	0800fcb8 	.word	0x0800fcb8
 8004a20:	0800fcc8 	.word	0x0800fcc8
 8004a24:	0800fcd8 	.word	0x0800fcd8
 8004a28:	0800fce4 	.word	0x0800fce4
 8004a2c:	461c4000 	.word	0x461c4000
 8004a30:	00002710 	.word	0x00002710
 8004a34:	0800fcf4 	.word	0x0800fcf4
 8004a38:	0800fd04 	.word	0x0800fd04
 8004a3c:	50000800 	.word	0x50000800
 8004a40:	0800fd14 	.word	0x0800fd14
 8004a44:	0800fd20 	.word	0x0800fd20
 8004a48:	50000400 	.word	0x50000400
 8004a4c:	20000bd8 	.word	0x20000bd8
 8004a50:	200009c4 	.word	0x200009c4
 8004a54:	200009c5 	.word	0x200009c5
 8004a58:	20000d7c 	.word	0x20000d7c
 8004a5c:	000f4240 	.word	0x000f4240
 8004a60:	20001b80 	.word	0x20001b80
 8004a64:	20000998 	.word	0x20000998
 8004a68:	20001b78 	.word	0x20001b78

08004a6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004a6c:	b590      	push	{r4, r7, lr}
 8004a6e:	b095      	sub	sp, #84	@ 0x54
 8004a70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004a72:	2414      	movs	r4, #20
 8004a74:	193b      	adds	r3, r7, r4
 8004a76:	0018      	movs	r0, r3
 8004a78:	233c      	movs	r3, #60	@ 0x3c
 8004a7a:	001a      	movs	r2, r3
 8004a7c:	2100      	movs	r1, #0
 8004a7e:	f008 fda5 	bl	800d5cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004a82:	1d3b      	adds	r3, r7, #4
 8004a84:	0018      	movs	r0, r3
 8004a86:	2310      	movs	r3, #16
 8004a88:	001a      	movs	r2, r3
 8004a8a:	2100      	movs	r1, #0
 8004a8c:	f008 fd9e 	bl	800d5cc <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004a90:	2380      	movs	r3, #128	@ 0x80
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	0018      	movs	r0, r3
 8004a96:	f003 ff5f 	bl	8008958 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8004a9a:	193b      	adds	r3, r7, r4
 8004a9c:	220a      	movs	r2, #10
 8004a9e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004aa0:	193b      	adds	r3, r7, r4
 8004aa2:	2280      	movs	r2, #128	@ 0x80
 8004aa4:	0052      	lsls	r2, r2, #1
 8004aa6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8004aa8:	0021      	movs	r1, r4
 8004aaa:	187b      	adds	r3, r7, r1
 8004aac:	2200      	movs	r2, #0
 8004aae:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004ab0:	187b      	adds	r3, r7, r1
 8004ab2:	2240      	movs	r2, #64	@ 0x40
 8004ab4:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004ab6:	187b      	adds	r3, r7, r1
 8004ab8:	2201      	movs	r2, #1
 8004aba:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004abc:	187b      	adds	r3, r7, r1
 8004abe:	2202      	movs	r2, #2
 8004ac0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004ac2:	187b      	adds	r3, r7, r1
 8004ac4:	2202      	movs	r2, #2
 8004ac6:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8004ac8:	187b      	adds	r3, r7, r1
 8004aca:	2200      	movs	r2, #0
 8004acc:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 8004ace:	187b      	adds	r3, r7, r1
 8004ad0:	2208      	movs	r2, #8
 8004ad2:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004ad4:	187b      	adds	r3, r7, r1
 8004ad6:	2280      	movs	r2, #128	@ 0x80
 8004ad8:	0292      	lsls	r2, r2, #10
 8004ada:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004adc:	187b      	adds	r3, r7, r1
 8004ade:	2280      	movs	r2, #128	@ 0x80
 8004ae0:	0492      	lsls	r2, r2, #18
 8004ae2:	635a      	str	r2, [r3, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004ae4:	187b      	adds	r3, r7, r1
 8004ae6:	2280      	movs	r2, #128	@ 0x80
 8004ae8:	0592      	lsls	r2, r2, #22
 8004aea:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004aec:	187b      	adds	r3, r7, r1
 8004aee:	0018      	movs	r0, r3
 8004af0:	f003 ff7e 	bl	80089f0 <HAL_RCC_OscConfig>
 8004af4:	1e03      	subs	r3, r0, #0
 8004af6:	d001      	beq.n	8004afc <SystemClock_Config+0x90>
  {
    Error_Handler();
 8004af8:	f001 f91e 	bl	8005d38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004afc:	1d3b      	adds	r3, r7, #4
 8004afe:	2207      	movs	r2, #7
 8004b00:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004b02:	1d3b      	adds	r3, r7, #4
 8004b04:	2202      	movs	r2, #2
 8004b06:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004b08:	1d3b      	adds	r3, r7, #4
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004b0e:	1d3b      	adds	r3, r7, #4
 8004b10:	2200      	movs	r2, #0
 8004b12:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004b14:	1d3b      	adds	r3, r7, #4
 8004b16:	2102      	movs	r1, #2
 8004b18:	0018      	movs	r0, r3
 8004b1a:	f004 fac9 	bl	80090b0 <HAL_RCC_ClockConfig>
 8004b1e:	1e03      	subs	r3, r0, #0
 8004b20:	d001      	beq.n	8004b26 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8004b22:	f001 f909 	bl	8005d38 <Error_Handler>
  }
}
 8004b26:	46c0      	nop			@ (mov r8, r8)
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	b015      	add	sp, #84	@ 0x54
 8004b2c:	bd90      	pop	{r4, r7, pc}
	...

08004b30 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004b34:	4b1b      	ldr	r3, [pc, #108]	@ (8004ba4 <MX_I2C1_Init+0x74>)
 8004b36:	4a1c      	ldr	r2, [pc, #112]	@ (8004ba8 <MX_I2C1_Init+0x78>)
 8004b38:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10B17DB5;
 8004b3a:	4b1a      	ldr	r3, [pc, #104]	@ (8004ba4 <MX_I2C1_Init+0x74>)
 8004b3c:	4a1b      	ldr	r2, [pc, #108]	@ (8004bac <MX_I2C1_Init+0x7c>)
 8004b3e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8004b40:	4b18      	ldr	r3, [pc, #96]	@ (8004ba4 <MX_I2C1_Init+0x74>)
 8004b42:	2200      	movs	r2, #0
 8004b44:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004b46:	4b17      	ldr	r3, [pc, #92]	@ (8004ba4 <MX_I2C1_Init+0x74>)
 8004b48:	2201      	movs	r2, #1
 8004b4a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004b4c:	4b15      	ldr	r3, [pc, #84]	@ (8004ba4 <MX_I2C1_Init+0x74>)
 8004b4e:	2200      	movs	r2, #0
 8004b50:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8004b52:	4b14      	ldr	r3, [pc, #80]	@ (8004ba4 <MX_I2C1_Init+0x74>)
 8004b54:	2200      	movs	r2, #0
 8004b56:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004b58:	4b12      	ldr	r3, [pc, #72]	@ (8004ba4 <MX_I2C1_Init+0x74>)
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004b5e:	4b11      	ldr	r3, [pc, #68]	@ (8004ba4 <MX_I2C1_Init+0x74>)
 8004b60:	2200      	movs	r2, #0
 8004b62:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004b64:	4b0f      	ldr	r3, [pc, #60]	@ (8004ba4 <MX_I2C1_Init+0x74>)
 8004b66:	2200      	movs	r2, #0
 8004b68:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004b6a:	4b0e      	ldr	r3, [pc, #56]	@ (8004ba4 <MX_I2C1_Init+0x74>)
 8004b6c:	0018      	movs	r0, r3
 8004b6e:	f003 f8af 	bl	8007cd0 <HAL_I2C_Init>
 8004b72:	1e03      	subs	r3, r0, #0
 8004b74:	d001      	beq.n	8004b7a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8004b76:	f001 f8df 	bl	8005d38 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004b7a:	4b0a      	ldr	r3, [pc, #40]	@ (8004ba4 <MX_I2C1_Init+0x74>)
 8004b7c:	2100      	movs	r1, #0
 8004b7e:	0018      	movs	r0, r3
 8004b80:	f003 fe52 	bl	8008828 <HAL_I2CEx_ConfigAnalogFilter>
 8004b84:	1e03      	subs	r3, r0, #0
 8004b86:	d001      	beq.n	8004b8c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8004b88:	f001 f8d6 	bl	8005d38 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004b8c:	4b05      	ldr	r3, [pc, #20]	@ (8004ba4 <MX_I2C1_Init+0x74>)
 8004b8e:	2100      	movs	r1, #0
 8004b90:	0018      	movs	r0, r3
 8004b92:	f003 fe95 	bl	80088c0 <HAL_I2CEx_ConfigDigitalFilter>
 8004b96:	1e03      	subs	r3, r0, #0
 8004b98:	d001      	beq.n	8004b9e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8004b9a:	f001 f8cd 	bl	8005d38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004b9e:	46c0      	nop			@ (mov r8, r8)
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}
 8004ba4:	20001bec 	.word	0x20001bec
 8004ba8:	40005400 	.word	0x40005400
 8004bac:	10b17db5 	.word	0x10b17db5

08004bb0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004bb4:	4b1c      	ldr	r3, [pc, #112]	@ (8004c28 <MX_SPI1_Init+0x78>)
 8004bb6:	4a1d      	ldr	r2, [pc, #116]	@ (8004c2c <MX_SPI1_Init+0x7c>)
 8004bb8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004bba:	4b1b      	ldr	r3, [pc, #108]	@ (8004c28 <MX_SPI1_Init+0x78>)
 8004bbc:	2282      	movs	r2, #130	@ 0x82
 8004bbe:	0052      	lsls	r2, r2, #1
 8004bc0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8004bc2:	4b19      	ldr	r3, [pc, #100]	@ (8004c28 <MX_SPI1_Init+0x78>)
 8004bc4:	2280      	movs	r2, #128	@ 0x80
 8004bc6:	0212      	lsls	r2, r2, #8
 8004bc8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004bca:	4b17      	ldr	r3, [pc, #92]	@ (8004c28 <MX_SPI1_Init+0x78>)
 8004bcc:	22e0      	movs	r2, #224	@ 0xe0
 8004bce:	00d2      	lsls	r2, r2, #3
 8004bd0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004bd2:	4b15      	ldr	r3, [pc, #84]	@ (8004c28 <MX_SPI1_Init+0x78>)
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004bd8:	4b13      	ldr	r3, [pc, #76]	@ (8004c28 <MX_SPI1_Init+0x78>)
 8004bda:	2200      	movs	r2, #0
 8004bdc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004bde:	4b12      	ldr	r3, [pc, #72]	@ (8004c28 <MX_SPI1_Init+0x78>)
 8004be0:	2280      	movs	r2, #128	@ 0x80
 8004be2:	0092      	lsls	r2, r2, #2
 8004be4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8004be6:	4b10      	ldr	r3, [pc, #64]	@ (8004c28 <MX_SPI1_Init+0x78>)
 8004be8:	2220      	movs	r2, #32
 8004bea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004bec:	4b0e      	ldr	r3, [pc, #56]	@ (8004c28 <MX_SPI1_Init+0x78>)
 8004bee:	2200      	movs	r2, #0
 8004bf0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004bf2:	4b0d      	ldr	r3, [pc, #52]	@ (8004c28 <MX_SPI1_Init+0x78>)
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004bf8:	4b0b      	ldr	r3, [pc, #44]	@ (8004c28 <MX_SPI1_Init+0x78>)
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8004bfe:	4b0a      	ldr	r3, [pc, #40]	@ (8004c28 <MX_SPI1_Init+0x78>)
 8004c00:	2207      	movs	r2, #7
 8004c02:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004c04:	4b08      	ldr	r3, [pc, #32]	@ (8004c28 <MX_SPI1_Init+0x78>)
 8004c06:	2200      	movs	r2, #0
 8004c08:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004c0a:	4b07      	ldr	r3, [pc, #28]	@ (8004c28 <MX_SPI1_Init+0x78>)
 8004c0c:	2208      	movs	r2, #8
 8004c0e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004c10:	4b05      	ldr	r3, [pc, #20]	@ (8004c28 <MX_SPI1_Init+0x78>)
 8004c12:	0018      	movs	r0, r3
 8004c14:	f005 f8ea 	bl	8009dec <HAL_SPI_Init>
 8004c18:	1e03      	subs	r3, r0, #0
 8004c1a:	d001      	beq.n	8004c20 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8004c1c:	f001 f88c 	bl	8005d38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004c20:	46c0      	nop			@ (mov r8, r8)
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	46c0      	nop			@ (mov r8, r8)
 8004c28:	20001c6c 	.word	0x20001c6c
 8004c2c:	40013000 	.word	0x40013000

08004c30 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b094      	sub	sp, #80	@ 0x50
 8004c34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8004c36:	2334      	movs	r3, #52	@ 0x34
 8004c38:	18fb      	adds	r3, r7, r3
 8004c3a:	0018      	movs	r0, r3
 8004c3c:	231c      	movs	r3, #28
 8004c3e:	001a      	movs	r2, r3
 8004c40:	2100      	movs	r1, #0
 8004c42:	f008 fcc3 	bl	800d5cc <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004c46:	003b      	movs	r3, r7
 8004c48:	0018      	movs	r0, r3
 8004c4a:	2334      	movs	r3, #52	@ 0x34
 8004c4c:	001a      	movs	r2, r3
 8004c4e:	2100      	movs	r1, #0
 8004c50:	f008 fcbc 	bl	800d5cc <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8004c54:	4b37      	ldr	r3, [pc, #220]	@ (8004d34 <MX_TIM17_Init+0x104>)
 8004c56:	4a38      	ldr	r2, [pc, #224]	@ (8004d38 <MX_TIM17_Init+0x108>)
 8004c58:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8004c5a:	4b36      	ldr	r3, [pc, #216]	@ (8004d34 <MX_TIM17_Init+0x104>)
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c60:	4b34      	ldr	r3, [pc, #208]	@ (8004d34 <MX_TIM17_Init+0x104>)
 8004c62:	2200      	movs	r2, #0
 8004c64:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8004c66:	4b33      	ldr	r3, [pc, #204]	@ (8004d34 <MX_TIM17_Init+0x104>)
 8004c68:	4a34      	ldr	r2, [pc, #208]	@ (8004d3c <MX_TIM17_Init+0x10c>)
 8004c6a:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004c6c:	4b31      	ldr	r3, [pc, #196]	@ (8004d34 <MX_TIM17_Init+0x104>)
 8004c6e:	2200      	movs	r2, #0
 8004c70:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8004c72:	4b30      	ldr	r3, [pc, #192]	@ (8004d34 <MX_TIM17_Init+0x104>)
 8004c74:	2200      	movs	r2, #0
 8004c76:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004c78:	4b2e      	ldr	r3, [pc, #184]	@ (8004d34 <MX_TIM17_Init+0x104>)
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8004c7e:	4b2d      	ldr	r3, [pc, #180]	@ (8004d34 <MX_TIM17_Init+0x104>)
 8004c80:	0018      	movs	r0, r3
 8004c82:	f005 fc41 	bl	800a508 <HAL_TIM_Base_Init>
 8004c86:	1e03      	subs	r3, r0, #0
 8004c88:	d001      	beq.n	8004c8e <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 8004c8a:	f001 f855 	bl	8005d38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8004c8e:	4b29      	ldr	r3, [pc, #164]	@ (8004d34 <MX_TIM17_Init+0x104>)
 8004c90:	0018      	movs	r0, r3
 8004c92:	f005 fc91 	bl	800a5b8 <HAL_TIM_PWM_Init>
 8004c96:	1e03      	subs	r3, r0, #0
 8004c98:	d001      	beq.n	8004c9e <MX_TIM17_Init+0x6e>
  {
    Error_Handler();
 8004c9a:	f001 f84d 	bl	8005d38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004c9e:	2134      	movs	r1, #52	@ 0x34
 8004ca0:	187b      	adds	r3, r7, r1
 8004ca2:	2260      	movs	r2, #96	@ 0x60
 8004ca4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8004ca6:	187b      	adds	r3, r7, r1
 8004ca8:	2200      	movs	r2, #0
 8004caa:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004cac:	187b      	adds	r3, r7, r1
 8004cae:	2200      	movs	r2, #0
 8004cb0:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004cb2:	187b      	adds	r3, r7, r1
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004cb8:	187b      	adds	r3, r7, r1
 8004cba:	2200      	movs	r2, #0
 8004cbc:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004cbe:	187b      	adds	r3, r7, r1
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004cc4:	187b      	adds	r3, r7, r1
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004cca:	1879      	adds	r1, r7, r1
 8004ccc:	4b19      	ldr	r3, [pc, #100]	@ (8004d34 <MX_TIM17_Init+0x104>)
 8004cce:	2200      	movs	r2, #0
 8004cd0:	0018      	movs	r0, r3
 8004cd2:	f005 fe4d 	bl	800a970 <HAL_TIM_PWM_ConfigChannel>
 8004cd6:	1e03      	subs	r3, r0, #0
 8004cd8:	d001      	beq.n	8004cde <MX_TIM17_Init+0xae>
  {
    Error_Handler();
 8004cda:	f001 f82d 	bl	8005d38 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004cde:	003b      	movs	r3, r7
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004ce4:	003b      	movs	r3, r7
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004cea:	003b      	movs	r3, r7
 8004cec:	2200      	movs	r2, #0
 8004cee:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004cf0:	003b      	movs	r3, r7
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004cf6:	003b      	movs	r3, r7
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004cfc:	003b      	movs	r3, r7
 8004cfe:	2280      	movs	r2, #128	@ 0x80
 8004d00:	0192      	lsls	r2, r2, #6
 8004d02:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004d04:	003b      	movs	r3, r7
 8004d06:	2200      	movs	r2, #0
 8004d08:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004d0a:	003b      	movs	r3, r7
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8004d10:	003a      	movs	r2, r7
 8004d12:	4b08      	ldr	r3, [pc, #32]	@ (8004d34 <MX_TIM17_Init+0x104>)
 8004d14:	0011      	movs	r1, r2
 8004d16:	0018      	movs	r0, r3
 8004d18:	f006 faaa 	bl	800b270 <HAL_TIMEx_ConfigBreakDeadTime>
 8004d1c:	1e03      	subs	r3, r0, #0
 8004d1e:	d001      	beq.n	8004d24 <MX_TIM17_Init+0xf4>
  {
    Error_Handler();
 8004d20:	f001 f80a 	bl	8005d38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8004d24:	4b03      	ldr	r3, [pc, #12]	@ (8004d34 <MX_TIM17_Init+0x104>)
 8004d26:	0018      	movs	r0, r3
 8004d28:	f001 fd70 	bl	800680c <HAL_TIM_MspPostInit>

}
 8004d2c:	46c0      	nop			@ (mov r8, r8)
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	b014      	add	sp, #80	@ 0x50
 8004d32:	bd80      	pop	{r7, pc}
 8004d34:	20001cd0 	.word	0x20001cd0
 8004d38:	40014800 	.word	0x40014800
 8004d3c:	0000ffff 	.word	0x0000ffff

08004d40 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004d44:	4b23      	ldr	r3, [pc, #140]	@ (8004dd4 <MX_USART1_UART_Init+0x94>)
 8004d46:	4a24      	ldr	r2, [pc, #144]	@ (8004dd8 <MX_USART1_UART_Init+0x98>)
 8004d48:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8004d4a:	4b22      	ldr	r3, [pc, #136]	@ (8004dd4 <MX_USART1_UART_Init+0x94>)
 8004d4c:	2296      	movs	r2, #150	@ 0x96
 8004d4e:	0192      	lsls	r2, r2, #6
 8004d50:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004d52:	4b20      	ldr	r3, [pc, #128]	@ (8004dd4 <MX_USART1_UART_Init+0x94>)
 8004d54:	2200      	movs	r2, #0
 8004d56:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004d58:	4b1e      	ldr	r3, [pc, #120]	@ (8004dd4 <MX_USART1_UART_Init+0x94>)
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004d5e:	4b1d      	ldr	r3, [pc, #116]	@ (8004dd4 <MX_USART1_UART_Init+0x94>)
 8004d60:	2200      	movs	r2, #0
 8004d62:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004d64:	4b1b      	ldr	r3, [pc, #108]	@ (8004dd4 <MX_USART1_UART_Init+0x94>)
 8004d66:	220c      	movs	r2, #12
 8004d68:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004d6a:	4b1a      	ldr	r3, [pc, #104]	@ (8004dd4 <MX_USART1_UART_Init+0x94>)
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004d70:	4b18      	ldr	r3, [pc, #96]	@ (8004dd4 <MX_USART1_UART_Init+0x94>)
 8004d72:	2200      	movs	r2, #0
 8004d74:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004d76:	4b17      	ldr	r3, [pc, #92]	@ (8004dd4 <MX_USART1_UART_Init+0x94>)
 8004d78:	2200      	movs	r2, #0
 8004d7a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004d7c:	4b15      	ldr	r3, [pc, #84]	@ (8004dd4 <MX_USART1_UART_Init+0x94>)
 8004d7e:	2200      	movs	r2, #0
 8004d80:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004d82:	4b14      	ldr	r3, [pc, #80]	@ (8004dd4 <MX_USART1_UART_Init+0x94>)
 8004d84:	2200      	movs	r2, #0
 8004d86:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004d88:	4b12      	ldr	r3, [pc, #72]	@ (8004dd4 <MX_USART1_UART_Init+0x94>)
 8004d8a:	0018      	movs	r0, r3
 8004d8c:	f006 fb0c 	bl	800b3a8 <HAL_UART_Init>
 8004d90:	1e03      	subs	r3, r0, #0
 8004d92:	d001      	beq.n	8004d98 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8004d94:	f000 ffd0 	bl	8005d38 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004d98:	4b0e      	ldr	r3, [pc, #56]	@ (8004dd4 <MX_USART1_UART_Init+0x94>)
 8004d9a:	2100      	movs	r1, #0
 8004d9c:	0018      	movs	r0, r3
 8004d9e:	f007 faa7 	bl	800c2f0 <HAL_UARTEx_SetTxFifoThreshold>
 8004da2:	1e03      	subs	r3, r0, #0
 8004da4:	d001      	beq.n	8004daa <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8004da6:	f000 ffc7 	bl	8005d38 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004daa:	4b0a      	ldr	r3, [pc, #40]	@ (8004dd4 <MX_USART1_UART_Init+0x94>)
 8004dac:	2100      	movs	r1, #0
 8004dae:	0018      	movs	r0, r3
 8004db0:	f007 fade 	bl	800c370 <HAL_UARTEx_SetRxFifoThreshold>
 8004db4:	1e03      	subs	r3, r0, #0
 8004db6:	d001      	beq.n	8004dbc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8004db8:	f000 ffbe 	bl	8005d38 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8004dbc:	4b05      	ldr	r3, [pc, #20]	@ (8004dd4 <MX_USART1_UART_Init+0x94>)
 8004dbe:	0018      	movs	r0, r3
 8004dc0:	f007 fa5c 	bl	800c27c <HAL_UARTEx_DisableFifoMode>
 8004dc4:	1e03      	subs	r3, r0, #0
 8004dc6:	d001      	beq.n	8004dcc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8004dc8:	f000 ffb6 	bl	8005d38 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004dcc:	46c0      	nop			@ (mov r8, r8)
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	46c0      	nop			@ (mov r8, r8)
 8004dd4:	20001d1c 	.word	0x20001d1c
 8004dd8:	40013800 	.word	0x40013800

08004ddc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004de0:	4b23      	ldr	r3, [pc, #140]	@ (8004e70 <MX_USART2_UART_Init+0x94>)
 8004de2:	4a24      	ldr	r2, [pc, #144]	@ (8004e74 <MX_USART2_UART_Init+0x98>)
 8004de4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004de6:	4b22      	ldr	r3, [pc, #136]	@ (8004e70 <MX_USART2_UART_Init+0x94>)
 8004de8:	22e1      	movs	r2, #225	@ 0xe1
 8004dea:	0252      	lsls	r2, r2, #9
 8004dec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004dee:	4b20      	ldr	r3, [pc, #128]	@ (8004e70 <MX_USART2_UART_Init+0x94>)
 8004df0:	2200      	movs	r2, #0
 8004df2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004df4:	4b1e      	ldr	r3, [pc, #120]	@ (8004e70 <MX_USART2_UART_Init+0x94>)
 8004df6:	2200      	movs	r2, #0
 8004df8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004dfa:	4b1d      	ldr	r3, [pc, #116]	@ (8004e70 <MX_USART2_UART_Init+0x94>)
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004e00:	4b1b      	ldr	r3, [pc, #108]	@ (8004e70 <MX_USART2_UART_Init+0x94>)
 8004e02:	220c      	movs	r2, #12
 8004e04:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004e06:	4b1a      	ldr	r3, [pc, #104]	@ (8004e70 <MX_USART2_UART_Init+0x94>)
 8004e08:	2200      	movs	r2, #0
 8004e0a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004e0c:	4b18      	ldr	r3, [pc, #96]	@ (8004e70 <MX_USART2_UART_Init+0x94>)
 8004e0e:	2200      	movs	r2, #0
 8004e10:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004e12:	4b17      	ldr	r3, [pc, #92]	@ (8004e70 <MX_USART2_UART_Init+0x94>)
 8004e14:	2200      	movs	r2, #0
 8004e16:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004e18:	4b15      	ldr	r3, [pc, #84]	@ (8004e70 <MX_USART2_UART_Init+0x94>)
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004e1e:	4b14      	ldr	r3, [pc, #80]	@ (8004e70 <MX_USART2_UART_Init+0x94>)
 8004e20:	2200      	movs	r2, #0
 8004e22:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004e24:	4b12      	ldr	r3, [pc, #72]	@ (8004e70 <MX_USART2_UART_Init+0x94>)
 8004e26:	0018      	movs	r0, r3
 8004e28:	f006 fabe 	bl	800b3a8 <HAL_UART_Init>
 8004e2c:	1e03      	subs	r3, r0, #0
 8004e2e:	d001      	beq.n	8004e34 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8004e30:	f000 ff82 	bl	8005d38 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004e34:	4b0e      	ldr	r3, [pc, #56]	@ (8004e70 <MX_USART2_UART_Init+0x94>)
 8004e36:	2100      	movs	r1, #0
 8004e38:	0018      	movs	r0, r3
 8004e3a:	f007 fa59 	bl	800c2f0 <HAL_UARTEx_SetTxFifoThreshold>
 8004e3e:	1e03      	subs	r3, r0, #0
 8004e40:	d001      	beq.n	8004e46 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8004e42:	f000 ff79 	bl	8005d38 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004e46:	4b0a      	ldr	r3, [pc, #40]	@ (8004e70 <MX_USART2_UART_Init+0x94>)
 8004e48:	2100      	movs	r1, #0
 8004e4a:	0018      	movs	r0, r3
 8004e4c:	f007 fa90 	bl	800c370 <HAL_UARTEx_SetRxFifoThreshold>
 8004e50:	1e03      	subs	r3, r0, #0
 8004e52:	d001      	beq.n	8004e58 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8004e54:	f000 ff70 	bl	8005d38 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8004e58:	4b05      	ldr	r3, [pc, #20]	@ (8004e70 <MX_USART2_UART_Init+0x94>)
 8004e5a:	0018      	movs	r0, r3
 8004e5c:	f007 fa0e 	bl	800c27c <HAL_UARTEx_DisableFifoMode>
 8004e60:	1e03      	subs	r3, r0, #0
 8004e62:	d001      	beq.n	8004e68 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8004e64:	f000 ff68 	bl	8005d38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004e68:	46c0      	nop			@ (mov r8, r8)
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	46c0      	nop			@ (mov r8, r8)
 8004e70:	20001db0 	.word	0x20001db0
 8004e74:	40004400 	.word	0x40004400

08004e78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004e78:	b590      	push	{r4, r7, lr}
 8004e7a:	b08b      	sub	sp, #44	@ 0x2c
 8004e7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e7e:	2414      	movs	r4, #20
 8004e80:	193b      	adds	r3, r7, r4
 8004e82:	0018      	movs	r0, r3
 8004e84:	2314      	movs	r3, #20
 8004e86:	001a      	movs	r2, r3
 8004e88:	2100      	movs	r1, #0
 8004e8a:	f008 fb9f 	bl	800d5cc <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004e8e:	4b3f      	ldr	r3, [pc, #252]	@ (8004f8c <MX_GPIO_Init+0x114>)
 8004e90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e92:	4b3e      	ldr	r3, [pc, #248]	@ (8004f8c <MX_GPIO_Init+0x114>)
 8004e94:	2104      	movs	r1, #4
 8004e96:	430a      	orrs	r2, r1
 8004e98:	635a      	str	r2, [r3, #52]	@ 0x34
 8004e9a:	4b3c      	ldr	r3, [pc, #240]	@ (8004f8c <MX_GPIO_Init+0x114>)
 8004e9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e9e:	2204      	movs	r2, #4
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	613b      	str	r3, [r7, #16]
 8004ea4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ea6:	4b39      	ldr	r3, [pc, #228]	@ (8004f8c <MX_GPIO_Init+0x114>)
 8004ea8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004eaa:	4b38      	ldr	r3, [pc, #224]	@ (8004f8c <MX_GPIO_Init+0x114>)
 8004eac:	2101      	movs	r1, #1
 8004eae:	430a      	orrs	r2, r1
 8004eb0:	635a      	str	r2, [r3, #52]	@ 0x34
 8004eb2:	4b36      	ldr	r3, [pc, #216]	@ (8004f8c <MX_GPIO_Init+0x114>)
 8004eb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	4013      	ands	r3, r2
 8004eba:	60fb      	str	r3, [r7, #12]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ebe:	4b33      	ldr	r3, [pc, #204]	@ (8004f8c <MX_GPIO_Init+0x114>)
 8004ec0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ec2:	4b32      	ldr	r3, [pc, #200]	@ (8004f8c <MX_GPIO_Init+0x114>)
 8004ec4:	2102      	movs	r1, #2
 8004ec6:	430a      	orrs	r2, r1
 8004ec8:	635a      	str	r2, [r3, #52]	@ 0x34
 8004eca:	4b30      	ldr	r3, [pc, #192]	@ (8004f8c <MX_GPIO_Init+0x114>)
 8004ecc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ece:	2202      	movs	r2, #2
 8004ed0:	4013      	ands	r3, r2
 8004ed2:	60bb      	str	r3, [r7, #8]
 8004ed4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004ed6:	4b2d      	ldr	r3, [pc, #180]	@ (8004f8c <MX_GPIO_Init+0x114>)
 8004ed8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004eda:	4b2c      	ldr	r3, [pc, #176]	@ (8004f8c <MX_GPIO_Init+0x114>)
 8004edc:	2108      	movs	r1, #8
 8004ede:	430a      	orrs	r2, r1
 8004ee0:	635a      	str	r2, [r3, #52]	@ 0x34
 8004ee2:	4b2a      	ldr	r3, [pc, #168]	@ (8004f8c <MX_GPIO_Init+0x114>)
 8004ee4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ee6:	2208      	movs	r2, #8
 8004ee8:	4013      	ands	r3, r2
 8004eea:	607b      	str	r3, [r7, #4]
 8004eec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_15, GPIO_PIN_RESET);
 8004eee:	4928      	ldr	r1, [pc, #160]	@ (8004f90 <MX_GPIO_Init+0x118>)
 8004ef0:	23a0      	movs	r3, #160	@ 0xa0
 8004ef2:	05db      	lsls	r3, r3, #23
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	0018      	movs	r0, r3
 8004ef8:	f002 fecd 	bl	8007c96 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004efc:	193b      	adds	r3, r7, r4
 8004efe:	2202      	movs	r2, #2
 8004f00:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004f02:	193b      	adds	r3, r7, r4
 8004f04:	2200      	movs	r2, #0
 8004f06:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f08:	193b      	adds	r3, r7, r4
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f0e:	193b      	adds	r3, r7, r4
 8004f10:	4a20      	ldr	r2, [pc, #128]	@ (8004f94 <MX_GPIO_Init+0x11c>)
 8004f12:	0019      	movs	r1, r3
 8004f14:	0010      	movs	r0, r2
 8004f16:	f002 fd35 	bl	8007984 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_15;
 8004f1a:	193b      	adds	r3, r7, r4
 8004f1c:	4a1c      	ldr	r2, [pc, #112]	@ (8004f90 <MX_GPIO_Init+0x118>)
 8004f1e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f20:	193b      	adds	r3, r7, r4
 8004f22:	2201      	movs	r2, #1
 8004f24:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f26:	193b      	adds	r3, r7, r4
 8004f28:	2200      	movs	r2, #0
 8004f2a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f2c:	193b      	adds	r3, r7, r4
 8004f2e:	2200      	movs	r2, #0
 8004f30:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f32:	193a      	adds	r2, r7, r4
 8004f34:	23a0      	movs	r3, #160	@ 0xa0
 8004f36:	05db      	lsls	r3, r3, #23
 8004f38:	0011      	movs	r1, r2
 8004f3a:	0018      	movs	r0, r3
 8004f3c:	f002 fd22 	bl	8007984 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004f40:	193b      	adds	r3, r7, r4
 8004f42:	2204      	movs	r2, #4
 8004f44:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004f46:	193b      	adds	r3, r7, r4
 8004f48:	2200      	movs	r2, #0
 8004f4a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f4c:	193b      	adds	r3, r7, r4
 8004f4e:	2200      	movs	r2, #0
 8004f50:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f52:	193b      	adds	r3, r7, r4
 8004f54:	4a10      	ldr	r2, [pc, #64]	@ (8004f98 <MX_GPIO_Init+0x120>)
 8004f56:	0019      	movs	r1, r3
 8004f58:	0010      	movs	r0, r2
 8004f5a:	f002 fd13 	bl	8007984 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004f5e:	0021      	movs	r1, r4
 8004f60:	187b      	adds	r3, r7, r1
 8004f62:	2280      	movs	r2, #128	@ 0x80
 8004f64:	0112      	lsls	r2, r2, #4
 8004f66:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004f68:	187b      	adds	r3, r7, r1
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f6e:	187b      	adds	r3, r7, r1
 8004f70:	2200      	movs	r2, #0
 8004f72:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f74:	187a      	adds	r2, r7, r1
 8004f76:	23a0      	movs	r3, #160	@ 0xa0
 8004f78:	05db      	lsls	r3, r3, #23
 8004f7a:	0011      	movs	r1, r2
 8004f7c:	0018      	movs	r0, r3
 8004f7e:	f002 fd01 	bl	8007984 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8004f82:	46c0      	nop			@ (mov r8, r8)
 8004f84:	46bd      	mov	sp, r7
 8004f86:	b00b      	add	sp, #44	@ 0x2c
 8004f88:	bd90      	pop	{r4, r7, pc}
 8004f8a:	46c0      	nop			@ (mov r8, r8)
 8004f8c:	40021000 	.word	0x40021000
 8004f90:	00008030 	.word	0x00008030
 8004f94:	50000800 	.word	0x50000800
 8004f98:	50000400 	.word	0x50000400

08004f9c <ChangeNote>:

/* USER CODE BEGIN 4 */
void ChangeNote(enum Scale freq)
{
 8004f9c:	b590      	push	{r4, r7, lr}
 8004f9e:	b083      	sub	sp, #12
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	0002      	movs	r2, r0
 8004fa4:	1dbb      	adds	r3, r7, #6
 8004fa6:	801a      	strh	r2, [r3, #0]
    TIM17->ARR=(uint32_t)(987*(float)1000/(float)freq);
 8004fa8:	1dbb      	adds	r3, r7, #6
 8004faa:	881b      	ldrh	r3, [r3, #0]
 8004fac:	0018      	movs	r0, r3
 8004fae:	f7fc fb1b 	bl	80015e8 <__aeabi_ui2f>
 8004fb2:	1c03      	adds	r3, r0, #0
 8004fb4:	1c19      	adds	r1, r3, #0
 8004fb6:	4807      	ldr	r0, [pc, #28]	@ (8004fd4 <ChangeNote+0x38>)
 8004fb8:	f7fb fde2 	bl	8000b80 <__aeabi_fdiv>
 8004fbc:	1c03      	adds	r3, r0, #0
 8004fbe:	4c06      	ldr	r4, [pc, #24]	@ (8004fd8 <ChangeNote+0x3c>)
 8004fc0:	1c18      	adds	r0, r3, #0
 8004fc2:	f7fb fb01 	bl	80005c8 <__aeabi_f2uiz>
 8004fc6:	0003      	movs	r3, r0
 8004fc8:	62e3      	str	r3, [r4, #44]	@ 0x2c
}
 8004fca:	46c0      	nop			@ (mov r8, r8)
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	b003      	add	sp, #12
 8004fd0:	bd90      	pop	{r4, r7, pc}
 8004fd2:	46c0      	nop			@ (mov r8, r8)
 8004fd4:	4970f780 	.word	0x4970f780
 8004fd8:	40014800 	.word	0x40014800

08004fdc <PlayEffect>:
void PlayEffect(enum SoundEffects effect) {
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b082      	sub	sp, #8
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	0002      	movs	r2, r0
 8004fe4:	1dfb      	adds	r3, r7, #7
 8004fe6:	701a      	strb	r2, [r3, #0]
	HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8004fe8:	4ba0      	ldr	r3, [pc, #640]	@ (800526c <PlayEffect+0x290>)
 8004fea:	2100      	movs	r1, #0
 8004fec:	0018      	movs	r0, r3
 8004fee:	f005 fb43 	bl	800a678 <HAL_TIM_PWM_Start>
	HAL_Delay(5);
 8004ff2:	2005      	movs	r0, #5
 8004ff4:	f002 fbd8 	bl	80077a8 <HAL_Delay>
    switch(effect){
 8004ff8:	1dfb      	adds	r3, r7, #7
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	2b06      	cmp	r3, #6
 8004ffe:	d900      	bls.n	8005002 <PlayEffect+0x26>
 8005000:	e12a      	b.n	8005258 <PlayEffect+0x27c>
 8005002:	009a      	lsls	r2, r3, #2
 8005004:	4b9a      	ldr	r3, [pc, #616]	@ (8005270 <PlayEffect+0x294>)
 8005006:	18d3      	adds	r3, r2, r3
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	469f      	mov	pc, r3
        case MenuBeep:

        	curNote = G*3;
 800500c:	4b99      	ldr	r3, [pc, #612]	@ (8005274 <PlayEffect+0x298>)
 800500e:	2293      	movs	r2, #147	@ 0x93
 8005010:	0112      	lsls	r2, r2, #4
 8005012:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 8005014:	4b97      	ldr	r3, [pc, #604]	@ (8005274 <PlayEffect+0x298>)
 8005016:	881b      	ldrh	r3, [r3, #0]
 8005018:	0018      	movs	r0, r3
 800501a:	f7ff ffbf 	bl	8004f9c <ChangeNote>
        	HAL_Delay(25);
 800501e:	2019      	movs	r0, #25
 8005020:	f002 fbc2 	bl	80077a8 <HAL_Delay>
        	curNote = G*2;
 8005024:	4b93      	ldr	r3, [pc, #588]	@ (8005274 <PlayEffect+0x298>)
 8005026:	22c4      	movs	r2, #196	@ 0xc4
 8005028:	00d2      	lsls	r2, r2, #3
 800502a:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 800502c:	4b91      	ldr	r3, [pc, #580]	@ (8005274 <PlayEffect+0x298>)
 800502e:	881b      	ldrh	r3, [r3, #0]
 8005030:	0018      	movs	r0, r3
 8005032:	f7ff ffb3 	bl	8004f9c <ChangeNote>
        	HAL_Delay(25);
 8005036:	2019      	movs	r0, #25
 8005038:	f002 fbb6 	bl	80077a8 <HAL_Delay>

            break;
 800503c:	e10c      	b.n	8005258 <PlayEffect+0x27c>
        case EggNoise:

        	curNote = A;
 800503e:	4b8d      	ldr	r3, [pc, #564]	@ (8005274 <PlayEffect+0x298>)
 8005040:	22dc      	movs	r2, #220	@ 0xdc
 8005042:	0052      	lsls	r2, r2, #1
 8005044:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 8005046:	4b8b      	ldr	r3, [pc, #556]	@ (8005274 <PlayEffect+0x298>)
 8005048:	881b      	ldrh	r3, [r3, #0]
 800504a:	0018      	movs	r0, r3
 800504c:	f7ff ffa6 	bl	8004f9c <ChangeNote>
        	HAL_Delay(20);
 8005050:	2014      	movs	r0, #20
 8005052:	f002 fba9 	bl	80077a8 <HAL_Delay>

        	curNote = C;
 8005056:	4b87      	ldr	r3, [pc, #540]	@ (8005274 <PlayEffect+0x298>)
 8005058:	4a87      	ldr	r2, [pc, #540]	@ (8005278 <PlayEffect+0x29c>)
 800505a:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 800505c:	4b85      	ldr	r3, [pc, #532]	@ (8005274 <PlayEffect+0x298>)
 800505e:	881b      	ldrh	r3, [r3, #0]
 8005060:	0018      	movs	r0, r3
 8005062:	f7ff ff9b 	bl	8004f9c <ChangeNote>
        	HAL_Delay(20);
 8005066:	2014      	movs	r0, #20
 8005068:	f002 fb9e 	bl	80077a8 <HAL_Delay>

        	curNote = A;
 800506c:	4b81      	ldr	r3, [pc, #516]	@ (8005274 <PlayEffect+0x298>)
 800506e:	22dc      	movs	r2, #220	@ 0xdc
 8005070:	0052      	lsls	r2, r2, #1
 8005072:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 8005074:	4b7f      	ldr	r3, [pc, #508]	@ (8005274 <PlayEffect+0x298>)
 8005076:	881b      	ldrh	r3, [r3, #0]
 8005078:	0018      	movs	r0, r3
 800507a:	f7ff ff8f 	bl	8004f9c <ChangeNote>
        	HAL_Delay(20);
 800507e:	2014      	movs	r0, #20
 8005080:	f002 fb92 	bl	80077a8 <HAL_Delay>

        	curNote = C;
 8005084:	4b7b      	ldr	r3, [pc, #492]	@ (8005274 <PlayEffect+0x298>)
 8005086:	4a7c      	ldr	r2, [pc, #496]	@ (8005278 <PlayEffect+0x29c>)
 8005088:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 800508a:	4b7a      	ldr	r3, [pc, #488]	@ (8005274 <PlayEffect+0x298>)
 800508c:	881b      	ldrh	r3, [r3, #0]
 800508e:	0018      	movs	r0, r3
 8005090:	f7ff ff84 	bl	8004f9c <ChangeNote>
        	HAL_Delay(20);
 8005094:	2014      	movs	r0, #20
 8005096:	f002 fb87 	bl	80077a8 <HAL_Delay>

            break;
 800509a:	e0dd      	b.n	8005258 <PlayEffect+0x27c>
        case YoungNoiseHappy:

        	curNote = F*4;
 800509c:	4b75      	ldr	r3, [pc, #468]	@ (8005274 <PlayEffect+0x298>)
 800509e:	4a77      	ldr	r2, [pc, #476]	@ (800527c <PlayEffect+0x2a0>)
 80050a0:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 80050a2:	4b74      	ldr	r3, [pc, #464]	@ (8005274 <PlayEffect+0x298>)
 80050a4:	881b      	ldrh	r3, [r3, #0]
 80050a6:	0018      	movs	r0, r3
 80050a8:	f7ff ff78 	bl	8004f9c <ChangeNote>
        	HAL_Delay(35);
 80050ac:	2023      	movs	r0, #35	@ 0x23
 80050ae:	f002 fb7b 	bl	80077a8 <HAL_Delay>

        	curNote = B*4;
 80050b2:	4b70      	ldr	r3, [pc, #448]	@ (8005274 <PlayEffect+0x298>)
 80050b4:	22f7      	movs	r2, #247	@ 0xf7
 80050b6:	00d2      	lsls	r2, r2, #3
 80050b8:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 80050ba:	4b6e      	ldr	r3, [pc, #440]	@ (8005274 <PlayEffect+0x298>)
 80050bc:	881b      	ldrh	r3, [r3, #0]
 80050be:	0018      	movs	r0, r3
 80050c0:	f7ff ff6c 	bl	8004f9c <ChangeNote>
        	HAL_Delay(15);
 80050c4:	200f      	movs	r0, #15
 80050c6:	f002 fb6f 	bl	80077a8 <HAL_Delay>

            break;
 80050ca:	e0c5      	b.n	8005258 <PlayEffect+0x27c>
        case YoungNoiseSad:

        	curNote = B*4;
 80050cc:	4b69      	ldr	r3, [pc, #420]	@ (8005274 <PlayEffect+0x298>)
 80050ce:	22f7      	movs	r2, #247	@ 0xf7
 80050d0:	00d2      	lsls	r2, r2, #3
 80050d2:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 80050d4:	4b67      	ldr	r3, [pc, #412]	@ (8005274 <PlayEffect+0x298>)
 80050d6:	881b      	ldrh	r3, [r3, #0]
 80050d8:	0018      	movs	r0, r3
 80050da:	f7ff ff5f 	bl	8004f9c <ChangeNote>
        	HAL_Delay(35);
 80050de:	2023      	movs	r0, #35	@ 0x23
 80050e0:	f002 fb62 	bl	80077a8 <HAL_Delay>

        	curNote = B*3;
 80050e4:	4b63      	ldr	r3, [pc, #396]	@ (8005274 <PlayEffect+0x298>)
 80050e6:	4a66      	ldr	r2, [pc, #408]	@ (8005280 <PlayEffect+0x2a4>)
 80050e8:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 80050ea:	4b62      	ldr	r3, [pc, #392]	@ (8005274 <PlayEffect+0x298>)
 80050ec:	881b      	ldrh	r3, [r3, #0]
 80050ee:	0018      	movs	r0, r3
 80050f0:	f7ff ff54 	bl	8004f9c <ChangeNote>
        	HAL_Delay(15);
 80050f4:	200f      	movs	r0, #15
 80050f6:	f002 fb57 	bl	80077a8 <HAL_Delay>

            break;
 80050fa:	e0ad      	b.n	8005258 <PlayEffect+0x27c>
        case AdultNoiseHappy:

        	curNote = F/4;
 80050fc:	4b5d      	ldr	r3, [pc, #372]	@ (8005274 <PlayEffect+0x298>)
 80050fe:	22ae      	movs	r2, #174	@ 0xae
 8005100:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 8005102:	4b5c      	ldr	r3, [pc, #368]	@ (8005274 <PlayEffect+0x298>)
 8005104:	881b      	ldrh	r3, [r3, #0]
 8005106:	0018      	movs	r0, r3
 8005108:	f7ff ff48 	bl	8004f9c <ChangeNote>
        	HAL_Delay(35);
 800510c:	2023      	movs	r0, #35	@ 0x23
 800510e:	f002 fb4b 	bl	80077a8 <HAL_Delay>

        	curNote = B/4;
 8005112:	4b58      	ldr	r3, [pc, #352]	@ (8005274 <PlayEffect+0x298>)
 8005114:	227b      	movs	r2, #123	@ 0x7b
 8005116:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 8005118:	4b56      	ldr	r3, [pc, #344]	@ (8005274 <PlayEffect+0x298>)
 800511a:	881b      	ldrh	r3, [r3, #0]
 800511c:	0018      	movs	r0, r3
 800511e:	f7ff ff3d 	bl	8004f9c <ChangeNote>
        	HAL_Delay(15);
 8005122:	200f      	movs	r0, #15
 8005124:	f002 fb40 	bl	80077a8 <HAL_Delay>

            break;
 8005128:	e096      	b.n	8005258 <PlayEffect+0x27c>
        case AdultNoiseSad:

        	curNote = C/4;
 800512a:	4b52      	ldr	r3, [pc, #328]	@ (8005274 <PlayEffect+0x298>)
 800512c:	2282      	movs	r2, #130	@ 0x82
 800512e:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 8005130:	4b50      	ldr	r3, [pc, #320]	@ (8005274 <PlayEffect+0x298>)
 8005132:	881b      	ldrh	r3, [r3, #0]
 8005134:	0018      	movs	r0, r3
 8005136:	f7ff ff31 	bl	8004f9c <ChangeNote>
        	HAL_Delay(35);
 800513a:	2023      	movs	r0, #35	@ 0x23
 800513c:	f002 fb34 	bl	80077a8 <HAL_Delay>

        	curNote = A/4;
 8005140:	4b4c      	ldr	r3, [pc, #304]	@ (8005274 <PlayEffect+0x298>)
 8005142:	226e      	movs	r2, #110	@ 0x6e
 8005144:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 8005146:	4b4b      	ldr	r3, [pc, #300]	@ (8005274 <PlayEffect+0x298>)
 8005148:	881b      	ldrh	r3, [r3, #0]
 800514a:	0018      	movs	r0, r3
 800514c:	f7ff ff26 	bl	8004f9c <ChangeNote>
        	HAL_Delay(15);
 8005150:	200f      	movs	r0, #15
 8005152:	f002 fb29 	bl	80077a8 <HAL_Delay>

        	break;
 8005156:	e07f      	b.n	8005258 <PlayEffect+0x27c>
        case Evolution:

        	curNote = A*2;
 8005158:	4b46      	ldr	r3, [pc, #280]	@ (8005274 <PlayEffect+0x298>)
 800515a:	22dc      	movs	r2, #220	@ 0xdc
 800515c:	0092      	lsls	r2, r2, #2
 800515e:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 8005160:	4b44      	ldr	r3, [pc, #272]	@ (8005274 <PlayEffect+0x298>)
 8005162:	881b      	ldrh	r3, [r3, #0]
 8005164:	0018      	movs	r0, r3
 8005166:	f7ff ff19 	bl	8004f9c <ChangeNote>
        	HAL_Delay(50);
 800516a:	2032      	movs	r0, #50	@ 0x32
 800516c:	f002 fb1c 	bl	80077a8 <HAL_Delay>

        	curNote = B*2;
 8005170:	4b40      	ldr	r3, [pc, #256]	@ (8005274 <PlayEffect+0x298>)
 8005172:	22f7      	movs	r2, #247	@ 0xf7
 8005174:	0092      	lsls	r2, r2, #2
 8005176:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 8005178:	4b3e      	ldr	r3, [pc, #248]	@ (8005274 <PlayEffect+0x298>)
 800517a:	881b      	ldrh	r3, [r3, #0]
 800517c:	0018      	movs	r0, r3
 800517e:	f7ff ff0d 	bl	8004f9c <ChangeNote>
        	HAL_Delay(50);
 8005182:	2032      	movs	r0, #50	@ 0x32
 8005184:	f002 fb10 	bl	80077a8 <HAL_Delay>

        	curNote = C*2;
 8005188:	4b3a      	ldr	r3, [pc, #232]	@ (8005274 <PlayEffect+0x298>)
 800518a:	4a3e      	ldr	r2, [pc, #248]	@ (8005284 <PlayEffect+0x2a8>)
 800518c:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 800518e:	4b39      	ldr	r3, [pc, #228]	@ (8005274 <PlayEffect+0x298>)
 8005190:	881b      	ldrh	r3, [r3, #0]
 8005192:	0018      	movs	r0, r3
 8005194:	f7ff ff02 	bl	8004f9c <ChangeNote>
        	HAL_Delay(50);
 8005198:	2032      	movs	r0, #50	@ 0x32
 800519a:	f002 fb05 	bl	80077a8 <HAL_Delay>

        	curNote = A*2;
 800519e:	4b35      	ldr	r3, [pc, #212]	@ (8005274 <PlayEffect+0x298>)
 80051a0:	22dc      	movs	r2, #220	@ 0xdc
 80051a2:	0092      	lsls	r2, r2, #2
 80051a4:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 80051a6:	4b33      	ldr	r3, [pc, #204]	@ (8005274 <PlayEffect+0x298>)
 80051a8:	881b      	ldrh	r3, [r3, #0]
 80051aa:	0018      	movs	r0, r3
 80051ac:	f7ff fef6 	bl	8004f9c <ChangeNote>
        	HAL_Delay(50);
 80051b0:	2032      	movs	r0, #50	@ 0x32
 80051b2:	f002 faf9 	bl	80077a8 <HAL_Delay>

        	curNote = C*2;
 80051b6:	4b2f      	ldr	r3, [pc, #188]	@ (8005274 <PlayEffect+0x298>)
 80051b8:	4a32      	ldr	r2, [pc, #200]	@ (8005284 <PlayEffect+0x2a8>)
 80051ba:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 80051bc:	4b2d      	ldr	r3, [pc, #180]	@ (8005274 <PlayEffect+0x298>)
 80051be:	881b      	ldrh	r3, [r3, #0]
 80051c0:	0018      	movs	r0, r3
 80051c2:	f7ff feeb 	bl	8004f9c <ChangeNote>
        	HAL_Delay(50);
 80051c6:	2032      	movs	r0, #50	@ 0x32
 80051c8:	f002 faee 	bl	80077a8 <HAL_Delay>

        	curNote = D*2;
 80051cc:	4b29      	ldr	r3, [pc, #164]	@ (8005274 <PlayEffect+0x298>)
 80051ce:	4a2e      	ldr	r2, [pc, #184]	@ (8005288 <PlayEffect+0x2ac>)
 80051d0:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 80051d2:	4b28      	ldr	r3, [pc, #160]	@ (8005274 <PlayEffect+0x298>)
 80051d4:	881b      	ldrh	r3, [r3, #0]
 80051d6:	0018      	movs	r0, r3
 80051d8:	f7ff fee0 	bl	8004f9c <ChangeNote>
        	HAL_Delay(50);
 80051dc:	2032      	movs	r0, #50	@ 0x32
 80051de:	f002 fae3 	bl	80077a8 <HAL_Delay>

        	curNote = B*2;
 80051e2:	4b24      	ldr	r3, [pc, #144]	@ (8005274 <PlayEffect+0x298>)
 80051e4:	22f7      	movs	r2, #247	@ 0xf7
 80051e6:	0092      	lsls	r2, r2, #2
 80051e8:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 80051ea:	4b22      	ldr	r3, [pc, #136]	@ (8005274 <PlayEffect+0x298>)
 80051ec:	881b      	ldrh	r3, [r3, #0]
 80051ee:	0018      	movs	r0, r3
 80051f0:	f7ff fed4 	bl	8004f9c <ChangeNote>
        	HAL_Delay(50);
 80051f4:	2032      	movs	r0, #50	@ 0x32
 80051f6:	f002 fad7 	bl	80077a8 <HAL_Delay>

        	curNote = D*2;
 80051fa:	4b1e      	ldr	r3, [pc, #120]	@ (8005274 <PlayEffect+0x298>)
 80051fc:	4a22      	ldr	r2, [pc, #136]	@ (8005288 <PlayEffect+0x2ac>)
 80051fe:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 8005200:	4b1c      	ldr	r3, [pc, #112]	@ (8005274 <PlayEffect+0x298>)
 8005202:	881b      	ldrh	r3, [r3, #0]
 8005204:	0018      	movs	r0, r3
 8005206:	f7ff fec9 	bl	8004f9c <ChangeNote>
        	HAL_Delay(50);
 800520a:	2032      	movs	r0, #50	@ 0x32
 800520c:	f002 facc 	bl	80077a8 <HAL_Delay>

        	curNote = E*2;
 8005210:	4b18      	ldr	r3, [pc, #96]	@ (8005274 <PlayEffect+0x298>)
 8005212:	4a1e      	ldr	r2, [pc, #120]	@ (800528c <PlayEffect+0x2b0>)
 8005214:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 8005216:	4b17      	ldr	r3, [pc, #92]	@ (8005274 <PlayEffect+0x298>)
 8005218:	881b      	ldrh	r3, [r3, #0]
 800521a:	0018      	movs	r0, r3
 800521c:	f7ff febe 	bl	8004f9c <ChangeNote>
        	HAL_Delay(50);
 8005220:	2032      	movs	r0, #50	@ 0x32
 8005222:	f002 fac1 	bl	80077a8 <HAL_Delay>

        	curNote = G*2;
 8005226:	4b13      	ldr	r3, [pc, #76]	@ (8005274 <PlayEffect+0x298>)
 8005228:	22c4      	movs	r2, #196	@ 0xc4
 800522a:	00d2      	lsls	r2, r2, #3
 800522c:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 800522e:	4b11      	ldr	r3, [pc, #68]	@ (8005274 <PlayEffect+0x298>)
 8005230:	881b      	ldrh	r3, [r3, #0]
 8005232:	0018      	movs	r0, r3
 8005234:	f7ff feb2 	bl	8004f9c <ChangeNote>
        	HAL_Delay(50);
 8005238:	2032      	movs	r0, #50	@ 0x32
 800523a:	f002 fab5 	bl	80077a8 <HAL_Delay>

        	curNote = G*2;
 800523e:	4b0d      	ldr	r3, [pc, #52]	@ (8005274 <PlayEffect+0x298>)
 8005240:	22c4      	movs	r2, #196	@ 0xc4
 8005242:	00d2      	lsls	r2, r2, #3
 8005244:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 8005246:	4b0b      	ldr	r3, [pc, #44]	@ (8005274 <PlayEffect+0x298>)
 8005248:	881b      	ldrh	r3, [r3, #0]
 800524a:	0018      	movs	r0, r3
 800524c:	f7ff fea6 	bl	8004f9c <ChangeNote>
        	HAL_Delay(50);
 8005250:	2032      	movs	r0, #50	@ 0x32
 8005252:	f002 faa9 	bl	80077a8 <HAL_Delay>

        	break;
 8005256:	46c0      	nop			@ (mov r8, r8)
    }
    HAL_TIM_PWM_Stop(&htim17, TIM_CHANNEL_1);
 8005258:	4b04      	ldr	r3, [pc, #16]	@ (800526c <PlayEffect+0x290>)
 800525a:	2100      	movs	r1, #0
 800525c:	0018      	movs	r0, r3
 800525e:	f005 fafb 	bl	800a858 <HAL_TIM_PWM_Stop>
}
 8005262:	46c0      	nop			@ (mov r8, r8)
 8005264:	46bd      	mov	sp, r7
 8005266:	b002      	add	sp, #8
 8005268:	bd80      	pop	{r7, pc}
 800526a:	46c0      	nop			@ (mov r8, r8)
 800526c:	20001cd0 	.word	0x20001cd0
 8005270:	08010504 	.word	0x08010504
 8005274:	20000bd6 	.word	0x20000bd6
 8005278:	0000020b 	.word	0x0000020b
 800527c:	00000ae8 	.word	0x00000ae8
 8005280:	000005ca 	.word	0x000005ca
 8005284:	00000416 	.word	0x00000416
 8005288:	00000496 	.word	0x00000496
 800528c:	00000526 	.word	0x00000526

08005290 <Animate>:

//AURORA: Put custom functions here!
void Animate (struct Img* animation, unsigned int size)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b086      	sub	sp, #24
 8005294:	af04      	add	r7, sp, #16
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	6039      	str	r1, [r7, #0]
	++currentFrame;
 800529a:	4b14      	ldr	r3, [pc, #80]	@ (80052ec <Animate+0x5c>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	1c5a      	adds	r2, r3, #1
 80052a0:	4b12      	ldr	r3, [pc, #72]	@ (80052ec <Animate+0x5c>)
 80052a2:	601a      	str	r2, [r3, #0]
	if(currentFrame > size)
 80052a4:	4b11      	ldr	r3, [pc, #68]	@ (80052ec <Animate+0x5c>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	683a      	ldr	r2, [r7, #0]
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d202      	bcs.n	80052b4 <Animate+0x24>
	{
		currentFrame = 0;
 80052ae:	4b0f      	ldr	r3, [pc, #60]	@ (80052ec <Animate+0x5c>)
 80052b0:	2200      	movs	r2, #0
 80052b2:	601a      	str	r2, [r3, #0]
	}
	drawImage(animation[currentFrame].Body, palette, 40, 40, 64, 64, animation[currentFrame].Size);
 80052b4:	4b0d      	ldr	r3, [pc, #52]	@ (80052ec <Animate+0x5c>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	00db      	lsls	r3, r3, #3
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	18d3      	adds	r3, r2, r3
 80052be:	6818      	ldr	r0, [r3, #0]
 80052c0:	4b0a      	ldr	r3, [pc, #40]	@ (80052ec <Animate+0x5c>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	00db      	lsls	r3, r3, #3
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	18d3      	adds	r3, r2, r3
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	4908      	ldr	r1, [pc, #32]	@ (80052f0 <Animate+0x60>)
 80052d0:	9302      	str	r3, [sp, #8]
 80052d2:	2340      	movs	r3, #64	@ 0x40
 80052d4:	9301      	str	r3, [sp, #4]
 80052d6:	2340      	movs	r3, #64	@ 0x40
 80052d8:	9300      	str	r3, [sp, #0]
 80052da:	2328      	movs	r3, #40	@ 0x28
 80052dc:	2228      	movs	r2, #40	@ 0x28
 80052de:	f7fe fbed 	bl	8003abc <drawImage>
	return;
 80052e2:	46c0      	nop			@ (mov r8, r8)
}
 80052e4:	46bd      	mov	sp, r7
 80052e6:	b002      	add	sp, #8
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	46c0      	nop			@ (mov r8, r8)
 80052ec:	20001b6c 	.word	0x20001b6c
 80052f0:	200009b4 	.word	0x200009b4

080052f4 <_ADXL343_ReadReg8>:
int _ADXL343_ReadReg8 (unsigned char TargetRegister, unsigned char * TargetValue, uint8_t size)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af02      	add	r7, sp, #8
 80052fa:	6039      	str	r1, [r7, #0]
 80052fc:	0011      	movs	r1, r2
 80052fe:	1dfb      	adds	r3, r7, #7
 8005300:	1c02      	adds	r2, r0, #0
 8005302:	701a      	strb	r2, [r3, #0]
 8005304:	1dbb      	adds	r3, r7, #6
 8005306:	1c0a      	adds	r2, r1, #0
 8005308:	701a      	strb	r2, [r3, #0]
  if (!HAL_I2C_Master_Transmit(&hi2c1, 0x14<<1, &TargetRegister, 1, 1000)==HAL_OK)
 800530a:	1dfa      	adds	r2, r7, #7
 800530c:	4811      	ldr	r0, [pc, #68]	@ (8005354 <_ADXL343_ReadReg8+0x60>)
 800530e:	23fa      	movs	r3, #250	@ 0xfa
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	9300      	str	r3, [sp, #0]
 8005314:	2301      	movs	r3, #1
 8005316:	2128      	movs	r1, #40	@ 0x28
 8005318:	f002 fd80 	bl	8007e1c <HAL_I2C_Master_Transmit>
 800531c:	1e03      	subs	r3, r0, #0
 800531e:	d002      	beq.n	8005326 <_ADXL343_ReadReg8+0x32>
      return -1;
 8005320:	2301      	movs	r3, #1
 8005322:	425b      	negs	r3, r3
 8005324:	e011      	b.n	800534a <_ADXL343_ReadReg8+0x56>

  if (!HAL_I2C_Master_Receive(&hi2c1, 0x14<<1, TargetValue, size, 1000)==HAL_OK)
 8005326:	1dbb      	adds	r3, r7, #6
 8005328:	781b      	ldrb	r3, [r3, #0]
 800532a:	b299      	uxth	r1, r3
 800532c:	683a      	ldr	r2, [r7, #0]
 800532e:	4809      	ldr	r0, [pc, #36]	@ (8005354 <_ADXL343_ReadReg8+0x60>)
 8005330:	23fa      	movs	r3, #250	@ 0xfa
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	9300      	str	r3, [sp, #0]
 8005336:	000b      	movs	r3, r1
 8005338:	2128      	movs	r1, #40	@ 0x28
 800533a:	f002 fe99 	bl	8008070 <HAL_I2C_Master_Receive>
 800533e:	1e03      	subs	r3, r0, #0
 8005340:	d002      	beq.n	8005348 <_ADXL343_ReadReg8+0x54>
    return -2;
 8005342:	2302      	movs	r3, #2
 8005344:	425b      	negs	r3, r3
 8005346:	e000      	b.n	800534a <_ADXL343_ReadReg8+0x56>

  return 0;
 8005348:	2300      	movs	r3, #0
}
 800534a:	0018      	movs	r0, r3
 800534c:	46bd      	mov	sp, r7
 800534e:	b002      	add	sp, #8
 8005350:	bd80      	pop	{r7, pc}
 8005352:	46c0      	nop			@ (mov r8, r8)
 8005354:	20001bec 	.word	0x20001bec

08005358 <_ADXL343_WriteReg8>:

int _ADXL343_WriteReg8 (unsigned char TargetRegister, unsigned char TargetValue)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b086      	sub	sp, #24
 800535c:	af02      	add	r7, sp, #8
 800535e:	0002      	movs	r2, r0
 8005360:	1dfb      	adds	r3, r7, #7
 8005362:	701a      	strb	r2, [r3, #0]
 8005364:	1dbb      	adds	r3, r7, #6
 8005366:	1c0a      	adds	r2, r1, #0
 8005368:	701a      	strb	r2, [r3, #0]
  unsigned char buff [2];
  buff[0] = TargetRegister;
 800536a:	210c      	movs	r1, #12
 800536c:	187b      	adds	r3, r7, r1
 800536e:	1dfa      	adds	r2, r7, #7
 8005370:	7812      	ldrb	r2, [r2, #0]
 8005372:	701a      	strb	r2, [r3, #0]
  buff[1] = TargetValue;
 8005374:	187b      	adds	r3, r7, r1
 8005376:	1dba      	adds	r2, r7, #6
 8005378:	7812      	ldrb	r2, [r2, #0]
 800537a:	705a      	strb	r2, [r3, #1]

  if (HAL_I2C_Master_Transmit(&hi2c1, 0x14<<1, buff, 2, 1000)==HAL_OK)
 800537c:	187a      	adds	r2, r7, r1
 800537e:	4809      	ldr	r0, [pc, #36]	@ (80053a4 <_ADXL343_WriteReg8+0x4c>)
 8005380:	23fa      	movs	r3, #250	@ 0xfa
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	9300      	str	r3, [sp, #0]
 8005386:	2302      	movs	r3, #2
 8005388:	2128      	movs	r1, #40	@ 0x28
 800538a:	f002 fd47 	bl	8007e1c <HAL_I2C_Master_Transmit>
 800538e:	1e03      	subs	r3, r0, #0
 8005390:	d102      	bne.n	8005398 <_ADXL343_WriteReg8+0x40>
      return -1;
 8005392:	2301      	movs	r3, #1
 8005394:	425b      	negs	r3, r3
 8005396:	e000      	b.n	800539a <_ADXL343_WriteReg8+0x42>

  return 0;
 8005398:	2300      	movs	r3, #0
}
 800539a:	0018      	movs	r0, r3
 800539c:	46bd      	mov	sp, r7
 800539e:	b004      	add	sp, #16
 80053a0:	bd80      	pop	{r7, pc}
 80053a2:	46c0      	nop			@ (mov r8, r8)
 80053a4:	20001bec 	.word	0x20001bec

080053a8 <SendData>:
void SendData()
{
 80053a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053aa:	46c6      	mov	lr, r8
 80053ac:	b500      	push	{lr}
 80053ae:	b088      	sub	sp, #32
 80053b0:	af06      	add	r7, sp, #24
	unsigned int posIndex;
	unsigned int clrIndex;
	sprintf(sendBuffer, "(lifeSteps:%d),(weeklySteps:%d),(dailySteps:%d),(uid:%s),(friendship:%d),(password:password),(difficulty:%d),(evolution:%d) \n\r", game.allSteps,game.weeklySteps,game.stepsToday, game.uid, game.mood, game.challengeGoal, game.evo);
 80053b2:	4a59      	ldr	r2, [pc, #356]	@ (8005518 <SendData+0x170>)
 80053b4:	238c      	movs	r3, #140	@ 0x8c
 80053b6:	005b      	lsls	r3, r3, #1
 80053b8:	58d4      	ldr	r4, [r2, r3]
 80053ba:	4a57      	ldr	r2, [pc, #348]	@ (8005518 <SendData+0x170>)
 80053bc:	238e      	movs	r3, #142	@ 0x8e
 80053be:	005b      	lsls	r3, r3, #1
 80053c0:	58d5      	ldr	r5, [r2, r3]
 80053c2:	4a55      	ldr	r2, [pc, #340]	@ (8005518 <SendData+0x170>)
 80053c4:	2390      	movs	r3, #144	@ 0x90
 80053c6:	005b      	lsls	r3, r3, #1
 80053c8:	58d3      	ldr	r3, [r2, r3]
 80053ca:	4698      	mov	r8, r3
 80053cc:	4a52      	ldr	r2, [pc, #328]	@ (8005518 <SendData+0x170>)
 80053ce:	7c52      	ldrb	r2, [r2, #17]
 80053d0:	0016      	movs	r6, r2
 80053d2:	4951      	ldr	r1, [pc, #324]	@ (8005518 <SendData+0x170>)
 80053d4:	2292      	movs	r2, #146	@ 0x92
 80053d6:	0052      	lsls	r2, r2, #1
 80053d8:	588a      	ldr	r2, [r1, r2]
 80053da:	494f      	ldr	r1, [pc, #316]	@ (8005518 <SendData+0x170>)
 80053dc:	7c09      	ldrb	r1, [r1, #16]
 80053de:	468c      	mov	ip, r1
 80053e0:	494e      	ldr	r1, [pc, #312]	@ (800551c <SendData+0x174>)
 80053e2:	484f      	ldr	r0, [pc, #316]	@ (8005520 <SendData+0x178>)
 80053e4:	4663      	mov	r3, ip
 80053e6:	9304      	str	r3, [sp, #16]
 80053e8:	9203      	str	r2, [sp, #12]
 80053ea:	9602      	str	r6, [sp, #8]
 80053ec:	4a4d      	ldr	r2, [pc, #308]	@ (8005524 <SendData+0x17c>)
 80053ee:	9201      	str	r2, [sp, #4]
 80053f0:	4643      	mov	r3, r8
 80053f2:	9300      	str	r3, [sp, #0]
 80053f4:	002b      	movs	r3, r5
 80053f6:	0022      	movs	r2, r4
 80053f8:	f008 f87c 	bl	800d4f4 <siprintf>
	HAL_UART_Transmit(&huart2, sendBuffer, strlen(sendBuffer), 200);
 80053fc:	4b48      	ldr	r3, [pc, #288]	@ (8005520 <SendData+0x178>)
 80053fe:	0018      	movs	r0, r3
 8005400:	f7fa fe8a 	bl	8000118 <strlen>
 8005404:	0003      	movs	r3, r0
 8005406:	b29a      	uxth	r2, r3
 8005408:	4945      	ldr	r1, [pc, #276]	@ (8005520 <SendData+0x178>)
 800540a:	4847      	ldr	r0, [pc, #284]	@ (8005528 <SendData+0x180>)
 800540c:	23c8      	movs	r3, #200	@ 0xc8
 800540e:	f006 f821 	bl	800b454 <HAL_UART_Transmit>
	for(posIndex=0; posIndex<game.numLocations; posIndex++)
 8005412:	2300      	movs	r3, #0
 8005414:	607b      	str	r3, [r7, #4]
 8005416:	e072      	b.n	80054fe <SendData+0x156>
	{       HAL_Delay(5);
 8005418:	2005      	movs	r0, #5
 800541a:	f002 f9c5 	bl	80077a8 <HAL_Delay>
		for(clrIndex=0;clrIndex<400;clrIndex++) sendBuffer[clrIndex]=0;
 800541e:	2300      	movs	r3, #0
 8005420:	603b      	str	r3, [r7, #0]
 8005422:	e007      	b.n	8005434 <SendData+0x8c>
 8005424:	4a3e      	ldr	r2, [pc, #248]	@ (8005520 <SendData+0x178>)
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	18d3      	adds	r3, r2, r3
 800542a:	2200      	movs	r2, #0
 800542c:	701a      	strb	r2, [r3, #0]
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	3301      	adds	r3, #1
 8005432:	603b      	str	r3, [r7, #0]
 8005434:	683a      	ldr	r2, [r7, #0]
 8005436:	23c8      	movs	r3, #200	@ 0xc8
 8005438:	005b      	lsls	r3, r3, #1
 800543a:	429a      	cmp	r2, r3
 800543c:	d3f2      	bcc.n	8005424 <SendData+0x7c>
		sprintf(sendBuffer, "(lat:%d.%d),(lon:%d.%d),", ((int)game.positions[posIndex].lat), abs((int)((fmod((double)game.positions[posIndex].lat, (double)1))*10000)),((int)game.positions[posIndex].lon), abs((int)((fmod((double)game.positions[posIndex].lon, (double)1))*10000)));
 800543e:	4b36      	ldr	r3, [pc, #216]	@ (8005518 <SendData+0x170>)
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	3203      	adds	r2, #3
 8005444:	00d2      	lsls	r2, r2, #3
 8005446:	58d3      	ldr	r3, [r2, r3]
 8005448:	1c18      	adds	r0, r3, #0
 800544a:	f7fc f861 	bl	8001510 <__aeabi_f2iz>
 800544e:	0006      	movs	r6, r0
 8005450:	4b31      	ldr	r3, [pc, #196]	@ (8005518 <SendData+0x170>)
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	3203      	adds	r2, #3
 8005456:	00d2      	lsls	r2, r2, #3
 8005458:	58d3      	ldr	r3, [r2, r3]
 800545a:	1c18      	adds	r0, r3, #0
 800545c:	f7fd ffc2 	bl	80033e4 <__aeabi_f2d>
 8005460:	2200      	movs	r2, #0
 8005462:	4b32      	ldr	r3, [pc, #200]	@ (800552c <SendData+0x184>)
 8005464:	f00a f9b8 	bl	800f7d8 <fmod>
 8005468:	2200      	movs	r2, #0
 800546a:	4b31      	ldr	r3, [pc, #196]	@ (8005530 <SendData+0x188>)
 800546c:	f7fd f8a6 	bl	80025bc <__aeabi_dmul>
 8005470:	0002      	movs	r2, r0
 8005472:	000b      	movs	r3, r1
 8005474:	0010      	movs	r0, r2
 8005476:	0019      	movs	r1, r3
 8005478:	f7fd ff26 	bl	80032c8 <__aeabi_d2iz>
 800547c:	0003      	movs	r3, r0
 800547e:	17da      	asrs	r2, r3, #31
 8005480:	189c      	adds	r4, r3, r2
 8005482:	4054      	eors	r4, r2
 8005484:	4a24      	ldr	r2, [pc, #144]	@ (8005518 <SendData+0x170>)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	3303      	adds	r3, #3
 800548a:	00db      	lsls	r3, r3, #3
 800548c:	18d3      	adds	r3, r2, r3
 800548e:	3304      	adds	r3, #4
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	1c18      	adds	r0, r3, #0
 8005494:	f7fc f83c 	bl	8001510 <__aeabi_f2iz>
 8005498:	0005      	movs	r5, r0
 800549a:	4a1f      	ldr	r2, [pc, #124]	@ (8005518 <SendData+0x170>)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	3303      	adds	r3, #3
 80054a0:	00db      	lsls	r3, r3, #3
 80054a2:	18d3      	adds	r3, r2, r3
 80054a4:	3304      	adds	r3, #4
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	1c18      	adds	r0, r3, #0
 80054aa:	f7fd ff9b 	bl	80033e4 <__aeabi_f2d>
 80054ae:	2200      	movs	r2, #0
 80054b0:	4b1e      	ldr	r3, [pc, #120]	@ (800552c <SendData+0x184>)
 80054b2:	f00a f991 	bl	800f7d8 <fmod>
 80054b6:	2200      	movs	r2, #0
 80054b8:	4b1d      	ldr	r3, [pc, #116]	@ (8005530 <SendData+0x188>)
 80054ba:	f7fd f87f 	bl	80025bc <__aeabi_dmul>
 80054be:	0002      	movs	r2, r0
 80054c0:	000b      	movs	r3, r1
 80054c2:	0010      	movs	r0, r2
 80054c4:	0019      	movs	r1, r3
 80054c6:	f7fd feff 	bl	80032c8 <__aeabi_d2iz>
 80054ca:	0003      	movs	r3, r0
 80054cc:	17da      	asrs	r2, r3, #31
 80054ce:	189b      	adds	r3, r3, r2
 80054d0:	4053      	eors	r3, r2
 80054d2:	4918      	ldr	r1, [pc, #96]	@ (8005534 <SendData+0x18c>)
 80054d4:	4812      	ldr	r0, [pc, #72]	@ (8005520 <SendData+0x178>)
 80054d6:	9301      	str	r3, [sp, #4]
 80054d8:	9500      	str	r5, [sp, #0]
 80054da:	0023      	movs	r3, r4
 80054dc:	0032      	movs	r2, r6
 80054de:	f008 f809 	bl	800d4f4 <siprintf>
		HAL_UART_Transmit(&huart2, sendBuffer, strlen(sendBuffer), 200);
 80054e2:	4b0f      	ldr	r3, [pc, #60]	@ (8005520 <SendData+0x178>)
 80054e4:	0018      	movs	r0, r3
 80054e6:	f7fa fe17 	bl	8000118 <strlen>
 80054ea:	0003      	movs	r3, r0
 80054ec:	b29a      	uxth	r2, r3
 80054ee:	490c      	ldr	r1, [pc, #48]	@ (8005520 <SendData+0x178>)
 80054f0:	480d      	ldr	r0, [pc, #52]	@ (8005528 <SendData+0x180>)
 80054f2:	23c8      	movs	r3, #200	@ 0xc8
 80054f4:	f005 ffae 	bl	800b454 <HAL_UART_Transmit>
	for(posIndex=0; posIndex<game.numLocations; posIndex++)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	3301      	adds	r3, #1
 80054fc:	607b      	str	r3, [r7, #4]
 80054fe:	4b06      	ldr	r3, [pc, #24]	@ (8005518 <SendData+0x170>)
 8005500:	695b      	ldr	r3, [r3, #20]
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	429a      	cmp	r2, r3
 8005506:	d387      	bcc.n	8005418 <SendData+0x70>

	}
}
 8005508:	46c0      	nop			@ (mov r8, r8)
 800550a:	46c0      	nop			@ (mov r8, r8)
 800550c:	46bd      	mov	sp, r7
 800550e:	b002      	add	sp, #8
 8005510:	bc80      	pop	{r7}
 8005512:	46b8      	mov	r8, r7
 8005514:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005516:	46c0      	nop			@ (mov r8, r8)
 8005518:	20000bdc 	.word	0x20000bdc
 800551c:	0800fd2c 	.word	0x0800fd2c
 8005520:	20000e00 	.word	0x20000e00
 8005524:	20000d04 	.word	0x20000d04
 8005528:	20001db0 	.word	0x20001db0
 800552c:	3ff00000 	.word	0x3ff00000
 8005530:	40c38800 	.word	0x40c38800
 8005534:	0800fdac 	.word	0x0800fdac

08005538 <ReceiveData>:
void ReceiveData()
{
 8005538:	b5b0      	push	{r4, r5, r7, lr}
 800553a:	4cda      	ldr	r4, [pc, #872]	@ (80058a4 <ReceiveData+0x36c>)
 800553c:	44a5      	add	sp, r4
 800553e:	af00      	add	r7, sp, #0
int rI=0;
 8005540:	2300      	movs	r3, #0
 8005542:	4ad9      	ldr	r2, [pc, #868]	@ (80058a8 <ReceiveData+0x370>)
 8005544:	18ba      	adds	r2, r7, r2
 8005546:	6013      	str	r3, [r2, #0]
while(HAL_UART_Receive(&huart2, &(syncBuffer[rI]), 1, 1000)==HAL_OK)
 8005548:	e197      	b.n	800587a <ReceiveData+0x342>
{
	if(syncBuffer[rI]&&syncBuffer[rI]=='\r')
 800554a:	4ad8      	ldr	r2, [pc, #864]	@ (80058ac <ReceiveData+0x374>)
 800554c:	49d6      	ldr	r1, [pc, #856]	@ (80058a8 <ReceiveData+0x370>)
 800554e:	187b      	adds	r3, r7, r1
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	18d3      	adds	r3, r2, r3
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d100      	bne.n	800555c <ReceiveData+0x24>
 800555a:	e188      	b.n	800586e <ReceiveData+0x336>
 800555c:	4ad3      	ldr	r2, [pc, #844]	@ (80058ac <ReceiveData+0x374>)
 800555e:	187b      	adds	r3, r7, r1
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	18d3      	adds	r3, r2, r3
 8005564:	781b      	ldrb	r3, [r3, #0]
 8005566:	2b0d      	cmp	r3, #13
 8005568:	d000      	beq.n	800556c <ReceiveData+0x34>
 800556a:	e180      	b.n	800586e <ReceiveData+0x336>
	{
	 enum { MAX_FIELDS = 255 };
	 json_t pool[ MAX_FIELDS ];
	 json_t const* parent = json_create(syncBuffer, pool, MAX_FIELDS);
 800556c:	0039      	movs	r1, r7
 800556e:	4bcf      	ldr	r3, [pc, #828]	@ (80058ac <ReceiveData+0x374>)
 8005570:	22ff      	movs	r2, #255	@ 0xff
 8005572:	0018      	movs	r0, r3
 8005574:	f001 fbb8 	bl	8006ce8 <json_create>
 8005578:	0003      	movs	r3, r0
 800557a:	49cd      	ldr	r1, [pc, #820]	@ (80058b0 <ReceiveData+0x378>)
 800557c:	187a      	adds	r2, r7, r1
 800557e:	6013      	str	r3, [r2, #0]
	 if(parent)
 8005580:	187b      	adds	r3, r7, r1
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d100      	bne.n	800558a <ReceiveData+0x52>
 8005588:	e152      	b.n	8005830 <ReceiveData+0x2f8>
	 {
		 int locI=0;
 800558a:	2300      	movs	r3, #0
 800558c:	4ac9      	ldr	r2, [pc, #804]	@ (80058b4 <ReceiveData+0x37c>)
 800558e:	18ba      	adds	r2, r7, r2
 8005590:	6013      	str	r3, [r2, #0]
		 struct latLon tempLoc;
		 char const* uidRxStr = json_getPropertyValue(parent, "uid");
 8005592:	4ac9      	ldr	r2, [pc, #804]	@ (80058b8 <ReceiveData+0x380>)
 8005594:	187b      	adds	r3, r7, r1
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	0011      	movs	r1, r2
 800559a:	0018      	movs	r0, r3
 800559c:	f001 fb40 	bl	8006c20 <json_getPropertyValue>
 80055a0:	0003      	movs	r3, r0
 80055a2:	4ac6      	ldr	r2, [pc, #792]	@ (80058bc <ReceiveData+0x384>)
 80055a4:	18ba      	adds	r2, r7, r2
 80055a6:	6013      	str	r3, [r2, #0]
		 //HAL_UART_Transmit(&huart2, json_getPropertyValue(parent, "uid"), strlen(json_getPropertyValue(parent, "uid")), 1000);
		 for(int strI =0; strI<strlen(uidRxStr); strI++) game.uid[strI]=uidRxStr[strI];
 80055a8:	2300      	movs	r3, #0
 80055aa:	4ac5      	ldr	r2, [pc, #788]	@ (80058c0 <ReceiveData+0x388>)
 80055ac:	18ba      	adds	r2, r7, r2
 80055ae:	6013      	str	r3, [r2, #0]
 80055b0:	e015      	b.n	80055de <ReceiveData+0xa6>
 80055b2:	4cc3      	ldr	r4, [pc, #780]	@ (80058c0 <ReceiveData+0x388>)
 80055b4:	193b      	adds	r3, r7, r4
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4ac0      	ldr	r2, [pc, #768]	@ (80058bc <ReceiveData+0x384>)
 80055ba:	18ba      	adds	r2, r7, r2
 80055bc:	6812      	ldr	r2, [r2, #0]
 80055be:	18d3      	adds	r3, r2, r3
 80055c0:	7818      	ldrb	r0, [r3, #0]
 80055c2:	49c0      	ldr	r1, [pc, #768]	@ (80058c4 <ReceiveData+0x38c>)
 80055c4:	2394      	movs	r3, #148	@ 0x94
 80055c6:	005b      	lsls	r3, r3, #1
 80055c8:	193a      	adds	r2, r7, r4
 80055ca:	6812      	ldr	r2, [r2, #0]
 80055cc:	188a      	adds	r2, r1, r2
 80055ce:	18d3      	adds	r3, r2, r3
 80055d0:	1c02      	adds	r2, r0, #0
 80055d2:	701a      	strb	r2, [r3, #0]
 80055d4:	193b      	adds	r3, r7, r4
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	3301      	adds	r3, #1
 80055da:	193a      	adds	r2, r7, r4
 80055dc:	6013      	str	r3, [r2, #0]
 80055de:	4bb7      	ldr	r3, [pc, #732]	@ (80058bc <ReceiveData+0x384>)
 80055e0:	18fb      	adds	r3, r7, r3
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	0018      	movs	r0, r3
 80055e6:	f7fa fd97 	bl	8000118 <strlen>
 80055ea:	0002      	movs	r2, r0
 80055ec:	4bb4      	ldr	r3, [pc, #720]	@ (80058c0 <ReceiveData+0x388>)
 80055ee:	18fb      	adds	r3, r7, r3
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d8dd      	bhi.n	80055b2 <ReceiveData+0x7a>
		 game.allSteps = (unsigned int)json_getInteger(json_getProperty(parent, "lifeSteps"));
 80055f6:	4ab4      	ldr	r2, [pc, #720]	@ (80058c8 <ReceiveData+0x390>)
 80055f8:	4cad      	ldr	r4, [pc, #692]	@ (80058b0 <ReceiveData+0x378>)
 80055fa:	193b      	adds	r3, r7, r4
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	0011      	movs	r1, r2
 8005600:	0018      	movs	r0, r3
 8005602:	f001 faea 	bl	8006bda <json_getProperty>
 8005606:	0003      	movs	r3, r0
 8005608:	0018      	movs	r0, r3
 800560a:	f7fe fe0d 	bl	8004228 <json_getInteger>
 800560e:	0002      	movs	r2, r0
 8005610:	000b      	movs	r3, r1
 8005612:	0011      	movs	r1, r2
 8005614:	4aab      	ldr	r2, [pc, #684]	@ (80058c4 <ReceiveData+0x38c>)
 8005616:	238c      	movs	r3, #140	@ 0x8c
 8005618:	005b      	lsls	r3, r3, #1
 800561a:	50d1      	str	r1, [r2, r3]
		 game.challengeGoal = (unsigned int)json_getInteger(json_getProperty(parent, "difficulty"));
 800561c:	4aab      	ldr	r2, [pc, #684]	@ (80058cc <ReceiveData+0x394>)
 800561e:	193b      	adds	r3, r7, r4
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	0011      	movs	r1, r2
 8005624:	0018      	movs	r0, r3
 8005626:	f001 fad8 	bl	8006bda <json_getProperty>
 800562a:	0003      	movs	r3, r0
 800562c:	0018      	movs	r0, r3
 800562e:	f7fe fdfb 	bl	8004228 <json_getInteger>
 8005632:	0002      	movs	r2, r0
 8005634:	000b      	movs	r3, r1
 8005636:	0011      	movs	r1, r2
 8005638:	4aa2      	ldr	r2, [pc, #648]	@ (80058c4 <ReceiveData+0x38c>)
 800563a:	2392      	movs	r3, #146	@ 0x92
 800563c:	005b      	lsls	r3, r3, #1
 800563e:	50d1      	str	r1, [r2, r3]
		 game.evo = (unsigned int)json_getInteger(json_getProperty(parent, "evolution"));
 8005640:	4aa3      	ldr	r2, [pc, #652]	@ (80058d0 <ReceiveData+0x398>)
 8005642:	193b      	adds	r3, r7, r4
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	0011      	movs	r1, r2
 8005648:	0018      	movs	r0, r3
 800564a:	f001 fac6 	bl	8006bda <json_getProperty>
 800564e:	0003      	movs	r3, r0
 8005650:	0018      	movs	r0, r3
 8005652:	f7fe fde9 	bl	8004228 <json_getInteger>
 8005656:	0002      	movs	r2, r0
 8005658:	000b      	movs	r3, r1
 800565a:	b2d2      	uxtb	r2, r2
 800565c:	4b99      	ldr	r3, [pc, #612]	@ (80058c4 <ReceiveData+0x38c>)
 800565e:	741a      	strb	r2, [r3, #16]
		 game.mood = (unsigned int)json_getInteger(json_getProperty(parent, "friendship"));
 8005660:	4a9c      	ldr	r2, [pc, #624]	@ (80058d4 <ReceiveData+0x39c>)
 8005662:	193b      	adds	r3, r7, r4
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	0011      	movs	r1, r2
 8005668:	0018      	movs	r0, r3
 800566a:	f001 fab6 	bl	8006bda <json_getProperty>
 800566e:	0003      	movs	r3, r0
 8005670:	0018      	movs	r0, r3
 8005672:	f7fe fdd9 	bl	8004228 <json_getInteger>
 8005676:	0002      	movs	r2, r0
 8005678:	000b      	movs	r3, r1
 800567a:	b2d2      	uxtb	r2, r2
 800567c:	4b91      	ldr	r3, [pc, #580]	@ (80058c4 <ReceiveData+0x38c>)
 800567e:	745a      	strb	r2, [r3, #17]
		 game.stepsToday = (unsigned int)json_getInteger(json_getProperty(parent, "dailySteps"));
 8005680:	4a95      	ldr	r2, [pc, #596]	@ (80058d8 <ReceiveData+0x3a0>)
 8005682:	193b      	adds	r3, r7, r4
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	0011      	movs	r1, r2
 8005688:	0018      	movs	r0, r3
 800568a:	f001 faa6 	bl	8006bda <json_getProperty>
 800568e:	0003      	movs	r3, r0
 8005690:	0018      	movs	r0, r3
 8005692:	f7fe fdc9 	bl	8004228 <json_getInteger>
 8005696:	0002      	movs	r2, r0
 8005698:	000b      	movs	r3, r1
 800569a:	0011      	movs	r1, r2
 800569c:	4a89      	ldr	r2, [pc, #548]	@ (80058c4 <ReceiveData+0x38c>)
 800569e:	2390      	movs	r3, #144	@ 0x90
 80056a0:	005b      	lsls	r3, r3, #1
 80056a2:	50d1      	str	r1, [r2, r3]
		 game.weeklySteps = (unsigned int) json_getInteger(json_getProperty(parent, "weeklySteps"));
 80056a4:	4a8d      	ldr	r2, [pc, #564]	@ (80058dc <ReceiveData+0x3a4>)
 80056a6:	193b      	adds	r3, r7, r4
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	0011      	movs	r1, r2
 80056ac:	0018      	movs	r0, r3
 80056ae:	f001 fa94 	bl	8006bda <json_getProperty>
 80056b2:	0003      	movs	r3, r0
 80056b4:	0018      	movs	r0, r3
 80056b6:	f7fe fdb7 	bl	8004228 <json_getInteger>
 80056ba:	0002      	movs	r2, r0
 80056bc:	000b      	movs	r3, r1
 80056be:	0011      	movs	r1, r2
 80056c0:	4a80      	ldr	r2, [pc, #512]	@ (80058c4 <ReceiveData+0x38c>)
 80056c2:	238e      	movs	r3, #142	@ 0x8e
 80056c4:	005b      	lsls	r3, r3, #1
 80056c6:	50d1      	str	r1, [r2, r3]
		 json_t const* location;
		 json_t const* locations = json_getProperty(parent, "locations");
 80056c8:	4a85      	ldr	r2, [pc, #532]	@ (80058e0 <ReceiveData+0x3a8>)
 80056ca:	193b      	adds	r3, r7, r4
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	0011      	movs	r1, r2
 80056d0:	0018      	movs	r0, r3
 80056d2:	f001 fa82 	bl	8006bda <json_getProperty>
 80056d6:	0003      	movs	r3, r0
 80056d8:	4a82      	ldr	r2, [pc, #520]	@ (80058e4 <ReceiveData+0x3ac>)
 80056da:	18b9      	adds	r1, r7, r2
 80056dc:	600b      	str	r3, [r1, #0]
		 for(location = json_getChild(locations); location; location=json_getSibling(location))
 80056de:	18bb      	adds	r3, r7, r2
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	0018      	movs	r0, r3
 80056e4:	f7fe fd96 	bl	8004214 <json_getChild>
 80056e8:	0003      	movs	r3, r0
 80056ea:	22a0      	movs	r2, #160	@ 0xa0
 80056ec:	0152      	lsls	r2, r2, #5
 80056ee:	18ba      	adds	r2, r7, r2
 80056f0:	6013      	str	r3, [r2, #0]
 80056f2:	e07a      	b.n	80057ea <ReceiveData+0x2b2>
		{
			 tempLoc.lat = (float)json_getReal(json_getProperty(location, "lat"));
 80056f4:	4a7c      	ldr	r2, [pc, #496]	@ (80058e8 <ReceiveData+0x3b0>)
 80056f6:	25a0      	movs	r5, #160	@ 0xa0
 80056f8:	016d      	lsls	r5, r5, #5
 80056fa:	197b      	adds	r3, r7, r5
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	0011      	movs	r1, r2
 8005700:	0018      	movs	r0, r3
 8005702:	f001 fa6a 	bl	8006bda <json_getProperty>
 8005706:	0003      	movs	r3, r0
 8005708:	0018      	movs	r0, r3
 800570a:	f7fe fd9f 	bl	800424c <json_getReal>
 800570e:	0002      	movs	r2, r0
 8005710:	000b      	movs	r3, r1
 8005712:	0010      	movs	r0, r2
 8005714:	0019      	movs	r1, r3
 8005716:	f7fd fead 	bl	8003474 <__aeabi_d2f>
 800571a:	1c02      	adds	r2, r0, #0
 800571c:	4c73      	ldr	r4, [pc, #460]	@ (80058ec <ReceiveData+0x3b4>)
 800571e:	193b      	adds	r3, r7, r4
 8005720:	601a      	str	r2, [r3, #0]
			 tempLoc.lon = (float)json_getReal(json_getProperty(location, "lng"));
 8005722:	4a73      	ldr	r2, [pc, #460]	@ (80058f0 <ReceiveData+0x3b8>)
 8005724:	197b      	adds	r3, r7, r5
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	0011      	movs	r1, r2
 800572a:	0018      	movs	r0, r3
 800572c:	f001 fa55 	bl	8006bda <json_getProperty>
 8005730:	0003      	movs	r3, r0
 8005732:	0018      	movs	r0, r3
 8005734:	f7fe fd8a 	bl	800424c <json_getReal>
 8005738:	0002      	movs	r2, r0
 800573a:	000b      	movs	r3, r1
 800573c:	0010      	movs	r0, r2
 800573e:	0019      	movs	r1, r3
 8005740:	f7fd fe98 	bl	8003474 <__aeabi_d2f>
 8005744:	1c02      	adds	r2, r0, #0
 8005746:	193b      	adds	r3, r7, r4
 8005748:	605a      	str	r2, [r3, #4]
			 if(fabs(tempLoc.lat)<.00001)
 800574a:	193b      	adds	r3, r7, r4
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	005b      	lsls	r3, r3, #1
 8005750:	085b      	lsrs	r3, r3, #1
 8005752:	1c18      	adds	r0, r3, #0
 8005754:	f7fd fe46 	bl	80033e4 <__aeabi_f2d>
 8005758:	4a66      	ldr	r2, [pc, #408]	@ (80058f4 <ReceiveData+0x3bc>)
 800575a:	4b67      	ldr	r3, [pc, #412]	@ (80058f8 <ReceiveData+0x3c0>)
 800575c:	f7fa fe84 	bl	8000468 <__aeabi_dcmplt>
 8005760:	1e03      	subs	r3, r0, #0
 8005762:	d027      	beq.n	80057b4 <ReceiveData+0x27c>
			 {

				 tempLoc.lat = (float)json_getReal(json_getProperty(location, "Lat"));
 8005764:	4a65      	ldr	r2, [pc, #404]	@ (80058fc <ReceiveData+0x3c4>)
 8005766:	197b      	adds	r3, r7, r5
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	0011      	movs	r1, r2
 800576c:	0018      	movs	r0, r3
 800576e:	f001 fa34 	bl	8006bda <json_getProperty>
 8005772:	0003      	movs	r3, r0
 8005774:	0018      	movs	r0, r3
 8005776:	f7fe fd69 	bl	800424c <json_getReal>
 800577a:	0002      	movs	r2, r0
 800577c:	000b      	movs	r3, r1
 800577e:	0010      	movs	r0, r2
 8005780:	0019      	movs	r1, r3
 8005782:	f7fd fe77 	bl	8003474 <__aeabi_d2f>
 8005786:	1c02      	adds	r2, r0, #0
 8005788:	193b      	adds	r3, r7, r4
 800578a:	601a      	str	r2, [r3, #0]
				 			 tempLoc.lon = (float)json_getReal(json_getProperty(location, "Lng"));
 800578c:	4a5c      	ldr	r2, [pc, #368]	@ (8005900 <ReceiveData+0x3c8>)
 800578e:	197b      	adds	r3, r7, r5
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	0011      	movs	r1, r2
 8005794:	0018      	movs	r0, r3
 8005796:	f001 fa20 	bl	8006bda <json_getProperty>
 800579a:	0003      	movs	r3, r0
 800579c:	0018      	movs	r0, r3
 800579e:	f7fe fd55 	bl	800424c <json_getReal>
 80057a2:	0002      	movs	r2, r0
 80057a4:	000b      	movs	r3, r1
 80057a6:	0010      	movs	r0, r2
 80057a8:	0019      	movs	r1, r3
 80057aa:	f7fd fe63 	bl	8003474 <__aeabi_d2f>
 80057ae:	1c02      	adds	r2, r0, #0
 80057b0:	193b      	adds	r3, r7, r4
 80057b2:	605a      	str	r2, [r3, #4]
			 }
			 game.positions[locI] = tempLoc;
 80057b4:	4a43      	ldr	r2, [pc, #268]	@ (80058c4 <ReceiveData+0x38c>)
 80057b6:	4c3f      	ldr	r4, [pc, #252]	@ (80058b4 <ReceiveData+0x37c>)
 80057b8:	193b      	adds	r3, r7, r4
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	3303      	adds	r3, #3
 80057be:	00db      	lsls	r3, r3, #3
 80057c0:	494a      	ldr	r1, [pc, #296]	@ (80058ec <ReceiveData+0x3b4>)
 80057c2:	1879      	adds	r1, r7, r1
 80057c4:	18d3      	adds	r3, r2, r3
 80057c6:	000a      	movs	r2, r1
 80057c8:	ca03      	ldmia	r2!, {r0, r1}
 80057ca:	c303      	stmia	r3!, {r0, r1}
			 locI++;
 80057cc:	193b      	adds	r3, r7, r4
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	3301      	adds	r3, #1
 80057d2:	193a      	adds	r2, r7, r4
 80057d4:	6013      	str	r3, [r2, #0]
		 for(location = json_getChild(locations); location; location=json_getSibling(location))
 80057d6:	24a0      	movs	r4, #160	@ 0xa0
 80057d8:	0164      	lsls	r4, r4, #5
 80057da:	193b      	adds	r3, r7, r4
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	0018      	movs	r0, r3
 80057e0:	f7fe fd0e 	bl	8004200 <json_getSibling>
 80057e4:	0003      	movs	r3, r0
 80057e6:	193a      	adds	r2, r7, r4
 80057e8:	6013      	str	r3, [r2, #0]
 80057ea:	23a0      	movs	r3, #160	@ 0xa0
 80057ec:	015b      	lsls	r3, r3, #5
 80057ee:	18fb      	adds	r3, r7, r3
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d000      	beq.n	80057f8 <ReceiveData+0x2c0>
 80057f6:	e77d      	b.n	80056f4 <ReceiveData+0x1bc>
		}
		game.numLocations = locI;
 80057f8:	4b2e      	ldr	r3, [pc, #184]	@ (80058b4 <ReceiveData+0x37c>)
 80057fa:	18fb      	adds	r3, r7, r3
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	4b31      	ldr	r3, [pc, #196]	@ (80058c4 <ReceiveData+0x38c>)
 8005800:	615a      	str	r2, [r3, #20]
		for(locI=locI; locI<32; locI++)
 8005802:	e010      	b.n	8005826 <ReceiveData+0x2ee>
		{
			memset(&game.positions[locI], 0, sizeof(game.positions[locI]));
 8005804:	4c2b      	ldr	r4, [pc, #172]	@ (80058b4 <ReceiveData+0x37c>)
 8005806:	193b      	adds	r3, r7, r4
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	3303      	adds	r3, #3
 800580c:	00da      	lsls	r2, r3, #3
 800580e:	4b2d      	ldr	r3, [pc, #180]	@ (80058c4 <ReceiveData+0x38c>)
 8005810:	18d3      	adds	r3, r2, r3
 8005812:	2208      	movs	r2, #8
 8005814:	2100      	movs	r1, #0
 8005816:	0018      	movs	r0, r3
 8005818:	f007 fed8 	bl	800d5cc <memset>
		for(locI=locI; locI<32; locI++)
 800581c:	193b      	adds	r3, r7, r4
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	3301      	adds	r3, #1
 8005822:	193a      	adds	r2, r7, r4
 8005824:	6013      	str	r3, [r2, #0]
 8005826:	4b23      	ldr	r3, [pc, #140]	@ (80058b4 <ReceiveData+0x37c>)
 8005828:	18fb      	adds	r3, r7, r3
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	2b1f      	cmp	r3, #31
 800582e:	dde9      	ble.n	8005804 <ReceiveData+0x2cc>
		}
		 //SendData();
	 }
     for(ii=0;ii<=rI;ii++) syncBuffer[ii]=0;
 8005830:	4b34      	ldr	r3, [pc, #208]	@ (8005904 <ReceiveData+0x3cc>)
 8005832:	2200      	movs	r2, #0
 8005834:	801a      	strh	r2, [r3, #0]
 8005836:	e00d      	b.n	8005854 <ReceiveData+0x31c>
 8005838:	4b32      	ldr	r3, [pc, #200]	@ (8005904 <ReceiveData+0x3cc>)
 800583a:	881b      	ldrh	r3, [r3, #0]
 800583c:	b29b      	uxth	r3, r3
 800583e:	001a      	movs	r2, r3
 8005840:	4b1a      	ldr	r3, [pc, #104]	@ (80058ac <ReceiveData+0x374>)
 8005842:	2100      	movs	r1, #0
 8005844:	5499      	strb	r1, [r3, r2]
 8005846:	4b2f      	ldr	r3, [pc, #188]	@ (8005904 <ReceiveData+0x3cc>)
 8005848:	881b      	ldrh	r3, [r3, #0]
 800584a:	b29b      	uxth	r3, r3
 800584c:	3301      	adds	r3, #1
 800584e:	b29a      	uxth	r2, r3
 8005850:	4b2c      	ldr	r3, [pc, #176]	@ (8005904 <ReceiveData+0x3cc>)
 8005852:	801a      	strh	r2, [r3, #0]
 8005854:	4b2b      	ldr	r3, [pc, #172]	@ (8005904 <ReceiveData+0x3cc>)
 8005856:	881b      	ldrh	r3, [r3, #0]
 8005858:	b29b      	uxth	r3, r3
 800585a:	001a      	movs	r2, r3
 800585c:	4912      	ldr	r1, [pc, #72]	@ (80058a8 <ReceiveData+0x370>)
 800585e:	187b      	adds	r3, r7, r1
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4293      	cmp	r3, r2
 8005864:	dae8      	bge.n	8005838 <ReceiveData+0x300>
     rI=0;
 8005866:	2300      	movs	r3, #0
 8005868:	187a      	adds	r2, r7, r1
 800586a:	6013      	str	r3, [r2, #0]
     break;
 800586c:	e014      	b.n	8005898 <ReceiveData+0x360>
	}
	else
	{
		rI++;
 800586e:	4a0e      	ldr	r2, [pc, #56]	@ (80058a8 <ReceiveData+0x370>)
 8005870:	18bb      	adds	r3, r7, r2
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	3301      	adds	r3, #1
 8005876:	18ba      	adds	r2, r7, r2
 8005878:	6013      	str	r3, [r2, #0]
while(HAL_UART_Receive(&huart2, &(syncBuffer[rI]), 1, 1000)==HAL_OK)
 800587a:	4b0b      	ldr	r3, [pc, #44]	@ (80058a8 <ReceiveData+0x370>)
 800587c:	18fb      	adds	r3, r7, r3
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	4b0a      	ldr	r3, [pc, #40]	@ (80058ac <ReceiveData+0x374>)
 8005882:	18d1      	adds	r1, r2, r3
 8005884:	23fa      	movs	r3, #250	@ 0xfa
 8005886:	009b      	lsls	r3, r3, #2
 8005888:	481f      	ldr	r0, [pc, #124]	@ (8005908 <ReceiveData+0x3d0>)
 800588a:	2201      	movs	r2, #1
 800588c:	f005 fe86 	bl	800b59c <HAL_UART_Receive>
 8005890:	1e03      	subs	r3, r0, #0
 8005892:	d100      	bne.n	8005896 <ReceiveData+0x35e>
 8005894:	e659      	b.n	800554a <ReceiveData+0x12>
	}
}

}
 8005896:	46c0      	nop			@ (mov r8, r8)
 8005898:	46c0      	nop			@ (mov r8, r8)
 800589a:	46bd      	mov	sp, r7
 800589c:	4b1b      	ldr	r3, [pc, #108]	@ (800590c <ReceiveData+0x3d4>)
 800589e:	449d      	add	sp, r3
 80058a0:	bdb0      	pop	{r4, r5, r7, pc}
 80058a2:	46c0      	nop			@ (mov r8, r8)
 80058a4:	ffffebf0 	.word	0xffffebf0
 80058a8:	0000140c 	.word	0x0000140c
 80058ac:	20000f90 	.word	0x20000f90
 80058b0:	000013fc 	.word	0x000013fc
 80058b4:	00001408 	.word	0x00001408
 80058b8:	0800fdc8 	.word	0x0800fdc8
 80058bc:	000013f8 	.word	0x000013f8
 80058c0:	00001404 	.word	0x00001404
 80058c4:	20000bdc 	.word	0x20000bdc
 80058c8:	0800fdcc 	.word	0x0800fdcc
 80058cc:	0800fdd8 	.word	0x0800fdd8
 80058d0:	0800fde4 	.word	0x0800fde4
 80058d4:	0800fdf0 	.word	0x0800fdf0
 80058d8:	0800fdfc 	.word	0x0800fdfc
 80058dc:	0800fe08 	.word	0x0800fe08
 80058e0:	0800fe14 	.word	0x0800fe14
 80058e4:	000013f4 	.word	0x000013f4
 80058e8:	0800fe20 	.word	0x0800fe20
 80058ec:	000013ec 	.word	0x000013ec
 80058f0:	0800fe24 	.word	0x0800fe24
 80058f4:	88e368f1 	.word	0x88e368f1
 80058f8:	3ee4f8b5 	.word	0x3ee4f8b5
 80058fc:	0800fe28 	.word	0x0800fe28
 8005900:	0800fe2c 	.word	0x0800fe2c
 8005904:	20000d2c 	.word	0x20000d2c
 8005908:	20001db0 	.word	0x20001db0
 800590c:	00001410 	.word	0x00001410

08005910 <GetLatLon>:
void GetLatLon()
{
 8005910:	b5b0      	push	{r4, r5, r7, lr}
 8005912:	b08a      	sub	sp, #40	@ 0x28
 8005914:	af00      	add	r7, sp, #0
	int gpsI=0;
 8005916:	2300      	movs	r3, #0
 8005918:	627b      	str	r3, [r7, #36]	@ 0x24
	struct latLon pos;
	struct latLon tempPos;
	double checkW;
	double checkH;
	int posCheckI=0;
 800591a:	2300      	movs	r3, #0
 800591c:	623b      	str	r3, [r7, #32]
	//HAL_UART_Recieve();
	while(HAL_UART_Receive(&huart1, &(buffer[gpsI]), 1, 1000)==HAL_OK||1)
 800591e:	e121      	b.n	8005b64 <GetLatLon+0x254>
			  		  	{
							if(buffer[gpsI]=='$')
							{
								for(ii=0;ii<=127;ii++) buffer[ii]=0;
 8005920:	4b9c      	ldr	r3, [pc, #624]	@ (8005b94 <GetLatLon+0x284>)
 8005922:	2200      	movs	r2, #0
 8005924:	801a      	strh	r2, [r3, #0]
 8005926:	e00d      	b.n	8005944 <GetLatLon+0x34>
 8005928:	4b9a      	ldr	r3, [pc, #616]	@ (8005b94 <GetLatLon+0x284>)
 800592a:	881b      	ldrh	r3, [r3, #0]
 800592c:	b29b      	uxth	r3, r3
 800592e:	001a      	movs	r2, r3
 8005930:	4b99      	ldr	r3, [pc, #612]	@ (8005b98 <GetLatLon+0x288>)
 8005932:	2100      	movs	r1, #0
 8005934:	5499      	strb	r1, [r3, r2]
 8005936:	4b97      	ldr	r3, [pc, #604]	@ (8005b94 <GetLatLon+0x284>)
 8005938:	881b      	ldrh	r3, [r3, #0]
 800593a:	b29b      	uxth	r3, r3
 800593c:	3301      	adds	r3, #1
 800593e:	b29a      	uxth	r2, r3
 8005940:	4b94      	ldr	r3, [pc, #592]	@ (8005b94 <GetLatLon+0x284>)
 8005942:	801a      	strh	r2, [r3, #0]
 8005944:	4b93      	ldr	r3, [pc, #588]	@ (8005b94 <GetLatLon+0x284>)
 8005946:	881b      	ldrh	r3, [r3, #0]
 8005948:	b29b      	uxth	r3, r3
 800594a:	2b7f      	cmp	r3, #127	@ 0x7f
 800594c:	d9ec      	bls.n	8005928 <GetLatLon+0x18>
								buffer[0]='$';
 800594e:	4b92      	ldr	r3, [pc, #584]	@ (8005b98 <GetLatLon+0x288>)
 8005950:	2224      	movs	r2, #36	@ 0x24
 8005952:	701a      	strb	r2, [r3, #0]
								gpsI=0;
 8005954:	2300      	movs	r3, #0
 8005956:	627b      	str	r3, [r7, #36]	@ 0x24
							}//HAL_UART_Transmit(&huart2, buffer[i], 1, 1000);
			  			  if(buffer[gpsI]=='\n')
 8005958:	4a8f      	ldr	r2, [pc, #572]	@ (8005b98 <GetLatLon+0x288>)
 800595a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800595c:	18d3      	adds	r3, r2, r3
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	2b0a      	cmp	r3, #10
 8005962:	d000      	beq.n	8005966 <GetLatLon+0x56>
 8005964:	e0fb      	b.n	8005b5e <GetLatLon+0x24e>
			  				    	  else return;
			  				      }

			  				      break;
			  				  }*/
			  				if(minmea_parse_gga(&ggaStruct, &(buffer))){
 8005966:	4a8c      	ldr	r2, [pc, #560]	@ (8005b98 <GetLatLon+0x288>)
 8005968:	4b8c      	ldr	r3, [pc, #560]	@ (8005b9c <GetLatLon+0x28c>)
 800596a:	0011      	movs	r1, r2
 800596c:	0018      	movs	r0, r3
 800596e:	f000 fd9f 	bl	80064b0 <minmea_parse_gga>
 8005972:	1e03      	subs	r3, r0, #0
 8005974:	d100      	bne.n	8005978 <GetLatLon+0x68>
 8005976:	e0db      	b.n	8005b30 <GetLatLon+0x220>
			  							  				      pos.lat = minmea_tocoord(&ggaStruct.latitude);
 8005978:	4b89      	ldr	r3, [pc, #548]	@ (8005ba0 <GetLatLon+0x290>)
 800597a:	0018      	movs	r0, r3
 800597c:	f7fe fbfc 	bl	8004178 <minmea_tocoord>
 8005980:	1c02      	adds	r2, r0, #0
 8005982:	2408      	movs	r4, #8
 8005984:	193b      	adds	r3, r7, r4
 8005986:	601a      	str	r2, [r3, #0]
			  							  				      pos.lon = minmea_tocoord(&ggaStruct.longitude);
 8005988:	4b86      	ldr	r3, [pc, #536]	@ (8005ba4 <GetLatLon+0x294>)
 800598a:	0018      	movs	r0, r3
 800598c:	f7fe fbf4 	bl	8004178 <minmea_tocoord>
 8005990:	1c02      	adds	r2, r0, #0
 8005992:	193b      	adds	r3, r7, r4
 8005994:	605a      	str	r2, [r3, #4]
			  							  				      game.time = ggaStruct.time;
 8005996:	4b84      	ldr	r3, [pc, #528]	@ (8005ba8 <GetLatLon+0x298>)
 8005998:	4a80      	ldr	r2, [pc, #512]	@ (8005b9c <GetLatLon+0x28c>)
 800599a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800599c:	c313      	stmia	r3!, {r0, r1, r4}
 800599e:	6812      	ldr	r2, [r2, #0]
 80059a0:	601a      	str	r2, [r3, #0]
			  							  				      frameGot=1;
 80059a2:	4b82      	ldr	r3, [pc, #520]	@ (8005bac <GetLatLon+0x29c>)
 80059a4:	2201      	movs	r2, #1
 80059a6:	701a      	strb	r2, [r3, #0]
			  							  				  posCheckI=0;
 80059a8:	2300      	movs	r3, #0
 80059aa:	623b      	str	r3, [r7, #32]
			  							  				  for(posCheckI=0;posCheckI<game.numLocations;posCheckI++)
 80059ac:	2300      	movs	r3, #0
 80059ae:	623b      	str	r3, [r7, #32]
 80059b0:	e0a0      	b.n	8005af4 <GetLatLon+0x1e4>
			  							  				  			  				      {

			  							  				  			  				    	  tempPos = game.positions[posCheckI];
 80059b2:	003a      	movs	r2, r7
 80059b4:	497c      	ldr	r1, [pc, #496]	@ (8005ba8 <GetLatLon+0x298>)
 80059b6:	6a3b      	ldr	r3, [r7, #32]
 80059b8:	3303      	adds	r3, #3
 80059ba:	00db      	lsls	r3, r3, #3
 80059bc:	18cb      	adds	r3, r1, r3
 80059be:	cb03      	ldmia	r3!, {r0, r1}
 80059c0:	c203      	stmia	r2!, {r0, r1}
			  							  				  			  				    	  if((tempPos.lat>.000001f||tempPos.lat<-.000001f)&&(tempPos.lon>.000001f||tempPos.lon<-.000001f)&&(pos.lat>.000001f||pos.lat<-.000001f)&&(pos.lat>.000001f||pos.lat<-.000001f)){
 80059c2:	003b      	movs	r3, r7
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	497a      	ldr	r1, [pc, #488]	@ (8005bb0 <GetLatLon+0x2a0>)
 80059c8:	1c18      	adds	r0, r3, #0
 80059ca:	f7fa fd9b 	bl	8000504 <__aeabi_fcmpgt>
 80059ce:	1e03      	subs	r3, r0, #0
 80059d0:	d108      	bne.n	80059e4 <GetLatLon+0xd4>
 80059d2:	003b      	movs	r3, r7
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4977      	ldr	r1, [pc, #476]	@ (8005bb4 <GetLatLon+0x2a4>)
 80059d8:	1c18      	adds	r0, r3, #0
 80059da:	f7fa fd7f 	bl	80004dc <__aeabi_fcmplt>
 80059de:	1e03      	subs	r3, r0, #0
 80059e0:	d100      	bne.n	80059e4 <GetLatLon+0xd4>
			  							  				  			  				    	  checkW = fabs(tempPos.lat-pos.lat);
			  							  				  			  				    	  checkH = fabs(tempPos.lon-pos.lon);
			  							  				  			  				    	  if(sqrt((checkW*checkW)+(checkH*checkH))<gpsThreshold) return;

			  							  				  			  				    	  }
			  							  				  			  				    	  else return;
 80059e2:	e0d3      	b.n	8005b8c <GetLatLon+0x27c>
			  							  				  			  				    	  if((tempPos.lat>.000001f||tempPos.lat<-.000001f)&&(tempPos.lon>.000001f||tempPos.lon<-.000001f)&&(pos.lat>.000001f||pos.lat<-.000001f)&&(pos.lat>.000001f||pos.lat<-.000001f)){
 80059e4:	003b      	movs	r3, r7
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	4971      	ldr	r1, [pc, #452]	@ (8005bb0 <GetLatLon+0x2a0>)
 80059ea:	1c18      	adds	r0, r3, #0
 80059ec:	f7fa fd8a 	bl	8000504 <__aeabi_fcmpgt>
 80059f0:	1e03      	subs	r3, r0, #0
 80059f2:	d108      	bne.n	8005a06 <GetLatLon+0xf6>
 80059f4:	003b      	movs	r3, r7
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	496e      	ldr	r1, [pc, #440]	@ (8005bb4 <GetLatLon+0x2a4>)
 80059fa:	1c18      	adds	r0, r3, #0
 80059fc:	f7fa fd6e 	bl	80004dc <__aeabi_fcmplt>
 8005a00:	1e03      	subs	r3, r0, #0
 8005a02:	d100      	bne.n	8005a06 <GetLatLon+0xf6>
			  							  				  			  				    	  else return;
 8005a04:	e0c2      	b.n	8005b8c <GetLatLon+0x27c>
			  							  				  			  				    	  if((tempPos.lat>.000001f||tempPos.lat<-.000001f)&&(tempPos.lon>.000001f||tempPos.lon<-.000001f)&&(pos.lat>.000001f||pos.lat<-.000001f)&&(pos.lat>.000001f||pos.lat<-.000001f)){
 8005a06:	2408      	movs	r4, #8
 8005a08:	193b      	adds	r3, r7, r4
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4968      	ldr	r1, [pc, #416]	@ (8005bb0 <GetLatLon+0x2a0>)
 8005a0e:	1c18      	adds	r0, r3, #0
 8005a10:	f7fa fd78 	bl	8000504 <__aeabi_fcmpgt>
 8005a14:	1e03      	subs	r3, r0, #0
 8005a16:	d108      	bne.n	8005a2a <GetLatLon+0x11a>
 8005a18:	193b      	adds	r3, r7, r4
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4965      	ldr	r1, [pc, #404]	@ (8005bb4 <GetLatLon+0x2a4>)
 8005a1e:	1c18      	adds	r0, r3, #0
 8005a20:	f7fa fd5c 	bl	80004dc <__aeabi_fcmplt>
 8005a24:	1e03      	subs	r3, r0, #0
 8005a26:	d100      	bne.n	8005a2a <GetLatLon+0x11a>
			  							  				  			  				    	  else return;
 8005a28:	e0b0      	b.n	8005b8c <GetLatLon+0x27c>
			  							  				  			  				    	  if((tempPos.lat>.000001f||tempPos.lat<-.000001f)&&(tempPos.lon>.000001f||tempPos.lon<-.000001f)&&(pos.lat>.000001f||pos.lat<-.000001f)&&(pos.lat>.000001f||pos.lat<-.000001f)){
 8005a2a:	2408      	movs	r4, #8
 8005a2c:	193b      	adds	r3, r7, r4
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	495f      	ldr	r1, [pc, #380]	@ (8005bb0 <GetLatLon+0x2a0>)
 8005a32:	1c18      	adds	r0, r3, #0
 8005a34:	f7fa fd66 	bl	8000504 <__aeabi_fcmpgt>
 8005a38:	1e03      	subs	r3, r0, #0
 8005a3a:	d108      	bne.n	8005a4e <GetLatLon+0x13e>
 8005a3c:	193b      	adds	r3, r7, r4
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	495c      	ldr	r1, [pc, #368]	@ (8005bb4 <GetLatLon+0x2a4>)
 8005a42:	1c18      	adds	r0, r3, #0
 8005a44:	f7fa fd4a 	bl	80004dc <__aeabi_fcmplt>
 8005a48:	1e03      	subs	r3, r0, #0
 8005a4a:	d100      	bne.n	8005a4e <GetLatLon+0x13e>
			  							  				  			  				    	  else return;
 8005a4c:	e09e      	b.n	8005b8c <GetLatLon+0x27c>
			  							  				  			  				    	  checkW = fabs(tempPos.lat-pos.lat);
 8005a4e:	003b      	movs	r3, r7
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	2408      	movs	r4, #8
 8005a54:	193b      	adds	r3, r7, r4
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	1c19      	adds	r1, r3, #0
 8005a5a:	1c10      	adds	r0, r2, #0
 8005a5c:	f7fb fbb4 	bl	80011c8 <__aeabi_fsub>
 8005a60:	1c03      	adds	r3, r0, #0
 8005a62:	005b      	lsls	r3, r3, #1
 8005a64:	085b      	lsrs	r3, r3, #1
 8005a66:	1c18      	adds	r0, r3, #0
 8005a68:	f7fd fcbc 	bl	80033e4 <__aeabi_f2d>
 8005a6c:	0002      	movs	r2, r0
 8005a6e:	000b      	movs	r3, r1
 8005a70:	61ba      	str	r2, [r7, #24]
 8005a72:	61fb      	str	r3, [r7, #28]
			  							  				  			  				    	  checkH = fabs(tempPos.lon-pos.lon);
 8005a74:	003b      	movs	r3, r7
 8005a76:	685a      	ldr	r2, [r3, #4]
 8005a78:	193b      	adds	r3, r7, r4
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	1c19      	adds	r1, r3, #0
 8005a7e:	1c10      	adds	r0, r2, #0
 8005a80:	f7fb fba2 	bl	80011c8 <__aeabi_fsub>
 8005a84:	1c03      	adds	r3, r0, #0
 8005a86:	005b      	lsls	r3, r3, #1
 8005a88:	085b      	lsrs	r3, r3, #1
 8005a8a:	1c18      	adds	r0, r3, #0
 8005a8c:	f7fd fcaa 	bl	80033e4 <__aeabi_f2d>
 8005a90:	0002      	movs	r2, r0
 8005a92:	000b      	movs	r3, r1
 8005a94:	613a      	str	r2, [r7, #16]
 8005a96:	617b      	str	r3, [r7, #20]
			  							  				  			  				    	  if(sqrt((checkW*checkW)+(checkH*checkH))<gpsThreshold) return;
 8005a98:	69ba      	ldr	r2, [r7, #24]
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	69b8      	ldr	r0, [r7, #24]
 8005a9e:	69f9      	ldr	r1, [r7, #28]
 8005aa0:	f7fc fd8c 	bl	80025bc <__aeabi_dmul>
 8005aa4:	0002      	movs	r2, r0
 8005aa6:	000b      	movs	r3, r1
 8005aa8:	0014      	movs	r4, r2
 8005aaa:	001d      	movs	r5, r3
 8005aac:	693a      	ldr	r2, [r7, #16]
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	6938      	ldr	r0, [r7, #16]
 8005ab2:	6979      	ldr	r1, [r7, #20]
 8005ab4:	f7fc fd82 	bl	80025bc <__aeabi_dmul>
 8005ab8:	0002      	movs	r2, r0
 8005aba:	000b      	movs	r3, r1
 8005abc:	0020      	movs	r0, r4
 8005abe:	0029      	movs	r1, r5
 8005ac0:	f7fb fdd4 	bl	800166c <__aeabi_dadd>
 8005ac4:	0002      	movs	r2, r0
 8005ac6:	000b      	movs	r3, r1
 8005ac8:	0010      	movs	r0, r2
 8005aca:	0019      	movs	r1, r3
 8005acc:	f009 fead 	bl	800f82a <sqrt>
 8005ad0:	0004      	movs	r4, r0
 8005ad2:	000d      	movs	r5, r1
 8005ad4:	4b38      	ldr	r3, [pc, #224]	@ (8005bb8 <GetLatLon+0x2a8>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	1c18      	adds	r0, r3, #0
 8005ada:	f7fd fc83 	bl	80033e4 <__aeabi_f2d>
 8005ade:	0002      	movs	r2, r0
 8005ae0:	000b      	movs	r3, r1
 8005ae2:	0020      	movs	r0, r4
 8005ae4:	0029      	movs	r1, r5
 8005ae6:	f7fa fcbf 	bl	8000468 <__aeabi_dcmplt>
 8005aea:	1e03      	subs	r3, r0, #0
 8005aec:	d14b      	bne.n	8005b86 <GetLatLon+0x276>
			  							  				  for(posCheckI=0;posCheckI<game.numLocations;posCheckI++)
 8005aee:	6a3b      	ldr	r3, [r7, #32]
 8005af0:	3301      	adds	r3, #1
 8005af2:	623b      	str	r3, [r7, #32]
 8005af4:	4b2c      	ldr	r3, [pc, #176]	@ (8005ba8 <GetLatLon+0x298>)
 8005af6:	695a      	ldr	r2, [r3, #20]
 8005af8:	6a3b      	ldr	r3, [r7, #32]
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d900      	bls.n	8005b00 <GetLatLon+0x1f0>
 8005afe:	e758      	b.n	80059b2 <GetLatLon+0xa2>

			  							  				  			  				      }
			  							  				game.positions[game.numLocations] = pos;
 8005b00:	4b29      	ldr	r3, [pc, #164]	@ (8005ba8 <GetLatLon+0x298>)
 8005b02:	695b      	ldr	r3, [r3, #20]
 8005b04:	4a28      	ldr	r2, [pc, #160]	@ (8005ba8 <GetLatLon+0x298>)
 8005b06:	3303      	adds	r3, #3
 8005b08:	00db      	lsls	r3, r3, #3
 8005b0a:	2108      	movs	r1, #8
 8005b0c:	1879      	adds	r1, r7, r1
 8005b0e:	18d3      	adds	r3, r2, r3
 8005b10:	000a      	movs	r2, r1
 8005b12:	ca03      	ldmia	r2!, {r0, r1}
 8005b14:	c303      	stmia	r3!, {r0, r1}
			  							  				game.numLocations++;
 8005b16:	4b24      	ldr	r3, [pc, #144]	@ (8005ba8 <GetLatLon+0x298>)
 8005b18:	695b      	ldr	r3, [r3, #20]
 8005b1a:	1c5a      	adds	r2, r3, #1
 8005b1c:	4b22      	ldr	r3, [pc, #136]	@ (8005ba8 <GetLatLon+0x298>)
 8005b1e:	615a      	str	r2, [r3, #20]
			  							  				if(game.numLocations>31)game.numLocations=0;
 8005b20:	4b21      	ldr	r3, [pc, #132]	@ (8005ba8 <GetLatLon+0x298>)
 8005b22:	695b      	ldr	r3, [r3, #20]
 8005b24:	2b1f      	cmp	r3, #31
 8005b26:	d930      	bls.n	8005b8a <GetLatLon+0x27a>
 8005b28:	4b1f      	ldr	r3, [pc, #124]	@ (8005ba8 <GetLatLon+0x298>)
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	615a      	str	r2, [r3, #20]
			  							  				      break;
 8005b2e:	e02c      	b.n	8005b8a <GetLatLon+0x27a>
			  							  				  }

			  				for(ii=0;ii<=127;ii++) buffer[ii]=0;
 8005b30:	4b18      	ldr	r3, [pc, #96]	@ (8005b94 <GetLatLon+0x284>)
 8005b32:	2200      	movs	r2, #0
 8005b34:	801a      	strh	r2, [r3, #0]
 8005b36:	e00d      	b.n	8005b54 <GetLatLon+0x244>
 8005b38:	4b16      	ldr	r3, [pc, #88]	@ (8005b94 <GetLatLon+0x284>)
 8005b3a:	881b      	ldrh	r3, [r3, #0]
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	001a      	movs	r2, r3
 8005b40:	4b15      	ldr	r3, [pc, #84]	@ (8005b98 <GetLatLon+0x288>)
 8005b42:	2100      	movs	r1, #0
 8005b44:	5499      	strb	r1, [r3, r2]
 8005b46:	4b13      	ldr	r3, [pc, #76]	@ (8005b94 <GetLatLon+0x284>)
 8005b48:	881b      	ldrh	r3, [r3, #0]
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	3301      	adds	r3, #1
 8005b4e:	b29a      	uxth	r2, r3
 8005b50:	4b10      	ldr	r3, [pc, #64]	@ (8005b94 <GetLatLon+0x284>)
 8005b52:	801a      	strh	r2, [r3, #0]
 8005b54:	4b0f      	ldr	r3, [pc, #60]	@ (8005b94 <GetLatLon+0x284>)
 8005b56:	881b      	ldrh	r3, [r3, #0]
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	2b7f      	cmp	r3, #127	@ 0x7f
 8005b5c:	d9ec      	bls.n	8005b38 <GetLatLon+0x228>
			  				  }
			  			  gpsI++;
 8005b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b60:	3301      	adds	r3, #1
 8005b62:	627b      	str	r3, [r7, #36]	@ 0x24
	while(HAL_UART_Receive(&huart1, &(buffer[gpsI]), 1, 1000)==HAL_OK||1)
 8005b64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b66:	4b0c      	ldr	r3, [pc, #48]	@ (8005b98 <GetLatLon+0x288>)
 8005b68:	18d1      	adds	r1, r2, r3
 8005b6a:	23fa      	movs	r3, #250	@ 0xfa
 8005b6c:	009b      	lsls	r3, r3, #2
 8005b6e:	4813      	ldr	r0, [pc, #76]	@ (8005bbc <GetLatLon+0x2ac>)
 8005b70:	2201      	movs	r2, #1
 8005b72:	f005 fd13 	bl	800b59c <HAL_UART_Receive>
							if(buffer[gpsI]=='$')
 8005b76:	4a08      	ldr	r2, [pc, #32]	@ (8005b98 <GetLatLon+0x288>)
 8005b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b7a:	18d3      	adds	r3, r2, r3
 8005b7c:	781b      	ldrb	r3, [r3, #0]
 8005b7e:	2b24      	cmp	r3, #36	@ 0x24
 8005b80:	d000      	beq.n	8005b84 <GetLatLon+0x274>
 8005b82:	e6e9      	b.n	8005958 <GetLatLon+0x48>
 8005b84:	e6cc      	b.n	8005920 <GetLatLon+0x10>
			  							  				  			  				    	  if(sqrt((checkW*checkW)+(checkH*checkH))<gpsThreshold) return;
 8005b86:	46c0      	nop			@ (mov r8, r8)
 8005b88:	e000      	b.n	8005b8c <GetLatLon+0x27c>
			  							  				      break;
 8005b8a:	46c0      	nop			@ (mov r8, r8)


			  		  	}


}
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	b00a      	add	sp, #40	@ 0x28
 8005b90:	bdb0      	pop	{r4, r5, r7, pc}
 8005b92:	46c0      	nop			@ (mov r8, r8)
 8005b94:	20000d2c 	.word	0x20000d2c
 8005b98:	20000d80 	.word	0x20000d80
 8005b9c:	20000d30 	.word	0x20000d30
 8005ba0:	20000d40 	.word	0x20000d40
 8005ba4:	20000d48 	.word	0x20000d48
 8005ba8:	20000bdc 	.word	0x20000bdc
 8005bac:	20000d7e 	.word	0x20000d7e
 8005bb0:	358637bd 	.word	0x358637bd
 8005bb4:	b58637bd 	.word	0xb58637bd
 8005bb8:	20001b70 	.word	0x20001b70
 8005bbc:	20001d1c 	.word	0x20001d1c

08005bc0 <GetJustLatLon>:
struct latLon GetJustLatLon()
{
 8005bc0:	b590      	push	{r4, r7, lr}
 8005bc2:	b089      	sub	sp, #36	@ 0x24
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
	int gpsI=0;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	61fb      	str	r3, [r7, #28]
	struct latLon pos;
	struct latLon tempPos;
	double checkW;
	double checkH;
	int posCheckI=0;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	61bb      	str	r3, [r7, #24]
	//HAL_UART_Recieve();
	while(HAL_UART_Receive(&huart1, &(buffer[gpsI]), 1, 1000)==HAL_OK||1)
 8005bd0:	e057      	b.n	8005c82 <GetJustLatLon+0xc2>
			  		  	{
							if(buffer[gpsI]=='$')
							{
								for(ii=0;ii<=127;ii++) buffer[ii]=0;
 8005bd2:	4b36      	ldr	r3, [pc, #216]	@ (8005cac <GetJustLatLon+0xec>)
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	801a      	strh	r2, [r3, #0]
 8005bd8:	e00d      	b.n	8005bf6 <GetJustLatLon+0x36>
 8005bda:	4b34      	ldr	r3, [pc, #208]	@ (8005cac <GetJustLatLon+0xec>)
 8005bdc:	881b      	ldrh	r3, [r3, #0]
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	001a      	movs	r2, r3
 8005be2:	4b33      	ldr	r3, [pc, #204]	@ (8005cb0 <GetJustLatLon+0xf0>)
 8005be4:	2100      	movs	r1, #0
 8005be6:	5499      	strb	r1, [r3, r2]
 8005be8:	4b30      	ldr	r3, [pc, #192]	@ (8005cac <GetJustLatLon+0xec>)
 8005bea:	881b      	ldrh	r3, [r3, #0]
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	3301      	adds	r3, #1
 8005bf0:	b29a      	uxth	r2, r3
 8005bf2:	4b2e      	ldr	r3, [pc, #184]	@ (8005cac <GetJustLatLon+0xec>)
 8005bf4:	801a      	strh	r2, [r3, #0]
 8005bf6:	4b2d      	ldr	r3, [pc, #180]	@ (8005cac <GetJustLatLon+0xec>)
 8005bf8:	881b      	ldrh	r3, [r3, #0]
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	2b7f      	cmp	r3, #127	@ 0x7f
 8005bfe:	d9ec      	bls.n	8005bda <GetJustLatLon+0x1a>
								buffer[0]='$';
 8005c00:	4b2b      	ldr	r3, [pc, #172]	@ (8005cb0 <GetJustLatLon+0xf0>)
 8005c02:	2224      	movs	r2, #36	@ 0x24
 8005c04:	701a      	strb	r2, [r3, #0]
								gpsI=0;
 8005c06:	2300      	movs	r3, #0
 8005c08:	61fb      	str	r3, [r7, #28]
							}//HAL_UART_Transmit(&huart2, buffer[i], 1, 1000);
			  			  if(buffer[gpsI]=='\n')
 8005c0a:	4a29      	ldr	r2, [pc, #164]	@ (8005cb0 <GetJustLatLon+0xf0>)
 8005c0c:	69fb      	ldr	r3, [r7, #28]
 8005c0e:	18d3      	adds	r3, r2, r3
 8005c10:	781b      	ldrb	r3, [r3, #0]
 8005c12:	2b0a      	cmp	r3, #10
 8005c14:	d132      	bne.n	8005c7c <GetJustLatLon+0xbc>
			  				    	  else return;
			  				      }

			  				      break;
			  				  }*/
			  				if(minmea_parse_gga(&ggaStruct, &(buffer))){
 8005c16:	4a26      	ldr	r2, [pc, #152]	@ (8005cb0 <GetJustLatLon+0xf0>)
 8005c18:	4b26      	ldr	r3, [pc, #152]	@ (8005cb4 <GetJustLatLon+0xf4>)
 8005c1a:	0011      	movs	r1, r2
 8005c1c:	0018      	movs	r0, r3
 8005c1e:	f000 fc47 	bl	80064b0 <minmea_parse_gga>
 8005c22:	1e03      	subs	r3, r0, #0
 8005c24:	d013      	beq.n	8005c4e <GetJustLatLon+0x8e>
			  							  				      pos.lat = minmea_tocoord(&ggaStruct.latitude);
 8005c26:	4b24      	ldr	r3, [pc, #144]	@ (8005cb8 <GetJustLatLon+0xf8>)
 8005c28:	0018      	movs	r0, r3
 8005c2a:	f7fe faa5 	bl	8004178 <minmea_tocoord>
 8005c2e:	1c02      	adds	r2, r0, #0
 8005c30:	2410      	movs	r4, #16
 8005c32:	193b      	adds	r3, r7, r4
 8005c34:	601a      	str	r2, [r3, #0]
			  							  				      pos.lon = minmea_tocoord(&ggaStruct.longitude);
 8005c36:	4b21      	ldr	r3, [pc, #132]	@ (8005cbc <GetJustLatLon+0xfc>)
 8005c38:	0018      	movs	r0, r3
 8005c3a:	f7fe fa9d 	bl	8004178 <minmea_tocoord>
 8005c3e:	1c02      	adds	r2, r0, #0
 8005c40:	193b      	adds	r3, r7, r4
 8005c42:	605a      	str	r2, [r3, #4]
			  							  				      return pos;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	193a      	adds	r2, r7, r4
 8005c48:	ca03      	ldmia	r2!, {r0, r1}
 8005c4a:	c303      	stmia	r3!, {r0, r1}
 8005c4c:	e029      	b.n	8005ca2 <GetJustLatLon+0xe2>
			  							  				      break;
			  							  				  }

			  				for(ii=0;ii<=127;ii++) buffer[ii]=0;
 8005c4e:	4b17      	ldr	r3, [pc, #92]	@ (8005cac <GetJustLatLon+0xec>)
 8005c50:	2200      	movs	r2, #0
 8005c52:	801a      	strh	r2, [r3, #0]
 8005c54:	e00d      	b.n	8005c72 <GetJustLatLon+0xb2>
 8005c56:	4b15      	ldr	r3, [pc, #84]	@ (8005cac <GetJustLatLon+0xec>)
 8005c58:	881b      	ldrh	r3, [r3, #0]
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	001a      	movs	r2, r3
 8005c5e:	4b14      	ldr	r3, [pc, #80]	@ (8005cb0 <GetJustLatLon+0xf0>)
 8005c60:	2100      	movs	r1, #0
 8005c62:	5499      	strb	r1, [r3, r2]
 8005c64:	4b11      	ldr	r3, [pc, #68]	@ (8005cac <GetJustLatLon+0xec>)
 8005c66:	881b      	ldrh	r3, [r3, #0]
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	3301      	adds	r3, #1
 8005c6c:	b29a      	uxth	r2, r3
 8005c6e:	4b0f      	ldr	r3, [pc, #60]	@ (8005cac <GetJustLatLon+0xec>)
 8005c70:	801a      	strh	r2, [r3, #0]
 8005c72:	4b0e      	ldr	r3, [pc, #56]	@ (8005cac <GetJustLatLon+0xec>)
 8005c74:	881b      	ldrh	r3, [r3, #0]
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	2b7f      	cmp	r3, #127	@ 0x7f
 8005c7a:	d9ec      	bls.n	8005c56 <GetJustLatLon+0x96>
			  				  }
			  			  gpsI++;
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	3301      	adds	r3, #1
 8005c80:	61fb      	str	r3, [r7, #28]
	while(HAL_UART_Receive(&huart1, &(buffer[gpsI]), 1, 1000)==HAL_OK||1)
 8005c82:	69fa      	ldr	r2, [r7, #28]
 8005c84:	4b0a      	ldr	r3, [pc, #40]	@ (8005cb0 <GetJustLatLon+0xf0>)
 8005c86:	18d1      	adds	r1, r2, r3
 8005c88:	23fa      	movs	r3, #250	@ 0xfa
 8005c8a:	009b      	lsls	r3, r3, #2
 8005c8c:	480c      	ldr	r0, [pc, #48]	@ (8005cc0 <GetJustLatLon+0x100>)
 8005c8e:	2201      	movs	r2, #1
 8005c90:	f005 fc84 	bl	800b59c <HAL_UART_Receive>
							if(buffer[gpsI]=='$')
 8005c94:	4a06      	ldr	r2, [pc, #24]	@ (8005cb0 <GetJustLatLon+0xf0>)
 8005c96:	69fb      	ldr	r3, [r7, #28]
 8005c98:	18d3      	adds	r3, r2, r3
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	2b24      	cmp	r3, #36	@ 0x24
 8005c9e:	d1b4      	bne.n	8005c0a <GetJustLatLon+0x4a>
 8005ca0:	e797      	b.n	8005bd2 <GetJustLatLon+0x12>


			  		  	}


}
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	b009      	add	sp, #36	@ 0x24
 8005ca8:	bd90      	pop	{r4, r7, pc}
 8005caa:	46c0      	nop			@ (mov r8, r8)
 8005cac:	20000d2c 	.word	0x20000d2c
 8005cb0:	20000d80 	.word	0x20000d80
 8005cb4:	20000d30 	.word	0x20000d30
 8005cb8:	20000d40 	.word	0x20000d40
 8005cbc:	20000d48 	.word	0x20000d48
 8005cc0:	20001d1c 	.word	0x20001d1c

08005cc4 <HAL_RTC_AlarmAEventCallback>:
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8005cc4:	b590      	push	{r4, r7, lr}
 8005cc6:	b091      	sub	sp, #68	@ 0x44
 8005cc8:	af04      	add	r7, sp, #16
 8005cca:	6078      	str	r0, [r7, #4]
  RTC_AlarmTypeDef sAlarm;
  HAL_RTC_GetAlarm(hrtc,&sAlarm,RTC_ALARM_A,FORMAT_BIN);
 8005ccc:	2380      	movs	r3, #128	@ 0x80
 8005cce:	005a      	lsls	r2, r3, #1
 8005cd0:	2408      	movs	r4, #8
 8005cd2:	1939      	adds	r1, r7, r4
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	f003 ff10 	bl	8009afc <HAL_RTC_GetAlarm>
  if(sAlarm.AlarmTime.Seconds>58) {
 8005cdc:	0022      	movs	r2, r4
 8005cde:	18bb      	adds	r3, r7, r2
 8005ce0:	789b      	ldrb	r3, [r3, #2]
 8005ce2:	2b3a      	cmp	r3, #58	@ 0x3a
 8005ce4:	d903      	bls.n	8005cee <HAL_RTC_AlarmAEventCallback+0x2a>
    sAlarm.AlarmTime.Seconds=0;
 8005ce6:	18bb      	adds	r3, r7, r2
 8005ce8:	2200      	movs	r2, #0
 8005cea:	709a      	strb	r2, [r3, #2]
 8005cec:	e006      	b.n	8005cfc <HAL_RTC_AlarmAEventCallback+0x38>
  }else{
    sAlarm.AlarmTime.Seconds=sAlarm.AlarmTime.Seconds+1;
 8005cee:	2108      	movs	r1, #8
 8005cf0:	187b      	adds	r3, r7, r1
 8005cf2:	789b      	ldrb	r3, [r3, #2]
 8005cf4:	3301      	adds	r3, #1
 8005cf6:	b2da      	uxtb	r2, r3
 8005cf8:	187b      	adds	r3, r7, r1
 8005cfa:	709a      	strb	r2, [r3, #2]
  }
    while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){}
 8005cfc:	46c0      	nop			@ (mov r8, r8)
 8005cfe:	2308      	movs	r3, #8
 8005d00:	18f9      	adds	r1, r7, r3
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2200      	movs	r2, #0
 8005d06:	0018      	movs	r0, r3
 8005d08:	f003 fdb8 	bl	800987c <HAL_RTC_SetAlarm_IT>
 8005d0c:	1e03      	subs	r3, r0, #0
 8005d0e:	d1f6      	bne.n	8005cfe <HAL_RTC_AlarmAEventCallback+0x3a>
  	  drawString(30, 30, "testTime", BLACK, GREEN, 1, 1);
 8005d10:	4a07      	ldr	r2, [pc, #28]	@ (8005d30 <HAL_RTC_AlarmAEventCallback+0x6c>)
 8005d12:	2301      	movs	r3, #1
 8005d14:	9302      	str	r3, [sp, #8]
 8005d16:	2301      	movs	r3, #1
 8005d18:	9301      	str	r3, [sp, #4]
 8005d1a:	4b06      	ldr	r3, [pc, #24]	@ (8005d34 <HAL_RTC_AlarmAEventCallback+0x70>)
 8005d1c:	9300      	str	r3, [sp, #0]
 8005d1e:	2300      	movs	r3, #0
 8005d20:	211e      	movs	r1, #30
 8005d22:	201e      	movs	r0, #30
 8005d24:	f7fd fd12 	bl	800374c <drawString>
}
 8005d28:	46c0      	nop			@ (mov r8, r8)
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	b00d      	add	sp, #52	@ 0x34
 8005d2e:	bd90      	pop	{r4, r7, pc}
 8005d30:	0800fe30 	.word	0x0800fe30
 8005d34:	ffffe007 	.word	0xffffe007

08005d38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005d3c:	b672      	cpsid	i
}
 8005d3e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005d40:	46c0      	nop			@ (mov r8, r8)
 8005d42:	e7fd      	b.n	8005d40 <Error_Handler+0x8>

08005d44 <minmea_isfield>:
        return false;

    return true;
}

static inline bool minmea_isfield(char c) {
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b082      	sub	sp, #8
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	0002      	movs	r2, r0
 8005d4c:	1dfb      	adds	r3, r7, #7
 8005d4e:	701a      	strb	r2, [r3, #0]
    return isprint((unsigned char) c) && c != ',' && c != '*';
 8005d50:	1dfb      	adds	r3, r7, #7
 8005d52:	781b      	ldrb	r3, [r3, #0]
 8005d54:	1c5a      	adds	r2, r3, #1
 8005d56:	4b0d      	ldr	r3, [pc, #52]	@ (8005d8c <minmea_isfield+0x48>)
 8005d58:	18d3      	adds	r3, r2, r3
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	001a      	movs	r2, r3
 8005d5e:	2397      	movs	r3, #151	@ 0x97
 8005d60:	4013      	ands	r3, r2
 8005d62:	d009      	beq.n	8005d78 <minmea_isfield+0x34>
 8005d64:	1dfb      	adds	r3, r7, #7
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	2b2c      	cmp	r3, #44	@ 0x2c
 8005d6a:	d005      	beq.n	8005d78 <minmea_isfield+0x34>
 8005d6c:	1dfb      	adds	r3, r7, #7
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d72:	d001      	beq.n	8005d78 <minmea_isfield+0x34>
 8005d74:	2301      	movs	r3, #1
 8005d76:	e000      	b.n	8005d7a <minmea_isfield+0x36>
 8005d78:	2300      	movs	r3, #0
 8005d7a:	1c1a      	adds	r2, r3, #0
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	4013      	ands	r3, r2
 8005d80:	b2db      	uxtb	r3, r3
}
 8005d82:	0018      	movs	r0, r3
 8005d84:	46bd      	mov	sp, r7
 8005d86:	b002      	add	sp, #8
 8005d88:	bd80      	pop	{r7, pc}
 8005d8a:	46c0      	nop			@ (mov r8, r8)
 8005d8c:	080107e0 	.word	0x080107e0

08005d90 <minmea_scan>:

bool minmea_scan(const char *sentence, const char *format, ...)
{
 8005d90:	b40e      	push	{r1, r2, r3}
 8005d92:	b5b0      	push	{r4, r5, r7, lr}
 8005d94:	b0a7      	sub	sp, #156	@ 0x9c
 8005d96:	af00      	add	r7, sp, #0
 8005d98:	6078      	str	r0, [r7, #4]
    bool result = false;
 8005d9a:	2397      	movs	r3, #151	@ 0x97
 8005d9c:	18fb      	adds	r3, r7, r3
 8005d9e:	2200      	movs	r2, #0
 8005da0:	701a      	strb	r2, [r3, #0]
    bool optional = false;
 8005da2:	2396      	movs	r3, #150	@ 0x96
 8005da4:	18fb      	adds	r3, r7, r3
 8005da6:	2200      	movs	r2, #0
 8005da8:	701a      	strb	r2, [r3, #0]
    va_list ap;
    va_start(ap, format);
 8005daa:	23a8      	movs	r3, #168	@ 0xa8
 8005dac:	2208      	movs	r2, #8
 8005dae:	189b      	adds	r3, r3, r2
 8005db0:	19db      	adds	r3, r3, r7
 8005db2:	62fb      	str	r3, [r7, #44]	@ 0x2c

    const char *field = sentence;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2290      	movs	r2, #144	@ 0x90
 8005db8:	18ba      	adds	r2, r7, r2
 8005dba:	6013      	str	r3, [r2, #0]
        } else { \
            field = NULL; \
        } \
    } while (0)

    while (*format) {
 8005dbc:	e345      	b.n	800644a <minmea_scan+0x6ba>
        char type = *format++;
 8005dbe:	21a4      	movs	r1, #164	@ 0xa4
 8005dc0:	2008      	movs	r0, #8
 8005dc2:	180b      	adds	r3, r1, r0
 8005dc4:	19db      	adds	r3, r3, r7
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	1c5a      	adds	r2, r3, #1
 8005dca:	1809      	adds	r1, r1, r0
 8005dcc:	19c9      	adds	r1, r1, r7
 8005dce:	600a      	str	r2, [r1, #0]
 8005dd0:	2143      	movs	r1, #67	@ 0x43
 8005dd2:	187a      	adds	r2, r7, r1
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	7013      	strb	r3, [r2, #0]

        if (type == ';') {
 8005dd8:	187b      	adds	r3, r7, r1
 8005dda:	781b      	ldrb	r3, [r3, #0]
 8005ddc:	2b3b      	cmp	r3, #59	@ 0x3b
 8005dde:	d104      	bne.n	8005dea <minmea_scan+0x5a>
            // All further fields are optional.
            optional = true;
 8005de0:	2396      	movs	r3, #150	@ 0x96
 8005de2:	18fb      	adds	r3, r7, r3
 8005de4:	2201      	movs	r2, #1
 8005de6:	701a      	strb	r2, [r3, #0]
            continue;
 8005de8:	e32f      	b.n	800644a <minmea_scan+0x6ba>
        }

        if (!field && !optional) {
 8005dea:	2390      	movs	r3, #144	@ 0x90
 8005dec:	18fb      	adds	r3, r7, r3
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d108      	bne.n	8005e06 <minmea_scan+0x76>
 8005df4:	2396      	movs	r3, #150	@ 0x96
 8005df6:	18fb      	adds	r3, r7, r3
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	4053      	eors	r3, r2
 8005dfe:	b2db      	uxtb	r3, r3
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d000      	beq.n	8005e06 <minmea_scan+0x76>
 8005e04:	e32f      	b.n	8006466 <minmea_scan+0x6d6>
            // Field requested but we ran out if input. Bail out.
            goto parse_error;
        }

        switch (type) {
 8005e06:	2343      	movs	r3, #67	@ 0x43
 8005e08:	18fb      	adds	r3, r7, r3
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	3b44      	subs	r3, #68	@ 0x44
 8005e0e:	2b30      	cmp	r3, #48	@ 0x30
 8005e10:	d900      	bls.n	8005e14 <minmea_scan+0x84>
 8005e12:	e32a      	b.n	800646a <minmea_scan+0x6da>
 8005e14:	009a      	lsls	r2, r3, #2
 8005e16:	4bbd      	ldr	r3, [pc, #756]	@ (800610c <minmea_scan+0x37c>)
 8005e18:	18d3      	adds	r3, r2, r3
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	469f      	mov	pc, r3
            case 'c': { // Single character field (char).
                char value = '\0';
 8005e1e:	258f      	movs	r5, #143	@ 0x8f
 8005e20:	197b      	adds	r3, r7, r5
 8005e22:	2200      	movs	r2, #0
 8005e24:	701a      	strb	r2, [r3, #0]

                if (field && minmea_isfield(*field))
 8005e26:	2490      	movs	r4, #144	@ 0x90
 8005e28:	193b      	adds	r3, r7, r4
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d00c      	beq.n	8005e4a <minmea_scan+0xba>
 8005e30:	193b      	adds	r3, r7, r4
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	0018      	movs	r0, r3
 8005e38:	f7ff ff84 	bl	8005d44 <minmea_isfield>
 8005e3c:	1e03      	subs	r3, r0, #0
 8005e3e:	d004      	beq.n	8005e4a <minmea_scan+0xba>
                    value = *field;
 8005e40:	197b      	adds	r3, r7, r5
 8005e42:	193a      	adds	r2, r7, r4
 8005e44:	6812      	ldr	r2, [r2, #0]
 8005e46:	7812      	ldrb	r2, [r2, #0]
 8005e48:	701a      	strb	r2, [r3, #0]

                *va_arg(ap, char *) = value;
 8005e4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e4c:	1d1a      	adds	r2, r3, #4
 8005e4e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	228f      	movs	r2, #143	@ 0x8f
 8005e54:	18ba      	adds	r2, r7, r2
 8005e56:	7812      	ldrb	r2, [r2, #0]
 8005e58:	701a      	strb	r2, [r3, #0]
            } break;
 8005e5a:	e2db      	b.n	8006414 <minmea_scan+0x684>

            case 'd': { // Single character direction field (int).
                int value = 0;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	2288      	movs	r2, #136	@ 0x88
 8005e60:	18ba      	adds	r2, r7, r2
 8005e62:	6013      	str	r3, [r2, #0]

                if (field && minmea_isfield(*field)) {
 8005e64:	2490      	movs	r4, #144	@ 0x90
 8005e66:	193b      	adds	r3, r7, r4
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d022      	beq.n	8005eb4 <minmea_scan+0x124>
 8005e6e:	193b      	adds	r3, r7, r4
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	0018      	movs	r0, r3
 8005e76:	f7ff ff65 	bl	8005d44 <minmea_isfield>
 8005e7a:	1e03      	subs	r3, r0, #0
 8005e7c:	d01a      	beq.n	8005eb4 <minmea_scan+0x124>
                    switch (*field) {
 8005e7e:	193b      	adds	r3, r7, r4
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	781b      	ldrb	r3, [r3, #0]
 8005e84:	2b57      	cmp	r3, #87	@ 0x57
 8005e86:	d00f      	beq.n	8005ea8 <minmea_scan+0x118>
 8005e88:	dd00      	ble.n	8005e8c <minmea_scan+0xfc>
 8005e8a:	e2f0      	b.n	800646e <minmea_scan+0x6de>
 8005e8c:	2b53      	cmp	r3, #83	@ 0x53
 8005e8e:	d00b      	beq.n	8005ea8 <minmea_scan+0x118>
 8005e90:	dd00      	ble.n	8005e94 <minmea_scan+0x104>
 8005e92:	e2ec      	b.n	800646e <minmea_scan+0x6de>
 8005e94:	2b45      	cmp	r3, #69	@ 0x45
 8005e96:	d002      	beq.n	8005e9e <minmea_scan+0x10e>
 8005e98:	2b4e      	cmp	r3, #78	@ 0x4e
 8005e9a:	d000      	beq.n	8005e9e <minmea_scan+0x10e>
 8005e9c:	e2e7      	b.n	800646e <minmea_scan+0x6de>
                        case 'N':
                        case 'E':
                            value = 1;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	2288      	movs	r2, #136	@ 0x88
 8005ea2:	18ba      	adds	r2, r7, r2
 8005ea4:	6013      	str	r3, [r2, #0]
                            break;
 8005ea6:	e005      	b.n	8005eb4 <minmea_scan+0x124>
                        case 'S':
                        case 'W':
                            value = -1;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	425b      	negs	r3, r3
 8005eac:	2288      	movs	r2, #136	@ 0x88
 8005eae:	18ba      	adds	r2, r7, r2
 8005eb0:	6013      	str	r3, [r2, #0]
                            break;
 8005eb2:	46c0      	nop			@ (mov r8, r8)
                        default:
                            goto parse_error;
                    }
                }

                *va_arg(ap, int *) = value;
 8005eb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eb6:	1d1a      	adds	r2, r3, #4
 8005eb8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	2288      	movs	r2, #136	@ 0x88
 8005ebe:	18ba      	adds	r2, r7, r2
 8005ec0:	6812      	ldr	r2, [r2, #0]
 8005ec2:	601a      	str	r2, [r3, #0]
            } break;
 8005ec4:	e2a6      	b.n	8006414 <minmea_scan+0x684>

            case 'f': { // Fractional value with scale (struct minmea_float).
                int sign = 0;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	2284      	movs	r2, #132	@ 0x84
 8005eca:	18ba      	adds	r2, r7, r2
 8005ecc:	6013      	str	r3, [r2, #0]
                int_least32_t value = -1;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	425b      	negs	r3, r3
 8005ed2:	2280      	movs	r2, #128	@ 0x80
 8005ed4:	18ba      	adds	r2, r7, r2
 8005ed6:	6013      	str	r3, [r2, #0]
                int_least32_t scale = 0;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	67fb      	str	r3, [r7, #124]	@ 0x7c

                if (field) {
 8005edc:	2390      	movs	r3, #144	@ 0x90
 8005ede:	18fb      	adds	r3, r7, r3
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d100      	bne.n	8005ee8 <minmea_scan+0x158>
 8005ee6:	e088      	b.n	8005ffa <minmea_scan+0x26a>
                    while (minmea_isfield(*field)) {
 8005ee8:	e07d      	b.n	8005fe6 <minmea_scan+0x256>
                        if (*field == '+' && !sign && value == -1) {
 8005eea:	2390      	movs	r3, #144	@ 0x90
 8005eec:	18fb      	adds	r3, r7, r3
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	2b2b      	cmp	r3, #43	@ 0x2b
 8005ef4:	d10d      	bne.n	8005f12 <minmea_scan+0x182>
 8005ef6:	2284      	movs	r2, #132	@ 0x84
 8005ef8:	18bb      	adds	r3, r7, r2
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d108      	bne.n	8005f12 <minmea_scan+0x182>
 8005f00:	2380      	movs	r3, #128	@ 0x80
 8005f02:	18fb      	adds	r3, r7, r3
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	3301      	adds	r3, #1
 8005f08:	d103      	bne.n	8005f12 <minmea_scan+0x182>
                            sign = 1;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	18ba      	adds	r2, r7, r2
 8005f0e:	6013      	str	r3, [r2, #0]
 8005f10:	e063      	b.n	8005fda <minmea_scan+0x24a>
                        } else if (*field == '-' && !sign && value == -1) {
 8005f12:	2390      	movs	r3, #144	@ 0x90
 8005f14:	18fb      	adds	r3, r7, r3
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	781b      	ldrb	r3, [r3, #0]
 8005f1a:	2b2d      	cmp	r3, #45	@ 0x2d
 8005f1c:	d10e      	bne.n	8005f3c <minmea_scan+0x1ac>
 8005f1e:	2284      	movs	r2, #132	@ 0x84
 8005f20:	18bb      	adds	r3, r7, r2
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d109      	bne.n	8005f3c <minmea_scan+0x1ac>
 8005f28:	2380      	movs	r3, #128	@ 0x80
 8005f2a:	18fb      	adds	r3, r7, r3
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	3301      	adds	r3, #1
 8005f30:	d104      	bne.n	8005f3c <minmea_scan+0x1ac>
                            sign = -1;
 8005f32:	2301      	movs	r3, #1
 8005f34:	425b      	negs	r3, r3
 8005f36:	18ba      	adds	r2, r7, r2
 8005f38:	6013      	str	r3, [r2, #0]
 8005f3a:	e04e      	b.n	8005fda <minmea_scan+0x24a>
                        } else if (isdigit((unsigned char) *field)) {
 8005f3c:	2190      	movs	r1, #144	@ 0x90
 8005f3e:	187b      	adds	r3, r7, r1
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	1c5a      	adds	r2, r3, #1
 8005f46:	4b72      	ldr	r3, [pc, #456]	@ (8006110 <minmea_scan+0x380>)
 8005f48:	18d3      	adds	r3, r2, r3
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	001a      	movs	r2, r3
 8005f4e:	2304      	movs	r3, #4
 8005f50:	4013      	ands	r3, r2
 8005f52:	d035      	beq.n	8005fc0 <minmea_scan+0x230>
                            int digit = *field - '0';
 8005f54:	187b      	adds	r3, r7, r1
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	781b      	ldrb	r3, [r3, #0]
 8005f5a:	3b30      	subs	r3, #48	@ 0x30
 8005f5c:	63bb      	str	r3, [r7, #56]	@ 0x38
                            if (value == -1)
 8005f5e:	2280      	movs	r2, #128	@ 0x80
 8005f60:	18bb      	adds	r3, r7, r2
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	3301      	adds	r3, #1
 8005f66:	d102      	bne.n	8005f6e <minmea_scan+0x1de>
                                value = 0;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	18ba      	adds	r2, r7, r2
 8005f6c:	6013      	str	r3, [r2, #0]
                            if (value > (INT_LEAST32_MAX-digit) / 10) {
 8005f6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f70:	4a68      	ldr	r2, [pc, #416]	@ (8006114 <minmea_scan+0x384>)
 8005f72:	1ad3      	subs	r3, r2, r3
 8005f74:	210a      	movs	r1, #10
 8005f76:	0018      	movs	r0, r3
 8005f78:	f7fa f974 	bl	8000264 <__divsi3>
 8005f7c:	0003      	movs	r3, r0
 8005f7e:	001a      	movs	r2, r3
 8005f80:	2380      	movs	r3, #128	@ 0x80
 8005f82:	18fb      	adds	r3, r7, r3
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4293      	cmp	r3, r2
 8005f88:	dd04      	ble.n	8005f94 <minmea_scan+0x204>
                                /* we ran out of bits, what do we do? */
                                if (scale) {
 8005f8a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d100      	bne.n	8005f92 <minmea_scan+0x202>
 8005f90:	e26f      	b.n	8006472 <minmea_scan+0x6e2>
                                    /* truncate extra precision */
                                    break;
 8005f92:	e032      	b.n	8005ffa <minmea_scan+0x26a>
                                } else {
                                    /* integer overflow. bail out. */
                                    goto parse_error;
                                }
                            }
                            value = (10 * value) + digit;
 8005f94:	2180      	movs	r1, #128	@ 0x80
 8005f96:	187b      	adds	r3, r7, r1
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	0013      	movs	r3, r2
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	189b      	adds	r3, r3, r2
 8005fa0:	005b      	lsls	r3, r3, #1
 8005fa2:	001a      	movs	r2, r3
 8005fa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fa6:	189b      	adds	r3, r3, r2
 8005fa8:	187a      	adds	r2, r7, r1
 8005faa:	6013      	str	r3, [r2, #0]
                            if (scale)
 8005fac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d013      	beq.n	8005fda <minmea_scan+0x24a>
                                scale *= 10;
 8005fb2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005fb4:	0013      	movs	r3, r2
 8005fb6:	009b      	lsls	r3, r3, #2
 8005fb8:	189b      	adds	r3, r3, r2
 8005fba:	005b      	lsls	r3, r3, #1
 8005fbc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005fbe:	e00c      	b.n	8005fda <minmea_scan+0x24a>
                        } else if (*field == '.' && scale == 0) {
 8005fc0:	2390      	movs	r3, #144	@ 0x90
 8005fc2:	18fb      	adds	r3, r7, r3
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	2b2e      	cmp	r3, #46	@ 0x2e
 8005fca:	d000      	beq.n	8005fce <minmea_scan+0x23e>
 8005fcc:	e253      	b.n	8006476 <minmea_scan+0x6e6>
 8005fce:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d000      	beq.n	8005fd6 <minmea_scan+0x246>
 8005fd4:	e24f      	b.n	8006476 <minmea_scan+0x6e6>
                            scale = 1;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	67fb      	str	r3, [r7, #124]	@ 0x7c
                        } else {
                            goto parse_error;
                        }
                        field++;
 8005fda:	2290      	movs	r2, #144	@ 0x90
 8005fdc:	18bb      	adds	r3, r7, r2
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	3301      	adds	r3, #1
 8005fe2:	18ba      	adds	r2, r7, r2
 8005fe4:	6013      	str	r3, [r2, #0]
                    while (minmea_isfield(*field)) {
 8005fe6:	2390      	movs	r3, #144	@ 0x90
 8005fe8:	18fb      	adds	r3, r7, r3
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	781b      	ldrb	r3, [r3, #0]
 8005fee:	0018      	movs	r0, r3
 8005ff0:	f7ff fea8 	bl	8005d44 <minmea_isfield>
 8005ff4:	1e03      	subs	r3, r0, #0
 8005ff6:	d000      	beq.n	8005ffa <minmea_scan+0x26a>
 8005ff8:	e777      	b.n	8005eea <minmea_scan+0x15a>
                    }
                }

                if ((sign || scale) && value == -1)
 8005ffa:	2384      	movs	r3, #132	@ 0x84
 8005ffc:	18fb      	adds	r3, r7, r3
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d102      	bne.n	800600a <minmea_scan+0x27a>
 8006004:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006006:	2b00      	cmp	r3, #0
 8006008:	d005      	beq.n	8006016 <minmea_scan+0x286>
 800600a:	2380      	movs	r3, #128	@ 0x80
 800600c:	18fb      	adds	r3, r7, r3
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	3301      	adds	r3, #1
 8006012:	d100      	bne.n	8006016 <minmea_scan+0x286>
 8006014:	e231      	b.n	800647a <minmea_scan+0x6ea>
                    goto parse_error;

                if (value == -1) {
 8006016:	2280      	movs	r2, #128	@ 0x80
 8006018:	18bb      	adds	r3, r7, r2
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	3301      	adds	r3, #1
 800601e:	d105      	bne.n	800602c <minmea_scan+0x29c>
                    /* No digits were scanned. */
                    value = 0;
 8006020:	2300      	movs	r3, #0
 8006022:	18ba      	adds	r2, r7, r2
 8006024:	6013      	str	r3, [r2, #0]
                    scale = 0;
 8006026:	2300      	movs	r3, #0
 8006028:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800602a:	e004      	b.n	8006036 <minmea_scan+0x2a6>
                } else if (scale == 0) {
 800602c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800602e:	2b00      	cmp	r3, #0
 8006030:	d101      	bne.n	8006036 <minmea_scan+0x2a6>
                    /* No decimal point. */
                    scale = 1;
 8006032:	2301      	movs	r3, #1
 8006034:	67fb      	str	r3, [r7, #124]	@ 0x7c
                }
                if (sign)
 8006036:	2284      	movs	r2, #132	@ 0x84
 8006038:	18bb      	adds	r3, r7, r2
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d007      	beq.n	8006050 <minmea_scan+0x2c0>
                    value *= sign;
 8006040:	2180      	movs	r1, #128	@ 0x80
 8006042:	187b      	adds	r3, r7, r1
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	18ba      	adds	r2, r7, r2
 8006048:	6812      	ldr	r2, [r2, #0]
 800604a:	4353      	muls	r3, r2
 800604c:	187a      	adds	r2, r7, r1
 800604e:	6013      	str	r3, [r2, #0]

                *va_arg(ap, struct minmea_float *) = (struct minmea_float) {value, scale};
 8006050:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006052:	1d1a      	adds	r2, r3, #4
 8006054:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	2280      	movs	r2, #128	@ 0x80
 800605a:	18ba      	adds	r2, r7, r2
 800605c:	6812      	ldr	r2, [r2, #0]
 800605e:	601a      	str	r2, [r3, #0]
 8006060:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006062:	605a      	str	r2, [r3, #4]
            } break;
 8006064:	e1d6      	b.n	8006414 <minmea_scan+0x684>

            case 'i': { // Integer value, default 0 (int).
                int value = 0;
 8006066:	2300      	movs	r3, #0
 8006068:	67bb      	str	r3, [r7, #120]	@ 0x78

                if (field) {
 800606a:	2290      	movs	r2, #144	@ 0x90
 800606c:	18bb      	adds	r3, r7, r2
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d011      	beq.n	8006098 <minmea_scan+0x308>
                    char *endptr;
                    value = strtol(field, &endptr, 10);
 8006074:	2320      	movs	r3, #32
 8006076:	18f9      	adds	r1, r7, r3
 8006078:	18bb      	adds	r3, r7, r2
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	220a      	movs	r2, #10
 800607e:	0018      	movs	r0, r3
 8006080:	f007 f8b8 	bl	800d1f4 <strtol>
 8006084:	0003      	movs	r3, r0
 8006086:	67bb      	str	r3, [r7, #120]	@ 0x78
                    if (minmea_isfield(*endptr))
 8006088:	6a3b      	ldr	r3, [r7, #32]
 800608a:	781b      	ldrb	r3, [r3, #0]
 800608c:	0018      	movs	r0, r3
 800608e:	f7ff fe59 	bl	8005d44 <minmea_isfield>
 8006092:	1e03      	subs	r3, r0, #0
 8006094:	d000      	beq.n	8006098 <minmea_scan+0x308>
 8006096:	e1f2      	b.n	800647e <minmea_scan+0x6ee>
                        goto parse_error;
                }

                *va_arg(ap, int *) = value;
 8006098:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800609a:	1d1a      	adds	r2, r3, #4
 800609c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80060a2:	601a      	str	r2, [r3, #0]
            } break;
 80060a4:	e1b6      	b.n	8006414 <minmea_scan+0x684>

            case 's': { // String value (char *).
                char *buf = va_arg(ap, char *);
 80060a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060a8:	1d1a      	adds	r2, r3, #4
 80060aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	677b      	str	r3, [r7, #116]	@ 0x74

                if (field) {
 80060b0:	2390      	movs	r3, #144	@ 0x90
 80060b2:	18fb      	adds	r3, r7, r3
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d014      	beq.n	80060e4 <minmea_scan+0x354>
                    while (minmea_isfield(*field))
 80060ba:	e00a      	b.n	80060d2 <minmea_scan+0x342>
                        *buf++ = *field++;
 80060bc:	2190      	movs	r1, #144	@ 0x90
 80060be:	187b      	adds	r3, r7, r1
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	1c53      	adds	r3, r2, #1
 80060c4:	1879      	adds	r1, r7, r1
 80060c6:	600b      	str	r3, [r1, #0]
 80060c8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80060ca:	1c59      	adds	r1, r3, #1
 80060cc:	6779      	str	r1, [r7, #116]	@ 0x74
 80060ce:	7812      	ldrb	r2, [r2, #0]
 80060d0:	701a      	strb	r2, [r3, #0]
                    while (minmea_isfield(*field))
 80060d2:	2390      	movs	r3, #144	@ 0x90
 80060d4:	18fb      	adds	r3, r7, r3
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	781b      	ldrb	r3, [r3, #0]
 80060da:	0018      	movs	r0, r3
 80060dc:	f7ff fe32 	bl	8005d44 <minmea_isfield>
 80060e0:	1e03      	subs	r3, r0, #0
 80060e2:	d1eb      	bne.n	80060bc <minmea_scan+0x32c>
                }

                *buf = '\0';
 80060e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80060e6:	2200      	movs	r2, #0
 80060e8:	701a      	strb	r2, [r3, #0]
            } break;
 80060ea:	e193      	b.n	8006414 <minmea_scan+0x684>

            case 't': { // NMEA talker+sentence identifier (char *).
                // This field is always mandatory.
                if (!field)
 80060ec:	2290      	movs	r2, #144	@ 0x90
 80060ee:	18bb      	adds	r3, r7, r2
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d100      	bne.n	80060f8 <minmea_scan+0x368>
 80060f6:	e1c4      	b.n	8006482 <minmea_scan+0x6f2>
                    goto parse_error;

                if (field[0] != '$')
 80060f8:	18bb      	adds	r3, r7, r2
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	781b      	ldrb	r3, [r3, #0]
 80060fe:	2b24      	cmp	r3, #36	@ 0x24
 8006100:	d000      	beq.n	8006104 <minmea_scan+0x374>
 8006102:	e1c0      	b.n	8006486 <minmea_scan+0x6f6>
                    goto parse_error;
                for (int i=0; i<5; i++)
 8006104:	2300      	movs	r3, #0
 8006106:	673b      	str	r3, [r7, #112]	@ 0x70
 8006108:	e01c      	b.n	8006144 <minmea_scan+0x3b4>
 800610a:	46c0      	nop			@ (mov r8, r8)
 800610c:	08010520 	.word	0x08010520
 8006110:	080107e0 	.word	0x080107e0
 8006114:	7fffffff 	.word	0x7fffffff
                    if (!minmea_isfield(field[1+i]))
 8006118:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800611a:	3301      	adds	r3, #1
 800611c:	001a      	movs	r2, r3
 800611e:	2390      	movs	r3, #144	@ 0x90
 8006120:	18fb      	adds	r3, r7, r3
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	189b      	adds	r3, r3, r2
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	0018      	movs	r0, r3
 800612a:	f7ff fe0b 	bl	8005d44 <minmea_isfield>
 800612e:	0003      	movs	r3, r0
 8006130:	001a      	movs	r2, r3
 8006132:	2301      	movs	r3, #1
 8006134:	4053      	eors	r3, r2
 8006136:	b2db      	uxtb	r3, r3
 8006138:	2b00      	cmp	r3, #0
 800613a:	d000      	beq.n	800613e <minmea_scan+0x3ae>
 800613c:	e1a5      	b.n	800648a <minmea_scan+0x6fa>
                for (int i=0; i<5; i++)
 800613e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006140:	3301      	adds	r3, #1
 8006142:	673b      	str	r3, [r7, #112]	@ 0x70
 8006144:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006146:	2b04      	cmp	r3, #4
 8006148:	dde6      	ble.n	8006118 <minmea_scan+0x388>
                        goto parse_error;

                char *buf = va_arg(ap, char *);
 800614a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800614c:	1d1a      	adds	r2, r3, #4
 800614e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	63fb      	str	r3, [r7, #60]	@ 0x3c
                memcpy(buf, field+1, 5);
 8006154:	2390      	movs	r3, #144	@ 0x90
 8006156:	18fb      	adds	r3, r7, r3
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	1c59      	adds	r1, r3, #1
 800615c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800615e:	2205      	movs	r2, #5
 8006160:	0018      	movs	r0, r3
 8006162:	f007 fac8 	bl	800d6f6 <memcpy>
                buf[5] = '\0';
 8006166:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006168:	3305      	adds	r3, #5
 800616a:	2200      	movs	r2, #0
 800616c:	701a      	strb	r2, [r3, #0]
            } break;
 800616e:	e151      	b.n	8006414 <minmea_scan+0x684>

            case 'D': { // Date (int, int, int), -1 if empty.
                struct minmea_date *date = va_arg(ap, struct minmea_date *);
 8006170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006172:	1d1a      	adds	r2, r3, #4
 8006174:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	633b      	str	r3, [r7, #48]	@ 0x30

                int d = -1, m = -1, y = -1;
 800617a:	2301      	movs	r3, #1
 800617c:	425b      	negs	r3, r3
 800617e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006180:	2301      	movs	r3, #1
 8006182:	425b      	negs	r3, r3
 8006184:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006186:	2301      	movs	r3, #1
 8006188:	425b      	negs	r3, r3
 800618a:	667b      	str	r3, [r7, #100]	@ 0x64

                if (field && minmea_isfield(*field)) {
 800618c:	2290      	movs	r2, #144	@ 0x90
 800618e:	18bb      	adds	r3, r7, r2
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d067      	beq.n	8006266 <minmea_scan+0x4d6>
 8006196:	18bb      	adds	r3, r7, r2
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	0018      	movs	r0, r3
 800619e:	f7ff fdd1 	bl	8005d44 <minmea_isfield>
 80061a2:	1e03      	subs	r3, r0, #0
 80061a4:	d05f      	beq.n	8006266 <minmea_scan+0x4d6>
                    // Always six digits.
                    for (int i=0; i<6; i++)
 80061a6:	2300      	movs	r3, #0
 80061a8:	663b      	str	r3, [r7, #96]	@ 0x60
 80061aa:	e011      	b.n	80061d0 <minmea_scan+0x440>
                        if (!isdigit((unsigned char) field[i]))
 80061ac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80061ae:	2290      	movs	r2, #144	@ 0x90
 80061b0:	18ba      	adds	r2, r7, r2
 80061b2:	6812      	ldr	r2, [r2, #0]
 80061b4:	18d3      	adds	r3, r2, r3
 80061b6:	781b      	ldrb	r3, [r3, #0]
 80061b8:	1c5a      	adds	r2, r3, #1
 80061ba:	4bbb      	ldr	r3, [pc, #748]	@ (80064a8 <minmea_scan+0x718>)
 80061bc:	18d3      	adds	r3, r2, r3
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	001a      	movs	r2, r3
 80061c2:	2304      	movs	r3, #4
 80061c4:	4013      	ands	r3, r2
 80061c6:	d100      	bne.n	80061ca <minmea_scan+0x43a>
 80061c8:	e161      	b.n	800648e <minmea_scan+0x6fe>
                    for (int i=0; i<6; i++)
 80061ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80061cc:	3301      	adds	r3, #1
 80061ce:	663b      	str	r3, [r7, #96]	@ 0x60
 80061d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80061d2:	2b05      	cmp	r3, #5
 80061d4:	ddea      	ble.n	80061ac <minmea_scan+0x41c>
                            goto parse_error;

                    d = strtol((char[]) {field[0], field[1], '\0'}, NULL, 10);
 80061d6:	2490      	movs	r4, #144	@ 0x90
 80061d8:	193b      	adds	r3, r7, r4
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	781a      	ldrb	r2, [r3, #0]
 80061de:	211c      	movs	r1, #28
 80061e0:	187b      	adds	r3, r7, r1
 80061e2:	701a      	strb	r2, [r3, #0]
 80061e4:	193b      	adds	r3, r7, r4
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	3301      	adds	r3, #1
 80061ea:	781a      	ldrb	r2, [r3, #0]
 80061ec:	187b      	adds	r3, r7, r1
 80061ee:	705a      	strb	r2, [r3, #1]
 80061f0:	187b      	adds	r3, r7, r1
 80061f2:	2200      	movs	r2, #0
 80061f4:	709a      	strb	r2, [r3, #2]
 80061f6:	187b      	adds	r3, r7, r1
 80061f8:	220a      	movs	r2, #10
 80061fa:	2100      	movs	r1, #0
 80061fc:	0018      	movs	r0, r3
 80061fe:	f006 fff9 	bl	800d1f4 <strtol>
 8006202:	0003      	movs	r3, r0
 8006204:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    m = strtol((char[]) {field[2], field[3], '\0'}, NULL, 10);
 8006206:	193b      	adds	r3, r7, r4
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	3302      	adds	r3, #2
 800620c:	781a      	ldrb	r2, [r3, #0]
 800620e:	2118      	movs	r1, #24
 8006210:	187b      	adds	r3, r7, r1
 8006212:	701a      	strb	r2, [r3, #0]
 8006214:	193b      	adds	r3, r7, r4
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	3303      	adds	r3, #3
 800621a:	781a      	ldrb	r2, [r3, #0]
 800621c:	187b      	adds	r3, r7, r1
 800621e:	705a      	strb	r2, [r3, #1]
 8006220:	187b      	adds	r3, r7, r1
 8006222:	2200      	movs	r2, #0
 8006224:	709a      	strb	r2, [r3, #2]
 8006226:	187b      	adds	r3, r7, r1
 8006228:	220a      	movs	r2, #10
 800622a:	2100      	movs	r1, #0
 800622c:	0018      	movs	r0, r3
 800622e:	f006 ffe1 	bl	800d1f4 <strtol>
 8006232:	0003      	movs	r3, r0
 8006234:	66bb      	str	r3, [r7, #104]	@ 0x68
                    y = strtol((char[]) {field[4], field[5], '\0'}, NULL, 10);
 8006236:	193b      	adds	r3, r7, r4
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	3304      	adds	r3, #4
 800623c:	781a      	ldrb	r2, [r3, #0]
 800623e:	2114      	movs	r1, #20
 8006240:	187b      	adds	r3, r7, r1
 8006242:	701a      	strb	r2, [r3, #0]
 8006244:	193b      	adds	r3, r7, r4
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	3305      	adds	r3, #5
 800624a:	781a      	ldrb	r2, [r3, #0]
 800624c:	187b      	adds	r3, r7, r1
 800624e:	705a      	strb	r2, [r3, #1]
 8006250:	187b      	adds	r3, r7, r1
 8006252:	2200      	movs	r2, #0
 8006254:	709a      	strb	r2, [r3, #2]
 8006256:	187b      	adds	r3, r7, r1
 8006258:	220a      	movs	r2, #10
 800625a:	2100      	movs	r1, #0
 800625c:	0018      	movs	r0, r3
 800625e:	f006 ffc9 	bl	800d1f4 <strtol>
 8006262:	0003      	movs	r3, r0
 8006264:	667b      	str	r3, [r7, #100]	@ 0x64
                }

                date->day = d;
 8006266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006268:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800626a:	601a      	str	r2, [r3, #0]
                date->month = m;
 800626c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800626e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006270:	605a      	str	r2, [r3, #4]
                date->year = y;
 8006272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006274:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006276:	609a      	str	r2, [r3, #8]
            } break;
 8006278:	e0cc      	b.n	8006414 <minmea_scan+0x684>

            case 'T': { // Time (int, int, int, int), -1 if empty.
                struct minmea_time *time = va_arg(ap, struct minmea_time *);
 800627a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800627c:	1d1a      	adds	r2, r3, #4
 800627e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	637b      	str	r3, [r7, #52]	@ 0x34

                int h = -1, i = -1, s = -1, u = -1;
 8006284:	2301      	movs	r3, #1
 8006286:	425b      	negs	r3, r3
 8006288:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800628a:	2301      	movs	r3, #1
 800628c:	425b      	negs	r3, r3
 800628e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006290:	2301      	movs	r3, #1
 8006292:	425b      	negs	r3, r3
 8006294:	657b      	str	r3, [r7, #84]	@ 0x54
 8006296:	2301      	movs	r3, #1
 8006298:	425b      	negs	r3, r3
 800629a:	653b      	str	r3, [r7, #80]	@ 0x50

                if (field && minmea_isfield(*field)) {
 800629c:	2290      	movs	r2, #144	@ 0x90
 800629e:	18bb      	adds	r3, r7, r2
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d100      	bne.n	80062a8 <minmea_scan+0x518>
 80062a6:	e0a7      	b.n	80063f8 <minmea_scan+0x668>
 80062a8:	18bb      	adds	r3, r7, r2
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	781b      	ldrb	r3, [r3, #0]
 80062ae:	0018      	movs	r0, r3
 80062b0:	f7ff fd48 	bl	8005d44 <minmea_isfield>
 80062b4:	1e03      	subs	r3, r0, #0
 80062b6:	d100      	bne.n	80062ba <minmea_scan+0x52a>
 80062b8:	e09e      	b.n	80063f8 <minmea_scan+0x668>
                    // Minimum required: integer time.
                    for (int i=0; i<6; i++)
 80062ba:	2300      	movs	r3, #0
 80062bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80062be:	e011      	b.n	80062e4 <minmea_scan+0x554>
                        if (!isdigit((unsigned char) field[i]))
 80062c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80062c2:	2290      	movs	r2, #144	@ 0x90
 80062c4:	18ba      	adds	r2, r7, r2
 80062c6:	6812      	ldr	r2, [r2, #0]
 80062c8:	18d3      	adds	r3, r2, r3
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	1c5a      	adds	r2, r3, #1
 80062ce:	4b76      	ldr	r3, [pc, #472]	@ (80064a8 <minmea_scan+0x718>)
 80062d0:	18d3      	adds	r3, r2, r3
 80062d2:	781b      	ldrb	r3, [r3, #0]
 80062d4:	001a      	movs	r2, r3
 80062d6:	2304      	movs	r3, #4
 80062d8:	4013      	ands	r3, r2
 80062da:	d100      	bne.n	80062de <minmea_scan+0x54e>
 80062dc:	e0d9      	b.n	8006492 <minmea_scan+0x702>
                    for (int i=0; i<6; i++)
 80062de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80062e0:	3301      	adds	r3, #1
 80062e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80062e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80062e6:	2b05      	cmp	r3, #5
 80062e8:	ddea      	ble.n	80062c0 <minmea_scan+0x530>
                            goto parse_error;

                    h = strtol((char[]) {field[0], field[1], '\0'}, NULL, 10);
 80062ea:	2490      	movs	r4, #144	@ 0x90
 80062ec:	193b      	adds	r3, r7, r4
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	781a      	ldrb	r2, [r3, #0]
 80062f2:	2110      	movs	r1, #16
 80062f4:	187b      	adds	r3, r7, r1
 80062f6:	701a      	strb	r2, [r3, #0]
 80062f8:	193b      	adds	r3, r7, r4
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	3301      	adds	r3, #1
 80062fe:	781a      	ldrb	r2, [r3, #0]
 8006300:	187b      	adds	r3, r7, r1
 8006302:	705a      	strb	r2, [r3, #1]
 8006304:	187b      	adds	r3, r7, r1
 8006306:	2200      	movs	r2, #0
 8006308:	709a      	strb	r2, [r3, #2]
 800630a:	187b      	adds	r3, r7, r1
 800630c:	220a      	movs	r2, #10
 800630e:	2100      	movs	r1, #0
 8006310:	0018      	movs	r0, r3
 8006312:	f006 ff6f 	bl	800d1f4 <strtol>
 8006316:	0003      	movs	r3, r0
 8006318:	65fb      	str	r3, [r7, #92]	@ 0x5c
                    i = strtol((char[]) {field[2], field[3], '\0'}, NULL, 10);
 800631a:	193b      	adds	r3, r7, r4
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	3302      	adds	r3, #2
 8006320:	781a      	ldrb	r2, [r3, #0]
 8006322:	210c      	movs	r1, #12
 8006324:	187b      	adds	r3, r7, r1
 8006326:	701a      	strb	r2, [r3, #0]
 8006328:	193b      	adds	r3, r7, r4
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	3303      	adds	r3, #3
 800632e:	781a      	ldrb	r2, [r3, #0]
 8006330:	187b      	adds	r3, r7, r1
 8006332:	705a      	strb	r2, [r3, #1]
 8006334:	187b      	adds	r3, r7, r1
 8006336:	2200      	movs	r2, #0
 8006338:	709a      	strb	r2, [r3, #2]
 800633a:	187b      	adds	r3, r7, r1
 800633c:	220a      	movs	r2, #10
 800633e:	2100      	movs	r1, #0
 8006340:	0018      	movs	r0, r3
 8006342:	f006 ff57 	bl	800d1f4 <strtol>
 8006346:	0003      	movs	r3, r0
 8006348:	65bb      	str	r3, [r7, #88]	@ 0x58
                    s = strtol((char[]) {field[4], field[5], '\0'}, NULL, 10);
 800634a:	193b      	adds	r3, r7, r4
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	3304      	adds	r3, #4
 8006350:	781a      	ldrb	r2, [r3, #0]
 8006352:	2108      	movs	r1, #8
 8006354:	187b      	adds	r3, r7, r1
 8006356:	701a      	strb	r2, [r3, #0]
 8006358:	193b      	adds	r3, r7, r4
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	3305      	adds	r3, #5
 800635e:	781a      	ldrb	r2, [r3, #0]
 8006360:	187b      	adds	r3, r7, r1
 8006362:	705a      	strb	r2, [r3, #1]
 8006364:	187b      	adds	r3, r7, r1
 8006366:	2200      	movs	r2, #0
 8006368:	709a      	strb	r2, [r3, #2]
 800636a:	187b      	adds	r3, r7, r1
 800636c:	220a      	movs	r2, #10
 800636e:	2100      	movs	r1, #0
 8006370:	0018      	movs	r0, r3
 8006372:	f006 ff3f 	bl	800d1f4 <strtol>
 8006376:	0003      	movs	r3, r0
 8006378:	657b      	str	r3, [r7, #84]	@ 0x54
                    field += 6;
 800637a:	193b      	adds	r3, r7, r4
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	3306      	adds	r3, #6
 8006380:	193a      	adds	r2, r7, r4
 8006382:	6013      	str	r3, [r2, #0]

                    // Extra: fractional time. Saved as microseconds.
                    if (*field++ == '.') {
 8006384:	193b      	adds	r3, r7, r4
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	1c5a      	adds	r2, r3, #1
 800638a:	1939      	adds	r1, r7, r4
 800638c:	600a      	str	r2, [r1, #0]
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	2b2e      	cmp	r3, #46	@ 0x2e
 8006392:	d12f      	bne.n	80063f4 <minmea_scan+0x664>
                        int value = 0;
 8006394:	2300      	movs	r3, #0
 8006396:	64bb      	str	r3, [r7, #72]	@ 0x48
                        int scale = 1000000;
 8006398:	4b44      	ldr	r3, [pc, #272]	@ (80064ac <minmea_scan+0x71c>)
 800639a:	647b      	str	r3, [r7, #68]	@ 0x44
                        while (isdigit((unsigned char) *field) && scale > 1) {
 800639c:	e016      	b.n	80063cc <minmea_scan+0x63c>
                            value = (value * 10) + (*field++ - '0');
 800639e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80063a0:	0013      	movs	r3, r2
 80063a2:	009b      	lsls	r3, r3, #2
 80063a4:	189b      	adds	r3, r3, r2
 80063a6:	005b      	lsls	r3, r3, #1
 80063a8:	0019      	movs	r1, r3
 80063aa:	2090      	movs	r0, #144	@ 0x90
 80063ac:	183b      	adds	r3, r7, r0
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	1c5a      	adds	r2, r3, #1
 80063b2:	1838      	adds	r0, r7, r0
 80063b4:	6002      	str	r2, [r0, #0]
 80063b6:	781b      	ldrb	r3, [r3, #0]
 80063b8:	3b30      	subs	r3, #48	@ 0x30
 80063ba:	18cb      	adds	r3, r1, r3
 80063bc:	64bb      	str	r3, [r7, #72]	@ 0x48
                            scale /= 10;
 80063be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80063c0:	210a      	movs	r1, #10
 80063c2:	0018      	movs	r0, r3
 80063c4:	f7f9 ff4e 	bl	8000264 <__divsi3>
 80063c8:	0003      	movs	r3, r0
 80063ca:	647b      	str	r3, [r7, #68]	@ 0x44
                        while (isdigit((unsigned char) *field) && scale > 1) {
 80063cc:	2390      	movs	r3, #144	@ 0x90
 80063ce:	18fb      	adds	r3, r7, r3
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	781b      	ldrb	r3, [r3, #0]
 80063d4:	1c5a      	adds	r2, r3, #1
 80063d6:	4b34      	ldr	r3, [pc, #208]	@ (80064a8 <minmea_scan+0x718>)
 80063d8:	18d3      	adds	r3, r2, r3
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	001a      	movs	r2, r3
 80063de:	2304      	movs	r3, #4
 80063e0:	4013      	ands	r3, r2
 80063e2:	d002      	beq.n	80063ea <minmea_scan+0x65a>
 80063e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	dcd9      	bgt.n	800639e <minmea_scan+0x60e>
                        }
                        u = value * scale;
 80063ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80063ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80063ee:	4353      	muls	r3, r2
 80063f0:	653b      	str	r3, [r7, #80]	@ 0x50
 80063f2:	e001      	b.n	80063f8 <minmea_scan+0x668>
                    } else {
                        u = 0;
 80063f4:	2300      	movs	r3, #0
 80063f6:	653b      	str	r3, [r7, #80]	@ 0x50
                    }
                }

                time->hours = h;
 80063f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063fa:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80063fc:	601a      	str	r2, [r3, #0]
                time->minutes = i;
 80063fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006400:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006402:	605a      	str	r2, [r3, #4]
                time->seconds = s;
 8006404:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006406:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006408:	609a      	str	r2, [r3, #8]
                time->microseconds = u;
 800640a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800640c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800640e:	60da      	str	r2, [r3, #12]
            } break;
 8006410:	e000      	b.n	8006414 <minmea_scan+0x684>

            case '_': { // Ignore the field.
            } break;
 8006412:	46c0      	nop			@ (mov r8, r8)
            default: { // Unknown.
                goto parse_error;
            } break;
        }

        next_field();
 8006414:	e002      	b.n	800641c <minmea_scan+0x68c>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	3301      	adds	r3, #1
 800641a:	607b      	str	r3, [r7, #4]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	781b      	ldrb	r3, [r3, #0]
 8006420:	0018      	movs	r0, r3
 8006422:	f7ff fc8f 	bl	8005d44 <minmea_isfield>
 8006426:	1e03      	subs	r3, r0, #0
 8006428:	d1f5      	bne.n	8006416 <minmea_scan+0x686>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	781b      	ldrb	r3, [r3, #0]
 800642e:	2b2c      	cmp	r3, #44	@ 0x2c
 8006430:	d107      	bne.n	8006442 <minmea_scan+0x6b2>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	3301      	adds	r3, #1
 8006436:	607b      	str	r3, [r7, #4]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2290      	movs	r2, #144	@ 0x90
 800643c:	18ba      	adds	r2, r7, r2
 800643e:	6013      	str	r3, [r2, #0]
 8006440:	e003      	b.n	800644a <minmea_scan+0x6ba>
 8006442:	2300      	movs	r3, #0
 8006444:	2290      	movs	r2, #144	@ 0x90
 8006446:	18ba      	adds	r2, r7, r2
 8006448:	6013      	str	r3, [r2, #0]
    while (*format) {
 800644a:	23a4      	movs	r3, #164	@ 0xa4
 800644c:	2208      	movs	r2, #8
 800644e:	189b      	adds	r3, r3, r2
 8006450:	19db      	adds	r3, r3, r7
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	781b      	ldrb	r3, [r3, #0]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d000      	beq.n	800645c <minmea_scan+0x6cc>
 800645a:	e4b0      	b.n	8005dbe <minmea_scan+0x2e>
    }

    result = true;
 800645c:	2397      	movs	r3, #151	@ 0x97
 800645e:	18fb      	adds	r3, r7, r3
 8006460:	2201      	movs	r2, #1
 8006462:	701a      	strb	r2, [r3, #0]
 8006464:	e016      	b.n	8006494 <minmea_scan+0x704>
            goto parse_error;
 8006466:	46c0      	nop			@ (mov r8, r8)
 8006468:	e014      	b.n	8006494 <minmea_scan+0x704>
                goto parse_error;
 800646a:	46c0      	nop			@ (mov r8, r8)
 800646c:	e012      	b.n	8006494 <minmea_scan+0x704>
                            goto parse_error;
 800646e:	46c0      	nop			@ (mov r8, r8)
 8006470:	e010      	b.n	8006494 <minmea_scan+0x704>
                                    goto parse_error;
 8006472:	46c0      	nop			@ (mov r8, r8)
 8006474:	e00e      	b.n	8006494 <minmea_scan+0x704>
                            goto parse_error;
 8006476:	46c0      	nop			@ (mov r8, r8)
 8006478:	e00c      	b.n	8006494 <minmea_scan+0x704>
                    goto parse_error;
 800647a:	46c0      	nop			@ (mov r8, r8)
 800647c:	e00a      	b.n	8006494 <minmea_scan+0x704>
                        goto parse_error;
 800647e:	46c0      	nop			@ (mov r8, r8)
 8006480:	e008      	b.n	8006494 <minmea_scan+0x704>
                    goto parse_error;
 8006482:	46c0      	nop			@ (mov r8, r8)
 8006484:	e006      	b.n	8006494 <minmea_scan+0x704>
                    goto parse_error;
 8006486:	46c0      	nop			@ (mov r8, r8)
 8006488:	e004      	b.n	8006494 <minmea_scan+0x704>
                        goto parse_error;
 800648a:	46c0      	nop			@ (mov r8, r8)
 800648c:	e002      	b.n	8006494 <minmea_scan+0x704>
                            goto parse_error;
 800648e:	46c0      	nop			@ (mov r8, r8)
 8006490:	e000      	b.n	8006494 <minmea_scan+0x704>
                            goto parse_error;
 8006492:	46c0      	nop			@ (mov r8, r8)

parse_error:
    va_end(ap);
    return result;
 8006494:	2397      	movs	r3, #151	@ 0x97
 8006496:	18fb      	adds	r3, r7, r3
 8006498:	781b      	ldrb	r3, [r3, #0]
}
 800649a:	0018      	movs	r0, r3
 800649c:	46bd      	mov	sp, r7
 800649e:	b027      	add	sp, #156	@ 0x9c
 80064a0:	bcb0      	pop	{r4, r5, r7}
 80064a2:	bc08      	pop	{r3}
 80064a4:	b003      	add	sp, #12
 80064a6:	4718      	bx	r3
 80064a8:	080107e0 	.word	0x080107e0
 80064ac:	000f4240 	.word	0x000f4240

080064b0 <minmea_parse_gga>:

    return true;
}

bool minmea_parse_gga(struct minmea_sentence_gga *frame, const char *sentence)
{
 80064b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064b2:	46de      	mov	lr, fp
 80064b4:	4657      	mov	r7, sl
 80064b6:	464e      	mov	r6, r9
 80064b8:	4645      	mov	r5, r8
 80064ba:	b5e0      	push	{r5, r6, r7, lr}
 80064bc:	b097      	sub	sp, #92	@ 0x5c
 80064be:	af0c      	add	r7, sp, #48	@ 0x30
 80064c0:	6178      	str	r0, [r7, #20]
 80064c2:	6139      	str	r1, [r7, #16]
    // $GPGGA,123519,4807.038,N,01131.000,E,1,08,0.9,545.4,M,46.9,M,,*47
    char type[6];
    int latitude_direction;
    int longitude_direction;

    if (!minmea_scan(sentence, "tTfdfdiiffcfci_",
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	60fb      	str	r3, [r7, #12]
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	001a      	movs	r2, r3
 80064cc:	3210      	adds	r2, #16
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	0019      	movs	r1, r3
 80064d2:	3118      	adds	r1, #24
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	001c      	movs	r4, r3
 80064d8:	3420      	adds	r4, #32
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	001d      	movs	r5, r3
 80064de:	3524      	adds	r5, #36	@ 0x24
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	001e      	movs	r6, r3
 80064e4:	3628      	adds	r6, #40	@ 0x28
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	2030      	movs	r0, #48	@ 0x30
 80064ea:	4684      	mov	ip, r0
 80064ec:	449c      	add	ip, r3
 80064ee:	4663      	mov	r3, ip
 80064f0:	607b      	str	r3, [r7, #4]
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	2038      	movs	r0, #56	@ 0x38
 80064f6:	4680      	mov	r8, r0
 80064f8:	4498      	add	r8, r3
 80064fa:	4643      	mov	r3, r8
 80064fc:	603b      	str	r3, [r7, #0]
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	203c      	movs	r0, #60	@ 0x3c
 8006502:	4681      	mov	r9, r0
 8006504:	4499      	add	r9, r3
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	2044      	movs	r0, #68	@ 0x44
 800650a:	4682      	mov	sl, r0
 800650c:	449a      	add	sl, r3
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	3348      	adds	r3, #72	@ 0x48
 8006512:	2010      	movs	r0, #16
 8006514:	4683      	mov	fp, r0
 8006516:	2008      	movs	r0, #8
 8006518:	4684      	mov	ip, r0
 800651a:	2008      	movs	r0, #8
 800651c:	4680      	mov	r8, r0
 800651e:	44b8      	add	r8, r7
 8006520:	44c4      	add	ip, r8
 8006522:	44e3      	add	fp, ip
 8006524:	4658      	mov	r0, fp
 8006526:	60b8      	str	r0, [r7, #8]
 8006528:	482a      	ldr	r0, [pc, #168]	@ (80065d4 <minmea_parse_gga+0x124>)
 800652a:	4683      	mov	fp, r0
 800652c:	6938      	ldr	r0, [r7, #16]
 800652e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006530:	4653      	mov	r3, sl
 8006532:	930a      	str	r3, [sp, #40]	@ 0x28
 8006534:	464b      	mov	r3, r9
 8006536:	9309      	str	r3, [sp, #36]	@ 0x24
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	9308      	str	r3, [sp, #32]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	9307      	str	r3, [sp, #28]
 8006540:	9606      	str	r6, [sp, #24]
 8006542:	9505      	str	r5, [sp, #20]
 8006544:	9404      	str	r4, [sp, #16]
 8006546:	2408      	movs	r4, #8
 8006548:	2508      	movs	r5, #8
 800654a:	1963      	adds	r3, r4, r5
 800654c:	2408      	movs	r4, #8
 800654e:	46a4      	mov	ip, r4
 8006550:	44bc      	add	ip, r7
 8006552:	4463      	add	r3, ip
 8006554:	9303      	str	r3, [sp, #12]
 8006556:	9102      	str	r1, [sp, #8]
 8006558:	210c      	movs	r1, #12
 800655a:	194b      	adds	r3, r1, r5
 800655c:	2108      	movs	r1, #8
 800655e:	468c      	mov	ip, r1
 8006560:	44bc      	add	ip, r7
 8006562:	4463      	add	r3, ip
 8006564:	9301      	str	r3, [sp, #4]
 8006566:	9200      	str	r2, [sp, #0]
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	68ba      	ldr	r2, [r7, #8]
 800656c:	4659      	mov	r1, fp
 800656e:	f7ff fc0f 	bl	8005d90 <minmea_scan>
 8006572:	0003      	movs	r3, r0
 8006574:	001a      	movs	r2, r3
 8006576:	2301      	movs	r3, #1
 8006578:	4053      	eors	r3, r2
 800657a:	b2db      	uxtb	r3, r3
 800657c:	2b00      	cmp	r3, #0
 800657e:	d001      	beq.n	8006584 <minmea_parse_gga+0xd4>
            &frame->satellites_tracked,
            &frame->hdop,
            &frame->altitude, &frame->altitude_units,
            &frame->height, &frame->height_units,
            &frame->dgps_age))
        return false;
 8006580:	2300      	movs	r3, #0
 8006582:	e01d      	b.n	80065c0 <minmea_parse_gga+0x110>
    if (strcmp(type+2, "GGA"))
 8006584:	2310      	movs	r3, #16
 8006586:	2208      	movs	r2, #8
 8006588:	189b      	adds	r3, r3, r2
 800658a:	2208      	movs	r2, #8
 800658c:	4694      	mov	ip, r2
 800658e:	44bc      	add	ip, r7
 8006590:	4463      	add	r3, ip
 8006592:	3302      	adds	r3, #2
 8006594:	4a10      	ldr	r2, [pc, #64]	@ (80065d8 <minmea_parse_gga+0x128>)
 8006596:	0011      	movs	r1, r2
 8006598:	0018      	movs	r0, r3
 800659a:	f7f9 fdb3 	bl	8000104 <strcmp>
 800659e:	1e03      	subs	r3, r0, #0
 80065a0:	d001      	beq.n	80065a6 <minmea_parse_gga+0xf6>
        return false;
 80065a2:	2300      	movs	r3, #0
 80065a4:	e00c      	b.n	80065c0 <minmea_parse_gga+0x110>

    frame->latitude.value *= latitude_direction;
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	691b      	ldr	r3, [r3, #16]
 80065aa:	69fa      	ldr	r2, [r7, #28]
 80065ac:	435a      	muls	r2, r3
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	611a      	str	r2, [r3, #16]
    frame->longitude.value *= longitude_direction;
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	699b      	ldr	r3, [r3, #24]
 80065b6:	69ba      	ldr	r2, [r7, #24]
 80065b8:	435a      	muls	r2, r3
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	619a      	str	r2, [r3, #24]

    return true;
 80065be:	2301      	movs	r3, #1
}
 80065c0:	0018      	movs	r0, r3
 80065c2:	46bd      	mov	sp, r7
 80065c4:	b00b      	add	sp, #44	@ 0x2c
 80065c6:	bcf0      	pop	{r4, r5, r6, r7}
 80065c8:	46bb      	mov	fp, r7
 80065ca:	46b2      	mov	sl, r6
 80065cc:	46a9      	mov	r9, r5
 80065ce:	46a0      	mov	r8, r4
 80065d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065d2:	46c0      	nop			@ (mov r8, r8)
 80065d4:	0800fe6c 	.word	0x0800fe6c
 80065d8:	0800fe4c 	.word	0x0800fe4c

080065dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b082      	sub	sp, #8
 80065e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80065e2:	4b11      	ldr	r3, [pc, #68]	@ (8006628 <HAL_MspInit+0x4c>)
 80065e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80065e6:	4b10      	ldr	r3, [pc, #64]	@ (8006628 <HAL_MspInit+0x4c>)
 80065e8:	2101      	movs	r1, #1
 80065ea:	430a      	orrs	r2, r1
 80065ec:	641a      	str	r2, [r3, #64]	@ 0x40
 80065ee:	4b0e      	ldr	r3, [pc, #56]	@ (8006628 <HAL_MspInit+0x4c>)
 80065f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065f2:	2201      	movs	r2, #1
 80065f4:	4013      	ands	r3, r2
 80065f6:	607b      	str	r3, [r7, #4]
 80065f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80065fa:	4b0b      	ldr	r3, [pc, #44]	@ (8006628 <HAL_MspInit+0x4c>)
 80065fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80065fe:	4b0a      	ldr	r3, [pc, #40]	@ (8006628 <HAL_MspInit+0x4c>)
 8006600:	2180      	movs	r1, #128	@ 0x80
 8006602:	0549      	lsls	r1, r1, #21
 8006604:	430a      	orrs	r2, r1
 8006606:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006608:	4b07      	ldr	r3, [pc, #28]	@ (8006628 <HAL_MspInit+0x4c>)
 800660a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800660c:	2380      	movs	r3, #128	@ 0x80
 800660e:	055b      	lsls	r3, r3, #21
 8006610:	4013      	ands	r3, r2
 8006612:	603b      	str	r3, [r7, #0]
 8006614:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8006616:	23c0      	movs	r3, #192	@ 0xc0
 8006618:	00db      	lsls	r3, r3, #3
 800661a:	0018      	movs	r0, r3
 800661c:	f001 f8e8 	bl	80077f0 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006620:	46c0      	nop			@ (mov r8, r8)
 8006622:	46bd      	mov	sp, r7
 8006624:	b002      	add	sp, #8
 8006626:	bd80      	pop	{r7, pc}
 8006628:	40021000 	.word	0x40021000

0800662c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800662c:	b590      	push	{r4, r7, lr}
 800662e:	b09d      	sub	sp, #116	@ 0x74
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006634:	235c      	movs	r3, #92	@ 0x5c
 8006636:	18fb      	adds	r3, r7, r3
 8006638:	0018      	movs	r0, r3
 800663a:	2314      	movs	r3, #20
 800663c:	001a      	movs	r2, r3
 800663e:	2100      	movs	r1, #0
 8006640:	f006 ffc4 	bl	800d5cc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006644:	2410      	movs	r4, #16
 8006646:	193b      	adds	r3, r7, r4
 8006648:	0018      	movs	r0, r3
 800664a:	234c      	movs	r3, #76	@ 0x4c
 800664c:	001a      	movs	r2, r3
 800664e:	2100      	movs	r1, #0
 8006650:	f006 ffbc 	bl	800d5cc <memset>
  if(hi2c->Instance==I2C1)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a23      	ldr	r2, [pc, #140]	@ (80066e8 <HAL_I2C_MspInit+0xbc>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d13f      	bne.n	80066de <HAL_I2C_MspInit+0xb2>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800665e:	193b      	adds	r3, r7, r4
 8006660:	2220      	movs	r2, #32
 8006662:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8006664:	193b      	adds	r3, r7, r4
 8006666:	2200      	movs	r2, #0
 8006668:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800666a:	193b      	adds	r3, r7, r4
 800666c:	0018      	movs	r0, r3
 800666e:	f002 fec9 	bl	8009404 <HAL_RCCEx_PeriphCLKConfig>
 8006672:	1e03      	subs	r3, r0, #0
 8006674:	d001      	beq.n	800667a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8006676:	f7ff fb5f 	bl	8005d38 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800667a:	4b1c      	ldr	r3, [pc, #112]	@ (80066ec <HAL_I2C_MspInit+0xc0>)
 800667c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800667e:	4b1b      	ldr	r3, [pc, #108]	@ (80066ec <HAL_I2C_MspInit+0xc0>)
 8006680:	2101      	movs	r1, #1
 8006682:	430a      	orrs	r2, r1
 8006684:	635a      	str	r2, [r3, #52]	@ 0x34
 8006686:	4b19      	ldr	r3, [pc, #100]	@ (80066ec <HAL_I2C_MspInit+0xc0>)
 8006688:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800668a:	2201      	movs	r2, #1
 800668c:	4013      	ands	r3, r2
 800668e:	60fb      	str	r3, [r7, #12]
 8006690:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8006692:	215c      	movs	r1, #92	@ 0x5c
 8006694:	187b      	adds	r3, r7, r1
 8006696:	22c0      	movs	r2, #192	@ 0xc0
 8006698:	00d2      	lsls	r2, r2, #3
 800669a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800669c:	187b      	adds	r3, r7, r1
 800669e:	2212      	movs	r2, #18
 80066a0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066a2:	187b      	adds	r3, r7, r1
 80066a4:	2200      	movs	r2, #0
 80066a6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80066a8:	187b      	adds	r3, r7, r1
 80066aa:	2200      	movs	r2, #0
 80066ac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80066ae:	187b      	adds	r3, r7, r1
 80066b0:	2206      	movs	r2, #6
 80066b2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80066b4:	187a      	adds	r2, r7, r1
 80066b6:	23a0      	movs	r3, #160	@ 0xa0
 80066b8:	05db      	lsls	r3, r3, #23
 80066ba:	0011      	movs	r1, r2
 80066bc:	0018      	movs	r0, r3
 80066be:	f001 f961 	bl	8007984 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80066c2:	4b0a      	ldr	r3, [pc, #40]	@ (80066ec <HAL_I2C_MspInit+0xc0>)
 80066c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80066c6:	4b09      	ldr	r3, [pc, #36]	@ (80066ec <HAL_I2C_MspInit+0xc0>)
 80066c8:	2180      	movs	r1, #128	@ 0x80
 80066ca:	0389      	lsls	r1, r1, #14
 80066cc:	430a      	orrs	r2, r1
 80066ce:	63da      	str	r2, [r3, #60]	@ 0x3c
 80066d0:	4b06      	ldr	r3, [pc, #24]	@ (80066ec <HAL_I2C_MspInit+0xc0>)
 80066d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80066d4:	2380      	movs	r3, #128	@ 0x80
 80066d6:	039b      	lsls	r3, r3, #14
 80066d8:	4013      	ands	r3, r2
 80066da:	60bb      	str	r3, [r7, #8]
 80066dc:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80066de:	46c0      	nop			@ (mov r8, r8)
 80066e0:	46bd      	mov	sp, r7
 80066e2:	b01d      	add	sp, #116	@ 0x74
 80066e4:	bd90      	pop	{r4, r7, pc}
 80066e6:	46c0      	nop			@ (mov r8, r8)
 80066e8:	40005400 	.word	0x40005400
 80066ec:	40021000 	.word	0x40021000

080066f0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80066f0:	b590      	push	{r4, r7, lr}
 80066f2:	b08b      	sub	sp, #44	@ 0x2c
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066f8:	2414      	movs	r4, #20
 80066fa:	193b      	adds	r3, r7, r4
 80066fc:	0018      	movs	r0, r3
 80066fe:	2314      	movs	r3, #20
 8006700:	001a      	movs	r2, r3
 8006702:	2100      	movs	r1, #0
 8006704:	f006 ff62 	bl	800d5cc <memset>
  if(hspi->Instance==SPI1)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a2c      	ldr	r2, [pc, #176]	@ (80067c0 <HAL_SPI_MspInit+0xd0>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d151      	bne.n	80067b6 <HAL_SPI_MspInit+0xc6>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006712:	4b2c      	ldr	r3, [pc, #176]	@ (80067c4 <HAL_SPI_MspInit+0xd4>)
 8006714:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006716:	4b2b      	ldr	r3, [pc, #172]	@ (80067c4 <HAL_SPI_MspInit+0xd4>)
 8006718:	2180      	movs	r1, #128	@ 0x80
 800671a:	0149      	lsls	r1, r1, #5
 800671c:	430a      	orrs	r2, r1
 800671e:	641a      	str	r2, [r3, #64]	@ 0x40
 8006720:	4b28      	ldr	r3, [pc, #160]	@ (80067c4 <HAL_SPI_MspInit+0xd4>)
 8006722:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006724:	2380      	movs	r3, #128	@ 0x80
 8006726:	015b      	lsls	r3, r3, #5
 8006728:	4013      	ands	r3, r2
 800672a:	613b      	str	r3, [r7, #16]
 800672c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800672e:	4b25      	ldr	r3, [pc, #148]	@ (80067c4 <HAL_SPI_MspInit+0xd4>)
 8006730:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006732:	4b24      	ldr	r3, [pc, #144]	@ (80067c4 <HAL_SPI_MspInit+0xd4>)
 8006734:	2101      	movs	r1, #1
 8006736:	430a      	orrs	r2, r1
 8006738:	635a      	str	r2, [r3, #52]	@ 0x34
 800673a:	4b22      	ldr	r3, [pc, #136]	@ (80067c4 <HAL_SPI_MspInit+0xd4>)
 800673c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800673e:	2201      	movs	r2, #1
 8006740:	4013      	ands	r3, r2
 8006742:	60fb      	str	r3, [r7, #12]
 8006744:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006746:	4b1f      	ldr	r3, [pc, #124]	@ (80067c4 <HAL_SPI_MspInit+0xd4>)
 8006748:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800674a:	4b1e      	ldr	r3, [pc, #120]	@ (80067c4 <HAL_SPI_MspInit+0xd4>)
 800674c:	2108      	movs	r1, #8
 800674e:	430a      	orrs	r2, r1
 8006750:	635a      	str	r2, [r3, #52]	@ 0x34
 8006752:	4b1c      	ldr	r3, [pc, #112]	@ (80067c4 <HAL_SPI_MspInit+0xd4>)
 8006754:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006756:	2208      	movs	r2, #8
 8006758:	4013      	ands	r3, r2
 800675a:	60bb      	str	r3, [r7, #8]
 800675c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PD5     ------> SPI1_MISO
    PD6     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800675e:	193b      	adds	r3, r7, r4
 8006760:	2202      	movs	r2, #2
 8006762:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006764:	193b      	adds	r3, r7, r4
 8006766:	2202      	movs	r2, #2
 8006768:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800676a:	193b      	adds	r3, r7, r4
 800676c:	2200      	movs	r2, #0
 800676e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006770:	193b      	adds	r3, r7, r4
 8006772:	2200      	movs	r2, #0
 8006774:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8006776:	193b      	adds	r3, r7, r4
 8006778:	2200      	movs	r2, #0
 800677a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800677c:	193a      	adds	r2, r7, r4
 800677e:	23a0      	movs	r3, #160	@ 0xa0
 8006780:	05db      	lsls	r3, r3, #23
 8006782:	0011      	movs	r1, r2
 8006784:	0018      	movs	r0, r3
 8006786:	f001 f8fd 	bl	8007984 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800678a:	0021      	movs	r1, r4
 800678c:	187b      	adds	r3, r7, r1
 800678e:	2260      	movs	r2, #96	@ 0x60
 8006790:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006792:	187b      	adds	r3, r7, r1
 8006794:	2202      	movs	r2, #2
 8006796:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006798:	187b      	adds	r3, r7, r1
 800679a:	2200      	movs	r2, #0
 800679c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800679e:	187b      	adds	r3, r7, r1
 80067a0:	2200      	movs	r2, #0
 80067a2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI1;
 80067a4:	187b      	adds	r3, r7, r1
 80067a6:	2201      	movs	r2, #1
 80067a8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80067aa:	187b      	adds	r3, r7, r1
 80067ac:	4a06      	ldr	r2, [pc, #24]	@ (80067c8 <HAL_SPI_MspInit+0xd8>)
 80067ae:	0019      	movs	r1, r3
 80067b0:	0010      	movs	r0, r2
 80067b2:	f001 f8e7 	bl	8007984 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80067b6:	46c0      	nop			@ (mov r8, r8)
 80067b8:	46bd      	mov	sp, r7
 80067ba:	b00b      	add	sp, #44	@ 0x2c
 80067bc:	bd90      	pop	{r4, r7, pc}
 80067be:	46c0      	nop			@ (mov r8, r8)
 80067c0:	40013000 	.word	0x40013000
 80067c4:	40021000 	.word	0x40021000
 80067c8:	50000c00 	.word	0x50000c00

080067cc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b084      	sub	sp, #16
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a0a      	ldr	r2, [pc, #40]	@ (8006804 <HAL_TIM_Base_MspInit+0x38>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d10d      	bne.n	80067fa <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM17_MspInit 0 */

    /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 80067de:	4b0a      	ldr	r3, [pc, #40]	@ (8006808 <HAL_TIM_Base_MspInit+0x3c>)
 80067e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80067e2:	4b09      	ldr	r3, [pc, #36]	@ (8006808 <HAL_TIM_Base_MspInit+0x3c>)
 80067e4:	2180      	movs	r1, #128	@ 0x80
 80067e6:	02c9      	lsls	r1, r1, #11
 80067e8:	430a      	orrs	r2, r1
 80067ea:	641a      	str	r2, [r3, #64]	@ 0x40
 80067ec:	4b06      	ldr	r3, [pc, #24]	@ (8006808 <HAL_TIM_Base_MspInit+0x3c>)
 80067ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80067f0:	2380      	movs	r3, #128	@ 0x80
 80067f2:	02db      	lsls	r3, r3, #11
 80067f4:	4013      	ands	r3, r2
 80067f6:	60fb      	str	r3, [r7, #12]
 80067f8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM17_MspInit 1 */

  }

}
 80067fa:	46c0      	nop			@ (mov r8, r8)
 80067fc:	46bd      	mov	sp, r7
 80067fe:	b004      	add	sp, #16
 8006800:	bd80      	pop	{r7, pc}
 8006802:	46c0      	nop			@ (mov r8, r8)
 8006804:	40014800 	.word	0x40014800
 8006808:	40021000 	.word	0x40021000

0800680c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800680c:	b590      	push	{r4, r7, lr}
 800680e:	b089      	sub	sp, #36	@ 0x24
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006814:	240c      	movs	r4, #12
 8006816:	193b      	adds	r3, r7, r4
 8006818:	0018      	movs	r0, r3
 800681a:	2314      	movs	r3, #20
 800681c:	001a      	movs	r2, r3
 800681e:	2100      	movs	r1, #0
 8006820:	f006 fed4 	bl	800d5cc <memset>
  if(htim->Instance==TIM17)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a14      	ldr	r2, [pc, #80]	@ (800687c <HAL_TIM_MspPostInit+0x70>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d122      	bne.n	8006874 <HAL_TIM_MspPostInit+0x68>
  {
    /* USER CODE BEGIN TIM17_MspPostInit 0 */

    /* USER CODE END TIM17_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800682e:	4b14      	ldr	r3, [pc, #80]	@ (8006880 <HAL_TIM_MspPostInit+0x74>)
 8006830:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006832:	4b13      	ldr	r3, [pc, #76]	@ (8006880 <HAL_TIM_MspPostInit+0x74>)
 8006834:	2101      	movs	r1, #1
 8006836:	430a      	orrs	r2, r1
 8006838:	635a      	str	r2, [r3, #52]	@ 0x34
 800683a:	4b11      	ldr	r3, [pc, #68]	@ (8006880 <HAL_TIM_MspPostInit+0x74>)
 800683c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800683e:	2201      	movs	r2, #1
 8006840:	4013      	ands	r3, r2
 8006842:	60bb      	str	r3, [r7, #8]
 8006844:	68bb      	ldr	r3, [r7, #8]
    /**TIM17 GPIO Configuration
    PA7     ------> TIM17_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8006846:	0021      	movs	r1, r4
 8006848:	187b      	adds	r3, r7, r1
 800684a:	2280      	movs	r2, #128	@ 0x80
 800684c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800684e:	187b      	adds	r3, r7, r1
 8006850:	2202      	movs	r2, #2
 8006852:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006854:	187b      	adds	r3, r7, r1
 8006856:	2200      	movs	r2, #0
 8006858:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800685a:	187b      	adds	r3, r7, r1
 800685c:	2200      	movs	r2, #0
 800685e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM17;
 8006860:	187b      	adds	r3, r7, r1
 8006862:	2205      	movs	r2, #5
 8006864:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006866:	187a      	adds	r2, r7, r1
 8006868:	23a0      	movs	r3, #160	@ 0xa0
 800686a:	05db      	lsls	r3, r3, #23
 800686c:	0011      	movs	r1, r2
 800686e:	0018      	movs	r0, r3
 8006870:	f001 f888 	bl	8007984 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM17_MspPostInit 1 */

    /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8006874:	46c0      	nop			@ (mov r8, r8)
 8006876:	46bd      	mov	sp, r7
 8006878:	b009      	add	sp, #36	@ 0x24
 800687a:	bd90      	pop	{r4, r7, pc}
 800687c:	40014800 	.word	0x40014800
 8006880:	40021000 	.word	0x40021000

08006884 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006884:	b590      	push	{r4, r7, lr}
 8006886:	b09f      	sub	sp, #124	@ 0x7c
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800688c:	2364      	movs	r3, #100	@ 0x64
 800688e:	18fb      	adds	r3, r7, r3
 8006890:	0018      	movs	r0, r3
 8006892:	2314      	movs	r3, #20
 8006894:	001a      	movs	r2, r3
 8006896:	2100      	movs	r1, #0
 8006898:	f006 fe98 	bl	800d5cc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800689c:	2418      	movs	r4, #24
 800689e:	193b      	adds	r3, r7, r4
 80068a0:	0018      	movs	r0, r3
 80068a2:	234c      	movs	r3, #76	@ 0x4c
 80068a4:	001a      	movs	r2, r3
 80068a6:	2100      	movs	r1, #0
 80068a8:	f006 fe90 	bl	800d5cc <memset>
  if(huart->Instance==USART1)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a45      	ldr	r2, [pc, #276]	@ (80069c8 <HAL_UART_MspInit+0x144>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d13e      	bne.n	8006934 <HAL_UART_MspInit+0xb0>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80068b6:	193b      	adds	r3, r7, r4
 80068b8:	2201      	movs	r2, #1
 80068ba:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80068bc:	193b      	adds	r3, r7, r4
 80068be:	2200      	movs	r2, #0
 80068c0:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80068c2:	193b      	adds	r3, r7, r4
 80068c4:	0018      	movs	r0, r3
 80068c6:	f002 fd9d 	bl	8009404 <HAL_RCCEx_PeriphCLKConfig>
 80068ca:	1e03      	subs	r3, r0, #0
 80068cc:	d001      	beq.n	80068d2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80068ce:	f7ff fa33 	bl	8005d38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80068d2:	4b3e      	ldr	r3, [pc, #248]	@ (80069cc <HAL_UART_MspInit+0x148>)
 80068d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80068d6:	4b3d      	ldr	r3, [pc, #244]	@ (80069cc <HAL_UART_MspInit+0x148>)
 80068d8:	2180      	movs	r1, #128	@ 0x80
 80068da:	01c9      	lsls	r1, r1, #7
 80068dc:	430a      	orrs	r2, r1
 80068de:	641a      	str	r2, [r3, #64]	@ 0x40
 80068e0:	4b3a      	ldr	r3, [pc, #232]	@ (80069cc <HAL_UART_MspInit+0x148>)
 80068e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80068e4:	2380      	movs	r3, #128	@ 0x80
 80068e6:	01db      	lsls	r3, r3, #7
 80068e8:	4013      	ands	r3, r2
 80068ea:	617b      	str	r3, [r7, #20]
 80068ec:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80068ee:	4b37      	ldr	r3, [pc, #220]	@ (80069cc <HAL_UART_MspInit+0x148>)
 80068f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80068f2:	4b36      	ldr	r3, [pc, #216]	@ (80069cc <HAL_UART_MspInit+0x148>)
 80068f4:	2104      	movs	r1, #4
 80068f6:	430a      	orrs	r2, r1
 80068f8:	635a      	str	r2, [r3, #52]	@ 0x34
 80068fa:	4b34      	ldr	r3, [pc, #208]	@ (80069cc <HAL_UART_MspInit+0x148>)
 80068fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068fe:	2204      	movs	r2, #4
 8006900:	4013      	ands	r3, r2
 8006902:	613b      	str	r3, [r7, #16]
 8006904:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8006906:	2164      	movs	r1, #100	@ 0x64
 8006908:	187b      	adds	r3, r7, r1
 800690a:	2230      	movs	r2, #48	@ 0x30
 800690c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800690e:	187b      	adds	r3, r7, r1
 8006910:	2202      	movs	r2, #2
 8006912:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006914:	187b      	adds	r3, r7, r1
 8006916:	2200      	movs	r2, #0
 8006918:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800691a:	187b      	adds	r3, r7, r1
 800691c:	2200      	movs	r2, #0
 800691e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8006920:	187b      	adds	r3, r7, r1
 8006922:	2201      	movs	r2, #1
 8006924:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006926:	187b      	adds	r3, r7, r1
 8006928:	4a29      	ldr	r2, [pc, #164]	@ (80069d0 <HAL_UART_MspInit+0x14c>)
 800692a:	0019      	movs	r1, r3
 800692c:	0010      	movs	r0, r2
 800692e:	f001 f829 	bl	8007984 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8006932:	e044      	b.n	80069be <HAL_UART_MspInit+0x13a>
  else if(huart->Instance==USART2)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a26      	ldr	r2, [pc, #152]	@ (80069d4 <HAL_UART_MspInit+0x150>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d13f      	bne.n	80069be <HAL_UART_MspInit+0x13a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800693e:	2118      	movs	r1, #24
 8006940:	187b      	adds	r3, r7, r1
 8006942:	2202      	movs	r2, #2
 8006944:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8006946:	187b      	adds	r3, r7, r1
 8006948:	2200      	movs	r2, #0
 800694a:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800694c:	187b      	adds	r3, r7, r1
 800694e:	0018      	movs	r0, r3
 8006950:	f002 fd58 	bl	8009404 <HAL_RCCEx_PeriphCLKConfig>
 8006954:	1e03      	subs	r3, r0, #0
 8006956:	d001      	beq.n	800695c <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8006958:	f7ff f9ee 	bl	8005d38 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800695c:	4b1b      	ldr	r3, [pc, #108]	@ (80069cc <HAL_UART_MspInit+0x148>)
 800695e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006960:	4b1a      	ldr	r3, [pc, #104]	@ (80069cc <HAL_UART_MspInit+0x148>)
 8006962:	2180      	movs	r1, #128	@ 0x80
 8006964:	0289      	lsls	r1, r1, #10
 8006966:	430a      	orrs	r2, r1
 8006968:	63da      	str	r2, [r3, #60]	@ 0x3c
 800696a:	4b18      	ldr	r3, [pc, #96]	@ (80069cc <HAL_UART_MspInit+0x148>)
 800696c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800696e:	2380      	movs	r3, #128	@ 0x80
 8006970:	029b      	lsls	r3, r3, #10
 8006972:	4013      	ands	r3, r2
 8006974:	60fb      	str	r3, [r7, #12]
 8006976:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006978:	4b14      	ldr	r3, [pc, #80]	@ (80069cc <HAL_UART_MspInit+0x148>)
 800697a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800697c:	4b13      	ldr	r3, [pc, #76]	@ (80069cc <HAL_UART_MspInit+0x148>)
 800697e:	2101      	movs	r1, #1
 8006980:	430a      	orrs	r2, r1
 8006982:	635a      	str	r2, [r3, #52]	@ 0x34
 8006984:	4b11      	ldr	r3, [pc, #68]	@ (80069cc <HAL_UART_MspInit+0x148>)
 8006986:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006988:	2201      	movs	r2, #1
 800698a:	4013      	ands	r3, r2
 800698c:	60bb      	str	r3, [r7, #8]
 800698e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8006990:	2164      	movs	r1, #100	@ 0x64
 8006992:	187b      	adds	r3, r7, r1
 8006994:	220c      	movs	r2, #12
 8006996:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006998:	187b      	adds	r3, r7, r1
 800699a:	2202      	movs	r2, #2
 800699c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800699e:	187b      	adds	r3, r7, r1
 80069a0:	2200      	movs	r2, #0
 80069a2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80069a4:	187b      	adds	r3, r7, r1
 80069a6:	2200      	movs	r2, #0
 80069a8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80069aa:	187b      	adds	r3, r7, r1
 80069ac:	2201      	movs	r2, #1
 80069ae:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80069b0:	187a      	adds	r2, r7, r1
 80069b2:	23a0      	movs	r3, #160	@ 0xa0
 80069b4:	05db      	lsls	r3, r3, #23
 80069b6:	0011      	movs	r1, r2
 80069b8:	0018      	movs	r0, r3
 80069ba:	f000 ffe3 	bl	8007984 <HAL_GPIO_Init>
}
 80069be:	46c0      	nop			@ (mov r8, r8)
 80069c0:	46bd      	mov	sp, r7
 80069c2:	b01f      	add	sp, #124	@ 0x7c
 80069c4:	bd90      	pop	{r4, r7, pc}
 80069c6:	46c0      	nop			@ (mov r8, r8)
 80069c8:	40013800 	.word	0x40013800
 80069cc:	40021000 	.word	0x40021000
 80069d0:	50000800 	.word	0x50000800
 80069d4:	40004400 	.word	0x40004400

080069d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80069dc:	46c0      	nop			@ (mov r8, r8)
 80069de:	e7fd      	b.n	80069dc <NMI_Handler+0x4>

080069e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	//drawString(0, 150, "ERROR", WHITE, BLACK, 10, 10);
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80069e4:	46c0      	nop			@ (mov r8, r8)
 80069e6:	e7fd      	b.n	80069e4 <HardFault_Handler+0x4>

080069e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80069ec:	46c0      	nop			@ (mov r8, r8)
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}

080069f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80069f2:	b580      	push	{r7, lr}
 80069f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80069f6:	46c0      	nop			@ (mov r8, r8)
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}

080069fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006a00:	f000 feb6 	bl	8007770 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006a04:	46c0      	nop			@ (mov r8, r8)
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}
	...

08006a0c <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8006a10:	4b05      	ldr	r3, [pc, #20]	@ (8006a28 <RTC_TAMP_IRQHandler+0x1c>)
 8006a12:	0018      	movs	r0, r3
 8006a14:	f003 f938 	bl	8009c88 <HAL_RTC_AlarmIRQHandler>
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8006a18:	4b03      	ldr	r3, [pc, #12]	@ (8006a28 <RTC_TAMP_IRQHandler+0x1c>)
 8006a1a:	0018      	movs	r0, r3
 8006a1c:	f003 f9b7 	bl	8009d8e <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 8006a20:	46c0      	nop			@ (mov r8, r8)
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}
 8006a26:	46c0      	nop			@ (mov r8, r8)
 8006a28:	20001c40 	.word	0x20001c40

08006a2c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	af00      	add	r7, sp, #0
  return 1;
 8006a30:	2301      	movs	r3, #1
}
 8006a32:	0018      	movs	r0, r3
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}

08006a38 <_kill>:

int _kill(int pid, int sig)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b082      	sub	sp, #8
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8006a42:	f006 fe2b 	bl	800d69c <__errno>
 8006a46:	0003      	movs	r3, r0
 8006a48:	2216      	movs	r2, #22
 8006a4a:	601a      	str	r2, [r3, #0]
  return -1;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	425b      	negs	r3, r3
}
 8006a50:	0018      	movs	r0, r3
 8006a52:	46bd      	mov	sp, r7
 8006a54:	b002      	add	sp, #8
 8006a56:	bd80      	pop	{r7, pc}

08006a58 <_exit>:

void _exit (int status)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b082      	sub	sp, #8
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8006a60:	2301      	movs	r3, #1
 8006a62:	425a      	negs	r2, r3
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	0011      	movs	r1, r2
 8006a68:	0018      	movs	r0, r3
 8006a6a:	f7ff ffe5 	bl	8006a38 <_kill>
  while (1) {}    /* Make sure we hang here */
 8006a6e:	46c0      	nop			@ (mov r8, r8)
 8006a70:	e7fd      	b.n	8006a6e <_exit+0x16>

08006a72 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006a72:	b580      	push	{r7, lr}
 8006a74:	b086      	sub	sp, #24
 8006a76:	af00      	add	r7, sp, #0
 8006a78:	60f8      	str	r0, [r7, #12]
 8006a7a:	60b9      	str	r1, [r7, #8]
 8006a7c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006a7e:	2300      	movs	r3, #0
 8006a80:	617b      	str	r3, [r7, #20]
 8006a82:	e00a      	b.n	8006a9a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8006a84:	e000      	b.n	8006a88 <_read+0x16>
 8006a86:	bf00      	nop
 8006a88:	0001      	movs	r1, r0
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	1c5a      	adds	r2, r3, #1
 8006a8e:	60ba      	str	r2, [r7, #8]
 8006a90:	b2ca      	uxtb	r2, r1
 8006a92:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	3301      	adds	r3, #1
 8006a98:	617b      	str	r3, [r7, #20]
 8006a9a:	697a      	ldr	r2, [r7, #20]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	dbf0      	blt.n	8006a84 <_read+0x12>
  }

  return len;
 8006aa2:	687b      	ldr	r3, [r7, #4]
}
 8006aa4:	0018      	movs	r0, r3
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	b006      	add	sp, #24
 8006aaa:	bd80      	pop	{r7, pc}

08006aac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b086      	sub	sp, #24
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	60f8      	str	r0, [r7, #12]
 8006ab4:	60b9      	str	r1, [r7, #8]
 8006ab6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006ab8:	2300      	movs	r3, #0
 8006aba:	617b      	str	r3, [r7, #20]
 8006abc:	e009      	b.n	8006ad2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	1c5a      	adds	r2, r3, #1
 8006ac2:	60ba      	str	r2, [r7, #8]
 8006ac4:	781b      	ldrb	r3, [r3, #0]
 8006ac6:	0018      	movs	r0, r3
 8006ac8:	e000      	b.n	8006acc <_write+0x20>
 8006aca:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	3301      	adds	r3, #1
 8006ad0:	617b      	str	r3, [r7, #20]
 8006ad2:	697a      	ldr	r2, [r7, #20]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	dbf1      	blt.n	8006abe <_write+0x12>
  }
  return len;
 8006ada:	687b      	ldr	r3, [r7, #4]
}
 8006adc:	0018      	movs	r0, r3
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	b006      	add	sp, #24
 8006ae2:	bd80      	pop	{r7, pc}

08006ae4 <_close>:

int _close(int file)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b082      	sub	sp, #8
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8006aec:	2301      	movs	r3, #1
 8006aee:	425b      	negs	r3, r3
}
 8006af0:	0018      	movs	r0, r3
 8006af2:	46bd      	mov	sp, r7
 8006af4:	b002      	add	sp, #8
 8006af6:	bd80      	pop	{r7, pc}

08006af8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b082      	sub	sp, #8
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	2280      	movs	r2, #128	@ 0x80
 8006b06:	0192      	lsls	r2, r2, #6
 8006b08:	605a      	str	r2, [r3, #4]
  return 0;
 8006b0a:	2300      	movs	r3, #0
}
 8006b0c:	0018      	movs	r0, r3
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	b002      	add	sp, #8
 8006b12:	bd80      	pop	{r7, pc}

08006b14 <_isatty>:

int _isatty(int file)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b082      	sub	sp, #8
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8006b1c:	2301      	movs	r3, #1
}
 8006b1e:	0018      	movs	r0, r3
 8006b20:	46bd      	mov	sp, r7
 8006b22:	b002      	add	sp, #8
 8006b24:	bd80      	pop	{r7, pc}

08006b26 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006b26:	b580      	push	{r7, lr}
 8006b28:	b084      	sub	sp, #16
 8006b2a:	af00      	add	r7, sp, #0
 8006b2c:	60f8      	str	r0, [r7, #12]
 8006b2e:	60b9      	str	r1, [r7, #8]
 8006b30:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8006b32:	2300      	movs	r3, #0
}
 8006b34:	0018      	movs	r0, r3
 8006b36:	46bd      	mov	sp, r7
 8006b38:	b004      	add	sp, #16
 8006b3a:	bd80      	pop	{r7, pc}

08006b3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b086      	sub	sp, #24
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006b44:	4a14      	ldr	r2, [pc, #80]	@ (8006b98 <_sbrk+0x5c>)
 8006b46:	4b15      	ldr	r3, [pc, #84]	@ (8006b9c <_sbrk+0x60>)
 8006b48:	1ad3      	subs	r3, r2, r3
 8006b4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006b50:	4b13      	ldr	r3, [pc, #76]	@ (8006ba0 <_sbrk+0x64>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d102      	bne.n	8006b5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006b58:	4b11      	ldr	r3, [pc, #68]	@ (8006ba0 <_sbrk+0x64>)
 8006b5a:	4a12      	ldr	r2, [pc, #72]	@ (8006ba4 <_sbrk+0x68>)
 8006b5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006b5e:	4b10      	ldr	r3, [pc, #64]	@ (8006ba0 <_sbrk+0x64>)
 8006b60:	681a      	ldr	r2, [r3, #0]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	18d3      	adds	r3, r2, r3
 8006b66:	693a      	ldr	r2, [r7, #16]
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d207      	bcs.n	8006b7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006b6c:	f006 fd96 	bl	800d69c <__errno>
 8006b70:	0003      	movs	r3, r0
 8006b72:	220c      	movs	r2, #12
 8006b74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006b76:	2301      	movs	r3, #1
 8006b78:	425b      	negs	r3, r3
 8006b7a:	e009      	b.n	8006b90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006b7c:	4b08      	ldr	r3, [pc, #32]	@ (8006ba0 <_sbrk+0x64>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006b82:	4b07      	ldr	r3, [pc, #28]	@ (8006ba0 <_sbrk+0x64>)
 8006b84:	681a      	ldr	r2, [r3, #0]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	18d2      	adds	r2, r2, r3
 8006b8a:	4b05      	ldr	r3, [pc, #20]	@ (8006ba0 <_sbrk+0x64>)
 8006b8c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
}
 8006b90:	0018      	movs	r0, r3
 8006b92:	46bd      	mov	sp, r7
 8006b94:	b006      	add	sp, #24
 8006b96:	bd80      	pop	{r7, pc}
 8006b98:	20024000 	.word	0x20024000
 8006b9c:	00000400 	.word	0x00000400
 8006ba0:	20001e44 	.word	0x20001e44
 8006ba4:	20001f98 	.word	0x20001f98

08006ba8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006bac:	46c0      	nop			@ (mov r8, r8)
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}

08006bb2 <json_getValue>:
static inline char const* json_getValue( json_t const* property ) {
 8006bb2:	b580      	push	{r7, lr}
 8006bb4:	b082      	sub	sp, #8
 8006bb6:	af00      	add	r7, sp, #0
 8006bb8:	6078      	str	r0, [r7, #4]
    return property->u.value;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	689b      	ldr	r3, [r3, #8]
}
 8006bbe:	0018      	movs	r0, r3
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	b002      	add	sp, #8
 8006bc4:	bd80      	pop	{r7, pc}

08006bc6 <json_getType>:
static inline jsonType_t json_getType( json_t const* json ) {
 8006bc6:	b580      	push	{r7, lr}
 8006bc8:	b082      	sub	sp, #8
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	6078      	str	r0, [r7, #4]
    return json->type;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	7c1b      	ldrb	r3, [r3, #16]
}
 8006bd2:	0018      	movs	r0, r3
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	b002      	add	sp, #8
 8006bd8:	bd80      	pop	{r7, pc}

08006bda <json_getProperty>:
    unsigned int nextFree;  /**< The index of the next free json property. */
    jsonPool_t pool;
} jsonStaticPool_t;

/* Search a property by its name in a JSON object. */
json_t const* json_getProperty( json_t const* obj, char const* property ) {
 8006bda:	b580      	push	{r7, lr}
 8006bdc:	b084      	sub	sp, #16
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	6078      	str	r0, [r7, #4]
 8006be2:	6039      	str	r1, [r7, #0]
    json_t const* sibling;
    for( sibling = obj->u.c.child; sibling; sibling = sibling->sibling )
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	60fb      	str	r3, [r7, #12]
 8006bea:	e011      	b.n	8006c10 <json_getProperty+0x36>
        if ( sibling->name && !strcmp( sibling->name, property ) )
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d00a      	beq.n	8006c0a <json_getProperty+0x30>
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	683a      	ldr	r2, [r7, #0]
 8006bfa:	0011      	movs	r1, r2
 8006bfc:	0018      	movs	r0, r3
 8006bfe:	f7f9 fa81 	bl	8000104 <strcmp>
 8006c02:	1e03      	subs	r3, r0, #0
 8006c04:	d101      	bne.n	8006c0a <json_getProperty+0x30>
            return sibling;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	e006      	b.n	8006c18 <json_getProperty+0x3e>
    for( sibling = obj->u.c.child; sibling; sibling = sibling->sibling )
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	60fb      	str	r3, [r7, #12]
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d1ea      	bne.n	8006bec <json_getProperty+0x12>
    return 0;
 8006c16:	2300      	movs	r3, #0
}
 8006c18:	0018      	movs	r0, r3
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	b004      	add	sp, #16
 8006c1e:	bd80      	pop	{r7, pc}

08006c20 <json_getPropertyValue>:

/* Search a property by its name in a JSON object and return its value. */
char const* json_getPropertyValue( json_t const* obj, char const* property ) {
 8006c20:	b5b0      	push	{r4, r5, r7, lr}
 8006c22:	b084      	sub	sp, #16
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	6039      	str	r1, [r7, #0]
	json_t const* field = json_getProperty( obj, property );
 8006c2a:	683a      	ldr	r2, [r7, #0]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	0011      	movs	r1, r2
 8006c30:	0018      	movs	r0, r3
 8006c32:	f7ff ffd2 	bl	8006bda <json_getProperty>
 8006c36:	0003      	movs	r3, r0
 8006c38:	60fb      	str	r3, [r7, #12]
	if ( !field ) return 0;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d101      	bne.n	8006c44 <json_getPropertyValue+0x24>
 8006c40:	2300      	movs	r3, #0
 8006c42:	e012      	b.n	8006c6a <json_getPropertyValue+0x4a>
        jsonType_t type = json_getType( field );
 8006c44:	250b      	movs	r5, #11
 8006c46:	197c      	adds	r4, r7, r5
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	0018      	movs	r0, r3
 8006c4c:	f7ff ffbb 	bl	8006bc6 <json_getType>
 8006c50:	0003      	movs	r3, r0
 8006c52:	7023      	strb	r3, [r4, #0]
        if ( JSON_ARRAY >= type ) return 0;
 8006c54:	197b      	adds	r3, r7, r5
 8006c56:	781b      	ldrb	r3, [r3, #0]
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	d801      	bhi.n	8006c60 <json_getPropertyValue+0x40>
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	e004      	b.n	8006c6a <json_getPropertyValue+0x4a>
	return json_getValue( field );
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	0018      	movs	r0, r3
 8006c64:	f7ff ffa5 	bl	8006bb2 <json_getValue>
 8006c68:	0003      	movs	r3, r0
}
 8006c6a:	0018      	movs	r0, r3
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	b004      	add	sp, #16
 8006c70:	bdb0      	pop	{r4, r5, r7, pc}

08006c72 <json_createWithPool>:
static char* objValue( char* ptr, json_t* obj, jsonPool_t* pool );
static char* setToNull( char* ch );
static bool isEndOfPrimitive( char ch );

/* Parse a string to get a json. */
json_t const* json_createWithPool( char *str, jsonPool_t *pool ) {
 8006c72:	b580      	push	{r7, lr}
 8006c74:	b084      	sub	sp, #16
 8006c76:	af00      	add	r7, sp, #0
 8006c78:	6078      	str	r0, [r7, #4]
 8006c7a:	6039      	str	r1, [r7, #0]
    char* ptr = goBlank( str );
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	0018      	movs	r0, r3
 8006c80:	f000 fc66 	bl	8007550 <goBlank>
 8006c84:	0003      	movs	r3, r0
 8006c86:	60fb      	str	r3, [r7, #12]
    if ( !ptr || (*ptr != '{' && *ptr != '[') ) return 0;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d007      	beq.n	8006c9e <json_createWithPool+0x2c>
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	781b      	ldrb	r3, [r3, #0]
 8006c92:	2b7b      	cmp	r3, #123	@ 0x7b
 8006c94:	d005      	beq.n	8006ca2 <json_createWithPool+0x30>
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	781b      	ldrb	r3, [r3, #0]
 8006c9a:	2b5b      	cmp	r3, #91	@ 0x5b
 8006c9c:	d001      	beq.n	8006ca2 <json_createWithPool+0x30>
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	e01d      	b.n	8006cde <json_createWithPool+0x6c>
    json_t* obj = pool->init( pool );
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	683a      	ldr	r2, [r7, #0]
 8006ca8:	0010      	movs	r0, r2
 8006caa:	4798      	blx	r3
 8006cac:	0003      	movs	r3, r0
 8006cae:	60bb      	str	r3, [r7, #8]
    obj->name    = 0;
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	605a      	str	r2, [r3, #4]
    obj->sibling = 0;
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	601a      	str	r2, [r3, #0]
    obj->u.c.child = 0;
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	609a      	str	r2, [r3, #8]
    ptr = objValue( ptr, obj, pool );
 8006cc2:	683a      	ldr	r2, [r7, #0]
 8006cc4:	68b9      	ldr	r1, [r7, #8]
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	0018      	movs	r0, r3
 8006cca:	f000 faeb 	bl	80072a4 <objValue>
 8006cce:	0003      	movs	r3, r0
 8006cd0:	60fb      	str	r3, [r7, #12]
    if ( !ptr ) return 0;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d101      	bne.n	8006cdc <json_createWithPool+0x6a>
 8006cd8:	2300      	movs	r3, #0
 8006cda:	e000      	b.n	8006cde <json_createWithPool+0x6c>
    return obj;
 8006cdc:	68bb      	ldr	r3, [r7, #8]
}
 8006cde:	0018      	movs	r0, r3
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	b004      	add	sp, #16
 8006ce4:	bd80      	pop	{r7, pc}
	...

08006ce8 <json_create>:

/* Parse a string to get a json. */
json_t const* json_create( char* str, json_t mem[], unsigned int qty ) {
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b08a      	sub	sp, #40	@ 0x28
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	60f8      	str	r0, [r7, #12]
 8006cf0:	60b9      	str	r1, [r7, #8]
 8006cf2:	607a      	str	r2, [r7, #4]
    jsonStaticPool_t spool;
    spool.mem = mem;
 8006cf4:	2114      	movs	r1, #20
 8006cf6:	187b      	adds	r3, r7, r1
 8006cf8:	68ba      	ldr	r2, [r7, #8]
 8006cfa:	601a      	str	r2, [r3, #0]
    spool.qty = qty;
 8006cfc:	187b      	adds	r3, r7, r1
 8006cfe:	687a      	ldr	r2, [r7, #4]
 8006d00:	605a      	str	r2, [r3, #4]
    spool.pool.init = poolInit;
 8006d02:	187b      	adds	r3, r7, r1
 8006d04:	4a08      	ldr	r2, [pc, #32]	@ (8006d28 <json_create+0x40>)
 8006d06:	60da      	str	r2, [r3, #12]
    spool.pool.alloc = poolAlloc;
 8006d08:	187b      	adds	r3, r7, r1
 8006d0a:	4a08      	ldr	r2, [pc, #32]	@ (8006d2c <json_create+0x44>)
 8006d0c:	611a      	str	r2, [r3, #16]
    return json_createWithPool( str, &spool.pool );
 8006d0e:	187b      	adds	r3, r7, r1
 8006d10:	330c      	adds	r3, #12
 8006d12:	001a      	movs	r2, r3
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	0011      	movs	r1, r2
 8006d18:	0018      	movs	r0, r3
 8006d1a:	f7ff ffaa 	bl	8006c72 <json_createWithPool>
 8006d1e:	0003      	movs	r3, r0
}
 8006d20:	0018      	movs	r0, r3
 8006d22:	46bd      	mov	sp, r7
 8006d24:	b00a      	add	sp, #40	@ 0x28
 8006d26:	bd80      	pop	{r7, pc}
 8006d28:	08007479 	.word	0x08007479
 8006d2c:	08007499 	.word	0x08007499

08006d30 <getEscape>:

/** Get a special character with its escape character. Examples:
  * 'b' -> '\\b', 'n' -> '\\n', 't' -> '\\t'
  * @param ch The escape character.
  * @retval  The character code. */
static char getEscape( char ch ) {
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b084      	sub	sp, #16
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	0002      	movs	r2, r0
 8006d38:	1dfb      	adds	r3, r7, #7
 8006d3a:	701a      	strb	r2, [r3, #0]
        { '/',  '/'  }, { 'b',  '\b' },
        { 'f',  '\f' }, { 'n',  '\n' },
        { 'r',  '\r' }, { 't',  '\t' },
    };
    unsigned int i;
    for( i = 0; i < sizeof pair / sizeof *pair; ++i )
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	60fb      	str	r3, [r7, #12]
 8006d40:	e011      	b.n	8006d66 <getEscape+0x36>
        if ( pair[i].ch == ch )
 8006d42:	4b0d      	ldr	r3, [pc, #52]	@ (8006d78 <getEscape+0x48>)
 8006d44:	68fa      	ldr	r2, [r7, #12]
 8006d46:	0052      	lsls	r2, r2, #1
 8006d48:	5cd3      	ldrb	r3, [r2, r3]
 8006d4a:	1dfa      	adds	r2, r7, #7
 8006d4c:	7812      	ldrb	r2, [r2, #0]
 8006d4e:	429a      	cmp	r2, r3
 8006d50:	d106      	bne.n	8006d60 <getEscape+0x30>
            return pair[i].code;
 8006d52:	4a09      	ldr	r2, [pc, #36]	@ (8006d78 <getEscape+0x48>)
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	005b      	lsls	r3, r3, #1
 8006d58:	18d3      	adds	r3, r2, r3
 8006d5a:	3301      	adds	r3, #1
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	e006      	b.n	8006d6e <getEscape+0x3e>
    for( i = 0; i < sizeof pair / sizeof *pair; ++i )
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	3301      	adds	r3, #1
 8006d64:	60fb      	str	r3, [r7, #12]
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	2b07      	cmp	r3, #7
 8006d6a:	d9ea      	bls.n	8006d42 <getEscape+0x12>
    return '\0';
 8006d6c:	2300      	movs	r3, #0
}
 8006d6e:	0018      	movs	r0, r3
 8006d70:	46bd      	mov	sp, r7
 8006d72:	b004      	add	sp, #16
 8006d74:	bd80      	pop	{r7, pc}
 8006d76:	46c0      	nop			@ (mov r8, r8)
 8006d78:	080106c8 	.word	0x080106c8

08006d7c <getCharFromUnicode>:

/** Parse 4 characters.
  * @param str Pointer to  first digit.
  * @retval '?' If the four characters are hexadecimal digits.
  * @retval '\0' In other cases. */
static unsigned char getCharFromUnicode( unsigned char const* str ) {
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b084      	sub	sp, #16
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
    unsigned int i;
    for( i = 0; i < 4; ++i )
 8006d84:	2300      	movs	r3, #0
 8006d86:	60fb      	str	r3, [r7, #12]
 8006d88:	e010      	b.n	8006dac <getCharFromUnicode+0x30>
        if ( !isxdigit( str[i] ) )
 8006d8a:	687a      	ldr	r2, [r7, #4]
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	18d3      	adds	r3, r2, r3
 8006d90:	781b      	ldrb	r3, [r3, #0]
 8006d92:	1c5a      	adds	r2, r3, #1
 8006d94:	4b09      	ldr	r3, [pc, #36]	@ (8006dbc <getCharFromUnicode+0x40>)
 8006d96:	18d3      	adds	r3, r2, r3
 8006d98:	781b      	ldrb	r3, [r3, #0]
 8006d9a:	001a      	movs	r2, r3
 8006d9c:	2344      	movs	r3, #68	@ 0x44
 8006d9e:	4013      	ands	r3, r2
 8006da0:	d101      	bne.n	8006da6 <getCharFromUnicode+0x2a>
            return '\0';
 8006da2:	2300      	movs	r3, #0
 8006da4:	e006      	b.n	8006db4 <getCharFromUnicode+0x38>
    for( i = 0; i < 4; ++i )
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	3301      	adds	r3, #1
 8006daa:	60fb      	str	r3, [r7, #12]
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2b03      	cmp	r3, #3
 8006db0:	d9eb      	bls.n	8006d8a <getCharFromUnicode+0xe>
    return '?';
 8006db2:	233f      	movs	r3, #63	@ 0x3f
}
 8006db4:	0018      	movs	r0, r3
 8006db6:	46bd      	mov	sp, r7
 8006db8:	b004      	add	sp, #16
 8006dba:	bd80      	pop	{r7, pc}
 8006dbc:	080107e0 	.word	0x080107e0

08006dc0 <parseString>:
/** Parse a string and replace the scape characters by their meaning characters.
  * This parser stops when finds the character '\"'. Then replaces '\"' by '\0'.
  * @param str Pointer to first character.
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* parseString( char* str ) {
 8006dc0:	b5b0      	push	{r4, r5, r7, lr}
 8006dc2:	b086      	sub	sp, #24
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
    unsigned char* head = (unsigned char*)str;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	617b      	str	r3, [r7, #20]
    unsigned char* tail = (unsigned char*)str;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	613b      	str	r3, [r7, #16]
    for( ; *head; ++head, ++tail ) {
 8006dd0:	e04f      	b.n	8006e72 <parseString+0xb2>
        if ( *head == '\"' ) {
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	781b      	ldrb	r3, [r3, #0]
 8006dd6:	2b22      	cmp	r3, #34	@ 0x22
 8006dd8:	d107      	bne.n	8006dea <parseString+0x2a>
            *tail = '\0';
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	701a      	strb	r2, [r3, #0]
            return (char*)++head;
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	3301      	adds	r3, #1
 8006de4:	617b      	str	r3, [r7, #20]
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	e048      	b.n	8006e7c <parseString+0xbc>
        }
        if ( *head == '\\' ) {
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	781b      	ldrb	r3, [r3, #0]
 8006dee:	2b5c      	cmp	r3, #92	@ 0x5c
 8006df0:	d135      	bne.n	8006e5e <parseString+0x9e>
            if ( *++head == 'u' ) {
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	3301      	adds	r3, #1
 8006df6:	617b      	str	r3, [r7, #20]
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	781b      	ldrb	r3, [r3, #0]
 8006dfc:	2b75      	cmp	r3, #117	@ 0x75
 8006dfe:	d119      	bne.n	8006e34 <parseString+0x74>
                char const ch = getCharFromUnicode( ++head );
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	3301      	adds	r3, #1
 8006e04:	617b      	str	r3, [r7, #20]
 8006e06:	250e      	movs	r5, #14
 8006e08:	197c      	adds	r4, r7, r5
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	0018      	movs	r0, r3
 8006e0e:	f7ff ffb5 	bl	8006d7c <getCharFromUnicode>
 8006e12:	0003      	movs	r3, r0
 8006e14:	7023      	strb	r3, [r4, #0]
                if ( ch == '\0' ) return 0;
 8006e16:	197b      	adds	r3, r7, r5
 8006e18:	781b      	ldrb	r3, [r3, #0]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d101      	bne.n	8006e22 <parseString+0x62>
 8006e1e:	2300      	movs	r3, #0
 8006e20:	e02c      	b.n	8006e7c <parseString+0xbc>
                *tail = ch;
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	220e      	movs	r2, #14
 8006e26:	18ba      	adds	r2, r7, r2
 8006e28:	7812      	ldrb	r2, [r2, #0]
 8006e2a:	701a      	strb	r2, [r3, #0]
                head += 3;
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	3303      	adds	r3, #3
 8006e30:	617b      	str	r3, [r7, #20]
 8006e32:	e018      	b.n	8006e66 <parseString+0xa6>
            }
            else {
                char const esc = getEscape( *head );
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	781b      	ldrb	r3, [r3, #0]
 8006e38:	250f      	movs	r5, #15
 8006e3a:	197c      	adds	r4, r7, r5
 8006e3c:	0018      	movs	r0, r3
 8006e3e:	f7ff ff77 	bl	8006d30 <getEscape>
 8006e42:	0003      	movs	r3, r0
 8006e44:	7023      	strb	r3, [r4, #0]
                if ( esc == '\0' ) return 0;
 8006e46:	197b      	adds	r3, r7, r5
 8006e48:	781b      	ldrb	r3, [r3, #0]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d101      	bne.n	8006e52 <parseString+0x92>
 8006e4e:	2300      	movs	r3, #0
 8006e50:	e014      	b.n	8006e7c <parseString+0xbc>
                *tail = esc;
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	220f      	movs	r2, #15
 8006e56:	18ba      	adds	r2, r7, r2
 8006e58:	7812      	ldrb	r2, [r2, #0]
 8006e5a:	701a      	strb	r2, [r3, #0]
 8006e5c:	e003      	b.n	8006e66 <parseString+0xa6>
            }
        }
        else *tail = *head;
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	781a      	ldrb	r2, [r3, #0]
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	701a      	strb	r2, [r3, #0]
    for( ; *head; ++head, ++tail ) {
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	3301      	adds	r3, #1
 8006e6a:	617b      	str	r3, [r7, #20]
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	3301      	adds	r3, #1
 8006e70:	613b      	str	r3, [r7, #16]
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	781b      	ldrb	r3, [r3, #0]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d1ab      	bne.n	8006dd2 <parseString+0x12>
    }
    return 0;
 8006e7a:	2300      	movs	r3, #0
}
 8006e7c:	0018      	movs	r0, r3
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	b006      	add	sp, #24
 8006e82:	bdb0      	pop	{r4, r5, r7, pc}

08006e84 <propertyName>:
/** Parse a string to get the name of a property.
  * @param ptr Pointer to first character.
  * @param property The property to assign the name.
  * @retval Pointer to first of property value. If success.
  * @retval Null pointer if any error occur. */
static char* propertyName( char* ptr, json_t* property ) {
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b082      	sub	sp, #8
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
 8006e8c:	6039      	str	r1, [r7, #0]
    property->name = ++ptr;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	3301      	adds	r3, #1
 8006e92:	607b      	str	r3, [r7, #4]
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	687a      	ldr	r2, [r7, #4]
 8006e98:	605a      	str	r2, [r3, #4]
    ptr = parseString( ptr );
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	0018      	movs	r0, r3
 8006e9e:	f7ff ff8f 	bl	8006dc0 <parseString>
 8006ea2:	0003      	movs	r3, r0
 8006ea4:	607b      	str	r3, [r7, #4]
    if ( !ptr ) return 0;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d101      	bne.n	8006eb0 <propertyName+0x2c>
 8006eac:	2300      	movs	r3, #0
 8006eae:	e017      	b.n	8006ee0 <propertyName+0x5c>
    ptr = goBlank( ptr );
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	0018      	movs	r0, r3
 8006eb4:	f000 fb4c 	bl	8007550 <goBlank>
 8006eb8:	0003      	movs	r3, r0
 8006eba:	607b      	str	r3, [r7, #4]
    if ( !ptr ) return 0;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d101      	bne.n	8006ec6 <propertyName+0x42>
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	e00c      	b.n	8006ee0 <propertyName+0x5c>
    if ( *ptr++ != ':' ) return 0;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	1c5a      	adds	r2, r3, #1
 8006eca:	607a      	str	r2, [r7, #4]
 8006ecc:	781b      	ldrb	r3, [r3, #0]
 8006ece:	2b3a      	cmp	r3, #58	@ 0x3a
 8006ed0:	d001      	beq.n	8006ed6 <propertyName+0x52>
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	e004      	b.n	8006ee0 <propertyName+0x5c>
    return goBlank( ptr );
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	0018      	movs	r0, r3
 8006eda:	f000 fb39 	bl	8007550 <goBlank>
 8006ede:	0003      	movs	r3, r0
}
 8006ee0:	0018      	movs	r0, r3
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	b002      	add	sp, #8
 8006ee6:	bd80      	pop	{r7, pc}

08006ee8 <textValue>:
/** Parse a string to get the value of a property when its type is JSON_TEXT.
  * @param ptr Pointer to first character ('\"').
  * @param property The property to assign the name.
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* textValue( char* ptr, json_t* property ) {
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b082      	sub	sp, #8
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	6039      	str	r1, [r7, #0]
    ++property->u.value;
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	689b      	ldr	r3, [r3, #8]
 8006ef6:	1c5a      	adds	r2, r3, #1
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	609a      	str	r2, [r3, #8]
    ptr = parseString( ++ptr );
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	3301      	adds	r3, #1
 8006f00:	607b      	str	r3, [r7, #4]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	0018      	movs	r0, r3
 8006f06:	f7ff ff5b 	bl	8006dc0 <parseString>
 8006f0a:	0003      	movs	r3, r0
 8006f0c:	607b      	str	r3, [r7, #4]
    if ( !ptr ) return 0;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d101      	bne.n	8006f18 <textValue+0x30>
 8006f14:	2300      	movs	r3, #0
 8006f16:	e003      	b.n	8006f20 <textValue+0x38>
    property->type = JSON_TEXT;
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	2202      	movs	r2, #2
 8006f1c:	741a      	strb	r2, [r3, #16]
    return ptr;
 8006f1e:	687b      	ldr	r3, [r7, #4]
}
 8006f20:	0018      	movs	r0, r3
 8006f22:	46bd      	mov	sp, r7
 8006f24:	b002      	add	sp, #8
 8006f26:	bd80      	pop	{r7, pc}

08006f28 <checkStr>:
/** Compare two strings until get the null character in the second one.
  * @param ptr sub string
  * @param str main string
  * @retval Pointer to next character.
  * @retval Null pointer if any error occur. */
static char* checkStr( char* ptr, char const* str ) {
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b082      	sub	sp, #8
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
 8006f30:	6039      	str	r1, [r7, #0]
    while( *str )
 8006f32:	e00b      	b.n	8006f4c <checkStr+0x24>
        if ( *ptr++ != *str++ )
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	1c5a      	adds	r2, r3, #1
 8006f38:	607a      	str	r2, [r7, #4]
 8006f3a:	781a      	ldrb	r2, [r3, #0]
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	1c59      	adds	r1, r3, #1
 8006f40:	6039      	str	r1, [r7, #0]
 8006f42:	781b      	ldrb	r3, [r3, #0]
 8006f44:	429a      	cmp	r2, r3
 8006f46:	d001      	beq.n	8006f4c <checkStr+0x24>
            return 0;
 8006f48:	2300      	movs	r3, #0
 8006f4a:	e004      	b.n	8006f56 <checkStr+0x2e>
    while( *str )
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	781b      	ldrb	r3, [r3, #0]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d1ef      	bne.n	8006f34 <checkStr+0xc>
    return ptr;
 8006f54:	687b      	ldr	r3, [r7, #4]
}
 8006f56:	0018      	movs	r0, r3
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	b002      	add	sp, #8
 8006f5c:	bd80      	pop	{r7, pc}

08006f5e <primitiveValue>:
  * @param property Property handler to set the value and the type, (true, false or null).
  * @param value String with the primitive literal.
  * @param type The code of the type. ( JSON_BOOLEAN or JSON_NULL )
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* primitiveValue( char* ptr, json_t* property, char const* value, jsonType_t type ) {
 8006f5e:	b580      	push	{r7, lr}
 8006f60:	b084      	sub	sp, #16
 8006f62:	af00      	add	r7, sp, #0
 8006f64:	60f8      	str	r0, [r7, #12]
 8006f66:	60b9      	str	r1, [r7, #8]
 8006f68:	607a      	str	r2, [r7, #4]
 8006f6a:	001a      	movs	r2, r3
 8006f6c:	1cfb      	adds	r3, r7, #3
 8006f6e:	701a      	strb	r2, [r3, #0]
    ptr = checkStr( ptr, value );
 8006f70:	687a      	ldr	r2, [r7, #4]
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	0011      	movs	r1, r2
 8006f76:	0018      	movs	r0, r3
 8006f78:	f7ff ffd6 	bl	8006f28 <checkStr>
 8006f7c:	0003      	movs	r3, r0
 8006f7e:	60fb      	str	r3, [r7, #12]
    if ( !ptr || !isEndOfPrimitive( *ptr ) ) return 0;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d00b      	beq.n	8006f9e <primitiveValue+0x40>
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	781b      	ldrb	r3, [r3, #0]
 8006f8a:	0018      	movs	r0, r3
 8006f8c:	f000 fb30 	bl	80075f0 <isEndOfPrimitive>
 8006f90:	0003      	movs	r3, r0
 8006f92:	001a      	movs	r2, r3
 8006f94:	2301      	movs	r3, #1
 8006f96:	4053      	eors	r3, r2
 8006f98:	b2db      	uxtb	r3, r3
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d001      	beq.n	8006fa2 <primitiveValue+0x44>
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	e00a      	b.n	8006fb8 <primitiveValue+0x5a>
    ptr = setToNull( ptr );
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	0018      	movs	r0, r3
 8006fa6:	f000 fb05 	bl	80075b4 <setToNull>
 8006faa:	0003      	movs	r3, r0
 8006fac:	60fb      	str	r3, [r7, #12]
    property->type = type;
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	1cfa      	adds	r2, r7, #3
 8006fb2:	7812      	ldrb	r2, [r2, #0]
 8006fb4:	741a      	strb	r2, [r3, #16]
    return ptr;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
}
 8006fb8:	0018      	movs	r0, r3
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	b004      	add	sp, #16
 8006fbe:	bd80      	pop	{r7, pc}

08006fc0 <trueValue>:
  * If the first character after the value is different of '}' or ']' is set to '\0'.
  * @param ptr Pointer to first character.
  * @param property Property handler to set the value and the type, (true, false or null).
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* trueValue( char* ptr, json_t* property ) {
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b082      	sub	sp, #8
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	6039      	str	r1, [r7, #0]
    return primitiveValue( ptr, property, "true", JSON_BOOLEAN );
 8006fca:	4a05      	ldr	r2, [pc, #20]	@ (8006fe0 <trueValue+0x20>)
 8006fcc:	6839      	ldr	r1, [r7, #0]
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	2303      	movs	r3, #3
 8006fd2:	f7ff ffc4 	bl	8006f5e <primitiveValue>
 8006fd6:	0003      	movs	r3, r0
}
 8006fd8:	0018      	movs	r0, r3
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	b002      	add	sp, #8
 8006fde:	bd80      	pop	{r7, pc}
 8006fe0:	0800feb4 	.word	0x0800feb4

08006fe4 <falseValue>:
  * If the first character after the value is different of '}' or ']' is set to '\0'.
  * @param ptr Pointer to first character.
  * @param property Property handler to set the value and the type, (true, false or null).
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* falseValue( char* ptr, json_t* property ) {
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b082      	sub	sp, #8
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
 8006fec:	6039      	str	r1, [r7, #0]
    return primitiveValue( ptr, property, "false", JSON_BOOLEAN );
 8006fee:	4a05      	ldr	r2, [pc, #20]	@ (8007004 <falseValue+0x20>)
 8006ff0:	6839      	ldr	r1, [r7, #0]
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	2303      	movs	r3, #3
 8006ff6:	f7ff ffb2 	bl	8006f5e <primitiveValue>
 8006ffa:	0003      	movs	r3, r0
}
 8006ffc:	0018      	movs	r0, r3
 8006ffe:	46bd      	mov	sp, r7
 8007000:	b002      	add	sp, #8
 8007002:	bd80      	pop	{r7, pc}
 8007004:	0800febc 	.word	0x0800febc

08007008 <nullValue>:
  * If the first character after the value is different of '}' or ']' is set to '\0'.
  * @param ptr Pointer to first character.
  * @param property Property handler to set the value and the type, (true, false or null).
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* nullValue( char* ptr, json_t* property ) {
 8007008:	b580      	push	{r7, lr}
 800700a:	b082      	sub	sp, #8
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
 8007010:	6039      	str	r1, [r7, #0]
    return primitiveValue( ptr, property, "null", JSON_NULL );
 8007012:	4a05      	ldr	r2, [pc, #20]	@ (8007028 <nullValue+0x20>)
 8007014:	6839      	ldr	r1, [r7, #0]
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	2306      	movs	r3, #6
 800701a:	f7ff ffa0 	bl	8006f5e <primitiveValue>
 800701e:	0003      	movs	r3, r0
}
 8007020:	0018      	movs	r0, r3
 8007022:	46bd      	mov	sp, r7
 8007024:	b002      	add	sp, #8
 8007026:	bd80      	pop	{r7, pc}
 8007028:	0800fec4 	.word	0x0800fec4

0800702c <expValue>:

/** Analyze the exponential part of a real number.
  * @param ptr Pointer to first character.
  * @retval Pointer to first non numerical after the string. If success.
  * @retval Null pointer if any error occur. */
static char* expValue( char* ptr ) {
 800702c:	b580      	push	{r7, lr}
 800702e:	b082      	sub	sp, #8
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
    if ( *ptr == '-' || *ptr == '+' ) ++ptr;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	781b      	ldrb	r3, [r3, #0]
 8007038:	2b2d      	cmp	r3, #45	@ 0x2d
 800703a:	d003      	beq.n	8007044 <expValue+0x18>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	781b      	ldrb	r3, [r3, #0]
 8007040:	2b2b      	cmp	r3, #43	@ 0x2b
 8007042:	d102      	bne.n	800704a <expValue+0x1e>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	3301      	adds	r3, #1
 8007048:	607b      	str	r3, [r7, #4]
    if ( !isdigit( (int)(*ptr) ) ) return 0;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	781b      	ldrb	r3, [r3, #0]
 800704e:	1c5a      	adds	r2, r3, #1
 8007050:	4b0b      	ldr	r3, [pc, #44]	@ (8007080 <expValue+0x54>)
 8007052:	18d3      	adds	r3, r2, r3
 8007054:	781b      	ldrb	r3, [r3, #0]
 8007056:	001a      	movs	r2, r3
 8007058:	2304      	movs	r3, #4
 800705a:	4013      	ands	r3, r2
 800705c:	d101      	bne.n	8007062 <expValue+0x36>
 800705e:	2300      	movs	r3, #0
 8007060:	e009      	b.n	8007076 <expValue+0x4a>
    ptr = goNum( ++ptr );
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	3301      	adds	r3, #1
 8007066:	607b      	str	r3, [r7, #4]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	0018      	movs	r0, r3
 800706c:	f000 fa82 	bl	8007574 <goNum>
 8007070:	0003      	movs	r3, r0
 8007072:	607b      	str	r3, [r7, #4]
    return ptr;
 8007074:	687b      	ldr	r3, [r7, #4]
}
 8007076:	0018      	movs	r0, r3
 8007078:	46bd      	mov	sp, r7
 800707a:	b002      	add	sp, #8
 800707c:	bd80      	pop	{r7, pc}
 800707e:	46c0      	nop			@ (mov r8, r8)
 8007080:	080107e0 	.word	0x080107e0

08007084 <fraqValue>:

/** Analyze the decimal part of a real number.
  * @param ptr Pointer to first character.
  * @retval Pointer to first non numerical after the string. If success.
  * @retval Null pointer if any error occur. */
static char* fraqValue( char* ptr ) {
 8007084:	b580      	push	{r7, lr}
 8007086:	b082      	sub	sp, #8
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
    if ( !isdigit( (int)(*ptr) ) ) return 0;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	781b      	ldrb	r3, [r3, #0]
 8007090:	1c5a      	adds	r2, r3, #1
 8007092:	4b0e      	ldr	r3, [pc, #56]	@ (80070cc <fraqValue+0x48>)
 8007094:	18d3      	adds	r3, r2, r3
 8007096:	781b      	ldrb	r3, [r3, #0]
 8007098:	001a      	movs	r2, r3
 800709a:	2304      	movs	r3, #4
 800709c:	4013      	ands	r3, r2
 800709e:	d101      	bne.n	80070a4 <fraqValue+0x20>
 80070a0:	2300      	movs	r3, #0
 80070a2:	e00e      	b.n	80070c2 <fraqValue+0x3e>
    ptr = goNum( ++ptr );
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	3301      	adds	r3, #1
 80070a8:	607b      	str	r3, [r7, #4]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	0018      	movs	r0, r3
 80070ae:	f000 fa61 	bl	8007574 <goNum>
 80070b2:	0003      	movs	r3, r0
 80070b4:	607b      	str	r3, [r7, #4]
    if ( !ptr ) return 0;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d101      	bne.n	80070c0 <fraqValue+0x3c>
 80070bc:	2300      	movs	r3, #0
 80070be:	e000      	b.n	80070c2 <fraqValue+0x3e>
    return ptr;
 80070c0:	687b      	ldr	r3, [r7, #4]
}
 80070c2:	0018      	movs	r0, r3
 80070c4:	46bd      	mov	sp, r7
 80070c6:	b002      	add	sp, #8
 80070c8:	bd80      	pop	{r7, pc}
 80070ca:	46c0      	nop			@ (mov r8, r8)
 80070cc:	080107e0 	.word	0x080107e0

080070d0 <numValue>:
  * If the first character after the value is different of '}' or ']' is set to '\0'.
  * @param ptr Pointer to first character.
  * @param property Property handler to set the value and the type: JSON_REAL or JSON_INTEGER.
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* numValue( char* ptr, json_t* property ) {
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b088      	sub	sp, #32
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	6039      	str	r1, [r7, #0]
    if ( *ptr == '-' ) ++ptr;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	781b      	ldrb	r3, [r3, #0]
 80070de:	2b2d      	cmp	r3, #45	@ 0x2d
 80070e0:	d102      	bne.n	80070e8 <numValue+0x18>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	3301      	adds	r3, #1
 80070e6:	607b      	str	r3, [r7, #4]
    if ( !isdigit( (int)(*ptr) ) ) return 0;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	781b      	ldrb	r3, [r3, #0]
 80070ec:	1c5a      	adds	r2, r3, #1
 80070ee:	4b5b      	ldr	r3, [pc, #364]	@ (800725c <numValue+0x18c>)
 80070f0:	18d3      	adds	r3, r2, r3
 80070f2:	781b      	ldrb	r3, [r3, #0]
 80070f4:	001a      	movs	r2, r3
 80070f6:	2304      	movs	r3, #4
 80070f8:	4013      	ands	r3, r2
 80070fa:	d101      	bne.n	8007100 <numValue+0x30>
 80070fc:	2300      	movs	r3, #0
 80070fe:	e0a8      	b.n	8007252 <numValue+0x182>
    if ( *ptr != '0' ) {
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	781b      	ldrb	r3, [r3, #0]
 8007104:	2b30      	cmp	r3, #48	@ 0x30
 8007106:	d00a      	beq.n	800711e <numValue+0x4e>
        ptr = goNum( ptr );
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	0018      	movs	r0, r3
 800710c:	f000 fa32 	bl	8007574 <goNum>
 8007110:	0003      	movs	r3, r0
 8007112:	607b      	str	r3, [r7, #4]
        if ( !ptr ) return 0;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d110      	bne.n	800713c <numValue+0x6c>
 800711a:	2300      	movs	r3, #0
 800711c:	e099      	b.n	8007252 <numValue+0x182>
    }
    else if ( isdigit( (int)(*++ptr) ) ) return 0;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	3301      	adds	r3, #1
 8007122:	607b      	str	r3, [r7, #4]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	781b      	ldrb	r3, [r3, #0]
 8007128:	1c5a      	adds	r2, r3, #1
 800712a:	4b4c      	ldr	r3, [pc, #304]	@ (800725c <numValue+0x18c>)
 800712c:	18d3      	adds	r3, r2, r3
 800712e:	781b      	ldrb	r3, [r3, #0]
 8007130:	001a      	movs	r2, r3
 8007132:	2304      	movs	r3, #4
 8007134:	4013      	ands	r3, r2
 8007136:	d001      	beq.n	800713c <numValue+0x6c>
 8007138:	2300      	movs	r3, #0
 800713a:	e08a      	b.n	8007252 <numValue+0x182>
    property->type = JSON_INTEGER;
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	2204      	movs	r2, #4
 8007140:	741a      	strb	r2, [r3, #16]
    if ( *ptr == '.' ) {
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	781b      	ldrb	r3, [r3, #0]
 8007146:	2b2e      	cmp	r3, #46	@ 0x2e
 8007148:	d110      	bne.n	800716c <numValue+0x9c>
        ptr = fraqValue( ++ptr );
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	3301      	adds	r3, #1
 800714e:	607b      	str	r3, [r7, #4]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	0018      	movs	r0, r3
 8007154:	f7ff ff96 	bl	8007084 <fraqValue>
 8007158:	0003      	movs	r3, r0
 800715a:	607b      	str	r3, [r7, #4]
        if ( !ptr ) return 0;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d101      	bne.n	8007166 <numValue+0x96>
 8007162:	2300      	movs	r3, #0
 8007164:	e075      	b.n	8007252 <numValue+0x182>
        property->type = JSON_REAL;
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	2205      	movs	r2, #5
 800716a:	741a      	strb	r2, [r3, #16]
    }
    if ( *ptr == 'e' || *ptr == 'E' ) {
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	781b      	ldrb	r3, [r3, #0]
 8007170:	2b65      	cmp	r3, #101	@ 0x65
 8007172:	d003      	beq.n	800717c <numValue+0xac>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	781b      	ldrb	r3, [r3, #0]
 8007178:	2b45      	cmp	r3, #69	@ 0x45
 800717a:	d110      	bne.n	800719e <numValue+0xce>
        ptr = expValue( ++ptr );
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	3301      	adds	r3, #1
 8007180:	607b      	str	r3, [r7, #4]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	0018      	movs	r0, r3
 8007186:	f7ff ff51 	bl	800702c <expValue>
 800718a:	0003      	movs	r3, r0
 800718c:	607b      	str	r3, [r7, #4]
        if ( !ptr ) return 0;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d101      	bne.n	8007198 <numValue+0xc8>
 8007194:	2300      	movs	r3, #0
 8007196:	e05c      	b.n	8007252 <numValue+0x182>
        property->type = JSON_REAL;
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	2205      	movs	r2, #5
 800719c:	741a      	strb	r2, [r3, #16]
    }
    if ( !isEndOfPrimitive( *ptr ) ) return 0;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	781b      	ldrb	r3, [r3, #0]
 80071a2:	0018      	movs	r0, r3
 80071a4:	f000 fa24 	bl	80075f0 <isEndOfPrimitive>
 80071a8:	0003      	movs	r3, r0
 80071aa:	001a      	movs	r2, r3
 80071ac:	2301      	movs	r3, #1
 80071ae:	4053      	eors	r3, r2
 80071b0:	b2db      	uxtb	r3, r3
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d001      	beq.n	80071ba <numValue+0xea>
 80071b6:	2300      	movs	r3, #0
 80071b8:	e04b      	b.n	8007252 <numValue+0x182>
    if ( JSON_INTEGER == property->type ) {
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	7c1b      	ldrb	r3, [r3, #16]
 80071be:	2b04      	cmp	r3, #4
 80071c0:	d140      	bne.n	8007244 <numValue+0x174>
        char const* value = property->u.value;
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	689b      	ldr	r3, [r3, #8]
 80071c6:	61fb      	str	r3, [r7, #28]
        bool const negative = *value == '-';
 80071c8:	69fb      	ldr	r3, [r7, #28]
 80071ca:	781a      	ldrb	r2, [r3, #0]
 80071cc:	201b      	movs	r0, #27
 80071ce:	183b      	adds	r3, r7, r0
 80071d0:	3a2d      	subs	r2, #45	@ 0x2d
 80071d2:	4251      	negs	r1, r2
 80071d4:	414a      	adcs	r2, r1
 80071d6:	701a      	strb	r2, [r3, #0]
        static char const min[] = "-9223372036854775808";
        static char const max[] = "9223372036854775807";
        unsigned int const maxdigits = ( negative? sizeof min: sizeof max ) - 1;
 80071d8:	183b      	adds	r3, r7, r0
 80071da:	781b      	ldrb	r3, [r3, #0]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d001      	beq.n	80071e4 <numValue+0x114>
 80071e0:	2314      	movs	r3, #20
 80071e2:	e000      	b.n	80071e6 <numValue+0x116>
 80071e4:	2313      	movs	r3, #19
 80071e6:	617b      	str	r3, [r7, #20]
        unsigned int const len = ( unsigned int const ) ( ptr - value );
 80071e8:	687a      	ldr	r2, [r7, #4]
 80071ea:	69fb      	ldr	r3, [r7, #28]
 80071ec:	1ad3      	subs	r3, r2, r3
 80071ee:	613b      	str	r3, [r7, #16]
        if ( len > maxdigits ) return 0;
 80071f0:	693a      	ldr	r2, [r7, #16]
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	429a      	cmp	r2, r3
 80071f6:	d901      	bls.n	80071fc <numValue+0x12c>
 80071f8:	2300      	movs	r3, #0
 80071fa:	e02a      	b.n	8007252 <numValue+0x182>
        if ( len == maxdigits ) {
 80071fc:	693a      	ldr	r2, [r7, #16]
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	429a      	cmp	r2, r3
 8007202:	d11f      	bne.n	8007244 <numValue+0x174>
            char const tmp = *ptr;
 8007204:	230f      	movs	r3, #15
 8007206:	18fb      	adds	r3, r7, r3
 8007208:	687a      	ldr	r2, [r7, #4]
 800720a:	7812      	ldrb	r2, [r2, #0]
 800720c:	701a      	strb	r2, [r3, #0]
            *ptr = '\0';
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2200      	movs	r2, #0
 8007212:	701a      	strb	r2, [r3, #0]
            char const* const threshold = negative ? min: max;
 8007214:	231b      	movs	r3, #27
 8007216:	18fb      	adds	r3, r7, r3
 8007218:	781b      	ldrb	r3, [r3, #0]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d001      	beq.n	8007222 <numValue+0x152>
 800721e:	4b10      	ldr	r3, [pc, #64]	@ (8007260 <numValue+0x190>)
 8007220:	e000      	b.n	8007224 <numValue+0x154>
 8007222:	4b10      	ldr	r3, [pc, #64]	@ (8007264 <numValue+0x194>)
 8007224:	60bb      	str	r3, [r7, #8]
            if ( 0 > strcmp( threshold, value ) ) return 0;
 8007226:	69fa      	ldr	r2, [r7, #28]
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	0011      	movs	r1, r2
 800722c:	0018      	movs	r0, r3
 800722e:	f7f8 ff69 	bl	8000104 <strcmp>
 8007232:	1e03      	subs	r3, r0, #0
 8007234:	da01      	bge.n	800723a <numValue+0x16a>
 8007236:	2300      	movs	r3, #0
 8007238:	e00b      	b.n	8007252 <numValue+0x182>
            *ptr = tmp;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	220f      	movs	r2, #15
 800723e:	18ba      	adds	r2, r7, r2
 8007240:	7812      	ldrb	r2, [r2, #0]
 8007242:	701a      	strb	r2, [r3, #0]
        }
    }
    ptr = setToNull( ptr );
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	0018      	movs	r0, r3
 8007248:	f000 f9b4 	bl	80075b4 <setToNull>
 800724c:	0003      	movs	r3, r0
 800724e:	607b      	str	r3, [r7, #4]
    return ptr;
 8007250:	687b      	ldr	r3, [r7, #4]
}
 8007252:	0018      	movs	r0, r3
 8007254:	46bd      	mov	sp, r7
 8007256:	b008      	add	sp, #32
 8007258:	bd80      	pop	{r7, pc}
 800725a:	46c0      	nop			@ (mov r8, r8)
 800725c:	080107e0 	.word	0x080107e0
 8007260:	080106d8 	.word	0x080106d8
 8007264:	080106f0 	.word	0x080106f0

08007268 <add>:

/** Add a property to a JSON object or array.
  * @param obj The handler of the JSON object or array.
  * @param property The handler of the property to be added. */
static void add( json_t* obj, json_t* property ) {
 8007268:	b580      	push	{r7, lr}
 800726a:	b082      	sub	sp, #8
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
 8007270:	6039      	str	r1, [r7, #0]
    property->sibling = 0;
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	2200      	movs	r2, #0
 8007276:	601a      	str	r2, [r3, #0]
    if ( !obj->u.c.child ){
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d106      	bne.n	800728e <add+0x26>
	    obj->u.c.child = property;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	683a      	ldr	r2, [r7, #0]
 8007284:	609a      	str	r2, [r3, #8]
	    obj->u.c.last_child = property;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	683a      	ldr	r2, [r7, #0]
 800728a:	60da      	str	r2, [r3, #12]
    } else {
	    obj->u.c.last_child->sibling = property;
	    obj->u.c.last_child = property;
    }
}
 800728c:	e006      	b.n	800729c <add+0x34>
	    obj->u.c.last_child->sibling = property;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	68db      	ldr	r3, [r3, #12]
 8007292:	683a      	ldr	r2, [r7, #0]
 8007294:	601a      	str	r2, [r3, #0]
	    obj->u.c.last_child = property;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	683a      	ldr	r2, [r7, #0]
 800729a:	60da      	str	r2, [r3, #12]
}
 800729c:	46c0      	nop			@ (mov r8, r8)
 800729e:	46bd      	mov	sp, r7
 80072a0:	b002      	add	sp, #8
 80072a2:	bd80      	pop	{r7, pc}

080072a4 <objValue>:
  * @param ptr Pointer to first character.
  * @param obj The handler of the JSON root object or array.
  * @param pool The handler of a json pool for creating json instances.
  * @retval Pointer to first character after the value. If success.
  * @retval Null pointer if any error occur. */
static char* objValue( char* ptr, json_t* obj, jsonPool_t* pool ) {
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b088      	sub	sp, #32
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	60f8      	str	r0, [r7, #12]
 80072ac:	60b9      	str	r1, [r7, #8]
 80072ae:	607a      	str	r2, [r7, #4]
    obj->type    = *ptr == '{' ? JSON_OBJ : JSON_ARRAY;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	781b      	ldrb	r3, [r3, #0]
 80072b4:	3b7b      	subs	r3, #123	@ 0x7b
 80072b6:	1e5a      	subs	r2, r3, #1
 80072b8:	4193      	sbcs	r3, r2
 80072ba:	b2db      	uxtb	r3, r3
 80072bc:	001a      	movs	r2, r3
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	741a      	strb	r2, [r3, #16]
    obj->u.c.child = 0;
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	2200      	movs	r2, #0
 80072c6:	609a      	str	r2, [r3, #8]
    obj->sibling = 0;
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	2200      	movs	r2, #0
 80072cc:	601a      	str	r2, [r3, #0]
    ptr++;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	3301      	adds	r3, #1
 80072d2:	60fb      	str	r3, [r7, #12]
    for(;;) {
        ptr = goBlank( ptr );
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	0018      	movs	r0, r3
 80072d8:	f000 f93a 	bl	8007550 <goBlank>
 80072dc:	0003      	movs	r3, r0
 80072de:	60fb      	str	r3, [r7, #12]
        if ( !ptr ) return 0;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d101      	bne.n	80072ea <objValue+0x46>
 80072e6:	2300      	movs	r3, #0
 80072e8:	e0c0      	b.n	800746c <objValue+0x1c8>
        if ( *ptr == ',' ) {
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	781b      	ldrb	r3, [r3, #0]
 80072ee:	2b2c      	cmp	r3, #44	@ 0x2c
 80072f0:	d103      	bne.n	80072fa <objValue+0x56>
            ++ptr;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	3301      	adds	r3, #1
 80072f6:	60fb      	str	r3, [r7, #12]
            continue;
 80072f8:	e0b7      	b.n	800746a <objValue+0x1c6>
        }
        char const endchar = ( obj->type == JSON_OBJ )? '}': ']';
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	7c1b      	ldrb	r3, [r3, #16]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d101      	bne.n	8007306 <objValue+0x62>
 8007302:	227d      	movs	r2, #125	@ 0x7d
 8007304:	e000      	b.n	8007308 <objValue+0x64>
 8007306:	225d      	movs	r2, #93	@ 0x5d
 8007308:	211f      	movs	r1, #31
 800730a:	187b      	adds	r3, r7, r1
 800730c:	701a      	strb	r2, [r3, #0]
        if ( *ptr == endchar ) {
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	781b      	ldrb	r3, [r3, #0]
 8007312:	187a      	adds	r2, r7, r1
 8007314:	7812      	ldrb	r2, [r2, #0]
 8007316:	429a      	cmp	r2, r3
 8007318:	d116      	bne.n	8007348 <objValue+0xa4>
            *ptr = '\0';
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2200      	movs	r2, #0
 800731e:	701a      	strb	r2, [r3, #0]
            json_t* parentObj = obj->sibling;
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	617b      	str	r3, [r7, #20]
            if ( !parentObj ) return ++ptr;
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d104      	bne.n	8007336 <objValue+0x92>
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	3301      	adds	r3, #1
 8007330:	60fb      	str	r3, [r7, #12]
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	e09a      	b.n	800746c <objValue+0x1c8>
            obj->sibling = 0;
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	2200      	movs	r2, #0
 800733a:	601a      	str	r2, [r3, #0]
            obj = parentObj;
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	60bb      	str	r3, [r7, #8]
            ++ptr;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	3301      	adds	r3, #1
 8007344:	60fb      	str	r3, [r7, #12]
            continue;
 8007346:	e090      	b.n	800746a <objValue+0x1c6>
        }
        json_t* property = pool->alloc( pool );
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	685b      	ldr	r3, [r3, #4]
 800734c:	687a      	ldr	r2, [r7, #4]
 800734e:	0010      	movs	r0, r2
 8007350:	4798      	blx	r3
 8007352:	0003      	movs	r3, r0
 8007354:	61bb      	str	r3, [r7, #24]
        if ( !property ) return 0;
 8007356:	69bb      	ldr	r3, [r7, #24]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d101      	bne.n	8007360 <objValue+0xbc>
 800735c:	2300      	movs	r3, #0
 800735e:	e085      	b.n	800746c <objValue+0x1c8>
        if( obj->type != JSON_ARRAY ) {
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	7c1b      	ldrb	r3, [r3, #16]
 8007364:	2b01      	cmp	r3, #1
 8007366:	d012      	beq.n	800738e <objValue+0xea>
            if ( *ptr != '\"' ) return 0;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	781b      	ldrb	r3, [r3, #0]
 800736c:	2b22      	cmp	r3, #34	@ 0x22
 800736e:	d001      	beq.n	8007374 <objValue+0xd0>
 8007370:	2300      	movs	r3, #0
 8007372:	e07b      	b.n	800746c <objValue+0x1c8>
            ptr = propertyName( ptr, property );
 8007374:	69ba      	ldr	r2, [r7, #24]
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	0011      	movs	r1, r2
 800737a:	0018      	movs	r0, r3
 800737c:	f7ff fd82 	bl	8006e84 <propertyName>
 8007380:	0003      	movs	r3, r0
 8007382:	60fb      	str	r3, [r7, #12]
            if ( !ptr ) return 0;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d104      	bne.n	8007394 <objValue+0xf0>
 800738a:	2300      	movs	r3, #0
 800738c:	e06e      	b.n	800746c <objValue+0x1c8>
        }
        else property->name = 0;
 800738e:	69bb      	ldr	r3, [r7, #24]
 8007390:	2200      	movs	r2, #0
 8007392:	605a      	str	r2, [r3, #4]
        add( obj, property );
 8007394:	69ba      	ldr	r2, [r7, #24]
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	0011      	movs	r1, r2
 800739a:	0018      	movs	r0, r3
 800739c:	f7ff ff64 	bl	8007268 <add>
        property->u.value = ptr;
 80073a0:	69bb      	ldr	r3, [r7, #24]
 80073a2:	68fa      	ldr	r2, [r7, #12]
 80073a4:	609a      	str	r2, [r3, #8]
        switch( *ptr ) {
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	2b22      	cmp	r3, #34	@ 0x22
 80073ac:	d02a      	beq.n	8007404 <objValue+0x160>
 80073ae:	db4d      	blt.n	800744c <objValue+0x1a8>
 80073b0:	2b7b      	cmp	r3, #123	@ 0x7b
 80073b2:	dc4b      	bgt.n	800744c <objValue+0x1a8>
 80073b4:	2b5b      	cmp	r3, #91	@ 0x5b
 80073b6:	db49      	blt.n	800744c <objValue+0x1a8>
 80073b8:	3b5b      	subs	r3, #91	@ 0x5b
 80073ba:	2b20      	cmp	r3, #32
 80073bc:	d846      	bhi.n	800744c <objValue+0x1a8>
 80073be:	009a      	lsls	r2, r3, #2
 80073c0:	4b2c      	ldr	r3, [pc, #176]	@ (8007474 <objValue+0x1d0>)
 80073c2:	18d3      	adds	r3, r2, r3
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	469f      	mov	pc, r3
            case '{':
                property->type    = JSON_OBJ;
 80073c8:	69bb      	ldr	r3, [r7, #24]
 80073ca:	2200      	movs	r2, #0
 80073cc:	741a      	strb	r2, [r3, #16]
                property->u.c.child = 0;
 80073ce:	69bb      	ldr	r3, [r7, #24]
 80073d0:	2200      	movs	r2, #0
 80073d2:	609a      	str	r2, [r3, #8]
                property->sibling = obj;
 80073d4:	69bb      	ldr	r3, [r7, #24]
 80073d6:	68ba      	ldr	r2, [r7, #8]
 80073d8:	601a      	str	r2, [r3, #0]
                obj = property;
 80073da:	69bb      	ldr	r3, [r7, #24]
 80073dc:	60bb      	str	r3, [r7, #8]
                ++ptr;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	3301      	adds	r3, #1
 80073e2:	60fb      	str	r3, [r7, #12]
                break;
 80073e4:	e03b      	b.n	800745e <objValue+0x1ba>
            case '[':
                property->type    = JSON_ARRAY;
 80073e6:	69bb      	ldr	r3, [r7, #24]
 80073e8:	2201      	movs	r2, #1
 80073ea:	741a      	strb	r2, [r3, #16]
                property->u.c.child = 0;
 80073ec:	69bb      	ldr	r3, [r7, #24]
 80073ee:	2200      	movs	r2, #0
 80073f0:	609a      	str	r2, [r3, #8]
                property->sibling = obj;
 80073f2:	69bb      	ldr	r3, [r7, #24]
 80073f4:	68ba      	ldr	r2, [r7, #8]
 80073f6:	601a      	str	r2, [r3, #0]
                obj = property;
 80073f8:	69bb      	ldr	r3, [r7, #24]
 80073fa:	60bb      	str	r3, [r7, #8]
                ++ptr;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	3301      	adds	r3, #1
 8007400:	60fb      	str	r3, [r7, #12]
                break;
 8007402:	e02c      	b.n	800745e <objValue+0x1ba>
            case '\"': ptr = textValue( ptr, property );  break;
 8007404:	69ba      	ldr	r2, [r7, #24]
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	0011      	movs	r1, r2
 800740a:	0018      	movs	r0, r3
 800740c:	f7ff fd6c 	bl	8006ee8 <textValue>
 8007410:	0003      	movs	r3, r0
 8007412:	60fb      	str	r3, [r7, #12]
 8007414:	e023      	b.n	800745e <objValue+0x1ba>
            case 't':  ptr = trueValue( ptr, property );  break;
 8007416:	69ba      	ldr	r2, [r7, #24]
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	0011      	movs	r1, r2
 800741c:	0018      	movs	r0, r3
 800741e:	f7ff fdcf 	bl	8006fc0 <trueValue>
 8007422:	0003      	movs	r3, r0
 8007424:	60fb      	str	r3, [r7, #12]
 8007426:	e01a      	b.n	800745e <objValue+0x1ba>
            case 'f':  ptr = falseValue( ptr, property ); break;
 8007428:	69ba      	ldr	r2, [r7, #24]
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	0011      	movs	r1, r2
 800742e:	0018      	movs	r0, r3
 8007430:	f7ff fdd8 	bl	8006fe4 <falseValue>
 8007434:	0003      	movs	r3, r0
 8007436:	60fb      	str	r3, [r7, #12]
 8007438:	e011      	b.n	800745e <objValue+0x1ba>
            case 'n':  ptr = nullValue( ptr, property );  break;
 800743a:	69ba      	ldr	r2, [r7, #24]
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	0011      	movs	r1, r2
 8007440:	0018      	movs	r0, r3
 8007442:	f7ff fde1 	bl	8007008 <nullValue>
 8007446:	0003      	movs	r3, r0
 8007448:	60fb      	str	r3, [r7, #12]
 800744a:	e008      	b.n	800745e <objValue+0x1ba>
            default:   ptr = numValue( ptr, property );   break;
 800744c:	69ba      	ldr	r2, [r7, #24]
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	0011      	movs	r1, r2
 8007452:	0018      	movs	r0, r3
 8007454:	f7ff fe3c 	bl	80070d0 <numValue>
 8007458:	0003      	movs	r3, r0
 800745a:	60fb      	str	r3, [r7, #12]
 800745c:	46c0      	nop			@ (mov r8, r8)
        }
        if ( !ptr ) return 0;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d000      	beq.n	8007466 <objValue+0x1c2>
 8007464:	e736      	b.n	80072d4 <objValue+0x30>
 8007466:	2300      	movs	r3, #0
 8007468:	e000      	b.n	800746c <objValue+0x1c8>
    for(;;) {
 800746a:	e733      	b.n	80072d4 <objValue+0x30>
    }
}
 800746c:	0018      	movs	r0, r3
 800746e:	46bd      	mov	sp, r7
 8007470:	b008      	add	sp, #32
 8007472:	bd80      	pop	{r7, pc}
 8007474:	08010644 	.word	0x08010644

08007478 <poolInit>:

/** Initialize a json pool.
  * @param pool The handler of the pool.
  * @return a instance of a json. */
static json_t* poolInit( jsonPool_t* pool ) {
 8007478:	b580      	push	{r7, lr}
 800747a:	b084      	sub	sp, #16
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
    jsonStaticPool_t *spool = json_containerOf( pool, jsonStaticPool_t, pool );
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	3b0c      	subs	r3, #12
 8007484:	60fb      	str	r3, [r7, #12]
    spool->nextFree = 1;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2201      	movs	r2, #1
 800748a:	609a      	str	r2, [r3, #8]
    return spool->mem;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
}
 8007490:	0018      	movs	r0, r3
 8007492:	46bd      	mov	sp, r7
 8007494:	b004      	add	sp, #16
 8007496:	bd80      	pop	{r7, pc}

08007498 <poolAlloc>:

/** Create an instance of a json from a pool.
  * @param pool The handler of the pool.
  * @retval The handler of the new instance if success.
  * @retval Null pointer if the pool was empty. */
static json_t* poolAlloc( jsonPool_t* pool ) {
 8007498:	b580      	push	{r7, lr}
 800749a:	b084      	sub	sp, #16
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
    jsonStaticPool_t *spool = json_containerOf( pool, jsonStaticPool_t, pool );
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	3b0c      	subs	r3, #12
 80074a4:	60fb      	str	r3, [r7, #12]
    if ( spool->nextFree >= spool->qty ) return 0;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	689a      	ldr	r2, [r3, #8]
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	429a      	cmp	r2, r3
 80074b0:	d301      	bcc.n	80074b6 <poolAlloc+0x1e>
 80074b2:	2300      	movs	r3, #0
 80074b4:	e00b      	b.n	80074ce <poolAlloc+0x36>
    return spool->mem + spool->nextFree++;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	6819      	ldr	r1, [r3, #0]
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	689a      	ldr	r2, [r3, #8]
 80074be:	1c50      	adds	r0, r2, #1
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	6098      	str	r0, [r3, #8]
 80074c4:	0013      	movs	r3, r2
 80074c6:	009b      	lsls	r3, r3, #2
 80074c8:	189b      	adds	r3, r3, r2
 80074ca:	009b      	lsls	r3, r3, #2
 80074cc:	18cb      	adds	r3, r1, r3
}
 80074ce:	0018      	movs	r0, r3
 80074d0:	46bd      	mov	sp, r7
 80074d2:	b004      	add	sp, #16
 80074d4:	bd80      	pop	{r7, pc}

080074d6 <isOneOfThem>:

/** Checks whether an character belongs to set.
  * @param ch Character value to be checked.
  * @param set Set of characters. It is just a null-terminated string.
  * @return true or false there is membership or not. */
static bool isOneOfThem( char ch, char const* set ) {
 80074d6:	b580      	push	{r7, lr}
 80074d8:	b082      	sub	sp, #8
 80074da:	af00      	add	r7, sp, #0
 80074dc:	0002      	movs	r2, r0
 80074de:	6039      	str	r1, [r7, #0]
 80074e0:	1dfb      	adds	r3, r7, #7
 80074e2:	701a      	strb	r2, [r3, #0]
    while( *set != '\0' )
 80074e4:	e009      	b.n	80074fa <isOneOfThem+0x24>
        if ( ch == *set++ )
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	1c5a      	adds	r2, r3, #1
 80074ea:	603a      	str	r2, [r7, #0]
 80074ec:	781b      	ldrb	r3, [r3, #0]
 80074ee:	1dfa      	adds	r2, r7, #7
 80074f0:	7812      	ldrb	r2, [r2, #0]
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d101      	bne.n	80074fa <isOneOfThem+0x24>
            return true;
 80074f6:	2301      	movs	r3, #1
 80074f8:	e004      	b.n	8007504 <isOneOfThem+0x2e>
    while( *set != '\0' )
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	781b      	ldrb	r3, [r3, #0]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d1f1      	bne.n	80074e6 <isOneOfThem+0x10>
    return false;
 8007502:	2300      	movs	r3, #0
}
 8007504:	0018      	movs	r0, r3
 8007506:	46bd      	mov	sp, r7
 8007508:	b002      	add	sp, #8
 800750a:	bd80      	pop	{r7, pc}

0800750c <goWhile>:

/** Increases a pointer while it points to a character that belongs to a set.
  * @param str The initial pointer value.
  * @param set Set of characters. It is just a null-terminated string.
  * @return The final pointer value or null pointer if the null character was found. */
static char* goWhile( char* str, char const* set ) {
 800750c:	b580      	push	{r7, lr}
 800750e:	b082      	sub	sp, #8
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
 8007514:	6039      	str	r1, [r7, #0]
    for(; *str != '\0'; ++str ) {
 8007516:	e012      	b.n	800753e <goWhile+0x32>
        if ( !isOneOfThem( *str, set ) )
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	781b      	ldrb	r3, [r3, #0]
 800751c:	683a      	ldr	r2, [r7, #0]
 800751e:	0011      	movs	r1, r2
 8007520:	0018      	movs	r0, r3
 8007522:	f7ff ffd8 	bl	80074d6 <isOneOfThem>
 8007526:	0003      	movs	r3, r0
 8007528:	001a      	movs	r2, r3
 800752a:	2301      	movs	r3, #1
 800752c:	4053      	eors	r3, r2
 800752e:	b2db      	uxtb	r3, r3
 8007530:	2b00      	cmp	r3, #0
 8007532:	d001      	beq.n	8007538 <goWhile+0x2c>
            return str;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	e007      	b.n	8007548 <goWhile+0x3c>
    for(; *str != '\0'; ++str ) {
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	3301      	adds	r3, #1
 800753c:	607b      	str	r3, [r7, #4]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	781b      	ldrb	r3, [r3, #0]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d1e8      	bne.n	8007518 <goWhile+0xc>
    }
    return 0;
 8007546:	2300      	movs	r3, #0
}
 8007548:	0018      	movs	r0, r3
 800754a:	46bd      	mov	sp, r7
 800754c:	b002      	add	sp, #8
 800754e:	bd80      	pop	{r7, pc}

08007550 <goBlank>:
static char const* const blank = " \n\r\t\f";

/** Increases a pointer while it points to a white space character.
  * @param str The initial pointer value.
  * @return The final pointer value or null pointer if the null character was found. */
static char* goBlank( char* str ) {
 8007550:	b580      	push	{r7, lr}
 8007552:	b082      	sub	sp, #8
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
    return goWhile( str, blank );
 8007558:	4a05      	ldr	r2, [pc, #20]	@ (8007570 <goBlank+0x20>)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	0011      	movs	r1, r2
 800755e:	0018      	movs	r0, r3
 8007560:	f7ff ffd4 	bl	800750c <goWhile>
 8007564:	0003      	movs	r3, r0
}
 8007566:	0018      	movs	r0, r3
 8007568:	46bd      	mov	sp, r7
 800756a:	b002      	add	sp, #8
 800756c:	bd80      	pop	{r7, pc}
 800756e:	46c0      	nop			@ (mov r8, r8)
 8007570:	0800fecc 	.word	0x0800fecc

08007574 <goNum>:

/** Increases a pointer while it points to a decimal digit character.
  * @param str The initial pointer value.
  * @return The final pointer value or null pointer if the null character was found. */
static char* goNum( char* str ) {
 8007574:	b580      	push	{r7, lr}
 8007576:	b082      	sub	sp, #8
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
    for( ; *str != '\0'; ++str ) {
 800757c:	e00e      	b.n	800759c <goNum+0x28>
        if ( !isdigit( (int)(*str) ) )
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	781b      	ldrb	r3, [r3, #0]
 8007582:	1c5a      	adds	r2, r3, #1
 8007584:	4b0a      	ldr	r3, [pc, #40]	@ (80075b0 <goNum+0x3c>)
 8007586:	18d3      	adds	r3, r2, r3
 8007588:	781b      	ldrb	r3, [r3, #0]
 800758a:	001a      	movs	r2, r3
 800758c:	2304      	movs	r3, #4
 800758e:	4013      	ands	r3, r2
 8007590:	d101      	bne.n	8007596 <goNum+0x22>
            return str;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	e007      	b.n	80075a6 <goNum+0x32>
    for( ; *str != '\0'; ++str ) {
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	3301      	adds	r3, #1
 800759a:	607b      	str	r3, [r7, #4]
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	781b      	ldrb	r3, [r3, #0]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d1ec      	bne.n	800757e <goNum+0xa>
    }
    return 0;
 80075a4:	2300      	movs	r3, #0
}
 80075a6:	0018      	movs	r0, r3
 80075a8:	46bd      	mov	sp, r7
 80075aa:	b002      	add	sp, #8
 80075ac:	bd80      	pop	{r7, pc}
 80075ae:	46c0      	nop			@ (mov r8, r8)
 80075b0:	080107e0 	.word	0x080107e0

080075b4 <setToNull>:
static char const* const endofblock = "}]";

/** Set a char to '\0' and increase its pointer if the char is different to '}' or ']'.
  * @param ch Pointer to character.
  * @return  Final value pointer. */
static char* setToNull( char* ch ) {
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b082      	sub	sp, #8
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
    if ( !isOneOfThem( *ch, endofblock ) ) *ch++ = '\0';
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	781b      	ldrb	r3, [r3, #0]
 80075c0:	4a0a      	ldr	r2, [pc, #40]	@ (80075ec <setToNull+0x38>)
 80075c2:	0011      	movs	r1, r2
 80075c4:	0018      	movs	r0, r3
 80075c6:	f7ff ff86 	bl	80074d6 <isOneOfThem>
 80075ca:	0003      	movs	r3, r0
 80075cc:	001a      	movs	r2, r3
 80075ce:	2301      	movs	r3, #1
 80075d0:	4053      	eors	r3, r2
 80075d2:	b2db      	uxtb	r3, r3
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d004      	beq.n	80075e2 <setToNull+0x2e>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	1c5a      	adds	r2, r3, #1
 80075dc:	607a      	str	r2, [r7, #4]
 80075de:	2200      	movs	r2, #0
 80075e0:	701a      	strb	r2, [r3, #0]
    return ch;
 80075e2:	687b      	ldr	r3, [r7, #4]
}
 80075e4:	0018      	movs	r0, r3
 80075e6:	46bd      	mov	sp, r7
 80075e8:	b002      	add	sp, #8
 80075ea:	bd80      	pop	{r7, pc}
 80075ec:	0800fed4 	.word	0x0800fed4

080075f0 <isEndOfPrimitive>:

/** Indicate if a character is the end of a primitive value. */
static bool isEndOfPrimitive( char ch ) {
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b082      	sub	sp, #8
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	0002      	movs	r2, r0
 80075f8:	1dfb      	adds	r3, r7, #7
 80075fa:	701a      	strb	r2, [r3, #0]
    return ch == ',' || isOneOfThem( ch, blank ) || isOneOfThem( ch, endofblock );
 80075fc:	1dfb      	adds	r3, r7, #7
 80075fe:	781b      	ldrb	r3, [r3, #0]
 8007600:	2b2c      	cmp	r3, #44	@ 0x2c
 8007602:	d011      	beq.n	8007628 <isEndOfPrimitive+0x38>
 8007604:	4a0e      	ldr	r2, [pc, #56]	@ (8007640 <isEndOfPrimitive+0x50>)
 8007606:	1dfb      	adds	r3, r7, #7
 8007608:	781b      	ldrb	r3, [r3, #0]
 800760a:	0011      	movs	r1, r2
 800760c:	0018      	movs	r0, r3
 800760e:	f7ff ff62 	bl	80074d6 <isOneOfThem>
 8007612:	1e03      	subs	r3, r0, #0
 8007614:	d108      	bne.n	8007628 <isEndOfPrimitive+0x38>
 8007616:	4a0b      	ldr	r2, [pc, #44]	@ (8007644 <isEndOfPrimitive+0x54>)
 8007618:	1dfb      	adds	r3, r7, #7
 800761a:	781b      	ldrb	r3, [r3, #0]
 800761c:	0011      	movs	r1, r2
 800761e:	0018      	movs	r0, r3
 8007620:	f7ff ff59 	bl	80074d6 <isOneOfThem>
 8007624:	1e03      	subs	r3, r0, #0
 8007626:	d001      	beq.n	800762c <isEndOfPrimitive+0x3c>
 8007628:	2301      	movs	r3, #1
 800762a:	e000      	b.n	800762e <isEndOfPrimitive+0x3e>
 800762c:	2300      	movs	r3, #0
 800762e:	1c1a      	adds	r2, r3, #0
 8007630:	2301      	movs	r3, #1
 8007632:	4013      	ands	r3, r2
 8007634:	b2db      	uxtb	r3, r3
}
 8007636:	0018      	movs	r0, r3
 8007638:	46bd      	mov	sp, r7
 800763a:	b002      	add	sp, #8
 800763c:	bd80      	pop	{r7, pc}
 800763e:	46c0      	nop			@ (mov r8, r8)
 8007640:	0800fecc 	.word	0x0800fecc
 8007644:	0800fed4 	.word	0x0800fed4

08007648 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8007648:	480d      	ldr	r0, [pc, #52]	@ (8007680 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800764a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800764c:	f7ff faac 	bl	8006ba8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007650:	480c      	ldr	r0, [pc, #48]	@ (8007684 <LoopForever+0x6>)
  ldr r1, =_edata
 8007652:	490d      	ldr	r1, [pc, #52]	@ (8007688 <LoopForever+0xa>)
  ldr r2, =_sidata
 8007654:	4a0d      	ldr	r2, [pc, #52]	@ (800768c <LoopForever+0xe>)
  movs r3, #0
 8007656:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007658:	e002      	b.n	8007660 <LoopCopyDataInit>

0800765a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800765a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800765c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800765e:	3304      	adds	r3, #4

08007660 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007660:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007662:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007664:	d3f9      	bcc.n	800765a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007666:	4a0a      	ldr	r2, [pc, #40]	@ (8007690 <LoopForever+0x12>)
  ldr r4, =_ebss
 8007668:	4c0a      	ldr	r4, [pc, #40]	@ (8007694 <LoopForever+0x16>)
  movs r3, #0
 800766a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800766c:	e001      	b.n	8007672 <LoopFillZerobss>

0800766e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800766e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007670:	3204      	adds	r2, #4

08007672 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007672:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007674:	d3fb      	bcc.n	800766e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8007676:	f006 f817 	bl	800d6a8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800767a:	f7fc fdf9 	bl	8004270 <main>

0800767e <LoopForever>:

LoopForever:
  b LoopForever
 800767e:	e7fe      	b.n	800767e <LoopForever>
  ldr   r0, =_estack
 8007680:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8007684:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007688:	20000bb0 	.word	0x20000bb0
  ldr r2, =_sidata
 800768c:	08010b58 	.word	0x08010b58
  ldr r2, =_sbss
 8007690:	20000bb0 	.word	0x20000bb0
  ldr r4, =_ebss
 8007694:	20001f98 	.word	0x20001f98

08007698 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007698:	e7fe      	b.n	8007698 <ADC1_COMP_IRQHandler>
	...

0800769c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b082      	sub	sp, #8
 80076a0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80076a2:	1dfb      	adds	r3, r7, #7
 80076a4:	2200      	movs	r2, #0
 80076a6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80076a8:	4b0b      	ldr	r3, [pc, #44]	@ (80076d8 <HAL_Init+0x3c>)
 80076aa:	681a      	ldr	r2, [r3, #0]
 80076ac:	4b0a      	ldr	r3, [pc, #40]	@ (80076d8 <HAL_Init+0x3c>)
 80076ae:	2180      	movs	r1, #128	@ 0x80
 80076b0:	0049      	lsls	r1, r1, #1
 80076b2:	430a      	orrs	r2, r1
 80076b4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80076b6:	2003      	movs	r0, #3
 80076b8:	f000 f810 	bl	80076dc <HAL_InitTick>
 80076bc:	1e03      	subs	r3, r0, #0
 80076be:	d003      	beq.n	80076c8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80076c0:	1dfb      	adds	r3, r7, #7
 80076c2:	2201      	movs	r2, #1
 80076c4:	701a      	strb	r2, [r3, #0]
 80076c6:	e001      	b.n	80076cc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80076c8:	f7fe ff88 	bl	80065dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80076cc:	1dfb      	adds	r3, r7, #7
 80076ce:	781b      	ldrb	r3, [r3, #0]
}
 80076d0:	0018      	movs	r0, r3
 80076d2:	46bd      	mov	sp, r7
 80076d4:	b002      	add	sp, #8
 80076d6:	bd80      	pop	{r7, pc}
 80076d8:	40022000 	.word	0x40022000

080076dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80076dc:	b590      	push	{r4, r7, lr}
 80076de:	b085      	sub	sp, #20
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80076e4:	230f      	movs	r3, #15
 80076e6:	18fb      	adds	r3, r7, r3
 80076e8:	2200      	movs	r2, #0
 80076ea:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80076ec:	4b1d      	ldr	r3, [pc, #116]	@ (8007764 <HAL_InitTick+0x88>)
 80076ee:	781b      	ldrb	r3, [r3, #0]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d02b      	beq.n	800774c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80076f4:	4b1c      	ldr	r3, [pc, #112]	@ (8007768 <HAL_InitTick+0x8c>)
 80076f6:	681c      	ldr	r4, [r3, #0]
 80076f8:	4b1a      	ldr	r3, [pc, #104]	@ (8007764 <HAL_InitTick+0x88>)
 80076fa:	781b      	ldrb	r3, [r3, #0]
 80076fc:	0019      	movs	r1, r3
 80076fe:	23fa      	movs	r3, #250	@ 0xfa
 8007700:	0098      	lsls	r0, r3, #2
 8007702:	f7f8 fd25 	bl	8000150 <__udivsi3>
 8007706:	0003      	movs	r3, r0
 8007708:	0019      	movs	r1, r3
 800770a:	0020      	movs	r0, r4
 800770c:	f7f8 fd20 	bl	8000150 <__udivsi3>
 8007710:	0003      	movs	r3, r0
 8007712:	0018      	movs	r0, r3
 8007714:	f000 f929 	bl	800796a <HAL_SYSTICK_Config>
 8007718:	1e03      	subs	r3, r0, #0
 800771a:	d112      	bne.n	8007742 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2b03      	cmp	r3, #3
 8007720:	d80a      	bhi.n	8007738 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007722:	6879      	ldr	r1, [r7, #4]
 8007724:	2301      	movs	r3, #1
 8007726:	425b      	negs	r3, r3
 8007728:	2200      	movs	r2, #0
 800772a:	0018      	movs	r0, r3
 800772c:	f000 f908 	bl	8007940 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8007730:	4b0e      	ldr	r3, [pc, #56]	@ (800776c <HAL_InitTick+0x90>)
 8007732:	687a      	ldr	r2, [r7, #4]
 8007734:	601a      	str	r2, [r3, #0]
 8007736:	e00d      	b.n	8007754 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8007738:	230f      	movs	r3, #15
 800773a:	18fb      	adds	r3, r7, r3
 800773c:	2201      	movs	r2, #1
 800773e:	701a      	strb	r2, [r3, #0]
 8007740:	e008      	b.n	8007754 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8007742:	230f      	movs	r3, #15
 8007744:	18fb      	adds	r3, r7, r3
 8007746:	2201      	movs	r2, #1
 8007748:	701a      	strb	r2, [r3, #0]
 800774a:	e003      	b.n	8007754 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800774c:	230f      	movs	r3, #15
 800774e:	18fb      	adds	r3, r7, r3
 8007750:	2201      	movs	r2, #1
 8007752:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8007754:	230f      	movs	r3, #15
 8007756:	18fb      	adds	r3, r7, r3
 8007758:	781b      	ldrb	r3, [r3, #0]
}
 800775a:	0018      	movs	r0, r3
 800775c:	46bd      	mov	sp, r7
 800775e:	b005      	add	sp, #20
 8007760:	bd90      	pop	{r4, r7, pc}
 8007762:	46c0      	nop			@ (mov r8, r8)
 8007764:	200009d0 	.word	0x200009d0
 8007768:	200009c8 	.word	0x200009c8
 800776c:	200009cc 	.word	0x200009cc

08007770 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8007774:	4b05      	ldr	r3, [pc, #20]	@ (800778c <HAL_IncTick+0x1c>)
 8007776:	781b      	ldrb	r3, [r3, #0]
 8007778:	001a      	movs	r2, r3
 800777a:	4b05      	ldr	r3, [pc, #20]	@ (8007790 <HAL_IncTick+0x20>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	18d2      	adds	r2, r2, r3
 8007780:	4b03      	ldr	r3, [pc, #12]	@ (8007790 <HAL_IncTick+0x20>)
 8007782:	601a      	str	r2, [r3, #0]
}
 8007784:	46c0      	nop			@ (mov r8, r8)
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}
 800778a:	46c0      	nop			@ (mov r8, r8)
 800778c:	200009d0 	.word	0x200009d0
 8007790:	20001e48 	.word	0x20001e48

08007794 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	af00      	add	r7, sp, #0
  return uwTick;
 8007798:	4b02      	ldr	r3, [pc, #8]	@ (80077a4 <HAL_GetTick+0x10>)
 800779a:	681b      	ldr	r3, [r3, #0]
}
 800779c:	0018      	movs	r0, r3
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}
 80077a2:	46c0      	nop			@ (mov r8, r8)
 80077a4:	20001e48 	.word	0x20001e48

080077a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b084      	sub	sp, #16
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80077b0:	f7ff fff0 	bl	8007794 <HAL_GetTick>
 80077b4:	0003      	movs	r3, r0
 80077b6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	3301      	adds	r3, #1
 80077c0:	d005      	beq.n	80077ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80077c2:	4b0a      	ldr	r3, [pc, #40]	@ (80077ec <HAL_Delay+0x44>)
 80077c4:	781b      	ldrb	r3, [r3, #0]
 80077c6:	001a      	movs	r2, r3
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	189b      	adds	r3, r3, r2
 80077cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80077ce:	46c0      	nop			@ (mov r8, r8)
 80077d0:	f7ff ffe0 	bl	8007794 <HAL_GetTick>
 80077d4:	0002      	movs	r2, r0
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	1ad3      	subs	r3, r2, r3
 80077da:	68fa      	ldr	r2, [r7, #12]
 80077dc:	429a      	cmp	r2, r3
 80077de:	d8f7      	bhi.n	80077d0 <HAL_Delay+0x28>
  {
  }
}
 80077e0:	46c0      	nop			@ (mov r8, r8)
 80077e2:	46c0      	nop			@ (mov r8, r8)
 80077e4:	46bd      	mov	sp, r7
 80077e6:	b004      	add	sp, #16
 80077e8:	bd80      	pop	{r7, pc}
 80077ea:	46c0      	nop			@ (mov r8, r8)
 80077ec:	200009d0 	.word	0x200009d0

080077f0 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b082      	sub	sp, #8
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80077f8:	4b06      	ldr	r3, [pc, #24]	@ (8007814 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a06      	ldr	r2, [pc, #24]	@ (8007818 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80077fe:	4013      	ands	r3, r2
 8007800:	0019      	movs	r1, r3
 8007802:	4b04      	ldr	r3, [pc, #16]	@ (8007814 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8007804:	687a      	ldr	r2, [r7, #4]
 8007806:	430a      	orrs	r2, r1
 8007808:	601a      	str	r2, [r3, #0]
}
 800780a:	46c0      	nop			@ (mov r8, r8)
 800780c:	46bd      	mov	sp, r7
 800780e:	b002      	add	sp, #8
 8007810:	bd80      	pop	{r7, pc}
 8007812:	46c0      	nop			@ (mov r8, r8)
 8007814:	40010000 	.word	0x40010000
 8007818:	fffff9ff 	.word	0xfffff9ff

0800781c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800781c:	b590      	push	{r4, r7, lr}
 800781e:	b083      	sub	sp, #12
 8007820:	af00      	add	r7, sp, #0
 8007822:	0002      	movs	r2, r0
 8007824:	6039      	str	r1, [r7, #0]
 8007826:	1dfb      	adds	r3, r7, #7
 8007828:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800782a:	1dfb      	adds	r3, r7, #7
 800782c:	781b      	ldrb	r3, [r3, #0]
 800782e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007830:	d828      	bhi.n	8007884 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007832:	4a2f      	ldr	r2, [pc, #188]	@ (80078f0 <__NVIC_SetPriority+0xd4>)
 8007834:	1dfb      	adds	r3, r7, #7
 8007836:	781b      	ldrb	r3, [r3, #0]
 8007838:	b25b      	sxtb	r3, r3
 800783a:	089b      	lsrs	r3, r3, #2
 800783c:	33c0      	adds	r3, #192	@ 0xc0
 800783e:	009b      	lsls	r3, r3, #2
 8007840:	589b      	ldr	r3, [r3, r2]
 8007842:	1dfa      	adds	r2, r7, #7
 8007844:	7812      	ldrb	r2, [r2, #0]
 8007846:	0011      	movs	r1, r2
 8007848:	2203      	movs	r2, #3
 800784a:	400a      	ands	r2, r1
 800784c:	00d2      	lsls	r2, r2, #3
 800784e:	21ff      	movs	r1, #255	@ 0xff
 8007850:	4091      	lsls	r1, r2
 8007852:	000a      	movs	r2, r1
 8007854:	43d2      	mvns	r2, r2
 8007856:	401a      	ands	r2, r3
 8007858:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	019b      	lsls	r3, r3, #6
 800785e:	22ff      	movs	r2, #255	@ 0xff
 8007860:	401a      	ands	r2, r3
 8007862:	1dfb      	adds	r3, r7, #7
 8007864:	781b      	ldrb	r3, [r3, #0]
 8007866:	0018      	movs	r0, r3
 8007868:	2303      	movs	r3, #3
 800786a:	4003      	ands	r3, r0
 800786c:	00db      	lsls	r3, r3, #3
 800786e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007870:	481f      	ldr	r0, [pc, #124]	@ (80078f0 <__NVIC_SetPriority+0xd4>)
 8007872:	1dfb      	adds	r3, r7, #7
 8007874:	781b      	ldrb	r3, [r3, #0]
 8007876:	b25b      	sxtb	r3, r3
 8007878:	089b      	lsrs	r3, r3, #2
 800787a:	430a      	orrs	r2, r1
 800787c:	33c0      	adds	r3, #192	@ 0xc0
 800787e:	009b      	lsls	r3, r3, #2
 8007880:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8007882:	e031      	b.n	80078e8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007884:	4a1b      	ldr	r2, [pc, #108]	@ (80078f4 <__NVIC_SetPriority+0xd8>)
 8007886:	1dfb      	adds	r3, r7, #7
 8007888:	781b      	ldrb	r3, [r3, #0]
 800788a:	0019      	movs	r1, r3
 800788c:	230f      	movs	r3, #15
 800788e:	400b      	ands	r3, r1
 8007890:	3b08      	subs	r3, #8
 8007892:	089b      	lsrs	r3, r3, #2
 8007894:	3306      	adds	r3, #6
 8007896:	009b      	lsls	r3, r3, #2
 8007898:	18d3      	adds	r3, r2, r3
 800789a:	3304      	adds	r3, #4
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	1dfa      	adds	r2, r7, #7
 80078a0:	7812      	ldrb	r2, [r2, #0]
 80078a2:	0011      	movs	r1, r2
 80078a4:	2203      	movs	r2, #3
 80078a6:	400a      	ands	r2, r1
 80078a8:	00d2      	lsls	r2, r2, #3
 80078aa:	21ff      	movs	r1, #255	@ 0xff
 80078ac:	4091      	lsls	r1, r2
 80078ae:	000a      	movs	r2, r1
 80078b0:	43d2      	mvns	r2, r2
 80078b2:	401a      	ands	r2, r3
 80078b4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	019b      	lsls	r3, r3, #6
 80078ba:	22ff      	movs	r2, #255	@ 0xff
 80078bc:	401a      	ands	r2, r3
 80078be:	1dfb      	adds	r3, r7, #7
 80078c0:	781b      	ldrb	r3, [r3, #0]
 80078c2:	0018      	movs	r0, r3
 80078c4:	2303      	movs	r3, #3
 80078c6:	4003      	ands	r3, r0
 80078c8:	00db      	lsls	r3, r3, #3
 80078ca:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80078cc:	4809      	ldr	r0, [pc, #36]	@ (80078f4 <__NVIC_SetPriority+0xd8>)
 80078ce:	1dfb      	adds	r3, r7, #7
 80078d0:	781b      	ldrb	r3, [r3, #0]
 80078d2:	001c      	movs	r4, r3
 80078d4:	230f      	movs	r3, #15
 80078d6:	4023      	ands	r3, r4
 80078d8:	3b08      	subs	r3, #8
 80078da:	089b      	lsrs	r3, r3, #2
 80078dc:	430a      	orrs	r2, r1
 80078de:	3306      	adds	r3, #6
 80078e0:	009b      	lsls	r3, r3, #2
 80078e2:	18c3      	adds	r3, r0, r3
 80078e4:	3304      	adds	r3, #4
 80078e6:	601a      	str	r2, [r3, #0]
}
 80078e8:	46c0      	nop			@ (mov r8, r8)
 80078ea:	46bd      	mov	sp, r7
 80078ec:	b003      	add	sp, #12
 80078ee:	bd90      	pop	{r4, r7, pc}
 80078f0:	e000e100 	.word	0xe000e100
 80078f4:	e000ed00 	.word	0xe000ed00

080078f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b082      	sub	sp, #8
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	1e5a      	subs	r2, r3, #1
 8007904:	2380      	movs	r3, #128	@ 0x80
 8007906:	045b      	lsls	r3, r3, #17
 8007908:	429a      	cmp	r2, r3
 800790a:	d301      	bcc.n	8007910 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800790c:	2301      	movs	r3, #1
 800790e:	e010      	b.n	8007932 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007910:	4b0a      	ldr	r3, [pc, #40]	@ (800793c <SysTick_Config+0x44>)
 8007912:	687a      	ldr	r2, [r7, #4]
 8007914:	3a01      	subs	r2, #1
 8007916:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007918:	2301      	movs	r3, #1
 800791a:	425b      	negs	r3, r3
 800791c:	2103      	movs	r1, #3
 800791e:	0018      	movs	r0, r3
 8007920:	f7ff ff7c 	bl	800781c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007924:	4b05      	ldr	r3, [pc, #20]	@ (800793c <SysTick_Config+0x44>)
 8007926:	2200      	movs	r2, #0
 8007928:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800792a:	4b04      	ldr	r3, [pc, #16]	@ (800793c <SysTick_Config+0x44>)
 800792c:	2207      	movs	r2, #7
 800792e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007930:	2300      	movs	r3, #0
}
 8007932:	0018      	movs	r0, r3
 8007934:	46bd      	mov	sp, r7
 8007936:	b002      	add	sp, #8
 8007938:	bd80      	pop	{r7, pc}
 800793a:	46c0      	nop			@ (mov r8, r8)
 800793c:	e000e010 	.word	0xe000e010

08007940 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b084      	sub	sp, #16
 8007944:	af00      	add	r7, sp, #0
 8007946:	60b9      	str	r1, [r7, #8]
 8007948:	607a      	str	r2, [r7, #4]
 800794a:	210f      	movs	r1, #15
 800794c:	187b      	adds	r3, r7, r1
 800794e:	1c02      	adds	r2, r0, #0
 8007950:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8007952:	68ba      	ldr	r2, [r7, #8]
 8007954:	187b      	adds	r3, r7, r1
 8007956:	781b      	ldrb	r3, [r3, #0]
 8007958:	b25b      	sxtb	r3, r3
 800795a:	0011      	movs	r1, r2
 800795c:	0018      	movs	r0, r3
 800795e:	f7ff ff5d 	bl	800781c <__NVIC_SetPriority>
}
 8007962:	46c0      	nop			@ (mov r8, r8)
 8007964:	46bd      	mov	sp, r7
 8007966:	b004      	add	sp, #16
 8007968:	bd80      	pop	{r7, pc}

0800796a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800796a:	b580      	push	{r7, lr}
 800796c:	b082      	sub	sp, #8
 800796e:	af00      	add	r7, sp, #0
 8007970:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	0018      	movs	r0, r3
 8007976:	f7ff ffbf 	bl	80078f8 <SysTick_Config>
 800797a:	0003      	movs	r3, r0
}
 800797c:	0018      	movs	r0, r3
 800797e:	46bd      	mov	sp, r7
 8007980:	b002      	add	sp, #8
 8007982:	bd80      	pop	{r7, pc}

08007984 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b086      	sub	sp, #24
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
 800798c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800798e:	2300      	movs	r3, #0
 8007990:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007992:	e14d      	b.n	8007c30 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	2101      	movs	r1, #1
 800799a:	697a      	ldr	r2, [r7, #20]
 800799c:	4091      	lsls	r1, r2
 800799e:	000a      	movs	r2, r1
 80079a0:	4013      	ands	r3, r2
 80079a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d100      	bne.n	80079ac <HAL_GPIO_Init+0x28>
 80079aa:	e13e      	b.n	8007c2a <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	2203      	movs	r2, #3
 80079b2:	4013      	ands	r3, r2
 80079b4:	2b01      	cmp	r3, #1
 80079b6:	d005      	beq.n	80079c4 <HAL_GPIO_Init+0x40>
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	685b      	ldr	r3, [r3, #4]
 80079bc:	2203      	movs	r2, #3
 80079be:	4013      	ands	r3, r2
 80079c0:	2b02      	cmp	r3, #2
 80079c2:	d130      	bne.n	8007a26 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	689b      	ldr	r3, [r3, #8]
 80079c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80079ca:	697b      	ldr	r3, [r7, #20]
 80079cc:	005b      	lsls	r3, r3, #1
 80079ce:	2203      	movs	r2, #3
 80079d0:	409a      	lsls	r2, r3
 80079d2:	0013      	movs	r3, r2
 80079d4:	43da      	mvns	r2, r3
 80079d6:	693b      	ldr	r3, [r7, #16]
 80079d8:	4013      	ands	r3, r2
 80079da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	68da      	ldr	r2, [r3, #12]
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	005b      	lsls	r3, r3, #1
 80079e4:	409a      	lsls	r2, r3
 80079e6:	0013      	movs	r3, r2
 80079e8:	693a      	ldr	r2, [r7, #16]
 80079ea:	4313      	orrs	r3, r2
 80079ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	693a      	ldr	r2, [r7, #16]
 80079f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80079fa:	2201      	movs	r2, #1
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	409a      	lsls	r2, r3
 8007a00:	0013      	movs	r3, r2
 8007a02:	43da      	mvns	r2, r3
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	4013      	ands	r3, r2
 8007a08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	685b      	ldr	r3, [r3, #4]
 8007a0e:	091b      	lsrs	r3, r3, #4
 8007a10:	2201      	movs	r2, #1
 8007a12:	401a      	ands	r2, r3
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	409a      	lsls	r2, r3
 8007a18:	0013      	movs	r3, r2
 8007a1a:	693a      	ldr	r2, [r7, #16]
 8007a1c:	4313      	orrs	r3, r2
 8007a1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	693a      	ldr	r2, [r7, #16]
 8007a24:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	685b      	ldr	r3, [r3, #4]
 8007a2a:	2203      	movs	r2, #3
 8007a2c:	4013      	ands	r3, r2
 8007a2e:	2b03      	cmp	r3, #3
 8007a30:	d017      	beq.n	8007a62 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	68db      	ldr	r3, [r3, #12]
 8007a36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	005b      	lsls	r3, r3, #1
 8007a3c:	2203      	movs	r2, #3
 8007a3e:	409a      	lsls	r2, r3
 8007a40:	0013      	movs	r3, r2
 8007a42:	43da      	mvns	r2, r3
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	4013      	ands	r3, r2
 8007a48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	689a      	ldr	r2, [r3, #8]
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	005b      	lsls	r3, r3, #1
 8007a52:	409a      	lsls	r2, r3
 8007a54:	0013      	movs	r3, r2
 8007a56:	693a      	ldr	r2, [r7, #16]
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	693a      	ldr	r2, [r7, #16]
 8007a60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	685b      	ldr	r3, [r3, #4]
 8007a66:	2203      	movs	r2, #3
 8007a68:	4013      	ands	r3, r2
 8007a6a:	2b02      	cmp	r3, #2
 8007a6c:	d123      	bne.n	8007ab6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	08da      	lsrs	r2, r3, #3
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	3208      	adds	r2, #8
 8007a76:	0092      	lsls	r2, r2, #2
 8007a78:	58d3      	ldr	r3, [r2, r3]
 8007a7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	2207      	movs	r2, #7
 8007a80:	4013      	ands	r3, r2
 8007a82:	009b      	lsls	r3, r3, #2
 8007a84:	220f      	movs	r2, #15
 8007a86:	409a      	lsls	r2, r3
 8007a88:	0013      	movs	r3, r2
 8007a8a:	43da      	mvns	r2, r3
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	4013      	ands	r3, r2
 8007a90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	691a      	ldr	r2, [r3, #16]
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	2107      	movs	r1, #7
 8007a9a:	400b      	ands	r3, r1
 8007a9c:	009b      	lsls	r3, r3, #2
 8007a9e:	409a      	lsls	r2, r3
 8007aa0:	0013      	movs	r3, r2
 8007aa2:	693a      	ldr	r2, [r7, #16]
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	08da      	lsrs	r2, r3, #3
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	3208      	adds	r2, #8
 8007ab0:	0092      	lsls	r2, r2, #2
 8007ab2:	6939      	ldr	r1, [r7, #16]
 8007ab4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	005b      	lsls	r3, r3, #1
 8007ac0:	2203      	movs	r2, #3
 8007ac2:	409a      	lsls	r2, r3
 8007ac4:	0013      	movs	r3, r2
 8007ac6:	43da      	mvns	r2, r3
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	4013      	ands	r3, r2
 8007acc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	685b      	ldr	r3, [r3, #4]
 8007ad2:	2203      	movs	r2, #3
 8007ad4:	401a      	ands	r2, r3
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	005b      	lsls	r3, r3, #1
 8007ada:	409a      	lsls	r2, r3
 8007adc:	0013      	movs	r3, r2
 8007ade:	693a      	ldr	r2, [r7, #16]
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	693a      	ldr	r2, [r7, #16]
 8007ae8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	685a      	ldr	r2, [r3, #4]
 8007aee:	23c0      	movs	r3, #192	@ 0xc0
 8007af0:	029b      	lsls	r3, r3, #10
 8007af2:	4013      	ands	r3, r2
 8007af4:	d100      	bne.n	8007af8 <HAL_GPIO_Init+0x174>
 8007af6:	e098      	b.n	8007c2a <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8007af8:	4a53      	ldr	r2, [pc, #332]	@ (8007c48 <HAL_GPIO_Init+0x2c4>)
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	089b      	lsrs	r3, r3, #2
 8007afe:	3318      	adds	r3, #24
 8007b00:	009b      	lsls	r3, r3, #2
 8007b02:	589b      	ldr	r3, [r3, r2]
 8007b04:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	2203      	movs	r2, #3
 8007b0a:	4013      	ands	r3, r2
 8007b0c:	00db      	lsls	r3, r3, #3
 8007b0e:	220f      	movs	r2, #15
 8007b10:	409a      	lsls	r2, r3
 8007b12:	0013      	movs	r3, r2
 8007b14:	43da      	mvns	r2, r3
 8007b16:	693b      	ldr	r3, [r7, #16]
 8007b18:	4013      	ands	r3, r2
 8007b1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8007b1c:	687a      	ldr	r2, [r7, #4]
 8007b1e:	23a0      	movs	r3, #160	@ 0xa0
 8007b20:	05db      	lsls	r3, r3, #23
 8007b22:	429a      	cmp	r2, r3
 8007b24:	d019      	beq.n	8007b5a <HAL_GPIO_Init+0x1d6>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	4a48      	ldr	r2, [pc, #288]	@ (8007c4c <HAL_GPIO_Init+0x2c8>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d013      	beq.n	8007b56 <HAL_GPIO_Init+0x1d2>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	4a47      	ldr	r2, [pc, #284]	@ (8007c50 <HAL_GPIO_Init+0x2cc>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d00d      	beq.n	8007b52 <HAL_GPIO_Init+0x1ce>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	4a46      	ldr	r2, [pc, #280]	@ (8007c54 <HAL_GPIO_Init+0x2d0>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d007      	beq.n	8007b4e <HAL_GPIO_Init+0x1ca>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	4a45      	ldr	r2, [pc, #276]	@ (8007c58 <HAL_GPIO_Init+0x2d4>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d101      	bne.n	8007b4a <HAL_GPIO_Init+0x1c6>
 8007b46:	2304      	movs	r3, #4
 8007b48:	e008      	b.n	8007b5c <HAL_GPIO_Init+0x1d8>
 8007b4a:	2305      	movs	r3, #5
 8007b4c:	e006      	b.n	8007b5c <HAL_GPIO_Init+0x1d8>
 8007b4e:	2303      	movs	r3, #3
 8007b50:	e004      	b.n	8007b5c <HAL_GPIO_Init+0x1d8>
 8007b52:	2302      	movs	r3, #2
 8007b54:	e002      	b.n	8007b5c <HAL_GPIO_Init+0x1d8>
 8007b56:	2301      	movs	r3, #1
 8007b58:	e000      	b.n	8007b5c <HAL_GPIO_Init+0x1d8>
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	697a      	ldr	r2, [r7, #20]
 8007b5e:	2103      	movs	r1, #3
 8007b60:	400a      	ands	r2, r1
 8007b62:	00d2      	lsls	r2, r2, #3
 8007b64:	4093      	lsls	r3, r2
 8007b66:	693a      	ldr	r2, [r7, #16]
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8007b6c:	4936      	ldr	r1, [pc, #216]	@ (8007c48 <HAL_GPIO_Init+0x2c4>)
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	089b      	lsrs	r3, r3, #2
 8007b72:	3318      	adds	r3, #24
 8007b74:	009b      	lsls	r3, r3, #2
 8007b76:	693a      	ldr	r2, [r7, #16]
 8007b78:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007b7a:	4b33      	ldr	r3, [pc, #204]	@ (8007c48 <HAL_GPIO_Init+0x2c4>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	43da      	mvns	r2, r3
 8007b84:	693b      	ldr	r3, [r7, #16]
 8007b86:	4013      	ands	r3, r2
 8007b88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	685a      	ldr	r2, [r3, #4]
 8007b8e:	2380      	movs	r3, #128	@ 0x80
 8007b90:	035b      	lsls	r3, r3, #13
 8007b92:	4013      	ands	r3, r2
 8007b94:	d003      	beq.n	8007b9e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8007b96:	693a      	ldr	r2, [r7, #16]
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007b9e:	4b2a      	ldr	r3, [pc, #168]	@ (8007c48 <HAL_GPIO_Init+0x2c4>)
 8007ba0:	693a      	ldr	r2, [r7, #16]
 8007ba2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8007ba4:	4b28      	ldr	r3, [pc, #160]	@ (8007c48 <HAL_GPIO_Init+0x2c4>)
 8007ba6:	685b      	ldr	r3, [r3, #4]
 8007ba8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	43da      	mvns	r2, r3
 8007bae:	693b      	ldr	r3, [r7, #16]
 8007bb0:	4013      	ands	r3, r2
 8007bb2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	685a      	ldr	r2, [r3, #4]
 8007bb8:	2380      	movs	r3, #128	@ 0x80
 8007bba:	039b      	lsls	r3, r3, #14
 8007bbc:	4013      	ands	r3, r2
 8007bbe:	d003      	beq.n	8007bc8 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8007bc0:	693a      	ldr	r2, [r7, #16]
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007bc8:	4b1f      	ldr	r3, [pc, #124]	@ (8007c48 <HAL_GPIO_Init+0x2c4>)
 8007bca:	693a      	ldr	r2, [r7, #16]
 8007bcc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8007bce:	4a1e      	ldr	r2, [pc, #120]	@ (8007c48 <HAL_GPIO_Init+0x2c4>)
 8007bd0:	2384      	movs	r3, #132	@ 0x84
 8007bd2:	58d3      	ldr	r3, [r2, r3]
 8007bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	43da      	mvns	r2, r3
 8007bda:	693b      	ldr	r3, [r7, #16]
 8007bdc:	4013      	ands	r3, r2
 8007bde:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	685a      	ldr	r2, [r3, #4]
 8007be4:	2380      	movs	r3, #128	@ 0x80
 8007be6:	029b      	lsls	r3, r3, #10
 8007be8:	4013      	ands	r3, r2
 8007bea:	d003      	beq.n	8007bf4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8007bec:	693a      	ldr	r2, [r7, #16]
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007bf4:	4914      	ldr	r1, [pc, #80]	@ (8007c48 <HAL_GPIO_Init+0x2c4>)
 8007bf6:	2284      	movs	r2, #132	@ 0x84
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8007bfc:	4a12      	ldr	r2, [pc, #72]	@ (8007c48 <HAL_GPIO_Init+0x2c4>)
 8007bfe:	2380      	movs	r3, #128	@ 0x80
 8007c00:	58d3      	ldr	r3, [r2, r3]
 8007c02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	43da      	mvns	r2, r3
 8007c08:	693b      	ldr	r3, [r7, #16]
 8007c0a:	4013      	ands	r3, r2
 8007c0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	685a      	ldr	r2, [r3, #4]
 8007c12:	2380      	movs	r3, #128	@ 0x80
 8007c14:	025b      	lsls	r3, r3, #9
 8007c16:	4013      	ands	r3, r2
 8007c18:	d003      	beq.n	8007c22 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8007c1a:	693a      	ldr	r2, [r7, #16]
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007c22:	4909      	ldr	r1, [pc, #36]	@ (8007c48 <HAL_GPIO_Init+0x2c4>)
 8007c24:	2280      	movs	r2, #128	@ 0x80
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	3301      	adds	r3, #1
 8007c2e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	681a      	ldr	r2, [r3, #0]
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	40da      	lsrs	r2, r3
 8007c38:	1e13      	subs	r3, r2, #0
 8007c3a:	d000      	beq.n	8007c3e <HAL_GPIO_Init+0x2ba>
 8007c3c:	e6aa      	b.n	8007994 <HAL_GPIO_Init+0x10>
  }
}
 8007c3e:	46c0      	nop			@ (mov r8, r8)
 8007c40:	46c0      	nop			@ (mov r8, r8)
 8007c42:	46bd      	mov	sp, r7
 8007c44:	b006      	add	sp, #24
 8007c46:	bd80      	pop	{r7, pc}
 8007c48:	40021800 	.word	0x40021800
 8007c4c:	50000400 	.word	0x50000400
 8007c50:	50000800 	.word	0x50000800
 8007c54:	50000c00 	.word	0x50000c00
 8007c58:	50001000 	.word	0x50001000

08007c5c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b084      	sub	sp, #16
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	000a      	movs	r2, r1
 8007c66:	1cbb      	adds	r3, r7, #2
 8007c68:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	691b      	ldr	r3, [r3, #16]
 8007c6e:	1cba      	adds	r2, r7, #2
 8007c70:	8812      	ldrh	r2, [r2, #0]
 8007c72:	4013      	ands	r3, r2
 8007c74:	d004      	beq.n	8007c80 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8007c76:	230f      	movs	r3, #15
 8007c78:	18fb      	adds	r3, r7, r3
 8007c7a:	2201      	movs	r2, #1
 8007c7c:	701a      	strb	r2, [r3, #0]
 8007c7e:	e003      	b.n	8007c88 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007c80:	230f      	movs	r3, #15
 8007c82:	18fb      	adds	r3, r7, r3
 8007c84:	2200      	movs	r2, #0
 8007c86:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8007c88:	230f      	movs	r3, #15
 8007c8a:	18fb      	adds	r3, r7, r3
 8007c8c:	781b      	ldrb	r3, [r3, #0]
}
 8007c8e:	0018      	movs	r0, r3
 8007c90:	46bd      	mov	sp, r7
 8007c92:	b004      	add	sp, #16
 8007c94:	bd80      	pop	{r7, pc}

08007c96 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007c96:	b580      	push	{r7, lr}
 8007c98:	b082      	sub	sp, #8
 8007c9a:	af00      	add	r7, sp, #0
 8007c9c:	6078      	str	r0, [r7, #4]
 8007c9e:	0008      	movs	r0, r1
 8007ca0:	0011      	movs	r1, r2
 8007ca2:	1cbb      	adds	r3, r7, #2
 8007ca4:	1c02      	adds	r2, r0, #0
 8007ca6:	801a      	strh	r2, [r3, #0]
 8007ca8:	1c7b      	adds	r3, r7, #1
 8007caa:	1c0a      	adds	r2, r1, #0
 8007cac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007cae:	1c7b      	adds	r3, r7, #1
 8007cb0:	781b      	ldrb	r3, [r3, #0]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d004      	beq.n	8007cc0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007cb6:	1cbb      	adds	r3, r7, #2
 8007cb8:	881a      	ldrh	r2, [r3, #0]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007cbe:	e003      	b.n	8007cc8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007cc0:	1cbb      	adds	r3, r7, #2
 8007cc2:	881a      	ldrh	r2, [r3, #0]
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8007cc8:	46c0      	nop			@ (mov r8, r8)
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	b002      	add	sp, #8
 8007cce:	bd80      	pop	{r7, pc}

08007cd0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b082      	sub	sp, #8
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d101      	bne.n	8007ce2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007cde:	2301      	movs	r3, #1
 8007ce0:	e08f      	b.n	8007e02 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2241      	movs	r2, #65	@ 0x41
 8007ce6:	5c9b      	ldrb	r3, [r3, r2]
 8007ce8:	b2db      	uxtb	r3, r3
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d107      	bne.n	8007cfe <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2240      	movs	r2, #64	@ 0x40
 8007cf2:	2100      	movs	r1, #0
 8007cf4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	0018      	movs	r0, r3
 8007cfa:	f7fe fc97 	bl	800662c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2241      	movs	r2, #65	@ 0x41
 8007d02:	2124      	movs	r1, #36	@ 0x24
 8007d04:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	681a      	ldr	r2, [r3, #0]
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	2101      	movs	r1, #1
 8007d12:	438a      	bics	r2, r1
 8007d14:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	685a      	ldr	r2, [r3, #4]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	493b      	ldr	r1, [pc, #236]	@ (8007e0c <HAL_I2C_Init+0x13c>)
 8007d20:	400a      	ands	r2, r1
 8007d22:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	689a      	ldr	r2, [r3, #8]
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4938      	ldr	r1, [pc, #224]	@ (8007e10 <HAL_I2C_Init+0x140>)
 8007d30:	400a      	ands	r2, r1
 8007d32:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	68db      	ldr	r3, [r3, #12]
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d108      	bne.n	8007d4e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	689a      	ldr	r2, [r3, #8]
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	2180      	movs	r1, #128	@ 0x80
 8007d46:	0209      	lsls	r1, r1, #8
 8007d48:	430a      	orrs	r2, r1
 8007d4a:	609a      	str	r2, [r3, #8]
 8007d4c:	e007      	b.n	8007d5e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	689a      	ldr	r2, [r3, #8]
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	2184      	movs	r1, #132	@ 0x84
 8007d58:	0209      	lsls	r1, r1, #8
 8007d5a:	430a      	orrs	r2, r1
 8007d5c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	68db      	ldr	r3, [r3, #12]
 8007d62:	2b02      	cmp	r3, #2
 8007d64:	d109      	bne.n	8007d7a <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	685a      	ldr	r2, [r3, #4]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	2180      	movs	r1, #128	@ 0x80
 8007d72:	0109      	lsls	r1, r1, #4
 8007d74:	430a      	orrs	r2, r1
 8007d76:	605a      	str	r2, [r3, #4]
 8007d78:	e007      	b.n	8007d8a <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	685a      	ldr	r2, [r3, #4]
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4923      	ldr	r1, [pc, #140]	@ (8007e14 <HAL_I2C_Init+0x144>)
 8007d86:	400a      	ands	r2, r1
 8007d88:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	685a      	ldr	r2, [r3, #4]
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4920      	ldr	r1, [pc, #128]	@ (8007e18 <HAL_I2C_Init+0x148>)
 8007d96:	430a      	orrs	r2, r1
 8007d98:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	68da      	ldr	r2, [r3, #12]
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	491a      	ldr	r1, [pc, #104]	@ (8007e10 <HAL_I2C_Init+0x140>)
 8007da6:	400a      	ands	r2, r1
 8007da8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	691a      	ldr	r2, [r3, #16]
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	695b      	ldr	r3, [r3, #20]
 8007db2:	431a      	orrs	r2, r3
 8007db4:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	699b      	ldr	r3, [r3, #24]
 8007dba:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	430a      	orrs	r2, r1
 8007dc2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	69d9      	ldr	r1, [r3, #28]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6a1a      	ldr	r2, [r3, #32]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	430a      	orrs	r2, r1
 8007dd2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	681a      	ldr	r2, [r3, #0]
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	2101      	movs	r1, #1
 8007de0:	430a      	orrs	r2, r1
 8007de2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2200      	movs	r2, #0
 8007de8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2241      	movs	r2, #65	@ 0x41
 8007dee:	2120      	movs	r1, #32
 8007df0:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2200      	movs	r2, #0
 8007df6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2242      	movs	r2, #66	@ 0x42
 8007dfc:	2100      	movs	r1, #0
 8007dfe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007e00:	2300      	movs	r3, #0
}
 8007e02:	0018      	movs	r0, r3
 8007e04:	46bd      	mov	sp, r7
 8007e06:	b002      	add	sp, #8
 8007e08:	bd80      	pop	{r7, pc}
 8007e0a:	46c0      	nop			@ (mov r8, r8)
 8007e0c:	f0ffffff 	.word	0xf0ffffff
 8007e10:	ffff7fff 	.word	0xffff7fff
 8007e14:	fffff7ff 	.word	0xfffff7ff
 8007e18:	02008000 	.word	0x02008000

08007e1c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007e1c:	b590      	push	{r4, r7, lr}
 8007e1e:	b089      	sub	sp, #36	@ 0x24
 8007e20:	af02      	add	r7, sp, #8
 8007e22:	60f8      	str	r0, [r7, #12]
 8007e24:	0008      	movs	r0, r1
 8007e26:	607a      	str	r2, [r7, #4]
 8007e28:	0019      	movs	r1, r3
 8007e2a:	230a      	movs	r3, #10
 8007e2c:	18fb      	adds	r3, r7, r3
 8007e2e:	1c02      	adds	r2, r0, #0
 8007e30:	801a      	strh	r2, [r3, #0]
 8007e32:	2308      	movs	r3, #8
 8007e34:	18fb      	adds	r3, r7, r3
 8007e36:	1c0a      	adds	r2, r1, #0
 8007e38:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	2241      	movs	r2, #65	@ 0x41
 8007e3e:	5c9b      	ldrb	r3, [r3, r2]
 8007e40:	b2db      	uxtb	r3, r3
 8007e42:	2b20      	cmp	r3, #32
 8007e44:	d000      	beq.n	8007e48 <HAL_I2C_Master_Transmit+0x2c>
 8007e46:	e10a      	b.n	800805e <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	2240      	movs	r2, #64	@ 0x40
 8007e4c:	5c9b      	ldrb	r3, [r3, r2]
 8007e4e:	2b01      	cmp	r3, #1
 8007e50:	d101      	bne.n	8007e56 <HAL_I2C_Master_Transmit+0x3a>
 8007e52:	2302      	movs	r3, #2
 8007e54:	e104      	b.n	8008060 <HAL_I2C_Master_Transmit+0x244>
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	2240      	movs	r2, #64	@ 0x40
 8007e5a:	2101      	movs	r1, #1
 8007e5c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007e5e:	f7ff fc99 	bl	8007794 <HAL_GetTick>
 8007e62:	0003      	movs	r3, r0
 8007e64:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007e66:	2380      	movs	r3, #128	@ 0x80
 8007e68:	0219      	lsls	r1, r3, #8
 8007e6a:	68f8      	ldr	r0, [r7, #12]
 8007e6c:	693b      	ldr	r3, [r7, #16]
 8007e6e:	9300      	str	r3, [sp, #0]
 8007e70:	2319      	movs	r3, #25
 8007e72:	2201      	movs	r2, #1
 8007e74:	f000 fa26 	bl	80082c4 <I2C_WaitOnFlagUntilTimeout>
 8007e78:	1e03      	subs	r3, r0, #0
 8007e7a:	d001      	beq.n	8007e80 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	e0ef      	b.n	8008060 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	2241      	movs	r2, #65	@ 0x41
 8007e84:	2121      	movs	r1, #33	@ 0x21
 8007e86:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2242      	movs	r2, #66	@ 0x42
 8007e8c:	2110      	movs	r1, #16
 8007e8e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	2200      	movs	r2, #0
 8007e94:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	687a      	ldr	r2, [r7, #4]
 8007e9a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	2208      	movs	r2, #8
 8007ea0:	18ba      	adds	r2, r7, r2
 8007ea2:	8812      	ldrh	r2, [r2, #0]
 8007ea4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007eb0:	b29b      	uxth	r3, r3
 8007eb2:	2bff      	cmp	r3, #255	@ 0xff
 8007eb4:	d906      	bls.n	8007ec4 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	22ff      	movs	r2, #255	@ 0xff
 8007eba:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8007ebc:	2380      	movs	r3, #128	@ 0x80
 8007ebe:	045b      	lsls	r3, r3, #17
 8007ec0:	617b      	str	r3, [r7, #20]
 8007ec2:	e007      	b.n	8007ed4 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ec8:	b29a      	uxth	r2, r3
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8007ece:	2380      	movs	r3, #128	@ 0x80
 8007ed0:	049b      	lsls	r3, r3, #18
 8007ed2:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d027      	beq.n	8007f2c <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ee0:	781a      	ldrb	r2, [r3, #0]
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007eec:	1c5a      	adds	r2, r3, #1
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ef6:	b29b      	uxth	r3, r3
 8007ef8:	3b01      	subs	r3, #1
 8007efa:	b29a      	uxth	r2, r3
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f04:	3b01      	subs	r3, #1
 8007f06:	b29a      	uxth	r2, r3
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f10:	b2db      	uxtb	r3, r3
 8007f12:	3301      	adds	r3, #1
 8007f14:	b2da      	uxtb	r2, r3
 8007f16:	697c      	ldr	r4, [r7, #20]
 8007f18:	230a      	movs	r3, #10
 8007f1a:	18fb      	adds	r3, r7, r3
 8007f1c:	8819      	ldrh	r1, [r3, #0]
 8007f1e:	68f8      	ldr	r0, [r7, #12]
 8007f20:	4b51      	ldr	r3, [pc, #324]	@ (8008068 <HAL_I2C_Master_Transmit+0x24c>)
 8007f22:	9300      	str	r3, [sp, #0]
 8007f24:	0023      	movs	r3, r4
 8007f26:	f000 fc45 	bl	80087b4 <I2C_TransferConfig>
 8007f2a:	e06f      	b.n	800800c <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f30:	b2da      	uxtb	r2, r3
 8007f32:	697c      	ldr	r4, [r7, #20]
 8007f34:	230a      	movs	r3, #10
 8007f36:	18fb      	adds	r3, r7, r3
 8007f38:	8819      	ldrh	r1, [r3, #0]
 8007f3a:	68f8      	ldr	r0, [r7, #12]
 8007f3c:	4b4a      	ldr	r3, [pc, #296]	@ (8008068 <HAL_I2C_Master_Transmit+0x24c>)
 8007f3e:	9300      	str	r3, [sp, #0]
 8007f40:	0023      	movs	r3, r4
 8007f42:	f000 fc37 	bl	80087b4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8007f46:	e061      	b.n	800800c <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007f48:	693a      	ldr	r2, [r7, #16]
 8007f4a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	0018      	movs	r0, r3
 8007f50:	f000 fa10 	bl	8008374 <I2C_WaitOnTXISFlagUntilTimeout>
 8007f54:	1e03      	subs	r3, r0, #0
 8007f56:	d001      	beq.n	8007f5c <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8007f58:	2301      	movs	r3, #1
 8007f5a:	e081      	b.n	8008060 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f60:	781a      	ldrb	r2, [r3, #0]
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f6c:	1c5a      	adds	r2, r3, #1
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f76:	b29b      	uxth	r3, r3
 8007f78:	3b01      	subs	r3, #1
 8007f7a:	b29a      	uxth	r2, r3
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f84:	3b01      	subs	r3, #1
 8007f86:	b29a      	uxth	r2, r3
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f90:	b29b      	uxth	r3, r3
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d03a      	beq.n	800800c <HAL_I2C_Master_Transmit+0x1f0>
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d136      	bne.n	800800c <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007f9e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007fa0:	68f8      	ldr	r0, [r7, #12]
 8007fa2:	693b      	ldr	r3, [r7, #16]
 8007fa4:	9300      	str	r3, [sp, #0]
 8007fa6:	0013      	movs	r3, r2
 8007fa8:	2200      	movs	r2, #0
 8007faa:	2180      	movs	r1, #128	@ 0x80
 8007fac:	f000 f98a 	bl	80082c4 <I2C_WaitOnFlagUntilTimeout>
 8007fb0:	1e03      	subs	r3, r0, #0
 8007fb2:	d001      	beq.n	8007fb8 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	e053      	b.n	8008060 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007fbc:	b29b      	uxth	r3, r3
 8007fbe:	2bff      	cmp	r3, #255	@ 0xff
 8007fc0:	d911      	bls.n	8007fe6 <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	22ff      	movs	r2, #255	@ 0xff
 8007fc6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007fcc:	b2da      	uxtb	r2, r3
 8007fce:	2380      	movs	r3, #128	@ 0x80
 8007fd0:	045c      	lsls	r4, r3, #17
 8007fd2:	230a      	movs	r3, #10
 8007fd4:	18fb      	adds	r3, r7, r3
 8007fd6:	8819      	ldrh	r1, [r3, #0]
 8007fd8:	68f8      	ldr	r0, [r7, #12]
 8007fda:	2300      	movs	r3, #0
 8007fdc:	9300      	str	r3, [sp, #0]
 8007fde:	0023      	movs	r3, r4
 8007fe0:	f000 fbe8 	bl	80087b4 <I2C_TransferConfig>
 8007fe4:	e012      	b.n	800800c <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007fea:	b29a      	uxth	r2, r3
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ff4:	b2da      	uxtb	r2, r3
 8007ff6:	2380      	movs	r3, #128	@ 0x80
 8007ff8:	049c      	lsls	r4, r3, #18
 8007ffa:	230a      	movs	r3, #10
 8007ffc:	18fb      	adds	r3, r7, r3
 8007ffe:	8819      	ldrh	r1, [r3, #0]
 8008000:	68f8      	ldr	r0, [r7, #12]
 8008002:	2300      	movs	r3, #0
 8008004:	9300      	str	r3, [sp, #0]
 8008006:	0023      	movs	r3, r4
 8008008:	f000 fbd4 	bl	80087b4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008010:	b29b      	uxth	r3, r3
 8008012:	2b00      	cmp	r3, #0
 8008014:	d198      	bne.n	8007f48 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008016:	693a      	ldr	r2, [r7, #16]
 8008018:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	0018      	movs	r0, r3
 800801e:	f000 f9ef 	bl	8008400 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008022:	1e03      	subs	r3, r0, #0
 8008024:	d001      	beq.n	800802a <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8008026:	2301      	movs	r3, #1
 8008028:	e01a      	b.n	8008060 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	2220      	movs	r2, #32
 8008030:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	685a      	ldr	r2, [r3, #4]
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	490b      	ldr	r1, [pc, #44]	@ (800806c <HAL_I2C_Master_Transmit+0x250>)
 800803e:	400a      	ands	r2, r1
 8008040:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	2241      	movs	r2, #65	@ 0x41
 8008046:	2120      	movs	r1, #32
 8008048:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	2242      	movs	r2, #66	@ 0x42
 800804e:	2100      	movs	r1, #0
 8008050:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	2240      	movs	r2, #64	@ 0x40
 8008056:	2100      	movs	r1, #0
 8008058:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800805a:	2300      	movs	r3, #0
 800805c:	e000      	b.n	8008060 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 800805e:	2302      	movs	r3, #2
  }
}
 8008060:	0018      	movs	r0, r3
 8008062:	46bd      	mov	sp, r7
 8008064:	b007      	add	sp, #28
 8008066:	bd90      	pop	{r4, r7, pc}
 8008068:	80002000 	.word	0x80002000
 800806c:	fe00e800 	.word	0xfe00e800

08008070 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8008070:	b590      	push	{r4, r7, lr}
 8008072:	b089      	sub	sp, #36	@ 0x24
 8008074:	af02      	add	r7, sp, #8
 8008076:	60f8      	str	r0, [r7, #12]
 8008078:	0008      	movs	r0, r1
 800807a:	607a      	str	r2, [r7, #4]
 800807c:	0019      	movs	r1, r3
 800807e:	230a      	movs	r3, #10
 8008080:	18fb      	adds	r3, r7, r3
 8008082:	1c02      	adds	r2, r0, #0
 8008084:	801a      	strh	r2, [r3, #0]
 8008086:	2308      	movs	r3, #8
 8008088:	18fb      	adds	r3, r7, r3
 800808a:	1c0a      	adds	r2, r1, #0
 800808c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	2241      	movs	r2, #65	@ 0x41
 8008092:	5c9b      	ldrb	r3, [r3, r2]
 8008094:	b2db      	uxtb	r3, r3
 8008096:	2b20      	cmp	r3, #32
 8008098:	d000      	beq.n	800809c <HAL_I2C_Master_Receive+0x2c>
 800809a:	e0e8      	b.n	800826e <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	2240      	movs	r2, #64	@ 0x40
 80080a0:	5c9b      	ldrb	r3, [r3, r2]
 80080a2:	2b01      	cmp	r3, #1
 80080a4:	d101      	bne.n	80080aa <HAL_I2C_Master_Receive+0x3a>
 80080a6:	2302      	movs	r3, #2
 80080a8:	e0e2      	b.n	8008270 <HAL_I2C_Master_Receive+0x200>
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	2240      	movs	r2, #64	@ 0x40
 80080ae:	2101      	movs	r1, #1
 80080b0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80080b2:	f7ff fb6f 	bl	8007794 <HAL_GetTick>
 80080b6:	0003      	movs	r3, r0
 80080b8:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80080ba:	2380      	movs	r3, #128	@ 0x80
 80080bc:	0219      	lsls	r1, r3, #8
 80080be:	68f8      	ldr	r0, [r7, #12]
 80080c0:	697b      	ldr	r3, [r7, #20]
 80080c2:	9300      	str	r3, [sp, #0]
 80080c4:	2319      	movs	r3, #25
 80080c6:	2201      	movs	r2, #1
 80080c8:	f000 f8fc 	bl	80082c4 <I2C_WaitOnFlagUntilTimeout>
 80080cc:	1e03      	subs	r3, r0, #0
 80080ce:	d001      	beq.n	80080d4 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 80080d0:	2301      	movs	r3, #1
 80080d2:	e0cd      	b.n	8008270 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	2241      	movs	r2, #65	@ 0x41
 80080d8:	2122      	movs	r1, #34	@ 0x22
 80080da:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	2242      	movs	r2, #66	@ 0x42
 80080e0:	2110      	movs	r1, #16
 80080e2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	2200      	movs	r2, #0
 80080e8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	687a      	ldr	r2, [r7, #4]
 80080ee:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	2208      	movs	r2, #8
 80080f4:	18ba      	adds	r2, r7, r2
 80080f6:	8812      	ldrh	r2, [r2, #0]
 80080f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	2200      	movs	r2, #0
 80080fe:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008104:	b29b      	uxth	r3, r3
 8008106:	2bff      	cmp	r3, #255	@ 0xff
 8008108:	d911      	bls.n	800812e <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	22ff      	movs	r2, #255	@ 0xff
 800810e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008114:	b2da      	uxtb	r2, r3
 8008116:	2380      	movs	r3, #128	@ 0x80
 8008118:	045c      	lsls	r4, r3, #17
 800811a:	230a      	movs	r3, #10
 800811c:	18fb      	adds	r3, r7, r3
 800811e:	8819      	ldrh	r1, [r3, #0]
 8008120:	68f8      	ldr	r0, [r7, #12]
 8008122:	4b55      	ldr	r3, [pc, #340]	@ (8008278 <HAL_I2C_Master_Receive+0x208>)
 8008124:	9300      	str	r3, [sp, #0]
 8008126:	0023      	movs	r3, r4
 8008128:	f000 fb44 	bl	80087b4 <I2C_TransferConfig>
 800812c:	e076      	b.n	800821c <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008132:	b29a      	uxth	r2, r3
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800813c:	b2da      	uxtb	r2, r3
 800813e:	2380      	movs	r3, #128	@ 0x80
 8008140:	049c      	lsls	r4, r3, #18
 8008142:	230a      	movs	r3, #10
 8008144:	18fb      	adds	r3, r7, r3
 8008146:	8819      	ldrh	r1, [r3, #0]
 8008148:	68f8      	ldr	r0, [r7, #12]
 800814a:	4b4b      	ldr	r3, [pc, #300]	@ (8008278 <HAL_I2C_Master_Receive+0x208>)
 800814c:	9300      	str	r3, [sp, #0]
 800814e:	0023      	movs	r3, r4
 8008150:	f000 fb30 	bl	80087b4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8008154:	e062      	b.n	800821c <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008156:	697a      	ldr	r2, [r7, #20]
 8008158:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	0018      	movs	r0, r3
 800815e:	f000 f993 	bl	8008488 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008162:	1e03      	subs	r3, r0, #0
 8008164:	d001      	beq.n	800816a <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8008166:	2301      	movs	r3, #1
 8008168:	e082      	b.n	8008270 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008174:	b2d2      	uxtb	r2, r2
 8008176:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800817c:	1c5a      	adds	r2, r3, #1
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008186:	3b01      	subs	r3, #1
 8008188:	b29a      	uxth	r2, r3
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008192:	b29b      	uxth	r3, r3
 8008194:	3b01      	subs	r3, #1
 8008196:	b29a      	uxth	r2, r3
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80081a0:	b29b      	uxth	r3, r3
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d03a      	beq.n	800821c <HAL_I2C_Master_Receive+0x1ac>
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d136      	bne.n	800821c <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80081ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80081b0:	68f8      	ldr	r0, [r7, #12]
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	9300      	str	r3, [sp, #0]
 80081b6:	0013      	movs	r3, r2
 80081b8:	2200      	movs	r2, #0
 80081ba:	2180      	movs	r1, #128	@ 0x80
 80081bc:	f000 f882 	bl	80082c4 <I2C_WaitOnFlagUntilTimeout>
 80081c0:	1e03      	subs	r3, r0, #0
 80081c2:	d001      	beq.n	80081c8 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 80081c4:	2301      	movs	r3, #1
 80081c6:	e053      	b.n	8008270 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80081cc:	b29b      	uxth	r3, r3
 80081ce:	2bff      	cmp	r3, #255	@ 0xff
 80081d0:	d911      	bls.n	80081f6 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	22ff      	movs	r2, #255	@ 0xff
 80081d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80081dc:	b2da      	uxtb	r2, r3
 80081de:	2380      	movs	r3, #128	@ 0x80
 80081e0:	045c      	lsls	r4, r3, #17
 80081e2:	230a      	movs	r3, #10
 80081e4:	18fb      	adds	r3, r7, r3
 80081e6:	8819      	ldrh	r1, [r3, #0]
 80081e8:	68f8      	ldr	r0, [r7, #12]
 80081ea:	2300      	movs	r3, #0
 80081ec:	9300      	str	r3, [sp, #0]
 80081ee:	0023      	movs	r3, r4
 80081f0:	f000 fae0 	bl	80087b4 <I2C_TransferConfig>
 80081f4:	e012      	b.n	800821c <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80081fa:	b29a      	uxth	r2, r3
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008204:	b2da      	uxtb	r2, r3
 8008206:	2380      	movs	r3, #128	@ 0x80
 8008208:	049c      	lsls	r4, r3, #18
 800820a:	230a      	movs	r3, #10
 800820c:	18fb      	adds	r3, r7, r3
 800820e:	8819      	ldrh	r1, [r3, #0]
 8008210:	68f8      	ldr	r0, [r7, #12]
 8008212:	2300      	movs	r3, #0
 8008214:	9300      	str	r3, [sp, #0]
 8008216:	0023      	movs	r3, r4
 8008218:	f000 facc 	bl	80087b4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008220:	b29b      	uxth	r3, r3
 8008222:	2b00      	cmp	r3, #0
 8008224:	d197      	bne.n	8008156 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008226:	697a      	ldr	r2, [r7, #20]
 8008228:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	0018      	movs	r0, r3
 800822e:	f000 f8e7 	bl	8008400 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008232:	1e03      	subs	r3, r0, #0
 8008234:	d001      	beq.n	800823a <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8008236:	2301      	movs	r3, #1
 8008238:	e01a      	b.n	8008270 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	2220      	movs	r2, #32
 8008240:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	685a      	ldr	r2, [r3, #4]
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	490b      	ldr	r1, [pc, #44]	@ (800827c <HAL_I2C_Master_Receive+0x20c>)
 800824e:	400a      	ands	r2, r1
 8008250:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	2241      	movs	r2, #65	@ 0x41
 8008256:	2120      	movs	r1, #32
 8008258:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	2242      	movs	r2, #66	@ 0x42
 800825e:	2100      	movs	r1, #0
 8008260:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	2240      	movs	r2, #64	@ 0x40
 8008266:	2100      	movs	r1, #0
 8008268:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800826a:	2300      	movs	r3, #0
 800826c:	e000      	b.n	8008270 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 800826e:	2302      	movs	r3, #2
  }
}
 8008270:	0018      	movs	r0, r3
 8008272:	46bd      	mov	sp, r7
 8008274:	b007      	add	sp, #28
 8008276:	bd90      	pop	{r4, r7, pc}
 8008278:	80002400 	.word	0x80002400
 800827c:	fe00e800 	.word	0xfe00e800

08008280 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b082      	sub	sp, #8
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	699b      	ldr	r3, [r3, #24]
 800828e:	2202      	movs	r2, #2
 8008290:	4013      	ands	r3, r2
 8008292:	2b02      	cmp	r3, #2
 8008294:	d103      	bne.n	800829e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	2200      	movs	r2, #0
 800829c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	699b      	ldr	r3, [r3, #24]
 80082a4:	2201      	movs	r2, #1
 80082a6:	4013      	ands	r3, r2
 80082a8:	2b01      	cmp	r3, #1
 80082aa:	d007      	beq.n	80082bc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	699a      	ldr	r2, [r3, #24]
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	2101      	movs	r1, #1
 80082b8:	430a      	orrs	r2, r1
 80082ba:	619a      	str	r2, [r3, #24]
  }
}
 80082bc:	46c0      	nop			@ (mov r8, r8)
 80082be:	46bd      	mov	sp, r7
 80082c0:	b002      	add	sp, #8
 80082c2:	bd80      	pop	{r7, pc}

080082c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b084      	sub	sp, #16
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	60f8      	str	r0, [r7, #12]
 80082cc:	60b9      	str	r1, [r7, #8]
 80082ce:	603b      	str	r3, [r7, #0]
 80082d0:	1dfb      	adds	r3, r7, #7
 80082d2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80082d4:	e03a      	b.n	800834c <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80082d6:	69ba      	ldr	r2, [r7, #24]
 80082d8:	6839      	ldr	r1, [r7, #0]
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	0018      	movs	r0, r3
 80082de:	f000 f971 	bl	80085c4 <I2C_IsErrorOccurred>
 80082e2:	1e03      	subs	r3, r0, #0
 80082e4:	d001      	beq.n	80082ea <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80082e6:	2301      	movs	r3, #1
 80082e8:	e040      	b.n	800836c <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	3301      	adds	r3, #1
 80082ee:	d02d      	beq.n	800834c <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082f0:	f7ff fa50 	bl	8007794 <HAL_GetTick>
 80082f4:	0002      	movs	r2, r0
 80082f6:	69bb      	ldr	r3, [r7, #24]
 80082f8:	1ad3      	subs	r3, r2, r3
 80082fa:	683a      	ldr	r2, [r7, #0]
 80082fc:	429a      	cmp	r2, r3
 80082fe:	d302      	bcc.n	8008306 <I2C_WaitOnFlagUntilTimeout+0x42>
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d122      	bne.n	800834c <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	699b      	ldr	r3, [r3, #24]
 800830c:	68ba      	ldr	r2, [r7, #8]
 800830e:	4013      	ands	r3, r2
 8008310:	68ba      	ldr	r2, [r7, #8]
 8008312:	1ad3      	subs	r3, r2, r3
 8008314:	425a      	negs	r2, r3
 8008316:	4153      	adcs	r3, r2
 8008318:	b2db      	uxtb	r3, r3
 800831a:	001a      	movs	r2, r3
 800831c:	1dfb      	adds	r3, r7, #7
 800831e:	781b      	ldrb	r3, [r3, #0]
 8008320:	429a      	cmp	r2, r3
 8008322:	d113      	bne.n	800834c <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008328:	2220      	movs	r2, #32
 800832a:	431a      	orrs	r2, r3
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	2241      	movs	r2, #65	@ 0x41
 8008334:	2120      	movs	r1, #32
 8008336:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	2242      	movs	r2, #66	@ 0x42
 800833c:	2100      	movs	r1, #0
 800833e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	2240      	movs	r2, #64	@ 0x40
 8008344:	2100      	movs	r1, #0
 8008346:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8008348:	2301      	movs	r3, #1
 800834a:	e00f      	b.n	800836c <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	699b      	ldr	r3, [r3, #24]
 8008352:	68ba      	ldr	r2, [r7, #8]
 8008354:	4013      	ands	r3, r2
 8008356:	68ba      	ldr	r2, [r7, #8]
 8008358:	1ad3      	subs	r3, r2, r3
 800835a:	425a      	negs	r2, r3
 800835c:	4153      	adcs	r3, r2
 800835e:	b2db      	uxtb	r3, r3
 8008360:	001a      	movs	r2, r3
 8008362:	1dfb      	adds	r3, r7, #7
 8008364:	781b      	ldrb	r3, [r3, #0]
 8008366:	429a      	cmp	r2, r3
 8008368:	d0b5      	beq.n	80082d6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800836a:	2300      	movs	r3, #0
}
 800836c:	0018      	movs	r0, r3
 800836e:	46bd      	mov	sp, r7
 8008370:	b004      	add	sp, #16
 8008372:	bd80      	pop	{r7, pc}

08008374 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b084      	sub	sp, #16
 8008378:	af00      	add	r7, sp, #0
 800837a:	60f8      	str	r0, [r7, #12]
 800837c:	60b9      	str	r1, [r7, #8]
 800837e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008380:	e032      	b.n	80083e8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008382:	687a      	ldr	r2, [r7, #4]
 8008384:	68b9      	ldr	r1, [r7, #8]
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	0018      	movs	r0, r3
 800838a:	f000 f91b 	bl	80085c4 <I2C_IsErrorOccurred>
 800838e:	1e03      	subs	r3, r0, #0
 8008390:	d001      	beq.n	8008396 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008392:	2301      	movs	r3, #1
 8008394:	e030      	b.n	80083f8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	3301      	adds	r3, #1
 800839a:	d025      	beq.n	80083e8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800839c:	f7ff f9fa 	bl	8007794 <HAL_GetTick>
 80083a0:	0002      	movs	r2, r0
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	1ad3      	subs	r3, r2, r3
 80083a6:	68ba      	ldr	r2, [r7, #8]
 80083a8:	429a      	cmp	r2, r3
 80083aa:	d302      	bcc.n	80083b2 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d11a      	bne.n	80083e8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	699b      	ldr	r3, [r3, #24]
 80083b8:	2202      	movs	r2, #2
 80083ba:	4013      	ands	r3, r2
 80083bc:	2b02      	cmp	r3, #2
 80083be:	d013      	beq.n	80083e8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083c4:	2220      	movs	r2, #32
 80083c6:	431a      	orrs	r2, r3
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	2241      	movs	r2, #65	@ 0x41
 80083d0:	2120      	movs	r1, #32
 80083d2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	2242      	movs	r2, #66	@ 0x42
 80083d8:	2100      	movs	r1, #0
 80083da:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	2240      	movs	r2, #64	@ 0x40
 80083e0:	2100      	movs	r1, #0
 80083e2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80083e4:	2301      	movs	r3, #1
 80083e6:	e007      	b.n	80083f8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	699b      	ldr	r3, [r3, #24]
 80083ee:	2202      	movs	r2, #2
 80083f0:	4013      	ands	r3, r2
 80083f2:	2b02      	cmp	r3, #2
 80083f4:	d1c5      	bne.n	8008382 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80083f6:	2300      	movs	r3, #0
}
 80083f8:	0018      	movs	r0, r3
 80083fa:	46bd      	mov	sp, r7
 80083fc:	b004      	add	sp, #16
 80083fe:	bd80      	pop	{r7, pc}

08008400 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b084      	sub	sp, #16
 8008404:	af00      	add	r7, sp, #0
 8008406:	60f8      	str	r0, [r7, #12]
 8008408:	60b9      	str	r1, [r7, #8]
 800840a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800840c:	e02f      	b.n	800846e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800840e:	687a      	ldr	r2, [r7, #4]
 8008410:	68b9      	ldr	r1, [r7, #8]
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	0018      	movs	r0, r3
 8008416:	f000 f8d5 	bl	80085c4 <I2C_IsErrorOccurred>
 800841a:	1e03      	subs	r3, r0, #0
 800841c:	d001      	beq.n	8008422 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800841e:	2301      	movs	r3, #1
 8008420:	e02d      	b.n	800847e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008422:	f7ff f9b7 	bl	8007794 <HAL_GetTick>
 8008426:	0002      	movs	r2, r0
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	1ad3      	subs	r3, r2, r3
 800842c:	68ba      	ldr	r2, [r7, #8]
 800842e:	429a      	cmp	r2, r3
 8008430:	d302      	bcc.n	8008438 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d11a      	bne.n	800846e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	699b      	ldr	r3, [r3, #24]
 800843e:	2220      	movs	r2, #32
 8008440:	4013      	ands	r3, r2
 8008442:	2b20      	cmp	r3, #32
 8008444:	d013      	beq.n	800846e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800844a:	2220      	movs	r2, #32
 800844c:	431a      	orrs	r2, r3
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	2241      	movs	r2, #65	@ 0x41
 8008456:	2120      	movs	r1, #32
 8008458:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	2242      	movs	r2, #66	@ 0x42
 800845e:	2100      	movs	r1, #0
 8008460:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	2240      	movs	r2, #64	@ 0x40
 8008466:	2100      	movs	r1, #0
 8008468:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800846a:	2301      	movs	r3, #1
 800846c:	e007      	b.n	800847e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	699b      	ldr	r3, [r3, #24]
 8008474:	2220      	movs	r2, #32
 8008476:	4013      	ands	r3, r2
 8008478:	2b20      	cmp	r3, #32
 800847a:	d1c8      	bne.n	800840e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800847c:	2300      	movs	r3, #0
}
 800847e:	0018      	movs	r0, r3
 8008480:	46bd      	mov	sp, r7
 8008482:	b004      	add	sp, #16
 8008484:	bd80      	pop	{r7, pc}
	...

08008488 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b086      	sub	sp, #24
 800848c:	af00      	add	r7, sp, #0
 800848e:	60f8      	str	r0, [r7, #12]
 8008490:	60b9      	str	r1, [r7, #8]
 8008492:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008494:	2317      	movs	r3, #23
 8008496:	18fb      	adds	r3, r7, r3
 8008498:	2200      	movs	r2, #0
 800849a:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800849c:	e07b      	b.n	8008596 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800849e:	687a      	ldr	r2, [r7, #4]
 80084a0:	68b9      	ldr	r1, [r7, #8]
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	0018      	movs	r0, r3
 80084a6:	f000 f88d 	bl	80085c4 <I2C_IsErrorOccurred>
 80084aa:	1e03      	subs	r3, r0, #0
 80084ac:	d003      	beq.n	80084b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 80084ae:	2317      	movs	r3, #23
 80084b0:	18fb      	adds	r3, r7, r3
 80084b2:	2201      	movs	r2, #1
 80084b4:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	699b      	ldr	r3, [r3, #24]
 80084bc:	2220      	movs	r2, #32
 80084be:	4013      	ands	r3, r2
 80084c0:	2b20      	cmp	r3, #32
 80084c2:	d140      	bne.n	8008546 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 80084c4:	2117      	movs	r1, #23
 80084c6:	187b      	adds	r3, r7, r1
 80084c8:	781b      	ldrb	r3, [r3, #0]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d13b      	bne.n	8008546 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	699b      	ldr	r3, [r3, #24]
 80084d4:	2204      	movs	r2, #4
 80084d6:	4013      	ands	r3, r2
 80084d8:	2b04      	cmp	r3, #4
 80084da:	d106      	bne.n	80084ea <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d002      	beq.n	80084ea <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80084e4:	187b      	adds	r3, r7, r1
 80084e6:	2200      	movs	r2, #0
 80084e8:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	699b      	ldr	r3, [r3, #24]
 80084f0:	2210      	movs	r2, #16
 80084f2:	4013      	ands	r3, r2
 80084f4:	2b10      	cmp	r3, #16
 80084f6:	d123      	bne.n	8008540 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	2210      	movs	r2, #16
 80084fe:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	2204      	movs	r2, #4
 8008504:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	2220      	movs	r2, #32
 800850c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	685a      	ldr	r2, [r3, #4]
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	4929      	ldr	r1, [pc, #164]	@ (80085c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 800851a:	400a      	ands	r2, r1
 800851c:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	2241      	movs	r2, #65	@ 0x41
 8008522:	2120      	movs	r1, #32
 8008524:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	2242      	movs	r2, #66	@ 0x42
 800852a:	2100      	movs	r1, #0
 800852c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	2240      	movs	r2, #64	@ 0x40
 8008532:	2100      	movs	r1, #0
 8008534:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8008536:	2317      	movs	r3, #23
 8008538:	18fb      	adds	r3, r7, r3
 800853a:	2201      	movs	r2, #1
 800853c:	701a      	strb	r2, [r3, #0]
 800853e:	e002      	b.n	8008546 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	2200      	movs	r2, #0
 8008544:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8008546:	f7ff f925 	bl	8007794 <HAL_GetTick>
 800854a:	0002      	movs	r2, r0
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	1ad3      	subs	r3, r2, r3
 8008550:	68ba      	ldr	r2, [r7, #8]
 8008552:	429a      	cmp	r2, r3
 8008554:	d302      	bcc.n	800855c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d11c      	bne.n	8008596 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 800855c:	2017      	movs	r0, #23
 800855e:	183b      	adds	r3, r7, r0
 8008560:	781b      	ldrb	r3, [r3, #0]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d117      	bne.n	8008596 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	699b      	ldr	r3, [r3, #24]
 800856c:	2204      	movs	r2, #4
 800856e:	4013      	ands	r3, r2
 8008570:	2b04      	cmp	r3, #4
 8008572:	d010      	beq.n	8008596 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008578:	2220      	movs	r2, #32
 800857a:	431a      	orrs	r2, r3
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	2241      	movs	r2, #65	@ 0x41
 8008584:	2120      	movs	r1, #32
 8008586:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	2240      	movs	r2, #64	@ 0x40
 800858c:	2100      	movs	r1, #0
 800858e:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8008590:	183b      	adds	r3, r7, r0
 8008592:	2201      	movs	r2, #1
 8008594:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	699b      	ldr	r3, [r3, #24]
 800859c:	2204      	movs	r2, #4
 800859e:	4013      	ands	r3, r2
 80085a0:	2b04      	cmp	r3, #4
 80085a2:	d005      	beq.n	80085b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 80085a4:	2317      	movs	r3, #23
 80085a6:	18fb      	adds	r3, r7, r3
 80085a8:	781b      	ldrb	r3, [r3, #0]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d100      	bne.n	80085b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 80085ae:	e776      	b.n	800849e <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 80085b0:	2317      	movs	r3, #23
 80085b2:	18fb      	adds	r3, r7, r3
 80085b4:	781b      	ldrb	r3, [r3, #0]
}
 80085b6:	0018      	movs	r0, r3
 80085b8:	46bd      	mov	sp, r7
 80085ba:	b006      	add	sp, #24
 80085bc:	bd80      	pop	{r7, pc}
 80085be:	46c0      	nop			@ (mov r8, r8)
 80085c0:	fe00e800 	.word	0xfe00e800

080085c4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b08a      	sub	sp, #40	@ 0x28
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	60f8      	str	r0, [r7, #12]
 80085cc:	60b9      	str	r1, [r7, #8]
 80085ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80085d0:	2327      	movs	r3, #39	@ 0x27
 80085d2:	18fb      	adds	r3, r7, r3
 80085d4:	2200      	movs	r2, #0
 80085d6:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	699b      	ldr	r3, [r3, #24]
 80085de:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80085e0:	2300      	movs	r3, #0
 80085e2:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80085e8:	69bb      	ldr	r3, [r7, #24]
 80085ea:	2210      	movs	r2, #16
 80085ec:	4013      	ands	r3, r2
 80085ee:	d100      	bne.n	80085f2 <I2C_IsErrorOccurred+0x2e>
 80085f0:	e079      	b.n	80086e6 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	2210      	movs	r2, #16
 80085f8:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80085fa:	e057      	b.n	80086ac <I2C_IsErrorOccurred+0xe8>
 80085fc:	2227      	movs	r2, #39	@ 0x27
 80085fe:	18bb      	adds	r3, r7, r2
 8008600:	18ba      	adds	r2, r7, r2
 8008602:	7812      	ldrb	r2, [r2, #0]
 8008604:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	3301      	adds	r3, #1
 800860a:	d04f      	beq.n	80086ac <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800860c:	f7ff f8c2 	bl	8007794 <HAL_GetTick>
 8008610:	0002      	movs	r2, r0
 8008612:	69fb      	ldr	r3, [r7, #28]
 8008614:	1ad3      	subs	r3, r2, r3
 8008616:	68ba      	ldr	r2, [r7, #8]
 8008618:	429a      	cmp	r2, r3
 800861a:	d302      	bcc.n	8008622 <I2C_IsErrorOccurred+0x5e>
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d144      	bne.n	80086ac <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	685a      	ldr	r2, [r3, #4]
 8008628:	2380      	movs	r3, #128	@ 0x80
 800862a:	01db      	lsls	r3, r3, #7
 800862c:	4013      	ands	r3, r2
 800862e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008630:	2013      	movs	r0, #19
 8008632:	183b      	adds	r3, r7, r0
 8008634:	68fa      	ldr	r2, [r7, #12]
 8008636:	2142      	movs	r1, #66	@ 0x42
 8008638:	5c52      	ldrb	r2, [r2, r1]
 800863a:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	699a      	ldr	r2, [r3, #24]
 8008642:	2380      	movs	r3, #128	@ 0x80
 8008644:	021b      	lsls	r3, r3, #8
 8008646:	401a      	ands	r2, r3
 8008648:	2380      	movs	r3, #128	@ 0x80
 800864a:	021b      	lsls	r3, r3, #8
 800864c:	429a      	cmp	r2, r3
 800864e:	d126      	bne.n	800869e <I2C_IsErrorOccurred+0xda>
 8008650:	697a      	ldr	r2, [r7, #20]
 8008652:	2380      	movs	r3, #128	@ 0x80
 8008654:	01db      	lsls	r3, r3, #7
 8008656:	429a      	cmp	r2, r3
 8008658:	d021      	beq.n	800869e <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 800865a:	183b      	adds	r3, r7, r0
 800865c:	781b      	ldrb	r3, [r3, #0]
 800865e:	2b20      	cmp	r3, #32
 8008660:	d01d      	beq.n	800869e <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	685a      	ldr	r2, [r3, #4]
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	2180      	movs	r1, #128	@ 0x80
 800866e:	01c9      	lsls	r1, r1, #7
 8008670:	430a      	orrs	r2, r1
 8008672:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008674:	f7ff f88e 	bl	8007794 <HAL_GetTick>
 8008678:	0003      	movs	r3, r0
 800867a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800867c:	e00f      	b.n	800869e <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800867e:	f7ff f889 	bl	8007794 <HAL_GetTick>
 8008682:	0002      	movs	r2, r0
 8008684:	69fb      	ldr	r3, [r7, #28]
 8008686:	1ad3      	subs	r3, r2, r3
 8008688:	2b19      	cmp	r3, #25
 800868a:	d908      	bls.n	800869e <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800868c:	6a3b      	ldr	r3, [r7, #32]
 800868e:	2220      	movs	r2, #32
 8008690:	4313      	orrs	r3, r2
 8008692:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008694:	2327      	movs	r3, #39	@ 0x27
 8008696:	18fb      	adds	r3, r7, r3
 8008698:	2201      	movs	r2, #1
 800869a:	701a      	strb	r2, [r3, #0]

              break;
 800869c:	e006      	b.n	80086ac <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	699b      	ldr	r3, [r3, #24]
 80086a4:	2220      	movs	r2, #32
 80086a6:	4013      	ands	r3, r2
 80086a8:	2b20      	cmp	r3, #32
 80086aa:	d1e8      	bne.n	800867e <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	699b      	ldr	r3, [r3, #24]
 80086b2:	2220      	movs	r2, #32
 80086b4:	4013      	ands	r3, r2
 80086b6:	2b20      	cmp	r3, #32
 80086b8:	d004      	beq.n	80086c4 <I2C_IsErrorOccurred+0x100>
 80086ba:	2327      	movs	r3, #39	@ 0x27
 80086bc:	18fb      	adds	r3, r7, r3
 80086be:	781b      	ldrb	r3, [r3, #0]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d09b      	beq.n	80085fc <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80086c4:	2327      	movs	r3, #39	@ 0x27
 80086c6:	18fb      	adds	r3, r7, r3
 80086c8:	781b      	ldrb	r3, [r3, #0]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d103      	bne.n	80086d6 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	2220      	movs	r2, #32
 80086d4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80086d6:	6a3b      	ldr	r3, [r7, #32]
 80086d8:	2204      	movs	r2, #4
 80086da:	4313      	orrs	r3, r2
 80086dc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80086de:	2327      	movs	r3, #39	@ 0x27
 80086e0:	18fb      	adds	r3, r7, r3
 80086e2:	2201      	movs	r2, #1
 80086e4:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	699b      	ldr	r3, [r3, #24]
 80086ec:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80086ee:	69ba      	ldr	r2, [r7, #24]
 80086f0:	2380      	movs	r3, #128	@ 0x80
 80086f2:	005b      	lsls	r3, r3, #1
 80086f4:	4013      	ands	r3, r2
 80086f6:	d00c      	beq.n	8008712 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80086f8:	6a3b      	ldr	r3, [r7, #32]
 80086fa:	2201      	movs	r2, #1
 80086fc:	4313      	orrs	r3, r2
 80086fe:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	2280      	movs	r2, #128	@ 0x80
 8008706:	0052      	lsls	r2, r2, #1
 8008708:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800870a:	2327      	movs	r3, #39	@ 0x27
 800870c:	18fb      	adds	r3, r7, r3
 800870e:	2201      	movs	r2, #1
 8008710:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008712:	69ba      	ldr	r2, [r7, #24]
 8008714:	2380      	movs	r3, #128	@ 0x80
 8008716:	00db      	lsls	r3, r3, #3
 8008718:	4013      	ands	r3, r2
 800871a:	d00c      	beq.n	8008736 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800871c:	6a3b      	ldr	r3, [r7, #32]
 800871e:	2208      	movs	r2, #8
 8008720:	4313      	orrs	r3, r2
 8008722:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	2280      	movs	r2, #128	@ 0x80
 800872a:	00d2      	lsls	r2, r2, #3
 800872c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800872e:	2327      	movs	r3, #39	@ 0x27
 8008730:	18fb      	adds	r3, r7, r3
 8008732:	2201      	movs	r2, #1
 8008734:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008736:	69ba      	ldr	r2, [r7, #24]
 8008738:	2380      	movs	r3, #128	@ 0x80
 800873a:	009b      	lsls	r3, r3, #2
 800873c:	4013      	ands	r3, r2
 800873e:	d00c      	beq.n	800875a <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008740:	6a3b      	ldr	r3, [r7, #32]
 8008742:	2202      	movs	r2, #2
 8008744:	4313      	orrs	r3, r2
 8008746:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	2280      	movs	r2, #128	@ 0x80
 800874e:	0092      	lsls	r2, r2, #2
 8008750:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008752:	2327      	movs	r3, #39	@ 0x27
 8008754:	18fb      	adds	r3, r7, r3
 8008756:	2201      	movs	r2, #1
 8008758:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800875a:	2327      	movs	r3, #39	@ 0x27
 800875c:	18fb      	adds	r3, r7, r3
 800875e:	781b      	ldrb	r3, [r3, #0]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d01d      	beq.n	80087a0 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	0018      	movs	r0, r3
 8008768:	f7ff fd8a 	bl	8008280 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	685a      	ldr	r2, [r3, #4]
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	490e      	ldr	r1, [pc, #56]	@ (80087b0 <I2C_IsErrorOccurred+0x1ec>)
 8008778:	400a      	ands	r2, r1
 800877a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008780:	6a3b      	ldr	r3, [r7, #32]
 8008782:	431a      	orrs	r2, r3
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	2241      	movs	r2, #65	@ 0x41
 800878c:	2120      	movs	r1, #32
 800878e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	2242      	movs	r2, #66	@ 0x42
 8008794:	2100      	movs	r1, #0
 8008796:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	2240      	movs	r2, #64	@ 0x40
 800879c:	2100      	movs	r1, #0
 800879e:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80087a0:	2327      	movs	r3, #39	@ 0x27
 80087a2:	18fb      	adds	r3, r7, r3
 80087a4:	781b      	ldrb	r3, [r3, #0]
}
 80087a6:	0018      	movs	r0, r3
 80087a8:	46bd      	mov	sp, r7
 80087aa:	b00a      	add	sp, #40	@ 0x28
 80087ac:	bd80      	pop	{r7, pc}
 80087ae:	46c0      	nop			@ (mov r8, r8)
 80087b0:	fe00e800 	.word	0xfe00e800

080087b4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80087b4:	b590      	push	{r4, r7, lr}
 80087b6:	b087      	sub	sp, #28
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	60f8      	str	r0, [r7, #12]
 80087bc:	0008      	movs	r0, r1
 80087be:	0011      	movs	r1, r2
 80087c0:	607b      	str	r3, [r7, #4]
 80087c2:	240a      	movs	r4, #10
 80087c4:	193b      	adds	r3, r7, r4
 80087c6:	1c02      	adds	r2, r0, #0
 80087c8:	801a      	strh	r2, [r3, #0]
 80087ca:	2009      	movs	r0, #9
 80087cc:	183b      	adds	r3, r7, r0
 80087ce:	1c0a      	adds	r2, r1, #0
 80087d0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80087d2:	193b      	adds	r3, r7, r4
 80087d4:	881b      	ldrh	r3, [r3, #0]
 80087d6:	059b      	lsls	r3, r3, #22
 80087d8:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80087da:	183b      	adds	r3, r7, r0
 80087dc:	781b      	ldrb	r3, [r3, #0]
 80087de:	0419      	lsls	r1, r3, #16
 80087e0:	23ff      	movs	r3, #255	@ 0xff
 80087e2:	041b      	lsls	r3, r3, #16
 80087e4:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80087e6:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80087ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087ee:	4313      	orrs	r3, r2
 80087f0:	005b      	lsls	r3, r3, #1
 80087f2:	085b      	lsrs	r3, r3, #1
 80087f4:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	685b      	ldr	r3, [r3, #4]
 80087fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80087fe:	0d51      	lsrs	r1, r2, #21
 8008800:	2280      	movs	r2, #128	@ 0x80
 8008802:	00d2      	lsls	r2, r2, #3
 8008804:	400a      	ands	r2, r1
 8008806:	4907      	ldr	r1, [pc, #28]	@ (8008824 <I2C_TransferConfig+0x70>)
 8008808:	430a      	orrs	r2, r1
 800880a:	43d2      	mvns	r2, r2
 800880c:	401a      	ands	r2, r3
 800880e:	0011      	movs	r1, r2
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	697a      	ldr	r2, [r7, #20]
 8008816:	430a      	orrs	r2, r1
 8008818:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800881a:	46c0      	nop			@ (mov r8, r8)
 800881c:	46bd      	mov	sp, r7
 800881e:	b007      	add	sp, #28
 8008820:	bd90      	pop	{r4, r7, pc}
 8008822:	46c0      	nop			@ (mov r8, r8)
 8008824:	03ff63ff 	.word	0x03ff63ff

08008828 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b082      	sub	sp, #8
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
 8008830:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2241      	movs	r2, #65	@ 0x41
 8008836:	5c9b      	ldrb	r3, [r3, r2]
 8008838:	b2db      	uxtb	r3, r3
 800883a:	2b20      	cmp	r3, #32
 800883c:	d138      	bne.n	80088b0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2240      	movs	r2, #64	@ 0x40
 8008842:	5c9b      	ldrb	r3, [r3, r2]
 8008844:	2b01      	cmp	r3, #1
 8008846:	d101      	bne.n	800884c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008848:	2302      	movs	r3, #2
 800884a:	e032      	b.n	80088b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2240      	movs	r2, #64	@ 0x40
 8008850:	2101      	movs	r1, #1
 8008852:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2241      	movs	r2, #65	@ 0x41
 8008858:	2124      	movs	r1, #36	@ 0x24
 800885a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	681a      	ldr	r2, [r3, #0]
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	2101      	movs	r1, #1
 8008868:	438a      	bics	r2, r1
 800886a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	681a      	ldr	r2, [r3, #0]
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	4911      	ldr	r1, [pc, #68]	@ (80088bc <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8008878:	400a      	ands	r2, r1
 800887a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	6819      	ldr	r1, [r3, #0]
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	683a      	ldr	r2, [r7, #0]
 8008888:	430a      	orrs	r2, r1
 800888a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	681a      	ldr	r2, [r3, #0]
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	2101      	movs	r1, #1
 8008898:	430a      	orrs	r2, r1
 800889a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2241      	movs	r2, #65	@ 0x41
 80088a0:	2120      	movs	r1, #32
 80088a2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2240      	movs	r2, #64	@ 0x40
 80088a8:	2100      	movs	r1, #0
 80088aa:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80088ac:	2300      	movs	r3, #0
 80088ae:	e000      	b.n	80088b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80088b0:	2302      	movs	r3, #2
  }
}
 80088b2:	0018      	movs	r0, r3
 80088b4:	46bd      	mov	sp, r7
 80088b6:	b002      	add	sp, #8
 80088b8:	bd80      	pop	{r7, pc}
 80088ba:	46c0      	nop			@ (mov r8, r8)
 80088bc:	ffffefff 	.word	0xffffefff

080088c0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b084      	sub	sp, #16
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
 80088c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2241      	movs	r2, #65	@ 0x41
 80088ce:	5c9b      	ldrb	r3, [r3, r2]
 80088d0:	b2db      	uxtb	r3, r3
 80088d2:	2b20      	cmp	r3, #32
 80088d4:	d139      	bne.n	800894a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2240      	movs	r2, #64	@ 0x40
 80088da:	5c9b      	ldrb	r3, [r3, r2]
 80088dc:	2b01      	cmp	r3, #1
 80088de:	d101      	bne.n	80088e4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80088e0:	2302      	movs	r3, #2
 80088e2:	e033      	b.n	800894c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2240      	movs	r2, #64	@ 0x40
 80088e8:	2101      	movs	r1, #1
 80088ea:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2241      	movs	r2, #65	@ 0x41
 80088f0:	2124      	movs	r1, #36	@ 0x24
 80088f2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	681a      	ldr	r2, [r3, #0]
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	2101      	movs	r1, #1
 8008900:	438a      	bics	r2, r1
 8008902:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	4a11      	ldr	r2, [pc, #68]	@ (8008954 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8008910:	4013      	ands	r3, r2
 8008912:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	021b      	lsls	r3, r3, #8
 8008918:	68fa      	ldr	r2, [r7, #12]
 800891a:	4313      	orrs	r3, r2
 800891c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	68fa      	ldr	r2, [r7, #12]
 8008924:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	681a      	ldr	r2, [r3, #0]
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	2101      	movs	r1, #1
 8008932:	430a      	orrs	r2, r1
 8008934:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2241      	movs	r2, #65	@ 0x41
 800893a:	2120      	movs	r1, #32
 800893c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2240      	movs	r2, #64	@ 0x40
 8008942:	2100      	movs	r1, #0
 8008944:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8008946:	2300      	movs	r3, #0
 8008948:	e000      	b.n	800894c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800894a:	2302      	movs	r3, #2
  }
}
 800894c:	0018      	movs	r0, r3
 800894e:	46bd      	mov	sp, r7
 8008950:	b004      	add	sp, #16
 8008952:	bd80      	pop	{r7, pc}
 8008954:	fffff0ff 	.word	0xfffff0ff

08008958 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b084      	sub	sp, #16
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8008960:	4b19      	ldr	r3, [pc, #100]	@ (80089c8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	4a19      	ldr	r2, [pc, #100]	@ (80089cc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8008966:	4013      	ands	r3, r2
 8008968:	0019      	movs	r1, r3
 800896a:	4b17      	ldr	r3, [pc, #92]	@ (80089c8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800896c:	687a      	ldr	r2, [r7, #4]
 800896e:	430a      	orrs	r2, r1
 8008970:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008972:	687a      	ldr	r2, [r7, #4]
 8008974:	2380      	movs	r3, #128	@ 0x80
 8008976:	009b      	lsls	r3, r3, #2
 8008978:	429a      	cmp	r2, r3
 800897a:	d11f      	bne.n	80089bc <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800897c:	4b14      	ldr	r3, [pc, #80]	@ (80089d0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800897e:	681a      	ldr	r2, [r3, #0]
 8008980:	0013      	movs	r3, r2
 8008982:	005b      	lsls	r3, r3, #1
 8008984:	189b      	adds	r3, r3, r2
 8008986:	005b      	lsls	r3, r3, #1
 8008988:	4912      	ldr	r1, [pc, #72]	@ (80089d4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800898a:	0018      	movs	r0, r3
 800898c:	f7f7 fbe0 	bl	8000150 <__udivsi3>
 8008990:	0003      	movs	r3, r0
 8008992:	3301      	adds	r3, #1
 8008994:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008996:	e008      	b.n	80089aa <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d003      	beq.n	80089a6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	3b01      	subs	r3, #1
 80089a2:	60fb      	str	r3, [r7, #12]
 80089a4:	e001      	b.n	80089aa <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80089a6:	2303      	movs	r3, #3
 80089a8:	e009      	b.n	80089be <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80089aa:	4b07      	ldr	r3, [pc, #28]	@ (80089c8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80089ac:	695a      	ldr	r2, [r3, #20]
 80089ae:	2380      	movs	r3, #128	@ 0x80
 80089b0:	00db      	lsls	r3, r3, #3
 80089b2:	401a      	ands	r2, r3
 80089b4:	2380      	movs	r3, #128	@ 0x80
 80089b6:	00db      	lsls	r3, r3, #3
 80089b8:	429a      	cmp	r2, r3
 80089ba:	d0ed      	beq.n	8008998 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80089bc:	2300      	movs	r3, #0
}
 80089be:	0018      	movs	r0, r3
 80089c0:	46bd      	mov	sp, r7
 80089c2:	b004      	add	sp, #16
 80089c4:	bd80      	pop	{r7, pc}
 80089c6:	46c0      	nop			@ (mov r8, r8)
 80089c8:	40007000 	.word	0x40007000
 80089cc:	fffff9ff 	.word	0xfffff9ff
 80089d0:	200009c8 	.word	0x200009c8
 80089d4:	000f4240 	.word	0x000f4240

080089d8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80089dc:	4b03      	ldr	r3, [pc, #12]	@ (80089ec <LL_RCC_GetAPB1Prescaler+0x14>)
 80089de:	689a      	ldr	r2, [r3, #8]
 80089e0:	23e0      	movs	r3, #224	@ 0xe0
 80089e2:	01db      	lsls	r3, r3, #7
 80089e4:	4013      	ands	r3, r2
}
 80089e6:	0018      	movs	r0, r3
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}
 80089ec:	40021000 	.word	0x40021000

080089f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b088      	sub	sp, #32
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d102      	bne.n	8008a04 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80089fe:	2301      	movs	r3, #1
 8008a00:	f000 fb50 	bl	80090a4 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	2201      	movs	r2, #1
 8008a0a:	4013      	ands	r3, r2
 8008a0c:	d100      	bne.n	8008a10 <HAL_RCC_OscConfig+0x20>
 8008a0e:	e07c      	b.n	8008b0a <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008a10:	4bc3      	ldr	r3, [pc, #780]	@ (8008d20 <HAL_RCC_OscConfig+0x330>)
 8008a12:	689b      	ldr	r3, [r3, #8]
 8008a14:	2238      	movs	r2, #56	@ 0x38
 8008a16:	4013      	ands	r3, r2
 8008a18:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008a1a:	4bc1      	ldr	r3, [pc, #772]	@ (8008d20 <HAL_RCC_OscConfig+0x330>)
 8008a1c:	68db      	ldr	r3, [r3, #12]
 8008a1e:	2203      	movs	r2, #3
 8008a20:	4013      	ands	r3, r2
 8008a22:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8008a24:	69bb      	ldr	r3, [r7, #24]
 8008a26:	2b10      	cmp	r3, #16
 8008a28:	d102      	bne.n	8008a30 <HAL_RCC_OscConfig+0x40>
 8008a2a:	697b      	ldr	r3, [r7, #20]
 8008a2c:	2b03      	cmp	r3, #3
 8008a2e:	d002      	beq.n	8008a36 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8008a30:	69bb      	ldr	r3, [r7, #24]
 8008a32:	2b08      	cmp	r3, #8
 8008a34:	d10b      	bne.n	8008a4e <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008a36:	4bba      	ldr	r3, [pc, #744]	@ (8008d20 <HAL_RCC_OscConfig+0x330>)
 8008a38:	681a      	ldr	r2, [r3, #0]
 8008a3a:	2380      	movs	r3, #128	@ 0x80
 8008a3c:	029b      	lsls	r3, r3, #10
 8008a3e:	4013      	ands	r3, r2
 8008a40:	d062      	beq.n	8008b08 <HAL_RCC_OscConfig+0x118>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	685b      	ldr	r3, [r3, #4]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d15e      	bne.n	8008b08 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	e32a      	b.n	80090a4 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	685a      	ldr	r2, [r3, #4]
 8008a52:	2380      	movs	r3, #128	@ 0x80
 8008a54:	025b      	lsls	r3, r3, #9
 8008a56:	429a      	cmp	r2, r3
 8008a58:	d107      	bne.n	8008a6a <HAL_RCC_OscConfig+0x7a>
 8008a5a:	4bb1      	ldr	r3, [pc, #708]	@ (8008d20 <HAL_RCC_OscConfig+0x330>)
 8008a5c:	681a      	ldr	r2, [r3, #0]
 8008a5e:	4bb0      	ldr	r3, [pc, #704]	@ (8008d20 <HAL_RCC_OscConfig+0x330>)
 8008a60:	2180      	movs	r1, #128	@ 0x80
 8008a62:	0249      	lsls	r1, r1, #9
 8008a64:	430a      	orrs	r2, r1
 8008a66:	601a      	str	r2, [r3, #0]
 8008a68:	e020      	b.n	8008aac <HAL_RCC_OscConfig+0xbc>
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	685a      	ldr	r2, [r3, #4]
 8008a6e:	23a0      	movs	r3, #160	@ 0xa0
 8008a70:	02db      	lsls	r3, r3, #11
 8008a72:	429a      	cmp	r2, r3
 8008a74:	d10e      	bne.n	8008a94 <HAL_RCC_OscConfig+0xa4>
 8008a76:	4baa      	ldr	r3, [pc, #680]	@ (8008d20 <HAL_RCC_OscConfig+0x330>)
 8008a78:	681a      	ldr	r2, [r3, #0]
 8008a7a:	4ba9      	ldr	r3, [pc, #676]	@ (8008d20 <HAL_RCC_OscConfig+0x330>)
 8008a7c:	2180      	movs	r1, #128	@ 0x80
 8008a7e:	02c9      	lsls	r1, r1, #11
 8008a80:	430a      	orrs	r2, r1
 8008a82:	601a      	str	r2, [r3, #0]
 8008a84:	4ba6      	ldr	r3, [pc, #664]	@ (8008d20 <HAL_RCC_OscConfig+0x330>)
 8008a86:	681a      	ldr	r2, [r3, #0]
 8008a88:	4ba5      	ldr	r3, [pc, #660]	@ (8008d20 <HAL_RCC_OscConfig+0x330>)
 8008a8a:	2180      	movs	r1, #128	@ 0x80
 8008a8c:	0249      	lsls	r1, r1, #9
 8008a8e:	430a      	orrs	r2, r1
 8008a90:	601a      	str	r2, [r3, #0]
 8008a92:	e00b      	b.n	8008aac <HAL_RCC_OscConfig+0xbc>
 8008a94:	4ba2      	ldr	r3, [pc, #648]	@ (8008d20 <HAL_RCC_OscConfig+0x330>)
 8008a96:	681a      	ldr	r2, [r3, #0]
 8008a98:	4ba1      	ldr	r3, [pc, #644]	@ (8008d20 <HAL_RCC_OscConfig+0x330>)
 8008a9a:	49a2      	ldr	r1, [pc, #648]	@ (8008d24 <HAL_RCC_OscConfig+0x334>)
 8008a9c:	400a      	ands	r2, r1
 8008a9e:	601a      	str	r2, [r3, #0]
 8008aa0:	4b9f      	ldr	r3, [pc, #636]	@ (8008d20 <HAL_RCC_OscConfig+0x330>)
 8008aa2:	681a      	ldr	r2, [r3, #0]
 8008aa4:	4b9e      	ldr	r3, [pc, #632]	@ (8008d20 <HAL_RCC_OscConfig+0x330>)
 8008aa6:	49a0      	ldr	r1, [pc, #640]	@ (8008d28 <HAL_RCC_OscConfig+0x338>)
 8008aa8:	400a      	ands	r2, r1
 8008aaa:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	685b      	ldr	r3, [r3, #4]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d014      	beq.n	8008ade <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ab4:	f7fe fe6e 	bl	8007794 <HAL_GetTick>
 8008ab8:	0003      	movs	r3, r0
 8008aba:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008abc:	e008      	b.n	8008ad0 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008abe:	f7fe fe69 	bl	8007794 <HAL_GetTick>
 8008ac2:	0002      	movs	r2, r0
 8008ac4:	693b      	ldr	r3, [r7, #16]
 8008ac6:	1ad3      	subs	r3, r2, r3
 8008ac8:	2b64      	cmp	r3, #100	@ 0x64
 8008aca:	d901      	bls.n	8008ad0 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8008acc:	2303      	movs	r3, #3
 8008ace:	e2e9      	b.n	80090a4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008ad0:	4b93      	ldr	r3, [pc, #588]	@ (8008d20 <HAL_RCC_OscConfig+0x330>)
 8008ad2:	681a      	ldr	r2, [r3, #0]
 8008ad4:	2380      	movs	r3, #128	@ 0x80
 8008ad6:	029b      	lsls	r3, r3, #10
 8008ad8:	4013      	ands	r3, r2
 8008ada:	d0f0      	beq.n	8008abe <HAL_RCC_OscConfig+0xce>
 8008adc:	e015      	b.n	8008b0a <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ade:	f7fe fe59 	bl	8007794 <HAL_GetTick>
 8008ae2:	0003      	movs	r3, r0
 8008ae4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008ae6:	e008      	b.n	8008afa <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008ae8:	f7fe fe54 	bl	8007794 <HAL_GetTick>
 8008aec:	0002      	movs	r2, r0
 8008aee:	693b      	ldr	r3, [r7, #16]
 8008af0:	1ad3      	subs	r3, r2, r3
 8008af2:	2b64      	cmp	r3, #100	@ 0x64
 8008af4:	d901      	bls.n	8008afa <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8008af6:	2303      	movs	r3, #3
 8008af8:	e2d4      	b.n	80090a4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008afa:	4b89      	ldr	r3, [pc, #548]	@ (8008d20 <HAL_RCC_OscConfig+0x330>)
 8008afc:	681a      	ldr	r2, [r3, #0]
 8008afe:	2380      	movs	r3, #128	@ 0x80
 8008b00:	029b      	lsls	r3, r3, #10
 8008b02:	4013      	ands	r3, r2
 8008b04:	d1f0      	bne.n	8008ae8 <HAL_RCC_OscConfig+0xf8>
 8008b06:	e000      	b.n	8008b0a <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008b08:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	2202      	movs	r2, #2
 8008b10:	4013      	ands	r3, r2
 8008b12:	d100      	bne.n	8008b16 <HAL_RCC_OscConfig+0x126>
 8008b14:	e099      	b.n	8008c4a <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008b16:	4b82      	ldr	r3, [pc, #520]	@ (8008d20 <HAL_RCC_OscConfig+0x330>)
 8008b18:	689b      	ldr	r3, [r3, #8]
 8008b1a:	2238      	movs	r2, #56	@ 0x38
 8008b1c:	4013      	ands	r3, r2
 8008b1e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008b20:	4b7f      	ldr	r3, [pc, #508]	@ (8008d20 <HAL_RCC_OscConfig+0x330>)
 8008b22:	68db      	ldr	r3, [r3, #12]
 8008b24:	2203      	movs	r2, #3
 8008b26:	4013      	ands	r3, r2
 8008b28:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8008b2a:	69bb      	ldr	r3, [r7, #24]
 8008b2c:	2b10      	cmp	r3, #16
 8008b2e:	d102      	bne.n	8008b36 <HAL_RCC_OscConfig+0x146>
 8008b30:	697b      	ldr	r3, [r7, #20]
 8008b32:	2b02      	cmp	r3, #2
 8008b34:	d002      	beq.n	8008b3c <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8008b36:	69bb      	ldr	r3, [r7, #24]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d135      	bne.n	8008ba8 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008b3c:	4b78      	ldr	r3, [pc, #480]	@ (8008d20 <HAL_RCC_OscConfig+0x330>)
 8008b3e:	681a      	ldr	r2, [r3, #0]
 8008b40:	2380      	movs	r3, #128	@ 0x80
 8008b42:	00db      	lsls	r3, r3, #3
 8008b44:	4013      	ands	r3, r2
 8008b46:	d005      	beq.n	8008b54 <HAL_RCC_OscConfig+0x164>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	68db      	ldr	r3, [r3, #12]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d101      	bne.n	8008b54 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8008b50:	2301      	movs	r3, #1
 8008b52:	e2a7      	b.n	80090a4 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008b54:	4b72      	ldr	r3, [pc, #456]	@ (8008d20 <HAL_RCC_OscConfig+0x330>)
 8008b56:	685b      	ldr	r3, [r3, #4]
 8008b58:	4a74      	ldr	r2, [pc, #464]	@ (8008d2c <HAL_RCC_OscConfig+0x33c>)
 8008b5a:	4013      	ands	r3, r2
 8008b5c:	0019      	movs	r1, r3
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	695b      	ldr	r3, [r3, #20]
 8008b62:	021a      	lsls	r2, r3, #8
 8008b64:	4b6e      	ldr	r3, [pc, #440]	@ (8008d20 <HAL_RCC_OscConfig+0x330>)
 8008b66:	430a      	orrs	r2, r1
 8008b68:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008b6a:	69bb      	ldr	r3, [r7, #24]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d112      	bne.n	8008b96 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8008b70:	4b6b      	ldr	r3, [pc, #428]	@ (8008d20 <HAL_RCC_OscConfig+0x330>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	4a6e      	ldr	r2, [pc, #440]	@ (8008d30 <HAL_RCC_OscConfig+0x340>)
 8008b76:	4013      	ands	r3, r2
 8008b78:	0019      	movs	r1, r3
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	691a      	ldr	r2, [r3, #16]
 8008b7e:	4b68      	ldr	r3, [pc, #416]	@ (8008d20 <HAL_RCC_OscConfig+0x330>)
 8008b80:	430a      	orrs	r2, r1
 8008b82:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8008b84:	4b66      	ldr	r3, [pc, #408]	@ (8008d20 <HAL_RCC_OscConfig+0x330>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	0adb      	lsrs	r3, r3, #11
 8008b8a:	2207      	movs	r2, #7
 8008b8c:	4013      	ands	r3, r2
 8008b8e:	4a69      	ldr	r2, [pc, #420]	@ (8008d34 <HAL_RCC_OscConfig+0x344>)
 8008b90:	40da      	lsrs	r2, r3
 8008b92:	4b69      	ldr	r3, [pc, #420]	@ (8008d38 <HAL_RCC_OscConfig+0x348>)
 8008b94:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008b96:	4b69      	ldr	r3, [pc, #420]	@ (8008d3c <HAL_RCC_OscConfig+0x34c>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	0018      	movs	r0, r3
 8008b9c:	f7fe fd9e 	bl	80076dc <HAL_InitTick>
 8008ba0:	1e03      	subs	r3, r0, #0
 8008ba2:	d051      	beq.n	8008c48 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	e27d      	b.n	80090a4 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	68db      	ldr	r3, [r3, #12]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d030      	beq.n	8008c12 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8008bb0:	4b5b      	ldr	r3, [pc, #364]	@ (8008d20 <HAL_RCC_OscConfig+0x330>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	4a5e      	ldr	r2, [pc, #376]	@ (8008d30 <HAL_RCC_OscConfig+0x340>)
 8008bb6:	4013      	ands	r3, r2
 8008bb8:	0019      	movs	r1, r3
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	691a      	ldr	r2, [r3, #16]
 8008bbe:	4b58      	ldr	r3, [pc, #352]	@ (8008d20 <HAL_RCC_OscConfig+0x330>)
 8008bc0:	430a      	orrs	r2, r1
 8008bc2:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8008bc4:	4b56      	ldr	r3, [pc, #344]	@ (8008d20 <HAL_RCC_OscConfig+0x330>)
 8008bc6:	681a      	ldr	r2, [r3, #0]
 8008bc8:	4b55      	ldr	r3, [pc, #340]	@ (8008d20 <HAL_RCC_OscConfig+0x330>)
 8008bca:	2180      	movs	r1, #128	@ 0x80
 8008bcc:	0049      	lsls	r1, r1, #1
 8008bce:	430a      	orrs	r2, r1
 8008bd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bd2:	f7fe fddf 	bl	8007794 <HAL_GetTick>
 8008bd6:	0003      	movs	r3, r0
 8008bd8:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008bda:	e008      	b.n	8008bee <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008bdc:	f7fe fdda 	bl	8007794 <HAL_GetTick>
 8008be0:	0002      	movs	r2, r0
 8008be2:	693b      	ldr	r3, [r7, #16]
 8008be4:	1ad3      	subs	r3, r2, r3
 8008be6:	2b02      	cmp	r3, #2
 8008be8:	d901      	bls.n	8008bee <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8008bea:	2303      	movs	r3, #3
 8008bec:	e25a      	b.n	80090a4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008bee:	4b4c      	ldr	r3, [pc, #304]	@ (8008d20 <HAL_RCC_OscConfig+0x330>)
 8008bf0:	681a      	ldr	r2, [r3, #0]
 8008bf2:	2380      	movs	r3, #128	@ 0x80
 8008bf4:	00db      	lsls	r3, r3, #3
 8008bf6:	4013      	ands	r3, r2
 8008bf8:	d0f0      	beq.n	8008bdc <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008bfa:	4b49      	ldr	r3, [pc, #292]	@ (8008d20 <HAL_RCC_OscConfig+0x330>)
 8008bfc:	685b      	ldr	r3, [r3, #4]
 8008bfe:	4a4b      	ldr	r2, [pc, #300]	@ (8008d2c <HAL_RCC_OscConfig+0x33c>)
 8008c00:	4013      	ands	r3, r2
 8008c02:	0019      	movs	r1, r3
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	695b      	ldr	r3, [r3, #20]
 8008c08:	021a      	lsls	r2, r3, #8
 8008c0a:	4b45      	ldr	r3, [pc, #276]	@ (8008d20 <HAL_RCC_OscConfig+0x330>)
 8008c0c:	430a      	orrs	r2, r1
 8008c0e:	605a      	str	r2, [r3, #4]
 8008c10:	e01b      	b.n	8008c4a <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8008c12:	4b43      	ldr	r3, [pc, #268]	@ (8008d20 <HAL_RCC_OscConfig+0x330>)
 8008c14:	681a      	ldr	r2, [r3, #0]
 8008c16:	4b42      	ldr	r3, [pc, #264]	@ (8008d20 <HAL_RCC_OscConfig+0x330>)
 8008c18:	4949      	ldr	r1, [pc, #292]	@ (8008d40 <HAL_RCC_OscConfig+0x350>)
 8008c1a:	400a      	ands	r2, r1
 8008c1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c1e:	f7fe fdb9 	bl	8007794 <HAL_GetTick>
 8008c22:	0003      	movs	r3, r0
 8008c24:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008c26:	e008      	b.n	8008c3a <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008c28:	f7fe fdb4 	bl	8007794 <HAL_GetTick>
 8008c2c:	0002      	movs	r2, r0
 8008c2e:	693b      	ldr	r3, [r7, #16]
 8008c30:	1ad3      	subs	r3, r2, r3
 8008c32:	2b02      	cmp	r3, #2
 8008c34:	d901      	bls.n	8008c3a <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8008c36:	2303      	movs	r3, #3
 8008c38:	e234      	b.n	80090a4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008c3a:	4b39      	ldr	r3, [pc, #228]	@ (8008d20 <HAL_RCC_OscConfig+0x330>)
 8008c3c:	681a      	ldr	r2, [r3, #0]
 8008c3e:	2380      	movs	r3, #128	@ 0x80
 8008c40:	00db      	lsls	r3, r3, #3
 8008c42:	4013      	ands	r3, r2
 8008c44:	d1f0      	bne.n	8008c28 <HAL_RCC_OscConfig+0x238>
 8008c46:	e000      	b.n	8008c4a <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008c48:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	2208      	movs	r2, #8
 8008c50:	4013      	ands	r3, r2
 8008c52:	d047      	beq.n	8008ce4 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8008c54:	4b32      	ldr	r3, [pc, #200]	@ (8008d20 <HAL_RCC_OscConfig+0x330>)
 8008c56:	689b      	ldr	r3, [r3, #8]
 8008c58:	2238      	movs	r2, #56	@ 0x38
 8008c5a:	4013      	ands	r3, r2
 8008c5c:	2b18      	cmp	r3, #24
 8008c5e:	d10a      	bne.n	8008c76 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8008c60:	4b2f      	ldr	r3, [pc, #188]	@ (8008d20 <HAL_RCC_OscConfig+0x330>)
 8008c62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008c64:	2202      	movs	r2, #2
 8008c66:	4013      	ands	r3, r2
 8008c68:	d03c      	beq.n	8008ce4 <HAL_RCC_OscConfig+0x2f4>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	699b      	ldr	r3, [r3, #24]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d138      	bne.n	8008ce4 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8008c72:	2301      	movs	r3, #1
 8008c74:	e216      	b.n	80090a4 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	699b      	ldr	r3, [r3, #24]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d019      	beq.n	8008cb2 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8008c7e:	4b28      	ldr	r3, [pc, #160]	@ (8008d20 <HAL_RCC_OscConfig+0x330>)
 8008c80:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008c82:	4b27      	ldr	r3, [pc, #156]	@ (8008d20 <HAL_RCC_OscConfig+0x330>)
 8008c84:	2101      	movs	r1, #1
 8008c86:	430a      	orrs	r2, r1
 8008c88:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c8a:	f7fe fd83 	bl	8007794 <HAL_GetTick>
 8008c8e:	0003      	movs	r3, r0
 8008c90:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008c92:	e008      	b.n	8008ca6 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008c94:	f7fe fd7e 	bl	8007794 <HAL_GetTick>
 8008c98:	0002      	movs	r2, r0
 8008c9a:	693b      	ldr	r3, [r7, #16]
 8008c9c:	1ad3      	subs	r3, r2, r3
 8008c9e:	2b02      	cmp	r3, #2
 8008ca0:	d901      	bls.n	8008ca6 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8008ca2:	2303      	movs	r3, #3
 8008ca4:	e1fe      	b.n	80090a4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008ca6:	4b1e      	ldr	r3, [pc, #120]	@ (8008d20 <HAL_RCC_OscConfig+0x330>)
 8008ca8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008caa:	2202      	movs	r2, #2
 8008cac:	4013      	ands	r3, r2
 8008cae:	d0f1      	beq.n	8008c94 <HAL_RCC_OscConfig+0x2a4>
 8008cb0:	e018      	b.n	8008ce4 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8008cb2:	4b1b      	ldr	r3, [pc, #108]	@ (8008d20 <HAL_RCC_OscConfig+0x330>)
 8008cb4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008cb6:	4b1a      	ldr	r3, [pc, #104]	@ (8008d20 <HAL_RCC_OscConfig+0x330>)
 8008cb8:	2101      	movs	r1, #1
 8008cba:	438a      	bics	r2, r1
 8008cbc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cbe:	f7fe fd69 	bl	8007794 <HAL_GetTick>
 8008cc2:	0003      	movs	r3, r0
 8008cc4:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008cc6:	e008      	b.n	8008cda <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008cc8:	f7fe fd64 	bl	8007794 <HAL_GetTick>
 8008ccc:	0002      	movs	r2, r0
 8008cce:	693b      	ldr	r3, [r7, #16]
 8008cd0:	1ad3      	subs	r3, r2, r3
 8008cd2:	2b02      	cmp	r3, #2
 8008cd4:	d901      	bls.n	8008cda <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8008cd6:	2303      	movs	r3, #3
 8008cd8:	e1e4      	b.n	80090a4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008cda:	4b11      	ldr	r3, [pc, #68]	@ (8008d20 <HAL_RCC_OscConfig+0x330>)
 8008cdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008cde:	2202      	movs	r2, #2
 8008ce0:	4013      	ands	r3, r2
 8008ce2:	d1f1      	bne.n	8008cc8 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	2204      	movs	r2, #4
 8008cea:	4013      	ands	r3, r2
 8008cec:	d100      	bne.n	8008cf0 <HAL_RCC_OscConfig+0x300>
 8008cee:	e0c7      	b.n	8008e80 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008cf0:	231f      	movs	r3, #31
 8008cf2:	18fb      	adds	r3, r7, r3
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8008cf8:	4b09      	ldr	r3, [pc, #36]	@ (8008d20 <HAL_RCC_OscConfig+0x330>)
 8008cfa:	689b      	ldr	r3, [r3, #8]
 8008cfc:	2238      	movs	r2, #56	@ 0x38
 8008cfe:	4013      	ands	r3, r2
 8008d00:	2b20      	cmp	r3, #32
 8008d02:	d11f      	bne.n	8008d44 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8008d04:	4b06      	ldr	r3, [pc, #24]	@ (8008d20 <HAL_RCC_OscConfig+0x330>)
 8008d06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008d08:	2202      	movs	r2, #2
 8008d0a:	4013      	ands	r3, r2
 8008d0c:	d100      	bne.n	8008d10 <HAL_RCC_OscConfig+0x320>
 8008d0e:	e0b7      	b.n	8008e80 <HAL_RCC_OscConfig+0x490>
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	689b      	ldr	r3, [r3, #8]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d000      	beq.n	8008d1a <HAL_RCC_OscConfig+0x32a>
 8008d18:	e0b2      	b.n	8008e80 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	e1c2      	b.n	80090a4 <HAL_RCC_OscConfig+0x6b4>
 8008d1e:	46c0      	nop			@ (mov r8, r8)
 8008d20:	40021000 	.word	0x40021000
 8008d24:	fffeffff 	.word	0xfffeffff
 8008d28:	fffbffff 	.word	0xfffbffff
 8008d2c:	ffff80ff 	.word	0xffff80ff
 8008d30:	ffffc7ff 	.word	0xffffc7ff
 8008d34:	00f42400 	.word	0x00f42400
 8008d38:	200009c8 	.word	0x200009c8
 8008d3c:	200009cc 	.word	0x200009cc
 8008d40:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008d44:	4bb5      	ldr	r3, [pc, #724]	@ (800901c <HAL_RCC_OscConfig+0x62c>)
 8008d46:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008d48:	2380      	movs	r3, #128	@ 0x80
 8008d4a:	055b      	lsls	r3, r3, #21
 8008d4c:	4013      	ands	r3, r2
 8008d4e:	d101      	bne.n	8008d54 <HAL_RCC_OscConfig+0x364>
 8008d50:	2301      	movs	r3, #1
 8008d52:	e000      	b.n	8008d56 <HAL_RCC_OscConfig+0x366>
 8008d54:	2300      	movs	r3, #0
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d011      	beq.n	8008d7e <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8008d5a:	4bb0      	ldr	r3, [pc, #704]	@ (800901c <HAL_RCC_OscConfig+0x62c>)
 8008d5c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008d5e:	4baf      	ldr	r3, [pc, #700]	@ (800901c <HAL_RCC_OscConfig+0x62c>)
 8008d60:	2180      	movs	r1, #128	@ 0x80
 8008d62:	0549      	lsls	r1, r1, #21
 8008d64:	430a      	orrs	r2, r1
 8008d66:	63da      	str	r2, [r3, #60]	@ 0x3c
 8008d68:	4bac      	ldr	r3, [pc, #688]	@ (800901c <HAL_RCC_OscConfig+0x62c>)
 8008d6a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008d6c:	2380      	movs	r3, #128	@ 0x80
 8008d6e:	055b      	lsls	r3, r3, #21
 8008d70:	4013      	ands	r3, r2
 8008d72:	60fb      	str	r3, [r7, #12]
 8008d74:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8008d76:	231f      	movs	r3, #31
 8008d78:	18fb      	adds	r3, r7, r3
 8008d7a:	2201      	movs	r2, #1
 8008d7c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008d7e:	4ba8      	ldr	r3, [pc, #672]	@ (8009020 <HAL_RCC_OscConfig+0x630>)
 8008d80:	681a      	ldr	r2, [r3, #0]
 8008d82:	2380      	movs	r3, #128	@ 0x80
 8008d84:	005b      	lsls	r3, r3, #1
 8008d86:	4013      	ands	r3, r2
 8008d88:	d11a      	bne.n	8008dc0 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008d8a:	4ba5      	ldr	r3, [pc, #660]	@ (8009020 <HAL_RCC_OscConfig+0x630>)
 8008d8c:	681a      	ldr	r2, [r3, #0]
 8008d8e:	4ba4      	ldr	r3, [pc, #656]	@ (8009020 <HAL_RCC_OscConfig+0x630>)
 8008d90:	2180      	movs	r1, #128	@ 0x80
 8008d92:	0049      	lsls	r1, r1, #1
 8008d94:	430a      	orrs	r2, r1
 8008d96:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8008d98:	f7fe fcfc 	bl	8007794 <HAL_GetTick>
 8008d9c:	0003      	movs	r3, r0
 8008d9e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008da0:	e008      	b.n	8008db4 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008da2:	f7fe fcf7 	bl	8007794 <HAL_GetTick>
 8008da6:	0002      	movs	r2, r0
 8008da8:	693b      	ldr	r3, [r7, #16]
 8008daa:	1ad3      	subs	r3, r2, r3
 8008dac:	2b02      	cmp	r3, #2
 8008dae:	d901      	bls.n	8008db4 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8008db0:	2303      	movs	r3, #3
 8008db2:	e177      	b.n	80090a4 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008db4:	4b9a      	ldr	r3, [pc, #616]	@ (8009020 <HAL_RCC_OscConfig+0x630>)
 8008db6:	681a      	ldr	r2, [r3, #0]
 8008db8:	2380      	movs	r3, #128	@ 0x80
 8008dba:	005b      	lsls	r3, r3, #1
 8008dbc:	4013      	ands	r3, r2
 8008dbe:	d0f0      	beq.n	8008da2 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	689b      	ldr	r3, [r3, #8]
 8008dc4:	2b01      	cmp	r3, #1
 8008dc6:	d106      	bne.n	8008dd6 <HAL_RCC_OscConfig+0x3e6>
 8008dc8:	4b94      	ldr	r3, [pc, #592]	@ (800901c <HAL_RCC_OscConfig+0x62c>)
 8008dca:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008dcc:	4b93      	ldr	r3, [pc, #588]	@ (800901c <HAL_RCC_OscConfig+0x62c>)
 8008dce:	2101      	movs	r1, #1
 8008dd0:	430a      	orrs	r2, r1
 8008dd2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008dd4:	e01c      	b.n	8008e10 <HAL_RCC_OscConfig+0x420>
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	689b      	ldr	r3, [r3, #8]
 8008dda:	2b05      	cmp	r3, #5
 8008ddc:	d10c      	bne.n	8008df8 <HAL_RCC_OscConfig+0x408>
 8008dde:	4b8f      	ldr	r3, [pc, #572]	@ (800901c <HAL_RCC_OscConfig+0x62c>)
 8008de0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008de2:	4b8e      	ldr	r3, [pc, #568]	@ (800901c <HAL_RCC_OscConfig+0x62c>)
 8008de4:	2104      	movs	r1, #4
 8008de6:	430a      	orrs	r2, r1
 8008de8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008dea:	4b8c      	ldr	r3, [pc, #560]	@ (800901c <HAL_RCC_OscConfig+0x62c>)
 8008dec:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008dee:	4b8b      	ldr	r3, [pc, #556]	@ (800901c <HAL_RCC_OscConfig+0x62c>)
 8008df0:	2101      	movs	r1, #1
 8008df2:	430a      	orrs	r2, r1
 8008df4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008df6:	e00b      	b.n	8008e10 <HAL_RCC_OscConfig+0x420>
 8008df8:	4b88      	ldr	r3, [pc, #544]	@ (800901c <HAL_RCC_OscConfig+0x62c>)
 8008dfa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008dfc:	4b87      	ldr	r3, [pc, #540]	@ (800901c <HAL_RCC_OscConfig+0x62c>)
 8008dfe:	2101      	movs	r1, #1
 8008e00:	438a      	bics	r2, r1
 8008e02:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008e04:	4b85      	ldr	r3, [pc, #532]	@ (800901c <HAL_RCC_OscConfig+0x62c>)
 8008e06:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008e08:	4b84      	ldr	r3, [pc, #528]	@ (800901c <HAL_RCC_OscConfig+0x62c>)
 8008e0a:	2104      	movs	r1, #4
 8008e0c:	438a      	bics	r2, r1
 8008e0e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	689b      	ldr	r3, [r3, #8]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d014      	beq.n	8008e42 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e18:	f7fe fcbc 	bl	8007794 <HAL_GetTick>
 8008e1c:	0003      	movs	r3, r0
 8008e1e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008e20:	e009      	b.n	8008e36 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e22:	f7fe fcb7 	bl	8007794 <HAL_GetTick>
 8008e26:	0002      	movs	r2, r0
 8008e28:	693b      	ldr	r3, [r7, #16]
 8008e2a:	1ad3      	subs	r3, r2, r3
 8008e2c:	4a7d      	ldr	r2, [pc, #500]	@ (8009024 <HAL_RCC_OscConfig+0x634>)
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d901      	bls.n	8008e36 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8008e32:	2303      	movs	r3, #3
 8008e34:	e136      	b.n	80090a4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008e36:	4b79      	ldr	r3, [pc, #484]	@ (800901c <HAL_RCC_OscConfig+0x62c>)
 8008e38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008e3a:	2202      	movs	r2, #2
 8008e3c:	4013      	ands	r3, r2
 8008e3e:	d0f0      	beq.n	8008e22 <HAL_RCC_OscConfig+0x432>
 8008e40:	e013      	b.n	8008e6a <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e42:	f7fe fca7 	bl	8007794 <HAL_GetTick>
 8008e46:	0003      	movs	r3, r0
 8008e48:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008e4a:	e009      	b.n	8008e60 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e4c:	f7fe fca2 	bl	8007794 <HAL_GetTick>
 8008e50:	0002      	movs	r2, r0
 8008e52:	693b      	ldr	r3, [r7, #16]
 8008e54:	1ad3      	subs	r3, r2, r3
 8008e56:	4a73      	ldr	r2, [pc, #460]	@ (8009024 <HAL_RCC_OscConfig+0x634>)
 8008e58:	4293      	cmp	r3, r2
 8008e5a:	d901      	bls.n	8008e60 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8008e5c:	2303      	movs	r3, #3
 8008e5e:	e121      	b.n	80090a4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008e60:	4b6e      	ldr	r3, [pc, #440]	@ (800901c <HAL_RCC_OscConfig+0x62c>)
 8008e62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008e64:	2202      	movs	r2, #2
 8008e66:	4013      	ands	r3, r2
 8008e68:	d1f0      	bne.n	8008e4c <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8008e6a:	231f      	movs	r3, #31
 8008e6c:	18fb      	adds	r3, r7, r3
 8008e6e:	781b      	ldrb	r3, [r3, #0]
 8008e70:	2b01      	cmp	r3, #1
 8008e72:	d105      	bne.n	8008e80 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8008e74:	4b69      	ldr	r3, [pc, #420]	@ (800901c <HAL_RCC_OscConfig+0x62c>)
 8008e76:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008e78:	4b68      	ldr	r3, [pc, #416]	@ (800901c <HAL_RCC_OscConfig+0x62c>)
 8008e7a:	496b      	ldr	r1, [pc, #428]	@ (8009028 <HAL_RCC_OscConfig+0x638>)
 8008e7c:	400a      	ands	r2, r1
 8008e7e:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	2220      	movs	r2, #32
 8008e86:	4013      	ands	r3, r2
 8008e88:	d039      	beq.n	8008efe <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	69db      	ldr	r3, [r3, #28]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d01b      	beq.n	8008eca <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008e92:	4b62      	ldr	r3, [pc, #392]	@ (800901c <HAL_RCC_OscConfig+0x62c>)
 8008e94:	681a      	ldr	r2, [r3, #0]
 8008e96:	4b61      	ldr	r3, [pc, #388]	@ (800901c <HAL_RCC_OscConfig+0x62c>)
 8008e98:	2180      	movs	r1, #128	@ 0x80
 8008e9a:	03c9      	lsls	r1, r1, #15
 8008e9c:	430a      	orrs	r2, r1
 8008e9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ea0:	f7fe fc78 	bl	8007794 <HAL_GetTick>
 8008ea4:	0003      	movs	r3, r0
 8008ea6:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8008ea8:	e008      	b.n	8008ebc <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008eaa:	f7fe fc73 	bl	8007794 <HAL_GetTick>
 8008eae:	0002      	movs	r2, r0
 8008eb0:	693b      	ldr	r3, [r7, #16]
 8008eb2:	1ad3      	subs	r3, r2, r3
 8008eb4:	2b02      	cmp	r3, #2
 8008eb6:	d901      	bls.n	8008ebc <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8008eb8:	2303      	movs	r3, #3
 8008eba:	e0f3      	b.n	80090a4 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8008ebc:	4b57      	ldr	r3, [pc, #348]	@ (800901c <HAL_RCC_OscConfig+0x62c>)
 8008ebe:	681a      	ldr	r2, [r3, #0]
 8008ec0:	2380      	movs	r3, #128	@ 0x80
 8008ec2:	041b      	lsls	r3, r3, #16
 8008ec4:	4013      	ands	r3, r2
 8008ec6:	d0f0      	beq.n	8008eaa <HAL_RCC_OscConfig+0x4ba>
 8008ec8:	e019      	b.n	8008efe <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008eca:	4b54      	ldr	r3, [pc, #336]	@ (800901c <HAL_RCC_OscConfig+0x62c>)
 8008ecc:	681a      	ldr	r2, [r3, #0]
 8008ece:	4b53      	ldr	r3, [pc, #332]	@ (800901c <HAL_RCC_OscConfig+0x62c>)
 8008ed0:	4956      	ldr	r1, [pc, #344]	@ (800902c <HAL_RCC_OscConfig+0x63c>)
 8008ed2:	400a      	ands	r2, r1
 8008ed4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ed6:	f7fe fc5d 	bl	8007794 <HAL_GetTick>
 8008eda:	0003      	movs	r3, r0
 8008edc:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8008ede:	e008      	b.n	8008ef2 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008ee0:	f7fe fc58 	bl	8007794 <HAL_GetTick>
 8008ee4:	0002      	movs	r2, r0
 8008ee6:	693b      	ldr	r3, [r7, #16]
 8008ee8:	1ad3      	subs	r3, r2, r3
 8008eea:	2b02      	cmp	r3, #2
 8008eec:	d901      	bls.n	8008ef2 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8008eee:	2303      	movs	r3, #3
 8008ef0:	e0d8      	b.n	80090a4 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8008ef2:	4b4a      	ldr	r3, [pc, #296]	@ (800901c <HAL_RCC_OscConfig+0x62c>)
 8008ef4:	681a      	ldr	r2, [r3, #0]
 8008ef6:	2380      	movs	r3, #128	@ 0x80
 8008ef8:	041b      	lsls	r3, r3, #16
 8008efa:	4013      	ands	r3, r2
 8008efc:	d1f0      	bne.n	8008ee0 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6a1b      	ldr	r3, [r3, #32]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d100      	bne.n	8008f08 <HAL_RCC_OscConfig+0x518>
 8008f06:	e0cc      	b.n	80090a2 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008f08:	4b44      	ldr	r3, [pc, #272]	@ (800901c <HAL_RCC_OscConfig+0x62c>)
 8008f0a:	689b      	ldr	r3, [r3, #8]
 8008f0c:	2238      	movs	r2, #56	@ 0x38
 8008f0e:	4013      	ands	r3, r2
 8008f10:	2b10      	cmp	r3, #16
 8008f12:	d100      	bne.n	8008f16 <HAL_RCC_OscConfig+0x526>
 8008f14:	e07b      	b.n	800900e <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6a1b      	ldr	r3, [r3, #32]
 8008f1a:	2b02      	cmp	r3, #2
 8008f1c:	d156      	bne.n	8008fcc <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008f1e:	4b3f      	ldr	r3, [pc, #252]	@ (800901c <HAL_RCC_OscConfig+0x62c>)
 8008f20:	681a      	ldr	r2, [r3, #0]
 8008f22:	4b3e      	ldr	r3, [pc, #248]	@ (800901c <HAL_RCC_OscConfig+0x62c>)
 8008f24:	4942      	ldr	r1, [pc, #264]	@ (8009030 <HAL_RCC_OscConfig+0x640>)
 8008f26:	400a      	ands	r2, r1
 8008f28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f2a:	f7fe fc33 	bl	8007794 <HAL_GetTick>
 8008f2e:	0003      	movs	r3, r0
 8008f30:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008f32:	e008      	b.n	8008f46 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f34:	f7fe fc2e 	bl	8007794 <HAL_GetTick>
 8008f38:	0002      	movs	r2, r0
 8008f3a:	693b      	ldr	r3, [r7, #16]
 8008f3c:	1ad3      	subs	r3, r2, r3
 8008f3e:	2b02      	cmp	r3, #2
 8008f40:	d901      	bls.n	8008f46 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8008f42:	2303      	movs	r3, #3
 8008f44:	e0ae      	b.n	80090a4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008f46:	4b35      	ldr	r3, [pc, #212]	@ (800901c <HAL_RCC_OscConfig+0x62c>)
 8008f48:	681a      	ldr	r2, [r3, #0]
 8008f4a:	2380      	movs	r3, #128	@ 0x80
 8008f4c:	049b      	lsls	r3, r3, #18
 8008f4e:	4013      	ands	r3, r2
 8008f50:	d1f0      	bne.n	8008f34 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008f52:	4b32      	ldr	r3, [pc, #200]	@ (800901c <HAL_RCC_OscConfig+0x62c>)
 8008f54:	68db      	ldr	r3, [r3, #12]
 8008f56:	4a37      	ldr	r2, [pc, #220]	@ (8009034 <HAL_RCC_OscConfig+0x644>)
 8008f58:	4013      	ands	r3, r2
 8008f5a:	0019      	movs	r1, r3
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f64:	431a      	orrs	r2, r3
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f6a:	021b      	lsls	r3, r3, #8
 8008f6c:	431a      	orrs	r2, r3
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f72:	431a      	orrs	r2, r3
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f78:	431a      	orrs	r2, r3
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f7e:	431a      	orrs	r2, r3
 8008f80:	4b26      	ldr	r3, [pc, #152]	@ (800901c <HAL_RCC_OscConfig+0x62c>)
 8008f82:	430a      	orrs	r2, r1
 8008f84:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008f86:	4b25      	ldr	r3, [pc, #148]	@ (800901c <HAL_RCC_OscConfig+0x62c>)
 8008f88:	681a      	ldr	r2, [r3, #0]
 8008f8a:	4b24      	ldr	r3, [pc, #144]	@ (800901c <HAL_RCC_OscConfig+0x62c>)
 8008f8c:	2180      	movs	r1, #128	@ 0x80
 8008f8e:	0449      	lsls	r1, r1, #17
 8008f90:	430a      	orrs	r2, r1
 8008f92:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8008f94:	4b21      	ldr	r3, [pc, #132]	@ (800901c <HAL_RCC_OscConfig+0x62c>)
 8008f96:	68da      	ldr	r2, [r3, #12]
 8008f98:	4b20      	ldr	r3, [pc, #128]	@ (800901c <HAL_RCC_OscConfig+0x62c>)
 8008f9a:	2180      	movs	r1, #128	@ 0x80
 8008f9c:	0549      	lsls	r1, r1, #21
 8008f9e:	430a      	orrs	r2, r1
 8008fa0:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fa2:	f7fe fbf7 	bl	8007794 <HAL_GetTick>
 8008fa6:	0003      	movs	r3, r0
 8008fa8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008faa:	e008      	b.n	8008fbe <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008fac:	f7fe fbf2 	bl	8007794 <HAL_GetTick>
 8008fb0:	0002      	movs	r2, r0
 8008fb2:	693b      	ldr	r3, [r7, #16]
 8008fb4:	1ad3      	subs	r3, r2, r3
 8008fb6:	2b02      	cmp	r3, #2
 8008fb8:	d901      	bls.n	8008fbe <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8008fba:	2303      	movs	r3, #3
 8008fbc:	e072      	b.n	80090a4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008fbe:	4b17      	ldr	r3, [pc, #92]	@ (800901c <HAL_RCC_OscConfig+0x62c>)
 8008fc0:	681a      	ldr	r2, [r3, #0]
 8008fc2:	2380      	movs	r3, #128	@ 0x80
 8008fc4:	049b      	lsls	r3, r3, #18
 8008fc6:	4013      	ands	r3, r2
 8008fc8:	d0f0      	beq.n	8008fac <HAL_RCC_OscConfig+0x5bc>
 8008fca:	e06a      	b.n	80090a2 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008fcc:	4b13      	ldr	r3, [pc, #76]	@ (800901c <HAL_RCC_OscConfig+0x62c>)
 8008fce:	681a      	ldr	r2, [r3, #0]
 8008fd0:	4b12      	ldr	r3, [pc, #72]	@ (800901c <HAL_RCC_OscConfig+0x62c>)
 8008fd2:	4917      	ldr	r1, [pc, #92]	@ (8009030 <HAL_RCC_OscConfig+0x640>)
 8008fd4:	400a      	ands	r2, r1
 8008fd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fd8:	f7fe fbdc 	bl	8007794 <HAL_GetTick>
 8008fdc:	0003      	movs	r3, r0
 8008fde:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008fe0:	e008      	b.n	8008ff4 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008fe2:	f7fe fbd7 	bl	8007794 <HAL_GetTick>
 8008fe6:	0002      	movs	r2, r0
 8008fe8:	693b      	ldr	r3, [r7, #16]
 8008fea:	1ad3      	subs	r3, r2, r3
 8008fec:	2b02      	cmp	r3, #2
 8008fee:	d901      	bls.n	8008ff4 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8008ff0:	2303      	movs	r3, #3
 8008ff2:	e057      	b.n	80090a4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008ff4:	4b09      	ldr	r3, [pc, #36]	@ (800901c <HAL_RCC_OscConfig+0x62c>)
 8008ff6:	681a      	ldr	r2, [r3, #0]
 8008ff8:	2380      	movs	r3, #128	@ 0x80
 8008ffa:	049b      	lsls	r3, r3, #18
 8008ffc:	4013      	ands	r3, r2
 8008ffe:	d1f0      	bne.n	8008fe2 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8009000:	4b06      	ldr	r3, [pc, #24]	@ (800901c <HAL_RCC_OscConfig+0x62c>)
 8009002:	68da      	ldr	r2, [r3, #12]
 8009004:	4b05      	ldr	r3, [pc, #20]	@ (800901c <HAL_RCC_OscConfig+0x62c>)
 8009006:	490c      	ldr	r1, [pc, #48]	@ (8009038 <HAL_RCC_OscConfig+0x648>)
 8009008:	400a      	ands	r2, r1
 800900a:	60da      	str	r2, [r3, #12]
 800900c:	e049      	b.n	80090a2 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6a1b      	ldr	r3, [r3, #32]
 8009012:	2b01      	cmp	r3, #1
 8009014:	d112      	bne.n	800903c <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8009016:	2301      	movs	r3, #1
 8009018:	e044      	b.n	80090a4 <HAL_RCC_OscConfig+0x6b4>
 800901a:	46c0      	nop			@ (mov r8, r8)
 800901c:	40021000 	.word	0x40021000
 8009020:	40007000 	.word	0x40007000
 8009024:	00001388 	.word	0x00001388
 8009028:	efffffff 	.word	0xefffffff
 800902c:	ffbfffff 	.word	0xffbfffff
 8009030:	feffffff 	.word	0xfeffffff
 8009034:	11c1808c 	.word	0x11c1808c
 8009038:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800903c:	4b1b      	ldr	r3, [pc, #108]	@ (80090ac <HAL_RCC_OscConfig+0x6bc>)
 800903e:	68db      	ldr	r3, [r3, #12]
 8009040:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009042:	697b      	ldr	r3, [r7, #20]
 8009044:	2203      	movs	r2, #3
 8009046:	401a      	ands	r2, r3
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800904c:	429a      	cmp	r2, r3
 800904e:	d126      	bne.n	800909e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009050:	697b      	ldr	r3, [r7, #20]
 8009052:	2270      	movs	r2, #112	@ 0x70
 8009054:	401a      	ands	r2, r3
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800905a:	429a      	cmp	r2, r3
 800905c:	d11f      	bne.n	800909e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800905e:	697a      	ldr	r2, [r7, #20]
 8009060:	23fe      	movs	r3, #254	@ 0xfe
 8009062:	01db      	lsls	r3, r3, #7
 8009064:	401a      	ands	r2, r3
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800906a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800906c:	429a      	cmp	r2, r3
 800906e:	d116      	bne.n	800909e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009070:	697a      	ldr	r2, [r7, #20]
 8009072:	23f8      	movs	r3, #248	@ 0xf8
 8009074:	039b      	lsls	r3, r3, #14
 8009076:	401a      	ands	r2, r3
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800907c:	429a      	cmp	r2, r3
 800907e:	d10e      	bne.n	800909e <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8009080:	697a      	ldr	r2, [r7, #20]
 8009082:	23e0      	movs	r3, #224	@ 0xe0
 8009084:	051b      	lsls	r3, r3, #20
 8009086:	401a      	ands	r2, r3
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800908c:	429a      	cmp	r2, r3
 800908e:	d106      	bne.n	800909e <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8009090:	697b      	ldr	r3, [r7, #20]
 8009092:	0f5b      	lsrs	r3, r3, #29
 8009094:	075a      	lsls	r2, r3, #29
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800909a:	429a      	cmp	r2, r3
 800909c:	d001      	beq.n	80090a2 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 800909e:	2301      	movs	r3, #1
 80090a0:	e000      	b.n	80090a4 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 80090a2:	2300      	movs	r3, #0
}
 80090a4:	0018      	movs	r0, r3
 80090a6:	46bd      	mov	sp, r7
 80090a8:	b008      	add	sp, #32
 80090aa:	bd80      	pop	{r7, pc}
 80090ac:	40021000 	.word	0x40021000

080090b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b084      	sub	sp, #16
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
 80090b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d101      	bne.n	80090c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80090c0:	2301      	movs	r3, #1
 80090c2:	e0e9      	b.n	8009298 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80090c4:	4b76      	ldr	r3, [pc, #472]	@ (80092a0 <HAL_RCC_ClockConfig+0x1f0>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	2207      	movs	r2, #7
 80090ca:	4013      	ands	r3, r2
 80090cc:	683a      	ldr	r2, [r7, #0]
 80090ce:	429a      	cmp	r2, r3
 80090d0:	d91e      	bls.n	8009110 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80090d2:	4b73      	ldr	r3, [pc, #460]	@ (80092a0 <HAL_RCC_ClockConfig+0x1f0>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	2207      	movs	r2, #7
 80090d8:	4393      	bics	r3, r2
 80090da:	0019      	movs	r1, r3
 80090dc:	4b70      	ldr	r3, [pc, #448]	@ (80092a0 <HAL_RCC_ClockConfig+0x1f0>)
 80090de:	683a      	ldr	r2, [r7, #0]
 80090e0:	430a      	orrs	r2, r1
 80090e2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80090e4:	f7fe fb56 	bl	8007794 <HAL_GetTick>
 80090e8:	0003      	movs	r3, r0
 80090ea:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80090ec:	e009      	b.n	8009102 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80090ee:	f7fe fb51 	bl	8007794 <HAL_GetTick>
 80090f2:	0002      	movs	r2, r0
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	1ad3      	subs	r3, r2, r3
 80090f8:	4a6a      	ldr	r2, [pc, #424]	@ (80092a4 <HAL_RCC_ClockConfig+0x1f4>)
 80090fa:	4293      	cmp	r3, r2
 80090fc:	d901      	bls.n	8009102 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80090fe:	2303      	movs	r3, #3
 8009100:	e0ca      	b.n	8009298 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8009102:	4b67      	ldr	r3, [pc, #412]	@ (80092a0 <HAL_RCC_ClockConfig+0x1f0>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	2207      	movs	r2, #7
 8009108:	4013      	ands	r3, r2
 800910a:	683a      	ldr	r2, [r7, #0]
 800910c:	429a      	cmp	r2, r3
 800910e:	d1ee      	bne.n	80090ee <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	2202      	movs	r2, #2
 8009116:	4013      	ands	r3, r2
 8009118:	d015      	beq.n	8009146 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	2204      	movs	r2, #4
 8009120:	4013      	ands	r3, r2
 8009122:	d006      	beq.n	8009132 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8009124:	4b60      	ldr	r3, [pc, #384]	@ (80092a8 <HAL_RCC_ClockConfig+0x1f8>)
 8009126:	689a      	ldr	r2, [r3, #8]
 8009128:	4b5f      	ldr	r3, [pc, #380]	@ (80092a8 <HAL_RCC_ClockConfig+0x1f8>)
 800912a:	21e0      	movs	r1, #224	@ 0xe0
 800912c:	01c9      	lsls	r1, r1, #7
 800912e:	430a      	orrs	r2, r1
 8009130:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009132:	4b5d      	ldr	r3, [pc, #372]	@ (80092a8 <HAL_RCC_ClockConfig+0x1f8>)
 8009134:	689b      	ldr	r3, [r3, #8]
 8009136:	4a5d      	ldr	r2, [pc, #372]	@ (80092ac <HAL_RCC_ClockConfig+0x1fc>)
 8009138:	4013      	ands	r3, r2
 800913a:	0019      	movs	r1, r3
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	689a      	ldr	r2, [r3, #8]
 8009140:	4b59      	ldr	r3, [pc, #356]	@ (80092a8 <HAL_RCC_ClockConfig+0x1f8>)
 8009142:	430a      	orrs	r2, r1
 8009144:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	2201      	movs	r2, #1
 800914c:	4013      	ands	r3, r2
 800914e:	d057      	beq.n	8009200 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	685b      	ldr	r3, [r3, #4]
 8009154:	2b01      	cmp	r3, #1
 8009156:	d107      	bne.n	8009168 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009158:	4b53      	ldr	r3, [pc, #332]	@ (80092a8 <HAL_RCC_ClockConfig+0x1f8>)
 800915a:	681a      	ldr	r2, [r3, #0]
 800915c:	2380      	movs	r3, #128	@ 0x80
 800915e:	029b      	lsls	r3, r3, #10
 8009160:	4013      	ands	r3, r2
 8009162:	d12b      	bne.n	80091bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8009164:	2301      	movs	r3, #1
 8009166:	e097      	b.n	8009298 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	685b      	ldr	r3, [r3, #4]
 800916c:	2b02      	cmp	r3, #2
 800916e:	d107      	bne.n	8009180 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009170:	4b4d      	ldr	r3, [pc, #308]	@ (80092a8 <HAL_RCC_ClockConfig+0x1f8>)
 8009172:	681a      	ldr	r2, [r3, #0]
 8009174:	2380      	movs	r3, #128	@ 0x80
 8009176:	049b      	lsls	r3, r3, #18
 8009178:	4013      	ands	r3, r2
 800917a:	d11f      	bne.n	80091bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800917c:	2301      	movs	r3, #1
 800917e:	e08b      	b.n	8009298 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	685b      	ldr	r3, [r3, #4]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d107      	bne.n	8009198 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009188:	4b47      	ldr	r3, [pc, #284]	@ (80092a8 <HAL_RCC_ClockConfig+0x1f8>)
 800918a:	681a      	ldr	r2, [r3, #0]
 800918c:	2380      	movs	r3, #128	@ 0x80
 800918e:	00db      	lsls	r3, r3, #3
 8009190:	4013      	ands	r3, r2
 8009192:	d113      	bne.n	80091bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8009194:	2301      	movs	r3, #1
 8009196:	e07f      	b.n	8009298 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	685b      	ldr	r3, [r3, #4]
 800919c:	2b03      	cmp	r3, #3
 800919e:	d106      	bne.n	80091ae <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80091a0:	4b41      	ldr	r3, [pc, #260]	@ (80092a8 <HAL_RCC_ClockConfig+0x1f8>)
 80091a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80091a4:	2202      	movs	r2, #2
 80091a6:	4013      	ands	r3, r2
 80091a8:	d108      	bne.n	80091bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80091aa:	2301      	movs	r3, #1
 80091ac:	e074      	b.n	8009298 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80091ae:	4b3e      	ldr	r3, [pc, #248]	@ (80092a8 <HAL_RCC_ClockConfig+0x1f8>)
 80091b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80091b2:	2202      	movs	r2, #2
 80091b4:	4013      	ands	r3, r2
 80091b6:	d101      	bne.n	80091bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80091b8:	2301      	movs	r3, #1
 80091ba:	e06d      	b.n	8009298 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80091bc:	4b3a      	ldr	r3, [pc, #232]	@ (80092a8 <HAL_RCC_ClockConfig+0x1f8>)
 80091be:	689b      	ldr	r3, [r3, #8]
 80091c0:	2207      	movs	r2, #7
 80091c2:	4393      	bics	r3, r2
 80091c4:	0019      	movs	r1, r3
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	685a      	ldr	r2, [r3, #4]
 80091ca:	4b37      	ldr	r3, [pc, #220]	@ (80092a8 <HAL_RCC_ClockConfig+0x1f8>)
 80091cc:	430a      	orrs	r2, r1
 80091ce:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80091d0:	f7fe fae0 	bl	8007794 <HAL_GetTick>
 80091d4:	0003      	movs	r3, r0
 80091d6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80091d8:	e009      	b.n	80091ee <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80091da:	f7fe fadb 	bl	8007794 <HAL_GetTick>
 80091de:	0002      	movs	r2, r0
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	1ad3      	subs	r3, r2, r3
 80091e4:	4a2f      	ldr	r2, [pc, #188]	@ (80092a4 <HAL_RCC_ClockConfig+0x1f4>)
 80091e6:	4293      	cmp	r3, r2
 80091e8:	d901      	bls.n	80091ee <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80091ea:	2303      	movs	r3, #3
 80091ec:	e054      	b.n	8009298 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80091ee:	4b2e      	ldr	r3, [pc, #184]	@ (80092a8 <HAL_RCC_ClockConfig+0x1f8>)
 80091f0:	689b      	ldr	r3, [r3, #8]
 80091f2:	2238      	movs	r2, #56	@ 0x38
 80091f4:	401a      	ands	r2, r3
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	685b      	ldr	r3, [r3, #4]
 80091fa:	00db      	lsls	r3, r3, #3
 80091fc:	429a      	cmp	r2, r3
 80091fe:	d1ec      	bne.n	80091da <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009200:	4b27      	ldr	r3, [pc, #156]	@ (80092a0 <HAL_RCC_ClockConfig+0x1f0>)
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	2207      	movs	r2, #7
 8009206:	4013      	ands	r3, r2
 8009208:	683a      	ldr	r2, [r7, #0]
 800920a:	429a      	cmp	r2, r3
 800920c:	d21e      	bcs.n	800924c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800920e:	4b24      	ldr	r3, [pc, #144]	@ (80092a0 <HAL_RCC_ClockConfig+0x1f0>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	2207      	movs	r2, #7
 8009214:	4393      	bics	r3, r2
 8009216:	0019      	movs	r1, r3
 8009218:	4b21      	ldr	r3, [pc, #132]	@ (80092a0 <HAL_RCC_ClockConfig+0x1f0>)
 800921a:	683a      	ldr	r2, [r7, #0]
 800921c:	430a      	orrs	r2, r1
 800921e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8009220:	f7fe fab8 	bl	8007794 <HAL_GetTick>
 8009224:	0003      	movs	r3, r0
 8009226:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8009228:	e009      	b.n	800923e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800922a:	f7fe fab3 	bl	8007794 <HAL_GetTick>
 800922e:	0002      	movs	r2, r0
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	1ad3      	subs	r3, r2, r3
 8009234:	4a1b      	ldr	r2, [pc, #108]	@ (80092a4 <HAL_RCC_ClockConfig+0x1f4>)
 8009236:	4293      	cmp	r3, r2
 8009238:	d901      	bls.n	800923e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800923a:	2303      	movs	r3, #3
 800923c:	e02c      	b.n	8009298 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800923e:	4b18      	ldr	r3, [pc, #96]	@ (80092a0 <HAL_RCC_ClockConfig+0x1f0>)
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	2207      	movs	r2, #7
 8009244:	4013      	ands	r3, r2
 8009246:	683a      	ldr	r2, [r7, #0]
 8009248:	429a      	cmp	r2, r3
 800924a:	d1ee      	bne.n	800922a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	2204      	movs	r2, #4
 8009252:	4013      	ands	r3, r2
 8009254:	d009      	beq.n	800926a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8009256:	4b14      	ldr	r3, [pc, #80]	@ (80092a8 <HAL_RCC_ClockConfig+0x1f8>)
 8009258:	689b      	ldr	r3, [r3, #8]
 800925a:	4a15      	ldr	r2, [pc, #84]	@ (80092b0 <HAL_RCC_ClockConfig+0x200>)
 800925c:	4013      	ands	r3, r2
 800925e:	0019      	movs	r1, r3
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	68da      	ldr	r2, [r3, #12]
 8009264:	4b10      	ldr	r3, [pc, #64]	@ (80092a8 <HAL_RCC_ClockConfig+0x1f8>)
 8009266:	430a      	orrs	r2, r1
 8009268:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800926a:	f000 f829 	bl	80092c0 <HAL_RCC_GetSysClockFreq>
 800926e:	0001      	movs	r1, r0
 8009270:	4b0d      	ldr	r3, [pc, #52]	@ (80092a8 <HAL_RCC_ClockConfig+0x1f8>)
 8009272:	689b      	ldr	r3, [r3, #8]
 8009274:	0a1b      	lsrs	r3, r3, #8
 8009276:	220f      	movs	r2, #15
 8009278:	401a      	ands	r2, r3
 800927a:	4b0e      	ldr	r3, [pc, #56]	@ (80092b4 <HAL_RCC_ClockConfig+0x204>)
 800927c:	0092      	lsls	r2, r2, #2
 800927e:	58d3      	ldr	r3, [r2, r3]
 8009280:	221f      	movs	r2, #31
 8009282:	4013      	ands	r3, r2
 8009284:	000a      	movs	r2, r1
 8009286:	40da      	lsrs	r2, r3
 8009288:	4b0b      	ldr	r3, [pc, #44]	@ (80092b8 <HAL_RCC_ClockConfig+0x208>)
 800928a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800928c:	4b0b      	ldr	r3, [pc, #44]	@ (80092bc <HAL_RCC_ClockConfig+0x20c>)
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	0018      	movs	r0, r3
 8009292:	f7fe fa23 	bl	80076dc <HAL_InitTick>
 8009296:	0003      	movs	r3, r0
}
 8009298:	0018      	movs	r0, r3
 800929a:	46bd      	mov	sp, r7
 800929c:	b004      	add	sp, #16
 800929e:	bd80      	pop	{r7, pc}
 80092a0:	40022000 	.word	0x40022000
 80092a4:	00001388 	.word	0x00001388
 80092a8:	40021000 	.word	0x40021000
 80092ac:	fffff0ff 	.word	0xfffff0ff
 80092b0:	ffff8fff 	.word	0xffff8fff
 80092b4:	080105e4 	.word	0x080105e4
 80092b8:	200009c8 	.word	0x200009c8
 80092bc:	200009cc 	.word	0x200009cc

080092c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b086      	sub	sp, #24
 80092c4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80092c6:	4b3c      	ldr	r3, [pc, #240]	@ (80093b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80092c8:	689b      	ldr	r3, [r3, #8]
 80092ca:	2238      	movs	r2, #56	@ 0x38
 80092cc:	4013      	ands	r3, r2
 80092ce:	d10f      	bne.n	80092f0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80092d0:	4b39      	ldr	r3, [pc, #228]	@ (80093b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	0adb      	lsrs	r3, r3, #11
 80092d6:	2207      	movs	r2, #7
 80092d8:	4013      	ands	r3, r2
 80092da:	2201      	movs	r2, #1
 80092dc:	409a      	lsls	r2, r3
 80092de:	0013      	movs	r3, r2
 80092e0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80092e2:	6839      	ldr	r1, [r7, #0]
 80092e4:	4835      	ldr	r0, [pc, #212]	@ (80093bc <HAL_RCC_GetSysClockFreq+0xfc>)
 80092e6:	f7f6 ff33 	bl	8000150 <__udivsi3>
 80092ea:	0003      	movs	r3, r0
 80092ec:	613b      	str	r3, [r7, #16]
 80092ee:	e05d      	b.n	80093ac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80092f0:	4b31      	ldr	r3, [pc, #196]	@ (80093b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80092f2:	689b      	ldr	r3, [r3, #8]
 80092f4:	2238      	movs	r2, #56	@ 0x38
 80092f6:	4013      	ands	r3, r2
 80092f8:	2b08      	cmp	r3, #8
 80092fa:	d102      	bne.n	8009302 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80092fc:	4b30      	ldr	r3, [pc, #192]	@ (80093c0 <HAL_RCC_GetSysClockFreq+0x100>)
 80092fe:	613b      	str	r3, [r7, #16]
 8009300:	e054      	b.n	80093ac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009302:	4b2d      	ldr	r3, [pc, #180]	@ (80093b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009304:	689b      	ldr	r3, [r3, #8]
 8009306:	2238      	movs	r2, #56	@ 0x38
 8009308:	4013      	ands	r3, r2
 800930a:	2b10      	cmp	r3, #16
 800930c:	d138      	bne.n	8009380 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800930e:	4b2a      	ldr	r3, [pc, #168]	@ (80093b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009310:	68db      	ldr	r3, [r3, #12]
 8009312:	2203      	movs	r2, #3
 8009314:	4013      	ands	r3, r2
 8009316:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009318:	4b27      	ldr	r3, [pc, #156]	@ (80093b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800931a:	68db      	ldr	r3, [r3, #12]
 800931c:	091b      	lsrs	r3, r3, #4
 800931e:	2207      	movs	r2, #7
 8009320:	4013      	ands	r3, r2
 8009322:	3301      	adds	r3, #1
 8009324:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	2b03      	cmp	r3, #3
 800932a:	d10d      	bne.n	8009348 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800932c:	68b9      	ldr	r1, [r7, #8]
 800932e:	4824      	ldr	r0, [pc, #144]	@ (80093c0 <HAL_RCC_GetSysClockFreq+0x100>)
 8009330:	f7f6 ff0e 	bl	8000150 <__udivsi3>
 8009334:	0003      	movs	r3, r0
 8009336:	0019      	movs	r1, r3
 8009338:	4b1f      	ldr	r3, [pc, #124]	@ (80093b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800933a:	68db      	ldr	r3, [r3, #12]
 800933c:	0a1b      	lsrs	r3, r3, #8
 800933e:	227f      	movs	r2, #127	@ 0x7f
 8009340:	4013      	ands	r3, r2
 8009342:	434b      	muls	r3, r1
 8009344:	617b      	str	r3, [r7, #20]
        break;
 8009346:	e00d      	b.n	8009364 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8009348:	68b9      	ldr	r1, [r7, #8]
 800934a:	481c      	ldr	r0, [pc, #112]	@ (80093bc <HAL_RCC_GetSysClockFreq+0xfc>)
 800934c:	f7f6 ff00 	bl	8000150 <__udivsi3>
 8009350:	0003      	movs	r3, r0
 8009352:	0019      	movs	r1, r3
 8009354:	4b18      	ldr	r3, [pc, #96]	@ (80093b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009356:	68db      	ldr	r3, [r3, #12]
 8009358:	0a1b      	lsrs	r3, r3, #8
 800935a:	227f      	movs	r2, #127	@ 0x7f
 800935c:	4013      	ands	r3, r2
 800935e:	434b      	muls	r3, r1
 8009360:	617b      	str	r3, [r7, #20]
        break;
 8009362:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8009364:	4b14      	ldr	r3, [pc, #80]	@ (80093b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009366:	68db      	ldr	r3, [r3, #12]
 8009368:	0f5b      	lsrs	r3, r3, #29
 800936a:	2207      	movs	r2, #7
 800936c:	4013      	ands	r3, r2
 800936e:	3301      	adds	r3, #1
 8009370:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8009372:	6879      	ldr	r1, [r7, #4]
 8009374:	6978      	ldr	r0, [r7, #20]
 8009376:	f7f6 feeb 	bl	8000150 <__udivsi3>
 800937a:	0003      	movs	r3, r0
 800937c:	613b      	str	r3, [r7, #16]
 800937e:	e015      	b.n	80093ac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8009380:	4b0d      	ldr	r3, [pc, #52]	@ (80093b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009382:	689b      	ldr	r3, [r3, #8]
 8009384:	2238      	movs	r2, #56	@ 0x38
 8009386:	4013      	ands	r3, r2
 8009388:	2b20      	cmp	r3, #32
 800938a:	d103      	bne.n	8009394 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800938c:	2380      	movs	r3, #128	@ 0x80
 800938e:	021b      	lsls	r3, r3, #8
 8009390:	613b      	str	r3, [r7, #16]
 8009392:	e00b      	b.n	80093ac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8009394:	4b08      	ldr	r3, [pc, #32]	@ (80093b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009396:	689b      	ldr	r3, [r3, #8]
 8009398:	2238      	movs	r2, #56	@ 0x38
 800939a:	4013      	ands	r3, r2
 800939c:	2b18      	cmp	r3, #24
 800939e:	d103      	bne.n	80093a8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80093a0:	23fa      	movs	r3, #250	@ 0xfa
 80093a2:	01db      	lsls	r3, r3, #7
 80093a4:	613b      	str	r3, [r7, #16]
 80093a6:	e001      	b.n	80093ac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80093a8:	2300      	movs	r3, #0
 80093aa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80093ac:	693b      	ldr	r3, [r7, #16]
}
 80093ae:	0018      	movs	r0, r3
 80093b0:	46bd      	mov	sp, r7
 80093b2:	b006      	add	sp, #24
 80093b4:	bd80      	pop	{r7, pc}
 80093b6:	46c0      	nop			@ (mov r8, r8)
 80093b8:	40021000 	.word	0x40021000
 80093bc:	00f42400 	.word	0x00f42400
 80093c0:	007a1200 	.word	0x007a1200

080093c4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80093c8:	4b02      	ldr	r3, [pc, #8]	@ (80093d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80093ca:	681b      	ldr	r3, [r3, #0]
}
 80093cc:	0018      	movs	r0, r3
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bd80      	pop	{r7, pc}
 80093d2:	46c0      	nop			@ (mov r8, r8)
 80093d4:	200009c8 	.word	0x200009c8

080093d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80093d8:	b5b0      	push	{r4, r5, r7, lr}
 80093da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80093dc:	f7ff fff2 	bl	80093c4 <HAL_RCC_GetHCLKFreq>
 80093e0:	0004      	movs	r4, r0
 80093e2:	f7ff faf9 	bl	80089d8 <LL_RCC_GetAPB1Prescaler>
 80093e6:	0003      	movs	r3, r0
 80093e8:	0b1a      	lsrs	r2, r3, #12
 80093ea:	4b05      	ldr	r3, [pc, #20]	@ (8009400 <HAL_RCC_GetPCLK1Freq+0x28>)
 80093ec:	0092      	lsls	r2, r2, #2
 80093ee:	58d3      	ldr	r3, [r2, r3]
 80093f0:	221f      	movs	r2, #31
 80093f2:	4013      	ands	r3, r2
 80093f4:	40dc      	lsrs	r4, r3
 80093f6:	0023      	movs	r3, r4
}
 80093f8:	0018      	movs	r0, r3
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bdb0      	pop	{r4, r5, r7, pc}
 80093fe:	46c0      	nop			@ (mov r8, r8)
 8009400:	08010624 	.word	0x08010624

08009404 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b086      	sub	sp, #24
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800940c:	2313      	movs	r3, #19
 800940e:	18fb      	adds	r3, r7, r3
 8009410:	2200      	movs	r2, #0
 8009412:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009414:	2312      	movs	r3, #18
 8009416:	18fb      	adds	r3, r7, r3
 8009418:	2200      	movs	r2, #0
 800941a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681a      	ldr	r2, [r3, #0]
 8009420:	2380      	movs	r3, #128	@ 0x80
 8009422:	029b      	lsls	r3, r3, #10
 8009424:	4013      	ands	r3, r2
 8009426:	d100      	bne.n	800942a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8009428:	e0ad      	b.n	8009586 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 800942a:	2011      	movs	r0, #17
 800942c:	183b      	adds	r3, r7, r0
 800942e:	2200      	movs	r2, #0
 8009430:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009432:	4b47      	ldr	r3, [pc, #284]	@ (8009550 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8009434:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009436:	2380      	movs	r3, #128	@ 0x80
 8009438:	055b      	lsls	r3, r3, #21
 800943a:	4013      	ands	r3, r2
 800943c:	d110      	bne.n	8009460 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800943e:	4b44      	ldr	r3, [pc, #272]	@ (8009550 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8009440:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009442:	4b43      	ldr	r3, [pc, #268]	@ (8009550 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8009444:	2180      	movs	r1, #128	@ 0x80
 8009446:	0549      	lsls	r1, r1, #21
 8009448:	430a      	orrs	r2, r1
 800944a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800944c:	4b40      	ldr	r3, [pc, #256]	@ (8009550 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800944e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009450:	2380      	movs	r3, #128	@ 0x80
 8009452:	055b      	lsls	r3, r3, #21
 8009454:	4013      	ands	r3, r2
 8009456:	60bb      	str	r3, [r7, #8]
 8009458:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800945a:	183b      	adds	r3, r7, r0
 800945c:	2201      	movs	r2, #1
 800945e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009460:	4b3c      	ldr	r3, [pc, #240]	@ (8009554 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8009462:	681a      	ldr	r2, [r3, #0]
 8009464:	4b3b      	ldr	r3, [pc, #236]	@ (8009554 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8009466:	2180      	movs	r1, #128	@ 0x80
 8009468:	0049      	lsls	r1, r1, #1
 800946a:	430a      	orrs	r2, r1
 800946c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800946e:	f7fe f991 	bl	8007794 <HAL_GetTick>
 8009472:	0003      	movs	r3, r0
 8009474:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009476:	e00b      	b.n	8009490 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009478:	f7fe f98c 	bl	8007794 <HAL_GetTick>
 800947c:	0002      	movs	r2, r0
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	1ad3      	subs	r3, r2, r3
 8009482:	2b02      	cmp	r3, #2
 8009484:	d904      	bls.n	8009490 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8009486:	2313      	movs	r3, #19
 8009488:	18fb      	adds	r3, r7, r3
 800948a:	2203      	movs	r2, #3
 800948c:	701a      	strb	r2, [r3, #0]
        break;
 800948e:	e005      	b.n	800949c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009490:	4b30      	ldr	r3, [pc, #192]	@ (8009554 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8009492:	681a      	ldr	r2, [r3, #0]
 8009494:	2380      	movs	r3, #128	@ 0x80
 8009496:	005b      	lsls	r3, r3, #1
 8009498:	4013      	ands	r3, r2
 800949a:	d0ed      	beq.n	8009478 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800949c:	2313      	movs	r3, #19
 800949e:	18fb      	adds	r3, r7, r3
 80094a0:	781b      	ldrb	r3, [r3, #0]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d15e      	bne.n	8009564 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80094a6:	4b2a      	ldr	r3, [pc, #168]	@ (8009550 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80094a8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80094aa:	23c0      	movs	r3, #192	@ 0xc0
 80094ac:	009b      	lsls	r3, r3, #2
 80094ae:	4013      	ands	r3, r2
 80094b0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80094b2:	697b      	ldr	r3, [r7, #20]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d019      	beq.n	80094ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094bc:	697a      	ldr	r2, [r7, #20]
 80094be:	429a      	cmp	r2, r3
 80094c0:	d014      	beq.n	80094ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80094c2:	4b23      	ldr	r3, [pc, #140]	@ (8009550 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80094c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80094c6:	4a24      	ldr	r2, [pc, #144]	@ (8009558 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80094c8:	4013      	ands	r3, r2
 80094ca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80094cc:	4b20      	ldr	r3, [pc, #128]	@ (8009550 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80094ce:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80094d0:	4b1f      	ldr	r3, [pc, #124]	@ (8009550 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80094d2:	2180      	movs	r1, #128	@ 0x80
 80094d4:	0249      	lsls	r1, r1, #9
 80094d6:	430a      	orrs	r2, r1
 80094d8:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80094da:	4b1d      	ldr	r3, [pc, #116]	@ (8009550 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80094dc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80094de:	4b1c      	ldr	r3, [pc, #112]	@ (8009550 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80094e0:	491e      	ldr	r1, [pc, #120]	@ (800955c <HAL_RCCEx_PeriphCLKConfig+0x158>)
 80094e2:	400a      	ands	r2, r1
 80094e4:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80094e6:	4b1a      	ldr	r3, [pc, #104]	@ (8009550 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80094e8:	697a      	ldr	r2, [r7, #20]
 80094ea:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80094ec:	697b      	ldr	r3, [r7, #20]
 80094ee:	2201      	movs	r2, #1
 80094f0:	4013      	ands	r3, r2
 80094f2:	d016      	beq.n	8009522 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094f4:	f7fe f94e 	bl	8007794 <HAL_GetTick>
 80094f8:	0003      	movs	r3, r0
 80094fa:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80094fc:	e00c      	b.n	8009518 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80094fe:	f7fe f949 	bl	8007794 <HAL_GetTick>
 8009502:	0002      	movs	r2, r0
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	1ad3      	subs	r3, r2, r3
 8009508:	4a15      	ldr	r2, [pc, #84]	@ (8009560 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800950a:	4293      	cmp	r3, r2
 800950c:	d904      	bls.n	8009518 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800950e:	2313      	movs	r3, #19
 8009510:	18fb      	adds	r3, r7, r3
 8009512:	2203      	movs	r2, #3
 8009514:	701a      	strb	r2, [r3, #0]
            break;
 8009516:	e004      	b.n	8009522 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009518:	4b0d      	ldr	r3, [pc, #52]	@ (8009550 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800951a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800951c:	2202      	movs	r2, #2
 800951e:	4013      	ands	r3, r2
 8009520:	d0ed      	beq.n	80094fe <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8009522:	2313      	movs	r3, #19
 8009524:	18fb      	adds	r3, r7, r3
 8009526:	781b      	ldrb	r3, [r3, #0]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d10a      	bne.n	8009542 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800952c:	4b08      	ldr	r3, [pc, #32]	@ (8009550 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800952e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009530:	4a09      	ldr	r2, [pc, #36]	@ (8009558 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8009532:	4013      	ands	r3, r2
 8009534:	0019      	movs	r1, r3
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800953a:	4b05      	ldr	r3, [pc, #20]	@ (8009550 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800953c:	430a      	orrs	r2, r1
 800953e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009540:	e016      	b.n	8009570 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009542:	2312      	movs	r3, #18
 8009544:	18fb      	adds	r3, r7, r3
 8009546:	2213      	movs	r2, #19
 8009548:	18ba      	adds	r2, r7, r2
 800954a:	7812      	ldrb	r2, [r2, #0]
 800954c:	701a      	strb	r2, [r3, #0]
 800954e:	e00f      	b.n	8009570 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8009550:	40021000 	.word	0x40021000
 8009554:	40007000 	.word	0x40007000
 8009558:	fffffcff 	.word	0xfffffcff
 800955c:	fffeffff 	.word	0xfffeffff
 8009560:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009564:	2312      	movs	r3, #18
 8009566:	18fb      	adds	r3, r7, r3
 8009568:	2213      	movs	r2, #19
 800956a:	18ba      	adds	r2, r7, r2
 800956c:	7812      	ldrb	r2, [r2, #0]
 800956e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009570:	2311      	movs	r3, #17
 8009572:	18fb      	adds	r3, r7, r3
 8009574:	781b      	ldrb	r3, [r3, #0]
 8009576:	2b01      	cmp	r3, #1
 8009578:	d105      	bne.n	8009586 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800957a:	4bb6      	ldr	r3, [pc, #728]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800957c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800957e:	4bb5      	ldr	r3, [pc, #724]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009580:	49b5      	ldr	r1, [pc, #724]	@ (8009858 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8009582:	400a      	ands	r2, r1
 8009584:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	2201      	movs	r2, #1
 800958c:	4013      	ands	r3, r2
 800958e:	d009      	beq.n	80095a4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009590:	4bb0      	ldr	r3, [pc, #704]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009592:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009594:	2203      	movs	r2, #3
 8009596:	4393      	bics	r3, r2
 8009598:	0019      	movs	r1, r3
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	685a      	ldr	r2, [r3, #4]
 800959e:	4bad      	ldr	r3, [pc, #692]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80095a0:	430a      	orrs	r2, r1
 80095a2:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	2202      	movs	r2, #2
 80095aa:	4013      	ands	r3, r2
 80095ac:	d009      	beq.n	80095c2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80095ae:	4ba9      	ldr	r3, [pc, #676]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80095b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095b2:	220c      	movs	r2, #12
 80095b4:	4393      	bics	r3, r2
 80095b6:	0019      	movs	r1, r3
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	689a      	ldr	r2, [r3, #8]
 80095bc:	4ba5      	ldr	r3, [pc, #660]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80095be:	430a      	orrs	r2, r1
 80095c0:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	2204      	movs	r2, #4
 80095c8:	4013      	ands	r3, r2
 80095ca:	d009      	beq.n	80095e0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80095cc:	4ba1      	ldr	r3, [pc, #644]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80095ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095d0:	2230      	movs	r2, #48	@ 0x30
 80095d2:	4393      	bics	r3, r2
 80095d4:	0019      	movs	r1, r3
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	68da      	ldr	r2, [r3, #12]
 80095da:	4b9e      	ldr	r3, [pc, #632]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80095dc:	430a      	orrs	r2, r1
 80095de:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	2210      	movs	r2, #16
 80095e6:	4013      	ands	r3, r2
 80095e8:	d009      	beq.n	80095fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80095ea:	4b9a      	ldr	r3, [pc, #616]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80095ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095ee:	4a9b      	ldr	r2, [pc, #620]	@ (800985c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80095f0:	4013      	ands	r3, r2
 80095f2:	0019      	movs	r1, r3
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	691a      	ldr	r2, [r3, #16]
 80095f8:	4b96      	ldr	r3, [pc, #600]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80095fa:	430a      	orrs	r2, r1
 80095fc:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681a      	ldr	r2, [r3, #0]
 8009602:	2380      	movs	r3, #128	@ 0x80
 8009604:	015b      	lsls	r3, r3, #5
 8009606:	4013      	ands	r3, r2
 8009608:	d009      	beq.n	800961e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 800960a:	4b92      	ldr	r3, [pc, #584]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800960c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800960e:	4a94      	ldr	r2, [pc, #592]	@ (8009860 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8009610:	4013      	ands	r3, r2
 8009612:	0019      	movs	r1, r3
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	695a      	ldr	r2, [r3, #20]
 8009618:	4b8e      	ldr	r3, [pc, #568]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800961a:	430a      	orrs	r2, r1
 800961c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681a      	ldr	r2, [r3, #0]
 8009622:	2380      	movs	r3, #128	@ 0x80
 8009624:	009b      	lsls	r3, r3, #2
 8009626:	4013      	ands	r3, r2
 8009628:	d009      	beq.n	800963e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800962a:	4b8a      	ldr	r3, [pc, #552]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800962c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800962e:	4a8d      	ldr	r2, [pc, #564]	@ (8009864 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8009630:	4013      	ands	r3, r2
 8009632:	0019      	movs	r1, r3
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009638:	4b86      	ldr	r3, [pc, #536]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800963a:	430a      	orrs	r2, r1
 800963c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681a      	ldr	r2, [r3, #0]
 8009642:	2380      	movs	r3, #128	@ 0x80
 8009644:	00db      	lsls	r3, r3, #3
 8009646:	4013      	ands	r3, r2
 8009648:	d009      	beq.n	800965e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800964a:	4b82      	ldr	r3, [pc, #520]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800964c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800964e:	4a86      	ldr	r2, [pc, #536]	@ (8009868 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8009650:	4013      	ands	r3, r2
 8009652:	0019      	movs	r1, r3
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009658:	4b7e      	ldr	r3, [pc, #504]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800965a:	430a      	orrs	r2, r1
 800965c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	2220      	movs	r2, #32
 8009664:	4013      	ands	r3, r2
 8009666:	d009      	beq.n	800967c <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009668:	4b7a      	ldr	r3, [pc, #488]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800966a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800966c:	4a7f      	ldr	r2, [pc, #508]	@ (800986c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800966e:	4013      	ands	r3, r2
 8009670:	0019      	movs	r1, r3
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	699a      	ldr	r2, [r3, #24]
 8009676:	4b77      	ldr	r3, [pc, #476]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009678:	430a      	orrs	r2, r1
 800967a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	2240      	movs	r2, #64	@ 0x40
 8009682:	4013      	ands	r3, r2
 8009684:	d009      	beq.n	800969a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009686:	4b73      	ldr	r3, [pc, #460]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009688:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800968a:	4a79      	ldr	r2, [pc, #484]	@ (8009870 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800968c:	4013      	ands	r3, r2
 800968e:	0019      	movs	r1, r3
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	69da      	ldr	r2, [r3, #28]
 8009694:	4b6f      	ldr	r3, [pc, #444]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009696:	430a      	orrs	r2, r1
 8009698:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681a      	ldr	r2, [r3, #0]
 800969e:	2380      	movs	r3, #128	@ 0x80
 80096a0:	01db      	lsls	r3, r3, #7
 80096a2:	4013      	ands	r3, r2
 80096a4:	d015      	beq.n	80096d2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80096a6:	4b6b      	ldr	r3, [pc, #428]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80096a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096aa:	009b      	lsls	r3, r3, #2
 80096ac:	0899      	lsrs	r1, r3, #2
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80096b2:	4b68      	ldr	r3, [pc, #416]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80096b4:	430a      	orrs	r2, r1
 80096b6:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80096bc:	2380      	movs	r3, #128	@ 0x80
 80096be:	05db      	lsls	r3, r3, #23
 80096c0:	429a      	cmp	r2, r3
 80096c2:	d106      	bne.n	80096d2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80096c4:	4b63      	ldr	r3, [pc, #396]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80096c6:	68da      	ldr	r2, [r3, #12]
 80096c8:	4b62      	ldr	r3, [pc, #392]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80096ca:	2180      	movs	r1, #128	@ 0x80
 80096cc:	0249      	lsls	r1, r1, #9
 80096ce:	430a      	orrs	r2, r1
 80096d0:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681a      	ldr	r2, [r3, #0]
 80096d6:	2380      	movs	r3, #128	@ 0x80
 80096d8:	031b      	lsls	r3, r3, #12
 80096da:	4013      	ands	r3, r2
 80096dc:	d009      	beq.n	80096f2 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80096de:	4b5d      	ldr	r3, [pc, #372]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80096e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096e2:	2240      	movs	r2, #64	@ 0x40
 80096e4:	4393      	bics	r3, r2
 80096e6:	0019      	movs	r1, r3
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80096ec:	4b59      	ldr	r3, [pc, #356]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80096ee:	430a      	orrs	r2, r1
 80096f0:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681a      	ldr	r2, [r3, #0]
 80096f6:	2380      	movs	r3, #128	@ 0x80
 80096f8:	039b      	lsls	r3, r3, #14
 80096fa:	4013      	ands	r3, r2
 80096fc:	d016      	beq.n	800972c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80096fe:	4b55      	ldr	r3, [pc, #340]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009700:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009702:	4a5c      	ldr	r2, [pc, #368]	@ (8009874 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8009704:	4013      	ands	r3, r2
 8009706:	0019      	movs	r1, r3
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800970c:	4b51      	ldr	r3, [pc, #324]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800970e:	430a      	orrs	r2, r1
 8009710:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009716:	2380      	movs	r3, #128	@ 0x80
 8009718:	03db      	lsls	r3, r3, #15
 800971a:	429a      	cmp	r2, r3
 800971c:	d106      	bne.n	800972c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800971e:	4b4d      	ldr	r3, [pc, #308]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009720:	68da      	ldr	r2, [r3, #12]
 8009722:	4b4c      	ldr	r3, [pc, #304]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009724:	2180      	movs	r1, #128	@ 0x80
 8009726:	0449      	lsls	r1, r1, #17
 8009728:	430a      	orrs	r2, r1
 800972a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681a      	ldr	r2, [r3, #0]
 8009730:	2380      	movs	r3, #128	@ 0x80
 8009732:	03db      	lsls	r3, r3, #15
 8009734:	4013      	ands	r3, r2
 8009736:	d016      	beq.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8009738:	4b46      	ldr	r3, [pc, #280]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800973a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800973c:	4a4e      	ldr	r2, [pc, #312]	@ (8009878 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800973e:	4013      	ands	r3, r2
 8009740:	0019      	movs	r1, r3
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009746:	4b43      	ldr	r3, [pc, #268]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009748:	430a      	orrs	r2, r1
 800974a:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009750:	2380      	movs	r3, #128	@ 0x80
 8009752:	045b      	lsls	r3, r3, #17
 8009754:	429a      	cmp	r2, r3
 8009756:	d106      	bne.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8009758:	4b3e      	ldr	r3, [pc, #248]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800975a:	68da      	ldr	r2, [r3, #12]
 800975c:	4b3d      	ldr	r3, [pc, #244]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800975e:	2180      	movs	r1, #128	@ 0x80
 8009760:	0449      	lsls	r1, r1, #17
 8009762:	430a      	orrs	r2, r1
 8009764:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681a      	ldr	r2, [r3, #0]
 800976a:	2380      	movs	r3, #128	@ 0x80
 800976c:	011b      	lsls	r3, r3, #4
 800976e:	4013      	ands	r3, r2
 8009770:	d014      	beq.n	800979c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8009772:	4b38      	ldr	r3, [pc, #224]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009774:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009776:	2203      	movs	r2, #3
 8009778:	4393      	bics	r3, r2
 800977a:	0019      	movs	r1, r3
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	6a1a      	ldr	r2, [r3, #32]
 8009780:	4b34      	ldr	r3, [pc, #208]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009782:	430a      	orrs	r2, r1
 8009784:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6a1b      	ldr	r3, [r3, #32]
 800978a:	2b01      	cmp	r3, #1
 800978c:	d106      	bne.n	800979c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800978e:	4b31      	ldr	r3, [pc, #196]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009790:	68da      	ldr	r2, [r3, #12]
 8009792:	4b30      	ldr	r3, [pc, #192]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009794:	2180      	movs	r1, #128	@ 0x80
 8009796:	0249      	lsls	r1, r1, #9
 8009798:	430a      	orrs	r2, r1
 800979a:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681a      	ldr	r2, [r3, #0]
 80097a0:	2380      	movs	r3, #128	@ 0x80
 80097a2:	019b      	lsls	r3, r3, #6
 80097a4:	4013      	ands	r3, r2
 80097a6:	d014      	beq.n	80097d2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80097a8:	4b2a      	ldr	r3, [pc, #168]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80097aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097ac:	220c      	movs	r2, #12
 80097ae:	4393      	bics	r3, r2
 80097b0:	0019      	movs	r1, r3
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80097b6:	4b27      	ldr	r3, [pc, #156]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80097b8:	430a      	orrs	r2, r1
 80097ba:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097c0:	2b04      	cmp	r3, #4
 80097c2:	d106      	bne.n	80097d2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80097c4:	4b23      	ldr	r3, [pc, #140]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80097c6:	68da      	ldr	r2, [r3, #12]
 80097c8:	4b22      	ldr	r3, [pc, #136]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80097ca:	2180      	movs	r1, #128	@ 0x80
 80097cc:	0249      	lsls	r1, r1, #9
 80097ce:	430a      	orrs	r2, r1
 80097d0:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681a      	ldr	r2, [r3, #0]
 80097d6:	2380      	movs	r3, #128	@ 0x80
 80097d8:	045b      	lsls	r3, r3, #17
 80097da:	4013      	ands	r3, r2
 80097dc:	d016      	beq.n	800980c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80097de:	4b1d      	ldr	r3, [pc, #116]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80097e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097e2:	4a22      	ldr	r2, [pc, #136]	@ (800986c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80097e4:	4013      	ands	r3, r2
 80097e6:	0019      	movs	r1, r3
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80097ec:	4b19      	ldr	r3, [pc, #100]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80097ee:	430a      	orrs	r2, r1
 80097f0:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80097f6:	2380      	movs	r3, #128	@ 0x80
 80097f8:	019b      	lsls	r3, r3, #6
 80097fa:	429a      	cmp	r2, r3
 80097fc:	d106      	bne.n	800980c <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80097fe:	4b15      	ldr	r3, [pc, #84]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009800:	68da      	ldr	r2, [r3, #12]
 8009802:	4b14      	ldr	r3, [pc, #80]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009804:	2180      	movs	r1, #128	@ 0x80
 8009806:	0449      	lsls	r1, r1, #17
 8009808:	430a      	orrs	r2, r1
 800980a:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681a      	ldr	r2, [r3, #0]
 8009810:	2380      	movs	r3, #128	@ 0x80
 8009812:	049b      	lsls	r3, r3, #18
 8009814:	4013      	ands	r3, r2
 8009816:	d016      	beq.n	8009846 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009818:	4b0e      	ldr	r3, [pc, #56]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800981a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800981c:	4a10      	ldr	r2, [pc, #64]	@ (8009860 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800981e:	4013      	ands	r3, r2
 8009820:	0019      	movs	r1, r3
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009826:	4b0b      	ldr	r3, [pc, #44]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8009828:	430a      	orrs	r2, r1
 800982a:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009830:	2380      	movs	r3, #128	@ 0x80
 8009832:	005b      	lsls	r3, r3, #1
 8009834:	429a      	cmp	r2, r3
 8009836:	d106      	bne.n	8009846 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8009838:	4b06      	ldr	r3, [pc, #24]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800983a:	68da      	ldr	r2, [r3, #12]
 800983c:	4b05      	ldr	r3, [pc, #20]	@ (8009854 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800983e:	2180      	movs	r1, #128	@ 0x80
 8009840:	0449      	lsls	r1, r1, #17
 8009842:	430a      	orrs	r2, r1
 8009844:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8009846:	2312      	movs	r3, #18
 8009848:	18fb      	adds	r3, r7, r3
 800984a:	781b      	ldrb	r3, [r3, #0]
}
 800984c:	0018      	movs	r0, r3
 800984e:	46bd      	mov	sp, r7
 8009850:	b006      	add	sp, #24
 8009852:	bd80      	pop	{r7, pc}
 8009854:	40021000 	.word	0x40021000
 8009858:	efffffff 	.word	0xefffffff
 800985c:	fffff3ff 	.word	0xfffff3ff
 8009860:	fffffcff 	.word	0xfffffcff
 8009864:	fff3ffff 	.word	0xfff3ffff
 8009868:	ffcfffff 	.word	0xffcfffff
 800986c:	ffffcfff 	.word	0xffffcfff
 8009870:	ffff3fff 	.word	0xffff3fff
 8009874:	ffbfffff 	.word	0xffbfffff
 8009878:	feffffff 	.word	0xfeffffff

0800987c <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800987c:	b590      	push	{r4, r7, lr}
 800987e:	b089      	sub	sp, #36	@ 0x24
 8009880:	af00      	add	r7, sp, #0
 8009882:	60f8      	str	r0, [r7, #12]
 8009884:	60b9      	str	r1, [r7, #8]
 8009886:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	2228      	movs	r2, #40	@ 0x28
 800988c:	5c9b      	ldrb	r3, [r3, r2]
 800988e:	2b01      	cmp	r3, #1
 8009890:	d101      	bne.n	8009896 <HAL_RTC_SetAlarm_IT+0x1a>
 8009892:	2302      	movs	r3, #2
 8009894:	e127      	b.n	8009ae6 <HAL_RTC_SetAlarm_IT+0x26a>
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	2228      	movs	r2, #40	@ 0x28
 800989a:	2101      	movs	r1, #1
 800989c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	2229      	movs	r2, #41	@ 0x29
 80098a2:	2102      	movs	r1, #2
 80098a4:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d136      	bne.n	800991a <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	699b      	ldr	r3, [r3, #24]
 80098b2:	2240      	movs	r2, #64	@ 0x40
 80098b4:	4013      	ands	r3, r2
 80098b6:	d102      	bne.n	80098be <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	2200      	movs	r2, #0
 80098bc:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80098be:	68bb      	ldr	r3, [r7, #8]
 80098c0:	781b      	ldrb	r3, [r3, #0]
 80098c2:	0018      	movs	r0, r3
 80098c4:	f000 fa1e 	bl	8009d04 <RTC_ByteToBcd2>
 80098c8:	0003      	movs	r3, r0
 80098ca:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	785b      	ldrb	r3, [r3, #1]
 80098d0:	0018      	movs	r0, r3
 80098d2:	f000 fa17 	bl	8009d04 <RTC_ByteToBcd2>
 80098d6:	0003      	movs	r3, r0
 80098d8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80098da:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80098dc:	68bb      	ldr	r3, [r7, #8]
 80098de:	789b      	ldrb	r3, [r3, #2]
 80098e0:	0018      	movs	r0, r3
 80098e2:	f000 fa0f 	bl	8009d04 <RTC_ByteToBcd2>
 80098e6:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80098e8:	0022      	movs	r2, r4
 80098ea:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80098ec:	68bb      	ldr	r3, [r7, #8]
 80098ee:	78db      	ldrb	r3, [r3, #3]
 80098f0:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80098f2:	431a      	orrs	r2, r3
 80098f4:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80098f6:	68bb      	ldr	r3, [r7, #8]
 80098f8:	2220      	movs	r2, #32
 80098fa:	5c9b      	ldrb	r3, [r3, r2]
 80098fc:	0018      	movs	r0, r3
 80098fe:	f000 fa01 	bl	8009d04 <RTC_ByteToBcd2>
 8009902:	0003      	movs	r3, r0
 8009904:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8009906:	0022      	movs	r2, r4
 8009908:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800990a:	68bb      	ldr	r3, [r7, #8]
 800990c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800990e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8009910:	68bb      	ldr	r3, [r7, #8]
 8009912:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8009914:	4313      	orrs	r3, r2
 8009916:	61fb      	str	r3, [r7, #28]
 8009918:	e022      	b.n	8009960 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	699b      	ldr	r3, [r3, #24]
 8009920:	2240      	movs	r2, #64	@ 0x40
 8009922:	4013      	ands	r3, r2
 8009924:	d102      	bne.n	800992c <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8009926:	68bb      	ldr	r3, [r7, #8]
 8009928:	2200      	movs	r2, #0
 800992a:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800992c:	68bb      	ldr	r3, [r7, #8]
 800992e:	781b      	ldrb	r3, [r3, #0]
 8009930:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009932:	68bb      	ldr	r3, [r7, #8]
 8009934:	785b      	ldrb	r3, [r3, #1]
 8009936:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8009938:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800993a:	68ba      	ldr	r2, [r7, #8]
 800993c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800993e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8009940:	68bb      	ldr	r3, [r7, #8]
 8009942:	78db      	ldrb	r3, [r3, #3]
 8009944:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8009946:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8009948:	68bb      	ldr	r3, [r7, #8]
 800994a:	2120      	movs	r1, #32
 800994c:	5c5b      	ldrb	r3, [r3, r1]
 800994e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8009950:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8009952:	68bb      	ldr	r3, [r7, #8]
 8009954:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8009956:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8009958:	68bb      	ldr	r3, [r7, #8]
 800995a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800995c:	4313      	orrs	r3, r2
 800995e:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8009960:	68bb      	ldr	r3, [r7, #8]
 8009962:	685a      	ldr	r2, [r3, #4]
 8009964:	68bb      	ldr	r3, [r7, #8]
 8009966:	699b      	ldr	r3, [r3, #24]
 8009968:	4313      	orrs	r3, r2
 800996a:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	22ca      	movs	r2, #202	@ 0xca
 8009972:	625a      	str	r2, [r3, #36]	@ 0x24
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	2253      	movs	r2, #83	@ 0x53
 800997a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800997c:	68bb      	ldr	r3, [r7, #8]
 800997e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009980:	2380      	movs	r3, #128	@ 0x80
 8009982:	005b      	lsls	r3, r3, #1
 8009984:	429a      	cmp	r2, r3
 8009986:	d14c      	bne.n	8009a22 <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	699a      	ldr	r2, [r3, #24]
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	4957      	ldr	r1, [pc, #348]	@ (8009af0 <HAL_RTC_SetAlarm_IT+0x274>)
 8009994:	400a      	ands	r2, r1
 8009996:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	2101      	movs	r1, #1
 80099a4:	430a      	orrs	r2, r1
 80099a6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 80099a8:	f7fd fef4 	bl	8007794 <HAL_GetTick>
 80099ac:	0003      	movs	r3, r0
 80099ae:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80099b0:	e016      	b.n	80099e0 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80099b2:	f7fd feef 	bl	8007794 <HAL_GetTick>
 80099b6:	0002      	movs	r2, r0
 80099b8:	697b      	ldr	r3, [r7, #20]
 80099ba:	1ad2      	subs	r2, r2, r3
 80099bc:	23fa      	movs	r3, #250	@ 0xfa
 80099be:	009b      	lsls	r3, r3, #2
 80099c0:	429a      	cmp	r2, r3
 80099c2:	d90d      	bls.n	80099e0 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	22ff      	movs	r2, #255	@ 0xff
 80099ca:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	2229      	movs	r2, #41	@ 0x29
 80099d0:	2103      	movs	r1, #3
 80099d2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	2228      	movs	r2, #40	@ 0x28
 80099d8:	2100      	movs	r1, #0
 80099da:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80099dc:	2303      	movs	r3, #3
 80099de:	e082      	b.n	8009ae6 <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	68db      	ldr	r3, [r3, #12]
 80099e6:	2201      	movs	r2, #1
 80099e8:	4013      	ands	r3, r2
 80099ea:	d0e2      	beq.n	80099b2 <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	69fa      	ldr	r2, [r7, #28]
 80099f2:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	69ba      	ldr	r2, [r7, #24]
 80099fa:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	699a      	ldr	r2, [r3, #24]
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	2180      	movs	r1, #128	@ 0x80
 8009a08:	0049      	lsls	r1, r1, #1
 8009a0a:	430a      	orrs	r2, r1
 8009a0c:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	699a      	ldr	r2, [r3, #24]
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	2180      	movs	r1, #128	@ 0x80
 8009a1a:	0149      	lsls	r1, r1, #5
 8009a1c:	430a      	orrs	r2, r1
 8009a1e:	619a      	str	r2, [r3, #24]
 8009a20:	e04b      	b.n	8009aba <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	699a      	ldr	r2, [r3, #24]
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	4931      	ldr	r1, [pc, #196]	@ (8009af4 <HAL_RTC_SetAlarm_IT+0x278>)
 8009a2e:	400a      	ands	r2, r1
 8009a30:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	2102      	movs	r1, #2
 8009a3e:	430a      	orrs	r2, r1
 8009a40:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 8009a42:	f7fd fea7 	bl	8007794 <HAL_GetTick>
 8009a46:	0003      	movs	r3, r0
 8009a48:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8009a4a:	e016      	b.n	8009a7a <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009a4c:	f7fd fea2 	bl	8007794 <HAL_GetTick>
 8009a50:	0002      	movs	r2, r0
 8009a52:	697b      	ldr	r3, [r7, #20]
 8009a54:	1ad2      	subs	r2, r2, r3
 8009a56:	23fa      	movs	r3, #250	@ 0xfa
 8009a58:	009b      	lsls	r3, r3, #2
 8009a5a:	429a      	cmp	r2, r3
 8009a5c:	d90d      	bls.n	8009a7a <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	22ff      	movs	r2, #255	@ 0xff
 8009a64:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	2229      	movs	r2, #41	@ 0x29
 8009a6a:	2103      	movs	r1, #3
 8009a6c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	2228      	movs	r2, #40	@ 0x28
 8009a72:	2100      	movs	r1, #0
 8009a74:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009a76:	2303      	movs	r3, #3
 8009a78:	e035      	b.n	8009ae6 <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	68db      	ldr	r3, [r3, #12]
 8009a80:	2202      	movs	r2, #2
 8009a82:	4013      	ands	r3, r2
 8009a84:	d0e2      	beq.n	8009a4c <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	69fa      	ldr	r2, [r7, #28]
 8009a8c:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	69ba      	ldr	r2, [r7, #24]
 8009a94:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	699a      	ldr	r2, [r3, #24]
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	2180      	movs	r1, #128	@ 0x80
 8009aa2:	0089      	lsls	r1, r1, #2
 8009aa4:	430a      	orrs	r2, r1
 8009aa6:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	699a      	ldr	r2, [r3, #24]
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	2180      	movs	r1, #128	@ 0x80
 8009ab4:	0189      	lsls	r1, r1, #6
 8009ab6:	430a      	orrs	r2, r1
 8009ab8:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8009aba:	4a0f      	ldr	r2, [pc, #60]	@ (8009af8 <HAL_RTC_SetAlarm_IT+0x27c>)
 8009abc:	2380      	movs	r3, #128	@ 0x80
 8009abe:	58d3      	ldr	r3, [r2, r3]
 8009ac0:	490d      	ldr	r1, [pc, #52]	@ (8009af8 <HAL_RTC_SetAlarm_IT+0x27c>)
 8009ac2:	2280      	movs	r2, #128	@ 0x80
 8009ac4:	0312      	lsls	r2, r2, #12
 8009ac6:	4313      	orrs	r3, r2
 8009ac8:	2280      	movs	r2, #128	@ 0x80
 8009aca:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	22ff      	movs	r2, #255	@ 0xff
 8009ad2:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	2229      	movs	r2, #41	@ 0x29
 8009ad8:	2101      	movs	r1, #1
 8009ada:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	2228      	movs	r2, #40	@ 0x28
 8009ae0:	2100      	movs	r1, #0
 8009ae2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009ae4:	2300      	movs	r3, #0
}
 8009ae6:	0018      	movs	r0, r3
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	b009      	add	sp, #36	@ 0x24
 8009aec:	bd90      	pop	{r4, r7, pc}
 8009aee:	46c0      	nop			@ (mov r8, r8)
 8009af0:	fffffeff 	.word	0xfffffeff
 8009af4:	fffffdff 	.word	0xfffffdff
 8009af8:	40021800 	.word	0x40021800

08009afc <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b086      	sub	sp, #24
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	60f8      	str	r0, [r7, #12]
 8009b04:	60b9      	str	r1, [r7, #8]
 8009b06:	607a      	str	r2, [r7, #4]
 8009b08:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if(Alarm == RTC_ALARM_A)
 8009b0a:	687a      	ldr	r2, [r7, #4]
 8009b0c:	2380      	movs	r3, #128	@ 0x80
 8009b0e:	005b      	lsls	r3, r3, #1
 8009b10:	429a      	cmp	r2, r3
 8009b12:	d144      	bne.n	8009b9e <HAL_RTC_GetAlarm+0xa2>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	2280      	movs	r2, #128	@ 0x80
 8009b18:	0052      	lsls	r2, r2, #1
 8009b1a:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b22:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR ) & RTC_ALRMASSR_SS);
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b2a:	045b      	lsls	r3, r3, #17
 8009b2c:	0c5b      	lsrs	r3, r3, #17
 8009b2e:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> RTC_ALRMAR_HU_Pos);
 8009b30:	697b      	ldr	r3, [r7, #20]
 8009b32:	0c1b      	lsrs	r3, r3, #16
 8009b34:	b2db      	uxtb	r3, r3
 8009b36:	223f      	movs	r2, #63	@ 0x3f
 8009b38:	4013      	ands	r3, r2
 8009b3a:	b2da      	uxtb	r2, r3
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 8009b40:	697b      	ldr	r3, [r7, #20]
 8009b42:	0a1b      	lsrs	r3, r3, #8
 8009b44:	b2db      	uxtb	r3, r3
 8009b46:	227f      	movs	r2, #127	@ 0x7f
 8009b48:	4013      	ands	r3, r2
 8009b4a:	b2da      	uxtb	r2, r3
 8009b4c:	68bb      	ldr	r3, [r7, #8]
 8009b4e:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU)) >> RTC_ALRMAR_SU_Pos);
 8009b50:	697b      	ldr	r3, [r7, #20]
 8009b52:	b2db      	uxtb	r3, r3
 8009b54:	227f      	movs	r2, #127	@ 0x7f
 8009b56:	4013      	ands	r3, r2
 8009b58:	b2da      	uxtb	r2, r3
 8009b5a:	68bb      	ldr	r3, [r7, #8]
 8009b5c:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMAR_PM) >> RTC_ALRMAR_PM_Pos);
 8009b5e:	697b      	ldr	r3, [r7, #20]
 8009b60:	0d9b      	lsrs	r3, r3, #22
 8009b62:	b2db      	uxtb	r3, r3
 8009b64:	2201      	movs	r2, #1
 8009b66:	4013      	ands	r3, r2
 8009b68:	b2da      	uxtb	r2, r3
 8009b6a:	68bb      	ldr	r3, [r7, #8]
 8009b6c:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8009b6e:	68bb      	ldr	r3, [r7, #8]
 8009b70:	693a      	ldr	r2, [r7, #16]
 8009b72:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> RTC_ALRMAR_DU_Pos);
 8009b74:	697b      	ldr	r3, [r7, #20]
 8009b76:	0e1b      	lsrs	r3, r3, #24
 8009b78:	b2db      	uxtb	r3, r3
 8009b7a:	223f      	movs	r2, #63	@ 0x3f
 8009b7c:	4013      	ands	r3, r2
 8009b7e:	b2d9      	uxtb	r1, r3
 8009b80:	68bb      	ldr	r3, [r7, #8]
 8009b82:	2220      	movs	r2, #32
 8009b84:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 8009b86:	697a      	ldr	r2, [r7, #20]
 8009b88:	2380      	movs	r3, #128	@ 0x80
 8009b8a:	05db      	lsls	r3, r3, #23
 8009b8c:	401a      	ands	r2, r3
 8009b8e:	68bb      	ldr	r3, [r7, #8]
 8009b90:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8009b92:	697b      	ldr	r3, [r7, #20]
 8009b94:	4a3b      	ldr	r2, [pc, #236]	@ (8009c84 <HAL_RTC_GetAlarm+0x188>)
 8009b96:	401a      	ands	r2, r3
 8009b98:	68bb      	ldr	r3, [r7, #8]
 8009b9a:	615a      	str	r2, [r3, #20]
 8009b9c:	e043      	b.n	8009c26 <HAL_RTC_GetAlarm+0x12a>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	2280      	movs	r2, #128	@ 0x80
 8009ba2:	0092      	lsls	r2, r2, #2
 8009ba4:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009bac:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009bb4:	045b      	lsls	r3, r3, #17
 8009bb6:	0c5b      	lsrs	r3, r3, #17
 8009bb8:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMBR_HT | RTC_ALRMBR_HU)) >> RTC_ALRMBR_HU_Pos);
 8009bba:	697b      	ldr	r3, [r7, #20]
 8009bbc:	0c1b      	lsrs	r3, r3, #16
 8009bbe:	b2db      	uxtb	r3, r3
 8009bc0:	223f      	movs	r2, #63	@ 0x3f
 8009bc2:	4013      	ands	r3, r2
 8009bc4:	b2da      	uxtb	r2, r3
 8009bc6:	68bb      	ldr	r3, [r7, #8]
 8009bc8:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> RTC_ALRMBR_MNU_Pos);
 8009bca:	697b      	ldr	r3, [r7, #20]
 8009bcc:	0a1b      	lsrs	r3, r3, #8
 8009bce:	b2db      	uxtb	r3, r3
 8009bd0:	227f      	movs	r2, #127	@ 0x7f
 8009bd2:	4013      	ands	r3, r2
 8009bd4:	b2da      	uxtb	r2, r3
 8009bd6:	68bb      	ldr	r3, [r7, #8]
 8009bd8:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMBR_ST | RTC_ALRMBR_SU)) >> RTC_ALRMBR_SU_Pos);
 8009bda:	697b      	ldr	r3, [r7, #20]
 8009bdc:	b2db      	uxtb	r3, r3
 8009bde:	227f      	movs	r2, #127	@ 0x7f
 8009be0:	4013      	ands	r3, r2
 8009be2:	b2da      	uxtb	r2, r3
 8009be4:	68bb      	ldr	r3, [r7, #8]
 8009be6:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMBR_PM) >> RTC_ALRMBR_PM_Pos);
 8009be8:	697b      	ldr	r3, [r7, #20]
 8009bea:	0d9b      	lsrs	r3, r3, #22
 8009bec:	b2db      	uxtb	r3, r3
 8009bee:	2201      	movs	r2, #1
 8009bf0:	4013      	ands	r3, r2
 8009bf2:	b2da      	uxtb	r2, r3
 8009bf4:	68bb      	ldr	r3, [r7, #8]
 8009bf6:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	693a      	ldr	r2, [r7, #16]
 8009bfc:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU)) >> RTC_ALRMBR_DU_Pos);
 8009bfe:	697b      	ldr	r3, [r7, #20]
 8009c00:	0e1b      	lsrs	r3, r3, #24
 8009c02:	b2db      	uxtb	r3, r3
 8009c04:	223f      	movs	r2, #63	@ 0x3f
 8009c06:	4013      	ands	r3, r2
 8009c08:	b2d9      	uxtb	r1, r3
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	2220      	movs	r2, #32
 8009c0e:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMBR_WDSEL);
 8009c10:	697a      	ldr	r2, [r7, #20]
 8009c12:	2380      	movs	r3, #128	@ 0x80
 8009c14:	05db      	lsls	r3, r3, #23
 8009c16:	401a      	ands	r2, r3
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8009c1c:	697b      	ldr	r3, [r7, #20]
 8009c1e:	4a19      	ldr	r2, [pc, #100]	@ (8009c84 <HAL_RTC_GetAlarm+0x188>)
 8009c20:	401a      	ands	r2, r3
 8009c22:	68bb      	ldr	r3, [r7, #8]
 8009c24:	615a      	str	r2, [r3, #20]
  }

  if(Format == RTC_FORMAT_BIN)
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d125      	bne.n	8009c78 <HAL_RTC_GetAlarm+0x17c>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	781b      	ldrb	r3, [r3, #0]
 8009c30:	0018      	movs	r0, r3
 8009c32:	f000 f88f 	bl	8009d54 <RTC_Bcd2ToByte>
 8009c36:	0003      	movs	r3, r0
 8009c38:	001a      	movs	r2, r3
 8009c3a:	68bb      	ldr	r3, [r7, #8]
 8009c3c:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 8009c3e:	68bb      	ldr	r3, [r7, #8]
 8009c40:	785b      	ldrb	r3, [r3, #1]
 8009c42:	0018      	movs	r0, r3
 8009c44:	f000 f886 	bl	8009d54 <RTC_Bcd2ToByte>
 8009c48:	0003      	movs	r3, r0
 8009c4a:	001a      	movs	r2, r3
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 8009c50:	68bb      	ldr	r3, [r7, #8]
 8009c52:	789b      	ldrb	r3, [r3, #2]
 8009c54:	0018      	movs	r0, r3
 8009c56:	f000 f87d 	bl	8009d54 <RTC_Bcd2ToByte>
 8009c5a:	0003      	movs	r3, r0
 8009c5c:	001a      	movs	r2, r3
 8009c5e:	68bb      	ldr	r3, [r7, #8]
 8009c60:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 8009c62:	68bb      	ldr	r3, [r7, #8]
 8009c64:	2220      	movs	r2, #32
 8009c66:	5c9b      	ldrb	r3, [r3, r2]
 8009c68:	0018      	movs	r0, r3
 8009c6a:	f000 f873 	bl	8009d54 <RTC_Bcd2ToByte>
 8009c6e:	0003      	movs	r3, r0
 8009c70:	0019      	movs	r1, r3
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	2220      	movs	r2, #32
 8009c76:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8009c78:	2300      	movs	r3, #0
}
 8009c7a:	0018      	movs	r0, r3
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	b006      	add	sp, #24
 8009c80:	bd80      	pop	{r7, pc}
 8009c82:	46c0      	nop			@ (mov r8, r8)
 8009c84:	80808080 	.word	0x80808080

08009c88 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b082      	sub	sp, #8
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	699a      	ldr	r2, [r3, #24]
 8009c96:	2380      	movs	r3, #128	@ 0x80
 8009c98:	015b      	lsls	r3, r3, #5
 8009c9a:	4013      	ands	r3, r2
 8009c9c:	d011      	beq.n	8009cc2 <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ca4:	2201      	movs	r2, #1
 8009ca6:	4013      	ands	r3, r2
 8009ca8:	d00b      	beq.n	8009cc2 <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	2101      	movs	r1, #1
 8009cb6:	430a      	orrs	r2, r1
 8009cb8:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	0018      	movs	r0, r3
 8009cbe:	f7fc f801 	bl	8005cc4 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	699a      	ldr	r2, [r3, #24]
 8009cc8:	2380      	movs	r3, #128	@ 0x80
 8009cca:	019b      	lsls	r3, r3, #6
 8009ccc:	4013      	ands	r3, r2
 8009cce:	d011      	beq.n	8009cf4 <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009cd6:	2202      	movs	r2, #2
 8009cd8:	4013      	ands	r3, r2
 8009cda:	d00b      	beq.n	8009cf4 <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	2102      	movs	r1, #2
 8009ce8:	430a      	orrs	r2, r1
 8009cea:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	0018      	movs	r0, r3
 8009cf0:	f000 f873 	bl	8009dda <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2229      	movs	r2, #41	@ 0x29
 8009cf8:	2101      	movs	r1, #1
 8009cfa:	5499      	strb	r1, [r3, r2]
}
 8009cfc:	46c0      	nop			@ (mov r8, r8)
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	b002      	add	sp, #8
 8009d02:	bd80      	pop	{r7, pc}

08009d04 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b084      	sub	sp, #16
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	0002      	movs	r2, r0
 8009d0c:	1dfb      	adds	r3, r7, #7
 8009d0e:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8009d10:	2300      	movs	r3, #0
 8009d12:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8009d14:	230b      	movs	r3, #11
 8009d16:	18fb      	adds	r3, r7, r3
 8009d18:	1dfa      	adds	r2, r7, #7
 8009d1a:	7812      	ldrb	r2, [r2, #0]
 8009d1c:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8009d1e:	e008      	b.n	8009d32 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	3301      	adds	r3, #1
 8009d24:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8009d26:	220b      	movs	r2, #11
 8009d28:	18bb      	adds	r3, r7, r2
 8009d2a:	18ba      	adds	r2, r7, r2
 8009d2c:	7812      	ldrb	r2, [r2, #0]
 8009d2e:	3a0a      	subs	r2, #10
 8009d30:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8009d32:	210b      	movs	r1, #11
 8009d34:	187b      	adds	r3, r7, r1
 8009d36:	781b      	ldrb	r3, [r3, #0]
 8009d38:	2b09      	cmp	r3, #9
 8009d3a:	d8f1      	bhi.n	8009d20 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	b2db      	uxtb	r3, r3
 8009d40:	011b      	lsls	r3, r3, #4
 8009d42:	b2da      	uxtb	r2, r3
 8009d44:	187b      	adds	r3, r7, r1
 8009d46:	781b      	ldrb	r3, [r3, #0]
 8009d48:	4313      	orrs	r3, r2
 8009d4a:	b2db      	uxtb	r3, r3
}
 8009d4c:	0018      	movs	r0, r3
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	b004      	add	sp, #16
 8009d52:	bd80      	pop	{r7, pc}

08009d54 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b084      	sub	sp, #16
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	0002      	movs	r2, r0
 8009d5c:	1dfb      	adds	r3, r7, #7
 8009d5e:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8009d60:	1dfb      	adds	r3, r7, #7
 8009d62:	781b      	ldrb	r3, [r3, #0]
 8009d64:	091b      	lsrs	r3, r3, #4
 8009d66:	b2db      	uxtb	r3, r3
 8009d68:	001a      	movs	r2, r3
 8009d6a:	0013      	movs	r3, r2
 8009d6c:	009b      	lsls	r3, r3, #2
 8009d6e:	189b      	adds	r3, r3, r2
 8009d70:	005b      	lsls	r3, r3, #1
 8009d72:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	b2da      	uxtb	r2, r3
 8009d78:	1dfb      	adds	r3, r7, #7
 8009d7a:	781b      	ldrb	r3, [r3, #0]
 8009d7c:	210f      	movs	r1, #15
 8009d7e:	400b      	ands	r3, r1
 8009d80:	b2db      	uxtb	r3, r3
 8009d82:	18d3      	adds	r3, r2, r3
 8009d84:	b2db      	uxtb	r3, r3
}
 8009d86:	0018      	movs	r0, r3
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	b004      	add	sp, #16
 8009d8c:	bd80      	pop	{r7, pc}

08009d8e <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8009d8e:	b580      	push	{r7, lr}
 8009d90:	b082      	sub	sp, #8
 8009d92:	af00      	add	r7, sp, #0
 8009d94:	6078      	str	r0, [r7, #4]
    /* Get the pending status of the WAKEUPTIMER Interrupt */
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d9c:	2204      	movs	r2, #4
 8009d9e:	4013      	ands	r3, r2
 8009da0:	d00b      	beq.n	8009dba <HAL_RTCEx_WakeUpTimerIRQHandler+0x2c>
    {
      /* Clear the WAKEUPTIMER interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	2104      	movs	r1, #4
 8009dae:	430a      	orrs	r2, r1
 8009db0:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call WakeUpTimerEvent registered Callback */
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      /* WAKEUPTIMER callback */
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	0018      	movs	r0, r3
 8009db6:	f000 f808 	bl	8009dca <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2229      	movs	r2, #41	@ 0x29
 8009dbe:	2101      	movs	r1, #1
 8009dc0:	5499      	strb	r1, [r3, r2]
}
 8009dc2:	46c0      	nop			@ (mov r8, r8)
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	b002      	add	sp, #8
 8009dc8:	bd80      	pop	{r7, pc}

08009dca <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8009dca:	b580      	push	{r7, lr}
 8009dcc:	b082      	sub	sp, #8
 8009dce:	af00      	add	r7, sp, #0
 8009dd0:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8009dd2:	46c0      	nop			@ (mov r8, r8)
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	b002      	add	sp, #8
 8009dd8:	bd80      	pop	{r7, pc}

08009dda <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8009dda:	b580      	push	{r7, lr}
 8009ddc:	b082      	sub	sp, #8
 8009dde:	af00      	add	r7, sp, #0
 8009de0:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8009de2:	46c0      	nop			@ (mov r8, r8)
 8009de4:	46bd      	mov	sp, r7
 8009de6:	b002      	add	sp, #8
 8009de8:	bd80      	pop	{r7, pc}
	...

08009dec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b084      	sub	sp, #16
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d101      	bne.n	8009dfe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	e0a8      	b.n	8009f50 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d109      	bne.n	8009e1a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	685a      	ldr	r2, [r3, #4]
 8009e0a:	2382      	movs	r3, #130	@ 0x82
 8009e0c:	005b      	lsls	r3, r3, #1
 8009e0e:	429a      	cmp	r2, r3
 8009e10:	d009      	beq.n	8009e26 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	2200      	movs	r2, #0
 8009e16:	61da      	str	r2, [r3, #28]
 8009e18:	e005      	b.n	8009e26 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2200      	movs	r2, #0
 8009e24:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	2200      	movs	r2, #0
 8009e2a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	225d      	movs	r2, #93	@ 0x5d
 8009e30:	5c9b      	ldrb	r3, [r3, r2]
 8009e32:	b2db      	uxtb	r3, r3
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d107      	bne.n	8009e48 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	225c      	movs	r2, #92	@ 0x5c
 8009e3c:	2100      	movs	r1, #0
 8009e3e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	0018      	movs	r0, r3
 8009e44:	f7fc fc54 	bl	80066f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	225d      	movs	r2, #93	@ 0x5d
 8009e4c:	2102      	movs	r1, #2
 8009e4e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	681a      	ldr	r2, [r3, #0]
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	2140      	movs	r1, #64	@ 0x40
 8009e5c:	438a      	bics	r2, r1
 8009e5e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	68da      	ldr	r2, [r3, #12]
 8009e64:	23e0      	movs	r3, #224	@ 0xe0
 8009e66:	00db      	lsls	r3, r3, #3
 8009e68:	429a      	cmp	r2, r3
 8009e6a:	d902      	bls.n	8009e72 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	60fb      	str	r3, [r7, #12]
 8009e70:	e002      	b.n	8009e78 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009e72:	2380      	movs	r3, #128	@ 0x80
 8009e74:	015b      	lsls	r3, r3, #5
 8009e76:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	68da      	ldr	r2, [r3, #12]
 8009e7c:	23f0      	movs	r3, #240	@ 0xf0
 8009e7e:	011b      	lsls	r3, r3, #4
 8009e80:	429a      	cmp	r2, r3
 8009e82:	d008      	beq.n	8009e96 <HAL_SPI_Init+0xaa>
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	68da      	ldr	r2, [r3, #12]
 8009e88:	23e0      	movs	r3, #224	@ 0xe0
 8009e8a:	00db      	lsls	r3, r3, #3
 8009e8c:	429a      	cmp	r2, r3
 8009e8e:	d002      	beq.n	8009e96 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2200      	movs	r2, #0
 8009e94:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	685a      	ldr	r2, [r3, #4]
 8009e9a:	2382      	movs	r3, #130	@ 0x82
 8009e9c:	005b      	lsls	r3, r3, #1
 8009e9e:	401a      	ands	r2, r3
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	6899      	ldr	r1, [r3, #8]
 8009ea4:	2384      	movs	r3, #132	@ 0x84
 8009ea6:	021b      	lsls	r3, r3, #8
 8009ea8:	400b      	ands	r3, r1
 8009eaa:	431a      	orrs	r2, r3
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	691b      	ldr	r3, [r3, #16]
 8009eb0:	2102      	movs	r1, #2
 8009eb2:	400b      	ands	r3, r1
 8009eb4:	431a      	orrs	r2, r3
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	695b      	ldr	r3, [r3, #20]
 8009eba:	2101      	movs	r1, #1
 8009ebc:	400b      	ands	r3, r1
 8009ebe:	431a      	orrs	r2, r3
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	6999      	ldr	r1, [r3, #24]
 8009ec4:	2380      	movs	r3, #128	@ 0x80
 8009ec6:	009b      	lsls	r3, r3, #2
 8009ec8:	400b      	ands	r3, r1
 8009eca:	431a      	orrs	r2, r3
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	69db      	ldr	r3, [r3, #28]
 8009ed0:	2138      	movs	r1, #56	@ 0x38
 8009ed2:	400b      	ands	r3, r1
 8009ed4:	431a      	orrs	r2, r3
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	6a1b      	ldr	r3, [r3, #32]
 8009eda:	2180      	movs	r1, #128	@ 0x80
 8009edc:	400b      	ands	r3, r1
 8009ede:	431a      	orrs	r2, r3
 8009ee0:	0011      	movs	r1, r2
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009ee6:	2380      	movs	r3, #128	@ 0x80
 8009ee8:	019b      	lsls	r3, r3, #6
 8009eea:	401a      	ands	r2, r3
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	430a      	orrs	r2, r1
 8009ef2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	699b      	ldr	r3, [r3, #24]
 8009ef8:	0c1b      	lsrs	r3, r3, #16
 8009efa:	2204      	movs	r2, #4
 8009efc:	401a      	ands	r2, r3
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f02:	2110      	movs	r1, #16
 8009f04:	400b      	ands	r3, r1
 8009f06:	431a      	orrs	r2, r3
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f0c:	2108      	movs	r1, #8
 8009f0e:	400b      	ands	r3, r1
 8009f10:	431a      	orrs	r2, r3
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	68d9      	ldr	r1, [r3, #12]
 8009f16:	23f0      	movs	r3, #240	@ 0xf0
 8009f18:	011b      	lsls	r3, r3, #4
 8009f1a:	400b      	ands	r3, r1
 8009f1c:	431a      	orrs	r2, r3
 8009f1e:	0011      	movs	r1, r2
 8009f20:	68fa      	ldr	r2, [r7, #12]
 8009f22:	2380      	movs	r3, #128	@ 0x80
 8009f24:	015b      	lsls	r3, r3, #5
 8009f26:	401a      	ands	r2, r3
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	430a      	orrs	r2, r1
 8009f2e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	69da      	ldr	r2, [r3, #28]
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	4907      	ldr	r1, [pc, #28]	@ (8009f58 <HAL_SPI_Init+0x16c>)
 8009f3c:	400a      	ands	r2, r1
 8009f3e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2200      	movs	r2, #0
 8009f44:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	225d      	movs	r2, #93	@ 0x5d
 8009f4a:	2101      	movs	r1, #1
 8009f4c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009f4e:	2300      	movs	r3, #0
}
 8009f50:	0018      	movs	r0, r3
 8009f52:	46bd      	mov	sp, r7
 8009f54:	b004      	add	sp, #16
 8009f56:	bd80      	pop	{r7, pc}
 8009f58:	fffff7ff 	.word	0xfffff7ff

08009f5c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b088      	sub	sp, #32
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	60f8      	str	r0, [r7, #12]
 8009f64:	60b9      	str	r1, [r7, #8]
 8009f66:	603b      	str	r3, [r7, #0]
 8009f68:	1dbb      	adds	r3, r7, #6
 8009f6a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009f6c:	231f      	movs	r3, #31
 8009f6e:	18fb      	adds	r3, r7, r3
 8009f70:	2200      	movs	r2, #0
 8009f72:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	225c      	movs	r2, #92	@ 0x5c
 8009f78:	5c9b      	ldrb	r3, [r3, r2]
 8009f7a:	2b01      	cmp	r3, #1
 8009f7c:	d101      	bne.n	8009f82 <HAL_SPI_Transmit+0x26>
 8009f7e:	2302      	movs	r3, #2
 8009f80:	e147      	b.n	800a212 <HAL_SPI_Transmit+0x2b6>
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	225c      	movs	r2, #92	@ 0x5c
 8009f86:	2101      	movs	r1, #1
 8009f88:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009f8a:	f7fd fc03 	bl	8007794 <HAL_GetTick>
 8009f8e:	0003      	movs	r3, r0
 8009f90:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8009f92:	2316      	movs	r3, #22
 8009f94:	18fb      	adds	r3, r7, r3
 8009f96:	1dba      	adds	r2, r7, #6
 8009f98:	8812      	ldrh	r2, [r2, #0]
 8009f9a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	225d      	movs	r2, #93	@ 0x5d
 8009fa0:	5c9b      	ldrb	r3, [r3, r2]
 8009fa2:	b2db      	uxtb	r3, r3
 8009fa4:	2b01      	cmp	r3, #1
 8009fa6:	d004      	beq.n	8009fb2 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8009fa8:	231f      	movs	r3, #31
 8009faa:	18fb      	adds	r3, r7, r3
 8009fac:	2202      	movs	r2, #2
 8009fae:	701a      	strb	r2, [r3, #0]
    goto error;
 8009fb0:	e128      	b.n	800a204 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8009fb2:	68bb      	ldr	r3, [r7, #8]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d003      	beq.n	8009fc0 <HAL_SPI_Transmit+0x64>
 8009fb8:	1dbb      	adds	r3, r7, #6
 8009fba:	881b      	ldrh	r3, [r3, #0]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d104      	bne.n	8009fca <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8009fc0:	231f      	movs	r3, #31
 8009fc2:	18fb      	adds	r3, r7, r3
 8009fc4:	2201      	movs	r2, #1
 8009fc6:	701a      	strb	r2, [r3, #0]
    goto error;
 8009fc8:	e11c      	b.n	800a204 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	225d      	movs	r2, #93	@ 0x5d
 8009fce:	2103      	movs	r1, #3
 8009fd0:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	68ba      	ldr	r2, [r7, #8]
 8009fdc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	1dba      	adds	r2, r7, #6
 8009fe2:	8812      	ldrh	r2, [r2, #0]
 8009fe4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	1dba      	adds	r2, r7, #6
 8009fea:	8812      	ldrh	r2, [r2, #0]
 8009fec:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	2244      	movs	r2, #68	@ 0x44
 8009ff8:	2100      	movs	r1, #0
 8009ffa:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	2246      	movs	r2, #70	@ 0x46
 800a000:	2100      	movs	r1, #0
 800a002:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	2200      	movs	r2, #0
 800a008:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	2200      	movs	r2, #0
 800a00e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	689a      	ldr	r2, [r3, #8]
 800a014:	2380      	movs	r3, #128	@ 0x80
 800a016:	021b      	lsls	r3, r3, #8
 800a018:	429a      	cmp	r2, r3
 800a01a:	d110      	bne.n	800a03e <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	681a      	ldr	r2, [r3, #0]
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	2140      	movs	r1, #64	@ 0x40
 800a028:	438a      	bics	r2, r1
 800a02a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	681a      	ldr	r2, [r3, #0]
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	2180      	movs	r1, #128	@ 0x80
 800a038:	01c9      	lsls	r1, r1, #7
 800a03a:	430a      	orrs	r2, r1
 800a03c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	2240      	movs	r2, #64	@ 0x40
 800a046:	4013      	ands	r3, r2
 800a048:	2b40      	cmp	r3, #64	@ 0x40
 800a04a:	d007      	beq.n	800a05c <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	681a      	ldr	r2, [r3, #0]
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	2140      	movs	r1, #64	@ 0x40
 800a058:	430a      	orrs	r2, r1
 800a05a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	68da      	ldr	r2, [r3, #12]
 800a060:	23e0      	movs	r3, #224	@ 0xe0
 800a062:	00db      	lsls	r3, r3, #3
 800a064:	429a      	cmp	r2, r3
 800a066:	d952      	bls.n	800a10e <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	685b      	ldr	r3, [r3, #4]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d004      	beq.n	800a07a <HAL_SPI_Transmit+0x11e>
 800a070:	2316      	movs	r3, #22
 800a072:	18fb      	adds	r3, r7, r3
 800a074:	881b      	ldrh	r3, [r3, #0]
 800a076:	2b01      	cmp	r3, #1
 800a078:	d143      	bne.n	800a102 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a07e:	881a      	ldrh	r2, [r3, #0]
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a08a:	1c9a      	adds	r2, r3, #2
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a094:	b29b      	uxth	r3, r3
 800a096:	3b01      	subs	r3, #1
 800a098:	b29a      	uxth	r2, r3
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a09e:	e030      	b.n	800a102 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	689b      	ldr	r3, [r3, #8]
 800a0a6:	2202      	movs	r2, #2
 800a0a8:	4013      	ands	r3, r2
 800a0aa:	2b02      	cmp	r3, #2
 800a0ac:	d112      	bne.n	800a0d4 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0b2:	881a      	ldrh	r2, [r3, #0]
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0be:	1c9a      	adds	r2, r3, #2
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a0c8:	b29b      	uxth	r3, r3
 800a0ca:	3b01      	subs	r3, #1
 800a0cc:	b29a      	uxth	r2, r3
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a0d2:	e016      	b.n	800a102 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a0d4:	f7fd fb5e 	bl	8007794 <HAL_GetTick>
 800a0d8:	0002      	movs	r2, r0
 800a0da:	69bb      	ldr	r3, [r7, #24]
 800a0dc:	1ad3      	subs	r3, r2, r3
 800a0de:	683a      	ldr	r2, [r7, #0]
 800a0e0:	429a      	cmp	r2, r3
 800a0e2:	d802      	bhi.n	800a0ea <HAL_SPI_Transmit+0x18e>
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	3301      	adds	r3, #1
 800a0e8:	d102      	bne.n	800a0f0 <HAL_SPI_Transmit+0x194>
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d108      	bne.n	800a102 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 800a0f0:	231f      	movs	r3, #31
 800a0f2:	18fb      	adds	r3, r7, r3
 800a0f4:	2203      	movs	r2, #3
 800a0f6:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	225d      	movs	r2, #93	@ 0x5d
 800a0fc:	2101      	movs	r1, #1
 800a0fe:	5499      	strb	r1, [r3, r2]
          goto error;
 800a100:	e080      	b.n	800a204 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a106:	b29b      	uxth	r3, r3
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d1c9      	bne.n	800a0a0 <HAL_SPI_Transmit+0x144>
 800a10c:	e053      	b.n	800a1b6 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	685b      	ldr	r3, [r3, #4]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d004      	beq.n	800a120 <HAL_SPI_Transmit+0x1c4>
 800a116:	2316      	movs	r3, #22
 800a118:	18fb      	adds	r3, r7, r3
 800a11a:	881b      	ldrh	r3, [r3, #0]
 800a11c:	2b01      	cmp	r3, #1
 800a11e:	d145      	bne.n	800a1ac <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	330c      	adds	r3, #12
 800a12a:	7812      	ldrb	r2, [r2, #0]
 800a12c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a132:	1c5a      	adds	r2, r3, #1
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a13c:	b29b      	uxth	r3, r3
 800a13e:	3b01      	subs	r3, #1
 800a140:	b29a      	uxth	r2, r3
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800a146:	e031      	b.n	800a1ac <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	689b      	ldr	r3, [r3, #8]
 800a14e:	2202      	movs	r2, #2
 800a150:	4013      	ands	r3, r2
 800a152:	2b02      	cmp	r3, #2
 800a154:	d113      	bne.n	800a17e <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	330c      	adds	r3, #12
 800a160:	7812      	ldrb	r2, [r2, #0]
 800a162:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a168:	1c5a      	adds	r2, r3, #1
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a172:	b29b      	uxth	r3, r3
 800a174:	3b01      	subs	r3, #1
 800a176:	b29a      	uxth	r2, r3
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a17c:	e016      	b.n	800a1ac <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a17e:	f7fd fb09 	bl	8007794 <HAL_GetTick>
 800a182:	0002      	movs	r2, r0
 800a184:	69bb      	ldr	r3, [r7, #24]
 800a186:	1ad3      	subs	r3, r2, r3
 800a188:	683a      	ldr	r2, [r7, #0]
 800a18a:	429a      	cmp	r2, r3
 800a18c:	d802      	bhi.n	800a194 <HAL_SPI_Transmit+0x238>
 800a18e:	683b      	ldr	r3, [r7, #0]
 800a190:	3301      	adds	r3, #1
 800a192:	d102      	bne.n	800a19a <HAL_SPI_Transmit+0x23e>
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d108      	bne.n	800a1ac <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 800a19a:	231f      	movs	r3, #31
 800a19c:	18fb      	adds	r3, r7, r3
 800a19e:	2203      	movs	r2, #3
 800a1a0:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	225d      	movs	r2, #93	@ 0x5d
 800a1a6:	2101      	movs	r1, #1
 800a1a8:	5499      	strb	r1, [r3, r2]
          goto error;
 800a1aa:	e02b      	b.n	800a204 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a1b0:	b29b      	uxth	r3, r3
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d1c8      	bne.n	800a148 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a1b6:	69ba      	ldr	r2, [r7, #24]
 800a1b8:	6839      	ldr	r1, [r7, #0]
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	0018      	movs	r0, r3
 800a1be:	f000 f95d 	bl	800a47c <SPI_EndRxTxTransaction>
 800a1c2:	1e03      	subs	r3, r0, #0
 800a1c4:	d002      	beq.n	800a1cc <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	2220      	movs	r2, #32
 800a1ca:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	689b      	ldr	r3, [r3, #8]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d10a      	bne.n	800a1ea <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	613b      	str	r3, [r7, #16]
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	68db      	ldr	r3, [r3, #12]
 800a1de:	613b      	str	r3, [r7, #16]
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	689b      	ldr	r3, [r3, #8]
 800a1e6:	613b      	str	r3, [r7, #16]
 800a1e8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d004      	beq.n	800a1fc <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 800a1f2:	231f      	movs	r3, #31
 800a1f4:	18fb      	adds	r3, r7, r3
 800a1f6:	2201      	movs	r2, #1
 800a1f8:	701a      	strb	r2, [r3, #0]
 800a1fa:	e003      	b.n	800a204 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	225d      	movs	r2, #93	@ 0x5d
 800a200:	2101      	movs	r1, #1
 800a202:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	225c      	movs	r2, #92	@ 0x5c
 800a208:	2100      	movs	r1, #0
 800a20a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800a20c:	231f      	movs	r3, #31
 800a20e:	18fb      	adds	r3, r7, r3
 800a210:	781b      	ldrb	r3, [r3, #0]
}
 800a212:	0018      	movs	r0, r3
 800a214:	46bd      	mov	sp, r7
 800a216:	b008      	add	sp, #32
 800a218:	bd80      	pop	{r7, pc}
	...

0800a21c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b088      	sub	sp, #32
 800a220:	af00      	add	r7, sp, #0
 800a222:	60f8      	str	r0, [r7, #12]
 800a224:	60b9      	str	r1, [r7, #8]
 800a226:	603b      	str	r3, [r7, #0]
 800a228:	1dfb      	adds	r3, r7, #7
 800a22a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a22c:	f7fd fab2 	bl	8007794 <HAL_GetTick>
 800a230:	0002      	movs	r2, r0
 800a232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a234:	1a9b      	subs	r3, r3, r2
 800a236:	683a      	ldr	r2, [r7, #0]
 800a238:	18d3      	adds	r3, r2, r3
 800a23a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a23c:	f7fd faaa 	bl	8007794 <HAL_GetTick>
 800a240:	0003      	movs	r3, r0
 800a242:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a244:	4b3a      	ldr	r3, [pc, #232]	@ (800a330 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	015b      	lsls	r3, r3, #5
 800a24a:	0d1b      	lsrs	r3, r3, #20
 800a24c:	69fa      	ldr	r2, [r7, #28]
 800a24e:	4353      	muls	r3, r2
 800a250:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a252:	e058      	b.n	800a306 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	3301      	adds	r3, #1
 800a258:	d055      	beq.n	800a306 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a25a:	f7fd fa9b 	bl	8007794 <HAL_GetTick>
 800a25e:	0002      	movs	r2, r0
 800a260:	69bb      	ldr	r3, [r7, #24]
 800a262:	1ad3      	subs	r3, r2, r3
 800a264:	69fa      	ldr	r2, [r7, #28]
 800a266:	429a      	cmp	r2, r3
 800a268:	d902      	bls.n	800a270 <SPI_WaitFlagStateUntilTimeout+0x54>
 800a26a:	69fb      	ldr	r3, [r7, #28]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d142      	bne.n	800a2f6 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	685a      	ldr	r2, [r3, #4]
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	21e0      	movs	r1, #224	@ 0xe0
 800a27c:	438a      	bics	r2, r1
 800a27e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	685a      	ldr	r2, [r3, #4]
 800a284:	2382      	movs	r3, #130	@ 0x82
 800a286:	005b      	lsls	r3, r3, #1
 800a288:	429a      	cmp	r2, r3
 800a28a:	d113      	bne.n	800a2b4 <SPI_WaitFlagStateUntilTimeout+0x98>
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	689a      	ldr	r2, [r3, #8]
 800a290:	2380      	movs	r3, #128	@ 0x80
 800a292:	021b      	lsls	r3, r3, #8
 800a294:	429a      	cmp	r2, r3
 800a296:	d005      	beq.n	800a2a4 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	689a      	ldr	r2, [r3, #8]
 800a29c:	2380      	movs	r3, #128	@ 0x80
 800a29e:	00db      	lsls	r3, r3, #3
 800a2a0:	429a      	cmp	r2, r3
 800a2a2:	d107      	bne.n	800a2b4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	681a      	ldr	r2, [r3, #0]
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	2140      	movs	r1, #64	@ 0x40
 800a2b0:	438a      	bics	r2, r1
 800a2b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a2b8:	2380      	movs	r3, #128	@ 0x80
 800a2ba:	019b      	lsls	r3, r3, #6
 800a2bc:	429a      	cmp	r2, r3
 800a2be:	d110      	bne.n	800a2e2 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	681a      	ldr	r2, [r3, #0]
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	491a      	ldr	r1, [pc, #104]	@ (800a334 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800a2cc:	400a      	ands	r2, r1
 800a2ce:	601a      	str	r2, [r3, #0]
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	681a      	ldr	r2, [r3, #0]
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	2180      	movs	r1, #128	@ 0x80
 800a2dc:	0189      	lsls	r1, r1, #6
 800a2de:	430a      	orrs	r2, r1
 800a2e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	225d      	movs	r2, #93	@ 0x5d
 800a2e6:	2101      	movs	r1, #1
 800a2e8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	225c      	movs	r2, #92	@ 0x5c
 800a2ee:	2100      	movs	r1, #0
 800a2f0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800a2f2:	2303      	movs	r3, #3
 800a2f4:	e017      	b.n	800a326 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a2f6:	697b      	ldr	r3, [r7, #20]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d101      	bne.n	800a300 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a300:	697b      	ldr	r3, [r7, #20]
 800a302:	3b01      	subs	r3, #1
 800a304:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	689b      	ldr	r3, [r3, #8]
 800a30c:	68ba      	ldr	r2, [r7, #8]
 800a30e:	4013      	ands	r3, r2
 800a310:	68ba      	ldr	r2, [r7, #8]
 800a312:	1ad3      	subs	r3, r2, r3
 800a314:	425a      	negs	r2, r3
 800a316:	4153      	adcs	r3, r2
 800a318:	b2db      	uxtb	r3, r3
 800a31a:	001a      	movs	r2, r3
 800a31c:	1dfb      	adds	r3, r7, #7
 800a31e:	781b      	ldrb	r3, [r3, #0]
 800a320:	429a      	cmp	r2, r3
 800a322:	d197      	bne.n	800a254 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a324:	2300      	movs	r3, #0
}
 800a326:	0018      	movs	r0, r3
 800a328:	46bd      	mov	sp, r7
 800a32a:	b008      	add	sp, #32
 800a32c:	bd80      	pop	{r7, pc}
 800a32e:	46c0      	nop			@ (mov r8, r8)
 800a330:	200009c8 	.word	0x200009c8
 800a334:	ffffdfff 	.word	0xffffdfff

0800a338 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b08a      	sub	sp, #40	@ 0x28
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	60f8      	str	r0, [r7, #12]
 800a340:	60b9      	str	r1, [r7, #8]
 800a342:	607a      	str	r2, [r7, #4]
 800a344:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800a346:	2317      	movs	r3, #23
 800a348:	18fb      	adds	r3, r7, r3
 800a34a:	2200      	movs	r2, #0
 800a34c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800a34e:	f7fd fa21 	bl	8007794 <HAL_GetTick>
 800a352:	0002      	movs	r2, r0
 800a354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a356:	1a9b      	subs	r3, r3, r2
 800a358:	683a      	ldr	r2, [r7, #0]
 800a35a:	18d3      	adds	r3, r2, r3
 800a35c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800a35e:	f7fd fa19 	bl	8007794 <HAL_GetTick>
 800a362:	0003      	movs	r3, r0
 800a364:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	330c      	adds	r3, #12
 800a36c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800a36e:	4b41      	ldr	r3, [pc, #260]	@ (800a474 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 800a370:	681a      	ldr	r2, [r3, #0]
 800a372:	0013      	movs	r3, r2
 800a374:	009b      	lsls	r3, r3, #2
 800a376:	189b      	adds	r3, r3, r2
 800a378:	00da      	lsls	r2, r3, #3
 800a37a:	1ad3      	subs	r3, r2, r3
 800a37c:	0d1b      	lsrs	r3, r3, #20
 800a37e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a380:	4353      	muls	r3, r2
 800a382:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800a384:	e068      	b.n	800a458 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800a386:	68ba      	ldr	r2, [r7, #8]
 800a388:	23c0      	movs	r3, #192	@ 0xc0
 800a38a:	00db      	lsls	r3, r3, #3
 800a38c:	429a      	cmp	r2, r3
 800a38e:	d10a      	bne.n	800a3a6 <SPI_WaitFifoStateUntilTimeout+0x6e>
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d107      	bne.n	800a3a6 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800a396:	69fb      	ldr	r3, [r7, #28]
 800a398:	781b      	ldrb	r3, [r3, #0]
 800a39a:	b2da      	uxtb	r2, r3
 800a39c:	2117      	movs	r1, #23
 800a39e:	187b      	adds	r3, r7, r1
 800a3a0:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800a3a2:	187b      	adds	r3, r7, r1
 800a3a4:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800a3a6:	683b      	ldr	r3, [r7, #0]
 800a3a8:	3301      	adds	r3, #1
 800a3aa:	d055      	beq.n	800a458 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a3ac:	f7fd f9f2 	bl	8007794 <HAL_GetTick>
 800a3b0:	0002      	movs	r2, r0
 800a3b2:	6a3b      	ldr	r3, [r7, #32]
 800a3b4:	1ad3      	subs	r3, r2, r3
 800a3b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a3b8:	429a      	cmp	r2, r3
 800a3ba:	d902      	bls.n	800a3c2 <SPI_WaitFifoStateUntilTimeout+0x8a>
 800a3bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d142      	bne.n	800a448 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	685a      	ldr	r2, [r3, #4]
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	21e0      	movs	r1, #224	@ 0xe0
 800a3ce:	438a      	bics	r2, r1
 800a3d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	685a      	ldr	r2, [r3, #4]
 800a3d6:	2382      	movs	r3, #130	@ 0x82
 800a3d8:	005b      	lsls	r3, r3, #1
 800a3da:	429a      	cmp	r2, r3
 800a3dc:	d113      	bne.n	800a406 <SPI_WaitFifoStateUntilTimeout+0xce>
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	689a      	ldr	r2, [r3, #8]
 800a3e2:	2380      	movs	r3, #128	@ 0x80
 800a3e4:	021b      	lsls	r3, r3, #8
 800a3e6:	429a      	cmp	r2, r3
 800a3e8:	d005      	beq.n	800a3f6 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	689a      	ldr	r2, [r3, #8]
 800a3ee:	2380      	movs	r3, #128	@ 0x80
 800a3f0:	00db      	lsls	r3, r3, #3
 800a3f2:	429a      	cmp	r2, r3
 800a3f4:	d107      	bne.n	800a406 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	681a      	ldr	r2, [r3, #0]
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	2140      	movs	r1, #64	@ 0x40
 800a402:	438a      	bics	r2, r1
 800a404:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a40a:	2380      	movs	r3, #128	@ 0x80
 800a40c:	019b      	lsls	r3, r3, #6
 800a40e:	429a      	cmp	r2, r3
 800a410:	d110      	bne.n	800a434 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	681a      	ldr	r2, [r3, #0]
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	4916      	ldr	r1, [pc, #88]	@ (800a478 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800a41e:	400a      	ands	r2, r1
 800a420:	601a      	str	r2, [r3, #0]
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	681a      	ldr	r2, [r3, #0]
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	2180      	movs	r1, #128	@ 0x80
 800a42e:	0189      	lsls	r1, r1, #6
 800a430:	430a      	orrs	r2, r1
 800a432:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	225d      	movs	r2, #93	@ 0x5d
 800a438:	2101      	movs	r1, #1
 800a43a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	225c      	movs	r2, #92	@ 0x5c
 800a440:	2100      	movs	r1, #0
 800a442:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800a444:	2303      	movs	r3, #3
 800a446:	e010      	b.n	800a46a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a448:	69bb      	ldr	r3, [r7, #24]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d101      	bne.n	800a452 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800a44e:	2300      	movs	r3, #0
 800a450:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800a452:	69bb      	ldr	r3, [r7, #24]
 800a454:	3b01      	subs	r3, #1
 800a456:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	689b      	ldr	r3, [r3, #8]
 800a45e:	68ba      	ldr	r2, [r7, #8]
 800a460:	4013      	ands	r3, r2
 800a462:	687a      	ldr	r2, [r7, #4]
 800a464:	429a      	cmp	r2, r3
 800a466:	d18e      	bne.n	800a386 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800a468:	2300      	movs	r3, #0
}
 800a46a:	0018      	movs	r0, r3
 800a46c:	46bd      	mov	sp, r7
 800a46e:	b00a      	add	sp, #40	@ 0x28
 800a470:	bd80      	pop	{r7, pc}
 800a472:	46c0      	nop			@ (mov r8, r8)
 800a474:	200009c8 	.word	0x200009c8
 800a478:	ffffdfff 	.word	0xffffdfff

0800a47c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b086      	sub	sp, #24
 800a480:	af02      	add	r7, sp, #8
 800a482:	60f8      	str	r0, [r7, #12]
 800a484:	60b9      	str	r1, [r7, #8]
 800a486:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a488:	68ba      	ldr	r2, [r7, #8]
 800a48a:	23c0      	movs	r3, #192	@ 0xc0
 800a48c:	0159      	lsls	r1, r3, #5
 800a48e:	68f8      	ldr	r0, [r7, #12]
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	9300      	str	r3, [sp, #0]
 800a494:	0013      	movs	r3, r2
 800a496:	2200      	movs	r2, #0
 800a498:	f7ff ff4e 	bl	800a338 <SPI_WaitFifoStateUntilTimeout>
 800a49c:	1e03      	subs	r3, r0, #0
 800a49e:	d007      	beq.n	800a4b0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a4a4:	2220      	movs	r2, #32
 800a4a6:	431a      	orrs	r2, r3
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a4ac:	2303      	movs	r3, #3
 800a4ae:	e027      	b.n	800a500 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a4b0:	68ba      	ldr	r2, [r7, #8]
 800a4b2:	68f8      	ldr	r0, [r7, #12]
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	9300      	str	r3, [sp, #0]
 800a4b8:	0013      	movs	r3, r2
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	2180      	movs	r1, #128	@ 0x80
 800a4be:	f7ff fead 	bl	800a21c <SPI_WaitFlagStateUntilTimeout>
 800a4c2:	1e03      	subs	r3, r0, #0
 800a4c4:	d007      	beq.n	800a4d6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a4ca:	2220      	movs	r2, #32
 800a4cc:	431a      	orrs	r2, r3
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a4d2:	2303      	movs	r3, #3
 800a4d4:	e014      	b.n	800a500 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a4d6:	68ba      	ldr	r2, [r7, #8]
 800a4d8:	23c0      	movs	r3, #192	@ 0xc0
 800a4da:	00d9      	lsls	r1, r3, #3
 800a4dc:	68f8      	ldr	r0, [r7, #12]
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	9300      	str	r3, [sp, #0]
 800a4e2:	0013      	movs	r3, r2
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	f7ff ff27 	bl	800a338 <SPI_WaitFifoStateUntilTimeout>
 800a4ea:	1e03      	subs	r3, r0, #0
 800a4ec:	d007      	beq.n	800a4fe <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a4f2:	2220      	movs	r2, #32
 800a4f4:	431a      	orrs	r2, r3
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a4fa:	2303      	movs	r3, #3
 800a4fc:	e000      	b.n	800a500 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800a4fe:	2300      	movs	r3, #0
}
 800a500:	0018      	movs	r0, r3
 800a502:	46bd      	mov	sp, r7
 800a504:	b004      	add	sp, #16
 800a506:	bd80      	pop	{r7, pc}

0800a508 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b082      	sub	sp, #8
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d101      	bne.n	800a51a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a516:	2301      	movs	r3, #1
 800a518:	e04a      	b.n	800a5b0 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	223d      	movs	r2, #61	@ 0x3d
 800a51e:	5c9b      	ldrb	r3, [r3, r2]
 800a520:	b2db      	uxtb	r3, r3
 800a522:	2b00      	cmp	r3, #0
 800a524:	d107      	bne.n	800a536 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	223c      	movs	r2, #60	@ 0x3c
 800a52a:	2100      	movs	r1, #0
 800a52c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	0018      	movs	r0, r3
 800a532:	f7fc f94b 	bl	80067cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	223d      	movs	r2, #61	@ 0x3d
 800a53a:	2102      	movs	r1, #2
 800a53c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681a      	ldr	r2, [r3, #0]
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	3304      	adds	r3, #4
 800a546:	0019      	movs	r1, r3
 800a548:	0010      	movs	r0, r2
 800a54a:	f000 fb11 	bl	800ab70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	2248      	movs	r2, #72	@ 0x48
 800a552:	2101      	movs	r1, #1
 800a554:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	223e      	movs	r2, #62	@ 0x3e
 800a55a:	2101      	movs	r1, #1
 800a55c:	5499      	strb	r1, [r3, r2]
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	223f      	movs	r2, #63	@ 0x3f
 800a562:	2101      	movs	r1, #1
 800a564:	5499      	strb	r1, [r3, r2]
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2240      	movs	r2, #64	@ 0x40
 800a56a:	2101      	movs	r1, #1
 800a56c:	5499      	strb	r1, [r3, r2]
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	2241      	movs	r2, #65	@ 0x41
 800a572:	2101      	movs	r1, #1
 800a574:	5499      	strb	r1, [r3, r2]
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	2242      	movs	r2, #66	@ 0x42
 800a57a:	2101      	movs	r1, #1
 800a57c:	5499      	strb	r1, [r3, r2]
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	2243      	movs	r2, #67	@ 0x43
 800a582:	2101      	movs	r1, #1
 800a584:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2244      	movs	r2, #68	@ 0x44
 800a58a:	2101      	movs	r1, #1
 800a58c:	5499      	strb	r1, [r3, r2]
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2245      	movs	r2, #69	@ 0x45
 800a592:	2101      	movs	r1, #1
 800a594:	5499      	strb	r1, [r3, r2]
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	2246      	movs	r2, #70	@ 0x46
 800a59a:	2101      	movs	r1, #1
 800a59c:	5499      	strb	r1, [r3, r2]
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	2247      	movs	r2, #71	@ 0x47
 800a5a2:	2101      	movs	r1, #1
 800a5a4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	223d      	movs	r2, #61	@ 0x3d
 800a5aa:	2101      	movs	r1, #1
 800a5ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a5ae:	2300      	movs	r3, #0
}
 800a5b0:	0018      	movs	r0, r3
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	b002      	add	sp, #8
 800a5b6:	bd80      	pop	{r7, pc}

0800a5b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b082      	sub	sp, #8
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d101      	bne.n	800a5ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a5c6:	2301      	movs	r3, #1
 800a5c8:	e04a      	b.n	800a660 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	223d      	movs	r2, #61	@ 0x3d
 800a5ce:	5c9b      	ldrb	r3, [r3, r2]
 800a5d0:	b2db      	uxtb	r3, r3
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d107      	bne.n	800a5e6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	223c      	movs	r2, #60	@ 0x3c
 800a5da:	2100      	movs	r1, #0
 800a5dc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	0018      	movs	r0, r3
 800a5e2:	f000 f841 	bl	800a668 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	223d      	movs	r2, #61	@ 0x3d
 800a5ea:	2102      	movs	r1, #2
 800a5ec:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681a      	ldr	r2, [r3, #0]
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	3304      	adds	r3, #4
 800a5f6:	0019      	movs	r1, r3
 800a5f8:	0010      	movs	r0, r2
 800a5fa:	f000 fab9 	bl	800ab70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2248      	movs	r2, #72	@ 0x48
 800a602:	2101      	movs	r1, #1
 800a604:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	223e      	movs	r2, #62	@ 0x3e
 800a60a:	2101      	movs	r1, #1
 800a60c:	5499      	strb	r1, [r3, r2]
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	223f      	movs	r2, #63	@ 0x3f
 800a612:	2101      	movs	r1, #1
 800a614:	5499      	strb	r1, [r3, r2]
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	2240      	movs	r2, #64	@ 0x40
 800a61a:	2101      	movs	r1, #1
 800a61c:	5499      	strb	r1, [r3, r2]
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2241      	movs	r2, #65	@ 0x41
 800a622:	2101      	movs	r1, #1
 800a624:	5499      	strb	r1, [r3, r2]
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2242      	movs	r2, #66	@ 0x42
 800a62a:	2101      	movs	r1, #1
 800a62c:	5499      	strb	r1, [r3, r2]
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	2243      	movs	r2, #67	@ 0x43
 800a632:	2101      	movs	r1, #1
 800a634:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	2244      	movs	r2, #68	@ 0x44
 800a63a:	2101      	movs	r1, #1
 800a63c:	5499      	strb	r1, [r3, r2]
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	2245      	movs	r2, #69	@ 0x45
 800a642:	2101      	movs	r1, #1
 800a644:	5499      	strb	r1, [r3, r2]
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	2246      	movs	r2, #70	@ 0x46
 800a64a:	2101      	movs	r1, #1
 800a64c:	5499      	strb	r1, [r3, r2]
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	2247      	movs	r2, #71	@ 0x47
 800a652:	2101      	movs	r1, #1
 800a654:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	223d      	movs	r2, #61	@ 0x3d
 800a65a:	2101      	movs	r1, #1
 800a65c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a65e:	2300      	movs	r3, #0
}
 800a660:	0018      	movs	r0, r3
 800a662:	46bd      	mov	sp, r7
 800a664:	b002      	add	sp, #8
 800a666:	bd80      	pop	{r7, pc}

0800a668 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b082      	sub	sp, #8
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a670:	46c0      	nop			@ (mov r8, r8)
 800a672:	46bd      	mov	sp, r7
 800a674:	b002      	add	sp, #8
 800a676:	bd80      	pop	{r7, pc}

0800a678 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b084      	sub	sp, #16
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
 800a680:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a682:	683b      	ldr	r3, [r7, #0]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d108      	bne.n	800a69a <HAL_TIM_PWM_Start+0x22>
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	223e      	movs	r2, #62	@ 0x3e
 800a68c:	5c9b      	ldrb	r3, [r3, r2]
 800a68e:	b2db      	uxtb	r3, r3
 800a690:	3b01      	subs	r3, #1
 800a692:	1e5a      	subs	r2, r3, #1
 800a694:	4193      	sbcs	r3, r2
 800a696:	b2db      	uxtb	r3, r3
 800a698:	e037      	b.n	800a70a <HAL_TIM_PWM_Start+0x92>
 800a69a:	683b      	ldr	r3, [r7, #0]
 800a69c:	2b04      	cmp	r3, #4
 800a69e:	d108      	bne.n	800a6b2 <HAL_TIM_PWM_Start+0x3a>
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	223f      	movs	r2, #63	@ 0x3f
 800a6a4:	5c9b      	ldrb	r3, [r3, r2]
 800a6a6:	b2db      	uxtb	r3, r3
 800a6a8:	3b01      	subs	r3, #1
 800a6aa:	1e5a      	subs	r2, r3, #1
 800a6ac:	4193      	sbcs	r3, r2
 800a6ae:	b2db      	uxtb	r3, r3
 800a6b0:	e02b      	b.n	800a70a <HAL_TIM_PWM_Start+0x92>
 800a6b2:	683b      	ldr	r3, [r7, #0]
 800a6b4:	2b08      	cmp	r3, #8
 800a6b6:	d108      	bne.n	800a6ca <HAL_TIM_PWM_Start+0x52>
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2240      	movs	r2, #64	@ 0x40
 800a6bc:	5c9b      	ldrb	r3, [r3, r2]
 800a6be:	b2db      	uxtb	r3, r3
 800a6c0:	3b01      	subs	r3, #1
 800a6c2:	1e5a      	subs	r2, r3, #1
 800a6c4:	4193      	sbcs	r3, r2
 800a6c6:	b2db      	uxtb	r3, r3
 800a6c8:	e01f      	b.n	800a70a <HAL_TIM_PWM_Start+0x92>
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	2b0c      	cmp	r3, #12
 800a6ce:	d108      	bne.n	800a6e2 <HAL_TIM_PWM_Start+0x6a>
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2241      	movs	r2, #65	@ 0x41
 800a6d4:	5c9b      	ldrb	r3, [r3, r2]
 800a6d6:	b2db      	uxtb	r3, r3
 800a6d8:	3b01      	subs	r3, #1
 800a6da:	1e5a      	subs	r2, r3, #1
 800a6dc:	4193      	sbcs	r3, r2
 800a6de:	b2db      	uxtb	r3, r3
 800a6e0:	e013      	b.n	800a70a <HAL_TIM_PWM_Start+0x92>
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	2b10      	cmp	r3, #16
 800a6e6:	d108      	bne.n	800a6fa <HAL_TIM_PWM_Start+0x82>
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2242      	movs	r2, #66	@ 0x42
 800a6ec:	5c9b      	ldrb	r3, [r3, r2]
 800a6ee:	b2db      	uxtb	r3, r3
 800a6f0:	3b01      	subs	r3, #1
 800a6f2:	1e5a      	subs	r2, r3, #1
 800a6f4:	4193      	sbcs	r3, r2
 800a6f6:	b2db      	uxtb	r3, r3
 800a6f8:	e007      	b.n	800a70a <HAL_TIM_PWM_Start+0x92>
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2243      	movs	r2, #67	@ 0x43
 800a6fe:	5c9b      	ldrb	r3, [r3, r2]
 800a700:	b2db      	uxtb	r3, r3
 800a702:	3b01      	subs	r3, #1
 800a704:	1e5a      	subs	r2, r3, #1
 800a706:	4193      	sbcs	r3, r2
 800a708:	b2db      	uxtb	r3, r3
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d001      	beq.n	800a712 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800a70e:	2301      	movs	r3, #1
 800a710:	e090      	b.n	800a834 <HAL_TIM_PWM_Start+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d104      	bne.n	800a722 <HAL_TIM_PWM_Start+0xaa>
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	223e      	movs	r2, #62	@ 0x3e
 800a71c:	2102      	movs	r1, #2
 800a71e:	5499      	strb	r1, [r3, r2]
 800a720:	e023      	b.n	800a76a <HAL_TIM_PWM_Start+0xf2>
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	2b04      	cmp	r3, #4
 800a726:	d104      	bne.n	800a732 <HAL_TIM_PWM_Start+0xba>
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	223f      	movs	r2, #63	@ 0x3f
 800a72c:	2102      	movs	r1, #2
 800a72e:	5499      	strb	r1, [r3, r2]
 800a730:	e01b      	b.n	800a76a <HAL_TIM_PWM_Start+0xf2>
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	2b08      	cmp	r3, #8
 800a736:	d104      	bne.n	800a742 <HAL_TIM_PWM_Start+0xca>
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2240      	movs	r2, #64	@ 0x40
 800a73c:	2102      	movs	r1, #2
 800a73e:	5499      	strb	r1, [r3, r2]
 800a740:	e013      	b.n	800a76a <HAL_TIM_PWM_Start+0xf2>
 800a742:	683b      	ldr	r3, [r7, #0]
 800a744:	2b0c      	cmp	r3, #12
 800a746:	d104      	bne.n	800a752 <HAL_TIM_PWM_Start+0xda>
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	2241      	movs	r2, #65	@ 0x41
 800a74c:	2102      	movs	r1, #2
 800a74e:	5499      	strb	r1, [r3, r2]
 800a750:	e00b      	b.n	800a76a <HAL_TIM_PWM_Start+0xf2>
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	2b10      	cmp	r3, #16
 800a756:	d104      	bne.n	800a762 <HAL_TIM_PWM_Start+0xea>
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2242      	movs	r2, #66	@ 0x42
 800a75c:	2102      	movs	r1, #2
 800a75e:	5499      	strb	r1, [r3, r2]
 800a760:	e003      	b.n	800a76a <HAL_TIM_PWM_Start+0xf2>
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	2243      	movs	r2, #67	@ 0x43
 800a766:	2102      	movs	r1, #2
 800a768:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	6839      	ldr	r1, [r7, #0]
 800a770:	2201      	movs	r2, #1
 800a772:	0018      	movs	r0, r3
 800a774:	f000 fd58 	bl	800b228 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	4a2f      	ldr	r2, [pc, #188]	@ (800a83c <HAL_TIM_PWM_Start+0x1c4>)
 800a77e:	4293      	cmp	r3, r2
 800a780:	d00e      	beq.n	800a7a0 <HAL_TIM_PWM_Start+0x128>
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	4a2e      	ldr	r2, [pc, #184]	@ (800a840 <HAL_TIM_PWM_Start+0x1c8>)
 800a788:	4293      	cmp	r3, r2
 800a78a:	d009      	beq.n	800a7a0 <HAL_TIM_PWM_Start+0x128>
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	4a2c      	ldr	r2, [pc, #176]	@ (800a844 <HAL_TIM_PWM_Start+0x1cc>)
 800a792:	4293      	cmp	r3, r2
 800a794:	d004      	beq.n	800a7a0 <HAL_TIM_PWM_Start+0x128>
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	4a2b      	ldr	r2, [pc, #172]	@ (800a848 <HAL_TIM_PWM_Start+0x1d0>)
 800a79c:	4293      	cmp	r3, r2
 800a79e:	d101      	bne.n	800a7a4 <HAL_TIM_PWM_Start+0x12c>
 800a7a0:	2301      	movs	r3, #1
 800a7a2:	e000      	b.n	800a7a6 <HAL_TIM_PWM_Start+0x12e>
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d008      	beq.n	800a7bc <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	2180      	movs	r1, #128	@ 0x80
 800a7b6:	0209      	lsls	r1, r1, #8
 800a7b8:	430a      	orrs	r2, r1
 800a7ba:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	4a1e      	ldr	r2, [pc, #120]	@ (800a83c <HAL_TIM_PWM_Start+0x1c4>)
 800a7c2:	4293      	cmp	r3, r2
 800a7c4:	d014      	beq.n	800a7f0 <HAL_TIM_PWM_Start+0x178>
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681a      	ldr	r2, [r3, #0]
 800a7ca:	2380      	movs	r3, #128	@ 0x80
 800a7cc:	05db      	lsls	r3, r3, #23
 800a7ce:	429a      	cmp	r2, r3
 800a7d0:	d00e      	beq.n	800a7f0 <HAL_TIM_PWM_Start+0x178>
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	4a1d      	ldr	r2, [pc, #116]	@ (800a84c <HAL_TIM_PWM_Start+0x1d4>)
 800a7d8:	4293      	cmp	r3, r2
 800a7da:	d009      	beq.n	800a7f0 <HAL_TIM_PWM_Start+0x178>
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	4a1b      	ldr	r2, [pc, #108]	@ (800a850 <HAL_TIM_PWM_Start+0x1d8>)
 800a7e2:	4293      	cmp	r3, r2
 800a7e4:	d004      	beq.n	800a7f0 <HAL_TIM_PWM_Start+0x178>
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	4a15      	ldr	r2, [pc, #84]	@ (800a840 <HAL_TIM_PWM_Start+0x1c8>)
 800a7ec:	4293      	cmp	r3, r2
 800a7ee:	d116      	bne.n	800a81e <HAL_TIM_PWM_Start+0x1a6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	689b      	ldr	r3, [r3, #8]
 800a7f6:	4a17      	ldr	r2, [pc, #92]	@ (800a854 <HAL_TIM_PWM_Start+0x1dc>)
 800a7f8:	4013      	ands	r3, r2
 800a7fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	2b06      	cmp	r3, #6
 800a800:	d016      	beq.n	800a830 <HAL_TIM_PWM_Start+0x1b8>
 800a802:	68fa      	ldr	r2, [r7, #12]
 800a804:	2380      	movs	r3, #128	@ 0x80
 800a806:	025b      	lsls	r3, r3, #9
 800a808:	429a      	cmp	r2, r3
 800a80a:	d011      	beq.n	800a830 <HAL_TIM_PWM_Start+0x1b8>
    {
      __HAL_TIM_ENABLE(htim);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	681a      	ldr	r2, [r3, #0]
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	2101      	movs	r1, #1
 800a818:	430a      	orrs	r2, r1
 800a81a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a81c:	e008      	b.n	800a830 <HAL_TIM_PWM_Start+0x1b8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	681a      	ldr	r2, [r3, #0]
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	2101      	movs	r1, #1
 800a82a:	430a      	orrs	r2, r1
 800a82c:	601a      	str	r2, [r3, #0]
 800a82e:	e000      	b.n	800a832 <HAL_TIM_PWM_Start+0x1ba>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a830:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800a832:	2300      	movs	r3, #0
}
 800a834:	0018      	movs	r0, r3
 800a836:	46bd      	mov	sp, r7
 800a838:	b004      	add	sp, #16
 800a83a:	bd80      	pop	{r7, pc}
 800a83c:	40012c00 	.word	0x40012c00
 800a840:	40014000 	.word	0x40014000
 800a844:	40014400 	.word	0x40014400
 800a848:	40014800 	.word	0x40014800
 800a84c:	40000400 	.word	0x40000400
 800a850:	40000800 	.word	0x40000800
 800a854:	00010007 	.word	0x00010007

0800a858 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b082      	sub	sp, #8
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
 800a860:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	6839      	ldr	r1, [r7, #0]
 800a868:	2200      	movs	r2, #0
 800a86a:	0018      	movs	r0, r3
 800a86c:	f000 fcdc 	bl	800b228 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	4a37      	ldr	r2, [pc, #220]	@ (800a954 <HAL_TIM_PWM_Stop+0xfc>)
 800a876:	4293      	cmp	r3, r2
 800a878:	d00e      	beq.n	800a898 <HAL_TIM_PWM_Stop+0x40>
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	4a36      	ldr	r2, [pc, #216]	@ (800a958 <HAL_TIM_PWM_Stop+0x100>)
 800a880:	4293      	cmp	r3, r2
 800a882:	d009      	beq.n	800a898 <HAL_TIM_PWM_Stop+0x40>
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	4a34      	ldr	r2, [pc, #208]	@ (800a95c <HAL_TIM_PWM_Stop+0x104>)
 800a88a:	4293      	cmp	r3, r2
 800a88c:	d004      	beq.n	800a898 <HAL_TIM_PWM_Stop+0x40>
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	4a33      	ldr	r2, [pc, #204]	@ (800a960 <HAL_TIM_PWM_Stop+0x108>)
 800a894:	4293      	cmp	r3, r2
 800a896:	d101      	bne.n	800a89c <HAL_TIM_PWM_Stop+0x44>
 800a898:	2301      	movs	r3, #1
 800a89a:	e000      	b.n	800a89e <HAL_TIM_PWM_Stop+0x46>
 800a89c:	2300      	movs	r3, #0
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d013      	beq.n	800a8ca <HAL_TIM_PWM_Stop+0x72>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	6a1b      	ldr	r3, [r3, #32]
 800a8a8:	4a2e      	ldr	r2, [pc, #184]	@ (800a964 <HAL_TIM_PWM_Stop+0x10c>)
 800a8aa:	4013      	ands	r3, r2
 800a8ac:	d10d      	bne.n	800a8ca <HAL_TIM_PWM_Stop+0x72>
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	6a1b      	ldr	r3, [r3, #32]
 800a8b4:	4a2c      	ldr	r2, [pc, #176]	@ (800a968 <HAL_TIM_PWM_Stop+0x110>)
 800a8b6:	4013      	ands	r3, r2
 800a8b8:	d107      	bne.n	800a8ca <HAL_TIM_PWM_Stop+0x72>
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	4929      	ldr	r1, [pc, #164]	@ (800a96c <HAL_TIM_PWM_Stop+0x114>)
 800a8c6:	400a      	ands	r2, r1
 800a8c8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	6a1b      	ldr	r3, [r3, #32]
 800a8d0:	4a24      	ldr	r2, [pc, #144]	@ (800a964 <HAL_TIM_PWM_Stop+0x10c>)
 800a8d2:	4013      	ands	r3, r2
 800a8d4:	d10d      	bne.n	800a8f2 <HAL_TIM_PWM_Stop+0x9a>
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	6a1b      	ldr	r3, [r3, #32]
 800a8dc:	4a22      	ldr	r2, [pc, #136]	@ (800a968 <HAL_TIM_PWM_Stop+0x110>)
 800a8de:	4013      	ands	r3, r2
 800a8e0:	d107      	bne.n	800a8f2 <HAL_TIM_PWM_Stop+0x9a>
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	681a      	ldr	r2, [r3, #0]
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	2101      	movs	r1, #1
 800a8ee:	438a      	bics	r2, r1
 800a8f0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d104      	bne.n	800a902 <HAL_TIM_PWM_Stop+0xaa>
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	223e      	movs	r2, #62	@ 0x3e
 800a8fc:	2101      	movs	r1, #1
 800a8fe:	5499      	strb	r1, [r3, r2]
 800a900:	e023      	b.n	800a94a <HAL_TIM_PWM_Stop+0xf2>
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	2b04      	cmp	r3, #4
 800a906:	d104      	bne.n	800a912 <HAL_TIM_PWM_Stop+0xba>
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	223f      	movs	r2, #63	@ 0x3f
 800a90c:	2101      	movs	r1, #1
 800a90e:	5499      	strb	r1, [r3, r2]
 800a910:	e01b      	b.n	800a94a <HAL_TIM_PWM_Stop+0xf2>
 800a912:	683b      	ldr	r3, [r7, #0]
 800a914:	2b08      	cmp	r3, #8
 800a916:	d104      	bne.n	800a922 <HAL_TIM_PWM_Stop+0xca>
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2240      	movs	r2, #64	@ 0x40
 800a91c:	2101      	movs	r1, #1
 800a91e:	5499      	strb	r1, [r3, r2]
 800a920:	e013      	b.n	800a94a <HAL_TIM_PWM_Stop+0xf2>
 800a922:	683b      	ldr	r3, [r7, #0]
 800a924:	2b0c      	cmp	r3, #12
 800a926:	d104      	bne.n	800a932 <HAL_TIM_PWM_Stop+0xda>
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2241      	movs	r2, #65	@ 0x41
 800a92c:	2101      	movs	r1, #1
 800a92e:	5499      	strb	r1, [r3, r2]
 800a930:	e00b      	b.n	800a94a <HAL_TIM_PWM_Stop+0xf2>
 800a932:	683b      	ldr	r3, [r7, #0]
 800a934:	2b10      	cmp	r3, #16
 800a936:	d104      	bne.n	800a942 <HAL_TIM_PWM_Stop+0xea>
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	2242      	movs	r2, #66	@ 0x42
 800a93c:	2101      	movs	r1, #1
 800a93e:	5499      	strb	r1, [r3, r2]
 800a940:	e003      	b.n	800a94a <HAL_TIM_PWM_Stop+0xf2>
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	2243      	movs	r2, #67	@ 0x43
 800a946:	2101      	movs	r1, #1
 800a948:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800a94a:	2300      	movs	r3, #0
}
 800a94c:	0018      	movs	r0, r3
 800a94e:	46bd      	mov	sp, r7
 800a950:	b002      	add	sp, #8
 800a952:	bd80      	pop	{r7, pc}
 800a954:	40012c00 	.word	0x40012c00
 800a958:	40014000 	.word	0x40014000
 800a95c:	40014400 	.word	0x40014400
 800a960:	40014800 	.word	0x40014800
 800a964:	00001111 	.word	0x00001111
 800a968:	00000444 	.word	0x00000444
 800a96c:	ffff7fff 	.word	0xffff7fff

0800a970 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b086      	sub	sp, #24
 800a974:	af00      	add	r7, sp, #0
 800a976:	60f8      	str	r0, [r7, #12]
 800a978:	60b9      	str	r1, [r7, #8]
 800a97a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a97c:	2317      	movs	r3, #23
 800a97e:	18fb      	adds	r3, r7, r3
 800a980:	2200      	movs	r2, #0
 800a982:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	223c      	movs	r2, #60	@ 0x3c
 800a988:	5c9b      	ldrb	r3, [r3, r2]
 800a98a:	2b01      	cmp	r3, #1
 800a98c:	d101      	bne.n	800a992 <HAL_TIM_PWM_ConfigChannel+0x22>
 800a98e:	2302      	movs	r3, #2
 800a990:	e0e5      	b.n	800ab5e <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	223c      	movs	r2, #60	@ 0x3c
 800a996:	2101      	movs	r1, #1
 800a998:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	2b14      	cmp	r3, #20
 800a99e:	d900      	bls.n	800a9a2 <HAL_TIM_PWM_ConfigChannel+0x32>
 800a9a0:	e0d1      	b.n	800ab46 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	009a      	lsls	r2, r3, #2
 800a9a6:	4b70      	ldr	r3, [pc, #448]	@ (800ab68 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800a9a8:	18d3      	adds	r3, r2, r3
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	68ba      	ldr	r2, [r7, #8]
 800a9b4:	0011      	movs	r1, r2
 800a9b6:	0018      	movs	r0, r3
 800a9b8:	f000 f972 	bl	800aca0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	699a      	ldr	r2, [r3, #24]
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	2108      	movs	r1, #8
 800a9c8:	430a      	orrs	r2, r1
 800a9ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	699a      	ldr	r2, [r3, #24]
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	2104      	movs	r1, #4
 800a9d8:	438a      	bics	r2, r1
 800a9da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	6999      	ldr	r1, [r3, #24]
 800a9e2:	68bb      	ldr	r3, [r7, #8]
 800a9e4:	691a      	ldr	r2, [r3, #16]
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	430a      	orrs	r2, r1
 800a9ec:	619a      	str	r2, [r3, #24]
      break;
 800a9ee:	e0af      	b.n	800ab50 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	68ba      	ldr	r2, [r7, #8]
 800a9f6:	0011      	movs	r1, r2
 800a9f8:	0018      	movs	r0, r3
 800a9fa:	f000 f9db 	bl	800adb4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	699a      	ldr	r2, [r3, #24]
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	2180      	movs	r1, #128	@ 0x80
 800aa0a:	0109      	lsls	r1, r1, #4
 800aa0c:	430a      	orrs	r2, r1
 800aa0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	699a      	ldr	r2, [r3, #24]
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	4954      	ldr	r1, [pc, #336]	@ (800ab6c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800aa1c:	400a      	ands	r2, r1
 800aa1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	6999      	ldr	r1, [r3, #24]
 800aa26:	68bb      	ldr	r3, [r7, #8]
 800aa28:	691b      	ldr	r3, [r3, #16]
 800aa2a:	021a      	lsls	r2, r3, #8
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	430a      	orrs	r2, r1
 800aa32:	619a      	str	r2, [r3, #24]
      break;
 800aa34:	e08c      	b.n	800ab50 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	68ba      	ldr	r2, [r7, #8]
 800aa3c:	0011      	movs	r1, r2
 800aa3e:	0018      	movs	r0, r3
 800aa40:	f000 fa3c 	bl	800aebc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	69da      	ldr	r2, [r3, #28]
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	2108      	movs	r1, #8
 800aa50:	430a      	orrs	r2, r1
 800aa52:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	69da      	ldr	r2, [r3, #28]
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	2104      	movs	r1, #4
 800aa60:	438a      	bics	r2, r1
 800aa62:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	69d9      	ldr	r1, [r3, #28]
 800aa6a:	68bb      	ldr	r3, [r7, #8]
 800aa6c:	691a      	ldr	r2, [r3, #16]
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	430a      	orrs	r2, r1
 800aa74:	61da      	str	r2, [r3, #28]
      break;
 800aa76:	e06b      	b.n	800ab50 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	68ba      	ldr	r2, [r7, #8]
 800aa7e:	0011      	movs	r1, r2
 800aa80:	0018      	movs	r0, r3
 800aa82:	f000 faa3 	bl	800afcc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	69da      	ldr	r2, [r3, #28]
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	2180      	movs	r1, #128	@ 0x80
 800aa92:	0109      	lsls	r1, r1, #4
 800aa94:	430a      	orrs	r2, r1
 800aa96:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	69da      	ldr	r2, [r3, #28]
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	4932      	ldr	r1, [pc, #200]	@ (800ab6c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800aaa4:	400a      	ands	r2, r1
 800aaa6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	69d9      	ldr	r1, [r3, #28]
 800aaae:	68bb      	ldr	r3, [r7, #8]
 800aab0:	691b      	ldr	r3, [r3, #16]
 800aab2:	021a      	lsls	r2, r3, #8
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	430a      	orrs	r2, r1
 800aaba:	61da      	str	r2, [r3, #28]
      break;
 800aabc:	e048      	b.n	800ab50 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	68ba      	ldr	r2, [r7, #8]
 800aac4:	0011      	movs	r1, r2
 800aac6:	0018      	movs	r0, r3
 800aac8:	f000 faea 	bl	800b0a0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	2108      	movs	r1, #8
 800aad8:	430a      	orrs	r2, r1
 800aada:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	2104      	movs	r1, #4
 800aae8:	438a      	bics	r2, r1
 800aaea:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800aaf2:	68bb      	ldr	r3, [r7, #8]
 800aaf4:	691a      	ldr	r2, [r3, #16]
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	430a      	orrs	r2, r1
 800aafc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800aafe:	e027      	b.n	800ab50 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	68ba      	ldr	r2, [r7, #8]
 800ab06:	0011      	movs	r1, r2
 800ab08:	0018      	movs	r0, r3
 800ab0a:	f000 fb29 	bl	800b160 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	2180      	movs	r1, #128	@ 0x80
 800ab1a:	0109      	lsls	r1, r1, #4
 800ab1c:	430a      	orrs	r2, r1
 800ab1e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	4910      	ldr	r1, [pc, #64]	@ (800ab6c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800ab2c:	400a      	ands	r2, r1
 800ab2e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800ab36:	68bb      	ldr	r3, [r7, #8]
 800ab38:	691b      	ldr	r3, [r3, #16]
 800ab3a:	021a      	lsls	r2, r3, #8
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	430a      	orrs	r2, r1
 800ab42:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800ab44:	e004      	b.n	800ab50 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800ab46:	2317      	movs	r3, #23
 800ab48:	18fb      	adds	r3, r7, r3
 800ab4a:	2201      	movs	r2, #1
 800ab4c:	701a      	strb	r2, [r3, #0]
      break;
 800ab4e:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	223c      	movs	r2, #60	@ 0x3c
 800ab54:	2100      	movs	r1, #0
 800ab56:	5499      	strb	r1, [r3, r2]

  return status;
 800ab58:	2317      	movs	r3, #23
 800ab5a:	18fb      	adds	r3, r7, r3
 800ab5c:	781b      	ldrb	r3, [r3, #0]
}
 800ab5e:	0018      	movs	r0, r3
 800ab60:	46bd      	mov	sp, r7
 800ab62:	b006      	add	sp, #24
 800ab64:	bd80      	pop	{r7, pc}
 800ab66:	46c0      	nop			@ (mov r8, r8)
 800ab68:	08010704 	.word	0x08010704
 800ab6c:	fffffbff 	.word	0xfffffbff

0800ab70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b084      	sub	sp, #16
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
 800ab78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	4a3f      	ldr	r2, [pc, #252]	@ (800ac80 <TIM_Base_SetConfig+0x110>)
 800ab84:	4293      	cmp	r3, r2
 800ab86:	d00c      	beq.n	800aba2 <TIM_Base_SetConfig+0x32>
 800ab88:	687a      	ldr	r2, [r7, #4]
 800ab8a:	2380      	movs	r3, #128	@ 0x80
 800ab8c:	05db      	lsls	r3, r3, #23
 800ab8e:	429a      	cmp	r2, r3
 800ab90:	d007      	beq.n	800aba2 <TIM_Base_SetConfig+0x32>
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	4a3b      	ldr	r2, [pc, #236]	@ (800ac84 <TIM_Base_SetConfig+0x114>)
 800ab96:	4293      	cmp	r3, r2
 800ab98:	d003      	beq.n	800aba2 <TIM_Base_SetConfig+0x32>
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	4a3a      	ldr	r2, [pc, #232]	@ (800ac88 <TIM_Base_SetConfig+0x118>)
 800ab9e:	4293      	cmp	r3, r2
 800aba0:	d108      	bne.n	800abb4 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	2270      	movs	r2, #112	@ 0x70
 800aba6:	4393      	bics	r3, r2
 800aba8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	685b      	ldr	r3, [r3, #4]
 800abae:	68fa      	ldr	r2, [r7, #12]
 800abb0:	4313      	orrs	r3, r2
 800abb2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	4a32      	ldr	r2, [pc, #200]	@ (800ac80 <TIM_Base_SetConfig+0x110>)
 800abb8:	4293      	cmp	r3, r2
 800abba:	d01c      	beq.n	800abf6 <TIM_Base_SetConfig+0x86>
 800abbc:	687a      	ldr	r2, [r7, #4]
 800abbe:	2380      	movs	r3, #128	@ 0x80
 800abc0:	05db      	lsls	r3, r3, #23
 800abc2:	429a      	cmp	r2, r3
 800abc4:	d017      	beq.n	800abf6 <TIM_Base_SetConfig+0x86>
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	4a2e      	ldr	r2, [pc, #184]	@ (800ac84 <TIM_Base_SetConfig+0x114>)
 800abca:	4293      	cmp	r3, r2
 800abcc:	d013      	beq.n	800abf6 <TIM_Base_SetConfig+0x86>
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	4a2d      	ldr	r2, [pc, #180]	@ (800ac88 <TIM_Base_SetConfig+0x118>)
 800abd2:	4293      	cmp	r3, r2
 800abd4:	d00f      	beq.n	800abf6 <TIM_Base_SetConfig+0x86>
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	4a2c      	ldr	r2, [pc, #176]	@ (800ac8c <TIM_Base_SetConfig+0x11c>)
 800abda:	4293      	cmp	r3, r2
 800abdc:	d00b      	beq.n	800abf6 <TIM_Base_SetConfig+0x86>
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	4a2b      	ldr	r2, [pc, #172]	@ (800ac90 <TIM_Base_SetConfig+0x120>)
 800abe2:	4293      	cmp	r3, r2
 800abe4:	d007      	beq.n	800abf6 <TIM_Base_SetConfig+0x86>
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	4a2a      	ldr	r2, [pc, #168]	@ (800ac94 <TIM_Base_SetConfig+0x124>)
 800abea:	4293      	cmp	r3, r2
 800abec:	d003      	beq.n	800abf6 <TIM_Base_SetConfig+0x86>
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	4a29      	ldr	r2, [pc, #164]	@ (800ac98 <TIM_Base_SetConfig+0x128>)
 800abf2:	4293      	cmp	r3, r2
 800abf4:	d108      	bne.n	800ac08 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	4a28      	ldr	r2, [pc, #160]	@ (800ac9c <TIM_Base_SetConfig+0x12c>)
 800abfa:	4013      	ands	r3, r2
 800abfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	68db      	ldr	r3, [r3, #12]
 800ac02:	68fa      	ldr	r2, [r7, #12]
 800ac04:	4313      	orrs	r3, r2
 800ac06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	2280      	movs	r2, #128	@ 0x80
 800ac0c:	4393      	bics	r3, r2
 800ac0e:	001a      	movs	r2, r3
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	695b      	ldr	r3, [r3, #20]
 800ac14:	4313      	orrs	r3, r2
 800ac16:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	68fa      	ldr	r2, [r7, #12]
 800ac1c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	689a      	ldr	r2, [r3, #8]
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	681a      	ldr	r2, [r3, #0]
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	4a13      	ldr	r2, [pc, #76]	@ (800ac80 <TIM_Base_SetConfig+0x110>)
 800ac32:	4293      	cmp	r3, r2
 800ac34:	d00b      	beq.n	800ac4e <TIM_Base_SetConfig+0xde>
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	4a15      	ldr	r2, [pc, #84]	@ (800ac90 <TIM_Base_SetConfig+0x120>)
 800ac3a:	4293      	cmp	r3, r2
 800ac3c:	d007      	beq.n	800ac4e <TIM_Base_SetConfig+0xde>
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	4a14      	ldr	r2, [pc, #80]	@ (800ac94 <TIM_Base_SetConfig+0x124>)
 800ac42:	4293      	cmp	r3, r2
 800ac44:	d003      	beq.n	800ac4e <TIM_Base_SetConfig+0xde>
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	4a13      	ldr	r2, [pc, #76]	@ (800ac98 <TIM_Base_SetConfig+0x128>)
 800ac4a:	4293      	cmp	r3, r2
 800ac4c:	d103      	bne.n	800ac56 <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	691a      	ldr	r2, [r3, #16]
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	2201      	movs	r2, #1
 800ac5a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	691b      	ldr	r3, [r3, #16]
 800ac60:	2201      	movs	r2, #1
 800ac62:	4013      	ands	r3, r2
 800ac64:	2b01      	cmp	r3, #1
 800ac66:	d106      	bne.n	800ac76 <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	691b      	ldr	r3, [r3, #16]
 800ac6c:	2201      	movs	r2, #1
 800ac6e:	4393      	bics	r3, r2
 800ac70:	001a      	movs	r2, r3
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	611a      	str	r2, [r3, #16]
  }
}
 800ac76:	46c0      	nop			@ (mov r8, r8)
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	b004      	add	sp, #16
 800ac7c:	bd80      	pop	{r7, pc}
 800ac7e:	46c0      	nop			@ (mov r8, r8)
 800ac80:	40012c00 	.word	0x40012c00
 800ac84:	40000400 	.word	0x40000400
 800ac88:	40000800 	.word	0x40000800
 800ac8c:	40002000 	.word	0x40002000
 800ac90:	40014000 	.word	0x40014000
 800ac94:	40014400 	.word	0x40014400
 800ac98:	40014800 	.word	0x40014800
 800ac9c:	fffffcff 	.word	0xfffffcff

0800aca0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b086      	sub	sp, #24
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
 800aca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6a1b      	ldr	r3, [r3, #32]
 800acae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	6a1b      	ldr	r3, [r3, #32]
 800acb4:	2201      	movs	r2, #1
 800acb6:	4393      	bics	r3, r2
 800acb8:	001a      	movs	r2, r3
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	685b      	ldr	r3, [r3, #4]
 800acc2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	699b      	ldr	r3, [r3, #24]
 800acc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	4a32      	ldr	r2, [pc, #200]	@ (800ad98 <TIM_OC1_SetConfig+0xf8>)
 800acce:	4013      	ands	r3, r2
 800acd0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	2203      	movs	r2, #3
 800acd6:	4393      	bics	r3, r2
 800acd8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800acda:	683b      	ldr	r3, [r7, #0]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	68fa      	ldr	r2, [r7, #12]
 800ace0:	4313      	orrs	r3, r2
 800ace2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ace4:	697b      	ldr	r3, [r7, #20]
 800ace6:	2202      	movs	r2, #2
 800ace8:	4393      	bics	r3, r2
 800acea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	689b      	ldr	r3, [r3, #8]
 800acf0:	697a      	ldr	r2, [r7, #20]
 800acf2:	4313      	orrs	r3, r2
 800acf4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	4a28      	ldr	r2, [pc, #160]	@ (800ad9c <TIM_OC1_SetConfig+0xfc>)
 800acfa:	4293      	cmp	r3, r2
 800acfc:	d00b      	beq.n	800ad16 <TIM_OC1_SetConfig+0x76>
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	4a27      	ldr	r2, [pc, #156]	@ (800ada0 <TIM_OC1_SetConfig+0x100>)
 800ad02:	4293      	cmp	r3, r2
 800ad04:	d007      	beq.n	800ad16 <TIM_OC1_SetConfig+0x76>
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	4a26      	ldr	r2, [pc, #152]	@ (800ada4 <TIM_OC1_SetConfig+0x104>)
 800ad0a:	4293      	cmp	r3, r2
 800ad0c:	d003      	beq.n	800ad16 <TIM_OC1_SetConfig+0x76>
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	4a25      	ldr	r2, [pc, #148]	@ (800ada8 <TIM_OC1_SetConfig+0x108>)
 800ad12:	4293      	cmp	r3, r2
 800ad14:	d10c      	bne.n	800ad30 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ad16:	697b      	ldr	r3, [r7, #20]
 800ad18:	2208      	movs	r2, #8
 800ad1a:	4393      	bics	r3, r2
 800ad1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ad1e:	683b      	ldr	r3, [r7, #0]
 800ad20:	68db      	ldr	r3, [r3, #12]
 800ad22:	697a      	ldr	r2, [r7, #20]
 800ad24:	4313      	orrs	r3, r2
 800ad26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ad28:	697b      	ldr	r3, [r7, #20]
 800ad2a:	2204      	movs	r2, #4
 800ad2c:	4393      	bics	r3, r2
 800ad2e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	4a1a      	ldr	r2, [pc, #104]	@ (800ad9c <TIM_OC1_SetConfig+0xfc>)
 800ad34:	4293      	cmp	r3, r2
 800ad36:	d00b      	beq.n	800ad50 <TIM_OC1_SetConfig+0xb0>
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	4a19      	ldr	r2, [pc, #100]	@ (800ada0 <TIM_OC1_SetConfig+0x100>)
 800ad3c:	4293      	cmp	r3, r2
 800ad3e:	d007      	beq.n	800ad50 <TIM_OC1_SetConfig+0xb0>
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	4a18      	ldr	r2, [pc, #96]	@ (800ada4 <TIM_OC1_SetConfig+0x104>)
 800ad44:	4293      	cmp	r3, r2
 800ad46:	d003      	beq.n	800ad50 <TIM_OC1_SetConfig+0xb0>
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	4a17      	ldr	r2, [pc, #92]	@ (800ada8 <TIM_OC1_SetConfig+0x108>)
 800ad4c:	4293      	cmp	r3, r2
 800ad4e:	d111      	bne.n	800ad74 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ad50:	693b      	ldr	r3, [r7, #16]
 800ad52:	4a16      	ldr	r2, [pc, #88]	@ (800adac <TIM_OC1_SetConfig+0x10c>)
 800ad54:	4013      	ands	r3, r2
 800ad56:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ad58:	693b      	ldr	r3, [r7, #16]
 800ad5a:	4a15      	ldr	r2, [pc, #84]	@ (800adb0 <TIM_OC1_SetConfig+0x110>)
 800ad5c:	4013      	ands	r3, r2
 800ad5e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ad60:	683b      	ldr	r3, [r7, #0]
 800ad62:	695b      	ldr	r3, [r3, #20]
 800ad64:	693a      	ldr	r2, [r7, #16]
 800ad66:	4313      	orrs	r3, r2
 800ad68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ad6a:	683b      	ldr	r3, [r7, #0]
 800ad6c:	699b      	ldr	r3, [r3, #24]
 800ad6e:	693a      	ldr	r2, [r7, #16]
 800ad70:	4313      	orrs	r3, r2
 800ad72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	693a      	ldr	r2, [r7, #16]
 800ad78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	68fa      	ldr	r2, [r7, #12]
 800ad7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ad80:	683b      	ldr	r3, [r7, #0]
 800ad82:	685a      	ldr	r2, [r3, #4]
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	697a      	ldr	r2, [r7, #20]
 800ad8c:	621a      	str	r2, [r3, #32]
}
 800ad8e:	46c0      	nop			@ (mov r8, r8)
 800ad90:	46bd      	mov	sp, r7
 800ad92:	b006      	add	sp, #24
 800ad94:	bd80      	pop	{r7, pc}
 800ad96:	46c0      	nop			@ (mov r8, r8)
 800ad98:	fffeff8f 	.word	0xfffeff8f
 800ad9c:	40012c00 	.word	0x40012c00
 800ada0:	40014000 	.word	0x40014000
 800ada4:	40014400 	.word	0x40014400
 800ada8:	40014800 	.word	0x40014800
 800adac:	fffffeff 	.word	0xfffffeff
 800adb0:	fffffdff 	.word	0xfffffdff

0800adb4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b086      	sub	sp, #24
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
 800adbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	6a1b      	ldr	r3, [r3, #32]
 800adc2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	6a1b      	ldr	r3, [r3, #32]
 800adc8:	2210      	movs	r2, #16
 800adca:	4393      	bics	r3, r2
 800adcc:	001a      	movs	r2, r3
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	685b      	ldr	r3, [r3, #4]
 800add6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	699b      	ldr	r3, [r3, #24]
 800addc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	4a2e      	ldr	r2, [pc, #184]	@ (800ae9c <TIM_OC2_SetConfig+0xe8>)
 800ade2:	4013      	ands	r3, r2
 800ade4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	4a2d      	ldr	r2, [pc, #180]	@ (800aea0 <TIM_OC2_SetConfig+0xec>)
 800adea:	4013      	ands	r3, r2
 800adec:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	021b      	lsls	r3, r3, #8
 800adf4:	68fa      	ldr	r2, [r7, #12]
 800adf6:	4313      	orrs	r3, r2
 800adf8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800adfa:	697b      	ldr	r3, [r7, #20]
 800adfc:	2220      	movs	r2, #32
 800adfe:	4393      	bics	r3, r2
 800ae00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	689b      	ldr	r3, [r3, #8]
 800ae06:	011b      	lsls	r3, r3, #4
 800ae08:	697a      	ldr	r2, [r7, #20]
 800ae0a:	4313      	orrs	r3, r2
 800ae0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	4a24      	ldr	r2, [pc, #144]	@ (800aea4 <TIM_OC2_SetConfig+0xf0>)
 800ae12:	4293      	cmp	r3, r2
 800ae14:	d10d      	bne.n	800ae32 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ae16:	697b      	ldr	r3, [r7, #20]
 800ae18:	2280      	movs	r2, #128	@ 0x80
 800ae1a:	4393      	bics	r3, r2
 800ae1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ae1e:	683b      	ldr	r3, [r7, #0]
 800ae20:	68db      	ldr	r3, [r3, #12]
 800ae22:	011b      	lsls	r3, r3, #4
 800ae24:	697a      	ldr	r2, [r7, #20]
 800ae26:	4313      	orrs	r3, r2
 800ae28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ae2a:	697b      	ldr	r3, [r7, #20]
 800ae2c:	2240      	movs	r2, #64	@ 0x40
 800ae2e:	4393      	bics	r3, r2
 800ae30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	4a1b      	ldr	r2, [pc, #108]	@ (800aea4 <TIM_OC2_SetConfig+0xf0>)
 800ae36:	4293      	cmp	r3, r2
 800ae38:	d00b      	beq.n	800ae52 <TIM_OC2_SetConfig+0x9e>
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	4a1a      	ldr	r2, [pc, #104]	@ (800aea8 <TIM_OC2_SetConfig+0xf4>)
 800ae3e:	4293      	cmp	r3, r2
 800ae40:	d007      	beq.n	800ae52 <TIM_OC2_SetConfig+0x9e>
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	4a19      	ldr	r2, [pc, #100]	@ (800aeac <TIM_OC2_SetConfig+0xf8>)
 800ae46:	4293      	cmp	r3, r2
 800ae48:	d003      	beq.n	800ae52 <TIM_OC2_SetConfig+0x9e>
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	4a18      	ldr	r2, [pc, #96]	@ (800aeb0 <TIM_OC2_SetConfig+0xfc>)
 800ae4e:	4293      	cmp	r3, r2
 800ae50:	d113      	bne.n	800ae7a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ae52:	693b      	ldr	r3, [r7, #16]
 800ae54:	4a17      	ldr	r2, [pc, #92]	@ (800aeb4 <TIM_OC2_SetConfig+0x100>)
 800ae56:	4013      	ands	r3, r2
 800ae58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ae5a:	693b      	ldr	r3, [r7, #16]
 800ae5c:	4a16      	ldr	r2, [pc, #88]	@ (800aeb8 <TIM_OC2_SetConfig+0x104>)
 800ae5e:	4013      	ands	r3, r2
 800ae60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ae62:	683b      	ldr	r3, [r7, #0]
 800ae64:	695b      	ldr	r3, [r3, #20]
 800ae66:	009b      	lsls	r3, r3, #2
 800ae68:	693a      	ldr	r2, [r7, #16]
 800ae6a:	4313      	orrs	r3, r2
 800ae6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ae6e:	683b      	ldr	r3, [r7, #0]
 800ae70:	699b      	ldr	r3, [r3, #24]
 800ae72:	009b      	lsls	r3, r3, #2
 800ae74:	693a      	ldr	r2, [r7, #16]
 800ae76:	4313      	orrs	r3, r2
 800ae78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	693a      	ldr	r2, [r7, #16]
 800ae7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	68fa      	ldr	r2, [r7, #12]
 800ae84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ae86:	683b      	ldr	r3, [r7, #0]
 800ae88:	685a      	ldr	r2, [r3, #4]
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	697a      	ldr	r2, [r7, #20]
 800ae92:	621a      	str	r2, [r3, #32]
}
 800ae94:	46c0      	nop			@ (mov r8, r8)
 800ae96:	46bd      	mov	sp, r7
 800ae98:	b006      	add	sp, #24
 800ae9a:	bd80      	pop	{r7, pc}
 800ae9c:	feff8fff 	.word	0xfeff8fff
 800aea0:	fffffcff 	.word	0xfffffcff
 800aea4:	40012c00 	.word	0x40012c00
 800aea8:	40014000 	.word	0x40014000
 800aeac:	40014400 	.word	0x40014400
 800aeb0:	40014800 	.word	0x40014800
 800aeb4:	fffffbff 	.word	0xfffffbff
 800aeb8:	fffff7ff 	.word	0xfffff7ff

0800aebc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aebc:	b580      	push	{r7, lr}
 800aebe:	b086      	sub	sp, #24
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]
 800aec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	6a1b      	ldr	r3, [r3, #32]
 800aeca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	6a1b      	ldr	r3, [r3, #32]
 800aed0:	4a33      	ldr	r2, [pc, #204]	@ (800afa0 <TIM_OC3_SetConfig+0xe4>)
 800aed2:	401a      	ands	r2, r3
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	685b      	ldr	r3, [r3, #4]
 800aedc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	69db      	ldr	r3, [r3, #28]
 800aee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	4a2f      	ldr	r2, [pc, #188]	@ (800afa4 <TIM_OC3_SetConfig+0xe8>)
 800aee8:	4013      	ands	r3, r2
 800aeea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	2203      	movs	r2, #3
 800aef0:	4393      	bics	r3, r2
 800aef2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aef4:	683b      	ldr	r3, [r7, #0]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	68fa      	ldr	r2, [r7, #12]
 800aefa:	4313      	orrs	r3, r2
 800aefc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800aefe:	697b      	ldr	r3, [r7, #20]
 800af00:	4a29      	ldr	r2, [pc, #164]	@ (800afa8 <TIM_OC3_SetConfig+0xec>)
 800af02:	4013      	ands	r3, r2
 800af04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	689b      	ldr	r3, [r3, #8]
 800af0a:	021b      	lsls	r3, r3, #8
 800af0c:	697a      	ldr	r2, [r7, #20]
 800af0e:	4313      	orrs	r3, r2
 800af10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	4a25      	ldr	r2, [pc, #148]	@ (800afac <TIM_OC3_SetConfig+0xf0>)
 800af16:	4293      	cmp	r3, r2
 800af18:	d10d      	bne.n	800af36 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800af1a:	697b      	ldr	r3, [r7, #20]
 800af1c:	4a24      	ldr	r2, [pc, #144]	@ (800afb0 <TIM_OC3_SetConfig+0xf4>)
 800af1e:	4013      	ands	r3, r2
 800af20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800af22:	683b      	ldr	r3, [r7, #0]
 800af24:	68db      	ldr	r3, [r3, #12]
 800af26:	021b      	lsls	r3, r3, #8
 800af28:	697a      	ldr	r2, [r7, #20]
 800af2a:	4313      	orrs	r3, r2
 800af2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800af2e:	697b      	ldr	r3, [r7, #20]
 800af30:	4a20      	ldr	r2, [pc, #128]	@ (800afb4 <TIM_OC3_SetConfig+0xf8>)
 800af32:	4013      	ands	r3, r2
 800af34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	4a1c      	ldr	r2, [pc, #112]	@ (800afac <TIM_OC3_SetConfig+0xf0>)
 800af3a:	4293      	cmp	r3, r2
 800af3c:	d00b      	beq.n	800af56 <TIM_OC3_SetConfig+0x9a>
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	4a1d      	ldr	r2, [pc, #116]	@ (800afb8 <TIM_OC3_SetConfig+0xfc>)
 800af42:	4293      	cmp	r3, r2
 800af44:	d007      	beq.n	800af56 <TIM_OC3_SetConfig+0x9a>
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	4a1c      	ldr	r2, [pc, #112]	@ (800afbc <TIM_OC3_SetConfig+0x100>)
 800af4a:	4293      	cmp	r3, r2
 800af4c:	d003      	beq.n	800af56 <TIM_OC3_SetConfig+0x9a>
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	4a1b      	ldr	r2, [pc, #108]	@ (800afc0 <TIM_OC3_SetConfig+0x104>)
 800af52:	4293      	cmp	r3, r2
 800af54:	d113      	bne.n	800af7e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800af56:	693b      	ldr	r3, [r7, #16]
 800af58:	4a1a      	ldr	r2, [pc, #104]	@ (800afc4 <TIM_OC3_SetConfig+0x108>)
 800af5a:	4013      	ands	r3, r2
 800af5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800af5e:	693b      	ldr	r3, [r7, #16]
 800af60:	4a19      	ldr	r2, [pc, #100]	@ (800afc8 <TIM_OC3_SetConfig+0x10c>)
 800af62:	4013      	ands	r3, r2
 800af64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	695b      	ldr	r3, [r3, #20]
 800af6a:	011b      	lsls	r3, r3, #4
 800af6c:	693a      	ldr	r2, [r7, #16]
 800af6e:	4313      	orrs	r3, r2
 800af70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800af72:	683b      	ldr	r3, [r7, #0]
 800af74:	699b      	ldr	r3, [r3, #24]
 800af76:	011b      	lsls	r3, r3, #4
 800af78:	693a      	ldr	r2, [r7, #16]
 800af7a:	4313      	orrs	r3, r2
 800af7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	693a      	ldr	r2, [r7, #16]
 800af82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	68fa      	ldr	r2, [r7, #12]
 800af88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800af8a:	683b      	ldr	r3, [r7, #0]
 800af8c:	685a      	ldr	r2, [r3, #4]
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	697a      	ldr	r2, [r7, #20]
 800af96:	621a      	str	r2, [r3, #32]
}
 800af98:	46c0      	nop			@ (mov r8, r8)
 800af9a:	46bd      	mov	sp, r7
 800af9c:	b006      	add	sp, #24
 800af9e:	bd80      	pop	{r7, pc}
 800afa0:	fffffeff 	.word	0xfffffeff
 800afa4:	fffeff8f 	.word	0xfffeff8f
 800afa8:	fffffdff 	.word	0xfffffdff
 800afac:	40012c00 	.word	0x40012c00
 800afb0:	fffff7ff 	.word	0xfffff7ff
 800afb4:	fffffbff 	.word	0xfffffbff
 800afb8:	40014000 	.word	0x40014000
 800afbc:	40014400 	.word	0x40014400
 800afc0:	40014800 	.word	0x40014800
 800afc4:	ffffefff 	.word	0xffffefff
 800afc8:	ffffdfff 	.word	0xffffdfff

0800afcc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b086      	sub	sp, #24
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
 800afd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	6a1b      	ldr	r3, [r3, #32]
 800afda:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	6a1b      	ldr	r3, [r3, #32]
 800afe0:	4a26      	ldr	r2, [pc, #152]	@ (800b07c <TIM_OC4_SetConfig+0xb0>)
 800afe2:	401a      	ands	r2, r3
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	685b      	ldr	r3, [r3, #4]
 800afec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	69db      	ldr	r3, [r3, #28]
 800aff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	4a22      	ldr	r2, [pc, #136]	@ (800b080 <TIM_OC4_SetConfig+0xb4>)
 800aff8:	4013      	ands	r3, r2
 800affa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	4a21      	ldr	r2, [pc, #132]	@ (800b084 <TIM_OC4_SetConfig+0xb8>)
 800b000:	4013      	ands	r3, r2
 800b002:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b004:	683b      	ldr	r3, [r7, #0]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	021b      	lsls	r3, r3, #8
 800b00a:	68fa      	ldr	r2, [r7, #12]
 800b00c:	4313      	orrs	r3, r2
 800b00e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b010:	693b      	ldr	r3, [r7, #16]
 800b012:	4a1d      	ldr	r2, [pc, #116]	@ (800b088 <TIM_OC4_SetConfig+0xbc>)
 800b014:	4013      	ands	r3, r2
 800b016:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	689b      	ldr	r3, [r3, #8]
 800b01c:	031b      	lsls	r3, r3, #12
 800b01e:	693a      	ldr	r2, [r7, #16]
 800b020:	4313      	orrs	r3, r2
 800b022:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	4a19      	ldr	r2, [pc, #100]	@ (800b08c <TIM_OC4_SetConfig+0xc0>)
 800b028:	4293      	cmp	r3, r2
 800b02a:	d00b      	beq.n	800b044 <TIM_OC4_SetConfig+0x78>
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	4a18      	ldr	r2, [pc, #96]	@ (800b090 <TIM_OC4_SetConfig+0xc4>)
 800b030:	4293      	cmp	r3, r2
 800b032:	d007      	beq.n	800b044 <TIM_OC4_SetConfig+0x78>
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	4a17      	ldr	r2, [pc, #92]	@ (800b094 <TIM_OC4_SetConfig+0xc8>)
 800b038:	4293      	cmp	r3, r2
 800b03a:	d003      	beq.n	800b044 <TIM_OC4_SetConfig+0x78>
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	4a16      	ldr	r2, [pc, #88]	@ (800b098 <TIM_OC4_SetConfig+0xcc>)
 800b040:	4293      	cmp	r3, r2
 800b042:	d109      	bne.n	800b058 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b044:	697b      	ldr	r3, [r7, #20]
 800b046:	4a15      	ldr	r2, [pc, #84]	@ (800b09c <TIM_OC4_SetConfig+0xd0>)
 800b048:	4013      	ands	r3, r2
 800b04a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b04c:	683b      	ldr	r3, [r7, #0]
 800b04e:	695b      	ldr	r3, [r3, #20]
 800b050:	019b      	lsls	r3, r3, #6
 800b052:	697a      	ldr	r2, [r7, #20]
 800b054:	4313      	orrs	r3, r2
 800b056:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	697a      	ldr	r2, [r7, #20]
 800b05c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	68fa      	ldr	r2, [r7, #12]
 800b062:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b064:	683b      	ldr	r3, [r7, #0]
 800b066:	685a      	ldr	r2, [r3, #4]
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	693a      	ldr	r2, [r7, #16]
 800b070:	621a      	str	r2, [r3, #32]
}
 800b072:	46c0      	nop			@ (mov r8, r8)
 800b074:	46bd      	mov	sp, r7
 800b076:	b006      	add	sp, #24
 800b078:	bd80      	pop	{r7, pc}
 800b07a:	46c0      	nop			@ (mov r8, r8)
 800b07c:	ffffefff 	.word	0xffffefff
 800b080:	feff8fff 	.word	0xfeff8fff
 800b084:	fffffcff 	.word	0xfffffcff
 800b088:	ffffdfff 	.word	0xffffdfff
 800b08c:	40012c00 	.word	0x40012c00
 800b090:	40014000 	.word	0x40014000
 800b094:	40014400 	.word	0x40014400
 800b098:	40014800 	.word	0x40014800
 800b09c:	ffffbfff 	.word	0xffffbfff

0800b0a0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b086      	sub	sp, #24
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
 800b0a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	6a1b      	ldr	r3, [r3, #32]
 800b0ae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	6a1b      	ldr	r3, [r3, #32]
 800b0b4:	4a23      	ldr	r2, [pc, #140]	@ (800b144 <TIM_OC5_SetConfig+0xa4>)
 800b0b6:	401a      	ands	r2, r3
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	685b      	ldr	r3, [r3, #4]
 800b0c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b0c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	4a1f      	ldr	r2, [pc, #124]	@ (800b148 <TIM_OC5_SetConfig+0xa8>)
 800b0cc:	4013      	ands	r3, r2
 800b0ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b0d0:	683b      	ldr	r3, [r7, #0]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	68fa      	ldr	r2, [r7, #12]
 800b0d6:	4313      	orrs	r3, r2
 800b0d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b0da:	693b      	ldr	r3, [r7, #16]
 800b0dc:	4a1b      	ldr	r2, [pc, #108]	@ (800b14c <TIM_OC5_SetConfig+0xac>)
 800b0de:	4013      	ands	r3, r2
 800b0e0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b0e2:	683b      	ldr	r3, [r7, #0]
 800b0e4:	689b      	ldr	r3, [r3, #8]
 800b0e6:	041b      	lsls	r3, r3, #16
 800b0e8:	693a      	ldr	r2, [r7, #16]
 800b0ea:	4313      	orrs	r3, r2
 800b0ec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	4a17      	ldr	r2, [pc, #92]	@ (800b150 <TIM_OC5_SetConfig+0xb0>)
 800b0f2:	4293      	cmp	r3, r2
 800b0f4:	d00b      	beq.n	800b10e <TIM_OC5_SetConfig+0x6e>
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	4a16      	ldr	r2, [pc, #88]	@ (800b154 <TIM_OC5_SetConfig+0xb4>)
 800b0fa:	4293      	cmp	r3, r2
 800b0fc:	d007      	beq.n	800b10e <TIM_OC5_SetConfig+0x6e>
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	4a15      	ldr	r2, [pc, #84]	@ (800b158 <TIM_OC5_SetConfig+0xb8>)
 800b102:	4293      	cmp	r3, r2
 800b104:	d003      	beq.n	800b10e <TIM_OC5_SetConfig+0x6e>
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	4a14      	ldr	r2, [pc, #80]	@ (800b15c <TIM_OC5_SetConfig+0xbc>)
 800b10a:	4293      	cmp	r3, r2
 800b10c:	d109      	bne.n	800b122 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b10e:	697b      	ldr	r3, [r7, #20]
 800b110:	4a0c      	ldr	r2, [pc, #48]	@ (800b144 <TIM_OC5_SetConfig+0xa4>)
 800b112:	4013      	ands	r3, r2
 800b114:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	695b      	ldr	r3, [r3, #20]
 800b11a:	021b      	lsls	r3, r3, #8
 800b11c:	697a      	ldr	r2, [r7, #20]
 800b11e:	4313      	orrs	r3, r2
 800b120:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	697a      	ldr	r2, [r7, #20]
 800b126:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	68fa      	ldr	r2, [r7, #12]
 800b12c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b12e:	683b      	ldr	r3, [r7, #0]
 800b130:	685a      	ldr	r2, [r3, #4]
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	693a      	ldr	r2, [r7, #16]
 800b13a:	621a      	str	r2, [r3, #32]
}
 800b13c:	46c0      	nop			@ (mov r8, r8)
 800b13e:	46bd      	mov	sp, r7
 800b140:	b006      	add	sp, #24
 800b142:	bd80      	pop	{r7, pc}
 800b144:	fffeffff 	.word	0xfffeffff
 800b148:	fffeff8f 	.word	0xfffeff8f
 800b14c:	fffdffff 	.word	0xfffdffff
 800b150:	40012c00 	.word	0x40012c00
 800b154:	40014000 	.word	0x40014000
 800b158:	40014400 	.word	0x40014400
 800b15c:	40014800 	.word	0x40014800

0800b160 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b086      	sub	sp, #24
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
 800b168:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	6a1b      	ldr	r3, [r3, #32]
 800b16e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	6a1b      	ldr	r3, [r3, #32]
 800b174:	4a24      	ldr	r2, [pc, #144]	@ (800b208 <TIM_OC6_SetConfig+0xa8>)
 800b176:	401a      	ands	r2, r3
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	685b      	ldr	r3, [r3, #4]
 800b180:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	4a20      	ldr	r2, [pc, #128]	@ (800b20c <TIM_OC6_SetConfig+0xac>)
 800b18c:	4013      	ands	r3, r2
 800b18e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b190:	683b      	ldr	r3, [r7, #0]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	021b      	lsls	r3, r3, #8
 800b196:	68fa      	ldr	r2, [r7, #12]
 800b198:	4313      	orrs	r3, r2
 800b19a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b19c:	693b      	ldr	r3, [r7, #16]
 800b19e:	4a1c      	ldr	r2, [pc, #112]	@ (800b210 <TIM_OC6_SetConfig+0xb0>)
 800b1a0:	4013      	ands	r3, r2
 800b1a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b1a4:	683b      	ldr	r3, [r7, #0]
 800b1a6:	689b      	ldr	r3, [r3, #8]
 800b1a8:	051b      	lsls	r3, r3, #20
 800b1aa:	693a      	ldr	r2, [r7, #16]
 800b1ac:	4313      	orrs	r3, r2
 800b1ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	4a18      	ldr	r2, [pc, #96]	@ (800b214 <TIM_OC6_SetConfig+0xb4>)
 800b1b4:	4293      	cmp	r3, r2
 800b1b6:	d00b      	beq.n	800b1d0 <TIM_OC6_SetConfig+0x70>
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	4a17      	ldr	r2, [pc, #92]	@ (800b218 <TIM_OC6_SetConfig+0xb8>)
 800b1bc:	4293      	cmp	r3, r2
 800b1be:	d007      	beq.n	800b1d0 <TIM_OC6_SetConfig+0x70>
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	4a16      	ldr	r2, [pc, #88]	@ (800b21c <TIM_OC6_SetConfig+0xbc>)
 800b1c4:	4293      	cmp	r3, r2
 800b1c6:	d003      	beq.n	800b1d0 <TIM_OC6_SetConfig+0x70>
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	4a15      	ldr	r2, [pc, #84]	@ (800b220 <TIM_OC6_SetConfig+0xc0>)
 800b1cc:	4293      	cmp	r3, r2
 800b1ce:	d109      	bne.n	800b1e4 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b1d0:	697b      	ldr	r3, [r7, #20]
 800b1d2:	4a14      	ldr	r2, [pc, #80]	@ (800b224 <TIM_OC6_SetConfig+0xc4>)
 800b1d4:	4013      	ands	r3, r2
 800b1d6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b1d8:	683b      	ldr	r3, [r7, #0]
 800b1da:	695b      	ldr	r3, [r3, #20]
 800b1dc:	029b      	lsls	r3, r3, #10
 800b1de:	697a      	ldr	r2, [r7, #20]
 800b1e0:	4313      	orrs	r3, r2
 800b1e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	697a      	ldr	r2, [r7, #20]
 800b1e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	68fa      	ldr	r2, [r7, #12]
 800b1ee:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b1f0:	683b      	ldr	r3, [r7, #0]
 800b1f2:	685a      	ldr	r2, [r3, #4]
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	693a      	ldr	r2, [r7, #16]
 800b1fc:	621a      	str	r2, [r3, #32]
}
 800b1fe:	46c0      	nop			@ (mov r8, r8)
 800b200:	46bd      	mov	sp, r7
 800b202:	b006      	add	sp, #24
 800b204:	bd80      	pop	{r7, pc}
 800b206:	46c0      	nop			@ (mov r8, r8)
 800b208:	ffefffff 	.word	0xffefffff
 800b20c:	feff8fff 	.word	0xfeff8fff
 800b210:	ffdfffff 	.word	0xffdfffff
 800b214:	40012c00 	.word	0x40012c00
 800b218:	40014000 	.word	0x40014000
 800b21c:	40014400 	.word	0x40014400
 800b220:	40014800 	.word	0x40014800
 800b224:	fffbffff 	.word	0xfffbffff

0800b228 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b228:	b580      	push	{r7, lr}
 800b22a:	b086      	sub	sp, #24
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	60f8      	str	r0, [r7, #12]
 800b230:	60b9      	str	r1, [r7, #8]
 800b232:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b234:	68bb      	ldr	r3, [r7, #8]
 800b236:	221f      	movs	r2, #31
 800b238:	4013      	ands	r3, r2
 800b23a:	2201      	movs	r2, #1
 800b23c:	409a      	lsls	r2, r3
 800b23e:	0013      	movs	r3, r2
 800b240:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	6a1b      	ldr	r3, [r3, #32]
 800b246:	697a      	ldr	r2, [r7, #20]
 800b248:	43d2      	mvns	r2, r2
 800b24a:	401a      	ands	r2, r3
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	6a1a      	ldr	r2, [r3, #32]
 800b254:	68bb      	ldr	r3, [r7, #8]
 800b256:	211f      	movs	r1, #31
 800b258:	400b      	ands	r3, r1
 800b25a:	6879      	ldr	r1, [r7, #4]
 800b25c:	4099      	lsls	r1, r3
 800b25e:	000b      	movs	r3, r1
 800b260:	431a      	orrs	r2, r3
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	621a      	str	r2, [r3, #32]
}
 800b266:	46c0      	nop			@ (mov r8, r8)
 800b268:	46bd      	mov	sp, r7
 800b26a:	b006      	add	sp, #24
 800b26c:	bd80      	pop	{r7, pc}
	...

0800b270 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b084      	sub	sp, #16
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
 800b278:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b27a:	2300      	movs	r3, #0
 800b27c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	223c      	movs	r2, #60	@ 0x3c
 800b282:	5c9b      	ldrb	r3, [r3, r2]
 800b284:	2b01      	cmp	r3, #1
 800b286:	d101      	bne.n	800b28c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b288:	2302      	movs	r3, #2
 800b28a:	e06f      	b.n	800b36c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	223c      	movs	r2, #60	@ 0x3c
 800b290:	2101      	movs	r1, #1
 800b292:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	22ff      	movs	r2, #255	@ 0xff
 800b298:	4393      	bics	r3, r2
 800b29a:	001a      	movs	r2, r3
 800b29c:	683b      	ldr	r3, [r7, #0]
 800b29e:	68db      	ldr	r3, [r3, #12]
 800b2a0:	4313      	orrs	r3, r2
 800b2a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	4a33      	ldr	r2, [pc, #204]	@ (800b374 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 800b2a8:	401a      	ands	r2, r3
 800b2aa:	683b      	ldr	r3, [r7, #0]
 800b2ac:	689b      	ldr	r3, [r3, #8]
 800b2ae:	4313      	orrs	r3, r2
 800b2b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	4a30      	ldr	r2, [pc, #192]	@ (800b378 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800b2b6:	401a      	ands	r2, r3
 800b2b8:	683b      	ldr	r3, [r7, #0]
 800b2ba:	685b      	ldr	r3, [r3, #4]
 800b2bc:	4313      	orrs	r3, r2
 800b2be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	4a2e      	ldr	r2, [pc, #184]	@ (800b37c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 800b2c4:	401a      	ands	r2, r3
 800b2c6:	683b      	ldr	r3, [r7, #0]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	4313      	orrs	r3, r2
 800b2cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	4a2b      	ldr	r2, [pc, #172]	@ (800b380 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800b2d2:	401a      	ands	r2, r3
 800b2d4:	683b      	ldr	r3, [r7, #0]
 800b2d6:	691b      	ldr	r3, [r3, #16]
 800b2d8:	4313      	orrs	r3, r2
 800b2da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	4a29      	ldr	r2, [pc, #164]	@ (800b384 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800b2e0:	401a      	ands	r2, r3
 800b2e2:	683b      	ldr	r3, [r7, #0]
 800b2e4:	695b      	ldr	r3, [r3, #20]
 800b2e6:	4313      	orrs	r3, r2
 800b2e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	4a26      	ldr	r2, [pc, #152]	@ (800b388 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800b2ee:	401a      	ands	r2, r3
 800b2f0:	683b      	ldr	r3, [r7, #0]
 800b2f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b2f4:	4313      	orrs	r3, r2
 800b2f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	4a24      	ldr	r2, [pc, #144]	@ (800b38c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800b2fc:	401a      	ands	r2, r3
 800b2fe:	683b      	ldr	r3, [r7, #0]
 800b300:	699b      	ldr	r3, [r3, #24]
 800b302:	041b      	lsls	r3, r3, #16
 800b304:	4313      	orrs	r3, r2
 800b306:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	4a21      	ldr	r2, [pc, #132]	@ (800b390 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800b30c:	401a      	ands	r2, r3
 800b30e:	683b      	ldr	r3, [r7, #0]
 800b310:	69db      	ldr	r3, [r3, #28]
 800b312:	4313      	orrs	r3, r2
 800b314:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	4a1e      	ldr	r2, [pc, #120]	@ (800b394 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800b31c:	4293      	cmp	r3, r2
 800b31e:	d11c      	bne.n	800b35a <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	4a1d      	ldr	r2, [pc, #116]	@ (800b398 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800b324:	401a      	ands	r2, r3
 800b326:	683b      	ldr	r3, [r7, #0]
 800b328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b32a:	051b      	lsls	r3, r3, #20
 800b32c:	4313      	orrs	r3, r2
 800b32e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	4a1a      	ldr	r2, [pc, #104]	@ (800b39c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800b334:	401a      	ands	r2, r3
 800b336:	683b      	ldr	r3, [r7, #0]
 800b338:	6a1b      	ldr	r3, [r3, #32]
 800b33a:	4313      	orrs	r3, r2
 800b33c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	4a17      	ldr	r2, [pc, #92]	@ (800b3a0 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800b342:	401a      	ands	r2, r3
 800b344:	683b      	ldr	r3, [r7, #0]
 800b346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b348:	4313      	orrs	r3, r2
 800b34a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	4a15      	ldr	r2, [pc, #84]	@ (800b3a4 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800b350:	401a      	ands	r2, r3
 800b352:	683b      	ldr	r3, [r7, #0]
 800b354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b356:	4313      	orrs	r3, r2
 800b358:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	68fa      	ldr	r2, [r7, #12]
 800b360:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	223c      	movs	r2, #60	@ 0x3c
 800b366:	2100      	movs	r1, #0
 800b368:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b36a:	2300      	movs	r3, #0
}
 800b36c:	0018      	movs	r0, r3
 800b36e:	46bd      	mov	sp, r7
 800b370:	b004      	add	sp, #16
 800b372:	bd80      	pop	{r7, pc}
 800b374:	fffffcff 	.word	0xfffffcff
 800b378:	fffffbff 	.word	0xfffffbff
 800b37c:	fffff7ff 	.word	0xfffff7ff
 800b380:	ffffefff 	.word	0xffffefff
 800b384:	ffffdfff 	.word	0xffffdfff
 800b388:	ffffbfff 	.word	0xffffbfff
 800b38c:	fff0ffff 	.word	0xfff0ffff
 800b390:	efffffff 	.word	0xefffffff
 800b394:	40012c00 	.word	0x40012c00
 800b398:	ff0fffff 	.word	0xff0fffff
 800b39c:	feffffff 	.word	0xfeffffff
 800b3a0:	fdffffff 	.word	0xfdffffff
 800b3a4:	dfffffff 	.word	0xdfffffff

0800b3a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b082      	sub	sp, #8
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d101      	bne.n	800b3ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b3b6:	2301      	movs	r3, #1
 800b3b8:	e046      	b.n	800b448 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	2288      	movs	r2, #136	@ 0x88
 800b3be:	589b      	ldr	r3, [r3, r2]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d107      	bne.n	800b3d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	2284      	movs	r2, #132	@ 0x84
 800b3c8:	2100      	movs	r1, #0
 800b3ca:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	0018      	movs	r0, r3
 800b3d0:	f7fb fa58 	bl	8006884 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	2288      	movs	r2, #136	@ 0x88
 800b3d8:	2124      	movs	r1, #36	@ 0x24
 800b3da:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	681a      	ldr	r2, [r3, #0]
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	2101      	movs	r1, #1
 800b3e8:	438a      	bics	r2, r1
 800b3ea:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d003      	beq.n	800b3fc <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	0018      	movs	r0, r3
 800b3f8:	f000 fd0c 	bl	800be14 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	0018      	movs	r0, r3
 800b400:	f000 f9b2 	bl	800b768 <UART_SetConfig>
 800b404:	0003      	movs	r3, r0
 800b406:	2b01      	cmp	r3, #1
 800b408:	d101      	bne.n	800b40e <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800b40a:	2301      	movs	r3, #1
 800b40c:	e01c      	b.n	800b448 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	685a      	ldr	r2, [r3, #4]
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	490d      	ldr	r1, [pc, #52]	@ (800b450 <HAL_UART_Init+0xa8>)
 800b41a:	400a      	ands	r2, r1
 800b41c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	689a      	ldr	r2, [r3, #8]
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	212a      	movs	r1, #42	@ 0x2a
 800b42a:	438a      	bics	r2, r1
 800b42c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	681a      	ldr	r2, [r3, #0]
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	2101      	movs	r1, #1
 800b43a:	430a      	orrs	r2, r1
 800b43c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	0018      	movs	r0, r3
 800b442:	f000 fd9b 	bl	800bf7c <UART_CheckIdleState>
 800b446:	0003      	movs	r3, r0
}
 800b448:	0018      	movs	r0, r3
 800b44a:	46bd      	mov	sp, r7
 800b44c:	b002      	add	sp, #8
 800b44e:	bd80      	pop	{r7, pc}
 800b450:	ffffb7ff 	.word	0xffffb7ff

0800b454 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b454:	b580      	push	{r7, lr}
 800b456:	b08a      	sub	sp, #40	@ 0x28
 800b458:	af02      	add	r7, sp, #8
 800b45a:	60f8      	str	r0, [r7, #12]
 800b45c:	60b9      	str	r1, [r7, #8]
 800b45e:	603b      	str	r3, [r7, #0]
 800b460:	1dbb      	adds	r3, r7, #6
 800b462:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	2288      	movs	r2, #136	@ 0x88
 800b468:	589b      	ldr	r3, [r3, r2]
 800b46a:	2b20      	cmp	r3, #32
 800b46c:	d000      	beq.n	800b470 <HAL_UART_Transmit+0x1c>
 800b46e:	e090      	b.n	800b592 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b470:	68bb      	ldr	r3, [r7, #8]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d003      	beq.n	800b47e <HAL_UART_Transmit+0x2a>
 800b476:	1dbb      	adds	r3, r7, #6
 800b478:	881b      	ldrh	r3, [r3, #0]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d101      	bne.n	800b482 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800b47e:	2301      	movs	r3, #1
 800b480:	e088      	b.n	800b594 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	689a      	ldr	r2, [r3, #8]
 800b486:	2380      	movs	r3, #128	@ 0x80
 800b488:	015b      	lsls	r3, r3, #5
 800b48a:	429a      	cmp	r2, r3
 800b48c:	d109      	bne.n	800b4a2 <HAL_UART_Transmit+0x4e>
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	691b      	ldr	r3, [r3, #16]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d105      	bne.n	800b4a2 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800b496:	68bb      	ldr	r3, [r7, #8]
 800b498:	2201      	movs	r2, #1
 800b49a:	4013      	ands	r3, r2
 800b49c:	d001      	beq.n	800b4a2 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800b49e:	2301      	movs	r3, #1
 800b4a0:	e078      	b.n	800b594 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	2290      	movs	r2, #144	@ 0x90
 800b4a6:	2100      	movs	r1, #0
 800b4a8:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	2288      	movs	r2, #136	@ 0x88
 800b4ae:	2121      	movs	r1, #33	@ 0x21
 800b4b0:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b4b2:	f7fc f96f 	bl	8007794 <HAL_GetTick>
 800b4b6:	0003      	movs	r3, r0
 800b4b8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	1dba      	adds	r2, r7, #6
 800b4be:	2154      	movs	r1, #84	@ 0x54
 800b4c0:	8812      	ldrh	r2, [r2, #0]
 800b4c2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	1dba      	adds	r2, r7, #6
 800b4c8:	2156      	movs	r1, #86	@ 0x56
 800b4ca:	8812      	ldrh	r2, [r2, #0]
 800b4cc:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	689a      	ldr	r2, [r3, #8]
 800b4d2:	2380      	movs	r3, #128	@ 0x80
 800b4d4:	015b      	lsls	r3, r3, #5
 800b4d6:	429a      	cmp	r2, r3
 800b4d8:	d108      	bne.n	800b4ec <HAL_UART_Transmit+0x98>
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	691b      	ldr	r3, [r3, #16]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d104      	bne.n	800b4ec <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b4e6:	68bb      	ldr	r3, [r7, #8]
 800b4e8:	61bb      	str	r3, [r7, #24]
 800b4ea:	e003      	b.n	800b4f4 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 800b4ec:	68bb      	ldr	r3, [r7, #8]
 800b4ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b4f4:	e030      	b.n	800b558 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b4f6:	697a      	ldr	r2, [r7, #20]
 800b4f8:	68f8      	ldr	r0, [r7, #12]
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	9300      	str	r3, [sp, #0]
 800b4fe:	0013      	movs	r3, r2
 800b500:	2200      	movs	r2, #0
 800b502:	2180      	movs	r1, #128	@ 0x80
 800b504:	f000 fde4 	bl	800c0d0 <UART_WaitOnFlagUntilTimeout>
 800b508:	1e03      	subs	r3, r0, #0
 800b50a:	d005      	beq.n	800b518 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	2288      	movs	r2, #136	@ 0x88
 800b510:	2120      	movs	r1, #32
 800b512:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 800b514:	2303      	movs	r3, #3
 800b516:	e03d      	b.n	800b594 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 800b518:	69fb      	ldr	r3, [r7, #28]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d10b      	bne.n	800b536 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b51e:	69bb      	ldr	r3, [r7, #24]
 800b520:	881b      	ldrh	r3, [r3, #0]
 800b522:	001a      	movs	r2, r3
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	05d2      	lsls	r2, r2, #23
 800b52a:	0dd2      	lsrs	r2, r2, #23
 800b52c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800b52e:	69bb      	ldr	r3, [r7, #24]
 800b530:	3302      	adds	r3, #2
 800b532:	61bb      	str	r3, [r7, #24]
 800b534:	e007      	b.n	800b546 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b536:	69fb      	ldr	r3, [r7, #28]
 800b538:	781a      	ldrb	r2, [r3, #0]
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800b540:	69fb      	ldr	r3, [r7, #28]
 800b542:	3301      	adds	r3, #1
 800b544:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	2256      	movs	r2, #86	@ 0x56
 800b54a:	5a9b      	ldrh	r3, [r3, r2]
 800b54c:	b29b      	uxth	r3, r3
 800b54e:	3b01      	subs	r3, #1
 800b550:	b299      	uxth	r1, r3
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	2256      	movs	r2, #86	@ 0x56
 800b556:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	2256      	movs	r2, #86	@ 0x56
 800b55c:	5a9b      	ldrh	r3, [r3, r2]
 800b55e:	b29b      	uxth	r3, r3
 800b560:	2b00      	cmp	r3, #0
 800b562:	d1c8      	bne.n	800b4f6 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b564:	697a      	ldr	r2, [r7, #20]
 800b566:	68f8      	ldr	r0, [r7, #12]
 800b568:	683b      	ldr	r3, [r7, #0]
 800b56a:	9300      	str	r3, [sp, #0]
 800b56c:	0013      	movs	r3, r2
 800b56e:	2200      	movs	r2, #0
 800b570:	2140      	movs	r1, #64	@ 0x40
 800b572:	f000 fdad 	bl	800c0d0 <UART_WaitOnFlagUntilTimeout>
 800b576:	1e03      	subs	r3, r0, #0
 800b578:	d005      	beq.n	800b586 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	2288      	movs	r2, #136	@ 0x88
 800b57e:	2120      	movs	r1, #32
 800b580:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 800b582:	2303      	movs	r3, #3
 800b584:	e006      	b.n	800b594 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	2288      	movs	r2, #136	@ 0x88
 800b58a:	2120      	movs	r1, #32
 800b58c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800b58e:	2300      	movs	r3, #0
 800b590:	e000      	b.n	800b594 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 800b592:	2302      	movs	r3, #2
  }
}
 800b594:	0018      	movs	r0, r3
 800b596:	46bd      	mov	sp, r7
 800b598:	b008      	add	sp, #32
 800b59a:	bd80      	pop	{r7, pc}

0800b59c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b08a      	sub	sp, #40	@ 0x28
 800b5a0:	af02      	add	r7, sp, #8
 800b5a2:	60f8      	str	r0, [r7, #12]
 800b5a4:	60b9      	str	r1, [r7, #8]
 800b5a6:	603b      	str	r3, [r7, #0]
 800b5a8:	1dbb      	adds	r3, r7, #6
 800b5aa:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	228c      	movs	r2, #140	@ 0x8c
 800b5b0:	589b      	ldr	r3, [r3, r2]
 800b5b2:	2b20      	cmp	r3, #32
 800b5b4:	d000      	beq.n	800b5b8 <HAL_UART_Receive+0x1c>
 800b5b6:	e0d0      	b.n	800b75a <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 800b5b8:	68bb      	ldr	r3, [r7, #8]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d003      	beq.n	800b5c6 <HAL_UART_Receive+0x2a>
 800b5be:	1dbb      	adds	r3, r7, #6
 800b5c0:	881b      	ldrh	r3, [r3, #0]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d101      	bne.n	800b5ca <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 800b5c6:	2301      	movs	r3, #1
 800b5c8:	e0c8      	b.n	800b75c <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	689a      	ldr	r2, [r3, #8]
 800b5ce:	2380      	movs	r3, #128	@ 0x80
 800b5d0:	015b      	lsls	r3, r3, #5
 800b5d2:	429a      	cmp	r2, r3
 800b5d4:	d109      	bne.n	800b5ea <HAL_UART_Receive+0x4e>
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	691b      	ldr	r3, [r3, #16]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d105      	bne.n	800b5ea <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800b5de:	68bb      	ldr	r3, [r7, #8]
 800b5e0:	2201      	movs	r2, #1
 800b5e2:	4013      	ands	r3, r2
 800b5e4:	d001      	beq.n	800b5ea <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 800b5e6:	2301      	movs	r3, #1
 800b5e8:	e0b8      	b.n	800b75c <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	2290      	movs	r2, #144	@ 0x90
 800b5ee:	2100      	movs	r1, #0
 800b5f0:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	228c      	movs	r2, #140	@ 0x8c
 800b5f6:	2122      	movs	r1, #34	@ 0x22
 800b5f8:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b600:	f7fc f8c8 	bl	8007794 <HAL_GetTick>
 800b604:	0003      	movs	r3, r0
 800b606:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	1dba      	adds	r2, r7, #6
 800b60c:	215c      	movs	r1, #92	@ 0x5c
 800b60e:	8812      	ldrh	r2, [r2, #0]
 800b610:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	1dba      	adds	r2, r7, #6
 800b616:	215e      	movs	r1, #94	@ 0x5e
 800b618:	8812      	ldrh	r2, [r2, #0]
 800b61a:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	689a      	ldr	r2, [r3, #8]
 800b620:	2380      	movs	r3, #128	@ 0x80
 800b622:	015b      	lsls	r3, r3, #5
 800b624:	429a      	cmp	r2, r3
 800b626:	d10d      	bne.n	800b644 <HAL_UART_Receive+0xa8>
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	691b      	ldr	r3, [r3, #16]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d104      	bne.n	800b63a <HAL_UART_Receive+0x9e>
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	2260      	movs	r2, #96	@ 0x60
 800b634:	494b      	ldr	r1, [pc, #300]	@ (800b764 <HAL_UART_Receive+0x1c8>)
 800b636:	5299      	strh	r1, [r3, r2]
 800b638:	e02e      	b.n	800b698 <HAL_UART_Receive+0xfc>
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	2260      	movs	r2, #96	@ 0x60
 800b63e:	21ff      	movs	r1, #255	@ 0xff
 800b640:	5299      	strh	r1, [r3, r2]
 800b642:	e029      	b.n	800b698 <HAL_UART_Receive+0xfc>
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	689b      	ldr	r3, [r3, #8]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d10d      	bne.n	800b668 <HAL_UART_Receive+0xcc>
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	691b      	ldr	r3, [r3, #16]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d104      	bne.n	800b65e <HAL_UART_Receive+0xc2>
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	2260      	movs	r2, #96	@ 0x60
 800b658:	21ff      	movs	r1, #255	@ 0xff
 800b65a:	5299      	strh	r1, [r3, r2]
 800b65c:	e01c      	b.n	800b698 <HAL_UART_Receive+0xfc>
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	2260      	movs	r2, #96	@ 0x60
 800b662:	217f      	movs	r1, #127	@ 0x7f
 800b664:	5299      	strh	r1, [r3, r2]
 800b666:	e017      	b.n	800b698 <HAL_UART_Receive+0xfc>
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	689a      	ldr	r2, [r3, #8]
 800b66c:	2380      	movs	r3, #128	@ 0x80
 800b66e:	055b      	lsls	r3, r3, #21
 800b670:	429a      	cmp	r2, r3
 800b672:	d10d      	bne.n	800b690 <HAL_UART_Receive+0xf4>
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	691b      	ldr	r3, [r3, #16]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d104      	bne.n	800b686 <HAL_UART_Receive+0xea>
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	2260      	movs	r2, #96	@ 0x60
 800b680:	217f      	movs	r1, #127	@ 0x7f
 800b682:	5299      	strh	r1, [r3, r2]
 800b684:	e008      	b.n	800b698 <HAL_UART_Receive+0xfc>
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	2260      	movs	r2, #96	@ 0x60
 800b68a:	213f      	movs	r1, #63	@ 0x3f
 800b68c:	5299      	strh	r1, [r3, r2]
 800b68e:	e003      	b.n	800b698 <HAL_UART_Receive+0xfc>
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	2260      	movs	r2, #96	@ 0x60
 800b694:	2100      	movs	r1, #0
 800b696:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 800b698:	2312      	movs	r3, #18
 800b69a:	18fb      	adds	r3, r7, r3
 800b69c:	68fa      	ldr	r2, [r7, #12]
 800b69e:	2160      	movs	r1, #96	@ 0x60
 800b6a0:	5a52      	ldrh	r2, [r2, r1]
 800b6a2:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	689a      	ldr	r2, [r3, #8]
 800b6a8:	2380      	movs	r3, #128	@ 0x80
 800b6aa:	015b      	lsls	r3, r3, #5
 800b6ac:	429a      	cmp	r2, r3
 800b6ae:	d108      	bne.n	800b6c2 <HAL_UART_Receive+0x126>
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	691b      	ldr	r3, [r3, #16]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d104      	bne.n	800b6c2 <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b6bc:	68bb      	ldr	r3, [r7, #8]
 800b6be:	61bb      	str	r3, [r7, #24]
 800b6c0:	e003      	b.n	800b6ca <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 800b6c2:	68bb      	ldr	r3, [r7, #8]
 800b6c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800b6ca:	e03a      	b.n	800b742 <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800b6cc:	697a      	ldr	r2, [r7, #20]
 800b6ce:	68f8      	ldr	r0, [r7, #12]
 800b6d0:	683b      	ldr	r3, [r7, #0]
 800b6d2:	9300      	str	r3, [sp, #0]
 800b6d4:	0013      	movs	r3, r2
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	2120      	movs	r1, #32
 800b6da:	f000 fcf9 	bl	800c0d0 <UART_WaitOnFlagUntilTimeout>
 800b6de:	1e03      	subs	r3, r0, #0
 800b6e0:	d005      	beq.n	800b6ee <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	228c      	movs	r2, #140	@ 0x8c
 800b6e6:	2120      	movs	r1, #32
 800b6e8:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 800b6ea:	2303      	movs	r3, #3
 800b6ec:	e036      	b.n	800b75c <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 800b6ee:	69fb      	ldr	r3, [r7, #28]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d10e      	bne.n	800b712 <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6fa:	b29b      	uxth	r3, r3
 800b6fc:	2212      	movs	r2, #18
 800b6fe:	18ba      	adds	r2, r7, r2
 800b700:	8812      	ldrh	r2, [r2, #0]
 800b702:	4013      	ands	r3, r2
 800b704:	b29a      	uxth	r2, r3
 800b706:	69bb      	ldr	r3, [r7, #24]
 800b708:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800b70a:	69bb      	ldr	r3, [r7, #24]
 800b70c:	3302      	adds	r3, #2
 800b70e:	61bb      	str	r3, [r7, #24]
 800b710:	e00e      	b.n	800b730 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b718:	b2db      	uxtb	r3, r3
 800b71a:	2212      	movs	r2, #18
 800b71c:	18ba      	adds	r2, r7, r2
 800b71e:	8812      	ldrh	r2, [r2, #0]
 800b720:	b2d2      	uxtb	r2, r2
 800b722:	4013      	ands	r3, r2
 800b724:	b2da      	uxtb	r2, r3
 800b726:	69fb      	ldr	r3, [r7, #28]
 800b728:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800b72a:	69fb      	ldr	r3, [r7, #28]
 800b72c:	3301      	adds	r3, #1
 800b72e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	225e      	movs	r2, #94	@ 0x5e
 800b734:	5a9b      	ldrh	r3, [r3, r2]
 800b736:	b29b      	uxth	r3, r3
 800b738:	3b01      	subs	r3, #1
 800b73a:	b299      	uxth	r1, r3
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	225e      	movs	r2, #94	@ 0x5e
 800b740:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	225e      	movs	r2, #94	@ 0x5e
 800b746:	5a9b      	ldrh	r3, [r3, r2]
 800b748:	b29b      	uxth	r3, r3
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d1be      	bne.n	800b6cc <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	228c      	movs	r2, #140	@ 0x8c
 800b752:	2120      	movs	r1, #32
 800b754:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800b756:	2300      	movs	r3, #0
 800b758:	e000      	b.n	800b75c <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 800b75a:	2302      	movs	r3, #2
  }
}
 800b75c:	0018      	movs	r0, r3
 800b75e:	46bd      	mov	sp, r7
 800b760:	b008      	add	sp, #32
 800b762:	bd80      	pop	{r7, pc}
 800b764:	000001ff 	.word	0x000001ff

0800b768 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b768:	b5b0      	push	{r4, r5, r7, lr}
 800b76a:	b090      	sub	sp, #64	@ 0x40
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b770:	231a      	movs	r3, #26
 800b772:	2220      	movs	r2, #32
 800b774:	189b      	adds	r3, r3, r2
 800b776:	19db      	adds	r3, r3, r7
 800b778:	2200      	movs	r2, #0
 800b77a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b77c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b77e:	689a      	ldr	r2, [r3, #8]
 800b780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b782:	691b      	ldr	r3, [r3, #16]
 800b784:	431a      	orrs	r2, r3
 800b786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b788:	695b      	ldr	r3, [r3, #20]
 800b78a:	431a      	orrs	r2, r3
 800b78c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b78e:	69db      	ldr	r3, [r3, #28]
 800b790:	4313      	orrs	r3, r2
 800b792:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	4ac1      	ldr	r2, [pc, #772]	@ (800baa0 <UART_SetConfig+0x338>)
 800b79c:	4013      	ands	r3, r2
 800b79e:	0019      	movs	r1, r3
 800b7a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7a2:	681a      	ldr	r2, [r3, #0]
 800b7a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7a6:	430b      	orrs	r3, r1
 800b7a8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b7aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	685b      	ldr	r3, [r3, #4]
 800b7b0:	4abc      	ldr	r2, [pc, #752]	@ (800baa4 <UART_SetConfig+0x33c>)
 800b7b2:	4013      	ands	r3, r2
 800b7b4:	0018      	movs	r0, r3
 800b7b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7b8:	68d9      	ldr	r1, [r3, #12]
 800b7ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7bc:	681a      	ldr	r2, [r3, #0]
 800b7be:	0003      	movs	r3, r0
 800b7c0:	430b      	orrs	r3, r1
 800b7c2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b7c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7c6:	699b      	ldr	r3, [r3, #24]
 800b7c8:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b7ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	4ab6      	ldr	r2, [pc, #728]	@ (800baa8 <UART_SetConfig+0x340>)
 800b7d0:	4293      	cmp	r3, r2
 800b7d2:	d009      	beq.n	800b7e8 <UART_SetConfig+0x80>
 800b7d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	4ab4      	ldr	r2, [pc, #720]	@ (800baac <UART_SetConfig+0x344>)
 800b7da:	4293      	cmp	r3, r2
 800b7dc:	d004      	beq.n	800b7e8 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b7de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7e0:	6a1b      	ldr	r3, [r3, #32]
 800b7e2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b7e4:	4313      	orrs	r3, r2
 800b7e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b7e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	689b      	ldr	r3, [r3, #8]
 800b7ee:	4ab0      	ldr	r2, [pc, #704]	@ (800bab0 <UART_SetConfig+0x348>)
 800b7f0:	4013      	ands	r3, r2
 800b7f2:	0019      	movs	r1, r3
 800b7f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7f6:	681a      	ldr	r2, [r3, #0]
 800b7f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7fa:	430b      	orrs	r3, r1
 800b7fc:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b7fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b804:	220f      	movs	r2, #15
 800b806:	4393      	bics	r3, r2
 800b808:	0018      	movs	r0, r3
 800b80a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b80c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800b80e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b810:	681a      	ldr	r2, [r3, #0]
 800b812:	0003      	movs	r3, r0
 800b814:	430b      	orrs	r3, r1
 800b816:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	4aa5      	ldr	r2, [pc, #660]	@ (800bab4 <UART_SetConfig+0x34c>)
 800b81e:	4293      	cmp	r3, r2
 800b820:	d131      	bne.n	800b886 <UART_SetConfig+0x11e>
 800b822:	4ba5      	ldr	r3, [pc, #660]	@ (800bab8 <UART_SetConfig+0x350>)
 800b824:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b826:	2203      	movs	r2, #3
 800b828:	4013      	ands	r3, r2
 800b82a:	2b03      	cmp	r3, #3
 800b82c:	d01d      	beq.n	800b86a <UART_SetConfig+0x102>
 800b82e:	d823      	bhi.n	800b878 <UART_SetConfig+0x110>
 800b830:	2b02      	cmp	r3, #2
 800b832:	d00c      	beq.n	800b84e <UART_SetConfig+0xe6>
 800b834:	d820      	bhi.n	800b878 <UART_SetConfig+0x110>
 800b836:	2b00      	cmp	r3, #0
 800b838:	d002      	beq.n	800b840 <UART_SetConfig+0xd8>
 800b83a:	2b01      	cmp	r3, #1
 800b83c:	d00e      	beq.n	800b85c <UART_SetConfig+0xf4>
 800b83e:	e01b      	b.n	800b878 <UART_SetConfig+0x110>
 800b840:	231b      	movs	r3, #27
 800b842:	2220      	movs	r2, #32
 800b844:	189b      	adds	r3, r3, r2
 800b846:	19db      	adds	r3, r3, r7
 800b848:	2200      	movs	r2, #0
 800b84a:	701a      	strb	r2, [r3, #0]
 800b84c:	e154      	b.n	800baf8 <UART_SetConfig+0x390>
 800b84e:	231b      	movs	r3, #27
 800b850:	2220      	movs	r2, #32
 800b852:	189b      	adds	r3, r3, r2
 800b854:	19db      	adds	r3, r3, r7
 800b856:	2202      	movs	r2, #2
 800b858:	701a      	strb	r2, [r3, #0]
 800b85a:	e14d      	b.n	800baf8 <UART_SetConfig+0x390>
 800b85c:	231b      	movs	r3, #27
 800b85e:	2220      	movs	r2, #32
 800b860:	189b      	adds	r3, r3, r2
 800b862:	19db      	adds	r3, r3, r7
 800b864:	2204      	movs	r2, #4
 800b866:	701a      	strb	r2, [r3, #0]
 800b868:	e146      	b.n	800baf8 <UART_SetConfig+0x390>
 800b86a:	231b      	movs	r3, #27
 800b86c:	2220      	movs	r2, #32
 800b86e:	189b      	adds	r3, r3, r2
 800b870:	19db      	adds	r3, r3, r7
 800b872:	2208      	movs	r2, #8
 800b874:	701a      	strb	r2, [r3, #0]
 800b876:	e13f      	b.n	800baf8 <UART_SetConfig+0x390>
 800b878:	231b      	movs	r3, #27
 800b87a:	2220      	movs	r2, #32
 800b87c:	189b      	adds	r3, r3, r2
 800b87e:	19db      	adds	r3, r3, r7
 800b880:	2210      	movs	r2, #16
 800b882:	701a      	strb	r2, [r3, #0]
 800b884:	e138      	b.n	800baf8 <UART_SetConfig+0x390>
 800b886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	4a8c      	ldr	r2, [pc, #560]	@ (800babc <UART_SetConfig+0x354>)
 800b88c:	4293      	cmp	r3, r2
 800b88e:	d131      	bne.n	800b8f4 <UART_SetConfig+0x18c>
 800b890:	4b89      	ldr	r3, [pc, #548]	@ (800bab8 <UART_SetConfig+0x350>)
 800b892:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b894:	220c      	movs	r2, #12
 800b896:	4013      	ands	r3, r2
 800b898:	2b0c      	cmp	r3, #12
 800b89a:	d01d      	beq.n	800b8d8 <UART_SetConfig+0x170>
 800b89c:	d823      	bhi.n	800b8e6 <UART_SetConfig+0x17e>
 800b89e:	2b08      	cmp	r3, #8
 800b8a0:	d00c      	beq.n	800b8bc <UART_SetConfig+0x154>
 800b8a2:	d820      	bhi.n	800b8e6 <UART_SetConfig+0x17e>
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d002      	beq.n	800b8ae <UART_SetConfig+0x146>
 800b8a8:	2b04      	cmp	r3, #4
 800b8aa:	d00e      	beq.n	800b8ca <UART_SetConfig+0x162>
 800b8ac:	e01b      	b.n	800b8e6 <UART_SetConfig+0x17e>
 800b8ae:	231b      	movs	r3, #27
 800b8b0:	2220      	movs	r2, #32
 800b8b2:	189b      	adds	r3, r3, r2
 800b8b4:	19db      	adds	r3, r3, r7
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	701a      	strb	r2, [r3, #0]
 800b8ba:	e11d      	b.n	800baf8 <UART_SetConfig+0x390>
 800b8bc:	231b      	movs	r3, #27
 800b8be:	2220      	movs	r2, #32
 800b8c0:	189b      	adds	r3, r3, r2
 800b8c2:	19db      	adds	r3, r3, r7
 800b8c4:	2202      	movs	r2, #2
 800b8c6:	701a      	strb	r2, [r3, #0]
 800b8c8:	e116      	b.n	800baf8 <UART_SetConfig+0x390>
 800b8ca:	231b      	movs	r3, #27
 800b8cc:	2220      	movs	r2, #32
 800b8ce:	189b      	adds	r3, r3, r2
 800b8d0:	19db      	adds	r3, r3, r7
 800b8d2:	2204      	movs	r2, #4
 800b8d4:	701a      	strb	r2, [r3, #0]
 800b8d6:	e10f      	b.n	800baf8 <UART_SetConfig+0x390>
 800b8d8:	231b      	movs	r3, #27
 800b8da:	2220      	movs	r2, #32
 800b8dc:	189b      	adds	r3, r3, r2
 800b8de:	19db      	adds	r3, r3, r7
 800b8e0:	2208      	movs	r2, #8
 800b8e2:	701a      	strb	r2, [r3, #0]
 800b8e4:	e108      	b.n	800baf8 <UART_SetConfig+0x390>
 800b8e6:	231b      	movs	r3, #27
 800b8e8:	2220      	movs	r2, #32
 800b8ea:	189b      	adds	r3, r3, r2
 800b8ec:	19db      	adds	r3, r3, r7
 800b8ee:	2210      	movs	r2, #16
 800b8f0:	701a      	strb	r2, [r3, #0]
 800b8f2:	e101      	b.n	800baf8 <UART_SetConfig+0x390>
 800b8f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	4a71      	ldr	r2, [pc, #452]	@ (800bac0 <UART_SetConfig+0x358>)
 800b8fa:	4293      	cmp	r3, r2
 800b8fc:	d131      	bne.n	800b962 <UART_SetConfig+0x1fa>
 800b8fe:	4b6e      	ldr	r3, [pc, #440]	@ (800bab8 <UART_SetConfig+0x350>)
 800b900:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b902:	2230      	movs	r2, #48	@ 0x30
 800b904:	4013      	ands	r3, r2
 800b906:	2b30      	cmp	r3, #48	@ 0x30
 800b908:	d01d      	beq.n	800b946 <UART_SetConfig+0x1de>
 800b90a:	d823      	bhi.n	800b954 <UART_SetConfig+0x1ec>
 800b90c:	2b20      	cmp	r3, #32
 800b90e:	d00c      	beq.n	800b92a <UART_SetConfig+0x1c2>
 800b910:	d820      	bhi.n	800b954 <UART_SetConfig+0x1ec>
 800b912:	2b00      	cmp	r3, #0
 800b914:	d002      	beq.n	800b91c <UART_SetConfig+0x1b4>
 800b916:	2b10      	cmp	r3, #16
 800b918:	d00e      	beq.n	800b938 <UART_SetConfig+0x1d0>
 800b91a:	e01b      	b.n	800b954 <UART_SetConfig+0x1ec>
 800b91c:	231b      	movs	r3, #27
 800b91e:	2220      	movs	r2, #32
 800b920:	189b      	adds	r3, r3, r2
 800b922:	19db      	adds	r3, r3, r7
 800b924:	2200      	movs	r2, #0
 800b926:	701a      	strb	r2, [r3, #0]
 800b928:	e0e6      	b.n	800baf8 <UART_SetConfig+0x390>
 800b92a:	231b      	movs	r3, #27
 800b92c:	2220      	movs	r2, #32
 800b92e:	189b      	adds	r3, r3, r2
 800b930:	19db      	adds	r3, r3, r7
 800b932:	2202      	movs	r2, #2
 800b934:	701a      	strb	r2, [r3, #0]
 800b936:	e0df      	b.n	800baf8 <UART_SetConfig+0x390>
 800b938:	231b      	movs	r3, #27
 800b93a:	2220      	movs	r2, #32
 800b93c:	189b      	adds	r3, r3, r2
 800b93e:	19db      	adds	r3, r3, r7
 800b940:	2204      	movs	r2, #4
 800b942:	701a      	strb	r2, [r3, #0]
 800b944:	e0d8      	b.n	800baf8 <UART_SetConfig+0x390>
 800b946:	231b      	movs	r3, #27
 800b948:	2220      	movs	r2, #32
 800b94a:	189b      	adds	r3, r3, r2
 800b94c:	19db      	adds	r3, r3, r7
 800b94e:	2208      	movs	r2, #8
 800b950:	701a      	strb	r2, [r3, #0]
 800b952:	e0d1      	b.n	800baf8 <UART_SetConfig+0x390>
 800b954:	231b      	movs	r3, #27
 800b956:	2220      	movs	r2, #32
 800b958:	189b      	adds	r3, r3, r2
 800b95a:	19db      	adds	r3, r3, r7
 800b95c:	2210      	movs	r2, #16
 800b95e:	701a      	strb	r2, [r3, #0]
 800b960:	e0ca      	b.n	800baf8 <UART_SetConfig+0x390>
 800b962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	4a57      	ldr	r2, [pc, #348]	@ (800bac4 <UART_SetConfig+0x35c>)
 800b968:	4293      	cmp	r3, r2
 800b96a:	d106      	bne.n	800b97a <UART_SetConfig+0x212>
 800b96c:	231b      	movs	r3, #27
 800b96e:	2220      	movs	r2, #32
 800b970:	189b      	adds	r3, r3, r2
 800b972:	19db      	adds	r3, r3, r7
 800b974:	2200      	movs	r2, #0
 800b976:	701a      	strb	r2, [r3, #0]
 800b978:	e0be      	b.n	800baf8 <UART_SetConfig+0x390>
 800b97a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	4a52      	ldr	r2, [pc, #328]	@ (800bac8 <UART_SetConfig+0x360>)
 800b980:	4293      	cmp	r3, r2
 800b982:	d106      	bne.n	800b992 <UART_SetConfig+0x22a>
 800b984:	231b      	movs	r3, #27
 800b986:	2220      	movs	r2, #32
 800b988:	189b      	adds	r3, r3, r2
 800b98a:	19db      	adds	r3, r3, r7
 800b98c:	2200      	movs	r2, #0
 800b98e:	701a      	strb	r2, [r3, #0]
 800b990:	e0b2      	b.n	800baf8 <UART_SetConfig+0x390>
 800b992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	4a4d      	ldr	r2, [pc, #308]	@ (800bacc <UART_SetConfig+0x364>)
 800b998:	4293      	cmp	r3, r2
 800b99a:	d106      	bne.n	800b9aa <UART_SetConfig+0x242>
 800b99c:	231b      	movs	r3, #27
 800b99e:	2220      	movs	r2, #32
 800b9a0:	189b      	adds	r3, r3, r2
 800b9a2:	19db      	adds	r3, r3, r7
 800b9a4:	2200      	movs	r2, #0
 800b9a6:	701a      	strb	r2, [r3, #0]
 800b9a8:	e0a6      	b.n	800baf8 <UART_SetConfig+0x390>
 800b9aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	4a3e      	ldr	r2, [pc, #248]	@ (800baa8 <UART_SetConfig+0x340>)
 800b9b0:	4293      	cmp	r3, r2
 800b9b2:	d13e      	bne.n	800ba32 <UART_SetConfig+0x2ca>
 800b9b4:	4b40      	ldr	r3, [pc, #256]	@ (800bab8 <UART_SetConfig+0x350>)
 800b9b6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b9b8:	23c0      	movs	r3, #192	@ 0xc0
 800b9ba:	011b      	lsls	r3, r3, #4
 800b9bc:	4013      	ands	r3, r2
 800b9be:	22c0      	movs	r2, #192	@ 0xc0
 800b9c0:	0112      	lsls	r2, r2, #4
 800b9c2:	4293      	cmp	r3, r2
 800b9c4:	d027      	beq.n	800ba16 <UART_SetConfig+0x2ae>
 800b9c6:	22c0      	movs	r2, #192	@ 0xc0
 800b9c8:	0112      	lsls	r2, r2, #4
 800b9ca:	4293      	cmp	r3, r2
 800b9cc:	d82a      	bhi.n	800ba24 <UART_SetConfig+0x2bc>
 800b9ce:	2280      	movs	r2, #128	@ 0x80
 800b9d0:	0112      	lsls	r2, r2, #4
 800b9d2:	4293      	cmp	r3, r2
 800b9d4:	d011      	beq.n	800b9fa <UART_SetConfig+0x292>
 800b9d6:	2280      	movs	r2, #128	@ 0x80
 800b9d8:	0112      	lsls	r2, r2, #4
 800b9da:	4293      	cmp	r3, r2
 800b9dc:	d822      	bhi.n	800ba24 <UART_SetConfig+0x2bc>
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d004      	beq.n	800b9ec <UART_SetConfig+0x284>
 800b9e2:	2280      	movs	r2, #128	@ 0x80
 800b9e4:	00d2      	lsls	r2, r2, #3
 800b9e6:	4293      	cmp	r3, r2
 800b9e8:	d00e      	beq.n	800ba08 <UART_SetConfig+0x2a0>
 800b9ea:	e01b      	b.n	800ba24 <UART_SetConfig+0x2bc>
 800b9ec:	231b      	movs	r3, #27
 800b9ee:	2220      	movs	r2, #32
 800b9f0:	189b      	adds	r3, r3, r2
 800b9f2:	19db      	adds	r3, r3, r7
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	701a      	strb	r2, [r3, #0]
 800b9f8:	e07e      	b.n	800baf8 <UART_SetConfig+0x390>
 800b9fa:	231b      	movs	r3, #27
 800b9fc:	2220      	movs	r2, #32
 800b9fe:	189b      	adds	r3, r3, r2
 800ba00:	19db      	adds	r3, r3, r7
 800ba02:	2202      	movs	r2, #2
 800ba04:	701a      	strb	r2, [r3, #0]
 800ba06:	e077      	b.n	800baf8 <UART_SetConfig+0x390>
 800ba08:	231b      	movs	r3, #27
 800ba0a:	2220      	movs	r2, #32
 800ba0c:	189b      	adds	r3, r3, r2
 800ba0e:	19db      	adds	r3, r3, r7
 800ba10:	2204      	movs	r2, #4
 800ba12:	701a      	strb	r2, [r3, #0]
 800ba14:	e070      	b.n	800baf8 <UART_SetConfig+0x390>
 800ba16:	231b      	movs	r3, #27
 800ba18:	2220      	movs	r2, #32
 800ba1a:	189b      	adds	r3, r3, r2
 800ba1c:	19db      	adds	r3, r3, r7
 800ba1e:	2208      	movs	r2, #8
 800ba20:	701a      	strb	r2, [r3, #0]
 800ba22:	e069      	b.n	800baf8 <UART_SetConfig+0x390>
 800ba24:	231b      	movs	r3, #27
 800ba26:	2220      	movs	r2, #32
 800ba28:	189b      	adds	r3, r3, r2
 800ba2a:	19db      	adds	r3, r3, r7
 800ba2c:	2210      	movs	r2, #16
 800ba2e:	701a      	strb	r2, [r3, #0]
 800ba30:	e062      	b.n	800baf8 <UART_SetConfig+0x390>
 800ba32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	4a1d      	ldr	r2, [pc, #116]	@ (800baac <UART_SetConfig+0x344>)
 800ba38:	4293      	cmp	r3, r2
 800ba3a:	d157      	bne.n	800baec <UART_SetConfig+0x384>
 800ba3c:	4b1e      	ldr	r3, [pc, #120]	@ (800bab8 <UART_SetConfig+0x350>)
 800ba3e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ba40:	23c0      	movs	r3, #192	@ 0xc0
 800ba42:	009b      	lsls	r3, r3, #2
 800ba44:	4013      	ands	r3, r2
 800ba46:	22c0      	movs	r2, #192	@ 0xc0
 800ba48:	0092      	lsls	r2, r2, #2
 800ba4a:	4293      	cmp	r3, r2
 800ba4c:	d040      	beq.n	800bad0 <UART_SetConfig+0x368>
 800ba4e:	22c0      	movs	r2, #192	@ 0xc0
 800ba50:	0092      	lsls	r2, r2, #2
 800ba52:	4293      	cmp	r3, r2
 800ba54:	d843      	bhi.n	800bade <UART_SetConfig+0x376>
 800ba56:	2280      	movs	r2, #128	@ 0x80
 800ba58:	0092      	lsls	r2, r2, #2
 800ba5a:	4293      	cmp	r3, r2
 800ba5c:	d011      	beq.n	800ba82 <UART_SetConfig+0x31a>
 800ba5e:	2280      	movs	r2, #128	@ 0x80
 800ba60:	0092      	lsls	r2, r2, #2
 800ba62:	4293      	cmp	r3, r2
 800ba64:	d83b      	bhi.n	800bade <UART_SetConfig+0x376>
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d004      	beq.n	800ba74 <UART_SetConfig+0x30c>
 800ba6a:	2280      	movs	r2, #128	@ 0x80
 800ba6c:	0052      	lsls	r2, r2, #1
 800ba6e:	4293      	cmp	r3, r2
 800ba70:	d00e      	beq.n	800ba90 <UART_SetConfig+0x328>
 800ba72:	e034      	b.n	800bade <UART_SetConfig+0x376>
 800ba74:	231b      	movs	r3, #27
 800ba76:	2220      	movs	r2, #32
 800ba78:	189b      	adds	r3, r3, r2
 800ba7a:	19db      	adds	r3, r3, r7
 800ba7c:	2200      	movs	r2, #0
 800ba7e:	701a      	strb	r2, [r3, #0]
 800ba80:	e03a      	b.n	800baf8 <UART_SetConfig+0x390>
 800ba82:	231b      	movs	r3, #27
 800ba84:	2220      	movs	r2, #32
 800ba86:	189b      	adds	r3, r3, r2
 800ba88:	19db      	adds	r3, r3, r7
 800ba8a:	2202      	movs	r2, #2
 800ba8c:	701a      	strb	r2, [r3, #0]
 800ba8e:	e033      	b.n	800baf8 <UART_SetConfig+0x390>
 800ba90:	231b      	movs	r3, #27
 800ba92:	2220      	movs	r2, #32
 800ba94:	189b      	adds	r3, r3, r2
 800ba96:	19db      	adds	r3, r3, r7
 800ba98:	2204      	movs	r2, #4
 800ba9a:	701a      	strb	r2, [r3, #0]
 800ba9c:	e02c      	b.n	800baf8 <UART_SetConfig+0x390>
 800ba9e:	46c0      	nop			@ (mov r8, r8)
 800baa0:	cfff69f3 	.word	0xcfff69f3
 800baa4:	ffffcfff 	.word	0xffffcfff
 800baa8:	40008000 	.word	0x40008000
 800baac:	40008400 	.word	0x40008400
 800bab0:	11fff4ff 	.word	0x11fff4ff
 800bab4:	40013800 	.word	0x40013800
 800bab8:	40021000 	.word	0x40021000
 800babc:	40004400 	.word	0x40004400
 800bac0:	40004800 	.word	0x40004800
 800bac4:	40004c00 	.word	0x40004c00
 800bac8:	40005000 	.word	0x40005000
 800bacc:	40013c00 	.word	0x40013c00
 800bad0:	231b      	movs	r3, #27
 800bad2:	2220      	movs	r2, #32
 800bad4:	189b      	adds	r3, r3, r2
 800bad6:	19db      	adds	r3, r3, r7
 800bad8:	2208      	movs	r2, #8
 800bada:	701a      	strb	r2, [r3, #0]
 800badc:	e00c      	b.n	800baf8 <UART_SetConfig+0x390>
 800bade:	231b      	movs	r3, #27
 800bae0:	2220      	movs	r2, #32
 800bae2:	189b      	adds	r3, r3, r2
 800bae4:	19db      	adds	r3, r3, r7
 800bae6:	2210      	movs	r2, #16
 800bae8:	701a      	strb	r2, [r3, #0]
 800baea:	e005      	b.n	800baf8 <UART_SetConfig+0x390>
 800baec:	231b      	movs	r3, #27
 800baee:	2220      	movs	r2, #32
 800baf0:	189b      	adds	r3, r3, r2
 800baf2:	19db      	adds	r3, r3, r7
 800baf4:	2210      	movs	r2, #16
 800baf6:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800baf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	4ac1      	ldr	r2, [pc, #772]	@ (800be04 <UART_SetConfig+0x69c>)
 800bafe:	4293      	cmp	r3, r2
 800bb00:	d005      	beq.n	800bb0e <UART_SetConfig+0x3a6>
 800bb02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	4ac0      	ldr	r2, [pc, #768]	@ (800be08 <UART_SetConfig+0x6a0>)
 800bb08:	4293      	cmp	r3, r2
 800bb0a:	d000      	beq.n	800bb0e <UART_SetConfig+0x3a6>
 800bb0c:	e093      	b.n	800bc36 <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bb0e:	231b      	movs	r3, #27
 800bb10:	2220      	movs	r2, #32
 800bb12:	189b      	adds	r3, r3, r2
 800bb14:	19db      	adds	r3, r3, r7
 800bb16:	781b      	ldrb	r3, [r3, #0]
 800bb18:	2b08      	cmp	r3, #8
 800bb1a:	d015      	beq.n	800bb48 <UART_SetConfig+0x3e0>
 800bb1c:	dc18      	bgt.n	800bb50 <UART_SetConfig+0x3e8>
 800bb1e:	2b04      	cmp	r3, #4
 800bb20:	d00d      	beq.n	800bb3e <UART_SetConfig+0x3d6>
 800bb22:	dc15      	bgt.n	800bb50 <UART_SetConfig+0x3e8>
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d002      	beq.n	800bb2e <UART_SetConfig+0x3c6>
 800bb28:	2b02      	cmp	r3, #2
 800bb2a:	d005      	beq.n	800bb38 <UART_SetConfig+0x3d0>
 800bb2c:	e010      	b.n	800bb50 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bb2e:	f7fd fc53 	bl	80093d8 <HAL_RCC_GetPCLK1Freq>
 800bb32:	0003      	movs	r3, r0
 800bb34:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bb36:	e014      	b.n	800bb62 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bb38:	4bb4      	ldr	r3, [pc, #720]	@ (800be0c <UART_SetConfig+0x6a4>)
 800bb3a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bb3c:	e011      	b.n	800bb62 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bb3e:	f7fd fbbf 	bl	80092c0 <HAL_RCC_GetSysClockFreq>
 800bb42:	0003      	movs	r3, r0
 800bb44:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bb46:	e00c      	b.n	800bb62 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bb48:	2380      	movs	r3, #128	@ 0x80
 800bb4a:	021b      	lsls	r3, r3, #8
 800bb4c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bb4e:	e008      	b.n	800bb62 <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 800bb50:	2300      	movs	r3, #0
 800bb52:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800bb54:	231a      	movs	r3, #26
 800bb56:	2220      	movs	r2, #32
 800bb58:	189b      	adds	r3, r3, r2
 800bb5a:	19db      	adds	r3, r3, r7
 800bb5c:	2201      	movs	r2, #1
 800bb5e:	701a      	strb	r2, [r3, #0]
        break;
 800bb60:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800bb62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d100      	bne.n	800bb6a <UART_SetConfig+0x402>
 800bb68:	e135      	b.n	800bdd6 <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bb6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb6c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bb6e:	4ba8      	ldr	r3, [pc, #672]	@ (800be10 <UART_SetConfig+0x6a8>)
 800bb70:	0052      	lsls	r2, r2, #1
 800bb72:	5ad3      	ldrh	r3, [r2, r3]
 800bb74:	0019      	movs	r1, r3
 800bb76:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800bb78:	f7f4 faea 	bl	8000150 <__udivsi3>
 800bb7c:	0003      	movs	r3, r0
 800bb7e:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bb80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb82:	685a      	ldr	r2, [r3, #4]
 800bb84:	0013      	movs	r3, r2
 800bb86:	005b      	lsls	r3, r3, #1
 800bb88:	189b      	adds	r3, r3, r2
 800bb8a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bb8c:	429a      	cmp	r2, r3
 800bb8e:	d305      	bcc.n	800bb9c <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bb90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb92:	685b      	ldr	r3, [r3, #4]
 800bb94:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bb96:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bb98:	429a      	cmp	r2, r3
 800bb9a:	d906      	bls.n	800bbaa <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 800bb9c:	231a      	movs	r3, #26
 800bb9e:	2220      	movs	r2, #32
 800bba0:	189b      	adds	r3, r3, r2
 800bba2:	19db      	adds	r3, r3, r7
 800bba4:	2201      	movs	r2, #1
 800bba6:	701a      	strb	r2, [r3, #0]
 800bba8:	e044      	b.n	800bc34 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bbaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bbac:	61bb      	str	r3, [r7, #24]
 800bbae:	2300      	movs	r3, #0
 800bbb0:	61fb      	str	r3, [r7, #28]
 800bbb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbb4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bbb6:	4b96      	ldr	r3, [pc, #600]	@ (800be10 <UART_SetConfig+0x6a8>)
 800bbb8:	0052      	lsls	r2, r2, #1
 800bbba:	5ad3      	ldrh	r3, [r2, r3]
 800bbbc:	613b      	str	r3, [r7, #16]
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	617b      	str	r3, [r7, #20]
 800bbc2:	693a      	ldr	r2, [r7, #16]
 800bbc4:	697b      	ldr	r3, [r7, #20]
 800bbc6:	69b8      	ldr	r0, [r7, #24]
 800bbc8:	69f9      	ldr	r1, [r7, #28]
 800bbca:	f7f4 fcaf 	bl	800052c <__aeabi_uldivmod>
 800bbce:	0002      	movs	r2, r0
 800bbd0:	000b      	movs	r3, r1
 800bbd2:	0e11      	lsrs	r1, r2, #24
 800bbd4:	021d      	lsls	r5, r3, #8
 800bbd6:	430d      	orrs	r5, r1
 800bbd8:	0214      	lsls	r4, r2, #8
 800bbda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbdc:	685b      	ldr	r3, [r3, #4]
 800bbde:	085b      	lsrs	r3, r3, #1
 800bbe0:	60bb      	str	r3, [r7, #8]
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	60fb      	str	r3, [r7, #12]
 800bbe6:	68b8      	ldr	r0, [r7, #8]
 800bbe8:	68f9      	ldr	r1, [r7, #12]
 800bbea:	1900      	adds	r0, r0, r4
 800bbec:	4169      	adcs	r1, r5
 800bbee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbf0:	685b      	ldr	r3, [r3, #4]
 800bbf2:	603b      	str	r3, [r7, #0]
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	607b      	str	r3, [r7, #4]
 800bbf8:	683a      	ldr	r2, [r7, #0]
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	f7f4 fc96 	bl	800052c <__aeabi_uldivmod>
 800bc00:	0002      	movs	r2, r0
 800bc02:	000b      	movs	r3, r1
 800bc04:	0013      	movs	r3, r2
 800bc06:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bc08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bc0a:	23c0      	movs	r3, #192	@ 0xc0
 800bc0c:	009b      	lsls	r3, r3, #2
 800bc0e:	429a      	cmp	r2, r3
 800bc10:	d309      	bcc.n	800bc26 <UART_SetConfig+0x4be>
 800bc12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bc14:	2380      	movs	r3, #128	@ 0x80
 800bc16:	035b      	lsls	r3, r3, #13
 800bc18:	429a      	cmp	r2, r3
 800bc1a:	d204      	bcs.n	800bc26 <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 800bc1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bc22:	60da      	str	r2, [r3, #12]
 800bc24:	e006      	b.n	800bc34 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 800bc26:	231a      	movs	r3, #26
 800bc28:	2220      	movs	r2, #32
 800bc2a:	189b      	adds	r3, r3, r2
 800bc2c:	19db      	adds	r3, r3, r7
 800bc2e:	2201      	movs	r2, #1
 800bc30:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 800bc32:	e0d0      	b.n	800bdd6 <UART_SetConfig+0x66e>
 800bc34:	e0cf      	b.n	800bdd6 <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bc36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc38:	69da      	ldr	r2, [r3, #28]
 800bc3a:	2380      	movs	r3, #128	@ 0x80
 800bc3c:	021b      	lsls	r3, r3, #8
 800bc3e:	429a      	cmp	r2, r3
 800bc40:	d000      	beq.n	800bc44 <UART_SetConfig+0x4dc>
 800bc42:	e070      	b.n	800bd26 <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 800bc44:	231b      	movs	r3, #27
 800bc46:	2220      	movs	r2, #32
 800bc48:	189b      	adds	r3, r3, r2
 800bc4a:	19db      	adds	r3, r3, r7
 800bc4c:	781b      	ldrb	r3, [r3, #0]
 800bc4e:	2b08      	cmp	r3, #8
 800bc50:	d015      	beq.n	800bc7e <UART_SetConfig+0x516>
 800bc52:	dc18      	bgt.n	800bc86 <UART_SetConfig+0x51e>
 800bc54:	2b04      	cmp	r3, #4
 800bc56:	d00d      	beq.n	800bc74 <UART_SetConfig+0x50c>
 800bc58:	dc15      	bgt.n	800bc86 <UART_SetConfig+0x51e>
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d002      	beq.n	800bc64 <UART_SetConfig+0x4fc>
 800bc5e:	2b02      	cmp	r3, #2
 800bc60:	d005      	beq.n	800bc6e <UART_SetConfig+0x506>
 800bc62:	e010      	b.n	800bc86 <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bc64:	f7fd fbb8 	bl	80093d8 <HAL_RCC_GetPCLK1Freq>
 800bc68:	0003      	movs	r3, r0
 800bc6a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bc6c:	e014      	b.n	800bc98 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bc6e:	4b67      	ldr	r3, [pc, #412]	@ (800be0c <UART_SetConfig+0x6a4>)
 800bc70:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bc72:	e011      	b.n	800bc98 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bc74:	f7fd fb24 	bl	80092c0 <HAL_RCC_GetSysClockFreq>
 800bc78:	0003      	movs	r3, r0
 800bc7a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bc7c:	e00c      	b.n	800bc98 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bc7e:	2380      	movs	r3, #128	@ 0x80
 800bc80:	021b      	lsls	r3, r3, #8
 800bc82:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bc84:	e008      	b.n	800bc98 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 800bc86:	2300      	movs	r3, #0
 800bc88:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800bc8a:	231a      	movs	r3, #26
 800bc8c:	2220      	movs	r2, #32
 800bc8e:	189b      	adds	r3, r3, r2
 800bc90:	19db      	adds	r3, r3, r7
 800bc92:	2201      	movs	r2, #1
 800bc94:	701a      	strb	r2, [r3, #0]
        break;
 800bc96:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bc98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d100      	bne.n	800bca0 <UART_SetConfig+0x538>
 800bc9e:	e09a      	b.n	800bdd6 <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bca2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bca4:	4b5a      	ldr	r3, [pc, #360]	@ (800be10 <UART_SetConfig+0x6a8>)
 800bca6:	0052      	lsls	r2, r2, #1
 800bca8:	5ad3      	ldrh	r3, [r2, r3]
 800bcaa:	0019      	movs	r1, r3
 800bcac:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800bcae:	f7f4 fa4f 	bl	8000150 <__udivsi3>
 800bcb2:	0003      	movs	r3, r0
 800bcb4:	005a      	lsls	r2, r3, #1
 800bcb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcb8:	685b      	ldr	r3, [r3, #4]
 800bcba:	085b      	lsrs	r3, r3, #1
 800bcbc:	18d2      	adds	r2, r2, r3
 800bcbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcc0:	685b      	ldr	r3, [r3, #4]
 800bcc2:	0019      	movs	r1, r3
 800bcc4:	0010      	movs	r0, r2
 800bcc6:	f7f4 fa43 	bl	8000150 <__udivsi3>
 800bcca:	0003      	movs	r3, r0
 800bccc:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bcce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcd0:	2b0f      	cmp	r3, #15
 800bcd2:	d921      	bls.n	800bd18 <UART_SetConfig+0x5b0>
 800bcd4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bcd6:	2380      	movs	r3, #128	@ 0x80
 800bcd8:	025b      	lsls	r3, r3, #9
 800bcda:	429a      	cmp	r2, r3
 800bcdc:	d21c      	bcs.n	800bd18 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bcde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bce0:	b29a      	uxth	r2, r3
 800bce2:	200e      	movs	r0, #14
 800bce4:	2420      	movs	r4, #32
 800bce6:	1903      	adds	r3, r0, r4
 800bce8:	19db      	adds	r3, r3, r7
 800bcea:	210f      	movs	r1, #15
 800bcec:	438a      	bics	r2, r1
 800bcee:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bcf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcf2:	085b      	lsrs	r3, r3, #1
 800bcf4:	b29b      	uxth	r3, r3
 800bcf6:	2207      	movs	r2, #7
 800bcf8:	4013      	ands	r3, r2
 800bcfa:	b299      	uxth	r1, r3
 800bcfc:	1903      	adds	r3, r0, r4
 800bcfe:	19db      	adds	r3, r3, r7
 800bd00:	1902      	adds	r2, r0, r4
 800bd02:	19d2      	adds	r2, r2, r7
 800bd04:	8812      	ldrh	r2, [r2, #0]
 800bd06:	430a      	orrs	r2, r1
 800bd08:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800bd0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	1902      	adds	r2, r0, r4
 800bd10:	19d2      	adds	r2, r2, r7
 800bd12:	8812      	ldrh	r2, [r2, #0]
 800bd14:	60da      	str	r2, [r3, #12]
 800bd16:	e05e      	b.n	800bdd6 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 800bd18:	231a      	movs	r3, #26
 800bd1a:	2220      	movs	r2, #32
 800bd1c:	189b      	adds	r3, r3, r2
 800bd1e:	19db      	adds	r3, r3, r7
 800bd20:	2201      	movs	r2, #1
 800bd22:	701a      	strb	r2, [r3, #0]
 800bd24:	e057      	b.n	800bdd6 <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bd26:	231b      	movs	r3, #27
 800bd28:	2220      	movs	r2, #32
 800bd2a:	189b      	adds	r3, r3, r2
 800bd2c:	19db      	adds	r3, r3, r7
 800bd2e:	781b      	ldrb	r3, [r3, #0]
 800bd30:	2b08      	cmp	r3, #8
 800bd32:	d015      	beq.n	800bd60 <UART_SetConfig+0x5f8>
 800bd34:	dc18      	bgt.n	800bd68 <UART_SetConfig+0x600>
 800bd36:	2b04      	cmp	r3, #4
 800bd38:	d00d      	beq.n	800bd56 <UART_SetConfig+0x5ee>
 800bd3a:	dc15      	bgt.n	800bd68 <UART_SetConfig+0x600>
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d002      	beq.n	800bd46 <UART_SetConfig+0x5de>
 800bd40:	2b02      	cmp	r3, #2
 800bd42:	d005      	beq.n	800bd50 <UART_SetConfig+0x5e8>
 800bd44:	e010      	b.n	800bd68 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bd46:	f7fd fb47 	bl	80093d8 <HAL_RCC_GetPCLK1Freq>
 800bd4a:	0003      	movs	r3, r0
 800bd4c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bd4e:	e014      	b.n	800bd7a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bd50:	4b2e      	ldr	r3, [pc, #184]	@ (800be0c <UART_SetConfig+0x6a4>)
 800bd52:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bd54:	e011      	b.n	800bd7a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bd56:	f7fd fab3 	bl	80092c0 <HAL_RCC_GetSysClockFreq>
 800bd5a:	0003      	movs	r3, r0
 800bd5c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bd5e:	e00c      	b.n	800bd7a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bd60:	2380      	movs	r3, #128	@ 0x80
 800bd62:	021b      	lsls	r3, r3, #8
 800bd64:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bd66:	e008      	b.n	800bd7a <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 800bd68:	2300      	movs	r3, #0
 800bd6a:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800bd6c:	231a      	movs	r3, #26
 800bd6e:	2220      	movs	r2, #32
 800bd70:	189b      	adds	r3, r3, r2
 800bd72:	19db      	adds	r3, r3, r7
 800bd74:	2201      	movs	r2, #1
 800bd76:	701a      	strb	r2, [r3, #0]
        break;
 800bd78:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800bd7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d02a      	beq.n	800bdd6 <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bd80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd82:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bd84:	4b22      	ldr	r3, [pc, #136]	@ (800be10 <UART_SetConfig+0x6a8>)
 800bd86:	0052      	lsls	r2, r2, #1
 800bd88:	5ad3      	ldrh	r3, [r2, r3]
 800bd8a:	0019      	movs	r1, r3
 800bd8c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800bd8e:	f7f4 f9df 	bl	8000150 <__udivsi3>
 800bd92:	0003      	movs	r3, r0
 800bd94:	001a      	movs	r2, r3
 800bd96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd98:	685b      	ldr	r3, [r3, #4]
 800bd9a:	085b      	lsrs	r3, r3, #1
 800bd9c:	18d2      	adds	r2, r2, r3
 800bd9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bda0:	685b      	ldr	r3, [r3, #4]
 800bda2:	0019      	movs	r1, r3
 800bda4:	0010      	movs	r0, r2
 800bda6:	f7f4 f9d3 	bl	8000150 <__udivsi3>
 800bdaa:	0003      	movs	r3, r0
 800bdac:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bdae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdb0:	2b0f      	cmp	r3, #15
 800bdb2:	d90a      	bls.n	800bdca <UART_SetConfig+0x662>
 800bdb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bdb6:	2380      	movs	r3, #128	@ 0x80
 800bdb8:	025b      	lsls	r3, r3, #9
 800bdba:	429a      	cmp	r2, r3
 800bdbc:	d205      	bcs.n	800bdca <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bdbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdc0:	b29a      	uxth	r2, r3
 800bdc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	60da      	str	r2, [r3, #12]
 800bdc8:	e005      	b.n	800bdd6 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 800bdca:	231a      	movs	r3, #26
 800bdcc:	2220      	movs	r2, #32
 800bdce:	189b      	adds	r3, r3, r2
 800bdd0:	19db      	adds	r3, r3, r7
 800bdd2:	2201      	movs	r2, #1
 800bdd4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bdd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdd8:	226a      	movs	r2, #106	@ 0x6a
 800bdda:	2101      	movs	r1, #1
 800bddc:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800bdde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bde0:	2268      	movs	r2, #104	@ 0x68
 800bde2:	2101      	movs	r1, #1
 800bde4:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bde6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bde8:	2200      	movs	r2, #0
 800bdea:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800bdec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdee:	2200      	movs	r2, #0
 800bdf0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800bdf2:	231a      	movs	r3, #26
 800bdf4:	2220      	movs	r2, #32
 800bdf6:	189b      	adds	r3, r3, r2
 800bdf8:	19db      	adds	r3, r3, r7
 800bdfa:	781b      	ldrb	r3, [r3, #0]
}
 800bdfc:	0018      	movs	r0, r3
 800bdfe:	46bd      	mov	sp, r7
 800be00:	b010      	add	sp, #64	@ 0x40
 800be02:	bdb0      	pop	{r4, r5, r7, pc}
 800be04:	40008000 	.word	0x40008000
 800be08:	40008400 	.word	0x40008400
 800be0c:	00f42400 	.word	0x00f42400
 800be10:	08010758 	.word	0x08010758

0800be14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800be14:	b580      	push	{r7, lr}
 800be16:	b082      	sub	sp, #8
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be20:	2208      	movs	r2, #8
 800be22:	4013      	ands	r3, r2
 800be24:	d00b      	beq.n	800be3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	685b      	ldr	r3, [r3, #4]
 800be2c:	4a4a      	ldr	r2, [pc, #296]	@ (800bf58 <UART_AdvFeatureConfig+0x144>)
 800be2e:	4013      	ands	r3, r2
 800be30:	0019      	movs	r1, r3
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	430a      	orrs	r2, r1
 800be3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be42:	2201      	movs	r2, #1
 800be44:	4013      	ands	r3, r2
 800be46:	d00b      	beq.n	800be60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	685b      	ldr	r3, [r3, #4]
 800be4e:	4a43      	ldr	r2, [pc, #268]	@ (800bf5c <UART_AdvFeatureConfig+0x148>)
 800be50:	4013      	ands	r3, r2
 800be52:	0019      	movs	r1, r3
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	430a      	orrs	r2, r1
 800be5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be64:	2202      	movs	r2, #2
 800be66:	4013      	ands	r3, r2
 800be68:	d00b      	beq.n	800be82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	685b      	ldr	r3, [r3, #4]
 800be70:	4a3b      	ldr	r2, [pc, #236]	@ (800bf60 <UART_AdvFeatureConfig+0x14c>)
 800be72:	4013      	ands	r3, r2
 800be74:	0019      	movs	r1, r3
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	430a      	orrs	r2, r1
 800be80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be86:	2204      	movs	r2, #4
 800be88:	4013      	ands	r3, r2
 800be8a:	d00b      	beq.n	800bea4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	685b      	ldr	r3, [r3, #4]
 800be92:	4a34      	ldr	r2, [pc, #208]	@ (800bf64 <UART_AdvFeatureConfig+0x150>)
 800be94:	4013      	ands	r3, r2
 800be96:	0019      	movs	r1, r3
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	430a      	orrs	r2, r1
 800bea2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bea8:	2210      	movs	r2, #16
 800beaa:	4013      	ands	r3, r2
 800beac:	d00b      	beq.n	800bec6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	689b      	ldr	r3, [r3, #8]
 800beb4:	4a2c      	ldr	r2, [pc, #176]	@ (800bf68 <UART_AdvFeatureConfig+0x154>)
 800beb6:	4013      	ands	r3, r2
 800beb8:	0019      	movs	r1, r3
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	430a      	orrs	r2, r1
 800bec4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800beca:	2220      	movs	r2, #32
 800becc:	4013      	ands	r3, r2
 800bece:	d00b      	beq.n	800bee8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	689b      	ldr	r3, [r3, #8]
 800bed6:	4a25      	ldr	r2, [pc, #148]	@ (800bf6c <UART_AdvFeatureConfig+0x158>)
 800bed8:	4013      	ands	r3, r2
 800beda:	0019      	movs	r1, r3
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	430a      	orrs	r2, r1
 800bee6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800beec:	2240      	movs	r2, #64	@ 0x40
 800beee:	4013      	ands	r3, r2
 800bef0:	d01d      	beq.n	800bf2e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	685b      	ldr	r3, [r3, #4]
 800bef8:	4a1d      	ldr	r2, [pc, #116]	@ (800bf70 <UART_AdvFeatureConfig+0x15c>)
 800befa:	4013      	ands	r3, r2
 800befc:	0019      	movs	r1, r3
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	430a      	orrs	r2, r1
 800bf08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bf0e:	2380      	movs	r3, #128	@ 0x80
 800bf10:	035b      	lsls	r3, r3, #13
 800bf12:	429a      	cmp	r2, r3
 800bf14:	d10b      	bne.n	800bf2e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	685b      	ldr	r3, [r3, #4]
 800bf1c:	4a15      	ldr	r2, [pc, #84]	@ (800bf74 <UART_AdvFeatureConfig+0x160>)
 800bf1e:	4013      	ands	r3, r2
 800bf20:	0019      	movs	r1, r3
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	430a      	orrs	r2, r1
 800bf2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf32:	2280      	movs	r2, #128	@ 0x80
 800bf34:	4013      	ands	r3, r2
 800bf36:	d00b      	beq.n	800bf50 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	685b      	ldr	r3, [r3, #4]
 800bf3e:	4a0e      	ldr	r2, [pc, #56]	@ (800bf78 <UART_AdvFeatureConfig+0x164>)
 800bf40:	4013      	ands	r3, r2
 800bf42:	0019      	movs	r1, r3
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	430a      	orrs	r2, r1
 800bf4e:	605a      	str	r2, [r3, #4]
  }
}
 800bf50:	46c0      	nop			@ (mov r8, r8)
 800bf52:	46bd      	mov	sp, r7
 800bf54:	b002      	add	sp, #8
 800bf56:	bd80      	pop	{r7, pc}
 800bf58:	ffff7fff 	.word	0xffff7fff
 800bf5c:	fffdffff 	.word	0xfffdffff
 800bf60:	fffeffff 	.word	0xfffeffff
 800bf64:	fffbffff 	.word	0xfffbffff
 800bf68:	ffffefff 	.word	0xffffefff
 800bf6c:	ffffdfff 	.word	0xffffdfff
 800bf70:	ffefffff 	.word	0xffefffff
 800bf74:	ff9fffff 	.word	0xff9fffff
 800bf78:	fff7ffff 	.word	0xfff7ffff

0800bf7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b092      	sub	sp, #72	@ 0x48
 800bf80:	af02      	add	r7, sp, #8
 800bf82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	2290      	movs	r2, #144	@ 0x90
 800bf88:	2100      	movs	r1, #0
 800bf8a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bf8c:	f7fb fc02 	bl	8007794 <HAL_GetTick>
 800bf90:	0003      	movs	r3, r0
 800bf92:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	2208      	movs	r2, #8
 800bf9c:	4013      	ands	r3, r2
 800bf9e:	2b08      	cmp	r3, #8
 800bfa0:	d12d      	bne.n	800bffe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bfa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bfa4:	2280      	movs	r2, #128	@ 0x80
 800bfa6:	0391      	lsls	r1, r2, #14
 800bfa8:	6878      	ldr	r0, [r7, #4]
 800bfaa:	4a47      	ldr	r2, [pc, #284]	@ (800c0c8 <UART_CheckIdleState+0x14c>)
 800bfac:	9200      	str	r2, [sp, #0]
 800bfae:	2200      	movs	r2, #0
 800bfb0:	f000 f88e 	bl	800c0d0 <UART_WaitOnFlagUntilTimeout>
 800bfb4:	1e03      	subs	r3, r0, #0
 800bfb6:	d022      	beq.n	800bffe <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bfb8:	f3ef 8310 	mrs	r3, PRIMASK
 800bfbc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800bfbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800bfc0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bfc2:	2301      	movs	r3, #1
 800bfc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bfc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfc8:	f383 8810 	msr	PRIMASK, r3
}
 800bfcc:	46c0      	nop			@ (mov r8, r8)
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	681a      	ldr	r2, [r3, #0]
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	2180      	movs	r1, #128	@ 0x80
 800bfda:	438a      	bics	r2, r1
 800bfdc:	601a      	str	r2, [r3, #0]
 800bfde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfe0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bfe2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfe4:	f383 8810 	msr	PRIMASK, r3
}
 800bfe8:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	2288      	movs	r2, #136	@ 0x88
 800bfee:	2120      	movs	r1, #32
 800bff0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	2284      	movs	r2, #132	@ 0x84
 800bff6:	2100      	movs	r1, #0
 800bff8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bffa:	2303      	movs	r3, #3
 800bffc:	e060      	b.n	800c0c0 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	2204      	movs	r2, #4
 800c006:	4013      	ands	r3, r2
 800c008:	2b04      	cmp	r3, #4
 800c00a:	d146      	bne.n	800c09a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c00c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c00e:	2280      	movs	r2, #128	@ 0x80
 800c010:	03d1      	lsls	r1, r2, #15
 800c012:	6878      	ldr	r0, [r7, #4]
 800c014:	4a2c      	ldr	r2, [pc, #176]	@ (800c0c8 <UART_CheckIdleState+0x14c>)
 800c016:	9200      	str	r2, [sp, #0]
 800c018:	2200      	movs	r2, #0
 800c01a:	f000 f859 	bl	800c0d0 <UART_WaitOnFlagUntilTimeout>
 800c01e:	1e03      	subs	r3, r0, #0
 800c020:	d03b      	beq.n	800c09a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c022:	f3ef 8310 	mrs	r3, PRIMASK
 800c026:	60fb      	str	r3, [r7, #12]
  return(result);
 800c028:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c02a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c02c:	2301      	movs	r3, #1
 800c02e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c030:	693b      	ldr	r3, [r7, #16]
 800c032:	f383 8810 	msr	PRIMASK, r3
}
 800c036:	46c0      	nop			@ (mov r8, r8)
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	681a      	ldr	r2, [r3, #0]
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	4922      	ldr	r1, [pc, #136]	@ (800c0cc <UART_CheckIdleState+0x150>)
 800c044:	400a      	ands	r2, r1
 800c046:	601a      	str	r2, [r3, #0]
 800c048:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c04a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c04c:	697b      	ldr	r3, [r7, #20]
 800c04e:	f383 8810 	msr	PRIMASK, r3
}
 800c052:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c054:	f3ef 8310 	mrs	r3, PRIMASK
 800c058:	61bb      	str	r3, [r7, #24]
  return(result);
 800c05a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c05c:	633b      	str	r3, [r7, #48]	@ 0x30
 800c05e:	2301      	movs	r3, #1
 800c060:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c062:	69fb      	ldr	r3, [r7, #28]
 800c064:	f383 8810 	msr	PRIMASK, r3
}
 800c068:	46c0      	nop			@ (mov r8, r8)
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	689a      	ldr	r2, [r3, #8]
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	2101      	movs	r1, #1
 800c076:	438a      	bics	r2, r1
 800c078:	609a      	str	r2, [r3, #8]
 800c07a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c07c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c07e:	6a3b      	ldr	r3, [r7, #32]
 800c080:	f383 8810 	msr	PRIMASK, r3
}
 800c084:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	228c      	movs	r2, #140	@ 0x8c
 800c08a:	2120      	movs	r1, #32
 800c08c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	2284      	movs	r2, #132	@ 0x84
 800c092:	2100      	movs	r1, #0
 800c094:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c096:	2303      	movs	r3, #3
 800c098:	e012      	b.n	800c0c0 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	2288      	movs	r2, #136	@ 0x88
 800c09e:	2120      	movs	r1, #32
 800c0a0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	228c      	movs	r2, #140	@ 0x8c
 800c0a6:	2120      	movs	r1, #32
 800c0a8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	2200      	movs	r2, #0
 800c0ae:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	2284      	movs	r2, #132	@ 0x84
 800c0ba:	2100      	movs	r1, #0
 800c0bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c0be:	2300      	movs	r3, #0
}
 800c0c0:	0018      	movs	r0, r3
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	b010      	add	sp, #64	@ 0x40
 800c0c6:	bd80      	pop	{r7, pc}
 800c0c8:	01ffffff 	.word	0x01ffffff
 800c0cc:	fffffedf 	.word	0xfffffedf

0800c0d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	b084      	sub	sp, #16
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	60f8      	str	r0, [r7, #12]
 800c0d8:	60b9      	str	r1, [r7, #8]
 800c0da:	603b      	str	r3, [r7, #0]
 800c0dc:	1dfb      	adds	r3, r7, #7
 800c0de:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c0e0:	e051      	b.n	800c186 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c0e2:	69bb      	ldr	r3, [r7, #24]
 800c0e4:	3301      	adds	r3, #1
 800c0e6:	d04e      	beq.n	800c186 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c0e8:	f7fb fb54 	bl	8007794 <HAL_GetTick>
 800c0ec:	0002      	movs	r2, r0
 800c0ee:	683b      	ldr	r3, [r7, #0]
 800c0f0:	1ad3      	subs	r3, r2, r3
 800c0f2:	69ba      	ldr	r2, [r7, #24]
 800c0f4:	429a      	cmp	r2, r3
 800c0f6:	d302      	bcc.n	800c0fe <UART_WaitOnFlagUntilTimeout+0x2e>
 800c0f8:	69bb      	ldr	r3, [r7, #24]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d101      	bne.n	800c102 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800c0fe:	2303      	movs	r3, #3
 800c100:	e051      	b.n	800c1a6 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	2204      	movs	r2, #4
 800c10a:	4013      	ands	r3, r2
 800c10c:	d03b      	beq.n	800c186 <UART_WaitOnFlagUntilTimeout+0xb6>
 800c10e:	68bb      	ldr	r3, [r7, #8]
 800c110:	2b80      	cmp	r3, #128	@ 0x80
 800c112:	d038      	beq.n	800c186 <UART_WaitOnFlagUntilTimeout+0xb6>
 800c114:	68bb      	ldr	r3, [r7, #8]
 800c116:	2b40      	cmp	r3, #64	@ 0x40
 800c118:	d035      	beq.n	800c186 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	69db      	ldr	r3, [r3, #28]
 800c120:	2208      	movs	r2, #8
 800c122:	4013      	ands	r3, r2
 800c124:	2b08      	cmp	r3, #8
 800c126:	d111      	bne.n	800c14c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	2208      	movs	r2, #8
 800c12e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	0018      	movs	r0, r3
 800c134:	f000 f83c 	bl	800c1b0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	2290      	movs	r2, #144	@ 0x90
 800c13c:	2108      	movs	r1, #8
 800c13e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	2284      	movs	r2, #132	@ 0x84
 800c144:	2100      	movs	r1, #0
 800c146:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800c148:	2301      	movs	r3, #1
 800c14a:	e02c      	b.n	800c1a6 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	69da      	ldr	r2, [r3, #28]
 800c152:	2380      	movs	r3, #128	@ 0x80
 800c154:	011b      	lsls	r3, r3, #4
 800c156:	401a      	ands	r2, r3
 800c158:	2380      	movs	r3, #128	@ 0x80
 800c15a:	011b      	lsls	r3, r3, #4
 800c15c:	429a      	cmp	r2, r3
 800c15e:	d112      	bne.n	800c186 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	2280      	movs	r2, #128	@ 0x80
 800c166:	0112      	lsls	r2, r2, #4
 800c168:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	0018      	movs	r0, r3
 800c16e:	f000 f81f 	bl	800c1b0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	2290      	movs	r2, #144	@ 0x90
 800c176:	2120      	movs	r1, #32
 800c178:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	2284      	movs	r2, #132	@ 0x84
 800c17e:	2100      	movs	r1, #0
 800c180:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800c182:	2303      	movs	r3, #3
 800c184:	e00f      	b.n	800c1a6 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	69db      	ldr	r3, [r3, #28]
 800c18c:	68ba      	ldr	r2, [r7, #8]
 800c18e:	4013      	ands	r3, r2
 800c190:	68ba      	ldr	r2, [r7, #8]
 800c192:	1ad3      	subs	r3, r2, r3
 800c194:	425a      	negs	r2, r3
 800c196:	4153      	adcs	r3, r2
 800c198:	b2db      	uxtb	r3, r3
 800c19a:	001a      	movs	r2, r3
 800c19c:	1dfb      	adds	r3, r7, #7
 800c19e:	781b      	ldrb	r3, [r3, #0]
 800c1a0:	429a      	cmp	r2, r3
 800c1a2:	d09e      	beq.n	800c0e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c1a4:	2300      	movs	r3, #0
}
 800c1a6:	0018      	movs	r0, r3
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	b004      	add	sp, #16
 800c1ac:	bd80      	pop	{r7, pc}
	...

0800c1b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b08e      	sub	sp, #56	@ 0x38
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c1b8:	f3ef 8310 	mrs	r3, PRIMASK
 800c1bc:	617b      	str	r3, [r7, #20]
  return(result);
 800c1be:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c1c0:	637b      	str	r3, [r7, #52]	@ 0x34
 800c1c2:	2301      	movs	r3, #1
 800c1c4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c1c6:	69bb      	ldr	r3, [r7, #24]
 800c1c8:	f383 8810 	msr	PRIMASK, r3
}
 800c1cc:	46c0      	nop			@ (mov r8, r8)
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	681a      	ldr	r2, [r3, #0]
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	4926      	ldr	r1, [pc, #152]	@ (800c274 <UART_EndRxTransfer+0xc4>)
 800c1da:	400a      	ands	r2, r1
 800c1dc:	601a      	str	r2, [r3, #0]
 800c1de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c1e0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c1e2:	69fb      	ldr	r3, [r7, #28]
 800c1e4:	f383 8810 	msr	PRIMASK, r3
}
 800c1e8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c1ea:	f3ef 8310 	mrs	r3, PRIMASK
 800c1ee:	623b      	str	r3, [r7, #32]
  return(result);
 800c1f0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c1f2:	633b      	str	r3, [r7, #48]	@ 0x30
 800c1f4:	2301      	movs	r3, #1
 800c1f6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c1f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1fa:	f383 8810 	msr	PRIMASK, r3
}
 800c1fe:	46c0      	nop			@ (mov r8, r8)
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	689a      	ldr	r2, [r3, #8]
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	491b      	ldr	r1, [pc, #108]	@ (800c278 <UART_EndRxTransfer+0xc8>)
 800c20c:	400a      	ands	r2, r1
 800c20e:	609a      	str	r2, [r3, #8]
 800c210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c212:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c216:	f383 8810 	msr	PRIMASK, r3
}
 800c21a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c220:	2b01      	cmp	r3, #1
 800c222:	d118      	bne.n	800c256 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c224:	f3ef 8310 	mrs	r3, PRIMASK
 800c228:	60bb      	str	r3, [r7, #8]
  return(result);
 800c22a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c22c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c22e:	2301      	movs	r3, #1
 800c230:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	f383 8810 	msr	PRIMASK, r3
}
 800c238:	46c0      	nop			@ (mov r8, r8)
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	681a      	ldr	r2, [r3, #0]
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	2110      	movs	r1, #16
 800c246:	438a      	bics	r2, r1
 800c248:	601a      	str	r2, [r3, #0]
 800c24a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c24c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c24e:	693b      	ldr	r3, [r7, #16]
 800c250:	f383 8810 	msr	PRIMASK, r3
}
 800c254:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	228c      	movs	r2, #140	@ 0x8c
 800c25a:	2120      	movs	r1, #32
 800c25c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	2200      	movs	r2, #0
 800c262:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	2200      	movs	r2, #0
 800c268:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c26a:	46c0      	nop			@ (mov r8, r8)
 800c26c:	46bd      	mov	sp, r7
 800c26e:	b00e      	add	sp, #56	@ 0x38
 800c270:	bd80      	pop	{r7, pc}
 800c272:	46c0      	nop			@ (mov r8, r8)
 800c274:	fffffedf 	.word	0xfffffedf
 800c278:	effffffe 	.word	0xeffffffe

0800c27c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c27c:	b580      	push	{r7, lr}
 800c27e:	b084      	sub	sp, #16
 800c280:	af00      	add	r7, sp, #0
 800c282:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	2284      	movs	r2, #132	@ 0x84
 800c288:	5c9b      	ldrb	r3, [r3, r2]
 800c28a:	2b01      	cmp	r3, #1
 800c28c:	d101      	bne.n	800c292 <HAL_UARTEx_DisableFifoMode+0x16>
 800c28e:	2302      	movs	r3, #2
 800c290:	e027      	b.n	800c2e2 <HAL_UARTEx_DisableFifoMode+0x66>
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	2284      	movs	r2, #132	@ 0x84
 800c296:	2101      	movs	r1, #1
 800c298:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	2288      	movs	r2, #136	@ 0x88
 800c29e:	2124      	movs	r1, #36	@ 0x24
 800c2a0:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	681a      	ldr	r2, [r3, #0]
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	2101      	movs	r1, #1
 800c2b6:	438a      	bics	r2, r1
 800c2b8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	4a0b      	ldr	r2, [pc, #44]	@ (800c2ec <HAL_UARTEx_DisableFifoMode+0x70>)
 800c2be:	4013      	ands	r3, r2
 800c2c0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	2200      	movs	r2, #0
 800c2c6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	68fa      	ldr	r2, [r7, #12]
 800c2ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	2288      	movs	r2, #136	@ 0x88
 800c2d4:	2120      	movs	r1, #32
 800c2d6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	2284      	movs	r2, #132	@ 0x84
 800c2dc:	2100      	movs	r1, #0
 800c2de:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c2e0:	2300      	movs	r3, #0
}
 800c2e2:	0018      	movs	r0, r3
 800c2e4:	46bd      	mov	sp, r7
 800c2e6:	b004      	add	sp, #16
 800c2e8:	bd80      	pop	{r7, pc}
 800c2ea:	46c0      	nop			@ (mov r8, r8)
 800c2ec:	dfffffff 	.word	0xdfffffff

0800c2f0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c2f0:	b580      	push	{r7, lr}
 800c2f2:	b084      	sub	sp, #16
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	6078      	str	r0, [r7, #4]
 800c2f8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	2284      	movs	r2, #132	@ 0x84
 800c2fe:	5c9b      	ldrb	r3, [r3, r2]
 800c300:	2b01      	cmp	r3, #1
 800c302:	d101      	bne.n	800c308 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c304:	2302      	movs	r3, #2
 800c306:	e02e      	b.n	800c366 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	2284      	movs	r2, #132	@ 0x84
 800c30c:	2101      	movs	r1, #1
 800c30e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	2288      	movs	r2, #136	@ 0x88
 800c314:	2124      	movs	r1, #36	@ 0x24
 800c316:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	681a      	ldr	r2, [r3, #0]
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	2101      	movs	r1, #1
 800c32c:	438a      	bics	r2, r1
 800c32e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	689b      	ldr	r3, [r3, #8]
 800c336:	00db      	lsls	r3, r3, #3
 800c338:	08d9      	lsrs	r1, r3, #3
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	683a      	ldr	r2, [r7, #0]
 800c340:	430a      	orrs	r2, r1
 800c342:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	0018      	movs	r0, r3
 800c348:	f000 f854 	bl	800c3f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	68fa      	ldr	r2, [r7, #12]
 800c352:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	2288      	movs	r2, #136	@ 0x88
 800c358:	2120      	movs	r1, #32
 800c35a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	2284      	movs	r2, #132	@ 0x84
 800c360:	2100      	movs	r1, #0
 800c362:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c364:	2300      	movs	r3, #0
}
 800c366:	0018      	movs	r0, r3
 800c368:	46bd      	mov	sp, r7
 800c36a:	b004      	add	sp, #16
 800c36c:	bd80      	pop	{r7, pc}
	...

0800c370 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c370:	b580      	push	{r7, lr}
 800c372:	b084      	sub	sp, #16
 800c374:	af00      	add	r7, sp, #0
 800c376:	6078      	str	r0, [r7, #4]
 800c378:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	2284      	movs	r2, #132	@ 0x84
 800c37e:	5c9b      	ldrb	r3, [r3, r2]
 800c380:	2b01      	cmp	r3, #1
 800c382:	d101      	bne.n	800c388 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c384:	2302      	movs	r3, #2
 800c386:	e02f      	b.n	800c3e8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	2284      	movs	r2, #132	@ 0x84
 800c38c:	2101      	movs	r1, #1
 800c38e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	2288      	movs	r2, #136	@ 0x88
 800c394:	2124      	movs	r1, #36	@ 0x24
 800c396:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	681a      	ldr	r2, [r3, #0]
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	2101      	movs	r1, #1
 800c3ac:	438a      	bics	r2, r1
 800c3ae:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	689b      	ldr	r3, [r3, #8]
 800c3b6:	4a0e      	ldr	r2, [pc, #56]	@ (800c3f0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800c3b8:	4013      	ands	r3, r2
 800c3ba:	0019      	movs	r1, r3
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	683a      	ldr	r2, [r7, #0]
 800c3c2:	430a      	orrs	r2, r1
 800c3c4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	0018      	movs	r0, r3
 800c3ca:	f000 f813 	bl	800c3f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	68fa      	ldr	r2, [r7, #12]
 800c3d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	2288      	movs	r2, #136	@ 0x88
 800c3da:	2120      	movs	r1, #32
 800c3dc:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	2284      	movs	r2, #132	@ 0x84
 800c3e2:	2100      	movs	r1, #0
 800c3e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c3e6:	2300      	movs	r3, #0
}
 800c3e8:	0018      	movs	r0, r3
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	b004      	add	sp, #16
 800c3ee:	bd80      	pop	{r7, pc}
 800c3f0:	f1ffffff 	.word	0xf1ffffff

0800c3f4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c3f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c3f6:	b085      	sub	sp, #20
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c400:	2b00      	cmp	r3, #0
 800c402:	d108      	bne.n	800c416 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	226a      	movs	r2, #106	@ 0x6a
 800c408:	2101      	movs	r1, #1
 800c40a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	2268      	movs	r2, #104	@ 0x68
 800c410:	2101      	movs	r1, #1
 800c412:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c414:	e043      	b.n	800c49e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c416:	260f      	movs	r6, #15
 800c418:	19bb      	adds	r3, r7, r6
 800c41a:	2208      	movs	r2, #8
 800c41c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c41e:	200e      	movs	r0, #14
 800c420:	183b      	adds	r3, r7, r0
 800c422:	2208      	movs	r2, #8
 800c424:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	689b      	ldr	r3, [r3, #8]
 800c42c:	0e5b      	lsrs	r3, r3, #25
 800c42e:	b2da      	uxtb	r2, r3
 800c430:	240d      	movs	r4, #13
 800c432:	193b      	adds	r3, r7, r4
 800c434:	2107      	movs	r1, #7
 800c436:	400a      	ands	r2, r1
 800c438:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	689b      	ldr	r3, [r3, #8]
 800c440:	0f5b      	lsrs	r3, r3, #29
 800c442:	b2da      	uxtb	r2, r3
 800c444:	250c      	movs	r5, #12
 800c446:	197b      	adds	r3, r7, r5
 800c448:	2107      	movs	r1, #7
 800c44a:	400a      	ands	r2, r1
 800c44c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c44e:	183b      	adds	r3, r7, r0
 800c450:	781b      	ldrb	r3, [r3, #0]
 800c452:	197a      	adds	r2, r7, r5
 800c454:	7812      	ldrb	r2, [r2, #0]
 800c456:	4914      	ldr	r1, [pc, #80]	@ (800c4a8 <UARTEx_SetNbDataToProcess+0xb4>)
 800c458:	5c8a      	ldrb	r2, [r1, r2]
 800c45a:	435a      	muls	r2, r3
 800c45c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800c45e:	197b      	adds	r3, r7, r5
 800c460:	781b      	ldrb	r3, [r3, #0]
 800c462:	4a12      	ldr	r2, [pc, #72]	@ (800c4ac <UARTEx_SetNbDataToProcess+0xb8>)
 800c464:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c466:	0019      	movs	r1, r3
 800c468:	f7f3 fefc 	bl	8000264 <__divsi3>
 800c46c:	0003      	movs	r3, r0
 800c46e:	b299      	uxth	r1, r3
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	226a      	movs	r2, #106	@ 0x6a
 800c474:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c476:	19bb      	adds	r3, r7, r6
 800c478:	781b      	ldrb	r3, [r3, #0]
 800c47a:	193a      	adds	r2, r7, r4
 800c47c:	7812      	ldrb	r2, [r2, #0]
 800c47e:	490a      	ldr	r1, [pc, #40]	@ (800c4a8 <UARTEx_SetNbDataToProcess+0xb4>)
 800c480:	5c8a      	ldrb	r2, [r1, r2]
 800c482:	435a      	muls	r2, r3
 800c484:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800c486:	193b      	adds	r3, r7, r4
 800c488:	781b      	ldrb	r3, [r3, #0]
 800c48a:	4a08      	ldr	r2, [pc, #32]	@ (800c4ac <UARTEx_SetNbDataToProcess+0xb8>)
 800c48c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c48e:	0019      	movs	r1, r3
 800c490:	f7f3 fee8 	bl	8000264 <__divsi3>
 800c494:	0003      	movs	r3, r0
 800c496:	b299      	uxth	r1, r3
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	2268      	movs	r2, #104	@ 0x68
 800c49c:	5299      	strh	r1, [r3, r2]
}
 800c49e:	46c0      	nop			@ (mov r8, r8)
 800c4a0:	46bd      	mov	sp, r7
 800c4a2:	b005      	add	sp, #20
 800c4a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4a6:	46c0      	nop			@ (mov r8, r8)
 800c4a8:	08010770 	.word	0x08010770
 800c4ac:	08010778 	.word	0x08010778

0800c4b0 <sulp>:
 800c4b0:	b570      	push	{r4, r5, r6, lr}
 800c4b2:	0016      	movs	r6, r2
 800c4b4:	000d      	movs	r5, r1
 800c4b6:	f002 f925 	bl	800e704 <__ulp>
 800c4ba:	2e00      	cmp	r6, #0
 800c4bc:	d00d      	beq.n	800c4da <sulp+0x2a>
 800c4be:	236b      	movs	r3, #107	@ 0x6b
 800c4c0:	006a      	lsls	r2, r5, #1
 800c4c2:	0d52      	lsrs	r2, r2, #21
 800c4c4:	1a9b      	subs	r3, r3, r2
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	dd07      	ble.n	800c4da <sulp+0x2a>
 800c4ca:	2400      	movs	r4, #0
 800c4cc:	4a03      	ldr	r2, [pc, #12]	@ (800c4dc <sulp+0x2c>)
 800c4ce:	051b      	lsls	r3, r3, #20
 800c4d0:	189d      	adds	r5, r3, r2
 800c4d2:	002b      	movs	r3, r5
 800c4d4:	0022      	movs	r2, r4
 800c4d6:	f7f6 f871 	bl	80025bc <__aeabi_dmul>
 800c4da:	bd70      	pop	{r4, r5, r6, pc}
 800c4dc:	3ff00000 	.word	0x3ff00000

0800c4e0 <_strtod_l>:
 800c4e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c4e2:	b0a3      	sub	sp, #140	@ 0x8c
 800c4e4:	921b      	str	r2, [sp, #108]	@ 0x6c
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	2600      	movs	r6, #0
 800c4ea:	2700      	movs	r7, #0
 800c4ec:	9005      	str	r0, [sp, #20]
 800c4ee:	9109      	str	r1, [sp, #36]	@ 0x24
 800c4f0:	921e      	str	r2, [sp, #120]	@ 0x78
 800c4f2:	911d      	str	r1, [sp, #116]	@ 0x74
 800c4f4:	780a      	ldrb	r2, [r1, #0]
 800c4f6:	2a2b      	cmp	r2, #43	@ 0x2b
 800c4f8:	d053      	beq.n	800c5a2 <_strtod_l+0xc2>
 800c4fa:	d83f      	bhi.n	800c57c <_strtod_l+0x9c>
 800c4fc:	2a0d      	cmp	r2, #13
 800c4fe:	d839      	bhi.n	800c574 <_strtod_l+0x94>
 800c500:	2a08      	cmp	r2, #8
 800c502:	d839      	bhi.n	800c578 <_strtod_l+0x98>
 800c504:	2a00      	cmp	r2, #0
 800c506:	d042      	beq.n	800c58e <_strtod_l+0xae>
 800c508:	2200      	movs	r2, #0
 800c50a:	9212      	str	r2, [sp, #72]	@ 0x48
 800c50c:	2100      	movs	r1, #0
 800c50e:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 800c510:	910c      	str	r1, [sp, #48]	@ 0x30
 800c512:	782a      	ldrb	r2, [r5, #0]
 800c514:	2a30      	cmp	r2, #48	@ 0x30
 800c516:	d000      	beq.n	800c51a <_strtod_l+0x3a>
 800c518:	e083      	b.n	800c622 <_strtod_l+0x142>
 800c51a:	786a      	ldrb	r2, [r5, #1]
 800c51c:	3120      	adds	r1, #32
 800c51e:	438a      	bics	r2, r1
 800c520:	2a58      	cmp	r2, #88	@ 0x58
 800c522:	d000      	beq.n	800c526 <_strtod_l+0x46>
 800c524:	e073      	b.n	800c60e <_strtod_l+0x12e>
 800c526:	9302      	str	r3, [sp, #8]
 800c528:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c52a:	4a95      	ldr	r2, [pc, #596]	@ (800c780 <_strtod_l+0x2a0>)
 800c52c:	9301      	str	r3, [sp, #4]
 800c52e:	ab1e      	add	r3, sp, #120	@ 0x78
 800c530:	9300      	str	r3, [sp, #0]
 800c532:	9805      	ldr	r0, [sp, #20]
 800c534:	ab1f      	add	r3, sp, #124	@ 0x7c
 800c536:	a91d      	add	r1, sp, #116	@ 0x74
 800c538:	f001 f99e 	bl	800d878 <__gethex>
 800c53c:	230f      	movs	r3, #15
 800c53e:	0002      	movs	r2, r0
 800c540:	401a      	ands	r2, r3
 800c542:	0004      	movs	r4, r0
 800c544:	9206      	str	r2, [sp, #24]
 800c546:	4218      	tst	r0, r3
 800c548:	d005      	beq.n	800c556 <_strtod_l+0x76>
 800c54a:	2a06      	cmp	r2, #6
 800c54c:	d12b      	bne.n	800c5a6 <_strtod_l+0xc6>
 800c54e:	2300      	movs	r3, #0
 800c550:	3501      	adds	r5, #1
 800c552:	951d      	str	r5, [sp, #116]	@ 0x74
 800c554:	9312      	str	r3, [sp, #72]	@ 0x48
 800c556:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d002      	beq.n	800c562 <_strtod_l+0x82>
 800c55c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c55e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800c560:	6013      	str	r3, [r2, #0]
 800c562:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c564:	2b00      	cmp	r3, #0
 800c566:	d019      	beq.n	800c59c <_strtod_l+0xbc>
 800c568:	2380      	movs	r3, #128	@ 0x80
 800c56a:	0030      	movs	r0, r6
 800c56c:	061b      	lsls	r3, r3, #24
 800c56e:	18f9      	adds	r1, r7, r3
 800c570:	b023      	add	sp, #140	@ 0x8c
 800c572:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c574:	2a20      	cmp	r2, #32
 800c576:	d1c7      	bne.n	800c508 <_strtod_l+0x28>
 800c578:	3101      	adds	r1, #1
 800c57a:	e7ba      	b.n	800c4f2 <_strtod_l+0x12>
 800c57c:	2a2d      	cmp	r2, #45	@ 0x2d
 800c57e:	d1c3      	bne.n	800c508 <_strtod_l+0x28>
 800c580:	3a2c      	subs	r2, #44	@ 0x2c
 800c582:	9212      	str	r2, [sp, #72]	@ 0x48
 800c584:	1c4a      	adds	r2, r1, #1
 800c586:	921d      	str	r2, [sp, #116]	@ 0x74
 800c588:	784a      	ldrb	r2, [r1, #1]
 800c58a:	2a00      	cmp	r2, #0
 800c58c:	d1be      	bne.n	800c50c <_strtod_l+0x2c>
 800c58e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c590:	931d      	str	r3, [sp, #116]	@ 0x74
 800c592:	2300      	movs	r3, #0
 800c594:	9312      	str	r3, [sp, #72]	@ 0x48
 800c596:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d1df      	bne.n	800c55c <_strtod_l+0x7c>
 800c59c:	0030      	movs	r0, r6
 800c59e:	0039      	movs	r1, r7
 800c5a0:	e7e6      	b.n	800c570 <_strtod_l+0x90>
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	e7ed      	b.n	800c582 <_strtod_l+0xa2>
 800c5a6:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 800c5a8:	2a00      	cmp	r2, #0
 800c5aa:	d007      	beq.n	800c5bc <_strtod_l+0xdc>
 800c5ac:	2135      	movs	r1, #53	@ 0x35
 800c5ae:	a820      	add	r0, sp, #128	@ 0x80
 800c5b0:	f002 f99e 	bl	800e8f0 <__copybits>
 800c5b4:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800c5b6:	9805      	ldr	r0, [sp, #20]
 800c5b8:	f001 fd58 	bl	800e06c <_Bfree>
 800c5bc:	9806      	ldr	r0, [sp, #24]
 800c5be:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800c5c0:	3801      	subs	r0, #1
 800c5c2:	2804      	cmp	r0, #4
 800c5c4:	d806      	bhi.n	800c5d4 <_strtod_l+0xf4>
 800c5c6:	f7f3 fdaf 	bl	8000128 <__gnu_thumb1_case_uqi>
 800c5ca:	0312      	.short	0x0312
 800c5cc:	1e1c      	.short	0x1e1c
 800c5ce:	12          	.byte	0x12
 800c5cf:	00          	.byte	0x00
 800c5d0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800c5d2:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 800c5d4:	05e4      	lsls	r4, r4, #23
 800c5d6:	d502      	bpl.n	800c5de <_strtod_l+0xfe>
 800c5d8:	2380      	movs	r3, #128	@ 0x80
 800c5da:	061b      	lsls	r3, r3, #24
 800c5dc:	431f      	orrs	r7, r3
 800c5de:	4b69      	ldr	r3, [pc, #420]	@ (800c784 <_strtod_l+0x2a4>)
 800c5e0:	423b      	tst	r3, r7
 800c5e2:	d1b8      	bne.n	800c556 <_strtod_l+0x76>
 800c5e4:	f001 f85a 	bl	800d69c <__errno>
 800c5e8:	2322      	movs	r3, #34	@ 0x22
 800c5ea:	6003      	str	r3, [r0, #0]
 800c5ec:	e7b3      	b.n	800c556 <_strtod_l+0x76>
 800c5ee:	4966      	ldr	r1, [pc, #408]	@ (800c788 <_strtod_l+0x2a8>)
 800c5f0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800c5f2:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800c5f4:	400a      	ands	r2, r1
 800c5f6:	4965      	ldr	r1, [pc, #404]	@ (800c78c <_strtod_l+0x2ac>)
 800c5f8:	185b      	adds	r3, r3, r1
 800c5fa:	051b      	lsls	r3, r3, #20
 800c5fc:	431a      	orrs	r2, r3
 800c5fe:	0017      	movs	r7, r2
 800c600:	e7e8      	b.n	800c5d4 <_strtod_l+0xf4>
 800c602:	4f60      	ldr	r7, [pc, #384]	@ (800c784 <_strtod_l+0x2a4>)
 800c604:	e7e6      	b.n	800c5d4 <_strtod_l+0xf4>
 800c606:	2601      	movs	r6, #1
 800c608:	4f61      	ldr	r7, [pc, #388]	@ (800c790 <_strtod_l+0x2b0>)
 800c60a:	4276      	negs	r6, r6
 800c60c:	e7e2      	b.n	800c5d4 <_strtod_l+0xf4>
 800c60e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c610:	1c5a      	adds	r2, r3, #1
 800c612:	921d      	str	r2, [sp, #116]	@ 0x74
 800c614:	785b      	ldrb	r3, [r3, #1]
 800c616:	2b30      	cmp	r3, #48	@ 0x30
 800c618:	d0f9      	beq.n	800c60e <_strtod_l+0x12e>
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d09b      	beq.n	800c556 <_strtod_l+0x76>
 800c61e:	2301      	movs	r3, #1
 800c620:	930c      	str	r3, [sp, #48]	@ 0x30
 800c622:	2500      	movs	r5, #0
 800c624:	220a      	movs	r2, #10
 800c626:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c628:	950d      	str	r5, [sp, #52]	@ 0x34
 800c62a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c62c:	9508      	str	r5, [sp, #32]
 800c62e:	981d      	ldr	r0, [sp, #116]	@ 0x74
 800c630:	7804      	ldrb	r4, [r0, #0]
 800c632:	0023      	movs	r3, r4
 800c634:	3b30      	subs	r3, #48	@ 0x30
 800c636:	b2d9      	uxtb	r1, r3
 800c638:	2909      	cmp	r1, #9
 800c63a:	d927      	bls.n	800c68c <_strtod_l+0x1ac>
 800c63c:	2201      	movs	r2, #1
 800c63e:	4955      	ldr	r1, [pc, #340]	@ (800c794 <_strtod_l+0x2b4>)
 800c640:	f000 ffcc 	bl	800d5dc <strncmp>
 800c644:	2800      	cmp	r0, #0
 800c646:	d031      	beq.n	800c6ac <_strtod_l+0x1cc>
 800c648:	2000      	movs	r0, #0
 800c64a:	0023      	movs	r3, r4
 800c64c:	4684      	mov	ip, r0
 800c64e:	9a08      	ldr	r2, [sp, #32]
 800c650:	900e      	str	r0, [sp, #56]	@ 0x38
 800c652:	9206      	str	r2, [sp, #24]
 800c654:	2220      	movs	r2, #32
 800c656:	0019      	movs	r1, r3
 800c658:	4391      	bics	r1, r2
 800c65a:	000a      	movs	r2, r1
 800c65c:	2100      	movs	r1, #0
 800c65e:	9107      	str	r1, [sp, #28]
 800c660:	2a45      	cmp	r2, #69	@ 0x45
 800c662:	d000      	beq.n	800c666 <_strtod_l+0x186>
 800c664:	e0c0      	b.n	800c7e8 <_strtod_l+0x308>
 800c666:	9b06      	ldr	r3, [sp, #24]
 800c668:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c66a:	4303      	orrs	r3, r0
 800c66c:	4313      	orrs	r3, r2
 800c66e:	428b      	cmp	r3, r1
 800c670:	d08d      	beq.n	800c58e <_strtod_l+0xae>
 800c672:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c674:	9309      	str	r3, [sp, #36]	@ 0x24
 800c676:	3301      	adds	r3, #1
 800c678:	931d      	str	r3, [sp, #116]	@ 0x74
 800c67a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c67c:	785b      	ldrb	r3, [r3, #1]
 800c67e:	2b2b      	cmp	r3, #43	@ 0x2b
 800c680:	d070      	beq.n	800c764 <_strtod_l+0x284>
 800c682:	000c      	movs	r4, r1
 800c684:	2b2d      	cmp	r3, #45	@ 0x2d
 800c686:	d173      	bne.n	800c770 <_strtod_l+0x290>
 800c688:	2401      	movs	r4, #1
 800c68a:	e06c      	b.n	800c766 <_strtod_l+0x286>
 800c68c:	9908      	ldr	r1, [sp, #32]
 800c68e:	2908      	cmp	r1, #8
 800c690:	dc09      	bgt.n	800c6a6 <_strtod_l+0x1c6>
 800c692:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800c694:	4351      	muls	r1, r2
 800c696:	185b      	adds	r3, r3, r1
 800c698:	930d      	str	r3, [sp, #52]	@ 0x34
 800c69a:	9b08      	ldr	r3, [sp, #32]
 800c69c:	3001      	adds	r0, #1
 800c69e:	3301      	adds	r3, #1
 800c6a0:	9308      	str	r3, [sp, #32]
 800c6a2:	901d      	str	r0, [sp, #116]	@ 0x74
 800c6a4:	e7c3      	b.n	800c62e <_strtod_l+0x14e>
 800c6a6:	4355      	muls	r5, r2
 800c6a8:	195d      	adds	r5, r3, r5
 800c6aa:	e7f6      	b.n	800c69a <_strtod_l+0x1ba>
 800c6ac:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c6ae:	1c5a      	adds	r2, r3, #1
 800c6b0:	921d      	str	r2, [sp, #116]	@ 0x74
 800c6b2:	9a08      	ldr	r2, [sp, #32]
 800c6b4:	785b      	ldrb	r3, [r3, #1]
 800c6b6:	2a00      	cmp	r2, #0
 800c6b8:	d03a      	beq.n	800c730 <_strtod_l+0x250>
 800c6ba:	900e      	str	r0, [sp, #56]	@ 0x38
 800c6bc:	9206      	str	r2, [sp, #24]
 800c6be:	001a      	movs	r2, r3
 800c6c0:	3a30      	subs	r2, #48	@ 0x30
 800c6c2:	2a09      	cmp	r2, #9
 800c6c4:	d912      	bls.n	800c6ec <_strtod_l+0x20c>
 800c6c6:	2201      	movs	r2, #1
 800c6c8:	4694      	mov	ip, r2
 800c6ca:	e7c3      	b.n	800c654 <_strtod_l+0x174>
 800c6cc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c6ce:	3001      	adds	r0, #1
 800c6d0:	1c5a      	adds	r2, r3, #1
 800c6d2:	921d      	str	r2, [sp, #116]	@ 0x74
 800c6d4:	785b      	ldrb	r3, [r3, #1]
 800c6d6:	2b30      	cmp	r3, #48	@ 0x30
 800c6d8:	d0f8      	beq.n	800c6cc <_strtod_l+0x1ec>
 800c6da:	001a      	movs	r2, r3
 800c6dc:	3a31      	subs	r2, #49	@ 0x31
 800c6de:	2a08      	cmp	r2, #8
 800c6e0:	d83b      	bhi.n	800c75a <_strtod_l+0x27a>
 800c6e2:	900e      	str	r0, [sp, #56]	@ 0x38
 800c6e4:	2000      	movs	r0, #0
 800c6e6:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800c6e8:	9006      	str	r0, [sp, #24]
 800c6ea:	9213      	str	r2, [sp, #76]	@ 0x4c
 800c6ec:	001a      	movs	r2, r3
 800c6ee:	1c41      	adds	r1, r0, #1
 800c6f0:	3a30      	subs	r2, #48	@ 0x30
 800c6f2:	2b30      	cmp	r3, #48	@ 0x30
 800c6f4:	d016      	beq.n	800c724 <_strtod_l+0x244>
 800c6f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c6f8:	185b      	adds	r3, r3, r1
 800c6fa:	930e      	str	r3, [sp, #56]	@ 0x38
 800c6fc:	9b06      	ldr	r3, [sp, #24]
 800c6fe:	210a      	movs	r1, #10
 800c700:	469c      	mov	ip, r3
 800c702:	4484      	add	ip, r0
 800c704:	459c      	cmp	ip, r3
 800c706:	d115      	bne.n	800c734 <_strtod_l+0x254>
 800c708:	9906      	ldr	r1, [sp, #24]
 800c70a:	9b06      	ldr	r3, [sp, #24]
 800c70c:	3101      	adds	r1, #1
 800c70e:	1809      	adds	r1, r1, r0
 800c710:	181b      	adds	r3, r3, r0
 800c712:	9106      	str	r1, [sp, #24]
 800c714:	2b08      	cmp	r3, #8
 800c716:	dc19      	bgt.n	800c74c <_strtod_l+0x26c>
 800c718:	230a      	movs	r3, #10
 800c71a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800c71c:	434b      	muls	r3, r1
 800c71e:	2100      	movs	r1, #0
 800c720:	18d3      	adds	r3, r2, r3
 800c722:	930d      	str	r3, [sp, #52]	@ 0x34
 800c724:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c726:	0008      	movs	r0, r1
 800c728:	1c5a      	adds	r2, r3, #1
 800c72a:	921d      	str	r2, [sp, #116]	@ 0x74
 800c72c:	785b      	ldrb	r3, [r3, #1]
 800c72e:	e7c6      	b.n	800c6be <_strtod_l+0x1de>
 800c730:	9808      	ldr	r0, [sp, #32]
 800c732:	e7d0      	b.n	800c6d6 <_strtod_l+0x1f6>
 800c734:	1c5c      	adds	r4, r3, #1
 800c736:	2b08      	cmp	r3, #8
 800c738:	dc04      	bgt.n	800c744 <_strtod_l+0x264>
 800c73a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c73c:	434b      	muls	r3, r1
 800c73e:	930d      	str	r3, [sp, #52]	@ 0x34
 800c740:	0023      	movs	r3, r4
 800c742:	e7df      	b.n	800c704 <_strtod_l+0x224>
 800c744:	2c10      	cmp	r4, #16
 800c746:	dcfb      	bgt.n	800c740 <_strtod_l+0x260>
 800c748:	434d      	muls	r5, r1
 800c74a:	e7f9      	b.n	800c740 <_strtod_l+0x260>
 800c74c:	2100      	movs	r1, #0
 800c74e:	2b0f      	cmp	r3, #15
 800c750:	dce8      	bgt.n	800c724 <_strtod_l+0x244>
 800c752:	230a      	movs	r3, #10
 800c754:	435d      	muls	r5, r3
 800c756:	1955      	adds	r5, r2, r5
 800c758:	e7e4      	b.n	800c724 <_strtod_l+0x244>
 800c75a:	2200      	movs	r2, #0
 800c75c:	920e      	str	r2, [sp, #56]	@ 0x38
 800c75e:	9206      	str	r2, [sp, #24]
 800c760:	3201      	adds	r2, #1
 800c762:	e7b1      	b.n	800c6c8 <_strtod_l+0x1e8>
 800c764:	2400      	movs	r4, #0
 800c766:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c768:	3302      	adds	r3, #2
 800c76a:	931d      	str	r3, [sp, #116]	@ 0x74
 800c76c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c76e:	789b      	ldrb	r3, [r3, #2]
 800c770:	001a      	movs	r2, r3
 800c772:	3a30      	subs	r2, #48	@ 0x30
 800c774:	2a09      	cmp	r2, #9
 800c776:	d913      	bls.n	800c7a0 <_strtod_l+0x2c0>
 800c778:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c77a:	921d      	str	r2, [sp, #116]	@ 0x74
 800c77c:	2200      	movs	r2, #0
 800c77e:	e032      	b.n	800c7e6 <_strtod_l+0x306>
 800c780:	080107a4 	.word	0x080107a4
 800c784:	7ff00000 	.word	0x7ff00000
 800c788:	ffefffff 	.word	0xffefffff
 800c78c:	00000433 	.word	0x00000433
 800c790:	7fffffff 	.word	0x7fffffff
 800c794:	08010780 	.word	0x08010780
 800c798:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c79a:	1c5a      	adds	r2, r3, #1
 800c79c:	921d      	str	r2, [sp, #116]	@ 0x74
 800c79e:	785b      	ldrb	r3, [r3, #1]
 800c7a0:	2b30      	cmp	r3, #48	@ 0x30
 800c7a2:	d0f9      	beq.n	800c798 <_strtod_l+0x2b8>
 800c7a4:	2200      	movs	r2, #0
 800c7a6:	9207      	str	r2, [sp, #28]
 800c7a8:	001a      	movs	r2, r3
 800c7aa:	3a31      	subs	r2, #49	@ 0x31
 800c7ac:	2a08      	cmp	r2, #8
 800c7ae:	d81b      	bhi.n	800c7e8 <_strtod_l+0x308>
 800c7b0:	3b30      	subs	r3, #48	@ 0x30
 800c7b2:	9310      	str	r3, [sp, #64]	@ 0x40
 800c7b4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c7b6:	9307      	str	r3, [sp, #28]
 800c7b8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c7ba:	1c59      	adds	r1, r3, #1
 800c7bc:	911d      	str	r1, [sp, #116]	@ 0x74
 800c7be:	785b      	ldrb	r3, [r3, #1]
 800c7c0:	001a      	movs	r2, r3
 800c7c2:	3a30      	subs	r2, #48	@ 0x30
 800c7c4:	2a09      	cmp	r2, #9
 800c7c6:	d93a      	bls.n	800c83e <_strtod_l+0x35e>
 800c7c8:	9a07      	ldr	r2, [sp, #28]
 800c7ca:	1a8a      	subs	r2, r1, r2
 800c7cc:	49b4      	ldr	r1, [pc, #720]	@ (800caa0 <_strtod_l+0x5c0>)
 800c7ce:	9107      	str	r1, [sp, #28]
 800c7d0:	2a08      	cmp	r2, #8
 800c7d2:	dc04      	bgt.n	800c7de <_strtod_l+0x2fe>
 800c7d4:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800c7d6:	9207      	str	r2, [sp, #28]
 800c7d8:	428a      	cmp	r2, r1
 800c7da:	dd00      	ble.n	800c7de <_strtod_l+0x2fe>
 800c7dc:	9107      	str	r1, [sp, #28]
 800c7de:	2c00      	cmp	r4, #0
 800c7e0:	d002      	beq.n	800c7e8 <_strtod_l+0x308>
 800c7e2:	9a07      	ldr	r2, [sp, #28]
 800c7e4:	4252      	negs	r2, r2
 800c7e6:	9207      	str	r2, [sp, #28]
 800c7e8:	9a06      	ldr	r2, [sp, #24]
 800c7ea:	2a00      	cmp	r2, #0
 800c7ec:	d14d      	bne.n	800c88a <_strtod_l+0x3aa>
 800c7ee:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c7f0:	4310      	orrs	r0, r2
 800c7f2:	d000      	beq.n	800c7f6 <_strtod_l+0x316>
 800c7f4:	e6af      	b.n	800c556 <_strtod_l+0x76>
 800c7f6:	4662      	mov	r2, ip
 800c7f8:	2a00      	cmp	r2, #0
 800c7fa:	d000      	beq.n	800c7fe <_strtod_l+0x31e>
 800c7fc:	e6c7      	b.n	800c58e <_strtod_l+0xae>
 800c7fe:	2b69      	cmp	r3, #105	@ 0x69
 800c800:	d027      	beq.n	800c852 <_strtod_l+0x372>
 800c802:	dc23      	bgt.n	800c84c <_strtod_l+0x36c>
 800c804:	2b49      	cmp	r3, #73	@ 0x49
 800c806:	d024      	beq.n	800c852 <_strtod_l+0x372>
 800c808:	2b4e      	cmp	r3, #78	@ 0x4e
 800c80a:	d000      	beq.n	800c80e <_strtod_l+0x32e>
 800c80c:	e6bf      	b.n	800c58e <_strtod_l+0xae>
 800c80e:	49a5      	ldr	r1, [pc, #660]	@ (800caa4 <_strtod_l+0x5c4>)
 800c810:	a81d      	add	r0, sp, #116	@ 0x74
 800c812:	f001 fa67 	bl	800dce4 <__match>
 800c816:	2800      	cmp	r0, #0
 800c818:	d100      	bne.n	800c81c <_strtod_l+0x33c>
 800c81a:	e6b8      	b.n	800c58e <_strtod_l+0xae>
 800c81c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c81e:	781b      	ldrb	r3, [r3, #0]
 800c820:	2b28      	cmp	r3, #40	@ 0x28
 800c822:	d12c      	bne.n	800c87e <_strtod_l+0x39e>
 800c824:	49a0      	ldr	r1, [pc, #640]	@ (800caa8 <_strtod_l+0x5c8>)
 800c826:	aa20      	add	r2, sp, #128	@ 0x80
 800c828:	a81d      	add	r0, sp, #116	@ 0x74
 800c82a:	f001 fa6f 	bl	800dd0c <__hexnan>
 800c82e:	2805      	cmp	r0, #5
 800c830:	d125      	bne.n	800c87e <_strtod_l+0x39e>
 800c832:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c834:	4a9d      	ldr	r2, [pc, #628]	@ (800caac <_strtod_l+0x5cc>)
 800c836:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800c838:	431a      	orrs	r2, r3
 800c83a:	0017      	movs	r7, r2
 800c83c:	e68b      	b.n	800c556 <_strtod_l+0x76>
 800c83e:	220a      	movs	r2, #10
 800c840:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800c842:	434a      	muls	r2, r1
 800c844:	18d2      	adds	r2, r2, r3
 800c846:	3a30      	subs	r2, #48	@ 0x30
 800c848:	9210      	str	r2, [sp, #64]	@ 0x40
 800c84a:	e7b5      	b.n	800c7b8 <_strtod_l+0x2d8>
 800c84c:	2b6e      	cmp	r3, #110	@ 0x6e
 800c84e:	d0de      	beq.n	800c80e <_strtod_l+0x32e>
 800c850:	e69d      	b.n	800c58e <_strtod_l+0xae>
 800c852:	4997      	ldr	r1, [pc, #604]	@ (800cab0 <_strtod_l+0x5d0>)
 800c854:	a81d      	add	r0, sp, #116	@ 0x74
 800c856:	f001 fa45 	bl	800dce4 <__match>
 800c85a:	2800      	cmp	r0, #0
 800c85c:	d100      	bne.n	800c860 <_strtod_l+0x380>
 800c85e:	e696      	b.n	800c58e <_strtod_l+0xae>
 800c860:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c862:	4994      	ldr	r1, [pc, #592]	@ (800cab4 <_strtod_l+0x5d4>)
 800c864:	3b01      	subs	r3, #1
 800c866:	a81d      	add	r0, sp, #116	@ 0x74
 800c868:	931d      	str	r3, [sp, #116]	@ 0x74
 800c86a:	f001 fa3b 	bl	800dce4 <__match>
 800c86e:	2800      	cmp	r0, #0
 800c870:	d102      	bne.n	800c878 <_strtod_l+0x398>
 800c872:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c874:	3301      	adds	r3, #1
 800c876:	931d      	str	r3, [sp, #116]	@ 0x74
 800c878:	2600      	movs	r6, #0
 800c87a:	4f8c      	ldr	r7, [pc, #560]	@ (800caac <_strtod_l+0x5cc>)
 800c87c:	e66b      	b.n	800c556 <_strtod_l+0x76>
 800c87e:	488e      	ldr	r0, [pc, #568]	@ (800cab8 <_strtod_l+0x5d8>)
 800c880:	f000 ff42 	bl	800d708 <nan>
 800c884:	0006      	movs	r6, r0
 800c886:	000f      	movs	r7, r1
 800c888:	e665      	b.n	800c556 <_strtod_l+0x76>
 800c88a:	9b07      	ldr	r3, [sp, #28]
 800c88c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c88e:	1a9b      	subs	r3, r3, r2
 800c890:	930c      	str	r3, [sp, #48]	@ 0x30
 800c892:	9b08      	ldr	r3, [sp, #32]
 800c894:	2b00      	cmp	r3, #0
 800c896:	d101      	bne.n	800c89c <_strtod_l+0x3bc>
 800c898:	9b06      	ldr	r3, [sp, #24]
 800c89a:	9308      	str	r3, [sp, #32]
 800c89c:	9c06      	ldr	r4, [sp, #24]
 800c89e:	2c10      	cmp	r4, #16
 800c8a0:	dd00      	ble.n	800c8a4 <_strtod_l+0x3c4>
 800c8a2:	2410      	movs	r4, #16
 800c8a4:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800c8a6:	f7f6 fd79 	bl	800339c <__aeabi_ui2d>
 800c8aa:	9b06      	ldr	r3, [sp, #24]
 800c8ac:	0006      	movs	r6, r0
 800c8ae:	000f      	movs	r7, r1
 800c8b0:	2b09      	cmp	r3, #9
 800c8b2:	dc13      	bgt.n	800c8dc <_strtod_l+0x3fc>
 800c8b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d100      	bne.n	800c8bc <_strtod_l+0x3dc>
 800c8ba:	e64c      	b.n	800c556 <_strtod_l+0x76>
 800c8bc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	dc00      	bgt.n	800c8c4 <_strtod_l+0x3e4>
 800c8c2:	e07e      	b.n	800c9c2 <_strtod_l+0x4e2>
 800c8c4:	2b16      	cmp	r3, #22
 800c8c6:	dc63      	bgt.n	800c990 <_strtod_l+0x4b0>
 800c8c8:	497c      	ldr	r1, [pc, #496]	@ (800cabc <_strtod_l+0x5dc>)
 800c8ca:	00db      	lsls	r3, r3, #3
 800c8cc:	18c9      	adds	r1, r1, r3
 800c8ce:	0032      	movs	r2, r6
 800c8d0:	6808      	ldr	r0, [r1, #0]
 800c8d2:	6849      	ldr	r1, [r1, #4]
 800c8d4:	003b      	movs	r3, r7
 800c8d6:	f7f5 fe71 	bl	80025bc <__aeabi_dmul>
 800c8da:	e7d3      	b.n	800c884 <_strtod_l+0x3a4>
 800c8dc:	0022      	movs	r2, r4
 800c8de:	4b77      	ldr	r3, [pc, #476]	@ (800cabc <_strtod_l+0x5dc>)
 800c8e0:	3a09      	subs	r2, #9
 800c8e2:	00d2      	lsls	r2, r2, #3
 800c8e4:	189b      	adds	r3, r3, r2
 800c8e6:	681a      	ldr	r2, [r3, #0]
 800c8e8:	685b      	ldr	r3, [r3, #4]
 800c8ea:	f7f5 fe67 	bl	80025bc <__aeabi_dmul>
 800c8ee:	0006      	movs	r6, r0
 800c8f0:	0028      	movs	r0, r5
 800c8f2:	000f      	movs	r7, r1
 800c8f4:	f7f6 fd52 	bl	800339c <__aeabi_ui2d>
 800c8f8:	000b      	movs	r3, r1
 800c8fa:	0002      	movs	r2, r0
 800c8fc:	0039      	movs	r1, r7
 800c8fe:	0030      	movs	r0, r6
 800c900:	f7f4 feb4 	bl	800166c <__aeabi_dadd>
 800c904:	9b06      	ldr	r3, [sp, #24]
 800c906:	0006      	movs	r6, r0
 800c908:	000f      	movs	r7, r1
 800c90a:	2b0f      	cmp	r3, #15
 800c90c:	ddd2      	ble.n	800c8b4 <_strtod_l+0x3d4>
 800c90e:	9b06      	ldr	r3, [sp, #24]
 800c910:	1b1c      	subs	r4, r3, r4
 800c912:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c914:	18e4      	adds	r4, r4, r3
 800c916:	2c00      	cmp	r4, #0
 800c918:	dc00      	bgt.n	800c91c <_strtod_l+0x43c>
 800c91a:	e09b      	b.n	800ca54 <_strtod_l+0x574>
 800c91c:	220f      	movs	r2, #15
 800c91e:	0023      	movs	r3, r4
 800c920:	4013      	ands	r3, r2
 800c922:	4214      	tst	r4, r2
 800c924:	d00a      	beq.n	800c93c <_strtod_l+0x45c>
 800c926:	4965      	ldr	r1, [pc, #404]	@ (800cabc <_strtod_l+0x5dc>)
 800c928:	00db      	lsls	r3, r3, #3
 800c92a:	18c9      	adds	r1, r1, r3
 800c92c:	0032      	movs	r2, r6
 800c92e:	6808      	ldr	r0, [r1, #0]
 800c930:	6849      	ldr	r1, [r1, #4]
 800c932:	003b      	movs	r3, r7
 800c934:	f7f5 fe42 	bl	80025bc <__aeabi_dmul>
 800c938:	0006      	movs	r6, r0
 800c93a:	000f      	movs	r7, r1
 800c93c:	230f      	movs	r3, #15
 800c93e:	439c      	bics	r4, r3
 800c940:	d073      	beq.n	800ca2a <_strtod_l+0x54a>
 800c942:	3326      	adds	r3, #38	@ 0x26
 800c944:	33ff      	adds	r3, #255	@ 0xff
 800c946:	429c      	cmp	r4, r3
 800c948:	dd4b      	ble.n	800c9e2 <_strtod_l+0x502>
 800c94a:	2300      	movs	r3, #0
 800c94c:	9306      	str	r3, [sp, #24]
 800c94e:	9307      	str	r3, [sp, #28]
 800c950:	930d      	str	r3, [sp, #52]	@ 0x34
 800c952:	9308      	str	r3, [sp, #32]
 800c954:	2322      	movs	r3, #34	@ 0x22
 800c956:	2600      	movs	r6, #0
 800c958:	9a05      	ldr	r2, [sp, #20]
 800c95a:	4f54      	ldr	r7, [pc, #336]	@ (800caac <_strtod_l+0x5cc>)
 800c95c:	6013      	str	r3, [r2, #0]
 800c95e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c960:	42b3      	cmp	r3, r6
 800c962:	d100      	bne.n	800c966 <_strtod_l+0x486>
 800c964:	e5f7      	b.n	800c556 <_strtod_l+0x76>
 800c966:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800c968:	9805      	ldr	r0, [sp, #20]
 800c96a:	f001 fb7f 	bl	800e06c <_Bfree>
 800c96e:	9908      	ldr	r1, [sp, #32]
 800c970:	9805      	ldr	r0, [sp, #20]
 800c972:	f001 fb7b 	bl	800e06c <_Bfree>
 800c976:	9907      	ldr	r1, [sp, #28]
 800c978:	9805      	ldr	r0, [sp, #20]
 800c97a:	f001 fb77 	bl	800e06c <_Bfree>
 800c97e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800c980:	9805      	ldr	r0, [sp, #20]
 800c982:	f001 fb73 	bl	800e06c <_Bfree>
 800c986:	9906      	ldr	r1, [sp, #24]
 800c988:	9805      	ldr	r0, [sp, #20]
 800c98a:	f001 fb6f 	bl	800e06c <_Bfree>
 800c98e:	e5e2      	b.n	800c556 <_strtod_l+0x76>
 800c990:	2325      	movs	r3, #37	@ 0x25
 800c992:	9a06      	ldr	r2, [sp, #24]
 800c994:	1a9b      	subs	r3, r3, r2
 800c996:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c998:	4293      	cmp	r3, r2
 800c99a:	dbb8      	blt.n	800c90e <_strtod_l+0x42e>
 800c99c:	240f      	movs	r4, #15
 800c99e:	9b06      	ldr	r3, [sp, #24]
 800c9a0:	4d46      	ldr	r5, [pc, #280]	@ (800cabc <_strtod_l+0x5dc>)
 800c9a2:	1ae4      	subs	r4, r4, r3
 800c9a4:	00e1      	lsls	r1, r4, #3
 800c9a6:	1869      	adds	r1, r5, r1
 800c9a8:	0032      	movs	r2, r6
 800c9aa:	6808      	ldr	r0, [r1, #0]
 800c9ac:	6849      	ldr	r1, [r1, #4]
 800c9ae:	003b      	movs	r3, r7
 800c9b0:	f7f5 fe04 	bl	80025bc <__aeabi_dmul>
 800c9b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c9b6:	1b1c      	subs	r4, r3, r4
 800c9b8:	00e4      	lsls	r4, r4, #3
 800c9ba:	192d      	adds	r5, r5, r4
 800c9bc:	682a      	ldr	r2, [r5, #0]
 800c9be:	686b      	ldr	r3, [r5, #4]
 800c9c0:	e789      	b.n	800c8d6 <_strtod_l+0x3f6>
 800c9c2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c9c4:	3316      	adds	r3, #22
 800c9c6:	dba2      	blt.n	800c90e <_strtod_l+0x42e>
 800c9c8:	9907      	ldr	r1, [sp, #28]
 800c9ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c9cc:	4b3b      	ldr	r3, [pc, #236]	@ (800cabc <_strtod_l+0x5dc>)
 800c9ce:	1a52      	subs	r2, r2, r1
 800c9d0:	00d2      	lsls	r2, r2, #3
 800c9d2:	189b      	adds	r3, r3, r2
 800c9d4:	0030      	movs	r0, r6
 800c9d6:	681a      	ldr	r2, [r3, #0]
 800c9d8:	685b      	ldr	r3, [r3, #4]
 800c9da:	0039      	movs	r1, r7
 800c9dc:	f7f5 f9aa 	bl	8001d34 <__aeabi_ddiv>
 800c9e0:	e750      	b.n	800c884 <_strtod_l+0x3a4>
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	0030      	movs	r0, r6
 800c9e6:	0039      	movs	r1, r7
 800c9e8:	4d35      	ldr	r5, [pc, #212]	@ (800cac0 <_strtod_l+0x5e0>)
 800c9ea:	1124      	asrs	r4, r4, #4
 800c9ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800c9ee:	2c01      	cmp	r4, #1
 800c9f0:	dc1e      	bgt.n	800ca30 <_strtod_l+0x550>
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d001      	beq.n	800c9fa <_strtod_l+0x51a>
 800c9f6:	0006      	movs	r6, r0
 800c9f8:	000f      	movs	r7, r1
 800c9fa:	4b32      	ldr	r3, [pc, #200]	@ (800cac4 <_strtod_l+0x5e4>)
 800c9fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c9fe:	18ff      	adds	r7, r7, r3
 800ca00:	4b2f      	ldr	r3, [pc, #188]	@ (800cac0 <_strtod_l+0x5e0>)
 800ca02:	00d5      	lsls	r5, r2, #3
 800ca04:	195d      	adds	r5, r3, r5
 800ca06:	0032      	movs	r2, r6
 800ca08:	6828      	ldr	r0, [r5, #0]
 800ca0a:	6869      	ldr	r1, [r5, #4]
 800ca0c:	003b      	movs	r3, r7
 800ca0e:	f7f5 fdd5 	bl	80025bc <__aeabi_dmul>
 800ca12:	4b26      	ldr	r3, [pc, #152]	@ (800caac <_strtod_l+0x5cc>)
 800ca14:	4a2c      	ldr	r2, [pc, #176]	@ (800cac8 <_strtod_l+0x5e8>)
 800ca16:	0006      	movs	r6, r0
 800ca18:	400b      	ands	r3, r1
 800ca1a:	4293      	cmp	r3, r2
 800ca1c:	d895      	bhi.n	800c94a <_strtod_l+0x46a>
 800ca1e:	4a2b      	ldr	r2, [pc, #172]	@ (800cacc <_strtod_l+0x5ec>)
 800ca20:	4293      	cmp	r3, r2
 800ca22:	d913      	bls.n	800ca4c <_strtod_l+0x56c>
 800ca24:	2601      	movs	r6, #1
 800ca26:	4f2a      	ldr	r7, [pc, #168]	@ (800cad0 <_strtod_l+0x5f0>)
 800ca28:	4276      	negs	r6, r6
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ca2e:	e086      	b.n	800cb3e <_strtod_l+0x65e>
 800ca30:	2201      	movs	r2, #1
 800ca32:	4214      	tst	r4, r2
 800ca34:	d004      	beq.n	800ca40 <_strtod_l+0x560>
 800ca36:	682a      	ldr	r2, [r5, #0]
 800ca38:	686b      	ldr	r3, [r5, #4]
 800ca3a:	f7f5 fdbf 	bl	80025bc <__aeabi_dmul>
 800ca3e:	2301      	movs	r3, #1
 800ca40:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ca42:	1064      	asrs	r4, r4, #1
 800ca44:	3201      	adds	r2, #1
 800ca46:	9209      	str	r2, [sp, #36]	@ 0x24
 800ca48:	3508      	adds	r5, #8
 800ca4a:	e7d0      	b.n	800c9ee <_strtod_l+0x50e>
 800ca4c:	23d4      	movs	r3, #212	@ 0xd4
 800ca4e:	049b      	lsls	r3, r3, #18
 800ca50:	18cf      	adds	r7, r1, r3
 800ca52:	e7ea      	b.n	800ca2a <_strtod_l+0x54a>
 800ca54:	2c00      	cmp	r4, #0
 800ca56:	d0e8      	beq.n	800ca2a <_strtod_l+0x54a>
 800ca58:	4264      	negs	r4, r4
 800ca5a:	230f      	movs	r3, #15
 800ca5c:	0022      	movs	r2, r4
 800ca5e:	401a      	ands	r2, r3
 800ca60:	421c      	tst	r4, r3
 800ca62:	d00a      	beq.n	800ca7a <_strtod_l+0x59a>
 800ca64:	4b15      	ldr	r3, [pc, #84]	@ (800cabc <_strtod_l+0x5dc>)
 800ca66:	00d2      	lsls	r2, r2, #3
 800ca68:	189b      	adds	r3, r3, r2
 800ca6a:	0030      	movs	r0, r6
 800ca6c:	681a      	ldr	r2, [r3, #0]
 800ca6e:	685b      	ldr	r3, [r3, #4]
 800ca70:	0039      	movs	r1, r7
 800ca72:	f7f5 f95f 	bl	8001d34 <__aeabi_ddiv>
 800ca76:	0006      	movs	r6, r0
 800ca78:	000f      	movs	r7, r1
 800ca7a:	1124      	asrs	r4, r4, #4
 800ca7c:	d0d5      	beq.n	800ca2a <_strtod_l+0x54a>
 800ca7e:	2c1f      	cmp	r4, #31
 800ca80:	dd28      	ble.n	800cad4 <_strtod_l+0x5f4>
 800ca82:	2300      	movs	r3, #0
 800ca84:	9306      	str	r3, [sp, #24]
 800ca86:	9307      	str	r3, [sp, #28]
 800ca88:	930d      	str	r3, [sp, #52]	@ 0x34
 800ca8a:	9308      	str	r3, [sp, #32]
 800ca8c:	2322      	movs	r3, #34	@ 0x22
 800ca8e:	9a05      	ldr	r2, [sp, #20]
 800ca90:	2600      	movs	r6, #0
 800ca92:	6013      	str	r3, [r2, #0]
 800ca94:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ca96:	2700      	movs	r7, #0
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d000      	beq.n	800ca9e <_strtod_l+0x5be>
 800ca9c:	e763      	b.n	800c966 <_strtod_l+0x486>
 800ca9e:	e55a      	b.n	800c556 <_strtod_l+0x76>
 800caa0:	00004e1f 	.word	0x00004e1f
 800caa4:	0801078b 	.word	0x0801078b
 800caa8:	08010790 	.word	0x08010790
 800caac:	7ff00000 	.word	0x7ff00000
 800cab0:	08010782 	.word	0x08010782
 800cab4:	08010785 	.word	0x08010785
 800cab8:	08010b36 	.word	0x08010b36
 800cabc:	08010a00 	.word	0x08010a00
 800cac0:	080109d8 	.word	0x080109d8
 800cac4:	fcb00000 	.word	0xfcb00000
 800cac8:	7ca00000 	.word	0x7ca00000
 800cacc:	7c900000 	.word	0x7c900000
 800cad0:	7fefffff 	.word	0x7fefffff
 800cad4:	2310      	movs	r3, #16
 800cad6:	0022      	movs	r2, r4
 800cad8:	401a      	ands	r2, r3
 800cada:	9209      	str	r2, [sp, #36]	@ 0x24
 800cadc:	421c      	tst	r4, r3
 800cade:	d001      	beq.n	800cae4 <_strtod_l+0x604>
 800cae0:	335a      	adds	r3, #90	@ 0x5a
 800cae2:	9309      	str	r3, [sp, #36]	@ 0x24
 800cae4:	0030      	movs	r0, r6
 800cae6:	0039      	movs	r1, r7
 800cae8:	2300      	movs	r3, #0
 800caea:	4dbf      	ldr	r5, [pc, #764]	@ (800cde8 <_strtod_l+0x908>)
 800caec:	2201      	movs	r2, #1
 800caee:	4214      	tst	r4, r2
 800caf0:	d004      	beq.n	800cafc <_strtod_l+0x61c>
 800caf2:	682a      	ldr	r2, [r5, #0]
 800caf4:	686b      	ldr	r3, [r5, #4]
 800caf6:	f7f5 fd61 	bl	80025bc <__aeabi_dmul>
 800cafa:	2301      	movs	r3, #1
 800cafc:	1064      	asrs	r4, r4, #1
 800cafe:	3508      	adds	r5, #8
 800cb00:	2c00      	cmp	r4, #0
 800cb02:	d1f3      	bne.n	800caec <_strtod_l+0x60c>
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d001      	beq.n	800cb0c <_strtod_l+0x62c>
 800cb08:	0006      	movs	r6, r0
 800cb0a:	000f      	movs	r7, r1
 800cb0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d00d      	beq.n	800cb2e <_strtod_l+0x64e>
 800cb12:	236b      	movs	r3, #107	@ 0x6b
 800cb14:	007a      	lsls	r2, r7, #1
 800cb16:	0d52      	lsrs	r2, r2, #21
 800cb18:	0039      	movs	r1, r7
 800cb1a:	1a9b      	subs	r3, r3, r2
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	dd06      	ble.n	800cb2e <_strtod_l+0x64e>
 800cb20:	2b1f      	cmp	r3, #31
 800cb22:	dd5a      	ble.n	800cbda <_strtod_l+0x6fa>
 800cb24:	2600      	movs	r6, #0
 800cb26:	2b34      	cmp	r3, #52	@ 0x34
 800cb28:	dd50      	ble.n	800cbcc <_strtod_l+0x6ec>
 800cb2a:	27dc      	movs	r7, #220	@ 0xdc
 800cb2c:	04bf      	lsls	r7, r7, #18
 800cb2e:	2200      	movs	r2, #0
 800cb30:	2300      	movs	r3, #0
 800cb32:	0030      	movs	r0, r6
 800cb34:	0039      	movs	r1, r7
 800cb36:	f7f3 fc91 	bl	800045c <__aeabi_dcmpeq>
 800cb3a:	2800      	cmp	r0, #0
 800cb3c:	d1a1      	bne.n	800ca82 <_strtod_l+0x5a2>
 800cb3e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cb40:	9a08      	ldr	r2, [sp, #32]
 800cb42:	9300      	str	r3, [sp, #0]
 800cb44:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800cb46:	9b06      	ldr	r3, [sp, #24]
 800cb48:	9805      	ldr	r0, [sp, #20]
 800cb4a:	f001 faf7 	bl	800e13c <__s2b>
 800cb4e:	900d      	str	r0, [sp, #52]	@ 0x34
 800cb50:	2800      	cmp	r0, #0
 800cb52:	d100      	bne.n	800cb56 <_strtod_l+0x676>
 800cb54:	e6f9      	b.n	800c94a <_strtod_l+0x46a>
 800cb56:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cb58:	9907      	ldr	r1, [sp, #28]
 800cb5a:	17da      	asrs	r2, r3, #31
 800cb5c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cb5e:	1a5b      	subs	r3, r3, r1
 800cb60:	401a      	ands	r2, r3
 800cb62:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cb64:	9217      	str	r2, [sp, #92]	@ 0x5c
 800cb66:	43db      	mvns	r3, r3
 800cb68:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800cb6a:	17db      	asrs	r3, r3, #31
 800cb6c:	401a      	ands	r2, r3
 800cb6e:	2300      	movs	r3, #0
 800cb70:	921a      	str	r2, [sp, #104]	@ 0x68
 800cb72:	9306      	str	r3, [sp, #24]
 800cb74:	9307      	str	r3, [sp, #28]
 800cb76:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cb78:	9805      	ldr	r0, [sp, #20]
 800cb7a:	6859      	ldr	r1, [r3, #4]
 800cb7c:	f001 fa32 	bl	800dfe4 <_Balloc>
 800cb80:	9008      	str	r0, [sp, #32]
 800cb82:	2800      	cmp	r0, #0
 800cb84:	d100      	bne.n	800cb88 <_strtod_l+0x6a8>
 800cb86:	e6e5      	b.n	800c954 <_strtod_l+0x474>
 800cb88:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cb8a:	300c      	adds	r0, #12
 800cb8c:	0019      	movs	r1, r3
 800cb8e:	691a      	ldr	r2, [r3, #16]
 800cb90:	310c      	adds	r1, #12
 800cb92:	3202      	adds	r2, #2
 800cb94:	0092      	lsls	r2, r2, #2
 800cb96:	f000 fdae 	bl	800d6f6 <memcpy>
 800cb9a:	ab20      	add	r3, sp, #128	@ 0x80
 800cb9c:	9301      	str	r3, [sp, #4]
 800cb9e:	ab1f      	add	r3, sp, #124	@ 0x7c
 800cba0:	9300      	str	r3, [sp, #0]
 800cba2:	0032      	movs	r2, r6
 800cba4:	003b      	movs	r3, r7
 800cba6:	9805      	ldr	r0, [sp, #20]
 800cba8:	9610      	str	r6, [sp, #64]	@ 0x40
 800cbaa:	9711      	str	r7, [sp, #68]	@ 0x44
 800cbac:	f001 fe16 	bl	800e7dc <__d2b>
 800cbb0:	901e      	str	r0, [sp, #120]	@ 0x78
 800cbb2:	2800      	cmp	r0, #0
 800cbb4:	d100      	bne.n	800cbb8 <_strtod_l+0x6d8>
 800cbb6:	e6cd      	b.n	800c954 <_strtod_l+0x474>
 800cbb8:	2101      	movs	r1, #1
 800cbba:	9805      	ldr	r0, [sp, #20]
 800cbbc:	f001 fb5a 	bl	800e274 <__i2b>
 800cbc0:	9007      	str	r0, [sp, #28]
 800cbc2:	2800      	cmp	r0, #0
 800cbc4:	d10e      	bne.n	800cbe4 <_strtod_l+0x704>
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	9307      	str	r3, [sp, #28]
 800cbca:	e6c3      	b.n	800c954 <_strtod_l+0x474>
 800cbcc:	234b      	movs	r3, #75	@ 0x4b
 800cbce:	1a9a      	subs	r2, r3, r2
 800cbd0:	3b4c      	subs	r3, #76	@ 0x4c
 800cbd2:	4093      	lsls	r3, r2
 800cbd4:	4019      	ands	r1, r3
 800cbd6:	000f      	movs	r7, r1
 800cbd8:	e7a9      	b.n	800cb2e <_strtod_l+0x64e>
 800cbda:	2201      	movs	r2, #1
 800cbdc:	4252      	negs	r2, r2
 800cbde:	409a      	lsls	r2, r3
 800cbe0:	4016      	ands	r6, r2
 800cbe2:	e7a4      	b.n	800cb2e <_strtod_l+0x64e>
 800cbe4:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800cbe6:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800cbe8:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 800cbea:	1ad4      	subs	r4, r2, r3
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	db01      	blt.n	800cbf4 <_strtod_l+0x714>
 800cbf0:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 800cbf2:	195d      	adds	r5, r3, r5
 800cbf4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cbf6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800cbf8:	1a5b      	subs	r3, r3, r1
 800cbfa:	2136      	movs	r1, #54	@ 0x36
 800cbfc:	189b      	adds	r3, r3, r2
 800cbfe:	1a8a      	subs	r2, r1, r2
 800cc00:	497a      	ldr	r1, [pc, #488]	@ (800cdec <_strtod_l+0x90c>)
 800cc02:	2001      	movs	r0, #1
 800cc04:	468c      	mov	ip, r1
 800cc06:	2100      	movs	r1, #0
 800cc08:	3b01      	subs	r3, #1
 800cc0a:	9116      	str	r1, [sp, #88]	@ 0x58
 800cc0c:	9014      	str	r0, [sp, #80]	@ 0x50
 800cc0e:	4563      	cmp	r3, ip
 800cc10:	da06      	bge.n	800cc20 <_strtod_l+0x740>
 800cc12:	4661      	mov	r1, ip
 800cc14:	1ac9      	subs	r1, r1, r3
 800cc16:	1a52      	subs	r2, r2, r1
 800cc18:	291f      	cmp	r1, #31
 800cc1a:	dc3f      	bgt.n	800cc9c <_strtod_l+0x7bc>
 800cc1c:	4088      	lsls	r0, r1
 800cc1e:	9014      	str	r0, [sp, #80]	@ 0x50
 800cc20:	18ab      	adds	r3, r5, r2
 800cc22:	930e      	str	r3, [sp, #56]	@ 0x38
 800cc24:	18a4      	adds	r4, r4, r2
 800cc26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc28:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cc2a:	191c      	adds	r4, r3, r4
 800cc2c:	002b      	movs	r3, r5
 800cc2e:	4295      	cmp	r5, r2
 800cc30:	dd00      	ble.n	800cc34 <_strtod_l+0x754>
 800cc32:	0013      	movs	r3, r2
 800cc34:	42a3      	cmp	r3, r4
 800cc36:	dd00      	ble.n	800cc3a <_strtod_l+0x75a>
 800cc38:	0023      	movs	r3, r4
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	dd04      	ble.n	800cc48 <_strtod_l+0x768>
 800cc3e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cc40:	1ae4      	subs	r4, r4, r3
 800cc42:	1ad2      	subs	r2, r2, r3
 800cc44:	920e      	str	r2, [sp, #56]	@ 0x38
 800cc46:	1aed      	subs	r5, r5, r3
 800cc48:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	dd16      	ble.n	800cc7c <_strtod_l+0x79c>
 800cc4e:	001a      	movs	r2, r3
 800cc50:	9907      	ldr	r1, [sp, #28]
 800cc52:	9805      	ldr	r0, [sp, #20]
 800cc54:	f001 fbd8 	bl	800e408 <__pow5mult>
 800cc58:	9007      	str	r0, [sp, #28]
 800cc5a:	2800      	cmp	r0, #0
 800cc5c:	d0b3      	beq.n	800cbc6 <_strtod_l+0x6e6>
 800cc5e:	0001      	movs	r1, r0
 800cc60:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 800cc62:	9805      	ldr	r0, [sp, #20]
 800cc64:	f001 fb1e 	bl	800e2a4 <__multiply>
 800cc68:	9013      	str	r0, [sp, #76]	@ 0x4c
 800cc6a:	2800      	cmp	r0, #0
 800cc6c:	d100      	bne.n	800cc70 <_strtod_l+0x790>
 800cc6e:	e671      	b.n	800c954 <_strtod_l+0x474>
 800cc70:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800cc72:	9805      	ldr	r0, [sp, #20]
 800cc74:	f001 f9fa 	bl	800e06c <_Bfree>
 800cc78:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800cc7a:	931e      	str	r3, [sp, #120]	@ 0x78
 800cc7c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	dc12      	bgt.n	800cca8 <_strtod_l+0x7c8>
 800cc82:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	dd18      	ble.n	800ccba <_strtod_l+0x7da>
 800cc88:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800cc8a:	9908      	ldr	r1, [sp, #32]
 800cc8c:	9805      	ldr	r0, [sp, #20]
 800cc8e:	f001 fbbb 	bl	800e408 <__pow5mult>
 800cc92:	9008      	str	r0, [sp, #32]
 800cc94:	2800      	cmp	r0, #0
 800cc96:	d110      	bne.n	800ccba <_strtod_l+0x7da>
 800cc98:	2300      	movs	r3, #0
 800cc9a:	e65a      	b.n	800c952 <_strtod_l+0x472>
 800cc9c:	4954      	ldr	r1, [pc, #336]	@ (800cdf0 <_strtod_l+0x910>)
 800cc9e:	1acb      	subs	r3, r1, r3
 800cca0:	0001      	movs	r1, r0
 800cca2:	4099      	lsls	r1, r3
 800cca4:	9116      	str	r1, [sp, #88]	@ 0x58
 800cca6:	e7ba      	b.n	800cc1e <_strtod_l+0x73e>
 800cca8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ccaa:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800ccac:	9805      	ldr	r0, [sp, #20]
 800ccae:	f001 fc07 	bl	800e4c0 <__lshift>
 800ccb2:	901e      	str	r0, [sp, #120]	@ 0x78
 800ccb4:	2800      	cmp	r0, #0
 800ccb6:	d1e4      	bne.n	800cc82 <_strtod_l+0x7a2>
 800ccb8:	e64c      	b.n	800c954 <_strtod_l+0x474>
 800ccba:	2c00      	cmp	r4, #0
 800ccbc:	dd07      	ble.n	800ccce <_strtod_l+0x7ee>
 800ccbe:	0022      	movs	r2, r4
 800ccc0:	9908      	ldr	r1, [sp, #32]
 800ccc2:	9805      	ldr	r0, [sp, #20]
 800ccc4:	f001 fbfc 	bl	800e4c0 <__lshift>
 800ccc8:	9008      	str	r0, [sp, #32]
 800ccca:	2800      	cmp	r0, #0
 800cccc:	d0e4      	beq.n	800cc98 <_strtod_l+0x7b8>
 800ccce:	2d00      	cmp	r5, #0
 800ccd0:	dd08      	ble.n	800cce4 <_strtod_l+0x804>
 800ccd2:	002a      	movs	r2, r5
 800ccd4:	9907      	ldr	r1, [sp, #28]
 800ccd6:	9805      	ldr	r0, [sp, #20]
 800ccd8:	f001 fbf2 	bl	800e4c0 <__lshift>
 800ccdc:	9007      	str	r0, [sp, #28]
 800ccde:	2800      	cmp	r0, #0
 800cce0:	d100      	bne.n	800cce4 <_strtod_l+0x804>
 800cce2:	e637      	b.n	800c954 <_strtod_l+0x474>
 800cce4:	9a08      	ldr	r2, [sp, #32]
 800cce6:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800cce8:	9805      	ldr	r0, [sp, #20]
 800ccea:	f001 fc71 	bl	800e5d0 <__mdiff>
 800ccee:	9006      	str	r0, [sp, #24]
 800ccf0:	2800      	cmp	r0, #0
 800ccf2:	d100      	bne.n	800ccf6 <_strtod_l+0x816>
 800ccf4:	e62e      	b.n	800c954 <_strtod_l+0x474>
 800ccf6:	68c3      	ldr	r3, [r0, #12]
 800ccf8:	9907      	ldr	r1, [sp, #28]
 800ccfa:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	60c3      	str	r3, [r0, #12]
 800cd00:	f001 fc4a 	bl	800e598 <__mcmp>
 800cd04:	2800      	cmp	r0, #0
 800cd06:	da3b      	bge.n	800cd80 <_strtod_l+0x8a0>
 800cd08:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800cd0a:	4333      	orrs	r3, r6
 800cd0c:	d167      	bne.n	800cdde <_strtod_l+0x8fe>
 800cd0e:	033b      	lsls	r3, r7, #12
 800cd10:	d165      	bne.n	800cdde <_strtod_l+0x8fe>
 800cd12:	22d6      	movs	r2, #214	@ 0xd6
 800cd14:	4b37      	ldr	r3, [pc, #220]	@ (800cdf4 <_strtod_l+0x914>)
 800cd16:	04d2      	lsls	r2, r2, #19
 800cd18:	403b      	ands	r3, r7
 800cd1a:	4293      	cmp	r3, r2
 800cd1c:	d95f      	bls.n	800cdde <_strtod_l+0x8fe>
 800cd1e:	9b06      	ldr	r3, [sp, #24]
 800cd20:	695b      	ldr	r3, [r3, #20]
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d103      	bne.n	800cd2e <_strtod_l+0x84e>
 800cd26:	9b06      	ldr	r3, [sp, #24]
 800cd28:	691b      	ldr	r3, [r3, #16]
 800cd2a:	2b01      	cmp	r3, #1
 800cd2c:	dd57      	ble.n	800cdde <_strtod_l+0x8fe>
 800cd2e:	9906      	ldr	r1, [sp, #24]
 800cd30:	2201      	movs	r2, #1
 800cd32:	9805      	ldr	r0, [sp, #20]
 800cd34:	f001 fbc4 	bl	800e4c0 <__lshift>
 800cd38:	9907      	ldr	r1, [sp, #28]
 800cd3a:	9006      	str	r0, [sp, #24]
 800cd3c:	f001 fc2c 	bl	800e598 <__mcmp>
 800cd40:	2800      	cmp	r0, #0
 800cd42:	dd4c      	ble.n	800cdde <_strtod_l+0x8fe>
 800cd44:	4b2b      	ldr	r3, [pc, #172]	@ (800cdf4 <_strtod_l+0x914>)
 800cd46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cd48:	403b      	ands	r3, r7
 800cd4a:	2a00      	cmp	r2, #0
 800cd4c:	d074      	beq.n	800ce38 <_strtod_l+0x958>
 800cd4e:	22d6      	movs	r2, #214	@ 0xd6
 800cd50:	04d2      	lsls	r2, r2, #19
 800cd52:	4293      	cmp	r3, r2
 800cd54:	d870      	bhi.n	800ce38 <_strtod_l+0x958>
 800cd56:	22dc      	movs	r2, #220	@ 0xdc
 800cd58:	0492      	lsls	r2, r2, #18
 800cd5a:	4293      	cmp	r3, r2
 800cd5c:	d800      	bhi.n	800cd60 <_strtod_l+0x880>
 800cd5e:	e695      	b.n	800ca8c <_strtod_l+0x5ac>
 800cd60:	0030      	movs	r0, r6
 800cd62:	0039      	movs	r1, r7
 800cd64:	4b24      	ldr	r3, [pc, #144]	@ (800cdf8 <_strtod_l+0x918>)
 800cd66:	2200      	movs	r2, #0
 800cd68:	f7f5 fc28 	bl	80025bc <__aeabi_dmul>
 800cd6c:	4b21      	ldr	r3, [pc, #132]	@ (800cdf4 <_strtod_l+0x914>)
 800cd6e:	0006      	movs	r6, r0
 800cd70:	000f      	movs	r7, r1
 800cd72:	420b      	tst	r3, r1
 800cd74:	d000      	beq.n	800cd78 <_strtod_l+0x898>
 800cd76:	e5f6      	b.n	800c966 <_strtod_l+0x486>
 800cd78:	2322      	movs	r3, #34	@ 0x22
 800cd7a:	9a05      	ldr	r2, [sp, #20]
 800cd7c:	6013      	str	r3, [r2, #0]
 800cd7e:	e5f2      	b.n	800c966 <_strtod_l+0x486>
 800cd80:	970e      	str	r7, [sp, #56]	@ 0x38
 800cd82:	2800      	cmp	r0, #0
 800cd84:	d175      	bne.n	800ce72 <_strtod_l+0x992>
 800cd86:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800cd88:	033b      	lsls	r3, r7, #12
 800cd8a:	0b1b      	lsrs	r3, r3, #12
 800cd8c:	2a00      	cmp	r2, #0
 800cd8e:	d039      	beq.n	800ce04 <_strtod_l+0x924>
 800cd90:	4a1a      	ldr	r2, [pc, #104]	@ (800cdfc <_strtod_l+0x91c>)
 800cd92:	4293      	cmp	r3, r2
 800cd94:	d138      	bne.n	800ce08 <_strtod_l+0x928>
 800cd96:	2101      	movs	r1, #1
 800cd98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd9a:	4249      	negs	r1, r1
 800cd9c:	0032      	movs	r2, r6
 800cd9e:	0008      	movs	r0, r1
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d00b      	beq.n	800cdbc <_strtod_l+0x8dc>
 800cda4:	24d4      	movs	r4, #212	@ 0xd4
 800cda6:	4b13      	ldr	r3, [pc, #76]	@ (800cdf4 <_strtod_l+0x914>)
 800cda8:	0008      	movs	r0, r1
 800cdaa:	403b      	ands	r3, r7
 800cdac:	04e4      	lsls	r4, r4, #19
 800cdae:	42a3      	cmp	r3, r4
 800cdb0:	d804      	bhi.n	800cdbc <_strtod_l+0x8dc>
 800cdb2:	306c      	adds	r0, #108	@ 0x6c
 800cdb4:	0d1b      	lsrs	r3, r3, #20
 800cdb6:	1ac3      	subs	r3, r0, r3
 800cdb8:	4099      	lsls	r1, r3
 800cdba:	0008      	movs	r0, r1
 800cdbc:	4282      	cmp	r2, r0
 800cdbe:	d123      	bne.n	800ce08 <_strtod_l+0x928>
 800cdc0:	4b0f      	ldr	r3, [pc, #60]	@ (800ce00 <_strtod_l+0x920>)
 800cdc2:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800cdc4:	4299      	cmp	r1, r3
 800cdc6:	d102      	bne.n	800cdce <_strtod_l+0x8ee>
 800cdc8:	3201      	adds	r2, #1
 800cdca:	d100      	bne.n	800cdce <_strtod_l+0x8ee>
 800cdcc:	e5c2      	b.n	800c954 <_strtod_l+0x474>
 800cdce:	4b09      	ldr	r3, [pc, #36]	@ (800cdf4 <_strtod_l+0x914>)
 800cdd0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cdd2:	2600      	movs	r6, #0
 800cdd4:	401a      	ands	r2, r3
 800cdd6:	0013      	movs	r3, r2
 800cdd8:	2280      	movs	r2, #128	@ 0x80
 800cdda:	0352      	lsls	r2, r2, #13
 800cddc:	189f      	adds	r7, r3, r2
 800cdde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d1bd      	bne.n	800cd60 <_strtod_l+0x880>
 800cde4:	e5bf      	b.n	800c966 <_strtod_l+0x486>
 800cde6:	46c0      	nop			@ (mov r8, r8)
 800cde8:	080107b8 	.word	0x080107b8
 800cdec:	fffffc02 	.word	0xfffffc02
 800cdf0:	fffffbe2 	.word	0xfffffbe2
 800cdf4:	7ff00000 	.word	0x7ff00000
 800cdf8:	39500000 	.word	0x39500000
 800cdfc:	000fffff 	.word	0x000fffff
 800ce00:	7fefffff 	.word	0x7fefffff
 800ce04:	4333      	orrs	r3, r6
 800ce06:	d09d      	beq.n	800cd44 <_strtod_l+0x864>
 800ce08:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d01c      	beq.n	800ce48 <_strtod_l+0x968>
 800ce0e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ce10:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800ce12:	4213      	tst	r3, r2
 800ce14:	d0e3      	beq.n	800cdde <_strtod_l+0x8fe>
 800ce16:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ce18:	0030      	movs	r0, r6
 800ce1a:	0039      	movs	r1, r7
 800ce1c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d016      	beq.n	800ce50 <_strtod_l+0x970>
 800ce22:	f7ff fb45 	bl	800c4b0 <sulp>
 800ce26:	0002      	movs	r2, r0
 800ce28:	000b      	movs	r3, r1
 800ce2a:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800ce2c:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800ce2e:	f7f4 fc1d 	bl	800166c <__aeabi_dadd>
 800ce32:	0006      	movs	r6, r0
 800ce34:	000f      	movs	r7, r1
 800ce36:	e7d2      	b.n	800cdde <_strtod_l+0x8fe>
 800ce38:	2601      	movs	r6, #1
 800ce3a:	4a92      	ldr	r2, [pc, #584]	@ (800d084 <_strtod_l+0xba4>)
 800ce3c:	4276      	negs	r6, r6
 800ce3e:	189b      	adds	r3, r3, r2
 800ce40:	4a91      	ldr	r2, [pc, #580]	@ (800d088 <_strtod_l+0xba8>)
 800ce42:	431a      	orrs	r2, r3
 800ce44:	0017      	movs	r7, r2
 800ce46:	e7ca      	b.n	800cdde <_strtod_l+0x8fe>
 800ce48:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ce4a:	4233      	tst	r3, r6
 800ce4c:	d0c7      	beq.n	800cdde <_strtod_l+0x8fe>
 800ce4e:	e7e2      	b.n	800ce16 <_strtod_l+0x936>
 800ce50:	f7ff fb2e 	bl	800c4b0 <sulp>
 800ce54:	0002      	movs	r2, r0
 800ce56:	000b      	movs	r3, r1
 800ce58:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800ce5a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800ce5c:	f7f5 fe76 	bl	8002b4c <__aeabi_dsub>
 800ce60:	2200      	movs	r2, #0
 800ce62:	2300      	movs	r3, #0
 800ce64:	0006      	movs	r6, r0
 800ce66:	000f      	movs	r7, r1
 800ce68:	f7f3 faf8 	bl	800045c <__aeabi_dcmpeq>
 800ce6c:	2800      	cmp	r0, #0
 800ce6e:	d0b6      	beq.n	800cdde <_strtod_l+0x8fe>
 800ce70:	e60c      	b.n	800ca8c <_strtod_l+0x5ac>
 800ce72:	9907      	ldr	r1, [sp, #28]
 800ce74:	9806      	ldr	r0, [sp, #24]
 800ce76:	f001 fd11 	bl	800e89c <__ratio>
 800ce7a:	2380      	movs	r3, #128	@ 0x80
 800ce7c:	2200      	movs	r2, #0
 800ce7e:	05db      	lsls	r3, r3, #23
 800ce80:	0004      	movs	r4, r0
 800ce82:	000d      	movs	r5, r1
 800ce84:	f7f3 fafa 	bl	800047c <__aeabi_dcmple>
 800ce88:	2800      	cmp	r0, #0
 800ce8a:	d06c      	beq.n	800cf66 <_strtod_l+0xa86>
 800ce8c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d177      	bne.n	800cf82 <_strtod_l+0xaa2>
 800ce92:	2e00      	cmp	r6, #0
 800ce94:	d157      	bne.n	800cf46 <_strtod_l+0xa66>
 800ce96:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ce98:	031b      	lsls	r3, r3, #12
 800ce9a:	d15a      	bne.n	800cf52 <_strtod_l+0xa72>
 800ce9c:	2200      	movs	r2, #0
 800ce9e:	0020      	movs	r0, r4
 800cea0:	0029      	movs	r1, r5
 800cea2:	4b7a      	ldr	r3, [pc, #488]	@ (800d08c <_strtod_l+0xbac>)
 800cea4:	f7f3 fae0 	bl	8000468 <__aeabi_dcmplt>
 800cea8:	2800      	cmp	r0, #0
 800ceaa:	d159      	bne.n	800cf60 <_strtod_l+0xa80>
 800ceac:	0020      	movs	r0, r4
 800ceae:	0029      	movs	r1, r5
 800ceb0:	2200      	movs	r2, #0
 800ceb2:	4b77      	ldr	r3, [pc, #476]	@ (800d090 <_strtod_l+0xbb0>)
 800ceb4:	f7f5 fb82 	bl	80025bc <__aeabi_dmul>
 800ceb8:	0004      	movs	r4, r0
 800ceba:	000d      	movs	r5, r1
 800cebc:	2380      	movs	r3, #128	@ 0x80
 800cebe:	061b      	lsls	r3, r3, #24
 800cec0:	18eb      	adds	r3, r5, r3
 800cec2:	940a      	str	r4, [sp, #40]	@ 0x28
 800cec4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cec6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cec8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ceca:	9214      	str	r2, [sp, #80]	@ 0x50
 800cecc:	9315      	str	r3, [sp, #84]	@ 0x54
 800cece:	4a71      	ldr	r2, [pc, #452]	@ (800d094 <_strtod_l+0xbb4>)
 800ced0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ced2:	4013      	ands	r3, r2
 800ced4:	9316      	str	r3, [sp, #88]	@ 0x58
 800ced6:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800ced8:	4b6f      	ldr	r3, [pc, #444]	@ (800d098 <_strtod_l+0xbb8>)
 800ceda:	429a      	cmp	r2, r3
 800cedc:	d000      	beq.n	800cee0 <_strtod_l+0xa00>
 800cede:	e087      	b.n	800cff0 <_strtod_l+0xb10>
 800cee0:	4a6e      	ldr	r2, [pc, #440]	@ (800d09c <_strtod_l+0xbbc>)
 800cee2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cee4:	4694      	mov	ip, r2
 800cee6:	4463      	add	r3, ip
 800cee8:	001f      	movs	r7, r3
 800ceea:	0030      	movs	r0, r6
 800ceec:	0019      	movs	r1, r3
 800ceee:	f001 fc09 	bl	800e704 <__ulp>
 800cef2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cef4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cef6:	f7f5 fb61 	bl	80025bc <__aeabi_dmul>
 800cefa:	0032      	movs	r2, r6
 800cefc:	003b      	movs	r3, r7
 800cefe:	f7f4 fbb5 	bl	800166c <__aeabi_dadd>
 800cf02:	4a64      	ldr	r2, [pc, #400]	@ (800d094 <_strtod_l+0xbb4>)
 800cf04:	4b66      	ldr	r3, [pc, #408]	@ (800d0a0 <_strtod_l+0xbc0>)
 800cf06:	0006      	movs	r6, r0
 800cf08:	400a      	ands	r2, r1
 800cf0a:	429a      	cmp	r2, r3
 800cf0c:	d940      	bls.n	800cf90 <_strtod_l+0xab0>
 800cf0e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800cf10:	4a64      	ldr	r2, [pc, #400]	@ (800d0a4 <_strtod_l+0xbc4>)
 800cf12:	4293      	cmp	r3, r2
 800cf14:	d103      	bne.n	800cf1e <_strtod_l+0xa3e>
 800cf16:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cf18:	3301      	adds	r3, #1
 800cf1a:	d100      	bne.n	800cf1e <_strtod_l+0xa3e>
 800cf1c:	e51a      	b.n	800c954 <_strtod_l+0x474>
 800cf1e:	2601      	movs	r6, #1
 800cf20:	4f60      	ldr	r7, [pc, #384]	@ (800d0a4 <_strtod_l+0xbc4>)
 800cf22:	4276      	negs	r6, r6
 800cf24:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800cf26:	9805      	ldr	r0, [sp, #20]
 800cf28:	f001 f8a0 	bl	800e06c <_Bfree>
 800cf2c:	9908      	ldr	r1, [sp, #32]
 800cf2e:	9805      	ldr	r0, [sp, #20]
 800cf30:	f001 f89c 	bl	800e06c <_Bfree>
 800cf34:	9907      	ldr	r1, [sp, #28]
 800cf36:	9805      	ldr	r0, [sp, #20]
 800cf38:	f001 f898 	bl	800e06c <_Bfree>
 800cf3c:	9906      	ldr	r1, [sp, #24]
 800cf3e:	9805      	ldr	r0, [sp, #20]
 800cf40:	f001 f894 	bl	800e06c <_Bfree>
 800cf44:	e617      	b.n	800cb76 <_strtod_l+0x696>
 800cf46:	2e01      	cmp	r6, #1
 800cf48:	d103      	bne.n	800cf52 <_strtod_l+0xa72>
 800cf4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d100      	bne.n	800cf52 <_strtod_l+0xa72>
 800cf50:	e59c      	b.n	800ca8c <_strtod_l+0x5ac>
 800cf52:	2300      	movs	r3, #0
 800cf54:	4c54      	ldr	r4, [pc, #336]	@ (800d0a8 <_strtod_l+0xbc8>)
 800cf56:	4d4d      	ldr	r5, [pc, #308]	@ (800d08c <_strtod_l+0xbac>)
 800cf58:	930a      	str	r3, [sp, #40]	@ 0x28
 800cf5a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800cf5c:	2400      	movs	r4, #0
 800cf5e:	e7b2      	b.n	800cec6 <_strtod_l+0x9e6>
 800cf60:	2400      	movs	r4, #0
 800cf62:	4d4b      	ldr	r5, [pc, #300]	@ (800d090 <_strtod_l+0xbb0>)
 800cf64:	e7aa      	b.n	800cebc <_strtod_l+0x9dc>
 800cf66:	0020      	movs	r0, r4
 800cf68:	0029      	movs	r1, r5
 800cf6a:	4b49      	ldr	r3, [pc, #292]	@ (800d090 <_strtod_l+0xbb0>)
 800cf6c:	2200      	movs	r2, #0
 800cf6e:	f7f5 fb25 	bl	80025bc <__aeabi_dmul>
 800cf72:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800cf74:	0004      	movs	r4, r0
 800cf76:	000d      	movs	r5, r1
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d09f      	beq.n	800cebc <_strtod_l+0x9dc>
 800cf7c:	940a      	str	r4, [sp, #40]	@ 0x28
 800cf7e:	950b      	str	r5, [sp, #44]	@ 0x2c
 800cf80:	e7a1      	b.n	800cec6 <_strtod_l+0x9e6>
 800cf82:	2300      	movs	r3, #0
 800cf84:	4c41      	ldr	r4, [pc, #260]	@ (800d08c <_strtod_l+0xbac>)
 800cf86:	0025      	movs	r5, r4
 800cf88:	930a      	str	r3, [sp, #40]	@ 0x28
 800cf8a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800cf8c:	001c      	movs	r4, r3
 800cf8e:	e79a      	b.n	800cec6 <_strtod_l+0x9e6>
 800cf90:	23d4      	movs	r3, #212	@ 0xd4
 800cf92:	049b      	lsls	r3, r3, #18
 800cf94:	18cf      	adds	r7, r1, r3
 800cf96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf98:	9710      	str	r7, [sp, #64]	@ 0x40
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d1c2      	bne.n	800cf24 <_strtod_l+0xa44>
 800cf9e:	4b3d      	ldr	r3, [pc, #244]	@ (800d094 <_strtod_l+0xbb4>)
 800cfa0:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800cfa2:	403b      	ands	r3, r7
 800cfa4:	429a      	cmp	r2, r3
 800cfa6:	d1bd      	bne.n	800cf24 <_strtod_l+0xa44>
 800cfa8:	0020      	movs	r0, r4
 800cfaa:	0029      	movs	r1, r5
 800cfac:	f7f3 fb42 	bl	8000634 <__aeabi_d2lz>
 800cfb0:	f7f3 fb7a 	bl	80006a8 <__aeabi_l2d>
 800cfb4:	0002      	movs	r2, r0
 800cfb6:	000b      	movs	r3, r1
 800cfb8:	0020      	movs	r0, r4
 800cfba:	0029      	movs	r1, r5
 800cfbc:	f7f5 fdc6 	bl	8002b4c <__aeabi_dsub>
 800cfc0:	033c      	lsls	r4, r7, #12
 800cfc2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800cfc4:	0b24      	lsrs	r4, r4, #12
 800cfc6:	4334      	orrs	r4, r6
 800cfc8:	900e      	str	r0, [sp, #56]	@ 0x38
 800cfca:	910f      	str	r1, [sp, #60]	@ 0x3c
 800cfcc:	4a37      	ldr	r2, [pc, #220]	@ (800d0ac <_strtod_l+0xbcc>)
 800cfce:	431c      	orrs	r4, r3
 800cfd0:	d052      	beq.n	800d078 <_strtod_l+0xb98>
 800cfd2:	4b37      	ldr	r3, [pc, #220]	@ (800d0b0 <_strtod_l+0xbd0>)
 800cfd4:	f7f3 fa48 	bl	8000468 <__aeabi_dcmplt>
 800cfd8:	2800      	cmp	r0, #0
 800cfda:	d000      	beq.n	800cfde <_strtod_l+0xafe>
 800cfdc:	e4c3      	b.n	800c966 <_strtod_l+0x486>
 800cfde:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800cfe0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800cfe2:	4a34      	ldr	r2, [pc, #208]	@ (800d0b4 <_strtod_l+0xbd4>)
 800cfe4:	4b2a      	ldr	r3, [pc, #168]	@ (800d090 <_strtod_l+0xbb0>)
 800cfe6:	f7f3 fa53 	bl	8000490 <__aeabi_dcmpgt>
 800cfea:	2800      	cmp	r0, #0
 800cfec:	d09a      	beq.n	800cf24 <_strtod_l+0xa44>
 800cfee:	e4ba      	b.n	800c966 <_strtod_l+0x486>
 800cff0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d02a      	beq.n	800d04c <_strtod_l+0xb6c>
 800cff6:	23d4      	movs	r3, #212	@ 0xd4
 800cff8:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800cffa:	04db      	lsls	r3, r3, #19
 800cffc:	429a      	cmp	r2, r3
 800cffe:	d825      	bhi.n	800d04c <_strtod_l+0xb6c>
 800d000:	0020      	movs	r0, r4
 800d002:	0029      	movs	r1, r5
 800d004:	4a2c      	ldr	r2, [pc, #176]	@ (800d0b8 <_strtod_l+0xbd8>)
 800d006:	4b2d      	ldr	r3, [pc, #180]	@ (800d0bc <_strtod_l+0xbdc>)
 800d008:	f7f3 fa38 	bl	800047c <__aeabi_dcmple>
 800d00c:	2800      	cmp	r0, #0
 800d00e:	d016      	beq.n	800d03e <_strtod_l+0xb5e>
 800d010:	0020      	movs	r0, r4
 800d012:	0029      	movs	r1, r5
 800d014:	f7f3 faf0 	bl	80005f8 <__aeabi_d2uiz>
 800d018:	2800      	cmp	r0, #0
 800d01a:	d100      	bne.n	800d01e <_strtod_l+0xb3e>
 800d01c:	3001      	adds	r0, #1
 800d01e:	f7f6 f9bd 	bl	800339c <__aeabi_ui2d>
 800d022:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d024:	0004      	movs	r4, r0
 800d026:	000d      	movs	r5, r1
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d122      	bne.n	800d072 <_strtod_l+0xb92>
 800d02c:	2380      	movs	r3, #128	@ 0x80
 800d02e:	061b      	lsls	r3, r3, #24
 800d030:	18cb      	adds	r3, r1, r3
 800d032:	9018      	str	r0, [sp, #96]	@ 0x60
 800d034:	9319      	str	r3, [sp, #100]	@ 0x64
 800d036:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800d038:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d03a:	9214      	str	r2, [sp, #80]	@ 0x50
 800d03c:	9315      	str	r3, [sp, #84]	@ 0x54
 800d03e:	22d6      	movs	r2, #214	@ 0xd6
 800d040:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800d042:	04d2      	lsls	r2, r2, #19
 800d044:	189b      	adds	r3, r3, r2
 800d046:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800d048:	1a9b      	subs	r3, r3, r2
 800d04a:	9315      	str	r3, [sp, #84]	@ 0x54
 800d04c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800d04e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800d050:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800d052:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800d054:	f001 fb56 	bl	800e704 <__ulp>
 800d058:	0002      	movs	r2, r0
 800d05a:	000b      	movs	r3, r1
 800d05c:	0030      	movs	r0, r6
 800d05e:	0039      	movs	r1, r7
 800d060:	f7f5 faac 	bl	80025bc <__aeabi_dmul>
 800d064:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800d066:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d068:	f7f4 fb00 	bl	800166c <__aeabi_dadd>
 800d06c:	0006      	movs	r6, r0
 800d06e:	000f      	movs	r7, r1
 800d070:	e791      	b.n	800cf96 <_strtod_l+0xab6>
 800d072:	9418      	str	r4, [sp, #96]	@ 0x60
 800d074:	9519      	str	r5, [sp, #100]	@ 0x64
 800d076:	e7de      	b.n	800d036 <_strtod_l+0xb56>
 800d078:	4b11      	ldr	r3, [pc, #68]	@ (800d0c0 <_strtod_l+0xbe0>)
 800d07a:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800d07c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d07e:	f7f3 f9f3 	bl	8000468 <__aeabi_dcmplt>
 800d082:	e7b2      	b.n	800cfea <_strtod_l+0xb0a>
 800d084:	fff00000 	.word	0xfff00000
 800d088:	000fffff 	.word	0x000fffff
 800d08c:	3ff00000 	.word	0x3ff00000
 800d090:	3fe00000 	.word	0x3fe00000
 800d094:	7ff00000 	.word	0x7ff00000
 800d098:	7fe00000 	.word	0x7fe00000
 800d09c:	fcb00000 	.word	0xfcb00000
 800d0a0:	7c9fffff 	.word	0x7c9fffff
 800d0a4:	7fefffff 	.word	0x7fefffff
 800d0a8:	bff00000 	.word	0xbff00000
 800d0ac:	94a03595 	.word	0x94a03595
 800d0b0:	3fdfffff 	.word	0x3fdfffff
 800d0b4:	35afe535 	.word	0x35afe535
 800d0b8:	ffc00000 	.word	0xffc00000
 800d0bc:	41dfffff 	.word	0x41dfffff
 800d0c0:	3fcfffff 	.word	0x3fcfffff

0800d0c4 <strtod>:
 800d0c4:	b510      	push	{r4, lr}
 800d0c6:	4c04      	ldr	r4, [pc, #16]	@ (800d0d8 <strtod+0x14>)
 800d0c8:	000a      	movs	r2, r1
 800d0ca:	0001      	movs	r1, r0
 800d0cc:	4b03      	ldr	r3, [pc, #12]	@ (800d0dc <strtod+0x18>)
 800d0ce:	6820      	ldr	r0, [r4, #0]
 800d0d0:	f7ff fa06 	bl	800c4e0 <_strtod_l>
 800d0d4:	bd10      	pop	{r4, pc}
 800d0d6:	46c0      	nop			@ (mov r8, r8)
 800d0d8:	20000b4c 	.word	0x20000b4c
 800d0dc:	200009e0 	.word	0x200009e0

0800d0e0 <_strtol_l.constprop.0>:
 800d0e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d0e2:	b085      	sub	sp, #20
 800d0e4:	0017      	movs	r7, r2
 800d0e6:	001e      	movs	r6, r3
 800d0e8:	9003      	str	r0, [sp, #12]
 800d0ea:	9101      	str	r1, [sp, #4]
 800d0ec:	2b24      	cmp	r3, #36	@ 0x24
 800d0ee:	d844      	bhi.n	800d17a <_strtol_l.constprop.0+0x9a>
 800d0f0:	000c      	movs	r4, r1
 800d0f2:	2b01      	cmp	r3, #1
 800d0f4:	d041      	beq.n	800d17a <_strtol_l.constprop.0+0x9a>
 800d0f6:	4b3d      	ldr	r3, [pc, #244]	@ (800d1ec <_strtol_l.constprop.0+0x10c>)
 800d0f8:	2208      	movs	r2, #8
 800d0fa:	469c      	mov	ip, r3
 800d0fc:	0023      	movs	r3, r4
 800d0fe:	4661      	mov	r1, ip
 800d100:	781d      	ldrb	r5, [r3, #0]
 800d102:	3401      	adds	r4, #1
 800d104:	5d48      	ldrb	r0, [r1, r5]
 800d106:	0001      	movs	r1, r0
 800d108:	4011      	ands	r1, r2
 800d10a:	4210      	tst	r0, r2
 800d10c:	d1f6      	bne.n	800d0fc <_strtol_l.constprop.0+0x1c>
 800d10e:	2d2d      	cmp	r5, #45	@ 0x2d
 800d110:	d13a      	bne.n	800d188 <_strtol_l.constprop.0+0xa8>
 800d112:	7825      	ldrb	r5, [r4, #0]
 800d114:	1c9c      	adds	r4, r3, #2
 800d116:	2301      	movs	r3, #1
 800d118:	9300      	str	r3, [sp, #0]
 800d11a:	2210      	movs	r2, #16
 800d11c:	0033      	movs	r3, r6
 800d11e:	4393      	bics	r3, r2
 800d120:	d109      	bne.n	800d136 <_strtol_l.constprop.0+0x56>
 800d122:	2d30      	cmp	r5, #48	@ 0x30
 800d124:	d136      	bne.n	800d194 <_strtol_l.constprop.0+0xb4>
 800d126:	2120      	movs	r1, #32
 800d128:	7823      	ldrb	r3, [r4, #0]
 800d12a:	438b      	bics	r3, r1
 800d12c:	2b58      	cmp	r3, #88	@ 0x58
 800d12e:	d131      	bne.n	800d194 <_strtol_l.constprop.0+0xb4>
 800d130:	0016      	movs	r6, r2
 800d132:	7865      	ldrb	r5, [r4, #1]
 800d134:	3402      	adds	r4, #2
 800d136:	4a2e      	ldr	r2, [pc, #184]	@ (800d1f0 <_strtol_l.constprop.0+0x110>)
 800d138:	9b00      	ldr	r3, [sp, #0]
 800d13a:	4694      	mov	ip, r2
 800d13c:	4463      	add	r3, ip
 800d13e:	0031      	movs	r1, r6
 800d140:	0018      	movs	r0, r3
 800d142:	9302      	str	r3, [sp, #8]
 800d144:	f7f3 f88a 	bl	800025c <__aeabi_uidivmod>
 800d148:	2200      	movs	r2, #0
 800d14a:	4684      	mov	ip, r0
 800d14c:	0010      	movs	r0, r2
 800d14e:	002b      	movs	r3, r5
 800d150:	3b30      	subs	r3, #48	@ 0x30
 800d152:	2b09      	cmp	r3, #9
 800d154:	d825      	bhi.n	800d1a2 <_strtol_l.constprop.0+0xc2>
 800d156:	001d      	movs	r5, r3
 800d158:	42ae      	cmp	r6, r5
 800d15a:	dd31      	ble.n	800d1c0 <_strtol_l.constprop.0+0xe0>
 800d15c:	1c53      	adds	r3, r2, #1
 800d15e:	d009      	beq.n	800d174 <_strtol_l.constprop.0+0x94>
 800d160:	2201      	movs	r2, #1
 800d162:	4252      	negs	r2, r2
 800d164:	4584      	cmp	ip, r0
 800d166:	d305      	bcc.n	800d174 <_strtol_l.constprop.0+0x94>
 800d168:	d101      	bne.n	800d16e <_strtol_l.constprop.0+0x8e>
 800d16a:	42a9      	cmp	r1, r5
 800d16c:	db25      	blt.n	800d1ba <_strtol_l.constprop.0+0xda>
 800d16e:	2201      	movs	r2, #1
 800d170:	4370      	muls	r0, r6
 800d172:	1828      	adds	r0, r5, r0
 800d174:	7825      	ldrb	r5, [r4, #0]
 800d176:	3401      	adds	r4, #1
 800d178:	e7e9      	b.n	800d14e <_strtol_l.constprop.0+0x6e>
 800d17a:	f000 fa8f 	bl	800d69c <__errno>
 800d17e:	2316      	movs	r3, #22
 800d180:	6003      	str	r3, [r0, #0]
 800d182:	2000      	movs	r0, #0
 800d184:	b005      	add	sp, #20
 800d186:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d188:	9100      	str	r1, [sp, #0]
 800d18a:	2d2b      	cmp	r5, #43	@ 0x2b
 800d18c:	d1c5      	bne.n	800d11a <_strtol_l.constprop.0+0x3a>
 800d18e:	7825      	ldrb	r5, [r4, #0]
 800d190:	1c9c      	adds	r4, r3, #2
 800d192:	e7c2      	b.n	800d11a <_strtol_l.constprop.0+0x3a>
 800d194:	2e00      	cmp	r6, #0
 800d196:	d1ce      	bne.n	800d136 <_strtol_l.constprop.0+0x56>
 800d198:	3608      	adds	r6, #8
 800d19a:	2d30      	cmp	r5, #48	@ 0x30
 800d19c:	d0cb      	beq.n	800d136 <_strtol_l.constprop.0+0x56>
 800d19e:	3602      	adds	r6, #2
 800d1a0:	e7c9      	b.n	800d136 <_strtol_l.constprop.0+0x56>
 800d1a2:	002b      	movs	r3, r5
 800d1a4:	3b41      	subs	r3, #65	@ 0x41
 800d1a6:	2b19      	cmp	r3, #25
 800d1a8:	d801      	bhi.n	800d1ae <_strtol_l.constprop.0+0xce>
 800d1aa:	3d37      	subs	r5, #55	@ 0x37
 800d1ac:	e7d4      	b.n	800d158 <_strtol_l.constprop.0+0x78>
 800d1ae:	002b      	movs	r3, r5
 800d1b0:	3b61      	subs	r3, #97	@ 0x61
 800d1b2:	2b19      	cmp	r3, #25
 800d1b4:	d804      	bhi.n	800d1c0 <_strtol_l.constprop.0+0xe0>
 800d1b6:	3d57      	subs	r5, #87	@ 0x57
 800d1b8:	e7ce      	b.n	800d158 <_strtol_l.constprop.0+0x78>
 800d1ba:	2201      	movs	r2, #1
 800d1bc:	4252      	negs	r2, r2
 800d1be:	e7d9      	b.n	800d174 <_strtol_l.constprop.0+0x94>
 800d1c0:	1c53      	adds	r3, r2, #1
 800d1c2:	d108      	bne.n	800d1d6 <_strtol_l.constprop.0+0xf6>
 800d1c4:	2322      	movs	r3, #34	@ 0x22
 800d1c6:	9a03      	ldr	r2, [sp, #12]
 800d1c8:	9802      	ldr	r0, [sp, #8]
 800d1ca:	6013      	str	r3, [r2, #0]
 800d1cc:	2f00      	cmp	r7, #0
 800d1ce:	d0d9      	beq.n	800d184 <_strtol_l.constprop.0+0xa4>
 800d1d0:	1e63      	subs	r3, r4, #1
 800d1d2:	9301      	str	r3, [sp, #4]
 800d1d4:	e007      	b.n	800d1e6 <_strtol_l.constprop.0+0x106>
 800d1d6:	9b00      	ldr	r3, [sp, #0]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d000      	beq.n	800d1de <_strtol_l.constprop.0+0xfe>
 800d1dc:	4240      	negs	r0, r0
 800d1de:	2f00      	cmp	r7, #0
 800d1e0:	d0d0      	beq.n	800d184 <_strtol_l.constprop.0+0xa4>
 800d1e2:	2a00      	cmp	r2, #0
 800d1e4:	d1f4      	bne.n	800d1d0 <_strtol_l.constprop.0+0xf0>
 800d1e6:	9b01      	ldr	r3, [sp, #4]
 800d1e8:	603b      	str	r3, [r7, #0]
 800d1ea:	e7cb      	b.n	800d184 <_strtol_l.constprop.0+0xa4>
 800d1ec:	080107e1 	.word	0x080107e1
 800d1f0:	7fffffff 	.word	0x7fffffff

0800d1f4 <strtol>:
 800d1f4:	b510      	push	{r4, lr}
 800d1f6:	4c04      	ldr	r4, [pc, #16]	@ (800d208 <strtol+0x14>)
 800d1f8:	0013      	movs	r3, r2
 800d1fa:	000a      	movs	r2, r1
 800d1fc:	0001      	movs	r1, r0
 800d1fe:	6820      	ldr	r0, [r4, #0]
 800d200:	f7ff ff6e 	bl	800d0e0 <_strtol_l.constprop.0>
 800d204:	bd10      	pop	{r4, pc}
 800d206:	46c0      	nop			@ (mov r8, r8)
 800d208:	20000b4c 	.word	0x20000b4c

0800d20c <_strtoll_l.constprop.0>:
 800d20c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d20e:	b08d      	sub	sp, #52	@ 0x34
 800d210:	000c      	movs	r4, r1
 800d212:	9102      	str	r1, [sp, #8]
 800d214:	001e      	movs	r6, r3
 800d216:	2108      	movs	r1, #8
 800d218:	4f4c      	ldr	r7, [pc, #304]	@ (800d34c <_strtoll_l.constprop.0+0x140>)
 800d21a:	900a      	str	r0, [sp, #40]	@ 0x28
 800d21c:	9203      	str	r2, [sp, #12]
 800d21e:	0023      	movs	r3, r4
 800d220:	781a      	ldrb	r2, [r3, #0]
 800d222:	3401      	adds	r4, #1
 800d224:	5cbd      	ldrb	r5, [r7, r2]
 800d226:	0028      	movs	r0, r5
 800d228:	4008      	ands	r0, r1
 800d22a:	420d      	tst	r5, r1
 800d22c:	d1f7      	bne.n	800d21e <_strtoll_l.constprop.0+0x12>
 800d22e:	0015      	movs	r5, r2
 800d230:	2a2d      	cmp	r2, #45	@ 0x2d
 800d232:	d14f      	bne.n	800d2d4 <_strtoll_l.constprop.0+0xc8>
 800d234:	7825      	ldrb	r5, [r4, #0]
 800d236:	1c9c      	adds	r4, r3, #2
 800d238:	2301      	movs	r3, #1
 800d23a:	9301      	str	r3, [sp, #4]
 800d23c:	2210      	movs	r2, #16
 800d23e:	0033      	movs	r3, r6
 800d240:	4393      	bics	r3, r2
 800d242:	d109      	bne.n	800d258 <_strtoll_l.constprop.0+0x4c>
 800d244:	2d30      	cmp	r5, #48	@ 0x30
 800d246:	d14b      	bne.n	800d2e0 <_strtoll_l.constprop.0+0xd4>
 800d248:	2120      	movs	r1, #32
 800d24a:	7823      	ldrb	r3, [r4, #0]
 800d24c:	438b      	bics	r3, r1
 800d24e:	2b58      	cmp	r3, #88	@ 0x58
 800d250:	d146      	bne.n	800d2e0 <_strtoll_l.constprop.0+0xd4>
 800d252:	0016      	movs	r6, r2
 800d254:	7865      	ldrb	r5, [r4, #1]
 800d256:	3402      	adds	r4, #2
 800d258:	2001      	movs	r0, #1
 800d25a:	2300      	movs	r3, #0
 800d25c:	493c      	ldr	r1, [pc, #240]	@ (800d350 <_strtoll_l.constprop.0+0x144>)
 800d25e:	9a01      	ldr	r2, [sp, #4]
 800d260:	4240      	negs	r0, r0
 800d262:	1812      	adds	r2, r2, r0
 800d264:	414b      	adcs	r3, r1
 800d266:	9204      	str	r2, [sp, #16]
 800d268:	9305      	str	r3, [sp, #20]
 800d26a:	9804      	ldr	r0, [sp, #16]
 800d26c:	9905      	ldr	r1, [sp, #20]
 800d26e:	17f3      	asrs	r3, r6, #31
 800d270:	0032      	movs	r2, r6
 800d272:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d274:	f7f3 f95a 	bl	800052c <__aeabi_uldivmod>
 800d278:	2300      	movs	r3, #0
 800d27a:	000f      	movs	r7, r1
 800d27c:	9008      	str	r0, [sp, #32]
 800d27e:	2100      	movs	r1, #0
 800d280:	2000      	movs	r0, #0
 800d282:	9209      	str	r2, [sp, #36]	@ 0x24
 800d284:	002a      	movs	r2, r5
 800d286:	3a30      	subs	r2, #48	@ 0x30
 800d288:	2a09      	cmp	r2, #9
 800d28a:	d830      	bhi.n	800d2ee <_strtoll_l.constprop.0+0xe2>
 800d28c:	0015      	movs	r5, r2
 800d28e:	42ae      	cmp	r6, r5
 800d290:	dd3c      	ble.n	800d30c <_strtoll_l.constprop.0+0x100>
 800d292:	1c5a      	adds	r2, r3, #1
 800d294:	d01b      	beq.n	800d2ce <_strtoll_l.constprop.0+0xc2>
 800d296:	42b9      	cmp	r1, r7
 800d298:	d835      	bhi.n	800d306 <_strtoll_l.constprop.0+0xfa>
 800d29a:	d102      	bne.n	800d2a2 <_strtoll_l.constprop.0+0x96>
 800d29c:	9b08      	ldr	r3, [sp, #32]
 800d29e:	4298      	cmp	r0, r3
 800d2a0:	d831      	bhi.n	800d306 <_strtoll_l.constprop.0+0xfa>
 800d2a2:	9b08      	ldr	r3, [sp, #32]
 800d2a4:	4283      	cmp	r3, r0
 800d2a6:	d104      	bne.n	800d2b2 <_strtoll_l.constprop.0+0xa6>
 800d2a8:	428f      	cmp	r7, r1
 800d2aa:	d102      	bne.n	800d2b2 <_strtoll_l.constprop.0+0xa6>
 800d2ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d2ae:	42ab      	cmp	r3, r5
 800d2b0:	db29      	blt.n	800d306 <_strtoll_l.constprop.0+0xfa>
 800d2b2:	0002      	movs	r2, r0
 800d2b4:	000b      	movs	r3, r1
 800d2b6:	0030      	movs	r0, r6
 800d2b8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d2ba:	f7f3 f957 	bl	800056c <__aeabi_lmul>
 800d2be:	17eb      	asrs	r3, r5, #31
 800d2c0:	9506      	str	r5, [sp, #24]
 800d2c2:	9307      	str	r3, [sp, #28]
 800d2c4:	9a06      	ldr	r2, [sp, #24]
 800d2c6:	9b07      	ldr	r3, [sp, #28]
 800d2c8:	1880      	adds	r0, r0, r2
 800d2ca:	4159      	adcs	r1, r3
 800d2cc:	2301      	movs	r3, #1
 800d2ce:	7825      	ldrb	r5, [r4, #0]
 800d2d0:	3401      	adds	r4, #1
 800d2d2:	e7d7      	b.n	800d284 <_strtoll_l.constprop.0+0x78>
 800d2d4:	9001      	str	r0, [sp, #4]
 800d2d6:	2a2b      	cmp	r2, #43	@ 0x2b
 800d2d8:	d1b0      	bne.n	800d23c <_strtoll_l.constprop.0+0x30>
 800d2da:	7825      	ldrb	r5, [r4, #0]
 800d2dc:	1c9c      	adds	r4, r3, #2
 800d2de:	e7ad      	b.n	800d23c <_strtoll_l.constprop.0+0x30>
 800d2e0:	2e00      	cmp	r6, #0
 800d2e2:	d1b9      	bne.n	800d258 <_strtoll_l.constprop.0+0x4c>
 800d2e4:	3608      	adds	r6, #8
 800d2e6:	2d30      	cmp	r5, #48	@ 0x30
 800d2e8:	d0b6      	beq.n	800d258 <_strtoll_l.constprop.0+0x4c>
 800d2ea:	3602      	adds	r6, #2
 800d2ec:	e7b4      	b.n	800d258 <_strtoll_l.constprop.0+0x4c>
 800d2ee:	002a      	movs	r2, r5
 800d2f0:	3a41      	subs	r2, #65	@ 0x41
 800d2f2:	2a19      	cmp	r2, #25
 800d2f4:	d801      	bhi.n	800d2fa <_strtoll_l.constprop.0+0xee>
 800d2f6:	3d37      	subs	r5, #55	@ 0x37
 800d2f8:	e7c9      	b.n	800d28e <_strtoll_l.constprop.0+0x82>
 800d2fa:	002a      	movs	r2, r5
 800d2fc:	3a61      	subs	r2, #97	@ 0x61
 800d2fe:	2a19      	cmp	r2, #25
 800d300:	d804      	bhi.n	800d30c <_strtoll_l.constprop.0+0x100>
 800d302:	3d57      	subs	r5, #87	@ 0x57
 800d304:	e7c3      	b.n	800d28e <_strtoll_l.constprop.0+0x82>
 800d306:	2301      	movs	r3, #1
 800d308:	425b      	negs	r3, r3
 800d30a:	e7e0      	b.n	800d2ce <_strtoll_l.constprop.0+0xc2>
 800d30c:	1c5a      	adds	r2, r3, #1
 800d30e:	d109      	bne.n	800d324 <_strtoll_l.constprop.0+0x118>
 800d310:	9804      	ldr	r0, [sp, #16]
 800d312:	9905      	ldr	r1, [sp, #20]
 800d314:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d316:	3323      	adds	r3, #35	@ 0x23
 800d318:	6013      	str	r3, [r2, #0]
 800d31a:	9b03      	ldr	r3, [sp, #12]
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d10e      	bne.n	800d33e <_strtoll_l.constprop.0+0x132>
 800d320:	b00d      	add	sp, #52	@ 0x34
 800d322:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d324:	9a01      	ldr	r2, [sp, #4]
 800d326:	2a00      	cmp	r2, #0
 800d328:	d004      	beq.n	800d334 <_strtoll_l.constprop.0+0x128>
 800d32a:	0005      	movs	r5, r0
 800d32c:	000e      	movs	r6, r1
 800d32e:	2100      	movs	r1, #0
 800d330:	4268      	negs	r0, r5
 800d332:	41b1      	sbcs	r1, r6
 800d334:	9a03      	ldr	r2, [sp, #12]
 800d336:	2a00      	cmp	r2, #0
 800d338:	d0f2      	beq.n	800d320 <_strtoll_l.constprop.0+0x114>
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d001      	beq.n	800d342 <_strtoll_l.constprop.0+0x136>
 800d33e:	1e63      	subs	r3, r4, #1
 800d340:	9302      	str	r3, [sp, #8]
 800d342:	9b03      	ldr	r3, [sp, #12]
 800d344:	9a02      	ldr	r2, [sp, #8]
 800d346:	601a      	str	r2, [r3, #0]
 800d348:	e7ea      	b.n	800d320 <_strtoll_l.constprop.0+0x114>
 800d34a:	46c0      	nop			@ (mov r8, r8)
 800d34c:	080107e1 	.word	0x080107e1
 800d350:	7fffffff 	.word	0x7fffffff

0800d354 <strtoll>:
 800d354:	b510      	push	{r4, lr}
 800d356:	4c04      	ldr	r4, [pc, #16]	@ (800d368 <strtoll+0x14>)
 800d358:	0013      	movs	r3, r2
 800d35a:	000a      	movs	r2, r1
 800d35c:	0001      	movs	r1, r0
 800d35e:	6820      	ldr	r0, [r4, #0]
 800d360:	f7ff ff54 	bl	800d20c <_strtoll_l.constprop.0>
 800d364:	bd10      	pop	{r4, pc}
 800d366:	46c0      	nop			@ (mov r8, r8)
 800d368:	20000b4c 	.word	0x20000b4c

0800d36c <std>:
 800d36c:	2300      	movs	r3, #0
 800d36e:	b510      	push	{r4, lr}
 800d370:	0004      	movs	r4, r0
 800d372:	6003      	str	r3, [r0, #0]
 800d374:	6043      	str	r3, [r0, #4]
 800d376:	6083      	str	r3, [r0, #8]
 800d378:	8181      	strh	r1, [r0, #12]
 800d37a:	6643      	str	r3, [r0, #100]	@ 0x64
 800d37c:	81c2      	strh	r2, [r0, #14]
 800d37e:	6103      	str	r3, [r0, #16]
 800d380:	6143      	str	r3, [r0, #20]
 800d382:	6183      	str	r3, [r0, #24]
 800d384:	0019      	movs	r1, r3
 800d386:	2208      	movs	r2, #8
 800d388:	305c      	adds	r0, #92	@ 0x5c
 800d38a:	f000 f91f 	bl	800d5cc <memset>
 800d38e:	4b0b      	ldr	r3, [pc, #44]	@ (800d3bc <std+0x50>)
 800d390:	6224      	str	r4, [r4, #32]
 800d392:	6263      	str	r3, [r4, #36]	@ 0x24
 800d394:	4b0a      	ldr	r3, [pc, #40]	@ (800d3c0 <std+0x54>)
 800d396:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d398:	4b0a      	ldr	r3, [pc, #40]	@ (800d3c4 <std+0x58>)
 800d39a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d39c:	4b0a      	ldr	r3, [pc, #40]	@ (800d3c8 <std+0x5c>)
 800d39e:	6323      	str	r3, [r4, #48]	@ 0x30
 800d3a0:	4b0a      	ldr	r3, [pc, #40]	@ (800d3cc <std+0x60>)
 800d3a2:	429c      	cmp	r4, r3
 800d3a4:	d005      	beq.n	800d3b2 <std+0x46>
 800d3a6:	4b0a      	ldr	r3, [pc, #40]	@ (800d3d0 <std+0x64>)
 800d3a8:	429c      	cmp	r4, r3
 800d3aa:	d002      	beq.n	800d3b2 <std+0x46>
 800d3ac:	4b09      	ldr	r3, [pc, #36]	@ (800d3d4 <std+0x68>)
 800d3ae:	429c      	cmp	r4, r3
 800d3b0:	d103      	bne.n	800d3ba <std+0x4e>
 800d3b2:	0020      	movs	r0, r4
 800d3b4:	3058      	adds	r0, #88	@ 0x58
 800d3b6:	f000 f99b 	bl	800d6f0 <__retarget_lock_init_recursive>
 800d3ba:	bd10      	pop	{r4, pc}
 800d3bc:	0800d535 	.word	0x0800d535
 800d3c0:	0800d55d 	.word	0x0800d55d
 800d3c4:	0800d595 	.word	0x0800d595
 800d3c8:	0800d5c1 	.word	0x0800d5c1
 800d3cc:	20001e4c 	.word	0x20001e4c
 800d3d0:	20001eb4 	.word	0x20001eb4
 800d3d4:	20001f1c 	.word	0x20001f1c

0800d3d8 <stdio_exit_handler>:
 800d3d8:	b510      	push	{r4, lr}
 800d3da:	4a03      	ldr	r2, [pc, #12]	@ (800d3e8 <stdio_exit_handler+0x10>)
 800d3dc:	4903      	ldr	r1, [pc, #12]	@ (800d3ec <stdio_exit_handler+0x14>)
 800d3de:	4804      	ldr	r0, [pc, #16]	@ (800d3f0 <stdio_exit_handler+0x18>)
 800d3e0:	f000 f86c 	bl	800d4bc <_fwalk_sglue>
 800d3e4:	bd10      	pop	{r4, pc}
 800d3e6:	46c0      	nop			@ (mov r8, r8)
 800d3e8:	200009d4 	.word	0x200009d4
 800d3ec:	0800f2e1 	.word	0x0800f2e1
 800d3f0:	20000b50 	.word	0x20000b50

0800d3f4 <cleanup_stdio>:
 800d3f4:	6841      	ldr	r1, [r0, #4]
 800d3f6:	4b0b      	ldr	r3, [pc, #44]	@ (800d424 <cleanup_stdio+0x30>)
 800d3f8:	b510      	push	{r4, lr}
 800d3fa:	0004      	movs	r4, r0
 800d3fc:	4299      	cmp	r1, r3
 800d3fe:	d001      	beq.n	800d404 <cleanup_stdio+0x10>
 800d400:	f001 ff6e 	bl	800f2e0 <_fflush_r>
 800d404:	68a1      	ldr	r1, [r4, #8]
 800d406:	4b08      	ldr	r3, [pc, #32]	@ (800d428 <cleanup_stdio+0x34>)
 800d408:	4299      	cmp	r1, r3
 800d40a:	d002      	beq.n	800d412 <cleanup_stdio+0x1e>
 800d40c:	0020      	movs	r0, r4
 800d40e:	f001 ff67 	bl	800f2e0 <_fflush_r>
 800d412:	68e1      	ldr	r1, [r4, #12]
 800d414:	4b05      	ldr	r3, [pc, #20]	@ (800d42c <cleanup_stdio+0x38>)
 800d416:	4299      	cmp	r1, r3
 800d418:	d002      	beq.n	800d420 <cleanup_stdio+0x2c>
 800d41a:	0020      	movs	r0, r4
 800d41c:	f001 ff60 	bl	800f2e0 <_fflush_r>
 800d420:	bd10      	pop	{r4, pc}
 800d422:	46c0      	nop			@ (mov r8, r8)
 800d424:	20001e4c 	.word	0x20001e4c
 800d428:	20001eb4 	.word	0x20001eb4
 800d42c:	20001f1c 	.word	0x20001f1c

0800d430 <global_stdio_init.part.0>:
 800d430:	b510      	push	{r4, lr}
 800d432:	4b09      	ldr	r3, [pc, #36]	@ (800d458 <global_stdio_init.part.0+0x28>)
 800d434:	4a09      	ldr	r2, [pc, #36]	@ (800d45c <global_stdio_init.part.0+0x2c>)
 800d436:	2104      	movs	r1, #4
 800d438:	601a      	str	r2, [r3, #0]
 800d43a:	4809      	ldr	r0, [pc, #36]	@ (800d460 <global_stdio_init.part.0+0x30>)
 800d43c:	2200      	movs	r2, #0
 800d43e:	f7ff ff95 	bl	800d36c <std>
 800d442:	2201      	movs	r2, #1
 800d444:	2109      	movs	r1, #9
 800d446:	4807      	ldr	r0, [pc, #28]	@ (800d464 <global_stdio_init.part.0+0x34>)
 800d448:	f7ff ff90 	bl	800d36c <std>
 800d44c:	2202      	movs	r2, #2
 800d44e:	2112      	movs	r1, #18
 800d450:	4805      	ldr	r0, [pc, #20]	@ (800d468 <global_stdio_init.part.0+0x38>)
 800d452:	f7ff ff8b 	bl	800d36c <std>
 800d456:	bd10      	pop	{r4, pc}
 800d458:	20001f84 	.word	0x20001f84
 800d45c:	0800d3d9 	.word	0x0800d3d9
 800d460:	20001e4c 	.word	0x20001e4c
 800d464:	20001eb4 	.word	0x20001eb4
 800d468:	20001f1c 	.word	0x20001f1c

0800d46c <__sfp_lock_acquire>:
 800d46c:	b510      	push	{r4, lr}
 800d46e:	4802      	ldr	r0, [pc, #8]	@ (800d478 <__sfp_lock_acquire+0xc>)
 800d470:	f000 f93f 	bl	800d6f2 <__retarget_lock_acquire_recursive>
 800d474:	bd10      	pop	{r4, pc}
 800d476:	46c0      	nop			@ (mov r8, r8)
 800d478:	20001f8d 	.word	0x20001f8d

0800d47c <__sfp_lock_release>:
 800d47c:	b510      	push	{r4, lr}
 800d47e:	4802      	ldr	r0, [pc, #8]	@ (800d488 <__sfp_lock_release+0xc>)
 800d480:	f000 f938 	bl	800d6f4 <__retarget_lock_release_recursive>
 800d484:	bd10      	pop	{r4, pc}
 800d486:	46c0      	nop			@ (mov r8, r8)
 800d488:	20001f8d 	.word	0x20001f8d

0800d48c <__sinit>:
 800d48c:	b510      	push	{r4, lr}
 800d48e:	0004      	movs	r4, r0
 800d490:	f7ff ffec 	bl	800d46c <__sfp_lock_acquire>
 800d494:	6a23      	ldr	r3, [r4, #32]
 800d496:	2b00      	cmp	r3, #0
 800d498:	d002      	beq.n	800d4a0 <__sinit+0x14>
 800d49a:	f7ff ffef 	bl	800d47c <__sfp_lock_release>
 800d49e:	bd10      	pop	{r4, pc}
 800d4a0:	4b04      	ldr	r3, [pc, #16]	@ (800d4b4 <__sinit+0x28>)
 800d4a2:	6223      	str	r3, [r4, #32]
 800d4a4:	4b04      	ldr	r3, [pc, #16]	@ (800d4b8 <__sinit+0x2c>)
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d1f6      	bne.n	800d49a <__sinit+0xe>
 800d4ac:	f7ff ffc0 	bl	800d430 <global_stdio_init.part.0>
 800d4b0:	e7f3      	b.n	800d49a <__sinit+0xe>
 800d4b2:	46c0      	nop			@ (mov r8, r8)
 800d4b4:	0800d3f5 	.word	0x0800d3f5
 800d4b8:	20001f84 	.word	0x20001f84

0800d4bc <_fwalk_sglue>:
 800d4bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d4be:	0014      	movs	r4, r2
 800d4c0:	2600      	movs	r6, #0
 800d4c2:	9000      	str	r0, [sp, #0]
 800d4c4:	9101      	str	r1, [sp, #4]
 800d4c6:	68a5      	ldr	r5, [r4, #8]
 800d4c8:	6867      	ldr	r7, [r4, #4]
 800d4ca:	3f01      	subs	r7, #1
 800d4cc:	d504      	bpl.n	800d4d8 <_fwalk_sglue+0x1c>
 800d4ce:	6824      	ldr	r4, [r4, #0]
 800d4d0:	2c00      	cmp	r4, #0
 800d4d2:	d1f8      	bne.n	800d4c6 <_fwalk_sglue+0xa>
 800d4d4:	0030      	movs	r0, r6
 800d4d6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d4d8:	89ab      	ldrh	r3, [r5, #12]
 800d4da:	2b01      	cmp	r3, #1
 800d4dc:	d908      	bls.n	800d4f0 <_fwalk_sglue+0x34>
 800d4de:	220e      	movs	r2, #14
 800d4e0:	5eab      	ldrsh	r3, [r5, r2]
 800d4e2:	3301      	adds	r3, #1
 800d4e4:	d004      	beq.n	800d4f0 <_fwalk_sglue+0x34>
 800d4e6:	0029      	movs	r1, r5
 800d4e8:	9800      	ldr	r0, [sp, #0]
 800d4ea:	9b01      	ldr	r3, [sp, #4]
 800d4ec:	4798      	blx	r3
 800d4ee:	4306      	orrs	r6, r0
 800d4f0:	3568      	adds	r5, #104	@ 0x68
 800d4f2:	e7ea      	b.n	800d4ca <_fwalk_sglue+0xe>

0800d4f4 <siprintf>:
 800d4f4:	b40e      	push	{r1, r2, r3}
 800d4f6:	b500      	push	{lr}
 800d4f8:	490b      	ldr	r1, [pc, #44]	@ (800d528 <siprintf+0x34>)
 800d4fa:	b09c      	sub	sp, #112	@ 0x70
 800d4fc:	ab1d      	add	r3, sp, #116	@ 0x74
 800d4fe:	9002      	str	r0, [sp, #8]
 800d500:	9006      	str	r0, [sp, #24]
 800d502:	9107      	str	r1, [sp, #28]
 800d504:	9104      	str	r1, [sp, #16]
 800d506:	4809      	ldr	r0, [pc, #36]	@ (800d52c <siprintf+0x38>)
 800d508:	4909      	ldr	r1, [pc, #36]	@ (800d530 <siprintf+0x3c>)
 800d50a:	cb04      	ldmia	r3!, {r2}
 800d50c:	9105      	str	r1, [sp, #20]
 800d50e:	6800      	ldr	r0, [r0, #0]
 800d510:	a902      	add	r1, sp, #8
 800d512:	9301      	str	r3, [sp, #4]
 800d514:	f001 fa9e 	bl	800ea54 <_svfiprintf_r>
 800d518:	2200      	movs	r2, #0
 800d51a:	9b02      	ldr	r3, [sp, #8]
 800d51c:	701a      	strb	r2, [r3, #0]
 800d51e:	b01c      	add	sp, #112	@ 0x70
 800d520:	bc08      	pop	{r3}
 800d522:	b003      	add	sp, #12
 800d524:	4718      	bx	r3
 800d526:	46c0      	nop			@ (mov r8, r8)
 800d528:	7fffffff 	.word	0x7fffffff
 800d52c:	20000b4c 	.word	0x20000b4c
 800d530:	ffff0208 	.word	0xffff0208

0800d534 <__sread>:
 800d534:	b570      	push	{r4, r5, r6, lr}
 800d536:	000c      	movs	r4, r1
 800d538:	250e      	movs	r5, #14
 800d53a:	5f49      	ldrsh	r1, [r1, r5]
 800d53c:	f000 f886 	bl	800d64c <_read_r>
 800d540:	2800      	cmp	r0, #0
 800d542:	db03      	blt.n	800d54c <__sread+0x18>
 800d544:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800d546:	181b      	adds	r3, r3, r0
 800d548:	6563      	str	r3, [r4, #84]	@ 0x54
 800d54a:	bd70      	pop	{r4, r5, r6, pc}
 800d54c:	89a3      	ldrh	r3, [r4, #12]
 800d54e:	4a02      	ldr	r2, [pc, #8]	@ (800d558 <__sread+0x24>)
 800d550:	4013      	ands	r3, r2
 800d552:	81a3      	strh	r3, [r4, #12]
 800d554:	e7f9      	b.n	800d54a <__sread+0x16>
 800d556:	46c0      	nop			@ (mov r8, r8)
 800d558:	ffffefff 	.word	0xffffefff

0800d55c <__swrite>:
 800d55c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d55e:	001f      	movs	r7, r3
 800d560:	898b      	ldrh	r3, [r1, #12]
 800d562:	0005      	movs	r5, r0
 800d564:	000c      	movs	r4, r1
 800d566:	0016      	movs	r6, r2
 800d568:	05db      	lsls	r3, r3, #23
 800d56a:	d505      	bpl.n	800d578 <__swrite+0x1c>
 800d56c:	230e      	movs	r3, #14
 800d56e:	5ec9      	ldrsh	r1, [r1, r3]
 800d570:	2200      	movs	r2, #0
 800d572:	2302      	movs	r3, #2
 800d574:	f000 f856 	bl	800d624 <_lseek_r>
 800d578:	89a3      	ldrh	r3, [r4, #12]
 800d57a:	4a05      	ldr	r2, [pc, #20]	@ (800d590 <__swrite+0x34>)
 800d57c:	0028      	movs	r0, r5
 800d57e:	4013      	ands	r3, r2
 800d580:	81a3      	strh	r3, [r4, #12]
 800d582:	0032      	movs	r2, r6
 800d584:	230e      	movs	r3, #14
 800d586:	5ee1      	ldrsh	r1, [r4, r3]
 800d588:	003b      	movs	r3, r7
 800d58a:	f000 f873 	bl	800d674 <_write_r>
 800d58e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d590:	ffffefff 	.word	0xffffefff

0800d594 <__sseek>:
 800d594:	b570      	push	{r4, r5, r6, lr}
 800d596:	000c      	movs	r4, r1
 800d598:	250e      	movs	r5, #14
 800d59a:	5f49      	ldrsh	r1, [r1, r5]
 800d59c:	f000 f842 	bl	800d624 <_lseek_r>
 800d5a0:	89a3      	ldrh	r3, [r4, #12]
 800d5a2:	1c42      	adds	r2, r0, #1
 800d5a4:	d103      	bne.n	800d5ae <__sseek+0x1a>
 800d5a6:	4a05      	ldr	r2, [pc, #20]	@ (800d5bc <__sseek+0x28>)
 800d5a8:	4013      	ands	r3, r2
 800d5aa:	81a3      	strh	r3, [r4, #12]
 800d5ac:	bd70      	pop	{r4, r5, r6, pc}
 800d5ae:	2280      	movs	r2, #128	@ 0x80
 800d5b0:	0152      	lsls	r2, r2, #5
 800d5b2:	4313      	orrs	r3, r2
 800d5b4:	81a3      	strh	r3, [r4, #12]
 800d5b6:	6560      	str	r0, [r4, #84]	@ 0x54
 800d5b8:	e7f8      	b.n	800d5ac <__sseek+0x18>
 800d5ba:	46c0      	nop			@ (mov r8, r8)
 800d5bc:	ffffefff 	.word	0xffffefff

0800d5c0 <__sclose>:
 800d5c0:	b510      	push	{r4, lr}
 800d5c2:	230e      	movs	r3, #14
 800d5c4:	5ec9      	ldrsh	r1, [r1, r3]
 800d5c6:	f000 f81b 	bl	800d600 <_close_r>
 800d5ca:	bd10      	pop	{r4, pc}

0800d5cc <memset>:
 800d5cc:	0003      	movs	r3, r0
 800d5ce:	1882      	adds	r2, r0, r2
 800d5d0:	4293      	cmp	r3, r2
 800d5d2:	d100      	bne.n	800d5d6 <memset+0xa>
 800d5d4:	4770      	bx	lr
 800d5d6:	7019      	strb	r1, [r3, #0]
 800d5d8:	3301      	adds	r3, #1
 800d5da:	e7f9      	b.n	800d5d0 <memset+0x4>

0800d5dc <strncmp>:
 800d5dc:	b530      	push	{r4, r5, lr}
 800d5de:	0005      	movs	r5, r0
 800d5e0:	1e10      	subs	r0, r2, #0
 800d5e2:	d00b      	beq.n	800d5fc <strncmp+0x20>
 800d5e4:	2400      	movs	r4, #0
 800d5e6:	3a01      	subs	r2, #1
 800d5e8:	5d2b      	ldrb	r3, [r5, r4]
 800d5ea:	5d08      	ldrb	r0, [r1, r4]
 800d5ec:	4283      	cmp	r3, r0
 800d5ee:	d104      	bne.n	800d5fa <strncmp+0x1e>
 800d5f0:	42a2      	cmp	r2, r4
 800d5f2:	d002      	beq.n	800d5fa <strncmp+0x1e>
 800d5f4:	3401      	adds	r4, #1
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d1f6      	bne.n	800d5e8 <strncmp+0xc>
 800d5fa:	1a18      	subs	r0, r3, r0
 800d5fc:	bd30      	pop	{r4, r5, pc}
	...

0800d600 <_close_r>:
 800d600:	2300      	movs	r3, #0
 800d602:	b570      	push	{r4, r5, r6, lr}
 800d604:	4d06      	ldr	r5, [pc, #24]	@ (800d620 <_close_r+0x20>)
 800d606:	0004      	movs	r4, r0
 800d608:	0008      	movs	r0, r1
 800d60a:	602b      	str	r3, [r5, #0]
 800d60c:	f7f9 fa6a 	bl	8006ae4 <_close>
 800d610:	1c43      	adds	r3, r0, #1
 800d612:	d103      	bne.n	800d61c <_close_r+0x1c>
 800d614:	682b      	ldr	r3, [r5, #0]
 800d616:	2b00      	cmp	r3, #0
 800d618:	d000      	beq.n	800d61c <_close_r+0x1c>
 800d61a:	6023      	str	r3, [r4, #0]
 800d61c:	bd70      	pop	{r4, r5, r6, pc}
 800d61e:	46c0      	nop			@ (mov r8, r8)
 800d620:	20001f88 	.word	0x20001f88

0800d624 <_lseek_r>:
 800d624:	b570      	push	{r4, r5, r6, lr}
 800d626:	0004      	movs	r4, r0
 800d628:	0008      	movs	r0, r1
 800d62a:	0011      	movs	r1, r2
 800d62c:	001a      	movs	r2, r3
 800d62e:	2300      	movs	r3, #0
 800d630:	4d05      	ldr	r5, [pc, #20]	@ (800d648 <_lseek_r+0x24>)
 800d632:	602b      	str	r3, [r5, #0]
 800d634:	f7f9 fa77 	bl	8006b26 <_lseek>
 800d638:	1c43      	adds	r3, r0, #1
 800d63a:	d103      	bne.n	800d644 <_lseek_r+0x20>
 800d63c:	682b      	ldr	r3, [r5, #0]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d000      	beq.n	800d644 <_lseek_r+0x20>
 800d642:	6023      	str	r3, [r4, #0]
 800d644:	bd70      	pop	{r4, r5, r6, pc}
 800d646:	46c0      	nop			@ (mov r8, r8)
 800d648:	20001f88 	.word	0x20001f88

0800d64c <_read_r>:
 800d64c:	b570      	push	{r4, r5, r6, lr}
 800d64e:	0004      	movs	r4, r0
 800d650:	0008      	movs	r0, r1
 800d652:	0011      	movs	r1, r2
 800d654:	001a      	movs	r2, r3
 800d656:	2300      	movs	r3, #0
 800d658:	4d05      	ldr	r5, [pc, #20]	@ (800d670 <_read_r+0x24>)
 800d65a:	602b      	str	r3, [r5, #0]
 800d65c:	f7f9 fa09 	bl	8006a72 <_read>
 800d660:	1c43      	adds	r3, r0, #1
 800d662:	d103      	bne.n	800d66c <_read_r+0x20>
 800d664:	682b      	ldr	r3, [r5, #0]
 800d666:	2b00      	cmp	r3, #0
 800d668:	d000      	beq.n	800d66c <_read_r+0x20>
 800d66a:	6023      	str	r3, [r4, #0]
 800d66c:	bd70      	pop	{r4, r5, r6, pc}
 800d66e:	46c0      	nop			@ (mov r8, r8)
 800d670:	20001f88 	.word	0x20001f88

0800d674 <_write_r>:
 800d674:	b570      	push	{r4, r5, r6, lr}
 800d676:	0004      	movs	r4, r0
 800d678:	0008      	movs	r0, r1
 800d67a:	0011      	movs	r1, r2
 800d67c:	001a      	movs	r2, r3
 800d67e:	2300      	movs	r3, #0
 800d680:	4d05      	ldr	r5, [pc, #20]	@ (800d698 <_write_r+0x24>)
 800d682:	602b      	str	r3, [r5, #0]
 800d684:	f7f9 fa12 	bl	8006aac <_write>
 800d688:	1c43      	adds	r3, r0, #1
 800d68a:	d103      	bne.n	800d694 <_write_r+0x20>
 800d68c:	682b      	ldr	r3, [r5, #0]
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d000      	beq.n	800d694 <_write_r+0x20>
 800d692:	6023      	str	r3, [r4, #0]
 800d694:	bd70      	pop	{r4, r5, r6, pc}
 800d696:	46c0      	nop			@ (mov r8, r8)
 800d698:	20001f88 	.word	0x20001f88

0800d69c <__errno>:
 800d69c:	4b01      	ldr	r3, [pc, #4]	@ (800d6a4 <__errno+0x8>)
 800d69e:	6818      	ldr	r0, [r3, #0]
 800d6a0:	4770      	bx	lr
 800d6a2:	46c0      	nop			@ (mov r8, r8)
 800d6a4:	20000b4c 	.word	0x20000b4c

0800d6a8 <__libc_init_array>:
 800d6a8:	b570      	push	{r4, r5, r6, lr}
 800d6aa:	2600      	movs	r6, #0
 800d6ac:	4c0c      	ldr	r4, [pc, #48]	@ (800d6e0 <__libc_init_array+0x38>)
 800d6ae:	4d0d      	ldr	r5, [pc, #52]	@ (800d6e4 <__libc_init_array+0x3c>)
 800d6b0:	1b64      	subs	r4, r4, r5
 800d6b2:	10a4      	asrs	r4, r4, #2
 800d6b4:	42a6      	cmp	r6, r4
 800d6b6:	d109      	bne.n	800d6cc <__libc_init_array+0x24>
 800d6b8:	2600      	movs	r6, #0
 800d6ba:	f002 fadb 	bl	800fc74 <_init>
 800d6be:	4c0a      	ldr	r4, [pc, #40]	@ (800d6e8 <__libc_init_array+0x40>)
 800d6c0:	4d0a      	ldr	r5, [pc, #40]	@ (800d6ec <__libc_init_array+0x44>)
 800d6c2:	1b64      	subs	r4, r4, r5
 800d6c4:	10a4      	asrs	r4, r4, #2
 800d6c6:	42a6      	cmp	r6, r4
 800d6c8:	d105      	bne.n	800d6d6 <__libc_init_array+0x2e>
 800d6ca:	bd70      	pop	{r4, r5, r6, pc}
 800d6cc:	00b3      	lsls	r3, r6, #2
 800d6ce:	58eb      	ldr	r3, [r5, r3]
 800d6d0:	4798      	blx	r3
 800d6d2:	3601      	adds	r6, #1
 800d6d4:	e7ee      	b.n	800d6b4 <__libc_init_array+0xc>
 800d6d6:	00b3      	lsls	r3, r6, #2
 800d6d8:	58eb      	ldr	r3, [r5, r3]
 800d6da:	4798      	blx	r3
 800d6dc:	3601      	adds	r6, #1
 800d6de:	e7f2      	b.n	800d6c6 <__libc_init_array+0x1e>
 800d6e0:	08010b50 	.word	0x08010b50
 800d6e4:	08010b50 	.word	0x08010b50
 800d6e8:	08010b54 	.word	0x08010b54
 800d6ec:	08010b50 	.word	0x08010b50

0800d6f0 <__retarget_lock_init_recursive>:
 800d6f0:	4770      	bx	lr

0800d6f2 <__retarget_lock_acquire_recursive>:
 800d6f2:	4770      	bx	lr

0800d6f4 <__retarget_lock_release_recursive>:
 800d6f4:	4770      	bx	lr

0800d6f6 <memcpy>:
 800d6f6:	2300      	movs	r3, #0
 800d6f8:	b510      	push	{r4, lr}
 800d6fa:	429a      	cmp	r2, r3
 800d6fc:	d100      	bne.n	800d700 <memcpy+0xa>
 800d6fe:	bd10      	pop	{r4, pc}
 800d700:	5ccc      	ldrb	r4, [r1, r3]
 800d702:	54c4      	strb	r4, [r0, r3]
 800d704:	3301      	adds	r3, #1
 800d706:	e7f8      	b.n	800d6fa <memcpy+0x4>

0800d708 <nan>:
 800d708:	2000      	movs	r0, #0
 800d70a:	4901      	ldr	r1, [pc, #4]	@ (800d710 <nan+0x8>)
 800d70c:	4770      	bx	lr
 800d70e:	46c0      	nop			@ (mov r8, r8)
 800d710:	7ff80000 	.word	0x7ff80000

0800d714 <_free_r>:
 800d714:	b570      	push	{r4, r5, r6, lr}
 800d716:	0005      	movs	r5, r0
 800d718:	1e0c      	subs	r4, r1, #0
 800d71a:	d010      	beq.n	800d73e <_free_r+0x2a>
 800d71c:	3c04      	subs	r4, #4
 800d71e:	6823      	ldr	r3, [r4, #0]
 800d720:	2b00      	cmp	r3, #0
 800d722:	da00      	bge.n	800d726 <_free_r+0x12>
 800d724:	18e4      	adds	r4, r4, r3
 800d726:	0028      	movs	r0, r5
 800d728:	f000 fc4c 	bl	800dfc4 <__malloc_lock>
 800d72c:	4a1d      	ldr	r2, [pc, #116]	@ (800d7a4 <_free_r+0x90>)
 800d72e:	6813      	ldr	r3, [r2, #0]
 800d730:	2b00      	cmp	r3, #0
 800d732:	d105      	bne.n	800d740 <_free_r+0x2c>
 800d734:	6063      	str	r3, [r4, #4]
 800d736:	6014      	str	r4, [r2, #0]
 800d738:	0028      	movs	r0, r5
 800d73a:	f000 fc4b 	bl	800dfd4 <__malloc_unlock>
 800d73e:	bd70      	pop	{r4, r5, r6, pc}
 800d740:	42a3      	cmp	r3, r4
 800d742:	d908      	bls.n	800d756 <_free_r+0x42>
 800d744:	6820      	ldr	r0, [r4, #0]
 800d746:	1821      	adds	r1, r4, r0
 800d748:	428b      	cmp	r3, r1
 800d74a:	d1f3      	bne.n	800d734 <_free_r+0x20>
 800d74c:	6819      	ldr	r1, [r3, #0]
 800d74e:	685b      	ldr	r3, [r3, #4]
 800d750:	1809      	adds	r1, r1, r0
 800d752:	6021      	str	r1, [r4, #0]
 800d754:	e7ee      	b.n	800d734 <_free_r+0x20>
 800d756:	001a      	movs	r2, r3
 800d758:	685b      	ldr	r3, [r3, #4]
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d001      	beq.n	800d762 <_free_r+0x4e>
 800d75e:	42a3      	cmp	r3, r4
 800d760:	d9f9      	bls.n	800d756 <_free_r+0x42>
 800d762:	6811      	ldr	r1, [r2, #0]
 800d764:	1850      	adds	r0, r2, r1
 800d766:	42a0      	cmp	r0, r4
 800d768:	d10b      	bne.n	800d782 <_free_r+0x6e>
 800d76a:	6820      	ldr	r0, [r4, #0]
 800d76c:	1809      	adds	r1, r1, r0
 800d76e:	1850      	adds	r0, r2, r1
 800d770:	6011      	str	r1, [r2, #0]
 800d772:	4283      	cmp	r3, r0
 800d774:	d1e0      	bne.n	800d738 <_free_r+0x24>
 800d776:	6818      	ldr	r0, [r3, #0]
 800d778:	685b      	ldr	r3, [r3, #4]
 800d77a:	1841      	adds	r1, r0, r1
 800d77c:	6011      	str	r1, [r2, #0]
 800d77e:	6053      	str	r3, [r2, #4]
 800d780:	e7da      	b.n	800d738 <_free_r+0x24>
 800d782:	42a0      	cmp	r0, r4
 800d784:	d902      	bls.n	800d78c <_free_r+0x78>
 800d786:	230c      	movs	r3, #12
 800d788:	602b      	str	r3, [r5, #0]
 800d78a:	e7d5      	b.n	800d738 <_free_r+0x24>
 800d78c:	6820      	ldr	r0, [r4, #0]
 800d78e:	1821      	adds	r1, r4, r0
 800d790:	428b      	cmp	r3, r1
 800d792:	d103      	bne.n	800d79c <_free_r+0x88>
 800d794:	6819      	ldr	r1, [r3, #0]
 800d796:	685b      	ldr	r3, [r3, #4]
 800d798:	1809      	adds	r1, r1, r0
 800d79a:	6021      	str	r1, [r4, #0]
 800d79c:	6063      	str	r3, [r4, #4]
 800d79e:	6054      	str	r4, [r2, #4]
 800d7a0:	e7ca      	b.n	800d738 <_free_r+0x24>
 800d7a2:	46c0      	nop			@ (mov r8, r8)
 800d7a4:	20001f94 	.word	0x20001f94

0800d7a8 <rshift>:
 800d7a8:	0002      	movs	r2, r0
 800d7aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d7ac:	6904      	ldr	r4, [r0, #16]
 800d7ae:	b085      	sub	sp, #20
 800d7b0:	3214      	adds	r2, #20
 800d7b2:	114b      	asrs	r3, r1, #5
 800d7b4:	0016      	movs	r6, r2
 800d7b6:	9302      	str	r3, [sp, #8]
 800d7b8:	429c      	cmp	r4, r3
 800d7ba:	dd31      	ble.n	800d820 <rshift+0x78>
 800d7bc:	261f      	movs	r6, #31
 800d7be:	000f      	movs	r7, r1
 800d7c0:	009b      	lsls	r3, r3, #2
 800d7c2:	00a5      	lsls	r5, r4, #2
 800d7c4:	18d3      	adds	r3, r2, r3
 800d7c6:	4037      	ands	r7, r6
 800d7c8:	1955      	adds	r5, r2, r5
 800d7ca:	9300      	str	r3, [sp, #0]
 800d7cc:	9701      	str	r7, [sp, #4]
 800d7ce:	4231      	tst	r1, r6
 800d7d0:	d10d      	bne.n	800d7ee <rshift+0x46>
 800d7d2:	0016      	movs	r6, r2
 800d7d4:	0019      	movs	r1, r3
 800d7d6:	428d      	cmp	r5, r1
 800d7d8:	d836      	bhi.n	800d848 <rshift+0xa0>
 800d7da:	9b00      	ldr	r3, [sp, #0]
 800d7dc:	2600      	movs	r6, #0
 800d7de:	3b03      	subs	r3, #3
 800d7e0:	429d      	cmp	r5, r3
 800d7e2:	d302      	bcc.n	800d7ea <rshift+0x42>
 800d7e4:	9b02      	ldr	r3, [sp, #8]
 800d7e6:	1ae4      	subs	r4, r4, r3
 800d7e8:	00a6      	lsls	r6, r4, #2
 800d7ea:	1996      	adds	r6, r2, r6
 800d7ec:	e018      	b.n	800d820 <rshift+0x78>
 800d7ee:	2120      	movs	r1, #32
 800d7f0:	9e01      	ldr	r6, [sp, #4]
 800d7f2:	9f01      	ldr	r7, [sp, #4]
 800d7f4:	1b89      	subs	r1, r1, r6
 800d7f6:	9e00      	ldr	r6, [sp, #0]
 800d7f8:	9103      	str	r1, [sp, #12]
 800d7fa:	ce02      	ldmia	r6!, {r1}
 800d7fc:	4694      	mov	ip, r2
 800d7fe:	40f9      	lsrs	r1, r7
 800d800:	42b5      	cmp	r5, r6
 800d802:	d816      	bhi.n	800d832 <rshift+0x8a>
 800d804:	9b00      	ldr	r3, [sp, #0]
 800d806:	2600      	movs	r6, #0
 800d808:	3301      	adds	r3, #1
 800d80a:	429d      	cmp	r5, r3
 800d80c:	d303      	bcc.n	800d816 <rshift+0x6e>
 800d80e:	9b02      	ldr	r3, [sp, #8]
 800d810:	1ae4      	subs	r4, r4, r3
 800d812:	00a6      	lsls	r6, r4, #2
 800d814:	3e04      	subs	r6, #4
 800d816:	1996      	adds	r6, r2, r6
 800d818:	6031      	str	r1, [r6, #0]
 800d81a:	2900      	cmp	r1, #0
 800d81c:	d000      	beq.n	800d820 <rshift+0x78>
 800d81e:	3604      	adds	r6, #4
 800d820:	1ab1      	subs	r1, r6, r2
 800d822:	1089      	asrs	r1, r1, #2
 800d824:	6101      	str	r1, [r0, #16]
 800d826:	4296      	cmp	r6, r2
 800d828:	d101      	bne.n	800d82e <rshift+0x86>
 800d82a:	2300      	movs	r3, #0
 800d82c:	6143      	str	r3, [r0, #20]
 800d82e:	b005      	add	sp, #20
 800d830:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d832:	6837      	ldr	r7, [r6, #0]
 800d834:	9b03      	ldr	r3, [sp, #12]
 800d836:	409f      	lsls	r7, r3
 800d838:	430f      	orrs	r7, r1
 800d83a:	4661      	mov	r1, ip
 800d83c:	c180      	stmia	r1!, {r7}
 800d83e:	468c      	mov	ip, r1
 800d840:	9b01      	ldr	r3, [sp, #4]
 800d842:	ce02      	ldmia	r6!, {r1}
 800d844:	40d9      	lsrs	r1, r3
 800d846:	e7db      	b.n	800d800 <rshift+0x58>
 800d848:	c980      	ldmia	r1!, {r7}
 800d84a:	c680      	stmia	r6!, {r7}
 800d84c:	e7c3      	b.n	800d7d6 <rshift+0x2e>

0800d84e <__hexdig_fun>:
 800d84e:	0002      	movs	r2, r0
 800d850:	3a30      	subs	r2, #48	@ 0x30
 800d852:	0003      	movs	r3, r0
 800d854:	2a09      	cmp	r2, #9
 800d856:	d802      	bhi.n	800d85e <__hexdig_fun+0x10>
 800d858:	3b20      	subs	r3, #32
 800d85a:	b2d8      	uxtb	r0, r3
 800d85c:	4770      	bx	lr
 800d85e:	0002      	movs	r2, r0
 800d860:	3a61      	subs	r2, #97	@ 0x61
 800d862:	2a05      	cmp	r2, #5
 800d864:	d801      	bhi.n	800d86a <__hexdig_fun+0x1c>
 800d866:	3b47      	subs	r3, #71	@ 0x47
 800d868:	e7f7      	b.n	800d85a <__hexdig_fun+0xc>
 800d86a:	001a      	movs	r2, r3
 800d86c:	3a41      	subs	r2, #65	@ 0x41
 800d86e:	2000      	movs	r0, #0
 800d870:	2a05      	cmp	r2, #5
 800d872:	d8f3      	bhi.n	800d85c <__hexdig_fun+0xe>
 800d874:	3b27      	subs	r3, #39	@ 0x27
 800d876:	e7f0      	b.n	800d85a <__hexdig_fun+0xc>

0800d878 <__gethex>:
 800d878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d87a:	b089      	sub	sp, #36	@ 0x24
 800d87c:	9307      	str	r3, [sp, #28]
 800d87e:	680b      	ldr	r3, [r1, #0]
 800d880:	9201      	str	r2, [sp, #4]
 800d882:	9003      	str	r0, [sp, #12]
 800d884:	9106      	str	r1, [sp, #24]
 800d886:	1c9a      	adds	r2, r3, #2
 800d888:	0011      	movs	r1, r2
 800d88a:	3201      	adds	r2, #1
 800d88c:	1e50      	subs	r0, r2, #1
 800d88e:	7800      	ldrb	r0, [r0, #0]
 800d890:	2830      	cmp	r0, #48	@ 0x30
 800d892:	d0f9      	beq.n	800d888 <__gethex+0x10>
 800d894:	1acb      	subs	r3, r1, r3
 800d896:	3b02      	subs	r3, #2
 800d898:	9305      	str	r3, [sp, #20]
 800d89a:	9100      	str	r1, [sp, #0]
 800d89c:	f7ff ffd7 	bl	800d84e <__hexdig_fun>
 800d8a0:	2300      	movs	r3, #0
 800d8a2:	001d      	movs	r5, r3
 800d8a4:	9302      	str	r3, [sp, #8]
 800d8a6:	4298      	cmp	r0, r3
 800d8a8:	d11e      	bne.n	800d8e8 <__gethex+0x70>
 800d8aa:	2201      	movs	r2, #1
 800d8ac:	49a6      	ldr	r1, [pc, #664]	@ (800db48 <__gethex+0x2d0>)
 800d8ae:	9800      	ldr	r0, [sp, #0]
 800d8b0:	f7ff fe94 	bl	800d5dc <strncmp>
 800d8b4:	0007      	movs	r7, r0
 800d8b6:	42a8      	cmp	r0, r5
 800d8b8:	d000      	beq.n	800d8bc <__gethex+0x44>
 800d8ba:	e06a      	b.n	800d992 <__gethex+0x11a>
 800d8bc:	9b00      	ldr	r3, [sp, #0]
 800d8be:	7858      	ldrb	r0, [r3, #1]
 800d8c0:	1c5c      	adds	r4, r3, #1
 800d8c2:	f7ff ffc4 	bl	800d84e <__hexdig_fun>
 800d8c6:	2301      	movs	r3, #1
 800d8c8:	9302      	str	r3, [sp, #8]
 800d8ca:	42a8      	cmp	r0, r5
 800d8cc:	d02f      	beq.n	800d92e <__gethex+0xb6>
 800d8ce:	9400      	str	r4, [sp, #0]
 800d8d0:	9b00      	ldr	r3, [sp, #0]
 800d8d2:	7818      	ldrb	r0, [r3, #0]
 800d8d4:	2830      	cmp	r0, #48	@ 0x30
 800d8d6:	d009      	beq.n	800d8ec <__gethex+0x74>
 800d8d8:	f7ff ffb9 	bl	800d84e <__hexdig_fun>
 800d8dc:	4242      	negs	r2, r0
 800d8de:	4142      	adcs	r2, r0
 800d8e0:	2301      	movs	r3, #1
 800d8e2:	0025      	movs	r5, r4
 800d8e4:	9202      	str	r2, [sp, #8]
 800d8e6:	9305      	str	r3, [sp, #20]
 800d8e8:	9c00      	ldr	r4, [sp, #0]
 800d8ea:	e004      	b.n	800d8f6 <__gethex+0x7e>
 800d8ec:	9b00      	ldr	r3, [sp, #0]
 800d8ee:	3301      	adds	r3, #1
 800d8f0:	9300      	str	r3, [sp, #0]
 800d8f2:	e7ed      	b.n	800d8d0 <__gethex+0x58>
 800d8f4:	3401      	adds	r4, #1
 800d8f6:	7820      	ldrb	r0, [r4, #0]
 800d8f8:	f7ff ffa9 	bl	800d84e <__hexdig_fun>
 800d8fc:	1e07      	subs	r7, r0, #0
 800d8fe:	d1f9      	bne.n	800d8f4 <__gethex+0x7c>
 800d900:	2201      	movs	r2, #1
 800d902:	0020      	movs	r0, r4
 800d904:	4990      	ldr	r1, [pc, #576]	@ (800db48 <__gethex+0x2d0>)
 800d906:	f7ff fe69 	bl	800d5dc <strncmp>
 800d90a:	2800      	cmp	r0, #0
 800d90c:	d10d      	bne.n	800d92a <__gethex+0xb2>
 800d90e:	2d00      	cmp	r5, #0
 800d910:	d106      	bne.n	800d920 <__gethex+0xa8>
 800d912:	3401      	adds	r4, #1
 800d914:	0025      	movs	r5, r4
 800d916:	7820      	ldrb	r0, [r4, #0]
 800d918:	f7ff ff99 	bl	800d84e <__hexdig_fun>
 800d91c:	2800      	cmp	r0, #0
 800d91e:	d102      	bne.n	800d926 <__gethex+0xae>
 800d920:	1b2d      	subs	r5, r5, r4
 800d922:	00af      	lsls	r7, r5, #2
 800d924:	e003      	b.n	800d92e <__gethex+0xb6>
 800d926:	3401      	adds	r4, #1
 800d928:	e7f5      	b.n	800d916 <__gethex+0x9e>
 800d92a:	2d00      	cmp	r5, #0
 800d92c:	d1f8      	bne.n	800d920 <__gethex+0xa8>
 800d92e:	2220      	movs	r2, #32
 800d930:	7823      	ldrb	r3, [r4, #0]
 800d932:	0026      	movs	r6, r4
 800d934:	4393      	bics	r3, r2
 800d936:	2b50      	cmp	r3, #80	@ 0x50
 800d938:	d11d      	bne.n	800d976 <__gethex+0xfe>
 800d93a:	7863      	ldrb	r3, [r4, #1]
 800d93c:	2b2b      	cmp	r3, #43	@ 0x2b
 800d93e:	d02d      	beq.n	800d99c <__gethex+0x124>
 800d940:	2b2d      	cmp	r3, #45	@ 0x2d
 800d942:	d02f      	beq.n	800d9a4 <__gethex+0x12c>
 800d944:	2300      	movs	r3, #0
 800d946:	1c66      	adds	r6, r4, #1
 800d948:	9304      	str	r3, [sp, #16]
 800d94a:	7830      	ldrb	r0, [r6, #0]
 800d94c:	f7ff ff7f 	bl	800d84e <__hexdig_fun>
 800d950:	1e43      	subs	r3, r0, #1
 800d952:	b2db      	uxtb	r3, r3
 800d954:	0005      	movs	r5, r0
 800d956:	2b18      	cmp	r3, #24
 800d958:	d82a      	bhi.n	800d9b0 <__gethex+0x138>
 800d95a:	7870      	ldrb	r0, [r6, #1]
 800d95c:	f7ff ff77 	bl	800d84e <__hexdig_fun>
 800d960:	1e43      	subs	r3, r0, #1
 800d962:	b2db      	uxtb	r3, r3
 800d964:	3601      	adds	r6, #1
 800d966:	3d10      	subs	r5, #16
 800d968:	2b18      	cmp	r3, #24
 800d96a:	d91d      	bls.n	800d9a8 <__gethex+0x130>
 800d96c:	9b04      	ldr	r3, [sp, #16]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d000      	beq.n	800d974 <__gethex+0xfc>
 800d972:	426d      	negs	r5, r5
 800d974:	197f      	adds	r7, r7, r5
 800d976:	9b06      	ldr	r3, [sp, #24]
 800d978:	601e      	str	r6, [r3, #0]
 800d97a:	9b02      	ldr	r3, [sp, #8]
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d019      	beq.n	800d9b4 <__gethex+0x13c>
 800d980:	9b05      	ldr	r3, [sp, #20]
 800d982:	2606      	movs	r6, #6
 800d984:	425a      	negs	r2, r3
 800d986:	4153      	adcs	r3, r2
 800d988:	425b      	negs	r3, r3
 800d98a:	401e      	ands	r6, r3
 800d98c:	0030      	movs	r0, r6
 800d98e:	b009      	add	sp, #36	@ 0x24
 800d990:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d992:	2301      	movs	r3, #1
 800d994:	2700      	movs	r7, #0
 800d996:	9c00      	ldr	r4, [sp, #0]
 800d998:	9302      	str	r3, [sp, #8]
 800d99a:	e7c8      	b.n	800d92e <__gethex+0xb6>
 800d99c:	2300      	movs	r3, #0
 800d99e:	9304      	str	r3, [sp, #16]
 800d9a0:	1ca6      	adds	r6, r4, #2
 800d9a2:	e7d2      	b.n	800d94a <__gethex+0xd2>
 800d9a4:	2301      	movs	r3, #1
 800d9a6:	e7fa      	b.n	800d99e <__gethex+0x126>
 800d9a8:	230a      	movs	r3, #10
 800d9aa:	435d      	muls	r5, r3
 800d9ac:	182d      	adds	r5, r5, r0
 800d9ae:	e7d4      	b.n	800d95a <__gethex+0xe2>
 800d9b0:	0026      	movs	r6, r4
 800d9b2:	e7e0      	b.n	800d976 <__gethex+0xfe>
 800d9b4:	9b00      	ldr	r3, [sp, #0]
 800d9b6:	9902      	ldr	r1, [sp, #8]
 800d9b8:	1ae3      	subs	r3, r4, r3
 800d9ba:	3b01      	subs	r3, #1
 800d9bc:	2b07      	cmp	r3, #7
 800d9be:	dc0a      	bgt.n	800d9d6 <__gethex+0x15e>
 800d9c0:	9803      	ldr	r0, [sp, #12]
 800d9c2:	f000 fb0f 	bl	800dfe4 <_Balloc>
 800d9c6:	1e05      	subs	r5, r0, #0
 800d9c8:	d108      	bne.n	800d9dc <__gethex+0x164>
 800d9ca:	002a      	movs	r2, r5
 800d9cc:	21e4      	movs	r1, #228	@ 0xe4
 800d9ce:	4b5f      	ldr	r3, [pc, #380]	@ (800db4c <__gethex+0x2d4>)
 800d9d0:	485f      	ldr	r0, [pc, #380]	@ (800db50 <__gethex+0x2d8>)
 800d9d2:	f001 fd83 	bl	800f4dc <__assert_func>
 800d9d6:	3101      	adds	r1, #1
 800d9d8:	105b      	asrs	r3, r3, #1
 800d9da:	e7ef      	b.n	800d9bc <__gethex+0x144>
 800d9dc:	0003      	movs	r3, r0
 800d9de:	3314      	adds	r3, #20
 800d9e0:	9302      	str	r3, [sp, #8]
 800d9e2:	9305      	str	r3, [sp, #20]
 800d9e4:	2300      	movs	r3, #0
 800d9e6:	001e      	movs	r6, r3
 800d9e8:	9304      	str	r3, [sp, #16]
 800d9ea:	9b00      	ldr	r3, [sp, #0]
 800d9ec:	42a3      	cmp	r3, r4
 800d9ee:	d338      	bcc.n	800da62 <__gethex+0x1ea>
 800d9f0:	9c05      	ldr	r4, [sp, #20]
 800d9f2:	9b02      	ldr	r3, [sp, #8]
 800d9f4:	c440      	stmia	r4!, {r6}
 800d9f6:	1ae4      	subs	r4, r4, r3
 800d9f8:	10a4      	asrs	r4, r4, #2
 800d9fa:	0030      	movs	r0, r6
 800d9fc:	612c      	str	r4, [r5, #16]
 800d9fe:	f000 fbe9 	bl	800e1d4 <__hi0bits>
 800da02:	9b01      	ldr	r3, [sp, #4]
 800da04:	0164      	lsls	r4, r4, #5
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	1a26      	subs	r6, r4, r0
 800da0a:	9300      	str	r3, [sp, #0]
 800da0c:	429e      	cmp	r6, r3
 800da0e:	dd52      	ble.n	800dab6 <__gethex+0x23e>
 800da10:	1af6      	subs	r6, r6, r3
 800da12:	0031      	movs	r1, r6
 800da14:	0028      	movs	r0, r5
 800da16:	f000 ff8c 	bl	800e932 <__any_on>
 800da1a:	1e04      	subs	r4, r0, #0
 800da1c:	d00f      	beq.n	800da3e <__gethex+0x1c6>
 800da1e:	2401      	movs	r4, #1
 800da20:	231f      	movs	r3, #31
 800da22:	0020      	movs	r0, r4
 800da24:	1e72      	subs	r2, r6, #1
 800da26:	4013      	ands	r3, r2
 800da28:	4098      	lsls	r0, r3
 800da2a:	0003      	movs	r3, r0
 800da2c:	1151      	asrs	r1, r2, #5
 800da2e:	9802      	ldr	r0, [sp, #8]
 800da30:	0089      	lsls	r1, r1, #2
 800da32:	5809      	ldr	r1, [r1, r0]
 800da34:	4219      	tst	r1, r3
 800da36:	d002      	beq.n	800da3e <__gethex+0x1c6>
 800da38:	42a2      	cmp	r2, r4
 800da3a:	dc34      	bgt.n	800daa6 <__gethex+0x22e>
 800da3c:	2402      	movs	r4, #2
 800da3e:	0031      	movs	r1, r6
 800da40:	0028      	movs	r0, r5
 800da42:	f7ff feb1 	bl	800d7a8 <rshift>
 800da46:	19bf      	adds	r7, r7, r6
 800da48:	9b01      	ldr	r3, [sp, #4]
 800da4a:	689b      	ldr	r3, [r3, #8]
 800da4c:	42bb      	cmp	r3, r7
 800da4e:	da42      	bge.n	800dad6 <__gethex+0x25e>
 800da50:	0029      	movs	r1, r5
 800da52:	9803      	ldr	r0, [sp, #12]
 800da54:	f000 fb0a 	bl	800e06c <_Bfree>
 800da58:	2300      	movs	r3, #0
 800da5a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800da5c:	26a3      	movs	r6, #163	@ 0xa3
 800da5e:	6013      	str	r3, [r2, #0]
 800da60:	e794      	b.n	800d98c <__gethex+0x114>
 800da62:	3c01      	subs	r4, #1
 800da64:	7823      	ldrb	r3, [r4, #0]
 800da66:	2b2e      	cmp	r3, #46	@ 0x2e
 800da68:	d012      	beq.n	800da90 <__gethex+0x218>
 800da6a:	9b04      	ldr	r3, [sp, #16]
 800da6c:	2b20      	cmp	r3, #32
 800da6e:	d104      	bne.n	800da7a <__gethex+0x202>
 800da70:	9b05      	ldr	r3, [sp, #20]
 800da72:	c340      	stmia	r3!, {r6}
 800da74:	2600      	movs	r6, #0
 800da76:	9305      	str	r3, [sp, #20]
 800da78:	9604      	str	r6, [sp, #16]
 800da7a:	7820      	ldrb	r0, [r4, #0]
 800da7c:	f7ff fee7 	bl	800d84e <__hexdig_fun>
 800da80:	230f      	movs	r3, #15
 800da82:	4018      	ands	r0, r3
 800da84:	9b04      	ldr	r3, [sp, #16]
 800da86:	4098      	lsls	r0, r3
 800da88:	3304      	adds	r3, #4
 800da8a:	4306      	orrs	r6, r0
 800da8c:	9304      	str	r3, [sp, #16]
 800da8e:	e7ac      	b.n	800d9ea <__gethex+0x172>
 800da90:	9b00      	ldr	r3, [sp, #0]
 800da92:	42a3      	cmp	r3, r4
 800da94:	d8e9      	bhi.n	800da6a <__gethex+0x1f2>
 800da96:	2201      	movs	r2, #1
 800da98:	0020      	movs	r0, r4
 800da9a:	492b      	ldr	r1, [pc, #172]	@ (800db48 <__gethex+0x2d0>)
 800da9c:	f7ff fd9e 	bl	800d5dc <strncmp>
 800daa0:	2800      	cmp	r0, #0
 800daa2:	d1e2      	bne.n	800da6a <__gethex+0x1f2>
 800daa4:	e7a1      	b.n	800d9ea <__gethex+0x172>
 800daa6:	0028      	movs	r0, r5
 800daa8:	1eb1      	subs	r1, r6, #2
 800daaa:	f000 ff42 	bl	800e932 <__any_on>
 800daae:	2800      	cmp	r0, #0
 800dab0:	d0c4      	beq.n	800da3c <__gethex+0x1c4>
 800dab2:	2403      	movs	r4, #3
 800dab4:	e7c3      	b.n	800da3e <__gethex+0x1c6>
 800dab6:	9b00      	ldr	r3, [sp, #0]
 800dab8:	2400      	movs	r4, #0
 800daba:	429e      	cmp	r6, r3
 800dabc:	dac4      	bge.n	800da48 <__gethex+0x1d0>
 800dabe:	1b9e      	subs	r6, r3, r6
 800dac0:	0029      	movs	r1, r5
 800dac2:	0032      	movs	r2, r6
 800dac4:	9803      	ldr	r0, [sp, #12]
 800dac6:	f000 fcfb 	bl	800e4c0 <__lshift>
 800daca:	0003      	movs	r3, r0
 800dacc:	3314      	adds	r3, #20
 800dace:	0005      	movs	r5, r0
 800dad0:	1bbf      	subs	r7, r7, r6
 800dad2:	9302      	str	r3, [sp, #8]
 800dad4:	e7b8      	b.n	800da48 <__gethex+0x1d0>
 800dad6:	9b01      	ldr	r3, [sp, #4]
 800dad8:	685e      	ldr	r6, [r3, #4]
 800dada:	42be      	cmp	r6, r7
 800dadc:	dd6f      	ble.n	800dbbe <__gethex+0x346>
 800dade:	9b00      	ldr	r3, [sp, #0]
 800dae0:	1bf6      	subs	r6, r6, r7
 800dae2:	42b3      	cmp	r3, r6
 800dae4:	dc36      	bgt.n	800db54 <__gethex+0x2dc>
 800dae6:	9b01      	ldr	r3, [sp, #4]
 800dae8:	68db      	ldr	r3, [r3, #12]
 800daea:	2b02      	cmp	r3, #2
 800daec:	d024      	beq.n	800db38 <__gethex+0x2c0>
 800daee:	2b03      	cmp	r3, #3
 800daf0:	d026      	beq.n	800db40 <__gethex+0x2c8>
 800daf2:	2b01      	cmp	r3, #1
 800daf4:	d117      	bne.n	800db26 <__gethex+0x2ae>
 800daf6:	9b00      	ldr	r3, [sp, #0]
 800daf8:	42b3      	cmp	r3, r6
 800dafa:	d114      	bne.n	800db26 <__gethex+0x2ae>
 800dafc:	2b01      	cmp	r3, #1
 800dafe:	d10b      	bne.n	800db18 <__gethex+0x2a0>
 800db00:	9b01      	ldr	r3, [sp, #4]
 800db02:	9a07      	ldr	r2, [sp, #28]
 800db04:	685b      	ldr	r3, [r3, #4]
 800db06:	2662      	movs	r6, #98	@ 0x62
 800db08:	6013      	str	r3, [r2, #0]
 800db0a:	2301      	movs	r3, #1
 800db0c:	9a02      	ldr	r2, [sp, #8]
 800db0e:	612b      	str	r3, [r5, #16]
 800db10:	6013      	str	r3, [r2, #0]
 800db12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800db14:	601d      	str	r5, [r3, #0]
 800db16:	e739      	b.n	800d98c <__gethex+0x114>
 800db18:	9900      	ldr	r1, [sp, #0]
 800db1a:	0028      	movs	r0, r5
 800db1c:	3901      	subs	r1, #1
 800db1e:	f000 ff08 	bl	800e932 <__any_on>
 800db22:	2800      	cmp	r0, #0
 800db24:	d1ec      	bne.n	800db00 <__gethex+0x288>
 800db26:	0029      	movs	r1, r5
 800db28:	9803      	ldr	r0, [sp, #12]
 800db2a:	f000 fa9f 	bl	800e06c <_Bfree>
 800db2e:	2300      	movs	r3, #0
 800db30:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800db32:	2650      	movs	r6, #80	@ 0x50
 800db34:	6013      	str	r3, [r2, #0]
 800db36:	e729      	b.n	800d98c <__gethex+0x114>
 800db38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d1f3      	bne.n	800db26 <__gethex+0x2ae>
 800db3e:	e7df      	b.n	800db00 <__gethex+0x288>
 800db40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800db42:	2b00      	cmp	r3, #0
 800db44:	d1dc      	bne.n	800db00 <__gethex+0x288>
 800db46:	e7ee      	b.n	800db26 <__gethex+0x2ae>
 800db48:	08010780 	.word	0x08010780
 800db4c:	080108e9 	.word	0x080108e9
 800db50:	080108fa 	.word	0x080108fa
 800db54:	1e77      	subs	r7, r6, #1
 800db56:	2c00      	cmp	r4, #0
 800db58:	d12f      	bne.n	800dbba <__gethex+0x342>
 800db5a:	2f00      	cmp	r7, #0
 800db5c:	d004      	beq.n	800db68 <__gethex+0x2f0>
 800db5e:	0039      	movs	r1, r7
 800db60:	0028      	movs	r0, r5
 800db62:	f000 fee6 	bl	800e932 <__any_on>
 800db66:	0004      	movs	r4, r0
 800db68:	231f      	movs	r3, #31
 800db6a:	117a      	asrs	r2, r7, #5
 800db6c:	401f      	ands	r7, r3
 800db6e:	3b1e      	subs	r3, #30
 800db70:	40bb      	lsls	r3, r7
 800db72:	9902      	ldr	r1, [sp, #8]
 800db74:	0092      	lsls	r2, r2, #2
 800db76:	5852      	ldr	r2, [r2, r1]
 800db78:	421a      	tst	r2, r3
 800db7a:	d001      	beq.n	800db80 <__gethex+0x308>
 800db7c:	2302      	movs	r3, #2
 800db7e:	431c      	orrs	r4, r3
 800db80:	9b00      	ldr	r3, [sp, #0]
 800db82:	0031      	movs	r1, r6
 800db84:	1b9b      	subs	r3, r3, r6
 800db86:	2602      	movs	r6, #2
 800db88:	0028      	movs	r0, r5
 800db8a:	9300      	str	r3, [sp, #0]
 800db8c:	f7ff fe0c 	bl	800d7a8 <rshift>
 800db90:	9b01      	ldr	r3, [sp, #4]
 800db92:	685f      	ldr	r7, [r3, #4]
 800db94:	2c00      	cmp	r4, #0
 800db96:	d03f      	beq.n	800dc18 <__gethex+0x3a0>
 800db98:	9b01      	ldr	r3, [sp, #4]
 800db9a:	68db      	ldr	r3, [r3, #12]
 800db9c:	2b02      	cmp	r3, #2
 800db9e:	d010      	beq.n	800dbc2 <__gethex+0x34a>
 800dba0:	2b03      	cmp	r3, #3
 800dba2:	d012      	beq.n	800dbca <__gethex+0x352>
 800dba4:	2b01      	cmp	r3, #1
 800dba6:	d106      	bne.n	800dbb6 <__gethex+0x33e>
 800dba8:	07a2      	lsls	r2, r4, #30
 800dbaa:	d504      	bpl.n	800dbb6 <__gethex+0x33e>
 800dbac:	9a02      	ldr	r2, [sp, #8]
 800dbae:	6812      	ldr	r2, [r2, #0]
 800dbb0:	4314      	orrs	r4, r2
 800dbb2:	421c      	tst	r4, r3
 800dbb4:	d10c      	bne.n	800dbd0 <__gethex+0x358>
 800dbb6:	2310      	movs	r3, #16
 800dbb8:	e02d      	b.n	800dc16 <__gethex+0x39e>
 800dbba:	2401      	movs	r4, #1
 800dbbc:	e7d4      	b.n	800db68 <__gethex+0x2f0>
 800dbbe:	2601      	movs	r6, #1
 800dbc0:	e7e8      	b.n	800db94 <__gethex+0x31c>
 800dbc2:	2301      	movs	r3, #1
 800dbc4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800dbc6:	1a9b      	subs	r3, r3, r2
 800dbc8:	930f      	str	r3, [sp, #60]	@ 0x3c
 800dbca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d0f2      	beq.n	800dbb6 <__gethex+0x33e>
 800dbd0:	692b      	ldr	r3, [r5, #16]
 800dbd2:	2000      	movs	r0, #0
 800dbd4:	9302      	str	r3, [sp, #8]
 800dbd6:	009b      	lsls	r3, r3, #2
 800dbd8:	9304      	str	r3, [sp, #16]
 800dbda:	002b      	movs	r3, r5
 800dbdc:	9a04      	ldr	r2, [sp, #16]
 800dbde:	3314      	adds	r3, #20
 800dbe0:	1899      	adds	r1, r3, r2
 800dbe2:	681a      	ldr	r2, [r3, #0]
 800dbe4:	1c54      	adds	r4, r2, #1
 800dbe6:	d01c      	beq.n	800dc22 <__gethex+0x3aa>
 800dbe8:	3201      	adds	r2, #1
 800dbea:	601a      	str	r2, [r3, #0]
 800dbec:	002b      	movs	r3, r5
 800dbee:	3314      	adds	r3, #20
 800dbf0:	2e02      	cmp	r6, #2
 800dbf2:	d13f      	bne.n	800dc74 <__gethex+0x3fc>
 800dbf4:	9a01      	ldr	r2, [sp, #4]
 800dbf6:	9900      	ldr	r1, [sp, #0]
 800dbf8:	6812      	ldr	r2, [r2, #0]
 800dbfa:	3a01      	subs	r2, #1
 800dbfc:	428a      	cmp	r2, r1
 800dbfe:	d109      	bne.n	800dc14 <__gethex+0x39c>
 800dc00:	000a      	movs	r2, r1
 800dc02:	201f      	movs	r0, #31
 800dc04:	4010      	ands	r0, r2
 800dc06:	2201      	movs	r2, #1
 800dc08:	4082      	lsls	r2, r0
 800dc0a:	1149      	asrs	r1, r1, #5
 800dc0c:	0089      	lsls	r1, r1, #2
 800dc0e:	58cb      	ldr	r3, [r1, r3]
 800dc10:	4213      	tst	r3, r2
 800dc12:	d13d      	bne.n	800dc90 <__gethex+0x418>
 800dc14:	2320      	movs	r3, #32
 800dc16:	431e      	orrs	r6, r3
 800dc18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dc1a:	601d      	str	r5, [r3, #0]
 800dc1c:	9b07      	ldr	r3, [sp, #28]
 800dc1e:	601f      	str	r7, [r3, #0]
 800dc20:	e6b4      	b.n	800d98c <__gethex+0x114>
 800dc22:	c301      	stmia	r3!, {r0}
 800dc24:	4299      	cmp	r1, r3
 800dc26:	d8dc      	bhi.n	800dbe2 <__gethex+0x36a>
 800dc28:	68ab      	ldr	r3, [r5, #8]
 800dc2a:	9a02      	ldr	r2, [sp, #8]
 800dc2c:	429a      	cmp	r2, r3
 800dc2e:	db18      	blt.n	800dc62 <__gethex+0x3ea>
 800dc30:	6869      	ldr	r1, [r5, #4]
 800dc32:	9803      	ldr	r0, [sp, #12]
 800dc34:	3101      	adds	r1, #1
 800dc36:	f000 f9d5 	bl	800dfe4 <_Balloc>
 800dc3a:	1e04      	subs	r4, r0, #0
 800dc3c:	d104      	bne.n	800dc48 <__gethex+0x3d0>
 800dc3e:	0022      	movs	r2, r4
 800dc40:	2184      	movs	r1, #132	@ 0x84
 800dc42:	4b1d      	ldr	r3, [pc, #116]	@ (800dcb8 <__gethex+0x440>)
 800dc44:	481d      	ldr	r0, [pc, #116]	@ (800dcbc <__gethex+0x444>)
 800dc46:	e6c4      	b.n	800d9d2 <__gethex+0x15a>
 800dc48:	0029      	movs	r1, r5
 800dc4a:	692a      	ldr	r2, [r5, #16]
 800dc4c:	310c      	adds	r1, #12
 800dc4e:	3202      	adds	r2, #2
 800dc50:	0092      	lsls	r2, r2, #2
 800dc52:	300c      	adds	r0, #12
 800dc54:	f7ff fd4f 	bl	800d6f6 <memcpy>
 800dc58:	0029      	movs	r1, r5
 800dc5a:	9803      	ldr	r0, [sp, #12]
 800dc5c:	f000 fa06 	bl	800e06c <_Bfree>
 800dc60:	0025      	movs	r5, r4
 800dc62:	692b      	ldr	r3, [r5, #16]
 800dc64:	1c5a      	adds	r2, r3, #1
 800dc66:	612a      	str	r2, [r5, #16]
 800dc68:	2201      	movs	r2, #1
 800dc6a:	3304      	adds	r3, #4
 800dc6c:	009b      	lsls	r3, r3, #2
 800dc6e:	18eb      	adds	r3, r5, r3
 800dc70:	605a      	str	r2, [r3, #4]
 800dc72:	e7bb      	b.n	800dbec <__gethex+0x374>
 800dc74:	692a      	ldr	r2, [r5, #16]
 800dc76:	9902      	ldr	r1, [sp, #8]
 800dc78:	428a      	cmp	r2, r1
 800dc7a:	dd0b      	ble.n	800dc94 <__gethex+0x41c>
 800dc7c:	2101      	movs	r1, #1
 800dc7e:	0028      	movs	r0, r5
 800dc80:	f7ff fd92 	bl	800d7a8 <rshift>
 800dc84:	9b01      	ldr	r3, [sp, #4]
 800dc86:	3701      	adds	r7, #1
 800dc88:	689b      	ldr	r3, [r3, #8]
 800dc8a:	42bb      	cmp	r3, r7
 800dc8c:	da00      	bge.n	800dc90 <__gethex+0x418>
 800dc8e:	e6df      	b.n	800da50 <__gethex+0x1d8>
 800dc90:	2601      	movs	r6, #1
 800dc92:	e7bf      	b.n	800dc14 <__gethex+0x39c>
 800dc94:	221f      	movs	r2, #31
 800dc96:	9c00      	ldr	r4, [sp, #0]
 800dc98:	9900      	ldr	r1, [sp, #0]
 800dc9a:	4014      	ands	r4, r2
 800dc9c:	4211      	tst	r1, r2
 800dc9e:	d0f7      	beq.n	800dc90 <__gethex+0x418>
 800dca0:	9a04      	ldr	r2, [sp, #16]
 800dca2:	189b      	adds	r3, r3, r2
 800dca4:	3b04      	subs	r3, #4
 800dca6:	6818      	ldr	r0, [r3, #0]
 800dca8:	f000 fa94 	bl	800e1d4 <__hi0bits>
 800dcac:	2320      	movs	r3, #32
 800dcae:	1b1b      	subs	r3, r3, r4
 800dcb0:	4298      	cmp	r0, r3
 800dcb2:	dbe3      	blt.n	800dc7c <__gethex+0x404>
 800dcb4:	e7ec      	b.n	800dc90 <__gethex+0x418>
 800dcb6:	46c0      	nop			@ (mov r8, r8)
 800dcb8:	080108e9 	.word	0x080108e9
 800dcbc:	080108fa 	.word	0x080108fa

0800dcc0 <L_shift>:
 800dcc0:	2308      	movs	r3, #8
 800dcc2:	b570      	push	{r4, r5, r6, lr}
 800dcc4:	2520      	movs	r5, #32
 800dcc6:	1a9a      	subs	r2, r3, r2
 800dcc8:	0092      	lsls	r2, r2, #2
 800dcca:	1aad      	subs	r5, r5, r2
 800dccc:	6843      	ldr	r3, [r0, #4]
 800dcce:	6804      	ldr	r4, [r0, #0]
 800dcd0:	001e      	movs	r6, r3
 800dcd2:	40ae      	lsls	r6, r5
 800dcd4:	40d3      	lsrs	r3, r2
 800dcd6:	4334      	orrs	r4, r6
 800dcd8:	6004      	str	r4, [r0, #0]
 800dcda:	6043      	str	r3, [r0, #4]
 800dcdc:	3004      	adds	r0, #4
 800dcde:	4288      	cmp	r0, r1
 800dce0:	d3f4      	bcc.n	800dccc <L_shift+0xc>
 800dce2:	bd70      	pop	{r4, r5, r6, pc}

0800dce4 <__match>:
 800dce4:	b530      	push	{r4, r5, lr}
 800dce6:	6803      	ldr	r3, [r0, #0]
 800dce8:	780c      	ldrb	r4, [r1, #0]
 800dcea:	3301      	adds	r3, #1
 800dcec:	2c00      	cmp	r4, #0
 800dcee:	d102      	bne.n	800dcf6 <__match+0x12>
 800dcf0:	6003      	str	r3, [r0, #0]
 800dcf2:	2001      	movs	r0, #1
 800dcf4:	bd30      	pop	{r4, r5, pc}
 800dcf6:	781a      	ldrb	r2, [r3, #0]
 800dcf8:	0015      	movs	r5, r2
 800dcfa:	3d41      	subs	r5, #65	@ 0x41
 800dcfc:	2d19      	cmp	r5, #25
 800dcfe:	d800      	bhi.n	800dd02 <__match+0x1e>
 800dd00:	3220      	adds	r2, #32
 800dd02:	3101      	adds	r1, #1
 800dd04:	42a2      	cmp	r2, r4
 800dd06:	d0ef      	beq.n	800dce8 <__match+0x4>
 800dd08:	2000      	movs	r0, #0
 800dd0a:	e7f3      	b.n	800dcf4 <__match+0x10>

0800dd0c <__hexnan>:
 800dd0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd0e:	680b      	ldr	r3, [r1, #0]
 800dd10:	b08b      	sub	sp, #44	@ 0x2c
 800dd12:	9201      	str	r2, [sp, #4]
 800dd14:	9901      	ldr	r1, [sp, #4]
 800dd16:	115a      	asrs	r2, r3, #5
 800dd18:	0092      	lsls	r2, r2, #2
 800dd1a:	188a      	adds	r2, r1, r2
 800dd1c:	9202      	str	r2, [sp, #8]
 800dd1e:	0019      	movs	r1, r3
 800dd20:	221f      	movs	r2, #31
 800dd22:	4011      	ands	r1, r2
 800dd24:	9008      	str	r0, [sp, #32]
 800dd26:	9106      	str	r1, [sp, #24]
 800dd28:	4213      	tst	r3, r2
 800dd2a:	d002      	beq.n	800dd32 <__hexnan+0x26>
 800dd2c:	9b02      	ldr	r3, [sp, #8]
 800dd2e:	3304      	adds	r3, #4
 800dd30:	9302      	str	r3, [sp, #8]
 800dd32:	9b02      	ldr	r3, [sp, #8]
 800dd34:	2500      	movs	r5, #0
 800dd36:	1f1f      	subs	r7, r3, #4
 800dd38:	003e      	movs	r6, r7
 800dd3a:	003c      	movs	r4, r7
 800dd3c:	9b08      	ldr	r3, [sp, #32]
 800dd3e:	603d      	str	r5, [r7, #0]
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	9507      	str	r5, [sp, #28]
 800dd44:	9305      	str	r3, [sp, #20]
 800dd46:	9503      	str	r5, [sp, #12]
 800dd48:	9b05      	ldr	r3, [sp, #20]
 800dd4a:	3301      	adds	r3, #1
 800dd4c:	9309      	str	r3, [sp, #36]	@ 0x24
 800dd4e:	9b05      	ldr	r3, [sp, #20]
 800dd50:	785b      	ldrb	r3, [r3, #1]
 800dd52:	9304      	str	r3, [sp, #16]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d028      	beq.n	800ddaa <__hexnan+0x9e>
 800dd58:	9804      	ldr	r0, [sp, #16]
 800dd5a:	f7ff fd78 	bl	800d84e <__hexdig_fun>
 800dd5e:	2800      	cmp	r0, #0
 800dd60:	d155      	bne.n	800de0e <__hexnan+0x102>
 800dd62:	9b04      	ldr	r3, [sp, #16]
 800dd64:	2b20      	cmp	r3, #32
 800dd66:	d819      	bhi.n	800dd9c <__hexnan+0x90>
 800dd68:	9b03      	ldr	r3, [sp, #12]
 800dd6a:	9a07      	ldr	r2, [sp, #28]
 800dd6c:	4293      	cmp	r3, r2
 800dd6e:	dd12      	ble.n	800dd96 <__hexnan+0x8a>
 800dd70:	42b4      	cmp	r4, r6
 800dd72:	d206      	bcs.n	800dd82 <__hexnan+0x76>
 800dd74:	2d07      	cmp	r5, #7
 800dd76:	dc04      	bgt.n	800dd82 <__hexnan+0x76>
 800dd78:	002a      	movs	r2, r5
 800dd7a:	0031      	movs	r1, r6
 800dd7c:	0020      	movs	r0, r4
 800dd7e:	f7ff ff9f 	bl	800dcc0 <L_shift>
 800dd82:	9b01      	ldr	r3, [sp, #4]
 800dd84:	2508      	movs	r5, #8
 800dd86:	429c      	cmp	r4, r3
 800dd88:	d905      	bls.n	800dd96 <__hexnan+0x8a>
 800dd8a:	1f26      	subs	r6, r4, #4
 800dd8c:	2500      	movs	r5, #0
 800dd8e:	0034      	movs	r4, r6
 800dd90:	9b03      	ldr	r3, [sp, #12]
 800dd92:	6035      	str	r5, [r6, #0]
 800dd94:	9307      	str	r3, [sp, #28]
 800dd96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd98:	9305      	str	r3, [sp, #20]
 800dd9a:	e7d5      	b.n	800dd48 <__hexnan+0x3c>
 800dd9c:	9b04      	ldr	r3, [sp, #16]
 800dd9e:	2b29      	cmp	r3, #41	@ 0x29
 800dda0:	d15a      	bne.n	800de58 <__hexnan+0x14c>
 800dda2:	9b05      	ldr	r3, [sp, #20]
 800dda4:	9a08      	ldr	r2, [sp, #32]
 800dda6:	3302      	adds	r3, #2
 800dda8:	6013      	str	r3, [r2, #0]
 800ddaa:	9b03      	ldr	r3, [sp, #12]
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d053      	beq.n	800de58 <__hexnan+0x14c>
 800ddb0:	42b4      	cmp	r4, r6
 800ddb2:	d206      	bcs.n	800ddc2 <__hexnan+0xb6>
 800ddb4:	2d07      	cmp	r5, #7
 800ddb6:	dc04      	bgt.n	800ddc2 <__hexnan+0xb6>
 800ddb8:	002a      	movs	r2, r5
 800ddba:	0031      	movs	r1, r6
 800ddbc:	0020      	movs	r0, r4
 800ddbe:	f7ff ff7f 	bl	800dcc0 <L_shift>
 800ddc2:	9b01      	ldr	r3, [sp, #4]
 800ddc4:	429c      	cmp	r4, r3
 800ddc6:	d936      	bls.n	800de36 <__hexnan+0x12a>
 800ddc8:	001a      	movs	r2, r3
 800ddca:	0023      	movs	r3, r4
 800ddcc:	cb02      	ldmia	r3!, {r1}
 800ddce:	c202      	stmia	r2!, {r1}
 800ddd0:	429f      	cmp	r7, r3
 800ddd2:	d2fb      	bcs.n	800ddcc <__hexnan+0xc0>
 800ddd4:	9b02      	ldr	r3, [sp, #8]
 800ddd6:	1c61      	adds	r1, r4, #1
 800ddd8:	1eda      	subs	r2, r3, #3
 800ddda:	2304      	movs	r3, #4
 800dddc:	4291      	cmp	r1, r2
 800ddde:	d805      	bhi.n	800ddec <__hexnan+0xe0>
 800dde0:	9b02      	ldr	r3, [sp, #8]
 800dde2:	3b04      	subs	r3, #4
 800dde4:	1b1b      	subs	r3, r3, r4
 800dde6:	089b      	lsrs	r3, r3, #2
 800dde8:	3301      	adds	r3, #1
 800ddea:	009b      	lsls	r3, r3, #2
 800ddec:	9a01      	ldr	r2, [sp, #4]
 800ddee:	18d3      	adds	r3, r2, r3
 800ddf0:	2200      	movs	r2, #0
 800ddf2:	c304      	stmia	r3!, {r2}
 800ddf4:	429f      	cmp	r7, r3
 800ddf6:	d2fc      	bcs.n	800ddf2 <__hexnan+0xe6>
 800ddf8:	683b      	ldr	r3, [r7, #0]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d104      	bne.n	800de08 <__hexnan+0xfc>
 800ddfe:	9b01      	ldr	r3, [sp, #4]
 800de00:	429f      	cmp	r7, r3
 800de02:	d127      	bne.n	800de54 <__hexnan+0x148>
 800de04:	2301      	movs	r3, #1
 800de06:	603b      	str	r3, [r7, #0]
 800de08:	2005      	movs	r0, #5
 800de0a:	b00b      	add	sp, #44	@ 0x2c
 800de0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de0e:	9b03      	ldr	r3, [sp, #12]
 800de10:	3501      	adds	r5, #1
 800de12:	3301      	adds	r3, #1
 800de14:	9303      	str	r3, [sp, #12]
 800de16:	2d08      	cmp	r5, #8
 800de18:	dd06      	ble.n	800de28 <__hexnan+0x11c>
 800de1a:	9b01      	ldr	r3, [sp, #4]
 800de1c:	429c      	cmp	r4, r3
 800de1e:	d9ba      	bls.n	800dd96 <__hexnan+0x8a>
 800de20:	2300      	movs	r3, #0
 800de22:	2501      	movs	r5, #1
 800de24:	3c04      	subs	r4, #4
 800de26:	6023      	str	r3, [r4, #0]
 800de28:	220f      	movs	r2, #15
 800de2a:	6823      	ldr	r3, [r4, #0]
 800de2c:	4010      	ands	r0, r2
 800de2e:	011b      	lsls	r3, r3, #4
 800de30:	4303      	orrs	r3, r0
 800de32:	6023      	str	r3, [r4, #0]
 800de34:	e7af      	b.n	800dd96 <__hexnan+0x8a>
 800de36:	9b06      	ldr	r3, [sp, #24]
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d0dd      	beq.n	800ddf8 <__hexnan+0xec>
 800de3c:	2320      	movs	r3, #32
 800de3e:	9a06      	ldr	r2, [sp, #24]
 800de40:	9902      	ldr	r1, [sp, #8]
 800de42:	1a9b      	subs	r3, r3, r2
 800de44:	2201      	movs	r2, #1
 800de46:	4252      	negs	r2, r2
 800de48:	40da      	lsrs	r2, r3
 800de4a:	3904      	subs	r1, #4
 800de4c:	680b      	ldr	r3, [r1, #0]
 800de4e:	4013      	ands	r3, r2
 800de50:	600b      	str	r3, [r1, #0]
 800de52:	e7d1      	b.n	800ddf8 <__hexnan+0xec>
 800de54:	3f04      	subs	r7, #4
 800de56:	e7cf      	b.n	800ddf8 <__hexnan+0xec>
 800de58:	2004      	movs	r0, #4
 800de5a:	e7d6      	b.n	800de0a <__hexnan+0xfe>

0800de5c <sbrk_aligned>:
 800de5c:	b570      	push	{r4, r5, r6, lr}
 800de5e:	4e0f      	ldr	r6, [pc, #60]	@ (800de9c <sbrk_aligned+0x40>)
 800de60:	000d      	movs	r5, r1
 800de62:	6831      	ldr	r1, [r6, #0]
 800de64:	0004      	movs	r4, r0
 800de66:	2900      	cmp	r1, #0
 800de68:	d102      	bne.n	800de70 <sbrk_aligned+0x14>
 800de6a:	f001 fb19 	bl	800f4a0 <_sbrk_r>
 800de6e:	6030      	str	r0, [r6, #0]
 800de70:	0029      	movs	r1, r5
 800de72:	0020      	movs	r0, r4
 800de74:	f001 fb14 	bl	800f4a0 <_sbrk_r>
 800de78:	1c43      	adds	r3, r0, #1
 800de7a:	d103      	bne.n	800de84 <sbrk_aligned+0x28>
 800de7c:	2501      	movs	r5, #1
 800de7e:	426d      	negs	r5, r5
 800de80:	0028      	movs	r0, r5
 800de82:	bd70      	pop	{r4, r5, r6, pc}
 800de84:	2303      	movs	r3, #3
 800de86:	1cc5      	adds	r5, r0, #3
 800de88:	439d      	bics	r5, r3
 800de8a:	42a8      	cmp	r0, r5
 800de8c:	d0f8      	beq.n	800de80 <sbrk_aligned+0x24>
 800de8e:	1a29      	subs	r1, r5, r0
 800de90:	0020      	movs	r0, r4
 800de92:	f001 fb05 	bl	800f4a0 <_sbrk_r>
 800de96:	3001      	adds	r0, #1
 800de98:	d1f2      	bne.n	800de80 <sbrk_aligned+0x24>
 800de9a:	e7ef      	b.n	800de7c <sbrk_aligned+0x20>
 800de9c:	20001f90 	.word	0x20001f90

0800dea0 <_malloc_r>:
 800dea0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dea2:	2203      	movs	r2, #3
 800dea4:	1ccb      	adds	r3, r1, #3
 800dea6:	4393      	bics	r3, r2
 800dea8:	3308      	adds	r3, #8
 800deaa:	0005      	movs	r5, r0
 800deac:	001f      	movs	r7, r3
 800deae:	2b0c      	cmp	r3, #12
 800deb0:	d234      	bcs.n	800df1c <_malloc_r+0x7c>
 800deb2:	270c      	movs	r7, #12
 800deb4:	42b9      	cmp	r1, r7
 800deb6:	d833      	bhi.n	800df20 <_malloc_r+0x80>
 800deb8:	0028      	movs	r0, r5
 800deba:	f000 f883 	bl	800dfc4 <__malloc_lock>
 800debe:	4e37      	ldr	r6, [pc, #220]	@ (800df9c <_malloc_r+0xfc>)
 800dec0:	6833      	ldr	r3, [r6, #0]
 800dec2:	001c      	movs	r4, r3
 800dec4:	2c00      	cmp	r4, #0
 800dec6:	d12f      	bne.n	800df28 <_malloc_r+0x88>
 800dec8:	0039      	movs	r1, r7
 800deca:	0028      	movs	r0, r5
 800decc:	f7ff ffc6 	bl	800de5c <sbrk_aligned>
 800ded0:	0004      	movs	r4, r0
 800ded2:	1c43      	adds	r3, r0, #1
 800ded4:	d15f      	bne.n	800df96 <_malloc_r+0xf6>
 800ded6:	6834      	ldr	r4, [r6, #0]
 800ded8:	9400      	str	r4, [sp, #0]
 800deda:	9b00      	ldr	r3, [sp, #0]
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d14a      	bne.n	800df76 <_malloc_r+0xd6>
 800dee0:	2c00      	cmp	r4, #0
 800dee2:	d052      	beq.n	800df8a <_malloc_r+0xea>
 800dee4:	6823      	ldr	r3, [r4, #0]
 800dee6:	0028      	movs	r0, r5
 800dee8:	18e3      	adds	r3, r4, r3
 800deea:	9900      	ldr	r1, [sp, #0]
 800deec:	9301      	str	r3, [sp, #4]
 800deee:	f001 fad7 	bl	800f4a0 <_sbrk_r>
 800def2:	9b01      	ldr	r3, [sp, #4]
 800def4:	4283      	cmp	r3, r0
 800def6:	d148      	bne.n	800df8a <_malloc_r+0xea>
 800def8:	6823      	ldr	r3, [r4, #0]
 800defa:	0028      	movs	r0, r5
 800defc:	1aff      	subs	r7, r7, r3
 800defe:	0039      	movs	r1, r7
 800df00:	f7ff ffac 	bl	800de5c <sbrk_aligned>
 800df04:	3001      	adds	r0, #1
 800df06:	d040      	beq.n	800df8a <_malloc_r+0xea>
 800df08:	6823      	ldr	r3, [r4, #0]
 800df0a:	19db      	adds	r3, r3, r7
 800df0c:	6023      	str	r3, [r4, #0]
 800df0e:	6833      	ldr	r3, [r6, #0]
 800df10:	685a      	ldr	r2, [r3, #4]
 800df12:	2a00      	cmp	r2, #0
 800df14:	d133      	bne.n	800df7e <_malloc_r+0xde>
 800df16:	9b00      	ldr	r3, [sp, #0]
 800df18:	6033      	str	r3, [r6, #0]
 800df1a:	e019      	b.n	800df50 <_malloc_r+0xb0>
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	dac9      	bge.n	800deb4 <_malloc_r+0x14>
 800df20:	230c      	movs	r3, #12
 800df22:	602b      	str	r3, [r5, #0]
 800df24:	2000      	movs	r0, #0
 800df26:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800df28:	6821      	ldr	r1, [r4, #0]
 800df2a:	1bc9      	subs	r1, r1, r7
 800df2c:	d420      	bmi.n	800df70 <_malloc_r+0xd0>
 800df2e:	290b      	cmp	r1, #11
 800df30:	d90a      	bls.n	800df48 <_malloc_r+0xa8>
 800df32:	19e2      	adds	r2, r4, r7
 800df34:	6027      	str	r7, [r4, #0]
 800df36:	42a3      	cmp	r3, r4
 800df38:	d104      	bne.n	800df44 <_malloc_r+0xa4>
 800df3a:	6032      	str	r2, [r6, #0]
 800df3c:	6863      	ldr	r3, [r4, #4]
 800df3e:	6011      	str	r1, [r2, #0]
 800df40:	6053      	str	r3, [r2, #4]
 800df42:	e005      	b.n	800df50 <_malloc_r+0xb0>
 800df44:	605a      	str	r2, [r3, #4]
 800df46:	e7f9      	b.n	800df3c <_malloc_r+0x9c>
 800df48:	6862      	ldr	r2, [r4, #4]
 800df4a:	42a3      	cmp	r3, r4
 800df4c:	d10e      	bne.n	800df6c <_malloc_r+0xcc>
 800df4e:	6032      	str	r2, [r6, #0]
 800df50:	0028      	movs	r0, r5
 800df52:	f000 f83f 	bl	800dfd4 <__malloc_unlock>
 800df56:	0020      	movs	r0, r4
 800df58:	2207      	movs	r2, #7
 800df5a:	300b      	adds	r0, #11
 800df5c:	1d23      	adds	r3, r4, #4
 800df5e:	4390      	bics	r0, r2
 800df60:	1ac2      	subs	r2, r0, r3
 800df62:	4298      	cmp	r0, r3
 800df64:	d0df      	beq.n	800df26 <_malloc_r+0x86>
 800df66:	1a1b      	subs	r3, r3, r0
 800df68:	50a3      	str	r3, [r4, r2]
 800df6a:	e7dc      	b.n	800df26 <_malloc_r+0x86>
 800df6c:	605a      	str	r2, [r3, #4]
 800df6e:	e7ef      	b.n	800df50 <_malloc_r+0xb0>
 800df70:	0023      	movs	r3, r4
 800df72:	6864      	ldr	r4, [r4, #4]
 800df74:	e7a6      	b.n	800dec4 <_malloc_r+0x24>
 800df76:	9c00      	ldr	r4, [sp, #0]
 800df78:	6863      	ldr	r3, [r4, #4]
 800df7a:	9300      	str	r3, [sp, #0]
 800df7c:	e7ad      	b.n	800deda <_malloc_r+0x3a>
 800df7e:	001a      	movs	r2, r3
 800df80:	685b      	ldr	r3, [r3, #4]
 800df82:	42a3      	cmp	r3, r4
 800df84:	d1fb      	bne.n	800df7e <_malloc_r+0xde>
 800df86:	2300      	movs	r3, #0
 800df88:	e7da      	b.n	800df40 <_malloc_r+0xa0>
 800df8a:	230c      	movs	r3, #12
 800df8c:	0028      	movs	r0, r5
 800df8e:	602b      	str	r3, [r5, #0]
 800df90:	f000 f820 	bl	800dfd4 <__malloc_unlock>
 800df94:	e7c6      	b.n	800df24 <_malloc_r+0x84>
 800df96:	6007      	str	r7, [r0, #0]
 800df98:	e7da      	b.n	800df50 <_malloc_r+0xb0>
 800df9a:	46c0      	nop			@ (mov r8, r8)
 800df9c:	20001f94 	.word	0x20001f94

0800dfa0 <__ascii_mbtowc>:
 800dfa0:	b082      	sub	sp, #8
 800dfa2:	2900      	cmp	r1, #0
 800dfa4:	d100      	bne.n	800dfa8 <__ascii_mbtowc+0x8>
 800dfa6:	a901      	add	r1, sp, #4
 800dfa8:	1e10      	subs	r0, r2, #0
 800dfaa:	d006      	beq.n	800dfba <__ascii_mbtowc+0x1a>
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d006      	beq.n	800dfbe <__ascii_mbtowc+0x1e>
 800dfb0:	7813      	ldrb	r3, [r2, #0]
 800dfb2:	600b      	str	r3, [r1, #0]
 800dfb4:	7810      	ldrb	r0, [r2, #0]
 800dfb6:	1e43      	subs	r3, r0, #1
 800dfb8:	4198      	sbcs	r0, r3
 800dfba:	b002      	add	sp, #8
 800dfbc:	4770      	bx	lr
 800dfbe:	2002      	movs	r0, #2
 800dfc0:	4240      	negs	r0, r0
 800dfc2:	e7fa      	b.n	800dfba <__ascii_mbtowc+0x1a>

0800dfc4 <__malloc_lock>:
 800dfc4:	b510      	push	{r4, lr}
 800dfc6:	4802      	ldr	r0, [pc, #8]	@ (800dfd0 <__malloc_lock+0xc>)
 800dfc8:	f7ff fb93 	bl	800d6f2 <__retarget_lock_acquire_recursive>
 800dfcc:	bd10      	pop	{r4, pc}
 800dfce:	46c0      	nop			@ (mov r8, r8)
 800dfd0:	20001f8c 	.word	0x20001f8c

0800dfd4 <__malloc_unlock>:
 800dfd4:	b510      	push	{r4, lr}
 800dfd6:	4802      	ldr	r0, [pc, #8]	@ (800dfe0 <__malloc_unlock+0xc>)
 800dfd8:	f7ff fb8c 	bl	800d6f4 <__retarget_lock_release_recursive>
 800dfdc:	bd10      	pop	{r4, pc}
 800dfde:	46c0      	nop			@ (mov r8, r8)
 800dfe0:	20001f8c 	.word	0x20001f8c

0800dfe4 <_Balloc>:
 800dfe4:	b570      	push	{r4, r5, r6, lr}
 800dfe6:	69c5      	ldr	r5, [r0, #28]
 800dfe8:	0006      	movs	r6, r0
 800dfea:	000c      	movs	r4, r1
 800dfec:	2d00      	cmp	r5, #0
 800dfee:	d10e      	bne.n	800e00e <_Balloc+0x2a>
 800dff0:	2010      	movs	r0, #16
 800dff2:	f001 fabf 	bl	800f574 <malloc>
 800dff6:	1e02      	subs	r2, r0, #0
 800dff8:	61f0      	str	r0, [r6, #28]
 800dffa:	d104      	bne.n	800e006 <_Balloc+0x22>
 800dffc:	216b      	movs	r1, #107	@ 0x6b
 800dffe:	4b19      	ldr	r3, [pc, #100]	@ (800e064 <_Balloc+0x80>)
 800e000:	4819      	ldr	r0, [pc, #100]	@ (800e068 <_Balloc+0x84>)
 800e002:	f001 fa6b 	bl	800f4dc <__assert_func>
 800e006:	6045      	str	r5, [r0, #4]
 800e008:	6085      	str	r5, [r0, #8]
 800e00a:	6005      	str	r5, [r0, #0]
 800e00c:	60c5      	str	r5, [r0, #12]
 800e00e:	69f5      	ldr	r5, [r6, #28]
 800e010:	68eb      	ldr	r3, [r5, #12]
 800e012:	2b00      	cmp	r3, #0
 800e014:	d013      	beq.n	800e03e <_Balloc+0x5a>
 800e016:	69f3      	ldr	r3, [r6, #28]
 800e018:	00a2      	lsls	r2, r4, #2
 800e01a:	68db      	ldr	r3, [r3, #12]
 800e01c:	189b      	adds	r3, r3, r2
 800e01e:	6818      	ldr	r0, [r3, #0]
 800e020:	2800      	cmp	r0, #0
 800e022:	d118      	bne.n	800e056 <_Balloc+0x72>
 800e024:	2101      	movs	r1, #1
 800e026:	000d      	movs	r5, r1
 800e028:	40a5      	lsls	r5, r4
 800e02a:	1d6a      	adds	r2, r5, #5
 800e02c:	0030      	movs	r0, r6
 800e02e:	0092      	lsls	r2, r2, #2
 800e030:	f001 fa72 	bl	800f518 <_calloc_r>
 800e034:	2800      	cmp	r0, #0
 800e036:	d00c      	beq.n	800e052 <_Balloc+0x6e>
 800e038:	6044      	str	r4, [r0, #4]
 800e03a:	6085      	str	r5, [r0, #8]
 800e03c:	e00d      	b.n	800e05a <_Balloc+0x76>
 800e03e:	2221      	movs	r2, #33	@ 0x21
 800e040:	2104      	movs	r1, #4
 800e042:	0030      	movs	r0, r6
 800e044:	f001 fa68 	bl	800f518 <_calloc_r>
 800e048:	69f3      	ldr	r3, [r6, #28]
 800e04a:	60e8      	str	r0, [r5, #12]
 800e04c:	68db      	ldr	r3, [r3, #12]
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d1e1      	bne.n	800e016 <_Balloc+0x32>
 800e052:	2000      	movs	r0, #0
 800e054:	bd70      	pop	{r4, r5, r6, pc}
 800e056:	6802      	ldr	r2, [r0, #0]
 800e058:	601a      	str	r2, [r3, #0]
 800e05a:	2300      	movs	r3, #0
 800e05c:	6103      	str	r3, [r0, #16]
 800e05e:	60c3      	str	r3, [r0, #12]
 800e060:	e7f8      	b.n	800e054 <_Balloc+0x70>
 800e062:	46c0      	nop			@ (mov r8, r8)
 800e064:	0801095a 	.word	0x0801095a
 800e068:	08010971 	.word	0x08010971

0800e06c <_Bfree>:
 800e06c:	b570      	push	{r4, r5, r6, lr}
 800e06e:	69c6      	ldr	r6, [r0, #28]
 800e070:	0005      	movs	r5, r0
 800e072:	000c      	movs	r4, r1
 800e074:	2e00      	cmp	r6, #0
 800e076:	d10e      	bne.n	800e096 <_Bfree+0x2a>
 800e078:	2010      	movs	r0, #16
 800e07a:	f001 fa7b 	bl	800f574 <malloc>
 800e07e:	1e02      	subs	r2, r0, #0
 800e080:	61e8      	str	r0, [r5, #28]
 800e082:	d104      	bne.n	800e08e <_Bfree+0x22>
 800e084:	218f      	movs	r1, #143	@ 0x8f
 800e086:	4b09      	ldr	r3, [pc, #36]	@ (800e0ac <_Bfree+0x40>)
 800e088:	4809      	ldr	r0, [pc, #36]	@ (800e0b0 <_Bfree+0x44>)
 800e08a:	f001 fa27 	bl	800f4dc <__assert_func>
 800e08e:	6046      	str	r6, [r0, #4]
 800e090:	6086      	str	r6, [r0, #8]
 800e092:	6006      	str	r6, [r0, #0]
 800e094:	60c6      	str	r6, [r0, #12]
 800e096:	2c00      	cmp	r4, #0
 800e098:	d007      	beq.n	800e0aa <_Bfree+0x3e>
 800e09a:	69eb      	ldr	r3, [r5, #28]
 800e09c:	6862      	ldr	r2, [r4, #4]
 800e09e:	68db      	ldr	r3, [r3, #12]
 800e0a0:	0092      	lsls	r2, r2, #2
 800e0a2:	189b      	adds	r3, r3, r2
 800e0a4:	681a      	ldr	r2, [r3, #0]
 800e0a6:	6022      	str	r2, [r4, #0]
 800e0a8:	601c      	str	r4, [r3, #0]
 800e0aa:	bd70      	pop	{r4, r5, r6, pc}
 800e0ac:	0801095a 	.word	0x0801095a
 800e0b0:	08010971 	.word	0x08010971

0800e0b4 <__multadd>:
 800e0b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e0b6:	000f      	movs	r7, r1
 800e0b8:	9001      	str	r0, [sp, #4]
 800e0ba:	000c      	movs	r4, r1
 800e0bc:	001e      	movs	r6, r3
 800e0be:	2000      	movs	r0, #0
 800e0c0:	690d      	ldr	r5, [r1, #16]
 800e0c2:	3714      	adds	r7, #20
 800e0c4:	683b      	ldr	r3, [r7, #0]
 800e0c6:	3001      	adds	r0, #1
 800e0c8:	b299      	uxth	r1, r3
 800e0ca:	4351      	muls	r1, r2
 800e0cc:	0c1b      	lsrs	r3, r3, #16
 800e0ce:	4353      	muls	r3, r2
 800e0d0:	1989      	adds	r1, r1, r6
 800e0d2:	0c0e      	lsrs	r6, r1, #16
 800e0d4:	199b      	adds	r3, r3, r6
 800e0d6:	0c1e      	lsrs	r6, r3, #16
 800e0d8:	b289      	uxth	r1, r1
 800e0da:	041b      	lsls	r3, r3, #16
 800e0dc:	185b      	adds	r3, r3, r1
 800e0de:	c708      	stmia	r7!, {r3}
 800e0e0:	4285      	cmp	r5, r0
 800e0e2:	dcef      	bgt.n	800e0c4 <__multadd+0x10>
 800e0e4:	2e00      	cmp	r6, #0
 800e0e6:	d022      	beq.n	800e12e <__multadd+0x7a>
 800e0e8:	68a3      	ldr	r3, [r4, #8]
 800e0ea:	42ab      	cmp	r3, r5
 800e0ec:	dc19      	bgt.n	800e122 <__multadd+0x6e>
 800e0ee:	6861      	ldr	r1, [r4, #4]
 800e0f0:	9801      	ldr	r0, [sp, #4]
 800e0f2:	3101      	adds	r1, #1
 800e0f4:	f7ff ff76 	bl	800dfe4 <_Balloc>
 800e0f8:	1e07      	subs	r7, r0, #0
 800e0fa:	d105      	bne.n	800e108 <__multadd+0x54>
 800e0fc:	003a      	movs	r2, r7
 800e0fe:	21ba      	movs	r1, #186	@ 0xba
 800e100:	4b0c      	ldr	r3, [pc, #48]	@ (800e134 <__multadd+0x80>)
 800e102:	480d      	ldr	r0, [pc, #52]	@ (800e138 <__multadd+0x84>)
 800e104:	f001 f9ea 	bl	800f4dc <__assert_func>
 800e108:	0021      	movs	r1, r4
 800e10a:	6922      	ldr	r2, [r4, #16]
 800e10c:	310c      	adds	r1, #12
 800e10e:	3202      	adds	r2, #2
 800e110:	0092      	lsls	r2, r2, #2
 800e112:	300c      	adds	r0, #12
 800e114:	f7ff faef 	bl	800d6f6 <memcpy>
 800e118:	0021      	movs	r1, r4
 800e11a:	9801      	ldr	r0, [sp, #4]
 800e11c:	f7ff ffa6 	bl	800e06c <_Bfree>
 800e120:	003c      	movs	r4, r7
 800e122:	1d2b      	adds	r3, r5, #4
 800e124:	009b      	lsls	r3, r3, #2
 800e126:	18e3      	adds	r3, r4, r3
 800e128:	3501      	adds	r5, #1
 800e12a:	605e      	str	r6, [r3, #4]
 800e12c:	6125      	str	r5, [r4, #16]
 800e12e:	0020      	movs	r0, r4
 800e130:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e132:	46c0      	nop			@ (mov r8, r8)
 800e134:	080108e9 	.word	0x080108e9
 800e138:	08010971 	.word	0x08010971

0800e13c <__s2b>:
 800e13c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e13e:	0007      	movs	r7, r0
 800e140:	0018      	movs	r0, r3
 800e142:	000c      	movs	r4, r1
 800e144:	3008      	adds	r0, #8
 800e146:	2109      	movs	r1, #9
 800e148:	9301      	str	r3, [sp, #4]
 800e14a:	0015      	movs	r5, r2
 800e14c:	f7f2 f88a 	bl	8000264 <__divsi3>
 800e150:	2301      	movs	r3, #1
 800e152:	2100      	movs	r1, #0
 800e154:	4283      	cmp	r3, r0
 800e156:	db0a      	blt.n	800e16e <__s2b+0x32>
 800e158:	0038      	movs	r0, r7
 800e15a:	f7ff ff43 	bl	800dfe4 <_Balloc>
 800e15e:	1e01      	subs	r1, r0, #0
 800e160:	d108      	bne.n	800e174 <__s2b+0x38>
 800e162:	000a      	movs	r2, r1
 800e164:	4b19      	ldr	r3, [pc, #100]	@ (800e1cc <__s2b+0x90>)
 800e166:	481a      	ldr	r0, [pc, #104]	@ (800e1d0 <__s2b+0x94>)
 800e168:	31d3      	adds	r1, #211	@ 0xd3
 800e16a:	f001 f9b7 	bl	800f4dc <__assert_func>
 800e16e:	005b      	lsls	r3, r3, #1
 800e170:	3101      	adds	r1, #1
 800e172:	e7ef      	b.n	800e154 <__s2b+0x18>
 800e174:	9b08      	ldr	r3, [sp, #32]
 800e176:	6143      	str	r3, [r0, #20]
 800e178:	2301      	movs	r3, #1
 800e17a:	6103      	str	r3, [r0, #16]
 800e17c:	2d09      	cmp	r5, #9
 800e17e:	dd18      	ble.n	800e1b2 <__s2b+0x76>
 800e180:	0023      	movs	r3, r4
 800e182:	3309      	adds	r3, #9
 800e184:	001e      	movs	r6, r3
 800e186:	9300      	str	r3, [sp, #0]
 800e188:	1964      	adds	r4, r4, r5
 800e18a:	7833      	ldrb	r3, [r6, #0]
 800e18c:	220a      	movs	r2, #10
 800e18e:	0038      	movs	r0, r7
 800e190:	3b30      	subs	r3, #48	@ 0x30
 800e192:	f7ff ff8f 	bl	800e0b4 <__multadd>
 800e196:	3601      	adds	r6, #1
 800e198:	0001      	movs	r1, r0
 800e19a:	42a6      	cmp	r6, r4
 800e19c:	d1f5      	bne.n	800e18a <__s2b+0x4e>
 800e19e:	002c      	movs	r4, r5
 800e1a0:	9b00      	ldr	r3, [sp, #0]
 800e1a2:	3c08      	subs	r4, #8
 800e1a4:	191c      	adds	r4, r3, r4
 800e1a6:	002e      	movs	r6, r5
 800e1a8:	9b01      	ldr	r3, [sp, #4]
 800e1aa:	429e      	cmp	r6, r3
 800e1ac:	db04      	blt.n	800e1b8 <__s2b+0x7c>
 800e1ae:	0008      	movs	r0, r1
 800e1b0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e1b2:	2509      	movs	r5, #9
 800e1b4:	340a      	adds	r4, #10
 800e1b6:	e7f6      	b.n	800e1a6 <__s2b+0x6a>
 800e1b8:	1b63      	subs	r3, r4, r5
 800e1ba:	5d9b      	ldrb	r3, [r3, r6]
 800e1bc:	220a      	movs	r2, #10
 800e1be:	0038      	movs	r0, r7
 800e1c0:	3b30      	subs	r3, #48	@ 0x30
 800e1c2:	f7ff ff77 	bl	800e0b4 <__multadd>
 800e1c6:	3601      	adds	r6, #1
 800e1c8:	0001      	movs	r1, r0
 800e1ca:	e7ed      	b.n	800e1a8 <__s2b+0x6c>
 800e1cc:	080108e9 	.word	0x080108e9
 800e1d0:	08010971 	.word	0x08010971

0800e1d4 <__hi0bits>:
 800e1d4:	2280      	movs	r2, #128	@ 0x80
 800e1d6:	0003      	movs	r3, r0
 800e1d8:	0252      	lsls	r2, r2, #9
 800e1da:	2000      	movs	r0, #0
 800e1dc:	4293      	cmp	r3, r2
 800e1de:	d201      	bcs.n	800e1e4 <__hi0bits+0x10>
 800e1e0:	041b      	lsls	r3, r3, #16
 800e1e2:	3010      	adds	r0, #16
 800e1e4:	2280      	movs	r2, #128	@ 0x80
 800e1e6:	0452      	lsls	r2, r2, #17
 800e1e8:	4293      	cmp	r3, r2
 800e1ea:	d201      	bcs.n	800e1f0 <__hi0bits+0x1c>
 800e1ec:	3008      	adds	r0, #8
 800e1ee:	021b      	lsls	r3, r3, #8
 800e1f0:	2280      	movs	r2, #128	@ 0x80
 800e1f2:	0552      	lsls	r2, r2, #21
 800e1f4:	4293      	cmp	r3, r2
 800e1f6:	d201      	bcs.n	800e1fc <__hi0bits+0x28>
 800e1f8:	3004      	adds	r0, #4
 800e1fa:	011b      	lsls	r3, r3, #4
 800e1fc:	2280      	movs	r2, #128	@ 0x80
 800e1fe:	05d2      	lsls	r2, r2, #23
 800e200:	4293      	cmp	r3, r2
 800e202:	d201      	bcs.n	800e208 <__hi0bits+0x34>
 800e204:	3002      	adds	r0, #2
 800e206:	009b      	lsls	r3, r3, #2
 800e208:	2b00      	cmp	r3, #0
 800e20a:	db03      	blt.n	800e214 <__hi0bits+0x40>
 800e20c:	3001      	adds	r0, #1
 800e20e:	4213      	tst	r3, r2
 800e210:	d100      	bne.n	800e214 <__hi0bits+0x40>
 800e212:	2020      	movs	r0, #32
 800e214:	4770      	bx	lr

0800e216 <__lo0bits>:
 800e216:	6803      	ldr	r3, [r0, #0]
 800e218:	0001      	movs	r1, r0
 800e21a:	2207      	movs	r2, #7
 800e21c:	0018      	movs	r0, r3
 800e21e:	4010      	ands	r0, r2
 800e220:	4213      	tst	r3, r2
 800e222:	d00d      	beq.n	800e240 <__lo0bits+0x2a>
 800e224:	3a06      	subs	r2, #6
 800e226:	2000      	movs	r0, #0
 800e228:	4213      	tst	r3, r2
 800e22a:	d105      	bne.n	800e238 <__lo0bits+0x22>
 800e22c:	3002      	adds	r0, #2
 800e22e:	4203      	tst	r3, r0
 800e230:	d003      	beq.n	800e23a <__lo0bits+0x24>
 800e232:	40d3      	lsrs	r3, r2
 800e234:	0010      	movs	r0, r2
 800e236:	600b      	str	r3, [r1, #0]
 800e238:	4770      	bx	lr
 800e23a:	089b      	lsrs	r3, r3, #2
 800e23c:	600b      	str	r3, [r1, #0]
 800e23e:	e7fb      	b.n	800e238 <__lo0bits+0x22>
 800e240:	b29a      	uxth	r2, r3
 800e242:	2a00      	cmp	r2, #0
 800e244:	d101      	bne.n	800e24a <__lo0bits+0x34>
 800e246:	2010      	movs	r0, #16
 800e248:	0c1b      	lsrs	r3, r3, #16
 800e24a:	b2da      	uxtb	r2, r3
 800e24c:	2a00      	cmp	r2, #0
 800e24e:	d101      	bne.n	800e254 <__lo0bits+0x3e>
 800e250:	3008      	adds	r0, #8
 800e252:	0a1b      	lsrs	r3, r3, #8
 800e254:	071a      	lsls	r2, r3, #28
 800e256:	d101      	bne.n	800e25c <__lo0bits+0x46>
 800e258:	3004      	adds	r0, #4
 800e25a:	091b      	lsrs	r3, r3, #4
 800e25c:	079a      	lsls	r2, r3, #30
 800e25e:	d101      	bne.n	800e264 <__lo0bits+0x4e>
 800e260:	3002      	adds	r0, #2
 800e262:	089b      	lsrs	r3, r3, #2
 800e264:	07da      	lsls	r2, r3, #31
 800e266:	d4e9      	bmi.n	800e23c <__lo0bits+0x26>
 800e268:	3001      	adds	r0, #1
 800e26a:	085b      	lsrs	r3, r3, #1
 800e26c:	d1e6      	bne.n	800e23c <__lo0bits+0x26>
 800e26e:	2020      	movs	r0, #32
 800e270:	e7e2      	b.n	800e238 <__lo0bits+0x22>
	...

0800e274 <__i2b>:
 800e274:	b510      	push	{r4, lr}
 800e276:	000c      	movs	r4, r1
 800e278:	2101      	movs	r1, #1
 800e27a:	f7ff feb3 	bl	800dfe4 <_Balloc>
 800e27e:	2800      	cmp	r0, #0
 800e280:	d107      	bne.n	800e292 <__i2b+0x1e>
 800e282:	2146      	movs	r1, #70	@ 0x46
 800e284:	4c05      	ldr	r4, [pc, #20]	@ (800e29c <__i2b+0x28>)
 800e286:	0002      	movs	r2, r0
 800e288:	4b05      	ldr	r3, [pc, #20]	@ (800e2a0 <__i2b+0x2c>)
 800e28a:	0020      	movs	r0, r4
 800e28c:	31ff      	adds	r1, #255	@ 0xff
 800e28e:	f001 f925 	bl	800f4dc <__assert_func>
 800e292:	2301      	movs	r3, #1
 800e294:	6144      	str	r4, [r0, #20]
 800e296:	6103      	str	r3, [r0, #16]
 800e298:	bd10      	pop	{r4, pc}
 800e29a:	46c0      	nop			@ (mov r8, r8)
 800e29c:	08010971 	.word	0x08010971
 800e2a0:	080108e9 	.word	0x080108e9

0800e2a4 <__multiply>:
 800e2a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e2a6:	0014      	movs	r4, r2
 800e2a8:	690a      	ldr	r2, [r1, #16]
 800e2aa:	6923      	ldr	r3, [r4, #16]
 800e2ac:	000d      	movs	r5, r1
 800e2ae:	b08b      	sub	sp, #44	@ 0x2c
 800e2b0:	429a      	cmp	r2, r3
 800e2b2:	db02      	blt.n	800e2ba <__multiply+0x16>
 800e2b4:	0023      	movs	r3, r4
 800e2b6:	000c      	movs	r4, r1
 800e2b8:	001d      	movs	r5, r3
 800e2ba:	6927      	ldr	r7, [r4, #16]
 800e2bc:	692e      	ldr	r6, [r5, #16]
 800e2be:	6861      	ldr	r1, [r4, #4]
 800e2c0:	19bb      	adds	r3, r7, r6
 800e2c2:	9303      	str	r3, [sp, #12]
 800e2c4:	68a3      	ldr	r3, [r4, #8]
 800e2c6:	19ba      	adds	r2, r7, r6
 800e2c8:	4293      	cmp	r3, r2
 800e2ca:	da00      	bge.n	800e2ce <__multiply+0x2a>
 800e2cc:	3101      	adds	r1, #1
 800e2ce:	f7ff fe89 	bl	800dfe4 <_Balloc>
 800e2d2:	9002      	str	r0, [sp, #8]
 800e2d4:	2800      	cmp	r0, #0
 800e2d6:	d106      	bne.n	800e2e6 <__multiply+0x42>
 800e2d8:	21b1      	movs	r1, #177	@ 0xb1
 800e2da:	4b49      	ldr	r3, [pc, #292]	@ (800e400 <__multiply+0x15c>)
 800e2dc:	4849      	ldr	r0, [pc, #292]	@ (800e404 <__multiply+0x160>)
 800e2de:	9a02      	ldr	r2, [sp, #8]
 800e2e0:	0049      	lsls	r1, r1, #1
 800e2e2:	f001 f8fb 	bl	800f4dc <__assert_func>
 800e2e6:	9b02      	ldr	r3, [sp, #8]
 800e2e8:	2200      	movs	r2, #0
 800e2ea:	3314      	adds	r3, #20
 800e2ec:	469c      	mov	ip, r3
 800e2ee:	19bb      	adds	r3, r7, r6
 800e2f0:	009b      	lsls	r3, r3, #2
 800e2f2:	4463      	add	r3, ip
 800e2f4:	9304      	str	r3, [sp, #16]
 800e2f6:	4663      	mov	r3, ip
 800e2f8:	9904      	ldr	r1, [sp, #16]
 800e2fa:	428b      	cmp	r3, r1
 800e2fc:	d32a      	bcc.n	800e354 <__multiply+0xb0>
 800e2fe:	0023      	movs	r3, r4
 800e300:	00bf      	lsls	r7, r7, #2
 800e302:	3314      	adds	r3, #20
 800e304:	3514      	adds	r5, #20
 800e306:	9308      	str	r3, [sp, #32]
 800e308:	00b6      	lsls	r6, r6, #2
 800e30a:	19db      	adds	r3, r3, r7
 800e30c:	9305      	str	r3, [sp, #20]
 800e30e:	19ab      	adds	r3, r5, r6
 800e310:	9309      	str	r3, [sp, #36]	@ 0x24
 800e312:	2304      	movs	r3, #4
 800e314:	9306      	str	r3, [sp, #24]
 800e316:	0023      	movs	r3, r4
 800e318:	9a05      	ldr	r2, [sp, #20]
 800e31a:	3315      	adds	r3, #21
 800e31c:	9501      	str	r5, [sp, #4]
 800e31e:	429a      	cmp	r2, r3
 800e320:	d305      	bcc.n	800e32e <__multiply+0x8a>
 800e322:	1b13      	subs	r3, r2, r4
 800e324:	3b15      	subs	r3, #21
 800e326:	089b      	lsrs	r3, r3, #2
 800e328:	3301      	adds	r3, #1
 800e32a:	009b      	lsls	r3, r3, #2
 800e32c:	9306      	str	r3, [sp, #24]
 800e32e:	9b01      	ldr	r3, [sp, #4]
 800e330:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e332:	4293      	cmp	r3, r2
 800e334:	d310      	bcc.n	800e358 <__multiply+0xb4>
 800e336:	9b03      	ldr	r3, [sp, #12]
 800e338:	2b00      	cmp	r3, #0
 800e33a:	dd05      	ble.n	800e348 <__multiply+0xa4>
 800e33c:	9b04      	ldr	r3, [sp, #16]
 800e33e:	3b04      	subs	r3, #4
 800e340:	9304      	str	r3, [sp, #16]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	2b00      	cmp	r3, #0
 800e346:	d056      	beq.n	800e3f6 <__multiply+0x152>
 800e348:	9b02      	ldr	r3, [sp, #8]
 800e34a:	9a03      	ldr	r2, [sp, #12]
 800e34c:	0018      	movs	r0, r3
 800e34e:	611a      	str	r2, [r3, #16]
 800e350:	b00b      	add	sp, #44	@ 0x2c
 800e352:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e354:	c304      	stmia	r3!, {r2}
 800e356:	e7cf      	b.n	800e2f8 <__multiply+0x54>
 800e358:	9b01      	ldr	r3, [sp, #4]
 800e35a:	6818      	ldr	r0, [r3, #0]
 800e35c:	b280      	uxth	r0, r0
 800e35e:	2800      	cmp	r0, #0
 800e360:	d01e      	beq.n	800e3a0 <__multiply+0xfc>
 800e362:	4667      	mov	r7, ip
 800e364:	2500      	movs	r5, #0
 800e366:	9e08      	ldr	r6, [sp, #32]
 800e368:	ce02      	ldmia	r6!, {r1}
 800e36a:	683b      	ldr	r3, [r7, #0]
 800e36c:	9307      	str	r3, [sp, #28]
 800e36e:	b28b      	uxth	r3, r1
 800e370:	4343      	muls	r3, r0
 800e372:	001a      	movs	r2, r3
 800e374:	466b      	mov	r3, sp
 800e376:	0c09      	lsrs	r1, r1, #16
 800e378:	8b9b      	ldrh	r3, [r3, #28]
 800e37a:	4341      	muls	r1, r0
 800e37c:	18d3      	adds	r3, r2, r3
 800e37e:	9a07      	ldr	r2, [sp, #28]
 800e380:	195b      	adds	r3, r3, r5
 800e382:	0c12      	lsrs	r2, r2, #16
 800e384:	1889      	adds	r1, r1, r2
 800e386:	0c1a      	lsrs	r2, r3, #16
 800e388:	188a      	adds	r2, r1, r2
 800e38a:	b29b      	uxth	r3, r3
 800e38c:	0c15      	lsrs	r5, r2, #16
 800e38e:	0412      	lsls	r2, r2, #16
 800e390:	431a      	orrs	r2, r3
 800e392:	9b05      	ldr	r3, [sp, #20]
 800e394:	c704      	stmia	r7!, {r2}
 800e396:	42b3      	cmp	r3, r6
 800e398:	d8e6      	bhi.n	800e368 <__multiply+0xc4>
 800e39a:	4663      	mov	r3, ip
 800e39c:	9a06      	ldr	r2, [sp, #24]
 800e39e:	509d      	str	r5, [r3, r2]
 800e3a0:	9b01      	ldr	r3, [sp, #4]
 800e3a2:	6818      	ldr	r0, [r3, #0]
 800e3a4:	0c00      	lsrs	r0, r0, #16
 800e3a6:	d020      	beq.n	800e3ea <__multiply+0x146>
 800e3a8:	4663      	mov	r3, ip
 800e3aa:	0025      	movs	r5, r4
 800e3ac:	4661      	mov	r1, ip
 800e3ae:	2700      	movs	r7, #0
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	3514      	adds	r5, #20
 800e3b4:	682a      	ldr	r2, [r5, #0]
 800e3b6:	680e      	ldr	r6, [r1, #0]
 800e3b8:	b292      	uxth	r2, r2
 800e3ba:	4342      	muls	r2, r0
 800e3bc:	0c36      	lsrs	r6, r6, #16
 800e3be:	1992      	adds	r2, r2, r6
 800e3c0:	19d2      	adds	r2, r2, r7
 800e3c2:	0416      	lsls	r6, r2, #16
 800e3c4:	b29b      	uxth	r3, r3
 800e3c6:	431e      	orrs	r6, r3
 800e3c8:	600e      	str	r6, [r1, #0]
 800e3ca:	cd40      	ldmia	r5!, {r6}
 800e3cc:	684b      	ldr	r3, [r1, #4]
 800e3ce:	0c36      	lsrs	r6, r6, #16
 800e3d0:	4346      	muls	r6, r0
 800e3d2:	b29b      	uxth	r3, r3
 800e3d4:	0c12      	lsrs	r2, r2, #16
 800e3d6:	18f3      	adds	r3, r6, r3
 800e3d8:	189b      	adds	r3, r3, r2
 800e3da:	9a05      	ldr	r2, [sp, #20]
 800e3dc:	0c1f      	lsrs	r7, r3, #16
 800e3de:	3104      	adds	r1, #4
 800e3e0:	42aa      	cmp	r2, r5
 800e3e2:	d8e7      	bhi.n	800e3b4 <__multiply+0x110>
 800e3e4:	4662      	mov	r2, ip
 800e3e6:	9906      	ldr	r1, [sp, #24]
 800e3e8:	5053      	str	r3, [r2, r1]
 800e3ea:	9b01      	ldr	r3, [sp, #4]
 800e3ec:	3304      	adds	r3, #4
 800e3ee:	9301      	str	r3, [sp, #4]
 800e3f0:	2304      	movs	r3, #4
 800e3f2:	449c      	add	ip, r3
 800e3f4:	e79b      	b.n	800e32e <__multiply+0x8a>
 800e3f6:	9b03      	ldr	r3, [sp, #12]
 800e3f8:	3b01      	subs	r3, #1
 800e3fa:	9303      	str	r3, [sp, #12]
 800e3fc:	e79b      	b.n	800e336 <__multiply+0x92>
 800e3fe:	46c0      	nop			@ (mov r8, r8)
 800e400:	080108e9 	.word	0x080108e9
 800e404:	08010971 	.word	0x08010971

0800e408 <__pow5mult>:
 800e408:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e40a:	2303      	movs	r3, #3
 800e40c:	0015      	movs	r5, r2
 800e40e:	0007      	movs	r7, r0
 800e410:	000e      	movs	r6, r1
 800e412:	401a      	ands	r2, r3
 800e414:	421d      	tst	r5, r3
 800e416:	d008      	beq.n	800e42a <__pow5mult+0x22>
 800e418:	4925      	ldr	r1, [pc, #148]	@ (800e4b0 <__pow5mult+0xa8>)
 800e41a:	3a01      	subs	r2, #1
 800e41c:	0092      	lsls	r2, r2, #2
 800e41e:	5852      	ldr	r2, [r2, r1]
 800e420:	2300      	movs	r3, #0
 800e422:	0031      	movs	r1, r6
 800e424:	f7ff fe46 	bl	800e0b4 <__multadd>
 800e428:	0006      	movs	r6, r0
 800e42a:	10ad      	asrs	r5, r5, #2
 800e42c:	d03d      	beq.n	800e4aa <__pow5mult+0xa2>
 800e42e:	69fc      	ldr	r4, [r7, #28]
 800e430:	2c00      	cmp	r4, #0
 800e432:	d10f      	bne.n	800e454 <__pow5mult+0x4c>
 800e434:	2010      	movs	r0, #16
 800e436:	f001 f89d 	bl	800f574 <malloc>
 800e43a:	1e02      	subs	r2, r0, #0
 800e43c:	61f8      	str	r0, [r7, #28]
 800e43e:	d105      	bne.n	800e44c <__pow5mult+0x44>
 800e440:	21b4      	movs	r1, #180	@ 0xb4
 800e442:	4b1c      	ldr	r3, [pc, #112]	@ (800e4b4 <__pow5mult+0xac>)
 800e444:	481c      	ldr	r0, [pc, #112]	@ (800e4b8 <__pow5mult+0xb0>)
 800e446:	31ff      	adds	r1, #255	@ 0xff
 800e448:	f001 f848 	bl	800f4dc <__assert_func>
 800e44c:	6044      	str	r4, [r0, #4]
 800e44e:	6084      	str	r4, [r0, #8]
 800e450:	6004      	str	r4, [r0, #0]
 800e452:	60c4      	str	r4, [r0, #12]
 800e454:	69fb      	ldr	r3, [r7, #28]
 800e456:	689c      	ldr	r4, [r3, #8]
 800e458:	9301      	str	r3, [sp, #4]
 800e45a:	2c00      	cmp	r4, #0
 800e45c:	d108      	bne.n	800e470 <__pow5mult+0x68>
 800e45e:	0038      	movs	r0, r7
 800e460:	4916      	ldr	r1, [pc, #88]	@ (800e4bc <__pow5mult+0xb4>)
 800e462:	f7ff ff07 	bl	800e274 <__i2b>
 800e466:	9b01      	ldr	r3, [sp, #4]
 800e468:	0004      	movs	r4, r0
 800e46a:	6098      	str	r0, [r3, #8]
 800e46c:	2300      	movs	r3, #0
 800e46e:	6003      	str	r3, [r0, #0]
 800e470:	2301      	movs	r3, #1
 800e472:	421d      	tst	r5, r3
 800e474:	d00a      	beq.n	800e48c <__pow5mult+0x84>
 800e476:	0031      	movs	r1, r6
 800e478:	0022      	movs	r2, r4
 800e47a:	0038      	movs	r0, r7
 800e47c:	f7ff ff12 	bl	800e2a4 <__multiply>
 800e480:	0031      	movs	r1, r6
 800e482:	9001      	str	r0, [sp, #4]
 800e484:	0038      	movs	r0, r7
 800e486:	f7ff fdf1 	bl	800e06c <_Bfree>
 800e48a:	9e01      	ldr	r6, [sp, #4]
 800e48c:	106d      	asrs	r5, r5, #1
 800e48e:	d00c      	beq.n	800e4aa <__pow5mult+0xa2>
 800e490:	6820      	ldr	r0, [r4, #0]
 800e492:	2800      	cmp	r0, #0
 800e494:	d107      	bne.n	800e4a6 <__pow5mult+0x9e>
 800e496:	0022      	movs	r2, r4
 800e498:	0021      	movs	r1, r4
 800e49a:	0038      	movs	r0, r7
 800e49c:	f7ff ff02 	bl	800e2a4 <__multiply>
 800e4a0:	2300      	movs	r3, #0
 800e4a2:	6020      	str	r0, [r4, #0]
 800e4a4:	6003      	str	r3, [r0, #0]
 800e4a6:	0004      	movs	r4, r0
 800e4a8:	e7e2      	b.n	800e470 <__pow5mult+0x68>
 800e4aa:	0030      	movs	r0, r6
 800e4ac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e4ae:	46c0      	nop			@ (mov r8, r8)
 800e4b0:	080109cc 	.word	0x080109cc
 800e4b4:	0801095a 	.word	0x0801095a
 800e4b8:	08010971 	.word	0x08010971
 800e4bc:	00000271 	.word	0x00000271

0800e4c0 <__lshift>:
 800e4c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e4c2:	000c      	movs	r4, r1
 800e4c4:	0016      	movs	r6, r2
 800e4c6:	6923      	ldr	r3, [r4, #16]
 800e4c8:	1157      	asrs	r7, r2, #5
 800e4ca:	b085      	sub	sp, #20
 800e4cc:	18fb      	adds	r3, r7, r3
 800e4ce:	9301      	str	r3, [sp, #4]
 800e4d0:	3301      	adds	r3, #1
 800e4d2:	9300      	str	r3, [sp, #0]
 800e4d4:	6849      	ldr	r1, [r1, #4]
 800e4d6:	68a3      	ldr	r3, [r4, #8]
 800e4d8:	9002      	str	r0, [sp, #8]
 800e4da:	9a00      	ldr	r2, [sp, #0]
 800e4dc:	4293      	cmp	r3, r2
 800e4de:	db10      	blt.n	800e502 <__lshift+0x42>
 800e4e0:	9802      	ldr	r0, [sp, #8]
 800e4e2:	f7ff fd7f 	bl	800dfe4 <_Balloc>
 800e4e6:	2300      	movs	r3, #0
 800e4e8:	0001      	movs	r1, r0
 800e4ea:	0005      	movs	r5, r0
 800e4ec:	001a      	movs	r2, r3
 800e4ee:	3114      	adds	r1, #20
 800e4f0:	4298      	cmp	r0, r3
 800e4f2:	d10c      	bne.n	800e50e <__lshift+0x4e>
 800e4f4:	21ef      	movs	r1, #239	@ 0xef
 800e4f6:	002a      	movs	r2, r5
 800e4f8:	4b25      	ldr	r3, [pc, #148]	@ (800e590 <__lshift+0xd0>)
 800e4fa:	4826      	ldr	r0, [pc, #152]	@ (800e594 <__lshift+0xd4>)
 800e4fc:	0049      	lsls	r1, r1, #1
 800e4fe:	f000 ffed 	bl	800f4dc <__assert_func>
 800e502:	3101      	adds	r1, #1
 800e504:	005b      	lsls	r3, r3, #1
 800e506:	e7e8      	b.n	800e4da <__lshift+0x1a>
 800e508:	0098      	lsls	r0, r3, #2
 800e50a:	500a      	str	r2, [r1, r0]
 800e50c:	3301      	adds	r3, #1
 800e50e:	42bb      	cmp	r3, r7
 800e510:	dbfa      	blt.n	800e508 <__lshift+0x48>
 800e512:	43fb      	mvns	r3, r7
 800e514:	17db      	asrs	r3, r3, #31
 800e516:	401f      	ands	r7, r3
 800e518:	00bf      	lsls	r7, r7, #2
 800e51a:	0023      	movs	r3, r4
 800e51c:	201f      	movs	r0, #31
 800e51e:	19c9      	adds	r1, r1, r7
 800e520:	0037      	movs	r7, r6
 800e522:	6922      	ldr	r2, [r4, #16]
 800e524:	3314      	adds	r3, #20
 800e526:	0092      	lsls	r2, r2, #2
 800e528:	189a      	adds	r2, r3, r2
 800e52a:	4007      	ands	r7, r0
 800e52c:	4206      	tst	r6, r0
 800e52e:	d029      	beq.n	800e584 <__lshift+0xc4>
 800e530:	3001      	adds	r0, #1
 800e532:	1bc0      	subs	r0, r0, r7
 800e534:	9003      	str	r0, [sp, #12]
 800e536:	468c      	mov	ip, r1
 800e538:	2000      	movs	r0, #0
 800e53a:	681e      	ldr	r6, [r3, #0]
 800e53c:	40be      	lsls	r6, r7
 800e53e:	4306      	orrs	r6, r0
 800e540:	4660      	mov	r0, ip
 800e542:	c040      	stmia	r0!, {r6}
 800e544:	4684      	mov	ip, r0
 800e546:	9e03      	ldr	r6, [sp, #12]
 800e548:	cb01      	ldmia	r3!, {r0}
 800e54a:	40f0      	lsrs	r0, r6
 800e54c:	429a      	cmp	r2, r3
 800e54e:	d8f4      	bhi.n	800e53a <__lshift+0x7a>
 800e550:	0026      	movs	r6, r4
 800e552:	3615      	adds	r6, #21
 800e554:	2304      	movs	r3, #4
 800e556:	42b2      	cmp	r2, r6
 800e558:	d304      	bcc.n	800e564 <__lshift+0xa4>
 800e55a:	1b13      	subs	r3, r2, r4
 800e55c:	3b15      	subs	r3, #21
 800e55e:	089b      	lsrs	r3, r3, #2
 800e560:	3301      	adds	r3, #1
 800e562:	009b      	lsls	r3, r3, #2
 800e564:	50c8      	str	r0, [r1, r3]
 800e566:	2800      	cmp	r0, #0
 800e568:	d002      	beq.n	800e570 <__lshift+0xb0>
 800e56a:	9b01      	ldr	r3, [sp, #4]
 800e56c:	3302      	adds	r3, #2
 800e56e:	9300      	str	r3, [sp, #0]
 800e570:	9b00      	ldr	r3, [sp, #0]
 800e572:	9802      	ldr	r0, [sp, #8]
 800e574:	3b01      	subs	r3, #1
 800e576:	0021      	movs	r1, r4
 800e578:	612b      	str	r3, [r5, #16]
 800e57a:	f7ff fd77 	bl	800e06c <_Bfree>
 800e57e:	0028      	movs	r0, r5
 800e580:	b005      	add	sp, #20
 800e582:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e584:	cb01      	ldmia	r3!, {r0}
 800e586:	c101      	stmia	r1!, {r0}
 800e588:	429a      	cmp	r2, r3
 800e58a:	d8fb      	bhi.n	800e584 <__lshift+0xc4>
 800e58c:	e7f0      	b.n	800e570 <__lshift+0xb0>
 800e58e:	46c0      	nop			@ (mov r8, r8)
 800e590:	080108e9 	.word	0x080108e9
 800e594:	08010971 	.word	0x08010971

0800e598 <__mcmp>:
 800e598:	b530      	push	{r4, r5, lr}
 800e59a:	690b      	ldr	r3, [r1, #16]
 800e59c:	6904      	ldr	r4, [r0, #16]
 800e59e:	0002      	movs	r2, r0
 800e5a0:	1ae0      	subs	r0, r4, r3
 800e5a2:	429c      	cmp	r4, r3
 800e5a4:	d10f      	bne.n	800e5c6 <__mcmp+0x2e>
 800e5a6:	3214      	adds	r2, #20
 800e5a8:	009b      	lsls	r3, r3, #2
 800e5aa:	3114      	adds	r1, #20
 800e5ac:	0014      	movs	r4, r2
 800e5ae:	18c9      	adds	r1, r1, r3
 800e5b0:	18d2      	adds	r2, r2, r3
 800e5b2:	3a04      	subs	r2, #4
 800e5b4:	3904      	subs	r1, #4
 800e5b6:	6815      	ldr	r5, [r2, #0]
 800e5b8:	680b      	ldr	r3, [r1, #0]
 800e5ba:	429d      	cmp	r5, r3
 800e5bc:	d004      	beq.n	800e5c8 <__mcmp+0x30>
 800e5be:	2001      	movs	r0, #1
 800e5c0:	429d      	cmp	r5, r3
 800e5c2:	d200      	bcs.n	800e5c6 <__mcmp+0x2e>
 800e5c4:	3802      	subs	r0, #2
 800e5c6:	bd30      	pop	{r4, r5, pc}
 800e5c8:	4294      	cmp	r4, r2
 800e5ca:	d3f2      	bcc.n	800e5b2 <__mcmp+0x1a>
 800e5cc:	e7fb      	b.n	800e5c6 <__mcmp+0x2e>
	...

0800e5d0 <__mdiff>:
 800e5d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e5d2:	000c      	movs	r4, r1
 800e5d4:	b087      	sub	sp, #28
 800e5d6:	9000      	str	r0, [sp, #0]
 800e5d8:	0011      	movs	r1, r2
 800e5da:	0020      	movs	r0, r4
 800e5dc:	0017      	movs	r7, r2
 800e5de:	f7ff ffdb 	bl	800e598 <__mcmp>
 800e5e2:	1e05      	subs	r5, r0, #0
 800e5e4:	d110      	bne.n	800e608 <__mdiff+0x38>
 800e5e6:	0001      	movs	r1, r0
 800e5e8:	9800      	ldr	r0, [sp, #0]
 800e5ea:	f7ff fcfb 	bl	800dfe4 <_Balloc>
 800e5ee:	1e02      	subs	r2, r0, #0
 800e5f0:	d104      	bne.n	800e5fc <__mdiff+0x2c>
 800e5f2:	4b40      	ldr	r3, [pc, #256]	@ (800e6f4 <__mdiff+0x124>)
 800e5f4:	4840      	ldr	r0, [pc, #256]	@ (800e6f8 <__mdiff+0x128>)
 800e5f6:	4941      	ldr	r1, [pc, #260]	@ (800e6fc <__mdiff+0x12c>)
 800e5f8:	f000 ff70 	bl	800f4dc <__assert_func>
 800e5fc:	2301      	movs	r3, #1
 800e5fe:	6145      	str	r5, [r0, #20]
 800e600:	6103      	str	r3, [r0, #16]
 800e602:	0010      	movs	r0, r2
 800e604:	b007      	add	sp, #28
 800e606:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e608:	2600      	movs	r6, #0
 800e60a:	42b0      	cmp	r0, r6
 800e60c:	da03      	bge.n	800e616 <__mdiff+0x46>
 800e60e:	0023      	movs	r3, r4
 800e610:	003c      	movs	r4, r7
 800e612:	001f      	movs	r7, r3
 800e614:	3601      	adds	r6, #1
 800e616:	6861      	ldr	r1, [r4, #4]
 800e618:	9800      	ldr	r0, [sp, #0]
 800e61a:	f7ff fce3 	bl	800dfe4 <_Balloc>
 800e61e:	1e02      	subs	r2, r0, #0
 800e620:	d103      	bne.n	800e62a <__mdiff+0x5a>
 800e622:	4b34      	ldr	r3, [pc, #208]	@ (800e6f4 <__mdiff+0x124>)
 800e624:	4834      	ldr	r0, [pc, #208]	@ (800e6f8 <__mdiff+0x128>)
 800e626:	4936      	ldr	r1, [pc, #216]	@ (800e700 <__mdiff+0x130>)
 800e628:	e7e6      	b.n	800e5f8 <__mdiff+0x28>
 800e62a:	6923      	ldr	r3, [r4, #16]
 800e62c:	3414      	adds	r4, #20
 800e62e:	9300      	str	r3, [sp, #0]
 800e630:	009b      	lsls	r3, r3, #2
 800e632:	18e3      	adds	r3, r4, r3
 800e634:	0021      	movs	r1, r4
 800e636:	9401      	str	r4, [sp, #4]
 800e638:	003c      	movs	r4, r7
 800e63a:	9302      	str	r3, [sp, #8]
 800e63c:	693b      	ldr	r3, [r7, #16]
 800e63e:	3414      	adds	r4, #20
 800e640:	009b      	lsls	r3, r3, #2
 800e642:	18e3      	adds	r3, r4, r3
 800e644:	9303      	str	r3, [sp, #12]
 800e646:	0003      	movs	r3, r0
 800e648:	60c6      	str	r6, [r0, #12]
 800e64a:	468c      	mov	ip, r1
 800e64c:	2000      	movs	r0, #0
 800e64e:	3314      	adds	r3, #20
 800e650:	9304      	str	r3, [sp, #16]
 800e652:	9305      	str	r3, [sp, #20]
 800e654:	4663      	mov	r3, ip
 800e656:	cb20      	ldmia	r3!, {r5}
 800e658:	b2a9      	uxth	r1, r5
 800e65a:	000e      	movs	r6, r1
 800e65c:	469c      	mov	ip, r3
 800e65e:	cc08      	ldmia	r4!, {r3}
 800e660:	0c2d      	lsrs	r5, r5, #16
 800e662:	b299      	uxth	r1, r3
 800e664:	1a71      	subs	r1, r6, r1
 800e666:	1809      	adds	r1, r1, r0
 800e668:	0c1b      	lsrs	r3, r3, #16
 800e66a:	1408      	asrs	r0, r1, #16
 800e66c:	1aeb      	subs	r3, r5, r3
 800e66e:	181b      	adds	r3, r3, r0
 800e670:	1418      	asrs	r0, r3, #16
 800e672:	b289      	uxth	r1, r1
 800e674:	041b      	lsls	r3, r3, #16
 800e676:	4319      	orrs	r1, r3
 800e678:	9b05      	ldr	r3, [sp, #20]
 800e67a:	c302      	stmia	r3!, {r1}
 800e67c:	9305      	str	r3, [sp, #20]
 800e67e:	9b03      	ldr	r3, [sp, #12]
 800e680:	42a3      	cmp	r3, r4
 800e682:	d8e7      	bhi.n	800e654 <__mdiff+0x84>
 800e684:	0039      	movs	r1, r7
 800e686:	9c03      	ldr	r4, [sp, #12]
 800e688:	3115      	adds	r1, #21
 800e68a:	2304      	movs	r3, #4
 800e68c:	428c      	cmp	r4, r1
 800e68e:	d304      	bcc.n	800e69a <__mdiff+0xca>
 800e690:	1be3      	subs	r3, r4, r7
 800e692:	3b15      	subs	r3, #21
 800e694:	089b      	lsrs	r3, r3, #2
 800e696:	3301      	adds	r3, #1
 800e698:	009b      	lsls	r3, r3, #2
 800e69a:	9901      	ldr	r1, [sp, #4]
 800e69c:	18cd      	adds	r5, r1, r3
 800e69e:	9904      	ldr	r1, [sp, #16]
 800e6a0:	002e      	movs	r6, r5
 800e6a2:	18cb      	adds	r3, r1, r3
 800e6a4:	001f      	movs	r7, r3
 800e6a6:	9902      	ldr	r1, [sp, #8]
 800e6a8:	428e      	cmp	r6, r1
 800e6aa:	d311      	bcc.n	800e6d0 <__mdiff+0x100>
 800e6ac:	9c02      	ldr	r4, [sp, #8]
 800e6ae:	1ee9      	subs	r1, r5, #3
 800e6b0:	2000      	movs	r0, #0
 800e6b2:	428c      	cmp	r4, r1
 800e6b4:	d304      	bcc.n	800e6c0 <__mdiff+0xf0>
 800e6b6:	0021      	movs	r1, r4
 800e6b8:	3103      	adds	r1, #3
 800e6ba:	1b49      	subs	r1, r1, r5
 800e6bc:	0889      	lsrs	r1, r1, #2
 800e6be:	0088      	lsls	r0, r1, #2
 800e6c0:	181b      	adds	r3, r3, r0
 800e6c2:	3b04      	subs	r3, #4
 800e6c4:	6819      	ldr	r1, [r3, #0]
 800e6c6:	2900      	cmp	r1, #0
 800e6c8:	d010      	beq.n	800e6ec <__mdiff+0x11c>
 800e6ca:	9b00      	ldr	r3, [sp, #0]
 800e6cc:	6113      	str	r3, [r2, #16]
 800e6ce:	e798      	b.n	800e602 <__mdiff+0x32>
 800e6d0:	4684      	mov	ip, r0
 800e6d2:	ce02      	ldmia	r6!, {r1}
 800e6d4:	b288      	uxth	r0, r1
 800e6d6:	4460      	add	r0, ip
 800e6d8:	1400      	asrs	r0, r0, #16
 800e6da:	0c0c      	lsrs	r4, r1, #16
 800e6dc:	1904      	adds	r4, r0, r4
 800e6de:	4461      	add	r1, ip
 800e6e0:	1420      	asrs	r0, r4, #16
 800e6e2:	b289      	uxth	r1, r1
 800e6e4:	0424      	lsls	r4, r4, #16
 800e6e6:	4321      	orrs	r1, r4
 800e6e8:	c702      	stmia	r7!, {r1}
 800e6ea:	e7dc      	b.n	800e6a6 <__mdiff+0xd6>
 800e6ec:	9900      	ldr	r1, [sp, #0]
 800e6ee:	3901      	subs	r1, #1
 800e6f0:	9100      	str	r1, [sp, #0]
 800e6f2:	e7e6      	b.n	800e6c2 <__mdiff+0xf2>
 800e6f4:	080108e9 	.word	0x080108e9
 800e6f8:	08010971 	.word	0x08010971
 800e6fc:	00000237 	.word	0x00000237
 800e700:	00000245 	.word	0x00000245

0800e704 <__ulp>:
 800e704:	b510      	push	{r4, lr}
 800e706:	2400      	movs	r4, #0
 800e708:	4b0c      	ldr	r3, [pc, #48]	@ (800e73c <__ulp+0x38>)
 800e70a:	4a0d      	ldr	r2, [pc, #52]	@ (800e740 <__ulp+0x3c>)
 800e70c:	400b      	ands	r3, r1
 800e70e:	189b      	adds	r3, r3, r2
 800e710:	42a3      	cmp	r3, r4
 800e712:	dc06      	bgt.n	800e722 <__ulp+0x1e>
 800e714:	425b      	negs	r3, r3
 800e716:	151a      	asrs	r2, r3, #20
 800e718:	2a13      	cmp	r2, #19
 800e71a:	dc05      	bgt.n	800e728 <__ulp+0x24>
 800e71c:	2380      	movs	r3, #128	@ 0x80
 800e71e:	031b      	lsls	r3, r3, #12
 800e720:	4113      	asrs	r3, r2
 800e722:	0019      	movs	r1, r3
 800e724:	0020      	movs	r0, r4
 800e726:	bd10      	pop	{r4, pc}
 800e728:	3a14      	subs	r2, #20
 800e72a:	2401      	movs	r4, #1
 800e72c:	2a1e      	cmp	r2, #30
 800e72e:	dc02      	bgt.n	800e736 <__ulp+0x32>
 800e730:	2480      	movs	r4, #128	@ 0x80
 800e732:	0624      	lsls	r4, r4, #24
 800e734:	40d4      	lsrs	r4, r2
 800e736:	2300      	movs	r3, #0
 800e738:	e7f3      	b.n	800e722 <__ulp+0x1e>
 800e73a:	46c0      	nop			@ (mov r8, r8)
 800e73c:	7ff00000 	.word	0x7ff00000
 800e740:	fcc00000 	.word	0xfcc00000

0800e744 <__b2d>:
 800e744:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e746:	0006      	movs	r6, r0
 800e748:	6903      	ldr	r3, [r0, #16]
 800e74a:	3614      	adds	r6, #20
 800e74c:	009b      	lsls	r3, r3, #2
 800e74e:	18f3      	adds	r3, r6, r3
 800e750:	1f1d      	subs	r5, r3, #4
 800e752:	682c      	ldr	r4, [r5, #0]
 800e754:	000f      	movs	r7, r1
 800e756:	0020      	movs	r0, r4
 800e758:	9301      	str	r3, [sp, #4]
 800e75a:	f7ff fd3b 	bl	800e1d4 <__hi0bits>
 800e75e:	2220      	movs	r2, #32
 800e760:	1a12      	subs	r2, r2, r0
 800e762:	603a      	str	r2, [r7, #0]
 800e764:	0003      	movs	r3, r0
 800e766:	4a1c      	ldr	r2, [pc, #112]	@ (800e7d8 <__b2d+0x94>)
 800e768:	280a      	cmp	r0, #10
 800e76a:	dc15      	bgt.n	800e798 <__b2d+0x54>
 800e76c:	210b      	movs	r1, #11
 800e76e:	0027      	movs	r7, r4
 800e770:	1a09      	subs	r1, r1, r0
 800e772:	40cf      	lsrs	r7, r1
 800e774:	433a      	orrs	r2, r7
 800e776:	468c      	mov	ip, r1
 800e778:	0011      	movs	r1, r2
 800e77a:	2200      	movs	r2, #0
 800e77c:	42ae      	cmp	r6, r5
 800e77e:	d202      	bcs.n	800e786 <__b2d+0x42>
 800e780:	9a01      	ldr	r2, [sp, #4]
 800e782:	3a08      	subs	r2, #8
 800e784:	6812      	ldr	r2, [r2, #0]
 800e786:	3315      	adds	r3, #21
 800e788:	409c      	lsls	r4, r3
 800e78a:	4663      	mov	r3, ip
 800e78c:	0027      	movs	r7, r4
 800e78e:	40da      	lsrs	r2, r3
 800e790:	4317      	orrs	r7, r2
 800e792:	0038      	movs	r0, r7
 800e794:	b003      	add	sp, #12
 800e796:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e798:	2700      	movs	r7, #0
 800e79a:	42ae      	cmp	r6, r5
 800e79c:	d202      	bcs.n	800e7a4 <__b2d+0x60>
 800e79e:	9d01      	ldr	r5, [sp, #4]
 800e7a0:	3d08      	subs	r5, #8
 800e7a2:	682f      	ldr	r7, [r5, #0]
 800e7a4:	210b      	movs	r1, #11
 800e7a6:	4249      	negs	r1, r1
 800e7a8:	468c      	mov	ip, r1
 800e7aa:	449c      	add	ip, r3
 800e7ac:	2b0b      	cmp	r3, #11
 800e7ae:	d010      	beq.n	800e7d2 <__b2d+0x8e>
 800e7b0:	4661      	mov	r1, ip
 800e7b2:	2320      	movs	r3, #32
 800e7b4:	408c      	lsls	r4, r1
 800e7b6:	1a5b      	subs	r3, r3, r1
 800e7b8:	0039      	movs	r1, r7
 800e7ba:	40d9      	lsrs	r1, r3
 800e7bc:	430c      	orrs	r4, r1
 800e7be:	4322      	orrs	r2, r4
 800e7c0:	0011      	movs	r1, r2
 800e7c2:	2200      	movs	r2, #0
 800e7c4:	42b5      	cmp	r5, r6
 800e7c6:	d901      	bls.n	800e7cc <__b2d+0x88>
 800e7c8:	3d04      	subs	r5, #4
 800e7ca:	682a      	ldr	r2, [r5, #0]
 800e7cc:	4664      	mov	r4, ip
 800e7ce:	40a7      	lsls	r7, r4
 800e7d0:	e7dd      	b.n	800e78e <__b2d+0x4a>
 800e7d2:	4322      	orrs	r2, r4
 800e7d4:	0011      	movs	r1, r2
 800e7d6:	e7dc      	b.n	800e792 <__b2d+0x4e>
 800e7d8:	3ff00000 	.word	0x3ff00000

0800e7dc <__d2b>:
 800e7dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e7de:	2101      	movs	r1, #1
 800e7e0:	0016      	movs	r6, r2
 800e7e2:	001f      	movs	r7, r3
 800e7e4:	f7ff fbfe 	bl	800dfe4 <_Balloc>
 800e7e8:	1e04      	subs	r4, r0, #0
 800e7ea:	d105      	bne.n	800e7f8 <__d2b+0x1c>
 800e7ec:	0022      	movs	r2, r4
 800e7ee:	4b25      	ldr	r3, [pc, #148]	@ (800e884 <__d2b+0xa8>)
 800e7f0:	4825      	ldr	r0, [pc, #148]	@ (800e888 <__d2b+0xac>)
 800e7f2:	4926      	ldr	r1, [pc, #152]	@ (800e88c <__d2b+0xb0>)
 800e7f4:	f000 fe72 	bl	800f4dc <__assert_func>
 800e7f8:	033b      	lsls	r3, r7, #12
 800e7fa:	007d      	lsls	r5, r7, #1
 800e7fc:	0b1b      	lsrs	r3, r3, #12
 800e7fe:	0d6d      	lsrs	r5, r5, #21
 800e800:	d002      	beq.n	800e808 <__d2b+0x2c>
 800e802:	2280      	movs	r2, #128	@ 0x80
 800e804:	0352      	lsls	r2, r2, #13
 800e806:	4313      	orrs	r3, r2
 800e808:	9301      	str	r3, [sp, #4]
 800e80a:	2e00      	cmp	r6, #0
 800e80c:	d025      	beq.n	800e85a <__d2b+0x7e>
 800e80e:	4668      	mov	r0, sp
 800e810:	9600      	str	r6, [sp, #0]
 800e812:	f7ff fd00 	bl	800e216 <__lo0bits>
 800e816:	9b01      	ldr	r3, [sp, #4]
 800e818:	9900      	ldr	r1, [sp, #0]
 800e81a:	2800      	cmp	r0, #0
 800e81c:	d01b      	beq.n	800e856 <__d2b+0x7a>
 800e81e:	2220      	movs	r2, #32
 800e820:	001e      	movs	r6, r3
 800e822:	1a12      	subs	r2, r2, r0
 800e824:	4096      	lsls	r6, r2
 800e826:	0032      	movs	r2, r6
 800e828:	40c3      	lsrs	r3, r0
 800e82a:	430a      	orrs	r2, r1
 800e82c:	6162      	str	r2, [r4, #20]
 800e82e:	9301      	str	r3, [sp, #4]
 800e830:	9e01      	ldr	r6, [sp, #4]
 800e832:	61a6      	str	r6, [r4, #24]
 800e834:	1e73      	subs	r3, r6, #1
 800e836:	419e      	sbcs	r6, r3
 800e838:	3601      	adds	r6, #1
 800e83a:	6126      	str	r6, [r4, #16]
 800e83c:	2d00      	cmp	r5, #0
 800e83e:	d014      	beq.n	800e86a <__d2b+0x8e>
 800e840:	2635      	movs	r6, #53	@ 0x35
 800e842:	4b13      	ldr	r3, [pc, #76]	@ (800e890 <__d2b+0xb4>)
 800e844:	18ed      	adds	r5, r5, r3
 800e846:	9b08      	ldr	r3, [sp, #32]
 800e848:	182d      	adds	r5, r5, r0
 800e84a:	601d      	str	r5, [r3, #0]
 800e84c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e84e:	1a36      	subs	r6, r6, r0
 800e850:	601e      	str	r6, [r3, #0]
 800e852:	0020      	movs	r0, r4
 800e854:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e856:	6161      	str	r1, [r4, #20]
 800e858:	e7ea      	b.n	800e830 <__d2b+0x54>
 800e85a:	a801      	add	r0, sp, #4
 800e85c:	f7ff fcdb 	bl	800e216 <__lo0bits>
 800e860:	9b01      	ldr	r3, [sp, #4]
 800e862:	2601      	movs	r6, #1
 800e864:	6163      	str	r3, [r4, #20]
 800e866:	3020      	adds	r0, #32
 800e868:	e7e7      	b.n	800e83a <__d2b+0x5e>
 800e86a:	4b0a      	ldr	r3, [pc, #40]	@ (800e894 <__d2b+0xb8>)
 800e86c:	18c0      	adds	r0, r0, r3
 800e86e:	9b08      	ldr	r3, [sp, #32]
 800e870:	6018      	str	r0, [r3, #0]
 800e872:	4b09      	ldr	r3, [pc, #36]	@ (800e898 <__d2b+0xbc>)
 800e874:	18f3      	adds	r3, r6, r3
 800e876:	009b      	lsls	r3, r3, #2
 800e878:	18e3      	adds	r3, r4, r3
 800e87a:	6958      	ldr	r0, [r3, #20]
 800e87c:	f7ff fcaa 	bl	800e1d4 <__hi0bits>
 800e880:	0176      	lsls	r6, r6, #5
 800e882:	e7e3      	b.n	800e84c <__d2b+0x70>
 800e884:	080108e9 	.word	0x080108e9
 800e888:	08010971 	.word	0x08010971
 800e88c:	0000030f 	.word	0x0000030f
 800e890:	fffffbcd 	.word	0xfffffbcd
 800e894:	fffffbce 	.word	0xfffffbce
 800e898:	3fffffff 	.word	0x3fffffff

0800e89c <__ratio>:
 800e89c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e89e:	b087      	sub	sp, #28
 800e8a0:	000f      	movs	r7, r1
 800e8a2:	a904      	add	r1, sp, #16
 800e8a4:	0006      	movs	r6, r0
 800e8a6:	f7ff ff4d 	bl	800e744 <__b2d>
 800e8aa:	9000      	str	r0, [sp, #0]
 800e8ac:	9101      	str	r1, [sp, #4]
 800e8ae:	9b00      	ldr	r3, [sp, #0]
 800e8b0:	9c01      	ldr	r4, [sp, #4]
 800e8b2:	0038      	movs	r0, r7
 800e8b4:	a905      	add	r1, sp, #20
 800e8b6:	9302      	str	r3, [sp, #8]
 800e8b8:	9403      	str	r4, [sp, #12]
 800e8ba:	f7ff ff43 	bl	800e744 <__b2d>
 800e8be:	000d      	movs	r5, r1
 800e8c0:	0002      	movs	r2, r0
 800e8c2:	000b      	movs	r3, r1
 800e8c4:	6930      	ldr	r0, [r6, #16]
 800e8c6:	6939      	ldr	r1, [r7, #16]
 800e8c8:	9e04      	ldr	r6, [sp, #16]
 800e8ca:	1a40      	subs	r0, r0, r1
 800e8cc:	9905      	ldr	r1, [sp, #20]
 800e8ce:	0140      	lsls	r0, r0, #5
 800e8d0:	1a71      	subs	r1, r6, r1
 800e8d2:	1841      	adds	r1, r0, r1
 800e8d4:	0508      	lsls	r0, r1, #20
 800e8d6:	2900      	cmp	r1, #0
 800e8d8:	dd08      	ble.n	800e8ec <__ratio+0x50>
 800e8da:	9901      	ldr	r1, [sp, #4]
 800e8dc:	1841      	adds	r1, r0, r1
 800e8de:	9103      	str	r1, [sp, #12]
 800e8e0:	9802      	ldr	r0, [sp, #8]
 800e8e2:	9903      	ldr	r1, [sp, #12]
 800e8e4:	f7f3 fa26 	bl	8001d34 <__aeabi_ddiv>
 800e8e8:	b007      	add	sp, #28
 800e8ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e8ec:	1a2b      	subs	r3, r5, r0
 800e8ee:	e7f7      	b.n	800e8e0 <__ratio+0x44>

0800e8f0 <__copybits>:
 800e8f0:	b570      	push	{r4, r5, r6, lr}
 800e8f2:	0014      	movs	r4, r2
 800e8f4:	0005      	movs	r5, r0
 800e8f6:	3901      	subs	r1, #1
 800e8f8:	6913      	ldr	r3, [r2, #16]
 800e8fa:	1149      	asrs	r1, r1, #5
 800e8fc:	3101      	adds	r1, #1
 800e8fe:	0089      	lsls	r1, r1, #2
 800e900:	3414      	adds	r4, #20
 800e902:	009b      	lsls	r3, r3, #2
 800e904:	1841      	adds	r1, r0, r1
 800e906:	18e3      	adds	r3, r4, r3
 800e908:	42a3      	cmp	r3, r4
 800e90a:	d80d      	bhi.n	800e928 <__copybits+0x38>
 800e90c:	0014      	movs	r4, r2
 800e90e:	3411      	adds	r4, #17
 800e910:	2500      	movs	r5, #0
 800e912:	429c      	cmp	r4, r3
 800e914:	d803      	bhi.n	800e91e <__copybits+0x2e>
 800e916:	1a9b      	subs	r3, r3, r2
 800e918:	3b11      	subs	r3, #17
 800e91a:	089b      	lsrs	r3, r3, #2
 800e91c:	009d      	lsls	r5, r3, #2
 800e91e:	2300      	movs	r3, #0
 800e920:	1940      	adds	r0, r0, r5
 800e922:	4281      	cmp	r1, r0
 800e924:	d803      	bhi.n	800e92e <__copybits+0x3e>
 800e926:	bd70      	pop	{r4, r5, r6, pc}
 800e928:	cc40      	ldmia	r4!, {r6}
 800e92a:	c540      	stmia	r5!, {r6}
 800e92c:	e7ec      	b.n	800e908 <__copybits+0x18>
 800e92e:	c008      	stmia	r0!, {r3}
 800e930:	e7f7      	b.n	800e922 <__copybits+0x32>

0800e932 <__any_on>:
 800e932:	0002      	movs	r2, r0
 800e934:	6900      	ldr	r0, [r0, #16]
 800e936:	b510      	push	{r4, lr}
 800e938:	3214      	adds	r2, #20
 800e93a:	114b      	asrs	r3, r1, #5
 800e93c:	4298      	cmp	r0, r3
 800e93e:	db13      	blt.n	800e968 <__any_on+0x36>
 800e940:	dd0c      	ble.n	800e95c <__any_on+0x2a>
 800e942:	241f      	movs	r4, #31
 800e944:	0008      	movs	r0, r1
 800e946:	4020      	ands	r0, r4
 800e948:	4221      	tst	r1, r4
 800e94a:	d007      	beq.n	800e95c <__any_on+0x2a>
 800e94c:	0099      	lsls	r1, r3, #2
 800e94e:	588c      	ldr	r4, [r1, r2]
 800e950:	0021      	movs	r1, r4
 800e952:	40c1      	lsrs	r1, r0
 800e954:	4081      	lsls	r1, r0
 800e956:	2001      	movs	r0, #1
 800e958:	428c      	cmp	r4, r1
 800e95a:	d104      	bne.n	800e966 <__any_on+0x34>
 800e95c:	009b      	lsls	r3, r3, #2
 800e95e:	18d3      	adds	r3, r2, r3
 800e960:	4293      	cmp	r3, r2
 800e962:	d803      	bhi.n	800e96c <__any_on+0x3a>
 800e964:	2000      	movs	r0, #0
 800e966:	bd10      	pop	{r4, pc}
 800e968:	0003      	movs	r3, r0
 800e96a:	e7f7      	b.n	800e95c <__any_on+0x2a>
 800e96c:	3b04      	subs	r3, #4
 800e96e:	6819      	ldr	r1, [r3, #0]
 800e970:	2900      	cmp	r1, #0
 800e972:	d0f5      	beq.n	800e960 <__any_on+0x2e>
 800e974:	2001      	movs	r0, #1
 800e976:	e7f6      	b.n	800e966 <__any_on+0x34>

0800e978 <__ascii_wctomb>:
 800e978:	0003      	movs	r3, r0
 800e97a:	1e08      	subs	r0, r1, #0
 800e97c:	d005      	beq.n	800e98a <__ascii_wctomb+0x12>
 800e97e:	2aff      	cmp	r2, #255	@ 0xff
 800e980:	d904      	bls.n	800e98c <__ascii_wctomb+0x14>
 800e982:	228a      	movs	r2, #138	@ 0x8a
 800e984:	2001      	movs	r0, #1
 800e986:	601a      	str	r2, [r3, #0]
 800e988:	4240      	negs	r0, r0
 800e98a:	4770      	bx	lr
 800e98c:	2001      	movs	r0, #1
 800e98e:	700a      	strb	r2, [r1, #0]
 800e990:	e7fb      	b.n	800e98a <__ascii_wctomb+0x12>
	...

0800e994 <__ssputs_r>:
 800e994:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e996:	688e      	ldr	r6, [r1, #8]
 800e998:	b085      	sub	sp, #20
 800e99a:	001f      	movs	r7, r3
 800e99c:	000c      	movs	r4, r1
 800e99e:	680b      	ldr	r3, [r1, #0]
 800e9a0:	9002      	str	r0, [sp, #8]
 800e9a2:	9203      	str	r2, [sp, #12]
 800e9a4:	42be      	cmp	r6, r7
 800e9a6:	d830      	bhi.n	800ea0a <__ssputs_r+0x76>
 800e9a8:	210c      	movs	r1, #12
 800e9aa:	5e62      	ldrsh	r2, [r4, r1]
 800e9ac:	2190      	movs	r1, #144	@ 0x90
 800e9ae:	00c9      	lsls	r1, r1, #3
 800e9b0:	420a      	tst	r2, r1
 800e9b2:	d028      	beq.n	800ea06 <__ssputs_r+0x72>
 800e9b4:	2003      	movs	r0, #3
 800e9b6:	6921      	ldr	r1, [r4, #16]
 800e9b8:	1a5b      	subs	r3, r3, r1
 800e9ba:	9301      	str	r3, [sp, #4]
 800e9bc:	6963      	ldr	r3, [r4, #20]
 800e9be:	4343      	muls	r3, r0
 800e9c0:	9801      	ldr	r0, [sp, #4]
 800e9c2:	0fdd      	lsrs	r5, r3, #31
 800e9c4:	18ed      	adds	r5, r5, r3
 800e9c6:	1c7b      	adds	r3, r7, #1
 800e9c8:	181b      	adds	r3, r3, r0
 800e9ca:	106d      	asrs	r5, r5, #1
 800e9cc:	42ab      	cmp	r3, r5
 800e9ce:	d900      	bls.n	800e9d2 <__ssputs_r+0x3e>
 800e9d0:	001d      	movs	r5, r3
 800e9d2:	0552      	lsls	r2, r2, #21
 800e9d4:	d528      	bpl.n	800ea28 <__ssputs_r+0x94>
 800e9d6:	0029      	movs	r1, r5
 800e9d8:	9802      	ldr	r0, [sp, #8]
 800e9da:	f7ff fa61 	bl	800dea0 <_malloc_r>
 800e9de:	1e06      	subs	r6, r0, #0
 800e9e0:	d02c      	beq.n	800ea3c <__ssputs_r+0xa8>
 800e9e2:	9a01      	ldr	r2, [sp, #4]
 800e9e4:	6921      	ldr	r1, [r4, #16]
 800e9e6:	f7fe fe86 	bl	800d6f6 <memcpy>
 800e9ea:	89a2      	ldrh	r2, [r4, #12]
 800e9ec:	4b18      	ldr	r3, [pc, #96]	@ (800ea50 <__ssputs_r+0xbc>)
 800e9ee:	401a      	ands	r2, r3
 800e9f0:	2380      	movs	r3, #128	@ 0x80
 800e9f2:	4313      	orrs	r3, r2
 800e9f4:	81a3      	strh	r3, [r4, #12]
 800e9f6:	9b01      	ldr	r3, [sp, #4]
 800e9f8:	6126      	str	r6, [r4, #16]
 800e9fa:	18f6      	adds	r6, r6, r3
 800e9fc:	6026      	str	r6, [r4, #0]
 800e9fe:	003e      	movs	r6, r7
 800ea00:	6165      	str	r5, [r4, #20]
 800ea02:	1aed      	subs	r5, r5, r3
 800ea04:	60a5      	str	r5, [r4, #8]
 800ea06:	42be      	cmp	r6, r7
 800ea08:	d900      	bls.n	800ea0c <__ssputs_r+0x78>
 800ea0a:	003e      	movs	r6, r7
 800ea0c:	0032      	movs	r2, r6
 800ea0e:	9903      	ldr	r1, [sp, #12]
 800ea10:	6820      	ldr	r0, [r4, #0]
 800ea12:	f000 fd31 	bl	800f478 <memmove>
 800ea16:	2000      	movs	r0, #0
 800ea18:	68a3      	ldr	r3, [r4, #8]
 800ea1a:	1b9b      	subs	r3, r3, r6
 800ea1c:	60a3      	str	r3, [r4, #8]
 800ea1e:	6823      	ldr	r3, [r4, #0]
 800ea20:	199b      	adds	r3, r3, r6
 800ea22:	6023      	str	r3, [r4, #0]
 800ea24:	b005      	add	sp, #20
 800ea26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ea28:	002a      	movs	r2, r5
 800ea2a:	9802      	ldr	r0, [sp, #8]
 800ea2c:	f000 fdac 	bl	800f588 <_realloc_r>
 800ea30:	1e06      	subs	r6, r0, #0
 800ea32:	d1e0      	bne.n	800e9f6 <__ssputs_r+0x62>
 800ea34:	6921      	ldr	r1, [r4, #16]
 800ea36:	9802      	ldr	r0, [sp, #8]
 800ea38:	f7fe fe6c 	bl	800d714 <_free_r>
 800ea3c:	230c      	movs	r3, #12
 800ea3e:	2001      	movs	r0, #1
 800ea40:	9a02      	ldr	r2, [sp, #8]
 800ea42:	4240      	negs	r0, r0
 800ea44:	6013      	str	r3, [r2, #0]
 800ea46:	89a2      	ldrh	r2, [r4, #12]
 800ea48:	3334      	adds	r3, #52	@ 0x34
 800ea4a:	4313      	orrs	r3, r2
 800ea4c:	81a3      	strh	r3, [r4, #12]
 800ea4e:	e7e9      	b.n	800ea24 <__ssputs_r+0x90>
 800ea50:	fffffb7f 	.word	0xfffffb7f

0800ea54 <_svfiprintf_r>:
 800ea54:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea56:	b0a1      	sub	sp, #132	@ 0x84
 800ea58:	9003      	str	r0, [sp, #12]
 800ea5a:	001d      	movs	r5, r3
 800ea5c:	898b      	ldrh	r3, [r1, #12]
 800ea5e:	000f      	movs	r7, r1
 800ea60:	0016      	movs	r6, r2
 800ea62:	061b      	lsls	r3, r3, #24
 800ea64:	d511      	bpl.n	800ea8a <_svfiprintf_r+0x36>
 800ea66:	690b      	ldr	r3, [r1, #16]
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d10e      	bne.n	800ea8a <_svfiprintf_r+0x36>
 800ea6c:	2140      	movs	r1, #64	@ 0x40
 800ea6e:	f7ff fa17 	bl	800dea0 <_malloc_r>
 800ea72:	6038      	str	r0, [r7, #0]
 800ea74:	6138      	str	r0, [r7, #16]
 800ea76:	2800      	cmp	r0, #0
 800ea78:	d105      	bne.n	800ea86 <_svfiprintf_r+0x32>
 800ea7a:	230c      	movs	r3, #12
 800ea7c:	9a03      	ldr	r2, [sp, #12]
 800ea7e:	6013      	str	r3, [r2, #0]
 800ea80:	2001      	movs	r0, #1
 800ea82:	4240      	negs	r0, r0
 800ea84:	e0cf      	b.n	800ec26 <_svfiprintf_r+0x1d2>
 800ea86:	2340      	movs	r3, #64	@ 0x40
 800ea88:	617b      	str	r3, [r7, #20]
 800ea8a:	2300      	movs	r3, #0
 800ea8c:	ac08      	add	r4, sp, #32
 800ea8e:	6163      	str	r3, [r4, #20]
 800ea90:	3320      	adds	r3, #32
 800ea92:	7663      	strb	r3, [r4, #25]
 800ea94:	3310      	adds	r3, #16
 800ea96:	76a3      	strb	r3, [r4, #26]
 800ea98:	9507      	str	r5, [sp, #28]
 800ea9a:	0035      	movs	r5, r6
 800ea9c:	782b      	ldrb	r3, [r5, #0]
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d001      	beq.n	800eaa6 <_svfiprintf_r+0x52>
 800eaa2:	2b25      	cmp	r3, #37	@ 0x25
 800eaa4:	d148      	bne.n	800eb38 <_svfiprintf_r+0xe4>
 800eaa6:	1bab      	subs	r3, r5, r6
 800eaa8:	9305      	str	r3, [sp, #20]
 800eaaa:	42b5      	cmp	r5, r6
 800eaac:	d00b      	beq.n	800eac6 <_svfiprintf_r+0x72>
 800eaae:	0032      	movs	r2, r6
 800eab0:	0039      	movs	r1, r7
 800eab2:	9803      	ldr	r0, [sp, #12]
 800eab4:	f7ff ff6e 	bl	800e994 <__ssputs_r>
 800eab8:	3001      	adds	r0, #1
 800eaba:	d100      	bne.n	800eabe <_svfiprintf_r+0x6a>
 800eabc:	e0ae      	b.n	800ec1c <_svfiprintf_r+0x1c8>
 800eabe:	6963      	ldr	r3, [r4, #20]
 800eac0:	9a05      	ldr	r2, [sp, #20]
 800eac2:	189b      	adds	r3, r3, r2
 800eac4:	6163      	str	r3, [r4, #20]
 800eac6:	782b      	ldrb	r3, [r5, #0]
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d100      	bne.n	800eace <_svfiprintf_r+0x7a>
 800eacc:	e0a6      	b.n	800ec1c <_svfiprintf_r+0x1c8>
 800eace:	2201      	movs	r2, #1
 800ead0:	2300      	movs	r3, #0
 800ead2:	4252      	negs	r2, r2
 800ead4:	6062      	str	r2, [r4, #4]
 800ead6:	a904      	add	r1, sp, #16
 800ead8:	3254      	adds	r2, #84	@ 0x54
 800eada:	1852      	adds	r2, r2, r1
 800eadc:	1c6e      	adds	r6, r5, #1
 800eade:	6023      	str	r3, [r4, #0]
 800eae0:	60e3      	str	r3, [r4, #12]
 800eae2:	60a3      	str	r3, [r4, #8]
 800eae4:	7013      	strb	r3, [r2, #0]
 800eae6:	65a3      	str	r3, [r4, #88]	@ 0x58
 800eae8:	4b54      	ldr	r3, [pc, #336]	@ (800ec3c <_svfiprintf_r+0x1e8>)
 800eaea:	2205      	movs	r2, #5
 800eaec:	0018      	movs	r0, r3
 800eaee:	7831      	ldrb	r1, [r6, #0]
 800eaf0:	9305      	str	r3, [sp, #20]
 800eaf2:	f000 fce7 	bl	800f4c4 <memchr>
 800eaf6:	1c75      	adds	r5, r6, #1
 800eaf8:	2800      	cmp	r0, #0
 800eafa:	d11f      	bne.n	800eb3c <_svfiprintf_r+0xe8>
 800eafc:	6822      	ldr	r2, [r4, #0]
 800eafe:	06d3      	lsls	r3, r2, #27
 800eb00:	d504      	bpl.n	800eb0c <_svfiprintf_r+0xb8>
 800eb02:	2353      	movs	r3, #83	@ 0x53
 800eb04:	a904      	add	r1, sp, #16
 800eb06:	185b      	adds	r3, r3, r1
 800eb08:	2120      	movs	r1, #32
 800eb0a:	7019      	strb	r1, [r3, #0]
 800eb0c:	0713      	lsls	r3, r2, #28
 800eb0e:	d504      	bpl.n	800eb1a <_svfiprintf_r+0xc6>
 800eb10:	2353      	movs	r3, #83	@ 0x53
 800eb12:	a904      	add	r1, sp, #16
 800eb14:	185b      	adds	r3, r3, r1
 800eb16:	212b      	movs	r1, #43	@ 0x2b
 800eb18:	7019      	strb	r1, [r3, #0]
 800eb1a:	7833      	ldrb	r3, [r6, #0]
 800eb1c:	2b2a      	cmp	r3, #42	@ 0x2a
 800eb1e:	d016      	beq.n	800eb4e <_svfiprintf_r+0xfa>
 800eb20:	0035      	movs	r5, r6
 800eb22:	2100      	movs	r1, #0
 800eb24:	200a      	movs	r0, #10
 800eb26:	68e3      	ldr	r3, [r4, #12]
 800eb28:	782a      	ldrb	r2, [r5, #0]
 800eb2a:	1c6e      	adds	r6, r5, #1
 800eb2c:	3a30      	subs	r2, #48	@ 0x30
 800eb2e:	2a09      	cmp	r2, #9
 800eb30:	d950      	bls.n	800ebd4 <_svfiprintf_r+0x180>
 800eb32:	2900      	cmp	r1, #0
 800eb34:	d111      	bne.n	800eb5a <_svfiprintf_r+0x106>
 800eb36:	e017      	b.n	800eb68 <_svfiprintf_r+0x114>
 800eb38:	3501      	adds	r5, #1
 800eb3a:	e7af      	b.n	800ea9c <_svfiprintf_r+0x48>
 800eb3c:	9b05      	ldr	r3, [sp, #20]
 800eb3e:	6822      	ldr	r2, [r4, #0]
 800eb40:	1ac0      	subs	r0, r0, r3
 800eb42:	2301      	movs	r3, #1
 800eb44:	4083      	lsls	r3, r0
 800eb46:	4313      	orrs	r3, r2
 800eb48:	002e      	movs	r6, r5
 800eb4a:	6023      	str	r3, [r4, #0]
 800eb4c:	e7cc      	b.n	800eae8 <_svfiprintf_r+0x94>
 800eb4e:	9b07      	ldr	r3, [sp, #28]
 800eb50:	1d19      	adds	r1, r3, #4
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	9107      	str	r1, [sp, #28]
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	db01      	blt.n	800eb5e <_svfiprintf_r+0x10a>
 800eb5a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800eb5c:	e004      	b.n	800eb68 <_svfiprintf_r+0x114>
 800eb5e:	425b      	negs	r3, r3
 800eb60:	60e3      	str	r3, [r4, #12]
 800eb62:	2302      	movs	r3, #2
 800eb64:	4313      	orrs	r3, r2
 800eb66:	6023      	str	r3, [r4, #0]
 800eb68:	782b      	ldrb	r3, [r5, #0]
 800eb6a:	2b2e      	cmp	r3, #46	@ 0x2e
 800eb6c:	d10c      	bne.n	800eb88 <_svfiprintf_r+0x134>
 800eb6e:	786b      	ldrb	r3, [r5, #1]
 800eb70:	2b2a      	cmp	r3, #42	@ 0x2a
 800eb72:	d134      	bne.n	800ebde <_svfiprintf_r+0x18a>
 800eb74:	9b07      	ldr	r3, [sp, #28]
 800eb76:	3502      	adds	r5, #2
 800eb78:	1d1a      	adds	r2, r3, #4
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	9207      	str	r2, [sp, #28]
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	da01      	bge.n	800eb86 <_svfiprintf_r+0x132>
 800eb82:	2301      	movs	r3, #1
 800eb84:	425b      	negs	r3, r3
 800eb86:	9309      	str	r3, [sp, #36]	@ 0x24
 800eb88:	4e2d      	ldr	r6, [pc, #180]	@ (800ec40 <_svfiprintf_r+0x1ec>)
 800eb8a:	2203      	movs	r2, #3
 800eb8c:	0030      	movs	r0, r6
 800eb8e:	7829      	ldrb	r1, [r5, #0]
 800eb90:	f000 fc98 	bl	800f4c4 <memchr>
 800eb94:	2800      	cmp	r0, #0
 800eb96:	d006      	beq.n	800eba6 <_svfiprintf_r+0x152>
 800eb98:	2340      	movs	r3, #64	@ 0x40
 800eb9a:	1b80      	subs	r0, r0, r6
 800eb9c:	4083      	lsls	r3, r0
 800eb9e:	6822      	ldr	r2, [r4, #0]
 800eba0:	3501      	adds	r5, #1
 800eba2:	4313      	orrs	r3, r2
 800eba4:	6023      	str	r3, [r4, #0]
 800eba6:	7829      	ldrb	r1, [r5, #0]
 800eba8:	2206      	movs	r2, #6
 800ebaa:	4826      	ldr	r0, [pc, #152]	@ (800ec44 <_svfiprintf_r+0x1f0>)
 800ebac:	1c6e      	adds	r6, r5, #1
 800ebae:	7621      	strb	r1, [r4, #24]
 800ebb0:	f000 fc88 	bl	800f4c4 <memchr>
 800ebb4:	2800      	cmp	r0, #0
 800ebb6:	d038      	beq.n	800ec2a <_svfiprintf_r+0x1d6>
 800ebb8:	4b23      	ldr	r3, [pc, #140]	@ (800ec48 <_svfiprintf_r+0x1f4>)
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d122      	bne.n	800ec04 <_svfiprintf_r+0x1b0>
 800ebbe:	2207      	movs	r2, #7
 800ebc0:	9b07      	ldr	r3, [sp, #28]
 800ebc2:	3307      	adds	r3, #7
 800ebc4:	4393      	bics	r3, r2
 800ebc6:	3308      	adds	r3, #8
 800ebc8:	9307      	str	r3, [sp, #28]
 800ebca:	6963      	ldr	r3, [r4, #20]
 800ebcc:	9a04      	ldr	r2, [sp, #16]
 800ebce:	189b      	adds	r3, r3, r2
 800ebd0:	6163      	str	r3, [r4, #20]
 800ebd2:	e762      	b.n	800ea9a <_svfiprintf_r+0x46>
 800ebd4:	4343      	muls	r3, r0
 800ebd6:	0035      	movs	r5, r6
 800ebd8:	2101      	movs	r1, #1
 800ebda:	189b      	adds	r3, r3, r2
 800ebdc:	e7a4      	b.n	800eb28 <_svfiprintf_r+0xd4>
 800ebde:	2300      	movs	r3, #0
 800ebe0:	200a      	movs	r0, #10
 800ebe2:	0019      	movs	r1, r3
 800ebe4:	3501      	adds	r5, #1
 800ebe6:	6063      	str	r3, [r4, #4]
 800ebe8:	782a      	ldrb	r2, [r5, #0]
 800ebea:	1c6e      	adds	r6, r5, #1
 800ebec:	3a30      	subs	r2, #48	@ 0x30
 800ebee:	2a09      	cmp	r2, #9
 800ebf0:	d903      	bls.n	800ebfa <_svfiprintf_r+0x1a6>
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d0c8      	beq.n	800eb88 <_svfiprintf_r+0x134>
 800ebf6:	9109      	str	r1, [sp, #36]	@ 0x24
 800ebf8:	e7c6      	b.n	800eb88 <_svfiprintf_r+0x134>
 800ebfa:	4341      	muls	r1, r0
 800ebfc:	0035      	movs	r5, r6
 800ebfe:	2301      	movs	r3, #1
 800ec00:	1889      	adds	r1, r1, r2
 800ec02:	e7f1      	b.n	800ebe8 <_svfiprintf_r+0x194>
 800ec04:	aa07      	add	r2, sp, #28
 800ec06:	9200      	str	r2, [sp, #0]
 800ec08:	0021      	movs	r1, r4
 800ec0a:	003a      	movs	r2, r7
 800ec0c:	4b0f      	ldr	r3, [pc, #60]	@ (800ec4c <_svfiprintf_r+0x1f8>)
 800ec0e:	9803      	ldr	r0, [sp, #12]
 800ec10:	e000      	b.n	800ec14 <_svfiprintf_r+0x1c0>
 800ec12:	bf00      	nop
 800ec14:	9004      	str	r0, [sp, #16]
 800ec16:	9b04      	ldr	r3, [sp, #16]
 800ec18:	3301      	adds	r3, #1
 800ec1a:	d1d6      	bne.n	800ebca <_svfiprintf_r+0x176>
 800ec1c:	89bb      	ldrh	r3, [r7, #12]
 800ec1e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800ec20:	065b      	lsls	r3, r3, #25
 800ec22:	d500      	bpl.n	800ec26 <_svfiprintf_r+0x1d2>
 800ec24:	e72c      	b.n	800ea80 <_svfiprintf_r+0x2c>
 800ec26:	b021      	add	sp, #132	@ 0x84
 800ec28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec2a:	aa07      	add	r2, sp, #28
 800ec2c:	9200      	str	r2, [sp, #0]
 800ec2e:	0021      	movs	r1, r4
 800ec30:	003a      	movs	r2, r7
 800ec32:	4b06      	ldr	r3, [pc, #24]	@ (800ec4c <_svfiprintf_r+0x1f8>)
 800ec34:	9803      	ldr	r0, [sp, #12]
 800ec36:	f000 f9bf 	bl	800efb8 <_printf_i>
 800ec3a:	e7eb      	b.n	800ec14 <_svfiprintf_r+0x1c0>
 800ec3c:	08010ac8 	.word	0x08010ac8
 800ec40:	08010ace 	.word	0x08010ace
 800ec44:	08010ad2 	.word	0x08010ad2
 800ec48:	00000000 	.word	0x00000000
 800ec4c:	0800e995 	.word	0x0800e995

0800ec50 <__sfputc_r>:
 800ec50:	6893      	ldr	r3, [r2, #8]
 800ec52:	b510      	push	{r4, lr}
 800ec54:	3b01      	subs	r3, #1
 800ec56:	6093      	str	r3, [r2, #8]
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	da04      	bge.n	800ec66 <__sfputc_r+0x16>
 800ec5c:	6994      	ldr	r4, [r2, #24]
 800ec5e:	42a3      	cmp	r3, r4
 800ec60:	db07      	blt.n	800ec72 <__sfputc_r+0x22>
 800ec62:	290a      	cmp	r1, #10
 800ec64:	d005      	beq.n	800ec72 <__sfputc_r+0x22>
 800ec66:	6813      	ldr	r3, [r2, #0]
 800ec68:	1c58      	adds	r0, r3, #1
 800ec6a:	6010      	str	r0, [r2, #0]
 800ec6c:	7019      	strb	r1, [r3, #0]
 800ec6e:	0008      	movs	r0, r1
 800ec70:	bd10      	pop	{r4, pc}
 800ec72:	f000 fb60 	bl	800f336 <__swbuf_r>
 800ec76:	0001      	movs	r1, r0
 800ec78:	e7f9      	b.n	800ec6e <__sfputc_r+0x1e>

0800ec7a <__sfputs_r>:
 800ec7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec7c:	0006      	movs	r6, r0
 800ec7e:	000f      	movs	r7, r1
 800ec80:	0014      	movs	r4, r2
 800ec82:	18d5      	adds	r5, r2, r3
 800ec84:	42ac      	cmp	r4, r5
 800ec86:	d101      	bne.n	800ec8c <__sfputs_r+0x12>
 800ec88:	2000      	movs	r0, #0
 800ec8a:	e007      	b.n	800ec9c <__sfputs_r+0x22>
 800ec8c:	7821      	ldrb	r1, [r4, #0]
 800ec8e:	003a      	movs	r2, r7
 800ec90:	0030      	movs	r0, r6
 800ec92:	f7ff ffdd 	bl	800ec50 <__sfputc_r>
 800ec96:	3401      	adds	r4, #1
 800ec98:	1c43      	adds	r3, r0, #1
 800ec9a:	d1f3      	bne.n	800ec84 <__sfputs_r+0xa>
 800ec9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800eca0 <_vfiprintf_r>:
 800eca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eca2:	b0a1      	sub	sp, #132	@ 0x84
 800eca4:	000f      	movs	r7, r1
 800eca6:	0015      	movs	r5, r2
 800eca8:	001e      	movs	r6, r3
 800ecaa:	9003      	str	r0, [sp, #12]
 800ecac:	2800      	cmp	r0, #0
 800ecae:	d004      	beq.n	800ecba <_vfiprintf_r+0x1a>
 800ecb0:	6a03      	ldr	r3, [r0, #32]
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d101      	bne.n	800ecba <_vfiprintf_r+0x1a>
 800ecb6:	f7fe fbe9 	bl	800d48c <__sinit>
 800ecba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ecbc:	07db      	lsls	r3, r3, #31
 800ecbe:	d405      	bmi.n	800eccc <_vfiprintf_r+0x2c>
 800ecc0:	89bb      	ldrh	r3, [r7, #12]
 800ecc2:	059b      	lsls	r3, r3, #22
 800ecc4:	d402      	bmi.n	800eccc <_vfiprintf_r+0x2c>
 800ecc6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800ecc8:	f7fe fd13 	bl	800d6f2 <__retarget_lock_acquire_recursive>
 800eccc:	89bb      	ldrh	r3, [r7, #12]
 800ecce:	071b      	lsls	r3, r3, #28
 800ecd0:	d502      	bpl.n	800ecd8 <_vfiprintf_r+0x38>
 800ecd2:	693b      	ldr	r3, [r7, #16]
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d113      	bne.n	800ed00 <_vfiprintf_r+0x60>
 800ecd8:	0039      	movs	r1, r7
 800ecda:	9803      	ldr	r0, [sp, #12]
 800ecdc:	f000 fb6e 	bl	800f3bc <__swsetup_r>
 800ece0:	2800      	cmp	r0, #0
 800ece2:	d00d      	beq.n	800ed00 <_vfiprintf_r+0x60>
 800ece4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ece6:	07db      	lsls	r3, r3, #31
 800ece8:	d503      	bpl.n	800ecf2 <_vfiprintf_r+0x52>
 800ecea:	2001      	movs	r0, #1
 800ecec:	4240      	negs	r0, r0
 800ecee:	b021      	add	sp, #132	@ 0x84
 800ecf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ecf2:	89bb      	ldrh	r3, [r7, #12]
 800ecf4:	059b      	lsls	r3, r3, #22
 800ecf6:	d4f8      	bmi.n	800ecea <_vfiprintf_r+0x4a>
 800ecf8:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800ecfa:	f7fe fcfb 	bl	800d6f4 <__retarget_lock_release_recursive>
 800ecfe:	e7f4      	b.n	800ecea <_vfiprintf_r+0x4a>
 800ed00:	2300      	movs	r3, #0
 800ed02:	ac08      	add	r4, sp, #32
 800ed04:	6163      	str	r3, [r4, #20]
 800ed06:	3320      	adds	r3, #32
 800ed08:	7663      	strb	r3, [r4, #25]
 800ed0a:	3310      	adds	r3, #16
 800ed0c:	76a3      	strb	r3, [r4, #26]
 800ed0e:	9607      	str	r6, [sp, #28]
 800ed10:	002e      	movs	r6, r5
 800ed12:	7833      	ldrb	r3, [r6, #0]
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d001      	beq.n	800ed1c <_vfiprintf_r+0x7c>
 800ed18:	2b25      	cmp	r3, #37	@ 0x25
 800ed1a:	d148      	bne.n	800edae <_vfiprintf_r+0x10e>
 800ed1c:	1b73      	subs	r3, r6, r5
 800ed1e:	9305      	str	r3, [sp, #20]
 800ed20:	42ae      	cmp	r6, r5
 800ed22:	d00b      	beq.n	800ed3c <_vfiprintf_r+0x9c>
 800ed24:	002a      	movs	r2, r5
 800ed26:	0039      	movs	r1, r7
 800ed28:	9803      	ldr	r0, [sp, #12]
 800ed2a:	f7ff ffa6 	bl	800ec7a <__sfputs_r>
 800ed2e:	3001      	adds	r0, #1
 800ed30:	d100      	bne.n	800ed34 <_vfiprintf_r+0x94>
 800ed32:	e0ae      	b.n	800ee92 <_vfiprintf_r+0x1f2>
 800ed34:	6963      	ldr	r3, [r4, #20]
 800ed36:	9a05      	ldr	r2, [sp, #20]
 800ed38:	189b      	adds	r3, r3, r2
 800ed3a:	6163      	str	r3, [r4, #20]
 800ed3c:	7833      	ldrb	r3, [r6, #0]
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d100      	bne.n	800ed44 <_vfiprintf_r+0xa4>
 800ed42:	e0a6      	b.n	800ee92 <_vfiprintf_r+0x1f2>
 800ed44:	2201      	movs	r2, #1
 800ed46:	2300      	movs	r3, #0
 800ed48:	4252      	negs	r2, r2
 800ed4a:	6062      	str	r2, [r4, #4]
 800ed4c:	a904      	add	r1, sp, #16
 800ed4e:	3254      	adds	r2, #84	@ 0x54
 800ed50:	1852      	adds	r2, r2, r1
 800ed52:	1c75      	adds	r5, r6, #1
 800ed54:	6023      	str	r3, [r4, #0]
 800ed56:	60e3      	str	r3, [r4, #12]
 800ed58:	60a3      	str	r3, [r4, #8]
 800ed5a:	7013      	strb	r3, [r2, #0]
 800ed5c:	65a3      	str	r3, [r4, #88]	@ 0x58
 800ed5e:	4b59      	ldr	r3, [pc, #356]	@ (800eec4 <_vfiprintf_r+0x224>)
 800ed60:	2205      	movs	r2, #5
 800ed62:	0018      	movs	r0, r3
 800ed64:	7829      	ldrb	r1, [r5, #0]
 800ed66:	9305      	str	r3, [sp, #20]
 800ed68:	f000 fbac 	bl	800f4c4 <memchr>
 800ed6c:	1c6e      	adds	r6, r5, #1
 800ed6e:	2800      	cmp	r0, #0
 800ed70:	d11f      	bne.n	800edb2 <_vfiprintf_r+0x112>
 800ed72:	6822      	ldr	r2, [r4, #0]
 800ed74:	06d3      	lsls	r3, r2, #27
 800ed76:	d504      	bpl.n	800ed82 <_vfiprintf_r+0xe2>
 800ed78:	2353      	movs	r3, #83	@ 0x53
 800ed7a:	a904      	add	r1, sp, #16
 800ed7c:	185b      	adds	r3, r3, r1
 800ed7e:	2120      	movs	r1, #32
 800ed80:	7019      	strb	r1, [r3, #0]
 800ed82:	0713      	lsls	r3, r2, #28
 800ed84:	d504      	bpl.n	800ed90 <_vfiprintf_r+0xf0>
 800ed86:	2353      	movs	r3, #83	@ 0x53
 800ed88:	a904      	add	r1, sp, #16
 800ed8a:	185b      	adds	r3, r3, r1
 800ed8c:	212b      	movs	r1, #43	@ 0x2b
 800ed8e:	7019      	strb	r1, [r3, #0]
 800ed90:	782b      	ldrb	r3, [r5, #0]
 800ed92:	2b2a      	cmp	r3, #42	@ 0x2a
 800ed94:	d016      	beq.n	800edc4 <_vfiprintf_r+0x124>
 800ed96:	002e      	movs	r6, r5
 800ed98:	2100      	movs	r1, #0
 800ed9a:	200a      	movs	r0, #10
 800ed9c:	68e3      	ldr	r3, [r4, #12]
 800ed9e:	7832      	ldrb	r2, [r6, #0]
 800eda0:	1c75      	adds	r5, r6, #1
 800eda2:	3a30      	subs	r2, #48	@ 0x30
 800eda4:	2a09      	cmp	r2, #9
 800eda6:	d950      	bls.n	800ee4a <_vfiprintf_r+0x1aa>
 800eda8:	2900      	cmp	r1, #0
 800edaa:	d111      	bne.n	800edd0 <_vfiprintf_r+0x130>
 800edac:	e017      	b.n	800edde <_vfiprintf_r+0x13e>
 800edae:	3601      	adds	r6, #1
 800edb0:	e7af      	b.n	800ed12 <_vfiprintf_r+0x72>
 800edb2:	9b05      	ldr	r3, [sp, #20]
 800edb4:	6822      	ldr	r2, [r4, #0]
 800edb6:	1ac0      	subs	r0, r0, r3
 800edb8:	2301      	movs	r3, #1
 800edba:	4083      	lsls	r3, r0
 800edbc:	4313      	orrs	r3, r2
 800edbe:	0035      	movs	r5, r6
 800edc0:	6023      	str	r3, [r4, #0]
 800edc2:	e7cc      	b.n	800ed5e <_vfiprintf_r+0xbe>
 800edc4:	9b07      	ldr	r3, [sp, #28]
 800edc6:	1d19      	adds	r1, r3, #4
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	9107      	str	r1, [sp, #28]
 800edcc:	2b00      	cmp	r3, #0
 800edce:	db01      	blt.n	800edd4 <_vfiprintf_r+0x134>
 800edd0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800edd2:	e004      	b.n	800edde <_vfiprintf_r+0x13e>
 800edd4:	425b      	negs	r3, r3
 800edd6:	60e3      	str	r3, [r4, #12]
 800edd8:	2302      	movs	r3, #2
 800edda:	4313      	orrs	r3, r2
 800eddc:	6023      	str	r3, [r4, #0]
 800edde:	7833      	ldrb	r3, [r6, #0]
 800ede0:	2b2e      	cmp	r3, #46	@ 0x2e
 800ede2:	d10c      	bne.n	800edfe <_vfiprintf_r+0x15e>
 800ede4:	7873      	ldrb	r3, [r6, #1]
 800ede6:	2b2a      	cmp	r3, #42	@ 0x2a
 800ede8:	d134      	bne.n	800ee54 <_vfiprintf_r+0x1b4>
 800edea:	9b07      	ldr	r3, [sp, #28]
 800edec:	3602      	adds	r6, #2
 800edee:	1d1a      	adds	r2, r3, #4
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	9207      	str	r2, [sp, #28]
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	da01      	bge.n	800edfc <_vfiprintf_r+0x15c>
 800edf8:	2301      	movs	r3, #1
 800edfa:	425b      	negs	r3, r3
 800edfc:	9309      	str	r3, [sp, #36]	@ 0x24
 800edfe:	4d32      	ldr	r5, [pc, #200]	@ (800eec8 <_vfiprintf_r+0x228>)
 800ee00:	2203      	movs	r2, #3
 800ee02:	0028      	movs	r0, r5
 800ee04:	7831      	ldrb	r1, [r6, #0]
 800ee06:	f000 fb5d 	bl	800f4c4 <memchr>
 800ee0a:	2800      	cmp	r0, #0
 800ee0c:	d006      	beq.n	800ee1c <_vfiprintf_r+0x17c>
 800ee0e:	2340      	movs	r3, #64	@ 0x40
 800ee10:	1b40      	subs	r0, r0, r5
 800ee12:	4083      	lsls	r3, r0
 800ee14:	6822      	ldr	r2, [r4, #0]
 800ee16:	3601      	adds	r6, #1
 800ee18:	4313      	orrs	r3, r2
 800ee1a:	6023      	str	r3, [r4, #0]
 800ee1c:	7831      	ldrb	r1, [r6, #0]
 800ee1e:	2206      	movs	r2, #6
 800ee20:	482a      	ldr	r0, [pc, #168]	@ (800eecc <_vfiprintf_r+0x22c>)
 800ee22:	1c75      	adds	r5, r6, #1
 800ee24:	7621      	strb	r1, [r4, #24]
 800ee26:	f000 fb4d 	bl	800f4c4 <memchr>
 800ee2a:	2800      	cmp	r0, #0
 800ee2c:	d040      	beq.n	800eeb0 <_vfiprintf_r+0x210>
 800ee2e:	4b28      	ldr	r3, [pc, #160]	@ (800eed0 <_vfiprintf_r+0x230>)
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d122      	bne.n	800ee7a <_vfiprintf_r+0x1da>
 800ee34:	2207      	movs	r2, #7
 800ee36:	9b07      	ldr	r3, [sp, #28]
 800ee38:	3307      	adds	r3, #7
 800ee3a:	4393      	bics	r3, r2
 800ee3c:	3308      	adds	r3, #8
 800ee3e:	9307      	str	r3, [sp, #28]
 800ee40:	6963      	ldr	r3, [r4, #20]
 800ee42:	9a04      	ldr	r2, [sp, #16]
 800ee44:	189b      	adds	r3, r3, r2
 800ee46:	6163      	str	r3, [r4, #20]
 800ee48:	e762      	b.n	800ed10 <_vfiprintf_r+0x70>
 800ee4a:	4343      	muls	r3, r0
 800ee4c:	002e      	movs	r6, r5
 800ee4e:	2101      	movs	r1, #1
 800ee50:	189b      	adds	r3, r3, r2
 800ee52:	e7a4      	b.n	800ed9e <_vfiprintf_r+0xfe>
 800ee54:	2300      	movs	r3, #0
 800ee56:	200a      	movs	r0, #10
 800ee58:	0019      	movs	r1, r3
 800ee5a:	3601      	adds	r6, #1
 800ee5c:	6063      	str	r3, [r4, #4]
 800ee5e:	7832      	ldrb	r2, [r6, #0]
 800ee60:	1c75      	adds	r5, r6, #1
 800ee62:	3a30      	subs	r2, #48	@ 0x30
 800ee64:	2a09      	cmp	r2, #9
 800ee66:	d903      	bls.n	800ee70 <_vfiprintf_r+0x1d0>
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d0c8      	beq.n	800edfe <_vfiprintf_r+0x15e>
 800ee6c:	9109      	str	r1, [sp, #36]	@ 0x24
 800ee6e:	e7c6      	b.n	800edfe <_vfiprintf_r+0x15e>
 800ee70:	4341      	muls	r1, r0
 800ee72:	002e      	movs	r6, r5
 800ee74:	2301      	movs	r3, #1
 800ee76:	1889      	adds	r1, r1, r2
 800ee78:	e7f1      	b.n	800ee5e <_vfiprintf_r+0x1be>
 800ee7a:	aa07      	add	r2, sp, #28
 800ee7c:	9200      	str	r2, [sp, #0]
 800ee7e:	0021      	movs	r1, r4
 800ee80:	003a      	movs	r2, r7
 800ee82:	4b14      	ldr	r3, [pc, #80]	@ (800eed4 <_vfiprintf_r+0x234>)
 800ee84:	9803      	ldr	r0, [sp, #12]
 800ee86:	e000      	b.n	800ee8a <_vfiprintf_r+0x1ea>
 800ee88:	bf00      	nop
 800ee8a:	9004      	str	r0, [sp, #16]
 800ee8c:	9b04      	ldr	r3, [sp, #16]
 800ee8e:	3301      	adds	r3, #1
 800ee90:	d1d6      	bne.n	800ee40 <_vfiprintf_r+0x1a0>
 800ee92:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ee94:	07db      	lsls	r3, r3, #31
 800ee96:	d405      	bmi.n	800eea4 <_vfiprintf_r+0x204>
 800ee98:	89bb      	ldrh	r3, [r7, #12]
 800ee9a:	059b      	lsls	r3, r3, #22
 800ee9c:	d402      	bmi.n	800eea4 <_vfiprintf_r+0x204>
 800ee9e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800eea0:	f7fe fc28 	bl	800d6f4 <__retarget_lock_release_recursive>
 800eea4:	89bb      	ldrh	r3, [r7, #12]
 800eea6:	065b      	lsls	r3, r3, #25
 800eea8:	d500      	bpl.n	800eeac <_vfiprintf_r+0x20c>
 800eeaa:	e71e      	b.n	800ecea <_vfiprintf_r+0x4a>
 800eeac:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800eeae:	e71e      	b.n	800ecee <_vfiprintf_r+0x4e>
 800eeb0:	aa07      	add	r2, sp, #28
 800eeb2:	9200      	str	r2, [sp, #0]
 800eeb4:	0021      	movs	r1, r4
 800eeb6:	003a      	movs	r2, r7
 800eeb8:	4b06      	ldr	r3, [pc, #24]	@ (800eed4 <_vfiprintf_r+0x234>)
 800eeba:	9803      	ldr	r0, [sp, #12]
 800eebc:	f000 f87c 	bl	800efb8 <_printf_i>
 800eec0:	e7e3      	b.n	800ee8a <_vfiprintf_r+0x1ea>
 800eec2:	46c0      	nop			@ (mov r8, r8)
 800eec4:	08010ac8 	.word	0x08010ac8
 800eec8:	08010ace 	.word	0x08010ace
 800eecc:	08010ad2 	.word	0x08010ad2
 800eed0:	00000000 	.word	0x00000000
 800eed4:	0800ec7b 	.word	0x0800ec7b

0800eed8 <_printf_common>:
 800eed8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800eeda:	0016      	movs	r6, r2
 800eedc:	9301      	str	r3, [sp, #4]
 800eede:	688a      	ldr	r2, [r1, #8]
 800eee0:	690b      	ldr	r3, [r1, #16]
 800eee2:	000c      	movs	r4, r1
 800eee4:	9000      	str	r0, [sp, #0]
 800eee6:	4293      	cmp	r3, r2
 800eee8:	da00      	bge.n	800eeec <_printf_common+0x14>
 800eeea:	0013      	movs	r3, r2
 800eeec:	0022      	movs	r2, r4
 800eeee:	6033      	str	r3, [r6, #0]
 800eef0:	3243      	adds	r2, #67	@ 0x43
 800eef2:	7812      	ldrb	r2, [r2, #0]
 800eef4:	2a00      	cmp	r2, #0
 800eef6:	d001      	beq.n	800eefc <_printf_common+0x24>
 800eef8:	3301      	adds	r3, #1
 800eefa:	6033      	str	r3, [r6, #0]
 800eefc:	6823      	ldr	r3, [r4, #0]
 800eefe:	069b      	lsls	r3, r3, #26
 800ef00:	d502      	bpl.n	800ef08 <_printf_common+0x30>
 800ef02:	6833      	ldr	r3, [r6, #0]
 800ef04:	3302      	adds	r3, #2
 800ef06:	6033      	str	r3, [r6, #0]
 800ef08:	6822      	ldr	r2, [r4, #0]
 800ef0a:	2306      	movs	r3, #6
 800ef0c:	0015      	movs	r5, r2
 800ef0e:	401d      	ands	r5, r3
 800ef10:	421a      	tst	r2, r3
 800ef12:	d027      	beq.n	800ef64 <_printf_common+0x8c>
 800ef14:	0023      	movs	r3, r4
 800ef16:	3343      	adds	r3, #67	@ 0x43
 800ef18:	781b      	ldrb	r3, [r3, #0]
 800ef1a:	1e5a      	subs	r2, r3, #1
 800ef1c:	4193      	sbcs	r3, r2
 800ef1e:	6822      	ldr	r2, [r4, #0]
 800ef20:	0692      	lsls	r2, r2, #26
 800ef22:	d430      	bmi.n	800ef86 <_printf_common+0xae>
 800ef24:	0022      	movs	r2, r4
 800ef26:	9901      	ldr	r1, [sp, #4]
 800ef28:	9800      	ldr	r0, [sp, #0]
 800ef2a:	9d08      	ldr	r5, [sp, #32]
 800ef2c:	3243      	adds	r2, #67	@ 0x43
 800ef2e:	47a8      	blx	r5
 800ef30:	3001      	adds	r0, #1
 800ef32:	d025      	beq.n	800ef80 <_printf_common+0xa8>
 800ef34:	2206      	movs	r2, #6
 800ef36:	6823      	ldr	r3, [r4, #0]
 800ef38:	2500      	movs	r5, #0
 800ef3a:	4013      	ands	r3, r2
 800ef3c:	2b04      	cmp	r3, #4
 800ef3e:	d105      	bne.n	800ef4c <_printf_common+0x74>
 800ef40:	6833      	ldr	r3, [r6, #0]
 800ef42:	68e5      	ldr	r5, [r4, #12]
 800ef44:	1aed      	subs	r5, r5, r3
 800ef46:	43eb      	mvns	r3, r5
 800ef48:	17db      	asrs	r3, r3, #31
 800ef4a:	401d      	ands	r5, r3
 800ef4c:	68a3      	ldr	r3, [r4, #8]
 800ef4e:	6922      	ldr	r2, [r4, #16]
 800ef50:	4293      	cmp	r3, r2
 800ef52:	dd01      	ble.n	800ef58 <_printf_common+0x80>
 800ef54:	1a9b      	subs	r3, r3, r2
 800ef56:	18ed      	adds	r5, r5, r3
 800ef58:	2600      	movs	r6, #0
 800ef5a:	42b5      	cmp	r5, r6
 800ef5c:	d120      	bne.n	800efa0 <_printf_common+0xc8>
 800ef5e:	2000      	movs	r0, #0
 800ef60:	e010      	b.n	800ef84 <_printf_common+0xac>
 800ef62:	3501      	adds	r5, #1
 800ef64:	68e3      	ldr	r3, [r4, #12]
 800ef66:	6832      	ldr	r2, [r6, #0]
 800ef68:	1a9b      	subs	r3, r3, r2
 800ef6a:	42ab      	cmp	r3, r5
 800ef6c:	ddd2      	ble.n	800ef14 <_printf_common+0x3c>
 800ef6e:	0022      	movs	r2, r4
 800ef70:	2301      	movs	r3, #1
 800ef72:	9901      	ldr	r1, [sp, #4]
 800ef74:	9800      	ldr	r0, [sp, #0]
 800ef76:	9f08      	ldr	r7, [sp, #32]
 800ef78:	3219      	adds	r2, #25
 800ef7a:	47b8      	blx	r7
 800ef7c:	3001      	adds	r0, #1
 800ef7e:	d1f0      	bne.n	800ef62 <_printf_common+0x8a>
 800ef80:	2001      	movs	r0, #1
 800ef82:	4240      	negs	r0, r0
 800ef84:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ef86:	2030      	movs	r0, #48	@ 0x30
 800ef88:	18e1      	adds	r1, r4, r3
 800ef8a:	3143      	adds	r1, #67	@ 0x43
 800ef8c:	7008      	strb	r0, [r1, #0]
 800ef8e:	0021      	movs	r1, r4
 800ef90:	1c5a      	adds	r2, r3, #1
 800ef92:	3145      	adds	r1, #69	@ 0x45
 800ef94:	7809      	ldrb	r1, [r1, #0]
 800ef96:	18a2      	adds	r2, r4, r2
 800ef98:	3243      	adds	r2, #67	@ 0x43
 800ef9a:	3302      	adds	r3, #2
 800ef9c:	7011      	strb	r1, [r2, #0]
 800ef9e:	e7c1      	b.n	800ef24 <_printf_common+0x4c>
 800efa0:	0022      	movs	r2, r4
 800efa2:	2301      	movs	r3, #1
 800efa4:	9901      	ldr	r1, [sp, #4]
 800efa6:	9800      	ldr	r0, [sp, #0]
 800efa8:	9f08      	ldr	r7, [sp, #32]
 800efaa:	321a      	adds	r2, #26
 800efac:	47b8      	blx	r7
 800efae:	3001      	adds	r0, #1
 800efb0:	d0e6      	beq.n	800ef80 <_printf_common+0xa8>
 800efb2:	3601      	adds	r6, #1
 800efb4:	e7d1      	b.n	800ef5a <_printf_common+0x82>
	...

0800efb8 <_printf_i>:
 800efb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800efba:	b08b      	sub	sp, #44	@ 0x2c
 800efbc:	9206      	str	r2, [sp, #24]
 800efbe:	000a      	movs	r2, r1
 800efc0:	3243      	adds	r2, #67	@ 0x43
 800efc2:	9307      	str	r3, [sp, #28]
 800efc4:	9005      	str	r0, [sp, #20]
 800efc6:	9203      	str	r2, [sp, #12]
 800efc8:	7e0a      	ldrb	r2, [r1, #24]
 800efca:	000c      	movs	r4, r1
 800efcc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800efce:	2a78      	cmp	r2, #120	@ 0x78
 800efd0:	d809      	bhi.n	800efe6 <_printf_i+0x2e>
 800efd2:	2a62      	cmp	r2, #98	@ 0x62
 800efd4:	d80b      	bhi.n	800efee <_printf_i+0x36>
 800efd6:	2a00      	cmp	r2, #0
 800efd8:	d100      	bne.n	800efdc <_printf_i+0x24>
 800efda:	e0bc      	b.n	800f156 <_printf_i+0x19e>
 800efdc:	497b      	ldr	r1, [pc, #492]	@ (800f1cc <_printf_i+0x214>)
 800efde:	9104      	str	r1, [sp, #16]
 800efe0:	2a58      	cmp	r2, #88	@ 0x58
 800efe2:	d100      	bne.n	800efe6 <_printf_i+0x2e>
 800efe4:	e090      	b.n	800f108 <_printf_i+0x150>
 800efe6:	0025      	movs	r5, r4
 800efe8:	3542      	adds	r5, #66	@ 0x42
 800efea:	702a      	strb	r2, [r5, #0]
 800efec:	e022      	b.n	800f034 <_printf_i+0x7c>
 800efee:	0010      	movs	r0, r2
 800eff0:	3863      	subs	r0, #99	@ 0x63
 800eff2:	2815      	cmp	r0, #21
 800eff4:	d8f7      	bhi.n	800efe6 <_printf_i+0x2e>
 800eff6:	f7f1 f8a1 	bl	800013c <__gnu_thumb1_case_shi>
 800effa:	0016      	.short	0x0016
 800effc:	fff6001f 	.word	0xfff6001f
 800f000:	fff6fff6 	.word	0xfff6fff6
 800f004:	001ffff6 	.word	0x001ffff6
 800f008:	fff6fff6 	.word	0xfff6fff6
 800f00c:	fff6fff6 	.word	0xfff6fff6
 800f010:	003600a1 	.word	0x003600a1
 800f014:	fff60080 	.word	0xfff60080
 800f018:	00b2fff6 	.word	0x00b2fff6
 800f01c:	0036fff6 	.word	0x0036fff6
 800f020:	fff6fff6 	.word	0xfff6fff6
 800f024:	0084      	.short	0x0084
 800f026:	0025      	movs	r5, r4
 800f028:	681a      	ldr	r2, [r3, #0]
 800f02a:	3542      	adds	r5, #66	@ 0x42
 800f02c:	1d11      	adds	r1, r2, #4
 800f02e:	6019      	str	r1, [r3, #0]
 800f030:	6813      	ldr	r3, [r2, #0]
 800f032:	702b      	strb	r3, [r5, #0]
 800f034:	2301      	movs	r3, #1
 800f036:	e0a0      	b.n	800f17a <_printf_i+0x1c2>
 800f038:	6818      	ldr	r0, [r3, #0]
 800f03a:	6809      	ldr	r1, [r1, #0]
 800f03c:	1d02      	adds	r2, r0, #4
 800f03e:	060d      	lsls	r5, r1, #24
 800f040:	d50b      	bpl.n	800f05a <_printf_i+0xa2>
 800f042:	6806      	ldr	r6, [r0, #0]
 800f044:	601a      	str	r2, [r3, #0]
 800f046:	2e00      	cmp	r6, #0
 800f048:	da03      	bge.n	800f052 <_printf_i+0x9a>
 800f04a:	232d      	movs	r3, #45	@ 0x2d
 800f04c:	9a03      	ldr	r2, [sp, #12]
 800f04e:	4276      	negs	r6, r6
 800f050:	7013      	strb	r3, [r2, #0]
 800f052:	4b5e      	ldr	r3, [pc, #376]	@ (800f1cc <_printf_i+0x214>)
 800f054:	270a      	movs	r7, #10
 800f056:	9304      	str	r3, [sp, #16]
 800f058:	e018      	b.n	800f08c <_printf_i+0xd4>
 800f05a:	6806      	ldr	r6, [r0, #0]
 800f05c:	601a      	str	r2, [r3, #0]
 800f05e:	0649      	lsls	r1, r1, #25
 800f060:	d5f1      	bpl.n	800f046 <_printf_i+0x8e>
 800f062:	b236      	sxth	r6, r6
 800f064:	e7ef      	b.n	800f046 <_printf_i+0x8e>
 800f066:	6808      	ldr	r0, [r1, #0]
 800f068:	6819      	ldr	r1, [r3, #0]
 800f06a:	c940      	ldmia	r1!, {r6}
 800f06c:	0605      	lsls	r5, r0, #24
 800f06e:	d402      	bmi.n	800f076 <_printf_i+0xbe>
 800f070:	0640      	lsls	r0, r0, #25
 800f072:	d500      	bpl.n	800f076 <_printf_i+0xbe>
 800f074:	b2b6      	uxth	r6, r6
 800f076:	6019      	str	r1, [r3, #0]
 800f078:	4b54      	ldr	r3, [pc, #336]	@ (800f1cc <_printf_i+0x214>)
 800f07a:	270a      	movs	r7, #10
 800f07c:	9304      	str	r3, [sp, #16]
 800f07e:	2a6f      	cmp	r2, #111	@ 0x6f
 800f080:	d100      	bne.n	800f084 <_printf_i+0xcc>
 800f082:	3f02      	subs	r7, #2
 800f084:	0023      	movs	r3, r4
 800f086:	2200      	movs	r2, #0
 800f088:	3343      	adds	r3, #67	@ 0x43
 800f08a:	701a      	strb	r2, [r3, #0]
 800f08c:	6863      	ldr	r3, [r4, #4]
 800f08e:	60a3      	str	r3, [r4, #8]
 800f090:	2b00      	cmp	r3, #0
 800f092:	db03      	blt.n	800f09c <_printf_i+0xe4>
 800f094:	2104      	movs	r1, #4
 800f096:	6822      	ldr	r2, [r4, #0]
 800f098:	438a      	bics	r2, r1
 800f09a:	6022      	str	r2, [r4, #0]
 800f09c:	2e00      	cmp	r6, #0
 800f09e:	d102      	bne.n	800f0a6 <_printf_i+0xee>
 800f0a0:	9d03      	ldr	r5, [sp, #12]
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d00c      	beq.n	800f0c0 <_printf_i+0x108>
 800f0a6:	9d03      	ldr	r5, [sp, #12]
 800f0a8:	0030      	movs	r0, r6
 800f0aa:	0039      	movs	r1, r7
 800f0ac:	f7f1 f8d6 	bl	800025c <__aeabi_uidivmod>
 800f0b0:	9b04      	ldr	r3, [sp, #16]
 800f0b2:	3d01      	subs	r5, #1
 800f0b4:	5c5b      	ldrb	r3, [r3, r1]
 800f0b6:	702b      	strb	r3, [r5, #0]
 800f0b8:	0033      	movs	r3, r6
 800f0ba:	0006      	movs	r6, r0
 800f0bc:	429f      	cmp	r7, r3
 800f0be:	d9f3      	bls.n	800f0a8 <_printf_i+0xf0>
 800f0c0:	2f08      	cmp	r7, #8
 800f0c2:	d109      	bne.n	800f0d8 <_printf_i+0x120>
 800f0c4:	6823      	ldr	r3, [r4, #0]
 800f0c6:	07db      	lsls	r3, r3, #31
 800f0c8:	d506      	bpl.n	800f0d8 <_printf_i+0x120>
 800f0ca:	6862      	ldr	r2, [r4, #4]
 800f0cc:	6923      	ldr	r3, [r4, #16]
 800f0ce:	429a      	cmp	r2, r3
 800f0d0:	dc02      	bgt.n	800f0d8 <_printf_i+0x120>
 800f0d2:	2330      	movs	r3, #48	@ 0x30
 800f0d4:	3d01      	subs	r5, #1
 800f0d6:	702b      	strb	r3, [r5, #0]
 800f0d8:	9b03      	ldr	r3, [sp, #12]
 800f0da:	1b5b      	subs	r3, r3, r5
 800f0dc:	6123      	str	r3, [r4, #16]
 800f0de:	9b07      	ldr	r3, [sp, #28]
 800f0e0:	0021      	movs	r1, r4
 800f0e2:	9300      	str	r3, [sp, #0]
 800f0e4:	9805      	ldr	r0, [sp, #20]
 800f0e6:	9b06      	ldr	r3, [sp, #24]
 800f0e8:	aa09      	add	r2, sp, #36	@ 0x24
 800f0ea:	f7ff fef5 	bl	800eed8 <_printf_common>
 800f0ee:	3001      	adds	r0, #1
 800f0f0:	d148      	bne.n	800f184 <_printf_i+0x1cc>
 800f0f2:	2001      	movs	r0, #1
 800f0f4:	4240      	negs	r0, r0
 800f0f6:	b00b      	add	sp, #44	@ 0x2c
 800f0f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f0fa:	2220      	movs	r2, #32
 800f0fc:	6809      	ldr	r1, [r1, #0]
 800f0fe:	430a      	orrs	r2, r1
 800f100:	6022      	str	r2, [r4, #0]
 800f102:	2278      	movs	r2, #120	@ 0x78
 800f104:	4932      	ldr	r1, [pc, #200]	@ (800f1d0 <_printf_i+0x218>)
 800f106:	9104      	str	r1, [sp, #16]
 800f108:	0021      	movs	r1, r4
 800f10a:	3145      	adds	r1, #69	@ 0x45
 800f10c:	700a      	strb	r2, [r1, #0]
 800f10e:	6819      	ldr	r1, [r3, #0]
 800f110:	6822      	ldr	r2, [r4, #0]
 800f112:	c940      	ldmia	r1!, {r6}
 800f114:	0610      	lsls	r0, r2, #24
 800f116:	d402      	bmi.n	800f11e <_printf_i+0x166>
 800f118:	0650      	lsls	r0, r2, #25
 800f11a:	d500      	bpl.n	800f11e <_printf_i+0x166>
 800f11c:	b2b6      	uxth	r6, r6
 800f11e:	6019      	str	r1, [r3, #0]
 800f120:	07d3      	lsls	r3, r2, #31
 800f122:	d502      	bpl.n	800f12a <_printf_i+0x172>
 800f124:	2320      	movs	r3, #32
 800f126:	4313      	orrs	r3, r2
 800f128:	6023      	str	r3, [r4, #0]
 800f12a:	2e00      	cmp	r6, #0
 800f12c:	d001      	beq.n	800f132 <_printf_i+0x17a>
 800f12e:	2710      	movs	r7, #16
 800f130:	e7a8      	b.n	800f084 <_printf_i+0xcc>
 800f132:	2220      	movs	r2, #32
 800f134:	6823      	ldr	r3, [r4, #0]
 800f136:	4393      	bics	r3, r2
 800f138:	6023      	str	r3, [r4, #0]
 800f13a:	e7f8      	b.n	800f12e <_printf_i+0x176>
 800f13c:	681a      	ldr	r2, [r3, #0]
 800f13e:	680d      	ldr	r5, [r1, #0]
 800f140:	1d10      	adds	r0, r2, #4
 800f142:	6949      	ldr	r1, [r1, #20]
 800f144:	6018      	str	r0, [r3, #0]
 800f146:	6813      	ldr	r3, [r2, #0]
 800f148:	062e      	lsls	r6, r5, #24
 800f14a:	d501      	bpl.n	800f150 <_printf_i+0x198>
 800f14c:	6019      	str	r1, [r3, #0]
 800f14e:	e002      	b.n	800f156 <_printf_i+0x19e>
 800f150:	066d      	lsls	r5, r5, #25
 800f152:	d5fb      	bpl.n	800f14c <_printf_i+0x194>
 800f154:	8019      	strh	r1, [r3, #0]
 800f156:	2300      	movs	r3, #0
 800f158:	9d03      	ldr	r5, [sp, #12]
 800f15a:	6123      	str	r3, [r4, #16]
 800f15c:	e7bf      	b.n	800f0de <_printf_i+0x126>
 800f15e:	681a      	ldr	r2, [r3, #0]
 800f160:	1d11      	adds	r1, r2, #4
 800f162:	6019      	str	r1, [r3, #0]
 800f164:	6815      	ldr	r5, [r2, #0]
 800f166:	2100      	movs	r1, #0
 800f168:	0028      	movs	r0, r5
 800f16a:	6862      	ldr	r2, [r4, #4]
 800f16c:	f000 f9aa 	bl	800f4c4 <memchr>
 800f170:	2800      	cmp	r0, #0
 800f172:	d001      	beq.n	800f178 <_printf_i+0x1c0>
 800f174:	1b40      	subs	r0, r0, r5
 800f176:	6060      	str	r0, [r4, #4]
 800f178:	6863      	ldr	r3, [r4, #4]
 800f17a:	6123      	str	r3, [r4, #16]
 800f17c:	2300      	movs	r3, #0
 800f17e:	9a03      	ldr	r2, [sp, #12]
 800f180:	7013      	strb	r3, [r2, #0]
 800f182:	e7ac      	b.n	800f0de <_printf_i+0x126>
 800f184:	002a      	movs	r2, r5
 800f186:	6923      	ldr	r3, [r4, #16]
 800f188:	9906      	ldr	r1, [sp, #24]
 800f18a:	9805      	ldr	r0, [sp, #20]
 800f18c:	9d07      	ldr	r5, [sp, #28]
 800f18e:	47a8      	blx	r5
 800f190:	3001      	adds	r0, #1
 800f192:	d0ae      	beq.n	800f0f2 <_printf_i+0x13a>
 800f194:	6823      	ldr	r3, [r4, #0]
 800f196:	079b      	lsls	r3, r3, #30
 800f198:	d415      	bmi.n	800f1c6 <_printf_i+0x20e>
 800f19a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f19c:	68e0      	ldr	r0, [r4, #12]
 800f19e:	4298      	cmp	r0, r3
 800f1a0:	daa9      	bge.n	800f0f6 <_printf_i+0x13e>
 800f1a2:	0018      	movs	r0, r3
 800f1a4:	e7a7      	b.n	800f0f6 <_printf_i+0x13e>
 800f1a6:	0022      	movs	r2, r4
 800f1a8:	2301      	movs	r3, #1
 800f1aa:	9906      	ldr	r1, [sp, #24]
 800f1ac:	9805      	ldr	r0, [sp, #20]
 800f1ae:	9e07      	ldr	r6, [sp, #28]
 800f1b0:	3219      	adds	r2, #25
 800f1b2:	47b0      	blx	r6
 800f1b4:	3001      	adds	r0, #1
 800f1b6:	d09c      	beq.n	800f0f2 <_printf_i+0x13a>
 800f1b8:	3501      	adds	r5, #1
 800f1ba:	68e3      	ldr	r3, [r4, #12]
 800f1bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f1be:	1a9b      	subs	r3, r3, r2
 800f1c0:	42ab      	cmp	r3, r5
 800f1c2:	dcf0      	bgt.n	800f1a6 <_printf_i+0x1ee>
 800f1c4:	e7e9      	b.n	800f19a <_printf_i+0x1e2>
 800f1c6:	2500      	movs	r5, #0
 800f1c8:	e7f7      	b.n	800f1ba <_printf_i+0x202>
 800f1ca:	46c0      	nop			@ (mov r8, r8)
 800f1cc:	08010ad9 	.word	0x08010ad9
 800f1d0:	08010aea 	.word	0x08010aea

0800f1d4 <__sflush_r>:
 800f1d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f1d6:	220c      	movs	r2, #12
 800f1d8:	5e8b      	ldrsh	r3, [r1, r2]
 800f1da:	0005      	movs	r5, r0
 800f1dc:	000c      	movs	r4, r1
 800f1de:	071a      	lsls	r2, r3, #28
 800f1e0:	d456      	bmi.n	800f290 <__sflush_r+0xbc>
 800f1e2:	684a      	ldr	r2, [r1, #4]
 800f1e4:	2a00      	cmp	r2, #0
 800f1e6:	dc02      	bgt.n	800f1ee <__sflush_r+0x1a>
 800f1e8:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800f1ea:	2a00      	cmp	r2, #0
 800f1ec:	dd4e      	ble.n	800f28c <__sflush_r+0xb8>
 800f1ee:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800f1f0:	2f00      	cmp	r7, #0
 800f1f2:	d04b      	beq.n	800f28c <__sflush_r+0xb8>
 800f1f4:	2200      	movs	r2, #0
 800f1f6:	2080      	movs	r0, #128	@ 0x80
 800f1f8:	682e      	ldr	r6, [r5, #0]
 800f1fa:	602a      	str	r2, [r5, #0]
 800f1fc:	001a      	movs	r2, r3
 800f1fe:	0140      	lsls	r0, r0, #5
 800f200:	6a21      	ldr	r1, [r4, #32]
 800f202:	4002      	ands	r2, r0
 800f204:	4203      	tst	r3, r0
 800f206:	d033      	beq.n	800f270 <__sflush_r+0x9c>
 800f208:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f20a:	89a3      	ldrh	r3, [r4, #12]
 800f20c:	075b      	lsls	r3, r3, #29
 800f20e:	d506      	bpl.n	800f21e <__sflush_r+0x4a>
 800f210:	6863      	ldr	r3, [r4, #4]
 800f212:	1ad2      	subs	r2, r2, r3
 800f214:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f216:	2b00      	cmp	r3, #0
 800f218:	d001      	beq.n	800f21e <__sflush_r+0x4a>
 800f21a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f21c:	1ad2      	subs	r2, r2, r3
 800f21e:	2300      	movs	r3, #0
 800f220:	0028      	movs	r0, r5
 800f222:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800f224:	6a21      	ldr	r1, [r4, #32]
 800f226:	47b8      	blx	r7
 800f228:	89a2      	ldrh	r2, [r4, #12]
 800f22a:	1c43      	adds	r3, r0, #1
 800f22c:	d106      	bne.n	800f23c <__sflush_r+0x68>
 800f22e:	6829      	ldr	r1, [r5, #0]
 800f230:	291d      	cmp	r1, #29
 800f232:	d846      	bhi.n	800f2c2 <__sflush_r+0xee>
 800f234:	4b29      	ldr	r3, [pc, #164]	@ (800f2dc <__sflush_r+0x108>)
 800f236:	410b      	asrs	r3, r1
 800f238:	07db      	lsls	r3, r3, #31
 800f23a:	d442      	bmi.n	800f2c2 <__sflush_r+0xee>
 800f23c:	2300      	movs	r3, #0
 800f23e:	6063      	str	r3, [r4, #4]
 800f240:	6923      	ldr	r3, [r4, #16]
 800f242:	6023      	str	r3, [r4, #0]
 800f244:	04d2      	lsls	r2, r2, #19
 800f246:	d505      	bpl.n	800f254 <__sflush_r+0x80>
 800f248:	1c43      	adds	r3, r0, #1
 800f24a:	d102      	bne.n	800f252 <__sflush_r+0x7e>
 800f24c:	682b      	ldr	r3, [r5, #0]
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d100      	bne.n	800f254 <__sflush_r+0x80>
 800f252:	6560      	str	r0, [r4, #84]	@ 0x54
 800f254:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f256:	602e      	str	r6, [r5, #0]
 800f258:	2900      	cmp	r1, #0
 800f25a:	d017      	beq.n	800f28c <__sflush_r+0xb8>
 800f25c:	0023      	movs	r3, r4
 800f25e:	3344      	adds	r3, #68	@ 0x44
 800f260:	4299      	cmp	r1, r3
 800f262:	d002      	beq.n	800f26a <__sflush_r+0x96>
 800f264:	0028      	movs	r0, r5
 800f266:	f7fe fa55 	bl	800d714 <_free_r>
 800f26a:	2300      	movs	r3, #0
 800f26c:	6363      	str	r3, [r4, #52]	@ 0x34
 800f26e:	e00d      	b.n	800f28c <__sflush_r+0xb8>
 800f270:	2301      	movs	r3, #1
 800f272:	0028      	movs	r0, r5
 800f274:	47b8      	blx	r7
 800f276:	0002      	movs	r2, r0
 800f278:	1c43      	adds	r3, r0, #1
 800f27a:	d1c6      	bne.n	800f20a <__sflush_r+0x36>
 800f27c:	682b      	ldr	r3, [r5, #0]
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d0c3      	beq.n	800f20a <__sflush_r+0x36>
 800f282:	2b1d      	cmp	r3, #29
 800f284:	d001      	beq.n	800f28a <__sflush_r+0xb6>
 800f286:	2b16      	cmp	r3, #22
 800f288:	d11a      	bne.n	800f2c0 <__sflush_r+0xec>
 800f28a:	602e      	str	r6, [r5, #0]
 800f28c:	2000      	movs	r0, #0
 800f28e:	e01e      	b.n	800f2ce <__sflush_r+0xfa>
 800f290:	690e      	ldr	r6, [r1, #16]
 800f292:	2e00      	cmp	r6, #0
 800f294:	d0fa      	beq.n	800f28c <__sflush_r+0xb8>
 800f296:	680f      	ldr	r7, [r1, #0]
 800f298:	600e      	str	r6, [r1, #0]
 800f29a:	1bba      	subs	r2, r7, r6
 800f29c:	9201      	str	r2, [sp, #4]
 800f29e:	2200      	movs	r2, #0
 800f2a0:	079b      	lsls	r3, r3, #30
 800f2a2:	d100      	bne.n	800f2a6 <__sflush_r+0xd2>
 800f2a4:	694a      	ldr	r2, [r1, #20]
 800f2a6:	60a2      	str	r2, [r4, #8]
 800f2a8:	9b01      	ldr	r3, [sp, #4]
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	ddee      	ble.n	800f28c <__sflush_r+0xb8>
 800f2ae:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800f2b0:	0032      	movs	r2, r6
 800f2b2:	001f      	movs	r7, r3
 800f2b4:	0028      	movs	r0, r5
 800f2b6:	9b01      	ldr	r3, [sp, #4]
 800f2b8:	6a21      	ldr	r1, [r4, #32]
 800f2ba:	47b8      	blx	r7
 800f2bc:	2800      	cmp	r0, #0
 800f2be:	dc07      	bgt.n	800f2d0 <__sflush_r+0xfc>
 800f2c0:	89a2      	ldrh	r2, [r4, #12]
 800f2c2:	2340      	movs	r3, #64	@ 0x40
 800f2c4:	2001      	movs	r0, #1
 800f2c6:	4313      	orrs	r3, r2
 800f2c8:	b21b      	sxth	r3, r3
 800f2ca:	81a3      	strh	r3, [r4, #12]
 800f2cc:	4240      	negs	r0, r0
 800f2ce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f2d0:	9b01      	ldr	r3, [sp, #4]
 800f2d2:	1836      	adds	r6, r6, r0
 800f2d4:	1a1b      	subs	r3, r3, r0
 800f2d6:	9301      	str	r3, [sp, #4]
 800f2d8:	e7e6      	b.n	800f2a8 <__sflush_r+0xd4>
 800f2da:	46c0      	nop			@ (mov r8, r8)
 800f2dc:	dfbffffe 	.word	0xdfbffffe

0800f2e0 <_fflush_r>:
 800f2e0:	690b      	ldr	r3, [r1, #16]
 800f2e2:	b570      	push	{r4, r5, r6, lr}
 800f2e4:	0005      	movs	r5, r0
 800f2e6:	000c      	movs	r4, r1
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d102      	bne.n	800f2f2 <_fflush_r+0x12>
 800f2ec:	2500      	movs	r5, #0
 800f2ee:	0028      	movs	r0, r5
 800f2f0:	bd70      	pop	{r4, r5, r6, pc}
 800f2f2:	2800      	cmp	r0, #0
 800f2f4:	d004      	beq.n	800f300 <_fflush_r+0x20>
 800f2f6:	6a03      	ldr	r3, [r0, #32]
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d101      	bne.n	800f300 <_fflush_r+0x20>
 800f2fc:	f7fe f8c6 	bl	800d48c <__sinit>
 800f300:	220c      	movs	r2, #12
 800f302:	5ea3      	ldrsh	r3, [r4, r2]
 800f304:	2b00      	cmp	r3, #0
 800f306:	d0f1      	beq.n	800f2ec <_fflush_r+0xc>
 800f308:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f30a:	07d2      	lsls	r2, r2, #31
 800f30c:	d404      	bmi.n	800f318 <_fflush_r+0x38>
 800f30e:	059b      	lsls	r3, r3, #22
 800f310:	d402      	bmi.n	800f318 <_fflush_r+0x38>
 800f312:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f314:	f7fe f9ed 	bl	800d6f2 <__retarget_lock_acquire_recursive>
 800f318:	0028      	movs	r0, r5
 800f31a:	0021      	movs	r1, r4
 800f31c:	f7ff ff5a 	bl	800f1d4 <__sflush_r>
 800f320:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f322:	0005      	movs	r5, r0
 800f324:	07db      	lsls	r3, r3, #31
 800f326:	d4e2      	bmi.n	800f2ee <_fflush_r+0xe>
 800f328:	89a3      	ldrh	r3, [r4, #12]
 800f32a:	059b      	lsls	r3, r3, #22
 800f32c:	d4df      	bmi.n	800f2ee <_fflush_r+0xe>
 800f32e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f330:	f7fe f9e0 	bl	800d6f4 <__retarget_lock_release_recursive>
 800f334:	e7db      	b.n	800f2ee <_fflush_r+0xe>

0800f336 <__swbuf_r>:
 800f336:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f338:	0006      	movs	r6, r0
 800f33a:	000d      	movs	r5, r1
 800f33c:	0014      	movs	r4, r2
 800f33e:	2800      	cmp	r0, #0
 800f340:	d004      	beq.n	800f34c <__swbuf_r+0x16>
 800f342:	6a03      	ldr	r3, [r0, #32]
 800f344:	2b00      	cmp	r3, #0
 800f346:	d101      	bne.n	800f34c <__swbuf_r+0x16>
 800f348:	f7fe f8a0 	bl	800d48c <__sinit>
 800f34c:	69a3      	ldr	r3, [r4, #24]
 800f34e:	60a3      	str	r3, [r4, #8]
 800f350:	89a3      	ldrh	r3, [r4, #12]
 800f352:	071b      	lsls	r3, r3, #28
 800f354:	d502      	bpl.n	800f35c <__swbuf_r+0x26>
 800f356:	6923      	ldr	r3, [r4, #16]
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d109      	bne.n	800f370 <__swbuf_r+0x3a>
 800f35c:	0021      	movs	r1, r4
 800f35e:	0030      	movs	r0, r6
 800f360:	f000 f82c 	bl	800f3bc <__swsetup_r>
 800f364:	2800      	cmp	r0, #0
 800f366:	d003      	beq.n	800f370 <__swbuf_r+0x3a>
 800f368:	2501      	movs	r5, #1
 800f36a:	426d      	negs	r5, r5
 800f36c:	0028      	movs	r0, r5
 800f36e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f370:	6923      	ldr	r3, [r4, #16]
 800f372:	6820      	ldr	r0, [r4, #0]
 800f374:	b2ef      	uxtb	r7, r5
 800f376:	1ac0      	subs	r0, r0, r3
 800f378:	6963      	ldr	r3, [r4, #20]
 800f37a:	b2ed      	uxtb	r5, r5
 800f37c:	4283      	cmp	r3, r0
 800f37e:	dc05      	bgt.n	800f38c <__swbuf_r+0x56>
 800f380:	0021      	movs	r1, r4
 800f382:	0030      	movs	r0, r6
 800f384:	f7ff ffac 	bl	800f2e0 <_fflush_r>
 800f388:	2800      	cmp	r0, #0
 800f38a:	d1ed      	bne.n	800f368 <__swbuf_r+0x32>
 800f38c:	68a3      	ldr	r3, [r4, #8]
 800f38e:	3001      	adds	r0, #1
 800f390:	3b01      	subs	r3, #1
 800f392:	60a3      	str	r3, [r4, #8]
 800f394:	6823      	ldr	r3, [r4, #0]
 800f396:	1c5a      	adds	r2, r3, #1
 800f398:	6022      	str	r2, [r4, #0]
 800f39a:	701f      	strb	r7, [r3, #0]
 800f39c:	6963      	ldr	r3, [r4, #20]
 800f39e:	4283      	cmp	r3, r0
 800f3a0:	d004      	beq.n	800f3ac <__swbuf_r+0x76>
 800f3a2:	89a3      	ldrh	r3, [r4, #12]
 800f3a4:	07db      	lsls	r3, r3, #31
 800f3a6:	d5e1      	bpl.n	800f36c <__swbuf_r+0x36>
 800f3a8:	2d0a      	cmp	r5, #10
 800f3aa:	d1df      	bne.n	800f36c <__swbuf_r+0x36>
 800f3ac:	0021      	movs	r1, r4
 800f3ae:	0030      	movs	r0, r6
 800f3b0:	f7ff ff96 	bl	800f2e0 <_fflush_r>
 800f3b4:	2800      	cmp	r0, #0
 800f3b6:	d0d9      	beq.n	800f36c <__swbuf_r+0x36>
 800f3b8:	e7d6      	b.n	800f368 <__swbuf_r+0x32>
	...

0800f3bc <__swsetup_r>:
 800f3bc:	4b2d      	ldr	r3, [pc, #180]	@ (800f474 <__swsetup_r+0xb8>)
 800f3be:	b570      	push	{r4, r5, r6, lr}
 800f3c0:	0005      	movs	r5, r0
 800f3c2:	6818      	ldr	r0, [r3, #0]
 800f3c4:	000c      	movs	r4, r1
 800f3c6:	2800      	cmp	r0, #0
 800f3c8:	d004      	beq.n	800f3d4 <__swsetup_r+0x18>
 800f3ca:	6a03      	ldr	r3, [r0, #32]
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d101      	bne.n	800f3d4 <__swsetup_r+0x18>
 800f3d0:	f7fe f85c 	bl	800d48c <__sinit>
 800f3d4:	230c      	movs	r3, #12
 800f3d6:	5ee2      	ldrsh	r2, [r4, r3]
 800f3d8:	0713      	lsls	r3, r2, #28
 800f3da:	d423      	bmi.n	800f424 <__swsetup_r+0x68>
 800f3dc:	06d3      	lsls	r3, r2, #27
 800f3de:	d407      	bmi.n	800f3f0 <__swsetup_r+0x34>
 800f3e0:	2309      	movs	r3, #9
 800f3e2:	602b      	str	r3, [r5, #0]
 800f3e4:	2340      	movs	r3, #64	@ 0x40
 800f3e6:	2001      	movs	r0, #1
 800f3e8:	4313      	orrs	r3, r2
 800f3ea:	81a3      	strh	r3, [r4, #12]
 800f3ec:	4240      	negs	r0, r0
 800f3ee:	e03a      	b.n	800f466 <__swsetup_r+0xaa>
 800f3f0:	0752      	lsls	r2, r2, #29
 800f3f2:	d513      	bpl.n	800f41c <__swsetup_r+0x60>
 800f3f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f3f6:	2900      	cmp	r1, #0
 800f3f8:	d008      	beq.n	800f40c <__swsetup_r+0x50>
 800f3fa:	0023      	movs	r3, r4
 800f3fc:	3344      	adds	r3, #68	@ 0x44
 800f3fe:	4299      	cmp	r1, r3
 800f400:	d002      	beq.n	800f408 <__swsetup_r+0x4c>
 800f402:	0028      	movs	r0, r5
 800f404:	f7fe f986 	bl	800d714 <_free_r>
 800f408:	2300      	movs	r3, #0
 800f40a:	6363      	str	r3, [r4, #52]	@ 0x34
 800f40c:	2224      	movs	r2, #36	@ 0x24
 800f40e:	89a3      	ldrh	r3, [r4, #12]
 800f410:	4393      	bics	r3, r2
 800f412:	81a3      	strh	r3, [r4, #12]
 800f414:	2300      	movs	r3, #0
 800f416:	6063      	str	r3, [r4, #4]
 800f418:	6923      	ldr	r3, [r4, #16]
 800f41a:	6023      	str	r3, [r4, #0]
 800f41c:	2308      	movs	r3, #8
 800f41e:	89a2      	ldrh	r2, [r4, #12]
 800f420:	4313      	orrs	r3, r2
 800f422:	81a3      	strh	r3, [r4, #12]
 800f424:	6923      	ldr	r3, [r4, #16]
 800f426:	2b00      	cmp	r3, #0
 800f428:	d10b      	bne.n	800f442 <__swsetup_r+0x86>
 800f42a:	21a0      	movs	r1, #160	@ 0xa0
 800f42c:	2280      	movs	r2, #128	@ 0x80
 800f42e:	89a3      	ldrh	r3, [r4, #12]
 800f430:	0089      	lsls	r1, r1, #2
 800f432:	0092      	lsls	r2, r2, #2
 800f434:	400b      	ands	r3, r1
 800f436:	4293      	cmp	r3, r2
 800f438:	d003      	beq.n	800f442 <__swsetup_r+0x86>
 800f43a:	0021      	movs	r1, r4
 800f43c:	0028      	movs	r0, r5
 800f43e:	f000 f90d 	bl	800f65c <__smakebuf_r>
 800f442:	230c      	movs	r3, #12
 800f444:	5ee2      	ldrsh	r2, [r4, r3]
 800f446:	2101      	movs	r1, #1
 800f448:	0013      	movs	r3, r2
 800f44a:	400b      	ands	r3, r1
 800f44c:	420a      	tst	r2, r1
 800f44e:	d00b      	beq.n	800f468 <__swsetup_r+0xac>
 800f450:	2300      	movs	r3, #0
 800f452:	60a3      	str	r3, [r4, #8]
 800f454:	6963      	ldr	r3, [r4, #20]
 800f456:	425b      	negs	r3, r3
 800f458:	61a3      	str	r3, [r4, #24]
 800f45a:	2000      	movs	r0, #0
 800f45c:	6923      	ldr	r3, [r4, #16]
 800f45e:	4283      	cmp	r3, r0
 800f460:	d101      	bne.n	800f466 <__swsetup_r+0xaa>
 800f462:	0613      	lsls	r3, r2, #24
 800f464:	d4be      	bmi.n	800f3e4 <__swsetup_r+0x28>
 800f466:	bd70      	pop	{r4, r5, r6, pc}
 800f468:	0791      	lsls	r1, r2, #30
 800f46a:	d400      	bmi.n	800f46e <__swsetup_r+0xb2>
 800f46c:	6963      	ldr	r3, [r4, #20]
 800f46e:	60a3      	str	r3, [r4, #8]
 800f470:	e7f3      	b.n	800f45a <__swsetup_r+0x9e>
 800f472:	46c0      	nop			@ (mov r8, r8)
 800f474:	20000b4c 	.word	0x20000b4c

0800f478 <memmove>:
 800f478:	b510      	push	{r4, lr}
 800f47a:	4288      	cmp	r0, r1
 800f47c:	d806      	bhi.n	800f48c <memmove+0x14>
 800f47e:	2300      	movs	r3, #0
 800f480:	429a      	cmp	r2, r3
 800f482:	d008      	beq.n	800f496 <memmove+0x1e>
 800f484:	5ccc      	ldrb	r4, [r1, r3]
 800f486:	54c4      	strb	r4, [r0, r3]
 800f488:	3301      	adds	r3, #1
 800f48a:	e7f9      	b.n	800f480 <memmove+0x8>
 800f48c:	188b      	adds	r3, r1, r2
 800f48e:	4298      	cmp	r0, r3
 800f490:	d2f5      	bcs.n	800f47e <memmove+0x6>
 800f492:	3a01      	subs	r2, #1
 800f494:	d200      	bcs.n	800f498 <memmove+0x20>
 800f496:	bd10      	pop	{r4, pc}
 800f498:	5c8b      	ldrb	r3, [r1, r2]
 800f49a:	5483      	strb	r3, [r0, r2]
 800f49c:	e7f9      	b.n	800f492 <memmove+0x1a>
	...

0800f4a0 <_sbrk_r>:
 800f4a0:	2300      	movs	r3, #0
 800f4a2:	b570      	push	{r4, r5, r6, lr}
 800f4a4:	4d06      	ldr	r5, [pc, #24]	@ (800f4c0 <_sbrk_r+0x20>)
 800f4a6:	0004      	movs	r4, r0
 800f4a8:	0008      	movs	r0, r1
 800f4aa:	602b      	str	r3, [r5, #0]
 800f4ac:	f7f7 fb46 	bl	8006b3c <_sbrk>
 800f4b0:	1c43      	adds	r3, r0, #1
 800f4b2:	d103      	bne.n	800f4bc <_sbrk_r+0x1c>
 800f4b4:	682b      	ldr	r3, [r5, #0]
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d000      	beq.n	800f4bc <_sbrk_r+0x1c>
 800f4ba:	6023      	str	r3, [r4, #0]
 800f4bc:	bd70      	pop	{r4, r5, r6, pc}
 800f4be:	46c0      	nop			@ (mov r8, r8)
 800f4c0:	20001f88 	.word	0x20001f88

0800f4c4 <memchr>:
 800f4c4:	b2c9      	uxtb	r1, r1
 800f4c6:	1882      	adds	r2, r0, r2
 800f4c8:	4290      	cmp	r0, r2
 800f4ca:	d101      	bne.n	800f4d0 <memchr+0xc>
 800f4cc:	2000      	movs	r0, #0
 800f4ce:	4770      	bx	lr
 800f4d0:	7803      	ldrb	r3, [r0, #0]
 800f4d2:	428b      	cmp	r3, r1
 800f4d4:	d0fb      	beq.n	800f4ce <memchr+0xa>
 800f4d6:	3001      	adds	r0, #1
 800f4d8:	e7f6      	b.n	800f4c8 <memchr+0x4>
	...

0800f4dc <__assert_func>:
 800f4dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800f4de:	0014      	movs	r4, r2
 800f4e0:	001a      	movs	r2, r3
 800f4e2:	4b09      	ldr	r3, [pc, #36]	@ (800f508 <__assert_func+0x2c>)
 800f4e4:	0005      	movs	r5, r0
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	000e      	movs	r6, r1
 800f4ea:	68d8      	ldr	r0, [r3, #12]
 800f4ec:	4b07      	ldr	r3, [pc, #28]	@ (800f50c <__assert_func+0x30>)
 800f4ee:	2c00      	cmp	r4, #0
 800f4f0:	d101      	bne.n	800f4f6 <__assert_func+0x1a>
 800f4f2:	4b07      	ldr	r3, [pc, #28]	@ (800f510 <__assert_func+0x34>)
 800f4f4:	001c      	movs	r4, r3
 800f4f6:	4907      	ldr	r1, [pc, #28]	@ (800f514 <__assert_func+0x38>)
 800f4f8:	9301      	str	r3, [sp, #4]
 800f4fa:	9402      	str	r4, [sp, #8]
 800f4fc:	002b      	movs	r3, r5
 800f4fe:	9600      	str	r6, [sp, #0]
 800f500:	f000 f872 	bl	800f5e8 <fiprintf>
 800f504:	f000 f910 	bl	800f728 <abort>
 800f508:	20000b4c 	.word	0x20000b4c
 800f50c:	08010afb 	.word	0x08010afb
 800f510:	08010b36 	.word	0x08010b36
 800f514:	08010b08 	.word	0x08010b08

0800f518 <_calloc_r>:
 800f518:	b570      	push	{r4, r5, r6, lr}
 800f51a:	0c0b      	lsrs	r3, r1, #16
 800f51c:	0c15      	lsrs	r5, r2, #16
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d11e      	bne.n	800f560 <_calloc_r+0x48>
 800f522:	2d00      	cmp	r5, #0
 800f524:	d10c      	bne.n	800f540 <_calloc_r+0x28>
 800f526:	b289      	uxth	r1, r1
 800f528:	b294      	uxth	r4, r2
 800f52a:	434c      	muls	r4, r1
 800f52c:	0021      	movs	r1, r4
 800f52e:	f7fe fcb7 	bl	800dea0 <_malloc_r>
 800f532:	1e05      	subs	r5, r0, #0
 800f534:	d01a      	beq.n	800f56c <_calloc_r+0x54>
 800f536:	0022      	movs	r2, r4
 800f538:	2100      	movs	r1, #0
 800f53a:	f7fe f847 	bl	800d5cc <memset>
 800f53e:	e016      	b.n	800f56e <_calloc_r+0x56>
 800f540:	1c2b      	adds	r3, r5, #0
 800f542:	1c0c      	adds	r4, r1, #0
 800f544:	b289      	uxth	r1, r1
 800f546:	b292      	uxth	r2, r2
 800f548:	434a      	muls	r2, r1
 800f54a:	b29b      	uxth	r3, r3
 800f54c:	b2a1      	uxth	r1, r4
 800f54e:	4359      	muls	r1, r3
 800f550:	0c14      	lsrs	r4, r2, #16
 800f552:	190c      	adds	r4, r1, r4
 800f554:	0c23      	lsrs	r3, r4, #16
 800f556:	d107      	bne.n	800f568 <_calloc_r+0x50>
 800f558:	0424      	lsls	r4, r4, #16
 800f55a:	b292      	uxth	r2, r2
 800f55c:	4314      	orrs	r4, r2
 800f55e:	e7e5      	b.n	800f52c <_calloc_r+0x14>
 800f560:	2d00      	cmp	r5, #0
 800f562:	d101      	bne.n	800f568 <_calloc_r+0x50>
 800f564:	1c14      	adds	r4, r2, #0
 800f566:	e7ed      	b.n	800f544 <_calloc_r+0x2c>
 800f568:	230c      	movs	r3, #12
 800f56a:	6003      	str	r3, [r0, #0]
 800f56c:	2500      	movs	r5, #0
 800f56e:	0028      	movs	r0, r5
 800f570:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f574 <malloc>:
 800f574:	b510      	push	{r4, lr}
 800f576:	4b03      	ldr	r3, [pc, #12]	@ (800f584 <malloc+0x10>)
 800f578:	0001      	movs	r1, r0
 800f57a:	6818      	ldr	r0, [r3, #0]
 800f57c:	f7fe fc90 	bl	800dea0 <_malloc_r>
 800f580:	bd10      	pop	{r4, pc}
 800f582:	46c0      	nop			@ (mov r8, r8)
 800f584:	20000b4c 	.word	0x20000b4c

0800f588 <_realloc_r>:
 800f588:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f58a:	0006      	movs	r6, r0
 800f58c:	000c      	movs	r4, r1
 800f58e:	0015      	movs	r5, r2
 800f590:	2900      	cmp	r1, #0
 800f592:	d105      	bne.n	800f5a0 <_realloc_r+0x18>
 800f594:	0011      	movs	r1, r2
 800f596:	f7fe fc83 	bl	800dea0 <_malloc_r>
 800f59a:	0004      	movs	r4, r0
 800f59c:	0020      	movs	r0, r4
 800f59e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f5a0:	2a00      	cmp	r2, #0
 800f5a2:	d103      	bne.n	800f5ac <_realloc_r+0x24>
 800f5a4:	f7fe f8b6 	bl	800d714 <_free_r>
 800f5a8:	2400      	movs	r4, #0
 800f5aa:	e7f7      	b.n	800f59c <_realloc_r+0x14>
 800f5ac:	f000 f8c3 	bl	800f736 <_malloc_usable_size_r>
 800f5b0:	0007      	movs	r7, r0
 800f5b2:	4285      	cmp	r5, r0
 800f5b4:	d802      	bhi.n	800f5bc <_realloc_r+0x34>
 800f5b6:	0843      	lsrs	r3, r0, #1
 800f5b8:	42ab      	cmp	r3, r5
 800f5ba:	d3ef      	bcc.n	800f59c <_realloc_r+0x14>
 800f5bc:	0029      	movs	r1, r5
 800f5be:	0030      	movs	r0, r6
 800f5c0:	f7fe fc6e 	bl	800dea0 <_malloc_r>
 800f5c4:	9001      	str	r0, [sp, #4]
 800f5c6:	2800      	cmp	r0, #0
 800f5c8:	d0ee      	beq.n	800f5a8 <_realloc_r+0x20>
 800f5ca:	002a      	movs	r2, r5
 800f5cc:	42bd      	cmp	r5, r7
 800f5ce:	d900      	bls.n	800f5d2 <_realloc_r+0x4a>
 800f5d0:	003a      	movs	r2, r7
 800f5d2:	0021      	movs	r1, r4
 800f5d4:	9801      	ldr	r0, [sp, #4]
 800f5d6:	f7fe f88e 	bl	800d6f6 <memcpy>
 800f5da:	0021      	movs	r1, r4
 800f5dc:	0030      	movs	r0, r6
 800f5de:	f7fe f899 	bl	800d714 <_free_r>
 800f5e2:	9c01      	ldr	r4, [sp, #4]
 800f5e4:	e7da      	b.n	800f59c <_realloc_r+0x14>
	...

0800f5e8 <fiprintf>:
 800f5e8:	b40e      	push	{r1, r2, r3}
 800f5ea:	b517      	push	{r0, r1, r2, r4, lr}
 800f5ec:	4c05      	ldr	r4, [pc, #20]	@ (800f604 <fiprintf+0x1c>)
 800f5ee:	ab05      	add	r3, sp, #20
 800f5f0:	cb04      	ldmia	r3!, {r2}
 800f5f2:	0001      	movs	r1, r0
 800f5f4:	6820      	ldr	r0, [r4, #0]
 800f5f6:	9301      	str	r3, [sp, #4]
 800f5f8:	f7ff fb52 	bl	800eca0 <_vfiprintf_r>
 800f5fc:	bc1e      	pop	{r1, r2, r3, r4}
 800f5fe:	bc08      	pop	{r3}
 800f600:	b003      	add	sp, #12
 800f602:	4718      	bx	r3
 800f604:	20000b4c 	.word	0x20000b4c

0800f608 <__swhatbuf_r>:
 800f608:	b570      	push	{r4, r5, r6, lr}
 800f60a:	000e      	movs	r6, r1
 800f60c:	001d      	movs	r5, r3
 800f60e:	230e      	movs	r3, #14
 800f610:	5ec9      	ldrsh	r1, [r1, r3]
 800f612:	0014      	movs	r4, r2
 800f614:	b096      	sub	sp, #88	@ 0x58
 800f616:	2900      	cmp	r1, #0
 800f618:	da0c      	bge.n	800f634 <__swhatbuf_r+0x2c>
 800f61a:	89b2      	ldrh	r2, [r6, #12]
 800f61c:	2380      	movs	r3, #128	@ 0x80
 800f61e:	0011      	movs	r1, r2
 800f620:	4019      	ands	r1, r3
 800f622:	421a      	tst	r2, r3
 800f624:	d114      	bne.n	800f650 <__swhatbuf_r+0x48>
 800f626:	2380      	movs	r3, #128	@ 0x80
 800f628:	00db      	lsls	r3, r3, #3
 800f62a:	2000      	movs	r0, #0
 800f62c:	6029      	str	r1, [r5, #0]
 800f62e:	6023      	str	r3, [r4, #0]
 800f630:	b016      	add	sp, #88	@ 0x58
 800f632:	bd70      	pop	{r4, r5, r6, pc}
 800f634:	466a      	mov	r2, sp
 800f636:	f000 f853 	bl	800f6e0 <_fstat_r>
 800f63a:	2800      	cmp	r0, #0
 800f63c:	dbed      	blt.n	800f61a <__swhatbuf_r+0x12>
 800f63e:	23f0      	movs	r3, #240	@ 0xf0
 800f640:	9901      	ldr	r1, [sp, #4]
 800f642:	021b      	lsls	r3, r3, #8
 800f644:	4019      	ands	r1, r3
 800f646:	4b04      	ldr	r3, [pc, #16]	@ (800f658 <__swhatbuf_r+0x50>)
 800f648:	18c9      	adds	r1, r1, r3
 800f64a:	424b      	negs	r3, r1
 800f64c:	4159      	adcs	r1, r3
 800f64e:	e7ea      	b.n	800f626 <__swhatbuf_r+0x1e>
 800f650:	2100      	movs	r1, #0
 800f652:	2340      	movs	r3, #64	@ 0x40
 800f654:	e7e9      	b.n	800f62a <__swhatbuf_r+0x22>
 800f656:	46c0      	nop			@ (mov r8, r8)
 800f658:	ffffe000 	.word	0xffffe000

0800f65c <__smakebuf_r>:
 800f65c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f65e:	2602      	movs	r6, #2
 800f660:	898b      	ldrh	r3, [r1, #12]
 800f662:	0005      	movs	r5, r0
 800f664:	000c      	movs	r4, r1
 800f666:	b085      	sub	sp, #20
 800f668:	4233      	tst	r3, r6
 800f66a:	d007      	beq.n	800f67c <__smakebuf_r+0x20>
 800f66c:	0023      	movs	r3, r4
 800f66e:	3347      	adds	r3, #71	@ 0x47
 800f670:	6023      	str	r3, [r4, #0]
 800f672:	6123      	str	r3, [r4, #16]
 800f674:	2301      	movs	r3, #1
 800f676:	6163      	str	r3, [r4, #20]
 800f678:	b005      	add	sp, #20
 800f67a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f67c:	ab03      	add	r3, sp, #12
 800f67e:	aa02      	add	r2, sp, #8
 800f680:	f7ff ffc2 	bl	800f608 <__swhatbuf_r>
 800f684:	9f02      	ldr	r7, [sp, #8]
 800f686:	9001      	str	r0, [sp, #4]
 800f688:	0039      	movs	r1, r7
 800f68a:	0028      	movs	r0, r5
 800f68c:	f7fe fc08 	bl	800dea0 <_malloc_r>
 800f690:	2800      	cmp	r0, #0
 800f692:	d108      	bne.n	800f6a6 <__smakebuf_r+0x4a>
 800f694:	220c      	movs	r2, #12
 800f696:	5ea3      	ldrsh	r3, [r4, r2]
 800f698:	059a      	lsls	r2, r3, #22
 800f69a:	d4ed      	bmi.n	800f678 <__smakebuf_r+0x1c>
 800f69c:	2203      	movs	r2, #3
 800f69e:	4393      	bics	r3, r2
 800f6a0:	431e      	orrs	r6, r3
 800f6a2:	81a6      	strh	r6, [r4, #12]
 800f6a4:	e7e2      	b.n	800f66c <__smakebuf_r+0x10>
 800f6a6:	2380      	movs	r3, #128	@ 0x80
 800f6a8:	89a2      	ldrh	r2, [r4, #12]
 800f6aa:	6020      	str	r0, [r4, #0]
 800f6ac:	4313      	orrs	r3, r2
 800f6ae:	81a3      	strh	r3, [r4, #12]
 800f6b0:	9b03      	ldr	r3, [sp, #12]
 800f6b2:	6120      	str	r0, [r4, #16]
 800f6b4:	6167      	str	r7, [r4, #20]
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d00c      	beq.n	800f6d4 <__smakebuf_r+0x78>
 800f6ba:	0028      	movs	r0, r5
 800f6bc:	230e      	movs	r3, #14
 800f6be:	5ee1      	ldrsh	r1, [r4, r3]
 800f6c0:	f000 f820 	bl	800f704 <_isatty_r>
 800f6c4:	2800      	cmp	r0, #0
 800f6c6:	d005      	beq.n	800f6d4 <__smakebuf_r+0x78>
 800f6c8:	2303      	movs	r3, #3
 800f6ca:	89a2      	ldrh	r2, [r4, #12]
 800f6cc:	439a      	bics	r2, r3
 800f6ce:	3b02      	subs	r3, #2
 800f6d0:	4313      	orrs	r3, r2
 800f6d2:	81a3      	strh	r3, [r4, #12]
 800f6d4:	89a3      	ldrh	r3, [r4, #12]
 800f6d6:	9a01      	ldr	r2, [sp, #4]
 800f6d8:	4313      	orrs	r3, r2
 800f6da:	81a3      	strh	r3, [r4, #12]
 800f6dc:	e7cc      	b.n	800f678 <__smakebuf_r+0x1c>
	...

0800f6e0 <_fstat_r>:
 800f6e0:	2300      	movs	r3, #0
 800f6e2:	b570      	push	{r4, r5, r6, lr}
 800f6e4:	4d06      	ldr	r5, [pc, #24]	@ (800f700 <_fstat_r+0x20>)
 800f6e6:	0004      	movs	r4, r0
 800f6e8:	0008      	movs	r0, r1
 800f6ea:	0011      	movs	r1, r2
 800f6ec:	602b      	str	r3, [r5, #0]
 800f6ee:	f7f7 fa03 	bl	8006af8 <_fstat>
 800f6f2:	1c43      	adds	r3, r0, #1
 800f6f4:	d103      	bne.n	800f6fe <_fstat_r+0x1e>
 800f6f6:	682b      	ldr	r3, [r5, #0]
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d000      	beq.n	800f6fe <_fstat_r+0x1e>
 800f6fc:	6023      	str	r3, [r4, #0]
 800f6fe:	bd70      	pop	{r4, r5, r6, pc}
 800f700:	20001f88 	.word	0x20001f88

0800f704 <_isatty_r>:
 800f704:	2300      	movs	r3, #0
 800f706:	b570      	push	{r4, r5, r6, lr}
 800f708:	4d06      	ldr	r5, [pc, #24]	@ (800f724 <_isatty_r+0x20>)
 800f70a:	0004      	movs	r4, r0
 800f70c:	0008      	movs	r0, r1
 800f70e:	602b      	str	r3, [r5, #0]
 800f710:	f7f7 fa00 	bl	8006b14 <_isatty>
 800f714:	1c43      	adds	r3, r0, #1
 800f716:	d103      	bne.n	800f720 <_isatty_r+0x1c>
 800f718:	682b      	ldr	r3, [r5, #0]
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d000      	beq.n	800f720 <_isatty_r+0x1c>
 800f71e:	6023      	str	r3, [r4, #0]
 800f720:	bd70      	pop	{r4, r5, r6, pc}
 800f722:	46c0      	nop			@ (mov r8, r8)
 800f724:	20001f88 	.word	0x20001f88

0800f728 <abort>:
 800f728:	2006      	movs	r0, #6
 800f72a:	b510      	push	{r4, lr}
 800f72c:	f000 f834 	bl	800f798 <raise>
 800f730:	2001      	movs	r0, #1
 800f732:	f7f7 f991 	bl	8006a58 <_exit>

0800f736 <_malloc_usable_size_r>:
 800f736:	1f0b      	subs	r3, r1, #4
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	1f18      	subs	r0, r3, #4
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	da01      	bge.n	800f744 <_malloc_usable_size_r+0xe>
 800f740:	580b      	ldr	r3, [r1, r0]
 800f742:	18c0      	adds	r0, r0, r3
 800f744:	4770      	bx	lr

0800f746 <_raise_r>:
 800f746:	b570      	push	{r4, r5, r6, lr}
 800f748:	0004      	movs	r4, r0
 800f74a:	000d      	movs	r5, r1
 800f74c:	291f      	cmp	r1, #31
 800f74e:	d904      	bls.n	800f75a <_raise_r+0x14>
 800f750:	2316      	movs	r3, #22
 800f752:	6003      	str	r3, [r0, #0]
 800f754:	2001      	movs	r0, #1
 800f756:	4240      	negs	r0, r0
 800f758:	bd70      	pop	{r4, r5, r6, pc}
 800f75a:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d004      	beq.n	800f76a <_raise_r+0x24>
 800f760:	008a      	lsls	r2, r1, #2
 800f762:	189b      	adds	r3, r3, r2
 800f764:	681a      	ldr	r2, [r3, #0]
 800f766:	2a00      	cmp	r2, #0
 800f768:	d108      	bne.n	800f77c <_raise_r+0x36>
 800f76a:	0020      	movs	r0, r4
 800f76c:	f000 f830 	bl	800f7d0 <_getpid_r>
 800f770:	002a      	movs	r2, r5
 800f772:	0001      	movs	r1, r0
 800f774:	0020      	movs	r0, r4
 800f776:	f000 f819 	bl	800f7ac <_kill_r>
 800f77a:	e7ed      	b.n	800f758 <_raise_r+0x12>
 800f77c:	2a01      	cmp	r2, #1
 800f77e:	d009      	beq.n	800f794 <_raise_r+0x4e>
 800f780:	1c51      	adds	r1, r2, #1
 800f782:	d103      	bne.n	800f78c <_raise_r+0x46>
 800f784:	2316      	movs	r3, #22
 800f786:	6003      	str	r3, [r0, #0]
 800f788:	2001      	movs	r0, #1
 800f78a:	e7e5      	b.n	800f758 <_raise_r+0x12>
 800f78c:	2100      	movs	r1, #0
 800f78e:	0028      	movs	r0, r5
 800f790:	6019      	str	r1, [r3, #0]
 800f792:	4790      	blx	r2
 800f794:	2000      	movs	r0, #0
 800f796:	e7df      	b.n	800f758 <_raise_r+0x12>

0800f798 <raise>:
 800f798:	b510      	push	{r4, lr}
 800f79a:	4b03      	ldr	r3, [pc, #12]	@ (800f7a8 <raise+0x10>)
 800f79c:	0001      	movs	r1, r0
 800f79e:	6818      	ldr	r0, [r3, #0]
 800f7a0:	f7ff ffd1 	bl	800f746 <_raise_r>
 800f7a4:	bd10      	pop	{r4, pc}
 800f7a6:	46c0      	nop			@ (mov r8, r8)
 800f7a8:	20000b4c 	.word	0x20000b4c

0800f7ac <_kill_r>:
 800f7ac:	2300      	movs	r3, #0
 800f7ae:	b570      	push	{r4, r5, r6, lr}
 800f7b0:	4d06      	ldr	r5, [pc, #24]	@ (800f7cc <_kill_r+0x20>)
 800f7b2:	0004      	movs	r4, r0
 800f7b4:	0008      	movs	r0, r1
 800f7b6:	0011      	movs	r1, r2
 800f7b8:	602b      	str	r3, [r5, #0]
 800f7ba:	f7f7 f93d 	bl	8006a38 <_kill>
 800f7be:	1c43      	adds	r3, r0, #1
 800f7c0:	d103      	bne.n	800f7ca <_kill_r+0x1e>
 800f7c2:	682b      	ldr	r3, [r5, #0]
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d000      	beq.n	800f7ca <_kill_r+0x1e>
 800f7c8:	6023      	str	r3, [r4, #0]
 800f7ca:	bd70      	pop	{r4, r5, r6, pc}
 800f7cc:	20001f88 	.word	0x20001f88

0800f7d0 <_getpid_r>:
 800f7d0:	b510      	push	{r4, lr}
 800f7d2:	f7f7 f92b 	bl	8006a2c <_getpid>
 800f7d6:	bd10      	pop	{r4, pc}

0800f7d8 <fmod>:
 800f7d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f7da:	0014      	movs	r4, r2
 800f7dc:	001d      	movs	r5, r3
 800f7de:	9000      	str	r0, [sp, #0]
 800f7e0:	9101      	str	r1, [sp, #4]
 800f7e2:	f000 f931 	bl	800fa48 <__ieee754_fmod>
 800f7e6:	0022      	movs	r2, r4
 800f7e8:	0006      	movs	r6, r0
 800f7ea:	000f      	movs	r7, r1
 800f7ec:	9800      	ldr	r0, [sp, #0]
 800f7ee:	9901      	ldr	r1, [sp, #4]
 800f7f0:	002b      	movs	r3, r5
 800f7f2:	f7f3 fd47 	bl	8003284 <__aeabi_dcmpun>
 800f7f6:	2800      	cmp	r0, #0
 800f7f8:	d113      	bne.n	800f822 <fmod+0x4a>
 800f7fa:	2200      	movs	r2, #0
 800f7fc:	2300      	movs	r3, #0
 800f7fe:	0020      	movs	r0, r4
 800f800:	0029      	movs	r1, r5
 800f802:	f7f0 fe2b 	bl	800045c <__aeabi_dcmpeq>
 800f806:	2800      	cmp	r0, #0
 800f808:	d00b      	beq.n	800f822 <fmod+0x4a>
 800f80a:	f7fd ff47 	bl	800d69c <__errno>
 800f80e:	2321      	movs	r3, #33	@ 0x21
 800f810:	2200      	movs	r2, #0
 800f812:	6003      	str	r3, [r0, #0]
 800f814:	2300      	movs	r3, #0
 800f816:	0010      	movs	r0, r2
 800f818:	0019      	movs	r1, r3
 800f81a:	f7f2 fa8b 	bl	8001d34 <__aeabi_ddiv>
 800f81e:	0006      	movs	r6, r0
 800f820:	000f      	movs	r7, r1
 800f822:	0030      	movs	r0, r6
 800f824:	0039      	movs	r1, r7
 800f826:	b003      	add	sp, #12
 800f828:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f82a <sqrt>:
 800f82a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f82c:	0004      	movs	r4, r0
 800f82e:	000d      	movs	r5, r1
 800f830:	f000 f822 	bl	800f878 <__ieee754_sqrt>
 800f834:	0022      	movs	r2, r4
 800f836:	0006      	movs	r6, r0
 800f838:	000f      	movs	r7, r1
 800f83a:	002b      	movs	r3, r5
 800f83c:	0020      	movs	r0, r4
 800f83e:	0029      	movs	r1, r5
 800f840:	f7f3 fd20 	bl	8003284 <__aeabi_dcmpun>
 800f844:	2800      	cmp	r0, #0
 800f846:	d113      	bne.n	800f870 <sqrt+0x46>
 800f848:	2200      	movs	r2, #0
 800f84a:	2300      	movs	r3, #0
 800f84c:	0020      	movs	r0, r4
 800f84e:	0029      	movs	r1, r5
 800f850:	f7f0 fe0a 	bl	8000468 <__aeabi_dcmplt>
 800f854:	2800      	cmp	r0, #0
 800f856:	d00b      	beq.n	800f870 <sqrt+0x46>
 800f858:	f7fd ff20 	bl	800d69c <__errno>
 800f85c:	2321      	movs	r3, #33	@ 0x21
 800f85e:	2200      	movs	r2, #0
 800f860:	6003      	str	r3, [r0, #0]
 800f862:	2300      	movs	r3, #0
 800f864:	0010      	movs	r0, r2
 800f866:	0019      	movs	r1, r3
 800f868:	f7f2 fa64 	bl	8001d34 <__aeabi_ddiv>
 800f86c:	0006      	movs	r6, r0
 800f86e:	000f      	movs	r7, r1
 800f870:	0030      	movs	r0, r6
 800f872:	0039      	movs	r1, r7
 800f874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f878 <__ieee754_sqrt>:
 800f878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f87a:	000a      	movs	r2, r1
 800f87c:	000d      	movs	r5, r1
 800f87e:	496d      	ldr	r1, [pc, #436]	@ (800fa34 <__ieee754_sqrt+0x1bc>)
 800f880:	0004      	movs	r4, r0
 800f882:	0003      	movs	r3, r0
 800f884:	0008      	movs	r0, r1
 800f886:	b087      	sub	sp, #28
 800f888:	4028      	ands	r0, r5
 800f88a:	4288      	cmp	r0, r1
 800f88c:	d111      	bne.n	800f8b2 <__ieee754_sqrt+0x3a>
 800f88e:	0022      	movs	r2, r4
 800f890:	002b      	movs	r3, r5
 800f892:	0020      	movs	r0, r4
 800f894:	0029      	movs	r1, r5
 800f896:	f7f2 fe91 	bl	80025bc <__aeabi_dmul>
 800f89a:	0002      	movs	r2, r0
 800f89c:	000b      	movs	r3, r1
 800f89e:	0020      	movs	r0, r4
 800f8a0:	0029      	movs	r1, r5
 800f8a2:	f7f1 fee3 	bl	800166c <__aeabi_dadd>
 800f8a6:	0004      	movs	r4, r0
 800f8a8:	000d      	movs	r5, r1
 800f8aa:	0020      	movs	r0, r4
 800f8ac:	0029      	movs	r1, r5
 800f8ae:	b007      	add	sp, #28
 800f8b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f8b2:	2d00      	cmp	r5, #0
 800f8b4:	dc11      	bgt.n	800f8da <__ieee754_sqrt+0x62>
 800f8b6:	0069      	lsls	r1, r5, #1
 800f8b8:	0849      	lsrs	r1, r1, #1
 800f8ba:	4321      	orrs	r1, r4
 800f8bc:	d0f5      	beq.n	800f8aa <__ieee754_sqrt+0x32>
 800f8be:	2000      	movs	r0, #0
 800f8c0:	4285      	cmp	r5, r0
 800f8c2:	d010      	beq.n	800f8e6 <__ieee754_sqrt+0x6e>
 800f8c4:	0022      	movs	r2, r4
 800f8c6:	002b      	movs	r3, r5
 800f8c8:	0020      	movs	r0, r4
 800f8ca:	0029      	movs	r1, r5
 800f8cc:	f7f3 f93e 	bl	8002b4c <__aeabi_dsub>
 800f8d0:	0002      	movs	r2, r0
 800f8d2:	000b      	movs	r3, r1
 800f8d4:	f7f2 fa2e 	bl	8001d34 <__aeabi_ddiv>
 800f8d8:	e7e5      	b.n	800f8a6 <__ieee754_sqrt+0x2e>
 800f8da:	1528      	asrs	r0, r5, #20
 800f8dc:	d115      	bne.n	800f90a <__ieee754_sqrt+0x92>
 800f8de:	2480      	movs	r4, #128	@ 0x80
 800f8e0:	2100      	movs	r1, #0
 800f8e2:	0364      	lsls	r4, r4, #13
 800f8e4:	e007      	b.n	800f8f6 <__ieee754_sqrt+0x7e>
 800f8e6:	0ada      	lsrs	r2, r3, #11
 800f8e8:	3815      	subs	r0, #21
 800f8ea:	055b      	lsls	r3, r3, #21
 800f8ec:	2a00      	cmp	r2, #0
 800f8ee:	d0fa      	beq.n	800f8e6 <__ieee754_sqrt+0x6e>
 800f8f0:	e7f5      	b.n	800f8de <__ieee754_sqrt+0x66>
 800f8f2:	0052      	lsls	r2, r2, #1
 800f8f4:	3101      	adds	r1, #1
 800f8f6:	4222      	tst	r2, r4
 800f8f8:	d0fb      	beq.n	800f8f2 <__ieee754_sqrt+0x7a>
 800f8fa:	1e4c      	subs	r4, r1, #1
 800f8fc:	1b00      	subs	r0, r0, r4
 800f8fe:	2420      	movs	r4, #32
 800f900:	001d      	movs	r5, r3
 800f902:	1a64      	subs	r4, r4, r1
 800f904:	40e5      	lsrs	r5, r4
 800f906:	408b      	lsls	r3, r1
 800f908:	432a      	orrs	r2, r5
 800f90a:	494b      	ldr	r1, [pc, #300]	@ (800fa38 <__ieee754_sqrt+0x1c0>)
 800f90c:	0312      	lsls	r2, r2, #12
 800f90e:	1844      	adds	r4, r0, r1
 800f910:	2180      	movs	r1, #128	@ 0x80
 800f912:	0b12      	lsrs	r2, r2, #12
 800f914:	0349      	lsls	r1, r1, #13
 800f916:	4311      	orrs	r1, r2
 800f918:	07c0      	lsls	r0, r0, #31
 800f91a:	d403      	bmi.n	800f924 <__ieee754_sqrt+0xac>
 800f91c:	0fda      	lsrs	r2, r3, #31
 800f91e:	0049      	lsls	r1, r1, #1
 800f920:	1851      	adds	r1, r2, r1
 800f922:	005b      	lsls	r3, r3, #1
 800f924:	2500      	movs	r5, #0
 800f926:	1062      	asrs	r2, r4, #1
 800f928:	0049      	lsls	r1, r1, #1
 800f92a:	2480      	movs	r4, #128	@ 0x80
 800f92c:	9205      	str	r2, [sp, #20]
 800f92e:	0fda      	lsrs	r2, r3, #31
 800f930:	1852      	adds	r2, r2, r1
 800f932:	2016      	movs	r0, #22
 800f934:	0029      	movs	r1, r5
 800f936:	005b      	lsls	r3, r3, #1
 800f938:	03a4      	lsls	r4, r4, #14
 800f93a:	190e      	adds	r6, r1, r4
 800f93c:	4296      	cmp	r6, r2
 800f93e:	dc02      	bgt.n	800f946 <__ieee754_sqrt+0xce>
 800f940:	1931      	adds	r1, r6, r4
 800f942:	1b92      	subs	r2, r2, r6
 800f944:	192d      	adds	r5, r5, r4
 800f946:	0fde      	lsrs	r6, r3, #31
 800f948:	0052      	lsls	r2, r2, #1
 800f94a:	3801      	subs	r0, #1
 800f94c:	1992      	adds	r2, r2, r6
 800f94e:	005b      	lsls	r3, r3, #1
 800f950:	0864      	lsrs	r4, r4, #1
 800f952:	2800      	cmp	r0, #0
 800f954:	d1f1      	bne.n	800f93a <__ieee754_sqrt+0xc2>
 800f956:	2620      	movs	r6, #32
 800f958:	2780      	movs	r7, #128	@ 0x80
 800f95a:	0004      	movs	r4, r0
 800f95c:	9604      	str	r6, [sp, #16]
 800f95e:	063f      	lsls	r7, r7, #24
 800f960:	19c6      	adds	r6, r0, r7
 800f962:	46b4      	mov	ip, r6
 800f964:	4291      	cmp	r1, r2
 800f966:	db02      	blt.n	800f96e <__ieee754_sqrt+0xf6>
 800f968:	d114      	bne.n	800f994 <__ieee754_sqrt+0x11c>
 800f96a:	429e      	cmp	r6, r3
 800f96c:	d812      	bhi.n	800f994 <__ieee754_sqrt+0x11c>
 800f96e:	4660      	mov	r0, ip
 800f970:	4666      	mov	r6, ip
 800f972:	19c0      	adds	r0, r0, r7
 800f974:	9100      	str	r1, [sp, #0]
 800f976:	2e00      	cmp	r6, #0
 800f978:	da03      	bge.n	800f982 <__ieee754_sqrt+0x10a>
 800f97a:	43c6      	mvns	r6, r0
 800f97c:	0ff6      	lsrs	r6, r6, #31
 800f97e:	198e      	adds	r6, r1, r6
 800f980:	9600      	str	r6, [sp, #0]
 800f982:	1a52      	subs	r2, r2, r1
 800f984:	4563      	cmp	r3, ip
 800f986:	4189      	sbcs	r1, r1
 800f988:	4249      	negs	r1, r1
 800f98a:	1a52      	subs	r2, r2, r1
 800f98c:	4661      	mov	r1, ip
 800f98e:	1a5b      	subs	r3, r3, r1
 800f990:	9900      	ldr	r1, [sp, #0]
 800f992:	19e4      	adds	r4, r4, r7
 800f994:	0fde      	lsrs	r6, r3, #31
 800f996:	0052      	lsls	r2, r2, #1
 800f998:	1992      	adds	r2, r2, r6
 800f99a:	9e04      	ldr	r6, [sp, #16]
 800f99c:	005b      	lsls	r3, r3, #1
 800f99e:	3e01      	subs	r6, #1
 800f9a0:	087f      	lsrs	r7, r7, #1
 800f9a2:	9604      	str	r6, [sp, #16]
 800f9a4:	2e00      	cmp	r6, #0
 800f9a6:	d1db      	bne.n	800f960 <__ieee754_sqrt+0xe8>
 800f9a8:	431a      	orrs	r2, r3
 800f9aa:	d01f      	beq.n	800f9ec <__ieee754_sqrt+0x174>
 800f9ac:	4e23      	ldr	r6, [pc, #140]	@ (800fa3c <__ieee754_sqrt+0x1c4>)
 800f9ae:	4f24      	ldr	r7, [pc, #144]	@ (800fa40 <__ieee754_sqrt+0x1c8>)
 800f9b0:	6830      	ldr	r0, [r6, #0]
 800f9b2:	6871      	ldr	r1, [r6, #4]
 800f9b4:	683a      	ldr	r2, [r7, #0]
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	9200      	str	r2, [sp, #0]
 800f9ba:	9301      	str	r3, [sp, #4]
 800f9bc:	6832      	ldr	r2, [r6, #0]
 800f9be:	6873      	ldr	r3, [r6, #4]
 800f9c0:	9202      	str	r2, [sp, #8]
 800f9c2:	9303      	str	r3, [sp, #12]
 800f9c4:	9a00      	ldr	r2, [sp, #0]
 800f9c6:	9b01      	ldr	r3, [sp, #4]
 800f9c8:	f7f3 f8c0 	bl	8002b4c <__aeabi_dsub>
 800f9cc:	0002      	movs	r2, r0
 800f9ce:	000b      	movs	r3, r1
 800f9d0:	9802      	ldr	r0, [sp, #8]
 800f9d2:	9903      	ldr	r1, [sp, #12]
 800f9d4:	f7f0 fd52 	bl	800047c <__aeabi_dcmple>
 800f9d8:	2800      	cmp	r0, #0
 800f9da:	d007      	beq.n	800f9ec <__ieee754_sqrt+0x174>
 800f9dc:	6830      	ldr	r0, [r6, #0]
 800f9de:	6871      	ldr	r1, [r6, #4]
 800f9e0:	683a      	ldr	r2, [r7, #0]
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	1c67      	adds	r7, r4, #1
 800f9e6:	d10f      	bne.n	800fa08 <__ieee754_sqrt+0x190>
 800f9e8:	9c04      	ldr	r4, [sp, #16]
 800f9ea:	3501      	adds	r5, #1
 800f9ec:	4b15      	ldr	r3, [pc, #84]	@ (800fa44 <__ieee754_sqrt+0x1cc>)
 800f9ee:	106a      	asrs	r2, r5, #1
 800f9f0:	18d2      	adds	r2, r2, r3
 800f9f2:	0863      	lsrs	r3, r4, #1
 800f9f4:	07ed      	lsls	r5, r5, #31
 800f9f6:	d502      	bpl.n	800f9fe <__ieee754_sqrt+0x186>
 800f9f8:	2180      	movs	r1, #128	@ 0x80
 800f9fa:	0609      	lsls	r1, r1, #24
 800f9fc:	430b      	orrs	r3, r1
 800f9fe:	9905      	ldr	r1, [sp, #20]
 800fa00:	001c      	movs	r4, r3
 800fa02:	0509      	lsls	r1, r1, #20
 800fa04:	188d      	adds	r5, r1, r2
 800fa06:	e750      	b.n	800f8aa <__ieee754_sqrt+0x32>
 800fa08:	f7f1 fe30 	bl	800166c <__aeabi_dadd>
 800fa0c:	6877      	ldr	r7, [r6, #4]
 800fa0e:	6836      	ldr	r6, [r6, #0]
 800fa10:	0002      	movs	r2, r0
 800fa12:	000b      	movs	r3, r1
 800fa14:	0030      	movs	r0, r6
 800fa16:	0039      	movs	r1, r7
 800fa18:	f7f0 fd26 	bl	8000468 <__aeabi_dcmplt>
 800fa1c:	2800      	cmp	r0, #0
 800fa1e:	d004      	beq.n	800fa2a <__ieee754_sqrt+0x1b2>
 800fa20:	3402      	adds	r4, #2
 800fa22:	4263      	negs	r3, r4
 800fa24:	4163      	adcs	r3, r4
 800fa26:	18ed      	adds	r5, r5, r3
 800fa28:	e7e0      	b.n	800f9ec <__ieee754_sqrt+0x174>
 800fa2a:	2301      	movs	r3, #1
 800fa2c:	3401      	adds	r4, #1
 800fa2e:	439c      	bics	r4, r3
 800fa30:	e7dc      	b.n	800f9ec <__ieee754_sqrt+0x174>
 800fa32:	46c0      	nop			@ (mov r8, r8)
 800fa34:	7ff00000 	.word	0x7ff00000
 800fa38:	fffffc01 	.word	0xfffffc01
 800fa3c:	20000ba8 	.word	0x20000ba8
 800fa40:	20000ba0 	.word	0x20000ba0
 800fa44:	3fe00000 	.word	0x3fe00000

0800fa48 <__ieee754_fmod>:
 800fa48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa4a:	b085      	sub	sp, #20
 800fa4c:	9200      	str	r2, [sp, #0]
 800fa4e:	9301      	str	r3, [sp, #4]
 800fa50:	9b01      	ldr	r3, [sp, #4]
 800fa52:	9e00      	ldr	r6, [sp, #0]
 800fa54:	005b      	lsls	r3, r3, #1
 800fa56:	085b      	lsrs	r3, r3, #1
 800fa58:	469c      	mov	ip, r3
 800fa5a:	9603      	str	r6, [sp, #12]
 800fa5c:	4333      	orrs	r3, r6
 800fa5e:	d00d      	beq.n	800fa7c <__ieee754_fmod+0x34>
 800fa60:	4b7a      	ldr	r3, [pc, #488]	@ (800fc4c <__ieee754_fmod+0x204>)
 800fa62:	004a      	lsls	r2, r1, #1
 800fa64:	000d      	movs	r5, r1
 800fa66:	0852      	lsrs	r2, r2, #1
 800fa68:	429a      	cmp	r2, r3
 800fa6a:	d807      	bhi.n	800fa7c <__ieee754_fmod+0x34>
 800fa6c:	4664      	mov	r4, ip
 800fa6e:	4273      	negs	r3, r6
 800fa70:	4333      	orrs	r3, r6
 800fa72:	0fdb      	lsrs	r3, r3, #31
 800fa74:	4323      	orrs	r3, r4
 800fa76:	4c76      	ldr	r4, [pc, #472]	@ (800fc50 <__ieee754_fmod+0x208>)
 800fa78:	42a3      	cmp	r3, r4
 800fa7a:	d909      	bls.n	800fa90 <__ieee754_fmod+0x48>
 800fa7c:	9a00      	ldr	r2, [sp, #0]
 800fa7e:	9b01      	ldr	r3, [sp, #4]
 800fa80:	f7f2 fd9c 	bl	80025bc <__aeabi_dmul>
 800fa84:	0002      	movs	r2, r0
 800fa86:	000b      	movs	r3, r1
 800fa88:	f7f2 f954 	bl	8001d34 <__aeabi_ddiv>
 800fa8c:	b005      	add	sp, #20
 800fa8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fa90:	0fcc      	lsrs	r4, r1, #31
 800fa92:	07e4      	lsls	r4, r4, #31
 800fa94:	0007      	movs	r7, r0
 800fa96:	0003      	movs	r3, r0
 800fa98:	9402      	str	r4, [sp, #8]
 800fa9a:	4562      	cmp	r2, ip
 800fa9c:	dc0a      	bgt.n	800fab4 <__ieee754_fmod+0x6c>
 800fa9e:	dbf5      	blt.n	800fa8c <__ieee754_fmod+0x44>
 800faa0:	4286      	cmp	r6, r0
 800faa2:	d8f3      	bhi.n	800fa8c <__ieee754_fmod+0x44>
 800faa4:	d106      	bne.n	800fab4 <__ieee754_fmod+0x6c>
 800faa6:	0022      	movs	r2, r4
 800faa8:	4b6a      	ldr	r3, [pc, #424]	@ (800fc54 <__ieee754_fmod+0x20c>)
 800faaa:	0f12      	lsrs	r2, r2, #28
 800faac:	189b      	adds	r3, r3, r2
 800faae:	6818      	ldr	r0, [r3, #0]
 800fab0:	6859      	ldr	r1, [r3, #4]
 800fab2:	e7eb      	b.n	800fa8c <__ieee754_fmod+0x44>
 800fab4:	4866      	ldr	r0, [pc, #408]	@ (800fc50 <__ieee754_fmod+0x208>)
 800fab6:	4205      	tst	r5, r0
 800fab8:	d14c      	bne.n	800fb54 <__ieee754_fmod+0x10c>
 800faba:	2a00      	cmp	r2, #0
 800fabc:	d143      	bne.n	800fb46 <__ieee754_fmod+0xfe>
 800fabe:	0038      	movs	r0, r7
 800fac0:	4965      	ldr	r1, [pc, #404]	@ (800fc58 <__ieee754_fmod+0x210>)
 800fac2:	2800      	cmp	r0, #0
 800fac4:	dc3c      	bgt.n	800fb40 <__ieee754_fmod+0xf8>
 800fac6:	4862      	ldr	r0, [pc, #392]	@ (800fc50 <__ieee754_fmod+0x208>)
 800fac8:	9c01      	ldr	r4, [sp, #4]
 800faca:	4220      	tst	r0, r4
 800facc:	d150      	bne.n	800fb70 <__ieee754_fmod+0x128>
 800face:	4660      	mov	r0, ip
 800fad0:	2800      	cmp	r0, #0
 800fad2:	d146      	bne.n	800fb62 <__ieee754_fmod+0x11a>
 800fad4:	4860      	ldr	r0, [pc, #384]	@ (800fc58 <__ieee754_fmod+0x210>)
 800fad6:	2e00      	cmp	r6, #0
 800fad8:	dc40      	bgt.n	800fb5c <__ieee754_fmod+0x114>
 800fada:	4c60      	ldr	r4, [pc, #384]	@ (800fc5c <__ieee754_fmod+0x214>)
 800fadc:	42a1      	cmp	r1, r4
 800fade:	db4c      	blt.n	800fb7a <__ieee754_fmod+0x132>
 800fae0:	2280      	movs	r2, #128	@ 0x80
 800fae2:	032f      	lsls	r7, r5, #12
 800fae4:	0b3f      	lsrs	r7, r7, #12
 800fae6:	0352      	lsls	r2, r2, #13
 800fae8:	433a      	orrs	r2, r7
 800faea:	4c5c      	ldr	r4, [pc, #368]	@ (800fc5c <__ieee754_fmod+0x214>)
 800faec:	42a0      	cmp	r0, r4
 800faee:	db59      	blt.n	800fba4 <__ieee754_fmod+0x15c>
 800faf0:	2580      	movs	r5, #128	@ 0x80
 800faf2:	9c01      	ldr	r4, [sp, #4]
 800faf4:	036d      	lsls	r5, r5, #13
 800faf6:	0324      	lsls	r4, r4, #12
 800faf8:	0b24      	lsrs	r4, r4, #12
 800fafa:	4325      	orrs	r5, r4
 800fafc:	1a09      	subs	r1, r1, r0
 800fafe:	9e03      	ldr	r6, [sp, #12]
 800fb00:	1b54      	subs	r4, r2, r5
 800fb02:	1b9f      	subs	r7, r3, r6
 800fb04:	2900      	cmp	r1, #0
 800fb06:	d165      	bne.n	800fbd4 <__ieee754_fmod+0x18c>
 800fb08:	42b3      	cmp	r3, r6
 800fb0a:	4189      	sbcs	r1, r1
 800fb0c:	4249      	negs	r1, r1
 800fb0e:	1a64      	subs	r4, r4, r1
 800fb10:	d401      	bmi.n	800fb16 <__ieee754_fmod+0xce>
 800fb12:	003b      	movs	r3, r7
 800fb14:	0022      	movs	r2, r4
 800fb16:	0011      	movs	r1, r2
 800fb18:	4319      	orrs	r1, r3
 800fb1a:	d06a      	beq.n	800fbf2 <__ieee754_fmod+0x1aa>
 800fb1c:	2180      	movs	r1, #128	@ 0x80
 800fb1e:	0349      	lsls	r1, r1, #13
 800fb20:	428a      	cmp	r2, r1
 800fb22:	db6e      	blt.n	800fc02 <__ieee754_fmod+0x1ba>
 800fb24:	494d      	ldr	r1, [pc, #308]	@ (800fc5c <__ieee754_fmod+0x214>)
 800fb26:	4288      	cmp	r0, r1
 800fb28:	db71      	blt.n	800fc0e <__ieee754_fmod+0x1c6>
 800fb2a:	494d      	ldr	r1, [pc, #308]	@ (800fc60 <__ieee754_fmod+0x218>)
 800fb2c:	1852      	adds	r2, r2, r1
 800fb2e:	9902      	ldr	r1, [sp, #8]
 800fb30:	430a      	orrs	r2, r1
 800fb32:	494c      	ldr	r1, [pc, #304]	@ (800fc64 <__ieee754_fmod+0x21c>)
 800fb34:	1840      	adds	r0, r0, r1
 800fb36:	0504      	lsls	r4, r0, #20
 800fb38:	4322      	orrs	r2, r4
 800fb3a:	0011      	movs	r1, r2
 800fb3c:	0018      	movs	r0, r3
 800fb3e:	e7a5      	b.n	800fa8c <__ieee754_fmod+0x44>
 800fb40:	3901      	subs	r1, #1
 800fb42:	0040      	lsls	r0, r0, #1
 800fb44:	e7bd      	b.n	800fac2 <__ieee754_fmod+0x7a>
 800fb46:	4945      	ldr	r1, [pc, #276]	@ (800fc5c <__ieee754_fmod+0x214>)
 800fb48:	02d0      	lsls	r0, r2, #11
 800fb4a:	2800      	cmp	r0, #0
 800fb4c:	ddbb      	ble.n	800fac6 <__ieee754_fmod+0x7e>
 800fb4e:	3901      	subs	r1, #1
 800fb50:	0040      	lsls	r0, r0, #1
 800fb52:	e7fa      	b.n	800fb4a <__ieee754_fmod+0x102>
 800fb54:	4844      	ldr	r0, [pc, #272]	@ (800fc68 <__ieee754_fmod+0x220>)
 800fb56:	1511      	asrs	r1, r2, #20
 800fb58:	1809      	adds	r1, r1, r0
 800fb5a:	e7b4      	b.n	800fac6 <__ieee754_fmod+0x7e>
 800fb5c:	3801      	subs	r0, #1
 800fb5e:	0076      	lsls	r6, r6, #1
 800fb60:	e7b9      	b.n	800fad6 <__ieee754_fmod+0x8e>
 800fb62:	02c6      	lsls	r6, r0, #11
 800fb64:	483d      	ldr	r0, [pc, #244]	@ (800fc5c <__ieee754_fmod+0x214>)
 800fb66:	2e00      	cmp	r6, #0
 800fb68:	ddb7      	ble.n	800fada <__ieee754_fmod+0x92>
 800fb6a:	3801      	subs	r0, #1
 800fb6c:	0076      	lsls	r6, r6, #1
 800fb6e:	e7fa      	b.n	800fb66 <__ieee754_fmod+0x11e>
 800fb70:	4660      	mov	r0, ip
 800fb72:	4c3d      	ldr	r4, [pc, #244]	@ (800fc68 <__ieee754_fmod+0x220>)
 800fb74:	1500      	asrs	r0, r0, #20
 800fb76:	1900      	adds	r0, r0, r4
 800fb78:	e7af      	b.n	800fada <__ieee754_fmod+0x92>
 800fb7a:	4b38      	ldr	r3, [pc, #224]	@ (800fc5c <__ieee754_fmod+0x214>)
 800fb7c:	1a5b      	subs	r3, r3, r1
 800fb7e:	2b1f      	cmp	r3, #31
 800fb80:	dc0a      	bgt.n	800fb98 <__ieee754_fmod+0x150>
 800fb82:	409a      	lsls	r2, r3
 800fb84:	003c      	movs	r4, r7
 800fb86:	0015      	movs	r5, r2
 800fb88:	4a38      	ldr	r2, [pc, #224]	@ (800fc6c <__ieee754_fmod+0x224>)
 800fb8a:	409f      	lsls	r7, r3
 800fb8c:	188a      	adds	r2, r1, r2
 800fb8e:	40d4      	lsrs	r4, r2
 800fb90:	0022      	movs	r2, r4
 800fb92:	003b      	movs	r3, r7
 800fb94:	432a      	orrs	r2, r5
 800fb96:	e7a8      	b.n	800faea <__ieee754_fmod+0xa2>
 800fb98:	003a      	movs	r2, r7
 800fb9a:	4b35      	ldr	r3, [pc, #212]	@ (800fc70 <__ieee754_fmod+0x228>)
 800fb9c:	1a5b      	subs	r3, r3, r1
 800fb9e:	409a      	lsls	r2, r3
 800fba0:	2300      	movs	r3, #0
 800fba2:	e7a2      	b.n	800faea <__ieee754_fmod+0xa2>
 800fba4:	4c2d      	ldr	r4, [pc, #180]	@ (800fc5c <__ieee754_fmod+0x214>)
 800fba6:	1a27      	subs	r7, r4, r0
 800fba8:	2f1f      	cmp	r7, #31
 800fbaa:	dc0c      	bgt.n	800fbc6 <__ieee754_fmod+0x17e>
 800fbac:	4c2f      	ldr	r4, [pc, #188]	@ (800fc6c <__ieee754_fmod+0x224>)
 800fbae:	4665      	mov	r5, ip
 800fbb0:	46a4      	mov	ip, r4
 800fbb2:	4484      	add	ip, r0
 800fbb4:	4666      	mov	r6, ip
 800fbb6:	9c00      	ldr	r4, [sp, #0]
 800fbb8:	40bd      	lsls	r5, r7
 800fbba:	40f4      	lsrs	r4, r6
 800fbbc:	4325      	orrs	r5, r4
 800fbbe:	9c00      	ldr	r4, [sp, #0]
 800fbc0:	40bc      	lsls	r4, r7
 800fbc2:	9403      	str	r4, [sp, #12]
 800fbc4:	e79a      	b.n	800fafc <__ieee754_fmod+0xb4>
 800fbc6:	4d2a      	ldr	r5, [pc, #168]	@ (800fc70 <__ieee754_fmod+0x228>)
 800fbc8:	9c00      	ldr	r4, [sp, #0]
 800fbca:	1a2d      	subs	r5, r5, r0
 800fbcc:	40ac      	lsls	r4, r5
 800fbce:	0025      	movs	r5, r4
 800fbd0:	2400      	movs	r4, #0
 800fbd2:	e7f6      	b.n	800fbc2 <__ieee754_fmod+0x17a>
 800fbd4:	9e03      	ldr	r6, [sp, #12]
 800fbd6:	42b3      	cmp	r3, r6
 800fbd8:	41b6      	sbcs	r6, r6
 800fbda:	4276      	negs	r6, r6
 800fbdc:	1ba4      	subs	r4, r4, r6
 800fbde:	d505      	bpl.n	800fbec <__ieee754_fmod+0x1a4>
 800fbe0:	0fdc      	lsrs	r4, r3, #31
 800fbe2:	0052      	lsls	r2, r2, #1
 800fbe4:	1912      	adds	r2, r2, r4
 800fbe6:	005b      	lsls	r3, r3, #1
 800fbe8:	3901      	subs	r1, #1
 800fbea:	e788      	b.n	800fafe <__ieee754_fmod+0xb6>
 800fbec:	0023      	movs	r3, r4
 800fbee:	433b      	orrs	r3, r7
 800fbf0:	d102      	bne.n	800fbf8 <__ieee754_fmod+0x1b0>
 800fbf2:	4b18      	ldr	r3, [pc, #96]	@ (800fc54 <__ieee754_fmod+0x20c>)
 800fbf4:	9a02      	ldr	r2, [sp, #8]
 800fbf6:	e758      	b.n	800faaa <__ieee754_fmod+0x62>
 800fbf8:	0064      	lsls	r4, r4, #1
 800fbfa:	0ffa      	lsrs	r2, r7, #31
 800fbfc:	18a2      	adds	r2, r4, r2
 800fbfe:	007b      	lsls	r3, r7, #1
 800fc00:	e7f2      	b.n	800fbe8 <__ieee754_fmod+0x1a0>
 800fc02:	0fdc      	lsrs	r4, r3, #31
 800fc04:	0052      	lsls	r2, r2, #1
 800fc06:	1912      	adds	r2, r2, r4
 800fc08:	005b      	lsls	r3, r3, #1
 800fc0a:	3801      	subs	r0, #1
 800fc0c:	e788      	b.n	800fb20 <__ieee754_fmod+0xd8>
 800fc0e:	4913      	ldr	r1, [pc, #76]	@ (800fc5c <__ieee754_fmod+0x214>)
 800fc10:	1a0e      	subs	r6, r1, r0
 800fc12:	2e14      	cmp	r6, #20
 800fc14:	dc0b      	bgt.n	800fc2e <__ieee754_fmod+0x1e6>
 800fc16:	40f3      	lsrs	r3, r6
 800fc18:	0019      	movs	r1, r3
 800fc1a:	4b14      	ldr	r3, [pc, #80]	@ (800fc6c <__ieee754_fmod+0x224>)
 800fc1c:	18c0      	adds	r0, r0, r3
 800fc1e:	0013      	movs	r3, r2
 800fc20:	4083      	lsls	r3, r0
 800fc22:	4132      	asrs	r2, r6
 800fc24:	430b      	orrs	r3, r1
 800fc26:	9c02      	ldr	r4, [sp, #8]
 800fc28:	4314      	orrs	r4, r2
 800fc2a:	0021      	movs	r1, r4
 800fc2c:	e786      	b.n	800fb3c <__ieee754_fmod+0xf4>
 800fc2e:	2e1f      	cmp	r6, #31
 800fc30:	dc06      	bgt.n	800fc40 <__ieee754_fmod+0x1f8>
 800fc32:	490e      	ldr	r1, [pc, #56]	@ (800fc6c <__ieee754_fmod+0x224>)
 800fc34:	40f3      	lsrs	r3, r6
 800fc36:	1840      	adds	r0, r0, r1
 800fc38:	4082      	lsls	r2, r0
 800fc3a:	4313      	orrs	r3, r2
 800fc3c:	9a02      	ldr	r2, [sp, #8]
 800fc3e:	e7f2      	b.n	800fc26 <__ieee754_fmod+0x1de>
 800fc40:	4b0b      	ldr	r3, [pc, #44]	@ (800fc70 <__ieee754_fmod+0x228>)
 800fc42:	1a1b      	subs	r3, r3, r0
 800fc44:	411a      	asrs	r2, r3
 800fc46:	0013      	movs	r3, r2
 800fc48:	e7f8      	b.n	800fc3c <__ieee754_fmod+0x1f4>
 800fc4a:	46c0      	nop			@ (mov r8, r8)
 800fc4c:	7fefffff 	.word	0x7fefffff
 800fc50:	7ff00000 	.word	0x7ff00000
 800fc54:	08010b38 	.word	0x08010b38
 800fc58:	fffffbed 	.word	0xfffffbed
 800fc5c:	fffffc02 	.word	0xfffffc02
 800fc60:	fff00000 	.word	0xfff00000
 800fc64:	000003ff 	.word	0x000003ff
 800fc68:	fffffc01 	.word	0xfffffc01
 800fc6c:	0000041e 	.word	0x0000041e
 800fc70:	fffffbe2 	.word	0xfffffbe2

0800fc74 <_init>:
 800fc74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc76:	46c0      	nop			@ (mov r8, r8)
 800fc78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fc7a:	bc08      	pop	{r3}
 800fc7c:	469e      	mov	lr, r3
 800fc7e:	4770      	bx	lr

0800fc80 <_fini>:
 800fc80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc82:	46c0      	nop			@ (mov r8, r8)
 800fc84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fc86:	bc08      	pop	{r3}
 800fc88:	469e      	mov	lr, r3
 800fc8a:	4770      	bx	lr
