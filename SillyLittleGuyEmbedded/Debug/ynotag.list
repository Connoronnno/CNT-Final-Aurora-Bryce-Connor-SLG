
ynotag.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000111d8  080000c0  080000c0  000010c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000b028  08011298  08011298  00012298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c2c0  0801c2c0  0001e270  2**0
                  CONTENTS
  4 .ARM          00000008  0801c2c0  0801c2c0  0001d2c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c2c8  0801c2c8  0001e270  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c2c8  0801c2c8  0001d2c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801c2cc  0801c2cc  0001d2cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000270  20000000  0801c2d0  0001e000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          000013e4  20000270  0801c540  0001e270  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001654  0801c540  0001e654  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0001e270  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cb9c  00000000  00000000  0001e298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c80  00000000  00000000  0003ae34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a70  00000000  00000000  0003eab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000156a  00000000  00000000  00040528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002053b  00000000  00000000  00041a92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020e80  00000000  00000000  00061fcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cbe0f  00000000  00000000  00082e4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014ec5c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007988  00000000  00000000  0014eca0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  00156628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000270 	.word	0x20000270
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0801126c 	.word	0x0801126c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000274 	.word	0x20000274
 8000104:	0801126c 	.word	0x0801126c

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <strlen>:
 800011c:	2300      	movs	r3, #0
 800011e:	5cc2      	ldrb	r2, [r0, r3]
 8000120:	3301      	adds	r3, #1
 8000122:	2a00      	cmp	r2, #0
 8000124:	d1fb      	bne.n	800011e <strlen+0x2>
 8000126:	1e58      	subs	r0, r3, #1
 8000128:	4770      	bx	lr
	...

0800012c <__gnu_thumb1_case_uqi>:
 800012c:	b402      	push	{r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	5c09      	ldrb	r1, [r1, r0]
 8000136:	0049      	lsls	r1, r1, #1
 8000138:	448e      	add	lr, r1
 800013a:	bc02      	pop	{r1}
 800013c:	4770      	bx	lr
 800013e:	46c0      	nop			@ (mov r8, r8)

08000140 <__gnu_thumb1_case_shi>:
 8000140:	b403      	push	{r0, r1}
 8000142:	4671      	mov	r1, lr
 8000144:	0849      	lsrs	r1, r1, #1
 8000146:	0040      	lsls	r0, r0, #1
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	5e09      	ldrsh	r1, [r1, r0]
 800014c:	0049      	lsls	r1, r1, #1
 800014e:	448e      	add	lr, r1
 8000150:	bc03      	pop	{r0, r1}
 8000152:	4770      	bx	lr

08000154 <__udivsi3>:
 8000154:	2200      	movs	r2, #0
 8000156:	0843      	lsrs	r3, r0, #1
 8000158:	428b      	cmp	r3, r1
 800015a:	d374      	bcc.n	8000246 <__udivsi3+0xf2>
 800015c:	0903      	lsrs	r3, r0, #4
 800015e:	428b      	cmp	r3, r1
 8000160:	d35f      	bcc.n	8000222 <__udivsi3+0xce>
 8000162:	0a03      	lsrs	r3, r0, #8
 8000164:	428b      	cmp	r3, r1
 8000166:	d344      	bcc.n	80001f2 <__udivsi3+0x9e>
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d328      	bcc.n	80001c0 <__udivsi3+0x6c>
 800016e:	0c03      	lsrs	r3, r0, #16
 8000170:	428b      	cmp	r3, r1
 8000172:	d30d      	bcc.n	8000190 <__udivsi3+0x3c>
 8000174:	22ff      	movs	r2, #255	@ 0xff
 8000176:	0209      	lsls	r1, r1, #8
 8000178:	ba12      	rev	r2, r2
 800017a:	0c03      	lsrs	r3, r0, #16
 800017c:	428b      	cmp	r3, r1
 800017e:	d302      	bcc.n	8000186 <__udivsi3+0x32>
 8000180:	1212      	asrs	r2, r2, #8
 8000182:	0209      	lsls	r1, r1, #8
 8000184:	d065      	beq.n	8000252 <__udivsi3+0xfe>
 8000186:	0b03      	lsrs	r3, r0, #12
 8000188:	428b      	cmp	r3, r1
 800018a:	d319      	bcc.n	80001c0 <__udivsi3+0x6c>
 800018c:	e000      	b.n	8000190 <__udivsi3+0x3c>
 800018e:	0a09      	lsrs	r1, r1, #8
 8000190:	0bc3      	lsrs	r3, r0, #15
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x46>
 8000196:	03cb      	lsls	r3, r1, #15
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b83      	lsrs	r3, r0, #14
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x52>
 80001a2:	038b      	lsls	r3, r1, #14
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0b43      	lsrs	r3, r0, #13
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x5e>
 80001ae:	034b      	lsls	r3, r1, #13
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0b03      	lsrs	r3, r0, #12
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x6a>
 80001ba:	030b      	lsls	r3, r1, #12
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0ac3      	lsrs	r3, r0, #11
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x76>
 80001c6:	02cb      	lsls	r3, r1, #11
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a83      	lsrs	r3, r0, #10
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x82>
 80001d2:	028b      	lsls	r3, r1, #10
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	0a43      	lsrs	r3, r0, #9
 80001da:	428b      	cmp	r3, r1
 80001dc:	d301      	bcc.n	80001e2 <__udivsi3+0x8e>
 80001de:	024b      	lsls	r3, r1, #9
 80001e0:	1ac0      	subs	r0, r0, r3
 80001e2:	4152      	adcs	r2, r2
 80001e4:	0a03      	lsrs	r3, r0, #8
 80001e6:	428b      	cmp	r3, r1
 80001e8:	d301      	bcc.n	80001ee <__udivsi3+0x9a>
 80001ea:	020b      	lsls	r3, r1, #8
 80001ec:	1ac0      	subs	r0, r0, r3
 80001ee:	4152      	adcs	r2, r2
 80001f0:	d2cd      	bcs.n	800018e <__udivsi3+0x3a>
 80001f2:	09c3      	lsrs	r3, r0, #7
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xa8>
 80001f8:	01cb      	lsls	r3, r1, #7
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0983      	lsrs	r3, r0, #6
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xb4>
 8000204:	018b      	lsls	r3, r1, #6
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0943      	lsrs	r3, r0, #5
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xc0>
 8000210:	014b      	lsls	r3, r1, #5
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0903      	lsrs	r3, r0, #4
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xcc>
 800021c:	010b      	lsls	r3, r1, #4
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	08c3      	lsrs	r3, r0, #3
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xd8>
 8000228:	00cb      	lsls	r3, r1, #3
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	0883      	lsrs	r3, r0, #2
 8000230:	428b      	cmp	r3, r1
 8000232:	d301      	bcc.n	8000238 <__udivsi3+0xe4>
 8000234:	008b      	lsls	r3, r1, #2
 8000236:	1ac0      	subs	r0, r0, r3
 8000238:	4152      	adcs	r2, r2
 800023a:	0843      	lsrs	r3, r0, #1
 800023c:	428b      	cmp	r3, r1
 800023e:	d301      	bcc.n	8000244 <__udivsi3+0xf0>
 8000240:	004b      	lsls	r3, r1, #1
 8000242:	1ac0      	subs	r0, r0, r3
 8000244:	4152      	adcs	r2, r2
 8000246:	1a41      	subs	r1, r0, r1
 8000248:	d200      	bcs.n	800024c <__udivsi3+0xf8>
 800024a:	4601      	mov	r1, r0
 800024c:	4152      	adcs	r2, r2
 800024e:	4610      	mov	r0, r2
 8000250:	4770      	bx	lr
 8000252:	e7ff      	b.n	8000254 <__udivsi3+0x100>
 8000254:	b501      	push	{r0, lr}
 8000256:	2000      	movs	r0, #0
 8000258:	f000 f8f0 	bl	800043c <__aeabi_idiv0>
 800025c:	bd02      	pop	{r1, pc}
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__aeabi_uidivmod>:
 8000260:	2900      	cmp	r1, #0
 8000262:	d0f7      	beq.n	8000254 <__udivsi3+0x100>
 8000264:	e776      	b.n	8000154 <__udivsi3>
 8000266:	4770      	bx	lr

08000268 <__divsi3>:
 8000268:	4603      	mov	r3, r0
 800026a:	430b      	orrs	r3, r1
 800026c:	d47f      	bmi.n	800036e <__divsi3+0x106>
 800026e:	2200      	movs	r2, #0
 8000270:	0843      	lsrs	r3, r0, #1
 8000272:	428b      	cmp	r3, r1
 8000274:	d374      	bcc.n	8000360 <__divsi3+0xf8>
 8000276:	0903      	lsrs	r3, r0, #4
 8000278:	428b      	cmp	r3, r1
 800027a:	d35f      	bcc.n	800033c <__divsi3+0xd4>
 800027c:	0a03      	lsrs	r3, r0, #8
 800027e:	428b      	cmp	r3, r1
 8000280:	d344      	bcc.n	800030c <__divsi3+0xa4>
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d328      	bcc.n	80002da <__divsi3+0x72>
 8000288:	0c03      	lsrs	r3, r0, #16
 800028a:	428b      	cmp	r3, r1
 800028c:	d30d      	bcc.n	80002aa <__divsi3+0x42>
 800028e:	22ff      	movs	r2, #255	@ 0xff
 8000290:	0209      	lsls	r1, r1, #8
 8000292:	ba12      	rev	r2, r2
 8000294:	0c03      	lsrs	r3, r0, #16
 8000296:	428b      	cmp	r3, r1
 8000298:	d302      	bcc.n	80002a0 <__divsi3+0x38>
 800029a:	1212      	asrs	r2, r2, #8
 800029c:	0209      	lsls	r1, r1, #8
 800029e:	d065      	beq.n	800036c <__divsi3+0x104>
 80002a0:	0b03      	lsrs	r3, r0, #12
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d319      	bcc.n	80002da <__divsi3+0x72>
 80002a6:	e000      	b.n	80002aa <__divsi3+0x42>
 80002a8:	0a09      	lsrs	r1, r1, #8
 80002aa:	0bc3      	lsrs	r3, r0, #15
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x4c>
 80002b0:	03cb      	lsls	r3, r1, #15
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b83      	lsrs	r3, r0, #14
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x58>
 80002bc:	038b      	lsls	r3, r1, #14
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0b43      	lsrs	r3, r0, #13
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x64>
 80002c8:	034b      	lsls	r3, r1, #13
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0b03      	lsrs	r3, r0, #12
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x70>
 80002d4:	030b      	lsls	r3, r1, #12
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0ac3      	lsrs	r3, r0, #11
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x7c>
 80002e0:	02cb      	lsls	r3, r1, #11
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a83      	lsrs	r3, r0, #10
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0x88>
 80002ec:	028b      	lsls	r3, r1, #10
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	0a43      	lsrs	r3, r0, #9
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d301      	bcc.n	80002fc <__divsi3+0x94>
 80002f8:	024b      	lsls	r3, r1, #9
 80002fa:	1ac0      	subs	r0, r0, r3
 80002fc:	4152      	adcs	r2, r2
 80002fe:	0a03      	lsrs	r3, r0, #8
 8000300:	428b      	cmp	r3, r1
 8000302:	d301      	bcc.n	8000308 <__divsi3+0xa0>
 8000304:	020b      	lsls	r3, r1, #8
 8000306:	1ac0      	subs	r0, r0, r3
 8000308:	4152      	adcs	r2, r2
 800030a:	d2cd      	bcs.n	80002a8 <__divsi3+0x40>
 800030c:	09c3      	lsrs	r3, r0, #7
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xae>
 8000312:	01cb      	lsls	r3, r1, #7
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0983      	lsrs	r3, r0, #6
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xba>
 800031e:	018b      	lsls	r3, r1, #6
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0943      	lsrs	r3, r0, #5
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xc6>
 800032a:	014b      	lsls	r3, r1, #5
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xd2>
 8000336:	010b      	lsls	r3, r1, #4
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	08c3      	lsrs	r3, r0, #3
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xde>
 8000342:	00cb      	lsls	r3, r1, #3
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	0883      	lsrs	r3, r0, #2
 800034a:	428b      	cmp	r3, r1
 800034c:	d301      	bcc.n	8000352 <__divsi3+0xea>
 800034e:	008b      	lsls	r3, r1, #2
 8000350:	1ac0      	subs	r0, r0, r3
 8000352:	4152      	adcs	r2, r2
 8000354:	0843      	lsrs	r3, r0, #1
 8000356:	428b      	cmp	r3, r1
 8000358:	d301      	bcc.n	800035e <__divsi3+0xf6>
 800035a:	004b      	lsls	r3, r1, #1
 800035c:	1ac0      	subs	r0, r0, r3
 800035e:	4152      	adcs	r2, r2
 8000360:	1a41      	subs	r1, r0, r1
 8000362:	d200      	bcs.n	8000366 <__divsi3+0xfe>
 8000364:	4601      	mov	r1, r0
 8000366:	4152      	adcs	r2, r2
 8000368:	4610      	mov	r0, r2
 800036a:	4770      	bx	lr
 800036c:	e05d      	b.n	800042a <__divsi3+0x1c2>
 800036e:	0fca      	lsrs	r2, r1, #31
 8000370:	d000      	beq.n	8000374 <__divsi3+0x10c>
 8000372:	4249      	negs	r1, r1
 8000374:	1003      	asrs	r3, r0, #32
 8000376:	d300      	bcc.n	800037a <__divsi3+0x112>
 8000378:	4240      	negs	r0, r0
 800037a:	4053      	eors	r3, r2
 800037c:	2200      	movs	r2, #0
 800037e:	469c      	mov	ip, r3
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d32d      	bcc.n	80003e2 <__divsi3+0x17a>
 8000386:	0a03      	lsrs	r3, r0, #8
 8000388:	428b      	cmp	r3, r1
 800038a:	d312      	bcc.n	80003b2 <__divsi3+0x14a>
 800038c:	22fc      	movs	r2, #252	@ 0xfc
 800038e:	0189      	lsls	r1, r1, #6
 8000390:	ba12      	rev	r2, r2
 8000392:	0a03      	lsrs	r3, r0, #8
 8000394:	428b      	cmp	r3, r1
 8000396:	d30c      	bcc.n	80003b2 <__divsi3+0x14a>
 8000398:	0189      	lsls	r1, r1, #6
 800039a:	1192      	asrs	r2, r2, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d308      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a0:	0189      	lsls	r1, r1, #6
 80003a2:	1192      	asrs	r2, r2, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d304      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a8:	0189      	lsls	r1, r1, #6
 80003aa:	d03a      	beq.n	8000422 <__divsi3+0x1ba>
 80003ac:	1192      	asrs	r2, r2, #6
 80003ae:	e000      	b.n	80003b2 <__divsi3+0x14a>
 80003b0:	0989      	lsrs	r1, r1, #6
 80003b2:	09c3      	lsrs	r3, r0, #7
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x154>
 80003b8:	01cb      	lsls	r3, r1, #7
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0983      	lsrs	r3, r0, #6
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x160>
 80003c4:	018b      	lsls	r3, r1, #6
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	0943      	lsrs	r3, r0, #5
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x16c>
 80003d0:	014b      	lsls	r3, r1, #5
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0903      	lsrs	r3, r0, #4
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x178>
 80003dc:	010b      	lsls	r3, r1, #4
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	08c3      	lsrs	r3, r0, #3
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x184>
 80003e8:	00cb      	lsls	r3, r1, #3
 80003ea:	1ac0      	subs	r0, r0, r3
 80003ec:	4152      	adcs	r2, r2
 80003ee:	0883      	lsrs	r3, r0, #2
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d301      	bcc.n	80003f8 <__divsi3+0x190>
 80003f4:	008b      	lsls	r3, r1, #2
 80003f6:	1ac0      	subs	r0, r0, r3
 80003f8:	4152      	adcs	r2, r2
 80003fa:	d2d9      	bcs.n	80003b0 <__divsi3+0x148>
 80003fc:	0843      	lsrs	r3, r0, #1
 80003fe:	428b      	cmp	r3, r1
 8000400:	d301      	bcc.n	8000406 <__divsi3+0x19e>
 8000402:	004b      	lsls	r3, r1, #1
 8000404:	1ac0      	subs	r0, r0, r3
 8000406:	4152      	adcs	r2, r2
 8000408:	1a41      	subs	r1, r0, r1
 800040a:	d200      	bcs.n	800040e <__divsi3+0x1a6>
 800040c:	4601      	mov	r1, r0
 800040e:	4663      	mov	r3, ip
 8000410:	4152      	adcs	r2, r2
 8000412:	105b      	asrs	r3, r3, #1
 8000414:	4610      	mov	r0, r2
 8000416:	d301      	bcc.n	800041c <__divsi3+0x1b4>
 8000418:	4240      	negs	r0, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d500      	bpl.n	8000420 <__divsi3+0x1b8>
 800041e:	4249      	negs	r1, r1
 8000420:	4770      	bx	lr
 8000422:	4663      	mov	r3, ip
 8000424:	105b      	asrs	r3, r3, #1
 8000426:	d300      	bcc.n	800042a <__divsi3+0x1c2>
 8000428:	4240      	negs	r0, r0
 800042a:	b501      	push	{r0, lr}
 800042c:	2000      	movs	r0, #0
 800042e:	f000 f805 	bl	800043c <__aeabi_idiv0>
 8000432:	bd02      	pop	{r1, pc}

08000434 <__aeabi_idivmod>:
 8000434:	2900      	cmp	r1, #0
 8000436:	d0f8      	beq.n	800042a <__divsi3+0x1c2>
 8000438:	e716      	b.n	8000268 <__divsi3>
 800043a:	4770      	bx	lr

0800043c <__aeabi_idiv0>:
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			@ (mov r8, r8)

08000440 <__aeabi_cdrcmple>:
 8000440:	4684      	mov	ip, r0
 8000442:	0010      	movs	r0, r2
 8000444:	4662      	mov	r2, ip
 8000446:	468c      	mov	ip, r1
 8000448:	0019      	movs	r1, r3
 800044a:	4663      	mov	r3, ip
 800044c:	e000      	b.n	8000450 <__aeabi_cdcmpeq>
 800044e:	46c0      	nop			@ (mov r8, r8)

08000450 <__aeabi_cdcmpeq>:
 8000450:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000452:	f002 f879 	bl	8002548 <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	d401      	bmi.n	800045e <__aeabi_cdcmpeq+0xe>
 800045a:	2100      	movs	r1, #0
 800045c:	42c8      	cmn	r0, r1
 800045e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000460 <__aeabi_dcmpeq>:
 8000460:	b510      	push	{r4, lr}
 8000462:	f001 ffb9 	bl	80023d8 <__eqdf2>
 8000466:	4240      	negs	r0, r0
 8000468:	3001      	adds	r0, #1
 800046a:	bd10      	pop	{r4, pc}

0800046c <__aeabi_dcmplt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f002 f86b 	bl	8002548 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	db01      	blt.n	800047a <__aeabi_dcmplt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmple>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f002 f861 	bl	8002548 <__ledf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dd01      	ble.n	800048e <__aeabi_dcmple+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpgt>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 ffe3 	bl	8002460 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	dc01      	bgt.n	80004a2 <__aeabi_dcmpgt+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_dcmpge>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	f001 ffd9 	bl	8002460 <__gedf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	da01      	bge.n	80004b6 <__aeabi_dcmpge+0xe>
 80004b2:	2000      	movs	r0, #0
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	2001      	movs	r0, #1
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			@ (mov r8, r8)

080004bc <__aeabi_cfrcmple>:
 80004bc:	4684      	mov	ip, r0
 80004be:	0008      	movs	r0, r1
 80004c0:	4661      	mov	r1, ip
 80004c2:	e7ff      	b.n	80004c4 <__aeabi_cfcmpeq>

080004c4 <__aeabi_cfcmpeq>:
 80004c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004c6:	f000 fd15 	bl	8000ef4 <__lesf2>
 80004ca:	2800      	cmp	r0, #0
 80004cc:	d401      	bmi.n	80004d2 <__aeabi_cfcmpeq+0xe>
 80004ce:	2100      	movs	r1, #0
 80004d0:	42c8      	cmn	r0, r1
 80004d2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004d4 <__aeabi_fcmpeq>:
 80004d4:	b510      	push	{r4, lr}
 80004d6:	f000 fc95 	bl	8000e04 <__eqsf2>
 80004da:	4240      	negs	r0, r0
 80004dc:	3001      	adds	r0, #1
 80004de:	bd10      	pop	{r4, pc}

080004e0 <__aeabi_fcmplt>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fd07 	bl	8000ef4 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	db01      	blt.n	80004ee <__aeabi_fcmplt+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			@ (mov r8, r8)

080004f4 <__aeabi_fcmple>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fcfd 	bl	8000ef4 <__lesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dd01      	ble.n	8000502 <__aeabi_fcmple+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			@ (mov r8, r8)

08000508 <__aeabi_fcmpgt>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fca3 	bl	8000e54 <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	dc01      	bgt.n	8000516 <__aeabi_fcmpgt+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			@ (mov r8, r8)

0800051c <__aeabi_fcmpge>:
 800051c:	b510      	push	{r4, lr}
 800051e:	f000 fc99 	bl	8000e54 <__gesf2>
 8000522:	2800      	cmp	r0, #0
 8000524:	da01      	bge.n	800052a <__aeabi_fcmpge+0xe>
 8000526:	2000      	movs	r0, #0
 8000528:	bd10      	pop	{r4, pc}
 800052a:	2001      	movs	r0, #1
 800052c:	bd10      	pop	{r4, pc}
 800052e:	46c0      	nop			@ (mov r8, r8)

08000530 <__aeabi_uldivmod>:
 8000530:	2b00      	cmp	r3, #0
 8000532:	d111      	bne.n	8000558 <__aeabi_uldivmod+0x28>
 8000534:	2a00      	cmp	r2, #0
 8000536:	d10f      	bne.n	8000558 <__aeabi_uldivmod+0x28>
 8000538:	2900      	cmp	r1, #0
 800053a:	d100      	bne.n	800053e <__aeabi_uldivmod+0xe>
 800053c:	2800      	cmp	r0, #0
 800053e:	d002      	beq.n	8000546 <__aeabi_uldivmod+0x16>
 8000540:	2100      	movs	r1, #0
 8000542:	43c9      	mvns	r1, r1
 8000544:	0008      	movs	r0, r1
 8000546:	b407      	push	{r0, r1, r2}
 8000548:	4802      	ldr	r0, [pc, #8]	@ (8000554 <__aeabi_uldivmod+0x24>)
 800054a:	a102      	add	r1, pc, #8	@ (adr r1, 8000554 <__aeabi_uldivmod+0x24>)
 800054c:	1840      	adds	r0, r0, r1
 800054e:	9002      	str	r0, [sp, #8]
 8000550:	bd03      	pop	{r0, r1, pc}
 8000552:	46c0      	nop			@ (mov r8, r8)
 8000554:	fffffee9 	.word	0xfffffee9
 8000558:	b403      	push	{r0, r1}
 800055a:	4668      	mov	r0, sp
 800055c:	b501      	push	{r0, lr}
 800055e:	9802      	ldr	r0, [sp, #8]
 8000560:	f000 f8da 	bl	8000718 <__udivmoddi4>
 8000564:	9b01      	ldr	r3, [sp, #4]
 8000566:	469e      	mov	lr, r3
 8000568:	b002      	add	sp, #8
 800056a:	bc0c      	pop	{r2, r3}
 800056c:	4770      	bx	lr
 800056e:	46c0      	nop			@ (mov r8, r8)

08000570 <__aeabi_lmul>:
 8000570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000572:	46ce      	mov	lr, r9
 8000574:	4699      	mov	r9, r3
 8000576:	0c03      	lsrs	r3, r0, #16
 8000578:	469c      	mov	ip, r3
 800057a:	0413      	lsls	r3, r2, #16
 800057c:	4647      	mov	r7, r8
 800057e:	0c1b      	lsrs	r3, r3, #16
 8000580:	001d      	movs	r5, r3
 8000582:	000e      	movs	r6, r1
 8000584:	4661      	mov	r1, ip
 8000586:	0404      	lsls	r4, r0, #16
 8000588:	0c24      	lsrs	r4, r4, #16
 800058a:	b580      	push	{r7, lr}
 800058c:	0007      	movs	r7, r0
 800058e:	0c10      	lsrs	r0, r2, #16
 8000590:	434b      	muls	r3, r1
 8000592:	4365      	muls	r5, r4
 8000594:	4341      	muls	r1, r0
 8000596:	4360      	muls	r0, r4
 8000598:	0c2c      	lsrs	r4, r5, #16
 800059a:	18c0      	adds	r0, r0, r3
 800059c:	1824      	adds	r4, r4, r0
 800059e:	468c      	mov	ip, r1
 80005a0:	42a3      	cmp	r3, r4
 80005a2:	d903      	bls.n	80005ac <__aeabi_lmul+0x3c>
 80005a4:	2380      	movs	r3, #128	@ 0x80
 80005a6:	025b      	lsls	r3, r3, #9
 80005a8:	4698      	mov	r8, r3
 80005aa:	44c4      	add	ip, r8
 80005ac:	4649      	mov	r1, r9
 80005ae:	4379      	muls	r1, r7
 80005b0:	4356      	muls	r6, r2
 80005b2:	0c23      	lsrs	r3, r4, #16
 80005b4:	042d      	lsls	r5, r5, #16
 80005b6:	0c2d      	lsrs	r5, r5, #16
 80005b8:	1989      	adds	r1, r1, r6
 80005ba:	4463      	add	r3, ip
 80005bc:	0424      	lsls	r4, r4, #16
 80005be:	1960      	adds	r0, r4, r5
 80005c0:	18c9      	adds	r1, r1, r3
 80005c2:	bcc0      	pop	{r6, r7}
 80005c4:	46b9      	mov	r9, r7
 80005c6:	46b0      	mov	r8, r6
 80005c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005ca:	46c0      	nop			@ (mov r8, r8)

080005cc <__aeabi_f2uiz>:
 80005cc:	219e      	movs	r1, #158	@ 0x9e
 80005ce:	b510      	push	{r4, lr}
 80005d0:	05c9      	lsls	r1, r1, #23
 80005d2:	1c04      	adds	r4, r0, #0
 80005d4:	f7ff ffa2 	bl	800051c <__aeabi_fcmpge>
 80005d8:	2800      	cmp	r0, #0
 80005da:	d103      	bne.n	80005e4 <__aeabi_f2uiz+0x18>
 80005dc:	1c20      	adds	r0, r4, #0
 80005de:	f000 ffcf 	bl	8001580 <__aeabi_f2iz>
 80005e2:	bd10      	pop	{r4, pc}
 80005e4:	219e      	movs	r1, #158	@ 0x9e
 80005e6:	1c20      	adds	r0, r4, #0
 80005e8:	05c9      	lsls	r1, r1, #23
 80005ea:	f000 fe0f 	bl	800120c <__aeabi_fsub>
 80005ee:	f000 ffc7 	bl	8001580 <__aeabi_f2iz>
 80005f2:	2380      	movs	r3, #128	@ 0x80
 80005f4:	061b      	lsls	r3, r3, #24
 80005f6:	469c      	mov	ip, r3
 80005f8:	4460      	add	r0, ip
 80005fa:	e7f2      	b.n	80005e2 <__aeabi_f2uiz+0x16>

080005fc <__aeabi_d2uiz>:
 80005fc:	b570      	push	{r4, r5, r6, lr}
 80005fe:	2200      	movs	r2, #0
 8000600:	4b0c      	ldr	r3, [pc, #48]	@ (8000634 <__aeabi_d2uiz+0x38>)
 8000602:	0004      	movs	r4, r0
 8000604:	000d      	movs	r5, r1
 8000606:	f7ff ff4f 	bl	80004a8 <__aeabi_dcmpge>
 800060a:	2800      	cmp	r0, #0
 800060c:	d104      	bne.n	8000618 <__aeabi_d2uiz+0x1c>
 800060e:	0020      	movs	r0, r4
 8000610:	0029      	movs	r1, r5
 8000612:	f002 fe91 	bl	8003338 <__aeabi_d2iz>
 8000616:	bd70      	pop	{r4, r5, r6, pc}
 8000618:	4b06      	ldr	r3, [pc, #24]	@ (8000634 <__aeabi_d2uiz+0x38>)
 800061a:	2200      	movs	r2, #0
 800061c:	0020      	movs	r0, r4
 800061e:	0029      	movs	r1, r5
 8000620:	f002 facc 	bl	8002bbc <__aeabi_dsub>
 8000624:	f002 fe88 	bl	8003338 <__aeabi_d2iz>
 8000628:	2380      	movs	r3, #128	@ 0x80
 800062a:	061b      	lsls	r3, r3, #24
 800062c:	469c      	mov	ip, r3
 800062e:	4460      	add	r0, ip
 8000630:	e7f1      	b.n	8000616 <__aeabi_d2uiz+0x1a>
 8000632:	46c0      	nop			@ (mov r8, r8)
 8000634:	41e00000 	.word	0x41e00000

08000638 <__aeabi_d2lz>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	2200      	movs	r2, #0
 800063c:	2300      	movs	r3, #0
 800063e:	0004      	movs	r4, r0
 8000640:	000d      	movs	r5, r1
 8000642:	f7ff ff13 	bl	800046c <__aeabi_dcmplt>
 8000646:	2800      	cmp	r0, #0
 8000648:	d108      	bne.n	800065c <__aeabi_d2lz+0x24>
 800064a:	0020      	movs	r0, r4
 800064c:	0029      	movs	r1, r5
 800064e:	f000 f82f 	bl	80006b0 <__aeabi_d2ulz>
 8000652:	0002      	movs	r2, r0
 8000654:	000b      	movs	r3, r1
 8000656:	0010      	movs	r0, r2
 8000658:	0019      	movs	r1, r3
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	2380      	movs	r3, #128	@ 0x80
 800065e:	061b      	lsls	r3, r3, #24
 8000660:	18e9      	adds	r1, r5, r3
 8000662:	0020      	movs	r0, r4
 8000664:	f000 f824 	bl	80006b0 <__aeabi_d2ulz>
 8000668:	2300      	movs	r3, #0
 800066a:	4242      	negs	r2, r0
 800066c:	418b      	sbcs	r3, r1
 800066e:	e7f2      	b.n	8000656 <__aeabi_d2lz+0x1e>

08000670 <__aeabi_f2ulz>:
 8000670:	b570      	push	{r4, r5, r6, lr}
 8000672:	f002 feef 	bl	8003454 <__aeabi_f2d>
 8000676:	2200      	movs	r2, #0
 8000678:	4b0b      	ldr	r3, [pc, #44]	@ (80006a8 <__aeabi_f2ulz+0x38>)
 800067a:	000d      	movs	r5, r1
 800067c:	0004      	movs	r4, r0
 800067e:	f001 ffd5 	bl	800262c <__aeabi_dmul>
 8000682:	f7ff ffbb 	bl	80005fc <__aeabi_d2uiz>
 8000686:	0006      	movs	r6, r0
 8000688:	f002 fec0 	bl	800340c <__aeabi_ui2d>
 800068c:	2200      	movs	r2, #0
 800068e:	4b07      	ldr	r3, [pc, #28]	@ (80006ac <__aeabi_f2ulz+0x3c>)
 8000690:	f001 ffcc 	bl	800262c <__aeabi_dmul>
 8000694:	0002      	movs	r2, r0
 8000696:	000b      	movs	r3, r1
 8000698:	0020      	movs	r0, r4
 800069a:	0029      	movs	r1, r5
 800069c:	f002 fa8e 	bl	8002bbc <__aeabi_dsub>
 80006a0:	f7ff ffac 	bl	80005fc <__aeabi_d2uiz>
 80006a4:	0031      	movs	r1, r6
 80006a6:	bd70      	pop	{r4, r5, r6, pc}
 80006a8:	3df00000 	.word	0x3df00000
 80006ac:	41f00000 	.word	0x41f00000

080006b0 <__aeabi_d2ulz>:
 80006b0:	b570      	push	{r4, r5, r6, lr}
 80006b2:	2200      	movs	r2, #0
 80006b4:	4b0b      	ldr	r3, [pc, #44]	@ (80006e4 <__aeabi_d2ulz+0x34>)
 80006b6:	000d      	movs	r5, r1
 80006b8:	0004      	movs	r4, r0
 80006ba:	f001 ffb7 	bl	800262c <__aeabi_dmul>
 80006be:	f7ff ff9d 	bl	80005fc <__aeabi_d2uiz>
 80006c2:	0006      	movs	r6, r0
 80006c4:	f002 fea2 	bl	800340c <__aeabi_ui2d>
 80006c8:	2200      	movs	r2, #0
 80006ca:	4b07      	ldr	r3, [pc, #28]	@ (80006e8 <__aeabi_d2ulz+0x38>)
 80006cc:	f001 ffae 	bl	800262c <__aeabi_dmul>
 80006d0:	0002      	movs	r2, r0
 80006d2:	000b      	movs	r3, r1
 80006d4:	0020      	movs	r0, r4
 80006d6:	0029      	movs	r1, r5
 80006d8:	f002 fa70 	bl	8002bbc <__aeabi_dsub>
 80006dc:	f7ff ff8e 	bl	80005fc <__aeabi_d2uiz>
 80006e0:	0031      	movs	r1, r6
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	3df00000 	.word	0x3df00000
 80006e8:	41f00000 	.word	0x41f00000

080006ec <__aeabi_l2d>:
 80006ec:	b570      	push	{r4, r5, r6, lr}
 80006ee:	0006      	movs	r6, r0
 80006f0:	0008      	movs	r0, r1
 80006f2:	f002 fe5d 	bl	80033b0 <__aeabi_i2d>
 80006f6:	2200      	movs	r2, #0
 80006f8:	4b06      	ldr	r3, [pc, #24]	@ (8000714 <__aeabi_l2d+0x28>)
 80006fa:	f001 ff97 	bl	800262c <__aeabi_dmul>
 80006fe:	000d      	movs	r5, r1
 8000700:	0004      	movs	r4, r0
 8000702:	0030      	movs	r0, r6
 8000704:	f002 fe82 	bl	800340c <__aeabi_ui2d>
 8000708:	002b      	movs	r3, r5
 800070a:	0022      	movs	r2, r4
 800070c:	f000 ffe6 	bl	80016dc <__aeabi_dadd>
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	46c0      	nop			@ (mov r8, r8)
 8000714:	41f00000 	.word	0x41f00000

08000718 <__udivmoddi4>:
 8000718:	b5f0      	push	{r4, r5, r6, r7, lr}
 800071a:	4657      	mov	r7, sl
 800071c:	464e      	mov	r6, r9
 800071e:	4645      	mov	r5, r8
 8000720:	46de      	mov	lr, fp
 8000722:	b5e0      	push	{r5, r6, r7, lr}
 8000724:	0004      	movs	r4, r0
 8000726:	000d      	movs	r5, r1
 8000728:	4692      	mov	sl, r2
 800072a:	4699      	mov	r9, r3
 800072c:	b083      	sub	sp, #12
 800072e:	428b      	cmp	r3, r1
 8000730:	d830      	bhi.n	8000794 <__udivmoddi4+0x7c>
 8000732:	d02d      	beq.n	8000790 <__udivmoddi4+0x78>
 8000734:	4649      	mov	r1, r9
 8000736:	4650      	mov	r0, sl
 8000738:	f002 ff76 	bl	8003628 <__clzdi2>
 800073c:	0029      	movs	r1, r5
 800073e:	0006      	movs	r6, r0
 8000740:	0020      	movs	r0, r4
 8000742:	f002 ff71 	bl	8003628 <__clzdi2>
 8000746:	1a33      	subs	r3, r6, r0
 8000748:	4698      	mov	r8, r3
 800074a:	3b20      	subs	r3, #32
 800074c:	d434      	bmi.n	80007b8 <__udivmoddi4+0xa0>
 800074e:	469b      	mov	fp, r3
 8000750:	4653      	mov	r3, sl
 8000752:	465a      	mov	r2, fp
 8000754:	4093      	lsls	r3, r2
 8000756:	4642      	mov	r2, r8
 8000758:	001f      	movs	r7, r3
 800075a:	4653      	mov	r3, sl
 800075c:	4093      	lsls	r3, r2
 800075e:	001e      	movs	r6, r3
 8000760:	42af      	cmp	r7, r5
 8000762:	d83b      	bhi.n	80007dc <__udivmoddi4+0xc4>
 8000764:	42af      	cmp	r7, r5
 8000766:	d100      	bne.n	800076a <__udivmoddi4+0x52>
 8000768:	e079      	b.n	800085e <__udivmoddi4+0x146>
 800076a:	465b      	mov	r3, fp
 800076c:	1ba4      	subs	r4, r4, r6
 800076e:	41bd      	sbcs	r5, r7
 8000770:	2b00      	cmp	r3, #0
 8000772:	da00      	bge.n	8000776 <__udivmoddi4+0x5e>
 8000774:	e076      	b.n	8000864 <__udivmoddi4+0x14c>
 8000776:	2200      	movs	r2, #0
 8000778:	2300      	movs	r3, #0
 800077a:	9200      	str	r2, [sp, #0]
 800077c:	9301      	str	r3, [sp, #4]
 800077e:	2301      	movs	r3, #1
 8000780:	465a      	mov	r2, fp
 8000782:	4093      	lsls	r3, r2
 8000784:	9301      	str	r3, [sp, #4]
 8000786:	2301      	movs	r3, #1
 8000788:	4642      	mov	r2, r8
 800078a:	4093      	lsls	r3, r2
 800078c:	9300      	str	r3, [sp, #0]
 800078e:	e029      	b.n	80007e4 <__udivmoddi4+0xcc>
 8000790:	4282      	cmp	r2, r0
 8000792:	d9cf      	bls.n	8000734 <__udivmoddi4+0x1c>
 8000794:	2200      	movs	r2, #0
 8000796:	2300      	movs	r3, #0
 8000798:	9200      	str	r2, [sp, #0]
 800079a:	9301      	str	r3, [sp, #4]
 800079c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <__udivmoddi4+0x8e>
 80007a2:	601c      	str	r4, [r3, #0]
 80007a4:	605d      	str	r5, [r3, #4]
 80007a6:	9800      	ldr	r0, [sp, #0]
 80007a8:	9901      	ldr	r1, [sp, #4]
 80007aa:	b003      	add	sp, #12
 80007ac:	bcf0      	pop	{r4, r5, r6, r7}
 80007ae:	46bb      	mov	fp, r7
 80007b0:	46b2      	mov	sl, r6
 80007b2:	46a9      	mov	r9, r5
 80007b4:	46a0      	mov	r8, r4
 80007b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007b8:	4642      	mov	r2, r8
 80007ba:	469b      	mov	fp, r3
 80007bc:	2320      	movs	r3, #32
 80007be:	1a9b      	subs	r3, r3, r2
 80007c0:	4652      	mov	r2, sl
 80007c2:	40da      	lsrs	r2, r3
 80007c4:	4641      	mov	r1, r8
 80007c6:	0013      	movs	r3, r2
 80007c8:	464a      	mov	r2, r9
 80007ca:	408a      	lsls	r2, r1
 80007cc:	0017      	movs	r7, r2
 80007ce:	4642      	mov	r2, r8
 80007d0:	431f      	orrs	r7, r3
 80007d2:	4653      	mov	r3, sl
 80007d4:	4093      	lsls	r3, r2
 80007d6:	001e      	movs	r6, r3
 80007d8:	42af      	cmp	r7, r5
 80007da:	d9c3      	bls.n	8000764 <__udivmoddi4+0x4c>
 80007dc:	2200      	movs	r2, #0
 80007de:	2300      	movs	r3, #0
 80007e0:	9200      	str	r2, [sp, #0]
 80007e2:	9301      	str	r3, [sp, #4]
 80007e4:	4643      	mov	r3, r8
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d0d8      	beq.n	800079c <__udivmoddi4+0x84>
 80007ea:	07fb      	lsls	r3, r7, #31
 80007ec:	0872      	lsrs	r2, r6, #1
 80007ee:	431a      	orrs	r2, r3
 80007f0:	4646      	mov	r6, r8
 80007f2:	087b      	lsrs	r3, r7, #1
 80007f4:	e00e      	b.n	8000814 <__udivmoddi4+0xfc>
 80007f6:	42ab      	cmp	r3, r5
 80007f8:	d101      	bne.n	80007fe <__udivmoddi4+0xe6>
 80007fa:	42a2      	cmp	r2, r4
 80007fc:	d80c      	bhi.n	8000818 <__udivmoddi4+0x100>
 80007fe:	1aa4      	subs	r4, r4, r2
 8000800:	419d      	sbcs	r5, r3
 8000802:	2001      	movs	r0, #1
 8000804:	1924      	adds	r4, r4, r4
 8000806:	416d      	adcs	r5, r5
 8000808:	2100      	movs	r1, #0
 800080a:	3e01      	subs	r6, #1
 800080c:	1824      	adds	r4, r4, r0
 800080e:	414d      	adcs	r5, r1
 8000810:	2e00      	cmp	r6, #0
 8000812:	d006      	beq.n	8000822 <__udivmoddi4+0x10a>
 8000814:	42ab      	cmp	r3, r5
 8000816:	d9ee      	bls.n	80007f6 <__udivmoddi4+0xde>
 8000818:	3e01      	subs	r6, #1
 800081a:	1924      	adds	r4, r4, r4
 800081c:	416d      	adcs	r5, r5
 800081e:	2e00      	cmp	r6, #0
 8000820:	d1f8      	bne.n	8000814 <__udivmoddi4+0xfc>
 8000822:	9800      	ldr	r0, [sp, #0]
 8000824:	9901      	ldr	r1, [sp, #4]
 8000826:	465b      	mov	r3, fp
 8000828:	1900      	adds	r0, r0, r4
 800082a:	4169      	adcs	r1, r5
 800082c:	2b00      	cmp	r3, #0
 800082e:	db24      	blt.n	800087a <__udivmoddi4+0x162>
 8000830:	002b      	movs	r3, r5
 8000832:	465a      	mov	r2, fp
 8000834:	4644      	mov	r4, r8
 8000836:	40d3      	lsrs	r3, r2
 8000838:	002a      	movs	r2, r5
 800083a:	40e2      	lsrs	r2, r4
 800083c:	001c      	movs	r4, r3
 800083e:	465b      	mov	r3, fp
 8000840:	0015      	movs	r5, r2
 8000842:	2b00      	cmp	r3, #0
 8000844:	db2a      	blt.n	800089c <__udivmoddi4+0x184>
 8000846:	0026      	movs	r6, r4
 8000848:	409e      	lsls	r6, r3
 800084a:	0033      	movs	r3, r6
 800084c:	0026      	movs	r6, r4
 800084e:	4647      	mov	r7, r8
 8000850:	40be      	lsls	r6, r7
 8000852:	0032      	movs	r2, r6
 8000854:	1a80      	subs	r0, r0, r2
 8000856:	4199      	sbcs	r1, r3
 8000858:	9000      	str	r0, [sp, #0]
 800085a:	9101      	str	r1, [sp, #4]
 800085c:	e79e      	b.n	800079c <__udivmoddi4+0x84>
 800085e:	42a3      	cmp	r3, r4
 8000860:	d8bc      	bhi.n	80007dc <__udivmoddi4+0xc4>
 8000862:	e782      	b.n	800076a <__udivmoddi4+0x52>
 8000864:	4642      	mov	r2, r8
 8000866:	2320      	movs	r3, #32
 8000868:	2100      	movs	r1, #0
 800086a:	1a9b      	subs	r3, r3, r2
 800086c:	2200      	movs	r2, #0
 800086e:	9100      	str	r1, [sp, #0]
 8000870:	9201      	str	r2, [sp, #4]
 8000872:	2201      	movs	r2, #1
 8000874:	40da      	lsrs	r2, r3
 8000876:	9201      	str	r2, [sp, #4]
 8000878:	e785      	b.n	8000786 <__udivmoddi4+0x6e>
 800087a:	4642      	mov	r2, r8
 800087c:	2320      	movs	r3, #32
 800087e:	1a9b      	subs	r3, r3, r2
 8000880:	002a      	movs	r2, r5
 8000882:	4646      	mov	r6, r8
 8000884:	409a      	lsls	r2, r3
 8000886:	0023      	movs	r3, r4
 8000888:	40f3      	lsrs	r3, r6
 800088a:	4644      	mov	r4, r8
 800088c:	4313      	orrs	r3, r2
 800088e:	002a      	movs	r2, r5
 8000890:	40e2      	lsrs	r2, r4
 8000892:	001c      	movs	r4, r3
 8000894:	465b      	mov	r3, fp
 8000896:	0015      	movs	r5, r2
 8000898:	2b00      	cmp	r3, #0
 800089a:	dad4      	bge.n	8000846 <__udivmoddi4+0x12e>
 800089c:	4642      	mov	r2, r8
 800089e:	002f      	movs	r7, r5
 80008a0:	2320      	movs	r3, #32
 80008a2:	0026      	movs	r6, r4
 80008a4:	4097      	lsls	r7, r2
 80008a6:	1a9b      	subs	r3, r3, r2
 80008a8:	40de      	lsrs	r6, r3
 80008aa:	003b      	movs	r3, r7
 80008ac:	4333      	orrs	r3, r6
 80008ae:	e7cd      	b.n	800084c <__udivmoddi4+0x134>

080008b0 <__aeabi_fadd>:
 80008b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008b2:	46ce      	mov	lr, r9
 80008b4:	4647      	mov	r7, r8
 80008b6:	0243      	lsls	r3, r0, #9
 80008b8:	0a5a      	lsrs	r2, r3, #9
 80008ba:	024e      	lsls	r6, r1, #9
 80008bc:	0045      	lsls	r5, r0, #1
 80008be:	0fc4      	lsrs	r4, r0, #31
 80008c0:	0048      	lsls	r0, r1, #1
 80008c2:	4691      	mov	r9, r2
 80008c4:	0e2d      	lsrs	r5, r5, #24
 80008c6:	0a72      	lsrs	r2, r6, #9
 80008c8:	0e00      	lsrs	r0, r0, #24
 80008ca:	4694      	mov	ip, r2
 80008cc:	b580      	push	{r7, lr}
 80008ce:	099b      	lsrs	r3, r3, #6
 80008d0:	0fc9      	lsrs	r1, r1, #31
 80008d2:	09b6      	lsrs	r6, r6, #6
 80008d4:	1a2a      	subs	r2, r5, r0
 80008d6:	428c      	cmp	r4, r1
 80008d8:	d021      	beq.n	800091e <__aeabi_fadd+0x6e>
 80008da:	2a00      	cmp	r2, #0
 80008dc:	dd0d      	ble.n	80008fa <__aeabi_fadd+0x4a>
 80008de:	2800      	cmp	r0, #0
 80008e0:	d12d      	bne.n	800093e <__aeabi_fadd+0x8e>
 80008e2:	2e00      	cmp	r6, #0
 80008e4:	d100      	bne.n	80008e8 <__aeabi_fadd+0x38>
 80008e6:	e08d      	b.n	8000a04 <__aeabi_fadd+0x154>
 80008e8:	1e51      	subs	r1, r2, #1
 80008ea:	2a01      	cmp	r2, #1
 80008ec:	d100      	bne.n	80008f0 <__aeabi_fadd+0x40>
 80008ee:	e11d      	b.n	8000b2c <__aeabi_fadd+0x27c>
 80008f0:	2aff      	cmp	r2, #255	@ 0xff
 80008f2:	d100      	bne.n	80008f6 <__aeabi_fadd+0x46>
 80008f4:	e0ab      	b.n	8000a4e <__aeabi_fadd+0x19e>
 80008f6:	000a      	movs	r2, r1
 80008f8:	e027      	b.n	800094a <__aeabi_fadd+0x9a>
 80008fa:	2a00      	cmp	r2, #0
 80008fc:	d04d      	beq.n	800099a <__aeabi_fadd+0xea>
 80008fe:	1b42      	subs	r2, r0, r5
 8000900:	2d00      	cmp	r5, #0
 8000902:	d000      	beq.n	8000906 <__aeabi_fadd+0x56>
 8000904:	e0cc      	b.n	8000aa0 <__aeabi_fadd+0x1f0>
 8000906:	2b00      	cmp	r3, #0
 8000908:	d100      	bne.n	800090c <__aeabi_fadd+0x5c>
 800090a:	e079      	b.n	8000a00 <__aeabi_fadd+0x150>
 800090c:	1e54      	subs	r4, r2, #1
 800090e:	2a01      	cmp	r2, #1
 8000910:	d100      	bne.n	8000914 <__aeabi_fadd+0x64>
 8000912:	e128      	b.n	8000b66 <__aeabi_fadd+0x2b6>
 8000914:	2aff      	cmp	r2, #255	@ 0xff
 8000916:	d100      	bne.n	800091a <__aeabi_fadd+0x6a>
 8000918:	e097      	b.n	8000a4a <__aeabi_fadd+0x19a>
 800091a:	0022      	movs	r2, r4
 800091c:	e0c5      	b.n	8000aaa <__aeabi_fadd+0x1fa>
 800091e:	2a00      	cmp	r2, #0
 8000920:	dc00      	bgt.n	8000924 <__aeabi_fadd+0x74>
 8000922:	e096      	b.n	8000a52 <__aeabi_fadd+0x1a2>
 8000924:	2800      	cmp	r0, #0
 8000926:	d04f      	beq.n	80009c8 <__aeabi_fadd+0x118>
 8000928:	2dff      	cmp	r5, #255	@ 0xff
 800092a:	d100      	bne.n	800092e <__aeabi_fadd+0x7e>
 800092c:	e08f      	b.n	8000a4e <__aeabi_fadd+0x19e>
 800092e:	2180      	movs	r1, #128	@ 0x80
 8000930:	04c9      	lsls	r1, r1, #19
 8000932:	430e      	orrs	r6, r1
 8000934:	2a1b      	cmp	r2, #27
 8000936:	dd51      	ble.n	80009dc <__aeabi_fadd+0x12c>
 8000938:	002a      	movs	r2, r5
 800093a:	3301      	adds	r3, #1
 800093c:	e018      	b.n	8000970 <__aeabi_fadd+0xc0>
 800093e:	2dff      	cmp	r5, #255	@ 0xff
 8000940:	d100      	bne.n	8000944 <__aeabi_fadd+0x94>
 8000942:	e084      	b.n	8000a4e <__aeabi_fadd+0x19e>
 8000944:	2180      	movs	r1, #128	@ 0x80
 8000946:	04c9      	lsls	r1, r1, #19
 8000948:	430e      	orrs	r6, r1
 800094a:	2101      	movs	r1, #1
 800094c:	2a1b      	cmp	r2, #27
 800094e:	dc08      	bgt.n	8000962 <__aeabi_fadd+0xb2>
 8000950:	0031      	movs	r1, r6
 8000952:	2020      	movs	r0, #32
 8000954:	40d1      	lsrs	r1, r2
 8000956:	1a82      	subs	r2, r0, r2
 8000958:	4096      	lsls	r6, r2
 800095a:	0032      	movs	r2, r6
 800095c:	1e50      	subs	r0, r2, #1
 800095e:	4182      	sbcs	r2, r0
 8000960:	4311      	orrs	r1, r2
 8000962:	1a5b      	subs	r3, r3, r1
 8000964:	015a      	lsls	r2, r3, #5
 8000966:	d459      	bmi.n	8000a1c <__aeabi_fadd+0x16c>
 8000968:	2107      	movs	r1, #7
 800096a:	002a      	movs	r2, r5
 800096c:	4019      	ands	r1, r3
 800096e:	d049      	beq.n	8000a04 <__aeabi_fadd+0x154>
 8000970:	210f      	movs	r1, #15
 8000972:	4019      	ands	r1, r3
 8000974:	2904      	cmp	r1, #4
 8000976:	d000      	beq.n	800097a <__aeabi_fadd+0xca>
 8000978:	3304      	adds	r3, #4
 800097a:	0159      	lsls	r1, r3, #5
 800097c:	d542      	bpl.n	8000a04 <__aeabi_fadd+0x154>
 800097e:	1c50      	adds	r0, r2, #1
 8000980:	2afe      	cmp	r2, #254	@ 0xfe
 8000982:	d03a      	beq.n	80009fa <__aeabi_fadd+0x14a>
 8000984:	019b      	lsls	r3, r3, #6
 8000986:	b2c0      	uxtb	r0, r0
 8000988:	0a5b      	lsrs	r3, r3, #9
 800098a:	05c0      	lsls	r0, r0, #23
 800098c:	4318      	orrs	r0, r3
 800098e:	07e4      	lsls	r4, r4, #31
 8000990:	4320      	orrs	r0, r4
 8000992:	bcc0      	pop	{r6, r7}
 8000994:	46b9      	mov	r9, r7
 8000996:	46b0      	mov	r8, r6
 8000998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800099a:	20fe      	movs	r0, #254	@ 0xfe
 800099c:	4680      	mov	r8, r0
 800099e:	1c6f      	adds	r7, r5, #1
 80009a0:	0038      	movs	r0, r7
 80009a2:	4647      	mov	r7, r8
 80009a4:	4207      	tst	r7, r0
 80009a6:	d000      	beq.n	80009aa <__aeabi_fadd+0xfa>
 80009a8:	e08e      	b.n	8000ac8 <__aeabi_fadd+0x218>
 80009aa:	2d00      	cmp	r5, #0
 80009ac:	d000      	beq.n	80009b0 <__aeabi_fadd+0x100>
 80009ae:	e0b4      	b.n	8000b1a <__aeabi_fadd+0x26a>
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d100      	bne.n	80009b6 <__aeabi_fadd+0x106>
 80009b4:	e0db      	b.n	8000b6e <__aeabi_fadd+0x2be>
 80009b6:	2e00      	cmp	r6, #0
 80009b8:	d06c      	beq.n	8000a94 <__aeabi_fadd+0x1e4>
 80009ba:	1b98      	subs	r0, r3, r6
 80009bc:	0145      	lsls	r5, r0, #5
 80009be:	d400      	bmi.n	80009c2 <__aeabi_fadd+0x112>
 80009c0:	e0f7      	b.n	8000bb2 <__aeabi_fadd+0x302>
 80009c2:	000c      	movs	r4, r1
 80009c4:	1af3      	subs	r3, r6, r3
 80009c6:	e03d      	b.n	8000a44 <__aeabi_fadd+0x194>
 80009c8:	2e00      	cmp	r6, #0
 80009ca:	d01b      	beq.n	8000a04 <__aeabi_fadd+0x154>
 80009cc:	1e51      	subs	r1, r2, #1
 80009ce:	2a01      	cmp	r2, #1
 80009d0:	d100      	bne.n	80009d4 <__aeabi_fadd+0x124>
 80009d2:	e082      	b.n	8000ada <__aeabi_fadd+0x22a>
 80009d4:	2aff      	cmp	r2, #255	@ 0xff
 80009d6:	d03a      	beq.n	8000a4e <__aeabi_fadd+0x19e>
 80009d8:	000a      	movs	r2, r1
 80009da:	e7ab      	b.n	8000934 <__aeabi_fadd+0x84>
 80009dc:	0031      	movs	r1, r6
 80009de:	2020      	movs	r0, #32
 80009e0:	40d1      	lsrs	r1, r2
 80009e2:	1a82      	subs	r2, r0, r2
 80009e4:	4096      	lsls	r6, r2
 80009e6:	0032      	movs	r2, r6
 80009e8:	1e50      	subs	r0, r2, #1
 80009ea:	4182      	sbcs	r2, r0
 80009ec:	430a      	orrs	r2, r1
 80009ee:	189b      	adds	r3, r3, r2
 80009f0:	015a      	lsls	r2, r3, #5
 80009f2:	d5b9      	bpl.n	8000968 <__aeabi_fadd+0xb8>
 80009f4:	1c6a      	adds	r2, r5, #1
 80009f6:	2dfe      	cmp	r5, #254	@ 0xfe
 80009f8:	d175      	bne.n	8000ae6 <__aeabi_fadd+0x236>
 80009fa:	20ff      	movs	r0, #255	@ 0xff
 80009fc:	2300      	movs	r3, #0
 80009fe:	e7c4      	b.n	800098a <__aeabi_fadd+0xda>
 8000a00:	000c      	movs	r4, r1
 8000a02:	0033      	movs	r3, r6
 8000a04:	08db      	lsrs	r3, r3, #3
 8000a06:	2aff      	cmp	r2, #255	@ 0xff
 8000a08:	d146      	bne.n	8000a98 <__aeabi_fadd+0x1e8>
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d0f5      	beq.n	80009fa <__aeabi_fadd+0x14a>
 8000a0e:	2280      	movs	r2, #128	@ 0x80
 8000a10:	03d2      	lsls	r2, r2, #15
 8000a12:	4313      	orrs	r3, r2
 8000a14:	025b      	lsls	r3, r3, #9
 8000a16:	20ff      	movs	r0, #255	@ 0xff
 8000a18:	0a5b      	lsrs	r3, r3, #9
 8000a1a:	e7b6      	b.n	800098a <__aeabi_fadd+0xda>
 8000a1c:	019f      	lsls	r7, r3, #6
 8000a1e:	09bf      	lsrs	r7, r7, #6
 8000a20:	0038      	movs	r0, r7
 8000a22:	f002 fde3 	bl	80035ec <__clzsi2>
 8000a26:	3805      	subs	r0, #5
 8000a28:	4087      	lsls	r7, r0
 8000a2a:	4285      	cmp	r5, r0
 8000a2c:	dc24      	bgt.n	8000a78 <__aeabi_fadd+0x1c8>
 8000a2e:	003b      	movs	r3, r7
 8000a30:	2120      	movs	r1, #32
 8000a32:	1b42      	subs	r2, r0, r5
 8000a34:	3201      	adds	r2, #1
 8000a36:	40d3      	lsrs	r3, r2
 8000a38:	1a8a      	subs	r2, r1, r2
 8000a3a:	4097      	lsls	r7, r2
 8000a3c:	1e7a      	subs	r2, r7, #1
 8000a3e:	4197      	sbcs	r7, r2
 8000a40:	2200      	movs	r2, #0
 8000a42:	433b      	orrs	r3, r7
 8000a44:	0759      	lsls	r1, r3, #29
 8000a46:	d193      	bne.n	8000970 <__aeabi_fadd+0xc0>
 8000a48:	e797      	b.n	800097a <__aeabi_fadd+0xca>
 8000a4a:	000c      	movs	r4, r1
 8000a4c:	0033      	movs	r3, r6
 8000a4e:	08db      	lsrs	r3, r3, #3
 8000a50:	e7db      	b.n	8000a0a <__aeabi_fadd+0x15a>
 8000a52:	2a00      	cmp	r2, #0
 8000a54:	d014      	beq.n	8000a80 <__aeabi_fadd+0x1d0>
 8000a56:	1b42      	subs	r2, r0, r5
 8000a58:	2d00      	cmp	r5, #0
 8000a5a:	d14b      	bne.n	8000af4 <__aeabi_fadd+0x244>
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d0d0      	beq.n	8000a02 <__aeabi_fadd+0x152>
 8000a60:	1e51      	subs	r1, r2, #1
 8000a62:	2a01      	cmp	r2, #1
 8000a64:	d100      	bne.n	8000a68 <__aeabi_fadd+0x1b8>
 8000a66:	e09e      	b.n	8000ba6 <__aeabi_fadd+0x2f6>
 8000a68:	2aff      	cmp	r2, #255	@ 0xff
 8000a6a:	d0ef      	beq.n	8000a4c <__aeabi_fadd+0x19c>
 8000a6c:	000a      	movs	r2, r1
 8000a6e:	2a1b      	cmp	r2, #27
 8000a70:	dd5f      	ble.n	8000b32 <__aeabi_fadd+0x282>
 8000a72:	0002      	movs	r2, r0
 8000a74:	1c73      	adds	r3, r6, #1
 8000a76:	e77b      	b.n	8000970 <__aeabi_fadd+0xc0>
 8000a78:	4b50      	ldr	r3, [pc, #320]	@ (8000bbc <__aeabi_fadd+0x30c>)
 8000a7a:	1a2a      	subs	r2, r5, r0
 8000a7c:	403b      	ands	r3, r7
 8000a7e:	e7e1      	b.n	8000a44 <__aeabi_fadd+0x194>
 8000a80:	21fe      	movs	r1, #254	@ 0xfe
 8000a82:	1c6a      	adds	r2, r5, #1
 8000a84:	4211      	tst	r1, r2
 8000a86:	d13b      	bne.n	8000b00 <__aeabi_fadd+0x250>
 8000a88:	2d00      	cmp	r5, #0
 8000a8a:	d15d      	bne.n	8000b48 <__aeabi_fadd+0x298>
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d07f      	beq.n	8000b90 <__aeabi_fadd+0x2e0>
 8000a90:	2e00      	cmp	r6, #0
 8000a92:	d17f      	bne.n	8000b94 <__aeabi_fadd+0x2e4>
 8000a94:	2200      	movs	r2, #0
 8000a96:	08db      	lsrs	r3, r3, #3
 8000a98:	025b      	lsls	r3, r3, #9
 8000a9a:	0a5b      	lsrs	r3, r3, #9
 8000a9c:	b2d0      	uxtb	r0, r2
 8000a9e:	e774      	b.n	800098a <__aeabi_fadd+0xda>
 8000aa0:	28ff      	cmp	r0, #255	@ 0xff
 8000aa2:	d0d2      	beq.n	8000a4a <__aeabi_fadd+0x19a>
 8000aa4:	2480      	movs	r4, #128	@ 0x80
 8000aa6:	04e4      	lsls	r4, r4, #19
 8000aa8:	4323      	orrs	r3, r4
 8000aaa:	2401      	movs	r4, #1
 8000aac:	2a1b      	cmp	r2, #27
 8000aae:	dc07      	bgt.n	8000ac0 <__aeabi_fadd+0x210>
 8000ab0:	001c      	movs	r4, r3
 8000ab2:	2520      	movs	r5, #32
 8000ab4:	40d4      	lsrs	r4, r2
 8000ab6:	1aaa      	subs	r2, r5, r2
 8000ab8:	4093      	lsls	r3, r2
 8000aba:	1e5a      	subs	r2, r3, #1
 8000abc:	4193      	sbcs	r3, r2
 8000abe:	431c      	orrs	r4, r3
 8000ac0:	1b33      	subs	r3, r6, r4
 8000ac2:	0005      	movs	r5, r0
 8000ac4:	000c      	movs	r4, r1
 8000ac6:	e74d      	b.n	8000964 <__aeabi_fadd+0xb4>
 8000ac8:	1b9f      	subs	r7, r3, r6
 8000aca:	017a      	lsls	r2, r7, #5
 8000acc:	d422      	bmi.n	8000b14 <__aeabi_fadd+0x264>
 8000ace:	2f00      	cmp	r7, #0
 8000ad0:	d1a6      	bne.n	8000a20 <__aeabi_fadd+0x170>
 8000ad2:	2400      	movs	r4, #0
 8000ad4:	2000      	movs	r0, #0
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	e757      	b.n	800098a <__aeabi_fadd+0xda>
 8000ada:	199b      	adds	r3, r3, r6
 8000adc:	2501      	movs	r5, #1
 8000ade:	3201      	adds	r2, #1
 8000ae0:	0159      	lsls	r1, r3, #5
 8000ae2:	d400      	bmi.n	8000ae6 <__aeabi_fadd+0x236>
 8000ae4:	e740      	b.n	8000968 <__aeabi_fadd+0xb8>
 8000ae6:	2101      	movs	r1, #1
 8000ae8:	4835      	ldr	r0, [pc, #212]	@ (8000bc0 <__aeabi_fadd+0x310>)
 8000aea:	4019      	ands	r1, r3
 8000aec:	085b      	lsrs	r3, r3, #1
 8000aee:	4003      	ands	r3, r0
 8000af0:	430b      	orrs	r3, r1
 8000af2:	e7a7      	b.n	8000a44 <__aeabi_fadd+0x194>
 8000af4:	28ff      	cmp	r0, #255	@ 0xff
 8000af6:	d0a9      	beq.n	8000a4c <__aeabi_fadd+0x19c>
 8000af8:	2180      	movs	r1, #128	@ 0x80
 8000afa:	04c9      	lsls	r1, r1, #19
 8000afc:	430b      	orrs	r3, r1
 8000afe:	e7b6      	b.n	8000a6e <__aeabi_fadd+0x1be>
 8000b00:	2aff      	cmp	r2, #255	@ 0xff
 8000b02:	d100      	bne.n	8000b06 <__aeabi_fadd+0x256>
 8000b04:	e779      	b.n	80009fa <__aeabi_fadd+0x14a>
 8000b06:	199b      	adds	r3, r3, r6
 8000b08:	085b      	lsrs	r3, r3, #1
 8000b0a:	0759      	lsls	r1, r3, #29
 8000b0c:	d000      	beq.n	8000b10 <__aeabi_fadd+0x260>
 8000b0e:	e72f      	b.n	8000970 <__aeabi_fadd+0xc0>
 8000b10:	08db      	lsrs	r3, r3, #3
 8000b12:	e7c1      	b.n	8000a98 <__aeabi_fadd+0x1e8>
 8000b14:	000c      	movs	r4, r1
 8000b16:	1af7      	subs	r7, r6, r3
 8000b18:	e782      	b.n	8000a20 <__aeabi_fadd+0x170>
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d12c      	bne.n	8000b78 <__aeabi_fadd+0x2c8>
 8000b1e:	2e00      	cmp	r6, #0
 8000b20:	d193      	bne.n	8000a4a <__aeabi_fadd+0x19a>
 8000b22:	2380      	movs	r3, #128	@ 0x80
 8000b24:	2400      	movs	r4, #0
 8000b26:	20ff      	movs	r0, #255	@ 0xff
 8000b28:	03db      	lsls	r3, r3, #15
 8000b2a:	e72e      	b.n	800098a <__aeabi_fadd+0xda>
 8000b2c:	2501      	movs	r5, #1
 8000b2e:	1b9b      	subs	r3, r3, r6
 8000b30:	e718      	b.n	8000964 <__aeabi_fadd+0xb4>
 8000b32:	0019      	movs	r1, r3
 8000b34:	2520      	movs	r5, #32
 8000b36:	40d1      	lsrs	r1, r2
 8000b38:	1aaa      	subs	r2, r5, r2
 8000b3a:	4093      	lsls	r3, r2
 8000b3c:	1e5a      	subs	r2, r3, #1
 8000b3e:	4193      	sbcs	r3, r2
 8000b40:	430b      	orrs	r3, r1
 8000b42:	0005      	movs	r5, r0
 8000b44:	199b      	adds	r3, r3, r6
 8000b46:	e753      	b.n	80009f0 <__aeabi_fadd+0x140>
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d100      	bne.n	8000b4e <__aeabi_fadd+0x29e>
 8000b4c:	e77e      	b.n	8000a4c <__aeabi_fadd+0x19c>
 8000b4e:	2e00      	cmp	r6, #0
 8000b50:	d100      	bne.n	8000b54 <__aeabi_fadd+0x2a4>
 8000b52:	e77c      	b.n	8000a4e <__aeabi_fadd+0x19e>
 8000b54:	2280      	movs	r2, #128	@ 0x80
 8000b56:	03d2      	lsls	r2, r2, #15
 8000b58:	4591      	cmp	r9, r2
 8000b5a:	d302      	bcc.n	8000b62 <__aeabi_fadd+0x2b2>
 8000b5c:	4594      	cmp	ip, r2
 8000b5e:	d200      	bcs.n	8000b62 <__aeabi_fadd+0x2b2>
 8000b60:	0033      	movs	r3, r6
 8000b62:	08db      	lsrs	r3, r3, #3
 8000b64:	e753      	b.n	8000a0e <__aeabi_fadd+0x15e>
 8000b66:	000c      	movs	r4, r1
 8000b68:	1af3      	subs	r3, r6, r3
 8000b6a:	3501      	adds	r5, #1
 8000b6c:	e6fa      	b.n	8000964 <__aeabi_fadd+0xb4>
 8000b6e:	2e00      	cmp	r6, #0
 8000b70:	d0af      	beq.n	8000ad2 <__aeabi_fadd+0x222>
 8000b72:	000c      	movs	r4, r1
 8000b74:	0033      	movs	r3, r6
 8000b76:	e78d      	b.n	8000a94 <__aeabi_fadd+0x1e4>
 8000b78:	2e00      	cmp	r6, #0
 8000b7a:	d100      	bne.n	8000b7e <__aeabi_fadd+0x2ce>
 8000b7c:	e767      	b.n	8000a4e <__aeabi_fadd+0x19e>
 8000b7e:	2280      	movs	r2, #128	@ 0x80
 8000b80:	03d2      	lsls	r2, r2, #15
 8000b82:	4591      	cmp	r9, r2
 8000b84:	d3ed      	bcc.n	8000b62 <__aeabi_fadd+0x2b2>
 8000b86:	4594      	cmp	ip, r2
 8000b88:	d2eb      	bcs.n	8000b62 <__aeabi_fadd+0x2b2>
 8000b8a:	000c      	movs	r4, r1
 8000b8c:	0033      	movs	r3, r6
 8000b8e:	e7e8      	b.n	8000b62 <__aeabi_fadd+0x2b2>
 8000b90:	0033      	movs	r3, r6
 8000b92:	e77f      	b.n	8000a94 <__aeabi_fadd+0x1e4>
 8000b94:	199b      	adds	r3, r3, r6
 8000b96:	2200      	movs	r2, #0
 8000b98:	0159      	lsls	r1, r3, #5
 8000b9a:	d5b9      	bpl.n	8000b10 <__aeabi_fadd+0x260>
 8000b9c:	4a07      	ldr	r2, [pc, #28]	@ (8000bbc <__aeabi_fadd+0x30c>)
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	08db      	lsrs	r3, r3, #3
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	e778      	b.n	8000a98 <__aeabi_fadd+0x1e8>
 8000ba6:	199b      	adds	r3, r3, r6
 8000ba8:	3201      	adds	r2, #1
 8000baa:	3501      	adds	r5, #1
 8000bac:	0159      	lsls	r1, r3, #5
 8000bae:	d49a      	bmi.n	8000ae6 <__aeabi_fadd+0x236>
 8000bb0:	e6da      	b.n	8000968 <__aeabi_fadd+0xb8>
 8000bb2:	1e03      	subs	r3, r0, #0
 8000bb4:	d08d      	beq.n	8000ad2 <__aeabi_fadd+0x222>
 8000bb6:	08db      	lsrs	r3, r3, #3
 8000bb8:	e76e      	b.n	8000a98 <__aeabi_fadd+0x1e8>
 8000bba:	46c0      	nop			@ (mov r8, r8)
 8000bbc:	fbffffff 	.word	0xfbffffff
 8000bc0:	7dffffff 	.word	0x7dffffff

08000bc4 <__aeabi_fdiv>:
 8000bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bc6:	464f      	mov	r7, r9
 8000bc8:	4646      	mov	r6, r8
 8000bca:	46d6      	mov	lr, sl
 8000bcc:	0244      	lsls	r4, r0, #9
 8000bce:	b5c0      	push	{r6, r7, lr}
 8000bd0:	0047      	lsls	r7, r0, #1
 8000bd2:	1c0e      	adds	r6, r1, #0
 8000bd4:	0a64      	lsrs	r4, r4, #9
 8000bd6:	0e3f      	lsrs	r7, r7, #24
 8000bd8:	0fc5      	lsrs	r5, r0, #31
 8000bda:	2f00      	cmp	r7, #0
 8000bdc:	d03c      	beq.n	8000c58 <__aeabi_fdiv+0x94>
 8000bde:	2fff      	cmp	r7, #255	@ 0xff
 8000be0:	d042      	beq.n	8000c68 <__aeabi_fdiv+0xa4>
 8000be2:	2300      	movs	r3, #0
 8000be4:	2280      	movs	r2, #128	@ 0x80
 8000be6:	4699      	mov	r9, r3
 8000be8:	469a      	mov	sl, r3
 8000bea:	00e4      	lsls	r4, r4, #3
 8000bec:	04d2      	lsls	r2, r2, #19
 8000bee:	4314      	orrs	r4, r2
 8000bf0:	3f7f      	subs	r7, #127	@ 0x7f
 8000bf2:	0273      	lsls	r3, r6, #9
 8000bf4:	0a5b      	lsrs	r3, r3, #9
 8000bf6:	4698      	mov	r8, r3
 8000bf8:	0073      	lsls	r3, r6, #1
 8000bfa:	0e1b      	lsrs	r3, r3, #24
 8000bfc:	0ff6      	lsrs	r6, r6, #31
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d01b      	beq.n	8000c3a <__aeabi_fdiv+0x76>
 8000c02:	2bff      	cmp	r3, #255	@ 0xff
 8000c04:	d013      	beq.n	8000c2e <__aeabi_fdiv+0x6a>
 8000c06:	4642      	mov	r2, r8
 8000c08:	2180      	movs	r1, #128	@ 0x80
 8000c0a:	00d2      	lsls	r2, r2, #3
 8000c0c:	04c9      	lsls	r1, r1, #19
 8000c0e:	4311      	orrs	r1, r2
 8000c10:	4688      	mov	r8, r1
 8000c12:	2000      	movs	r0, #0
 8000c14:	3b7f      	subs	r3, #127	@ 0x7f
 8000c16:	0029      	movs	r1, r5
 8000c18:	1aff      	subs	r7, r7, r3
 8000c1a:	464b      	mov	r3, r9
 8000c1c:	4071      	eors	r1, r6
 8000c1e:	b2c9      	uxtb	r1, r1
 8000c20:	2b0f      	cmp	r3, #15
 8000c22:	d900      	bls.n	8000c26 <__aeabi_fdiv+0x62>
 8000c24:	e0b5      	b.n	8000d92 <__aeabi_fdiv+0x1ce>
 8000c26:	4a74      	ldr	r2, [pc, #464]	@ (8000df8 <__aeabi_fdiv+0x234>)
 8000c28:	009b      	lsls	r3, r3, #2
 8000c2a:	58d3      	ldr	r3, [r2, r3]
 8000c2c:	469f      	mov	pc, r3
 8000c2e:	4643      	mov	r3, r8
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d13f      	bne.n	8000cb4 <__aeabi_fdiv+0xf0>
 8000c34:	3fff      	subs	r7, #255	@ 0xff
 8000c36:	3302      	adds	r3, #2
 8000c38:	e003      	b.n	8000c42 <__aeabi_fdiv+0x7e>
 8000c3a:	4643      	mov	r3, r8
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d12d      	bne.n	8000c9c <__aeabi_fdiv+0xd8>
 8000c40:	2301      	movs	r3, #1
 8000c42:	0029      	movs	r1, r5
 8000c44:	464a      	mov	r2, r9
 8000c46:	4071      	eors	r1, r6
 8000c48:	b2c9      	uxtb	r1, r1
 8000c4a:	431a      	orrs	r2, r3
 8000c4c:	2a0e      	cmp	r2, #14
 8000c4e:	d838      	bhi.n	8000cc2 <__aeabi_fdiv+0xfe>
 8000c50:	486a      	ldr	r0, [pc, #424]	@ (8000dfc <__aeabi_fdiv+0x238>)
 8000c52:	0092      	lsls	r2, r2, #2
 8000c54:	5882      	ldr	r2, [r0, r2]
 8000c56:	4697      	mov	pc, r2
 8000c58:	2c00      	cmp	r4, #0
 8000c5a:	d113      	bne.n	8000c84 <__aeabi_fdiv+0xc0>
 8000c5c:	2304      	movs	r3, #4
 8000c5e:	4699      	mov	r9, r3
 8000c60:	3b03      	subs	r3, #3
 8000c62:	2700      	movs	r7, #0
 8000c64:	469a      	mov	sl, r3
 8000c66:	e7c4      	b.n	8000bf2 <__aeabi_fdiv+0x2e>
 8000c68:	2c00      	cmp	r4, #0
 8000c6a:	d105      	bne.n	8000c78 <__aeabi_fdiv+0xb4>
 8000c6c:	2308      	movs	r3, #8
 8000c6e:	4699      	mov	r9, r3
 8000c70:	3b06      	subs	r3, #6
 8000c72:	27ff      	movs	r7, #255	@ 0xff
 8000c74:	469a      	mov	sl, r3
 8000c76:	e7bc      	b.n	8000bf2 <__aeabi_fdiv+0x2e>
 8000c78:	230c      	movs	r3, #12
 8000c7a:	4699      	mov	r9, r3
 8000c7c:	3b09      	subs	r3, #9
 8000c7e:	27ff      	movs	r7, #255	@ 0xff
 8000c80:	469a      	mov	sl, r3
 8000c82:	e7b6      	b.n	8000bf2 <__aeabi_fdiv+0x2e>
 8000c84:	0020      	movs	r0, r4
 8000c86:	f002 fcb1 	bl	80035ec <__clzsi2>
 8000c8a:	2776      	movs	r7, #118	@ 0x76
 8000c8c:	1f43      	subs	r3, r0, #5
 8000c8e:	409c      	lsls	r4, r3
 8000c90:	2300      	movs	r3, #0
 8000c92:	427f      	negs	r7, r7
 8000c94:	4699      	mov	r9, r3
 8000c96:	469a      	mov	sl, r3
 8000c98:	1a3f      	subs	r7, r7, r0
 8000c9a:	e7aa      	b.n	8000bf2 <__aeabi_fdiv+0x2e>
 8000c9c:	4640      	mov	r0, r8
 8000c9e:	f002 fca5 	bl	80035ec <__clzsi2>
 8000ca2:	4642      	mov	r2, r8
 8000ca4:	1f43      	subs	r3, r0, #5
 8000ca6:	409a      	lsls	r2, r3
 8000ca8:	2376      	movs	r3, #118	@ 0x76
 8000caa:	425b      	negs	r3, r3
 8000cac:	1a1b      	subs	r3, r3, r0
 8000cae:	4690      	mov	r8, r2
 8000cb0:	2000      	movs	r0, #0
 8000cb2:	e7b0      	b.n	8000c16 <__aeabi_fdiv+0x52>
 8000cb4:	2303      	movs	r3, #3
 8000cb6:	464a      	mov	r2, r9
 8000cb8:	431a      	orrs	r2, r3
 8000cba:	4691      	mov	r9, r2
 8000cbc:	2003      	movs	r0, #3
 8000cbe:	33fc      	adds	r3, #252	@ 0xfc
 8000cc0:	e7a9      	b.n	8000c16 <__aeabi_fdiv+0x52>
 8000cc2:	000d      	movs	r5, r1
 8000cc4:	20ff      	movs	r0, #255	@ 0xff
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	05c0      	lsls	r0, r0, #23
 8000cca:	07ed      	lsls	r5, r5, #31
 8000ccc:	4310      	orrs	r0, r2
 8000cce:	4328      	orrs	r0, r5
 8000cd0:	bce0      	pop	{r5, r6, r7}
 8000cd2:	46ba      	mov	sl, r7
 8000cd4:	46b1      	mov	r9, r6
 8000cd6:	46a8      	mov	r8, r5
 8000cd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cda:	000d      	movs	r5, r1
 8000cdc:	2000      	movs	r0, #0
 8000cde:	2200      	movs	r2, #0
 8000ce0:	e7f2      	b.n	8000cc8 <__aeabi_fdiv+0x104>
 8000ce2:	4653      	mov	r3, sl
 8000ce4:	2b02      	cmp	r3, #2
 8000ce6:	d0ed      	beq.n	8000cc4 <__aeabi_fdiv+0x100>
 8000ce8:	2b03      	cmp	r3, #3
 8000cea:	d033      	beq.n	8000d54 <__aeabi_fdiv+0x190>
 8000cec:	46a0      	mov	r8, r4
 8000cee:	2b01      	cmp	r3, #1
 8000cf0:	d105      	bne.n	8000cfe <__aeabi_fdiv+0x13a>
 8000cf2:	2000      	movs	r0, #0
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	e7e7      	b.n	8000cc8 <__aeabi_fdiv+0x104>
 8000cf8:	0035      	movs	r5, r6
 8000cfa:	2803      	cmp	r0, #3
 8000cfc:	d07a      	beq.n	8000df4 <__aeabi_fdiv+0x230>
 8000cfe:	003b      	movs	r3, r7
 8000d00:	337f      	adds	r3, #127	@ 0x7f
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	dd2d      	ble.n	8000d62 <__aeabi_fdiv+0x19e>
 8000d06:	4642      	mov	r2, r8
 8000d08:	0752      	lsls	r2, r2, #29
 8000d0a:	d007      	beq.n	8000d1c <__aeabi_fdiv+0x158>
 8000d0c:	220f      	movs	r2, #15
 8000d0e:	4641      	mov	r1, r8
 8000d10:	400a      	ands	r2, r1
 8000d12:	2a04      	cmp	r2, #4
 8000d14:	d002      	beq.n	8000d1c <__aeabi_fdiv+0x158>
 8000d16:	2204      	movs	r2, #4
 8000d18:	4694      	mov	ip, r2
 8000d1a:	44e0      	add	r8, ip
 8000d1c:	4642      	mov	r2, r8
 8000d1e:	0112      	lsls	r2, r2, #4
 8000d20:	d505      	bpl.n	8000d2e <__aeabi_fdiv+0x16a>
 8000d22:	4642      	mov	r2, r8
 8000d24:	4b36      	ldr	r3, [pc, #216]	@ (8000e00 <__aeabi_fdiv+0x23c>)
 8000d26:	401a      	ands	r2, r3
 8000d28:	003b      	movs	r3, r7
 8000d2a:	4690      	mov	r8, r2
 8000d2c:	3380      	adds	r3, #128	@ 0x80
 8000d2e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000d30:	dcc8      	bgt.n	8000cc4 <__aeabi_fdiv+0x100>
 8000d32:	4642      	mov	r2, r8
 8000d34:	0192      	lsls	r2, r2, #6
 8000d36:	0a52      	lsrs	r2, r2, #9
 8000d38:	b2d8      	uxtb	r0, r3
 8000d3a:	e7c5      	b.n	8000cc8 <__aeabi_fdiv+0x104>
 8000d3c:	2280      	movs	r2, #128	@ 0x80
 8000d3e:	2500      	movs	r5, #0
 8000d40:	20ff      	movs	r0, #255	@ 0xff
 8000d42:	03d2      	lsls	r2, r2, #15
 8000d44:	e7c0      	b.n	8000cc8 <__aeabi_fdiv+0x104>
 8000d46:	2280      	movs	r2, #128	@ 0x80
 8000d48:	03d2      	lsls	r2, r2, #15
 8000d4a:	4214      	tst	r4, r2
 8000d4c:	d002      	beq.n	8000d54 <__aeabi_fdiv+0x190>
 8000d4e:	4643      	mov	r3, r8
 8000d50:	4213      	tst	r3, r2
 8000d52:	d049      	beq.n	8000de8 <__aeabi_fdiv+0x224>
 8000d54:	2280      	movs	r2, #128	@ 0x80
 8000d56:	03d2      	lsls	r2, r2, #15
 8000d58:	4322      	orrs	r2, r4
 8000d5a:	0252      	lsls	r2, r2, #9
 8000d5c:	20ff      	movs	r0, #255	@ 0xff
 8000d5e:	0a52      	lsrs	r2, r2, #9
 8000d60:	e7b2      	b.n	8000cc8 <__aeabi_fdiv+0x104>
 8000d62:	2201      	movs	r2, #1
 8000d64:	1ad3      	subs	r3, r2, r3
 8000d66:	2b1b      	cmp	r3, #27
 8000d68:	dcc3      	bgt.n	8000cf2 <__aeabi_fdiv+0x12e>
 8000d6a:	4642      	mov	r2, r8
 8000d6c:	40da      	lsrs	r2, r3
 8000d6e:	4643      	mov	r3, r8
 8000d70:	379e      	adds	r7, #158	@ 0x9e
 8000d72:	40bb      	lsls	r3, r7
 8000d74:	1e59      	subs	r1, r3, #1
 8000d76:	418b      	sbcs	r3, r1
 8000d78:	431a      	orrs	r2, r3
 8000d7a:	0753      	lsls	r3, r2, #29
 8000d7c:	d004      	beq.n	8000d88 <__aeabi_fdiv+0x1c4>
 8000d7e:	230f      	movs	r3, #15
 8000d80:	4013      	ands	r3, r2
 8000d82:	2b04      	cmp	r3, #4
 8000d84:	d000      	beq.n	8000d88 <__aeabi_fdiv+0x1c4>
 8000d86:	3204      	adds	r2, #4
 8000d88:	0153      	lsls	r3, r2, #5
 8000d8a:	d529      	bpl.n	8000de0 <__aeabi_fdiv+0x21c>
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	2200      	movs	r2, #0
 8000d90:	e79a      	b.n	8000cc8 <__aeabi_fdiv+0x104>
 8000d92:	4642      	mov	r2, r8
 8000d94:	0163      	lsls	r3, r4, #5
 8000d96:	0155      	lsls	r5, r2, #5
 8000d98:	42ab      	cmp	r3, r5
 8000d9a:	d215      	bcs.n	8000dc8 <__aeabi_fdiv+0x204>
 8000d9c:	201b      	movs	r0, #27
 8000d9e:	2200      	movs	r2, #0
 8000da0:	3f01      	subs	r7, #1
 8000da2:	2601      	movs	r6, #1
 8000da4:	001c      	movs	r4, r3
 8000da6:	0052      	lsls	r2, r2, #1
 8000da8:	005b      	lsls	r3, r3, #1
 8000daa:	2c00      	cmp	r4, #0
 8000dac:	db01      	blt.n	8000db2 <__aeabi_fdiv+0x1ee>
 8000dae:	429d      	cmp	r5, r3
 8000db0:	d801      	bhi.n	8000db6 <__aeabi_fdiv+0x1f2>
 8000db2:	1b5b      	subs	r3, r3, r5
 8000db4:	4332      	orrs	r2, r6
 8000db6:	3801      	subs	r0, #1
 8000db8:	2800      	cmp	r0, #0
 8000dba:	d1f3      	bne.n	8000da4 <__aeabi_fdiv+0x1e0>
 8000dbc:	1e58      	subs	r0, r3, #1
 8000dbe:	4183      	sbcs	r3, r0
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	4698      	mov	r8, r3
 8000dc4:	000d      	movs	r5, r1
 8000dc6:	e79a      	b.n	8000cfe <__aeabi_fdiv+0x13a>
 8000dc8:	201a      	movs	r0, #26
 8000dca:	2201      	movs	r2, #1
 8000dcc:	1b5b      	subs	r3, r3, r5
 8000dce:	e7e8      	b.n	8000da2 <__aeabi_fdiv+0x1de>
 8000dd0:	3b02      	subs	r3, #2
 8000dd2:	425a      	negs	r2, r3
 8000dd4:	4153      	adcs	r3, r2
 8000dd6:	425b      	negs	r3, r3
 8000dd8:	0035      	movs	r5, r6
 8000dda:	2200      	movs	r2, #0
 8000ddc:	b2d8      	uxtb	r0, r3
 8000dde:	e773      	b.n	8000cc8 <__aeabi_fdiv+0x104>
 8000de0:	0192      	lsls	r2, r2, #6
 8000de2:	2000      	movs	r0, #0
 8000de4:	0a52      	lsrs	r2, r2, #9
 8000de6:	e76f      	b.n	8000cc8 <__aeabi_fdiv+0x104>
 8000de8:	431a      	orrs	r2, r3
 8000dea:	0252      	lsls	r2, r2, #9
 8000dec:	0035      	movs	r5, r6
 8000dee:	20ff      	movs	r0, #255	@ 0xff
 8000df0:	0a52      	lsrs	r2, r2, #9
 8000df2:	e769      	b.n	8000cc8 <__aeabi_fdiv+0x104>
 8000df4:	4644      	mov	r4, r8
 8000df6:	e7ad      	b.n	8000d54 <__aeabi_fdiv+0x190>
 8000df8:	08011570 	.word	0x08011570
 8000dfc:	080115b0 	.word	0x080115b0
 8000e00:	f7ffffff 	.word	0xf7ffffff

08000e04 <__eqsf2>:
 8000e04:	b570      	push	{r4, r5, r6, lr}
 8000e06:	0042      	lsls	r2, r0, #1
 8000e08:	024e      	lsls	r6, r1, #9
 8000e0a:	004c      	lsls	r4, r1, #1
 8000e0c:	0245      	lsls	r5, r0, #9
 8000e0e:	0a6d      	lsrs	r5, r5, #9
 8000e10:	0e12      	lsrs	r2, r2, #24
 8000e12:	0fc3      	lsrs	r3, r0, #31
 8000e14:	0a76      	lsrs	r6, r6, #9
 8000e16:	0e24      	lsrs	r4, r4, #24
 8000e18:	0fc9      	lsrs	r1, r1, #31
 8000e1a:	2aff      	cmp	r2, #255	@ 0xff
 8000e1c:	d010      	beq.n	8000e40 <__eqsf2+0x3c>
 8000e1e:	2cff      	cmp	r4, #255	@ 0xff
 8000e20:	d00c      	beq.n	8000e3c <__eqsf2+0x38>
 8000e22:	2001      	movs	r0, #1
 8000e24:	42a2      	cmp	r2, r4
 8000e26:	d10a      	bne.n	8000e3e <__eqsf2+0x3a>
 8000e28:	42b5      	cmp	r5, r6
 8000e2a:	d108      	bne.n	8000e3e <__eqsf2+0x3a>
 8000e2c:	428b      	cmp	r3, r1
 8000e2e:	d00f      	beq.n	8000e50 <__eqsf2+0x4c>
 8000e30:	2a00      	cmp	r2, #0
 8000e32:	d104      	bne.n	8000e3e <__eqsf2+0x3a>
 8000e34:	0028      	movs	r0, r5
 8000e36:	1e43      	subs	r3, r0, #1
 8000e38:	4198      	sbcs	r0, r3
 8000e3a:	e000      	b.n	8000e3e <__eqsf2+0x3a>
 8000e3c:	2001      	movs	r0, #1
 8000e3e:	bd70      	pop	{r4, r5, r6, pc}
 8000e40:	2001      	movs	r0, #1
 8000e42:	2cff      	cmp	r4, #255	@ 0xff
 8000e44:	d1fb      	bne.n	8000e3e <__eqsf2+0x3a>
 8000e46:	4335      	orrs	r5, r6
 8000e48:	d1f9      	bne.n	8000e3e <__eqsf2+0x3a>
 8000e4a:	404b      	eors	r3, r1
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	e7f6      	b.n	8000e3e <__eqsf2+0x3a>
 8000e50:	2000      	movs	r0, #0
 8000e52:	e7f4      	b.n	8000e3e <__eqsf2+0x3a>

08000e54 <__gesf2>:
 8000e54:	b530      	push	{r4, r5, lr}
 8000e56:	0042      	lsls	r2, r0, #1
 8000e58:	0244      	lsls	r4, r0, #9
 8000e5a:	024d      	lsls	r5, r1, #9
 8000e5c:	0fc3      	lsrs	r3, r0, #31
 8000e5e:	0048      	lsls	r0, r1, #1
 8000e60:	0a64      	lsrs	r4, r4, #9
 8000e62:	0e12      	lsrs	r2, r2, #24
 8000e64:	0a6d      	lsrs	r5, r5, #9
 8000e66:	0e00      	lsrs	r0, r0, #24
 8000e68:	0fc9      	lsrs	r1, r1, #31
 8000e6a:	2aff      	cmp	r2, #255	@ 0xff
 8000e6c:	d019      	beq.n	8000ea2 <__gesf2+0x4e>
 8000e6e:	28ff      	cmp	r0, #255	@ 0xff
 8000e70:	d00b      	beq.n	8000e8a <__gesf2+0x36>
 8000e72:	2a00      	cmp	r2, #0
 8000e74:	d11e      	bne.n	8000eb4 <__gesf2+0x60>
 8000e76:	2800      	cmp	r0, #0
 8000e78:	d10b      	bne.n	8000e92 <__gesf2+0x3e>
 8000e7a:	2d00      	cmp	r5, #0
 8000e7c:	d027      	beq.n	8000ece <__gesf2+0x7a>
 8000e7e:	2c00      	cmp	r4, #0
 8000e80:	d134      	bne.n	8000eec <__gesf2+0x98>
 8000e82:	2900      	cmp	r1, #0
 8000e84:	d02f      	beq.n	8000ee6 <__gesf2+0x92>
 8000e86:	0008      	movs	r0, r1
 8000e88:	bd30      	pop	{r4, r5, pc}
 8000e8a:	2d00      	cmp	r5, #0
 8000e8c:	d128      	bne.n	8000ee0 <__gesf2+0x8c>
 8000e8e:	2a00      	cmp	r2, #0
 8000e90:	d101      	bne.n	8000e96 <__gesf2+0x42>
 8000e92:	2c00      	cmp	r4, #0
 8000e94:	d0f5      	beq.n	8000e82 <__gesf2+0x2e>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	d107      	bne.n	8000eaa <__gesf2+0x56>
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d023      	beq.n	8000ee6 <__gesf2+0x92>
 8000e9e:	0018      	movs	r0, r3
 8000ea0:	e7f2      	b.n	8000e88 <__gesf2+0x34>
 8000ea2:	2c00      	cmp	r4, #0
 8000ea4:	d11c      	bne.n	8000ee0 <__gesf2+0x8c>
 8000ea6:	28ff      	cmp	r0, #255	@ 0xff
 8000ea8:	d014      	beq.n	8000ed4 <__gesf2+0x80>
 8000eaa:	1e58      	subs	r0, r3, #1
 8000eac:	2302      	movs	r3, #2
 8000eae:	4018      	ands	r0, r3
 8000eb0:	3801      	subs	r0, #1
 8000eb2:	e7e9      	b.n	8000e88 <__gesf2+0x34>
 8000eb4:	2800      	cmp	r0, #0
 8000eb6:	d0f8      	beq.n	8000eaa <__gesf2+0x56>
 8000eb8:	428b      	cmp	r3, r1
 8000eba:	d1f6      	bne.n	8000eaa <__gesf2+0x56>
 8000ebc:	4282      	cmp	r2, r0
 8000ebe:	dcf4      	bgt.n	8000eaa <__gesf2+0x56>
 8000ec0:	dbeb      	blt.n	8000e9a <__gesf2+0x46>
 8000ec2:	42ac      	cmp	r4, r5
 8000ec4:	d8f1      	bhi.n	8000eaa <__gesf2+0x56>
 8000ec6:	2000      	movs	r0, #0
 8000ec8:	42ac      	cmp	r4, r5
 8000eca:	d2dd      	bcs.n	8000e88 <__gesf2+0x34>
 8000ecc:	e7e5      	b.n	8000e9a <__gesf2+0x46>
 8000ece:	2c00      	cmp	r4, #0
 8000ed0:	d0da      	beq.n	8000e88 <__gesf2+0x34>
 8000ed2:	e7ea      	b.n	8000eaa <__gesf2+0x56>
 8000ed4:	2d00      	cmp	r5, #0
 8000ed6:	d103      	bne.n	8000ee0 <__gesf2+0x8c>
 8000ed8:	428b      	cmp	r3, r1
 8000eda:	d1e6      	bne.n	8000eaa <__gesf2+0x56>
 8000edc:	2000      	movs	r0, #0
 8000ede:	e7d3      	b.n	8000e88 <__gesf2+0x34>
 8000ee0:	2002      	movs	r0, #2
 8000ee2:	4240      	negs	r0, r0
 8000ee4:	e7d0      	b.n	8000e88 <__gesf2+0x34>
 8000ee6:	2001      	movs	r0, #1
 8000ee8:	4240      	negs	r0, r0
 8000eea:	e7cd      	b.n	8000e88 <__gesf2+0x34>
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d0e8      	beq.n	8000ec2 <__gesf2+0x6e>
 8000ef0:	e7db      	b.n	8000eaa <__gesf2+0x56>
 8000ef2:	46c0      	nop			@ (mov r8, r8)

08000ef4 <__lesf2>:
 8000ef4:	b530      	push	{r4, r5, lr}
 8000ef6:	0042      	lsls	r2, r0, #1
 8000ef8:	0244      	lsls	r4, r0, #9
 8000efa:	024d      	lsls	r5, r1, #9
 8000efc:	0fc3      	lsrs	r3, r0, #31
 8000efe:	0048      	lsls	r0, r1, #1
 8000f00:	0a64      	lsrs	r4, r4, #9
 8000f02:	0e12      	lsrs	r2, r2, #24
 8000f04:	0a6d      	lsrs	r5, r5, #9
 8000f06:	0e00      	lsrs	r0, r0, #24
 8000f08:	0fc9      	lsrs	r1, r1, #31
 8000f0a:	2aff      	cmp	r2, #255	@ 0xff
 8000f0c:	d01a      	beq.n	8000f44 <__lesf2+0x50>
 8000f0e:	28ff      	cmp	r0, #255	@ 0xff
 8000f10:	d00e      	beq.n	8000f30 <__lesf2+0x3c>
 8000f12:	2a00      	cmp	r2, #0
 8000f14:	d11e      	bne.n	8000f54 <__lesf2+0x60>
 8000f16:	2800      	cmp	r0, #0
 8000f18:	d10e      	bne.n	8000f38 <__lesf2+0x44>
 8000f1a:	2d00      	cmp	r5, #0
 8000f1c:	d02a      	beq.n	8000f74 <__lesf2+0x80>
 8000f1e:	2c00      	cmp	r4, #0
 8000f20:	d00c      	beq.n	8000f3c <__lesf2+0x48>
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d01d      	beq.n	8000f62 <__lesf2+0x6e>
 8000f26:	1e58      	subs	r0, r3, #1
 8000f28:	2302      	movs	r3, #2
 8000f2a:	4018      	ands	r0, r3
 8000f2c:	3801      	subs	r0, #1
 8000f2e:	e010      	b.n	8000f52 <__lesf2+0x5e>
 8000f30:	2d00      	cmp	r5, #0
 8000f32:	d10d      	bne.n	8000f50 <__lesf2+0x5c>
 8000f34:	2a00      	cmp	r2, #0
 8000f36:	d120      	bne.n	8000f7a <__lesf2+0x86>
 8000f38:	2c00      	cmp	r4, #0
 8000f3a:	d11e      	bne.n	8000f7a <__lesf2+0x86>
 8000f3c:	2900      	cmp	r1, #0
 8000f3e:	d023      	beq.n	8000f88 <__lesf2+0x94>
 8000f40:	0008      	movs	r0, r1
 8000f42:	e006      	b.n	8000f52 <__lesf2+0x5e>
 8000f44:	2c00      	cmp	r4, #0
 8000f46:	d103      	bne.n	8000f50 <__lesf2+0x5c>
 8000f48:	28ff      	cmp	r0, #255	@ 0xff
 8000f4a:	d1ec      	bne.n	8000f26 <__lesf2+0x32>
 8000f4c:	2d00      	cmp	r5, #0
 8000f4e:	d017      	beq.n	8000f80 <__lesf2+0x8c>
 8000f50:	2002      	movs	r0, #2
 8000f52:	bd30      	pop	{r4, r5, pc}
 8000f54:	2800      	cmp	r0, #0
 8000f56:	d0e6      	beq.n	8000f26 <__lesf2+0x32>
 8000f58:	428b      	cmp	r3, r1
 8000f5a:	d1e4      	bne.n	8000f26 <__lesf2+0x32>
 8000f5c:	4282      	cmp	r2, r0
 8000f5e:	dce2      	bgt.n	8000f26 <__lesf2+0x32>
 8000f60:	db04      	blt.n	8000f6c <__lesf2+0x78>
 8000f62:	42ac      	cmp	r4, r5
 8000f64:	d8df      	bhi.n	8000f26 <__lesf2+0x32>
 8000f66:	2000      	movs	r0, #0
 8000f68:	42ac      	cmp	r4, r5
 8000f6a:	d2f2      	bcs.n	8000f52 <__lesf2+0x5e>
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d00b      	beq.n	8000f88 <__lesf2+0x94>
 8000f70:	0018      	movs	r0, r3
 8000f72:	e7ee      	b.n	8000f52 <__lesf2+0x5e>
 8000f74:	2c00      	cmp	r4, #0
 8000f76:	d0ec      	beq.n	8000f52 <__lesf2+0x5e>
 8000f78:	e7d5      	b.n	8000f26 <__lesf2+0x32>
 8000f7a:	428b      	cmp	r3, r1
 8000f7c:	d1d3      	bne.n	8000f26 <__lesf2+0x32>
 8000f7e:	e7f5      	b.n	8000f6c <__lesf2+0x78>
 8000f80:	2000      	movs	r0, #0
 8000f82:	428b      	cmp	r3, r1
 8000f84:	d0e5      	beq.n	8000f52 <__lesf2+0x5e>
 8000f86:	e7ce      	b.n	8000f26 <__lesf2+0x32>
 8000f88:	2001      	movs	r0, #1
 8000f8a:	4240      	negs	r0, r0
 8000f8c:	e7e1      	b.n	8000f52 <__lesf2+0x5e>
 8000f8e:	46c0      	nop			@ (mov r8, r8)

08000f90 <__aeabi_fmul>:
 8000f90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f92:	464f      	mov	r7, r9
 8000f94:	4646      	mov	r6, r8
 8000f96:	46d6      	mov	lr, sl
 8000f98:	0243      	lsls	r3, r0, #9
 8000f9a:	0a5b      	lsrs	r3, r3, #9
 8000f9c:	0045      	lsls	r5, r0, #1
 8000f9e:	b5c0      	push	{r6, r7, lr}
 8000fa0:	4699      	mov	r9, r3
 8000fa2:	1c0f      	adds	r7, r1, #0
 8000fa4:	0e2d      	lsrs	r5, r5, #24
 8000fa6:	0fc6      	lsrs	r6, r0, #31
 8000fa8:	2d00      	cmp	r5, #0
 8000faa:	d100      	bne.n	8000fae <__aeabi_fmul+0x1e>
 8000fac:	e088      	b.n	80010c0 <__aeabi_fmul+0x130>
 8000fae:	2dff      	cmp	r5, #255	@ 0xff
 8000fb0:	d100      	bne.n	8000fb4 <__aeabi_fmul+0x24>
 8000fb2:	e08d      	b.n	80010d0 <__aeabi_fmul+0x140>
 8000fb4:	2280      	movs	r2, #128	@ 0x80
 8000fb6:	00db      	lsls	r3, r3, #3
 8000fb8:	04d2      	lsls	r2, r2, #19
 8000fba:	431a      	orrs	r2, r3
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	4691      	mov	r9, r2
 8000fc0:	4698      	mov	r8, r3
 8000fc2:	469a      	mov	sl, r3
 8000fc4:	3d7f      	subs	r5, #127	@ 0x7f
 8000fc6:	027c      	lsls	r4, r7, #9
 8000fc8:	007b      	lsls	r3, r7, #1
 8000fca:	0a64      	lsrs	r4, r4, #9
 8000fcc:	0e1b      	lsrs	r3, r3, #24
 8000fce:	0fff      	lsrs	r7, r7, #31
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d068      	beq.n	80010a6 <__aeabi_fmul+0x116>
 8000fd4:	2bff      	cmp	r3, #255	@ 0xff
 8000fd6:	d021      	beq.n	800101c <__aeabi_fmul+0x8c>
 8000fd8:	2280      	movs	r2, #128	@ 0x80
 8000fda:	00e4      	lsls	r4, r4, #3
 8000fdc:	04d2      	lsls	r2, r2, #19
 8000fde:	4314      	orrs	r4, r2
 8000fe0:	4642      	mov	r2, r8
 8000fe2:	3b7f      	subs	r3, #127	@ 0x7f
 8000fe4:	195b      	adds	r3, r3, r5
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	1c5d      	adds	r5, r3, #1
 8000fea:	2a0a      	cmp	r2, #10
 8000fec:	dc2e      	bgt.n	800104c <__aeabi_fmul+0xbc>
 8000fee:	407e      	eors	r6, r7
 8000ff0:	4642      	mov	r2, r8
 8000ff2:	2a02      	cmp	r2, #2
 8000ff4:	dc23      	bgt.n	800103e <__aeabi_fmul+0xae>
 8000ff6:	3a01      	subs	r2, #1
 8000ff8:	2a01      	cmp	r2, #1
 8000ffa:	d900      	bls.n	8000ffe <__aeabi_fmul+0x6e>
 8000ffc:	e0bd      	b.n	800117a <__aeabi_fmul+0x1ea>
 8000ffe:	2902      	cmp	r1, #2
 8001000:	d06e      	beq.n	80010e0 <__aeabi_fmul+0x150>
 8001002:	2901      	cmp	r1, #1
 8001004:	d12c      	bne.n	8001060 <__aeabi_fmul+0xd0>
 8001006:	2000      	movs	r0, #0
 8001008:	2200      	movs	r2, #0
 800100a:	05c0      	lsls	r0, r0, #23
 800100c:	07f6      	lsls	r6, r6, #31
 800100e:	4310      	orrs	r0, r2
 8001010:	4330      	orrs	r0, r6
 8001012:	bce0      	pop	{r5, r6, r7}
 8001014:	46ba      	mov	sl, r7
 8001016:	46b1      	mov	r9, r6
 8001018:	46a8      	mov	r8, r5
 800101a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800101c:	002b      	movs	r3, r5
 800101e:	33ff      	adds	r3, #255	@ 0xff
 8001020:	2c00      	cmp	r4, #0
 8001022:	d065      	beq.n	80010f0 <__aeabi_fmul+0x160>
 8001024:	2203      	movs	r2, #3
 8001026:	4641      	mov	r1, r8
 8001028:	4311      	orrs	r1, r2
 800102a:	0032      	movs	r2, r6
 800102c:	3501      	adds	r5, #1
 800102e:	4688      	mov	r8, r1
 8001030:	407a      	eors	r2, r7
 8001032:	35ff      	adds	r5, #255	@ 0xff
 8001034:	290a      	cmp	r1, #10
 8001036:	dd00      	ble.n	800103a <__aeabi_fmul+0xaa>
 8001038:	e0d8      	b.n	80011ec <__aeabi_fmul+0x25c>
 800103a:	0016      	movs	r6, r2
 800103c:	2103      	movs	r1, #3
 800103e:	4640      	mov	r0, r8
 8001040:	2201      	movs	r2, #1
 8001042:	4082      	lsls	r2, r0
 8001044:	20a6      	movs	r0, #166	@ 0xa6
 8001046:	00c0      	lsls	r0, r0, #3
 8001048:	4202      	tst	r2, r0
 800104a:	d020      	beq.n	800108e <__aeabi_fmul+0xfe>
 800104c:	4653      	mov	r3, sl
 800104e:	2b02      	cmp	r3, #2
 8001050:	d046      	beq.n	80010e0 <__aeabi_fmul+0x150>
 8001052:	2b03      	cmp	r3, #3
 8001054:	d100      	bne.n	8001058 <__aeabi_fmul+0xc8>
 8001056:	e0bb      	b.n	80011d0 <__aeabi_fmul+0x240>
 8001058:	4651      	mov	r1, sl
 800105a:	464c      	mov	r4, r9
 800105c:	2901      	cmp	r1, #1
 800105e:	d0d2      	beq.n	8001006 <__aeabi_fmul+0x76>
 8001060:	002b      	movs	r3, r5
 8001062:	337f      	adds	r3, #127	@ 0x7f
 8001064:	2b00      	cmp	r3, #0
 8001066:	dd70      	ble.n	800114a <__aeabi_fmul+0x1ba>
 8001068:	0762      	lsls	r2, r4, #29
 800106a:	d004      	beq.n	8001076 <__aeabi_fmul+0xe6>
 800106c:	220f      	movs	r2, #15
 800106e:	4022      	ands	r2, r4
 8001070:	2a04      	cmp	r2, #4
 8001072:	d000      	beq.n	8001076 <__aeabi_fmul+0xe6>
 8001074:	3404      	adds	r4, #4
 8001076:	0122      	lsls	r2, r4, #4
 8001078:	d503      	bpl.n	8001082 <__aeabi_fmul+0xf2>
 800107a:	4b63      	ldr	r3, [pc, #396]	@ (8001208 <__aeabi_fmul+0x278>)
 800107c:	401c      	ands	r4, r3
 800107e:	002b      	movs	r3, r5
 8001080:	3380      	adds	r3, #128	@ 0x80
 8001082:	2bfe      	cmp	r3, #254	@ 0xfe
 8001084:	dc2c      	bgt.n	80010e0 <__aeabi_fmul+0x150>
 8001086:	01a2      	lsls	r2, r4, #6
 8001088:	0a52      	lsrs	r2, r2, #9
 800108a:	b2d8      	uxtb	r0, r3
 800108c:	e7bd      	b.n	800100a <__aeabi_fmul+0x7a>
 800108e:	2090      	movs	r0, #144	@ 0x90
 8001090:	0080      	lsls	r0, r0, #2
 8001092:	4202      	tst	r2, r0
 8001094:	d127      	bne.n	80010e6 <__aeabi_fmul+0x156>
 8001096:	38b9      	subs	r0, #185	@ 0xb9
 8001098:	38ff      	subs	r0, #255	@ 0xff
 800109a:	4210      	tst	r0, r2
 800109c:	d06d      	beq.n	800117a <__aeabi_fmul+0x1ea>
 800109e:	003e      	movs	r6, r7
 80010a0:	46a1      	mov	r9, r4
 80010a2:	468a      	mov	sl, r1
 80010a4:	e7d2      	b.n	800104c <__aeabi_fmul+0xbc>
 80010a6:	2c00      	cmp	r4, #0
 80010a8:	d141      	bne.n	800112e <__aeabi_fmul+0x19e>
 80010aa:	2301      	movs	r3, #1
 80010ac:	4642      	mov	r2, r8
 80010ae:	431a      	orrs	r2, r3
 80010b0:	4690      	mov	r8, r2
 80010b2:	002b      	movs	r3, r5
 80010b4:	4642      	mov	r2, r8
 80010b6:	2101      	movs	r1, #1
 80010b8:	1c5d      	adds	r5, r3, #1
 80010ba:	2a0a      	cmp	r2, #10
 80010bc:	dd97      	ble.n	8000fee <__aeabi_fmul+0x5e>
 80010be:	e7c5      	b.n	800104c <__aeabi_fmul+0xbc>
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d126      	bne.n	8001112 <__aeabi_fmul+0x182>
 80010c4:	2304      	movs	r3, #4
 80010c6:	4698      	mov	r8, r3
 80010c8:	3b03      	subs	r3, #3
 80010ca:	2500      	movs	r5, #0
 80010cc:	469a      	mov	sl, r3
 80010ce:	e77a      	b.n	8000fc6 <__aeabi_fmul+0x36>
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d118      	bne.n	8001106 <__aeabi_fmul+0x176>
 80010d4:	2308      	movs	r3, #8
 80010d6:	4698      	mov	r8, r3
 80010d8:	3b06      	subs	r3, #6
 80010da:	25ff      	movs	r5, #255	@ 0xff
 80010dc:	469a      	mov	sl, r3
 80010de:	e772      	b.n	8000fc6 <__aeabi_fmul+0x36>
 80010e0:	20ff      	movs	r0, #255	@ 0xff
 80010e2:	2200      	movs	r2, #0
 80010e4:	e791      	b.n	800100a <__aeabi_fmul+0x7a>
 80010e6:	2280      	movs	r2, #128	@ 0x80
 80010e8:	2600      	movs	r6, #0
 80010ea:	20ff      	movs	r0, #255	@ 0xff
 80010ec:	03d2      	lsls	r2, r2, #15
 80010ee:	e78c      	b.n	800100a <__aeabi_fmul+0x7a>
 80010f0:	4641      	mov	r1, r8
 80010f2:	2202      	movs	r2, #2
 80010f4:	3501      	adds	r5, #1
 80010f6:	4311      	orrs	r1, r2
 80010f8:	4688      	mov	r8, r1
 80010fa:	35ff      	adds	r5, #255	@ 0xff
 80010fc:	290a      	cmp	r1, #10
 80010fe:	dca5      	bgt.n	800104c <__aeabi_fmul+0xbc>
 8001100:	2102      	movs	r1, #2
 8001102:	407e      	eors	r6, r7
 8001104:	e774      	b.n	8000ff0 <__aeabi_fmul+0x60>
 8001106:	230c      	movs	r3, #12
 8001108:	4698      	mov	r8, r3
 800110a:	3b09      	subs	r3, #9
 800110c:	25ff      	movs	r5, #255	@ 0xff
 800110e:	469a      	mov	sl, r3
 8001110:	e759      	b.n	8000fc6 <__aeabi_fmul+0x36>
 8001112:	0018      	movs	r0, r3
 8001114:	f002 fa6a 	bl	80035ec <__clzsi2>
 8001118:	464a      	mov	r2, r9
 800111a:	1f43      	subs	r3, r0, #5
 800111c:	2576      	movs	r5, #118	@ 0x76
 800111e:	409a      	lsls	r2, r3
 8001120:	2300      	movs	r3, #0
 8001122:	426d      	negs	r5, r5
 8001124:	4691      	mov	r9, r2
 8001126:	4698      	mov	r8, r3
 8001128:	469a      	mov	sl, r3
 800112a:	1a2d      	subs	r5, r5, r0
 800112c:	e74b      	b.n	8000fc6 <__aeabi_fmul+0x36>
 800112e:	0020      	movs	r0, r4
 8001130:	f002 fa5c 	bl	80035ec <__clzsi2>
 8001134:	4642      	mov	r2, r8
 8001136:	1f43      	subs	r3, r0, #5
 8001138:	409c      	lsls	r4, r3
 800113a:	1a2b      	subs	r3, r5, r0
 800113c:	3b76      	subs	r3, #118	@ 0x76
 800113e:	2100      	movs	r1, #0
 8001140:	1c5d      	adds	r5, r3, #1
 8001142:	2a0a      	cmp	r2, #10
 8001144:	dc00      	bgt.n	8001148 <__aeabi_fmul+0x1b8>
 8001146:	e752      	b.n	8000fee <__aeabi_fmul+0x5e>
 8001148:	e780      	b.n	800104c <__aeabi_fmul+0xbc>
 800114a:	2201      	movs	r2, #1
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	2b1b      	cmp	r3, #27
 8001150:	dd00      	ble.n	8001154 <__aeabi_fmul+0x1c4>
 8001152:	e758      	b.n	8001006 <__aeabi_fmul+0x76>
 8001154:	359e      	adds	r5, #158	@ 0x9e
 8001156:	0022      	movs	r2, r4
 8001158:	40ac      	lsls	r4, r5
 800115a:	40da      	lsrs	r2, r3
 800115c:	1e63      	subs	r3, r4, #1
 800115e:	419c      	sbcs	r4, r3
 8001160:	4322      	orrs	r2, r4
 8001162:	0753      	lsls	r3, r2, #29
 8001164:	d004      	beq.n	8001170 <__aeabi_fmul+0x1e0>
 8001166:	230f      	movs	r3, #15
 8001168:	4013      	ands	r3, r2
 800116a:	2b04      	cmp	r3, #4
 800116c:	d000      	beq.n	8001170 <__aeabi_fmul+0x1e0>
 800116e:	3204      	adds	r2, #4
 8001170:	0153      	lsls	r3, r2, #5
 8001172:	d537      	bpl.n	80011e4 <__aeabi_fmul+0x254>
 8001174:	2001      	movs	r0, #1
 8001176:	2200      	movs	r2, #0
 8001178:	e747      	b.n	800100a <__aeabi_fmul+0x7a>
 800117a:	0c21      	lsrs	r1, r4, #16
 800117c:	464a      	mov	r2, r9
 800117e:	0424      	lsls	r4, r4, #16
 8001180:	0c24      	lsrs	r4, r4, #16
 8001182:	0027      	movs	r7, r4
 8001184:	0c10      	lsrs	r0, r2, #16
 8001186:	0412      	lsls	r2, r2, #16
 8001188:	0c12      	lsrs	r2, r2, #16
 800118a:	4344      	muls	r4, r0
 800118c:	4357      	muls	r7, r2
 800118e:	4348      	muls	r0, r1
 8001190:	4351      	muls	r1, r2
 8001192:	0c3a      	lsrs	r2, r7, #16
 8001194:	1909      	adds	r1, r1, r4
 8001196:	1852      	adds	r2, r2, r1
 8001198:	4294      	cmp	r4, r2
 800119a:	d903      	bls.n	80011a4 <__aeabi_fmul+0x214>
 800119c:	2180      	movs	r1, #128	@ 0x80
 800119e:	0249      	lsls	r1, r1, #9
 80011a0:	468c      	mov	ip, r1
 80011a2:	4460      	add	r0, ip
 80011a4:	043f      	lsls	r7, r7, #16
 80011a6:	0411      	lsls	r1, r2, #16
 80011a8:	0c3f      	lsrs	r7, r7, #16
 80011aa:	19c9      	adds	r1, r1, r7
 80011ac:	018c      	lsls	r4, r1, #6
 80011ae:	1e67      	subs	r7, r4, #1
 80011b0:	41bc      	sbcs	r4, r7
 80011b2:	0c12      	lsrs	r2, r2, #16
 80011b4:	0e89      	lsrs	r1, r1, #26
 80011b6:	1812      	adds	r2, r2, r0
 80011b8:	430c      	orrs	r4, r1
 80011ba:	0192      	lsls	r2, r2, #6
 80011bc:	4314      	orrs	r4, r2
 80011be:	0112      	lsls	r2, r2, #4
 80011c0:	d50e      	bpl.n	80011e0 <__aeabi_fmul+0x250>
 80011c2:	2301      	movs	r3, #1
 80011c4:	0862      	lsrs	r2, r4, #1
 80011c6:	401c      	ands	r4, r3
 80011c8:	4314      	orrs	r4, r2
 80011ca:	e749      	b.n	8001060 <__aeabi_fmul+0xd0>
 80011cc:	003e      	movs	r6, r7
 80011ce:	46a1      	mov	r9, r4
 80011d0:	2280      	movs	r2, #128	@ 0x80
 80011d2:	464b      	mov	r3, r9
 80011d4:	03d2      	lsls	r2, r2, #15
 80011d6:	431a      	orrs	r2, r3
 80011d8:	0252      	lsls	r2, r2, #9
 80011da:	20ff      	movs	r0, #255	@ 0xff
 80011dc:	0a52      	lsrs	r2, r2, #9
 80011de:	e714      	b.n	800100a <__aeabi_fmul+0x7a>
 80011e0:	001d      	movs	r5, r3
 80011e2:	e73d      	b.n	8001060 <__aeabi_fmul+0xd0>
 80011e4:	0192      	lsls	r2, r2, #6
 80011e6:	2000      	movs	r0, #0
 80011e8:	0a52      	lsrs	r2, r2, #9
 80011ea:	e70e      	b.n	800100a <__aeabi_fmul+0x7a>
 80011ec:	290f      	cmp	r1, #15
 80011ee:	d1ed      	bne.n	80011cc <__aeabi_fmul+0x23c>
 80011f0:	2280      	movs	r2, #128	@ 0x80
 80011f2:	464b      	mov	r3, r9
 80011f4:	03d2      	lsls	r2, r2, #15
 80011f6:	4213      	tst	r3, r2
 80011f8:	d0ea      	beq.n	80011d0 <__aeabi_fmul+0x240>
 80011fa:	4214      	tst	r4, r2
 80011fc:	d1e8      	bne.n	80011d0 <__aeabi_fmul+0x240>
 80011fe:	003e      	movs	r6, r7
 8001200:	20ff      	movs	r0, #255	@ 0xff
 8001202:	4322      	orrs	r2, r4
 8001204:	e701      	b.n	800100a <__aeabi_fmul+0x7a>
 8001206:	46c0      	nop			@ (mov r8, r8)
 8001208:	f7ffffff 	.word	0xf7ffffff

0800120c <__aeabi_fsub>:
 800120c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800120e:	4647      	mov	r7, r8
 8001210:	46ce      	mov	lr, r9
 8001212:	024e      	lsls	r6, r1, #9
 8001214:	0243      	lsls	r3, r0, #9
 8001216:	0045      	lsls	r5, r0, #1
 8001218:	0a72      	lsrs	r2, r6, #9
 800121a:	0fc4      	lsrs	r4, r0, #31
 800121c:	0048      	lsls	r0, r1, #1
 800121e:	b580      	push	{r7, lr}
 8001220:	4694      	mov	ip, r2
 8001222:	0a5f      	lsrs	r7, r3, #9
 8001224:	0e2d      	lsrs	r5, r5, #24
 8001226:	099b      	lsrs	r3, r3, #6
 8001228:	0e00      	lsrs	r0, r0, #24
 800122a:	0fc9      	lsrs	r1, r1, #31
 800122c:	09b6      	lsrs	r6, r6, #6
 800122e:	28ff      	cmp	r0, #255	@ 0xff
 8001230:	d024      	beq.n	800127c <__aeabi_fsub+0x70>
 8001232:	2201      	movs	r2, #1
 8001234:	4051      	eors	r1, r2
 8001236:	1a2a      	subs	r2, r5, r0
 8001238:	428c      	cmp	r4, r1
 800123a:	d00f      	beq.n	800125c <__aeabi_fsub+0x50>
 800123c:	2a00      	cmp	r2, #0
 800123e:	dc00      	bgt.n	8001242 <__aeabi_fsub+0x36>
 8001240:	e16a      	b.n	8001518 <__aeabi_fsub+0x30c>
 8001242:	2800      	cmp	r0, #0
 8001244:	d135      	bne.n	80012b2 <__aeabi_fsub+0xa6>
 8001246:	2e00      	cmp	r6, #0
 8001248:	d100      	bne.n	800124c <__aeabi_fsub+0x40>
 800124a:	e0a2      	b.n	8001392 <__aeabi_fsub+0x186>
 800124c:	1e51      	subs	r1, r2, #1
 800124e:	2a01      	cmp	r2, #1
 8001250:	d100      	bne.n	8001254 <__aeabi_fsub+0x48>
 8001252:	e124      	b.n	800149e <__aeabi_fsub+0x292>
 8001254:	2aff      	cmp	r2, #255	@ 0xff
 8001256:	d021      	beq.n	800129c <__aeabi_fsub+0x90>
 8001258:	000a      	movs	r2, r1
 800125a:	e02f      	b.n	80012bc <__aeabi_fsub+0xb0>
 800125c:	2a00      	cmp	r2, #0
 800125e:	dc00      	bgt.n	8001262 <__aeabi_fsub+0x56>
 8001260:	e167      	b.n	8001532 <__aeabi_fsub+0x326>
 8001262:	2800      	cmp	r0, #0
 8001264:	d05e      	beq.n	8001324 <__aeabi_fsub+0x118>
 8001266:	2dff      	cmp	r5, #255	@ 0xff
 8001268:	d018      	beq.n	800129c <__aeabi_fsub+0x90>
 800126a:	2180      	movs	r1, #128	@ 0x80
 800126c:	04c9      	lsls	r1, r1, #19
 800126e:	430e      	orrs	r6, r1
 8001270:	2a1b      	cmp	r2, #27
 8001272:	dc00      	bgt.n	8001276 <__aeabi_fsub+0x6a>
 8001274:	e076      	b.n	8001364 <__aeabi_fsub+0x158>
 8001276:	002a      	movs	r2, r5
 8001278:	3301      	adds	r3, #1
 800127a:	e032      	b.n	80012e2 <__aeabi_fsub+0xd6>
 800127c:	002a      	movs	r2, r5
 800127e:	3aff      	subs	r2, #255	@ 0xff
 8001280:	4691      	mov	r9, r2
 8001282:	2e00      	cmp	r6, #0
 8001284:	d042      	beq.n	800130c <__aeabi_fsub+0x100>
 8001286:	428c      	cmp	r4, r1
 8001288:	d055      	beq.n	8001336 <__aeabi_fsub+0x12a>
 800128a:	464a      	mov	r2, r9
 800128c:	2a00      	cmp	r2, #0
 800128e:	d100      	bne.n	8001292 <__aeabi_fsub+0x86>
 8001290:	e09c      	b.n	80013cc <__aeabi_fsub+0x1c0>
 8001292:	2d00      	cmp	r5, #0
 8001294:	d100      	bne.n	8001298 <__aeabi_fsub+0x8c>
 8001296:	e077      	b.n	8001388 <__aeabi_fsub+0x17c>
 8001298:	000c      	movs	r4, r1
 800129a:	0033      	movs	r3, r6
 800129c:	08db      	lsrs	r3, r3, #3
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d100      	bne.n	80012a4 <__aeabi_fsub+0x98>
 80012a2:	e06e      	b.n	8001382 <__aeabi_fsub+0x176>
 80012a4:	2280      	movs	r2, #128	@ 0x80
 80012a6:	03d2      	lsls	r2, r2, #15
 80012a8:	4313      	orrs	r3, r2
 80012aa:	025b      	lsls	r3, r3, #9
 80012ac:	20ff      	movs	r0, #255	@ 0xff
 80012ae:	0a5b      	lsrs	r3, r3, #9
 80012b0:	e024      	b.n	80012fc <__aeabi_fsub+0xf0>
 80012b2:	2dff      	cmp	r5, #255	@ 0xff
 80012b4:	d0f2      	beq.n	800129c <__aeabi_fsub+0x90>
 80012b6:	2180      	movs	r1, #128	@ 0x80
 80012b8:	04c9      	lsls	r1, r1, #19
 80012ba:	430e      	orrs	r6, r1
 80012bc:	2101      	movs	r1, #1
 80012be:	2a1b      	cmp	r2, #27
 80012c0:	dc08      	bgt.n	80012d4 <__aeabi_fsub+0xc8>
 80012c2:	0031      	movs	r1, r6
 80012c4:	2020      	movs	r0, #32
 80012c6:	40d1      	lsrs	r1, r2
 80012c8:	1a82      	subs	r2, r0, r2
 80012ca:	4096      	lsls	r6, r2
 80012cc:	0032      	movs	r2, r6
 80012ce:	1e50      	subs	r0, r2, #1
 80012d0:	4182      	sbcs	r2, r0
 80012d2:	4311      	orrs	r1, r2
 80012d4:	1a5b      	subs	r3, r3, r1
 80012d6:	015a      	lsls	r2, r3, #5
 80012d8:	d460      	bmi.n	800139c <__aeabi_fsub+0x190>
 80012da:	2107      	movs	r1, #7
 80012dc:	002a      	movs	r2, r5
 80012de:	4019      	ands	r1, r3
 80012e0:	d057      	beq.n	8001392 <__aeabi_fsub+0x186>
 80012e2:	210f      	movs	r1, #15
 80012e4:	4019      	ands	r1, r3
 80012e6:	2904      	cmp	r1, #4
 80012e8:	d000      	beq.n	80012ec <__aeabi_fsub+0xe0>
 80012ea:	3304      	adds	r3, #4
 80012ec:	0159      	lsls	r1, r3, #5
 80012ee:	d550      	bpl.n	8001392 <__aeabi_fsub+0x186>
 80012f0:	1c50      	adds	r0, r2, #1
 80012f2:	2afe      	cmp	r2, #254	@ 0xfe
 80012f4:	d045      	beq.n	8001382 <__aeabi_fsub+0x176>
 80012f6:	019b      	lsls	r3, r3, #6
 80012f8:	b2c0      	uxtb	r0, r0
 80012fa:	0a5b      	lsrs	r3, r3, #9
 80012fc:	05c0      	lsls	r0, r0, #23
 80012fe:	4318      	orrs	r0, r3
 8001300:	07e4      	lsls	r4, r4, #31
 8001302:	4320      	orrs	r0, r4
 8001304:	bcc0      	pop	{r6, r7}
 8001306:	46b9      	mov	r9, r7
 8001308:	46b0      	mov	r8, r6
 800130a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800130c:	2201      	movs	r2, #1
 800130e:	4051      	eors	r1, r2
 8001310:	428c      	cmp	r4, r1
 8001312:	d1ba      	bne.n	800128a <__aeabi_fsub+0x7e>
 8001314:	464a      	mov	r2, r9
 8001316:	2a00      	cmp	r2, #0
 8001318:	d010      	beq.n	800133c <__aeabi_fsub+0x130>
 800131a:	2d00      	cmp	r5, #0
 800131c:	d100      	bne.n	8001320 <__aeabi_fsub+0x114>
 800131e:	e098      	b.n	8001452 <__aeabi_fsub+0x246>
 8001320:	2300      	movs	r3, #0
 8001322:	e7bb      	b.n	800129c <__aeabi_fsub+0x90>
 8001324:	2e00      	cmp	r6, #0
 8001326:	d034      	beq.n	8001392 <__aeabi_fsub+0x186>
 8001328:	1e51      	subs	r1, r2, #1
 800132a:	2a01      	cmp	r2, #1
 800132c:	d06e      	beq.n	800140c <__aeabi_fsub+0x200>
 800132e:	2aff      	cmp	r2, #255	@ 0xff
 8001330:	d0b4      	beq.n	800129c <__aeabi_fsub+0x90>
 8001332:	000a      	movs	r2, r1
 8001334:	e79c      	b.n	8001270 <__aeabi_fsub+0x64>
 8001336:	2a00      	cmp	r2, #0
 8001338:	d000      	beq.n	800133c <__aeabi_fsub+0x130>
 800133a:	e088      	b.n	800144e <__aeabi_fsub+0x242>
 800133c:	20fe      	movs	r0, #254	@ 0xfe
 800133e:	1c6a      	adds	r2, r5, #1
 8001340:	4210      	tst	r0, r2
 8001342:	d000      	beq.n	8001346 <__aeabi_fsub+0x13a>
 8001344:	e092      	b.n	800146c <__aeabi_fsub+0x260>
 8001346:	2d00      	cmp	r5, #0
 8001348:	d000      	beq.n	800134c <__aeabi_fsub+0x140>
 800134a:	e0a4      	b.n	8001496 <__aeabi_fsub+0x28a>
 800134c:	2b00      	cmp	r3, #0
 800134e:	d100      	bne.n	8001352 <__aeabi_fsub+0x146>
 8001350:	e0cb      	b.n	80014ea <__aeabi_fsub+0x2de>
 8001352:	2e00      	cmp	r6, #0
 8001354:	d000      	beq.n	8001358 <__aeabi_fsub+0x14c>
 8001356:	e0ca      	b.n	80014ee <__aeabi_fsub+0x2e2>
 8001358:	2200      	movs	r2, #0
 800135a:	08db      	lsrs	r3, r3, #3
 800135c:	025b      	lsls	r3, r3, #9
 800135e:	0a5b      	lsrs	r3, r3, #9
 8001360:	b2d0      	uxtb	r0, r2
 8001362:	e7cb      	b.n	80012fc <__aeabi_fsub+0xf0>
 8001364:	0031      	movs	r1, r6
 8001366:	2020      	movs	r0, #32
 8001368:	40d1      	lsrs	r1, r2
 800136a:	1a82      	subs	r2, r0, r2
 800136c:	4096      	lsls	r6, r2
 800136e:	0032      	movs	r2, r6
 8001370:	1e50      	subs	r0, r2, #1
 8001372:	4182      	sbcs	r2, r0
 8001374:	430a      	orrs	r2, r1
 8001376:	189b      	adds	r3, r3, r2
 8001378:	015a      	lsls	r2, r3, #5
 800137a:	d5ae      	bpl.n	80012da <__aeabi_fsub+0xce>
 800137c:	1c6a      	adds	r2, r5, #1
 800137e:	2dfe      	cmp	r5, #254	@ 0xfe
 8001380:	d14a      	bne.n	8001418 <__aeabi_fsub+0x20c>
 8001382:	20ff      	movs	r0, #255	@ 0xff
 8001384:	2300      	movs	r3, #0
 8001386:	e7b9      	b.n	80012fc <__aeabi_fsub+0xf0>
 8001388:	22ff      	movs	r2, #255	@ 0xff
 800138a:	2b00      	cmp	r3, #0
 800138c:	d14b      	bne.n	8001426 <__aeabi_fsub+0x21a>
 800138e:	000c      	movs	r4, r1
 8001390:	0033      	movs	r3, r6
 8001392:	08db      	lsrs	r3, r3, #3
 8001394:	2aff      	cmp	r2, #255	@ 0xff
 8001396:	d100      	bne.n	800139a <__aeabi_fsub+0x18e>
 8001398:	e781      	b.n	800129e <__aeabi_fsub+0x92>
 800139a:	e7df      	b.n	800135c <__aeabi_fsub+0x150>
 800139c:	019f      	lsls	r7, r3, #6
 800139e:	09bf      	lsrs	r7, r7, #6
 80013a0:	0038      	movs	r0, r7
 80013a2:	f002 f923 	bl	80035ec <__clzsi2>
 80013a6:	3805      	subs	r0, #5
 80013a8:	4087      	lsls	r7, r0
 80013aa:	4285      	cmp	r5, r0
 80013ac:	dc21      	bgt.n	80013f2 <__aeabi_fsub+0x1e6>
 80013ae:	003b      	movs	r3, r7
 80013b0:	2120      	movs	r1, #32
 80013b2:	1b42      	subs	r2, r0, r5
 80013b4:	3201      	adds	r2, #1
 80013b6:	40d3      	lsrs	r3, r2
 80013b8:	1a8a      	subs	r2, r1, r2
 80013ba:	4097      	lsls	r7, r2
 80013bc:	1e7a      	subs	r2, r7, #1
 80013be:	4197      	sbcs	r7, r2
 80013c0:	2200      	movs	r2, #0
 80013c2:	433b      	orrs	r3, r7
 80013c4:	0759      	lsls	r1, r3, #29
 80013c6:	d000      	beq.n	80013ca <__aeabi_fsub+0x1be>
 80013c8:	e78b      	b.n	80012e2 <__aeabi_fsub+0xd6>
 80013ca:	e78f      	b.n	80012ec <__aeabi_fsub+0xe0>
 80013cc:	20fe      	movs	r0, #254	@ 0xfe
 80013ce:	1c6a      	adds	r2, r5, #1
 80013d0:	4210      	tst	r0, r2
 80013d2:	d112      	bne.n	80013fa <__aeabi_fsub+0x1ee>
 80013d4:	2d00      	cmp	r5, #0
 80013d6:	d152      	bne.n	800147e <__aeabi_fsub+0x272>
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d07c      	beq.n	80014d6 <__aeabi_fsub+0x2ca>
 80013dc:	2e00      	cmp	r6, #0
 80013de:	d0bb      	beq.n	8001358 <__aeabi_fsub+0x14c>
 80013e0:	1b9a      	subs	r2, r3, r6
 80013e2:	0150      	lsls	r0, r2, #5
 80013e4:	d400      	bmi.n	80013e8 <__aeabi_fsub+0x1dc>
 80013e6:	e08b      	b.n	8001500 <__aeabi_fsub+0x2f4>
 80013e8:	2401      	movs	r4, #1
 80013ea:	2200      	movs	r2, #0
 80013ec:	1af3      	subs	r3, r6, r3
 80013ee:	400c      	ands	r4, r1
 80013f0:	e7e8      	b.n	80013c4 <__aeabi_fsub+0x1b8>
 80013f2:	4b56      	ldr	r3, [pc, #344]	@ (800154c <__aeabi_fsub+0x340>)
 80013f4:	1a2a      	subs	r2, r5, r0
 80013f6:	403b      	ands	r3, r7
 80013f8:	e7e4      	b.n	80013c4 <__aeabi_fsub+0x1b8>
 80013fa:	1b9f      	subs	r7, r3, r6
 80013fc:	017a      	lsls	r2, r7, #5
 80013fe:	d446      	bmi.n	800148e <__aeabi_fsub+0x282>
 8001400:	2f00      	cmp	r7, #0
 8001402:	d1cd      	bne.n	80013a0 <__aeabi_fsub+0x194>
 8001404:	2400      	movs	r4, #0
 8001406:	2000      	movs	r0, #0
 8001408:	2300      	movs	r3, #0
 800140a:	e777      	b.n	80012fc <__aeabi_fsub+0xf0>
 800140c:	199b      	adds	r3, r3, r6
 800140e:	2501      	movs	r5, #1
 8001410:	3201      	adds	r2, #1
 8001412:	0159      	lsls	r1, r3, #5
 8001414:	d400      	bmi.n	8001418 <__aeabi_fsub+0x20c>
 8001416:	e760      	b.n	80012da <__aeabi_fsub+0xce>
 8001418:	2101      	movs	r1, #1
 800141a:	484d      	ldr	r0, [pc, #308]	@ (8001550 <__aeabi_fsub+0x344>)
 800141c:	4019      	ands	r1, r3
 800141e:	085b      	lsrs	r3, r3, #1
 8001420:	4003      	ands	r3, r0
 8001422:	430b      	orrs	r3, r1
 8001424:	e7ce      	b.n	80013c4 <__aeabi_fsub+0x1b8>
 8001426:	1e57      	subs	r7, r2, #1
 8001428:	2a01      	cmp	r2, #1
 800142a:	d05a      	beq.n	80014e2 <__aeabi_fsub+0x2d6>
 800142c:	000c      	movs	r4, r1
 800142e:	2aff      	cmp	r2, #255	@ 0xff
 8001430:	d033      	beq.n	800149a <__aeabi_fsub+0x28e>
 8001432:	2201      	movs	r2, #1
 8001434:	2f1b      	cmp	r7, #27
 8001436:	dc07      	bgt.n	8001448 <__aeabi_fsub+0x23c>
 8001438:	2120      	movs	r1, #32
 800143a:	1bc9      	subs	r1, r1, r7
 800143c:	001a      	movs	r2, r3
 800143e:	408b      	lsls	r3, r1
 8001440:	40fa      	lsrs	r2, r7
 8001442:	1e59      	subs	r1, r3, #1
 8001444:	418b      	sbcs	r3, r1
 8001446:	431a      	orrs	r2, r3
 8001448:	0005      	movs	r5, r0
 800144a:	1ab3      	subs	r3, r6, r2
 800144c:	e743      	b.n	80012d6 <__aeabi_fsub+0xca>
 800144e:	2d00      	cmp	r5, #0
 8001450:	d123      	bne.n	800149a <__aeabi_fsub+0x28e>
 8001452:	22ff      	movs	r2, #255	@ 0xff
 8001454:	2b00      	cmp	r3, #0
 8001456:	d09b      	beq.n	8001390 <__aeabi_fsub+0x184>
 8001458:	1e51      	subs	r1, r2, #1
 800145a:	2a01      	cmp	r2, #1
 800145c:	d0d6      	beq.n	800140c <__aeabi_fsub+0x200>
 800145e:	2aff      	cmp	r2, #255	@ 0xff
 8001460:	d01b      	beq.n	800149a <__aeabi_fsub+0x28e>
 8001462:	291b      	cmp	r1, #27
 8001464:	dd2c      	ble.n	80014c0 <__aeabi_fsub+0x2b4>
 8001466:	0002      	movs	r2, r0
 8001468:	1c73      	adds	r3, r6, #1
 800146a:	e73a      	b.n	80012e2 <__aeabi_fsub+0xd6>
 800146c:	2aff      	cmp	r2, #255	@ 0xff
 800146e:	d088      	beq.n	8001382 <__aeabi_fsub+0x176>
 8001470:	199b      	adds	r3, r3, r6
 8001472:	085b      	lsrs	r3, r3, #1
 8001474:	0759      	lsls	r1, r3, #29
 8001476:	d000      	beq.n	800147a <__aeabi_fsub+0x26e>
 8001478:	e733      	b.n	80012e2 <__aeabi_fsub+0xd6>
 800147a:	08db      	lsrs	r3, r3, #3
 800147c:	e76e      	b.n	800135c <__aeabi_fsub+0x150>
 800147e:	2b00      	cmp	r3, #0
 8001480:	d110      	bne.n	80014a4 <__aeabi_fsub+0x298>
 8001482:	2e00      	cmp	r6, #0
 8001484:	d043      	beq.n	800150e <__aeabi_fsub+0x302>
 8001486:	2401      	movs	r4, #1
 8001488:	0033      	movs	r3, r6
 800148a:	400c      	ands	r4, r1
 800148c:	e706      	b.n	800129c <__aeabi_fsub+0x90>
 800148e:	2401      	movs	r4, #1
 8001490:	1af7      	subs	r7, r6, r3
 8001492:	400c      	ands	r4, r1
 8001494:	e784      	b.n	80013a0 <__aeabi_fsub+0x194>
 8001496:	2b00      	cmp	r3, #0
 8001498:	d104      	bne.n	80014a4 <__aeabi_fsub+0x298>
 800149a:	0033      	movs	r3, r6
 800149c:	e6fe      	b.n	800129c <__aeabi_fsub+0x90>
 800149e:	2501      	movs	r5, #1
 80014a0:	1b9b      	subs	r3, r3, r6
 80014a2:	e718      	b.n	80012d6 <__aeabi_fsub+0xca>
 80014a4:	2e00      	cmp	r6, #0
 80014a6:	d100      	bne.n	80014aa <__aeabi_fsub+0x29e>
 80014a8:	e6f8      	b.n	800129c <__aeabi_fsub+0x90>
 80014aa:	2280      	movs	r2, #128	@ 0x80
 80014ac:	03d2      	lsls	r2, r2, #15
 80014ae:	4297      	cmp	r7, r2
 80014b0:	d304      	bcc.n	80014bc <__aeabi_fsub+0x2b0>
 80014b2:	4594      	cmp	ip, r2
 80014b4:	d202      	bcs.n	80014bc <__aeabi_fsub+0x2b0>
 80014b6:	2401      	movs	r4, #1
 80014b8:	0033      	movs	r3, r6
 80014ba:	400c      	ands	r4, r1
 80014bc:	08db      	lsrs	r3, r3, #3
 80014be:	e6f1      	b.n	80012a4 <__aeabi_fsub+0x98>
 80014c0:	001a      	movs	r2, r3
 80014c2:	2520      	movs	r5, #32
 80014c4:	40ca      	lsrs	r2, r1
 80014c6:	1a69      	subs	r1, r5, r1
 80014c8:	408b      	lsls	r3, r1
 80014ca:	1e59      	subs	r1, r3, #1
 80014cc:	418b      	sbcs	r3, r1
 80014ce:	4313      	orrs	r3, r2
 80014d0:	0005      	movs	r5, r0
 80014d2:	199b      	adds	r3, r3, r6
 80014d4:	e750      	b.n	8001378 <__aeabi_fsub+0x16c>
 80014d6:	2e00      	cmp	r6, #0
 80014d8:	d094      	beq.n	8001404 <__aeabi_fsub+0x1f8>
 80014da:	2401      	movs	r4, #1
 80014dc:	0033      	movs	r3, r6
 80014de:	400c      	ands	r4, r1
 80014e0:	e73a      	b.n	8001358 <__aeabi_fsub+0x14c>
 80014e2:	000c      	movs	r4, r1
 80014e4:	2501      	movs	r5, #1
 80014e6:	1af3      	subs	r3, r6, r3
 80014e8:	e6f5      	b.n	80012d6 <__aeabi_fsub+0xca>
 80014ea:	0033      	movs	r3, r6
 80014ec:	e734      	b.n	8001358 <__aeabi_fsub+0x14c>
 80014ee:	199b      	adds	r3, r3, r6
 80014f0:	2200      	movs	r2, #0
 80014f2:	0159      	lsls	r1, r3, #5
 80014f4:	d5c1      	bpl.n	800147a <__aeabi_fsub+0x26e>
 80014f6:	4a15      	ldr	r2, [pc, #84]	@ (800154c <__aeabi_fsub+0x340>)
 80014f8:	4013      	ands	r3, r2
 80014fa:	08db      	lsrs	r3, r3, #3
 80014fc:	2201      	movs	r2, #1
 80014fe:	e72d      	b.n	800135c <__aeabi_fsub+0x150>
 8001500:	2a00      	cmp	r2, #0
 8001502:	d100      	bne.n	8001506 <__aeabi_fsub+0x2fa>
 8001504:	e77e      	b.n	8001404 <__aeabi_fsub+0x1f8>
 8001506:	0013      	movs	r3, r2
 8001508:	2200      	movs	r2, #0
 800150a:	08db      	lsrs	r3, r3, #3
 800150c:	e726      	b.n	800135c <__aeabi_fsub+0x150>
 800150e:	2380      	movs	r3, #128	@ 0x80
 8001510:	2400      	movs	r4, #0
 8001512:	20ff      	movs	r0, #255	@ 0xff
 8001514:	03db      	lsls	r3, r3, #15
 8001516:	e6f1      	b.n	80012fc <__aeabi_fsub+0xf0>
 8001518:	2a00      	cmp	r2, #0
 800151a:	d100      	bne.n	800151e <__aeabi_fsub+0x312>
 800151c:	e756      	b.n	80013cc <__aeabi_fsub+0x1c0>
 800151e:	1b47      	subs	r7, r0, r5
 8001520:	003a      	movs	r2, r7
 8001522:	2d00      	cmp	r5, #0
 8001524:	d100      	bne.n	8001528 <__aeabi_fsub+0x31c>
 8001526:	e730      	b.n	800138a <__aeabi_fsub+0x17e>
 8001528:	2280      	movs	r2, #128	@ 0x80
 800152a:	04d2      	lsls	r2, r2, #19
 800152c:	000c      	movs	r4, r1
 800152e:	4313      	orrs	r3, r2
 8001530:	e77f      	b.n	8001432 <__aeabi_fsub+0x226>
 8001532:	2a00      	cmp	r2, #0
 8001534:	d100      	bne.n	8001538 <__aeabi_fsub+0x32c>
 8001536:	e701      	b.n	800133c <__aeabi_fsub+0x130>
 8001538:	1b41      	subs	r1, r0, r5
 800153a:	2d00      	cmp	r5, #0
 800153c:	d101      	bne.n	8001542 <__aeabi_fsub+0x336>
 800153e:	000a      	movs	r2, r1
 8001540:	e788      	b.n	8001454 <__aeabi_fsub+0x248>
 8001542:	2280      	movs	r2, #128	@ 0x80
 8001544:	04d2      	lsls	r2, r2, #19
 8001546:	4313      	orrs	r3, r2
 8001548:	e78b      	b.n	8001462 <__aeabi_fsub+0x256>
 800154a:	46c0      	nop			@ (mov r8, r8)
 800154c:	fbffffff 	.word	0xfbffffff
 8001550:	7dffffff 	.word	0x7dffffff

08001554 <__aeabi_fcmpun>:
 8001554:	0243      	lsls	r3, r0, #9
 8001556:	024a      	lsls	r2, r1, #9
 8001558:	0040      	lsls	r0, r0, #1
 800155a:	0049      	lsls	r1, r1, #1
 800155c:	0a5b      	lsrs	r3, r3, #9
 800155e:	0a52      	lsrs	r2, r2, #9
 8001560:	0e09      	lsrs	r1, r1, #24
 8001562:	0e00      	lsrs	r0, r0, #24
 8001564:	28ff      	cmp	r0, #255	@ 0xff
 8001566:	d006      	beq.n	8001576 <__aeabi_fcmpun+0x22>
 8001568:	2000      	movs	r0, #0
 800156a:	29ff      	cmp	r1, #255	@ 0xff
 800156c:	d102      	bne.n	8001574 <__aeabi_fcmpun+0x20>
 800156e:	1e53      	subs	r3, r2, #1
 8001570:	419a      	sbcs	r2, r3
 8001572:	0010      	movs	r0, r2
 8001574:	4770      	bx	lr
 8001576:	38fe      	subs	r0, #254	@ 0xfe
 8001578:	2b00      	cmp	r3, #0
 800157a:	d1fb      	bne.n	8001574 <__aeabi_fcmpun+0x20>
 800157c:	e7f4      	b.n	8001568 <__aeabi_fcmpun+0x14>
 800157e:	46c0      	nop			@ (mov r8, r8)

08001580 <__aeabi_f2iz>:
 8001580:	0241      	lsls	r1, r0, #9
 8001582:	0042      	lsls	r2, r0, #1
 8001584:	0fc3      	lsrs	r3, r0, #31
 8001586:	0a49      	lsrs	r1, r1, #9
 8001588:	2000      	movs	r0, #0
 800158a:	0e12      	lsrs	r2, r2, #24
 800158c:	2a7e      	cmp	r2, #126	@ 0x7e
 800158e:	dd03      	ble.n	8001598 <__aeabi_f2iz+0x18>
 8001590:	2a9d      	cmp	r2, #157	@ 0x9d
 8001592:	dd02      	ble.n	800159a <__aeabi_f2iz+0x1a>
 8001594:	4a09      	ldr	r2, [pc, #36]	@ (80015bc <__aeabi_f2iz+0x3c>)
 8001596:	1898      	adds	r0, r3, r2
 8001598:	4770      	bx	lr
 800159a:	2080      	movs	r0, #128	@ 0x80
 800159c:	0400      	lsls	r0, r0, #16
 800159e:	4301      	orrs	r1, r0
 80015a0:	2a95      	cmp	r2, #149	@ 0x95
 80015a2:	dc07      	bgt.n	80015b4 <__aeabi_f2iz+0x34>
 80015a4:	2096      	movs	r0, #150	@ 0x96
 80015a6:	1a82      	subs	r2, r0, r2
 80015a8:	40d1      	lsrs	r1, r2
 80015aa:	4248      	negs	r0, r1
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d1f3      	bne.n	8001598 <__aeabi_f2iz+0x18>
 80015b0:	0008      	movs	r0, r1
 80015b2:	e7f1      	b.n	8001598 <__aeabi_f2iz+0x18>
 80015b4:	3a96      	subs	r2, #150	@ 0x96
 80015b6:	4091      	lsls	r1, r2
 80015b8:	e7f7      	b.n	80015aa <__aeabi_f2iz+0x2a>
 80015ba:	46c0      	nop			@ (mov r8, r8)
 80015bc:	7fffffff 	.word	0x7fffffff

080015c0 <__aeabi_i2f>:
 80015c0:	b570      	push	{r4, r5, r6, lr}
 80015c2:	2800      	cmp	r0, #0
 80015c4:	d013      	beq.n	80015ee <__aeabi_i2f+0x2e>
 80015c6:	17c3      	asrs	r3, r0, #31
 80015c8:	18c5      	adds	r5, r0, r3
 80015ca:	405d      	eors	r5, r3
 80015cc:	0fc4      	lsrs	r4, r0, #31
 80015ce:	0028      	movs	r0, r5
 80015d0:	f002 f80c 	bl	80035ec <__clzsi2>
 80015d4:	239e      	movs	r3, #158	@ 0x9e
 80015d6:	0001      	movs	r1, r0
 80015d8:	1a1b      	subs	r3, r3, r0
 80015da:	2b96      	cmp	r3, #150	@ 0x96
 80015dc:	dc0f      	bgt.n	80015fe <__aeabi_i2f+0x3e>
 80015de:	2808      	cmp	r0, #8
 80015e0:	d034      	beq.n	800164c <__aeabi_i2f+0x8c>
 80015e2:	3908      	subs	r1, #8
 80015e4:	408d      	lsls	r5, r1
 80015e6:	026d      	lsls	r5, r5, #9
 80015e8:	0a6d      	lsrs	r5, r5, #9
 80015ea:	b2d8      	uxtb	r0, r3
 80015ec:	e002      	b.n	80015f4 <__aeabi_i2f+0x34>
 80015ee:	2400      	movs	r4, #0
 80015f0:	2000      	movs	r0, #0
 80015f2:	2500      	movs	r5, #0
 80015f4:	05c0      	lsls	r0, r0, #23
 80015f6:	4328      	orrs	r0, r5
 80015f8:	07e4      	lsls	r4, r4, #31
 80015fa:	4320      	orrs	r0, r4
 80015fc:	bd70      	pop	{r4, r5, r6, pc}
 80015fe:	2b99      	cmp	r3, #153	@ 0x99
 8001600:	dc16      	bgt.n	8001630 <__aeabi_i2f+0x70>
 8001602:	1f42      	subs	r2, r0, #5
 8001604:	2805      	cmp	r0, #5
 8001606:	d000      	beq.n	800160a <__aeabi_i2f+0x4a>
 8001608:	4095      	lsls	r5, r2
 800160a:	002a      	movs	r2, r5
 800160c:	4811      	ldr	r0, [pc, #68]	@ (8001654 <__aeabi_i2f+0x94>)
 800160e:	4002      	ands	r2, r0
 8001610:	076e      	lsls	r6, r5, #29
 8001612:	d009      	beq.n	8001628 <__aeabi_i2f+0x68>
 8001614:	260f      	movs	r6, #15
 8001616:	4035      	ands	r5, r6
 8001618:	2d04      	cmp	r5, #4
 800161a:	d005      	beq.n	8001628 <__aeabi_i2f+0x68>
 800161c:	3204      	adds	r2, #4
 800161e:	0155      	lsls	r5, r2, #5
 8001620:	d502      	bpl.n	8001628 <__aeabi_i2f+0x68>
 8001622:	239f      	movs	r3, #159	@ 0x9f
 8001624:	4002      	ands	r2, r0
 8001626:	1a5b      	subs	r3, r3, r1
 8001628:	0192      	lsls	r2, r2, #6
 800162a:	0a55      	lsrs	r5, r2, #9
 800162c:	b2d8      	uxtb	r0, r3
 800162e:	e7e1      	b.n	80015f4 <__aeabi_i2f+0x34>
 8001630:	2205      	movs	r2, #5
 8001632:	1a12      	subs	r2, r2, r0
 8001634:	0028      	movs	r0, r5
 8001636:	40d0      	lsrs	r0, r2
 8001638:	0002      	movs	r2, r0
 800163a:	0008      	movs	r0, r1
 800163c:	301b      	adds	r0, #27
 800163e:	4085      	lsls	r5, r0
 8001640:	0028      	movs	r0, r5
 8001642:	1e45      	subs	r5, r0, #1
 8001644:	41a8      	sbcs	r0, r5
 8001646:	4302      	orrs	r2, r0
 8001648:	0015      	movs	r5, r2
 800164a:	e7de      	b.n	800160a <__aeabi_i2f+0x4a>
 800164c:	026d      	lsls	r5, r5, #9
 800164e:	2096      	movs	r0, #150	@ 0x96
 8001650:	0a6d      	lsrs	r5, r5, #9
 8001652:	e7cf      	b.n	80015f4 <__aeabi_i2f+0x34>
 8001654:	fbffffff 	.word	0xfbffffff

08001658 <__aeabi_ui2f>:
 8001658:	b570      	push	{r4, r5, r6, lr}
 800165a:	1e04      	subs	r4, r0, #0
 800165c:	d00e      	beq.n	800167c <__aeabi_ui2f+0x24>
 800165e:	f001 ffc5 	bl	80035ec <__clzsi2>
 8001662:	239e      	movs	r3, #158	@ 0x9e
 8001664:	0001      	movs	r1, r0
 8001666:	1a1b      	subs	r3, r3, r0
 8001668:	2b96      	cmp	r3, #150	@ 0x96
 800166a:	dc0c      	bgt.n	8001686 <__aeabi_ui2f+0x2e>
 800166c:	2808      	cmp	r0, #8
 800166e:	d02f      	beq.n	80016d0 <__aeabi_ui2f+0x78>
 8001670:	3908      	subs	r1, #8
 8001672:	408c      	lsls	r4, r1
 8001674:	0264      	lsls	r4, r4, #9
 8001676:	0a64      	lsrs	r4, r4, #9
 8001678:	b2d8      	uxtb	r0, r3
 800167a:	e001      	b.n	8001680 <__aeabi_ui2f+0x28>
 800167c:	2000      	movs	r0, #0
 800167e:	2400      	movs	r4, #0
 8001680:	05c0      	lsls	r0, r0, #23
 8001682:	4320      	orrs	r0, r4
 8001684:	bd70      	pop	{r4, r5, r6, pc}
 8001686:	2b99      	cmp	r3, #153	@ 0x99
 8001688:	dc16      	bgt.n	80016b8 <__aeabi_ui2f+0x60>
 800168a:	1f42      	subs	r2, r0, #5
 800168c:	2805      	cmp	r0, #5
 800168e:	d000      	beq.n	8001692 <__aeabi_ui2f+0x3a>
 8001690:	4094      	lsls	r4, r2
 8001692:	0022      	movs	r2, r4
 8001694:	4810      	ldr	r0, [pc, #64]	@ (80016d8 <__aeabi_ui2f+0x80>)
 8001696:	4002      	ands	r2, r0
 8001698:	0765      	lsls	r5, r4, #29
 800169a:	d009      	beq.n	80016b0 <__aeabi_ui2f+0x58>
 800169c:	250f      	movs	r5, #15
 800169e:	402c      	ands	r4, r5
 80016a0:	2c04      	cmp	r4, #4
 80016a2:	d005      	beq.n	80016b0 <__aeabi_ui2f+0x58>
 80016a4:	3204      	adds	r2, #4
 80016a6:	0154      	lsls	r4, r2, #5
 80016a8:	d502      	bpl.n	80016b0 <__aeabi_ui2f+0x58>
 80016aa:	239f      	movs	r3, #159	@ 0x9f
 80016ac:	4002      	ands	r2, r0
 80016ae:	1a5b      	subs	r3, r3, r1
 80016b0:	0192      	lsls	r2, r2, #6
 80016b2:	0a54      	lsrs	r4, r2, #9
 80016b4:	b2d8      	uxtb	r0, r3
 80016b6:	e7e3      	b.n	8001680 <__aeabi_ui2f+0x28>
 80016b8:	0002      	movs	r2, r0
 80016ba:	0020      	movs	r0, r4
 80016bc:	321b      	adds	r2, #27
 80016be:	4090      	lsls	r0, r2
 80016c0:	0002      	movs	r2, r0
 80016c2:	1e50      	subs	r0, r2, #1
 80016c4:	4182      	sbcs	r2, r0
 80016c6:	2005      	movs	r0, #5
 80016c8:	1a40      	subs	r0, r0, r1
 80016ca:	40c4      	lsrs	r4, r0
 80016cc:	4314      	orrs	r4, r2
 80016ce:	e7e0      	b.n	8001692 <__aeabi_ui2f+0x3a>
 80016d0:	0264      	lsls	r4, r4, #9
 80016d2:	2096      	movs	r0, #150	@ 0x96
 80016d4:	0a64      	lsrs	r4, r4, #9
 80016d6:	e7d3      	b.n	8001680 <__aeabi_ui2f+0x28>
 80016d8:	fbffffff 	.word	0xfbffffff

080016dc <__aeabi_dadd>:
 80016dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016de:	4657      	mov	r7, sl
 80016e0:	464e      	mov	r6, r9
 80016e2:	4645      	mov	r5, r8
 80016e4:	46de      	mov	lr, fp
 80016e6:	b5e0      	push	{r5, r6, r7, lr}
 80016e8:	b083      	sub	sp, #12
 80016ea:	9000      	str	r0, [sp, #0]
 80016ec:	9101      	str	r1, [sp, #4]
 80016ee:	030c      	lsls	r4, r1, #12
 80016f0:	004f      	lsls	r7, r1, #1
 80016f2:	0fce      	lsrs	r6, r1, #31
 80016f4:	0a61      	lsrs	r1, r4, #9
 80016f6:	9c00      	ldr	r4, [sp, #0]
 80016f8:	031d      	lsls	r5, r3, #12
 80016fa:	0f64      	lsrs	r4, r4, #29
 80016fc:	430c      	orrs	r4, r1
 80016fe:	9900      	ldr	r1, [sp, #0]
 8001700:	9200      	str	r2, [sp, #0]
 8001702:	9301      	str	r3, [sp, #4]
 8001704:	00c8      	lsls	r0, r1, #3
 8001706:	0059      	lsls	r1, r3, #1
 8001708:	0d4b      	lsrs	r3, r1, #21
 800170a:	4699      	mov	r9, r3
 800170c:	9a00      	ldr	r2, [sp, #0]
 800170e:	9b01      	ldr	r3, [sp, #4]
 8001710:	0a6d      	lsrs	r5, r5, #9
 8001712:	0fd9      	lsrs	r1, r3, #31
 8001714:	0f53      	lsrs	r3, r2, #29
 8001716:	432b      	orrs	r3, r5
 8001718:	469a      	mov	sl, r3
 800171a:	9b00      	ldr	r3, [sp, #0]
 800171c:	0d7f      	lsrs	r7, r7, #21
 800171e:	00da      	lsls	r2, r3, #3
 8001720:	4694      	mov	ip, r2
 8001722:	464a      	mov	r2, r9
 8001724:	46b0      	mov	r8, r6
 8001726:	1aba      	subs	r2, r7, r2
 8001728:	428e      	cmp	r6, r1
 800172a:	d100      	bne.n	800172e <__aeabi_dadd+0x52>
 800172c:	e0b0      	b.n	8001890 <__aeabi_dadd+0x1b4>
 800172e:	2a00      	cmp	r2, #0
 8001730:	dc00      	bgt.n	8001734 <__aeabi_dadd+0x58>
 8001732:	e078      	b.n	8001826 <__aeabi_dadd+0x14a>
 8001734:	4649      	mov	r1, r9
 8001736:	2900      	cmp	r1, #0
 8001738:	d100      	bne.n	800173c <__aeabi_dadd+0x60>
 800173a:	e0e9      	b.n	8001910 <__aeabi_dadd+0x234>
 800173c:	49c9      	ldr	r1, [pc, #804]	@ (8001a64 <__aeabi_dadd+0x388>)
 800173e:	428f      	cmp	r7, r1
 8001740:	d100      	bne.n	8001744 <__aeabi_dadd+0x68>
 8001742:	e195      	b.n	8001a70 <__aeabi_dadd+0x394>
 8001744:	2501      	movs	r5, #1
 8001746:	2a38      	cmp	r2, #56	@ 0x38
 8001748:	dc16      	bgt.n	8001778 <__aeabi_dadd+0x9c>
 800174a:	2180      	movs	r1, #128	@ 0x80
 800174c:	4653      	mov	r3, sl
 800174e:	0409      	lsls	r1, r1, #16
 8001750:	430b      	orrs	r3, r1
 8001752:	469a      	mov	sl, r3
 8001754:	2a1f      	cmp	r2, #31
 8001756:	dd00      	ble.n	800175a <__aeabi_dadd+0x7e>
 8001758:	e1e7      	b.n	8001b2a <__aeabi_dadd+0x44e>
 800175a:	2120      	movs	r1, #32
 800175c:	4655      	mov	r5, sl
 800175e:	1a8b      	subs	r3, r1, r2
 8001760:	4661      	mov	r1, ip
 8001762:	409d      	lsls	r5, r3
 8001764:	40d1      	lsrs	r1, r2
 8001766:	430d      	orrs	r5, r1
 8001768:	4661      	mov	r1, ip
 800176a:	4099      	lsls	r1, r3
 800176c:	1e4b      	subs	r3, r1, #1
 800176e:	4199      	sbcs	r1, r3
 8001770:	4653      	mov	r3, sl
 8001772:	40d3      	lsrs	r3, r2
 8001774:	430d      	orrs	r5, r1
 8001776:	1ae4      	subs	r4, r4, r3
 8001778:	1b45      	subs	r5, r0, r5
 800177a:	42a8      	cmp	r0, r5
 800177c:	4180      	sbcs	r0, r0
 800177e:	4240      	negs	r0, r0
 8001780:	1a24      	subs	r4, r4, r0
 8001782:	0223      	lsls	r3, r4, #8
 8001784:	d400      	bmi.n	8001788 <__aeabi_dadd+0xac>
 8001786:	e10f      	b.n	80019a8 <__aeabi_dadd+0x2cc>
 8001788:	0264      	lsls	r4, r4, #9
 800178a:	0a64      	lsrs	r4, r4, #9
 800178c:	2c00      	cmp	r4, #0
 800178e:	d100      	bne.n	8001792 <__aeabi_dadd+0xb6>
 8001790:	e139      	b.n	8001a06 <__aeabi_dadd+0x32a>
 8001792:	0020      	movs	r0, r4
 8001794:	f001 ff2a 	bl	80035ec <__clzsi2>
 8001798:	0003      	movs	r3, r0
 800179a:	3b08      	subs	r3, #8
 800179c:	2120      	movs	r1, #32
 800179e:	0028      	movs	r0, r5
 80017a0:	1aca      	subs	r2, r1, r3
 80017a2:	40d0      	lsrs	r0, r2
 80017a4:	409c      	lsls	r4, r3
 80017a6:	0002      	movs	r2, r0
 80017a8:	409d      	lsls	r5, r3
 80017aa:	4322      	orrs	r2, r4
 80017ac:	429f      	cmp	r7, r3
 80017ae:	dd00      	ble.n	80017b2 <__aeabi_dadd+0xd6>
 80017b0:	e173      	b.n	8001a9a <__aeabi_dadd+0x3be>
 80017b2:	1bd8      	subs	r0, r3, r7
 80017b4:	3001      	adds	r0, #1
 80017b6:	1a09      	subs	r1, r1, r0
 80017b8:	002c      	movs	r4, r5
 80017ba:	408d      	lsls	r5, r1
 80017bc:	40c4      	lsrs	r4, r0
 80017be:	1e6b      	subs	r3, r5, #1
 80017c0:	419d      	sbcs	r5, r3
 80017c2:	0013      	movs	r3, r2
 80017c4:	40c2      	lsrs	r2, r0
 80017c6:	408b      	lsls	r3, r1
 80017c8:	4325      	orrs	r5, r4
 80017ca:	2700      	movs	r7, #0
 80017cc:	0014      	movs	r4, r2
 80017ce:	431d      	orrs	r5, r3
 80017d0:	076b      	lsls	r3, r5, #29
 80017d2:	d009      	beq.n	80017e8 <__aeabi_dadd+0x10c>
 80017d4:	230f      	movs	r3, #15
 80017d6:	402b      	ands	r3, r5
 80017d8:	2b04      	cmp	r3, #4
 80017da:	d005      	beq.n	80017e8 <__aeabi_dadd+0x10c>
 80017dc:	1d2b      	adds	r3, r5, #4
 80017de:	42ab      	cmp	r3, r5
 80017e0:	41ad      	sbcs	r5, r5
 80017e2:	426d      	negs	r5, r5
 80017e4:	1964      	adds	r4, r4, r5
 80017e6:	001d      	movs	r5, r3
 80017e8:	0223      	lsls	r3, r4, #8
 80017ea:	d400      	bmi.n	80017ee <__aeabi_dadd+0x112>
 80017ec:	e12d      	b.n	8001a4a <__aeabi_dadd+0x36e>
 80017ee:	4a9d      	ldr	r2, [pc, #628]	@ (8001a64 <__aeabi_dadd+0x388>)
 80017f0:	3701      	adds	r7, #1
 80017f2:	4297      	cmp	r7, r2
 80017f4:	d100      	bne.n	80017f8 <__aeabi_dadd+0x11c>
 80017f6:	e0d3      	b.n	80019a0 <__aeabi_dadd+0x2c4>
 80017f8:	4646      	mov	r6, r8
 80017fa:	499b      	ldr	r1, [pc, #620]	@ (8001a68 <__aeabi_dadd+0x38c>)
 80017fc:	08ed      	lsrs	r5, r5, #3
 80017fe:	4021      	ands	r1, r4
 8001800:	074a      	lsls	r2, r1, #29
 8001802:	432a      	orrs	r2, r5
 8001804:	057c      	lsls	r4, r7, #21
 8001806:	024d      	lsls	r5, r1, #9
 8001808:	0b2d      	lsrs	r5, r5, #12
 800180a:	0d64      	lsrs	r4, r4, #21
 800180c:	0524      	lsls	r4, r4, #20
 800180e:	432c      	orrs	r4, r5
 8001810:	07f6      	lsls	r6, r6, #31
 8001812:	4334      	orrs	r4, r6
 8001814:	0010      	movs	r0, r2
 8001816:	0021      	movs	r1, r4
 8001818:	b003      	add	sp, #12
 800181a:	bcf0      	pop	{r4, r5, r6, r7}
 800181c:	46bb      	mov	fp, r7
 800181e:	46b2      	mov	sl, r6
 8001820:	46a9      	mov	r9, r5
 8001822:	46a0      	mov	r8, r4
 8001824:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001826:	2a00      	cmp	r2, #0
 8001828:	d100      	bne.n	800182c <__aeabi_dadd+0x150>
 800182a:	e084      	b.n	8001936 <__aeabi_dadd+0x25a>
 800182c:	464a      	mov	r2, r9
 800182e:	1bd2      	subs	r2, r2, r7
 8001830:	2f00      	cmp	r7, #0
 8001832:	d000      	beq.n	8001836 <__aeabi_dadd+0x15a>
 8001834:	e16d      	b.n	8001b12 <__aeabi_dadd+0x436>
 8001836:	0025      	movs	r5, r4
 8001838:	4305      	orrs	r5, r0
 800183a:	d100      	bne.n	800183e <__aeabi_dadd+0x162>
 800183c:	e127      	b.n	8001a8e <__aeabi_dadd+0x3b2>
 800183e:	1e56      	subs	r6, r2, #1
 8001840:	2a01      	cmp	r2, #1
 8001842:	d100      	bne.n	8001846 <__aeabi_dadd+0x16a>
 8001844:	e23b      	b.n	8001cbe <__aeabi_dadd+0x5e2>
 8001846:	4d87      	ldr	r5, [pc, #540]	@ (8001a64 <__aeabi_dadd+0x388>)
 8001848:	42aa      	cmp	r2, r5
 800184a:	d100      	bne.n	800184e <__aeabi_dadd+0x172>
 800184c:	e26a      	b.n	8001d24 <__aeabi_dadd+0x648>
 800184e:	2501      	movs	r5, #1
 8001850:	2e38      	cmp	r6, #56	@ 0x38
 8001852:	dc12      	bgt.n	800187a <__aeabi_dadd+0x19e>
 8001854:	0032      	movs	r2, r6
 8001856:	2a1f      	cmp	r2, #31
 8001858:	dd00      	ble.n	800185c <__aeabi_dadd+0x180>
 800185a:	e1f8      	b.n	8001c4e <__aeabi_dadd+0x572>
 800185c:	2620      	movs	r6, #32
 800185e:	0025      	movs	r5, r4
 8001860:	1ab6      	subs	r6, r6, r2
 8001862:	0007      	movs	r7, r0
 8001864:	4653      	mov	r3, sl
 8001866:	40b0      	lsls	r0, r6
 8001868:	40d4      	lsrs	r4, r2
 800186a:	40b5      	lsls	r5, r6
 800186c:	40d7      	lsrs	r7, r2
 800186e:	1e46      	subs	r6, r0, #1
 8001870:	41b0      	sbcs	r0, r6
 8001872:	1b1b      	subs	r3, r3, r4
 8001874:	469a      	mov	sl, r3
 8001876:	433d      	orrs	r5, r7
 8001878:	4305      	orrs	r5, r0
 800187a:	4662      	mov	r2, ip
 800187c:	1b55      	subs	r5, r2, r5
 800187e:	45ac      	cmp	ip, r5
 8001880:	4192      	sbcs	r2, r2
 8001882:	4653      	mov	r3, sl
 8001884:	4252      	negs	r2, r2
 8001886:	000e      	movs	r6, r1
 8001888:	464f      	mov	r7, r9
 800188a:	4688      	mov	r8, r1
 800188c:	1a9c      	subs	r4, r3, r2
 800188e:	e778      	b.n	8001782 <__aeabi_dadd+0xa6>
 8001890:	2a00      	cmp	r2, #0
 8001892:	dc00      	bgt.n	8001896 <__aeabi_dadd+0x1ba>
 8001894:	e08e      	b.n	80019b4 <__aeabi_dadd+0x2d8>
 8001896:	4649      	mov	r1, r9
 8001898:	2900      	cmp	r1, #0
 800189a:	d175      	bne.n	8001988 <__aeabi_dadd+0x2ac>
 800189c:	4661      	mov	r1, ip
 800189e:	4653      	mov	r3, sl
 80018a0:	4319      	orrs	r1, r3
 80018a2:	d100      	bne.n	80018a6 <__aeabi_dadd+0x1ca>
 80018a4:	e0f6      	b.n	8001a94 <__aeabi_dadd+0x3b8>
 80018a6:	1e51      	subs	r1, r2, #1
 80018a8:	2a01      	cmp	r2, #1
 80018aa:	d100      	bne.n	80018ae <__aeabi_dadd+0x1d2>
 80018ac:	e191      	b.n	8001bd2 <__aeabi_dadd+0x4f6>
 80018ae:	4d6d      	ldr	r5, [pc, #436]	@ (8001a64 <__aeabi_dadd+0x388>)
 80018b0:	42aa      	cmp	r2, r5
 80018b2:	d100      	bne.n	80018b6 <__aeabi_dadd+0x1da>
 80018b4:	e0dc      	b.n	8001a70 <__aeabi_dadd+0x394>
 80018b6:	2501      	movs	r5, #1
 80018b8:	2938      	cmp	r1, #56	@ 0x38
 80018ba:	dc14      	bgt.n	80018e6 <__aeabi_dadd+0x20a>
 80018bc:	000a      	movs	r2, r1
 80018be:	2a1f      	cmp	r2, #31
 80018c0:	dd00      	ble.n	80018c4 <__aeabi_dadd+0x1e8>
 80018c2:	e1a2      	b.n	8001c0a <__aeabi_dadd+0x52e>
 80018c4:	2120      	movs	r1, #32
 80018c6:	4653      	mov	r3, sl
 80018c8:	1a89      	subs	r1, r1, r2
 80018ca:	408b      	lsls	r3, r1
 80018cc:	001d      	movs	r5, r3
 80018ce:	4663      	mov	r3, ip
 80018d0:	40d3      	lsrs	r3, r2
 80018d2:	431d      	orrs	r5, r3
 80018d4:	4663      	mov	r3, ip
 80018d6:	408b      	lsls	r3, r1
 80018d8:	0019      	movs	r1, r3
 80018da:	1e4b      	subs	r3, r1, #1
 80018dc:	4199      	sbcs	r1, r3
 80018de:	4653      	mov	r3, sl
 80018e0:	40d3      	lsrs	r3, r2
 80018e2:	430d      	orrs	r5, r1
 80018e4:	18e4      	adds	r4, r4, r3
 80018e6:	182d      	adds	r5, r5, r0
 80018e8:	4285      	cmp	r5, r0
 80018ea:	4180      	sbcs	r0, r0
 80018ec:	4240      	negs	r0, r0
 80018ee:	1824      	adds	r4, r4, r0
 80018f0:	0223      	lsls	r3, r4, #8
 80018f2:	d559      	bpl.n	80019a8 <__aeabi_dadd+0x2cc>
 80018f4:	4b5b      	ldr	r3, [pc, #364]	@ (8001a64 <__aeabi_dadd+0x388>)
 80018f6:	3701      	adds	r7, #1
 80018f8:	429f      	cmp	r7, r3
 80018fa:	d051      	beq.n	80019a0 <__aeabi_dadd+0x2c4>
 80018fc:	2101      	movs	r1, #1
 80018fe:	4b5a      	ldr	r3, [pc, #360]	@ (8001a68 <__aeabi_dadd+0x38c>)
 8001900:	086a      	lsrs	r2, r5, #1
 8001902:	401c      	ands	r4, r3
 8001904:	4029      	ands	r1, r5
 8001906:	430a      	orrs	r2, r1
 8001908:	07e5      	lsls	r5, r4, #31
 800190a:	4315      	orrs	r5, r2
 800190c:	0864      	lsrs	r4, r4, #1
 800190e:	e75f      	b.n	80017d0 <__aeabi_dadd+0xf4>
 8001910:	4661      	mov	r1, ip
 8001912:	4653      	mov	r3, sl
 8001914:	4319      	orrs	r1, r3
 8001916:	d100      	bne.n	800191a <__aeabi_dadd+0x23e>
 8001918:	e0bc      	b.n	8001a94 <__aeabi_dadd+0x3b8>
 800191a:	1e51      	subs	r1, r2, #1
 800191c:	2a01      	cmp	r2, #1
 800191e:	d100      	bne.n	8001922 <__aeabi_dadd+0x246>
 8001920:	e164      	b.n	8001bec <__aeabi_dadd+0x510>
 8001922:	4d50      	ldr	r5, [pc, #320]	@ (8001a64 <__aeabi_dadd+0x388>)
 8001924:	42aa      	cmp	r2, r5
 8001926:	d100      	bne.n	800192a <__aeabi_dadd+0x24e>
 8001928:	e16a      	b.n	8001c00 <__aeabi_dadd+0x524>
 800192a:	2501      	movs	r5, #1
 800192c:	2938      	cmp	r1, #56	@ 0x38
 800192e:	dd00      	ble.n	8001932 <__aeabi_dadd+0x256>
 8001930:	e722      	b.n	8001778 <__aeabi_dadd+0x9c>
 8001932:	000a      	movs	r2, r1
 8001934:	e70e      	b.n	8001754 <__aeabi_dadd+0x78>
 8001936:	4a4d      	ldr	r2, [pc, #308]	@ (8001a6c <__aeabi_dadd+0x390>)
 8001938:	1c7d      	adds	r5, r7, #1
 800193a:	4215      	tst	r5, r2
 800193c:	d000      	beq.n	8001940 <__aeabi_dadd+0x264>
 800193e:	e0d0      	b.n	8001ae2 <__aeabi_dadd+0x406>
 8001940:	0025      	movs	r5, r4
 8001942:	4662      	mov	r2, ip
 8001944:	4653      	mov	r3, sl
 8001946:	4305      	orrs	r5, r0
 8001948:	431a      	orrs	r2, r3
 800194a:	2f00      	cmp	r7, #0
 800194c:	d000      	beq.n	8001950 <__aeabi_dadd+0x274>
 800194e:	e137      	b.n	8001bc0 <__aeabi_dadd+0x4e4>
 8001950:	2d00      	cmp	r5, #0
 8001952:	d100      	bne.n	8001956 <__aeabi_dadd+0x27a>
 8001954:	e1a8      	b.n	8001ca8 <__aeabi_dadd+0x5cc>
 8001956:	2a00      	cmp	r2, #0
 8001958:	d100      	bne.n	800195c <__aeabi_dadd+0x280>
 800195a:	e16a      	b.n	8001c32 <__aeabi_dadd+0x556>
 800195c:	4663      	mov	r3, ip
 800195e:	1ac5      	subs	r5, r0, r3
 8001960:	4653      	mov	r3, sl
 8001962:	1ae2      	subs	r2, r4, r3
 8001964:	42a8      	cmp	r0, r5
 8001966:	419b      	sbcs	r3, r3
 8001968:	425b      	negs	r3, r3
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	021a      	lsls	r2, r3, #8
 800196e:	d400      	bmi.n	8001972 <__aeabi_dadd+0x296>
 8001970:	e203      	b.n	8001d7a <__aeabi_dadd+0x69e>
 8001972:	4663      	mov	r3, ip
 8001974:	1a1d      	subs	r5, r3, r0
 8001976:	45ac      	cmp	ip, r5
 8001978:	4192      	sbcs	r2, r2
 800197a:	4653      	mov	r3, sl
 800197c:	4252      	negs	r2, r2
 800197e:	1b1c      	subs	r4, r3, r4
 8001980:	000e      	movs	r6, r1
 8001982:	4688      	mov	r8, r1
 8001984:	1aa4      	subs	r4, r4, r2
 8001986:	e723      	b.n	80017d0 <__aeabi_dadd+0xf4>
 8001988:	4936      	ldr	r1, [pc, #216]	@ (8001a64 <__aeabi_dadd+0x388>)
 800198a:	428f      	cmp	r7, r1
 800198c:	d070      	beq.n	8001a70 <__aeabi_dadd+0x394>
 800198e:	2501      	movs	r5, #1
 8001990:	2a38      	cmp	r2, #56	@ 0x38
 8001992:	dca8      	bgt.n	80018e6 <__aeabi_dadd+0x20a>
 8001994:	2180      	movs	r1, #128	@ 0x80
 8001996:	4653      	mov	r3, sl
 8001998:	0409      	lsls	r1, r1, #16
 800199a:	430b      	orrs	r3, r1
 800199c:	469a      	mov	sl, r3
 800199e:	e78e      	b.n	80018be <__aeabi_dadd+0x1e2>
 80019a0:	003c      	movs	r4, r7
 80019a2:	2500      	movs	r5, #0
 80019a4:	2200      	movs	r2, #0
 80019a6:	e731      	b.n	800180c <__aeabi_dadd+0x130>
 80019a8:	2307      	movs	r3, #7
 80019aa:	402b      	ands	r3, r5
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d000      	beq.n	80019b2 <__aeabi_dadd+0x2d6>
 80019b0:	e710      	b.n	80017d4 <__aeabi_dadd+0xf8>
 80019b2:	e093      	b.n	8001adc <__aeabi_dadd+0x400>
 80019b4:	2a00      	cmp	r2, #0
 80019b6:	d074      	beq.n	8001aa2 <__aeabi_dadd+0x3c6>
 80019b8:	464a      	mov	r2, r9
 80019ba:	1bd2      	subs	r2, r2, r7
 80019bc:	2f00      	cmp	r7, #0
 80019be:	d100      	bne.n	80019c2 <__aeabi_dadd+0x2e6>
 80019c0:	e0c7      	b.n	8001b52 <__aeabi_dadd+0x476>
 80019c2:	4928      	ldr	r1, [pc, #160]	@ (8001a64 <__aeabi_dadd+0x388>)
 80019c4:	4589      	cmp	r9, r1
 80019c6:	d100      	bne.n	80019ca <__aeabi_dadd+0x2ee>
 80019c8:	e185      	b.n	8001cd6 <__aeabi_dadd+0x5fa>
 80019ca:	2501      	movs	r5, #1
 80019cc:	2a38      	cmp	r2, #56	@ 0x38
 80019ce:	dc12      	bgt.n	80019f6 <__aeabi_dadd+0x31a>
 80019d0:	2180      	movs	r1, #128	@ 0x80
 80019d2:	0409      	lsls	r1, r1, #16
 80019d4:	430c      	orrs	r4, r1
 80019d6:	2a1f      	cmp	r2, #31
 80019d8:	dd00      	ble.n	80019dc <__aeabi_dadd+0x300>
 80019da:	e1ab      	b.n	8001d34 <__aeabi_dadd+0x658>
 80019dc:	2120      	movs	r1, #32
 80019de:	0025      	movs	r5, r4
 80019e0:	1a89      	subs	r1, r1, r2
 80019e2:	0007      	movs	r7, r0
 80019e4:	4088      	lsls	r0, r1
 80019e6:	408d      	lsls	r5, r1
 80019e8:	40d7      	lsrs	r7, r2
 80019ea:	1e41      	subs	r1, r0, #1
 80019ec:	4188      	sbcs	r0, r1
 80019ee:	40d4      	lsrs	r4, r2
 80019f0:	433d      	orrs	r5, r7
 80019f2:	4305      	orrs	r5, r0
 80019f4:	44a2      	add	sl, r4
 80019f6:	4465      	add	r5, ip
 80019f8:	4565      	cmp	r5, ip
 80019fa:	4192      	sbcs	r2, r2
 80019fc:	4252      	negs	r2, r2
 80019fe:	4452      	add	r2, sl
 8001a00:	0014      	movs	r4, r2
 8001a02:	464f      	mov	r7, r9
 8001a04:	e774      	b.n	80018f0 <__aeabi_dadd+0x214>
 8001a06:	0028      	movs	r0, r5
 8001a08:	f001 fdf0 	bl	80035ec <__clzsi2>
 8001a0c:	0003      	movs	r3, r0
 8001a0e:	3318      	adds	r3, #24
 8001a10:	2b1f      	cmp	r3, #31
 8001a12:	dc00      	bgt.n	8001a16 <__aeabi_dadd+0x33a>
 8001a14:	e6c2      	b.n	800179c <__aeabi_dadd+0xc0>
 8001a16:	002a      	movs	r2, r5
 8001a18:	3808      	subs	r0, #8
 8001a1a:	4082      	lsls	r2, r0
 8001a1c:	429f      	cmp	r7, r3
 8001a1e:	dd00      	ble.n	8001a22 <__aeabi_dadd+0x346>
 8001a20:	e0a9      	b.n	8001b76 <__aeabi_dadd+0x49a>
 8001a22:	1bdb      	subs	r3, r3, r7
 8001a24:	1c58      	adds	r0, r3, #1
 8001a26:	281f      	cmp	r0, #31
 8001a28:	dc00      	bgt.n	8001a2c <__aeabi_dadd+0x350>
 8001a2a:	e1ac      	b.n	8001d86 <__aeabi_dadd+0x6aa>
 8001a2c:	0015      	movs	r5, r2
 8001a2e:	3b1f      	subs	r3, #31
 8001a30:	40dd      	lsrs	r5, r3
 8001a32:	2820      	cmp	r0, #32
 8001a34:	d005      	beq.n	8001a42 <__aeabi_dadd+0x366>
 8001a36:	2340      	movs	r3, #64	@ 0x40
 8001a38:	1a1b      	subs	r3, r3, r0
 8001a3a:	409a      	lsls	r2, r3
 8001a3c:	1e53      	subs	r3, r2, #1
 8001a3e:	419a      	sbcs	r2, r3
 8001a40:	4315      	orrs	r5, r2
 8001a42:	2307      	movs	r3, #7
 8001a44:	2700      	movs	r7, #0
 8001a46:	402b      	ands	r3, r5
 8001a48:	e7b0      	b.n	80019ac <__aeabi_dadd+0x2d0>
 8001a4a:	08ed      	lsrs	r5, r5, #3
 8001a4c:	4b05      	ldr	r3, [pc, #20]	@ (8001a64 <__aeabi_dadd+0x388>)
 8001a4e:	0762      	lsls	r2, r4, #29
 8001a50:	432a      	orrs	r2, r5
 8001a52:	08e4      	lsrs	r4, r4, #3
 8001a54:	429f      	cmp	r7, r3
 8001a56:	d00f      	beq.n	8001a78 <__aeabi_dadd+0x39c>
 8001a58:	0324      	lsls	r4, r4, #12
 8001a5a:	0b25      	lsrs	r5, r4, #12
 8001a5c:	057c      	lsls	r4, r7, #21
 8001a5e:	0d64      	lsrs	r4, r4, #21
 8001a60:	e6d4      	b.n	800180c <__aeabi_dadd+0x130>
 8001a62:	46c0      	nop			@ (mov r8, r8)
 8001a64:	000007ff 	.word	0x000007ff
 8001a68:	ff7fffff 	.word	0xff7fffff
 8001a6c:	000007fe 	.word	0x000007fe
 8001a70:	08c0      	lsrs	r0, r0, #3
 8001a72:	0762      	lsls	r2, r4, #29
 8001a74:	4302      	orrs	r2, r0
 8001a76:	08e4      	lsrs	r4, r4, #3
 8001a78:	0013      	movs	r3, r2
 8001a7a:	4323      	orrs	r3, r4
 8001a7c:	d100      	bne.n	8001a80 <__aeabi_dadd+0x3a4>
 8001a7e:	e186      	b.n	8001d8e <__aeabi_dadd+0x6b2>
 8001a80:	2580      	movs	r5, #128	@ 0x80
 8001a82:	032d      	lsls	r5, r5, #12
 8001a84:	4325      	orrs	r5, r4
 8001a86:	032d      	lsls	r5, r5, #12
 8001a88:	4cc3      	ldr	r4, [pc, #780]	@ (8001d98 <__aeabi_dadd+0x6bc>)
 8001a8a:	0b2d      	lsrs	r5, r5, #12
 8001a8c:	e6be      	b.n	800180c <__aeabi_dadd+0x130>
 8001a8e:	4660      	mov	r0, ip
 8001a90:	4654      	mov	r4, sl
 8001a92:	000e      	movs	r6, r1
 8001a94:	0017      	movs	r7, r2
 8001a96:	08c5      	lsrs	r5, r0, #3
 8001a98:	e7d8      	b.n	8001a4c <__aeabi_dadd+0x370>
 8001a9a:	4cc0      	ldr	r4, [pc, #768]	@ (8001d9c <__aeabi_dadd+0x6c0>)
 8001a9c:	1aff      	subs	r7, r7, r3
 8001a9e:	4014      	ands	r4, r2
 8001aa0:	e696      	b.n	80017d0 <__aeabi_dadd+0xf4>
 8001aa2:	4abf      	ldr	r2, [pc, #764]	@ (8001da0 <__aeabi_dadd+0x6c4>)
 8001aa4:	1c79      	adds	r1, r7, #1
 8001aa6:	4211      	tst	r1, r2
 8001aa8:	d16b      	bne.n	8001b82 <__aeabi_dadd+0x4a6>
 8001aaa:	0022      	movs	r2, r4
 8001aac:	4302      	orrs	r2, r0
 8001aae:	2f00      	cmp	r7, #0
 8001ab0:	d000      	beq.n	8001ab4 <__aeabi_dadd+0x3d8>
 8001ab2:	e0db      	b.n	8001c6c <__aeabi_dadd+0x590>
 8001ab4:	2a00      	cmp	r2, #0
 8001ab6:	d100      	bne.n	8001aba <__aeabi_dadd+0x3de>
 8001ab8:	e12d      	b.n	8001d16 <__aeabi_dadd+0x63a>
 8001aba:	4662      	mov	r2, ip
 8001abc:	4653      	mov	r3, sl
 8001abe:	431a      	orrs	r2, r3
 8001ac0:	d100      	bne.n	8001ac4 <__aeabi_dadd+0x3e8>
 8001ac2:	e0b6      	b.n	8001c32 <__aeabi_dadd+0x556>
 8001ac4:	4663      	mov	r3, ip
 8001ac6:	18c5      	adds	r5, r0, r3
 8001ac8:	4285      	cmp	r5, r0
 8001aca:	4180      	sbcs	r0, r0
 8001acc:	4454      	add	r4, sl
 8001ace:	4240      	negs	r0, r0
 8001ad0:	1824      	adds	r4, r4, r0
 8001ad2:	0223      	lsls	r3, r4, #8
 8001ad4:	d502      	bpl.n	8001adc <__aeabi_dadd+0x400>
 8001ad6:	000f      	movs	r7, r1
 8001ad8:	4bb0      	ldr	r3, [pc, #704]	@ (8001d9c <__aeabi_dadd+0x6c0>)
 8001ada:	401c      	ands	r4, r3
 8001adc:	003a      	movs	r2, r7
 8001ade:	0028      	movs	r0, r5
 8001ae0:	e7d8      	b.n	8001a94 <__aeabi_dadd+0x3b8>
 8001ae2:	4662      	mov	r2, ip
 8001ae4:	1a85      	subs	r5, r0, r2
 8001ae6:	42a8      	cmp	r0, r5
 8001ae8:	4192      	sbcs	r2, r2
 8001aea:	4653      	mov	r3, sl
 8001aec:	4252      	negs	r2, r2
 8001aee:	4691      	mov	r9, r2
 8001af0:	1ae3      	subs	r3, r4, r3
 8001af2:	001a      	movs	r2, r3
 8001af4:	464b      	mov	r3, r9
 8001af6:	1ad2      	subs	r2, r2, r3
 8001af8:	0013      	movs	r3, r2
 8001afa:	4691      	mov	r9, r2
 8001afc:	021a      	lsls	r2, r3, #8
 8001afe:	d454      	bmi.n	8001baa <__aeabi_dadd+0x4ce>
 8001b00:	464a      	mov	r2, r9
 8001b02:	464c      	mov	r4, r9
 8001b04:	432a      	orrs	r2, r5
 8001b06:	d000      	beq.n	8001b0a <__aeabi_dadd+0x42e>
 8001b08:	e640      	b.n	800178c <__aeabi_dadd+0xb0>
 8001b0a:	2600      	movs	r6, #0
 8001b0c:	2400      	movs	r4, #0
 8001b0e:	2500      	movs	r5, #0
 8001b10:	e67c      	b.n	800180c <__aeabi_dadd+0x130>
 8001b12:	4da1      	ldr	r5, [pc, #644]	@ (8001d98 <__aeabi_dadd+0x6bc>)
 8001b14:	45a9      	cmp	r9, r5
 8001b16:	d100      	bne.n	8001b1a <__aeabi_dadd+0x43e>
 8001b18:	e090      	b.n	8001c3c <__aeabi_dadd+0x560>
 8001b1a:	2501      	movs	r5, #1
 8001b1c:	2a38      	cmp	r2, #56	@ 0x38
 8001b1e:	dd00      	ble.n	8001b22 <__aeabi_dadd+0x446>
 8001b20:	e6ab      	b.n	800187a <__aeabi_dadd+0x19e>
 8001b22:	2580      	movs	r5, #128	@ 0x80
 8001b24:	042d      	lsls	r5, r5, #16
 8001b26:	432c      	orrs	r4, r5
 8001b28:	e695      	b.n	8001856 <__aeabi_dadd+0x17a>
 8001b2a:	0011      	movs	r1, r2
 8001b2c:	4655      	mov	r5, sl
 8001b2e:	3920      	subs	r1, #32
 8001b30:	40cd      	lsrs	r5, r1
 8001b32:	46a9      	mov	r9, r5
 8001b34:	2a20      	cmp	r2, #32
 8001b36:	d006      	beq.n	8001b46 <__aeabi_dadd+0x46a>
 8001b38:	2140      	movs	r1, #64	@ 0x40
 8001b3a:	4653      	mov	r3, sl
 8001b3c:	1a8a      	subs	r2, r1, r2
 8001b3e:	4093      	lsls	r3, r2
 8001b40:	4662      	mov	r2, ip
 8001b42:	431a      	orrs	r2, r3
 8001b44:	4694      	mov	ip, r2
 8001b46:	4665      	mov	r5, ip
 8001b48:	1e6b      	subs	r3, r5, #1
 8001b4a:	419d      	sbcs	r5, r3
 8001b4c:	464b      	mov	r3, r9
 8001b4e:	431d      	orrs	r5, r3
 8001b50:	e612      	b.n	8001778 <__aeabi_dadd+0x9c>
 8001b52:	0021      	movs	r1, r4
 8001b54:	4301      	orrs	r1, r0
 8001b56:	d100      	bne.n	8001b5a <__aeabi_dadd+0x47e>
 8001b58:	e0c4      	b.n	8001ce4 <__aeabi_dadd+0x608>
 8001b5a:	1e51      	subs	r1, r2, #1
 8001b5c:	2a01      	cmp	r2, #1
 8001b5e:	d100      	bne.n	8001b62 <__aeabi_dadd+0x486>
 8001b60:	e0fb      	b.n	8001d5a <__aeabi_dadd+0x67e>
 8001b62:	4d8d      	ldr	r5, [pc, #564]	@ (8001d98 <__aeabi_dadd+0x6bc>)
 8001b64:	42aa      	cmp	r2, r5
 8001b66:	d100      	bne.n	8001b6a <__aeabi_dadd+0x48e>
 8001b68:	e0b5      	b.n	8001cd6 <__aeabi_dadd+0x5fa>
 8001b6a:	2501      	movs	r5, #1
 8001b6c:	2938      	cmp	r1, #56	@ 0x38
 8001b6e:	dd00      	ble.n	8001b72 <__aeabi_dadd+0x496>
 8001b70:	e741      	b.n	80019f6 <__aeabi_dadd+0x31a>
 8001b72:	000a      	movs	r2, r1
 8001b74:	e72f      	b.n	80019d6 <__aeabi_dadd+0x2fa>
 8001b76:	4c89      	ldr	r4, [pc, #548]	@ (8001d9c <__aeabi_dadd+0x6c0>)
 8001b78:	1aff      	subs	r7, r7, r3
 8001b7a:	4014      	ands	r4, r2
 8001b7c:	0762      	lsls	r2, r4, #29
 8001b7e:	08e4      	lsrs	r4, r4, #3
 8001b80:	e76a      	b.n	8001a58 <__aeabi_dadd+0x37c>
 8001b82:	4a85      	ldr	r2, [pc, #532]	@ (8001d98 <__aeabi_dadd+0x6bc>)
 8001b84:	4291      	cmp	r1, r2
 8001b86:	d100      	bne.n	8001b8a <__aeabi_dadd+0x4ae>
 8001b88:	e0e3      	b.n	8001d52 <__aeabi_dadd+0x676>
 8001b8a:	4663      	mov	r3, ip
 8001b8c:	18c2      	adds	r2, r0, r3
 8001b8e:	4282      	cmp	r2, r0
 8001b90:	4180      	sbcs	r0, r0
 8001b92:	0023      	movs	r3, r4
 8001b94:	4240      	negs	r0, r0
 8001b96:	4453      	add	r3, sl
 8001b98:	181b      	adds	r3, r3, r0
 8001b9a:	07dd      	lsls	r5, r3, #31
 8001b9c:	085c      	lsrs	r4, r3, #1
 8001b9e:	2307      	movs	r3, #7
 8001ba0:	0852      	lsrs	r2, r2, #1
 8001ba2:	4315      	orrs	r5, r2
 8001ba4:	000f      	movs	r7, r1
 8001ba6:	402b      	ands	r3, r5
 8001ba8:	e700      	b.n	80019ac <__aeabi_dadd+0x2d0>
 8001baa:	4663      	mov	r3, ip
 8001bac:	1a1d      	subs	r5, r3, r0
 8001bae:	45ac      	cmp	ip, r5
 8001bb0:	4192      	sbcs	r2, r2
 8001bb2:	4653      	mov	r3, sl
 8001bb4:	4252      	negs	r2, r2
 8001bb6:	1b1c      	subs	r4, r3, r4
 8001bb8:	000e      	movs	r6, r1
 8001bba:	4688      	mov	r8, r1
 8001bbc:	1aa4      	subs	r4, r4, r2
 8001bbe:	e5e5      	b.n	800178c <__aeabi_dadd+0xb0>
 8001bc0:	2d00      	cmp	r5, #0
 8001bc2:	d000      	beq.n	8001bc6 <__aeabi_dadd+0x4ea>
 8001bc4:	e091      	b.n	8001cea <__aeabi_dadd+0x60e>
 8001bc6:	2a00      	cmp	r2, #0
 8001bc8:	d138      	bne.n	8001c3c <__aeabi_dadd+0x560>
 8001bca:	2480      	movs	r4, #128	@ 0x80
 8001bcc:	2600      	movs	r6, #0
 8001bce:	0324      	lsls	r4, r4, #12
 8001bd0:	e756      	b.n	8001a80 <__aeabi_dadd+0x3a4>
 8001bd2:	4663      	mov	r3, ip
 8001bd4:	18c5      	adds	r5, r0, r3
 8001bd6:	4285      	cmp	r5, r0
 8001bd8:	4180      	sbcs	r0, r0
 8001bda:	4454      	add	r4, sl
 8001bdc:	4240      	negs	r0, r0
 8001bde:	1824      	adds	r4, r4, r0
 8001be0:	2701      	movs	r7, #1
 8001be2:	0223      	lsls	r3, r4, #8
 8001be4:	d400      	bmi.n	8001be8 <__aeabi_dadd+0x50c>
 8001be6:	e6df      	b.n	80019a8 <__aeabi_dadd+0x2cc>
 8001be8:	2702      	movs	r7, #2
 8001bea:	e687      	b.n	80018fc <__aeabi_dadd+0x220>
 8001bec:	4663      	mov	r3, ip
 8001bee:	1ac5      	subs	r5, r0, r3
 8001bf0:	42a8      	cmp	r0, r5
 8001bf2:	4180      	sbcs	r0, r0
 8001bf4:	4653      	mov	r3, sl
 8001bf6:	4240      	negs	r0, r0
 8001bf8:	1ae4      	subs	r4, r4, r3
 8001bfa:	2701      	movs	r7, #1
 8001bfc:	1a24      	subs	r4, r4, r0
 8001bfe:	e5c0      	b.n	8001782 <__aeabi_dadd+0xa6>
 8001c00:	0762      	lsls	r2, r4, #29
 8001c02:	08c0      	lsrs	r0, r0, #3
 8001c04:	4302      	orrs	r2, r0
 8001c06:	08e4      	lsrs	r4, r4, #3
 8001c08:	e736      	b.n	8001a78 <__aeabi_dadd+0x39c>
 8001c0a:	0011      	movs	r1, r2
 8001c0c:	4653      	mov	r3, sl
 8001c0e:	3920      	subs	r1, #32
 8001c10:	40cb      	lsrs	r3, r1
 8001c12:	4699      	mov	r9, r3
 8001c14:	2a20      	cmp	r2, #32
 8001c16:	d006      	beq.n	8001c26 <__aeabi_dadd+0x54a>
 8001c18:	2140      	movs	r1, #64	@ 0x40
 8001c1a:	4653      	mov	r3, sl
 8001c1c:	1a8a      	subs	r2, r1, r2
 8001c1e:	4093      	lsls	r3, r2
 8001c20:	4662      	mov	r2, ip
 8001c22:	431a      	orrs	r2, r3
 8001c24:	4694      	mov	ip, r2
 8001c26:	4665      	mov	r5, ip
 8001c28:	1e6b      	subs	r3, r5, #1
 8001c2a:	419d      	sbcs	r5, r3
 8001c2c:	464b      	mov	r3, r9
 8001c2e:	431d      	orrs	r5, r3
 8001c30:	e659      	b.n	80018e6 <__aeabi_dadd+0x20a>
 8001c32:	0762      	lsls	r2, r4, #29
 8001c34:	08c0      	lsrs	r0, r0, #3
 8001c36:	4302      	orrs	r2, r0
 8001c38:	08e4      	lsrs	r4, r4, #3
 8001c3a:	e70d      	b.n	8001a58 <__aeabi_dadd+0x37c>
 8001c3c:	4653      	mov	r3, sl
 8001c3e:	075a      	lsls	r2, r3, #29
 8001c40:	4663      	mov	r3, ip
 8001c42:	08d8      	lsrs	r0, r3, #3
 8001c44:	4653      	mov	r3, sl
 8001c46:	000e      	movs	r6, r1
 8001c48:	4302      	orrs	r2, r0
 8001c4a:	08dc      	lsrs	r4, r3, #3
 8001c4c:	e714      	b.n	8001a78 <__aeabi_dadd+0x39c>
 8001c4e:	0015      	movs	r5, r2
 8001c50:	0026      	movs	r6, r4
 8001c52:	3d20      	subs	r5, #32
 8001c54:	40ee      	lsrs	r6, r5
 8001c56:	2a20      	cmp	r2, #32
 8001c58:	d003      	beq.n	8001c62 <__aeabi_dadd+0x586>
 8001c5a:	2540      	movs	r5, #64	@ 0x40
 8001c5c:	1aaa      	subs	r2, r5, r2
 8001c5e:	4094      	lsls	r4, r2
 8001c60:	4320      	orrs	r0, r4
 8001c62:	1e42      	subs	r2, r0, #1
 8001c64:	4190      	sbcs	r0, r2
 8001c66:	0005      	movs	r5, r0
 8001c68:	4335      	orrs	r5, r6
 8001c6a:	e606      	b.n	800187a <__aeabi_dadd+0x19e>
 8001c6c:	2a00      	cmp	r2, #0
 8001c6e:	d07c      	beq.n	8001d6a <__aeabi_dadd+0x68e>
 8001c70:	4662      	mov	r2, ip
 8001c72:	4653      	mov	r3, sl
 8001c74:	08c0      	lsrs	r0, r0, #3
 8001c76:	431a      	orrs	r2, r3
 8001c78:	d100      	bne.n	8001c7c <__aeabi_dadd+0x5a0>
 8001c7a:	e6fa      	b.n	8001a72 <__aeabi_dadd+0x396>
 8001c7c:	0762      	lsls	r2, r4, #29
 8001c7e:	4310      	orrs	r0, r2
 8001c80:	2280      	movs	r2, #128	@ 0x80
 8001c82:	08e4      	lsrs	r4, r4, #3
 8001c84:	0312      	lsls	r2, r2, #12
 8001c86:	4214      	tst	r4, r2
 8001c88:	d008      	beq.n	8001c9c <__aeabi_dadd+0x5c0>
 8001c8a:	08d9      	lsrs	r1, r3, #3
 8001c8c:	4211      	tst	r1, r2
 8001c8e:	d105      	bne.n	8001c9c <__aeabi_dadd+0x5c0>
 8001c90:	4663      	mov	r3, ip
 8001c92:	08d8      	lsrs	r0, r3, #3
 8001c94:	4653      	mov	r3, sl
 8001c96:	000c      	movs	r4, r1
 8001c98:	075b      	lsls	r3, r3, #29
 8001c9a:	4318      	orrs	r0, r3
 8001c9c:	0f42      	lsrs	r2, r0, #29
 8001c9e:	00c0      	lsls	r0, r0, #3
 8001ca0:	08c0      	lsrs	r0, r0, #3
 8001ca2:	0752      	lsls	r2, r2, #29
 8001ca4:	4302      	orrs	r2, r0
 8001ca6:	e6e7      	b.n	8001a78 <__aeabi_dadd+0x39c>
 8001ca8:	2a00      	cmp	r2, #0
 8001caa:	d100      	bne.n	8001cae <__aeabi_dadd+0x5d2>
 8001cac:	e72d      	b.n	8001b0a <__aeabi_dadd+0x42e>
 8001cae:	4663      	mov	r3, ip
 8001cb0:	08d8      	lsrs	r0, r3, #3
 8001cb2:	4653      	mov	r3, sl
 8001cb4:	075a      	lsls	r2, r3, #29
 8001cb6:	000e      	movs	r6, r1
 8001cb8:	4302      	orrs	r2, r0
 8001cba:	08dc      	lsrs	r4, r3, #3
 8001cbc:	e6cc      	b.n	8001a58 <__aeabi_dadd+0x37c>
 8001cbe:	4663      	mov	r3, ip
 8001cc0:	1a1d      	subs	r5, r3, r0
 8001cc2:	45ac      	cmp	ip, r5
 8001cc4:	4192      	sbcs	r2, r2
 8001cc6:	4653      	mov	r3, sl
 8001cc8:	4252      	negs	r2, r2
 8001cca:	1b1c      	subs	r4, r3, r4
 8001ccc:	000e      	movs	r6, r1
 8001cce:	4688      	mov	r8, r1
 8001cd0:	1aa4      	subs	r4, r4, r2
 8001cd2:	3701      	adds	r7, #1
 8001cd4:	e555      	b.n	8001782 <__aeabi_dadd+0xa6>
 8001cd6:	4663      	mov	r3, ip
 8001cd8:	08d9      	lsrs	r1, r3, #3
 8001cda:	4653      	mov	r3, sl
 8001cdc:	075a      	lsls	r2, r3, #29
 8001cde:	430a      	orrs	r2, r1
 8001ce0:	08dc      	lsrs	r4, r3, #3
 8001ce2:	e6c9      	b.n	8001a78 <__aeabi_dadd+0x39c>
 8001ce4:	4660      	mov	r0, ip
 8001ce6:	4654      	mov	r4, sl
 8001ce8:	e6d4      	b.n	8001a94 <__aeabi_dadd+0x3b8>
 8001cea:	08c0      	lsrs	r0, r0, #3
 8001cec:	2a00      	cmp	r2, #0
 8001cee:	d100      	bne.n	8001cf2 <__aeabi_dadd+0x616>
 8001cf0:	e6bf      	b.n	8001a72 <__aeabi_dadd+0x396>
 8001cf2:	0762      	lsls	r2, r4, #29
 8001cf4:	4310      	orrs	r0, r2
 8001cf6:	2280      	movs	r2, #128	@ 0x80
 8001cf8:	08e4      	lsrs	r4, r4, #3
 8001cfa:	0312      	lsls	r2, r2, #12
 8001cfc:	4214      	tst	r4, r2
 8001cfe:	d0cd      	beq.n	8001c9c <__aeabi_dadd+0x5c0>
 8001d00:	08dd      	lsrs	r5, r3, #3
 8001d02:	4215      	tst	r5, r2
 8001d04:	d1ca      	bne.n	8001c9c <__aeabi_dadd+0x5c0>
 8001d06:	4663      	mov	r3, ip
 8001d08:	08d8      	lsrs	r0, r3, #3
 8001d0a:	4653      	mov	r3, sl
 8001d0c:	075b      	lsls	r3, r3, #29
 8001d0e:	000e      	movs	r6, r1
 8001d10:	002c      	movs	r4, r5
 8001d12:	4318      	orrs	r0, r3
 8001d14:	e7c2      	b.n	8001c9c <__aeabi_dadd+0x5c0>
 8001d16:	4663      	mov	r3, ip
 8001d18:	08d9      	lsrs	r1, r3, #3
 8001d1a:	4653      	mov	r3, sl
 8001d1c:	075a      	lsls	r2, r3, #29
 8001d1e:	430a      	orrs	r2, r1
 8001d20:	08dc      	lsrs	r4, r3, #3
 8001d22:	e699      	b.n	8001a58 <__aeabi_dadd+0x37c>
 8001d24:	4663      	mov	r3, ip
 8001d26:	08d8      	lsrs	r0, r3, #3
 8001d28:	4653      	mov	r3, sl
 8001d2a:	075a      	lsls	r2, r3, #29
 8001d2c:	000e      	movs	r6, r1
 8001d2e:	4302      	orrs	r2, r0
 8001d30:	08dc      	lsrs	r4, r3, #3
 8001d32:	e6a1      	b.n	8001a78 <__aeabi_dadd+0x39c>
 8001d34:	0011      	movs	r1, r2
 8001d36:	0027      	movs	r7, r4
 8001d38:	3920      	subs	r1, #32
 8001d3a:	40cf      	lsrs	r7, r1
 8001d3c:	2a20      	cmp	r2, #32
 8001d3e:	d003      	beq.n	8001d48 <__aeabi_dadd+0x66c>
 8001d40:	2140      	movs	r1, #64	@ 0x40
 8001d42:	1a8a      	subs	r2, r1, r2
 8001d44:	4094      	lsls	r4, r2
 8001d46:	4320      	orrs	r0, r4
 8001d48:	1e42      	subs	r2, r0, #1
 8001d4a:	4190      	sbcs	r0, r2
 8001d4c:	0005      	movs	r5, r0
 8001d4e:	433d      	orrs	r5, r7
 8001d50:	e651      	b.n	80019f6 <__aeabi_dadd+0x31a>
 8001d52:	000c      	movs	r4, r1
 8001d54:	2500      	movs	r5, #0
 8001d56:	2200      	movs	r2, #0
 8001d58:	e558      	b.n	800180c <__aeabi_dadd+0x130>
 8001d5a:	4460      	add	r0, ip
 8001d5c:	4560      	cmp	r0, ip
 8001d5e:	4192      	sbcs	r2, r2
 8001d60:	4454      	add	r4, sl
 8001d62:	4252      	negs	r2, r2
 8001d64:	0005      	movs	r5, r0
 8001d66:	18a4      	adds	r4, r4, r2
 8001d68:	e73a      	b.n	8001be0 <__aeabi_dadd+0x504>
 8001d6a:	4653      	mov	r3, sl
 8001d6c:	075a      	lsls	r2, r3, #29
 8001d6e:	4663      	mov	r3, ip
 8001d70:	08d9      	lsrs	r1, r3, #3
 8001d72:	4653      	mov	r3, sl
 8001d74:	430a      	orrs	r2, r1
 8001d76:	08dc      	lsrs	r4, r3, #3
 8001d78:	e67e      	b.n	8001a78 <__aeabi_dadd+0x39c>
 8001d7a:	001a      	movs	r2, r3
 8001d7c:	001c      	movs	r4, r3
 8001d7e:	432a      	orrs	r2, r5
 8001d80:	d000      	beq.n	8001d84 <__aeabi_dadd+0x6a8>
 8001d82:	e6ab      	b.n	8001adc <__aeabi_dadd+0x400>
 8001d84:	e6c1      	b.n	8001b0a <__aeabi_dadd+0x42e>
 8001d86:	2120      	movs	r1, #32
 8001d88:	2500      	movs	r5, #0
 8001d8a:	1a09      	subs	r1, r1, r0
 8001d8c:	e519      	b.n	80017c2 <__aeabi_dadd+0xe6>
 8001d8e:	2200      	movs	r2, #0
 8001d90:	2500      	movs	r5, #0
 8001d92:	4c01      	ldr	r4, [pc, #4]	@ (8001d98 <__aeabi_dadd+0x6bc>)
 8001d94:	e53a      	b.n	800180c <__aeabi_dadd+0x130>
 8001d96:	46c0      	nop			@ (mov r8, r8)
 8001d98:	000007ff 	.word	0x000007ff
 8001d9c:	ff7fffff 	.word	0xff7fffff
 8001da0:	000007fe 	.word	0x000007fe

08001da4 <__aeabi_ddiv>:
 8001da4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001da6:	46de      	mov	lr, fp
 8001da8:	4645      	mov	r5, r8
 8001daa:	4657      	mov	r7, sl
 8001dac:	464e      	mov	r6, r9
 8001dae:	b5e0      	push	{r5, r6, r7, lr}
 8001db0:	b087      	sub	sp, #28
 8001db2:	9200      	str	r2, [sp, #0]
 8001db4:	9301      	str	r3, [sp, #4]
 8001db6:	030b      	lsls	r3, r1, #12
 8001db8:	0b1b      	lsrs	r3, r3, #12
 8001dba:	469b      	mov	fp, r3
 8001dbc:	0fca      	lsrs	r2, r1, #31
 8001dbe:	004b      	lsls	r3, r1, #1
 8001dc0:	0004      	movs	r4, r0
 8001dc2:	4680      	mov	r8, r0
 8001dc4:	0d5b      	lsrs	r3, r3, #21
 8001dc6:	9202      	str	r2, [sp, #8]
 8001dc8:	d100      	bne.n	8001dcc <__aeabi_ddiv+0x28>
 8001dca:	e16a      	b.n	80020a2 <__aeabi_ddiv+0x2fe>
 8001dcc:	4ad4      	ldr	r2, [pc, #848]	@ (8002120 <__aeabi_ddiv+0x37c>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d100      	bne.n	8001dd4 <__aeabi_ddiv+0x30>
 8001dd2:	e18c      	b.n	80020ee <__aeabi_ddiv+0x34a>
 8001dd4:	4659      	mov	r1, fp
 8001dd6:	0f42      	lsrs	r2, r0, #29
 8001dd8:	00c9      	lsls	r1, r1, #3
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	2180      	movs	r1, #128	@ 0x80
 8001dde:	0409      	lsls	r1, r1, #16
 8001de0:	4311      	orrs	r1, r2
 8001de2:	00c2      	lsls	r2, r0, #3
 8001de4:	4690      	mov	r8, r2
 8001de6:	4acf      	ldr	r2, [pc, #828]	@ (8002124 <__aeabi_ddiv+0x380>)
 8001de8:	4689      	mov	r9, r1
 8001dea:	4692      	mov	sl, r2
 8001dec:	449a      	add	sl, r3
 8001dee:	2300      	movs	r3, #0
 8001df0:	2400      	movs	r4, #0
 8001df2:	9303      	str	r3, [sp, #12]
 8001df4:	9e00      	ldr	r6, [sp, #0]
 8001df6:	9f01      	ldr	r7, [sp, #4]
 8001df8:	033b      	lsls	r3, r7, #12
 8001dfa:	0b1b      	lsrs	r3, r3, #12
 8001dfc:	469b      	mov	fp, r3
 8001dfe:	007b      	lsls	r3, r7, #1
 8001e00:	0030      	movs	r0, r6
 8001e02:	0d5b      	lsrs	r3, r3, #21
 8001e04:	0ffd      	lsrs	r5, r7, #31
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d100      	bne.n	8001e0c <__aeabi_ddiv+0x68>
 8001e0a:	e128      	b.n	800205e <__aeabi_ddiv+0x2ba>
 8001e0c:	4ac4      	ldr	r2, [pc, #784]	@ (8002120 <__aeabi_ddiv+0x37c>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d100      	bne.n	8001e14 <__aeabi_ddiv+0x70>
 8001e12:	e177      	b.n	8002104 <__aeabi_ddiv+0x360>
 8001e14:	4659      	mov	r1, fp
 8001e16:	0f72      	lsrs	r2, r6, #29
 8001e18:	00c9      	lsls	r1, r1, #3
 8001e1a:	430a      	orrs	r2, r1
 8001e1c:	2180      	movs	r1, #128	@ 0x80
 8001e1e:	0409      	lsls	r1, r1, #16
 8001e20:	4311      	orrs	r1, r2
 8001e22:	468b      	mov	fp, r1
 8001e24:	49bf      	ldr	r1, [pc, #764]	@ (8002124 <__aeabi_ddiv+0x380>)
 8001e26:	00f2      	lsls	r2, r6, #3
 8001e28:	468c      	mov	ip, r1
 8001e2a:	4651      	mov	r1, sl
 8001e2c:	4463      	add	r3, ip
 8001e2e:	1acb      	subs	r3, r1, r3
 8001e30:	469a      	mov	sl, r3
 8001e32:	2300      	movs	r3, #0
 8001e34:	9e02      	ldr	r6, [sp, #8]
 8001e36:	406e      	eors	r6, r5
 8001e38:	2c0f      	cmp	r4, #15
 8001e3a:	d827      	bhi.n	8001e8c <__aeabi_ddiv+0xe8>
 8001e3c:	49ba      	ldr	r1, [pc, #744]	@ (8002128 <__aeabi_ddiv+0x384>)
 8001e3e:	00a4      	lsls	r4, r4, #2
 8001e40:	5909      	ldr	r1, [r1, r4]
 8001e42:	468f      	mov	pc, r1
 8001e44:	46cb      	mov	fp, r9
 8001e46:	4642      	mov	r2, r8
 8001e48:	9e02      	ldr	r6, [sp, #8]
 8001e4a:	9b03      	ldr	r3, [sp, #12]
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d016      	beq.n	8001e7e <__aeabi_ddiv+0xda>
 8001e50:	2b03      	cmp	r3, #3
 8001e52:	d100      	bne.n	8001e56 <__aeabi_ddiv+0xb2>
 8001e54:	e2a6      	b.n	80023a4 <__aeabi_ddiv+0x600>
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d000      	beq.n	8001e5c <__aeabi_ddiv+0xb8>
 8001e5a:	e0df      	b.n	800201c <__aeabi_ddiv+0x278>
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	2300      	movs	r3, #0
 8001e60:	2400      	movs	r4, #0
 8001e62:	4690      	mov	r8, r2
 8001e64:	051b      	lsls	r3, r3, #20
 8001e66:	4323      	orrs	r3, r4
 8001e68:	07f6      	lsls	r6, r6, #31
 8001e6a:	4333      	orrs	r3, r6
 8001e6c:	4640      	mov	r0, r8
 8001e6e:	0019      	movs	r1, r3
 8001e70:	b007      	add	sp, #28
 8001e72:	bcf0      	pop	{r4, r5, r6, r7}
 8001e74:	46bb      	mov	fp, r7
 8001e76:	46b2      	mov	sl, r6
 8001e78:	46a9      	mov	r9, r5
 8001e7a:	46a0      	mov	r8, r4
 8001e7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e7e:	2200      	movs	r2, #0
 8001e80:	2400      	movs	r4, #0
 8001e82:	4690      	mov	r8, r2
 8001e84:	4ba6      	ldr	r3, [pc, #664]	@ (8002120 <__aeabi_ddiv+0x37c>)
 8001e86:	e7ed      	b.n	8001e64 <__aeabi_ddiv+0xc0>
 8001e88:	002e      	movs	r6, r5
 8001e8a:	e7df      	b.n	8001e4c <__aeabi_ddiv+0xa8>
 8001e8c:	45cb      	cmp	fp, r9
 8001e8e:	d200      	bcs.n	8001e92 <__aeabi_ddiv+0xee>
 8001e90:	e1d4      	b.n	800223c <__aeabi_ddiv+0x498>
 8001e92:	d100      	bne.n	8001e96 <__aeabi_ddiv+0xf2>
 8001e94:	e1cf      	b.n	8002236 <__aeabi_ddiv+0x492>
 8001e96:	2301      	movs	r3, #1
 8001e98:	425b      	negs	r3, r3
 8001e9a:	469c      	mov	ip, r3
 8001e9c:	4644      	mov	r4, r8
 8001e9e:	4648      	mov	r0, r9
 8001ea0:	2700      	movs	r7, #0
 8001ea2:	44e2      	add	sl, ip
 8001ea4:	465b      	mov	r3, fp
 8001ea6:	0e15      	lsrs	r5, r2, #24
 8001ea8:	021b      	lsls	r3, r3, #8
 8001eaa:	431d      	orrs	r5, r3
 8001eac:	0c19      	lsrs	r1, r3, #16
 8001eae:	042b      	lsls	r3, r5, #16
 8001eb0:	0212      	lsls	r2, r2, #8
 8001eb2:	9500      	str	r5, [sp, #0]
 8001eb4:	0c1d      	lsrs	r5, r3, #16
 8001eb6:	4691      	mov	r9, r2
 8001eb8:	9102      	str	r1, [sp, #8]
 8001eba:	9503      	str	r5, [sp, #12]
 8001ebc:	f7fe f9d0 	bl	8000260 <__aeabi_uidivmod>
 8001ec0:	0002      	movs	r2, r0
 8001ec2:	436a      	muls	r2, r5
 8001ec4:	040b      	lsls	r3, r1, #16
 8001ec6:	0c21      	lsrs	r1, r4, #16
 8001ec8:	4680      	mov	r8, r0
 8001eca:	4319      	orrs	r1, r3
 8001ecc:	428a      	cmp	r2, r1
 8001ece:	d909      	bls.n	8001ee4 <__aeabi_ddiv+0x140>
 8001ed0:	9d00      	ldr	r5, [sp, #0]
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	46ac      	mov	ip, r5
 8001ed6:	425b      	negs	r3, r3
 8001ed8:	4461      	add	r1, ip
 8001eda:	469c      	mov	ip, r3
 8001edc:	44e0      	add	r8, ip
 8001ede:	428d      	cmp	r5, r1
 8001ee0:	d800      	bhi.n	8001ee4 <__aeabi_ddiv+0x140>
 8001ee2:	e1fb      	b.n	80022dc <__aeabi_ddiv+0x538>
 8001ee4:	1a88      	subs	r0, r1, r2
 8001ee6:	9902      	ldr	r1, [sp, #8]
 8001ee8:	f7fe f9ba 	bl	8000260 <__aeabi_uidivmod>
 8001eec:	9a03      	ldr	r2, [sp, #12]
 8001eee:	0424      	lsls	r4, r4, #16
 8001ef0:	4342      	muls	r2, r0
 8001ef2:	0409      	lsls	r1, r1, #16
 8001ef4:	0c24      	lsrs	r4, r4, #16
 8001ef6:	0003      	movs	r3, r0
 8001ef8:	430c      	orrs	r4, r1
 8001efa:	42a2      	cmp	r2, r4
 8001efc:	d906      	bls.n	8001f0c <__aeabi_ddiv+0x168>
 8001efe:	9900      	ldr	r1, [sp, #0]
 8001f00:	3b01      	subs	r3, #1
 8001f02:	468c      	mov	ip, r1
 8001f04:	4464      	add	r4, ip
 8001f06:	42a1      	cmp	r1, r4
 8001f08:	d800      	bhi.n	8001f0c <__aeabi_ddiv+0x168>
 8001f0a:	e1e1      	b.n	80022d0 <__aeabi_ddiv+0x52c>
 8001f0c:	1aa0      	subs	r0, r4, r2
 8001f0e:	4642      	mov	r2, r8
 8001f10:	0412      	lsls	r2, r2, #16
 8001f12:	431a      	orrs	r2, r3
 8001f14:	4693      	mov	fp, r2
 8001f16:	464b      	mov	r3, r9
 8001f18:	4659      	mov	r1, fp
 8001f1a:	0c1b      	lsrs	r3, r3, #16
 8001f1c:	001d      	movs	r5, r3
 8001f1e:	9304      	str	r3, [sp, #16]
 8001f20:	040b      	lsls	r3, r1, #16
 8001f22:	4649      	mov	r1, r9
 8001f24:	0409      	lsls	r1, r1, #16
 8001f26:	0c09      	lsrs	r1, r1, #16
 8001f28:	000c      	movs	r4, r1
 8001f2a:	0c1b      	lsrs	r3, r3, #16
 8001f2c:	435c      	muls	r4, r3
 8001f2e:	0c12      	lsrs	r2, r2, #16
 8001f30:	436b      	muls	r3, r5
 8001f32:	4688      	mov	r8, r1
 8001f34:	4351      	muls	r1, r2
 8001f36:	436a      	muls	r2, r5
 8001f38:	0c25      	lsrs	r5, r4, #16
 8001f3a:	46ac      	mov	ip, r5
 8001f3c:	185b      	adds	r3, r3, r1
 8001f3e:	4463      	add	r3, ip
 8001f40:	4299      	cmp	r1, r3
 8001f42:	d903      	bls.n	8001f4c <__aeabi_ddiv+0x1a8>
 8001f44:	2180      	movs	r1, #128	@ 0x80
 8001f46:	0249      	lsls	r1, r1, #9
 8001f48:	468c      	mov	ip, r1
 8001f4a:	4462      	add	r2, ip
 8001f4c:	0c19      	lsrs	r1, r3, #16
 8001f4e:	0424      	lsls	r4, r4, #16
 8001f50:	041b      	lsls	r3, r3, #16
 8001f52:	0c24      	lsrs	r4, r4, #16
 8001f54:	188a      	adds	r2, r1, r2
 8001f56:	191c      	adds	r4, r3, r4
 8001f58:	4290      	cmp	r0, r2
 8001f5a:	d302      	bcc.n	8001f62 <__aeabi_ddiv+0x1be>
 8001f5c:	d116      	bne.n	8001f8c <__aeabi_ddiv+0x1e8>
 8001f5e:	42a7      	cmp	r7, r4
 8001f60:	d214      	bcs.n	8001f8c <__aeabi_ddiv+0x1e8>
 8001f62:	465b      	mov	r3, fp
 8001f64:	9d00      	ldr	r5, [sp, #0]
 8001f66:	3b01      	subs	r3, #1
 8001f68:	444f      	add	r7, r9
 8001f6a:	9305      	str	r3, [sp, #20]
 8001f6c:	454f      	cmp	r7, r9
 8001f6e:	419b      	sbcs	r3, r3
 8001f70:	46ac      	mov	ip, r5
 8001f72:	425b      	negs	r3, r3
 8001f74:	4463      	add	r3, ip
 8001f76:	18c0      	adds	r0, r0, r3
 8001f78:	4285      	cmp	r5, r0
 8001f7a:	d300      	bcc.n	8001f7e <__aeabi_ddiv+0x1da>
 8001f7c:	e1a1      	b.n	80022c2 <__aeabi_ddiv+0x51e>
 8001f7e:	4282      	cmp	r2, r0
 8001f80:	d900      	bls.n	8001f84 <__aeabi_ddiv+0x1e0>
 8001f82:	e1f6      	b.n	8002372 <__aeabi_ddiv+0x5ce>
 8001f84:	d100      	bne.n	8001f88 <__aeabi_ddiv+0x1e4>
 8001f86:	e1f1      	b.n	800236c <__aeabi_ddiv+0x5c8>
 8001f88:	9b05      	ldr	r3, [sp, #20]
 8001f8a:	469b      	mov	fp, r3
 8001f8c:	1b3c      	subs	r4, r7, r4
 8001f8e:	42a7      	cmp	r7, r4
 8001f90:	41bf      	sbcs	r7, r7
 8001f92:	9d00      	ldr	r5, [sp, #0]
 8001f94:	1a80      	subs	r0, r0, r2
 8001f96:	427f      	negs	r7, r7
 8001f98:	1bc0      	subs	r0, r0, r7
 8001f9a:	4285      	cmp	r5, r0
 8001f9c:	d100      	bne.n	8001fa0 <__aeabi_ddiv+0x1fc>
 8001f9e:	e1d0      	b.n	8002342 <__aeabi_ddiv+0x59e>
 8001fa0:	9902      	ldr	r1, [sp, #8]
 8001fa2:	f7fe f95d 	bl	8000260 <__aeabi_uidivmod>
 8001fa6:	9a03      	ldr	r2, [sp, #12]
 8001fa8:	040b      	lsls	r3, r1, #16
 8001faa:	4342      	muls	r2, r0
 8001fac:	0c21      	lsrs	r1, r4, #16
 8001fae:	0007      	movs	r7, r0
 8001fb0:	4319      	orrs	r1, r3
 8001fb2:	428a      	cmp	r2, r1
 8001fb4:	d900      	bls.n	8001fb8 <__aeabi_ddiv+0x214>
 8001fb6:	e178      	b.n	80022aa <__aeabi_ddiv+0x506>
 8001fb8:	1a88      	subs	r0, r1, r2
 8001fba:	9902      	ldr	r1, [sp, #8]
 8001fbc:	f7fe f950 	bl	8000260 <__aeabi_uidivmod>
 8001fc0:	9a03      	ldr	r2, [sp, #12]
 8001fc2:	0424      	lsls	r4, r4, #16
 8001fc4:	4342      	muls	r2, r0
 8001fc6:	0409      	lsls	r1, r1, #16
 8001fc8:	0c24      	lsrs	r4, r4, #16
 8001fca:	0003      	movs	r3, r0
 8001fcc:	430c      	orrs	r4, r1
 8001fce:	42a2      	cmp	r2, r4
 8001fd0:	d900      	bls.n	8001fd4 <__aeabi_ddiv+0x230>
 8001fd2:	e15d      	b.n	8002290 <__aeabi_ddiv+0x4ec>
 8001fd4:	4641      	mov	r1, r8
 8001fd6:	1aa4      	subs	r4, r4, r2
 8001fd8:	043a      	lsls	r2, r7, #16
 8001fda:	431a      	orrs	r2, r3
 8001fdc:	9d04      	ldr	r5, [sp, #16]
 8001fde:	0413      	lsls	r3, r2, #16
 8001fe0:	0c1b      	lsrs	r3, r3, #16
 8001fe2:	4359      	muls	r1, r3
 8001fe4:	4647      	mov	r7, r8
 8001fe6:	436b      	muls	r3, r5
 8001fe8:	469c      	mov	ip, r3
 8001fea:	0c10      	lsrs	r0, r2, #16
 8001fec:	4347      	muls	r7, r0
 8001fee:	0c0b      	lsrs	r3, r1, #16
 8001ff0:	44bc      	add	ip, r7
 8001ff2:	4463      	add	r3, ip
 8001ff4:	4368      	muls	r0, r5
 8001ff6:	429f      	cmp	r7, r3
 8001ff8:	d903      	bls.n	8002002 <__aeabi_ddiv+0x25e>
 8001ffa:	2580      	movs	r5, #128	@ 0x80
 8001ffc:	026d      	lsls	r5, r5, #9
 8001ffe:	46ac      	mov	ip, r5
 8002000:	4460      	add	r0, ip
 8002002:	0c1f      	lsrs	r7, r3, #16
 8002004:	0409      	lsls	r1, r1, #16
 8002006:	041b      	lsls	r3, r3, #16
 8002008:	0c09      	lsrs	r1, r1, #16
 800200a:	183f      	adds	r7, r7, r0
 800200c:	185b      	adds	r3, r3, r1
 800200e:	42bc      	cmp	r4, r7
 8002010:	d200      	bcs.n	8002014 <__aeabi_ddiv+0x270>
 8002012:	e102      	b.n	800221a <__aeabi_ddiv+0x476>
 8002014:	d100      	bne.n	8002018 <__aeabi_ddiv+0x274>
 8002016:	e0fd      	b.n	8002214 <__aeabi_ddiv+0x470>
 8002018:	2301      	movs	r3, #1
 800201a:	431a      	orrs	r2, r3
 800201c:	4b43      	ldr	r3, [pc, #268]	@ (800212c <__aeabi_ddiv+0x388>)
 800201e:	4453      	add	r3, sl
 8002020:	2b00      	cmp	r3, #0
 8002022:	dc00      	bgt.n	8002026 <__aeabi_ddiv+0x282>
 8002024:	e0ae      	b.n	8002184 <__aeabi_ddiv+0x3e0>
 8002026:	0751      	lsls	r1, r2, #29
 8002028:	d000      	beq.n	800202c <__aeabi_ddiv+0x288>
 800202a:	e198      	b.n	800235e <__aeabi_ddiv+0x5ba>
 800202c:	4659      	mov	r1, fp
 800202e:	01c9      	lsls	r1, r1, #7
 8002030:	d506      	bpl.n	8002040 <__aeabi_ddiv+0x29c>
 8002032:	4659      	mov	r1, fp
 8002034:	4b3e      	ldr	r3, [pc, #248]	@ (8002130 <__aeabi_ddiv+0x38c>)
 8002036:	4019      	ands	r1, r3
 8002038:	2380      	movs	r3, #128	@ 0x80
 800203a:	468b      	mov	fp, r1
 800203c:	00db      	lsls	r3, r3, #3
 800203e:	4453      	add	r3, sl
 8002040:	493c      	ldr	r1, [pc, #240]	@ (8002134 <__aeabi_ddiv+0x390>)
 8002042:	428b      	cmp	r3, r1
 8002044:	dd00      	ble.n	8002048 <__aeabi_ddiv+0x2a4>
 8002046:	e71a      	b.n	8001e7e <__aeabi_ddiv+0xda>
 8002048:	4659      	mov	r1, fp
 800204a:	08d2      	lsrs	r2, r2, #3
 800204c:	0749      	lsls	r1, r1, #29
 800204e:	4311      	orrs	r1, r2
 8002050:	465a      	mov	r2, fp
 8002052:	055b      	lsls	r3, r3, #21
 8002054:	0254      	lsls	r4, r2, #9
 8002056:	4688      	mov	r8, r1
 8002058:	0b24      	lsrs	r4, r4, #12
 800205a:	0d5b      	lsrs	r3, r3, #21
 800205c:	e702      	b.n	8001e64 <__aeabi_ddiv+0xc0>
 800205e:	465a      	mov	r2, fp
 8002060:	9b00      	ldr	r3, [sp, #0]
 8002062:	431a      	orrs	r2, r3
 8002064:	d100      	bne.n	8002068 <__aeabi_ddiv+0x2c4>
 8002066:	e07e      	b.n	8002166 <__aeabi_ddiv+0x3c2>
 8002068:	465b      	mov	r3, fp
 800206a:	2b00      	cmp	r3, #0
 800206c:	d100      	bne.n	8002070 <__aeabi_ddiv+0x2cc>
 800206e:	e100      	b.n	8002272 <__aeabi_ddiv+0x4ce>
 8002070:	4658      	mov	r0, fp
 8002072:	f001 fabb 	bl	80035ec <__clzsi2>
 8002076:	0002      	movs	r2, r0
 8002078:	0003      	movs	r3, r0
 800207a:	3a0b      	subs	r2, #11
 800207c:	271d      	movs	r7, #29
 800207e:	9e00      	ldr	r6, [sp, #0]
 8002080:	1aba      	subs	r2, r7, r2
 8002082:	0019      	movs	r1, r3
 8002084:	4658      	mov	r0, fp
 8002086:	40d6      	lsrs	r6, r2
 8002088:	3908      	subs	r1, #8
 800208a:	4088      	lsls	r0, r1
 800208c:	0032      	movs	r2, r6
 800208e:	4302      	orrs	r2, r0
 8002090:	4693      	mov	fp, r2
 8002092:	9a00      	ldr	r2, [sp, #0]
 8002094:	408a      	lsls	r2, r1
 8002096:	4928      	ldr	r1, [pc, #160]	@ (8002138 <__aeabi_ddiv+0x394>)
 8002098:	4453      	add	r3, sl
 800209a:	468a      	mov	sl, r1
 800209c:	449a      	add	sl, r3
 800209e:	2300      	movs	r3, #0
 80020a0:	e6c8      	b.n	8001e34 <__aeabi_ddiv+0x90>
 80020a2:	465b      	mov	r3, fp
 80020a4:	4303      	orrs	r3, r0
 80020a6:	4699      	mov	r9, r3
 80020a8:	d056      	beq.n	8002158 <__aeabi_ddiv+0x3b4>
 80020aa:	465b      	mov	r3, fp
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d100      	bne.n	80020b2 <__aeabi_ddiv+0x30e>
 80020b0:	e0cd      	b.n	800224e <__aeabi_ddiv+0x4aa>
 80020b2:	4658      	mov	r0, fp
 80020b4:	f001 fa9a 	bl	80035ec <__clzsi2>
 80020b8:	230b      	movs	r3, #11
 80020ba:	425b      	negs	r3, r3
 80020bc:	469c      	mov	ip, r3
 80020be:	0002      	movs	r2, r0
 80020c0:	4484      	add	ip, r0
 80020c2:	4666      	mov	r6, ip
 80020c4:	231d      	movs	r3, #29
 80020c6:	1b9b      	subs	r3, r3, r6
 80020c8:	0026      	movs	r6, r4
 80020ca:	0011      	movs	r1, r2
 80020cc:	4658      	mov	r0, fp
 80020ce:	40de      	lsrs	r6, r3
 80020d0:	3908      	subs	r1, #8
 80020d2:	4088      	lsls	r0, r1
 80020d4:	0033      	movs	r3, r6
 80020d6:	4303      	orrs	r3, r0
 80020d8:	4699      	mov	r9, r3
 80020da:	0023      	movs	r3, r4
 80020dc:	408b      	lsls	r3, r1
 80020de:	4698      	mov	r8, r3
 80020e0:	4b16      	ldr	r3, [pc, #88]	@ (800213c <__aeabi_ddiv+0x398>)
 80020e2:	2400      	movs	r4, #0
 80020e4:	1a9b      	subs	r3, r3, r2
 80020e6:	469a      	mov	sl, r3
 80020e8:	2300      	movs	r3, #0
 80020ea:	9303      	str	r3, [sp, #12]
 80020ec:	e682      	b.n	8001df4 <__aeabi_ddiv+0x50>
 80020ee:	465a      	mov	r2, fp
 80020f0:	4302      	orrs	r2, r0
 80020f2:	4691      	mov	r9, r2
 80020f4:	d12a      	bne.n	800214c <__aeabi_ddiv+0x3a8>
 80020f6:	2200      	movs	r2, #0
 80020f8:	469a      	mov	sl, r3
 80020fa:	2302      	movs	r3, #2
 80020fc:	4690      	mov	r8, r2
 80020fe:	2408      	movs	r4, #8
 8002100:	9303      	str	r3, [sp, #12]
 8002102:	e677      	b.n	8001df4 <__aeabi_ddiv+0x50>
 8002104:	465a      	mov	r2, fp
 8002106:	9b00      	ldr	r3, [sp, #0]
 8002108:	431a      	orrs	r2, r3
 800210a:	4b0d      	ldr	r3, [pc, #52]	@ (8002140 <__aeabi_ddiv+0x39c>)
 800210c:	469c      	mov	ip, r3
 800210e:	44e2      	add	sl, ip
 8002110:	2a00      	cmp	r2, #0
 8002112:	d117      	bne.n	8002144 <__aeabi_ddiv+0x3a0>
 8002114:	2302      	movs	r3, #2
 8002116:	431c      	orrs	r4, r3
 8002118:	2300      	movs	r3, #0
 800211a:	469b      	mov	fp, r3
 800211c:	3302      	adds	r3, #2
 800211e:	e689      	b.n	8001e34 <__aeabi_ddiv+0x90>
 8002120:	000007ff 	.word	0x000007ff
 8002124:	fffffc01 	.word	0xfffffc01
 8002128:	080115ec 	.word	0x080115ec
 800212c:	000003ff 	.word	0x000003ff
 8002130:	feffffff 	.word	0xfeffffff
 8002134:	000007fe 	.word	0x000007fe
 8002138:	000003f3 	.word	0x000003f3
 800213c:	fffffc0d 	.word	0xfffffc0d
 8002140:	fffff801 	.word	0xfffff801
 8002144:	2303      	movs	r3, #3
 8002146:	0032      	movs	r2, r6
 8002148:	431c      	orrs	r4, r3
 800214a:	e673      	b.n	8001e34 <__aeabi_ddiv+0x90>
 800214c:	469a      	mov	sl, r3
 800214e:	2303      	movs	r3, #3
 8002150:	46d9      	mov	r9, fp
 8002152:	240c      	movs	r4, #12
 8002154:	9303      	str	r3, [sp, #12]
 8002156:	e64d      	b.n	8001df4 <__aeabi_ddiv+0x50>
 8002158:	2300      	movs	r3, #0
 800215a:	4698      	mov	r8, r3
 800215c:	469a      	mov	sl, r3
 800215e:	3301      	adds	r3, #1
 8002160:	2404      	movs	r4, #4
 8002162:	9303      	str	r3, [sp, #12]
 8002164:	e646      	b.n	8001df4 <__aeabi_ddiv+0x50>
 8002166:	2301      	movs	r3, #1
 8002168:	431c      	orrs	r4, r3
 800216a:	2300      	movs	r3, #0
 800216c:	469b      	mov	fp, r3
 800216e:	3301      	adds	r3, #1
 8002170:	e660      	b.n	8001e34 <__aeabi_ddiv+0x90>
 8002172:	2300      	movs	r3, #0
 8002174:	2480      	movs	r4, #128	@ 0x80
 8002176:	4698      	mov	r8, r3
 8002178:	2600      	movs	r6, #0
 800217a:	4b92      	ldr	r3, [pc, #584]	@ (80023c4 <__aeabi_ddiv+0x620>)
 800217c:	0324      	lsls	r4, r4, #12
 800217e:	e671      	b.n	8001e64 <__aeabi_ddiv+0xc0>
 8002180:	2201      	movs	r2, #1
 8002182:	4252      	negs	r2, r2
 8002184:	2101      	movs	r1, #1
 8002186:	1ac9      	subs	r1, r1, r3
 8002188:	2938      	cmp	r1, #56	@ 0x38
 800218a:	dd00      	ble.n	800218e <__aeabi_ddiv+0x3ea>
 800218c:	e666      	b.n	8001e5c <__aeabi_ddiv+0xb8>
 800218e:	291f      	cmp	r1, #31
 8002190:	dc00      	bgt.n	8002194 <__aeabi_ddiv+0x3f0>
 8002192:	e0ab      	b.n	80022ec <__aeabi_ddiv+0x548>
 8002194:	201f      	movs	r0, #31
 8002196:	4240      	negs	r0, r0
 8002198:	1ac3      	subs	r3, r0, r3
 800219a:	4658      	mov	r0, fp
 800219c:	40d8      	lsrs	r0, r3
 800219e:	0003      	movs	r3, r0
 80021a0:	2920      	cmp	r1, #32
 80021a2:	d004      	beq.n	80021ae <__aeabi_ddiv+0x40a>
 80021a4:	4658      	mov	r0, fp
 80021a6:	4988      	ldr	r1, [pc, #544]	@ (80023c8 <__aeabi_ddiv+0x624>)
 80021a8:	4451      	add	r1, sl
 80021aa:	4088      	lsls	r0, r1
 80021ac:	4302      	orrs	r2, r0
 80021ae:	1e51      	subs	r1, r2, #1
 80021b0:	418a      	sbcs	r2, r1
 80021b2:	431a      	orrs	r2, r3
 80021b4:	2307      	movs	r3, #7
 80021b6:	0019      	movs	r1, r3
 80021b8:	2400      	movs	r4, #0
 80021ba:	4011      	ands	r1, r2
 80021bc:	4213      	tst	r3, r2
 80021be:	d00c      	beq.n	80021da <__aeabi_ddiv+0x436>
 80021c0:	230f      	movs	r3, #15
 80021c2:	4013      	ands	r3, r2
 80021c4:	2b04      	cmp	r3, #4
 80021c6:	d100      	bne.n	80021ca <__aeabi_ddiv+0x426>
 80021c8:	e0f9      	b.n	80023be <__aeabi_ddiv+0x61a>
 80021ca:	1d11      	adds	r1, r2, #4
 80021cc:	4291      	cmp	r1, r2
 80021ce:	419b      	sbcs	r3, r3
 80021d0:	000a      	movs	r2, r1
 80021d2:	425b      	negs	r3, r3
 80021d4:	0759      	lsls	r1, r3, #29
 80021d6:	025b      	lsls	r3, r3, #9
 80021d8:	0b1c      	lsrs	r4, r3, #12
 80021da:	08d2      	lsrs	r2, r2, #3
 80021dc:	430a      	orrs	r2, r1
 80021de:	4690      	mov	r8, r2
 80021e0:	2300      	movs	r3, #0
 80021e2:	e63f      	b.n	8001e64 <__aeabi_ddiv+0xc0>
 80021e4:	2480      	movs	r4, #128	@ 0x80
 80021e6:	464b      	mov	r3, r9
 80021e8:	0324      	lsls	r4, r4, #12
 80021ea:	4223      	tst	r3, r4
 80021ec:	d009      	beq.n	8002202 <__aeabi_ddiv+0x45e>
 80021ee:	465b      	mov	r3, fp
 80021f0:	4223      	tst	r3, r4
 80021f2:	d106      	bne.n	8002202 <__aeabi_ddiv+0x45e>
 80021f4:	431c      	orrs	r4, r3
 80021f6:	0324      	lsls	r4, r4, #12
 80021f8:	002e      	movs	r6, r5
 80021fa:	4690      	mov	r8, r2
 80021fc:	4b71      	ldr	r3, [pc, #452]	@ (80023c4 <__aeabi_ddiv+0x620>)
 80021fe:	0b24      	lsrs	r4, r4, #12
 8002200:	e630      	b.n	8001e64 <__aeabi_ddiv+0xc0>
 8002202:	2480      	movs	r4, #128	@ 0x80
 8002204:	464b      	mov	r3, r9
 8002206:	0324      	lsls	r4, r4, #12
 8002208:	431c      	orrs	r4, r3
 800220a:	0324      	lsls	r4, r4, #12
 800220c:	9e02      	ldr	r6, [sp, #8]
 800220e:	4b6d      	ldr	r3, [pc, #436]	@ (80023c4 <__aeabi_ddiv+0x620>)
 8002210:	0b24      	lsrs	r4, r4, #12
 8002212:	e627      	b.n	8001e64 <__aeabi_ddiv+0xc0>
 8002214:	2b00      	cmp	r3, #0
 8002216:	d100      	bne.n	800221a <__aeabi_ddiv+0x476>
 8002218:	e700      	b.n	800201c <__aeabi_ddiv+0x278>
 800221a:	9800      	ldr	r0, [sp, #0]
 800221c:	1e51      	subs	r1, r2, #1
 800221e:	4684      	mov	ip, r0
 8002220:	4464      	add	r4, ip
 8002222:	4284      	cmp	r4, r0
 8002224:	d200      	bcs.n	8002228 <__aeabi_ddiv+0x484>
 8002226:	e084      	b.n	8002332 <__aeabi_ddiv+0x58e>
 8002228:	42bc      	cmp	r4, r7
 800222a:	d200      	bcs.n	800222e <__aeabi_ddiv+0x48a>
 800222c:	e0ae      	b.n	800238c <__aeabi_ddiv+0x5e8>
 800222e:	d100      	bne.n	8002232 <__aeabi_ddiv+0x48e>
 8002230:	e0c1      	b.n	80023b6 <__aeabi_ddiv+0x612>
 8002232:	000a      	movs	r2, r1
 8002234:	e6f0      	b.n	8002018 <__aeabi_ddiv+0x274>
 8002236:	4542      	cmp	r2, r8
 8002238:	d900      	bls.n	800223c <__aeabi_ddiv+0x498>
 800223a:	e62c      	b.n	8001e96 <__aeabi_ddiv+0xf2>
 800223c:	464b      	mov	r3, r9
 800223e:	07dc      	lsls	r4, r3, #31
 8002240:	0858      	lsrs	r0, r3, #1
 8002242:	4643      	mov	r3, r8
 8002244:	085b      	lsrs	r3, r3, #1
 8002246:	431c      	orrs	r4, r3
 8002248:	4643      	mov	r3, r8
 800224a:	07df      	lsls	r7, r3, #31
 800224c:	e62a      	b.n	8001ea4 <__aeabi_ddiv+0x100>
 800224e:	f001 f9cd 	bl	80035ec <__clzsi2>
 8002252:	2315      	movs	r3, #21
 8002254:	469c      	mov	ip, r3
 8002256:	4484      	add	ip, r0
 8002258:	0002      	movs	r2, r0
 800225a:	4663      	mov	r3, ip
 800225c:	3220      	adds	r2, #32
 800225e:	2b1c      	cmp	r3, #28
 8002260:	dc00      	bgt.n	8002264 <__aeabi_ddiv+0x4c0>
 8002262:	e72e      	b.n	80020c2 <__aeabi_ddiv+0x31e>
 8002264:	0023      	movs	r3, r4
 8002266:	3808      	subs	r0, #8
 8002268:	4083      	lsls	r3, r0
 800226a:	4699      	mov	r9, r3
 800226c:	2300      	movs	r3, #0
 800226e:	4698      	mov	r8, r3
 8002270:	e736      	b.n	80020e0 <__aeabi_ddiv+0x33c>
 8002272:	f001 f9bb 	bl	80035ec <__clzsi2>
 8002276:	0002      	movs	r2, r0
 8002278:	0003      	movs	r3, r0
 800227a:	3215      	adds	r2, #21
 800227c:	3320      	adds	r3, #32
 800227e:	2a1c      	cmp	r2, #28
 8002280:	dc00      	bgt.n	8002284 <__aeabi_ddiv+0x4e0>
 8002282:	e6fb      	b.n	800207c <__aeabi_ddiv+0x2d8>
 8002284:	9900      	ldr	r1, [sp, #0]
 8002286:	3808      	subs	r0, #8
 8002288:	4081      	lsls	r1, r0
 800228a:	2200      	movs	r2, #0
 800228c:	468b      	mov	fp, r1
 800228e:	e702      	b.n	8002096 <__aeabi_ddiv+0x2f2>
 8002290:	9900      	ldr	r1, [sp, #0]
 8002292:	3b01      	subs	r3, #1
 8002294:	468c      	mov	ip, r1
 8002296:	4464      	add	r4, ip
 8002298:	42a1      	cmp	r1, r4
 800229a:	d900      	bls.n	800229e <__aeabi_ddiv+0x4fa>
 800229c:	e69a      	b.n	8001fd4 <__aeabi_ddiv+0x230>
 800229e:	42a2      	cmp	r2, r4
 80022a0:	d800      	bhi.n	80022a4 <__aeabi_ddiv+0x500>
 80022a2:	e697      	b.n	8001fd4 <__aeabi_ddiv+0x230>
 80022a4:	1e83      	subs	r3, r0, #2
 80022a6:	4464      	add	r4, ip
 80022a8:	e694      	b.n	8001fd4 <__aeabi_ddiv+0x230>
 80022aa:	46ac      	mov	ip, r5
 80022ac:	4461      	add	r1, ip
 80022ae:	3f01      	subs	r7, #1
 80022b0:	428d      	cmp	r5, r1
 80022b2:	d900      	bls.n	80022b6 <__aeabi_ddiv+0x512>
 80022b4:	e680      	b.n	8001fb8 <__aeabi_ddiv+0x214>
 80022b6:	428a      	cmp	r2, r1
 80022b8:	d800      	bhi.n	80022bc <__aeabi_ddiv+0x518>
 80022ba:	e67d      	b.n	8001fb8 <__aeabi_ddiv+0x214>
 80022bc:	1e87      	subs	r7, r0, #2
 80022be:	4461      	add	r1, ip
 80022c0:	e67a      	b.n	8001fb8 <__aeabi_ddiv+0x214>
 80022c2:	4285      	cmp	r5, r0
 80022c4:	d000      	beq.n	80022c8 <__aeabi_ddiv+0x524>
 80022c6:	e65f      	b.n	8001f88 <__aeabi_ddiv+0x1e4>
 80022c8:	45b9      	cmp	r9, r7
 80022ca:	d900      	bls.n	80022ce <__aeabi_ddiv+0x52a>
 80022cc:	e65c      	b.n	8001f88 <__aeabi_ddiv+0x1e4>
 80022ce:	e656      	b.n	8001f7e <__aeabi_ddiv+0x1da>
 80022d0:	42a2      	cmp	r2, r4
 80022d2:	d800      	bhi.n	80022d6 <__aeabi_ddiv+0x532>
 80022d4:	e61a      	b.n	8001f0c <__aeabi_ddiv+0x168>
 80022d6:	1e83      	subs	r3, r0, #2
 80022d8:	4464      	add	r4, ip
 80022da:	e617      	b.n	8001f0c <__aeabi_ddiv+0x168>
 80022dc:	428a      	cmp	r2, r1
 80022de:	d800      	bhi.n	80022e2 <__aeabi_ddiv+0x53e>
 80022e0:	e600      	b.n	8001ee4 <__aeabi_ddiv+0x140>
 80022e2:	46ac      	mov	ip, r5
 80022e4:	1e83      	subs	r3, r0, #2
 80022e6:	4698      	mov	r8, r3
 80022e8:	4461      	add	r1, ip
 80022ea:	e5fb      	b.n	8001ee4 <__aeabi_ddiv+0x140>
 80022ec:	4837      	ldr	r0, [pc, #220]	@ (80023cc <__aeabi_ddiv+0x628>)
 80022ee:	0014      	movs	r4, r2
 80022f0:	4450      	add	r0, sl
 80022f2:	4082      	lsls	r2, r0
 80022f4:	465b      	mov	r3, fp
 80022f6:	0017      	movs	r7, r2
 80022f8:	4083      	lsls	r3, r0
 80022fa:	40cc      	lsrs	r4, r1
 80022fc:	1e7a      	subs	r2, r7, #1
 80022fe:	4197      	sbcs	r7, r2
 8002300:	4323      	orrs	r3, r4
 8002302:	433b      	orrs	r3, r7
 8002304:	001a      	movs	r2, r3
 8002306:	465b      	mov	r3, fp
 8002308:	40cb      	lsrs	r3, r1
 800230a:	0751      	lsls	r1, r2, #29
 800230c:	d009      	beq.n	8002322 <__aeabi_ddiv+0x57e>
 800230e:	210f      	movs	r1, #15
 8002310:	4011      	ands	r1, r2
 8002312:	2904      	cmp	r1, #4
 8002314:	d005      	beq.n	8002322 <__aeabi_ddiv+0x57e>
 8002316:	1d11      	adds	r1, r2, #4
 8002318:	4291      	cmp	r1, r2
 800231a:	4192      	sbcs	r2, r2
 800231c:	4252      	negs	r2, r2
 800231e:	189b      	adds	r3, r3, r2
 8002320:	000a      	movs	r2, r1
 8002322:	0219      	lsls	r1, r3, #8
 8002324:	d400      	bmi.n	8002328 <__aeabi_ddiv+0x584>
 8002326:	e755      	b.n	80021d4 <__aeabi_ddiv+0x430>
 8002328:	2200      	movs	r2, #0
 800232a:	2301      	movs	r3, #1
 800232c:	2400      	movs	r4, #0
 800232e:	4690      	mov	r8, r2
 8002330:	e598      	b.n	8001e64 <__aeabi_ddiv+0xc0>
 8002332:	000a      	movs	r2, r1
 8002334:	42bc      	cmp	r4, r7
 8002336:	d000      	beq.n	800233a <__aeabi_ddiv+0x596>
 8002338:	e66e      	b.n	8002018 <__aeabi_ddiv+0x274>
 800233a:	454b      	cmp	r3, r9
 800233c:	d000      	beq.n	8002340 <__aeabi_ddiv+0x59c>
 800233e:	e66b      	b.n	8002018 <__aeabi_ddiv+0x274>
 8002340:	e66c      	b.n	800201c <__aeabi_ddiv+0x278>
 8002342:	4b23      	ldr	r3, [pc, #140]	@ (80023d0 <__aeabi_ddiv+0x62c>)
 8002344:	4a23      	ldr	r2, [pc, #140]	@ (80023d4 <__aeabi_ddiv+0x630>)
 8002346:	4453      	add	r3, sl
 8002348:	4592      	cmp	sl, r2
 800234a:	da00      	bge.n	800234e <__aeabi_ddiv+0x5aa>
 800234c:	e718      	b.n	8002180 <__aeabi_ddiv+0x3dc>
 800234e:	2101      	movs	r1, #1
 8002350:	4249      	negs	r1, r1
 8002352:	1d0a      	adds	r2, r1, #4
 8002354:	428a      	cmp	r2, r1
 8002356:	4189      	sbcs	r1, r1
 8002358:	4249      	negs	r1, r1
 800235a:	448b      	add	fp, r1
 800235c:	e666      	b.n	800202c <__aeabi_ddiv+0x288>
 800235e:	210f      	movs	r1, #15
 8002360:	4011      	ands	r1, r2
 8002362:	2904      	cmp	r1, #4
 8002364:	d100      	bne.n	8002368 <__aeabi_ddiv+0x5c4>
 8002366:	e661      	b.n	800202c <__aeabi_ddiv+0x288>
 8002368:	0011      	movs	r1, r2
 800236a:	e7f2      	b.n	8002352 <__aeabi_ddiv+0x5ae>
 800236c:	42bc      	cmp	r4, r7
 800236e:	d800      	bhi.n	8002372 <__aeabi_ddiv+0x5ce>
 8002370:	e60a      	b.n	8001f88 <__aeabi_ddiv+0x1e4>
 8002372:	2302      	movs	r3, #2
 8002374:	425b      	negs	r3, r3
 8002376:	469c      	mov	ip, r3
 8002378:	9900      	ldr	r1, [sp, #0]
 800237a:	444f      	add	r7, r9
 800237c:	454f      	cmp	r7, r9
 800237e:	419b      	sbcs	r3, r3
 8002380:	44e3      	add	fp, ip
 8002382:	468c      	mov	ip, r1
 8002384:	425b      	negs	r3, r3
 8002386:	4463      	add	r3, ip
 8002388:	18c0      	adds	r0, r0, r3
 800238a:	e5ff      	b.n	8001f8c <__aeabi_ddiv+0x1e8>
 800238c:	4649      	mov	r1, r9
 800238e:	9d00      	ldr	r5, [sp, #0]
 8002390:	0048      	lsls	r0, r1, #1
 8002392:	4548      	cmp	r0, r9
 8002394:	4189      	sbcs	r1, r1
 8002396:	46ac      	mov	ip, r5
 8002398:	4249      	negs	r1, r1
 800239a:	4461      	add	r1, ip
 800239c:	4681      	mov	r9, r0
 800239e:	3a02      	subs	r2, #2
 80023a0:	1864      	adds	r4, r4, r1
 80023a2:	e7c7      	b.n	8002334 <__aeabi_ddiv+0x590>
 80023a4:	2480      	movs	r4, #128	@ 0x80
 80023a6:	465b      	mov	r3, fp
 80023a8:	0324      	lsls	r4, r4, #12
 80023aa:	431c      	orrs	r4, r3
 80023ac:	0324      	lsls	r4, r4, #12
 80023ae:	4690      	mov	r8, r2
 80023b0:	4b04      	ldr	r3, [pc, #16]	@ (80023c4 <__aeabi_ddiv+0x620>)
 80023b2:	0b24      	lsrs	r4, r4, #12
 80023b4:	e556      	b.n	8001e64 <__aeabi_ddiv+0xc0>
 80023b6:	4599      	cmp	r9, r3
 80023b8:	d3e8      	bcc.n	800238c <__aeabi_ddiv+0x5e8>
 80023ba:	000a      	movs	r2, r1
 80023bc:	e7bd      	b.n	800233a <__aeabi_ddiv+0x596>
 80023be:	2300      	movs	r3, #0
 80023c0:	e708      	b.n	80021d4 <__aeabi_ddiv+0x430>
 80023c2:	46c0      	nop			@ (mov r8, r8)
 80023c4:	000007ff 	.word	0x000007ff
 80023c8:	0000043e 	.word	0x0000043e
 80023cc:	0000041e 	.word	0x0000041e
 80023d0:	000003ff 	.word	0x000003ff
 80023d4:	fffffc02 	.word	0xfffffc02

080023d8 <__eqdf2>:
 80023d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023da:	4657      	mov	r7, sl
 80023dc:	46de      	mov	lr, fp
 80023de:	464e      	mov	r6, r9
 80023e0:	4645      	mov	r5, r8
 80023e2:	b5e0      	push	{r5, r6, r7, lr}
 80023e4:	000d      	movs	r5, r1
 80023e6:	0004      	movs	r4, r0
 80023e8:	0fe8      	lsrs	r0, r5, #31
 80023ea:	4683      	mov	fp, r0
 80023ec:	0309      	lsls	r1, r1, #12
 80023ee:	0fd8      	lsrs	r0, r3, #31
 80023f0:	0b09      	lsrs	r1, r1, #12
 80023f2:	4682      	mov	sl, r0
 80023f4:	4819      	ldr	r0, [pc, #100]	@ (800245c <__eqdf2+0x84>)
 80023f6:	468c      	mov	ip, r1
 80023f8:	031f      	lsls	r7, r3, #12
 80023fa:	0069      	lsls	r1, r5, #1
 80023fc:	005e      	lsls	r6, r3, #1
 80023fe:	0d49      	lsrs	r1, r1, #21
 8002400:	0b3f      	lsrs	r7, r7, #12
 8002402:	0d76      	lsrs	r6, r6, #21
 8002404:	4281      	cmp	r1, r0
 8002406:	d018      	beq.n	800243a <__eqdf2+0x62>
 8002408:	4286      	cmp	r6, r0
 800240a:	d00f      	beq.n	800242c <__eqdf2+0x54>
 800240c:	2001      	movs	r0, #1
 800240e:	42b1      	cmp	r1, r6
 8002410:	d10d      	bne.n	800242e <__eqdf2+0x56>
 8002412:	45bc      	cmp	ip, r7
 8002414:	d10b      	bne.n	800242e <__eqdf2+0x56>
 8002416:	4294      	cmp	r4, r2
 8002418:	d109      	bne.n	800242e <__eqdf2+0x56>
 800241a:	45d3      	cmp	fp, sl
 800241c:	d01c      	beq.n	8002458 <__eqdf2+0x80>
 800241e:	2900      	cmp	r1, #0
 8002420:	d105      	bne.n	800242e <__eqdf2+0x56>
 8002422:	4660      	mov	r0, ip
 8002424:	4320      	orrs	r0, r4
 8002426:	1e43      	subs	r3, r0, #1
 8002428:	4198      	sbcs	r0, r3
 800242a:	e000      	b.n	800242e <__eqdf2+0x56>
 800242c:	2001      	movs	r0, #1
 800242e:	bcf0      	pop	{r4, r5, r6, r7}
 8002430:	46bb      	mov	fp, r7
 8002432:	46b2      	mov	sl, r6
 8002434:	46a9      	mov	r9, r5
 8002436:	46a0      	mov	r8, r4
 8002438:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800243a:	2001      	movs	r0, #1
 800243c:	428e      	cmp	r6, r1
 800243e:	d1f6      	bne.n	800242e <__eqdf2+0x56>
 8002440:	4661      	mov	r1, ip
 8002442:	4339      	orrs	r1, r7
 8002444:	000f      	movs	r7, r1
 8002446:	4317      	orrs	r7, r2
 8002448:	4327      	orrs	r7, r4
 800244a:	d1f0      	bne.n	800242e <__eqdf2+0x56>
 800244c:	465b      	mov	r3, fp
 800244e:	4652      	mov	r2, sl
 8002450:	1a98      	subs	r0, r3, r2
 8002452:	1e43      	subs	r3, r0, #1
 8002454:	4198      	sbcs	r0, r3
 8002456:	e7ea      	b.n	800242e <__eqdf2+0x56>
 8002458:	2000      	movs	r0, #0
 800245a:	e7e8      	b.n	800242e <__eqdf2+0x56>
 800245c:	000007ff 	.word	0x000007ff

08002460 <__gedf2>:
 8002460:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002462:	4657      	mov	r7, sl
 8002464:	464e      	mov	r6, r9
 8002466:	4645      	mov	r5, r8
 8002468:	46de      	mov	lr, fp
 800246a:	b5e0      	push	{r5, r6, r7, lr}
 800246c:	000d      	movs	r5, r1
 800246e:	030f      	lsls	r7, r1, #12
 8002470:	0b39      	lsrs	r1, r7, #12
 8002472:	b083      	sub	sp, #12
 8002474:	0004      	movs	r4, r0
 8002476:	4680      	mov	r8, r0
 8002478:	9101      	str	r1, [sp, #4]
 800247a:	0058      	lsls	r0, r3, #1
 800247c:	0fe9      	lsrs	r1, r5, #31
 800247e:	4f31      	ldr	r7, [pc, #196]	@ (8002544 <__gedf2+0xe4>)
 8002480:	0d40      	lsrs	r0, r0, #21
 8002482:	468c      	mov	ip, r1
 8002484:	006e      	lsls	r6, r5, #1
 8002486:	0319      	lsls	r1, r3, #12
 8002488:	4682      	mov	sl, r0
 800248a:	4691      	mov	r9, r2
 800248c:	0d76      	lsrs	r6, r6, #21
 800248e:	0b09      	lsrs	r1, r1, #12
 8002490:	0fd8      	lsrs	r0, r3, #31
 8002492:	42be      	cmp	r6, r7
 8002494:	d01f      	beq.n	80024d6 <__gedf2+0x76>
 8002496:	45ba      	cmp	sl, r7
 8002498:	d00f      	beq.n	80024ba <__gedf2+0x5a>
 800249a:	2e00      	cmp	r6, #0
 800249c:	d12f      	bne.n	80024fe <__gedf2+0x9e>
 800249e:	4655      	mov	r5, sl
 80024a0:	9e01      	ldr	r6, [sp, #4]
 80024a2:	4334      	orrs	r4, r6
 80024a4:	2d00      	cmp	r5, #0
 80024a6:	d127      	bne.n	80024f8 <__gedf2+0x98>
 80024a8:	430a      	orrs	r2, r1
 80024aa:	d03a      	beq.n	8002522 <__gedf2+0xc2>
 80024ac:	2c00      	cmp	r4, #0
 80024ae:	d145      	bne.n	800253c <__gedf2+0xdc>
 80024b0:	2800      	cmp	r0, #0
 80024b2:	d11a      	bne.n	80024ea <__gedf2+0x8a>
 80024b4:	2001      	movs	r0, #1
 80024b6:	4240      	negs	r0, r0
 80024b8:	e017      	b.n	80024ea <__gedf2+0x8a>
 80024ba:	4311      	orrs	r1, r2
 80024bc:	d13b      	bne.n	8002536 <__gedf2+0xd6>
 80024be:	2e00      	cmp	r6, #0
 80024c0:	d102      	bne.n	80024c8 <__gedf2+0x68>
 80024c2:	9f01      	ldr	r7, [sp, #4]
 80024c4:	4327      	orrs	r7, r4
 80024c6:	d0f3      	beq.n	80024b0 <__gedf2+0x50>
 80024c8:	4584      	cmp	ip, r0
 80024ca:	d109      	bne.n	80024e0 <__gedf2+0x80>
 80024cc:	4663      	mov	r3, ip
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d0f0      	beq.n	80024b4 <__gedf2+0x54>
 80024d2:	4660      	mov	r0, ip
 80024d4:	e009      	b.n	80024ea <__gedf2+0x8a>
 80024d6:	9f01      	ldr	r7, [sp, #4]
 80024d8:	4327      	orrs	r7, r4
 80024da:	d12c      	bne.n	8002536 <__gedf2+0xd6>
 80024dc:	45b2      	cmp	sl, r6
 80024de:	d024      	beq.n	800252a <__gedf2+0xca>
 80024e0:	4663      	mov	r3, ip
 80024e2:	2002      	movs	r0, #2
 80024e4:	3b01      	subs	r3, #1
 80024e6:	4018      	ands	r0, r3
 80024e8:	3801      	subs	r0, #1
 80024ea:	b003      	add	sp, #12
 80024ec:	bcf0      	pop	{r4, r5, r6, r7}
 80024ee:	46bb      	mov	fp, r7
 80024f0:	46b2      	mov	sl, r6
 80024f2:	46a9      	mov	r9, r5
 80024f4:	46a0      	mov	r8, r4
 80024f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024f8:	2c00      	cmp	r4, #0
 80024fa:	d0d9      	beq.n	80024b0 <__gedf2+0x50>
 80024fc:	e7e4      	b.n	80024c8 <__gedf2+0x68>
 80024fe:	4654      	mov	r4, sl
 8002500:	2c00      	cmp	r4, #0
 8002502:	d0ed      	beq.n	80024e0 <__gedf2+0x80>
 8002504:	4584      	cmp	ip, r0
 8002506:	d1eb      	bne.n	80024e0 <__gedf2+0x80>
 8002508:	4556      	cmp	r6, sl
 800250a:	dce9      	bgt.n	80024e0 <__gedf2+0x80>
 800250c:	dbde      	blt.n	80024cc <__gedf2+0x6c>
 800250e:	9b01      	ldr	r3, [sp, #4]
 8002510:	428b      	cmp	r3, r1
 8002512:	d8e5      	bhi.n	80024e0 <__gedf2+0x80>
 8002514:	d1da      	bne.n	80024cc <__gedf2+0x6c>
 8002516:	45c8      	cmp	r8, r9
 8002518:	d8e2      	bhi.n	80024e0 <__gedf2+0x80>
 800251a:	2000      	movs	r0, #0
 800251c:	45c8      	cmp	r8, r9
 800251e:	d2e4      	bcs.n	80024ea <__gedf2+0x8a>
 8002520:	e7d4      	b.n	80024cc <__gedf2+0x6c>
 8002522:	2000      	movs	r0, #0
 8002524:	2c00      	cmp	r4, #0
 8002526:	d0e0      	beq.n	80024ea <__gedf2+0x8a>
 8002528:	e7da      	b.n	80024e0 <__gedf2+0x80>
 800252a:	4311      	orrs	r1, r2
 800252c:	d103      	bne.n	8002536 <__gedf2+0xd6>
 800252e:	4584      	cmp	ip, r0
 8002530:	d1d6      	bne.n	80024e0 <__gedf2+0x80>
 8002532:	2000      	movs	r0, #0
 8002534:	e7d9      	b.n	80024ea <__gedf2+0x8a>
 8002536:	2002      	movs	r0, #2
 8002538:	4240      	negs	r0, r0
 800253a:	e7d6      	b.n	80024ea <__gedf2+0x8a>
 800253c:	4584      	cmp	ip, r0
 800253e:	d0e6      	beq.n	800250e <__gedf2+0xae>
 8002540:	e7ce      	b.n	80024e0 <__gedf2+0x80>
 8002542:	46c0      	nop			@ (mov r8, r8)
 8002544:	000007ff 	.word	0x000007ff

08002548 <__ledf2>:
 8002548:	b5f0      	push	{r4, r5, r6, r7, lr}
 800254a:	4657      	mov	r7, sl
 800254c:	464e      	mov	r6, r9
 800254e:	4645      	mov	r5, r8
 8002550:	46de      	mov	lr, fp
 8002552:	b5e0      	push	{r5, r6, r7, lr}
 8002554:	000d      	movs	r5, r1
 8002556:	030f      	lsls	r7, r1, #12
 8002558:	0004      	movs	r4, r0
 800255a:	4680      	mov	r8, r0
 800255c:	0fe8      	lsrs	r0, r5, #31
 800255e:	0b39      	lsrs	r1, r7, #12
 8002560:	4684      	mov	ip, r0
 8002562:	b083      	sub	sp, #12
 8002564:	0058      	lsls	r0, r3, #1
 8002566:	4f30      	ldr	r7, [pc, #192]	@ (8002628 <__ledf2+0xe0>)
 8002568:	0d40      	lsrs	r0, r0, #21
 800256a:	9101      	str	r1, [sp, #4]
 800256c:	031e      	lsls	r6, r3, #12
 800256e:	0069      	lsls	r1, r5, #1
 8002570:	4682      	mov	sl, r0
 8002572:	4691      	mov	r9, r2
 8002574:	0d49      	lsrs	r1, r1, #21
 8002576:	0b36      	lsrs	r6, r6, #12
 8002578:	0fd8      	lsrs	r0, r3, #31
 800257a:	42b9      	cmp	r1, r7
 800257c:	d020      	beq.n	80025c0 <__ledf2+0x78>
 800257e:	45ba      	cmp	sl, r7
 8002580:	d00f      	beq.n	80025a2 <__ledf2+0x5a>
 8002582:	2900      	cmp	r1, #0
 8002584:	d12b      	bne.n	80025de <__ledf2+0x96>
 8002586:	9901      	ldr	r1, [sp, #4]
 8002588:	430c      	orrs	r4, r1
 800258a:	4651      	mov	r1, sl
 800258c:	2900      	cmp	r1, #0
 800258e:	d137      	bne.n	8002600 <__ledf2+0xb8>
 8002590:	4332      	orrs	r2, r6
 8002592:	d038      	beq.n	8002606 <__ledf2+0xbe>
 8002594:	2c00      	cmp	r4, #0
 8002596:	d144      	bne.n	8002622 <__ledf2+0xda>
 8002598:	2800      	cmp	r0, #0
 800259a:	d119      	bne.n	80025d0 <__ledf2+0x88>
 800259c:	2001      	movs	r0, #1
 800259e:	4240      	negs	r0, r0
 80025a0:	e016      	b.n	80025d0 <__ledf2+0x88>
 80025a2:	4316      	orrs	r6, r2
 80025a4:	d113      	bne.n	80025ce <__ledf2+0x86>
 80025a6:	2900      	cmp	r1, #0
 80025a8:	d102      	bne.n	80025b0 <__ledf2+0x68>
 80025aa:	9f01      	ldr	r7, [sp, #4]
 80025ac:	4327      	orrs	r7, r4
 80025ae:	d0f3      	beq.n	8002598 <__ledf2+0x50>
 80025b0:	4584      	cmp	ip, r0
 80025b2:	d020      	beq.n	80025f6 <__ledf2+0xae>
 80025b4:	4663      	mov	r3, ip
 80025b6:	2002      	movs	r0, #2
 80025b8:	3b01      	subs	r3, #1
 80025ba:	4018      	ands	r0, r3
 80025bc:	3801      	subs	r0, #1
 80025be:	e007      	b.n	80025d0 <__ledf2+0x88>
 80025c0:	9f01      	ldr	r7, [sp, #4]
 80025c2:	4327      	orrs	r7, r4
 80025c4:	d103      	bne.n	80025ce <__ledf2+0x86>
 80025c6:	458a      	cmp	sl, r1
 80025c8:	d1f4      	bne.n	80025b4 <__ledf2+0x6c>
 80025ca:	4316      	orrs	r6, r2
 80025cc:	d01f      	beq.n	800260e <__ledf2+0xc6>
 80025ce:	2002      	movs	r0, #2
 80025d0:	b003      	add	sp, #12
 80025d2:	bcf0      	pop	{r4, r5, r6, r7}
 80025d4:	46bb      	mov	fp, r7
 80025d6:	46b2      	mov	sl, r6
 80025d8:	46a9      	mov	r9, r5
 80025da:	46a0      	mov	r8, r4
 80025dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025de:	4654      	mov	r4, sl
 80025e0:	2c00      	cmp	r4, #0
 80025e2:	d0e7      	beq.n	80025b4 <__ledf2+0x6c>
 80025e4:	4584      	cmp	ip, r0
 80025e6:	d1e5      	bne.n	80025b4 <__ledf2+0x6c>
 80025e8:	4551      	cmp	r1, sl
 80025ea:	dce3      	bgt.n	80025b4 <__ledf2+0x6c>
 80025ec:	db03      	blt.n	80025f6 <__ledf2+0xae>
 80025ee:	9b01      	ldr	r3, [sp, #4]
 80025f0:	42b3      	cmp	r3, r6
 80025f2:	d8df      	bhi.n	80025b4 <__ledf2+0x6c>
 80025f4:	d00f      	beq.n	8002616 <__ledf2+0xce>
 80025f6:	4663      	mov	r3, ip
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d0cf      	beq.n	800259c <__ledf2+0x54>
 80025fc:	4660      	mov	r0, ip
 80025fe:	e7e7      	b.n	80025d0 <__ledf2+0x88>
 8002600:	2c00      	cmp	r4, #0
 8002602:	d0c9      	beq.n	8002598 <__ledf2+0x50>
 8002604:	e7d4      	b.n	80025b0 <__ledf2+0x68>
 8002606:	2000      	movs	r0, #0
 8002608:	2c00      	cmp	r4, #0
 800260a:	d0e1      	beq.n	80025d0 <__ledf2+0x88>
 800260c:	e7d2      	b.n	80025b4 <__ledf2+0x6c>
 800260e:	4584      	cmp	ip, r0
 8002610:	d1d0      	bne.n	80025b4 <__ledf2+0x6c>
 8002612:	2000      	movs	r0, #0
 8002614:	e7dc      	b.n	80025d0 <__ledf2+0x88>
 8002616:	45c8      	cmp	r8, r9
 8002618:	d8cc      	bhi.n	80025b4 <__ledf2+0x6c>
 800261a:	2000      	movs	r0, #0
 800261c:	45c8      	cmp	r8, r9
 800261e:	d2d7      	bcs.n	80025d0 <__ledf2+0x88>
 8002620:	e7e9      	b.n	80025f6 <__ledf2+0xae>
 8002622:	4584      	cmp	ip, r0
 8002624:	d0e3      	beq.n	80025ee <__ledf2+0xa6>
 8002626:	e7c5      	b.n	80025b4 <__ledf2+0x6c>
 8002628:	000007ff 	.word	0x000007ff

0800262c <__aeabi_dmul>:
 800262c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800262e:	4657      	mov	r7, sl
 8002630:	46de      	mov	lr, fp
 8002632:	464e      	mov	r6, r9
 8002634:	4645      	mov	r5, r8
 8002636:	b5e0      	push	{r5, r6, r7, lr}
 8002638:	001f      	movs	r7, r3
 800263a:	030b      	lsls	r3, r1, #12
 800263c:	0b1b      	lsrs	r3, r3, #12
 800263e:	0016      	movs	r6, r2
 8002640:	469a      	mov	sl, r3
 8002642:	0fca      	lsrs	r2, r1, #31
 8002644:	004b      	lsls	r3, r1, #1
 8002646:	0004      	movs	r4, r0
 8002648:	4693      	mov	fp, r2
 800264a:	b087      	sub	sp, #28
 800264c:	0d5b      	lsrs	r3, r3, #21
 800264e:	d100      	bne.n	8002652 <__aeabi_dmul+0x26>
 8002650:	e0d5      	b.n	80027fe <__aeabi_dmul+0x1d2>
 8002652:	4abb      	ldr	r2, [pc, #748]	@ (8002940 <__aeabi_dmul+0x314>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d100      	bne.n	800265a <__aeabi_dmul+0x2e>
 8002658:	e0f8      	b.n	800284c <__aeabi_dmul+0x220>
 800265a:	4651      	mov	r1, sl
 800265c:	0f42      	lsrs	r2, r0, #29
 800265e:	00c9      	lsls	r1, r1, #3
 8002660:	430a      	orrs	r2, r1
 8002662:	2180      	movs	r1, #128	@ 0x80
 8002664:	0409      	lsls	r1, r1, #16
 8002666:	4311      	orrs	r1, r2
 8002668:	00c2      	lsls	r2, r0, #3
 800266a:	4691      	mov	r9, r2
 800266c:	4ab5      	ldr	r2, [pc, #724]	@ (8002944 <__aeabi_dmul+0x318>)
 800266e:	468a      	mov	sl, r1
 8002670:	189d      	adds	r5, r3, r2
 8002672:	2300      	movs	r3, #0
 8002674:	4698      	mov	r8, r3
 8002676:	9302      	str	r3, [sp, #8]
 8002678:	033c      	lsls	r4, r7, #12
 800267a:	007b      	lsls	r3, r7, #1
 800267c:	0ffa      	lsrs	r2, r7, #31
 800267e:	0030      	movs	r0, r6
 8002680:	0b24      	lsrs	r4, r4, #12
 8002682:	0d5b      	lsrs	r3, r3, #21
 8002684:	9200      	str	r2, [sp, #0]
 8002686:	d100      	bne.n	800268a <__aeabi_dmul+0x5e>
 8002688:	e096      	b.n	80027b8 <__aeabi_dmul+0x18c>
 800268a:	4aad      	ldr	r2, [pc, #692]	@ (8002940 <__aeabi_dmul+0x314>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d031      	beq.n	80026f4 <__aeabi_dmul+0xc8>
 8002690:	0f72      	lsrs	r2, r6, #29
 8002692:	00e4      	lsls	r4, r4, #3
 8002694:	4322      	orrs	r2, r4
 8002696:	2480      	movs	r4, #128	@ 0x80
 8002698:	0424      	lsls	r4, r4, #16
 800269a:	4314      	orrs	r4, r2
 800269c:	4aa9      	ldr	r2, [pc, #676]	@ (8002944 <__aeabi_dmul+0x318>)
 800269e:	00f0      	lsls	r0, r6, #3
 80026a0:	4694      	mov	ip, r2
 80026a2:	4463      	add	r3, ip
 80026a4:	195b      	adds	r3, r3, r5
 80026a6:	1c5a      	adds	r2, r3, #1
 80026a8:	9201      	str	r2, [sp, #4]
 80026aa:	4642      	mov	r2, r8
 80026ac:	2600      	movs	r6, #0
 80026ae:	2a0a      	cmp	r2, #10
 80026b0:	dc42      	bgt.n	8002738 <__aeabi_dmul+0x10c>
 80026b2:	465a      	mov	r2, fp
 80026b4:	9900      	ldr	r1, [sp, #0]
 80026b6:	404a      	eors	r2, r1
 80026b8:	4693      	mov	fp, r2
 80026ba:	4642      	mov	r2, r8
 80026bc:	2a02      	cmp	r2, #2
 80026be:	dc32      	bgt.n	8002726 <__aeabi_dmul+0xfa>
 80026c0:	3a01      	subs	r2, #1
 80026c2:	2a01      	cmp	r2, #1
 80026c4:	d900      	bls.n	80026c8 <__aeabi_dmul+0x9c>
 80026c6:	e149      	b.n	800295c <__aeabi_dmul+0x330>
 80026c8:	2e02      	cmp	r6, #2
 80026ca:	d100      	bne.n	80026ce <__aeabi_dmul+0xa2>
 80026cc:	e0ca      	b.n	8002864 <__aeabi_dmul+0x238>
 80026ce:	2e01      	cmp	r6, #1
 80026d0:	d13d      	bne.n	800274e <__aeabi_dmul+0x122>
 80026d2:	2300      	movs	r3, #0
 80026d4:	2400      	movs	r4, #0
 80026d6:	2200      	movs	r2, #0
 80026d8:	0010      	movs	r0, r2
 80026da:	465a      	mov	r2, fp
 80026dc:	051b      	lsls	r3, r3, #20
 80026de:	4323      	orrs	r3, r4
 80026e0:	07d2      	lsls	r2, r2, #31
 80026e2:	4313      	orrs	r3, r2
 80026e4:	0019      	movs	r1, r3
 80026e6:	b007      	add	sp, #28
 80026e8:	bcf0      	pop	{r4, r5, r6, r7}
 80026ea:	46bb      	mov	fp, r7
 80026ec:	46b2      	mov	sl, r6
 80026ee:	46a9      	mov	r9, r5
 80026f0:	46a0      	mov	r8, r4
 80026f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026f4:	4b92      	ldr	r3, [pc, #584]	@ (8002940 <__aeabi_dmul+0x314>)
 80026f6:	4326      	orrs	r6, r4
 80026f8:	18eb      	adds	r3, r5, r3
 80026fa:	2e00      	cmp	r6, #0
 80026fc:	d100      	bne.n	8002700 <__aeabi_dmul+0xd4>
 80026fe:	e0bb      	b.n	8002878 <__aeabi_dmul+0x24c>
 8002700:	2203      	movs	r2, #3
 8002702:	4641      	mov	r1, r8
 8002704:	4311      	orrs	r1, r2
 8002706:	465a      	mov	r2, fp
 8002708:	4688      	mov	r8, r1
 800270a:	9900      	ldr	r1, [sp, #0]
 800270c:	404a      	eors	r2, r1
 800270e:	2180      	movs	r1, #128	@ 0x80
 8002710:	0109      	lsls	r1, r1, #4
 8002712:	468c      	mov	ip, r1
 8002714:	0029      	movs	r1, r5
 8002716:	4461      	add	r1, ip
 8002718:	9101      	str	r1, [sp, #4]
 800271a:	4641      	mov	r1, r8
 800271c:	290a      	cmp	r1, #10
 800271e:	dd00      	ble.n	8002722 <__aeabi_dmul+0xf6>
 8002720:	e233      	b.n	8002b8a <__aeabi_dmul+0x55e>
 8002722:	4693      	mov	fp, r2
 8002724:	2603      	movs	r6, #3
 8002726:	4642      	mov	r2, r8
 8002728:	2701      	movs	r7, #1
 800272a:	4097      	lsls	r7, r2
 800272c:	21a6      	movs	r1, #166	@ 0xa6
 800272e:	003a      	movs	r2, r7
 8002730:	00c9      	lsls	r1, r1, #3
 8002732:	400a      	ands	r2, r1
 8002734:	420f      	tst	r7, r1
 8002736:	d031      	beq.n	800279c <__aeabi_dmul+0x170>
 8002738:	9e02      	ldr	r6, [sp, #8]
 800273a:	2e02      	cmp	r6, #2
 800273c:	d100      	bne.n	8002740 <__aeabi_dmul+0x114>
 800273e:	e235      	b.n	8002bac <__aeabi_dmul+0x580>
 8002740:	2e03      	cmp	r6, #3
 8002742:	d100      	bne.n	8002746 <__aeabi_dmul+0x11a>
 8002744:	e1d2      	b.n	8002aec <__aeabi_dmul+0x4c0>
 8002746:	4654      	mov	r4, sl
 8002748:	4648      	mov	r0, r9
 800274a:	2e01      	cmp	r6, #1
 800274c:	d0c1      	beq.n	80026d2 <__aeabi_dmul+0xa6>
 800274e:	9a01      	ldr	r2, [sp, #4]
 8002750:	4b7d      	ldr	r3, [pc, #500]	@ (8002948 <__aeabi_dmul+0x31c>)
 8002752:	4694      	mov	ip, r2
 8002754:	4463      	add	r3, ip
 8002756:	2b00      	cmp	r3, #0
 8002758:	dc00      	bgt.n	800275c <__aeabi_dmul+0x130>
 800275a:	e0c0      	b.n	80028de <__aeabi_dmul+0x2b2>
 800275c:	0742      	lsls	r2, r0, #29
 800275e:	d009      	beq.n	8002774 <__aeabi_dmul+0x148>
 8002760:	220f      	movs	r2, #15
 8002762:	4002      	ands	r2, r0
 8002764:	2a04      	cmp	r2, #4
 8002766:	d005      	beq.n	8002774 <__aeabi_dmul+0x148>
 8002768:	1d02      	adds	r2, r0, #4
 800276a:	4282      	cmp	r2, r0
 800276c:	4180      	sbcs	r0, r0
 800276e:	4240      	negs	r0, r0
 8002770:	1824      	adds	r4, r4, r0
 8002772:	0010      	movs	r0, r2
 8002774:	01e2      	lsls	r2, r4, #7
 8002776:	d506      	bpl.n	8002786 <__aeabi_dmul+0x15a>
 8002778:	4b74      	ldr	r3, [pc, #464]	@ (800294c <__aeabi_dmul+0x320>)
 800277a:	9a01      	ldr	r2, [sp, #4]
 800277c:	401c      	ands	r4, r3
 800277e:	2380      	movs	r3, #128	@ 0x80
 8002780:	4694      	mov	ip, r2
 8002782:	00db      	lsls	r3, r3, #3
 8002784:	4463      	add	r3, ip
 8002786:	4a72      	ldr	r2, [pc, #456]	@ (8002950 <__aeabi_dmul+0x324>)
 8002788:	4293      	cmp	r3, r2
 800278a:	dc6b      	bgt.n	8002864 <__aeabi_dmul+0x238>
 800278c:	0762      	lsls	r2, r4, #29
 800278e:	08c0      	lsrs	r0, r0, #3
 8002790:	0264      	lsls	r4, r4, #9
 8002792:	055b      	lsls	r3, r3, #21
 8002794:	4302      	orrs	r2, r0
 8002796:	0b24      	lsrs	r4, r4, #12
 8002798:	0d5b      	lsrs	r3, r3, #21
 800279a:	e79d      	b.n	80026d8 <__aeabi_dmul+0xac>
 800279c:	2190      	movs	r1, #144	@ 0x90
 800279e:	0089      	lsls	r1, r1, #2
 80027a0:	420f      	tst	r7, r1
 80027a2:	d163      	bne.n	800286c <__aeabi_dmul+0x240>
 80027a4:	2288      	movs	r2, #136	@ 0x88
 80027a6:	423a      	tst	r2, r7
 80027a8:	d100      	bne.n	80027ac <__aeabi_dmul+0x180>
 80027aa:	e0d7      	b.n	800295c <__aeabi_dmul+0x330>
 80027ac:	9b00      	ldr	r3, [sp, #0]
 80027ae:	46a2      	mov	sl, r4
 80027b0:	469b      	mov	fp, r3
 80027b2:	4681      	mov	r9, r0
 80027b4:	9602      	str	r6, [sp, #8]
 80027b6:	e7bf      	b.n	8002738 <__aeabi_dmul+0x10c>
 80027b8:	0023      	movs	r3, r4
 80027ba:	4333      	orrs	r3, r6
 80027bc:	d100      	bne.n	80027c0 <__aeabi_dmul+0x194>
 80027be:	e07f      	b.n	80028c0 <__aeabi_dmul+0x294>
 80027c0:	2c00      	cmp	r4, #0
 80027c2:	d100      	bne.n	80027c6 <__aeabi_dmul+0x19a>
 80027c4:	e1ad      	b.n	8002b22 <__aeabi_dmul+0x4f6>
 80027c6:	0020      	movs	r0, r4
 80027c8:	f000 ff10 	bl	80035ec <__clzsi2>
 80027cc:	0002      	movs	r2, r0
 80027ce:	0003      	movs	r3, r0
 80027d0:	3a0b      	subs	r2, #11
 80027d2:	201d      	movs	r0, #29
 80027d4:	0019      	movs	r1, r3
 80027d6:	1a82      	subs	r2, r0, r2
 80027d8:	0030      	movs	r0, r6
 80027da:	3908      	subs	r1, #8
 80027dc:	40d0      	lsrs	r0, r2
 80027de:	408c      	lsls	r4, r1
 80027e0:	4304      	orrs	r4, r0
 80027e2:	0030      	movs	r0, r6
 80027e4:	4088      	lsls	r0, r1
 80027e6:	4a5b      	ldr	r2, [pc, #364]	@ (8002954 <__aeabi_dmul+0x328>)
 80027e8:	1aeb      	subs	r3, r5, r3
 80027ea:	4694      	mov	ip, r2
 80027ec:	4463      	add	r3, ip
 80027ee:	1c5a      	adds	r2, r3, #1
 80027f0:	9201      	str	r2, [sp, #4]
 80027f2:	4642      	mov	r2, r8
 80027f4:	2600      	movs	r6, #0
 80027f6:	2a0a      	cmp	r2, #10
 80027f8:	dc00      	bgt.n	80027fc <__aeabi_dmul+0x1d0>
 80027fa:	e75a      	b.n	80026b2 <__aeabi_dmul+0x86>
 80027fc:	e79c      	b.n	8002738 <__aeabi_dmul+0x10c>
 80027fe:	4653      	mov	r3, sl
 8002800:	4303      	orrs	r3, r0
 8002802:	4699      	mov	r9, r3
 8002804:	d054      	beq.n	80028b0 <__aeabi_dmul+0x284>
 8002806:	4653      	mov	r3, sl
 8002808:	2b00      	cmp	r3, #0
 800280a:	d100      	bne.n	800280e <__aeabi_dmul+0x1e2>
 800280c:	e177      	b.n	8002afe <__aeabi_dmul+0x4d2>
 800280e:	4650      	mov	r0, sl
 8002810:	f000 feec 	bl	80035ec <__clzsi2>
 8002814:	230b      	movs	r3, #11
 8002816:	425b      	negs	r3, r3
 8002818:	469c      	mov	ip, r3
 800281a:	0002      	movs	r2, r0
 800281c:	4484      	add	ip, r0
 800281e:	0011      	movs	r1, r2
 8002820:	4650      	mov	r0, sl
 8002822:	3908      	subs	r1, #8
 8002824:	4088      	lsls	r0, r1
 8002826:	231d      	movs	r3, #29
 8002828:	4680      	mov	r8, r0
 800282a:	4660      	mov	r0, ip
 800282c:	1a1b      	subs	r3, r3, r0
 800282e:	0020      	movs	r0, r4
 8002830:	40d8      	lsrs	r0, r3
 8002832:	0003      	movs	r3, r0
 8002834:	4640      	mov	r0, r8
 8002836:	4303      	orrs	r3, r0
 8002838:	469a      	mov	sl, r3
 800283a:	0023      	movs	r3, r4
 800283c:	408b      	lsls	r3, r1
 800283e:	4699      	mov	r9, r3
 8002840:	2300      	movs	r3, #0
 8002842:	4d44      	ldr	r5, [pc, #272]	@ (8002954 <__aeabi_dmul+0x328>)
 8002844:	4698      	mov	r8, r3
 8002846:	1aad      	subs	r5, r5, r2
 8002848:	9302      	str	r3, [sp, #8]
 800284a:	e715      	b.n	8002678 <__aeabi_dmul+0x4c>
 800284c:	4652      	mov	r2, sl
 800284e:	4302      	orrs	r2, r0
 8002850:	4691      	mov	r9, r2
 8002852:	d126      	bne.n	80028a2 <__aeabi_dmul+0x276>
 8002854:	2200      	movs	r2, #0
 8002856:	001d      	movs	r5, r3
 8002858:	2302      	movs	r3, #2
 800285a:	4692      	mov	sl, r2
 800285c:	3208      	adds	r2, #8
 800285e:	4690      	mov	r8, r2
 8002860:	9302      	str	r3, [sp, #8]
 8002862:	e709      	b.n	8002678 <__aeabi_dmul+0x4c>
 8002864:	2400      	movs	r4, #0
 8002866:	2200      	movs	r2, #0
 8002868:	4b35      	ldr	r3, [pc, #212]	@ (8002940 <__aeabi_dmul+0x314>)
 800286a:	e735      	b.n	80026d8 <__aeabi_dmul+0xac>
 800286c:	2300      	movs	r3, #0
 800286e:	2480      	movs	r4, #128	@ 0x80
 8002870:	469b      	mov	fp, r3
 8002872:	0324      	lsls	r4, r4, #12
 8002874:	4b32      	ldr	r3, [pc, #200]	@ (8002940 <__aeabi_dmul+0x314>)
 8002876:	e72f      	b.n	80026d8 <__aeabi_dmul+0xac>
 8002878:	2202      	movs	r2, #2
 800287a:	4641      	mov	r1, r8
 800287c:	4311      	orrs	r1, r2
 800287e:	2280      	movs	r2, #128	@ 0x80
 8002880:	0112      	lsls	r2, r2, #4
 8002882:	4694      	mov	ip, r2
 8002884:	002a      	movs	r2, r5
 8002886:	4462      	add	r2, ip
 8002888:	4688      	mov	r8, r1
 800288a:	9201      	str	r2, [sp, #4]
 800288c:	290a      	cmp	r1, #10
 800288e:	dd00      	ble.n	8002892 <__aeabi_dmul+0x266>
 8002890:	e752      	b.n	8002738 <__aeabi_dmul+0x10c>
 8002892:	465a      	mov	r2, fp
 8002894:	2000      	movs	r0, #0
 8002896:	9900      	ldr	r1, [sp, #0]
 8002898:	0004      	movs	r4, r0
 800289a:	404a      	eors	r2, r1
 800289c:	4693      	mov	fp, r2
 800289e:	2602      	movs	r6, #2
 80028a0:	e70b      	b.n	80026ba <__aeabi_dmul+0x8e>
 80028a2:	220c      	movs	r2, #12
 80028a4:	001d      	movs	r5, r3
 80028a6:	2303      	movs	r3, #3
 80028a8:	4681      	mov	r9, r0
 80028aa:	4690      	mov	r8, r2
 80028ac:	9302      	str	r3, [sp, #8]
 80028ae:	e6e3      	b.n	8002678 <__aeabi_dmul+0x4c>
 80028b0:	2300      	movs	r3, #0
 80028b2:	469a      	mov	sl, r3
 80028b4:	3304      	adds	r3, #4
 80028b6:	4698      	mov	r8, r3
 80028b8:	3b03      	subs	r3, #3
 80028ba:	2500      	movs	r5, #0
 80028bc:	9302      	str	r3, [sp, #8]
 80028be:	e6db      	b.n	8002678 <__aeabi_dmul+0x4c>
 80028c0:	4642      	mov	r2, r8
 80028c2:	3301      	adds	r3, #1
 80028c4:	431a      	orrs	r2, r3
 80028c6:	002b      	movs	r3, r5
 80028c8:	4690      	mov	r8, r2
 80028ca:	1c5a      	adds	r2, r3, #1
 80028cc:	9201      	str	r2, [sp, #4]
 80028ce:	4642      	mov	r2, r8
 80028d0:	2400      	movs	r4, #0
 80028d2:	2000      	movs	r0, #0
 80028d4:	2601      	movs	r6, #1
 80028d6:	2a0a      	cmp	r2, #10
 80028d8:	dc00      	bgt.n	80028dc <__aeabi_dmul+0x2b0>
 80028da:	e6ea      	b.n	80026b2 <__aeabi_dmul+0x86>
 80028dc:	e72c      	b.n	8002738 <__aeabi_dmul+0x10c>
 80028de:	2201      	movs	r2, #1
 80028e0:	1ad2      	subs	r2, r2, r3
 80028e2:	2a38      	cmp	r2, #56	@ 0x38
 80028e4:	dd00      	ble.n	80028e8 <__aeabi_dmul+0x2bc>
 80028e6:	e6f4      	b.n	80026d2 <__aeabi_dmul+0xa6>
 80028e8:	2a1f      	cmp	r2, #31
 80028ea:	dc00      	bgt.n	80028ee <__aeabi_dmul+0x2c2>
 80028ec:	e12a      	b.n	8002b44 <__aeabi_dmul+0x518>
 80028ee:	211f      	movs	r1, #31
 80028f0:	4249      	negs	r1, r1
 80028f2:	1acb      	subs	r3, r1, r3
 80028f4:	0021      	movs	r1, r4
 80028f6:	40d9      	lsrs	r1, r3
 80028f8:	000b      	movs	r3, r1
 80028fa:	2a20      	cmp	r2, #32
 80028fc:	d005      	beq.n	800290a <__aeabi_dmul+0x2de>
 80028fe:	4a16      	ldr	r2, [pc, #88]	@ (8002958 <__aeabi_dmul+0x32c>)
 8002900:	9d01      	ldr	r5, [sp, #4]
 8002902:	4694      	mov	ip, r2
 8002904:	4465      	add	r5, ip
 8002906:	40ac      	lsls	r4, r5
 8002908:	4320      	orrs	r0, r4
 800290a:	1e42      	subs	r2, r0, #1
 800290c:	4190      	sbcs	r0, r2
 800290e:	4318      	orrs	r0, r3
 8002910:	2307      	movs	r3, #7
 8002912:	0019      	movs	r1, r3
 8002914:	2400      	movs	r4, #0
 8002916:	4001      	ands	r1, r0
 8002918:	4203      	tst	r3, r0
 800291a:	d00c      	beq.n	8002936 <__aeabi_dmul+0x30a>
 800291c:	230f      	movs	r3, #15
 800291e:	4003      	ands	r3, r0
 8002920:	2b04      	cmp	r3, #4
 8002922:	d100      	bne.n	8002926 <__aeabi_dmul+0x2fa>
 8002924:	e140      	b.n	8002ba8 <__aeabi_dmul+0x57c>
 8002926:	1d03      	adds	r3, r0, #4
 8002928:	4283      	cmp	r3, r0
 800292a:	41a4      	sbcs	r4, r4
 800292c:	0018      	movs	r0, r3
 800292e:	4264      	negs	r4, r4
 8002930:	0761      	lsls	r1, r4, #29
 8002932:	0264      	lsls	r4, r4, #9
 8002934:	0b24      	lsrs	r4, r4, #12
 8002936:	08c2      	lsrs	r2, r0, #3
 8002938:	2300      	movs	r3, #0
 800293a:	430a      	orrs	r2, r1
 800293c:	e6cc      	b.n	80026d8 <__aeabi_dmul+0xac>
 800293e:	46c0      	nop			@ (mov r8, r8)
 8002940:	000007ff 	.word	0x000007ff
 8002944:	fffffc01 	.word	0xfffffc01
 8002948:	000003ff 	.word	0x000003ff
 800294c:	feffffff 	.word	0xfeffffff
 8002950:	000007fe 	.word	0x000007fe
 8002954:	fffffc0d 	.word	0xfffffc0d
 8002958:	0000043e 	.word	0x0000043e
 800295c:	4649      	mov	r1, r9
 800295e:	464a      	mov	r2, r9
 8002960:	0409      	lsls	r1, r1, #16
 8002962:	0c09      	lsrs	r1, r1, #16
 8002964:	000d      	movs	r5, r1
 8002966:	0c16      	lsrs	r6, r2, #16
 8002968:	0c02      	lsrs	r2, r0, #16
 800296a:	0400      	lsls	r0, r0, #16
 800296c:	0c00      	lsrs	r0, r0, #16
 800296e:	4345      	muls	r5, r0
 8002970:	46ac      	mov	ip, r5
 8002972:	0005      	movs	r5, r0
 8002974:	4375      	muls	r5, r6
 8002976:	46a8      	mov	r8, r5
 8002978:	0015      	movs	r5, r2
 800297a:	000f      	movs	r7, r1
 800297c:	4375      	muls	r5, r6
 800297e:	9200      	str	r2, [sp, #0]
 8002980:	9502      	str	r5, [sp, #8]
 8002982:	002a      	movs	r2, r5
 8002984:	9d00      	ldr	r5, [sp, #0]
 8002986:	436f      	muls	r7, r5
 8002988:	4665      	mov	r5, ip
 800298a:	0c2d      	lsrs	r5, r5, #16
 800298c:	46a9      	mov	r9, r5
 800298e:	4447      	add	r7, r8
 8002990:	444f      	add	r7, r9
 8002992:	45b8      	cmp	r8, r7
 8002994:	d905      	bls.n	80029a2 <__aeabi_dmul+0x376>
 8002996:	0015      	movs	r5, r2
 8002998:	2280      	movs	r2, #128	@ 0x80
 800299a:	0252      	lsls	r2, r2, #9
 800299c:	4690      	mov	r8, r2
 800299e:	4445      	add	r5, r8
 80029a0:	9502      	str	r5, [sp, #8]
 80029a2:	0c3d      	lsrs	r5, r7, #16
 80029a4:	9503      	str	r5, [sp, #12]
 80029a6:	4665      	mov	r5, ip
 80029a8:	042d      	lsls	r5, r5, #16
 80029aa:	043f      	lsls	r7, r7, #16
 80029ac:	0c2d      	lsrs	r5, r5, #16
 80029ae:	46ac      	mov	ip, r5
 80029b0:	003d      	movs	r5, r7
 80029b2:	4465      	add	r5, ip
 80029b4:	9504      	str	r5, [sp, #16]
 80029b6:	0c25      	lsrs	r5, r4, #16
 80029b8:	0424      	lsls	r4, r4, #16
 80029ba:	0c24      	lsrs	r4, r4, #16
 80029bc:	46ac      	mov	ip, r5
 80029be:	0025      	movs	r5, r4
 80029c0:	4375      	muls	r5, r6
 80029c2:	46a8      	mov	r8, r5
 80029c4:	4665      	mov	r5, ip
 80029c6:	000f      	movs	r7, r1
 80029c8:	4369      	muls	r1, r5
 80029ca:	4441      	add	r1, r8
 80029cc:	4689      	mov	r9, r1
 80029ce:	4367      	muls	r7, r4
 80029d0:	0c39      	lsrs	r1, r7, #16
 80029d2:	4449      	add	r1, r9
 80029d4:	436e      	muls	r6, r5
 80029d6:	4588      	cmp	r8, r1
 80029d8:	d903      	bls.n	80029e2 <__aeabi_dmul+0x3b6>
 80029da:	2280      	movs	r2, #128	@ 0x80
 80029dc:	0252      	lsls	r2, r2, #9
 80029de:	4690      	mov	r8, r2
 80029e0:	4446      	add	r6, r8
 80029e2:	0c0d      	lsrs	r5, r1, #16
 80029e4:	46a8      	mov	r8, r5
 80029e6:	0035      	movs	r5, r6
 80029e8:	4445      	add	r5, r8
 80029ea:	9505      	str	r5, [sp, #20]
 80029ec:	9d03      	ldr	r5, [sp, #12]
 80029ee:	043f      	lsls	r7, r7, #16
 80029f0:	46a8      	mov	r8, r5
 80029f2:	0c3f      	lsrs	r7, r7, #16
 80029f4:	0409      	lsls	r1, r1, #16
 80029f6:	19c9      	adds	r1, r1, r7
 80029f8:	4488      	add	r8, r1
 80029fa:	4645      	mov	r5, r8
 80029fc:	9503      	str	r5, [sp, #12]
 80029fe:	4655      	mov	r5, sl
 8002a00:	042e      	lsls	r6, r5, #16
 8002a02:	0c36      	lsrs	r6, r6, #16
 8002a04:	0c2f      	lsrs	r7, r5, #16
 8002a06:	0035      	movs	r5, r6
 8002a08:	4345      	muls	r5, r0
 8002a0a:	4378      	muls	r0, r7
 8002a0c:	4681      	mov	r9, r0
 8002a0e:	0038      	movs	r0, r7
 8002a10:	46a8      	mov	r8, r5
 8002a12:	0c2d      	lsrs	r5, r5, #16
 8002a14:	46aa      	mov	sl, r5
 8002a16:	9a00      	ldr	r2, [sp, #0]
 8002a18:	4350      	muls	r0, r2
 8002a1a:	4372      	muls	r2, r6
 8002a1c:	444a      	add	r2, r9
 8002a1e:	4452      	add	r2, sl
 8002a20:	4591      	cmp	r9, r2
 8002a22:	d903      	bls.n	8002a2c <__aeabi_dmul+0x400>
 8002a24:	2580      	movs	r5, #128	@ 0x80
 8002a26:	026d      	lsls	r5, r5, #9
 8002a28:	46a9      	mov	r9, r5
 8002a2a:	4448      	add	r0, r9
 8002a2c:	0c15      	lsrs	r5, r2, #16
 8002a2e:	46a9      	mov	r9, r5
 8002a30:	4645      	mov	r5, r8
 8002a32:	042d      	lsls	r5, r5, #16
 8002a34:	0c2d      	lsrs	r5, r5, #16
 8002a36:	46a8      	mov	r8, r5
 8002a38:	4665      	mov	r5, ip
 8002a3a:	437d      	muls	r5, r7
 8002a3c:	0412      	lsls	r2, r2, #16
 8002a3e:	4448      	add	r0, r9
 8002a40:	4490      	add	r8, r2
 8002a42:	46a9      	mov	r9, r5
 8002a44:	0032      	movs	r2, r6
 8002a46:	4665      	mov	r5, ip
 8002a48:	4362      	muls	r2, r4
 8002a4a:	436e      	muls	r6, r5
 8002a4c:	437c      	muls	r4, r7
 8002a4e:	0c17      	lsrs	r7, r2, #16
 8002a50:	1936      	adds	r6, r6, r4
 8002a52:	19bf      	adds	r7, r7, r6
 8002a54:	42bc      	cmp	r4, r7
 8002a56:	d903      	bls.n	8002a60 <__aeabi_dmul+0x434>
 8002a58:	2480      	movs	r4, #128	@ 0x80
 8002a5a:	0264      	lsls	r4, r4, #9
 8002a5c:	46a4      	mov	ip, r4
 8002a5e:	44e1      	add	r9, ip
 8002a60:	9c02      	ldr	r4, [sp, #8]
 8002a62:	9e03      	ldr	r6, [sp, #12]
 8002a64:	46a4      	mov	ip, r4
 8002a66:	9d05      	ldr	r5, [sp, #20]
 8002a68:	4466      	add	r6, ip
 8002a6a:	428e      	cmp	r6, r1
 8002a6c:	4189      	sbcs	r1, r1
 8002a6e:	46ac      	mov	ip, r5
 8002a70:	0412      	lsls	r2, r2, #16
 8002a72:	043c      	lsls	r4, r7, #16
 8002a74:	0c12      	lsrs	r2, r2, #16
 8002a76:	18a2      	adds	r2, r4, r2
 8002a78:	4462      	add	r2, ip
 8002a7a:	4249      	negs	r1, r1
 8002a7c:	1854      	adds	r4, r2, r1
 8002a7e:	4446      	add	r6, r8
 8002a80:	46a4      	mov	ip, r4
 8002a82:	4546      	cmp	r6, r8
 8002a84:	41a4      	sbcs	r4, r4
 8002a86:	4682      	mov	sl, r0
 8002a88:	4264      	negs	r4, r4
 8002a8a:	46a0      	mov	r8, r4
 8002a8c:	42aa      	cmp	r2, r5
 8002a8e:	4192      	sbcs	r2, r2
 8002a90:	458c      	cmp	ip, r1
 8002a92:	4189      	sbcs	r1, r1
 8002a94:	44e2      	add	sl, ip
 8002a96:	44d0      	add	r8, sl
 8002a98:	4249      	negs	r1, r1
 8002a9a:	4252      	negs	r2, r2
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	45a0      	cmp	r8, r4
 8002aa0:	41a4      	sbcs	r4, r4
 8002aa2:	4582      	cmp	sl, r0
 8002aa4:	4189      	sbcs	r1, r1
 8002aa6:	4264      	negs	r4, r4
 8002aa8:	4249      	negs	r1, r1
 8002aaa:	430c      	orrs	r4, r1
 8002aac:	4641      	mov	r1, r8
 8002aae:	0c3f      	lsrs	r7, r7, #16
 8002ab0:	19d2      	adds	r2, r2, r7
 8002ab2:	1912      	adds	r2, r2, r4
 8002ab4:	0dcc      	lsrs	r4, r1, #23
 8002ab6:	9904      	ldr	r1, [sp, #16]
 8002ab8:	0270      	lsls	r0, r6, #9
 8002aba:	4308      	orrs	r0, r1
 8002abc:	1e41      	subs	r1, r0, #1
 8002abe:	4188      	sbcs	r0, r1
 8002ac0:	4641      	mov	r1, r8
 8002ac2:	444a      	add	r2, r9
 8002ac4:	0df6      	lsrs	r6, r6, #23
 8002ac6:	0252      	lsls	r2, r2, #9
 8002ac8:	4330      	orrs	r0, r6
 8002aca:	0249      	lsls	r1, r1, #9
 8002acc:	4314      	orrs	r4, r2
 8002ace:	4308      	orrs	r0, r1
 8002ad0:	01d2      	lsls	r2, r2, #7
 8002ad2:	d535      	bpl.n	8002b40 <__aeabi_dmul+0x514>
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	0843      	lsrs	r3, r0, #1
 8002ad8:	4002      	ands	r2, r0
 8002ada:	4313      	orrs	r3, r2
 8002adc:	07e0      	lsls	r0, r4, #31
 8002ade:	4318      	orrs	r0, r3
 8002ae0:	0864      	lsrs	r4, r4, #1
 8002ae2:	e634      	b.n	800274e <__aeabi_dmul+0x122>
 8002ae4:	9b00      	ldr	r3, [sp, #0]
 8002ae6:	46a2      	mov	sl, r4
 8002ae8:	469b      	mov	fp, r3
 8002aea:	4681      	mov	r9, r0
 8002aec:	2480      	movs	r4, #128	@ 0x80
 8002aee:	4653      	mov	r3, sl
 8002af0:	0324      	lsls	r4, r4, #12
 8002af2:	431c      	orrs	r4, r3
 8002af4:	0324      	lsls	r4, r4, #12
 8002af6:	464a      	mov	r2, r9
 8002af8:	4b2e      	ldr	r3, [pc, #184]	@ (8002bb4 <__aeabi_dmul+0x588>)
 8002afa:	0b24      	lsrs	r4, r4, #12
 8002afc:	e5ec      	b.n	80026d8 <__aeabi_dmul+0xac>
 8002afe:	f000 fd75 	bl	80035ec <__clzsi2>
 8002b02:	2315      	movs	r3, #21
 8002b04:	469c      	mov	ip, r3
 8002b06:	4484      	add	ip, r0
 8002b08:	0002      	movs	r2, r0
 8002b0a:	4663      	mov	r3, ip
 8002b0c:	3220      	adds	r2, #32
 8002b0e:	2b1c      	cmp	r3, #28
 8002b10:	dc00      	bgt.n	8002b14 <__aeabi_dmul+0x4e8>
 8002b12:	e684      	b.n	800281e <__aeabi_dmul+0x1f2>
 8002b14:	2300      	movs	r3, #0
 8002b16:	4699      	mov	r9, r3
 8002b18:	0023      	movs	r3, r4
 8002b1a:	3808      	subs	r0, #8
 8002b1c:	4083      	lsls	r3, r0
 8002b1e:	469a      	mov	sl, r3
 8002b20:	e68e      	b.n	8002840 <__aeabi_dmul+0x214>
 8002b22:	f000 fd63 	bl	80035ec <__clzsi2>
 8002b26:	0002      	movs	r2, r0
 8002b28:	0003      	movs	r3, r0
 8002b2a:	3215      	adds	r2, #21
 8002b2c:	3320      	adds	r3, #32
 8002b2e:	2a1c      	cmp	r2, #28
 8002b30:	dc00      	bgt.n	8002b34 <__aeabi_dmul+0x508>
 8002b32:	e64e      	b.n	80027d2 <__aeabi_dmul+0x1a6>
 8002b34:	0002      	movs	r2, r0
 8002b36:	0034      	movs	r4, r6
 8002b38:	3a08      	subs	r2, #8
 8002b3a:	2000      	movs	r0, #0
 8002b3c:	4094      	lsls	r4, r2
 8002b3e:	e652      	b.n	80027e6 <__aeabi_dmul+0x1ba>
 8002b40:	9301      	str	r3, [sp, #4]
 8002b42:	e604      	b.n	800274e <__aeabi_dmul+0x122>
 8002b44:	4b1c      	ldr	r3, [pc, #112]	@ (8002bb8 <__aeabi_dmul+0x58c>)
 8002b46:	0021      	movs	r1, r4
 8002b48:	469c      	mov	ip, r3
 8002b4a:	0003      	movs	r3, r0
 8002b4c:	9d01      	ldr	r5, [sp, #4]
 8002b4e:	40d3      	lsrs	r3, r2
 8002b50:	4465      	add	r5, ip
 8002b52:	40a9      	lsls	r1, r5
 8002b54:	4319      	orrs	r1, r3
 8002b56:	0003      	movs	r3, r0
 8002b58:	40ab      	lsls	r3, r5
 8002b5a:	1e58      	subs	r0, r3, #1
 8002b5c:	4183      	sbcs	r3, r0
 8002b5e:	4319      	orrs	r1, r3
 8002b60:	0008      	movs	r0, r1
 8002b62:	40d4      	lsrs	r4, r2
 8002b64:	074b      	lsls	r3, r1, #29
 8002b66:	d009      	beq.n	8002b7c <__aeabi_dmul+0x550>
 8002b68:	230f      	movs	r3, #15
 8002b6a:	400b      	ands	r3, r1
 8002b6c:	2b04      	cmp	r3, #4
 8002b6e:	d005      	beq.n	8002b7c <__aeabi_dmul+0x550>
 8002b70:	1d0b      	adds	r3, r1, #4
 8002b72:	428b      	cmp	r3, r1
 8002b74:	4180      	sbcs	r0, r0
 8002b76:	4240      	negs	r0, r0
 8002b78:	1824      	adds	r4, r4, r0
 8002b7a:	0018      	movs	r0, r3
 8002b7c:	0223      	lsls	r3, r4, #8
 8002b7e:	d400      	bmi.n	8002b82 <__aeabi_dmul+0x556>
 8002b80:	e6d6      	b.n	8002930 <__aeabi_dmul+0x304>
 8002b82:	2301      	movs	r3, #1
 8002b84:	2400      	movs	r4, #0
 8002b86:	2200      	movs	r2, #0
 8002b88:	e5a6      	b.n	80026d8 <__aeabi_dmul+0xac>
 8002b8a:	290f      	cmp	r1, #15
 8002b8c:	d1aa      	bne.n	8002ae4 <__aeabi_dmul+0x4b8>
 8002b8e:	2380      	movs	r3, #128	@ 0x80
 8002b90:	4652      	mov	r2, sl
 8002b92:	031b      	lsls	r3, r3, #12
 8002b94:	421a      	tst	r2, r3
 8002b96:	d0a9      	beq.n	8002aec <__aeabi_dmul+0x4c0>
 8002b98:	421c      	tst	r4, r3
 8002b9a:	d1a7      	bne.n	8002aec <__aeabi_dmul+0x4c0>
 8002b9c:	431c      	orrs	r4, r3
 8002b9e:	9b00      	ldr	r3, [sp, #0]
 8002ba0:	0002      	movs	r2, r0
 8002ba2:	469b      	mov	fp, r3
 8002ba4:	4b03      	ldr	r3, [pc, #12]	@ (8002bb4 <__aeabi_dmul+0x588>)
 8002ba6:	e597      	b.n	80026d8 <__aeabi_dmul+0xac>
 8002ba8:	2400      	movs	r4, #0
 8002baa:	e6c1      	b.n	8002930 <__aeabi_dmul+0x304>
 8002bac:	2400      	movs	r4, #0
 8002bae:	4b01      	ldr	r3, [pc, #4]	@ (8002bb4 <__aeabi_dmul+0x588>)
 8002bb0:	0022      	movs	r2, r4
 8002bb2:	e591      	b.n	80026d8 <__aeabi_dmul+0xac>
 8002bb4:	000007ff 	.word	0x000007ff
 8002bb8:	0000041e 	.word	0x0000041e

08002bbc <__aeabi_dsub>:
 8002bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bbe:	464e      	mov	r6, r9
 8002bc0:	4645      	mov	r5, r8
 8002bc2:	46de      	mov	lr, fp
 8002bc4:	4657      	mov	r7, sl
 8002bc6:	b5e0      	push	{r5, r6, r7, lr}
 8002bc8:	b085      	sub	sp, #20
 8002bca:	9000      	str	r0, [sp, #0]
 8002bcc:	9101      	str	r1, [sp, #4]
 8002bce:	030c      	lsls	r4, r1, #12
 8002bd0:	004f      	lsls	r7, r1, #1
 8002bd2:	0fce      	lsrs	r6, r1, #31
 8002bd4:	0a61      	lsrs	r1, r4, #9
 8002bd6:	9c00      	ldr	r4, [sp, #0]
 8002bd8:	46b0      	mov	r8, r6
 8002bda:	0f64      	lsrs	r4, r4, #29
 8002bdc:	430c      	orrs	r4, r1
 8002bde:	9900      	ldr	r1, [sp, #0]
 8002be0:	0d7f      	lsrs	r7, r7, #21
 8002be2:	00c8      	lsls	r0, r1, #3
 8002be4:	0011      	movs	r1, r2
 8002be6:	001a      	movs	r2, r3
 8002be8:	031b      	lsls	r3, r3, #12
 8002bea:	469c      	mov	ip, r3
 8002bec:	9100      	str	r1, [sp, #0]
 8002bee:	9201      	str	r2, [sp, #4]
 8002bf0:	0051      	lsls	r1, r2, #1
 8002bf2:	0d4b      	lsrs	r3, r1, #21
 8002bf4:	4699      	mov	r9, r3
 8002bf6:	9b01      	ldr	r3, [sp, #4]
 8002bf8:	9d00      	ldr	r5, [sp, #0]
 8002bfa:	0fd9      	lsrs	r1, r3, #31
 8002bfc:	4663      	mov	r3, ip
 8002bfe:	0f6a      	lsrs	r2, r5, #29
 8002c00:	0a5b      	lsrs	r3, r3, #9
 8002c02:	4313      	orrs	r3, r2
 8002c04:	00ea      	lsls	r2, r5, #3
 8002c06:	4694      	mov	ip, r2
 8002c08:	4693      	mov	fp, r2
 8002c0a:	4ac1      	ldr	r2, [pc, #772]	@ (8002f10 <__aeabi_dsub+0x354>)
 8002c0c:	9003      	str	r0, [sp, #12]
 8002c0e:	9302      	str	r3, [sp, #8]
 8002c10:	4591      	cmp	r9, r2
 8002c12:	d100      	bne.n	8002c16 <__aeabi_dsub+0x5a>
 8002c14:	e0cd      	b.n	8002db2 <__aeabi_dsub+0x1f6>
 8002c16:	2501      	movs	r5, #1
 8002c18:	4069      	eors	r1, r5
 8002c1a:	464d      	mov	r5, r9
 8002c1c:	1b7d      	subs	r5, r7, r5
 8002c1e:	46aa      	mov	sl, r5
 8002c20:	428e      	cmp	r6, r1
 8002c22:	d100      	bne.n	8002c26 <__aeabi_dsub+0x6a>
 8002c24:	e080      	b.n	8002d28 <__aeabi_dsub+0x16c>
 8002c26:	2d00      	cmp	r5, #0
 8002c28:	dc00      	bgt.n	8002c2c <__aeabi_dsub+0x70>
 8002c2a:	e335      	b.n	8003298 <__aeabi_dsub+0x6dc>
 8002c2c:	4649      	mov	r1, r9
 8002c2e:	2900      	cmp	r1, #0
 8002c30:	d100      	bne.n	8002c34 <__aeabi_dsub+0x78>
 8002c32:	e0df      	b.n	8002df4 <__aeabi_dsub+0x238>
 8002c34:	4297      	cmp	r7, r2
 8002c36:	d100      	bne.n	8002c3a <__aeabi_dsub+0x7e>
 8002c38:	e194      	b.n	8002f64 <__aeabi_dsub+0x3a8>
 8002c3a:	4652      	mov	r2, sl
 8002c3c:	2501      	movs	r5, #1
 8002c3e:	2a38      	cmp	r2, #56	@ 0x38
 8002c40:	dc19      	bgt.n	8002c76 <__aeabi_dsub+0xba>
 8002c42:	2280      	movs	r2, #128	@ 0x80
 8002c44:	9b02      	ldr	r3, [sp, #8]
 8002c46:	0412      	lsls	r2, r2, #16
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	9302      	str	r3, [sp, #8]
 8002c4c:	4652      	mov	r2, sl
 8002c4e:	2a1f      	cmp	r2, #31
 8002c50:	dd00      	ble.n	8002c54 <__aeabi_dsub+0x98>
 8002c52:	e1e3      	b.n	800301c <__aeabi_dsub+0x460>
 8002c54:	4653      	mov	r3, sl
 8002c56:	2220      	movs	r2, #32
 8002c58:	4661      	mov	r1, ip
 8002c5a:	9d02      	ldr	r5, [sp, #8]
 8002c5c:	1ad2      	subs	r2, r2, r3
 8002c5e:	4095      	lsls	r5, r2
 8002c60:	40d9      	lsrs	r1, r3
 8002c62:	430d      	orrs	r5, r1
 8002c64:	4661      	mov	r1, ip
 8002c66:	4091      	lsls	r1, r2
 8002c68:	000a      	movs	r2, r1
 8002c6a:	1e51      	subs	r1, r2, #1
 8002c6c:	418a      	sbcs	r2, r1
 8002c6e:	4315      	orrs	r5, r2
 8002c70:	9a02      	ldr	r2, [sp, #8]
 8002c72:	40da      	lsrs	r2, r3
 8002c74:	1aa4      	subs	r4, r4, r2
 8002c76:	1b45      	subs	r5, r0, r5
 8002c78:	42a8      	cmp	r0, r5
 8002c7a:	4180      	sbcs	r0, r0
 8002c7c:	4240      	negs	r0, r0
 8002c7e:	1a24      	subs	r4, r4, r0
 8002c80:	0223      	lsls	r3, r4, #8
 8002c82:	d400      	bmi.n	8002c86 <__aeabi_dsub+0xca>
 8002c84:	e13d      	b.n	8002f02 <__aeabi_dsub+0x346>
 8002c86:	0264      	lsls	r4, r4, #9
 8002c88:	0a64      	lsrs	r4, r4, #9
 8002c8a:	2c00      	cmp	r4, #0
 8002c8c:	d100      	bne.n	8002c90 <__aeabi_dsub+0xd4>
 8002c8e:	e147      	b.n	8002f20 <__aeabi_dsub+0x364>
 8002c90:	0020      	movs	r0, r4
 8002c92:	f000 fcab 	bl	80035ec <__clzsi2>
 8002c96:	0003      	movs	r3, r0
 8002c98:	3b08      	subs	r3, #8
 8002c9a:	2120      	movs	r1, #32
 8002c9c:	0028      	movs	r0, r5
 8002c9e:	1aca      	subs	r2, r1, r3
 8002ca0:	40d0      	lsrs	r0, r2
 8002ca2:	409c      	lsls	r4, r3
 8002ca4:	0002      	movs	r2, r0
 8002ca6:	409d      	lsls	r5, r3
 8002ca8:	4322      	orrs	r2, r4
 8002caa:	429f      	cmp	r7, r3
 8002cac:	dd00      	ble.n	8002cb0 <__aeabi_dsub+0xf4>
 8002cae:	e177      	b.n	8002fa0 <__aeabi_dsub+0x3e4>
 8002cb0:	1bd8      	subs	r0, r3, r7
 8002cb2:	3001      	adds	r0, #1
 8002cb4:	1a09      	subs	r1, r1, r0
 8002cb6:	002c      	movs	r4, r5
 8002cb8:	408d      	lsls	r5, r1
 8002cba:	40c4      	lsrs	r4, r0
 8002cbc:	1e6b      	subs	r3, r5, #1
 8002cbe:	419d      	sbcs	r5, r3
 8002cc0:	0013      	movs	r3, r2
 8002cc2:	40c2      	lsrs	r2, r0
 8002cc4:	408b      	lsls	r3, r1
 8002cc6:	4325      	orrs	r5, r4
 8002cc8:	2700      	movs	r7, #0
 8002cca:	0014      	movs	r4, r2
 8002ccc:	431d      	orrs	r5, r3
 8002cce:	076b      	lsls	r3, r5, #29
 8002cd0:	d009      	beq.n	8002ce6 <__aeabi_dsub+0x12a>
 8002cd2:	230f      	movs	r3, #15
 8002cd4:	402b      	ands	r3, r5
 8002cd6:	2b04      	cmp	r3, #4
 8002cd8:	d005      	beq.n	8002ce6 <__aeabi_dsub+0x12a>
 8002cda:	1d2b      	adds	r3, r5, #4
 8002cdc:	42ab      	cmp	r3, r5
 8002cde:	41ad      	sbcs	r5, r5
 8002ce0:	426d      	negs	r5, r5
 8002ce2:	1964      	adds	r4, r4, r5
 8002ce4:	001d      	movs	r5, r3
 8002ce6:	0223      	lsls	r3, r4, #8
 8002ce8:	d400      	bmi.n	8002cec <__aeabi_dsub+0x130>
 8002cea:	e140      	b.n	8002f6e <__aeabi_dsub+0x3b2>
 8002cec:	4a88      	ldr	r2, [pc, #544]	@ (8002f10 <__aeabi_dsub+0x354>)
 8002cee:	3701      	adds	r7, #1
 8002cf0:	4297      	cmp	r7, r2
 8002cf2:	d100      	bne.n	8002cf6 <__aeabi_dsub+0x13a>
 8002cf4:	e101      	b.n	8002efa <__aeabi_dsub+0x33e>
 8002cf6:	2601      	movs	r6, #1
 8002cf8:	4643      	mov	r3, r8
 8002cfa:	4986      	ldr	r1, [pc, #536]	@ (8002f14 <__aeabi_dsub+0x358>)
 8002cfc:	08ed      	lsrs	r5, r5, #3
 8002cfe:	4021      	ands	r1, r4
 8002d00:	074a      	lsls	r2, r1, #29
 8002d02:	432a      	orrs	r2, r5
 8002d04:	057c      	lsls	r4, r7, #21
 8002d06:	024d      	lsls	r5, r1, #9
 8002d08:	0b2d      	lsrs	r5, r5, #12
 8002d0a:	0d64      	lsrs	r4, r4, #21
 8002d0c:	401e      	ands	r6, r3
 8002d0e:	0524      	lsls	r4, r4, #20
 8002d10:	432c      	orrs	r4, r5
 8002d12:	07f6      	lsls	r6, r6, #31
 8002d14:	4334      	orrs	r4, r6
 8002d16:	0010      	movs	r0, r2
 8002d18:	0021      	movs	r1, r4
 8002d1a:	b005      	add	sp, #20
 8002d1c:	bcf0      	pop	{r4, r5, r6, r7}
 8002d1e:	46bb      	mov	fp, r7
 8002d20:	46b2      	mov	sl, r6
 8002d22:	46a9      	mov	r9, r5
 8002d24:	46a0      	mov	r8, r4
 8002d26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d28:	2d00      	cmp	r5, #0
 8002d2a:	dc00      	bgt.n	8002d2e <__aeabi_dsub+0x172>
 8002d2c:	e2d0      	b.n	80032d0 <__aeabi_dsub+0x714>
 8002d2e:	4649      	mov	r1, r9
 8002d30:	2900      	cmp	r1, #0
 8002d32:	d000      	beq.n	8002d36 <__aeabi_dsub+0x17a>
 8002d34:	e0d4      	b.n	8002ee0 <__aeabi_dsub+0x324>
 8002d36:	4661      	mov	r1, ip
 8002d38:	9b02      	ldr	r3, [sp, #8]
 8002d3a:	4319      	orrs	r1, r3
 8002d3c:	d100      	bne.n	8002d40 <__aeabi_dsub+0x184>
 8002d3e:	e12b      	b.n	8002f98 <__aeabi_dsub+0x3dc>
 8002d40:	1e69      	subs	r1, r5, #1
 8002d42:	2d01      	cmp	r5, #1
 8002d44:	d100      	bne.n	8002d48 <__aeabi_dsub+0x18c>
 8002d46:	e1d9      	b.n	80030fc <__aeabi_dsub+0x540>
 8002d48:	4295      	cmp	r5, r2
 8002d4a:	d100      	bne.n	8002d4e <__aeabi_dsub+0x192>
 8002d4c:	e10a      	b.n	8002f64 <__aeabi_dsub+0x3a8>
 8002d4e:	2501      	movs	r5, #1
 8002d50:	2938      	cmp	r1, #56	@ 0x38
 8002d52:	dc17      	bgt.n	8002d84 <__aeabi_dsub+0x1c8>
 8002d54:	468a      	mov	sl, r1
 8002d56:	4653      	mov	r3, sl
 8002d58:	2b1f      	cmp	r3, #31
 8002d5a:	dd00      	ble.n	8002d5e <__aeabi_dsub+0x1a2>
 8002d5c:	e1e7      	b.n	800312e <__aeabi_dsub+0x572>
 8002d5e:	2220      	movs	r2, #32
 8002d60:	1ad2      	subs	r2, r2, r3
 8002d62:	9b02      	ldr	r3, [sp, #8]
 8002d64:	4661      	mov	r1, ip
 8002d66:	4093      	lsls	r3, r2
 8002d68:	001d      	movs	r5, r3
 8002d6a:	4653      	mov	r3, sl
 8002d6c:	40d9      	lsrs	r1, r3
 8002d6e:	4663      	mov	r3, ip
 8002d70:	4093      	lsls	r3, r2
 8002d72:	001a      	movs	r2, r3
 8002d74:	430d      	orrs	r5, r1
 8002d76:	1e51      	subs	r1, r2, #1
 8002d78:	418a      	sbcs	r2, r1
 8002d7a:	4653      	mov	r3, sl
 8002d7c:	4315      	orrs	r5, r2
 8002d7e:	9a02      	ldr	r2, [sp, #8]
 8002d80:	40da      	lsrs	r2, r3
 8002d82:	18a4      	adds	r4, r4, r2
 8002d84:	182d      	adds	r5, r5, r0
 8002d86:	4285      	cmp	r5, r0
 8002d88:	4180      	sbcs	r0, r0
 8002d8a:	4240      	negs	r0, r0
 8002d8c:	1824      	adds	r4, r4, r0
 8002d8e:	0223      	lsls	r3, r4, #8
 8002d90:	d400      	bmi.n	8002d94 <__aeabi_dsub+0x1d8>
 8002d92:	e0b6      	b.n	8002f02 <__aeabi_dsub+0x346>
 8002d94:	4b5e      	ldr	r3, [pc, #376]	@ (8002f10 <__aeabi_dsub+0x354>)
 8002d96:	3701      	adds	r7, #1
 8002d98:	429f      	cmp	r7, r3
 8002d9a:	d100      	bne.n	8002d9e <__aeabi_dsub+0x1e2>
 8002d9c:	e0ad      	b.n	8002efa <__aeabi_dsub+0x33e>
 8002d9e:	2101      	movs	r1, #1
 8002da0:	4b5c      	ldr	r3, [pc, #368]	@ (8002f14 <__aeabi_dsub+0x358>)
 8002da2:	086a      	lsrs	r2, r5, #1
 8002da4:	401c      	ands	r4, r3
 8002da6:	4029      	ands	r1, r5
 8002da8:	430a      	orrs	r2, r1
 8002daa:	07e5      	lsls	r5, r4, #31
 8002dac:	4315      	orrs	r5, r2
 8002dae:	0864      	lsrs	r4, r4, #1
 8002db0:	e78d      	b.n	8002cce <__aeabi_dsub+0x112>
 8002db2:	4a59      	ldr	r2, [pc, #356]	@ (8002f18 <__aeabi_dsub+0x35c>)
 8002db4:	9b02      	ldr	r3, [sp, #8]
 8002db6:	4692      	mov	sl, r2
 8002db8:	4662      	mov	r2, ip
 8002dba:	44ba      	add	sl, r7
 8002dbc:	431a      	orrs	r2, r3
 8002dbe:	d02c      	beq.n	8002e1a <__aeabi_dsub+0x25e>
 8002dc0:	428e      	cmp	r6, r1
 8002dc2:	d02e      	beq.n	8002e22 <__aeabi_dsub+0x266>
 8002dc4:	4652      	mov	r2, sl
 8002dc6:	2a00      	cmp	r2, #0
 8002dc8:	d060      	beq.n	8002e8c <__aeabi_dsub+0x2d0>
 8002dca:	2f00      	cmp	r7, #0
 8002dcc:	d100      	bne.n	8002dd0 <__aeabi_dsub+0x214>
 8002dce:	e0db      	b.n	8002f88 <__aeabi_dsub+0x3cc>
 8002dd0:	4663      	mov	r3, ip
 8002dd2:	000e      	movs	r6, r1
 8002dd4:	9c02      	ldr	r4, [sp, #8]
 8002dd6:	08d8      	lsrs	r0, r3, #3
 8002dd8:	0762      	lsls	r2, r4, #29
 8002dda:	4302      	orrs	r2, r0
 8002ddc:	08e4      	lsrs	r4, r4, #3
 8002dde:	0013      	movs	r3, r2
 8002de0:	4323      	orrs	r3, r4
 8002de2:	d100      	bne.n	8002de6 <__aeabi_dsub+0x22a>
 8002de4:	e254      	b.n	8003290 <__aeabi_dsub+0x6d4>
 8002de6:	2580      	movs	r5, #128	@ 0x80
 8002de8:	032d      	lsls	r5, r5, #12
 8002dea:	4325      	orrs	r5, r4
 8002dec:	032d      	lsls	r5, r5, #12
 8002dee:	4c48      	ldr	r4, [pc, #288]	@ (8002f10 <__aeabi_dsub+0x354>)
 8002df0:	0b2d      	lsrs	r5, r5, #12
 8002df2:	e78c      	b.n	8002d0e <__aeabi_dsub+0x152>
 8002df4:	4661      	mov	r1, ip
 8002df6:	9b02      	ldr	r3, [sp, #8]
 8002df8:	4319      	orrs	r1, r3
 8002dfa:	d100      	bne.n	8002dfe <__aeabi_dsub+0x242>
 8002dfc:	e0cc      	b.n	8002f98 <__aeabi_dsub+0x3dc>
 8002dfe:	0029      	movs	r1, r5
 8002e00:	3901      	subs	r1, #1
 8002e02:	2d01      	cmp	r5, #1
 8002e04:	d100      	bne.n	8002e08 <__aeabi_dsub+0x24c>
 8002e06:	e188      	b.n	800311a <__aeabi_dsub+0x55e>
 8002e08:	4295      	cmp	r5, r2
 8002e0a:	d100      	bne.n	8002e0e <__aeabi_dsub+0x252>
 8002e0c:	e0aa      	b.n	8002f64 <__aeabi_dsub+0x3a8>
 8002e0e:	2501      	movs	r5, #1
 8002e10:	2938      	cmp	r1, #56	@ 0x38
 8002e12:	dd00      	ble.n	8002e16 <__aeabi_dsub+0x25a>
 8002e14:	e72f      	b.n	8002c76 <__aeabi_dsub+0xba>
 8002e16:	468a      	mov	sl, r1
 8002e18:	e718      	b.n	8002c4c <__aeabi_dsub+0x90>
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	4051      	eors	r1, r2
 8002e1e:	428e      	cmp	r6, r1
 8002e20:	d1d0      	bne.n	8002dc4 <__aeabi_dsub+0x208>
 8002e22:	4653      	mov	r3, sl
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d100      	bne.n	8002e2a <__aeabi_dsub+0x26e>
 8002e28:	e0be      	b.n	8002fa8 <__aeabi_dsub+0x3ec>
 8002e2a:	2f00      	cmp	r7, #0
 8002e2c:	d000      	beq.n	8002e30 <__aeabi_dsub+0x274>
 8002e2e:	e138      	b.n	80030a2 <__aeabi_dsub+0x4e6>
 8002e30:	46ca      	mov	sl, r9
 8002e32:	0022      	movs	r2, r4
 8002e34:	4302      	orrs	r2, r0
 8002e36:	d100      	bne.n	8002e3a <__aeabi_dsub+0x27e>
 8002e38:	e1e2      	b.n	8003200 <__aeabi_dsub+0x644>
 8002e3a:	4653      	mov	r3, sl
 8002e3c:	1e59      	subs	r1, r3, #1
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d100      	bne.n	8002e44 <__aeabi_dsub+0x288>
 8002e42:	e20d      	b.n	8003260 <__aeabi_dsub+0x6a4>
 8002e44:	4a32      	ldr	r2, [pc, #200]	@ (8002f10 <__aeabi_dsub+0x354>)
 8002e46:	4592      	cmp	sl, r2
 8002e48:	d100      	bne.n	8002e4c <__aeabi_dsub+0x290>
 8002e4a:	e1d2      	b.n	80031f2 <__aeabi_dsub+0x636>
 8002e4c:	2701      	movs	r7, #1
 8002e4e:	2938      	cmp	r1, #56	@ 0x38
 8002e50:	dc13      	bgt.n	8002e7a <__aeabi_dsub+0x2be>
 8002e52:	291f      	cmp	r1, #31
 8002e54:	dd00      	ble.n	8002e58 <__aeabi_dsub+0x29c>
 8002e56:	e1ee      	b.n	8003236 <__aeabi_dsub+0x67a>
 8002e58:	2220      	movs	r2, #32
 8002e5a:	9b02      	ldr	r3, [sp, #8]
 8002e5c:	1a52      	subs	r2, r2, r1
 8002e5e:	0025      	movs	r5, r4
 8002e60:	0007      	movs	r7, r0
 8002e62:	469a      	mov	sl, r3
 8002e64:	40cc      	lsrs	r4, r1
 8002e66:	4090      	lsls	r0, r2
 8002e68:	4095      	lsls	r5, r2
 8002e6a:	40cf      	lsrs	r7, r1
 8002e6c:	44a2      	add	sl, r4
 8002e6e:	1e42      	subs	r2, r0, #1
 8002e70:	4190      	sbcs	r0, r2
 8002e72:	4653      	mov	r3, sl
 8002e74:	432f      	orrs	r7, r5
 8002e76:	4307      	orrs	r7, r0
 8002e78:	9302      	str	r3, [sp, #8]
 8002e7a:	003d      	movs	r5, r7
 8002e7c:	4465      	add	r5, ip
 8002e7e:	4565      	cmp	r5, ip
 8002e80:	4192      	sbcs	r2, r2
 8002e82:	9b02      	ldr	r3, [sp, #8]
 8002e84:	4252      	negs	r2, r2
 8002e86:	464f      	mov	r7, r9
 8002e88:	18d4      	adds	r4, r2, r3
 8002e8a:	e780      	b.n	8002d8e <__aeabi_dsub+0x1d2>
 8002e8c:	4a23      	ldr	r2, [pc, #140]	@ (8002f1c <__aeabi_dsub+0x360>)
 8002e8e:	1c7d      	adds	r5, r7, #1
 8002e90:	4215      	tst	r5, r2
 8002e92:	d000      	beq.n	8002e96 <__aeabi_dsub+0x2da>
 8002e94:	e0aa      	b.n	8002fec <__aeabi_dsub+0x430>
 8002e96:	4662      	mov	r2, ip
 8002e98:	0025      	movs	r5, r4
 8002e9a:	9b02      	ldr	r3, [sp, #8]
 8002e9c:	4305      	orrs	r5, r0
 8002e9e:	431a      	orrs	r2, r3
 8002ea0:	2f00      	cmp	r7, #0
 8002ea2:	d000      	beq.n	8002ea6 <__aeabi_dsub+0x2ea>
 8002ea4:	e0f5      	b.n	8003092 <__aeabi_dsub+0x4d6>
 8002ea6:	2d00      	cmp	r5, #0
 8002ea8:	d100      	bne.n	8002eac <__aeabi_dsub+0x2f0>
 8002eaa:	e16b      	b.n	8003184 <__aeabi_dsub+0x5c8>
 8002eac:	2a00      	cmp	r2, #0
 8002eae:	d100      	bne.n	8002eb2 <__aeabi_dsub+0x2f6>
 8002eb0:	e152      	b.n	8003158 <__aeabi_dsub+0x59c>
 8002eb2:	4663      	mov	r3, ip
 8002eb4:	1ac5      	subs	r5, r0, r3
 8002eb6:	9b02      	ldr	r3, [sp, #8]
 8002eb8:	1ae2      	subs	r2, r4, r3
 8002eba:	42a8      	cmp	r0, r5
 8002ebc:	419b      	sbcs	r3, r3
 8002ebe:	425b      	negs	r3, r3
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	021a      	lsls	r2, r3, #8
 8002ec4:	d400      	bmi.n	8002ec8 <__aeabi_dsub+0x30c>
 8002ec6:	e1d5      	b.n	8003274 <__aeabi_dsub+0x6b8>
 8002ec8:	4663      	mov	r3, ip
 8002eca:	1a1d      	subs	r5, r3, r0
 8002ecc:	45ac      	cmp	ip, r5
 8002ece:	4192      	sbcs	r2, r2
 8002ed0:	2601      	movs	r6, #1
 8002ed2:	9b02      	ldr	r3, [sp, #8]
 8002ed4:	4252      	negs	r2, r2
 8002ed6:	1b1c      	subs	r4, r3, r4
 8002ed8:	4688      	mov	r8, r1
 8002eda:	1aa4      	subs	r4, r4, r2
 8002edc:	400e      	ands	r6, r1
 8002ede:	e6f6      	b.n	8002cce <__aeabi_dsub+0x112>
 8002ee0:	4297      	cmp	r7, r2
 8002ee2:	d03f      	beq.n	8002f64 <__aeabi_dsub+0x3a8>
 8002ee4:	4652      	mov	r2, sl
 8002ee6:	2501      	movs	r5, #1
 8002ee8:	2a38      	cmp	r2, #56	@ 0x38
 8002eea:	dd00      	ble.n	8002eee <__aeabi_dsub+0x332>
 8002eec:	e74a      	b.n	8002d84 <__aeabi_dsub+0x1c8>
 8002eee:	2280      	movs	r2, #128	@ 0x80
 8002ef0:	9b02      	ldr	r3, [sp, #8]
 8002ef2:	0412      	lsls	r2, r2, #16
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	9302      	str	r3, [sp, #8]
 8002ef8:	e72d      	b.n	8002d56 <__aeabi_dsub+0x19a>
 8002efa:	003c      	movs	r4, r7
 8002efc:	2500      	movs	r5, #0
 8002efe:	2200      	movs	r2, #0
 8002f00:	e705      	b.n	8002d0e <__aeabi_dsub+0x152>
 8002f02:	2307      	movs	r3, #7
 8002f04:	402b      	ands	r3, r5
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d000      	beq.n	8002f0c <__aeabi_dsub+0x350>
 8002f0a:	e6e2      	b.n	8002cd2 <__aeabi_dsub+0x116>
 8002f0c:	e06b      	b.n	8002fe6 <__aeabi_dsub+0x42a>
 8002f0e:	46c0      	nop			@ (mov r8, r8)
 8002f10:	000007ff 	.word	0x000007ff
 8002f14:	ff7fffff 	.word	0xff7fffff
 8002f18:	fffff801 	.word	0xfffff801
 8002f1c:	000007fe 	.word	0x000007fe
 8002f20:	0028      	movs	r0, r5
 8002f22:	f000 fb63 	bl	80035ec <__clzsi2>
 8002f26:	0003      	movs	r3, r0
 8002f28:	3318      	adds	r3, #24
 8002f2a:	2b1f      	cmp	r3, #31
 8002f2c:	dc00      	bgt.n	8002f30 <__aeabi_dsub+0x374>
 8002f2e:	e6b4      	b.n	8002c9a <__aeabi_dsub+0xde>
 8002f30:	002a      	movs	r2, r5
 8002f32:	3808      	subs	r0, #8
 8002f34:	4082      	lsls	r2, r0
 8002f36:	429f      	cmp	r7, r3
 8002f38:	dd00      	ble.n	8002f3c <__aeabi_dsub+0x380>
 8002f3a:	e0b9      	b.n	80030b0 <__aeabi_dsub+0x4f4>
 8002f3c:	1bdb      	subs	r3, r3, r7
 8002f3e:	1c58      	adds	r0, r3, #1
 8002f40:	281f      	cmp	r0, #31
 8002f42:	dc00      	bgt.n	8002f46 <__aeabi_dsub+0x38a>
 8002f44:	e1a0      	b.n	8003288 <__aeabi_dsub+0x6cc>
 8002f46:	0015      	movs	r5, r2
 8002f48:	3b1f      	subs	r3, #31
 8002f4a:	40dd      	lsrs	r5, r3
 8002f4c:	2820      	cmp	r0, #32
 8002f4e:	d005      	beq.n	8002f5c <__aeabi_dsub+0x3a0>
 8002f50:	2340      	movs	r3, #64	@ 0x40
 8002f52:	1a1b      	subs	r3, r3, r0
 8002f54:	409a      	lsls	r2, r3
 8002f56:	1e53      	subs	r3, r2, #1
 8002f58:	419a      	sbcs	r2, r3
 8002f5a:	4315      	orrs	r5, r2
 8002f5c:	2307      	movs	r3, #7
 8002f5e:	2700      	movs	r7, #0
 8002f60:	402b      	ands	r3, r5
 8002f62:	e7d0      	b.n	8002f06 <__aeabi_dsub+0x34a>
 8002f64:	08c0      	lsrs	r0, r0, #3
 8002f66:	0762      	lsls	r2, r4, #29
 8002f68:	4302      	orrs	r2, r0
 8002f6a:	08e4      	lsrs	r4, r4, #3
 8002f6c:	e737      	b.n	8002dde <__aeabi_dsub+0x222>
 8002f6e:	08ea      	lsrs	r2, r5, #3
 8002f70:	0763      	lsls	r3, r4, #29
 8002f72:	431a      	orrs	r2, r3
 8002f74:	4bd3      	ldr	r3, [pc, #844]	@ (80032c4 <__aeabi_dsub+0x708>)
 8002f76:	08e4      	lsrs	r4, r4, #3
 8002f78:	429f      	cmp	r7, r3
 8002f7a:	d100      	bne.n	8002f7e <__aeabi_dsub+0x3c2>
 8002f7c:	e72f      	b.n	8002dde <__aeabi_dsub+0x222>
 8002f7e:	0324      	lsls	r4, r4, #12
 8002f80:	0b25      	lsrs	r5, r4, #12
 8002f82:	057c      	lsls	r4, r7, #21
 8002f84:	0d64      	lsrs	r4, r4, #21
 8002f86:	e6c2      	b.n	8002d0e <__aeabi_dsub+0x152>
 8002f88:	46ca      	mov	sl, r9
 8002f8a:	0022      	movs	r2, r4
 8002f8c:	4302      	orrs	r2, r0
 8002f8e:	d158      	bne.n	8003042 <__aeabi_dsub+0x486>
 8002f90:	4663      	mov	r3, ip
 8002f92:	000e      	movs	r6, r1
 8002f94:	9c02      	ldr	r4, [sp, #8]
 8002f96:	9303      	str	r3, [sp, #12]
 8002f98:	9b03      	ldr	r3, [sp, #12]
 8002f9a:	4657      	mov	r7, sl
 8002f9c:	08da      	lsrs	r2, r3, #3
 8002f9e:	e7e7      	b.n	8002f70 <__aeabi_dsub+0x3b4>
 8002fa0:	4cc9      	ldr	r4, [pc, #804]	@ (80032c8 <__aeabi_dsub+0x70c>)
 8002fa2:	1aff      	subs	r7, r7, r3
 8002fa4:	4014      	ands	r4, r2
 8002fa6:	e692      	b.n	8002cce <__aeabi_dsub+0x112>
 8002fa8:	4dc8      	ldr	r5, [pc, #800]	@ (80032cc <__aeabi_dsub+0x710>)
 8002faa:	1c7a      	adds	r2, r7, #1
 8002fac:	422a      	tst	r2, r5
 8002fae:	d000      	beq.n	8002fb2 <__aeabi_dsub+0x3f6>
 8002fb0:	e084      	b.n	80030bc <__aeabi_dsub+0x500>
 8002fb2:	0022      	movs	r2, r4
 8002fb4:	4302      	orrs	r2, r0
 8002fb6:	2f00      	cmp	r7, #0
 8002fb8:	d000      	beq.n	8002fbc <__aeabi_dsub+0x400>
 8002fba:	e0ef      	b.n	800319c <__aeabi_dsub+0x5e0>
 8002fbc:	2a00      	cmp	r2, #0
 8002fbe:	d100      	bne.n	8002fc2 <__aeabi_dsub+0x406>
 8002fc0:	e0e5      	b.n	800318e <__aeabi_dsub+0x5d2>
 8002fc2:	4662      	mov	r2, ip
 8002fc4:	9902      	ldr	r1, [sp, #8]
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	d100      	bne.n	8002fcc <__aeabi_dsub+0x410>
 8002fca:	e0c5      	b.n	8003158 <__aeabi_dsub+0x59c>
 8002fcc:	4663      	mov	r3, ip
 8002fce:	18c5      	adds	r5, r0, r3
 8002fd0:	468c      	mov	ip, r1
 8002fd2:	4285      	cmp	r5, r0
 8002fd4:	4180      	sbcs	r0, r0
 8002fd6:	4464      	add	r4, ip
 8002fd8:	4240      	negs	r0, r0
 8002fda:	1824      	adds	r4, r4, r0
 8002fdc:	0223      	lsls	r3, r4, #8
 8002fde:	d502      	bpl.n	8002fe6 <__aeabi_dsub+0x42a>
 8002fe0:	4bb9      	ldr	r3, [pc, #740]	@ (80032c8 <__aeabi_dsub+0x70c>)
 8002fe2:	3701      	adds	r7, #1
 8002fe4:	401c      	ands	r4, r3
 8002fe6:	46ba      	mov	sl, r7
 8002fe8:	9503      	str	r5, [sp, #12]
 8002fea:	e7d5      	b.n	8002f98 <__aeabi_dsub+0x3dc>
 8002fec:	4662      	mov	r2, ip
 8002fee:	1a85      	subs	r5, r0, r2
 8002ff0:	42a8      	cmp	r0, r5
 8002ff2:	4192      	sbcs	r2, r2
 8002ff4:	4252      	negs	r2, r2
 8002ff6:	4691      	mov	r9, r2
 8002ff8:	9b02      	ldr	r3, [sp, #8]
 8002ffa:	1ae3      	subs	r3, r4, r3
 8002ffc:	001a      	movs	r2, r3
 8002ffe:	464b      	mov	r3, r9
 8003000:	1ad2      	subs	r2, r2, r3
 8003002:	0013      	movs	r3, r2
 8003004:	4691      	mov	r9, r2
 8003006:	021a      	lsls	r2, r3, #8
 8003008:	d46c      	bmi.n	80030e4 <__aeabi_dsub+0x528>
 800300a:	464a      	mov	r2, r9
 800300c:	464c      	mov	r4, r9
 800300e:	432a      	orrs	r2, r5
 8003010:	d000      	beq.n	8003014 <__aeabi_dsub+0x458>
 8003012:	e63a      	b.n	8002c8a <__aeabi_dsub+0xce>
 8003014:	2600      	movs	r6, #0
 8003016:	2400      	movs	r4, #0
 8003018:	2500      	movs	r5, #0
 800301a:	e678      	b.n	8002d0e <__aeabi_dsub+0x152>
 800301c:	9902      	ldr	r1, [sp, #8]
 800301e:	4653      	mov	r3, sl
 8003020:	000d      	movs	r5, r1
 8003022:	3a20      	subs	r2, #32
 8003024:	40d5      	lsrs	r5, r2
 8003026:	2b20      	cmp	r3, #32
 8003028:	d006      	beq.n	8003038 <__aeabi_dsub+0x47c>
 800302a:	2240      	movs	r2, #64	@ 0x40
 800302c:	1ad2      	subs	r2, r2, r3
 800302e:	000b      	movs	r3, r1
 8003030:	4093      	lsls	r3, r2
 8003032:	4662      	mov	r2, ip
 8003034:	431a      	orrs	r2, r3
 8003036:	4693      	mov	fp, r2
 8003038:	465b      	mov	r3, fp
 800303a:	1e5a      	subs	r2, r3, #1
 800303c:	4193      	sbcs	r3, r2
 800303e:	431d      	orrs	r5, r3
 8003040:	e619      	b.n	8002c76 <__aeabi_dsub+0xba>
 8003042:	4653      	mov	r3, sl
 8003044:	1e5a      	subs	r2, r3, #1
 8003046:	2b01      	cmp	r3, #1
 8003048:	d100      	bne.n	800304c <__aeabi_dsub+0x490>
 800304a:	e0c6      	b.n	80031da <__aeabi_dsub+0x61e>
 800304c:	4e9d      	ldr	r6, [pc, #628]	@ (80032c4 <__aeabi_dsub+0x708>)
 800304e:	45b2      	cmp	sl, r6
 8003050:	d100      	bne.n	8003054 <__aeabi_dsub+0x498>
 8003052:	e6bd      	b.n	8002dd0 <__aeabi_dsub+0x214>
 8003054:	4688      	mov	r8, r1
 8003056:	000e      	movs	r6, r1
 8003058:	2501      	movs	r5, #1
 800305a:	2a38      	cmp	r2, #56	@ 0x38
 800305c:	dc10      	bgt.n	8003080 <__aeabi_dsub+0x4c4>
 800305e:	2a1f      	cmp	r2, #31
 8003060:	dc7f      	bgt.n	8003162 <__aeabi_dsub+0x5a6>
 8003062:	2120      	movs	r1, #32
 8003064:	0025      	movs	r5, r4
 8003066:	1a89      	subs	r1, r1, r2
 8003068:	0007      	movs	r7, r0
 800306a:	4088      	lsls	r0, r1
 800306c:	408d      	lsls	r5, r1
 800306e:	40d7      	lsrs	r7, r2
 8003070:	40d4      	lsrs	r4, r2
 8003072:	1e41      	subs	r1, r0, #1
 8003074:	4188      	sbcs	r0, r1
 8003076:	9b02      	ldr	r3, [sp, #8]
 8003078:	433d      	orrs	r5, r7
 800307a:	1b1b      	subs	r3, r3, r4
 800307c:	4305      	orrs	r5, r0
 800307e:	9302      	str	r3, [sp, #8]
 8003080:	4662      	mov	r2, ip
 8003082:	1b55      	subs	r5, r2, r5
 8003084:	45ac      	cmp	ip, r5
 8003086:	4192      	sbcs	r2, r2
 8003088:	9b02      	ldr	r3, [sp, #8]
 800308a:	4252      	negs	r2, r2
 800308c:	464f      	mov	r7, r9
 800308e:	1a9c      	subs	r4, r3, r2
 8003090:	e5f6      	b.n	8002c80 <__aeabi_dsub+0xc4>
 8003092:	2d00      	cmp	r5, #0
 8003094:	d000      	beq.n	8003098 <__aeabi_dsub+0x4dc>
 8003096:	e0b7      	b.n	8003208 <__aeabi_dsub+0x64c>
 8003098:	2a00      	cmp	r2, #0
 800309a:	d100      	bne.n	800309e <__aeabi_dsub+0x4e2>
 800309c:	e0f0      	b.n	8003280 <__aeabi_dsub+0x6c4>
 800309e:	2601      	movs	r6, #1
 80030a0:	400e      	ands	r6, r1
 80030a2:	4663      	mov	r3, ip
 80030a4:	9802      	ldr	r0, [sp, #8]
 80030a6:	08d9      	lsrs	r1, r3, #3
 80030a8:	0742      	lsls	r2, r0, #29
 80030aa:	430a      	orrs	r2, r1
 80030ac:	08c4      	lsrs	r4, r0, #3
 80030ae:	e696      	b.n	8002dde <__aeabi_dsub+0x222>
 80030b0:	4c85      	ldr	r4, [pc, #532]	@ (80032c8 <__aeabi_dsub+0x70c>)
 80030b2:	1aff      	subs	r7, r7, r3
 80030b4:	4014      	ands	r4, r2
 80030b6:	0762      	lsls	r2, r4, #29
 80030b8:	08e4      	lsrs	r4, r4, #3
 80030ba:	e760      	b.n	8002f7e <__aeabi_dsub+0x3c2>
 80030bc:	4981      	ldr	r1, [pc, #516]	@ (80032c4 <__aeabi_dsub+0x708>)
 80030be:	428a      	cmp	r2, r1
 80030c0:	d100      	bne.n	80030c4 <__aeabi_dsub+0x508>
 80030c2:	e0c9      	b.n	8003258 <__aeabi_dsub+0x69c>
 80030c4:	4663      	mov	r3, ip
 80030c6:	18c1      	adds	r1, r0, r3
 80030c8:	4281      	cmp	r1, r0
 80030ca:	4180      	sbcs	r0, r0
 80030cc:	9b02      	ldr	r3, [sp, #8]
 80030ce:	4240      	negs	r0, r0
 80030d0:	18e3      	adds	r3, r4, r3
 80030d2:	181b      	adds	r3, r3, r0
 80030d4:	07dd      	lsls	r5, r3, #31
 80030d6:	085c      	lsrs	r4, r3, #1
 80030d8:	2307      	movs	r3, #7
 80030da:	0849      	lsrs	r1, r1, #1
 80030dc:	430d      	orrs	r5, r1
 80030de:	0017      	movs	r7, r2
 80030e0:	402b      	ands	r3, r5
 80030e2:	e710      	b.n	8002f06 <__aeabi_dsub+0x34a>
 80030e4:	4663      	mov	r3, ip
 80030e6:	1a1d      	subs	r5, r3, r0
 80030e8:	45ac      	cmp	ip, r5
 80030ea:	4192      	sbcs	r2, r2
 80030ec:	2601      	movs	r6, #1
 80030ee:	9b02      	ldr	r3, [sp, #8]
 80030f0:	4252      	negs	r2, r2
 80030f2:	1b1c      	subs	r4, r3, r4
 80030f4:	4688      	mov	r8, r1
 80030f6:	1aa4      	subs	r4, r4, r2
 80030f8:	400e      	ands	r6, r1
 80030fa:	e5c6      	b.n	8002c8a <__aeabi_dsub+0xce>
 80030fc:	4663      	mov	r3, ip
 80030fe:	18c5      	adds	r5, r0, r3
 8003100:	9b02      	ldr	r3, [sp, #8]
 8003102:	4285      	cmp	r5, r0
 8003104:	4180      	sbcs	r0, r0
 8003106:	469c      	mov	ip, r3
 8003108:	4240      	negs	r0, r0
 800310a:	4464      	add	r4, ip
 800310c:	1824      	adds	r4, r4, r0
 800310e:	2701      	movs	r7, #1
 8003110:	0223      	lsls	r3, r4, #8
 8003112:	d400      	bmi.n	8003116 <__aeabi_dsub+0x55a>
 8003114:	e6f5      	b.n	8002f02 <__aeabi_dsub+0x346>
 8003116:	2702      	movs	r7, #2
 8003118:	e641      	b.n	8002d9e <__aeabi_dsub+0x1e2>
 800311a:	4663      	mov	r3, ip
 800311c:	1ac5      	subs	r5, r0, r3
 800311e:	42a8      	cmp	r0, r5
 8003120:	4180      	sbcs	r0, r0
 8003122:	9b02      	ldr	r3, [sp, #8]
 8003124:	4240      	negs	r0, r0
 8003126:	1ae4      	subs	r4, r4, r3
 8003128:	2701      	movs	r7, #1
 800312a:	1a24      	subs	r4, r4, r0
 800312c:	e5a8      	b.n	8002c80 <__aeabi_dsub+0xc4>
 800312e:	9d02      	ldr	r5, [sp, #8]
 8003130:	4652      	mov	r2, sl
 8003132:	002b      	movs	r3, r5
 8003134:	3a20      	subs	r2, #32
 8003136:	40d3      	lsrs	r3, r2
 8003138:	0019      	movs	r1, r3
 800313a:	4653      	mov	r3, sl
 800313c:	2b20      	cmp	r3, #32
 800313e:	d006      	beq.n	800314e <__aeabi_dsub+0x592>
 8003140:	2240      	movs	r2, #64	@ 0x40
 8003142:	1ad2      	subs	r2, r2, r3
 8003144:	002b      	movs	r3, r5
 8003146:	4093      	lsls	r3, r2
 8003148:	4662      	mov	r2, ip
 800314a:	431a      	orrs	r2, r3
 800314c:	4693      	mov	fp, r2
 800314e:	465d      	mov	r5, fp
 8003150:	1e6b      	subs	r3, r5, #1
 8003152:	419d      	sbcs	r5, r3
 8003154:	430d      	orrs	r5, r1
 8003156:	e615      	b.n	8002d84 <__aeabi_dsub+0x1c8>
 8003158:	0762      	lsls	r2, r4, #29
 800315a:	08c0      	lsrs	r0, r0, #3
 800315c:	4302      	orrs	r2, r0
 800315e:	08e4      	lsrs	r4, r4, #3
 8003160:	e70d      	b.n	8002f7e <__aeabi_dsub+0x3c2>
 8003162:	0011      	movs	r1, r2
 8003164:	0027      	movs	r7, r4
 8003166:	3920      	subs	r1, #32
 8003168:	40cf      	lsrs	r7, r1
 800316a:	2a20      	cmp	r2, #32
 800316c:	d005      	beq.n	800317a <__aeabi_dsub+0x5be>
 800316e:	2140      	movs	r1, #64	@ 0x40
 8003170:	1a8a      	subs	r2, r1, r2
 8003172:	4094      	lsls	r4, r2
 8003174:	0025      	movs	r5, r4
 8003176:	4305      	orrs	r5, r0
 8003178:	9503      	str	r5, [sp, #12]
 800317a:	9d03      	ldr	r5, [sp, #12]
 800317c:	1e6a      	subs	r2, r5, #1
 800317e:	4195      	sbcs	r5, r2
 8003180:	433d      	orrs	r5, r7
 8003182:	e77d      	b.n	8003080 <__aeabi_dsub+0x4c4>
 8003184:	2a00      	cmp	r2, #0
 8003186:	d100      	bne.n	800318a <__aeabi_dsub+0x5ce>
 8003188:	e744      	b.n	8003014 <__aeabi_dsub+0x458>
 800318a:	2601      	movs	r6, #1
 800318c:	400e      	ands	r6, r1
 800318e:	4663      	mov	r3, ip
 8003190:	08d9      	lsrs	r1, r3, #3
 8003192:	9b02      	ldr	r3, [sp, #8]
 8003194:	075a      	lsls	r2, r3, #29
 8003196:	430a      	orrs	r2, r1
 8003198:	08dc      	lsrs	r4, r3, #3
 800319a:	e6f0      	b.n	8002f7e <__aeabi_dsub+0x3c2>
 800319c:	2a00      	cmp	r2, #0
 800319e:	d028      	beq.n	80031f2 <__aeabi_dsub+0x636>
 80031a0:	4662      	mov	r2, ip
 80031a2:	9f02      	ldr	r7, [sp, #8]
 80031a4:	08c0      	lsrs	r0, r0, #3
 80031a6:	433a      	orrs	r2, r7
 80031a8:	d100      	bne.n	80031ac <__aeabi_dsub+0x5f0>
 80031aa:	e6dc      	b.n	8002f66 <__aeabi_dsub+0x3aa>
 80031ac:	0762      	lsls	r2, r4, #29
 80031ae:	4310      	orrs	r0, r2
 80031b0:	2280      	movs	r2, #128	@ 0x80
 80031b2:	08e4      	lsrs	r4, r4, #3
 80031b4:	0312      	lsls	r2, r2, #12
 80031b6:	4214      	tst	r4, r2
 80031b8:	d009      	beq.n	80031ce <__aeabi_dsub+0x612>
 80031ba:	08fd      	lsrs	r5, r7, #3
 80031bc:	4215      	tst	r5, r2
 80031be:	d106      	bne.n	80031ce <__aeabi_dsub+0x612>
 80031c0:	4663      	mov	r3, ip
 80031c2:	2601      	movs	r6, #1
 80031c4:	002c      	movs	r4, r5
 80031c6:	08d8      	lsrs	r0, r3, #3
 80031c8:	077b      	lsls	r3, r7, #29
 80031ca:	4318      	orrs	r0, r3
 80031cc:	400e      	ands	r6, r1
 80031ce:	0f42      	lsrs	r2, r0, #29
 80031d0:	00c0      	lsls	r0, r0, #3
 80031d2:	08c0      	lsrs	r0, r0, #3
 80031d4:	0752      	lsls	r2, r2, #29
 80031d6:	4302      	orrs	r2, r0
 80031d8:	e601      	b.n	8002dde <__aeabi_dsub+0x222>
 80031da:	4663      	mov	r3, ip
 80031dc:	1a1d      	subs	r5, r3, r0
 80031de:	45ac      	cmp	ip, r5
 80031e0:	4192      	sbcs	r2, r2
 80031e2:	9b02      	ldr	r3, [sp, #8]
 80031e4:	4252      	negs	r2, r2
 80031e6:	1b1c      	subs	r4, r3, r4
 80031e8:	000e      	movs	r6, r1
 80031ea:	4688      	mov	r8, r1
 80031ec:	2701      	movs	r7, #1
 80031ee:	1aa4      	subs	r4, r4, r2
 80031f0:	e546      	b.n	8002c80 <__aeabi_dsub+0xc4>
 80031f2:	4663      	mov	r3, ip
 80031f4:	08d9      	lsrs	r1, r3, #3
 80031f6:	9b02      	ldr	r3, [sp, #8]
 80031f8:	075a      	lsls	r2, r3, #29
 80031fa:	430a      	orrs	r2, r1
 80031fc:	08dc      	lsrs	r4, r3, #3
 80031fe:	e5ee      	b.n	8002dde <__aeabi_dsub+0x222>
 8003200:	4663      	mov	r3, ip
 8003202:	9c02      	ldr	r4, [sp, #8]
 8003204:	9303      	str	r3, [sp, #12]
 8003206:	e6c7      	b.n	8002f98 <__aeabi_dsub+0x3dc>
 8003208:	08c0      	lsrs	r0, r0, #3
 800320a:	2a00      	cmp	r2, #0
 800320c:	d100      	bne.n	8003210 <__aeabi_dsub+0x654>
 800320e:	e6aa      	b.n	8002f66 <__aeabi_dsub+0x3aa>
 8003210:	0762      	lsls	r2, r4, #29
 8003212:	4310      	orrs	r0, r2
 8003214:	2280      	movs	r2, #128	@ 0x80
 8003216:	08e4      	lsrs	r4, r4, #3
 8003218:	0312      	lsls	r2, r2, #12
 800321a:	4214      	tst	r4, r2
 800321c:	d0d7      	beq.n	80031ce <__aeabi_dsub+0x612>
 800321e:	9f02      	ldr	r7, [sp, #8]
 8003220:	08fd      	lsrs	r5, r7, #3
 8003222:	4215      	tst	r5, r2
 8003224:	d1d3      	bne.n	80031ce <__aeabi_dsub+0x612>
 8003226:	4663      	mov	r3, ip
 8003228:	2601      	movs	r6, #1
 800322a:	08d8      	lsrs	r0, r3, #3
 800322c:	077b      	lsls	r3, r7, #29
 800322e:	002c      	movs	r4, r5
 8003230:	4318      	orrs	r0, r3
 8003232:	400e      	ands	r6, r1
 8003234:	e7cb      	b.n	80031ce <__aeabi_dsub+0x612>
 8003236:	000a      	movs	r2, r1
 8003238:	0027      	movs	r7, r4
 800323a:	3a20      	subs	r2, #32
 800323c:	40d7      	lsrs	r7, r2
 800323e:	2920      	cmp	r1, #32
 8003240:	d005      	beq.n	800324e <__aeabi_dsub+0x692>
 8003242:	2240      	movs	r2, #64	@ 0x40
 8003244:	1a52      	subs	r2, r2, r1
 8003246:	4094      	lsls	r4, r2
 8003248:	0025      	movs	r5, r4
 800324a:	4305      	orrs	r5, r0
 800324c:	9503      	str	r5, [sp, #12]
 800324e:	9d03      	ldr	r5, [sp, #12]
 8003250:	1e6a      	subs	r2, r5, #1
 8003252:	4195      	sbcs	r5, r2
 8003254:	432f      	orrs	r7, r5
 8003256:	e610      	b.n	8002e7a <__aeabi_dsub+0x2be>
 8003258:	0014      	movs	r4, r2
 800325a:	2500      	movs	r5, #0
 800325c:	2200      	movs	r2, #0
 800325e:	e556      	b.n	8002d0e <__aeabi_dsub+0x152>
 8003260:	9b02      	ldr	r3, [sp, #8]
 8003262:	4460      	add	r0, ip
 8003264:	4699      	mov	r9, r3
 8003266:	4560      	cmp	r0, ip
 8003268:	4192      	sbcs	r2, r2
 800326a:	444c      	add	r4, r9
 800326c:	4252      	negs	r2, r2
 800326e:	0005      	movs	r5, r0
 8003270:	18a4      	adds	r4, r4, r2
 8003272:	e74c      	b.n	800310e <__aeabi_dsub+0x552>
 8003274:	001a      	movs	r2, r3
 8003276:	001c      	movs	r4, r3
 8003278:	432a      	orrs	r2, r5
 800327a:	d000      	beq.n	800327e <__aeabi_dsub+0x6c2>
 800327c:	e6b3      	b.n	8002fe6 <__aeabi_dsub+0x42a>
 800327e:	e6c9      	b.n	8003014 <__aeabi_dsub+0x458>
 8003280:	2480      	movs	r4, #128	@ 0x80
 8003282:	2600      	movs	r6, #0
 8003284:	0324      	lsls	r4, r4, #12
 8003286:	e5ae      	b.n	8002de6 <__aeabi_dsub+0x22a>
 8003288:	2120      	movs	r1, #32
 800328a:	2500      	movs	r5, #0
 800328c:	1a09      	subs	r1, r1, r0
 800328e:	e517      	b.n	8002cc0 <__aeabi_dsub+0x104>
 8003290:	2200      	movs	r2, #0
 8003292:	2500      	movs	r5, #0
 8003294:	4c0b      	ldr	r4, [pc, #44]	@ (80032c4 <__aeabi_dsub+0x708>)
 8003296:	e53a      	b.n	8002d0e <__aeabi_dsub+0x152>
 8003298:	2d00      	cmp	r5, #0
 800329a:	d100      	bne.n	800329e <__aeabi_dsub+0x6e2>
 800329c:	e5f6      	b.n	8002e8c <__aeabi_dsub+0x2d0>
 800329e:	464b      	mov	r3, r9
 80032a0:	1bda      	subs	r2, r3, r7
 80032a2:	4692      	mov	sl, r2
 80032a4:	2f00      	cmp	r7, #0
 80032a6:	d100      	bne.n	80032aa <__aeabi_dsub+0x6ee>
 80032a8:	e66f      	b.n	8002f8a <__aeabi_dsub+0x3ce>
 80032aa:	2a38      	cmp	r2, #56	@ 0x38
 80032ac:	dc05      	bgt.n	80032ba <__aeabi_dsub+0x6fe>
 80032ae:	2680      	movs	r6, #128	@ 0x80
 80032b0:	0436      	lsls	r6, r6, #16
 80032b2:	4334      	orrs	r4, r6
 80032b4:	4688      	mov	r8, r1
 80032b6:	000e      	movs	r6, r1
 80032b8:	e6d1      	b.n	800305e <__aeabi_dsub+0x4a2>
 80032ba:	4688      	mov	r8, r1
 80032bc:	000e      	movs	r6, r1
 80032be:	2501      	movs	r5, #1
 80032c0:	e6de      	b.n	8003080 <__aeabi_dsub+0x4c4>
 80032c2:	46c0      	nop			@ (mov r8, r8)
 80032c4:	000007ff 	.word	0x000007ff
 80032c8:	ff7fffff 	.word	0xff7fffff
 80032cc:	000007fe 	.word	0x000007fe
 80032d0:	2d00      	cmp	r5, #0
 80032d2:	d100      	bne.n	80032d6 <__aeabi_dsub+0x71a>
 80032d4:	e668      	b.n	8002fa8 <__aeabi_dsub+0x3ec>
 80032d6:	464b      	mov	r3, r9
 80032d8:	1bd9      	subs	r1, r3, r7
 80032da:	2f00      	cmp	r7, #0
 80032dc:	d101      	bne.n	80032e2 <__aeabi_dsub+0x726>
 80032de:	468a      	mov	sl, r1
 80032e0:	e5a7      	b.n	8002e32 <__aeabi_dsub+0x276>
 80032e2:	2701      	movs	r7, #1
 80032e4:	2938      	cmp	r1, #56	@ 0x38
 80032e6:	dd00      	ble.n	80032ea <__aeabi_dsub+0x72e>
 80032e8:	e5c7      	b.n	8002e7a <__aeabi_dsub+0x2be>
 80032ea:	2280      	movs	r2, #128	@ 0x80
 80032ec:	0412      	lsls	r2, r2, #16
 80032ee:	4314      	orrs	r4, r2
 80032f0:	e5af      	b.n	8002e52 <__aeabi_dsub+0x296>
 80032f2:	46c0      	nop			@ (mov r8, r8)

080032f4 <__aeabi_dcmpun>:
 80032f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032f6:	46c6      	mov	lr, r8
 80032f8:	031e      	lsls	r6, r3, #12
 80032fa:	0b36      	lsrs	r6, r6, #12
 80032fc:	46b0      	mov	r8, r6
 80032fe:	4e0d      	ldr	r6, [pc, #52]	@ (8003334 <__aeabi_dcmpun+0x40>)
 8003300:	030c      	lsls	r4, r1, #12
 8003302:	004d      	lsls	r5, r1, #1
 8003304:	005f      	lsls	r7, r3, #1
 8003306:	b500      	push	{lr}
 8003308:	0b24      	lsrs	r4, r4, #12
 800330a:	0d6d      	lsrs	r5, r5, #21
 800330c:	0d7f      	lsrs	r7, r7, #21
 800330e:	42b5      	cmp	r5, r6
 8003310:	d00b      	beq.n	800332a <__aeabi_dcmpun+0x36>
 8003312:	4908      	ldr	r1, [pc, #32]	@ (8003334 <__aeabi_dcmpun+0x40>)
 8003314:	2000      	movs	r0, #0
 8003316:	428f      	cmp	r7, r1
 8003318:	d104      	bne.n	8003324 <__aeabi_dcmpun+0x30>
 800331a:	4646      	mov	r6, r8
 800331c:	4316      	orrs	r6, r2
 800331e:	0030      	movs	r0, r6
 8003320:	1e43      	subs	r3, r0, #1
 8003322:	4198      	sbcs	r0, r3
 8003324:	bc80      	pop	{r7}
 8003326:	46b8      	mov	r8, r7
 8003328:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800332a:	4304      	orrs	r4, r0
 800332c:	2001      	movs	r0, #1
 800332e:	2c00      	cmp	r4, #0
 8003330:	d1f8      	bne.n	8003324 <__aeabi_dcmpun+0x30>
 8003332:	e7ee      	b.n	8003312 <__aeabi_dcmpun+0x1e>
 8003334:	000007ff 	.word	0x000007ff

08003338 <__aeabi_d2iz>:
 8003338:	000b      	movs	r3, r1
 800333a:	0002      	movs	r2, r0
 800333c:	b570      	push	{r4, r5, r6, lr}
 800333e:	4d16      	ldr	r5, [pc, #88]	@ (8003398 <__aeabi_d2iz+0x60>)
 8003340:	030c      	lsls	r4, r1, #12
 8003342:	b082      	sub	sp, #8
 8003344:	0049      	lsls	r1, r1, #1
 8003346:	2000      	movs	r0, #0
 8003348:	9200      	str	r2, [sp, #0]
 800334a:	9301      	str	r3, [sp, #4]
 800334c:	0b24      	lsrs	r4, r4, #12
 800334e:	0d49      	lsrs	r1, r1, #21
 8003350:	0fde      	lsrs	r6, r3, #31
 8003352:	42a9      	cmp	r1, r5
 8003354:	dd04      	ble.n	8003360 <__aeabi_d2iz+0x28>
 8003356:	4811      	ldr	r0, [pc, #68]	@ (800339c <__aeabi_d2iz+0x64>)
 8003358:	4281      	cmp	r1, r0
 800335a:	dd03      	ble.n	8003364 <__aeabi_d2iz+0x2c>
 800335c:	4b10      	ldr	r3, [pc, #64]	@ (80033a0 <__aeabi_d2iz+0x68>)
 800335e:	18f0      	adds	r0, r6, r3
 8003360:	b002      	add	sp, #8
 8003362:	bd70      	pop	{r4, r5, r6, pc}
 8003364:	2080      	movs	r0, #128	@ 0x80
 8003366:	0340      	lsls	r0, r0, #13
 8003368:	4320      	orrs	r0, r4
 800336a:	4c0e      	ldr	r4, [pc, #56]	@ (80033a4 <__aeabi_d2iz+0x6c>)
 800336c:	1a64      	subs	r4, r4, r1
 800336e:	2c1f      	cmp	r4, #31
 8003370:	dd08      	ble.n	8003384 <__aeabi_d2iz+0x4c>
 8003372:	4b0d      	ldr	r3, [pc, #52]	@ (80033a8 <__aeabi_d2iz+0x70>)
 8003374:	1a5b      	subs	r3, r3, r1
 8003376:	40d8      	lsrs	r0, r3
 8003378:	0003      	movs	r3, r0
 800337a:	4258      	negs	r0, r3
 800337c:	2e00      	cmp	r6, #0
 800337e:	d1ef      	bne.n	8003360 <__aeabi_d2iz+0x28>
 8003380:	0018      	movs	r0, r3
 8003382:	e7ed      	b.n	8003360 <__aeabi_d2iz+0x28>
 8003384:	4b09      	ldr	r3, [pc, #36]	@ (80033ac <__aeabi_d2iz+0x74>)
 8003386:	9a00      	ldr	r2, [sp, #0]
 8003388:	469c      	mov	ip, r3
 800338a:	0003      	movs	r3, r0
 800338c:	4461      	add	r1, ip
 800338e:	408b      	lsls	r3, r1
 8003390:	40e2      	lsrs	r2, r4
 8003392:	4313      	orrs	r3, r2
 8003394:	e7f1      	b.n	800337a <__aeabi_d2iz+0x42>
 8003396:	46c0      	nop			@ (mov r8, r8)
 8003398:	000003fe 	.word	0x000003fe
 800339c:	0000041d 	.word	0x0000041d
 80033a0:	7fffffff 	.word	0x7fffffff
 80033a4:	00000433 	.word	0x00000433
 80033a8:	00000413 	.word	0x00000413
 80033ac:	fffffbed 	.word	0xfffffbed

080033b0 <__aeabi_i2d>:
 80033b0:	b570      	push	{r4, r5, r6, lr}
 80033b2:	2800      	cmp	r0, #0
 80033b4:	d016      	beq.n	80033e4 <__aeabi_i2d+0x34>
 80033b6:	17c3      	asrs	r3, r0, #31
 80033b8:	18c5      	adds	r5, r0, r3
 80033ba:	405d      	eors	r5, r3
 80033bc:	0fc4      	lsrs	r4, r0, #31
 80033be:	0028      	movs	r0, r5
 80033c0:	f000 f914 	bl	80035ec <__clzsi2>
 80033c4:	4b10      	ldr	r3, [pc, #64]	@ (8003408 <__aeabi_i2d+0x58>)
 80033c6:	1a1b      	subs	r3, r3, r0
 80033c8:	055b      	lsls	r3, r3, #21
 80033ca:	0d5b      	lsrs	r3, r3, #21
 80033cc:	280a      	cmp	r0, #10
 80033ce:	dc14      	bgt.n	80033fa <__aeabi_i2d+0x4a>
 80033d0:	0002      	movs	r2, r0
 80033d2:	002e      	movs	r6, r5
 80033d4:	3215      	adds	r2, #21
 80033d6:	4096      	lsls	r6, r2
 80033d8:	220b      	movs	r2, #11
 80033da:	1a12      	subs	r2, r2, r0
 80033dc:	40d5      	lsrs	r5, r2
 80033de:	032d      	lsls	r5, r5, #12
 80033e0:	0b2d      	lsrs	r5, r5, #12
 80033e2:	e003      	b.n	80033ec <__aeabi_i2d+0x3c>
 80033e4:	2400      	movs	r4, #0
 80033e6:	2300      	movs	r3, #0
 80033e8:	2500      	movs	r5, #0
 80033ea:	2600      	movs	r6, #0
 80033ec:	051b      	lsls	r3, r3, #20
 80033ee:	432b      	orrs	r3, r5
 80033f0:	07e4      	lsls	r4, r4, #31
 80033f2:	4323      	orrs	r3, r4
 80033f4:	0030      	movs	r0, r6
 80033f6:	0019      	movs	r1, r3
 80033f8:	bd70      	pop	{r4, r5, r6, pc}
 80033fa:	380b      	subs	r0, #11
 80033fc:	4085      	lsls	r5, r0
 80033fe:	032d      	lsls	r5, r5, #12
 8003400:	2600      	movs	r6, #0
 8003402:	0b2d      	lsrs	r5, r5, #12
 8003404:	e7f2      	b.n	80033ec <__aeabi_i2d+0x3c>
 8003406:	46c0      	nop			@ (mov r8, r8)
 8003408:	0000041e 	.word	0x0000041e

0800340c <__aeabi_ui2d>:
 800340c:	b510      	push	{r4, lr}
 800340e:	1e04      	subs	r4, r0, #0
 8003410:	d010      	beq.n	8003434 <__aeabi_ui2d+0x28>
 8003412:	f000 f8eb 	bl	80035ec <__clzsi2>
 8003416:	4b0e      	ldr	r3, [pc, #56]	@ (8003450 <__aeabi_ui2d+0x44>)
 8003418:	1a1b      	subs	r3, r3, r0
 800341a:	055b      	lsls	r3, r3, #21
 800341c:	0d5b      	lsrs	r3, r3, #21
 800341e:	280a      	cmp	r0, #10
 8003420:	dc0f      	bgt.n	8003442 <__aeabi_ui2d+0x36>
 8003422:	220b      	movs	r2, #11
 8003424:	0021      	movs	r1, r4
 8003426:	1a12      	subs	r2, r2, r0
 8003428:	40d1      	lsrs	r1, r2
 800342a:	3015      	adds	r0, #21
 800342c:	030a      	lsls	r2, r1, #12
 800342e:	4084      	lsls	r4, r0
 8003430:	0b12      	lsrs	r2, r2, #12
 8003432:	e001      	b.n	8003438 <__aeabi_ui2d+0x2c>
 8003434:	2300      	movs	r3, #0
 8003436:	2200      	movs	r2, #0
 8003438:	051b      	lsls	r3, r3, #20
 800343a:	4313      	orrs	r3, r2
 800343c:	0020      	movs	r0, r4
 800343e:	0019      	movs	r1, r3
 8003440:	bd10      	pop	{r4, pc}
 8003442:	0022      	movs	r2, r4
 8003444:	380b      	subs	r0, #11
 8003446:	4082      	lsls	r2, r0
 8003448:	0312      	lsls	r2, r2, #12
 800344a:	2400      	movs	r4, #0
 800344c:	0b12      	lsrs	r2, r2, #12
 800344e:	e7f3      	b.n	8003438 <__aeabi_ui2d+0x2c>
 8003450:	0000041e 	.word	0x0000041e

08003454 <__aeabi_f2d>:
 8003454:	b570      	push	{r4, r5, r6, lr}
 8003456:	0242      	lsls	r2, r0, #9
 8003458:	0043      	lsls	r3, r0, #1
 800345a:	0fc4      	lsrs	r4, r0, #31
 800345c:	20fe      	movs	r0, #254	@ 0xfe
 800345e:	0e1b      	lsrs	r3, r3, #24
 8003460:	1c59      	adds	r1, r3, #1
 8003462:	0a55      	lsrs	r5, r2, #9
 8003464:	4208      	tst	r0, r1
 8003466:	d00c      	beq.n	8003482 <__aeabi_f2d+0x2e>
 8003468:	21e0      	movs	r1, #224	@ 0xe0
 800346a:	0089      	lsls	r1, r1, #2
 800346c:	468c      	mov	ip, r1
 800346e:	076d      	lsls	r5, r5, #29
 8003470:	0b12      	lsrs	r2, r2, #12
 8003472:	4463      	add	r3, ip
 8003474:	051b      	lsls	r3, r3, #20
 8003476:	4313      	orrs	r3, r2
 8003478:	07e4      	lsls	r4, r4, #31
 800347a:	4323      	orrs	r3, r4
 800347c:	0028      	movs	r0, r5
 800347e:	0019      	movs	r1, r3
 8003480:	bd70      	pop	{r4, r5, r6, pc}
 8003482:	2b00      	cmp	r3, #0
 8003484:	d114      	bne.n	80034b0 <__aeabi_f2d+0x5c>
 8003486:	2d00      	cmp	r5, #0
 8003488:	d01b      	beq.n	80034c2 <__aeabi_f2d+0x6e>
 800348a:	0028      	movs	r0, r5
 800348c:	f000 f8ae 	bl	80035ec <__clzsi2>
 8003490:	280a      	cmp	r0, #10
 8003492:	dc1c      	bgt.n	80034ce <__aeabi_f2d+0x7a>
 8003494:	230b      	movs	r3, #11
 8003496:	002a      	movs	r2, r5
 8003498:	1a1b      	subs	r3, r3, r0
 800349a:	40da      	lsrs	r2, r3
 800349c:	0003      	movs	r3, r0
 800349e:	3315      	adds	r3, #21
 80034a0:	409d      	lsls	r5, r3
 80034a2:	4b0e      	ldr	r3, [pc, #56]	@ (80034dc <__aeabi_f2d+0x88>)
 80034a4:	0312      	lsls	r2, r2, #12
 80034a6:	1a1b      	subs	r3, r3, r0
 80034a8:	055b      	lsls	r3, r3, #21
 80034aa:	0b12      	lsrs	r2, r2, #12
 80034ac:	0d5b      	lsrs	r3, r3, #21
 80034ae:	e7e1      	b.n	8003474 <__aeabi_f2d+0x20>
 80034b0:	2d00      	cmp	r5, #0
 80034b2:	d009      	beq.n	80034c8 <__aeabi_f2d+0x74>
 80034b4:	0b13      	lsrs	r3, r2, #12
 80034b6:	2280      	movs	r2, #128	@ 0x80
 80034b8:	0312      	lsls	r2, r2, #12
 80034ba:	431a      	orrs	r2, r3
 80034bc:	076d      	lsls	r5, r5, #29
 80034be:	4b08      	ldr	r3, [pc, #32]	@ (80034e0 <__aeabi_f2d+0x8c>)
 80034c0:	e7d8      	b.n	8003474 <__aeabi_f2d+0x20>
 80034c2:	2300      	movs	r3, #0
 80034c4:	2200      	movs	r2, #0
 80034c6:	e7d5      	b.n	8003474 <__aeabi_f2d+0x20>
 80034c8:	2200      	movs	r2, #0
 80034ca:	4b05      	ldr	r3, [pc, #20]	@ (80034e0 <__aeabi_f2d+0x8c>)
 80034cc:	e7d2      	b.n	8003474 <__aeabi_f2d+0x20>
 80034ce:	0003      	movs	r3, r0
 80034d0:	002a      	movs	r2, r5
 80034d2:	3b0b      	subs	r3, #11
 80034d4:	409a      	lsls	r2, r3
 80034d6:	2500      	movs	r5, #0
 80034d8:	e7e3      	b.n	80034a2 <__aeabi_f2d+0x4e>
 80034da:	46c0      	nop			@ (mov r8, r8)
 80034dc:	00000389 	.word	0x00000389
 80034e0:	000007ff 	.word	0x000007ff

080034e4 <__aeabi_d2f>:
 80034e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034e6:	004b      	lsls	r3, r1, #1
 80034e8:	030f      	lsls	r7, r1, #12
 80034ea:	0d5b      	lsrs	r3, r3, #21
 80034ec:	4c3b      	ldr	r4, [pc, #236]	@ (80035dc <__aeabi_d2f+0xf8>)
 80034ee:	0f45      	lsrs	r5, r0, #29
 80034f0:	b083      	sub	sp, #12
 80034f2:	0a7f      	lsrs	r7, r7, #9
 80034f4:	1c5e      	adds	r6, r3, #1
 80034f6:	432f      	orrs	r7, r5
 80034f8:	9000      	str	r0, [sp, #0]
 80034fa:	9101      	str	r1, [sp, #4]
 80034fc:	0fca      	lsrs	r2, r1, #31
 80034fe:	00c5      	lsls	r5, r0, #3
 8003500:	4226      	tst	r6, r4
 8003502:	d00b      	beq.n	800351c <__aeabi_d2f+0x38>
 8003504:	4936      	ldr	r1, [pc, #216]	@ (80035e0 <__aeabi_d2f+0xfc>)
 8003506:	185c      	adds	r4, r3, r1
 8003508:	2cfe      	cmp	r4, #254	@ 0xfe
 800350a:	dd13      	ble.n	8003534 <__aeabi_d2f+0x50>
 800350c:	20ff      	movs	r0, #255	@ 0xff
 800350e:	2300      	movs	r3, #0
 8003510:	05c0      	lsls	r0, r0, #23
 8003512:	4318      	orrs	r0, r3
 8003514:	07d2      	lsls	r2, r2, #31
 8003516:	4310      	orrs	r0, r2
 8003518:	b003      	add	sp, #12
 800351a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800351c:	2b00      	cmp	r3, #0
 800351e:	d102      	bne.n	8003526 <__aeabi_d2f+0x42>
 8003520:	2000      	movs	r0, #0
 8003522:	2300      	movs	r3, #0
 8003524:	e7f4      	b.n	8003510 <__aeabi_d2f+0x2c>
 8003526:	433d      	orrs	r5, r7
 8003528:	d0f0      	beq.n	800350c <__aeabi_d2f+0x28>
 800352a:	2380      	movs	r3, #128	@ 0x80
 800352c:	03db      	lsls	r3, r3, #15
 800352e:	20ff      	movs	r0, #255	@ 0xff
 8003530:	433b      	orrs	r3, r7
 8003532:	e7ed      	b.n	8003510 <__aeabi_d2f+0x2c>
 8003534:	2c00      	cmp	r4, #0
 8003536:	dd14      	ble.n	8003562 <__aeabi_d2f+0x7e>
 8003538:	9b00      	ldr	r3, [sp, #0]
 800353a:	00ff      	lsls	r7, r7, #3
 800353c:	019b      	lsls	r3, r3, #6
 800353e:	1e58      	subs	r0, r3, #1
 8003540:	4183      	sbcs	r3, r0
 8003542:	0f69      	lsrs	r1, r5, #29
 8003544:	433b      	orrs	r3, r7
 8003546:	430b      	orrs	r3, r1
 8003548:	0759      	lsls	r1, r3, #29
 800354a:	d041      	beq.n	80035d0 <__aeabi_d2f+0xec>
 800354c:	210f      	movs	r1, #15
 800354e:	4019      	ands	r1, r3
 8003550:	2904      	cmp	r1, #4
 8003552:	d028      	beq.n	80035a6 <__aeabi_d2f+0xc2>
 8003554:	3304      	adds	r3, #4
 8003556:	0159      	lsls	r1, r3, #5
 8003558:	d525      	bpl.n	80035a6 <__aeabi_d2f+0xc2>
 800355a:	3401      	adds	r4, #1
 800355c:	2300      	movs	r3, #0
 800355e:	b2e0      	uxtb	r0, r4
 8003560:	e7d6      	b.n	8003510 <__aeabi_d2f+0x2c>
 8003562:	0021      	movs	r1, r4
 8003564:	3117      	adds	r1, #23
 8003566:	dbdb      	blt.n	8003520 <__aeabi_d2f+0x3c>
 8003568:	2180      	movs	r1, #128	@ 0x80
 800356a:	201e      	movs	r0, #30
 800356c:	0409      	lsls	r1, r1, #16
 800356e:	4339      	orrs	r1, r7
 8003570:	1b00      	subs	r0, r0, r4
 8003572:	281f      	cmp	r0, #31
 8003574:	dd1b      	ble.n	80035ae <__aeabi_d2f+0xca>
 8003576:	2602      	movs	r6, #2
 8003578:	4276      	negs	r6, r6
 800357a:	1b34      	subs	r4, r6, r4
 800357c:	000e      	movs	r6, r1
 800357e:	40e6      	lsrs	r6, r4
 8003580:	0034      	movs	r4, r6
 8003582:	2820      	cmp	r0, #32
 8003584:	d004      	beq.n	8003590 <__aeabi_d2f+0xac>
 8003586:	4817      	ldr	r0, [pc, #92]	@ (80035e4 <__aeabi_d2f+0x100>)
 8003588:	4684      	mov	ip, r0
 800358a:	4463      	add	r3, ip
 800358c:	4099      	lsls	r1, r3
 800358e:	430d      	orrs	r5, r1
 8003590:	002b      	movs	r3, r5
 8003592:	1e59      	subs	r1, r3, #1
 8003594:	418b      	sbcs	r3, r1
 8003596:	4323      	orrs	r3, r4
 8003598:	0759      	lsls	r1, r3, #29
 800359a:	d015      	beq.n	80035c8 <__aeabi_d2f+0xe4>
 800359c:	210f      	movs	r1, #15
 800359e:	2400      	movs	r4, #0
 80035a0:	4019      	ands	r1, r3
 80035a2:	2904      	cmp	r1, #4
 80035a4:	d117      	bne.n	80035d6 <__aeabi_d2f+0xf2>
 80035a6:	019b      	lsls	r3, r3, #6
 80035a8:	0a5b      	lsrs	r3, r3, #9
 80035aa:	b2e0      	uxtb	r0, r4
 80035ac:	e7b0      	b.n	8003510 <__aeabi_d2f+0x2c>
 80035ae:	4c0e      	ldr	r4, [pc, #56]	@ (80035e8 <__aeabi_d2f+0x104>)
 80035b0:	191c      	adds	r4, r3, r4
 80035b2:	002b      	movs	r3, r5
 80035b4:	40a5      	lsls	r5, r4
 80035b6:	40c3      	lsrs	r3, r0
 80035b8:	40a1      	lsls	r1, r4
 80035ba:	1e68      	subs	r0, r5, #1
 80035bc:	4185      	sbcs	r5, r0
 80035be:	4329      	orrs	r1, r5
 80035c0:	430b      	orrs	r3, r1
 80035c2:	2400      	movs	r4, #0
 80035c4:	0759      	lsls	r1, r3, #29
 80035c6:	d1c1      	bne.n	800354c <__aeabi_d2f+0x68>
 80035c8:	019b      	lsls	r3, r3, #6
 80035ca:	2000      	movs	r0, #0
 80035cc:	0a5b      	lsrs	r3, r3, #9
 80035ce:	e79f      	b.n	8003510 <__aeabi_d2f+0x2c>
 80035d0:	08db      	lsrs	r3, r3, #3
 80035d2:	b2e0      	uxtb	r0, r4
 80035d4:	e79c      	b.n	8003510 <__aeabi_d2f+0x2c>
 80035d6:	3304      	adds	r3, #4
 80035d8:	e7e5      	b.n	80035a6 <__aeabi_d2f+0xc2>
 80035da:	46c0      	nop			@ (mov r8, r8)
 80035dc:	000007fe 	.word	0x000007fe
 80035e0:	fffffc80 	.word	0xfffffc80
 80035e4:	fffffca2 	.word	0xfffffca2
 80035e8:	fffffc82 	.word	0xfffffc82

080035ec <__clzsi2>:
 80035ec:	211c      	movs	r1, #28
 80035ee:	2301      	movs	r3, #1
 80035f0:	041b      	lsls	r3, r3, #16
 80035f2:	4298      	cmp	r0, r3
 80035f4:	d301      	bcc.n	80035fa <__clzsi2+0xe>
 80035f6:	0c00      	lsrs	r0, r0, #16
 80035f8:	3910      	subs	r1, #16
 80035fa:	0a1b      	lsrs	r3, r3, #8
 80035fc:	4298      	cmp	r0, r3
 80035fe:	d301      	bcc.n	8003604 <__clzsi2+0x18>
 8003600:	0a00      	lsrs	r0, r0, #8
 8003602:	3908      	subs	r1, #8
 8003604:	091b      	lsrs	r3, r3, #4
 8003606:	4298      	cmp	r0, r3
 8003608:	d301      	bcc.n	800360e <__clzsi2+0x22>
 800360a:	0900      	lsrs	r0, r0, #4
 800360c:	3904      	subs	r1, #4
 800360e:	a202      	add	r2, pc, #8	@ (adr r2, 8003618 <__clzsi2+0x2c>)
 8003610:	5c10      	ldrb	r0, [r2, r0]
 8003612:	1840      	adds	r0, r0, r1
 8003614:	4770      	bx	lr
 8003616:	46c0      	nop			@ (mov r8, r8)
 8003618:	02020304 	.word	0x02020304
 800361c:	01010101 	.word	0x01010101
	...

08003628 <__clzdi2>:
 8003628:	b510      	push	{r4, lr}
 800362a:	2900      	cmp	r1, #0
 800362c:	d103      	bne.n	8003636 <__clzdi2+0xe>
 800362e:	f7ff ffdd 	bl	80035ec <__clzsi2>
 8003632:	3020      	adds	r0, #32
 8003634:	e002      	b.n	800363c <__clzdi2+0x14>
 8003636:	0008      	movs	r0, r1
 8003638:	f7ff ffd8 	bl	80035ec <__clzsi2>
 800363c:	bd10      	pop	{r4, pc}
 800363e:	46c0      	nop			@ (mov r8, r8)

08003640 <drawPixel>:
extern uint8_t _rowstart;       ///< Some displays need this changed to offset
extern uint8_t _xstart;
extern uint8_t _ystart;

void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 8003640:	b590      	push	{r4, r7, lr}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	0004      	movs	r4, r0
 8003648:	0008      	movs	r0, r1
 800364a:	0011      	movs	r1, r2
 800364c:	1dbb      	adds	r3, r7, #6
 800364e:	1c22      	adds	r2, r4, #0
 8003650:	801a      	strh	r2, [r3, #0]
 8003652:	1d3b      	adds	r3, r7, #4
 8003654:	1c02      	adds	r2, r0, #0
 8003656:	801a      	strh	r2, [r3, #0]
 8003658:	1cbb      	adds	r3, r7, #2
 800365a:	1c0a      	adds	r2, r1, #0
 800365c:	801a      	strh	r2, [r3, #0]
	ST7735_DrawPixel(y,x, color);
 800365e:	1d3b      	adds	r3, r7, #4
 8003660:	8818      	ldrh	r0, [r3, #0]
 8003662:	1dbb      	adds	r3, r7, #6
 8003664:	8819      	ldrh	r1, [r3, #0]
 8003666:	1cbb      	adds	r3, r7, #2
 8003668:	881b      	ldrh	r3, [r3, #0]
 800366a:	001a      	movs	r2, r3
 800366c:	f000 fefc 	bl	8004468 <ST7735_DrawPixel>
}
 8003670:	46c0      	nop			@ (mov r8, r8)
 8003672:	46bd      	mov	sp, r7
 8003674:	b003      	add	sp, #12
 8003676:	bd90      	pop	{r4, r7, pc}

08003678 <fillRect>:

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8003678:	b5f0      	push	{r4, r5, r6, r7, lr}
 800367a:	46c6      	mov	lr, r8
 800367c:	b500      	push	{lr}
 800367e:	b090      	sub	sp, #64	@ 0x40
 8003680:	af04      	add	r7, sp, #16
 8003682:	468c      	mov	ip, r1
 8003684:	0016      	movs	r6, r2
 8003686:	0019      	movs	r1, r3
 8003688:	221e      	movs	r2, #30
 800368a:	18ba      	adds	r2, r7, r2
 800368c:	1c03      	adds	r3, r0, #0
 800368e:	8013      	strh	r3, [r2, #0]
 8003690:	231c      	movs	r3, #28
 8003692:	18fb      	adds	r3, r7, r3
 8003694:	4662      	mov	r2, ip
 8003696:	801a      	strh	r2, [r3, #0]
 8003698:	201a      	movs	r0, #26
 800369a:	183b      	adds	r3, r7, r0
 800369c:	1c32      	adds	r2, r6, #0
 800369e:	801a      	strh	r2, [r3, #0]
 80036a0:	2018      	movs	r0, #24
 80036a2:	183b      	adds	r3, r7, r0
 80036a4:	1c0a      	adds	r2, r1, #0
 80036a6:	801a      	strh	r2, [r3, #0]
 80036a8:	466b      	mov	r3, sp
 80036aa:	4698      	mov	r8, r3
	uint16_t pallette[] = {color};
 80036ac:	230c      	movs	r3, #12
 80036ae:	0001      	movs	r1, r0
 80036b0:	185e      	adds	r6, r3, r1
 80036b2:	19f2      	adds	r2, r6, r7
 80036b4:	2030      	movs	r0, #48	@ 0x30
 80036b6:	1846      	adds	r6, r0, r1
 80036b8:	19f3      	adds	r3, r6, r7
 80036ba:	881b      	ldrh	r3, [r3, #0]
 80036bc:	8013      	strh	r3, [r2, #0]
	    uint16_t pixels[w*h][2];
 80036be:	201a      	movs	r0, #26
 80036c0:	183b      	adds	r3, r7, r0
 80036c2:	2200      	movs	r2, #0
 80036c4:	5e9b      	ldrsh	r3, [r3, r2]
 80036c6:	187a      	adds	r2, r7, r1
 80036c8:	2000      	movs	r0, #0
 80036ca:	5e12      	ldrsh	r2, [r2, r0]
 80036cc:	4353      	muls	r3, r2
 80036ce:	1e5a      	subs	r2, r3, #1
 80036d0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80036d2:	001a      	movs	r2, r3
 80036d4:	60ba      	str	r2, [r7, #8]
 80036d6:	2200      	movs	r2, #0
 80036d8:	60fa      	str	r2, [r7, #12]
 80036da:	68b8      	ldr	r0, [r7, #8]
 80036dc:	68f9      	ldr	r1, [r7, #12]
 80036de:	0002      	movs	r2, r0
 80036e0:	0ed2      	lsrs	r2, r2, #27
 80036e2:	000e      	movs	r6, r1
 80036e4:	0176      	lsls	r6, r6, #5
 80036e6:	617e      	str	r6, [r7, #20]
 80036e8:	697e      	ldr	r6, [r7, #20]
 80036ea:	4316      	orrs	r6, r2
 80036ec:	617e      	str	r6, [r7, #20]
 80036ee:	0002      	movs	r2, r0
 80036f0:	0152      	lsls	r2, r2, #5
 80036f2:	613a      	str	r2, [r7, #16]
 80036f4:	001a      	movs	r2, r3
 80036f6:	603a      	str	r2, [r7, #0]
 80036f8:	2200      	movs	r2, #0
 80036fa:	607a      	str	r2, [r7, #4]
 80036fc:	6838      	ldr	r0, [r7, #0]
 80036fe:	6879      	ldr	r1, [r7, #4]
 8003700:	0002      	movs	r2, r0
 8003702:	0ed2      	lsrs	r2, r2, #27
 8003704:	000e      	movs	r6, r1
 8003706:	0175      	lsls	r5, r6, #5
 8003708:	4315      	orrs	r5, r2
 800370a:	0002      	movs	r2, r0
 800370c:	0154      	lsls	r4, r2, #5
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	3307      	adds	r3, #7
 8003712:	08db      	lsrs	r3, r3, #3
 8003714:	00db      	lsls	r3, r3, #3
 8003716:	466a      	mov	r2, sp
 8003718:	1ad2      	subs	r2, r2, r3
 800371a:	4695      	mov	sp, r2
 800371c:	ab04      	add	r3, sp, #16
 800371e:	3301      	adds	r3, #1
 8003720:	085b      	lsrs	r3, r3, #1
 8003722:	005b      	lsls	r3, r3, #1
 8003724:	62bb      	str	r3, [r7, #40]	@ 0x28

	    pixels[0][0] = 0;
 8003726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003728:	2200      	movs	r2, #0
 800372a:	801a      	strh	r2, [r3, #0]
	    pixels[0][1] = w*h;
 800372c:	201a      	movs	r0, #26
 800372e:	183b      	adds	r3, r7, r0
 8003730:	881b      	ldrh	r3, [r3, #0]
 8003732:	2118      	movs	r1, #24
 8003734:	187a      	adds	r2, r7, r1
 8003736:	8812      	ldrh	r2, [r2, #0]
 8003738:	4353      	muls	r3, r2
 800373a:	b29a      	uxth	r2, r3
 800373c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800373e:	805a      	strh	r2, [r3, #2]
	    drawImage(pixels, pallette, x, y, w, h, 1);
 8003740:	221e      	movs	r2, #30
 8003742:	18bb      	adds	r3, r7, r2
 8003744:	2200      	movs	r2, #0
 8003746:	5e9c      	ldrsh	r4, [r3, r2]
 8003748:	231c      	movs	r3, #28
 800374a:	18fb      	adds	r3, r7, r3
 800374c:	2200      	movs	r2, #0
 800374e:	5e9d      	ldrsh	r5, [r3, r2]
 8003750:	183b      	adds	r3, r7, r0
 8003752:	2200      	movs	r2, #0
 8003754:	5e9b      	ldrsh	r3, [r3, r2]
 8003756:	000e      	movs	r6, r1
 8003758:	187a      	adds	r2, r7, r1
 800375a:	2000      	movs	r0, #0
 800375c:	5e12      	ldrsh	r2, [r2, r0]
 800375e:	210c      	movs	r1, #12
 8003760:	1989      	adds	r1, r1, r6
 8003762:	19c9      	adds	r1, r1, r7
 8003764:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003766:	2601      	movs	r6, #1
 8003768:	46b4      	mov	ip, r6
 800376a:	4666      	mov	r6, ip
 800376c:	9602      	str	r6, [sp, #8]
 800376e:	9201      	str	r2, [sp, #4]
 8003770:	9300      	str	r3, [sp, #0]
 8003772:	002b      	movs	r3, r5
 8003774:	0022      	movs	r2, r4
 8003776:	f000 fbc5 	bl	8003f04 <drawImage>
 800377a:	46c5      	mov	sp, r8

	//ST7735_FillRectangle(x, y, w, h, color);
}
 800377c:	46c0      	nop			@ (mov r8, r8)
 800377e:	46bd      	mov	sp, r7
 8003780:	b00c      	add	sp, #48	@ 0x30
 8003782:	bc80      	pop	{r7}
 8003784:	46b8      	mov	r8, r7
 8003786:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003788 <writePixel>:

#define min(a, b) (((a) < (b)) ? (a) : (b))


void writePixel(int16_t x, int16_t y, uint16_t color)
{
 8003788:	b590      	push	{r4, r7, lr}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	0004      	movs	r4, r0
 8003790:	0008      	movs	r0, r1
 8003792:	0011      	movs	r1, r2
 8003794:	1dbb      	adds	r3, r7, #6
 8003796:	1c22      	adds	r2, r4, #0
 8003798:	801a      	strh	r2, [r3, #0]
 800379a:	1d3b      	adds	r3, r7, #4
 800379c:	1c02      	adds	r2, r0, #0
 800379e:	801a      	strh	r2, [r3, #0]
 80037a0:	1cbb      	adds	r3, r7, #2
 80037a2:	1c0a      	adds	r2, r1, #0
 80037a4:	801a      	strh	r2, [r3, #0]
    drawPixel(x, y, color);
 80037a6:	1cbb      	adds	r3, r7, #2
 80037a8:	881a      	ldrh	r2, [r3, #0]
 80037aa:	1d3b      	adds	r3, r7, #4
 80037ac:	2100      	movs	r1, #0
 80037ae:	5e59      	ldrsh	r1, [r3, r1]
 80037b0:	1dbb      	adds	r3, r7, #6
 80037b2:	2000      	movs	r0, #0
 80037b4:	5e1b      	ldrsh	r3, [r3, r0]
 80037b6:	0018      	movs	r0, r3
 80037b8:	f7ff ff42 	bl	8003640 <drawPixel>
}
 80037bc:	46c0      	nop			@ (mov r8, r8)
 80037be:	46bd      	mov	sp, r7
 80037c0:	b003      	add	sp, #12
 80037c2:	bd90      	pop	{r4, r7, pc}

080037c4 <writeLine>:

void writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 80037c4:	b5b0      	push	{r4, r5, r7, lr}
 80037c6:	b088      	sub	sp, #32
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	0005      	movs	r5, r0
 80037cc:	000c      	movs	r4, r1
 80037ce:	0010      	movs	r0, r2
 80037d0:	0019      	movs	r1, r3
 80037d2:	1dbb      	adds	r3, r7, #6
 80037d4:	1c2a      	adds	r2, r5, #0
 80037d6:	801a      	strh	r2, [r3, #0]
 80037d8:	1d3b      	adds	r3, r7, #4
 80037da:	1c22      	adds	r2, r4, #0
 80037dc:	801a      	strh	r2, [r3, #0]
 80037de:	1cbb      	adds	r3, r7, #2
 80037e0:	1c02      	adds	r2, r0, #0
 80037e2:	801a      	strh	r2, [r3, #0]
 80037e4:	003b      	movs	r3, r7
 80037e6:	1c0a      	adds	r2, r1, #0
 80037e8:	801a      	strh	r2, [r3, #0]
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 80037ea:	003b      	movs	r3, r7
 80037ec:	2200      	movs	r2, #0
 80037ee:	5e9a      	ldrsh	r2, [r3, r2]
 80037f0:	1d3b      	adds	r3, r7, #4
 80037f2:	2100      	movs	r1, #0
 80037f4:	5e5b      	ldrsh	r3, [r3, r1]
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	17d9      	asrs	r1, r3, #31
 80037fa:	185a      	adds	r2, r3, r1
 80037fc:	404a      	eors	r2, r1
 80037fe:	1cbb      	adds	r3, r7, #2
 8003800:	2100      	movs	r1, #0
 8003802:	5e59      	ldrsh	r1, [r3, r1]
 8003804:	1dbb      	adds	r3, r7, #6
 8003806:	2000      	movs	r0, #0
 8003808:	5e1b      	ldrsh	r3, [r3, r0]
 800380a:	1acb      	subs	r3, r1, r3
 800380c:	17d9      	asrs	r1, r3, #31
 800380e:	185b      	adds	r3, r3, r1
 8003810:	404b      	eors	r3, r1
 8003812:	2101      	movs	r1, #1
 8003814:	429a      	cmp	r2, r3
 8003816:	dc01      	bgt.n	800381c <writeLine+0x58>
 8003818:	2300      	movs	r3, #0
 800381a:	1c19      	adds	r1, r3, #0
 800381c:	b2ca      	uxtb	r2, r1
 800381e:	211a      	movs	r1, #26
 8003820:	187b      	adds	r3, r7, r1
 8003822:	801a      	strh	r2, [r3, #0]
    if (steep) {
 8003824:	187b      	adds	r3, r7, r1
 8003826:	2200      	movs	r2, #0
 8003828:	5e9b      	ldrsh	r3, [r3, r2]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d019      	beq.n	8003862 <writeLine+0x9e>
        _swap_int16_t(x0, y0);
 800382e:	2118      	movs	r1, #24
 8003830:	187b      	adds	r3, r7, r1
 8003832:	1dba      	adds	r2, r7, #6
 8003834:	8812      	ldrh	r2, [r2, #0]
 8003836:	801a      	strh	r2, [r3, #0]
 8003838:	1dbb      	adds	r3, r7, #6
 800383a:	1d3a      	adds	r2, r7, #4
 800383c:	8812      	ldrh	r2, [r2, #0]
 800383e:	801a      	strh	r2, [r3, #0]
 8003840:	1d3b      	adds	r3, r7, #4
 8003842:	187a      	adds	r2, r7, r1
 8003844:	8812      	ldrh	r2, [r2, #0]
 8003846:	801a      	strh	r2, [r3, #0]
        _swap_int16_t(x1, y1);
 8003848:	2116      	movs	r1, #22
 800384a:	187b      	adds	r3, r7, r1
 800384c:	1cba      	adds	r2, r7, #2
 800384e:	8812      	ldrh	r2, [r2, #0]
 8003850:	801a      	strh	r2, [r3, #0]
 8003852:	1cbb      	adds	r3, r7, #2
 8003854:	003a      	movs	r2, r7
 8003856:	8812      	ldrh	r2, [r2, #0]
 8003858:	801a      	strh	r2, [r3, #0]
 800385a:	003b      	movs	r3, r7
 800385c:	187a      	adds	r2, r7, r1
 800385e:	8812      	ldrh	r2, [r2, #0]
 8003860:	801a      	strh	r2, [r3, #0]
    }

    if (x0 > x1) {
 8003862:	1dba      	adds	r2, r7, #6
 8003864:	1cbb      	adds	r3, r7, #2
 8003866:	2100      	movs	r1, #0
 8003868:	5e52      	ldrsh	r2, [r2, r1]
 800386a:	2100      	movs	r1, #0
 800386c:	5e5b      	ldrsh	r3, [r3, r1]
 800386e:	429a      	cmp	r2, r3
 8003870:	dd19      	ble.n	80038a6 <writeLine+0xe2>
        _swap_int16_t(x0, x1);
 8003872:	2114      	movs	r1, #20
 8003874:	187b      	adds	r3, r7, r1
 8003876:	1dba      	adds	r2, r7, #6
 8003878:	8812      	ldrh	r2, [r2, #0]
 800387a:	801a      	strh	r2, [r3, #0]
 800387c:	1dbb      	adds	r3, r7, #6
 800387e:	1cba      	adds	r2, r7, #2
 8003880:	8812      	ldrh	r2, [r2, #0]
 8003882:	801a      	strh	r2, [r3, #0]
 8003884:	1cbb      	adds	r3, r7, #2
 8003886:	187a      	adds	r2, r7, r1
 8003888:	8812      	ldrh	r2, [r2, #0]
 800388a:	801a      	strh	r2, [r3, #0]
        _swap_int16_t(y0, y1);
 800388c:	2112      	movs	r1, #18
 800388e:	187b      	adds	r3, r7, r1
 8003890:	1d3a      	adds	r2, r7, #4
 8003892:	8812      	ldrh	r2, [r2, #0]
 8003894:	801a      	strh	r2, [r3, #0]
 8003896:	1d3b      	adds	r3, r7, #4
 8003898:	003a      	movs	r2, r7
 800389a:	8812      	ldrh	r2, [r2, #0]
 800389c:	801a      	strh	r2, [r3, #0]
 800389e:	003b      	movs	r3, r7
 80038a0:	187a      	adds	r2, r7, r1
 80038a2:	8812      	ldrh	r2, [r2, #0]
 80038a4:	801a      	strh	r2, [r3, #0]
    }

    int16_t dx, dy;
    dx = x1 - x0;
 80038a6:	1cbb      	adds	r3, r7, #2
 80038a8:	881a      	ldrh	r2, [r3, #0]
 80038aa:	1dbb      	adds	r3, r7, #6
 80038ac:	881b      	ldrh	r3, [r3, #0]
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	b29a      	uxth	r2, r3
 80038b2:	2010      	movs	r0, #16
 80038b4:	183b      	adds	r3, r7, r0
 80038b6:	801a      	strh	r2, [r3, #0]
    dy = abs(y1 - y0);
 80038b8:	003b      	movs	r3, r7
 80038ba:	2200      	movs	r2, #0
 80038bc:	5e9a      	ldrsh	r2, [r3, r2]
 80038be:	1d3b      	adds	r3, r7, #4
 80038c0:	2100      	movs	r1, #0
 80038c2:	5e5b      	ldrsh	r3, [r3, r1]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	17d9      	asrs	r1, r3, #31
 80038c8:	185a      	adds	r2, r3, r1
 80038ca:	404a      	eors	r2, r1
 80038cc:	230e      	movs	r3, #14
 80038ce:	18fb      	adds	r3, r7, r3
 80038d0:	801a      	strh	r2, [r3, #0]

    int16_t err = dx / 2;
 80038d2:	231e      	movs	r3, #30
 80038d4:	18fa      	adds	r2, r7, r3
 80038d6:	183b      	adds	r3, r7, r0
 80038d8:	2100      	movs	r1, #0
 80038da:	5e5b      	ldrsh	r3, [r3, r1]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	da00      	bge.n	80038e2 <writeLine+0x11e>
 80038e0:	3301      	adds	r3, #1
 80038e2:	105b      	asrs	r3, r3, #1
 80038e4:	8013      	strh	r3, [r2, #0]
    int16_t ystep;

    if (y0 < y1) {
 80038e6:	1d3a      	adds	r2, r7, #4
 80038e8:	003b      	movs	r3, r7
 80038ea:	2100      	movs	r1, #0
 80038ec:	5e52      	ldrsh	r2, [r2, r1]
 80038ee:	2100      	movs	r1, #0
 80038f0:	5e5b      	ldrsh	r3, [r3, r1]
 80038f2:	429a      	cmp	r2, r3
 80038f4:	da04      	bge.n	8003900 <writeLine+0x13c>
        ystep = 1;
 80038f6:	231c      	movs	r3, #28
 80038f8:	18fb      	adds	r3, r7, r3
 80038fa:	2201      	movs	r2, #1
 80038fc:	801a      	strh	r2, [r3, #0]
 80038fe:	e04d      	b.n	800399c <writeLine+0x1d8>
    } else {
        ystep = -1;
 8003900:	231c      	movs	r3, #28
 8003902:	18fb      	adds	r3, r7, r3
 8003904:	2201      	movs	r2, #1
 8003906:	4252      	negs	r2, r2
 8003908:	801a      	strh	r2, [r3, #0]
    }

    for (; x0<=x1; x0++) {
 800390a:	e047      	b.n	800399c <writeLine+0x1d8>
        if (steep) {
 800390c:	231a      	movs	r3, #26
 800390e:	18fb      	adds	r3, r7, r3
 8003910:	2200      	movs	r2, #0
 8003912:	5e9b      	ldrsh	r3, [r3, r2]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d00c      	beq.n	8003932 <writeLine+0x16e>
            writePixel(y0, x0, color);
 8003918:	2330      	movs	r3, #48	@ 0x30
 800391a:	18fb      	adds	r3, r7, r3
 800391c:	881a      	ldrh	r2, [r3, #0]
 800391e:	1dbb      	adds	r3, r7, #6
 8003920:	2100      	movs	r1, #0
 8003922:	5e59      	ldrsh	r1, [r3, r1]
 8003924:	1d3b      	adds	r3, r7, #4
 8003926:	2000      	movs	r0, #0
 8003928:	5e1b      	ldrsh	r3, [r3, r0]
 800392a:	0018      	movs	r0, r3
 800392c:	f7ff ff2c 	bl	8003788 <writePixel>
 8003930:	e00b      	b.n	800394a <writeLine+0x186>
        } else {
            writePixel(x0, y0, color);
 8003932:	2330      	movs	r3, #48	@ 0x30
 8003934:	18fb      	adds	r3, r7, r3
 8003936:	881a      	ldrh	r2, [r3, #0]
 8003938:	1d3b      	adds	r3, r7, #4
 800393a:	2100      	movs	r1, #0
 800393c:	5e59      	ldrsh	r1, [r3, r1]
 800393e:	1dbb      	adds	r3, r7, #6
 8003940:	2000      	movs	r0, #0
 8003942:	5e1b      	ldrsh	r3, [r3, r0]
 8003944:	0018      	movs	r0, r3
 8003946:	f7ff ff1f 	bl	8003788 <writePixel>
        }
        err -= dy;
 800394a:	211e      	movs	r1, #30
 800394c:	187b      	adds	r3, r7, r1
 800394e:	881a      	ldrh	r2, [r3, #0]
 8003950:	230e      	movs	r3, #14
 8003952:	18fb      	adds	r3, r7, r3
 8003954:	881b      	ldrh	r3, [r3, #0]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	b29a      	uxth	r2, r3
 800395a:	187b      	adds	r3, r7, r1
 800395c:	801a      	strh	r2, [r3, #0]
        if (err < 0) {
 800395e:	187b      	adds	r3, r7, r1
 8003960:	2200      	movs	r2, #0
 8003962:	5e9b      	ldrsh	r3, [r3, r2]
 8003964:	2b00      	cmp	r3, #0
 8003966:	da11      	bge.n	800398c <writeLine+0x1c8>
            y0 += ystep;
 8003968:	1d3b      	adds	r3, r7, #4
 800396a:	881a      	ldrh	r2, [r3, #0]
 800396c:	231c      	movs	r3, #28
 800396e:	18fb      	adds	r3, r7, r3
 8003970:	881b      	ldrh	r3, [r3, #0]
 8003972:	18d3      	adds	r3, r2, r3
 8003974:	b29a      	uxth	r2, r3
 8003976:	1d3b      	adds	r3, r7, #4
 8003978:	801a      	strh	r2, [r3, #0]
            err += dx;
 800397a:	187b      	adds	r3, r7, r1
 800397c:	881a      	ldrh	r2, [r3, #0]
 800397e:	2310      	movs	r3, #16
 8003980:	18fb      	adds	r3, r7, r3
 8003982:	881b      	ldrh	r3, [r3, #0]
 8003984:	18d3      	adds	r3, r2, r3
 8003986:	b29a      	uxth	r2, r3
 8003988:	187b      	adds	r3, r7, r1
 800398a:	801a      	strh	r2, [r3, #0]
    for (; x0<=x1; x0++) {
 800398c:	1dbb      	adds	r3, r7, #6
 800398e:	2200      	movs	r2, #0
 8003990:	5e9b      	ldrsh	r3, [r3, r2]
 8003992:	b29b      	uxth	r3, r3
 8003994:	3301      	adds	r3, #1
 8003996:	b29a      	uxth	r2, r3
 8003998:	1dbb      	adds	r3, r7, #6
 800399a:	801a      	strh	r2, [r3, #0]
 800399c:	1dba      	adds	r2, r7, #6
 800399e:	1cbb      	adds	r3, r7, #2
 80039a0:	2100      	movs	r1, #0
 80039a2:	5e52      	ldrsh	r2, [r2, r1]
 80039a4:	2100      	movs	r1, #0
 80039a6:	5e5b      	ldrsh	r3, [r3, r1]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	ddaf      	ble.n	800390c <writeLine+0x148>
        }
    }
}
 80039ac:	46c0      	nop			@ (mov r8, r8)
 80039ae:	46c0      	nop			@ (mov r8, r8)
 80039b0:	46bd      	mov	sp, r7
 80039b2:	b008      	add	sp, #32
 80039b4:	bdb0      	pop	{r4, r5, r7, pc}

080039b6 <drawFastVLine>:

void  drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 80039b6:	b5b0      	push	{r4, r5, r7, lr}
 80039b8:	b084      	sub	sp, #16
 80039ba:	af02      	add	r7, sp, #8
 80039bc:	0005      	movs	r5, r0
 80039be:	000c      	movs	r4, r1
 80039c0:	0010      	movs	r0, r2
 80039c2:	0019      	movs	r1, r3
 80039c4:	1dbb      	adds	r3, r7, #6
 80039c6:	1c2a      	adds	r2, r5, #0
 80039c8:	801a      	strh	r2, [r3, #0]
 80039ca:	1d3b      	adds	r3, r7, #4
 80039cc:	1c22      	adds	r2, r4, #0
 80039ce:	801a      	strh	r2, [r3, #0]
 80039d0:	1cbb      	adds	r3, r7, #2
 80039d2:	1c02      	adds	r2, r0, #0
 80039d4:	801a      	strh	r2, [r3, #0]
 80039d6:	003b      	movs	r3, r7
 80039d8:	1c0a      	adds	r2, r1, #0
 80039da:	801a      	strh	r2, [r3, #0]
	writeLine(x, y, x, y + h - 1, color);
 80039dc:	1d3b      	adds	r3, r7, #4
 80039de:	881a      	ldrh	r2, [r3, #0]
 80039e0:	1cbb      	adds	r3, r7, #2
 80039e2:	881b      	ldrh	r3, [r3, #0]
 80039e4:	18d3      	adds	r3, r2, r3
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	3b01      	subs	r3, #1
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	b21c      	sxth	r4, r3
 80039ee:	1dbb      	adds	r3, r7, #6
 80039f0:	2200      	movs	r2, #0
 80039f2:	5e9a      	ldrsh	r2, [r3, r2]
 80039f4:	1d3b      	adds	r3, r7, #4
 80039f6:	2100      	movs	r1, #0
 80039f8:	5e59      	ldrsh	r1, [r3, r1]
 80039fa:	1dbb      	adds	r3, r7, #6
 80039fc:	2000      	movs	r0, #0
 80039fe:	5e18      	ldrsh	r0, [r3, r0]
 8003a00:	003b      	movs	r3, r7
 8003a02:	881b      	ldrh	r3, [r3, #0]
 8003a04:	9300      	str	r3, [sp, #0]
 8003a06:	0023      	movs	r3, r4
 8003a08:	f7ff fedc 	bl	80037c4 <writeLine>
}
 8003a0c:	46c0      	nop			@ (mov r8, r8)
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	b002      	add	sp, #8
 8003a12:	bdb0      	pop	{r4, r5, r7, pc}

08003a14 <drawFastHLine>:
void  drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 8003a14:	b5b0      	push	{r4, r5, r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af02      	add	r7, sp, #8
 8003a1a:	0005      	movs	r5, r0
 8003a1c:	000c      	movs	r4, r1
 8003a1e:	0010      	movs	r0, r2
 8003a20:	0019      	movs	r1, r3
 8003a22:	1dbb      	adds	r3, r7, #6
 8003a24:	1c2a      	adds	r2, r5, #0
 8003a26:	801a      	strh	r2, [r3, #0]
 8003a28:	1d3b      	adds	r3, r7, #4
 8003a2a:	1c22      	adds	r2, r4, #0
 8003a2c:	801a      	strh	r2, [r3, #0]
 8003a2e:	1cbb      	adds	r3, r7, #2
 8003a30:	1c02      	adds	r2, r0, #0
 8003a32:	801a      	strh	r2, [r3, #0]
 8003a34:	003b      	movs	r3, r7
 8003a36:	1c0a      	adds	r2, r1, #0
 8003a38:	801a      	strh	r2, [r3, #0]
	writeLine(x, y, x + w - 1, y, color);
 8003a3a:	1dbb      	adds	r3, r7, #6
 8003a3c:	881a      	ldrh	r2, [r3, #0]
 8003a3e:	1cbb      	adds	r3, r7, #2
 8003a40:	881b      	ldrh	r3, [r3, #0]
 8003a42:	18d3      	adds	r3, r2, r3
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	3b01      	subs	r3, #1
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	b21a      	sxth	r2, r3
 8003a4c:	1d3b      	adds	r3, r7, #4
 8003a4e:	2400      	movs	r4, #0
 8003a50:	5f1c      	ldrsh	r4, [r3, r4]
 8003a52:	1d3b      	adds	r3, r7, #4
 8003a54:	2100      	movs	r1, #0
 8003a56:	5e59      	ldrsh	r1, [r3, r1]
 8003a58:	1dbb      	adds	r3, r7, #6
 8003a5a:	2000      	movs	r0, #0
 8003a5c:	5e18      	ldrsh	r0, [r3, r0]
 8003a5e:	003b      	movs	r3, r7
 8003a60:	881b      	ldrh	r3, [r3, #0]
 8003a62:	9300      	str	r3, [sp, #0]
 8003a64:	0023      	movs	r3, r4
 8003a66:	f7ff fead 	bl	80037c4 <writeLine>
}
 8003a6a:	46c0      	nop			@ (mov r8, r8)
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	b002      	add	sp, #8
 8003a70:	bdb0      	pop	{r4, r5, r7, pc}

08003a72 <drawLine>:

void drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8003a72:	b5b0      	push	{r4, r5, r7, lr}
 8003a74:	b086      	sub	sp, #24
 8003a76:	af02      	add	r7, sp, #8
 8003a78:	0005      	movs	r5, r0
 8003a7a:	000c      	movs	r4, r1
 8003a7c:	0010      	movs	r0, r2
 8003a7e:	0019      	movs	r1, r3
 8003a80:	1dbb      	adds	r3, r7, #6
 8003a82:	1c2a      	adds	r2, r5, #0
 8003a84:	801a      	strh	r2, [r3, #0]
 8003a86:	1d3b      	adds	r3, r7, #4
 8003a88:	1c22      	adds	r2, r4, #0
 8003a8a:	801a      	strh	r2, [r3, #0]
 8003a8c:	1cbb      	adds	r3, r7, #2
 8003a8e:	1c02      	adds	r2, r0, #0
 8003a90:	801a      	strh	r2, [r3, #0]
 8003a92:	003b      	movs	r3, r7
 8003a94:	1c0a      	adds	r2, r1, #0
 8003a96:	801a      	strh	r2, [r3, #0]
    if(x0 == x1){
 8003a98:	1dba      	adds	r2, r7, #6
 8003a9a:	1cbb      	adds	r3, r7, #2
 8003a9c:	2100      	movs	r1, #0
 8003a9e:	5e52      	ldrsh	r2, [r2, r1]
 8003aa0:	2100      	movs	r1, #0
 8003aa2:	5e5b      	ldrsh	r3, [r3, r1]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d12a      	bne.n	8003afe <drawLine+0x8c>
        if(y0 > y1) _swap_int16_t(y0, y1);
 8003aa8:	1d3a      	adds	r2, r7, #4
 8003aaa:	003b      	movs	r3, r7
 8003aac:	2100      	movs	r1, #0
 8003aae:	5e52      	ldrsh	r2, [r2, r1]
 8003ab0:	2100      	movs	r1, #0
 8003ab2:	5e5b      	ldrsh	r3, [r3, r1]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	dd0c      	ble.n	8003ad2 <drawLine+0x60>
 8003ab8:	210c      	movs	r1, #12
 8003aba:	187b      	adds	r3, r7, r1
 8003abc:	1d3a      	adds	r2, r7, #4
 8003abe:	8812      	ldrh	r2, [r2, #0]
 8003ac0:	801a      	strh	r2, [r3, #0]
 8003ac2:	1d3b      	adds	r3, r7, #4
 8003ac4:	003a      	movs	r2, r7
 8003ac6:	8812      	ldrh	r2, [r2, #0]
 8003ac8:	801a      	strh	r2, [r3, #0]
 8003aca:	003b      	movs	r3, r7
 8003acc:	187a      	adds	r2, r7, r1
 8003ace:	8812      	ldrh	r2, [r2, #0]
 8003ad0:	801a      	strh	r2, [r3, #0]
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
 8003ad2:	003b      	movs	r3, r7
 8003ad4:	881a      	ldrh	r2, [r3, #0]
 8003ad6:	1d3b      	adds	r3, r7, #4
 8003ad8:	881b      	ldrh	r3, [r3, #0]
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	3301      	adds	r3, #1
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	b21a      	sxth	r2, r3
 8003ae4:	2320      	movs	r3, #32
 8003ae6:	18fb      	adds	r3, r7, r3
 8003ae8:	881c      	ldrh	r4, [r3, #0]
 8003aea:	1d3b      	adds	r3, r7, #4
 8003aec:	2100      	movs	r1, #0
 8003aee:	5e59      	ldrsh	r1, [r3, r1]
 8003af0:	1dbb      	adds	r3, r7, #6
 8003af2:	2000      	movs	r0, #0
 8003af4:	5e18      	ldrsh	r0, [r3, r0]
 8003af6:	0023      	movs	r3, r4
 8003af8:	f7ff ff5d 	bl	80039b6 <drawFastVLine>
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
    } else {
        writeLine(x0, y0, x1, y1, color);
    }
}
 8003afc:	e045      	b.n	8003b8a <drawLine+0x118>
    } else if(y0 == y1){
 8003afe:	1d3a      	adds	r2, r7, #4
 8003b00:	003b      	movs	r3, r7
 8003b02:	2100      	movs	r1, #0
 8003b04:	5e52      	ldrsh	r2, [r2, r1]
 8003b06:	2100      	movs	r1, #0
 8003b08:	5e5b      	ldrsh	r3, [r3, r1]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d12a      	bne.n	8003b64 <drawLine+0xf2>
        if(x0 > x1) _swap_int16_t(x0, x1);
 8003b0e:	1dba      	adds	r2, r7, #6
 8003b10:	1cbb      	adds	r3, r7, #2
 8003b12:	2100      	movs	r1, #0
 8003b14:	5e52      	ldrsh	r2, [r2, r1]
 8003b16:	2100      	movs	r1, #0
 8003b18:	5e5b      	ldrsh	r3, [r3, r1]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	dd0c      	ble.n	8003b38 <drawLine+0xc6>
 8003b1e:	210e      	movs	r1, #14
 8003b20:	187b      	adds	r3, r7, r1
 8003b22:	1dba      	adds	r2, r7, #6
 8003b24:	8812      	ldrh	r2, [r2, #0]
 8003b26:	801a      	strh	r2, [r3, #0]
 8003b28:	1dbb      	adds	r3, r7, #6
 8003b2a:	1cba      	adds	r2, r7, #2
 8003b2c:	8812      	ldrh	r2, [r2, #0]
 8003b2e:	801a      	strh	r2, [r3, #0]
 8003b30:	1cbb      	adds	r3, r7, #2
 8003b32:	187a      	adds	r2, r7, r1
 8003b34:	8812      	ldrh	r2, [r2, #0]
 8003b36:	801a      	strh	r2, [r3, #0]
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
 8003b38:	1cbb      	adds	r3, r7, #2
 8003b3a:	881a      	ldrh	r2, [r3, #0]
 8003b3c:	1dbb      	adds	r3, r7, #6
 8003b3e:	881b      	ldrh	r3, [r3, #0]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	3301      	adds	r3, #1
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	b21a      	sxth	r2, r3
 8003b4a:	2320      	movs	r3, #32
 8003b4c:	18fb      	adds	r3, r7, r3
 8003b4e:	881c      	ldrh	r4, [r3, #0]
 8003b50:	1d3b      	adds	r3, r7, #4
 8003b52:	2100      	movs	r1, #0
 8003b54:	5e59      	ldrsh	r1, [r3, r1]
 8003b56:	1dbb      	adds	r3, r7, #6
 8003b58:	2000      	movs	r0, #0
 8003b5a:	5e18      	ldrsh	r0, [r3, r0]
 8003b5c:	0023      	movs	r3, r4
 8003b5e:	f7ff ff59 	bl	8003a14 <drawFastHLine>
}
 8003b62:	e012      	b.n	8003b8a <drawLine+0x118>
        writeLine(x0, y0, x1, y1, color);
 8003b64:	003b      	movs	r3, r7
 8003b66:	2400      	movs	r4, #0
 8003b68:	5f1c      	ldrsh	r4, [r3, r4]
 8003b6a:	1cbb      	adds	r3, r7, #2
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	5e9a      	ldrsh	r2, [r3, r2]
 8003b70:	1d3b      	adds	r3, r7, #4
 8003b72:	2100      	movs	r1, #0
 8003b74:	5e59      	ldrsh	r1, [r3, r1]
 8003b76:	1dbb      	adds	r3, r7, #6
 8003b78:	2000      	movs	r0, #0
 8003b7a:	5e18      	ldrsh	r0, [r3, r0]
 8003b7c:	2320      	movs	r3, #32
 8003b7e:	18fb      	adds	r3, r7, r3
 8003b80:	881b      	ldrh	r3, [r3, #0]
 8003b82:	9300      	str	r3, [sp, #0]
 8003b84:	0023      	movs	r3, r4
 8003b86:	f7ff fe1d 	bl	80037c4 <writeLine>
}
 8003b8a:	46c0      	nop			@ (mov r8, r8)
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	b004      	add	sp, #16
 8003b90:	bdb0      	pop	{r4, r5, r7, pc}

08003b92 <drawString>:
void drawString(int16_t x, int16_t y, char* c, int16_t textColor, int16_t bgColor, uint8_t size, uint8_t spacing)
{
 8003b92:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b94:	b089      	sub	sp, #36	@ 0x24
 8003b96:	af02      	add	r7, sp, #8
 8003b98:	0004      	movs	r4, r0
 8003b9a:	0008      	movs	r0, r1
 8003b9c:	60ba      	str	r2, [r7, #8]
 8003b9e:	0019      	movs	r1, r3
 8003ba0:	230e      	movs	r3, #14
 8003ba2:	18fb      	adds	r3, r7, r3
 8003ba4:	1c22      	adds	r2, r4, #0
 8003ba6:	801a      	strh	r2, [r3, #0]
 8003ba8:	230c      	movs	r3, #12
 8003baa:	18fb      	adds	r3, r7, r3
 8003bac:	1c02      	adds	r2, r0, #0
 8003bae:	801a      	strh	r2, [r3, #0]
 8003bb0:	1dbb      	adds	r3, r7, #6
 8003bb2:	1c0a      	adds	r2, r1, #0
 8003bb4:	801a      	strh	r2, [r3, #0]
	uint16_t i =0;
 8003bb6:	2316      	movs	r3, #22
 8003bb8:	18fb      	adds	r3, r7, r3
 8003bba:	2200      	movs	r2, #0
 8003bbc:	801a      	strh	r2, [r3, #0]

	while(c[i])
 8003bbe:	e03f      	b.n	8003c40 <drawString+0xae>
	{
		drawChar(x, y, c[i], textColor, bgColor, size);
 8003bc0:	2516      	movs	r5, #22
 8003bc2:	197b      	adds	r3, r7, r5
 8003bc4:	881b      	ldrh	r3, [r3, #0]
 8003bc6:	68ba      	ldr	r2, [r7, #8]
 8003bc8:	18d3      	adds	r3, r2, r3
 8003bca:	781b      	ldrb	r3, [r3, #0]
 8003bcc:	469c      	mov	ip, r3
 8003bce:	1dbb      	adds	r3, r7, #6
 8003bd0:	2400      	movs	r4, #0
 8003bd2:	5f1c      	ldrsh	r4, [r3, r4]
 8003bd4:	230c      	movs	r3, #12
 8003bd6:	18fb      	adds	r3, r7, r3
 8003bd8:	2100      	movs	r1, #0
 8003bda:	5e59      	ldrsh	r1, [r3, r1]
 8003bdc:	260e      	movs	r6, #14
 8003bde:	19bb      	adds	r3, r7, r6
 8003be0:	2000      	movs	r0, #0
 8003be2:	5e18      	ldrsh	r0, [r3, r0]
 8003be4:	232c      	movs	r3, #44	@ 0x2c
 8003be6:	2208      	movs	r2, #8
 8003be8:	189b      	adds	r3, r3, r2
 8003bea:	19db      	adds	r3, r3, r7
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	9301      	str	r3, [sp, #4]
 8003bf0:	2328      	movs	r3, #40	@ 0x28
 8003bf2:	189b      	adds	r3, r3, r2
 8003bf4:	19db      	adds	r3, r3, r7
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	5e9b      	ldrsh	r3, [r3, r2]
 8003bfa:	9300      	str	r3, [sp, #0]
 8003bfc:	0023      	movs	r3, r4
 8003bfe:	4662      	mov	r2, ip
 8003c00:	f000 f82c 	bl	8003c5c <drawChar>
		x+=(size*6)+spacing;
 8003c04:	232c      	movs	r3, #44	@ 0x2c
 8003c06:	2108      	movs	r1, #8
 8003c08:	185b      	adds	r3, r3, r1
 8003c0a:	19db      	adds	r3, r3, r7
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	1c1a      	adds	r2, r3, #0
 8003c12:	1c13      	adds	r3, r2, #0
 8003c14:	18db      	adds	r3, r3, r3
 8003c16:	189b      	adds	r3, r3, r2
 8003c18:	18db      	adds	r3, r3, r3
 8003c1a:	b29a      	uxth	r2, r3
 8003c1c:	2330      	movs	r3, #48	@ 0x30
 8003c1e:	185b      	adds	r3, r3, r1
 8003c20:	19db      	adds	r3, r3, r7
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	18d3      	adds	r3, r2, r3
 8003c28:	b29a      	uxth	r2, r3
 8003c2a:	19bb      	adds	r3, r7, r6
 8003c2c:	881b      	ldrh	r3, [r3, #0]
 8003c2e:	18d3      	adds	r3, r2, r3
 8003c30:	b29a      	uxth	r2, r3
 8003c32:	19bb      	adds	r3, r7, r6
 8003c34:	801a      	strh	r2, [r3, #0]
		i++;
 8003c36:	197b      	adds	r3, r7, r5
 8003c38:	881a      	ldrh	r2, [r3, #0]
 8003c3a:	197b      	adds	r3, r7, r5
 8003c3c:	3201      	adds	r2, #1
 8003c3e:	801a      	strh	r2, [r3, #0]
	while(c[i])
 8003c40:	2316      	movs	r3, #22
 8003c42:	18fb      	adds	r3, r7, r3
 8003c44:	881b      	ldrh	r3, [r3, #0]
 8003c46:	68ba      	ldr	r2, [r7, #8]
 8003c48:	18d3      	adds	r3, r2, r3
 8003c4a:	781b      	ldrb	r3, [r3, #0]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d1b7      	bne.n	8003bc0 <drawString+0x2e>
	}
}
 8003c50:	46c0      	nop			@ (mov r8, r8)
 8003c52:	46c0      	nop			@ (mov r8, r8)
 8003c54:	46bd      	mov	sp, r7
 8003c56:	b007      	add	sp, #28
 8003c58:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003c5c <drawChar>:
void drawChar(int16_t x, int16_t y, char c, int16_t textColor, int16_t bgColor, uint8_t size){
 8003c5c:	b5b0      	push	{r4, r5, r7, lr}
 8003c5e:	b088      	sub	sp, #32
 8003c60:	af02      	add	r7, sp, #8
 8003c62:	0005      	movs	r5, r0
 8003c64:	000c      	movs	r4, r1
 8003c66:	0010      	movs	r0, r2
 8003c68:	0019      	movs	r1, r3
 8003c6a:	1dbb      	adds	r3, r7, #6
 8003c6c:	1c2a      	adds	r2, r5, #0
 8003c6e:	801a      	strh	r2, [r3, #0]
 8003c70:	1d3b      	adds	r3, r7, #4
 8003c72:	1c22      	adds	r2, r4, #0
 8003c74:	801a      	strh	r2, [r3, #0]
 8003c76:	1cfb      	adds	r3, r7, #3
 8003c78:	1c02      	adds	r2, r0, #0
 8003c7a:	701a      	strb	r2, [r3, #0]
 8003c7c:	003b      	movs	r3, r7
 8003c7e:	1c0a      	adds	r2, r1, #0
 8003c80:	801a      	strh	r2, [r3, #0]
     //(y >= _height))           //||
     //((x + 5 * size - 1) < 0) ||
     //((y + 8 * size - 1) < 0))
   // return;

  for (i=0; i<6; i++ ) {
 8003c82:	2300      	movs	r3, #0
 8003c84:	613b      	str	r3, [r7, #16]
 8003c86:	e0bd      	b.n	8003e04 <drawChar+0x1a8>
    if ((i) == 5)
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	2b05      	cmp	r3, #5
 8003c8c:	d104      	bne.n	8003c98 <drawChar+0x3c>
      line = 0x0;
 8003c8e:	2317      	movs	r3, #23
 8003c90:	18fb      	adds	r3, r7, r3
 8003c92:	2200      	movs	r2, #0
 8003c94:	701a      	strb	r2, [r3, #0]
 8003c96:	e00b      	b.n	8003cb0 <drawChar+0x54>
    else
      line = Font[(c*5)+(i)];
 8003c98:	1cfb      	adds	r3, r7, #3
 8003c9a:	781a      	ldrb	r2, [r3, #0]
 8003c9c:	0013      	movs	r3, r2
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	189a      	adds	r2, r3, r2
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	18d2      	adds	r2, r2, r3
 8003ca6:	2317      	movs	r3, #23
 8003ca8:	18fb      	adds	r3, r7, r3
 8003caa:	495b      	ldr	r1, [pc, #364]	@ (8003e18 <drawChar+0x1bc>)
 8003cac:	5c8a      	ldrb	r2, [r1, r2]
 8003cae:	701a      	strb	r2, [r3, #0]
    for (j = 0; j<8; j++) {
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	60fb      	str	r3, [r7, #12]
 8003cb4:	e09f      	b.n	8003df6 <drawChar+0x19a>
      if (line & 0x1) {
 8003cb6:	2317      	movs	r3, #23
 8003cb8:	18fb      	adds	r3, r7, r3
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	d043      	beq.n	8003d4a <drawChar+0xee>
        if (size == 1)
 8003cc2:	232c      	movs	r3, #44	@ 0x2c
 8003cc4:	18fb      	adds	r3, r7, r3
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d115      	bne.n	8003cf8 <drawChar+0x9c>
          writePixel(x+(i), y+(7-j), textColor);
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	b29a      	uxth	r2, r3
 8003cd0:	1dbb      	adds	r3, r7, #6
 8003cd2:	881b      	ldrh	r3, [r3, #0]
 8003cd4:	18d3      	adds	r3, r2, r3
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	b218      	sxth	r0, r3
 8003cda:	1d3b      	adds	r3, r7, #4
 8003cdc:	881a      	ldrh	r2, [r3, #0]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	3307      	adds	r3, #7
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	b219      	sxth	r1, r3
 8003cec:	003b      	movs	r3, r7
 8003cee:	881b      	ldrh	r3, [r3, #0]
 8003cf0:	001a      	movs	r2, r3
 8003cf2:	f7ff fd49 	bl	8003788 <writePixel>
 8003cf6:	e075      	b.n	8003de4 <drawChar+0x188>
        else {
          fillRect(x+((i)*size), y+((7-j)*size), size, size, textColor);
 8003cf8:	212c      	movs	r1, #44	@ 0x2c
 8003cfa:	187b      	adds	r3, r7, r1
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	693a      	ldr	r2, [r7, #16]
 8003d02:	b292      	uxth	r2, r2
 8003d04:	4353      	muls	r3, r2
 8003d06:	b29a      	uxth	r2, r3
 8003d08:	1dbb      	adds	r3, r7, #6
 8003d0a:	881b      	ldrh	r3, [r3, #0]
 8003d0c:	18d3      	adds	r3, r2, r3
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	b218      	sxth	r0, r3
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2207      	movs	r2, #7
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	000c      	movs	r4, r1
 8003d1c:	187a      	adds	r2, r7, r1
 8003d1e:	7812      	ldrb	r2, [r2, #0]
 8003d20:	b292      	uxth	r2, r2
 8003d22:	4353      	muls	r3, r2
 8003d24:	b29a      	uxth	r2, r3
 8003d26:	1d3b      	adds	r3, r7, #4
 8003d28:	881b      	ldrh	r3, [r3, #0]
 8003d2a:	18d3      	adds	r3, r2, r3
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	b219      	sxth	r1, r3
 8003d30:	193b      	adds	r3, r7, r4
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	b21a      	sxth	r2, r3
 8003d36:	193b      	adds	r3, r7, r4
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	b21c      	sxth	r4, r3
 8003d3c:	003b      	movs	r3, r7
 8003d3e:	881b      	ldrh	r3, [r3, #0]
 8003d40:	9300      	str	r3, [sp, #0]
 8003d42:	0023      	movs	r3, r4
 8003d44:	f7ff fc98 	bl	8003678 <fillRect>
 8003d48:	e04c      	b.n	8003de4 <drawChar+0x188>
        }
      } else if (bgColor != textColor) {
 8003d4a:	2428      	movs	r4, #40	@ 0x28
 8003d4c:	193b      	adds	r3, r7, r4
 8003d4e:	0039      	movs	r1, r7
 8003d50:	2200      	movs	r2, #0
 8003d52:	5e9a      	ldrsh	r2, [r3, r2]
 8003d54:	2300      	movs	r3, #0
 8003d56:	5ecb      	ldrsh	r3, [r1, r3]
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d043      	beq.n	8003de4 <drawChar+0x188>
        if (size == 1) // default size
 8003d5c:	232c      	movs	r3, #44	@ 0x2c
 8003d5e:	18fb      	adds	r3, r7, r3
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d115      	bne.n	8003d92 <drawChar+0x136>
          writePixel(x+(i), y+(7-j), bgColor);
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	b29a      	uxth	r2, r3
 8003d6a:	1dbb      	adds	r3, r7, #6
 8003d6c:	881b      	ldrh	r3, [r3, #0]
 8003d6e:	18d3      	adds	r3, r2, r3
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	b218      	sxth	r0, r3
 8003d74:	1d3b      	adds	r3, r7, #4
 8003d76:	881a      	ldrh	r2, [r3, #0]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	3307      	adds	r3, #7
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	b219      	sxth	r1, r3
 8003d86:	193b      	adds	r3, r7, r4
 8003d88:	881b      	ldrh	r3, [r3, #0]
 8003d8a:	001a      	movs	r2, r3
 8003d8c:	f7ff fcfc 	bl	8003788 <writePixel>
 8003d90:	e028      	b.n	8003de4 <drawChar+0x188>
        else {  // big size
          fillRect(x+(i)*size, y+(7-j)*size, size, size, bgColor);
 8003d92:	212c      	movs	r1, #44	@ 0x2c
 8003d94:	187b      	adds	r3, r7, r1
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	693a      	ldr	r2, [r7, #16]
 8003d9c:	b292      	uxth	r2, r2
 8003d9e:	4353      	muls	r3, r2
 8003da0:	b29a      	uxth	r2, r3
 8003da2:	1dbb      	adds	r3, r7, #6
 8003da4:	881b      	ldrh	r3, [r3, #0]
 8003da6:	18d3      	adds	r3, r2, r3
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	b218      	sxth	r0, r3
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2207      	movs	r2, #7
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	000c      	movs	r4, r1
 8003db6:	187a      	adds	r2, r7, r1
 8003db8:	7812      	ldrb	r2, [r2, #0]
 8003dba:	b292      	uxth	r2, r2
 8003dbc:	4353      	muls	r3, r2
 8003dbe:	b29a      	uxth	r2, r3
 8003dc0:	1d3b      	adds	r3, r7, #4
 8003dc2:	881b      	ldrh	r3, [r3, #0]
 8003dc4:	18d3      	adds	r3, r2, r3
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	b219      	sxth	r1, r3
 8003dca:	193b      	adds	r3, r7, r4
 8003dcc:	781b      	ldrb	r3, [r3, #0]
 8003dce:	b21a      	sxth	r2, r3
 8003dd0:	193b      	adds	r3, r7, r4
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	b21c      	sxth	r4, r3
 8003dd6:	2328      	movs	r3, #40	@ 0x28
 8003dd8:	18fb      	adds	r3, r7, r3
 8003dda:	881b      	ldrh	r3, [r3, #0]
 8003ddc:	9300      	str	r3, [sp, #0]
 8003dde:	0023      	movs	r3, r4
 8003de0:	f7ff fc4a 	bl	8003678 <fillRect>
        }
      }
      line >>= 1;
 8003de4:	2217      	movs	r2, #23
 8003de6:	18bb      	adds	r3, r7, r2
 8003de8:	18ba      	adds	r2, r7, r2
 8003dea:	7812      	ldrb	r2, [r2, #0]
 8003dec:	0852      	lsrs	r2, r2, #1
 8003dee:	701a      	strb	r2, [r3, #0]
    for (j = 0; j<8; j++) {
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	3301      	adds	r3, #1
 8003df4:	60fb      	str	r3, [r7, #12]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2b07      	cmp	r3, #7
 8003dfa:	dc00      	bgt.n	8003dfe <drawChar+0x1a2>
 8003dfc:	e75b      	b.n	8003cb6 <drawChar+0x5a>
  for (i=0; i<6; i++ ) {
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	3301      	adds	r3, #1
 8003e02:	613b      	str	r3, [r7, #16]
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	2b05      	cmp	r3, #5
 8003e08:	dc00      	bgt.n	8003e0c <drawChar+0x1b0>
 8003e0a:	e73d      	b.n	8003c88 <drawChar+0x2c>
    }
  }
}
 8003e0c:	46c0      	nop			@ (mov r8, r8)
 8003e0e:	46c0      	nop			@ (mov r8, r8)
 8003e10:	46bd      	mov	sp, r7
 8003e12:	b006      	add	sp, #24
 8003e14:	bdb0      	pop	{r4, r5, r7, pc}
 8003e16:	46c0      	nop			@ (mov r8, r8)
 8003e18:	0801162c 	.word	0x0801162c

08003e1c <fillScreen>:
        if(a > b) _swap_int16_t(a,b);
        drawFastHLine(a, y, b-a+1, color);
    }
}

void fillScreen(uint16_t color) {
 8003e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e1e:	b091      	sub	sp, #68	@ 0x44
 8003e20:	af04      	add	r7, sp, #16
 8003e22:	231e      	movs	r3, #30
 8003e24:	18f9      	adds	r1, r7, r3
 8003e26:	8008      	strh	r0, [r1, #0]
 8003e28:	4669      	mov	r1, sp
 8003e2a:	000e      	movs	r6, r1
    uint16_t pallette[] = {color};
 8003e2c:	210c      	movs	r1, #12
 8003e2e:	2318      	movs	r3, #24
 8003e30:	18cb      	adds	r3, r1, r3
 8003e32:	19d9      	adds	r1, r3, r7
 8003e34:	231e      	movs	r3, #30
 8003e36:	18f8      	adds	r0, r7, r3
 8003e38:	8800      	ldrh	r0, [r0, #0]
 8003e3a:	8008      	strh	r0, [r1, #0]
    uint16_t pixels[_width*_height][2];
 8003e3c:	492f      	ldr	r1, [pc, #188]	@ (8003efc <fillScreen+0xe0>)
 8003e3e:	2300      	movs	r3, #0
 8003e40:	5ec9      	ldrsh	r1, [r1, r3]
 8003e42:	0008      	movs	r0, r1
 8003e44:	492e      	ldr	r1, [pc, #184]	@ (8003f00 <fillScreen+0xe4>)
 8003e46:	2300      	movs	r3, #0
 8003e48:	5ec9      	ldrsh	r1, [r1, r3]
 8003e4a:	4341      	muls	r1, r0
 8003e4c:	1e48      	subs	r0, r1, #1
 8003e4e:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8003e50:	0008      	movs	r0, r1
 8003e52:	6138      	str	r0, [r7, #16]
 8003e54:	2000      	movs	r0, #0
 8003e56:	6178      	str	r0, [r7, #20]
 8003e58:	693a      	ldr	r2, [r7, #16]
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	0010      	movs	r0, r2
 8003e5e:	0ec0      	lsrs	r0, r0, #27
 8003e60:	613a      	str	r2, [r7, #16]
 8003e62:	617b      	str	r3, [r7, #20]
 8003e64:	015d      	lsls	r5, r3, #5
 8003e66:	4305      	orrs	r5, r0
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	015c      	lsls	r4, r3, #5
 8003e6c:	0008      	movs	r0, r1
 8003e6e:	6038      	str	r0, [r7, #0]
 8003e70:	2000      	movs	r0, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	683c      	ldr	r4, [r7, #0]
 8003e76:	687d      	ldr	r5, [r7, #4]
 8003e78:	0023      	movs	r3, r4
 8003e7a:	0ed8      	lsrs	r0, r3, #27
 8003e7c:	002b      	movs	r3, r5
 8003e7e:	015b      	lsls	r3, r3, #5
 8003e80:	60fb      	str	r3, [r7, #12]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	4303      	orrs	r3, r0
 8003e86:	60fb      	str	r3, [r7, #12]
 8003e88:	0023      	movs	r3, r4
 8003e8a:	015b      	lsls	r3, r3, #5
 8003e8c:	60bb      	str	r3, [r7, #8]
 8003e8e:	000b      	movs	r3, r1
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	3307      	adds	r3, #7
 8003e94:	08db      	lsrs	r3, r3, #3
 8003e96:	00db      	lsls	r3, r3, #3
 8003e98:	466a      	mov	r2, sp
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	469d      	mov	sp, r3
 8003e9e:	ab04      	add	r3, sp, #16
 8003ea0:	3301      	adds	r3, #1
 8003ea2:	085b      	lsrs	r3, r3, #1
 8003ea4:	005b      	lsls	r3, r3, #1
 8003ea6:	62bb      	str	r3, [r7, #40]	@ 0x28

    pixels[0][0] = 0;
 8003ea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eaa:	2200      	movs	r2, #0
 8003eac:	801a      	strh	r2, [r3, #0]
    pixels[0][1] = _width*_height;
 8003eae:	4b13      	ldr	r3, [pc, #76]	@ (8003efc <fillScreen+0xe0>)
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	5e9b      	ldrsh	r3, [r3, r2]
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	4a12      	ldr	r2, [pc, #72]	@ (8003f00 <fillScreen+0xe4>)
 8003eb8:	2000      	movs	r0, #0
 8003eba:	5e12      	ldrsh	r2, [r2, r0]
 8003ebc:	b292      	uxth	r2, r2
 8003ebe:	4353      	muls	r3, r2
 8003ec0:	b29a      	uxth	r2, r3
 8003ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ec4:	805a      	strh	r2, [r3, #2]
    drawImage(pixels, pallette, 0, 0, _width, _height, 1);
 8003ec6:	4b0d      	ldr	r3, [pc, #52]	@ (8003efc <fillScreen+0xe0>)
 8003ec8:	2200      	movs	r2, #0
 8003eca:	5e9b      	ldrsh	r3, [r3, r2]
 8003ecc:	001a      	movs	r2, r3
 8003ece:	4b0c      	ldr	r3, [pc, #48]	@ (8003f00 <fillScreen+0xe4>)
 8003ed0:	2000      	movs	r0, #0
 8003ed2:	5e1b      	ldrsh	r3, [r3, r0]
 8003ed4:	001c      	movs	r4, r3
 8003ed6:	210c      	movs	r1, #12
 8003ed8:	2318      	movs	r3, #24
 8003eda:	18cb      	adds	r3, r1, r3
 8003edc:	19d9      	adds	r1, r3, r7
 8003ede:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	9302      	str	r3, [sp, #8]
 8003ee4:	9401      	str	r4, [sp, #4]
 8003ee6:	9200      	str	r2, [sp, #0]
 8003ee8:	2300      	movs	r3, #0
 8003eea:	2200      	movs	r2, #0
 8003eec:	f000 f80a 	bl	8003f04 <drawImage>
 8003ef0:	46b5      	mov	sp, r6
	//fillRect(0, 0, _width, _height, color);
}
 8003ef2:	46c0      	nop			@ (mov r8, r8)
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	b00d      	add	sp, #52	@ 0x34
 8003ef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003efa:	46c0      	nop			@ (mov r8, r8)
 8003efc:	2000028c 	.word	0x2000028c
 8003f00:	2000028e 	.word	0x2000028e

08003f04 <drawImage>:

void drawImage(uint16_t image[][2], uint16_t palette[], uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t c)
{
 8003f04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f06:	46c6      	mov	lr, r8
 8003f08:	b500      	push	{lr}
 8003f0a:	b092      	sub	sp, #72	@ 0x48
 8003f0c:	af02      	add	r7, sp, #8
 8003f0e:	6278      	str	r0, [r7, #36]	@ 0x24
 8003f10:	6239      	str	r1, [r7, #32]
 8003f12:	0019      	movs	r1, r3
 8003f14:	231e      	movs	r3, #30
 8003f16:	18fb      	adds	r3, r7, r3
 8003f18:	801a      	strh	r2, [r3, #0]
 8003f1a:	231c      	movs	r3, #28
 8003f1c:	18fb      	adds	r3, r7, r3
 8003f1e:	1c0a      	adds	r2, r1, #0
 8003f20:	801a      	strh	r2, [r3, #0]
 8003f22:	466b      	mov	r3, sp
 8003f24:	4698      	mov	r8, r3
	uint16_t i;
	uint16_t j;
	uint16_t totalInd =0;
 8003f26:	2322      	movs	r3, #34	@ 0x22
 8003f28:	2118      	movs	r1, #24
 8003f2a:	185b      	adds	r3, r3, r1
 8003f2c:	19db      	adds	r3, r3, r7
 8003f2e:	2200      	movs	r2, #0
 8003f30:	801a      	strh	r2, [r3, #0]
	uint16_t ind;
	uint16_t count;
	uint16_t pixelBuffer[w*h];
 8003f32:	2340      	movs	r3, #64	@ 0x40
 8003f34:	185b      	adds	r3, r3, r1
 8003f36:	19db      	adds	r3, r3, r7
 8003f38:	881b      	ldrh	r3, [r3, #0]
 8003f3a:	2244      	movs	r2, #68	@ 0x44
 8003f3c:	1852      	adds	r2, r2, r1
 8003f3e:	19d2      	adds	r2, r2, r7
 8003f40:	8812      	ldrh	r2, [r2, #0]
 8003f42:	4353      	muls	r3, r2
 8003f44:	1e5a      	subs	r2, r3, #1
 8003f46:	637a      	str	r2, [r7, #52]	@ 0x34
 8003f48:	001a      	movs	r2, r3
 8003f4a:	60ba      	str	r2, [r7, #8]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	60fa      	str	r2, [r7, #12]
 8003f50:	68b8      	ldr	r0, [r7, #8]
 8003f52:	68f9      	ldr	r1, [r7, #12]
 8003f54:	0002      	movs	r2, r0
 8003f56:	0f12      	lsrs	r2, r2, #28
 8003f58:	000e      	movs	r6, r1
 8003f5a:	0136      	lsls	r6, r6, #4
 8003f5c:	617e      	str	r6, [r7, #20]
 8003f5e:	697e      	ldr	r6, [r7, #20]
 8003f60:	4316      	orrs	r6, r2
 8003f62:	617e      	str	r6, [r7, #20]
 8003f64:	0002      	movs	r2, r0
 8003f66:	0112      	lsls	r2, r2, #4
 8003f68:	613a      	str	r2, [r7, #16]
 8003f6a:	001a      	movs	r2, r3
 8003f6c:	603a      	str	r2, [r7, #0]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	607a      	str	r2, [r7, #4]
 8003f72:	6838      	ldr	r0, [r7, #0]
 8003f74:	6879      	ldr	r1, [r7, #4]
 8003f76:	0002      	movs	r2, r0
 8003f78:	0f12      	lsrs	r2, r2, #28
 8003f7a:	000e      	movs	r6, r1
 8003f7c:	0135      	lsls	r5, r6, #4
 8003f7e:	4315      	orrs	r5, r2
 8003f80:	0002      	movs	r2, r0
 8003f82:	0114      	lsls	r4, r2, #4
 8003f84:	005b      	lsls	r3, r3, #1
 8003f86:	3307      	adds	r3, #7
 8003f88:	08db      	lsrs	r3, r3, #3
 8003f8a:	00db      	lsls	r3, r3, #3
 8003f8c:	466a      	mov	r2, sp
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	469d      	mov	sp, r3
 8003f92:	ab02      	add	r3, sp, #8
 8003f94:	3301      	adds	r3, #1
 8003f96:	085b      	lsrs	r3, r3, #1
 8003f98:	005b      	lsls	r3, r3, #1
 8003f9a:	633b      	str	r3, [r7, #48]	@ 0x30

for(i=0; i<c; i++)
 8003f9c:	2326      	movs	r3, #38	@ 0x26
 8003f9e:	2118      	movs	r1, #24
 8003fa0:	185b      	adds	r3, r3, r1
 8003fa2:	19db      	adds	r3, r3, r7
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	801a      	strh	r2, [r3, #0]
 8003fa8:	e05d      	b.n	8004066 <drawImage+0x162>
{
	ind = image[i][0];
 8003faa:	2126      	movs	r1, #38	@ 0x26
 8003fac:	2018      	movs	r0, #24
 8003fae:	180b      	adds	r3, r1, r0
 8003fb0:	19db      	adds	r3, r3, r7
 8003fb2:	881b      	ldrh	r3, [r3, #0]
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fb8:	18d2      	adds	r2, r2, r3
 8003fba:	2316      	movs	r3, #22
 8003fbc:	181b      	adds	r3, r3, r0
 8003fbe:	19db      	adds	r3, r3, r7
 8003fc0:	8812      	ldrh	r2, [r2, #0]
 8003fc2:	801a      	strh	r2, [r3, #0]
	count = image[i][1];
 8003fc4:	180b      	adds	r3, r1, r0
 8003fc6:	19db      	adds	r3, r3, r7
 8003fc8:	881b      	ldrh	r3, [r3, #0]
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fce:	18d2      	adds	r2, r2, r3
 8003fd0:	2314      	movs	r3, #20
 8003fd2:	181b      	adds	r3, r3, r0
 8003fd4:	19db      	adds	r3, r3, r7
 8003fd6:	8852      	ldrh	r2, [r2, #2]
 8003fd8:	801a      	strh	r2, [r3, #0]

	for(j=0; j<count; j++)
 8003fda:	2324      	movs	r3, #36	@ 0x24
 8003fdc:	181b      	adds	r3, r3, r0
 8003fde:	19db      	adds	r3, r3, r7
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	801a      	strh	r2, [r3, #0]
 8003fe4:	e02c      	b.n	8004040 <drawImage+0x13c>
	{
		pixelBuffer[totalInd++] = ((palette[ind] & 0xFF)<<8) | (palette[ind] >> 8);
 8003fe6:	2116      	movs	r1, #22
 8003fe8:	2018      	movs	r0, #24
 8003fea:	180b      	adds	r3, r1, r0
 8003fec:	19db      	adds	r3, r3, r7
 8003fee:	881b      	ldrh	r3, [r3, #0]
 8003ff0:	005b      	lsls	r3, r3, #1
 8003ff2:	6a3a      	ldr	r2, [r7, #32]
 8003ff4:	18d3      	adds	r3, r2, r3
 8003ff6:	881b      	ldrh	r3, [r3, #0]
 8003ff8:	021b      	lsls	r3, r3, #8
 8003ffa:	b21a      	sxth	r2, r3
 8003ffc:	180b      	adds	r3, r1, r0
 8003ffe:	19db      	adds	r3, r3, r7
 8004000:	881b      	ldrh	r3, [r3, #0]
 8004002:	005b      	lsls	r3, r3, #1
 8004004:	6a39      	ldr	r1, [r7, #32]
 8004006:	18cb      	adds	r3, r1, r3
 8004008:	881b      	ldrh	r3, [r3, #0]
 800400a:	0a1b      	lsrs	r3, r3, #8
 800400c:	b29b      	uxth	r3, r3
 800400e:	b21b      	sxth	r3, r3
 8004010:	4313      	orrs	r3, r2
 8004012:	b219      	sxth	r1, r3
 8004014:	2222      	movs	r2, #34	@ 0x22
 8004016:	1813      	adds	r3, r2, r0
 8004018:	19db      	adds	r3, r3, r7
 800401a:	881b      	ldrh	r3, [r3, #0]
 800401c:	0004      	movs	r4, r0
 800401e:	1812      	adds	r2, r2, r0
 8004020:	19d2      	adds	r2, r2, r7
 8004022:	1c58      	adds	r0, r3, #1
 8004024:	8010      	strh	r0, [r2, #0]
 8004026:	001a      	movs	r2, r3
 8004028:	b289      	uxth	r1, r1
 800402a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800402c:	0052      	lsls	r2, r2, #1
 800402e:	52d1      	strh	r1, [r2, r3]
	for(j=0; j<count; j++)
 8004030:	2124      	movs	r1, #36	@ 0x24
 8004032:	190b      	adds	r3, r1, r4
 8004034:	19db      	adds	r3, r3, r7
 8004036:	881a      	ldrh	r2, [r3, #0]
 8004038:	190b      	adds	r3, r1, r4
 800403a:	19db      	adds	r3, r3, r7
 800403c:	3201      	adds	r2, #1
 800403e:	801a      	strh	r2, [r3, #0]
 8004040:	2324      	movs	r3, #36	@ 0x24
 8004042:	2018      	movs	r0, #24
 8004044:	181b      	adds	r3, r3, r0
 8004046:	19da      	adds	r2, r3, r7
 8004048:	2314      	movs	r3, #20
 800404a:	181b      	adds	r3, r3, r0
 800404c:	19db      	adds	r3, r3, r7
 800404e:	8812      	ldrh	r2, [r2, #0]
 8004050:	881b      	ldrh	r3, [r3, #0]
 8004052:	429a      	cmp	r2, r3
 8004054:	d3c7      	bcc.n	8003fe6 <drawImage+0xe2>
for(i=0; i<c; i++)
 8004056:	2126      	movs	r1, #38	@ 0x26
 8004058:	180b      	adds	r3, r1, r0
 800405a:	19db      	adds	r3, r3, r7
 800405c:	881a      	ldrh	r2, [r3, #0]
 800405e:	180b      	adds	r3, r1, r0
 8004060:	19db      	adds	r3, r3, r7
 8004062:	3201      	adds	r2, #1
 8004064:	801a      	strh	r2, [r3, #0]
 8004066:	2326      	movs	r3, #38	@ 0x26
 8004068:	2118      	movs	r1, #24
 800406a:	185b      	adds	r3, r3, r1
 800406c:	19da      	adds	r2, r3, r7
 800406e:	2348      	movs	r3, #72	@ 0x48
 8004070:	185b      	adds	r3, r3, r1
 8004072:	19db      	adds	r3, r3, r7
 8004074:	8812      	ldrh	r2, [r2, #0]
 8004076:	881b      	ldrh	r3, [r3, #0]
 8004078:	429a      	cmp	r2, r3
 800407a:	d396      	bcc.n	8003faa <drawImage+0xa6>
	}
}
ST7735_DrawImage(y, x, w, h, pixelBuffer);
 800407c:	2344      	movs	r3, #68	@ 0x44
 800407e:	185b      	adds	r3, r3, r1
 8004080:	19db      	adds	r3, r3, r7
 8004082:	881c      	ldrh	r4, [r3, #0]
 8004084:	2340      	movs	r3, #64	@ 0x40
 8004086:	185b      	adds	r3, r3, r1
 8004088:	19db      	adds	r3, r3, r7
 800408a:	881a      	ldrh	r2, [r3, #0]
 800408c:	231e      	movs	r3, #30
 800408e:	18fb      	adds	r3, r7, r3
 8004090:	8819      	ldrh	r1, [r3, #0]
 8004092:	231c      	movs	r3, #28
 8004094:	18fb      	adds	r3, r7, r3
 8004096:	8818      	ldrh	r0, [r3, #0]
 8004098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800409a:	9300      	str	r3, [sp, #0]
 800409c:	0023      	movs	r3, r4
 800409e:	f000 fa31 	bl	8004504 <ST7735_DrawImage>
 80040a2:	46c5      	mov	sp, r8
}
 80040a4:	46c0      	nop			@ (mov r8, r8)
 80040a6:	46bd      	mov	sp, r7
 80040a8:	b010      	add	sp, #64	@ 0x40
 80040aa:	bc80      	pop	{r7}
 80040ac:	46b8      	mov	r8, r7
 80040ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080040b0 <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 80040b4:	23a0      	movs	r3, #160	@ 0xa0
 80040b6:	05db      	lsls	r3, r3, #23
 80040b8:	2200      	movs	r2, #0
 80040ba:	2120      	movs	r1, #32
 80040bc:	0018      	movs	r0, r3
 80040be:	f005 fa1c 	bl	80094fa <HAL_GPIO_WritePin>
}
 80040c2:	46c0      	nop			@ (mov r8, r8)
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <ST7735_Unselect>:

void ST7735_Unselect()
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 80040cc:	23a0      	movs	r3, #160	@ 0xa0
 80040ce:	05db      	lsls	r3, r3, #23
 80040d0:	2201      	movs	r2, #1
 80040d2:	2120      	movs	r1, #32
 80040d4:	0018      	movs	r0, r3
 80040d6:	f005 fa10 	bl	80094fa <HAL_GPIO_WritePin>
}
 80040da:	46c0      	nop			@ (mov r8, r8)
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}

080040e0 <ST7735_Reset>:

void ST7735_Reset()
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 80040e4:	2380      	movs	r3, #128	@ 0x80
 80040e6:	0219      	lsls	r1, r3, #8
 80040e8:	23a0      	movs	r3, #160	@ 0xa0
 80040ea:	05db      	lsls	r3, r3, #23
 80040ec:	2200      	movs	r2, #0
 80040ee:	0018      	movs	r0, r3
 80040f0:	f005 fa03 	bl	80094fa <HAL_GPIO_WritePin>
    HAL_Delay(5);
 80040f4:	2005      	movs	r0, #5
 80040f6:	f004 fdad 	bl	8008c54 <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 80040fa:	2380      	movs	r3, #128	@ 0x80
 80040fc:	0219      	lsls	r1, r3, #8
 80040fe:	23a0      	movs	r3, #160	@ 0xa0
 8004100:	05db      	lsls	r3, r3, #23
 8004102:	2201      	movs	r2, #1
 8004104:	0018      	movs	r0, r3
 8004106:	f005 f9f8 	bl	80094fa <HAL_GPIO_WritePin>
}
 800410a:	46c0      	nop			@ (mov r8, r8)
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 8004110:	b580      	push	{r7, lr}
 8004112:	b082      	sub	sp, #8
 8004114:	af00      	add	r7, sp, #0
 8004116:	0002      	movs	r2, r0
 8004118:	1dfb      	adds	r3, r7, #7
 800411a:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 800411c:	23a0      	movs	r3, #160	@ 0xa0
 800411e:	05db      	lsls	r3, r3, #23
 8004120:	2200      	movs	r2, #0
 8004122:	2110      	movs	r1, #16
 8004124:	0018      	movs	r0, r3
 8004126:	f005 f9e8 	bl	80094fa <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800412a:	2301      	movs	r3, #1
 800412c:	425b      	negs	r3, r3
 800412e:	1df9      	adds	r1, r7, #7
 8004130:	4803      	ldr	r0, [pc, #12]	@ (8004140 <ST7735_WriteCommand+0x30>)
 8004132:	2201      	movs	r2, #1
 8004134:	f007 fa0e 	bl	800b554 <HAL_SPI_Transmit>
}
 8004138:	46c0      	nop			@ (mov r8, r8)
 800413a:	46bd      	mov	sp, r7
 800413c:	b002      	add	sp, #8
 800413e:	bd80      	pop	{r7, pc}
 8004140:	2000130c 	.word	0x2000130c

08004144 <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b082      	sub	sp, #8
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 800414e:	23a0      	movs	r3, #160	@ 0xa0
 8004150:	05db      	lsls	r3, r3, #23
 8004152:	2201      	movs	r2, #1
 8004154:	2110      	movs	r1, #16
 8004156:	0018      	movs	r0, r3
 8004158:	f005 f9cf 	bl	80094fa <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	b29a      	uxth	r2, r3
 8004160:	2301      	movs	r3, #1
 8004162:	425b      	negs	r3, r3
 8004164:	6879      	ldr	r1, [r7, #4]
 8004166:	4803      	ldr	r0, [pc, #12]	@ (8004174 <ST7735_WriteData+0x30>)
 8004168:	f007 f9f4 	bl	800b554 <HAL_SPI_Transmit>
}
 800416c:	46c0      	nop			@ (mov r8, r8)
 800416e:	46bd      	mov	sp, r7
 8004170:	b002      	add	sp, #8
 8004172:	bd80      	pop	{r7, pc}
 8004174:	2000130c 	.word	0x2000130c

08004178 <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 8004178:	b590      	push	{r4, r7, lr}
 800417a:	b085      	sub	sp, #20
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	1c5a      	adds	r2, r3, #1
 8004184:	607a      	str	r2, [r7, #4]
 8004186:	220f      	movs	r2, #15
 8004188:	18ba      	adds	r2, r7, r2
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	7013      	strb	r3, [r2, #0]
    while(numCommands--) {
 800418e:	e04a      	b.n	8004226 <DisplayInit+0xae>
        uint8_t cmd = *addr++;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	1c5a      	adds	r2, r3, #1
 8004194:	607a      	str	r2, [r7, #4]
 8004196:	210b      	movs	r1, #11
 8004198:	187a      	adds	r2, r7, r1
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	7013      	strb	r3, [r2, #0]
        ST7735_WriteCommand(cmd);
 800419e:	187b      	adds	r3, r7, r1
 80041a0:	781b      	ldrb	r3, [r3, #0]
 80041a2:	0018      	movs	r0, r3
 80041a4:	f7ff ffb4 	bl	8004110 <ST7735_WriteCommand>

        numArgs = *addr++;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	1c5a      	adds	r2, r3, #1
 80041ac:	607a      	str	r2, [r7, #4]
 80041ae:	200a      	movs	r0, #10
 80041b0:	183a      	adds	r2, r7, r0
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	7013      	strb	r3, [r2, #0]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 80041b6:	183b      	adds	r3, r7, r0
 80041b8:	781b      	ldrb	r3, [r3, #0]
 80041ba:	b29a      	uxth	r2, r3
 80041bc:	230c      	movs	r3, #12
 80041be:	18fb      	adds	r3, r7, r3
 80041c0:	2180      	movs	r1, #128	@ 0x80
 80041c2:	400a      	ands	r2, r1
 80041c4:	801a      	strh	r2, [r3, #0]
        numArgs &= ~DELAY;
 80041c6:	183b      	adds	r3, r7, r0
 80041c8:	183a      	adds	r2, r7, r0
 80041ca:	7812      	ldrb	r2, [r2, #0]
 80041cc:	217f      	movs	r1, #127	@ 0x7f
 80041ce:	400a      	ands	r2, r1
 80041d0:	701a      	strb	r2, [r3, #0]
        if(numArgs) {
 80041d2:	183b      	adds	r3, r7, r0
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d00c      	beq.n	80041f4 <DisplayInit+0x7c>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 80041da:	0004      	movs	r4, r0
 80041dc:	183b      	adds	r3, r7, r0
 80041de:	781a      	ldrb	r2, [r3, #0]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	0011      	movs	r1, r2
 80041e4:	0018      	movs	r0, r3
 80041e6:	f7ff ffad 	bl	8004144 <ST7735_WriteData>
            addr += numArgs;
 80041ea:	193b      	adds	r3, r7, r4
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	18d3      	adds	r3, r2, r3
 80041f2:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 80041f4:	210c      	movs	r1, #12
 80041f6:	187b      	adds	r3, r7, r1
 80041f8:	881b      	ldrh	r3, [r3, #0]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d013      	beq.n	8004226 <DisplayInit+0xae>
            ms = *addr++;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	1c5a      	adds	r2, r3, #1
 8004202:	607a      	str	r2, [r7, #4]
 8004204:	781a      	ldrb	r2, [r3, #0]
 8004206:	187b      	adds	r3, r7, r1
 8004208:	801a      	strh	r2, [r3, #0]
            if(ms == 255) ms = 500;
 800420a:	187b      	adds	r3, r7, r1
 800420c:	881b      	ldrh	r3, [r3, #0]
 800420e:	2bff      	cmp	r3, #255	@ 0xff
 8004210:	d103      	bne.n	800421a <DisplayInit+0xa2>
 8004212:	187b      	adds	r3, r7, r1
 8004214:	22fa      	movs	r2, #250	@ 0xfa
 8004216:	0052      	lsls	r2, r2, #1
 8004218:	801a      	strh	r2, [r3, #0]
            HAL_Delay(ms);
 800421a:	230c      	movs	r3, #12
 800421c:	18fb      	adds	r3, r7, r3
 800421e:	881b      	ldrh	r3, [r3, #0]
 8004220:	0018      	movs	r0, r3
 8004222:	f004 fd17 	bl	8008c54 <HAL_Delay>
    while(numCommands--) {
 8004226:	220f      	movs	r2, #15
 8004228:	18bb      	adds	r3, r7, r2
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	18ba      	adds	r2, r7, r2
 800422e:	1e59      	subs	r1, r3, #1
 8004230:	7011      	strb	r1, [r2, #0]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d1ac      	bne.n	8004190 <DisplayInit+0x18>
        }
    }
}
 8004236:	46c0      	nop			@ (mov r8, r8)
 8004238:	46c0      	nop			@ (mov r8, r8)
 800423a:	46bd      	mov	sp, r7
 800423c:	b005      	add	sp, #20
 800423e:	bd90      	pop	{r4, r7, pc}

08004240 <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8004240:	b5b0      	push	{r4, r5, r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	0005      	movs	r5, r0
 8004248:	000c      	movs	r4, r1
 800424a:	0010      	movs	r0, r2
 800424c:	0019      	movs	r1, r3
 800424e:	1dfb      	adds	r3, r7, #7
 8004250:	1c2a      	adds	r2, r5, #0
 8004252:	701a      	strb	r2, [r3, #0]
 8004254:	1dbb      	adds	r3, r7, #6
 8004256:	1c22      	adds	r2, r4, #0
 8004258:	701a      	strb	r2, [r3, #0]
 800425a:	1d7b      	adds	r3, r7, #5
 800425c:	1c02      	adds	r2, r0, #0
 800425e:	701a      	strb	r2, [r3, #0]
 8004260:	1d3b      	adds	r3, r7, #4
 8004262:	1c0a      	adds	r2, r1, #0
 8004264:	701a      	strb	r2, [r3, #0]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8004266:	202a      	movs	r0, #42	@ 0x2a
 8004268:	f7ff ff52 	bl	8004110 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 800426c:	210c      	movs	r1, #12
 800426e:	187b      	adds	r3, r7, r1
 8004270:	2200      	movs	r2, #0
 8004272:	701a      	strb	r2, [r3, #0]
 8004274:	4b1c      	ldr	r3, [pc, #112]	@ (80042e8 <ST7735_SetAddressWindow+0xa8>)
 8004276:	781a      	ldrb	r2, [r3, #0]
 8004278:	1dfb      	adds	r3, r7, #7
 800427a:	781b      	ldrb	r3, [r3, #0]
 800427c:	18d3      	adds	r3, r2, r3
 800427e:	b2da      	uxtb	r2, r3
 8004280:	187b      	adds	r3, r7, r1
 8004282:	705a      	strb	r2, [r3, #1]
 8004284:	187b      	adds	r3, r7, r1
 8004286:	2200      	movs	r2, #0
 8004288:	709a      	strb	r2, [r3, #2]
 800428a:	4b17      	ldr	r3, [pc, #92]	@ (80042e8 <ST7735_SetAddressWindow+0xa8>)
 800428c:	781a      	ldrb	r2, [r3, #0]
 800428e:	1d7b      	adds	r3, r7, #5
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	18d3      	adds	r3, r2, r3
 8004294:	b2da      	uxtb	r2, r3
 8004296:	187b      	adds	r3, r7, r1
 8004298:	70da      	strb	r2, [r3, #3]
    ST7735_WriteData(data, sizeof(data));
 800429a:	000c      	movs	r4, r1
 800429c:	187b      	adds	r3, r7, r1
 800429e:	2104      	movs	r1, #4
 80042a0:	0018      	movs	r0, r3
 80042a2:	f7ff ff4f 	bl	8004144 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 80042a6:	202b      	movs	r0, #43	@ 0x2b
 80042a8:	f7ff ff32 	bl	8004110 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 80042ac:	4b0f      	ldr	r3, [pc, #60]	@ (80042ec <ST7735_SetAddressWindow+0xac>)
 80042ae:	781a      	ldrb	r2, [r3, #0]
 80042b0:	1dbb      	adds	r3, r7, #6
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	18d3      	adds	r3, r2, r3
 80042b6:	b2da      	uxtb	r2, r3
 80042b8:	0021      	movs	r1, r4
 80042ba:	187b      	adds	r3, r7, r1
 80042bc:	705a      	strb	r2, [r3, #1]
    data[3] = y1 + _ystart;
 80042be:	4b0b      	ldr	r3, [pc, #44]	@ (80042ec <ST7735_SetAddressWindow+0xac>)
 80042c0:	781a      	ldrb	r2, [r3, #0]
 80042c2:	1d3b      	adds	r3, r7, #4
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	18d3      	adds	r3, r2, r3
 80042c8:	b2da      	uxtb	r2, r3
 80042ca:	187b      	adds	r3, r7, r1
 80042cc:	70da      	strb	r2, [r3, #3]
    ST7735_WriteData(data, sizeof(data));
 80042ce:	187b      	adds	r3, r7, r1
 80042d0:	2104      	movs	r1, #4
 80042d2:	0018      	movs	r0, r3
 80042d4:	f7ff ff36 	bl	8004144 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 80042d8:	202c      	movs	r0, #44	@ 0x2c
 80042da:	f7ff ff19 	bl	8004110 <ST7735_WriteCommand>
}
 80042de:	46c0      	nop			@ (mov r8, r8)
 80042e0:	46bd      	mov	sp, r7
 80042e2:	b004      	add	sp, #16
 80042e4:	bdb0      	pop	{r4, r5, r7, pc}
 80042e6:	46c0      	nop			@ (mov r8, r8)
 80042e8:	20000293 	.word	0x20000293
 80042ec:	20000294 	.word	0x20000294

080042f0 <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b082      	sub	sp, #8
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	0002      	movs	r2, r0
 80042f8:	1dfb      	adds	r3, r7, #7
 80042fa:	701a      	strb	r2, [r3, #0]
    ST7735_Select();
 80042fc:	f7ff fed8 	bl	80040b0 <ST7735_Select>
    ST7735_Reset();
 8004300:	f7ff feee 	bl	80040e0 <ST7735_Reset>
    DisplayInit(init_cmds1);
 8004304:	4b0e      	ldr	r3, [pc, #56]	@ (8004340 <ST7735_Init+0x50>)
 8004306:	0018      	movs	r0, r3
 8004308:	f7ff ff36 	bl	8004178 <DisplayInit>
    DisplayInit(init_cmds2);
 800430c:	4b0d      	ldr	r3, [pc, #52]	@ (8004344 <ST7735_Init+0x54>)
 800430e:	0018      	movs	r0, r3
 8004310:	f7ff ff32 	bl	8004178 <DisplayInit>
    DisplayInit(init_cmds3);
 8004314:	4b0c      	ldr	r3, [pc, #48]	@ (8004348 <ST7735_Init+0x58>)
 8004316:	0018      	movs	r0, r3
 8004318:	f7ff ff2e 	bl	8004178 <DisplayInit>
    ST7735_Select();
    ST7735_WriteCommand(ST7735_MADCTL);
    ST7735_WriteData(&data,1);
    ST7735_Unselect();
#else
    _colstart = 0;
 800431c:	4b0b      	ldr	r3, [pc, #44]	@ (800434c <ST7735_Init+0x5c>)
 800431e:	2200      	movs	r2, #0
 8004320:	701a      	strb	r2, [r3, #0]
    _rowstart = 0;
 8004322:	4b0b      	ldr	r3, [pc, #44]	@ (8004350 <ST7735_Init+0x60>)
 8004324:	2200      	movs	r2, #0
 8004326:	701a      	strb	r2, [r3, #0]
#endif
    ST7735_SetRotation (rotation);
 8004328:	1dfb      	adds	r3, r7, #7
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	0018      	movs	r0, r3
 800432e:	f000 f811 	bl	8004354 <ST7735_SetRotation>
    ST7735_Unselect();
 8004332:	f7ff fec9 	bl	80040c8 <ST7735_Unselect>

}
 8004336:	46c0      	nop			@ (mov r8, r8)
 8004338:	46bd      	mov	sp, r7
 800433a:	b002      	add	sp, #8
 800433c:	bd80      	pop	{r7, pc}
 800433e:	46c0      	nop			@ (mov r8, r8)
 8004340:	08011b28 	.word	0x08011b28
 8004344:	08011b60 	.word	0x08011b60
 8004348:	08011b70 	.word	0x08011b70
 800434c:	20000291 	.word	0x20000291
 8004350:	20000292 	.word	0x20000292

08004354 <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	0002      	movs	r2, r0
 800435c:	1dfb      	adds	r3, r7, #7
 800435e:	701a      	strb	r2, [r3, #0]

  uint8_t madctl = 0;
 8004360:	230f      	movs	r3, #15
 8004362:	18fb      	adds	r3, r7, r3
 8004364:	2200      	movs	r2, #0
 8004366:	701a      	strb	r2, [r3, #0]

  rotation = m % 4; // can't be higher than 3
 8004368:	1dfb      	adds	r3, r7, #7
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	2203      	movs	r2, #3
 800436e:	4013      	ands	r3, r2
 8004370:	b2da      	uxtb	r2, r3
 8004372:	4b36      	ldr	r3, [pc, #216]	@ (800444c <ST7735_SetRotation+0xf8>)
 8004374:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 8004376:	4b35      	ldr	r3, [pc, #212]	@ (800444c <ST7735_SetRotation+0xf8>)
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	2b03      	cmp	r3, #3
 800437c:	d041      	beq.n	8004402 <ST7735_SetRotation+0xae>
 800437e:	dc53      	bgt.n	8004428 <ST7735_SetRotation+0xd4>
 8004380:	2b02      	cmp	r3, #2
 8004382:	d02b      	beq.n	80043dc <ST7735_SetRotation+0x88>
 8004384:	dc50      	bgt.n	8004428 <ST7735_SetRotation+0xd4>
 8004386:	2b00      	cmp	r3, #0
 8004388:	d002      	beq.n	8004390 <ST7735_SetRotation+0x3c>
 800438a:	2b01      	cmp	r3, #1
 800438c:	d013      	beq.n	80043b6 <ST7735_SetRotation+0x62>
 800438e:	e04b      	b.n	8004428 <ST7735_SetRotation+0xd4>
  {
  case 0:
#ifdef ST7735_IS_180X128
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 8004390:	230f      	movs	r3, #15
 8004392:	18fb      	adds	r3, r7, r3
 8004394:	22c0      	movs	r2, #192	@ 0xc0
 8004396:	701a      	strb	r2, [r3, #0]
      _height = ST7735_HEIGHT;
 8004398:	4b2d      	ldr	r3, [pc, #180]	@ (8004450 <ST7735_SetRotation+0xfc>)
 800439a:	22a0      	movs	r2, #160	@ 0xa0
 800439c:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 800439e:	4b2d      	ldr	r3, [pc, #180]	@ (8004454 <ST7735_SetRotation+0x100>)
 80043a0:	2280      	movs	r2, #128	@ 0x80
 80043a2:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 80043a4:	4b2c      	ldr	r3, [pc, #176]	@ (8004458 <ST7735_SetRotation+0x104>)
 80043a6:	781a      	ldrb	r2, [r3, #0]
 80043a8:	4b2c      	ldr	r3, [pc, #176]	@ (800445c <ST7735_SetRotation+0x108>)
 80043aa:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 80043ac:	4b2c      	ldr	r3, [pc, #176]	@ (8004460 <ST7735_SetRotation+0x10c>)
 80043ae:	781a      	ldrb	r2, [r3, #0]
 80043b0:	4b2c      	ldr	r3, [pc, #176]	@ (8004464 <ST7735_SetRotation+0x110>)
 80043b2:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80043b4:	e038      	b.n	8004428 <ST7735_SetRotation+0xd4>
  case 1:
#if ST7735_IS_180X128
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 80043b6:	230f      	movs	r3, #15
 80043b8:	18fb      	adds	r3, r7, r3
 80043ba:	22a0      	movs	r2, #160	@ 0xa0
 80043bc:	701a      	strb	r2, [r3, #0]
      _width = ST7735_HEIGHT;
 80043be:	4b25      	ldr	r3, [pc, #148]	@ (8004454 <ST7735_SetRotation+0x100>)
 80043c0:	22a0      	movs	r2, #160	@ 0xa0
 80043c2:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 80043c4:	4b22      	ldr	r3, [pc, #136]	@ (8004450 <ST7735_SetRotation+0xfc>)
 80043c6:	2280      	movs	r2, #128	@ 0x80
 80043c8:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 80043ca:	4b23      	ldr	r3, [pc, #140]	@ (8004458 <ST7735_SetRotation+0x104>)
 80043cc:	781a      	ldrb	r2, [r3, #0]
 80043ce:	4b25      	ldr	r3, [pc, #148]	@ (8004464 <ST7735_SetRotation+0x110>)
 80043d0:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 80043d2:	4b23      	ldr	r3, [pc, #140]	@ (8004460 <ST7735_SetRotation+0x10c>)
 80043d4:	781a      	ldrb	r2, [r3, #0]
 80043d6:	4b21      	ldr	r3, [pc, #132]	@ (800445c <ST7735_SetRotation+0x108>)
 80043d8:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80043da:	e025      	b.n	8004428 <ST7735_SetRotation+0xd4>
  case 2:
#if ST7735_IS_180X128
	  madctl = ST7735_MADCTL_RGB;
#else
      madctl = ST7735_MADCTL_RGB;
 80043dc:	230f      	movs	r3, #15
 80043de:	18fb      	adds	r3, r7, r3
 80043e0:	2200      	movs	r2, #0
 80043e2:	701a      	strb	r2, [r3, #0]
      _height = ST7735_HEIGHT;
 80043e4:	4b1a      	ldr	r3, [pc, #104]	@ (8004450 <ST7735_SetRotation+0xfc>)
 80043e6:	22a0      	movs	r2, #160	@ 0xa0
 80043e8:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 80043ea:	4b1a      	ldr	r3, [pc, #104]	@ (8004454 <ST7735_SetRotation+0x100>)
 80043ec:	2280      	movs	r2, #128	@ 0x80
 80043ee:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 80043f0:	4b19      	ldr	r3, [pc, #100]	@ (8004458 <ST7735_SetRotation+0x104>)
 80043f2:	781a      	ldrb	r2, [r3, #0]
 80043f4:	4b19      	ldr	r3, [pc, #100]	@ (800445c <ST7735_SetRotation+0x108>)
 80043f6:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 80043f8:	4b19      	ldr	r3, [pc, #100]	@ (8004460 <ST7735_SetRotation+0x10c>)
 80043fa:	781a      	ldrb	r2, [r3, #0]
 80043fc:	4b19      	ldr	r3, [pc, #100]	@ (8004464 <ST7735_SetRotation+0x110>)
 80043fe:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8004400:	e012      	b.n	8004428 <ST7735_SetRotation+0xd4>
  case 3:
#if ST7735_IS_180X128
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8004402:	230f      	movs	r3, #15
 8004404:	18fb      	adds	r3, r7, r3
 8004406:	2260      	movs	r2, #96	@ 0x60
 8004408:	701a      	strb	r2, [r3, #0]
      _width = ST7735_HEIGHT;
 800440a:	4b12      	ldr	r3, [pc, #72]	@ (8004454 <ST7735_SetRotation+0x100>)
 800440c:	22a0      	movs	r2, #160	@ 0xa0
 800440e:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8004410:	4b0f      	ldr	r3, [pc, #60]	@ (8004450 <ST7735_SetRotation+0xfc>)
 8004412:	2280      	movs	r2, #128	@ 0x80
 8004414:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8004416:	4b10      	ldr	r3, [pc, #64]	@ (8004458 <ST7735_SetRotation+0x104>)
 8004418:	781a      	ldrb	r2, [r3, #0]
 800441a:	4b12      	ldr	r3, [pc, #72]	@ (8004464 <ST7735_SetRotation+0x110>)
 800441c:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 800441e:	4b10      	ldr	r3, [pc, #64]	@ (8004460 <ST7735_SetRotation+0x10c>)
 8004420:	781a      	ldrb	r2, [r3, #0]
 8004422:	4b0e      	ldr	r3, [pc, #56]	@ (800445c <ST7735_SetRotation+0x108>)
 8004424:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8004426:	46c0      	nop			@ (mov r8, r8)
  }
  ST7735_Select();
 8004428:	f7ff fe42 	bl	80040b0 <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 800442c:	2036      	movs	r0, #54	@ 0x36
 800442e:	f7ff fe6f 	bl	8004110 <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 8004432:	230f      	movs	r3, #15
 8004434:	18fb      	adds	r3, r7, r3
 8004436:	2101      	movs	r1, #1
 8004438:	0018      	movs	r0, r3
 800443a:	f7ff fe83 	bl	8004144 <ST7735_WriteData>
  ST7735_Unselect();
 800443e:	f7ff fe43 	bl	80040c8 <ST7735_Unselect>
}
 8004442:	46c0      	nop			@ (mov r8, r8)
 8004444:	46bd      	mov	sp, r7
 8004446:	b004      	add	sp, #16
 8004448:	bd80      	pop	{r7, pc}
 800444a:	46c0      	nop			@ (mov r8, r8)
 800444c:	20000290 	.word	0x20000290
 8004450:	2000028e 	.word	0x2000028e
 8004454:	2000028c 	.word	0x2000028c
 8004458:	20000291 	.word	0x20000291
 800445c:	20000293 	.word	0x20000293
 8004460:	20000292 	.word	0x20000292
 8004464:	20000294 	.word	0x20000294

08004468 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8004468:	b590      	push	{r4, r7, lr}
 800446a:	b085      	sub	sp, #20
 800446c:	af00      	add	r7, sp, #0
 800446e:	0004      	movs	r4, r0
 8004470:	0008      	movs	r0, r1
 8004472:	0011      	movs	r1, r2
 8004474:	1dbb      	adds	r3, r7, #6
 8004476:	1c22      	adds	r2, r4, #0
 8004478:	801a      	strh	r2, [r3, #0]
 800447a:	1d3b      	adds	r3, r7, #4
 800447c:	1c02      	adds	r2, r0, #0
 800447e:	801a      	strh	r2, [r3, #0]
 8004480:	1cbb      	adds	r3, r7, #2
 8004482:	1c0a      	adds	r2, r1, #0
 8004484:	801a      	strh	r2, [r3, #0]
    if((x >= _width) || (y >= _height))
 8004486:	1dbb      	adds	r3, r7, #6
 8004488:	881b      	ldrh	r3, [r3, #0]
 800448a:	4a1c      	ldr	r2, [pc, #112]	@ (80044fc <ST7735_DrawPixel+0x94>)
 800448c:	2100      	movs	r1, #0
 800448e:	5e52      	ldrsh	r2, [r2, r1]
 8004490:	4293      	cmp	r3, r2
 8004492:	da2f      	bge.n	80044f4 <ST7735_DrawPixel+0x8c>
 8004494:	1d3b      	adds	r3, r7, #4
 8004496:	881b      	ldrh	r3, [r3, #0]
 8004498:	4a19      	ldr	r2, [pc, #100]	@ (8004500 <ST7735_DrawPixel+0x98>)
 800449a:	2100      	movs	r1, #0
 800449c:	5e52      	ldrsh	r2, [r2, r1]
 800449e:	4293      	cmp	r3, r2
 80044a0:	da28      	bge.n	80044f4 <ST7735_DrawPixel+0x8c>
        return;

    ST7735_Select();
 80044a2:	f7ff fe05 	bl	80040b0 <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 80044a6:	1dbb      	adds	r3, r7, #6
 80044a8:	881b      	ldrh	r3, [r3, #0]
 80044aa:	b2d8      	uxtb	r0, r3
 80044ac:	1d3b      	adds	r3, r7, #4
 80044ae:	881b      	ldrh	r3, [r3, #0]
 80044b0:	b2d9      	uxtb	r1, r3
 80044b2:	1dbb      	adds	r3, r7, #6
 80044b4:	881b      	ldrh	r3, [r3, #0]
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	3301      	adds	r3, #1
 80044ba:	b2da      	uxtb	r2, r3
 80044bc:	1d3b      	adds	r3, r7, #4
 80044be:	881b      	ldrh	r3, [r3, #0]
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	3301      	adds	r3, #1
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	f7ff febb 	bl	8004240 <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 80044ca:	1cbb      	adds	r3, r7, #2
 80044cc:	881b      	ldrh	r3, [r3, #0]
 80044ce:	0a1b      	lsrs	r3, r3, #8
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	b2da      	uxtb	r2, r3
 80044d4:	210c      	movs	r1, #12
 80044d6:	187b      	adds	r3, r7, r1
 80044d8:	701a      	strb	r2, [r3, #0]
 80044da:	1cbb      	adds	r3, r7, #2
 80044dc:	881b      	ldrh	r3, [r3, #0]
 80044de:	b2da      	uxtb	r2, r3
 80044e0:	187b      	adds	r3, r7, r1
 80044e2:	705a      	strb	r2, [r3, #1]
    ST7735_WriteData(data, sizeof(data));
 80044e4:	187b      	adds	r3, r7, r1
 80044e6:	2102      	movs	r1, #2
 80044e8:	0018      	movs	r0, r3
 80044ea:	f7ff fe2b 	bl	8004144 <ST7735_WriteData>

    ST7735_Unselect();
 80044ee:	f7ff fdeb 	bl	80040c8 <ST7735_Unselect>
 80044f2:	e000      	b.n	80044f6 <ST7735_DrawPixel+0x8e>
        return;
 80044f4:	46c0      	nop			@ (mov r8, r8)
}
 80044f6:	46bd      	mov	sp, r7
 80044f8:	b005      	add	sp, #20
 80044fa:	bd90      	pop	{r4, r7, pc}
 80044fc:	2000028c 	.word	0x2000028c
 8004500:	2000028e 	.word	0x2000028e

08004504 <ST7735_DrawImage>:
    }

    ST7735_Unselect();
}

void ST7735_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data) {
 8004504:	b5b0      	push	{r4, r5, r7, lr}
 8004506:	b082      	sub	sp, #8
 8004508:	af00      	add	r7, sp, #0
 800450a:	0005      	movs	r5, r0
 800450c:	000c      	movs	r4, r1
 800450e:	0010      	movs	r0, r2
 8004510:	0019      	movs	r1, r3
 8004512:	1dbb      	adds	r3, r7, #6
 8004514:	1c2a      	adds	r2, r5, #0
 8004516:	801a      	strh	r2, [r3, #0]
 8004518:	1d3b      	adds	r3, r7, #4
 800451a:	1c22      	adds	r2, r4, #0
 800451c:	801a      	strh	r2, [r3, #0]
 800451e:	1cbb      	adds	r3, r7, #2
 8004520:	1c02      	adds	r2, r0, #0
 8004522:	801a      	strh	r2, [r3, #0]
 8004524:	003b      	movs	r3, r7
 8004526:	1c0a      	adds	r2, r1, #0
 8004528:	801a      	strh	r2, [r3, #0]
    if((x >= _width) || (y >= _height)) return;
 800452a:	1dbb      	adds	r3, r7, #6
 800452c:	881b      	ldrh	r3, [r3, #0]
 800452e:	4a2a      	ldr	r2, [pc, #168]	@ (80045d8 <ST7735_DrawImage+0xd4>)
 8004530:	2100      	movs	r1, #0
 8004532:	5e52      	ldrsh	r2, [r2, r1]
 8004534:	4293      	cmp	r3, r2
 8004536:	da47      	bge.n	80045c8 <ST7735_DrawImage+0xc4>
 8004538:	1d3b      	adds	r3, r7, #4
 800453a:	881b      	ldrh	r3, [r3, #0]
 800453c:	4a27      	ldr	r2, [pc, #156]	@ (80045dc <ST7735_DrawImage+0xd8>)
 800453e:	2100      	movs	r1, #0
 8004540:	5e52      	ldrsh	r2, [r2, r1]
 8004542:	4293      	cmp	r3, r2
 8004544:	da40      	bge.n	80045c8 <ST7735_DrawImage+0xc4>
    if((x + w - 1) >= _width) return;
 8004546:	1dbb      	adds	r3, r7, #6
 8004548:	881a      	ldrh	r2, [r3, #0]
 800454a:	1cbb      	adds	r3, r7, #2
 800454c:	881b      	ldrh	r3, [r3, #0]
 800454e:	18d3      	adds	r3, r2, r3
 8004550:	4a21      	ldr	r2, [pc, #132]	@ (80045d8 <ST7735_DrawImage+0xd4>)
 8004552:	2100      	movs	r1, #0
 8004554:	5e52      	ldrsh	r2, [r2, r1]
 8004556:	4293      	cmp	r3, r2
 8004558:	dc38      	bgt.n	80045cc <ST7735_DrawImage+0xc8>
    if((y + h - 1) >= _height) return;
 800455a:	1d3b      	adds	r3, r7, #4
 800455c:	881a      	ldrh	r2, [r3, #0]
 800455e:	003b      	movs	r3, r7
 8004560:	881b      	ldrh	r3, [r3, #0]
 8004562:	18d3      	adds	r3, r2, r3
 8004564:	4a1d      	ldr	r2, [pc, #116]	@ (80045dc <ST7735_DrawImage+0xd8>)
 8004566:	2100      	movs	r1, #0
 8004568:	5e52      	ldrsh	r2, [r2, r1]
 800456a:	4293      	cmp	r3, r2
 800456c:	dc30      	bgt.n	80045d0 <ST7735_DrawImage+0xcc>

    ST7735_Select();
 800456e:	f7ff fd9f 	bl	80040b0 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8004572:	1dbb      	adds	r3, r7, #6
 8004574:	881b      	ldrh	r3, [r3, #0]
 8004576:	b2d8      	uxtb	r0, r3
 8004578:	1d3b      	adds	r3, r7, #4
 800457a:	881b      	ldrh	r3, [r3, #0]
 800457c:	b2d9      	uxtb	r1, r3
 800457e:	1dbb      	adds	r3, r7, #6
 8004580:	881b      	ldrh	r3, [r3, #0]
 8004582:	b2da      	uxtb	r2, r3
 8004584:	1cbb      	adds	r3, r7, #2
 8004586:	881b      	ldrh	r3, [r3, #0]
 8004588:	b2db      	uxtb	r3, r3
 800458a:	18d3      	adds	r3, r2, r3
 800458c:	b2db      	uxtb	r3, r3
 800458e:	3b01      	subs	r3, #1
 8004590:	b2dc      	uxtb	r4, r3
 8004592:	1d3b      	adds	r3, r7, #4
 8004594:	881b      	ldrh	r3, [r3, #0]
 8004596:	b2da      	uxtb	r2, r3
 8004598:	003b      	movs	r3, r7
 800459a:	881b      	ldrh	r3, [r3, #0]
 800459c:	b2db      	uxtb	r3, r3
 800459e:	18d3      	adds	r3, r2, r3
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	3b01      	subs	r3, #1
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	0022      	movs	r2, r4
 80045a8:	f7ff fe4a 	bl	8004240 <ST7735_SetAddressWindow>
    ST7735_WriteData((uint8_t*)data, sizeof(uint16_t)*w*h);
 80045ac:	1cbb      	adds	r3, r7, #2
 80045ae:	881b      	ldrh	r3, [r3, #0]
 80045b0:	003a      	movs	r2, r7
 80045b2:	8812      	ldrh	r2, [r2, #0]
 80045b4:	4353      	muls	r3, r2
 80045b6:	005a      	lsls	r2, r3, #1
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	0011      	movs	r1, r2
 80045bc:	0018      	movs	r0, r3
 80045be:	f7ff fdc1 	bl	8004144 <ST7735_WriteData>
    ST7735_Unselect();
 80045c2:	f7ff fd81 	bl	80040c8 <ST7735_Unselect>
 80045c6:	e004      	b.n	80045d2 <ST7735_DrawImage+0xce>
    if((x >= _width) || (y >= _height)) return;
 80045c8:	46c0      	nop			@ (mov r8, r8)
 80045ca:	e002      	b.n	80045d2 <ST7735_DrawImage+0xce>
    if((x + w - 1) >= _width) return;
 80045cc:	46c0      	nop			@ (mov r8, r8)
 80045ce:	e000      	b.n	80045d2 <ST7735_DrawImage+0xce>
    if((y + h - 1) >= _height) return;
 80045d0:	46c0      	nop			@ (mov r8, r8)
}
 80045d2:	46bd      	mov	sp, r7
 80045d4:	b002      	add	sp, #8
 80045d6:	bdb0      	pop	{r4, r5, r7, pc}
 80045d8:	2000028c 	.word	0x2000028c
 80045dc:	2000028e 	.word	0x2000028e

080045e0 <minmea_tocoord>:
/**
 * Convert a raw coordinate to a floating point DD.DDD... value.
 * Returns NaN for "unknown" values.
 */
static inline float minmea_tocoord(struct minmea_float *f)
{
 80045e0:	b5b0      	push	{r4, r5, r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
    if (f->scale == 0)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d101      	bne.n	80045f4 <minmea_tocoord+0x14>
        return NAN;
 80045f0:	4b1c      	ldr	r3, [pc, #112]	@ (8004664 <minmea_tocoord+0x84>)
 80045f2:	e033      	b.n	800465c <minmea_tocoord+0x7c>
    int_least32_t degrees = f->value / (f->scale * 100);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	2164      	movs	r1, #100	@ 0x64
 80045fe:	434b      	muls	r3, r1
 8004600:	0019      	movs	r1, r3
 8004602:	0010      	movs	r0, r2
 8004604:	f7fb fe30 	bl	8000268 <__divsi3>
 8004608:	0003      	movs	r3, r0
 800460a:	60fb      	str	r3, [r7, #12]
    int_least32_t minutes = f->value % (f->scale * 100);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	2164      	movs	r1, #100	@ 0x64
 8004616:	434b      	muls	r3, r1
 8004618:	0019      	movs	r1, r3
 800461a:	0010      	movs	r0, r2
 800461c:	f7fb ff0a 	bl	8000434 <__aeabi_idivmod>
 8004620:	000b      	movs	r3, r1
 8004622:	60bb      	str	r3, [r7, #8]
    return (float) degrees + (float) minutes / (60 * f->scale);
 8004624:	68f8      	ldr	r0, [r7, #12]
 8004626:	f7fc ffcb 	bl	80015c0 <__aeabi_i2f>
 800462a:	1c04      	adds	r4, r0, #0
 800462c:	68b8      	ldr	r0, [r7, #8]
 800462e:	f7fc ffc7 	bl	80015c0 <__aeabi_i2f>
 8004632:	1c05      	adds	r5, r0, #0
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685a      	ldr	r2, [r3, #4]
 8004638:	0013      	movs	r3, r2
 800463a:	011b      	lsls	r3, r3, #4
 800463c:	1a9b      	subs	r3, r3, r2
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	0018      	movs	r0, r3
 8004642:	f7fc ffbd 	bl	80015c0 <__aeabi_i2f>
 8004646:	1c03      	adds	r3, r0, #0
 8004648:	1c19      	adds	r1, r3, #0
 800464a:	1c28      	adds	r0, r5, #0
 800464c:	f7fc faba 	bl	8000bc4 <__aeabi_fdiv>
 8004650:	1c03      	adds	r3, r0, #0
 8004652:	1c19      	adds	r1, r3, #0
 8004654:	1c20      	adds	r0, r4, #0
 8004656:	f7fc f92b 	bl	80008b0 <__aeabi_fadd>
 800465a:	1c03      	adds	r3, r0, #0
}
 800465c:	1c18      	adds	r0, r3, #0
 800465e:	46bd      	mov	sp, r7
 8004660:	b004      	add	sp, #16
 8004662:	bdb0      	pop	{r4, r5, r7, pc}
 8004664:	7fc00000 	.word	0x7fc00000

08004668 <json_getSibling>:

/** Get the next sibling of a JSON property that is within a JSON object or array.
  * @param json A valid handler of a json property.
  * @retval The handler of the next sibling if found.
  * @retval Null pointer if the json property is the last one. */
static inline json_t const* json_getSibling( json_t const* json ) {
 8004668:	b580      	push	{r7, lr}
 800466a:	b082      	sub	sp, #8
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
    return json->sibling;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
}
 8004674:	0018      	movs	r0, r3
 8004676:	46bd      	mov	sp, r7
 8004678:	b002      	add	sp, #8
 800467a:	bd80      	pop	{r7, pc}

0800467c <json_getChild>:
/** Get the first property of a JSON object or array.
  * @param json A valid handler of a json property.
  *             Its type must be JSON_OBJ or JSON_ARRAY.
  * @retval The handler of the first property if there is.
  * @retval Null pointer if the json object has not properties. */
static inline json_t const* json_getChild( json_t const* json ) {
 800467c:	b580      	push	{r7, lr}
 800467e:	b082      	sub	sp, #8
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
    return json->u.c.child;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	689b      	ldr	r3, [r3, #8]
}
 8004688:	0018      	movs	r0, r3
 800468a:	46bd      	mov	sp, r7
 800468c:	b002      	add	sp, #8
 800468e:	bd80      	pop	{r7, pc}

08004690 <json_getInteger>:
}

/** Get the value of a json integer property.
  * @param property A valid handler of a json object. Its type must be JSON_INTEGER.
  * @return The value stdint. */
static inline int64_t json_getInteger( json_t const* property ) {
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  return strtoll( property->u.value,(char**)NULL, 10);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	220a      	movs	r2, #10
 800469e:	2100      	movs	r1, #0
 80046a0:	0018      	movs	r0, r3
 80046a2:	f00a f953 	bl	800e94c <strtoll>
 80046a6:	0002      	movs	r2, r0
 80046a8:	000b      	movs	r3, r1
}
 80046aa:	0010      	movs	r0, r2
 80046ac:	0019      	movs	r1, r3
 80046ae:	46bd      	mov	sp, r7
 80046b0:	b002      	add	sp, #8
 80046b2:	bd80      	pop	{r7, pc}

080046b4 <json_getReal>:

/** Get the value of a json real property.
  * @param property A valid handler of a json object. Its type must be JSON_REAL.
  * @return The value. */
static inline double json_getReal( json_t const* property ) {
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b082      	sub	sp, #8
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  return strtod( property->u.value,(char**)NULL );
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	2100      	movs	r1, #0
 80046c2:	0018      	movs	r0, r3
 80046c4:	f009 fffa 	bl	800e6bc <strtod>
 80046c8:	0002      	movs	r2, r0
 80046ca:	000b      	movs	r3, r1
}
 80046cc:	0010      	movs	r0, r2
 80046ce:	0019      	movs	r1, r3
 80046d0:	46bd      	mov	sp, r7
 80046d2:	b002      	add	sp, #8
 80046d4:	bd80      	pop	{r7, pc}
	...

080046d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80046d8:	b5b0      	push	{r4, r5, r7, lr}
 80046da:	b08e      	sub	sp, #56	@ 0x38
 80046dc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80046de:	f004 fa33 	bl	8008b48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80046e2:	f000 fccf 	bl	8005084 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  StructInit();
 80046e6:	f001 f971 	bl	80059cc <StructInit>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80046ea:	f000 feff 	bl	80054ec <MX_GPIO_Init>
  MX_I2C1_Init();
 80046ee:	f000 fd2b 	bl	8005148 <MX_I2C1_Init>
  MX_SPI1_Init();
 80046f2:	f000 fd97 	bl	8005224 <MX_SPI1_Init>
  MX_TIM17_Init();
 80046f6:	f000 fdd5 	bl	80052a4 <MX_TIM17_Init>
  MX_USART1_UART_Init();
 80046fa:	f000 fe5b 	bl	80053b4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80046fe:	f000 fea7 	bl	8005450 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8004702:	f000 fd61 	bl	80051c8 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
	PeripheralInit();
 8004706:	f001 f923 	bl	8005950 <PeripheralInit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	//Before entering the while, fill the screen to clear it once
	fillScreen(BLACK);
 800470a:	2000      	movs	r0, #0
 800470c:	f7ff fb86 	bl	8003e1c <fillScreen>
	while (1) {
		if ((totalFrames) % 200 == 0){
 8004710:	4bbf      	ldr	r3, [pc, #764]	@ (8004a10 <main+0x338>)
 8004712:	881b      	ldrh	r3, [r3, #0]
 8004714:	21c8      	movs	r1, #200	@ 0xc8
 8004716:	0018      	movs	r0, r3
 8004718:	f7fb fda2 	bl	8000260 <__aeabi_uidivmod>
 800471c:	000b      	movs	r3, r1
 800471e:	b29b      	uxth	r3, r3
 8004720:	2b00      	cmp	r3, #0
 8004722:	d104      	bne.n	800472e <main+0x56>
						GetLatLon();
 8004724:	f002 fa90 	bl	8006c48 <GetLatLon>
						checkTime=1;
 8004728:	4bba      	ldr	r3, [pc, #744]	@ (8004a14 <main+0x33c>)
 800472a:	2201      	movs	r2, #1
 800472c:	801a      	strh	r2, [r3, #0]
					}
		game.weeklyGoal = game.dailyGoal*(2*game.evo+1);
 800472e:	4aba      	ldr	r2, [pc, #744]	@ (8004a18 <main+0x340>)
 8004730:	2392      	movs	r3, #146	@ 0x92
 8004732:	005b      	lsls	r3, r3, #1
 8004734:	58d3      	ldr	r3, [r2, r3]
 8004736:	4ab8      	ldr	r2, [pc, #736]	@ (8004a18 <main+0x340>)
 8004738:	7c12      	ldrb	r2, [r2, #16]
 800473a:	0052      	lsls	r2, r2, #1
 800473c:	3201      	adds	r2, #1
 800473e:	435a      	muls	r2, r3
 8004740:	0011      	movs	r1, r2
 8004742:	4ab5      	ldr	r2, [pc, #724]	@ (8004a18 <main+0x340>)
 8004744:	2394      	movs	r3, #148	@ 0x94
 8004746:	005b      	lsls	r3, r3, #1
 8004748:	50d1      	str	r1, [r2, r3]
		_ADXL343_ReadReg8(0x15, &steps, 2);
 800474a:	4bb4      	ldr	r3, [pc, #720]	@ (8004a1c <main+0x344>)
 800474c:	2202      	movs	r2, #2
 800474e:	0019      	movs	r1, r3
 8004750:	2015      	movs	r0, #21
 8004752:	f001 ff1f 	bl	8006594 <_ADXL343_ReadReg8>

		//SendData();
		//ReceiveData();
		//_ADXL343_ReadReg8(0x00, &steps, 1);
		if (CheckExp(game.dailyGoal, game.stepsToday) == 1) {
 8004756:	4ab0      	ldr	r2, [pc, #704]	@ (8004a18 <main+0x340>)
 8004758:	2392      	movs	r3, #146	@ 0x92
 800475a:	005b      	lsls	r3, r3, #1
 800475c:	58d3      	ldr	r3, [r2, r3]
 800475e:	0018      	movs	r0, r3
 8004760:	4aad      	ldr	r2, [pc, #692]	@ (8004a18 <main+0x340>)
 8004762:	2390      	movs	r3, #144	@ 0x90
 8004764:	005b      	lsls	r3, r3, #1
 8004766:	58d3      	ldr	r3, [r2, r3]
 8004768:	0019      	movs	r1, r3
 800476a:	f002 fa29 	bl	8006bc0 <CheckExp>
 800476e:	0003      	movs	r3, r0
 8004770:	2b01      	cmp	r3, #1
 8004772:	d107      	bne.n	8004784 <main+0xac>
			game.mood += moodIncrementUp;
 8004774:	4ba8      	ldr	r3, [pc, #672]	@ (8004a18 <main+0x340>)
 8004776:	7c5a      	ldrb	r2, [r3, #17]
 8004778:	2301      	movs	r3, #1
 800477a:	b2db      	uxtb	r3, r3
 800477c:	18d3      	adds	r3, r2, r3
 800477e:	b2da      	uxtb	r2, r3
 8004780:	4ba5      	ldr	r3, [pc, #660]	@ (8004a18 <main+0x340>)
 8004782:	745a      	strb	r2, [r3, #17]
			//game.stepsToday = 0;
		}
		if(CheckExp(game.weeklyGoal, game.weeklySteps)==1) {
 8004784:	4aa4      	ldr	r2, [pc, #656]	@ (8004a18 <main+0x340>)
 8004786:	2394      	movs	r3, #148	@ 0x94
 8004788:	005b      	lsls	r3, r3, #1
 800478a:	58d3      	ldr	r3, [r2, r3]
 800478c:	0018      	movs	r0, r3
 800478e:	4aa2      	ldr	r2, [pc, #648]	@ (8004a18 <main+0x340>)
 8004790:	238e      	movs	r3, #142	@ 0x8e
 8004792:	005b      	lsls	r3, r3, #1
 8004794:	58d3      	ldr	r3, [r2, r3]
 8004796:	0019      	movs	r1, r3
 8004798:	f002 fa12 	bl	8006bc0 <CheckExp>
 800479c:	0003      	movs	r3, r0
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d101      	bne.n	80047a6 <main+0xce>
			Evolve();
 80047a2:	f001 fa1b 	bl	8005bdc <Evolve>
		}

		if (checkTime) {
 80047a6:	4b9b      	ldr	r3, [pc, #620]	@ (8004a14 <main+0x33c>)
 80047a8:	881b      	ldrh	r3, [r3, #0]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d045      	beq.n	800483a <main+0x162>
			checkTime=0;
 80047ae:	4b99      	ldr	r3, [pc, #612]	@ (8004a14 <main+0x33c>)
 80047b0:	2200      	movs	r2, #0
 80047b2:	801a      	strh	r2, [r3, #0]
                  			FlashWrite();
 80047b4:	f001 fa4c 	bl	8005c50 <FlashWrite>
			if (((game.time.minutes % dayLength) == 0)
 80047b8:	4b97      	ldr	r3, [pc, #604]	@ (8004a18 <main+0x340>)
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	2204      	movs	r2, #4
 80047be:	0011      	movs	r1, r2
 80047c0:	0018      	movs	r0, r3
 80047c2:	f7fb fe37 	bl	8000434 <__aeabi_idivmod>
 80047c6:	1e0b      	subs	r3, r1, #0
 80047c8:	d122      	bne.n	8004810 <main+0x138>
					&& game.time.minutes > 0) {
 80047ca:	4b93      	ldr	r3, [pc, #588]	@ (8004a18 <main+0x340>)
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	dd1e      	ble.n	8004810 <main+0x138>
				if (CheckExp(game.dailyGoal, game.stepsToday) == -1)
 80047d2:	4a91      	ldr	r2, [pc, #580]	@ (8004a18 <main+0x340>)
 80047d4:	2392      	movs	r3, #146	@ 0x92
 80047d6:	005b      	lsls	r3, r3, #1
 80047d8:	58d3      	ldr	r3, [r2, r3]
 80047da:	0018      	movs	r0, r3
 80047dc:	4a8e      	ldr	r2, [pc, #568]	@ (8004a18 <main+0x340>)
 80047de:	2390      	movs	r3, #144	@ 0x90
 80047e0:	005b      	lsls	r3, r3, #1
 80047e2:	58d3      	ldr	r3, [r2, r3]
 80047e4:	0019      	movs	r1, r3
 80047e6:	f002 f9eb 	bl	8006bc0 <CheckExp>
 80047ea:	0003      	movs	r3, r0
 80047ec:	3301      	adds	r3, #1
 80047ee:	d107      	bne.n	8004800 <main+0x128>
					{
					game.mood -= moodIncrementDown;
 80047f0:	4b89      	ldr	r3, [pc, #548]	@ (8004a18 <main+0x340>)
 80047f2:	7c5a      	ldrb	r2, [r3, #17]
 80047f4:	2301      	movs	r3, #1
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	b2da      	uxtb	r2, r3
 80047fc:	4b86      	ldr	r3, [pc, #536]	@ (8004a18 <main+0x340>)
 80047fe:	745a      	strb	r2, [r3, #17]
					if(game.mood < 0)
						game.mood = 0;
					}
				game.stepsToday = 0;
 8004800:	4a85      	ldr	r2, [pc, #532]	@ (8004a18 <main+0x340>)
 8004802:	2390      	movs	r3, #144	@ 0x90
 8004804:	005b      	lsls	r3, r3, #1
 8004806:	2100      	movs	r1, #0
 8004808:	50d1      	str	r1, [r2, r3]
				//memset(&game.positions, 0, sizeof(game.positions));
				//game.numLocations = 0;
				checkTime = 0;
 800480a:	4b82      	ldr	r3, [pc, #520]	@ (8004a14 <main+0x33c>)
 800480c:	2200      	movs	r2, #0
 800480e:	801a      	strh	r2, [r3, #0]
			}

			if (((game.time.minutes % weekLength) == 0)
 8004810:	4b81      	ldr	r3, [pc, #516]	@ (8004a18 <main+0x340>)
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	22a8      	movs	r2, #168	@ 0xa8
 8004816:	0011      	movs	r1, r2
 8004818:	0018      	movs	r0, r3
 800481a:	f7fb fe0b 	bl	8000434 <__aeabi_idivmod>
 800481e:	1e0b      	subs	r3, r1, #0
 8004820:	d10b      	bne.n	800483a <main+0x162>
					&& game.time.minutes > 0) {
 8004822:	4b7d      	ldr	r3, [pc, #500]	@ (8004a18 <main+0x340>)
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	2b00      	cmp	r3, #0
 8004828:	dd07      	ble.n	800483a <main+0x162>
				game.weeklySteps = 0;
 800482a:	4a7b      	ldr	r2, [pc, #492]	@ (8004a18 <main+0x340>)
 800482c:	238e      	movs	r3, #142	@ 0x8e
 800482e:	005b      	lsls	r3, r3, #1
 8004830:	2100      	movs	r1, #0
 8004832:	50d1      	str	r1, [r2, r3]
				checkTime = 0;
 8004834:	4b77      	ldr	r3, [pc, #476]	@ (8004a14 <main+0x33c>)
 8004836:	2200      	movs	r2, #0
 8004838:	801a      	strh	r2, [r3, #0]
			}
		}
		if (steps != 0) {
 800483a:	4b78      	ldr	r3, [pc, #480]	@ (8004a1c <main+0x344>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d027      	beq.n	8004892 <main+0x1ba>
			game.stepsToday += steps;
 8004842:	4a75      	ldr	r2, [pc, #468]	@ (8004a18 <main+0x340>)
 8004844:	2390      	movs	r3, #144	@ 0x90
 8004846:	005b      	lsls	r3, r3, #1
 8004848:	58d2      	ldr	r2, [r2, r3]
 800484a:	4b74      	ldr	r3, [pc, #464]	@ (8004a1c <main+0x344>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	18d1      	adds	r1, r2, r3
 8004850:	4a71      	ldr	r2, [pc, #452]	@ (8004a18 <main+0x340>)
 8004852:	2390      	movs	r3, #144	@ 0x90
 8004854:	005b      	lsls	r3, r3, #1
 8004856:	50d1      	str	r1, [r2, r3]
			game.weeklySteps += steps;
 8004858:	4a6f      	ldr	r2, [pc, #444]	@ (8004a18 <main+0x340>)
 800485a:	238e      	movs	r3, #142	@ 0x8e
 800485c:	005b      	lsls	r3, r3, #1
 800485e:	58d2      	ldr	r2, [r2, r3]
 8004860:	4b6e      	ldr	r3, [pc, #440]	@ (8004a1c <main+0x344>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	18d1      	adds	r1, r2, r3
 8004866:	4a6c      	ldr	r2, [pc, #432]	@ (8004a18 <main+0x340>)
 8004868:	238e      	movs	r3, #142	@ 0x8e
 800486a:	005b      	lsls	r3, r3, #1
 800486c:	50d1      	str	r1, [r2, r3]
			game.allSteps += steps;
 800486e:	4a6a      	ldr	r2, [pc, #424]	@ (8004a18 <main+0x340>)
 8004870:	238c      	movs	r3, #140	@ 0x8c
 8004872:	005b      	lsls	r3, r3, #1
 8004874:	58d2      	ldr	r2, [r2, r3]
 8004876:	4b69      	ldr	r3, [pc, #420]	@ (8004a1c <main+0x344>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	18d1      	adds	r1, r2, r3
 800487c:	4a66      	ldr	r2, [pc, #408]	@ (8004a18 <main+0x340>)
 800487e:	238c      	movs	r3, #140	@ 0x8c
 8004880:	005b      	lsls	r3, r3, #1
 8004882:	50d1      	str	r1, [r2, r3]
			steps = 0;
 8004884:	4b65      	ldr	r3, [pc, #404]	@ (8004a1c <main+0x344>)
 8004886:	2200      	movs	r2, #0
 8004888:	601a      	str	r2, [r3, #0]
			_ADXL343_WriteReg8(0x7E, 0xB1);
 800488a:	21b1      	movs	r1, #177	@ 0xb1
 800488c:	207e      	movs	r0, #126	@ 0x7e
 800488e:	f001 feb3 	bl	80065f8 <_ADXL343_WriteReg8>
		}
		++updateScreen;
 8004892:	4b63      	ldr	r3, [pc, #396]	@ (8004a20 <main+0x348>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	1c5a      	adds	r2, r3, #1
 8004898:	4b61      	ldr	r3, [pc, #388]	@ (8004a20 <main+0x348>)
 800489a:	601a      	str	r2, [r3, #0]
		//SendData();
		//HAL_UART_Transmit(&huart2, "hello", 5, 100);
		switch (currentMenu) {
 800489c:	4b61      	ldr	r3, [pc, #388]	@ (8004a24 <main+0x34c>)
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	2b04      	cmp	r3, #4
 80048a2:	d100      	bne.n	80048a6 <main+0x1ce>
 80048a4:	e254      	b.n	8004d50 <main+0x678>
 80048a6:	dd01      	ble.n	80048ac <main+0x1d4>
 80048a8:	f000 fbc2 	bl	8005030 <main+0x958>
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d100      	bne.n	80048b2 <main+0x1da>
 80048b0:	e0cc      	b.n	8004a4c <main+0x374>
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d001      	beq.n	80048ba <main+0x1e2>
 80048b6:	f000 fbbb 	bl	8005030 <main+0x958>
		case Main:


			if (updateScreen >= 3) {
 80048ba:	4b59      	ldr	r3, [pc, #356]	@ (8004a20 <main+0x348>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2b02      	cmp	r3, #2
 80048c0:	d961      	bls.n	8004986 <main+0x2ae>
				updateScreen = 0;
 80048c2:	4b57      	ldr	r3, [pc, #348]	@ (8004a20 <main+0x348>)
 80048c4:	2200      	movs	r2, #0
 80048c6:	601a      	str	r2, [r3, #0]

				AnimateCharacter(imgPalette);
 80048c8:	4b57      	ldr	r3, [pc, #348]	@ (8004a28 <main+0x350>)
 80048ca:	0018      	movs	r0, r3
 80048cc:	f001 fbee 	bl	80060ac <AnimateCharacter>
				//Update steps
				drawString(0, 150, "-SILLY LITTLE GUY-", WHITE, BLACK, 1, 1);
 80048d0:	2301      	movs	r3, #1
 80048d2:	425b      	negs	r3, r3
 80048d4:	4a55      	ldr	r2, [pc, #340]	@ (8004a2c <main+0x354>)
 80048d6:	2101      	movs	r1, #1
 80048d8:	9102      	str	r1, [sp, #8]
 80048da:	2101      	movs	r1, #1
 80048dc:	9101      	str	r1, [sp, #4]
 80048de:	2100      	movs	r1, #0
 80048e0:	9100      	str	r1, [sp, #0]
 80048e2:	2196      	movs	r1, #150	@ 0x96
 80048e4:	2000      	movs	r0, #0
 80048e6:	f7ff f954 	bl	8003b92 <drawString>
				sprintf(buffer2, "Steps: %d ", game.stepsToday);
 80048ea:	4a4b      	ldr	r2, [pc, #300]	@ (8004a18 <main+0x340>)
 80048ec:	2390      	movs	r3, #144	@ 0x90
 80048ee:	005b      	lsls	r3, r3, #1
 80048f0:	58d2      	ldr	r2, [r2, r3]
 80048f2:	494f      	ldr	r1, [pc, #316]	@ (8004a30 <main+0x358>)
 80048f4:	4b4f      	ldr	r3, [pc, #316]	@ (8004a34 <main+0x35c>)
 80048f6:	0018      	movs	r0, r3
 80048f8:	f00a f8f8 	bl	800eaec <siprintf>
				drawString(0, 0, buffer2, WHITE, BLACK, 1, 1);
 80048fc:	2301      	movs	r3, #1
 80048fe:	425b      	negs	r3, r3
 8004900:	4a4c      	ldr	r2, [pc, #304]	@ (8004a34 <main+0x35c>)
 8004902:	2101      	movs	r1, #1
 8004904:	9102      	str	r1, [sp, #8]
 8004906:	2101      	movs	r1, #1
 8004908:	9101      	str	r1, [sp, #4]
 800490a:	2100      	movs	r1, #0
 800490c:	9100      	str	r1, [sp, #0]
 800490e:	2100      	movs	r1, #0
 8004910:	2000      	movs	r0, #0
 8004912:	f7ff f93e 	bl	8003b92 <drawString>
				sprintf(buffer2, "Exp: %d", (int) ((float) game.weeklySteps* (1.0f + ((float) game.numLocations) / expDivisor)));
 8004916:	4a40      	ldr	r2, [pc, #256]	@ (8004a18 <main+0x340>)
 8004918:	238e      	movs	r3, #142	@ 0x8e
 800491a:	005b      	lsls	r3, r3, #1
 800491c:	58d3      	ldr	r3, [r2, r3]
 800491e:	0018      	movs	r0, r3
 8004920:	f7fc fe9a 	bl	8001658 <__aeabi_ui2f>
 8004924:	1c04      	adds	r4, r0, #0
 8004926:	4b3c      	ldr	r3, [pc, #240]	@ (8004a18 <main+0x340>)
 8004928:	695b      	ldr	r3, [r3, #20]
 800492a:	0018      	movs	r0, r3
 800492c:	f7fc fe94 	bl	8001658 <__aeabi_ui2f>
 8004930:	1c03      	adds	r3, r0, #0
 8004932:	2281      	movs	r2, #129	@ 0x81
 8004934:	05d2      	lsls	r2, r2, #23
 8004936:	1c11      	adds	r1, r2, #0
 8004938:	1c18      	adds	r0, r3, #0
 800493a:	f7fc f943 	bl	8000bc4 <__aeabi_fdiv>
 800493e:	1c03      	adds	r3, r0, #0
 8004940:	21fe      	movs	r1, #254	@ 0xfe
 8004942:	0589      	lsls	r1, r1, #22
 8004944:	1c18      	adds	r0, r3, #0
 8004946:	f7fb ffb3 	bl	80008b0 <__aeabi_fadd>
 800494a:	1c03      	adds	r3, r0, #0
 800494c:	1c19      	adds	r1, r3, #0
 800494e:	1c20      	adds	r0, r4, #0
 8004950:	f7fc fb1e 	bl	8000f90 <__aeabi_fmul>
 8004954:	1c03      	adds	r3, r0, #0
 8004956:	1c18      	adds	r0, r3, #0
 8004958:	f7fc fe12 	bl	8001580 <__aeabi_f2iz>
 800495c:	0002      	movs	r2, r0
 800495e:	4936      	ldr	r1, [pc, #216]	@ (8004a38 <main+0x360>)
 8004960:	4b34      	ldr	r3, [pc, #208]	@ (8004a34 <main+0x35c>)
 8004962:	0018      	movs	r0, r3
 8004964:	f00a f8c2 	bl	800eaec <siprintf>
				drawString(0, 130, buffer2, WHITE, BLACK, 1, 1);
 8004968:	2301      	movs	r3, #1
 800496a:	425b      	negs	r3, r3
 800496c:	4a31      	ldr	r2, [pc, #196]	@ (8004a34 <main+0x35c>)
 800496e:	2101      	movs	r1, #1
 8004970:	9102      	str	r1, [sp, #8]
 8004972:	2101      	movs	r1, #1
 8004974:	9101      	str	r1, [sp, #4]
 8004976:	2100      	movs	r1, #0
 8004978:	9100      	str	r1, [sp, #0]
 800497a:	2182      	movs	r1, #130	@ 0x82
 800497c:	2000      	movs	r0, #0
 800497e:	f7ff f908 	bl	8003b92 <drawString>
				Emote();
 8004982:	f002 faa9 	bl	8006ed8 <Emote>
			}

			//Interact with the SLG
			if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1) == GPIO_PIN_SET) {
 8004986:	4b2d      	ldr	r3, [pc, #180]	@ (8004a3c <main+0x364>)
 8004988:	2102      	movs	r1, #2
 800498a:	0018      	movs	r0, r3
 800498c:	f004 fd98 	bl	80094c0 <HAL_GPIO_ReadPin>
 8004990:	0003      	movs	r3, r0
 8004992:	2b01      	cmp	r3, #1
 8004994:	d101      	bne.n	800499a <main+0x2c2>
				//if(game.weeklySteps == game.weeklyGoal)
				//{
					//Evolve();
				//}
				//Evolve();
				FlashErase();
 8004996:	f001 f93d 	bl	8005c14 <FlashErase>
				//FlashWrite();
				//StructInit();
			}

			//Change current Menu
			if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_SET) {
 800499a:	4b29      	ldr	r3, [pc, #164]	@ (8004a40 <main+0x368>)
 800499c:	2104      	movs	r1, #4
 800499e:	0018      	movs	r0, r3
 80049a0:	f004 fd8e 	bl	80094c0 <HAL_GPIO_ReadPin>
 80049a4:	0003      	movs	r3, r0
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d111      	bne.n	80049ce <main+0x2f6>
				effect = MenuBeep;
 80049aa:	4b26      	ldr	r3, [pc, #152]	@ (8004a44 <main+0x36c>)
 80049ac:	2200      	movs	r2, #0
 80049ae:	701a      	strb	r2, [r3, #0]
				PlayEffect(effect);
 80049b0:	4b24      	ldr	r3, [pc, #144]	@ (8004a44 <main+0x36c>)
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	0018      	movs	r0, r3
 80049b6:	f000 fe67 	bl	8005688 <PlayEffect>

				currentMenu = Settings;
 80049ba:	4b1a      	ldr	r3, [pc, #104]	@ (8004a24 <main+0x34c>)
 80049bc:	2204      	movs	r2, #4
 80049be:	701a      	strb	r2, [r3, #0]
				canChange = 0;
 80049c0:	4b21      	ldr	r3, [pc, #132]	@ (8004a48 <main+0x370>)
 80049c2:	2200      	movs	r2, #0
 80049c4:	701a      	strb	r2, [r3, #0]
				fillScreen(BLACK);
 80049c6:	2000      	movs	r0, #0
 80049c8:	f7ff fa28 	bl	8003e1c <fillScreen>
				canChange = 0;
				fillScreen(BLACK);
			} else
				canChange = 1;

			break;
 80049cc:	e330      	b.n	8005030 <main+0x958>
			} else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_SET) {
 80049ce:	2380      	movs	r3, #128	@ 0x80
 80049d0:	011a      	lsls	r2, r3, #4
 80049d2:	23a0      	movs	r3, #160	@ 0xa0
 80049d4:	05db      	lsls	r3, r3, #23
 80049d6:	0011      	movs	r1, r2
 80049d8:	0018      	movs	r0, r3
 80049da:	f004 fd71 	bl	80094c0 <HAL_GPIO_ReadPin>
 80049de:	0003      	movs	r3, r0
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d111      	bne.n	8004a08 <main+0x330>
				effect = MenuBeep;
 80049e4:	4b17      	ldr	r3, [pc, #92]	@ (8004a44 <main+0x36c>)
 80049e6:	2200      	movs	r2, #0
 80049e8:	701a      	strb	r2, [r3, #0]
				PlayEffect(effect);
 80049ea:	4b16      	ldr	r3, [pc, #88]	@ (8004a44 <main+0x36c>)
 80049ec:	781b      	ldrb	r3, [r3, #0]
 80049ee:	0018      	movs	r0, r3
 80049f0:	f000 fe4a 	bl	8005688 <PlayEffect>
				currentMenu = StatsDisplay;
 80049f4:	4b0b      	ldr	r3, [pc, #44]	@ (8004a24 <main+0x34c>)
 80049f6:	2200      	movs	r2, #0
 80049f8:	701a      	strb	r2, [r3, #0]
				canChange = 0;
 80049fa:	4b13      	ldr	r3, [pc, #76]	@ (8004a48 <main+0x370>)
 80049fc:	2200      	movs	r2, #0
 80049fe:	701a      	strb	r2, [r3, #0]
				fillScreen(BLACK);
 8004a00:	2000      	movs	r0, #0
 8004a02:	f7ff fa0b 	bl	8003e1c <fillScreen>
			break;
 8004a06:	e313      	b.n	8005030 <main+0x958>
				canChange = 1;
 8004a08:	4b0f      	ldr	r3, [pc, #60]	@ (8004a48 <main+0x370>)
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	701a      	strb	r2, [r3, #0]
			break;
 8004a0e:	e30f      	b.n	8005030 <main+0x958>
 8004a10:	2000044c 	.word	0x2000044c
 8004a14:	20000000 	.word	0x20000000
 8004a18:	200002a8 	.word	0x200002a8
 8004a1c:	2000127c 	.word	0x2000127c
 8004a20:	2000029c 	.word	0x2000029c
 8004a24:	20000002 	.word	0x20000002
 8004a28:	08011b9c 	.word	0x08011b9c
 8004a2c:	08011298 	.word	0x08011298
 8004a30:	080112ac 	.word	0x080112ac
 8004a34:	20001218 	.word	0x20001218
 8004a38:	080112b8 	.word	0x080112b8
 8004a3c:	50000800 	.word	0x50000800
 8004a40:	50000400 	.word	0x50000400
 8004a44:	20000298 	.word	0x20000298
 8004a48:	20000003 	.word	0x20000003
		case StatsDisplay:

			if (updateScreen >= 5) {
 8004a4c:	4bec      	ldr	r3, [pc, #944]	@ (8004e00 <main+0x728>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	2b04      	cmp	r3, #4
 8004a52:	d800      	bhi.n	8004a56 <main+0x37e>
 8004a54:	e15e      	b.n	8004d14 <main+0x63c>
				//fillScreen(BLACK);

				drawString(0, 150, "STEPS", WHITE, BLACK, 1, 1);
 8004a56:	2301      	movs	r3, #1
 8004a58:	425b      	negs	r3, r3
 8004a5a:	4aea      	ldr	r2, [pc, #936]	@ (8004e04 <main+0x72c>)
 8004a5c:	2101      	movs	r1, #1
 8004a5e:	9102      	str	r1, [sp, #8]
 8004a60:	2101      	movs	r1, #1
 8004a62:	9101      	str	r1, [sp, #4]
 8004a64:	2100      	movs	r1, #0
 8004a66:	9100      	str	r1, [sp, #0]
 8004a68:	2196      	movs	r1, #150	@ 0x96
 8004a6a:	2000      	movs	r0, #0
 8004a6c:	f7ff f891 	bl	8003b92 <drawString>
				sprintf(buffer2, "Today: %d ", game.stepsToday);
 8004a70:	4ae5      	ldr	r2, [pc, #916]	@ (8004e08 <main+0x730>)
 8004a72:	2390      	movs	r3, #144	@ 0x90
 8004a74:	005b      	lsls	r3, r3, #1
 8004a76:	58d2      	ldr	r2, [r2, r3]
 8004a78:	49e4      	ldr	r1, [pc, #912]	@ (8004e0c <main+0x734>)
 8004a7a:	4be5      	ldr	r3, [pc, #916]	@ (8004e10 <main+0x738>)
 8004a7c:	0018      	movs	r0, r3
 8004a7e:	f00a f835 	bl	800eaec <siprintf>
				drawString(0, 140, buffer2, WHITE, BLACK, 1, 1);
 8004a82:	2301      	movs	r3, #1
 8004a84:	425b      	negs	r3, r3
 8004a86:	4ae2      	ldr	r2, [pc, #904]	@ (8004e10 <main+0x738>)
 8004a88:	2101      	movs	r1, #1
 8004a8a:	9102      	str	r1, [sp, #8]
 8004a8c:	2101      	movs	r1, #1
 8004a8e:	9101      	str	r1, [sp, #4]
 8004a90:	2100      	movs	r1, #0
 8004a92:	9100      	str	r1, [sp, #0]
 8004a94:	218c      	movs	r1, #140	@ 0x8c
 8004a96:	2000      	movs	r0, #0
 8004a98:	f7ff f87b 	bl	8003b92 <drawString>
				sprintf(buffer2, "This week: %d ", game.weeklySteps);
 8004a9c:	4ada      	ldr	r2, [pc, #872]	@ (8004e08 <main+0x730>)
 8004a9e:	238e      	movs	r3, #142	@ 0x8e
 8004aa0:	005b      	lsls	r3, r3, #1
 8004aa2:	58d2      	ldr	r2, [r2, r3]
 8004aa4:	49db      	ldr	r1, [pc, #876]	@ (8004e14 <main+0x73c>)
 8004aa6:	4bda      	ldr	r3, [pc, #872]	@ (8004e10 <main+0x738>)
 8004aa8:	0018      	movs	r0, r3
 8004aaa:	f00a f81f 	bl	800eaec <siprintf>
				drawString(0, 130, buffer2, WHITE, BLACK, 1, 1);
 8004aae:	2301      	movs	r3, #1
 8004ab0:	425b      	negs	r3, r3
 8004ab2:	4ad7      	ldr	r2, [pc, #860]	@ (8004e10 <main+0x738>)
 8004ab4:	2101      	movs	r1, #1
 8004ab6:	9102      	str	r1, [sp, #8]
 8004ab8:	2101      	movs	r1, #1
 8004aba:	9101      	str	r1, [sp, #4]
 8004abc:	2100      	movs	r1, #0
 8004abe:	9100      	str	r1, [sp, #0]
 8004ac0:	2182      	movs	r1, #130	@ 0x82
 8004ac2:	2000      	movs	r0, #0
 8004ac4:	f7ff f865 	bl	8003b92 <drawString>
				sprintf(buffer2, "All time: %d ", game.allSteps);
 8004ac8:	4acf      	ldr	r2, [pc, #828]	@ (8004e08 <main+0x730>)
 8004aca:	238c      	movs	r3, #140	@ 0x8c
 8004acc:	005b      	lsls	r3, r3, #1
 8004ace:	58d2      	ldr	r2, [r2, r3]
 8004ad0:	49d1      	ldr	r1, [pc, #836]	@ (8004e18 <main+0x740>)
 8004ad2:	4bcf      	ldr	r3, [pc, #828]	@ (8004e10 <main+0x738>)
 8004ad4:	0018      	movs	r0, r3
 8004ad6:	f00a f809 	bl	800eaec <siprintf>
				drawString(0, 120, buffer2, WHITE, BLACK, 1, 1);
 8004ada:	2301      	movs	r3, #1
 8004adc:	425b      	negs	r3, r3
 8004ade:	4acc      	ldr	r2, [pc, #816]	@ (8004e10 <main+0x738>)
 8004ae0:	2101      	movs	r1, #1
 8004ae2:	9102      	str	r1, [sp, #8]
 8004ae4:	2101      	movs	r1, #1
 8004ae6:	9101      	str	r1, [sp, #4]
 8004ae8:	2100      	movs	r1, #0
 8004aea:	9100      	str	r1, [sp, #0]
 8004aec:	2178      	movs	r1, #120	@ 0x78
 8004aee:	2000      	movs	r0, #0
 8004af0:	f7ff f84f 	bl	8003b92 <drawString>
				drawString(0, 110, "POSITIONS", WHITE, BLACK, 1, 1);
 8004af4:	2301      	movs	r3, #1
 8004af6:	425b      	negs	r3, r3
 8004af8:	4ac8      	ldr	r2, [pc, #800]	@ (8004e1c <main+0x744>)
 8004afa:	2101      	movs	r1, #1
 8004afc:	9102      	str	r1, [sp, #8]
 8004afe:	2101      	movs	r1, #1
 8004b00:	9101      	str	r1, [sp, #4]
 8004b02:	2100      	movs	r1, #0
 8004b04:	9100      	str	r1, [sp, #0]
 8004b06:	216e      	movs	r1, #110	@ 0x6e
 8004b08:	2000      	movs	r0, #0
 8004b0a:	f7ff f842 	bl	8003b92 <drawString>
				sprintf(buffer2, "Count/Mult: %d", game.numLocations);
 8004b0e:	4bbe      	ldr	r3, [pc, #760]	@ (8004e08 <main+0x730>)
 8004b10:	695a      	ldr	r2, [r3, #20]
 8004b12:	49c3      	ldr	r1, [pc, #780]	@ (8004e20 <main+0x748>)
 8004b14:	4bbe      	ldr	r3, [pc, #760]	@ (8004e10 <main+0x738>)
 8004b16:	0018      	movs	r0, r3
 8004b18:	f009 ffe8 	bl	800eaec <siprintf>
				drawString(0, 100, buffer2, WHITE, BLACK, 1, 1);
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	425b      	negs	r3, r3
 8004b20:	4abb      	ldr	r2, [pc, #748]	@ (8004e10 <main+0x738>)
 8004b22:	2101      	movs	r1, #1
 8004b24:	9102      	str	r1, [sp, #8]
 8004b26:	2101      	movs	r1, #1
 8004b28:	9101      	str	r1, [sp, #4]
 8004b2a:	2100      	movs	r1, #0
 8004b2c:	9100      	str	r1, [sp, #0]
 8004b2e:	2164      	movs	r1, #100	@ 0x64
 8004b30:	2000      	movs	r0, #0
 8004b32:	f7ff f82e 	bl	8003b92 <drawString>
				sprintf(buffer2, "Old Lat: %d.%d",
						(int) (game.positions[game.numLocations - 1].lat),
 8004b36:	4bb4      	ldr	r3, [pc, #720]	@ (8004e08 <main+0x730>)
 8004b38:	695b      	ldr	r3, [r3, #20]
 8004b3a:	1e5a      	subs	r2, r3, #1
 8004b3c:	4bb2      	ldr	r3, [pc, #712]	@ (8004e08 <main+0x730>)
 8004b3e:	3203      	adds	r2, #3
 8004b40:	00d2      	lsls	r2, r2, #3
 8004b42:	58d3      	ldr	r3, [r2, r3]
				sprintf(buffer2, "Old Lat: %d.%d",
 8004b44:	1c18      	adds	r0, r3, #0
 8004b46:	f7fc fd1b 	bl	8001580 <__aeabi_f2iz>
 8004b4a:	0004      	movs	r4, r0
						abs(
								(int) (((game.positions[game.numLocations - 1].lat)
 8004b4c:	4bae      	ldr	r3, [pc, #696]	@ (8004e08 <main+0x730>)
 8004b4e:	695b      	ldr	r3, [r3, #20]
 8004b50:	1e5a      	subs	r2, r3, #1
 8004b52:	4bad      	ldr	r3, [pc, #692]	@ (8004e08 <main+0x730>)
 8004b54:	3203      	adds	r2, #3
 8004b56:	00d2      	lsls	r2, r2, #3
 8004b58:	58d3      	ldr	r3, [r2, r3]
										* 10000)) % 10000));
 8004b5a:	49b2      	ldr	r1, [pc, #712]	@ (8004e24 <main+0x74c>)
 8004b5c:	1c18      	adds	r0, r3, #0
 8004b5e:	f7fc fa17 	bl	8000f90 <__aeabi_fmul>
 8004b62:	1c03      	adds	r3, r0, #0
								(int) (((game.positions[game.numLocations - 1].lat)
 8004b64:	1c18      	adds	r0, r3, #0
 8004b66:	f7fc fd0b 	bl	8001580 <__aeabi_f2iz>
 8004b6a:	0003      	movs	r3, r0
										* 10000)) % 10000));
 8004b6c:	49ae      	ldr	r1, [pc, #696]	@ (8004e28 <main+0x750>)
 8004b6e:	0018      	movs	r0, r3
 8004b70:	f7fb fc60 	bl	8000434 <__aeabi_idivmod>
 8004b74:	000b      	movs	r3, r1
				sprintf(buffer2, "Old Lat: %d.%d",
 8004b76:	17da      	asrs	r2, r3, #31
 8004b78:	189b      	adds	r3, r3, r2
 8004b7a:	4053      	eors	r3, r2
 8004b7c:	49ab      	ldr	r1, [pc, #684]	@ (8004e2c <main+0x754>)
 8004b7e:	48a4      	ldr	r0, [pc, #656]	@ (8004e10 <main+0x738>)
 8004b80:	0022      	movs	r2, r4
 8004b82:	f009 ffb3 	bl	800eaec <siprintf>
				drawString(0, 90, buffer2, WHITE, BLACK, 1, 1);
 8004b86:	2301      	movs	r3, #1
 8004b88:	425b      	negs	r3, r3
 8004b8a:	4aa1      	ldr	r2, [pc, #644]	@ (8004e10 <main+0x738>)
 8004b8c:	2101      	movs	r1, #1
 8004b8e:	9102      	str	r1, [sp, #8]
 8004b90:	2101      	movs	r1, #1
 8004b92:	9101      	str	r1, [sp, #4]
 8004b94:	2100      	movs	r1, #0
 8004b96:	9100      	str	r1, [sp, #0]
 8004b98:	215a      	movs	r1, #90	@ 0x5a
 8004b9a:	2000      	movs	r0, #0
 8004b9c:	f7fe fff9 	bl	8003b92 <drawString>
				sprintf(buffer2, "Old Lon: %d.%d",
						(int) (game.positions[game.numLocations - 1].lon),
 8004ba0:	4b99      	ldr	r3, [pc, #612]	@ (8004e08 <main+0x730>)
 8004ba2:	695b      	ldr	r3, [r3, #20]
 8004ba4:	3b01      	subs	r3, #1
 8004ba6:	4a98      	ldr	r2, [pc, #608]	@ (8004e08 <main+0x730>)
 8004ba8:	3303      	adds	r3, #3
 8004baa:	00db      	lsls	r3, r3, #3
 8004bac:	18d3      	adds	r3, r2, r3
 8004bae:	3304      	adds	r3, #4
 8004bb0:	681b      	ldr	r3, [r3, #0]
				sprintf(buffer2, "Old Lon: %d.%d",
 8004bb2:	1c18      	adds	r0, r3, #0
 8004bb4:	f7fc fce4 	bl	8001580 <__aeabi_f2iz>
 8004bb8:	0004      	movs	r4, r0
						abs(
								(int) (((game.positions[game.numLocations - 1].lon)
 8004bba:	4b93      	ldr	r3, [pc, #588]	@ (8004e08 <main+0x730>)
 8004bbc:	695b      	ldr	r3, [r3, #20]
 8004bbe:	3b01      	subs	r3, #1
 8004bc0:	4a91      	ldr	r2, [pc, #580]	@ (8004e08 <main+0x730>)
 8004bc2:	3303      	adds	r3, #3
 8004bc4:	00db      	lsls	r3, r3, #3
 8004bc6:	18d3      	adds	r3, r2, r3
 8004bc8:	3304      	adds	r3, #4
 8004bca:	681b      	ldr	r3, [r3, #0]
										* 10000)) % 10000));
 8004bcc:	4995      	ldr	r1, [pc, #596]	@ (8004e24 <main+0x74c>)
 8004bce:	1c18      	adds	r0, r3, #0
 8004bd0:	f7fc f9de 	bl	8000f90 <__aeabi_fmul>
 8004bd4:	1c03      	adds	r3, r0, #0
								(int) (((game.positions[game.numLocations - 1].lon)
 8004bd6:	1c18      	adds	r0, r3, #0
 8004bd8:	f7fc fcd2 	bl	8001580 <__aeabi_f2iz>
 8004bdc:	0003      	movs	r3, r0
										* 10000)) % 10000));
 8004bde:	4992      	ldr	r1, [pc, #584]	@ (8004e28 <main+0x750>)
 8004be0:	0018      	movs	r0, r3
 8004be2:	f7fb fc27 	bl	8000434 <__aeabi_idivmod>
 8004be6:	000b      	movs	r3, r1
				sprintf(buffer2, "Old Lon: %d.%d",
 8004be8:	17da      	asrs	r2, r3, #31
 8004bea:	189b      	adds	r3, r3, r2
 8004bec:	4053      	eors	r3, r2
 8004bee:	4990      	ldr	r1, [pc, #576]	@ (8004e30 <main+0x758>)
 8004bf0:	4887      	ldr	r0, [pc, #540]	@ (8004e10 <main+0x738>)
 8004bf2:	0022      	movs	r2, r4
 8004bf4:	f009 ff7a 	bl	800eaec <siprintf>
				drawString(0, 80, buffer2, WHITE, BLACK, 1, 1);
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	425b      	negs	r3, r3
 8004bfc:	4a84      	ldr	r2, [pc, #528]	@ (8004e10 <main+0x738>)
 8004bfe:	2101      	movs	r1, #1
 8004c00:	9102      	str	r1, [sp, #8]
 8004c02:	2101      	movs	r1, #1
 8004c04:	9101      	str	r1, [sp, #4]
 8004c06:	2100      	movs	r1, #0
 8004c08:	9100      	str	r1, [sp, #0]
 8004c0a:	2150      	movs	r1, #80	@ 0x50
 8004c0c:	2000      	movs	r0, #0
 8004c0e:	f7fe ffc0 	bl	8003b92 <drawString>
				if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1) == GPIO_PIN_SET) {
 8004c12:	4b88      	ldr	r3, [pc, #544]	@ (8004e34 <main+0x75c>)
 8004c14:	2102      	movs	r1, #2
 8004c16:	0018      	movs	r0, r3
 8004c18:	f004 fc52 	bl	80094c0 <HAL_GPIO_ReadPin>
 8004c1c:	0003      	movs	r3, r0
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d175      	bne.n	8004d0e <main+0x636>
					if(GetJustLatLon().lat<2000.0f){
 8004c22:	003b      	movs	r3, r7
 8004c24:	0018      	movs	r0, r3
 8004c26:	f002 fa13 	bl	8007050 <GetJustLatLon>
 8004c2a:	003b      	movs	r3, r7
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4982      	ldr	r1, [pc, #520]	@ (8004e38 <main+0x760>)
 8004c30:	1c18      	adds	r0, r3, #0
 8004c32:	f7fb fc55 	bl	80004e0 <__aeabi_fcmplt>
 8004c36:	1e03      	subs	r3, r0, #0
 8004c38:	d069      	beq.n	8004d0e <main+0x636>
					sprintf(buffer2, "Lat: %d.%d", (int) (GetJustLatLon().lat),
 8004c3a:	2408      	movs	r4, #8
 8004c3c:	193b      	adds	r3, r7, r4
 8004c3e:	0018      	movs	r0, r3
 8004c40:	f002 fa06 	bl	8007050 <GetJustLatLon>
 8004c44:	193b      	adds	r3, r7, r4
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	1c18      	adds	r0, r3, #0
 8004c4a:	f7fc fc99 	bl	8001580 <__aeabi_f2iz>
 8004c4e:	0004      	movs	r4, r0
							abs(
									((int) ((GetJustLatLon().lat) * 10000))
 8004c50:	2510      	movs	r5, #16
 8004c52:	197b      	adds	r3, r7, r5
 8004c54:	0018      	movs	r0, r3
 8004c56:	f002 f9fb 	bl	8007050 <GetJustLatLon>
 8004c5a:	197b      	adds	r3, r7, r5
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4971      	ldr	r1, [pc, #452]	@ (8004e24 <main+0x74c>)
 8004c60:	1c18      	adds	r0, r3, #0
 8004c62:	f7fc f995 	bl	8000f90 <__aeabi_fmul>
 8004c66:	1c03      	adds	r3, r0, #0
 8004c68:	1c18      	adds	r0, r3, #0
 8004c6a:	f7fc fc89 	bl	8001580 <__aeabi_f2iz>
 8004c6e:	0003      	movs	r3, r0
											% 10000));
 8004c70:	496d      	ldr	r1, [pc, #436]	@ (8004e28 <main+0x750>)
 8004c72:	0018      	movs	r0, r3
 8004c74:	f7fb fbde 	bl	8000434 <__aeabi_idivmod>
 8004c78:	000b      	movs	r3, r1
					sprintf(buffer2, "Lat: %d.%d", (int) (GetJustLatLon().lat),
 8004c7a:	17da      	asrs	r2, r3, #31
 8004c7c:	189b      	adds	r3, r3, r2
 8004c7e:	4053      	eors	r3, r2
 8004c80:	496e      	ldr	r1, [pc, #440]	@ (8004e3c <main+0x764>)
 8004c82:	4863      	ldr	r0, [pc, #396]	@ (8004e10 <main+0x738>)
 8004c84:	0022      	movs	r2, r4
 8004c86:	f009 ff31 	bl	800eaec <siprintf>
					drawString(0, 70, buffer2, WHITE, BLACK, 1, 1);
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	425b      	negs	r3, r3
 8004c8e:	4a60      	ldr	r2, [pc, #384]	@ (8004e10 <main+0x738>)
 8004c90:	2101      	movs	r1, #1
 8004c92:	9102      	str	r1, [sp, #8]
 8004c94:	2101      	movs	r1, #1
 8004c96:	9101      	str	r1, [sp, #4]
 8004c98:	2100      	movs	r1, #0
 8004c9a:	9100      	str	r1, [sp, #0]
 8004c9c:	2146      	movs	r1, #70	@ 0x46
 8004c9e:	2000      	movs	r0, #0
 8004ca0:	f7fe ff77 	bl	8003b92 <drawString>
					sprintf(buffer2, "Lon: %d.%d", (int) (GetJustLatLon().lon),
 8004ca4:	2418      	movs	r4, #24
 8004ca6:	193b      	adds	r3, r7, r4
 8004ca8:	0018      	movs	r0, r3
 8004caa:	f002 f9d1 	bl	8007050 <GetJustLatLon>
 8004cae:	193b      	adds	r3, r7, r4
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	1c18      	adds	r0, r3, #0
 8004cb4:	f7fc fc64 	bl	8001580 <__aeabi_f2iz>
 8004cb8:	0004      	movs	r4, r0
							abs(
									(int) (((GetJustLatLon().lon) * 10000))
 8004cba:	2520      	movs	r5, #32
 8004cbc:	197b      	adds	r3, r7, r5
 8004cbe:	0018      	movs	r0, r3
 8004cc0:	f002 f9c6 	bl	8007050 <GetJustLatLon>
 8004cc4:	197b      	adds	r3, r7, r5
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	4956      	ldr	r1, [pc, #344]	@ (8004e24 <main+0x74c>)
 8004cca:	1c18      	adds	r0, r3, #0
 8004ccc:	f7fc f960 	bl	8000f90 <__aeabi_fmul>
 8004cd0:	1c03      	adds	r3, r0, #0
 8004cd2:	1c18      	adds	r0, r3, #0
 8004cd4:	f7fc fc54 	bl	8001580 <__aeabi_f2iz>
 8004cd8:	0003      	movs	r3, r0
											% 10000));
 8004cda:	4953      	ldr	r1, [pc, #332]	@ (8004e28 <main+0x750>)
 8004cdc:	0018      	movs	r0, r3
 8004cde:	f7fb fba9 	bl	8000434 <__aeabi_idivmod>
 8004ce2:	000b      	movs	r3, r1
					sprintf(buffer2, "Lon: %d.%d", (int) (GetJustLatLon().lon),
 8004ce4:	17da      	asrs	r2, r3, #31
 8004ce6:	189b      	adds	r3, r3, r2
 8004ce8:	4053      	eors	r3, r2
 8004cea:	4955      	ldr	r1, [pc, #340]	@ (8004e40 <main+0x768>)
 8004cec:	4848      	ldr	r0, [pc, #288]	@ (8004e10 <main+0x738>)
 8004cee:	0022      	movs	r2, r4
 8004cf0:	f009 fefc 	bl	800eaec <siprintf>
					drawString(0, 60, buffer2, WHITE, BLACK, 1, 1);
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	425b      	negs	r3, r3
 8004cf8:	4a45      	ldr	r2, [pc, #276]	@ (8004e10 <main+0x738>)
 8004cfa:	2101      	movs	r1, #1
 8004cfc:	9102      	str	r1, [sp, #8]
 8004cfe:	2101      	movs	r1, #1
 8004d00:	9101      	str	r1, [sp, #4]
 8004d02:	2100      	movs	r1, #0
 8004d04:	9100      	str	r1, [sp, #0]
 8004d06:	213c      	movs	r1, #60	@ 0x3c
 8004d08:	2000      	movs	r0, #0
 8004d0a:	f7fe ff42 	bl	8003b92 <drawString>
				}
				}
				updateScreen = 0;
 8004d0e:	4b3c      	ldr	r3, [pc, #240]	@ (8004e00 <main+0x728>)
 8004d10:	2200      	movs	r2, #0
 8004d12:	601a      	str	r2, [r3, #0]
			}
			if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_SET) {
 8004d14:	4b4b      	ldr	r3, [pc, #300]	@ (8004e44 <main+0x76c>)
 8004d16:	2104      	movs	r1, #4
 8004d18:	0018      	movs	r0, r3
 8004d1a:	f004 fbd1 	bl	80094c0 <HAL_GPIO_ReadPin>
 8004d1e:	0003      	movs	r3, r0
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d111      	bne.n	8004d48 <main+0x670>
				effect = MenuBeep;
 8004d24:	4b48      	ldr	r3, [pc, #288]	@ (8004e48 <main+0x770>)
 8004d26:	2200      	movs	r2, #0
 8004d28:	701a      	strb	r2, [r3, #0]
				PlayEffect(effect);
 8004d2a:	4b47      	ldr	r3, [pc, #284]	@ (8004e48 <main+0x770>)
 8004d2c:	781b      	ldrb	r3, [r3, #0]
 8004d2e:	0018      	movs	r0, r3
 8004d30:	f000 fcaa 	bl	8005688 <PlayEffect>

				currentMenu = Main;
 8004d34:	4b45      	ldr	r3, [pc, #276]	@ (8004e4c <main+0x774>)
 8004d36:	2201      	movs	r2, #1
 8004d38:	701a      	strb	r2, [r3, #0]
				canChange = 0;
 8004d3a:	4b45      	ldr	r3, [pc, #276]	@ (8004e50 <main+0x778>)
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	701a      	strb	r2, [r3, #0]
				fillScreen(BLACK);
 8004d40:	2000      	movs	r0, #0
 8004d42:	f7ff f86b 	bl	8003e1c <fillScreen>
			} else
				canChange = 1;

			break;
 8004d46:	e173      	b.n	8005030 <main+0x958>
				canChange = 1;
 8004d48:	4b41      	ldr	r3, [pc, #260]	@ (8004e50 <main+0x778>)
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	701a      	strb	r2, [r3, #0]
			break;
 8004d4e:	e16f      	b.n	8005030 <main+0x958>
			//{
			//SendData();
			//ReceiveData();
			//}

			if (updateScreen >= 2) {
 8004d50:	4b2b      	ldr	r3, [pc, #172]	@ (8004e00 <main+0x728>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d800      	bhi.n	8004d5a <main+0x682>
 8004d58:	e145      	b.n	8004fe6 <main+0x90e>
				updateScreen = 0;
 8004d5a:	4b29      	ldr	r3, [pc, #164]	@ (8004e00 <main+0x728>)
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	601a      	str	r2, [r3, #0]
				drawString(0, 150, "-OPTIONS-", WHITE, BLACK, 1, 1);
 8004d60:	2301      	movs	r3, #1
 8004d62:	425b      	negs	r3, r3
 8004d64:	4a3b      	ldr	r2, [pc, #236]	@ (8004e54 <main+0x77c>)
 8004d66:	2101      	movs	r1, #1
 8004d68:	9102      	str	r1, [sp, #8]
 8004d6a:	2101      	movs	r1, #1
 8004d6c:	9101      	str	r1, [sp, #4]
 8004d6e:	2100      	movs	r1, #0
 8004d70:	9100      	str	r1, [sp, #0]
 8004d72:	2196      	movs	r1, #150	@ 0x96
 8004d74:	2000      	movs	r0, #0
 8004d76:	f7fe ff0c 	bl	8003b92 <drawString>
				sprintf(buffer2, "GOAL: %d ", game.dailyGoal);
 8004d7a:	4a23      	ldr	r2, [pc, #140]	@ (8004e08 <main+0x730>)
 8004d7c:	2392      	movs	r3, #146	@ 0x92
 8004d7e:	005b      	lsls	r3, r3, #1
 8004d80:	58d2      	ldr	r2, [r2, r3]
 8004d82:	4935      	ldr	r1, [pc, #212]	@ (8004e58 <main+0x780>)
 8004d84:	4b22      	ldr	r3, [pc, #136]	@ (8004e10 <main+0x738>)
 8004d86:	0018      	movs	r0, r3
 8004d88:	f009 feb0 	bl	800eaec <siprintf>
				drawString(0, 130, buffer2, WHITE, BLACK, 1, 1); //Display the current difficulty
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	425b      	negs	r3, r3
 8004d90:	4a1f      	ldr	r2, [pc, #124]	@ (8004e10 <main+0x738>)
 8004d92:	2101      	movs	r1, #1
 8004d94:	9102      	str	r1, [sp, #8]
 8004d96:	2101      	movs	r1, #1
 8004d98:	9101      	str	r1, [sp, #4]
 8004d9a:	2100      	movs	r1, #0
 8004d9c:	9100      	str	r1, [sp, #0]
 8004d9e:	2182      	movs	r1, #130	@ 0x82
 8004da0:	2000      	movs	r0, #0
 8004da2:	f7fe fef6 	bl	8003b92 <drawString>
				drawString(0, 110, "UPLOAD DATA", WHITE, BLACK, 1, 1);
 8004da6:	2301      	movs	r3, #1
 8004da8:	425b      	negs	r3, r3
 8004daa:	4a2c      	ldr	r2, [pc, #176]	@ (8004e5c <main+0x784>)
 8004dac:	2101      	movs	r1, #1
 8004dae:	9102      	str	r1, [sp, #8]
 8004db0:	2101      	movs	r1, #1
 8004db2:	9101      	str	r1, [sp, #4]
 8004db4:	2100      	movs	r1, #0
 8004db6:	9100      	str	r1, [sp, #0]
 8004db8:	216e      	movs	r1, #110	@ 0x6e
 8004dba:	2000      	movs	r0, #0
 8004dbc:	f7fe fee9 	bl	8003b92 <drawString>
				if (editDifficulty) {
 8004dc0:	4b27      	ldr	r3, [pc, #156]	@ (8004e60 <main+0x788>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d100      	bne.n	8004dca <main+0x6f2>
 8004dc8:	e097      	b.n	8004efa <main+0x822>
					//Editing difficulty
					drawLine(0, 125, 128, 125, WHITE);
 8004dca:	4b26      	ldr	r3, [pc, #152]	@ (8004e64 <main+0x78c>)
 8004dcc:	9300      	str	r3, [sp, #0]
 8004dce:	237d      	movs	r3, #125	@ 0x7d
 8004dd0:	2280      	movs	r2, #128	@ 0x80
 8004dd2:	217d      	movs	r1, #125	@ 0x7d
 8004dd4:	2000      	movs	r0, #0
 8004dd6:	f7fe fe4c 	bl	8003a72 <drawLine>
					//GET OUT when the center button is pressed!
					if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1)) {
 8004dda:	4b16      	ldr	r3, [pc, #88]	@ (8004e34 <main+0x75c>)
 8004ddc:	2102      	movs	r1, #2
 8004dde:	0018      	movs	r0, r3
 8004de0:	f004 fb6e 	bl	80094c0 <HAL_GPIO_ReadPin>
 8004de4:	1e03      	subs	r3, r0, #0
 8004de6:	d03f      	beq.n	8004e68 <main+0x790>
						editDifficulty = 0;
 8004de8:	4b1d      	ldr	r3, [pc, #116]	@ (8004e60 <main+0x788>)
 8004dea:	2200      	movs	r2, #0
 8004dec:	601a      	str	r2, [r3, #0]
						drawLine(0, 125, 128, 125, BLACK);
 8004dee:	2300      	movs	r3, #0
 8004df0:	9300      	str	r3, [sp, #0]
 8004df2:	237d      	movs	r3, #125	@ 0x7d
 8004df4:	2280      	movs	r2, #128	@ 0x80
 8004df6:	217d      	movs	r1, #125	@ 0x7d
 8004df8:	2000      	movs	r0, #0
 8004dfa:	f7fe fe3a 	bl	8003a72 <drawLine>
 8004dfe:	e05a      	b.n	8004eb6 <main+0x7de>
 8004e00:	2000029c 	.word	0x2000029c
 8004e04:	080112c0 	.word	0x080112c0
 8004e08:	200002a8 	.word	0x200002a8
 8004e0c:	080112c8 	.word	0x080112c8
 8004e10:	20001218 	.word	0x20001218
 8004e14:	080112d4 	.word	0x080112d4
 8004e18:	080112e4 	.word	0x080112e4
 8004e1c:	080112f4 	.word	0x080112f4
 8004e20:	08011300 	.word	0x08011300
 8004e24:	461c4000 	.word	0x461c4000
 8004e28:	00002710 	.word	0x00002710
 8004e2c:	08011310 	.word	0x08011310
 8004e30:	08011320 	.word	0x08011320
 8004e34:	50000800 	.word	0x50000800
 8004e38:	44fa0000 	.word	0x44fa0000
 8004e3c:	08011330 	.word	0x08011330
 8004e40:	0801133c 	.word	0x0801133c
 8004e44:	50000400 	.word	0x50000400
 8004e48:	20000298 	.word	0x20000298
 8004e4c:	20000002 	.word	0x20000002
 8004e50:	20000003 	.word	0x20000003
 8004e54:	08011348 	.word	0x08011348
 8004e58:	08011354 	.word	0x08011354
 8004e5c:	08011360 	.word	0x08011360
 8004e60:	20001284 	.word	0x20001284
 8004e64:	0000ffff 	.word	0x0000ffff
					}
					//Right increments the goal
					else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2)) {
 8004e68:	4b75      	ldr	r3, [pc, #468]	@ (8005040 <main+0x968>)
 8004e6a:	2104      	movs	r1, #4
 8004e6c:	0018      	movs	r0, r3
 8004e6e:	f004 fb27 	bl	80094c0 <HAL_GPIO_ReadPin>
 8004e72:	1e03      	subs	r3, r0, #0
 8004e74:	d00b      	beq.n	8004e8e <main+0x7b6>
						game.dailyGoal += 1000;
 8004e76:	4a73      	ldr	r2, [pc, #460]	@ (8005044 <main+0x96c>)
 8004e78:	2392      	movs	r3, #146	@ 0x92
 8004e7a:	005b      	lsls	r3, r3, #1
 8004e7c:	58d3      	ldr	r3, [r2, r3]
 8004e7e:	22fa      	movs	r2, #250	@ 0xfa
 8004e80:	0092      	lsls	r2, r2, #2
 8004e82:	1899      	adds	r1, r3, r2
 8004e84:	4a6f      	ldr	r2, [pc, #444]	@ (8005044 <main+0x96c>)
 8004e86:	2392      	movs	r3, #146	@ 0x92
 8004e88:	005b      	lsls	r3, r3, #1
 8004e8a:	50d1      	str	r1, [r2, r3]
 8004e8c:	e013      	b.n	8004eb6 <main+0x7de>
					}
					//Left decrements the goal
					else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11)) {
 8004e8e:	2380      	movs	r3, #128	@ 0x80
 8004e90:	011a      	lsls	r2, r3, #4
 8004e92:	23a0      	movs	r3, #160	@ 0xa0
 8004e94:	05db      	lsls	r3, r3, #23
 8004e96:	0011      	movs	r1, r2
 8004e98:	0018      	movs	r0, r3
 8004e9a:	f004 fb11 	bl	80094c0 <HAL_GPIO_ReadPin>
 8004e9e:	1e03      	subs	r3, r0, #0
 8004ea0:	d009      	beq.n	8004eb6 <main+0x7de>
						game.dailyGoal -= 1000;
 8004ea2:	4a68      	ldr	r2, [pc, #416]	@ (8005044 <main+0x96c>)
 8004ea4:	2392      	movs	r3, #146	@ 0x92
 8004ea6:	005b      	lsls	r3, r3, #1
 8004ea8:	58d3      	ldr	r3, [r2, r3]
 8004eaa:	4a67      	ldr	r2, [pc, #412]	@ (8005048 <main+0x970>)
 8004eac:	1899      	adds	r1, r3, r2
 8004eae:	4a65      	ldr	r2, [pc, #404]	@ (8005044 <main+0x96c>)
 8004eb0:	2392      	movs	r3, #146	@ 0x92
 8004eb2:	005b      	lsls	r3, r3, #1
 8004eb4:	50d1      	str	r1, [r2, r3]
					}

					if (game.dailyGoal >= 999000) {
 8004eb6:	4a63      	ldr	r2, [pc, #396]	@ (8005044 <main+0x96c>)
 8004eb8:	2392      	movs	r3, #146	@ 0x92
 8004eba:	005b      	lsls	r3, r3, #1
 8004ebc:	58d3      	ldr	r3, [r2, r3]
 8004ebe:	4a63      	ldr	r2, [pc, #396]	@ (800504c <main+0x974>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d905      	bls.n	8004ed0 <main+0x7f8>
						game.dailyGoal = 0;
 8004ec4:	4a5f      	ldr	r2, [pc, #380]	@ (8005044 <main+0x96c>)
 8004ec6:	2392      	movs	r3, #146	@ 0x92
 8004ec8:	005b      	lsls	r3, r3, #1
 8004eca:	2100      	movs	r1, #0
 8004ecc:	50d1      	str	r1, [r2, r3]
 8004ece:	e00a      	b.n	8004ee6 <main+0x80e>
					} else if (game.dailyGoal <= 0) {
 8004ed0:	4a5c      	ldr	r2, [pc, #368]	@ (8005044 <main+0x96c>)
 8004ed2:	2392      	movs	r3, #146	@ 0x92
 8004ed4:	005b      	lsls	r3, r3, #1
 8004ed6:	58d3      	ldr	r3, [r2, r3]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d104      	bne.n	8004ee6 <main+0x80e>
						game.dailyGoal = 999000;
 8004edc:	4a59      	ldr	r2, [pc, #356]	@ (8005044 <main+0x96c>)
 8004ede:	2392      	movs	r3, #146	@ 0x92
 8004ee0:	005b      	lsls	r3, r3, #1
 8004ee2:	495b      	ldr	r1, [pc, #364]	@ (8005050 <main+0x978>)
 8004ee4:	50d1      	str	r1, [r2, r3]
					}
					sprintf(buffer2, "DIFFICULTY: %d ", game.dailyGoal);
 8004ee6:	4a57      	ldr	r2, [pc, #348]	@ (8005044 <main+0x96c>)
 8004ee8:	2392      	movs	r3, #146	@ 0x92
 8004eea:	005b      	lsls	r3, r3, #1
 8004eec:	58d2      	ldr	r2, [r2, r3]
 8004eee:	4959      	ldr	r1, [pc, #356]	@ (8005054 <main+0x97c>)
 8004ef0:	4b59      	ldr	r3, [pc, #356]	@ (8005058 <main+0x980>)
 8004ef2:	0018      	movs	r0, r3
 8004ef4:	f009 fdfa 	bl	800eaec <siprintf>
 8004ef8:	e075      	b.n	8004fe6 <main+0x90e>

				} else if (userUpload) {
 8004efa:	4b58      	ldr	r3, [pc, #352]	@ (800505c <main+0x984>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d016      	beq.n	8004f30 <main+0x858>
					FlashWrite();
 8004f02:	f000 fea5 	bl	8005c50 <FlashWrite>

					userUpload = 0;
 8004f06:	4b55      	ldr	r3, [pc, #340]	@ (800505c <main+0x984>)
 8004f08:	2200      	movs	r2, #0
 8004f0a:	601a      	str	r2, [r3, #0]
					ReceiveData();
 8004f0c:	f001 fc64 	bl	80067d8 <ReceiveData>
					drawString(0, 90, game.uid, WHITE, BLACK, 1, 1);
 8004f10:	2301      	movs	r3, #1
 8004f12:	425b      	negs	r3, r3
 8004f14:	4a52      	ldr	r2, [pc, #328]	@ (8005060 <main+0x988>)
 8004f16:	2101      	movs	r1, #1
 8004f18:	9102      	str	r1, [sp, #8]
 8004f1a:	2101      	movs	r1, #1
 8004f1c:	9101      	str	r1, [sp, #4]
 8004f1e:	2100      	movs	r1, #0
 8004f20:	9100      	str	r1, [sp, #0]
 8004f22:	215a      	movs	r1, #90	@ 0x5a
 8004f24:	2000      	movs	r0, #0
 8004f26:	f7fe fe34 	bl	8003b92 <drawString>
					SendData();
 8004f2a:	f001 fb8d 	bl	8006648 <SendData>
 8004f2e:	e05a      	b.n	8004fe6 <main+0x90e>

				} else {
					//Difficulty
					if (currentSetting == 0) {
 8004f30:	4b4c      	ldr	r3, [pc, #304]	@ (8005064 <main+0x98c>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d110      	bne.n	8004f5a <main+0x882>
						//Try to underline the option being selected
						drawLine(0, 125, 20, 125, WHITE);
 8004f38:	4b4b      	ldr	r3, [pc, #300]	@ (8005068 <main+0x990>)
 8004f3a:	9300      	str	r3, [sp, #0]
 8004f3c:	237d      	movs	r3, #125	@ 0x7d
 8004f3e:	2214      	movs	r2, #20
 8004f40:	217d      	movs	r1, #125	@ 0x7d
 8004f42:	2000      	movs	r0, #0
 8004f44:	f7fe fd95 	bl	8003a72 <drawLine>
						//Then erase the highlight under the other option not being selected
						drawLine(0, 105, 20, 105, BLACK);
 8004f48:	2300      	movs	r3, #0
 8004f4a:	9300      	str	r3, [sp, #0]
 8004f4c:	2369      	movs	r3, #105	@ 0x69
 8004f4e:	2214      	movs	r2, #20
 8004f50:	2169      	movs	r1, #105	@ 0x69
 8004f52:	2000      	movs	r0, #0
 8004f54:	f7fe fd8d 	bl	8003a72 <drawLine>
 8004f58:	e013      	b.n	8004f82 <main+0x8aa>
					}
					//Upload
					else if (currentSetting == 1) {
 8004f5a:	4b42      	ldr	r3, [pc, #264]	@ (8005064 <main+0x98c>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d10f      	bne.n	8004f82 <main+0x8aa>
						drawLine(0, 105, 20, 105, WHITE);
 8004f62:	4b41      	ldr	r3, [pc, #260]	@ (8005068 <main+0x990>)
 8004f64:	9300      	str	r3, [sp, #0]
 8004f66:	2369      	movs	r3, #105	@ 0x69
 8004f68:	2214      	movs	r2, #20
 8004f6a:	2169      	movs	r1, #105	@ 0x69
 8004f6c:	2000      	movs	r0, #0
 8004f6e:	f7fe fd80 	bl	8003a72 <drawLine>
						drawLine(0, 125, 20, 125, BLACK);
 8004f72:	2300      	movs	r3, #0
 8004f74:	9300      	str	r3, [sp, #0]
 8004f76:	237d      	movs	r3, #125	@ 0x7d
 8004f78:	2214      	movs	r2, #20
 8004f7a:	217d      	movs	r1, #125	@ 0x7d
 8004f7c:	2000      	movs	r0, #0
 8004f7e:	f7fe fd78 	bl	8003a72 <drawLine>
					}
					//IF RIGHT BUTTON IS PRESSED, INCREMENT THE SETTINGS MENU
					if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_SET) {
 8004f82:	4b2f      	ldr	r3, [pc, #188]	@ (8005040 <main+0x968>)
 8004f84:	2104      	movs	r1, #4
 8004f86:	0018      	movs	r0, r3
 8004f88:	f004 fa9a 	bl	80094c0 <HAL_GPIO_ReadPin>
 8004f8c:	0003      	movs	r3, r0
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d10c      	bne.n	8004fac <main+0x8d4>
						++currentSetting;
 8004f92:	4b34      	ldr	r3, [pc, #208]	@ (8005064 <main+0x98c>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	1c5a      	adds	r2, r3, #1
 8004f98:	4b32      	ldr	r3, [pc, #200]	@ (8005064 <main+0x98c>)
 8004f9a:	601a      	str	r2, [r3, #0]
						if (currentSetting > 1)
 8004f9c:	4b31      	ldr	r3, [pc, #196]	@ (8005064 <main+0x98c>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d920      	bls.n	8004fe6 <main+0x90e>
							currentSetting = 0;
 8004fa4:	4b2f      	ldr	r3, [pc, #188]	@ (8005064 <main+0x98c>)
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	601a      	str	r2, [r3, #0]
 8004faa:	e01c      	b.n	8004fe6 <main+0x90e>
					}
					//PD6=Center button
					else if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1)
 8004fac:	4b2f      	ldr	r3, [pc, #188]	@ (800506c <main+0x994>)
 8004fae:	2102      	movs	r1, #2
 8004fb0:	0018      	movs	r0, r3
 8004fb2:	f004 fa85 	bl	80094c0 <HAL_GPIO_ReadPin>
 8004fb6:	1e03      	subs	r3, r0, #0
 8004fb8:	d007      	beq.n	8004fca <main+0x8f2>
							&& currentSetting == 0) {
 8004fba:	4b2a      	ldr	r3, [pc, #168]	@ (8005064 <main+0x98c>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d103      	bne.n	8004fca <main+0x8f2>
						editDifficulty = 1;
 8004fc2:	4b2b      	ldr	r3, [pc, #172]	@ (8005070 <main+0x998>)
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	601a      	str	r2, [r3, #0]
 8004fc8:	e00d      	b.n	8004fe6 <main+0x90e>
					} else if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1)
 8004fca:	4b28      	ldr	r3, [pc, #160]	@ (800506c <main+0x994>)
 8004fcc:	2102      	movs	r1, #2
 8004fce:	0018      	movs	r0, r3
 8004fd0:	f004 fa76 	bl	80094c0 <HAL_GPIO_ReadPin>
 8004fd4:	1e03      	subs	r3, r0, #0
 8004fd6:	d006      	beq.n	8004fe6 <main+0x90e>
							&& currentSetting == 1) {
 8004fd8:	4b22      	ldr	r3, [pc, #136]	@ (8005064 <main+0x98c>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d102      	bne.n	8004fe6 <main+0x90e>
						userUpload = 1;
 8004fe0:	4b1e      	ldr	r3, [pc, #120]	@ (800505c <main+0x984>)
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	601a      	str	r2, [r3, #0]
					}
				}
			}

			if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_SET
 8004fe6:	2380      	movs	r3, #128	@ 0x80
 8004fe8:	011a      	lsls	r2, r3, #4
 8004fea:	23a0      	movs	r3, #160	@ 0xa0
 8004fec:	05db      	lsls	r3, r3, #23
 8004fee:	0011      	movs	r1, r2
 8004ff0:	0018      	movs	r0, r3
 8004ff2:	f004 fa65 	bl	80094c0 <HAL_GPIO_ReadPin>
 8004ff6:	0003      	movs	r3, r0
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d115      	bne.n	8005028 <main+0x950>
					&& !editDifficulty) {
 8004ffc:	4b1c      	ldr	r3, [pc, #112]	@ (8005070 <main+0x998>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d111      	bne.n	8005028 <main+0x950>
				effect = MenuBeep;
 8005004:	4b1b      	ldr	r3, [pc, #108]	@ (8005074 <main+0x99c>)
 8005006:	2200      	movs	r2, #0
 8005008:	701a      	strb	r2, [r3, #0]
				PlayEffect(effect);
 800500a:	4b1a      	ldr	r3, [pc, #104]	@ (8005074 <main+0x99c>)
 800500c:	781b      	ldrb	r3, [r3, #0]
 800500e:	0018      	movs	r0, r3
 8005010:	f000 fb3a 	bl	8005688 <PlayEffect>

				currentMenu = Main;
 8005014:	4b18      	ldr	r3, [pc, #96]	@ (8005078 <main+0x9a0>)
 8005016:	2201      	movs	r2, #1
 8005018:	701a      	strb	r2, [r3, #0]
				canChange = 0;
 800501a:	4b18      	ldr	r3, [pc, #96]	@ (800507c <main+0x9a4>)
 800501c:	2200      	movs	r2, #0
 800501e:	701a      	strb	r2, [r3, #0]
				fillScreen(BLACK);
 8005020:	2000      	movs	r0, #0
 8005022:	f7fe fefb 	bl	8003e1c <fillScreen>
			} else
				canChange = 1;
			break;
 8005026:	e002      	b.n	800502e <main+0x956>
				canChange = 1;
 8005028:	4b14      	ldr	r3, [pc, #80]	@ (800507c <main+0x9a4>)
 800502a:	2201      	movs	r2, #1
 800502c:	701a      	strb	r2, [r3, #0]
			break;
 800502e:	46c0      	nop			@ (mov r8, r8)

		}
		totalFrames++;
 8005030:	4b13      	ldr	r3, [pc, #76]	@ (8005080 <main+0x9a8>)
 8005032:	881b      	ldrh	r3, [r3, #0]
 8005034:	3301      	adds	r3, #1
 8005036:	b29a      	uxth	r2, r3
 8005038:	4b11      	ldr	r3, [pc, #68]	@ (8005080 <main+0x9a8>)
 800503a:	801a      	strh	r2, [r3, #0]
		if ((totalFrames) % 200 == 0){
 800503c:	f7ff fb68 	bl	8004710 <main+0x38>
 8005040:	50000400 	.word	0x50000400
 8005044:	200002a8 	.word	0x200002a8
 8005048:	fffffc18 	.word	0xfffffc18
 800504c:	000f3e57 	.word	0x000f3e57
 8005050:	000f3e58 	.word	0x000f3e58
 8005054:	0801136c 	.word	0x0801136c
 8005058:	20001218 	.word	0x20001218
 800505c:	20001288 	.word	0x20001288
 8005060:	200003d4 	.word	0x200003d4
 8005064:	20001280 	.word	0x20001280
 8005068:	0000ffff 	.word	0x0000ffff
 800506c:	50000800 	.word	0x50000800
 8005070:	20001284 	.word	0x20001284
 8005074:	20000298 	.word	0x20000298
 8005078:	20000002 	.word	0x20000002
 800507c:	20000003 	.word	0x20000003
 8005080:	2000044c 	.word	0x2000044c

08005084 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005084:	b590      	push	{r4, r7, lr}
 8005086:	b095      	sub	sp, #84	@ 0x54
 8005088:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800508a:	2414      	movs	r4, #20
 800508c:	193b      	adds	r3, r7, r4
 800508e:	0018      	movs	r0, r3
 8005090:	233c      	movs	r3, #60	@ 0x3c
 8005092:	001a      	movs	r2, r3
 8005094:	2100      	movs	r1, #0
 8005096:	f009 fd95 	bl	800ebc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800509a:	1d3b      	adds	r3, r7, #4
 800509c:	0018      	movs	r0, r3
 800509e:	2310      	movs	r3, #16
 80050a0:	001a      	movs	r2, r3
 80050a2:	2100      	movs	r1, #0
 80050a4:	f009 fd8e 	bl	800ebc4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80050a8:	2380      	movs	r3, #128	@ 0x80
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	0018      	movs	r0, r3
 80050ae:	f005 f8b9 	bl	800a224 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80050b2:	193b      	adds	r3, r7, r4
 80050b4:	220a      	movs	r2, #10
 80050b6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80050b8:	193b      	adds	r3, r7, r4
 80050ba:	2280      	movs	r2, #128	@ 0x80
 80050bc:	0052      	lsls	r2, r2, #1
 80050be:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80050c0:	0021      	movs	r1, r4
 80050c2:	187b      	adds	r3, r7, r1
 80050c4:	2200      	movs	r2, #0
 80050c6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80050c8:	187b      	adds	r3, r7, r1
 80050ca:	2240      	movs	r2, #64	@ 0x40
 80050cc:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80050ce:	187b      	adds	r3, r7, r1
 80050d0:	2201      	movs	r2, #1
 80050d2:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80050d4:	187b      	adds	r3, r7, r1
 80050d6:	2202      	movs	r2, #2
 80050d8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80050da:	187b      	adds	r3, r7, r1
 80050dc:	2202      	movs	r2, #2
 80050de:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80050e0:	187b      	adds	r3, r7, r1
 80050e2:	2200      	movs	r2, #0
 80050e4:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 80050e6:	187b      	adds	r3, r7, r1
 80050e8:	2208      	movs	r2, #8
 80050ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80050ec:	187b      	adds	r3, r7, r1
 80050ee:	2280      	movs	r2, #128	@ 0x80
 80050f0:	0292      	lsls	r2, r2, #10
 80050f2:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80050f4:	187b      	adds	r3, r7, r1
 80050f6:	2280      	movs	r2, #128	@ 0x80
 80050f8:	0492      	lsls	r2, r2, #18
 80050fa:	635a      	str	r2, [r3, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80050fc:	187b      	adds	r3, r7, r1
 80050fe:	2280      	movs	r2, #128	@ 0x80
 8005100:	0592      	lsls	r2, r2, #22
 8005102:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005104:	187b      	adds	r3, r7, r1
 8005106:	0018      	movs	r0, r3
 8005108:	f005 f8d8 	bl	800a2bc <HAL_RCC_OscConfig>
 800510c:	1e03      	subs	r3, r0, #0
 800510e:	d001      	beq.n	8005114 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8005110:	f002 f820 	bl	8007154 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005114:	1d3b      	adds	r3, r7, #4
 8005116:	2207      	movs	r2, #7
 8005118:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800511a:	1d3b      	adds	r3, r7, #4
 800511c:	2202      	movs	r2, #2
 800511e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005120:	1d3b      	adds	r3, r7, #4
 8005122:	2200      	movs	r2, #0
 8005124:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005126:	1d3b      	adds	r3, r7, #4
 8005128:	2200      	movs	r2, #0
 800512a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800512c:	1d3b      	adds	r3, r7, #4
 800512e:	2102      	movs	r1, #2
 8005130:	0018      	movs	r0, r3
 8005132:	f005 fc23 	bl	800a97c <HAL_RCC_ClockConfig>
 8005136:	1e03      	subs	r3, r0, #0
 8005138:	d001      	beq.n	800513e <SystemClock_Config+0xba>
  {
    Error_Handler();
 800513a:	f002 f80b 	bl	8007154 <Error_Handler>
  }
}
 800513e:	46c0      	nop			@ (mov r8, r8)
 8005140:	46bd      	mov	sp, r7
 8005142:	b015      	add	sp, #84	@ 0x54
 8005144:	bd90      	pop	{r4, r7, pc}
	...

08005148 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800514c:	4b1b      	ldr	r3, [pc, #108]	@ (80051bc <MX_I2C1_Init+0x74>)
 800514e:	4a1c      	ldr	r2, [pc, #112]	@ (80051c0 <MX_I2C1_Init+0x78>)
 8005150:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10B17DB5;
 8005152:	4b1a      	ldr	r3, [pc, #104]	@ (80051bc <MX_I2C1_Init+0x74>)
 8005154:	4a1b      	ldr	r2, [pc, #108]	@ (80051c4 <MX_I2C1_Init+0x7c>)
 8005156:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8005158:	4b18      	ldr	r3, [pc, #96]	@ (80051bc <MX_I2C1_Init+0x74>)
 800515a:	2200      	movs	r2, #0
 800515c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800515e:	4b17      	ldr	r3, [pc, #92]	@ (80051bc <MX_I2C1_Init+0x74>)
 8005160:	2201      	movs	r2, #1
 8005162:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005164:	4b15      	ldr	r3, [pc, #84]	@ (80051bc <MX_I2C1_Init+0x74>)
 8005166:	2200      	movs	r2, #0
 8005168:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800516a:	4b14      	ldr	r3, [pc, #80]	@ (80051bc <MX_I2C1_Init+0x74>)
 800516c:	2200      	movs	r2, #0
 800516e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005170:	4b12      	ldr	r3, [pc, #72]	@ (80051bc <MX_I2C1_Init+0x74>)
 8005172:	2200      	movs	r2, #0
 8005174:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005176:	4b11      	ldr	r3, [pc, #68]	@ (80051bc <MX_I2C1_Init+0x74>)
 8005178:	2200      	movs	r2, #0
 800517a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800517c:	4b0f      	ldr	r3, [pc, #60]	@ (80051bc <MX_I2C1_Init+0x74>)
 800517e:	2200      	movs	r2, #0
 8005180:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005182:	4b0e      	ldr	r3, [pc, #56]	@ (80051bc <MX_I2C1_Init+0x74>)
 8005184:	0018      	movs	r0, r3
 8005186:	f004 fa09 	bl	800959c <HAL_I2C_Init>
 800518a:	1e03      	subs	r3, r0, #0
 800518c:	d001      	beq.n	8005192 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800518e:	f001 ffe1 	bl	8007154 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005192:	4b0a      	ldr	r3, [pc, #40]	@ (80051bc <MX_I2C1_Init+0x74>)
 8005194:	2100      	movs	r1, #0
 8005196:	0018      	movs	r0, r3
 8005198:	f004 ffac 	bl	800a0f4 <HAL_I2CEx_ConfigAnalogFilter>
 800519c:	1e03      	subs	r3, r0, #0
 800519e:	d001      	beq.n	80051a4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80051a0:	f001 ffd8 	bl	8007154 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80051a4:	4b05      	ldr	r3, [pc, #20]	@ (80051bc <MX_I2C1_Init+0x74>)
 80051a6:	2100      	movs	r1, #0
 80051a8:	0018      	movs	r0, r3
 80051aa:	f004 ffef 	bl	800a18c <HAL_I2CEx_ConfigDigitalFilter>
 80051ae:	1e03      	subs	r3, r0, #0
 80051b0:	d001      	beq.n	80051b6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80051b2:	f001 ffcf 	bl	8007154 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80051b6:	46c0      	nop			@ (mov r8, r8)
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}
 80051bc:	2000128c 	.word	0x2000128c
 80051c0:	40005400 	.word	0x40005400
 80051c4:	10b17db5 	.word	0x10b17db5

080051c8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80051cc:	4b13      	ldr	r3, [pc, #76]	@ (800521c <MX_RTC_Init+0x54>)
 80051ce:	4a14      	ldr	r2, [pc, #80]	@ (8005220 <MX_RTC_Init+0x58>)
 80051d0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80051d2:	4b12      	ldr	r3, [pc, #72]	@ (800521c <MX_RTC_Init+0x54>)
 80051d4:	2200      	movs	r2, #0
 80051d6:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 80051d8:	4b10      	ldr	r3, [pc, #64]	@ (800521c <MX_RTC_Init+0x54>)
 80051da:	227f      	movs	r2, #127	@ 0x7f
 80051dc:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 80051de:	4b0f      	ldr	r3, [pc, #60]	@ (800521c <MX_RTC_Init+0x54>)
 80051e0:	22ff      	movs	r2, #255	@ 0xff
 80051e2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80051e4:	4b0d      	ldr	r3, [pc, #52]	@ (800521c <MX_RTC_Init+0x54>)
 80051e6:	2200      	movs	r2, #0
 80051e8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80051ea:	4b0c      	ldr	r3, [pc, #48]	@ (800521c <MX_RTC_Init+0x54>)
 80051ec:	2200      	movs	r2, #0
 80051ee:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80051f0:	4b0a      	ldr	r3, [pc, #40]	@ (800521c <MX_RTC_Init+0x54>)
 80051f2:	2200      	movs	r2, #0
 80051f4:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80051f6:	4b09      	ldr	r3, [pc, #36]	@ (800521c <MX_RTC_Init+0x54>)
 80051f8:	2280      	movs	r2, #128	@ 0x80
 80051fa:	05d2      	lsls	r2, r2, #23
 80051fc:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80051fe:	4b07      	ldr	r3, [pc, #28]	@ (800521c <MX_RTC_Init+0x54>)
 8005200:	2200      	movs	r2, #0
 8005202:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8005204:	4b05      	ldr	r3, [pc, #20]	@ (800521c <MX_RTC_Init+0x54>)
 8005206:	0018      	movs	r0, r3
 8005208:	f005 ff9e 	bl	800b148 <HAL_RTC_Init>
 800520c:	1e03      	subs	r3, r0, #0
 800520e:	d001      	beq.n	8005214 <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 8005210:	f001 ffa0 	bl	8007154 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8005214:	46c0      	nop			@ (mov r8, r8)
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
 800521a:	46c0      	nop			@ (mov r8, r8)
 800521c:	200012e0 	.word	0x200012e0
 8005220:	40002800 	.word	0x40002800

08005224 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8005228:	4b1c      	ldr	r3, [pc, #112]	@ (800529c <MX_SPI1_Init+0x78>)
 800522a:	4a1d      	ldr	r2, [pc, #116]	@ (80052a0 <MX_SPI1_Init+0x7c>)
 800522c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800522e:	4b1b      	ldr	r3, [pc, #108]	@ (800529c <MX_SPI1_Init+0x78>)
 8005230:	2282      	movs	r2, #130	@ 0x82
 8005232:	0052      	lsls	r2, r2, #1
 8005234:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8005236:	4b19      	ldr	r3, [pc, #100]	@ (800529c <MX_SPI1_Init+0x78>)
 8005238:	2280      	movs	r2, #128	@ 0x80
 800523a:	0212      	lsls	r2, r2, #8
 800523c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800523e:	4b17      	ldr	r3, [pc, #92]	@ (800529c <MX_SPI1_Init+0x78>)
 8005240:	22e0      	movs	r2, #224	@ 0xe0
 8005242:	00d2      	lsls	r2, r2, #3
 8005244:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005246:	4b15      	ldr	r3, [pc, #84]	@ (800529c <MX_SPI1_Init+0x78>)
 8005248:	2200      	movs	r2, #0
 800524a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800524c:	4b13      	ldr	r3, [pc, #76]	@ (800529c <MX_SPI1_Init+0x78>)
 800524e:	2200      	movs	r2, #0
 8005250:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005252:	4b12      	ldr	r3, [pc, #72]	@ (800529c <MX_SPI1_Init+0x78>)
 8005254:	2280      	movs	r2, #128	@ 0x80
 8005256:	0092      	lsls	r2, r2, #2
 8005258:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800525a:	4b10      	ldr	r3, [pc, #64]	@ (800529c <MX_SPI1_Init+0x78>)
 800525c:	2220      	movs	r2, #32
 800525e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005260:	4b0e      	ldr	r3, [pc, #56]	@ (800529c <MX_SPI1_Init+0x78>)
 8005262:	2200      	movs	r2, #0
 8005264:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005266:	4b0d      	ldr	r3, [pc, #52]	@ (800529c <MX_SPI1_Init+0x78>)
 8005268:	2200      	movs	r2, #0
 800526a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800526c:	4b0b      	ldr	r3, [pc, #44]	@ (800529c <MX_SPI1_Init+0x78>)
 800526e:	2200      	movs	r2, #0
 8005270:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8005272:	4b0a      	ldr	r3, [pc, #40]	@ (800529c <MX_SPI1_Init+0x78>)
 8005274:	2207      	movs	r2, #7
 8005276:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005278:	4b08      	ldr	r3, [pc, #32]	@ (800529c <MX_SPI1_Init+0x78>)
 800527a:	2200      	movs	r2, #0
 800527c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800527e:	4b07      	ldr	r3, [pc, #28]	@ (800529c <MX_SPI1_Init+0x78>)
 8005280:	2208      	movs	r2, #8
 8005282:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005284:	4b05      	ldr	r3, [pc, #20]	@ (800529c <MX_SPI1_Init+0x78>)
 8005286:	0018      	movs	r0, r3
 8005288:	f006 f8ac 	bl	800b3e4 <HAL_SPI_Init>
 800528c:	1e03      	subs	r3, r0, #0
 800528e:	d001      	beq.n	8005294 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8005290:	f001 ff60 	bl	8007154 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8005294:	46c0      	nop			@ (mov r8, r8)
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
 800529a:	46c0      	nop			@ (mov r8, r8)
 800529c:	2000130c 	.word	0x2000130c
 80052a0:	40013000 	.word	0x40013000

080052a4 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b094      	sub	sp, #80	@ 0x50
 80052a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80052aa:	2334      	movs	r3, #52	@ 0x34
 80052ac:	18fb      	adds	r3, r7, r3
 80052ae:	0018      	movs	r0, r3
 80052b0:	231c      	movs	r3, #28
 80052b2:	001a      	movs	r2, r3
 80052b4:	2100      	movs	r1, #0
 80052b6:	f009 fc85 	bl	800ebc4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80052ba:	003b      	movs	r3, r7
 80052bc:	0018      	movs	r0, r3
 80052be:	2334      	movs	r3, #52	@ 0x34
 80052c0:	001a      	movs	r2, r3
 80052c2:	2100      	movs	r1, #0
 80052c4:	f009 fc7e 	bl	800ebc4 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80052c8:	4b37      	ldr	r3, [pc, #220]	@ (80053a8 <MX_TIM17_Init+0x104>)
 80052ca:	4a38      	ldr	r2, [pc, #224]	@ (80053ac <MX_TIM17_Init+0x108>)
 80052cc:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 80052ce:	4b36      	ldr	r3, [pc, #216]	@ (80053a8 <MX_TIM17_Init+0x104>)
 80052d0:	2200      	movs	r2, #0
 80052d2:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80052d4:	4b34      	ldr	r3, [pc, #208]	@ (80053a8 <MX_TIM17_Init+0x104>)
 80052d6:	2200      	movs	r2, #0
 80052d8:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 80052da:	4b33      	ldr	r3, [pc, #204]	@ (80053a8 <MX_TIM17_Init+0x104>)
 80052dc:	4a34      	ldr	r2, [pc, #208]	@ (80053b0 <MX_TIM17_Init+0x10c>)
 80052de:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80052e0:	4b31      	ldr	r3, [pc, #196]	@ (80053a8 <MX_TIM17_Init+0x104>)
 80052e2:	2200      	movs	r2, #0
 80052e4:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80052e6:	4b30      	ldr	r3, [pc, #192]	@ (80053a8 <MX_TIM17_Init+0x104>)
 80052e8:	2200      	movs	r2, #0
 80052ea:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80052ec:	4b2e      	ldr	r3, [pc, #184]	@ (80053a8 <MX_TIM17_Init+0x104>)
 80052ee:	2200      	movs	r2, #0
 80052f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80052f2:	4b2d      	ldr	r3, [pc, #180]	@ (80053a8 <MX_TIM17_Init+0x104>)
 80052f4:	0018      	movs	r0, r3
 80052f6:	f006 fc03 	bl	800bb00 <HAL_TIM_Base_Init>
 80052fa:	1e03      	subs	r3, r0, #0
 80052fc:	d001      	beq.n	8005302 <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 80052fe:	f001 ff29 	bl	8007154 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8005302:	4b29      	ldr	r3, [pc, #164]	@ (80053a8 <MX_TIM17_Init+0x104>)
 8005304:	0018      	movs	r0, r3
 8005306:	f006 fc53 	bl	800bbb0 <HAL_TIM_PWM_Init>
 800530a:	1e03      	subs	r3, r0, #0
 800530c:	d001      	beq.n	8005312 <MX_TIM17_Init+0x6e>
  {
    Error_Handler();
 800530e:	f001 ff21 	bl	8007154 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005312:	2134      	movs	r1, #52	@ 0x34
 8005314:	187b      	adds	r3, r7, r1
 8005316:	2260      	movs	r2, #96	@ 0x60
 8005318:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800531a:	187b      	adds	r3, r7, r1
 800531c:	2200      	movs	r2, #0
 800531e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005320:	187b      	adds	r3, r7, r1
 8005322:	2200      	movs	r2, #0
 8005324:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005326:	187b      	adds	r3, r7, r1
 8005328:	2200      	movs	r2, #0
 800532a:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800532c:	187b      	adds	r3, r7, r1
 800532e:	2200      	movs	r2, #0
 8005330:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005332:	187b      	adds	r3, r7, r1
 8005334:	2200      	movs	r2, #0
 8005336:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005338:	187b      	adds	r3, r7, r1
 800533a:	2200      	movs	r2, #0
 800533c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800533e:	1879      	adds	r1, r7, r1
 8005340:	4b19      	ldr	r3, [pc, #100]	@ (80053a8 <MX_TIM17_Init+0x104>)
 8005342:	2200      	movs	r2, #0
 8005344:	0018      	movs	r0, r3
 8005346:	f006 fe0f 	bl	800bf68 <HAL_TIM_PWM_ConfigChannel>
 800534a:	1e03      	subs	r3, r0, #0
 800534c:	d001      	beq.n	8005352 <MX_TIM17_Init+0xae>
  {
    Error_Handler();
 800534e:	f001 ff01 	bl	8007154 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005352:	003b      	movs	r3, r7
 8005354:	2200      	movs	r2, #0
 8005356:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005358:	003b      	movs	r3, r7
 800535a:	2200      	movs	r2, #0
 800535c:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800535e:	003b      	movs	r3, r7
 8005360:	2200      	movs	r2, #0
 8005362:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005364:	003b      	movs	r3, r7
 8005366:	2200      	movs	r2, #0
 8005368:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800536a:	003b      	movs	r3, r7
 800536c:	2200      	movs	r2, #0
 800536e:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005370:	003b      	movs	r3, r7
 8005372:	2280      	movs	r2, #128	@ 0x80
 8005374:	0192      	lsls	r2, r2, #6
 8005376:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8005378:	003b      	movs	r3, r7
 800537a:	2200      	movs	r2, #0
 800537c:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800537e:	003b      	movs	r3, r7
 8005380:	2200      	movs	r2, #0
 8005382:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8005384:	003a      	movs	r2, r7
 8005386:	4b08      	ldr	r3, [pc, #32]	@ (80053a8 <MX_TIM17_Init+0x104>)
 8005388:	0011      	movs	r1, r2
 800538a:	0018      	movs	r0, r3
 800538c:	f007 fa6c 	bl	800c868 <HAL_TIMEx_ConfigBreakDeadTime>
 8005390:	1e03      	subs	r3, r0, #0
 8005392:	d001      	beq.n	8005398 <MX_TIM17_Init+0xf4>
  {
    Error_Handler();
 8005394:	f001 fede 	bl	8007154 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8005398:	4b03      	ldr	r3, [pc, #12]	@ (80053a8 <MX_TIM17_Init+0x104>)
 800539a:	0018      	movs	r0, r3
 800539c:	f002 fc82 	bl	8007ca4 <HAL_TIM_MspPostInit>

}
 80053a0:	46c0      	nop			@ (mov r8, r8)
 80053a2:	46bd      	mov	sp, r7
 80053a4:	b014      	add	sp, #80	@ 0x50
 80053a6:	bd80      	pop	{r7, pc}
 80053a8:	20001370 	.word	0x20001370
 80053ac:	40014800 	.word	0x40014800
 80053b0:	0000ffff 	.word	0x0000ffff

080053b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80053b8:	4b23      	ldr	r3, [pc, #140]	@ (8005448 <MX_USART1_UART_Init+0x94>)
 80053ba:	4a24      	ldr	r2, [pc, #144]	@ (800544c <MX_USART1_UART_Init+0x98>)
 80053bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80053be:	4b22      	ldr	r3, [pc, #136]	@ (8005448 <MX_USART1_UART_Init+0x94>)
 80053c0:	2296      	movs	r2, #150	@ 0x96
 80053c2:	0192      	lsls	r2, r2, #6
 80053c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80053c6:	4b20      	ldr	r3, [pc, #128]	@ (8005448 <MX_USART1_UART_Init+0x94>)
 80053c8:	2200      	movs	r2, #0
 80053ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80053cc:	4b1e      	ldr	r3, [pc, #120]	@ (8005448 <MX_USART1_UART_Init+0x94>)
 80053ce:	2200      	movs	r2, #0
 80053d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80053d2:	4b1d      	ldr	r3, [pc, #116]	@ (8005448 <MX_USART1_UART_Init+0x94>)
 80053d4:	2200      	movs	r2, #0
 80053d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80053d8:	4b1b      	ldr	r3, [pc, #108]	@ (8005448 <MX_USART1_UART_Init+0x94>)
 80053da:	220c      	movs	r2, #12
 80053dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80053de:	4b1a      	ldr	r3, [pc, #104]	@ (8005448 <MX_USART1_UART_Init+0x94>)
 80053e0:	2200      	movs	r2, #0
 80053e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80053e4:	4b18      	ldr	r3, [pc, #96]	@ (8005448 <MX_USART1_UART_Init+0x94>)
 80053e6:	2200      	movs	r2, #0
 80053e8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80053ea:	4b17      	ldr	r3, [pc, #92]	@ (8005448 <MX_USART1_UART_Init+0x94>)
 80053ec:	2200      	movs	r2, #0
 80053ee:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80053f0:	4b15      	ldr	r3, [pc, #84]	@ (8005448 <MX_USART1_UART_Init+0x94>)
 80053f2:	2200      	movs	r2, #0
 80053f4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80053f6:	4b14      	ldr	r3, [pc, #80]	@ (8005448 <MX_USART1_UART_Init+0x94>)
 80053f8:	2200      	movs	r2, #0
 80053fa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80053fc:	4b12      	ldr	r3, [pc, #72]	@ (8005448 <MX_USART1_UART_Init+0x94>)
 80053fe:	0018      	movs	r0, r3
 8005400:	f007 face 	bl	800c9a0 <HAL_UART_Init>
 8005404:	1e03      	subs	r3, r0, #0
 8005406:	d001      	beq.n	800540c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8005408:	f001 fea4 	bl	8007154 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800540c:	4b0e      	ldr	r3, [pc, #56]	@ (8005448 <MX_USART1_UART_Init+0x94>)
 800540e:	2100      	movs	r1, #0
 8005410:	0018      	movs	r0, r3
 8005412:	f008 fa69 	bl	800d8e8 <HAL_UARTEx_SetTxFifoThreshold>
 8005416:	1e03      	subs	r3, r0, #0
 8005418:	d001      	beq.n	800541e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800541a:	f001 fe9b 	bl	8007154 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800541e:	4b0a      	ldr	r3, [pc, #40]	@ (8005448 <MX_USART1_UART_Init+0x94>)
 8005420:	2100      	movs	r1, #0
 8005422:	0018      	movs	r0, r3
 8005424:	f008 faa0 	bl	800d968 <HAL_UARTEx_SetRxFifoThreshold>
 8005428:	1e03      	subs	r3, r0, #0
 800542a:	d001      	beq.n	8005430 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800542c:	f001 fe92 	bl	8007154 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8005430:	4b05      	ldr	r3, [pc, #20]	@ (8005448 <MX_USART1_UART_Init+0x94>)
 8005432:	0018      	movs	r0, r3
 8005434:	f008 fa1e 	bl	800d874 <HAL_UARTEx_DisableFifoMode>
 8005438:	1e03      	subs	r3, r0, #0
 800543a:	d001      	beq.n	8005440 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800543c:	f001 fe8a 	bl	8007154 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005440:	46c0      	nop			@ (mov r8, r8)
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	46c0      	nop			@ (mov r8, r8)
 8005448:	200013bc 	.word	0x200013bc
 800544c:	40013800 	.word	0x40013800

08005450 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005454:	4b23      	ldr	r3, [pc, #140]	@ (80054e4 <MX_USART2_UART_Init+0x94>)
 8005456:	4a24      	ldr	r2, [pc, #144]	@ (80054e8 <MX_USART2_UART_Init+0x98>)
 8005458:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800545a:	4b22      	ldr	r3, [pc, #136]	@ (80054e4 <MX_USART2_UART_Init+0x94>)
 800545c:	22e1      	movs	r2, #225	@ 0xe1
 800545e:	0252      	lsls	r2, r2, #9
 8005460:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005462:	4b20      	ldr	r3, [pc, #128]	@ (80054e4 <MX_USART2_UART_Init+0x94>)
 8005464:	2200      	movs	r2, #0
 8005466:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005468:	4b1e      	ldr	r3, [pc, #120]	@ (80054e4 <MX_USART2_UART_Init+0x94>)
 800546a:	2200      	movs	r2, #0
 800546c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800546e:	4b1d      	ldr	r3, [pc, #116]	@ (80054e4 <MX_USART2_UART_Init+0x94>)
 8005470:	2200      	movs	r2, #0
 8005472:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005474:	4b1b      	ldr	r3, [pc, #108]	@ (80054e4 <MX_USART2_UART_Init+0x94>)
 8005476:	220c      	movs	r2, #12
 8005478:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800547a:	4b1a      	ldr	r3, [pc, #104]	@ (80054e4 <MX_USART2_UART_Init+0x94>)
 800547c:	2200      	movs	r2, #0
 800547e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005480:	4b18      	ldr	r3, [pc, #96]	@ (80054e4 <MX_USART2_UART_Init+0x94>)
 8005482:	2200      	movs	r2, #0
 8005484:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005486:	4b17      	ldr	r3, [pc, #92]	@ (80054e4 <MX_USART2_UART_Init+0x94>)
 8005488:	2200      	movs	r2, #0
 800548a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800548c:	4b15      	ldr	r3, [pc, #84]	@ (80054e4 <MX_USART2_UART_Init+0x94>)
 800548e:	2200      	movs	r2, #0
 8005490:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005492:	4b14      	ldr	r3, [pc, #80]	@ (80054e4 <MX_USART2_UART_Init+0x94>)
 8005494:	2200      	movs	r2, #0
 8005496:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005498:	4b12      	ldr	r3, [pc, #72]	@ (80054e4 <MX_USART2_UART_Init+0x94>)
 800549a:	0018      	movs	r0, r3
 800549c:	f007 fa80 	bl	800c9a0 <HAL_UART_Init>
 80054a0:	1e03      	subs	r3, r0, #0
 80054a2:	d001      	beq.n	80054a8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80054a4:	f001 fe56 	bl	8007154 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80054a8:	4b0e      	ldr	r3, [pc, #56]	@ (80054e4 <MX_USART2_UART_Init+0x94>)
 80054aa:	2100      	movs	r1, #0
 80054ac:	0018      	movs	r0, r3
 80054ae:	f008 fa1b 	bl	800d8e8 <HAL_UARTEx_SetTxFifoThreshold>
 80054b2:	1e03      	subs	r3, r0, #0
 80054b4:	d001      	beq.n	80054ba <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80054b6:	f001 fe4d 	bl	8007154 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80054ba:	4b0a      	ldr	r3, [pc, #40]	@ (80054e4 <MX_USART2_UART_Init+0x94>)
 80054bc:	2100      	movs	r1, #0
 80054be:	0018      	movs	r0, r3
 80054c0:	f008 fa52 	bl	800d968 <HAL_UARTEx_SetRxFifoThreshold>
 80054c4:	1e03      	subs	r3, r0, #0
 80054c6:	d001      	beq.n	80054cc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80054c8:	f001 fe44 	bl	8007154 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80054cc:	4b05      	ldr	r3, [pc, #20]	@ (80054e4 <MX_USART2_UART_Init+0x94>)
 80054ce:	0018      	movs	r0, r3
 80054d0:	f008 f9d0 	bl	800d874 <HAL_UARTEx_DisableFifoMode>
 80054d4:	1e03      	subs	r3, r0, #0
 80054d6:	d001      	beq.n	80054dc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80054d8:	f001 fe3c 	bl	8007154 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80054dc:	46c0      	nop			@ (mov r8, r8)
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	46c0      	nop			@ (mov r8, r8)
 80054e4:	20001450 	.word	0x20001450
 80054e8:	40004400 	.word	0x40004400

080054ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80054ec:	b590      	push	{r4, r7, lr}
 80054ee:	b08b      	sub	sp, #44	@ 0x2c
 80054f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054f2:	2414      	movs	r4, #20
 80054f4:	193b      	adds	r3, r7, r4
 80054f6:	0018      	movs	r0, r3
 80054f8:	2314      	movs	r3, #20
 80054fa:	001a      	movs	r2, r3
 80054fc:	2100      	movs	r1, #0
 80054fe:	f009 fb61 	bl	800ebc4 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005502:	4b4d      	ldr	r3, [pc, #308]	@ (8005638 <MX_GPIO_Init+0x14c>)
 8005504:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005506:	4b4c      	ldr	r3, [pc, #304]	@ (8005638 <MX_GPIO_Init+0x14c>)
 8005508:	2104      	movs	r1, #4
 800550a:	430a      	orrs	r2, r1
 800550c:	635a      	str	r2, [r3, #52]	@ 0x34
 800550e:	4b4a      	ldr	r3, [pc, #296]	@ (8005638 <MX_GPIO_Init+0x14c>)
 8005510:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005512:	2204      	movs	r2, #4
 8005514:	4013      	ands	r3, r2
 8005516:	613b      	str	r3, [r7, #16]
 8005518:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800551a:	4b47      	ldr	r3, [pc, #284]	@ (8005638 <MX_GPIO_Init+0x14c>)
 800551c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800551e:	4b46      	ldr	r3, [pc, #280]	@ (8005638 <MX_GPIO_Init+0x14c>)
 8005520:	2101      	movs	r1, #1
 8005522:	430a      	orrs	r2, r1
 8005524:	635a      	str	r2, [r3, #52]	@ 0x34
 8005526:	4b44      	ldr	r3, [pc, #272]	@ (8005638 <MX_GPIO_Init+0x14c>)
 8005528:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800552a:	2201      	movs	r2, #1
 800552c:	4013      	ands	r3, r2
 800552e:	60fb      	str	r3, [r7, #12]
 8005530:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005532:	4b41      	ldr	r3, [pc, #260]	@ (8005638 <MX_GPIO_Init+0x14c>)
 8005534:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005536:	4b40      	ldr	r3, [pc, #256]	@ (8005638 <MX_GPIO_Init+0x14c>)
 8005538:	2102      	movs	r1, #2
 800553a:	430a      	orrs	r2, r1
 800553c:	635a      	str	r2, [r3, #52]	@ 0x34
 800553e:	4b3e      	ldr	r3, [pc, #248]	@ (8005638 <MX_GPIO_Init+0x14c>)
 8005540:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005542:	2202      	movs	r2, #2
 8005544:	4013      	ands	r3, r2
 8005546:	60bb      	str	r3, [r7, #8]
 8005548:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800554a:	4b3b      	ldr	r3, [pc, #236]	@ (8005638 <MX_GPIO_Init+0x14c>)
 800554c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800554e:	4b3a      	ldr	r3, [pc, #232]	@ (8005638 <MX_GPIO_Init+0x14c>)
 8005550:	2108      	movs	r1, #8
 8005552:	430a      	orrs	r2, r1
 8005554:	635a      	str	r2, [r3, #52]	@ 0x34
 8005556:	4b38      	ldr	r3, [pc, #224]	@ (8005638 <MX_GPIO_Init+0x14c>)
 8005558:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800555a:	2208      	movs	r2, #8
 800555c:	4013      	ands	r3, r2
 800555e:	607b      	str	r3, [r7, #4]
 8005560:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_15, GPIO_PIN_RESET);
 8005562:	4936      	ldr	r1, [pc, #216]	@ (800563c <MX_GPIO_Init+0x150>)
 8005564:	23a0      	movs	r3, #160	@ 0xa0
 8005566:	05db      	lsls	r3, r3, #23
 8005568:	2200      	movs	r2, #0
 800556a:	0018      	movs	r0, r3
 800556c:	f003 ffc5 	bl	80094fa <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8005570:	193b      	adds	r3, r7, r4
 8005572:	2202      	movs	r2, #2
 8005574:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005576:	193b      	adds	r3, r7, r4
 8005578:	2288      	movs	r2, #136	@ 0x88
 800557a:	0352      	lsls	r2, r2, #13
 800557c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800557e:	193b      	adds	r3, r7, r4
 8005580:	2200      	movs	r2, #0
 8005582:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005584:	193b      	adds	r3, r7, r4
 8005586:	4a2e      	ldr	r2, [pc, #184]	@ (8005640 <MX_GPIO_Init+0x154>)
 8005588:	0019      	movs	r1, r3
 800558a:	0010      	movs	r0, r2
 800558c:	f003 fe2c 	bl	80091e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA4 PA5 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_15;
 8005590:	193b      	adds	r3, r7, r4
 8005592:	4a2a      	ldr	r2, [pc, #168]	@ (800563c <MX_GPIO_Init+0x150>)
 8005594:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005596:	193b      	adds	r3, r7, r4
 8005598:	2201      	movs	r2, #1
 800559a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800559c:	193b      	adds	r3, r7, r4
 800559e:	2200      	movs	r2, #0
 80055a0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055a2:	193b      	adds	r3, r7, r4
 80055a4:	2200      	movs	r2, #0
 80055a6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055a8:	193a      	adds	r2, r7, r4
 80055aa:	23a0      	movs	r3, #160	@ 0xa0
 80055ac:	05db      	lsls	r3, r3, #23
 80055ae:	0011      	movs	r1, r2
 80055b0:	0018      	movs	r0, r3
 80055b2:	f003 fe19 	bl	80091e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80055b6:	0021      	movs	r1, r4
 80055b8:	187b      	adds	r3, r7, r1
 80055ba:	2204      	movs	r2, #4
 80055bc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80055be:	187b      	adds	r3, r7, r1
 80055c0:	2288      	movs	r2, #136	@ 0x88
 80055c2:	0352      	lsls	r2, r2, #13
 80055c4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055c6:	187b      	adds	r3, r7, r1
 80055c8:	2200      	movs	r2, #0
 80055ca:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055cc:	000c      	movs	r4, r1
 80055ce:	187b      	adds	r3, r7, r1
 80055d0:	4a1c      	ldr	r2, [pc, #112]	@ (8005644 <MX_GPIO_Init+0x158>)
 80055d2:	0019      	movs	r1, r3
 80055d4:	0010      	movs	r0, r2
 80055d6:	f003 fe07 	bl	80091e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80055da:	0021      	movs	r1, r4
 80055dc:	187b      	adds	r3, r7, r1
 80055de:	2280      	movs	r2, #128	@ 0x80
 80055e0:	0112      	lsls	r2, r2, #4
 80055e2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80055e4:	187b      	adds	r3, r7, r1
 80055e6:	2288      	movs	r2, #136	@ 0x88
 80055e8:	0352      	lsls	r2, r2, #13
 80055ea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055ec:	187b      	adds	r3, r7, r1
 80055ee:	2200      	movs	r2, #0
 80055f0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055f2:	187a      	adds	r2, r7, r1
 80055f4:	23a0      	movs	r3, #160	@ 0xa0
 80055f6:	05db      	lsls	r3, r3, #23
 80055f8:	0011      	movs	r1, r2
 80055fa:	0018      	movs	r0, r3
 80055fc:	f003 fdf4 	bl	80091e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8005600:	2200      	movs	r2, #0
 8005602:	2100      	movs	r1, #0
 8005604:	2005      	movs	r0, #5
 8005606:	f003 fc0b 	bl	8008e20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800560a:	2005      	movs	r0, #5
 800560c:	f003 fc1d 	bl	8008e4a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8005610:	2200      	movs	r2, #0
 8005612:	2100      	movs	r1, #0
 8005614:	2006      	movs	r0, #6
 8005616:	f003 fc03 	bl	8008e20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 800561a:	2006      	movs	r0, #6
 800561c:	f003 fc15 	bl	8008e4a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8005620:	2200      	movs	r2, #0
 8005622:	2100      	movs	r1, #0
 8005624:	2007      	movs	r0, #7
 8005626:	f003 fbfb 	bl	8008e20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800562a:	2007      	movs	r0, #7
 800562c:	f003 fc0d 	bl	8008e4a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8005630:	46c0      	nop			@ (mov r8, r8)
 8005632:	46bd      	mov	sp, r7
 8005634:	b00b      	add	sp, #44	@ 0x2c
 8005636:	bd90      	pop	{r4, r7, pc}
 8005638:	40021000 	.word	0x40021000
 800563c:	00008031 	.word	0x00008031
 8005640:	50000800 	.word	0x50000800
 8005644:	50000400 	.word	0x50000400

08005648 <ChangeNote>:

/* USER CODE BEGIN 4 */
void ChangeNote(enum Scale freq) {
 8005648:	b590      	push	{r4, r7, lr}
 800564a:	b083      	sub	sp, #12
 800564c:	af00      	add	r7, sp, #0
 800564e:	0002      	movs	r2, r0
 8005650:	1dbb      	adds	r3, r7, #6
 8005652:	801a      	strh	r2, [r3, #0]
	TIM17->ARR = (uint32_t) (987 * (float) 1000 / (float) freq);
 8005654:	1dbb      	adds	r3, r7, #6
 8005656:	881b      	ldrh	r3, [r3, #0]
 8005658:	0018      	movs	r0, r3
 800565a:	f7fb fffd 	bl	8001658 <__aeabi_ui2f>
 800565e:	1c03      	adds	r3, r0, #0
 8005660:	1c19      	adds	r1, r3, #0
 8005662:	4807      	ldr	r0, [pc, #28]	@ (8005680 <ChangeNote+0x38>)
 8005664:	f7fb faae 	bl	8000bc4 <__aeabi_fdiv>
 8005668:	1c03      	adds	r3, r0, #0
 800566a:	4c06      	ldr	r4, [pc, #24]	@ (8005684 <ChangeNote+0x3c>)
 800566c:	1c18      	adds	r0, r3, #0
 800566e:	f7fa ffad 	bl	80005cc <__aeabi_f2uiz>
 8005672:	0003      	movs	r3, r0
 8005674:	62e3      	str	r3, [r4, #44]	@ 0x2c
}
 8005676:	46c0      	nop			@ (mov r8, r8)
 8005678:	46bd      	mov	sp, r7
 800567a:	b003      	add	sp, #12
 800567c:	bd90      	pop	{r4, r7, pc}
 800567e:	46c0      	nop			@ (mov r8, r8)
 8005680:	4970f780 	.word	0x4970f780
 8005684:	40014800 	.word	0x40014800

08005688 <PlayEffect>:
void PlayEffect(enum SoundEffects effect) {
 8005688:	b580      	push	{r7, lr}
 800568a:	b082      	sub	sp, #8
 800568c:	af00      	add	r7, sp, #0
 800568e:	0002      	movs	r2, r0
 8005690:	1dfb      	adds	r3, r7, #7
 8005692:	701a      	strb	r2, [r3, #0]
	HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8005694:	4ba0      	ldr	r3, [pc, #640]	@ (8005918 <PlayEffect+0x290>)
 8005696:	2100      	movs	r1, #0
 8005698:	0018      	movs	r0, r3
 800569a:	f006 fae9 	bl	800bc70 <HAL_TIM_PWM_Start>
	HAL_Delay(5);
 800569e:	2005      	movs	r0, #5
 80056a0:	f003 fad8 	bl	8008c54 <HAL_Delay>
	switch (effect) {
 80056a4:	1dfb      	adds	r3, r7, #7
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	2b06      	cmp	r3, #6
 80056aa:	d900      	bls.n	80056ae <PlayEffect+0x26>
 80056ac:	e12a      	b.n	8005904 <PlayEffect+0x27c>
 80056ae:	009a      	lsls	r2, r3, #2
 80056b0:	4b9a      	ldr	r3, [pc, #616]	@ (800591c <PlayEffect+0x294>)
 80056b2:	18d3      	adds	r3, r2, r3
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	469f      	mov	pc, r3
	case MenuBeep:

		curNote = G * 3;
 80056b8:	4b99      	ldr	r3, [pc, #612]	@ (8005920 <PlayEffect+0x298>)
 80056ba:	2293      	movs	r2, #147	@ 0x93
 80056bc:	0112      	lsls	r2, r2, #4
 80056be:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 80056c0:	4b97      	ldr	r3, [pc, #604]	@ (8005920 <PlayEffect+0x298>)
 80056c2:	881b      	ldrh	r3, [r3, #0]
 80056c4:	0018      	movs	r0, r3
 80056c6:	f7ff ffbf 	bl	8005648 <ChangeNote>
		HAL_Delay(25);
 80056ca:	2019      	movs	r0, #25
 80056cc:	f003 fac2 	bl	8008c54 <HAL_Delay>

		curNote = G * 2;
 80056d0:	4b93      	ldr	r3, [pc, #588]	@ (8005920 <PlayEffect+0x298>)
 80056d2:	22c4      	movs	r2, #196	@ 0xc4
 80056d4:	00d2      	lsls	r2, r2, #3
 80056d6:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 80056d8:	4b91      	ldr	r3, [pc, #580]	@ (8005920 <PlayEffect+0x298>)
 80056da:	881b      	ldrh	r3, [r3, #0]
 80056dc:	0018      	movs	r0, r3
 80056de:	f7ff ffb3 	bl	8005648 <ChangeNote>
		HAL_Delay(25);
 80056e2:	2019      	movs	r0, #25
 80056e4:	f003 fab6 	bl	8008c54 <HAL_Delay>

		break;
 80056e8:	e10c      	b.n	8005904 <PlayEffect+0x27c>
	case EggNoise:

		curNote = A;
 80056ea:	4b8d      	ldr	r3, [pc, #564]	@ (8005920 <PlayEffect+0x298>)
 80056ec:	22dc      	movs	r2, #220	@ 0xdc
 80056ee:	0052      	lsls	r2, r2, #1
 80056f0:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 80056f2:	4b8b      	ldr	r3, [pc, #556]	@ (8005920 <PlayEffect+0x298>)
 80056f4:	881b      	ldrh	r3, [r3, #0]
 80056f6:	0018      	movs	r0, r3
 80056f8:	f7ff ffa6 	bl	8005648 <ChangeNote>
		HAL_Delay(20);
 80056fc:	2014      	movs	r0, #20
 80056fe:	f003 faa9 	bl	8008c54 <HAL_Delay>

		curNote = C;
 8005702:	4b87      	ldr	r3, [pc, #540]	@ (8005920 <PlayEffect+0x298>)
 8005704:	4a87      	ldr	r2, [pc, #540]	@ (8005924 <PlayEffect+0x29c>)
 8005706:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 8005708:	4b85      	ldr	r3, [pc, #532]	@ (8005920 <PlayEffect+0x298>)
 800570a:	881b      	ldrh	r3, [r3, #0]
 800570c:	0018      	movs	r0, r3
 800570e:	f7ff ff9b 	bl	8005648 <ChangeNote>
		HAL_Delay(20);
 8005712:	2014      	movs	r0, #20
 8005714:	f003 fa9e 	bl	8008c54 <HAL_Delay>

		curNote = A;
 8005718:	4b81      	ldr	r3, [pc, #516]	@ (8005920 <PlayEffect+0x298>)
 800571a:	22dc      	movs	r2, #220	@ 0xdc
 800571c:	0052      	lsls	r2, r2, #1
 800571e:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 8005720:	4b7f      	ldr	r3, [pc, #508]	@ (8005920 <PlayEffect+0x298>)
 8005722:	881b      	ldrh	r3, [r3, #0]
 8005724:	0018      	movs	r0, r3
 8005726:	f7ff ff8f 	bl	8005648 <ChangeNote>
		HAL_Delay(20);
 800572a:	2014      	movs	r0, #20
 800572c:	f003 fa92 	bl	8008c54 <HAL_Delay>

		curNote = C;
 8005730:	4b7b      	ldr	r3, [pc, #492]	@ (8005920 <PlayEffect+0x298>)
 8005732:	4a7c      	ldr	r2, [pc, #496]	@ (8005924 <PlayEffect+0x29c>)
 8005734:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 8005736:	4b7a      	ldr	r3, [pc, #488]	@ (8005920 <PlayEffect+0x298>)
 8005738:	881b      	ldrh	r3, [r3, #0]
 800573a:	0018      	movs	r0, r3
 800573c:	f7ff ff84 	bl	8005648 <ChangeNote>
		HAL_Delay(20);
 8005740:	2014      	movs	r0, #20
 8005742:	f003 fa87 	bl	8008c54 <HAL_Delay>

		break;
 8005746:	e0dd      	b.n	8005904 <PlayEffect+0x27c>
	case YoungNoiseHappy:

		curNote = F * 4;
 8005748:	4b75      	ldr	r3, [pc, #468]	@ (8005920 <PlayEffect+0x298>)
 800574a:	4a77      	ldr	r2, [pc, #476]	@ (8005928 <PlayEffect+0x2a0>)
 800574c:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 800574e:	4b74      	ldr	r3, [pc, #464]	@ (8005920 <PlayEffect+0x298>)
 8005750:	881b      	ldrh	r3, [r3, #0]
 8005752:	0018      	movs	r0, r3
 8005754:	f7ff ff78 	bl	8005648 <ChangeNote>
		HAL_Delay(35);
 8005758:	2023      	movs	r0, #35	@ 0x23
 800575a:	f003 fa7b 	bl	8008c54 <HAL_Delay>

		curNote = B * 4;
 800575e:	4b70      	ldr	r3, [pc, #448]	@ (8005920 <PlayEffect+0x298>)
 8005760:	22f7      	movs	r2, #247	@ 0xf7
 8005762:	00d2      	lsls	r2, r2, #3
 8005764:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 8005766:	4b6e      	ldr	r3, [pc, #440]	@ (8005920 <PlayEffect+0x298>)
 8005768:	881b      	ldrh	r3, [r3, #0]
 800576a:	0018      	movs	r0, r3
 800576c:	f7ff ff6c 	bl	8005648 <ChangeNote>
		HAL_Delay(15);
 8005770:	200f      	movs	r0, #15
 8005772:	f003 fa6f 	bl	8008c54 <HAL_Delay>

		break;
 8005776:	e0c5      	b.n	8005904 <PlayEffect+0x27c>
	case YoungNoiseSad:

		curNote = B * 4;
 8005778:	4b69      	ldr	r3, [pc, #420]	@ (8005920 <PlayEffect+0x298>)
 800577a:	22f7      	movs	r2, #247	@ 0xf7
 800577c:	00d2      	lsls	r2, r2, #3
 800577e:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 8005780:	4b67      	ldr	r3, [pc, #412]	@ (8005920 <PlayEffect+0x298>)
 8005782:	881b      	ldrh	r3, [r3, #0]
 8005784:	0018      	movs	r0, r3
 8005786:	f7ff ff5f 	bl	8005648 <ChangeNote>
		HAL_Delay(35);
 800578a:	2023      	movs	r0, #35	@ 0x23
 800578c:	f003 fa62 	bl	8008c54 <HAL_Delay>

		curNote = B * 3;
 8005790:	4b63      	ldr	r3, [pc, #396]	@ (8005920 <PlayEffect+0x298>)
 8005792:	4a66      	ldr	r2, [pc, #408]	@ (800592c <PlayEffect+0x2a4>)
 8005794:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 8005796:	4b62      	ldr	r3, [pc, #392]	@ (8005920 <PlayEffect+0x298>)
 8005798:	881b      	ldrh	r3, [r3, #0]
 800579a:	0018      	movs	r0, r3
 800579c:	f7ff ff54 	bl	8005648 <ChangeNote>
		HAL_Delay(15);
 80057a0:	200f      	movs	r0, #15
 80057a2:	f003 fa57 	bl	8008c54 <HAL_Delay>

		break;
 80057a6:	e0ad      	b.n	8005904 <PlayEffect+0x27c>
	case AdultNoiseHappy:

		curNote = F / 4;
 80057a8:	4b5d      	ldr	r3, [pc, #372]	@ (8005920 <PlayEffect+0x298>)
 80057aa:	22ae      	movs	r2, #174	@ 0xae
 80057ac:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 80057ae:	4b5c      	ldr	r3, [pc, #368]	@ (8005920 <PlayEffect+0x298>)
 80057b0:	881b      	ldrh	r3, [r3, #0]
 80057b2:	0018      	movs	r0, r3
 80057b4:	f7ff ff48 	bl	8005648 <ChangeNote>
		HAL_Delay(35);
 80057b8:	2023      	movs	r0, #35	@ 0x23
 80057ba:	f003 fa4b 	bl	8008c54 <HAL_Delay>

		curNote = B / 4;
 80057be:	4b58      	ldr	r3, [pc, #352]	@ (8005920 <PlayEffect+0x298>)
 80057c0:	227b      	movs	r2, #123	@ 0x7b
 80057c2:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 80057c4:	4b56      	ldr	r3, [pc, #344]	@ (8005920 <PlayEffect+0x298>)
 80057c6:	881b      	ldrh	r3, [r3, #0]
 80057c8:	0018      	movs	r0, r3
 80057ca:	f7ff ff3d 	bl	8005648 <ChangeNote>
		HAL_Delay(15);
 80057ce:	200f      	movs	r0, #15
 80057d0:	f003 fa40 	bl	8008c54 <HAL_Delay>

		break;
 80057d4:	e096      	b.n	8005904 <PlayEffect+0x27c>
	case AdultNoiseSad:

		curNote = C / 4;
 80057d6:	4b52      	ldr	r3, [pc, #328]	@ (8005920 <PlayEffect+0x298>)
 80057d8:	2282      	movs	r2, #130	@ 0x82
 80057da:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 80057dc:	4b50      	ldr	r3, [pc, #320]	@ (8005920 <PlayEffect+0x298>)
 80057de:	881b      	ldrh	r3, [r3, #0]
 80057e0:	0018      	movs	r0, r3
 80057e2:	f7ff ff31 	bl	8005648 <ChangeNote>
		HAL_Delay(35);
 80057e6:	2023      	movs	r0, #35	@ 0x23
 80057e8:	f003 fa34 	bl	8008c54 <HAL_Delay>

		curNote = A / 4;
 80057ec:	4b4c      	ldr	r3, [pc, #304]	@ (8005920 <PlayEffect+0x298>)
 80057ee:	226e      	movs	r2, #110	@ 0x6e
 80057f0:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 80057f2:	4b4b      	ldr	r3, [pc, #300]	@ (8005920 <PlayEffect+0x298>)
 80057f4:	881b      	ldrh	r3, [r3, #0]
 80057f6:	0018      	movs	r0, r3
 80057f8:	f7ff ff26 	bl	8005648 <ChangeNote>
		HAL_Delay(15);
 80057fc:	200f      	movs	r0, #15
 80057fe:	f003 fa29 	bl	8008c54 <HAL_Delay>

		break;
 8005802:	e07f      	b.n	8005904 <PlayEffect+0x27c>
	case Evolution:

		curNote = A * 2;
 8005804:	4b46      	ldr	r3, [pc, #280]	@ (8005920 <PlayEffect+0x298>)
 8005806:	22dc      	movs	r2, #220	@ 0xdc
 8005808:	0092      	lsls	r2, r2, #2
 800580a:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 800580c:	4b44      	ldr	r3, [pc, #272]	@ (8005920 <PlayEffect+0x298>)
 800580e:	881b      	ldrh	r3, [r3, #0]
 8005810:	0018      	movs	r0, r3
 8005812:	f7ff ff19 	bl	8005648 <ChangeNote>
		HAL_Delay(50);
 8005816:	2032      	movs	r0, #50	@ 0x32
 8005818:	f003 fa1c 	bl	8008c54 <HAL_Delay>

		curNote = B * 2;
 800581c:	4b40      	ldr	r3, [pc, #256]	@ (8005920 <PlayEffect+0x298>)
 800581e:	22f7      	movs	r2, #247	@ 0xf7
 8005820:	0092      	lsls	r2, r2, #2
 8005822:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 8005824:	4b3e      	ldr	r3, [pc, #248]	@ (8005920 <PlayEffect+0x298>)
 8005826:	881b      	ldrh	r3, [r3, #0]
 8005828:	0018      	movs	r0, r3
 800582a:	f7ff ff0d 	bl	8005648 <ChangeNote>
		HAL_Delay(50);
 800582e:	2032      	movs	r0, #50	@ 0x32
 8005830:	f003 fa10 	bl	8008c54 <HAL_Delay>

		curNote = C * 2;
 8005834:	4b3a      	ldr	r3, [pc, #232]	@ (8005920 <PlayEffect+0x298>)
 8005836:	4a3e      	ldr	r2, [pc, #248]	@ (8005930 <PlayEffect+0x2a8>)
 8005838:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 800583a:	4b39      	ldr	r3, [pc, #228]	@ (8005920 <PlayEffect+0x298>)
 800583c:	881b      	ldrh	r3, [r3, #0]
 800583e:	0018      	movs	r0, r3
 8005840:	f7ff ff02 	bl	8005648 <ChangeNote>
		HAL_Delay(50);
 8005844:	2032      	movs	r0, #50	@ 0x32
 8005846:	f003 fa05 	bl	8008c54 <HAL_Delay>

		curNote = A * 2;
 800584a:	4b35      	ldr	r3, [pc, #212]	@ (8005920 <PlayEffect+0x298>)
 800584c:	22dc      	movs	r2, #220	@ 0xdc
 800584e:	0092      	lsls	r2, r2, #2
 8005850:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 8005852:	4b33      	ldr	r3, [pc, #204]	@ (8005920 <PlayEffect+0x298>)
 8005854:	881b      	ldrh	r3, [r3, #0]
 8005856:	0018      	movs	r0, r3
 8005858:	f7ff fef6 	bl	8005648 <ChangeNote>
		HAL_Delay(50);
 800585c:	2032      	movs	r0, #50	@ 0x32
 800585e:	f003 f9f9 	bl	8008c54 <HAL_Delay>

		curNote = C * 2;
 8005862:	4b2f      	ldr	r3, [pc, #188]	@ (8005920 <PlayEffect+0x298>)
 8005864:	4a32      	ldr	r2, [pc, #200]	@ (8005930 <PlayEffect+0x2a8>)
 8005866:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 8005868:	4b2d      	ldr	r3, [pc, #180]	@ (8005920 <PlayEffect+0x298>)
 800586a:	881b      	ldrh	r3, [r3, #0]
 800586c:	0018      	movs	r0, r3
 800586e:	f7ff feeb 	bl	8005648 <ChangeNote>
		HAL_Delay(50);
 8005872:	2032      	movs	r0, #50	@ 0x32
 8005874:	f003 f9ee 	bl	8008c54 <HAL_Delay>

		curNote = D * 2;
 8005878:	4b29      	ldr	r3, [pc, #164]	@ (8005920 <PlayEffect+0x298>)
 800587a:	4a2e      	ldr	r2, [pc, #184]	@ (8005934 <PlayEffect+0x2ac>)
 800587c:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 800587e:	4b28      	ldr	r3, [pc, #160]	@ (8005920 <PlayEffect+0x298>)
 8005880:	881b      	ldrh	r3, [r3, #0]
 8005882:	0018      	movs	r0, r3
 8005884:	f7ff fee0 	bl	8005648 <ChangeNote>
		HAL_Delay(50);
 8005888:	2032      	movs	r0, #50	@ 0x32
 800588a:	f003 f9e3 	bl	8008c54 <HAL_Delay>

		curNote = B * 2;
 800588e:	4b24      	ldr	r3, [pc, #144]	@ (8005920 <PlayEffect+0x298>)
 8005890:	22f7      	movs	r2, #247	@ 0xf7
 8005892:	0092      	lsls	r2, r2, #2
 8005894:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 8005896:	4b22      	ldr	r3, [pc, #136]	@ (8005920 <PlayEffect+0x298>)
 8005898:	881b      	ldrh	r3, [r3, #0]
 800589a:	0018      	movs	r0, r3
 800589c:	f7ff fed4 	bl	8005648 <ChangeNote>
		HAL_Delay(50);
 80058a0:	2032      	movs	r0, #50	@ 0x32
 80058a2:	f003 f9d7 	bl	8008c54 <HAL_Delay>

		curNote = D * 2;
 80058a6:	4b1e      	ldr	r3, [pc, #120]	@ (8005920 <PlayEffect+0x298>)
 80058a8:	4a22      	ldr	r2, [pc, #136]	@ (8005934 <PlayEffect+0x2ac>)
 80058aa:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 80058ac:	4b1c      	ldr	r3, [pc, #112]	@ (8005920 <PlayEffect+0x298>)
 80058ae:	881b      	ldrh	r3, [r3, #0]
 80058b0:	0018      	movs	r0, r3
 80058b2:	f7ff fec9 	bl	8005648 <ChangeNote>
		HAL_Delay(50);
 80058b6:	2032      	movs	r0, #50	@ 0x32
 80058b8:	f003 f9cc 	bl	8008c54 <HAL_Delay>

		curNote = E * 2;
 80058bc:	4b18      	ldr	r3, [pc, #96]	@ (8005920 <PlayEffect+0x298>)
 80058be:	4a1e      	ldr	r2, [pc, #120]	@ (8005938 <PlayEffect+0x2b0>)
 80058c0:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 80058c2:	4b17      	ldr	r3, [pc, #92]	@ (8005920 <PlayEffect+0x298>)
 80058c4:	881b      	ldrh	r3, [r3, #0]
 80058c6:	0018      	movs	r0, r3
 80058c8:	f7ff febe 	bl	8005648 <ChangeNote>
		HAL_Delay(50);
 80058cc:	2032      	movs	r0, #50	@ 0x32
 80058ce:	f003 f9c1 	bl	8008c54 <HAL_Delay>

		curNote = G * 2;
 80058d2:	4b13      	ldr	r3, [pc, #76]	@ (8005920 <PlayEffect+0x298>)
 80058d4:	22c4      	movs	r2, #196	@ 0xc4
 80058d6:	00d2      	lsls	r2, r2, #3
 80058d8:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 80058da:	4b11      	ldr	r3, [pc, #68]	@ (8005920 <PlayEffect+0x298>)
 80058dc:	881b      	ldrh	r3, [r3, #0]
 80058de:	0018      	movs	r0, r3
 80058e0:	f7ff feb2 	bl	8005648 <ChangeNote>
		HAL_Delay(50);
 80058e4:	2032      	movs	r0, #50	@ 0x32
 80058e6:	f003 f9b5 	bl	8008c54 <HAL_Delay>

		curNote = G * 2;
 80058ea:	4b0d      	ldr	r3, [pc, #52]	@ (8005920 <PlayEffect+0x298>)
 80058ec:	22c4      	movs	r2, #196	@ 0xc4
 80058ee:	00d2      	lsls	r2, r2, #3
 80058f0:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 80058f2:	4b0b      	ldr	r3, [pc, #44]	@ (8005920 <PlayEffect+0x298>)
 80058f4:	881b      	ldrh	r3, [r3, #0]
 80058f6:	0018      	movs	r0, r3
 80058f8:	f7ff fea6 	bl	8005648 <ChangeNote>
		HAL_Delay(50);
 80058fc:	2032      	movs	r0, #50	@ 0x32
 80058fe:	f003 f9a9 	bl	8008c54 <HAL_Delay>

		break;
 8005902:	46c0      	nop			@ (mov r8, r8)
	}
	HAL_TIM_PWM_Stop(&htim17, TIM_CHANNEL_1);
 8005904:	4b04      	ldr	r3, [pc, #16]	@ (8005918 <PlayEffect+0x290>)
 8005906:	2100      	movs	r1, #0
 8005908:	0018      	movs	r0, r3
 800590a:	f006 faa1 	bl	800be50 <HAL_TIM_PWM_Stop>
}
 800590e:	46c0      	nop			@ (mov r8, r8)
 8005910:	46bd      	mov	sp, r7
 8005912:	b002      	add	sp, #8
 8005914:	bd80      	pop	{r7, pc}
 8005916:	46c0      	nop			@ (mov r8, r8)
 8005918:	20001370 	.word	0x20001370
 800591c:	0801bc14 	.word	0x0801bc14
 8005920:	20000296 	.word	0x20000296
 8005924:	0000020b 	.word	0x0000020b
 8005928:	00000ae8 	.word	0x00000ae8
 800592c:	000005ca 	.word	0x000005ca
 8005930:	00000416 	.word	0x00000416
 8005934:	00000496 	.word	0x00000496
 8005938:	00000526 	.word	0x00000526

0800593c <HAL_GPIO_EXTI_Rising_Callback>:
//INTERRUPTS ARE CALLED BACK HERE
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin) {
 800593c:	b580      	push	{r7, lr}
 800593e:	b082      	sub	sp, #8
 8005940:	af00      	add	r7, sp, #0
 8005942:	0002      	movs	r2, r0
 8005944:	1dbb      	adds	r3, r7, #6
 8005946:	801a      	strh	r2, [r3, #0]
	 //Left=2048
	 else if(GPIO_PIN==2048)
	 {

	 }*/
}
 8005948:	46c0      	nop			@ (mov r8, r8)
 800594a:	46bd      	mov	sp, r7
 800594c:	b002      	add	sp, #8
 800594e:	bd80      	pop	{r7, pc}

08005950 <PeripheralInit>:

//AURORA: Put custom functions here!
void PeripheralInit(void) {
 8005950:	b580      	push	{r7, lr}
 8005952:	af00      	add	r7, sp, #0
	ST7735_Unselect();
 8005954:	f7fe fbb8 	bl	80040c8 <ST7735_Unselect>
	ST7735_Init(1);
 8005958:	2001      	movs	r0, #1
 800595a:	f7fe fcc9 	bl	80042f0 <ST7735_Init>

	fillScreen(BLACK);
 800595e:	2000      	movs	r0, #0
 8005960:	f7fe fa5c 	bl	8003e1c <fillScreen>
	buffer[0] = 'A';
 8005964:	4b17      	ldr	r3, [pc, #92]	@ (80059c4 <PeripheralInit+0x74>)
 8005966:	2241      	movs	r2, #65	@ 0x41
 8005968:	701a      	strb	r2, [r3, #0]
	buffer[1] = 'B';
 800596a:	4b16      	ldr	r3, [pc, #88]	@ (80059c4 <PeripheralInit+0x74>)
 800596c:	2242      	movs	r2, #66	@ 0x42
 800596e:	705a      	strb	r2, [r3, #1]
	TIM17->CCR1 = 5;
 8005970:	4b15      	ldr	r3, [pc, #84]	@ (80059c8 <PeripheralInit+0x78>)
 8005972:	2205      	movs	r2, #5
 8005974:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM17->PSC = 64;
 8005976:	4b14      	ldr	r3, [pc, #80]	@ (80059c8 <PeripheralInit+0x78>)
 8005978:	2240      	movs	r2, #64	@ 0x40
 800597a:	629a      	str	r2, [r3, #40]	@ 0x28
	//uint8_t ret=0;
	//_ADXL343_Init();

	//Pedometer Setup
	_ADXL343_WriteReg8(0x19, 0x02);
 800597c:	2102      	movs	r1, #2
 800597e:	2019      	movs	r0, #25
 8005980:	f000 fe3a 	bl	80065f8 <_ADXL343_WriteReg8>
	////wait

	_ADXL343_WriteReg8(0x7C, 0x01);
 8005984:	2101      	movs	r1, #1
 8005986:	207c      	movs	r0, #124	@ 0x7c
 8005988:	f000 fe36 	bl	80065f8 <_ADXL343_WriteReg8>
	_ADXL343_WriteReg8(0x1A, 0x38);
 800598c:	2138      	movs	r1, #56	@ 0x38
 800598e:	201a      	movs	r0, #26
 8005990:	f000 fe32 	bl	80065f8 <_ADXL343_WriteReg8>
	_ADXL343_WriteReg8(0x1B, 0x04);
 8005994:	2104      	movs	r1, #4
 8005996:	201b      	movs	r0, #27
 8005998:	f000 fe2e 	bl	80065f8 <_ADXL343_WriteReg8>
	_ADXL343_WriteReg8(0x1F, 0x80);
 800599c:	2180      	movs	r1, #128	@ 0x80
 800599e:	201f      	movs	r0, #31
 80059a0:	f000 fe2a 	bl	80065f8 <_ADXL343_WriteReg8>
	_ADXL343_WriteReg8(0x21, 0x80);
 80059a4:	2180      	movs	r1, #128	@ 0x80
 80059a6:	2021      	movs	r0, #33	@ 0x21
 80059a8:	f000 fe26 	bl	80065f8 <_ADXL343_WriteReg8>

	//  //Step Counter
	_ADXL343_WriteReg8(0x18, 0x01); // enable walking mode
 80059ac:	2101      	movs	r1, #1
 80059ae:	2018      	movs	r0, #24
 80059b0:	f000 fe22 	bl	80065f8 <_ADXL343_WriteReg8>
	_ADXL343_WriteReg8(0x20, 0x01); // enable step interrupt
 80059b4:	2101      	movs	r1, #1
 80059b6:	2020      	movs	r0, #32
 80059b8:	f000 fe1e 	bl	80065f8 <_ADXL343_WriteReg8>
}
 80059bc:	46c0      	nop			@ (mov r8, r8)
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}
 80059c2:	46c0      	nop			@ (mov r8, r8)
 80059c4:	20000450 	.word	0x20000450
 80059c8:	40014800 	.word	0x40014800

080059cc <StructInit>:
//INITIALIZE GAME VALUES
void StructInit(void) {
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b084      	sub	sp, #16
 80059d0:	af00      	add	r7, sp, #0
	steps = 0;
 80059d2:	4b7a      	ldr	r3, [pc, #488]	@ (8005bbc <StructInit+0x1f0>)
 80059d4:	2200      	movs	r2, #0
 80059d6:	601a      	str	r2, [r3, #0]
	uint32_t Address = 0x0803F800;
 80059d8:	4b79      	ldr	r3, [pc, #484]	@ (8005bc0 <StructInit+0x1f4>)
 80059da:	60fb      	str	r3, [r7, #12]
	if ((*(__IO uint64_t*) (Address)) == (uint64_t) 0x12345678) {
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	4978      	ldr	r1, [pc, #480]	@ (8005bc4 <StructInit+0x1f8>)
 80059e4:	428a      	cmp	r2, r1
 80059e6:	d000      	beq.n	80059ea <StructInit+0x1e>
 80059e8:	e0a7      	b.n	8005b3a <StructInit+0x16e>
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d000      	beq.n	80059f0 <StructInit+0x24>
 80059ee:	e0a4      	b.n	8005b3a <StructInit+0x16e>
		Address += 8;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	3308      	adds	r3, #8
 80059f4:	60fb      	str	r3, [r7, #12]
		game.allSteps = (unsigned int) (*(__IO uint64_t*) (Address));
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	0011      	movs	r1, r2
 80059fe:	4a72      	ldr	r2, [pc, #456]	@ (8005bc8 <StructInit+0x1fc>)
 8005a00:	238c      	movs	r3, #140	@ 0x8c
 8005a02:	005b      	lsls	r3, r3, #1
 8005a04:	50d1      	str	r1, [r2, r3]
		Address += 8;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	3308      	adds	r3, #8
 8005a0a:	60fb      	str	r3, [r7, #12]
		game.stepsToday = (unsigned int) (*(__IO uint64_t*) (Address));
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	0011      	movs	r1, r2
 8005a14:	4a6c      	ldr	r2, [pc, #432]	@ (8005bc8 <StructInit+0x1fc>)
 8005a16:	2390      	movs	r3, #144	@ 0x90
 8005a18:	005b      	lsls	r3, r3, #1
 8005a1a:	50d1      	str	r1, [r2, r3]
		Address += 8;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	3308      	adds	r3, #8
 8005a20:	60fb      	str	r3, [r7, #12]
		game.weeklySteps = (unsigned int) (*(__IO uint64_t*) (Address));
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	0011      	movs	r1, r2
 8005a2a:	4a67      	ldr	r2, [pc, #412]	@ (8005bc8 <StructInit+0x1fc>)
 8005a2c:	238e      	movs	r3, #142	@ 0x8e
 8005a2e:	005b      	lsls	r3, r3, #1
 8005a30:	50d1      	str	r1, [r2, r3]
		Address += 8;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	3308      	adds	r3, #8
 8005a36:	60fb      	str	r3, [r7, #12]
		game.dailyGoal = (unsigned int) (*(__IO uint64_t*) (Address));
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	0011      	movs	r1, r2
 8005a40:	4a61      	ldr	r2, [pc, #388]	@ (8005bc8 <StructInit+0x1fc>)
 8005a42:	2392      	movs	r3, #146	@ 0x92
 8005a44:	005b      	lsls	r3, r3, #1
 8005a46:	50d1      	str	r1, [r2, r3]
		Address += 8;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	3308      	adds	r3, #8
 8005a4c:	60fb      	str	r3, [r7, #12]
		game.weeklyGoal = game.dailyGoal*(game.evo+1);
 8005a4e:	4a5e      	ldr	r2, [pc, #376]	@ (8005bc8 <StructInit+0x1fc>)
 8005a50:	2392      	movs	r3, #146	@ 0x92
 8005a52:	005b      	lsls	r3, r3, #1
 8005a54:	58d3      	ldr	r3, [r2, r3]
 8005a56:	4a5c      	ldr	r2, [pc, #368]	@ (8005bc8 <StructInit+0x1fc>)
 8005a58:	7c12      	ldrb	r2, [r2, #16]
 8005a5a:	3201      	adds	r2, #1
 8005a5c:	435a      	muls	r2, r3
 8005a5e:	0011      	movs	r1, r2
 8005a60:	4a59      	ldr	r2, [pc, #356]	@ (8005bc8 <StructInit+0x1fc>)
 8005a62:	2394      	movs	r3, #148	@ 0x94
 8005a64:	005b      	lsls	r3, r3, #1
 8005a66:	50d1      	str	r1, [r2, r3]
		Address += 8;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	3308      	adds	r3, #8
 8005a6c:	60fb      	str	r3, [r7, #12]
		game.evo = (unsigned char) (*(__IO uint64_t*) (Address));
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	b2d2      	uxtb	r2, r2
 8005a76:	4b54      	ldr	r3, [pc, #336]	@ (8005bc8 <StructInit+0x1fc>)
 8005a78:	741a      	strb	r2, [r3, #16]
		Address += 8;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	3308      	adds	r3, #8
 8005a7e:	60fb      	str	r3, [r7, #12]
		game.mood = (unsigned char) (*(__IO uint64_t*) (Address));
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	b2d2      	uxtb	r2, r2
 8005a88:	4b4f      	ldr	r3, [pc, #316]	@ (8005bc8 <StructInit+0x1fc>)
 8005a8a:	745a      	strb	r2, [r3, #17]
		Address += 8;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	3308      	adds	r3, #8
 8005a90:	60fb      	str	r3, [r7, #12]
		game.numLocations = (unsigned int) (*(__IO uint64_t*) (Address));
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	4b4b      	ldr	r3, [pc, #300]	@ (8005bc8 <StructInit+0x1fc>)
 8005a9a:	615a      	str	r2, [r3, #20]
		for (int flashI = 0; flashI < 32; flashI++) {
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	60bb      	str	r3, [r7, #8]
 8005aa0:	e010      	b.n	8005ac4 <StructInit+0xf8>
			Address += 1;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	3301      	adds	r3, #1
 8005aa6:	60fb      	str	r3, [r7, #12]
			game.uid[flashI] = (char) (*(__IO uint8_t*) (Address));
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	781b      	ldrb	r3, [r3, #0]
 8005aac:	b2d8      	uxtb	r0, r3
 8005aae:	4946      	ldr	r1, [pc, #280]	@ (8005bc8 <StructInit+0x1fc>)
 8005ab0:	2396      	movs	r3, #150	@ 0x96
 8005ab2:	005b      	lsls	r3, r3, #1
 8005ab4:	68ba      	ldr	r2, [r7, #8]
 8005ab6:	188a      	adds	r2, r1, r2
 8005ab8:	18d3      	adds	r3, r2, r3
 8005aba:	1c02      	adds	r2, r0, #0
 8005abc:	701a      	strb	r2, [r3, #0]
		for (int flashI = 0; flashI < 32; flashI++) {
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	3301      	adds	r3, #1
 8005ac2:	60bb      	str	r3, [r7, #8]
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	2b1f      	cmp	r3, #31
 8005ac8:	ddeb      	ble.n	8005aa2 <StructInit+0xd6>
		}
		for (int flashI = 0; flashI < 32; flashI++) {
 8005aca:	2300      	movs	r3, #0
 8005acc:	607b      	str	r3, [r7, #4]
 8005ace:	e030      	b.n	8005b32 <StructInit+0x166>
			Address += 8;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	3308      	adds	r3, #8
 8005ad4:	60fb      	str	r3, [r7, #12]
			game.positions[flashI].lat =
					((float) ((int) (*(__IO uint64_t*) (Address)))) / 100000;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	0013      	movs	r3, r2
 8005ade:	0018      	movs	r0, r3
 8005ae0:	f7fb fd6e 	bl	80015c0 <__aeabi_i2f>
 8005ae4:	1c03      	adds	r3, r0, #0
 8005ae6:	4939      	ldr	r1, [pc, #228]	@ (8005bcc <StructInit+0x200>)
 8005ae8:	1c18      	adds	r0, r3, #0
 8005aea:	f7fb f86b 	bl	8000bc4 <__aeabi_fdiv>
 8005aee:	1c03      	adds	r3, r0, #0
 8005af0:	1c19      	adds	r1, r3, #0
			game.positions[flashI].lat =
 8005af2:	4b35      	ldr	r3, [pc, #212]	@ (8005bc8 <StructInit+0x1fc>)
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	3203      	adds	r2, #3
 8005af8:	00d2      	lsls	r2, r2, #3
 8005afa:	50d1      	str	r1, [r2, r3]
			Address += 8;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	3308      	adds	r3, #8
 8005b00:	60fb      	str	r3, [r7, #12]
			game.positions[flashI].lon =
					((float) ((int) (*(__IO uint64_t*) (Address)))) / 100000;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	0013      	movs	r3, r2
 8005b0a:	0018      	movs	r0, r3
 8005b0c:	f7fb fd58 	bl	80015c0 <__aeabi_i2f>
 8005b10:	1c03      	adds	r3, r0, #0
 8005b12:	492e      	ldr	r1, [pc, #184]	@ (8005bcc <StructInit+0x200>)
 8005b14:	1c18      	adds	r0, r3, #0
 8005b16:	f7fb f855 	bl	8000bc4 <__aeabi_fdiv>
 8005b1a:	1c03      	adds	r3, r0, #0
 8005b1c:	1c19      	adds	r1, r3, #0
			game.positions[flashI].lon =
 8005b1e:	4a2a      	ldr	r2, [pc, #168]	@ (8005bc8 <StructInit+0x1fc>)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	3303      	adds	r3, #3
 8005b24:	00db      	lsls	r3, r3, #3
 8005b26:	18d3      	adds	r3, r2, r3
 8005b28:	3304      	adds	r3, #4
 8005b2a:	6019      	str	r1, [r3, #0]
		for (int flashI = 0; flashI < 32; flashI++) {
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	3301      	adds	r3, #1
 8005b30:	607b      	str	r3, [r7, #4]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2b1f      	cmp	r3, #31
 8005b36:	ddcb      	ble.n	8005ad0 <StructInit+0x104>
		//game.positions[0] = dummy;
		//game.positions[1] = dummy;
		//game.positions[2] = dummy;
		game.time.hours = 0;
	}
}
 8005b38:	e03c      	b.n	8005bb4 <StructInit+0x1e8>
		game.evo = 0;
 8005b3a:	4b23      	ldr	r3, [pc, #140]	@ (8005bc8 <StructInit+0x1fc>)
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	741a      	strb	r2, [r3, #16]
		game.uid[0] = 'h';
 8005b40:	4a21      	ldr	r2, [pc, #132]	@ (8005bc8 <StructInit+0x1fc>)
 8005b42:	2396      	movs	r3, #150	@ 0x96
 8005b44:	005b      	lsls	r3, r3, #1
 8005b46:	2168      	movs	r1, #104	@ 0x68
 8005b48:	54d1      	strb	r1, [r2, r3]
		game.uid[1] = 'i';
 8005b4a:	4a1f      	ldr	r2, [pc, #124]	@ (8005bc8 <StructInit+0x1fc>)
 8005b4c:	232e      	movs	r3, #46	@ 0x2e
 8005b4e:	33ff      	adds	r3, #255	@ 0xff
 8005b50:	2169      	movs	r1, #105	@ 0x69
 8005b52:	54d1      	strb	r1, [r2, r3]
		game.allSteps = 0;
 8005b54:	4a1c      	ldr	r2, [pc, #112]	@ (8005bc8 <StructInit+0x1fc>)
 8005b56:	238c      	movs	r3, #140	@ 0x8c
 8005b58:	005b      	lsls	r3, r3, #1
 8005b5a:	2100      	movs	r1, #0
 8005b5c:	50d1      	str	r1, [r2, r3]
		game.mood = 40;
 8005b5e:	4b1a      	ldr	r3, [pc, #104]	@ (8005bc8 <StructInit+0x1fc>)
 8005b60:	2228      	movs	r2, #40	@ 0x28
 8005b62:	745a      	strb	r2, [r3, #17]
		game.numLocations = 0;
 8005b64:	4b18      	ldr	r3, [pc, #96]	@ (8005bc8 <StructInit+0x1fc>)
 8005b66:	2200      	movs	r2, #0
 8005b68:	615a      	str	r2, [r3, #20]
		game.stepsToday = 0;
 8005b6a:	4a17      	ldr	r2, [pc, #92]	@ (8005bc8 <StructInit+0x1fc>)
 8005b6c:	2390      	movs	r3, #144	@ 0x90
 8005b6e:	005b      	lsls	r3, r3, #1
 8005b70:	2100      	movs	r1, #0
 8005b72:	50d1      	str	r1, [r2, r3]
		game.weeklySteps = 0;
 8005b74:	4a14      	ldr	r2, [pc, #80]	@ (8005bc8 <StructInit+0x1fc>)
 8005b76:	238e      	movs	r3, #142	@ 0x8e
 8005b78:	005b      	lsls	r3, r3, #1
 8005b7a:	2100      	movs	r1, #0
 8005b7c:	50d1      	str	r1, [r2, r3]
		game.dailyGoal = 150;
 8005b7e:	4a12      	ldr	r2, [pc, #72]	@ (8005bc8 <StructInit+0x1fc>)
 8005b80:	2392      	movs	r3, #146	@ 0x92
 8005b82:	005b      	lsls	r3, r3, #1
 8005b84:	2196      	movs	r1, #150	@ 0x96
 8005b86:	50d1      	str	r1, [r2, r3]
		game.weeklyGoal = game.dailyGoal*(game.evo+1);
 8005b88:	4a0f      	ldr	r2, [pc, #60]	@ (8005bc8 <StructInit+0x1fc>)
 8005b8a:	2392      	movs	r3, #146	@ 0x92
 8005b8c:	005b      	lsls	r3, r3, #1
 8005b8e:	58d3      	ldr	r3, [r2, r3]
 8005b90:	4a0d      	ldr	r2, [pc, #52]	@ (8005bc8 <StructInit+0x1fc>)
 8005b92:	7c12      	ldrb	r2, [r2, #16]
 8005b94:	3201      	adds	r2, #1
 8005b96:	435a      	muls	r2, r3
 8005b98:	0011      	movs	r1, r2
 8005b9a:	4a0b      	ldr	r2, [pc, #44]	@ (8005bc8 <StructInit+0x1fc>)
 8005b9c:	2394      	movs	r3, #148	@ 0x94
 8005b9e:	005b      	lsls	r3, r3, #1
 8005ba0:	50d1      	str	r1, [r2, r3]
		dummy.lat = 12.34567;
 8005ba2:	4b0b      	ldr	r3, [pc, #44]	@ (8005bd0 <StructInit+0x204>)
 8005ba4:	4a0b      	ldr	r2, [pc, #44]	@ (8005bd4 <StructInit+0x208>)
 8005ba6:	601a      	str	r2, [r3, #0]
		dummy.lon = -89.10111;
 8005ba8:	4b09      	ldr	r3, [pc, #36]	@ (8005bd0 <StructInit+0x204>)
 8005baa:	4a0b      	ldr	r2, [pc, #44]	@ (8005bd8 <StructInit+0x20c>)
 8005bac:	605a      	str	r2, [r3, #4]
		game.time.hours = 0;
 8005bae:	4b06      	ldr	r3, [pc, #24]	@ (8005bc8 <StructInit+0x1fc>)
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	601a      	str	r2, [r3, #0]
}
 8005bb4:	46c0      	nop			@ (mov r8, r8)
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	b004      	add	sp, #16
 8005bba:	bd80      	pop	{r7, pc}
 8005bbc:	2000127c 	.word	0x2000127c
 8005bc0:	0803f800 	.word	0x0803f800
 8005bc4:	12345678 	.word	0x12345678
 8005bc8:	200002a8 	.word	0x200002a8
 8005bcc:	47c35000 	.word	0x47c35000
 8005bd0:	200003f4 	.word	0x200003f4
 8005bd4:	414587dd 	.word	0x414587dd
 8005bd8:	c2b233c5 	.word	0xc2b233c5

08005bdc <Evolve>:
//Method for displaying the evolution animation
void Evolve() {
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	af00      	add	r7, sp, #0
	if (game.evo < 2)
 8005be0:	4b0a      	ldr	r3, [pc, #40]	@ (8005c0c <Evolve+0x30>)
 8005be2:	7c1b      	ldrb	r3, [r3, #16]
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d80d      	bhi.n	8005c04 <Evolve+0x28>
	{
		effect = Evolution;
 8005be8:	4b09      	ldr	r3, [pc, #36]	@ (8005c10 <Evolve+0x34>)
 8005bea:	2206      	movs	r2, #6
 8005bec:	701a      	strb	r2, [r3, #0]
		PlayEffect(effect);
 8005bee:	4b08      	ldr	r3, [pc, #32]	@ (8005c10 <Evolve+0x34>)
 8005bf0:	781b      	ldrb	r3, [r3, #0]
 8005bf2:	0018      	movs	r0, r3
 8005bf4:	f7ff fd48 	bl	8005688 <PlayEffect>
		game.evo += 1;
 8005bf8:	4b04      	ldr	r3, [pc, #16]	@ (8005c0c <Evolve+0x30>)
 8005bfa:	7c1b      	ldrb	r3, [r3, #16]
 8005bfc:	3301      	adds	r3, #1
 8005bfe:	b2da      	uxtb	r2, r3
 8005c00:	4b02      	ldr	r3, [pc, #8]	@ (8005c0c <Evolve+0x30>)
 8005c02:	741a      	strb	r2, [r3, #16]
	}
}
 8005c04:	46c0      	nop			@ (mov r8, r8)
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}
 8005c0a:	46c0      	nop			@ (mov r8, r8)
 8005c0c:	200002a8 	.word	0x200002a8
 8005c10:	20000298 	.word	0x20000298

08005c14 <FlashErase>:
void FlashErase() {
 8005c14:	b590      	push	{r4, r7, lr}
 8005c16:	b087      	sub	sp, #28
 8005c18:	af00      	add	r7, sp, #0
	FLASH_EraseInitTypeDef tryit;
	tryit.Banks = FLASH_BANK_1;
 8005c1a:	2408      	movs	r4, #8
 8005c1c:	193b      	adds	r3, r7, r4
 8005c1e:	2204      	movs	r2, #4
 8005c20:	605a      	str	r2, [r3, #4]
	tryit.NbPages = 1;
 8005c22:	193b      	adds	r3, r7, r4
 8005c24:	2201      	movs	r2, #1
 8005c26:	60da      	str	r2, [r3, #12]
	tryit.Page = 127;
 8005c28:	193b      	adds	r3, r7, r4
 8005c2a:	227f      	movs	r2, #127	@ 0x7f
 8005c2c:	609a      	str	r2, [r3, #8]
	tryit.TypeErase = FLASH_TYPEERASE_PAGES;
 8005c2e:	193b      	adds	r3, r7, r4
 8005c30:	2202      	movs	r2, #2
 8005c32:	601a      	str	r2, [r3, #0]
	uint32_t pgerror;
	HAL_FLASH_Unlock();
 8005c34:	f003 f974 	bl	8008f20 <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&tryit, &pgerror);
 8005c38:	1d3a      	adds	r2, r7, #4
 8005c3a:	193b      	adds	r3, r7, r4
 8005c3c:	0011      	movs	r1, r2
 8005c3e:	0018      	movs	r0, r3
 8005c40:	f003 fa22 	bl	8009088 <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();
 8005c44:	f003 f990 	bl	8008f68 <HAL_FLASH_Lock>
}
 8005c48:	46c0      	nop			@ (mov r8, r8)
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	b007      	add	sp, #28
 8005c4e:	bd90      	pop	{r4, r7, pc}

08005c50 <FlashWrite>:
void FlashWrite() {
 8005c50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c52:	4cce      	ldr	r4, [pc, #824]	@ (8005f8c <FlashWrite+0x33c>)
 8005c54:	44a5      	add	sp, r4
 8005c56:	af00      	add	r7, sp, #0
	uint32_t Address = 0x0803F800;
 8005c58:	4bcd      	ldr	r3, [pc, #820]	@ (8005f90 <FlashWrite+0x340>)
 8005c5a:	4cce      	ldr	r4, [pc, #824]	@ (8005f94 <FlashWrite+0x344>)
 8005c5c:	2140      	movs	r1, #64	@ 0x40
 8005c5e:	1862      	adds	r2, r4, r1
 8005c60:	19d2      	adds	r2, r2, r7
 8005c62:	6013      	str	r3, [r2, #0]
	uint8_t flashBuffer[496] = "I am the very model of a modern major general.";
 8005c64:	4bcc      	ldr	r3, [pc, #816]	@ (8005f98 <FlashWrite+0x348>)
 8005c66:	48cd      	ldr	r0, [pc, #820]	@ (8005f9c <FlashWrite+0x34c>)
 8005c68:	181b      	adds	r3, r3, r0
 8005c6a:	187a      	adds	r2, r7, r1
 8005c6c:	189c      	adds	r4, r3, r2
 8005c6e:	4bcc      	ldr	r3, [pc, #816]	@ (8005fa0 <FlashWrite+0x350>)
 8005c70:	0020      	movs	r0, r4
 8005c72:	0019      	movs	r1, r3
 8005c74:	232f      	movs	r3, #47	@ 0x2f
 8005c76:	001a      	movs	r2, r3
 8005c78:	f009 f839 	bl	800ecee <memcpy>
 8005c7c:	232f      	movs	r3, #47	@ 0x2f
 8005c7e:	18e0      	adds	r0, r4, r3
 8005c80:	23c2      	movs	r3, #194	@ 0xc2
 8005c82:	33ff      	adds	r3, #255	@ 0xff
 8005c84:	001a      	movs	r2, r3
 8005c86:	2100      	movs	r1, #0
 8005c88:	f008 ff9c 	bl	800ebc4 <memset>
	uint64_t flashTestBuffer[496];
	uint64_t xyz = 0;
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	2300      	movs	r3, #0
 8005c90:	49c4      	ldr	r1, [pc, #784]	@ (8005fa4 <FlashWrite+0x354>)
 8005c92:	2040      	movs	r0, #64	@ 0x40
 8005c94:	1809      	adds	r1, r1, r0
 8005c96:	19c9      	adds	r1, r1, r7
 8005c98:	600a      	str	r2, [r1, #0]
 8005c9a:	604b      	str	r3, [r1, #4]
	int chunkI = 8;
 8005c9c:	2308      	movs	r3, #8
 8005c9e:	4ac2      	ldr	r2, [pc, #776]	@ (8005fa8 <FlashWrite+0x358>)
 8005ca0:	0001      	movs	r1, r0
 8005ca2:	1852      	adds	r2, r2, r1
 8005ca4:	19d2      	adds	r2, r2, r7
 8005ca6:	6013      	str	r3, [r2, #0]

	FLASH_EraseInitTypeDef tryit;
	tryit.Banks = FLASH_BANK_1;
 8005ca8:	4bc0      	ldr	r3, [pc, #768]	@ (8005fac <FlashWrite+0x35c>)
 8005caa:	48bc      	ldr	r0, [pc, #752]	@ (8005f9c <FlashWrite+0x34c>)
 8005cac:	181b      	adds	r3, r3, r0
 8005cae:	187a      	adds	r2, r7, r1
 8005cb0:	189a      	adds	r2, r3, r2
 8005cb2:	2304      	movs	r3, #4
 8005cb4:	6053      	str	r3, [r2, #4]
	tryit.NbPages = 1;
 8005cb6:	4bbd      	ldr	r3, [pc, #756]	@ (8005fac <FlashWrite+0x35c>)
 8005cb8:	181b      	adds	r3, r3, r0
 8005cba:	187a      	adds	r2, r7, r1
 8005cbc:	189a      	adds	r2, r3, r2
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	60d3      	str	r3, [r2, #12]
	tryit.Page = 127;
 8005cc2:	4bba      	ldr	r3, [pc, #744]	@ (8005fac <FlashWrite+0x35c>)
 8005cc4:	181b      	adds	r3, r3, r0
 8005cc6:	187a      	adds	r2, r7, r1
 8005cc8:	189a      	adds	r2, r3, r2
 8005cca:	237f      	movs	r3, #127	@ 0x7f
 8005ccc:	6093      	str	r3, [r2, #8]
	tryit.TypeErase = FLASH_TYPEERASE_PAGES;
 8005cce:	4bb7      	ldr	r3, [pc, #732]	@ (8005fac <FlashWrite+0x35c>)
 8005cd0:	181b      	adds	r3, r3, r0
 8005cd2:	000c      	movs	r4, r1
 8005cd4:	187a      	adds	r2, r7, r1
 8005cd6:	189a      	adds	r2, r3, r2
 8005cd8:	2302      	movs	r3, #2
 8005cda:	6013      	str	r3, [r2, #0]
	uint32_t pgerror;
	HAL_FLASH_Unlock();
 8005cdc:	f003 f920 	bl	8008f20 <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&tryit, &pgerror);
 8005ce0:	2344      	movs	r3, #68	@ 0x44
 8005ce2:	18fa      	adds	r2, r7, r3
 8005ce4:	2308      	movs	r3, #8
 8005ce6:	191b      	adds	r3, r3, r4
 8005ce8:	19db      	adds	r3, r3, r7
 8005cea:	0011      	movs	r1, r2
 8005cec:	0018      	movs	r0, r3
 8005cee:	f003 f9cb 	bl	8009088 <HAL_FLASHEx_Erase>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address,
 8005cf2:	4aaf      	ldr	r2, [pc, #700]	@ (8005fb0 <FlashWrite+0x360>)
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	4ca7      	ldr	r4, [pc, #668]	@ (8005f94 <FlashWrite+0x344>)
 8005cf8:	2040      	movs	r0, #64	@ 0x40
 8005cfa:	1821      	adds	r1, r4, r0
 8005cfc:	19c9      	adds	r1, r1, r7
 8005cfe:	6809      	ldr	r1, [r1, #0]
 8005d00:	2001      	movs	r0, #1
 8005d02:	f003 f8bf 	bl	8008e84 <HAL_FLASH_Program>
			(uint64_t) 0x12345678);
	Address += 8;
 8005d06:	0021      	movs	r1, r4
 8005d08:	2040      	movs	r0, #64	@ 0x40
 8005d0a:	180b      	adds	r3, r1, r0
 8005d0c:	19db      	adds	r3, r3, r7
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	3308      	adds	r3, #8
 8005d12:	180a      	adds	r2, r1, r0
 8005d14:	19d2      	adds	r2, r2, r7
 8005d16:	6013      	str	r3, [r2, #0]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address,
			(uint64_t) game.allSteps);
 8005d18:	4aa6      	ldr	r2, [pc, #664]	@ (8005fb4 <FlashWrite+0x364>)
 8005d1a:	238c      	movs	r3, #140	@ 0x8c
 8005d1c:	005b      	lsls	r3, r3, #1
 8005d1e:	58d3      	ldr	r3, [r2, r3]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address,
 8005d20:	001d      	movs	r5, r3
 8005d22:	2300      	movs	r3, #0
 8005d24:	001e      	movs	r6, r3
 8005d26:	000c      	movs	r4, r1
 8005d28:	180b      	adds	r3, r1, r0
 8005d2a:	19db      	adds	r3, r3, r7
 8005d2c:	6819      	ldr	r1, [r3, #0]
 8005d2e:	002a      	movs	r2, r5
 8005d30:	0033      	movs	r3, r6
 8005d32:	2001      	movs	r0, #1
 8005d34:	f003 f8a6 	bl	8008e84 <HAL_FLASH_Program>
	Address += 8;
 8005d38:	0021      	movs	r1, r4
 8005d3a:	2040      	movs	r0, #64	@ 0x40
 8005d3c:	180b      	adds	r3, r1, r0
 8005d3e:	19db      	adds	r3, r3, r7
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	3308      	adds	r3, #8
 8005d44:	180a      	adds	r2, r1, r0
 8005d46:	19d2      	adds	r2, r2, r7
 8005d48:	6013      	str	r3, [r2, #0]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address,
			(uint64_t) game.stepsToday);
 8005d4a:	4a9a      	ldr	r2, [pc, #616]	@ (8005fb4 <FlashWrite+0x364>)
 8005d4c:	2390      	movs	r3, #144	@ 0x90
 8005d4e:	005b      	lsls	r3, r3, #1
 8005d50:	58d3      	ldr	r3, [r2, r3]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address,
 8005d52:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005d54:	2300      	movs	r3, #0
 8005d56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d58:	000c      	movs	r4, r1
 8005d5a:	0005      	movs	r5, r0
 8005d5c:	180b      	adds	r3, r1, r0
 8005d5e:	19db      	adds	r3, r3, r7
 8005d60:	6819      	ldr	r1, [r3, #0]
 8005d62:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005d64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d66:	2001      	movs	r0, #1
 8005d68:	f003 f88c 	bl	8008e84 <HAL_FLASH_Program>
	Address += 8;
 8005d6c:	0021      	movs	r1, r4
 8005d6e:	0028      	movs	r0, r5
 8005d70:	180b      	adds	r3, r1, r0
 8005d72:	19db      	adds	r3, r3, r7
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	3308      	adds	r3, #8
 8005d78:	180a      	adds	r2, r1, r0
 8005d7a:	19d2      	adds	r2, r2, r7
 8005d7c:	6013      	str	r3, [r2, #0]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address,
			(uint64_t) game.weeklySteps);
 8005d7e:	4a8d      	ldr	r2, [pc, #564]	@ (8005fb4 <FlashWrite+0x364>)
 8005d80:	238e      	movs	r3, #142	@ 0x8e
 8005d82:	005b      	lsls	r3, r3, #1
 8005d84:	58d3      	ldr	r3, [r2, r3]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address,
 8005d86:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d88:	2300      	movs	r3, #0
 8005d8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d8c:	000c      	movs	r4, r1
 8005d8e:	0005      	movs	r5, r0
 8005d90:	180b      	adds	r3, r1, r0
 8005d92:	19db      	adds	r3, r3, r7
 8005d94:	6819      	ldr	r1, [r3, #0]
 8005d96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d9a:	2001      	movs	r0, #1
 8005d9c:	f003 f872 	bl	8008e84 <HAL_FLASH_Program>
	Address += 8;
 8005da0:	0021      	movs	r1, r4
 8005da2:	0028      	movs	r0, r5
 8005da4:	180b      	adds	r3, r1, r0
 8005da6:	19db      	adds	r3, r3, r7
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	3308      	adds	r3, #8
 8005dac:	180a      	adds	r2, r1, r0
 8005dae:	19d2      	adds	r2, r2, r7
 8005db0:	6013      	str	r3, [r2, #0]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address,
			(uint64_t) game.dailyGoal);
 8005db2:	4a80      	ldr	r2, [pc, #512]	@ (8005fb4 <FlashWrite+0x364>)
 8005db4:	2392      	movs	r3, #146	@ 0x92
 8005db6:	005b      	lsls	r3, r3, #1
 8005db8:	58d3      	ldr	r3, [r2, r3]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address,
 8005dba:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005dc0:	000c      	movs	r4, r1
 8005dc2:	0005      	movs	r5, r0
 8005dc4:	180b      	adds	r3, r1, r0
 8005dc6:	19db      	adds	r3, r3, r7
 8005dc8:	6819      	ldr	r1, [r3, #0]
 8005dca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005dcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dce:	2001      	movs	r0, #1
 8005dd0:	f003 f858 	bl	8008e84 <HAL_FLASH_Program>
	Address += 8;
 8005dd4:	0021      	movs	r1, r4
 8005dd6:	0028      	movs	r0, r5
 8005dd8:	180b      	adds	r3, r1, r0
 8005dda:	19db      	adds	r3, r3, r7
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	3308      	adds	r3, #8
 8005de0:	180a      	adds	r2, r1, r0
 8005de2:	19d2      	adds	r2, r2, r7
 8005de4:	6013      	str	r3, [r2, #0]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address,
			(uint64_t) game.weeklyGoal);
 8005de6:	4a73      	ldr	r2, [pc, #460]	@ (8005fb4 <FlashWrite+0x364>)
 8005de8:	2394      	movs	r3, #148	@ 0x94
 8005dea:	005b      	lsls	r3, r3, #1
 8005dec:	58d3      	ldr	r3, [r2, r3]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address,
 8005dee:	623b      	str	r3, [r7, #32]
 8005df0:	2300      	movs	r3, #0
 8005df2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005df4:	000c      	movs	r4, r1
 8005df6:	0005      	movs	r5, r0
 8005df8:	180b      	adds	r3, r1, r0
 8005dfa:	19db      	adds	r3, r3, r7
 8005dfc:	6819      	ldr	r1, [r3, #0]
 8005dfe:	6a3a      	ldr	r2, [r7, #32]
 8005e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e02:	2001      	movs	r0, #1
 8005e04:	f003 f83e 	bl	8008e84 <HAL_FLASH_Program>
	Address += 8;
 8005e08:	0022      	movs	r2, r4
 8005e0a:	0028      	movs	r0, r5
 8005e0c:	1813      	adds	r3, r2, r0
 8005e0e:	19db      	adds	r3, r3, r7
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	3308      	adds	r3, #8
 8005e14:	1811      	adds	r1, r2, r0
 8005e16:	19c9      	adds	r1, r1, r7
 8005e18:	600b      	str	r3, [r1, #0]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address,
			(uint64_t) game.evo);
 8005e1a:	4b66      	ldr	r3, [pc, #408]	@ (8005fb4 <FlashWrite+0x364>)
 8005e1c:	7c1b      	ldrb	r3, [r3, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address,
 8005e1e:	61bb      	str	r3, [r7, #24]
 8005e20:	2300      	movs	r3, #0
 8005e22:	61fb      	str	r3, [r7, #28]
 8005e24:	0014      	movs	r4, r2
 8005e26:	0005      	movs	r5, r0
 8005e28:	1813      	adds	r3, r2, r0
 8005e2a:	19db      	adds	r3, r3, r7
 8005e2c:	6819      	ldr	r1, [r3, #0]
 8005e2e:	69ba      	ldr	r2, [r7, #24]
 8005e30:	69fb      	ldr	r3, [r7, #28]
 8005e32:	2001      	movs	r0, #1
 8005e34:	f003 f826 	bl	8008e84 <HAL_FLASH_Program>
	Address += 8;
 8005e38:	0022      	movs	r2, r4
 8005e3a:	0028      	movs	r0, r5
 8005e3c:	1813      	adds	r3, r2, r0
 8005e3e:	19db      	adds	r3, r3, r7
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	3308      	adds	r3, #8
 8005e44:	1811      	adds	r1, r2, r0
 8005e46:	19c9      	adds	r1, r1, r7
 8005e48:	600b      	str	r3, [r1, #0]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address,
			(uint64_t) game.mood);
 8005e4a:	4b5a      	ldr	r3, [pc, #360]	@ (8005fb4 <FlashWrite+0x364>)
 8005e4c:	7c5b      	ldrb	r3, [r3, #17]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address,
 8005e4e:	613b      	str	r3, [r7, #16]
 8005e50:	2300      	movs	r3, #0
 8005e52:	617b      	str	r3, [r7, #20]
 8005e54:	0014      	movs	r4, r2
 8005e56:	0005      	movs	r5, r0
 8005e58:	1813      	adds	r3, r2, r0
 8005e5a:	19db      	adds	r3, r3, r7
 8005e5c:	6819      	ldr	r1, [r3, #0]
 8005e5e:	693a      	ldr	r2, [r7, #16]
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	2001      	movs	r0, #1
 8005e64:	f003 f80e 	bl	8008e84 <HAL_FLASH_Program>
	Address += 8;
 8005e68:	0022      	movs	r2, r4
 8005e6a:	0028      	movs	r0, r5
 8005e6c:	1813      	adds	r3, r2, r0
 8005e6e:	19db      	adds	r3, r3, r7
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	3308      	adds	r3, #8
 8005e74:	1811      	adds	r1, r2, r0
 8005e76:	19c9      	adds	r1, r1, r7
 8005e78:	600b      	str	r3, [r1, #0]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address,
			(uint64_t) game.numLocations);
 8005e7a:	4b4e      	ldr	r3, [pc, #312]	@ (8005fb4 <FlashWrite+0x364>)
 8005e7c:	695b      	ldr	r3, [r3, #20]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address,
 8005e7e:	60bb      	str	r3, [r7, #8]
 8005e80:	2300      	movs	r3, #0
 8005e82:	60fb      	str	r3, [r7, #12]
 8005e84:	0014      	movs	r4, r2
 8005e86:	0005      	movs	r5, r0
 8005e88:	1813      	adds	r3, r2, r0
 8005e8a:	19db      	adds	r3, r3, r7
 8005e8c:	6819      	ldr	r1, [r3, #0]
 8005e8e:	68ba      	ldr	r2, [r7, #8]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2001      	movs	r0, #1
 8005e94:	f002 fff6 	bl	8008e84 <HAL_FLASH_Program>
	Address += 8;
 8005e98:	0022      	movs	r2, r4
 8005e9a:	0028      	movs	r0, r5
 8005e9c:	1813      	adds	r3, r2, r0
 8005e9e:	19db      	adds	r3, r3, r7
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	3308      	adds	r3, #8
 8005ea4:	1812      	adds	r2, r2, r0
 8005ea6:	19d2      	adds	r2, r2, r7
 8005ea8:	6013      	str	r3, [r2, #0]
	for (int flashI = 0; flashI < 32; flashI++) {
 8005eaa:	2300      	movs	r3, #0
 8005eac:	4a42      	ldr	r2, [pc, #264]	@ (8005fb8 <FlashWrite+0x368>)
 8005eae:	1812      	adds	r2, r2, r0
 8005eb0:	19d2      	adds	r2, r2, r7
 8005eb2:	6013      	str	r3, [r2, #0]
 8005eb4:	e05c      	b.n	8005f70 <FlashWrite+0x320>
		xyz += (game.uid[flashI]) << ((8 - (chunkI)) * 8);
 8005eb6:	493f      	ldr	r1, [pc, #252]	@ (8005fb4 <FlashWrite+0x364>)
 8005eb8:	2396      	movs	r3, #150	@ 0x96
 8005eba:	005b      	lsls	r3, r3, #1
 8005ebc:	4a3e      	ldr	r2, [pc, #248]	@ (8005fb8 <FlashWrite+0x368>)
 8005ebe:	2040      	movs	r0, #64	@ 0x40
 8005ec0:	1812      	adds	r2, r2, r0
 8005ec2:	19d2      	adds	r2, r2, r7
 8005ec4:	6812      	ldr	r2, [r2, #0]
 8005ec6:	188a      	adds	r2, r1, r2
 8005ec8:	18d3      	adds	r3, r2, r3
 8005eca:	781b      	ldrb	r3, [r3, #0]
 8005ecc:	0019      	movs	r1, r3
 8005ece:	4c36      	ldr	r4, [pc, #216]	@ (8005fa8 <FlashWrite+0x358>)
 8005ed0:	1823      	adds	r3, r4, r0
 8005ed2:	19db      	adds	r3, r3, r7
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	2208      	movs	r2, #8
 8005ed8:	1ad3      	subs	r3, r2, r3
 8005eda:	00db      	lsls	r3, r3, #3
 8005edc:	4099      	lsls	r1, r3
 8005ede:	000b      	movs	r3, r1
 8005ee0:	603b      	str	r3, [r7, #0]
 8005ee2:	17db      	asrs	r3, r3, #31
 8005ee4:	607b      	str	r3, [r7, #4]
 8005ee6:	4d2f      	ldr	r5, [pc, #188]	@ (8005fa4 <FlashWrite+0x354>)
 8005ee8:	0006      	movs	r6, r0
 8005eea:	182b      	adds	r3, r5, r0
 8005eec:	19db      	adds	r3, r3, r7
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	6838      	ldr	r0, [r7, #0]
 8005ef4:	6879      	ldr	r1, [r7, #4]
 8005ef6:	1812      	adds	r2, r2, r0
 8005ef8:	414b      	adcs	r3, r1
 8005efa:	0029      	movs	r1, r5
 8005efc:	1988      	adds	r0, r1, r6
 8005efe:	19c0      	adds	r0, r0, r7
 8005f00:	6002      	str	r2, [r0, #0]
 8005f02:	6043      	str	r3, [r0, #4]
		if (--chunkI == 0) {
 8005f04:	0030      	movs	r0, r6
 8005f06:	19a3      	adds	r3, r4, r6
 8005f08:	19db      	adds	r3, r3, r7
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	3b01      	subs	r3, #1
 8005f0e:	1822      	adds	r2, r4, r0
 8005f10:	19d2      	adds	r2, r2, r7
 8005f12:	6013      	str	r3, [r2, #0]
 8005f14:	1823      	adds	r3, r4, r0
 8005f16:	19db      	adds	r3, r3, r7
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d11f      	bne.n	8005f5e <FlashWrite+0x30e>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, xyz);
 8005f1e:	000d      	movs	r5, r1
 8005f20:	180b      	adds	r3, r1, r0
 8005f22:	19db      	adds	r3, r3, r7
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	4e1a      	ldr	r6, [pc, #104]	@ (8005f94 <FlashWrite+0x344>)
 8005f2a:	1831      	adds	r1, r6, r0
 8005f2c:	19c9      	adds	r1, r1, r7
 8005f2e:	6809      	ldr	r1, [r1, #0]
 8005f30:	2001      	movs	r0, #1
 8005f32:	f002 ffa7 	bl	8008e84 <HAL_FLASH_Program>
			chunkI = 8;
 8005f36:	2308      	movs	r3, #8
 8005f38:	2140      	movs	r1, #64	@ 0x40
 8005f3a:	1862      	adds	r2, r4, r1
 8005f3c:	19d2      	adds	r2, r2, r7
 8005f3e:	6013      	str	r3, [r2, #0]
			xyz = 0;
 8005f40:	2200      	movs	r2, #0
 8005f42:	2300      	movs	r3, #0
 8005f44:	0008      	movs	r0, r1
 8005f46:	1869      	adds	r1, r5, r1
 8005f48:	19c9      	adds	r1, r1, r7
 8005f4a:	600a      	str	r2, [r1, #0]
 8005f4c:	604b      	str	r3, [r1, #4]
			Address += 8;
 8005f4e:	0002      	movs	r2, r0
 8005f50:	18b3      	adds	r3, r6, r2
 8005f52:	19db      	adds	r3, r3, r7
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	3308      	adds	r3, #8
 8005f58:	18b2      	adds	r2, r6, r2
 8005f5a:	19d2      	adds	r2, r2, r7
 8005f5c:	6013      	str	r3, [r2, #0]
	for (int flashI = 0; flashI < 32; flashI++) {
 8005f5e:	4a16      	ldr	r2, [pc, #88]	@ (8005fb8 <FlashWrite+0x368>)
 8005f60:	2140      	movs	r1, #64	@ 0x40
 8005f62:	1853      	adds	r3, r2, r1
 8005f64:	19db      	adds	r3, r3, r7
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	3301      	adds	r3, #1
 8005f6a:	1852      	adds	r2, r2, r1
 8005f6c:	19d2      	adds	r2, r2, r7
 8005f6e:	6013      	str	r3, [r2, #0]
 8005f70:	4b11      	ldr	r3, [pc, #68]	@ (8005fb8 <FlashWrite+0x368>)
 8005f72:	2140      	movs	r1, #64	@ 0x40
 8005f74:	185b      	adds	r3, r3, r1
 8005f76:	19db      	adds	r3, r3, r7
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	2b1f      	cmp	r3, #31
 8005f7c:	dd9b      	ble.n	8005eb6 <FlashWrite+0x266>
		}
	}
	for (int flashI = 0; flashI < 32; flashI++) {
 8005f7e:	2300      	movs	r3, #0
 8005f80:	4a0e      	ldr	r2, [pc, #56]	@ (8005fbc <FlashWrite+0x36c>)
 8005f82:	1852      	adds	r2, r2, r1
 8005f84:	19d2      	adds	r2, r2, r7
 8005f86:	6013      	str	r3, [r2, #0]
 8005f88:	e065      	b.n	8006056 <FlashWrite+0x406>
 8005f8a:	46c0      	nop			@ (mov r8, r8)
 8005f8c:	ffffee14 	.word	0xffffee14
 8005f90:	0803f800 	.word	0x0803f800
 8005f94:	000011a4 	.word	0x000011a4
 8005f98:	fffffdf4 	.word	0xfffffdf4
 8005f9c:	000011a8 	.word	0x000011a8
 8005fa0:	0801137c 	.word	0x0801137c
 8005fa4:	00001198 	.word	0x00001198
 8005fa8:	00001194 	.word	0x00001194
 8005fac:	ffffee60 	.word	0xffffee60
 8005fb0:	12345678 	.word	0x12345678
 8005fb4:	200002a8 	.word	0x200002a8
 8005fb8:	00001190 	.word	0x00001190
 8005fbc:	0000118c 	.word	0x0000118c
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address,
				(uint64_t) (game.positions[flashI].lat * 100000));
 8005fc0:	4b33      	ldr	r3, [pc, #204]	@ (8006090 <FlashWrite+0x440>)
 8005fc2:	4d34      	ldr	r5, [pc, #208]	@ (8006094 <FlashWrite+0x444>)
 8005fc4:	2640      	movs	r6, #64	@ 0x40
 8005fc6:	19aa      	adds	r2, r5, r6
 8005fc8:	19d2      	adds	r2, r2, r7
 8005fca:	6812      	ldr	r2, [r2, #0]
 8005fcc:	3203      	adds	r2, #3
 8005fce:	00d2      	lsls	r2, r2, #3
 8005fd0:	58d3      	ldr	r3, [r2, r3]
 8005fd2:	4931      	ldr	r1, [pc, #196]	@ (8006098 <FlashWrite+0x448>)
 8005fd4:	1c18      	adds	r0, r3, #0
 8005fd6:	f7fa ffdb 	bl	8000f90 <__aeabi_fmul>
 8005fda:	1c03      	adds	r3, r0, #0
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address,
 8005fdc:	1c18      	adds	r0, r3, #0
 8005fde:	f7fa fb47 	bl	8000670 <__aeabi_f2ulz>
 8005fe2:	0002      	movs	r2, r0
 8005fe4:	000b      	movs	r3, r1
 8005fe6:	4c2d      	ldr	r4, [pc, #180]	@ (800609c <FlashWrite+0x44c>)
 8005fe8:	19a1      	adds	r1, r4, r6
 8005fea:	19c9      	adds	r1, r1, r7
 8005fec:	6809      	ldr	r1, [r1, #0]
 8005fee:	2001      	movs	r0, #1
 8005ff0:	f002 ff48 	bl	8008e84 <HAL_FLASH_Program>
		Address += 8;
 8005ff4:	19a3      	adds	r3, r4, r6
 8005ff6:	19db      	adds	r3, r3, r7
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	3308      	adds	r3, #8
 8005ffc:	19a2      	adds	r2, r4, r6
 8005ffe:	19d2      	adds	r2, r2, r7
 8006000:	6013      	str	r3, [r2, #0]
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address,
				(uint64_t) (game.positions[flashI].lon * 100000));
 8006002:	4a23      	ldr	r2, [pc, #140]	@ (8006090 <FlashWrite+0x440>)
 8006004:	19ab      	adds	r3, r5, r6
 8006006:	19db      	adds	r3, r3, r7
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	3303      	adds	r3, #3
 800600c:	00db      	lsls	r3, r3, #3
 800600e:	18d3      	adds	r3, r2, r3
 8006010:	3304      	adds	r3, #4
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4920      	ldr	r1, [pc, #128]	@ (8006098 <FlashWrite+0x448>)
 8006016:	1c18      	adds	r0, r3, #0
 8006018:	f7fa ffba 	bl	8000f90 <__aeabi_fmul>
 800601c:	1c03      	adds	r3, r0, #0
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address,
 800601e:	1c18      	adds	r0, r3, #0
 8006020:	f7fa fb26 	bl	8000670 <__aeabi_f2ulz>
 8006024:	0002      	movs	r2, r0
 8006026:	000b      	movs	r3, r1
 8006028:	19a1      	adds	r1, r4, r6
 800602a:	19c9      	adds	r1, r1, r7
 800602c:	6809      	ldr	r1, [r1, #0]
 800602e:	2001      	movs	r0, #1
 8006030:	f002 ff28 	bl	8008e84 <HAL_FLASH_Program>
		Address += 8;
 8006034:	0032      	movs	r2, r6
 8006036:	19a3      	adds	r3, r4, r6
 8006038:	19db      	adds	r3, r3, r7
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	3308      	adds	r3, #8
 800603e:	0016      	movs	r6, r2
 8006040:	18a2      	adds	r2, r4, r2
 8006042:	19d2      	adds	r2, r2, r7
 8006044:	6013      	str	r3, [r2, #0]
	for (int flashI = 0; flashI < 32; flashI++) {
 8006046:	0032      	movs	r2, r6
 8006048:	18ab      	adds	r3, r5, r2
 800604a:	19db      	adds	r3, r3, r7
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	3301      	adds	r3, #1
 8006050:	18aa      	adds	r2, r5, r2
 8006052:	19d2      	adds	r2, r2, r7
 8006054:	6013      	str	r3, [r2, #0]
 8006056:	4b0f      	ldr	r3, [pc, #60]	@ (8006094 <FlashWrite+0x444>)
 8006058:	2040      	movs	r0, #64	@ 0x40
 800605a:	181b      	adds	r3, r3, r0
 800605c:	19db      	adds	r3, r3, r7
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	2b1f      	cmp	r3, #31
 8006062:	ddad      	ble.n	8005fc0 <FlashWrite+0x370>
	}
	Address = 0x0803F808;
 8006064:	4b0e      	ldr	r3, [pc, #56]	@ (80060a0 <FlashWrite+0x450>)
 8006066:	4a0d      	ldr	r2, [pc, #52]	@ (800609c <FlashWrite+0x44c>)
 8006068:	1811      	adds	r1, r2, r0
 800606a:	19c9      	adds	r1, r1, r7
 800606c:	600b      	str	r3, [r1, #0]
	xyz = *(__IO uint64_t*) (Address);
 800606e:	1813      	adds	r3, r2, r0
 8006070:	19db      	adds	r3, r3, r7
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	490a      	ldr	r1, [pc, #40]	@ (80060a4 <FlashWrite+0x454>)
 800607a:	1809      	adds	r1, r1, r0
 800607c:	19c9      	adds	r1, r1, r7
 800607e:	600a      	str	r2, [r1, #0]
 8006080:	604b      	str	r3, [r1, #4]
	HAL_FLASH_Lock();
 8006082:	f002 ff71 	bl	8008f68 <HAL_FLASH_Lock>
}
 8006086:	46c0      	nop			@ (mov r8, r8)
 8006088:	46bd      	mov	sp, r7
 800608a:	4b07      	ldr	r3, [pc, #28]	@ (80060a8 <FlashWrite+0x458>)
 800608c:	449d      	add	sp, r3
 800608e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006090:	200002a8 	.word	0x200002a8
 8006094:	0000118c 	.word	0x0000118c
 8006098:	47c35000 	.word	0x47c35000
 800609c:	000011a4 	.word	0x000011a4
 80060a0:	0803f808 	.word	0x0803f808
 80060a4:	00001198 	.word	0x00001198
 80060a8:	000011ec 	.word	0x000011ec

080060ac <AnimateCharacter>:
void AnimateCharacter(uint16_t palette[])
{
 80060ac:	b590      	push	{r4, r7, lr}
 80060ae:	b089      	sub	sp, #36	@ 0x24
 80060b0:	af04      	add	r7, sp, #16
 80060b2:	6078      	str	r0, [r7, #4]
	unsigned char walkingCheck;
	_ADXL343_ReadReg8(0x18, &walkingCheck, 1);
 80060b4:	240e      	movs	r4, #14
 80060b6:	193b      	adds	r3, r7, r4
 80060b8:	2201      	movs	r2, #1
 80060ba:	0019      	movs	r1, r3
 80060bc:	2018      	movs	r0, #24
 80060be:	f000 fa69 	bl	8006594 <_ADXL343_ReadReg8>
	unsigned char walkingYes = walkingCheck>0;
 80060c2:	193b      	adds	r3, r7, r4
 80060c4:	781b      	ldrb	r3, [r3, #0]
 80060c6:	1e5a      	subs	r2, r3, #1
 80060c8:	4193      	sbcs	r3, r2
 80060ca:	b2da      	uxtb	r2, r3
 80060cc:	230f      	movs	r3, #15
 80060ce:	18fb      	adds	r3, r7, r3
 80060d0:	701a      	strb	r2, [r3, #0]
	switch(game.evo)
 80060d2:	4be4      	ldr	r3, [pc, #912]	@ (8006464 <AnimateCharacter+0x3b8>)
 80060d4:	7c1b      	ldrb	r3, [r3, #16]
 80060d6:	2b02      	cmp	r3, #2
 80060d8:	d100      	bne.n	80060dc <AnimateCharacter+0x30>
 80060da:	e153      	b.n	8006384 <AnimateCharacter+0x2d8>
 80060dc:	dd00      	ble.n	80060e0 <AnimateCharacter+0x34>
 80060de:	e23f      	b.n	8006560 <AnimateCharacter+0x4b4>
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d003      	beq.n	80060ec <AnimateCharacter+0x40>
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d100      	bne.n	80060ea <AnimateCharacter+0x3e>
 80060e8:	e0b0      	b.n	800624c <AnimateCharacter+0x1a0>
 80060ea:	e239      	b.n	8006560 <AnimateCharacter+0x4b4>
	{
	case 0:
		if(walkingYes>0)
 80060ec:	230f      	movs	r3, #15
 80060ee:	18fb      	adds	r3, r7, r3
 80060f0:	781b      	ldrb	r3, [r3, #0]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d05b      	beq.n	80061ae <AnimateCharacter+0x102>
		{
			frameCount = 5;
 80060f6:	4bdc      	ldr	r3, [pc, #880]	@ (8006468 <AnimateCharacter+0x3bc>)
 80060f8:	2205      	movs	r2, #5
 80060fa:	601a      	str	r2, [r3, #0]
			switch(currentFrame)
 80060fc:	4bdb      	ldr	r3, [pc, #876]	@ (800646c <AnimateCharacter+0x3c0>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	2b05      	cmp	r3, #5
 8006102:	d900      	bls.n	8006106 <AnimateCharacter+0x5a>
 8006104:	e225      	b.n	8006552 <AnimateCharacter+0x4a6>
 8006106:	009a      	lsls	r2, r3, #2
 8006108:	4bd9      	ldr	r3, [pc, #868]	@ (8006470 <AnimateCharacter+0x3c4>)
 800610a:	18d3      	adds	r3, r2, r3
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	469f      	mov	pc, r3
			{
			case 0:
				drawImage(imgEggWalking0, palette, 30, 30, 64, 64, 225);
 8006110:	6879      	ldr	r1, [r7, #4]
 8006112:	48d8      	ldr	r0, [pc, #864]	@ (8006474 <AnimateCharacter+0x3c8>)
 8006114:	23e1      	movs	r3, #225	@ 0xe1
 8006116:	9302      	str	r3, [sp, #8]
 8006118:	2340      	movs	r3, #64	@ 0x40
 800611a:	9301      	str	r3, [sp, #4]
 800611c:	2340      	movs	r3, #64	@ 0x40
 800611e:	9300      	str	r3, [sp, #0]
 8006120:	231e      	movs	r3, #30
 8006122:	221e      	movs	r2, #30
 8006124:	f7fd feee 	bl	8003f04 <drawImage>
				break;
 8006128:	e040      	b.n	80061ac <AnimateCharacter+0x100>
			case 1:
				drawImage(imgEggWalking1, palette, 30, 30, 64, 64, 212);
 800612a:	6879      	ldr	r1, [r7, #4]
 800612c:	48d2      	ldr	r0, [pc, #840]	@ (8006478 <AnimateCharacter+0x3cc>)
 800612e:	23d4      	movs	r3, #212	@ 0xd4
 8006130:	9302      	str	r3, [sp, #8]
 8006132:	2340      	movs	r3, #64	@ 0x40
 8006134:	9301      	str	r3, [sp, #4]
 8006136:	2340      	movs	r3, #64	@ 0x40
 8006138:	9300      	str	r3, [sp, #0]
 800613a:	231e      	movs	r3, #30
 800613c:	221e      	movs	r2, #30
 800613e:	f7fd fee1 	bl	8003f04 <drawImage>
				break;
 8006142:	e033      	b.n	80061ac <AnimateCharacter+0x100>
			case 2:
				drawImage(imgEggWalking2, palette, 30, 30, 64, 64, 197);
 8006144:	6879      	ldr	r1, [r7, #4]
 8006146:	48cd      	ldr	r0, [pc, #820]	@ (800647c <AnimateCharacter+0x3d0>)
 8006148:	23c5      	movs	r3, #197	@ 0xc5
 800614a:	9302      	str	r3, [sp, #8]
 800614c:	2340      	movs	r3, #64	@ 0x40
 800614e:	9301      	str	r3, [sp, #4]
 8006150:	2340      	movs	r3, #64	@ 0x40
 8006152:	9300      	str	r3, [sp, #0]
 8006154:	231e      	movs	r3, #30
 8006156:	221e      	movs	r2, #30
 8006158:	f7fd fed4 	bl	8003f04 <drawImage>
				break;
 800615c:	e026      	b.n	80061ac <AnimateCharacter+0x100>
			case 3:
				drawImage(imgEggWalking3, palette, 30, 30, 64, 64, 227);
 800615e:	6879      	ldr	r1, [r7, #4]
 8006160:	48c7      	ldr	r0, [pc, #796]	@ (8006480 <AnimateCharacter+0x3d4>)
 8006162:	23e3      	movs	r3, #227	@ 0xe3
 8006164:	9302      	str	r3, [sp, #8]
 8006166:	2340      	movs	r3, #64	@ 0x40
 8006168:	9301      	str	r3, [sp, #4]
 800616a:	2340      	movs	r3, #64	@ 0x40
 800616c:	9300      	str	r3, [sp, #0]
 800616e:	231e      	movs	r3, #30
 8006170:	221e      	movs	r2, #30
 8006172:	f7fd fec7 	bl	8003f04 <drawImage>
				break;
 8006176:	e019      	b.n	80061ac <AnimateCharacter+0x100>
			case 4:
				drawImage(imgEggWalking4, palette, 30, 30, 64, 64, 241);
 8006178:	6879      	ldr	r1, [r7, #4]
 800617a:	48c2      	ldr	r0, [pc, #776]	@ (8006484 <AnimateCharacter+0x3d8>)
 800617c:	23f1      	movs	r3, #241	@ 0xf1
 800617e:	9302      	str	r3, [sp, #8]
 8006180:	2340      	movs	r3, #64	@ 0x40
 8006182:	9301      	str	r3, [sp, #4]
 8006184:	2340      	movs	r3, #64	@ 0x40
 8006186:	9300      	str	r3, [sp, #0]
 8006188:	231e      	movs	r3, #30
 800618a:	221e      	movs	r2, #30
 800618c:	f7fd feba 	bl	8003f04 <drawImage>
				break;
 8006190:	e00c      	b.n	80061ac <AnimateCharacter+0x100>
			case 5:
				drawImage(imgEggWalking5, palette, 30, 30, 64, 64, 226);
 8006192:	6879      	ldr	r1, [r7, #4]
 8006194:	48bc      	ldr	r0, [pc, #752]	@ (8006488 <AnimateCharacter+0x3dc>)
 8006196:	23e2      	movs	r3, #226	@ 0xe2
 8006198:	9302      	str	r3, [sp, #8]
 800619a:	2340      	movs	r3, #64	@ 0x40
 800619c:	9301      	str	r3, [sp, #4]
 800619e:	2340      	movs	r3, #64	@ 0x40
 80061a0:	9300      	str	r3, [sp, #0]
 80061a2:	231e      	movs	r3, #30
 80061a4:	221e      	movs	r2, #30
 80061a6:	f7fd fead 	bl	8003f04 <drawImage>
				break;
 80061aa:	46c0      	nop			@ (mov r8, r8)
						drawImage(imgEggSitting4, palette, 30, 30, 64, 64, 221);
						break;
					}
					break;
		}
		break;
 80061ac:	e1d1      	b.n	8006552 <AnimateCharacter+0x4a6>
			frameCount = 4;
 80061ae:	4bae      	ldr	r3, [pc, #696]	@ (8006468 <AnimateCharacter+0x3bc>)
 80061b0:	2204      	movs	r2, #4
 80061b2:	601a      	str	r2, [r3, #0]
			switch(currentFrame)
 80061b4:	4bad      	ldr	r3, [pc, #692]	@ (800646c <AnimateCharacter+0x3c0>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	2b04      	cmp	r3, #4
 80061ba:	d900      	bls.n	80061be <AnimateCharacter+0x112>
 80061bc:	e1cb      	b.n	8006556 <AnimateCharacter+0x4aa>
 80061be:	009a      	lsls	r2, r3, #2
 80061c0:	4bb2      	ldr	r3, [pc, #712]	@ (800648c <AnimateCharacter+0x3e0>)
 80061c2:	18d3      	adds	r3, r2, r3
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	469f      	mov	pc, r3
						drawImage(imgEggSitting0, palette, 30, 30, 64, 64, 226);
 80061c8:	6879      	ldr	r1, [r7, #4]
 80061ca:	48b1      	ldr	r0, [pc, #708]	@ (8006490 <AnimateCharacter+0x3e4>)
 80061cc:	23e2      	movs	r3, #226	@ 0xe2
 80061ce:	9302      	str	r3, [sp, #8]
 80061d0:	2340      	movs	r3, #64	@ 0x40
 80061d2:	9301      	str	r3, [sp, #4]
 80061d4:	2340      	movs	r3, #64	@ 0x40
 80061d6:	9300      	str	r3, [sp, #0]
 80061d8:	231e      	movs	r3, #30
 80061da:	221e      	movs	r2, #30
 80061dc:	f7fd fe92 	bl	8003f04 <drawImage>
						break;
 80061e0:	e033      	b.n	800624a <AnimateCharacter+0x19e>
						drawImage(imgEggSitting1, palette, 30, 30, 64, 64, 227);
 80061e2:	6879      	ldr	r1, [r7, #4]
 80061e4:	48ab      	ldr	r0, [pc, #684]	@ (8006494 <AnimateCharacter+0x3e8>)
 80061e6:	23e3      	movs	r3, #227	@ 0xe3
 80061e8:	9302      	str	r3, [sp, #8]
 80061ea:	2340      	movs	r3, #64	@ 0x40
 80061ec:	9301      	str	r3, [sp, #4]
 80061ee:	2340      	movs	r3, #64	@ 0x40
 80061f0:	9300      	str	r3, [sp, #0]
 80061f2:	231e      	movs	r3, #30
 80061f4:	221e      	movs	r2, #30
 80061f6:	f7fd fe85 	bl	8003f04 <drawImage>
						break;
 80061fa:	e026      	b.n	800624a <AnimateCharacter+0x19e>
						drawImage(imgEggSitting2, palette, 30, 30, 64, 64, 221);
 80061fc:	6879      	ldr	r1, [r7, #4]
 80061fe:	48a6      	ldr	r0, [pc, #664]	@ (8006498 <AnimateCharacter+0x3ec>)
 8006200:	23dd      	movs	r3, #221	@ 0xdd
 8006202:	9302      	str	r3, [sp, #8]
 8006204:	2340      	movs	r3, #64	@ 0x40
 8006206:	9301      	str	r3, [sp, #4]
 8006208:	2340      	movs	r3, #64	@ 0x40
 800620a:	9300      	str	r3, [sp, #0]
 800620c:	231e      	movs	r3, #30
 800620e:	221e      	movs	r2, #30
 8006210:	f7fd fe78 	bl	8003f04 <drawImage>
						break;
 8006214:	e019      	b.n	800624a <AnimateCharacter+0x19e>
						drawImage(imgEggSitting3, palette, 30, 30, 64, 64, 217);
 8006216:	6879      	ldr	r1, [r7, #4]
 8006218:	48a0      	ldr	r0, [pc, #640]	@ (800649c <AnimateCharacter+0x3f0>)
 800621a:	23d9      	movs	r3, #217	@ 0xd9
 800621c:	9302      	str	r3, [sp, #8]
 800621e:	2340      	movs	r3, #64	@ 0x40
 8006220:	9301      	str	r3, [sp, #4]
 8006222:	2340      	movs	r3, #64	@ 0x40
 8006224:	9300      	str	r3, [sp, #0]
 8006226:	231e      	movs	r3, #30
 8006228:	221e      	movs	r2, #30
 800622a:	f7fd fe6b 	bl	8003f04 <drawImage>
						break;
 800622e:	e00c      	b.n	800624a <AnimateCharacter+0x19e>
						drawImage(imgEggSitting4, palette, 30, 30, 64, 64, 221);
 8006230:	6879      	ldr	r1, [r7, #4]
 8006232:	489b      	ldr	r0, [pc, #620]	@ (80064a0 <AnimateCharacter+0x3f4>)
 8006234:	23dd      	movs	r3, #221	@ 0xdd
 8006236:	9302      	str	r3, [sp, #8]
 8006238:	2340      	movs	r3, #64	@ 0x40
 800623a:	9301      	str	r3, [sp, #4]
 800623c:	2340      	movs	r3, #64	@ 0x40
 800623e:	9300      	str	r3, [sp, #0]
 8006240:	231e      	movs	r3, #30
 8006242:	221e      	movs	r2, #30
 8006244:	f7fd fe5e 	bl	8003f04 <drawImage>
						break;
 8006248:	46c0      	nop			@ (mov r8, r8)
					break;
 800624a:	e184      	b.n	8006556 <AnimateCharacter+0x4aa>
	case 1:
		if(walkingYes>0)
 800624c:	230f      	movs	r3, #15
 800624e:	18fb      	adds	r3, r7, r3
 8006250:	781b      	ldrb	r3, [r3, #0]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d06f      	beq.n	8006336 <AnimateCharacter+0x28a>
		{
			frameCount = 6;
 8006256:	4b84      	ldr	r3, [pc, #528]	@ (8006468 <AnimateCharacter+0x3bc>)
 8006258:	2206      	movs	r2, #6
 800625a:	601a      	str	r2, [r3, #0]
			switch(currentFrame)
 800625c:	4b83      	ldr	r3, [pc, #524]	@ (800646c <AnimateCharacter+0x3c0>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	2b06      	cmp	r3, #6
 8006262:	d900      	bls.n	8006266 <AnimateCharacter+0x1ba>
 8006264:	e179      	b.n	800655a <AnimateCharacter+0x4ae>
 8006266:	009a      	lsls	r2, r3, #2
 8006268:	4b8e      	ldr	r3, [pc, #568]	@ (80064a4 <AnimateCharacter+0x3f8>)
 800626a:	18d3      	adds	r3, r2, r3
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	469f      	mov	pc, r3
			{
			case 0:
				drawImage(imgYoungWalking0, palette, 30, 30, 64, 64, 312);
 8006270:	6879      	ldr	r1, [r7, #4]
 8006272:	488d      	ldr	r0, [pc, #564]	@ (80064a8 <AnimateCharacter+0x3fc>)
 8006274:	239c      	movs	r3, #156	@ 0x9c
 8006276:	005b      	lsls	r3, r3, #1
 8006278:	9302      	str	r3, [sp, #8]
 800627a:	2340      	movs	r3, #64	@ 0x40
 800627c:	9301      	str	r3, [sp, #4]
 800627e:	2340      	movs	r3, #64	@ 0x40
 8006280:	9300      	str	r3, [sp, #0]
 8006282:	231e      	movs	r3, #30
 8006284:	221e      	movs	r2, #30
 8006286:	f7fd fe3d 	bl	8003f04 <drawImage>
				break;
 800628a:	e053      	b.n	8006334 <AnimateCharacter+0x288>
			case 1:
				drawImage(imgYoungWalking1, palette, 30, 30, 64, 64, 314);
 800628c:	6879      	ldr	r1, [r7, #4]
 800628e:	4887      	ldr	r0, [pc, #540]	@ (80064ac <AnimateCharacter+0x400>)
 8006290:	239d      	movs	r3, #157	@ 0x9d
 8006292:	005b      	lsls	r3, r3, #1
 8006294:	9302      	str	r3, [sp, #8]
 8006296:	2340      	movs	r3, #64	@ 0x40
 8006298:	9301      	str	r3, [sp, #4]
 800629a:	2340      	movs	r3, #64	@ 0x40
 800629c:	9300      	str	r3, [sp, #0]
 800629e:	231e      	movs	r3, #30
 80062a0:	221e      	movs	r2, #30
 80062a2:	f7fd fe2f 	bl	8003f04 <drawImage>
				break;
 80062a6:	e045      	b.n	8006334 <AnimateCharacter+0x288>
			case 2:
				drawImage(imgYoungWalking2, palette, 30, 30, 64, 64, 322);
 80062a8:	6879      	ldr	r1, [r7, #4]
 80062aa:	4881      	ldr	r0, [pc, #516]	@ (80064b0 <AnimateCharacter+0x404>)
 80062ac:	23a1      	movs	r3, #161	@ 0xa1
 80062ae:	005b      	lsls	r3, r3, #1
 80062b0:	9302      	str	r3, [sp, #8]
 80062b2:	2340      	movs	r3, #64	@ 0x40
 80062b4:	9301      	str	r3, [sp, #4]
 80062b6:	2340      	movs	r3, #64	@ 0x40
 80062b8:	9300      	str	r3, [sp, #0]
 80062ba:	231e      	movs	r3, #30
 80062bc:	221e      	movs	r2, #30
 80062be:	f7fd fe21 	bl	8003f04 <drawImage>
				break;
 80062c2:	e037      	b.n	8006334 <AnimateCharacter+0x288>
			case 3:
				drawImage(imgYoungWalking3, palette, 30, 30, 64, 64, 323);
 80062c4:	6879      	ldr	r1, [r7, #4]
 80062c6:	487b      	ldr	r0, [pc, #492]	@ (80064b4 <AnimateCharacter+0x408>)
 80062c8:	2344      	movs	r3, #68	@ 0x44
 80062ca:	33ff      	adds	r3, #255	@ 0xff
 80062cc:	9302      	str	r3, [sp, #8]
 80062ce:	2340      	movs	r3, #64	@ 0x40
 80062d0:	9301      	str	r3, [sp, #4]
 80062d2:	2340      	movs	r3, #64	@ 0x40
 80062d4:	9300      	str	r3, [sp, #0]
 80062d6:	231e      	movs	r3, #30
 80062d8:	221e      	movs	r2, #30
 80062da:	f7fd fe13 	bl	8003f04 <drawImage>
				break;
 80062de:	e029      	b.n	8006334 <AnimateCharacter+0x288>
			case 4:
				drawImage(imgYoungWalking4, palette, 30, 30, 64, 64, 322);
 80062e0:	6879      	ldr	r1, [r7, #4]
 80062e2:	4875      	ldr	r0, [pc, #468]	@ (80064b8 <AnimateCharacter+0x40c>)
 80062e4:	23a1      	movs	r3, #161	@ 0xa1
 80062e6:	005b      	lsls	r3, r3, #1
 80062e8:	9302      	str	r3, [sp, #8]
 80062ea:	2340      	movs	r3, #64	@ 0x40
 80062ec:	9301      	str	r3, [sp, #4]
 80062ee:	2340      	movs	r3, #64	@ 0x40
 80062f0:	9300      	str	r3, [sp, #0]
 80062f2:	231e      	movs	r3, #30
 80062f4:	221e      	movs	r2, #30
 80062f6:	f7fd fe05 	bl	8003f04 <drawImage>
				break;
 80062fa:	e01b      	b.n	8006334 <AnimateCharacter+0x288>
			case 5:
				drawImage(imgYoungWalking5, palette, 30, 30, 64, 64, 321);
 80062fc:	6879      	ldr	r1, [r7, #4]
 80062fe:	486f      	ldr	r0, [pc, #444]	@ (80064bc <AnimateCharacter+0x410>)
 8006300:	2342      	movs	r3, #66	@ 0x42
 8006302:	33ff      	adds	r3, #255	@ 0xff
 8006304:	9302      	str	r3, [sp, #8]
 8006306:	2340      	movs	r3, #64	@ 0x40
 8006308:	9301      	str	r3, [sp, #4]
 800630a:	2340      	movs	r3, #64	@ 0x40
 800630c:	9300      	str	r3, [sp, #0]
 800630e:	231e      	movs	r3, #30
 8006310:	221e      	movs	r2, #30
 8006312:	f7fd fdf7 	bl	8003f04 <drawImage>
				break;
 8006316:	e00d      	b.n	8006334 <AnimateCharacter+0x288>
			case 6:
				drawImage(imgYoungWalking6, palette, 30, 30, 64, 64, 313);
 8006318:	6879      	ldr	r1, [r7, #4]
 800631a:	4869      	ldr	r0, [pc, #420]	@ (80064c0 <AnimateCharacter+0x414>)
 800631c:	233a      	movs	r3, #58	@ 0x3a
 800631e:	33ff      	adds	r3, #255	@ 0xff
 8006320:	9302      	str	r3, [sp, #8]
 8006322:	2340      	movs	r3, #64	@ 0x40
 8006324:	9301      	str	r3, [sp, #4]
 8006326:	2340      	movs	r3, #64	@ 0x40
 8006328:	9300      	str	r3, [sp, #0]
 800632a:	231e      	movs	r3, #30
 800632c:	221e      	movs	r2, #30
 800632e:	f7fd fde9 	bl	8003f04 <drawImage>
				break;
 8006332:	46c0      	nop			@ (mov r8, r8)
				drawImage(imgSitting1,palette,30,30,64,64,305);
				break;
			}
			break;
		}
		break;
 8006334:	e111      	b.n	800655a <AnimateCharacter+0x4ae>
			frameCount=1;
 8006336:	4b4c      	ldr	r3, [pc, #304]	@ (8006468 <AnimateCharacter+0x3bc>)
 8006338:	2201      	movs	r2, #1
 800633a:	601a      	str	r2, [r3, #0]
			switch(currentFrame)
 800633c:	4b4b      	ldr	r3, [pc, #300]	@ (800646c <AnimateCharacter+0x3c0>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d002      	beq.n	800634a <AnimateCharacter+0x29e>
 8006344:	2b01      	cmp	r3, #1
 8006346:	d00e      	beq.n	8006366 <AnimateCharacter+0x2ba>
			break;
 8006348:	e10a      	b.n	8006560 <AnimateCharacter+0x4b4>
				drawImage(imgSitting0, palette, 30,30,64,64,307);
 800634a:	6879      	ldr	r1, [r7, #4]
 800634c:	485d      	ldr	r0, [pc, #372]	@ (80064c4 <AnimateCharacter+0x418>)
 800634e:	2334      	movs	r3, #52	@ 0x34
 8006350:	33ff      	adds	r3, #255	@ 0xff
 8006352:	9302      	str	r3, [sp, #8]
 8006354:	2340      	movs	r3, #64	@ 0x40
 8006356:	9301      	str	r3, [sp, #4]
 8006358:	2340      	movs	r3, #64	@ 0x40
 800635a:	9300      	str	r3, [sp, #0]
 800635c:	231e      	movs	r3, #30
 800635e:	221e      	movs	r2, #30
 8006360:	f7fd fdd0 	bl	8003f04 <drawImage>
				break;
 8006364:	e00d      	b.n	8006382 <AnimateCharacter+0x2d6>
				drawImage(imgSitting1,palette,30,30,64,64,305);
 8006366:	6879      	ldr	r1, [r7, #4]
 8006368:	4857      	ldr	r0, [pc, #348]	@ (80064c8 <AnimateCharacter+0x41c>)
 800636a:	2332      	movs	r3, #50	@ 0x32
 800636c:	33ff      	adds	r3, #255	@ 0xff
 800636e:	9302      	str	r3, [sp, #8]
 8006370:	2340      	movs	r3, #64	@ 0x40
 8006372:	9301      	str	r3, [sp, #4]
 8006374:	2340      	movs	r3, #64	@ 0x40
 8006376:	9300      	str	r3, [sp, #0]
 8006378:	231e      	movs	r3, #30
 800637a:	221e      	movs	r2, #30
 800637c:	f7fd fdc2 	bl	8003f04 <drawImage>
				break;
 8006380:	46c0      	nop			@ (mov r8, r8)
			break;
 8006382:	e0ed      	b.n	8006560 <AnimateCharacter+0x4b4>
	case 2:
		if(walkingYes>0)
 8006384:	230f      	movs	r3, #15
 8006386:	18fb      	adds	r3, r7, r3
 8006388:	781b      	ldrb	r3, [r3, #0]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d100      	bne.n	8006390 <AnimateCharacter+0x2e4>
 800638e:	e0b9      	b.n	8006504 <AnimateCharacter+0x458>
		{
			frameCount = 6;
 8006390:	4b35      	ldr	r3, [pc, #212]	@ (8006468 <AnimateCharacter+0x3bc>)
 8006392:	2206      	movs	r2, #6
 8006394:	601a      	str	r2, [r3, #0]
			switch (currentFrame){
 8006396:	4b35      	ldr	r3, [pc, #212]	@ (800646c <AnimateCharacter+0x3c0>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	2b06      	cmp	r3, #6
 800639c:	d900      	bls.n	80063a0 <AnimateCharacter+0x2f4>
 800639e:	e0de      	b.n	800655e <AnimateCharacter+0x4b2>
 80063a0:	009a      	lsls	r2, r3, #2
 80063a2:	4b4a      	ldr	r3, [pc, #296]	@ (80064cc <AnimateCharacter+0x420>)
 80063a4:	18d3      	adds	r3, r2, r3
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	469f      	mov	pc, r3
			case 0:
				drawImage(imgAdultWalking0, palette, 20, 30, 80, 80, 568);
 80063aa:	6879      	ldr	r1, [r7, #4]
 80063ac:	4848      	ldr	r0, [pc, #288]	@ (80064d0 <AnimateCharacter+0x424>)
 80063ae:	238e      	movs	r3, #142	@ 0x8e
 80063b0:	009b      	lsls	r3, r3, #2
 80063b2:	9302      	str	r3, [sp, #8]
 80063b4:	2350      	movs	r3, #80	@ 0x50
 80063b6:	9301      	str	r3, [sp, #4]
 80063b8:	2350      	movs	r3, #80	@ 0x50
 80063ba:	9300      	str	r3, [sp, #0]
 80063bc:	231e      	movs	r3, #30
 80063be:	2214      	movs	r2, #20
 80063c0:	f7fd fda0 	bl	8003f04 <drawImage>
				break;
 80063c4:	e0c4      	b.n	8006550 <AnimateCharacter+0x4a4>
			case 1:
				drawImage(imgAdultWalking1, palette, 20, 30, 80, 80, 562);
 80063c6:	6879      	ldr	r1, [r7, #4]
 80063c8:	4842      	ldr	r0, [pc, #264]	@ (80064d4 <AnimateCharacter+0x428>)
 80063ca:	4b43      	ldr	r3, [pc, #268]	@ (80064d8 <AnimateCharacter+0x42c>)
 80063cc:	9302      	str	r3, [sp, #8]
 80063ce:	2350      	movs	r3, #80	@ 0x50
 80063d0:	9301      	str	r3, [sp, #4]
 80063d2:	2350      	movs	r3, #80	@ 0x50
 80063d4:	9300      	str	r3, [sp, #0]
 80063d6:	231e      	movs	r3, #30
 80063d8:	2214      	movs	r2, #20
 80063da:	f7fd fd93 	bl	8003f04 <drawImage>
				break;
 80063de:	e0b7      	b.n	8006550 <AnimateCharacter+0x4a4>
			case 2:
				drawImage(imgAdultWalking2, palette, 20, 30, 80, 80, 601);
 80063e0:	6879      	ldr	r1, [r7, #4]
 80063e2:	483e      	ldr	r0, [pc, #248]	@ (80064dc <AnimateCharacter+0x430>)
 80063e4:	4b3e      	ldr	r3, [pc, #248]	@ (80064e0 <AnimateCharacter+0x434>)
 80063e6:	9302      	str	r3, [sp, #8]
 80063e8:	2350      	movs	r3, #80	@ 0x50
 80063ea:	9301      	str	r3, [sp, #4]
 80063ec:	2350      	movs	r3, #80	@ 0x50
 80063ee:	9300      	str	r3, [sp, #0]
 80063f0:	231e      	movs	r3, #30
 80063f2:	2214      	movs	r2, #20
 80063f4:	f7fd fd86 	bl	8003f04 <drawImage>
				break;
 80063f8:	e0aa      	b.n	8006550 <AnimateCharacter+0x4a4>
			case 3:
				drawImage(imgAdultWalking3, palette, 20, 30, 80, 80, 585);
 80063fa:	6879      	ldr	r1, [r7, #4]
 80063fc:	4839      	ldr	r0, [pc, #228]	@ (80064e4 <AnimateCharacter+0x438>)
 80063fe:	4b3a      	ldr	r3, [pc, #232]	@ (80064e8 <AnimateCharacter+0x43c>)
 8006400:	9302      	str	r3, [sp, #8]
 8006402:	2350      	movs	r3, #80	@ 0x50
 8006404:	9301      	str	r3, [sp, #4]
 8006406:	2350      	movs	r3, #80	@ 0x50
 8006408:	9300      	str	r3, [sp, #0]
 800640a:	231e      	movs	r3, #30
 800640c:	2214      	movs	r2, #20
 800640e:	f7fd fd79 	bl	8003f04 <drawImage>
				break;
 8006412:	e09d      	b.n	8006550 <AnimateCharacter+0x4a4>
			case 4:
				drawImage(imgAdultWalking4, palette, 20, 30, 80, 80, 566);
 8006414:	6879      	ldr	r1, [r7, #4]
 8006416:	4835      	ldr	r0, [pc, #212]	@ (80064ec <AnimateCharacter+0x440>)
 8006418:	4b35      	ldr	r3, [pc, #212]	@ (80064f0 <AnimateCharacter+0x444>)
 800641a:	9302      	str	r3, [sp, #8]
 800641c:	2350      	movs	r3, #80	@ 0x50
 800641e:	9301      	str	r3, [sp, #4]
 8006420:	2350      	movs	r3, #80	@ 0x50
 8006422:	9300      	str	r3, [sp, #0]
 8006424:	231e      	movs	r3, #30
 8006426:	2214      	movs	r2, #20
 8006428:	f7fd fd6c 	bl	8003f04 <drawImage>
				break;
 800642c:	e090      	b.n	8006550 <AnimateCharacter+0x4a4>
			case 5:
				drawImage(imgAdultWalking5, palette, 20, 30, 80, 80, 581);
 800642e:	6879      	ldr	r1, [r7, #4]
 8006430:	4830      	ldr	r0, [pc, #192]	@ (80064f4 <AnimateCharacter+0x448>)
 8006432:	4b31      	ldr	r3, [pc, #196]	@ (80064f8 <AnimateCharacter+0x44c>)
 8006434:	9302      	str	r3, [sp, #8]
 8006436:	2350      	movs	r3, #80	@ 0x50
 8006438:	9301      	str	r3, [sp, #4]
 800643a:	2350      	movs	r3, #80	@ 0x50
 800643c:	9300      	str	r3, [sp, #0]
 800643e:	231e      	movs	r3, #30
 8006440:	2214      	movs	r2, #20
 8006442:	f7fd fd5f 	bl	8003f04 <drawImage>
				break;
 8006446:	e083      	b.n	8006550 <AnimateCharacter+0x4a4>
			case 6:
				drawImage(imgAdultWalking6, palette, 20, 30, 80, 80, 563);
 8006448:	6879      	ldr	r1, [r7, #4]
 800644a:	482c      	ldr	r0, [pc, #176]	@ (80064fc <AnimateCharacter+0x450>)
 800644c:	4b2c      	ldr	r3, [pc, #176]	@ (8006500 <AnimateCharacter+0x454>)
 800644e:	9302      	str	r3, [sp, #8]
 8006450:	2350      	movs	r3, #80	@ 0x50
 8006452:	9301      	str	r3, [sp, #4]
 8006454:	2350      	movs	r3, #80	@ 0x50
 8006456:	9300      	str	r3, [sp, #0]
 8006458:	231e      	movs	r3, #30
 800645a:	2214      	movs	r2, #20
 800645c:	f7fd fd52 	bl	8003f04 <drawImage>
				break;
 8006460:	e076      	b.n	8006550 <AnimateCharacter+0x4a4>
 8006462:	46c0      	nop			@ (mov r8, r8)
 8006464:	200002a8 	.word	0x200002a8
 8006468:	200002a4 	.word	0x200002a4
 800646c:	200002a0 	.word	0x200002a0
 8006470:	0801bc30 	.word	0x0801bc30
 8006474:	08012d10 	.word	0x08012d10
 8006478:	08013094 	.word	0x08013094
 800647c:	080133e4 	.word	0x080133e4
 8006480:	080136f8 	.word	0x080136f8
 8006484:	08013a84 	.word	0x08013a84
 8006488:	08013e48 	.word	0x08013e48
 800648c:	0801bc48 	.word	0x0801bc48
 8006490:	08011bb0 	.word	0x08011bb0
 8006494:	08011f38 	.word	0x08011f38
 8006498:	080122c4 	.word	0x080122c4
 800649c:	08012638 	.word	0x08012638
 80064a0:	0801299c 	.word	0x0801299c
 80064a4:	0801bc5c 	.word	0x0801bc5c
 80064a8:	080141d0 	.word	0x080141d0
 80064ac:	080146b0 	.word	0x080146b0
 80064b0:	08014b98 	.word	0x08014b98
 80064b4:	080150a0 	.word	0x080150a0
 80064b8:	080155ac 	.word	0x080155ac
 80064bc:	08015ab4 	.word	0x08015ab4
 80064c0:	08015fb8 	.word	0x08015fb8
 80064c4:	0801649c 	.word	0x0801649c
 80064c8:	08016968 	.word	0x08016968
 80064cc:	0801bc78 	.word	0x0801bc78
 80064d0:	08017d2c 	.word	0x08017d2c
 80064d4:	0801860c 	.word	0x0801860c
 80064d8:	00000232 	.word	0x00000232
 80064dc:	08018ed4 	.word	0x08018ed4
 80064e0:	00000259 	.word	0x00000259
 80064e4:	08019838 	.word	0x08019838
 80064e8:	00000249 	.word	0x00000249
 80064ec:	0801a15c 	.word	0x0801a15c
 80064f0:	00000236 	.word	0x00000236
 80064f4:	0801aa34 	.word	0x0801aa34
 80064f8:	00000245 	.word	0x00000245
 80064fc:	0801b348 	.word	0x0801b348
 8006500:	00000233 	.word	0x00000233
			}
		}
		else{
		frameCount=1;
 8006504:	4b1f      	ldr	r3, [pc, #124]	@ (8006584 <AnimateCharacter+0x4d8>)
 8006506:	2201      	movs	r2, #1
 8006508:	601a      	str	r2, [r3, #0]
		switch(currentFrame)
 800650a:	4b1f      	ldr	r3, [pc, #124]	@ (8006588 <AnimateCharacter+0x4dc>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d002      	beq.n	8006518 <AnimateCharacter+0x46c>
 8006512:	2b01      	cmp	r3, #1
 8006514:	d00e      	beq.n	8006534 <AnimateCharacter+0x488>
			drawImage(imgAdultSitting1, palette, 20,30,80,80,479);
			break;
		}

		}
	break;
 8006516:	e022      	b.n	800655e <AnimateCharacter+0x4b2>
			drawImage(imgAdultSitting0, palette, 20,30,80,80,481);
 8006518:	6879      	ldr	r1, [r7, #4]
 800651a:	481c      	ldr	r0, [pc, #112]	@ (800658c <AnimateCharacter+0x4e0>)
 800651c:	23e2      	movs	r3, #226	@ 0xe2
 800651e:	33ff      	adds	r3, #255	@ 0xff
 8006520:	9302      	str	r3, [sp, #8]
 8006522:	2350      	movs	r3, #80	@ 0x50
 8006524:	9301      	str	r3, [sp, #4]
 8006526:	2350      	movs	r3, #80	@ 0x50
 8006528:	9300      	str	r3, [sp, #0]
 800652a:	231e      	movs	r3, #30
 800652c:	2214      	movs	r2, #20
 800652e:	f7fd fce9 	bl	8003f04 <drawImage>
			break;
 8006532:	e00d      	b.n	8006550 <AnimateCharacter+0x4a4>
			drawImage(imgAdultSitting1, palette, 20,30,80,80,479);
 8006534:	6879      	ldr	r1, [r7, #4]
 8006536:	4816      	ldr	r0, [pc, #88]	@ (8006590 <AnimateCharacter+0x4e4>)
 8006538:	23e0      	movs	r3, #224	@ 0xe0
 800653a:	33ff      	adds	r3, #255	@ 0xff
 800653c:	9302      	str	r3, [sp, #8]
 800653e:	2350      	movs	r3, #80	@ 0x50
 8006540:	9301      	str	r3, [sp, #4]
 8006542:	2350      	movs	r3, #80	@ 0x50
 8006544:	9300      	str	r3, [sp, #0]
 8006546:	231e      	movs	r3, #30
 8006548:	2214      	movs	r2, #20
 800654a:	f7fd fcdb 	bl	8003f04 <drawImage>
			break;
 800654e:	46c0      	nop			@ (mov r8, r8)
	break;
 8006550:	e005      	b.n	800655e <AnimateCharacter+0x4b2>
		break;
 8006552:	46c0      	nop			@ (mov r8, r8)
 8006554:	e004      	b.n	8006560 <AnimateCharacter+0x4b4>
					break;
 8006556:	46c0      	nop			@ (mov r8, r8)
 8006558:	e002      	b.n	8006560 <AnimateCharacter+0x4b4>
		break;
 800655a:	46c0      	nop			@ (mov r8, r8)
 800655c:	e000      	b.n	8006560 <AnimateCharacter+0x4b4>
	break;
 800655e:	46c0      	nop			@ (mov r8, r8)
	}
	currentFrame++;
 8006560:	4b09      	ldr	r3, [pc, #36]	@ (8006588 <AnimateCharacter+0x4dc>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	1c5a      	adds	r2, r3, #1
 8006566:	4b08      	ldr	r3, [pc, #32]	@ (8006588 <AnimateCharacter+0x4dc>)
 8006568:	601a      	str	r2, [r3, #0]
	if(currentFrame>frameCount)
 800656a:	4b07      	ldr	r3, [pc, #28]	@ (8006588 <AnimateCharacter+0x4dc>)
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	4b05      	ldr	r3, [pc, #20]	@ (8006584 <AnimateCharacter+0x4d8>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	429a      	cmp	r2, r3
 8006574:	d902      	bls.n	800657c <AnimateCharacter+0x4d0>
		currentFrame = 0;
 8006576:	4b04      	ldr	r3, [pc, #16]	@ (8006588 <AnimateCharacter+0x4dc>)
 8006578:	2200      	movs	r2, #0
 800657a:	601a      	str	r2, [r3, #0]
}
 800657c:	46c0      	nop			@ (mov r8, r8)
 800657e:	46bd      	mov	sp, r7
 8006580:	b005      	add	sp, #20
 8006582:	bd90      	pop	{r4, r7, pc}
 8006584:	200002a4 	.word	0x200002a4
 8006588:	200002a0 	.word	0x200002a0
 800658c:	08016e2c 	.word	0x08016e2c
 8006590:	080175b0 	.word	0x080175b0

08006594 <_ADXL343_ReadReg8>:
			animation[currentFrame].Size);
	return;
}

int _ADXL343_ReadReg8(unsigned char TargetRegister, unsigned char *TargetValue,
		uint8_t size) {
 8006594:	b580      	push	{r7, lr}
 8006596:	b084      	sub	sp, #16
 8006598:	af02      	add	r7, sp, #8
 800659a:	6039      	str	r1, [r7, #0]
 800659c:	0011      	movs	r1, r2
 800659e:	1dfb      	adds	r3, r7, #7
 80065a0:	1c02      	adds	r2, r0, #0
 80065a2:	701a      	strb	r2, [r3, #0]
 80065a4:	1dbb      	adds	r3, r7, #6
 80065a6:	1c0a      	adds	r2, r1, #0
 80065a8:	701a      	strb	r2, [r3, #0]
	if (!HAL_I2C_Master_Transmit(&hi2c1, 0x14 << 1, &TargetRegister, 1, 1000)
 80065aa:	1dfa      	adds	r2, r7, #7
 80065ac:	4811      	ldr	r0, [pc, #68]	@ (80065f4 <_ADXL343_ReadReg8+0x60>)
 80065ae:	23fa      	movs	r3, #250	@ 0xfa
 80065b0:	009b      	lsls	r3, r3, #2
 80065b2:	9300      	str	r3, [sp, #0]
 80065b4:	2301      	movs	r3, #1
 80065b6:	2128      	movs	r1, #40	@ 0x28
 80065b8:	f003 f896 	bl	80096e8 <HAL_I2C_Master_Transmit>
 80065bc:	1e03      	subs	r3, r0, #0
 80065be:	d002      	beq.n	80065c6 <_ADXL343_ReadReg8+0x32>
			== HAL_OK)
		return -1;
 80065c0:	2301      	movs	r3, #1
 80065c2:	425b      	negs	r3, r3
 80065c4:	e011      	b.n	80065ea <_ADXL343_ReadReg8+0x56>

	if (!HAL_I2C_Master_Receive(&hi2c1, 0x14 << 1, TargetValue, size, 1000)
 80065c6:	1dbb      	adds	r3, r7, #6
 80065c8:	781b      	ldrb	r3, [r3, #0]
 80065ca:	b299      	uxth	r1, r3
 80065cc:	683a      	ldr	r2, [r7, #0]
 80065ce:	4809      	ldr	r0, [pc, #36]	@ (80065f4 <_ADXL343_ReadReg8+0x60>)
 80065d0:	23fa      	movs	r3, #250	@ 0xfa
 80065d2:	009b      	lsls	r3, r3, #2
 80065d4:	9300      	str	r3, [sp, #0]
 80065d6:	000b      	movs	r3, r1
 80065d8:	2128      	movs	r1, #40	@ 0x28
 80065da:	f003 f9af 	bl	800993c <HAL_I2C_Master_Receive>
 80065de:	1e03      	subs	r3, r0, #0
 80065e0:	d002      	beq.n	80065e8 <_ADXL343_ReadReg8+0x54>
			== HAL_OK)
		return -2;
 80065e2:	2302      	movs	r3, #2
 80065e4:	425b      	negs	r3, r3
 80065e6:	e000      	b.n	80065ea <_ADXL343_ReadReg8+0x56>

	return 0;
 80065e8:	2300      	movs	r3, #0
}
 80065ea:	0018      	movs	r0, r3
 80065ec:	46bd      	mov	sp, r7
 80065ee:	b002      	add	sp, #8
 80065f0:	bd80      	pop	{r7, pc}
 80065f2:	46c0      	nop			@ (mov r8, r8)
 80065f4:	2000128c 	.word	0x2000128c

080065f8 <_ADXL343_WriteReg8>:

int _ADXL343_WriteReg8(unsigned char TargetRegister, unsigned char TargetValue) {
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b086      	sub	sp, #24
 80065fc:	af02      	add	r7, sp, #8
 80065fe:	0002      	movs	r2, r0
 8006600:	1dfb      	adds	r3, r7, #7
 8006602:	701a      	strb	r2, [r3, #0]
 8006604:	1dbb      	adds	r3, r7, #6
 8006606:	1c0a      	adds	r2, r1, #0
 8006608:	701a      	strb	r2, [r3, #0]
	unsigned char buff[2];
	buff[0] = TargetRegister;
 800660a:	210c      	movs	r1, #12
 800660c:	187b      	adds	r3, r7, r1
 800660e:	1dfa      	adds	r2, r7, #7
 8006610:	7812      	ldrb	r2, [r2, #0]
 8006612:	701a      	strb	r2, [r3, #0]
	buff[1] = TargetValue;
 8006614:	187b      	adds	r3, r7, r1
 8006616:	1dba      	adds	r2, r7, #6
 8006618:	7812      	ldrb	r2, [r2, #0]
 800661a:	705a      	strb	r2, [r3, #1]

	if (HAL_I2C_Master_Transmit(&hi2c1, 0x14 << 1, buff, 2, 1000) == HAL_OK)
 800661c:	187a      	adds	r2, r7, r1
 800661e:	4809      	ldr	r0, [pc, #36]	@ (8006644 <_ADXL343_WriteReg8+0x4c>)
 8006620:	23fa      	movs	r3, #250	@ 0xfa
 8006622:	009b      	lsls	r3, r3, #2
 8006624:	9300      	str	r3, [sp, #0]
 8006626:	2302      	movs	r3, #2
 8006628:	2128      	movs	r1, #40	@ 0x28
 800662a:	f003 f85d 	bl	80096e8 <HAL_I2C_Master_Transmit>
 800662e:	1e03      	subs	r3, r0, #0
 8006630:	d102      	bne.n	8006638 <_ADXL343_WriteReg8+0x40>
		return -1;
 8006632:	2301      	movs	r3, #1
 8006634:	425b      	negs	r3, r3
 8006636:	e000      	b.n	800663a <_ADXL343_WriteReg8+0x42>

	return 0;
 8006638:	2300      	movs	r3, #0
}
 800663a:	0018      	movs	r0, r3
 800663c:	46bd      	mov	sp, r7
 800663e:	b004      	add	sp, #16
 8006640:	bd80      	pop	{r7, pc}
 8006642:	46c0      	nop			@ (mov r8, r8)
 8006644:	2000128c 	.word	0x2000128c

08006648 <SendData>:
void SendData() {
 8006648:	b5f0      	push	{r4, r5, r6, r7, lr}
 800664a:	46c6      	mov	lr, r8
 800664c:	b500      	push	{lr}
 800664e:	b088      	sub	sp, #32
 8006650:	af06      	add	r7, sp, #24
	unsigned int posIndex;
	unsigned int clrIndex;
	sprintf(sendBuffer,
 8006652:	4a59      	ldr	r2, [pc, #356]	@ (80067b8 <SendData+0x170>)
 8006654:	238c      	movs	r3, #140	@ 0x8c
 8006656:	005b      	lsls	r3, r3, #1
 8006658:	58d4      	ldr	r4, [r2, r3]
 800665a:	4a57      	ldr	r2, [pc, #348]	@ (80067b8 <SendData+0x170>)
 800665c:	238e      	movs	r3, #142	@ 0x8e
 800665e:	005b      	lsls	r3, r3, #1
 8006660:	58d5      	ldr	r5, [r2, r3]
 8006662:	4a55      	ldr	r2, [pc, #340]	@ (80067b8 <SendData+0x170>)
 8006664:	2390      	movs	r3, #144	@ 0x90
 8006666:	005b      	lsls	r3, r3, #1
 8006668:	58d3      	ldr	r3, [r2, r3]
 800666a:	4698      	mov	r8, r3
			"(lifeSteps:%d),(weeklySteps:%d),(dailySteps:%d),(uid:%s),(friendship:%d),(password:password),(difficulty:%d),(evolution:%d) \n\r",
			game.allSteps, game.weeklySteps, game.stepsToday, game.uid,
			game.mood, game.dailyGoal, game.evo);
 800666c:	4a52      	ldr	r2, [pc, #328]	@ (80067b8 <SendData+0x170>)
 800666e:	7c52      	ldrb	r2, [r2, #17]
	sprintf(sendBuffer,
 8006670:	0016      	movs	r6, r2
 8006672:	4951      	ldr	r1, [pc, #324]	@ (80067b8 <SendData+0x170>)
 8006674:	2292      	movs	r2, #146	@ 0x92
 8006676:	0052      	lsls	r2, r2, #1
 8006678:	588a      	ldr	r2, [r1, r2]
			game.mood, game.dailyGoal, game.evo);
 800667a:	494f      	ldr	r1, [pc, #316]	@ (80067b8 <SendData+0x170>)
 800667c:	7c09      	ldrb	r1, [r1, #16]
	sprintf(sendBuffer,
 800667e:	468c      	mov	ip, r1
 8006680:	494e      	ldr	r1, [pc, #312]	@ (80067bc <SendData+0x174>)
 8006682:	484f      	ldr	r0, [pc, #316]	@ (80067c0 <SendData+0x178>)
 8006684:	4663      	mov	r3, ip
 8006686:	9304      	str	r3, [sp, #16]
 8006688:	9203      	str	r2, [sp, #12]
 800668a:	9602      	str	r6, [sp, #8]
 800668c:	4a4d      	ldr	r2, [pc, #308]	@ (80067c4 <SendData+0x17c>)
 800668e:	9201      	str	r2, [sp, #4]
 8006690:	4643      	mov	r3, r8
 8006692:	9300      	str	r3, [sp, #0]
 8006694:	002b      	movs	r3, r5
 8006696:	0022      	movs	r2, r4
 8006698:	f008 fa28 	bl	800eaec <siprintf>
	HAL_UART_Transmit(&huart2, sendBuffer, strlen(sendBuffer), 200);
 800669c:	4b48      	ldr	r3, [pc, #288]	@ (80067c0 <SendData+0x178>)
 800669e:	0018      	movs	r0, r3
 80066a0:	f7f9 fd3c 	bl	800011c <strlen>
 80066a4:	0003      	movs	r3, r0
 80066a6:	b29a      	uxth	r2, r3
 80066a8:	4945      	ldr	r1, [pc, #276]	@ (80067c0 <SendData+0x178>)
 80066aa:	4847      	ldr	r0, [pc, #284]	@ (80067c8 <SendData+0x180>)
 80066ac:	23c8      	movs	r3, #200	@ 0xc8
 80066ae:	f006 f9cd 	bl	800ca4c <HAL_UART_Transmit>
	for (posIndex = 0; posIndex < game.numLocations; posIndex++) {
 80066b2:	2300      	movs	r3, #0
 80066b4:	607b      	str	r3, [r7, #4]
 80066b6:	e072      	b.n	800679e <SendData+0x156>
		HAL_Delay(5);
 80066b8:	2005      	movs	r0, #5
 80066ba:	f002 facb 	bl	8008c54 <HAL_Delay>
		for (clrIndex = 0; clrIndex < 400; clrIndex++)
 80066be:	2300      	movs	r3, #0
 80066c0:	603b      	str	r3, [r7, #0]
 80066c2:	e007      	b.n	80066d4 <SendData+0x8c>
			sendBuffer[clrIndex] = 0;
 80066c4:	4a3e      	ldr	r2, [pc, #248]	@ (80067c0 <SendData+0x178>)
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	18d3      	adds	r3, r2, r3
 80066ca:	2200      	movs	r2, #0
 80066cc:	701a      	strb	r2, [r3, #0]
		for (clrIndex = 0; clrIndex < 400; clrIndex++)
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	3301      	adds	r3, #1
 80066d2:	603b      	str	r3, [r7, #0]
 80066d4:	683a      	ldr	r2, [r7, #0]
 80066d6:	23c8      	movs	r3, #200	@ 0xc8
 80066d8:	005b      	lsls	r3, r3, #1
 80066da:	429a      	cmp	r2, r3
 80066dc:	d3f2      	bcc.n	80066c4 <SendData+0x7c>
		sprintf(sendBuffer, "(lat:%d.%d),(lon:%d.%d),",
				((int) game.positions[posIndex].lat),
 80066de:	4b36      	ldr	r3, [pc, #216]	@ (80067b8 <SendData+0x170>)
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	3203      	adds	r2, #3
 80066e4:	00d2      	lsls	r2, r2, #3
 80066e6:	58d3      	ldr	r3, [r2, r3]
		sprintf(sendBuffer, "(lat:%d.%d),(lon:%d.%d),",
 80066e8:	1c18      	adds	r0, r3, #0
 80066ea:	f7fa ff49 	bl	8001580 <__aeabi_f2iz>
 80066ee:	0006      	movs	r6, r0
				abs(
						(int) ((fmod((double) game.positions[posIndex].lat,
 80066f0:	4b31      	ldr	r3, [pc, #196]	@ (80067b8 <SendData+0x170>)
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	3203      	adds	r2, #3
 80066f6:	00d2      	lsls	r2, r2, #3
 80066f8:	58d3      	ldr	r3, [r2, r3]
 80066fa:	1c18      	adds	r0, r3, #0
 80066fc:	f7fc feaa 	bl	8003454 <__aeabi_f2d>
 8006700:	2200      	movs	r2, #0
 8006702:	4b32      	ldr	r3, [pc, #200]	@ (80067cc <SendData+0x184>)
 8006704:	f00a fb64 	bl	8010dd0 <fmod>
								(double) 1)) * 10000)),
 8006708:	2200      	movs	r2, #0
 800670a:	4b31      	ldr	r3, [pc, #196]	@ (80067d0 <SendData+0x188>)
 800670c:	f7fb ff8e 	bl	800262c <__aeabi_dmul>
 8006710:	0002      	movs	r2, r0
 8006712:	000b      	movs	r3, r1
						(int) ((fmod((double) game.positions[posIndex].lat,
 8006714:	0010      	movs	r0, r2
 8006716:	0019      	movs	r1, r3
 8006718:	f7fc fe0e 	bl	8003338 <__aeabi_d2iz>
 800671c:	0003      	movs	r3, r0
		sprintf(sendBuffer, "(lat:%d.%d),(lon:%d.%d),",
 800671e:	17da      	asrs	r2, r3, #31
 8006720:	189c      	adds	r4, r3, r2
 8006722:	4054      	eors	r4, r2
				((int) game.positions[posIndex].lon),
 8006724:	4a24      	ldr	r2, [pc, #144]	@ (80067b8 <SendData+0x170>)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	3303      	adds	r3, #3
 800672a:	00db      	lsls	r3, r3, #3
 800672c:	18d3      	adds	r3, r2, r3
 800672e:	3304      	adds	r3, #4
 8006730:	681b      	ldr	r3, [r3, #0]
		sprintf(sendBuffer, "(lat:%d.%d),(lon:%d.%d),",
 8006732:	1c18      	adds	r0, r3, #0
 8006734:	f7fa ff24 	bl	8001580 <__aeabi_f2iz>
 8006738:	0005      	movs	r5, r0
				abs(
						(int) ((fmod((double) game.positions[posIndex].lon,
 800673a:	4a1f      	ldr	r2, [pc, #124]	@ (80067b8 <SendData+0x170>)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	3303      	adds	r3, #3
 8006740:	00db      	lsls	r3, r3, #3
 8006742:	18d3      	adds	r3, r2, r3
 8006744:	3304      	adds	r3, #4
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	1c18      	adds	r0, r3, #0
 800674a:	f7fc fe83 	bl	8003454 <__aeabi_f2d>
 800674e:	2200      	movs	r2, #0
 8006750:	4b1e      	ldr	r3, [pc, #120]	@ (80067cc <SendData+0x184>)
 8006752:	f00a fb3d 	bl	8010dd0 <fmod>
								(double) 1)) * 10000)));
 8006756:	2200      	movs	r2, #0
 8006758:	4b1d      	ldr	r3, [pc, #116]	@ (80067d0 <SendData+0x188>)
 800675a:	f7fb ff67 	bl	800262c <__aeabi_dmul>
 800675e:	0002      	movs	r2, r0
 8006760:	000b      	movs	r3, r1
						(int) ((fmod((double) game.positions[posIndex].lon,
 8006762:	0010      	movs	r0, r2
 8006764:	0019      	movs	r1, r3
 8006766:	f7fc fde7 	bl	8003338 <__aeabi_d2iz>
 800676a:	0003      	movs	r3, r0
		sprintf(sendBuffer, "(lat:%d.%d),(lon:%d.%d),",
 800676c:	17da      	asrs	r2, r3, #31
 800676e:	189b      	adds	r3, r3, r2
 8006770:	4053      	eors	r3, r2
 8006772:	4918      	ldr	r1, [pc, #96]	@ (80067d4 <SendData+0x18c>)
 8006774:	4812      	ldr	r0, [pc, #72]	@ (80067c0 <SendData+0x178>)
 8006776:	9301      	str	r3, [sp, #4]
 8006778:	9500      	str	r5, [sp, #0]
 800677a:	0023      	movs	r3, r4
 800677c:	0032      	movs	r2, r6
 800677e:	f008 f9b5 	bl	800eaec <siprintf>
		HAL_UART_Transmit(&huart2, sendBuffer, strlen(sendBuffer), 200);
 8006782:	4b0f      	ldr	r3, [pc, #60]	@ (80067c0 <SendData+0x178>)
 8006784:	0018      	movs	r0, r3
 8006786:	f7f9 fcc9 	bl	800011c <strlen>
 800678a:	0003      	movs	r3, r0
 800678c:	b29a      	uxth	r2, r3
 800678e:	490c      	ldr	r1, [pc, #48]	@ (80067c0 <SendData+0x178>)
 8006790:	480d      	ldr	r0, [pc, #52]	@ (80067c8 <SendData+0x180>)
 8006792:	23c8      	movs	r3, #200	@ 0xc8
 8006794:	f006 f95a 	bl	800ca4c <HAL_UART_Transmit>
	for (posIndex = 0; posIndex < game.numLocations; posIndex++) {
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	3301      	adds	r3, #1
 800679c:	607b      	str	r3, [r7, #4]
 800679e:	4b06      	ldr	r3, [pc, #24]	@ (80067b8 <SendData+0x170>)
 80067a0:	695b      	ldr	r3, [r3, #20]
 80067a2:	687a      	ldr	r2, [r7, #4]
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d387      	bcc.n	80066b8 <SendData+0x70>

	}
}
 80067a8:	46c0      	nop			@ (mov r8, r8)
 80067aa:	46c0      	nop			@ (mov r8, r8)
 80067ac:	46bd      	mov	sp, r7
 80067ae:	b002      	add	sp, #8
 80067b0:	bc80      	pop	{r7}
 80067b2:	46b8      	mov	r8, r7
 80067b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067b6:	46c0      	nop			@ (mov r8, r8)
 80067b8:	200002a8 	.word	0x200002a8
 80067bc:	080113ac 	.word	0x080113ac
 80067c0:	200004d0 	.word	0x200004d0
 80067c4:	200003d4 	.word	0x200003d4
 80067c8:	20001450 	.word	0x20001450
 80067cc:	3ff00000 	.word	0x3ff00000
 80067d0:	40c38800 	.word	0x40c38800
 80067d4:	0801142c 	.word	0x0801142c

080067d8 <ReceiveData>:
void ReceiveData() {
 80067d8:	b5b0      	push	{r4, r5, r7, lr}
 80067da:	4cdd      	ldr	r4, [pc, #884]	@ (8006b50 <ReceiveData+0x378>)
 80067dc:	44a5      	add	sp, r4
 80067de:	af00      	add	r7, sp, #0
	int rI = 0;
 80067e0:	2300      	movs	r3, #0
 80067e2:	4adc      	ldr	r2, [pc, #880]	@ (8006b54 <ReceiveData+0x37c>)
 80067e4:	18ba      	adds	r2, r7, r2
 80067e6:	6013      	str	r3, [r2, #0]
	while (HAL_UART_Receive(&huart2, &(syncBuffer[rI]), 1, 1000) == HAL_OK) {
 80067e8:	e19d      	b.n	8006b26 <ReceiveData+0x34e>
		if (syncBuffer[rI] && syncBuffer[rI] == '\r') {
 80067ea:	4adb      	ldr	r2, [pc, #876]	@ (8006b58 <ReceiveData+0x380>)
 80067ec:	49d9      	ldr	r1, [pc, #868]	@ (8006b54 <ReceiveData+0x37c>)
 80067ee:	187b      	adds	r3, r7, r1
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	18d3      	adds	r3, r2, r3
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d100      	bne.n	80067fc <ReceiveData+0x24>
 80067fa:	e18e      	b.n	8006b1a <ReceiveData+0x342>
 80067fc:	4ad6      	ldr	r2, [pc, #856]	@ (8006b58 <ReceiveData+0x380>)
 80067fe:	187b      	adds	r3, r7, r1
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	18d3      	adds	r3, r2, r3
 8006804:	781b      	ldrb	r3, [r3, #0]
 8006806:	2b0d      	cmp	r3, #13
 8006808:	d000      	beq.n	800680c <ReceiveData+0x34>
 800680a:	e186      	b.n	8006b1a <ReceiveData+0x342>
			enum {
				MAX_FIELDS = 255
			};
			json_t pool[MAX_FIELDS];
			json_t const *parent = json_create(syncBuffer, pool, MAX_FIELDS);
 800680c:	0039      	movs	r1, r7
 800680e:	4bd2      	ldr	r3, [pc, #840]	@ (8006b58 <ReceiveData+0x380>)
 8006810:	22ff      	movs	r2, #255	@ 0xff
 8006812:	0018      	movs	r0, r3
 8006814:	f001 fcbe 	bl	8008194 <json_create>
 8006818:	0003      	movs	r3, r0
 800681a:	49d0      	ldr	r1, [pc, #832]	@ (8006b5c <ReceiveData+0x384>)
 800681c:	187a      	adds	r2, r7, r1
 800681e:	6013      	str	r3, [r2, #0]
			if (parent) {
 8006820:	187b      	adds	r3, r7, r1
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d100      	bne.n	800682a <ReceiveData+0x52>
 8006828:	e158      	b.n	8006adc <ReceiveData+0x304>
				int locI = 0;
 800682a:	2300      	movs	r3, #0
 800682c:	4acc      	ldr	r2, [pc, #816]	@ (8006b60 <ReceiveData+0x388>)
 800682e:	18ba      	adds	r2, r7, r2
 8006830:	6013      	str	r3, [r2, #0]
				struct latLon tempLoc;
				char const *uidRxStr = json_getPropertyValue(parent, "uid");
 8006832:	4acc      	ldr	r2, [pc, #816]	@ (8006b64 <ReceiveData+0x38c>)
 8006834:	187b      	adds	r3, r7, r1
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	0011      	movs	r1, r2
 800683a:	0018      	movs	r0, r3
 800683c:	f001 fc46 	bl	80080cc <json_getPropertyValue>
 8006840:	0003      	movs	r3, r0
 8006842:	4ac9      	ldr	r2, [pc, #804]	@ (8006b68 <ReceiveData+0x390>)
 8006844:	18ba      	adds	r2, r7, r2
 8006846:	6013      	str	r3, [r2, #0]
				//HAL_UART_Transmit(&huart2, json_getPropertyValue(parent, "uid"), strlen(json_getPropertyValue(parent, "uid")), 1000);
				memset(&game.uid, 0, sizeof(game.uid));
 8006848:	4bc8      	ldr	r3, [pc, #800]	@ (8006b6c <ReceiveData+0x394>)
 800684a:	2220      	movs	r2, #32
 800684c:	2100      	movs	r1, #0
 800684e:	0018      	movs	r0, r3
 8006850:	f008 f9b8 	bl	800ebc4 <memset>
				for (int strI = 0; strI < strlen(uidRxStr); strI++)
 8006854:	2300      	movs	r3, #0
 8006856:	4ac6      	ldr	r2, [pc, #792]	@ (8006b70 <ReceiveData+0x398>)
 8006858:	18ba      	adds	r2, r7, r2
 800685a:	6013      	str	r3, [r2, #0]
 800685c:	e015      	b.n	800688a <ReceiveData+0xb2>
					game.uid[strI] = uidRxStr[strI];
 800685e:	4cc4      	ldr	r4, [pc, #784]	@ (8006b70 <ReceiveData+0x398>)
 8006860:	193b      	adds	r3, r7, r4
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4ac0      	ldr	r2, [pc, #768]	@ (8006b68 <ReceiveData+0x390>)
 8006866:	18ba      	adds	r2, r7, r2
 8006868:	6812      	ldr	r2, [r2, #0]
 800686a:	18d3      	adds	r3, r2, r3
 800686c:	7818      	ldrb	r0, [r3, #0]
 800686e:	49c1      	ldr	r1, [pc, #772]	@ (8006b74 <ReceiveData+0x39c>)
 8006870:	2396      	movs	r3, #150	@ 0x96
 8006872:	005b      	lsls	r3, r3, #1
 8006874:	193a      	adds	r2, r7, r4
 8006876:	6812      	ldr	r2, [r2, #0]
 8006878:	188a      	adds	r2, r1, r2
 800687a:	18d3      	adds	r3, r2, r3
 800687c:	1c02      	adds	r2, r0, #0
 800687e:	701a      	strb	r2, [r3, #0]
				for (int strI = 0; strI < strlen(uidRxStr); strI++)
 8006880:	193b      	adds	r3, r7, r4
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	3301      	adds	r3, #1
 8006886:	193a      	adds	r2, r7, r4
 8006888:	6013      	str	r3, [r2, #0]
 800688a:	4bb7      	ldr	r3, [pc, #732]	@ (8006b68 <ReceiveData+0x390>)
 800688c:	18fb      	adds	r3, r7, r3
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	0018      	movs	r0, r3
 8006892:	f7f9 fc43 	bl	800011c <strlen>
 8006896:	0002      	movs	r2, r0
 8006898:	4bb5      	ldr	r3, [pc, #724]	@ (8006b70 <ReceiveData+0x398>)
 800689a:	18fb      	adds	r3, r7, r3
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	429a      	cmp	r2, r3
 80068a0:	d8dd      	bhi.n	800685e <ReceiveData+0x86>
				game.allSteps = (unsigned int) json_getInteger(
 80068a2:	4ab5      	ldr	r2, [pc, #724]	@ (8006b78 <ReceiveData+0x3a0>)
 80068a4:	4cad      	ldr	r4, [pc, #692]	@ (8006b5c <ReceiveData+0x384>)
 80068a6:	193b      	adds	r3, r7, r4
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	0011      	movs	r1, r2
 80068ac:	0018      	movs	r0, r3
 80068ae:	f001 fbea 	bl	8008086 <json_getProperty>
 80068b2:	0003      	movs	r3, r0
 80068b4:	0018      	movs	r0, r3
 80068b6:	f7fd feeb 	bl	8004690 <json_getInteger>
 80068ba:	0002      	movs	r2, r0
 80068bc:	000b      	movs	r3, r1
 80068be:	0011      	movs	r1, r2
 80068c0:	4aac      	ldr	r2, [pc, #688]	@ (8006b74 <ReceiveData+0x39c>)
 80068c2:	238c      	movs	r3, #140	@ 0x8c
 80068c4:	005b      	lsls	r3, r3, #1
 80068c6:	50d1      	str	r1, [r2, r3]
						json_getProperty(parent, "lifeSteps"));
				game.dailyGoal = (unsigned int) json_getInteger(
 80068c8:	4aac      	ldr	r2, [pc, #688]	@ (8006b7c <ReceiveData+0x3a4>)
 80068ca:	193b      	adds	r3, r7, r4
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	0011      	movs	r1, r2
 80068d0:	0018      	movs	r0, r3
 80068d2:	f001 fbd8 	bl	8008086 <json_getProperty>
 80068d6:	0003      	movs	r3, r0
 80068d8:	0018      	movs	r0, r3
 80068da:	f7fd fed9 	bl	8004690 <json_getInteger>
 80068de:	0002      	movs	r2, r0
 80068e0:	000b      	movs	r3, r1
 80068e2:	0011      	movs	r1, r2
 80068e4:	4aa3      	ldr	r2, [pc, #652]	@ (8006b74 <ReceiveData+0x39c>)
 80068e6:	2392      	movs	r3, #146	@ 0x92
 80068e8:	005b      	lsls	r3, r3, #1
 80068ea:	50d1      	str	r1, [r2, r3]
						json_getProperty(parent, "difficulty"));
				game.evo = (unsigned int) json_getInteger(
 80068ec:	4aa4      	ldr	r2, [pc, #656]	@ (8006b80 <ReceiveData+0x3a8>)
 80068ee:	193b      	adds	r3, r7, r4
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	0011      	movs	r1, r2
 80068f4:	0018      	movs	r0, r3
 80068f6:	f001 fbc6 	bl	8008086 <json_getProperty>
 80068fa:	0003      	movs	r3, r0
 80068fc:	0018      	movs	r0, r3
 80068fe:	f7fd fec7 	bl	8004690 <json_getInteger>
 8006902:	0002      	movs	r2, r0
 8006904:	000b      	movs	r3, r1
 8006906:	b2d2      	uxtb	r2, r2
 8006908:	4b9a      	ldr	r3, [pc, #616]	@ (8006b74 <ReceiveData+0x39c>)
 800690a:	741a      	strb	r2, [r3, #16]
						json_getProperty(parent, "evolution"));
				game.mood = (unsigned int) json_getInteger(
 800690c:	4a9d      	ldr	r2, [pc, #628]	@ (8006b84 <ReceiveData+0x3ac>)
 800690e:	193b      	adds	r3, r7, r4
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	0011      	movs	r1, r2
 8006914:	0018      	movs	r0, r3
 8006916:	f001 fbb6 	bl	8008086 <json_getProperty>
 800691a:	0003      	movs	r3, r0
 800691c:	0018      	movs	r0, r3
 800691e:	f7fd feb7 	bl	8004690 <json_getInteger>
 8006922:	0002      	movs	r2, r0
 8006924:	000b      	movs	r3, r1
 8006926:	b2d2      	uxtb	r2, r2
 8006928:	4b92      	ldr	r3, [pc, #584]	@ (8006b74 <ReceiveData+0x39c>)
 800692a:	745a      	strb	r2, [r3, #17]
						json_getProperty(parent, "friendship"));
				game.stepsToday = (unsigned int) json_getInteger(
 800692c:	4a96      	ldr	r2, [pc, #600]	@ (8006b88 <ReceiveData+0x3b0>)
 800692e:	193b      	adds	r3, r7, r4
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	0011      	movs	r1, r2
 8006934:	0018      	movs	r0, r3
 8006936:	f001 fba6 	bl	8008086 <json_getProperty>
 800693a:	0003      	movs	r3, r0
 800693c:	0018      	movs	r0, r3
 800693e:	f7fd fea7 	bl	8004690 <json_getInteger>
 8006942:	0002      	movs	r2, r0
 8006944:	000b      	movs	r3, r1
 8006946:	0011      	movs	r1, r2
 8006948:	4a8a      	ldr	r2, [pc, #552]	@ (8006b74 <ReceiveData+0x39c>)
 800694a:	2390      	movs	r3, #144	@ 0x90
 800694c:	005b      	lsls	r3, r3, #1
 800694e:	50d1      	str	r1, [r2, r3]
						json_getProperty(parent, "dailySteps"));
				game.weeklySteps = (unsigned int) json_getInteger(
 8006950:	4a8e      	ldr	r2, [pc, #568]	@ (8006b8c <ReceiveData+0x3b4>)
 8006952:	193b      	adds	r3, r7, r4
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	0011      	movs	r1, r2
 8006958:	0018      	movs	r0, r3
 800695a:	f001 fb94 	bl	8008086 <json_getProperty>
 800695e:	0003      	movs	r3, r0
 8006960:	0018      	movs	r0, r3
 8006962:	f7fd fe95 	bl	8004690 <json_getInteger>
 8006966:	0002      	movs	r2, r0
 8006968:	000b      	movs	r3, r1
 800696a:	0011      	movs	r1, r2
 800696c:	4a81      	ldr	r2, [pc, #516]	@ (8006b74 <ReceiveData+0x39c>)
 800696e:	238e      	movs	r3, #142	@ 0x8e
 8006970:	005b      	lsls	r3, r3, #1
 8006972:	50d1      	str	r1, [r2, r3]
						json_getProperty(parent, "weeklySteps"));
				json_t const *location;
				json_t const *locations = json_getProperty(parent, "locations");
 8006974:	4a86      	ldr	r2, [pc, #536]	@ (8006b90 <ReceiveData+0x3b8>)
 8006976:	193b      	adds	r3, r7, r4
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	0011      	movs	r1, r2
 800697c:	0018      	movs	r0, r3
 800697e:	f001 fb82 	bl	8008086 <json_getProperty>
 8006982:	0003      	movs	r3, r0
 8006984:	4a83      	ldr	r2, [pc, #524]	@ (8006b94 <ReceiveData+0x3bc>)
 8006986:	18b9      	adds	r1, r7, r2
 8006988:	600b      	str	r3, [r1, #0]
				for (location = json_getChild(locations); location; location =
 800698a:	18bb      	adds	r3, r7, r2
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	0018      	movs	r0, r3
 8006990:	f7fd fe74 	bl	800467c <json_getChild>
 8006994:	0003      	movs	r3, r0
 8006996:	22a0      	movs	r2, #160	@ 0xa0
 8006998:	0152      	lsls	r2, r2, #5
 800699a:	18ba      	adds	r2, r7, r2
 800699c:	6013      	str	r3, [r2, #0]
 800699e:	e07a      	b.n	8006a96 <ReceiveData+0x2be>
						json_getSibling(location)) {
					tempLoc.lat = (float) json_getReal(
 80069a0:	4a7d      	ldr	r2, [pc, #500]	@ (8006b98 <ReceiveData+0x3c0>)
 80069a2:	25a0      	movs	r5, #160	@ 0xa0
 80069a4:	016d      	lsls	r5, r5, #5
 80069a6:	197b      	adds	r3, r7, r5
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	0011      	movs	r1, r2
 80069ac:	0018      	movs	r0, r3
 80069ae:	f001 fb6a 	bl	8008086 <json_getProperty>
 80069b2:	0003      	movs	r3, r0
 80069b4:	0018      	movs	r0, r3
 80069b6:	f7fd fe7d 	bl	80046b4 <json_getReal>
 80069ba:	0002      	movs	r2, r0
 80069bc:	000b      	movs	r3, r1
 80069be:	0010      	movs	r0, r2
 80069c0:	0019      	movs	r1, r3
 80069c2:	f7fc fd8f 	bl	80034e4 <__aeabi_d2f>
 80069c6:	1c02      	adds	r2, r0, #0
 80069c8:	4c74      	ldr	r4, [pc, #464]	@ (8006b9c <ReceiveData+0x3c4>)
 80069ca:	193b      	adds	r3, r7, r4
 80069cc:	601a      	str	r2, [r3, #0]
							json_getProperty(location, "lat"));
					tempLoc.lon = (float) json_getReal(
 80069ce:	4a74      	ldr	r2, [pc, #464]	@ (8006ba0 <ReceiveData+0x3c8>)
 80069d0:	197b      	adds	r3, r7, r5
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	0011      	movs	r1, r2
 80069d6:	0018      	movs	r0, r3
 80069d8:	f001 fb55 	bl	8008086 <json_getProperty>
 80069dc:	0003      	movs	r3, r0
 80069de:	0018      	movs	r0, r3
 80069e0:	f7fd fe68 	bl	80046b4 <json_getReal>
 80069e4:	0002      	movs	r2, r0
 80069e6:	000b      	movs	r3, r1
 80069e8:	0010      	movs	r0, r2
 80069ea:	0019      	movs	r1, r3
 80069ec:	f7fc fd7a 	bl	80034e4 <__aeabi_d2f>
 80069f0:	1c02      	adds	r2, r0, #0
 80069f2:	193b      	adds	r3, r7, r4
 80069f4:	605a      	str	r2, [r3, #4]
							json_getProperty(location, "lng"));
					if (fabs(tempLoc.lat) < .00001) {
 80069f6:	193b      	adds	r3, r7, r4
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	005b      	lsls	r3, r3, #1
 80069fc:	085b      	lsrs	r3, r3, #1
 80069fe:	1c18      	adds	r0, r3, #0
 8006a00:	f7fc fd28 	bl	8003454 <__aeabi_f2d>
 8006a04:	4a67      	ldr	r2, [pc, #412]	@ (8006ba4 <ReceiveData+0x3cc>)
 8006a06:	4b68      	ldr	r3, [pc, #416]	@ (8006ba8 <ReceiveData+0x3d0>)
 8006a08:	f7f9 fd30 	bl	800046c <__aeabi_dcmplt>
 8006a0c:	1e03      	subs	r3, r0, #0
 8006a0e:	d027      	beq.n	8006a60 <ReceiveData+0x288>

						tempLoc.lat = (float) json_getReal(
 8006a10:	4a66      	ldr	r2, [pc, #408]	@ (8006bac <ReceiveData+0x3d4>)
 8006a12:	197b      	adds	r3, r7, r5
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	0011      	movs	r1, r2
 8006a18:	0018      	movs	r0, r3
 8006a1a:	f001 fb34 	bl	8008086 <json_getProperty>
 8006a1e:	0003      	movs	r3, r0
 8006a20:	0018      	movs	r0, r3
 8006a22:	f7fd fe47 	bl	80046b4 <json_getReal>
 8006a26:	0002      	movs	r2, r0
 8006a28:	000b      	movs	r3, r1
 8006a2a:	0010      	movs	r0, r2
 8006a2c:	0019      	movs	r1, r3
 8006a2e:	f7fc fd59 	bl	80034e4 <__aeabi_d2f>
 8006a32:	1c02      	adds	r2, r0, #0
 8006a34:	193b      	adds	r3, r7, r4
 8006a36:	601a      	str	r2, [r3, #0]
								json_getProperty(location, "Lat"));
						tempLoc.lon = (float) json_getReal(
 8006a38:	4a5d      	ldr	r2, [pc, #372]	@ (8006bb0 <ReceiveData+0x3d8>)
 8006a3a:	197b      	adds	r3, r7, r5
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	0011      	movs	r1, r2
 8006a40:	0018      	movs	r0, r3
 8006a42:	f001 fb20 	bl	8008086 <json_getProperty>
 8006a46:	0003      	movs	r3, r0
 8006a48:	0018      	movs	r0, r3
 8006a4a:	f7fd fe33 	bl	80046b4 <json_getReal>
 8006a4e:	0002      	movs	r2, r0
 8006a50:	000b      	movs	r3, r1
 8006a52:	0010      	movs	r0, r2
 8006a54:	0019      	movs	r1, r3
 8006a56:	f7fc fd45 	bl	80034e4 <__aeabi_d2f>
 8006a5a:	1c02      	adds	r2, r0, #0
 8006a5c:	193b      	adds	r3, r7, r4
 8006a5e:	605a      	str	r2, [r3, #4]
								json_getProperty(location, "Lng"));
					}
					game.positions[locI] = tempLoc;
 8006a60:	4a44      	ldr	r2, [pc, #272]	@ (8006b74 <ReceiveData+0x39c>)
 8006a62:	4c3f      	ldr	r4, [pc, #252]	@ (8006b60 <ReceiveData+0x388>)
 8006a64:	193b      	adds	r3, r7, r4
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	3303      	adds	r3, #3
 8006a6a:	00db      	lsls	r3, r3, #3
 8006a6c:	494b      	ldr	r1, [pc, #300]	@ (8006b9c <ReceiveData+0x3c4>)
 8006a6e:	1879      	adds	r1, r7, r1
 8006a70:	18d3      	adds	r3, r2, r3
 8006a72:	000a      	movs	r2, r1
 8006a74:	ca03      	ldmia	r2!, {r0, r1}
 8006a76:	c303      	stmia	r3!, {r0, r1}
					locI++;
 8006a78:	193b      	adds	r3, r7, r4
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	3301      	adds	r3, #1
 8006a7e:	193a      	adds	r2, r7, r4
 8006a80:	6013      	str	r3, [r2, #0]
						json_getSibling(location)) {
 8006a82:	24a0      	movs	r4, #160	@ 0xa0
 8006a84:	0164      	lsls	r4, r4, #5
 8006a86:	193b      	adds	r3, r7, r4
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	0018      	movs	r0, r3
 8006a8c:	f7fd fdec 	bl	8004668 <json_getSibling>
 8006a90:	0003      	movs	r3, r0
 8006a92:	193a      	adds	r2, r7, r4
 8006a94:	6013      	str	r3, [r2, #0]
				for (location = json_getChild(locations); location; location =
 8006a96:	23a0      	movs	r3, #160	@ 0xa0
 8006a98:	015b      	lsls	r3, r3, #5
 8006a9a:	18fb      	adds	r3, r7, r3
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d000      	beq.n	8006aa4 <ReceiveData+0x2cc>
 8006aa2:	e77d      	b.n	80069a0 <ReceiveData+0x1c8>
				}
				game.numLocations = locI;
 8006aa4:	4b2e      	ldr	r3, [pc, #184]	@ (8006b60 <ReceiveData+0x388>)
 8006aa6:	18fb      	adds	r3, r7, r3
 8006aa8:	681a      	ldr	r2, [r3, #0]
 8006aaa:	4b32      	ldr	r3, [pc, #200]	@ (8006b74 <ReceiveData+0x39c>)
 8006aac:	615a      	str	r2, [r3, #20]
				for (locI = locI; locI < 32; locI++) {
 8006aae:	e010      	b.n	8006ad2 <ReceiveData+0x2fa>
					memset(&game.positions[locI], 0,
 8006ab0:	4c2b      	ldr	r4, [pc, #172]	@ (8006b60 <ReceiveData+0x388>)
 8006ab2:	193b      	adds	r3, r7, r4
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	3303      	adds	r3, #3
 8006ab8:	00da      	lsls	r2, r3, #3
 8006aba:	4b2e      	ldr	r3, [pc, #184]	@ (8006b74 <ReceiveData+0x39c>)
 8006abc:	18d3      	adds	r3, r2, r3
 8006abe:	2208      	movs	r2, #8
 8006ac0:	2100      	movs	r1, #0
 8006ac2:	0018      	movs	r0, r3
 8006ac4:	f008 f87e 	bl	800ebc4 <memset>
				for (locI = locI; locI < 32; locI++) {
 8006ac8:	193b      	adds	r3, r7, r4
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	3301      	adds	r3, #1
 8006ace:	193a      	adds	r2, r7, r4
 8006ad0:	6013      	str	r3, [r2, #0]
 8006ad2:	4b23      	ldr	r3, [pc, #140]	@ (8006b60 <ReceiveData+0x388>)
 8006ad4:	18fb      	adds	r3, r7, r3
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	2b1f      	cmp	r3, #31
 8006ada:	dde9      	ble.n	8006ab0 <ReceiveData+0x2d8>
							sizeof(game.positions[locI]));
				}
				//SendData();
			}
			for (ii = 0; ii <= rI; ii++)
 8006adc:	4b35      	ldr	r3, [pc, #212]	@ (8006bb4 <ReceiveData+0x3dc>)
 8006ade:	2200      	movs	r2, #0
 8006ae0:	801a      	strh	r2, [r3, #0]
 8006ae2:	e00d      	b.n	8006b00 <ReceiveData+0x328>
				syncBuffer[ii] = 0;
 8006ae4:	4b33      	ldr	r3, [pc, #204]	@ (8006bb4 <ReceiveData+0x3dc>)
 8006ae6:	881b      	ldrh	r3, [r3, #0]
 8006ae8:	b29b      	uxth	r3, r3
 8006aea:	001a      	movs	r2, r3
 8006aec:	4b1a      	ldr	r3, [pc, #104]	@ (8006b58 <ReceiveData+0x380>)
 8006aee:	2100      	movs	r1, #0
 8006af0:	5499      	strb	r1, [r3, r2]
			for (ii = 0; ii <= rI; ii++)
 8006af2:	4b30      	ldr	r3, [pc, #192]	@ (8006bb4 <ReceiveData+0x3dc>)
 8006af4:	881b      	ldrh	r3, [r3, #0]
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	3301      	adds	r3, #1
 8006afa:	b29a      	uxth	r2, r3
 8006afc:	4b2d      	ldr	r3, [pc, #180]	@ (8006bb4 <ReceiveData+0x3dc>)
 8006afe:	801a      	strh	r2, [r3, #0]
 8006b00:	4b2c      	ldr	r3, [pc, #176]	@ (8006bb4 <ReceiveData+0x3dc>)
 8006b02:	881b      	ldrh	r3, [r3, #0]
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	001a      	movs	r2, r3
 8006b08:	4912      	ldr	r1, [pc, #72]	@ (8006b54 <ReceiveData+0x37c>)
 8006b0a:	187b      	adds	r3, r7, r1
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	dae8      	bge.n	8006ae4 <ReceiveData+0x30c>
			rI = 0;
 8006b12:	2300      	movs	r3, #0
 8006b14:	187a      	adds	r2, r7, r1
 8006b16:	6013      	str	r3, [r2, #0]
			break;
 8006b18:	e014      	b.n	8006b44 <ReceiveData+0x36c>
		} else {
			rI++;
 8006b1a:	4a0e      	ldr	r2, [pc, #56]	@ (8006b54 <ReceiveData+0x37c>)
 8006b1c:	18bb      	adds	r3, r7, r2
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	3301      	adds	r3, #1
 8006b22:	18ba      	adds	r2, r7, r2
 8006b24:	6013      	str	r3, [r2, #0]
	while (HAL_UART_Receive(&huart2, &(syncBuffer[rI]), 1, 1000) == HAL_OK) {
 8006b26:	4b0b      	ldr	r3, [pc, #44]	@ (8006b54 <ReceiveData+0x37c>)
 8006b28:	18fb      	adds	r3, r7, r3
 8006b2a:	681a      	ldr	r2, [r3, #0]
 8006b2c:	4b0a      	ldr	r3, [pc, #40]	@ (8006b58 <ReceiveData+0x380>)
 8006b2e:	18d1      	adds	r1, r2, r3
 8006b30:	23fa      	movs	r3, #250	@ 0xfa
 8006b32:	009b      	lsls	r3, r3, #2
 8006b34:	4820      	ldr	r0, [pc, #128]	@ (8006bb8 <ReceiveData+0x3e0>)
 8006b36:	2201      	movs	r2, #1
 8006b38:	f006 f82c 	bl	800cb94 <HAL_UART_Receive>
 8006b3c:	1e03      	subs	r3, r0, #0
 8006b3e:	d100      	bne.n	8006b42 <ReceiveData+0x36a>
 8006b40:	e653      	b.n	80067ea <ReceiveData+0x12>
		}
	}

}
 8006b42:	46c0      	nop			@ (mov r8, r8)
 8006b44:	46c0      	nop			@ (mov r8, r8)
 8006b46:	46bd      	mov	sp, r7
 8006b48:	4b1c      	ldr	r3, [pc, #112]	@ (8006bbc <ReceiveData+0x3e4>)
 8006b4a:	449d      	add	sp, r3
 8006b4c:	bdb0      	pop	{r4, r5, r7, pc}
 8006b4e:	46c0      	nop			@ (mov r8, r8)
 8006b50:	ffffebf0 	.word	0xffffebf0
 8006b54:	0000140c 	.word	0x0000140c
 8006b58:	20000660 	.word	0x20000660
 8006b5c:	000013fc 	.word	0x000013fc
 8006b60:	00001408 	.word	0x00001408
 8006b64:	08011448 	.word	0x08011448
 8006b68:	000013f8 	.word	0x000013f8
 8006b6c:	200003d4 	.word	0x200003d4
 8006b70:	00001404 	.word	0x00001404
 8006b74:	200002a8 	.word	0x200002a8
 8006b78:	0801144c 	.word	0x0801144c
 8006b7c:	08011458 	.word	0x08011458
 8006b80:	08011464 	.word	0x08011464
 8006b84:	08011470 	.word	0x08011470
 8006b88:	0801147c 	.word	0x0801147c
 8006b8c:	08011488 	.word	0x08011488
 8006b90:	08011494 	.word	0x08011494
 8006b94:	000013f4 	.word	0x000013f4
 8006b98:	080114a0 	.word	0x080114a0
 8006b9c:	000013ec 	.word	0x000013ec
 8006ba0:	080114a4 	.word	0x080114a4
 8006ba4:	88e368f1 	.word	0x88e368f1
 8006ba8:	3ee4f8b5 	.word	0x3ee4f8b5
 8006bac:	080114a8 	.word	0x080114a8
 8006bb0:	080114ac 	.word	0x080114ac
 8006bb4:	200003fc 	.word	0x200003fc
 8006bb8:	20001450 	.word	0x20001450
 8006bbc:	00001410 	.word	0x00001410

08006bc0 <CheckExp>:
int CheckExp(int threshold, int comparer) {
 8006bc0:	b590      	push	{r4, r7, lr}
 8006bc2:	b085      	sub	sp, #20
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	6039      	str	r1, [r7, #0]
	int value = (int) ((float) comparer
 8006bca:	6838      	ldr	r0, [r7, #0]
 8006bcc:	f7fa fcf8 	bl	80015c0 <__aeabi_i2f>
 8006bd0:	1c04      	adds	r4, r0, #0
			* (1.0f + ((float) game.numLocations) / expDivisor));
 8006bd2:	4b1c      	ldr	r3, [pc, #112]	@ (8006c44 <CheckExp+0x84>)
 8006bd4:	695b      	ldr	r3, [r3, #20]
 8006bd6:	0018      	movs	r0, r3
 8006bd8:	f7fa fd3e 	bl	8001658 <__aeabi_ui2f>
 8006bdc:	1c03      	adds	r3, r0, #0
 8006bde:	2281      	movs	r2, #129	@ 0x81
 8006be0:	05d2      	lsls	r2, r2, #23
 8006be2:	1c11      	adds	r1, r2, #0
 8006be4:	1c18      	adds	r0, r3, #0
 8006be6:	f7f9 ffed 	bl	8000bc4 <__aeabi_fdiv>
 8006bea:	1c03      	adds	r3, r0, #0
 8006bec:	21fe      	movs	r1, #254	@ 0xfe
 8006bee:	0589      	lsls	r1, r1, #22
 8006bf0:	1c18      	adds	r0, r3, #0
 8006bf2:	f7f9 fe5d 	bl	80008b0 <__aeabi_fadd>
 8006bf6:	1c03      	adds	r3, r0, #0
 8006bf8:	1c19      	adds	r1, r3, #0
 8006bfa:	1c20      	adds	r0, r4, #0
 8006bfc:	f7fa f9c8 	bl	8000f90 <__aeabi_fmul>
 8006c00:	1c03      	adds	r3, r0, #0
	int value = (int) ((float) comparer
 8006c02:	1c18      	adds	r0, r3, #0
 8006c04:	f7fa fcbc 	bl	8001580 <__aeabi_f2iz>
 8006c08:	0003      	movs	r3, r0
 8006c0a:	60fb      	str	r3, [r7, #12]
	if (value < (threshold / 4))
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	da00      	bge.n	8006c14 <CheckExp+0x54>
 8006c12:	3303      	adds	r3, #3
 8006c14:	109b      	asrs	r3, r3, #2
 8006c16:	001a      	movs	r2, r3
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	da02      	bge.n	8006c24 <CheckExp+0x64>
		return -1;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	425b      	negs	r3, r3
 8006c22:	e00b      	b.n	8006c3c <CheckExp+0x7c>
	if (value < threshold)
 8006c24:	68fa      	ldr	r2, [r7, #12]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	da01      	bge.n	8006c30 <CheckExp+0x70>
		return 0;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	e005      	b.n	8006c3c <CheckExp+0x7c>
	if (value >= threshold)
 8006c30:	68fa      	ldr	r2, [r7, #12]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	429a      	cmp	r2, r3
 8006c36:	db01      	blt.n	8006c3c <CheckExp+0x7c>
		return 1;
 8006c38:	2301      	movs	r3, #1
 8006c3a:	e7ff      	b.n	8006c3c <CheckExp+0x7c>
}
 8006c3c:	0018      	movs	r0, r3
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	b005      	add	sp, #20
 8006c42:	bd90      	pop	{r4, r7, pc}
 8006c44:	200002a8 	.word	0x200002a8

08006c48 <GetLatLon>:
void GetLatLon() {
 8006c48:	b5b0      	push	{r4, r5, r7, lr}
 8006c4a:	b08c      	sub	sp, #48	@ 0x30
 8006c4c:	af00      	add	r7, sp, #0
	int gpsI = 0;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	62fb      	str	r3, [r7, #44]	@ 0x2c
	struct latLon pos;
	struct latLon tempPos;
	double checkW;
	double checkH;
	int posCheckI = 0;
 8006c52:	2300      	movs	r3, #0
 8006c54:	62bb      	str	r3, [r7, #40]	@ 0x28
	double gpsThreshold = 0.0004;
 8006c56:	4a94      	ldr	r2, [pc, #592]	@ (8006ea8 <GetLatLon+0x260>)
 8006c58:	4b94      	ldr	r3, [pc, #592]	@ (8006eac <GetLatLon+0x264>)
 8006c5a:	623a      	str	r2, [r7, #32]
 8006c5c:	627b      	str	r3, [r7, #36]	@ 0x24
	//HAL_UART_Recieve();
	while (HAL_UART_Receive(&huart1, &(buffer[gpsI]), 1, 1000) == HAL_OK || 1) {
 8006c5e:	e10a      	b.n	8006e76 <GetLatLon+0x22e>
		if (buffer[gpsI] == '$') {
			for (ii = 0; ii <= 127; ii++)
 8006c60:	4b93      	ldr	r3, [pc, #588]	@ (8006eb0 <GetLatLon+0x268>)
 8006c62:	2200      	movs	r2, #0
 8006c64:	801a      	strh	r2, [r3, #0]
 8006c66:	e00d      	b.n	8006c84 <GetLatLon+0x3c>
				buffer[ii] = 0;
 8006c68:	4b91      	ldr	r3, [pc, #580]	@ (8006eb0 <GetLatLon+0x268>)
 8006c6a:	881b      	ldrh	r3, [r3, #0]
 8006c6c:	b29b      	uxth	r3, r3
 8006c6e:	001a      	movs	r2, r3
 8006c70:	4b90      	ldr	r3, [pc, #576]	@ (8006eb4 <GetLatLon+0x26c>)
 8006c72:	2100      	movs	r1, #0
 8006c74:	5499      	strb	r1, [r3, r2]
			for (ii = 0; ii <= 127; ii++)
 8006c76:	4b8e      	ldr	r3, [pc, #568]	@ (8006eb0 <GetLatLon+0x268>)
 8006c78:	881b      	ldrh	r3, [r3, #0]
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	3301      	adds	r3, #1
 8006c7e:	b29a      	uxth	r2, r3
 8006c80:	4b8b      	ldr	r3, [pc, #556]	@ (8006eb0 <GetLatLon+0x268>)
 8006c82:	801a      	strh	r2, [r3, #0]
 8006c84:	4b8a      	ldr	r3, [pc, #552]	@ (8006eb0 <GetLatLon+0x268>)
 8006c86:	881b      	ldrh	r3, [r3, #0]
 8006c88:	b29b      	uxth	r3, r3
 8006c8a:	2b7f      	cmp	r3, #127	@ 0x7f
 8006c8c:	d9ec      	bls.n	8006c68 <GetLatLon+0x20>
			buffer[0] = '$';
 8006c8e:	4b89      	ldr	r3, [pc, #548]	@ (8006eb4 <GetLatLon+0x26c>)
 8006c90:	2224      	movs	r2, #36	@ 0x24
 8006c92:	701a      	strb	r2, [r3, #0]
			gpsI = 0;
 8006c94:	2300      	movs	r3, #0
 8006c96:	62fb      	str	r3, [r7, #44]	@ 0x2c
		}	  //HAL_UART_Transmit(&huart2, buffer[i], 1, 1000);
		if (buffer[gpsI] == '\n') {
 8006c98:	4a86      	ldr	r2, [pc, #536]	@ (8006eb4 <GetLatLon+0x26c>)
 8006c9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c9c:	18d3      	adds	r3, r2, r3
 8006c9e:	781b      	ldrb	r3, [r3, #0]
 8006ca0:	2b0a      	cmp	r3, #10
 8006ca2:	d000      	beq.n	8006ca6 <GetLatLon+0x5e>
 8006ca4:	e0e4      	b.n	8006e70 <GetLatLon+0x228>
			 else return;
			 }

			 break;
			 }*/
			if (minmea_parse_gga(&ggaStruct, &(buffer))) {
 8006ca6:	4a83      	ldr	r2, [pc, #524]	@ (8006eb4 <GetLatLon+0x26c>)
 8006ca8:	4b83      	ldr	r3, [pc, #524]	@ (8006eb8 <GetLatLon+0x270>)
 8006caa:	0011      	movs	r1, r2
 8006cac:	0018      	movs	r0, r3
 8006cae:	f000 fe0d 	bl	80078cc <minmea_parse_gga>
 8006cb2:	1e03      	subs	r3, r0, #0
 8006cb4:	d100      	bne.n	8006cb8 <GetLatLon+0x70>
 8006cb6:	e0c4      	b.n	8006e42 <GetLatLon+0x1fa>
				pos.lat = minmea_tocoord(&ggaStruct.latitude);
 8006cb8:	4b80      	ldr	r3, [pc, #512]	@ (8006ebc <GetLatLon+0x274>)
 8006cba:	0018      	movs	r0, r3
 8006cbc:	f7fd fc90 	bl	80045e0 <minmea_tocoord>
 8006cc0:	1c02      	adds	r2, r0, #0
 8006cc2:	2508      	movs	r5, #8
 8006cc4:	197b      	adds	r3, r7, r5
 8006cc6:	601a      	str	r2, [r3, #0]
				pos.lon = minmea_tocoord(&ggaStruct.longitude);
 8006cc8:	4b7d      	ldr	r3, [pc, #500]	@ (8006ec0 <GetLatLon+0x278>)
 8006cca:	0018      	movs	r0, r3
 8006ccc:	f7fd fc88 	bl	80045e0 <minmea_tocoord>
 8006cd0:	1c02      	adds	r2, r0, #0
 8006cd2:	197b      	adds	r3, r7, r5
 8006cd4:	605a      	str	r2, [r3, #4]
				game.time = ggaStruct.time;
 8006cd6:	4b7b      	ldr	r3, [pc, #492]	@ (8006ec4 <GetLatLon+0x27c>)
 8006cd8:	4a77      	ldr	r2, [pc, #476]	@ (8006eb8 <GetLatLon+0x270>)
 8006cda:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006cdc:	c313      	stmia	r3!, {r0, r1, r4}
 8006cde:	6812      	ldr	r2, [r2, #0]
 8006ce0:	601a      	str	r2, [r3, #0]
				frameGot = 1;
 8006ce2:	4b79      	ldr	r3, [pc, #484]	@ (8006ec8 <GetLatLon+0x280>)
 8006ce4:	2201      	movs	r2, #1
 8006ce6:	701a      	strb	r2, [r3, #0]
				posCheckI = 0;
 8006ce8:	2300      	movs	r3, #0
 8006cea:	62bb      	str	r3, [r7, #40]	@ 0x28
				if(isnan(pos.lat)||isnan(pos.lon)||pos.lon>400.0f||pos.lon<-400.0f||pos.lat>400.0f||pos.lat<-400.0f) return;
 8006cec:	002c      	movs	r4, r5
 8006cee:	193b      	adds	r3, r7, r4
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	1c19      	adds	r1, r3, #0
 8006cf4:	1c18      	adds	r0, r3, #0
 8006cf6:	f7fa fc2d 	bl	8001554 <__aeabi_fcmpun>
 8006cfa:	1e03      	subs	r3, r0, #0
 8006cfc:	d000      	beq.n	8006d00 <GetLatLon+0xb8>
 8006cfe:	e0cb      	b.n	8006e98 <GetLatLon+0x250>
 8006d00:	193b      	adds	r3, r7, r4
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	1c19      	adds	r1, r3, #0
 8006d06:	1c18      	adds	r0, r3, #0
 8006d08:	f7fa fc24 	bl	8001554 <__aeabi_fcmpun>
 8006d0c:	1e03      	subs	r3, r0, #0
 8006d0e:	d000      	beq.n	8006d12 <GetLatLon+0xca>
 8006d10:	e0c2      	b.n	8006e98 <GetLatLon+0x250>
 8006d12:	193b      	adds	r3, r7, r4
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	496d      	ldr	r1, [pc, #436]	@ (8006ecc <GetLatLon+0x284>)
 8006d18:	1c18      	adds	r0, r3, #0
 8006d1a:	f7f9 fbf5 	bl	8000508 <__aeabi_fcmpgt>
 8006d1e:	1e03      	subs	r3, r0, #0
 8006d20:	d000      	beq.n	8006d24 <GetLatLon+0xdc>
 8006d22:	e0b9      	b.n	8006e98 <GetLatLon+0x250>
 8006d24:	193b      	adds	r3, r7, r4
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	4969      	ldr	r1, [pc, #420]	@ (8006ed0 <GetLatLon+0x288>)
 8006d2a:	1c18      	adds	r0, r3, #0
 8006d2c:	f7f9 fbd8 	bl	80004e0 <__aeabi_fcmplt>
 8006d30:	1e03      	subs	r3, r0, #0
 8006d32:	d000      	beq.n	8006d36 <GetLatLon+0xee>
 8006d34:	e0b0      	b.n	8006e98 <GetLatLon+0x250>
 8006d36:	193b      	adds	r3, r7, r4
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4964      	ldr	r1, [pc, #400]	@ (8006ecc <GetLatLon+0x284>)
 8006d3c:	1c18      	adds	r0, r3, #0
 8006d3e:	f7f9 fbe3 	bl	8000508 <__aeabi_fcmpgt>
 8006d42:	1e03      	subs	r3, r0, #0
 8006d44:	d000      	beq.n	8006d48 <GetLatLon+0x100>
 8006d46:	e0a7      	b.n	8006e98 <GetLatLon+0x250>
 8006d48:	193b      	adds	r3, r7, r4
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4960      	ldr	r1, [pc, #384]	@ (8006ed0 <GetLatLon+0x288>)
 8006d4e:	1c18      	adds	r0, r3, #0
 8006d50:	f7f9 fbc6 	bl	80004e0 <__aeabi_fcmplt>
 8006d54:	1e03      	subs	r3, r0, #0
 8006d56:	d000      	beq.n	8006d5a <GetLatLon+0x112>
 8006d58:	e09e      	b.n	8006e98 <GetLatLon+0x250>
				for (posCheckI = 0; posCheckI < game.numLocations;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d5e:	e053      	b.n	8006e08 <GetLatLon+0x1c0>
						posCheckI++) {
					tempPos = game.positions[posCheckI];
 8006d60:	003a      	movs	r2, r7
 8006d62:	4958      	ldr	r1, [pc, #352]	@ (8006ec4 <GetLatLon+0x27c>)
 8006d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d66:	3303      	adds	r3, #3
 8006d68:	00db      	lsls	r3, r3, #3
 8006d6a:	18cb      	adds	r3, r1, r3
 8006d6c:	cb03      	ldmia	r3!, {r0, r1}
 8006d6e:	c203      	stmia	r2!, {r0, r1}
						checkW = fabs(tempPos.lat - pos.lat);
 8006d70:	003b      	movs	r3, r7
 8006d72:	681a      	ldr	r2, [r3, #0]
 8006d74:	2408      	movs	r4, #8
 8006d76:	193b      	adds	r3, r7, r4
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	1c19      	adds	r1, r3, #0
 8006d7c:	1c10      	adds	r0, r2, #0
 8006d7e:	f7fa fa45 	bl	800120c <__aeabi_fsub>
 8006d82:	1c03      	adds	r3, r0, #0
 8006d84:	005b      	lsls	r3, r3, #1
 8006d86:	085b      	lsrs	r3, r3, #1
 8006d88:	1c18      	adds	r0, r3, #0
 8006d8a:	f7fc fb63 	bl	8003454 <__aeabi_f2d>
 8006d8e:	0002      	movs	r2, r0
 8006d90:	000b      	movs	r3, r1
 8006d92:	61ba      	str	r2, [r7, #24]
 8006d94:	61fb      	str	r3, [r7, #28]
						checkH = fabs(tempPos.lon - pos.lon);
 8006d96:	003b      	movs	r3, r7
 8006d98:	685a      	ldr	r2, [r3, #4]
 8006d9a:	193b      	adds	r3, r7, r4
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	1c19      	adds	r1, r3, #0
 8006da0:	1c10      	adds	r0, r2, #0
 8006da2:	f7fa fa33 	bl	800120c <__aeabi_fsub>
 8006da6:	1c03      	adds	r3, r0, #0
 8006da8:	005b      	lsls	r3, r3, #1
 8006daa:	085b      	lsrs	r3, r3, #1
 8006dac:	1c18      	adds	r0, r3, #0
 8006dae:	f7fc fb51 	bl	8003454 <__aeabi_f2d>
 8006db2:	0002      	movs	r2, r0
 8006db4:	000b      	movs	r3, r1
 8006db6:	613a      	str	r2, [r7, #16]
 8006db8:	617b      	str	r3, [r7, #20]
						if ((double)sqrt((checkW * checkW) + (checkH * checkH))
 8006dba:	69ba      	ldr	r2, [r7, #24]
 8006dbc:	69fb      	ldr	r3, [r7, #28]
 8006dbe:	69b8      	ldr	r0, [r7, #24]
 8006dc0:	69f9      	ldr	r1, [r7, #28]
 8006dc2:	f7fb fc33 	bl	800262c <__aeabi_dmul>
 8006dc6:	0002      	movs	r2, r0
 8006dc8:	000b      	movs	r3, r1
 8006dca:	0014      	movs	r4, r2
 8006dcc:	001d      	movs	r5, r3
 8006dce:	693a      	ldr	r2, [r7, #16]
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	6938      	ldr	r0, [r7, #16]
 8006dd4:	6979      	ldr	r1, [r7, #20]
 8006dd6:	f7fb fc29 	bl	800262c <__aeabi_dmul>
 8006dda:	0002      	movs	r2, r0
 8006ddc:	000b      	movs	r3, r1
 8006dde:	0020      	movs	r0, r4
 8006de0:	0029      	movs	r1, r5
 8006de2:	f7fa fc7b 	bl	80016dc <__aeabi_dadd>
 8006de6:	0002      	movs	r2, r0
 8006de8:	000b      	movs	r3, r1
 8006dea:	0010      	movs	r0, r2
 8006dec:	0019      	movs	r1, r3
 8006dee:	f00a f818 	bl	8010e22 <sqrt>
 8006df2:	0002      	movs	r2, r0
 8006df4:	000b      	movs	r3, r1
 8006df6:	6a38      	ldr	r0, [r7, #32]
 8006df8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006dfa:	f7f9 fb4b 	bl	8000494 <__aeabi_dcmpgt>
 8006dfe:	1e03      	subs	r3, r0, #0
 8006e00:	d14c      	bne.n	8006e9c <GetLatLon+0x254>
						posCheckI++) {
 8006e02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e04:	3301      	adds	r3, #1
 8006e06:	62bb      	str	r3, [r7, #40]	@ 0x28
				for (posCheckI = 0; posCheckI < game.numLocations;
 8006e08:	4b2e      	ldr	r3, [pc, #184]	@ (8006ec4 <GetLatLon+0x27c>)
 8006e0a:	695a      	ldr	r2, [r3, #20]
 8006e0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	d8a6      	bhi.n	8006d60 <GetLatLon+0x118>
								< gpsThreshold)
							return;

					}
game.positions[game.numLocations] = pos;
 8006e12:	4b2c      	ldr	r3, [pc, #176]	@ (8006ec4 <GetLatLon+0x27c>)
 8006e14:	695b      	ldr	r3, [r3, #20]
 8006e16:	4a2b      	ldr	r2, [pc, #172]	@ (8006ec4 <GetLatLon+0x27c>)
 8006e18:	3303      	adds	r3, #3
 8006e1a:	00db      	lsls	r3, r3, #3
 8006e1c:	2108      	movs	r1, #8
 8006e1e:	1879      	adds	r1, r7, r1
 8006e20:	18d3      	adds	r3, r2, r3
 8006e22:	000a      	movs	r2, r1
 8006e24:	ca03      	ldmia	r2!, {r0, r1}
 8006e26:	c303      	stmia	r3!, {r0, r1}
				game.numLocations++;
 8006e28:	4b26      	ldr	r3, [pc, #152]	@ (8006ec4 <GetLatLon+0x27c>)
 8006e2a:	695b      	ldr	r3, [r3, #20]
 8006e2c:	1c5a      	adds	r2, r3, #1
 8006e2e:	4b25      	ldr	r3, [pc, #148]	@ (8006ec4 <GetLatLon+0x27c>)
 8006e30:	615a      	str	r2, [r3, #20]
				if (game.numLocations > 31)
 8006e32:	4b24      	ldr	r3, [pc, #144]	@ (8006ec4 <GetLatLon+0x27c>)
 8006e34:	695b      	ldr	r3, [r3, #20]
 8006e36:	2b1f      	cmp	r3, #31
 8006e38:	d932      	bls.n	8006ea0 <GetLatLon+0x258>
					game.numLocations = 0;
 8006e3a:	4b22      	ldr	r3, [pc, #136]	@ (8006ec4 <GetLatLon+0x27c>)
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	615a      	str	r2, [r3, #20]
				break;
 8006e40:	e02e      	b.n	8006ea0 <GetLatLon+0x258>
				}
				for (ii = 0; ii <= 127; ii++)
 8006e42:	4b1b      	ldr	r3, [pc, #108]	@ (8006eb0 <GetLatLon+0x268>)
 8006e44:	2200      	movs	r2, #0
 8006e46:	801a      	strh	r2, [r3, #0]
 8006e48:	e00d      	b.n	8006e66 <GetLatLon+0x21e>
				buffer[ii] = 0;
 8006e4a:	4b19      	ldr	r3, [pc, #100]	@ (8006eb0 <GetLatLon+0x268>)
 8006e4c:	881b      	ldrh	r3, [r3, #0]
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	001a      	movs	r2, r3
 8006e52:	4b18      	ldr	r3, [pc, #96]	@ (8006eb4 <GetLatLon+0x26c>)
 8006e54:	2100      	movs	r1, #0
 8006e56:	5499      	strb	r1, [r3, r2]
				for (ii = 0; ii <= 127; ii++)
 8006e58:	4b15      	ldr	r3, [pc, #84]	@ (8006eb0 <GetLatLon+0x268>)
 8006e5a:	881b      	ldrh	r3, [r3, #0]
 8006e5c:	b29b      	uxth	r3, r3
 8006e5e:	3301      	adds	r3, #1
 8006e60:	b29a      	uxth	r2, r3
 8006e62:	4b13      	ldr	r3, [pc, #76]	@ (8006eb0 <GetLatLon+0x268>)
 8006e64:	801a      	strh	r2, [r3, #0]
 8006e66:	4b12      	ldr	r3, [pc, #72]	@ (8006eb0 <GetLatLon+0x268>)
 8006e68:	881b      	ldrh	r3, [r3, #0]
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	2b7f      	cmp	r3, #127	@ 0x7f
 8006e6e:	d9ec      	bls.n	8006e4a <GetLatLon+0x202>
			}

			gpsI++;
 8006e70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e72:	3301      	adds	r3, #1
 8006e74:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (HAL_UART_Receive(&huart1, &(buffer[gpsI]), 1, 1000) == HAL_OK || 1) {
 8006e76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e78:	4b0e      	ldr	r3, [pc, #56]	@ (8006eb4 <GetLatLon+0x26c>)
 8006e7a:	18d1      	adds	r1, r2, r3
 8006e7c:	23fa      	movs	r3, #250	@ 0xfa
 8006e7e:	009b      	lsls	r3, r3, #2
 8006e80:	4814      	ldr	r0, [pc, #80]	@ (8006ed4 <GetLatLon+0x28c>)
 8006e82:	2201      	movs	r2, #1
 8006e84:	f005 fe86 	bl	800cb94 <HAL_UART_Receive>
		if (buffer[gpsI] == '$') {
 8006e88:	4a0a      	ldr	r2, [pc, #40]	@ (8006eb4 <GetLatLon+0x26c>)
 8006e8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e8c:	18d3      	adds	r3, r2, r3
 8006e8e:	781b      	ldrb	r3, [r3, #0]
 8006e90:	2b24      	cmp	r3, #36	@ 0x24
 8006e92:	d000      	beq.n	8006e96 <GetLatLon+0x24e>
 8006e94:	e700      	b.n	8006c98 <GetLatLon+0x50>
 8006e96:	e6e3      	b.n	8006c60 <GetLatLon+0x18>
				if(isnan(pos.lat)||isnan(pos.lon)||pos.lon>400.0f||pos.lon<-400.0f||pos.lat>400.0f||pos.lat<-400.0f) return;
 8006e98:	46c0      	nop			@ (mov r8, r8)
 8006e9a:	e002      	b.n	8006ea2 <GetLatLon+0x25a>
							return;
 8006e9c:	46c0      	nop			@ (mov r8, r8)
 8006e9e:	e000      	b.n	8006ea2 <GetLatLon+0x25a>
				break;
 8006ea0:	46c0      	nop			@ (mov r8, r8)
		}


	}
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	b00c      	add	sp, #48	@ 0x30
 8006ea6:	bdb0      	pop	{r4, r5, r7, pc}
 8006ea8:	eb1c432d 	.word	0xeb1c432d
 8006eac:	3f3a36e2 	.word	0x3f3a36e2
 8006eb0:	200003fc 	.word	0x200003fc
 8006eb4:	20000450 	.word	0x20000450
 8006eb8:	20000400 	.word	0x20000400
 8006ebc:	20000410 	.word	0x20000410
 8006ec0:	20000418 	.word	0x20000418
 8006ec4:	200002a8 	.word	0x200002a8
 8006ec8:	2000044e 	.word	0x2000044e
 8006ecc:	43c80000 	.word	0x43c80000
 8006ed0:	c3c80000 	.word	0xc3c80000
 8006ed4:	200013bc 	.word	0x200013bc

08006ed8 <Emote>:

void Emote() {
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b084      	sub	sp, #16
 8006edc:	af04      	add	r7, sp, #16
	switch (game.evo) {
 8006ede:	4b57      	ldr	r3, [pc, #348]	@ (800703c <Emote+0x164>)
 8006ee0:	7c1b      	ldrb	r3, [r3, #16]
 8006ee2:	2b02      	cmp	r3, #2
 8006ee4:	d041      	beq.n	8006f6a <Emote+0x92>
 8006ee6:	dd00      	ble.n	8006eea <Emote+0x12>
 8006ee8:	e069      	b.n	8006fbe <Emote+0xe6>
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d002      	beq.n	8006ef4 <Emote+0x1c>
 8006eee:	2b01      	cmp	r3, #1
 8006ef0:	d016      	beq.n	8006f20 <Emote+0x48>
 8006ef2:	e064      	b.n	8006fbe <Emote+0xe6>
	case 0:
		if (game.time.seconds % 3 == 0) {
 8006ef4:	4b51      	ldr	r3, [pc, #324]	@ (800703c <Emote+0x164>)
 8006ef6:	689b      	ldr	r3, [r3, #8]
 8006ef8:	2103      	movs	r1, #3
 8006efa:	0018      	movs	r0, r3
 8006efc:	f7f9 fa9a 	bl	8000434 <__aeabi_idivmod>
 8006f00:	1e0b      	subs	r3, r1, #0
 8006f02:	d157      	bne.n	8006fb4 <Emote+0xdc>
			game.time.seconds++;
 8006f04:	4b4d      	ldr	r3, [pc, #308]	@ (800703c <Emote+0x164>)
 8006f06:	689b      	ldr	r3, [r3, #8]
 8006f08:	1c5a      	adds	r2, r3, #1
 8006f0a:	4b4c      	ldr	r3, [pc, #304]	@ (800703c <Emote+0x164>)
 8006f0c:	609a      	str	r2, [r3, #8]
			effect = EggNoise;
 8006f0e:	4b4c      	ldr	r3, [pc, #304]	@ (8007040 <Emote+0x168>)
 8006f10:	2201      	movs	r2, #1
 8006f12:	701a      	strb	r2, [r3, #0]
			PlayEffect(effect);
 8006f14:	4b4a      	ldr	r3, [pc, #296]	@ (8007040 <Emote+0x168>)
 8006f16:	781b      	ldrb	r3, [r3, #0]
 8006f18:	0018      	movs	r0, r3
 8006f1a:	f7fe fbb5 	bl	8005688 <PlayEffect>
		}
		break;
 8006f1e:	e049      	b.n	8006fb4 <Emote+0xdc>
	case 1:
		if (game.time.seconds % 3 == 0) {
 8006f20:	4b46      	ldr	r3, [pc, #280]	@ (800703c <Emote+0x164>)
 8006f22:	689b      	ldr	r3, [r3, #8]
 8006f24:	2103      	movs	r1, #3
 8006f26:	0018      	movs	r0, r3
 8006f28:	f7f9 fa84 	bl	8000434 <__aeabi_idivmod>
 8006f2c:	1e0b      	subs	r3, r1, #0
 8006f2e:	d143      	bne.n	8006fb8 <Emote+0xe0>
			game.time.seconds++;
 8006f30:	4b42      	ldr	r3, [pc, #264]	@ (800703c <Emote+0x164>)
 8006f32:	689b      	ldr	r3, [r3, #8]
 8006f34:	1c5a      	adds	r2, r3, #1
 8006f36:	4b41      	ldr	r3, [pc, #260]	@ (800703c <Emote+0x164>)
 8006f38:	609a      	str	r2, [r3, #8]
			if (game.mood > sadMood) {
 8006f3a:	4b40      	ldr	r3, [pc, #256]	@ (800703c <Emote+0x164>)
 8006f3c:	7c5b      	ldrb	r3, [r3, #17]
 8006f3e:	001a      	movs	r2, r3
 8006f40:	2327      	movs	r3, #39	@ 0x27
 8006f42:	429a      	cmp	r2, r3
 8006f44:	dd08      	ble.n	8006f58 <Emote+0x80>
				effect = YoungNoiseHappy;
 8006f46:	4b3e      	ldr	r3, [pc, #248]	@ (8007040 <Emote+0x168>)
 8006f48:	2202      	movs	r2, #2
 8006f4a:	701a      	strb	r2, [r3, #0]
				PlayEffect(effect);
 8006f4c:	4b3c      	ldr	r3, [pc, #240]	@ (8007040 <Emote+0x168>)
 8006f4e:	781b      	ldrb	r3, [r3, #0]
 8006f50:	0018      	movs	r0, r3
 8006f52:	f7fe fb99 	bl	8005688 <PlayEffect>
				effect = YoungNoiseSad;
				PlayEffect(effect);

			}
		}
		break;
 8006f56:	e02f      	b.n	8006fb8 <Emote+0xe0>
				effect = YoungNoiseSad;
 8006f58:	4b39      	ldr	r3, [pc, #228]	@ (8007040 <Emote+0x168>)
 8006f5a:	2203      	movs	r2, #3
 8006f5c:	701a      	strb	r2, [r3, #0]
				PlayEffect(effect);
 8006f5e:	4b38      	ldr	r3, [pc, #224]	@ (8007040 <Emote+0x168>)
 8006f60:	781b      	ldrb	r3, [r3, #0]
 8006f62:	0018      	movs	r0, r3
 8006f64:	f7fe fb90 	bl	8005688 <PlayEffect>
		break;
 8006f68:	e026      	b.n	8006fb8 <Emote+0xe0>
	case 2:
		if (game.time.seconds % 3 == 0) {
 8006f6a:	4b34      	ldr	r3, [pc, #208]	@ (800703c <Emote+0x164>)
 8006f6c:	689b      	ldr	r3, [r3, #8]
 8006f6e:	2103      	movs	r1, #3
 8006f70:	0018      	movs	r0, r3
 8006f72:	f7f9 fa5f 	bl	8000434 <__aeabi_idivmod>
 8006f76:	1e0b      	subs	r3, r1, #0
 8006f78:	d120      	bne.n	8006fbc <Emote+0xe4>
			game.time.seconds++;
 8006f7a:	4b30      	ldr	r3, [pc, #192]	@ (800703c <Emote+0x164>)
 8006f7c:	689b      	ldr	r3, [r3, #8]
 8006f7e:	1c5a      	adds	r2, r3, #1
 8006f80:	4b2e      	ldr	r3, [pc, #184]	@ (800703c <Emote+0x164>)
 8006f82:	609a      	str	r2, [r3, #8]
			if (game.mood > sadMood) {
 8006f84:	4b2d      	ldr	r3, [pc, #180]	@ (800703c <Emote+0x164>)
 8006f86:	7c5b      	ldrb	r3, [r3, #17]
 8006f88:	001a      	movs	r2, r3
 8006f8a:	2327      	movs	r3, #39	@ 0x27
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	dd08      	ble.n	8006fa2 <Emote+0xca>
				effect = AdultNoiseHappy;
 8006f90:	4b2b      	ldr	r3, [pc, #172]	@ (8007040 <Emote+0x168>)
 8006f92:	2204      	movs	r2, #4
 8006f94:	701a      	strb	r2, [r3, #0]
				PlayEffect(effect);
 8006f96:	4b2a      	ldr	r3, [pc, #168]	@ (8007040 <Emote+0x168>)
 8006f98:	781b      	ldrb	r3, [r3, #0]
 8006f9a:	0018      	movs	r0, r3
 8006f9c:	f7fe fb74 	bl	8005688 <PlayEffect>
				effect = AdultNoiseSad;
				PlayEffect(effect);

			}
		}
		break;
 8006fa0:	e00c      	b.n	8006fbc <Emote+0xe4>
				effect = AdultNoiseSad;
 8006fa2:	4b27      	ldr	r3, [pc, #156]	@ (8007040 <Emote+0x168>)
 8006fa4:	2205      	movs	r2, #5
 8006fa6:	701a      	strb	r2, [r3, #0]
				PlayEffect(effect);
 8006fa8:	4b25      	ldr	r3, [pc, #148]	@ (8007040 <Emote+0x168>)
 8006faa:	781b      	ldrb	r3, [r3, #0]
 8006fac:	0018      	movs	r0, r3
 8006fae:	f7fe fb6b 	bl	8005688 <PlayEffect>
		break;
 8006fb2:	e003      	b.n	8006fbc <Emote+0xe4>
		break;
 8006fb4:	46c0      	nop			@ (mov r8, r8)
 8006fb6:	e002      	b.n	8006fbe <Emote+0xe6>
		break;
 8006fb8:	46c0      	nop			@ (mov r8, r8)
 8006fba:	e000      	b.n	8006fbe <Emote+0xe6>
		break;
 8006fbc:	46c0      	nop			@ (mov r8, r8)
	}
	if (game.mood <= sadMood) {
 8006fbe:	4b1f      	ldr	r3, [pc, #124]	@ (800703c <Emote+0x164>)
 8006fc0:	7c5b      	ldrb	r3, [r3, #17]
 8006fc2:	001a      	movs	r2, r3
 8006fc4:	2327      	movs	r3, #39	@ 0x27
 8006fc6:	429a      	cmp	r2, r3
 8006fc8:	dc0d      	bgt.n	8006fe6 <Emote+0x10e>
		drawString(0, 10, "Mood :( ", WHITE, BLACK, 1, 1);
 8006fca:	2301      	movs	r3, #1
 8006fcc:	425b      	negs	r3, r3
 8006fce:	4a1d      	ldr	r2, [pc, #116]	@ (8007044 <Emote+0x16c>)
 8006fd0:	2101      	movs	r1, #1
 8006fd2:	9102      	str	r1, [sp, #8]
 8006fd4:	2101      	movs	r1, #1
 8006fd6:	9101      	str	r1, [sp, #4]
 8006fd8:	2100      	movs	r1, #0
 8006fda:	9100      	str	r1, [sp, #0]
 8006fdc:	210a      	movs	r1, #10
 8006fde:	2000      	movs	r0, #0
 8006fe0:	f7fc fdd7 	bl	8003b92 <drawString>
	} else if (game.mood <= mehMood) {
		drawString(0, 10, "Mood :I ", WHITE, BLACK, 1, 1);
	} else if (game.mood >= happyMood) {
		drawString(0, 10, "Mood :) ", WHITE, BLACK, 1, 1);
	}
}
 8006fe4:	e026      	b.n	8007034 <Emote+0x15c>
	} else if (game.mood <= mehMood) {
 8006fe6:	4b15      	ldr	r3, [pc, #84]	@ (800703c <Emote+0x164>)
 8006fe8:	7c5b      	ldrb	r3, [r3, #17]
 8006fea:	001a      	movs	r2, r3
 8006fec:	2328      	movs	r3, #40	@ 0x28
 8006fee:	429a      	cmp	r2, r3
 8006ff0:	dc0d      	bgt.n	800700e <Emote+0x136>
		drawString(0, 10, "Mood :I ", WHITE, BLACK, 1, 1);
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	425b      	negs	r3, r3
 8006ff6:	4a14      	ldr	r2, [pc, #80]	@ (8007048 <Emote+0x170>)
 8006ff8:	2101      	movs	r1, #1
 8006ffa:	9102      	str	r1, [sp, #8]
 8006ffc:	2101      	movs	r1, #1
 8006ffe:	9101      	str	r1, [sp, #4]
 8007000:	2100      	movs	r1, #0
 8007002:	9100      	str	r1, [sp, #0]
 8007004:	210a      	movs	r1, #10
 8007006:	2000      	movs	r0, #0
 8007008:	f7fc fdc3 	bl	8003b92 <drawString>
}
 800700c:	e012      	b.n	8007034 <Emote+0x15c>
	} else if (game.mood >= happyMood) {
 800700e:	4b0b      	ldr	r3, [pc, #44]	@ (800703c <Emote+0x164>)
 8007010:	7c5b      	ldrb	r3, [r3, #17]
 8007012:	001a      	movs	r2, r3
 8007014:	2329      	movs	r3, #41	@ 0x29
 8007016:	429a      	cmp	r2, r3
 8007018:	db0c      	blt.n	8007034 <Emote+0x15c>
		drawString(0, 10, "Mood :) ", WHITE, BLACK, 1, 1);
 800701a:	2301      	movs	r3, #1
 800701c:	425b      	negs	r3, r3
 800701e:	4a0b      	ldr	r2, [pc, #44]	@ (800704c <Emote+0x174>)
 8007020:	2101      	movs	r1, #1
 8007022:	9102      	str	r1, [sp, #8]
 8007024:	2101      	movs	r1, #1
 8007026:	9101      	str	r1, [sp, #4]
 8007028:	2100      	movs	r1, #0
 800702a:	9100      	str	r1, [sp, #0]
 800702c:	210a      	movs	r1, #10
 800702e:	2000      	movs	r0, #0
 8007030:	f7fc fdaf 	bl	8003b92 <drawString>
}
 8007034:	46c0      	nop			@ (mov r8, r8)
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}
 800703a:	46c0      	nop			@ (mov r8, r8)
 800703c:	200002a8 	.word	0x200002a8
 8007040:	20000298 	.word	0x20000298
 8007044:	080114b0 	.word	0x080114b0
 8007048:	080114bc 	.word	0x080114bc
 800704c:	080114c8 	.word	0x080114c8

08007050 <GetJustLatLon>:
struct latLon GetJustLatLon() {
 8007050:	b590      	push	{r4, r7, lr}
 8007052:	b089      	sub	sp, #36	@ 0x24
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
	int gpsI = 0;
 8007058:	2300      	movs	r3, #0
 800705a:	61fb      	str	r3, [r7, #28]
	struct latLon pos;
	struct latLon tempPos;
	double checkW;
	double checkH;
	int posCheckI = 0;
 800705c:	2300      	movs	r3, #0
 800705e:	61bb      	str	r3, [r7, #24]
	//HAL_UART_Recieve();
	while (HAL_UART_Receive(&huart1, &(buffer[gpsI]), 1, 1000) == HAL_OK || 1) {
 8007060:	e057      	b.n	8007112 <GetJustLatLon+0xc2>
		if (buffer[gpsI] == '$') {
			for (ii = 0; ii <= 127; ii++)
 8007062:	4b36      	ldr	r3, [pc, #216]	@ (800713c <GetJustLatLon+0xec>)
 8007064:	2200      	movs	r2, #0
 8007066:	801a      	strh	r2, [r3, #0]
 8007068:	e00d      	b.n	8007086 <GetJustLatLon+0x36>
				buffer[ii] = 0;
 800706a:	4b34      	ldr	r3, [pc, #208]	@ (800713c <GetJustLatLon+0xec>)
 800706c:	881b      	ldrh	r3, [r3, #0]
 800706e:	b29b      	uxth	r3, r3
 8007070:	001a      	movs	r2, r3
 8007072:	4b33      	ldr	r3, [pc, #204]	@ (8007140 <GetJustLatLon+0xf0>)
 8007074:	2100      	movs	r1, #0
 8007076:	5499      	strb	r1, [r3, r2]
			for (ii = 0; ii <= 127; ii++)
 8007078:	4b30      	ldr	r3, [pc, #192]	@ (800713c <GetJustLatLon+0xec>)
 800707a:	881b      	ldrh	r3, [r3, #0]
 800707c:	b29b      	uxth	r3, r3
 800707e:	3301      	adds	r3, #1
 8007080:	b29a      	uxth	r2, r3
 8007082:	4b2e      	ldr	r3, [pc, #184]	@ (800713c <GetJustLatLon+0xec>)
 8007084:	801a      	strh	r2, [r3, #0]
 8007086:	4b2d      	ldr	r3, [pc, #180]	@ (800713c <GetJustLatLon+0xec>)
 8007088:	881b      	ldrh	r3, [r3, #0]
 800708a:	b29b      	uxth	r3, r3
 800708c:	2b7f      	cmp	r3, #127	@ 0x7f
 800708e:	d9ec      	bls.n	800706a <GetJustLatLon+0x1a>
			buffer[0] = '$';
 8007090:	4b2b      	ldr	r3, [pc, #172]	@ (8007140 <GetJustLatLon+0xf0>)
 8007092:	2224      	movs	r2, #36	@ 0x24
 8007094:	701a      	strb	r2, [r3, #0]
			gpsI = 0;
 8007096:	2300      	movs	r3, #0
 8007098:	61fb      	str	r3, [r7, #28]
		}	  //HAL_UART_Transmit(&huart2, buffer[i], 1, 1000);
		if (buffer[gpsI] == '\n') {
 800709a:	4a29      	ldr	r2, [pc, #164]	@ (8007140 <GetJustLatLon+0xf0>)
 800709c:	69fb      	ldr	r3, [r7, #28]
 800709e:	18d3      	adds	r3, r2, r3
 80070a0:	781b      	ldrb	r3, [r3, #0]
 80070a2:	2b0a      	cmp	r3, #10
 80070a4:	d132      	bne.n	800710c <GetJustLatLon+0xbc>
			 else return;
			 }

			 break;
			 }*/
			if (minmea_parse_gga(&ggaStruct, &(buffer))) {
 80070a6:	4a26      	ldr	r2, [pc, #152]	@ (8007140 <GetJustLatLon+0xf0>)
 80070a8:	4b26      	ldr	r3, [pc, #152]	@ (8007144 <GetJustLatLon+0xf4>)
 80070aa:	0011      	movs	r1, r2
 80070ac:	0018      	movs	r0, r3
 80070ae:	f000 fc0d 	bl	80078cc <minmea_parse_gga>
 80070b2:	1e03      	subs	r3, r0, #0
 80070b4:	d013      	beq.n	80070de <GetJustLatLon+0x8e>
				pos.lat = minmea_tocoord(&ggaStruct.latitude);
 80070b6:	4b24      	ldr	r3, [pc, #144]	@ (8007148 <GetJustLatLon+0xf8>)
 80070b8:	0018      	movs	r0, r3
 80070ba:	f7fd fa91 	bl	80045e0 <minmea_tocoord>
 80070be:	1c02      	adds	r2, r0, #0
 80070c0:	2410      	movs	r4, #16
 80070c2:	193b      	adds	r3, r7, r4
 80070c4:	601a      	str	r2, [r3, #0]
				pos.lon = minmea_tocoord(&ggaStruct.longitude);
 80070c6:	4b21      	ldr	r3, [pc, #132]	@ (800714c <GetJustLatLon+0xfc>)
 80070c8:	0018      	movs	r0, r3
 80070ca:	f7fd fa89 	bl	80045e0 <minmea_tocoord>
 80070ce:	1c02      	adds	r2, r0, #0
 80070d0:	193b      	adds	r3, r7, r4
 80070d2:	605a      	str	r2, [r3, #4]
				return pos;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	193a      	adds	r2, r7, r4
 80070d8:	ca03      	ldmia	r2!, {r0, r1}
 80070da:	c303      	stmia	r3!, {r0, r1}
 80070dc:	e029      	b.n	8007132 <GetJustLatLon+0xe2>
				break;
			}

			for (ii = 0; ii <= 127; ii++)
 80070de:	4b17      	ldr	r3, [pc, #92]	@ (800713c <GetJustLatLon+0xec>)
 80070e0:	2200      	movs	r2, #0
 80070e2:	801a      	strh	r2, [r3, #0]
 80070e4:	e00d      	b.n	8007102 <GetJustLatLon+0xb2>
				buffer[ii] = 0;
 80070e6:	4b15      	ldr	r3, [pc, #84]	@ (800713c <GetJustLatLon+0xec>)
 80070e8:	881b      	ldrh	r3, [r3, #0]
 80070ea:	b29b      	uxth	r3, r3
 80070ec:	001a      	movs	r2, r3
 80070ee:	4b14      	ldr	r3, [pc, #80]	@ (8007140 <GetJustLatLon+0xf0>)
 80070f0:	2100      	movs	r1, #0
 80070f2:	5499      	strb	r1, [r3, r2]
			for (ii = 0; ii <= 127; ii++)
 80070f4:	4b11      	ldr	r3, [pc, #68]	@ (800713c <GetJustLatLon+0xec>)
 80070f6:	881b      	ldrh	r3, [r3, #0]
 80070f8:	b29b      	uxth	r3, r3
 80070fa:	3301      	adds	r3, #1
 80070fc:	b29a      	uxth	r2, r3
 80070fe:	4b0f      	ldr	r3, [pc, #60]	@ (800713c <GetJustLatLon+0xec>)
 8007100:	801a      	strh	r2, [r3, #0]
 8007102:	4b0e      	ldr	r3, [pc, #56]	@ (800713c <GetJustLatLon+0xec>)
 8007104:	881b      	ldrh	r3, [r3, #0]
 8007106:	b29b      	uxth	r3, r3
 8007108:	2b7f      	cmp	r3, #127	@ 0x7f
 800710a:	d9ec      	bls.n	80070e6 <GetJustLatLon+0x96>
		}
		gpsI++;
 800710c:	69fb      	ldr	r3, [r7, #28]
 800710e:	3301      	adds	r3, #1
 8007110:	61fb      	str	r3, [r7, #28]
	while (HAL_UART_Receive(&huart1, &(buffer[gpsI]), 1, 1000) == HAL_OK || 1) {
 8007112:	69fa      	ldr	r2, [r7, #28]
 8007114:	4b0a      	ldr	r3, [pc, #40]	@ (8007140 <GetJustLatLon+0xf0>)
 8007116:	18d1      	adds	r1, r2, r3
 8007118:	23fa      	movs	r3, #250	@ 0xfa
 800711a:	009b      	lsls	r3, r3, #2
 800711c:	480c      	ldr	r0, [pc, #48]	@ (8007150 <GetJustLatLon+0x100>)
 800711e:	2201      	movs	r2, #1
 8007120:	f005 fd38 	bl	800cb94 <HAL_UART_Receive>
		if (buffer[gpsI] == '$') {
 8007124:	4a06      	ldr	r2, [pc, #24]	@ (8007140 <GetJustLatLon+0xf0>)
 8007126:	69fb      	ldr	r3, [r7, #28]
 8007128:	18d3      	adds	r3, r2, r3
 800712a:	781b      	ldrb	r3, [r3, #0]
 800712c:	2b24      	cmp	r3, #36	@ 0x24
 800712e:	d1b4      	bne.n	800709a <GetJustLatLon+0x4a>
 8007130:	e797      	b.n	8007062 <GetJustLatLon+0x12>

	}

}
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	46bd      	mov	sp, r7
 8007136:	b009      	add	sp, #36	@ 0x24
 8007138:	bd90      	pop	{r4, r7, pc}
 800713a:	46c0      	nop			@ (mov r8, r8)
 800713c:	200003fc 	.word	0x200003fc
 8007140:	20000450 	.word	0x20000450
 8007144:	20000400 	.word	0x20000400
 8007148:	20000410 	.word	0x20000410
 800714c:	20000418 	.word	0x20000418
 8007150:	200013bc 	.word	0x200013bc

08007154 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8007158:	b672      	cpsid	i
}
 800715a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800715c:	46c0      	nop			@ (mov r8, r8)
 800715e:	e7fd      	b.n	800715c <Error_Handler+0x8>

08007160 <minmea_isfield>:
        return false;

    return true;
}

static inline bool minmea_isfield(char c) {
 8007160:	b580      	push	{r7, lr}
 8007162:	b082      	sub	sp, #8
 8007164:	af00      	add	r7, sp, #0
 8007166:	0002      	movs	r2, r0
 8007168:	1dfb      	adds	r3, r7, #7
 800716a:	701a      	strb	r2, [r3, #0]
    return isprint((unsigned char) c) && c != ',' && c != '*';
 800716c:	1dfb      	adds	r3, r7, #7
 800716e:	781b      	ldrb	r3, [r3, #0]
 8007170:	1c5a      	adds	r2, r3, #1
 8007172:	4b0d      	ldr	r3, [pc, #52]	@ (80071a8 <minmea_isfield+0x48>)
 8007174:	18d3      	adds	r3, r2, r3
 8007176:	781b      	ldrb	r3, [r3, #0]
 8007178:	001a      	movs	r2, r3
 800717a:	2397      	movs	r3, #151	@ 0x97
 800717c:	4013      	ands	r3, r2
 800717e:	d009      	beq.n	8007194 <minmea_isfield+0x34>
 8007180:	1dfb      	adds	r3, r7, #7
 8007182:	781b      	ldrb	r3, [r3, #0]
 8007184:	2b2c      	cmp	r3, #44	@ 0x2c
 8007186:	d005      	beq.n	8007194 <minmea_isfield+0x34>
 8007188:	1dfb      	adds	r3, r7, #7
 800718a:	781b      	ldrb	r3, [r3, #0]
 800718c:	2b2a      	cmp	r3, #42	@ 0x2a
 800718e:	d001      	beq.n	8007194 <minmea_isfield+0x34>
 8007190:	2301      	movs	r3, #1
 8007192:	e000      	b.n	8007196 <minmea_isfield+0x36>
 8007194:	2300      	movs	r3, #0
 8007196:	1c1a      	adds	r2, r3, #0
 8007198:	2301      	movs	r3, #1
 800719a:	4013      	ands	r3, r2
 800719c:	b2db      	uxtb	r3, r3
}
 800719e:	0018      	movs	r0, r3
 80071a0:	46bd      	mov	sp, r7
 80071a2:	b002      	add	sp, #8
 80071a4:	bd80      	pop	{r7, pc}
 80071a6:	46c0      	nop			@ (mov r8, r8)
 80071a8:	0801bf58 	.word	0x0801bf58

080071ac <minmea_scan>:

bool minmea_scan(const char *sentence, const char *format, ...)
{
 80071ac:	b40e      	push	{r1, r2, r3}
 80071ae:	b5b0      	push	{r4, r5, r7, lr}
 80071b0:	b0a7      	sub	sp, #156	@ 0x9c
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	6078      	str	r0, [r7, #4]
    bool result = false;
 80071b6:	2397      	movs	r3, #151	@ 0x97
 80071b8:	18fb      	adds	r3, r7, r3
 80071ba:	2200      	movs	r2, #0
 80071bc:	701a      	strb	r2, [r3, #0]
    bool optional = false;
 80071be:	2396      	movs	r3, #150	@ 0x96
 80071c0:	18fb      	adds	r3, r7, r3
 80071c2:	2200      	movs	r2, #0
 80071c4:	701a      	strb	r2, [r3, #0]
    va_list ap;
    va_start(ap, format);
 80071c6:	23a8      	movs	r3, #168	@ 0xa8
 80071c8:	2208      	movs	r2, #8
 80071ca:	189b      	adds	r3, r3, r2
 80071cc:	19db      	adds	r3, r3, r7
 80071ce:	62fb      	str	r3, [r7, #44]	@ 0x2c

    const char *field = sentence;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2290      	movs	r2, #144	@ 0x90
 80071d4:	18ba      	adds	r2, r7, r2
 80071d6:	6013      	str	r3, [r2, #0]
        } else { \
            field = NULL; \
        } \
    } while (0)

    while (*format) {
 80071d8:	e345      	b.n	8007866 <minmea_scan+0x6ba>
        char type = *format++;
 80071da:	21a4      	movs	r1, #164	@ 0xa4
 80071dc:	2008      	movs	r0, #8
 80071de:	180b      	adds	r3, r1, r0
 80071e0:	19db      	adds	r3, r3, r7
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	1c5a      	adds	r2, r3, #1
 80071e6:	1809      	adds	r1, r1, r0
 80071e8:	19c9      	adds	r1, r1, r7
 80071ea:	600a      	str	r2, [r1, #0]
 80071ec:	2143      	movs	r1, #67	@ 0x43
 80071ee:	187a      	adds	r2, r7, r1
 80071f0:	781b      	ldrb	r3, [r3, #0]
 80071f2:	7013      	strb	r3, [r2, #0]

        if (type == ';') {
 80071f4:	187b      	adds	r3, r7, r1
 80071f6:	781b      	ldrb	r3, [r3, #0]
 80071f8:	2b3b      	cmp	r3, #59	@ 0x3b
 80071fa:	d104      	bne.n	8007206 <minmea_scan+0x5a>
            // All further fields are optional.
            optional = true;
 80071fc:	2396      	movs	r3, #150	@ 0x96
 80071fe:	18fb      	adds	r3, r7, r3
 8007200:	2201      	movs	r2, #1
 8007202:	701a      	strb	r2, [r3, #0]
            continue;
 8007204:	e32f      	b.n	8007866 <minmea_scan+0x6ba>
        }

        if (!field && !optional) {
 8007206:	2390      	movs	r3, #144	@ 0x90
 8007208:	18fb      	adds	r3, r7, r3
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d108      	bne.n	8007222 <minmea_scan+0x76>
 8007210:	2396      	movs	r3, #150	@ 0x96
 8007212:	18fb      	adds	r3, r7, r3
 8007214:	781b      	ldrb	r3, [r3, #0]
 8007216:	2201      	movs	r2, #1
 8007218:	4053      	eors	r3, r2
 800721a:	b2db      	uxtb	r3, r3
 800721c:	2b00      	cmp	r3, #0
 800721e:	d000      	beq.n	8007222 <minmea_scan+0x76>
 8007220:	e32f      	b.n	8007882 <minmea_scan+0x6d6>
            // Field requested but we ran out if input. Bail out.
            goto parse_error;
        }

        switch (type) {
 8007222:	2343      	movs	r3, #67	@ 0x43
 8007224:	18fb      	adds	r3, r7, r3
 8007226:	781b      	ldrb	r3, [r3, #0]
 8007228:	3b44      	subs	r3, #68	@ 0x44
 800722a:	2b30      	cmp	r3, #48	@ 0x30
 800722c:	d900      	bls.n	8007230 <minmea_scan+0x84>
 800722e:	e32a      	b.n	8007886 <minmea_scan+0x6da>
 8007230:	009a      	lsls	r2, r3, #2
 8007232:	4bbd      	ldr	r3, [pc, #756]	@ (8007528 <minmea_scan+0x37c>)
 8007234:	18d3      	adds	r3, r2, r3
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	469f      	mov	pc, r3
            case 'c': { // Single character field (char).
                char value = '\0';
 800723a:	258f      	movs	r5, #143	@ 0x8f
 800723c:	197b      	adds	r3, r7, r5
 800723e:	2200      	movs	r2, #0
 8007240:	701a      	strb	r2, [r3, #0]

                if (field && minmea_isfield(*field))
 8007242:	2490      	movs	r4, #144	@ 0x90
 8007244:	193b      	adds	r3, r7, r4
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d00c      	beq.n	8007266 <minmea_scan+0xba>
 800724c:	193b      	adds	r3, r7, r4
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	781b      	ldrb	r3, [r3, #0]
 8007252:	0018      	movs	r0, r3
 8007254:	f7ff ff84 	bl	8007160 <minmea_isfield>
 8007258:	1e03      	subs	r3, r0, #0
 800725a:	d004      	beq.n	8007266 <minmea_scan+0xba>
                    value = *field;
 800725c:	197b      	adds	r3, r7, r5
 800725e:	193a      	adds	r2, r7, r4
 8007260:	6812      	ldr	r2, [r2, #0]
 8007262:	7812      	ldrb	r2, [r2, #0]
 8007264:	701a      	strb	r2, [r3, #0]

                *va_arg(ap, char *) = value;
 8007266:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007268:	1d1a      	adds	r2, r3, #4
 800726a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	228f      	movs	r2, #143	@ 0x8f
 8007270:	18ba      	adds	r2, r7, r2
 8007272:	7812      	ldrb	r2, [r2, #0]
 8007274:	701a      	strb	r2, [r3, #0]
            } break;
 8007276:	e2db      	b.n	8007830 <minmea_scan+0x684>

            case 'd': { // Single character direction field (int).
                int value = 0;
 8007278:	2300      	movs	r3, #0
 800727a:	2288      	movs	r2, #136	@ 0x88
 800727c:	18ba      	adds	r2, r7, r2
 800727e:	6013      	str	r3, [r2, #0]

                if (field && minmea_isfield(*field)) {
 8007280:	2490      	movs	r4, #144	@ 0x90
 8007282:	193b      	adds	r3, r7, r4
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d022      	beq.n	80072d0 <minmea_scan+0x124>
 800728a:	193b      	adds	r3, r7, r4
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	781b      	ldrb	r3, [r3, #0]
 8007290:	0018      	movs	r0, r3
 8007292:	f7ff ff65 	bl	8007160 <minmea_isfield>
 8007296:	1e03      	subs	r3, r0, #0
 8007298:	d01a      	beq.n	80072d0 <minmea_scan+0x124>
                    switch (*field) {
 800729a:	193b      	adds	r3, r7, r4
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	781b      	ldrb	r3, [r3, #0]
 80072a0:	2b57      	cmp	r3, #87	@ 0x57
 80072a2:	d00f      	beq.n	80072c4 <minmea_scan+0x118>
 80072a4:	dd00      	ble.n	80072a8 <minmea_scan+0xfc>
 80072a6:	e2f0      	b.n	800788a <minmea_scan+0x6de>
 80072a8:	2b53      	cmp	r3, #83	@ 0x53
 80072aa:	d00b      	beq.n	80072c4 <minmea_scan+0x118>
 80072ac:	dd00      	ble.n	80072b0 <minmea_scan+0x104>
 80072ae:	e2ec      	b.n	800788a <minmea_scan+0x6de>
 80072b0:	2b45      	cmp	r3, #69	@ 0x45
 80072b2:	d002      	beq.n	80072ba <minmea_scan+0x10e>
 80072b4:	2b4e      	cmp	r3, #78	@ 0x4e
 80072b6:	d000      	beq.n	80072ba <minmea_scan+0x10e>
 80072b8:	e2e7      	b.n	800788a <minmea_scan+0x6de>
                        case 'N':
                        case 'E':
                            value = 1;
 80072ba:	2301      	movs	r3, #1
 80072bc:	2288      	movs	r2, #136	@ 0x88
 80072be:	18ba      	adds	r2, r7, r2
 80072c0:	6013      	str	r3, [r2, #0]
                            break;
 80072c2:	e005      	b.n	80072d0 <minmea_scan+0x124>
                        case 'S':
                        case 'W':
                            value = -1;
 80072c4:	2301      	movs	r3, #1
 80072c6:	425b      	negs	r3, r3
 80072c8:	2288      	movs	r2, #136	@ 0x88
 80072ca:	18ba      	adds	r2, r7, r2
 80072cc:	6013      	str	r3, [r2, #0]
                            break;
 80072ce:	46c0      	nop			@ (mov r8, r8)
                        default:
                            goto parse_error;
                    }
                }

                *va_arg(ap, int *) = value;
 80072d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072d2:	1d1a      	adds	r2, r3, #4
 80072d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	2288      	movs	r2, #136	@ 0x88
 80072da:	18ba      	adds	r2, r7, r2
 80072dc:	6812      	ldr	r2, [r2, #0]
 80072de:	601a      	str	r2, [r3, #0]
            } break;
 80072e0:	e2a6      	b.n	8007830 <minmea_scan+0x684>

            case 'f': { // Fractional value with scale (struct minmea_float).
                int sign = 0;
 80072e2:	2300      	movs	r3, #0
 80072e4:	2284      	movs	r2, #132	@ 0x84
 80072e6:	18ba      	adds	r2, r7, r2
 80072e8:	6013      	str	r3, [r2, #0]
                int_least32_t value = -1;
 80072ea:	2301      	movs	r3, #1
 80072ec:	425b      	negs	r3, r3
 80072ee:	2280      	movs	r2, #128	@ 0x80
 80072f0:	18ba      	adds	r2, r7, r2
 80072f2:	6013      	str	r3, [r2, #0]
                int_least32_t scale = 0;
 80072f4:	2300      	movs	r3, #0
 80072f6:	67fb      	str	r3, [r7, #124]	@ 0x7c

                if (field) {
 80072f8:	2390      	movs	r3, #144	@ 0x90
 80072fa:	18fb      	adds	r3, r7, r3
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d100      	bne.n	8007304 <minmea_scan+0x158>
 8007302:	e088      	b.n	8007416 <minmea_scan+0x26a>
                    while (minmea_isfield(*field)) {
 8007304:	e07d      	b.n	8007402 <minmea_scan+0x256>
                        if (*field == '+' && !sign && value == -1) {
 8007306:	2390      	movs	r3, #144	@ 0x90
 8007308:	18fb      	adds	r3, r7, r3
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	781b      	ldrb	r3, [r3, #0]
 800730e:	2b2b      	cmp	r3, #43	@ 0x2b
 8007310:	d10d      	bne.n	800732e <minmea_scan+0x182>
 8007312:	2284      	movs	r2, #132	@ 0x84
 8007314:	18bb      	adds	r3, r7, r2
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d108      	bne.n	800732e <minmea_scan+0x182>
 800731c:	2380      	movs	r3, #128	@ 0x80
 800731e:	18fb      	adds	r3, r7, r3
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	3301      	adds	r3, #1
 8007324:	d103      	bne.n	800732e <minmea_scan+0x182>
                            sign = 1;
 8007326:	2301      	movs	r3, #1
 8007328:	18ba      	adds	r2, r7, r2
 800732a:	6013      	str	r3, [r2, #0]
 800732c:	e063      	b.n	80073f6 <minmea_scan+0x24a>
                        } else if (*field == '-' && !sign && value == -1) {
 800732e:	2390      	movs	r3, #144	@ 0x90
 8007330:	18fb      	adds	r3, r7, r3
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	781b      	ldrb	r3, [r3, #0]
 8007336:	2b2d      	cmp	r3, #45	@ 0x2d
 8007338:	d10e      	bne.n	8007358 <minmea_scan+0x1ac>
 800733a:	2284      	movs	r2, #132	@ 0x84
 800733c:	18bb      	adds	r3, r7, r2
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d109      	bne.n	8007358 <minmea_scan+0x1ac>
 8007344:	2380      	movs	r3, #128	@ 0x80
 8007346:	18fb      	adds	r3, r7, r3
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	3301      	adds	r3, #1
 800734c:	d104      	bne.n	8007358 <minmea_scan+0x1ac>
                            sign = -1;
 800734e:	2301      	movs	r3, #1
 8007350:	425b      	negs	r3, r3
 8007352:	18ba      	adds	r2, r7, r2
 8007354:	6013      	str	r3, [r2, #0]
 8007356:	e04e      	b.n	80073f6 <minmea_scan+0x24a>
                        } else if (isdigit((unsigned char) *field)) {
 8007358:	2190      	movs	r1, #144	@ 0x90
 800735a:	187b      	adds	r3, r7, r1
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	781b      	ldrb	r3, [r3, #0]
 8007360:	1c5a      	adds	r2, r3, #1
 8007362:	4b72      	ldr	r3, [pc, #456]	@ (800752c <minmea_scan+0x380>)
 8007364:	18d3      	adds	r3, r2, r3
 8007366:	781b      	ldrb	r3, [r3, #0]
 8007368:	001a      	movs	r2, r3
 800736a:	2304      	movs	r3, #4
 800736c:	4013      	ands	r3, r2
 800736e:	d035      	beq.n	80073dc <minmea_scan+0x230>
                            int digit = *field - '0';
 8007370:	187b      	adds	r3, r7, r1
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	781b      	ldrb	r3, [r3, #0]
 8007376:	3b30      	subs	r3, #48	@ 0x30
 8007378:	63bb      	str	r3, [r7, #56]	@ 0x38
                            if (value == -1)
 800737a:	2280      	movs	r2, #128	@ 0x80
 800737c:	18bb      	adds	r3, r7, r2
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	3301      	adds	r3, #1
 8007382:	d102      	bne.n	800738a <minmea_scan+0x1de>
                                value = 0;
 8007384:	2300      	movs	r3, #0
 8007386:	18ba      	adds	r2, r7, r2
 8007388:	6013      	str	r3, [r2, #0]
                            if (value > (INT_LEAST32_MAX-digit) / 10) {
 800738a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800738c:	4a68      	ldr	r2, [pc, #416]	@ (8007530 <minmea_scan+0x384>)
 800738e:	1ad3      	subs	r3, r2, r3
 8007390:	210a      	movs	r1, #10
 8007392:	0018      	movs	r0, r3
 8007394:	f7f8 ff68 	bl	8000268 <__divsi3>
 8007398:	0003      	movs	r3, r0
 800739a:	001a      	movs	r2, r3
 800739c:	2380      	movs	r3, #128	@ 0x80
 800739e:	18fb      	adds	r3, r7, r3
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4293      	cmp	r3, r2
 80073a4:	dd04      	ble.n	80073b0 <minmea_scan+0x204>
                                /* we ran out of bits, what do we do? */
                                if (scale) {
 80073a6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d100      	bne.n	80073ae <minmea_scan+0x202>
 80073ac:	e26f      	b.n	800788e <minmea_scan+0x6e2>
                                    /* truncate extra precision */
                                    break;
 80073ae:	e032      	b.n	8007416 <minmea_scan+0x26a>
                                } else {
                                    /* integer overflow. bail out. */
                                    goto parse_error;
                                }
                            }
                            value = (10 * value) + digit;
 80073b0:	2180      	movs	r1, #128	@ 0x80
 80073b2:	187b      	adds	r3, r7, r1
 80073b4:	681a      	ldr	r2, [r3, #0]
 80073b6:	0013      	movs	r3, r2
 80073b8:	009b      	lsls	r3, r3, #2
 80073ba:	189b      	adds	r3, r3, r2
 80073bc:	005b      	lsls	r3, r3, #1
 80073be:	001a      	movs	r2, r3
 80073c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073c2:	189b      	adds	r3, r3, r2
 80073c4:	187a      	adds	r2, r7, r1
 80073c6:	6013      	str	r3, [r2, #0]
                            if (scale)
 80073c8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d013      	beq.n	80073f6 <minmea_scan+0x24a>
                                scale *= 10;
 80073ce:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80073d0:	0013      	movs	r3, r2
 80073d2:	009b      	lsls	r3, r3, #2
 80073d4:	189b      	adds	r3, r3, r2
 80073d6:	005b      	lsls	r3, r3, #1
 80073d8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80073da:	e00c      	b.n	80073f6 <minmea_scan+0x24a>
                        } else if (*field == '.' && scale == 0) {
 80073dc:	2390      	movs	r3, #144	@ 0x90
 80073de:	18fb      	adds	r3, r7, r3
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	781b      	ldrb	r3, [r3, #0]
 80073e4:	2b2e      	cmp	r3, #46	@ 0x2e
 80073e6:	d000      	beq.n	80073ea <minmea_scan+0x23e>
 80073e8:	e253      	b.n	8007892 <minmea_scan+0x6e6>
 80073ea:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d000      	beq.n	80073f2 <minmea_scan+0x246>
 80073f0:	e24f      	b.n	8007892 <minmea_scan+0x6e6>
                            scale = 1;
 80073f2:	2301      	movs	r3, #1
 80073f4:	67fb      	str	r3, [r7, #124]	@ 0x7c
                        } else {
                            goto parse_error;
                        }
                        field++;
 80073f6:	2290      	movs	r2, #144	@ 0x90
 80073f8:	18bb      	adds	r3, r7, r2
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	3301      	adds	r3, #1
 80073fe:	18ba      	adds	r2, r7, r2
 8007400:	6013      	str	r3, [r2, #0]
                    while (minmea_isfield(*field)) {
 8007402:	2390      	movs	r3, #144	@ 0x90
 8007404:	18fb      	adds	r3, r7, r3
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	781b      	ldrb	r3, [r3, #0]
 800740a:	0018      	movs	r0, r3
 800740c:	f7ff fea8 	bl	8007160 <minmea_isfield>
 8007410:	1e03      	subs	r3, r0, #0
 8007412:	d000      	beq.n	8007416 <minmea_scan+0x26a>
 8007414:	e777      	b.n	8007306 <minmea_scan+0x15a>
                    }
                }

                if ((sign || scale) && value == -1)
 8007416:	2384      	movs	r3, #132	@ 0x84
 8007418:	18fb      	adds	r3, r7, r3
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d102      	bne.n	8007426 <minmea_scan+0x27a>
 8007420:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007422:	2b00      	cmp	r3, #0
 8007424:	d005      	beq.n	8007432 <minmea_scan+0x286>
 8007426:	2380      	movs	r3, #128	@ 0x80
 8007428:	18fb      	adds	r3, r7, r3
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	3301      	adds	r3, #1
 800742e:	d100      	bne.n	8007432 <minmea_scan+0x286>
 8007430:	e231      	b.n	8007896 <minmea_scan+0x6ea>
                    goto parse_error;

                if (value == -1) {
 8007432:	2280      	movs	r2, #128	@ 0x80
 8007434:	18bb      	adds	r3, r7, r2
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	3301      	adds	r3, #1
 800743a:	d105      	bne.n	8007448 <minmea_scan+0x29c>
                    /* No digits were scanned. */
                    value = 0;
 800743c:	2300      	movs	r3, #0
 800743e:	18ba      	adds	r2, r7, r2
 8007440:	6013      	str	r3, [r2, #0]
                    scale = 0;
 8007442:	2300      	movs	r3, #0
 8007444:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007446:	e004      	b.n	8007452 <minmea_scan+0x2a6>
                } else if (scale == 0) {
 8007448:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800744a:	2b00      	cmp	r3, #0
 800744c:	d101      	bne.n	8007452 <minmea_scan+0x2a6>
                    /* No decimal point. */
                    scale = 1;
 800744e:	2301      	movs	r3, #1
 8007450:	67fb      	str	r3, [r7, #124]	@ 0x7c
                }
                if (sign)
 8007452:	2284      	movs	r2, #132	@ 0x84
 8007454:	18bb      	adds	r3, r7, r2
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d007      	beq.n	800746c <minmea_scan+0x2c0>
                    value *= sign;
 800745c:	2180      	movs	r1, #128	@ 0x80
 800745e:	187b      	adds	r3, r7, r1
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	18ba      	adds	r2, r7, r2
 8007464:	6812      	ldr	r2, [r2, #0]
 8007466:	4353      	muls	r3, r2
 8007468:	187a      	adds	r2, r7, r1
 800746a:	6013      	str	r3, [r2, #0]

                *va_arg(ap, struct minmea_float *) = (struct minmea_float) {value, scale};
 800746c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800746e:	1d1a      	adds	r2, r3, #4
 8007470:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	2280      	movs	r2, #128	@ 0x80
 8007476:	18ba      	adds	r2, r7, r2
 8007478:	6812      	ldr	r2, [r2, #0]
 800747a:	601a      	str	r2, [r3, #0]
 800747c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800747e:	605a      	str	r2, [r3, #4]
            } break;
 8007480:	e1d6      	b.n	8007830 <minmea_scan+0x684>

            case 'i': { // Integer value, default 0 (int).
                int value = 0;
 8007482:	2300      	movs	r3, #0
 8007484:	67bb      	str	r3, [r7, #120]	@ 0x78

                if (field) {
 8007486:	2290      	movs	r2, #144	@ 0x90
 8007488:	18bb      	adds	r3, r7, r2
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d011      	beq.n	80074b4 <minmea_scan+0x308>
                    char *endptr;
                    value = strtol(field, &endptr, 10);
 8007490:	2320      	movs	r3, #32
 8007492:	18f9      	adds	r1, r7, r3
 8007494:	18bb      	adds	r3, r7, r2
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	220a      	movs	r2, #10
 800749a:	0018      	movs	r0, r3
 800749c:	f007 f9a6 	bl	800e7ec <strtol>
 80074a0:	0003      	movs	r3, r0
 80074a2:	67bb      	str	r3, [r7, #120]	@ 0x78
                    if (minmea_isfield(*endptr))
 80074a4:	6a3b      	ldr	r3, [r7, #32]
 80074a6:	781b      	ldrb	r3, [r3, #0]
 80074a8:	0018      	movs	r0, r3
 80074aa:	f7ff fe59 	bl	8007160 <minmea_isfield>
 80074ae:	1e03      	subs	r3, r0, #0
 80074b0:	d000      	beq.n	80074b4 <minmea_scan+0x308>
 80074b2:	e1f2      	b.n	800789a <minmea_scan+0x6ee>
                        goto parse_error;
                }

                *va_arg(ap, int *) = value;
 80074b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074b6:	1d1a      	adds	r2, r3, #4
 80074b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80074be:	601a      	str	r2, [r3, #0]
            } break;
 80074c0:	e1b6      	b.n	8007830 <minmea_scan+0x684>

            case 's': { // String value (char *).
                char *buf = va_arg(ap, char *);
 80074c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074c4:	1d1a      	adds	r2, r3, #4
 80074c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	677b      	str	r3, [r7, #116]	@ 0x74

                if (field) {
 80074cc:	2390      	movs	r3, #144	@ 0x90
 80074ce:	18fb      	adds	r3, r7, r3
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d014      	beq.n	8007500 <minmea_scan+0x354>
                    while (minmea_isfield(*field))
 80074d6:	e00a      	b.n	80074ee <minmea_scan+0x342>
                        *buf++ = *field++;
 80074d8:	2190      	movs	r1, #144	@ 0x90
 80074da:	187b      	adds	r3, r7, r1
 80074dc:	681a      	ldr	r2, [r3, #0]
 80074de:	1c53      	adds	r3, r2, #1
 80074e0:	1879      	adds	r1, r7, r1
 80074e2:	600b      	str	r3, [r1, #0]
 80074e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80074e6:	1c59      	adds	r1, r3, #1
 80074e8:	6779      	str	r1, [r7, #116]	@ 0x74
 80074ea:	7812      	ldrb	r2, [r2, #0]
 80074ec:	701a      	strb	r2, [r3, #0]
                    while (minmea_isfield(*field))
 80074ee:	2390      	movs	r3, #144	@ 0x90
 80074f0:	18fb      	adds	r3, r7, r3
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	781b      	ldrb	r3, [r3, #0]
 80074f6:	0018      	movs	r0, r3
 80074f8:	f7ff fe32 	bl	8007160 <minmea_isfield>
 80074fc:	1e03      	subs	r3, r0, #0
 80074fe:	d1eb      	bne.n	80074d8 <minmea_scan+0x32c>
                }

                *buf = '\0';
 8007500:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007502:	2200      	movs	r2, #0
 8007504:	701a      	strb	r2, [r3, #0]
            } break;
 8007506:	e193      	b.n	8007830 <minmea_scan+0x684>

            case 't': { // NMEA talker+sentence identifier (char *).
                // This field is always mandatory.
                if (!field)
 8007508:	2290      	movs	r2, #144	@ 0x90
 800750a:	18bb      	adds	r3, r7, r2
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d100      	bne.n	8007514 <minmea_scan+0x368>
 8007512:	e1c4      	b.n	800789e <minmea_scan+0x6f2>
                    goto parse_error;

                if (field[0] != '$')
 8007514:	18bb      	adds	r3, r7, r2
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	781b      	ldrb	r3, [r3, #0]
 800751a:	2b24      	cmp	r3, #36	@ 0x24
 800751c:	d000      	beq.n	8007520 <minmea_scan+0x374>
 800751e:	e1c0      	b.n	80078a2 <minmea_scan+0x6f6>
                    goto parse_error;
                for (int i=0; i<5; i++)
 8007520:	2300      	movs	r3, #0
 8007522:	673b      	str	r3, [r7, #112]	@ 0x70
 8007524:	e01c      	b.n	8007560 <minmea_scan+0x3b4>
 8007526:	46c0      	nop			@ (mov r8, r8)
 8007528:	0801bc94 	.word	0x0801bc94
 800752c:	0801bf58 	.word	0x0801bf58
 8007530:	7fffffff 	.word	0x7fffffff
                    if (!minmea_isfield(field[1+i]))
 8007534:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007536:	3301      	adds	r3, #1
 8007538:	001a      	movs	r2, r3
 800753a:	2390      	movs	r3, #144	@ 0x90
 800753c:	18fb      	adds	r3, r7, r3
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	189b      	adds	r3, r3, r2
 8007542:	781b      	ldrb	r3, [r3, #0]
 8007544:	0018      	movs	r0, r3
 8007546:	f7ff fe0b 	bl	8007160 <minmea_isfield>
 800754a:	0003      	movs	r3, r0
 800754c:	001a      	movs	r2, r3
 800754e:	2301      	movs	r3, #1
 8007550:	4053      	eors	r3, r2
 8007552:	b2db      	uxtb	r3, r3
 8007554:	2b00      	cmp	r3, #0
 8007556:	d000      	beq.n	800755a <minmea_scan+0x3ae>
 8007558:	e1a5      	b.n	80078a6 <minmea_scan+0x6fa>
                for (int i=0; i<5; i++)
 800755a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800755c:	3301      	adds	r3, #1
 800755e:	673b      	str	r3, [r7, #112]	@ 0x70
 8007560:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007562:	2b04      	cmp	r3, #4
 8007564:	dde6      	ble.n	8007534 <minmea_scan+0x388>
                        goto parse_error;

                char *buf = va_arg(ap, char *);
 8007566:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007568:	1d1a      	adds	r2, r3, #4
 800756a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	63fb      	str	r3, [r7, #60]	@ 0x3c
                memcpy(buf, field+1, 5);
 8007570:	2390      	movs	r3, #144	@ 0x90
 8007572:	18fb      	adds	r3, r7, r3
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	1c59      	adds	r1, r3, #1
 8007578:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800757a:	2205      	movs	r2, #5
 800757c:	0018      	movs	r0, r3
 800757e:	f007 fbb6 	bl	800ecee <memcpy>
                buf[5] = '\0';
 8007582:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007584:	3305      	adds	r3, #5
 8007586:	2200      	movs	r2, #0
 8007588:	701a      	strb	r2, [r3, #0]
            } break;
 800758a:	e151      	b.n	8007830 <minmea_scan+0x684>

            case 'D': { // Date (int, int, int), -1 if empty.
                struct minmea_date *date = va_arg(ap, struct minmea_date *);
 800758c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800758e:	1d1a      	adds	r2, r3, #4
 8007590:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	633b      	str	r3, [r7, #48]	@ 0x30

                int d = -1, m = -1, y = -1;
 8007596:	2301      	movs	r3, #1
 8007598:	425b      	negs	r3, r3
 800759a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800759c:	2301      	movs	r3, #1
 800759e:	425b      	negs	r3, r3
 80075a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80075a2:	2301      	movs	r3, #1
 80075a4:	425b      	negs	r3, r3
 80075a6:	667b      	str	r3, [r7, #100]	@ 0x64

                if (field && minmea_isfield(*field)) {
 80075a8:	2290      	movs	r2, #144	@ 0x90
 80075aa:	18bb      	adds	r3, r7, r2
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d067      	beq.n	8007682 <minmea_scan+0x4d6>
 80075b2:	18bb      	adds	r3, r7, r2
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	781b      	ldrb	r3, [r3, #0]
 80075b8:	0018      	movs	r0, r3
 80075ba:	f7ff fdd1 	bl	8007160 <minmea_isfield>
 80075be:	1e03      	subs	r3, r0, #0
 80075c0:	d05f      	beq.n	8007682 <minmea_scan+0x4d6>
                    // Always six digits.
                    for (int i=0; i<6; i++)
 80075c2:	2300      	movs	r3, #0
 80075c4:	663b      	str	r3, [r7, #96]	@ 0x60
 80075c6:	e011      	b.n	80075ec <minmea_scan+0x440>
                        if (!isdigit((unsigned char) field[i]))
 80075c8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80075ca:	2290      	movs	r2, #144	@ 0x90
 80075cc:	18ba      	adds	r2, r7, r2
 80075ce:	6812      	ldr	r2, [r2, #0]
 80075d0:	18d3      	adds	r3, r2, r3
 80075d2:	781b      	ldrb	r3, [r3, #0]
 80075d4:	1c5a      	adds	r2, r3, #1
 80075d6:	4bbb      	ldr	r3, [pc, #748]	@ (80078c4 <minmea_scan+0x718>)
 80075d8:	18d3      	adds	r3, r2, r3
 80075da:	781b      	ldrb	r3, [r3, #0]
 80075dc:	001a      	movs	r2, r3
 80075de:	2304      	movs	r3, #4
 80075e0:	4013      	ands	r3, r2
 80075e2:	d100      	bne.n	80075e6 <minmea_scan+0x43a>
 80075e4:	e161      	b.n	80078aa <minmea_scan+0x6fe>
                    for (int i=0; i<6; i++)
 80075e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80075e8:	3301      	adds	r3, #1
 80075ea:	663b      	str	r3, [r7, #96]	@ 0x60
 80075ec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80075ee:	2b05      	cmp	r3, #5
 80075f0:	ddea      	ble.n	80075c8 <minmea_scan+0x41c>
                            goto parse_error;

                    d = strtol((char[]) {field[0], field[1], '\0'}, NULL, 10);
 80075f2:	2490      	movs	r4, #144	@ 0x90
 80075f4:	193b      	adds	r3, r7, r4
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	781a      	ldrb	r2, [r3, #0]
 80075fa:	211c      	movs	r1, #28
 80075fc:	187b      	adds	r3, r7, r1
 80075fe:	701a      	strb	r2, [r3, #0]
 8007600:	193b      	adds	r3, r7, r4
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	3301      	adds	r3, #1
 8007606:	781a      	ldrb	r2, [r3, #0]
 8007608:	187b      	adds	r3, r7, r1
 800760a:	705a      	strb	r2, [r3, #1]
 800760c:	187b      	adds	r3, r7, r1
 800760e:	2200      	movs	r2, #0
 8007610:	709a      	strb	r2, [r3, #2]
 8007612:	187b      	adds	r3, r7, r1
 8007614:	220a      	movs	r2, #10
 8007616:	2100      	movs	r1, #0
 8007618:	0018      	movs	r0, r3
 800761a:	f007 f8e7 	bl	800e7ec <strtol>
 800761e:	0003      	movs	r3, r0
 8007620:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    m = strtol((char[]) {field[2], field[3], '\0'}, NULL, 10);
 8007622:	193b      	adds	r3, r7, r4
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	3302      	adds	r3, #2
 8007628:	781a      	ldrb	r2, [r3, #0]
 800762a:	2118      	movs	r1, #24
 800762c:	187b      	adds	r3, r7, r1
 800762e:	701a      	strb	r2, [r3, #0]
 8007630:	193b      	adds	r3, r7, r4
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	3303      	adds	r3, #3
 8007636:	781a      	ldrb	r2, [r3, #0]
 8007638:	187b      	adds	r3, r7, r1
 800763a:	705a      	strb	r2, [r3, #1]
 800763c:	187b      	adds	r3, r7, r1
 800763e:	2200      	movs	r2, #0
 8007640:	709a      	strb	r2, [r3, #2]
 8007642:	187b      	adds	r3, r7, r1
 8007644:	220a      	movs	r2, #10
 8007646:	2100      	movs	r1, #0
 8007648:	0018      	movs	r0, r3
 800764a:	f007 f8cf 	bl	800e7ec <strtol>
 800764e:	0003      	movs	r3, r0
 8007650:	66bb      	str	r3, [r7, #104]	@ 0x68
                    y = strtol((char[]) {field[4], field[5], '\0'}, NULL, 10);
 8007652:	193b      	adds	r3, r7, r4
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	3304      	adds	r3, #4
 8007658:	781a      	ldrb	r2, [r3, #0]
 800765a:	2114      	movs	r1, #20
 800765c:	187b      	adds	r3, r7, r1
 800765e:	701a      	strb	r2, [r3, #0]
 8007660:	193b      	adds	r3, r7, r4
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	3305      	adds	r3, #5
 8007666:	781a      	ldrb	r2, [r3, #0]
 8007668:	187b      	adds	r3, r7, r1
 800766a:	705a      	strb	r2, [r3, #1]
 800766c:	187b      	adds	r3, r7, r1
 800766e:	2200      	movs	r2, #0
 8007670:	709a      	strb	r2, [r3, #2]
 8007672:	187b      	adds	r3, r7, r1
 8007674:	220a      	movs	r2, #10
 8007676:	2100      	movs	r1, #0
 8007678:	0018      	movs	r0, r3
 800767a:	f007 f8b7 	bl	800e7ec <strtol>
 800767e:	0003      	movs	r3, r0
 8007680:	667b      	str	r3, [r7, #100]	@ 0x64
                }

                date->day = d;
 8007682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007684:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007686:	601a      	str	r2, [r3, #0]
                date->month = m;
 8007688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800768a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800768c:	605a      	str	r2, [r3, #4]
                date->year = y;
 800768e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007690:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007692:	609a      	str	r2, [r3, #8]
            } break;
 8007694:	e0cc      	b.n	8007830 <minmea_scan+0x684>

            case 'T': { // Time (int, int, int, int), -1 if empty.
                struct minmea_time *time = va_arg(ap, struct minmea_time *);
 8007696:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007698:	1d1a      	adds	r2, r3, #4
 800769a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	637b      	str	r3, [r7, #52]	@ 0x34

                int h = -1, i = -1, s = -1, u = -1;
 80076a0:	2301      	movs	r3, #1
 80076a2:	425b      	negs	r3, r3
 80076a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80076a6:	2301      	movs	r3, #1
 80076a8:	425b      	negs	r3, r3
 80076aa:	65bb      	str	r3, [r7, #88]	@ 0x58
 80076ac:	2301      	movs	r3, #1
 80076ae:	425b      	negs	r3, r3
 80076b0:	657b      	str	r3, [r7, #84]	@ 0x54
 80076b2:	2301      	movs	r3, #1
 80076b4:	425b      	negs	r3, r3
 80076b6:	653b      	str	r3, [r7, #80]	@ 0x50

                if (field && minmea_isfield(*field)) {
 80076b8:	2290      	movs	r2, #144	@ 0x90
 80076ba:	18bb      	adds	r3, r7, r2
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d100      	bne.n	80076c4 <minmea_scan+0x518>
 80076c2:	e0a7      	b.n	8007814 <minmea_scan+0x668>
 80076c4:	18bb      	adds	r3, r7, r2
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	781b      	ldrb	r3, [r3, #0]
 80076ca:	0018      	movs	r0, r3
 80076cc:	f7ff fd48 	bl	8007160 <minmea_isfield>
 80076d0:	1e03      	subs	r3, r0, #0
 80076d2:	d100      	bne.n	80076d6 <minmea_scan+0x52a>
 80076d4:	e09e      	b.n	8007814 <minmea_scan+0x668>
                    // Minimum required: integer time.
                    for (int i=0; i<6; i++)
 80076d6:	2300      	movs	r3, #0
 80076d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80076da:	e011      	b.n	8007700 <minmea_scan+0x554>
                        if (!isdigit((unsigned char) field[i]))
 80076dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076de:	2290      	movs	r2, #144	@ 0x90
 80076e0:	18ba      	adds	r2, r7, r2
 80076e2:	6812      	ldr	r2, [r2, #0]
 80076e4:	18d3      	adds	r3, r2, r3
 80076e6:	781b      	ldrb	r3, [r3, #0]
 80076e8:	1c5a      	adds	r2, r3, #1
 80076ea:	4b76      	ldr	r3, [pc, #472]	@ (80078c4 <minmea_scan+0x718>)
 80076ec:	18d3      	adds	r3, r2, r3
 80076ee:	781b      	ldrb	r3, [r3, #0]
 80076f0:	001a      	movs	r2, r3
 80076f2:	2304      	movs	r3, #4
 80076f4:	4013      	ands	r3, r2
 80076f6:	d100      	bne.n	80076fa <minmea_scan+0x54e>
 80076f8:	e0d9      	b.n	80078ae <minmea_scan+0x702>
                    for (int i=0; i<6; i++)
 80076fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076fc:	3301      	adds	r3, #1
 80076fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007700:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007702:	2b05      	cmp	r3, #5
 8007704:	ddea      	ble.n	80076dc <minmea_scan+0x530>
                            goto parse_error;

                    h = strtol((char[]) {field[0], field[1], '\0'}, NULL, 10);
 8007706:	2490      	movs	r4, #144	@ 0x90
 8007708:	193b      	adds	r3, r7, r4
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	781a      	ldrb	r2, [r3, #0]
 800770e:	2110      	movs	r1, #16
 8007710:	187b      	adds	r3, r7, r1
 8007712:	701a      	strb	r2, [r3, #0]
 8007714:	193b      	adds	r3, r7, r4
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	3301      	adds	r3, #1
 800771a:	781a      	ldrb	r2, [r3, #0]
 800771c:	187b      	adds	r3, r7, r1
 800771e:	705a      	strb	r2, [r3, #1]
 8007720:	187b      	adds	r3, r7, r1
 8007722:	2200      	movs	r2, #0
 8007724:	709a      	strb	r2, [r3, #2]
 8007726:	187b      	adds	r3, r7, r1
 8007728:	220a      	movs	r2, #10
 800772a:	2100      	movs	r1, #0
 800772c:	0018      	movs	r0, r3
 800772e:	f007 f85d 	bl	800e7ec <strtol>
 8007732:	0003      	movs	r3, r0
 8007734:	65fb      	str	r3, [r7, #92]	@ 0x5c
                    i = strtol((char[]) {field[2], field[3], '\0'}, NULL, 10);
 8007736:	193b      	adds	r3, r7, r4
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	3302      	adds	r3, #2
 800773c:	781a      	ldrb	r2, [r3, #0]
 800773e:	210c      	movs	r1, #12
 8007740:	187b      	adds	r3, r7, r1
 8007742:	701a      	strb	r2, [r3, #0]
 8007744:	193b      	adds	r3, r7, r4
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	3303      	adds	r3, #3
 800774a:	781a      	ldrb	r2, [r3, #0]
 800774c:	187b      	adds	r3, r7, r1
 800774e:	705a      	strb	r2, [r3, #1]
 8007750:	187b      	adds	r3, r7, r1
 8007752:	2200      	movs	r2, #0
 8007754:	709a      	strb	r2, [r3, #2]
 8007756:	187b      	adds	r3, r7, r1
 8007758:	220a      	movs	r2, #10
 800775a:	2100      	movs	r1, #0
 800775c:	0018      	movs	r0, r3
 800775e:	f007 f845 	bl	800e7ec <strtol>
 8007762:	0003      	movs	r3, r0
 8007764:	65bb      	str	r3, [r7, #88]	@ 0x58
                    s = strtol((char[]) {field[4], field[5], '\0'}, NULL, 10);
 8007766:	193b      	adds	r3, r7, r4
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	3304      	adds	r3, #4
 800776c:	781a      	ldrb	r2, [r3, #0]
 800776e:	2108      	movs	r1, #8
 8007770:	187b      	adds	r3, r7, r1
 8007772:	701a      	strb	r2, [r3, #0]
 8007774:	193b      	adds	r3, r7, r4
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	3305      	adds	r3, #5
 800777a:	781a      	ldrb	r2, [r3, #0]
 800777c:	187b      	adds	r3, r7, r1
 800777e:	705a      	strb	r2, [r3, #1]
 8007780:	187b      	adds	r3, r7, r1
 8007782:	2200      	movs	r2, #0
 8007784:	709a      	strb	r2, [r3, #2]
 8007786:	187b      	adds	r3, r7, r1
 8007788:	220a      	movs	r2, #10
 800778a:	2100      	movs	r1, #0
 800778c:	0018      	movs	r0, r3
 800778e:	f007 f82d 	bl	800e7ec <strtol>
 8007792:	0003      	movs	r3, r0
 8007794:	657b      	str	r3, [r7, #84]	@ 0x54
                    field += 6;
 8007796:	193b      	adds	r3, r7, r4
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	3306      	adds	r3, #6
 800779c:	193a      	adds	r2, r7, r4
 800779e:	6013      	str	r3, [r2, #0]

                    // Extra: fractional time. Saved as microseconds.
                    if (*field++ == '.') {
 80077a0:	193b      	adds	r3, r7, r4
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	1c5a      	adds	r2, r3, #1
 80077a6:	1939      	adds	r1, r7, r4
 80077a8:	600a      	str	r2, [r1, #0]
 80077aa:	781b      	ldrb	r3, [r3, #0]
 80077ac:	2b2e      	cmp	r3, #46	@ 0x2e
 80077ae:	d12f      	bne.n	8007810 <minmea_scan+0x664>
                        int value = 0;
 80077b0:	2300      	movs	r3, #0
 80077b2:	64bb      	str	r3, [r7, #72]	@ 0x48
                        int scale = 1000000;
 80077b4:	4b44      	ldr	r3, [pc, #272]	@ (80078c8 <minmea_scan+0x71c>)
 80077b6:	647b      	str	r3, [r7, #68]	@ 0x44
                        while (isdigit((unsigned char) *field) && scale > 1) {
 80077b8:	e016      	b.n	80077e8 <minmea_scan+0x63c>
                            value = (value * 10) + (*field++ - '0');
 80077ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80077bc:	0013      	movs	r3, r2
 80077be:	009b      	lsls	r3, r3, #2
 80077c0:	189b      	adds	r3, r3, r2
 80077c2:	005b      	lsls	r3, r3, #1
 80077c4:	0019      	movs	r1, r3
 80077c6:	2090      	movs	r0, #144	@ 0x90
 80077c8:	183b      	adds	r3, r7, r0
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	1c5a      	adds	r2, r3, #1
 80077ce:	1838      	adds	r0, r7, r0
 80077d0:	6002      	str	r2, [r0, #0]
 80077d2:	781b      	ldrb	r3, [r3, #0]
 80077d4:	3b30      	subs	r3, #48	@ 0x30
 80077d6:	18cb      	adds	r3, r1, r3
 80077d8:	64bb      	str	r3, [r7, #72]	@ 0x48
                            scale /= 10;
 80077da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80077dc:	210a      	movs	r1, #10
 80077de:	0018      	movs	r0, r3
 80077e0:	f7f8 fd42 	bl	8000268 <__divsi3>
 80077e4:	0003      	movs	r3, r0
 80077e6:	647b      	str	r3, [r7, #68]	@ 0x44
                        while (isdigit((unsigned char) *field) && scale > 1) {
 80077e8:	2390      	movs	r3, #144	@ 0x90
 80077ea:	18fb      	adds	r3, r7, r3
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	781b      	ldrb	r3, [r3, #0]
 80077f0:	1c5a      	adds	r2, r3, #1
 80077f2:	4b34      	ldr	r3, [pc, #208]	@ (80078c4 <minmea_scan+0x718>)
 80077f4:	18d3      	adds	r3, r2, r3
 80077f6:	781b      	ldrb	r3, [r3, #0]
 80077f8:	001a      	movs	r2, r3
 80077fa:	2304      	movs	r3, #4
 80077fc:	4013      	ands	r3, r2
 80077fe:	d002      	beq.n	8007806 <minmea_scan+0x65a>
 8007800:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007802:	2b01      	cmp	r3, #1
 8007804:	dcd9      	bgt.n	80077ba <minmea_scan+0x60e>
                        }
                        u = value * scale;
 8007806:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007808:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800780a:	4353      	muls	r3, r2
 800780c:	653b      	str	r3, [r7, #80]	@ 0x50
 800780e:	e001      	b.n	8007814 <minmea_scan+0x668>
                    } else {
                        u = 0;
 8007810:	2300      	movs	r3, #0
 8007812:	653b      	str	r3, [r7, #80]	@ 0x50
                    }
                }

                time->hours = h;
 8007814:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007816:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007818:	601a      	str	r2, [r3, #0]
                time->minutes = i;
 800781a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800781c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800781e:	605a      	str	r2, [r3, #4]
                time->seconds = s;
 8007820:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007822:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007824:	609a      	str	r2, [r3, #8]
                time->microseconds = u;
 8007826:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007828:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800782a:	60da      	str	r2, [r3, #12]
            } break;
 800782c:	e000      	b.n	8007830 <minmea_scan+0x684>

            case '_': { // Ignore the field.
            } break;
 800782e:	46c0      	nop			@ (mov r8, r8)
            default: { // Unknown.
                goto parse_error;
            } break;
        }

        next_field();
 8007830:	e002      	b.n	8007838 <minmea_scan+0x68c>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	3301      	adds	r3, #1
 8007836:	607b      	str	r3, [r7, #4]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	781b      	ldrb	r3, [r3, #0]
 800783c:	0018      	movs	r0, r3
 800783e:	f7ff fc8f 	bl	8007160 <minmea_isfield>
 8007842:	1e03      	subs	r3, r0, #0
 8007844:	d1f5      	bne.n	8007832 <minmea_scan+0x686>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	781b      	ldrb	r3, [r3, #0]
 800784a:	2b2c      	cmp	r3, #44	@ 0x2c
 800784c:	d107      	bne.n	800785e <minmea_scan+0x6b2>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	3301      	adds	r3, #1
 8007852:	607b      	str	r3, [r7, #4]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2290      	movs	r2, #144	@ 0x90
 8007858:	18ba      	adds	r2, r7, r2
 800785a:	6013      	str	r3, [r2, #0]
 800785c:	e003      	b.n	8007866 <minmea_scan+0x6ba>
 800785e:	2300      	movs	r3, #0
 8007860:	2290      	movs	r2, #144	@ 0x90
 8007862:	18ba      	adds	r2, r7, r2
 8007864:	6013      	str	r3, [r2, #0]
    while (*format) {
 8007866:	23a4      	movs	r3, #164	@ 0xa4
 8007868:	2208      	movs	r2, #8
 800786a:	189b      	adds	r3, r3, r2
 800786c:	19db      	adds	r3, r3, r7
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	781b      	ldrb	r3, [r3, #0]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d000      	beq.n	8007878 <minmea_scan+0x6cc>
 8007876:	e4b0      	b.n	80071da <minmea_scan+0x2e>
    }

    result = true;
 8007878:	2397      	movs	r3, #151	@ 0x97
 800787a:	18fb      	adds	r3, r7, r3
 800787c:	2201      	movs	r2, #1
 800787e:	701a      	strb	r2, [r3, #0]
 8007880:	e016      	b.n	80078b0 <minmea_scan+0x704>
            goto parse_error;
 8007882:	46c0      	nop			@ (mov r8, r8)
 8007884:	e014      	b.n	80078b0 <minmea_scan+0x704>
                goto parse_error;
 8007886:	46c0      	nop			@ (mov r8, r8)
 8007888:	e012      	b.n	80078b0 <minmea_scan+0x704>
                            goto parse_error;
 800788a:	46c0      	nop			@ (mov r8, r8)
 800788c:	e010      	b.n	80078b0 <minmea_scan+0x704>
                                    goto parse_error;
 800788e:	46c0      	nop			@ (mov r8, r8)
 8007890:	e00e      	b.n	80078b0 <minmea_scan+0x704>
                            goto parse_error;
 8007892:	46c0      	nop			@ (mov r8, r8)
 8007894:	e00c      	b.n	80078b0 <minmea_scan+0x704>
                    goto parse_error;
 8007896:	46c0      	nop			@ (mov r8, r8)
 8007898:	e00a      	b.n	80078b0 <minmea_scan+0x704>
                        goto parse_error;
 800789a:	46c0      	nop			@ (mov r8, r8)
 800789c:	e008      	b.n	80078b0 <minmea_scan+0x704>
                    goto parse_error;
 800789e:	46c0      	nop			@ (mov r8, r8)
 80078a0:	e006      	b.n	80078b0 <minmea_scan+0x704>
                    goto parse_error;
 80078a2:	46c0      	nop			@ (mov r8, r8)
 80078a4:	e004      	b.n	80078b0 <minmea_scan+0x704>
                        goto parse_error;
 80078a6:	46c0      	nop			@ (mov r8, r8)
 80078a8:	e002      	b.n	80078b0 <minmea_scan+0x704>
                            goto parse_error;
 80078aa:	46c0      	nop			@ (mov r8, r8)
 80078ac:	e000      	b.n	80078b0 <minmea_scan+0x704>
                            goto parse_error;
 80078ae:	46c0      	nop			@ (mov r8, r8)

parse_error:
    va_end(ap);
    return result;
 80078b0:	2397      	movs	r3, #151	@ 0x97
 80078b2:	18fb      	adds	r3, r7, r3
 80078b4:	781b      	ldrb	r3, [r3, #0]
}
 80078b6:	0018      	movs	r0, r3
 80078b8:	46bd      	mov	sp, r7
 80078ba:	b027      	add	sp, #156	@ 0x9c
 80078bc:	bcb0      	pop	{r4, r5, r7}
 80078be:	bc08      	pop	{r3}
 80078c0:	b003      	add	sp, #12
 80078c2:	4718      	bx	r3
 80078c4:	0801bf58 	.word	0x0801bf58
 80078c8:	000f4240 	.word	0x000f4240

080078cc <minmea_parse_gga>:

    return true;
}

bool minmea_parse_gga(struct minmea_sentence_gga *frame, const char *sentence)
{
 80078cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078ce:	46de      	mov	lr, fp
 80078d0:	4657      	mov	r7, sl
 80078d2:	464e      	mov	r6, r9
 80078d4:	4645      	mov	r5, r8
 80078d6:	b5e0      	push	{r5, r6, r7, lr}
 80078d8:	b097      	sub	sp, #92	@ 0x5c
 80078da:	af0c      	add	r7, sp, #48	@ 0x30
 80078dc:	6178      	str	r0, [r7, #20]
 80078de:	6139      	str	r1, [r7, #16]
    // $GPGGA,123519,4807.038,N,01131.000,E,1,08,0.9,545.4,M,46.9,M,,*47
    char type[6];
    int latitude_direction;
    int longitude_direction;

    if (!minmea_scan(sentence, "tTfdfdiiffcfci_",
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	60fb      	str	r3, [r7, #12]
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	001a      	movs	r2, r3
 80078e8:	3210      	adds	r2, #16
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	0019      	movs	r1, r3
 80078ee:	3118      	adds	r1, #24
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	001c      	movs	r4, r3
 80078f4:	3420      	adds	r4, #32
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	001d      	movs	r5, r3
 80078fa:	3524      	adds	r5, #36	@ 0x24
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	001e      	movs	r6, r3
 8007900:	3628      	adds	r6, #40	@ 0x28
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	2030      	movs	r0, #48	@ 0x30
 8007906:	4684      	mov	ip, r0
 8007908:	449c      	add	ip, r3
 800790a:	4663      	mov	r3, ip
 800790c:	607b      	str	r3, [r7, #4]
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	2038      	movs	r0, #56	@ 0x38
 8007912:	4680      	mov	r8, r0
 8007914:	4498      	add	r8, r3
 8007916:	4643      	mov	r3, r8
 8007918:	603b      	str	r3, [r7, #0]
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	203c      	movs	r0, #60	@ 0x3c
 800791e:	4681      	mov	r9, r0
 8007920:	4499      	add	r9, r3
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	2044      	movs	r0, #68	@ 0x44
 8007926:	4682      	mov	sl, r0
 8007928:	449a      	add	sl, r3
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	3348      	adds	r3, #72	@ 0x48
 800792e:	2010      	movs	r0, #16
 8007930:	4683      	mov	fp, r0
 8007932:	2008      	movs	r0, #8
 8007934:	4684      	mov	ip, r0
 8007936:	2008      	movs	r0, #8
 8007938:	4680      	mov	r8, r0
 800793a:	44b8      	add	r8, r7
 800793c:	44c4      	add	ip, r8
 800793e:	44e3      	add	fp, ip
 8007940:	4658      	mov	r0, fp
 8007942:	60b8      	str	r0, [r7, #8]
 8007944:	482a      	ldr	r0, [pc, #168]	@ (80079f0 <minmea_parse_gga+0x124>)
 8007946:	4683      	mov	fp, r0
 8007948:	6938      	ldr	r0, [r7, #16]
 800794a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800794c:	4653      	mov	r3, sl
 800794e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007950:	464b      	mov	r3, r9
 8007952:	9309      	str	r3, [sp, #36]	@ 0x24
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	9308      	str	r3, [sp, #32]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	9307      	str	r3, [sp, #28]
 800795c:	9606      	str	r6, [sp, #24]
 800795e:	9505      	str	r5, [sp, #20]
 8007960:	9404      	str	r4, [sp, #16]
 8007962:	2408      	movs	r4, #8
 8007964:	2508      	movs	r5, #8
 8007966:	1963      	adds	r3, r4, r5
 8007968:	2408      	movs	r4, #8
 800796a:	46a4      	mov	ip, r4
 800796c:	44bc      	add	ip, r7
 800796e:	4463      	add	r3, ip
 8007970:	9303      	str	r3, [sp, #12]
 8007972:	9102      	str	r1, [sp, #8]
 8007974:	210c      	movs	r1, #12
 8007976:	194b      	adds	r3, r1, r5
 8007978:	2108      	movs	r1, #8
 800797a:	468c      	mov	ip, r1
 800797c:	44bc      	add	ip, r7
 800797e:	4463      	add	r3, ip
 8007980:	9301      	str	r3, [sp, #4]
 8007982:	9200      	str	r2, [sp, #0]
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	68ba      	ldr	r2, [r7, #8]
 8007988:	4659      	mov	r1, fp
 800798a:	f7ff fc0f 	bl	80071ac <minmea_scan>
 800798e:	0003      	movs	r3, r0
 8007990:	001a      	movs	r2, r3
 8007992:	2301      	movs	r3, #1
 8007994:	4053      	eors	r3, r2
 8007996:	b2db      	uxtb	r3, r3
 8007998:	2b00      	cmp	r3, #0
 800799a:	d001      	beq.n	80079a0 <minmea_parse_gga+0xd4>
            &frame->satellites_tracked,
            &frame->hdop,
            &frame->altitude, &frame->altitude_units,
            &frame->height, &frame->height_units,
            &frame->dgps_age))
        return false;
 800799c:	2300      	movs	r3, #0
 800799e:	e01d      	b.n	80079dc <minmea_parse_gga+0x110>
    if (strcmp(type+2, "GGA"))
 80079a0:	2310      	movs	r3, #16
 80079a2:	2208      	movs	r2, #8
 80079a4:	189b      	adds	r3, r3, r2
 80079a6:	2208      	movs	r2, #8
 80079a8:	4694      	mov	ip, r2
 80079aa:	44bc      	add	ip, r7
 80079ac:	4463      	add	r3, ip
 80079ae:	3302      	adds	r3, #2
 80079b0:	4a10      	ldr	r2, [pc, #64]	@ (80079f4 <minmea_parse_gga+0x128>)
 80079b2:	0011      	movs	r1, r2
 80079b4:	0018      	movs	r0, r3
 80079b6:	f7f8 fba7 	bl	8000108 <strcmp>
 80079ba:	1e03      	subs	r3, r0, #0
 80079bc:	d001      	beq.n	80079c2 <minmea_parse_gga+0xf6>
        return false;
 80079be:	2300      	movs	r3, #0
 80079c0:	e00c      	b.n	80079dc <minmea_parse_gga+0x110>

    frame->latitude.value *= latitude_direction;
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	691b      	ldr	r3, [r3, #16]
 80079c6:	69fa      	ldr	r2, [r7, #28]
 80079c8:	435a      	muls	r2, r3
 80079ca:	697b      	ldr	r3, [r7, #20]
 80079cc:	611a      	str	r2, [r3, #16]
    frame->longitude.value *= longitude_direction;
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	699b      	ldr	r3, [r3, #24]
 80079d2:	69ba      	ldr	r2, [r7, #24]
 80079d4:	435a      	muls	r2, r3
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	619a      	str	r2, [r3, #24]

    return true;
 80079da:	2301      	movs	r3, #1
}
 80079dc:	0018      	movs	r0, r3
 80079de:	46bd      	mov	sp, r7
 80079e0:	b00b      	add	sp, #44	@ 0x2c
 80079e2:	bcf0      	pop	{r4, r5, r6, r7}
 80079e4:	46bb      	mov	fp, r7
 80079e6:	46b2      	mov	sl, r6
 80079e8:	46a9      	mov	r9, r5
 80079ea:	46a0      	mov	r8, r4
 80079ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079ee:	46c0      	nop			@ (mov r8, r8)
 80079f0:	08011504 	.word	0x08011504
 80079f4:	080114e4 	.word	0x080114e4

080079f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b082      	sub	sp, #8
 80079fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80079fe:	4b11      	ldr	r3, [pc, #68]	@ (8007a44 <HAL_MspInit+0x4c>)
 8007a00:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007a02:	4b10      	ldr	r3, [pc, #64]	@ (8007a44 <HAL_MspInit+0x4c>)
 8007a04:	2101      	movs	r1, #1
 8007a06:	430a      	orrs	r2, r1
 8007a08:	641a      	str	r2, [r3, #64]	@ 0x40
 8007a0a:	4b0e      	ldr	r3, [pc, #56]	@ (8007a44 <HAL_MspInit+0x4c>)
 8007a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a0e:	2201      	movs	r2, #1
 8007a10:	4013      	ands	r3, r2
 8007a12:	607b      	str	r3, [r7, #4]
 8007a14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007a16:	4b0b      	ldr	r3, [pc, #44]	@ (8007a44 <HAL_MspInit+0x4c>)
 8007a18:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007a1a:	4b0a      	ldr	r3, [pc, #40]	@ (8007a44 <HAL_MspInit+0x4c>)
 8007a1c:	2180      	movs	r1, #128	@ 0x80
 8007a1e:	0549      	lsls	r1, r1, #21
 8007a20:	430a      	orrs	r2, r1
 8007a22:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007a24:	4b07      	ldr	r3, [pc, #28]	@ (8007a44 <HAL_MspInit+0x4c>)
 8007a26:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007a28:	2380      	movs	r3, #128	@ 0x80
 8007a2a:	055b      	lsls	r3, r3, #21
 8007a2c:	4013      	ands	r3, r2
 8007a2e:	603b      	str	r3, [r7, #0]
 8007a30:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8007a32:	23c0      	movs	r3, #192	@ 0xc0
 8007a34:	00db      	lsls	r3, r3, #3
 8007a36:	0018      	movs	r0, r3
 8007a38:	f001 f930 	bl	8008c9c <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007a3c:	46c0      	nop			@ (mov r8, r8)
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	b002      	add	sp, #8
 8007a42:	bd80      	pop	{r7, pc}
 8007a44:	40021000 	.word	0x40021000

08007a48 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007a48:	b590      	push	{r4, r7, lr}
 8007a4a:	b09d      	sub	sp, #116	@ 0x74
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a50:	235c      	movs	r3, #92	@ 0x5c
 8007a52:	18fb      	adds	r3, r7, r3
 8007a54:	0018      	movs	r0, r3
 8007a56:	2314      	movs	r3, #20
 8007a58:	001a      	movs	r2, r3
 8007a5a:	2100      	movs	r1, #0
 8007a5c:	f007 f8b2 	bl	800ebc4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007a60:	2410      	movs	r4, #16
 8007a62:	193b      	adds	r3, r7, r4
 8007a64:	0018      	movs	r0, r3
 8007a66:	234c      	movs	r3, #76	@ 0x4c
 8007a68:	001a      	movs	r2, r3
 8007a6a:	2100      	movs	r1, #0
 8007a6c:	f007 f8aa 	bl	800ebc4 <memset>
  if(hi2c->Instance==I2C1)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4a23      	ldr	r2, [pc, #140]	@ (8007b04 <HAL_I2C_MspInit+0xbc>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d13f      	bne.n	8007afa <HAL_I2C_MspInit+0xb2>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8007a7a:	193b      	adds	r3, r7, r4
 8007a7c:	2220      	movs	r2, #32
 8007a7e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8007a80:	193b      	adds	r3, r7, r4
 8007a82:	2200      	movs	r2, #0
 8007a84:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007a86:	193b      	adds	r3, r7, r4
 8007a88:	0018      	movs	r0, r3
 8007a8a:	f003 f921 	bl	800acd0 <HAL_RCCEx_PeriphCLKConfig>
 8007a8e:	1e03      	subs	r3, r0, #0
 8007a90:	d001      	beq.n	8007a96 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8007a92:	f7ff fb5f 	bl	8007154 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007a96:	4b1c      	ldr	r3, [pc, #112]	@ (8007b08 <HAL_I2C_MspInit+0xc0>)
 8007a98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007a9a:	4b1b      	ldr	r3, [pc, #108]	@ (8007b08 <HAL_I2C_MspInit+0xc0>)
 8007a9c:	2101      	movs	r1, #1
 8007a9e:	430a      	orrs	r2, r1
 8007aa0:	635a      	str	r2, [r3, #52]	@ 0x34
 8007aa2:	4b19      	ldr	r3, [pc, #100]	@ (8007b08 <HAL_I2C_MspInit+0xc0>)
 8007aa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	4013      	ands	r3, r2
 8007aaa:	60fb      	str	r3, [r7, #12]
 8007aac:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8007aae:	215c      	movs	r1, #92	@ 0x5c
 8007ab0:	187b      	adds	r3, r7, r1
 8007ab2:	22c0      	movs	r2, #192	@ 0xc0
 8007ab4:	00d2      	lsls	r2, r2, #3
 8007ab6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007ab8:	187b      	adds	r3, r7, r1
 8007aba:	2212      	movs	r2, #18
 8007abc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007abe:	187b      	adds	r3, r7, r1
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007ac4:	187b      	adds	r3, r7, r1
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8007aca:	187b      	adds	r3, r7, r1
 8007acc:	2206      	movs	r2, #6
 8007ace:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007ad0:	187a      	adds	r2, r7, r1
 8007ad2:	23a0      	movs	r3, #160	@ 0xa0
 8007ad4:	05db      	lsls	r3, r3, #23
 8007ad6:	0011      	movs	r1, r2
 8007ad8:	0018      	movs	r0, r3
 8007ada:	f001 fb85 	bl	80091e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007ade:	4b0a      	ldr	r3, [pc, #40]	@ (8007b08 <HAL_I2C_MspInit+0xc0>)
 8007ae0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007ae2:	4b09      	ldr	r3, [pc, #36]	@ (8007b08 <HAL_I2C_MspInit+0xc0>)
 8007ae4:	2180      	movs	r1, #128	@ 0x80
 8007ae6:	0389      	lsls	r1, r1, #14
 8007ae8:	430a      	orrs	r2, r1
 8007aea:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007aec:	4b06      	ldr	r3, [pc, #24]	@ (8007b08 <HAL_I2C_MspInit+0xc0>)
 8007aee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007af0:	2380      	movs	r3, #128	@ 0x80
 8007af2:	039b      	lsls	r3, r3, #14
 8007af4:	4013      	ands	r3, r2
 8007af6:	60bb      	str	r3, [r7, #8]
 8007af8:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8007afa:	46c0      	nop			@ (mov r8, r8)
 8007afc:	46bd      	mov	sp, r7
 8007afe:	b01d      	add	sp, #116	@ 0x74
 8007b00:	bd90      	pop	{r4, r7, pc}
 8007b02:	46c0      	nop			@ (mov r8, r8)
 8007b04:	40005400 	.word	0x40005400
 8007b08:	40021000 	.word	0x40021000

08007b0c <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8007b0c:	b590      	push	{r4, r7, lr}
 8007b0e:	b097      	sub	sp, #92	@ 0x5c
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007b14:	240c      	movs	r4, #12
 8007b16:	193b      	adds	r3, r7, r4
 8007b18:	0018      	movs	r0, r3
 8007b1a:	234c      	movs	r3, #76	@ 0x4c
 8007b1c:	001a      	movs	r2, r3
 8007b1e:	2100      	movs	r1, #0
 8007b20:	f007 f850 	bl	800ebc4 <memset>
  if(hrtc->Instance==RTC)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4a15      	ldr	r2, [pc, #84]	@ (8007b80 <HAL_RTC_MspInit+0x74>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d124      	bne.n	8007b78 <HAL_RTC_MspInit+0x6c>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8007b2e:	193b      	adds	r3, r7, r4
 8007b30:	2280      	movs	r2, #128	@ 0x80
 8007b32:	0292      	lsls	r2, r2, #10
 8007b34:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8007b36:	193b      	adds	r3, r7, r4
 8007b38:	2280      	movs	r2, #128	@ 0x80
 8007b3a:	0092      	lsls	r2, r2, #2
 8007b3c:	641a      	str	r2, [r3, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007b3e:	193b      	adds	r3, r7, r4
 8007b40:	0018      	movs	r0, r3
 8007b42:	f003 f8c5 	bl	800acd0 <HAL_RCCEx_PeriphCLKConfig>
 8007b46:	1e03      	subs	r3, r0, #0
 8007b48:	d001      	beq.n	8007b4e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8007b4a:	f7ff fb03 	bl	8007154 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8007b4e:	4b0d      	ldr	r3, [pc, #52]	@ (8007b84 <HAL_RTC_MspInit+0x78>)
 8007b50:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007b52:	4b0c      	ldr	r3, [pc, #48]	@ (8007b84 <HAL_RTC_MspInit+0x78>)
 8007b54:	2180      	movs	r1, #128	@ 0x80
 8007b56:	0209      	lsls	r1, r1, #8
 8007b58:	430a      	orrs	r2, r1
 8007b5a:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8007b5c:	4b09      	ldr	r3, [pc, #36]	@ (8007b84 <HAL_RTC_MspInit+0x78>)
 8007b5e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007b60:	4b08      	ldr	r3, [pc, #32]	@ (8007b84 <HAL_RTC_MspInit+0x78>)
 8007b62:	2180      	movs	r1, #128	@ 0x80
 8007b64:	00c9      	lsls	r1, r1, #3
 8007b66:	430a      	orrs	r2, r1
 8007b68:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007b6a:	4b06      	ldr	r3, [pc, #24]	@ (8007b84 <HAL_RTC_MspInit+0x78>)
 8007b6c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007b6e:	2380      	movs	r3, #128	@ 0x80
 8007b70:	00db      	lsls	r3, r3, #3
 8007b72:	4013      	ands	r3, r2
 8007b74:	60bb      	str	r3, [r7, #8]
 8007b76:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8007b78:	46c0      	nop			@ (mov r8, r8)
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	b017      	add	sp, #92	@ 0x5c
 8007b7e:	bd90      	pop	{r4, r7, pc}
 8007b80:	40002800 	.word	0x40002800
 8007b84:	40021000 	.word	0x40021000

08007b88 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007b88:	b590      	push	{r4, r7, lr}
 8007b8a:	b08b      	sub	sp, #44	@ 0x2c
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b90:	2414      	movs	r4, #20
 8007b92:	193b      	adds	r3, r7, r4
 8007b94:	0018      	movs	r0, r3
 8007b96:	2314      	movs	r3, #20
 8007b98:	001a      	movs	r2, r3
 8007b9a:	2100      	movs	r1, #0
 8007b9c:	f007 f812 	bl	800ebc4 <memset>
  if(hspi->Instance==SPI1)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a2c      	ldr	r2, [pc, #176]	@ (8007c58 <HAL_SPI_MspInit+0xd0>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d151      	bne.n	8007c4e <HAL_SPI_MspInit+0xc6>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007baa:	4b2c      	ldr	r3, [pc, #176]	@ (8007c5c <HAL_SPI_MspInit+0xd4>)
 8007bac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007bae:	4b2b      	ldr	r3, [pc, #172]	@ (8007c5c <HAL_SPI_MspInit+0xd4>)
 8007bb0:	2180      	movs	r1, #128	@ 0x80
 8007bb2:	0149      	lsls	r1, r1, #5
 8007bb4:	430a      	orrs	r2, r1
 8007bb6:	641a      	str	r2, [r3, #64]	@ 0x40
 8007bb8:	4b28      	ldr	r3, [pc, #160]	@ (8007c5c <HAL_SPI_MspInit+0xd4>)
 8007bba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007bbc:	2380      	movs	r3, #128	@ 0x80
 8007bbe:	015b      	lsls	r3, r3, #5
 8007bc0:	4013      	ands	r3, r2
 8007bc2:	613b      	str	r3, [r7, #16]
 8007bc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007bc6:	4b25      	ldr	r3, [pc, #148]	@ (8007c5c <HAL_SPI_MspInit+0xd4>)
 8007bc8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007bca:	4b24      	ldr	r3, [pc, #144]	@ (8007c5c <HAL_SPI_MspInit+0xd4>)
 8007bcc:	2101      	movs	r1, #1
 8007bce:	430a      	orrs	r2, r1
 8007bd0:	635a      	str	r2, [r3, #52]	@ 0x34
 8007bd2:	4b22      	ldr	r3, [pc, #136]	@ (8007c5c <HAL_SPI_MspInit+0xd4>)
 8007bd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	4013      	ands	r3, r2
 8007bda:	60fb      	str	r3, [r7, #12]
 8007bdc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007bde:	4b1f      	ldr	r3, [pc, #124]	@ (8007c5c <HAL_SPI_MspInit+0xd4>)
 8007be0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007be2:	4b1e      	ldr	r3, [pc, #120]	@ (8007c5c <HAL_SPI_MspInit+0xd4>)
 8007be4:	2108      	movs	r1, #8
 8007be6:	430a      	orrs	r2, r1
 8007be8:	635a      	str	r2, [r3, #52]	@ 0x34
 8007bea:	4b1c      	ldr	r3, [pc, #112]	@ (8007c5c <HAL_SPI_MspInit+0xd4>)
 8007bec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007bee:	2208      	movs	r2, #8
 8007bf0:	4013      	ands	r3, r2
 8007bf2:	60bb      	str	r3, [r7, #8]
 8007bf4:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PD5     ------> SPI1_MISO
    PD6     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8007bf6:	193b      	adds	r3, r7, r4
 8007bf8:	2202      	movs	r2, #2
 8007bfa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007bfc:	193b      	adds	r3, r7, r4
 8007bfe:	2202      	movs	r2, #2
 8007c00:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c02:	193b      	adds	r3, r7, r4
 8007c04:	2200      	movs	r2, #0
 8007c06:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007c08:	193b      	adds	r3, r7, r4
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8007c0e:	193b      	adds	r3, r7, r4
 8007c10:	2200      	movs	r2, #0
 8007c12:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007c14:	193a      	adds	r2, r7, r4
 8007c16:	23a0      	movs	r3, #160	@ 0xa0
 8007c18:	05db      	lsls	r3, r3, #23
 8007c1a:	0011      	movs	r1, r2
 8007c1c:	0018      	movs	r0, r3
 8007c1e:	f001 fae3 	bl	80091e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8007c22:	0021      	movs	r1, r4
 8007c24:	187b      	adds	r3, r7, r1
 8007c26:	2260      	movs	r2, #96	@ 0x60
 8007c28:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c2a:	187b      	adds	r3, r7, r1
 8007c2c:	2202      	movs	r2, #2
 8007c2e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c30:	187b      	adds	r3, r7, r1
 8007c32:	2200      	movs	r2, #0
 8007c34:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007c36:	187b      	adds	r3, r7, r1
 8007c38:	2200      	movs	r2, #0
 8007c3a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI1;
 8007c3c:	187b      	adds	r3, r7, r1
 8007c3e:	2201      	movs	r2, #1
 8007c40:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007c42:	187b      	adds	r3, r7, r1
 8007c44:	4a06      	ldr	r2, [pc, #24]	@ (8007c60 <HAL_SPI_MspInit+0xd8>)
 8007c46:	0019      	movs	r1, r3
 8007c48:	0010      	movs	r0, r2
 8007c4a:	f001 facd 	bl	80091e8 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8007c4e:	46c0      	nop			@ (mov r8, r8)
 8007c50:	46bd      	mov	sp, r7
 8007c52:	b00b      	add	sp, #44	@ 0x2c
 8007c54:	bd90      	pop	{r4, r7, pc}
 8007c56:	46c0      	nop			@ (mov r8, r8)
 8007c58:	40013000 	.word	0x40013000
 8007c5c:	40021000 	.word	0x40021000
 8007c60:	50000c00 	.word	0x50000c00

08007c64 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b084      	sub	sp, #16
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	4a0a      	ldr	r2, [pc, #40]	@ (8007c9c <HAL_TIM_Base_MspInit+0x38>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d10d      	bne.n	8007c92 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM17_MspInit 0 */

    /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8007c76:	4b0a      	ldr	r3, [pc, #40]	@ (8007ca0 <HAL_TIM_Base_MspInit+0x3c>)
 8007c78:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007c7a:	4b09      	ldr	r3, [pc, #36]	@ (8007ca0 <HAL_TIM_Base_MspInit+0x3c>)
 8007c7c:	2180      	movs	r1, #128	@ 0x80
 8007c7e:	02c9      	lsls	r1, r1, #11
 8007c80:	430a      	orrs	r2, r1
 8007c82:	641a      	str	r2, [r3, #64]	@ 0x40
 8007c84:	4b06      	ldr	r3, [pc, #24]	@ (8007ca0 <HAL_TIM_Base_MspInit+0x3c>)
 8007c86:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007c88:	2380      	movs	r3, #128	@ 0x80
 8007c8a:	02db      	lsls	r3, r3, #11
 8007c8c:	4013      	ands	r3, r2
 8007c8e:	60fb      	str	r3, [r7, #12]
 8007c90:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM17_MspInit 1 */

  }

}
 8007c92:	46c0      	nop			@ (mov r8, r8)
 8007c94:	46bd      	mov	sp, r7
 8007c96:	b004      	add	sp, #16
 8007c98:	bd80      	pop	{r7, pc}
 8007c9a:	46c0      	nop			@ (mov r8, r8)
 8007c9c:	40014800 	.word	0x40014800
 8007ca0:	40021000 	.word	0x40021000

08007ca4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8007ca4:	b590      	push	{r4, r7, lr}
 8007ca6:	b089      	sub	sp, #36	@ 0x24
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007cac:	240c      	movs	r4, #12
 8007cae:	193b      	adds	r3, r7, r4
 8007cb0:	0018      	movs	r0, r3
 8007cb2:	2314      	movs	r3, #20
 8007cb4:	001a      	movs	r2, r3
 8007cb6:	2100      	movs	r1, #0
 8007cb8:	f006 ff84 	bl	800ebc4 <memset>
  if(htim->Instance==TIM17)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a14      	ldr	r2, [pc, #80]	@ (8007d14 <HAL_TIM_MspPostInit+0x70>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d122      	bne.n	8007d0c <HAL_TIM_MspPostInit+0x68>
  {
    /* USER CODE BEGIN TIM17_MspPostInit 0 */

    /* USER CODE END TIM17_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007cc6:	4b14      	ldr	r3, [pc, #80]	@ (8007d18 <HAL_TIM_MspPostInit+0x74>)
 8007cc8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007cca:	4b13      	ldr	r3, [pc, #76]	@ (8007d18 <HAL_TIM_MspPostInit+0x74>)
 8007ccc:	2101      	movs	r1, #1
 8007cce:	430a      	orrs	r2, r1
 8007cd0:	635a      	str	r2, [r3, #52]	@ 0x34
 8007cd2:	4b11      	ldr	r3, [pc, #68]	@ (8007d18 <HAL_TIM_MspPostInit+0x74>)
 8007cd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	4013      	ands	r3, r2
 8007cda:	60bb      	str	r3, [r7, #8]
 8007cdc:	68bb      	ldr	r3, [r7, #8]
    /**TIM17 GPIO Configuration
    PA7     ------> TIM17_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8007cde:	0021      	movs	r1, r4
 8007ce0:	187b      	adds	r3, r7, r1
 8007ce2:	2280      	movs	r2, #128	@ 0x80
 8007ce4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ce6:	187b      	adds	r3, r7, r1
 8007ce8:	2202      	movs	r2, #2
 8007cea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cec:	187b      	adds	r3, r7, r1
 8007cee:	2200      	movs	r2, #0
 8007cf0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007cf2:	187b      	adds	r3, r7, r1
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM17;
 8007cf8:	187b      	adds	r3, r7, r1
 8007cfa:	2205      	movs	r2, #5
 8007cfc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007cfe:	187a      	adds	r2, r7, r1
 8007d00:	23a0      	movs	r3, #160	@ 0xa0
 8007d02:	05db      	lsls	r3, r3, #23
 8007d04:	0011      	movs	r1, r2
 8007d06:	0018      	movs	r0, r3
 8007d08:	f001 fa6e 	bl	80091e8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM17_MspPostInit 1 */

    /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8007d0c:	46c0      	nop			@ (mov r8, r8)
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	b009      	add	sp, #36	@ 0x24
 8007d12:	bd90      	pop	{r4, r7, pc}
 8007d14:	40014800 	.word	0x40014800
 8007d18:	40021000 	.word	0x40021000

08007d1c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007d1c:	b590      	push	{r4, r7, lr}
 8007d1e:	b09f      	sub	sp, #124	@ 0x7c
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d24:	2364      	movs	r3, #100	@ 0x64
 8007d26:	18fb      	adds	r3, r7, r3
 8007d28:	0018      	movs	r0, r3
 8007d2a:	2314      	movs	r3, #20
 8007d2c:	001a      	movs	r2, r3
 8007d2e:	2100      	movs	r1, #0
 8007d30:	f006 ff48 	bl	800ebc4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007d34:	2418      	movs	r4, #24
 8007d36:	193b      	adds	r3, r7, r4
 8007d38:	0018      	movs	r0, r3
 8007d3a:	234c      	movs	r3, #76	@ 0x4c
 8007d3c:	001a      	movs	r2, r3
 8007d3e:	2100      	movs	r1, #0
 8007d40:	f006 ff40 	bl	800ebc4 <memset>
  if(huart->Instance==USART1)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4a45      	ldr	r2, [pc, #276]	@ (8007e60 <HAL_UART_MspInit+0x144>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d13e      	bne.n	8007dcc <HAL_UART_MspInit+0xb0>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8007d4e:	193b      	adds	r3, r7, r4
 8007d50:	2201      	movs	r2, #1
 8007d52:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8007d54:	193b      	adds	r3, r7, r4
 8007d56:	2200      	movs	r2, #0
 8007d58:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007d5a:	193b      	adds	r3, r7, r4
 8007d5c:	0018      	movs	r0, r3
 8007d5e:	f002 ffb7 	bl	800acd0 <HAL_RCCEx_PeriphCLKConfig>
 8007d62:	1e03      	subs	r3, r0, #0
 8007d64:	d001      	beq.n	8007d6a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8007d66:	f7ff f9f5 	bl	8007154 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007d6a:	4b3e      	ldr	r3, [pc, #248]	@ (8007e64 <HAL_UART_MspInit+0x148>)
 8007d6c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007d6e:	4b3d      	ldr	r3, [pc, #244]	@ (8007e64 <HAL_UART_MspInit+0x148>)
 8007d70:	2180      	movs	r1, #128	@ 0x80
 8007d72:	01c9      	lsls	r1, r1, #7
 8007d74:	430a      	orrs	r2, r1
 8007d76:	641a      	str	r2, [r3, #64]	@ 0x40
 8007d78:	4b3a      	ldr	r3, [pc, #232]	@ (8007e64 <HAL_UART_MspInit+0x148>)
 8007d7a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007d7c:	2380      	movs	r3, #128	@ 0x80
 8007d7e:	01db      	lsls	r3, r3, #7
 8007d80:	4013      	ands	r3, r2
 8007d82:	617b      	str	r3, [r7, #20]
 8007d84:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007d86:	4b37      	ldr	r3, [pc, #220]	@ (8007e64 <HAL_UART_MspInit+0x148>)
 8007d88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007d8a:	4b36      	ldr	r3, [pc, #216]	@ (8007e64 <HAL_UART_MspInit+0x148>)
 8007d8c:	2104      	movs	r1, #4
 8007d8e:	430a      	orrs	r2, r1
 8007d90:	635a      	str	r2, [r3, #52]	@ 0x34
 8007d92:	4b34      	ldr	r3, [pc, #208]	@ (8007e64 <HAL_UART_MspInit+0x148>)
 8007d94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d96:	2204      	movs	r2, #4
 8007d98:	4013      	ands	r3, r2
 8007d9a:	613b      	str	r3, [r7, #16]
 8007d9c:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8007d9e:	2164      	movs	r1, #100	@ 0x64
 8007da0:	187b      	adds	r3, r7, r1
 8007da2:	2230      	movs	r2, #48	@ 0x30
 8007da4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007da6:	187b      	adds	r3, r7, r1
 8007da8:	2202      	movs	r2, #2
 8007daa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007dac:	187b      	adds	r3, r7, r1
 8007dae:	2200      	movs	r2, #0
 8007db0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007db2:	187b      	adds	r3, r7, r1
 8007db4:	2200      	movs	r2, #0
 8007db6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8007db8:	187b      	adds	r3, r7, r1
 8007dba:	2201      	movs	r2, #1
 8007dbc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007dbe:	187b      	adds	r3, r7, r1
 8007dc0:	4a29      	ldr	r2, [pc, #164]	@ (8007e68 <HAL_UART_MspInit+0x14c>)
 8007dc2:	0019      	movs	r1, r3
 8007dc4:	0010      	movs	r0, r2
 8007dc6:	f001 fa0f 	bl	80091e8 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8007dca:	e044      	b.n	8007e56 <HAL_UART_MspInit+0x13a>
  else if(huart->Instance==USART2)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4a26      	ldr	r2, [pc, #152]	@ (8007e6c <HAL_UART_MspInit+0x150>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d13f      	bne.n	8007e56 <HAL_UART_MspInit+0x13a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8007dd6:	2118      	movs	r1, #24
 8007dd8:	187b      	adds	r3, r7, r1
 8007dda:	2202      	movs	r2, #2
 8007ddc:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8007dde:	187b      	adds	r3, r7, r1
 8007de0:	2200      	movs	r2, #0
 8007de2:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007de4:	187b      	adds	r3, r7, r1
 8007de6:	0018      	movs	r0, r3
 8007de8:	f002 ff72 	bl	800acd0 <HAL_RCCEx_PeriphCLKConfig>
 8007dec:	1e03      	subs	r3, r0, #0
 8007dee:	d001      	beq.n	8007df4 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8007df0:	f7ff f9b0 	bl	8007154 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8007df4:	4b1b      	ldr	r3, [pc, #108]	@ (8007e64 <HAL_UART_MspInit+0x148>)
 8007df6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007df8:	4b1a      	ldr	r3, [pc, #104]	@ (8007e64 <HAL_UART_MspInit+0x148>)
 8007dfa:	2180      	movs	r1, #128	@ 0x80
 8007dfc:	0289      	lsls	r1, r1, #10
 8007dfe:	430a      	orrs	r2, r1
 8007e00:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007e02:	4b18      	ldr	r3, [pc, #96]	@ (8007e64 <HAL_UART_MspInit+0x148>)
 8007e04:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007e06:	2380      	movs	r3, #128	@ 0x80
 8007e08:	029b      	lsls	r3, r3, #10
 8007e0a:	4013      	ands	r3, r2
 8007e0c:	60fb      	str	r3, [r7, #12]
 8007e0e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007e10:	4b14      	ldr	r3, [pc, #80]	@ (8007e64 <HAL_UART_MspInit+0x148>)
 8007e12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007e14:	4b13      	ldr	r3, [pc, #76]	@ (8007e64 <HAL_UART_MspInit+0x148>)
 8007e16:	2101      	movs	r1, #1
 8007e18:	430a      	orrs	r2, r1
 8007e1a:	635a      	str	r2, [r3, #52]	@ 0x34
 8007e1c:	4b11      	ldr	r3, [pc, #68]	@ (8007e64 <HAL_UART_MspInit+0x148>)
 8007e1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e20:	2201      	movs	r2, #1
 8007e22:	4013      	ands	r3, r2
 8007e24:	60bb      	str	r3, [r7, #8]
 8007e26:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8007e28:	2164      	movs	r1, #100	@ 0x64
 8007e2a:	187b      	adds	r3, r7, r1
 8007e2c:	220c      	movs	r2, #12
 8007e2e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e30:	187b      	adds	r3, r7, r1
 8007e32:	2202      	movs	r2, #2
 8007e34:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e36:	187b      	adds	r3, r7, r1
 8007e38:	2200      	movs	r2, #0
 8007e3a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007e3c:	187b      	adds	r3, r7, r1
 8007e3e:	2200      	movs	r2, #0
 8007e40:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8007e42:	187b      	adds	r3, r7, r1
 8007e44:	2201      	movs	r2, #1
 8007e46:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e48:	187a      	adds	r2, r7, r1
 8007e4a:	23a0      	movs	r3, #160	@ 0xa0
 8007e4c:	05db      	lsls	r3, r3, #23
 8007e4e:	0011      	movs	r1, r2
 8007e50:	0018      	movs	r0, r3
 8007e52:	f001 f9c9 	bl	80091e8 <HAL_GPIO_Init>
}
 8007e56:	46c0      	nop			@ (mov r8, r8)
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	b01f      	add	sp, #124	@ 0x7c
 8007e5c:	bd90      	pop	{r4, r7, pc}
 8007e5e:	46c0      	nop			@ (mov r8, r8)
 8007e60:	40013800 	.word	0x40013800
 8007e64:	40021000 	.word	0x40021000
 8007e68:	50000800 	.word	0x50000800
 8007e6c:	40004400 	.word	0x40004400

08007e70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8007e74:	46c0      	nop			@ (mov r8, r8)
 8007e76:	e7fd      	b.n	8007e74 <NMI_Handler+0x4>

08007e78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	//drawString(0, 150, "ERROR", WHITE, BLACK, 10, 10);
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007e7c:	46c0      	nop			@ (mov r8, r8)
 8007e7e:	e7fd      	b.n	8007e7c <HardFault_Handler+0x4>

08007e80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8007e84:	46c0      	nop			@ (mov r8, r8)
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}

08007e8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007e8a:	b580      	push	{r7, lr}
 8007e8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007e8e:	46c0      	nop			@ (mov r8, r8)
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}

08007e94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007e98:	f000 fec0 	bl	8008c1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007e9c:	46c0      	nop			@ (mov r8, r8)
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}

08007ea2 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8007ea2:	b580      	push	{r7, lr}
 8007ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8007ea6:	2002      	movs	r0, #2
 8007ea8:	f001 fb44 	bl	8009534 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8007eac:	46c0      	nop			@ (mov r8, r8)
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}

08007eb2 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8007eb2:	b580      	push	{r7, lr}
 8007eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8007eb6:	2004      	movs	r0, #4
 8007eb8:	f001 fb3c 	bl	8009534 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8007ebc:	46c0      	nop			@ (mov r8, r8)
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}

08007ec2 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8007ec2:	b580      	push	{r7, lr}
 8007ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8007ec6:	2380      	movs	r3, #128	@ 0x80
 8007ec8:	011b      	lsls	r3, r3, #4
 8007eca:	0018      	movs	r0, r3
 8007ecc:	f001 fb32 	bl	8009534 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8007ed0:	46c0      	nop			@ (mov r8, r8)
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}

08007ed6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007ed6:	b580      	push	{r7, lr}
 8007ed8:	af00      	add	r7, sp, #0
  return 1;
 8007eda:	2301      	movs	r3, #1
}
 8007edc:	0018      	movs	r0, r3
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}

08007ee2 <_kill>:

int _kill(int pid, int sig)
{
 8007ee2:	b580      	push	{r7, lr}
 8007ee4:	b082      	sub	sp, #8
 8007ee6:	af00      	add	r7, sp, #0
 8007ee8:	6078      	str	r0, [r7, #4]
 8007eea:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8007eec:	f006 fed2 	bl	800ec94 <__errno>
 8007ef0:	0003      	movs	r3, r0
 8007ef2:	2216      	movs	r2, #22
 8007ef4:	601a      	str	r2, [r3, #0]
  return -1;
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	425b      	negs	r3, r3
}
 8007efa:	0018      	movs	r0, r3
 8007efc:	46bd      	mov	sp, r7
 8007efe:	b002      	add	sp, #8
 8007f00:	bd80      	pop	{r7, pc}

08007f02 <_exit>:

void _exit (int status)
{
 8007f02:	b580      	push	{r7, lr}
 8007f04:	b082      	sub	sp, #8
 8007f06:	af00      	add	r7, sp, #0
 8007f08:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	425a      	negs	r2, r3
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	0011      	movs	r1, r2
 8007f12:	0018      	movs	r0, r3
 8007f14:	f7ff ffe5 	bl	8007ee2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8007f18:	46c0      	nop			@ (mov r8, r8)
 8007f1a:	e7fd      	b.n	8007f18 <_exit+0x16>

08007f1c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b086      	sub	sp, #24
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	60f8      	str	r0, [r7, #12]
 8007f24:	60b9      	str	r1, [r7, #8]
 8007f26:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007f28:	2300      	movs	r3, #0
 8007f2a:	617b      	str	r3, [r7, #20]
 8007f2c:	e00a      	b.n	8007f44 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8007f2e:	e000      	b.n	8007f32 <_read+0x16>
 8007f30:	bf00      	nop
 8007f32:	0001      	movs	r1, r0
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	1c5a      	adds	r2, r3, #1
 8007f38:	60ba      	str	r2, [r7, #8]
 8007f3a:	b2ca      	uxtb	r2, r1
 8007f3c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	3301      	adds	r3, #1
 8007f42:	617b      	str	r3, [r7, #20]
 8007f44:	697a      	ldr	r2, [r7, #20]
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	429a      	cmp	r2, r3
 8007f4a:	dbf0      	blt.n	8007f2e <_read+0x12>
  }

  return len;
 8007f4c:	687b      	ldr	r3, [r7, #4]
}
 8007f4e:	0018      	movs	r0, r3
 8007f50:	46bd      	mov	sp, r7
 8007f52:	b006      	add	sp, #24
 8007f54:	bd80      	pop	{r7, pc}

08007f56 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007f56:	b580      	push	{r7, lr}
 8007f58:	b086      	sub	sp, #24
 8007f5a:	af00      	add	r7, sp, #0
 8007f5c:	60f8      	str	r0, [r7, #12]
 8007f5e:	60b9      	str	r1, [r7, #8]
 8007f60:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007f62:	2300      	movs	r3, #0
 8007f64:	617b      	str	r3, [r7, #20]
 8007f66:	e009      	b.n	8007f7c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	1c5a      	adds	r2, r3, #1
 8007f6c:	60ba      	str	r2, [r7, #8]
 8007f6e:	781b      	ldrb	r3, [r3, #0]
 8007f70:	0018      	movs	r0, r3
 8007f72:	e000      	b.n	8007f76 <_write+0x20>
 8007f74:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007f76:	697b      	ldr	r3, [r7, #20]
 8007f78:	3301      	adds	r3, #1
 8007f7a:	617b      	str	r3, [r7, #20]
 8007f7c:	697a      	ldr	r2, [r7, #20]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	429a      	cmp	r2, r3
 8007f82:	dbf1      	blt.n	8007f68 <_write+0x12>
  }
  return len;
 8007f84:	687b      	ldr	r3, [r7, #4]
}
 8007f86:	0018      	movs	r0, r3
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	b006      	add	sp, #24
 8007f8c:	bd80      	pop	{r7, pc}

08007f8e <_close>:

int _close(int file)
{
 8007f8e:	b580      	push	{r7, lr}
 8007f90:	b082      	sub	sp, #8
 8007f92:	af00      	add	r7, sp, #0
 8007f94:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8007f96:	2301      	movs	r3, #1
 8007f98:	425b      	negs	r3, r3
}
 8007f9a:	0018      	movs	r0, r3
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	b002      	add	sp, #8
 8007fa0:	bd80      	pop	{r7, pc}

08007fa2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007fa2:	b580      	push	{r7, lr}
 8007fa4:	b082      	sub	sp, #8
 8007fa6:	af00      	add	r7, sp, #0
 8007fa8:	6078      	str	r0, [r7, #4]
 8007faa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	2280      	movs	r2, #128	@ 0x80
 8007fb0:	0192      	lsls	r2, r2, #6
 8007fb2:	605a      	str	r2, [r3, #4]
  return 0;
 8007fb4:	2300      	movs	r3, #0
}
 8007fb6:	0018      	movs	r0, r3
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	b002      	add	sp, #8
 8007fbc:	bd80      	pop	{r7, pc}

08007fbe <_isatty>:

int _isatty(int file)
{
 8007fbe:	b580      	push	{r7, lr}
 8007fc0:	b082      	sub	sp, #8
 8007fc2:	af00      	add	r7, sp, #0
 8007fc4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8007fc6:	2301      	movs	r3, #1
}
 8007fc8:	0018      	movs	r0, r3
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	b002      	add	sp, #8
 8007fce:	bd80      	pop	{r7, pc}

08007fd0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b084      	sub	sp, #16
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	60f8      	str	r0, [r7, #12]
 8007fd8:	60b9      	str	r1, [r7, #8]
 8007fda:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8007fdc:	2300      	movs	r3, #0
}
 8007fde:	0018      	movs	r0, r3
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	b004      	add	sp, #16
 8007fe4:	bd80      	pop	{r7, pc}
	...

08007fe8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b086      	sub	sp, #24
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007ff0:	4a14      	ldr	r2, [pc, #80]	@ (8008044 <_sbrk+0x5c>)
 8007ff2:	4b15      	ldr	r3, [pc, #84]	@ (8008048 <_sbrk+0x60>)
 8007ff4:	1ad3      	subs	r3, r2, r3
 8007ff6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007ffc:	4b13      	ldr	r3, [pc, #76]	@ (800804c <_sbrk+0x64>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d102      	bne.n	800800a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008004:	4b11      	ldr	r3, [pc, #68]	@ (800804c <_sbrk+0x64>)
 8008006:	4a12      	ldr	r2, [pc, #72]	@ (8008050 <_sbrk+0x68>)
 8008008:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800800a:	4b10      	ldr	r3, [pc, #64]	@ (800804c <_sbrk+0x64>)
 800800c:	681a      	ldr	r2, [r3, #0]
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	18d3      	adds	r3, r2, r3
 8008012:	693a      	ldr	r2, [r7, #16]
 8008014:	429a      	cmp	r2, r3
 8008016:	d207      	bcs.n	8008028 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008018:	f006 fe3c 	bl	800ec94 <__errno>
 800801c:	0003      	movs	r3, r0
 800801e:	220c      	movs	r2, #12
 8008020:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008022:	2301      	movs	r3, #1
 8008024:	425b      	negs	r3, r3
 8008026:	e009      	b.n	800803c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008028:	4b08      	ldr	r3, [pc, #32]	@ (800804c <_sbrk+0x64>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800802e:	4b07      	ldr	r3, [pc, #28]	@ (800804c <_sbrk+0x64>)
 8008030:	681a      	ldr	r2, [r3, #0]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	18d2      	adds	r2, r2, r3
 8008036:	4b05      	ldr	r3, [pc, #20]	@ (800804c <_sbrk+0x64>)
 8008038:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800803a:	68fb      	ldr	r3, [r7, #12]
}
 800803c:	0018      	movs	r0, r3
 800803e:	46bd      	mov	sp, r7
 8008040:	b006      	add	sp, #24
 8008042:	bd80      	pop	{r7, pc}
 8008044:	20024000 	.word	0x20024000
 8008048:	00000400 	.word	0x00000400
 800804c:	200014e4 	.word	0x200014e4
 8008050:	20001658 	.word	0x20001658

08008054 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008058:	46c0      	nop			@ (mov r8, r8)
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}

0800805e <json_getValue>:
static inline char const* json_getValue( json_t const* property ) {
 800805e:	b580      	push	{r7, lr}
 8008060:	b082      	sub	sp, #8
 8008062:	af00      	add	r7, sp, #0
 8008064:	6078      	str	r0, [r7, #4]
    return property->u.value;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	689b      	ldr	r3, [r3, #8]
}
 800806a:	0018      	movs	r0, r3
 800806c:	46bd      	mov	sp, r7
 800806e:	b002      	add	sp, #8
 8008070:	bd80      	pop	{r7, pc}

08008072 <json_getType>:
static inline jsonType_t json_getType( json_t const* json ) {
 8008072:	b580      	push	{r7, lr}
 8008074:	b082      	sub	sp, #8
 8008076:	af00      	add	r7, sp, #0
 8008078:	6078      	str	r0, [r7, #4]
    return json->type;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	7c1b      	ldrb	r3, [r3, #16]
}
 800807e:	0018      	movs	r0, r3
 8008080:	46bd      	mov	sp, r7
 8008082:	b002      	add	sp, #8
 8008084:	bd80      	pop	{r7, pc}

08008086 <json_getProperty>:
    unsigned int nextFree;  /**< The index of the next free json property. */
    jsonPool_t pool;
} jsonStaticPool_t;

/* Search a property by its name in a JSON object. */
json_t const* json_getProperty( json_t const* obj, char const* property ) {
 8008086:	b580      	push	{r7, lr}
 8008088:	b084      	sub	sp, #16
 800808a:	af00      	add	r7, sp, #0
 800808c:	6078      	str	r0, [r7, #4]
 800808e:	6039      	str	r1, [r7, #0]
    json_t const* sibling;
    for( sibling = obj->u.c.child; sibling; sibling = sibling->sibling )
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	689b      	ldr	r3, [r3, #8]
 8008094:	60fb      	str	r3, [r7, #12]
 8008096:	e011      	b.n	80080bc <json_getProperty+0x36>
        if ( sibling->name && !strcmp( sibling->name, property ) )
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	685b      	ldr	r3, [r3, #4]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d00a      	beq.n	80080b6 <json_getProperty+0x30>
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	685b      	ldr	r3, [r3, #4]
 80080a4:	683a      	ldr	r2, [r7, #0]
 80080a6:	0011      	movs	r1, r2
 80080a8:	0018      	movs	r0, r3
 80080aa:	f7f8 f82d 	bl	8000108 <strcmp>
 80080ae:	1e03      	subs	r3, r0, #0
 80080b0:	d101      	bne.n	80080b6 <json_getProperty+0x30>
            return sibling;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	e006      	b.n	80080c4 <json_getProperty+0x3e>
    for( sibling = obj->u.c.child; sibling; sibling = sibling->sibling )
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	60fb      	str	r3, [r7, #12]
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d1ea      	bne.n	8008098 <json_getProperty+0x12>
    return 0;
 80080c2:	2300      	movs	r3, #0
}
 80080c4:	0018      	movs	r0, r3
 80080c6:	46bd      	mov	sp, r7
 80080c8:	b004      	add	sp, #16
 80080ca:	bd80      	pop	{r7, pc}

080080cc <json_getPropertyValue>:

/* Search a property by its name in a JSON object and return its value. */
char const* json_getPropertyValue( json_t const* obj, char const* property ) {
 80080cc:	b5b0      	push	{r4, r5, r7, lr}
 80080ce:	b084      	sub	sp, #16
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
 80080d4:	6039      	str	r1, [r7, #0]
	json_t const* field = json_getProperty( obj, property );
 80080d6:	683a      	ldr	r2, [r7, #0]
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	0011      	movs	r1, r2
 80080dc:	0018      	movs	r0, r3
 80080de:	f7ff ffd2 	bl	8008086 <json_getProperty>
 80080e2:	0003      	movs	r3, r0
 80080e4:	60fb      	str	r3, [r7, #12]
	if ( !field ) return 0;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d101      	bne.n	80080f0 <json_getPropertyValue+0x24>
 80080ec:	2300      	movs	r3, #0
 80080ee:	e012      	b.n	8008116 <json_getPropertyValue+0x4a>
        jsonType_t type = json_getType( field );
 80080f0:	250b      	movs	r5, #11
 80080f2:	197c      	adds	r4, r7, r5
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	0018      	movs	r0, r3
 80080f8:	f7ff ffbb 	bl	8008072 <json_getType>
 80080fc:	0003      	movs	r3, r0
 80080fe:	7023      	strb	r3, [r4, #0]
        if ( JSON_ARRAY >= type ) return 0;
 8008100:	197b      	adds	r3, r7, r5
 8008102:	781b      	ldrb	r3, [r3, #0]
 8008104:	2b01      	cmp	r3, #1
 8008106:	d801      	bhi.n	800810c <json_getPropertyValue+0x40>
 8008108:	2300      	movs	r3, #0
 800810a:	e004      	b.n	8008116 <json_getPropertyValue+0x4a>
	return json_getValue( field );
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	0018      	movs	r0, r3
 8008110:	f7ff ffa5 	bl	800805e <json_getValue>
 8008114:	0003      	movs	r3, r0
}
 8008116:	0018      	movs	r0, r3
 8008118:	46bd      	mov	sp, r7
 800811a:	b004      	add	sp, #16
 800811c:	bdb0      	pop	{r4, r5, r7, pc}

0800811e <json_createWithPool>:
static char* objValue( char* ptr, json_t* obj, jsonPool_t* pool );
static char* setToNull( char* ch );
static bool isEndOfPrimitive( char ch );

/* Parse a string to get a json. */
json_t const* json_createWithPool( char *str, jsonPool_t *pool ) {
 800811e:	b580      	push	{r7, lr}
 8008120:	b084      	sub	sp, #16
 8008122:	af00      	add	r7, sp, #0
 8008124:	6078      	str	r0, [r7, #4]
 8008126:	6039      	str	r1, [r7, #0]
    char* ptr = goBlank( str );
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	0018      	movs	r0, r3
 800812c:	f000 fc66 	bl	80089fc <goBlank>
 8008130:	0003      	movs	r3, r0
 8008132:	60fb      	str	r3, [r7, #12]
    if ( !ptr || (*ptr != '{' && *ptr != '[') ) return 0;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d007      	beq.n	800814a <json_createWithPool+0x2c>
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	781b      	ldrb	r3, [r3, #0]
 800813e:	2b7b      	cmp	r3, #123	@ 0x7b
 8008140:	d005      	beq.n	800814e <json_createWithPool+0x30>
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	781b      	ldrb	r3, [r3, #0]
 8008146:	2b5b      	cmp	r3, #91	@ 0x5b
 8008148:	d001      	beq.n	800814e <json_createWithPool+0x30>
 800814a:	2300      	movs	r3, #0
 800814c:	e01d      	b.n	800818a <json_createWithPool+0x6c>
    json_t* obj = pool->init( pool );
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	683a      	ldr	r2, [r7, #0]
 8008154:	0010      	movs	r0, r2
 8008156:	4798      	blx	r3
 8008158:	0003      	movs	r3, r0
 800815a:	60bb      	str	r3, [r7, #8]
    obj->name    = 0;
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	2200      	movs	r2, #0
 8008160:	605a      	str	r2, [r3, #4]
    obj->sibling = 0;
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	2200      	movs	r2, #0
 8008166:	601a      	str	r2, [r3, #0]
    obj->u.c.child = 0;
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	2200      	movs	r2, #0
 800816c:	609a      	str	r2, [r3, #8]
    ptr = objValue( ptr, obj, pool );
 800816e:	683a      	ldr	r2, [r7, #0]
 8008170:	68b9      	ldr	r1, [r7, #8]
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	0018      	movs	r0, r3
 8008176:	f000 faeb 	bl	8008750 <objValue>
 800817a:	0003      	movs	r3, r0
 800817c:	60fb      	str	r3, [r7, #12]
    if ( !ptr ) return 0;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d101      	bne.n	8008188 <json_createWithPool+0x6a>
 8008184:	2300      	movs	r3, #0
 8008186:	e000      	b.n	800818a <json_createWithPool+0x6c>
    return obj;
 8008188:	68bb      	ldr	r3, [r7, #8]
}
 800818a:	0018      	movs	r0, r3
 800818c:	46bd      	mov	sp, r7
 800818e:	b004      	add	sp, #16
 8008190:	bd80      	pop	{r7, pc}
	...

08008194 <json_create>:

/* Parse a string to get a json. */
json_t const* json_create( char* str, json_t mem[], unsigned int qty ) {
 8008194:	b580      	push	{r7, lr}
 8008196:	b08a      	sub	sp, #40	@ 0x28
 8008198:	af00      	add	r7, sp, #0
 800819a:	60f8      	str	r0, [r7, #12]
 800819c:	60b9      	str	r1, [r7, #8]
 800819e:	607a      	str	r2, [r7, #4]
    jsonStaticPool_t spool;
    spool.mem = mem;
 80081a0:	2114      	movs	r1, #20
 80081a2:	187b      	adds	r3, r7, r1
 80081a4:	68ba      	ldr	r2, [r7, #8]
 80081a6:	601a      	str	r2, [r3, #0]
    spool.qty = qty;
 80081a8:	187b      	adds	r3, r7, r1
 80081aa:	687a      	ldr	r2, [r7, #4]
 80081ac:	605a      	str	r2, [r3, #4]
    spool.pool.init = poolInit;
 80081ae:	187b      	adds	r3, r7, r1
 80081b0:	4a08      	ldr	r2, [pc, #32]	@ (80081d4 <json_create+0x40>)
 80081b2:	60da      	str	r2, [r3, #12]
    spool.pool.alloc = poolAlloc;
 80081b4:	187b      	adds	r3, r7, r1
 80081b6:	4a08      	ldr	r2, [pc, #32]	@ (80081d8 <json_create+0x44>)
 80081b8:	611a      	str	r2, [r3, #16]
    return json_createWithPool( str, &spool.pool );
 80081ba:	187b      	adds	r3, r7, r1
 80081bc:	330c      	adds	r3, #12
 80081be:	001a      	movs	r2, r3
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	0011      	movs	r1, r2
 80081c4:	0018      	movs	r0, r3
 80081c6:	f7ff ffaa 	bl	800811e <json_createWithPool>
 80081ca:	0003      	movs	r3, r0
}
 80081cc:	0018      	movs	r0, r3
 80081ce:	46bd      	mov	sp, r7
 80081d0:	b00a      	add	sp, #40	@ 0x28
 80081d2:	bd80      	pop	{r7, pc}
 80081d4:	08008925 	.word	0x08008925
 80081d8:	08008945 	.word	0x08008945

080081dc <getEscape>:

/** Get a special character with its escape character. Examples:
  * 'b' -> '\\b', 'n' -> '\\n', 't' -> '\\t'
  * @param ch The escape character.
  * @retval  The character code. */
static char getEscape( char ch ) {
 80081dc:	b580      	push	{r7, lr}
 80081de:	b084      	sub	sp, #16
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	0002      	movs	r2, r0
 80081e4:	1dfb      	adds	r3, r7, #7
 80081e6:	701a      	strb	r2, [r3, #0]
        { '/',  '/'  }, { 'b',  '\b' },
        { 'f',  '\f' }, { 'n',  '\n' },
        { 'r',  '\r' }, { 't',  '\t' },
    };
    unsigned int i;
    for( i = 0; i < sizeof pair / sizeof *pair; ++i )
 80081e8:	2300      	movs	r3, #0
 80081ea:	60fb      	str	r3, [r7, #12]
 80081ec:	e011      	b.n	8008212 <getEscape+0x36>
        if ( pair[i].ch == ch )
 80081ee:	4b0d      	ldr	r3, [pc, #52]	@ (8008224 <getEscape+0x48>)
 80081f0:	68fa      	ldr	r2, [r7, #12]
 80081f2:	0052      	lsls	r2, r2, #1
 80081f4:	5cd3      	ldrb	r3, [r2, r3]
 80081f6:	1dfa      	adds	r2, r7, #7
 80081f8:	7812      	ldrb	r2, [r2, #0]
 80081fa:	429a      	cmp	r2, r3
 80081fc:	d106      	bne.n	800820c <getEscape+0x30>
            return pair[i].code;
 80081fe:	4a09      	ldr	r2, [pc, #36]	@ (8008224 <getEscape+0x48>)
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	005b      	lsls	r3, r3, #1
 8008204:	18d3      	adds	r3, r2, r3
 8008206:	3301      	adds	r3, #1
 8008208:	781b      	ldrb	r3, [r3, #0]
 800820a:	e006      	b.n	800821a <getEscape+0x3e>
    for( i = 0; i < sizeof pair / sizeof *pair; ++i )
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	3301      	adds	r3, #1
 8008210:	60fb      	str	r3, [r7, #12]
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	2b07      	cmp	r3, #7
 8008216:	d9ea      	bls.n	80081ee <getEscape+0x12>
    return '\0';
 8008218:	2300      	movs	r3, #0
}
 800821a:	0018      	movs	r0, r3
 800821c:	46bd      	mov	sp, r7
 800821e:	b004      	add	sp, #16
 8008220:	bd80      	pop	{r7, pc}
 8008222:	46c0      	nop			@ (mov r8, r8)
 8008224:	0801be3c 	.word	0x0801be3c

08008228 <getCharFromUnicode>:

/** Parse 4 characters.
  * @param str Pointer to  first digit.
  * @retval '?' If the four characters are hexadecimal digits.
  * @retval '\0' In other cases. */
static unsigned char getCharFromUnicode( unsigned char const* str ) {
 8008228:	b580      	push	{r7, lr}
 800822a:	b084      	sub	sp, #16
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
    unsigned int i;
    for( i = 0; i < 4; ++i )
 8008230:	2300      	movs	r3, #0
 8008232:	60fb      	str	r3, [r7, #12]
 8008234:	e010      	b.n	8008258 <getCharFromUnicode+0x30>
        if ( !isxdigit( str[i] ) )
 8008236:	687a      	ldr	r2, [r7, #4]
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	18d3      	adds	r3, r2, r3
 800823c:	781b      	ldrb	r3, [r3, #0]
 800823e:	1c5a      	adds	r2, r3, #1
 8008240:	4b09      	ldr	r3, [pc, #36]	@ (8008268 <getCharFromUnicode+0x40>)
 8008242:	18d3      	adds	r3, r2, r3
 8008244:	781b      	ldrb	r3, [r3, #0]
 8008246:	001a      	movs	r2, r3
 8008248:	2344      	movs	r3, #68	@ 0x44
 800824a:	4013      	ands	r3, r2
 800824c:	d101      	bne.n	8008252 <getCharFromUnicode+0x2a>
            return '\0';
 800824e:	2300      	movs	r3, #0
 8008250:	e006      	b.n	8008260 <getCharFromUnicode+0x38>
    for( i = 0; i < 4; ++i )
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	3301      	adds	r3, #1
 8008256:	60fb      	str	r3, [r7, #12]
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	2b03      	cmp	r3, #3
 800825c:	d9eb      	bls.n	8008236 <getCharFromUnicode+0xe>
    return '?';
 800825e:	233f      	movs	r3, #63	@ 0x3f
}
 8008260:	0018      	movs	r0, r3
 8008262:	46bd      	mov	sp, r7
 8008264:	b004      	add	sp, #16
 8008266:	bd80      	pop	{r7, pc}
 8008268:	0801bf58 	.word	0x0801bf58

0800826c <parseString>:
/** Parse a string and replace the scape characters by their meaning characters.
  * This parser stops when finds the character '\"'. Then replaces '\"' by '\0'.
  * @param str Pointer to first character.
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* parseString( char* str ) {
 800826c:	b5b0      	push	{r4, r5, r7, lr}
 800826e:	b086      	sub	sp, #24
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
    unsigned char* head = (unsigned char*)str;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	617b      	str	r3, [r7, #20]
    unsigned char* tail = (unsigned char*)str;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	613b      	str	r3, [r7, #16]
    for( ; *head; ++head, ++tail ) {
 800827c:	e04f      	b.n	800831e <parseString+0xb2>
        if ( *head == '\"' ) {
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	781b      	ldrb	r3, [r3, #0]
 8008282:	2b22      	cmp	r3, #34	@ 0x22
 8008284:	d107      	bne.n	8008296 <parseString+0x2a>
            *tail = '\0';
 8008286:	693b      	ldr	r3, [r7, #16]
 8008288:	2200      	movs	r2, #0
 800828a:	701a      	strb	r2, [r3, #0]
            return (char*)++head;
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	3301      	adds	r3, #1
 8008290:	617b      	str	r3, [r7, #20]
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	e048      	b.n	8008328 <parseString+0xbc>
        }
        if ( *head == '\\' ) {
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	781b      	ldrb	r3, [r3, #0]
 800829a:	2b5c      	cmp	r3, #92	@ 0x5c
 800829c:	d135      	bne.n	800830a <parseString+0x9e>
            if ( *++head == 'u' ) {
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	3301      	adds	r3, #1
 80082a2:	617b      	str	r3, [r7, #20]
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	781b      	ldrb	r3, [r3, #0]
 80082a8:	2b75      	cmp	r3, #117	@ 0x75
 80082aa:	d119      	bne.n	80082e0 <parseString+0x74>
                char const ch = getCharFromUnicode( ++head );
 80082ac:	697b      	ldr	r3, [r7, #20]
 80082ae:	3301      	adds	r3, #1
 80082b0:	617b      	str	r3, [r7, #20]
 80082b2:	250e      	movs	r5, #14
 80082b4:	197c      	adds	r4, r7, r5
 80082b6:	697b      	ldr	r3, [r7, #20]
 80082b8:	0018      	movs	r0, r3
 80082ba:	f7ff ffb5 	bl	8008228 <getCharFromUnicode>
 80082be:	0003      	movs	r3, r0
 80082c0:	7023      	strb	r3, [r4, #0]
                if ( ch == '\0' ) return 0;
 80082c2:	197b      	adds	r3, r7, r5
 80082c4:	781b      	ldrb	r3, [r3, #0]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d101      	bne.n	80082ce <parseString+0x62>
 80082ca:	2300      	movs	r3, #0
 80082cc:	e02c      	b.n	8008328 <parseString+0xbc>
                *tail = ch;
 80082ce:	693b      	ldr	r3, [r7, #16]
 80082d0:	220e      	movs	r2, #14
 80082d2:	18ba      	adds	r2, r7, r2
 80082d4:	7812      	ldrb	r2, [r2, #0]
 80082d6:	701a      	strb	r2, [r3, #0]
                head += 3;
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	3303      	adds	r3, #3
 80082dc:	617b      	str	r3, [r7, #20]
 80082de:	e018      	b.n	8008312 <parseString+0xa6>
            }
            else {
                char const esc = getEscape( *head );
 80082e0:	697b      	ldr	r3, [r7, #20]
 80082e2:	781b      	ldrb	r3, [r3, #0]
 80082e4:	250f      	movs	r5, #15
 80082e6:	197c      	adds	r4, r7, r5
 80082e8:	0018      	movs	r0, r3
 80082ea:	f7ff ff77 	bl	80081dc <getEscape>
 80082ee:	0003      	movs	r3, r0
 80082f0:	7023      	strb	r3, [r4, #0]
                if ( esc == '\0' ) return 0;
 80082f2:	197b      	adds	r3, r7, r5
 80082f4:	781b      	ldrb	r3, [r3, #0]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d101      	bne.n	80082fe <parseString+0x92>
 80082fa:	2300      	movs	r3, #0
 80082fc:	e014      	b.n	8008328 <parseString+0xbc>
                *tail = esc;
 80082fe:	693b      	ldr	r3, [r7, #16]
 8008300:	220f      	movs	r2, #15
 8008302:	18ba      	adds	r2, r7, r2
 8008304:	7812      	ldrb	r2, [r2, #0]
 8008306:	701a      	strb	r2, [r3, #0]
 8008308:	e003      	b.n	8008312 <parseString+0xa6>
            }
        }
        else *tail = *head;
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	781a      	ldrb	r2, [r3, #0]
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	701a      	strb	r2, [r3, #0]
    for( ; *head; ++head, ++tail ) {
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	3301      	adds	r3, #1
 8008316:	617b      	str	r3, [r7, #20]
 8008318:	693b      	ldr	r3, [r7, #16]
 800831a:	3301      	adds	r3, #1
 800831c:	613b      	str	r3, [r7, #16]
 800831e:	697b      	ldr	r3, [r7, #20]
 8008320:	781b      	ldrb	r3, [r3, #0]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d1ab      	bne.n	800827e <parseString+0x12>
    }
    return 0;
 8008326:	2300      	movs	r3, #0
}
 8008328:	0018      	movs	r0, r3
 800832a:	46bd      	mov	sp, r7
 800832c:	b006      	add	sp, #24
 800832e:	bdb0      	pop	{r4, r5, r7, pc}

08008330 <propertyName>:
/** Parse a string to get the name of a property.
  * @param ptr Pointer to first character.
  * @param property The property to assign the name.
  * @retval Pointer to first of property value. If success.
  * @retval Null pointer if any error occur. */
static char* propertyName( char* ptr, json_t* property ) {
 8008330:	b580      	push	{r7, lr}
 8008332:	b082      	sub	sp, #8
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
 8008338:	6039      	str	r1, [r7, #0]
    property->name = ++ptr;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	3301      	adds	r3, #1
 800833e:	607b      	str	r3, [r7, #4]
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	687a      	ldr	r2, [r7, #4]
 8008344:	605a      	str	r2, [r3, #4]
    ptr = parseString( ptr );
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	0018      	movs	r0, r3
 800834a:	f7ff ff8f 	bl	800826c <parseString>
 800834e:	0003      	movs	r3, r0
 8008350:	607b      	str	r3, [r7, #4]
    if ( !ptr ) return 0;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d101      	bne.n	800835c <propertyName+0x2c>
 8008358:	2300      	movs	r3, #0
 800835a:	e017      	b.n	800838c <propertyName+0x5c>
    ptr = goBlank( ptr );
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	0018      	movs	r0, r3
 8008360:	f000 fb4c 	bl	80089fc <goBlank>
 8008364:	0003      	movs	r3, r0
 8008366:	607b      	str	r3, [r7, #4]
    if ( !ptr ) return 0;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d101      	bne.n	8008372 <propertyName+0x42>
 800836e:	2300      	movs	r3, #0
 8008370:	e00c      	b.n	800838c <propertyName+0x5c>
    if ( *ptr++ != ':' ) return 0;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	1c5a      	adds	r2, r3, #1
 8008376:	607a      	str	r2, [r7, #4]
 8008378:	781b      	ldrb	r3, [r3, #0]
 800837a:	2b3a      	cmp	r3, #58	@ 0x3a
 800837c:	d001      	beq.n	8008382 <propertyName+0x52>
 800837e:	2300      	movs	r3, #0
 8008380:	e004      	b.n	800838c <propertyName+0x5c>
    return goBlank( ptr );
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	0018      	movs	r0, r3
 8008386:	f000 fb39 	bl	80089fc <goBlank>
 800838a:	0003      	movs	r3, r0
}
 800838c:	0018      	movs	r0, r3
 800838e:	46bd      	mov	sp, r7
 8008390:	b002      	add	sp, #8
 8008392:	bd80      	pop	{r7, pc}

08008394 <textValue>:
/** Parse a string to get the value of a property when its type is JSON_TEXT.
  * @param ptr Pointer to first character ('\"').
  * @param property The property to assign the name.
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* textValue( char* ptr, json_t* property ) {
 8008394:	b580      	push	{r7, lr}
 8008396:	b082      	sub	sp, #8
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
 800839c:	6039      	str	r1, [r7, #0]
    ++property->u.value;
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	689b      	ldr	r3, [r3, #8]
 80083a2:	1c5a      	adds	r2, r3, #1
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	609a      	str	r2, [r3, #8]
    ptr = parseString( ++ptr );
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	3301      	adds	r3, #1
 80083ac:	607b      	str	r3, [r7, #4]
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	0018      	movs	r0, r3
 80083b2:	f7ff ff5b 	bl	800826c <parseString>
 80083b6:	0003      	movs	r3, r0
 80083b8:	607b      	str	r3, [r7, #4]
    if ( !ptr ) return 0;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d101      	bne.n	80083c4 <textValue+0x30>
 80083c0:	2300      	movs	r3, #0
 80083c2:	e003      	b.n	80083cc <textValue+0x38>
    property->type = JSON_TEXT;
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	2202      	movs	r2, #2
 80083c8:	741a      	strb	r2, [r3, #16]
    return ptr;
 80083ca:	687b      	ldr	r3, [r7, #4]
}
 80083cc:	0018      	movs	r0, r3
 80083ce:	46bd      	mov	sp, r7
 80083d0:	b002      	add	sp, #8
 80083d2:	bd80      	pop	{r7, pc}

080083d4 <checkStr>:
/** Compare two strings until get the null character in the second one.
  * @param ptr sub string
  * @param str main string
  * @retval Pointer to next character.
  * @retval Null pointer if any error occur. */
static char* checkStr( char* ptr, char const* str ) {
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b082      	sub	sp, #8
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	6039      	str	r1, [r7, #0]
    while( *str )
 80083de:	e00b      	b.n	80083f8 <checkStr+0x24>
        if ( *ptr++ != *str++ )
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	1c5a      	adds	r2, r3, #1
 80083e4:	607a      	str	r2, [r7, #4]
 80083e6:	781a      	ldrb	r2, [r3, #0]
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	1c59      	adds	r1, r3, #1
 80083ec:	6039      	str	r1, [r7, #0]
 80083ee:	781b      	ldrb	r3, [r3, #0]
 80083f0:	429a      	cmp	r2, r3
 80083f2:	d001      	beq.n	80083f8 <checkStr+0x24>
            return 0;
 80083f4:	2300      	movs	r3, #0
 80083f6:	e004      	b.n	8008402 <checkStr+0x2e>
    while( *str )
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	781b      	ldrb	r3, [r3, #0]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d1ef      	bne.n	80083e0 <checkStr+0xc>
    return ptr;
 8008400:	687b      	ldr	r3, [r7, #4]
}
 8008402:	0018      	movs	r0, r3
 8008404:	46bd      	mov	sp, r7
 8008406:	b002      	add	sp, #8
 8008408:	bd80      	pop	{r7, pc}

0800840a <primitiveValue>:
  * @param property Property handler to set the value and the type, (true, false or null).
  * @param value String with the primitive literal.
  * @param type The code of the type. ( JSON_BOOLEAN or JSON_NULL )
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* primitiveValue( char* ptr, json_t* property, char const* value, jsonType_t type ) {
 800840a:	b580      	push	{r7, lr}
 800840c:	b084      	sub	sp, #16
 800840e:	af00      	add	r7, sp, #0
 8008410:	60f8      	str	r0, [r7, #12]
 8008412:	60b9      	str	r1, [r7, #8]
 8008414:	607a      	str	r2, [r7, #4]
 8008416:	001a      	movs	r2, r3
 8008418:	1cfb      	adds	r3, r7, #3
 800841a:	701a      	strb	r2, [r3, #0]
    ptr = checkStr( ptr, value );
 800841c:	687a      	ldr	r2, [r7, #4]
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	0011      	movs	r1, r2
 8008422:	0018      	movs	r0, r3
 8008424:	f7ff ffd6 	bl	80083d4 <checkStr>
 8008428:	0003      	movs	r3, r0
 800842a:	60fb      	str	r3, [r7, #12]
    if ( !ptr || !isEndOfPrimitive( *ptr ) ) return 0;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d00b      	beq.n	800844a <primitiveValue+0x40>
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	781b      	ldrb	r3, [r3, #0]
 8008436:	0018      	movs	r0, r3
 8008438:	f000 fb30 	bl	8008a9c <isEndOfPrimitive>
 800843c:	0003      	movs	r3, r0
 800843e:	001a      	movs	r2, r3
 8008440:	2301      	movs	r3, #1
 8008442:	4053      	eors	r3, r2
 8008444:	b2db      	uxtb	r3, r3
 8008446:	2b00      	cmp	r3, #0
 8008448:	d001      	beq.n	800844e <primitiveValue+0x44>
 800844a:	2300      	movs	r3, #0
 800844c:	e00a      	b.n	8008464 <primitiveValue+0x5a>
    ptr = setToNull( ptr );
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	0018      	movs	r0, r3
 8008452:	f000 fb05 	bl	8008a60 <setToNull>
 8008456:	0003      	movs	r3, r0
 8008458:	60fb      	str	r3, [r7, #12]
    property->type = type;
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	1cfa      	adds	r2, r7, #3
 800845e:	7812      	ldrb	r2, [r2, #0]
 8008460:	741a      	strb	r2, [r3, #16]
    return ptr;
 8008462:	68fb      	ldr	r3, [r7, #12]
}
 8008464:	0018      	movs	r0, r3
 8008466:	46bd      	mov	sp, r7
 8008468:	b004      	add	sp, #16
 800846a:	bd80      	pop	{r7, pc}

0800846c <trueValue>:
  * If the first character after the value is different of '}' or ']' is set to '\0'.
  * @param ptr Pointer to first character.
  * @param property Property handler to set the value and the type, (true, false or null).
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* trueValue( char* ptr, json_t* property ) {
 800846c:	b580      	push	{r7, lr}
 800846e:	b082      	sub	sp, #8
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
 8008474:	6039      	str	r1, [r7, #0]
    return primitiveValue( ptr, property, "true", JSON_BOOLEAN );
 8008476:	4a05      	ldr	r2, [pc, #20]	@ (800848c <trueValue+0x20>)
 8008478:	6839      	ldr	r1, [r7, #0]
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	2303      	movs	r3, #3
 800847e:	f7ff ffc4 	bl	800840a <primitiveValue>
 8008482:	0003      	movs	r3, r0
}
 8008484:	0018      	movs	r0, r3
 8008486:	46bd      	mov	sp, r7
 8008488:	b002      	add	sp, #8
 800848a:	bd80      	pop	{r7, pc}
 800848c:	0801154c 	.word	0x0801154c

08008490 <falseValue>:
  * If the first character after the value is different of '}' or ']' is set to '\0'.
  * @param ptr Pointer to first character.
  * @param property Property handler to set the value and the type, (true, false or null).
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* falseValue( char* ptr, json_t* property ) {
 8008490:	b580      	push	{r7, lr}
 8008492:	b082      	sub	sp, #8
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
 8008498:	6039      	str	r1, [r7, #0]
    return primitiveValue( ptr, property, "false", JSON_BOOLEAN );
 800849a:	4a05      	ldr	r2, [pc, #20]	@ (80084b0 <falseValue+0x20>)
 800849c:	6839      	ldr	r1, [r7, #0]
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	2303      	movs	r3, #3
 80084a2:	f7ff ffb2 	bl	800840a <primitiveValue>
 80084a6:	0003      	movs	r3, r0
}
 80084a8:	0018      	movs	r0, r3
 80084aa:	46bd      	mov	sp, r7
 80084ac:	b002      	add	sp, #8
 80084ae:	bd80      	pop	{r7, pc}
 80084b0:	08011554 	.word	0x08011554

080084b4 <nullValue>:
  * If the first character after the value is different of '}' or ']' is set to '\0'.
  * @param ptr Pointer to first character.
  * @param property Property handler to set the value and the type, (true, false or null).
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* nullValue( char* ptr, json_t* property ) {
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b082      	sub	sp, #8
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
 80084bc:	6039      	str	r1, [r7, #0]
    return primitiveValue( ptr, property, "null", JSON_NULL );
 80084be:	4a05      	ldr	r2, [pc, #20]	@ (80084d4 <nullValue+0x20>)
 80084c0:	6839      	ldr	r1, [r7, #0]
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	2306      	movs	r3, #6
 80084c6:	f7ff ffa0 	bl	800840a <primitiveValue>
 80084ca:	0003      	movs	r3, r0
}
 80084cc:	0018      	movs	r0, r3
 80084ce:	46bd      	mov	sp, r7
 80084d0:	b002      	add	sp, #8
 80084d2:	bd80      	pop	{r7, pc}
 80084d4:	0801155c 	.word	0x0801155c

080084d8 <expValue>:

/** Analyze the exponential part of a real number.
  * @param ptr Pointer to first character.
  * @retval Pointer to first non numerical after the string. If success.
  * @retval Null pointer if any error occur. */
static char* expValue( char* ptr ) {
 80084d8:	b580      	push	{r7, lr}
 80084da:	b082      	sub	sp, #8
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
    if ( *ptr == '-' || *ptr == '+' ) ++ptr;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	781b      	ldrb	r3, [r3, #0]
 80084e4:	2b2d      	cmp	r3, #45	@ 0x2d
 80084e6:	d003      	beq.n	80084f0 <expValue+0x18>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	781b      	ldrb	r3, [r3, #0]
 80084ec:	2b2b      	cmp	r3, #43	@ 0x2b
 80084ee:	d102      	bne.n	80084f6 <expValue+0x1e>
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	3301      	adds	r3, #1
 80084f4:	607b      	str	r3, [r7, #4]
    if ( !isdigit( (int)(*ptr) ) ) return 0;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	781b      	ldrb	r3, [r3, #0]
 80084fa:	1c5a      	adds	r2, r3, #1
 80084fc:	4b0b      	ldr	r3, [pc, #44]	@ (800852c <expValue+0x54>)
 80084fe:	18d3      	adds	r3, r2, r3
 8008500:	781b      	ldrb	r3, [r3, #0]
 8008502:	001a      	movs	r2, r3
 8008504:	2304      	movs	r3, #4
 8008506:	4013      	ands	r3, r2
 8008508:	d101      	bne.n	800850e <expValue+0x36>
 800850a:	2300      	movs	r3, #0
 800850c:	e009      	b.n	8008522 <expValue+0x4a>
    ptr = goNum( ++ptr );
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	3301      	adds	r3, #1
 8008512:	607b      	str	r3, [r7, #4]
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	0018      	movs	r0, r3
 8008518:	f000 fa82 	bl	8008a20 <goNum>
 800851c:	0003      	movs	r3, r0
 800851e:	607b      	str	r3, [r7, #4]
    return ptr;
 8008520:	687b      	ldr	r3, [r7, #4]
}
 8008522:	0018      	movs	r0, r3
 8008524:	46bd      	mov	sp, r7
 8008526:	b002      	add	sp, #8
 8008528:	bd80      	pop	{r7, pc}
 800852a:	46c0      	nop			@ (mov r8, r8)
 800852c:	0801bf58 	.word	0x0801bf58

08008530 <fraqValue>:

/** Analyze the decimal part of a real number.
  * @param ptr Pointer to first character.
  * @retval Pointer to first non numerical after the string. If success.
  * @retval Null pointer if any error occur. */
static char* fraqValue( char* ptr ) {
 8008530:	b580      	push	{r7, lr}
 8008532:	b082      	sub	sp, #8
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
    if ( !isdigit( (int)(*ptr) ) ) return 0;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	781b      	ldrb	r3, [r3, #0]
 800853c:	1c5a      	adds	r2, r3, #1
 800853e:	4b0e      	ldr	r3, [pc, #56]	@ (8008578 <fraqValue+0x48>)
 8008540:	18d3      	adds	r3, r2, r3
 8008542:	781b      	ldrb	r3, [r3, #0]
 8008544:	001a      	movs	r2, r3
 8008546:	2304      	movs	r3, #4
 8008548:	4013      	ands	r3, r2
 800854a:	d101      	bne.n	8008550 <fraqValue+0x20>
 800854c:	2300      	movs	r3, #0
 800854e:	e00e      	b.n	800856e <fraqValue+0x3e>
    ptr = goNum( ++ptr );
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	3301      	adds	r3, #1
 8008554:	607b      	str	r3, [r7, #4]
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	0018      	movs	r0, r3
 800855a:	f000 fa61 	bl	8008a20 <goNum>
 800855e:	0003      	movs	r3, r0
 8008560:	607b      	str	r3, [r7, #4]
    if ( !ptr ) return 0;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d101      	bne.n	800856c <fraqValue+0x3c>
 8008568:	2300      	movs	r3, #0
 800856a:	e000      	b.n	800856e <fraqValue+0x3e>
    return ptr;
 800856c:	687b      	ldr	r3, [r7, #4]
}
 800856e:	0018      	movs	r0, r3
 8008570:	46bd      	mov	sp, r7
 8008572:	b002      	add	sp, #8
 8008574:	bd80      	pop	{r7, pc}
 8008576:	46c0      	nop			@ (mov r8, r8)
 8008578:	0801bf58 	.word	0x0801bf58

0800857c <numValue>:
  * If the first character after the value is different of '}' or ']' is set to '\0'.
  * @param ptr Pointer to first character.
  * @param property Property handler to set the value and the type: JSON_REAL or JSON_INTEGER.
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* numValue( char* ptr, json_t* property ) {
 800857c:	b580      	push	{r7, lr}
 800857e:	b088      	sub	sp, #32
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
 8008584:	6039      	str	r1, [r7, #0]
    if ( *ptr == '-' ) ++ptr;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	781b      	ldrb	r3, [r3, #0]
 800858a:	2b2d      	cmp	r3, #45	@ 0x2d
 800858c:	d102      	bne.n	8008594 <numValue+0x18>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	3301      	adds	r3, #1
 8008592:	607b      	str	r3, [r7, #4]
    if ( !isdigit( (int)(*ptr) ) ) return 0;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	781b      	ldrb	r3, [r3, #0]
 8008598:	1c5a      	adds	r2, r3, #1
 800859a:	4b5b      	ldr	r3, [pc, #364]	@ (8008708 <numValue+0x18c>)
 800859c:	18d3      	adds	r3, r2, r3
 800859e:	781b      	ldrb	r3, [r3, #0]
 80085a0:	001a      	movs	r2, r3
 80085a2:	2304      	movs	r3, #4
 80085a4:	4013      	ands	r3, r2
 80085a6:	d101      	bne.n	80085ac <numValue+0x30>
 80085a8:	2300      	movs	r3, #0
 80085aa:	e0a8      	b.n	80086fe <numValue+0x182>
    if ( *ptr != '0' ) {
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	781b      	ldrb	r3, [r3, #0]
 80085b0:	2b30      	cmp	r3, #48	@ 0x30
 80085b2:	d00a      	beq.n	80085ca <numValue+0x4e>
        ptr = goNum( ptr );
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	0018      	movs	r0, r3
 80085b8:	f000 fa32 	bl	8008a20 <goNum>
 80085bc:	0003      	movs	r3, r0
 80085be:	607b      	str	r3, [r7, #4]
        if ( !ptr ) return 0;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d110      	bne.n	80085e8 <numValue+0x6c>
 80085c6:	2300      	movs	r3, #0
 80085c8:	e099      	b.n	80086fe <numValue+0x182>
    }
    else if ( isdigit( (int)(*++ptr) ) ) return 0;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	3301      	adds	r3, #1
 80085ce:	607b      	str	r3, [r7, #4]
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	781b      	ldrb	r3, [r3, #0]
 80085d4:	1c5a      	adds	r2, r3, #1
 80085d6:	4b4c      	ldr	r3, [pc, #304]	@ (8008708 <numValue+0x18c>)
 80085d8:	18d3      	adds	r3, r2, r3
 80085da:	781b      	ldrb	r3, [r3, #0]
 80085dc:	001a      	movs	r2, r3
 80085de:	2304      	movs	r3, #4
 80085e0:	4013      	ands	r3, r2
 80085e2:	d001      	beq.n	80085e8 <numValue+0x6c>
 80085e4:	2300      	movs	r3, #0
 80085e6:	e08a      	b.n	80086fe <numValue+0x182>
    property->type = JSON_INTEGER;
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	2204      	movs	r2, #4
 80085ec:	741a      	strb	r2, [r3, #16]
    if ( *ptr == '.' ) {
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	781b      	ldrb	r3, [r3, #0]
 80085f2:	2b2e      	cmp	r3, #46	@ 0x2e
 80085f4:	d110      	bne.n	8008618 <numValue+0x9c>
        ptr = fraqValue( ++ptr );
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	3301      	adds	r3, #1
 80085fa:	607b      	str	r3, [r7, #4]
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	0018      	movs	r0, r3
 8008600:	f7ff ff96 	bl	8008530 <fraqValue>
 8008604:	0003      	movs	r3, r0
 8008606:	607b      	str	r3, [r7, #4]
        if ( !ptr ) return 0;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d101      	bne.n	8008612 <numValue+0x96>
 800860e:	2300      	movs	r3, #0
 8008610:	e075      	b.n	80086fe <numValue+0x182>
        property->type = JSON_REAL;
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	2205      	movs	r2, #5
 8008616:	741a      	strb	r2, [r3, #16]
    }
    if ( *ptr == 'e' || *ptr == 'E' ) {
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	781b      	ldrb	r3, [r3, #0]
 800861c:	2b65      	cmp	r3, #101	@ 0x65
 800861e:	d003      	beq.n	8008628 <numValue+0xac>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	781b      	ldrb	r3, [r3, #0]
 8008624:	2b45      	cmp	r3, #69	@ 0x45
 8008626:	d110      	bne.n	800864a <numValue+0xce>
        ptr = expValue( ++ptr );
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	3301      	adds	r3, #1
 800862c:	607b      	str	r3, [r7, #4]
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	0018      	movs	r0, r3
 8008632:	f7ff ff51 	bl	80084d8 <expValue>
 8008636:	0003      	movs	r3, r0
 8008638:	607b      	str	r3, [r7, #4]
        if ( !ptr ) return 0;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d101      	bne.n	8008644 <numValue+0xc8>
 8008640:	2300      	movs	r3, #0
 8008642:	e05c      	b.n	80086fe <numValue+0x182>
        property->type = JSON_REAL;
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	2205      	movs	r2, #5
 8008648:	741a      	strb	r2, [r3, #16]
    }
    if ( !isEndOfPrimitive( *ptr ) ) return 0;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	781b      	ldrb	r3, [r3, #0]
 800864e:	0018      	movs	r0, r3
 8008650:	f000 fa24 	bl	8008a9c <isEndOfPrimitive>
 8008654:	0003      	movs	r3, r0
 8008656:	001a      	movs	r2, r3
 8008658:	2301      	movs	r3, #1
 800865a:	4053      	eors	r3, r2
 800865c:	b2db      	uxtb	r3, r3
 800865e:	2b00      	cmp	r3, #0
 8008660:	d001      	beq.n	8008666 <numValue+0xea>
 8008662:	2300      	movs	r3, #0
 8008664:	e04b      	b.n	80086fe <numValue+0x182>
    if ( JSON_INTEGER == property->type ) {
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	7c1b      	ldrb	r3, [r3, #16]
 800866a:	2b04      	cmp	r3, #4
 800866c:	d140      	bne.n	80086f0 <numValue+0x174>
        char const* value = property->u.value;
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	689b      	ldr	r3, [r3, #8]
 8008672:	61fb      	str	r3, [r7, #28]
        bool const negative = *value == '-';
 8008674:	69fb      	ldr	r3, [r7, #28]
 8008676:	781a      	ldrb	r2, [r3, #0]
 8008678:	201b      	movs	r0, #27
 800867a:	183b      	adds	r3, r7, r0
 800867c:	3a2d      	subs	r2, #45	@ 0x2d
 800867e:	4251      	negs	r1, r2
 8008680:	414a      	adcs	r2, r1
 8008682:	701a      	strb	r2, [r3, #0]
        static char const min[] = "-9223372036854775808";
        static char const max[] = "9223372036854775807";
        unsigned int const maxdigits = ( negative? sizeof min: sizeof max ) - 1;
 8008684:	183b      	adds	r3, r7, r0
 8008686:	781b      	ldrb	r3, [r3, #0]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d001      	beq.n	8008690 <numValue+0x114>
 800868c:	2314      	movs	r3, #20
 800868e:	e000      	b.n	8008692 <numValue+0x116>
 8008690:	2313      	movs	r3, #19
 8008692:	617b      	str	r3, [r7, #20]
        unsigned int const len = ( unsigned int const ) ( ptr - value );
 8008694:	687a      	ldr	r2, [r7, #4]
 8008696:	69fb      	ldr	r3, [r7, #28]
 8008698:	1ad3      	subs	r3, r2, r3
 800869a:	613b      	str	r3, [r7, #16]
        if ( len > maxdigits ) return 0;
 800869c:	693a      	ldr	r2, [r7, #16]
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	429a      	cmp	r2, r3
 80086a2:	d901      	bls.n	80086a8 <numValue+0x12c>
 80086a4:	2300      	movs	r3, #0
 80086a6:	e02a      	b.n	80086fe <numValue+0x182>
        if ( len == maxdigits ) {
 80086a8:	693a      	ldr	r2, [r7, #16]
 80086aa:	697b      	ldr	r3, [r7, #20]
 80086ac:	429a      	cmp	r2, r3
 80086ae:	d11f      	bne.n	80086f0 <numValue+0x174>
            char const tmp = *ptr;
 80086b0:	230f      	movs	r3, #15
 80086b2:	18fb      	adds	r3, r7, r3
 80086b4:	687a      	ldr	r2, [r7, #4]
 80086b6:	7812      	ldrb	r2, [r2, #0]
 80086b8:	701a      	strb	r2, [r3, #0]
            *ptr = '\0';
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2200      	movs	r2, #0
 80086be:	701a      	strb	r2, [r3, #0]
            char const* const threshold = negative ? min: max;
 80086c0:	231b      	movs	r3, #27
 80086c2:	18fb      	adds	r3, r7, r3
 80086c4:	781b      	ldrb	r3, [r3, #0]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d001      	beq.n	80086ce <numValue+0x152>
 80086ca:	4b10      	ldr	r3, [pc, #64]	@ (800870c <numValue+0x190>)
 80086cc:	e000      	b.n	80086d0 <numValue+0x154>
 80086ce:	4b10      	ldr	r3, [pc, #64]	@ (8008710 <numValue+0x194>)
 80086d0:	60bb      	str	r3, [r7, #8]
            if ( 0 > strcmp( threshold, value ) ) return 0;
 80086d2:	69fa      	ldr	r2, [r7, #28]
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	0011      	movs	r1, r2
 80086d8:	0018      	movs	r0, r3
 80086da:	f7f7 fd15 	bl	8000108 <strcmp>
 80086de:	1e03      	subs	r3, r0, #0
 80086e0:	da01      	bge.n	80086e6 <numValue+0x16a>
 80086e2:	2300      	movs	r3, #0
 80086e4:	e00b      	b.n	80086fe <numValue+0x182>
            *ptr = tmp;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	220f      	movs	r2, #15
 80086ea:	18ba      	adds	r2, r7, r2
 80086ec:	7812      	ldrb	r2, [r2, #0]
 80086ee:	701a      	strb	r2, [r3, #0]
        }
    }
    ptr = setToNull( ptr );
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	0018      	movs	r0, r3
 80086f4:	f000 f9b4 	bl	8008a60 <setToNull>
 80086f8:	0003      	movs	r3, r0
 80086fa:	607b      	str	r3, [r7, #4]
    return ptr;
 80086fc:	687b      	ldr	r3, [r7, #4]
}
 80086fe:	0018      	movs	r0, r3
 8008700:	46bd      	mov	sp, r7
 8008702:	b008      	add	sp, #32
 8008704:	bd80      	pop	{r7, pc}
 8008706:	46c0      	nop			@ (mov r8, r8)
 8008708:	0801bf58 	.word	0x0801bf58
 800870c:	0801be4c 	.word	0x0801be4c
 8008710:	0801be64 	.word	0x0801be64

08008714 <add>:

/** Add a property to a JSON object or array.
  * @param obj The handler of the JSON object or array.
  * @param property The handler of the property to be added. */
static void add( json_t* obj, json_t* property ) {
 8008714:	b580      	push	{r7, lr}
 8008716:	b082      	sub	sp, #8
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
 800871c:	6039      	str	r1, [r7, #0]
    property->sibling = 0;
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	2200      	movs	r2, #0
 8008722:	601a      	str	r2, [r3, #0]
    if ( !obj->u.c.child ){
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	689b      	ldr	r3, [r3, #8]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d106      	bne.n	800873a <add+0x26>
	    obj->u.c.child = property;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	683a      	ldr	r2, [r7, #0]
 8008730:	609a      	str	r2, [r3, #8]
	    obj->u.c.last_child = property;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	683a      	ldr	r2, [r7, #0]
 8008736:	60da      	str	r2, [r3, #12]
    } else {
	    obj->u.c.last_child->sibling = property;
	    obj->u.c.last_child = property;
    }
}
 8008738:	e006      	b.n	8008748 <add+0x34>
	    obj->u.c.last_child->sibling = property;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	68db      	ldr	r3, [r3, #12]
 800873e:	683a      	ldr	r2, [r7, #0]
 8008740:	601a      	str	r2, [r3, #0]
	    obj->u.c.last_child = property;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	683a      	ldr	r2, [r7, #0]
 8008746:	60da      	str	r2, [r3, #12]
}
 8008748:	46c0      	nop			@ (mov r8, r8)
 800874a:	46bd      	mov	sp, r7
 800874c:	b002      	add	sp, #8
 800874e:	bd80      	pop	{r7, pc}

08008750 <objValue>:
  * @param ptr Pointer to first character.
  * @param obj The handler of the JSON root object or array.
  * @param pool The handler of a json pool for creating json instances.
  * @retval Pointer to first character after the value. If success.
  * @retval Null pointer if any error occur. */
static char* objValue( char* ptr, json_t* obj, jsonPool_t* pool ) {
 8008750:	b580      	push	{r7, lr}
 8008752:	b088      	sub	sp, #32
 8008754:	af00      	add	r7, sp, #0
 8008756:	60f8      	str	r0, [r7, #12]
 8008758:	60b9      	str	r1, [r7, #8]
 800875a:	607a      	str	r2, [r7, #4]
    obj->type    = *ptr == '{' ? JSON_OBJ : JSON_ARRAY;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	781b      	ldrb	r3, [r3, #0]
 8008760:	3b7b      	subs	r3, #123	@ 0x7b
 8008762:	1e5a      	subs	r2, r3, #1
 8008764:	4193      	sbcs	r3, r2
 8008766:	b2db      	uxtb	r3, r3
 8008768:	001a      	movs	r2, r3
 800876a:	68bb      	ldr	r3, [r7, #8]
 800876c:	741a      	strb	r2, [r3, #16]
    obj->u.c.child = 0;
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	2200      	movs	r2, #0
 8008772:	609a      	str	r2, [r3, #8]
    obj->sibling = 0;
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	2200      	movs	r2, #0
 8008778:	601a      	str	r2, [r3, #0]
    ptr++;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	3301      	adds	r3, #1
 800877e:	60fb      	str	r3, [r7, #12]
    for(;;) {
        ptr = goBlank( ptr );
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	0018      	movs	r0, r3
 8008784:	f000 f93a 	bl	80089fc <goBlank>
 8008788:	0003      	movs	r3, r0
 800878a:	60fb      	str	r3, [r7, #12]
        if ( !ptr ) return 0;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d101      	bne.n	8008796 <objValue+0x46>
 8008792:	2300      	movs	r3, #0
 8008794:	e0c0      	b.n	8008918 <objValue+0x1c8>
        if ( *ptr == ',' ) {
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	781b      	ldrb	r3, [r3, #0]
 800879a:	2b2c      	cmp	r3, #44	@ 0x2c
 800879c:	d103      	bne.n	80087a6 <objValue+0x56>
            ++ptr;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	3301      	adds	r3, #1
 80087a2:	60fb      	str	r3, [r7, #12]
            continue;
 80087a4:	e0b7      	b.n	8008916 <objValue+0x1c6>
        }
        char const endchar = ( obj->type == JSON_OBJ )? '}': ']';
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	7c1b      	ldrb	r3, [r3, #16]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d101      	bne.n	80087b2 <objValue+0x62>
 80087ae:	227d      	movs	r2, #125	@ 0x7d
 80087b0:	e000      	b.n	80087b4 <objValue+0x64>
 80087b2:	225d      	movs	r2, #93	@ 0x5d
 80087b4:	211f      	movs	r1, #31
 80087b6:	187b      	adds	r3, r7, r1
 80087b8:	701a      	strb	r2, [r3, #0]
        if ( *ptr == endchar ) {
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	781b      	ldrb	r3, [r3, #0]
 80087be:	187a      	adds	r2, r7, r1
 80087c0:	7812      	ldrb	r2, [r2, #0]
 80087c2:	429a      	cmp	r2, r3
 80087c4:	d116      	bne.n	80087f4 <objValue+0xa4>
            *ptr = '\0';
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	2200      	movs	r2, #0
 80087ca:	701a      	strb	r2, [r3, #0]
            json_t* parentObj = obj->sibling;
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	617b      	str	r3, [r7, #20]
            if ( !parentObj ) return ++ptr;
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d104      	bne.n	80087e2 <objValue+0x92>
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	3301      	adds	r3, #1
 80087dc:	60fb      	str	r3, [r7, #12]
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	e09a      	b.n	8008918 <objValue+0x1c8>
            obj->sibling = 0;
 80087e2:	68bb      	ldr	r3, [r7, #8]
 80087e4:	2200      	movs	r2, #0
 80087e6:	601a      	str	r2, [r3, #0]
            obj = parentObj;
 80087e8:	697b      	ldr	r3, [r7, #20]
 80087ea:	60bb      	str	r3, [r7, #8]
            ++ptr;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	3301      	adds	r3, #1
 80087f0:	60fb      	str	r3, [r7, #12]
            continue;
 80087f2:	e090      	b.n	8008916 <objValue+0x1c6>
        }
        json_t* property = pool->alloc( pool );
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	685b      	ldr	r3, [r3, #4]
 80087f8:	687a      	ldr	r2, [r7, #4]
 80087fa:	0010      	movs	r0, r2
 80087fc:	4798      	blx	r3
 80087fe:	0003      	movs	r3, r0
 8008800:	61bb      	str	r3, [r7, #24]
        if ( !property ) return 0;
 8008802:	69bb      	ldr	r3, [r7, #24]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d101      	bne.n	800880c <objValue+0xbc>
 8008808:	2300      	movs	r3, #0
 800880a:	e085      	b.n	8008918 <objValue+0x1c8>
        if( obj->type != JSON_ARRAY ) {
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	7c1b      	ldrb	r3, [r3, #16]
 8008810:	2b01      	cmp	r3, #1
 8008812:	d012      	beq.n	800883a <objValue+0xea>
            if ( *ptr != '\"' ) return 0;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	781b      	ldrb	r3, [r3, #0]
 8008818:	2b22      	cmp	r3, #34	@ 0x22
 800881a:	d001      	beq.n	8008820 <objValue+0xd0>
 800881c:	2300      	movs	r3, #0
 800881e:	e07b      	b.n	8008918 <objValue+0x1c8>
            ptr = propertyName( ptr, property );
 8008820:	69ba      	ldr	r2, [r7, #24]
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	0011      	movs	r1, r2
 8008826:	0018      	movs	r0, r3
 8008828:	f7ff fd82 	bl	8008330 <propertyName>
 800882c:	0003      	movs	r3, r0
 800882e:	60fb      	str	r3, [r7, #12]
            if ( !ptr ) return 0;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d104      	bne.n	8008840 <objValue+0xf0>
 8008836:	2300      	movs	r3, #0
 8008838:	e06e      	b.n	8008918 <objValue+0x1c8>
        }
        else property->name = 0;
 800883a:	69bb      	ldr	r3, [r7, #24]
 800883c:	2200      	movs	r2, #0
 800883e:	605a      	str	r2, [r3, #4]
        add( obj, property );
 8008840:	69ba      	ldr	r2, [r7, #24]
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	0011      	movs	r1, r2
 8008846:	0018      	movs	r0, r3
 8008848:	f7ff ff64 	bl	8008714 <add>
        property->u.value = ptr;
 800884c:	69bb      	ldr	r3, [r7, #24]
 800884e:	68fa      	ldr	r2, [r7, #12]
 8008850:	609a      	str	r2, [r3, #8]
        switch( *ptr ) {
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	781b      	ldrb	r3, [r3, #0]
 8008856:	2b22      	cmp	r3, #34	@ 0x22
 8008858:	d02a      	beq.n	80088b0 <objValue+0x160>
 800885a:	db4d      	blt.n	80088f8 <objValue+0x1a8>
 800885c:	2b7b      	cmp	r3, #123	@ 0x7b
 800885e:	dc4b      	bgt.n	80088f8 <objValue+0x1a8>
 8008860:	2b5b      	cmp	r3, #91	@ 0x5b
 8008862:	db49      	blt.n	80088f8 <objValue+0x1a8>
 8008864:	3b5b      	subs	r3, #91	@ 0x5b
 8008866:	2b20      	cmp	r3, #32
 8008868:	d846      	bhi.n	80088f8 <objValue+0x1a8>
 800886a:	009a      	lsls	r2, r3, #2
 800886c:	4b2c      	ldr	r3, [pc, #176]	@ (8008920 <objValue+0x1d0>)
 800886e:	18d3      	adds	r3, r2, r3
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	469f      	mov	pc, r3
            case '{':
                property->type    = JSON_OBJ;
 8008874:	69bb      	ldr	r3, [r7, #24]
 8008876:	2200      	movs	r2, #0
 8008878:	741a      	strb	r2, [r3, #16]
                property->u.c.child = 0;
 800887a:	69bb      	ldr	r3, [r7, #24]
 800887c:	2200      	movs	r2, #0
 800887e:	609a      	str	r2, [r3, #8]
                property->sibling = obj;
 8008880:	69bb      	ldr	r3, [r7, #24]
 8008882:	68ba      	ldr	r2, [r7, #8]
 8008884:	601a      	str	r2, [r3, #0]
                obj = property;
 8008886:	69bb      	ldr	r3, [r7, #24]
 8008888:	60bb      	str	r3, [r7, #8]
                ++ptr;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	3301      	adds	r3, #1
 800888e:	60fb      	str	r3, [r7, #12]
                break;
 8008890:	e03b      	b.n	800890a <objValue+0x1ba>
            case '[':
                property->type    = JSON_ARRAY;
 8008892:	69bb      	ldr	r3, [r7, #24]
 8008894:	2201      	movs	r2, #1
 8008896:	741a      	strb	r2, [r3, #16]
                property->u.c.child = 0;
 8008898:	69bb      	ldr	r3, [r7, #24]
 800889a:	2200      	movs	r2, #0
 800889c:	609a      	str	r2, [r3, #8]
                property->sibling = obj;
 800889e:	69bb      	ldr	r3, [r7, #24]
 80088a0:	68ba      	ldr	r2, [r7, #8]
 80088a2:	601a      	str	r2, [r3, #0]
                obj = property;
 80088a4:	69bb      	ldr	r3, [r7, #24]
 80088a6:	60bb      	str	r3, [r7, #8]
                ++ptr;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	3301      	adds	r3, #1
 80088ac:	60fb      	str	r3, [r7, #12]
                break;
 80088ae:	e02c      	b.n	800890a <objValue+0x1ba>
            case '\"': ptr = textValue( ptr, property );  break;
 80088b0:	69ba      	ldr	r2, [r7, #24]
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	0011      	movs	r1, r2
 80088b6:	0018      	movs	r0, r3
 80088b8:	f7ff fd6c 	bl	8008394 <textValue>
 80088bc:	0003      	movs	r3, r0
 80088be:	60fb      	str	r3, [r7, #12]
 80088c0:	e023      	b.n	800890a <objValue+0x1ba>
            case 't':  ptr = trueValue( ptr, property );  break;
 80088c2:	69ba      	ldr	r2, [r7, #24]
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	0011      	movs	r1, r2
 80088c8:	0018      	movs	r0, r3
 80088ca:	f7ff fdcf 	bl	800846c <trueValue>
 80088ce:	0003      	movs	r3, r0
 80088d0:	60fb      	str	r3, [r7, #12]
 80088d2:	e01a      	b.n	800890a <objValue+0x1ba>
            case 'f':  ptr = falseValue( ptr, property ); break;
 80088d4:	69ba      	ldr	r2, [r7, #24]
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	0011      	movs	r1, r2
 80088da:	0018      	movs	r0, r3
 80088dc:	f7ff fdd8 	bl	8008490 <falseValue>
 80088e0:	0003      	movs	r3, r0
 80088e2:	60fb      	str	r3, [r7, #12]
 80088e4:	e011      	b.n	800890a <objValue+0x1ba>
            case 'n':  ptr = nullValue( ptr, property );  break;
 80088e6:	69ba      	ldr	r2, [r7, #24]
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	0011      	movs	r1, r2
 80088ec:	0018      	movs	r0, r3
 80088ee:	f7ff fde1 	bl	80084b4 <nullValue>
 80088f2:	0003      	movs	r3, r0
 80088f4:	60fb      	str	r3, [r7, #12]
 80088f6:	e008      	b.n	800890a <objValue+0x1ba>
            default:   ptr = numValue( ptr, property );   break;
 80088f8:	69ba      	ldr	r2, [r7, #24]
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	0011      	movs	r1, r2
 80088fe:	0018      	movs	r0, r3
 8008900:	f7ff fe3c 	bl	800857c <numValue>
 8008904:	0003      	movs	r3, r0
 8008906:	60fb      	str	r3, [r7, #12]
 8008908:	46c0      	nop			@ (mov r8, r8)
        }
        if ( !ptr ) return 0;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d000      	beq.n	8008912 <objValue+0x1c2>
 8008910:	e736      	b.n	8008780 <objValue+0x30>
 8008912:	2300      	movs	r3, #0
 8008914:	e000      	b.n	8008918 <objValue+0x1c8>
    for(;;) {
 8008916:	e733      	b.n	8008780 <objValue+0x30>
    }
}
 8008918:	0018      	movs	r0, r3
 800891a:	46bd      	mov	sp, r7
 800891c:	b008      	add	sp, #32
 800891e:	bd80      	pop	{r7, pc}
 8008920:	0801bdb8 	.word	0x0801bdb8

08008924 <poolInit>:

/** Initialize a json pool.
  * @param pool The handler of the pool.
  * @return a instance of a json. */
static json_t* poolInit( jsonPool_t* pool ) {
 8008924:	b580      	push	{r7, lr}
 8008926:	b084      	sub	sp, #16
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
    jsonStaticPool_t *spool = json_containerOf( pool, jsonStaticPool_t, pool );
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	3b0c      	subs	r3, #12
 8008930:	60fb      	str	r3, [r7, #12]
    spool->nextFree = 1;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	2201      	movs	r2, #1
 8008936:	609a      	str	r2, [r3, #8]
    return spool->mem;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	681b      	ldr	r3, [r3, #0]
}
 800893c:	0018      	movs	r0, r3
 800893e:	46bd      	mov	sp, r7
 8008940:	b004      	add	sp, #16
 8008942:	bd80      	pop	{r7, pc}

08008944 <poolAlloc>:

/** Create an instance of a json from a pool.
  * @param pool The handler of the pool.
  * @retval The handler of the new instance if success.
  * @retval Null pointer if the pool was empty. */
static json_t* poolAlloc( jsonPool_t* pool ) {
 8008944:	b580      	push	{r7, lr}
 8008946:	b084      	sub	sp, #16
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
    jsonStaticPool_t *spool = json_containerOf( pool, jsonStaticPool_t, pool );
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	3b0c      	subs	r3, #12
 8008950:	60fb      	str	r3, [r7, #12]
    if ( spool->nextFree >= spool->qty ) return 0;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	689a      	ldr	r2, [r3, #8]
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	685b      	ldr	r3, [r3, #4]
 800895a:	429a      	cmp	r2, r3
 800895c:	d301      	bcc.n	8008962 <poolAlloc+0x1e>
 800895e:	2300      	movs	r3, #0
 8008960:	e00b      	b.n	800897a <poolAlloc+0x36>
    return spool->mem + spool->nextFree++;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	6819      	ldr	r1, [r3, #0]
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	689a      	ldr	r2, [r3, #8]
 800896a:	1c50      	adds	r0, r2, #1
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	6098      	str	r0, [r3, #8]
 8008970:	0013      	movs	r3, r2
 8008972:	009b      	lsls	r3, r3, #2
 8008974:	189b      	adds	r3, r3, r2
 8008976:	009b      	lsls	r3, r3, #2
 8008978:	18cb      	adds	r3, r1, r3
}
 800897a:	0018      	movs	r0, r3
 800897c:	46bd      	mov	sp, r7
 800897e:	b004      	add	sp, #16
 8008980:	bd80      	pop	{r7, pc}

08008982 <isOneOfThem>:

/** Checks whether an character belongs to set.
  * @param ch Character value to be checked.
  * @param set Set of characters. It is just a null-terminated string.
  * @return true or false there is membership or not. */
static bool isOneOfThem( char ch, char const* set ) {
 8008982:	b580      	push	{r7, lr}
 8008984:	b082      	sub	sp, #8
 8008986:	af00      	add	r7, sp, #0
 8008988:	0002      	movs	r2, r0
 800898a:	6039      	str	r1, [r7, #0]
 800898c:	1dfb      	adds	r3, r7, #7
 800898e:	701a      	strb	r2, [r3, #0]
    while( *set != '\0' )
 8008990:	e009      	b.n	80089a6 <isOneOfThem+0x24>
        if ( ch == *set++ )
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	1c5a      	adds	r2, r3, #1
 8008996:	603a      	str	r2, [r7, #0]
 8008998:	781b      	ldrb	r3, [r3, #0]
 800899a:	1dfa      	adds	r2, r7, #7
 800899c:	7812      	ldrb	r2, [r2, #0]
 800899e:	429a      	cmp	r2, r3
 80089a0:	d101      	bne.n	80089a6 <isOneOfThem+0x24>
            return true;
 80089a2:	2301      	movs	r3, #1
 80089a4:	e004      	b.n	80089b0 <isOneOfThem+0x2e>
    while( *set != '\0' )
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	781b      	ldrb	r3, [r3, #0]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d1f1      	bne.n	8008992 <isOneOfThem+0x10>
    return false;
 80089ae:	2300      	movs	r3, #0
}
 80089b0:	0018      	movs	r0, r3
 80089b2:	46bd      	mov	sp, r7
 80089b4:	b002      	add	sp, #8
 80089b6:	bd80      	pop	{r7, pc}

080089b8 <goWhile>:

/** Increases a pointer while it points to a character that belongs to a set.
  * @param str The initial pointer value.
  * @param set Set of characters. It is just a null-terminated string.
  * @return The final pointer value or null pointer if the null character was found. */
static char* goWhile( char* str, char const* set ) {
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b082      	sub	sp, #8
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
 80089c0:	6039      	str	r1, [r7, #0]
    for(; *str != '\0'; ++str ) {
 80089c2:	e012      	b.n	80089ea <goWhile+0x32>
        if ( !isOneOfThem( *str, set ) )
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	781b      	ldrb	r3, [r3, #0]
 80089c8:	683a      	ldr	r2, [r7, #0]
 80089ca:	0011      	movs	r1, r2
 80089cc:	0018      	movs	r0, r3
 80089ce:	f7ff ffd8 	bl	8008982 <isOneOfThem>
 80089d2:	0003      	movs	r3, r0
 80089d4:	001a      	movs	r2, r3
 80089d6:	2301      	movs	r3, #1
 80089d8:	4053      	eors	r3, r2
 80089da:	b2db      	uxtb	r3, r3
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d001      	beq.n	80089e4 <goWhile+0x2c>
            return str;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	e007      	b.n	80089f4 <goWhile+0x3c>
    for(; *str != '\0'; ++str ) {
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	3301      	adds	r3, #1
 80089e8:	607b      	str	r3, [r7, #4]
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	781b      	ldrb	r3, [r3, #0]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d1e8      	bne.n	80089c4 <goWhile+0xc>
    }
    return 0;
 80089f2:	2300      	movs	r3, #0
}
 80089f4:	0018      	movs	r0, r3
 80089f6:	46bd      	mov	sp, r7
 80089f8:	b002      	add	sp, #8
 80089fa:	bd80      	pop	{r7, pc}

080089fc <goBlank>:
static char const* const blank = " \n\r\t\f";

/** Increases a pointer while it points to a white space character.
  * @param str The initial pointer value.
  * @return The final pointer value or null pointer if the null character was found. */
static char* goBlank( char* str ) {
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b082      	sub	sp, #8
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
    return goWhile( str, blank );
 8008a04:	4a05      	ldr	r2, [pc, #20]	@ (8008a1c <goBlank+0x20>)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	0011      	movs	r1, r2
 8008a0a:	0018      	movs	r0, r3
 8008a0c:	f7ff ffd4 	bl	80089b8 <goWhile>
 8008a10:	0003      	movs	r3, r0
}
 8008a12:	0018      	movs	r0, r3
 8008a14:	46bd      	mov	sp, r7
 8008a16:	b002      	add	sp, #8
 8008a18:	bd80      	pop	{r7, pc}
 8008a1a:	46c0      	nop			@ (mov r8, r8)
 8008a1c:	08011564 	.word	0x08011564

08008a20 <goNum>:

/** Increases a pointer while it points to a decimal digit character.
  * @param str The initial pointer value.
  * @return The final pointer value or null pointer if the null character was found. */
static char* goNum( char* str ) {
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b082      	sub	sp, #8
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
    for( ; *str != '\0'; ++str ) {
 8008a28:	e00e      	b.n	8008a48 <goNum+0x28>
        if ( !isdigit( (int)(*str) ) )
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	781b      	ldrb	r3, [r3, #0]
 8008a2e:	1c5a      	adds	r2, r3, #1
 8008a30:	4b0a      	ldr	r3, [pc, #40]	@ (8008a5c <goNum+0x3c>)
 8008a32:	18d3      	adds	r3, r2, r3
 8008a34:	781b      	ldrb	r3, [r3, #0]
 8008a36:	001a      	movs	r2, r3
 8008a38:	2304      	movs	r3, #4
 8008a3a:	4013      	ands	r3, r2
 8008a3c:	d101      	bne.n	8008a42 <goNum+0x22>
            return str;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	e007      	b.n	8008a52 <goNum+0x32>
    for( ; *str != '\0'; ++str ) {
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	3301      	adds	r3, #1
 8008a46:	607b      	str	r3, [r7, #4]
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	781b      	ldrb	r3, [r3, #0]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d1ec      	bne.n	8008a2a <goNum+0xa>
    }
    return 0;
 8008a50:	2300      	movs	r3, #0
}
 8008a52:	0018      	movs	r0, r3
 8008a54:	46bd      	mov	sp, r7
 8008a56:	b002      	add	sp, #8
 8008a58:	bd80      	pop	{r7, pc}
 8008a5a:	46c0      	nop			@ (mov r8, r8)
 8008a5c:	0801bf58 	.word	0x0801bf58

08008a60 <setToNull>:
static char const* const endofblock = "}]";

/** Set a char to '\0' and increase its pointer if the char is different to '}' or ']'.
  * @param ch Pointer to character.
  * @return  Final value pointer. */
static char* setToNull( char* ch ) {
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b082      	sub	sp, #8
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
    if ( !isOneOfThem( *ch, endofblock ) ) *ch++ = '\0';
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	781b      	ldrb	r3, [r3, #0]
 8008a6c:	4a0a      	ldr	r2, [pc, #40]	@ (8008a98 <setToNull+0x38>)
 8008a6e:	0011      	movs	r1, r2
 8008a70:	0018      	movs	r0, r3
 8008a72:	f7ff ff86 	bl	8008982 <isOneOfThem>
 8008a76:	0003      	movs	r3, r0
 8008a78:	001a      	movs	r2, r3
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	4053      	eors	r3, r2
 8008a7e:	b2db      	uxtb	r3, r3
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d004      	beq.n	8008a8e <setToNull+0x2e>
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	1c5a      	adds	r2, r3, #1
 8008a88:	607a      	str	r2, [r7, #4]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	701a      	strb	r2, [r3, #0]
    return ch;
 8008a8e:	687b      	ldr	r3, [r7, #4]
}
 8008a90:	0018      	movs	r0, r3
 8008a92:	46bd      	mov	sp, r7
 8008a94:	b002      	add	sp, #8
 8008a96:	bd80      	pop	{r7, pc}
 8008a98:	0801156c 	.word	0x0801156c

08008a9c <isEndOfPrimitive>:

/** Indicate if a character is the end of a primitive value. */
static bool isEndOfPrimitive( char ch ) {
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b082      	sub	sp, #8
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	0002      	movs	r2, r0
 8008aa4:	1dfb      	adds	r3, r7, #7
 8008aa6:	701a      	strb	r2, [r3, #0]
    return ch == ',' || isOneOfThem( ch, blank ) || isOneOfThem( ch, endofblock );
 8008aa8:	1dfb      	adds	r3, r7, #7
 8008aaa:	781b      	ldrb	r3, [r3, #0]
 8008aac:	2b2c      	cmp	r3, #44	@ 0x2c
 8008aae:	d011      	beq.n	8008ad4 <isEndOfPrimitive+0x38>
 8008ab0:	4a0e      	ldr	r2, [pc, #56]	@ (8008aec <isEndOfPrimitive+0x50>)
 8008ab2:	1dfb      	adds	r3, r7, #7
 8008ab4:	781b      	ldrb	r3, [r3, #0]
 8008ab6:	0011      	movs	r1, r2
 8008ab8:	0018      	movs	r0, r3
 8008aba:	f7ff ff62 	bl	8008982 <isOneOfThem>
 8008abe:	1e03      	subs	r3, r0, #0
 8008ac0:	d108      	bne.n	8008ad4 <isEndOfPrimitive+0x38>
 8008ac2:	4a0b      	ldr	r2, [pc, #44]	@ (8008af0 <isEndOfPrimitive+0x54>)
 8008ac4:	1dfb      	adds	r3, r7, #7
 8008ac6:	781b      	ldrb	r3, [r3, #0]
 8008ac8:	0011      	movs	r1, r2
 8008aca:	0018      	movs	r0, r3
 8008acc:	f7ff ff59 	bl	8008982 <isOneOfThem>
 8008ad0:	1e03      	subs	r3, r0, #0
 8008ad2:	d001      	beq.n	8008ad8 <isEndOfPrimitive+0x3c>
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	e000      	b.n	8008ada <isEndOfPrimitive+0x3e>
 8008ad8:	2300      	movs	r3, #0
 8008ada:	1c1a      	adds	r2, r3, #0
 8008adc:	2301      	movs	r3, #1
 8008ade:	4013      	ands	r3, r2
 8008ae0:	b2db      	uxtb	r3, r3
}
 8008ae2:	0018      	movs	r0, r3
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	b002      	add	sp, #8
 8008ae8:	bd80      	pop	{r7, pc}
 8008aea:	46c0      	nop			@ (mov r8, r8)
 8008aec:	08011564 	.word	0x08011564
 8008af0:	0801156c 	.word	0x0801156c

08008af4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8008af4:	480d      	ldr	r0, [pc, #52]	@ (8008b2c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8008af6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8008af8:	f7ff faac 	bl	8008054 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008afc:	480c      	ldr	r0, [pc, #48]	@ (8008b30 <LoopForever+0x6>)
  ldr r1, =_edata
 8008afe:	490d      	ldr	r1, [pc, #52]	@ (8008b34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8008b00:	4a0d      	ldr	r2, [pc, #52]	@ (8008b38 <LoopForever+0xe>)
  movs r3, #0
 8008b02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008b04:	e002      	b.n	8008b0c <LoopCopyDataInit>

08008b06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008b06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008b08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008b0a:	3304      	adds	r3, #4

08008b0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008b0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008b0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008b10:	d3f9      	bcc.n	8008b06 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008b12:	4a0a      	ldr	r2, [pc, #40]	@ (8008b3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8008b14:	4c0a      	ldr	r4, [pc, #40]	@ (8008b40 <LoopForever+0x16>)
  movs r3, #0
 8008b16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008b18:	e001      	b.n	8008b1e <LoopFillZerobss>

08008b1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008b1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008b1c:	3204      	adds	r2, #4

08008b1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008b1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008b20:	d3fb      	bcc.n	8008b1a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8008b22:	f006 f8bd 	bl	800eca0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8008b26:	f7fb fdd7 	bl	80046d8 <main>

08008b2a <LoopForever>:

LoopForever:
  b LoopForever
 8008b2a:	e7fe      	b.n	8008b2a <LoopForever>
  ldr   r0, =_estack
 8008b2c:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8008b30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008b34:	20000270 	.word	0x20000270
  ldr r2, =_sidata
 8008b38:	0801c2d0 	.word	0x0801c2d0
  ldr r2, =_sbss
 8008b3c:	20000270 	.word	0x20000270
  ldr r4, =_ebss
 8008b40:	20001654 	.word	0x20001654

08008b44 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008b44:	e7fe      	b.n	8008b44 <ADC1_COMP_IRQHandler>
	...

08008b48 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b082      	sub	sp, #8
 8008b4c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8008b4e:	1dfb      	adds	r3, r7, #7
 8008b50:	2200      	movs	r2, #0
 8008b52:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008b54:	4b0b      	ldr	r3, [pc, #44]	@ (8008b84 <HAL_Init+0x3c>)
 8008b56:	681a      	ldr	r2, [r3, #0]
 8008b58:	4b0a      	ldr	r3, [pc, #40]	@ (8008b84 <HAL_Init+0x3c>)
 8008b5a:	2180      	movs	r1, #128	@ 0x80
 8008b5c:	0049      	lsls	r1, r1, #1
 8008b5e:	430a      	orrs	r2, r1
 8008b60:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008b62:	2003      	movs	r0, #3
 8008b64:	f000 f810 	bl	8008b88 <HAL_InitTick>
 8008b68:	1e03      	subs	r3, r0, #0
 8008b6a:	d003      	beq.n	8008b74 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8008b6c:	1dfb      	adds	r3, r7, #7
 8008b6e:	2201      	movs	r2, #1
 8008b70:	701a      	strb	r2, [r3, #0]
 8008b72:	e001      	b.n	8008b78 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8008b74:	f7fe ff40 	bl	80079f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8008b78:	1dfb      	adds	r3, r7, #7
 8008b7a:	781b      	ldrb	r3, [r3, #0]
}
 8008b7c:	0018      	movs	r0, r3
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	b002      	add	sp, #8
 8008b82:	bd80      	pop	{r7, pc}
 8008b84:	40022000 	.word	0x40022000

08008b88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008b88:	b590      	push	{r4, r7, lr}
 8008b8a:	b085      	sub	sp, #20
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8008b90:	230f      	movs	r3, #15
 8008b92:	18fb      	adds	r3, r7, r3
 8008b94:	2200      	movs	r2, #0
 8008b96:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8008b98:	4b1d      	ldr	r3, [pc, #116]	@ (8008c10 <HAL_InitTick+0x88>)
 8008b9a:	781b      	ldrb	r3, [r3, #0]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d02b      	beq.n	8008bf8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8008ba0:	4b1c      	ldr	r3, [pc, #112]	@ (8008c14 <HAL_InitTick+0x8c>)
 8008ba2:	681c      	ldr	r4, [r3, #0]
 8008ba4:	4b1a      	ldr	r3, [pc, #104]	@ (8008c10 <HAL_InitTick+0x88>)
 8008ba6:	781b      	ldrb	r3, [r3, #0]
 8008ba8:	0019      	movs	r1, r3
 8008baa:	23fa      	movs	r3, #250	@ 0xfa
 8008bac:	0098      	lsls	r0, r3, #2
 8008bae:	f7f7 fad1 	bl	8000154 <__udivsi3>
 8008bb2:	0003      	movs	r3, r0
 8008bb4:	0019      	movs	r1, r3
 8008bb6:	0020      	movs	r0, r4
 8008bb8:	f7f7 facc 	bl	8000154 <__udivsi3>
 8008bbc:	0003      	movs	r3, r0
 8008bbe:	0018      	movs	r0, r3
 8008bc0:	f000 f953 	bl	8008e6a <HAL_SYSTICK_Config>
 8008bc4:	1e03      	subs	r3, r0, #0
 8008bc6:	d112      	bne.n	8008bee <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2b03      	cmp	r3, #3
 8008bcc:	d80a      	bhi.n	8008be4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008bce:	6879      	ldr	r1, [r7, #4]
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	425b      	negs	r3, r3
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	0018      	movs	r0, r3
 8008bd8:	f000 f922 	bl	8008e20 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8008bdc:	4b0e      	ldr	r3, [pc, #56]	@ (8008c18 <HAL_InitTick+0x90>)
 8008bde:	687a      	ldr	r2, [r7, #4]
 8008be0:	601a      	str	r2, [r3, #0]
 8008be2:	e00d      	b.n	8008c00 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8008be4:	230f      	movs	r3, #15
 8008be6:	18fb      	adds	r3, r7, r3
 8008be8:	2201      	movs	r2, #1
 8008bea:	701a      	strb	r2, [r3, #0]
 8008bec:	e008      	b.n	8008c00 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8008bee:	230f      	movs	r3, #15
 8008bf0:	18fb      	adds	r3, r7, r3
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	701a      	strb	r2, [r3, #0]
 8008bf6:	e003      	b.n	8008c00 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8008bf8:	230f      	movs	r3, #15
 8008bfa:	18fb      	adds	r3, r7, r3
 8008bfc:	2201      	movs	r2, #1
 8008bfe:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8008c00:	230f      	movs	r3, #15
 8008c02:	18fb      	adds	r3, r7, r3
 8008c04:	781b      	ldrb	r3, [r3, #0]
}
 8008c06:	0018      	movs	r0, r3
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	b005      	add	sp, #20
 8008c0c:	bd90      	pop	{r4, r7, pc}
 8008c0e:	46c0      	nop			@ (mov r8, r8)
 8008c10:	2000000c 	.word	0x2000000c
 8008c14:	20000004 	.word	0x20000004
 8008c18:	20000008 	.word	0x20000008

08008c1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8008c20:	4b05      	ldr	r3, [pc, #20]	@ (8008c38 <HAL_IncTick+0x1c>)
 8008c22:	781b      	ldrb	r3, [r3, #0]
 8008c24:	001a      	movs	r2, r3
 8008c26:	4b05      	ldr	r3, [pc, #20]	@ (8008c3c <HAL_IncTick+0x20>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	18d2      	adds	r2, r2, r3
 8008c2c:	4b03      	ldr	r3, [pc, #12]	@ (8008c3c <HAL_IncTick+0x20>)
 8008c2e:	601a      	str	r2, [r3, #0]
}
 8008c30:	46c0      	nop			@ (mov r8, r8)
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}
 8008c36:	46c0      	nop			@ (mov r8, r8)
 8008c38:	2000000c 	.word	0x2000000c
 8008c3c:	200014e8 	.word	0x200014e8

08008c40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	af00      	add	r7, sp, #0
  return uwTick;
 8008c44:	4b02      	ldr	r3, [pc, #8]	@ (8008c50 <HAL_GetTick+0x10>)
 8008c46:	681b      	ldr	r3, [r3, #0]
}
 8008c48:	0018      	movs	r0, r3
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}
 8008c4e:	46c0      	nop			@ (mov r8, r8)
 8008c50:	200014e8 	.word	0x200014e8

08008c54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b084      	sub	sp, #16
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008c5c:	f7ff fff0 	bl	8008c40 <HAL_GetTick>
 8008c60:	0003      	movs	r3, r0
 8008c62:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	3301      	adds	r3, #1
 8008c6c:	d005      	beq.n	8008c7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008c6e:	4b0a      	ldr	r3, [pc, #40]	@ (8008c98 <HAL_Delay+0x44>)
 8008c70:	781b      	ldrb	r3, [r3, #0]
 8008c72:	001a      	movs	r2, r3
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	189b      	adds	r3, r3, r2
 8008c78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008c7a:	46c0      	nop			@ (mov r8, r8)
 8008c7c:	f7ff ffe0 	bl	8008c40 <HAL_GetTick>
 8008c80:	0002      	movs	r2, r0
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	1ad3      	subs	r3, r2, r3
 8008c86:	68fa      	ldr	r2, [r7, #12]
 8008c88:	429a      	cmp	r2, r3
 8008c8a:	d8f7      	bhi.n	8008c7c <HAL_Delay+0x28>
  {
  }
}
 8008c8c:	46c0      	nop			@ (mov r8, r8)
 8008c8e:	46c0      	nop			@ (mov r8, r8)
 8008c90:	46bd      	mov	sp, r7
 8008c92:	b004      	add	sp, #16
 8008c94:	bd80      	pop	{r7, pc}
 8008c96:	46c0      	nop			@ (mov r8, r8)
 8008c98:	2000000c 	.word	0x2000000c

08008c9c <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b082      	sub	sp, #8
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8008ca4:	4b06      	ldr	r3, [pc, #24]	@ (8008cc0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	4a06      	ldr	r2, [pc, #24]	@ (8008cc4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8008caa:	4013      	ands	r3, r2
 8008cac:	0019      	movs	r1, r3
 8008cae:	4b04      	ldr	r3, [pc, #16]	@ (8008cc0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8008cb0:	687a      	ldr	r2, [r7, #4]
 8008cb2:	430a      	orrs	r2, r1
 8008cb4:	601a      	str	r2, [r3, #0]
}
 8008cb6:	46c0      	nop			@ (mov r8, r8)
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	b002      	add	sp, #8
 8008cbc:	bd80      	pop	{r7, pc}
 8008cbe:	46c0      	nop			@ (mov r8, r8)
 8008cc0:	40010000 	.word	0x40010000
 8008cc4:	fffff9ff 	.word	0xfffff9ff

08008cc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b082      	sub	sp, #8
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	0002      	movs	r2, r0
 8008cd0:	1dfb      	adds	r3, r7, #7
 8008cd2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8008cd4:	1dfb      	adds	r3, r7, #7
 8008cd6:	781b      	ldrb	r3, [r3, #0]
 8008cd8:	2b7f      	cmp	r3, #127	@ 0x7f
 8008cda:	d809      	bhi.n	8008cf0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008cdc:	1dfb      	adds	r3, r7, #7
 8008cde:	781b      	ldrb	r3, [r3, #0]
 8008ce0:	001a      	movs	r2, r3
 8008ce2:	231f      	movs	r3, #31
 8008ce4:	401a      	ands	r2, r3
 8008ce6:	4b04      	ldr	r3, [pc, #16]	@ (8008cf8 <__NVIC_EnableIRQ+0x30>)
 8008ce8:	2101      	movs	r1, #1
 8008cea:	4091      	lsls	r1, r2
 8008cec:	000a      	movs	r2, r1
 8008cee:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8008cf0:	46c0      	nop			@ (mov r8, r8)
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	b002      	add	sp, #8
 8008cf6:	bd80      	pop	{r7, pc}
 8008cf8:	e000e100 	.word	0xe000e100

08008cfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008cfc:	b590      	push	{r4, r7, lr}
 8008cfe:	b083      	sub	sp, #12
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	0002      	movs	r2, r0
 8008d04:	6039      	str	r1, [r7, #0]
 8008d06:	1dfb      	adds	r3, r7, #7
 8008d08:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8008d0a:	1dfb      	adds	r3, r7, #7
 8008d0c:	781b      	ldrb	r3, [r3, #0]
 8008d0e:	2b7f      	cmp	r3, #127	@ 0x7f
 8008d10:	d828      	bhi.n	8008d64 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008d12:	4a2f      	ldr	r2, [pc, #188]	@ (8008dd0 <__NVIC_SetPriority+0xd4>)
 8008d14:	1dfb      	adds	r3, r7, #7
 8008d16:	781b      	ldrb	r3, [r3, #0]
 8008d18:	b25b      	sxtb	r3, r3
 8008d1a:	089b      	lsrs	r3, r3, #2
 8008d1c:	33c0      	adds	r3, #192	@ 0xc0
 8008d1e:	009b      	lsls	r3, r3, #2
 8008d20:	589b      	ldr	r3, [r3, r2]
 8008d22:	1dfa      	adds	r2, r7, #7
 8008d24:	7812      	ldrb	r2, [r2, #0]
 8008d26:	0011      	movs	r1, r2
 8008d28:	2203      	movs	r2, #3
 8008d2a:	400a      	ands	r2, r1
 8008d2c:	00d2      	lsls	r2, r2, #3
 8008d2e:	21ff      	movs	r1, #255	@ 0xff
 8008d30:	4091      	lsls	r1, r2
 8008d32:	000a      	movs	r2, r1
 8008d34:	43d2      	mvns	r2, r2
 8008d36:	401a      	ands	r2, r3
 8008d38:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	019b      	lsls	r3, r3, #6
 8008d3e:	22ff      	movs	r2, #255	@ 0xff
 8008d40:	401a      	ands	r2, r3
 8008d42:	1dfb      	adds	r3, r7, #7
 8008d44:	781b      	ldrb	r3, [r3, #0]
 8008d46:	0018      	movs	r0, r3
 8008d48:	2303      	movs	r3, #3
 8008d4a:	4003      	ands	r3, r0
 8008d4c:	00db      	lsls	r3, r3, #3
 8008d4e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008d50:	481f      	ldr	r0, [pc, #124]	@ (8008dd0 <__NVIC_SetPriority+0xd4>)
 8008d52:	1dfb      	adds	r3, r7, #7
 8008d54:	781b      	ldrb	r3, [r3, #0]
 8008d56:	b25b      	sxtb	r3, r3
 8008d58:	089b      	lsrs	r3, r3, #2
 8008d5a:	430a      	orrs	r2, r1
 8008d5c:	33c0      	adds	r3, #192	@ 0xc0
 8008d5e:	009b      	lsls	r3, r3, #2
 8008d60:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8008d62:	e031      	b.n	8008dc8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008d64:	4a1b      	ldr	r2, [pc, #108]	@ (8008dd4 <__NVIC_SetPriority+0xd8>)
 8008d66:	1dfb      	adds	r3, r7, #7
 8008d68:	781b      	ldrb	r3, [r3, #0]
 8008d6a:	0019      	movs	r1, r3
 8008d6c:	230f      	movs	r3, #15
 8008d6e:	400b      	ands	r3, r1
 8008d70:	3b08      	subs	r3, #8
 8008d72:	089b      	lsrs	r3, r3, #2
 8008d74:	3306      	adds	r3, #6
 8008d76:	009b      	lsls	r3, r3, #2
 8008d78:	18d3      	adds	r3, r2, r3
 8008d7a:	3304      	adds	r3, #4
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	1dfa      	adds	r2, r7, #7
 8008d80:	7812      	ldrb	r2, [r2, #0]
 8008d82:	0011      	movs	r1, r2
 8008d84:	2203      	movs	r2, #3
 8008d86:	400a      	ands	r2, r1
 8008d88:	00d2      	lsls	r2, r2, #3
 8008d8a:	21ff      	movs	r1, #255	@ 0xff
 8008d8c:	4091      	lsls	r1, r2
 8008d8e:	000a      	movs	r2, r1
 8008d90:	43d2      	mvns	r2, r2
 8008d92:	401a      	ands	r2, r3
 8008d94:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	019b      	lsls	r3, r3, #6
 8008d9a:	22ff      	movs	r2, #255	@ 0xff
 8008d9c:	401a      	ands	r2, r3
 8008d9e:	1dfb      	adds	r3, r7, #7
 8008da0:	781b      	ldrb	r3, [r3, #0]
 8008da2:	0018      	movs	r0, r3
 8008da4:	2303      	movs	r3, #3
 8008da6:	4003      	ands	r3, r0
 8008da8:	00db      	lsls	r3, r3, #3
 8008daa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008dac:	4809      	ldr	r0, [pc, #36]	@ (8008dd4 <__NVIC_SetPriority+0xd8>)
 8008dae:	1dfb      	adds	r3, r7, #7
 8008db0:	781b      	ldrb	r3, [r3, #0]
 8008db2:	001c      	movs	r4, r3
 8008db4:	230f      	movs	r3, #15
 8008db6:	4023      	ands	r3, r4
 8008db8:	3b08      	subs	r3, #8
 8008dba:	089b      	lsrs	r3, r3, #2
 8008dbc:	430a      	orrs	r2, r1
 8008dbe:	3306      	adds	r3, #6
 8008dc0:	009b      	lsls	r3, r3, #2
 8008dc2:	18c3      	adds	r3, r0, r3
 8008dc4:	3304      	adds	r3, #4
 8008dc6:	601a      	str	r2, [r3, #0]
}
 8008dc8:	46c0      	nop			@ (mov r8, r8)
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	b003      	add	sp, #12
 8008dce:	bd90      	pop	{r4, r7, pc}
 8008dd0:	e000e100 	.word	0xe000e100
 8008dd4:	e000ed00 	.word	0xe000ed00

08008dd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b082      	sub	sp, #8
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	1e5a      	subs	r2, r3, #1
 8008de4:	2380      	movs	r3, #128	@ 0x80
 8008de6:	045b      	lsls	r3, r3, #17
 8008de8:	429a      	cmp	r2, r3
 8008dea:	d301      	bcc.n	8008df0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008dec:	2301      	movs	r3, #1
 8008dee:	e010      	b.n	8008e12 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008df0:	4b0a      	ldr	r3, [pc, #40]	@ (8008e1c <SysTick_Config+0x44>)
 8008df2:	687a      	ldr	r2, [r7, #4]
 8008df4:	3a01      	subs	r2, #1
 8008df6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008df8:	2301      	movs	r3, #1
 8008dfa:	425b      	negs	r3, r3
 8008dfc:	2103      	movs	r1, #3
 8008dfe:	0018      	movs	r0, r3
 8008e00:	f7ff ff7c 	bl	8008cfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008e04:	4b05      	ldr	r3, [pc, #20]	@ (8008e1c <SysTick_Config+0x44>)
 8008e06:	2200      	movs	r2, #0
 8008e08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008e0a:	4b04      	ldr	r3, [pc, #16]	@ (8008e1c <SysTick_Config+0x44>)
 8008e0c:	2207      	movs	r2, #7
 8008e0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008e10:	2300      	movs	r3, #0
}
 8008e12:	0018      	movs	r0, r3
 8008e14:	46bd      	mov	sp, r7
 8008e16:	b002      	add	sp, #8
 8008e18:	bd80      	pop	{r7, pc}
 8008e1a:	46c0      	nop			@ (mov r8, r8)
 8008e1c:	e000e010 	.word	0xe000e010

08008e20 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b084      	sub	sp, #16
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	60b9      	str	r1, [r7, #8]
 8008e28:	607a      	str	r2, [r7, #4]
 8008e2a:	210f      	movs	r1, #15
 8008e2c:	187b      	adds	r3, r7, r1
 8008e2e:	1c02      	adds	r2, r0, #0
 8008e30:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8008e32:	68ba      	ldr	r2, [r7, #8]
 8008e34:	187b      	adds	r3, r7, r1
 8008e36:	781b      	ldrb	r3, [r3, #0]
 8008e38:	b25b      	sxtb	r3, r3
 8008e3a:	0011      	movs	r1, r2
 8008e3c:	0018      	movs	r0, r3
 8008e3e:	f7ff ff5d 	bl	8008cfc <__NVIC_SetPriority>
}
 8008e42:	46c0      	nop			@ (mov r8, r8)
 8008e44:	46bd      	mov	sp, r7
 8008e46:	b004      	add	sp, #16
 8008e48:	bd80      	pop	{r7, pc}

08008e4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008e4a:	b580      	push	{r7, lr}
 8008e4c:	b082      	sub	sp, #8
 8008e4e:	af00      	add	r7, sp, #0
 8008e50:	0002      	movs	r2, r0
 8008e52:	1dfb      	adds	r3, r7, #7
 8008e54:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008e56:	1dfb      	adds	r3, r7, #7
 8008e58:	781b      	ldrb	r3, [r3, #0]
 8008e5a:	b25b      	sxtb	r3, r3
 8008e5c:	0018      	movs	r0, r3
 8008e5e:	f7ff ff33 	bl	8008cc8 <__NVIC_EnableIRQ>
}
 8008e62:	46c0      	nop			@ (mov r8, r8)
 8008e64:	46bd      	mov	sp, r7
 8008e66:	b002      	add	sp, #8
 8008e68:	bd80      	pop	{r7, pc}

08008e6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008e6a:	b580      	push	{r7, lr}
 8008e6c:	b082      	sub	sp, #8
 8008e6e:	af00      	add	r7, sp, #0
 8008e70:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	0018      	movs	r0, r3
 8008e76:	f7ff ffaf 	bl	8008dd8 <SysTick_Config>
 8008e7a:	0003      	movs	r3, r0
}
 8008e7c:	0018      	movs	r0, r3
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	b002      	add	sp, #8
 8008e82:	bd80      	pop	{r7, pc}

08008e84 <HAL_FLASH_Program>:
  *               TypeProgram = FLASH_TYPEPROGRAM_FAST (32-bit).
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8008e84:	b5b0      	push	{r4, r5, r7, lr}
 8008e86:	b086      	sub	sp, #24
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	60f8      	str	r0, [r7, #12]
 8008e8c:	60b9      	str	r1, [r7, #8]
 8008e8e:	603a      	str	r2, [r7, #0]
 8008e90:	607b      	str	r3, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8008e92:	4b21      	ldr	r3, [pc, #132]	@ (8008f18 <HAL_FLASH_Program+0x94>)
 8008e94:	781b      	ldrb	r3, [r3, #0]
 8008e96:	2b01      	cmp	r3, #1
 8008e98:	d101      	bne.n	8008e9e <HAL_FLASH_Program+0x1a>
 8008e9a:	2302      	movs	r3, #2
 8008e9c:	e038      	b.n	8008f10 <HAL_FLASH_Program+0x8c>
 8008e9e:	4b1e      	ldr	r3, [pc, #120]	@ (8008f18 <HAL_FLASH_Program+0x94>)
 8008ea0:	2201      	movs	r2, #1
 8008ea2:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8008ea4:	4b1c      	ldr	r3, [pc, #112]	@ (8008f18 <HAL_FLASH_Program+0x94>)
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8008eaa:	2517      	movs	r5, #23
 8008eac:	197c      	adds	r4, r7, r5
 8008eae:	23fa      	movs	r3, #250	@ 0xfa
 8008eb0:	009b      	lsls	r3, r3, #2
 8008eb2:	0018      	movs	r0, r3
 8008eb4:	f000 f87a 	bl	8008fac <FLASH_WaitForLastOperation>
 8008eb8:	0003      	movs	r3, r0
 8008eba:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8008ebc:	197b      	adds	r3, r7, r5
 8008ebe:	781b      	ldrb	r3, [r3, #0]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d11f      	bne.n	8008f04 <HAL_FLASH_Program+0x80>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	2b01      	cmp	r3, #1
 8008ec8:	d106      	bne.n	8008ed8 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8008eca:	683a      	ldr	r2, [r7, #0]
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	68b9      	ldr	r1, [r7, #8]
 8008ed0:	0008      	movs	r0, r1
 8008ed2:	f000 f8b9 	bl	8009048 <FLASH_Program_DoubleWord>
 8008ed6:	e005      	b.n	8008ee4 <HAL_FLASH_Program+0x60>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8008ed8:	683a      	ldr	r2, [r7, #0]
 8008eda:	68bb      	ldr	r3, [r7, #8]
 8008edc:	0011      	movs	r1, r2
 8008ede:	0018      	movs	r0, r3
 8008ee0:	f008 f9d2 	bl	8011288 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8008ee4:	2317      	movs	r3, #23
 8008ee6:	18fc      	adds	r4, r7, r3
 8008ee8:	23fa      	movs	r3, #250	@ 0xfa
 8008eea:	009b      	lsls	r3, r3, #2
 8008eec:	0018      	movs	r0, r3
 8008eee:	f000 f85d 	bl	8008fac <FLASH_WaitForLastOperation>
 8008ef2:	0003      	movs	r3, r0
 8008ef4:	7023      	strb	r3, [r4, #0]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8008ef6:	4b09      	ldr	r3, [pc, #36]	@ (8008f1c <HAL_FLASH_Program+0x98>)
 8008ef8:	695a      	ldr	r2, [r3, #20]
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	43d9      	mvns	r1, r3
 8008efe:	4b07      	ldr	r3, [pc, #28]	@ (8008f1c <HAL_FLASH_Program+0x98>)
 8008f00:	400a      	ands	r2, r1
 8008f02:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8008f04:	4b04      	ldr	r3, [pc, #16]	@ (8008f18 <HAL_FLASH_Program+0x94>)
 8008f06:	2200      	movs	r2, #0
 8008f08:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8008f0a:	2317      	movs	r3, #23
 8008f0c:	18fb      	adds	r3, r7, r3
 8008f0e:	781b      	ldrb	r3, [r3, #0]
}
 8008f10:	0018      	movs	r0, r3
 8008f12:	46bd      	mov	sp, r7
 8008f14:	b006      	add	sp, #24
 8008f16:	bdb0      	pop	{r4, r5, r7, pc}
 8008f18:	200014ec 	.word	0x200014ec
 8008f1c:	40022000 	.word	0x40022000

08008f20 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b082      	sub	sp, #8
 8008f24:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8008f26:	1dfb      	adds	r3, r7, #7
 8008f28:	2200      	movs	r2, #0
 8008f2a:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8008f2c:	4b0b      	ldr	r3, [pc, #44]	@ (8008f5c <HAL_FLASH_Unlock+0x3c>)
 8008f2e:	695b      	ldr	r3, [r3, #20]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	da0c      	bge.n	8008f4e <HAL_FLASH_Unlock+0x2e>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8008f34:	4b09      	ldr	r3, [pc, #36]	@ (8008f5c <HAL_FLASH_Unlock+0x3c>)
 8008f36:	4a0a      	ldr	r2, [pc, #40]	@ (8008f60 <HAL_FLASH_Unlock+0x40>)
 8008f38:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8008f3a:	4b08      	ldr	r3, [pc, #32]	@ (8008f5c <HAL_FLASH_Unlock+0x3c>)
 8008f3c:	4a09      	ldr	r2, [pc, #36]	@ (8008f64 <HAL_FLASH_Unlock+0x44>)
 8008f3e:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8008f40:	4b06      	ldr	r3, [pc, #24]	@ (8008f5c <HAL_FLASH_Unlock+0x3c>)
 8008f42:	695b      	ldr	r3, [r3, #20]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	da02      	bge.n	8008f4e <HAL_FLASH_Unlock+0x2e>
    {
      status = HAL_ERROR;
 8008f48:	1dfb      	adds	r3, r7, #7
 8008f4a:	2201      	movs	r2, #1
 8008f4c:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8008f4e:	1dfb      	adds	r3, r7, #7
 8008f50:	781b      	ldrb	r3, [r3, #0]
}
 8008f52:	0018      	movs	r0, r3
 8008f54:	46bd      	mov	sp, r7
 8008f56:	b002      	add	sp, #8
 8008f58:	bd80      	pop	{r7, pc}
 8008f5a:	46c0      	nop			@ (mov r8, r8)
 8008f5c:	40022000 	.word	0x40022000
 8008f60:	45670123 	.word	0x45670123
 8008f64:	cdef89ab 	.word	0xcdef89ab

08008f68 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b082      	sub	sp, #8
 8008f6c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8008f6e:	1dfb      	adds	r3, r7, #7
 8008f70:	2201      	movs	r2, #1
 8008f72:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  (void)FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8008f74:	23fa      	movs	r3, #250	@ 0xfa
 8008f76:	009b      	lsls	r3, r3, #2
 8008f78:	0018      	movs	r0, r3
 8008f7a:	f000 f817 	bl	8008fac <FLASH_WaitForLastOperation>

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8008f7e:	4b0a      	ldr	r3, [pc, #40]	@ (8008fa8 <HAL_FLASH_Lock+0x40>)
 8008f80:	695a      	ldr	r2, [r3, #20]
 8008f82:	4b09      	ldr	r3, [pc, #36]	@ (8008fa8 <HAL_FLASH_Lock+0x40>)
 8008f84:	2180      	movs	r1, #128	@ 0x80
 8008f86:	0609      	lsls	r1, r1, #24
 8008f88:	430a      	orrs	r2, r1
 8008f8a:	615a      	str	r2, [r3, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 8008f8c:	4b06      	ldr	r3, [pc, #24]	@ (8008fa8 <HAL_FLASH_Lock+0x40>)
 8008f8e:	695b      	ldr	r3, [r3, #20]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	da02      	bge.n	8008f9a <HAL_FLASH_Lock+0x32>
  {
    status = HAL_OK;
 8008f94:	1dfb      	adds	r3, r7, #7
 8008f96:	2200      	movs	r2, #0
 8008f98:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8008f9a:	1dfb      	adds	r3, r7, #7
 8008f9c:	781b      	ldrb	r3, [r3, #0]
}
 8008f9e:	0018      	movs	r0, r3
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	b002      	add	sp, #8
 8008fa4:	bd80      	pop	{r7, pc}
 8008fa6:	46c0      	nop			@ (mov r8, r8)
 8008fa8:	40022000 	.word	0x40022000

08008fac <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b084      	sub	sp, #16
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8008fb4:	f7ff fe44 	bl	8008c40 <HAL_GetTick>
 8008fb8:	0003      	movs	r3, r0
 8008fba:	60fb      	str	r3, [r7, #12]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

#if defined(FLASH_DBANK_SUPPORT)
  error = (FLASH_SR_BSY1 | FLASH_SR_BSY2);
 8008fbc:	23c0      	movs	r3, #192	@ 0xc0
 8008fbe:	029b      	lsls	r3, r3, #10
 8008fc0:	60bb      	str	r3, [r7, #8]
#else
  error = FLASH_SR_BSY1;
#endif /* FLASH_DBANK_SUPPORT */

  while ((FLASH->SR & error) != 0x00U)
 8008fc2:	e00c      	b.n	8008fde <FLASH_WaitForLastOperation+0x32>
  {
    if(Timeout != HAL_MAX_DELAY)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	3301      	adds	r3, #1
 8008fc8:	d009      	beq.n	8008fde <FLASH_WaitForLastOperation+0x32>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
 8008fca:	f7ff fe39 	bl	8008c40 <HAL_GetTick>
 8008fce:	0002      	movs	r2, r0
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	1ad3      	subs	r3, r2, r3
 8008fd4:	687a      	ldr	r2, [r7, #4]
 8008fd6:	429a      	cmp	r2, r3
 8008fd8:	d801      	bhi.n	8008fde <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8008fda:	2303      	movs	r3, #3
 8008fdc:	e028      	b.n	8009030 <FLASH_WaitForLastOperation+0x84>
  while ((FLASH->SR & error) != 0x00U)
 8008fde:	4b16      	ldr	r3, [pc, #88]	@ (8009038 <FLASH_WaitForLastOperation+0x8c>)
 8008fe0:	691b      	ldr	r3, [r3, #16]
 8008fe2:	68ba      	ldr	r2, [r7, #8]
 8008fe4:	4013      	ands	r3, r2
 8008fe6:	d1ed      	bne.n	8008fc4 <FLASH_WaitForLastOperation+0x18>
      }
    }
  }

  /* check flash errors */
  error = (FLASH->SR & FLASH_SR_ERRORS);
 8008fe8:	4b13      	ldr	r3, [pc, #76]	@ (8009038 <FLASH_WaitForLastOperation+0x8c>)
 8008fea:	691b      	ldr	r3, [r3, #16]
 8008fec:	4a13      	ldr	r2, [pc, #76]	@ (800903c <FLASH_WaitForLastOperation+0x90>)
 8008fee:	4013      	ands	r3, r2
 8008ff0:	60bb      	str	r3, [r7, #8]

  /* Clear SR register */
  FLASH->SR = FLASH_SR_CLEAR;
 8008ff2:	4b11      	ldr	r3, [pc, #68]	@ (8009038 <FLASH_WaitForLastOperation+0x8c>)
 8008ff4:	4a12      	ldr	r2, [pc, #72]	@ (8009040 <FLASH_WaitForLastOperation+0x94>)
 8008ff6:	611a      	str	r2, [r3, #16]

  if (error != 0x00U)
 8008ff8:	68bb      	ldr	r3, [r7, #8]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d011      	beq.n	8009022 <FLASH_WaitForLastOperation+0x76>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8008ffe:	4b11      	ldr	r3, [pc, #68]	@ (8009044 <FLASH_WaitForLastOperation+0x98>)
 8009000:	68ba      	ldr	r2, [r7, #8]
 8009002:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
 8009004:	2301      	movs	r3, #1
 8009006:	e013      	b.n	8009030 <FLASH_WaitForLastOperation+0x84>
  }

  /* Wait for control register to be written */
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
  {
    if(Timeout != HAL_MAX_DELAY)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	3301      	adds	r3, #1
 800900c:	d009      	beq.n	8009022 <FLASH_WaitForLastOperation+0x76>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
 800900e:	f7ff fe17 	bl	8008c40 <HAL_GetTick>
 8009012:	0002      	movs	r2, r0
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	1ad3      	subs	r3, r2, r3
 8009018:	687a      	ldr	r2, [r7, #4]
 800901a:	429a      	cmp	r2, r3
 800901c:	d801      	bhi.n	8009022 <FLASH_WaitForLastOperation+0x76>
      {
        return HAL_TIMEOUT;
 800901e:	2303      	movs	r3, #3
 8009020:	e006      	b.n	8009030 <FLASH_WaitForLastOperation+0x84>
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 8009022:	4b05      	ldr	r3, [pc, #20]	@ (8009038 <FLASH_WaitForLastOperation+0x8c>)
 8009024:	691a      	ldr	r2, [r3, #16]
 8009026:	2380      	movs	r3, #128	@ 0x80
 8009028:	02db      	lsls	r3, r3, #11
 800902a:	4013      	ands	r3, r2
 800902c:	d1ec      	bne.n	8009008 <FLASH_WaitForLastOperation+0x5c>
      }
    }
  }

  return HAL_OK;
 800902e:	2300      	movs	r3, #0
}
 8009030:	0018      	movs	r0, r3
 8009032:	46bd      	mov	sp, r7
 8009034:	b004      	add	sp, #16
 8009036:	bd80      	pop	{r7, pc}
 8009038:	40022000 	.word	0x40022000
 800903c:	0000c3fa 	.word	0x0000c3fa
 8009040:	0008c3fb 	.word	0x0008c3fb
 8009044:	200014ec 	.word	0x200014ec

08009048 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8009048:	b5b0      	push	{r4, r5, r7, lr}
 800904a:	b084      	sub	sp, #16
 800904c:	af00      	add	r7, sp, #0
 800904e:	60f8      	str	r0, [r7, #12]
 8009050:	603a      	str	r2, [r7, #0]
 8009052:	607b      	str	r3, [r7, #4]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8009054:	4b0b      	ldr	r3, [pc, #44]	@ (8009084 <FLASH_Program_DoubleWord+0x3c>)
 8009056:	695a      	ldr	r2, [r3, #20]
 8009058:	4b0a      	ldr	r3, [pc, #40]	@ (8009084 <FLASH_Program_DoubleWord+0x3c>)
 800905a:	2101      	movs	r1, #1
 800905c:	430a      	orrs	r2, r1
 800905e:	615a      	str	r2, [r3, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	683a      	ldr	r2, [r7, #0]
 8009064:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8009066:	f3bf 8f6f 	isb	sy
}
 800906a:	46c0      	nop			@ (mov r8, r8)
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	001c      	movs	r4, r3
 8009070:	2300      	movs	r3, #0
 8009072:	001d      	movs	r5, r3
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	3304      	adds	r3, #4
 8009078:	0022      	movs	r2, r4
 800907a:	601a      	str	r2, [r3, #0]
}
 800907c:	46c0      	nop			@ (mov r8, r8)
 800907e:	46bd      	mov	sp, r7
 8009080:	b004      	add	sp, #16
 8009082:	bdb0      	pop	{r4, r5, r7, pc}
 8009084:	40022000 	.word	0x40022000

08009088 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8009088:	b5b0      	push	{r4, r5, r7, lr}
 800908a:	b084      	sub	sp, #16
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
 8009090:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8009092:	4b33      	ldr	r3, [pc, #204]	@ (8009160 <HAL_FLASHEx_Erase+0xd8>)
 8009094:	781b      	ldrb	r3, [r3, #0]
 8009096:	2b01      	cmp	r3, #1
 8009098:	d101      	bne.n	800909e <HAL_FLASHEx_Erase+0x16>
 800909a:	2302      	movs	r3, #2
 800909c:	e05c      	b.n	8009158 <HAL_FLASHEx_Erase+0xd0>
 800909e:	4b30      	ldr	r3, [pc, #192]	@ (8009160 <HAL_FLASHEx_Erase+0xd8>)
 80090a0:	2201      	movs	r2, #1
 80090a2:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80090a4:	4b2e      	ldr	r3, [pc, #184]	@ (8009160 <HAL_FLASHEx_Erase+0xd8>)
 80090a6:	2200      	movs	r2, #0
 80090a8:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80090aa:	250f      	movs	r5, #15
 80090ac:	197c      	adds	r4, r7, r5
 80090ae:	23fa      	movs	r3, #250	@ 0xfa
 80090b0:	009b      	lsls	r3, r3, #2
 80090b2:	0018      	movs	r0, r3
 80090b4:	f7ff ff7a 	bl	8008fac <FLASH_WaitForLastOperation>
 80090b8:	0003      	movs	r3, r0
 80090ba:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80090bc:	002c      	movs	r4, r5
 80090be:	193b      	adds	r3, r7, r4
 80090c0:	781b      	ldrb	r3, [r3, #0]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d142      	bne.n	800914c <HAL_FLASHEx_Erase+0xc4>
#if !defined(FLASH_DBANK_SUPPORT)
    /* For single bank product force Banks to Bank 1 */
    pEraseInit->Banks = FLASH_BANK_1;
#endif /* FLASH_DBANK_SUPPORT */

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASS)
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	2b04      	cmp	r3, #4
 80090cc:	d10d      	bne.n	80090ea <HAL_FLASHEx_Erase+0x62>
    {
      /* Proceed to Mass Erase */
      FLASH_MassErase(pEraseInit->Banks);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	685b      	ldr	r3, [r3, #4]
 80090d2:	0018      	movs	r0, r3
 80090d4:	f000 f848 	bl	8009168 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80090d8:	193c      	adds	r4, r7, r4
 80090da:	23fa      	movs	r3, #250	@ 0xfa
 80090dc:	009b      	lsls	r3, r3, #2
 80090de:	0018      	movs	r0, r3
 80090e0:	f7ff ff64 	bl	8008fac <FLASH_WaitForLastOperation>
 80090e4:	0003      	movs	r3, r0
 80090e6:	7023      	strb	r3, [r4, #0]
 80090e8:	e030      	b.n	800914c <HAL_FLASHEx_Erase+0xc4>
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	2201      	movs	r2, #1
 80090ee:	4252      	negs	r2, r2
 80090f0:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	689b      	ldr	r3, [r3, #8]
 80090f6:	60bb      	str	r3, [r7, #8]
 80090f8:	e01a      	b.n	8009130 <HAL_FLASHEx_Erase+0xa8>
      {
        /* Start erase page */
        FLASH_PageErase(pEraseInit->Banks, index);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	685b      	ldr	r3, [r3, #4]
 80090fe:	68ba      	ldr	r2, [r7, #8]
 8009100:	0011      	movs	r1, r2
 8009102:	0018      	movs	r0, r3
 8009104:	f000 f844 	bl	8009190 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8009108:	250f      	movs	r5, #15
 800910a:	197c      	adds	r4, r7, r5
 800910c:	23fa      	movs	r3, #250	@ 0xfa
 800910e:	009b      	lsls	r3, r3, #2
 8009110:	0018      	movs	r0, r3
 8009112:	f7ff ff4b 	bl	8008fac <FLASH_WaitForLastOperation>
 8009116:	0003      	movs	r3, r0
 8009118:	7023      	strb	r3, [r4, #0]

        if (status != HAL_OK)
 800911a:	197b      	adds	r3, r7, r5
 800911c:	781b      	ldrb	r3, [r3, #0]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d003      	beq.n	800912a <HAL_FLASHEx_Erase+0xa2>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	68ba      	ldr	r2, [r7, #8]
 8009126:	601a      	str	r2, [r3, #0]
          break;
 8009128:	e00a      	b.n	8009140 <HAL_FLASHEx_Erase+0xb8>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	3301      	adds	r3, #1
 800912e:	60bb      	str	r3, [r7, #8]
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	689a      	ldr	r2, [r3, #8]
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	68db      	ldr	r3, [r3, #12]
 8009138:	18d3      	adds	r3, r2, r3
 800913a:	68ba      	ldr	r2, [r7, #8]
 800913c:	429a      	cmp	r2, r3
 800913e:	d3dc      	bcc.n	80090fa <HAL_FLASHEx_Erase+0x72>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8009140:	4b08      	ldr	r3, [pc, #32]	@ (8009164 <HAL_FLASHEx_Erase+0xdc>)
 8009142:	695a      	ldr	r2, [r3, #20]
 8009144:	4b07      	ldr	r3, [pc, #28]	@ (8009164 <HAL_FLASHEx_Erase+0xdc>)
 8009146:	2102      	movs	r1, #2
 8009148:	438a      	bics	r2, r1
 800914a:	615a      	str	r2, [r3, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800914c:	4b04      	ldr	r3, [pc, #16]	@ (8009160 <HAL_FLASHEx_Erase+0xd8>)
 800914e:	2200      	movs	r2, #0
 8009150:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8009152:	230f      	movs	r3, #15
 8009154:	18fb      	adds	r3, r7, r3
 8009156:	781b      	ldrb	r3, [r3, #0]
}
 8009158:	0018      	movs	r0, r3
 800915a:	46bd      	mov	sp, r7
 800915c:	b004      	add	sp, #16
 800915e:	bdb0      	pop	{r4, r5, r7, pc}
 8009160:	200014ec 	.word	0x200014ec
 8009164:	40022000 	.word	0x40022000

08009168 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased*
  * @note (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b082      	sub	sp, #8
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Set the Mass Erase Bit and start bit */
  FLASH->CR |= (FLASH_CR_STRT | Banks);
 8009170:	4b06      	ldr	r3, [pc, #24]	@ (800918c <FLASH_MassErase+0x24>)
 8009172:	695a      	ldr	r2, [r3, #20]
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	431a      	orrs	r2, r3
 8009178:	4b04      	ldr	r3, [pc, #16]	@ (800918c <FLASH_MassErase+0x24>)
 800917a:	2180      	movs	r1, #128	@ 0x80
 800917c:	0249      	lsls	r1, r1, #9
 800917e:	430a      	orrs	r2, r1
 8009180:	615a      	str	r2, [r3, #20]
}
 8009182:	46c0      	nop			@ (mov r8, r8)
 8009184:	46bd      	mov	sp, r7
 8009186:	b002      	add	sp, #8
 8009188:	bd80      	pop	{r7, pc}
 800918a:	46c0      	nop			@ (mov r8, r8)
 800918c:	40022000 	.word	0x40022000

08009190 <FLASH_PageErase>:
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @note (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Banks, uint32_t Page)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b084      	sub	sp, #16
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
 8009198:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_FLASH_PAGE(Page));

  /* Get configuration register, then clear page number */
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 800919a:	4b0f      	ldr	r3, [pc, #60]	@ (80091d8 <FLASH_PageErase+0x48>)
 800919c:	695b      	ldr	r3, [r3, #20]
 800919e:	4a0f      	ldr	r2, [pc, #60]	@ (80091dc <FLASH_PageErase+0x4c>)
 80091a0:	4013      	ands	r3, r2
 80091a2:	60fb      	str	r3, [r7, #12]

#if defined(FLASH_DBANK_SUPPORT)
  /* Check if page has to be erased in bank 1 or 2 */
  if (Banks != FLASH_BANK_1)
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2b04      	cmp	r3, #4
 80091a8:	d005      	beq.n	80091b6 <FLASH_PageErase+0x26>
  {
    tmp |= FLASH_CR_BKER;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	2280      	movs	r2, #128	@ 0x80
 80091ae:	0192      	lsls	r2, r2, #6
 80091b0:	4313      	orrs	r3, r2
 80091b2:	60fb      	str	r3, [r7, #12]
 80091b4:	e003      	b.n	80091be <FLASH_PageErase+0x2e>
  }
  else
  {
    tmp &= ~FLASH_CR_BKER;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	4a09      	ldr	r2, [pc, #36]	@ (80091e0 <FLASH_PageErase+0x50>)
 80091ba:	4013      	ands	r3, r2
 80091bc:	60fb      	str	r3, [r7, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_DBANK_SUPPORT */

  /* Set page number, Page Erase bit & Start bit */
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	00da      	lsls	r2, r3, #3
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	431a      	orrs	r2, r3
 80091c6:	4b04      	ldr	r3, [pc, #16]	@ (80091d8 <FLASH_PageErase+0x48>)
 80091c8:	4906      	ldr	r1, [pc, #24]	@ (80091e4 <FLASH_PageErase+0x54>)
 80091ca:	430a      	orrs	r2, r1
 80091cc:	615a      	str	r2, [r3, #20]
}
 80091ce:	46c0      	nop			@ (mov r8, r8)
 80091d0:	46bd      	mov	sp, r7
 80091d2:	b004      	add	sp, #16
 80091d4:	bd80      	pop	{r7, pc}
 80091d6:	46c0      	nop			@ (mov r8, r8)
 80091d8:	40022000 	.word	0x40022000
 80091dc:	ffffe007 	.word	0xffffe007
 80091e0:	ffffdfff 	.word	0xffffdfff
 80091e4:	00010002 	.word	0x00010002

080091e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b086      	sub	sp, #24
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
 80091f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80091f2:	2300      	movs	r3, #0
 80091f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80091f6:	e14d      	b.n	8009494 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	2101      	movs	r1, #1
 80091fe:	697a      	ldr	r2, [r7, #20]
 8009200:	4091      	lsls	r1, r2
 8009202:	000a      	movs	r2, r1
 8009204:	4013      	ands	r3, r2
 8009206:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d100      	bne.n	8009210 <HAL_GPIO_Init+0x28>
 800920e:	e13e      	b.n	800948e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	685b      	ldr	r3, [r3, #4]
 8009214:	2203      	movs	r2, #3
 8009216:	4013      	ands	r3, r2
 8009218:	2b01      	cmp	r3, #1
 800921a:	d005      	beq.n	8009228 <HAL_GPIO_Init+0x40>
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	685b      	ldr	r3, [r3, #4]
 8009220:	2203      	movs	r2, #3
 8009222:	4013      	ands	r3, r2
 8009224:	2b02      	cmp	r3, #2
 8009226:	d130      	bne.n	800928a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	689b      	ldr	r3, [r3, #8]
 800922c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800922e:	697b      	ldr	r3, [r7, #20]
 8009230:	005b      	lsls	r3, r3, #1
 8009232:	2203      	movs	r2, #3
 8009234:	409a      	lsls	r2, r3
 8009236:	0013      	movs	r3, r2
 8009238:	43da      	mvns	r2, r3
 800923a:	693b      	ldr	r3, [r7, #16]
 800923c:	4013      	ands	r3, r2
 800923e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	68da      	ldr	r2, [r3, #12]
 8009244:	697b      	ldr	r3, [r7, #20]
 8009246:	005b      	lsls	r3, r3, #1
 8009248:	409a      	lsls	r2, r3
 800924a:	0013      	movs	r3, r2
 800924c:	693a      	ldr	r2, [r7, #16]
 800924e:	4313      	orrs	r3, r2
 8009250:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	693a      	ldr	r2, [r7, #16]
 8009256:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	685b      	ldr	r3, [r3, #4]
 800925c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800925e:	2201      	movs	r2, #1
 8009260:	697b      	ldr	r3, [r7, #20]
 8009262:	409a      	lsls	r2, r3
 8009264:	0013      	movs	r3, r2
 8009266:	43da      	mvns	r2, r3
 8009268:	693b      	ldr	r3, [r7, #16]
 800926a:	4013      	ands	r3, r2
 800926c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	685b      	ldr	r3, [r3, #4]
 8009272:	091b      	lsrs	r3, r3, #4
 8009274:	2201      	movs	r2, #1
 8009276:	401a      	ands	r2, r3
 8009278:	697b      	ldr	r3, [r7, #20]
 800927a:	409a      	lsls	r2, r3
 800927c:	0013      	movs	r3, r2
 800927e:	693a      	ldr	r2, [r7, #16]
 8009280:	4313      	orrs	r3, r2
 8009282:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	693a      	ldr	r2, [r7, #16]
 8009288:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	685b      	ldr	r3, [r3, #4]
 800928e:	2203      	movs	r2, #3
 8009290:	4013      	ands	r3, r2
 8009292:	2b03      	cmp	r3, #3
 8009294:	d017      	beq.n	80092c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	68db      	ldr	r3, [r3, #12]
 800929a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800929c:	697b      	ldr	r3, [r7, #20]
 800929e:	005b      	lsls	r3, r3, #1
 80092a0:	2203      	movs	r2, #3
 80092a2:	409a      	lsls	r2, r3
 80092a4:	0013      	movs	r3, r2
 80092a6:	43da      	mvns	r2, r3
 80092a8:	693b      	ldr	r3, [r7, #16]
 80092aa:	4013      	ands	r3, r2
 80092ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	689a      	ldr	r2, [r3, #8]
 80092b2:	697b      	ldr	r3, [r7, #20]
 80092b4:	005b      	lsls	r3, r3, #1
 80092b6:	409a      	lsls	r2, r3
 80092b8:	0013      	movs	r3, r2
 80092ba:	693a      	ldr	r2, [r7, #16]
 80092bc:	4313      	orrs	r3, r2
 80092be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	693a      	ldr	r2, [r7, #16]
 80092c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	685b      	ldr	r3, [r3, #4]
 80092ca:	2203      	movs	r2, #3
 80092cc:	4013      	ands	r3, r2
 80092ce:	2b02      	cmp	r3, #2
 80092d0:	d123      	bne.n	800931a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80092d2:	697b      	ldr	r3, [r7, #20]
 80092d4:	08da      	lsrs	r2, r3, #3
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	3208      	adds	r2, #8
 80092da:	0092      	lsls	r2, r2, #2
 80092dc:	58d3      	ldr	r3, [r2, r3]
 80092de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80092e0:	697b      	ldr	r3, [r7, #20]
 80092e2:	2207      	movs	r2, #7
 80092e4:	4013      	ands	r3, r2
 80092e6:	009b      	lsls	r3, r3, #2
 80092e8:	220f      	movs	r2, #15
 80092ea:	409a      	lsls	r2, r3
 80092ec:	0013      	movs	r3, r2
 80092ee:	43da      	mvns	r2, r3
 80092f0:	693b      	ldr	r3, [r7, #16]
 80092f2:	4013      	ands	r3, r2
 80092f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	691a      	ldr	r2, [r3, #16]
 80092fa:	697b      	ldr	r3, [r7, #20]
 80092fc:	2107      	movs	r1, #7
 80092fe:	400b      	ands	r3, r1
 8009300:	009b      	lsls	r3, r3, #2
 8009302:	409a      	lsls	r2, r3
 8009304:	0013      	movs	r3, r2
 8009306:	693a      	ldr	r2, [r7, #16]
 8009308:	4313      	orrs	r3, r2
 800930a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800930c:	697b      	ldr	r3, [r7, #20]
 800930e:	08da      	lsrs	r2, r3, #3
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	3208      	adds	r2, #8
 8009314:	0092      	lsls	r2, r2, #2
 8009316:	6939      	ldr	r1, [r7, #16]
 8009318:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8009320:	697b      	ldr	r3, [r7, #20]
 8009322:	005b      	lsls	r3, r3, #1
 8009324:	2203      	movs	r2, #3
 8009326:	409a      	lsls	r2, r3
 8009328:	0013      	movs	r3, r2
 800932a:	43da      	mvns	r2, r3
 800932c:	693b      	ldr	r3, [r7, #16]
 800932e:	4013      	ands	r3, r2
 8009330:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	685b      	ldr	r3, [r3, #4]
 8009336:	2203      	movs	r2, #3
 8009338:	401a      	ands	r2, r3
 800933a:	697b      	ldr	r3, [r7, #20]
 800933c:	005b      	lsls	r3, r3, #1
 800933e:	409a      	lsls	r2, r3
 8009340:	0013      	movs	r3, r2
 8009342:	693a      	ldr	r2, [r7, #16]
 8009344:	4313      	orrs	r3, r2
 8009346:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	693a      	ldr	r2, [r7, #16]
 800934c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	685a      	ldr	r2, [r3, #4]
 8009352:	23c0      	movs	r3, #192	@ 0xc0
 8009354:	029b      	lsls	r3, r3, #10
 8009356:	4013      	ands	r3, r2
 8009358:	d100      	bne.n	800935c <HAL_GPIO_Init+0x174>
 800935a:	e098      	b.n	800948e <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800935c:	4a53      	ldr	r2, [pc, #332]	@ (80094ac <HAL_GPIO_Init+0x2c4>)
 800935e:	697b      	ldr	r3, [r7, #20]
 8009360:	089b      	lsrs	r3, r3, #2
 8009362:	3318      	adds	r3, #24
 8009364:	009b      	lsls	r3, r3, #2
 8009366:	589b      	ldr	r3, [r3, r2]
 8009368:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	2203      	movs	r2, #3
 800936e:	4013      	ands	r3, r2
 8009370:	00db      	lsls	r3, r3, #3
 8009372:	220f      	movs	r2, #15
 8009374:	409a      	lsls	r2, r3
 8009376:	0013      	movs	r3, r2
 8009378:	43da      	mvns	r2, r3
 800937a:	693b      	ldr	r3, [r7, #16]
 800937c:	4013      	ands	r3, r2
 800937e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8009380:	687a      	ldr	r2, [r7, #4]
 8009382:	23a0      	movs	r3, #160	@ 0xa0
 8009384:	05db      	lsls	r3, r3, #23
 8009386:	429a      	cmp	r2, r3
 8009388:	d019      	beq.n	80093be <HAL_GPIO_Init+0x1d6>
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	4a48      	ldr	r2, [pc, #288]	@ (80094b0 <HAL_GPIO_Init+0x2c8>)
 800938e:	4293      	cmp	r3, r2
 8009390:	d013      	beq.n	80093ba <HAL_GPIO_Init+0x1d2>
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	4a47      	ldr	r2, [pc, #284]	@ (80094b4 <HAL_GPIO_Init+0x2cc>)
 8009396:	4293      	cmp	r3, r2
 8009398:	d00d      	beq.n	80093b6 <HAL_GPIO_Init+0x1ce>
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	4a46      	ldr	r2, [pc, #280]	@ (80094b8 <HAL_GPIO_Init+0x2d0>)
 800939e:	4293      	cmp	r3, r2
 80093a0:	d007      	beq.n	80093b2 <HAL_GPIO_Init+0x1ca>
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	4a45      	ldr	r2, [pc, #276]	@ (80094bc <HAL_GPIO_Init+0x2d4>)
 80093a6:	4293      	cmp	r3, r2
 80093a8:	d101      	bne.n	80093ae <HAL_GPIO_Init+0x1c6>
 80093aa:	2304      	movs	r3, #4
 80093ac:	e008      	b.n	80093c0 <HAL_GPIO_Init+0x1d8>
 80093ae:	2305      	movs	r3, #5
 80093b0:	e006      	b.n	80093c0 <HAL_GPIO_Init+0x1d8>
 80093b2:	2303      	movs	r3, #3
 80093b4:	e004      	b.n	80093c0 <HAL_GPIO_Init+0x1d8>
 80093b6:	2302      	movs	r3, #2
 80093b8:	e002      	b.n	80093c0 <HAL_GPIO_Init+0x1d8>
 80093ba:	2301      	movs	r3, #1
 80093bc:	e000      	b.n	80093c0 <HAL_GPIO_Init+0x1d8>
 80093be:	2300      	movs	r3, #0
 80093c0:	697a      	ldr	r2, [r7, #20]
 80093c2:	2103      	movs	r1, #3
 80093c4:	400a      	ands	r2, r1
 80093c6:	00d2      	lsls	r2, r2, #3
 80093c8:	4093      	lsls	r3, r2
 80093ca:	693a      	ldr	r2, [r7, #16]
 80093cc:	4313      	orrs	r3, r2
 80093ce:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80093d0:	4936      	ldr	r1, [pc, #216]	@ (80094ac <HAL_GPIO_Init+0x2c4>)
 80093d2:	697b      	ldr	r3, [r7, #20]
 80093d4:	089b      	lsrs	r3, r3, #2
 80093d6:	3318      	adds	r3, #24
 80093d8:	009b      	lsls	r3, r3, #2
 80093da:	693a      	ldr	r2, [r7, #16]
 80093dc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80093de:	4b33      	ldr	r3, [pc, #204]	@ (80094ac <HAL_GPIO_Init+0x2c4>)
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	43da      	mvns	r2, r3
 80093e8:	693b      	ldr	r3, [r7, #16]
 80093ea:	4013      	ands	r3, r2
 80093ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	685a      	ldr	r2, [r3, #4]
 80093f2:	2380      	movs	r3, #128	@ 0x80
 80093f4:	035b      	lsls	r3, r3, #13
 80093f6:	4013      	ands	r3, r2
 80093f8:	d003      	beq.n	8009402 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80093fa:	693a      	ldr	r2, [r7, #16]
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	4313      	orrs	r3, r2
 8009400:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8009402:	4b2a      	ldr	r3, [pc, #168]	@ (80094ac <HAL_GPIO_Init+0x2c4>)
 8009404:	693a      	ldr	r2, [r7, #16]
 8009406:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8009408:	4b28      	ldr	r3, [pc, #160]	@ (80094ac <HAL_GPIO_Init+0x2c4>)
 800940a:	685b      	ldr	r3, [r3, #4]
 800940c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	43da      	mvns	r2, r3
 8009412:	693b      	ldr	r3, [r7, #16]
 8009414:	4013      	ands	r3, r2
 8009416:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	685a      	ldr	r2, [r3, #4]
 800941c:	2380      	movs	r3, #128	@ 0x80
 800941e:	039b      	lsls	r3, r3, #14
 8009420:	4013      	ands	r3, r2
 8009422:	d003      	beq.n	800942c <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8009424:	693a      	ldr	r2, [r7, #16]
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	4313      	orrs	r3, r2
 800942a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800942c:	4b1f      	ldr	r3, [pc, #124]	@ (80094ac <HAL_GPIO_Init+0x2c4>)
 800942e:	693a      	ldr	r2, [r7, #16]
 8009430:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8009432:	4a1e      	ldr	r2, [pc, #120]	@ (80094ac <HAL_GPIO_Init+0x2c4>)
 8009434:	2384      	movs	r3, #132	@ 0x84
 8009436:	58d3      	ldr	r3, [r2, r3]
 8009438:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	43da      	mvns	r2, r3
 800943e:	693b      	ldr	r3, [r7, #16]
 8009440:	4013      	ands	r3, r2
 8009442:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	685a      	ldr	r2, [r3, #4]
 8009448:	2380      	movs	r3, #128	@ 0x80
 800944a:	029b      	lsls	r3, r3, #10
 800944c:	4013      	ands	r3, r2
 800944e:	d003      	beq.n	8009458 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8009450:	693a      	ldr	r2, [r7, #16]
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	4313      	orrs	r3, r2
 8009456:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8009458:	4914      	ldr	r1, [pc, #80]	@ (80094ac <HAL_GPIO_Init+0x2c4>)
 800945a:	2284      	movs	r2, #132	@ 0x84
 800945c:	693b      	ldr	r3, [r7, #16]
 800945e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8009460:	4a12      	ldr	r2, [pc, #72]	@ (80094ac <HAL_GPIO_Init+0x2c4>)
 8009462:	2380      	movs	r3, #128	@ 0x80
 8009464:	58d3      	ldr	r3, [r2, r3]
 8009466:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	43da      	mvns	r2, r3
 800946c:	693b      	ldr	r3, [r7, #16]
 800946e:	4013      	ands	r3, r2
 8009470:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	685a      	ldr	r2, [r3, #4]
 8009476:	2380      	movs	r3, #128	@ 0x80
 8009478:	025b      	lsls	r3, r3, #9
 800947a:	4013      	ands	r3, r2
 800947c:	d003      	beq.n	8009486 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800947e:	693a      	ldr	r2, [r7, #16]
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	4313      	orrs	r3, r2
 8009484:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8009486:	4909      	ldr	r1, [pc, #36]	@ (80094ac <HAL_GPIO_Init+0x2c4>)
 8009488:	2280      	movs	r2, #128	@ 0x80
 800948a:	693b      	ldr	r3, [r7, #16]
 800948c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800948e:	697b      	ldr	r3, [r7, #20]
 8009490:	3301      	adds	r3, #1
 8009492:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	681a      	ldr	r2, [r3, #0]
 8009498:	697b      	ldr	r3, [r7, #20]
 800949a:	40da      	lsrs	r2, r3
 800949c:	1e13      	subs	r3, r2, #0
 800949e:	d000      	beq.n	80094a2 <HAL_GPIO_Init+0x2ba>
 80094a0:	e6aa      	b.n	80091f8 <HAL_GPIO_Init+0x10>
  }
}
 80094a2:	46c0      	nop			@ (mov r8, r8)
 80094a4:	46c0      	nop			@ (mov r8, r8)
 80094a6:	46bd      	mov	sp, r7
 80094a8:	b006      	add	sp, #24
 80094aa:	bd80      	pop	{r7, pc}
 80094ac:	40021800 	.word	0x40021800
 80094b0:	50000400 	.word	0x50000400
 80094b4:	50000800 	.word	0x50000800
 80094b8:	50000c00 	.word	0x50000c00
 80094bc:	50001000 	.word	0x50001000

080094c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b084      	sub	sp, #16
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
 80094c8:	000a      	movs	r2, r1
 80094ca:	1cbb      	adds	r3, r7, #2
 80094cc:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	691b      	ldr	r3, [r3, #16]
 80094d2:	1cba      	adds	r2, r7, #2
 80094d4:	8812      	ldrh	r2, [r2, #0]
 80094d6:	4013      	ands	r3, r2
 80094d8:	d004      	beq.n	80094e4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80094da:	230f      	movs	r3, #15
 80094dc:	18fb      	adds	r3, r7, r3
 80094de:	2201      	movs	r2, #1
 80094e0:	701a      	strb	r2, [r3, #0]
 80094e2:	e003      	b.n	80094ec <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80094e4:	230f      	movs	r3, #15
 80094e6:	18fb      	adds	r3, r7, r3
 80094e8:	2200      	movs	r2, #0
 80094ea:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80094ec:	230f      	movs	r3, #15
 80094ee:	18fb      	adds	r3, r7, r3
 80094f0:	781b      	ldrb	r3, [r3, #0]
}
 80094f2:	0018      	movs	r0, r3
 80094f4:	46bd      	mov	sp, r7
 80094f6:	b004      	add	sp, #16
 80094f8:	bd80      	pop	{r7, pc}

080094fa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80094fa:	b580      	push	{r7, lr}
 80094fc:	b082      	sub	sp, #8
 80094fe:	af00      	add	r7, sp, #0
 8009500:	6078      	str	r0, [r7, #4]
 8009502:	0008      	movs	r0, r1
 8009504:	0011      	movs	r1, r2
 8009506:	1cbb      	adds	r3, r7, #2
 8009508:	1c02      	adds	r2, r0, #0
 800950a:	801a      	strh	r2, [r3, #0]
 800950c:	1c7b      	adds	r3, r7, #1
 800950e:	1c0a      	adds	r2, r1, #0
 8009510:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009512:	1c7b      	adds	r3, r7, #1
 8009514:	781b      	ldrb	r3, [r3, #0]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d004      	beq.n	8009524 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800951a:	1cbb      	adds	r3, r7, #2
 800951c:	881a      	ldrh	r2, [r3, #0]
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8009522:	e003      	b.n	800952c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8009524:	1cbb      	adds	r3, r7, #2
 8009526:	881a      	ldrh	r2, [r3, #0]
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800952c:	46c0      	nop			@ (mov r8, r8)
 800952e:	46bd      	mov	sp, r7
 8009530:	b002      	add	sp, #8
 8009532:	bd80      	pop	{r7, pc}

08009534 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b082      	sub	sp, #8
 8009538:	af00      	add	r7, sp, #0
 800953a:	0002      	movs	r2, r0
 800953c:	1dbb      	adds	r3, r7, #6
 800953e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8009540:	4b10      	ldr	r3, [pc, #64]	@ (8009584 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8009542:	68db      	ldr	r3, [r3, #12]
 8009544:	1dba      	adds	r2, r7, #6
 8009546:	8812      	ldrh	r2, [r2, #0]
 8009548:	4013      	ands	r3, r2
 800954a:	d008      	beq.n	800955e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800954c:	4b0d      	ldr	r3, [pc, #52]	@ (8009584 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800954e:	1dba      	adds	r2, r7, #6
 8009550:	8812      	ldrh	r2, [r2, #0]
 8009552:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8009554:	1dbb      	adds	r3, r7, #6
 8009556:	881b      	ldrh	r3, [r3, #0]
 8009558:	0018      	movs	r0, r3
 800955a:	f7fc f9ef 	bl	800593c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 800955e:	4b09      	ldr	r3, [pc, #36]	@ (8009584 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8009560:	691b      	ldr	r3, [r3, #16]
 8009562:	1dba      	adds	r2, r7, #6
 8009564:	8812      	ldrh	r2, [r2, #0]
 8009566:	4013      	ands	r3, r2
 8009568:	d008      	beq.n	800957c <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800956a:	4b06      	ldr	r3, [pc, #24]	@ (8009584 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800956c:	1dba      	adds	r2, r7, #6
 800956e:	8812      	ldrh	r2, [r2, #0]
 8009570:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8009572:	1dbb      	adds	r3, r7, #6
 8009574:	881b      	ldrh	r3, [r3, #0]
 8009576:	0018      	movs	r0, r3
 8009578:	f000 f806 	bl	8009588 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800957c:	46c0      	nop			@ (mov r8, r8)
 800957e:	46bd      	mov	sp, r7
 8009580:	b002      	add	sp, #8
 8009582:	bd80      	pop	{r7, pc}
 8009584:	40021800 	.word	0x40021800

08009588 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b082      	sub	sp, #8
 800958c:	af00      	add	r7, sp, #0
 800958e:	0002      	movs	r2, r0
 8009590:	1dbb      	adds	r3, r7, #6
 8009592:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8009594:	46c0      	nop			@ (mov r8, r8)
 8009596:	46bd      	mov	sp, r7
 8009598:	b002      	add	sp, #8
 800959a:	bd80      	pop	{r7, pc}

0800959c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b082      	sub	sp, #8
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d101      	bne.n	80095ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80095aa:	2301      	movs	r3, #1
 80095ac:	e08f      	b.n	80096ce <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2241      	movs	r2, #65	@ 0x41
 80095b2:	5c9b      	ldrb	r3, [r3, r2]
 80095b4:	b2db      	uxtb	r3, r3
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d107      	bne.n	80095ca <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2240      	movs	r2, #64	@ 0x40
 80095be:	2100      	movs	r1, #0
 80095c0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	0018      	movs	r0, r3
 80095c6:	f7fe fa3f 	bl	8007a48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2241      	movs	r2, #65	@ 0x41
 80095ce:	2124      	movs	r1, #36	@ 0x24
 80095d0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	681a      	ldr	r2, [r3, #0]
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	2101      	movs	r1, #1
 80095de:	438a      	bics	r2, r1
 80095e0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	685a      	ldr	r2, [r3, #4]
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	493b      	ldr	r1, [pc, #236]	@ (80096d8 <HAL_I2C_Init+0x13c>)
 80095ec:	400a      	ands	r2, r1
 80095ee:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	689a      	ldr	r2, [r3, #8]
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	4938      	ldr	r1, [pc, #224]	@ (80096dc <HAL_I2C_Init+0x140>)
 80095fc:	400a      	ands	r2, r1
 80095fe:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	68db      	ldr	r3, [r3, #12]
 8009604:	2b01      	cmp	r3, #1
 8009606:	d108      	bne.n	800961a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	689a      	ldr	r2, [r3, #8]
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	2180      	movs	r1, #128	@ 0x80
 8009612:	0209      	lsls	r1, r1, #8
 8009614:	430a      	orrs	r2, r1
 8009616:	609a      	str	r2, [r3, #8]
 8009618:	e007      	b.n	800962a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	689a      	ldr	r2, [r3, #8]
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	2184      	movs	r1, #132	@ 0x84
 8009624:	0209      	lsls	r1, r1, #8
 8009626:	430a      	orrs	r2, r1
 8009628:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	68db      	ldr	r3, [r3, #12]
 800962e:	2b02      	cmp	r3, #2
 8009630:	d109      	bne.n	8009646 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	685a      	ldr	r2, [r3, #4]
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	2180      	movs	r1, #128	@ 0x80
 800963e:	0109      	lsls	r1, r1, #4
 8009640:	430a      	orrs	r2, r1
 8009642:	605a      	str	r2, [r3, #4]
 8009644:	e007      	b.n	8009656 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	685a      	ldr	r2, [r3, #4]
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	4923      	ldr	r1, [pc, #140]	@ (80096e0 <HAL_I2C_Init+0x144>)
 8009652:	400a      	ands	r2, r1
 8009654:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	685a      	ldr	r2, [r3, #4]
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	4920      	ldr	r1, [pc, #128]	@ (80096e4 <HAL_I2C_Init+0x148>)
 8009662:	430a      	orrs	r2, r1
 8009664:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	68da      	ldr	r2, [r3, #12]
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	491a      	ldr	r1, [pc, #104]	@ (80096dc <HAL_I2C_Init+0x140>)
 8009672:	400a      	ands	r2, r1
 8009674:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	691a      	ldr	r2, [r3, #16]
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	695b      	ldr	r3, [r3, #20]
 800967e:	431a      	orrs	r2, r3
 8009680:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	699b      	ldr	r3, [r3, #24]
 8009686:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	430a      	orrs	r2, r1
 800968e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	69d9      	ldr	r1, [r3, #28]
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	6a1a      	ldr	r2, [r3, #32]
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	430a      	orrs	r2, r1
 800969e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	681a      	ldr	r2, [r3, #0]
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	2101      	movs	r1, #1
 80096ac:	430a      	orrs	r2, r1
 80096ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2200      	movs	r2, #0
 80096b4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	2241      	movs	r2, #65	@ 0x41
 80096ba:	2120      	movs	r1, #32
 80096bc:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2200      	movs	r2, #0
 80096c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2242      	movs	r2, #66	@ 0x42
 80096c8:	2100      	movs	r1, #0
 80096ca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80096cc:	2300      	movs	r3, #0
}
 80096ce:	0018      	movs	r0, r3
 80096d0:	46bd      	mov	sp, r7
 80096d2:	b002      	add	sp, #8
 80096d4:	bd80      	pop	{r7, pc}
 80096d6:	46c0      	nop			@ (mov r8, r8)
 80096d8:	f0ffffff 	.word	0xf0ffffff
 80096dc:	ffff7fff 	.word	0xffff7fff
 80096e0:	fffff7ff 	.word	0xfffff7ff
 80096e4:	02008000 	.word	0x02008000

080096e8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80096e8:	b590      	push	{r4, r7, lr}
 80096ea:	b089      	sub	sp, #36	@ 0x24
 80096ec:	af02      	add	r7, sp, #8
 80096ee:	60f8      	str	r0, [r7, #12]
 80096f0:	0008      	movs	r0, r1
 80096f2:	607a      	str	r2, [r7, #4]
 80096f4:	0019      	movs	r1, r3
 80096f6:	230a      	movs	r3, #10
 80096f8:	18fb      	adds	r3, r7, r3
 80096fa:	1c02      	adds	r2, r0, #0
 80096fc:	801a      	strh	r2, [r3, #0]
 80096fe:	2308      	movs	r3, #8
 8009700:	18fb      	adds	r3, r7, r3
 8009702:	1c0a      	adds	r2, r1, #0
 8009704:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	2241      	movs	r2, #65	@ 0x41
 800970a:	5c9b      	ldrb	r3, [r3, r2]
 800970c:	b2db      	uxtb	r3, r3
 800970e:	2b20      	cmp	r3, #32
 8009710:	d000      	beq.n	8009714 <HAL_I2C_Master_Transmit+0x2c>
 8009712:	e10a      	b.n	800992a <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	2240      	movs	r2, #64	@ 0x40
 8009718:	5c9b      	ldrb	r3, [r3, r2]
 800971a:	2b01      	cmp	r3, #1
 800971c:	d101      	bne.n	8009722 <HAL_I2C_Master_Transmit+0x3a>
 800971e:	2302      	movs	r3, #2
 8009720:	e104      	b.n	800992c <HAL_I2C_Master_Transmit+0x244>
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	2240      	movs	r2, #64	@ 0x40
 8009726:	2101      	movs	r1, #1
 8009728:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800972a:	f7ff fa89 	bl	8008c40 <HAL_GetTick>
 800972e:	0003      	movs	r3, r0
 8009730:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009732:	2380      	movs	r3, #128	@ 0x80
 8009734:	0219      	lsls	r1, r3, #8
 8009736:	68f8      	ldr	r0, [r7, #12]
 8009738:	693b      	ldr	r3, [r7, #16]
 800973a:	9300      	str	r3, [sp, #0]
 800973c:	2319      	movs	r3, #25
 800973e:	2201      	movs	r2, #1
 8009740:	f000 fa26 	bl	8009b90 <I2C_WaitOnFlagUntilTimeout>
 8009744:	1e03      	subs	r3, r0, #0
 8009746:	d001      	beq.n	800974c <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8009748:	2301      	movs	r3, #1
 800974a:	e0ef      	b.n	800992c <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	2241      	movs	r2, #65	@ 0x41
 8009750:	2121      	movs	r1, #33	@ 0x21
 8009752:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	2242      	movs	r2, #66	@ 0x42
 8009758:	2110      	movs	r1, #16
 800975a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	2200      	movs	r2, #0
 8009760:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	687a      	ldr	r2, [r7, #4]
 8009766:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	2208      	movs	r2, #8
 800976c:	18ba      	adds	r2, r7, r2
 800976e:	8812      	ldrh	r2, [r2, #0]
 8009770:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	2200      	movs	r2, #0
 8009776:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800977c:	b29b      	uxth	r3, r3
 800977e:	2bff      	cmp	r3, #255	@ 0xff
 8009780:	d906      	bls.n	8009790 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	22ff      	movs	r2, #255	@ 0xff
 8009786:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8009788:	2380      	movs	r3, #128	@ 0x80
 800978a:	045b      	lsls	r3, r3, #17
 800978c:	617b      	str	r3, [r7, #20]
 800978e:	e007      	b.n	80097a0 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009794:	b29a      	uxth	r2, r3
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800979a:	2380      	movs	r3, #128	@ 0x80
 800979c:	049b      	lsls	r3, r3, #18
 800979e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d027      	beq.n	80097f8 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097ac:	781a      	ldrb	r2, [r3, #0]
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097b8:	1c5a      	adds	r2, r3, #1
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80097c2:	b29b      	uxth	r3, r3
 80097c4:	3b01      	subs	r3, #1
 80097c6:	b29a      	uxth	r2, r3
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80097d0:	3b01      	subs	r3, #1
 80097d2:	b29a      	uxth	r2, r3
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80097dc:	b2db      	uxtb	r3, r3
 80097de:	3301      	adds	r3, #1
 80097e0:	b2da      	uxtb	r2, r3
 80097e2:	697c      	ldr	r4, [r7, #20]
 80097e4:	230a      	movs	r3, #10
 80097e6:	18fb      	adds	r3, r7, r3
 80097e8:	8819      	ldrh	r1, [r3, #0]
 80097ea:	68f8      	ldr	r0, [r7, #12]
 80097ec:	4b51      	ldr	r3, [pc, #324]	@ (8009934 <HAL_I2C_Master_Transmit+0x24c>)
 80097ee:	9300      	str	r3, [sp, #0]
 80097f0:	0023      	movs	r3, r4
 80097f2:	f000 fc45 	bl	800a080 <I2C_TransferConfig>
 80097f6:	e06f      	b.n	80098d8 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80097fc:	b2da      	uxtb	r2, r3
 80097fe:	697c      	ldr	r4, [r7, #20]
 8009800:	230a      	movs	r3, #10
 8009802:	18fb      	adds	r3, r7, r3
 8009804:	8819      	ldrh	r1, [r3, #0]
 8009806:	68f8      	ldr	r0, [r7, #12]
 8009808:	4b4a      	ldr	r3, [pc, #296]	@ (8009934 <HAL_I2C_Master_Transmit+0x24c>)
 800980a:	9300      	str	r3, [sp, #0]
 800980c:	0023      	movs	r3, r4
 800980e:	f000 fc37 	bl	800a080 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8009812:	e061      	b.n	80098d8 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009814:	693a      	ldr	r2, [r7, #16]
 8009816:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	0018      	movs	r0, r3
 800981c:	f000 fa10 	bl	8009c40 <I2C_WaitOnTXISFlagUntilTimeout>
 8009820:	1e03      	subs	r3, r0, #0
 8009822:	d001      	beq.n	8009828 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8009824:	2301      	movs	r3, #1
 8009826:	e081      	b.n	800992c <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800982c:	781a      	ldrb	r2, [r3, #0]
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009838:	1c5a      	adds	r2, r3, #1
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009842:	b29b      	uxth	r3, r3
 8009844:	3b01      	subs	r3, #1
 8009846:	b29a      	uxth	r2, r3
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009850:	3b01      	subs	r3, #1
 8009852:	b29a      	uxth	r2, r3
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800985c:	b29b      	uxth	r3, r3
 800985e:	2b00      	cmp	r3, #0
 8009860:	d03a      	beq.n	80098d8 <HAL_I2C_Master_Transmit+0x1f0>
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009866:	2b00      	cmp	r3, #0
 8009868:	d136      	bne.n	80098d8 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800986a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800986c:	68f8      	ldr	r0, [r7, #12]
 800986e:	693b      	ldr	r3, [r7, #16]
 8009870:	9300      	str	r3, [sp, #0]
 8009872:	0013      	movs	r3, r2
 8009874:	2200      	movs	r2, #0
 8009876:	2180      	movs	r1, #128	@ 0x80
 8009878:	f000 f98a 	bl	8009b90 <I2C_WaitOnFlagUntilTimeout>
 800987c:	1e03      	subs	r3, r0, #0
 800987e:	d001      	beq.n	8009884 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8009880:	2301      	movs	r3, #1
 8009882:	e053      	b.n	800992c <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009888:	b29b      	uxth	r3, r3
 800988a:	2bff      	cmp	r3, #255	@ 0xff
 800988c:	d911      	bls.n	80098b2 <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	22ff      	movs	r2, #255	@ 0xff
 8009892:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009898:	b2da      	uxtb	r2, r3
 800989a:	2380      	movs	r3, #128	@ 0x80
 800989c:	045c      	lsls	r4, r3, #17
 800989e:	230a      	movs	r3, #10
 80098a0:	18fb      	adds	r3, r7, r3
 80098a2:	8819      	ldrh	r1, [r3, #0]
 80098a4:	68f8      	ldr	r0, [r7, #12]
 80098a6:	2300      	movs	r3, #0
 80098a8:	9300      	str	r3, [sp, #0]
 80098aa:	0023      	movs	r3, r4
 80098ac:	f000 fbe8 	bl	800a080 <I2C_TransferConfig>
 80098b0:	e012      	b.n	80098d8 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80098b6:	b29a      	uxth	r2, r3
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80098c0:	b2da      	uxtb	r2, r3
 80098c2:	2380      	movs	r3, #128	@ 0x80
 80098c4:	049c      	lsls	r4, r3, #18
 80098c6:	230a      	movs	r3, #10
 80098c8:	18fb      	adds	r3, r7, r3
 80098ca:	8819      	ldrh	r1, [r3, #0]
 80098cc:	68f8      	ldr	r0, [r7, #12]
 80098ce:	2300      	movs	r3, #0
 80098d0:	9300      	str	r3, [sp, #0]
 80098d2:	0023      	movs	r3, r4
 80098d4:	f000 fbd4 	bl	800a080 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80098dc:	b29b      	uxth	r3, r3
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d198      	bne.n	8009814 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80098e2:	693a      	ldr	r2, [r7, #16]
 80098e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	0018      	movs	r0, r3
 80098ea:	f000 f9ef 	bl	8009ccc <I2C_WaitOnSTOPFlagUntilTimeout>
 80098ee:	1e03      	subs	r3, r0, #0
 80098f0:	d001      	beq.n	80098f6 <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 80098f2:	2301      	movs	r3, #1
 80098f4:	e01a      	b.n	800992c <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	2220      	movs	r2, #32
 80098fc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	685a      	ldr	r2, [r3, #4]
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	490b      	ldr	r1, [pc, #44]	@ (8009938 <HAL_I2C_Master_Transmit+0x250>)
 800990a:	400a      	ands	r2, r1
 800990c:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	2241      	movs	r2, #65	@ 0x41
 8009912:	2120      	movs	r1, #32
 8009914:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	2242      	movs	r2, #66	@ 0x42
 800991a:	2100      	movs	r1, #0
 800991c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	2240      	movs	r2, #64	@ 0x40
 8009922:	2100      	movs	r1, #0
 8009924:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009926:	2300      	movs	r3, #0
 8009928:	e000      	b.n	800992c <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 800992a:	2302      	movs	r3, #2
  }
}
 800992c:	0018      	movs	r0, r3
 800992e:	46bd      	mov	sp, r7
 8009930:	b007      	add	sp, #28
 8009932:	bd90      	pop	{r4, r7, pc}
 8009934:	80002000 	.word	0x80002000
 8009938:	fe00e800 	.word	0xfe00e800

0800993c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800993c:	b590      	push	{r4, r7, lr}
 800993e:	b089      	sub	sp, #36	@ 0x24
 8009940:	af02      	add	r7, sp, #8
 8009942:	60f8      	str	r0, [r7, #12]
 8009944:	0008      	movs	r0, r1
 8009946:	607a      	str	r2, [r7, #4]
 8009948:	0019      	movs	r1, r3
 800994a:	230a      	movs	r3, #10
 800994c:	18fb      	adds	r3, r7, r3
 800994e:	1c02      	adds	r2, r0, #0
 8009950:	801a      	strh	r2, [r3, #0]
 8009952:	2308      	movs	r3, #8
 8009954:	18fb      	adds	r3, r7, r3
 8009956:	1c0a      	adds	r2, r1, #0
 8009958:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	2241      	movs	r2, #65	@ 0x41
 800995e:	5c9b      	ldrb	r3, [r3, r2]
 8009960:	b2db      	uxtb	r3, r3
 8009962:	2b20      	cmp	r3, #32
 8009964:	d000      	beq.n	8009968 <HAL_I2C_Master_Receive+0x2c>
 8009966:	e0e8      	b.n	8009b3a <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	2240      	movs	r2, #64	@ 0x40
 800996c:	5c9b      	ldrb	r3, [r3, r2]
 800996e:	2b01      	cmp	r3, #1
 8009970:	d101      	bne.n	8009976 <HAL_I2C_Master_Receive+0x3a>
 8009972:	2302      	movs	r3, #2
 8009974:	e0e2      	b.n	8009b3c <HAL_I2C_Master_Receive+0x200>
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	2240      	movs	r2, #64	@ 0x40
 800997a:	2101      	movs	r1, #1
 800997c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800997e:	f7ff f95f 	bl	8008c40 <HAL_GetTick>
 8009982:	0003      	movs	r3, r0
 8009984:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009986:	2380      	movs	r3, #128	@ 0x80
 8009988:	0219      	lsls	r1, r3, #8
 800998a:	68f8      	ldr	r0, [r7, #12]
 800998c:	697b      	ldr	r3, [r7, #20]
 800998e:	9300      	str	r3, [sp, #0]
 8009990:	2319      	movs	r3, #25
 8009992:	2201      	movs	r2, #1
 8009994:	f000 f8fc 	bl	8009b90 <I2C_WaitOnFlagUntilTimeout>
 8009998:	1e03      	subs	r3, r0, #0
 800999a:	d001      	beq.n	80099a0 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 800999c:	2301      	movs	r3, #1
 800999e:	e0cd      	b.n	8009b3c <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	2241      	movs	r2, #65	@ 0x41
 80099a4:	2122      	movs	r1, #34	@ 0x22
 80099a6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	2242      	movs	r2, #66	@ 0x42
 80099ac:	2110      	movs	r1, #16
 80099ae:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	2200      	movs	r2, #0
 80099b4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	687a      	ldr	r2, [r7, #4]
 80099ba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	2208      	movs	r2, #8
 80099c0:	18ba      	adds	r2, r7, r2
 80099c2:	8812      	ldrh	r2, [r2, #0]
 80099c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	2200      	movs	r2, #0
 80099ca:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80099d0:	b29b      	uxth	r3, r3
 80099d2:	2bff      	cmp	r3, #255	@ 0xff
 80099d4:	d911      	bls.n	80099fa <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	22ff      	movs	r2, #255	@ 0xff
 80099da:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80099e0:	b2da      	uxtb	r2, r3
 80099e2:	2380      	movs	r3, #128	@ 0x80
 80099e4:	045c      	lsls	r4, r3, #17
 80099e6:	230a      	movs	r3, #10
 80099e8:	18fb      	adds	r3, r7, r3
 80099ea:	8819      	ldrh	r1, [r3, #0]
 80099ec:	68f8      	ldr	r0, [r7, #12]
 80099ee:	4b55      	ldr	r3, [pc, #340]	@ (8009b44 <HAL_I2C_Master_Receive+0x208>)
 80099f0:	9300      	str	r3, [sp, #0]
 80099f2:	0023      	movs	r3, r4
 80099f4:	f000 fb44 	bl	800a080 <I2C_TransferConfig>
 80099f8:	e076      	b.n	8009ae8 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80099fe:	b29a      	uxth	r2, r3
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009a08:	b2da      	uxtb	r2, r3
 8009a0a:	2380      	movs	r3, #128	@ 0x80
 8009a0c:	049c      	lsls	r4, r3, #18
 8009a0e:	230a      	movs	r3, #10
 8009a10:	18fb      	adds	r3, r7, r3
 8009a12:	8819      	ldrh	r1, [r3, #0]
 8009a14:	68f8      	ldr	r0, [r7, #12]
 8009a16:	4b4b      	ldr	r3, [pc, #300]	@ (8009b44 <HAL_I2C_Master_Receive+0x208>)
 8009a18:	9300      	str	r3, [sp, #0]
 8009a1a:	0023      	movs	r3, r4
 8009a1c:	f000 fb30 	bl	800a080 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8009a20:	e062      	b.n	8009ae8 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009a22:	697a      	ldr	r2, [r7, #20]
 8009a24:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	0018      	movs	r0, r3
 8009a2a:	f000 f993 	bl	8009d54 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009a2e:	1e03      	subs	r3, r0, #0
 8009a30:	d001      	beq.n	8009a36 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8009a32:	2301      	movs	r3, #1
 8009a34:	e082      	b.n	8009b3c <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a40:	b2d2      	uxtb	r2, r2
 8009a42:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a48:	1c5a      	adds	r2, r3, #1
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009a52:	3b01      	subs	r3, #1
 8009a54:	b29a      	uxth	r2, r3
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009a5e:	b29b      	uxth	r3, r3
 8009a60:	3b01      	subs	r3, #1
 8009a62:	b29a      	uxth	r2, r3
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009a6c:	b29b      	uxth	r3, r3
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d03a      	beq.n	8009ae8 <HAL_I2C_Master_Receive+0x1ac>
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d136      	bne.n	8009ae8 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009a7a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009a7c:	68f8      	ldr	r0, [r7, #12]
 8009a7e:	697b      	ldr	r3, [r7, #20]
 8009a80:	9300      	str	r3, [sp, #0]
 8009a82:	0013      	movs	r3, r2
 8009a84:	2200      	movs	r2, #0
 8009a86:	2180      	movs	r1, #128	@ 0x80
 8009a88:	f000 f882 	bl	8009b90 <I2C_WaitOnFlagUntilTimeout>
 8009a8c:	1e03      	subs	r3, r0, #0
 8009a8e:	d001      	beq.n	8009a94 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8009a90:	2301      	movs	r3, #1
 8009a92:	e053      	b.n	8009b3c <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009a98:	b29b      	uxth	r3, r3
 8009a9a:	2bff      	cmp	r3, #255	@ 0xff
 8009a9c:	d911      	bls.n	8009ac2 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	22ff      	movs	r2, #255	@ 0xff
 8009aa2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009aa8:	b2da      	uxtb	r2, r3
 8009aaa:	2380      	movs	r3, #128	@ 0x80
 8009aac:	045c      	lsls	r4, r3, #17
 8009aae:	230a      	movs	r3, #10
 8009ab0:	18fb      	adds	r3, r7, r3
 8009ab2:	8819      	ldrh	r1, [r3, #0]
 8009ab4:	68f8      	ldr	r0, [r7, #12]
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	9300      	str	r3, [sp, #0]
 8009aba:	0023      	movs	r3, r4
 8009abc:	f000 fae0 	bl	800a080 <I2C_TransferConfig>
 8009ac0:	e012      	b.n	8009ae8 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009ac6:	b29a      	uxth	r2, r3
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009ad0:	b2da      	uxtb	r2, r3
 8009ad2:	2380      	movs	r3, #128	@ 0x80
 8009ad4:	049c      	lsls	r4, r3, #18
 8009ad6:	230a      	movs	r3, #10
 8009ad8:	18fb      	adds	r3, r7, r3
 8009ada:	8819      	ldrh	r1, [r3, #0]
 8009adc:	68f8      	ldr	r0, [r7, #12]
 8009ade:	2300      	movs	r3, #0
 8009ae0:	9300      	str	r3, [sp, #0]
 8009ae2:	0023      	movs	r3, r4
 8009ae4:	f000 facc 	bl	800a080 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009aec:	b29b      	uxth	r3, r3
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d197      	bne.n	8009a22 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009af2:	697a      	ldr	r2, [r7, #20]
 8009af4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	0018      	movs	r0, r3
 8009afa:	f000 f8e7 	bl	8009ccc <I2C_WaitOnSTOPFlagUntilTimeout>
 8009afe:	1e03      	subs	r3, r0, #0
 8009b00:	d001      	beq.n	8009b06 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8009b02:	2301      	movs	r3, #1
 8009b04:	e01a      	b.n	8009b3c <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	2220      	movs	r2, #32
 8009b0c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	685a      	ldr	r2, [r3, #4]
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	490b      	ldr	r1, [pc, #44]	@ (8009b48 <HAL_I2C_Master_Receive+0x20c>)
 8009b1a:	400a      	ands	r2, r1
 8009b1c:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	2241      	movs	r2, #65	@ 0x41
 8009b22:	2120      	movs	r1, #32
 8009b24:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	2242      	movs	r2, #66	@ 0x42
 8009b2a:	2100      	movs	r1, #0
 8009b2c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	2240      	movs	r2, #64	@ 0x40
 8009b32:	2100      	movs	r1, #0
 8009b34:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009b36:	2300      	movs	r3, #0
 8009b38:	e000      	b.n	8009b3c <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8009b3a:	2302      	movs	r3, #2
  }
}
 8009b3c:	0018      	movs	r0, r3
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	b007      	add	sp, #28
 8009b42:	bd90      	pop	{r4, r7, pc}
 8009b44:	80002400 	.word	0x80002400
 8009b48:	fe00e800 	.word	0xfe00e800

08009b4c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b082      	sub	sp, #8
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	699b      	ldr	r3, [r3, #24]
 8009b5a:	2202      	movs	r2, #2
 8009b5c:	4013      	ands	r3, r2
 8009b5e:	2b02      	cmp	r3, #2
 8009b60:	d103      	bne.n	8009b6a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	2200      	movs	r2, #0
 8009b68:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	699b      	ldr	r3, [r3, #24]
 8009b70:	2201      	movs	r2, #1
 8009b72:	4013      	ands	r3, r2
 8009b74:	2b01      	cmp	r3, #1
 8009b76:	d007      	beq.n	8009b88 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	699a      	ldr	r2, [r3, #24]
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	2101      	movs	r1, #1
 8009b84:	430a      	orrs	r2, r1
 8009b86:	619a      	str	r2, [r3, #24]
  }
}
 8009b88:	46c0      	nop			@ (mov r8, r8)
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	b002      	add	sp, #8
 8009b8e:	bd80      	pop	{r7, pc}

08009b90 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b084      	sub	sp, #16
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	60f8      	str	r0, [r7, #12]
 8009b98:	60b9      	str	r1, [r7, #8]
 8009b9a:	603b      	str	r3, [r7, #0]
 8009b9c:	1dfb      	adds	r3, r7, #7
 8009b9e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009ba0:	e03a      	b.n	8009c18 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009ba2:	69ba      	ldr	r2, [r7, #24]
 8009ba4:	6839      	ldr	r1, [r7, #0]
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	0018      	movs	r0, r3
 8009baa:	f000 f971 	bl	8009e90 <I2C_IsErrorOccurred>
 8009bae:	1e03      	subs	r3, r0, #0
 8009bb0:	d001      	beq.n	8009bb6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	e040      	b.n	8009c38 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	3301      	adds	r3, #1
 8009bba:	d02d      	beq.n	8009c18 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009bbc:	f7ff f840 	bl	8008c40 <HAL_GetTick>
 8009bc0:	0002      	movs	r2, r0
 8009bc2:	69bb      	ldr	r3, [r7, #24]
 8009bc4:	1ad3      	subs	r3, r2, r3
 8009bc6:	683a      	ldr	r2, [r7, #0]
 8009bc8:	429a      	cmp	r2, r3
 8009bca:	d302      	bcc.n	8009bd2 <I2C_WaitOnFlagUntilTimeout+0x42>
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d122      	bne.n	8009c18 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	699b      	ldr	r3, [r3, #24]
 8009bd8:	68ba      	ldr	r2, [r7, #8]
 8009bda:	4013      	ands	r3, r2
 8009bdc:	68ba      	ldr	r2, [r7, #8]
 8009bde:	1ad3      	subs	r3, r2, r3
 8009be0:	425a      	negs	r2, r3
 8009be2:	4153      	adcs	r3, r2
 8009be4:	b2db      	uxtb	r3, r3
 8009be6:	001a      	movs	r2, r3
 8009be8:	1dfb      	adds	r3, r7, #7
 8009bea:	781b      	ldrb	r3, [r3, #0]
 8009bec:	429a      	cmp	r2, r3
 8009bee:	d113      	bne.n	8009c18 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009bf4:	2220      	movs	r2, #32
 8009bf6:	431a      	orrs	r2, r3
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	2241      	movs	r2, #65	@ 0x41
 8009c00:	2120      	movs	r1, #32
 8009c02:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	2242      	movs	r2, #66	@ 0x42
 8009c08:	2100      	movs	r1, #0
 8009c0a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	2240      	movs	r2, #64	@ 0x40
 8009c10:	2100      	movs	r1, #0
 8009c12:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8009c14:	2301      	movs	r3, #1
 8009c16:	e00f      	b.n	8009c38 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	699b      	ldr	r3, [r3, #24]
 8009c1e:	68ba      	ldr	r2, [r7, #8]
 8009c20:	4013      	ands	r3, r2
 8009c22:	68ba      	ldr	r2, [r7, #8]
 8009c24:	1ad3      	subs	r3, r2, r3
 8009c26:	425a      	negs	r2, r3
 8009c28:	4153      	adcs	r3, r2
 8009c2a:	b2db      	uxtb	r3, r3
 8009c2c:	001a      	movs	r2, r3
 8009c2e:	1dfb      	adds	r3, r7, #7
 8009c30:	781b      	ldrb	r3, [r3, #0]
 8009c32:	429a      	cmp	r2, r3
 8009c34:	d0b5      	beq.n	8009ba2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009c36:	2300      	movs	r3, #0
}
 8009c38:	0018      	movs	r0, r3
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	b004      	add	sp, #16
 8009c3e:	bd80      	pop	{r7, pc}

08009c40 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b084      	sub	sp, #16
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	60f8      	str	r0, [r7, #12]
 8009c48:	60b9      	str	r1, [r7, #8]
 8009c4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009c4c:	e032      	b.n	8009cb4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009c4e:	687a      	ldr	r2, [r7, #4]
 8009c50:	68b9      	ldr	r1, [r7, #8]
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	0018      	movs	r0, r3
 8009c56:	f000 f91b 	bl	8009e90 <I2C_IsErrorOccurred>
 8009c5a:	1e03      	subs	r3, r0, #0
 8009c5c:	d001      	beq.n	8009c62 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009c5e:	2301      	movs	r3, #1
 8009c60:	e030      	b.n	8009cc4 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c62:	68bb      	ldr	r3, [r7, #8]
 8009c64:	3301      	adds	r3, #1
 8009c66:	d025      	beq.n	8009cb4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c68:	f7fe ffea 	bl	8008c40 <HAL_GetTick>
 8009c6c:	0002      	movs	r2, r0
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	1ad3      	subs	r3, r2, r3
 8009c72:	68ba      	ldr	r2, [r7, #8]
 8009c74:	429a      	cmp	r2, r3
 8009c76:	d302      	bcc.n	8009c7e <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d11a      	bne.n	8009cb4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	699b      	ldr	r3, [r3, #24]
 8009c84:	2202      	movs	r2, #2
 8009c86:	4013      	ands	r3, r2
 8009c88:	2b02      	cmp	r3, #2
 8009c8a:	d013      	beq.n	8009cb4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c90:	2220      	movs	r2, #32
 8009c92:	431a      	orrs	r2, r3
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	2241      	movs	r2, #65	@ 0x41
 8009c9c:	2120      	movs	r1, #32
 8009c9e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	2242      	movs	r2, #66	@ 0x42
 8009ca4:	2100      	movs	r1, #0
 8009ca6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	2240      	movs	r2, #64	@ 0x40
 8009cac:	2100      	movs	r1, #0
 8009cae:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	e007      	b.n	8009cc4 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	699b      	ldr	r3, [r3, #24]
 8009cba:	2202      	movs	r2, #2
 8009cbc:	4013      	ands	r3, r2
 8009cbe:	2b02      	cmp	r3, #2
 8009cc0:	d1c5      	bne.n	8009c4e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009cc2:	2300      	movs	r3, #0
}
 8009cc4:	0018      	movs	r0, r3
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	b004      	add	sp, #16
 8009cca:	bd80      	pop	{r7, pc}

08009ccc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b084      	sub	sp, #16
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	60f8      	str	r0, [r7, #12]
 8009cd4:	60b9      	str	r1, [r7, #8]
 8009cd6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009cd8:	e02f      	b.n	8009d3a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009cda:	687a      	ldr	r2, [r7, #4]
 8009cdc:	68b9      	ldr	r1, [r7, #8]
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	0018      	movs	r0, r3
 8009ce2:	f000 f8d5 	bl	8009e90 <I2C_IsErrorOccurred>
 8009ce6:	1e03      	subs	r3, r0, #0
 8009ce8:	d001      	beq.n	8009cee <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009cea:	2301      	movs	r3, #1
 8009cec:	e02d      	b.n	8009d4a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009cee:	f7fe ffa7 	bl	8008c40 <HAL_GetTick>
 8009cf2:	0002      	movs	r2, r0
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	1ad3      	subs	r3, r2, r3
 8009cf8:	68ba      	ldr	r2, [r7, #8]
 8009cfa:	429a      	cmp	r2, r3
 8009cfc:	d302      	bcc.n	8009d04 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009cfe:	68bb      	ldr	r3, [r7, #8]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d11a      	bne.n	8009d3a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	699b      	ldr	r3, [r3, #24]
 8009d0a:	2220      	movs	r2, #32
 8009d0c:	4013      	ands	r3, r2
 8009d0e:	2b20      	cmp	r3, #32
 8009d10:	d013      	beq.n	8009d3a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d16:	2220      	movs	r2, #32
 8009d18:	431a      	orrs	r2, r3
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	2241      	movs	r2, #65	@ 0x41
 8009d22:	2120      	movs	r1, #32
 8009d24:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	2242      	movs	r2, #66	@ 0x42
 8009d2a:	2100      	movs	r1, #0
 8009d2c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	2240      	movs	r2, #64	@ 0x40
 8009d32:	2100      	movs	r1, #0
 8009d34:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8009d36:	2301      	movs	r3, #1
 8009d38:	e007      	b.n	8009d4a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	699b      	ldr	r3, [r3, #24]
 8009d40:	2220      	movs	r2, #32
 8009d42:	4013      	ands	r3, r2
 8009d44:	2b20      	cmp	r3, #32
 8009d46:	d1c8      	bne.n	8009cda <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009d48:	2300      	movs	r3, #0
}
 8009d4a:	0018      	movs	r0, r3
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	b004      	add	sp, #16
 8009d50:	bd80      	pop	{r7, pc}
	...

08009d54 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b086      	sub	sp, #24
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	60f8      	str	r0, [r7, #12]
 8009d5c:	60b9      	str	r1, [r7, #8]
 8009d5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009d60:	2317      	movs	r3, #23
 8009d62:	18fb      	adds	r3, r7, r3
 8009d64:	2200      	movs	r2, #0
 8009d66:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8009d68:	e07b      	b.n	8009e62 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009d6a:	687a      	ldr	r2, [r7, #4]
 8009d6c:	68b9      	ldr	r1, [r7, #8]
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	0018      	movs	r0, r3
 8009d72:	f000 f88d 	bl	8009e90 <I2C_IsErrorOccurred>
 8009d76:	1e03      	subs	r3, r0, #0
 8009d78:	d003      	beq.n	8009d82 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 8009d7a:	2317      	movs	r3, #23
 8009d7c:	18fb      	adds	r3, r7, r3
 8009d7e:	2201      	movs	r2, #1
 8009d80:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	699b      	ldr	r3, [r3, #24]
 8009d88:	2220      	movs	r2, #32
 8009d8a:	4013      	ands	r3, r2
 8009d8c:	2b20      	cmp	r3, #32
 8009d8e:	d140      	bne.n	8009e12 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 8009d90:	2117      	movs	r1, #23
 8009d92:	187b      	adds	r3, r7, r1
 8009d94:	781b      	ldrb	r3, [r3, #0]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d13b      	bne.n	8009e12 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	699b      	ldr	r3, [r3, #24]
 8009da0:	2204      	movs	r2, #4
 8009da2:	4013      	ands	r3, r2
 8009da4:	2b04      	cmp	r3, #4
 8009da6:	d106      	bne.n	8009db6 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d002      	beq.n	8009db6 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8009db0:	187b      	adds	r3, r7, r1
 8009db2:	2200      	movs	r2, #0
 8009db4:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	699b      	ldr	r3, [r3, #24]
 8009dbc:	2210      	movs	r2, #16
 8009dbe:	4013      	ands	r3, r2
 8009dc0:	2b10      	cmp	r3, #16
 8009dc2:	d123      	bne.n	8009e0c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	2210      	movs	r2, #16
 8009dca:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	2204      	movs	r2, #4
 8009dd0:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	2220      	movs	r2, #32
 8009dd8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	685a      	ldr	r2, [r3, #4]
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	4929      	ldr	r1, [pc, #164]	@ (8009e8c <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 8009de6:	400a      	ands	r2, r1
 8009de8:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	2241      	movs	r2, #65	@ 0x41
 8009dee:	2120      	movs	r1, #32
 8009df0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	2242      	movs	r2, #66	@ 0x42
 8009df6:	2100      	movs	r1, #0
 8009df8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	2240      	movs	r2, #64	@ 0x40
 8009dfe:	2100      	movs	r1, #0
 8009e00:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8009e02:	2317      	movs	r3, #23
 8009e04:	18fb      	adds	r3, r7, r3
 8009e06:	2201      	movs	r2, #1
 8009e08:	701a      	strb	r2, [r3, #0]
 8009e0a:	e002      	b.n	8009e12 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	2200      	movs	r2, #0
 8009e10:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8009e12:	f7fe ff15 	bl	8008c40 <HAL_GetTick>
 8009e16:	0002      	movs	r2, r0
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	1ad3      	subs	r3, r2, r3
 8009e1c:	68ba      	ldr	r2, [r7, #8]
 8009e1e:	429a      	cmp	r2, r3
 8009e20:	d302      	bcc.n	8009e28 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d11c      	bne.n	8009e62 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 8009e28:	2017      	movs	r0, #23
 8009e2a:	183b      	adds	r3, r7, r0
 8009e2c:	781b      	ldrb	r3, [r3, #0]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d117      	bne.n	8009e62 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	699b      	ldr	r3, [r3, #24]
 8009e38:	2204      	movs	r2, #4
 8009e3a:	4013      	ands	r3, r2
 8009e3c:	2b04      	cmp	r3, #4
 8009e3e:	d010      	beq.n	8009e62 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e44:	2220      	movs	r2, #32
 8009e46:	431a      	orrs	r2, r3
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	2241      	movs	r2, #65	@ 0x41
 8009e50:	2120      	movs	r1, #32
 8009e52:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	2240      	movs	r2, #64	@ 0x40
 8009e58:	2100      	movs	r1, #0
 8009e5a:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8009e5c:	183b      	adds	r3, r7, r0
 8009e5e:	2201      	movs	r2, #1
 8009e60:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	699b      	ldr	r3, [r3, #24]
 8009e68:	2204      	movs	r2, #4
 8009e6a:	4013      	ands	r3, r2
 8009e6c:	2b04      	cmp	r3, #4
 8009e6e:	d005      	beq.n	8009e7c <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8009e70:	2317      	movs	r3, #23
 8009e72:	18fb      	adds	r3, r7, r3
 8009e74:	781b      	ldrb	r3, [r3, #0]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d100      	bne.n	8009e7c <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8009e7a:	e776      	b.n	8009d6a <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 8009e7c:	2317      	movs	r3, #23
 8009e7e:	18fb      	adds	r3, r7, r3
 8009e80:	781b      	ldrb	r3, [r3, #0]
}
 8009e82:	0018      	movs	r0, r3
 8009e84:	46bd      	mov	sp, r7
 8009e86:	b006      	add	sp, #24
 8009e88:	bd80      	pop	{r7, pc}
 8009e8a:	46c0      	nop			@ (mov r8, r8)
 8009e8c:	fe00e800 	.word	0xfe00e800

08009e90 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b08a      	sub	sp, #40	@ 0x28
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	60f8      	str	r0, [r7, #12]
 8009e98:	60b9      	str	r1, [r7, #8]
 8009e9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009e9c:	2327      	movs	r3, #39	@ 0x27
 8009e9e:	18fb      	adds	r3, r7, r3
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	699b      	ldr	r3, [r3, #24]
 8009eaa:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009eac:	2300      	movs	r3, #0
 8009eae:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009eb4:	69bb      	ldr	r3, [r7, #24]
 8009eb6:	2210      	movs	r2, #16
 8009eb8:	4013      	ands	r3, r2
 8009eba:	d100      	bne.n	8009ebe <I2C_IsErrorOccurred+0x2e>
 8009ebc:	e079      	b.n	8009fb2 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	2210      	movs	r2, #16
 8009ec4:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009ec6:	e057      	b.n	8009f78 <I2C_IsErrorOccurred+0xe8>
 8009ec8:	2227      	movs	r2, #39	@ 0x27
 8009eca:	18bb      	adds	r3, r7, r2
 8009ecc:	18ba      	adds	r2, r7, r2
 8009ece:	7812      	ldrb	r2, [r2, #0]
 8009ed0:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009ed2:	68bb      	ldr	r3, [r7, #8]
 8009ed4:	3301      	adds	r3, #1
 8009ed6:	d04f      	beq.n	8009f78 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009ed8:	f7fe feb2 	bl	8008c40 <HAL_GetTick>
 8009edc:	0002      	movs	r2, r0
 8009ede:	69fb      	ldr	r3, [r7, #28]
 8009ee0:	1ad3      	subs	r3, r2, r3
 8009ee2:	68ba      	ldr	r2, [r7, #8]
 8009ee4:	429a      	cmp	r2, r3
 8009ee6:	d302      	bcc.n	8009eee <I2C_IsErrorOccurred+0x5e>
 8009ee8:	68bb      	ldr	r3, [r7, #8]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d144      	bne.n	8009f78 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	685a      	ldr	r2, [r3, #4]
 8009ef4:	2380      	movs	r3, #128	@ 0x80
 8009ef6:	01db      	lsls	r3, r3, #7
 8009ef8:	4013      	ands	r3, r2
 8009efa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009efc:	2013      	movs	r0, #19
 8009efe:	183b      	adds	r3, r7, r0
 8009f00:	68fa      	ldr	r2, [r7, #12]
 8009f02:	2142      	movs	r1, #66	@ 0x42
 8009f04:	5c52      	ldrb	r2, [r2, r1]
 8009f06:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	699a      	ldr	r2, [r3, #24]
 8009f0e:	2380      	movs	r3, #128	@ 0x80
 8009f10:	021b      	lsls	r3, r3, #8
 8009f12:	401a      	ands	r2, r3
 8009f14:	2380      	movs	r3, #128	@ 0x80
 8009f16:	021b      	lsls	r3, r3, #8
 8009f18:	429a      	cmp	r2, r3
 8009f1a:	d126      	bne.n	8009f6a <I2C_IsErrorOccurred+0xda>
 8009f1c:	697a      	ldr	r2, [r7, #20]
 8009f1e:	2380      	movs	r3, #128	@ 0x80
 8009f20:	01db      	lsls	r3, r3, #7
 8009f22:	429a      	cmp	r2, r3
 8009f24:	d021      	beq.n	8009f6a <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8009f26:	183b      	adds	r3, r7, r0
 8009f28:	781b      	ldrb	r3, [r3, #0]
 8009f2a:	2b20      	cmp	r3, #32
 8009f2c:	d01d      	beq.n	8009f6a <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	685a      	ldr	r2, [r3, #4]
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	2180      	movs	r1, #128	@ 0x80
 8009f3a:	01c9      	lsls	r1, r1, #7
 8009f3c:	430a      	orrs	r2, r1
 8009f3e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009f40:	f7fe fe7e 	bl	8008c40 <HAL_GetTick>
 8009f44:	0003      	movs	r3, r0
 8009f46:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009f48:	e00f      	b.n	8009f6a <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009f4a:	f7fe fe79 	bl	8008c40 <HAL_GetTick>
 8009f4e:	0002      	movs	r2, r0
 8009f50:	69fb      	ldr	r3, [r7, #28]
 8009f52:	1ad3      	subs	r3, r2, r3
 8009f54:	2b19      	cmp	r3, #25
 8009f56:	d908      	bls.n	8009f6a <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009f58:	6a3b      	ldr	r3, [r7, #32]
 8009f5a:	2220      	movs	r2, #32
 8009f5c:	4313      	orrs	r3, r2
 8009f5e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009f60:	2327      	movs	r3, #39	@ 0x27
 8009f62:	18fb      	adds	r3, r7, r3
 8009f64:	2201      	movs	r2, #1
 8009f66:	701a      	strb	r2, [r3, #0]

              break;
 8009f68:	e006      	b.n	8009f78 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	699b      	ldr	r3, [r3, #24]
 8009f70:	2220      	movs	r2, #32
 8009f72:	4013      	ands	r3, r2
 8009f74:	2b20      	cmp	r3, #32
 8009f76:	d1e8      	bne.n	8009f4a <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	699b      	ldr	r3, [r3, #24]
 8009f7e:	2220      	movs	r2, #32
 8009f80:	4013      	ands	r3, r2
 8009f82:	2b20      	cmp	r3, #32
 8009f84:	d004      	beq.n	8009f90 <I2C_IsErrorOccurred+0x100>
 8009f86:	2327      	movs	r3, #39	@ 0x27
 8009f88:	18fb      	adds	r3, r7, r3
 8009f8a:	781b      	ldrb	r3, [r3, #0]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d09b      	beq.n	8009ec8 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009f90:	2327      	movs	r3, #39	@ 0x27
 8009f92:	18fb      	adds	r3, r7, r3
 8009f94:	781b      	ldrb	r3, [r3, #0]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d103      	bne.n	8009fa2 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	2220      	movs	r2, #32
 8009fa0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009fa2:	6a3b      	ldr	r3, [r7, #32]
 8009fa4:	2204      	movs	r2, #4
 8009fa6:	4313      	orrs	r3, r2
 8009fa8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009faa:	2327      	movs	r3, #39	@ 0x27
 8009fac:	18fb      	adds	r3, r7, r3
 8009fae:	2201      	movs	r2, #1
 8009fb0:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	699b      	ldr	r3, [r3, #24]
 8009fb8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009fba:	69ba      	ldr	r2, [r7, #24]
 8009fbc:	2380      	movs	r3, #128	@ 0x80
 8009fbe:	005b      	lsls	r3, r3, #1
 8009fc0:	4013      	ands	r3, r2
 8009fc2:	d00c      	beq.n	8009fde <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009fc4:	6a3b      	ldr	r3, [r7, #32]
 8009fc6:	2201      	movs	r2, #1
 8009fc8:	4313      	orrs	r3, r2
 8009fca:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	2280      	movs	r2, #128	@ 0x80
 8009fd2:	0052      	lsls	r2, r2, #1
 8009fd4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009fd6:	2327      	movs	r3, #39	@ 0x27
 8009fd8:	18fb      	adds	r3, r7, r3
 8009fda:	2201      	movs	r2, #1
 8009fdc:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009fde:	69ba      	ldr	r2, [r7, #24]
 8009fe0:	2380      	movs	r3, #128	@ 0x80
 8009fe2:	00db      	lsls	r3, r3, #3
 8009fe4:	4013      	ands	r3, r2
 8009fe6:	d00c      	beq.n	800a002 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009fe8:	6a3b      	ldr	r3, [r7, #32]
 8009fea:	2208      	movs	r2, #8
 8009fec:	4313      	orrs	r3, r2
 8009fee:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	2280      	movs	r2, #128	@ 0x80
 8009ff6:	00d2      	lsls	r2, r2, #3
 8009ff8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009ffa:	2327      	movs	r3, #39	@ 0x27
 8009ffc:	18fb      	adds	r3, r7, r3
 8009ffe:	2201      	movs	r2, #1
 800a000:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800a002:	69ba      	ldr	r2, [r7, #24]
 800a004:	2380      	movs	r3, #128	@ 0x80
 800a006:	009b      	lsls	r3, r3, #2
 800a008:	4013      	ands	r3, r2
 800a00a:	d00c      	beq.n	800a026 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800a00c:	6a3b      	ldr	r3, [r7, #32]
 800a00e:	2202      	movs	r2, #2
 800a010:	4313      	orrs	r3, r2
 800a012:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	2280      	movs	r2, #128	@ 0x80
 800a01a:	0092      	lsls	r2, r2, #2
 800a01c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a01e:	2327      	movs	r3, #39	@ 0x27
 800a020:	18fb      	adds	r3, r7, r3
 800a022:	2201      	movs	r2, #1
 800a024:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800a026:	2327      	movs	r3, #39	@ 0x27
 800a028:	18fb      	adds	r3, r7, r3
 800a02a:	781b      	ldrb	r3, [r3, #0]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d01d      	beq.n	800a06c <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	0018      	movs	r0, r3
 800a034:	f7ff fd8a 	bl	8009b4c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	685a      	ldr	r2, [r3, #4]
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	490e      	ldr	r1, [pc, #56]	@ (800a07c <I2C_IsErrorOccurred+0x1ec>)
 800a044:	400a      	ands	r2, r1
 800a046:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a04c:	6a3b      	ldr	r3, [r7, #32]
 800a04e:	431a      	orrs	r2, r3
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	2241      	movs	r2, #65	@ 0x41
 800a058:	2120      	movs	r1, #32
 800a05a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	2242      	movs	r2, #66	@ 0x42
 800a060:	2100      	movs	r1, #0
 800a062:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	2240      	movs	r2, #64	@ 0x40
 800a068:	2100      	movs	r1, #0
 800a06a:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800a06c:	2327      	movs	r3, #39	@ 0x27
 800a06e:	18fb      	adds	r3, r7, r3
 800a070:	781b      	ldrb	r3, [r3, #0]
}
 800a072:	0018      	movs	r0, r3
 800a074:	46bd      	mov	sp, r7
 800a076:	b00a      	add	sp, #40	@ 0x28
 800a078:	bd80      	pop	{r7, pc}
 800a07a:	46c0      	nop			@ (mov r8, r8)
 800a07c:	fe00e800 	.word	0xfe00e800

0800a080 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800a080:	b590      	push	{r4, r7, lr}
 800a082:	b087      	sub	sp, #28
 800a084:	af00      	add	r7, sp, #0
 800a086:	60f8      	str	r0, [r7, #12]
 800a088:	0008      	movs	r0, r1
 800a08a:	0011      	movs	r1, r2
 800a08c:	607b      	str	r3, [r7, #4]
 800a08e:	240a      	movs	r4, #10
 800a090:	193b      	adds	r3, r7, r4
 800a092:	1c02      	adds	r2, r0, #0
 800a094:	801a      	strh	r2, [r3, #0]
 800a096:	2009      	movs	r0, #9
 800a098:	183b      	adds	r3, r7, r0
 800a09a:	1c0a      	adds	r2, r1, #0
 800a09c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a09e:	193b      	adds	r3, r7, r4
 800a0a0:	881b      	ldrh	r3, [r3, #0]
 800a0a2:	059b      	lsls	r3, r3, #22
 800a0a4:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a0a6:	183b      	adds	r3, r7, r0
 800a0a8:	781b      	ldrb	r3, [r3, #0]
 800a0aa:	0419      	lsls	r1, r3, #16
 800a0ac:	23ff      	movs	r3, #255	@ 0xff
 800a0ae:	041b      	lsls	r3, r3, #16
 800a0b0:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a0b2:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a0b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0ba:	4313      	orrs	r3, r2
 800a0bc:	005b      	lsls	r3, r3, #1
 800a0be:	085b      	lsrs	r3, r3, #1
 800a0c0:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	685b      	ldr	r3, [r3, #4]
 800a0c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a0ca:	0d51      	lsrs	r1, r2, #21
 800a0cc:	2280      	movs	r2, #128	@ 0x80
 800a0ce:	00d2      	lsls	r2, r2, #3
 800a0d0:	400a      	ands	r2, r1
 800a0d2:	4907      	ldr	r1, [pc, #28]	@ (800a0f0 <I2C_TransferConfig+0x70>)
 800a0d4:	430a      	orrs	r2, r1
 800a0d6:	43d2      	mvns	r2, r2
 800a0d8:	401a      	ands	r2, r3
 800a0da:	0011      	movs	r1, r2
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	697a      	ldr	r2, [r7, #20]
 800a0e2:	430a      	orrs	r2, r1
 800a0e4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800a0e6:	46c0      	nop			@ (mov r8, r8)
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	b007      	add	sp, #28
 800a0ec:	bd90      	pop	{r4, r7, pc}
 800a0ee:	46c0      	nop			@ (mov r8, r8)
 800a0f0:	03ff63ff 	.word	0x03ff63ff

0800a0f4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b082      	sub	sp, #8
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
 800a0fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2241      	movs	r2, #65	@ 0x41
 800a102:	5c9b      	ldrb	r3, [r3, r2]
 800a104:	b2db      	uxtb	r3, r3
 800a106:	2b20      	cmp	r3, #32
 800a108:	d138      	bne.n	800a17c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2240      	movs	r2, #64	@ 0x40
 800a10e:	5c9b      	ldrb	r3, [r3, r2]
 800a110:	2b01      	cmp	r3, #1
 800a112:	d101      	bne.n	800a118 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a114:	2302      	movs	r3, #2
 800a116:	e032      	b.n	800a17e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2240      	movs	r2, #64	@ 0x40
 800a11c:	2101      	movs	r1, #1
 800a11e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2241      	movs	r2, #65	@ 0x41
 800a124:	2124      	movs	r1, #36	@ 0x24
 800a126:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	681a      	ldr	r2, [r3, #0]
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	2101      	movs	r1, #1
 800a134:	438a      	bics	r2, r1
 800a136:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	681a      	ldr	r2, [r3, #0]
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	4911      	ldr	r1, [pc, #68]	@ (800a188 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800a144:	400a      	ands	r2, r1
 800a146:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	6819      	ldr	r1, [r3, #0]
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	683a      	ldr	r2, [r7, #0]
 800a154:	430a      	orrs	r2, r1
 800a156:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	681a      	ldr	r2, [r3, #0]
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	2101      	movs	r1, #1
 800a164:	430a      	orrs	r2, r1
 800a166:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2241      	movs	r2, #65	@ 0x41
 800a16c:	2120      	movs	r1, #32
 800a16e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2240      	movs	r2, #64	@ 0x40
 800a174:	2100      	movs	r1, #0
 800a176:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800a178:	2300      	movs	r3, #0
 800a17a:	e000      	b.n	800a17e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a17c:	2302      	movs	r3, #2
  }
}
 800a17e:	0018      	movs	r0, r3
 800a180:	46bd      	mov	sp, r7
 800a182:	b002      	add	sp, #8
 800a184:	bd80      	pop	{r7, pc}
 800a186:	46c0      	nop			@ (mov r8, r8)
 800a188:	ffffefff 	.word	0xffffefff

0800a18c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b084      	sub	sp, #16
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
 800a194:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	2241      	movs	r2, #65	@ 0x41
 800a19a:	5c9b      	ldrb	r3, [r3, r2]
 800a19c:	b2db      	uxtb	r3, r3
 800a19e:	2b20      	cmp	r3, #32
 800a1a0:	d139      	bne.n	800a216 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2240      	movs	r2, #64	@ 0x40
 800a1a6:	5c9b      	ldrb	r3, [r3, r2]
 800a1a8:	2b01      	cmp	r3, #1
 800a1aa:	d101      	bne.n	800a1b0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a1ac:	2302      	movs	r3, #2
 800a1ae:	e033      	b.n	800a218 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	2240      	movs	r2, #64	@ 0x40
 800a1b4:	2101      	movs	r1, #1
 800a1b6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2241      	movs	r2, #65	@ 0x41
 800a1bc:	2124      	movs	r1, #36	@ 0x24
 800a1be:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	681a      	ldr	r2, [r3, #0]
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	2101      	movs	r1, #1
 800a1cc:	438a      	bics	r2, r1
 800a1ce:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	4a11      	ldr	r2, [pc, #68]	@ (800a220 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800a1dc:	4013      	ands	r3, r2
 800a1de:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	021b      	lsls	r3, r3, #8
 800a1e4:	68fa      	ldr	r2, [r7, #12]
 800a1e6:	4313      	orrs	r3, r2
 800a1e8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	68fa      	ldr	r2, [r7, #12]
 800a1f0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	681a      	ldr	r2, [r3, #0]
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	2101      	movs	r1, #1
 800a1fe:	430a      	orrs	r2, r1
 800a200:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	2241      	movs	r2, #65	@ 0x41
 800a206:	2120      	movs	r1, #32
 800a208:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2240      	movs	r2, #64	@ 0x40
 800a20e:	2100      	movs	r1, #0
 800a210:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800a212:	2300      	movs	r3, #0
 800a214:	e000      	b.n	800a218 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a216:	2302      	movs	r3, #2
  }
}
 800a218:	0018      	movs	r0, r3
 800a21a:	46bd      	mov	sp, r7
 800a21c:	b004      	add	sp, #16
 800a21e:	bd80      	pop	{r7, pc}
 800a220:	fffff0ff 	.word	0xfffff0ff

0800a224 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b084      	sub	sp, #16
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800a22c:	4b19      	ldr	r3, [pc, #100]	@ (800a294 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	4a19      	ldr	r2, [pc, #100]	@ (800a298 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800a232:	4013      	ands	r3, r2
 800a234:	0019      	movs	r1, r3
 800a236:	4b17      	ldr	r3, [pc, #92]	@ (800a294 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800a238:	687a      	ldr	r2, [r7, #4]
 800a23a:	430a      	orrs	r2, r1
 800a23c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a23e:	687a      	ldr	r2, [r7, #4]
 800a240:	2380      	movs	r3, #128	@ 0x80
 800a242:	009b      	lsls	r3, r3, #2
 800a244:	429a      	cmp	r2, r3
 800a246:	d11f      	bne.n	800a288 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800a248:	4b14      	ldr	r3, [pc, #80]	@ (800a29c <HAL_PWREx_ControlVoltageScaling+0x78>)
 800a24a:	681a      	ldr	r2, [r3, #0]
 800a24c:	0013      	movs	r3, r2
 800a24e:	005b      	lsls	r3, r3, #1
 800a250:	189b      	adds	r3, r3, r2
 800a252:	005b      	lsls	r3, r3, #1
 800a254:	4912      	ldr	r1, [pc, #72]	@ (800a2a0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800a256:	0018      	movs	r0, r3
 800a258:	f7f5 ff7c 	bl	8000154 <__udivsi3>
 800a25c:	0003      	movs	r3, r0
 800a25e:	3301      	adds	r3, #1
 800a260:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a262:	e008      	b.n	800a276 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d003      	beq.n	800a272 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	3b01      	subs	r3, #1
 800a26e:	60fb      	str	r3, [r7, #12]
 800a270:	e001      	b.n	800a276 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800a272:	2303      	movs	r3, #3
 800a274:	e009      	b.n	800a28a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a276:	4b07      	ldr	r3, [pc, #28]	@ (800a294 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800a278:	695a      	ldr	r2, [r3, #20]
 800a27a:	2380      	movs	r3, #128	@ 0x80
 800a27c:	00db      	lsls	r3, r3, #3
 800a27e:	401a      	ands	r2, r3
 800a280:	2380      	movs	r3, #128	@ 0x80
 800a282:	00db      	lsls	r3, r3, #3
 800a284:	429a      	cmp	r2, r3
 800a286:	d0ed      	beq.n	800a264 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800a288:	2300      	movs	r3, #0
}
 800a28a:	0018      	movs	r0, r3
 800a28c:	46bd      	mov	sp, r7
 800a28e:	b004      	add	sp, #16
 800a290:	bd80      	pop	{r7, pc}
 800a292:	46c0      	nop			@ (mov r8, r8)
 800a294:	40007000 	.word	0x40007000
 800a298:	fffff9ff 	.word	0xfffff9ff
 800a29c:	20000004 	.word	0x20000004
 800a2a0:	000f4240 	.word	0x000f4240

0800a2a4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800a2a8:	4b03      	ldr	r3, [pc, #12]	@ (800a2b8 <LL_RCC_GetAPB1Prescaler+0x14>)
 800a2aa:	689a      	ldr	r2, [r3, #8]
 800a2ac:	23e0      	movs	r3, #224	@ 0xe0
 800a2ae:	01db      	lsls	r3, r3, #7
 800a2b0:	4013      	ands	r3, r2
}
 800a2b2:	0018      	movs	r0, r3
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	bd80      	pop	{r7, pc}
 800a2b8:	40021000 	.word	0x40021000

0800a2bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b088      	sub	sp, #32
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d102      	bne.n	800a2d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a2ca:	2301      	movs	r3, #1
 800a2cc:	f000 fb50 	bl	800a970 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	2201      	movs	r2, #1
 800a2d6:	4013      	ands	r3, r2
 800a2d8:	d100      	bne.n	800a2dc <HAL_RCC_OscConfig+0x20>
 800a2da:	e07c      	b.n	800a3d6 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a2dc:	4bc3      	ldr	r3, [pc, #780]	@ (800a5ec <HAL_RCC_OscConfig+0x330>)
 800a2de:	689b      	ldr	r3, [r3, #8]
 800a2e0:	2238      	movs	r2, #56	@ 0x38
 800a2e2:	4013      	ands	r3, r2
 800a2e4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a2e6:	4bc1      	ldr	r3, [pc, #772]	@ (800a5ec <HAL_RCC_OscConfig+0x330>)
 800a2e8:	68db      	ldr	r3, [r3, #12]
 800a2ea:	2203      	movs	r2, #3
 800a2ec:	4013      	ands	r3, r2
 800a2ee:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800a2f0:	69bb      	ldr	r3, [r7, #24]
 800a2f2:	2b10      	cmp	r3, #16
 800a2f4:	d102      	bne.n	800a2fc <HAL_RCC_OscConfig+0x40>
 800a2f6:	697b      	ldr	r3, [r7, #20]
 800a2f8:	2b03      	cmp	r3, #3
 800a2fa:	d002      	beq.n	800a302 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800a2fc:	69bb      	ldr	r3, [r7, #24]
 800a2fe:	2b08      	cmp	r3, #8
 800a300:	d10b      	bne.n	800a31a <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a302:	4bba      	ldr	r3, [pc, #744]	@ (800a5ec <HAL_RCC_OscConfig+0x330>)
 800a304:	681a      	ldr	r2, [r3, #0]
 800a306:	2380      	movs	r3, #128	@ 0x80
 800a308:	029b      	lsls	r3, r3, #10
 800a30a:	4013      	ands	r3, r2
 800a30c:	d062      	beq.n	800a3d4 <HAL_RCC_OscConfig+0x118>
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	685b      	ldr	r3, [r3, #4]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d15e      	bne.n	800a3d4 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 800a316:	2301      	movs	r3, #1
 800a318:	e32a      	b.n	800a970 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	685a      	ldr	r2, [r3, #4]
 800a31e:	2380      	movs	r3, #128	@ 0x80
 800a320:	025b      	lsls	r3, r3, #9
 800a322:	429a      	cmp	r2, r3
 800a324:	d107      	bne.n	800a336 <HAL_RCC_OscConfig+0x7a>
 800a326:	4bb1      	ldr	r3, [pc, #708]	@ (800a5ec <HAL_RCC_OscConfig+0x330>)
 800a328:	681a      	ldr	r2, [r3, #0]
 800a32a:	4bb0      	ldr	r3, [pc, #704]	@ (800a5ec <HAL_RCC_OscConfig+0x330>)
 800a32c:	2180      	movs	r1, #128	@ 0x80
 800a32e:	0249      	lsls	r1, r1, #9
 800a330:	430a      	orrs	r2, r1
 800a332:	601a      	str	r2, [r3, #0]
 800a334:	e020      	b.n	800a378 <HAL_RCC_OscConfig+0xbc>
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	685a      	ldr	r2, [r3, #4]
 800a33a:	23a0      	movs	r3, #160	@ 0xa0
 800a33c:	02db      	lsls	r3, r3, #11
 800a33e:	429a      	cmp	r2, r3
 800a340:	d10e      	bne.n	800a360 <HAL_RCC_OscConfig+0xa4>
 800a342:	4baa      	ldr	r3, [pc, #680]	@ (800a5ec <HAL_RCC_OscConfig+0x330>)
 800a344:	681a      	ldr	r2, [r3, #0]
 800a346:	4ba9      	ldr	r3, [pc, #676]	@ (800a5ec <HAL_RCC_OscConfig+0x330>)
 800a348:	2180      	movs	r1, #128	@ 0x80
 800a34a:	02c9      	lsls	r1, r1, #11
 800a34c:	430a      	orrs	r2, r1
 800a34e:	601a      	str	r2, [r3, #0]
 800a350:	4ba6      	ldr	r3, [pc, #664]	@ (800a5ec <HAL_RCC_OscConfig+0x330>)
 800a352:	681a      	ldr	r2, [r3, #0]
 800a354:	4ba5      	ldr	r3, [pc, #660]	@ (800a5ec <HAL_RCC_OscConfig+0x330>)
 800a356:	2180      	movs	r1, #128	@ 0x80
 800a358:	0249      	lsls	r1, r1, #9
 800a35a:	430a      	orrs	r2, r1
 800a35c:	601a      	str	r2, [r3, #0]
 800a35e:	e00b      	b.n	800a378 <HAL_RCC_OscConfig+0xbc>
 800a360:	4ba2      	ldr	r3, [pc, #648]	@ (800a5ec <HAL_RCC_OscConfig+0x330>)
 800a362:	681a      	ldr	r2, [r3, #0]
 800a364:	4ba1      	ldr	r3, [pc, #644]	@ (800a5ec <HAL_RCC_OscConfig+0x330>)
 800a366:	49a2      	ldr	r1, [pc, #648]	@ (800a5f0 <HAL_RCC_OscConfig+0x334>)
 800a368:	400a      	ands	r2, r1
 800a36a:	601a      	str	r2, [r3, #0]
 800a36c:	4b9f      	ldr	r3, [pc, #636]	@ (800a5ec <HAL_RCC_OscConfig+0x330>)
 800a36e:	681a      	ldr	r2, [r3, #0]
 800a370:	4b9e      	ldr	r3, [pc, #632]	@ (800a5ec <HAL_RCC_OscConfig+0x330>)
 800a372:	49a0      	ldr	r1, [pc, #640]	@ (800a5f4 <HAL_RCC_OscConfig+0x338>)
 800a374:	400a      	ands	r2, r1
 800a376:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	685b      	ldr	r3, [r3, #4]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d014      	beq.n	800a3aa <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a380:	f7fe fc5e 	bl	8008c40 <HAL_GetTick>
 800a384:	0003      	movs	r3, r0
 800a386:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a388:	e008      	b.n	800a39c <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a38a:	f7fe fc59 	bl	8008c40 <HAL_GetTick>
 800a38e:	0002      	movs	r2, r0
 800a390:	693b      	ldr	r3, [r7, #16]
 800a392:	1ad3      	subs	r3, r2, r3
 800a394:	2b64      	cmp	r3, #100	@ 0x64
 800a396:	d901      	bls.n	800a39c <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 800a398:	2303      	movs	r3, #3
 800a39a:	e2e9      	b.n	800a970 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a39c:	4b93      	ldr	r3, [pc, #588]	@ (800a5ec <HAL_RCC_OscConfig+0x330>)
 800a39e:	681a      	ldr	r2, [r3, #0]
 800a3a0:	2380      	movs	r3, #128	@ 0x80
 800a3a2:	029b      	lsls	r3, r3, #10
 800a3a4:	4013      	ands	r3, r2
 800a3a6:	d0f0      	beq.n	800a38a <HAL_RCC_OscConfig+0xce>
 800a3a8:	e015      	b.n	800a3d6 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a3aa:	f7fe fc49 	bl	8008c40 <HAL_GetTick>
 800a3ae:	0003      	movs	r3, r0
 800a3b0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a3b2:	e008      	b.n	800a3c6 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a3b4:	f7fe fc44 	bl	8008c40 <HAL_GetTick>
 800a3b8:	0002      	movs	r2, r0
 800a3ba:	693b      	ldr	r3, [r7, #16]
 800a3bc:	1ad3      	subs	r3, r2, r3
 800a3be:	2b64      	cmp	r3, #100	@ 0x64
 800a3c0:	d901      	bls.n	800a3c6 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800a3c2:	2303      	movs	r3, #3
 800a3c4:	e2d4      	b.n	800a970 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a3c6:	4b89      	ldr	r3, [pc, #548]	@ (800a5ec <HAL_RCC_OscConfig+0x330>)
 800a3c8:	681a      	ldr	r2, [r3, #0]
 800a3ca:	2380      	movs	r3, #128	@ 0x80
 800a3cc:	029b      	lsls	r3, r3, #10
 800a3ce:	4013      	ands	r3, r2
 800a3d0:	d1f0      	bne.n	800a3b4 <HAL_RCC_OscConfig+0xf8>
 800a3d2:	e000      	b.n	800a3d6 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a3d4:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	2202      	movs	r2, #2
 800a3dc:	4013      	ands	r3, r2
 800a3de:	d100      	bne.n	800a3e2 <HAL_RCC_OscConfig+0x126>
 800a3e0:	e099      	b.n	800a516 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a3e2:	4b82      	ldr	r3, [pc, #520]	@ (800a5ec <HAL_RCC_OscConfig+0x330>)
 800a3e4:	689b      	ldr	r3, [r3, #8]
 800a3e6:	2238      	movs	r2, #56	@ 0x38
 800a3e8:	4013      	ands	r3, r2
 800a3ea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a3ec:	4b7f      	ldr	r3, [pc, #508]	@ (800a5ec <HAL_RCC_OscConfig+0x330>)
 800a3ee:	68db      	ldr	r3, [r3, #12]
 800a3f0:	2203      	movs	r2, #3
 800a3f2:	4013      	ands	r3, r2
 800a3f4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800a3f6:	69bb      	ldr	r3, [r7, #24]
 800a3f8:	2b10      	cmp	r3, #16
 800a3fa:	d102      	bne.n	800a402 <HAL_RCC_OscConfig+0x146>
 800a3fc:	697b      	ldr	r3, [r7, #20]
 800a3fe:	2b02      	cmp	r3, #2
 800a400:	d002      	beq.n	800a408 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800a402:	69bb      	ldr	r3, [r7, #24]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d135      	bne.n	800a474 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a408:	4b78      	ldr	r3, [pc, #480]	@ (800a5ec <HAL_RCC_OscConfig+0x330>)
 800a40a:	681a      	ldr	r2, [r3, #0]
 800a40c:	2380      	movs	r3, #128	@ 0x80
 800a40e:	00db      	lsls	r3, r3, #3
 800a410:	4013      	ands	r3, r2
 800a412:	d005      	beq.n	800a420 <HAL_RCC_OscConfig+0x164>
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	68db      	ldr	r3, [r3, #12]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d101      	bne.n	800a420 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 800a41c:	2301      	movs	r3, #1
 800a41e:	e2a7      	b.n	800a970 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a420:	4b72      	ldr	r3, [pc, #456]	@ (800a5ec <HAL_RCC_OscConfig+0x330>)
 800a422:	685b      	ldr	r3, [r3, #4]
 800a424:	4a74      	ldr	r2, [pc, #464]	@ (800a5f8 <HAL_RCC_OscConfig+0x33c>)
 800a426:	4013      	ands	r3, r2
 800a428:	0019      	movs	r1, r3
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	695b      	ldr	r3, [r3, #20]
 800a42e:	021a      	lsls	r2, r3, #8
 800a430:	4b6e      	ldr	r3, [pc, #440]	@ (800a5ec <HAL_RCC_OscConfig+0x330>)
 800a432:	430a      	orrs	r2, r1
 800a434:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a436:	69bb      	ldr	r3, [r7, #24]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d112      	bne.n	800a462 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800a43c:	4b6b      	ldr	r3, [pc, #428]	@ (800a5ec <HAL_RCC_OscConfig+0x330>)
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	4a6e      	ldr	r2, [pc, #440]	@ (800a5fc <HAL_RCC_OscConfig+0x340>)
 800a442:	4013      	ands	r3, r2
 800a444:	0019      	movs	r1, r3
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	691a      	ldr	r2, [r3, #16]
 800a44a:	4b68      	ldr	r3, [pc, #416]	@ (800a5ec <HAL_RCC_OscConfig+0x330>)
 800a44c:	430a      	orrs	r2, r1
 800a44e:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800a450:	4b66      	ldr	r3, [pc, #408]	@ (800a5ec <HAL_RCC_OscConfig+0x330>)
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	0adb      	lsrs	r3, r3, #11
 800a456:	2207      	movs	r2, #7
 800a458:	4013      	ands	r3, r2
 800a45a:	4a69      	ldr	r2, [pc, #420]	@ (800a600 <HAL_RCC_OscConfig+0x344>)
 800a45c:	40da      	lsrs	r2, r3
 800a45e:	4b69      	ldr	r3, [pc, #420]	@ (800a604 <HAL_RCC_OscConfig+0x348>)
 800a460:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800a462:	4b69      	ldr	r3, [pc, #420]	@ (800a608 <HAL_RCC_OscConfig+0x34c>)
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	0018      	movs	r0, r3
 800a468:	f7fe fb8e 	bl	8008b88 <HAL_InitTick>
 800a46c:	1e03      	subs	r3, r0, #0
 800a46e:	d051      	beq.n	800a514 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 800a470:	2301      	movs	r3, #1
 800a472:	e27d      	b.n	800a970 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	68db      	ldr	r3, [r3, #12]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d030      	beq.n	800a4de <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800a47c:	4b5b      	ldr	r3, [pc, #364]	@ (800a5ec <HAL_RCC_OscConfig+0x330>)
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	4a5e      	ldr	r2, [pc, #376]	@ (800a5fc <HAL_RCC_OscConfig+0x340>)
 800a482:	4013      	ands	r3, r2
 800a484:	0019      	movs	r1, r3
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	691a      	ldr	r2, [r3, #16]
 800a48a:	4b58      	ldr	r3, [pc, #352]	@ (800a5ec <HAL_RCC_OscConfig+0x330>)
 800a48c:	430a      	orrs	r2, r1
 800a48e:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800a490:	4b56      	ldr	r3, [pc, #344]	@ (800a5ec <HAL_RCC_OscConfig+0x330>)
 800a492:	681a      	ldr	r2, [r3, #0]
 800a494:	4b55      	ldr	r3, [pc, #340]	@ (800a5ec <HAL_RCC_OscConfig+0x330>)
 800a496:	2180      	movs	r1, #128	@ 0x80
 800a498:	0049      	lsls	r1, r1, #1
 800a49a:	430a      	orrs	r2, r1
 800a49c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a49e:	f7fe fbcf 	bl	8008c40 <HAL_GetTick>
 800a4a2:	0003      	movs	r3, r0
 800a4a4:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a4a6:	e008      	b.n	800a4ba <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a4a8:	f7fe fbca 	bl	8008c40 <HAL_GetTick>
 800a4ac:	0002      	movs	r2, r0
 800a4ae:	693b      	ldr	r3, [r7, #16]
 800a4b0:	1ad3      	subs	r3, r2, r3
 800a4b2:	2b02      	cmp	r3, #2
 800a4b4:	d901      	bls.n	800a4ba <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800a4b6:	2303      	movs	r3, #3
 800a4b8:	e25a      	b.n	800a970 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a4ba:	4b4c      	ldr	r3, [pc, #304]	@ (800a5ec <HAL_RCC_OscConfig+0x330>)
 800a4bc:	681a      	ldr	r2, [r3, #0]
 800a4be:	2380      	movs	r3, #128	@ 0x80
 800a4c0:	00db      	lsls	r3, r3, #3
 800a4c2:	4013      	ands	r3, r2
 800a4c4:	d0f0      	beq.n	800a4a8 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a4c6:	4b49      	ldr	r3, [pc, #292]	@ (800a5ec <HAL_RCC_OscConfig+0x330>)
 800a4c8:	685b      	ldr	r3, [r3, #4]
 800a4ca:	4a4b      	ldr	r2, [pc, #300]	@ (800a5f8 <HAL_RCC_OscConfig+0x33c>)
 800a4cc:	4013      	ands	r3, r2
 800a4ce:	0019      	movs	r1, r3
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	695b      	ldr	r3, [r3, #20]
 800a4d4:	021a      	lsls	r2, r3, #8
 800a4d6:	4b45      	ldr	r3, [pc, #276]	@ (800a5ec <HAL_RCC_OscConfig+0x330>)
 800a4d8:	430a      	orrs	r2, r1
 800a4da:	605a      	str	r2, [r3, #4]
 800a4dc:	e01b      	b.n	800a516 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800a4de:	4b43      	ldr	r3, [pc, #268]	@ (800a5ec <HAL_RCC_OscConfig+0x330>)
 800a4e0:	681a      	ldr	r2, [r3, #0]
 800a4e2:	4b42      	ldr	r3, [pc, #264]	@ (800a5ec <HAL_RCC_OscConfig+0x330>)
 800a4e4:	4949      	ldr	r1, [pc, #292]	@ (800a60c <HAL_RCC_OscConfig+0x350>)
 800a4e6:	400a      	ands	r2, r1
 800a4e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a4ea:	f7fe fba9 	bl	8008c40 <HAL_GetTick>
 800a4ee:	0003      	movs	r3, r0
 800a4f0:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a4f2:	e008      	b.n	800a506 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a4f4:	f7fe fba4 	bl	8008c40 <HAL_GetTick>
 800a4f8:	0002      	movs	r2, r0
 800a4fa:	693b      	ldr	r3, [r7, #16]
 800a4fc:	1ad3      	subs	r3, r2, r3
 800a4fe:	2b02      	cmp	r3, #2
 800a500:	d901      	bls.n	800a506 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 800a502:	2303      	movs	r3, #3
 800a504:	e234      	b.n	800a970 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a506:	4b39      	ldr	r3, [pc, #228]	@ (800a5ec <HAL_RCC_OscConfig+0x330>)
 800a508:	681a      	ldr	r2, [r3, #0]
 800a50a:	2380      	movs	r3, #128	@ 0x80
 800a50c:	00db      	lsls	r3, r3, #3
 800a50e:	4013      	ands	r3, r2
 800a510:	d1f0      	bne.n	800a4f4 <HAL_RCC_OscConfig+0x238>
 800a512:	e000      	b.n	800a516 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a514:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	2208      	movs	r2, #8
 800a51c:	4013      	ands	r3, r2
 800a51e:	d047      	beq.n	800a5b0 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800a520:	4b32      	ldr	r3, [pc, #200]	@ (800a5ec <HAL_RCC_OscConfig+0x330>)
 800a522:	689b      	ldr	r3, [r3, #8]
 800a524:	2238      	movs	r2, #56	@ 0x38
 800a526:	4013      	ands	r3, r2
 800a528:	2b18      	cmp	r3, #24
 800a52a:	d10a      	bne.n	800a542 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800a52c:	4b2f      	ldr	r3, [pc, #188]	@ (800a5ec <HAL_RCC_OscConfig+0x330>)
 800a52e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a530:	2202      	movs	r2, #2
 800a532:	4013      	ands	r3, r2
 800a534:	d03c      	beq.n	800a5b0 <HAL_RCC_OscConfig+0x2f4>
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	699b      	ldr	r3, [r3, #24]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d138      	bne.n	800a5b0 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800a53e:	2301      	movs	r3, #1
 800a540:	e216      	b.n	800a970 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	699b      	ldr	r3, [r3, #24]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d019      	beq.n	800a57e <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800a54a:	4b28      	ldr	r3, [pc, #160]	@ (800a5ec <HAL_RCC_OscConfig+0x330>)
 800a54c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800a54e:	4b27      	ldr	r3, [pc, #156]	@ (800a5ec <HAL_RCC_OscConfig+0x330>)
 800a550:	2101      	movs	r1, #1
 800a552:	430a      	orrs	r2, r1
 800a554:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a556:	f7fe fb73 	bl	8008c40 <HAL_GetTick>
 800a55a:	0003      	movs	r3, r0
 800a55c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a55e:	e008      	b.n	800a572 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a560:	f7fe fb6e 	bl	8008c40 <HAL_GetTick>
 800a564:	0002      	movs	r2, r0
 800a566:	693b      	ldr	r3, [r7, #16]
 800a568:	1ad3      	subs	r3, r2, r3
 800a56a:	2b02      	cmp	r3, #2
 800a56c:	d901      	bls.n	800a572 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 800a56e:	2303      	movs	r3, #3
 800a570:	e1fe      	b.n	800a970 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a572:	4b1e      	ldr	r3, [pc, #120]	@ (800a5ec <HAL_RCC_OscConfig+0x330>)
 800a574:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a576:	2202      	movs	r2, #2
 800a578:	4013      	ands	r3, r2
 800a57a:	d0f1      	beq.n	800a560 <HAL_RCC_OscConfig+0x2a4>
 800a57c:	e018      	b.n	800a5b0 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800a57e:	4b1b      	ldr	r3, [pc, #108]	@ (800a5ec <HAL_RCC_OscConfig+0x330>)
 800a580:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800a582:	4b1a      	ldr	r3, [pc, #104]	@ (800a5ec <HAL_RCC_OscConfig+0x330>)
 800a584:	2101      	movs	r1, #1
 800a586:	438a      	bics	r2, r1
 800a588:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a58a:	f7fe fb59 	bl	8008c40 <HAL_GetTick>
 800a58e:	0003      	movs	r3, r0
 800a590:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a592:	e008      	b.n	800a5a6 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a594:	f7fe fb54 	bl	8008c40 <HAL_GetTick>
 800a598:	0002      	movs	r2, r0
 800a59a:	693b      	ldr	r3, [r7, #16]
 800a59c:	1ad3      	subs	r3, r2, r3
 800a59e:	2b02      	cmp	r3, #2
 800a5a0:	d901      	bls.n	800a5a6 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 800a5a2:	2303      	movs	r3, #3
 800a5a4:	e1e4      	b.n	800a970 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a5a6:	4b11      	ldr	r3, [pc, #68]	@ (800a5ec <HAL_RCC_OscConfig+0x330>)
 800a5a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a5aa:	2202      	movs	r2, #2
 800a5ac:	4013      	ands	r3, r2
 800a5ae:	d1f1      	bne.n	800a594 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	2204      	movs	r2, #4
 800a5b6:	4013      	ands	r3, r2
 800a5b8:	d100      	bne.n	800a5bc <HAL_RCC_OscConfig+0x300>
 800a5ba:	e0c7      	b.n	800a74c <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a5bc:	231f      	movs	r3, #31
 800a5be:	18fb      	adds	r3, r7, r3
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800a5c4:	4b09      	ldr	r3, [pc, #36]	@ (800a5ec <HAL_RCC_OscConfig+0x330>)
 800a5c6:	689b      	ldr	r3, [r3, #8]
 800a5c8:	2238      	movs	r2, #56	@ 0x38
 800a5ca:	4013      	ands	r3, r2
 800a5cc:	2b20      	cmp	r3, #32
 800a5ce:	d11f      	bne.n	800a610 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800a5d0:	4b06      	ldr	r3, [pc, #24]	@ (800a5ec <HAL_RCC_OscConfig+0x330>)
 800a5d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a5d4:	2202      	movs	r2, #2
 800a5d6:	4013      	ands	r3, r2
 800a5d8:	d100      	bne.n	800a5dc <HAL_RCC_OscConfig+0x320>
 800a5da:	e0b7      	b.n	800a74c <HAL_RCC_OscConfig+0x490>
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	689b      	ldr	r3, [r3, #8]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d000      	beq.n	800a5e6 <HAL_RCC_OscConfig+0x32a>
 800a5e4:	e0b2      	b.n	800a74c <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 800a5e6:	2301      	movs	r3, #1
 800a5e8:	e1c2      	b.n	800a970 <HAL_RCC_OscConfig+0x6b4>
 800a5ea:	46c0      	nop			@ (mov r8, r8)
 800a5ec:	40021000 	.word	0x40021000
 800a5f0:	fffeffff 	.word	0xfffeffff
 800a5f4:	fffbffff 	.word	0xfffbffff
 800a5f8:	ffff80ff 	.word	0xffff80ff
 800a5fc:	ffffc7ff 	.word	0xffffc7ff
 800a600:	00f42400 	.word	0x00f42400
 800a604:	20000004 	.word	0x20000004
 800a608:	20000008 	.word	0x20000008
 800a60c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800a610:	4bb5      	ldr	r3, [pc, #724]	@ (800a8e8 <HAL_RCC_OscConfig+0x62c>)
 800a612:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a614:	2380      	movs	r3, #128	@ 0x80
 800a616:	055b      	lsls	r3, r3, #21
 800a618:	4013      	ands	r3, r2
 800a61a:	d101      	bne.n	800a620 <HAL_RCC_OscConfig+0x364>
 800a61c:	2301      	movs	r3, #1
 800a61e:	e000      	b.n	800a622 <HAL_RCC_OscConfig+0x366>
 800a620:	2300      	movs	r3, #0
 800a622:	2b00      	cmp	r3, #0
 800a624:	d011      	beq.n	800a64a <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800a626:	4bb0      	ldr	r3, [pc, #704]	@ (800a8e8 <HAL_RCC_OscConfig+0x62c>)
 800a628:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a62a:	4baf      	ldr	r3, [pc, #700]	@ (800a8e8 <HAL_RCC_OscConfig+0x62c>)
 800a62c:	2180      	movs	r1, #128	@ 0x80
 800a62e:	0549      	lsls	r1, r1, #21
 800a630:	430a      	orrs	r2, r1
 800a632:	63da      	str	r2, [r3, #60]	@ 0x3c
 800a634:	4bac      	ldr	r3, [pc, #688]	@ (800a8e8 <HAL_RCC_OscConfig+0x62c>)
 800a636:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a638:	2380      	movs	r3, #128	@ 0x80
 800a63a:	055b      	lsls	r3, r3, #21
 800a63c:	4013      	ands	r3, r2
 800a63e:	60fb      	str	r3, [r7, #12]
 800a640:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800a642:	231f      	movs	r3, #31
 800a644:	18fb      	adds	r3, r7, r3
 800a646:	2201      	movs	r2, #1
 800a648:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a64a:	4ba8      	ldr	r3, [pc, #672]	@ (800a8ec <HAL_RCC_OscConfig+0x630>)
 800a64c:	681a      	ldr	r2, [r3, #0]
 800a64e:	2380      	movs	r3, #128	@ 0x80
 800a650:	005b      	lsls	r3, r3, #1
 800a652:	4013      	ands	r3, r2
 800a654:	d11a      	bne.n	800a68c <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a656:	4ba5      	ldr	r3, [pc, #660]	@ (800a8ec <HAL_RCC_OscConfig+0x630>)
 800a658:	681a      	ldr	r2, [r3, #0]
 800a65a:	4ba4      	ldr	r3, [pc, #656]	@ (800a8ec <HAL_RCC_OscConfig+0x630>)
 800a65c:	2180      	movs	r1, #128	@ 0x80
 800a65e:	0049      	lsls	r1, r1, #1
 800a660:	430a      	orrs	r2, r1
 800a662:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800a664:	f7fe faec 	bl	8008c40 <HAL_GetTick>
 800a668:	0003      	movs	r3, r0
 800a66a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a66c:	e008      	b.n	800a680 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a66e:	f7fe fae7 	bl	8008c40 <HAL_GetTick>
 800a672:	0002      	movs	r2, r0
 800a674:	693b      	ldr	r3, [r7, #16]
 800a676:	1ad3      	subs	r3, r2, r3
 800a678:	2b02      	cmp	r3, #2
 800a67a:	d901      	bls.n	800a680 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 800a67c:	2303      	movs	r3, #3
 800a67e:	e177      	b.n	800a970 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a680:	4b9a      	ldr	r3, [pc, #616]	@ (800a8ec <HAL_RCC_OscConfig+0x630>)
 800a682:	681a      	ldr	r2, [r3, #0]
 800a684:	2380      	movs	r3, #128	@ 0x80
 800a686:	005b      	lsls	r3, r3, #1
 800a688:	4013      	ands	r3, r2
 800a68a:	d0f0      	beq.n	800a66e <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	689b      	ldr	r3, [r3, #8]
 800a690:	2b01      	cmp	r3, #1
 800a692:	d106      	bne.n	800a6a2 <HAL_RCC_OscConfig+0x3e6>
 800a694:	4b94      	ldr	r3, [pc, #592]	@ (800a8e8 <HAL_RCC_OscConfig+0x62c>)
 800a696:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a698:	4b93      	ldr	r3, [pc, #588]	@ (800a8e8 <HAL_RCC_OscConfig+0x62c>)
 800a69a:	2101      	movs	r1, #1
 800a69c:	430a      	orrs	r2, r1
 800a69e:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a6a0:	e01c      	b.n	800a6dc <HAL_RCC_OscConfig+0x420>
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	689b      	ldr	r3, [r3, #8]
 800a6a6:	2b05      	cmp	r3, #5
 800a6a8:	d10c      	bne.n	800a6c4 <HAL_RCC_OscConfig+0x408>
 800a6aa:	4b8f      	ldr	r3, [pc, #572]	@ (800a8e8 <HAL_RCC_OscConfig+0x62c>)
 800a6ac:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a6ae:	4b8e      	ldr	r3, [pc, #568]	@ (800a8e8 <HAL_RCC_OscConfig+0x62c>)
 800a6b0:	2104      	movs	r1, #4
 800a6b2:	430a      	orrs	r2, r1
 800a6b4:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a6b6:	4b8c      	ldr	r3, [pc, #560]	@ (800a8e8 <HAL_RCC_OscConfig+0x62c>)
 800a6b8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a6ba:	4b8b      	ldr	r3, [pc, #556]	@ (800a8e8 <HAL_RCC_OscConfig+0x62c>)
 800a6bc:	2101      	movs	r1, #1
 800a6be:	430a      	orrs	r2, r1
 800a6c0:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a6c2:	e00b      	b.n	800a6dc <HAL_RCC_OscConfig+0x420>
 800a6c4:	4b88      	ldr	r3, [pc, #544]	@ (800a8e8 <HAL_RCC_OscConfig+0x62c>)
 800a6c6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a6c8:	4b87      	ldr	r3, [pc, #540]	@ (800a8e8 <HAL_RCC_OscConfig+0x62c>)
 800a6ca:	2101      	movs	r1, #1
 800a6cc:	438a      	bics	r2, r1
 800a6ce:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a6d0:	4b85      	ldr	r3, [pc, #532]	@ (800a8e8 <HAL_RCC_OscConfig+0x62c>)
 800a6d2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a6d4:	4b84      	ldr	r3, [pc, #528]	@ (800a8e8 <HAL_RCC_OscConfig+0x62c>)
 800a6d6:	2104      	movs	r1, #4
 800a6d8:	438a      	bics	r2, r1
 800a6da:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	689b      	ldr	r3, [r3, #8]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d014      	beq.n	800a70e <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6e4:	f7fe faac 	bl	8008c40 <HAL_GetTick>
 800a6e8:	0003      	movs	r3, r0
 800a6ea:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a6ec:	e009      	b.n	800a702 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a6ee:	f7fe faa7 	bl	8008c40 <HAL_GetTick>
 800a6f2:	0002      	movs	r2, r0
 800a6f4:	693b      	ldr	r3, [r7, #16]
 800a6f6:	1ad3      	subs	r3, r2, r3
 800a6f8:	4a7d      	ldr	r2, [pc, #500]	@ (800a8f0 <HAL_RCC_OscConfig+0x634>)
 800a6fa:	4293      	cmp	r3, r2
 800a6fc:	d901      	bls.n	800a702 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800a6fe:	2303      	movs	r3, #3
 800a700:	e136      	b.n	800a970 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a702:	4b79      	ldr	r3, [pc, #484]	@ (800a8e8 <HAL_RCC_OscConfig+0x62c>)
 800a704:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a706:	2202      	movs	r2, #2
 800a708:	4013      	ands	r3, r2
 800a70a:	d0f0      	beq.n	800a6ee <HAL_RCC_OscConfig+0x432>
 800a70c:	e013      	b.n	800a736 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a70e:	f7fe fa97 	bl	8008c40 <HAL_GetTick>
 800a712:	0003      	movs	r3, r0
 800a714:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a716:	e009      	b.n	800a72c <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a718:	f7fe fa92 	bl	8008c40 <HAL_GetTick>
 800a71c:	0002      	movs	r2, r0
 800a71e:	693b      	ldr	r3, [r7, #16]
 800a720:	1ad3      	subs	r3, r2, r3
 800a722:	4a73      	ldr	r2, [pc, #460]	@ (800a8f0 <HAL_RCC_OscConfig+0x634>)
 800a724:	4293      	cmp	r3, r2
 800a726:	d901      	bls.n	800a72c <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 800a728:	2303      	movs	r3, #3
 800a72a:	e121      	b.n	800a970 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a72c:	4b6e      	ldr	r3, [pc, #440]	@ (800a8e8 <HAL_RCC_OscConfig+0x62c>)
 800a72e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a730:	2202      	movs	r2, #2
 800a732:	4013      	ands	r3, r2
 800a734:	d1f0      	bne.n	800a718 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800a736:	231f      	movs	r3, #31
 800a738:	18fb      	adds	r3, r7, r3
 800a73a:	781b      	ldrb	r3, [r3, #0]
 800a73c:	2b01      	cmp	r3, #1
 800a73e:	d105      	bne.n	800a74c <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800a740:	4b69      	ldr	r3, [pc, #420]	@ (800a8e8 <HAL_RCC_OscConfig+0x62c>)
 800a742:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a744:	4b68      	ldr	r3, [pc, #416]	@ (800a8e8 <HAL_RCC_OscConfig+0x62c>)
 800a746:	496b      	ldr	r1, [pc, #428]	@ (800a8f4 <HAL_RCC_OscConfig+0x638>)
 800a748:	400a      	ands	r2, r1
 800a74a:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	2220      	movs	r2, #32
 800a752:	4013      	ands	r3, r2
 800a754:	d039      	beq.n	800a7ca <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	69db      	ldr	r3, [r3, #28]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d01b      	beq.n	800a796 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a75e:	4b62      	ldr	r3, [pc, #392]	@ (800a8e8 <HAL_RCC_OscConfig+0x62c>)
 800a760:	681a      	ldr	r2, [r3, #0]
 800a762:	4b61      	ldr	r3, [pc, #388]	@ (800a8e8 <HAL_RCC_OscConfig+0x62c>)
 800a764:	2180      	movs	r1, #128	@ 0x80
 800a766:	03c9      	lsls	r1, r1, #15
 800a768:	430a      	orrs	r2, r1
 800a76a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a76c:	f7fe fa68 	bl	8008c40 <HAL_GetTick>
 800a770:	0003      	movs	r3, r0
 800a772:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800a774:	e008      	b.n	800a788 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a776:	f7fe fa63 	bl	8008c40 <HAL_GetTick>
 800a77a:	0002      	movs	r2, r0
 800a77c:	693b      	ldr	r3, [r7, #16]
 800a77e:	1ad3      	subs	r3, r2, r3
 800a780:	2b02      	cmp	r3, #2
 800a782:	d901      	bls.n	800a788 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 800a784:	2303      	movs	r3, #3
 800a786:	e0f3      	b.n	800a970 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800a788:	4b57      	ldr	r3, [pc, #348]	@ (800a8e8 <HAL_RCC_OscConfig+0x62c>)
 800a78a:	681a      	ldr	r2, [r3, #0]
 800a78c:	2380      	movs	r3, #128	@ 0x80
 800a78e:	041b      	lsls	r3, r3, #16
 800a790:	4013      	ands	r3, r2
 800a792:	d0f0      	beq.n	800a776 <HAL_RCC_OscConfig+0x4ba>
 800a794:	e019      	b.n	800a7ca <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a796:	4b54      	ldr	r3, [pc, #336]	@ (800a8e8 <HAL_RCC_OscConfig+0x62c>)
 800a798:	681a      	ldr	r2, [r3, #0]
 800a79a:	4b53      	ldr	r3, [pc, #332]	@ (800a8e8 <HAL_RCC_OscConfig+0x62c>)
 800a79c:	4956      	ldr	r1, [pc, #344]	@ (800a8f8 <HAL_RCC_OscConfig+0x63c>)
 800a79e:	400a      	ands	r2, r1
 800a7a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a7a2:	f7fe fa4d 	bl	8008c40 <HAL_GetTick>
 800a7a6:	0003      	movs	r3, r0
 800a7a8:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800a7aa:	e008      	b.n	800a7be <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a7ac:	f7fe fa48 	bl	8008c40 <HAL_GetTick>
 800a7b0:	0002      	movs	r2, r0
 800a7b2:	693b      	ldr	r3, [r7, #16]
 800a7b4:	1ad3      	subs	r3, r2, r3
 800a7b6:	2b02      	cmp	r3, #2
 800a7b8:	d901      	bls.n	800a7be <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 800a7ba:	2303      	movs	r3, #3
 800a7bc:	e0d8      	b.n	800a970 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800a7be:	4b4a      	ldr	r3, [pc, #296]	@ (800a8e8 <HAL_RCC_OscConfig+0x62c>)
 800a7c0:	681a      	ldr	r2, [r3, #0]
 800a7c2:	2380      	movs	r3, #128	@ 0x80
 800a7c4:	041b      	lsls	r3, r3, #16
 800a7c6:	4013      	ands	r3, r2
 800a7c8:	d1f0      	bne.n	800a7ac <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	6a1b      	ldr	r3, [r3, #32]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d100      	bne.n	800a7d4 <HAL_RCC_OscConfig+0x518>
 800a7d2:	e0cc      	b.n	800a96e <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a7d4:	4b44      	ldr	r3, [pc, #272]	@ (800a8e8 <HAL_RCC_OscConfig+0x62c>)
 800a7d6:	689b      	ldr	r3, [r3, #8]
 800a7d8:	2238      	movs	r2, #56	@ 0x38
 800a7da:	4013      	ands	r3, r2
 800a7dc:	2b10      	cmp	r3, #16
 800a7de:	d100      	bne.n	800a7e2 <HAL_RCC_OscConfig+0x526>
 800a7e0:	e07b      	b.n	800a8da <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	6a1b      	ldr	r3, [r3, #32]
 800a7e6:	2b02      	cmp	r3, #2
 800a7e8:	d156      	bne.n	800a898 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a7ea:	4b3f      	ldr	r3, [pc, #252]	@ (800a8e8 <HAL_RCC_OscConfig+0x62c>)
 800a7ec:	681a      	ldr	r2, [r3, #0]
 800a7ee:	4b3e      	ldr	r3, [pc, #248]	@ (800a8e8 <HAL_RCC_OscConfig+0x62c>)
 800a7f0:	4942      	ldr	r1, [pc, #264]	@ (800a8fc <HAL_RCC_OscConfig+0x640>)
 800a7f2:	400a      	ands	r2, r1
 800a7f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a7f6:	f7fe fa23 	bl	8008c40 <HAL_GetTick>
 800a7fa:	0003      	movs	r3, r0
 800a7fc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a7fe:	e008      	b.n	800a812 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a800:	f7fe fa1e 	bl	8008c40 <HAL_GetTick>
 800a804:	0002      	movs	r2, r0
 800a806:	693b      	ldr	r3, [r7, #16]
 800a808:	1ad3      	subs	r3, r2, r3
 800a80a:	2b02      	cmp	r3, #2
 800a80c:	d901      	bls.n	800a812 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 800a80e:	2303      	movs	r3, #3
 800a810:	e0ae      	b.n	800a970 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a812:	4b35      	ldr	r3, [pc, #212]	@ (800a8e8 <HAL_RCC_OscConfig+0x62c>)
 800a814:	681a      	ldr	r2, [r3, #0]
 800a816:	2380      	movs	r3, #128	@ 0x80
 800a818:	049b      	lsls	r3, r3, #18
 800a81a:	4013      	ands	r3, r2
 800a81c:	d1f0      	bne.n	800a800 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a81e:	4b32      	ldr	r3, [pc, #200]	@ (800a8e8 <HAL_RCC_OscConfig+0x62c>)
 800a820:	68db      	ldr	r3, [r3, #12]
 800a822:	4a37      	ldr	r2, [pc, #220]	@ (800a900 <HAL_RCC_OscConfig+0x644>)
 800a824:	4013      	ands	r3, r2
 800a826:	0019      	movs	r1, r3
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a830:	431a      	orrs	r2, r3
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a836:	021b      	lsls	r3, r3, #8
 800a838:	431a      	orrs	r2, r3
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a83e:	431a      	orrs	r2, r3
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a844:	431a      	orrs	r2, r3
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a84a:	431a      	orrs	r2, r3
 800a84c:	4b26      	ldr	r3, [pc, #152]	@ (800a8e8 <HAL_RCC_OscConfig+0x62c>)
 800a84e:	430a      	orrs	r2, r1
 800a850:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a852:	4b25      	ldr	r3, [pc, #148]	@ (800a8e8 <HAL_RCC_OscConfig+0x62c>)
 800a854:	681a      	ldr	r2, [r3, #0]
 800a856:	4b24      	ldr	r3, [pc, #144]	@ (800a8e8 <HAL_RCC_OscConfig+0x62c>)
 800a858:	2180      	movs	r1, #128	@ 0x80
 800a85a:	0449      	lsls	r1, r1, #17
 800a85c:	430a      	orrs	r2, r1
 800a85e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800a860:	4b21      	ldr	r3, [pc, #132]	@ (800a8e8 <HAL_RCC_OscConfig+0x62c>)
 800a862:	68da      	ldr	r2, [r3, #12]
 800a864:	4b20      	ldr	r3, [pc, #128]	@ (800a8e8 <HAL_RCC_OscConfig+0x62c>)
 800a866:	2180      	movs	r1, #128	@ 0x80
 800a868:	0549      	lsls	r1, r1, #21
 800a86a:	430a      	orrs	r2, r1
 800a86c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a86e:	f7fe f9e7 	bl	8008c40 <HAL_GetTick>
 800a872:	0003      	movs	r3, r0
 800a874:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a876:	e008      	b.n	800a88a <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a878:	f7fe f9e2 	bl	8008c40 <HAL_GetTick>
 800a87c:	0002      	movs	r2, r0
 800a87e:	693b      	ldr	r3, [r7, #16]
 800a880:	1ad3      	subs	r3, r2, r3
 800a882:	2b02      	cmp	r3, #2
 800a884:	d901      	bls.n	800a88a <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 800a886:	2303      	movs	r3, #3
 800a888:	e072      	b.n	800a970 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a88a:	4b17      	ldr	r3, [pc, #92]	@ (800a8e8 <HAL_RCC_OscConfig+0x62c>)
 800a88c:	681a      	ldr	r2, [r3, #0]
 800a88e:	2380      	movs	r3, #128	@ 0x80
 800a890:	049b      	lsls	r3, r3, #18
 800a892:	4013      	ands	r3, r2
 800a894:	d0f0      	beq.n	800a878 <HAL_RCC_OscConfig+0x5bc>
 800a896:	e06a      	b.n	800a96e <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a898:	4b13      	ldr	r3, [pc, #76]	@ (800a8e8 <HAL_RCC_OscConfig+0x62c>)
 800a89a:	681a      	ldr	r2, [r3, #0]
 800a89c:	4b12      	ldr	r3, [pc, #72]	@ (800a8e8 <HAL_RCC_OscConfig+0x62c>)
 800a89e:	4917      	ldr	r1, [pc, #92]	@ (800a8fc <HAL_RCC_OscConfig+0x640>)
 800a8a0:	400a      	ands	r2, r1
 800a8a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a8a4:	f7fe f9cc 	bl	8008c40 <HAL_GetTick>
 800a8a8:	0003      	movs	r3, r0
 800a8aa:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a8ac:	e008      	b.n	800a8c0 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a8ae:	f7fe f9c7 	bl	8008c40 <HAL_GetTick>
 800a8b2:	0002      	movs	r2, r0
 800a8b4:	693b      	ldr	r3, [r7, #16]
 800a8b6:	1ad3      	subs	r3, r2, r3
 800a8b8:	2b02      	cmp	r3, #2
 800a8ba:	d901      	bls.n	800a8c0 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 800a8bc:	2303      	movs	r3, #3
 800a8be:	e057      	b.n	800a970 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a8c0:	4b09      	ldr	r3, [pc, #36]	@ (800a8e8 <HAL_RCC_OscConfig+0x62c>)
 800a8c2:	681a      	ldr	r2, [r3, #0]
 800a8c4:	2380      	movs	r3, #128	@ 0x80
 800a8c6:	049b      	lsls	r3, r3, #18
 800a8c8:	4013      	ands	r3, r2
 800a8ca:	d1f0      	bne.n	800a8ae <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800a8cc:	4b06      	ldr	r3, [pc, #24]	@ (800a8e8 <HAL_RCC_OscConfig+0x62c>)
 800a8ce:	68da      	ldr	r2, [r3, #12]
 800a8d0:	4b05      	ldr	r3, [pc, #20]	@ (800a8e8 <HAL_RCC_OscConfig+0x62c>)
 800a8d2:	490c      	ldr	r1, [pc, #48]	@ (800a904 <HAL_RCC_OscConfig+0x648>)
 800a8d4:	400a      	ands	r2, r1
 800a8d6:	60da      	str	r2, [r3, #12]
 800a8d8:	e049      	b.n	800a96e <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	6a1b      	ldr	r3, [r3, #32]
 800a8de:	2b01      	cmp	r3, #1
 800a8e0:	d112      	bne.n	800a908 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 800a8e2:	2301      	movs	r3, #1
 800a8e4:	e044      	b.n	800a970 <HAL_RCC_OscConfig+0x6b4>
 800a8e6:	46c0      	nop			@ (mov r8, r8)
 800a8e8:	40021000 	.word	0x40021000
 800a8ec:	40007000 	.word	0x40007000
 800a8f0:	00001388 	.word	0x00001388
 800a8f4:	efffffff 	.word	0xefffffff
 800a8f8:	ffbfffff 	.word	0xffbfffff
 800a8fc:	feffffff 	.word	0xfeffffff
 800a900:	11c1808c 	.word	0x11c1808c
 800a904:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800a908:	4b1b      	ldr	r3, [pc, #108]	@ (800a978 <HAL_RCC_OscConfig+0x6bc>)
 800a90a:	68db      	ldr	r3, [r3, #12]
 800a90c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a90e:	697b      	ldr	r3, [r7, #20]
 800a910:	2203      	movs	r2, #3
 800a912:	401a      	ands	r2, r3
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a918:	429a      	cmp	r2, r3
 800a91a:	d126      	bne.n	800a96a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a91c:	697b      	ldr	r3, [r7, #20]
 800a91e:	2270      	movs	r2, #112	@ 0x70
 800a920:	401a      	ands	r2, r3
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a926:	429a      	cmp	r2, r3
 800a928:	d11f      	bne.n	800a96a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a92a:	697a      	ldr	r2, [r7, #20]
 800a92c:	23fe      	movs	r3, #254	@ 0xfe
 800a92e:	01db      	lsls	r3, r3, #7
 800a930:	401a      	ands	r2, r3
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a936:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a938:	429a      	cmp	r2, r3
 800a93a:	d116      	bne.n	800a96a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800a93c:	697a      	ldr	r2, [r7, #20]
 800a93e:	23f8      	movs	r3, #248	@ 0xf8
 800a940:	039b      	lsls	r3, r3, #14
 800a942:	401a      	ands	r2, r3
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a948:	429a      	cmp	r2, r3
 800a94a:	d10e      	bne.n	800a96a <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800a94c:	697a      	ldr	r2, [r7, #20]
 800a94e:	23e0      	movs	r3, #224	@ 0xe0
 800a950:	051b      	lsls	r3, r3, #20
 800a952:	401a      	ands	r2, r3
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800a958:	429a      	cmp	r2, r3
 800a95a:	d106      	bne.n	800a96a <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800a95c:	697b      	ldr	r3, [r7, #20]
 800a95e:	0f5b      	lsrs	r3, r3, #29
 800a960:	075a      	lsls	r2, r3, #29
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800a966:	429a      	cmp	r2, r3
 800a968:	d001      	beq.n	800a96e <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 800a96a:	2301      	movs	r3, #1
 800a96c:	e000      	b.n	800a970 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 800a96e:	2300      	movs	r3, #0
}
 800a970:	0018      	movs	r0, r3
 800a972:	46bd      	mov	sp, r7
 800a974:	b008      	add	sp, #32
 800a976:	bd80      	pop	{r7, pc}
 800a978:	40021000 	.word	0x40021000

0800a97c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b084      	sub	sp, #16
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
 800a984:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d101      	bne.n	800a990 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a98c:	2301      	movs	r3, #1
 800a98e:	e0e9      	b.n	800ab64 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a990:	4b76      	ldr	r3, [pc, #472]	@ (800ab6c <HAL_RCC_ClockConfig+0x1f0>)
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	2207      	movs	r2, #7
 800a996:	4013      	ands	r3, r2
 800a998:	683a      	ldr	r2, [r7, #0]
 800a99a:	429a      	cmp	r2, r3
 800a99c:	d91e      	bls.n	800a9dc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a99e:	4b73      	ldr	r3, [pc, #460]	@ (800ab6c <HAL_RCC_ClockConfig+0x1f0>)
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	2207      	movs	r2, #7
 800a9a4:	4393      	bics	r3, r2
 800a9a6:	0019      	movs	r1, r3
 800a9a8:	4b70      	ldr	r3, [pc, #448]	@ (800ab6c <HAL_RCC_ClockConfig+0x1f0>)
 800a9aa:	683a      	ldr	r2, [r7, #0]
 800a9ac:	430a      	orrs	r2, r1
 800a9ae:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800a9b0:	f7fe f946 	bl	8008c40 <HAL_GetTick>
 800a9b4:	0003      	movs	r3, r0
 800a9b6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800a9b8:	e009      	b.n	800a9ce <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a9ba:	f7fe f941 	bl	8008c40 <HAL_GetTick>
 800a9be:	0002      	movs	r2, r0
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	1ad3      	subs	r3, r2, r3
 800a9c4:	4a6a      	ldr	r2, [pc, #424]	@ (800ab70 <HAL_RCC_ClockConfig+0x1f4>)
 800a9c6:	4293      	cmp	r3, r2
 800a9c8:	d901      	bls.n	800a9ce <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800a9ca:	2303      	movs	r3, #3
 800a9cc:	e0ca      	b.n	800ab64 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800a9ce:	4b67      	ldr	r3, [pc, #412]	@ (800ab6c <HAL_RCC_ClockConfig+0x1f0>)
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	2207      	movs	r2, #7
 800a9d4:	4013      	ands	r3, r2
 800a9d6:	683a      	ldr	r2, [r7, #0]
 800a9d8:	429a      	cmp	r2, r3
 800a9da:	d1ee      	bne.n	800a9ba <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	2202      	movs	r2, #2
 800a9e2:	4013      	ands	r3, r2
 800a9e4:	d015      	beq.n	800aa12 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	2204      	movs	r2, #4
 800a9ec:	4013      	ands	r3, r2
 800a9ee:	d006      	beq.n	800a9fe <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800a9f0:	4b60      	ldr	r3, [pc, #384]	@ (800ab74 <HAL_RCC_ClockConfig+0x1f8>)
 800a9f2:	689a      	ldr	r2, [r3, #8]
 800a9f4:	4b5f      	ldr	r3, [pc, #380]	@ (800ab74 <HAL_RCC_ClockConfig+0x1f8>)
 800a9f6:	21e0      	movs	r1, #224	@ 0xe0
 800a9f8:	01c9      	lsls	r1, r1, #7
 800a9fa:	430a      	orrs	r2, r1
 800a9fc:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a9fe:	4b5d      	ldr	r3, [pc, #372]	@ (800ab74 <HAL_RCC_ClockConfig+0x1f8>)
 800aa00:	689b      	ldr	r3, [r3, #8]
 800aa02:	4a5d      	ldr	r2, [pc, #372]	@ (800ab78 <HAL_RCC_ClockConfig+0x1fc>)
 800aa04:	4013      	ands	r3, r2
 800aa06:	0019      	movs	r1, r3
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	689a      	ldr	r2, [r3, #8]
 800aa0c:	4b59      	ldr	r3, [pc, #356]	@ (800ab74 <HAL_RCC_ClockConfig+0x1f8>)
 800aa0e:	430a      	orrs	r2, r1
 800aa10:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	2201      	movs	r2, #1
 800aa18:	4013      	ands	r3, r2
 800aa1a:	d057      	beq.n	800aacc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	685b      	ldr	r3, [r3, #4]
 800aa20:	2b01      	cmp	r3, #1
 800aa22:	d107      	bne.n	800aa34 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800aa24:	4b53      	ldr	r3, [pc, #332]	@ (800ab74 <HAL_RCC_ClockConfig+0x1f8>)
 800aa26:	681a      	ldr	r2, [r3, #0]
 800aa28:	2380      	movs	r3, #128	@ 0x80
 800aa2a:	029b      	lsls	r3, r3, #10
 800aa2c:	4013      	ands	r3, r2
 800aa2e:	d12b      	bne.n	800aa88 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800aa30:	2301      	movs	r3, #1
 800aa32:	e097      	b.n	800ab64 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	685b      	ldr	r3, [r3, #4]
 800aa38:	2b02      	cmp	r3, #2
 800aa3a:	d107      	bne.n	800aa4c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800aa3c:	4b4d      	ldr	r3, [pc, #308]	@ (800ab74 <HAL_RCC_ClockConfig+0x1f8>)
 800aa3e:	681a      	ldr	r2, [r3, #0]
 800aa40:	2380      	movs	r3, #128	@ 0x80
 800aa42:	049b      	lsls	r3, r3, #18
 800aa44:	4013      	ands	r3, r2
 800aa46:	d11f      	bne.n	800aa88 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800aa48:	2301      	movs	r3, #1
 800aa4a:	e08b      	b.n	800ab64 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	685b      	ldr	r3, [r3, #4]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d107      	bne.n	800aa64 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800aa54:	4b47      	ldr	r3, [pc, #284]	@ (800ab74 <HAL_RCC_ClockConfig+0x1f8>)
 800aa56:	681a      	ldr	r2, [r3, #0]
 800aa58:	2380      	movs	r3, #128	@ 0x80
 800aa5a:	00db      	lsls	r3, r3, #3
 800aa5c:	4013      	ands	r3, r2
 800aa5e:	d113      	bne.n	800aa88 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800aa60:	2301      	movs	r3, #1
 800aa62:	e07f      	b.n	800ab64 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	685b      	ldr	r3, [r3, #4]
 800aa68:	2b03      	cmp	r3, #3
 800aa6a:	d106      	bne.n	800aa7a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800aa6c:	4b41      	ldr	r3, [pc, #260]	@ (800ab74 <HAL_RCC_ClockConfig+0x1f8>)
 800aa6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aa70:	2202      	movs	r2, #2
 800aa72:	4013      	ands	r3, r2
 800aa74:	d108      	bne.n	800aa88 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800aa76:	2301      	movs	r3, #1
 800aa78:	e074      	b.n	800ab64 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800aa7a:	4b3e      	ldr	r3, [pc, #248]	@ (800ab74 <HAL_RCC_ClockConfig+0x1f8>)
 800aa7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aa7e:	2202      	movs	r2, #2
 800aa80:	4013      	ands	r3, r2
 800aa82:	d101      	bne.n	800aa88 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800aa84:	2301      	movs	r3, #1
 800aa86:	e06d      	b.n	800ab64 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800aa88:	4b3a      	ldr	r3, [pc, #232]	@ (800ab74 <HAL_RCC_ClockConfig+0x1f8>)
 800aa8a:	689b      	ldr	r3, [r3, #8]
 800aa8c:	2207      	movs	r2, #7
 800aa8e:	4393      	bics	r3, r2
 800aa90:	0019      	movs	r1, r3
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	685a      	ldr	r2, [r3, #4]
 800aa96:	4b37      	ldr	r3, [pc, #220]	@ (800ab74 <HAL_RCC_ClockConfig+0x1f8>)
 800aa98:	430a      	orrs	r2, r1
 800aa9a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aa9c:	f7fe f8d0 	bl	8008c40 <HAL_GetTick>
 800aaa0:	0003      	movs	r3, r0
 800aaa2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aaa4:	e009      	b.n	800aaba <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800aaa6:	f7fe f8cb 	bl	8008c40 <HAL_GetTick>
 800aaaa:	0002      	movs	r2, r0
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	1ad3      	subs	r3, r2, r3
 800aab0:	4a2f      	ldr	r2, [pc, #188]	@ (800ab70 <HAL_RCC_ClockConfig+0x1f4>)
 800aab2:	4293      	cmp	r3, r2
 800aab4:	d901      	bls.n	800aaba <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800aab6:	2303      	movs	r3, #3
 800aab8:	e054      	b.n	800ab64 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aaba:	4b2e      	ldr	r3, [pc, #184]	@ (800ab74 <HAL_RCC_ClockConfig+0x1f8>)
 800aabc:	689b      	ldr	r3, [r3, #8]
 800aabe:	2238      	movs	r2, #56	@ 0x38
 800aac0:	401a      	ands	r2, r3
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	685b      	ldr	r3, [r3, #4]
 800aac6:	00db      	lsls	r3, r3, #3
 800aac8:	429a      	cmp	r2, r3
 800aaca:	d1ec      	bne.n	800aaa6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800aacc:	4b27      	ldr	r3, [pc, #156]	@ (800ab6c <HAL_RCC_ClockConfig+0x1f0>)
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	2207      	movs	r2, #7
 800aad2:	4013      	ands	r3, r2
 800aad4:	683a      	ldr	r2, [r7, #0]
 800aad6:	429a      	cmp	r2, r3
 800aad8:	d21e      	bcs.n	800ab18 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aada:	4b24      	ldr	r3, [pc, #144]	@ (800ab6c <HAL_RCC_ClockConfig+0x1f0>)
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	2207      	movs	r2, #7
 800aae0:	4393      	bics	r3, r2
 800aae2:	0019      	movs	r1, r3
 800aae4:	4b21      	ldr	r3, [pc, #132]	@ (800ab6c <HAL_RCC_ClockConfig+0x1f0>)
 800aae6:	683a      	ldr	r2, [r7, #0]
 800aae8:	430a      	orrs	r2, r1
 800aaea:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800aaec:	f7fe f8a8 	bl	8008c40 <HAL_GetTick>
 800aaf0:	0003      	movs	r3, r0
 800aaf2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800aaf4:	e009      	b.n	800ab0a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800aaf6:	f7fe f8a3 	bl	8008c40 <HAL_GetTick>
 800aafa:	0002      	movs	r2, r0
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	1ad3      	subs	r3, r2, r3
 800ab00:	4a1b      	ldr	r2, [pc, #108]	@ (800ab70 <HAL_RCC_ClockConfig+0x1f4>)
 800ab02:	4293      	cmp	r3, r2
 800ab04:	d901      	bls.n	800ab0a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800ab06:	2303      	movs	r3, #3
 800ab08:	e02c      	b.n	800ab64 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800ab0a:	4b18      	ldr	r3, [pc, #96]	@ (800ab6c <HAL_RCC_ClockConfig+0x1f0>)
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	2207      	movs	r2, #7
 800ab10:	4013      	ands	r3, r2
 800ab12:	683a      	ldr	r2, [r7, #0]
 800ab14:	429a      	cmp	r2, r3
 800ab16:	d1ee      	bne.n	800aaf6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	2204      	movs	r2, #4
 800ab1e:	4013      	ands	r3, r2
 800ab20:	d009      	beq.n	800ab36 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800ab22:	4b14      	ldr	r3, [pc, #80]	@ (800ab74 <HAL_RCC_ClockConfig+0x1f8>)
 800ab24:	689b      	ldr	r3, [r3, #8]
 800ab26:	4a15      	ldr	r2, [pc, #84]	@ (800ab7c <HAL_RCC_ClockConfig+0x200>)
 800ab28:	4013      	ands	r3, r2
 800ab2a:	0019      	movs	r1, r3
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	68da      	ldr	r2, [r3, #12]
 800ab30:	4b10      	ldr	r3, [pc, #64]	@ (800ab74 <HAL_RCC_ClockConfig+0x1f8>)
 800ab32:	430a      	orrs	r2, r1
 800ab34:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800ab36:	f000 f829 	bl	800ab8c <HAL_RCC_GetSysClockFreq>
 800ab3a:	0001      	movs	r1, r0
 800ab3c:	4b0d      	ldr	r3, [pc, #52]	@ (800ab74 <HAL_RCC_ClockConfig+0x1f8>)
 800ab3e:	689b      	ldr	r3, [r3, #8]
 800ab40:	0a1b      	lsrs	r3, r3, #8
 800ab42:	220f      	movs	r2, #15
 800ab44:	401a      	ands	r2, r3
 800ab46:	4b0e      	ldr	r3, [pc, #56]	@ (800ab80 <HAL_RCC_ClockConfig+0x204>)
 800ab48:	0092      	lsls	r2, r2, #2
 800ab4a:	58d3      	ldr	r3, [r2, r3]
 800ab4c:	221f      	movs	r2, #31
 800ab4e:	4013      	ands	r3, r2
 800ab50:	000a      	movs	r2, r1
 800ab52:	40da      	lsrs	r2, r3
 800ab54:	4b0b      	ldr	r3, [pc, #44]	@ (800ab84 <HAL_RCC_ClockConfig+0x208>)
 800ab56:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800ab58:	4b0b      	ldr	r3, [pc, #44]	@ (800ab88 <HAL_RCC_ClockConfig+0x20c>)
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	0018      	movs	r0, r3
 800ab5e:	f7fe f813 	bl	8008b88 <HAL_InitTick>
 800ab62:	0003      	movs	r3, r0
}
 800ab64:	0018      	movs	r0, r3
 800ab66:	46bd      	mov	sp, r7
 800ab68:	b004      	add	sp, #16
 800ab6a:	bd80      	pop	{r7, pc}
 800ab6c:	40022000 	.word	0x40022000
 800ab70:	00001388 	.word	0x00001388
 800ab74:	40021000 	.word	0x40021000
 800ab78:	fffff0ff 	.word	0xfffff0ff
 800ab7c:	ffff8fff 	.word	0xffff8fff
 800ab80:	0801bd58 	.word	0x0801bd58
 800ab84:	20000004 	.word	0x20000004
 800ab88:	20000008 	.word	0x20000008

0800ab8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b086      	sub	sp, #24
 800ab90:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800ab92:	4b3c      	ldr	r3, [pc, #240]	@ (800ac84 <HAL_RCC_GetSysClockFreq+0xf8>)
 800ab94:	689b      	ldr	r3, [r3, #8]
 800ab96:	2238      	movs	r2, #56	@ 0x38
 800ab98:	4013      	ands	r3, r2
 800ab9a:	d10f      	bne.n	800abbc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800ab9c:	4b39      	ldr	r3, [pc, #228]	@ (800ac84 <HAL_RCC_GetSysClockFreq+0xf8>)
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	0adb      	lsrs	r3, r3, #11
 800aba2:	2207      	movs	r2, #7
 800aba4:	4013      	ands	r3, r2
 800aba6:	2201      	movs	r2, #1
 800aba8:	409a      	lsls	r2, r3
 800abaa:	0013      	movs	r3, r2
 800abac:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800abae:	6839      	ldr	r1, [r7, #0]
 800abb0:	4835      	ldr	r0, [pc, #212]	@ (800ac88 <HAL_RCC_GetSysClockFreq+0xfc>)
 800abb2:	f7f5 facf 	bl	8000154 <__udivsi3>
 800abb6:	0003      	movs	r3, r0
 800abb8:	613b      	str	r3, [r7, #16]
 800abba:	e05d      	b.n	800ac78 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800abbc:	4b31      	ldr	r3, [pc, #196]	@ (800ac84 <HAL_RCC_GetSysClockFreq+0xf8>)
 800abbe:	689b      	ldr	r3, [r3, #8]
 800abc0:	2238      	movs	r2, #56	@ 0x38
 800abc2:	4013      	ands	r3, r2
 800abc4:	2b08      	cmp	r3, #8
 800abc6:	d102      	bne.n	800abce <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800abc8:	4b30      	ldr	r3, [pc, #192]	@ (800ac8c <HAL_RCC_GetSysClockFreq+0x100>)
 800abca:	613b      	str	r3, [r7, #16]
 800abcc:	e054      	b.n	800ac78 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800abce:	4b2d      	ldr	r3, [pc, #180]	@ (800ac84 <HAL_RCC_GetSysClockFreq+0xf8>)
 800abd0:	689b      	ldr	r3, [r3, #8]
 800abd2:	2238      	movs	r2, #56	@ 0x38
 800abd4:	4013      	ands	r3, r2
 800abd6:	2b10      	cmp	r3, #16
 800abd8:	d138      	bne.n	800ac4c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800abda:	4b2a      	ldr	r3, [pc, #168]	@ (800ac84 <HAL_RCC_GetSysClockFreq+0xf8>)
 800abdc:	68db      	ldr	r3, [r3, #12]
 800abde:	2203      	movs	r2, #3
 800abe0:	4013      	ands	r3, r2
 800abe2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800abe4:	4b27      	ldr	r3, [pc, #156]	@ (800ac84 <HAL_RCC_GetSysClockFreq+0xf8>)
 800abe6:	68db      	ldr	r3, [r3, #12]
 800abe8:	091b      	lsrs	r3, r3, #4
 800abea:	2207      	movs	r2, #7
 800abec:	4013      	ands	r3, r2
 800abee:	3301      	adds	r3, #1
 800abf0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	2b03      	cmp	r3, #3
 800abf6:	d10d      	bne.n	800ac14 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800abf8:	68b9      	ldr	r1, [r7, #8]
 800abfa:	4824      	ldr	r0, [pc, #144]	@ (800ac8c <HAL_RCC_GetSysClockFreq+0x100>)
 800abfc:	f7f5 faaa 	bl	8000154 <__udivsi3>
 800ac00:	0003      	movs	r3, r0
 800ac02:	0019      	movs	r1, r3
 800ac04:	4b1f      	ldr	r3, [pc, #124]	@ (800ac84 <HAL_RCC_GetSysClockFreq+0xf8>)
 800ac06:	68db      	ldr	r3, [r3, #12]
 800ac08:	0a1b      	lsrs	r3, r3, #8
 800ac0a:	227f      	movs	r2, #127	@ 0x7f
 800ac0c:	4013      	ands	r3, r2
 800ac0e:	434b      	muls	r3, r1
 800ac10:	617b      	str	r3, [r7, #20]
        break;
 800ac12:	e00d      	b.n	800ac30 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800ac14:	68b9      	ldr	r1, [r7, #8]
 800ac16:	481c      	ldr	r0, [pc, #112]	@ (800ac88 <HAL_RCC_GetSysClockFreq+0xfc>)
 800ac18:	f7f5 fa9c 	bl	8000154 <__udivsi3>
 800ac1c:	0003      	movs	r3, r0
 800ac1e:	0019      	movs	r1, r3
 800ac20:	4b18      	ldr	r3, [pc, #96]	@ (800ac84 <HAL_RCC_GetSysClockFreq+0xf8>)
 800ac22:	68db      	ldr	r3, [r3, #12]
 800ac24:	0a1b      	lsrs	r3, r3, #8
 800ac26:	227f      	movs	r2, #127	@ 0x7f
 800ac28:	4013      	ands	r3, r2
 800ac2a:	434b      	muls	r3, r1
 800ac2c:	617b      	str	r3, [r7, #20]
        break;
 800ac2e:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800ac30:	4b14      	ldr	r3, [pc, #80]	@ (800ac84 <HAL_RCC_GetSysClockFreq+0xf8>)
 800ac32:	68db      	ldr	r3, [r3, #12]
 800ac34:	0f5b      	lsrs	r3, r3, #29
 800ac36:	2207      	movs	r2, #7
 800ac38:	4013      	ands	r3, r2
 800ac3a:	3301      	adds	r3, #1
 800ac3c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800ac3e:	6879      	ldr	r1, [r7, #4]
 800ac40:	6978      	ldr	r0, [r7, #20]
 800ac42:	f7f5 fa87 	bl	8000154 <__udivsi3>
 800ac46:	0003      	movs	r3, r0
 800ac48:	613b      	str	r3, [r7, #16]
 800ac4a:	e015      	b.n	800ac78 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800ac4c:	4b0d      	ldr	r3, [pc, #52]	@ (800ac84 <HAL_RCC_GetSysClockFreq+0xf8>)
 800ac4e:	689b      	ldr	r3, [r3, #8]
 800ac50:	2238      	movs	r2, #56	@ 0x38
 800ac52:	4013      	ands	r3, r2
 800ac54:	2b20      	cmp	r3, #32
 800ac56:	d103      	bne.n	800ac60 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800ac58:	2380      	movs	r3, #128	@ 0x80
 800ac5a:	021b      	lsls	r3, r3, #8
 800ac5c:	613b      	str	r3, [r7, #16]
 800ac5e:	e00b      	b.n	800ac78 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800ac60:	4b08      	ldr	r3, [pc, #32]	@ (800ac84 <HAL_RCC_GetSysClockFreq+0xf8>)
 800ac62:	689b      	ldr	r3, [r3, #8]
 800ac64:	2238      	movs	r2, #56	@ 0x38
 800ac66:	4013      	ands	r3, r2
 800ac68:	2b18      	cmp	r3, #24
 800ac6a:	d103      	bne.n	800ac74 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800ac6c:	23fa      	movs	r3, #250	@ 0xfa
 800ac6e:	01db      	lsls	r3, r3, #7
 800ac70:	613b      	str	r3, [r7, #16]
 800ac72:	e001      	b.n	800ac78 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800ac74:	2300      	movs	r3, #0
 800ac76:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800ac78:	693b      	ldr	r3, [r7, #16]
}
 800ac7a:	0018      	movs	r0, r3
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	b006      	add	sp, #24
 800ac80:	bd80      	pop	{r7, pc}
 800ac82:	46c0      	nop			@ (mov r8, r8)
 800ac84:	40021000 	.word	0x40021000
 800ac88:	00f42400 	.word	0x00f42400
 800ac8c:	007a1200 	.word	0x007a1200

0800ac90 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ac94:	4b02      	ldr	r3, [pc, #8]	@ (800aca0 <HAL_RCC_GetHCLKFreq+0x10>)
 800ac96:	681b      	ldr	r3, [r3, #0]
}
 800ac98:	0018      	movs	r0, r3
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	bd80      	pop	{r7, pc}
 800ac9e:	46c0      	nop			@ (mov r8, r8)
 800aca0:	20000004 	.word	0x20000004

0800aca4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800aca4:	b5b0      	push	{r4, r5, r7, lr}
 800aca6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800aca8:	f7ff fff2 	bl	800ac90 <HAL_RCC_GetHCLKFreq>
 800acac:	0004      	movs	r4, r0
 800acae:	f7ff faf9 	bl	800a2a4 <LL_RCC_GetAPB1Prescaler>
 800acb2:	0003      	movs	r3, r0
 800acb4:	0b1a      	lsrs	r2, r3, #12
 800acb6:	4b05      	ldr	r3, [pc, #20]	@ (800accc <HAL_RCC_GetPCLK1Freq+0x28>)
 800acb8:	0092      	lsls	r2, r2, #2
 800acba:	58d3      	ldr	r3, [r2, r3]
 800acbc:	221f      	movs	r2, #31
 800acbe:	4013      	ands	r3, r2
 800acc0:	40dc      	lsrs	r4, r3
 800acc2:	0023      	movs	r3, r4
}
 800acc4:	0018      	movs	r0, r3
 800acc6:	46bd      	mov	sp, r7
 800acc8:	bdb0      	pop	{r4, r5, r7, pc}
 800acca:	46c0      	nop			@ (mov r8, r8)
 800accc:	0801bd98 	.word	0x0801bd98

0800acd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b086      	sub	sp, #24
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800acd8:	2313      	movs	r3, #19
 800acda:	18fb      	adds	r3, r7, r3
 800acdc:	2200      	movs	r2, #0
 800acde:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800ace0:	2312      	movs	r3, #18
 800ace2:	18fb      	adds	r3, r7, r3
 800ace4:	2200      	movs	r2, #0
 800ace6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681a      	ldr	r2, [r3, #0]
 800acec:	2380      	movs	r3, #128	@ 0x80
 800acee:	029b      	lsls	r3, r3, #10
 800acf0:	4013      	ands	r3, r2
 800acf2:	d100      	bne.n	800acf6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 800acf4:	e0ad      	b.n	800ae52 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 800acf6:	2011      	movs	r0, #17
 800acf8:	183b      	adds	r3, r7, r0
 800acfa:	2200      	movs	r2, #0
 800acfc:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800acfe:	4b47      	ldr	r3, [pc, #284]	@ (800ae1c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800ad00:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ad02:	2380      	movs	r3, #128	@ 0x80
 800ad04:	055b      	lsls	r3, r3, #21
 800ad06:	4013      	ands	r3, r2
 800ad08:	d110      	bne.n	800ad2c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ad0a:	4b44      	ldr	r3, [pc, #272]	@ (800ae1c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800ad0c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ad0e:	4b43      	ldr	r3, [pc, #268]	@ (800ae1c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800ad10:	2180      	movs	r1, #128	@ 0x80
 800ad12:	0549      	lsls	r1, r1, #21
 800ad14:	430a      	orrs	r2, r1
 800ad16:	63da      	str	r2, [r3, #60]	@ 0x3c
 800ad18:	4b40      	ldr	r3, [pc, #256]	@ (800ae1c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800ad1a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ad1c:	2380      	movs	r3, #128	@ 0x80
 800ad1e:	055b      	lsls	r3, r3, #21
 800ad20:	4013      	ands	r3, r2
 800ad22:	60bb      	str	r3, [r7, #8]
 800ad24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ad26:	183b      	adds	r3, r7, r0
 800ad28:	2201      	movs	r2, #1
 800ad2a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ad2c:	4b3c      	ldr	r3, [pc, #240]	@ (800ae20 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800ad2e:	681a      	ldr	r2, [r3, #0]
 800ad30:	4b3b      	ldr	r3, [pc, #236]	@ (800ae20 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800ad32:	2180      	movs	r1, #128	@ 0x80
 800ad34:	0049      	lsls	r1, r1, #1
 800ad36:	430a      	orrs	r2, r1
 800ad38:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ad3a:	f7fd ff81 	bl	8008c40 <HAL_GetTick>
 800ad3e:	0003      	movs	r3, r0
 800ad40:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ad42:	e00b      	b.n	800ad5c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ad44:	f7fd ff7c 	bl	8008c40 <HAL_GetTick>
 800ad48:	0002      	movs	r2, r0
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	1ad3      	subs	r3, r2, r3
 800ad4e:	2b02      	cmp	r3, #2
 800ad50:	d904      	bls.n	800ad5c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800ad52:	2313      	movs	r3, #19
 800ad54:	18fb      	adds	r3, r7, r3
 800ad56:	2203      	movs	r2, #3
 800ad58:	701a      	strb	r2, [r3, #0]
        break;
 800ad5a:	e005      	b.n	800ad68 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ad5c:	4b30      	ldr	r3, [pc, #192]	@ (800ae20 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800ad5e:	681a      	ldr	r2, [r3, #0]
 800ad60:	2380      	movs	r3, #128	@ 0x80
 800ad62:	005b      	lsls	r3, r3, #1
 800ad64:	4013      	ands	r3, r2
 800ad66:	d0ed      	beq.n	800ad44 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800ad68:	2313      	movs	r3, #19
 800ad6a:	18fb      	adds	r3, r7, r3
 800ad6c:	781b      	ldrb	r3, [r3, #0]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d15e      	bne.n	800ae30 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800ad72:	4b2a      	ldr	r3, [pc, #168]	@ (800ae1c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800ad74:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800ad76:	23c0      	movs	r3, #192	@ 0xc0
 800ad78:	009b      	lsls	r3, r3, #2
 800ad7a:	4013      	ands	r3, r2
 800ad7c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800ad7e:	697b      	ldr	r3, [r7, #20]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d019      	beq.n	800adb8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad88:	697a      	ldr	r2, [r7, #20]
 800ad8a:	429a      	cmp	r2, r3
 800ad8c:	d014      	beq.n	800adb8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800ad8e:	4b23      	ldr	r3, [pc, #140]	@ (800ae1c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800ad90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ad92:	4a24      	ldr	r2, [pc, #144]	@ (800ae24 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800ad94:	4013      	ands	r3, r2
 800ad96:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800ad98:	4b20      	ldr	r3, [pc, #128]	@ (800ae1c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800ad9a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800ad9c:	4b1f      	ldr	r3, [pc, #124]	@ (800ae1c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800ad9e:	2180      	movs	r1, #128	@ 0x80
 800ada0:	0249      	lsls	r1, r1, #9
 800ada2:	430a      	orrs	r2, r1
 800ada4:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800ada6:	4b1d      	ldr	r3, [pc, #116]	@ (800ae1c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800ada8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800adaa:	4b1c      	ldr	r3, [pc, #112]	@ (800ae1c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800adac:	491e      	ldr	r1, [pc, #120]	@ (800ae28 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 800adae:	400a      	ands	r2, r1
 800adb0:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800adb2:	4b1a      	ldr	r3, [pc, #104]	@ (800ae1c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800adb4:	697a      	ldr	r2, [r7, #20]
 800adb6:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800adb8:	697b      	ldr	r3, [r7, #20]
 800adba:	2201      	movs	r2, #1
 800adbc:	4013      	ands	r3, r2
 800adbe:	d016      	beq.n	800adee <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800adc0:	f7fd ff3e 	bl	8008c40 <HAL_GetTick>
 800adc4:	0003      	movs	r3, r0
 800adc6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800adc8:	e00c      	b.n	800ade4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800adca:	f7fd ff39 	bl	8008c40 <HAL_GetTick>
 800adce:	0002      	movs	r2, r0
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	1ad3      	subs	r3, r2, r3
 800add4:	4a15      	ldr	r2, [pc, #84]	@ (800ae2c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800add6:	4293      	cmp	r3, r2
 800add8:	d904      	bls.n	800ade4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800adda:	2313      	movs	r3, #19
 800addc:	18fb      	adds	r3, r7, r3
 800adde:	2203      	movs	r2, #3
 800ade0:	701a      	strb	r2, [r3, #0]
            break;
 800ade2:	e004      	b.n	800adee <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ade4:	4b0d      	ldr	r3, [pc, #52]	@ (800ae1c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800ade6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ade8:	2202      	movs	r2, #2
 800adea:	4013      	ands	r3, r2
 800adec:	d0ed      	beq.n	800adca <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800adee:	2313      	movs	r3, #19
 800adf0:	18fb      	adds	r3, r7, r3
 800adf2:	781b      	ldrb	r3, [r3, #0]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d10a      	bne.n	800ae0e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800adf8:	4b08      	ldr	r3, [pc, #32]	@ (800ae1c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800adfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800adfc:	4a09      	ldr	r2, [pc, #36]	@ (800ae24 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800adfe:	4013      	ands	r3, r2
 800ae00:	0019      	movs	r1, r3
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ae06:	4b05      	ldr	r3, [pc, #20]	@ (800ae1c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800ae08:	430a      	orrs	r2, r1
 800ae0a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800ae0c:	e016      	b.n	800ae3c <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800ae0e:	2312      	movs	r3, #18
 800ae10:	18fb      	adds	r3, r7, r3
 800ae12:	2213      	movs	r2, #19
 800ae14:	18ba      	adds	r2, r7, r2
 800ae16:	7812      	ldrb	r2, [r2, #0]
 800ae18:	701a      	strb	r2, [r3, #0]
 800ae1a:	e00f      	b.n	800ae3c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800ae1c:	40021000 	.word	0x40021000
 800ae20:	40007000 	.word	0x40007000
 800ae24:	fffffcff 	.word	0xfffffcff
 800ae28:	fffeffff 	.word	0xfffeffff
 800ae2c:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae30:	2312      	movs	r3, #18
 800ae32:	18fb      	adds	r3, r7, r3
 800ae34:	2213      	movs	r2, #19
 800ae36:	18ba      	adds	r2, r7, r2
 800ae38:	7812      	ldrb	r2, [r2, #0]
 800ae3a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800ae3c:	2311      	movs	r3, #17
 800ae3e:	18fb      	adds	r3, r7, r3
 800ae40:	781b      	ldrb	r3, [r3, #0]
 800ae42:	2b01      	cmp	r3, #1
 800ae44:	d105      	bne.n	800ae52 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ae46:	4bb6      	ldr	r3, [pc, #728]	@ (800b120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800ae48:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ae4a:	4bb5      	ldr	r3, [pc, #724]	@ (800b120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800ae4c:	49b5      	ldr	r1, [pc, #724]	@ (800b124 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800ae4e:	400a      	ands	r2, r1
 800ae50:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	2201      	movs	r2, #1
 800ae58:	4013      	ands	r3, r2
 800ae5a:	d009      	beq.n	800ae70 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800ae5c:	4bb0      	ldr	r3, [pc, #704]	@ (800b120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800ae5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae60:	2203      	movs	r2, #3
 800ae62:	4393      	bics	r3, r2
 800ae64:	0019      	movs	r1, r3
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	685a      	ldr	r2, [r3, #4]
 800ae6a:	4bad      	ldr	r3, [pc, #692]	@ (800b120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800ae6c:	430a      	orrs	r2, r1
 800ae6e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	2202      	movs	r2, #2
 800ae76:	4013      	ands	r3, r2
 800ae78:	d009      	beq.n	800ae8e <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800ae7a:	4ba9      	ldr	r3, [pc, #676]	@ (800b120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800ae7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae7e:	220c      	movs	r2, #12
 800ae80:	4393      	bics	r3, r2
 800ae82:	0019      	movs	r1, r3
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	689a      	ldr	r2, [r3, #8]
 800ae88:	4ba5      	ldr	r3, [pc, #660]	@ (800b120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800ae8a:	430a      	orrs	r2, r1
 800ae8c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	2204      	movs	r2, #4
 800ae94:	4013      	ands	r3, r2
 800ae96:	d009      	beq.n	800aeac <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800ae98:	4ba1      	ldr	r3, [pc, #644]	@ (800b120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800ae9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae9c:	2230      	movs	r2, #48	@ 0x30
 800ae9e:	4393      	bics	r3, r2
 800aea0:	0019      	movs	r1, r3
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	68da      	ldr	r2, [r3, #12]
 800aea6:	4b9e      	ldr	r3, [pc, #632]	@ (800b120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800aea8:	430a      	orrs	r2, r1
 800aeaa:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	2210      	movs	r2, #16
 800aeb2:	4013      	ands	r3, r2
 800aeb4:	d009      	beq.n	800aeca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800aeb6:	4b9a      	ldr	r3, [pc, #616]	@ (800b120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800aeb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aeba:	4a9b      	ldr	r2, [pc, #620]	@ (800b128 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800aebc:	4013      	ands	r3, r2
 800aebe:	0019      	movs	r1, r3
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	691a      	ldr	r2, [r3, #16]
 800aec4:	4b96      	ldr	r3, [pc, #600]	@ (800b120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800aec6:	430a      	orrs	r2, r1
 800aec8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681a      	ldr	r2, [r3, #0]
 800aece:	2380      	movs	r3, #128	@ 0x80
 800aed0:	015b      	lsls	r3, r3, #5
 800aed2:	4013      	ands	r3, r2
 800aed4:	d009      	beq.n	800aeea <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 800aed6:	4b92      	ldr	r3, [pc, #584]	@ (800b120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800aed8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aeda:	4a94      	ldr	r2, [pc, #592]	@ (800b12c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800aedc:	4013      	ands	r3, r2
 800aede:	0019      	movs	r1, r3
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	695a      	ldr	r2, [r3, #20]
 800aee4:	4b8e      	ldr	r3, [pc, #568]	@ (800b120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800aee6:	430a      	orrs	r2, r1
 800aee8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681a      	ldr	r2, [r3, #0]
 800aeee:	2380      	movs	r3, #128	@ 0x80
 800aef0:	009b      	lsls	r3, r3, #2
 800aef2:	4013      	ands	r3, r2
 800aef4:	d009      	beq.n	800af0a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800aef6:	4b8a      	ldr	r3, [pc, #552]	@ (800b120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800aef8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aefa:	4a8d      	ldr	r2, [pc, #564]	@ (800b130 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 800aefc:	4013      	ands	r3, r2
 800aefe:	0019      	movs	r1, r3
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800af04:	4b86      	ldr	r3, [pc, #536]	@ (800b120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800af06:	430a      	orrs	r2, r1
 800af08:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681a      	ldr	r2, [r3, #0]
 800af0e:	2380      	movs	r3, #128	@ 0x80
 800af10:	00db      	lsls	r3, r3, #3
 800af12:	4013      	ands	r3, r2
 800af14:	d009      	beq.n	800af2a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800af16:	4b82      	ldr	r3, [pc, #520]	@ (800b120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800af18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af1a:	4a86      	ldr	r2, [pc, #536]	@ (800b134 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 800af1c:	4013      	ands	r3, r2
 800af1e:	0019      	movs	r1, r3
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af24:	4b7e      	ldr	r3, [pc, #504]	@ (800b120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800af26:	430a      	orrs	r2, r1
 800af28:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	2220      	movs	r2, #32
 800af30:	4013      	ands	r3, r2
 800af32:	d009      	beq.n	800af48 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800af34:	4b7a      	ldr	r3, [pc, #488]	@ (800b120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800af36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af38:	4a7f      	ldr	r2, [pc, #508]	@ (800b138 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800af3a:	4013      	ands	r3, r2
 800af3c:	0019      	movs	r1, r3
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	699a      	ldr	r2, [r3, #24]
 800af42:	4b77      	ldr	r3, [pc, #476]	@ (800b120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800af44:	430a      	orrs	r2, r1
 800af46:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	2240      	movs	r2, #64	@ 0x40
 800af4e:	4013      	ands	r3, r2
 800af50:	d009      	beq.n	800af66 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800af52:	4b73      	ldr	r3, [pc, #460]	@ (800b120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800af54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af56:	4a79      	ldr	r2, [pc, #484]	@ (800b13c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800af58:	4013      	ands	r3, r2
 800af5a:	0019      	movs	r1, r3
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	69da      	ldr	r2, [r3, #28]
 800af60:	4b6f      	ldr	r3, [pc, #444]	@ (800b120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800af62:	430a      	orrs	r2, r1
 800af64:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681a      	ldr	r2, [r3, #0]
 800af6a:	2380      	movs	r3, #128	@ 0x80
 800af6c:	01db      	lsls	r3, r3, #7
 800af6e:	4013      	ands	r3, r2
 800af70:	d015      	beq.n	800af9e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800af72:	4b6b      	ldr	r3, [pc, #428]	@ (800b120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800af74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af76:	009b      	lsls	r3, r3, #2
 800af78:	0899      	lsrs	r1, r3, #2
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800af7e:	4b68      	ldr	r3, [pc, #416]	@ (800b120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800af80:	430a      	orrs	r2, r1
 800af82:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800af88:	2380      	movs	r3, #128	@ 0x80
 800af8a:	05db      	lsls	r3, r3, #23
 800af8c:	429a      	cmp	r2, r3
 800af8e:	d106      	bne.n	800af9e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800af90:	4b63      	ldr	r3, [pc, #396]	@ (800b120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800af92:	68da      	ldr	r2, [r3, #12]
 800af94:	4b62      	ldr	r3, [pc, #392]	@ (800b120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800af96:	2180      	movs	r1, #128	@ 0x80
 800af98:	0249      	lsls	r1, r1, #9
 800af9a:	430a      	orrs	r2, r1
 800af9c:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681a      	ldr	r2, [r3, #0]
 800afa2:	2380      	movs	r3, #128	@ 0x80
 800afa4:	031b      	lsls	r3, r3, #12
 800afa6:	4013      	ands	r3, r2
 800afa8:	d009      	beq.n	800afbe <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800afaa:	4b5d      	ldr	r3, [pc, #372]	@ (800b120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800afac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800afae:	2240      	movs	r2, #64	@ 0x40
 800afb0:	4393      	bics	r3, r2
 800afb2:	0019      	movs	r1, r3
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800afb8:	4b59      	ldr	r3, [pc, #356]	@ (800b120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800afba:	430a      	orrs	r2, r1
 800afbc:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681a      	ldr	r2, [r3, #0]
 800afc2:	2380      	movs	r3, #128	@ 0x80
 800afc4:	039b      	lsls	r3, r3, #14
 800afc6:	4013      	ands	r3, r2
 800afc8:	d016      	beq.n	800aff8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800afca:	4b55      	ldr	r3, [pc, #340]	@ (800b120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800afcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800afce:	4a5c      	ldr	r2, [pc, #368]	@ (800b140 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800afd0:	4013      	ands	r3, r2
 800afd2:	0019      	movs	r1, r3
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800afd8:	4b51      	ldr	r3, [pc, #324]	@ (800b120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800afda:	430a      	orrs	r2, r1
 800afdc:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800afe2:	2380      	movs	r3, #128	@ 0x80
 800afe4:	03db      	lsls	r3, r3, #15
 800afe6:	429a      	cmp	r2, r3
 800afe8:	d106      	bne.n	800aff8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800afea:	4b4d      	ldr	r3, [pc, #308]	@ (800b120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800afec:	68da      	ldr	r2, [r3, #12]
 800afee:	4b4c      	ldr	r3, [pc, #304]	@ (800b120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800aff0:	2180      	movs	r1, #128	@ 0x80
 800aff2:	0449      	lsls	r1, r1, #17
 800aff4:	430a      	orrs	r2, r1
 800aff6:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681a      	ldr	r2, [r3, #0]
 800affc:	2380      	movs	r3, #128	@ 0x80
 800affe:	03db      	lsls	r3, r3, #15
 800b000:	4013      	ands	r3, r2
 800b002:	d016      	beq.n	800b032 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800b004:	4b46      	ldr	r3, [pc, #280]	@ (800b120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b006:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b008:	4a4e      	ldr	r2, [pc, #312]	@ (800b144 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800b00a:	4013      	ands	r3, r2
 800b00c:	0019      	movs	r1, r3
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b012:	4b43      	ldr	r3, [pc, #268]	@ (800b120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b014:	430a      	orrs	r2, r1
 800b016:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b01c:	2380      	movs	r3, #128	@ 0x80
 800b01e:	045b      	lsls	r3, r3, #17
 800b020:	429a      	cmp	r2, r3
 800b022:	d106      	bne.n	800b032 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800b024:	4b3e      	ldr	r3, [pc, #248]	@ (800b120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b026:	68da      	ldr	r2, [r3, #12]
 800b028:	4b3d      	ldr	r3, [pc, #244]	@ (800b120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b02a:	2180      	movs	r1, #128	@ 0x80
 800b02c:	0449      	lsls	r1, r1, #17
 800b02e:	430a      	orrs	r2, r1
 800b030:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681a      	ldr	r2, [r3, #0]
 800b036:	2380      	movs	r3, #128	@ 0x80
 800b038:	011b      	lsls	r3, r3, #4
 800b03a:	4013      	ands	r3, r2
 800b03c:	d014      	beq.n	800b068 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800b03e:	4b38      	ldr	r3, [pc, #224]	@ (800b120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b040:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b042:	2203      	movs	r2, #3
 800b044:	4393      	bics	r3, r2
 800b046:	0019      	movs	r1, r3
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	6a1a      	ldr	r2, [r3, #32]
 800b04c:	4b34      	ldr	r3, [pc, #208]	@ (800b120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b04e:	430a      	orrs	r2, r1
 800b050:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	6a1b      	ldr	r3, [r3, #32]
 800b056:	2b01      	cmp	r3, #1
 800b058:	d106      	bne.n	800b068 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800b05a:	4b31      	ldr	r3, [pc, #196]	@ (800b120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b05c:	68da      	ldr	r2, [r3, #12]
 800b05e:	4b30      	ldr	r3, [pc, #192]	@ (800b120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b060:	2180      	movs	r1, #128	@ 0x80
 800b062:	0249      	lsls	r1, r1, #9
 800b064:	430a      	orrs	r2, r1
 800b066:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681a      	ldr	r2, [r3, #0]
 800b06c:	2380      	movs	r3, #128	@ 0x80
 800b06e:	019b      	lsls	r3, r3, #6
 800b070:	4013      	ands	r3, r2
 800b072:	d014      	beq.n	800b09e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800b074:	4b2a      	ldr	r3, [pc, #168]	@ (800b120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b076:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b078:	220c      	movs	r2, #12
 800b07a:	4393      	bics	r3, r2
 800b07c:	0019      	movs	r1, r3
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b082:	4b27      	ldr	r3, [pc, #156]	@ (800b120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b084:	430a      	orrs	r2, r1
 800b086:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b08c:	2b04      	cmp	r3, #4
 800b08e:	d106      	bne.n	800b09e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800b090:	4b23      	ldr	r3, [pc, #140]	@ (800b120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b092:	68da      	ldr	r2, [r3, #12]
 800b094:	4b22      	ldr	r3, [pc, #136]	@ (800b120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b096:	2180      	movs	r1, #128	@ 0x80
 800b098:	0249      	lsls	r1, r1, #9
 800b09a:	430a      	orrs	r2, r1
 800b09c:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681a      	ldr	r2, [r3, #0]
 800b0a2:	2380      	movs	r3, #128	@ 0x80
 800b0a4:	045b      	lsls	r3, r3, #17
 800b0a6:	4013      	ands	r3, r2
 800b0a8:	d016      	beq.n	800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b0aa:	4b1d      	ldr	r3, [pc, #116]	@ (800b120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b0ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b0ae:	4a22      	ldr	r2, [pc, #136]	@ (800b138 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b0b0:	4013      	ands	r3, r2
 800b0b2:	0019      	movs	r1, r3
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b0b8:	4b19      	ldr	r3, [pc, #100]	@ (800b120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b0ba:	430a      	orrs	r2, r1
 800b0bc:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b0c2:	2380      	movs	r3, #128	@ 0x80
 800b0c4:	019b      	lsls	r3, r3, #6
 800b0c6:	429a      	cmp	r2, r3
 800b0c8:	d106      	bne.n	800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800b0ca:	4b15      	ldr	r3, [pc, #84]	@ (800b120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b0cc:	68da      	ldr	r2, [r3, #12]
 800b0ce:	4b14      	ldr	r3, [pc, #80]	@ (800b120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b0d0:	2180      	movs	r1, #128	@ 0x80
 800b0d2:	0449      	lsls	r1, r1, #17
 800b0d4:	430a      	orrs	r2, r1
 800b0d6:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681a      	ldr	r2, [r3, #0]
 800b0dc:	2380      	movs	r3, #128	@ 0x80
 800b0de:	049b      	lsls	r3, r3, #18
 800b0e0:	4013      	ands	r3, r2
 800b0e2:	d016      	beq.n	800b112 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b0e4:	4b0e      	ldr	r3, [pc, #56]	@ (800b120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b0e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b0e8:	4a10      	ldr	r2, [pc, #64]	@ (800b12c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800b0ea:	4013      	ands	r3, r2
 800b0ec:	0019      	movs	r1, r3
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b0f2:	4b0b      	ldr	r3, [pc, #44]	@ (800b120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b0f4:	430a      	orrs	r2, r1
 800b0f6:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b0fc:	2380      	movs	r3, #128	@ 0x80
 800b0fe:	005b      	lsls	r3, r3, #1
 800b100:	429a      	cmp	r2, r3
 800b102:	d106      	bne.n	800b112 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800b104:	4b06      	ldr	r3, [pc, #24]	@ (800b120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b106:	68da      	ldr	r2, [r3, #12]
 800b108:	4b05      	ldr	r3, [pc, #20]	@ (800b120 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b10a:	2180      	movs	r1, #128	@ 0x80
 800b10c:	0449      	lsls	r1, r1, #17
 800b10e:	430a      	orrs	r2, r1
 800b110:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800b112:	2312      	movs	r3, #18
 800b114:	18fb      	adds	r3, r7, r3
 800b116:	781b      	ldrb	r3, [r3, #0]
}
 800b118:	0018      	movs	r0, r3
 800b11a:	46bd      	mov	sp, r7
 800b11c:	b006      	add	sp, #24
 800b11e:	bd80      	pop	{r7, pc}
 800b120:	40021000 	.word	0x40021000
 800b124:	efffffff 	.word	0xefffffff
 800b128:	fffff3ff 	.word	0xfffff3ff
 800b12c:	fffffcff 	.word	0xfffffcff
 800b130:	fff3ffff 	.word	0xfff3ffff
 800b134:	ffcfffff 	.word	0xffcfffff
 800b138:	ffffcfff 	.word	0xffffcfff
 800b13c:	ffff3fff 	.word	0xffff3fff
 800b140:	ffbfffff 	.word	0xffbfffff
 800b144:	feffffff 	.word	0xfeffffff

0800b148 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800b148:	b5b0      	push	{r4, r5, r7, lr}
 800b14a:	b084      	sub	sp, #16
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800b150:	230f      	movs	r3, #15
 800b152:	18fb      	adds	r3, r7, r3
 800b154:	2201      	movs	r2, #1
 800b156:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d100      	bne.n	800b160 <HAL_RTC_Init+0x18>
 800b15e:	e08c      	b.n	800b27a <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	2229      	movs	r2, #41	@ 0x29
 800b164:	5c9b      	ldrb	r3, [r3, r2]
 800b166:	b2db      	uxtb	r3, r3
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d10b      	bne.n	800b184 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	2228      	movs	r2, #40	@ 0x28
 800b170:	2100      	movs	r1, #0
 800b172:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	2288      	movs	r2, #136	@ 0x88
 800b178:	0212      	lsls	r2, r2, #8
 800b17a:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	0018      	movs	r0, r3
 800b180:	f7fc fcc4 	bl	8007b0c <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2229      	movs	r2, #41	@ 0x29
 800b188:	2102      	movs	r1, #2
 800b18a:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	68db      	ldr	r3, [r3, #12]
 800b192:	2210      	movs	r2, #16
 800b194:	4013      	ands	r3, r2
 800b196:	2b10      	cmp	r3, #16
 800b198:	d062      	beq.n	800b260 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	22ca      	movs	r2, #202	@ 0xca
 800b1a0:	625a      	str	r2, [r3, #36]	@ 0x24
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	2253      	movs	r2, #83	@ 0x53
 800b1a8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800b1aa:	250f      	movs	r5, #15
 800b1ac:	197c      	adds	r4, r7, r5
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	0018      	movs	r0, r3
 800b1b2:	f000 f891 	bl	800b2d8 <RTC_EnterInitMode>
 800b1b6:	0003      	movs	r3, r0
 800b1b8:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 800b1ba:	0028      	movs	r0, r5
 800b1bc:	183b      	adds	r3, r7, r0
 800b1be:	781b      	ldrb	r3, [r3, #0]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d12c      	bne.n	800b21e <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	699a      	ldr	r2, [r3, #24]
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	492e      	ldr	r1, [pc, #184]	@ (800b288 <HAL_RTC_Init+0x140>)
 800b1d0:	400a      	ands	r2, r1
 800b1d2:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	6999      	ldr	r1, [r3, #24]
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	689a      	ldr	r2, [r3, #8]
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	695b      	ldr	r3, [r3, #20]
 800b1e2:	431a      	orrs	r2, r3
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	69db      	ldr	r3, [r3, #28]
 800b1e8:	431a      	orrs	r2, r3
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	430a      	orrs	r2, r1
 800b1f0:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	687a      	ldr	r2, [r7, #4]
 800b1f8:	6912      	ldr	r2, [r2, #16]
 800b1fa:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	6919      	ldr	r1, [r3, #16]
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	68db      	ldr	r3, [r3, #12]
 800b206:	041a      	lsls	r2, r3, #16
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	430a      	orrs	r2, r1
 800b20e:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800b210:	183c      	adds	r4, r7, r0
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	0018      	movs	r0, r3
 800b216:	f000 f8a1 	bl	800b35c <RTC_ExitInitMode>
 800b21a:	0003      	movs	r3, r0
 800b21c:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 800b21e:	230f      	movs	r3, #15
 800b220:	18fb      	adds	r3, r7, r3
 800b222:	781b      	ldrb	r3, [r3, #0]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d116      	bne.n	800b256 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	699a      	ldr	r2, [r3, #24]
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	00d2      	lsls	r2, r2, #3
 800b234:	08d2      	lsrs	r2, r2, #3
 800b236:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	6999      	ldr	r1, [r3, #24]
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	6a1b      	ldr	r3, [r3, #32]
 800b246:	431a      	orrs	r2, r3
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	699b      	ldr	r3, [r3, #24]
 800b24c:	431a      	orrs	r2, r3
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	430a      	orrs	r2, r1
 800b254:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	22ff      	movs	r2, #255	@ 0xff
 800b25c:	625a      	str	r2, [r3, #36]	@ 0x24
 800b25e:	e003      	b.n	800b268 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800b260:	230f      	movs	r3, #15
 800b262:	18fb      	adds	r3, r7, r3
 800b264:	2200      	movs	r2, #0
 800b266:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 800b268:	230f      	movs	r3, #15
 800b26a:	18fb      	adds	r3, r7, r3
 800b26c:	781b      	ldrb	r3, [r3, #0]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d103      	bne.n	800b27a <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	2229      	movs	r2, #41	@ 0x29
 800b276:	2101      	movs	r1, #1
 800b278:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 800b27a:	230f      	movs	r3, #15
 800b27c:	18fb      	adds	r3, r7, r3
 800b27e:	781b      	ldrb	r3, [r3, #0]
}
 800b280:	0018      	movs	r0, r3
 800b282:	46bd      	mov	sp, r7
 800b284:	b004      	add	sp, #16
 800b286:	bdb0      	pop	{r4, r5, r7, pc}
 800b288:	fb8fffbf 	.word	0xfb8fffbf

0800b28c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b084      	sub	sp, #16
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	4a0e      	ldr	r2, [pc, #56]	@ (800b2d4 <HAL_RTC_WaitForSynchro+0x48>)
 800b29a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800b29c:	f7fd fcd0 	bl	8008c40 <HAL_GetTick>
 800b2a0:	0003      	movs	r3, r0
 800b2a2:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800b2a4:	e00a      	b.n	800b2bc <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800b2a6:	f7fd fccb 	bl	8008c40 <HAL_GetTick>
 800b2aa:	0002      	movs	r2, r0
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	1ad2      	subs	r2, r2, r3
 800b2b0:	23fa      	movs	r3, #250	@ 0xfa
 800b2b2:	009b      	lsls	r3, r3, #2
 800b2b4:	429a      	cmp	r2, r3
 800b2b6:	d901      	bls.n	800b2bc <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800b2b8:	2303      	movs	r3, #3
 800b2ba:	e006      	b.n	800b2ca <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	68db      	ldr	r3, [r3, #12]
 800b2c2:	2220      	movs	r2, #32
 800b2c4:	4013      	ands	r3, r2
 800b2c6:	d0ee      	beq.n	800b2a6 <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 800b2c8:	2300      	movs	r3, #0
}
 800b2ca:	0018      	movs	r0, r3
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	b004      	add	sp, #16
 800b2d0:	bd80      	pop	{r7, pc}
 800b2d2:	46c0      	nop			@ (mov r8, r8)
 800b2d4:	0001005f 	.word	0x0001005f

0800b2d8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b084      	sub	sp, #16
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 800b2e0:	230f      	movs	r3, #15
 800b2e2:	18fb      	adds	r3, r7, r3
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	68db      	ldr	r3, [r3, #12]
 800b2ee:	2240      	movs	r2, #64	@ 0x40
 800b2f0:	4013      	ands	r3, r2
 800b2f2:	d12c      	bne.n	800b34e <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	68da      	ldr	r2, [r3, #12]
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	2180      	movs	r1, #128	@ 0x80
 800b300:	430a      	orrs	r2, r1
 800b302:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800b304:	f7fd fc9c 	bl	8008c40 <HAL_GetTick>
 800b308:	0003      	movs	r3, r0
 800b30a:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800b30c:	e014      	b.n	800b338 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800b30e:	f7fd fc97 	bl	8008c40 <HAL_GetTick>
 800b312:	0002      	movs	r2, r0
 800b314:	68bb      	ldr	r3, [r7, #8]
 800b316:	1ad2      	subs	r2, r2, r3
 800b318:	200f      	movs	r0, #15
 800b31a:	183b      	adds	r3, r7, r0
 800b31c:	1839      	adds	r1, r7, r0
 800b31e:	7809      	ldrb	r1, [r1, #0]
 800b320:	7019      	strb	r1, [r3, #0]
 800b322:	23fa      	movs	r3, #250	@ 0xfa
 800b324:	009b      	lsls	r3, r3, #2
 800b326:	429a      	cmp	r2, r3
 800b328:	d906      	bls.n	800b338 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 800b32a:	183b      	adds	r3, r7, r0
 800b32c:	2203      	movs	r2, #3
 800b32e:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	2229      	movs	r2, #41	@ 0x29
 800b334:	2103      	movs	r1, #3
 800b336:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	68db      	ldr	r3, [r3, #12]
 800b33e:	2240      	movs	r2, #64	@ 0x40
 800b340:	4013      	ands	r3, r2
 800b342:	d104      	bne.n	800b34e <RTC_EnterInitMode+0x76>
 800b344:	230f      	movs	r3, #15
 800b346:	18fb      	adds	r3, r7, r3
 800b348:	781b      	ldrb	r3, [r3, #0]
 800b34a:	2b03      	cmp	r3, #3
 800b34c:	d1df      	bne.n	800b30e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800b34e:	230f      	movs	r3, #15
 800b350:	18fb      	adds	r3, r7, r3
 800b352:	781b      	ldrb	r3, [r3, #0]
}
 800b354:	0018      	movs	r0, r3
 800b356:	46bd      	mov	sp, r7
 800b358:	b004      	add	sp, #16
 800b35a:	bd80      	pop	{r7, pc}

0800b35c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800b35c:	b590      	push	{r4, r7, lr}
 800b35e:	b085      	sub	sp, #20
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b364:	240f      	movs	r4, #15
 800b366:	193b      	adds	r3, r7, r4
 800b368:	2200      	movs	r2, #0
 800b36a:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800b36c:	4b1c      	ldr	r3, [pc, #112]	@ (800b3e0 <RTC_ExitInitMode+0x84>)
 800b36e:	68da      	ldr	r2, [r3, #12]
 800b370:	4b1b      	ldr	r3, [pc, #108]	@ (800b3e0 <RTC_ExitInitMode+0x84>)
 800b372:	2180      	movs	r1, #128	@ 0x80
 800b374:	438a      	bics	r2, r1
 800b376:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800b378:	4b19      	ldr	r3, [pc, #100]	@ (800b3e0 <RTC_ExitInitMode+0x84>)
 800b37a:	699b      	ldr	r3, [r3, #24]
 800b37c:	2220      	movs	r2, #32
 800b37e:	4013      	ands	r3, r2
 800b380:	d10d      	bne.n	800b39e <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	0018      	movs	r0, r3
 800b386:	f7ff ff81 	bl	800b28c <HAL_RTC_WaitForSynchro>
 800b38a:	1e03      	subs	r3, r0, #0
 800b38c:	d021      	beq.n	800b3d2 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	2229      	movs	r2, #41	@ 0x29
 800b392:	2103      	movs	r1, #3
 800b394:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800b396:	193b      	adds	r3, r7, r4
 800b398:	2203      	movs	r2, #3
 800b39a:	701a      	strb	r2, [r3, #0]
 800b39c:	e019      	b.n	800b3d2 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800b39e:	4b10      	ldr	r3, [pc, #64]	@ (800b3e0 <RTC_ExitInitMode+0x84>)
 800b3a0:	699a      	ldr	r2, [r3, #24]
 800b3a2:	4b0f      	ldr	r3, [pc, #60]	@ (800b3e0 <RTC_ExitInitMode+0x84>)
 800b3a4:	2120      	movs	r1, #32
 800b3a6:	438a      	bics	r2, r1
 800b3a8:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	0018      	movs	r0, r3
 800b3ae:	f7ff ff6d 	bl	800b28c <HAL_RTC_WaitForSynchro>
 800b3b2:	1e03      	subs	r3, r0, #0
 800b3b4:	d007      	beq.n	800b3c6 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	2229      	movs	r2, #41	@ 0x29
 800b3ba:	2103      	movs	r1, #3
 800b3bc:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800b3be:	230f      	movs	r3, #15
 800b3c0:	18fb      	adds	r3, r7, r3
 800b3c2:	2203      	movs	r2, #3
 800b3c4:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800b3c6:	4b06      	ldr	r3, [pc, #24]	@ (800b3e0 <RTC_ExitInitMode+0x84>)
 800b3c8:	699a      	ldr	r2, [r3, #24]
 800b3ca:	4b05      	ldr	r3, [pc, #20]	@ (800b3e0 <RTC_ExitInitMode+0x84>)
 800b3cc:	2120      	movs	r1, #32
 800b3ce:	430a      	orrs	r2, r1
 800b3d0:	619a      	str	r2, [r3, #24]
  }

  return status;
 800b3d2:	230f      	movs	r3, #15
 800b3d4:	18fb      	adds	r3, r7, r3
 800b3d6:	781b      	ldrb	r3, [r3, #0]
}
 800b3d8:	0018      	movs	r0, r3
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	b005      	add	sp, #20
 800b3de:	bd90      	pop	{r4, r7, pc}
 800b3e0:	40002800 	.word	0x40002800

0800b3e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b084      	sub	sp, #16
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d101      	bne.n	800b3f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b3f2:	2301      	movs	r3, #1
 800b3f4:	e0a8      	b.n	800b548 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d109      	bne.n	800b412 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	685a      	ldr	r2, [r3, #4]
 800b402:	2382      	movs	r3, #130	@ 0x82
 800b404:	005b      	lsls	r3, r3, #1
 800b406:	429a      	cmp	r2, r3
 800b408:	d009      	beq.n	800b41e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	2200      	movs	r2, #0
 800b40e:	61da      	str	r2, [r3, #28]
 800b410:	e005      	b.n	800b41e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	2200      	movs	r2, #0
 800b416:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	2200      	movs	r2, #0
 800b41c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	2200      	movs	r2, #0
 800b422:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	225d      	movs	r2, #93	@ 0x5d
 800b428:	5c9b      	ldrb	r3, [r3, r2]
 800b42a:	b2db      	uxtb	r3, r3
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d107      	bne.n	800b440 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	225c      	movs	r2, #92	@ 0x5c
 800b434:	2100      	movs	r1, #0
 800b436:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	0018      	movs	r0, r3
 800b43c:	f7fc fba4 	bl	8007b88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	225d      	movs	r2, #93	@ 0x5d
 800b444:	2102      	movs	r1, #2
 800b446:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	681a      	ldr	r2, [r3, #0]
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	2140      	movs	r1, #64	@ 0x40
 800b454:	438a      	bics	r2, r1
 800b456:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	68da      	ldr	r2, [r3, #12]
 800b45c:	23e0      	movs	r3, #224	@ 0xe0
 800b45e:	00db      	lsls	r3, r3, #3
 800b460:	429a      	cmp	r2, r3
 800b462:	d902      	bls.n	800b46a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800b464:	2300      	movs	r3, #0
 800b466:	60fb      	str	r3, [r7, #12]
 800b468:	e002      	b.n	800b470 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800b46a:	2380      	movs	r3, #128	@ 0x80
 800b46c:	015b      	lsls	r3, r3, #5
 800b46e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	68da      	ldr	r2, [r3, #12]
 800b474:	23f0      	movs	r3, #240	@ 0xf0
 800b476:	011b      	lsls	r3, r3, #4
 800b478:	429a      	cmp	r2, r3
 800b47a:	d008      	beq.n	800b48e <HAL_SPI_Init+0xaa>
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	68da      	ldr	r2, [r3, #12]
 800b480:	23e0      	movs	r3, #224	@ 0xe0
 800b482:	00db      	lsls	r3, r3, #3
 800b484:	429a      	cmp	r2, r3
 800b486:	d002      	beq.n	800b48e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	2200      	movs	r2, #0
 800b48c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	685a      	ldr	r2, [r3, #4]
 800b492:	2382      	movs	r3, #130	@ 0x82
 800b494:	005b      	lsls	r3, r3, #1
 800b496:	401a      	ands	r2, r3
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	6899      	ldr	r1, [r3, #8]
 800b49c:	2384      	movs	r3, #132	@ 0x84
 800b49e:	021b      	lsls	r3, r3, #8
 800b4a0:	400b      	ands	r3, r1
 800b4a2:	431a      	orrs	r2, r3
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	691b      	ldr	r3, [r3, #16]
 800b4a8:	2102      	movs	r1, #2
 800b4aa:	400b      	ands	r3, r1
 800b4ac:	431a      	orrs	r2, r3
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	695b      	ldr	r3, [r3, #20]
 800b4b2:	2101      	movs	r1, #1
 800b4b4:	400b      	ands	r3, r1
 800b4b6:	431a      	orrs	r2, r3
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	6999      	ldr	r1, [r3, #24]
 800b4bc:	2380      	movs	r3, #128	@ 0x80
 800b4be:	009b      	lsls	r3, r3, #2
 800b4c0:	400b      	ands	r3, r1
 800b4c2:	431a      	orrs	r2, r3
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	69db      	ldr	r3, [r3, #28]
 800b4c8:	2138      	movs	r1, #56	@ 0x38
 800b4ca:	400b      	ands	r3, r1
 800b4cc:	431a      	orrs	r2, r3
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	6a1b      	ldr	r3, [r3, #32]
 800b4d2:	2180      	movs	r1, #128	@ 0x80
 800b4d4:	400b      	ands	r3, r1
 800b4d6:	431a      	orrs	r2, r3
 800b4d8:	0011      	movs	r1, r2
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b4de:	2380      	movs	r3, #128	@ 0x80
 800b4e0:	019b      	lsls	r3, r3, #6
 800b4e2:	401a      	ands	r2, r3
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	430a      	orrs	r2, r1
 800b4ea:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	699b      	ldr	r3, [r3, #24]
 800b4f0:	0c1b      	lsrs	r3, r3, #16
 800b4f2:	2204      	movs	r2, #4
 800b4f4:	401a      	ands	r2, r3
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4fa:	2110      	movs	r1, #16
 800b4fc:	400b      	ands	r3, r1
 800b4fe:	431a      	orrs	r2, r3
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b504:	2108      	movs	r1, #8
 800b506:	400b      	ands	r3, r1
 800b508:	431a      	orrs	r2, r3
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	68d9      	ldr	r1, [r3, #12]
 800b50e:	23f0      	movs	r3, #240	@ 0xf0
 800b510:	011b      	lsls	r3, r3, #4
 800b512:	400b      	ands	r3, r1
 800b514:	431a      	orrs	r2, r3
 800b516:	0011      	movs	r1, r2
 800b518:	68fa      	ldr	r2, [r7, #12]
 800b51a:	2380      	movs	r3, #128	@ 0x80
 800b51c:	015b      	lsls	r3, r3, #5
 800b51e:	401a      	ands	r2, r3
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	430a      	orrs	r2, r1
 800b526:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	69da      	ldr	r2, [r3, #28]
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	4907      	ldr	r1, [pc, #28]	@ (800b550 <HAL_SPI_Init+0x16c>)
 800b534:	400a      	ands	r2, r1
 800b536:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	2200      	movs	r2, #0
 800b53c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	225d      	movs	r2, #93	@ 0x5d
 800b542:	2101      	movs	r1, #1
 800b544:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b546:	2300      	movs	r3, #0
}
 800b548:	0018      	movs	r0, r3
 800b54a:	46bd      	mov	sp, r7
 800b54c:	b004      	add	sp, #16
 800b54e:	bd80      	pop	{r7, pc}
 800b550:	fffff7ff 	.word	0xfffff7ff

0800b554 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b554:	b580      	push	{r7, lr}
 800b556:	b088      	sub	sp, #32
 800b558:	af00      	add	r7, sp, #0
 800b55a:	60f8      	str	r0, [r7, #12]
 800b55c:	60b9      	str	r1, [r7, #8]
 800b55e:	603b      	str	r3, [r7, #0]
 800b560:	1dbb      	adds	r3, r7, #6
 800b562:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b564:	231f      	movs	r3, #31
 800b566:	18fb      	adds	r3, r7, r3
 800b568:	2200      	movs	r2, #0
 800b56a:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	225c      	movs	r2, #92	@ 0x5c
 800b570:	5c9b      	ldrb	r3, [r3, r2]
 800b572:	2b01      	cmp	r3, #1
 800b574:	d101      	bne.n	800b57a <HAL_SPI_Transmit+0x26>
 800b576:	2302      	movs	r3, #2
 800b578:	e147      	b.n	800b80a <HAL_SPI_Transmit+0x2b6>
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	225c      	movs	r2, #92	@ 0x5c
 800b57e:	2101      	movs	r1, #1
 800b580:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b582:	f7fd fb5d 	bl	8008c40 <HAL_GetTick>
 800b586:	0003      	movs	r3, r0
 800b588:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800b58a:	2316      	movs	r3, #22
 800b58c:	18fb      	adds	r3, r7, r3
 800b58e:	1dba      	adds	r2, r7, #6
 800b590:	8812      	ldrh	r2, [r2, #0]
 800b592:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	225d      	movs	r2, #93	@ 0x5d
 800b598:	5c9b      	ldrb	r3, [r3, r2]
 800b59a:	b2db      	uxtb	r3, r3
 800b59c:	2b01      	cmp	r3, #1
 800b59e:	d004      	beq.n	800b5aa <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800b5a0:	231f      	movs	r3, #31
 800b5a2:	18fb      	adds	r3, r7, r3
 800b5a4:	2202      	movs	r2, #2
 800b5a6:	701a      	strb	r2, [r3, #0]
    goto error;
 800b5a8:	e128      	b.n	800b7fc <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 800b5aa:	68bb      	ldr	r3, [r7, #8]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d003      	beq.n	800b5b8 <HAL_SPI_Transmit+0x64>
 800b5b0:	1dbb      	adds	r3, r7, #6
 800b5b2:	881b      	ldrh	r3, [r3, #0]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d104      	bne.n	800b5c2 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800b5b8:	231f      	movs	r3, #31
 800b5ba:	18fb      	adds	r3, r7, r3
 800b5bc:	2201      	movs	r2, #1
 800b5be:	701a      	strb	r2, [r3, #0]
    goto error;
 800b5c0:	e11c      	b.n	800b7fc <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	225d      	movs	r2, #93	@ 0x5d
 800b5c6:	2103      	movs	r1, #3
 800b5c8:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	68ba      	ldr	r2, [r7, #8]
 800b5d4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	1dba      	adds	r2, r7, #6
 800b5da:	8812      	ldrh	r2, [r2, #0]
 800b5dc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	1dba      	adds	r2, r7, #6
 800b5e2:	8812      	ldrh	r2, [r2, #0]
 800b5e4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	2244      	movs	r2, #68	@ 0x44
 800b5f0:	2100      	movs	r1, #0
 800b5f2:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	2246      	movs	r2, #70	@ 0x46
 800b5f8:	2100      	movs	r1, #0
 800b5fa:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	2200      	movs	r2, #0
 800b600:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	2200      	movs	r2, #0
 800b606:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	689a      	ldr	r2, [r3, #8]
 800b60c:	2380      	movs	r3, #128	@ 0x80
 800b60e:	021b      	lsls	r3, r3, #8
 800b610:	429a      	cmp	r2, r3
 800b612:	d110      	bne.n	800b636 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	681a      	ldr	r2, [r3, #0]
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	2140      	movs	r1, #64	@ 0x40
 800b620:	438a      	bics	r2, r1
 800b622:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	681a      	ldr	r2, [r3, #0]
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	2180      	movs	r1, #128	@ 0x80
 800b630:	01c9      	lsls	r1, r1, #7
 800b632:	430a      	orrs	r2, r1
 800b634:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	2240      	movs	r2, #64	@ 0x40
 800b63e:	4013      	ands	r3, r2
 800b640:	2b40      	cmp	r3, #64	@ 0x40
 800b642:	d007      	beq.n	800b654 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	681a      	ldr	r2, [r3, #0]
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	2140      	movs	r1, #64	@ 0x40
 800b650:	430a      	orrs	r2, r1
 800b652:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	68da      	ldr	r2, [r3, #12]
 800b658:	23e0      	movs	r3, #224	@ 0xe0
 800b65a:	00db      	lsls	r3, r3, #3
 800b65c:	429a      	cmp	r2, r3
 800b65e:	d952      	bls.n	800b706 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	685b      	ldr	r3, [r3, #4]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d004      	beq.n	800b672 <HAL_SPI_Transmit+0x11e>
 800b668:	2316      	movs	r3, #22
 800b66a:	18fb      	adds	r3, r7, r3
 800b66c:	881b      	ldrh	r3, [r3, #0]
 800b66e:	2b01      	cmp	r3, #1
 800b670:	d143      	bne.n	800b6fa <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b676:	881a      	ldrh	r2, [r3, #0]
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b682:	1c9a      	adds	r2, r3, #2
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b68c:	b29b      	uxth	r3, r3
 800b68e:	3b01      	subs	r3, #1
 800b690:	b29a      	uxth	r2, r3
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b696:	e030      	b.n	800b6fa <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	689b      	ldr	r3, [r3, #8]
 800b69e:	2202      	movs	r2, #2
 800b6a0:	4013      	ands	r3, r2
 800b6a2:	2b02      	cmp	r3, #2
 800b6a4:	d112      	bne.n	800b6cc <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b6aa:	881a      	ldrh	r2, [r3, #0]
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b6b6:	1c9a      	adds	r2, r3, #2
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b6c0:	b29b      	uxth	r3, r3
 800b6c2:	3b01      	subs	r3, #1
 800b6c4:	b29a      	uxth	r2, r3
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800b6ca:	e016      	b.n	800b6fa <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b6cc:	f7fd fab8 	bl	8008c40 <HAL_GetTick>
 800b6d0:	0002      	movs	r2, r0
 800b6d2:	69bb      	ldr	r3, [r7, #24]
 800b6d4:	1ad3      	subs	r3, r2, r3
 800b6d6:	683a      	ldr	r2, [r7, #0]
 800b6d8:	429a      	cmp	r2, r3
 800b6da:	d802      	bhi.n	800b6e2 <HAL_SPI_Transmit+0x18e>
 800b6dc:	683b      	ldr	r3, [r7, #0]
 800b6de:	3301      	adds	r3, #1
 800b6e0:	d102      	bne.n	800b6e8 <HAL_SPI_Transmit+0x194>
 800b6e2:	683b      	ldr	r3, [r7, #0]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d108      	bne.n	800b6fa <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 800b6e8:	231f      	movs	r3, #31
 800b6ea:	18fb      	adds	r3, r7, r3
 800b6ec:	2203      	movs	r2, #3
 800b6ee:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	225d      	movs	r2, #93	@ 0x5d
 800b6f4:	2101      	movs	r1, #1
 800b6f6:	5499      	strb	r1, [r3, r2]
          goto error;
 800b6f8:	e080      	b.n	800b7fc <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b6fe:	b29b      	uxth	r3, r3
 800b700:	2b00      	cmp	r3, #0
 800b702:	d1c9      	bne.n	800b698 <HAL_SPI_Transmit+0x144>
 800b704:	e053      	b.n	800b7ae <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	685b      	ldr	r3, [r3, #4]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d004      	beq.n	800b718 <HAL_SPI_Transmit+0x1c4>
 800b70e:	2316      	movs	r3, #22
 800b710:	18fb      	adds	r3, r7, r3
 800b712:	881b      	ldrh	r3, [r3, #0]
 800b714:	2b01      	cmp	r3, #1
 800b716:	d145      	bne.n	800b7a4 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	330c      	adds	r3, #12
 800b722:	7812      	ldrb	r2, [r2, #0]
 800b724:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b72a:	1c5a      	adds	r2, r3, #1
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b734:	b29b      	uxth	r3, r3
 800b736:	3b01      	subs	r3, #1
 800b738:	b29a      	uxth	r2, r3
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800b73e:	e031      	b.n	800b7a4 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	689b      	ldr	r3, [r3, #8]
 800b746:	2202      	movs	r2, #2
 800b748:	4013      	ands	r3, r2
 800b74a:	2b02      	cmp	r3, #2
 800b74c:	d113      	bne.n	800b776 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	330c      	adds	r3, #12
 800b758:	7812      	ldrb	r2, [r2, #0]
 800b75a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b760:	1c5a      	adds	r2, r3, #1
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b76a:	b29b      	uxth	r3, r3
 800b76c:	3b01      	subs	r3, #1
 800b76e:	b29a      	uxth	r2, r3
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800b774:	e016      	b.n	800b7a4 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b776:	f7fd fa63 	bl	8008c40 <HAL_GetTick>
 800b77a:	0002      	movs	r2, r0
 800b77c:	69bb      	ldr	r3, [r7, #24]
 800b77e:	1ad3      	subs	r3, r2, r3
 800b780:	683a      	ldr	r2, [r7, #0]
 800b782:	429a      	cmp	r2, r3
 800b784:	d802      	bhi.n	800b78c <HAL_SPI_Transmit+0x238>
 800b786:	683b      	ldr	r3, [r7, #0]
 800b788:	3301      	adds	r3, #1
 800b78a:	d102      	bne.n	800b792 <HAL_SPI_Transmit+0x23e>
 800b78c:	683b      	ldr	r3, [r7, #0]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d108      	bne.n	800b7a4 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 800b792:	231f      	movs	r3, #31
 800b794:	18fb      	adds	r3, r7, r3
 800b796:	2203      	movs	r2, #3
 800b798:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	225d      	movs	r2, #93	@ 0x5d
 800b79e:	2101      	movs	r1, #1
 800b7a0:	5499      	strb	r1, [r3, r2]
          goto error;
 800b7a2:	e02b      	b.n	800b7fc <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b7a8:	b29b      	uxth	r3, r3
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d1c8      	bne.n	800b740 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b7ae:	69ba      	ldr	r2, [r7, #24]
 800b7b0:	6839      	ldr	r1, [r7, #0]
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	0018      	movs	r0, r3
 800b7b6:	f000 f95d 	bl	800ba74 <SPI_EndRxTxTransaction>
 800b7ba:	1e03      	subs	r3, r0, #0
 800b7bc:	d002      	beq.n	800b7c4 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	2220      	movs	r2, #32
 800b7c2:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	689b      	ldr	r3, [r3, #8]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d10a      	bne.n	800b7e2 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	613b      	str	r3, [r7, #16]
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	68db      	ldr	r3, [r3, #12]
 800b7d6:	613b      	str	r3, [r7, #16]
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	689b      	ldr	r3, [r3, #8]
 800b7de:	613b      	str	r3, [r7, #16]
 800b7e0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d004      	beq.n	800b7f4 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 800b7ea:	231f      	movs	r3, #31
 800b7ec:	18fb      	adds	r3, r7, r3
 800b7ee:	2201      	movs	r2, #1
 800b7f0:	701a      	strb	r2, [r3, #0]
 800b7f2:	e003      	b.n	800b7fc <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	225d      	movs	r2, #93	@ 0x5d
 800b7f8:	2101      	movs	r1, #1
 800b7fa:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	225c      	movs	r2, #92	@ 0x5c
 800b800:	2100      	movs	r1, #0
 800b802:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800b804:	231f      	movs	r3, #31
 800b806:	18fb      	adds	r3, r7, r3
 800b808:	781b      	ldrb	r3, [r3, #0]
}
 800b80a:	0018      	movs	r0, r3
 800b80c:	46bd      	mov	sp, r7
 800b80e:	b008      	add	sp, #32
 800b810:	bd80      	pop	{r7, pc}
	...

0800b814 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b814:	b580      	push	{r7, lr}
 800b816:	b088      	sub	sp, #32
 800b818:	af00      	add	r7, sp, #0
 800b81a:	60f8      	str	r0, [r7, #12]
 800b81c:	60b9      	str	r1, [r7, #8]
 800b81e:	603b      	str	r3, [r7, #0]
 800b820:	1dfb      	adds	r3, r7, #7
 800b822:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b824:	f7fd fa0c 	bl	8008c40 <HAL_GetTick>
 800b828:	0002      	movs	r2, r0
 800b82a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b82c:	1a9b      	subs	r3, r3, r2
 800b82e:	683a      	ldr	r2, [r7, #0]
 800b830:	18d3      	adds	r3, r2, r3
 800b832:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b834:	f7fd fa04 	bl	8008c40 <HAL_GetTick>
 800b838:	0003      	movs	r3, r0
 800b83a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b83c:	4b3a      	ldr	r3, [pc, #232]	@ (800b928 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	015b      	lsls	r3, r3, #5
 800b842:	0d1b      	lsrs	r3, r3, #20
 800b844:	69fa      	ldr	r2, [r7, #28]
 800b846:	4353      	muls	r3, r2
 800b848:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b84a:	e058      	b.n	800b8fe <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b84c:	683b      	ldr	r3, [r7, #0]
 800b84e:	3301      	adds	r3, #1
 800b850:	d055      	beq.n	800b8fe <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b852:	f7fd f9f5 	bl	8008c40 <HAL_GetTick>
 800b856:	0002      	movs	r2, r0
 800b858:	69bb      	ldr	r3, [r7, #24]
 800b85a:	1ad3      	subs	r3, r2, r3
 800b85c:	69fa      	ldr	r2, [r7, #28]
 800b85e:	429a      	cmp	r2, r3
 800b860:	d902      	bls.n	800b868 <SPI_WaitFlagStateUntilTimeout+0x54>
 800b862:	69fb      	ldr	r3, [r7, #28]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d142      	bne.n	800b8ee <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	685a      	ldr	r2, [r3, #4]
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	21e0      	movs	r1, #224	@ 0xe0
 800b874:	438a      	bics	r2, r1
 800b876:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	685a      	ldr	r2, [r3, #4]
 800b87c:	2382      	movs	r3, #130	@ 0x82
 800b87e:	005b      	lsls	r3, r3, #1
 800b880:	429a      	cmp	r2, r3
 800b882:	d113      	bne.n	800b8ac <SPI_WaitFlagStateUntilTimeout+0x98>
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	689a      	ldr	r2, [r3, #8]
 800b888:	2380      	movs	r3, #128	@ 0x80
 800b88a:	021b      	lsls	r3, r3, #8
 800b88c:	429a      	cmp	r2, r3
 800b88e:	d005      	beq.n	800b89c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	689a      	ldr	r2, [r3, #8]
 800b894:	2380      	movs	r3, #128	@ 0x80
 800b896:	00db      	lsls	r3, r3, #3
 800b898:	429a      	cmp	r2, r3
 800b89a:	d107      	bne.n	800b8ac <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	681a      	ldr	r2, [r3, #0]
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	2140      	movs	r1, #64	@ 0x40
 800b8a8:	438a      	bics	r2, r1
 800b8aa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b8b0:	2380      	movs	r3, #128	@ 0x80
 800b8b2:	019b      	lsls	r3, r3, #6
 800b8b4:	429a      	cmp	r2, r3
 800b8b6:	d110      	bne.n	800b8da <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	681a      	ldr	r2, [r3, #0]
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	491a      	ldr	r1, [pc, #104]	@ (800b92c <SPI_WaitFlagStateUntilTimeout+0x118>)
 800b8c4:	400a      	ands	r2, r1
 800b8c6:	601a      	str	r2, [r3, #0]
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	681a      	ldr	r2, [r3, #0]
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	2180      	movs	r1, #128	@ 0x80
 800b8d4:	0189      	lsls	r1, r1, #6
 800b8d6:	430a      	orrs	r2, r1
 800b8d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	225d      	movs	r2, #93	@ 0x5d
 800b8de:	2101      	movs	r1, #1
 800b8e0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	225c      	movs	r2, #92	@ 0x5c
 800b8e6:	2100      	movs	r1, #0
 800b8e8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800b8ea:	2303      	movs	r3, #3
 800b8ec:	e017      	b.n	800b91e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b8ee:	697b      	ldr	r3, [r7, #20]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d101      	bne.n	800b8f8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b8f8:	697b      	ldr	r3, [r7, #20]
 800b8fa:	3b01      	subs	r3, #1
 800b8fc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	689b      	ldr	r3, [r3, #8]
 800b904:	68ba      	ldr	r2, [r7, #8]
 800b906:	4013      	ands	r3, r2
 800b908:	68ba      	ldr	r2, [r7, #8]
 800b90a:	1ad3      	subs	r3, r2, r3
 800b90c:	425a      	negs	r2, r3
 800b90e:	4153      	adcs	r3, r2
 800b910:	b2db      	uxtb	r3, r3
 800b912:	001a      	movs	r2, r3
 800b914:	1dfb      	adds	r3, r7, #7
 800b916:	781b      	ldrb	r3, [r3, #0]
 800b918:	429a      	cmp	r2, r3
 800b91a:	d197      	bne.n	800b84c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b91c:	2300      	movs	r3, #0
}
 800b91e:	0018      	movs	r0, r3
 800b920:	46bd      	mov	sp, r7
 800b922:	b008      	add	sp, #32
 800b924:	bd80      	pop	{r7, pc}
 800b926:	46c0      	nop			@ (mov r8, r8)
 800b928:	20000004 	.word	0x20000004
 800b92c:	ffffdfff 	.word	0xffffdfff

0800b930 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b08a      	sub	sp, #40	@ 0x28
 800b934:	af00      	add	r7, sp, #0
 800b936:	60f8      	str	r0, [r7, #12]
 800b938:	60b9      	str	r1, [r7, #8]
 800b93a:	607a      	str	r2, [r7, #4]
 800b93c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800b93e:	2317      	movs	r3, #23
 800b940:	18fb      	adds	r3, r7, r3
 800b942:	2200      	movs	r2, #0
 800b944:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800b946:	f7fd f97b 	bl	8008c40 <HAL_GetTick>
 800b94a:	0002      	movs	r2, r0
 800b94c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b94e:	1a9b      	subs	r3, r3, r2
 800b950:	683a      	ldr	r2, [r7, #0]
 800b952:	18d3      	adds	r3, r2, r3
 800b954:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800b956:	f7fd f973 	bl	8008c40 <HAL_GetTick>
 800b95a:	0003      	movs	r3, r0
 800b95c:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	330c      	adds	r3, #12
 800b964:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800b966:	4b41      	ldr	r3, [pc, #260]	@ (800ba6c <SPI_WaitFifoStateUntilTimeout+0x13c>)
 800b968:	681a      	ldr	r2, [r3, #0]
 800b96a:	0013      	movs	r3, r2
 800b96c:	009b      	lsls	r3, r3, #2
 800b96e:	189b      	adds	r3, r3, r2
 800b970:	00da      	lsls	r2, r3, #3
 800b972:	1ad3      	subs	r3, r2, r3
 800b974:	0d1b      	lsrs	r3, r3, #20
 800b976:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b978:	4353      	muls	r3, r2
 800b97a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800b97c:	e068      	b.n	800ba50 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800b97e:	68ba      	ldr	r2, [r7, #8]
 800b980:	23c0      	movs	r3, #192	@ 0xc0
 800b982:	00db      	lsls	r3, r3, #3
 800b984:	429a      	cmp	r2, r3
 800b986:	d10a      	bne.n	800b99e <SPI_WaitFifoStateUntilTimeout+0x6e>
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d107      	bne.n	800b99e <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800b98e:	69fb      	ldr	r3, [r7, #28]
 800b990:	781b      	ldrb	r3, [r3, #0]
 800b992:	b2da      	uxtb	r2, r3
 800b994:	2117      	movs	r1, #23
 800b996:	187b      	adds	r3, r7, r1
 800b998:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800b99a:	187b      	adds	r3, r7, r1
 800b99c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800b99e:	683b      	ldr	r3, [r7, #0]
 800b9a0:	3301      	adds	r3, #1
 800b9a2:	d055      	beq.n	800ba50 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b9a4:	f7fd f94c 	bl	8008c40 <HAL_GetTick>
 800b9a8:	0002      	movs	r2, r0
 800b9aa:	6a3b      	ldr	r3, [r7, #32]
 800b9ac:	1ad3      	subs	r3, r2, r3
 800b9ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b9b0:	429a      	cmp	r2, r3
 800b9b2:	d902      	bls.n	800b9ba <SPI_WaitFifoStateUntilTimeout+0x8a>
 800b9b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d142      	bne.n	800ba40 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	685a      	ldr	r2, [r3, #4]
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	21e0      	movs	r1, #224	@ 0xe0
 800b9c6:	438a      	bics	r2, r1
 800b9c8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	685a      	ldr	r2, [r3, #4]
 800b9ce:	2382      	movs	r3, #130	@ 0x82
 800b9d0:	005b      	lsls	r3, r3, #1
 800b9d2:	429a      	cmp	r2, r3
 800b9d4:	d113      	bne.n	800b9fe <SPI_WaitFifoStateUntilTimeout+0xce>
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	689a      	ldr	r2, [r3, #8]
 800b9da:	2380      	movs	r3, #128	@ 0x80
 800b9dc:	021b      	lsls	r3, r3, #8
 800b9de:	429a      	cmp	r2, r3
 800b9e0:	d005      	beq.n	800b9ee <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	689a      	ldr	r2, [r3, #8]
 800b9e6:	2380      	movs	r3, #128	@ 0x80
 800b9e8:	00db      	lsls	r3, r3, #3
 800b9ea:	429a      	cmp	r2, r3
 800b9ec:	d107      	bne.n	800b9fe <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	681a      	ldr	r2, [r3, #0]
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	2140      	movs	r1, #64	@ 0x40
 800b9fa:	438a      	bics	r2, r1
 800b9fc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ba02:	2380      	movs	r3, #128	@ 0x80
 800ba04:	019b      	lsls	r3, r3, #6
 800ba06:	429a      	cmp	r2, r3
 800ba08:	d110      	bne.n	800ba2c <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	681a      	ldr	r2, [r3, #0]
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	4916      	ldr	r1, [pc, #88]	@ (800ba70 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800ba16:	400a      	ands	r2, r1
 800ba18:	601a      	str	r2, [r3, #0]
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	681a      	ldr	r2, [r3, #0]
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	2180      	movs	r1, #128	@ 0x80
 800ba26:	0189      	lsls	r1, r1, #6
 800ba28:	430a      	orrs	r2, r1
 800ba2a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	225d      	movs	r2, #93	@ 0x5d
 800ba30:	2101      	movs	r1, #1
 800ba32:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	225c      	movs	r2, #92	@ 0x5c
 800ba38:	2100      	movs	r1, #0
 800ba3a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800ba3c:	2303      	movs	r3, #3
 800ba3e:	e010      	b.n	800ba62 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800ba40:	69bb      	ldr	r3, [r7, #24]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d101      	bne.n	800ba4a <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800ba46:	2300      	movs	r3, #0
 800ba48:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800ba4a:	69bb      	ldr	r3, [r7, #24]
 800ba4c:	3b01      	subs	r3, #1
 800ba4e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	689b      	ldr	r3, [r3, #8]
 800ba56:	68ba      	ldr	r2, [r7, #8]
 800ba58:	4013      	ands	r3, r2
 800ba5a:	687a      	ldr	r2, [r7, #4]
 800ba5c:	429a      	cmp	r2, r3
 800ba5e:	d18e      	bne.n	800b97e <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800ba60:	2300      	movs	r3, #0
}
 800ba62:	0018      	movs	r0, r3
 800ba64:	46bd      	mov	sp, r7
 800ba66:	b00a      	add	sp, #40	@ 0x28
 800ba68:	bd80      	pop	{r7, pc}
 800ba6a:	46c0      	nop			@ (mov r8, r8)
 800ba6c:	20000004 	.word	0x20000004
 800ba70:	ffffdfff 	.word	0xffffdfff

0800ba74 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b086      	sub	sp, #24
 800ba78:	af02      	add	r7, sp, #8
 800ba7a:	60f8      	str	r0, [r7, #12]
 800ba7c:	60b9      	str	r1, [r7, #8]
 800ba7e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ba80:	68ba      	ldr	r2, [r7, #8]
 800ba82:	23c0      	movs	r3, #192	@ 0xc0
 800ba84:	0159      	lsls	r1, r3, #5
 800ba86:	68f8      	ldr	r0, [r7, #12]
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	9300      	str	r3, [sp, #0]
 800ba8c:	0013      	movs	r3, r2
 800ba8e:	2200      	movs	r2, #0
 800ba90:	f7ff ff4e 	bl	800b930 <SPI_WaitFifoStateUntilTimeout>
 800ba94:	1e03      	subs	r3, r0, #0
 800ba96:	d007      	beq.n	800baa8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ba9c:	2220      	movs	r2, #32
 800ba9e:	431a      	orrs	r2, r3
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800baa4:	2303      	movs	r3, #3
 800baa6:	e027      	b.n	800baf8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800baa8:	68ba      	ldr	r2, [r7, #8]
 800baaa:	68f8      	ldr	r0, [r7, #12]
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	9300      	str	r3, [sp, #0]
 800bab0:	0013      	movs	r3, r2
 800bab2:	2200      	movs	r2, #0
 800bab4:	2180      	movs	r1, #128	@ 0x80
 800bab6:	f7ff fead 	bl	800b814 <SPI_WaitFlagStateUntilTimeout>
 800baba:	1e03      	subs	r3, r0, #0
 800babc:	d007      	beq.n	800bace <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bac2:	2220      	movs	r2, #32
 800bac4:	431a      	orrs	r2, r3
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800baca:	2303      	movs	r3, #3
 800bacc:	e014      	b.n	800baf8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800bace:	68ba      	ldr	r2, [r7, #8]
 800bad0:	23c0      	movs	r3, #192	@ 0xc0
 800bad2:	00d9      	lsls	r1, r3, #3
 800bad4:	68f8      	ldr	r0, [r7, #12]
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	9300      	str	r3, [sp, #0]
 800bada:	0013      	movs	r3, r2
 800badc:	2200      	movs	r2, #0
 800bade:	f7ff ff27 	bl	800b930 <SPI_WaitFifoStateUntilTimeout>
 800bae2:	1e03      	subs	r3, r0, #0
 800bae4:	d007      	beq.n	800baf6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800baea:	2220      	movs	r2, #32
 800baec:	431a      	orrs	r2, r3
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800baf2:	2303      	movs	r3, #3
 800baf4:	e000      	b.n	800baf8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800baf6:	2300      	movs	r3, #0
}
 800baf8:	0018      	movs	r0, r3
 800bafa:	46bd      	mov	sp, r7
 800bafc:	b004      	add	sp, #16
 800bafe:	bd80      	pop	{r7, pc}

0800bb00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b082      	sub	sp, #8
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d101      	bne.n	800bb12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bb0e:	2301      	movs	r3, #1
 800bb10:	e04a      	b.n	800bba8 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	223d      	movs	r2, #61	@ 0x3d
 800bb16:	5c9b      	ldrb	r3, [r3, r2]
 800bb18:	b2db      	uxtb	r3, r3
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d107      	bne.n	800bb2e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	223c      	movs	r2, #60	@ 0x3c
 800bb22:	2100      	movs	r1, #0
 800bb24:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	0018      	movs	r0, r3
 800bb2a:	f7fc f89b 	bl	8007c64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	223d      	movs	r2, #61	@ 0x3d
 800bb32:	2102      	movs	r1, #2
 800bb34:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681a      	ldr	r2, [r3, #0]
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	3304      	adds	r3, #4
 800bb3e:	0019      	movs	r1, r3
 800bb40:	0010      	movs	r0, r2
 800bb42:	f000 fb11 	bl	800c168 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	2248      	movs	r2, #72	@ 0x48
 800bb4a:	2101      	movs	r1, #1
 800bb4c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	223e      	movs	r2, #62	@ 0x3e
 800bb52:	2101      	movs	r1, #1
 800bb54:	5499      	strb	r1, [r3, r2]
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	223f      	movs	r2, #63	@ 0x3f
 800bb5a:	2101      	movs	r1, #1
 800bb5c:	5499      	strb	r1, [r3, r2]
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	2240      	movs	r2, #64	@ 0x40
 800bb62:	2101      	movs	r1, #1
 800bb64:	5499      	strb	r1, [r3, r2]
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	2241      	movs	r2, #65	@ 0x41
 800bb6a:	2101      	movs	r1, #1
 800bb6c:	5499      	strb	r1, [r3, r2]
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	2242      	movs	r2, #66	@ 0x42
 800bb72:	2101      	movs	r1, #1
 800bb74:	5499      	strb	r1, [r3, r2]
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	2243      	movs	r2, #67	@ 0x43
 800bb7a:	2101      	movs	r1, #1
 800bb7c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	2244      	movs	r2, #68	@ 0x44
 800bb82:	2101      	movs	r1, #1
 800bb84:	5499      	strb	r1, [r3, r2]
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	2245      	movs	r2, #69	@ 0x45
 800bb8a:	2101      	movs	r1, #1
 800bb8c:	5499      	strb	r1, [r3, r2]
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	2246      	movs	r2, #70	@ 0x46
 800bb92:	2101      	movs	r1, #1
 800bb94:	5499      	strb	r1, [r3, r2]
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	2247      	movs	r2, #71	@ 0x47
 800bb9a:	2101      	movs	r1, #1
 800bb9c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	223d      	movs	r2, #61	@ 0x3d
 800bba2:	2101      	movs	r1, #1
 800bba4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800bba6:	2300      	movs	r3, #0
}
 800bba8:	0018      	movs	r0, r3
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	b002      	add	sp, #8
 800bbae:	bd80      	pop	{r7, pc}

0800bbb0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b082      	sub	sp, #8
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d101      	bne.n	800bbc2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800bbbe:	2301      	movs	r3, #1
 800bbc0:	e04a      	b.n	800bc58 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	223d      	movs	r2, #61	@ 0x3d
 800bbc6:	5c9b      	ldrb	r3, [r3, r2]
 800bbc8:	b2db      	uxtb	r3, r3
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d107      	bne.n	800bbde <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	223c      	movs	r2, #60	@ 0x3c
 800bbd2:	2100      	movs	r1, #0
 800bbd4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	0018      	movs	r0, r3
 800bbda:	f000 f841 	bl	800bc60 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	223d      	movs	r2, #61	@ 0x3d
 800bbe2:	2102      	movs	r1, #2
 800bbe4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681a      	ldr	r2, [r3, #0]
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	3304      	adds	r3, #4
 800bbee:	0019      	movs	r1, r3
 800bbf0:	0010      	movs	r0, r2
 800bbf2:	f000 fab9 	bl	800c168 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	2248      	movs	r2, #72	@ 0x48
 800bbfa:	2101      	movs	r1, #1
 800bbfc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	223e      	movs	r2, #62	@ 0x3e
 800bc02:	2101      	movs	r1, #1
 800bc04:	5499      	strb	r1, [r3, r2]
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	223f      	movs	r2, #63	@ 0x3f
 800bc0a:	2101      	movs	r1, #1
 800bc0c:	5499      	strb	r1, [r3, r2]
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	2240      	movs	r2, #64	@ 0x40
 800bc12:	2101      	movs	r1, #1
 800bc14:	5499      	strb	r1, [r3, r2]
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	2241      	movs	r2, #65	@ 0x41
 800bc1a:	2101      	movs	r1, #1
 800bc1c:	5499      	strb	r1, [r3, r2]
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	2242      	movs	r2, #66	@ 0x42
 800bc22:	2101      	movs	r1, #1
 800bc24:	5499      	strb	r1, [r3, r2]
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	2243      	movs	r2, #67	@ 0x43
 800bc2a:	2101      	movs	r1, #1
 800bc2c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	2244      	movs	r2, #68	@ 0x44
 800bc32:	2101      	movs	r1, #1
 800bc34:	5499      	strb	r1, [r3, r2]
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	2245      	movs	r2, #69	@ 0x45
 800bc3a:	2101      	movs	r1, #1
 800bc3c:	5499      	strb	r1, [r3, r2]
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	2246      	movs	r2, #70	@ 0x46
 800bc42:	2101      	movs	r1, #1
 800bc44:	5499      	strb	r1, [r3, r2]
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	2247      	movs	r2, #71	@ 0x47
 800bc4a:	2101      	movs	r1, #1
 800bc4c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	223d      	movs	r2, #61	@ 0x3d
 800bc52:	2101      	movs	r1, #1
 800bc54:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800bc56:	2300      	movs	r3, #0
}
 800bc58:	0018      	movs	r0, r3
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	b002      	add	sp, #8
 800bc5e:	bd80      	pop	{r7, pc}

0800bc60 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b082      	sub	sp, #8
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800bc68:	46c0      	nop			@ (mov r8, r8)
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	b002      	add	sp, #8
 800bc6e:	bd80      	pop	{r7, pc}

0800bc70 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bc70:	b580      	push	{r7, lr}
 800bc72:	b084      	sub	sp, #16
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6078      	str	r0, [r7, #4]
 800bc78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800bc7a:	683b      	ldr	r3, [r7, #0]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d108      	bne.n	800bc92 <HAL_TIM_PWM_Start+0x22>
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	223e      	movs	r2, #62	@ 0x3e
 800bc84:	5c9b      	ldrb	r3, [r3, r2]
 800bc86:	b2db      	uxtb	r3, r3
 800bc88:	3b01      	subs	r3, #1
 800bc8a:	1e5a      	subs	r2, r3, #1
 800bc8c:	4193      	sbcs	r3, r2
 800bc8e:	b2db      	uxtb	r3, r3
 800bc90:	e037      	b.n	800bd02 <HAL_TIM_PWM_Start+0x92>
 800bc92:	683b      	ldr	r3, [r7, #0]
 800bc94:	2b04      	cmp	r3, #4
 800bc96:	d108      	bne.n	800bcaa <HAL_TIM_PWM_Start+0x3a>
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	223f      	movs	r2, #63	@ 0x3f
 800bc9c:	5c9b      	ldrb	r3, [r3, r2]
 800bc9e:	b2db      	uxtb	r3, r3
 800bca0:	3b01      	subs	r3, #1
 800bca2:	1e5a      	subs	r2, r3, #1
 800bca4:	4193      	sbcs	r3, r2
 800bca6:	b2db      	uxtb	r3, r3
 800bca8:	e02b      	b.n	800bd02 <HAL_TIM_PWM_Start+0x92>
 800bcaa:	683b      	ldr	r3, [r7, #0]
 800bcac:	2b08      	cmp	r3, #8
 800bcae:	d108      	bne.n	800bcc2 <HAL_TIM_PWM_Start+0x52>
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	2240      	movs	r2, #64	@ 0x40
 800bcb4:	5c9b      	ldrb	r3, [r3, r2]
 800bcb6:	b2db      	uxtb	r3, r3
 800bcb8:	3b01      	subs	r3, #1
 800bcba:	1e5a      	subs	r2, r3, #1
 800bcbc:	4193      	sbcs	r3, r2
 800bcbe:	b2db      	uxtb	r3, r3
 800bcc0:	e01f      	b.n	800bd02 <HAL_TIM_PWM_Start+0x92>
 800bcc2:	683b      	ldr	r3, [r7, #0]
 800bcc4:	2b0c      	cmp	r3, #12
 800bcc6:	d108      	bne.n	800bcda <HAL_TIM_PWM_Start+0x6a>
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	2241      	movs	r2, #65	@ 0x41
 800bccc:	5c9b      	ldrb	r3, [r3, r2]
 800bcce:	b2db      	uxtb	r3, r3
 800bcd0:	3b01      	subs	r3, #1
 800bcd2:	1e5a      	subs	r2, r3, #1
 800bcd4:	4193      	sbcs	r3, r2
 800bcd6:	b2db      	uxtb	r3, r3
 800bcd8:	e013      	b.n	800bd02 <HAL_TIM_PWM_Start+0x92>
 800bcda:	683b      	ldr	r3, [r7, #0]
 800bcdc:	2b10      	cmp	r3, #16
 800bcde:	d108      	bne.n	800bcf2 <HAL_TIM_PWM_Start+0x82>
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	2242      	movs	r2, #66	@ 0x42
 800bce4:	5c9b      	ldrb	r3, [r3, r2]
 800bce6:	b2db      	uxtb	r3, r3
 800bce8:	3b01      	subs	r3, #1
 800bcea:	1e5a      	subs	r2, r3, #1
 800bcec:	4193      	sbcs	r3, r2
 800bcee:	b2db      	uxtb	r3, r3
 800bcf0:	e007      	b.n	800bd02 <HAL_TIM_PWM_Start+0x92>
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	2243      	movs	r2, #67	@ 0x43
 800bcf6:	5c9b      	ldrb	r3, [r3, r2]
 800bcf8:	b2db      	uxtb	r3, r3
 800bcfa:	3b01      	subs	r3, #1
 800bcfc:	1e5a      	subs	r2, r3, #1
 800bcfe:	4193      	sbcs	r3, r2
 800bd00:	b2db      	uxtb	r3, r3
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d001      	beq.n	800bd0a <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800bd06:	2301      	movs	r3, #1
 800bd08:	e090      	b.n	800be2c <HAL_TIM_PWM_Start+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800bd0a:	683b      	ldr	r3, [r7, #0]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d104      	bne.n	800bd1a <HAL_TIM_PWM_Start+0xaa>
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	223e      	movs	r2, #62	@ 0x3e
 800bd14:	2102      	movs	r1, #2
 800bd16:	5499      	strb	r1, [r3, r2]
 800bd18:	e023      	b.n	800bd62 <HAL_TIM_PWM_Start+0xf2>
 800bd1a:	683b      	ldr	r3, [r7, #0]
 800bd1c:	2b04      	cmp	r3, #4
 800bd1e:	d104      	bne.n	800bd2a <HAL_TIM_PWM_Start+0xba>
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	223f      	movs	r2, #63	@ 0x3f
 800bd24:	2102      	movs	r1, #2
 800bd26:	5499      	strb	r1, [r3, r2]
 800bd28:	e01b      	b.n	800bd62 <HAL_TIM_PWM_Start+0xf2>
 800bd2a:	683b      	ldr	r3, [r7, #0]
 800bd2c:	2b08      	cmp	r3, #8
 800bd2e:	d104      	bne.n	800bd3a <HAL_TIM_PWM_Start+0xca>
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	2240      	movs	r2, #64	@ 0x40
 800bd34:	2102      	movs	r1, #2
 800bd36:	5499      	strb	r1, [r3, r2]
 800bd38:	e013      	b.n	800bd62 <HAL_TIM_PWM_Start+0xf2>
 800bd3a:	683b      	ldr	r3, [r7, #0]
 800bd3c:	2b0c      	cmp	r3, #12
 800bd3e:	d104      	bne.n	800bd4a <HAL_TIM_PWM_Start+0xda>
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	2241      	movs	r2, #65	@ 0x41
 800bd44:	2102      	movs	r1, #2
 800bd46:	5499      	strb	r1, [r3, r2]
 800bd48:	e00b      	b.n	800bd62 <HAL_TIM_PWM_Start+0xf2>
 800bd4a:	683b      	ldr	r3, [r7, #0]
 800bd4c:	2b10      	cmp	r3, #16
 800bd4e:	d104      	bne.n	800bd5a <HAL_TIM_PWM_Start+0xea>
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	2242      	movs	r2, #66	@ 0x42
 800bd54:	2102      	movs	r1, #2
 800bd56:	5499      	strb	r1, [r3, r2]
 800bd58:	e003      	b.n	800bd62 <HAL_TIM_PWM_Start+0xf2>
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	2243      	movs	r2, #67	@ 0x43
 800bd5e:	2102      	movs	r1, #2
 800bd60:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	6839      	ldr	r1, [r7, #0]
 800bd68:	2201      	movs	r2, #1
 800bd6a:	0018      	movs	r0, r3
 800bd6c:	f000 fd58 	bl	800c820 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	4a2f      	ldr	r2, [pc, #188]	@ (800be34 <HAL_TIM_PWM_Start+0x1c4>)
 800bd76:	4293      	cmp	r3, r2
 800bd78:	d00e      	beq.n	800bd98 <HAL_TIM_PWM_Start+0x128>
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	4a2e      	ldr	r2, [pc, #184]	@ (800be38 <HAL_TIM_PWM_Start+0x1c8>)
 800bd80:	4293      	cmp	r3, r2
 800bd82:	d009      	beq.n	800bd98 <HAL_TIM_PWM_Start+0x128>
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	4a2c      	ldr	r2, [pc, #176]	@ (800be3c <HAL_TIM_PWM_Start+0x1cc>)
 800bd8a:	4293      	cmp	r3, r2
 800bd8c:	d004      	beq.n	800bd98 <HAL_TIM_PWM_Start+0x128>
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	4a2b      	ldr	r2, [pc, #172]	@ (800be40 <HAL_TIM_PWM_Start+0x1d0>)
 800bd94:	4293      	cmp	r3, r2
 800bd96:	d101      	bne.n	800bd9c <HAL_TIM_PWM_Start+0x12c>
 800bd98:	2301      	movs	r3, #1
 800bd9a:	e000      	b.n	800bd9e <HAL_TIM_PWM_Start+0x12e>
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d008      	beq.n	800bdb4 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	2180      	movs	r1, #128	@ 0x80
 800bdae:	0209      	lsls	r1, r1, #8
 800bdb0:	430a      	orrs	r2, r1
 800bdb2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	4a1e      	ldr	r2, [pc, #120]	@ (800be34 <HAL_TIM_PWM_Start+0x1c4>)
 800bdba:	4293      	cmp	r3, r2
 800bdbc:	d014      	beq.n	800bde8 <HAL_TIM_PWM_Start+0x178>
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	681a      	ldr	r2, [r3, #0]
 800bdc2:	2380      	movs	r3, #128	@ 0x80
 800bdc4:	05db      	lsls	r3, r3, #23
 800bdc6:	429a      	cmp	r2, r3
 800bdc8:	d00e      	beq.n	800bde8 <HAL_TIM_PWM_Start+0x178>
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	4a1d      	ldr	r2, [pc, #116]	@ (800be44 <HAL_TIM_PWM_Start+0x1d4>)
 800bdd0:	4293      	cmp	r3, r2
 800bdd2:	d009      	beq.n	800bde8 <HAL_TIM_PWM_Start+0x178>
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	4a1b      	ldr	r2, [pc, #108]	@ (800be48 <HAL_TIM_PWM_Start+0x1d8>)
 800bdda:	4293      	cmp	r3, r2
 800bddc:	d004      	beq.n	800bde8 <HAL_TIM_PWM_Start+0x178>
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	4a15      	ldr	r2, [pc, #84]	@ (800be38 <HAL_TIM_PWM_Start+0x1c8>)
 800bde4:	4293      	cmp	r3, r2
 800bde6:	d116      	bne.n	800be16 <HAL_TIM_PWM_Start+0x1a6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	689b      	ldr	r3, [r3, #8]
 800bdee:	4a17      	ldr	r2, [pc, #92]	@ (800be4c <HAL_TIM_PWM_Start+0x1dc>)
 800bdf0:	4013      	ands	r3, r2
 800bdf2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	2b06      	cmp	r3, #6
 800bdf8:	d016      	beq.n	800be28 <HAL_TIM_PWM_Start+0x1b8>
 800bdfa:	68fa      	ldr	r2, [r7, #12]
 800bdfc:	2380      	movs	r3, #128	@ 0x80
 800bdfe:	025b      	lsls	r3, r3, #9
 800be00:	429a      	cmp	r2, r3
 800be02:	d011      	beq.n	800be28 <HAL_TIM_PWM_Start+0x1b8>
    {
      __HAL_TIM_ENABLE(htim);
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	681a      	ldr	r2, [r3, #0]
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	2101      	movs	r1, #1
 800be10:	430a      	orrs	r2, r1
 800be12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800be14:	e008      	b.n	800be28 <HAL_TIM_PWM_Start+0x1b8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	681a      	ldr	r2, [r3, #0]
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	2101      	movs	r1, #1
 800be22:	430a      	orrs	r2, r1
 800be24:	601a      	str	r2, [r3, #0]
 800be26:	e000      	b.n	800be2a <HAL_TIM_PWM_Start+0x1ba>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800be28:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800be2a:	2300      	movs	r3, #0
}
 800be2c:	0018      	movs	r0, r3
 800be2e:	46bd      	mov	sp, r7
 800be30:	b004      	add	sp, #16
 800be32:	bd80      	pop	{r7, pc}
 800be34:	40012c00 	.word	0x40012c00
 800be38:	40014000 	.word	0x40014000
 800be3c:	40014400 	.word	0x40014400
 800be40:	40014800 	.word	0x40014800
 800be44:	40000400 	.word	0x40000400
 800be48:	40000800 	.word	0x40000800
 800be4c:	00010007 	.word	0x00010007

0800be50 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800be50:	b580      	push	{r7, lr}
 800be52:	b082      	sub	sp, #8
 800be54:	af00      	add	r7, sp, #0
 800be56:	6078      	str	r0, [r7, #4]
 800be58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	6839      	ldr	r1, [r7, #0]
 800be60:	2200      	movs	r2, #0
 800be62:	0018      	movs	r0, r3
 800be64:	f000 fcdc 	bl	800c820 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	4a37      	ldr	r2, [pc, #220]	@ (800bf4c <HAL_TIM_PWM_Stop+0xfc>)
 800be6e:	4293      	cmp	r3, r2
 800be70:	d00e      	beq.n	800be90 <HAL_TIM_PWM_Stop+0x40>
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	4a36      	ldr	r2, [pc, #216]	@ (800bf50 <HAL_TIM_PWM_Stop+0x100>)
 800be78:	4293      	cmp	r3, r2
 800be7a:	d009      	beq.n	800be90 <HAL_TIM_PWM_Stop+0x40>
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	4a34      	ldr	r2, [pc, #208]	@ (800bf54 <HAL_TIM_PWM_Stop+0x104>)
 800be82:	4293      	cmp	r3, r2
 800be84:	d004      	beq.n	800be90 <HAL_TIM_PWM_Stop+0x40>
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	4a33      	ldr	r2, [pc, #204]	@ (800bf58 <HAL_TIM_PWM_Stop+0x108>)
 800be8c:	4293      	cmp	r3, r2
 800be8e:	d101      	bne.n	800be94 <HAL_TIM_PWM_Stop+0x44>
 800be90:	2301      	movs	r3, #1
 800be92:	e000      	b.n	800be96 <HAL_TIM_PWM_Stop+0x46>
 800be94:	2300      	movs	r3, #0
 800be96:	2b00      	cmp	r3, #0
 800be98:	d013      	beq.n	800bec2 <HAL_TIM_PWM_Stop+0x72>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	6a1b      	ldr	r3, [r3, #32]
 800bea0:	4a2e      	ldr	r2, [pc, #184]	@ (800bf5c <HAL_TIM_PWM_Stop+0x10c>)
 800bea2:	4013      	ands	r3, r2
 800bea4:	d10d      	bne.n	800bec2 <HAL_TIM_PWM_Stop+0x72>
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	6a1b      	ldr	r3, [r3, #32]
 800beac:	4a2c      	ldr	r2, [pc, #176]	@ (800bf60 <HAL_TIM_PWM_Stop+0x110>)
 800beae:	4013      	ands	r3, r2
 800beb0:	d107      	bne.n	800bec2 <HAL_TIM_PWM_Stop+0x72>
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	4929      	ldr	r1, [pc, #164]	@ (800bf64 <HAL_TIM_PWM_Stop+0x114>)
 800bebe:	400a      	ands	r2, r1
 800bec0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	6a1b      	ldr	r3, [r3, #32]
 800bec8:	4a24      	ldr	r2, [pc, #144]	@ (800bf5c <HAL_TIM_PWM_Stop+0x10c>)
 800beca:	4013      	ands	r3, r2
 800becc:	d10d      	bne.n	800beea <HAL_TIM_PWM_Stop+0x9a>
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	6a1b      	ldr	r3, [r3, #32]
 800bed4:	4a22      	ldr	r2, [pc, #136]	@ (800bf60 <HAL_TIM_PWM_Stop+0x110>)
 800bed6:	4013      	ands	r3, r2
 800bed8:	d107      	bne.n	800beea <HAL_TIM_PWM_Stop+0x9a>
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	681a      	ldr	r2, [r3, #0]
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	2101      	movs	r1, #1
 800bee6:	438a      	bics	r2, r1
 800bee8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800beea:	683b      	ldr	r3, [r7, #0]
 800beec:	2b00      	cmp	r3, #0
 800beee:	d104      	bne.n	800befa <HAL_TIM_PWM_Stop+0xaa>
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	223e      	movs	r2, #62	@ 0x3e
 800bef4:	2101      	movs	r1, #1
 800bef6:	5499      	strb	r1, [r3, r2]
 800bef8:	e023      	b.n	800bf42 <HAL_TIM_PWM_Stop+0xf2>
 800befa:	683b      	ldr	r3, [r7, #0]
 800befc:	2b04      	cmp	r3, #4
 800befe:	d104      	bne.n	800bf0a <HAL_TIM_PWM_Stop+0xba>
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	223f      	movs	r2, #63	@ 0x3f
 800bf04:	2101      	movs	r1, #1
 800bf06:	5499      	strb	r1, [r3, r2]
 800bf08:	e01b      	b.n	800bf42 <HAL_TIM_PWM_Stop+0xf2>
 800bf0a:	683b      	ldr	r3, [r7, #0]
 800bf0c:	2b08      	cmp	r3, #8
 800bf0e:	d104      	bne.n	800bf1a <HAL_TIM_PWM_Stop+0xca>
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	2240      	movs	r2, #64	@ 0x40
 800bf14:	2101      	movs	r1, #1
 800bf16:	5499      	strb	r1, [r3, r2]
 800bf18:	e013      	b.n	800bf42 <HAL_TIM_PWM_Stop+0xf2>
 800bf1a:	683b      	ldr	r3, [r7, #0]
 800bf1c:	2b0c      	cmp	r3, #12
 800bf1e:	d104      	bne.n	800bf2a <HAL_TIM_PWM_Stop+0xda>
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	2241      	movs	r2, #65	@ 0x41
 800bf24:	2101      	movs	r1, #1
 800bf26:	5499      	strb	r1, [r3, r2]
 800bf28:	e00b      	b.n	800bf42 <HAL_TIM_PWM_Stop+0xf2>
 800bf2a:	683b      	ldr	r3, [r7, #0]
 800bf2c:	2b10      	cmp	r3, #16
 800bf2e:	d104      	bne.n	800bf3a <HAL_TIM_PWM_Stop+0xea>
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	2242      	movs	r2, #66	@ 0x42
 800bf34:	2101      	movs	r1, #1
 800bf36:	5499      	strb	r1, [r3, r2]
 800bf38:	e003      	b.n	800bf42 <HAL_TIM_PWM_Stop+0xf2>
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	2243      	movs	r2, #67	@ 0x43
 800bf3e:	2101      	movs	r1, #1
 800bf40:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800bf42:	2300      	movs	r3, #0
}
 800bf44:	0018      	movs	r0, r3
 800bf46:	46bd      	mov	sp, r7
 800bf48:	b002      	add	sp, #8
 800bf4a:	bd80      	pop	{r7, pc}
 800bf4c:	40012c00 	.word	0x40012c00
 800bf50:	40014000 	.word	0x40014000
 800bf54:	40014400 	.word	0x40014400
 800bf58:	40014800 	.word	0x40014800
 800bf5c:	00001111 	.word	0x00001111
 800bf60:	00000444 	.word	0x00000444
 800bf64:	ffff7fff 	.word	0xffff7fff

0800bf68 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	b086      	sub	sp, #24
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	60f8      	str	r0, [r7, #12]
 800bf70:	60b9      	str	r1, [r7, #8]
 800bf72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bf74:	2317      	movs	r3, #23
 800bf76:	18fb      	adds	r3, r7, r3
 800bf78:	2200      	movs	r2, #0
 800bf7a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	223c      	movs	r2, #60	@ 0x3c
 800bf80:	5c9b      	ldrb	r3, [r3, r2]
 800bf82:	2b01      	cmp	r3, #1
 800bf84:	d101      	bne.n	800bf8a <HAL_TIM_PWM_ConfigChannel+0x22>
 800bf86:	2302      	movs	r3, #2
 800bf88:	e0e5      	b.n	800c156 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	223c      	movs	r2, #60	@ 0x3c
 800bf8e:	2101      	movs	r1, #1
 800bf90:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	2b14      	cmp	r3, #20
 800bf96:	d900      	bls.n	800bf9a <HAL_TIM_PWM_ConfigChannel+0x32>
 800bf98:	e0d1      	b.n	800c13e <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	009a      	lsls	r2, r3, #2
 800bf9e:	4b70      	ldr	r3, [pc, #448]	@ (800c160 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800bfa0:	18d3      	adds	r3, r2, r3
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	68ba      	ldr	r2, [r7, #8]
 800bfac:	0011      	movs	r1, r2
 800bfae:	0018      	movs	r0, r3
 800bfb0:	f000 f972 	bl	800c298 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	699a      	ldr	r2, [r3, #24]
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	2108      	movs	r1, #8
 800bfc0:	430a      	orrs	r2, r1
 800bfc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	699a      	ldr	r2, [r3, #24]
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	2104      	movs	r1, #4
 800bfd0:	438a      	bics	r2, r1
 800bfd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	6999      	ldr	r1, [r3, #24]
 800bfda:	68bb      	ldr	r3, [r7, #8]
 800bfdc:	691a      	ldr	r2, [r3, #16]
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	430a      	orrs	r2, r1
 800bfe4:	619a      	str	r2, [r3, #24]
      break;
 800bfe6:	e0af      	b.n	800c148 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	68ba      	ldr	r2, [r7, #8]
 800bfee:	0011      	movs	r1, r2
 800bff0:	0018      	movs	r0, r3
 800bff2:	f000 f9db 	bl	800c3ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	699a      	ldr	r2, [r3, #24]
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	2180      	movs	r1, #128	@ 0x80
 800c002:	0109      	lsls	r1, r1, #4
 800c004:	430a      	orrs	r2, r1
 800c006:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	699a      	ldr	r2, [r3, #24]
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	4954      	ldr	r1, [pc, #336]	@ (800c164 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800c014:	400a      	ands	r2, r1
 800c016:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	6999      	ldr	r1, [r3, #24]
 800c01e:	68bb      	ldr	r3, [r7, #8]
 800c020:	691b      	ldr	r3, [r3, #16]
 800c022:	021a      	lsls	r2, r3, #8
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	430a      	orrs	r2, r1
 800c02a:	619a      	str	r2, [r3, #24]
      break;
 800c02c:	e08c      	b.n	800c148 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	68ba      	ldr	r2, [r7, #8]
 800c034:	0011      	movs	r1, r2
 800c036:	0018      	movs	r0, r3
 800c038:	f000 fa3c 	bl	800c4b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	69da      	ldr	r2, [r3, #28]
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	2108      	movs	r1, #8
 800c048:	430a      	orrs	r2, r1
 800c04a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	69da      	ldr	r2, [r3, #28]
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	2104      	movs	r1, #4
 800c058:	438a      	bics	r2, r1
 800c05a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	69d9      	ldr	r1, [r3, #28]
 800c062:	68bb      	ldr	r3, [r7, #8]
 800c064:	691a      	ldr	r2, [r3, #16]
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	430a      	orrs	r2, r1
 800c06c:	61da      	str	r2, [r3, #28]
      break;
 800c06e:	e06b      	b.n	800c148 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	68ba      	ldr	r2, [r7, #8]
 800c076:	0011      	movs	r1, r2
 800c078:	0018      	movs	r0, r3
 800c07a:	f000 faa3 	bl	800c5c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	69da      	ldr	r2, [r3, #28]
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	2180      	movs	r1, #128	@ 0x80
 800c08a:	0109      	lsls	r1, r1, #4
 800c08c:	430a      	orrs	r2, r1
 800c08e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	69da      	ldr	r2, [r3, #28]
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	4932      	ldr	r1, [pc, #200]	@ (800c164 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800c09c:	400a      	ands	r2, r1
 800c09e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	69d9      	ldr	r1, [r3, #28]
 800c0a6:	68bb      	ldr	r3, [r7, #8]
 800c0a8:	691b      	ldr	r3, [r3, #16]
 800c0aa:	021a      	lsls	r2, r3, #8
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	430a      	orrs	r2, r1
 800c0b2:	61da      	str	r2, [r3, #28]
      break;
 800c0b4:	e048      	b.n	800c148 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	68ba      	ldr	r2, [r7, #8]
 800c0bc:	0011      	movs	r1, r2
 800c0be:	0018      	movs	r0, r3
 800c0c0:	f000 faea 	bl	800c698 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	2108      	movs	r1, #8
 800c0d0:	430a      	orrs	r2, r1
 800c0d2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	2104      	movs	r1, #4
 800c0e0:	438a      	bics	r2, r1
 800c0e2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800c0ea:	68bb      	ldr	r3, [r7, #8]
 800c0ec:	691a      	ldr	r2, [r3, #16]
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	430a      	orrs	r2, r1
 800c0f4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800c0f6:	e027      	b.n	800c148 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	68ba      	ldr	r2, [r7, #8]
 800c0fe:	0011      	movs	r1, r2
 800c100:	0018      	movs	r0, r3
 800c102:	f000 fb29 	bl	800c758 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	2180      	movs	r1, #128	@ 0x80
 800c112:	0109      	lsls	r1, r1, #4
 800c114:	430a      	orrs	r2, r1
 800c116:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	4910      	ldr	r1, [pc, #64]	@ (800c164 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800c124:	400a      	ands	r2, r1
 800c126:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800c12e:	68bb      	ldr	r3, [r7, #8]
 800c130:	691b      	ldr	r3, [r3, #16]
 800c132:	021a      	lsls	r2, r3, #8
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	430a      	orrs	r2, r1
 800c13a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800c13c:	e004      	b.n	800c148 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800c13e:	2317      	movs	r3, #23
 800c140:	18fb      	adds	r3, r7, r3
 800c142:	2201      	movs	r2, #1
 800c144:	701a      	strb	r2, [r3, #0]
      break;
 800c146:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	223c      	movs	r2, #60	@ 0x3c
 800c14c:	2100      	movs	r1, #0
 800c14e:	5499      	strb	r1, [r3, r2]

  return status;
 800c150:	2317      	movs	r3, #23
 800c152:	18fb      	adds	r3, r7, r3
 800c154:	781b      	ldrb	r3, [r3, #0]
}
 800c156:	0018      	movs	r0, r3
 800c158:	46bd      	mov	sp, r7
 800c15a:	b006      	add	sp, #24
 800c15c:	bd80      	pop	{r7, pc}
 800c15e:	46c0      	nop			@ (mov r8, r8)
 800c160:	0801be78 	.word	0x0801be78
 800c164:	fffffbff 	.word	0xfffffbff

0800c168 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b084      	sub	sp, #16
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	6078      	str	r0, [r7, #4]
 800c170:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	4a3f      	ldr	r2, [pc, #252]	@ (800c278 <TIM_Base_SetConfig+0x110>)
 800c17c:	4293      	cmp	r3, r2
 800c17e:	d00c      	beq.n	800c19a <TIM_Base_SetConfig+0x32>
 800c180:	687a      	ldr	r2, [r7, #4]
 800c182:	2380      	movs	r3, #128	@ 0x80
 800c184:	05db      	lsls	r3, r3, #23
 800c186:	429a      	cmp	r2, r3
 800c188:	d007      	beq.n	800c19a <TIM_Base_SetConfig+0x32>
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	4a3b      	ldr	r2, [pc, #236]	@ (800c27c <TIM_Base_SetConfig+0x114>)
 800c18e:	4293      	cmp	r3, r2
 800c190:	d003      	beq.n	800c19a <TIM_Base_SetConfig+0x32>
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	4a3a      	ldr	r2, [pc, #232]	@ (800c280 <TIM_Base_SetConfig+0x118>)
 800c196:	4293      	cmp	r3, r2
 800c198:	d108      	bne.n	800c1ac <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	2270      	movs	r2, #112	@ 0x70
 800c19e:	4393      	bics	r3, r2
 800c1a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c1a2:	683b      	ldr	r3, [r7, #0]
 800c1a4:	685b      	ldr	r3, [r3, #4]
 800c1a6:	68fa      	ldr	r2, [r7, #12]
 800c1a8:	4313      	orrs	r3, r2
 800c1aa:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	4a32      	ldr	r2, [pc, #200]	@ (800c278 <TIM_Base_SetConfig+0x110>)
 800c1b0:	4293      	cmp	r3, r2
 800c1b2:	d01c      	beq.n	800c1ee <TIM_Base_SetConfig+0x86>
 800c1b4:	687a      	ldr	r2, [r7, #4]
 800c1b6:	2380      	movs	r3, #128	@ 0x80
 800c1b8:	05db      	lsls	r3, r3, #23
 800c1ba:	429a      	cmp	r2, r3
 800c1bc:	d017      	beq.n	800c1ee <TIM_Base_SetConfig+0x86>
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	4a2e      	ldr	r2, [pc, #184]	@ (800c27c <TIM_Base_SetConfig+0x114>)
 800c1c2:	4293      	cmp	r3, r2
 800c1c4:	d013      	beq.n	800c1ee <TIM_Base_SetConfig+0x86>
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	4a2d      	ldr	r2, [pc, #180]	@ (800c280 <TIM_Base_SetConfig+0x118>)
 800c1ca:	4293      	cmp	r3, r2
 800c1cc:	d00f      	beq.n	800c1ee <TIM_Base_SetConfig+0x86>
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	4a2c      	ldr	r2, [pc, #176]	@ (800c284 <TIM_Base_SetConfig+0x11c>)
 800c1d2:	4293      	cmp	r3, r2
 800c1d4:	d00b      	beq.n	800c1ee <TIM_Base_SetConfig+0x86>
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	4a2b      	ldr	r2, [pc, #172]	@ (800c288 <TIM_Base_SetConfig+0x120>)
 800c1da:	4293      	cmp	r3, r2
 800c1dc:	d007      	beq.n	800c1ee <TIM_Base_SetConfig+0x86>
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	4a2a      	ldr	r2, [pc, #168]	@ (800c28c <TIM_Base_SetConfig+0x124>)
 800c1e2:	4293      	cmp	r3, r2
 800c1e4:	d003      	beq.n	800c1ee <TIM_Base_SetConfig+0x86>
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	4a29      	ldr	r2, [pc, #164]	@ (800c290 <TIM_Base_SetConfig+0x128>)
 800c1ea:	4293      	cmp	r3, r2
 800c1ec:	d108      	bne.n	800c200 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	4a28      	ldr	r2, [pc, #160]	@ (800c294 <TIM_Base_SetConfig+0x12c>)
 800c1f2:	4013      	ands	r3, r2
 800c1f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c1f6:	683b      	ldr	r3, [r7, #0]
 800c1f8:	68db      	ldr	r3, [r3, #12]
 800c1fa:	68fa      	ldr	r2, [r7, #12]
 800c1fc:	4313      	orrs	r3, r2
 800c1fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	2280      	movs	r2, #128	@ 0x80
 800c204:	4393      	bics	r3, r2
 800c206:	001a      	movs	r2, r3
 800c208:	683b      	ldr	r3, [r7, #0]
 800c20a:	695b      	ldr	r3, [r3, #20]
 800c20c:	4313      	orrs	r3, r2
 800c20e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	68fa      	ldr	r2, [r7, #12]
 800c214:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c216:	683b      	ldr	r3, [r7, #0]
 800c218:	689a      	ldr	r2, [r3, #8]
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c21e:	683b      	ldr	r3, [r7, #0]
 800c220:	681a      	ldr	r2, [r3, #0]
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	4a13      	ldr	r2, [pc, #76]	@ (800c278 <TIM_Base_SetConfig+0x110>)
 800c22a:	4293      	cmp	r3, r2
 800c22c:	d00b      	beq.n	800c246 <TIM_Base_SetConfig+0xde>
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	4a15      	ldr	r2, [pc, #84]	@ (800c288 <TIM_Base_SetConfig+0x120>)
 800c232:	4293      	cmp	r3, r2
 800c234:	d007      	beq.n	800c246 <TIM_Base_SetConfig+0xde>
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	4a14      	ldr	r2, [pc, #80]	@ (800c28c <TIM_Base_SetConfig+0x124>)
 800c23a:	4293      	cmp	r3, r2
 800c23c:	d003      	beq.n	800c246 <TIM_Base_SetConfig+0xde>
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	4a13      	ldr	r2, [pc, #76]	@ (800c290 <TIM_Base_SetConfig+0x128>)
 800c242:	4293      	cmp	r3, r2
 800c244:	d103      	bne.n	800c24e <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c246:	683b      	ldr	r3, [r7, #0]
 800c248:	691a      	ldr	r2, [r3, #16]
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	2201      	movs	r2, #1
 800c252:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	691b      	ldr	r3, [r3, #16]
 800c258:	2201      	movs	r2, #1
 800c25a:	4013      	ands	r3, r2
 800c25c:	2b01      	cmp	r3, #1
 800c25e:	d106      	bne.n	800c26e <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	691b      	ldr	r3, [r3, #16]
 800c264:	2201      	movs	r2, #1
 800c266:	4393      	bics	r3, r2
 800c268:	001a      	movs	r2, r3
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	611a      	str	r2, [r3, #16]
  }
}
 800c26e:	46c0      	nop			@ (mov r8, r8)
 800c270:	46bd      	mov	sp, r7
 800c272:	b004      	add	sp, #16
 800c274:	bd80      	pop	{r7, pc}
 800c276:	46c0      	nop			@ (mov r8, r8)
 800c278:	40012c00 	.word	0x40012c00
 800c27c:	40000400 	.word	0x40000400
 800c280:	40000800 	.word	0x40000800
 800c284:	40002000 	.word	0x40002000
 800c288:	40014000 	.word	0x40014000
 800c28c:	40014400 	.word	0x40014400
 800c290:	40014800 	.word	0x40014800
 800c294:	fffffcff 	.word	0xfffffcff

0800c298 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b086      	sub	sp, #24
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	6078      	str	r0, [r7, #4]
 800c2a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	6a1b      	ldr	r3, [r3, #32]
 800c2a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	6a1b      	ldr	r3, [r3, #32]
 800c2ac:	2201      	movs	r2, #1
 800c2ae:	4393      	bics	r3, r2
 800c2b0:	001a      	movs	r2, r3
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	685b      	ldr	r3, [r3, #4]
 800c2ba:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	699b      	ldr	r3, [r3, #24]
 800c2c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	4a32      	ldr	r2, [pc, #200]	@ (800c390 <TIM_OC1_SetConfig+0xf8>)
 800c2c6:	4013      	ands	r3, r2
 800c2c8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	2203      	movs	r2, #3
 800c2ce:	4393      	bics	r3, r2
 800c2d0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c2d2:	683b      	ldr	r3, [r7, #0]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	68fa      	ldr	r2, [r7, #12]
 800c2d8:	4313      	orrs	r3, r2
 800c2da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c2dc:	697b      	ldr	r3, [r7, #20]
 800c2de:	2202      	movs	r2, #2
 800c2e0:	4393      	bics	r3, r2
 800c2e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c2e4:	683b      	ldr	r3, [r7, #0]
 800c2e6:	689b      	ldr	r3, [r3, #8]
 800c2e8:	697a      	ldr	r2, [r7, #20]
 800c2ea:	4313      	orrs	r3, r2
 800c2ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	4a28      	ldr	r2, [pc, #160]	@ (800c394 <TIM_OC1_SetConfig+0xfc>)
 800c2f2:	4293      	cmp	r3, r2
 800c2f4:	d00b      	beq.n	800c30e <TIM_OC1_SetConfig+0x76>
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	4a27      	ldr	r2, [pc, #156]	@ (800c398 <TIM_OC1_SetConfig+0x100>)
 800c2fa:	4293      	cmp	r3, r2
 800c2fc:	d007      	beq.n	800c30e <TIM_OC1_SetConfig+0x76>
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	4a26      	ldr	r2, [pc, #152]	@ (800c39c <TIM_OC1_SetConfig+0x104>)
 800c302:	4293      	cmp	r3, r2
 800c304:	d003      	beq.n	800c30e <TIM_OC1_SetConfig+0x76>
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	4a25      	ldr	r2, [pc, #148]	@ (800c3a0 <TIM_OC1_SetConfig+0x108>)
 800c30a:	4293      	cmp	r3, r2
 800c30c:	d10c      	bne.n	800c328 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c30e:	697b      	ldr	r3, [r7, #20]
 800c310:	2208      	movs	r2, #8
 800c312:	4393      	bics	r3, r2
 800c314:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c316:	683b      	ldr	r3, [r7, #0]
 800c318:	68db      	ldr	r3, [r3, #12]
 800c31a:	697a      	ldr	r2, [r7, #20]
 800c31c:	4313      	orrs	r3, r2
 800c31e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c320:	697b      	ldr	r3, [r7, #20]
 800c322:	2204      	movs	r2, #4
 800c324:	4393      	bics	r3, r2
 800c326:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	4a1a      	ldr	r2, [pc, #104]	@ (800c394 <TIM_OC1_SetConfig+0xfc>)
 800c32c:	4293      	cmp	r3, r2
 800c32e:	d00b      	beq.n	800c348 <TIM_OC1_SetConfig+0xb0>
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	4a19      	ldr	r2, [pc, #100]	@ (800c398 <TIM_OC1_SetConfig+0x100>)
 800c334:	4293      	cmp	r3, r2
 800c336:	d007      	beq.n	800c348 <TIM_OC1_SetConfig+0xb0>
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	4a18      	ldr	r2, [pc, #96]	@ (800c39c <TIM_OC1_SetConfig+0x104>)
 800c33c:	4293      	cmp	r3, r2
 800c33e:	d003      	beq.n	800c348 <TIM_OC1_SetConfig+0xb0>
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	4a17      	ldr	r2, [pc, #92]	@ (800c3a0 <TIM_OC1_SetConfig+0x108>)
 800c344:	4293      	cmp	r3, r2
 800c346:	d111      	bne.n	800c36c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c348:	693b      	ldr	r3, [r7, #16]
 800c34a:	4a16      	ldr	r2, [pc, #88]	@ (800c3a4 <TIM_OC1_SetConfig+0x10c>)
 800c34c:	4013      	ands	r3, r2
 800c34e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c350:	693b      	ldr	r3, [r7, #16]
 800c352:	4a15      	ldr	r2, [pc, #84]	@ (800c3a8 <TIM_OC1_SetConfig+0x110>)
 800c354:	4013      	ands	r3, r2
 800c356:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c358:	683b      	ldr	r3, [r7, #0]
 800c35a:	695b      	ldr	r3, [r3, #20]
 800c35c:	693a      	ldr	r2, [r7, #16]
 800c35e:	4313      	orrs	r3, r2
 800c360:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c362:	683b      	ldr	r3, [r7, #0]
 800c364:	699b      	ldr	r3, [r3, #24]
 800c366:	693a      	ldr	r2, [r7, #16]
 800c368:	4313      	orrs	r3, r2
 800c36a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	693a      	ldr	r2, [r7, #16]
 800c370:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	68fa      	ldr	r2, [r7, #12]
 800c376:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c378:	683b      	ldr	r3, [r7, #0]
 800c37a:	685a      	ldr	r2, [r3, #4]
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	697a      	ldr	r2, [r7, #20]
 800c384:	621a      	str	r2, [r3, #32]
}
 800c386:	46c0      	nop			@ (mov r8, r8)
 800c388:	46bd      	mov	sp, r7
 800c38a:	b006      	add	sp, #24
 800c38c:	bd80      	pop	{r7, pc}
 800c38e:	46c0      	nop			@ (mov r8, r8)
 800c390:	fffeff8f 	.word	0xfffeff8f
 800c394:	40012c00 	.word	0x40012c00
 800c398:	40014000 	.word	0x40014000
 800c39c:	40014400 	.word	0x40014400
 800c3a0:	40014800 	.word	0x40014800
 800c3a4:	fffffeff 	.word	0xfffffeff
 800c3a8:	fffffdff 	.word	0xfffffdff

0800c3ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c3ac:	b580      	push	{r7, lr}
 800c3ae:	b086      	sub	sp, #24
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	6078      	str	r0, [r7, #4]
 800c3b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	6a1b      	ldr	r3, [r3, #32]
 800c3ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	6a1b      	ldr	r3, [r3, #32]
 800c3c0:	2210      	movs	r2, #16
 800c3c2:	4393      	bics	r3, r2
 800c3c4:	001a      	movs	r2, r3
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	685b      	ldr	r3, [r3, #4]
 800c3ce:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	699b      	ldr	r3, [r3, #24]
 800c3d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	4a2e      	ldr	r2, [pc, #184]	@ (800c494 <TIM_OC2_SetConfig+0xe8>)
 800c3da:	4013      	ands	r3, r2
 800c3dc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	4a2d      	ldr	r2, [pc, #180]	@ (800c498 <TIM_OC2_SetConfig+0xec>)
 800c3e2:	4013      	ands	r3, r2
 800c3e4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c3e6:	683b      	ldr	r3, [r7, #0]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	021b      	lsls	r3, r3, #8
 800c3ec:	68fa      	ldr	r2, [r7, #12]
 800c3ee:	4313      	orrs	r3, r2
 800c3f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c3f2:	697b      	ldr	r3, [r7, #20]
 800c3f4:	2220      	movs	r2, #32
 800c3f6:	4393      	bics	r3, r2
 800c3f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c3fa:	683b      	ldr	r3, [r7, #0]
 800c3fc:	689b      	ldr	r3, [r3, #8]
 800c3fe:	011b      	lsls	r3, r3, #4
 800c400:	697a      	ldr	r2, [r7, #20]
 800c402:	4313      	orrs	r3, r2
 800c404:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	4a24      	ldr	r2, [pc, #144]	@ (800c49c <TIM_OC2_SetConfig+0xf0>)
 800c40a:	4293      	cmp	r3, r2
 800c40c:	d10d      	bne.n	800c42a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c40e:	697b      	ldr	r3, [r7, #20]
 800c410:	2280      	movs	r2, #128	@ 0x80
 800c412:	4393      	bics	r3, r2
 800c414:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c416:	683b      	ldr	r3, [r7, #0]
 800c418:	68db      	ldr	r3, [r3, #12]
 800c41a:	011b      	lsls	r3, r3, #4
 800c41c:	697a      	ldr	r2, [r7, #20]
 800c41e:	4313      	orrs	r3, r2
 800c420:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c422:	697b      	ldr	r3, [r7, #20]
 800c424:	2240      	movs	r2, #64	@ 0x40
 800c426:	4393      	bics	r3, r2
 800c428:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	4a1b      	ldr	r2, [pc, #108]	@ (800c49c <TIM_OC2_SetConfig+0xf0>)
 800c42e:	4293      	cmp	r3, r2
 800c430:	d00b      	beq.n	800c44a <TIM_OC2_SetConfig+0x9e>
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	4a1a      	ldr	r2, [pc, #104]	@ (800c4a0 <TIM_OC2_SetConfig+0xf4>)
 800c436:	4293      	cmp	r3, r2
 800c438:	d007      	beq.n	800c44a <TIM_OC2_SetConfig+0x9e>
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	4a19      	ldr	r2, [pc, #100]	@ (800c4a4 <TIM_OC2_SetConfig+0xf8>)
 800c43e:	4293      	cmp	r3, r2
 800c440:	d003      	beq.n	800c44a <TIM_OC2_SetConfig+0x9e>
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	4a18      	ldr	r2, [pc, #96]	@ (800c4a8 <TIM_OC2_SetConfig+0xfc>)
 800c446:	4293      	cmp	r3, r2
 800c448:	d113      	bne.n	800c472 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c44a:	693b      	ldr	r3, [r7, #16]
 800c44c:	4a17      	ldr	r2, [pc, #92]	@ (800c4ac <TIM_OC2_SetConfig+0x100>)
 800c44e:	4013      	ands	r3, r2
 800c450:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c452:	693b      	ldr	r3, [r7, #16]
 800c454:	4a16      	ldr	r2, [pc, #88]	@ (800c4b0 <TIM_OC2_SetConfig+0x104>)
 800c456:	4013      	ands	r3, r2
 800c458:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c45a:	683b      	ldr	r3, [r7, #0]
 800c45c:	695b      	ldr	r3, [r3, #20]
 800c45e:	009b      	lsls	r3, r3, #2
 800c460:	693a      	ldr	r2, [r7, #16]
 800c462:	4313      	orrs	r3, r2
 800c464:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c466:	683b      	ldr	r3, [r7, #0]
 800c468:	699b      	ldr	r3, [r3, #24]
 800c46a:	009b      	lsls	r3, r3, #2
 800c46c:	693a      	ldr	r2, [r7, #16]
 800c46e:	4313      	orrs	r3, r2
 800c470:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	693a      	ldr	r2, [r7, #16]
 800c476:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	68fa      	ldr	r2, [r7, #12]
 800c47c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c47e:	683b      	ldr	r3, [r7, #0]
 800c480:	685a      	ldr	r2, [r3, #4]
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	697a      	ldr	r2, [r7, #20]
 800c48a:	621a      	str	r2, [r3, #32]
}
 800c48c:	46c0      	nop			@ (mov r8, r8)
 800c48e:	46bd      	mov	sp, r7
 800c490:	b006      	add	sp, #24
 800c492:	bd80      	pop	{r7, pc}
 800c494:	feff8fff 	.word	0xfeff8fff
 800c498:	fffffcff 	.word	0xfffffcff
 800c49c:	40012c00 	.word	0x40012c00
 800c4a0:	40014000 	.word	0x40014000
 800c4a4:	40014400 	.word	0x40014400
 800c4a8:	40014800 	.word	0x40014800
 800c4ac:	fffffbff 	.word	0xfffffbff
 800c4b0:	fffff7ff 	.word	0xfffff7ff

0800c4b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c4b4:	b580      	push	{r7, lr}
 800c4b6:	b086      	sub	sp, #24
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	6078      	str	r0, [r7, #4]
 800c4bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	6a1b      	ldr	r3, [r3, #32]
 800c4c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	6a1b      	ldr	r3, [r3, #32]
 800c4c8:	4a33      	ldr	r2, [pc, #204]	@ (800c598 <TIM_OC3_SetConfig+0xe4>)
 800c4ca:	401a      	ands	r2, r3
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	685b      	ldr	r3, [r3, #4]
 800c4d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	69db      	ldr	r3, [r3, #28]
 800c4da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	4a2f      	ldr	r2, [pc, #188]	@ (800c59c <TIM_OC3_SetConfig+0xe8>)
 800c4e0:	4013      	ands	r3, r2
 800c4e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	2203      	movs	r2, #3
 800c4e8:	4393      	bics	r3, r2
 800c4ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c4ec:	683b      	ldr	r3, [r7, #0]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	68fa      	ldr	r2, [r7, #12]
 800c4f2:	4313      	orrs	r3, r2
 800c4f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c4f6:	697b      	ldr	r3, [r7, #20]
 800c4f8:	4a29      	ldr	r2, [pc, #164]	@ (800c5a0 <TIM_OC3_SetConfig+0xec>)
 800c4fa:	4013      	ands	r3, r2
 800c4fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c4fe:	683b      	ldr	r3, [r7, #0]
 800c500:	689b      	ldr	r3, [r3, #8]
 800c502:	021b      	lsls	r3, r3, #8
 800c504:	697a      	ldr	r2, [r7, #20]
 800c506:	4313      	orrs	r3, r2
 800c508:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	4a25      	ldr	r2, [pc, #148]	@ (800c5a4 <TIM_OC3_SetConfig+0xf0>)
 800c50e:	4293      	cmp	r3, r2
 800c510:	d10d      	bne.n	800c52e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c512:	697b      	ldr	r3, [r7, #20]
 800c514:	4a24      	ldr	r2, [pc, #144]	@ (800c5a8 <TIM_OC3_SetConfig+0xf4>)
 800c516:	4013      	ands	r3, r2
 800c518:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c51a:	683b      	ldr	r3, [r7, #0]
 800c51c:	68db      	ldr	r3, [r3, #12]
 800c51e:	021b      	lsls	r3, r3, #8
 800c520:	697a      	ldr	r2, [r7, #20]
 800c522:	4313      	orrs	r3, r2
 800c524:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c526:	697b      	ldr	r3, [r7, #20]
 800c528:	4a20      	ldr	r2, [pc, #128]	@ (800c5ac <TIM_OC3_SetConfig+0xf8>)
 800c52a:	4013      	ands	r3, r2
 800c52c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	4a1c      	ldr	r2, [pc, #112]	@ (800c5a4 <TIM_OC3_SetConfig+0xf0>)
 800c532:	4293      	cmp	r3, r2
 800c534:	d00b      	beq.n	800c54e <TIM_OC3_SetConfig+0x9a>
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	4a1d      	ldr	r2, [pc, #116]	@ (800c5b0 <TIM_OC3_SetConfig+0xfc>)
 800c53a:	4293      	cmp	r3, r2
 800c53c:	d007      	beq.n	800c54e <TIM_OC3_SetConfig+0x9a>
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	4a1c      	ldr	r2, [pc, #112]	@ (800c5b4 <TIM_OC3_SetConfig+0x100>)
 800c542:	4293      	cmp	r3, r2
 800c544:	d003      	beq.n	800c54e <TIM_OC3_SetConfig+0x9a>
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	4a1b      	ldr	r2, [pc, #108]	@ (800c5b8 <TIM_OC3_SetConfig+0x104>)
 800c54a:	4293      	cmp	r3, r2
 800c54c:	d113      	bne.n	800c576 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c54e:	693b      	ldr	r3, [r7, #16]
 800c550:	4a1a      	ldr	r2, [pc, #104]	@ (800c5bc <TIM_OC3_SetConfig+0x108>)
 800c552:	4013      	ands	r3, r2
 800c554:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c556:	693b      	ldr	r3, [r7, #16]
 800c558:	4a19      	ldr	r2, [pc, #100]	@ (800c5c0 <TIM_OC3_SetConfig+0x10c>)
 800c55a:	4013      	ands	r3, r2
 800c55c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c55e:	683b      	ldr	r3, [r7, #0]
 800c560:	695b      	ldr	r3, [r3, #20]
 800c562:	011b      	lsls	r3, r3, #4
 800c564:	693a      	ldr	r2, [r7, #16]
 800c566:	4313      	orrs	r3, r2
 800c568:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c56a:	683b      	ldr	r3, [r7, #0]
 800c56c:	699b      	ldr	r3, [r3, #24]
 800c56e:	011b      	lsls	r3, r3, #4
 800c570:	693a      	ldr	r2, [r7, #16]
 800c572:	4313      	orrs	r3, r2
 800c574:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	693a      	ldr	r2, [r7, #16]
 800c57a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	68fa      	ldr	r2, [r7, #12]
 800c580:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c582:	683b      	ldr	r3, [r7, #0]
 800c584:	685a      	ldr	r2, [r3, #4]
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	697a      	ldr	r2, [r7, #20]
 800c58e:	621a      	str	r2, [r3, #32]
}
 800c590:	46c0      	nop			@ (mov r8, r8)
 800c592:	46bd      	mov	sp, r7
 800c594:	b006      	add	sp, #24
 800c596:	bd80      	pop	{r7, pc}
 800c598:	fffffeff 	.word	0xfffffeff
 800c59c:	fffeff8f 	.word	0xfffeff8f
 800c5a0:	fffffdff 	.word	0xfffffdff
 800c5a4:	40012c00 	.word	0x40012c00
 800c5a8:	fffff7ff 	.word	0xfffff7ff
 800c5ac:	fffffbff 	.word	0xfffffbff
 800c5b0:	40014000 	.word	0x40014000
 800c5b4:	40014400 	.word	0x40014400
 800c5b8:	40014800 	.word	0x40014800
 800c5bc:	ffffefff 	.word	0xffffefff
 800c5c0:	ffffdfff 	.word	0xffffdfff

0800c5c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b086      	sub	sp, #24
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	6078      	str	r0, [r7, #4]
 800c5cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	6a1b      	ldr	r3, [r3, #32]
 800c5d2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	6a1b      	ldr	r3, [r3, #32]
 800c5d8:	4a26      	ldr	r2, [pc, #152]	@ (800c674 <TIM_OC4_SetConfig+0xb0>)
 800c5da:	401a      	ands	r2, r3
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	685b      	ldr	r3, [r3, #4]
 800c5e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	69db      	ldr	r3, [r3, #28]
 800c5ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	4a22      	ldr	r2, [pc, #136]	@ (800c678 <TIM_OC4_SetConfig+0xb4>)
 800c5f0:	4013      	ands	r3, r2
 800c5f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	4a21      	ldr	r2, [pc, #132]	@ (800c67c <TIM_OC4_SetConfig+0xb8>)
 800c5f8:	4013      	ands	r3, r2
 800c5fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c5fc:	683b      	ldr	r3, [r7, #0]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	021b      	lsls	r3, r3, #8
 800c602:	68fa      	ldr	r2, [r7, #12]
 800c604:	4313      	orrs	r3, r2
 800c606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c608:	693b      	ldr	r3, [r7, #16]
 800c60a:	4a1d      	ldr	r2, [pc, #116]	@ (800c680 <TIM_OC4_SetConfig+0xbc>)
 800c60c:	4013      	ands	r3, r2
 800c60e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c610:	683b      	ldr	r3, [r7, #0]
 800c612:	689b      	ldr	r3, [r3, #8]
 800c614:	031b      	lsls	r3, r3, #12
 800c616:	693a      	ldr	r2, [r7, #16]
 800c618:	4313      	orrs	r3, r2
 800c61a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	4a19      	ldr	r2, [pc, #100]	@ (800c684 <TIM_OC4_SetConfig+0xc0>)
 800c620:	4293      	cmp	r3, r2
 800c622:	d00b      	beq.n	800c63c <TIM_OC4_SetConfig+0x78>
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	4a18      	ldr	r2, [pc, #96]	@ (800c688 <TIM_OC4_SetConfig+0xc4>)
 800c628:	4293      	cmp	r3, r2
 800c62a:	d007      	beq.n	800c63c <TIM_OC4_SetConfig+0x78>
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	4a17      	ldr	r2, [pc, #92]	@ (800c68c <TIM_OC4_SetConfig+0xc8>)
 800c630:	4293      	cmp	r3, r2
 800c632:	d003      	beq.n	800c63c <TIM_OC4_SetConfig+0x78>
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	4a16      	ldr	r2, [pc, #88]	@ (800c690 <TIM_OC4_SetConfig+0xcc>)
 800c638:	4293      	cmp	r3, r2
 800c63a:	d109      	bne.n	800c650 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c63c:	697b      	ldr	r3, [r7, #20]
 800c63e:	4a15      	ldr	r2, [pc, #84]	@ (800c694 <TIM_OC4_SetConfig+0xd0>)
 800c640:	4013      	ands	r3, r2
 800c642:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c644:	683b      	ldr	r3, [r7, #0]
 800c646:	695b      	ldr	r3, [r3, #20]
 800c648:	019b      	lsls	r3, r3, #6
 800c64a:	697a      	ldr	r2, [r7, #20]
 800c64c:	4313      	orrs	r3, r2
 800c64e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	697a      	ldr	r2, [r7, #20]
 800c654:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	68fa      	ldr	r2, [r7, #12]
 800c65a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c65c:	683b      	ldr	r3, [r7, #0]
 800c65e:	685a      	ldr	r2, [r3, #4]
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	693a      	ldr	r2, [r7, #16]
 800c668:	621a      	str	r2, [r3, #32]
}
 800c66a:	46c0      	nop			@ (mov r8, r8)
 800c66c:	46bd      	mov	sp, r7
 800c66e:	b006      	add	sp, #24
 800c670:	bd80      	pop	{r7, pc}
 800c672:	46c0      	nop			@ (mov r8, r8)
 800c674:	ffffefff 	.word	0xffffefff
 800c678:	feff8fff 	.word	0xfeff8fff
 800c67c:	fffffcff 	.word	0xfffffcff
 800c680:	ffffdfff 	.word	0xffffdfff
 800c684:	40012c00 	.word	0x40012c00
 800c688:	40014000 	.word	0x40014000
 800c68c:	40014400 	.word	0x40014400
 800c690:	40014800 	.word	0x40014800
 800c694:	ffffbfff 	.word	0xffffbfff

0800c698 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c698:	b580      	push	{r7, lr}
 800c69a:	b086      	sub	sp, #24
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	6078      	str	r0, [r7, #4]
 800c6a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	6a1b      	ldr	r3, [r3, #32]
 800c6a6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	6a1b      	ldr	r3, [r3, #32]
 800c6ac:	4a23      	ldr	r2, [pc, #140]	@ (800c73c <TIM_OC5_SetConfig+0xa4>)
 800c6ae:	401a      	ands	r2, r3
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	685b      	ldr	r3, [r3, #4]
 800c6b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c6be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	4a1f      	ldr	r2, [pc, #124]	@ (800c740 <TIM_OC5_SetConfig+0xa8>)
 800c6c4:	4013      	ands	r3, r2
 800c6c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c6c8:	683b      	ldr	r3, [r7, #0]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	68fa      	ldr	r2, [r7, #12]
 800c6ce:	4313      	orrs	r3, r2
 800c6d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c6d2:	693b      	ldr	r3, [r7, #16]
 800c6d4:	4a1b      	ldr	r2, [pc, #108]	@ (800c744 <TIM_OC5_SetConfig+0xac>)
 800c6d6:	4013      	ands	r3, r2
 800c6d8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c6da:	683b      	ldr	r3, [r7, #0]
 800c6dc:	689b      	ldr	r3, [r3, #8]
 800c6de:	041b      	lsls	r3, r3, #16
 800c6e0:	693a      	ldr	r2, [r7, #16]
 800c6e2:	4313      	orrs	r3, r2
 800c6e4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	4a17      	ldr	r2, [pc, #92]	@ (800c748 <TIM_OC5_SetConfig+0xb0>)
 800c6ea:	4293      	cmp	r3, r2
 800c6ec:	d00b      	beq.n	800c706 <TIM_OC5_SetConfig+0x6e>
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	4a16      	ldr	r2, [pc, #88]	@ (800c74c <TIM_OC5_SetConfig+0xb4>)
 800c6f2:	4293      	cmp	r3, r2
 800c6f4:	d007      	beq.n	800c706 <TIM_OC5_SetConfig+0x6e>
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	4a15      	ldr	r2, [pc, #84]	@ (800c750 <TIM_OC5_SetConfig+0xb8>)
 800c6fa:	4293      	cmp	r3, r2
 800c6fc:	d003      	beq.n	800c706 <TIM_OC5_SetConfig+0x6e>
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	4a14      	ldr	r2, [pc, #80]	@ (800c754 <TIM_OC5_SetConfig+0xbc>)
 800c702:	4293      	cmp	r3, r2
 800c704:	d109      	bne.n	800c71a <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c706:	697b      	ldr	r3, [r7, #20]
 800c708:	4a0c      	ldr	r2, [pc, #48]	@ (800c73c <TIM_OC5_SetConfig+0xa4>)
 800c70a:	4013      	ands	r3, r2
 800c70c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c70e:	683b      	ldr	r3, [r7, #0]
 800c710:	695b      	ldr	r3, [r3, #20]
 800c712:	021b      	lsls	r3, r3, #8
 800c714:	697a      	ldr	r2, [r7, #20]
 800c716:	4313      	orrs	r3, r2
 800c718:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	697a      	ldr	r2, [r7, #20]
 800c71e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	68fa      	ldr	r2, [r7, #12]
 800c724:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c726:	683b      	ldr	r3, [r7, #0]
 800c728:	685a      	ldr	r2, [r3, #4]
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	693a      	ldr	r2, [r7, #16]
 800c732:	621a      	str	r2, [r3, #32]
}
 800c734:	46c0      	nop			@ (mov r8, r8)
 800c736:	46bd      	mov	sp, r7
 800c738:	b006      	add	sp, #24
 800c73a:	bd80      	pop	{r7, pc}
 800c73c:	fffeffff 	.word	0xfffeffff
 800c740:	fffeff8f 	.word	0xfffeff8f
 800c744:	fffdffff 	.word	0xfffdffff
 800c748:	40012c00 	.word	0x40012c00
 800c74c:	40014000 	.word	0x40014000
 800c750:	40014400 	.word	0x40014400
 800c754:	40014800 	.word	0x40014800

0800c758 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c758:	b580      	push	{r7, lr}
 800c75a:	b086      	sub	sp, #24
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]
 800c760:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	6a1b      	ldr	r3, [r3, #32]
 800c766:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	6a1b      	ldr	r3, [r3, #32]
 800c76c:	4a24      	ldr	r2, [pc, #144]	@ (800c800 <TIM_OC6_SetConfig+0xa8>)
 800c76e:	401a      	ands	r2, r3
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	685b      	ldr	r3, [r3, #4]
 800c778:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c77e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	4a20      	ldr	r2, [pc, #128]	@ (800c804 <TIM_OC6_SetConfig+0xac>)
 800c784:	4013      	ands	r3, r2
 800c786:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c788:	683b      	ldr	r3, [r7, #0]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	021b      	lsls	r3, r3, #8
 800c78e:	68fa      	ldr	r2, [r7, #12]
 800c790:	4313      	orrs	r3, r2
 800c792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c794:	693b      	ldr	r3, [r7, #16]
 800c796:	4a1c      	ldr	r2, [pc, #112]	@ (800c808 <TIM_OC6_SetConfig+0xb0>)
 800c798:	4013      	ands	r3, r2
 800c79a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c79c:	683b      	ldr	r3, [r7, #0]
 800c79e:	689b      	ldr	r3, [r3, #8]
 800c7a0:	051b      	lsls	r3, r3, #20
 800c7a2:	693a      	ldr	r2, [r7, #16]
 800c7a4:	4313      	orrs	r3, r2
 800c7a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	4a18      	ldr	r2, [pc, #96]	@ (800c80c <TIM_OC6_SetConfig+0xb4>)
 800c7ac:	4293      	cmp	r3, r2
 800c7ae:	d00b      	beq.n	800c7c8 <TIM_OC6_SetConfig+0x70>
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	4a17      	ldr	r2, [pc, #92]	@ (800c810 <TIM_OC6_SetConfig+0xb8>)
 800c7b4:	4293      	cmp	r3, r2
 800c7b6:	d007      	beq.n	800c7c8 <TIM_OC6_SetConfig+0x70>
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	4a16      	ldr	r2, [pc, #88]	@ (800c814 <TIM_OC6_SetConfig+0xbc>)
 800c7bc:	4293      	cmp	r3, r2
 800c7be:	d003      	beq.n	800c7c8 <TIM_OC6_SetConfig+0x70>
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	4a15      	ldr	r2, [pc, #84]	@ (800c818 <TIM_OC6_SetConfig+0xc0>)
 800c7c4:	4293      	cmp	r3, r2
 800c7c6:	d109      	bne.n	800c7dc <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c7c8:	697b      	ldr	r3, [r7, #20]
 800c7ca:	4a14      	ldr	r2, [pc, #80]	@ (800c81c <TIM_OC6_SetConfig+0xc4>)
 800c7cc:	4013      	ands	r3, r2
 800c7ce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c7d0:	683b      	ldr	r3, [r7, #0]
 800c7d2:	695b      	ldr	r3, [r3, #20]
 800c7d4:	029b      	lsls	r3, r3, #10
 800c7d6:	697a      	ldr	r2, [r7, #20]
 800c7d8:	4313      	orrs	r3, r2
 800c7da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	697a      	ldr	r2, [r7, #20]
 800c7e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	68fa      	ldr	r2, [r7, #12]
 800c7e6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c7e8:	683b      	ldr	r3, [r7, #0]
 800c7ea:	685a      	ldr	r2, [r3, #4]
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	693a      	ldr	r2, [r7, #16]
 800c7f4:	621a      	str	r2, [r3, #32]
}
 800c7f6:	46c0      	nop			@ (mov r8, r8)
 800c7f8:	46bd      	mov	sp, r7
 800c7fa:	b006      	add	sp, #24
 800c7fc:	bd80      	pop	{r7, pc}
 800c7fe:	46c0      	nop			@ (mov r8, r8)
 800c800:	ffefffff 	.word	0xffefffff
 800c804:	feff8fff 	.word	0xfeff8fff
 800c808:	ffdfffff 	.word	0xffdfffff
 800c80c:	40012c00 	.word	0x40012c00
 800c810:	40014000 	.word	0x40014000
 800c814:	40014400 	.word	0x40014400
 800c818:	40014800 	.word	0x40014800
 800c81c:	fffbffff 	.word	0xfffbffff

0800c820 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c820:	b580      	push	{r7, lr}
 800c822:	b086      	sub	sp, #24
 800c824:	af00      	add	r7, sp, #0
 800c826:	60f8      	str	r0, [r7, #12]
 800c828:	60b9      	str	r1, [r7, #8]
 800c82a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c82c:	68bb      	ldr	r3, [r7, #8]
 800c82e:	221f      	movs	r2, #31
 800c830:	4013      	ands	r3, r2
 800c832:	2201      	movs	r2, #1
 800c834:	409a      	lsls	r2, r3
 800c836:	0013      	movs	r3, r2
 800c838:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	6a1b      	ldr	r3, [r3, #32]
 800c83e:	697a      	ldr	r2, [r7, #20]
 800c840:	43d2      	mvns	r2, r2
 800c842:	401a      	ands	r2, r3
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	6a1a      	ldr	r2, [r3, #32]
 800c84c:	68bb      	ldr	r3, [r7, #8]
 800c84e:	211f      	movs	r1, #31
 800c850:	400b      	ands	r3, r1
 800c852:	6879      	ldr	r1, [r7, #4]
 800c854:	4099      	lsls	r1, r3
 800c856:	000b      	movs	r3, r1
 800c858:	431a      	orrs	r2, r3
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	621a      	str	r2, [r3, #32]
}
 800c85e:	46c0      	nop			@ (mov r8, r8)
 800c860:	46bd      	mov	sp, r7
 800c862:	b006      	add	sp, #24
 800c864:	bd80      	pop	{r7, pc}
	...

0800c868 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b084      	sub	sp, #16
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	6078      	str	r0, [r7, #4]
 800c870:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c872:	2300      	movs	r3, #0
 800c874:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	223c      	movs	r2, #60	@ 0x3c
 800c87a:	5c9b      	ldrb	r3, [r3, r2]
 800c87c:	2b01      	cmp	r3, #1
 800c87e:	d101      	bne.n	800c884 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c880:	2302      	movs	r3, #2
 800c882:	e06f      	b.n	800c964 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	223c      	movs	r2, #60	@ 0x3c
 800c888:	2101      	movs	r1, #1
 800c88a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	22ff      	movs	r2, #255	@ 0xff
 800c890:	4393      	bics	r3, r2
 800c892:	001a      	movs	r2, r3
 800c894:	683b      	ldr	r3, [r7, #0]
 800c896:	68db      	ldr	r3, [r3, #12]
 800c898:	4313      	orrs	r3, r2
 800c89a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	4a33      	ldr	r2, [pc, #204]	@ (800c96c <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 800c8a0:	401a      	ands	r2, r3
 800c8a2:	683b      	ldr	r3, [r7, #0]
 800c8a4:	689b      	ldr	r3, [r3, #8]
 800c8a6:	4313      	orrs	r3, r2
 800c8a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	4a30      	ldr	r2, [pc, #192]	@ (800c970 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800c8ae:	401a      	ands	r2, r3
 800c8b0:	683b      	ldr	r3, [r7, #0]
 800c8b2:	685b      	ldr	r3, [r3, #4]
 800c8b4:	4313      	orrs	r3, r2
 800c8b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	4a2e      	ldr	r2, [pc, #184]	@ (800c974 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 800c8bc:	401a      	ands	r2, r3
 800c8be:	683b      	ldr	r3, [r7, #0]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	4313      	orrs	r3, r2
 800c8c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	4a2b      	ldr	r2, [pc, #172]	@ (800c978 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800c8ca:	401a      	ands	r2, r3
 800c8cc:	683b      	ldr	r3, [r7, #0]
 800c8ce:	691b      	ldr	r3, [r3, #16]
 800c8d0:	4313      	orrs	r3, r2
 800c8d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	4a29      	ldr	r2, [pc, #164]	@ (800c97c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800c8d8:	401a      	ands	r2, r3
 800c8da:	683b      	ldr	r3, [r7, #0]
 800c8dc:	695b      	ldr	r3, [r3, #20]
 800c8de:	4313      	orrs	r3, r2
 800c8e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	4a26      	ldr	r2, [pc, #152]	@ (800c980 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800c8e6:	401a      	ands	r2, r3
 800c8e8:	683b      	ldr	r3, [r7, #0]
 800c8ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c8ec:	4313      	orrs	r3, r2
 800c8ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	4a24      	ldr	r2, [pc, #144]	@ (800c984 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800c8f4:	401a      	ands	r2, r3
 800c8f6:	683b      	ldr	r3, [r7, #0]
 800c8f8:	699b      	ldr	r3, [r3, #24]
 800c8fa:	041b      	lsls	r3, r3, #16
 800c8fc:	4313      	orrs	r3, r2
 800c8fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	4a21      	ldr	r2, [pc, #132]	@ (800c988 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800c904:	401a      	ands	r2, r3
 800c906:	683b      	ldr	r3, [r7, #0]
 800c908:	69db      	ldr	r3, [r3, #28]
 800c90a:	4313      	orrs	r3, r2
 800c90c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	4a1e      	ldr	r2, [pc, #120]	@ (800c98c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800c914:	4293      	cmp	r3, r2
 800c916:	d11c      	bne.n	800c952 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	4a1d      	ldr	r2, [pc, #116]	@ (800c990 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800c91c:	401a      	ands	r2, r3
 800c91e:	683b      	ldr	r3, [r7, #0]
 800c920:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c922:	051b      	lsls	r3, r3, #20
 800c924:	4313      	orrs	r3, r2
 800c926:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	4a1a      	ldr	r2, [pc, #104]	@ (800c994 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800c92c:	401a      	ands	r2, r3
 800c92e:	683b      	ldr	r3, [r7, #0]
 800c930:	6a1b      	ldr	r3, [r3, #32]
 800c932:	4313      	orrs	r3, r2
 800c934:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	4a17      	ldr	r2, [pc, #92]	@ (800c998 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800c93a:	401a      	ands	r2, r3
 800c93c:	683b      	ldr	r3, [r7, #0]
 800c93e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c940:	4313      	orrs	r3, r2
 800c942:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	4a15      	ldr	r2, [pc, #84]	@ (800c99c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800c948:	401a      	ands	r2, r3
 800c94a:	683b      	ldr	r3, [r7, #0]
 800c94c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c94e:	4313      	orrs	r3, r2
 800c950:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	68fa      	ldr	r2, [r7, #12]
 800c958:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	223c      	movs	r2, #60	@ 0x3c
 800c95e:	2100      	movs	r1, #0
 800c960:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c962:	2300      	movs	r3, #0
}
 800c964:	0018      	movs	r0, r3
 800c966:	46bd      	mov	sp, r7
 800c968:	b004      	add	sp, #16
 800c96a:	bd80      	pop	{r7, pc}
 800c96c:	fffffcff 	.word	0xfffffcff
 800c970:	fffffbff 	.word	0xfffffbff
 800c974:	fffff7ff 	.word	0xfffff7ff
 800c978:	ffffefff 	.word	0xffffefff
 800c97c:	ffffdfff 	.word	0xffffdfff
 800c980:	ffffbfff 	.word	0xffffbfff
 800c984:	fff0ffff 	.word	0xfff0ffff
 800c988:	efffffff 	.word	0xefffffff
 800c98c:	40012c00 	.word	0x40012c00
 800c990:	ff0fffff 	.word	0xff0fffff
 800c994:	feffffff 	.word	0xfeffffff
 800c998:	fdffffff 	.word	0xfdffffff
 800c99c:	dfffffff 	.word	0xdfffffff

0800c9a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c9a0:	b580      	push	{r7, lr}
 800c9a2:	b082      	sub	sp, #8
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d101      	bne.n	800c9b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c9ae:	2301      	movs	r3, #1
 800c9b0:	e046      	b.n	800ca40 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	2288      	movs	r2, #136	@ 0x88
 800c9b6:	589b      	ldr	r3, [r3, r2]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d107      	bne.n	800c9cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	2284      	movs	r2, #132	@ 0x84
 800c9c0:	2100      	movs	r1, #0
 800c9c2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	0018      	movs	r0, r3
 800c9c8:	f7fb f9a8 	bl	8007d1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	2288      	movs	r2, #136	@ 0x88
 800c9d0:	2124      	movs	r1, #36	@ 0x24
 800c9d2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	681a      	ldr	r2, [r3, #0]
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	2101      	movs	r1, #1
 800c9e0:	438a      	bics	r2, r1
 800c9e2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d003      	beq.n	800c9f4 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	0018      	movs	r0, r3
 800c9f0:	f000 fd0c 	bl	800d40c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	0018      	movs	r0, r3
 800c9f8:	f000 f9b2 	bl	800cd60 <UART_SetConfig>
 800c9fc:	0003      	movs	r3, r0
 800c9fe:	2b01      	cmp	r3, #1
 800ca00:	d101      	bne.n	800ca06 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800ca02:	2301      	movs	r3, #1
 800ca04:	e01c      	b.n	800ca40 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	685a      	ldr	r2, [r3, #4]
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	490d      	ldr	r1, [pc, #52]	@ (800ca48 <HAL_UART_Init+0xa8>)
 800ca12:	400a      	ands	r2, r1
 800ca14:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	689a      	ldr	r2, [r3, #8]
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	212a      	movs	r1, #42	@ 0x2a
 800ca22:	438a      	bics	r2, r1
 800ca24:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	681a      	ldr	r2, [r3, #0]
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	2101      	movs	r1, #1
 800ca32:	430a      	orrs	r2, r1
 800ca34:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	0018      	movs	r0, r3
 800ca3a:	f000 fd9b 	bl	800d574 <UART_CheckIdleState>
 800ca3e:	0003      	movs	r3, r0
}
 800ca40:	0018      	movs	r0, r3
 800ca42:	46bd      	mov	sp, r7
 800ca44:	b002      	add	sp, #8
 800ca46:	bd80      	pop	{r7, pc}
 800ca48:	ffffb7ff 	.word	0xffffb7ff

0800ca4c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ca4c:	b580      	push	{r7, lr}
 800ca4e:	b08a      	sub	sp, #40	@ 0x28
 800ca50:	af02      	add	r7, sp, #8
 800ca52:	60f8      	str	r0, [r7, #12]
 800ca54:	60b9      	str	r1, [r7, #8]
 800ca56:	603b      	str	r3, [r7, #0]
 800ca58:	1dbb      	adds	r3, r7, #6
 800ca5a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	2288      	movs	r2, #136	@ 0x88
 800ca60:	589b      	ldr	r3, [r3, r2]
 800ca62:	2b20      	cmp	r3, #32
 800ca64:	d000      	beq.n	800ca68 <HAL_UART_Transmit+0x1c>
 800ca66:	e090      	b.n	800cb8a <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 800ca68:	68bb      	ldr	r3, [r7, #8]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d003      	beq.n	800ca76 <HAL_UART_Transmit+0x2a>
 800ca6e:	1dbb      	adds	r3, r7, #6
 800ca70:	881b      	ldrh	r3, [r3, #0]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d101      	bne.n	800ca7a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800ca76:	2301      	movs	r3, #1
 800ca78:	e088      	b.n	800cb8c <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	689a      	ldr	r2, [r3, #8]
 800ca7e:	2380      	movs	r3, #128	@ 0x80
 800ca80:	015b      	lsls	r3, r3, #5
 800ca82:	429a      	cmp	r2, r3
 800ca84:	d109      	bne.n	800ca9a <HAL_UART_Transmit+0x4e>
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	691b      	ldr	r3, [r3, #16]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d105      	bne.n	800ca9a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800ca8e:	68bb      	ldr	r3, [r7, #8]
 800ca90:	2201      	movs	r2, #1
 800ca92:	4013      	ands	r3, r2
 800ca94:	d001      	beq.n	800ca9a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800ca96:	2301      	movs	r3, #1
 800ca98:	e078      	b.n	800cb8c <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	2290      	movs	r2, #144	@ 0x90
 800ca9e:	2100      	movs	r1, #0
 800caa0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	2288      	movs	r2, #136	@ 0x88
 800caa6:	2121      	movs	r1, #33	@ 0x21
 800caa8:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800caaa:	f7fc f8c9 	bl	8008c40 <HAL_GetTick>
 800caae:	0003      	movs	r3, r0
 800cab0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	1dba      	adds	r2, r7, #6
 800cab6:	2154      	movs	r1, #84	@ 0x54
 800cab8:	8812      	ldrh	r2, [r2, #0]
 800caba:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	1dba      	adds	r2, r7, #6
 800cac0:	2156      	movs	r1, #86	@ 0x56
 800cac2:	8812      	ldrh	r2, [r2, #0]
 800cac4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	689a      	ldr	r2, [r3, #8]
 800caca:	2380      	movs	r3, #128	@ 0x80
 800cacc:	015b      	lsls	r3, r3, #5
 800cace:	429a      	cmp	r2, r3
 800cad0:	d108      	bne.n	800cae4 <HAL_UART_Transmit+0x98>
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	691b      	ldr	r3, [r3, #16]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d104      	bne.n	800cae4 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800cada:	2300      	movs	r3, #0
 800cadc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800cade:	68bb      	ldr	r3, [r7, #8]
 800cae0:	61bb      	str	r3, [r7, #24]
 800cae2:	e003      	b.n	800caec <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 800cae4:	68bb      	ldr	r3, [r7, #8]
 800cae6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cae8:	2300      	movs	r3, #0
 800caea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800caec:	e030      	b.n	800cb50 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800caee:	697a      	ldr	r2, [r7, #20]
 800caf0:	68f8      	ldr	r0, [r7, #12]
 800caf2:	683b      	ldr	r3, [r7, #0]
 800caf4:	9300      	str	r3, [sp, #0]
 800caf6:	0013      	movs	r3, r2
 800caf8:	2200      	movs	r2, #0
 800cafa:	2180      	movs	r1, #128	@ 0x80
 800cafc:	f000 fde4 	bl	800d6c8 <UART_WaitOnFlagUntilTimeout>
 800cb00:	1e03      	subs	r3, r0, #0
 800cb02:	d005      	beq.n	800cb10 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	2288      	movs	r2, #136	@ 0x88
 800cb08:	2120      	movs	r1, #32
 800cb0a:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 800cb0c:	2303      	movs	r3, #3
 800cb0e:	e03d      	b.n	800cb8c <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 800cb10:	69fb      	ldr	r3, [r7, #28]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d10b      	bne.n	800cb2e <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800cb16:	69bb      	ldr	r3, [r7, #24]
 800cb18:	881b      	ldrh	r3, [r3, #0]
 800cb1a:	001a      	movs	r2, r3
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	05d2      	lsls	r2, r2, #23
 800cb22:	0dd2      	lsrs	r2, r2, #23
 800cb24:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800cb26:	69bb      	ldr	r3, [r7, #24]
 800cb28:	3302      	adds	r3, #2
 800cb2a:	61bb      	str	r3, [r7, #24]
 800cb2c:	e007      	b.n	800cb3e <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800cb2e:	69fb      	ldr	r3, [r7, #28]
 800cb30:	781a      	ldrb	r2, [r3, #0]
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800cb38:	69fb      	ldr	r3, [r7, #28]
 800cb3a:	3301      	adds	r3, #1
 800cb3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	2256      	movs	r2, #86	@ 0x56
 800cb42:	5a9b      	ldrh	r3, [r3, r2]
 800cb44:	b29b      	uxth	r3, r3
 800cb46:	3b01      	subs	r3, #1
 800cb48:	b299      	uxth	r1, r3
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	2256      	movs	r2, #86	@ 0x56
 800cb4e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	2256      	movs	r2, #86	@ 0x56
 800cb54:	5a9b      	ldrh	r3, [r3, r2]
 800cb56:	b29b      	uxth	r3, r3
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d1c8      	bne.n	800caee <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800cb5c:	697a      	ldr	r2, [r7, #20]
 800cb5e:	68f8      	ldr	r0, [r7, #12]
 800cb60:	683b      	ldr	r3, [r7, #0]
 800cb62:	9300      	str	r3, [sp, #0]
 800cb64:	0013      	movs	r3, r2
 800cb66:	2200      	movs	r2, #0
 800cb68:	2140      	movs	r1, #64	@ 0x40
 800cb6a:	f000 fdad 	bl	800d6c8 <UART_WaitOnFlagUntilTimeout>
 800cb6e:	1e03      	subs	r3, r0, #0
 800cb70:	d005      	beq.n	800cb7e <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	2288      	movs	r2, #136	@ 0x88
 800cb76:	2120      	movs	r1, #32
 800cb78:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 800cb7a:	2303      	movs	r3, #3
 800cb7c:	e006      	b.n	800cb8c <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	2288      	movs	r2, #136	@ 0x88
 800cb82:	2120      	movs	r1, #32
 800cb84:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800cb86:	2300      	movs	r3, #0
 800cb88:	e000      	b.n	800cb8c <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 800cb8a:	2302      	movs	r3, #2
  }
}
 800cb8c:	0018      	movs	r0, r3
 800cb8e:	46bd      	mov	sp, r7
 800cb90:	b008      	add	sp, #32
 800cb92:	bd80      	pop	{r7, pc}

0800cb94 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cb94:	b580      	push	{r7, lr}
 800cb96:	b08a      	sub	sp, #40	@ 0x28
 800cb98:	af02      	add	r7, sp, #8
 800cb9a:	60f8      	str	r0, [r7, #12]
 800cb9c:	60b9      	str	r1, [r7, #8]
 800cb9e:	603b      	str	r3, [r7, #0]
 800cba0:	1dbb      	adds	r3, r7, #6
 800cba2:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	228c      	movs	r2, #140	@ 0x8c
 800cba8:	589b      	ldr	r3, [r3, r2]
 800cbaa:	2b20      	cmp	r3, #32
 800cbac:	d000      	beq.n	800cbb0 <HAL_UART_Receive+0x1c>
 800cbae:	e0d0      	b.n	800cd52 <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 800cbb0:	68bb      	ldr	r3, [r7, #8]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d003      	beq.n	800cbbe <HAL_UART_Receive+0x2a>
 800cbb6:	1dbb      	adds	r3, r7, #6
 800cbb8:	881b      	ldrh	r3, [r3, #0]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d101      	bne.n	800cbc2 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 800cbbe:	2301      	movs	r3, #1
 800cbc0:	e0c8      	b.n	800cd54 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	689a      	ldr	r2, [r3, #8]
 800cbc6:	2380      	movs	r3, #128	@ 0x80
 800cbc8:	015b      	lsls	r3, r3, #5
 800cbca:	429a      	cmp	r2, r3
 800cbcc:	d109      	bne.n	800cbe2 <HAL_UART_Receive+0x4e>
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	691b      	ldr	r3, [r3, #16]
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d105      	bne.n	800cbe2 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800cbd6:	68bb      	ldr	r3, [r7, #8]
 800cbd8:	2201      	movs	r2, #1
 800cbda:	4013      	ands	r3, r2
 800cbdc:	d001      	beq.n	800cbe2 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 800cbde:	2301      	movs	r3, #1
 800cbe0:	e0b8      	b.n	800cd54 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	2290      	movs	r2, #144	@ 0x90
 800cbe6:	2100      	movs	r1, #0
 800cbe8:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	228c      	movs	r2, #140	@ 0x8c
 800cbee:	2122      	movs	r1, #34	@ 0x22
 800cbf0:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	2200      	movs	r2, #0
 800cbf6:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cbf8:	f7fc f822 	bl	8008c40 <HAL_GetTick>
 800cbfc:	0003      	movs	r3, r0
 800cbfe:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	1dba      	adds	r2, r7, #6
 800cc04:	215c      	movs	r1, #92	@ 0x5c
 800cc06:	8812      	ldrh	r2, [r2, #0]
 800cc08:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	1dba      	adds	r2, r7, #6
 800cc0e:	215e      	movs	r1, #94	@ 0x5e
 800cc10:	8812      	ldrh	r2, [r2, #0]
 800cc12:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	689a      	ldr	r2, [r3, #8]
 800cc18:	2380      	movs	r3, #128	@ 0x80
 800cc1a:	015b      	lsls	r3, r3, #5
 800cc1c:	429a      	cmp	r2, r3
 800cc1e:	d10d      	bne.n	800cc3c <HAL_UART_Receive+0xa8>
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	691b      	ldr	r3, [r3, #16]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d104      	bne.n	800cc32 <HAL_UART_Receive+0x9e>
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	2260      	movs	r2, #96	@ 0x60
 800cc2c:	494b      	ldr	r1, [pc, #300]	@ (800cd5c <HAL_UART_Receive+0x1c8>)
 800cc2e:	5299      	strh	r1, [r3, r2]
 800cc30:	e02e      	b.n	800cc90 <HAL_UART_Receive+0xfc>
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	2260      	movs	r2, #96	@ 0x60
 800cc36:	21ff      	movs	r1, #255	@ 0xff
 800cc38:	5299      	strh	r1, [r3, r2]
 800cc3a:	e029      	b.n	800cc90 <HAL_UART_Receive+0xfc>
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	689b      	ldr	r3, [r3, #8]
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d10d      	bne.n	800cc60 <HAL_UART_Receive+0xcc>
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	691b      	ldr	r3, [r3, #16]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d104      	bne.n	800cc56 <HAL_UART_Receive+0xc2>
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	2260      	movs	r2, #96	@ 0x60
 800cc50:	21ff      	movs	r1, #255	@ 0xff
 800cc52:	5299      	strh	r1, [r3, r2]
 800cc54:	e01c      	b.n	800cc90 <HAL_UART_Receive+0xfc>
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	2260      	movs	r2, #96	@ 0x60
 800cc5a:	217f      	movs	r1, #127	@ 0x7f
 800cc5c:	5299      	strh	r1, [r3, r2]
 800cc5e:	e017      	b.n	800cc90 <HAL_UART_Receive+0xfc>
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	689a      	ldr	r2, [r3, #8]
 800cc64:	2380      	movs	r3, #128	@ 0x80
 800cc66:	055b      	lsls	r3, r3, #21
 800cc68:	429a      	cmp	r2, r3
 800cc6a:	d10d      	bne.n	800cc88 <HAL_UART_Receive+0xf4>
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	691b      	ldr	r3, [r3, #16]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d104      	bne.n	800cc7e <HAL_UART_Receive+0xea>
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	2260      	movs	r2, #96	@ 0x60
 800cc78:	217f      	movs	r1, #127	@ 0x7f
 800cc7a:	5299      	strh	r1, [r3, r2]
 800cc7c:	e008      	b.n	800cc90 <HAL_UART_Receive+0xfc>
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	2260      	movs	r2, #96	@ 0x60
 800cc82:	213f      	movs	r1, #63	@ 0x3f
 800cc84:	5299      	strh	r1, [r3, r2]
 800cc86:	e003      	b.n	800cc90 <HAL_UART_Receive+0xfc>
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	2260      	movs	r2, #96	@ 0x60
 800cc8c:	2100      	movs	r1, #0
 800cc8e:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 800cc90:	2312      	movs	r3, #18
 800cc92:	18fb      	adds	r3, r7, r3
 800cc94:	68fa      	ldr	r2, [r7, #12]
 800cc96:	2160      	movs	r1, #96	@ 0x60
 800cc98:	5a52      	ldrh	r2, [r2, r1]
 800cc9a:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	689a      	ldr	r2, [r3, #8]
 800cca0:	2380      	movs	r3, #128	@ 0x80
 800cca2:	015b      	lsls	r3, r3, #5
 800cca4:	429a      	cmp	r2, r3
 800cca6:	d108      	bne.n	800ccba <HAL_UART_Receive+0x126>
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	691b      	ldr	r3, [r3, #16]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d104      	bne.n	800ccba <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 800ccb0:	2300      	movs	r3, #0
 800ccb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800ccb4:	68bb      	ldr	r3, [r7, #8]
 800ccb6:	61bb      	str	r3, [r7, #24]
 800ccb8:	e003      	b.n	800ccc2 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 800ccba:	68bb      	ldr	r3, [r7, #8]
 800ccbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800ccc2:	e03a      	b.n	800cd3a <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800ccc4:	697a      	ldr	r2, [r7, #20]
 800ccc6:	68f8      	ldr	r0, [r7, #12]
 800ccc8:	683b      	ldr	r3, [r7, #0]
 800ccca:	9300      	str	r3, [sp, #0]
 800cccc:	0013      	movs	r3, r2
 800ccce:	2200      	movs	r2, #0
 800ccd0:	2120      	movs	r1, #32
 800ccd2:	f000 fcf9 	bl	800d6c8 <UART_WaitOnFlagUntilTimeout>
 800ccd6:	1e03      	subs	r3, r0, #0
 800ccd8:	d005      	beq.n	800cce6 <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	228c      	movs	r2, #140	@ 0x8c
 800ccde:	2120      	movs	r1, #32
 800cce0:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 800cce2:	2303      	movs	r3, #3
 800cce4:	e036      	b.n	800cd54 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 800cce6:	69fb      	ldr	r3, [r7, #28]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d10e      	bne.n	800cd0a <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ccf2:	b29b      	uxth	r3, r3
 800ccf4:	2212      	movs	r2, #18
 800ccf6:	18ba      	adds	r2, r7, r2
 800ccf8:	8812      	ldrh	r2, [r2, #0]
 800ccfa:	4013      	ands	r3, r2
 800ccfc:	b29a      	uxth	r2, r3
 800ccfe:	69bb      	ldr	r3, [r7, #24]
 800cd00:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800cd02:	69bb      	ldr	r3, [r7, #24]
 800cd04:	3302      	adds	r3, #2
 800cd06:	61bb      	str	r3, [r7, #24]
 800cd08:	e00e      	b.n	800cd28 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd10:	b2db      	uxtb	r3, r3
 800cd12:	2212      	movs	r2, #18
 800cd14:	18ba      	adds	r2, r7, r2
 800cd16:	8812      	ldrh	r2, [r2, #0]
 800cd18:	b2d2      	uxtb	r2, r2
 800cd1a:	4013      	ands	r3, r2
 800cd1c:	b2da      	uxtb	r2, r3
 800cd1e:	69fb      	ldr	r3, [r7, #28]
 800cd20:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800cd22:	69fb      	ldr	r3, [r7, #28]
 800cd24:	3301      	adds	r3, #1
 800cd26:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	225e      	movs	r2, #94	@ 0x5e
 800cd2c:	5a9b      	ldrh	r3, [r3, r2]
 800cd2e:	b29b      	uxth	r3, r3
 800cd30:	3b01      	subs	r3, #1
 800cd32:	b299      	uxth	r1, r3
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	225e      	movs	r2, #94	@ 0x5e
 800cd38:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	225e      	movs	r2, #94	@ 0x5e
 800cd3e:	5a9b      	ldrh	r3, [r3, r2]
 800cd40:	b29b      	uxth	r3, r3
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d1be      	bne.n	800ccc4 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	228c      	movs	r2, #140	@ 0x8c
 800cd4a:	2120      	movs	r1, #32
 800cd4c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800cd4e:	2300      	movs	r3, #0
 800cd50:	e000      	b.n	800cd54 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 800cd52:	2302      	movs	r3, #2
  }
}
 800cd54:	0018      	movs	r0, r3
 800cd56:	46bd      	mov	sp, r7
 800cd58:	b008      	add	sp, #32
 800cd5a:	bd80      	pop	{r7, pc}
 800cd5c:	000001ff 	.word	0x000001ff

0800cd60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cd60:	b5b0      	push	{r4, r5, r7, lr}
 800cd62:	b090      	sub	sp, #64	@ 0x40
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cd68:	231a      	movs	r3, #26
 800cd6a:	2220      	movs	r2, #32
 800cd6c:	189b      	adds	r3, r3, r2
 800cd6e:	19db      	adds	r3, r3, r7
 800cd70:	2200      	movs	r2, #0
 800cd72:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cd74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd76:	689a      	ldr	r2, [r3, #8]
 800cd78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd7a:	691b      	ldr	r3, [r3, #16]
 800cd7c:	431a      	orrs	r2, r3
 800cd7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd80:	695b      	ldr	r3, [r3, #20]
 800cd82:	431a      	orrs	r2, r3
 800cd84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd86:	69db      	ldr	r3, [r3, #28]
 800cd88:	4313      	orrs	r3, r2
 800cd8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cd8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	4ac1      	ldr	r2, [pc, #772]	@ (800d098 <UART_SetConfig+0x338>)
 800cd94:	4013      	ands	r3, r2
 800cd96:	0019      	movs	r1, r3
 800cd98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd9a:	681a      	ldr	r2, [r3, #0]
 800cd9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd9e:	430b      	orrs	r3, r1
 800cda0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cda2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	685b      	ldr	r3, [r3, #4]
 800cda8:	4abc      	ldr	r2, [pc, #752]	@ (800d09c <UART_SetConfig+0x33c>)
 800cdaa:	4013      	ands	r3, r2
 800cdac:	0018      	movs	r0, r3
 800cdae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdb0:	68d9      	ldr	r1, [r3, #12]
 800cdb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdb4:	681a      	ldr	r2, [r3, #0]
 800cdb6:	0003      	movs	r3, r0
 800cdb8:	430b      	orrs	r3, r1
 800cdba:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cdbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdbe:	699b      	ldr	r3, [r3, #24]
 800cdc0:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cdc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	4ab6      	ldr	r2, [pc, #728]	@ (800d0a0 <UART_SetConfig+0x340>)
 800cdc8:	4293      	cmp	r3, r2
 800cdca:	d009      	beq.n	800cde0 <UART_SetConfig+0x80>
 800cdcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	4ab4      	ldr	r2, [pc, #720]	@ (800d0a4 <UART_SetConfig+0x344>)
 800cdd2:	4293      	cmp	r3, r2
 800cdd4:	d004      	beq.n	800cde0 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800cdd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdd8:	6a1b      	ldr	r3, [r3, #32]
 800cdda:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800cddc:	4313      	orrs	r3, r2
 800cdde:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cde0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	689b      	ldr	r3, [r3, #8]
 800cde6:	4ab0      	ldr	r2, [pc, #704]	@ (800d0a8 <UART_SetConfig+0x348>)
 800cde8:	4013      	ands	r3, r2
 800cdea:	0019      	movs	r1, r3
 800cdec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdee:	681a      	ldr	r2, [r3, #0]
 800cdf0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cdf2:	430b      	orrs	r3, r1
 800cdf4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800cdf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdfc:	220f      	movs	r2, #15
 800cdfe:	4393      	bics	r3, r2
 800ce00:	0018      	movs	r0, r3
 800ce02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce04:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800ce06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce08:	681a      	ldr	r2, [r3, #0]
 800ce0a:	0003      	movs	r3, r0
 800ce0c:	430b      	orrs	r3, r1
 800ce0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ce10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	4aa5      	ldr	r2, [pc, #660]	@ (800d0ac <UART_SetConfig+0x34c>)
 800ce16:	4293      	cmp	r3, r2
 800ce18:	d131      	bne.n	800ce7e <UART_SetConfig+0x11e>
 800ce1a:	4ba5      	ldr	r3, [pc, #660]	@ (800d0b0 <UART_SetConfig+0x350>)
 800ce1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ce1e:	2203      	movs	r2, #3
 800ce20:	4013      	ands	r3, r2
 800ce22:	2b03      	cmp	r3, #3
 800ce24:	d01d      	beq.n	800ce62 <UART_SetConfig+0x102>
 800ce26:	d823      	bhi.n	800ce70 <UART_SetConfig+0x110>
 800ce28:	2b02      	cmp	r3, #2
 800ce2a:	d00c      	beq.n	800ce46 <UART_SetConfig+0xe6>
 800ce2c:	d820      	bhi.n	800ce70 <UART_SetConfig+0x110>
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d002      	beq.n	800ce38 <UART_SetConfig+0xd8>
 800ce32:	2b01      	cmp	r3, #1
 800ce34:	d00e      	beq.n	800ce54 <UART_SetConfig+0xf4>
 800ce36:	e01b      	b.n	800ce70 <UART_SetConfig+0x110>
 800ce38:	231b      	movs	r3, #27
 800ce3a:	2220      	movs	r2, #32
 800ce3c:	189b      	adds	r3, r3, r2
 800ce3e:	19db      	adds	r3, r3, r7
 800ce40:	2200      	movs	r2, #0
 800ce42:	701a      	strb	r2, [r3, #0]
 800ce44:	e154      	b.n	800d0f0 <UART_SetConfig+0x390>
 800ce46:	231b      	movs	r3, #27
 800ce48:	2220      	movs	r2, #32
 800ce4a:	189b      	adds	r3, r3, r2
 800ce4c:	19db      	adds	r3, r3, r7
 800ce4e:	2202      	movs	r2, #2
 800ce50:	701a      	strb	r2, [r3, #0]
 800ce52:	e14d      	b.n	800d0f0 <UART_SetConfig+0x390>
 800ce54:	231b      	movs	r3, #27
 800ce56:	2220      	movs	r2, #32
 800ce58:	189b      	adds	r3, r3, r2
 800ce5a:	19db      	adds	r3, r3, r7
 800ce5c:	2204      	movs	r2, #4
 800ce5e:	701a      	strb	r2, [r3, #0]
 800ce60:	e146      	b.n	800d0f0 <UART_SetConfig+0x390>
 800ce62:	231b      	movs	r3, #27
 800ce64:	2220      	movs	r2, #32
 800ce66:	189b      	adds	r3, r3, r2
 800ce68:	19db      	adds	r3, r3, r7
 800ce6a:	2208      	movs	r2, #8
 800ce6c:	701a      	strb	r2, [r3, #0]
 800ce6e:	e13f      	b.n	800d0f0 <UART_SetConfig+0x390>
 800ce70:	231b      	movs	r3, #27
 800ce72:	2220      	movs	r2, #32
 800ce74:	189b      	adds	r3, r3, r2
 800ce76:	19db      	adds	r3, r3, r7
 800ce78:	2210      	movs	r2, #16
 800ce7a:	701a      	strb	r2, [r3, #0]
 800ce7c:	e138      	b.n	800d0f0 <UART_SetConfig+0x390>
 800ce7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	4a8c      	ldr	r2, [pc, #560]	@ (800d0b4 <UART_SetConfig+0x354>)
 800ce84:	4293      	cmp	r3, r2
 800ce86:	d131      	bne.n	800ceec <UART_SetConfig+0x18c>
 800ce88:	4b89      	ldr	r3, [pc, #548]	@ (800d0b0 <UART_SetConfig+0x350>)
 800ce8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ce8c:	220c      	movs	r2, #12
 800ce8e:	4013      	ands	r3, r2
 800ce90:	2b0c      	cmp	r3, #12
 800ce92:	d01d      	beq.n	800ced0 <UART_SetConfig+0x170>
 800ce94:	d823      	bhi.n	800cede <UART_SetConfig+0x17e>
 800ce96:	2b08      	cmp	r3, #8
 800ce98:	d00c      	beq.n	800ceb4 <UART_SetConfig+0x154>
 800ce9a:	d820      	bhi.n	800cede <UART_SetConfig+0x17e>
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d002      	beq.n	800cea6 <UART_SetConfig+0x146>
 800cea0:	2b04      	cmp	r3, #4
 800cea2:	d00e      	beq.n	800cec2 <UART_SetConfig+0x162>
 800cea4:	e01b      	b.n	800cede <UART_SetConfig+0x17e>
 800cea6:	231b      	movs	r3, #27
 800cea8:	2220      	movs	r2, #32
 800ceaa:	189b      	adds	r3, r3, r2
 800ceac:	19db      	adds	r3, r3, r7
 800ceae:	2200      	movs	r2, #0
 800ceb0:	701a      	strb	r2, [r3, #0]
 800ceb2:	e11d      	b.n	800d0f0 <UART_SetConfig+0x390>
 800ceb4:	231b      	movs	r3, #27
 800ceb6:	2220      	movs	r2, #32
 800ceb8:	189b      	adds	r3, r3, r2
 800ceba:	19db      	adds	r3, r3, r7
 800cebc:	2202      	movs	r2, #2
 800cebe:	701a      	strb	r2, [r3, #0]
 800cec0:	e116      	b.n	800d0f0 <UART_SetConfig+0x390>
 800cec2:	231b      	movs	r3, #27
 800cec4:	2220      	movs	r2, #32
 800cec6:	189b      	adds	r3, r3, r2
 800cec8:	19db      	adds	r3, r3, r7
 800ceca:	2204      	movs	r2, #4
 800cecc:	701a      	strb	r2, [r3, #0]
 800cece:	e10f      	b.n	800d0f0 <UART_SetConfig+0x390>
 800ced0:	231b      	movs	r3, #27
 800ced2:	2220      	movs	r2, #32
 800ced4:	189b      	adds	r3, r3, r2
 800ced6:	19db      	adds	r3, r3, r7
 800ced8:	2208      	movs	r2, #8
 800ceda:	701a      	strb	r2, [r3, #0]
 800cedc:	e108      	b.n	800d0f0 <UART_SetConfig+0x390>
 800cede:	231b      	movs	r3, #27
 800cee0:	2220      	movs	r2, #32
 800cee2:	189b      	adds	r3, r3, r2
 800cee4:	19db      	adds	r3, r3, r7
 800cee6:	2210      	movs	r2, #16
 800cee8:	701a      	strb	r2, [r3, #0]
 800ceea:	e101      	b.n	800d0f0 <UART_SetConfig+0x390>
 800ceec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	4a71      	ldr	r2, [pc, #452]	@ (800d0b8 <UART_SetConfig+0x358>)
 800cef2:	4293      	cmp	r3, r2
 800cef4:	d131      	bne.n	800cf5a <UART_SetConfig+0x1fa>
 800cef6:	4b6e      	ldr	r3, [pc, #440]	@ (800d0b0 <UART_SetConfig+0x350>)
 800cef8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cefa:	2230      	movs	r2, #48	@ 0x30
 800cefc:	4013      	ands	r3, r2
 800cefe:	2b30      	cmp	r3, #48	@ 0x30
 800cf00:	d01d      	beq.n	800cf3e <UART_SetConfig+0x1de>
 800cf02:	d823      	bhi.n	800cf4c <UART_SetConfig+0x1ec>
 800cf04:	2b20      	cmp	r3, #32
 800cf06:	d00c      	beq.n	800cf22 <UART_SetConfig+0x1c2>
 800cf08:	d820      	bhi.n	800cf4c <UART_SetConfig+0x1ec>
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d002      	beq.n	800cf14 <UART_SetConfig+0x1b4>
 800cf0e:	2b10      	cmp	r3, #16
 800cf10:	d00e      	beq.n	800cf30 <UART_SetConfig+0x1d0>
 800cf12:	e01b      	b.n	800cf4c <UART_SetConfig+0x1ec>
 800cf14:	231b      	movs	r3, #27
 800cf16:	2220      	movs	r2, #32
 800cf18:	189b      	adds	r3, r3, r2
 800cf1a:	19db      	adds	r3, r3, r7
 800cf1c:	2200      	movs	r2, #0
 800cf1e:	701a      	strb	r2, [r3, #0]
 800cf20:	e0e6      	b.n	800d0f0 <UART_SetConfig+0x390>
 800cf22:	231b      	movs	r3, #27
 800cf24:	2220      	movs	r2, #32
 800cf26:	189b      	adds	r3, r3, r2
 800cf28:	19db      	adds	r3, r3, r7
 800cf2a:	2202      	movs	r2, #2
 800cf2c:	701a      	strb	r2, [r3, #0]
 800cf2e:	e0df      	b.n	800d0f0 <UART_SetConfig+0x390>
 800cf30:	231b      	movs	r3, #27
 800cf32:	2220      	movs	r2, #32
 800cf34:	189b      	adds	r3, r3, r2
 800cf36:	19db      	adds	r3, r3, r7
 800cf38:	2204      	movs	r2, #4
 800cf3a:	701a      	strb	r2, [r3, #0]
 800cf3c:	e0d8      	b.n	800d0f0 <UART_SetConfig+0x390>
 800cf3e:	231b      	movs	r3, #27
 800cf40:	2220      	movs	r2, #32
 800cf42:	189b      	adds	r3, r3, r2
 800cf44:	19db      	adds	r3, r3, r7
 800cf46:	2208      	movs	r2, #8
 800cf48:	701a      	strb	r2, [r3, #0]
 800cf4a:	e0d1      	b.n	800d0f0 <UART_SetConfig+0x390>
 800cf4c:	231b      	movs	r3, #27
 800cf4e:	2220      	movs	r2, #32
 800cf50:	189b      	adds	r3, r3, r2
 800cf52:	19db      	adds	r3, r3, r7
 800cf54:	2210      	movs	r2, #16
 800cf56:	701a      	strb	r2, [r3, #0]
 800cf58:	e0ca      	b.n	800d0f0 <UART_SetConfig+0x390>
 800cf5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	4a57      	ldr	r2, [pc, #348]	@ (800d0bc <UART_SetConfig+0x35c>)
 800cf60:	4293      	cmp	r3, r2
 800cf62:	d106      	bne.n	800cf72 <UART_SetConfig+0x212>
 800cf64:	231b      	movs	r3, #27
 800cf66:	2220      	movs	r2, #32
 800cf68:	189b      	adds	r3, r3, r2
 800cf6a:	19db      	adds	r3, r3, r7
 800cf6c:	2200      	movs	r2, #0
 800cf6e:	701a      	strb	r2, [r3, #0]
 800cf70:	e0be      	b.n	800d0f0 <UART_SetConfig+0x390>
 800cf72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	4a52      	ldr	r2, [pc, #328]	@ (800d0c0 <UART_SetConfig+0x360>)
 800cf78:	4293      	cmp	r3, r2
 800cf7a:	d106      	bne.n	800cf8a <UART_SetConfig+0x22a>
 800cf7c:	231b      	movs	r3, #27
 800cf7e:	2220      	movs	r2, #32
 800cf80:	189b      	adds	r3, r3, r2
 800cf82:	19db      	adds	r3, r3, r7
 800cf84:	2200      	movs	r2, #0
 800cf86:	701a      	strb	r2, [r3, #0]
 800cf88:	e0b2      	b.n	800d0f0 <UART_SetConfig+0x390>
 800cf8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	4a4d      	ldr	r2, [pc, #308]	@ (800d0c4 <UART_SetConfig+0x364>)
 800cf90:	4293      	cmp	r3, r2
 800cf92:	d106      	bne.n	800cfa2 <UART_SetConfig+0x242>
 800cf94:	231b      	movs	r3, #27
 800cf96:	2220      	movs	r2, #32
 800cf98:	189b      	adds	r3, r3, r2
 800cf9a:	19db      	adds	r3, r3, r7
 800cf9c:	2200      	movs	r2, #0
 800cf9e:	701a      	strb	r2, [r3, #0]
 800cfa0:	e0a6      	b.n	800d0f0 <UART_SetConfig+0x390>
 800cfa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	4a3e      	ldr	r2, [pc, #248]	@ (800d0a0 <UART_SetConfig+0x340>)
 800cfa8:	4293      	cmp	r3, r2
 800cfaa:	d13e      	bne.n	800d02a <UART_SetConfig+0x2ca>
 800cfac:	4b40      	ldr	r3, [pc, #256]	@ (800d0b0 <UART_SetConfig+0x350>)
 800cfae:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cfb0:	23c0      	movs	r3, #192	@ 0xc0
 800cfb2:	011b      	lsls	r3, r3, #4
 800cfb4:	4013      	ands	r3, r2
 800cfb6:	22c0      	movs	r2, #192	@ 0xc0
 800cfb8:	0112      	lsls	r2, r2, #4
 800cfba:	4293      	cmp	r3, r2
 800cfbc:	d027      	beq.n	800d00e <UART_SetConfig+0x2ae>
 800cfbe:	22c0      	movs	r2, #192	@ 0xc0
 800cfc0:	0112      	lsls	r2, r2, #4
 800cfc2:	4293      	cmp	r3, r2
 800cfc4:	d82a      	bhi.n	800d01c <UART_SetConfig+0x2bc>
 800cfc6:	2280      	movs	r2, #128	@ 0x80
 800cfc8:	0112      	lsls	r2, r2, #4
 800cfca:	4293      	cmp	r3, r2
 800cfcc:	d011      	beq.n	800cff2 <UART_SetConfig+0x292>
 800cfce:	2280      	movs	r2, #128	@ 0x80
 800cfd0:	0112      	lsls	r2, r2, #4
 800cfd2:	4293      	cmp	r3, r2
 800cfd4:	d822      	bhi.n	800d01c <UART_SetConfig+0x2bc>
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d004      	beq.n	800cfe4 <UART_SetConfig+0x284>
 800cfda:	2280      	movs	r2, #128	@ 0x80
 800cfdc:	00d2      	lsls	r2, r2, #3
 800cfde:	4293      	cmp	r3, r2
 800cfe0:	d00e      	beq.n	800d000 <UART_SetConfig+0x2a0>
 800cfe2:	e01b      	b.n	800d01c <UART_SetConfig+0x2bc>
 800cfe4:	231b      	movs	r3, #27
 800cfe6:	2220      	movs	r2, #32
 800cfe8:	189b      	adds	r3, r3, r2
 800cfea:	19db      	adds	r3, r3, r7
 800cfec:	2200      	movs	r2, #0
 800cfee:	701a      	strb	r2, [r3, #0]
 800cff0:	e07e      	b.n	800d0f0 <UART_SetConfig+0x390>
 800cff2:	231b      	movs	r3, #27
 800cff4:	2220      	movs	r2, #32
 800cff6:	189b      	adds	r3, r3, r2
 800cff8:	19db      	adds	r3, r3, r7
 800cffa:	2202      	movs	r2, #2
 800cffc:	701a      	strb	r2, [r3, #0]
 800cffe:	e077      	b.n	800d0f0 <UART_SetConfig+0x390>
 800d000:	231b      	movs	r3, #27
 800d002:	2220      	movs	r2, #32
 800d004:	189b      	adds	r3, r3, r2
 800d006:	19db      	adds	r3, r3, r7
 800d008:	2204      	movs	r2, #4
 800d00a:	701a      	strb	r2, [r3, #0]
 800d00c:	e070      	b.n	800d0f0 <UART_SetConfig+0x390>
 800d00e:	231b      	movs	r3, #27
 800d010:	2220      	movs	r2, #32
 800d012:	189b      	adds	r3, r3, r2
 800d014:	19db      	adds	r3, r3, r7
 800d016:	2208      	movs	r2, #8
 800d018:	701a      	strb	r2, [r3, #0]
 800d01a:	e069      	b.n	800d0f0 <UART_SetConfig+0x390>
 800d01c:	231b      	movs	r3, #27
 800d01e:	2220      	movs	r2, #32
 800d020:	189b      	adds	r3, r3, r2
 800d022:	19db      	adds	r3, r3, r7
 800d024:	2210      	movs	r2, #16
 800d026:	701a      	strb	r2, [r3, #0]
 800d028:	e062      	b.n	800d0f0 <UART_SetConfig+0x390>
 800d02a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	4a1d      	ldr	r2, [pc, #116]	@ (800d0a4 <UART_SetConfig+0x344>)
 800d030:	4293      	cmp	r3, r2
 800d032:	d157      	bne.n	800d0e4 <UART_SetConfig+0x384>
 800d034:	4b1e      	ldr	r3, [pc, #120]	@ (800d0b0 <UART_SetConfig+0x350>)
 800d036:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d038:	23c0      	movs	r3, #192	@ 0xc0
 800d03a:	009b      	lsls	r3, r3, #2
 800d03c:	4013      	ands	r3, r2
 800d03e:	22c0      	movs	r2, #192	@ 0xc0
 800d040:	0092      	lsls	r2, r2, #2
 800d042:	4293      	cmp	r3, r2
 800d044:	d040      	beq.n	800d0c8 <UART_SetConfig+0x368>
 800d046:	22c0      	movs	r2, #192	@ 0xc0
 800d048:	0092      	lsls	r2, r2, #2
 800d04a:	4293      	cmp	r3, r2
 800d04c:	d843      	bhi.n	800d0d6 <UART_SetConfig+0x376>
 800d04e:	2280      	movs	r2, #128	@ 0x80
 800d050:	0092      	lsls	r2, r2, #2
 800d052:	4293      	cmp	r3, r2
 800d054:	d011      	beq.n	800d07a <UART_SetConfig+0x31a>
 800d056:	2280      	movs	r2, #128	@ 0x80
 800d058:	0092      	lsls	r2, r2, #2
 800d05a:	4293      	cmp	r3, r2
 800d05c:	d83b      	bhi.n	800d0d6 <UART_SetConfig+0x376>
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d004      	beq.n	800d06c <UART_SetConfig+0x30c>
 800d062:	2280      	movs	r2, #128	@ 0x80
 800d064:	0052      	lsls	r2, r2, #1
 800d066:	4293      	cmp	r3, r2
 800d068:	d00e      	beq.n	800d088 <UART_SetConfig+0x328>
 800d06a:	e034      	b.n	800d0d6 <UART_SetConfig+0x376>
 800d06c:	231b      	movs	r3, #27
 800d06e:	2220      	movs	r2, #32
 800d070:	189b      	adds	r3, r3, r2
 800d072:	19db      	adds	r3, r3, r7
 800d074:	2200      	movs	r2, #0
 800d076:	701a      	strb	r2, [r3, #0]
 800d078:	e03a      	b.n	800d0f0 <UART_SetConfig+0x390>
 800d07a:	231b      	movs	r3, #27
 800d07c:	2220      	movs	r2, #32
 800d07e:	189b      	adds	r3, r3, r2
 800d080:	19db      	adds	r3, r3, r7
 800d082:	2202      	movs	r2, #2
 800d084:	701a      	strb	r2, [r3, #0]
 800d086:	e033      	b.n	800d0f0 <UART_SetConfig+0x390>
 800d088:	231b      	movs	r3, #27
 800d08a:	2220      	movs	r2, #32
 800d08c:	189b      	adds	r3, r3, r2
 800d08e:	19db      	adds	r3, r3, r7
 800d090:	2204      	movs	r2, #4
 800d092:	701a      	strb	r2, [r3, #0]
 800d094:	e02c      	b.n	800d0f0 <UART_SetConfig+0x390>
 800d096:	46c0      	nop			@ (mov r8, r8)
 800d098:	cfff69f3 	.word	0xcfff69f3
 800d09c:	ffffcfff 	.word	0xffffcfff
 800d0a0:	40008000 	.word	0x40008000
 800d0a4:	40008400 	.word	0x40008400
 800d0a8:	11fff4ff 	.word	0x11fff4ff
 800d0ac:	40013800 	.word	0x40013800
 800d0b0:	40021000 	.word	0x40021000
 800d0b4:	40004400 	.word	0x40004400
 800d0b8:	40004800 	.word	0x40004800
 800d0bc:	40004c00 	.word	0x40004c00
 800d0c0:	40005000 	.word	0x40005000
 800d0c4:	40013c00 	.word	0x40013c00
 800d0c8:	231b      	movs	r3, #27
 800d0ca:	2220      	movs	r2, #32
 800d0cc:	189b      	adds	r3, r3, r2
 800d0ce:	19db      	adds	r3, r3, r7
 800d0d0:	2208      	movs	r2, #8
 800d0d2:	701a      	strb	r2, [r3, #0]
 800d0d4:	e00c      	b.n	800d0f0 <UART_SetConfig+0x390>
 800d0d6:	231b      	movs	r3, #27
 800d0d8:	2220      	movs	r2, #32
 800d0da:	189b      	adds	r3, r3, r2
 800d0dc:	19db      	adds	r3, r3, r7
 800d0de:	2210      	movs	r2, #16
 800d0e0:	701a      	strb	r2, [r3, #0]
 800d0e2:	e005      	b.n	800d0f0 <UART_SetConfig+0x390>
 800d0e4:	231b      	movs	r3, #27
 800d0e6:	2220      	movs	r2, #32
 800d0e8:	189b      	adds	r3, r3, r2
 800d0ea:	19db      	adds	r3, r3, r7
 800d0ec:	2210      	movs	r2, #16
 800d0ee:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d0f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	4ac1      	ldr	r2, [pc, #772]	@ (800d3fc <UART_SetConfig+0x69c>)
 800d0f6:	4293      	cmp	r3, r2
 800d0f8:	d005      	beq.n	800d106 <UART_SetConfig+0x3a6>
 800d0fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	4ac0      	ldr	r2, [pc, #768]	@ (800d400 <UART_SetConfig+0x6a0>)
 800d100:	4293      	cmp	r3, r2
 800d102:	d000      	beq.n	800d106 <UART_SetConfig+0x3a6>
 800d104:	e093      	b.n	800d22e <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d106:	231b      	movs	r3, #27
 800d108:	2220      	movs	r2, #32
 800d10a:	189b      	adds	r3, r3, r2
 800d10c:	19db      	adds	r3, r3, r7
 800d10e:	781b      	ldrb	r3, [r3, #0]
 800d110:	2b08      	cmp	r3, #8
 800d112:	d015      	beq.n	800d140 <UART_SetConfig+0x3e0>
 800d114:	dc18      	bgt.n	800d148 <UART_SetConfig+0x3e8>
 800d116:	2b04      	cmp	r3, #4
 800d118:	d00d      	beq.n	800d136 <UART_SetConfig+0x3d6>
 800d11a:	dc15      	bgt.n	800d148 <UART_SetConfig+0x3e8>
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d002      	beq.n	800d126 <UART_SetConfig+0x3c6>
 800d120:	2b02      	cmp	r3, #2
 800d122:	d005      	beq.n	800d130 <UART_SetConfig+0x3d0>
 800d124:	e010      	b.n	800d148 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d126:	f7fd fdbd 	bl	800aca4 <HAL_RCC_GetPCLK1Freq>
 800d12a:	0003      	movs	r3, r0
 800d12c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d12e:	e014      	b.n	800d15a <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d130:	4bb4      	ldr	r3, [pc, #720]	@ (800d404 <UART_SetConfig+0x6a4>)
 800d132:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d134:	e011      	b.n	800d15a <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d136:	f7fd fd29 	bl	800ab8c <HAL_RCC_GetSysClockFreq>
 800d13a:	0003      	movs	r3, r0
 800d13c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d13e:	e00c      	b.n	800d15a <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d140:	2380      	movs	r3, #128	@ 0x80
 800d142:	021b      	lsls	r3, r3, #8
 800d144:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d146:	e008      	b.n	800d15a <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 800d148:	2300      	movs	r3, #0
 800d14a:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800d14c:	231a      	movs	r3, #26
 800d14e:	2220      	movs	r2, #32
 800d150:	189b      	adds	r3, r3, r2
 800d152:	19db      	adds	r3, r3, r7
 800d154:	2201      	movs	r2, #1
 800d156:	701a      	strb	r2, [r3, #0]
        break;
 800d158:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d15a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d100      	bne.n	800d162 <UART_SetConfig+0x402>
 800d160:	e135      	b.n	800d3ce <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d164:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d166:	4ba8      	ldr	r3, [pc, #672]	@ (800d408 <UART_SetConfig+0x6a8>)
 800d168:	0052      	lsls	r2, r2, #1
 800d16a:	5ad3      	ldrh	r3, [r2, r3]
 800d16c:	0019      	movs	r1, r3
 800d16e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800d170:	f7f2 fff0 	bl	8000154 <__udivsi3>
 800d174:	0003      	movs	r3, r0
 800d176:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d17a:	685a      	ldr	r2, [r3, #4]
 800d17c:	0013      	movs	r3, r2
 800d17e:	005b      	lsls	r3, r3, #1
 800d180:	189b      	adds	r3, r3, r2
 800d182:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d184:	429a      	cmp	r2, r3
 800d186:	d305      	bcc.n	800d194 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d18a:	685b      	ldr	r3, [r3, #4]
 800d18c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d18e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d190:	429a      	cmp	r2, r3
 800d192:	d906      	bls.n	800d1a2 <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 800d194:	231a      	movs	r3, #26
 800d196:	2220      	movs	r2, #32
 800d198:	189b      	adds	r3, r3, r2
 800d19a:	19db      	adds	r3, r3, r7
 800d19c:	2201      	movs	r2, #1
 800d19e:	701a      	strb	r2, [r3, #0]
 800d1a0:	e044      	b.n	800d22c <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d1a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1a4:	61bb      	str	r3, [r7, #24]
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	61fb      	str	r3, [r7, #28]
 800d1aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d1ae:	4b96      	ldr	r3, [pc, #600]	@ (800d408 <UART_SetConfig+0x6a8>)
 800d1b0:	0052      	lsls	r2, r2, #1
 800d1b2:	5ad3      	ldrh	r3, [r2, r3]
 800d1b4:	613b      	str	r3, [r7, #16]
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	617b      	str	r3, [r7, #20]
 800d1ba:	693a      	ldr	r2, [r7, #16]
 800d1bc:	697b      	ldr	r3, [r7, #20]
 800d1be:	69b8      	ldr	r0, [r7, #24]
 800d1c0:	69f9      	ldr	r1, [r7, #28]
 800d1c2:	f7f3 f9b5 	bl	8000530 <__aeabi_uldivmod>
 800d1c6:	0002      	movs	r2, r0
 800d1c8:	000b      	movs	r3, r1
 800d1ca:	0e11      	lsrs	r1, r2, #24
 800d1cc:	021d      	lsls	r5, r3, #8
 800d1ce:	430d      	orrs	r5, r1
 800d1d0:	0214      	lsls	r4, r2, #8
 800d1d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1d4:	685b      	ldr	r3, [r3, #4]
 800d1d6:	085b      	lsrs	r3, r3, #1
 800d1d8:	60bb      	str	r3, [r7, #8]
 800d1da:	2300      	movs	r3, #0
 800d1dc:	60fb      	str	r3, [r7, #12]
 800d1de:	68b8      	ldr	r0, [r7, #8]
 800d1e0:	68f9      	ldr	r1, [r7, #12]
 800d1e2:	1900      	adds	r0, r0, r4
 800d1e4:	4169      	adcs	r1, r5
 800d1e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1e8:	685b      	ldr	r3, [r3, #4]
 800d1ea:	603b      	str	r3, [r7, #0]
 800d1ec:	2300      	movs	r3, #0
 800d1ee:	607b      	str	r3, [r7, #4]
 800d1f0:	683a      	ldr	r2, [r7, #0]
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	f7f3 f99c 	bl	8000530 <__aeabi_uldivmod>
 800d1f8:	0002      	movs	r2, r0
 800d1fa:	000b      	movs	r3, r1
 800d1fc:	0013      	movs	r3, r2
 800d1fe:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d200:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d202:	23c0      	movs	r3, #192	@ 0xc0
 800d204:	009b      	lsls	r3, r3, #2
 800d206:	429a      	cmp	r2, r3
 800d208:	d309      	bcc.n	800d21e <UART_SetConfig+0x4be>
 800d20a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d20c:	2380      	movs	r3, #128	@ 0x80
 800d20e:	035b      	lsls	r3, r3, #13
 800d210:	429a      	cmp	r2, r3
 800d212:	d204      	bcs.n	800d21e <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 800d214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d21a:	60da      	str	r2, [r3, #12]
 800d21c:	e006      	b.n	800d22c <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 800d21e:	231a      	movs	r3, #26
 800d220:	2220      	movs	r2, #32
 800d222:	189b      	adds	r3, r3, r2
 800d224:	19db      	adds	r3, r3, r7
 800d226:	2201      	movs	r2, #1
 800d228:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 800d22a:	e0d0      	b.n	800d3ce <UART_SetConfig+0x66e>
 800d22c:	e0cf      	b.n	800d3ce <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d22e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d230:	69da      	ldr	r2, [r3, #28]
 800d232:	2380      	movs	r3, #128	@ 0x80
 800d234:	021b      	lsls	r3, r3, #8
 800d236:	429a      	cmp	r2, r3
 800d238:	d000      	beq.n	800d23c <UART_SetConfig+0x4dc>
 800d23a:	e070      	b.n	800d31e <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 800d23c:	231b      	movs	r3, #27
 800d23e:	2220      	movs	r2, #32
 800d240:	189b      	adds	r3, r3, r2
 800d242:	19db      	adds	r3, r3, r7
 800d244:	781b      	ldrb	r3, [r3, #0]
 800d246:	2b08      	cmp	r3, #8
 800d248:	d015      	beq.n	800d276 <UART_SetConfig+0x516>
 800d24a:	dc18      	bgt.n	800d27e <UART_SetConfig+0x51e>
 800d24c:	2b04      	cmp	r3, #4
 800d24e:	d00d      	beq.n	800d26c <UART_SetConfig+0x50c>
 800d250:	dc15      	bgt.n	800d27e <UART_SetConfig+0x51e>
 800d252:	2b00      	cmp	r3, #0
 800d254:	d002      	beq.n	800d25c <UART_SetConfig+0x4fc>
 800d256:	2b02      	cmp	r3, #2
 800d258:	d005      	beq.n	800d266 <UART_SetConfig+0x506>
 800d25a:	e010      	b.n	800d27e <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d25c:	f7fd fd22 	bl	800aca4 <HAL_RCC_GetPCLK1Freq>
 800d260:	0003      	movs	r3, r0
 800d262:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d264:	e014      	b.n	800d290 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d266:	4b67      	ldr	r3, [pc, #412]	@ (800d404 <UART_SetConfig+0x6a4>)
 800d268:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d26a:	e011      	b.n	800d290 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d26c:	f7fd fc8e 	bl	800ab8c <HAL_RCC_GetSysClockFreq>
 800d270:	0003      	movs	r3, r0
 800d272:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d274:	e00c      	b.n	800d290 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d276:	2380      	movs	r3, #128	@ 0x80
 800d278:	021b      	lsls	r3, r3, #8
 800d27a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d27c:	e008      	b.n	800d290 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 800d27e:	2300      	movs	r3, #0
 800d280:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800d282:	231a      	movs	r3, #26
 800d284:	2220      	movs	r2, #32
 800d286:	189b      	adds	r3, r3, r2
 800d288:	19db      	adds	r3, r3, r7
 800d28a:	2201      	movs	r2, #1
 800d28c:	701a      	strb	r2, [r3, #0]
        break;
 800d28e:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d290:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d292:	2b00      	cmp	r3, #0
 800d294:	d100      	bne.n	800d298 <UART_SetConfig+0x538>
 800d296:	e09a      	b.n	800d3ce <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d29a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d29c:	4b5a      	ldr	r3, [pc, #360]	@ (800d408 <UART_SetConfig+0x6a8>)
 800d29e:	0052      	lsls	r2, r2, #1
 800d2a0:	5ad3      	ldrh	r3, [r2, r3]
 800d2a2:	0019      	movs	r1, r3
 800d2a4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800d2a6:	f7f2 ff55 	bl	8000154 <__udivsi3>
 800d2aa:	0003      	movs	r3, r0
 800d2ac:	005a      	lsls	r2, r3, #1
 800d2ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2b0:	685b      	ldr	r3, [r3, #4]
 800d2b2:	085b      	lsrs	r3, r3, #1
 800d2b4:	18d2      	adds	r2, r2, r3
 800d2b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2b8:	685b      	ldr	r3, [r3, #4]
 800d2ba:	0019      	movs	r1, r3
 800d2bc:	0010      	movs	r0, r2
 800d2be:	f7f2 ff49 	bl	8000154 <__udivsi3>
 800d2c2:	0003      	movs	r3, r0
 800d2c4:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d2c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2c8:	2b0f      	cmp	r3, #15
 800d2ca:	d921      	bls.n	800d310 <UART_SetConfig+0x5b0>
 800d2cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d2ce:	2380      	movs	r3, #128	@ 0x80
 800d2d0:	025b      	lsls	r3, r3, #9
 800d2d2:	429a      	cmp	r2, r3
 800d2d4:	d21c      	bcs.n	800d310 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d2d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2d8:	b29a      	uxth	r2, r3
 800d2da:	200e      	movs	r0, #14
 800d2dc:	2420      	movs	r4, #32
 800d2de:	1903      	adds	r3, r0, r4
 800d2e0:	19db      	adds	r3, r3, r7
 800d2e2:	210f      	movs	r1, #15
 800d2e4:	438a      	bics	r2, r1
 800d2e6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d2e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2ea:	085b      	lsrs	r3, r3, #1
 800d2ec:	b29b      	uxth	r3, r3
 800d2ee:	2207      	movs	r2, #7
 800d2f0:	4013      	ands	r3, r2
 800d2f2:	b299      	uxth	r1, r3
 800d2f4:	1903      	adds	r3, r0, r4
 800d2f6:	19db      	adds	r3, r3, r7
 800d2f8:	1902      	adds	r2, r0, r4
 800d2fa:	19d2      	adds	r2, r2, r7
 800d2fc:	8812      	ldrh	r2, [r2, #0]
 800d2fe:	430a      	orrs	r2, r1
 800d300:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800d302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	1902      	adds	r2, r0, r4
 800d308:	19d2      	adds	r2, r2, r7
 800d30a:	8812      	ldrh	r2, [r2, #0]
 800d30c:	60da      	str	r2, [r3, #12]
 800d30e:	e05e      	b.n	800d3ce <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 800d310:	231a      	movs	r3, #26
 800d312:	2220      	movs	r2, #32
 800d314:	189b      	adds	r3, r3, r2
 800d316:	19db      	adds	r3, r3, r7
 800d318:	2201      	movs	r2, #1
 800d31a:	701a      	strb	r2, [r3, #0]
 800d31c:	e057      	b.n	800d3ce <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d31e:	231b      	movs	r3, #27
 800d320:	2220      	movs	r2, #32
 800d322:	189b      	adds	r3, r3, r2
 800d324:	19db      	adds	r3, r3, r7
 800d326:	781b      	ldrb	r3, [r3, #0]
 800d328:	2b08      	cmp	r3, #8
 800d32a:	d015      	beq.n	800d358 <UART_SetConfig+0x5f8>
 800d32c:	dc18      	bgt.n	800d360 <UART_SetConfig+0x600>
 800d32e:	2b04      	cmp	r3, #4
 800d330:	d00d      	beq.n	800d34e <UART_SetConfig+0x5ee>
 800d332:	dc15      	bgt.n	800d360 <UART_SetConfig+0x600>
 800d334:	2b00      	cmp	r3, #0
 800d336:	d002      	beq.n	800d33e <UART_SetConfig+0x5de>
 800d338:	2b02      	cmp	r3, #2
 800d33a:	d005      	beq.n	800d348 <UART_SetConfig+0x5e8>
 800d33c:	e010      	b.n	800d360 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d33e:	f7fd fcb1 	bl	800aca4 <HAL_RCC_GetPCLK1Freq>
 800d342:	0003      	movs	r3, r0
 800d344:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d346:	e014      	b.n	800d372 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d348:	4b2e      	ldr	r3, [pc, #184]	@ (800d404 <UART_SetConfig+0x6a4>)
 800d34a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d34c:	e011      	b.n	800d372 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d34e:	f7fd fc1d 	bl	800ab8c <HAL_RCC_GetSysClockFreq>
 800d352:	0003      	movs	r3, r0
 800d354:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d356:	e00c      	b.n	800d372 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d358:	2380      	movs	r3, #128	@ 0x80
 800d35a:	021b      	lsls	r3, r3, #8
 800d35c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d35e:	e008      	b.n	800d372 <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 800d360:	2300      	movs	r3, #0
 800d362:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800d364:	231a      	movs	r3, #26
 800d366:	2220      	movs	r2, #32
 800d368:	189b      	adds	r3, r3, r2
 800d36a:	19db      	adds	r3, r3, r7
 800d36c:	2201      	movs	r2, #1
 800d36e:	701a      	strb	r2, [r3, #0]
        break;
 800d370:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800d372:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d374:	2b00      	cmp	r3, #0
 800d376:	d02a      	beq.n	800d3ce <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d37a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d37c:	4b22      	ldr	r3, [pc, #136]	@ (800d408 <UART_SetConfig+0x6a8>)
 800d37e:	0052      	lsls	r2, r2, #1
 800d380:	5ad3      	ldrh	r3, [r2, r3]
 800d382:	0019      	movs	r1, r3
 800d384:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800d386:	f7f2 fee5 	bl	8000154 <__udivsi3>
 800d38a:	0003      	movs	r3, r0
 800d38c:	001a      	movs	r2, r3
 800d38e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d390:	685b      	ldr	r3, [r3, #4]
 800d392:	085b      	lsrs	r3, r3, #1
 800d394:	18d2      	adds	r2, r2, r3
 800d396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d398:	685b      	ldr	r3, [r3, #4]
 800d39a:	0019      	movs	r1, r3
 800d39c:	0010      	movs	r0, r2
 800d39e:	f7f2 fed9 	bl	8000154 <__udivsi3>
 800d3a2:	0003      	movs	r3, r0
 800d3a4:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d3a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3a8:	2b0f      	cmp	r3, #15
 800d3aa:	d90a      	bls.n	800d3c2 <UART_SetConfig+0x662>
 800d3ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d3ae:	2380      	movs	r3, #128	@ 0x80
 800d3b0:	025b      	lsls	r3, r3, #9
 800d3b2:	429a      	cmp	r2, r3
 800d3b4:	d205      	bcs.n	800d3c2 <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d3b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3b8:	b29a      	uxth	r2, r3
 800d3ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	60da      	str	r2, [r3, #12]
 800d3c0:	e005      	b.n	800d3ce <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 800d3c2:	231a      	movs	r3, #26
 800d3c4:	2220      	movs	r2, #32
 800d3c6:	189b      	adds	r3, r3, r2
 800d3c8:	19db      	adds	r3, r3, r7
 800d3ca:	2201      	movs	r2, #1
 800d3cc:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d3ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3d0:	226a      	movs	r2, #106	@ 0x6a
 800d3d2:	2101      	movs	r1, #1
 800d3d4:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800d3d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3d8:	2268      	movs	r2, #104	@ 0x68
 800d3da:	2101      	movs	r1, #1
 800d3dc:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d3de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3e0:	2200      	movs	r2, #0
 800d3e2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d3e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3e6:	2200      	movs	r2, #0
 800d3e8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d3ea:	231a      	movs	r3, #26
 800d3ec:	2220      	movs	r2, #32
 800d3ee:	189b      	adds	r3, r3, r2
 800d3f0:	19db      	adds	r3, r3, r7
 800d3f2:	781b      	ldrb	r3, [r3, #0]
}
 800d3f4:	0018      	movs	r0, r3
 800d3f6:	46bd      	mov	sp, r7
 800d3f8:	b010      	add	sp, #64	@ 0x40
 800d3fa:	bdb0      	pop	{r4, r5, r7, pc}
 800d3fc:	40008000 	.word	0x40008000
 800d400:	40008400 	.word	0x40008400
 800d404:	00f42400 	.word	0x00f42400
 800d408:	0801becc 	.word	0x0801becc

0800d40c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d40c:	b580      	push	{r7, lr}
 800d40e:	b082      	sub	sp, #8
 800d410:	af00      	add	r7, sp, #0
 800d412:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d418:	2208      	movs	r2, #8
 800d41a:	4013      	ands	r3, r2
 800d41c:	d00b      	beq.n	800d436 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	685b      	ldr	r3, [r3, #4]
 800d424:	4a4a      	ldr	r2, [pc, #296]	@ (800d550 <UART_AdvFeatureConfig+0x144>)
 800d426:	4013      	ands	r3, r2
 800d428:	0019      	movs	r1, r3
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	430a      	orrs	r2, r1
 800d434:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d43a:	2201      	movs	r2, #1
 800d43c:	4013      	ands	r3, r2
 800d43e:	d00b      	beq.n	800d458 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	685b      	ldr	r3, [r3, #4]
 800d446:	4a43      	ldr	r2, [pc, #268]	@ (800d554 <UART_AdvFeatureConfig+0x148>)
 800d448:	4013      	ands	r3, r2
 800d44a:	0019      	movs	r1, r3
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	430a      	orrs	r2, r1
 800d456:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d45c:	2202      	movs	r2, #2
 800d45e:	4013      	ands	r3, r2
 800d460:	d00b      	beq.n	800d47a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	685b      	ldr	r3, [r3, #4]
 800d468:	4a3b      	ldr	r2, [pc, #236]	@ (800d558 <UART_AdvFeatureConfig+0x14c>)
 800d46a:	4013      	ands	r3, r2
 800d46c:	0019      	movs	r1, r3
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	430a      	orrs	r2, r1
 800d478:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d47e:	2204      	movs	r2, #4
 800d480:	4013      	ands	r3, r2
 800d482:	d00b      	beq.n	800d49c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	685b      	ldr	r3, [r3, #4]
 800d48a:	4a34      	ldr	r2, [pc, #208]	@ (800d55c <UART_AdvFeatureConfig+0x150>)
 800d48c:	4013      	ands	r3, r2
 800d48e:	0019      	movs	r1, r3
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	430a      	orrs	r2, r1
 800d49a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d4a0:	2210      	movs	r2, #16
 800d4a2:	4013      	ands	r3, r2
 800d4a4:	d00b      	beq.n	800d4be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	689b      	ldr	r3, [r3, #8]
 800d4ac:	4a2c      	ldr	r2, [pc, #176]	@ (800d560 <UART_AdvFeatureConfig+0x154>)
 800d4ae:	4013      	ands	r3, r2
 800d4b0:	0019      	movs	r1, r3
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	430a      	orrs	r2, r1
 800d4bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d4c2:	2220      	movs	r2, #32
 800d4c4:	4013      	ands	r3, r2
 800d4c6:	d00b      	beq.n	800d4e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	689b      	ldr	r3, [r3, #8]
 800d4ce:	4a25      	ldr	r2, [pc, #148]	@ (800d564 <UART_AdvFeatureConfig+0x158>)
 800d4d0:	4013      	ands	r3, r2
 800d4d2:	0019      	movs	r1, r3
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	430a      	orrs	r2, r1
 800d4de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d4e4:	2240      	movs	r2, #64	@ 0x40
 800d4e6:	4013      	ands	r3, r2
 800d4e8:	d01d      	beq.n	800d526 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	685b      	ldr	r3, [r3, #4]
 800d4f0:	4a1d      	ldr	r2, [pc, #116]	@ (800d568 <UART_AdvFeatureConfig+0x15c>)
 800d4f2:	4013      	ands	r3, r2
 800d4f4:	0019      	movs	r1, r3
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	430a      	orrs	r2, r1
 800d500:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d506:	2380      	movs	r3, #128	@ 0x80
 800d508:	035b      	lsls	r3, r3, #13
 800d50a:	429a      	cmp	r2, r3
 800d50c:	d10b      	bne.n	800d526 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	685b      	ldr	r3, [r3, #4]
 800d514:	4a15      	ldr	r2, [pc, #84]	@ (800d56c <UART_AdvFeatureConfig+0x160>)
 800d516:	4013      	ands	r3, r2
 800d518:	0019      	movs	r1, r3
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	430a      	orrs	r2, r1
 800d524:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d52a:	2280      	movs	r2, #128	@ 0x80
 800d52c:	4013      	ands	r3, r2
 800d52e:	d00b      	beq.n	800d548 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	685b      	ldr	r3, [r3, #4]
 800d536:	4a0e      	ldr	r2, [pc, #56]	@ (800d570 <UART_AdvFeatureConfig+0x164>)
 800d538:	4013      	ands	r3, r2
 800d53a:	0019      	movs	r1, r3
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	430a      	orrs	r2, r1
 800d546:	605a      	str	r2, [r3, #4]
  }
}
 800d548:	46c0      	nop			@ (mov r8, r8)
 800d54a:	46bd      	mov	sp, r7
 800d54c:	b002      	add	sp, #8
 800d54e:	bd80      	pop	{r7, pc}
 800d550:	ffff7fff 	.word	0xffff7fff
 800d554:	fffdffff 	.word	0xfffdffff
 800d558:	fffeffff 	.word	0xfffeffff
 800d55c:	fffbffff 	.word	0xfffbffff
 800d560:	ffffefff 	.word	0xffffefff
 800d564:	ffffdfff 	.word	0xffffdfff
 800d568:	ffefffff 	.word	0xffefffff
 800d56c:	ff9fffff 	.word	0xff9fffff
 800d570:	fff7ffff 	.word	0xfff7ffff

0800d574 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d574:	b580      	push	{r7, lr}
 800d576:	b092      	sub	sp, #72	@ 0x48
 800d578:	af02      	add	r7, sp, #8
 800d57a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	2290      	movs	r2, #144	@ 0x90
 800d580:	2100      	movs	r1, #0
 800d582:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d584:	f7fb fb5c 	bl	8008c40 <HAL_GetTick>
 800d588:	0003      	movs	r3, r0
 800d58a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	2208      	movs	r2, #8
 800d594:	4013      	ands	r3, r2
 800d596:	2b08      	cmp	r3, #8
 800d598:	d12d      	bne.n	800d5f6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d59a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d59c:	2280      	movs	r2, #128	@ 0x80
 800d59e:	0391      	lsls	r1, r2, #14
 800d5a0:	6878      	ldr	r0, [r7, #4]
 800d5a2:	4a47      	ldr	r2, [pc, #284]	@ (800d6c0 <UART_CheckIdleState+0x14c>)
 800d5a4:	9200      	str	r2, [sp, #0]
 800d5a6:	2200      	movs	r2, #0
 800d5a8:	f000 f88e 	bl	800d6c8 <UART_WaitOnFlagUntilTimeout>
 800d5ac:	1e03      	subs	r3, r0, #0
 800d5ae:	d022      	beq.n	800d5f6 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d5b0:	f3ef 8310 	mrs	r3, PRIMASK
 800d5b4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800d5b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d5b8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d5ba:	2301      	movs	r3, #1
 800d5bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d5be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5c0:	f383 8810 	msr	PRIMASK, r3
}
 800d5c4:	46c0      	nop			@ (mov r8, r8)
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	681a      	ldr	r2, [r3, #0]
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	2180      	movs	r1, #128	@ 0x80
 800d5d2:	438a      	bics	r2, r1
 800d5d4:	601a      	str	r2, [r3, #0]
 800d5d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d5da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5dc:	f383 8810 	msr	PRIMASK, r3
}
 800d5e0:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	2288      	movs	r2, #136	@ 0x88
 800d5e6:	2120      	movs	r1, #32
 800d5e8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	2284      	movs	r2, #132	@ 0x84
 800d5ee:	2100      	movs	r1, #0
 800d5f0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d5f2:	2303      	movs	r3, #3
 800d5f4:	e060      	b.n	800d6b8 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	2204      	movs	r2, #4
 800d5fe:	4013      	ands	r3, r2
 800d600:	2b04      	cmp	r3, #4
 800d602:	d146      	bne.n	800d692 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d604:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d606:	2280      	movs	r2, #128	@ 0x80
 800d608:	03d1      	lsls	r1, r2, #15
 800d60a:	6878      	ldr	r0, [r7, #4]
 800d60c:	4a2c      	ldr	r2, [pc, #176]	@ (800d6c0 <UART_CheckIdleState+0x14c>)
 800d60e:	9200      	str	r2, [sp, #0]
 800d610:	2200      	movs	r2, #0
 800d612:	f000 f859 	bl	800d6c8 <UART_WaitOnFlagUntilTimeout>
 800d616:	1e03      	subs	r3, r0, #0
 800d618:	d03b      	beq.n	800d692 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d61a:	f3ef 8310 	mrs	r3, PRIMASK
 800d61e:	60fb      	str	r3, [r7, #12]
  return(result);
 800d620:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d622:	637b      	str	r3, [r7, #52]	@ 0x34
 800d624:	2301      	movs	r3, #1
 800d626:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d628:	693b      	ldr	r3, [r7, #16]
 800d62a:	f383 8810 	msr	PRIMASK, r3
}
 800d62e:	46c0      	nop			@ (mov r8, r8)
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	681a      	ldr	r2, [r3, #0]
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	4922      	ldr	r1, [pc, #136]	@ (800d6c4 <UART_CheckIdleState+0x150>)
 800d63c:	400a      	ands	r2, r1
 800d63e:	601a      	str	r2, [r3, #0]
 800d640:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d642:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d644:	697b      	ldr	r3, [r7, #20]
 800d646:	f383 8810 	msr	PRIMASK, r3
}
 800d64a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d64c:	f3ef 8310 	mrs	r3, PRIMASK
 800d650:	61bb      	str	r3, [r7, #24]
  return(result);
 800d652:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d654:	633b      	str	r3, [r7, #48]	@ 0x30
 800d656:	2301      	movs	r3, #1
 800d658:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d65a:	69fb      	ldr	r3, [r7, #28]
 800d65c:	f383 8810 	msr	PRIMASK, r3
}
 800d660:	46c0      	nop			@ (mov r8, r8)
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	689a      	ldr	r2, [r3, #8]
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	2101      	movs	r1, #1
 800d66e:	438a      	bics	r2, r1
 800d670:	609a      	str	r2, [r3, #8]
 800d672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d674:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d676:	6a3b      	ldr	r3, [r7, #32]
 800d678:	f383 8810 	msr	PRIMASK, r3
}
 800d67c:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	228c      	movs	r2, #140	@ 0x8c
 800d682:	2120      	movs	r1, #32
 800d684:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	2284      	movs	r2, #132	@ 0x84
 800d68a:	2100      	movs	r1, #0
 800d68c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d68e:	2303      	movs	r3, #3
 800d690:	e012      	b.n	800d6b8 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	2288      	movs	r2, #136	@ 0x88
 800d696:	2120      	movs	r1, #32
 800d698:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	228c      	movs	r2, #140	@ 0x8c
 800d69e:	2120      	movs	r1, #32
 800d6a0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	2200      	movs	r2, #0
 800d6a6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	2200      	movs	r2, #0
 800d6ac:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	2284      	movs	r2, #132	@ 0x84
 800d6b2:	2100      	movs	r1, #0
 800d6b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800d6b6:	2300      	movs	r3, #0
}
 800d6b8:	0018      	movs	r0, r3
 800d6ba:	46bd      	mov	sp, r7
 800d6bc:	b010      	add	sp, #64	@ 0x40
 800d6be:	bd80      	pop	{r7, pc}
 800d6c0:	01ffffff 	.word	0x01ffffff
 800d6c4:	fffffedf 	.word	0xfffffedf

0800d6c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d6c8:	b580      	push	{r7, lr}
 800d6ca:	b084      	sub	sp, #16
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	60f8      	str	r0, [r7, #12]
 800d6d0:	60b9      	str	r1, [r7, #8]
 800d6d2:	603b      	str	r3, [r7, #0]
 800d6d4:	1dfb      	adds	r3, r7, #7
 800d6d6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d6d8:	e051      	b.n	800d77e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d6da:	69bb      	ldr	r3, [r7, #24]
 800d6dc:	3301      	adds	r3, #1
 800d6de:	d04e      	beq.n	800d77e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d6e0:	f7fb faae 	bl	8008c40 <HAL_GetTick>
 800d6e4:	0002      	movs	r2, r0
 800d6e6:	683b      	ldr	r3, [r7, #0]
 800d6e8:	1ad3      	subs	r3, r2, r3
 800d6ea:	69ba      	ldr	r2, [r7, #24]
 800d6ec:	429a      	cmp	r2, r3
 800d6ee:	d302      	bcc.n	800d6f6 <UART_WaitOnFlagUntilTimeout+0x2e>
 800d6f0:	69bb      	ldr	r3, [r7, #24]
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d101      	bne.n	800d6fa <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800d6f6:	2303      	movs	r3, #3
 800d6f8:	e051      	b.n	800d79e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	2204      	movs	r2, #4
 800d702:	4013      	ands	r3, r2
 800d704:	d03b      	beq.n	800d77e <UART_WaitOnFlagUntilTimeout+0xb6>
 800d706:	68bb      	ldr	r3, [r7, #8]
 800d708:	2b80      	cmp	r3, #128	@ 0x80
 800d70a:	d038      	beq.n	800d77e <UART_WaitOnFlagUntilTimeout+0xb6>
 800d70c:	68bb      	ldr	r3, [r7, #8]
 800d70e:	2b40      	cmp	r3, #64	@ 0x40
 800d710:	d035      	beq.n	800d77e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	69db      	ldr	r3, [r3, #28]
 800d718:	2208      	movs	r2, #8
 800d71a:	4013      	ands	r3, r2
 800d71c:	2b08      	cmp	r3, #8
 800d71e:	d111      	bne.n	800d744 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	2208      	movs	r2, #8
 800d726:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	0018      	movs	r0, r3
 800d72c:	f000 f83c 	bl	800d7a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	2290      	movs	r2, #144	@ 0x90
 800d734:	2108      	movs	r1, #8
 800d736:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	2284      	movs	r2, #132	@ 0x84
 800d73c:	2100      	movs	r1, #0
 800d73e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800d740:	2301      	movs	r3, #1
 800d742:	e02c      	b.n	800d79e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	69da      	ldr	r2, [r3, #28]
 800d74a:	2380      	movs	r3, #128	@ 0x80
 800d74c:	011b      	lsls	r3, r3, #4
 800d74e:	401a      	ands	r2, r3
 800d750:	2380      	movs	r3, #128	@ 0x80
 800d752:	011b      	lsls	r3, r3, #4
 800d754:	429a      	cmp	r2, r3
 800d756:	d112      	bne.n	800d77e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	2280      	movs	r2, #128	@ 0x80
 800d75e:	0112      	lsls	r2, r2, #4
 800d760:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	0018      	movs	r0, r3
 800d766:	f000 f81f 	bl	800d7a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	2290      	movs	r2, #144	@ 0x90
 800d76e:	2120      	movs	r1, #32
 800d770:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	2284      	movs	r2, #132	@ 0x84
 800d776:	2100      	movs	r1, #0
 800d778:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800d77a:	2303      	movs	r3, #3
 800d77c:	e00f      	b.n	800d79e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	69db      	ldr	r3, [r3, #28]
 800d784:	68ba      	ldr	r2, [r7, #8]
 800d786:	4013      	ands	r3, r2
 800d788:	68ba      	ldr	r2, [r7, #8]
 800d78a:	1ad3      	subs	r3, r2, r3
 800d78c:	425a      	negs	r2, r3
 800d78e:	4153      	adcs	r3, r2
 800d790:	b2db      	uxtb	r3, r3
 800d792:	001a      	movs	r2, r3
 800d794:	1dfb      	adds	r3, r7, #7
 800d796:	781b      	ldrb	r3, [r3, #0]
 800d798:	429a      	cmp	r2, r3
 800d79a:	d09e      	beq.n	800d6da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d79c:	2300      	movs	r3, #0
}
 800d79e:	0018      	movs	r0, r3
 800d7a0:	46bd      	mov	sp, r7
 800d7a2:	b004      	add	sp, #16
 800d7a4:	bd80      	pop	{r7, pc}
	...

0800d7a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d7a8:	b580      	push	{r7, lr}
 800d7aa:	b08e      	sub	sp, #56	@ 0x38
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d7b0:	f3ef 8310 	mrs	r3, PRIMASK
 800d7b4:	617b      	str	r3, [r7, #20]
  return(result);
 800d7b6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d7b8:	637b      	str	r3, [r7, #52]	@ 0x34
 800d7ba:	2301      	movs	r3, #1
 800d7bc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d7be:	69bb      	ldr	r3, [r7, #24]
 800d7c0:	f383 8810 	msr	PRIMASK, r3
}
 800d7c4:	46c0      	nop			@ (mov r8, r8)
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	681a      	ldr	r2, [r3, #0]
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	4926      	ldr	r1, [pc, #152]	@ (800d86c <UART_EndRxTransfer+0xc4>)
 800d7d2:	400a      	ands	r2, r1
 800d7d4:	601a      	str	r2, [r3, #0]
 800d7d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d7d8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d7da:	69fb      	ldr	r3, [r7, #28]
 800d7dc:	f383 8810 	msr	PRIMASK, r3
}
 800d7e0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d7e2:	f3ef 8310 	mrs	r3, PRIMASK
 800d7e6:	623b      	str	r3, [r7, #32]
  return(result);
 800d7e8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d7ea:	633b      	str	r3, [r7, #48]	@ 0x30
 800d7ec:	2301      	movs	r3, #1
 800d7ee:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d7f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7f2:	f383 8810 	msr	PRIMASK, r3
}
 800d7f6:	46c0      	nop			@ (mov r8, r8)
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	689a      	ldr	r2, [r3, #8]
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	491b      	ldr	r1, [pc, #108]	@ (800d870 <UART_EndRxTransfer+0xc8>)
 800d804:	400a      	ands	r2, r1
 800d806:	609a      	str	r2, [r3, #8]
 800d808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d80a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d80c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d80e:	f383 8810 	msr	PRIMASK, r3
}
 800d812:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d818:	2b01      	cmp	r3, #1
 800d81a:	d118      	bne.n	800d84e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d81c:	f3ef 8310 	mrs	r3, PRIMASK
 800d820:	60bb      	str	r3, [r7, #8]
  return(result);
 800d822:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d824:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d826:	2301      	movs	r3, #1
 800d828:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	f383 8810 	msr	PRIMASK, r3
}
 800d830:	46c0      	nop			@ (mov r8, r8)
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	681a      	ldr	r2, [r3, #0]
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	2110      	movs	r1, #16
 800d83e:	438a      	bics	r2, r1
 800d840:	601a      	str	r2, [r3, #0]
 800d842:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d844:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d846:	693b      	ldr	r3, [r7, #16]
 800d848:	f383 8810 	msr	PRIMASK, r3
}
 800d84c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	228c      	movs	r2, #140	@ 0x8c
 800d852:	2120      	movs	r1, #32
 800d854:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	2200      	movs	r2, #0
 800d85a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	2200      	movs	r2, #0
 800d860:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800d862:	46c0      	nop			@ (mov r8, r8)
 800d864:	46bd      	mov	sp, r7
 800d866:	b00e      	add	sp, #56	@ 0x38
 800d868:	bd80      	pop	{r7, pc}
 800d86a:	46c0      	nop			@ (mov r8, r8)
 800d86c:	fffffedf 	.word	0xfffffedf
 800d870:	effffffe 	.word	0xeffffffe

0800d874 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d874:	b580      	push	{r7, lr}
 800d876:	b084      	sub	sp, #16
 800d878:	af00      	add	r7, sp, #0
 800d87a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	2284      	movs	r2, #132	@ 0x84
 800d880:	5c9b      	ldrb	r3, [r3, r2]
 800d882:	2b01      	cmp	r3, #1
 800d884:	d101      	bne.n	800d88a <HAL_UARTEx_DisableFifoMode+0x16>
 800d886:	2302      	movs	r3, #2
 800d888:	e027      	b.n	800d8da <HAL_UARTEx_DisableFifoMode+0x66>
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	2284      	movs	r2, #132	@ 0x84
 800d88e:	2101      	movs	r1, #1
 800d890:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	2288      	movs	r2, #136	@ 0x88
 800d896:	2124      	movs	r1, #36	@ 0x24
 800d898:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	681a      	ldr	r2, [r3, #0]
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	2101      	movs	r1, #1
 800d8ae:	438a      	bics	r2, r1
 800d8b0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	4a0b      	ldr	r2, [pc, #44]	@ (800d8e4 <HAL_UARTEx_DisableFifoMode+0x70>)
 800d8b6:	4013      	ands	r3, r2
 800d8b8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	2200      	movs	r2, #0
 800d8be:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	68fa      	ldr	r2, [r7, #12]
 800d8c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	2288      	movs	r2, #136	@ 0x88
 800d8cc:	2120      	movs	r1, #32
 800d8ce:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	2284      	movs	r2, #132	@ 0x84
 800d8d4:	2100      	movs	r1, #0
 800d8d6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800d8d8:	2300      	movs	r3, #0
}
 800d8da:	0018      	movs	r0, r3
 800d8dc:	46bd      	mov	sp, r7
 800d8de:	b004      	add	sp, #16
 800d8e0:	bd80      	pop	{r7, pc}
 800d8e2:	46c0      	nop			@ (mov r8, r8)
 800d8e4:	dfffffff 	.word	0xdfffffff

0800d8e8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	b084      	sub	sp, #16
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	6078      	str	r0, [r7, #4]
 800d8f0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	2284      	movs	r2, #132	@ 0x84
 800d8f6:	5c9b      	ldrb	r3, [r3, r2]
 800d8f8:	2b01      	cmp	r3, #1
 800d8fa:	d101      	bne.n	800d900 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d8fc:	2302      	movs	r3, #2
 800d8fe:	e02e      	b.n	800d95e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	2284      	movs	r2, #132	@ 0x84
 800d904:	2101      	movs	r1, #1
 800d906:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	2288      	movs	r2, #136	@ 0x88
 800d90c:	2124      	movs	r1, #36	@ 0x24
 800d90e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	681a      	ldr	r2, [r3, #0]
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	2101      	movs	r1, #1
 800d924:	438a      	bics	r2, r1
 800d926:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	689b      	ldr	r3, [r3, #8]
 800d92e:	00db      	lsls	r3, r3, #3
 800d930:	08d9      	lsrs	r1, r3, #3
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	683a      	ldr	r2, [r7, #0]
 800d938:	430a      	orrs	r2, r1
 800d93a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	0018      	movs	r0, r3
 800d940:	f000 f854 	bl	800d9ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	68fa      	ldr	r2, [r7, #12]
 800d94a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	2288      	movs	r2, #136	@ 0x88
 800d950:	2120      	movs	r1, #32
 800d952:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	2284      	movs	r2, #132	@ 0x84
 800d958:	2100      	movs	r1, #0
 800d95a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800d95c:	2300      	movs	r3, #0
}
 800d95e:	0018      	movs	r0, r3
 800d960:	46bd      	mov	sp, r7
 800d962:	b004      	add	sp, #16
 800d964:	bd80      	pop	{r7, pc}
	...

0800d968 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d968:	b580      	push	{r7, lr}
 800d96a:	b084      	sub	sp, #16
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	6078      	str	r0, [r7, #4]
 800d970:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	2284      	movs	r2, #132	@ 0x84
 800d976:	5c9b      	ldrb	r3, [r3, r2]
 800d978:	2b01      	cmp	r3, #1
 800d97a:	d101      	bne.n	800d980 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d97c:	2302      	movs	r3, #2
 800d97e:	e02f      	b.n	800d9e0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	2284      	movs	r2, #132	@ 0x84
 800d984:	2101      	movs	r1, #1
 800d986:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	2288      	movs	r2, #136	@ 0x88
 800d98c:	2124      	movs	r1, #36	@ 0x24
 800d98e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	681a      	ldr	r2, [r3, #0]
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	2101      	movs	r1, #1
 800d9a4:	438a      	bics	r2, r1
 800d9a6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	689b      	ldr	r3, [r3, #8]
 800d9ae:	4a0e      	ldr	r2, [pc, #56]	@ (800d9e8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800d9b0:	4013      	ands	r3, r2
 800d9b2:	0019      	movs	r1, r3
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	683a      	ldr	r2, [r7, #0]
 800d9ba:	430a      	orrs	r2, r1
 800d9bc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	0018      	movs	r0, r3
 800d9c2:	f000 f813 	bl	800d9ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	68fa      	ldr	r2, [r7, #12]
 800d9cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	2288      	movs	r2, #136	@ 0x88
 800d9d2:	2120      	movs	r1, #32
 800d9d4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	2284      	movs	r2, #132	@ 0x84
 800d9da:	2100      	movs	r1, #0
 800d9dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800d9de:	2300      	movs	r3, #0
}
 800d9e0:	0018      	movs	r0, r3
 800d9e2:	46bd      	mov	sp, r7
 800d9e4:	b004      	add	sp, #16
 800d9e6:	bd80      	pop	{r7, pc}
 800d9e8:	f1ffffff 	.word	0xf1ffffff

0800d9ec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d9ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d9ee:	b085      	sub	sp, #20
 800d9f0:	af00      	add	r7, sp, #0
 800d9f2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d108      	bne.n	800da0e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	226a      	movs	r2, #106	@ 0x6a
 800da00:	2101      	movs	r1, #1
 800da02:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	2268      	movs	r2, #104	@ 0x68
 800da08:	2101      	movs	r1, #1
 800da0a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800da0c:	e043      	b.n	800da96 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800da0e:	260f      	movs	r6, #15
 800da10:	19bb      	adds	r3, r7, r6
 800da12:	2208      	movs	r2, #8
 800da14:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800da16:	200e      	movs	r0, #14
 800da18:	183b      	adds	r3, r7, r0
 800da1a:	2208      	movs	r2, #8
 800da1c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	689b      	ldr	r3, [r3, #8]
 800da24:	0e5b      	lsrs	r3, r3, #25
 800da26:	b2da      	uxtb	r2, r3
 800da28:	240d      	movs	r4, #13
 800da2a:	193b      	adds	r3, r7, r4
 800da2c:	2107      	movs	r1, #7
 800da2e:	400a      	ands	r2, r1
 800da30:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	689b      	ldr	r3, [r3, #8]
 800da38:	0f5b      	lsrs	r3, r3, #29
 800da3a:	b2da      	uxtb	r2, r3
 800da3c:	250c      	movs	r5, #12
 800da3e:	197b      	adds	r3, r7, r5
 800da40:	2107      	movs	r1, #7
 800da42:	400a      	ands	r2, r1
 800da44:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800da46:	183b      	adds	r3, r7, r0
 800da48:	781b      	ldrb	r3, [r3, #0]
 800da4a:	197a      	adds	r2, r7, r5
 800da4c:	7812      	ldrb	r2, [r2, #0]
 800da4e:	4914      	ldr	r1, [pc, #80]	@ (800daa0 <UARTEx_SetNbDataToProcess+0xb4>)
 800da50:	5c8a      	ldrb	r2, [r1, r2]
 800da52:	435a      	muls	r2, r3
 800da54:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800da56:	197b      	adds	r3, r7, r5
 800da58:	781b      	ldrb	r3, [r3, #0]
 800da5a:	4a12      	ldr	r2, [pc, #72]	@ (800daa4 <UARTEx_SetNbDataToProcess+0xb8>)
 800da5c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800da5e:	0019      	movs	r1, r3
 800da60:	f7f2 fc02 	bl	8000268 <__divsi3>
 800da64:	0003      	movs	r3, r0
 800da66:	b299      	uxth	r1, r3
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	226a      	movs	r2, #106	@ 0x6a
 800da6c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800da6e:	19bb      	adds	r3, r7, r6
 800da70:	781b      	ldrb	r3, [r3, #0]
 800da72:	193a      	adds	r2, r7, r4
 800da74:	7812      	ldrb	r2, [r2, #0]
 800da76:	490a      	ldr	r1, [pc, #40]	@ (800daa0 <UARTEx_SetNbDataToProcess+0xb4>)
 800da78:	5c8a      	ldrb	r2, [r1, r2]
 800da7a:	435a      	muls	r2, r3
 800da7c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800da7e:	193b      	adds	r3, r7, r4
 800da80:	781b      	ldrb	r3, [r3, #0]
 800da82:	4a08      	ldr	r2, [pc, #32]	@ (800daa4 <UARTEx_SetNbDataToProcess+0xb8>)
 800da84:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800da86:	0019      	movs	r1, r3
 800da88:	f7f2 fbee 	bl	8000268 <__divsi3>
 800da8c:	0003      	movs	r3, r0
 800da8e:	b299      	uxth	r1, r3
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	2268      	movs	r2, #104	@ 0x68
 800da94:	5299      	strh	r1, [r3, r2]
}
 800da96:	46c0      	nop			@ (mov r8, r8)
 800da98:	46bd      	mov	sp, r7
 800da9a:	b005      	add	sp, #20
 800da9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da9e:	46c0      	nop			@ (mov r8, r8)
 800daa0:	0801bee4 	.word	0x0801bee4
 800daa4:	0801beec 	.word	0x0801beec

0800daa8 <sulp>:
 800daa8:	b570      	push	{r4, r5, r6, lr}
 800daaa:	0016      	movs	r6, r2
 800daac:	000d      	movs	r5, r1
 800daae:	f002 f925 	bl	800fcfc <__ulp>
 800dab2:	2e00      	cmp	r6, #0
 800dab4:	d00d      	beq.n	800dad2 <sulp+0x2a>
 800dab6:	236b      	movs	r3, #107	@ 0x6b
 800dab8:	006a      	lsls	r2, r5, #1
 800daba:	0d52      	lsrs	r2, r2, #21
 800dabc:	1a9b      	subs	r3, r3, r2
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	dd07      	ble.n	800dad2 <sulp+0x2a>
 800dac2:	2400      	movs	r4, #0
 800dac4:	4a03      	ldr	r2, [pc, #12]	@ (800dad4 <sulp+0x2c>)
 800dac6:	051b      	lsls	r3, r3, #20
 800dac8:	189d      	adds	r5, r3, r2
 800daca:	002b      	movs	r3, r5
 800dacc:	0022      	movs	r2, r4
 800dace:	f7f4 fdad 	bl	800262c <__aeabi_dmul>
 800dad2:	bd70      	pop	{r4, r5, r6, pc}
 800dad4:	3ff00000 	.word	0x3ff00000

0800dad8 <_strtod_l>:
 800dad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dada:	b0a3      	sub	sp, #140	@ 0x8c
 800dadc:	921b      	str	r2, [sp, #108]	@ 0x6c
 800dade:	2200      	movs	r2, #0
 800dae0:	2600      	movs	r6, #0
 800dae2:	2700      	movs	r7, #0
 800dae4:	9005      	str	r0, [sp, #20]
 800dae6:	9109      	str	r1, [sp, #36]	@ 0x24
 800dae8:	921e      	str	r2, [sp, #120]	@ 0x78
 800daea:	911d      	str	r1, [sp, #116]	@ 0x74
 800daec:	780a      	ldrb	r2, [r1, #0]
 800daee:	2a2b      	cmp	r2, #43	@ 0x2b
 800daf0:	d053      	beq.n	800db9a <_strtod_l+0xc2>
 800daf2:	d83f      	bhi.n	800db74 <_strtod_l+0x9c>
 800daf4:	2a0d      	cmp	r2, #13
 800daf6:	d839      	bhi.n	800db6c <_strtod_l+0x94>
 800daf8:	2a08      	cmp	r2, #8
 800dafa:	d839      	bhi.n	800db70 <_strtod_l+0x98>
 800dafc:	2a00      	cmp	r2, #0
 800dafe:	d042      	beq.n	800db86 <_strtod_l+0xae>
 800db00:	2200      	movs	r2, #0
 800db02:	9212      	str	r2, [sp, #72]	@ 0x48
 800db04:	2100      	movs	r1, #0
 800db06:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 800db08:	910c      	str	r1, [sp, #48]	@ 0x30
 800db0a:	782a      	ldrb	r2, [r5, #0]
 800db0c:	2a30      	cmp	r2, #48	@ 0x30
 800db0e:	d000      	beq.n	800db12 <_strtod_l+0x3a>
 800db10:	e083      	b.n	800dc1a <_strtod_l+0x142>
 800db12:	786a      	ldrb	r2, [r5, #1]
 800db14:	3120      	adds	r1, #32
 800db16:	438a      	bics	r2, r1
 800db18:	2a58      	cmp	r2, #88	@ 0x58
 800db1a:	d000      	beq.n	800db1e <_strtod_l+0x46>
 800db1c:	e073      	b.n	800dc06 <_strtod_l+0x12e>
 800db1e:	9302      	str	r3, [sp, #8]
 800db20:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800db22:	4a95      	ldr	r2, [pc, #596]	@ (800dd78 <_strtod_l+0x2a0>)
 800db24:	9301      	str	r3, [sp, #4]
 800db26:	ab1e      	add	r3, sp, #120	@ 0x78
 800db28:	9300      	str	r3, [sp, #0]
 800db2a:	9805      	ldr	r0, [sp, #20]
 800db2c:	ab1f      	add	r3, sp, #124	@ 0x7c
 800db2e:	a91d      	add	r1, sp, #116	@ 0x74
 800db30:	f001 f99e 	bl	800ee70 <__gethex>
 800db34:	230f      	movs	r3, #15
 800db36:	0002      	movs	r2, r0
 800db38:	401a      	ands	r2, r3
 800db3a:	0004      	movs	r4, r0
 800db3c:	9206      	str	r2, [sp, #24]
 800db3e:	4218      	tst	r0, r3
 800db40:	d005      	beq.n	800db4e <_strtod_l+0x76>
 800db42:	2a06      	cmp	r2, #6
 800db44:	d12b      	bne.n	800db9e <_strtod_l+0xc6>
 800db46:	2300      	movs	r3, #0
 800db48:	3501      	adds	r5, #1
 800db4a:	951d      	str	r5, [sp, #116]	@ 0x74
 800db4c:	9312      	str	r3, [sp, #72]	@ 0x48
 800db4e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800db50:	2b00      	cmp	r3, #0
 800db52:	d002      	beq.n	800db5a <_strtod_l+0x82>
 800db54:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800db56:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800db58:	6013      	str	r3, [r2, #0]
 800db5a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d019      	beq.n	800db94 <_strtod_l+0xbc>
 800db60:	2380      	movs	r3, #128	@ 0x80
 800db62:	0030      	movs	r0, r6
 800db64:	061b      	lsls	r3, r3, #24
 800db66:	18f9      	adds	r1, r7, r3
 800db68:	b023      	add	sp, #140	@ 0x8c
 800db6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db6c:	2a20      	cmp	r2, #32
 800db6e:	d1c7      	bne.n	800db00 <_strtod_l+0x28>
 800db70:	3101      	adds	r1, #1
 800db72:	e7ba      	b.n	800daea <_strtod_l+0x12>
 800db74:	2a2d      	cmp	r2, #45	@ 0x2d
 800db76:	d1c3      	bne.n	800db00 <_strtod_l+0x28>
 800db78:	3a2c      	subs	r2, #44	@ 0x2c
 800db7a:	9212      	str	r2, [sp, #72]	@ 0x48
 800db7c:	1c4a      	adds	r2, r1, #1
 800db7e:	921d      	str	r2, [sp, #116]	@ 0x74
 800db80:	784a      	ldrb	r2, [r1, #1]
 800db82:	2a00      	cmp	r2, #0
 800db84:	d1be      	bne.n	800db04 <_strtod_l+0x2c>
 800db86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db88:	931d      	str	r3, [sp, #116]	@ 0x74
 800db8a:	2300      	movs	r3, #0
 800db8c:	9312      	str	r3, [sp, #72]	@ 0x48
 800db8e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800db90:	2b00      	cmp	r3, #0
 800db92:	d1df      	bne.n	800db54 <_strtod_l+0x7c>
 800db94:	0030      	movs	r0, r6
 800db96:	0039      	movs	r1, r7
 800db98:	e7e6      	b.n	800db68 <_strtod_l+0x90>
 800db9a:	2200      	movs	r2, #0
 800db9c:	e7ed      	b.n	800db7a <_strtod_l+0xa2>
 800db9e:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 800dba0:	2a00      	cmp	r2, #0
 800dba2:	d007      	beq.n	800dbb4 <_strtod_l+0xdc>
 800dba4:	2135      	movs	r1, #53	@ 0x35
 800dba6:	a820      	add	r0, sp, #128	@ 0x80
 800dba8:	f002 f99e 	bl	800fee8 <__copybits>
 800dbac:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800dbae:	9805      	ldr	r0, [sp, #20]
 800dbb0:	f001 fd58 	bl	800f664 <_Bfree>
 800dbb4:	9806      	ldr	r0, [sp, #24]
 800dbb6:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800dbb8:	3801      	subs	r0, #1
 800dbba:	2804      	cmp	r0, #4
 800dbbc:	d806      	bhi.n	800dbcc <_strtod_l+0xf4>
 800dbbe:	f7f2 fab5 	bl	800012c <__gnu_thumb1_case_uqi>
 800dbc2:	0312      	.short	0x0312
 800dbc4:	1e1c      	.short	0x1e1c
 800dbc6:	12          	.byte	0x12
 800dbc7:	00          	.byte	0x00
 800dbc8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800dbca:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 800dbcc:	05e4      	lsls	r4, r4, #23
 800dbce:	d502      	bpl.n	800dbd6 <_strtod_l+0xfe>
 800dbd0:	2380      	movs	r3, #128	@ 0x80
 800dbd2:	061b      	lsls	r3, r3, #24
 800dbd4:	431f      	orrs	r7, r3
 800dbd6:	4b69      	ldr	r3, [pc, #420]	@ (800dd7c <_strtod_l+0x2a4>)
 800dbd8:	423b      	tst	r3, r7
 800dbda:	d1b8      	bne.n	800db4e <_strtod_l+0x76>
 800dbdc:	f001 f85a 	bl	800ec94 <__errno>
 800dbe0:	2322      	movs	r3, #34	@ 0x22
 800dbe2:	6003      	str	r3, [r0, #0]
 800dbe4:	e7b3      	b.n	800db4e <_strtod_l+0x76>
 800dbe6:	4966      	ldr	r1, [pc, #408]	@ (800dd80 <_strtod_l+0x2a8>)
 800dbe8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800dbea:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800dbec:	400a      	ands	r2, r1
 800dbee:	4965      	ldr	r1, [pc, #404]	@ (800dd84 <_strtod_l+0x2ac>)
 800dbf0:	185b      	adds	r3, r3, r1
 800dbf2:	051b      	lsls	r3, r3, #20
 800dbf4:	431a      	orrs	r2, r3
 800dbf6:	0017      	movs	r7, r2
 800dbf8:	e7e8      	b.n	800dbcc <_strtod_l+0xf4>
 800dbfa:	4f60      	ldr	r7, [pc, #384]	@ (800dd7c <_strtod_l+0x2a4>)
 800dbfc:	e7e6      	b.n	800dbcc <_strtod_l+0xf4>
 800dbfe:	2601      	movs	r6, #1
 800dc00:	4f61      	ldr	r7, [pc, #388]	@ (800dd88 <_strtod_l+0x2b0>)
 800dc02:	4276      	negs	r6, r6
 800dc04:	e7e2      	b.n	800dbcc <_strtod_l+0xf4>
 800dc06:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800dc08:	1c5a      	adds	r2, r3, #1
 800dc0a:	921d      	str	r2, [sp, #116]	@ 0x74
 800dc0c:	785b      	ldrb	r3, [r3, #1]
 800dc0e:	2b30      	cmp	r3, #48	@ 0x30
 800dc10:	d0f9      	beq.n	800dc06 <_strtod_l+0x12e>
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d09b      	beq.n	800db4e <_strtod_l+0x76>
 800dc16:	2301      	movs	r3, #1
 800dc18:	930c      	str	r3, [sp, #48]	@ 0x30
 800dc1a:	2500      	movs	r5, #0
 800dc1c:	220a      	movs	r2, #10
 800dc1e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800dc20:	950d      	str	r5, [sp, #52]	@ 0x34
 800dc22:	9313      	str	r3, [sp, #76]	@ 0x4c
 800dc24:	9508      	str	r5, [sp, #32]
 800dc26:	981d      	ldr	r0, [sp, #116]	@ 0x74
 800dc28:	7804      	ldrb	r4, [r0, #0]
 800dc2a:	0023      	movs	r3, r4
 800dc2c:	3b30      	subs	r3, #48	@ 0x30
 800dc2e:	b2d9      	uxtb	r1, r3
 800dc30:	2909      	cmp	r1, #9
 800dc32:	d927      	bls.n	800dc84 <_strtod_l+0x1ac>
 800dc34:	2201      	movs	r2, #1
 800dc36:	4955      	ldr	r1, [pc, #340]	@ (800dd8c <_strtod_l+0x2b4>)
 800dc38:	f000 ffcc 	bl	800ebd4 <strncmp>
 800dc3c:	2800      	cmp	r0, #0
 800dc3e:	d031      	beq.n	800dca4 <_strtod_l+0x1cc>
 800dc40:	2000      	movs	r0, #0
 800dc42:	0023      	movs	r3, r4
 800dc44:	4684      	mov	ip, r0
 800dc46:	9a08      	ldr	r2, [sp, #32]
 800dc48:	900e      	str	r0, [sp, #56]	@ 0x38
 800dc4a:	9206      	str	r2, [sp, #24]
 800dc4c:	2220      	movs	r2, #32
 800dc4e:	0019      	movs	r1, r3
 800dc50:	4391      	bics	r1, r2
 800dc52:	000a      	movs	r2, r1
 800dc54:	2100      	movs	r1, #0
 800dc56:	9107      	str	r1, [sp, #28]
 800dc58:	2a45      	cmp	r2, #69	@ 0x45
 800dc5a:	d000      	beq.n	800dc5e <_strtod_l+0x186>
 800dc5c:	e0c0      	b.n	800dde0 <_strtod_l+0x308>
 800dc5e:	9b06      	ldr	r3, [sp, #24]
 800dc60:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800dc62:	4303      	orrs	r3, r0
 800dc64:	4313      	orrs	r3, r2
 800dc66:	428b      	cmp	r3, r1
 800dc68:	d08d      	beq.n	800db86 <_strtod_l+0xae>
 800dc6a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800dc6c:	9309      	str	r3, [sp, #36]	@ 0x24
 800dc6e:	3301      	adds	r3, #1
 800dc70:	931d      	str	r3, [sp, #116]	@ 0x74
 800dc72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc74:	785b      	ldrb	r3, [r3, #1]
 800dc76:	2b2b      	cmp	r3, #43	@ 0x2b
 800dc78:	d070      	beq.n	800dd5c <_strtod_l+0x284>
 800dc7a:	000c      	movs	r4, r1
 800dc7c:	2b2d      	cmp	r3, #45	@ 0x2d
 800dc7e:	d173      	bne.n	800dd68 <_strtod_l+0x290>
 800dc80:	2401      	movs	r4, #1
 800dc82:	e06c      	b.n	800dd5e <_strtod_l+0x286>
 800dc84:	9908      	ldr	r1, [sp, #32]
 800dc86:	2908      	cmp	r1, #8
 800dc88:	dc09      	bgt.n	800dc9e <_strtod_l+0x1c6>
 800dc8a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800dc8c:	4351      	muls	r1, r2
 800dc8e:	185b      	adds	r3, r3, r1
 800dc90:	930d      	str	r3, [sp, #52]	@ 0x34
 800dc92:	9b08      	ldr	r3, [sp, #32]
 800dc94:	3001      	adds	r0, #1
 800dc96:	3301      	adds	r3, #1
 800dc98:	9308      	str	r3, [sp, #32]
 800dc9a:	901d      	str	r0, [sp, #116]	@ 0x74
 800dc9c:	e7c3      	b.n	800dc26 <_strtod_l+0x14e>
 800dc9e:	4355      	muls	r5, r2
 800dca0:	195d      	adds	r5, r3, r5
 800dca2:	e7f6      	b.n	800dc92 <_strtod_l+0x1ba>
 800dca4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800dca6:	1c5a      	adds	r2, r3, #1
 800dca8:	921d      	str	r2, [sp, #116]	@ 0x74
 800dcaa:	9a08      	ldr	r2, [sp, #32]
 800dcac:	785b      	ldrb	r3, [r3, #1]
 800dcae:	2a00      	cmp	r2, #0
 800dcb0:	d03a      	beq.n	800dd28 <_strtod_l+0x250>
 800dcb2:	900e      	str	r0, [sp, #56]	@ 0x38
 800dcb4:	9206      	str	r2, [sp, #24]
 800dcb6:	001a      	movs	r2, r3
 800dcb8:	3a30      	subs	r2, #48	@ 0x30
 800dcba:	2a09      	cmp	r2, #9
 800dcbc:	d912      	bls.n	800dce4 <_strtod_l+0x20c>
 800dcbe:	2201      	movs	r2, #1
 800dcc0:	4694      	mov	ip, r2
 800dcc2:	e7c3      	b.n	800dc4c <_strtod_l+0x174>
 800dcc4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800dcc6:	3001      	adds	r0, #1
 800dcc8:	1c5a      	adds	r2, r3, #1
 800dcca:	921d      	str	r2, [sp, #116]	@ 0x74
 800dccc:	785b      	ldrb	r3, [r3, #1]
 800dcce:	2b30      	cmp	r3, #48	@ 0x30
 800dcd0:	d0f8      	beq.n	800dcc4 <_strtod_l+0x1ec>
 800dcd2:	001a      	movs	r2, r3
 800dcd4:	3a31      	subs	r2, #49	@ 0x31
 800dcd6:	2a08      	cmp	r2, #8
 800dcd8:	d83b      	bhi.n	800dd52 <_strtod_l+0x27a>
 800dcda:	900e      	str	r0, [sp, #56]	@ 0x38
 800dcdc:	2000      	movs	r0, #0
 800dcde:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800dce0:	9006      	str	r0, [sp, #24]
 800dce2:	9213      	str	r2, [sp, #76]	@ 0x4c
 800dce4:	001a      	movs	r2, r3
 800dce6:	1c41      	adds	r1, r0, #1
 800dce8:	3a30      	subs	r2, #48	@ 0x30
 800dcea:	2b30      	cmp	r3, #48	@ 0x30
 800dcec:	d016      	beq.n	800dd1c <_strtod_l+0x244>
 800dcee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dcf0:	185b      	adds	r3, r3, r1
 800dcf2:	930e      	str	r3, [sp, #56]	@ 0x38
 800dcf4:	9b06      	ldr	r3, [sp, #24]
 800dcf6:	210a      	movs	r1, #10
 800dcf8:	469c      	mov	ip, r3
 800dcfa:	4484      	add	ip, r0
 800dcfc:	459c      	cmp	ip, r3
 800dcfe:	d115      	bne.n	800dd2c <_strtod_l+0x254>
 800dd00:	9906      	ldr	r1, [sp, #24]
 800dd02:	9b06      	ldr	r3, [sp, #24]
 800dd04:	3101      	adds	r1, #1
 800dd06:	1809      	adds	r1, r1, r0
 800dd08:	181b      	adds	r3, r3, r0
 800dd0a:	9106      	str	r1, [sp, #24]
 800dd0c:	2b08      	cmp	r3, #8
 800dd0e:	dc19      	bgt.n	800dd44 <_strtod_l+0x26c>
 800dd10:	230a      	movs	r3, #10
 800dd12:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800dd14:	434b      	muls	r3, r1
 800dd16:	2100      	movs	r1, #0
 800dd18:	18d3      	adds	r3, r2, r3
 800dd1a:	930d      	str	r3, [sp, #52]	@ 0x34
 800dd1c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800dd1e:	0008      	movs	r0, r1
 800dd20:	1c5a      	adds	r2, r3, #1
 800dd22:	921d      	str	r2, [sp, #116]	@ 0x74
 800dd24:	785b      	ldrb	r3, [r3, #1]
 800dd26:	e7c6      	b.n	800dcb6 <_strtod_l+0x1de>
 800dd28:	9808      	ldr	r0, [sp, #32]
 800dd2a:	e7d0      	b.n	800dcce <_strtod_l+0x1f6>
 800dd2c:	1c5c      	adds	r4, r3, #1
 800dd2e:	2b08      	cmp	r3, #8
 800dd30:	dc04      	bgt.n	800dd3c <_strtod_l+0x264>
 800dd32:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800dd34:	434b      	muls	r3, r1
 800dd36:	930d      	str	r3, [sp, #52]	@ 0x34
 800dd38:	0023      	movs	r3, r4
 800dd3a:	e7df      	b.n	800dcfc <_strtod_l+0x224>
 800dd3c:	2c10      	cmp	r4, #16
 800dd3e:	dcfb      	bgt.n	800dd38 <_strtod_l+0x260>
 800dd40:	434d      	muls	r5, r1
 800dd42:	e7f9      	b.n	800dd38 <_strtod_l+0x260>
 800dd44:	2100      	movs	r1, #0
 800dd46:	2b0f      	cmp	r3, #15
 800dd48:	dce8      	bgt.n	800dd1c <_strtod_l+0x244>
 800dd4a:	230a      	movs	r3, #10
 800dd4c:	435d      	muls	r5, r3
 800dd4e:	1955      	adds	r5, r2, r5
 800dd50:	e7e4      	b.n	800dd1c <_strtod_l+0x244>
 800dd52:	2200      	movs	r2, #0
 800dd54:	920e      	str	r2, [sp, #56]	@ 0x38
 800dd56:	9206      	str	r2, [sp, #24]
 800dd58:	3201      	adds	r2, #1
 800dd5a:	e7b1      	b.n	800dcc0 <_strtod_l+0x1e8>
 800dd5c:	2400      	movs	r4, #0
 800dd5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd60:	3302      	adds	r3, #2
 800dd62:	931d      	str	r3, [sp, #116]	@ 0x74
 800dd64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd66:	789b      	ldrb	r3, [r3, #2]
 800dd68:	001a      	movs	r2, r3
 800dd6a:	3a30      	subs	r2, #48	@ 0x30
 800dd6c:	2a09      	cmp	r2, #9
 800dd6e:	d913      	bls.n	800dd98 <_strtod_l+0x2c0>
 800dd70:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dd72:	921d      	str	r2, [sp, #116]	@ 0x74
 800dd74:	2200      	movs	r2, #0
 800dd76:	e032      	b.n	800ddde <_strtod_l+0x306>
 800dd78:	0801bf18 	.word	0x0801bf18
 800dd7c:	7ff00000 	.word	0x7ff00000
 800dd80:	ffefffff 	.word	0xffefffff
 800dd84:	00000433 	.word	0x00000433
 800dd88:	7fffffff 	.word	0x7fffffff
 800dd8c:	0801bef4 	.word	0x0801bef4
 800dd90:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800dd92:	1c5a      	adds	r2, r3, #1
 800dd94:	921d      	str	r2, [sp, #116]	@ 0x74
 800dd96:	785b      	ldrb	r3, [r3, #1]
 800dd98:	2b30      	cmp	r3, #48	@ 0x30
 800dd9a:	d0f9      	beq.n	800dd90 <_strtod_l+0x2b8>
 800dd9c:	2200      	movs	r2, #0
 800dd9e:	9207      	str	r2, [sp, #28]
 800dda0:	001a      	movs	r2, r3
 800dda2:	3a31      	subs	r2, #49	@ 0x31
 800dda4:	2a08      	cmp	r2, #8
 800dda6:	d81b      	bhi.n	800dde0 <_strtod_l+0x308>
 800dda8:	3b30      	subs	r3, #48	@ 0x30
 800ddaa:	9310      	str	r3, [sp, #64]	@ 0x40
 800ddac:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ddae:	9307      	str	r3, [sp, #28]
 800ddb0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ddb2:	1c59      	adds	r1, r3, #1
 800ddb4:	911d      	str	r1, [sp, #116]	@ 0x74
 800ddb6:	785b      	ldrb	r3, [r3, #1]
 800ddb8:	001a      	movs	r2, r3
 800ddba:	3a30      	subs	r2, #48	@ 0x30
 800ddbc:	2a09      	cmp	r2, #9
 800ddbe:	d93a      	bls.n	800de36 <_strtod_l+0x35e>
 800ddc0:	9a07      	ldr	r2, [sp, #28]
 800ddc2:	1a8a      	subs	r2, r1, r2
 800ddc4:	49b4      	ldr	r1, [pc, #720]	@ (800e098 <_strtod_l+0x5c0>)
 800ddc6:	9107      	str	r1, [sp, #28]
 800ddc8:	2a08      	cmp	r2, #8
 800ddca:	dc04      	bgt.n	800ddd6 <_strtod_l+0x2fe>
 800ddcc:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800ddce:	9207      	str	r2, [sp, #28]
 800ddd0:	428a      	cmp	r2, r1
 800ddd2:	dd00      	ble.n	800ddd6 <_strtod_l+0x2fe>
 800ddd4:	9107      	str	r1, [sp, #28]
 800ddd6:	2c00      	cmp	r4, #0
 800ddd8:	d002      	beq.n	800dde0 <_strtod_l+0x308>
 800ddda:	9a07      	ldr	r2, [sp, #28]
 800dddc:	4252      	negs	r2, r2
 800ddde:	9207      	str	r2, [sp, #28]
 800dde0:	9a06      	ldr	r2, [sp, #24]
 800dde2:	2a00      	cmp	r2, #0
 800dde4:	d14d      	bne.n	800de82 <_strtod_l+0x3aa>
 800dde6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800dde8:	4310      	orrs	r0, r2
 800ddea:	d000      	beq.n	800ddee <_strtod_l+0x316>
 800ddec:	e6af      	b.n	800db4e <_strtod_l+0x76>
 800ddee:	4662      	mov	r2, ip
 800ddf0:	2a00      	cmp	r2, #0
 800ddf2:	d000      	beq.n	800ddf6 <_strtod_l+0x31e>
 800ddf4:	e6c7      	b.n	800db86 <_strtod_l+0xae>
 800ddf6:	2b69      	cmp	r3, #105	@ 0x69
 800ddf8:	d027      	beq.n	800de4a <_strtod_l+0x372>
 800ddfa:	dc23      	bgt.n	800de44 <_strtod_l+0x36c>
 800ddfc:	2b49      	cmp	r3, #73	@ 0x49
 800ddfe:	d024      	beq.n	800de4a <_strtod_l+0x372>
 800de00:	2b4e      	cmp	r3, #78	@ 0x4e
 800de02:	d000      	beq.n	800de06 <_strtod_l+0x32e>
 800de04:	e6bf      	b.n	800db86 <_strtod_l+0xae>
 800de06:	49a5      	ldr	r1, [pc, #660]	@ (800e09c <_strtod_l+0x5c4>)
 800de08:	a81d      	add	r0, sp, #116	@ 0x74
 800de0a:	f001 fa67 	bl	800f2dc <__match>
 800de0e:	2800      	cmp	r0, #0
 800de10:	d100      	bne.n	800de14 <_strtod_l+0x33c>
 800de12:	e6b8      	b.n	800db86 <_strtod_l+0xae>
 800de14:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800de16:	781b      	ldrb	r3, [r3, #0]
 800de18:	2b28      	cmp	r3, #40	@ 0x28
 800de1a:	d12c      	bne.n	800de76 <_strtod_l+0x39e>
 800de1c:	49a0      	ldr	r1, [pc, #640]	@ (800e0a0 <_strtod_l+0x5c8>)
 800de1e:	aa20      	add	r2, sp, #128	@ 0x80
 800de20:	a81d      	add	r0, sp, #116	@ 0x74
 800de22:	f001 fa6f 	bl	800f304 <__hexnan>
 800de26:	2805      	cmp	r0, #5
 800de28:	d125      	bne.n	800de76 <_strtod_l+0x39e>
 800de2a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800de2c:	4a9d      	ldr	r2, [pc, #628]	@ (800e0a4 <_strtod_l+0x5cc>)
 800de2e:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800de30:	431a      	orrs	r2, r3
 800de32:	0017      	movs	r7, r2
 800de34:	e68b      	b.n	800db4e <_strtod_l+0x76>
 800de36:	220a      	movs	r2, #10
 800de38:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800de3a:	434a      	muls	r2, r1
 800de3c:	18d2      	adds	r2, r2, r3
 800de3e:	3a30      	subs	r2, #48	@ 0x30
 800de40:	9210      	str	r2, [sp, #64]	@ 0x40
 800de42:	e7b5      	b.n	800ddb0 <_strtod_l+0x2d8>
 800de44:	2b6e      	cmp	r3, #110	@ 0x6e
 800de46:	d0de      	beq.n	800de06 <_strtod_l+0x32e>
 800de48:	e69d      	b.n	800db86 <_strtod_l+0xae>
 800de4a:	4997      	ldr	r1, [pc, #604]	@ (800e0a8 <_strtod_l+0x5d0>)
 800de4c:	a81d      	add	r0, sp, #116	@ 0x74
 800de4e:	f001 fa45 	bl	800f2dc <__match>
 800de52:	2800      	cmp	r0, #0
 800de54:	d100      	bne.n	800de58 <_strtod_l+0x380>
 800de56:	e696      	b.n	800db86 <_strtod_l+0xae>
 800de58:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800de5a:	4994      	ldr	r1, [pc, #592]	@ (800e0ac <_strtod_l+0x5d4>)
 800de5c:	3b01      	subs	r3, #1
 800de5e:	a81d      	add	r0, sp, #116	@ 0x74
 800de60:	931d      	str	r3, [sp, #116]	@ 0x74
 800de62:	f001 fa3b 	bl	800f2dc <__match>
 800de66:	2800      	cmp	r0, #0
 800de68:	d102      	bne.n	800de70 <_strtod_l+0x398>
 800de6a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800de6c:	3301      	adds	r3, #1
 800de6e:	931d      	str	r3, [sp, #116]	@ 0x74
 800de70:	2600      	movs	r6, #0
 800de72:	4f8c      	ldr	r7, [pc, #560]	@ (800e0a4 <_strtod_l+0x5cc>)
 800de74:	e66b      	b.n	800db4e <_strtod_l+0x76>
 800de76:	488e      	ldr	r0, [pc, #568]	@ (800e0b0 <_strtod_l+0x5d8>)
 800de78:	f000 ff42 	bl	800ed00 <nan>
 800de7c:	0006      	movs	r6, r0
 800de7e:	000f      	movs	r7, r1
 800de80:	e665      	b.n	800db4e <_strtod_l+0x76>
 800de82:	9b07      	ldr	r3, [sp, #28]
 800de84:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800de86:	1a9b      	subs	r3, r3, r2
 800de88:	930c      	str	r3, [sp, #48]	@ 0x30
 800de8a:	9b08      	ldr	r3, [sp, #32]
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d101      	bne.n	800de94 <_strtod_l+0x3bc>
 800de90:	9b06      	ldr	r3, [sp, #24]
 800de92:	9308      	str	r3, [sp, #32]
 800de94:	9c06      	ldr	r4, [sp, #24]
 800de96:	2c10      	cmp	r4, #16
 800de98:	dd00      	ble.n	800de9c <_strtod_l+0x3c4>
 800de9a:	2410      	movs	r4, #16
 800de9c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800de9e:	f7f5 fab5 	bl	800340c <__aeabi_ui2d>
 800dea2:	9b06      	ldr	r3, [sp, #24]
 800dea4:	0006      	movs	r6, r0
 800dea6:	000f      	movs	r7, r1
 800dea8:	2b09      	cmp	r3, #9
 800deaa:	dc13      	bgt.n	800ded4 <_strtod_l+0x3fc>
 800deac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d100      	bne.n	800deb4 <_strtod_l+0x3dc>
 800deb2:	e64c      	b.n	800db4e <_strtod_l+0x76>
 800deb4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	dc00      	bgt.n	800debc <_strtod_l+0x3e4>
 800deba:	e07e      	b.n	800dfba <_strtod_l+0x4e2>
 800debc:	2b16      	cmp	r3, #22
 800debe:	dc63      	bgt.n	800df88 <_strtod_l+0x4b0>
 800dec0:	497c      	ldr	r1, [pc, #496]	@ (800e0b4 <_strtod_l+0x5dc>)
 800dec2:	00db      	lsls	r3, r3, #3
 800dec4:	18c9      	adds	r1, r1, r3
 800dec6:	0032      	movs	r2, r6
 800dec8:	6808      	ldr	r0, [r1, #0]
 800deca:	6849      	ldr	r1, [r1, #4]
 800decc:	003b      	movs	r3, r7
 800dece:	f7f4 fbad 	bl	800262c <__aeabi_dmul>
 800ded2:	e7d3      	b.n	800de7c <_strtod_l+0x3a4>
 800ded4:	0022      	movs	r2, r4
 800ded6:	4b77      	ldr	r3, [pc, #476]	@ (800e0b4 <_strtod_l+0x5dc>)
 800ded8:	3a09      	subs	r2, #9
 800deda:	00d2      	lsls	r2, r2, #3
 800dedc:	189b      	adds	r3, r3, r2
 800dede:	681a      	ldr	r2, [r3, #0]
 800dee0:	685b      	ldr	r3, [r3, #4]
 800dee2:	f7f4 fba3 	bl	800262c <__aeabi_dmul>
 800dee6:	0006      	movs	r6, r0
 800dee8:	0028      	movs	r0, r5
 800deea:	000f      	movs	r7, r1
 800deec:	f7f5 fa8e 	bl	800340c <__aeabi_ui2d>
 800def0:	000b      	movs	r3, r1
 800def2:	0002      	movs	r2, r0
 800def4:	0039      	movs	r1, r7
 800def6:	0030      	movs	r0, r6
 800def8:	f7f3 fbf0 	bl	80016dc <__aeabi_dadd>
 800defc:	9b06      	ldr	r3, [sp, #24]
 800defe:	0006      	movs	r6, r0
 800df00:	000f      	movs	r7, r1
 800df02:	2b0f      	cmp	r3, #15
 800df04:	ddd2      	ble.n	800deac <_strtod_l+0x3d4>
 800df06:	9b06      	ldr	r3, [sp, #24]
 800df08:	1b1c      	subs	r4, r3, r4
 800df0a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800df0c:	18e4      	adds	r4, r4, r3
 800df0e:	2c00      	cmp	r4, #0
 800df10:	dc00      	bgt.n	800df14 <_strtod_l+0x43c>
 800df12:	e09b      	b.n	800e04c <_strtod_l+0x574>
 800df14:	220f      	movs	r2, #15
 800df16:	0023      	movs	r3, r4
 800df18:	4013      	ands	r3, r2
 800df1a:	4214      	tst	r4, r2
 800df1c:	d00a      	beq.n	800df34 <_strtod_l+0x45c>
 800df1e:	4965      	ldr	r1, [pc, #404]	@ (800e0b4 <_strtod_l+0x5dc>)
 800df20:	00db      	lsls	r3, r3, #3
 800df22:	18c9      	adds	r1, r1, r3
 800df24:	0032      	movs	r2, r6
 800df26:	6808      	ldr	r0, [r1, #0]
 800df28:	6849      	ldr	r1, [r1, #4]
 800df2a:	003b      	movs	r3, r7
 800df2c:	f7f4 fb7e 	bl	800262c <__aeabi_dmul>
 800df30:	0006      	movs	r6, r0
 800df32:	000f      	movs	r7, r1
 800df34:	230f      	movs	r3, #15
 800df36:	439c      	bics	r4, r3
 800df38:	d073      	beq.n	800e022 <_strtod_l+0x54a>
 800df3a:	3326      	adds	r3, #38	@ 0x26
 800df3c:	33ff      	adds	r3, #255	@ 0xff
 800df3e:	429c      	cmp	r4, r3
 800df40:	dd4b      	ble.n	800dfda <_strtod_l+0x502>
 800df42:	2300      	movs	r3, #0
 800df44:	9306      	str	r3, [sp, #24]
 800df46:	9307      	str	r3, [sp, #28]
 800df48:	930d      	str	r3, [sp, #52]	@ 0x34
 800df4a:	9308      	str	r3, [sp, #32]
 800df4c:	2322      	movs	r3, #34	@ 0x22
 800df4e:	2600      	movs	r6, #0
 800df50:	9a05      	ldr	r2, [sp, #20]
 800df52:	4f54      	ldr	r7, [pc, #336]	@ (800e0a4 <_strtod_l+0x5cc>)
 800df54:	6013      	str	r3, [r2, #0]
 800df56:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800df58:	42b3      	cmp	r3, r6
 800df5a:	d100      	bne.n	800df5e <_strtod_l+0x486>
 800df5c:	e5f7      	b.n	800db4e <_strtod_l+0x76>
 800df5e:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800df60:	9805      	ldr	r0, [sp, #20]
 800df62:	f001 fb7f 	bl	800f664 <_Bfree>
 800df66:	9908      	ldr	r1, [sp, #32]
 800df68:	9805      	ldr	r0, [sp, #20]
 800df6a:	f001 fb7b 	bl	800f664 <_Bfree>
 800df6e:	9907      	ldr	r1, [sp, #28]
 800df70:	9805      	ldr	r0, [sp, #20]
 800df72:	f001 fb77 	bl	800f664 <_Bfree>
 800df76:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800df78:	9805      	ldr	r0, [sp, #20]
 800df7a:	f001 fb73 	bl	800f664 <_Bfree>
 800df7e:	9906      	ldr	r1, [sp, #24]
 800df80:	9805      	ldr	r0, [sp, #20]
 800df82:	f001 fb6f 	bl	800f664 <_Bfree>
 800df86:	e5e2      	b.n	800db4e <_strtod_l+0x76>
 800df88:	2325      	movs	r3, #37	@ 0x25
 800df8a:	9a06      	ldr	r2, [sp, #24]
 800df8c:	1a9b      	subs	r3, r3, r2
 800df8e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800df90:	4293      	cmp	r3, r2
 800df92:	dbb8      	blt.n	800df06 <_strtod_l+0x42e>
 800df94:	240f      	movs	r4, #15
 800df96:	9b06      	ldr	r3, [sp, #24]
 800df98:	4d46      	ldr	r5, [pc, #280]	@ (800e0b4 <_strtod_l+0x5dc>)
 800df9a:	1ae4      	subs	r4, r4, r3
 800df9c:	00e1      	lsls	r1, r4, #3
 800df9e:	1869      	adds	r1, r5, r1
 800dfa0:	0032      	movs	r2, r6
 800dfa2:	6808      	ldr	r0, [r1, #0]
 800dfa4:	6849      	ldr	r1, [r1, #4]
 800dfa6:	003b      	movs	r3, r7
 800dfa8:	f7f4 fb40 	bl	800262c <__aeabi_dmul>
 800dfac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dfae:	1b1c      	subs	r4, r3, r4
 800dfb0:	00e4      	lsls	r4, r4, #3
 800dfb2:	192d      	adds	r5, r5, r4
 800dfb4:	682a      	ldr	r2, [r5, #0]
 800dfb6:	686b      	ldr	r3, [r5, #4]
 800dfb8:	e789      	b.n	800dece <_strtod_l+0x3f6>
 800dfba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dfbc:	3316      	adds	r3, #22
 800dfbe:	dba2      	blt.n	800df06 <_strtod_l+0x42e>
 800dfc0:	9907      	ldr	r1, [sp, #28]
 800dfc2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dfc4:	4b3b      	ldr	r3, [pc, #236]	@ (800e0b4 <_strtod_l+0x5dc>)
 800dfc6:	1a52      	subs	r2, r2, r1
 800dfc8:	00d2      	lsls	r2, r2, #3
 800dfca:	189b      	adds	r3, r3, r2
 800dfcc:	0030      	movs	r0, r6
 800dfce:	681a      	ldr	r2, [r3, #0]
 800dfd0:	685b      	ldr	r3, [r3, #4]
 800dfd2:	0039      	movs	r1, r7
 800dfd4:	f7f3 fee6 	bl	8001da4 <__aeabi_ddiv>
 800dfd8:	e750      	b.n	800de7c <_strtod_l+0x3a4>
 800dfda:	2300      	movs	r3, #0
 800dfdc:	0030      	movs	r0, r6
 800dfde:	0039      	movs	r1, r7
 800dfe0:	4d35      	ldr	r5, [pc, #212]	@ (800e0b8 <_strtod_l+0x5e0>)
 800dfe2:	1124      	asrs	r4, r4, #4
 800dfe4:	9309      	str	r3, [sp, #36]	@ 0x24
 800dfe6:	2c01      	cmp	r4, #1
 800dfe8:	dc1e      	bgt.n	800e028 <_strtod_l+0x550>
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d001      	beq.n	800dff2 <_strtod_l+0x51a>
 800dfee:	0006      	movs	r6, r0
 800dff0:	000f      	movs	r7, r1
 800dff2:	4b32      	ldr	r3, [pc, #200]	@ (800e0bc <_strtod_l+0x5e4>)
 800dff4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dff6:	18ff      	adds	r7, r7, r3
 800dff8:	4b2f      	ldr	r3, [pc, #188]	@ (800e0b8 <_strtod_l+0x5e0>)
 800dffa:	00d5      	lsls	r5, r2, #3
 800dffc:	195d      	adds	r5, r3, r5
 800dffe:	0032      	movs	r2, r6
 800e000:	6828      	ldr	r0, [r5, #0]
 800e002:	6869      	ldr	r1, [r5, #4]
 800e004:	003b      	movs	r3, r7
 800e006:	f7f4 fb11 	bl	800262c <__aeabi_dmul>
 800e00a:	4b26      	ldr	r3, [pc, #152]	@ (800e0a4 <_strtod_l+0x5cc>)
 800e00c:	4a2c      	ldr	r2, [pc, #176]	@ (800e0c0 <_strtod_l+0x5e8>)
 800e00e:	0006      	movs	r6, r0
 800e010:	400b      	ands	r3, r1
 800e012:	4293      	cmp	r3, r2
 800e014:	d895      	bhi.n	800df42 <_strtod_l+0x46a>
 800e016:	4a2b      	ldr	r2, [pc, #172]	@ (800e0c4 <_strtod_l+0x5ec>)
 800e018:	4293      	cmp	r3, r2
 800e01a:	d913      	bls.n	800e044 <_strtod_l+0x56c>
 800e01c:	2601      	movs	r6, #1
 800e01e:	4f2a      	ldr	r7, [pc, #168]	@ (800e0c8 <_strtod_l+0x5f0>)
 800e020:	4276      	negs	r6, r6
 800e022:	2300      	movs	r3, #0
 800e024:	9309      	str	r3, [sp, #36]	@ 0x24
 800e026:	e086      	b.n	800e136 <_strtod_l+0x65e>
 800e028:	2201      	movs	r2, #1
 800e02a:	4214      	tst	r4, r2
 800e02c:	d004      	beq.n	800e038 <_strtod_l+0x560>
 800e02e:	682a      	ldr	r2, [r5, #0]
 800e030:	686b      	ldr	r3, [r5, #4]
 800e032:	f7f4 fafb 	bl	800262c <__aeabi_dmul>
 800e036:	2301      	movs	r3, #1
 800e038:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e03a:	1064      	asrs	r4, r4, #1
 800e03c:	3201      	adds	r2, #1
 800e03e:	9209      	str	r2, [sp, #36]	@ 0x24
 800e040:	3508      	adds	r5, #8
 800e042:	e7d0      	b.n	800dfe6 <_strtod_l+0x50e>
 800e044:	23d4      	movs	r3, #212	@ 0xd4
 800e046:	049b      	lsls	r3, r3, #18
 800e048:	18cf      	adds	r7, r1, r3
 800e04a:	e7ea      	b.n	800e022 <_strtod_l+0x54a>
 800e04c:	2c00      	cmp	r4, #0
 800e04e:	d0e8      	beq.n	800e022 <_strtod_l+0x54a>
 800e050:	4264      	negs	r4, r4
 800e052:	230f      	movs	r3, #15
 800e054:	0022      	movs	r2, r4
 800e056:	401a      	ands	r2, r3
 800e058:	421c      	tst	r4, r3
 800e05a:	d00a      	beq.n	800e072 <_strtod_l+0x59a>
 800e05c:	4b15      	ldr	r3, [pc, #84]	@ (800e0b4 <_strtod_l+0x5dc>)
 800e05e:	00d2      	lsls	r2, r2, #3
 800e060:	189b      	adds	r3, r3, r2
 800e062:	0030      	movs	r0, r6
 800e064:	681a      	ldr	r2, [r3, #0]
 800e066:	685b      	ldr	r3, [r3, #4]
 800e068:	0039      	movs	r1, r7
 800e06a:	f7f3 fe9b 	bl	8001da4 <__aeabi_ddiv>
 800e06e:	0006      	movs	r6, r0
 800e070:	000f      	movs	r7, r1
 800e072:	1124      	asrs	r4, r4, #4
 800e074:	d0d5      	beq.n	800e022 <_strtod_l+0x54a>
 800e076:	2c1f      	cmp	r4, #31
 800e078:	dd28      	ble.n	800e0cc <_strtod_l+0x5f4>
 800e07a:	2300      	movs	r3, #0
 800e07c:	9306      	str	r3, [sp, #24]
 800e07e:	9307      	str	r3, [sp, #28]
 800e080:	930d      	str	r3, [sp, #52]	@ 0x34
 800e082:	9308      	str	r3, [sp, #32]
 800e084:	2322      	movs	r3, #34	@ 0x22
 800e086:	9a05      	ldr	r2, [sp, #20]
 800e088:	2600      	movs	r6, #0
 800e08a:	6013      	str	r3, [r2, #0]
 800e08c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e08e:	2700      	movs	r7, #0
 800e090:	2b00      	cmp	r3, #0
 800e092:	d000      	beq.n	800e096 <_strtod_l+0x5be>
 800e094:	e763      	b.n	800df5e <_strtod_l+0x486>
 800e096:	e55a      	b.n	800db4e <_strtod_l+0x76>
 800e098:	00004e1f 	.word	0x00004e1f
 800e09c:	0801beff 	.word	0x0801beff
 800e0a0:	0801bf04 	.word	0x0801bf04
 800e0a4:	7ff00000 	.word	0x7ff00000
 800e0a8:	0801bef6 	.word	0x0801bef6
 800e0ac:	0801bef9 	.word	0x0801bef9
 800e0b0:	0801c2ae 	.word	0x0801c2ae
 800e0b4:	0801c178 	.word	0x0801c178
 800e0b8:	0801c150 	.word	0x0801c150
 800e0bc:	fcb00000 	.word	0xfcb00000
 800e0c0:	7ca00000 	.word	0x7ca00000
 800e0c4:	7c900000 	.word	0x7c900000
 800e0c8:	7fefffff 	.word	0x7fefffff
 800e0cc:	2310      	movs	r3, #16
 800e0ce:	0022      	movs	r2, r4
 800e0d0:	401a      	ands	r2, r3
 800e0d2:	9209      	str	r2, [sp, #36]	@ 0x24
 800e0d4:	421c      	tst	r4, r3
 800e0d6:	d001      	beq.n	800e0dc <_strtod_l+0x604>
 800e0d8:	335a      	adds	r3, #90	@ 0x5a
 800e0da:	9309      	str	r3, [sp, #36]	@ 0x24
 800e0dc:	0030      	movs	r0, r6
 800e0de:	0039      	movs	r1, r7
 800e0e0:	2300      	movs	r3, #0
 800e0e2:	4dbf      	ldr	r5, [pc, #764]	@ (800e3e0 <_strtod_l+0x908>)
 800e0e4:	2201      	movs	r2, #1
 800e0e6:	4214      	tst	r4, r2
 800e0e8:	d004      	beq.n	800e0f4 <_strtod_l+0x61c>
 800e0ea:	682a      	ldr	r2, [r5, #0]
 800e0ec:	686b      	ldr	r3, [r5, #4]
 800e0ee:	f7f4 fa9d 	bl	800262c <__aeabi_dmul>
 800e0f2:	2301      	movs	r3, #1
 800e0f4:	1064      	asrs	r4, r4, #1
 800e0f6:	3508      	adds	r5, #8
 800e0f8:	2c00      	cmp	r4, #0
 800e0fa:	d1f3      	bne.n	800e0e4 <_strtod_l+0x60c>
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d001      	beq.n	800e104 <_strtod_l+0x62c>
 800e100:	0006      	movs	r6, r0
 800e102:	000f      	movs	r7, r1
 800e104:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e106:	2b00      	cmp	r3, #0
 800e108:	d00d      	beq.n	800e126 <_strtod_l+0x64e>
 800e10a:	236b      	movs	r3, #107	@ 0x6b
 800e10c:	007a      	lsls	r2, r7, #1
 800e10e:	0d52      	lsrs	r2, r2, #21
 800e110:	0039      	movs	r1, r7
 800e112:	1a9b      	subs	r3, r3, r2
 800e114:	2b00      	cmp	r3, #0
 800e116:	dd06      	ble.n	800e126 <_strtod_l+0x64e>
 800e118:	2b1f      	cmp	r3, #31
 800e11a:	dd5a      	ble.n	800e1d2 <_strtod_l+0x6fa>
 800e11c:	2600      	movs	r6, #0
 800e11e:	2b34      	cmp	r3, #52	@ 0x34
 800e120:	dd50      	ble.n	800e1c4 <_strtod_l+0x6ec>
 800e122:	27dc      	movs	r7, #220	@ 0xdc
 800e124:	04bf      	lsls	r7, r7, #18
 800e126:	2200      	movs	r2, #0
 800e128:	2300      	movs	r3, #0
 800e12a:	0030      	movs	r0, r6
 800e12c:	0039      	movs	r1, r7
 800e12e:	f7f2 f997 	bl	8000460 <__aeabi_dcmpeq>
 800e132:	2800      	cmp	r0, #0
 800e134:	d1a1      	bne.n	800e07a <_strtod_l+0x5a2>
 800e136:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e138:	9a08      	ldr	r2, [sp, #32]
 800e13a:	9300      	str	r3, [sp, #0]
 800e13c:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800e13e:	9b06      	ldr	r3, [sp, #24]
 800e140:	9805      	ldr	r0, [sp, #20]
 800e142:	f001 faf7 	bl	800f734 <__s2b>
 800e146:	900d      	str	r0, [sp, #52]	@ 0x34
 800e148:	2800      	cmp	r0, #0
 800e14a:	d100      	bne.n	800e14e <_strtod_l+0x676>
 800e14c:	e6f9      	b.n	800df42 <_strtod_l+0x46a>
 800e14e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e150:	9907      	ldr	r1, [sp, #28]
 800e152:	17da      	asrs	r2, r3, #31
 800e154:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e156:	1a5b      	subs	r3, r3, r1
 800e158:	401a      	ands	r2, r3
 800e15a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e15c:	9217      	str	r2, [sp, #92]	@ 0x5c
 800e15e:	43db      	mvns	r3, r3
 800e160:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e162:	17db      	asrs	r3, r3, #31
 800e164:	401a      	ands	r2, r3
 800e166:	2300      	movs	r3, #0
 800e168:	921a      	str	r2, [sp, #104]	@ 0x68
 800e16a:	9306      	str	r3, [sp, #24]
 800e16c:	9307      	str	r3, [sp, #28]
 800e16e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e170:	9805      	ldr	r0, [sp, #20]
 800e172:	6859      	ldr	r1, [r3, #4]
 800e174:	f001 fa32 	bl	800f5dc <_Balloc>
 800e178:	9008      	str	r0, [sp, #32]
 800e17a:	2800      	cmp	r0, #0
 800e17c:	d100      	bne.n	800e180 <_strtod_l+0x6a8>
 800e17e:	e6e5      	b.n	800df4c <_strtod_l+0x474>
 800e180:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e182:	300c      	adds	r0, #12
 800e184:	0019      	movs	r1, r3
 800e186:	691a      	ldr	r2, [r3, #16]
 800e188:	310c      	adds	r1, #12
 800e18a:	3202      	adds	r2, #2
 800e18c:	0092      	lsls	r2, r2, #2
 800e18e:	f000 fdae 	bl	800ecee <memcpy>
 800e192:	ab20      	add	r3, sp, #128	@ 0x80
 800e194:	9301      	str	r3, [sp, #4]
 800e196:	ab1f      	add	r3, sp, #124	@ 0x7c
 800e198:	9300      	str	r3, [sp, #0]
 800e19a:	0032      	movs	r2, r6
 800e19c:	003b      	movs	r3, r7
 800e19e:	9805      	ldr	r0, [sp, #20]
 800e1a0:	9610      	str	r6, [sp, #64]	@ 0x40
 800e1a2:	9711      	str	r7, [sp, #68]	@ 0x44
 800e1a4:	f001 fe16 	bl	800fdd4 <__d2b>
 800e1a8:	901e      	str	r0, [sp, #120]	@ 0x78
 800e1aa:	2800      	cmp	r0, #0
 800e1ac:	d100      	bne.n	800e1b0 <_strtod_l+0x6d8>
 800e1ae:	e6cd      	b.n	800df4c <_strtod_l+0x474>
 800e1b0:	2101      	movs	r1, #1
 800e1b2:	9805      	ldr	r0, [sp, #20]
 800e1b4:	f001 fb5a 	bl	800f86c <__i2b>
 800e1b8:	9007      	str	r0, [sp, #28]
 800e1ba:	2800      	cmp	r0, #0
 800e1bc:	d10e      	bne.n	800e1dc <_strtod_l+0x704>
 800e1be:	2300      	movs	r3, #0
 800e1c0:	9307      	str	r3, [sp, #28]
 800e1c2:	e6c3      	b.n	800df4c <_strtod_l+0x474>
 800e1c4:	234b      	movs	r3, #75	@ 0x4b
 800e1c6:	1a9a      	subs	r2, r3, r2
 800e1c8:	3b4c      	subs	r3, #76	@ 0x4c
 800e1ca:	4093      	lsls	r3, r2
 800e1cc:	4019      	ands	r1, r3
 800e1ce:	000f      	movs	r7, r1
 800e1d0:	e7a9      	b.n	800e126 <_strtod_l+0x64e>
 800e1d2:	2201      	movs	r2, #1
 800e1d4:	4252      	negs	r2, r2
 800e1d6:	409a      	lsls	r2, r3
 800e1d8:	4016      	ands	r6, r2
 800e1da:	e7a4      	b.n	800e126 <_strtod_l+0x64e>
 800e1dc:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800e1de:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e1e0:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 800e1e2:	1ad4      	subs	r4, r2, r3
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	db01      	blt.n	800e1ec <_strtod_l+0x714>
 800e1e8:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 800e1ea:	195d      	adds	r5, r3, r5
 800e1ec:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e1ee:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800e1f0:	1a5b      	subs	r3, r3, r1
 800e1f2:	2136      	movs	r1, #54	@ 0x36
 800e1f4:	189b      	adds	r3, r3, r2
 800e1f6:	1a8a      	subs	r2, r1, r2
 800e1f8:	497a      	ldr	r1, [pc, #488]	@ (800e3e4 <_strtod_l+0x90c>)
 800e1fa:	2001      	movs	r0, #1
 800e1fc:	468c      	mov	ip, r1
 800e1fe:	2100      	movs	r1, #0
 800e200:	3b01      	subs	r3, #1
 800e202:	9116      	str	r1, [sp, #88]	@ 0x58
 800e204:	9014      	str	r0, [sp, #80]	@ 0x50
 800e206:	4563      	cmp	r3, ip
 800e208:	da06      	bge.n	800e218 <_strtod_l+0x740>
 800e20a:	4661      	mov	r1, ip
 800e20c:	1ac9      	subs	r1, r1, r3
 800e20e:	1a52      	subs	r2, r2, r1
 800e210:	291f      	cmp	r1, #31
 800e212:	dc3f      	bgt.n	800e294 <_strtod_l+0x7bc>
 800e214:	4088      	lsls	r0, r1
 800e216:	9014      	str	r0, [sp, #80]	@ 0x50
 800e218:	18ab      	adds	r3, r5, r2
 800e21a:	930e      	str	r3, [sp, #56]	@ 0x38
 800e21c:	18a4      	adds	r4, r4, r2
 800e21e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e220:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e222:	191c      	adds	r4, r3, r4
 800e224:	002b      	movs	r3, r5
 800e226:	4295      	cmp	r5, r2
 800e228:	dd00      	ble.n	800e22c <_strtod_l+0x754>
 800e22a:	0013      	movs	r3, r2
 800e22c:	42a3      	cmp	r3, r4
 800e22e:	dd00      	ble.n	800e232 <_strtod_l+0x75a>
 800e230:	0023      	movs	r3, r4
 800e232:	2b00      	cmp	r3, #0
 800e234:	dd04      	ble.n	800e240 <_strtod_l+0x768>
 800e236:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e238:	1ae4      	subs	r4, r4, r3
 800e23a:	1ad2      	subs	r2, r2, r3
 800e23c:	920e      	str	r2, [sp, #56]	@ 0x38
 800e23e:	1aed      	subs	r5, r5, r3
 800e240:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e242:	2b00      	cmp	r3, #0
 800e244:	dd16      	ble.n	800e274 <_strtod_l+0x79c>
 800e246:	001a      	movs	r2, r3
 800e248:	9907      	ldr	r1, [sp, #28]
 800e24a:	9805      	ldr	r0, [sp, #20]
 800e24c:	f001 fbd8 	bl	800fa00 <__pow5mult>
 800e250:	9007      	str	r0, [sp, #28]
 800e252:	2800      	cmp	r0, #0
 800e254:	d0b3      	beq.n	800e1be <_strtod_l+0x6e6>
 800e256:	0001      	movs	r1, r0
 800e258:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 800e25a:	9805      	ldr	r0, [sp, #20]
 800e25c:	f001 fb1e 	bl	800f89c <__multiply>
 800e260:	9013      	str	r0, [sp, #76]	@ 0x4c
 800e262:	2800      	cmp	r0, #0
 800e264:	d100      	bne.n	800e268 <_strtod_l+0x790>
 800e266:	e671      	b.n	800df4c <_strtod_l+0x474>
 800e268:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800e26a:	9805      	ldr	r0, [sp, #20]
 800e26c:	f001 f9fa 	bl	800f664 <_Bfree>
 800e270:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e272:	931e      	str	r3, [sp, #120]	@ 0x78
 800e274:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e276:	2b00      	cmp	r3, #0
 800e278:	dc12      	bgt.n	800e2a0 <_strtod_l+0x7c8>
 800e27a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	dd18      	ble.n	800e2b2 <_strtod_l+0x7da>
 800e280:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e282:	9908      	ldr	r1, [sp, #32]
 800e284:	9805      	ldr	r0, [sp, #20]
 800e286:	f001 fbbb 	bl	800fa00 <__pow5mult>
 800e28a:	9008      	str	r0, [sp, #32]
 800e28c:	2800      	cmp	r0, #0
 800e28e:	d110      	bne.n	800e2b2 <_strtod_l+0x7da>
 800e290:	2300      	movs	r3, #0
 800e292:	e65a      	b.n	800df4a <_strtod_l+0x472>
 800e294:	4954      	ldr	r1, [pc, #336]	@ (800e3e8 <_strtod_l+0x910>)
 800e296:	1acb      	subs	r3, r1, r3
 800e298:	0001      	movs	r1, r0
 800e29a:	4099      	lsls	r1, r3
 800e29c:	9116      	str	r1, [sp, #88]	@ 0x58
 800e29e:	e7ba      	b.n	800e216 <_strtod_l+0x73e>
 800e2a0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e2a2:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800e2a4:	9805      	ldr	r0, [sp, #20]
 800e2a6:	f001 fc07 	bl	800fab8 <__lshift>
 800e2aa:	901e      	str	r0, [sp, #120]	@ 0x78
 800e2ac:	2800      	cmp	r0, #0
 800e2ae:	d1e4      	bne.n	800e27a <_strtod_l+0x7a2>
 800e2b0:	e64c      	b.n	800df4c <_strtod_l+0x474>
 800e2b2:	2c00      	cmp	r4, #0
 800e2b4:	dd07      	ble.n	800e2c6 <_strtod_l+0x7ee>
 800e2b6:	0022      	movs	r2, r4
 800e2b8:	9908      	ldr	r1, [sp, #32]
 800e2ba:	9805      	ldr	r0, [sp, #20]
 800e2bc:	f001 fbfc 	bl	800fab8 <__lshift>
 800e2c0:	9008      	str	r0, [sp, #32]
 800e2c2:	2800      	cmp	r0, #0
 800e2c4:	d0e4      	beq.n	800e290 <_strtod_l+0x7b8>
 800e2c6:	2d00      	cmp	r5, #0
 800e2c8:	dd08      	ble.n	800e2dc <_strtod_l+0x804>
 800e2ca:	002a      	movs	r2, r5
 800e2cc:	9907      	ldr	r1, [sp, #28]
 800e2ce:	9805      	ldr	r0, [sp, #20]
 800e2d0:	f001 fbf2 	bl	800fab8 <__lshift>
 800e2d4:	9007      	str	r0, [sp, #28]
 800e2d6:	2800      	cmp	r0, #0
 800e2d8:	d100      	bne.n	800e2dc <_strtod_l+0x804>
 800e2da:	e637      	b.n	800df4c <_strtod_l+0x474>
 800e2dc:	9a08      	ldr	r2, [sp, #32]
 800e2de:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800e2e0:	9805      	ldr	r0, [sp, #20]
 800e2e2:	f001 fc71 	bl	800fbc8 <__mdiff>
 800e2e6:	9006      	str	r0, [sp, #24]
 800e2e8:	2800      	cmp	r0, #0
 800e2ea:	d100      	bne.n	800e2ee <_strtod_l+0x816>
 800e2ec:	e62e      	b.n	800df4c <_strtod_l+0x474>
 800e2ee:	68c3      	ldr	r3, [r0, #12]
 800e2f0:	9907      	ldr	r1, [sp, #28]
 800e2f2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e2f4:	2300      	movs	r3, #0
 800e2f6:	60c3      	str	r3, [r0, #12]
 800e2f8:	f001 fc4a 	bl	800fb90 <__mcmp>
 800e2fc:	2800      	cmp	r0, #0
 800e2fe:	da3b      	bge.n	800e378 <_strtod_l+0x8a0>
 800e300:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e302:	4333      	orrs	r3, r6
 800e304:	d167      	bne.n	800e3d6 <_strtod_l+0x8fe>
 800e306:	033b      	lsls	r3, r7, #12
 800e308:	d165      	bne.n	800e3d6 <_strtod_l+0x8fe>
 800e30a:	22d6      	movs	r2, #214	@ 0xd6
 800e30c:	4b37      	ldr	r3, [pc, #220]	@ (800e3ec <_strtod_l+0x914>)
 800e30e:	04d2      	lsls	r2, r2, #19
 800e310:	403b      	ands	r3, r7
 800e312:	4293      	cmp	r3, r2
 800e314:	d95f      	bls.n	800e3d6 <_strtod_l+0x8fe>
 800e316:	9b06      	ldr	r3, [sp, #24]
 800e318:	695b      	ldr	r3, [r3, #20]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d103      	bne.n	800e326 <_strtod_l+0x84e>
 800e31e:	9b06      	ldr	r3, [sp, #24]
 800e320:	691b      	ldr	r3, [r3, #16]
 800e322:	2b01      	cmp	r3, #1
 800e324:	dd57      	ble.n	800e3d6 <_strtod_l+0x8fe>
 800e326:	9906      	ldr	r1, [sp, #24]
 800e328:	2201      	movs	r2, #1
 800e32a:	9805      	ldr	r0, [sp, #20]
 800e32c:	f001 fbc4 	bl	800fab8 <__lshift>
 800e330:	9907      	ldr	r1, [sp, #28]
 800e332:	9006      	str	r0, [sp, #24]
 800e334:	f001 fc2c 	bl	800fb90 <__mcmp>
 800e338:	2800      	cmp	r0, #0
 800e33a:	dd4c      	ble.n	800e3d6 <_strtod_l+0x8fe>
 800e33c:	4b2b      	ldr	r3, [pc, #172]	@ (800e3ec <_strtod_l+0x914>)
 800e33e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e340:	403b      	ands	r3, r7
 800e342:	2a00      	cmp	r2, #0
 800e344:	d074      	beq.n	800e430 <_strtod_l+0x958>
 800e346:	22d6      	movs	r2, #214	@ 0xd6
 800e348:	04d2      	lsls	r2, r2, #19
 800e34a:	4293      	cmp	r3, r2
 800e34c:	d870      	bhi.n	800e430 <_strtod_l+0x958>
 800e34e:	22dc      	movs	r2, #220	@ 0xdc
 800e350:	0492      	lsls	r2, r2, #18
 800e352:	4293      	cmp	r3, r2
 800e354:	d800      	bhi.n	800e358 <_strtod_l+0x880>
 800e356:	e695      	b.n	800e084 <_strtod_l+0x5ac>
 800e358:	0030      	movs	r0, r6
 800e35a:	0039      	movs	r1, r7
 800e35c:	4b24      	ldr	r3, [pc, #144]	@ (800e3f0 <_strtod_l+0x918>)
 800e35e:	2200      	movs	r2, #0
 800e360:	f7f4 f964 	bl	800262c <__aeabi_dmul>
 800e364:	4b21      	ldr	r3, [pc, #132]	@ (800e3ec <_strtod_l+0x914>)
 800e366:	0006      	movs	r6, r0
 800e368:	000f      	movs	r7, r1
 800e36a:	420b      	tst	r3, r1
 800e36c:	d000      	beq.n	800e370 <_strtod_l+0x898>
 800e36e:	e5f6      	b.n	800df5e <_strtod_l+0x486>
 800e370:	2322      	movs	r3, #34	@ 0x22
 800e372:	9a05      	ldr	r2, [sp, #20]
 800e374:	6013      	str	r3, [r2, #0]
 800e376:	e5f2      	b.n	800df5e <_strtod_l+0x486>
 800e378:	970e      	str	r7, [sp, #56]	@ 0x38
 800e37a:	2800      	cmp	r0, #0
 800e37c:	d175      	bne.n	800e46a <_strtod_l+0x992>
 800e37e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e380:	033b      	lsls	r3, r7, #12
 800e382:	0b1b      	lsrs	r3, r3, #12
 800e384:	2a00      	cmp	r2, #0
 800e386:	d039      	beq.n	800e3fc <_strtod_l+0x924>
 800e388:	4a1a      	ldr	r2, [pc, #104]	@ (800e3f4 <_strtod_l+0x91c>)
 800e38a:	4293      	cmp	r3, r2
 800e38c:	d138      	bne.n	800e400 <_strtod_l+0x928>
 800e38e:	2101      	movs	r1, #1
 800e390:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e392:	4249      	negs	r1, r1
 800e394:	0032      	movs	r2, r6
 800e396:	0008      	movs	r0, r1
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d00b      	beq.n	800e3b4 <_strtod_l+0x8dc>
 800e39c:	24d4      	movs	r4, #212	@ 0xd4
 800e39e:	4b13      	ldr	r3, [pc, #76]	@ (800e3ec <_strtod_l+0x914>)
 800e3a0:	0008      	movs	r0, r1
 800e3a2:	403b      	ands	r3, r7
 800e3a4:	04e4      	lsls	r4, r4, #19
 800e3a6:	42a3      	cmp	r3, r4
 800e3a8:	d804      	bhi.n	800e3b4 <_strtod_l+0x8dc>
 800e3aa:	306c      	adds	r0, #108	@ 0x6c
 800e3ac:	0d1b      	lsrs	r3, r3, #20
 800e3ae:	1ac3      	subs	r3, r0, r3
 800e3b0:	4099      	lsls	r1, r3
 800e3b2:	0008      	movs	r0, r1
 800e3b4:	4282      	cmp	r2, r0
 800e3b6:	d123      	bne.n	800e400 <_strtod_l+0x928>
 800e3b8:	4b0f      	ldr	r3, [pc, #60]	@ (800e3f8 <_strtod_l+0x920>)
 800e3ba:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800e3bc:	4299      	cmp	r1, r3
 800e3be:	d102      	bne.n	800e3c6 <_strtod_l+0x8ee>
 800e3c0:	3201      	adds	r2, #1
 800e3c2:	d100      	bne.n	800e3c6 <_strtod_l+0x8ee>
 800e3c4:	e5c2      	b.n	800df4c <_strtod_l+0x474>
 800e3c6:	4b09      	ldr	r3, [pc, #36]	@ (800e3ec <_strtod_l+0x914>)
 800e3c8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e3ca:	2600      	movs	r6, #0
 800e3cc:	401a      	ands	r2, r3
 800e3ce:	0013      	movs	r3, r2
 800e3d0:	2280      	movs	r2, #128	@ 0x80
 800e3d2:	0352      	lsls	r2, r2, #13
 800e3d4:	189f      	adds	r7, r3, r2
 800e3d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d1bd      	bne.n	800e358 <_strtod_l+0x880>
 800e3dc:	e5bf      	b.n	800df5e <_strtod_l+0x486>
 800e3de:	46c0      	nop			@ (mov r8, r8)
 800e3e0:	0801bf30 	.word	0x0801bf30
 800e3e4:	fffffc02 	.word	0xfffffc02
 800e3e8:	fffffbe2 	.word	0xfffffbe2
 800e3ec:	7ff00000 	.word	0x7ff00000
 800e3f0:	39500000 	.word	0x39500000
 800e3f4:	000fffff 	.word	0x000fffff
 800e3f8:	7fefffff 	.word	0x7fefffff
 800e3fc:	4333      	orrs	r3, r6
 800e3fe:	d09d      	beq.n	800e33c <_strtod_l+0x864>
 800e400:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e402:	2b00      	cmp	r3, #0
 800e404:	d01c      	beq.n	800e440 <_strtod_l+0x968>
 800e406:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e408:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800e40a:	4213      	tst	r3, r2
 800e40c:	d0e3      	beq.n	800e3d6 <_strtod_l+0x8fe>
 800e40e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e410:	0030      	movs	r0, r6
 800e412:	0039      	movs	r1, r7
 800e414:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e416:	2b00      	cmp	r3, #0
 800e418:	d016      	beq.n	800e448 <_strtod_l+0x970>
 800e41a:	f7ff fb45 	bl	800daa8 <sulp>
 800e41e:	0002      	movs	r2, r0
 800e420:	000b      	movs	r3, r1
 800e422:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800e424:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800e426:	f7f3 f959 	bl	80016dc <__aeabi_dadd>
 800e42a:	0006      	movs	r6, r0
 800e42c:	000f      	movs	r7, r1
 800e42e:	e7d2      	b.n	800e3d6 <_strtod_l+0x8fe>
 800e430:	2601      	movs	r6, #1
 800e432:	4a92      	ldr	r2, [pc, #584]	@ (800e67c <_strtod_l+0xba4>)
 800e434:	4276      	negs	r6, r6
 800e436:	189b      	adds	r3, r3, r2
 800e438:	4a91      	ldr	r2, [pc, #580]	@ (800e680 <_strtod_l+0xba8>)
 800e43a:	431a      	orrs	r2, r3
 800e43c:	0017      	movs	r7, r2
 800e43e:	e7ca      	b.n	800e3d6 <_strtod_l+0x8fe>
 800e440:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e442:	4233      	tst	r3, r6
 800e444:	d0c7      	beq.n	800e3d6 <_strtod_l+0x8fe>
 800e446:	e7e2      	b.n	800e40e <_strtod_l+0x936>
 800e448:	f7ff fb2e 	bl	800daa8 <sulp>
 800e44c:	0002      	movs	r2, r0
 800e44e:	000b      	movs	r3, r1
 800e450:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800e452:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800e454:	f7f4 fbb2 	bl	8002bbc <__aeabi_dsub>
 800e458:	2200      	movs	r2, #0
 800e45a:	2300      	movs	r3, #0
 800e45c:	0006      	movs	r6, r0
 800e45e:	000f      	movs	r7, r1
 800e460:	f7f1 fffe 	bl	8000460 <__aeabi_dcmpeq>
 800e464:	2800      	cmp	r0, #0
 800e466:	d0b6      	beq.n	800e3d6 <_strtod_l+0x8fe>
 800e468:	e60c      	b.n	800e084 <_strtod_l+0x5ac>
 800e46a:	9907      	ldr	r1, [sp, #28]
 800e46c:	9806      	ldr	r0, [sp, #24]
 800e46e:	f001 fd11 	bl	800fe94 <__ratio>
 800e472:	2380      	movs	r3, #128	@ 0x80
 800e474:	2200      	movs	r2, #0
 800e476:	05db      	lsls	r3, r3, #23
 800e478:	0004      	movs	r4, r0
 800e47a:	000d      	movs	r5, r1
 800e47c:	f7f2 f800 	bl	8000480 <__aeabi_dcmple>
 800e480:	2800      	cmp	r0, #0
 800e482:	d06c      	beq.n	800e55e <_strtod_l+0xa86>
 800e484:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e486:	2b00      	cmp	r3, #0
 800e488:	d177      	bne.n	800e57a <_strtod_l+0xaa2>
 800e48a:	2e00      	cmp	r6, #0
 800e48c:	d157      	bne.n	800e53e <_strtod_l+0xa66>
 800e48e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e490:	031b      	lsls	r3, r3, #12
 800e492:	d15a      	bne.n	800e54a <_strtod_l+0xa72>
 800e494:	2200      	movs	r2, #0
 800e496:	0020      	movs	r0, r4
 800e498:	0029      	movs	r1, r5
 800e49a:	4b7a      	ldr	r3, [pc, #488]	@ (800e684 <_strtod_l+0xbac>)
 800e49c:	f7f1 ffe6 	bl	800046c <__aeabi_dcmplt>
 800e4a0:	2800      	cmp	r0, #0
 800e4a2:	d159      	bne.n	800e558 <_strtod_l+0xa80>
 800e4a4:	0020      	movs	r0, r4
 800e4a6:	0029      	movs	r1, r5
 800e4a8:	2200      	movs	r2, #0
 800e4aa:	4b77      	ldr	r3, [pc, #476]	@ (800e688 <_strtod_l+0xbb0>)
 800e4ac:	f7f4 f8be 	bl	800262c <__aeabi_dmul>
 800e4b0:	0004      	movs	r4, r0
 800e4b2:	000d      	movs	r5, r1
 800e4b4:	2380      	movs	r3, #128	@ 0x80
 800e4b6:	061b      	lsls	r3, r3, #24
 800e4b8:	18eb      	adds	r3, r5, r3
 800e4ba:	940a      	str	r4, [sp, #40]	@ 0x28
 800e4bc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e4be:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e4c0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e4c2:	9214      	str	r2, [sp, #80]	@ 0x50
 800e4c4:	9315      	str	r3, [sp, #84]	@ 0x54
 800e4c6:	4a71      	ldr	r2, [pc, #452]	@ (800e68c <_strtod_l+0xbb4>)
 800e4c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e4ca:	4013      	ands	r3, r2
 800e4cc:	9316      	str	r3, [sp, #88]	@ 0x58
 800e4ce:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800e4d0:	4b6f      	ldr	r3, [pc, #444]	@ (800e690 <_strtod_l+0xbb8>)
 800e4d2:	429a      	cmp	r2, r3
 800e4d4:	d000      	beq.n	800e4d8 <_strtod_l+0xa00>
 800e4d6:	e087      	b.n	800e5e8 <_strtod_l+0xb10>
 800e4d8:	4a6e      	ldr	r2, [pc, #440]	@ (800e694 <_strtod_l+0xbbc>)
 800e4da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e4dc:	4694      	mov	ip, r2
 800e4de:	4463      	add	r3, ip
 800e4e0:	001f      	movs	r7, r3
 800e4e2:	0030      	movs	r0, r6
 800e4e4:	0019      	movs	r1, r3
 800e4e6:	f001 fc09 	bl	800fcfc <__ulp>
 800e4ea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e4ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e4ee:	f7f4 f89d 	bl	800262c <__aeabi_dmul>
 800e4f2:	0032      	movs	r2, r6
 800e4f4:	003b      	movs	r3, r7
 800e4f6:	f7f3 f8f1 	bl	80016dc <__aeabi_dadd>
 800e4fa:	4a64      	ldr	r2, [pc, #400]	@ (800e68c <_strtod_l+0xbb4>)
 800e4fc:	4b66      	ldr	r3, [pc, #408]	@ (800e698 <_strtod_l+0xbc0>)
 800e4fe:	0006      	movs	r6, r0
 800e500:	400a      	ands	r2, r1
 800e502:	429a      	cmp	r2, r3
 800e504:	d940      	bls.n	800e588 <_strtod_l+0xab0>
 800e506:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e508:	4a64      	ldr	r2, [pc, #400]	@ (800e69c <_strtod_l+0xbc4>)
 800e50a:	4293      	cmp	r3, r2
 800e50c:	d103      	bne.n	800e516 <_strtod_l+0xa3e>
 800e50e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e510:	3301      	adds	r3, #1
 800e512:	d100      	bne.n	800e516 <_strtod_l+0xa3e>
 800e514:	e51a      	b.n	800df4c <_strtod_l+0x474>
 800e516:	2601      	movs	r6, #1
 800e518:	4f60      	ldr	r7, [pc, #384]	@ (800e69c <_strtod_l+0xbc4>)
 800e51a:	4276      	negs	r6, r6
 800e51c:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800e51e:	9805      	ldr	r0, [sp, #20]
 800e520:	f001 f8a0 	bl	800f664 <_Bfree>
 800e524:	9908      	ldr	r1, [sp, #32]
 800e526:	9805      	ldr	r0, [sp, #20]
 800e528:	f001 f89c 	bl	800f664 <_Bfree>
 800e52c:	9907      	ldr	r1, [sp, #28]
 800e52e:	9805      	ldr	r0, [sp, #20]
 800e530:	f001 f898 	bl	800f664 <_Bfree>
 800e534:	9906      	ldr	r1, [sp, #24]
 800e536:	9805      	ldr	r0, [sp, #20]
 800e538:	f001 f894 	bl	800f664 <_Bfree>
 800e53c:	e617      	b.n	800e16e <_strtod_l+0x696>
 800e53e:	2e01      	cmp	r6, #1
 800e540:	d103      	bne.n	800e54a <_strtod_l+0xa72>
 800e542:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e544:	2b00      	cmp	r3, #0
 800e546:	d100      	bne.n	800e54a <_strtod_l+0xa72>
 800e548:	e59c      	b.n	800e084 <_strtod_l+0x5ac>
 800e54a:	2300      	movs	r3, #0
 800e54c:	4c54      	ldr	r4, [pc, #336]	@ (800e6a0 <_strtod_l+0xbc8>)
 800e54e:	4d4d      	ldr	r5, [pc, #308]	@ (800e684 <_strtod_l+0xbac>)
 800e550:	930a      	str	r3, [sp, #40]	@ 0x28
 800e552:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e554:	2400      	movs	r4, #0
 800e556:	e7b2      	b.n	800e4be <_strtod_l+0x9e6>
 800e558:	2400      	movs	r4, #0
 800e55a:	4d4b      	ldr	r5, [pc, #300]	@ (800e688 <_strtod_l+0xbb0>)
 800e55c:	e7aa      	b.n	800e4b4 <_strtod_l+0x9dc>
 800e55e:	0020      	movs	r0, r4
 800e560:	0029      	movs	r1, r5
 800e562:	4b49      	ldr	r3, [pc, #292]	@ (800e688 <_strtod_l+0xbb0>)
 800e564:	2200      	movs	r2, #0
 800e566:	f7f4 f861 	bl	800262c <__aeabi_dmul>
 800e56a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e56c:	0004      	movs	r4, r0
 800e56e:	000d      	movs	r5, r1
 800e570:	2b00      	cmp	r3, #0
 800e572:	d09f      	beq.n	800e4b4 <_strtod_l+0x9dc>
 800e574:	940a      	str	r4, [sp, #40]	@ 0x28
 800e576:	950b      	str	r5, [sp, #44]	@ 0x2c
 800e578:	e7a1      	b.n	800e4be <_strtod_l+0x9e6>
 800e57a:	2300      	movs	r3, #0
 800e57c:	4c41      	ldr	r4, [pc, #260]	@ (800e684 <_strtod_l+0xbac>)
 800e57e:	0025      	movs	r5, r4
 800e580:	930a      	str	r3, [sp, #40]	@ 0x28
 800e582:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e584:	001c      	movs	r4, r3
 800e586:	e79a      	b.n	800e4be <_strtod_l+0x9e6>
 800e588:	23d4      	movs	r3, #212	@ 0xd4
 800e58a:	049b      	lsls	r3, r3, #18
 800e58c:	18cf      	adds	r7, r1, r3
 800e58e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e590:	9710      	str	r7, [sp, #64]	@ 0x40
 800e592:	2b00      	cmp	r3, #0
 800e594:	d1c2      	bne.n	800e51c <_strtod_l+0xa44>
 800e596:	4b3d      	ldr	r3, [pc, #244]	@ (800e68c <_strtod_l+0xbb4>)
 800e598:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800e59a:	403b      	ands	r3, r7
 800e59c:	429a      	cmp	r2, r3
 800e59e:	d1bd      	bne.n	800e51c <_strtod_l+0xa44>
 800e5a0:	0020      	movs	r0, r4
 800e5a2:	0029      	movs	r1, r5
 800e5a4:	f7f2 f848 	bl	8000638 <__aeabi_d2lz>
 800e5a8:	f7f2 f8a0 	bl	80006ec <__aeabi_l2d>
 800e5ac:	0002      	movs	r2, r0
 800e5ae:	000b      	movs	r3, r1
 800e5b0:	0020      	movs	r0, r4
 800e5b2:	0029      	movs	r1, r5
 800e5b4:	f7f4 fb02 	bl	8002bbc <__aeabi_dsub>
 800e5b8:	033c      	lsls	r4, r7, #12
 800e5ba:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e5bc:	0b24      	lsrs	r4, r4, #12
 800e5be:	4334      	orrs	r4, r6
 800e5c0:	900e      	str	r0, [sp, #56]	@ 0x38
 800e5c2:	910f      	str	r1, [sp, #60]	@ 0x3c
 800e5c4:	4a37      	ldr	r2, [pc, #220]	@ (800e6a4 <_strtod_l+0xbcc>)
 800e5c6:	431c      	orrs	r4, r3
 800e5c8:	d052      	beq.n	800e670 <_strtod_l+0xb98>
 800e5ca:	4b37      	ldr	r3, [pc, #220]	@ (800e6a8 <_strtod_l+0xbd0>)
 800e5cc:	f7f1 ff4e 	bl	800046c <__aeabi_dcmplt>
 800e5d0:	2800      	cmp	r0, #0
 800e5d2:	d000      	beq.n	800e5d6 <_strtod_l+0xafe>
 800e5d4:	e4c3      	b.n	800df5e <_strtod_l+0x486>
 800e5d6:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800e5d8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800e5da:	4a34      	ldr	r2, [pc, #208]	@ (800e6ac <_strtod_l+0xbd4>)
 800e5dc:	4b2a      	ldr	r3, [pc, #168]	@ (800e688 <_strtod_l+0xbb0>)
 800e5de:	f7f1 ff59 	bl	8000494 <__aeabi_dcmpgt>
 800e5e2:	2800      	cmp	r0, #0
 800e5e4:	d09a      	beq.n	800e51c <_strtod_l+0xa44>
 800e5e6:	e4ba      	b.n	800df5e <_strtod_l+0x486>
 800e5e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d02a      	beq.n	800e644 <_strtod_l+0xb6c>
 800e5ee:	23d4      	movs	r3, #212	@ 0xd4
 800e5f0:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800e5f2:	04db      	lsls	r3, r3, #19
 800e5f4:	429a      	cmp	r2, r3
 800e5f6:	d825      	bhi.n	800e644 <_strtod_l+0xb6c>
 800e5f8:	0020      	movs	r0, r4
 800e5fa:	0029      	movs	r1, r5
 800e5fc:	4a2c      	ldr	r2, [pc, #176]	@ (800e6b0 <_strtod_l+0xbd8>)
 800e5fe:	4b2d      	ldr	r3, [pc, #180]	@ (800e6b4 <_strtod_l+0xbdc>)
 800e600:	f7f1 ff3e 	bl	8000480 <__aeabi_dcmple>
 800e604:	2800      	cmp	r0, #0
 800e606:	d016      	beq.n	800e636 <_strtod_l+0xb5e>
 800e608:	0020      	movs	r0, r4
 800e60a:	0029      	movs	r1, r5
 800e60c:	f7f1 fff6 	bl	80005fc <__aeabi_d2uiz>
 800e610:	2800      	cmp	r0, #0
 800e612:	d100      	bne.n	800e616 <_strtod_l+0xb3e>
 800e614:	3001      	adds	r0, #1
 800e616:	f7f4 fef9 	bl	800340c <__aeabi_ui2d>
 800e61a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e61c:	0004      	movs	r4, r0
 800e61e:	000d      	movs	r5, r1
 800e620:	2b00      	cmp	r3, #0
 800e622:	d122      	bne.n	800e66a <_strtod_l+0xb92>
 800e624:	2380      	movs	r3, #128	@ 0x80
 800e626:	061b      	lsls	r3, r3, #24
 800e628:	18cb      	adds	r3, r1, r3
 800e62a:	9018      	str	r0, [sp, #96]	@ 0x60
 800e62c:	9319      	str	r3, [sp, #100]	@ 0x64
 800e62e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800e630:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e632:	9214      	str	r2, [sp, #80]	@ 0x50
 800e634:	9315      	str	r3, [sp, #84]	@ 0x54
 800e636:	22d6      	movs	r2, #214	@ 0xd6
 800e638:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800e63a:	04d2      	lsls	r2, r2, #19
 800e63c:	189b      	adds	r3, r3, r2
 800e63e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800e640:	1a9b      	subs	r3, r3, r2
 800e642:	9315      	str	r3, [sp, #84]	@ 0x54
 800e644:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800e646:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800e648:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800e64a:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800e64c:	f001 fb56 	bl	800fcfc <__ulp>
 800e650:	0002      	movs	r2, r0
 800e652:	000b      	movs	r3, r1
 800e654:	0030      	movs	r0, r6
 800e656:	0039      	movs	r1, r7
 800e658:	f7f3 ffe8 	bl	800262c <__aeabi_dmul>
 800e65c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800e65e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e660:	f7f3 f83c 	bl	80016dc <__aeabi_dadd>
 800e664:	0006      	movs	r6, r0
 800e666:	000f      	movs	r7, r1
 800e668:	e791      	b.n	800e58e <_strtod_l+0xab6>
 800e66a:	9418      	str	r4, [sp, #96]	@ 0x60
 800e66c:	9519      	str	r5, [sp, #100]	@ 0x64
 800e66e:	e7de      	b.n	800e62e <_strtod_l+0xb56>
 800e670:	4b11      	ldr	r3, [pc, #68]	@ (800e6b8 <_strtod_l+0xbe0>)
 800e672:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800e674:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800e676:	f7f1 fef9 	bl	800046c <__aeabi_dcmplt>
 800e67a:	e7b2      	b.n	800e5e2 <_strtod_l+0xb0a>
 800e67c:	fff00000 	.word	0xfff00000
 800e680:	000fffff 	.word	0x000fffff
 800e684:	3ff00000 	.word	0x3ff00000
 800e688:	3fe00000 	.word	0x3fe00000
 800e68c:	7ff00000 	.word	0x7ff00000
 800e690:	7fe00000 	.word	0x7fe00000
 800e694:	fcb00000 	.word	0xfcb00000
 800e698:	7c9fffff 	.word	0x7c9fffff
 800e69c:	7fefffff 	.word	0x7fefffff
 800e6a0:	bff00000 	.word	0xbff00000
 800e6a4:	94a03595 	.word	0x94a03595
 800e6a8:	3fdfffff 	.word	0x3fdfffff
 800e6ac:	35afe535 	.word	0x35afe535
 800e6b0:	ffc00000 	.word	0xffc00000
 800e6b4:	41dfffff 	.word	0x41dfffff
 800e6b8:	3fcfffff 	.word	0x3fcfffff

0800e6bc <strtod>:
 800e6bc:	b510      	push	{r4, lr}
 800e6be:	4c04      	ldr	r4, [pc, #16]	@ (800e6d0 <strtod+0x14>)
 800e6c0:	000a      	movs	r2, r1
 800e6c2:	0001      	movs	r1, r0
 800e6c4:	4b03      	ldr	r3, [pc, #12]	@ (800e6d4 <strtod+0x18>)
 800e6c6:	6820      	ldr	r0, [r4, #0]
 800e6c8:	f7ff fa06 	bl	800dad8 <_strtod_l>
 800e6cc:	bd10      	pop	{r4, pc}
 800e6ce:	46c0      	nop			@ (mov r8, r8)
 800e6d0:	20000188 	.word	0x20000188
 800e6d4:	2000001c 	.word	0x2000001c

0800e6d8 <_strtol_l.constprop.0>:
 800e6d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e6da:	b085      	sub	sp, #20
 800e6dc:	0017      	movs	r7, r2
 800e6de:	001e      	movs	r6, r3
 800e6e0:	9003      	str	r0, [sp, #12]
 800e6e2:	9101      	str	r1, [sp, #4]
 800e6e4:	2b24      	cmp	r3, #36	@ 0x24
 800e6e6:	d844      	bhi.n	800e772 <_strtol_l.constprop.0+0x9a>
 800e6e8:	000c      	movs	r4, r1
 800e6ea:	2b01      	cmp	r3, #1
 800e6ec:	d041      	beq.n	800e772 <_strtol_l.constprop.0+0x9a>
 800e6ee:	4b3d      	ldr	r3, [pc, #244]	@ (800e7e4 <_strtol_l.constprop.0+0x10c>)
 800e6f0:	2208      	movs	r2, #8
 800e6f2:	469c      	mov	ip, r3
 800e6f4:	0023      	movs	r3, r4
 800e6f6:	4661      	mov	r1, ip
 800e6f8:	781d      	ldrb	r5, [r3, #0]
 800e6fa:	3401      	adds	r4, #1
 800e6fc:	5d48      	ldrb	r0, [r1, r5]
 800e6fe:	0001      	movs	r1, r0
 800e700:	4011      	ands	r1, r2
 800e702:	4210      	tst	r0, r2
 800e704:	d1f6      	bne.n	800e6f4 <_strtol_l.constprop.0+0x1c>
 800e706:	2d2d      	cmp	r5, #45	@ 0x2d
 800e708:	d13a      	bne.n	800e780 <_strtol_l.constprop.0+0xa8>
 800e70a:	7825      	ldrb	r5, [r4, #0]
 800e70c:	1c9c      	adds	r4, r3, #2
 800e70e:	2301      	movs	r3, #1
 800e710:	9300      	str	r3, [sp, #0]
 800e712:	2210      	movs	r2, #16
 800e714:	0033      	movs	r3, r6
 800e716:	4393      	bics	r3, r2
 800e718:	d109      	bne.n	800e72e <_strtol_l.constprop.0+0x56>
 800e71a:	2d30      	cmp	r5, #48	@ 0x30
 800e71c:	d136      	bne.n	800e78c <_strtol_l.constprop.0+0xb4>
 800e71e:	2120      	movs	r1, #32
 800e720:	7823      	ldrb	r3, [r4, #0]
 800e722:	438b      	bics	r3, r1
 800e724:	2b58      	cmp	r3, #88	@ 0x58
 800e726:	d131      	bne.n	800e78c <_strtol_l.constprop.0+0xb4>
 800e728:	0016      	movs	r6, r2
 800e72a:	7865      	ldrb	r5, [r4, #1]
 800e72c:	3402      	adds	r4, #2
 800e72e:	4a2e      	ldr	r2, [pc, #184]	@ (800e7e8 <_strtol_l.constprop.0+0x110>)
 800e730:	9b00      	ldr	r3, [sp, #0]
 800e732:	4694      	mov	ip, r2
 800e734:	4463      	add	r3, ip
 800e736:	0031      	movs	r1, r6
 800e738:	0018      	movs	r0, r3
 800e73a:	9302      	str	r3, [sp, #8]
 800e73c:	f7f1 fd90 	bl	8000260 <__aeabi_uidivmod>
 800e740:	2200      	movs	r2, #0
 800e742:	4684      	mov	ip, r0
 800e744:	0010      	movs	r0, r2
 800e746:	002b      	movs	r3, r5
 800e748:	3b30      	subs	r3, #48	@ 0x30
 800e74a:	2b09      	cmp	r3, #9
 800e74c:	d825      	bhi.n	800e79a <_strtol_l.constprop.0+0xc2>
 800e74e:	001d      	movs	r5, r3
 800e750:	42ae      	cmp	r6, r5
 800e752:	dd31      	ble.n	800e7b8 <_strtol_l.constprop.0+0xe0>
 800e754:	1c53      	adds	r3, r2, #1
 800e756:	d009      	beq.n	800e76c <_strtol_l.constprop.0+0x94>
 800e758:	2201      	movs	r2, #1
 800e75a:	4252      	negs	r2, r2
 800e75c:	4584      	cmp	ip, r0
 800e75e:	d305      	bcc.n	800e76c <_strtol_l.constprop.0+0x94>
 800e760:	d101      	bne.n	800e766 <_strtol_l.constprop.0+0x8e>
 800e762:	42a9      	cmp	r1, r5
 800e764:	db25      	blt.n	800e7b2 <_strtol_l.constprop.0+0xda>
 800e766:	2201      	movs	r2, #1
 800e768:	4370      	muls	r0, r6
 800e76a:	1828      	adds	r0, r5, r0
 800e76c:	7825      	ldrb	r5, [r4, #0]
 800e76e:	3401      	adds	r4, #1
 800e770:	e7e9      	b.n	800e746 <_strtol_l.constprop.0+0x6e>
 800e772:	f000 fa8f 	bl	800ec94 <__errno>
 800e776:	2316      	movs	r3, #22
 800e778:	6003      	str	r3, [r0, #0]
 800e77a:	2000      	movs	r0, #0
 800e77c:	b005      	add	sp, #20
 800e77e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e780:	9100      	str	r1, [sp, #0]
 800e782:	2d2b      	cmp	r5, #43	@ 0x2b
 800e784:	d1c5      	bne.n	800e712 <_strtol_l.constprop.0+0x3a>
 800e786:	7825      	ldrb	r5, [r4, #0]
 800e788:	1c9c      	adds	r4, r3, #2
 800e78a:	e7c2      	b.n	800e712 <_strtol_l.constprop.0+0x3a>
 800e78c:	2e00      	cmp	r6, #0
 800e78e:	d1ce      	bne.n	800e72e <_strtol_l.constprop.0+0x56>
 800e790:	3608      	adds	r6, #8
 800e792:	2d30      	cmp	r5, #48	@ 0x30
 800e794:	d0cb      	beq.n	800e72e <_strtol_l.constprop.0+0x56>
 800e796:	3602      	adds	r6, #2
 800e798:	e7c9      	b.n	800e72e <_strtol_l.constprop.0+0x56>
 800e79a:	002b      	movs	r3, r5
 800e79c:	3b41      	subs	r3, #65	@ 0x41
 800e79e:	2b19      	cmp	r3, #25
 800e7a0:	d801      	bhi.n	800e7a6 <_strtol_l.constprop.0+0xce>
 800e7a2:	3d37      	subs	r5, #55	@ 0x37
 800e7a4:	e7d4      	b.n	800e750 <_strtol_l.constprop.0+0x78>
 800e7a6:	002b      	movs	r3, r5
 800e7a8:	3b61      	subs	r3, #97	@ 0x61
 800e7aa:	2b19      	cmp	r3, #25
 800e7ac:	d804      	bhi.n	800e7b8 <_strtol_l.constprop.0+0xe0>
 800e7ae:	3d57      	subs	r5, #87	@ 0x57
 800e7b0:	e7ce      	b.n	800e750 <_strtol_l.constprop.0+0x78>
 800e7b2:	2201      	movs	r2, #1
 800e7b4:	4252      	negs	r2, r2
 800e7b6:	e7d9      	b.n	800e76c <_strtol_l.constprop.0+0x94>
 800e7b8:	1c53      	adds	r3, r2, #1
 800e7ba:	d108      	bne.n	800e7ce <_strtol_l.constprop.0+0xf6>
 800e7bc:	2322      	movs	r3, #34	@ 0x22
 800e7be:	9a03      	ldr	r2, [sp, #12]
 800e7c0:	9802      	ldr	r0, [sp, #8]
 800e7c2:	6013      	str	r3, [r2, #0]
 800e7c4:	2f00      	cmp	r7, #0
 800e7c6:	d0d9      	beq.n	800e77c <_strtol_l.constprop.0+0xa4>
 800e7c8:	1e63      	subs	r3, r4, #1
 800e7ca:	9301      	str	r3, [sp, #4]
 800e7cc:	e007      	b.n	800e7de <_strtol_l.constprop.0+0x106>
 800e7ce:	9b00      	ldr	r3, [sp, #0]
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d000      	beq.n	800e7d6 <_strtol_l.constprop.0+0xfe>
 800e7d4:	4240      	negs	r0, r0
 800e7d6:	2f00      	cmp	r7, #0
 800e7d8:	d0d0      	beq.n	800e77c <_strtol_l.constprop.0+0xa4>
 800e7da:	2a00      	cmp	r2, #0
 800e7dc:	d1f4      	bne.n	800e7c8 <_strtol_l.constprop.0+0xf0>
 800e7de:	9b01      	ldr	r3, [sp, #4]
 800e7e0:	603b      	str	r3, [r7, #0]
 800e7e2:	e7cb      	b.n	800e77c <_strtol_l.constprop.0+0xa4>
 800e7e4:	0801bf59 	.word	0x0801bf59
 800e7e8:	7fffffff 	.word	0x7fffffff

0800e7ec <strtol>:
 800e7ec:	b510      	push	{r4, lr}
 800e7ee:	4c04      	ldr	r4, [pc, #16]	@ (800e800 <strtol+0x14>)
 800e7f0:	0013      	movs	r3, r2
 800e7f2:	000a      	movs	r2, r1
 800e7f4:	0001      	movs	r1, r0
 800e7f6:	6820      	ldr	r0, [r4, #0]
 800e7f8:	f7ff ff6e 	bl	800e6d8 <_strtol_l.constprop.0>
 800e7fc:	bd10      	pop	{r4, pc}
 800e7fe:	46c0      	nop			@ (mov r8, r8)
 800e800:	20000188 	.word	0x20000188

0800e804 <_strtoll_l.constprop.0>:
 800e804:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e806:	b08d      	sub	sp, #52	@ 0x34
 800e808:	000c      	movs	r4, r1
 800e80a:	9102      	str	r1, [sp, #8]
 800e80c:	001e      	movs	r6, r3
 800e80e:	2108      	movs	r1, #8
 800e810:	4f4c      	ldr	r7, [pc, #304]	@ (800e944 <_strtoll_l.constprop.0+0x140>)
 800e812:	900a      	str	r0, [sp, #40]	@ 0x28
 800e814:	9203      	str	r2, [sp, #12]
 800e816:	0023      	movs	r3, r4
 800e818:	781a      	ldrb	r2, [r3, #0]
 800e81a:	3401      	adds	r4, #1
 800e81c:	5cbd      	ldrb	r5, [r7, r2]
 800e81e:	0028      	movs	r0, r5
 800e820:	4008      	ands	r0, r1
 800e822:	420d      	tst	r5, r1
 800e824:	d1f7      	bne.n	800e816 <_strtoll_l.constprop.0+0x12>
 800e826:	0015      	movs	r5, r2
 800e828:	2a2d      	cmp	r2, #45	@ 0x2d
 800e82a:	d14f      	bne.n	800e8cc <_strtoll_l.constprop.0+0xc8>
 800e82c:	7825      	ldrb	r5, [r4, #0]
 800e82e:	1c9c      	adds	r4, r3, #2
 800e830:	2301      	movs	r3, #1
 800e832:	9301      	str	r3, [sp, #4]
 800e834:	2210      	movs	r2, #16
 800e836:	0033      	movs	r3, r6
 800e838:	4393      	bics	r3, r2
 800e83a:	d109      	bne.n	800e850 <_strtoll_l.constprop.0+0x4c>
 800e83c:	2d30      	cmp	r5, #48	@ 0x30
 800e83e:	d14b      	bne.n	800e8d8 <_strtoll_l.constprop.0+0xd4>
 800e840:	2120      	movs	r1, #32
 800e842:	7823      	ldrb	r3, [r4, #0]
 800e844:	438b      	bics	r3, r1
 800e846:	2b58      	cmp	r3, #88	@ 0x58
 800e848:	d146      	bne.n	800e8d8 <_strtoll_l.constprop.0+0xd4>
 800e84a:	0016      	movs	r6, r2
 800e84c:	7865      	ldrb	r5, [r4, #1]
 800e84e:	3402      	adds	r4, #2
 800e850:	2001      	movs	r0, #1
 800e852:	2300      	movs	r3, #0
 800e854:	493c      	ldr	r1, [pc, #240]	@ (800e948 <_strtoll_l.constprop.0+0x144>)
 800e856:	9a01      	ldr	r2, [sp, #4]
 800e858:	4240      	negs	r0, r0
 800e85a:	1812      	adds	r2, r2, r0
 800e85c:	414b      	adcs	r3, r1
 800e85e:	9204      	str	r2, [sp, #16]
 800e860:	9305      	str	r3, [sp, #20]
 800e862:	9804      	ldr	r0, [sp, #16]
 800e864:	9905      	ldr	r1, [sp, #20]
 800e866:	17f3      	asrs	r3, r6, #31
 800e868:	0032      	movs	r2, r6
 800e86a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e86c:	f7f1 fe60 	bl	8000530 <__aeabi_uldivmod>
 800e870:	2300      	movs	r3, #0
 800e872:	000f      	movs	r7, r1
 800e874:	9008      	str	r0, [sp, #32]
 800e876:	2100      	movs	r1, #0
 800e878:	2000      	movs	r0, #0
 800e87a:	9209      	str	r2, [sp, #36]	@ 0x24
 800e87c:	002a      	movs	r2, r5
 800e87e:	3a30      	subs	r2, #48	@ 0x30
 800e880:	2a09      	cmp	r2, #9
 800e882:	d830      	bhi.n	800e8e6 <_strtoll_l.constprop.0+0xe2>
 800e884:	0015      	movs	r5, r2
 800e886:	42ae      	cmp	r6, r5
 800e888:	dd3c      	ble.n	800e904 <_strtoll_l.constprop.0+0x100>
 800e88a:	1c5a      	adds	r2, r3, #1
 800e88c:	d01b      	beq.n	800e8c6 <_strtoll_l.constprop.0+0xc2>
 800e88e:	42b9      	cmp	r1, r7
 800e890:	d835      	bhi.n	800e8fe <_strtoll_l.constprop.0+0xfa>
 800e892:	d102      	bne.n	800e89a <_strtoll_l.constprop.0+0x96>
 800e894:	9b08      	ldr	r3, [sp, #32]
 800e896:	4298      	cmp	r0, r3
 800e898:	d831      	bhi.n	800e8fe <_strtoll_l.constprop.0+0xfa>
 800e89a:	9b08      	ldr	r3, [sp, #32]
 800e89c:	4283      	cmp	r3, r0
 800e89e:	d104      	bne.n	800e8aa <_strtoll_l.constprop.0+0xa6>
 800e8a0:	428f      	cmp	r7, r1
 800e8a2:	d102      	bne.n	800e8aa <_strtoll_l.constprop.0+0xa6>
 800e8a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e8a6:	42ab      	cmp	r3, r5
 800e8a8:	db29      	blt.n	800e8fe <_strtoll_l.constprop.0+0xfa>
 800e8aa:	0002      	movs	r2, r0
 800e8ac:	000b      	movs	r3, r1
 800e8ae:	0030      	movs	r0, r6
 800e8b0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e8b2:	f7f1 fe5d 	bl	8000570 <__aeabi_lmul>
 800e8b6:	17eb      	asrs	r3, r5, #31
 800e8b8:	9506      	str	r5, [sp, #24]
 800e8ba:	9307      	str	r3, [sp, #28]
 800e8bc:	9a06      	ldr	r2, [sp, #24]
 800e8be:	9b07      	ldr	r3, [sp, #28]
 800e8c0:	1880      	adds	r0, r0, r2
 800e8c2:	4159      	adcs	r1, r3
 800e8c4:	2301      	movs	r3, #1
 800e8c6:	7825      	ldrb	r5, [r4, #0]
 800e8c8:	3401      	adds	r4, #1
 800e8ca:	e7d7      	b.n	800e87c <_strtoll_l.constprop.0+0x78>
 800e8cc:	9001      	str	r0, [sp, #4]
 800e8ce:	2a2b      	cmp	r2, #43	@ 0x2b
 800e8d0:	d1b0      	bne.n	800e834 <_strtoll_l.constprop.0+0x30>
 800e8d2:	7825      	ldrb	r5, [r4, #0]
 800e8d4:	1c9c      	adds	r4, r3, #2
 800e8d6:	e7ad      	b.n	800e834 <_strtoll_l.constprop.0+0x30>
 800e8d8:	2e00      	cmp	r6, #0
 800e8da:	d1b9      	bne.n	800e850 <_strtoll_l.constprop.0+0x4c>
 800e8dc:	3608      	adds	r6, #8
 800e8de:	2d30      	cmp	r5, #48	@ 0x30
 800e8e0:	d0b6      	beq.n	800e850 <_strtoll_l.constprop.0+0x4c>
 800e8e2:	3602      	adds	r6, #2
 800e8e4:	e7b4      	b.n	800e850 <_strtoll_l.constprop.0+0x4c>
 800e8e6:	002a      	movs	r2, r5
 800e8e8:	3a41      	subs	r2, #65	@ 0x41
 800e8ea:	2a19      	cmp	r2, #25
 800e8ec:	d801      	bhi.n	800e8f2 <_strtoll_l.constprop.0+0xee>
 800e8ee:	3d37      	subs	r5, #55	@ 0x37
 800e8f0:	e7c9      	b.n	800e886 <_strtoll_l.constprop.0+0x82>
 800e8f2:	002a      	movs	r2, r5
 800e8f4:	3a61      	subs	r2, #97	@ 0x61
 800e8f6:	2a19      	cmp	r2, #25
 800e8f8:	d804      	bhi.n	800e904 <_strtoll_l.constprop.0+0x100>
 800e8fa:	3d57      	subs	r5, #87	@ 0x57
 800e8fc:	e7c3      	b.n	800e886 <_strtoll_l.constprop.0+0x82>
 800e8fe:	2301      	movs	r3, #1
 800e900:	425b      	negs	r3, r3
 800e902:	e7e0      	b.n	800e8c6 <_strtoll_l.constprop.0+0xc2>
 800e904:	1c5a      	adds	r2, r3, #1
 800e906:	d109      	bne.n	800e91c <_strtoll_l.constprop.0+0x118>
 800e908:	9804      	ldr	r0, [sp, #16]
 800e90a:	9905      	ldr	r1, [sp, #20]
 800e90c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e90e:	3323      	adds	r3, #35	@ 0x23
 800e910:	6013      	str	r3, [r2, #0]
 800e912:	9b03      	ldr	r3, [sp, #12]
 800e914:	2b00      	cmp	r3, #0
 800e916:	d10e      	bne.n	800e936 <_strtoll_l.constprop.0+0x132>
 800e918:	b00d      	add	sp, #52	@ 0x34
 800e91a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e91c:	9a01      	ldr	r2, [sp, #4]
 800e91e:	2a00      	cmp	r2, #0
 800e920:	d004      	beq.n	800e92c <_strtoll_l.constprop.0+0x128>
 800e922:	0005      	movs	r5, r0
 800e924:	000e      	movs	r6, r1
 800e926:	2100      	movs	r1, #0
 800e928:	4268      	negs	r0, r5
 800e92a:	41b1      	sbcs	r1, r6
 800e92c:	9a03      	ldr	r2, [sp, #12]
 800e92e:	2a00      	cmp	r2, #0
 800e930:	d0f2      	beq.n	800e918 <_strtoll_l.constprop.0+0x114>
 800e932:	2b00      	cmp	r3, #0
 800e934:	d001      	beq.n	800e93a <_strtoll_l.constprop.0+0x136>
 800e936:	1e63      	subs	r3, r4, #1
 800e938:	9302      	str	r3, [sp, #8]
 800e93a:	9b03      	ldr	r3, [sp, #12]
 800e93c:	9a02      	ldr	r2, [sp, #8]
 800e93e:	601a      	str	r2, [r3, #0]
 800e940:	e7ea      	b.n	800e918 <_strtoll_l.constprop.0+0x114>
 800e942:	46c0      	nop			@ (mov r8, r8)
 800e944:	0801bf59 	.word	0x0801bf59
 800e948:	7fffffff 	.word	0x7fffffff

0800e94c <strtoll>:
 800e94c:	b510      	push	{r4, lr}
 800e94e:	4c04      	ldr	r4, [pc, #16]	@ (800e960 <strtoll+0x14>)
 800e950:	0013      	movs	r3, r2
 800e952:	000a      	movs	r2, r1
 800e954:	0001      	movs	r1, r0
 800e956:	6820      	ldr	r0, [r4, #0]
 800e958:	f7ff ff54 	bl	800e804 <_strtoll_l.constprop.0>
 800e95c:	bd10      	pop	{r4, pc}
 800e95e:	46c0      	nop			@ (mov r8, r8)
 800e960:	20000188 	.word	0x20000188

0800e964 <std>:
 800e964:	2300      	movs	r3, #0
 800e966:	b510      	push	{r4, lr}
 800e968:	0004      	movs	r4, r0
 800e96a:	6003      	str	r3, [r0, #0]
 800e96c:	6043      	str	r3, [r0, #4]
 800e96e:	6083      	str	r3, [r0, #8]
 800e970:	8181      	strh	r1, [r0, #12]
 800e972:	6643      	str	r3, [r0, #100]	@ 0x64
 800e974:	81c2      	strh	r2, [r0, #14]
 800e976:	6103      	str	r3, [r0, #16]
 800e978:	6143      	str	r3, [r0, #20]
 800e97a:	6183      	str	r3, [r0, #24]
 800e97c:	0019      	movs	r1, r3
 800e97e:	2208      	movs	r2, #8
 800e980:	305c      	adds	r0, #92	@ 0x5c
 800e982:	f000 f91f 	bl	800ebc4 <memset>
 800e986:	4b0b      	ldr	r3, [pc, #44]	@ (800e9b4 <std+0x50>)
 800e988:	6224      	str	r4, [r4, #32]
 800e98a:	6263      	str	r3, [r4, #36]	@ 0x24
 800e98c:	4b0a      	ldr	r3, [pc, #40]	@ (800e9b8 <std+0x54>)
 800e98e:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e990:	4b0a      	ldr	r3, [pc, #40]	@ (800e9bc <std+0x58>)
 800e992:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e994:	4b0a      	ldr	r3, [pc, #40]	@ (800e9c0 <std+0x5c>)
 800e996:	6323      	str	r3, [r4, #48]	@ 0x30
 800e998:	4b0a      	ldr	r3, [pc, #40]	@ (800e9c4 <std+0x60>)
 800e99a:	429c      	cmp	r4, r3
 800e99c:	d005      	beq.n	800e9aa <std+0x46>
 800e99e:	4b0a      	ldr	r3, [pc, #40]	@ (800e9c8 <std+0x64>)
 800e9a0:	429c      	cmp	r4, r3
 800e9a2:	d002      	beq.n	800e9aa <std+0x46>
 800e9a4:	4b09      	ldr	r3, [pc, #36]	@ (800e9cc <std+0x68>)
 800e9a6:	429c      	cmp	r4, r3
 800e9a8:	d103      	bne.n	800e9b2 <std+0x4e>
 800e9aa:	0020      	movs	r0, r4
 800e9ac:	3058      	adds	r0, #88	@ 0x58
 800e9ae:	f000 f99b 	bl	800ece8 <__retarget_lock_init_recursive>
 800e9b2:	bd10      	pop	{r4, pc}
 800e9b4:	0800eb2d 	.word	0x0800eb2d
 800e9b8:	0800eb55 	.word	0x0800eb55
 800e9bc:	0800eb8d 	.word	0x0800eb8d
 800e9c0:	0800ebb9 	.word	0x0800ebb9
 800e9c4:	20001508 	.word	0x20001508
 800e9c8:	20001570 	.word	0x20001570
 800e9cc:	200015d8 	.word	0x200015d8

0800e9d0 <stdio_exit_handler>:
 800e9d0:	b510      	push	{r4, lr}
 800e9d2:	4a03      	ldr	r2, [pc, #12]	@ (800e9e0 <stdio_exit_handler+0x10>)
 800e9d4:	4903      	ldr	r1, [pc, #12]	@ (800e9e4 <stdio_exit_handler+0x14>)
 800e9d6:	4804      	ldr	r0, [pc, #16]	@ (800e9e8 <stdio_exit_handler+0x18>)
 800e9d8:	f000 f86c 	bl	800eab4 <_fwalk_sglue>
 800e9dc:	bd10      	pop	{r4, pc}
 800e9de:	46c0      	nop			@ (mov r8, r8)
 800e9e0:	20000010 	.word	0x20000010
 800e9e4:	080108d9 	.word	0x080108d9
 800e9e8:	2000018c 	.word	0x2000018c

0800e9ec <cleanup_stdio>:
 800e9ec:	6841      	ldr	r1, [r0, #4]
 800e9ee:	4b0b      	ldr	r3, [pc, #44]	@ (800ea1c <cleanup_stdio+0x30>)
 800e9f0:	b510      	push	{r4, lr}
 800e9f2:	0004      	movs	r4, r0
 800e9f4:	4299      	cmp	r1, r3
 800e9f6:	d001      	beq.n	800e9fc <cleanup_stdio+0x10>
 800e9f8:	f001 ff6e 	bl	80108d8 <_fflush_r>
 800e9fc:	68a1      	ldr	r1, [r4, #8]
 800e9fe:	4b08      	ldr	r3, [pc, #32]	@ (800ea20 <cleanup_stdio+0x34>)
 800ea00:	4299      	cmp	r1, r3
 800ea02:	d002      	beq.n	800ea0a <cleanup_stdio+0x1e>
 800ea04:	0020      	movs	r0, r4
 800ea06:	f001 ff67 	bl	80108d8 <_fflush_r>
 800ea0a:	68e1      	ldr	r1, [r4, #12]
 800ea0c:	4b05      	ldr	r3, [pc, #20]	@ (800ea24 <cleanup_stdio+0x38>)
 800ea0e:	4299      	cmp	r1, r3
 800ea10:	d002      	beq.n	800ea18 <cleanup_stdio+0x2c>
 800ea12:	0020      	movs	r0, r4
 800ea14:	f001 ff60 	bl	80108d8 <_fflush_r>
 800ea18:	bd10      	pop	{r4, pc}
 800ea1a:	46c0      	nop			@ (mov r8, r8)
 800ea1c:	20001508 	.word	0x20001508
 800ea20:	20001570 	.word	0x20001570
 800ea24:	200015d8 	.word	0x200015d8

0800ea28 <global_stdio_init.part.0>:
 800ea28:	b510      	push	{r4, lr}
 800ea2a:	4b09      	ldr	r3, [pc, #36]	@ (800ea50 <global_stdio_init.part.0+0x28>)
 800ea2c:	4a09      	ldr	r2, [pc, #36]	@ (800ea54 <global_stdio_init.part.0+0x2c>)
 800ea2e:	2104      	movs	r1, #4
 800ea30:	601a      	str	r2, [r3, #0]
 800ea32:	4809      	ldr	r0, [pc, #36]	@ (800ea58 <global_stdio_init.part.0+0x30>)
 800ea34:	2200      	movs	r2, #0
 800ea36:	f7ff ff95 	bl	800e964 <std>
 800ea3a:	2201      	movs	r2, #1
 800ea3c:	2109      	movs	r1, #9
 800ea3e:	4807      	ldr	r0, [pc, #28]	@ (800ea5c <global_stdio_init.part.0+0x34>)
 800ea40:	f7ff ff90 	bl	800e964 <std>
 800ea44:	2202      	movs	r2, #2
 800ea46:	2112      	movs	r1, #18
 800ea48:	4805      	ldr	r0, [pc, #20]	@ (800ea60 <global_stdio_init.part.0+0x38>)
 800ea4a:	f7ff ff8b 	bl	800e964 <std>
 800ea4e:	bd10      	pop	{r4, pc}
 800ea50:	20001640 	.word	0x20001640
 800ea54:	0800e9d1 	.word	0x0800e9d1
 800ea58:	20001508 	.word	0x20001508
 800ea5c:	20001570 	.word	0x20001570
 800ea60:	200015d8 	.word	0x200015d8

0800ea64 <__sfp_lock_acquire>:
 800ea64:	b510      	push	{r4, lr}
 800ea66:	4802      	ldr	r0, [pc, #8]	@ (800ea70 <__sfp_lock_acquire+0xc>)
 800ea68:	f000 f93f 	bl	800ecea <__retarget_lock_acquire_recursive>
 800ea6c:	bd10      	pop	{r4, pc}
 800ea6e:	46c0      	nop			@ (mov r8, r8)
 800ea70:	20001649 	.word	0x20001649

0800ea74 <__sfp_lock_release>:
 800ea74:	b510      	push	{r4, lr}
 800ea76:	4802      	ldr	r0, [pc, #8]	@ (800ea80 <__sfp_lock_release+0xc>)
 800ea78:	f000 f938 	bl	800ecec <__retarget_lock_release_recursive>
 800ea7c:	bd10      	pop	{r4, pc}
 800ea7e:	46c0      	nop			@ (mov r8, r8)
 800ea80:	20001649 	.word	0x20001649

0800ea84 <__sinit>:
 800ea84:	b510      	push	{r4, lr}
 800ea86:	0004      	movs	r4, r0
 800ea88:	f7ff ffec 	bl	800ea64 <__sfp_lock_acquire>
 800ea8c:	6a23      	ldr	r3, [r4, #32]
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d002      	beq.n	800ea98 <__sinit+0x14>
 800ea92:	f7ff ffef 	bl	800ea74 <__sfp_lock_release>
 800ea96:	bd10      	pop	{r4, pc}
 800ea98:	4b04      	ldr	r3, [pc, #16]	@ (800eaac <__sinit+0x28>)
 800ea9a:	6223      	str	r3, [r4, #32]
 800ea9c:	4b04      	ldr	r3, [pc, #16]	@ (800eab0 <__sinit+0x2c>)
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d1f6      	bne.n	800ea92 <__sinit+0xe>
 800eaa4:	f7ff ffc0 	bl	800ea28 <global_stdio_init.part.0>
 800eaa8:	e7f3      	b.n	800ea92 <__sinit+0xe>
 800eaaa:	46c0      	nop			@ (mov r8, r8)
 800eaac:	0800e9ed 	.word	0x0800e9ed
 800eab0:	20001640 	.word	0x20001640

0800eab4 <_fwalk_sglue>:
 800eab4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800eab6:	0014      	movs	r4, r2
 800eab8:	2600      	movs	r6, #0
 800eaba:	9000      	str	r0, [sp, #0]
 800eabc:	9101      	str	r1, [sp, #4]
 800eabe:	68a5      	ldr	r5, [r4, #8]
 800eac0:	6867      	ldr	r7, [r4, #4]
 800eac2:	3f01      	subs	r7, #1
 800eac4:	d504      	bpl.n	800ead0 <_fwalk_sglue+0x1c>
 800eac6:	6824      	ldr	r4, [r4, #0]
 800eac8:	2c00      	cmp	r4, #0
 800eaca:	d1f8      	bne.n	800eabe <_fwalk_sglue+0xa>
 800eacc:	0030      	movs	r0, r6
 800eace:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ead0:	89ab      	ldrh	r3, [r5, #12]
 800ead2:	2b01      	cmp	r3, #1
 800ead4:	d908      	bls.n	800eae8 <_fwalk_sglue+0x34>
 800ead6:	220e      	movs	r2, #14
 800ead8:	5eab      	ldrsh	r3, [r5, r2]
 800eada:	3301      	adds	r3, #1
 800eadc:	d004      	beq.n	800eae8 <_fwalk_sglue+0x34>
 800eade:	0029      	movs	r1, r5
 800eae0:	9800      	ldr	r0, [sp, #0]
 800eae2:	9b01      	ldr	r3, [sp, #4]
 800eae4:	4798      	blx	r3
 800eae6:	4306      	orrs	r6, r0
 800eae8:	3568      	adds	r5, #104	@ 0x68
 800eaea:	e7ea      	b.n	800eac2 <_fwalk_sglue+0xe>

0800eaec <siprintf>:
 800eaec:	b40e      	push	{r1, r2, r3}
 800eaee:	b500      	push	{lr}
 800eaf0:	490b      	ldr	r1, [pc, #44]	@ (800eb20 <siprintf+0x34>)
 800eaf2:	b09c      	sub	sp, #112	@ 0x70
 800eaf4:	ab1d      	add	r3, sp, #116	@ 0x74
 800eaf6:	9002      	str	r0, [sp, #8]
 800eaf8:	9006      	str	r0, [sp, #24]
 800eafa:	9107      	str	r1, [sp, #28]
 800eafc:	9104      	str	r1, [sp, #16]
 800eafe:	4809      	ldr	r0, [pc, #36]	@ (800eb24 <siprintf+0x38>)
 800eb00:	4909      	ldr	r1, [pc, #36]	@ (800eb28 <siprintf+0x3c>)
 800eb02:	cb04      	ldmia	r3!, {r2}
 800eb04:	9105      	str	r1, [sp, #20]
 800eb06:	6800      	ldr	r0, [r0, #0]
 800eb08:	a902      	add	r1, sp, #8
 800eb0a:	9301      	str	r3, [sp, #4]
 800eb0c:	f001 fa9e 	bl	801004c <_svfiprintf_r>
 800eb10:	2200      	movs	r2, #0
 800eb12:	9b02      	ldr	r3, [sp, #8]
 800eb14:	701a      	strb	r2, [r3, #0]
 800eb16:	b01c      	add	sp, #112	@ 0x70
 800eb18:	bc08      	pop	{r3}
 800eb1a:	b003      	add	sp, #12
 800eb1c:	4718      	bx	r3
 800eb1e:	46c0      	nop			@ (mov r8, r8)
 800eb20:	7fffffff 	.word	0x7fffffff
 800eb24:	20000188 	.word	0x20000188
 800eb28:	ffff0208 	.word	0xffff0208

0800eb2c <__sread>:
 800eb2c:	b570      	push	{r4, r5, r6, lr}
 800eb2e:	000c      	movs	r4, r1
 800eb30:	250e      	movs	r5, #14
 800eb32:	5f49      	ldrsh	r1, [r1, r5]
 800eb34:	f000 f886 	bl	800ec44 <_read_r>
 800eb38:	2800      	cmp	r0, #0
 800eb3a:	db03      	blt.n	800eb44 <__sread+0x18>
 800eb3c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800eb3e:	181b      	adds	r3, r3, r0
 800eb40:	6563      	str	r3, [r4, #84]	@ 0x54
 800eb42:	bd70      	pop	{r4, r5, r6, pc}
 800eb44:	89a3      	ldrh	r3, [r4, #12]
 800eb46:	4a02      	ldr	r2, [pc, #8]	@ (800eb50 <__sread+0x24>)
 800eb48:	4013      	ands	r3, r2
 800eb4a:	81a3      	strh	r3, [r4, #12]
 800eb4c:	e7f9      	b.n	800eb42 <__sread+0x16>
 800eb4e:	46c0      	nop			@ (mov r8, r8)
 800eb50:	ffffefff 	.word	0xffffefff

0800eb54 <__swrite>:
 800eb54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb56:	001f      	movs	r7, r3
 800eb58:	898b      	ldrh	r3, [r1, #12]
 800eb5a:	0005      	movs	r5, r0
 800eb5c:	000c      	movs	r4, r1
 800eb5e:	0016      	movs	r6, r2
 800eb60:	05db      	lsls	r3, r3, #23
 800eb62:	d505      	bpl.n	800eb70 <__swrite+0x1c>
 800eb64:	230e      	movs	r3, #14
 800eb66:	5ec9      	ldrsh	r1, [r1, r3]
 800eb68:	2200      	movs	r2, #0
 800eb6a:	2302      	movs	r3, #2
 800eb6c:	f000 f856 	bl	800ec1c <_lseek_r>
 800eb70:	89a3      	ldrh	r3, [r4, #12]
 800eb72:	4a05      	ldr	r2, [pc, #20]	@ (800eb88 <__swrite+0x34>)
 800eb74:	0028      	movs	r0, r5
 800eb76:	4013      	ands	r3, r2
 800eb78:	81a3      	strh	r3, [r4, #12]
 800eb7a:	0032      	movs	r2, r6
 800eb7c:	230e      	movs	r3, #14
 800eb7e:	5ee1      	ldrsh	r1, [r4, r3]
 800eb80:	003b      	movs	r3, r7
 800eb82:	f000 f873 	bl	800ec6c <_write_r>
 800eb86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eb88:	ffffefff 	.word	0xffffefff

0800eb8c <__sseek>:
 800eb8c:	b570      	push	{r4, r5, r6, lr}
 800eb8e:	000c      	movs	r4, r1
 800eb90:	250e      	movs	r5, #14
 800eb92:	5f49      	ldrsh	r1, [r1, r5]
 800eb94:	f000 f842 	bl	800ec1c <_lseek_r>
 800eb98:	89a3      	ldrh	r3, [r4, #12]
 800eb9a:	1c42      	adds	r2, r0, #1
 800eb9c:	d103      	bne.n	800eba6 <__sseek+0x1a>
 800eb9e:	4a05      	ldr	r2, [pc, #20]	@ (800ebb4 <__sseek+0x28>)
 800eba0:	4013      	ands	r3, r2
 800eba2:	81a3      	strh	r3, [r4, #12]
 800eba4:	bd70      	pop	{r4, r5, r6, pc}
 800eba6:	2280      	movs	r2, #128	@ 0x80
 800eba8:	0152      	lsls	r2, r2, #5
 800ebaa:	4313      	orrs	r3, r2
 800ebac:	81a3      	strh	r3, [r4, #12]
 800ebae:	6560      	str	r0, [r4, #84]	@ 0x54
 800ebb0:	e7f8      	b.n	800eba4 <__sseek+0x18>
 800ebb2:	46c0      	nop			@ (mov r8, r8)
 800ebb4:	ffffefff 	.word	0xffffefff

0800ebb8 <__sclose>:
 800ebb8:	b510      	push	{r4, lr}
 800ebba:	230e      	movs	r3, #14
 800ebbc:	5ec9      	ldrsh	r1, [r1, r3]
 800ebbe:	f000 f81b 	bl	800ebf8 <_close_r>
 800ebc2:	bd10      	pop	{r4, pc}

0800ebc4 <memset>:
 800ebc4:	0003      	movs	r3, r0
 800ebc6:	1882      	adds	r2, r0, r2
 800ebc8:	4293      	cmp	r3, r2
 800ebca:	d100      	bne.n	800ebce <memset+0xa>
 800ebcc:	4770      	bx	lr
 800ebce:	7019      	strb	r1, [r3, #0]
 800ebd0:	3301      	adds	r3, #1
 800ebd2:	e7f9      	b.n	800ebc8 <memset+0x4>

0800ebd4 <strncmp>:
 800ebd4:	b530      	push	{r4, r5, lr}
 800ebd6:	0005      	movs	r5, r0
 800ebd8:	1e10      	subs	r0, r2, #0
 800ebda:	d00b      	beq.n	800ebf4 <strncmp+0x20>
 800ebdc:	2400      	movs	r4, #0
 800ebde:	3a01      	subs	r2, #1
 800ebe0:	5d2b      	ldrb	r3, [r5, r4]
 800ebe2:	5d08      	ldrb	r0, [r1, r4]
 800ebe4:	4283      	cmp	r3, r0
 800ebe6:	d104      	bne.n	800ebf2 <strncmp+0x1e>
 800ebe8:	42a2      	cmp	r2, r4
 800ebea:	d002      	beq.n	800ebf2 <strncmp+0x1e>
 800ebec:	3401      	adds	r4, #1
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d1f6      	bne.n	800ebe0 <strncmp+0xc>
 800ebf2:	1a18      	subs	r0, r3, r0
 800ebf4:	bd30      	pop	{r4, r5, pc}
	...

0800ebf8 <_close_r>:
 800ebf8:	2300      	movs	r3, #0
 800ebfa:	b570      	push	{r4, r5, r6, lr}
 800ebfc:	4d06      	ldr	r5, [pc, #24]	@ (800ec18 <_close_r+0x20>)
 800ebfe:	0004      	movs	r4, r0
 800ec00:	0008      	movs	r0, r1
 800ec02:	602b      	str	r3, [r5, #0]
 800ec04:	f7f9 f9c3 	bl	8007f8e <_close>
 800ec08:	1c43      	adds	r3, r0, #1
 800ec0a:	d103      	bne.n	800ec14 <_close_r+0x1c>
 800ec0c:	682b      	ldr	r3, [r5, #0]
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d000      	beq.n	800ec14 <_close_r+0x1c>
 800ec12:	6023      	str	r3, [r4, #0]
 800ec14:	bd70      	pop	{r4, r5, r6, pc}
 800ec16:	46c0      	nop			@ (mov r8, r8)
 800ec18:	20001644 	.word	0x20001644

0800ec1c <_lseek_r>:
 800ec1c:	b570      	push	{r4, r5, r6, lr}
 800ec1e:	0004      	movs	r4, r0
 800ec20:	0008      	movs	r0, r1
 800ec22:	0011      	movs	r1, r2
 800ec24:	001a      	movs	r2, r3
 800ec26:	2300      	movs	r3, #0
 800ec28:	4d05      	ldr	r5, [pc, #20]	@ (800ec40 <_lseek_r+0x24>)
 800ec2a:	602b      	str	r3, [r5, #0]
 800ec2c:	f7f9 f9d0 	bl	8007fd0 <_lseek>
 800ec30:	1c43      	adds	r3, r0, #1
 800ec32:	d103      	bne.n	800ec3c <_lseek_r+0x20>
 800ec34:	682b      	ldr	r3, [r5, #0]
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d000      	beq.n	800ec3c <_lseek_r+0x20>
 800ec3a:	6023      	str	r3, [r4, #0]
 800ec3c:	bd70      	pop	{r4, r5, r6, pc}
 800ec3e:	46c0      	nop			@ (mov r8, r8)
 800ec40:	20001644 	.word	0x20001644

0800ec44 <_read_r>:
 800ec44:	b570      	push	{r4, r5, r6, lr}
 800ec46:	0004      	movs	r4, r0
 800ec48:	0008      	movs	r0, r1
 800ec4a:	0011      	movs	r1, r2
 800ec4c:	001a      	movs	r2, r3
 800ec4e:	2300      	movs	r3, #0
 800ec50:	4d05      	ldr	r5, [pc, #20]	@ (800ec68 <_read_r+0x24>)
 800ec52:	602b      	str	r3, [r5, #0]
 800ec54:	f7f9 f962 	bl	8007f1c <_read>
 800ec58:	1c43      	adds	r3, r0, #1
 800ec5a:	d103      	bne.n	800ec64 <_read_r+0x20>
 800ec5c:	682b      	ldr	r3, [r5, #0]
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d000      	beq.n	800ec64 <_read_r+0x20>
 800ec62:	6023      	str	r3, [r4, #0]
 800ec64:	bd70      	pop	{r4, r5, r6, pc}
 800ec66:	46c0      	nop			@ (mov r8, r8)
 800ec68:	20001644 	.word	0x20001644

0800ec6c <_write_r>:
 800ec6c:	b570      	push	{r4, r5, r6, lr}
 800ec6e:	0004      	movs	r4, r0
 800ec70:	0008      	movs	r0, r1
 800ec72:	0011      	movs	r1, r2
 800ec74:	001a      	movs	r2, r3
 800ec76:	2300      	movs	r3, #0
 800ec78:	4d05      	ldr	r5, [pc, #20]	@ (800ec90 <_write_r+0x24>)
 800ec7a:	602b      	str	r3, [r5, #0]
 800ec7c:	f7f9 f96b 	bl	8007f56 <_write>
 800ec80:	1c43      	adds	r3, r0, #1
 800ec82:	d103      	bne.n	800ec8c <_write_r+0x20>
 800ec84:	682b      	ldr	r3, [r5, #0]
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d000      	beq.n	800ec8c <_write_r+0x20>
 800ec8a:	6023      	str	r3, [r4, #0]
 800ec8c:	bd70      	pop	{r4, r5, r6, pc}
 800ec8e:	46c0      	nop			@ (mov r8, r8)
 800ec90:	20001644 	.word	0x20001644

0800ec94 <__errno>:
 800ec94:	4b01      	ldr	r3, [pc, #4]	@ (800ec9c <__errno+0x8>)
 800ec96:	6818      	ldr	r0, [r3, #0]
 800ec98:	4770      	bx	lr
 800ec9a:	46c0      	nop			@ (mov r8, r8)
 800ec9c:	20000188 	.word	0x20000188

0800eca0 <__libc_init_array>:
 800eca0:	b570      	push	{r4, r5, r6, lr}
 800eca2:	2600      	movs	r6, #0
 800eca4:	4c0c      	ldr	r4, [pc, #48]	@ (800ecd8 <__libc_init_array+0x38>)
 800eca6:	4d0d      	ldr	r5, [pc, #52]	@ (800ecdc <__libc_init_array+0x3c>)
 800eca8:	1b64      	subs	r4, r4, r5
 800ecaa:	10a4      	asrs	r4, r4, #2
 800ecac:	42a6      	cmp	r6, r4
 800ecae:	d109      	bne.n	800ecc4 <__libc_init_array+0x24>
 800ecb0:	2600      	movs	r6, #0
 800ecb2:	f002 fadb 	bl	801126c <_init>
 800ecb6:	4c0a      	ldr	r4, [pc, #40]	@ (800ece0 <__libc_init_array+0x40>)
 800ecb8:	4d0a      	ldr	r5, [pc, #40]	@ (800ece4 <__libc_init_array+0x44>)
 800ecba:	1b64      	subs	r4, r4, r5
 800ecbc:	10a4      	asrs	r4, r4, #2
 800ecbe:	42a6      	cmp	r6, r4
 800ecc0:	d105      	bne.n	800ecce <__libc_init_array+0x2e>
 800ecc2:	bd70      	pop	{r4, r5, r6, pc}
 800ecc4:	00b3      	lsls	r3, r6, #2
 800ecc6:	58eb      	ldr	r3, [r5, r3]
 800ecc8:	4798      	blx	r3
 800ecca:	3601      	adds	r6, #1
 800eccc:	e7ee      	b.n	800ecac <__libc_init_array+0xc>
 800ecce:	00b3      	lsls	r3, r6, #2
 800ecd0:	58eb      	ldr	r3, [r5, r3]
 800ecd2:	4798      	blx	r3
 800ecd4:	3601      	adds	r6, #1
 800ecd6:	e7f2      	b.n	800ecbe <__libc_init_array+0x1e>
 800ecd8:	0801c2c8 	.word	0x0801c2c8
 800ecdc:	0801c2c8 	.word	0x0801c2c8
 800ece0:	0801c2cc 	.word	0x0801c2cc
 800ece4:	0801c2c8 	.word	0x0801c2c8

0800ece8 <__retarget_lock_init_recursive>:
 800ece8:	4770      	bx	lr

0800ecea <__retarget_lock_acquire_recursive>:
 800ecea:	4770      	bx	lr

0800ecec <__retarget_lock_release_recursive>:
 800ecec:	4770      	bx	lr

0800ecee <memcpy>:
 800ecee:	2300      	movs	r3, #0
 800ecf0:	b510      	push	{r4, lr}
 800ecf2:	429a      	cmp	r2, r3
 800ecf4:	d100      	bne.n	800ecf8 <memcpy+0xa>
 800ecf6:	bd10      	pop	{r4, pc}
 800ecf8:	5ccc      	ldrb	r4, [r1, r3]
 800ecfa:	54c4      	strb	r4, [r0, r3]
 800ecfc:	3301      	adds	r3, #1
 800ecfe:	e7f8      	b.n	800ecf2 <memcpy+0x4>

0800ed00 <nan>:
 800ed00:	2000      	movs	r0, #0
 800ed02:	4901      	ldr	r1, [pc, #4]	@ (800ed08 <nan+0x8>)
 800ed04:	4770      	bx	lr
 800ed06:	46c0      	nop			@ (mov r8, r8)
 800ed08:	7ff80000 	.word	0x7ff80000

0800ed0c <_free_r>:
 800ed0c:	b570      	push	{r4, r5, r6, lr}
 800ed0e:	0005      	movs	r5, r0
 800ed10:	1e0c      	subs	r4, r1, #0
 800ed12:	d010      	beq.n	800ed36 <_free_r+0x2a>
 800ed14:	3c04      	subs	r4, #4
 800ed16:	6823      	ldr	r3, [r4, #0]
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	da00      	bge.n	800ed1e <_free_r+0x12>
 800ed1c:	18e4      	adds	r4, r4, r3
 800ed1e:	0028      	movs	r0, r5
 800ed20:	f000 fc4c 	bl	800f5bc <__malloc_lock>
 800ed24:	4a1d      	ldr	r2, [pc, #116]	@ (800ed9c <_free_r+0x90>)
 800ed26:	6813      	ldr	r3, [r2, #0]
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d105      	bne.n	800ed38 <_free_r+0x2c>
 800ed2c:	6063      	str	r3, [r4, #4]
 800ed2e:	6014      	str	r4, [r2, #0]
 800ed30:	0028      	movs	r0, r5
 800ed32:	f000 fc4b 	bl	800f5cc <__malloc_unlock>
 800ed36:	bd70      	pop	{r4, r5, r6, pc}
 800ed38:	42a3      	cmp	r3, r4
 800ed3a:	d908      	bls.n	800ed4e <_free_r+0x42>
 800ed3c:	6820      	ldr	r0, [r4, #0]
 800ed3e:	1821      	adds	r1, r4, r0
 800ed40:	428b      	cmp	r3, r1
 800ed42:	d1f3      	bne.n	800ed2c <_free_r+0x20>
 800ed44:	6819      	ldr	r1, [r3, #0]
 800ed46:	685b      	ldr	r3, [r3, #4]
 800ed48:	1809      	adds	r1, r1, r0
 800ed4a:	6021      	str	r1, [r4, #0]
 800ed4c:	e7ee      	b.n	800ed2c <_free_r+0x20>
 800ed4e:	001a      	movs	r2, r3
 800ed50:	685b      	ldr	r3, [r3, #4]
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d001      	beq.n	800ed5a <_free_r+0x4e>
 800ed56:	42a3      	cmp	r3, r4
 800ed58:	d9f9      	bls.n	800ed4e <_free_r+0x42>
 800ed5a:	6811      	ldr	r1, [r2, #0]
 800ed5c:	1850      	adds	r0, r2, r1
 800ed5e:	42a0      	cmp	r0, r4
 800ed60:	d10b      	bne.n	800ed7a <_free_r+0x6e>
 800ed62:	6820      	ldr	r0, [r4, #0]
 800ed64:	1809      	adds	r1, r1, r0
 800ed66:	1850      	adds	r0, r2, r1
 800ed68:	6011      	str	r1, [r2, #0]
 800ed6a:	4283      	cmp	r3, r0
 800ed6c:	d1e0      	bne.n	800ed30 <_free_r+0x24>
 800ed6e:	6818      	ldr	r0, [r3, #0]
 800ed70:	685b      	ldr	r3, [r3, #4]
 800ed72:	1841      	adds	r1, r0, r1
 800ed74:	6011      	str	r1, [r2, #0]
 800ed76:	6053      	str	r3, [r2, #4]
 800ed78:	e7da      	b.n	800ed30 <_free_r+0x24>
 800ed7a:	42a0      	cmp	r0, r4
 800ed7c:	d902      	bls.n	800ed84 <_free_r+0x78>
 800ed7e:	230c      	movs	r3, #12
 800ed80:	602b      	str	r3, [r5, #0]
 800ed82:	e7d5      	b.n	800ed30 <_free_r+0x24>
 800ed84:	6820      	ldr	r0, [r4, #0]
 800ed86:	1821      	adds	r1, r4, r0
 800ed88:	428b      	cmp	r3, r1
 800ed8a:	d103      	bne.n	800ed94 <_free_r+0x88>
 800ed8c:	6819      	ldr	r1, [r3, #0]
 800ed8e:	685b      	ldr	r3, [r3, #4]
 800ed90:	1809      	adds	r1, r1, r0
 800ed92:	6021      	str	r1, [r4, #0]
 800ed94:	6063      	str	r3, [r4, #4]
 800ed96:	6054      	str	r4, [r2, #4]
 800ed98:	e7ca      	b.n	800ed30 <_free_r+0x24>
 800ed9a:	46c0      	nop			@ (mov r8, r8)
 800ed9c:	20001650 	.word	0x20001650

0800eda0 <rshift>:
 800eda0:	0002      	movs	r2, r0
 800eda2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eda4:	6904      	ldr	r4, [r0, #16]
 800eda6:	b085      	sub	sp, #20
 800eda8:	3214      	adds	r2, #20
 800edaa:	114b      	asrs	r3, r1, #5
 800edac:	0016      	movs	r6, r2
 800edae:	9302      	str	r3, [sp, #8]
 800edb0:	429c      	cmp	r4, r3
 800edb2:	dd31      	ble.n	800ee18 <rshift+0x78>
 800edb4:	261f      	movs	r6, #31
 800edb6:	000f      	movs	r7, r1
 800edb8:	009b      	lsls	r3, r3, #2
 800edba:	00a5      	lsls	r5, r4, #2
 800edbc:	18d3      	adds	r3, r2, r3
 800edbe:	4037      	ands	r7, r6
 800edc0:	1955      	adds	r5, r2, r5
 800edc2:	9300      	str	r3, [sp, #0]
 800edc4:	9701      	str	r7, [sp, #4]
 800edc6:	4231      	tst	r1, r6
 800edc8:	d10d      	bne.n	800ede6 <rshift+0x46>
 800edca:	0016      	movs	r6, r2
 800edcc:	0019      	movs	r1, r3
 800edce:	428d      	cmp	r5, r1
 800edd0:	d836      	bhi.n	800ee40 <rshift+0xa0>
 800edd2:	9b00      	ldr	r3, [sp, #0]
 800edd4:	2600      	movs	r6, #0
 800edd6:	3b03      	subs	r3, #3
 800edd8:	429d      	cmp	r5, r3
 800edda:	d302      	bcc.n	800ede2 <rshift+0x42>
 800eddc:	9b02      	ldr	r3, [sp, #8]
 800edde:	1ae4      	subs	r4, r4, r3
 800ede0:	00a6      	lsls	r6, r4, #2
 800ede2:	1996      	adds	r6, r2, r6
 800ede4:	e018      	b.n	800ee18 <rshift+0x78>
 800ede6:	2120      	movs	r1, #32
 800ede8:	9e01      	ldr	r6, [sp, #4]
 800edea:	9f01      	ldr	r7, [sp, #4]
 800edec:	1b89      	subs	r1, r1, r6
 800edee:	9e00      	ldr	r6, [sp, #0]
 800edf0:	9103      	str	r1, [sp, #12]
 800edf2:	ce02      	ldmia	r6!, {r1}
 800edf4:	4694      	mov	ip, r2
 800edf6:	40f9      	lsrs	r1, r7
 800edf8:	42b5      	cmp	r5, r6
 800edfa:	d816      	bhi.n	800ee2a <rshift+0x8a>
 800edfc:	9b00      	ldr	r3, [sp, #0]
 800edfe:	2600      	movs	r6, #0
 800ee00:	3301      	adds	r3, #1
 800ee02:	429d      	cmp	r5, r3
 800ee04:	d303      	bcc.n	800ee0e <rshift+0x6e>
 800ee06:	9b02      	ldr	r3, [sp, #8]
 800ee08:	1ae4      	subs	r4, r4, r3
 800ee0a:	00a6      	lsls	r6, r4, #2
 800ee0c:	3e04      	subs	r6, #4
 800ee0e:	1996      	adds	r6, r2, r6
 800ee10:	6031      	str	r1, [r6, #0]
 800ee12:	2900      	cmp	r1, #0
 800ee14:	d000      	beq.n	800ee18 <rshift+0x78>
 800ee16:	3604      	adds	r6, #4
 800ee18:	1ab1      	subs	r1, r6, r2
 800ee1a:	1089      	asrs	r1, r1, #2
 800ee1c:	6101      	str	r1, [r0, #16]
 800ee1e:	4296      	cmp	r6, r2
 800ee20:	d101      	bne.n	800ee26 <rshift+0x86>
 800ee22:	2300      	movs	r3, #0
 800ee24:	6143      	str	r3, [r0, #20]
 800ee26:	b005      	add	sp, #20
 800ee28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee2a:	6837      	ldr	r7, [r6, #0]
 800ee2c:	9b03      	ldr	r3, [sp, #12]
 800ee2e:	409f      	lsls	r7, r3
 800ee30:	430f      	orrs	r7, r1
 800ee32:	4661      	mov	r1, ip
 800ee34:	c180      	stmia	r1!, {r7}
 800ee36:	468c      	mov	ip, r1
 800ee38:	9b01      	ldr	r3, [sp, #4]
 800ee3a:	ce02      	ldmia	r6!, {r1}
 800ee3c:	40d9      	lsrs	r1, r3
 800ee3e:	e7db      	b.n	800edf8 <rshift+0x58>
 800ee40:	c980      	ldmia	r1!, {r7}
 800ee42:	c680      	stmia	r6!, {r7}
 800ee44:	e7c3      	b.n	800edce <rshift+0x2e>

0800ee46 <__hexdig_fun>:
 800ee46:	0002      	movs	r2, r0
 800ee48:	3a30      	subs	r2, #48	@ 0x30
 800ee4a:	0003      	movs	r3, r0
 800ee4c:	2a09      	cmp	r2, #9
 800ee4e:	d802      	bhi.n	800ee56 <__hexdig_fun+0x10>
 800ee50:	3b20      	subs	r3, #32
 800ee52:	b2d8      	uxtb	r0, r3
 800ee54:	4770      	bx	lr
 800ee56:	0002      	movs	r2, r0
 800ee58:	3a61      	subs	r2, #97	@ 0x61
 800ee5a:	2a05      	cmp	r2, #5
 800ee5c:	d801      	bhi.n	800ee62 <__hexdig_fun+0x1c>
 800ee5e:	3b47      	subs	r3, #71	@ 0x47
 800ee60:	e7f7      	b.n	800ee52 <__hexdig_fun+0xc>
 800ee62:	001a      	movs	r2, r3
 800ee64:	3a41      	subs	r2, #65	@ 0x41
 800ee66:	2000      	movs	r0, #0
 800ee68:	2a05      	cmp	r2, #5
 800ee6a:	d8f3      	bhi.n	800ee54 <__hexdig_fun+0xe>
 800ee6c:	3b27      	subs	r3, #39	@ 0x27
 800ee6e:	e7f0      	b.n	800ee52 <__hexdig_fun+0xc>

0800ee70 <__gethex>:
 800ee70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee72:	b089      	sub	sp, #36	@ 0x24
 800ee74:	9307      	str	r3, [sp, #28]
 800ee76:	680b      	ldr	r3, [r1, #0]
 800ee78:	9201      	str	r2, [sp, #4]
 800ee7a:	9003      	str	r0, [sp, #12]
 800ee7c:	9106      	str	r1, [sp, #24]
 800ee7e:	1c9a      	adds	r2, r3, #2
 800ee80:	0011      	movs	r1, r2
 800ee82:	3201      	adds	r2, #1
 800ee84:	1e50      	subs	r0, r2, #1
 800ee86:	7800      	ldrb	r0, [r0, #0]
 800ee88:	2830      	cmp	r0, #48	@ 0x30
 800ee8a:	d0f9      	beq.n	800ee80 <__gethex+0x10>
 800ee8c:	1acb      	subs	r3, r1, r3
 800ee8e:	3b02      	subs	r3, #2
 800ee90:	9305      	str	r3, [sp, #20]
 800ee92:	9100      	str	r1, [sp, #0]
 800ee94:	f7ff ffd7 	bl	800ee46 <__hexdig_fun>
 800ee98:	2300      	movs	r3, #0
 800ee9a:	001d      	movs	r5, r3
 800ee9c:	9302      	str	r3, [sp, #8]
 800ee9e:	4298      	cmp	r0, r3
 800eea0:	d11e      	bne.n	800eee0 <__gethex+0x70>
 800eea2:	2201      	movs	r2, #1
 800eea4:	49a6      	ldr	r1, [pc, #664]	@ (800f140 <__gethex+0x2d0>)
 800eea6:	9800      	ldr	r0, [sp, #0]
 800eea8:	f7ff fe94 	bl	800ebd4 <strncmp>
 800eeac:	0007      	movs	r7, r0
 800eeae:	42a8      	cmp	r0, r5
 800eeb0:	d000      	beq.n	800eeb4 <__gethex+0x44>
 800eeb2:	e06a      	b.n	800ef8a <__gethex+0x11a>
 800eeb4:	9b00      	ldr	r3, [sp, #0]
 800eeb6:	7858      	ldrb	r0, [r3, #1]
 800eeb8:	1c5c      	adds	r4, r3, #1
 800eeba:	f7ff ffc4 	bl	800ee46 <__hexdig_fun>
 800eebe:	2301      	movs	r3, #1
 800eec0:	9302      	str	r3, [sp, #8]
 800eec2:	42a8      	cmp	r0, r5
 800eec4:	d02f      	beq.n	800ef26 <__gethex+0xb6>
 800eec6:	9400      	str	r4, [sp, #0]
 800eec8:	9b00      	ldr	r3, [sp, #0]
 800eeca:	7818      	ldrb	r0, [r3, #0]
 800eecc:	2830      	cmp	r0, #48	@ 0x30
 800eece:	d009      	beq.n	800eee4 <__gethex+0x74>
 800eed0:	f7ff ffb9 	bl	800ee46 <__hexdig_fun>
 800eed4:	4242      	negs	r2, r0
 800eed6:	4142      	adcs	r2, r0
 800eed8:	2301      	movs	r3, #1
 800eeda:	0025      	movs	r5, r4
 800eedc:	9202      	str	r2, [sp, #8]
 800eede:	9305      	str	r3, [sp, #20]
 800eee0:	9c00      	ldr	r4, [sp, #0]
 800eee2:	e004      	b.n	800eeee <__gethex+0x7e>
 800eee4:	9b00      	ldr	r3, [sp, #0]
 800eee6:	3301      	adds	r3, #1
 800eee8:	9300      	str	r3, [sp, #0]
 800eeea:	e7ed      	b.n	800eec8 <__gethex+0x58>
 800eeec:	3401      	adds	r4, #1
 800eeee:	7820      	ldrb	r0, [r4, #0]
 800eef0:	f7ff ffa9 	bl	800ee46 <__hexdig_fun>
 800eef4:	1e07      	subs	r7, r0, #0
 800eef6:	d1f9      	bne.n	800eeec <__gethex+0x7c>
 800eef8:	2201      	movs	r2, #1
 800eefa:	0020      	movs	r0, r4
 800eefc:	4990      	ldr	r1, [pc, #576]	@ (800f140 <__gethex+0x2d0>)
 800eefe:	f7ff fe69 	bl	800ebd4 <strncmp>
 800ef02:	2800      	cmp	r0, #0
 800ef04:	d10d      	bne.n	800ef22 <__gethex+0xb2>
 800ef06:	2d00      	cmp	r5, #0
 800ef08:	d106      	bne.n	800ef18 <__gethex+0xa8>
 800ef0a:	3401      	adds	r4, #1
 800ef0c:	0025      	movs	r5, r4
 800ef0e:	7820      	ldrb	r0, [r4, #0]
 800ef10:	f7ff ff99 	bl	800ee46 <__hexdig_fun>
 800ef14:	2800      	cmp	r0, #0
 800ef16:	d102      	bne.n	800ef1e <__gethex+0xae>
 800ef18:	1b2d      	subs	r5, r5, r4
 800ef1a:	00af      	lsls	r7, r5, #2
 800ef1c:	e003      	b.n	800ef26 <__gethex+0xb6>
 800ef1e:	3401      	adds	r4, #1
 800ef20:	e7f5      	b.n	800ef0e <__gethex+0x9e>
 800ef22:	2d00      	cmp	r5, #0
 800ef24:	d1f8      	bne.n	800ef18 <__gethex+0xa8>
 800ef26:	2220      	movs	r2, #32
 800ef28:	7823      	ldrb	r3, [r4, #0]
 800ef2a:	0026      	movs	r6, r4
 800ef2c:	4393      	bics	r3, r2
 800ef2e:	2b50      	cmp	r3, #80	@ 0x50
 800ef30:	d11d      	bne.n	800ef6e <__gethex+0xfe>
 800ef32:	7863      	ldrb	r3, [r4, #1]
 800ef34:	2b2b      	cmp	r3, #43	@ 0x2b
 800ef36:	d02d      	beq.n	800ef94 <__gethex+0x124>
 800ef38:	2b2d      	cmp	r3, #45	@ 0x2d
 800ef3a:	d02f      	beq.n	800ef9c <__gethex+0x12c>
 800ef3c:	2300      	movs	r3, #0
 800ef3e:	1c66      	adds	r6, r4, #1
 800ef40:	9304      	str	r3, [sp, #16]
 800ef42:	7830      	ldrb	r0, [r6, #0]
 800ef44:	f7ff ff7f 	bl	800ee46 <__hexdig_fun>
 800ef48:	1e43      	subs	r3, r0, #1
 800ef4a:	b2db      	uxtb	r3, r3
 800ef4c:	0005      	movs	r5, r0
 800ef4e:	2b18      	cmp	r3, #24
 800ef50:	d82a      	bhi.n	800efa8 <__gethex+0x138>
 800ef52:	7870      	ldrb	r0, [r6, #1]
 800ef54:	f7ff ff77 	bl	800ee46 <__hexdig_fun>
 800ef58:	1e43      	subs	r3, r0, #1
 800ef5a:	b2db      	uxtb	r3, r3
 800ef5c:	3601      	adds	r6, #1
 800ef5e:	3d10      	subs	r5, #16
 800ef60:	2b18      	cmp	r3, #24
 800ef62:	d91d      	bls.n	800efa0 <__gethex+0x130>
 800ef64:	9b04      	ldr	r3, [sp, #16]
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d000      	beq.n	800ef6c <__gethex+0xfc>
 800ef6a:	426d      	negs	r5, r5
 800ef6c:	197f      	adds	r7, r7, r5
 800ef6e:	9b06      	ldr	r3, [sp, #24]
 800ef70:	601e      	str	r6, [r3, #0]
 800ef72:	9b02      	ldr	r3, [sp, #8]
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d019      	beq.n	800efac <__gethex+0x13c>
 800ef78:	9b05      	ldr	r3, [sp, #20]
 800ef7a:	2606      	movs	r6, #6
 800ef7c:	425a      	negs	r2, r3
 800ef7e:	4153      	adcs	r3, r2
 800ef80:	425b      	negs	r3, r3
 800ef82:	401e      	ands	r6, r3
 800ef84:	0030      	movs	r0, r6
 800ef86:	b009      	add	sp, #36	@ 0x24
 800ef88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ef8a:	2301      	movs	r3, #1
 800ef8c:	2700      	movs	r7, #0
 800ef8e:	9c00      	ldr	r4, [sp, #0]
 800ef90:	9302      	str	r3, [sp, #8]
 800ef92:	e7c8      	b.n	800ef26 <__gethex+0xb6>
 800ef94:	2300      	movs	r3, #0
 800ef96:	9304      	str	r3, [sp, #16]
 800ef98:	1ca6      	adds	r6, r4, #2
 800ef9a:	e7d2      	b.n	800ef42 <__gethex+0xd2>
 800ef9c:	2301      	movs	r3, #1
 800ef9e:	e7fa      	b.n	800ef96 <__gethex+0x126>
 800efa0:	230a      	movs	r3, #10
 800efa2:	435d      	muls	r5, r3
 800efa4:	182d      	adds	r5, r5, r0
 800efa6:	e7d4      	b.n	800ef52 <__gethex+0xe2>
 800efa8:	0026      	movs	r6, r4
 800efaa:	e7e0      	b.n	800ef6e <__gethex+0xfe>
 800efac:	9b00      	ldr	r3, [sp, #0]
 800efae:	9902      	ldr	r1, [sp, #8]
 800efb0:	1ae3      	subs	r3, r4, r3
 800efb2:	3b01      	subs	r3, #1
 800efb4:	2b07      	cmp	r3, #7
 800efb6:	dc0a      	bgt.n	800efce <__gethex+0x15e>
 800efb8:	9803      	ldr	r0, [sp, #12]
 800efba:	f000 fb0f 	bl	800f5dc <_Balloc>
 800efbe:	1e05      	subs	r5, r0, #0
 800efc0:	d108      	bne.n	800efd4 <__gethex+0x164>
 800efc2:	002a      	movs	r2, r5
 800efc4:	21e4      	movs	r1, #228	@ 0xe4
 800efc6:	4b5f      	ldr	r3, [pc, #380]	@ (800f144 <__gethex+0x2d4>)
 800efc8:	485f      	ldr	r0, [pc, #380]	@ (800f148 <__gethex+0x2d8>)
 800efca:	f001 fd83 	bl	8010ad4 <__assert_func>
 800efce:	3101      	adds	r1, #1
 800efd0:	105b      	asrs	r3, r3, #1
 800efd2:	e7ef      	b.n	800efb4 <__gethex+0x144>
 800efd4:	0003      	movs	r3, r0
 800efd6:	3314      	adds	r3, #20
 800efd8:	9302      	str	r3, [sp, #8]
 800efda:	9305      	str	r3, [sp, #20]
 800efdc:	2300      	movs	r3, #0
 800efde:	001e      	movs	r6, r3
 800efe0:	9304      	str	r3, [sp, #16]
 800efe2:	9b00      	ldr	r3, [sp, #0]
 800efe4:	42a3      	cmp	r3, r4
 800efe6:	d338      	bcc.n	800f05a <__gethex+0x1ea>
 800efe8:	9c05      	ldr	r4, [sp, #20]
 800efea:	9b02      	ldr	r3, [sp, #8]
 800efec:	c440      	stmia	r4!, {r6}
 800efee:	1ae4      	subs	r4, r4, r3
 800eff0:	10a4      	asrs	r4, r4, #2
 800eff2:	0030      	movs	r0, r6
 800eff4:	612c      	str	r4, [r5, #16]
 800eff6:	f000 fbe9 	bl	800f7cc <__hi0bits>
 800effa:	9b01      	ldr	r3, [sp, #4]
 800effc:	0164      	lsls	r4, r4, #5
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	1a26      	subs	r6, r4, r0
 800f002:	9300      	str	r3, [sp, #0]
 800f004:	429e      	cmp	r6, r3
 800f006:	dd52      	ble.n	800f0ae <__gethex+0x23e>
 800f008:	1af6      	subs	r6, r6, r3
 800f00a:	0031      	movs	r1, r6
 800f00c:	0028      	movs	r0, r5
 800f00e:	f000 ff8c 	bl	800ff2a <__any_on>
 800f012:	1e04      	subs	r4, r0, #0
 800f014:	d00f      	beq.n	800f036 <__gethex+0x1c6>
 800f016:	2401      	movs	r4, #1
 800f018:	231f      	movs	r3, #31
 800f01a:	0020      	movs	r0, r4
 800f01c:	1e72      	subs	r2, r6, #1
 800f01e:	4013      	ands	r3, r2
 800f020:	4098      	lsls	r0, r3
 800f022:	0003      	movs	r3, r0
 800f024:	1151      	asrs	r1, r2, #5
 800f026:	9802      	ldr	r0, [sp, #8]
 800f028:	0089      	lsls	r1, r1, #2
 800f02a:	5809      	ldr	r1, [r1, r0]
 800f02c:	4219      	tst	r1, r3
 800f02e:	d002      	beq.n	800f036 <__gethex+0x1c6>
 800f030:	42a2      	cmp	r2, r4
 800f032:	dc34      	bgt.n	800f09e <__gethex+0x22e>
 800f034:	2402      	movs	r4, #2
 800f036:	0031      	movs	r1, r6
 800f038:	0028      	movs	r0, r5
 800f03a:	f7ff feb1 	bl	800eda0 <rshift>
 800f03e:	19bf      	adds	r7, r7, r6
 800f040:	9b01      	ldr	r3, [sp, #4]
 800f042:	689b      	ldr	r3, [r3, #8]
 800f044:	42bb      	cmp	r3, r7
 800f046:	da42      	bge.n	800f0ce <__gethex+0x25e>
 800f048:	0029      	movs	r1, r5
 800f04a:	9803      	ldr	r0, [sp, #12]
 800f04c:	f000 fb0a 	bl	800f664 <_Bfree>
 800f050:	2300      	movs	r3, #0
 800f052:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f054:	26a3      	movs	r6, #163	@ 0xa3
 800f056:	6013      	str	r3, [r2, #0]
 800f058:	e794      	b.n	800ef84 <__gethex+0x114>
 800f05a:	3c01      	subs	r4, #1
 800f05c:	7823      	ldrb	r3, [r4, #0]
 800f05e:	2b2e      	cmp	r3, #46	@ 0x2e
 800f060:	d012      	beq.n	800f088 <__gethex+0x218>
 800f062:	9b04      	ldr	r3, [sp, #16]
 800f064:	2b20      	cmp	r3, #32
 800f066:	d104      	bne.n	800f072 <__gethex+0x202>
 800f068:	9b05      	ldr	r3, [sp, #20]
 800f06a:	c340      	stmia	r3!, {r6}
 800f06c:	2600      	movs	r6, #0
 800f06e:	9305      	str	r3, [sp, #20]
 800f070:	9604      	str	r6, [sp, #16]
 800f072:	7820      	ldrb	r0, [r4, #0]
 800f074:	f7ff fee7 	bl	800ee46 <__hexdig_fun>
 800f078:	230f      	movs	r3, #15
 800f07a:	4018      	ands	r0, r3
 800f07c:	9b04      	ldr	r3, [sp, #16]
 800f07e:	4098      	lsls	r0, r3
 800f080:	3304      	adds	r3, #4
 800f082:	4306      	orrs	r6, r0
 800f084:	9304      	str	r3, [sp, #16]
 800f086:	e7ac      	b.n	800efe2 <__gethex+0x172>
 800f088:	9b00      	ldr	r3, [sp, #0]
 800f08a:	42a3      	cmp	r3, r4
 800f08c:	d8e9      	bhi.n	800f062 <__gethex+0x1f2>
 800f08e:	2201      	movs	r2, #1
 800f090:	0020      	movs	r0, r4
 800f092:	492b      	ldr	r1, [pc, #172]	@ (800f140 <__gethex+0x2d0>)
 800f094:	f7ff fd9e 	bl	800ebd4 <strncmp>
 800f098:	2800      	cmp	r0, #0
 800f09a:	d1e2      	bne.n	800f062 <__gethex+0x1f2>
 800f09c:	e7a1      	b.n	800efe2 <__gethex+0x172>
 800f09e:	0028      	movs	r0, r5
 800f0a0:	1eb1      	subs	r1, r6, #2
 800f0a2:	f000 ff42 	bl	800ff2a <__any_on>
 800f0a6:	2800      	cmp	r0, #0
 800f0a8:	d0c4      	beq.n	800f034 <__gethex+0x1c4>
 800f0aa:	2403      	movs	r4, #3
 800f0ac:	e7c3      	b.n	800f036 <__gethex+0x1c6>
 800f0ae:	9b00      	ldr	r3, [sp, #0]
 800f0b0:	2400      	movs	r4, #0
 800f0b2:	429e      	cmp	r6, r3
 800f0b4:	dac4      	bge.n	800f040 <__gethex+0x1d0>
 800f0b6:	1b9e      	subs	r6, r3, r6
 800f0b8:	0029      	movs	r1, r5
 800f0ba:	0032      	movs	r2, r6
 800f0bc:	9803      	ldr	r0, [sp, #12]
 800f0be:	f000 fcfb 	bl	800fab8 <__lshift>
 800f0c2:	0003      	movs	r3, r0
 800f0c4:	3314      	adds	r3, #20
 800f0c6:	0005      	movs	r5, r0
 800f0c8:	1bbf      	subs	r7, r7, r6
 800f0ca:	9302      	str	r3, [sp, #8]
 800f0cc:	e7b8      	b.n	800f040 <__gethex+0x1d0>
 800f0ce:	9b01      	ldr	r3, [sp, #4]
 800f0d0:	685e      	ldr	r6, [r3, #4]
 800f0d2:	42be      	cmp	r6, r7
 800f0d4:	dd6f      	ble.n	800f1b6 <__gethex+0x346>
 800f0d6:	9b00      	ldr	r3, [sp, #0]
 800f0d8:	1bf6      	subs	r6, r6, r7
 800f0da:	42b3      	cmp	r3, r6
 800f0dc:	dc36      	bgt.n	800f14c <__gethex+0x2dc>
 800f0de:	9b01      	ldr	r3, [sp, #4]
 800f0e0:	68db      	ldr	r3, [r3, #12]
 800f0e2:	2b02      	cmp	r3, #2
 800f0e4:	d024      	beq.n	800f130 <__gethex+0x2c0>
 800f0e6:	2b03      	cmp	r3, #3
 800f0e8:	d026      	beq.n	800f138 <__gethex+0x2c8>
 800f0ea:	2b01      	cmp	r3, #1
 800f0ec:	d117      	bne.n	800f11e <__gethex+0x2ae>
 800f0ee:	9b00      	ldr	r3, [sp, #0]
 800f0f0:	42b3      	cmp	r3, r6
 800f0f2:	d114      	bne.n	800f11e <__gethex+0x2ae>
 800f0f4:	2b01      	cmp	r3, #1
 800f0f6:	d10b      	bne.n	800f110 <__gethex+0x2a0>
 800f0f8:	9b01      	ldr	r3, [sp, #4]
 800f0fa:	9a07      	ldr	r2, [sp, #28]
 800f0fc:	685b      	ldr	r3, [r3, #4]
 800f0fe:	2662      	movs	r6, #98	@ 0x62
 800f100:	6013      	str	r3, [r2, #0]
 800f102:	2301      	movs	r3, #1
 800f104:	9a02      	ldr	r2, [sp, #8]
 800f106:	612b      	str	r3, [r5, #16]
 800f108:	6013      	str	r3, [r2, #0]
 800f10a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f10c:	601d      	str	r5, [r3, #0]
 800f10e:	e739      	b.n	800ef84 <__gethex+0x114>
 800f110:	9900      	ldr	r1, [sp, #0]
 800f112:	0028      	movs	r0, r5
 800f114:	3901      	subs	r1, #1
 800f116:	f000 ff08 	bl	800ff2a <__any_on>
 800f11a:	2800      	cmp	r0, #0
 800f11c:	d1ec      	bne.n	800f0f8 <__gethex+0x288>
 800f11e:	0029      	movs	r1, r5
 800f120:	9803      	ldr	r0, [sp, #12]
 800f122:	f000 fa9f 	bl	800f664 <_Bfree>
 800f126:	2300      	movs	r3, #0
 800f128:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f12a:	2650      	movs	r6, #80	@ 0x50
 800f12c:	6013      	str	r3, [r2, #0]
 800f12e:	e729      	b.n	800ef84 <__gethex+0x114>
 800f130:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f132:	2b00      	cmp	r3, #0
 800f134:	d1f3      	bne.n	800f11e <__gethex+0x2ae>
 800f136:	e7df      	b.n	800f0f8 <__gethex+0x288>
 800f138:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d1dc      	bne.n	800f0f8 <__gethex+0x288>
 800f13e:	e7ee      	b.n	800f11e <__gethex+0x2ae>
 800f140:	0801bef4 	.word	0x0801bef4
 800f144:	0801c061 	.word	0x0801c061
 800f148:	0801c072 	.word	0x0801c072
 800f14c:	1e77      	subs	r7, r6, #1
 800f14e:	2c00      	cmp	r4, #0
 800f150:	d12f      	bne.n	800f1b2 <__gethex+0x342>
 800f152:	2f00      	cmp	r7, #0
 800f154:	d004      	beq.n	800f160 <__gethex+0x2f0>
 800f156:	0039      	movs	r1, r7
 800f158:	0028      	movs	r0, r5
 800f15a:	f000 fee6 	bl	800ff2a <__any_on>
 800f15e:	0004      	movs	r4, r0
 800f160:	231f      	movs	r3, #31
 800f162:	117a      	asrs	r2, r7, #5
 800f164:	401f      	ands	r7, r3
 800f166:	3b1e      	subs	r3, #30
 800f168:	40bb      	lsls	r3, r7
 800f16a:	9902      	ldr	r1, [sp, #8]
 800f16c:	0092      	lsls	r2, r2, #2
 800f16e:	5852      	ldr	r2, [r2, r1]
 800f170:	421a      	tst	r2, r3
 800f172:	d001      	beq.n	800f178 <__gethex+0x308>
 800f174:	2302      	movs	r3, #2
 800f176:	431c      	orrs	r4, r3
 800f178:	9b00      	ldr	r3, [sp, #0]
 800f17a:	0031      	movs	r1, r6
 800f17c:	1b9b      	subs	r3, r3, r6
 800f17e:	2602      	movs	r6, #2
 800f180:	0028      	movs	r0, r5
 800f182:	9300      	str	r3, [sp, #0]
 800f184:	f7ff fe0c 	bl	800eda0 <rshift>
 800f188:	9b01      	ldr	r3, [sp, #4]
 800f18a:	685f      	ldr	r7, [r3, #4]
 800f18c:	2c00      	cmp	r4, #0
 800f18e:	d03f      	beq.n	800f210 <__gethex+0x3a0>
 800f190:	9b01      	ldr	r3, [sp, #4]
 800f192:	68db      	ldr	r3, [r3, #12]
 800f194:	2b02      	cmp	r3, #2
 800f196:	d010      	beq.n	800f1ba <__gethex+0x34a>
 800f198:	2b03      	cmp	r3, #3
 800f19a:	d012      	beq.n	800f1c2 <__gethex+0x352>
 800f19c:	2b01      	cmp	r3, #1
 800f19e:	d106      	bne.n	800f1ae <__gethex+0x33e>
 800f1a0:	07a2      	lsls	r2, r4, #30
 800f1a2:	d504      	bpl.n	800f1ae <__gethex+0x33e>
 800f1a4:	9a02      	ldr	r2, [sp, #8]
 800f1a6:	6812      	ldr	r2, [r2, #0]
 800f1a8:	4314      	orrs	r4, r2
 800f1aa:	421c      	tst	r4, r3
 800f1ac:	d10c      	bne.n	800f1c8 <__gethex+0x358>
 800f1ae:	2310      	movs	r3, #16
 800f1b0:	e02d      	b.n	800f20e <__gethex+0x39e>
 800f1b2:	2401      	movs	r4, #1
 800f1b4:	e7d4      	b.n	800f160 <__gethex+0x2f0>
 800f1b6:	2601      	movs	r6, #1
 800f1b8:	e7e8      	b.n	800f18c <__gethex+0x31c>
 800f1ba:	2301      	movs	r3, #1
 800f1bc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f1be:	1a9b      	subs	r3, r3, r2
 800f1c0:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f1c2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d0f2      	beq.n	800f1ae <__gethex+0x33e>
 800f1c8:	692b      	ldr	r3, [r5, #16]
 800f1ca:	2000      	movs	r0, #0
 800f1cc:	9302      	str	r3, [sp, #8]
 800f1ce:	009b      	lsls	r3, r3, #2
 800f1d0:	9304      	str	r3, [sp, #16]
 800f1d2:	002b      	movs	r3, r5
 800f1d4:	9a04      	ldr	r2, [sp, #16]
 800f1d6:	3314      	adds	r3, #20
 800f1d8:	1899      	adds	r1, r3, r2
 800f1da:	681a      	ldr	r2, [r3, #0]
 800f1dc:	1c54      	adds	r4, r2, #1
 800f1de:	d01c      	beq.n	800f21a <__gethex+0x3aa>
 800f1e0:	3201      	adds	r2, #1
 800f1e2:	601a      	str	r2, [r3, #0]
 800f1e4:	002b      	movs	r3, r5
 800f1e6:	3314      	adds	r3, #20
 800f1e8:	2e02      	cmp	r6, #2
 800f1ea:	d13f      	bne.n	800f26c <__gethex+0x3fc>
 800f1ec:	9a01      	ldr	r2, [sp, #4]
 800f1ee:	9900      	ldr	r1, [sp, #0]
 800f1f0:	6812      	ldr	r2, [r2, #0]
 800f1f2:	3a01      	subs	r2, #1
 800f1f4:	428a      	cmp	r2, r1
 800f1f6:	d109      	bne.n	800f20c <__gethex+0x39c>
 800f1f8:	000a      	movs	r2, r1
 800f1fa:	201f      	movs	r0, #31
 800f1fc:	4010      	ands	r0, r2
 800f1fe:	2201      	movs	r2, #1
 800f200:	4082      	lsls	r2, r0
 800f202:	1149      	asrs	r1, r1, #5
 800f204:	0089      	lsls	r1, r1, #2
 800f206:	58cb      	ldr	r3, [r1, r3]
 800f208:	4213      	tst	r3, r2
 800f20a:	d13d      	bne.n	800f288 <__gethex+0x418>
 800f20c:	2320      	movs	r3, #32
 800f20e:	431e      	orrs	r6, r3
 800f210:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f212:	601d      	str	r5, [r3, #0]
 800f214:	9b07      	ldr	r3, [sp, #28]
 800f216:	601f      	str	r7, [r3, #0]
 800f218:	e6b4      	b.n	800ef84 <__gethex+0x114>
 800f21a:	c301      	stmia	r3!, {r0}
 800f21c:	4299      	cmp	r1, r3
 800f21e:	d8dc      	bhi.n	800f1da <__gethex+0x36a>
 800f220:	68ab      	ldr	r3, [r5, #8]
 800f222:	9a02      	ldr	r2, [sp, #8]
 800f224:	429a      	cmp	r2, r3
 800f226:	db18      	blt.n	800f25a <__gethex+0x3ea>
 800f228:	6869      	ldr	r1, [r5, #4]
 800f22a:	9803      	ldr	r0, [sp, #12]
 800f22c:	3101      	adds	r1, #1
 800f22e:	f000 f9d5 	bl	800f5dc <_Balloc>
 800f232:	1e04      	subs	r4, r0, #0
 800f234:	d104      	bne.n	800f240 <__gethex+0x3d0>
 800f236:	0022      	movs	r2, r4
 800f238:	2184      	movs	r1, #132	@ 0x84
 800f23a:	4b1d      	ldr	r3, [pc, #116]	@ (800f2b0 <__gethex+0x440>)
 800f23c:	481d      	ldr	r0, [pc, #116]	@ (800f2b4 <__gethex+0x444>)
 800f23e:	e6c4      	b.n	800efca <__gethex+0x15a>
 800f240:	0029      	movs	r1, r5
 800f242:	692a      	ldr	r2, [r5, #16]
 800f244:	310c      	adds	r1, #12
 800f246:	3202      	adds	r2, #2
 800f248:	0092      	lsls	r2, r2, #2
 800f24a:	300c      	adds	r0, #12
 800f24c:	f7ff fd4f 	bl	800ecee <memcpy>
 800f250:	0029      	movs	r1, r5
 800f252:	9803      	ldr	r0, [sp, #12]
 800f254:	f000 fa06 	bl	800f664 <_Bfree>
 800f258:	0025      	movs	r5, r4
 800f25a:	692b      	ldr	r3, [r5, #16]
 800f25c:	1c5a      	adds	r2, r3, #1
 800f25e:	612a      	str	r2, [r5, #16]
 800f260:	2201      	movs	r2, #1
 800f262:	3304      	adds	r3, #4
 800f264:	009b      	lsls	r3, r3, #2
 800f266:	18eb      	adds	r3, r5, r3
 800f268:	605a      	str	r2, [r3, #4]
 800f26a:	e7bb      	b.n	800f1e4 <__gethex+0x374>
 800f26c:	692a      	ldr	r2, [r5, #16]
 800f26e:	9902      	ldr	r1, [sp, #8]
 800f270:	428a      	cmp	r2, r1
 800f272:	dd0b      	ble.n	800f28c <__gethex+0x41c>
 800f274:	2101      	movs	r1, #1
 800f276:	0028      	movs	r0, r5
 800f278:	f7ff fd92 	bl	800eda0 <rshift>
 800f27c:	9b01      	ldr	r3, [sp, #4]
 800f27e:	3701      	adds	r7, #1
 800f280:	689b      	ldr	r3, [r3, #8]
 800f282:	42bb      	cmp	r3, r7
 800f284:	da00      	bge.n	800f288 <__gethex+0x418>
 800f286:	e6df      	b.n	800f048 <__gethex+0x1d8>
 800f288:	2601      	movs	r6, #1
 800f28a:	e7bf      	b.n	800f20c <__gethex+0x39c>
 800f28c:	221f      	movs	r2, #31
 800f28e:	9c00      	ldr	r4, [sp, #0]
 800f290:	9900      	ldr	r1, [sp, #0]
 800f292:	4014      	ands	r4, r2
 800f294:	4211      	tst	r1, r2
 800f296:	d0f7      	beq.n	800f288 <__gethex+0x418>
 800f298:	9a04      	ldr	r2, [sp, #16]
 800f29a:	189b      	adds	r3, r3, r2
 800f29c:	3b04      	subs	r3, #4
 800f29e:	6818      	ldr	r0, [r3, #0]
 800f2a0:	f000 fa94 	bl	800f7cc <__hi0bits>
 800f2a4:	2320      	movs	r3, #32
 800f2a6:	1b1b      	subs	r3, r3, r4
 800f2a8:	4298      	cmp	r0, r3
 800f2aa:	dbe3      	blt.n	800f274 <__gethex+0x404>
 800f2ac:	e7ec      	b.n	800f288 <__gethex+0x418>
 800f2ae:	46c0      	nop			@ (mov r8, r8)
 800f2b0:	0801c061 	.word	0x0801c061
 800f2b4:	0801c072 	.word	0x0801c072

0800f2b8 <L_shift>:
 800f2b8:	2308      	movs	r3, #8
 800f2ba:	b570      	push	{r4, r5, r6, lr}
 800f2bc:	2520      	movs	r5, #32
 800f2be:	1a9a      	subs	r2, r3, r2
 800f2c0:	0092      	lsls	r2, r2, #2
 800f2c2:	1aad      	subs	r5, r5, r2
 800f2c4:	6843      	ldr	r3, [r0, #4]
 800f2c6:	6804      	ldr	r4, [r0, #0]
 800f2c8:	001e      	movs	r6, r3
 800f2ca:	40ae      	lsls	r6, r5
 800f2cc:	40d3      	lsrs	r3, r2
 800f2ce:	4334      	orrs	r4, r6
 800f2d0:	6004      	str	r4, [r0, #0]
 800f2d2:	6043      	str	r3, [r0, #4]
 800f2d4:	3004      	adds	r0, #4
 800f2d6:	4288      	cmp	r0, r1
 800f2d8:	d3f4      	bcc.n	800f2c4 <L_shift+0xc>
 800f2da:	bd70      	pop	{r4, r5, r6, pc}

0800f2dc <__match>:
 800f2dc:	b530      	push	{r4, r5, lr}
 800f2de:	6803      	ldr	r3, [r0, #0]
 800f2e0:	780c      	ldrb	r4, [r1, #0]
 800f2e2:	3301      	adds	r3, #1
 800f2e4:	2c00      	cmp	r4, #0
 800f2e6:	d102      	bne.n	800f2ee <__match+0x12>
 800f2e8:	6003      	str	r3, [r0, #0]
 800f2ea:	2001      	movs	r0, #1
 800f2ec:	bd30      	pop	{r4, r5, pc}
 800f2ee:	781a      	ldrb	r2, [r3, #0]
 800f2f0:	0015      	movs	r5, r2
 800f2f2:	3d41      	subs	r5, #65	@ 0x41
 800f2f4:	2d19      	cmp	r5, #25
 800f2f6:	d800      	bhi.n	800f2fa <__match+0x1e>
 800f2f8:	3220      	adds	r2, #32
 800f2fa:	3101      	adds	r1, #1
 800f2fc:	42a2      	cmp	r2, r4
 800f2fe:	d0ef      	beq.n	800f2e0 <__match+0x4>
 800f300:	2000      	movs	r0, #0
 800f302:	e7f3      	b.n	800f2ec <__match+0x10>

0800f304 <__hexnan>:
 800f304:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f306:	680b      	ldr	r3, [r1, #0]
 800f308:	b08b      	sub	sp, #44	@ 0x2c
 800f30a:	9201      	str	r2, [sp, #4]
 800f30c:	9901      	ldr	r1, [sp, #4]
 800f30e:	115a      	asrs	r2, r3, #5
 800f310:	0092      	lsls	r2, r2, #2
 800f312:	188a      	adds	r2, r1, r2
 800f314:	9202      	str	r2, [sp, #8]
 800f316:	0019      	movs	r1, r3
 800f318:	221f      	movs	r2, #31
 800f31a:	4011      	ands	r1, r2
 800f31c:	9008      	str	r0, [sp, #32]
 800f31e:	9106      	str	r1, [sp, #24]
 800f320:	4213      	tst	r3, r2
 800f322:	d002      	beq.n	800f32a <__hexnan+0x26>
 800f324:	9b02      	ldr	r3, [sp, #8]
 800f326:	3304      	adds	r3, #4
 800f328:	9302      	str	r3, [sp, #8]
 800f32a:	9b02      	ldr	r3, [sp, #8]
 800f32c:	2500      	movs	r5, #0
 800f32e:	1f1f      	subs	r7, r3, #4
 800f330:	003e      	movs	r6, r7
 800f332:	003c      	movs	r4, r7
 800f334:	9b08      	ldr	r3, [sp, #32]
 800f336:	603d      	str	r5, [r7, #0]
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	9507      	str	r5, [sp, #28]
 800f33c:	9305      	str	r3, [sp, #20]
 800f33e:	9503      	str	r5, [sp, #12]
 800f340:	9b05      	ldr	r3, [sp, #20]
 800f342:	3301      	adds	r3, #1
 800f344:	9309      	str	r3, [sp, #36]	@ 0x24
 800f346:	9b05      	ldr	r3, [sp, #20]
 800f348:	785b      	ldrb	r3, [r3, #1]
 800f34a:	9304      	str	r3, [sp, #16]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d028      	beq.n	800f3a2 <__hexnan+0x9e>
 800f350:	9804      	ldr	r0, [sp, #16]
 800f352:	f7ff fd78 	bl	800ee46 <__hexdig_fun>
 800f356:	2800      	cmp	r0, #0
 800f358:	d155      	bne.n	800f406 <__hexnan+0x102>
 800f35a:	9b04      	ldr	r3, [sp, #16]
 800f35c:	2b20      	cmp	r3, #32
 800f35e:	d819      	bhi.n	800f394 <__hexnan+0x90>
 800f360:	9b03      	ldr	r3, [sp, #12]
 800f362:	9a07      	ldr	r2, [sp, #28]
 800f364:	4293      	cmp	r3, r2
 800f366:	dd12      	ble.n	800f38e <__hexnan+0x8a>
 800f368:	42b4      	cmp	r4, r6
 800f36a:	d206      	bcs.n	800f37a <__hexnan+0x76>
 800f36c:	2d07      	cmp	r5, #7
 800f36e:	dc04      	bgt.n	800f37a <__hexnan+0x76>
 800f370:	002a      	movs	r2, r5
 800f372:	0031      	movs	r1, r6
 800f374:	0020      	movs	r0, r4
 800f376:	f7ff ff9f 	bl	800f2b8 <L_shift>
 800f37a:	9b01      	ldr	r3, [sp, #4]
 800f37c:	2508      	movs	r5, #8
 800f37e:	429c      	cmp	r4, r3
 800f380:	d905      	bls.n	800f38e <__hexnan+0x8a>
 800f382:	1f26      	subs	r6, r4, #4
 800f384:	2500      	movs	r5, #0
 800f386:	0034      	movs	r4, r6
 800f388:	9b03      	ldr	r3, [sp, #12]
 800f38a:	6035      	str	r5, [r6, #0]
 800f38c:	9307      	str	r3, [sp, #28]
 800f38e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f390:	9305      	str	r3, [sp, #20]
 800f392:	e7d5      	b.n	800f340 <__hexnan+0x3c>
 800f394:	9b04      	ldr	r3, [sp, #16]
 800f396:	2b29      	cmp	r3, #41	@ 0x29
 800f398:	d15a      	bne.n	800f450 <__hexnan+0x14c>
 800f39a:	9b05      	ldr	r3, [sp, #20]
 800f39c:	9a08      	ldr	r2, [sp, #32]
 800f39e:	3302      	adds	r3, #2
 800f3a0:	6013      	str	r3, [r2, #0]
 800f3a2:	9b03      	ldr	r3, [sp, #12]
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d053      	beq.n	800f450 <__hexnan+0x14c>
 800f3a8:	42b4      	cmp	r4, r6
 800f3aa:	d206      	bcs.n	800f3ba <__hexnan+0xb6>
 800f3ac:	2d07      	cmp	r5, #7
 800f3ae:	dc04      	bgt.n	800f3ba <__hexnan+0xb6>
 800f3b0:	002a      	movs	r2, r5
 800f3b2:	0031      	movs	r1, r6
 800f3b4:	0020      	movs	r0, r4
 800f3b6:	f7ff ff7f 	bl	800f2b8 <L_shift>
 800f3ba:	9b01      	ldr	r3, [sp, #4]
 800f3bc:	429c      	cmp	r4, r3
 800f3be:	d936      	bls.n	800f42e <__hexnan+0x12a>
 800f3c0:	001a      	movs	r2, r3
 800f3c2:	0023      	movs	r3, r4
 800f3c4:	cb02      	ldmia	r3!, {r1}
 800f3c6:	c202      	stmia	r2!, {r1}
 800f3c8:	429f      	cmp	r7, r3
 800f3ca:	d2fb      	bcs.n	800f3c4 <__hexnan+0xc0>
 800f3cc:	9b02      	ldr	r3, [sp, #8]
 800f3ce:	1c61      	adds	r1, r4, #1
 800f3d0:	1eda      	subs	r2, r3, #3
 800f3d2:	2304      	movs	r3, #4
 800f3d4:	4291      	cmp	r1, r2
 800f3d6:	d805      	bhi.n	800f3e4 <__hexnan+0xe0>
 800f3d8:	9b02      	ldr	r3, [sp, #8]
 800f3da:	3b04      	subs	r3, #4
 800f3dc:	1b1b      	subs	r3, r3, r4
 800f3de:	089b      	lsrs	r3, r3, #2
 800f3e0:	3301      	adds	r3, #1
 800f3e2:	009b      	lsls	r3, r3, #2
 800f3e4:	9a01      	ldr	r2, [sp, #4]
 800f3e6:	18d3      	adds	r3, r2, r3
 800f3e8:	2200      	movs	r2, #0
 800f3ea:	c304      	stmia	r3!, {r2}
 800f3ec:	429f      	cmp	r7, r3
 800f3ee:	d2fc      	bcs.n	800f3ea <__hexnan+0xe6>
 800f3f0:	683b      	ldr	r3, [r7, #0]
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d104      	bne.n	800f400 <__hexnan+0xfc>
 800f3f6:	9b01      	ldr	r3, [sp, #4]
 800f3f8:	429f      	cmp	r7, r3
 800f3fa:	d127      	bne.n	800f44c <__hexnan+0x148>
 800f3fc:	2301      	movs	r3, #1
 800f3fe:	603b      	str	r3, [r7, #0]
 800f400:	2005      	movs	r0, #5
 800f402:	b00b      	add	sp, #44	@ 0x2c
 800f404:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f406:	9b03      	ldr	r3, [sp, #12]
 800f408:	3501      	adds	r5, #1
 800f40a:	3301      	adds	r3, #1
 800f40c:	9303      	str	r3, [sp, #12]
 800f40e:	2d08      	cmp	r5, #8
 800f410:	dd06      	ble.n	800f420 <__hexnan+0x11c>
 800f412:	9b01      	ldr	r3, [sp, #4]
 800f414:	429c      	cmp	r4, r3
 800f416:	d9ba      	bls.n	800f38e <__hexnan+0x8a>
 800f418:	2300      	movs	r3, #0
 800f41a:	2501      	movs	r5, #1
 800f41c:	3c04      	subs	r4, #4
 800f41e:	6023      	str	r3, [r4, #0]
 800f420:	220f      	movs	r2, #15
 800f422:	6823      	ldr	r3, [r4, #0]
 800f424:	4010      	ands	r0, r2
 800f426:	011b      	lsls	r3, r3, #4
 800f428:	4303      	orrs	r3, r0
 800f42a:	6023      	str	r3, [r4, #0]
 800f42c:	e7af      	b.n	800f38e <__hexnan+0x8a>
 800f42e:	9b06      	ldr	r3, [sp, #24]
 800f430:	2b00      	cmp	r3, #0
 800f432:	d0dd      	beq.n	800f3f0 <__hexnan+0xec>
 800f434:	2320      	movs	r3, #32
 800f436:	9a06      	ldr	r2, [sp, #24]
 800f438:	9902      	ldr	r1, [sp, #8]
 800f43a:	1a9b      	subs	r3, r3, r2
 800f43c:	2201      	movs	r2, #1
 800f43e:	4252      	negs	r2, r2
 800f440:	40da      	lsrs	r2, r3
 800f442:	3904      	subs	r1, #4
 800f444:	680b      	ldr	r3, [r1, #0]
 800f446:	4013      	ands	r3, r2
 800f448:	600b      	str	r3, [r1, #0]
 800f44a:	e7d1      	b.n	800f3f0 <__hexnan+0xec>
 800f44c:	3f04      	subs	r7, #4
 800f44e:	e7cf      	b.n	800f3f0 <__hexnan+0xec>
 800f450:	2004      	movs	r0, #4
 800f452:	e7d6      	b.n	800f402 <__hexnan+0xfe>

0800f454 <sbrk_aligned>:
 800f454:	b570      	push	{r4, r5, r6, lr}
 800f456:	4e0f      	ldr	r6, [pc, #60]	@ (800f494 <sbrk_aligned+0x40>)
 800f458:	000d      	movs	r5, r1
 800f45a:	6831      	ldr	r1, [r6, #0]
 800f45c:	0004      	movs	r4, r0
 800f45e:	2900      	cmp	r1, #0
 800f460:	d102      	bne.n	800f468 <sbrk_aligned+0x14>
 800f462:	f001 fb19 	bl	8010a98 <_sbrk_r>
 800f466:	6030      	str	r0, [r6, #0]
 800f468:	0029      	movs	r1, r5
 800f46a:	0020      	movs	r0, r4
 800f46c:	f001 fb14 	bl	8010a98 <_sbrk_r>
 800f470:	1c43      	adds	r3, r0, #1
 800f472:	d103      	bne.n	800f47c <sbrk_aligned+0x28>
 800f474:	2501      	movs	r5, #1
 800f476:	426d      	negs	r5, r5
 800f478:	0028      	movs	r0, r5
 800f47a:	bd70      	pop	{r4, r5, r6, pc}
 800f47c:	2303      	movs	r3, #3
 800f47e:	1cc5      	adds	r5, r0, #3
 800f480:	439d      	bics	r5, r3
 800f482:	42a8      	cmp	r0, r5
 800f484:	d0f8      	beq.n	800f478 <sbrk_aligned+0x24>
 800f486:	1a29      	subs	r1, r5, r0
 800f488:	0020      	movs	r0, r4
 800f48a:	f001 fb05 	bl	8010a98 <_sbrk_r>
 800f48e:	3001      	adds	r0, #1
 800f490:	d1f2      	bne.n	800f478 <sbrk_aligned+0x24>
 800f492:	e7ef      	b.n	800f474 <sbrk_aligned+0x20>
 800f494:	2000164c 	.word	0x2000164c

0800f498 <_malloc_r>:
 800f498:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f49a:	2203      	movs	r2, #3
 800f49c:	1ccb      	adds	r3, r1, #3
 800f49e:	4393      	bics	r3, r2
 800f4a0:	3308      	adds	r3, #8
 800f4a2:	0005      	movs	r5, r0
 800f4a4:	001f      	movs	r7, r3
 800f4a6:	2b0c      	cmp	r3, #12
 800f4a8:	d234      	bcs.n	800f514 <_malloc_r+0x7c>
 800f4aa:	270c      	movs	r7, #12
 800f4ac:	42b9      	cmp	r1, r7
 800f4ae:	d833      	bhi.n	800f518 <_malloc_r+0x80>
 800f4b0:	0028      	movs	r0, r5
 800f4b2:	f000 f883 	bl	800f5bc <__malloc_lock>
 800f4b6:	4e37      	ldr	r6, [pc, #220]	@ (800f594 <_malloc_r+0xfc>)
 800f4b8:	6833      	ldr	r3, [r6, #0]
 800f4ba:	001c      	movs	r4, r3
 800f4bc:	2c00      	cmp	r4, #0
 800f4be:	d12f      	bne.n	800f520 <_malloc_r+0x88>
 800f4c0:	0039      	movs	r1, r7
 800f4c2:	0028      	movs	r0, r5
 800f4c4:	f7ff ffc6 	bl	800f454 <sbrk_aligned>
 800f4c8:	0004      	movs	r4, r0
 800f4ca:	1c43      	adds	r3, r0, #1
 800f4cc:	d15f      	bne.n	800f58e <_malloc_r+0xf6>
 800f4ce:	6834      	ldr	r4, [r6, #0]
 800f4d0:	9400      	str	r4, [sp, #0]
 800f4d2:	9b00      	ldr	r3, [sp, #0]
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d14a      	bne.n	800f56e <_malloc_r+0xd6>
 800f4d8:	2c00      	cmp	r4, #0
 800f4da:	d052      	beq.n	800f582 <_malloc_r+0xea>
 800f4dc:	6823      	ldr	r3, [r4, #0]
 800f4de:	0028      	movs	r0, r5
 800f4e0:	18e3      	adds	r3, r4, r3
 800f4e2:	9900      	ldr	r1, [sp, #0]
 800f4e4:	9301      	str	r3, [sp, #4]
 800f4e6:	f001 fad7 	bl	8010a98 <_sbrk_r>
 800f4ea:	9b01      	ldr	r3, [sp, #4]
 800f4ec:	4283      	cmp	r3, r0
 800f4ee:	d148      	bne.n	800f582 <_malloc_r+0xea>
 800f4f0:	6823      	ldr	r3, [r4, #0]
 800f4f2:	0028      	movs	r0, r5
 800f4f4:	1aff      	subs	r7, r7, r3
 800f4f6:	0039      	movs	r1, r7
 800f4f8:	f7ff ffac 	bl	800f454 <sbrk_aligned>
 800f4fc:	3001      	adds	r0, #1
 800f4fe:	d040      	beq.n	800f582 <_malloc_r+0xea>
 800f500:	6823      	ldr	r3, [r4, #0]
 800f502:	19db      	adds	r3, r3, r7
 800f504:	6023      	str	r3, [r4, #0]
 800f506:	6833      	ldr	r3, [r6, #0]
 800f508:	685a      	ldr	r2, [r3, #4]
 800f50a:	2a00      	cmp	r2, #0
 800f50c:	d133      	bne.n	800f576 <_malloc_r+0xde>
 800f50e:	9b00      	ldr	r3, [sp, #0]
 800f510:	6033      	str	r3, [r6, #0]
 800f512:	e019      	b.n	800f548 <_malloc_r+0xb0>
 800f514:	2b00      	cmp	r3, #0
 800f516:	dac9      	bge.n	800f4ac <_malloc_r+0x14>
 800f518:	230c      	movs	r3, #12
 800f51a:	602b      	str	r3, [r5, #0]
 800f51c:	2000      	movs	r0, #0
 800f51e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f520:	6821      	ldr	r1, [r4, #0]
 800f522:	1bc9      	subs	r1, r1, r7
 800f524:	d420      	bmi.n	800f568 <_malloc_r+0xd0>
 800f526:	290b      	cmp	r1, #11
 800f528:	d90a      	bls.n	800f540 <_malloc_r+0xa8>
 800f52a:	19e2      	adds	r2, r4, r7
 800f52c:	6027      	str	r7, [r4, #0]
 800f52e:	42a3      	cmp	r3, r4
 800f530:	d104      	bne.n	800f53c <_malloc_r+0xa4>
 800f532:	6032      	str	r2, [r6, #0]
 800f534:	6863      	ldr	r3, [r4, #4]
 800f536:	6011      	str	r1, [r2, #0]
 800f538:	6053      	str	r3, [r2, #4]
 800f53a:	e005      	b.n	800f548 <_malloc_r+0xb0>
 800f53c:	605a      	str	r2, [r3, #4]
 800f53e:	e7f9      	b.n	800f534 <_malloc_r+0x9c>
 800f540:	6862      	ldr	r2, [r4, #4]
 800f542:	42a3      	cmp	r3, r4
 800f544:	d10e      	bne.n	800f564 <_malloc_r+0xcc>
 800f546:	6032      	str	r2, [r6, #0]
 800f548:	0028      	movs	r0, r5
 800f54a:	f000 f83f 	bl	800f5cc <__malloc_unlock>
 800f54e:	0020      	movs	r0, r4
 800f550:	2207      	movs	r2, #7
 800f552:	300b      	adds	r0, #11
 800f554:	1d23      	adds	r3, r4, #4
 800f556:	4390      	bics	r0, r2
 800f558:	1ac2      	subs	r2, r0, r3
 800f55a:	4298      	cmp	r0, r3
 800f55c:	d0df      	beq.n	800f51e <_malloc_r+0x86>
 800f55e:	1a1b      	subs	r3, r3, r0
 800f560:	50a3      	str	r3, [r4, r2]
 800f562:	e7dc      	b.n	800f51e <_malloc_r+0x86>
 800f564:	605a      	str	r2, [r3, #4]
 800f566:	e7ef      	b.n	800f548 <_malloc_r+0xb0>
 800f568:	0023      	movs	r3, r4
 800f56a:	6864      	ldr	r4, [r4, #4]
 800f56c:	e7a6      	b.n	800f4bc <_malloc_r+0x24>
 800f56e:	9c00      	ldr	r4, [sp, #0]
 800f570:	6863      	ldr	r3, [r4, #4]
 800f572:	9300      	str	r3, [sp, #0]
 800f574:	e7ad      	b.n	800f4d2 <_malloc_r+0x3a>
 800f576:	001a      	movs	r2, r3
 800f578:	685b      	ldr	r3, [r3, #4]
 800f57a:	42a3      	cmp	r3, r4
 800f57c:	d1fb      	bne.n	800f576 <_malloc_r+0xde>
 800f57e:	2300      	movs	r3, #0
 800f580:	e7da      	b.n	800f538 <_malloc_r+0xa0>
 800f582:	230c      	movs	r3, #12
 800f584:	0028      	movs	r0, r5
 800f586:	602b      	str	r3, [r5, #0]
 800f588:	f000 f820 	bl	800f5cc <__malloc_unlock>
 800f58c:	e7c6      	b.n	800f51c <_malloc_r+0x84>
 800f58e:	6007      	str	r7, [r0, #0]
 800f590:	e7da      	b.n	800f548 <_malloc_r+0xb0>
 800f592:	46c0      	nop			@ (mov r8, r8)
 800f594:	20001650 	.word	0x20001650

0800f598 <__ascii_mbtowc>:
 800f598:	b082      	sub	sp, #8
 800f59a:	2900      	cmp	r1, #0
 800f59c:	d100      	bne.n	800f5a0 <__ascii_mbtowc+0x8>
 800f59e:	a901      	add	r1, sp, #4
 800f5a0:	1e10      	subs	r0, r2, #0
 800f5a2:	d006      	beq.n	800f5b2 <__ascii_mbtowc+0x1a>
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d006      	beq.n	800f5b6 <__ascii_mbtowc+0x1e>
 800f5a8:	7813      	ldrb	r3, [r2, #0]
 800f5aa:	600b      	str	r3, [r1, #0]
 800f5ac:	7810      	ldrb	r0, [r2, #0]
 800f5ae:	1e43      	subs	r3, r0, #1
 800f5b0:	4198      	sbcs	r0, r3
 800f5b2:	b002      	add	sp, #8
 800f5b4:	4770      	bx	lr
 800f5b6:	2002      	movs	r0, #2
 800f5b8:	4240      	negs	r0, r0
 800f5ba:	e7fa      	b.n	800f5b2 <__ascii_mbtowc+0x1a>

0800f5bc <__malloc_lock>:
 800f5bc:	b510      	push	{r4, lr}
 800f5be:	4802      	ldr	r0, [pc, #8]	@ (800f5c8 <__malloc_lock+0xc>)
 800f5c0:	f7ff fb93 	bl	800ecea <__retarget_lock_acquire_recursive>
 800f5c4:	bd10      	pop	{r4, pc}
 800f5c6:	46c0      	nop			@ (mov r8, r8)
 800f5c8:	20001648 	.word	0x20001648

0800f5cc <__malloc_unlock>:
 800f5cc:	b510      	push	{r4, lr}
 800f5ce:	4802      	ldr	r0, [pc, #8]	@ (800f5d8 <__malloc_unlock+0xc>)
 800f5d0:	f7ff fb8c 	bl	800ecec <__retarget_lock_release_recursive>
 800f5d4:	bd10      	pop	{r4, pc}
 800f5d6:	46c0      	nop			@ (mov r8, r8)
 800f5d8:	20001648 	.word	0x20001648

0800f5dc <_Balloc>:
 800f5dc:	b570      	push	{r4, r5, r6, lr}
 800f5de:	69c5      	ldr	r5, [r0, #28]
 800f5e0:	0006      	movs	r6, r0
 800f5e2:	000c      	movs	r4, r1
 800f5e4:	2d00      	cmp	r5, #0
 800f5e6:	d10e      	bne.n	800f606 <_Balloc+0x2a>
 800f5e8:	2010      	movs	r0, #16
 800f5ea:	f001 fabf 	bl	8010b6c <malloc>
 800f5ee:	1e02      	subs	r2, r0, #0
 800f5f0:	61f0      	str	r0, [r6, #28]
 800f5f2:	d104      	bne.n	800f5fe <_Balloc+0x22>
 800f5f4:	216b      	movs	r1, #107	@ 0x6b
 800f5f6:	4b19      	ldr	r3, [pc, #100]	@ (800f65c <_Balloc+0x80>)
 800f5f8:	4819      	ldr	r0, [pc, #100]	@ (800f660 <_Balloc+0x84>)
 800f5fa:	f001 fa6b 	bl	8010ad4 <__assert_func>
 800f5fe:	6045      	str	r5, [r0, #4]
 800f600:	6085      	str	r5, [r0, #8]
 800f602:	6005      	str	r5, [r0, #0]
 800f604:	60c5      	str	r5, [r0, #12]
 800f606:	69f5      	ldr	r5, [r6, #28]
 800f608:	68eb      	ldr	r3, [r5, #12]
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d013      	beq.n	800f636 <_Balloc+0x5a>
 800f60e:	69f3      	ldr	r3, [r6, #28]
 800f610:	00a2      	lsls	r2, r4, #2
 800f612:	68db      	ldr	r3, [r3, #12]
 800f614:	189b      	adds	r3, r3, r2
 800f616:	6818      	ldr	r0, [r3, #0]
 800f618:	2800      	cmp	r0, #0
 800f61a:	d118      	bne.n	800f64e <_Balloc+0x72>
 800f61c:	2101      	movs	r1, #1
 800f61e:	000d      	movs	r5, r1
 800f620:	40a5      	lsls	r5, r4
 800f622:	1d6a      	adds	r2, r5, #5
 800f624:	0030      	movs	r0, r6
 800f626:	0092      	lsls	r2, r2, #2
 800f628:	f001 fa72 	bl	8010b10 <_calloc_r>
 800f62c:	2800      	cmp	r0, #0
 800f62e:	d00c      	beq.n	800f64a <_Balloc+0x6e>
 800f630:	6044      	str	r4, [r0, #4]
 800f632:	6085      	str	r5, [r0, #8]
 800f634:	e00d      	b.n	800f652 <_Balloc+0x76>
 800f636:	2221      	movs	r2, #33	@ 0x21
 800f638:	2104      	movs	r1, #4
 800f63a:	0030      	movs	r0, r6
 800f63c:	f001 fa68 	bl	8010b10 <_calloc_r>
 800f640:	69f3      	ldr	r3, [r6, #28]
 800f642:	60e8      	str	r0, [r5, #12]
 800f644:	68db      	ldr	r3, [r3, #12]
 800f646:	2b00      	cmp	r3, #0
 800f648:	d1e1      	bne.n	800f60e <_Balloc+0x32>
 800f64a:	2000      	movs	r0, #0
 800f64c:	bd70      	pop	{r4, r5, r6, pc}
 800f64e:	6802      	ldr	r2, [r0, #0]
 800f650:	601a      	str	r2, [r3, #0]
 800f652:	2300      	movs	r3, #0
 800f654:	6103      	str	r3, [r0, #16]
 800f656:	60c3      	str	r3, [r0, #12]
 800f658:	e7f8      	b.n	800f64c <_Balloc+0x70>
 800f65a:	46c0      	nop			@ (mov r8, r8)
 800f65c:	0801c0d2 	.word	0x0801c0d2
 800f660:	0801c0e9 	.word	0x0801c0e9

0800f664 <_Bfree>:
 800f664:	b570      	push	{r4, r5, r6, lr}
 800f666:	69c6      	ldr	r6, [r0, #28]
 800f668:	0005      	movs	r5, r0
 800f66a:	000c      	movs	r4, r1
 800f66c:	2e00      	cmp	r6, #0
 800f66e:	d10e      	bne.n	800f68e <_Bfree+0x2a>
 800f670:	2010      	movs	r0, #16
 800f672:	f001 fa7b 	bl	8010b6c <malloc>
 800f676:	1e02      	subs	r2, r0, #0
 800f678:	61e8      	str	r0, [r5, #28]
 800f67a:	d104      	bne.n	800f686 <_Bfree+0x22>
 800f67c:	218f      	movs	r1, #143	@ 0x8f
 800f67e:	4b09      	ldr	r3, [pc, #36]	@ (800f6a4 <_Bfree+0x40>)
 800f680:	4809      	ldr	r0, [pc, #36]	@ (800f6a8 <_Bfree+0x44>)
 800f682:	f001 fa27 	bl	8010ad4 <__assert_func>
 800f686:	6046      	str	r6, [r0, #4]
 800f688:	6086      	str	r6, [r0, #8]
 800f68a:	6006      	str	r6, [r0, #0]
 800f68c:	60c6      	str	r6, [r0, #12]
 800f68e:	2c00      	cmp	r4, #0
 800f690:	d007      	beq.n	800f6a2 <_Bfree+0x3e>
 800f692:	69eb      	ldr	r3, [r5, #28]
 800f694:	6862      	ldr	r2, [r4, #4]
 800f696:	68db      	ldr	r3, [r3, #12]
 800f698:	0092      	lsls	r2, r2, #2
 800f69a:	189b      	adds	r3, r3, r2
 800f69c:	681a      	ldr	r2, [r3, #0]
 800f69e:	6022      	str	r2, [r4, #0]
 800f6a0:	601c      	str	r4, [r3, #0]
 800f6a2:	bd70      	pop	{r4, r5, r6, pc}
 800f6a4:	0801c0d2 	.word	0x0801c0d2
 800f6a8:	0801c0e9 	.word	0x0801c0e9

0800f6ac <__multadd>:
 800f6ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f6ae:	000f      	movs	r7, r1
 800f6b0:	9001      	str	r0, [sp, #4]
 800f6b2:	000c      	movs	r4, r1
 800f6b4:	001e      	movs	r6, r3
 800f6b6:	2000      	movs	r0, #0
 800f6b8:	690d      	ldr	r5, [r1, #16]
 800f6ba:	3714      	adds	r7, #20
 800f6bc:	683b      	ldr	r3, [r7, #0]
 800f6be:	3001      	adds	r0, #1
 800f6c0:	b299      	uxth	r1, r3
 800f6c2:	4351      	muls	r1, r2
 800f6c4:	0c1b      	lsrs	r3, r3, #16
 800f6c6:	4353      	muls	r3, r2
 800f6c8:	1989      	adds	r1, r1, r6
 800f6ca:	0c0e      	lsrs	r6, r1, #16
 800f6cc:	199b      	adds	r3, r3, r6
 800f6ce:	0c1e      	lsrs	r6, r3, #16
 800f6d0:	b289      	uxth	r1, r1
 800f6d2:	041b      	lsls	r3, r3, #16
 800f6d4:	185b      	adds	r3, r3, r1
 800f6d6:	c708      	stmia	r7!, {r3}
 800f6d8:	4285      	cmp	r5, r0
 800f6da:	dcef      	bgt.n	800f6bc <__multadd+0x10>
 800f6dc:	2e00      	cmp	r6, #0
 800f6de:	d022      	beq.n	800f726 <__multadd+0x7a>
 800f6e0:	68a3      	ldr	r3, [r4, #8]
 800f6e2:	42ab      	cmp	r3, r5
 800f6e4:	dc19      	bgt.n	800f71a <__multadd+0x6e>
 800f6e6:	6861      	ldr	r1, [r4, #4]
 800f6e8:	9801      	ldr	r0, [sp, #4]
 800f6ea:	3101      	adds	r1, #1
 800f6ec:	f7ff ff76 	bl	800f5dc <_Balloc>
 800f6f0:	1e07      	subs	r7, r0, #0
 800f6f2:	d105      	bne.n	800f700 <__multadd+0x54>
 800f6f4:	003a      	movs	r2, r7
 800f6f6:	21ba      	movs	r1, #186	@ 0xba
 800f6f8:	4b0c      	ldr	r3, [pc, #48]	@ (800f72c <__multadd+0x80>)
 800f6fa:	480d      	ldr	r0, [pc, #52]	@ (800f730 <__multadd+0x84>)
 800f6fc:	f001 f9ea 	bl	8010ad4 <__assert_func>
 800f700:	0021      	movs	r1, r4
 800f702:	6922      	ldr	r2, [r4, #16]
 800f704:	310c      	adds	r1, #12
 800f706:	3202      	adds	r2, #2
 800f708:	0092      	lsls	r2, r2, #2
 800f70a:	300c      	adds	r0, #12
 800f70c:	f7ff faef 	bl	800ecee <memcpy>
 800f710:	0021      	movs	r1, r4
 800f712:	9801      	ldr	r0, [sp, #4]
 800f714:	f7ff ffa6 	bl	800f664 <_Bfree>
 800f718:	003c      	movs	r4, r7
 800f71a:	1d2b      	adds	r3, r5, #4
 800f71c:	009b      	lsls	r3, r3, #2
 800f71e:	18e3      	adds	r3, r4, r3
 800f720:	3501      	adds	r5, #1
 800f722:	605e      	str	r6, [r3, #4]
 800f724:	6125      	str	r5, [r4, #16]
 800f726:	0020      	movs	r0, r4
 800f728:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f72a:	46c0      	nop			@ (mov r8, r8)
 800f72c:	0801c061 	.word	0x0801c061
 800f730:	0801c0e9 	.word	0x0801c0e9

0800f734 <__s2b>:
 800f734:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f736:	0007      	movs	r7, r0
 800f738:	0018      	movs	r0, r3
 800f73a:	000c      	movs	r4, r1
 800f73c:	3008      	adds	r0, #8
 800f73e:	2109      	movs	r1, #9
 800f740:	9301      	str	r3, [sp, #4]
 800f742:	0015      	movs	r5, r2
 800f744:	f7f0 fd90 	bl	8000268 <__divsi3>
 800f748:	2301      	movs	r3, #1
 800f74a:	2100      	movs	r1, #0
 800f74c:	4283      	cmp	r3, r0
 800f74e:	db0a      	blt.n	800f766 <__s2b+0x32>
 800f750:	0038      	movs	r0, r7
 800f752:	f7ff ff43 	bl	800f5dc <_Balloc>
 800f756:	1e01      	subs	r1, r0, #0
 800f758:	d108      	bne.n	800f76c <__s2b+0x38>
 800f75a:	000a      	movs	r2, r1
 800f75c:	4b19      	ldr	r3, [pc, #100]	@ (800f7c4 <__s2b+0x90>)
 800f75e:	481a      	ldr	r0, [pc, #104]	@ (800f7c8 <__s2b+0x94>)
 800f760:	31d3      	adds	r1, #211	@ 0xd3
 800f762:	f001 f9b7 	bl	8010ad4 <__assert_func>
 800f766:	005b      	lsls	r3, r3, #1
 800f768:	3101      	adds	r1, #1
 800f76a:	e7ef      	b.n	800f74c <__s2b+0x18>
 800f76c:	9b08      	ldr	r3, [sp, #32]
 800f76e:	6143      	str	r3, [r0, #20]
 800f770:	2301      	movs	r3, #1
 800f772:	6103      	str	r3, [r0, #16]
 800f774:	2d09      	cmp	r5, #9
 800f776:	dd18      	ble.n	800f7aa <__s2b+0x76>
 800f778:	0023      	movs	r3, r4
 800f77a:	3309      	adds	r3, #9
 800f77c:	001e      	movs	r6, r3
 800f77e:	9300      	str	r3, [sp, #0]
 800f780:	1964      	adds	r4, r4, r5
 800f782:	7833      	ldrb	r3, [r6, #0]
 800f784:	220a      	movs	r2, #10
 800f786:	0038      	movs	r0, r7
 800f788:	3b30      	subs	r3, #48	@ 0x30
 800f78a:	f7ff ff8f 	bl	800f6ac <__multadd>
 800f78e:	3601      	adds	r6, #1
 800f790:	0001      	movs	r1, r0
 800f792:	42a6      	cmp	r6, r4
 800f794:	d1f5      	bne.n	800f782 <__s2b+0x4e>
 800f796:	002c      	movs	r4, r5
 800f798:	9b00      	ldr	r3, [sp, #0]
 800f79a:	3c08      	subs	r4, #8
 800f79c:	191c      	adds	r4, r3, r4
 800f79e:	002e      	movs	r6, r5
 800f7a0:	9b01      	ldr	r3, [sp, #4]
 800f7a2:	429e      	cmp	r6, r3
 800f7a4:	db04      	blt.n	800f7b0 <__s2b+0x7c>
 800f7a6:	0008      	movs	r0, r1
 800f7a8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f7aa:	2509      	movs	r5, #9
 800f7ac:	340a      	adds	r4, #10
 800f7ae:	e7f6      	b.n	800f79e <__s2b+0x6a>
 800f7b0:	1b63      	subs	r3, r4, r5
 800f7b2:	5d9b      	ldrb	r3, [r3, r6]
 800f7b4:	220a      	movs	r2, #10
 800f7b6:	0038      	movs	r0, r7
 800f7b8:	3b30      	subs	r3, #48	@ 0x30
 800f7ba:	f7ff ff77 	bl	800f6ac <__multadd>
 800f7be:	3601      	adds	r6, #1
 800f7c0:	0001      	movs	r1, r0
 800f7c2:	e7ed      	b.n	800f7a0 <__s2b+0x6c>
 800f7c4:	0801c061 	.word	0x0801c061
 800f7c8:	0801c0e9 	.word	0x0801c0e9

0800f7cc <__hi0bits>:
 800f7cc:	2280      	movs	r2, #128	@ 0x80
 800f7ce:	0003      	movs	r3, r0
 800f7d0:	0252      	lsls	r2, r2, #9
 800f7d2:	2000      	movs	r0, #0
 800f7d4:	4293      	cmp	r3, r2
 800f7d6:	d201      	bcs.n	800f7dc <__hi0bits+0x10>
 800f7d8:	041b      	lsls	r3, r3, #16
 800f7da:	3010      	adds	r0, #16
 800f7dc:	2280      	movs	r2, #128	@ 0x80
 800f7de:	0452      	lsls	r2, r2, #17
 800f7e0:	4293      	cmp	r3, r2
 800f7e2:	d201      	bcs.n	800f7e8 <__hi0bits+0x1c>
 800f7e4:	3008      	adds	r0, #8
 800f7e6:	021b      	lsls	r3, r3, #8
 800f7e8:	2280      	movs	r2, #128	@ 0x80
 800f7ea:	0552      	lsls	r2, r2, #21
 800f7ec:	4293      	cmp	r3, r2
 800f7ee:	d201      	bcs.n	800f7f4 <__hi0bits+0x28>
 800f7f0:	3004      	adds	r0, #4
 800f7f2:	011b      	lsls	r3, r3, #4
 800f7f4:	2280      	movs	r2, #128	@ 0x80
 800f7f6:	05d2      	lsls	r2, r2, #23
 800f7f8:	4293      	cmp	r3, r2
 800f7fa:	d201      	bcs.n	800f800 <__hi0bits+0x34>
 800f7fc:	3002      	adds	r0, #2
 800f7fe:	009b      	lsls	r3, r3, #2
 800f800:	2b00      	cmp	r3, #0
 800f802:	db03      	blt.n	800f80c <__hi0bits+0x40>
 800f804:	3001      	adds	r0, #1
 800f806:	4213      	tst	r3, r2
 800f808:	d100      	bne.n	800f80c <__hi0bits+0x40>
 800f80a:	2020      	movs	r0, #32
 800f80c:	4770      	bx	lr

0800f80e <__lo0bits>:
 800f80e:	6803      	ldr	r3, [r0, #0]
 800f810:	0001      	movs	r1, r0
 800f812:	2207      	movs	r2, #7
 800f814:	0018      	movs	r0, r3
 800f816:	4010      	ands	r0, r2
 800f818:	4213      	tst	r3, r2
 800f81a:	d00d      	beq.n	800f838 <__lo0bits+0x2a>
 800f81c:	3a06      	subs	r2, #6
 800f81e:	2000      	movs	r0, #0
 800f820:	4213      	tst	r3, r2
 800f822:	d105      	bne.n	800f830 <__lo0bits+0x22>
 800f824:	3002      	adds	r0, #2
 800f826:	4203      	tst	r3, r0
 800f828:	d003      	beq.n	800f832 <__lo0bits+0x24>
 800f82a:	40d3      	lsrs	r3, r2
 800f82c:	0010      	movs	r0, r2
 800f82e:	600b      	str	r3, [r1, #0]
 800f830:	4770      	bx	lr
 800f832:	089b      	lsrs	r3, r3, #2
 800f834:	600b      	str	r3, [r1, #0]
 800f836:	e7fb      	b.n	800f830 <__lo0bits+0x22>
 800f838:	b29a      	uxth	r2, r3
 800f83a:	2a00      	cmp	r2, #0
 800f83c:	d101      	bne.n	800f842 <__lo0bits+0x34>
 800f83e:	2010      	movs	r0, #16
 800f840:	0c1b      	lsrs	r3, r3, #16
 800f842:	b2da      	uxtb	r2, r3
 800f844:	2a00      	cmp	r2, #0
 800f846:	d101      	bne.n	800f84c <__lo0bits+0x3e>
 800f848:	3008      	adds	r0, #8
 800f84a:	0a1b      	lsrs	r3, r3, #8
 800f84c:	071a      	lsls	r2, r3, #28
 800f84e:	d101      	bne.n	800f854 <__lo0bits+0x46>
 800f850:	3004      	adds	r0, #4
 800f852:	091b      	lsrs	r3, r3, #4
 800f854:	079a      	lsls	r2, r3, #30
 800f856:	d101      	bne.n	800f85c <__lo0bits+0x4e>
 800f858:	3002      	adds	r0, #2
 800f85a:	089b      	lsrs	r3, r3, #2
 800f85c:	07da      	lsls	r2, r3, #31
 800f85e:	d4e9      	bmi.n	800f834 <__lo0bits+0x26>
 800f860:	3001      	adds	r0, #1
 800f862:	085b      	lsrs	r3, r3, #1
 800f864:	d1e6      	bne.n	800f834 <__lo0bits+0x26>
 800f866:	2020      	movs	r0, #32
 800f868:	e7e2      	b.n	800f830 <__lo0bits+0x22>
	...

0800f86c <__i2b>:
 800f86c:	b510      	push	{r4, lr}
 800f86e:	000c      	movs	r4, r1
 800f870:	2101      	movs	r1, #1
 800f872:	f7ff feb3 	bl	800f5dc <_Balloc>
 800f876:	2800      	cmp	r0, #0
 800f878:	d107      	bne.n	800f88a <__i2b+0x1e>
 800f87a:	2146      	movs	r1, #70	@ 0x46
 800f87c:	4c05      	ldr	r4, [pc, #20]	@ (800f894 <__i2b+0x28>)
 800f87e:	0002      	movs	r2, r0
 800f880:	4b05      	ldr	r3, [pc, #20]	@ (800f898 <__i2b+0x2c>)
 800f882:	0020      	movs	r0, r4
 800f884:	31ff      	adds	r1, #255	@ 0xff
 800f886:	f001 f925 	bl	8010ad4 <__assert_func>
 800f88a:	2301      	movs	r3, #1
 800f88c:	6144      	str	r4, [r0, #20]
 800f88e:	6103      	str	r3, [r0, #16]
 800f890:	bd10      	pop	{r4, pc}
 800f892:	46c0      	nop			@ (mov r8, r8)
 800f894:	0801c0e9 	.word	0x0801c0e9
 800f898:	0801c061 	.word	0x0801c061

0800f89c <__multiply>:
 800f89c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f89e:	0014      	movs	r4, r2
 800f8a0:	690a      	ldr	r2, [r1, #16]
 800f8a2:	6923      	ldr	r3, [r4, #16]
 800f8a4:	000d      	movs	r5, r1
 800f8a6:	b08b      	sub	sp, #44	@ 0x2c
 800f8a8:	429a      	cmp	r2, r3
 800f8aa:	db02      	blt.n	800f8b2 <__multiply+0x16>
 800f8ac:	0023      	movs	r3, r4
 800f8ae:	000c      	movs	r4, r1
 800f8b0:	001d      	movs	r5, r3
 800f8b2:	6927      	ldr	r7, [r4, #16]
 800f8b4:	692e      	ldr	r6, [r5, #16]
 800f8b6:	6861      	ldr	r1, [r4, #4]
 800f8b8:	19bb      	adds	r3, r7, r6
 800f8ba:	9303      	str	r3, [sp, #12]
 800f8bc:	68a3      	ldr	r3, [r4, #8]
 800f8be:	19ba      	adds	r2, r7, r6
 800f8c0:	4293      	cmp	r3, r2
 800f8c2:	da00      	bge.n	800f8c6 <__multiply+0x2a>
 800f8c4:	3101      	adds	r1, #1
 800f8c6:	f7ff fe89 	bl	800f5dc <_Balloc>
 800f8ca:	9002      	str	r0, [sp, #8]
 800f8cc:	2800      	cmp	r0, #0
 800f8ce:	d106      	bne.n	800f8de <__multiply+0x42>
 800f8d0:	21b1      	movs	r1, #177	@ 0xb1
 800f8d2:	4b49      	ldr	r3, [pc, #292]	@ (800f9f8 <__multiply+0x15c>)
 800f8d4:	4849      	ldr	r0, [pc, #292]	@ (800f9fc <__multiply+0x160>)
 800f8d6:	9a02      	ldr	r2, [sp, #8]
 800f8d8:	0049      	lsls	r1, r1, #1
 800f8da:	f001 f8fb 	bl	8010ad4 <__assert_func>
 800f8de:	9b02      	ldr	r3, [sp, #8]
 800f8e0:	2200      	movs	r2, #0
 800f8e2:	3314      	adds	r3, #20
 800f8e4:	469c      	mov	ip, r3
 800f8e6:	19bb      	adds	r3, r7, r6
 800f8e8:	009b      	lsls	r3, r3, #2
 800f8ea:	4463      	add	r3, ip
 800f8ec:	9304      	str	r3, [sp, #16]
 800f8ee:	4663      	mov	r3, ip
 800f8f0:	9904      	ldr	r1, [sp, #16]
 800f8f2:	428b      	cmp	r3, r1
 800f8f4:	d32a      	bcc.n	800f94c <__multiply+0xb0>
 800f8f6:	0023      	movs	r3, r4
 800f8f8:	00bf      	lsls	r7, r7, #2
 800f8fa:	3314      	adds	r3, #20
 800f8fc:	3514      	adds	r5, #20
 800f8fe:	9308      	str	r3, [sp, #32]
 800f900:	00b6      	lsls	r6, r6, #2
 800f902:	19db      	adds	r3, r3, r7
 800f904:	9305      	str	r3, [sp, #20]
 800f906:	19ab      	adds	r3, r5, r6
 800f908:	9309      	str	r3, [sp, #36]	@ 0x24
 800f90a:	2304      	movs	r3, #4
 800f90c:	9306      	str	r3, [sp, #24]
 800f90e:	0023      	movs	r3, r4
 800f910:	9a05      	ldr	r2, [sp, #20]
 800f912:	3315      	adds	r3, #21
 800f914:	9501      	str	r5, [sp, #4]
 800f916:	429a      	cmp	r2, r3
 800f918:	d305      	bcc.n	800f926 <__multiply+0x8a>
 800f91a:	1b13      	subs	r3, r2, r4
 800f91c:	3b15      	subs	r3, #21
 800f91e:	089b      	lsrs	r3, r3, #2
 800f920:	3301      	adds	r3, #1
 800f922:	009b      	lsls	r3, r3, #2
 800f924:	9306      	str	r3, [sp, #24]
 800f926:	9b01      	ldr	r3, [sp, #4]
 800f928:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f92a:	4293      	cmp	r3, r2
 800f92c:	d310      	bcc.n	800f950 <__multiply+0xb4>
 800f92e:	9b03      	ldr	r3, [sp, #12]
 800f930:	2b00      	cmp	r3, #0
 800f932:	dd05      	ble.n	800f940 <__multiply+0xa4>
 800f934:	9b04      	ldr	r3, [sp, #16]
 800f936:	3b04      	subs	r3, #4
 800f938:	9304      	str	r3, [sp, #16]
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d056      	beq.n	800f9ee <__multiply+0x152>
 800f940:	9b02      	ldr	r3, [sp, #8]
 800f942:	9a03      	ldr	r2, [sp, #12]
 800f944:	0018      	movs	r0, r3
 800f946:	611a      	str	r2, [r3, #16]
 800f948:	b00b      	add	sp, #44	@ 0x2c
 800f94a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f94c:	c304      	stmia	r3!, {r2}
 800f94e:	e7cf      	b.n	800f8f0 <__multiply+0x54>
 800f950:	9b01      	ldr	r3, [sp, #4]
 800f952:	6818      	ldr	r0, [r3, #0]
 800f954:	b280      	uxth	r0, r0
 800f956:	2800      	cmp	r0, #0
 800f958:	d01e      	beq.n	800f998 <__multiply+0xfc>
 800f95a:	4667      	mov	r7, ip
 800f95c:	2500      	movs	r5, #0
 800f95e:	9e08      	ldr	r6, [sp, #32]
 800f960:	ce02      	ldmia	r6!, {r1}
 800f962:	683b      	ldr	r3, [r7, #0]
 800f964:	9307      	str	r3, [sp, #28]
 800f966:	b28b      	uxth	r3, r1
 800f968:	4343      	muls	r3, r0
 800f96a:	001a      	movs	r2, r3
 800f96c:	466b      	mov	r3, sp
 800f96e:	0c09      	lsrs	r1, r1, #16
 800f970:	8b9b      	ldrh	r3, [r3, #28]
 800f972:	4341      	muls	r1, r0
 800f974:	18d3      	adds	r3, r2, r3
 800f976:	9a07      	ldr	r2, [sp, #28]
 800f978:	195b      	adds	r3, r3, r5
 800f97a:	0c12      	lsrs	r2, r2, #16
 800f97c:	1889      	adds	r1, r1, r2
 800f97e:	0c1a      	lsrs	r2, r3, #16
 800f980:	188a      	adds	r2, r1, r2
 800f982:	b29b      	uxth	r3, r3
 800f984:	0c15      	lsrs	r5, r2, #16
 800f986:	0412      	lsls	r2, r2, #16
 800f988:	431a      	orrs	r2, r3
 800f98a:	9b05      	ldr	r3, [sp, #20]
 800f98c:	c704      	stmia	r7!, {r2}
 800f98e:	42b3      	cmp	r3, r6
 800f990:	d8e6      	bhi.n	800f960 <__multiply+0xc4>
 800f992:	4663      	mov	r3, ip
 800f994:	9a06      	ldr	r2, [sp, #24]
 800f996:	509d      	str	r5, [r3, r2]
 800f998:	9b01      	ldr	r3, [sp, #4]
 800f99a:	6818      	ldr	r0, [r3, #0]
 800f99c:	0c00      	lsrs	r0, r0, #16
 800f99e:	d020      	beq.n	800f9e2 <__multiply+0x146>
 800f9a0:	4663      	mov	r3, ip
 800f9a2:	0025      	movs	r5, r4
 800f9a4:	4661      	mov	r1, ip
 800f9a6:	2700      	movs	r7, #0
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	3514      	adds	r5, #20
 800f9ac:	682a      	ldr	r2, [r5, #0]
 800f9ae:	680e      	ldr	r6, [r1, #0]
 800f9b0:	b292      	uxth	r2, r2
 800f9b2:	4342      	muls	r2, r0
 800f9b4:	0c36      	lsrs	r6, r6, #16
 800f9b6:	1992      	adds	r2, r2, r6
 800f9b8:	19d2      	adds	r2, r2, r7
 800f9ba:	0416      	lsls	r6, r2, #16
 800f9bc:	b29b      	uxth	r3, r3
 800f9be:	431e      	orrs	r6, r3
 800f9c0:	600e      	str	r6, [r1, #0]
 800f9c2:	cd40      	ldmia	r5!, {r6}
 800f9c4:	684b      	ldr	r3, [r1, #4]
 800f9c6:	0c36      	lsrs	r6, r6, #16
 800f9c8:	4346      	muls	r6, r0
 800f9ca:	b29b      	uxth	r3, r3
 800f9cc:	0c12      	lsrs	r2, r2, #16
 800f9ce:	18f3      	adds	r3, r6, r3
 800f9d0:	189b      	adds	r3, r3, r2
 800f9d2:	9a05      	ldr	r2, [sp, #20]
 800f9d4:	0c1f      	lsrs	r7, r3, #16
 800f9d6:	3104      	adds	r1, #4
 800f9d8:	42aa      	cmp	r2, r5
 800f9da:	d8e7      	bhi.n	800f9ac <__multiply+0x110>
 800f9dc:	4662      	mov	r2, ip
 800f9de:	9906      	ldr	r1, [sp, #24]
 800f9e0:	5053      	str	r3, [r2, r1]
 800f9e2:	9b01      	ldr	r3, [sp, #4]
 800f9e4:	3304      	adds	r3, #4
 800f9e6:	9301      	str	r3, [sp, #4]
 800f9e8:	2304      	movs	r3, #4
 800f9ea:	449c      	add	ip, r3
 800f9ec:	e79b      	b.n	800f926 <__multiply+0x8a>
 800f9ee:	9b03      	ldr	r3, [sp, #12]
 800f9f0:	3b01      	subs	r3, #1
 800f9f2:	9303      	str	r3, [sp, #12]
 800f9f4:	e79b      	b.n	800f92e <__multiply+0x92>
 800f9f6:	46c0      	nop			@ (mov r8, r8)
 800f9f8:	0801c061 	.word	0x0801c061
 800f9fc:	0801c0e9 	.word	0x0801c0e9

0800fa00 <__pow5mult>:
 800fa00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fa02:	2303      	movs	r3, #3
 800fa04:	0015      	movs	r5, r2
 800fa06:	0007      	movs	r7, r0
 800fa08:	000e      	movs	r6, r1
 800fa0a:	401a      	ands	r2, r3
 800fa0c:	421d      	tst	r5, r3
 800fa0e:	d008      	beq.n	800fa22 <__pow5mult+0x22>
 800fa10:	4925      	ldr	r1, [pc, #148]	@ (800faa8 <__pow5mult+0xa8>)
 800fa12:	3a01      	subs	r2, #1
 800fa14:	0092      	lsls	r2, r2, #2
 800fa16:	5852      	ldr	r2, [r2, r1]
 800fa18:	2300      	movs	r3, #0
 800fa1a:	0031      	movs	r1, r6
 800fa1c:	f7ff fe46 	bl	800f6ac <__multadd>
 800fa20:	0006      	movs	r6, r0
 800fa22:	10ad      	asrs	r5, r5, #2
 800fa24:	d03d      	beq.n	800faa2 <__pow5mult+0xa2>
 800fa26:	69fc      	ldr	r4, [r7, #28]
 800fa28:	2c00      	cmp	r4, #0
 800fa2a:	d10f      	bne.n	800fa4c <__pow5mult+0x4c>
 800fa2c:	2010      	movs	r0, #16
 800fa2e:	f001 f89d 	bl	8010b6c <malloc>
 800fa32:	1e02      	subs	r2, r0, #0
 800fa34:	61f8      	str	r0, [r7, #28]
 800fa36:	d105      	bne.n	800fa44 <__pow5mult+0x44>
 800fa38:	21b4      	movs	r1, #180	@ 0xb4
 800fa3a:	4b1c      	ldr	r3, [pc, #112]	@ (800faac <__pow5mult+0xac>)
 800fa3c:	481c      	ldr	r0, [pc, #112]	@ (800fab0 <__pow5mult+0xb0>)
 800fa3e:	31ff      	adds	r1, #255	@ 0xff
 800fa40:	f001 f848 	bl	8010ad4 <__assert_func>
 800fa44:	6044      	str	r4, [r0, #4]
 800fa46:	6084      	str	r4, [r0, #8]
 800fa48:	6004      	str	r4, [r0, #0]
 800fa4a:	60c4      	str	r4, [r0, #12]
 800fa4c:	69fb      	ldr	r3, [r7, #28]
 800fa4e:	689c      	ldr	r4, [r3, #8]
 800fa50:	9301      	str	r3, [sp, #4]
 800fa52:	2c00      	cmp	r4, #0
 800fa54:	d108      	bne.n	800fa68 <__pow5mult+0x68>
 800fa56:	0038      	movs	r0, r7
 800fa58:	4916      	ldr	r1, [pc, #88]	@ (800fab4 <__pow5mult+0xb4>)
 800fa5a:	f7ff ff07 	bl	800f86c <__i2b>
 800fa5e:	9b01      	ldr	r3, [sp, #4]
 800fa60:	0004      	movs	r4, r0
 800fa62:	6098      	str	r0, [r3, #8]
 800fa64:	2300      	movs	r3, #0
 800fa66:	6003      	str	r3, [r0, #0]
 800fa68:	2301      	movs	r3, #1
 800fa6a:	421d      	tst	r5, r3
 800fa6c:	d00a      	beq.n	800fa84 <__pow5mult+0x84>
 800fa6e:	0031      	movs	r1, r6
 800fa70:	0022      	movs	r2, r4
 800fa72:	0038      	movs	r0, r7
 800fa74:	f7ff ff12 	bl	800f89c <__multiply>
 800fa78:	0031      	movs	r1, r6
 800fa7a:	9001      	str	r0, [sp, #4]
 800fa7c:	0038      	movs	r0, r7
 800fa7e:	f7ff fdf1 	bl	800f664 <_Bfree>
 800fa82:	9e01      	ldr	r6, [sp, #4]
 800fa84:	106d      	asrs	r5, r5, #1
 800fa86:	d00c      	beq.n	800faa2 <__pow5mult+0xa2>
 800fa88:	6820      	ldr	r0, [r4, #0]
 800fa8a:	2800      	cmp	r0, #0
 800fa8c:	d107      	bne.n	800fa9e <__pow5mult+0x9e>
 800fa8e:	0022      	movs	r2, r4
 800fa90:	0021      	movs	r1, r4
 800fa92:	0038      	movs	r0, r7
 800fa94:	f7ff ff02 	bl	800f89c <__multiply>
 800fa98:	2300      	movs	r3, #0
 800fa9a:	6020      	str	r0, [r4, #0]
 800fa9c:	6003      	str	r3, [r0, #0]
 800fa9e:	0004      	movs	r4, r0
 800faa0:	e7e2      	b.n	800fa68 <__pow5mult+0x68>
 800faa2:	0030      	movs	r0, r6
 800faa4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800faa6:	46c0      	nop			@ (mov r8, r8)
 800faa8:	0801c144 	.word	0x0801c144
 800faac:	0801c0d2 	.word	0x0801c0d2
 800fab0:	0801c0e9 	.word	0x0801c0e9
 800fab4:	00000271 	.word	0x00000271

0800fab8 <__lshift>:
 800fab8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800faba:	000c      	movs	r4, r1
 800fabc:	0016      	movs	r6, r2
 800fabe:	6923      	ldr	r3, [r4, #16]
 800fac0:	1157      	asrs	r7, r2, #5
 800fac2:	b085      	sub	sp, #20
 800fac4:	18fb      	adds	r3, r7, r3
 800fac6:	9301      	str	r3, [sp, #4]
 800fac8:	3301      	adds	r3, #1
 800faca:	9300      	str	r3, [sp, #0]
 800facc:	6849      	ldr	r1, [r1, #4]
 800face:	68a3      	ldr	r3, [r4, #8]
 800fad0:	9002      	str	r0, [sp, #8]
 800fad2:	9a00      	ldr	r2, [sp, #0]
 800fad4:	4293      	cmp	r3, r2
 800fad6:	db10      	blt.n	800fafa <__lshift+0x42>
 800fad8:	9802      	ldr	r0, [sp, #8]
 800fada:	f7ff fd7f 	bl	800f5dc <_Balloc>
 800fade:	2300      	movs	r3, #0
 800fae0:	0001      	movs	r1, r0
 800fae2:	0005      	movs	r5, r0
 800fae4:	001a      	movs	r2, r3
 800fae6:	3114      	adds	r1, #20
 800fae8:	4298      	cmp	r0, r3
 800faea:	d10c      	bne.n	800fb06 <__lshift+0x4e>
 800faec:	21ef      	movs	r1, #239	@ 0xef
 800faee:	002a      	movs	r2, r5
 800faf0:	4b25      	ldr	r3, [pc, #148]	@ (800fb88 <__lshift+0xd0>)
 800faf2:	4826      	ldr	r0, [pc, #152]	@ (800fb8c <__lshift+0xd4>)
 800faf4:	0049      	lsls	r1, r1, #1
 800faf6:	f000 ffed 	bl	8010ad4 <__assert_func>
 800fafa:	3101      	adds	r1, #1
 800fafc:	005b      	lsls	r3, r3, #1
 800fafe:	e7e8      	b.n	800fad2 <__lshift+0x1a>
 800fb00:	0098      	lsls	r0, r3, #2
 800fb02:	500a      	str	r2, [r1, r0]
 800fb04:	3301      	adds	r3, #1
 800fb06:	42bb      	cmp	r3, r7
 800fb08:	dbfa      	blt.n	800fb00 <__lshift+0x48>
 800fb0a:	43fb      	mvns	r3, r7
 800fb0c:	17db      	asrs	r3, r3, #31
 800fb0e:	401f      	ands	r7, r3
 800fb10:	00bf      	lsls	r7, r7, #2
 800fb12:	0023      	movs	r3, r4
 800fb14:	201f      	movs	r0, #31
 800fb16:	19c9      	adds	r1, r1, r7
 800fb18:	0037      	movs	r7, r6
 800fb1a:	6922      	ldr	r2, [r4, #16]
 800fb1c:	3314      	adds	r3, #20
 800fb1e:	0092      	lsls	r2, r2, #2
 800fb20:	189a      	adds	r2, r3, r2
 800fb22:	4007      	ands	r7, r0
 800fb24:	4206      	tst	r6, r0
 800fb26:	d029      	beq.n	800fb7c <__lshift+0xc4>
 800fb28:	3001      	adds	r0, #1
 800fb2a:	1bc0      	subs	r0, r0, r7
 800fb2c:	9003      	str	r0, [sp, #12]
 800fb2e:	468c      	mov	ip, r1
 800fb30:	2000      	movs	r0, #0
 800fb32:	681e      	ldr	r6, [r3, #0]
 800fb34:	40be      	lsls	r6, r7
 800fb36:	4306      	orrs	r6, r0
 800fb38:	4660      	mov	r0, ip
 800fb3a:	c040      	stmia	r0!, {r6}
 800fb3c:	4684      	mov	ip, r0
 800fb3e:	9e03      	ldr	r6, [sp, #12]
 800fb40:	cb01      	ldmia	r3!, {r0}
 800fb42:	40f0      	lsrs	r0, r6
 800fb44:	429a      	cmp	r2, r3
 800fb46:	d8f4      	bhi.n	800fb32 <__lshift+0x7a>
 800fb48:	0026      	movs	r6, r4
 800fb4a:	3615      	adds	r6, #21
 800fb4c:	2304      	movs	r3, #4
 800fb4e:	42b2      	cmp	r2, r6
 800fb50:	d304      	bcc.n	800fb5c <__lshift+0xa4>
 800fb52:	1b13      	subs	r3, r2, r4
 800fb54:	3b15      	subs	r3, #21
 800fb56:	089b      	lsrs	r3, r3, #2
 800fb58:	3301      	adds	r3, #1
 800fb5a:	009b      	lsls	r3, r3, #2
 800fb5c:	50c8      	str	r0, [r1, r3]
 800fb5e:	2800      	cmp	r0, #0
 800fb60:	d002      	beq.n	800fb68 <__lshift+0xb0>
 800fb62:	9b01      	ldr	r3, [sp, #4]
 800fb64:	3302      	adds	r3, #2
 800fb66:	9300      	str	r3, [sp, #0]
 800fb68:	9b00      	ldr	r3, [sp, #0]
 800fb6a:	9802      	ldr	r0, [sp, #8]
 800fb6c:	3b01      	subs	r3, #1
 800fb6e:	0021      	movs	r1, r4
 800fb70:	612b      	str	r3, [r5, #16]
 800fb72:	f7ff fd77 	bl	800f664 <_Bfree>
 800fb76:	0028      	movs	r0, r5
 800fb78:	b005      	add	sp, #20
 800fb7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb7c:	cb01      	ldmia	r3!, {r0}
 800fb7e:	c101      	stmia	r1!, {r0}
 800fb80:	429a      	cmp	r2, r3
 800fb82:	d8fb      	bhi.n	800fb7c <__lshift+0xc4>
 800fb84:	e7f0      	b.n	800fb68 <__lshift+0xb0>
 800fb86:	46c0      	nop			@ (mov r8, r8)
 800fb88:	0801c061 	.word	0x0801c061
 800fb8c:	0801c0e9 	.word	0x0801c0e9

0800fb90 <__mcmp>:
 800fb90:	b530      	push	{r4, r5, lr}
 800fb92:	690b      	ldr	r3, [r1, #16]
 800fb94:	6904      	ldr	r4, [r0, #16]
 800fb96:	0002      	movs	r2, r0
 800fb98:	1ae0      	subs	r0, r4, r3
 800fb9a:	429c      	cmp	r4, r3
 800fb9c:	d10f      	bne.n	800fbbe <__mcmp+0x2e>
 800fb9e:	3214      	adds	r2, #20
 800fba0:	009b      	lsls	r3, r3, #2
 800fba2:	3114      	adds	r1, #20
 800fba4:	0014      	movs	r4, r2
 800fba6:	18c9      	adds	r1, r1, r3
 800fba8:	18d2      	adds	r2, r2, r3
 800fbaa:	3a04      	subs	r2, #4
 800fbac:	3904      	subs	r1, #4
 800fbae:	6815      	ldr	r5, [r2, #0]
 800fbb0:	680b      	ldr	r3, [r1, #0]
 800fbb2:	429d      	cmp	r5, r3
 800fbb4:	d004      	beq.n	800fbc0 <__mcmp+0x30>
 800fbb6:	2001      	movs	r0, #1
 800fbb8:	429d      	cmp	r5, r3
 800fbba:	d200      	bcs.n	800fbbe <__mcmp+0x2e>
 800fbbc:	3802      	subs	r0, #2
 800fbbe:	bd30      	pop	{r4, r5, pc}
 800fbc0:	4294      	cmp	r4, r2
 800fbc2:	d3f2      	bcc.n	800fbaa <__mcmp+0x1a>
 800fbc4:	e7fb      	b.n	800fbbe <__mcmp+0x2e>
	...

0800fbc8 <__mdiff>:
 800fbc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fbca:	000c      	movs	r4, r1
 800fbcc:	b087      	sub	sp, #28
 800fbce:	9000      	str	r0, [sp, #0]
 800fbd0:	0011      	movs	r1, r2
 800fbd2:	0020      	movs	r0, r4
 800fbd4:	0017      	movs	r7, r2
 800fbd6:	f7ff ffdb 	bl	800fb90 <__mcmp>
 800fbda:	1e05      	subs	r5, r0, #0
 800fbdc:	d110      	bne.n	800fc00 <__mdiff+0x38>
 800fbde:	0001      	movs	r1, r0
 800fbe0:	9800      	ldr	r0, [sp, #0]
 800fbe2:	f7ff fcfb 	bl	800f5dc <_Balloc>
 800fbe6:	1e02      	subs	r2, r0, #0
 800fbe8:	d104      	bne.n	800fbf4 <__mdiff+0x2c>
 800fbea:	4b40      	ldr	r3, [pc, #256]	@ (800fcec <__mdiff+0x124>)
 800fbec:	4840      	ldr	r0, [pc, #256]	@ (800fcf0 <__mdiff+0x128>)
 800fbee:	4941      	ldr	r1, [pc, #260]	@ (800fcf4 <__mdiff+0x12c>)
 800fbf0:	f000 ff70 	bl	8010ad4 <__assert_func>
 800fbf4:	2301      	movs	r3, #1
 800fbf6:	6145      	str	r5, [r0, #20]
 800fbf8:	6103      	str	r3, [r0, #16]
 800fbfa:	0010      	movs	r0, r2
 800fbfc:	b007      	add	sp, #28
 800fbfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc00:	2600      	movs	r6, #0
 800fc02:	42b0      	cmp	r0, r6
 800fc04:	da03      	bge.n	800fc0e <__mdiff+0x46>
 800fc06:	0023      	movs	r3, r4
 800fc08:	003c      	movs	r4, r7
 800fc0a:	001f      	movs	r7, r3
 800fc0c:	3601      	adds	r6, #1
 800fc0e:	6861      	ldr	r1, [r4, #4]
 800fc10:	9800      	ldr	r0, [sp, #0]
 800fc12:	f7ff fce3 	bl	800f5dc <_Balloc>
 800fc16:	1e02      	subs	r2, r0, #0
 800fc18:	d103      	bne.n	800fc22 <__mdiff+0x5a>
 800fc1a:	4b34      	ldr	r3, [pc, #208]	@ (800fcec <__mdiff+0x124>)
 800fc1c:	4834      	ldr	r0, [pc, #208]	@ (800fcf0 <__mdiff+0x128>)
 800fc1e:	4936      	ldr	r1, [pc, #216]	@ (800fcf8 <__mdiff+0x130>)
 800fc20:	e7e6      	b.n	800fbf0 <__mdiff+0x28>
 800fc22:	6923      	ldr	r3, [r4, #16]
 800fc24:	3414      	adds	r4, #20
 800fc26:	9300      	str	r3, [sp, #0]
 800fc28:	009b      	lsls	r3, r3, #2
 800fc2a:	18e3      	adds	r3, r4, r3
 800fc2c:	0021      	movs	r1, r4
 800fc2e:	9401      	str	r4, [sp, #4]
 800fc30:	003c      	movs	r4, r7
 800fc32:	9302      	str	r3, [sp, #8]
 800fc34:	693b      	ldr	r3, [r7, #16]
 800fc36:	3414      	adds	r4, #20
 800fc38:	009b      	lsls	r3, r3, #2
 800fc3a:	18e3      	adds	r3, r4, r3
 800fc3c:	9303      	str	r3, [sp, #12]
 800fc3e:	0003      	movs	r3, r0
 800fc40:	60c6      	str	r6, [r0, #12]
 800fc42:	468c      	mov	ip, r1
 800fc44:	2000      	movs	r0, #0
 800fc46:	3314      	adds	r3, #20
 800fc48:	9304      	str	r3, [sp, #16]
 800fc4a:	9305      	str	r3, [sp, #20]
 800fc4c:	4663      	mov	r3, ip
 800fc4e:	cb20      	ldmia	r3!, {r5}
 800fc50:	b2a9      	uxth	r1, r5
 800fc52:	000e      	movs	r6, r1
 800fc54:	469c      	mov	ip, r3
 800fc56:	cc08      	ldmia	r4!, {r3}
 800fc58:	0c2d      	lsrs	r5, r5, #16
 800fc5a:	b299      	uxth	r1, r3
 800fc5c:	1a71      	subs	r1, r6, r1
 800fc5e:	1809      	adds	r1, r1, r0
 800fc60:	0c1b      	lsrs	r3, r3, #16
 800fc62:	1408      	asrs	r0, r1, #16
 800fc64:	1aeb      	subs	r3, r5, r3
 800fc66:	181b      	adds	r3, r3, r0
 800fc68:	1418      	asrs	r0, r3, #16
 800fc6a:	b289      	uxth	r1, r1
 800fc6c:	041b      	lsls	r3, r3, #16
 800fc6e:	4319      	orrs	r1, r3
 800fc70:	9b05      	ldr	r3, [sp, #20]
 800fc72:	c302      	stmia	r3!, {r1}
 800fc74:	9305      	str	r3, [sp, #20]
 800fc76:	9b03      	ldr	r3, [sp, #12]
 800fc78:	42a3      	cmp	r3, r4
 800fc7a:	d8e7      	bhi.n	800fc4c <__mdiff+0x84>
 800fc7c:	0039      	movs	r1, r7
 800fc7e:	9c03      	ldr	r4, [sp, #12]
 800fc80:	3115      	adds	r1, #21
 800fc82:	2304      	movs	r3, #4
 800fc84:	428c      	cmp	r4, r1
 800fc86:	d304      	bcc.n	800fc92 <__mdiff+0xca>
 800fc88:	1be3      	subs	r3, r4, r7
 800fc8a:	3b15      	subs	r3, #21
 800fc8c:	089b      	lsrs	r3, r3, #2
 800fc8e:	3301      	adds	r3, #1
 800fc90:	009b      	lsls	r3, r3, #2
 800fc92:	9901      	ldr	r1, [sp, #4]
 800fc94:	18cd      	adds	r5, r1, r3
 800fc96:	9904      	ldr	r1, [sp, #16]
 800fc98:	002e      	movs	r6, r5
 800fc9a:	18cb      	adds	r3, r1, r3
 800fc9c:	001f      	movs	r7, r3
 800fc9e:	9902      	ldr	r1, [sp, #8]
 800fca0:	428e      	cmp	r6, r1
 800fca2:	d311      	bcc.n	800fcc8 <__mdiff+0x100>
 800fca4:	9c02      	ldr	r4, [sp, #8]
 800fca6:	1ee9      	subs	r1, r5, #3
 800fca8:	2000      	movs	r0, #0
 800fcaa:	428c      	cmp	r4, r1
 800fcac:	d304      	bcc.n	800fcb8 <__mdiff+0xf0>
 800fcae:	0021      	movs	r1, r4
 800fcb0:	3103      	adds	r1, #3
 800fcb2:	1b49      	subs	r1, r1, r5
 800fcb4:	0889      	lsrs	r1, r1, #2
 800fcb6:	0088      	lsls	r0, r1, #2
 800fcb8:	181b      	adds	r3, r3, r0
 800fcba:	3b04      	subs	r3, #4
 800fcbc:	6819      	ldr	r1, [r3, #0]
 800fcbe:	2900      	cmp	r1, #0
 800fcc0:	d010      	beq.n	800fce4 <__mdiff+0x11c>
 800fcc2:	9b00      	ldr	r3, [sp, #0]
 800fcc4:	6113      	str	r3, [r2, #16]
 800fcc6:	e798      	b.n	800fbfa <__mdiff+0x32>
 800fcc8:	4684      	mov	ip, r0
 800fcca:	ce02      	ldmia	r6!, {r1}
 800fccc:	b288      	uxth	r0, r1
 800fcce:	4460      	add	r0, ip
 800fcd0:	1400      	asrs	r0, r0, #16
 800fcd2:	0c0c      	lsrs	r4, r1, #16
 800fcd4:	1904      	adds	r4, r0, r4
 800fcd6:	4461      	add	r1, ip
 800fcd8:	1420      	asrs	r0, r4, #16
 800fcda:	b289      	uxth	r1, r1
 800fcdc:	0424      	lsls	r4, r4, #16
 800fcde:	4321      	orrs	r1, r4
 800fce0:	c702      	stmia	r7!, {r1}
 800fce2:	e7dc      	b.n	800fc9e <__mdiff+0xd6>
 800fce4:	9900      	ldr	r1, [sp, #0]
 800fce6:	3901      	subs	r1, #1
 800fce8:	9100      	str	r1, [sp, #0]
 800fcea:	e7e6      	b.n	800fcba <__mdiff+0xf2>
 800fcec:	0801c061 	.word	0x0801c061
 800fcf0:	0801c0e9 	.word	0x0801c0e9
 800fcf4:	00000237 	.word	0x00000237
 800fcf8:	00000245 	.word	0x00000245

0800fcfc <__ulp>:
 800fcfc:	b510      	push	{r4, lr}
 800fcfe:	2400      	movs	r4, #0
 800fd00:	4b0c      	ldr	r3, [pc, #48]	@ (800fd34 <__ulp+0x38>)
 800fd02:	4a0d      	ldr	r2, [pc, #52]	@ (800fd38 <__ulp+0x3c>)
 800fd04:	400b      	ands	r3, r1
 800fd06:	189b      	adds	r3, r3, r2
 800fd08:	42a3      	cmp	r3, r4
 800fd0a:	dc06      	bgt.n	800fd1a <__ulp+0x1e>
 800fd0c:	425b      	negs	r3, r3
 800fd0e:	151a      	asrs	r2, r3, #20
 800fd10:	2a13      	cmp	r2, #19
 800fd12:	dc05      	bgt.n	800fd20 <__ulp+0x24>
 800fd14:	2380      	movs	r3, #128	@ 0x80
 800fd16:	031b      	lsls	r3, r3, #12
 800fd18:	4113      	asrs	r3, r2
 800fd1a:	0019      	movs	r1, r3
 800fd1c:	0020      	movs	r0, r4
 800fd1e:	bd10      	pop	{r4, pc}
 800fd20:	3a14      	subs	r2, #20
 800fd22:	2401      	movs	r4, #1
 800fd24:	2a1e      	cmp	r2, #30
 800fd26:	dc02      	bgt.n	800fd2e <__ulp+0x32>
 800fd28:	2480      	movs	r4, #128	@ 0x80
 800fd2a:	0624      	lsls	r4, r4, #24
 800fd2c:	40d4      	lsrs	r4, r2
 800fd2e:	2300      	movs	r3, #0
 800fd30:	e7f3      	b.n	800fd1a <__ulp+0x1e>
 800fd32:	46c0      	nop			@ (mov r8, r8)
 800fd34:	7ff00000 	.word	0x7ff00000
 800fd38:	fcc00000 	.word	0xfcc00000

0800fd3c <__b2d>:
 800fd3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fd3e:	0006      	movs	r6, r0
 800fd40:	6903      	ldr	r3, [r0, #16]
 800fd42:	3614      	adds	r6, #20
 800fd44:	009b      	lsls	r3, r3, #2
 800fd46:	18f3      	adds	r3, r6, r3
 800fd48:	1f1d      	subs	r5, r3, #4
 800fd4a:	682c      	ldr	r4, [r5, #0]
 800fd4c:	000f      	movs	r7, r1
 800fd4e:	0020      	movs	r0, r4
 800fd50:	9301      	str	r3, [sp, #4]
 800fd52:	f7ff fd3b 	bl	800f7cc <__hi0bits>
 800fd56:	2220      	movs	r2, #32
 800fd58:	1a12      	subs	r2, r2, r0
 800fd5a:	603a      	str	r2, [r7, #0]
 800fd5c:	0003      	movs	r3, r0
 800fd5e:	4a1c      	ldr	r2, [pc, #112]	@ (800fdd0 <__b2d+0x94>)
 800fd60:	280a      	cmp	r0, #10
 800fd62:	dc15      	bgt.n	800fd90 <__b2d+0x54>
 800fd64:	210b      	movs	r1, #11
 800fd66:	0027      	movs	r7, r4
 800fd68:	1a09      	subs	r1, r1, r0
 800fd6a:	40cf      	lsrs	r7, r1
 800fd6c:	433a      	orrs	r2, r7
 800fd6e:	468c      	mov	ip, r1
 800fd70:	0011      	movs	r1, r2
 800fd72:	2200      	movs	r2, #0
 800fd74:	42ae      	cmp	r6, r5
 800fd76:	d202      	bcs.n	800fd7e <__b2d+0x42>
 800fd78:	9a01      	ldr	r2, [sp, #4]
 800fd7a:	3a08      	subs	r2, #8
 800fd7c:	6812      	ldr	r2, [r2, #0]
 800fd7e:	3315      	adds	r3, #21
 800fd80:	409c      	lsls	r4, r3
 800fd82:	4663      	mov	r3, ip
 800fd84:	0027      	movs	r7, r4
 800fd86:	40da      	lsrs	r2, r3
 800fd88:	4317      	orrs	r7, r2
 800fd8a:	0038      	movs	r0, r7
 800fd8c:	b003      	add	sp, #12
 800fd8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd90:	2700      	movs	r7, #0
 800fd92:	42ae      	cmp	r6, r5
 800fd94:	d202      	bcs.n	800fd9c <__b2d+0x60>
 800fd96:	9d01      	ldr	r5, [sp, #4]
 800fd98:	3d08      	subs	r5, #8
 800fd9a:	682f      	ldr	r7, [r5, #0]
 800fd9c:	210b      	movs	r1, #11
 800fd9e:	4249      	negs	r1, r1
 800fda0:	468c      	mov	ip, r1
 800fda2:	449c      	add	ip, r3
 800fda4:	2b0b      	cmp	r3, #11
 800fda6:	d010      	beq.n	800fdca <__b2d+0x8e>
 800fda8:	4661      	mov	r1, ip
 800fdaa:	2320      	movs	r3, #32
 800fdac:	408c      	lsls	r4, r1
 800fdae:	1a5b      	subs	r3, r3, r1
 800fdb0:	0039      	movs	r1, r7
 800fdb2:	40d9      	lsrs	r1, r3
 800fdb4:	430c      	orrs	r4, r1
 800fdb6:	4322      	orrs	r2, r4
 800fdb8:	0011      	movs	r1, r2
 800fdba:	2200      	movs	r2, #0
 800fdbc:	42b5      	cmp	r5, r6
 800fdbe:	d901      	bls.n	800fdc4 <__b2d+0x88>
 800fdc0:	3d04      	subs	r5, #4
 800fdc2:	682a      	ldr	r2, [r5, #0]
 800fdc4:	4664      	mov	r4, ip
 800fdc6:	40a7      	lsls	r7, r4
 800fdc8:	e7dd      	b.n	800fd86 <__b2d+0x4a>
 800fdca:	4322      	orrs	r2, r4
 800fdcc:	0011      	movs	r1, r2
 800fdce:	e7dc      	b.n	800fd8a <__b2d+0x4e>
 800fdd0:	3ff00000 	.word	0x3ff00000

0800fdd4 <__d2b>:
 800fdd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fdd6:	2101      	movs	r1, #1
 800fdd8:	0016      	movs	r6, r2
 800fdda:	001f      	movs	r7, r3
 800fddc:	f7ff fbfe 	bl	800f5dc <_Balloc>
 800fde0:	1e04      	subs	r4, r0, #0
 800fde2:	d105      	bne.n	800fdf0 <__d2b+0x1c>
 800fde4:	0022      	movs	r2, r4
 800fde6:	4b25      	ldr	r3, [pc, #148]	@ (800fe7c <__d2b+0xa8>)
 800fde8:	4825      	ldr	r0, [pc, #148]	@ (800fe80 <__d2b+0xac>)
 800fdea:	4926      	ldr	r1, [pc, #152]	@ (800fe84 <__d2b+0xb0>)
 800fdec:	f000 fe72 	bl	8010ad4 <__assert_func>
 800fdf0:	033b      	lsls	r3, r7, #12
 800fdf2:	007d      	lsls	r5, r7, #1
 800fdf4:	0b1b      	lsrs	r3, r3, #12
 800fdf6:	0d6d      	lsrs	r5, r5, #21
 800fdf8:	d002      	beq.n	800fe00 <__d2b+0x2c>
 800fdfa:	2280      	movs	r2, #128	@ 0x80
 800fdfc:	0352      	lsls	r2, r2, #13
 800fdfe:	4313      	orrs	r3, r2
 800fe00:	9301      	str	r3, [sp, #4]
 800fe02:	2e00      	cmp	r6, #0
 800fe04:	d025      	beq.n	800fe52 <__d2b+0x7e>
 800fe06:	4668      	mov	r0, sp
 800fe08:	9600      	str	r6, [sp, #0]
 800fe0a:	f7ff fd00 	bl	800f80e <__lo0bits>
 800fe0e:	9b01      	ldr	r3, [sp, #4]
 800fe10:	9900      	ldr	r1, [sp, #0]
 800fe12:	2800      	cmp	r0, #0
 800fe14:	d01b      	beq.n	800fe4e <__d2b+0x7a>
 800fe16:	2220      	movs	r2, #32
 800fe18:	001e      	movs	r6, r3
 800fe1a:	1a12      	subs	r2, r2, r0
 800fe1c:	4096      	lsls	r6, r2
 800fe1e:	0032      	movs	r2, r6
 800fe20:	40c3      	lsrs	r3, r0
 800fe22:	430a      	orrs	r2, r1
 800fe24:	6162      	str	r2, [r4, #20]
 800fe26:	9301      	str	r3, [sp, #4]
 800fe28:	9e01      	ldr	r6, [sp, #4]
 800fe2a:	61a6      	str	r6, [r4, #24]
 800fe2c:	1e73      	subs	r3, r6, #1
 800fe2e:	419e      	sbcs	r6, r3
 800fe30:	3601      	adds	r6, #1
 800fe32:	6126      	str	r6, [r4, #16]
 800fe34:	2d00      	cmp	r5, #0
 800fe36:	d014      	beq.n	800fe62 <__d2b+0x8e>
 800fe38:	2635      	movs	r6, #53	@ 0x35
 800fe3a:	4b13      	ldr	r3, [pc, #76]	@ (800fe88 <__d2b+0xb4>)
 800fe3c:	18ed      	adds	r5, r5, r3
 800fe3e:	9b08      	ldr	r3, [sp, #32]
 800fe40:	182d      	adds	r5, r5, r0
 800fe42:	601d      	str	r5, [r3, #0]
 800fe44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fe46:	1a36      	subs	r6, r6, r0
 800fe48:	601e      	str	r6, [r3, #0]
 800fe4a:	0020      	movs	r0, r4
 800fe4c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800fe4e:	6161      	str	r1, [r4, #20]
 800fe50:	e7ea      	b.n	800fe28 <__d2b+0x54>
 800fe52:	a801      	add	r0, sp, #4
 800fe54:	f7ff fcdb 	bl	800f80e <__lo0bits>
 800fe58:	9b01      	ldr	r3, [sp, #4]
 800fe5a:	2601      	movs	r6, #1
 800fe5c:	6163      	str	r3, [r4, #20]
 800fe5e:	3020      	adds	r0, #32
 800fe60:	e7e7      	b.n	800fe32 <__d2b+0x5e>
 800fe62:	4b0a      	ldr	r3, [pc, #40]	@ (800fe8c <__d2b+0xb8>)
 800fe64:	18c0      	adds	r0, r0, r3
 800fe66:	9b08      	ldr	r3, [sp, #32]
 800fe68:	6018      	str	r0, [r3, #0]
 800fe6a:	4b09      	ldr	r3, [pc, #36]	@ (800fe90 <__d2b+0xbc>)
 800fe6c:	18f3      	adds	r3, r6, r3
 800fe6e:	009b      	lsls	r3, r3, #2
 800fe70:	18e3      	adds	r3, r4, r3
 800fe72:	6958      	ldr	r0, [r3, #20]
 800fe74:	f7ff fcaa 	bl	800f7cc <__hi0bits>
 800fe78:	0176      	lsls	r6, r6, #5
 800fe7a:	e7e3      	b.n	800fe44 <__d2b+0x70>
 800fe7c:	0801c061 	.word	0x0801c061
 800fe80:	0801c0e9 	.word	0x0801c0e9
 800fe84:	0000030f 	.word	0x0000030f
 800fe88:	fffffbcd 	.word	0xfffffbcd
 800fe8c:	fffffbce 	.word	0xfffffbce
 800fe90:	3fffffff 	.word	0x3fffffff

0800fe94 <__ratio>:
 800fe94:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fe96:	b087      	sub	sp, #28
 800fe98:	000f      	movs	r7, r1
 800fe9a:	a904      	add	r1, sp, #16
 800fe9c:	0006      	movs	r6, r0
 800fe9e:	f7ff ff4d 	bl	800fd3c <__b2d>
 800fea2:	9000      	str	r0, [sp, #0]
 800fea4:	9101      	str	r1, [sp, #4]
 800fea6:	9b00      	ldr	r3, [sp, #0]
 800fea8:	9c01      	ldr	r4, [sp, #4]
 800feaa:	0038      	movs	r0, r7
 800feac:	a905      	add	r1, sp, #20
 800feae:	9302      	str	r3, [sp, #8]
 800feb0:	9403      	str	r4, [sp, #12]
 800feb2:	f7ff ff43 	bl	800fd3c <__b2d>
 800feb6:	000d      	movs	r5, r1
 800feb8:	0002      	movs	r2, r0
 800feba:	000b      	movs	r3, r1
 800febc:	6930      	ldr	r0, [r6, #16]
 800febe:	6939      	ldr	r1, [r7, #16]
 800fec0:	9e04      	ldr	r6, [sp, #16]
 800fec2:	1a40      	subs	r0, r0, r1
 800fec4:	9905      	ldr	r1, [sp, #20]
 800fec6:	0140      	lsls	r0, r0, #5
 800fec8:	1a71      	subs	r1, r6, r1
 800feca:	1841      	adds	r1, r0, r1
 800fecc:	0508      	lsls	r0, r1, #20
 800fece:	2900      	cmp	r1, #0
 800fed0:	dd08      	ble.n	800fee4 <__ratio+0x50>
 800fed2:	9901      	ldr	r1, [sp, #4]
 800fed4:	1841      	adds	r1, r0, r1
 800fed6:	9103      	str	r1, [sp, #12]
 800fed8:	9802      	ldr	r0, [sp, #8]
 800feda:	9903      	ldr	r1, [sp, #12]
 800fedc:	f7f1 ff62 	bl	8001da4 <__aeabi_ddiv>
 800fee0:	b007      	add	sp, #28
 800fee2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fee4:	1a2b      	subs	r3, r5, r0
 800fee6:	e7f7      	b.n	800fed8 <__ratio+0x44>

0800fee8 <__copybits>:
 800fee8:	b570      	push	{r4, r5, r6, lr}
 800feea:	0014      	movs	r4, r2
 800feec:	0005      	movs	r5, r0
 800feee:	3901      	subs	r1, #1
 800fef0:	6913      	ldr	r3, [r2, #16]
 800fef2:	1149      	asrs	r1, r1, #5
 800fef4:	3101      	adds	r1, #1
 800fef6:	0089      	lsls	r1, r1, #2
 800fef8:	3414      	adds	r4, #20
 800fefa:	009b      	lsls	r3, r3, #2
 800fefc:	1841      	adds	r1, r0, r1
 800fefe:	18e3      	adds	r3, r4, r3
 800ff00:	42a3      	cmp	r3, r4
 800ff02:	d80d      	bhi.n	800ff20 <__copybits+0x38>
 800ff04:	0014      	movs	r4, r2
 800ff06:	3411      	adds	r4, #17
 800ff08:	2500      	movs	r5, #0
 800ff0a:	429c      	cmp	r4, r3
 800ff0c:	d803      	bhi.n	800ff16 <__copybits+0x2e>
 800ff0e:	1a9b      	subs	r3, r3, r2
 800ff10:	3b11      	subs	r3, #17
 800ff12:	089b      	lsrs	r3, r3, #2
 800ff14:	009d      	lsls	r5, r3, #2
 800ff16:	2300      	movs	r3, #0
 800ff18:	1940      	adds	r0, r0, r5
 800ff1a:	4281      	cmp	r1, r0
 800ff1c:	d803      	bhi.n	800ff26 <__copybits+0x3e>
 800ff1e:	bd70      	pop	{r4, r5, r6, pc}
 800ff20:	cc40      	ldmia	r4!, {r6}
 800ff22:	c540      	stmia	r5!, {r6}
 800ff24:	e7ec      	b.n	800ff00 <__copybits+0x18>
 800ff26:	c008      	stmia	r0!, {r3}
 800ff28:	e7f7      	b.n	800ff1a <__copybits+0x32>

0800ff2a <__any_on>:
 800ff2a:	0002      	movs	r2, r0
 800ff2c:	6900      	ldr	r0, [r0, #16]
 800ff2e:	b510      	push	{r4, lr}
 800ff30:	3214      	adds	r2, #20
 800ff32:	114b      	asrs	r3, r1, #5
 800ff34:	4298      	cmp	r0, r3
 800ff36:	db13      	blt.n	800ff60 <__any_on+0x36>
 800ff38:	dd0c      	ble.n	800ff54 <__any_on+0x2a>
 800ff3a:	241f      	movs	r4, #31
 800ff3c:	0008      	movs	r0, r1
 800ff3e:	4020      	ands	r0, r4
 800ff40:	4221      	tst	r1, r4
 800ff42:	d007      	beq.n	800ff54 <__any_on+0x2a>
 800ff44:	0099      	lsls	r1, r3, #2
 800ff46:	588c      	ldr	r4, [r1, r2]
 800ff48:	0021      	movs	r1, r4
 800ff4a:	40c1      	lsrs	r1, r0
 800ff4c:	4081      	lsls	r1, r0
 800ff4e:	2001      	movs	r0, #1
 800ff50:	428c      	cmp	r4, r1
 800ff52:	d104      	bne.n	800ff5e <__any_on+0x34>
 800ff54:	009b      	lsls	r3, r3, #2
 800ff56:	18d3      	adds	r3, r2, r3
 800ff58:	4293      	cmp	r3, r2
 800ff5a:	d803      	bhi.n	800ff64 <__any_on+0x3a>
 800ff5c:	2000      	movs	r0, #0
 800ff5e:	bd10      	pop	{r4, pc}
 800ff60:	0003      	movs	r3, r0
 800ff62:	e7f7      	b.n	800ff54 <__any_on+0x2a>
 800ff64:	3b04      	subs	r3, #4
 800ff66:	6819      	ldr	r1, [r3, #0]
 800ff68:	2900      	cmp	r1, #0
 800ff6a:	d0f5      	beq.n	800ff58 <__any_on+0x2e>
 800ff6c:	2001      	movs	r0, #1
 800ff6e:	e7f6      	b.n	800ff5e <__any_on+0x34>

0800ff70 <__ascii_wctomb>:
 800ff70:	0003      	movs	r3, r0
 800ff72:	1e08      	subs	r0, r1, #0
 800ff74:	d005      	beq.n	800ff82 <__ascii_wctomb+0x12>
 800ff76:	2aff      	cmp	r2, #255	@ 0xff
 800ff78:	d904      	bls.n	800ff84 <__ascii_wctomb+0x14>
 800ff7a:	228a      	movs	r2, #138	@ 0x8a
 800ff7c:	2001      	movs	r0, #1
 800ff7e:	601a      	str	r2, [r3, #0]
 800ff80:	4240      	negs	r0, r0
 800ff82:	4770      	bx	lr
 800ff84:	2001      	movs	r0, #1
 800ff86:	700a      	strb	r2, [r1, #0]
 800ff88:	e7fb      	b.n	800ff82 <__ascii_wctomb+0x12>
	...

0800ff8c <__ssputs_r>:
 800ff8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff8e:	688e      	ldr	r6, [r1, #8]
 800ff90:	b085      	sub	sp, #20
 800ff92:	001f      	movs	r7, r3
 800ff94:	000c      	movs	r4, r1
 800ff96:	680b      	ldr	r3, [r1, #0]
 800ff98:	9002      	str	r0, [sp, #8]
 800ff9a:	9203      	str	r2, [sp, #12]
 800ff9c:	42be      	cmp	r6, r7
 800ff9e:	d830      	bhi.n	8010002 <__ssputs_r+0x76>
 800ffa0:	210c      	movs	r1, #12
 800ffa2:	5e62      	ldrsh	r2, [r4, r1]
 800ffa4:	2190      	movs	r1, #144	@ 0x90
 800ffa6:	00c9      	lsls	r1, r1, #3
 800ffa8:	420a      	tst	r2, r1
 800ffaa:	d028      	beq.n	800fffe <__ssputs_r+0x72>
 800ffac:	2003      	movs	r0, #3
 800ffae:	6921      	ldr	r1, [r4, #16]
 800ffb0:	1a5b      	subs	r3, r3, r1
 800ffb2:	9301      	str	r3, [sp, #4]
 800ffb4:	6963      	ldr	r3, [r4, #20]
 800ffb6:	4343      	muls	r3, r0
 800ffb8:	9801      	ldr	r0, [sp, #4]
 800ffba:	0fdd      	lsrs	r5, r3, #31
 800ffbc:	18ed      	adds	r5, r5, r3
 800ffbe:	1c7b      	adds	r3, r7, #1
 800ffc0:	181b      	adds	r3, r3, r0
 800ffc2:	106d      	asrs	r5, r5, #1
 800ffc4:	42ab      	cmp	r3, r5
 800ffc6:	d900      	bls.n	800ffca <__ssputs_r+0x3e>
 800ffc8:	001d      	movs	r5, r3
 800ffca:	0552      	lsls	r2, r2, #21
 800ffcc:	d528      	bpl.n	8010020 <__ssputs_r+0x94>
 800ffce:	0029      	movs	r1, r5
 800ffd0:	9802      	ldr	r0, [sp, #8]
 800ffd2:	f7ff fa61 	bl	800f498 <_malloc_r>
 800ffd6:	1e06      	subs	r6, r0, #0
 800ffd8:	d02c      	beq.n	8010034 <__ssputs_r+0xa8>
 800ffda:	9a01      	ldr	r2, [sp, #4]
 800ffdc:	6921      	ldr	r1, [r4, #16]
 800ffde:	f7fe fe86 	bl	800ecee <memcpy>
 800ffe2:	89a2      	ldrh	r2, [r4, #12]
 800ffe4:	4b18      	ldr	r3, [pc, #96]	@ (8010048 <__ssputs_r+0xbc>)
 800ffe6:	401a      	ands	r2, r3
 800ffe8:	2380      	movs	r3, #128	@ 0x80
 800ffea:	4313      	orrs	r3, r2
 800ffec:	81a3      	strh	r3, [r4, #12]
 800ffee:	9b01      	ldr	r3, [sp, #4]
 800fff0:	6126      	str	r6, [r4, #16]
 800fff2:	18f6      	adds	r6, r6, r3
 800fff4:	6026      	str	r6, [r4, #0]
 800fff6:	003e      	movs	r6, r7
 800fff8:	6165      	str	r5, [r4, #20]
 800fffa:	1aed      	subs	r5, r5, r3
 800fffc:	60a5      	str	r5, [r4, #8]
 800fffe:	42be      	cmp	r6, r7
 8010000:	d900      	bls.n	8010004 <__ssputs_r+0x78>
 8010002:	003e      	movs	r6, r7
 8010004:	0032      	movs	r2, r6
 8010006:	9903      	ldr	r1, [sp, #12]
 8010008:	6820      	ldr	r0, [r4, #0]
 801000a:	f000 fd31 	bl	8010a70 <memmove>
 801000e:	2000      	movs	r0, #0
 8010010:	68a3      	ldr	r3, [r4, #8]
 8010012:	1b9b      	subs	r3, r3, r6
 8010014:	60a3      	str	r3, [r4, #8]
 8010016:	6823      	ldr	r3, [r4, #0]
 8010018:	199b      	adds	r3, r3, r6
 801001a:	6023      	str	r3, [r4, #0]
 801001c:	b005      	add	sp, #20
 801001e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010020:	002a      	movs	r2, r5
 8010022:	9802      	ldr	r0, [sp, #8]
 8010024:	f000 fdac 	bl	8010b80 <_realloc_r>
 8010028:	1e06      	subs	r6, r0, #0
 801002a:	d1e0      	bne.n	800ffee <__ssputs_r+0x62>
 801002c:	6921      	ldr	r1, [r4, #16]
 801002e:	9802      	ldr	r0, [sp, #8]
 8010030:	f7fe fe6c 	bl	800ed0c <_free_r>
 8010034:	230c      	movs	r3, #12
 8010036:	2001      	movs	r0, #1
 8010038:	9a02      	ldr	r2, [sp, #8]
 801003a:	4240      	negs	r0, r0
 801003c:	6013      	str	r3, [r2, #0]
 801003e:	89a2      	ldrh	r2, [r4, #12]
 8010040:	3334      	adds	r3, #52	@ 0x34
 8010042:	4313      	orrs	r3, r2
 8010044:	81a3      	strh	r3, [r4, #12]
 8010046:	e7e9      	b.n	801001c <__ssputs_r+0x90>
 8010048:	fffffb7f 	.word	0xfffffb7f

0801004c <_svfiprintf_r>:
 801004c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801004e:	b0a1      	sub	sp, #132	@ 0x84
 8010050:	9003      	str	r0, [sp, #12]
 8010052:	001d      	movs	r5, r3
 8010054:	898b      	ldrh	r3, [r1, #12]
 8010056:	000f      	movs	r7, r1
 8010058:	0016      	movs	r6, r2
 801005a:	061b      	lsls	r3, r3, #24
 801005c:	d511      	bpl.n	8010082 <_svfiprintf_r+0x36>
 801005e:	690b      	ldr	r3, [r1, #16]
 8010060:	2b00      	cmp	r3, #0
 8010062:	d10e      	bne.n	8010082 <_svfiprintf_r+0x36>
 8010064:	2140      	movs	r1, #64	@ 0x40
 8010066:	f7ff fa17 	bl	800f498 <_malloc_r>
 801006a:	6038      	str	r0, [r7, #0]
 801006c:	6138      	str	r0, [r7, #16]
 801006e:	2800      	cmp	r0, #0
 8010070:	d105      	bne.n	801007e <_svfiprintf_r+0x32>
 8010072:	230c      	movs	r3, #12
 8010074:	9a03      	ldr	r2, [sp, #12]
 8010076:	6013      	str	r3, [r2, #0]
 8010078:	2001      	movs	r0, #1
 801007a:	4240      	negs	r0, r0
 801007c:	e0cf      	b.n	801021e <_svfiprintf_r+0x1d2>
 801007e:	2340      	movs	r3, #64	@ 0x40
 8010080:	617b      	str	r3, [r7, #20]
 8010082:	2300      	movs	r3, #0
 8010084:	ac08      	add	r4, sp, #32
 8010086:	6163      	str	r3, [r4, #20]
 8010088:	3320      	adds	r3, #32
 801008a:	7663      	strb	r3, [r4, #25]
 801008c:	3310      	adds	r3, #16
 801008e:	76a3      	strb	r3, [r4, #26]
 8010090:	9507      	str	r5, [sp, #28]
 8010092:	0035      	movs	r5, r6
 8010094:	782b      	ldrb	r3, [r5, #0]
 8010096:	2b00      	cmp	r3, #0
 8010098:	d001      	beq.n	801009e <_svfiprintf_r+0x52>
 801009a:	2b25      	cmp	r3, #37	@ 0x25
 801009c:	d148      	bne.n	8010130 <_svfiprintf_r+0xe4>
 801009e:	1bab      	subs	r3, r5, r6
 80100a0:	9305      	str	r3, [sp, #20]
 80100a2:	42b5      	cmp	r5, r6
 80100a4:	d00b      	beq.n	80100be <_svfiprintf_r+0x72>
 80100a6:	0032      	movs	r2, r6
 80100a8:	0039      	movs	r1, r7
 80100aa:	9803      	ldr	r0, [sp, #12]
 80100ac:	f7ff ff6e 	bl	800ff8c <__ssputs_r>
 80100b0:	3001      	adds	r0, #1
 80100b2:	d100      	bne.n	80100b6 <_svfiprintf_r+0x6a>
 80100b4:	e0ae      	b.n	8010214 <_svfiprintf_r+0x1c8>
 80100b6:	6963      	ldr	r3, [r4, #20]
 80100b8:	9a05      	ldr	r2, [sp, #20]
 80100ba:	189b      	adds	r3, r3, r2
 80100bc:	6163      	str	r3, [r4, #20]
 80100be:	782b      	ldrb	r3, [r5, #0]
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d100      	bne.n	80100c6 <_svfiprintf_r+0x7a>
 80100c4:	e0a6      	b.n	8010214 <_svfiprintf_r+0x1c8>
 80100c6:	2201      	movs	r2, #1
 80100c8:	2300      	movs	r3, #0
 80100ca:	4252      	negs	r2, r2
 80100cc:	6062      	str	r2, [r4, #4]
 80100ce:	a904      	add	r1, sp, #16
 80100d0:	3254      	adds	r2, #84	@ 0x54
 80100d2:	1852      	adds	r2, r2, r1
 80100d4:	1c6e      	adds	r6, r5, #1
 80100d6:	6023      	str	r3, [r4, #0]
 80100d8:	60e3      	str	r3, [r4, #12]
 80100da:	60a3      	str	r3, [r4, #8]
 80100dc:	7013      	strb	r3, [r2, #0]
 80100de:	65a3      	str	r3, [r4, #88]	@ 0x58
 80100e0:	4b54      	ldr	r3, [pc, #336]	@ (8010234 <_svfiprintf_r+0x1e8>)
 80100e2:	2205      	movs	r2, #5
 80100e4:	0018      	movs	r0, r3
 80100e6:	7831      	ldrb	r1, [r6, #0]
 80100e8:	9305      	str	r3, [sp, #20]
 80100ea:	f000 fce7 	bl	8010abc <memchr>
 80100ee:	1c75      	adds	r5, r6, #1
 80100f0:	2800      	cmp	r0, #0
 80100f2:	d11f      	bne.n	8010134 <_svfiprintf_r+0xe8>
 80100f4:	6822      	ldr	r2, [r4, #0]
 80100f6:	06d3      	lsls	r3, r2, #27
 80100f8:	d504      	bpl.n	8010104 <_svfiprintf_r+0xb8>
 80100fa:	2353      	movs	r3, #83	@ 0x53
 80100fc:	a904      	add	r1, sp, #16
 80100fe:	185b      	adds	r3, r3, r1
 8010100:	2120      	movs	r1, #32
 8010102:	7019      	strb	r1, [r3, #0]
 8010104:	0713      	lsls	r3, r2, #28
 8010106:	d504      	bpl.n	8010112 <_svfiprintf_r+0xc6>
 8010108:	2353      	movs	r3, #83	@ 0x53
 801010a:	a904      	add	r1, sp, #16
 801010c:	185b      	adds	r3, r3, r1
 801010e:	212b      	movs	r1, #43	@ 0x2b
 8010110:	7019      	strb	r1, [r3, #0]
 8010112:	7833      	ldrb	r3, [r6, #0]
 8010114:	2b2a      	cmp	r3, #42	@ 0x2a
 8010116:	d016      	beq.n	8010146 <_svfiprintf_r+0xfa>
 8010118:	0035      	movs	r5, r6
 801011a:	2100      	movs	r1, #0
 801011c:	200a      	movs	r0, #10
 801011e:	68e3      	ldr	r3, [r4, #12]
 8010120:	782a      	ldrb	r2, [r5, #0]
 8010122:	1c6e      	adds	r6, r5, #1
 8010124:	3a30      	subs	r2, #48	@ 0x30
 8010126:	2a09      	cmp	r2, #9
 8010128:	d950      	bls.n	80101cc <_svfiprintf_r+0x180>
 801012a:	2900      	cmp	r1, #0
 801012c:	d111      	bne.n	8010152 <_svfiprintf_r+0x106>
 801012e:	e017      	b.n	8010160 <_svfiprintf_r+0x114>
 8010130:	3501      	adds	r5, #1
 8010132:	e7af      	b.n	8010094 <_svfiprintf_r+0x48>
 8010134:	9b05      	ldr	r3, [sp, #20]
 8010136:	6822      	ldr	r2, [r4, #0]
 8010138:	1ac0      	subs	r0, r0, r3
 801013a:	2301      	movs	r3, #1
 801013c:	4083      	lsls	r3, r0
 801013e:	4313      	orrs	r3, r2
 8010140:	002e      	movs	r6, r5
 8010142:	6023      	str	r3, [r4, #0]
 8010144:	e7cc      	b.n	80100e0 <_svfiprintf_r+0x94>
 8010146:	9b07      	ldr	r3, [sp, #28]
 8010148:	1d19      	adds	r1, r3, #4
 801014a:	681b      	ldr	r3, [r3, #0]
 801014c:	9107      	str	r1, [sp, #28]
 801014e:	2b00      	cmp	r3, #0
 8010150:	db01      	blt.n	8010156 <_svfiprintf_r+0x10a>
 8010152:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010154:	e004      	b.n	8010160 <_svfiprintf_r+0x114>
 8010156:	425b      	negs	r3, r3
 8010158:	60e3      	str	r3, [r4, #12]
 801015a:	2302      	movs	r3, #2
 801015c:	4313      	orrs	r3, r2
 801015e:	6023      	str	r3, [r4, #0]
 8010160:	782b      	ldrb	r3, [r5, #0]
 8010162:	2b2e      	cmp	r3, #46	@ 0x2e
 8010164:	d10c      	bne.n	8010180 <_svfiprintf_r+0x134>
 8010166:	786b      	ldrb	r3, [r5, #1]
 8010168:	2b2a      	cmp	r3, #42	@ 0x2a
 801016a:	d134      	bne.n	80101d6 <_svfiprintf_r+0x18a>
 801016c:	9b07      	ldr	r3, [sp, #28]
 801016e:	3502      	adds	r5, #2
 8010170:	1d1a      	adds	r2, r3, #4
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	9207      	str	r2, [sp, #28]
 8010176:	2b00      	cmp	r3, #0
 8010178:	da01      	bge.n	801017e <_svfiprintf_r+0x132>
 801017a:	2301      	movs	r3, #1
 801017c:	425b      	negs	r3, r3
 801017e:	9309      	str	r3, [sp, #36]	@ 0x24
 8010180:	4e2d      	ldr	r6, [pc, #180]	@ (8010238 <_svfiprintf_r+0x1ec>)
 8010182:	2203      	movs	r2, #3
 8010184:	0030      	movs	r0, r6
 8010186:	7829      	ldrb	r1, [r5, #0]
 8010188:	f000 fc98 	bl	8010abc <memchr>
 801018c:	2800      	cmp	r0, #0
 801018e:	d006      	beq.n	801019e <_svfiprintf_r+0x152>
 8010190:	2340      	movs	r3, #64	@ 0x40
 8010192:	1b80      	subs	r0, r0, r6
 8010194:	4083      	lsls	r3, r0
 8010196:	6822      	ldr	r2, [r4, #0]
 8010198:	3501      	adds	r5, #1
 801019a:	4313      	orrs	r3, r2
 801019c:	6023      	str	r3, [r4, #0]
 801019e:	7829      	ldrb	r1, [r5, #0]
 80101a0:	2206      	movs	r2, #6
 80101a2:	4826      	ldr	r0, [pc, #152]	@ (801023c <_svfiprintf_r+0x1f0>)
 80101a4:	1c6e      	adds	r6, r5, #1
 80101a6:	7621      	strb	r1, [r4, #24]
 80101a8:	f000 fc88 	bl	8010abc <memchr>
 80101ac:	2800      	cmp	r0, #0
 80101ae:	d038      	beq.n	8010222 <_svfiprintf_r+0x1d6>
 80101b0:	4b23      	ldr	r3, [pc, #140]	@ (8010240 <_svfiprintf_r+0x1f4>)
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d122      	bne.n	80101fc <_svfiprintf_r+0x1b0>
 80101b6:	2207      	movs	r2, #7
 80101b8:	9b07      	ldr	r3, [sp, #28]
 80101ba:	3307      	adds	r3, #7
 80101bc:	4393      	bics	r3, r2
 80101be:	3308      	adds	r3, #8
 80101c0:	9307      	str	r3, [sp, #28]
 80101c2:	6963      	ldr	r3, [r4, #20]
 80101c4:	9a04      	ldr	r2, [sp, #16]
 80101c6:	189b      	adds	r3, r3, r2
 80101c8:	6163      	str	r3, [r4, #20]
 80101ca:	e762      	b.n	8010092 <_svfiprintf_r+0x46>
 80101cc:	4343      	muls	r3, r0
 80101ce:	0035      	movs	r5, r6
 80101d0:	2101      	movs	r1, #1
 80101d2:	189b      	adds	r3, r3, r2
 80101d4:	e7a4      	b.n	8010120 <_svfiprintf_r+0xd4>
 80101d6:	2300      	movs	r3, #0
 80101d8:	200a      	movs	r0, #10
 80101da:	0019      	movs	r1, r3
 80101dc:	3501      	adds	r5, #1
 80101de:	6063      	str	r3, [r4, #4]
 80101e0:	782a      	ldrb	r2, [r5, #0]
 80101e2:	1c6e      	adds	r6, r5, #1
 80101e4:	3a30      	subs	r2, #48	@ 0x30
 80101e6:	2a09      	cmp	r2, #9
 80101e8:	d903      	bls.n	80101f2 <_svfiprintf_r+0x1a6>
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d0c8      	beq.n	8010180 <_svfiprintf_r+0x134>
 80101ee:	9109      	str	r1, [sp, #36]	@ 0x24
 80101f0:	e7c6      	b.n	8010180 <_svfiprintf_r+0x134>
 80101f2:	4341      	muls	r1, r0
 80101f4:	0035      	movs	r5, r6
 80101f6:	2301      	movs	r3, #1
 80101f8:	1889      	adds	r1, r1, r2
 80101fa:	e7f1      	b.n	80101e0 <_svfiprintf_r+0x194>
 80101fc:	aa07      	add	r2, sp, #28
 80101fe:	9200      	str	r2, [sp, #0]
 8010200:	0021      	movs	r1, r4
 8010202:	003a      	movs	r2, r7
 8010204:	4b0f      	ldr	r3, [pc, #60]	@ (8010244 <_svfiprintf_r+0x1f8>)
 8010206:	9803      	ldr	r0, [sp, #12]
 8010208:	e000      	b.n	801020c <_svfiprintf_r+0x1c0>
 801020a:	bf00      	nop
 801020c:	9004      	str	r0, [sp, #16]
 801020e:	9b04      	ldr	r3, [sp, #16]
 8010210:	3301      	adds	r3, #1
 8010212:	d1d6      	bne.n	80101c2 <_svfiprintf_r+0x176>
 8010214:	89bb      	ldrh	r3, [r7, #12]
 8010216:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8010218:	065b      	lsls	r3, r3, #25
 801021a:	d500      	bpl.n	801021e <_svfiprintf_r+0x1d2>
 801021c:	e72c      	b.n	8010078 <_svfiprintf_r+0x2c>
 801021e:	b021      	add	sp, #132	@ 0x84
 8010220:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010222:	aa07      	add	r2, sp, #28
 8010224:	9200      	str	r2, [sp, #0]
 8010226:	0021      	movs	r1, r4
 8010228:	003a      	movs	r2, r7
 801022a:	4b06      	ldr	r3, [pc, #24]	@ (8010244 <_svfiprintf_r+0x1f8>)
 801022c:	9803      	ldr	r0, [sp, #12]
 801022e:	f000 f9bf 	bl	80105b0 <_printf_i>
 8010232:	e7eb      	b.n	801020c <_svfiprintf_r+0x1c0>
 8010234:	0801c240 	.word	0x0801c240
 8010238:	0801c246 	.word	0x0801c246
 801023c:	0801c24a 	.word	0x0801c24a
 8010240:	00000000 	.word	0x00000000
 8010244:	0800ff8d 	.word	0x0800ff8d

08010248 <__sfputc_r>:
 8010248:	6893      	ldr	r3, [r2, #8]
 801024a:	b510      	push	{r4, lr}
 801024c:	3b01      	subs	r3, #1
 801024e:	6093      	str	r3, [r2, #8]
 8010250:	2b00      	cmp	r3, #0
 8010252:	da04      	bge.n	801025e <__sfputc_r+0x16>
 8010254:	6994      	ldr	r4, [r2, #24]
 8010256:	42a3      	cmp	r3, r4
 8010258:	db07      	blt.n	801026a <__sfputc_r+0x22>
 801025a:	290a      	cmp	r1, #10
 801025c:	d005      	beq.n	801026a <__sfputc_r+0x22>
 801025e:	6813      	ldr	r3, [r2, #0]
 8010260:	1c58      	adds	r0, r3, #1
 8010262:	6010      	str	r0, [r2, #0]
 8010264:	7019      	strb	r1, [r3, #0]
 8010266:	0008      	movs	r0, r1
 8010268:	bd10      	pop	{r4, pc}
 801026a:	f000 fb60 	bl	801092e <__swbuf_r>
 801026e:	0001      	movs	r1, r0
 8010270:	e7f9      	b.n	8010266 <__sfputc_r+0x1e>

08010272 <__sfputs_r>:
 8010272:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010274:	0006      	movs	r6, r0
 8010276:	000f      	movs	r7, r1
 8010278:	0014      	movs	r4, r2
 801027a:	18d5      	adds	r5, r2, r3
 801027c:	42ac      	cmp	r4, r5
 801027e:	d101      	bne.n	8010284 <__sfputs_r+0x12>
 8010280:	2000      	movs	r0, #0
 8010282:	e007      	b.n	8010294 <__sfputs_r+0x22>
 8010284:	7821      	ldrb	r1, [r4, #0]
 8010286:	003a      	movs	r2, r7
 8010288:	0030      	movs	r0, r6
 801028a:	f7ff ffdd 	bl	8010248 <__sfputc_r>
 801028e:	3401      	adds	r4, #1
 8010290:	1c43      	adds	r3, r0, #1
 8010292:	d1f3      	bne.n	801027c <__sfputs_r+0xa>
 8010294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010298 <_vfiprintf_r>:
 8010298:	b5f0      	push	{r4, r5, r6, r7, lr}
 801029a:	b0a1      	sub	sp, #132	@ 0x84
 801029c:	000f      	movs	r7, r1
 801029e:	0015      	movs	r5, r2
 80102a0:	001e      	movs	r6, r3
 80102a2:	9003      	str	r0, [sp, #12]
 80102a4:	2800      	cmp	r0, #0
 80102a6:	d004      	beq.n	80102b2 <_vfiprintf_r+0x1a>
 80102a8:	6a03      	ldr	r3, [r0, #32]
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d101      	bne.n	80102b2 <_vfiprintf_r+0x1a>
 80102ae:	f7fe fbe9 	bl	800ea84 <__sinit>
 80102b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80102b4:	07db      	lsls	r3, r3, #31
 80102b6:	d405      	bmi.n	80102c4 <_vfiprintf_r+0x2c>
 80102b8:	89bb      	ldrh	r3, [r7, #12]
 80102ba:	059b      	lsls	r3, r3, #22
 80102bc:	d402      	bmi.n	80102c4 <_vfiprintf_r+0x2c>
 80102be:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80102c0:	f7fe fd13 	bl	800ecea <__retarget_lock_acquire_recursive>
 80102c4:	89bb      	ldrh	r3, [r7, #12]
 80102c6:	071b      	lsls	r3, r3, #28
 80102c8:	d502      	bpl.n	80102d0 <_vfiprintf_r+0x38>
 80102ca:	693b      	ldr	r3, [r7, #16]
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	d113      	bne.n	80102f8 <_vfiprintf_r+0x60>
 80102d0:	0039      	movs	r1, r7
 80102d2:	9803      	ldr	r0, [sp, #12]
 80102d4:	f000 fb6e 	bl	80109b4 <__swsetup_r>
 80102d8:	2800      	cmp	r0, #0
 80102da:	d00d      	beq.n	80102f8 <_vfiprintf_r+0x60>
 80102dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80102de:	07db      	lsls	r3, r3, #31
 80102e0:	d503      	bpl.n	80102ea <_vfiprintf_r+0x52>
 80102e2:	2001      	movs	r0, #1
 80102e4:	4240      	negs	r0, r0
 80102e6:	b021      	add	sp, #132	@ 0x84
 80102e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80102ea:	89bb      	ldrh	r3, [r7, #12]
 80102ec:	059b      	lsls	r3, r3, #22
 80102ee:	d4f8      	bmi.n	80102e2 <_vfiprintf_r+0x4a>
 80102f0:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80102f2:	f7fe fcfb 	bl	800ecec <__retarget_lock_release_recursive>
 80102f6:	e7f4      	b.n	80102e2 <_vfiprintf_r+0x4a>
 80102f8:	2300      	movs	r3, #0
 80102fa:	ac08      	add	r4, sp, #32
 80102fc:	6163      	str	r3, [r4, #20]
 80102fe:	3320      	adds	r3, #32
 8010300:	7663      	strb	r3, [r4, #25]
 8010302:	3310      	adds	r3, #16
 8010304:	76a3      	strb	r3, [r4, #26]
 8010306:	9607      	str	r6, [sp, #28]
 8010308:	002e      	movs	r6, r5
 801030a:	7833      	ldrb	r3, [r6, #0]
 801030c:	2b00      	cmp	r3, #0
 801030e:	d001      	beq.n	8010314 <_vfiprintf_r+0x7c>
 8010310:	2b25      	cmp	r3, #37	@ 0x25
 8010312:	d148      	bne.n	80103a6 <_vfiprintf_r+0x10e>
 8010314:	1b73      	subs	r3, r6, r5
 8010316:	9305      	str	r3, [sp, #20]
 8010318:	42ae      	cmp	r6, r5
 801031a:	d00b      	beq.n	8010334 <_vfiprintf_r+0x9c>
 801031c:	002a      	movs	r2, r5
 801031e:	0039      	movs	r1, r7
 8010320:	9803      	ldr	r0, [sp, #12]
 8010322:	f7ff ffa6 	bl	8010272 <__sfputs_r>
 8010326:	3001      	adds	r0, #1
 8010328:	d100      	bne.n	801032c <_vfiprintf_r+0x94>
 801032a:	e0ae      	b.n	801048a <_vfiprintf_r+0x1f2>
 801032c:	6963      	ldr	r3, [r4, #20]
 801032e:	9a05      	ldr	r2, [sp, #20]
 8010330:	189b      	adds	r3, r3, r2
 8010332:	6163      	str	r3, [r4, #20]
 8010334:	7833      	ldrb	r3, [r6, #0]
 8010336:	2b00      	cmp	r3, #0
 8010338:	d100      	bne.n	801033c <_vfiprintf_r+0xa4>
 801033a:	e0a6      	b.n	801048a <_vfiprintf_r+0x1f2>
 801033c:	2201      	movs	r2, #1
 801033e:	2300      	movs	r3, #0
 8010340:	4252      	negs	r2, r2
 8010342:	6062      	str	r2, [r4, #4]
 8010344:	a904      	add	r1, sp, #16
 8010346:	3254      	adds	r2, #84	@ 0x54
 8010348:	1852      	adds	r2, r2, r1
 801034a:	1c75      	adds	r5, r6, #1
 801034c:	6023      	str	r3, [r4, #0]
 801034e:	60e3      	str	r3, [r4, #12]
 8010350:	60a3      	str	r3, [r4, #8]
 8010352:	7013      	strb	r3, [r2, #0]
 8010354:	65a3      	str	r3, [r4, #88]	@ 0x58
 8010356:	4b59      	ldr	r3, [pc, #356]	@ (80104bc <_vfiprintf_r+0x224>)
 8010358:	2205      	movs	r2, #5
 801035a:	0018      	movs	r0, r3
 801035c:	7829      	ldrb	r1, [r5, #0]
 801035e:	9305      	str	r3, [sp, #20]
 8010360:	f000 fbac 	bl	8010abc <memchr>
 8010364:	1c6e      	adds	r6, r5, #1
 8010366:	2800      	cmp	r0, #0
 8010368:	d11f      	bne.n	80103aa <_vfiprintf_r+0x112>
 801036a:	6822      	ldr	r2, [r4, #0]
 801036c:	06d3      	lsls	r3, r2, #27
 801036e:	d504      	bpl.n	801037a <_vfiprintf_r+0xe2>
 8010370:	2353      	movs	r3, #83	@ 0x53
 8010372:	a904      	add	r1, sp, #16
 8010374:	185b      	adds	r3, r3, r1
 8010376:	2120      	movs	r1, #32
 8010378:	7019      	strb	r1, [r3, #0]
 801037a:	0713      	lsls	r3, r2, #28
 801037c:	d504      	bpl.n	8010388 <_vfiprintf_r+0xf0>
 801037e:	2353      	movs	r3, #83	@ 0x53
 8010380:	a904      	add	r1, sp, #16
 8010382:	185b      	adds	r3, r3, r1
 8010384:	212b      	movs	r1, #43	@ 0x2b
 8010386:	7019      	strb	r1, [r3, #0]
 8010388:	782b      	ldrb	r3, [r5, #0]
 801038a:	2b2a      	cmp	r3, #42	@ 0x2a
 801038c:	d016      	beq.n	80103bc <_vfiprintf_r+0x124>
 801038e:	002e      	movs	r6, r5
 8010390:	2100      	movs	r1, #0
 8010392:	200a      	movs	r0, #10
 8010394:	68e3      	ldr	r3, [r4, #12]
 8010396:	7832      	ldrb	r2, [r6, #0]
 8010398:	1c75      	adds	r5, r6, #1
 801039a:	3a30      	subs	r2, #48	@ 0x30
 801039c:	2a09      	cmp	r2, #9
 801039e:	d950      	bls.n	8010442 <_vfiprintf_r+0x1aa>
 80103a0:	2900      	cmp	r1, #0
 80103a2:	d111      	bne.n	80103c8 <_vfiprintf_r+0x130>
 80103a4:	e017      	b.n	80103d6 <_vfiprintf_r+0x13e>
 80103a6:	3601      	adds	r6, #1
 80103a8:	e7af      	b.n	801030a <_vfiprintf_r+0x72>
 80103aa:	9b05      	ldr	r3, [sp, #20]
 80103ac:	6822      	ldr	r2, [r4, #0]
 80103ae:	1ac0      	subs	r0, r0, r3
 80103b0:	2301      	movs	r3, #1
 80103b2:	4083      	lsls	r3, r0
 80103b4:	4313      	orrs	r3, r2
 80103b6:	0035      	movs	r5, r6
 80103b8:	6023      	str	r3, [r4, #0]
 80103ba:	e7cc      	b.n	8010356 <_vfiprintf_r+0xbe>
 80103bc:	9b07      	ldr	r3, [sp, #28]
 80103be:	1d19      	adds	r1, r3, #4
 80103c0:	681b      	ldr	r3, [r3, #0]
 80103c2:	9107      	str	r1, [sp, #28]
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	db01      	blt.n	80103cc <_vfiprintf_r+0x134>
 80103c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80103ca:	e004      	b.n	80103d6 <_vfiprintf_r+0x13e>
 80103cc:	425b      	negs	r3, r3
 80103ce:	60e3      	str	r3, [r4, #12]
 80103d0:	2302      	movs	r3, #2
 80103d2:	4313      	orrs	r3, r2
 80103d4:	6023      	str	r3, [r4, #0]
 80103d6:	7833      	ldrb	r3, [r6, #0]
 80103d8:	2b2e      	cmp	r3, #46	@ 0x2e
 80103da:	d10c      	bne.n	80103f6 <_vfiprintf_r+0x15e>
 80103dc:	7873      	ldrb	r3, [r6, #1]
 80103de:	2b2a      	cmp	r3, #42	@ 0x2a
 80103e0:	d134      	bne.n	801044c <_vfiprintf_r+0x1b4>
 80103e2:	9b07      	ldr	r3, [sp, #28]
 80103e4:	3602      	adds	r6, #2
 80103e6:	1d1a      	adds	r2, r3, #4
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	9207      	str	r2, [sp, #28]
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	da01      	bge.n	80103f4 <_vfiprintf_r+0x15c>
 80103f0:	2301      	movs	r3, #1
 80103f2:	425b      	negs	r3, r3
 80103f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80103f6:	4d32      	ldr	r5, [pc, #200]	@ (80104c0 <_vfiprintf_r+0x228>)
 80103f8:	2203      	movs	r2, #3
 80103fa:	0028      	movs	r0, r5
 80103fc:	7831      	ldrb	r1, [r6, #0]
 80103fe:	f000 fb5d 	bl	8010abc <memchr>
 8010402:	2800      	cmp	r0, #0
 8010404:	d006      	beq.n	8010414 <_vfiprintf_r+0x17c>
 8010406:	2340      	movs	r3, #64	@ 0x40
 8010408:	1b40      	subs	r0, r0, r5
 801040a:	4083      	lsls	r3, r0
 801040c:	6822      	ldr	r2, [r4, #0]
 801040e:	3601      	adds	r6, #1
 8010410:	4313      	orrs	r3, r2
 8010412:	6023      	str	r3, [r4, #0]
 8010414:	7831      	ldrb	r1, [r6, #0]
 8010416:	2206      	movs	r2, #6
 8010418:	482a      	ldr	r0, [pc, #168]	@ (80104c4 <_vfiprintf_r+0x22c>)
 801041a:	1c75      	adds	r5, r6, #1
 801041c:	7621      	strb	r1, [r4, #24]
 801041e:	f000 fb4d 	bl	8010abc <memchr>
 8010422:	2800      	cmp	r0, #0
 8010424:	d040      	beq.n	80104a8 <_vfiprintf_r+0x210>
 8010426:	4b28      	ldr	r3, [pc, #160]	@ (80104c8 <_vfiprintf_r+0x230>)
 8010428:	2b00      	cmp	r3, #0
 801042a:	d122      	bne.n	8010472 <_vfiprintf_r+0x1da>
 801042c:	2207      	movs	r2, #7
 801042e:	9b07      	ldr	r3, [sp, #28]
 8010430:	3307      	adds	r3, #7
 8010432:	4393      	bics	r3, r2
 8010434:	3308      	adds	r3, #8
 8010436:	9307      	str	r3, [sp, #28]
 8010438:	6963      	ldr	r3, [r4, #20]
 801043a:	9a04      	ldr	r2, [sp, #16]
 801043c:	189b      	adds	r3, r3, r2
 801043e:	6163      	str	r3, [r4, #20]
 8010440:	e762      	b.n	8010308 <_vfiprintf_r+0x70>
 8010442:	4343      	muls	r3, r0
 8010444:	002e      	movs	r6, r5
 8010446:	2101      	movs	r1, #1
 8010448:	189b      	adds	r3, r3, r2
 801044a:	e7a4      	b.n	8010396 <_vfiprintf_r+0xfe>
 801044c:	2300      	movs	r3, #0
 801044e:	200a      	movs	r0, #10
 8010450:	0019      	movs	r1, r3
 8010452:	3601      	adds	r6, #1
 8010454:	6063      	str	r3, [r4, #4]
 8010456:	7832      	ldrb	r2, [r6, #0]
 8010458:	1c75      	adds	r5, r6, #1
 801045a:	3a30      	subs	r2, #48	@ 0x30
 801045c:	2a09      	cmp	r2, #9
 801045e:	d903      	bls.n	8010468 <_vfiprintf_r+0x1d0>
 8010460:	2b00      	cmp	r3, #0
 8010462:	d0c8      	beq.n	80103f6 <_vfiprintf_r+0x15e>
 8010464:	9109      	str	r1, [sp, #36]	@ 0x24
 8010466:	e7c6      	b.n	80103f6 <_vfiprintf_r+0x15e>
 8010468:	4341      	muls	r1, r0
 801046a:	002e      	movs	r6, r5
 801046c:	2301      	movs	r3, #1
 801046e:	1889      	adds	r1, r1, r2
 8010470:	e7f1      	b.n	8010456 <_vfiprintf_r+0x1be>
 8010472:	aa07      	add	r2, sp, #28
 8010474:	9200      	str	r2, [sp, #0]
 8010476:	0021      	movs	r1, r4
 8010478:	003a      	movs	r2, r7
 801047a:	4b14      	ldr	r3, [pc, #80]	@ (80104cc <_vfiprintf_r+0x234>)
 801047c:	9803      	ldr	r0, [sp, #12]
 801047e:	e000      	b.n	8010482 <_vfiprintf_r+0x1ea>
 8010480:	bf00      	nop
 8010482:	9004      	str	r0, [sp, #16]
 8010484:	9b04      	ldr	r3, [sp, #16]
 8010486:	3301      	adds	r3, #1
 8010488:	d1d6      	bne.n	8010438 <_vfiprintf_r+0x1a0>
 801048a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801048c:	07db      	lsls	r3, r3, #31
 801048e:	d405      	bmi.n	801049c <_vfiprintf_r+0x204>
 8010490:	89bb      	ldrh	r3, [r7, #12]
 8010492:	059b      	lsls	r3, r3, #22
 8010494:	d402      	bmi.n	801049c <_vfiprintf_r+0x204>
 8010496:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8010498:	f7fe fc28 	bl	800ecec <__retarget_lock_release_recursive>
 801049c:	89bb      	ldrh	r3, [r7, #12]
 801049e:	065b      	lsls	r3, r3, #25
 80104a0:	d500      	bpl.n	80104a4 <_vfiprintf_r+0x20c>
 80104a2:	e71e      	b.n	80102e2 <_vfiprintf_r+0x4a>
 80104a4:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80104a6:	e71e      	b.n	80102e6 <_vfiprintf_r+0x4e>
 80104a8:	aa07      	add	r2, sp, #28
 80104aa:	9200      	str	r2, [sp, #0]
 80104ac:	0021      	movs	r1, r4
 80104ae:	003a      	movs	r2, r7
 80104b0:	4b06      	ldr	r3, [pc, #24]	@ (80104cc <_vfiprintf_r+0x234>)
 80104b2:	9803      	ldr	r0, [sp, #12]
 80104b4:	f000 f87c 	bl	80105b0 <_printf_i>
 80104b8:	e7e3      	b.n	8010482 <_vfiprintf_r+0x1ea>
 80104ba:	46c0      	nop			@ (mov r8, r8)
 80104bc:	0801c240 	.word	0x0801c240
 80104c0:	0801c246 	.word	0x0801c246
 80104c4:	0801c24a 	.word	0x0801c24a
 80104c8:	00000000 	.word	0x00000000
 80104cc:	08010273 	.word	0x08010273

080104d0 <_printf_common>:
 80104d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80104d2:	0016      	movs	r6, r2
 80104d4:	9301      	str	r3, [sp, #4]
 80104d6:	688a      	ldr	r2, [r1, #8]
 80104d8:	690b      	ldr	r3, [r1, #16]
 80104da:	000c      	movs	r4, r1
 80104dc:	9000      	str	r0, [sp, #0]
 80104de:	4293      	cmp	r3, r2
 80104e0:	da00      	bge.n	80104e4 <_printf_common+0x14>
 80104e2:	0013      	movs	r3, r2
 80104e4:	0022      	movs	r2, r4
 80104e6:	6033      	str	r3, [r6, #0]
 80104e8:	3243      	adds	r2, #67	@ 0x43
 80104ea:	7812      	ldrb	r2, [r2, #0]
 80104ec:	2a00      	cmp	r2, #0
 80104ee:	d001      	beq.n	80104f4 <_printf_common+0x24>
 80104f0:	3301      	adds	r3, #1
 80104f2:	6033      	str	r3, [r6, #0]
 80104f4:	6823      	ldr	r3, [r4, #0]
 80104f6:	069b      	lsls	r3, r3, #26
 80104f8:	d502      	bpl.n	8010500 <_printf_common+0x30>
 80104fa:	6833      	ldr	r3, [r6, #0]
 80104fc:	3302      	adds	r3, #2
 80104fe:	6033      	str	r3, [r6, #0]
 8010500:	6822      	ldr	r2, [r4, #0]
 8010502:	2306      	movs	r3, #6
 8010504:	0015      	movs	r5, r2
 8010506:	401d      	ands	r5, r3
 8010508:	421a      	tst	r2, r3
 801050a:	d027      	beq.n	801055c <_printf_common+0x8c>
 801050c:	0023      	movs	r3, r4
 801050e:	3343      	adds	r3, #67	@ 0x43
 8010510:	781b      	ldrb	r3, [r3, #0]
 8010512:	1e5a      	subs	r2, r3, #1
 8010514:	4193      	sbcs	r3, r2
 8010516:	6822      	ldr	r2, [r4, #0]
 8010518:	0692      	lsls	r2, r2, #26
 801051a:	d430      	bmi.n	801057e <_printf_common+0xae>
 801051c:	0022      	movs	r2, r4
 801051e:	9901      	ldr	r1, [sp, #4]
 8010520:	9800      	ldr	r0, [sp, #0]
 8010522:	9d08      	ldr	r5, [sp, #32]
 8010524:	3243      	adds	r2, #67	@ 0x43
 8010526:	47a8      	blx	r5
 8010528:	3001      	adds	r0, #1
 801052a:	d025      	beq.n	8010578 <_printf_common+0xa8>
 801052c:	2206      	movs	r2, #6
 801052e:	6823      	ldr	r3, [r4, #0]
 8010530:	2500      	movs	r5, #0
 8010532:	4013      	ands	r3, r2
 8010534:	2b04      	cmp	r3, #4
 8010536:	d105      	bne.n	8010544 <_printf_common+0x74>
 8010538:	6833      	ldr	r3, [r6, #0]
 801053a:	68e5      	ldr	r5, [r4, #12]
 801053c:	1aed      	subs	r5, r5, r3
 801053e:	43eb      	mvns	r3, r5
 8010540:	17db      	asrs	r3, r3, #31
 8010542:	401d      	ands	r5, r3
 8010544:	68a3      	ldr	r3, [r4, #8]
 8010546:	6922      	ldr	r2, [r4, #16]
 8010548:	4293      	cmp	r3, r2
 801054a:	dd01      	ble.n	8010550 <_printf_common+0x80>
 801054c:	1a9b      	subs	r3, r3, r2
 801054e:	18ed      	adds	r5, r5, r3
 8010550:	2600      	movs	r6, #0
 8010552:	42b5      	cmp	r5, r6
 8010554:	d120      	bne.n	8010598 <_printf_common+0xc8>
 8010556:	2000      	movs	r0, #0
 8010558:	e010      	b.n	801057c <_printf_common+0xac>
 801055a:	3501      	adds	r5, #1
 801055c:	68e3      	ldr	r3, [r4, #12]
 801055e:	6832      	ldr	r2, [r6, #0]
 8010560:	1a9b      	subs	r3, r3, r2
 8010562:	42ab      	cmp	r3, r5
 8010564:	ddd2      	ble.n	801050c <_printf_common+0x3c>
 8010566:	0022      	movs	r2, r4
 8010568:	2301      	movs	r3, #1
 801056a:	9901      	ldr	r1, [sp, #4]
 801056c:	9800      	ldr	r0, [sp, #0]
 801056e:	9f08      	ldr	r7, [sp, #32]
 8010570:	3219      	adds	r2, #25
 8010572:	47b8      	blx	r7
 8010574:	3001      	adds	r0, #1
 8010576:	d1f0      	bne.n	801055a <_printf_common+0x8a>
 8010578:	2001      	movs	r0, #1
 801057a:	4240      	negs	r0, r0
 801057c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801057e:	2030      	movs	r0, #48	@ 0x30
 8010580:	18e1      	adds	r1, r4, r3
 8010582:	3143      	adds	r1, #67	@ 0x43
 8010584:	7008      	strb	r0, [r1, #0]
 8010586:	0021      	movs	r1, r4
 8010588:	1c5a      	adds	r2, r3, #1
 801058a:	3145      	adds	r1, #69	@ 0x45
 801058c:	7809      	ldrb	r1, [r1, #0]
 801058e:	18a2      	adds	r2, r4, r2
 8010590:	3243      	adds	r2, #67	@ 0x43
 8010592:	3302      	adds	r3, #2
 8010594:	7011      	strb	r1, [r2, #0]
 8010596:	e7c1      	b.n	801051c <_printf_common+0x4c>
 8010598:	0022      	movs	r2, r4
 801059a:	2301      	movs	r3, #1
 801059c:	9901      	ldr	r1, [sp, #4]
 801059e:	9800      	ldr	r0, [sp, #0]
 80105a0:	9f08      	ldr	r7, [sp, #32]
 80105a2:	321a      	adds	r2, #26
 80105a4:	47b8      	blx	r7
 80105a6:	3001      	adds	r0, #1
 80105a8:	d0e6      	beq.n	8010578 <_printf_common+0xa8>
 80105aa:	3601      	adds	r6, #1
 80105ac:	e7d1      	b.n	8010552 <_printf_common+0x82>
	...

080105b0 <_printf_i>:
 80105b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80105b2:	b08b      	sub	sp, #44	@ 0x2c
 80105b4:	9206      	str	r2, [sp, #24]
 80105b6:	000a      	movs	r2, r1
 80105b8:	3243      	adds	r2, #67	@ 0x43
 80105ba:	9307      	str	r3, [sp, #28]
 80105bc:	9005      	str	r0, [sp, #20]
 80105be:	9203      	str	r2, [sp, #12]
 80105c0:	7e0a      	ldrb	r2, [r1, #24]
 80105c2:	000c      	movs	r4, r1
 80105c4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80105c6:	2a78      	cmp	r2, #120	@ 0x78
 80105c8:	d809      	bhi.n	80105de <_printf_i+0x2e>
 80105ca:	2a62      	cmp	r2, #98	@ 0x62
 80105cc:	d80b      	bhi.n	80105e6 <_printf_i+0x36>
 80105ce:	2a00      	cmp	r2, #0
 80105d0:	d100      	bne.n	80105d4 <_printf_i+0x24>
 80105d2:	e0bc      	b.n	801074e <_printf_i+0x19e>
 80105d4:	497b      	ldr	r1, [pc, #492]	@ (80107c4 <_printf_i+0x214>)
 80105d6:	9104      	str	r1, [sp, #16]
 80105d8:	2a58      	cmp	r2, #88	@ 0x58
 80105da:	d100      	bne.n	80105de <_printf_i+0x2e>
 80105dc:	e090      	b.n	8010700 <_printf_i+0x150>
 80105de:	0025      	movs	r5, r4
 80105e0:	3542      	adds	r5, #66	@ 0x42
 80105e2:	702a      	strb	r2, [r5, #0]
 80105e4:	e022      	b.n	801062c <_printf_i+0x7c>
 80105e6:	0010      	movs	r0, r2
 80105e8:	3863      	subs	r0, #99	@ 0x63
 80105ea:	2815      	cmp	r0, #21
 80105ec:	d8f7      	bhi.n	80105de <_printf_i+0x2e>
 80105ee:	f7ef fda7 	bl	8000140 <__gnu_thumb1_case_shi>
 80105f2:	0016      	.short	0x0016
 80105f4:	fff6001f 	.word	0xfff6001f
 80105f8:	fff6fff6 	.word	0xfff6fff6
 80105fc:	001ffff6 	.word	0x001ffff6
 8010600:	fff6fff6 	.word	0xfff6fff6
 8010604:	fff6fff6 	.word	0xfff6fff6
 8010608:	003600a1 	.word	0x003600a1
 801060c:	fff60080 	.word	0xfff60080
 8010610:	00b2fff6 	.word	0x00b2fff6
 8010614:	0036fff6 	.word	0x0036fff6
 8010618:	fff6fff6 	.word	0xfff6fff6
 801061c:	0084      	.short	0x0084
 801061e:	0025      	movs	r5, r4
 8010620:	681a      	ldr	r2, [r3, #0]
 8010622:	3542      	adds	r5, #66	@ 0x42
 8010624:	1d11      	adds	r1, r2, #4
 8010626:	6019      	str	r1, [r3, #0]
 8010628:	6813      	ldr	r3, [r2, #0]
 801062a:	702b      	strb	r3, [r5, #0]
 801062c:	2301      	movs	r3, #1
 801062e:	e0a0      	b.n	8010772 <_printf_i+0x1c2>
 8010630:	6818      	ldr	r0, [r3, #0]
 8010632:	6809      	ldr	r1, [r1, #0]
 8010634:	1d02      	adds	r2, r0, #4
 8010636:	060d      	lsls	r5, r1, #24
 8010638:	d50b      	bpl.n	8010652 <_printf_i+0xa2>
 801063a:	6806      	ldr	r6, [r0, #0]
 801063c:	601a      	str	r2, [r3, #0]
 801063e:	2e00      	cmp	r6, #0
 8010640:	da03      	bge.n	801064a <_printf_i+0x9a>
 8010642:	232d      	movs	r3, #45	@ 0x2d
 8010644:	9a03      	ldr	r2, [sp, #12]
 8010646:	4276      	negs	r6, r6
 8010648:	7013      	strb	r3, [r2, #0]
 801064a:	4b5e      	ldr	r3, [pc, #376]	@ (80107c4 <_printf_i+0x214>)
 801064c:	270a      	movs	r7, #10
 801064e:	9304      	str	r3, [sp, #16]
 8010650:	e018      	b.n	8010684 <_printf_i+0xd4>
 8010652:	6806      	ldr	r6, [r0, #0]
 8010654:	601a      	str	r2, [r3, #0]
 8010656:	0649      	lsls	r1, r1, #25
 8010658:	d5f1      	bpl.n	801063e <_printf_i+0x8e>
 801065a:	b236      	sxth	r6, r6
 801065c:	e7ef      	b.n	801063e <_printf_i+0x8e>
 801065e:	6808      	ldr	r0, [r1, #0]
 8010660:	6819      	ldr	r1, [r3, #0]
 8010662:	c940      	ldmia	r1!, {r6}
 8010664:	0605      	lsls	r5, r0, #24
 8010666:	d402      	bmi.n	801066e <_printf_i+0xbe>
 8010668:	0640      	lsls	r0, r0, #25
 801066a:	d500      	bpl.n	801066e <_printf_i+0xbe>
 801066c:	b2b6      	uxth	r6, r6
 801066e:	6019      	str	r1, [r3, #0]
 8010670:	4b54      	ldr	r3, [pc, #336]	@ (80107c4 <_printf_i+0x214>)
 8010672:	270a      	movs	r7, #10
 8010674:	9304      	str	r3, [sp, #16]
 8010676:	2a6f      	cmp	r2, #111	@ 0x6f
 8010678:	d100      	bne.n	801067c <_printf_i+0xcc>
 801067a:	3f02      	subs	r7, #2
 801067c:	0023      	movs	r3, r4
 801067e:	2200      	movs	r2, #0
 8010680:	3343      	adds	r3, #67	@ 0x43
 8010682:	701a      	strb	r2, [r3, #0]
 8010684:	6863      	ldr	r3, [r4, #4]
 8010686:	60a3      	str	r3, [r4, #8]
 8010688:	2b00      	cmp	r3, #0
 801068a:	db03      	blt.n	8010694 <_printf_i+0xe4>
 801068c:	2104      	movs	r1, #4
 801068e:	6822      	ldr	r2, [r4, #0]
 8010690:	438a      	bics	r2, r1
 8010692:	6022      	str	r2, [r4, #0]
 8010694:	2e00      	cmp	r6, #0
 8010696:	d102      	bne.n	801069e <_printf_i+0xee>
 8010698:	9d03      	ldr	r5, [sp, #12]
 801069a:	2b00      	cmp	r3, #0
 801069c:	d00c      	beq.n	80106b8 <_printf_i+0x108>
 801069e:	9d03      	ldr	r5, [sp, #12]
 80106a0:	0030      	movs	r0, r6
 80106a2:	0039      	movs	r1, r7
 80106a4:	f7ef fddc 	bl	8000260 <__aeabi_uidivmod>
 80106a8:	9b04      	ldr	r3, [sp, #16]
 80106aa:	3d01      	subs	r5, #1
 80106ac:	5c5b      	ldrb	r3, [r3, r1]
 80106ae:	702b      	strb	r3, [r5, #0]
 80106b0:	0033      	movs	r3, r6
 80106b2:	0006      	movs	r6, r0
 80106b4:	429f      	cmp	r7, r3
 80106b6:	d9f3      	bls.n	80106a0 <_printf_i+0xf0>
 80106b8:	2f08      	cmp	r7, #8
 80106ba:	d109      	bne.n	80106d0 <_printf_i+0x120>
 80106bc:	6823      	ldr	r3, [r4, #0]
 80106be:	07db      	lsls	r3, r3, #31
 80106c0:	d506      	bpl.n	80106d0 <_printf_i+0x120>
 80106c2:	6862      	ldr	r2, [r4, #4]
 80106c4:	6923      	ldr	r3, [r4, #16]
 80106c6:	429a      	cmp	r2, r3
 80106c8:	dc02      	bgt.n	80106d0 <_printf_i+0x120>
 80106ca:	2330      	movs	r3, #48	@ 0x30
 80106cc:	3d01      	subs	r5, #1
 80106ce:	702b      	strb	r3, [r5, #0]
 80106d0:	9b03      	ldr	r3, [sp, #12]
 80106d2:	1b5b      	subs	r3, r3, r5
 80106d4:	6123      	str	r3, [r4, #16]
 80106d6:	9b07      	ldr	r3, [sp, #28]
 80106d8:	0021      	movs	r1, r4
 80106da:	9300      	str	r3, [sp, #0]
 80106dc:	9805      	ldr	r0, [sp, #20]
 80106de:	9b06      	ldr	r3, [sp, #24]
 80106e0:	aa09      	add	r2, sp, #36	@ 0x24
 80106e2:	f7ff fef5 	bl	80104d0 <_printf_common>
 80106e6:	3001      	adds	r0, #1
 80106e8:	d148      	bne.n	801077c <_printf_i+0x1cc>
 80106ea:	2001      	movs	r0, #1
 80106ec:	4240      	negs	r0, r0
 80106ee:	b00b      	add	sp, #44	@ 0x2c
 80106f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80106f2:	2220      	movs	r2, #32
 80106f4:	6809      	ldr	r1, [r1, #0]
 80106f6:	430a      	orrs	r2, r1
 80106f8:	6022      	str	r2, [r4, #0]
 80106fa:	2278      	movs	r2, #120	@ 0x78
 80106fc:	4932      	ldr	r1, [pc, #200]	@ (80107c8 <_printf_i+0x218>)
 80106fe:	9104      	str	r1, [sp, #16]
 8010700:	0021      	movs	r1, r4
 8010702:	3145      	adds	r1, #69	@ 0x45
 8010704:	700a      	strb	r2, [r1, #0]
 8010706:	6819      	ldr	r1, [r3, #0]
 8010708:	6822      	ldr	r2, [r4, #0]
 801070a:	c940      	ldmia	r1!, {r6}
 801070c:	0610      	lsls	r0, r2, #24
 801070e:	d402      	bmi.n	8010716 <_printf_i+0x166>
 8010710:	0650      	lsls	r0, r2, #25
 8010712:	d500      	bpl.n	8010716 <_printf_i+0x166>
 8010714:	b2b6      	uxth	r6, r6
 8010716:	6019      	str	r1, [r3, #0]
 8010718:	07d3      	lsls	r3, r2, #31
 801071a:	d502      	bpl.n	8010722 <_printf_i+0x172>
 801071c:	2320      	movs	r3, #32
 801071e:	4313      	orrs	r3, r2
 8010720:	6023      	str	r3, [r4, #0]
 8010722:	2e00      	cmp	r6, #0
 8010724:	d001      	beq.n	801072a <_printf_i+0x17a>
 8010726:	2710      	movs	r7, #16
 8010728:	e7a8      	b.n	801067c <_printf_i+0xcc>
 801072a:	2220      	movs	r2, #32
 801072c:	6823      	ldr	r3, [r4, #0]
 801072e:	4393      	bics	r3, r2
 8010730:	6023      	str	r3, [r4, #0]
 8010732:	e7f8      	b.n	8010726 <_printf_i+0x176>
 8010734:	681a      	ldr	r2, [r3, #0]
 8010736:	680d      	ldr	r5, [r1, #0]
 8010738:	1d10      	adds	r0, r2, #4
 801073a:	6949      	ldr	r1, [r1, #20]
 801073c:	6018      	str	r0, [r3, #0]
 801073e:	6813      	ldr	r3, [r2, #0]
 8010740:	062e      	lsls	r6, r5, #24
 8010742:	d501      	bpl.n	8010748 <_printf_i+0x198>
 8010744:	6019      	str	r1, [r3, #0]
 8010746:	e002      	b.n	801074e <_printf_i+0x19e>
 8010748:	066d      	lsls	r5, r5, #25
 801074a:	d5fb      	bpl.n	8010744 <_printf_i+0x194>
 801074c:	8019      	strh	r1, [r3, #0]
 801074e:	2300      	movs	r3, #0
 8010750:	9d03      	ldr	r5, [sp, #12]
 8010752:	6123      	str	r3, [r4, #16]
 8010754:	e7bf      	b.n	80106d6 <_printf_i+0x126>
 8010756:	681a      	ldr	r2, [r3, #0]
 8010758:	1d11      	adds	r1, r2, #4
 801075a:	6019      	str	r1, [r3, #0]
 801075c:	6815      	ldr	r5, [r2, #0]
 801075e:	2100      	movs	r1, #0
 8010760:	0028      	movs	r0, r5
 8010762:	6862      	ldr	r2, [r4, #4]
 8010764:	f000 f9aa 	bl	8010abc <memchr>
 8010768:	2800      	cmp	r0, #0
 801076a:	d001      	beq.n	8010770 <_printf_i+0x1c0>
 801076c:	1b40      	subs	r0, r0, r5
 801076e:	6060      	str	r0, [r4, #4]
 8010770:	6863      	ldr	r3, [r4, #4]
 8010772:	6123      	str	r3, [r4, #16]
 8010774:	2300      	movs	r3, #0
 8010776:	9a03      	ldr	r2, [sp, #12]
 8010778:	7013      	strb	r3, [r2, #0]
 801077a:	e7ac      	b.n	80106d6 <_printf_i+0x126>
 801077c:	002a      	movs	r2, r5
 801077e:	6923      	ldr	r3, [r4, #16]
 8010780:	9906      	ldr	r1, [sp, #24]
 8010782:	9805      	ldr	r0, [sp, #20]
 8010784:	9d07      	ldr	r5, [sp, #28]
 8010786:	47a8      	blx	r5
 8010788:	3001      	adds	r0, #1
 801078a:	d0ae      	beq.n	80106ea <_printf_i+0x13a>
 801078c:	6823      	ldr	r3, [r4, #0]
 801078e:	079b      	lsls	r3, r3, #30
 8010790:	d415      	bmi.n	80107be <_printf_i+0x20e>
 8010792:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010794:	68e0      	ldr	r0, [r4, #12]
 8010796:	4298      	cmp	r0, r3
 8010798:	daa9      	bge.n	80106ee <_printf_i+0x13e>
 801079a:	0018      	movs	r0, r3
 801079c:	e7a7      	b.n	80106ee <_printf_i+0x13e>
 801079e:	0022      	movs	r2, r4
 80107a0:	2301      	movs	r3, #1
 80107a2:	9906      	ldr	r1, [sp, #24]
 80107a4:	9805      	ldr	r0, [sp, #20]
 80107a6:	9e07      	ldr	r6, [sp, #28]
 80107a8:	3219      	adds	r2, #25
 80107aa:	47b0      	blx	r6
 80107ac:	3001      	adds	r0, #1
 80107ae:	d09c      	beq.n	80106ea <_printf_i+0x13a>
 80107b0:	3501      	adds	r5, #1
 80107b2:	68e3      	ldr	r3, [r4, #12]
 80107b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80107b6:	1a9b      	subs	r3, r3, r2
 80107b8:	42ab      	cmp	r3, r5
 80107ba:	dcf0      	bgt.n	801079e <_printf_i+0x1ee>
 80107bc:	e7e9      	b.n	8010792 <_printf_i+0x1e2>
 80107be:	2500      	movs	r5, #0
 80107c0:	e7f7      	b.n	80107b2 <_printf_i+0x202>
 80107c2:	46c0      	nop			@ (mov r8, r8)
 80107c4:	0801c251 	.word	0x0801c251
 80107c8:	0801c262 	.word	0x0801c262

080107cc <__sflush_r>:
 80107cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80107ce:	220c      	movs	r2, #12
 80107d0:	5e8b      	ldrsh	r3, [r1, r2]
 80107d2:	0005      	movs	r5, r0
 80107d4:	000c      	movs	r4, r1
 80107d6:	071a      	lsls	r2, r3, #28
 80107d8:	d456      	bmi.n	8010888 <__sflush_r+0xbc>
 80107da:	684a      	ldr	r2, [r1, #4]
 80107dc:	2a00      	cmp	r2, #0
 80107de:	dc02      	bgt.n	80107e6 <__sflush_r+0x1a>
 80107e0:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 80107e2:	2a00      	cmp	r2, #0
 80107e4:	dd4e      	ble.n	8010884 <__sflush_r+0xb8>
 80107e6:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80107e8:	2f00      	cmp	r7, #0
 80107ea:	d04b      	beq.n	8010884 <__sflush_r+0xb8>
 80107ec:	2200      	movs	r2, #0
 80107ee:	2080      	movs	r0, #128	@ 0x80
 80107f0:	682e      	ldr	r6, [r5, #0]
 80107f2:	602a      	str	r2, [r5, #0]
 80107f4:	001a      	movs	r2, r3
 80107f6:	0140      	lsls	r0, r0, #5
 80107f8:	6a21      	ldr	r1, [r4, #32]
 80107fa:	4002      	ands	r2, r0
 80107fc:	4203      	tst	r3, r0
 80107fe:	d033      	beq.n	8010868 <__sflush_r+0x9c>
 8010800:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010802:	89a3      	ldrh	r3, [r4, #12]
 8010804:	075b      	lsls	r3, r3, #29
 8010806:	d506      	bpl.n	8010816 <__sflush_r+0x4a>
 8010808:	6863      	ldr	r3, [r4, #4]
 801080a:	1ad2      	subs	r2, r2, r3
 801080c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801080e:	2b00      	cmp	r3, #0
 8010810:	d001      	beq.n	8010816 <__sflush_r+0x4a>
 8010812:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010814:	1ad2      	subs	r2, r2, r3
 8010816:	2300      	movs	r3, #0
 8010818:	0028      	movs	r0, r5
 801081a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 801081c:	6a21      	ldr	r1, [r4, #32]
 801081e:	47b8      	blx	r7
 8010820:	89a2      	ldrh	r2, [r4, #12]
 8010822:	1c43      	adds	r3, r0, #1
 8010824:	d106      	bne.n	8010834 <__sflush_r+0x68>
 8010826:	6829      	ldr	r1, [r5, #0]
 8010828:	291d      	cmp	r1, #29
 801082a:	d846      	bhi.n	80108ba <__sflush_r+0xee>
 801082c:	4b29      	ldr	r3, [pc, #164]	@ (80108d4 <__sflush_r+0x108>)
 801082e:	410b      	asrs	r3, r1
 8010830:	07db      	lsls	r3, r3, #31
 8010832:	d442      	bmi.n	80108ba <__sflush_r+0xee>
 8010834:	2300      	movs	r3, #0
 8010836:	6063      	str	r3, [r4, #4]
 8010838:	6923      	ldr	r3, [r4, #16]
 801083a:	6023      	str	r3, [r4, #0]
 801083c:	04d2      	lsls	r2, r2, #19
 801083e:	d505      	bpl.n	801084c <__sflush_r+0x80>
 8010840:	1c43      	adds	r3, r0, #1
 8010842:	d102      	bne.n	801084a <__sflush_r+0x7e>
 8010844:	682b      	ldr	r3, [r5, #0]
 8010846:	2b00      	cmp	r3, #0
 8010848:	d100      	bne.n	801084c <__sflush_r+0x80>
 801084a:	6560      	str	r0, [r4, #84]	@ 0x54
 801084c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801084e:	602e      	str	r6, [r5, #0]
 8010850:	2900      	cmp	r1, #0
 8010852:	d017      	beq.n	8010884 <__sflush_r+0xb8>
 8010854:	0023      	movs	r3, r4
 8010856:	3344      	adds	r3, #68	@ 0x44
 8010858:	4299      	cmp	r1, r3
 801085a:	d002      	beq.n	8010862 <__sflush_r+0x96>
 801085c:	0028      	movs	r0, r5
 801085e:	f7fe fa55 	bl	800ed0c <_free_r>
 8010862:	2300      	movs	r3, #0
 8010864:	6363      	str	r3, [r4, #52]	@ 0x34
 8010866:	e00d      	b.n	8010884 <__sflush_r+0xb8>
 8010868:	2301      	movs	r3, #1
 801086a:	0028      	movs	r0, r5
 801086c:	47b8      	blx	r7
 801086e:	0002      	movs	r2, r0
 8010870:	1c43      	adds	r3, r0, #1
 8010872:	d1c6      	bne.n	8010802 <__sflush_r+0x36>
 8010874:	682b      	ldr	r3, [r5, #0]
 8010876:	2b00      	cmp	r3, #0
 8010878:	d0c3      	beq.n	8010802 <__sflush_r+0x36>
 801087a:	2b1d      	cmp	r3, #29
 801087c:	d001      	beq.n	8010882 <__sflush_r+0xb6>
 801087e:	2b16      	cmp	r3, #22
 8010880:	d11a      	bne.n	80108b8 <__sflush_r+0xec>
 8010882:	602e      	str	r6, [r5, #0]
 8010884:	2000      	movs	r0, #0
 8010886:	e01e      	b.n	80108c6 <__sflush_r+0xfa>
 8010888:	690e      	ldr	r6, [r1, #16]
 801088a:	2e00      	cmp	r6, #0
 801088c:	d0fa      	beq.n	8010884 <__sflush_r+0xb8>
 801088e:	680f      	ldr	r7, [r1, #0]
 8010890:	600e      	str	r6, [r1, #0]
 8010892:	1bba      	subs	r2, r7, r6
 8010894:	9201      	str	r2, [sp, #4]
 8010896:	2200      	movs	r2, #0
 8010898:	079b      	lsls	r3, r3, #30
 801089a:	d100      	bne.n	801089e <__sflush_r+0xd2>
 801089c:	694a      	ldr	r2, [r1, #20]
 801089e:	60a2      	str	r2, [r4, #8]
 80108a0:	9b01      	ldr	r3, [sp, #4]
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	ddee      	ble.n	8010884 <__sflush_r+0xb8>
 80108a6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80108a8:	0032      	movs	r2, r6
 80108aa:	001f      	movs	r7, r3
 80108ac:	0028      	movs	r0, r5
 80108ae:	9b01      	ldr	r3, [sp, #4]
 80108b0:	6a21      	ldr	r1, [r4, #32]
 80108b2:	47b8      	blx	r7
 80108b4:	2800      	cmp	r0, #0
 80108b6:	dc07      	bgt.n	80108c8 <__sflush_r+0xfc>
 80108b8:	89a2      	ldrh	r2, [r4, #12]
 80108ba:	2340      	movs	r3, #64	@ 0x40
 80108bc:	2001      	movs	r0, #1
 80108be:	4313      	orrs	r3, r2
 80108c0:	b21b      	sxth	r3, r3
 80108c2:	81a3      	strh	r3, [r4, #12]
 80108c4:	4240      	negs	r0, r0
 80108c6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80108c8:	9b01      	ldr	r3, [sp, #4]
 80108ca:	1836      	adds	r6, r6, r0
 80108cc:	1a1b      	subs	r3, r3, r0
 80108ce:	9301      	str	r3, [sp, #4]
 80108d0:	e7e6      	b.n	80108a0 <__sflush_r+0xd4>
 80108d2:	46c0      	nop			@ (mov r8, r8)
 80108d4:	dfbffffe 	.word	0xdfbffffe

080108d8 <_fflush_r>:
 80108d8:	690b      	ldr	r3, [r1, #16]
 80108da:	b570      	push	{r4, r5, r6, lr}
 80108dc:	0005      	movs	r5, r0
 80108de:	000c      	movs	r4, r1
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d102      	bne.n	80108ea <_fflush_r+0x12>
 80108e4:	2500      	movs	r5, #0
 80108e6:	0028      	movs	r0, r5
 80108e8:	bd70      	pop	{r4, r5, r6, pc}
 80108ea:	2800      	cmp	r0, #0
 80108ec:	d004      	beq.n	80108f8 <_fflush_r+0x20>
 80108ee:	6a03      	ldr	r3, [r0, #32]
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d101      	bne.n	80108f8 <_fflush_r+0x20>
 80108f4:	f7fe f8c6 	bl	800ea84 <__sinit>
 80108f8:	220c      	movs	r2, #12
 80108fa:	5ea3      	ldrsh	r3, [r4, r2]
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d0f1      	beq.n	80108e4 <_fflush_r+0xc>
 8010900:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010902:	07d2      	lsls	r2, r2, #31
 8010904:	d404      	bmi.n	8010910 <_fflush_r+0x38>
 8010906:	059b      	lsls	r3, r3, #22
 8010908:	d402      	bmi.n	8010910 <_fflush_r+0x38>
 801090a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801090c:	f7fe f9ed 	bl	800ecea <__retarget_lock_acquire_recursive>
 8010910:	0028      	movs	r0, r5
 8010912:	0021      	movs	r1, r4
 8010914:	f7ff ff5a 	bl	80107cc <__sflush_r>
 8010918:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801091a:	0005      	movs	r5, r0
 801091c:	07db      	lsls	r3, r3, #31
 801091e:	d4e2      	bmi.n	80108e6 <_fflush_r+0xe>
 8010920:	89a3      	ldrh	r3, [r4, #12]
 8010922:	059b      	lsls	r3, r3, #22
 8010924:	d4df      	bmi.n	80108e6 <_fflush_r+0xe>
 8010926:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010928:	f7fe f9e0 	bl	800ecec <__retarget_lock_release_recursive>
 801092c:	e7db      	b.n	80108e6 <_fflush_r+0xe>

0801092e <__swbuf_r>:
 801092e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010930:	0006      	movs	r6, r0
 8010932:	000d      	movs	r5, r1
 8010934:	0014      	movs	r4, r2
 8010936:	2800      	cmp	r0, #0
 8010938:	d004      	beq.n	8010944 <__swbuf_r+0x16>
 801093a:	6a03      	ldr	r3, [r0, #32]
 801093c:	2b00      	cmp	r3, #0
 801093e:	d101      	bne.n	8010944 <__swbuf_r+0x16>
 8010940:	f7fe f8a0 	bl	800ea84 <__sinit>
 8010944:	69a3      	ldr	r3, [r4, #24]
 8010946:	60a3      	str	r3, [r4, #8]
 8010948:	89a3      	ldrh	r3, [r4, #12]
 801094a:	071b      	lsls	r3, r3, #28
 801094c:	d502      	bpl.n	8010954 <__swbuf_r+0x26>
 801094e:	6923      	ldr	r3, [r4, #16]
 8010950:	2b00      	cmp	r3, #0
 8010952:	d109      	bne.n	8010968 <__swbuf_r+0x3a>
 8010954:	0021      	movs	r1, r4
 8010956:	0030      	movs	r0, r6
 8010958:	f000 f82c 	bl	80109b4 <__swsetup_r>
 801095c:	2800      	cmp	r0, #0
 801095e:	d003      	beq.n	8010968 <__swbuf_r+0x3a>
 8010960:	2501      	movs	r5, #1
 8010962:	426d      	negs	r5, r5
 8010964:	0028      	movs	r0, r5
 8010966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010968:	6923      	ldr	r3, [r4, #16]
 801096a:	6820      	ldr	r0, [r4, #0]
 801096c:	b2ef      	uxtb	r7, r5
 801096e:	1ac0      	subs	r0, r0, r3
 8010970:	6963      	ldr	r3, [r4, #20]
 8010972:	b2ed      	uxtb	r5, r5
 8010974:	4283      	cmp	r3, r0
 8010976:	dc05      	bgt.n	8010984 <__swbuf_r+0x56>
 8010978:	0021      	movs	r1, r4
 801097a:	0030      	movs	r0, r6
 801097c:	f7ff ffac 	bl	80108d8 <_fflush_r>
 8010980:	2800      	cmp	r0, #0
 8010982:	d1ed      	bne.n	8010960 <__swbuf_r+0x32>
 8010984:	68a3      	ldr	r3, [r4, #8]
 8010986:	3001      	adds	r0, #1
 8010988:	3b01      	subs	r3, #1
 801098a:	60a3      	str	r3, [r4, #8]
 801098c:	6823      	ldr	r3, [r4, #0]
 801098e:	1c5a      	adds	r2, r3, #1
 8010990:	6022      	str	r2, [r4, #0]
 8010992:	701f      	strb	r7, [r3, #0]
 8010994:	6963      	ldr	r3, [r4, #20]
 8010996:	4283      	cmp	r3, r0
 8010998:	d004      	beq.n	80109a4 <__swbuf_r+0x76>
 801099a:	89a3      	ldrh	r3, [r4, #12]
 801099c:	07db      	lsls	r3, r3, #31
 801099e:	d5e1      	bpl.n	8010964 <__swbuf_r+0x36>
 80109a0:	2d0a      	cmp	r5, #10
 80109a2:	d1df      	bne.n	8010964 <__swbuf_r+0x36>
 80109a4:	0021      	movs	r1, r4
 80109a6:	0030      	movs	r0, r6
 80109a8:	f7ff ff96 	bl	80108d8 <_fflush_r>
 80109ac:	2800      	cmp	r0, #0
 80109ae:	d0d9      	beq.n	8010964 <__swbuf_r+0x36>
 80109b0:	e7d6      	b.n	8010960 <__swbuf_r+0x32>
	...

080109b4 <__swsetup_r>:
 80109b4:	4b2d      	ldr	r3, [pc, #180]	@ (8010a6c <__swsetup_r+0xb8>)
 80109b6:	b570      	push	{r4, r5, r6, lr}
 80109b8:	0005      	movs	r5, r0
 80109ba:	6818      	ldr	r0, [r3, #0]
 80109bc:	000c      	movs	r4, r1
 80109be:	2800      	cmp	r0, #0
 80109c0:	d004      	beq.n	80109cc <__swsetup_r+0x18>
 80109c2:	6a03      	ldr	r3, [r0, #32]
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d101      	bne.n	80109cc <__swsetup_r+0x18>
 80109c8:	f7fe f85c 	bl	800ea84 <__sinit>
 80109cc:	230c      	movs	r3, #12
 80109ce:	5ee2      	ldrsh	r2, [r4, r3]
 80109d0:	0713      	lsls	r3, r2, #28
 80109d2:	d423      	bmi.n	8010a1c <__swsetup_r+0x68>
 80109d4:	06d3      	lsls	r3, r2, #27
 80109d6:	d407      	bmi.n	80109e8 <__swsetup_r+0x34>
 80109d8:	2309      	movs	r3, #9
 80109da:	602b      	str	r3, [r5, #0]
 80109dc:	2340      	movs	r3, #64	@ 0x40
 80109de:	2001      	movs	r0, #1
 80109e0:	4313      	orrs	r3, r2
 80109e2:	81a3      	strh	r3, [r4, #12]
 80109e4:	4240      	negs	r0, r0
 80109e6:	e03a      	b.n	8010a5e <__swsetup_r+0xaa>
 80109e8:	0752      	lsls	r2, r2, #29
 80109ea:	d513      	bpl.n	8010a14 <__swsetup_r+0x60>
 80109ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80109ee:	2900      	cmp	r1, #0
 80109f0:	d008      	beq.n	8010a04 <__swsetup_r+0x50>
 80109f2:	0023      	movs	r3, r4
 80109f4:	3344      	adds	r3, #68	@ 0x44
 80109f6:	4299      	cmp	r1, r3
 80109f8:	d002      	beq.n	8010a00 <__swsetup_r+0x4c>
 80109fa:	0028      	movs	r0, r5
 80109fc:	f7fe f986 	bl	800ed0c <_free_r>
 8010a00:	2300      	movs	r3, #0
 8010a02:	6363      	str	r3, [r4, #52]	@ 0x34
 8010a04:	2224      	movs	r2, #36	@ 0x24
 8010a06:	89a3      	ldrh	r3, [r4, #12]
 8010a08:	4393      	bics	r3, r2
 8010a0a:	81a3      	strh	r3, [r4, #12]
 8010a0c:	2300      	movs	r3, #0
 8010a0e:	6063      	str	r3, [r4, #4]
 8010a10:	6923      	ldr	r3, [r4, #16]
 8010a12:	6023      	str	r3, [r4, #0]
 8010a14:	2308      	movs	r3, #8
 8010a16:	89a2      	ldrh	r2, [r4, #12]
 8010a18:	4313      	orrs	r3, r2
 8010a1a:	81a3      	strh	r3, [r4, #12]
 8010a1c:	6923      	ldr	r3, [r4, #16]
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d10b      	bne.n	8010a3a <__swsetup_r+0x86>
 8010a22:	21a0      	movs	r1, #160	@ 0xa0
 8010a24:	2280      	movs	r2, #128	@ 0x80
 8010a26:	89a3      	ldrh	r3, [r4, #12]
 8010a28:	0089      	lsls	r1, r1, #2
 8010a2a:	0092      	lsls	r2, r2, #2
 8010a2c:	400b      	ands	r3, r1
 8010a2e:	4293      	cmp	r3, r2
 8010a30:	d003      	beq.n	8010a3a <__swsetup_r+0x86>
 8010a32:	0021      	movs	r1, r4
 8010a34:	0028      	movs	r0, r5
 8010a36:	f000 f90d 	bl	8010c54 <__smakebuf_r>
 8010a3a:	230c      	movs	r3, #12
 8010a3c:	5ee2      	ldrsh	r2, [r4, r3]
 8010a3e:	2101      	movs	r1, #1
 8010a40:	0013      	movs	r3, r2
 8010a42:	400b      	ands	r3, r1
 8010a44:	420a      	tst	r2, r1
 8010a46:	d00b      	beq.n	8010a60 <__swsetup_r+0xac>
 8010a48:	2300      	movs	r3, #0
 8010a4a:	60a3      	str	r3, [r4, #8]
 8010a4c:	6963      	ldr	r3, [r4, #20]
 8010a4e:	425b      	negs	r3, r3
 8010a50:	61a3      	str	r3, [r4, #24]
 8010a52:	2000      	movs	r0, #0
 8010a54:	6923      	ldr	r3, [r4, #16]
 8010a56:	4283      	cmp	r3, r0
 8010a58:	d101      	bne.n	8010a5e <__swsetup_r+0xaa>
 8010a5a:	0613      	lsls	r3, r2, #24
 8010a5c:	d4be      	bmi.n	80109dc <__swsetup_r+0x28>
 8010a5e:	bd70      	pop	{r4, r5, r6, pc}
 8010a60:	0791      	lsls	r1, r2, #30
 8010a62:	d400      	bmi.n	8010a66 <__swsetup_r+0xb2>
 8010a64:	6963      	ldr	r3, [r4, #20]
 8010a66:	60a3      	str	r3, [r4, #8]
 8010a68:	e7f3      	b.n	8010a52 <__swsetup_r+0x9e>
 8010a6a:	46c0      	nop			@ (mov r8, r8)
 8010a6c:	20000188 	.word	0x20000188

08010a70 <memmove>:
 8010a70:	b510      	push	{r4, lr}
 8010a72:	4288      	cmp	r0, r1
 8010a74:	d806      	bhi.n	8010a84 <memmove+0x14>
 8010a76:	2300      	movs	r3, #0
 8010a78:	429a      	cmp	r2, r3
 8010a7a:	d008      	beq.n	8010a8e <memmove+0x1e>
 8010a7c:	5ccc      	ldrb	r4, [r1, r3]
 8010a7e:	54c4      	strb	r4, [r0, r3]
 8010a80:	3301      	adds	r3, #1
 8010a82:	e7f9      	b.n	8010a78 <memmove+0x8>
 8010a84:	188b      	adds	r3, r1, r2
 8010a86:	4298      	cmp	r0, r3
 8010a88:	d2f5      	bcs.n	8010a76 <memmove+0x6>
 8010a8a:	3a01      	subs	r2, #1
 8010a8c:	d200      	bcs.n	8010a90 <memmove+0x20>
 8010a8e:	bd10      	pop	{r4, pc}
 8010a90:	5c8b      	ldrb	r3, [r1, r2]
 8010a92:	5483      	strb	r3, [r0, r2]
 8010a94:	e7f9      	b.n	8010a8a <memmove+0x1a>
	...

08010a98 <_sbrk_r>:
 8010a98:	2300      	movs	r3, #0
 8010a9a:	b570      	push	{r4, r5, r6, lr}
 8010a9c:	4d06      	ldr	r5, [pc, #24]	@ (8010ab8 <_sbrk_r+0x20>)
 8010a9e:	0004      	movs	r4, r0
 8010aa0:	0008      	movs	r0, r1
 8010aa2:	602b      	str	r3, [r5, #0]
 8010aa4:	f7f7 faa0 	bl	8007fe8 <_sbrk>
 8010aa8:	1c43      	adds	r3, r0, #1
 8010aaa:	d103      	bne.n	8010ab4 <_sbrk_r+0x1c>
 8010aac:	682b      	ldr	r3, [r5, #0]
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d000      	beq.n	8010ab4 <_sbrk_r+0x1c>
 8010ab2:	6023      	str	r3, [r4, #0]
 8010ab4:	bd70      	pop	{r4, r5, r6, pc}
 8010ab6:	46c0      	nop			@ (mov r8, r8)
 8010ab8:	20001644 	.word	0x20001644

08010abc <memchr>:
 8010abc:	b2c9      	uxtb	r1, r1
 8010abe:	1882      	adds	r2, r0, r2
 8010ac0:	4290      	cmp	r0, r2
 8010ac2:	d101      	bne.n	8010ac8 <memchr+0xc>
 8010ac4:	2000      	movs	r0, #0
 8010ac6:	4770      	bx	lr
 8010ac8:	7803      	ldrb	r3, [r0, #0]
 8010aca:	428b      	cmp	r3, r1
 8010acc:	d0fb      	beq.n	8010ac6 <memchr+0xa>
 8010ace:	3001      	adds	r0, #1
 8010ad0:	e7f6      	b.n	8010ac0 <memchr+0x4>
	...

08010ad4 <__assert_func>:
 8010ad4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8010ad6:	0014      	movs	r4, r2
 8010ad8:	001a      	movs	r2, r3
 8010ada:	4b09      	ldr	r3, [pc, #36]	@ (8010b00 <__assert_func+0x2c>)
 8010adc:	0005      	movs	r5, r0
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	000e      	movs	r6, r1
 8010ae2:	68d8      	ldr	r0, [r3, #12]
 8010ae4:	4b07      	ldr	r3, [pc, #28]	@ (8010b04 <__assert_func+0x30>)
 8010ae6:	2c00      	cmp	r4, #0
 8010ae8:	d101      	bne.n	8010aee <__assert_func+0x1a>
 8010aea:	4b07      	ldr	r3, [pc, #28]	@ (8010b08 <__assert_func+0x34>)
 8010aec:	001c      	movs	r4, r3
 8010aee:	4907      	ldr	r1, [pc, #28]	@ (8010b0c <__assert_func+0x38>)
 8010af0:	9301      	str	r3, [sp, #4]
 8010af2:	9402      	str	r4, [sp, #8]
 8010af4:	002b      	movs	r3, r5
 8010af6:	9600      	str	r6, [sp, #0]
 8010af8:	f000 f872 	bl	8010be0 <fiprintf>
 8010afc:	f000 f910 	bl	8010d20 <abort>
 8010b00:	20000188 	.word	0x20000188
 8010b04:	0801c273 	.word	0x0801c273
 8010b08:	0801c2ae 	.word	0x0801c2ae
 8010b0c:	0801c280 	.word	0x0801c280

08010b10 <_calloc_r>:
 8010b10:	b570      	push	{r4, r5, r6, lr}
 8010b12:	0c0b      	lsrs	r3, r1, #16
 8010b14:	0c15      	lsrs	r5, r2, #16
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	d11e      	bne.n	8010b58 <_calloc_r+0x48>
 8010b1a:	2d00      	cmp	r5, #0
 8010b1c:	d10c      	bne.n	8010b38 <_calloc_r+0x28>
 8010b1e:	b289      	uxth	r1, r1
 8010b20:	b294      	uxth	r4, r2
 8010b22:	434c      	muls	r4, r1
 8010b24:	0021      	movs	r1, r4
 8010b26:	f7fe fcb7 	bl	800f498 <_malloc_r>
 8010b2a:	1e05      	subs	r5, r0, #0
 8010b2c:	d01a      	beq.n	8010b64 <_calloc_r+0x54>
 8010b2e:	0022      	movs	r2, r4
 8010b30:	2100      	movs	r1, #0
 8010b32:	f7fe f847 	bl	800ebc4 <memset>
 8010b36:	e016      	b.n	8010b66 <_calloc_r+0x56>
 8010b38:	1c2b      	adds	r3, r5, #0
 8010b3a:	1c0c      	adds	r4, r1, #0
 8010b3c:	b289      	uxth	r1, r1
 8010b3e:	b292      	uxth	r2, r2
 8010b40:	434a      	muls	r2, r1
 8010b42:	b29b      	uxth	r3, r3
 8010b44:	b2a1      	uxth	r1, r4
 8010b46:	4359      	muls	r1, r3
 8010b48:	0c14      	lsrs	r4, r2, #16
 8010b4a:	190c      	adds	r4, r1, r4
 8010b4c:	0c23      	lsrs	r3, r4, #16
 8010b4e:	d107      	bne.n	8010b60 <_calloc_r+0x50>
 8010b50:	0424      	lsls	r4, r4, #16
 8010b52:	b292      	uxth	r2, r2
 8010b54:	4314      	orrs	r4, r2
 8010b56:	e7e5      	b.n	8010b24 <_calloc_r+0x14>
 8010b58:	2d00      	cmp	r5, #0
 8010b5a:	d101      	bne.n	8010b60 <_calloc_r+0x50>
 8010b5c:	1c14      	adds	r4, r2, #0
 8010b5e:	e7ed      	b.n	8010b3c <_calloc_r+0x2c>
 8010b60:	230c      	movs	r3, #12
 8010b62:	6003      	str	r3, [r0, #0]
 8010b64:	2500      	movs	r5, #0
 8010b66:	0028      	movs	r0, r5
 8010b68:	bd70      	pop	{r4, r5, r6, pc}
	...

08010b6c <malloc>:
 8010b6c:	b510      	push	{r4, lr}
 8010b6e:	4b03      	ldr	r3, [pc, #12]	@ (8010b7c <malloc+0x10>)
 8010b70:	0001      	movs	r1, r0
 8010b72:	6818      	ldr	r0, [r3, #0]
 8010b74:	f7fe fc90 	bl	800f498 <_malloc_r>
 8010b78:	bd10      	pop	{r4, pc}
 8010b7a:	46c0      	nop			@ (mov r8, r8)
 8010b7c:	20000188 	.word	0x20000188

08010b80 <_realloc_r>:
 8010b80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010b82:	0006      	movs	r6, r0
 8010b84:	000c      	movs	r4, r1
 8010b86:	0015      	movs	r5, r2
 8010b88:	2900      	cmp	r1, #0
 8010b8a:	d105      	bne.n	8010b98 <_realloc_r+0x18>
 8010b8c:	0011      	movs	r1, r2
 8010b8e:	f7fe fc83 	bl	800f498 <_malloc_r>
 8010b92:	0004      	movs	r4, r0
 8010b94:	0020      	movs	r0, r4
 8010b96:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010b98:	2a00      	cmp	r2, #0
 8010b9a:	d103      	bne.n	8010ba4 <_realloc_r+0x24>
 8010b9c:	f7fe f8b6 	bl	800ed0c <_free_r>
 8010ba0:	2400      	movs	r4, #0
 8010ba2:	e7f7      	b.n	8010b94 <_realloc_r+0x14>
 8010ba4:	f000 f8c3 	bl	8010d2e <_malloc_usable_size_r>
 8010ba8:	0007      	movs	r7, r0
 8010baa:	4285      	cmp	r5, r0
 8010bac:	d802      	bhi.n	8010bb4 <_realloc_r+0x34>
 8010bae:	0843      	lsrs	r3, r0, #1
 8010bb0:	42ab      	cmp	r3, r5
 8010bb2:	d3ef      	bcc.n	8010b94 <_realloc_r+0x14>
 8010bb4:	0029      	movs	r1, r5
 8010bb6:	0030      	movs	r0, r6
 8010bb8:	f7fe fc6e 	bl	800f498 <_malloc_r>
 8010bbc:	9001      	str	r0, [sp, #4]
 8010bbe:	2800      	cmp	r0, #0
 8010bc0:	d0ee      	beq.n	8010ba0 <_realloc_r+0x20>
 8010bc2:	002a      	movs	r2, r5
 8010bc4:	42bd      	cmp	r5, r7
 8010bc6:	d900      	bls.n	8010bca <_realloc_r+0x4a>
 8010bc8:	003a      	movs	r2, r7
 8010bca:	0021      	movs	r1, r4
 8010bcc:	9801      	ldr	r0, [sp, #4]
 8010bce:	f7fe f88e 	bl	800ecee <memcpy>
 8010bd2:	0021      	movs	r1, r4
 8010bd4:	0030      	movs	r0, r6
 8010bd6:	f7fe f899 	bl	800ed0c <_free_r>
 8010bda:	9c01      	ldr	r4, [sp, #4]
 8010bdc:	e7da      	b.n	8010b94 <_realloc_r+0x14>
	...

08010be0 <fiprintf>:
 8010be0:	b40e      	push	{r1, r2, r3}
 8010be2:	b517      	push	{r0, r1, r2, r4, lr}
 8010be4:	4c05      	ldr	r4, [pc, #20]	@ (8010bfc <fiprintf+0x1c>)
 8010be6:	ab05      	add	r3, sp, #20
 8010be8:	cb04      	ldmia	r3!, {r2}
 8010bea:	0001      	movs	r1, r0
 8010bec:	6820      	ldr	r0, [r4, #0]
 8010bee:	9301      	str	r3, [sp, #4]
 8010bf0:	f7ff fb52 	bl	8010298 <_vfiprintf_r>
 8010bf4:	bc1e      	pop	{r1, r2, r3, r4}
 8010bf6:	bc08      	pop	{r3}
 8010bf8:	b003      	add	sp, #12
 8010bfa:	4718      	bx	r3
 8010bfc:	20000188 	.word	0x20000188

08010c00 <__swhatbuf_r>:
 8010c00:	b570      	push	{r4, r5, r6, lr}
 8010c02:	000e      	movs	r6, r1
 8010c04:	001d      	movs	r5, r3
 8010c06:	230e      	movs	r3, #14
 8010c08:	5ec9      	ldrsh	r1, [r1, r3]
 8010c0a:	0014      	movs	r4, r2
 8010c0c:	b096      	sub	sp, #88	@ 0x58
 8010c0e:	2900      	cmp	r1, #0
 8010c10:	da0c      	bge.n	8010c2c <__swhatbuf_r+0x2c>
 8010c12:	89b2      	ldrh	r2, [r6, #12]
 8010c14:	2380      	movs	r3, #128	@ 0x80
 8010c16:	0011      	movs	r1, r2
 8010c18:	4019      	ands	r1, r3
 8010c1a:	421a      	tst	r2, r3
 8010c1c:	d114      	bne.n	8010c48 <__swhatbuf_r+0x48>
 8010c1e:	2380      	movs	r3, #128	@ 0x80
 8010c20:	00db      	lsls	r3, r3, #3
 8010c22:	2000      	movs	r0, #0
 8010c24:	6029      	str	r1, [r5, #0]
 8010c26:	6023      	str	r3, [r4, #0]
 8010c28:	b016      	add	sp, #88	@ 0x58
 8010c2a:	bd70      	pop	{r4, r5, r6, pc}
 8010c2c:	466a      	mov	r2, sp
 8010c2e:	f000 f853 	bl	8010cd8 <_fstat_r>
 8010c32:	2800      	cmp	r0, #0
 8010c34:	dbed      	blt.n	8010c12 <__swhatbuf_r+0x12>
 8010c36:	23f0      	movs	r3, #240	@ 0xf0
 8010c38:	9901      	ldr	r1, [sp, #4]
 8010c3a:	021b      	lsls	r3, r3, #8
 8010c3c:	4019      	ands	r1, r3
 8010c3e:	4b04      	ldr	r3, [pc, #16]	@ (8010c50 <__swhatbuf_r+0x50>)
 8010c40:	18c9      	adds	r1, r1, r3
 8010c42:	424b      	negs	r3, r1
 8010c44:	4159      	adcs	r1, r3
 8010c46:	e7ea      	b.n	8010c1e <__swhatbuf_r+0x1e>
 8010c48:	2100      	movs	r1, #0
 8010c4a:	2340      	movs	r3, #64	@ 0x40
 8010c4c:	e7e9      	b.n	8010c22 <__swhatbuf_r+0x22>
 8010c4e:	46c0      	nop			@ (mov r8, r8)
 8010c50:	ffffe000 	.word	0xffffe000

08010c54 <__smakebuf_r>:
 8010c54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010c56:	2602      	movs	r6, #2
 8010c58:	898b      	ldrh	r3, [r1, #12]
 8010c5a:	0005      	movs	r5, r0
 8010c5c:	000c      	movs	r4, r1
 8010c5e:	b085      	sub	sp, #20
 8010c60:	4233      	tst	r3, r6
 8010c62:	d007      	beq.n	8010c74 <__smakebuf_r+0x20>
 8010c64:	0023      	movs	r3, r4
 8010c66:	3347      	adds	r3, #71	@ 0x47
 8010c68:	6023      	str	r3, [r4, #0]
 8010c6a:	6123      	str	r3, [r4, #16]
 8010c6c:	2301      	movs	r3, #1
 8010c6e:	6163      	str	r3, [r4, #20]
 8010c70:	b005      	add	sp, #20
 8010c72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010c74:	ab03      	add	r3, sp, #12
 8010c76:	aa02      	add	r2, sp, #8
 8010c78:	f7ff ffc2 	bl	8010c00 <__swhatbuf_r>
 8010c7c:	9f02      	ldr	r7, [sp, #8]
 8010c7e:	9001      	str	r0, [sp, #4]
 8010c80:	0039      	movs	r1, r7
 8010c82:	0028      	movs	r0, r5
 8010c84:	f7fe fc08 	bl	800f498 <_malloc_r>
 8010c88:	2800      	cmp	r0, #0
 8010c8a:	d108      	bne.n	8010c9e <__smakebuf_r+0x4a>
 8010c8c:	220c      	movs	r2, #12
 8010c8e:	5ea3      	ldrsh	r3, [r4, r2]
 8010c90:	059a      	lsls	r2, r3, #22
 8010c92:	d4ed      	bmi.n	8010c70 <__smakebuf_r+0x1c>
 8010c94:	2203      	movs	r2, #3
 8010c96:	4393      	bics	r3, r2
 8010c98:	431e      	orrs	r6, r3
 8010c9a:	81a6      	strh	r6, [r4, #12]
 8010c9c:	e7e2      	b.n	8010c64 <__smakebuf_r+0x10>
 8010c9e:	2380      	movs	r3, #128	@ 0x80
 8010ca0:	89a2      	ldrh	r2, [r4, #12]
 8010ca2:	6020      	str	r0, [r4, #0]
 8010ca4:	4313      	orrs	r3, r2
 8010ca6:	81a3      	strh	r3, [r4, #12]
 8010ca8:	9b03      	ldr	r3, [sp, #12]
 8010caa:	6120      	str	r0, [r4, #16]
 8010cac:	6167      	str	r7, [r4, #20]
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d00c      	beq.n	8010ccc <__smakebuf_r+0x78>
 8010cb2:	0028      	movs	r0, r5
 8010cb4:	230e      	movs	r3, #14
 8010cb6:	5ee1      	ldrsh	r1, [r4, r3]
 8010cb8:	f000 f820 	bl	8010cfc <_isatty_r>
 8010cbc:	2800      	cmp	r0, #0
 8010cbe:	d005      	beq.n	8010ccc <__smakebuf_r+0x78>
 8010cc0:	2303      	movs	r3, #3
 8010cc2:	89a2      	ldrh	r2, [r4, #12]
 8010cc4:	439a      	bics	r2, r3
 8010cc6:	3b02      	subs	r3, #2
 8010cc8:	4313      	orrs	r3, r2
 8010cca:	81a3      	strh	r3, [r4, #12]
 8010ccc:	89a3      	ldrh	r3, [r4, #12]
 8010cce:	9a01      	ldr	r2, [sp, #4]
 8010cd0:	4313      	orrs	r3, r2
 8010cd2:	81a3      	strh	r3, [r4, #12]
 8010cd4:	e7cc      	b.n	8010c70 <__smakebuf_r+0x1c>
	...

08010cd8 <_fstat_r>:
 8010cd8:	2300      	movs	r3, #0
 8010cda:	b570      	push	{r4, r5, r6, lr}
 8010cdc:	4d06      	ldr	r5, [pc, #24]	@ (8010cf8 <_fstat_r+0x20>)
 8010cde:	0004      	movs	r4, r0
 8010ce0:	0008      	movs	r0, r1
 8010ce2:	0011      	movs	r1, r2
 8010ce4:	602b      	str	r3, [r5, #0]
 8010ce6:	f7f7 f95c 	bl	8007fa2 <_fstat>
 8010cea:	1c43      	adds	r3, r0, #1
 8010cec:	d103      	bne.n	8010cf6 <_fstat_r+0x1e>
 8010cee:	682b      	ldr	r3, [r5, #0]
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d000      	beq.n	8010cf6 <_fstat_r+0x1e>
 8010cf4:	6023      	str	r3, [r4, #0]
 8010cf6:	bd70      	pop	{r4, r5, r6, pc}
 8010cf8:	20001644 	.word	0x20001644

08010cfc <_isatty_r>:
 8010cfc:	2300      	movs	r3, #0
 8010cfe:	b570      	push	{r4, r5, r6, lr}
 8010d00:	4d06      	ldr	r5, [pc, #24]	@ (8010d1c <_isatty_r+0x20>)
 8010d02:	0004      	movs	r4, r0
 8010d04:	0008      	movs	r0, r1
 8010d06:	602b      	str	r3, [r5, #0]
 8010d08:	f7f7 f959 	bl	8007fbe <_isatty>
 8010d0c:	1c43      	adds	r3, r0, #1
 8010d0e:	d103      	bne.n	8010d18 <_isatty_r+0x1c>
 8010d10:	682b      	ldr	r3, [r5, #0]
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d000      	beq.n	8010d18 <_isatty_r+0x1c>
 8010d16:	6023      	str	r3, [r4, #0]
 8010d18:	bd70      	pop	{r4, r5, r6, pc}
 8010d1a:	46c0      	nop			@ (mov r8, r8)
 8010d1c:	20001644 	.word	0x20001644

08010d20 <abort>:
 8010d20:	2006      	movs	r0, #6
 8010d22:	b510      	push	{r4, lr}
 8010d24:	f000 f834 	bl	8010d90 <raise>
 8010d28:	2001      	movs	r0, #1
 8010d2a:	f7f7 f8ea 	bl	8007f02 <_exit>

08010d2e <_malloc_usable_size_r>:
 8010d2e:	1f0b      	subs	r3, r1, #4
 8010d30:	681b      	ldr	r3, [r3, #0]
 8010d32:	1f18      	subs	r0, r3, #4
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	da01      	bge.n	8010d3c <_malloc_usable_size_r+0xe>
 8010d38:	580b      	ldr	r3, [r1, r0]
 8010d3a:	18c0      	adds	r0, r0, r3
 8010d3c:	4770      	bx	lr

08010d3e <_raise_r>:
 8010d3e:	b570      	push	{r4, r5, r6, lr}
 8010d40:	0004      	movs	r4, r0
 8010d42:	000d      	movs	r5, r1
 8010d44:	291f      	cmp	r1, #31
 8010d46:	d904      	bls.n	8010d52 <_raise_r+0x14>
 8010d48:	2316      	movs	r3, #22
 8010d4a:	6003      	str	r3, [r0, #0]
 8010d4c:	2001      	movs	r0, #1
 8010d4e:	4240      	negs	r0, r0
 8010d50:	bd70      	pop	{r4, r5, r6, pc}
 8010d52:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	d004      	beq.n	8010d62 <_raise_r+0x24>
 8010d58:	008a      	lsls	r2, r1, #2
 8010d5a:	189b      	adds	r3, r3, r2
 8010d5c:	681a      	ldr	r2, [r3, #0]
 8010d5e:	2a00      	cmp	r2, #0
 8010d60:	d108      	bne.n	8010d74 <_raise_r+0x36>
 8010d62:	0020      	movs	r0, r4
 8010d64:	f000 f830 	bl	8010dc8 <_getpid_r>
 8010d68:	002a      	movs	r2, r5
 8010d6a:	0001      	movs	r1, r0
 8010d6c:	0020      	movs	r0, r4
 8010d6e:	f000 f819 	bl	8010da4 <_kill_r>
 8010d72:	e7ed      	b.n	8010d50 <_raise_r+0x12>
 8010d74:	2a01      	cmp	r2, #1
 8010d76:	d009      	beq.n	8010d8c <_raise_r+0x4e>
 8010d78:	1c51      	adds	r1, r2, #1
 8010d7a:	d103      	bne.n	8010d84 <_raise_r+0x46>
 8010d7c:	2316      	movs	r3, #22
 8010d7e:	6003      	str	r3, [r0, #0]
 8010d80:	2001      	movs	r0, #1
 8010d82:	e7e5      	b.n	8010d50 <_raise_r+0x12>
 8010d84:	2100      	movs	r1, #0
 8010d86:	0028      	movs	r0, r5
 8010d88:	6019      	str	r1, [r3, #0]
 8010d8a:	4790      	blx	r2
 8010d8c:	2000      	movs	r0, #0
 8010d8e:	e7df      	b.n	8010d50 <_raise_r+0x12>

08010d90 <raise>:
 8010d90:	b510      	push	{r4, lr}
 8010d92:	4b03      	ldr	r3, [pc, #12]	@ (8010da0 <raise+0x10>)
 8010d94:	0001      	movs	r1, r0
 8010d96:	6818      	ldr	r0, [r3, #0]
 8010d98:	f7ff ffd1 	bl	8010d3e <_raise_r>
 8010d9c:	bd10      	pop	{r4, pc}
 8010d9e:	46c0      	nop			@ (mov r8, r8)
 8010da0:	20000188 	.word	0x20000188

08010da4 <_kill_r>:
 8010da4:	2300      	movs	r3, #0
 8010da6:	b570      	push	{r4, r5, r6, lr}
 8010da8:	4d06      	ldr	r5, [pc, #24]	@ (8010dc4 <_kill_r+0x20>)
 8010daa:	0004      	movs	r4, r0
 8010dac:	0008      	movs	r0, r1
 8010dae:	0011      	movs	r1, r2
 8010db0:	602b      	str	r3, [r5, #0]
 8010db2:	f7f7 f896 	bl	8007ee2 <_kill>
 8010db6:	1c43      	adds	r3, r0, #1
 8010db8:	d103      	bne.n	8010dc2 <_kill_r+0x1e>
 8010dba:	682b      	ldr	r3, [r5, #0]
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d000      	beq.n	8010dc2 <_kill_r+0x1e>
 8010dc0:	6023      	str	r3, [r4, #0]
 8010dc2:	bd70      	pop	{r4, r5, r6, pc}
 8010dc4:	20001644 	.word	0x20001644

08010dc8 <_getpid_r>:
 8010dc8:	b510      	push	{r4, lr}
 8010dca:	f7f7 f884 	bl	8007ed6 <_getpid>
 8010dce:	bd10      	pop	{r4, pc}

08010dd0 <fmod>:
 8010dd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010dd2:	0014      	movs	r4, r2
 8010dd4:	001d      	movs	r5, r3
 8010dd6:	9000      	str	r0, [sp, #0]
 8010dd8:	9101      	str	r1, [sp, #4]
 8010dda:	f000 f931 	bl	8011040 <__ieee754_fmod>
 8010dde:	0022      	movs	r2, r4
 8010de0:	0006      	movs	r6, r0
 8010de2:	000f      	movs	r7, r1
 8010de4:	9800      	ldr	r0, [sp, #0]
 8010de6:	9901      	ldr	r1, [sp, #4]
 8010de8:	002b      	movs	r3, r5
 8010dea:	f7f2 fa83 	bl	80032f4 <__aeabi_dcmpun>
 8010dee:	2800      	cmp	r0, #0
 8010df0:	d113      	bne.n	8010e1a <fmod+0x4a>
 8010df2:	2200      	movs	r2, #0
 8010df4:	2300      	movs	r3, #0
 8010df6:	0020      	movs	r0, r4
 8010df8:	0029      	movs	r1, r5
 8010dfa:	f7ef fb31 	bl	8000460 <__aeabi_dcmpeq>
 8010dfe:	2800      	cmp	r0, #0
 8010e00:	d00b      	beq.n	8010e1a <fmod+0x4a>
 8010e02:	f7fd ff47 	bl	800ec94 <__errno>
 8010e06:	2321      	movs	r3, #33	@ 0x21
 8010e08:	2200      	movs	r2, #0
 8010e0a:	6003      	str	r3, [r0, #0]
 8010e0c:	2300      	movs	r3, #0
 8010e0e:	0010      	movs	r0, r2
 8010e10:	0019      	movs	r1, r3
 8010e12:	f7f0 ffc7 	bl	8001da4 <__aeabi_ddiv>
 8010e16:	0006      	movs	r6, r0
 8010e18:	000f      	movs	r7, r1
 8010e1a:	0030      	movs	r0, r6
 8010e1c:	0039      	movs	r1, r7
 8010e1e:	b003      	add	sp, #12
 8010e20:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010e22 <sqrt>:
 8010e22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e24:	0004      	movs	r4, r0
 8010e26:	000d      	movs	r5, r1
 8010e28:	f000 f822 	bl	8010e70 <__ieee754_sqrt>
 8010e2c:	0022      	movs	r2, r4
 8010e2e:	0006      	movs	r6, r0
 8010e30:	000f      	movs	r7, r1
 8010e32:	002b      	movs	r3, r5
 8010e34:	0020      	movs	r0, r4
 8010e36:	0029      	movs	r1, r5
 8010e38:	f7f2 fa5c 	bl	80032f4 <__aeabi_dcmpun>
 8010e3c:	2800      	cmp	r0, #0
 8010e3e:	d113      	bne.n	8010e68 <sqrt+0x46>
 8010e40:	2200      	movs	r2, #0
 8010e42:	2300      	movs	r3, #0
 8010e44:	0020      	movs	r0, r4
 8010e46:	0029      	movs	r1, r5
 8010e48:	f7ef fb10 	bl	800046c <__aeabi_dcmplt>
 8010e4c:	2800      	cmp	r0, #0
 8010e4e:	d00b      	beq.n	8010e68 <sqrt+0x46>
 8010e50:	f7fd ff20 	bl	800ec94 <__errno>
 8010e54:	2321      	movs	r3, #33	@ 0x21
 8010e56:	2200      	movs	r2, #0
 8010e58:	6003      	str	r3, [r0, #0]
 8010e5a:	2300      	movs	r3, #0
 8010e5c:	0010      	movs	r0, r2
 8010e5e:	0019      	movs	r1, r3
 8010e60:	f7f0 ffa0 	bl	8001da4 <__aeabi_ddiv>
 8010e64:	0006      	movs	r6, r0
 8010e66:	000f      	movs	r7, r1
 8010e68:	0030      	movs	r0, r6
 8010e6a:	0039      	movs	r1, r7
 8010e6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010e70 <__ieee754_sqrt>:
 8010e70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e72:	000a      	movs	r2, r1
 8010e74:	000d      	movs	r5, r1
 8010e76:	496d      	ldr	r1, [pc, #436]	@ (801102c <__ieee754_sqrt+0x1bc>)
 8010e78:	0004      	movs	r4, r0
 8010e7a:	0003      	movs	r3, r0
 8010e7c:	0008      	movs	r0, r1
 8010e7e:	b087      	sub	sp, #28
 8010e80:	4028      	ands	r0, r5
 8010e82:	4288      	cmp	r0, r1
 8010e84:	d111      	bne.n	8010eaa <__ieee754_sqrt+0x3a>
 8010e86:	0022      	movs	r2, r4
 8010e88:	002b      	movs	r3, r5
 8010e8a:	0020      	movs	r0, r4
 8010e8c:	0029      	movs	r1, r5
 8010e8e:	f7f1 fbcd 	bl	800262c <__aeabi_dmul>
 8010e92:	0002      	movs	r2, r0
 8010e94:	000b      	movs	r3, r1
 8010e96:	0020      	movs	r0, r4
 8010e98:	0029      	movs	r1, r5
 8010e9a:	f7f0 fc1f 	bl	80016dc <__aeabi_dadd>
 8010e9e:	0004      	movs	r4, r0
 8010ea0:	000d      	movs	r5, r1
 8010ea2:	0020      	movs	r0, r4
 8010ea4:	0029      	movs	r1, r5
 8010ea6:	b007      	add	sp, #28
 8010ea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010eaa:	2d00      	cmp	r5, #0
 8010eac:	dc11      	bgt.n	8010ed2 <__ieee754_sqrt+0x62>
 8010eae:	0069      	lsls	r1, r5, #1
 8010eb0:	0849      	lsrs	r1, r1, #1
 8010eb2:	4321      	orrs	r1, r4
 8010eb4:	d0f5      	beq.n	8010ea2 <__ieee754_sqrt+0x32>
 8010eb6:	2000      	movs	r0, #0
 8010eb8:	4285      	cmp	r5, r0
 8010eba:	d010      	beq.n	8010ede <__ieee754_sqrt+0x6e>
 8010ebc:	0022      	movs	r2, r4
 8010ebe:	002b      	movs	r3, r5
 8010ec0:	0020      	movs	r0, r4
 8010ec2:	0029      	movs	r1, r5
 8010ec4:	f7f1 fe7a 	bl	8002bbc <__aeabi_dsub>
 8010ec8:	0002      	movs	r2, r0
 8010eca:	000b      	movs	r3, r1
 8010ecc:	f7f0 ff6a 	bl	8001da4 <__aeabi_ddiv>
 8010ed0:	e7e5      	b.n	8010e9e <__ieee754_sqrt+0x2e>
 8010ed2:	1528      	asrs	r0, r5, #20
 8010ed4:	d115      	bne.n	8010f02 <__ieee754_sqrt+0x92>
 8010ed6:	2480      	movs	r4, #128	@ 0x80
 8010ed8:	2100      	movs	r1, #0
 8010eda:	0364      	lsls	r4, r4, #13
 8010edc:	e007      	b.n	8010eee <__ieee754_sqrt+0x7e>
 8010ede:	0ada      	lsrs	r2, r3, #11
 8010ee0:	3815      	subs	r0, #21
 8010ee2:	055b      	lsls	r3, r3, #21
 8010ee4:	2a00      	cmp	r2, #0
 8010ee6:	d0fa      	beq.n	8010ede <__ieee754_sqrt+0x6e>
 8010ee8:	e7f5      	b.n	8010ed6 <__ieee754_sqrt+0x66>
 8010eea:	0052      	lsls	r2, r2, #1
 8010eec:	3101      	adds	r1, #1
 8010eee:	4222      	tst	r2, r4
 8010ef0:	d0fb      	beq.n	8010eea <__ieee754_sqrt+0x7a>
 8010ef2:	1e4c      	subs	r4, r1, #1
 8010ef4:	1b00      	subs	r0, r0, r4
 8010ef6:	2420      	movs	r4, #32
 8010ef8:	001d      	movs	r5, r3
 8010efa:	1a64      	subs	r4, r4, r1
 8010efc:	40e5      	lsrs	r5, r4
 8010efe:	408b      	lsls	r3, r1
 8010f00:	432a      	orrs	r2, r5
 8010f02:	494b      	ldr	r1, [pc, #300]	@ (8011030 <__ieee754_sqrt+0x1c0>)
 8010f04:	0312      	lsls	r2, r2, #12
 8010f06:	1844      	adds	r4, r0, r1
 8010f08:	2180      	movs	r1, #128	@ 0x80
 8010f0a:	0b12      	lsrs	r2, r2, #12
 8010f0c:	0349      	lsls	r1, r1, #13
 8010f0e:	4311      	orrs	r1, r2
 8010f10:	07c0      	lsls	r0, r0, #31
 8010f12:	d403      	bmi.n	8010f1c <__ieee754_sqrt+0xac>
 8010f14:	0fda      	lsrs	r2, r3, #31
 8010f16:	0049      	lsls	r1, r1, #1
 8010f18:	1851      	adds	r1, r2, r1
 8010f1a:	005b      	lsls	r3, r3, #1
 8010f1c:	2500      	movs	r5, #0
 8010f1e:	1062      	asrs	r2, r4, #1
 8010f20:	0049      	lsls	r1, r1, #1
 8010f22:	2480      	movs	r4, #128	@ 0x80
 8010f24:	9205      	str	r2, [sp, #20]
 8010f26:	0fda      	lsrs	r2, r3, #31
 8010f28:	1852      	adds	r2, r2, r1
 8010f2a:	2016      	movs	r0, #22
 8010f2c:	0029      	movs	r1, r5
 8010f2e:	005b      	lsls	r3, r3, #1
 8010f30:	03a4      	lsls	r4, r4, #14
 8010f32:	190e      	adds	r6, r1, r4
 8010f34:	4296      	cmp	r6, r2
 8010f36:	dc02      	bgt.n	8010f3e <__ieee754_sqrt+0xce>
 8010f38:	1931      	adds	r1, r6, r4
 8010f3a:	1b92      	subs	r2, r2, r6
 8010f3c:	192d      	adds	r5, r5, r4
 8010f3e:	0fde      	lsrs	r6, r3, #31
 8010f40:	0052      	lsls	r2, r2, #1
 8010f42:	3801      	subs	r0, #1
 8010f44:	1992      	adds	r2, r2, r6
 8010f46:	005b      	lsls	r3, r3, #1
 8010f48:	0864      	lsrs	r4, r4, #1
 8010f4a:	2800      	cmp	r0, #0
 8010f4c:	d1f1      	bne.n	8010f32 <__ieee754_sqrt+0xc2>
 8010f4e:	2620      	movs	r6, #32
 8010f50:	2780      	movs	r7, #128	@ 0x80
 8010f52:	0004      	movs	r4, r0
 8010f54:	9604      	str	r6, [sp, #16]
 8010f56:	063f      	lsls	r7, r7, #24
 8010f58:	19c6      	adds	r6, r0, r7
 8010f5a:	46b4      	mov	ip, r6
 8010f5c:	4291      	cmp	r1, r2
 8010f5e:	db02      	blt.n	8010f66 <__ieee754_sqrt+0xf6>
 8010f60:	d114      	bne.n	8010f8c <__ieee754_sqrt+0x11c>
 8010f62:	429e      	cmp	r6, r3
 8010f64:	d812      	bhi.n	8010f8c <__ieee754_sqrt+0x11c>
 8010f66:	4660      	mov	r0, ip
 8010f68:	4666      	mov	r6, ip
 8010f6a:	19c0      	adds	r0, r0, r7
 8010f6c:	9100      	str	r1, [sp, #0]
 8010f6e:	2e00      	cmp	r6, #0
 8010f70:	da03      	bge.n	8010f7a <__ieee754_sqrt+0x10a>
 8010f72:	43c6      	mvns	r6, r0
 8010f74:	0ff6      	lsrs	r6, r6, #31
 8010f76:	198e      	adds	r6, r1, r6
 8010f78:	9600      	str	r6, [sp, #0]
 8010f7a:	1a52      	subs	r2, r2, r1
 8010f7c:	4563      	cmp	r3, ip
 8010f7e:	4189      	sbcs	r1, r1
 8010f80:	4249      	negs	r1, r1
 8010f82:	1a52      	subs	r2, r2, r1
 8010f84:	4661      	mov	r1, ip
 8010f86:	1a5b      	subs	r3, r3, r1
 8010f88:	9900      	ldr	r1, [sp, #0]
 8010f8a:	19e4      	adds	r4, r4, r7
 8010f8c:	0fde      	lsrs	r6, r3, #31
 8010f8e:	0052      	lsls	r2, r2, #1
 8010f90:	1992      	adds	r2, r2, r6
 8010f92:	9e04      	ldr	r6, [sp, #16]
 8010f94:	005b      	lsls	r3, r3, #1
 8010f96:	3e01      	subs	r6, #1
 8010f98:	087f      	lsrs	r7, r7, #1
 8010f9a:	9604      	str	r6, [sp, #16]
 8010f9c:	2e00      	cmp	r6, #0
 8010f9e:	d1db      	bne.n	8010f58 <__ieee754_sqrt+0xe8>
 8010fa0:	431a      	orrs	r2, r3
 8010fa2:	d01f      	beq.n	8010fe4 <__ieee754_sqrt+0x174>
 8010fa4:	4e23      	ldr	r6, [pc, #140]	@ (8011034 <__ieee754_sqrt+0x1c4>)
 8010fa6:	4f24      	ldr	r7, [pc, #144]	@ (8011038 <__ieee754_sqrt+0x1c8>)
 8010fa8:	6830      	ldr	r0, [r6, #0]
 8010faa:	6871      	ldr	r1, [r6, #4]
 8010fac:	683a      	ldr	r2, [r7, #0]
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	9200      	str	r2, [sp, #0]
 8010fb2:	9301      	str	r3, [sp, #4]
 8010fb4:	6832      	ldr	r2, [r6, #0]
 8010fb6:	6873      	ldr	r3, [r6, #4]
 8010fb8:	9202      	str	r2, [sp, #8]
 8010fba:	9303      	str	r3, [sp, #12]
 8010fbc:	9a00      	ldr	r2, [sp, #0]
 8010fbe:	9b01      	ldr	r3, [sp, #4]
 8010fc0:	f7f1 fdfc 	bl	8002bbc <__aeabi_dsub>
 8010fc4:	0002      	movs	r2, r0
 8010fc6:	000b      	movs	r3, r1
 8010fc8:	9802      	ldr	r0, [sp, #8]
 8010fca:	9903      	ldr	r1, [sp, #12]
 8010fcc:	f7ef fa58 	bl	8000480 <__aeabi_dcmple>
 8010fd0:	2800      	cmp	r0, #0
 8010fd2:	d007      	beq.n	8010fe4 <__ieee754_sqrt+0x174>
 8010fd4:	6830      	ldr	r0, [r6, #0]
 8010fd6:	6871      	ldr	r1, [r6, #4]
 8010fd8:	683a      	ldr	r2, [r7, #0]
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	1c67      	adds	r7, r4, #1
 8010fde:	d10f      	bne.n	8011000 <__ieee754_sqrt+0x190>
 8010fe0:	9c04      	ldr	r4, [sp, #16]
 8010fe2:	3501      	adds	r5, #1
 8010fe4:	4b15      	ldr	r3, [pc, #84]	@ (801103c <__ieee754_sqrt+0x1cc>)
 8010fe6:	106a      	asrs	r2, r5, #1
 8010fe8:	18d2      	adds	r2, r2, r3
 8010fea:	0863      	lsrs	r3, r4, #1
 8010fec:	07ed      	lsls	r5, r5, #31
 8010fee:	d502      	bpl.n	8010ff6 <__ieee754_sqrt+0x186>
 8010ff0:	2180      	movs	r1, #128	@ 0x80
 8010ff2:	0609      	lsls	r1, r1, #24
 8010ff4:	430b      	orrs	r3, r1
 8010ff6:	9905      	ldr	r1, [sp, #20]
 8010ff8:	001c      	movs	r4, r3
 8010ffa:	0509      	lsls	r1, r1, #20
 8010ffc:	188d      	adds	r5, r1, r2
 8010ffe:	e750      	b.n	8010ea2 <__ieee754_sqrt+0x32>
 8011000:	f7f0 fb6c 	bl	80016dc <__aeabi_dadd>
 8011004:	6877      	ldr	r7, [r6, #4]
 8011006:	6836      	ldr	r6, [r6, #0]
 8011008:	0002      	movs	r2, r0
 801100a:	000b      	movs	r3, r1
 801100c:	0030      	movs	r0, r6
 801100e:	0039      	movs	r1, r7
 8011010:	f7ef fa2c 	bl	800046c <__aeabi_dcmplt>
 8011014:	2800      	cmp	r0, #0
 8011016:	d004      	beq.n	8011022 <__ieee754_sqrt+0x1b2>
 8011018:	3402      	adds	r4, #2
 801101a:	4263      	negs	r3, r4
 801101c:	4163      	adcs	r3, r4
 801101e:	18ed      	adds	r5, r5, r3
 8011020:	e7e0      	b.n	8010fe4 <__ieee754_sqrt+0x174>
 8011022:	2301      	movs	r3, #1
 8011024:	3401      	adds	r4, #1
 8011026:	439c      	bics	r4, r3
 8011028:	e7dc      	b.n	8010fe4 <__ieee754_sqrt+0x174>
 801102a:	46c0      	nop			@ (mov r8, r8)
 801102c:	7ff00000 	.word	0x7ff00000
 8011030:	fffffc01 	.word	0xfffffc01
 8011034:	200001e0 	.word	0x200001e0
 8011038:	200001d8 	.word	0x200001d8
 801103c:	3fe00000 	.word	0x3fe00000

08011040 <__ieee754_fmod>:
 8011040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011042:	b085      	sub	sp, #20
 8011044:	9200      	str	r2, [sp, #0]
 8011046:	9301      	str	r3, [sp, #4]
 8011048:	9b01      	ldr	r3, [sp, #4]
 801104a:	9e00      	ldr	r6, [sp, #0]
 801104c:	005b      	lsls	r3, r3, #1
 801104e:	085b      	lsrs	r3, r3, #1
 8011050:	469c      	mov	ip, r3
 8011052:	9603      	str	r6, [sp, #12]
 8011054:	4333      	orrs	r3, r6
 8011056:	d00d      	beq.n	8011074 <__ieee754_fmod+0x34>
 8011058:	4b7a      	ldr	r3, [pc, #488]	@ (8011244 <__ieee754_fmod+0x204>)
 801105a:	004a      	lsls	r2, r1, #1
 801105c:	000d      	movs	r5, r1
 801105e:	0852      	lsrs	r2, r2, #1
 8011060:	429a      	cmp	r2, r3
 8011062:	d807      	bhi.n	8011074 <__ieee754_fmod+0x34>
 8011064:	4664      	mov	r4, ip
 8011066:	4273      	negs	r3, r6
 8011068:	4333      	orrs	r3, r6
 801106a:	0fdb      	lsrs	r3, r3, #31
 801106c:	4323      	orrs	r3, r4
 801106e:	4c76      	ldr	r4, [pc, #472]	@ (8011248 <__ieee754_fmod+0x208>)
 8011070:	42a3      	cmp	r3, r4
 8011072:	d909      	bls.n	8011088 <__ieee754_fmod+0x48>
 8011074:	9a00      	ldr	r2, [sp, #0]
 8011076:	9b01      	ldr	r3, [sp, #4]
 8011078:	f7f1 fad8 	bl	800262c <__aeabi_dmul>
 801107c:	0002      	movs	r2, r0
 801107e:	000b      	movs	r3, r1
 8011080:	f7f0 fe90 	bl	8001da4 <__aeabi_ddiv>
 8011084:	b005      	add	sp, #20
 8011086:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011088:	0fcc      	lsrs	r4, r1, #31
 801108a:	07e4      	lsls	r4, r4, #31
 801108c:	0007      	movs	r7, r0
 801108e:	0003      	movs	r3, r0
 8011090:	9402      	str	r4, [sp, #8]
 8011092:	4562      	cmp	r2, ip
 8011094:	dc0a      	bgt.n	80110ac <__ieee754_fmod+0x6c>
 8011096:	dbf5      	blt.n	8011084 <__ieee754_fmod+0x44>
 8011098:	4286      	cmp	r6, r0
 801109a:	d8f3      	bhi.n	8011084 <__ieee754_fmod+0x44>
 801109c:	d106      	bne.n	80110ac <__ieee754_fmod+0x6c>
 801109e:	0022      	movs	r2, r4
 80110a0:	4b6a      	ldr	r3, [pc, #424]	@ (801124c <__ieee754_fmod+0x20c>)
 80110a2:	0f12      	lsrs	r2, r2, #28
 80110a4:	189b      	adds	r3, r3, r2
 80110a6:	6818      	ldr	r0, [r3, #0]
 80110a8:	6859      	ldr	r1, [r3, #4]
 80110aa:	e7eb      	b.n	8011084 <__ieee754_fmod+0x44>
 80110ac:	4866      	ldr	r0, [pc, #408]	@ (8011248 <__ieee754_fmod+0x208>)
 80110ae:	4205      	tst	r5, r0
 80110b0:	d14c      	bne.n	801114c <__ieee754_fmod+0x10c>
 80110b2:	2a00      	cmp	r2, #0
 80110b4:	d143      	bne.n	801113e <__ieee754_fmod+0xfe>
 80110b6:	0038      	movs	r0, r7
 80110b8:	4965      	ldr	r1, [pc, #404]	@ (8011250 <__ieee754_fmod+0x210>)
 80110ba:	2800      	cmp	r0, #0
 80110bc:	dc3c      	bgt.n	8011138 <__ieee754_fmod+0xf8>
 80110be:	4862      	ldr	r0, [pc, #392]	@ (8011248 <__ieee754_fmod+0x208>)
 80110c0:	9c01      	ldr	r4, [sp, #4]
 80110c2:	4220      	tst	r0, r4
 80110c4:	d150      	bne.n	8011168 <__ieee754_fmod+0x128>
 80110c6:	4660      	mov	r0, ip
 80110c8:	2800      	cmp	r0, #0
 80110ca:	d146      	bne.n	801115a <__ieee754_fmod+0x11a>
 80110cc:	4860      	ldr	r0, [pc, #384]	@ (8011250 <__ieee754_fmod+0x210>)
 80110ce:	2e00      	cmp	r6, #0
 80110d0:	dc40      	bgt.n	8011154 <__ieee754_fmod+0x114>
 80110d2:	4c60      	ldr	r4, [pc, #384]	@ (8011254 <__ieee754_fmod+0x214>)
 80110d4:	42a1      	cmp	r1, r4
 80110d6:	db4c      	blt.n	8011172 <__ieee754_fmod+0x132>
 80110d8:	2280      	movs	r2, #128	@ 0x80
 80110da:	032f      	lsls	r7, r5, #12
 80110dc:	0b3f      	lsrs	r7, r7, #12
 80110de:	0352      	lsls	r2, r2, #13
 80110e0:	433a      	orrs	r2, r7
 80110e2:	4c5c      	ldr	r4, [pc, #368]	@ (8011254 <__ieee754_fmod+0x214>)
 80110e4:	42a0      	cmp	r0, r4
 80110e6:	db59      	blt.n	801119c <__ieee754_fmod+0x15c>
 80110e8:	2580      	movs	r5, #128	@ 0x80
 80110ea:	9c01      	ldr	r4, [sp, #4]
 80110ec:	036d      	lsls	r5, r5, #13
 80110ee:	0324      	lsls	r4, r4, #12
 80110f0:	0b24      	lsrs	r4, r4, #12
 80110f2:	4325      	orrs	r5, r4
 80110f4:	1a09      	subs	r1, r1, r0
 80110f6:	9e03      	ldr	r6, [sp, #12]
 80110f8:	1b54      	subs	r4, r2, r5
 80110fa:	1b9f      	subs	r7, r3, r6
 80110fc:	2900      	cmp	r1, #0
 80110fe:	d165      	bne.n	80111cc <__ieee754_fmod+0x18c>
 8011100:	42b3      	cmp	r3, r6
 8011102:	4189      	sbcs	r1, r1
 8011104:	4249      	negs	r1, r1
 8011106:	1a64      	subs	r4, r4, r1
 8011108:	d401      	bmi.n	801110e <__ieee754_fmod+0xce>
 801110a:	003b      	movs	r3, r7
 801110c:	0022      	movs	r2, r4
 801110e:	0011      	movs	r1, r2
 8011110:	4319      	orrs	r1, r3
 8011112:	d06a      	beq.n	80111ea <__ieee754_fmod+0x1aa>
 8011114:	2180      	movs	r1, #128	@ 0x80
 8011116:	0349      	lsls	r1, r1, #13
 8011118:	428a      	cmp	r2, r1
 801111a:	db6e      	blt.n	80111fa <__ieee754_fmod+0x1ba>
 801111c:	494d      	ldr	r1, [pc, #308]	@ (8011254 <__ieee754_fmod+0x214>)
 801111e:	4288      	cmp	r0, r1
 8011120:	db71      	blt.n	8011206 <__ieee754_fmod+0x1c6>
 8011122:	494d      	ldr	r1, [pc, #308]	@ (8011258 <__ieee754_fmod+0x218>)
 8011124:	1852      	adds	r2, r2, r1
 8011126:	9902      	ldr	r1, [sp, #8]
 8011128:	430a      	orrs	r2, r1
 801112a:	494c      	ldr	r1, [pc, #304]	@ (801125c <__ieee754_fmod+0x21c>)
 801112c:	1840      	adds	r0, r0, r1
 801112e:	0504      	lsls	r4, r0, #20
 8011130:	4322      	orrs	r2, r4
 8011132:	0011      	movs	r1, r2
 8011134:	0018      	movs	r0, r3
 8011136:	e7a5      	b.n	8011084 <__ieee754_fmod+0x44>
 8011138:	3901      	subs	r1, #1
 801113a:	0040      	lsls	r0, r0, #1
 801113c:	e7bd      	b.n	80110ba <__ieee754_fmod+0x7a>
 801113e:	4945      	ldr	r1, [pc, #276]	@ (8011254 <__ieee754_fmod+0x214>)
 8011140:	02d0      	lsls	r0, r2, #11
 8011142:	2800      	cmp	r0, #0
 8011144:	ddbb      	ble.n	80110be <__ieee754_fmod+0x7e>
 8011146:	3901      	subs	r1, #1
 8011148:	0040      	lsls	r0, r0, #1
 801114a:	e7fa      	b.n	8011142 <__ieee754_fmod+0x102>
 801114c:	4844      	ldr	r0, [pc, #272]	@ (8011260 <__ieee754_fmod+0x220>)
 801114e:	1511      	asrs	r1, r2, #20
 8011150:	1809      	adds	r1, r1, r0
 8011152:	e7b4      	b.n	80110be <__ieee754_fmod+0x7e>
 8011154:	3801      	subs	r0, #1
 8011156:	0076      	lsls	r6, r6, #1
 8011158:	e7b9      	b.n	80110ce <__ieee754_fmod+0x8e>
 801115a:	02c6      	lsls	r6, r0, #11
 801115c:	483d      	ldr	r0, [pc, #244]	@ (8011254 <__ieee754_fmod+0x214>)
 801115e:	2e00      	cmp	r6, #0
 8011160:	ddb7      	ble.n	80110d2 <__ieee754_fmod+0x92>
 8011162:	3801      	subs	r0, #1
 8011164:	0076      	lsls	r6, r6, #1
 8011166:	e7fa      	b.n	801115e <__ieee754_fmod+0x11e>
 8011168:	4660      	mov	r0, ip
 801116a:	4c3d      	ldr	r4, [pc, #244]	@ (8011260 <__ieee754_fmod+0x220>)
 801116c:	1500      	asrs	r0, r0, #20
 801116e:	1900      	adds	r0, r0, r4
 8011170:	e7af      	b.n	80110d2 <__ieee754_fmod+0x92>
 8011172:	4b38      	ldr	r3, [pc, #224]	@ (8011254 <__ieee754_fmod+0x214>)
 8011174:	1a5b      	subs	r3, r3, r1
 8011176:	2b1f      	cmp	r3, #31
 8011178:	dc0a      	bgt.n	8011190 <__ieee754_fmod+0x150>
 801117a:	409a      	lsls	r2, r3
 801117c:	003c      	movs	r4, r7
 801117e:	0015      	movs	r5, r2
 8011180:	4a38      	ldr	r2, [pc, #224]	@ (8011264 <__ieee754_fmod+0x224>)
 8011182:	409f      	lsls	r7, r3
 8011184:	188a      	adds	r2, r1, r2
 8011186:	40d4      	lsrs	r4, r2
 8011188:	0022      	movs	r2, r4
 801118a:	003b      	movs	r3, r7
 801118c:	432a      	orrs	r2, r5
 801118e:	e7a8      	b.n	80110e2 <__ieee754_fmod+0xa2>
 8011190:	003a      	movs	r2, r7
 8011192:	4b35      	ldr	r3, [pc, #212]	@ (8011268 <__ieee754_fmod+0x228>)
 8011194:	1a5b      	subs	r3, r3, r1
 8011196:	409a      	lsls	r2, r3
 8011198:	2300      	movs	r3, #0
 801119a:	e7a2      	b.n	80110e2 <__ieee754_fmod+0xa2>
 801119c:	4c2d      	ldr	r4, [pc, #180]	@ (8011254 <__ieee754_fmod+0x214>)
 801119e:	1a27      	subs	r7, r4, r0
 80111a0:	2f1f      	cmp	r7, #31
 80111a2:	dc0c      	bgt.n	80111be <__ieee754_fmod+0x17e>
 80111a4:	4c2f      	ldr	r4, [pc, #188]	@ (8011264 <__ieee754_fmod+0x224>)
 80111a6:	4665      	mov	r5, ip
 80111a8:	46a4      	mov	ip, r4
 80111aa:	4484      	add	ip, r0
 80111ac:	4666      	mov	r6, ip
 80111ae:	9c00      	ldr	r4, [sp, #0]
 80111b0:	40bd      	lsls	r5, r7
 80111b2:	40f4      	lsrs	r4, r6
 80111b4:	4325      	orrs	r5, r4
 80111b6:	9c00      	ldr	r4, [sp, #0]
 80111b8:	40bc      	lsls	r4, r7
 80111ba:	9403      	str	r4, [sp, #12]
 80111bc:	e79a      	b.n	80110f4 <__ieee754_fmod+0xb4>
 80111be:	4d2a      	ldr	r5, [pc, #168]	@ (8011268 <__ieee754_fmod+0x228>)
 80111c0:	9c00      	ldr	r4, [sp, #0]
 80111c2:	1a2d      	subs	r5, r5, r0
 80111c4:	40ac      	lsls	r4, r5
 80111c6:	0025      	movs	r5, r4
 80111c8:	2400      	movs	r4, #0
 80111ca:	e7f6      	b.n	80111ba <__ieee754_fmod+0x17a>
 80111cc:	9e03      	ldr	r6, [sp, #12]
 80111ce:	42b3      	cmp	r3, r6
 80111d0:	41b6      	sbcs	r6, r6
 80111d2:	4276      	negs	r6, r6
 80111d4:	1ba4      	subs	r4, r4, r6
 80111d6:	d505      	bpl.n	80111e4 <__ieee754_fmod+0x1a4>
 80111d8:	0fdc      	lsrs	r4, r3, #31
 80111da:	0052      	lsls	r2, r2, #1
 80111dc:	1912      	adds	r2, r2, r4
 80111de:	005b      	lsls	r3, r3, #1
 80111e0:	3901      	subs	r1, #1
 80111e2:	e788      	b.n	80110f6 <__ieee754_fmod+0xb6>
 80111e4:	0023      	movs	r3, r4
 80111e6:	433b      	orrs	r3, r7
 80111e8:	d102      	bne.n	80111f0 <__ieee754_fmod+0x1b0>
 80111ea:	4b18      	ldr	r3, [pc, #96]	@ (801124c <__ieee754_fmod+0x20c>)
 80111ec:	9a02      	ldr	r2, [sp, #8]
 80111ee:	e758      	b.n	80110a2 <__ieee754_fmod+0x62>
 80111f0:	0064      	lsls	r4, r4, #1
 80111f2:	0ffa      	lsrs	r2, r7, #31
 80111f4:	18a2      	adds	r2, r4, r2
 80111f6:	007b      	lsls	r3, r7, #1
 80111f8:	e7f2      	b.n	80111e0 <__ieee754_fmod+0x1a0>
 80111fa:	0fdc      	lsrs	r4, r3, #31
 80111fc:	0052      	lsls	r2, r2, #1
 80111fe:	1912      	adds	r2, r2, r4
 8011200:	005b      	lsls	r3, r3, #1
 8011202:	3801      	subs	r0, #1
 8011204:	e788      	b.n	8011118 <__ieee754_fmod+0xd8>
 8011206:	4913      	ldr	r1, [pc, #76]	@ (8011254 <__ieee754_fmod+0x214>)
 8011208:	1a0e      	subs	r6, r1, r0
 801120a:	2e14      	cmp	r6, #20
 801120c:	dc0b      	bgt.n	8011226 <__ieee754_fmod+0x1e6>
 801120e:	40f3      	lsrs	r3, r6
 8011210:	0019      	movs	r1, r3
 8011212:	4b14      	ldr	r3, [pc, #80]	@ (8011264 <__ieee754_fmod+0x224>)
 8011214:	18c0      	adds	r0, r0, r3
 8011216:	0013      	movs	r3, r2
 8011218:	4083      	lsls	r3, r0
 801121a:	4132      	asrs	r2, r6
 801121c:	430b      	orrs	r3, r1
 801121e:	9c02      	ldr	r4, [sp, #8]
 8011220:	4314      	orrs	r4, r2
 8011222:	0021      	movs	r1, r4
 8011224:	e786      	b.n	8011134 <__ieee754_fmod+0xf4>
 8011226:	2e1f      	cmp	r6, #31
 8011228:	dc06      	bgt.n	8011238 <__ieee754_fmod+0x1f8>
 801122a:	490e      	ldr	r1, [pc, #56]	@ (8011264 <__ieee754_fmod+0x224>)
 801122c:	40f3      	lsrs	r3, r6
 801122e:	1840      	adds	r0, r0, r1
 8011230:	4082      	lsls	r2, r0
 8011232:	4313      	orrs	r3, r2
 8011234:	9a02      	ldr	r2, [sp, #8]
 8011236:	e7f2      	b.n	801121e <__ieee754_fmod+0x1de>
 8011238:	4b0b      	ldr	r3, [pc, #44]	@ (8011268 <__ieee754_fmod+0x228>)
 801123a:	1a1b      	subs	r3, r3, r0
 801123c:	411a      	asrs	r2, r3
 801123e:	0013      	movs	r3, r2
 8011240:	e7f8      	b.n	8011234 <__ieee754_fmod+0x1f4>
 8011242:	46c0      	nop			@ (mov r8, r8)
 8011244:	7fefffff 	.word	0x7fefffff
 8011248:	7ff00000 	.word	0x7ff00000
 801124c:	0801c2b0 	.word	0x0801c2b0
 8011250:	fffffbed 	.word	0xfffffbed
 8011254:	fffffc02 	.word	0xfffffc02
 8011258:	fff00000 	.word	0xfff00000
 801125c:	000003ff 	.word	0x000003ff
 8011260:	fffffc01 	.word	0xfffffc01
 8011264:	0000041e 	.word	0x0000041e
 8011268:	fffffbe2 	.word	0xfffffbe2

0801126c <_init>:
 801126c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801126e:	46c0      	nop			@ (mov r8, r8)
 8011270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011272:	bc08      	pop	{r3}
 8011274:	469e      	mov	lr, r3
 8011276:	4770      	bx	lr

08011278 <_fini>:
 8011278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801127a:	46c0      	nop			@ (mov r8, r8)
 801127c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801127e:	bc08      	pop	{r3}
 8011280:	469e      	mov	lr, r3
 8011282:	4770      	bx	lr
 8011284:	0000      	movs	r0, r0
	...

08011288 <__FLASH_Program_Fast_veneer>:
 8011288:	b401      	push	{r0}
 801128a:	4802      	ldr	r0, [pc, #8]	@ (8011294 <__FLASH_Program_Fast_veneer+0xc>)
 801128c:	4684      	mov	ip, r0
 801128e:	bc01      	pop	{r0}
 8011290:	4760      	bx	ip
 8011292:	bf00      	nop
 8011294:	200001e9 	.word	0x200001e9

Disassembly of section .data:

20000000 <checkTime>:
20000000:	                                         ..

20000002 <currentMenu>:
20000002:	                                         .

20000003 <canChange>:
20000003:	                                         .

20000004 <SystemCoreClock>:
20000004:	00f42400                                .$..

20000008 <uwTickPrio>:
20000008:	00000004                                ....

2000000c <uwTickFreq>:
2000000c:	00000001                                ....

20000010 <__sglue>:
20000010:	00000000 00000003 20001508              ........... 

2000001c <__global_locale>:
2000001c:	00000043 00000000 00000000 00000000     C...............
	...
2000003c:	00000043 00000000 00000000 00000000     C...............
	...
2000005c:	00000043 00000000 00000000 00000000     C...............
	...
2000007c:	00000043 00000000 00000000 00000000     C...............
	...
2000009c:	00000043 00000000 00000000 00000000     C...............
	...
200000bc:	00000043 00000000 00000000 00000000     C...............
	...
200000dc:	00000043 00000000 00000000 00000000     C...............
	...
200000fc:	0800ff71 0800f599 00000000 0801bf58     q...........X...
2000010c:	0801bef4 0801c2ae 0801c2ae 0801c2ae     ................
2000011c:	0801c2ae 0801c2ae 0801c2ae 0801c2ae     ................
2000012c:	0801c2ae 0801c2ae ffffffff ffffffff     ................
2000013c:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
20000164:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

20000188 <_impure_ptr>:
20000188:	2000018c                                ... 

2000018c <_impure_data>:
2000018c:	00000000 20001508 20001570 200015d8     ....... p.. ... 
	...

200001d8 <tiny>:
200001d8:	c2f8f359 01a56e1f                       Y....n..

200001e0 <one>:
200001e0:	00000000 3ff00000                       .......?

200001e8 <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
200001e8:	b580      	push	{r7, lr}
200001ea:	b088      	sub	sp, #32
200001ec:	af00      	add	r7, sp, #0
200001ee:	6078      	str	r0, [r7, #4]
200001f0:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
200001f2:	231f      	movs	r3, #31
200001f4:	18fb      	adds	r3, r7, r3
200001f6:	2200      	movs	r2, #0
200001f8:	701a      	strb	r2, [r3, #0]
  uint32_t dest = Address;
200001fa:	687b      	ldr	r3, [r7, #4]
200001fc:	61bb      	str	r3, [r7, #24]
  uint32_t src = DataAddress;
200001fe:	683b      	ldr	r3, [r7, #0]
20000200:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
20000202:	4b1a      	ldr	r3, [pc, #104]	@ (2000026c <FLASH_Program_Fast+0x84>)
20000204:	695a      	ldr	r2, [r3, #20]
20000206:	4b19      	ldr	r3, [pc, #100]	@ (2000026c <FLASH_Program_Fast+0x84>)
20000208:	2180      	movs	r1, #128	@ 0x80
2000020a:	02c9      	lsls	r1, r1, #11
2000020c:	430a      	orrs	r2, r1
2000020e:	615a      	str	r2, [r3, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
20000210:	f3ef 8310 	mrs	r3, PRIMASK
20000214:	60fb      	str	r3, [r7, #12]
  return(result);
20000216:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
20000218:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
2000021a:	b672      	cpsid	i
}
2000021c:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();

  /* Fast Program : 64 words */
  while (index < 64U)
2000021e:	e00f      	b.n	20000240 <FLASH_Program_Fast+0x58>
  {
    *(uint32_t *)dest = *(uint32_t *)src;
20000220:	697a      	ldr	r2, [r7, #20]
20000222:	69bb      	ldr	r3, [r7, #24]
20000224:	6812      	ldr	r2, [r2, #0]
20000226:	601a      	str	r2, [r3, #0]
    src += 4U;
20000228:	697b      	ldr	r3, [r7, #20]
2000022a:	3304      	adds	r3, #4
2000022c:	617b      	str	r3, [r7, #20]
    dest += 4U;
2000022e:	69bb      	ldr	r3, [r7, #24]
20000230:	3304      	adds	r3, #4
20000232:	61bb      	str	r3, [r7, #24]
    index++;
20000234:	211f      	movs	r1, #31
20000236:	187b      	adds	r3, r7, r1
20000238:	781a      	ldrb	r2, [r3, #0]
2000023a:	187b      	adds	r3, r7, r1
2000023c:	3201      	adds	r2, #1
2000023e:	701a      	strb	r2, [r3, #0]
  while (index < 64U)
20000240:	231f      	movs	r3, #31
20000242:	18fb      	adds	r3, r7, r3
20000244:	781b      	ldrb	r3, [r3, #0]
20000246:	2b3f      	cmp	r3, #63	@ 0x3f
20000248:	d9ea      	bls.n	20000220 <FLASH_Program_Fast+0x38>
  /* wait for BSY1 in order to be sure that flash operation is ended befoire
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */

#if defined(FLASH_DBANK_SUPPORT)
  while ((FLASH->SR & (FLASH_SR_BSY1 | FLASH_SR_BSY2)) != 0x00U)
2000024a:	46c0      	nop			@ (mov r8, r8)
2000024c:	4b07      	ldr	r3, [pc, #28]	@ (2000026c <FLASH_Program_Fast+0x84>)
2000024e:	691a      	ldr	r2, [r3, #16]
20000250:	23c0      	movs	r3, #192	@ 0xc0
20000252:	029b      	lsls	r3, r3, #10
20000254:	4013      	ands	r3, r2
20000256:	d1f9      	bne.n	2000024c <FLASH_Program_Fast+0x64>
20000258:	693b      	ldr	r3, [r7, #16]
2000025a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
2000025c:	68bb      	ldr	r3, [r7, #8]
2000025e:	f383 8810 	msr	PRIMASK, r3
}
20000262:	46c0      	nop			@ (mov r8, r8)
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
20000264:	46c0      	nop			@ (mov r8, r8)
20000266:	46bd      	mov	sp, r7
20000268:	b008      	add	sp, #32
2000026a:	bd80      	pop	{r7, pc}
2000026c:	40022000 	.word	0x40022000
