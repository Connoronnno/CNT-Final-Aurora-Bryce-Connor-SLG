
ynotag.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011500  080000c0  080000c0  000010c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000b030  080115c0  080115c0  000125c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c5f0  0801c5f0  0001e260  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801c5f0  0801c5f0  0001d5f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c5f8  0801c5f8  0001e260  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c5f8  0801c5f8  0001d5f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801c5fc  0801c5fc  0001d5fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000260  20000000  0801c600  0001e000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          000013e4  20000260  0801c860  0001e260  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001644  0801c860  0001e644  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0001e260  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cb9c  00000000  00000000  0001e288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c80  00000000  00000000  0003ae24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a70  00000000  00000000  0003eaa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000156a  00000000  00000000  00040518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000205a3  00000000  00000000  00041a82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020b58  00000000  00000000  00062025  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cbf3b  00000000  00000000  00082b7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014eab8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000796c  00000000  00000000  0014eafc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000085  00000000  00000000  00156468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000260 	.word	0x20000260
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08011598 	.word	0x08011598

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000264 	.word	0x20000264
 8000104:	08011598 	.word	0x08011598

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <strlen>:
 800011c:	2300      	movs	r3, #0
 800011e:	5cc2      	ldrb	r2, [r0, r3]
 8000120:	3301      	adds	r3, #1
 8000122:	2a00      	cmp	r2, #0
 8000124:	d1fb      	bne.n	800011e <strlen+0x2>
 8000126:	1e58      	subs	r0, r3, #1
 8000128:	4770      	bx	lr
	...

0800012c <__gnu_thumb1_case_uqi>:
 800012c:	b402      	push	{r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	5c09      	ldrb	r1, [r1, r0]
 8000136:	0049      	lsls	r1, r1, #1
 8000138:	448e      	add	lr, r1
 800013a:	bc02      	pop	{r1}
 800013c:	4770      	bx	lr
 800013e:	46c0      	nop			@ (mov r8, r8)

08000140 <__gnu_thumb1_case_shi>:
 8000140:	b403      	push	{r0, r1}
 8000142:	4671      	mov	r1, lr
 8000144:	0849      	lsrs	r1, r1, #1
 8000146:	0040      	lsls	r0, r0, #1
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	5e09      	ldrsh	r1, [r1, r0]
 800014c:	0049      	lsls	r1, r1, #1
 800014e:	448e      	add	lr, r1
 8000150:	bc03      	pop	{r0, r1}
 8000152:	4770      	bx	lr

08000154 <__udivsi3>:
 8000154:	2200      	movs	r2, #0
 8000156:	0843      	lsrs	r3, r0, #1
 8000158:	428b      	cmp	r3, r1
 800015a:	d374      	bcc.n	8000246 <__udivsi3+0xf2>
 800015c:	0903      	lsrs	r3, r0, #4
 800015e:	428b      	cmp	r3, r1
 8000160:	d35f      	bcc.n	8000222 <__udivsi3+0xce>
 8000162:	0a03      	lsrs	r3, r0, #8
 8000164:	428b      	cmp	r3, r1
 8000166:	d344      	bcc.n	80001f2 <__udivsi3+0x9e>
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d328      	bcc.n	80001c0 <__udivsi3+0x6c>
 800016e:	0c03      	lsrs	r3, r0, #16
 8000170:	428b      	cmp	r3, r1
 8000172:	d30d      	bcc.n	8000190 <__udivsi3+0x3c>
 8000174:	22ff      	movs	r2, #255	@ 0xff
 8000176:	0209      	lsls	r1, r1, #8
 8000178:	ba12      	rev	r2, r2
 800017a:	0c03      	lsrs	r3, r0, #16
 800017c:	428b      	cmp	r3, r1
 800017e:	d302      	bcc.n	8000186 <__udivsi3+0x32>
 8000180:	1212      	asrs	r2, r2, #8
 8000182:	0209      	lsls	r1, r1, #8
 8000184:	d065      	beq.n	8000252 <__udivsi3+0xfe>
 8000186:	0b03      	lsrs	r3, r0, #12
 8000188:	428b      	cmp	r3, r1
 800018a:	d319      	bcc.n	80001c0 <__udivsi3+0x6c>
 800018c:	e000      	b.n	8000190 <__udivsi3+0x3c>
 800018e:	0a09      	lsrs	r1, r1, #8
 8000190:	0bc3      	lsrs	r3, r0, #15
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x46>
 8000196:	03cb      	lsls	r3, r1, #15
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b83      	lsrs	r3, r0, #14
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x52>
 80001a2:	038b      	lsls	r3, r1, #14
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0b43      	lsrs	r3, r0, #13
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x5e>
 80001ae:	034b      	lsls	r3, r1, #13
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0b03      	lsrs	r3, r0, #12
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x6a>
 80001ba:	030b      	lsls	r3, r1, #12
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0ac3      	lsrs	r3, r0, #11
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x76>
 80001c6:	02cb      	lsls	r3, r1, #11
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a83      	lsrs	r3, r0, #10
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x82>
 80001d2:	028b      	lsls	r3, r1, #10
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	0a43      	lsrs	r3, r0, #9
 80001da:	428b      	cmp	r3, r1
 80001dc:	d301      	bcc.n	80001e2 <__udivsi3+0x8e>
 80001de:	024b      	lsls	r3, r1, #9
 80001e0:	1ac0      	subs	r0, r0, r3
 80001e2:	4152      	adcs	r2, r2
 80001e4:	0a03      	lsrs	r3, r0, #8
 80001e6:	428b      	cmp	r3, r1
 80001e8:	d301      	bcc.n	80001ee <__udivsi3+0x9a>
 80001ea:	020b      	lsls	r3, r1, #8
 80001ec:	1ac0      	subs	r0, r0, r3
 80001ee:	4152      	adcs	r2, r2
 80001f0:	d2cd      	bcs.n	800018e <__udivsi3+0x3a>
 80001f2:	09c3      	lsrs	r3, r0, #7
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xa8>
 80001f8:	01cb      	lsls	r3, r1, #7
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0983      	lsrs	r3, r0, #6
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xb4>
 8000204:	018b      	lsls	r3, r1, #6
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0943      	lsrs	r3, r0, #5
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xc0>
 8000210:	014b      	lsls	r3, r1, #5
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0903      	lsrs	r3, r0, #4
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xcc>
 800021c:	010b      	lsls	r3, r1, #4
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	08c3      	lsrs	r3, r0, #3
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xd8>
 8000228:	00cb      	lsls	r3, r1, #3
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	0883      	lsrs	r3, r0, #2
 8000230:	428b      	cmp	r3, r1
 8000232:	d301      	bcc.n	8000238 <__udivsi3+0xe4>
 8000234:	008b      	lsls	r3, r1, #2
 8000236:	1ac0      	subs	r0, r0, r3
 8000238:	4152      	adcs	r2, r2
 800023a:	0843      	lsrs	r3, r0, #1
 800023c:	428b      	cmp	r3, r1
 800023e:	d301      	bcc.n	8000244 <__udivsi3+0xf0>
 8000240:	004b      	lsls	r3, r1, #1
 8000242:	1ac0      	subs	r0, r0, r3
 8000244:	4152      	adcs	r2, r2
 8000246:	1a41      	subs	r1, r0, r1
 8000248:	d200      	bcs.n	800024c <__udivsi3+0xf8>
 800024a:	4601      	mov	r1, r0
 800024c:	4152      	adcs	r2, r2
 800024e:	4610      	mov	r0, r2
 8000250:	4770      	bx	lr
 8000252:	e7ff      	b.n	8000254 <__udivsi3+0x100>
 8000254:	b501      	push	{r0, lr}
 8000256:	2000      	movs	r0, #0
 8000258:	f000 f8f0 	bl	800043c <__aeabi_idiv0>
 800025c:	bd02      	pop	{r1, pc}
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__aeabi_uidivmod>:
 8000260:	2900      	cmp	r1, #0
 8000262:	d0f7      	beq.n	8000254 <__udivsi3+0x100>
 8000264:	e776      	b.n	8000154 <__udivsi3>
 8000266:	4770      	bx	lr

08000268 <__divsi3>:
 8000268:	4603      	mov	r3, r0
 800026a:	430b      	orrs	r3, r1
 800026c:	d47f      	bmi.n	800036e <__divsi3+0x106>
 800026e:	2200      	movs	r2, #0
 8000270:	0843      	lsrs	r3, r0, #1
 8000272:	428b      	cmp	r3, r1
 8000274:	d374      	bcc.n	8000360 <__divsi3+0xf8>
 8000276:	0903      	lsrs	r3, r0, #4
 8000278:	428b      	cmp	r3, r1
 800027a:	d35f      	bcc.n	800033c <__divsi3+0xd4>
 800027c:	0a03      	lsrs	r3, r0, #8
 800027e:	428b      	cmp	r3, r1
 8000280:	d344      	bcc.n	800030c <__divsi3+0xa4>
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d328      	bcc.n	80002da <__divsi3+0x72>
 8000288:	0c03      	lsrs	r3, r0, #16
 800028a:	428b      	cmp	r3, r1
 800028c:	d30d      	bcc.n	80002aa <__divsi3+0x42>
 800028e:	22ff      	movs	r2, #255	@ 0xff
 8000290:	0209      	lsls	r1, r1, #8
 8000292:	ba12      	rev	r2, r2
 8000294:	0c03      	lsrs	r3, r0, #16
 8000296:	428b      	cmp	r3, r1
 8000298:	d302      	bcc.n	80002a0 <__divsi3+0x38>
 800029a:	1212      	asrs	r2, r2, #8
 800029c:	0209      	lsls	r1, r1, #8
 800029e:	d065      	beq.n	800036c <__divsi3+0x104>
 80002a0:	0b03      	lsrs	r3, r0, #12
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d319      	bcc.n	80002da <__divsi3+0x72>
 80002a6:	e000      	b.n	80002aa <__divsi3+0x42>
 80002a8:	0a09      	lsrs	r1, r1, #8
 80002aa:	0bc3      	lsrs	r3, r0, #15
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x4c>
 80002b0:	03cb      	lsls	r3, r1, #15
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b83      	lsrs	r3, r0, #14
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x58>
 80002bc:	038b      	lsls	r3, r1, #14
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0b43      	lsrs	r3, r0, #13
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x64>
 80002c8:	034b      	lsls	r3, r1, #13
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0b03      	lsrs	r3, r0, #12
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x70>
 80002d4:	030b      	lsls	r3, r1, #12
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0ac3      	lsrs	r3, r0, #11
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x7c>
 80002e0:	02cb      	lsls	r3, r1, #11
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a83      	lsrs	r3, r0, #10
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0x88>
 80002ec:	028b      	lsls	r3, r1, #10
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	0a43      	lsrs	r3, r0, #9
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d301      	bcc.n	80002fc <__divsi3+0x94>
 80002f8:	024b      	lsls	r3, r1, #9
 80002fa:	1ac0      	subs	r0, r0, r3
 80002fc:	4152      	adcs	r2, r2
 80002fe:	0a03      	lsrs	r3, r0, #8
 8000300:	428b      	cmp	r3, r1
 8000302:	d301      	bcc.n	8000308 <__divsi3+0xa0>
 8000304:	020b      	lsls	r3, r1, #8
 8000306:	1ac0      	subs	r0, r0, r3
 8000308:	4152      	adcs	r2, r2
 800030a:	d2cd      	bcs.n	80002a8 <__divsi3+0x40>
 800030c:	09c3      	lsrs	r3, r0, #7
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xae>
 8000312:	01cb      	lsls	r3, r1, #7
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0983      	lsrs	r3, r0, #6
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xba>
 800031e:	018b      	lsls	r3, r1, #6
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0943      	lsrs	r3, r0, #5
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xc6>
 800032a:	014b      	lsls	r3, r1, #5
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xd2>
 8000336:	010b      	lsls	r3, r1, #4
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	08c3      	lsrs	r3, r0, #3
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xde>
 8000342:	00cb      	lsls	r3, r1, #3
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	0883      	lsrs	r3, r0, #2
 800034a:	428b      	cmp	r3, r1
 800034c:	d301      	bcc.n	8000352 <__divsi3+0xea>
 800034e:	008b      	lsls	r3, r1, #2
 8000350:	1ac0      	subs	r0, r0, r3
 8000352:	4152      	adcs	r2, r2
 8000354:	0843      	lsrs	r3, r0, #1
 8000356:	428b      	cmp	r3, r1
 8000358:	d301      	bcc.n	800035e <__divsi3+0xf6>
 800035a:	004b      	lsls	r3, r1, #1
 800035c:	1ac0      	subs	r0, r0, r3
 800035e:	4152      	adcs	r2, r2
 8000360:	1a41      	subs	r1, r0, r1
 8000362:	d200      	bcs.n	8000366 <__divsi3+0xfe>
 8000364:	4601      	mov	r1, r0
 8000366:	4152      	adcs	r2, r2
 8000368:	4610      	mov	r0, r2
 800036a:	4770      	bx	lr
 800036c:	e05d      	b.n	800042a <__divsi3+0x1c2>
 800036e:	0fca      	lsrs	r2, r1, #31
 8000370:	d000      	beq.n	8000374 <__divsi3+0x10c>
 8000372:	4249      	negs	r1, r1
 8000374:	1003      	asrs	r3, r0, #32
 8000376:	d300      	bcc.n	800037a <__divsi3+0x112>
 8000378:	4240      	negs	r0, r0
 800037a:	4053      	eors	r3, r2
 800037c:	2200      	movs	r2, #0
 800037e:	469c      	mov	ip, r3
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d32d      	bcc.n	80003e2 <__divsi3+0x17a>
 8000386:	0a03      	lsrs	r3, r0, #8
 8000388:	428b      	cmp	r3, r1
 800038a:	d312      	bcc.n	80003b2 <__divsi3+0x14a>
 800038c:	22fc      	movs	r2, #252	@ 0xfc
 800038e:	0189      	lsls	r1, r1, #6
 8000390:	ba12      	rev	r2, r2
 8000392:	0a03      	lsrs	r3, r0, #8
 8000394:	428b      	cmp	r3, r1
 8000396:	d30c      	bcc.n	80003b2 <__divsi3+0x14a>
 8000398:	0189      	lsls	r1, r1, #6
 800039a:	1192      	asrs	r2, r2, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d308      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a0:	0189      	lsls	r1, r1, #6
 80003a2:	1192      	asrs	r2, r2, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d304      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a8:	0189      	lsls	r1, r1, #6
 80003aa:	d03a      	beq.n	8000422 <__divsi3+0x1ba>
 80003ac:	1192      	asrs	r2, r2, #6
 80003ae:	e000      	b.n	80003b2 <__divsi3+0x14a>
 80003b0:	0989      	lsrs	r1, r1, #6
 80003b2:	09c3      	lsrs	r3, r0, #7
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x154>
 80003b8:	01cb      	lsls	r3, r1, #7
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0983      	lsrs	r3, r0, #6
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x160>
 80003c4:	018b      	lsls	r3, r1, #6
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	0943      	lsrs	r3, r0, #5
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x16c>
 80003d0:	014b      	lsls	r3, r1, #5
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0903      	lsrs	r3, r0, #4
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x178>
 80003dc:	010b      	lsls	r3, r1, #4
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	08c3      	lsrs	r3, r0, #3
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x184>
 80003e8:	00cb      	lsls	r3, r1, #3
 80003ea:	1ac0      	subs	r0, r0, r3
 80003ec:	4152      	adcs	r2, r2
 80003ee:	0883      	lsrs	r3, r0, #2
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d301      	bcc.n	80003f8 <__divsi3+0x190>
 80003f4:	008b      	lsls	r3, r1, #2
 80003f6:	1ac0      	subs	r0, r0, r3
 80003f8:	4152      	adcs	r2, r2
 80003fa:	d2d9      	bcs.n	80003b0 <__divsi3+0x148>
 80003fc:	0843      	lsrs	r3, r0, #1
 80003fe:	428b      	cmp	r3, r1
 8000400:	d301      	bcc.n	8000406 <__divsi3+0x19e>
 8000402:	004b      	lsls	r3, r1, #1
 8000404:	1ac0      	subs	r0, r0, r3
 8000406:	4152      	adcs	r2, r2
 8000408:	1a41      	subs	r1, r0, r1
 800040a:	d200      	bcs.n	800040e <__divsi3+0x1a6>
 800040c:	4601      	mov	r1, r0
 800040e:	4663      	mov	r3, ip
 8000410:	4152      	adcs	r2, r2
 8000412:	105b      	asrs	r3, r3, #1
 8000414:	4610      	mov	r0, r2
 8000416:	d301      	bcc.n	800041c <__divsi3+0x1b4>
 8000418:	4240      	negs	r0, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d500      	bpl.n	8000420 <__divsi3+0x1b8>
 800041e:	4249      	negs	r1, r1
 8000420:	4770      	bx	lr
 8000422:	4663      	mov	r3, ip
 8000424:	105b      	asrs	r3, r3, #1
 8000426:	d300      	bcc.n	800042a <__divsi3+0x1c2>
 8000428:	4240      	negs	r0, r0
 800042a:	b501      	push	{r0, lr}
 800042c:	2000      	movs	r0, #0
 800042e:	f000 f805 	bl	800043c <__aeabi_idiv0>
 8000432:	bd02      	pop	{r1, pc}

08000434 <__aeabi_idivmod>:
 8000434:	2900      	cmp	r1, #0
 8000436:	d0f8      	beq.n	800042a <__divsi3+0x1c2>
 8000438:	e716      	b.n	8000268 <__divsi3>
 800043a:	4770      	bx	lr

0800043c <__aeabi_idiv0>:
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			@ (mov r8, r8)

08000440 <__aeabi_cdrcmple>:
 8000440:	4684      	mov	ip, r0
 8000442:	0010      	movs	r0, r2
 8000444:	4662      	mov	r2, ip
 8000446:	468c      	mov	ip, r1
 8000448:	0019      	movs	r1, r3
 800044a:	4663      	mov	r3, ip
 800044c:	e000      	b.n	8000450 <__aeabi_cdcmpeq>
 800044e:	46c0      	nop			@ (mov r8, r8)

08000450 <__aeabi_cdcmpeq>:
 8000450:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000452:	f002 f9f3 	bl	800283c <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	d401      	bmi.n	800045e <__aeabi_cdcmpeq+0xe>
 800045a:	2100      	movs	r1, #0
 800045c:	42c8      	cmn	r0, r1
 800045e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000460 <__aeabi_dcmpeq>:
 8000460:	b510      	push	{r4, lr}
 8000462:	f002 f937 	bl	80026d4 <__eqdf2>
 8000466:	4240      	negs	r0, r0
 8000468:	3001      	adds	r0, #1
 800046a:	bd10      	pop	{r4, pc}

0800046c <__aeabi_dcmplt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f002 f9e5 	bl	800283c <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	db01      	blt.n	800047a <__aeabi_dcmplt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmple>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f002 f9db 	bl	800283c <__ledf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dd01      	ble.n	800048e <__aeabi_dcmple+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpgt>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f002 f961 	bl	800275c <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	dc01      	bgt.n	80004a2 <__aeabi_dcmpgt+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_dcmpge>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	f002 f957 	bl	800275c <__gedf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	da01      	bge.n	80004b6 <__aeabi_dcmpge+0xe>
 80004b2:	2000      	movs	r0, #0
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	2001      	movs	r0, #1
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			@ (mov r8, r8)

080004bc <__aeabi_cfrcmple>:
 80004bc:	4684      	mov	ip, r0
 80004be:	0008      	movs	r0, r1
 80004c0:	4661      	mov	r1, ip
 80004c2:	e7ff      	b.n	80004c4 <__aeabi_cfcmpeq>

080004c4 <__aeabi_cfcmpeq>:
 80004c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004c6:	f000 fd6b 	bl	8000fa0 <__lesf2>
 80004ca:	2800      	cmp	r0, #0
 80004cc:	d401      	bmi.n	80004d2 <__aeabi_cfcmpeq+0xe>
 80004ce:	2100      	movs	r1, #0
 80004d0:	42c8      	cmn	r0, r1
 80004d2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004d4 <__aeabi_fcmpeq>:
 80004d4:	b510      	push	{r4, lr}
 80004d6:	f000 fcf3 	bl	8000ec0 <__eqsf2>
 80004da:	4240      	negs	r0, r0
 80004dc:	3001      	adds	r0, #1
 80004de:	bd10      	pop	{r4, pc}

080004e0 <__aeabi_fcmplt>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fd5d 	bl	8000fa0 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	db01      	blt.n	80004ee <__aeabi_fcmplt+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			@ (mov r8, r8)

080004f4 <__aeabi_fcmple>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fd53 	bl	8000fa0 <__lesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dd01      	ble.n	8000502 <__aeabi_fcmple+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			@ (mov r8, r8)

08000508 <__aeabi_fcmpgt>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fd01 	bl	8000f10 <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	dc01      	bgt.n	8000516 <__aeabi_fcmpgt+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			@ (mov r8, r8)

0800051c <__aeabi_fcmpge>:
 800051c:	b510      	push	{r4, lr}
 800051e:	f000 fcf7 	bl	8000f10 <__gesf2>
 8000522:	2800      	cmp	r0, #0
 8000524:	da01      	bge.n	800052a <__aeabi_fcmpge+0xe>
 8000526:	2000      	movs	r0, #0
 8000528:	bd10      	pop	{r4, pc}
 800052a:	2001      	movs	r0, #1
 800052c:	bd10      	pop	{r4, pc}
 800052e:	46c0      	nop			@ (mov r8, r8)

08000530 <__aeabi_uldivmod>:
 8000530:	2b00      	cmp	r3, #0
 8000532:	d111      	bne.n	8000558 <__aeabi_uldivmod+0x28>
 8000534:	2a00      	cmp	r2, #0
 8000536:	d10f      	bne.n	8000558 <__aeabi_uldivmod+0x28>
 8000538:	2900      	cmp	r1, #0
 800053a:	d100      	bne.n	800053e <__aeabi_uldivmod+0xe>
 800053c:	2800      	cmp	r0, #0
 800053e:	d002      	beq.n	8000546 <__aeabi_uldivmod+0x16>
 8000540:	2100      	movs	r1, #0
 8000542:	43c9      	mvns	r1, r1
 8000544:	0008      	movs	r0, r1
 8000546:	b407      	push	{r0, r1, r2}
 8000548:	4802      	ldr	r0, [pc, #8]	@ (8000554 <__aeabi_uldivmod+0x24>)
 800054a:	a102      	add	r1, pc, #8	@ (adr r1, 8000554 <__aeabi_uldivmod+0x24>)
 800054c:	1840      	adds	r0, r0, r1
 800054e:	9002      	str	r0, [sp, #8]
 8000550:	bd03      	pop	{r0, r1, pc}
 8000552:	46c0      	nop			@ (mov r8, r8)
 8000554:	fffffee9 	.word	0xfffffee9
 8000558:	b403      	push	{r0, r1}
 800055a:	4668      	mov	r0, sp
 800055c:	b501      	push	{r0, lr}
 800055e:	9802      	ldr	r0, [sp, #8]
 8000560:	f000 f8da 	bl	8000718 <__udivmoddi4>
 8000564:	9b01      	ldr	r3, [sp, #4]
 8000566:	469e      	mov	lr, r3
 8000568:	b002      	add	sp, #8
 800056a:	bc0c      	pop	{r2, r3}
 800056c:	4770      	bx	lr
 800056e:	46c0      	nop			@ (mov r8, r8)

08000570 <__aeabi_lmul>:
 8000570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000572:	46ce      	mov	lr, r9
 8000574:	4699      	mov	r9, r3
 8000576:	0c03      	lsrs	r3, r0, #16
 8000578:	469c      	mov	ip, r3
 800057a:	0413      	lsls	r3, r2, #16
 800057c:	4647      	mov	r7, r8
 800057e:	0c1b      	lsrs	r3, r3, #16
 8000580:	001d      	movs	r5, r3
 8000582:	000e      	movs	r6, r1
 8000584:	4661      	mov	r1, ip
 8000586:	0404      	lsls	r4, r0, #16
 8000588:	0c24      	lsrs	r4, r4, #16
 800058a:	b580      	push	{r7, lr}
 800058c:	0007      	movs	r7, r0
 800058e:	0c10      	lsrs	r0, r2, #16
 8000590:	434b      	muls	r3, r1
 8000592:	4365      	muls	r5, r4
 8000594:	4341      	muls	r1, r0
 8000596:	4360      	muls	r0, r4
 8000598:	0c2c      	lsrs	r4, r5, #16
 800059a:	18c0      	adds	r0, r0, r3
 800059c:	1824      	adds	r4, r4, r0
 800059e:	468c      	mov	ip, r1
 80005a0:	42a3      	cmp	r3, r4
 80005a2:	d903      	bls.n	80005ac <__aeabi_lmul+0x3c>
 80005a4:	2380      	movs	r3, #128	@ 0x80
 80005a6:	025b      	lsls	r3, r3, #9
 80005a8:	4698      	mov	r8, r3
 80005aa:	44c4      	add	ip, r8
 80005ac:	4649      	mov	r1, r9
 80005ae:	4379      	muls	r1, r7
 80005b0:	4356      	muls	r6, r2
 80005b2:	0c23      	lsrs	r3, r4, #16
 80005b4:	042d      	lsls	r5, r5, #16
 80005b6:	0c2d      	lsrs	r5, r5, #16
 80005b8:	1989      	adds	r1, r1, r6
 80005ba:	4463      	add	r3, ip
 80005bc:	0424      	lsls	r4, r4, #16
 80005be:	1960      	adds	r0, r4, r5
 80005c0:	18c9      	adds	r1, r1, r3
 80005c2:	bcc0      	pop	{r6, r7}
 80005c4:	46b9      	mov	r9, r7
 80005c6:	46b0      	mov	r8, r6
 80005c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005ca:	46c0      	nop			@ (mov r8, r8)

080005cc <__aeabi_f2uiz>:
 80005cc:	219e      	movs	r1, #158	@ 0x9e
 80005ce:	b510      	push	{r4, lr}
 80005d0:	05c9      	lsls	r1, r1, #23
 80005d2:	1c04      	adds	r4, r0, #0
 80005d4:	f7ff ffa2 	bl	800051c <__aeabi_fcmpge>
 80005d8:	2800      	cmp	r0, #0
 80005da:	d103      	bne.n	80005e4 <__aeabi_f2uiz+0x18>
 80005dc:	1c20      	adds	r0, r4, #0
 80005de:	f001 f8e5 	bl	80017ac <__aeabi_f2iz>
 80005e2:	bd10      	pop	{r4, pc}
 80005e4:	219e      	movs	r1, #158	@ 0x9e
 80005e6:	1c20      	adds	r0, r4, #0
 80005e8:	05c9      	lsls	r1, r1, #23
 80005ea:	f000 fe7b 	bl	80012e4 <__aeabi_fsub>
 80005ee:	f001 f8dd 	bl	80017ac <__aeabi_f2iz>
 80005f2:	2380      	movs	r3, #128	@ 0x80
 80005f4:	061b      	lsls	r3, r3, #24
 80005f6:	469c      	mov	ip, r3
 80005f8:	4460      	add	r0, ip
 80005fa:	e7f2      	b.n	80005e2 <__aeabi_f2uiz+0x16>

080005fc <__aeabi_d2uiz>:
 80005fc:	b570      	push	{r4, r5, r6, lr}
 80005fe:	2200      	movs	r2, #0
 8000600:	4b0c      	ldr	r3, [pc, #48]	@ (8000634 <__aeabi_d2uiz+0x38>)
 8000602:	0004      	movs	r4, r0
 8000604:	000d      	movs	r5, r1
 8000606:	f7ff ff4f 	bl	80004a8 <__aeabi_dcmpge>
 800060a:	2800      	cmp	r0, #0
 800060c:	d104      	bne.n	8000618 <__aeabi_d2uiz+0x1c>
 800060e:	0020      	movs	r0, r4
 8000610:	0029      	movs	r1, r5
 8000612:	f003 f893 	bl	800373c <__aeabi_d2iz>
 8000616:	bd70      	pop	{r4, r5, r6, pc}
 8000618:	4b06      	ldr	r3, [pc, #24]	@ (8000634 <__aeabi_d2uiz+0x38>)
 800061a:	2200      	movs	r2, #0
 800061c:	0020      	movs	r0, r4
 800061e:	0029      	movs	r1, r5
 8000620:	f002 fc60 	bl	8002ee4 <__aeabi_dsub>
 8000624:	f003 f88a 	bl	800373c <__aeabi_d2iz>
 8000628:	2380      	movs	r3, #128	@ 0x80
 800062a:	061b      	lsls	r3, r3, #24
 800062c:	469c      	mov	ip, r3
 800062e:	4460      	add	r0, ip
 8000630:	e7f1      	b.n	8000616 <__aeabi_d2uiz+0x1a>
 8000632:	46c0      	nop			@ (mov r8, r8)
 8000634:	41e00000 	.word	0x41e00000

08000638 <__aeabi_d2lz>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	2200      	movs	r2, #0
 800063c:	2300      	movs	r3, #0
 800063e:	0004      	movs	r4, r0
 8000640:	000d      	movs	r5, r1
 8000642:	f7ff ff13 	bl	800046c <__aeabi_dcmplt>
 8000646:	2800      	cmp	r0, #0
 8000648:	d108      	bne.n	800065c <__aeabi_d2lz+0x24>
 800064a:	0020      	movs	r0, r4
 800064c:	0029      	movs	r1, r5
 800064e:	f000 f82f 	bl	80006b0 <__aeabi_d2ulz>
 8000652:	0002      	movs	r2, r0
 8000654:	000b      	movs	r3, r1
 8000656:	0010      	movs	r0, r2
 8000658:	0019      	movs	r1, r3
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	2380      	movs	r3, #128	@ 0x80
 800065e:	061b      	lsls	r3, r3, #24
 8000660:	18e9      	adds	r1, r5, r3
 8000662:	0020      	movs	r0, r4
 8000664:	f000 f824 	bl	80006b0 <__aeabi_d2ulz>
 8000668:	2300      	movs	r3, #0
 800066a:	4242      	negs	r2, r0
 800066c:	418b      	sbcs	r3, r1
 800066e:	e7f2      	b.n	8000656 <__aeabi_d2lz+0x1e>

08000670 <__aeabi_f2ulz>:
 8000670:	b570      	push	{r4, r5, r6, lr}
 8000672:	f003 f8f1 	bl	8003858 <__aeabi_f2d>
 8000676:	2200      	movs	r2, #0
 8000678:	4b0b      	ldr	r3, [pc, #44]	@ (80006a8 <__aeabi_f2ulz+0x38>)
 800067a:	000d      	movs	r5, r1
 800067c:	0004      	movs	r4, r0
 800067e:	f002 f94b 	bl	8002918 <__aeabi_dmul>
 8000682:	f7ff ffbb 	bl	80005fc <__aeabi_d2uiz>
 8000686:	0006      	movs	r6, r0
 8000688:	f003 f8c2 	bl	8003810 <__aeabi_ui2d>
 800068c:	2200      	movs	r2, #0
 800068e:	4b07      	ldr	r3, [pc, #28]	@ (80006ac <__aeabi_f2ulz+0x3c>)
 8000690:	f002 f942 	bl	8002918 <__aeabi_dmul>
 8000694:	0002      	movs	r2, r0
 8000696:	000b      	movs	r3, r1
 8000698:	0020      	movs	r0, r4
 800069a:	0029      	movs	r1, r5
 800069c:	f002 fc22 	bl	8002ee4 <__aeabi_dsub>
 80006a0:	f7ff ffac 	bl	80005fc <__aeabi_d2uiz>
 80006a4:	0031      	movs	r1, r6
 80006a6:	bd70      	pop	{r4, r5, r6, pc}
 80006a8:	3df00000 	.word	0x3df00000
 80006ac:	41f00000 	.word	0x41f00000

080006b0 <__aeabi_d2ulz>:
 80006b0:	b570      	push	{r4, r5, r6, lr}
 80006b2:	2200      	movs	r2, #0
 80006b4:	4b0b      	ldr	r3, [pc, #44]	@ (80006e4 <__aeabi_d2ulz+0x34>)
 80006b6:	000d      	movs	r5, r1
 80006b8:	0004      	movs	r4, r0
 80006ba:	f002 f92d 	bl	8002918 <__aeabi_dmul>
 80006be:	f7ff ff9d 	bl	80005fc <__aeabi_d2uiz>
 80006c2:	0006      	movs	r6, r0
 80006c4:	f003 f8a4 	bl	8003810 <__aeabi_ui2d>
 80006c8:	2200      	movs	r2, #0
 80006ca:	4b07      	ldr	r3, [pc, #28]	@ (80006e8 <__aeabi_d2ulz+0x38>)
 80006cc:	f002 f924 	bl	8002918 <__aeabi_dmul>
 80006d0:	0002      	movs	r2, r0
 80006d2:	000b      	movs	r3, r1
 80006d4:	0020      	movs	r0, r4
 80006d6:	0029      	movs	r1, r5
 80006d8:	f002 fc04 	bl	8002ee4 <__aeabi_dsub>
 80006dc:	f7ff ff8e 	bl	80005fc <__aeabi_d2uiz>
 80006e0:	0031      	movs	r1, r6
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	3df00000 	.word	0x3df00000
 80006e8:	41f00000 	.word	0x41f00000

080006ec <__aeabi_l2d>:
 80006ec:	b570      	push	{r4, r5, r6, lr}
 80006ee:	0006      	movs	r6, r0
 80006f0:	0008      	movs	r0, r1
 80006f2:	f003 f85f 	bl	80037b4 <__aeabi_i2d>
 80006f6:	2200      	movs	r2, #0
 80006f8:	4b06      	ldr	r3, [pc, #24]	@ (8000714 <__aeabi_l2d+0x28>)
 80006fa:	f002 f90d 	bl	8002918 <__aeabi_dmul>
 80006fe:	000d      	movs	r5, r1
 8000700:	0004      	movs	r4, r0
 8000702:	0030      	movs	r0, r6
 8000704:	f003 f884 	bl	8003810 <__aeabi_ui2d>
 8000708:	002b      	movs	r3, r5
 800070a:	0022      	movs	r2, r4
 800070c:	f001 f904 	bl	8001918 <__aeabi_dadd>
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	46c0      	nop			@ (mov r8, r8)
 8000714:	41f00000 	.word	0x41f00000

08000718 <__udivmoddi4>:
 8000718:	b5f0      	push	{r4, r5, r6, r7, lr}
 800071a:	4657      	mov	r7, sl
 800071c:	464e      	mov	r6, r9
 800071e:	4645      	mov	r5, r8
 8000720:	46de      	mov	lr, fp
 8000722:	b5e0      	push	{r5, r6, r7, lr}
 8000724:	0004      	movs	r4, r0
 8000726:	000d      	movs	r5, r1
 8000728:	4692      	mov	sl, r2
 800072a:	4699      	mov	r9, r3
 800072c:	b083      	sub	sp, #12
 800072e:	428b      	cmp	r3, r1
 8000730:	d830      	bhi.n	8000794 <__udivmoddi4+0x7c>
 8000732:	d02d      	beq.n	8000790 <__udivmoddi4+0x78>
 8000734:	4649      	mov	r1, r9
 8000736:	4650      	mov	r0, sl
 8000738:	f003 f976 	bl	8003a28 <__clzdi2>
 800073c:	0029      	movs	r1, r5
 800073e:	0006      	movs	r6, r0
 8000740:	0020      	movs	r0, r4
 8000742:	f003 f971 	bl	8003a28 <__clzdi2>
 8000746:	1a33      	subs	r3, r6, r0
 8000748:	4698      	mov	r8, r3
 800074a:	3b20      	subs	r3, #32
 800074c:	d434      	bmi.n	80007b8 <__udivmoddi4+0xa0>
 800074e:	469b      	mov	fp, r3
 8000750:	4653      	mov	r3, sl
 8000752:	465a      	mov	r2, fp
 8000754:	4093      	lsls	r3, r2
 8000756:	4642      	mov	r2, r8
 8000758:	001f      	movs	r7, r3
 800075a:	4653      	mov	r3, sl
 800075c:	4093      	lsls	r3, r2
 800075e:	001e      	movs	r6, r3
 8000760:	42af      	cmp	r7, r5
 8000762:	d83b      	bhi.n	80007dc <__udivmoddi4+0xc4>
 8000764:	42af      	cmp	r7, r5
 8000766:	d100      	bne.n	800076a <__udivmoddi4+0x52>
 8000768:	e079      	b.n	800085e <__udivmoddi4+0x146>
 800076a:	465b      	mov	r3, fp
 800076c:	1ba4      	subs	r4, r4, r6
 800076e:	41bd      	sbcs	r5, r7
 8000770:	2b00      	cmp	r3, #0
 8000772:	da00      	bge.n	8000776 <__udivmoddi4+0x5e>
 8000774:	e076      	b.n	8000864 <__udivmoddi4+0x14c>
 8000776:	2200      	movs	r2, #0
 8000778:	2300      	movs	r3, #0
 800077a:	9200      	str	r2, [sp, #0]
 800077c:	9301      	str	r3, [sp, #4]
 800077e:	2301      	movs	r3, #1
 8000780:	465a      	mov	r2, fp
 8000782:	4093      	lsls	r3, r2
 8000784:	9301      	str	r3, [sp, #4]
 8000786:	2301      	movs	r3, #1
 8000788:	4642      	mov	r2, r8
 800078a:	4093      	lsls	r3, r2
 800078c:	9300      	str	r3, [sp, #0]
 800078e:	e029      	b.n	80007e4 <__udivmoddi4+0xcc>
 8000790:	4282      	cmp	r2, r0
 8000792:	d9cf      	bls.n	8000734 <__udivmoddi4+0x1c>
 8000794:	2200      	movs	r2, #0
 8000796:	2300      	movs	r3, #0
 8000798:	9200      	str	r2, [sp, #0]
 800079a:	9301      	str	r3, [sp, #4]
 800079c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <__udivmoddi4+0x8e>
 80007a2:	601c      	str	r4, [r3, #0]
 80007a4:	605d      	str	r5, [r3, #4]
 80007a6:	9800      	ldr	r0, [sp, #0]
 80007a8:	9901      	ldr	r1, [sp, #4]
 80007aa:	b003      	add	sp, #12
 80007ac:	bcf0      	pop	{r4, r5, r6, r7}
 80007ae:	46bb      	mov	fp, r7
 80007b0:	46b2      	mov	sl, r6
 80007b2:	46a9      	mov	r9, r5
 80007b4:	46a0      	mov	r8, r4
 80007b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007b8:	4642      	mov	r2, r8
 80007ba:	469b      	mov	fp, r3
 80007bc:	2320      	movs	r3, #32
 80007be:	1a9b      	subs	r3, r3, r2
 80007c0:	4652      	mov	r2, sl
 80007c2:	40da      	lsrs	r2, r3
 80007c4:	4641      	mov	r1, r8
 80007c6:	0013      	movs	r3, r2
 80007c8:	464a      	mov	r2, r9
 80007ca:	408a      	lsls	r2, r1
 80007cc:	0017      	movs	r7, r2
 80007ce:	4642      	mov	r2, r8
 80007d0:	431f      	orrs	r7, r3
 80007d2:	4653      	mov	r3, sl
 80007d4:	4093      	lsls	r3, r2
 80007d6:	001e      	movs	r6, r3
 80007d8:	42af      	cmp	r7, r5
 80007da:	d9c3      	bls.n	8000764 <__udivmoddi4+0x4c>
 80007dc:	2200      	movs	r2, #0
 80007de:	2300      	movs	r3, #0
 80007e0:	9200      	str	r2, [sp, #0]
 80007e2:	9301      	str	r3, [sp, #4]
 80007e4:	4643      	mov	r3, r8
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d0d8      	beq.n	800079c <__udivmoddi4+0x84>
 80007ea:	07fb      	lsls	r3, r7, #31
 80007ec:	0872      	lsrs	r2, r6, #1
 80007ee:	431a      	orrs	r2, r3
 80007f0:	4646      	mov	r6, r8
 80007f2:	087b      	lsrs	r3, r7, #1
 80007f4:	e00e      	b.n	8000814 <__udivmoddi4+0xfc>
 80007f6:	42ab      	cmp	r3, r5
 80007f8:	d101      	bne.n	80007fe <__udivmoddi4+0xe6>
 80007fa:	42a2      	cmp	r2, r4
 80007fc:	d80c      	bhi.n	8000818 <__udivmoddi4+0x100>
 80007fe:	1aa4      	subs	r4, r4, r2
 8000800:	419d      	sbcs	r5, r3
 8000802:	2001      	movs	r0, #1
 8000804:	1924      	adds	r4, r4, r4
 8000806:	416d      	adcs	r5, r5
 8000808:	2100      	movs	r1, #0
 800080a:	3e01      	subs	r6, #1
 800080c:	1824      	adds	r4, r4, r0
 800080e:	414d      	adcs	r5, r1
 8000810:	2e00      	cmp	r6, #0
 8000812:	d006      	beq.n	8000822 <__udivmoddi4+0x10a>
 8000814:	42ab      	cmp	r3, r5
 8000816:	d9ee      	bls.n	80007f6 <__udivmoddi4+0xde>
 8000818:	3e01      	subs	r6, #1
 800081a:	1924      	adds	r4, r4, r4
 800081c:	416d      	adcs	r5, r5
 800081e:	2e00      	cmp	r6, #0
 8000820:	d1f8      	bne.n	8000814 <__udivmoddi4+0xfc>
 8000822:	9800      	ldr	r0, [sp, #0]
 8000824:	9901      	ldr	r1, [sp, #4]
 8000826:	465b      	mov	r3, fp
 8000828:	1900      	adds	r0, r0, r4
 800082a:	4169      	adcs	r1, r5
 800082c:	2b00      	cmp	r3, #0
 800082e:	db24      	blt.n	800087a <__udivmoddi4+0x162>
 8000830:	002b      	movs	r3, r5
 8000832:	465a      	mov	r2, fp
 8000834:	4644      	mov	r4, r8
 8000836:	40d3      	lsrs	r3, r2
 8000838:	002a      	movs	r2, r5
 800083a:	40e2      	lsrs	r2, r4
 800083c:	001c      	movs	r4, r3
 800083e:	465b      	mov	r3, fp
 8000840:	0015      	movs	r5, r2
 8000842:	2b00      	cmp	r3, #0
 8000844:	db2a      	blt.n	800089c <__udivmoddi4+0x184>
 8000846:	0026      	movs	r6, r4
 8000848:	409e      	lsls	r6, r3
 800084a:	0033      	movs	r3, r6
 800084c:	0026      	movs	r6, r4
 800084e:	4647      	mov	r7, r8
 8000850:	40be      	lsls	r6, r7
 8000852:	0032      	movs	r2, r6
 8000854:	1a80      	subs	r0, r0, r2
 8000856:	4199      	sbcs	r1, r3
 8000858:	9000      	str	r0, [sp, #0]
 800085a:	9101      	str	r1, [sp, #4]
 800085c:	e79e      	b.n	800079c <__udivmoddi4+0x84>
 800085e:	42a3      	cmp	r3, r4
 8000860:	d8bc      	bhi.n	80007dc <__udivmoddi4+0xc4>
 8000862:	e782      	b.n	800076a <__udivmoddi4+0x52>
 8000864:	4642      	mov	r2, r8
 8000866:	2320      	movs	r3, #32
 8000868:	2100      	movs	r1, #0
 800086a:	1a9b      	subs	r3, r3, r2
 800086c:	2200      	movs	r2, #0
 800086e:	9100      	str	r1, [sp, #0]
 8000870:	9201      	str	r2, [sp, #4]
 8000872:	2201      	movs	r2, #1
 8000874:	40da      	lsrs	r2, r3
 8000876:	9201      	str	r2, [sp, #4]
 8000878:	e785      	b.n	8000786 <__udivmoddi4+0x6e>
 800087a:	4642      	mov	r2, r8
 800087c:	2320      	movs	r3, #32
 800087e:	1a9b      	subs	r3, r3, r2
 8000880:	002a      	movs	r2, r5
 8000882:	4646      	mov	r6, r8
 8000884:	409a      	lsls	r2, r3
 8000886:	0023      	movs	r3, r4
 8000888:	40f3      	lsrs	r3, r6
 800088a:	4644      	mov	r4, r8
 800088c:	4313      	orrs	r3, r2
 800088e:	002a      	movs	r2, r5
 8000890:	40e2      	lsrs	r2, r4
 8000892:	001c      	movs	r4, r3
 8000894:	465b      	mov	r3, fp
 8000896:	0015      	movs	r5, r2
 8000898:	2b00      	cmp	r3, #0
 800089a:	dad4      	bge.n	8000846 <__udivmoddi4+0x12e>
 800089c:	4642      	mov	r2, r8
 800089e:	002f      	movs	r7, r5
 80008a0:	2320      	movs	r3, #32
 80008a2:	0026      	movs	r6, r4
 80008a4:	4097      	lsls	r7, r2
 80008a6:	1a9b      	subs	r3, r3, r2
 80008a8:	40de      	lsrs	r6, r3
 80008aa:	003b      	movs	r3, r7
 80008ac:	4333      	orrs	r3, r6
 80008ae:	e7cd      	b.n	800084c <__udivmoddi4+0x134>

080008b0 <__aeabi_fadd>:
 80008b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008b2:	024b      	lsls	r3, r1, #9
 80008b4:	0a5a      	lsrs	r2, r3, #9
 80008b6:	4694      	mov	ip, r2
 80008b8:	004a      	lsls	r2, r1, #1
 80008ba:	0fc9      	lsrs	r1, r1, #31
 80008bc:	46ce      	mov	lr, r9
 80008be:	4647      	mov	r7, r8
 80008c0:	4689      	mov	r9, r1
 80008c2:	0045      	lsls	r5, r0, #1
 80008c4:	0246      	lsls	r6, r0, #9
 80008c6:	0e2d      	lsrs	r5, r5, #24
 80008c8:	0e12      	lsrs	r2, r2, #24
 80008ca:	b580      	push	{r7, lr}
 80008cc:	0999      	lsrs	r1, r3, #6
 80008ce:	0a77      	lsrs	r7, r6, #9
 80008d0:	0fc4      	lsrs	r4, r0, #31
 80008d2:	09b6      	lsrs	r6, r6, #6
 80008d4:	1aab      	subs	r3, r5, r2
 80008d6:	454c      	cmp	r4, r9
 80008d8:	d020      	beq.n	800091c <__aeabi_fadd+0x6c>
 80008da:	2b00      	cmp	r3, #0
 80008dc:	dd0c      	ble.n	80008f8 <__aeabi_fadd+0x48>
 80008de:	2a00      	cmp	r2, #0
 80008e0:	d134      	bne.n	800094c <__aeabi_fadd+0x9c>
 80008e2:	2900      	cmp	r1, #0
 80008e4:	d02a      	beq.n	800093c <__aeabi_fadd+0x8c>
 80008e6:	1e5a      	subs	r2, r3, #1
 80008e8:	2b01      	cmp	r3, #1
 80008ea:	d100      	bne.n	80008ee <__aeabi_fadd+0x3e>
 80008ec:	e08f      	b.n	8000a0e <__aeabi_fadd+0x15e>
 80008ee:	2bff      	cmp	r3, #255	@ 0xff
 80008f0:	d100      	bne.n	80008f4 <__aeabi_fadd+0x44>
 80008f2:	e0cd      	b.n	8000a90 <__aeabi_fadd+0x1e0>
 80008f4:	0013      	movs	r3, r2
 80008f6:	e02f      	b.n	8000958 <__aeabi_fadd+0xa8>
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d060      	beq.n	80009be <__aeabi_fadd+0x10e>
 80008fc:	1b53      	subs	r3, r2, r5
 80008fe:	2d00      	cmp	r5, #0
 8000900:	d000      	beq.n	8000904 <__aeabi_fadd+0x54>
 8000902:	e0ee      	b.n	8000ae2 <__aeabi_fadd+0x232>
 8000904:	2e00      	cmp	r6, #0
 8000906:	d100      	bne.n	800090a <__aeabi_fadd+0x5a>
 8000908:	e13e      	b.n	8000b88 <__aeabi_fadd+0x2d8>
 800090a:	1e5c      	subs	r4, r3, #1
 800090c:	2b01      	cmp	r3, #1
 800090e:	d100      	bne.n	8000912 <__aeabi_fadd+0x62>
 8000910:	e16b      	b.n	8000bea <__aeabi_fadd+0x33a>
 8000912:	2bff      	cmp	r3, #255	@ 0xff
 8000914:	d100      	bne.n	8000918 <__aeabi_fadd+0x68>
 8000916:	e0b9      	b.n	8000a8c <__aeabi_fadd+0x1dc>
 8000918:	0023      	movs	r3, r4
 800091a:	e0e7      	b.n	8000aec <__aeabi_fadd+0x23c>
 800091c:	2b00      	cmp	r3, #0
 800091e:	dc00      	bgt.n	8000922 <__aeabi_fadd+0x72>
 8000920:	e0a4      	b.n	8000a6c <__aeabi_fadd+0x1bc>
 8000922:	2a00      	cmp	r2, #0
 8000924:	d069      	beq.n	80009fa <__aeabi_fadd+0x14a>
 8000926:	2dff      	cmp	r5, #255	@ 0xff
 8000928:	d100      	bne.n	800092c <__aeabi_fadd+0x7c>
 800092a:	e0b1      	b.n	8000a90 <__aeabi_fadd+0x1e0>
 800092c:	2280      	movs	r2, #128	@ 0x80
 800092e:	04d2      	lsls	r2, r2, #19
 8000930:	4311      	orrs	r1, r2
 8000932:	2b1b      	cmp	r3, #27
 8000934:	dc00      	bgt.n	8000938 <__aeabi_fadd+0x88>
 8000936:	e0e9      	b.n	8000b0c <__aeabi_fadd+0x25c>
 8000938:	002b      	movs	r3, r5
 800093a:	3605      	adds	r6, #5
 800093c:	08f7      	lsrs	r7, r6, #3
 800093e:	2bff      	cmp	r3, #255	@ 0xff
 8000940:	d100      	bne.n	8000944 <__aeabi_fadd+0x94>
 8000942:	e0a5      	b.n	8000a90 <__aeabi_fadd+0x1e0>
 8000944:	027a      	lsls	r2, r7, #9
 8000946:	0a52      	lsrs	r2, r2, #9
 8000948:	b2d8      	uxtb	r0, r3
 800094a:	e030      	b.n	80009ae <__aeabi_fadd+0xfe>
 800094c:	2dff      	cmp	r5, #255	@ 0xff
 800094e:	d100      	bne.n	8000952 <__aeabi_fadd+0xa2>
 8000950:	e09e      	b.n	8000a90 <__aeabi_fadd+0x1e0>
 8000952:	2280      	movs	r2, #128	@ 0x80
 8000954:	04d2      	lsls	r2, r2, #19
 8000956:	4311      	orrs	r1, r2
 8000958:	2001      	movs	r0, #1
 800095a:	2b1b      	cmp	r3, #27
 800095c:	dc08      	bgt.n	8000970 <__aeabi_fadd+0xc0>
 800095e:	0008      	movs	r0, r1
 8000960:	2220      	movs	r2, #32
 8000962:	40d8      	lsrs	r0, r3
 8000964:	1ad3      	subs	r3, r2, r3
 8000966:	4099      	lsls	r1, r3
 8000968:	000b      	movs	r3, r1
 800096a:	1e5a      	subs	r2, r3, #1
 800096c:	4193      	sbcs	r3, r2
 800096e:	4318      	orrs	r0, r3
 8000970:	1a36      	subs	r6, r6, r0
 8000972:	0173      	lsls	r3, r6, #5
 8000974:	d400      	bmi.n	8000978 <__aeabi_fadd+0xc8>
 8000976:	e071      	b.n	8000a5c <__aeabi_fadd+0x1ac>
 8000978:	01b6      	lsls	r6, r6, #6
 800097a:	09b7      	lsrs	r7, r6, #6
 800097c:	0038      	movs	r0, r7
 800097e:	f003 f835 	bl	80039ec <__clzsi2>
 8000982:	003b      	movs	r3, r7
 8000984:	3805      	subs	r0, #5
 8000986:	4083      	lsls	r3, r0
 8000988:	4285      	cmp	r5, r0
 800098a:	dd4d      	ble.n	8000a28 <__aeabi_fadd+0x178>
 800098c:	4eb4      	ldr	r6, [pc, #720]	@ (8000c60 <__aeabi_fadd+0x3b0>)
 800098e:	1a2d      	subs	r5, r5, r0
 8000990:	401e      	ands	r6, r3
 8000992:	075a      	lsls	r2, r3, #29
 8000994:	d068      	beq.n	8000a68 <__aeabi_fadd+0x1b8>
 8000996:	220f      	movs	r2, #15
 8000998:	4013      	ands	r3, r2
 800099a:	2b04      	cmp	r3, #4
 800099c:	d064      	beq.n	8000a68 <__aeabi_fadd+0x1b8>
 800099e:	3604      	adds	r6, #4
 80009a0:	0173      	lsls	r3, r6, #5
 80009a2:	d561      	bpl.n	8000a68 <__aeabi_fadd+0x1b8>
 80009a4:	1c68      	adds	r0, r5, #1
 80009a6:	2dfe      	cmp	r5, #254	@ 0xfe
 80009a8:	d154      	bne.n	8000a54 <__aeabi_fadd+0x1a4>
 80009aa:	20ff      	movs	r0, #255	@ 0xff
 80009ac:	2200      	movs	r2, #0
 80009ae:	05c0      	lsls	r0, r0, #23
 80009b0:	4310      	orrs	r0, r2
 80009b2:	07e4      	lsls	r4, r4, #31
 80009b4:	4320      	orrs	r0, r4
 80009b6:	bcc0      	pop	{r6, r7}
 80009b8:	46b9      	mov	r9, r7
 80009ba:	46b0      	mov	r8, r6
 80009bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009be:	22fe      	movs	r2, #254	@ 0xfe
 80009c0:	4690      	mov	r8, r2
 80009c2:	1c68      	adds	r0, r5, #1
 80009c4:	0002      	movs	r2, r0
 80009c6:	4640      	mov	r0, r8
 80009c8:	4210      	tst	r0, r2
 80009ca:	d16b      	bne.n	8000aa4 <__aeabi_fadd+0x1f4>
 80009cc:	2d00      	cmp	r5, #0
 80009ce:	d000      	beq.n	80009d2 <__aeabi_fadd+0x122>
 80009d0:	e0dd      	b.n	8000b8e <__aeabi_fadd+0x2de>
 80009d2:	2e00      	cmp	r6, #0
 80009d4:	d100      	bne.n	80009d8 <__aeabi_fadd+0x128>
 80009d6:	e102      	b.n	8000bde <__aeabi_fadd+0x32e>
 80009d8:	2900      	cmp	r1, #0
 80009da:	d0b3      	beq.n	8000944 <__aeabi_fadd+0x94>
 80009dc:	2280      	movs	r2, #128	@ 0x80
 80009de:	1a77      	subs	r7, r6, r1
 80009e0:	04d2      	lsls	r2, r2, #19
 80009e2:	4217      	tst	r7, r2
 80009e4:	d100      	bne.n	80009e8 <__aeabi_fadd+0x138>
 80009e6:	e136      	b.n	8000c56 <__aeabi_fadd+0x3a6>
 80009e8:	464c      	mov	r4, r9
 80009ea:	1b8e      	subs	r6, r1, r6
 80009ec:	d061      	beq.n	8000ab2 <__aeabi_fadd+0x202>
 80009ee:	2001      	movs	r0, #1
 80009f0:	4216      	tst	r6, r2
 80009f2:	d130      	bne.n	8000a56 <__aeabi_fadd+0x1a6>
 80009f4:	2300      	movs	r3, #0
 80009f6:	08f7      	lsrs	r7, r6, #3
 80009f8:	e7a4      	b.n	8000944 <__aeabi_fadd+0x94>
 80009fa:	2900      	cmp	r1, #0
 80009fc:	d09e      	beq.n	800093c <__aeabi_fadd+0x8c>
 80009fe:	1e5a      	subs	r2, r3, #1
 8000a00:	2b01      	cmp	r3, #1
 8000a02:	d100      	bne.n	8000a06 <__aeabi_fadd+0x156>
 8000a04:	e0ca      	b.n	8000b9c <__aeabi_fadd+0x2ec>
 8000a06:	2bff      	cmp	r3, #255	@ 0xff
 8000a08:	d042      	beq.n	8000a90 <__aeabi_fadd+0x1e0>
 8000a0a:	0013      	movs	r3, r2
 8000a0c:	e791      	b.n	8000932 <__aeabi_fadd+0x82>
 8000a0e:	1a71      	subs	r1, r6, r1
 8000a10:	014b      	lsls	r3, r1, #5
 8000a12:	d400      	bmi.n	8000a16 <__aeabi_fadd+0x166>
 8000a14:	e0d1      	b.n	8000bba <__aeabi_fadd+0x30a>
 8000a16:	018f      	lsls	r7, r1, #6
 8000a18:	09bf      	lsrs	r7, r7, #6
 8000a1a:	0038      	movs	r0, r7
 8000a1c:	f002 ffe6 	bl	80039ec <__clzsi2>
 8000a20:	003b      	movs	r3, r7
 8000a22:	3805      	subs	r0, #5
 8000a24:	4083      	lsls	r3, r0
 8000a26:	2501      	movs	r5, #1
 8000a28:	2220      	movs	r2, #32
 8000a2a:	1b40      	subs	r0, r0, r5
 8000a2c:	3001      	adds	r0, #1
 8000a2e:	1a12      	subs	r2, r2, r0
 8000a30:	001e      	movs	r6, r3
 8000a32:	4093      	lsls	r3, r2
 8000a34:	40c6      	lsrs	r6, r0
 8000a36:	1e5a      	subs	r2, r3, #1
 8000a38:	4193      	sbcs	r3, r2
 8000a3a:	431e      	orrs	r6, r3
 8000a3c:	d039      	beq.n	8000ab2 <__aeabi_fadd+0x202>
 8000a3e:	0773      	lsls	r3, r6, #29
 8000a40:	d100      	bne.n	8000a44 <__aeabi_fadd+0x194>
 8000a42:	e11b      	b.n	8000c7c <__aeabi_fadd+0x3cc>
 8000a44:	230f      	movs	r3, #15
 8000a46:	2500      	movs	r5, #0
 8000a48:	4033      	ands	r3, r6
 8000a4a:	2b04      	cmp	r3, #4
 8000a4c:	d1a7      	bne.n	800099e <__aeabi_fadd+0xee>
 8000a4e:	2001      	movs	r0, #1
 8000a50:	0172      	lsls	r2, r6, #5
 8000a52:	d57c      	bpl.n	8000b4e <__aeabi_fadd+0x29e>
 8000a54:	b2c0      	uxtb	r0, r0
 8000a56:	01b2      	lsls	r2, r6, #6
 8000a58:	0a52      	lsrs	r2, r2, #9
 8000a5a:	e7a8      	b.n	80009ae <__aeabi_fadd+0xfe>
 8000a5c:	0773      	lsls	r3, r6, #29
 8000a5e:	d003      	beq.n	8000a68 <__aeabi_fadd+0x1b8>
 8000a60:	230f      	movs	r3, #15
 8000a62:	4033      	ands	r3, r6
 8000a64:	2b04      	cmp	r3, #4
 8000a66:	d19a      	bne.n	800099e <__aeabi_fadd+0xee>
 8000a68:	002b      	movs	r3, r5
 8000a6a:	e767      	b.n	800093c <__aeabi_fadd+0x8c>
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d023      	beq.n	8000ab8 <__aeabi_fadd+0x208>
 8000a70:	1b53      	subs	r3, r2, r5
 8000a72:	2d00      	cmp	r5, #0
 8000a74:	d17b      	bne.n	8000b6e <__aeabi_fadd+0x2be>
 8000a76:	2e00      	cmp	r6, #0
 8000a78:	d100      	bne.n	8000a7c <__aeabi_fadd+0x1cc>
 8000a7a:	e086      	b.n	8000b8a <__aeabi_fadd+0x2da>
 8000a7c:	1e5d      	subs	r5, r3, #1
 8000a7e:	2b01      	cmp	r3, #1
 8000a80:	d100      	bne.n	8000a84 <__aeabi_fadd+0x1d4>
 8000a82:	e08b      	b.n	8000b9c <__aeabi_fadd+0x2ec>
 8000a84:	2bff      	cmp	r3, #255	@ 0xff
 8000a86:	d002      	beq.n	8000a8e <__aeabi_fadd+0x1de>
 8000a88:	002b      	movs	r3, r5
 8000a8a:	e075      	b.n	8000b78 <__aeabi_fadd+0x2c8>
 8000a8c:	464c      	mov	r4, r9
 8000a8e:	4667      	mov	r7, ip
 8000a90:	2f00      	cmp	r7, #0
 8000a92:	d100      	bne.n	8000a96 <__aeabi_fadd+0x1e6>
 8000a94:	e789      	b.n	80009aa <__aeabi_fadd+0xfa>
 8000a96:	2280      	movs	r2, #128	@ 0x80
 8000a98:	03d2      	lsls	r2, r2, #15
 8000a9a:	433a      	orrs	r2, r7
 8000a9c:	0252      	lsls	r2, r2, #9
 8000a9e:	20ff      	movs	r0, #255	@ 0xff
 8000aa0:	0a52      	lsrs	r2, r2, #9
 8000aa2:	e784      	b.n	80009ae <__aeabi_fadd+0xfe>
 8000aa4:	1a77      	subs	r7, r6, r1
 8000aa6:	017b      	lsls	r3, r7, #5
 8000aa8:	d46b      	bmi.n	8000b82 <__aeabi_fadd+0x2d2>
 8000aaa:	2f00      	cmp	r7, #0
 8000aac:	d000      	beq.n	8000ab0 <__aeabi_fadd+0x200>
 8000aae:	e765      	b.n	800097c <__aeabi_fadd+0xcc>
 8000ab0:	2400      	movs	r4, #0
 8000ab2:	2000      	movs	r0, #0
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	e77a      	b.n	80009ae <__aeabi_fadd+0xfe>
 8000ab8:	22fe      	movs	r2, #254	@ 0xfe
 8000aba:	1c6b      	adds	r3, r5, #1
 8000abc:	421a      	tst	r2, r3
 8000abe:	d149      	bne.n	8000b54 <__aeabi_fadd+0x2a4>
 8000ac0:	2d00      	cmp	r5, #0
 8000ac2:	d000      	beq.n	8000ac6 <__aeabi_fadd+0x216>
 8000ac4:	e09f      	b.n	8000c06 <__aeabi_fadd+0x356>
 8000ac6:	2e00      	cmp	r6, #0
 8000ac8:	d100      	bne.n	8000acc <__aeabi_fadd+0x21c>
 8000aca:	e0ba      	b.n	8000c42 <__aeabi_fadd+0x392>
 8000acc:	2900      	cmp	r1, #0
 8000ace:	d100      	bne.n	8000ad2 <__aeabi_fadd+0x222>
 8000ad0:	e0cf      	b.n	8000c72 <__aeabi_fadd+0x3c2>
 8000ad2:	1872      	adds	r2, r6, r1
 8000ad4:	0153      	lsls	r3, r2, #5
 8000ad6:	d400      	bmi.n	8000ada <__aeabi_fadd+0x22a>
 8000ad8:	e0cd      	b.n	8000c76 <__aeabi_fadd+0x3c6>
 8000ada:	0192      	lsls	r2, r2, #6
 8000adc:	2001      	movs	r0, #1
 8000ade:	0a52      	lsrs	r2, r2, #9
 8000ae0:	e765      	b.n	80009ae <__aeabi_fadd+0xfe>
 8000ae2:	2aff      	cmp	r2, #255	@ 0xff
 8000ae4:	d0d2      	beq.n	8000a8c <__aeabi_fadd+0x1dc>
 8000ae6:	2080      	movs	r0, #128	@ 0x80
 8000ae8:	04c0      	lsls	r0, r0, #19
 8000aea:	4306      	orrs	r6, r0
 8000aec:	2001      	movs	r0, #1
 8000aee:	2b1b      	cmp	r3, #27
 8000af0:	dc08      	bgt.n	8000b04 <__aeabi_fadd+0x254>
 8000af2:	0030      	movs	r0, r6
 8000af4:	2420      	movs	r4, #32
 8000af6:	40d8      	lsrs	r0, r3
 8000af8:	1ae3      	subs	r3, r4, r3
 8000afa:	409e      	lsls	r6, r3
 8000afc:	0033      	movs	r3, r6
 8000afe:	1e5c      	subs	r4, r3, #1
 8000b00:	41a3      	sbcs	r3, r4
 8000b02:	4318      	orrs	r0, r3
 8000b04:	464c      	mov	r4, r9
 8000b06:	0015      	movs	r5, r2
 8000b08:	1a0e      	subs	r6, r1, r0
 8000b0a:	e732      	b.n	8000972 <__aeabi_fadd+0xc2>
 8000b0c:	0008      	movs	r0, r1
 8000b0e:	2220      	movs	r2, #32
 8000b10:	40d8      	lsrs	r0, r3
 8000b12:	1ad3      	subs	r3, r2, r3
 8000b14:	4099      	lsls	r1, r3
 8000b16:	000b      	movs	r3, r1
 8000b18:	1e5a      	subs	r2, r3, #1
 8000b1a:	4193      	sbcs	r3, r2
 8000b1c:	4303      	orrs	r3, r0
 8000b1e:	18f6      	adds	r6, r6, r3
 8000b20:	0173      	lsls	r3, r6, #5
 8000b22:	d59b      	bpl.n	8000a5c <__aeabi_fadd+0x1ac>
 8000b24:	3501      	adds	r5, #1
 8000b26:	2dff      	cmp	r5, #255	@ 0xff
 8000b28:	d100      	bne.n	8000b2c <__aeabi_fadd+0x27c>
 8000b2a:	e73e      	b.n	80009aa <__aeabi_fadd+0xfa>
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	494d      	ldr	r1, [pc, #308]	@ (8000c64 <__aeabi_fadd+0x3b4>)
 8000b30:	0872      	lsrs	r2, r6, #1
 8000b32:	4033      	ands	r3, r6
 8000b34:	400a      	ands	r2, r1
 8000b36:	431a      	orrs	r2, r3
 8000b38:	0016      	movs	r6, r2
 8000b3a:	0753      	lsls	r3, r2, #29
 8000b3c:	d004      	beq.n	8000b48 <__aeabi_fadd+0x298>
 8000b3e:	230f      	movs	r3, #15
 8000b40:	4013      	ands	r3, r2
 8000b42:	2b04      	cmp	r3, #4
 8000b44:	d000      	beq.n	8000b48 <__aeabi_fadd+0x298>
 8000b46:	e72a      	b.n	800099e <__aeabi_fadd+0xee>
 8000b48:	0173      	lsls	r3, r6, #5
 8000b4a:	d500      	bpl.n	8000b4e <__aeabi_fadd+0x29e>
 8000b4c:	e72a      	b.n	80009a4 <__aeabi_fadd+0xf4>
 8000b4e:	002b      	movs	r3, r5
 8000b50:	08f7      	lsrs	r7, r6, #3
 8000b52:	e6f7      	b.n	8000944 <__aeabi_fadd+0x94>
 8000b54:	2bff      	cmp	r3, #255	@ 0xff
 8000b56:	d100      	bne.n	8000b5a <__aeabi_fadd+0x2aa>
 8000b58:	e727      	b.n	80009aa <__aeabi_fadd+0xfa>
 8000b5a:	1871      	adds	r1, r6, r1
 8000b5c:	0849      	lsrs	r1, r1, #1
 8000b5e:	074a      	lsls	r2, r1, #29
 8000b60:	d02f      	beq.n	8000bc2 <__aeabi_fadd+0x312>
 8000b62:	220f      	movs	r2, #15
 8000b64:	400a      	ands	r2, r1
 8000b66:	2a04      	cmp	r2, #4
 8000b68:	d02b      	beq.n	8000bc2 <__aeabi_fadd+0x312>
 8000b6a:	1d0e      	adds	r6, r1, #4
 8000b6c:	e6e6      	b.n	800093c <__aeabi_fadd+0x8c>
 8000b6e:	2aff      	cmp	r2, #255	@ 0xff
 8000b70:	d08d      	beq.n	8000a8e <__aeabi_fadd+0x1de>
 8000b72:	2080      	movs	r0, #128	@ 0x80
 8000b74:	04c0      	lsls	r0, r0, #19
 8000b76:	4306      	orrs	r6, r0
 8000b78:	2b1b      	cmp	r3, #27
 8000b7a:	dd24      	ble.n	8000bc6 <__aeabi_fadd+0x316>
 8000b7c:	0013      	movs	r3, r2
 8000b7e:	1d4e      	adds	r6, r1, #5
 8000b80:	e6dc      	b.n	800093c <__aeabi_fadd+0x8c>
 8000b82:	464c      	mov	r4, r9
 8000b84:	1b8f      	subs	r7, r1, r6
 8000b86:	e6f9      	b.n	800097c <__aeabi_fadd+0xcc>
 8000b88:	464c      	mov	r4, r9
 8000b8a:	000e      	movs	r6, r1
 8000b8c:	e6d6      	b.n	800093c <__aeabi_fadd+0x8c>
 8000b8e:	2e00      	cmp	r6, #0
 8000b90:	d149      	bne.n	8000c26 <__aeabi_fadd+0x376>
 8000b92:	2900      	cmp	r1, #0
 8000b94:	d068      	beq.n	8000c68 <__aeabi_fadd+0x3b8>
 8000b96:	4667      	mov	r7, ip
 8000b98:	464c      	mov	r4, r9
 8000b9a:	e77c      	b.n	8000a96 <__aeabi_fadd+0x1e6>
 8000b9c:	1870      	adds	r0, r6, r1
 8000b9e:	0143      	lsls	r3, r0, #5
 8000ba0:	d574      	bpl.n	8000c8c <__aeabi_fadd+0x3dc>
 8000ba2:	4930      	ldr	r1, [pc, #192]	@ (8000c64 <__aeabi_fadd+0x3b4>)
 8000ba4:	0840      	lsrs	r0, r0, #1
 8000ba6:	4001      	ands	r1, r0
 8000ba8:	0743      	lsls	r3, r0, #29
 8000baa:	d009      	beq.n	8000bc0 <__aeabi_fadd+0x310>
 8000bac:	230f      	movs	r3, #15
 8000bae:	4003      	ands	r3, r0
 8000bb0:	2b04      	cmp	r3, #4
 8000bb2:	d005      	beq.n	8000bc0 <__aeabi_fadd+0x310>
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	1d0e      	adds	r6, r1, #4
 8000bb8:	e6c0      	b.n	800093c <__aeabi_fadd+0x8c>
 8000bba:	2301      	movs	r3, #1
 8000bbc:	08cf      	lsrs	r7, r1, #3
 8000bbe:	e6c1      	b.n	8000944 <__aeabi_fadd+0x94>
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	08cf      	lsrs	r7, r1, #3
 8000bc4:	e6be      	b.n	8000944 <__aeabi_fadd+0x94>
 8000bc6:	2520      	movs	r5, #32
 8000bc8:	0030      	movs	r0, r6
 8000bca:	40d8      	lsrs	r0, r3
 8000bcc:	1aeb      	subs	r3, r5, r3
 8000bce:	409e      	lsls	r6, r3
 8000bd0:	0033      	movs	r3, r6
 8000bd2:	1e5d      	subs	r5, r3, #1
 8000bd4:	41ab      	sbcs	r3, r5
 8000bd6:	4303      	orrs	r3, r0
 8000bd8:	0015      	movs	r5, r2
 8000bda:	185e      	adds	r6, r3, r1
 8000bdc:	e7a0      	b.n	8000b20 <__aeabi_fadd+0x270>
 8000bde:	2900      	cmp	r1, #0
 8000be0:	d100      	bne.n	8000be4 <__aeabi_fadd+0x334>
 8000be2:	e765      	b.n	8000ab0 <__aeabi_fadd+0x200>
 8000be4:	464c      	mov	r4, r9
 8000be6:	4667      	mov	r7, ip
 8000be8:	e6ac      	b.n	8000944 <__aeabi_fadd+0x94>
 8000bea:	1b8f      	subs	r7, r1, r6
 8000bec:	017b      	lsls	r3, r7, #5
 8000bee:	d52e      	bpl.n	8000c4e <__aeabi_fadd+0x39e>
 8000bf0:	01bf      	lsls	r7, r7, #6
 8000bf2:	09bf      	lsrs	r7, r7, #6
 8000bf4:	0038      	movs	r0, r7
 8000bf6:	f002 fef9 	bl	80039ec <__clzsi2>
 8000bfa:	003b      	movs	r3, r7
 8000bfc:	3805      	subs	r0, #5
 8000bfe:	4083      	lsls	r3, r0
 8000c00:	464c      	mov	r4, r9
 8000c02:	3501      	adds	r5, #1
 8000c04:	e710      	b.n	8000a28 <__aeabi_fadd+0x178>
 8000c06:	2e00      	cmp	r6, #0
 8000c08:	d100      	bne.n	8000c0c <__aeabi_fadd+0x35c>
 8000c0a:	e740      	b.n	8000a8e <__aeabi_fadd+0x1de>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	d100      	bne.n	8000c12 <__aeabi_fadd+0x362>
 8000c10:	e741      	b.n	8000a96 <__aeabi_fadd+0x1e6>
 8000c12:	2380      	movs	r3, #128	@ 0x80
 8000c14:	03db      	lsls	r3, r3, #15
 8000c16:	429f      	cmp	r7, r3
 8000c18:	d200      	bcs.n	8000c1c <__aeabi_fadd+0x36c>
 8000c1a:	e73c      	b.n	8000a96 <__aeabi_fadd+0x1e6>
 8000c1c:	459c      	cmp	ip, r3
 8000c1e:	d300      	bcc.n	8000c22 <__aeabi_fadd+0x372>
 8000c20:	e739      	b.n	8000a96 <__aeabi_fadd+0x1e6>
 8000c22:	4667      	mov	r7, ip
 8000c24:	e737      	b.n	8000a96 <__aeabi_fadd+0x1e6>
 8000c26:	2900      	cmp	r1, #0
 8000c28:	d100      	bne.n	8000c2c <__aeabi_fadd+0x37c>
 8000c2a:	e734      	b.n	8000a96 <__aeabi_fadd+0x1e6>
 8000c2c:	2380      	movs	r3, #128	@ 0x80
 8000c2e:	03db      	lsls	r3, r3, #15
 8000c30:	429f      	cmp	r7, r3
 8000c32:	d200      	bcs.n	8000c36 <__aeabi_fadd+0x386>
 8000c34:	e72f      	b.n	8000a96 <__aeabi_fadd+0x1e6>
 8000c36:	459c      	cmp	ip, r3
 8000c38:	d300      	bcc.n	8000c3c <__aeabi_fadd+0x38c>
 8000c3a:	e72c      	b.n	8000a96 <__aeabi_fadd+0x1e6>
 8000c3c:	464c      	mov	r4, r9
 8000c3e:	4667      	mov	r7, ip
 8000c40:	e729      	b.n	8000a96 <__aeabi_fadd+0x1e6>
 8000c42:	2900      	cmp	r1, #0
 8000c44:	d100      	bne.n	8000c48 <__aeabi_fadd+0x398>
 8000c46:	e734      	b.n	8000ab2 <__aeabi_fadd+0x202>
 8000c48:	2300      	movs	r3, #0
 8000c4a:	08cf      	lsrs	r7, r1, #3
 8000c4c:	e67a      	b.n	8000944 <__aeabi_fadd+0x94>
 8000c4e:	464c      	mov	r4, r9
 8000c50:	2301      	movs	r3, #1
 8000c52:	08ff      	lsrs	r7, r7, #3
 8000c54:	e676      	b.n	8000944 <__aeabi_fadd+0x94>
 8000c56:	2f00      	cmp	r7, #0
 8000c58:	d100      	bne.n	8000c5c <__aeabi_fadd+0x3ac>
 8000c5a:	e729      	b.n	8000ab0 <__aeabi_fadd+0x200>
 8000c5c:	08ff      	lsrs	r7, r7, #3
 8000c5e:	e671      	b.n	8000944 <__aeabi_fadd+0x94>
 8000c60:	fbffffff 	.word	0xfbffffff
 8000c64:	7dffffff 	.word	0x7dffffff
 8000c68:	2280      	movs	r2, #128	@ 0x80
 8000c6a:	2400      	movs	r4, #0
 8000c6c:	20ff      	movs	r0, #255	@ 0xff
 8000c6e:	03d2      	lsls	r2, r2, #15
 8000c70:	e69d      	b.n	80009ae <__aeabi_fadd+0xfe>
 8000c72:	2300      	movs	r3, #0
 8000c74:	e666      	b.n	8000944 <__aeabi_fadd+0x94>
 8000c76:	2300      	movs	r3, #0
 8000c78:	08d7      	lsrs	r7, r2, #3
 8000c7a:	e663      	b.n	8000944 <__aeabi_fadd+0x94>
 8000c7c:	2001      	movs	r0, #1
 8000c7e:	0172      	lsls	r2, r6, #5
 8000c80:	d500      	bpl.n	8000c84 <__aeabi_fadd+0x3d4>
 8000c82:	e6e7      	b.n	8000a54 <__aeabi_fadd+0x1a4>
 8000c84:	0031      	movs	r1, r6
 8000c86:	2300      	movs	r3, #0
 8000c88:	08cf      	lsrs	r7, r1, #3
 8000c8a:	e65b      	b.n	8000944 <__aeabi_fadd+0x94>
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	08c7      	lsrs	r7, r0, #3
 8000c90:	e658      	b.n	8000944 <__aeabi_fadd+0x94>
 8000c92:	46c0      	nop			@ (mov r8, r8)

08000c94 <__aeabi_fdiv>:
 8000c94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c96:	4646      	mov	r6, r8
 8000c98:	464f      	mov	r7, r9
 8000c9a:	46d6      	mov	lr, sl
 8000c9c:	0245      	lsls	r5, r0, #9
 8000c9e:	b5c0      	push	{r6, r7, lr}
 8000ca0:	0fc3      	lsrs	r3, r0, #31
 8000ca2:	0047      	lsls	r7, r0, #1
 8000ca4:	4698      	mov	r8, r3
 8000ca6:	1c0e      	adds	r6, r1, #0
 8000ca8:	0a6d      	lsrs	r5, r5, #9
 8000caa:	0e3f      	lsrs	r7, r7, #24
 8000cac:	d05b      	beq.n	8000d66 <__aeabi_fdiv+0xd2>
 8000cae:	2fff      	cmp	r7, #255	@ 0xff
 8000cb0:	d021      	beq.n	8000cf6 <__aeabi_fdiv+0x62>
 8000cb2:	2380      	movs	r3, #128	@ 0x80
 8000cb4:	00ed      	lsls	r5, r5, #3
 8000cb6:	04db      	lsls	r3, r3, #19
 8000cb8:	431d      	orrs	r5, r3
 8000cba:	2300      	movs	r3, #0
 8000cbc:	4699      	mov	r9, r3
 8000cbe:	469a      	mov	sl, r3
 8000cc0:	3f7f      	subs	r7, #127	@ 0x7f
 8000cc2:	0274      	lsls	r4, r6, #9
 8000cc4:	0073      	lsls	r3, r6, #1
 8000cc6:	0a64      	lsrs	r4, r4, #9
 8000cc8:	0e1b      	lsrs	r3, r3, #24
 8000cca:	0ff6      	lsrs	r6, r6, #31
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d020      	beq.n	8000d12 <__aeabi_fdiv+0x7e>
 8000cd0:	2bff      	cmp	r3, #255	@ 0xff
 8000cd2:	d043      	beq.n	8000d5c <__aeabi_fdiv+0xc8>
 8000cd4:	2280      	movs	r2, #128	@ 0x80
 8000cd6:	2000      	movs	r0, #0
 8000cd8:	00e4      	lsls	r4, r4, #3
 8000cda:	04d2      	lsls	r2, r2, #19
 8000cdc:	4314      	orrs	r4, r2
 8000cde:	3b7f      	subs	r3, #127	@ 0x7f
 8000ce0:	4642      	mov	r2, r8
 8000ce2:	1aff      	subs	r7, r7, r3
 8000ce4:	464b      	mov	r3, r9
 8000ce6:	4072      	eors	r2, r6
 8000ce8:	2b0f      	cmp	r3, #15
 8000cea:	d900      	bls.n	8000cee <__aeabi_fdiv+0x5a>
 8000cec:	e09d      	b.n	8000e2a <__aeabi_fdiv+0x196>
 8000cee:	4971      	ldr	r1, [pc, #452]	@ (8000eb4 <__aeabi_fdiv+0x220>)
 8000cf0:	009b      	lsls	r3, r3, #2
 8000cf2:	58cb      	ldr	r3, [r1, r3]
 8000cf4:	469f      	mov	pc, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d15a      	bne.n	8000db0 <__aeabi_fdiv+0x11c>
 8000cfa:	2308      	movs	r3, #8
 8000cfc:	4699      	mov	r9, r3
 8000cfe:	3b06      	subs	r3, #6
 8000d00:	0274      	lsls	r4, r6, #9
 8000d02:	469a      	mov	sl, r3
 8000d04:	0073      	lsls	r3, r6, #1
 8000d06:	27ff      	movs	r7, #255	@ 0xff
 8000d08:	0a64      	lsrs	r4, r4, #9
 8000d0a:	0e1b      	lsrs	r3, r3, #24
 8000d0c:	0ff6      	lsrs	r6, r6, #31
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d1de      	bne.n	8000cd0 <__aeabi_fdiv+0x3c>
 8000d12:	2c00      	cmp	r4, #0
 8000d14:	d13b      	bne.n	8000d8e <__aeabi_fdiv+0xfa>
 8000d16:	2301      	movs	r3, #1
 8000d18:	4642      	mov	r2, r8
 8000d1a:	4649      	mov	r1, r9
 8000d1c:	4072      	eors	r2, r6
 8000d1e:	4319      	orrs	r1, r3
 8000d20:	290e      	cmp	r1, #14
 8000d22:	d818      	bhi.n	8000d56 <__aeabi_fdiv+0xc2>
 8000d24:	4864      	ldr	r0, [pc, #400]	@ (8000eb8 <__aeabi_fdiv+0x224>)
 8000d26:	0089      	lsls	r1, r1, #2
 8000d28:	5841      	ldr	r1, [r0, r1]
 8000d2a:	468f      	mov	pc, r1
 8000d2c:	4653      	mov	r3, sl
 8000d2e:	2b02      	cmp	r3, #2
 8000d30:	d100      	bne.n	8000d34 <__aeabi_fdiv+0xa0>
 8000d32:	e0b8      	b.n	8000ea6 <__aeabi_fdiv+0x212>
 8000d34:	2b03      	cmp	r3, #3
 8000d36:	d06e      	beq.n	8000e16 <__aeabi_fdiv+0x182>
 8000d38:	4642      	mov	r2, r8
 8000d3a:	002c      	movs	r4, r5
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d140      	bne.n	8000dc2 <__aeabi_fdiv+0x12e>
 8000d40:	2000      	movs	r0, #0
 8000d42:	2400      	movs	r4, #0
 8000d44:	05c0      	lsls	r0, r0, #23
 8000d46:	4320      	orrs	r0, r4
 8000d48:	07d2      	lsls	r2, r2, #31
 8000d4a:	4310      	orrs	r0, r2
 8000d4c:	bce0      	pop	{r5, r6, r7}
 8000d4e:	46ba      	mov	sl, r7
 8000d50:	46b1      	mov	r9, r6
 8000d52:	46a8      	mov	r8, r5
 8000d54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d56:	20ff      	movs	r0, #255	@ 0xff
 8000d58:	2400      	movs	r4, #0
 8000d5a:	e7f3      	b.n	8000d44 <__aeabi_fdiv+0xb0>
 8000d5c:	2c00      	cmp	r4, #0
 8000d5e:	d120      	bne.n	8000da2 <__aeabi_fdiv+0x10e>
 8000d60:	2302      	movs	r3, #2
 8000d62:	3fff      	subs	r7, #255	@ 0xff
 8000d64:	e7d8      	b.n	8000d18 <__aeabi_fdiv+0x84>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d105      	bne.n	8000d76 <__aeabi_fdiv+0xe2>
 8000d6a:	2304      	movs	r3, #4
 8000d6c:	4699      	mov	r9, r3
 8000d6e:	3b03      	subs	r3, #3
 8000d70:	2700      	movs	r7, #0
 8000d72:	469a      	mov	sl, r3
 8000d74:	e7a5      	b.n	8000cc2 <__aeabi_fdiv+0x2e>
 8000d76:	0028      	movs	r0, r5
 8000d78:	f002 fe38 	bl	80039ec <__clzsi2>
 8000d7c:	2776      	movs	r7, #118	@ 0x76
 8000d7e:	1f43      	subs	r3, r0, #5
 8000d80:	409d      	lsls	r5, r3
 8000d82:	2300      	movs	r3, #0
 8000d84:	427f      	negs	r7, r7
 8000d86:	4699      	mov	r9, r3
 8000d88:	469a      	mov	sl, r3
 8000d8a:	1a3f      	subs	r7, r7, r0
 8000d8c:	e799      	b.n	8000cc2 <__aeabi_fdiv+0x2e>
 8000d8e:	0020      	movs	r0, r4
 8000d90:	f002 fe2c 	bl	80039ec <__clzsi2>
 8000d94:	1f43      	subs	r3, r0, #5
 8000d96:	409c      	lsls	r4, r3
 8000d98:	2376      	movs	r3, #118	@ 0x76
 8000d9a:	425b      	negs	r3, r3
 8000d9c:	1a1b      	subs	r3, r3, r0
 8000d9e:	2000      	movs	r0, #0
 8000da0:	e79e      	b.n	8000ce0 <__aeabi_fdiv+0x4c>
 8000da2:	2303      	movs	r3, #3
 8000da4:	464a      	mov	r2, r9
 8000da6:	431a      	orrs	r2, r3
 8000da8:	4691      	mov	r9, r2
 8000daa:	2003      	movs	r0, #3
 8000dac:	33fc      	adds	r3, #252	@ 0xfc
 8000dae:	e797      	b.n	8000ce0 <__aeabi_fdiv+0x4c>
 8000db0:	230c      	movs	r3, #12
 8000db2:	4699      	mov	r9, r3
 8000db4:	3b09      	subs	r3, #9
 8000db6:	27ff      	movs	r7, #255	@ 0xff
 8000db8:	469a      	mov	sl, r3
 8000dba:	e782      	b.n	8000cc2 <__aeabi_fdiv+0x2e>
 8000dbc:	2803      	cmp	r0, #3
 8000dbe:	d02c      	beq.n	8000e1a <__aeabi_fdiv+0x186>
 8000dc0:	0032      	movs	r2, r6
 8000dc2:	0038      	movs	r0, r7
 8000dc4:	307f      	adds	r0, #127	@ 0x7f
 8000dc6:	2800      	cmp	r0, #0
 8000dc8:	dd47      	ble.n	8000e5a <__aeabi_fdiv+0x1c6>
 8000dca:	0763      	lsls	r3, r4, #29
 8000dcc:	d004      	beq.n	8000dd8 <__aeabi_fdiv+0x144>
 8000dce:	230f      	movs	r3, #15
 8000dd0:	4023      	ands	r3, r4
 8000dd2:	2b04      	cmp	r3, #4
 8000dd4:	d000      	beq.n	8000dd8 <__aeabi_fdiv+0x144>
 8000dd6:	3404      	adds	r4, #4
 8000dd8:	0123      	lsls	r3, r4, #4
 8000dda:	d503      	bpl.n	8000de4 <__aeabi_fdiv+0x150>
 8000ddc:	0038      	movs	r0, r7
 8000dde:	4b37      	ldr	r3, [pc, #220]	@ (8000ebc <__aeabi_fdiv+0x228>)
 8000de0:	3080      	adds	r0, #128	@ 0x80
 8000de2:	401c      	ands	r4, r3
 8000de4:	28fe      	cmp	r0, #254	@ 0xfe
 8000de6:	dcb6      	bgt.n	8000d56 <__aeabi_fdiv+0xc2>
 8000de8:	01a4      	lsls	r4, r4, #6
 8000dea:	0a64      	lsrs	r4, r4, #9
 8000dec:	b2c0      	uxtb	r0, r0
 8000dee:	e7a9      	b.n	8000d44 <__aeabi_fdiv+0xb0>
 8000df0:	2480      	movs	r4, #128	@ 0x80
 8000df2:	2200      	movs	r2, #0
 8000df4:	20ff      	movs	r0, #255	@ 0xff
 8000df6:	03e4      	lsls	r4, r4, #15
 8000df8:	e7a4      	b.n	8000d44 <__aeabi_fdiv+0xb0>
 8000dfa:	2380      	movs	r3, #128	@ 0x80
 8000dfc:	03db      	lsls	r3, r3, #15
 8000dfe:	421d      	tst	r5, r3
 8000e00:	d001      	beq.n	8000e06 <__aeabi_fdiv+0x172>
 8000e02:	421c      	tst	r4, r3
 8000e04:	d00b      	beq.n	8000e1e <__aeabi_fdiv+0x18a>
 8000e06:	2480      	movs	r4, #128	@ 0x80
 8000e08:	03e4      	lsls	r4, r4, #15
 8000e0a:	432c      	orrs	r4, r5
 8000e0c:	0264      	lsls	r4, r4, #9
 8000e0e:	4642      	mov	r2, r8
 8000e10:	20ff      	movs	r0, #255	@ 0xff
 8000e12:	0a64      	lsrs	r4, r4, #9
 8000e14:	e796      	b.n	8000d44 <__aeabi_fdiv+0xb0>
 8000e16:	4646      	mov	r6, r8
 8000e18:	002c      	movs	r4, r5
 8000e1a:	2380      	movs	r3, #128	@ 0x80
 8000e1c:	03db      	lsls	r3, r3, #15
 8000e1e:	431c      	orrs	r4, r3
 8000e20:	0264      	lsls	r4, r4, #9
 8000e22:	0032      	movs	r2, r6
 8000e24:	20ff      	movs	r0, #255	@ 0xff
 8000e26:	0a64      	lsrs	r4, r4, #9
 8000e28:	e78c      	b.n	8000d44 <__aeabi_fdiv+0xb0>
 8000e2a:	016d      	lsls	r5, r5, #5
 8000e2c:	0160      	lsls	r0, r4, #5
 8000e2e:	4285      	cmp	r5, r0
 8000e30:	d22d      	bcs.n	8000e8e <__aeabi_fdiv+0x1fa>
 8000e32:	231b      	movs	r3, #27
 8000e34:	2400      	movs	r4, #0
 8000e36:	3f01      	subs	r7, #1
 8000e38:	2601      	movs	r6, #1
 8000e3a:	0029      	movs	r1, r5
 8000e3c:	0064      	lsls	r4, r4, #1
 8000e3e:	006d      	lsls	r5, r5, #1
 8000e40:	2900      	cmp	r1, #0
 8000e42:	db01      	blt.n	8000e48 <__aeabi_fdiv+0x1b4>
 8000e44:	4285      	cmp	r5, r0
 8000e46:	d301      	bcc.n	8000e4c <__aeabi_fdiv+0x1b8>
 8000e48:	1a2d      	subs	r5, r5, r0
 8000e4a:	4334      	orrs	r4, r6
 8000e4c:	3b01      	subs	r3, #1
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d1f3      	bne.n	8000e3a <__aeabi_fdiv+0x1a6>
 8000e52:	1e6b      	subs	r3, r5, #1
 8000e54:	419d      	sbcs	r5, r3
 8000e56:	432c      	orrs	r4, r5
 8000e58:	e7b3      	b.n	8000dc2 <__aeabi_fdiv+0x12e>
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	1a1b      	subs	r3, r3, r0
 8000e5e:	2b1b      	cmp	r3, #27
 8000e60:	dd00      	ble.n	8000e64 <__aeabi_fdiv+0x1d0>
 8000e62:	e76d      	b.n	8000d40 <__aeabi_fdiv+0xac>
 8000e64:	0021      	movs	r1, r4
 8000e66:	379e      	adds	r7, #158	@ 0x9e
 8000e68:	40d9      	lsrs	r1, r3
 8000e6a:	40bc      	lsls	r4, r7
 8000e6c:	000b      	movs	r3, r1
 8000e6e:	1e61      	subs	r1, r4, #1
 8000e70:	418c      	sbcs	r4, r1
 8000e72:	4323      	orrs	r3, r4
 8000e74:	0759      	lsls	r1, r3, #29
 8000e76:	d004      	beq.n	8000e82 <__aeabi_fdiv+0x1ee>
 8000e78:	210f      	movs	r1, #15
 8000e7a:	4019      	ands	r1, r3
 8000e7c:	2904      	cmp	r1, #4
 8000e7e:	d000      	beq.n	8000e82 <__aeabi_fdiv+0x1ee>
 8000e80:	3304      	adds	r3, #4
 8000e82:	0159      	lsls	r1, r3, #5
 8000e84:	d413      	bmi.n	8000eae <__aeabi_fdiv+0x21a>
 8000e86:	019b      	lsls	r3, r3, #6
 8000e88:	2000      	movs	r0, #0
 8000e8a:	0a5c      	lsrs	r4, r3, #9
 8000e8c:	e75a      	b.n	8000d44 <__aeabi_fdiv+0xb0>
 8000e8e:	231a      	movs	r3, #26
 8000e90:	2401      	movs	r4, #1
 8000e92:	1a2d      	subs	r5, r5, r0
 8000e94:	e7d0      	b.n	8000e38 <__aeabi_fdiv+0x1a4>
 8000e96:	1e98      	subs	r0, r3, #2
 8000e98:	4243      	negs	r3, r0
 8000e9a:	4158      	adcs	r0, r3
 8000e9c:	4240      	negs	r0, r0
 8000e9e:	0032      	movs	r2, r6
 8000ea0:	2400      	movs	r4, #0
 8000ea2:	b2c0      	uxtb	r0, r0
 8000ea4:	e74e      	b.n	8000d44 <__aeabi_fdiv+0xb0>
 8000ea6:	4642      	mov	r2, r8
 8000ea8:	20ff      	movs	r0, #255	@ 0xff
 8000eaa:	2400      	movs	r4, #0
 8000eac:	e74a      	b.n	8000d44 <__aeabi_fdiv+0xb0>
 8000eae:	2001      	movs	r0, #1
 8000eb0:	2400      	movs	r4, #0
 8000eb2:	e747      	b.n	8000d44 <__aeabi_fdiv+0xb0>
 8000eb4:	08011890 	.word	0x08011890
 8000eb8:	080118d0 	.word	0x080118d0
 8000ebc:	f7ffffff 	.word	0xf7ffffff

08000ec0 <__eqsf2>:
 8000ec0:	b570      	push	{r4, r5, r6, lr}
 8000ec2:	0042      	lsls	r2, r0, #1
 8000ec4:	024e      	lsls	r6, r1, #9
 8000ec6:	004c      	lsls	r4, r1, #1
 8000ec8:	0245      	lsls	r5, r0, #9
 8000eca:	0a6d      	lsrs	r5, r5, #9
 8000ecc:	0e12      	lsrs	r2, r2, #24
 8000ece:	0fc3      	lsrs	r3, r0, #31
 8000ed0:	0a76      	lsrs	r6, r6, #9
 8000ed2:	0e24      	lsrs	r4, r4, #24
 8000ed4:	0fc9      	lsrs	r1, r1, #31
 8000ed6:	2aff      	cmp	r2, #255	@ 0xff
 8000ed8:	d010      	beq.n	8000efc <__eqsf2+0x3c>
 8000eda:	2cff      	cmp	r4, #255	@ 0xff
 8000edc:	d00c      	beq.n	8000ef8 <__eqsf2+0x38>
 8000ede:	2001      	movs	r0, #1
 8000ee0:	42a2      	cmp	r2, r4
 8000ee2:	d10a      	bne.n	8000efa <__eqsf2+0x3a>
 8000ee4:	42b5      	cmp	r5, r6
 8000ee6:	d108      	bne.n	8000efa <__eqsf2+0x3a>
 8000ee8:	428b      	cmp	r3, r1
 8000eea:	d00f      	beq.n	8000f0c <__eqsf2+0x4c>
 8000eec:	2a00      	cmp	r2, #0
 8000eee:	d104      	bne.n	8000efa <__eqsf2+0x3a>
 8000ef0:	0028      	movs	r0, r5
 8000ef2:	1e43      	subs	r3, r0, #1
 8000ef4:	4198      	sbcs	r0, r3
 8000ef6:	e000      	b.n	8000efa <__eqsf2+0x3a>
 8000ef8:	2001      	movs	r0, #1
 8000efa:	bd70      	pop	{r4, r5, r6, pc}
 8000efc:	2001      	movs	r0, #1
 8000efe:	2cff      	cmp	r4, #255	@ 0xff
 8000f00:	d1fb      	bne.n	8000efa <__eqsf2+0x3a>
 8000f02:	4335      	orrs	r5, r6
 8000f04:	d1f9      	bne.n	8000efa <__eqsf2+0x3a>
 8000f06:	404b      	eors	r3, r1
 8000f08:	0018      	movs	r0, r3
 8000f0a:	e7f6      	b.n	8000efa <__eqsf2+0x3a>
 8000f0c:	2000      	movs	r0, #0
 8000f0e:	e7f4      	b.n	8000efa <__eqsf2+0x3a>

08000f10 <__gesf2>:
 8000f10:	b530      	push	{r4, r5, lr}
 8000f12:	0042      	lsls	r2, r0, #1
 8000f14:	0244      	lsls	r4, r0, #9
 8000f16:	024d      	lsls	r5, r1, #9
 8000f18:	0fc3      	lsrs	r3, r0, #31
 8000f1a:	0048      	lsls	r0, r1, #1
 8000f1c:	0a64      	lsrs	r4, r4, #9
 8000f1e:	0e12      	lsrs	r2, r2, #24
 8000f20:	0a6d      	lsrs	r5, r5, #9
 8000f22:	0e00      	lsrs	r0, r0, #24
 8000f24:	0fc9      	lsrs	r1, r1, #31
 8000f26:	2aff      	cmp	r2, #255	@ 0xff
 8000f28:	d018      	beq.n	8000f5c <__gesf2+0x4c>
 8000f2a:	28ff      	cmp	r0, #255	@ 0xff
 8000f2c:	d00a      	beq.n	8000f44 <__gesf2+0x34>
 8000f2e:	2a00      	cmp	r2, #0
 8000f30:	d11e      	bne.n	8000f70 <__gesf2+0x60>
 8000f32:	2800      	cmp	r0, #0
 8000f34:	d10a      	bne.n	8000f4c <__gesf2+0x3c>
 8000f36:	2d00      	cmp	r5, #0
 8000f38:	d029      	beq.n	8000f8e <__gesf2+0x7e>
 8000f3a:	2c00      	cmp	r4, #0
 8000f3c:	d12d      	bne.n	8000f9a <__gesf2+0x8a>
 8000f3e:	0048      	lsls	r0, r1, #1
 8000f40:	3801      	subs	r0, #1
 8000f42:	bd30      	pop	{r4, r5, pc}
 8000f44:	2d00      	cmp	r5, #0
 8000f46:	d125      	bne.n	8000f94 <__gesf2+0x84>
 8000f48:	2a00      	cmp	r2, #0
 8000f4a:	d101      	bne.n	8000f50 <__gesf2+0x40>
 8000f4c:	2c00      	cmp	r4, #0
 8000f4e:	d0f6      	beq.n	8000f3e <__gesf2+0x2e>
 8000f50:	428b      	cmp	r3, r1
 8000f52:	d019      	beq.n	8000f88 <__gesf2+0x78>
 8000f54:	2001      	movs	r0, #1
 8000f56:	425b      	negs	r3, r3
 8000f58:	4318      	orrs	r0, r3
 8000f5a:	e7f2      	b.n	8000f42 <__gesf2+0x32>
 8000f5c:	2c00      	cmp	r4, #0
 8000f5e:	d119      	bne.n	8000f94 <__gesf2+0x84>
 8000f60:	28ff      	cmp	r0, #255	@ 0xff
 8000f62:	d1f7      	bne.n	8000f54 <__gesf2+0x44>
 8000f64:	2d00      	cmp	r5, #0
 8000f66:	d115      	bne.n	8000f94 <__gesf2+0x84>
 8000f68:	2000      	movs	r0, #0
 8000f6a:	428b      	cmp	r3, r1
 8000f6c:	d1f2      	bne.n	8000f54 <__gesf2+0x44>
 8000f6e:	e7e8      	b.n	8000f42 <__gesf2+0x32>
 8000f70:	2800      	cmp	r0, #0
 8000f72:	d0ef      	beq.n	8000f54 <__gesf2+0x44>
 8000f74:	428b      	cmp	r3, r1
 8000f76:	d1ed      	bne.n	8000f54 <__gesf2+0x44>
 8000f78:	4282      	cmp	r2, r0
 8000f7a:	dceb      	bgt.n	8000f54 <__gesf2+0x44>
 8000f7c:	db04      	blt.n	8000f88 <__gesf2+0x78>
 8000f7e:	42ac      	cmp	r4, r5
 8000f80:	d8e8      	bhi.n	8000f54 <__gesf2+0x44>
 8000f82:	2000      	movs	r0, #0
 8000f84:	42ac      	cmp	r4, r5
 8000f86:	d2dc      	bcs.n	8000f42 <__gesf2+0x32>
 8000f88:	0058      	lsls	r0, r3, #1
 8000f8a:	3801      	subs	r0, #1
 8000f8c:	e7d9      	b.n	8000f42 <__gesf2+0x32>
 8000f8e:	2c00      	cmp	r4, #0
 8000f90:	d0d7      	beq.n	8000f42 <__gesf2+0x32>
 8000f92:	e7df      	b.n	8000f54 <__gesf2+0x44>
 8000f94:	2002      	movs	r0, #2
 8000f96:	4240      	negs	r0, r0
 8000f98:	e7d3      	b.n	8000f42 <__gesf2+0x32>
 8000f9a:	428b      	cmp	r3, r1
 8000f9c:	d1da      	bne.n	8000f54 <__gesf2+0x44>
 8000f9e:	e7ee      	b.n	8000f7e <__gesf2+0x6e>

08000fa0 <__lesf2>:
 8000fa0:	b530      	push	{r4, r5, lr}
 8000fa2:	0042      	lsls	r2, r0, #1
 8000fa4:	0244      	lsls	r4, r0, #9
 8000fa6:	024d      	lsls	r5, r1, #9
 8000fa8:	0fc3      	lsrs	r3, r0, #31
 8000faa:	0048      	lsls	r0, r1, #1
 8000fac:	0a64      	lsrs	r4, r4, #9
 8000fae:	0e12      	lsrs	r2, r2, #24
 8000fb0:	0a6d      	lsrs	r5, r5, #9
 8000fb2:	0e00      	lsrs	r0, r0, #24
 8000fb4:	0fc9      	lsrs	r1, r1, #31
 8000fb6:	2aff      	cmp	r2, #255	@ 0xff
 8000fb8:	d017      	beq.n	8000fea <__lesf2+0x4a>
 8000fba:	28ff      	cmp	r0, #255	@ 0xff
 8000fbc:	d00a      	beq.n	8000fd4 <__lesf2+0x34>
 8000fbe:	2a00      	cmp	r2, #0
 8000fc0:	d11b      	bne.n	8000ffa <__lesf2+0x5a>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	d10a      	bne.n	8000fdc <__lesf2+0x3c>
 8000fc6:	2d00      	cmp	r5, #0
 8000fc8:	d01d      	beq.n	8001006 <__lesf2+0x66>
 8000fca:	2c00      	cmp	r4, #0
 8000fcc:	d12d      	bne.n	800102a <__lesf2+0x8a>
 8000fce:	0048      	lsls	r0, r1, #1
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e011      	b.n	8000ff8 <__lesf2+0x58>
 8000fd4:	2d00      	cmp	r5, #0
 8000fd6:	d10e      	bne.n	8000ff6 <__lesf2+0x56>
 8000fd8:	2a00      	cmp	r2, #0
 8000fda:	d101      	bne.n	8000fe0 <__lesf2+0x40>
 8000fdc:	2c00      	cmp	r4, #0
 8000fde:	d0f6      	beq.n	8000fce <__lesf2+0x2e>
 8000fe0:	428b      	cmp	r3, r1
 8000fe2:	d10c      	bne.n	8000ffe <__lesf2+0x5e>
 8000fe4:	0058      	lsls	r0, r3, #1
 8000fe6:	3801      	subs	r0, #1
 8000fe8:	e006      	b.n	8000ff8 <__lesf2+0x58>
 8000fea:	2c00      	cmp	r4, #0
 8000fec:	d103      	bne.n	8000ff6 <__lesf2+0x56>
 8000fee:	28ff      	cmp	r0, #255	@ 0xff
 8000ff0:	d105      	bne.n	8000ffe <__lesf2+0x5e>
 8000ff2:	2d00      	cmp	r5, #0
 8000ff4:	d015      	beq.n	8001022 <__lesf2+0x82>
 8000ff6:	2002      	movs	r0, #2
 8000ff8:	bd30      	pop	{r4, r5, pc}
 8000ffa:	2800      	cmp	r0, #0
 8000ffc:	d106      	bne.n	800100c <__lesf2+0x6c>
 8000ffe:	2001      	movs	r0, #1
 8001000:	425b      	negs	r3, r3
 8001002:	4318      	orrs	r0, r3
 8001004:	e7f8      	b.n	8000ff8 <__lesf2+0x58>
 8001006:	2c00      	cmp	r4, #0
 8001008:	d0f6      	beq.n	8000ff8 <__lesf2+0x58>
 800100a:	e7f8      	b.n	8000ffe <__lesf2+0x5e>
 800100c:	428b      	cmp	r3, r1
 800100e:	d1f6      	bne.n	8000ffe <__lesf2+0x5e>
 8001010:	4282      	cmp	r2, r0
 8001012:	dcf4      	bgt.n	8000ffe <__lesf2+0x5e>
 8001014:	dbe6      	blt.n	8000fe4 <__lesf2+0x44>
 8001016:	42ac      	cmp	r4, r5
 8001018:	d8f1      	bhi.n	8000ffe <__lesf2+0x5e>
 800101a:	2000      	movs	r0, #0
 800101c:	42ac      	cmp	r4, r5
 800101e:	d2eb      	bcs.n	8000ff8 <__lesf2+0x58>
 8001020:	e7e0      	b.n	8000fe4 <__lesf2+0x44>
 8001022:	2000      	movs	r0, #0
 8001024:	428b      	cmp	r3, r1
 8001026:	d1ea      	bne.n	8000ffe <__lesf2+0x5e>
 8001028:	e7e6      	b.n	8000ff8 <__lesf2+0x58>
 800102a:	428b      	cmp	r3, r1
 800102c:	d1e7      	bne.n	8000ffe <__lesf2+0x5e>
 800102e:	e7f2      	b.n	8001016 <__lesf2+0x76>

08001030 <__aeabi_fmul>:
 8001030:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001032:	464f      	mov	r7, r9
 8001034:	4646      	mov	r6, r8
 8001036:	46d6      	mov	lr, sl
 8001038:	0044      	lsls	r4, r0, #1
 800103a:	b5c0      	push	{r6, r7, lr}
 800103c:	0246      	lsls	r6, r0, #9
 800103e:	1c0f      	adds	r7, r1, #0
 8001040:	0a76      	lsrs	r6, r6, #9
 8001042:	0e24      	lsrs	r4, r4, #24
 8001044:	0fc5      	lsrs	r5, r0, #31
 8001046:	2c00      	cmp	r4, #0
 8001048:	d100      	bne.n	800104c <__aeabi_fmul+0x1c>
 800104a:	e0da      	b.n	8001202 <__aeabi_fmul+0x1d2>
 800104c:	2cff      	cmp	r4, #255	@ 0xff
 800104e:	d074      	beq.n	800113a <__aeabi_fmul+0x10a>
 8001050:	2380      	movs	r3, #128	@ 0x80
 8001052:	00f6      	lsls	r6, r6, #3
 8001054:	04db      	lsls	r3, r3, #19
 8001056:	431e      	orrs	r6, r3
 8001058:	2300      	movs	r3, #0
 800105a:	4699      	mov	r9, r3
 800105c:	469a      	mov	sl, r3
 800105e:	3c7f      	subs	r4, #127	@ 0x7f
 8001060:	027b      	lsls	r3, r7, #9
 8001062:	0a5b      	lsrs	r3, r3, #9
 8001064:	4698      	mov	r8, r3
 8001066:	007b      	lsls	r3, r7, #1
 8001068:	0e1b      	lsrs	r3, r3, #24
 800106a:	0fff      	lsrs	r7, r7, #31
 800106c:	2b00      	cmp	r3, #0
 800106e:	d074      	beq.n	800115a <__aeabi_fmul+0x12a>
 8001070:	2bff      	cmp	r3, #255	@ 0xff
 8001072:	d100      	bne.n	8001076 <__aeabi_fmul+0x46>
 8001074:	e08e      	b.n	8001194 <__aeabi_fmul+0x164>
 8001076:	4642      	mov	r2, r8
 8001078:	2180      	movs	r1, #128	@ 0x80
 800107a:	00d2      	lsls	r2, r2, #3
 800107c:	04c9      	lsls	r1, r1, #19
 800107e:	4311      	orrs	r1, r2
 8001080:	3b7f      	subs	r3, #127	@ 0x7f
 8001082:	002a      	movs	r2, r5
 8001084:	18e4      	adds	r4, r4, r3
 8001086:	464b      	mov	r3, r9
 8001088:	407a      	eors	r2, r7
 800108a:	4688      	mov	r8, r1
 800108c:	b2d2      	uxtb	r2, r2
 800108e:	2b0a      	cmp	r3, #10
 8001090:	dc75      	bgt.n	800117e <__aeabi_fmul+0x14e>
 8001092:	464b      	mov	r3, r9
 8001094:	2000      	movs	r0, #0
 8001096:	2b02      	cmp	r3, #2
 8001098:	dd0f      	ble.n	80010ba <__aeabi_fmul+0x8a>
 800109a:	4649      	mov	r1, r9
 800109c:	2301      	movs	r3, #1
 800109e:	408b      	lsls	r3, r1
 80010a0:	21a6      	movs	r1, #166	@ 0xa6
 80010a2:	00c9      	lsls	r1, r1, #3
 80010a4:	420b      	tst	r3, r1
 80010a6:	d169      	bne.n	800117c <__aeabi_fmul+0x14c>
 80010a8:	2190      	movs	r1, #144	@ 0x90
 80010aa:	0089      	lsls	r1, r1, #2
 80010ac:	420b      	tst	r3, r1
 80010ae:	d000      	beq.n	80010b2 <__aeabi_fmul+0x82>
 80010b0:	e100      	b.n	80012b4 <__aeabi_fmul+0x284>
 80010b2:	2188      	movs	r1, #136	@ 0x88
 80010b4:	4219      	tst	r1, r3
 80010b6:	d000      	beq.n	80010ba <__aeabi_fmul+0x8a>
 80010b8:	e0f5      	b.n	80012a6 <__aeabi_fmul+0x276>
 80010ba:	4641      	mov	r1, r8
 80010bc:	0409      	lsls	r1, r1, #16
 80010be:	0c09      	lsrs	r1, r1, #16
 80010c0:	4643      	mov	r3, r8
 80010c2:	0008      	movs	r0, r1
 80010c4:	0c35      	lsrs	r5, r6, #16
 80010c6:	0436      	lsls	r6, r6, #16
 80010c8:	0c1b      	lsrs	r3, r3, #16
 80010ca:	0c36      	lsrs	r6, r6, #16
 80010cc:	4370      	muls	r0, r6
 80010ce:	4369      	muls	r1, r5
 80010d0:	435e      	muls	r6, r3
 80010d2:	435d      	muls	r5, r3
 80010d4:	1876      	adds	r6, r6, r1
 80010d6:	0c03      	lsrs	r3, r0, #16
 80010d8:	199b      	adds	r3, r3, r6
 80010da:	4299      	cmp	r1, r3
 80010dc:	d903      	bls.n	80010e6 <__aeabi_fmul+0xb6>
 80010de:	2180      	movs	r1, #128	@ 0x80
 80010e0:	0249      	lsls	r1, r1, #9
 80010e2:	468c      	mov	ip, r1
 80010e4:	4465      	add	r5, ip
 80010e6:	0400      	lsls	r0, r0, #16
 80010e8:	0419      	lsls	r1, r3, #16
 80010ea:	0c00      	lsrs	r0, r0, #16
 80010ec:	1809      	adds	r1, r1, r0
 80010ee:	018e      	lsls	r6, r1, #6
 80010f0:	1e70      	subs	r0, r6, #1
 80010f2:	4186      	sbcs	r6, r0
 80010f4:	0c1b      	lsrs	r3, r3, #16
 80010f6:	0e89      	lsrs	r1, r1, #26
 80010f8:	195b      	adds	r3, r3, r5
 80010fa:	430e      	orrs	r6, r1
 80010fc:	019b      	lsls	r3, r3, #6
 80010fe:	431e      	orrs	r6, r3
 8001100:	011b      	lsls	r3, r3, #4
 8001102:	d46c      	bmi.n	80011de <__aeabi_fmul+0x1ae>
 8001104:	0023      	movs	r3, r4
 8001106:	337f      	adds	r3, #127	@ 0x7f
 8001108:	2b00      	cmp	r3, #0
 800110a:	dc00      	bgt.n	800110e <__aeabi_fmul+0xde>
 800110c:	e0b1      	b.n	8001272 <__aeabi_fmul+0x242>
 800110e:	0015      	movs	r5, r2
 8001110:	0771      	lsls	r1, r6, #29
 8001112:	d00b      	beq.n	800112c <__aeabi_fmul+0xfc>
 8001114:	200f      	movs	r0, #15
 8001116:	0021      	movs	r1, r4
 8001118:	4030      	ands	r0, r6
 800111a:	2804      	cmp	r0, #4
 800111c:	d006      	beq.n	800112c <__aeabi_fmul+0xfc>
 800111e:	3604      	adds	r6, #4
 8001120:	0132      	lsls	r2, r6, #4
 8001122:	d503      	bpl.n	800112c <__aeabi_fmul+0xfc>
 8001124:	4b6e      	ldr	r3, [pc, #440]	@ (80012e0 <__aeabi_fmul+0x2b0>)
 8001126:	401e      	ands	r6, r3
 8001128:	000b      	movs	r3, r1
 800112a:	3380      	adds	r3, #128	@ 0x80
 800112c:	2bfe      	cmp	r3, #254	@ 0xfe
 800112e:	dd00      	ble.n	8001132 <__aeabi_fmul+0x102>
 8001130:	e0bd      	b.n	80012ae <__aeabi_fmul+0x27e>
 8001132:	01b2      	lsls	r2, r6, #6
 8001134:	0a52      	lsrs	r2, r2, #9
 8001136:	b2db      	uxtb	r3, r3
 8001138:	e048      	b.n	80011cc <__aeabi_fmul+0x19c>
 800113a:	2e00      	cmp	r6, #0
 800113c:	d000      	beq.n	8001140 <__aeabi_fmul+0x110>
 800113e:	e092      	b.n	8001266 <__aeabi_fmul+0x236>
 8001140:	2308      	movs	r3, #8
 8001142:	4699      	mov	r9, r3
 8001144:	3b06      	subs	r3, #6
 8001146:	469a      	mov	sl, r3
 8001148:	027b      	lsls	r3, r7, #9
 800114a:	0a5b      	lsrs	r3, r3, #9
 800114c:	4698      	mov	r8, r3
 800114e:	007b      	lsls	r3, r7, #1
 8001150:	24ff      	movs	r4, #255	@ 0xff
 8001152:	0e1b      	lsrs	r3, r3, #24
 8001154:	0fff      	lsrs	r7, r7, #31
 8001156:	2b00      	cmp	r3, #0
 8001158:	d18a      	bne.n	8001070 <__aeabi_fmul+0x40>
 800115a:	4642      	mov	r2, r8
 800115c:	2a00      	cmp	r2, #0
 800115e:	d164      	bne.n	800122a <__aeabi_fmul+0x1fa>
 8001160:	4649      	mov	r1, r9
 8001162:	3201      	adds	r2, #1
 8001164:	4311      	orrs	r1, r2
 8001166:	4689      	mov	r9, r1
 8001168:	290a      	cmp	r1, #10
 800116a:	dc08      	bgt.n	800117e <__aeabi_fmul+0x14e>
 800116c:	407d      	eors	r5, r7
 800116e:	2001      	movs	r0, #1
 8001170:	b2ea      	uxtb	r2, r5
 8001172:	2902      	cmp	r1, #2
 8001174:	dc91      	bgt.n	800109a <__aeabi_fmul+0x6a>
 8001176:	0015      	movs	r5, r2
 8001178:	2200      	movs	r2, #0
 800117a:	e027      	b.n	80011cc <__aeabi_fmul+0x19c>
 800117c:	0015      	movs	r5, r2
 800117e:	4653      	mov	r3, sl
 8001180:	2b02      	cmp	r3, #2
 8001182:	d100      	bne.n	8001186 <__aeabi_fmul+0x156>
 8001184:	e093      	b.n	80012ae <__aeabi_fmul+0x27e>
 8001186:	2b03      	cmp	r3, #3
 8001188:	d01a      	beq.n	80011c0 <__aeabi_fmul+0x190>
 800118a:	2b01      	cmp	r3, #1
 800118c:	d12c      	bne.n	80011e8 <__aeabi_fmul+0x1b8>
 800118e:	2300      	movs	r3, #0
 8001190:	2200      	movs	r2, #0
 8001192:	e01b      	b.n	80011cc <__aeabi_fmul+0x19c>
 8001194:	4643      	mov	r3, r8
 8001196:	34ff      	adds	r4, #255	@ 0xff
 8001198:	2b00      	cmp	r3, #0
 800119a:	d055      	beq.n	8001248 <__aeabi_fmul+0x218>
 800119c:	2103      	movs	r1, #3
 800119e:	464b      	mov	r3, r9
 80011a0:	430b      	orrs	r3, r1
 80011a2:	0019      	movs	r1, r3
 80011a4:	2b0a      	cmp	r3, #10
 80011a6:	dc00      	bgt.n	80011aa <__aeabi_fmul+0x17a>
 80011a8:	e092      	b.n	80012d0 <__aeabi_fmul+0x2a0>
 80011aa:	2b0f      	cmp	r3, #15
 80011ac:	d000      	beq.n	80011b0 <__aeabi_fmul+0x180>
 80011ae:	e08c      	b.n	80012ca <__aeabi_fmul+0x29a>
 80011b0:	2280      	movs	r2, #128	@ 0x80
 80011b2:	03d2      	lsls	r2, r2, #15
 80011b4:	4216      	tst	r6, r2
 80011b6:	d003      	beq.n	80011c0 <__aeabi_fmul+0x190>
 80011b8:	4643      	mov	r3, r8
 80011ba:	4213      	tst	r3, r2
 80011bc:	d100      	bne.n	80011c0 <__aeabi_fmul+0x190>
 80011be:	e07d      	b.n	80012bc <__aeabi_fmul+0x28c>
 80011c0:	2280      	movs	r2, #128	@ 0x80
 80011c2:	03d2      	lsls	r2, r2, #15
 80011c4:	4332      	orrs	r2, r6
 80011c6:	0252      	lsls	r2, r2, #9
 80011c8:	0a52      	lsrs	r2, r2, #9
 80011ca:	23ff      	movs	r3, #255	@ 0xff
 80011cc:	05d8      	lsls	r0, r3, #23
 80011ce:	07ed      	lsls	r5, r5, #31
 80011d0:	4310      	orrs	r0, r2
 80011d2:	4328      	orrs	r0, r5
 80011d4:	bce0      	pop	{r5, r6, r7}
 80011d6:	46ba      	mov	sl, r7
 80011d8:	46b1      	mov	r9, r6
 80011da:	46a8      	mov	r8, r5
 80011dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011de:	2301      	movs	r3, #1
 80011e0:	0015      	movs	r5, r2
 80011e2:	0871      	lsrs	r1, r6, #1
 80011e4:	401e      	ands	r6, r3
 80011e6:	430e      	orrs	r6, r1
 80011e8:	0023      	movs	r3, r4
 80011ea:	3380      	adds	r3, #128	@ 0x80
 80011ec:	1c61      	adds	r1, r4, #1
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	dd41      	ble.n	8001276 <__aeabi_fmul+0x246>
 80011f2:	0772      	lsls	r2, r6, #29
 80011f4:	d094      	beq.n	8001120 <__aeabi_fmul+0xf0>
 80011f6:	220f      	movs	r2, #15
 80011f8:	4032      	ands	r2, r6
 80011fa:	2a04      	cmp	r2, #4
 80011fc:	d000      	beq.n	8001200 <__aeabi_fmul+0x1d0>
 80011fe:	e78e      	b.n	800111e <__aeabi_fmul+0xee>
 8001200:	e78e      	b.n	8001120 <__aeabi_fmul+0xf0>
 8001202:	2e00      	cmp	r6, #0
 8001204:	d105      	bne.n	8001212 <__aeabi_fmul+0x1e2>
 8001206:	2304      	movs	r3, #4
 8001208:	4699      	mov	r9, r3
 800120a:	3b03      	subs	r3, #3
 800120c:	2400      	movs	r4, #0
 800120e:	469a      	mov	sl, r3
 8001210:	e726      	b.n	8001060 <__aeabi_fmul+0x30>
 8001212:	0030      	movs	r0, r6
 8001214:	f002 fbea 	bl	80039ec <__clzsi2>
 8001218:	2476      	movs	r4, #118	@ 0x76
 800121a:	1f43      	subs	r3, r0, #5
 800121c:	409e      	lsls	r6, r3
 800121e:	2300      	movs	r3, #0
 8001220:	4264      	negs	r4, r4
 8001222:	4699      	mov	r9, r3
 8001224:	469a      	mov	sl, r3
 8001226:	1a24      	subs	r4, r4, r0
 8001228:	e71a      	b.n	8001060 <__aeabi_fmul+0x30>
 800122a:	4640      	mov	r0, r8
 800122c:	f002 fbde 	bl	80039ec <__clzsi2>
 8001230:	464b      	mov	r3, r9
 8001232:	1a24      	subs	r4, r4, r0
 8001234:	3c76      	subs	r4, #118	@ 0x76
 8001236:	2b0a      	cmp	r3, #10
 8001238:	dca1      	bgt.n	800117e <__aeabi_fmul+0x14e>
 800123a:	4643      	mov	r3, r8
 800123c:	3805      	subs	r0, #5
 800123e:	4083      	lsls	r3, r0
 8001240:	407d      	eors	r5, r7
 8001242:	4698      	mov	r8, r3
 8001244:	b2ea      	uxtb	r2, r5
 8001246:	e724      	b.n	8001092 <__aeabi_fmul+0x62>
 8001248:	464a      	mov	r2, r9
 800124a:	3302      	adds	r3, #2
 800124c:	4313      	orrs	r3, r2
 800124e:	002a      	movs	r2, r5
 8001250:	407a      	eors	r2, r7
 8001252:	b2d2      	uxtb	r2, r2
 8001254:	2b0a      	cmp	r3, #10
 8001256:	dc92      	bgt.n	800117e <__aeabi_fmul+0x14e>
 8001258:	4649      	mov	r1, r9
 800125a:	0015      	movs	r5, r2
 800125c:	2900      	cmp	r1, #0
 800125e:	d026      	beq.n	80012ae <__aeabi_fmul+0x27e>
 8001260:	4699      	mov	r9, r3
 8001262:	2002      	movs	r0, #2
 8001264:	e719      	b.n	800109a <__aeabi_fmul+0x6a>
 8001266:	230c      	movs	r3, #12
 8001268:	4699      	mov	r9, r3
 800126a:	3b09      	subs	r3, #9
 800126c:	24ff      	movs	r4, #255	@ 0xff
 800126e:	469a      	mov	sl, r3
 8001270:	e6f6      	b.n	8001060 <__aeabi_fmul+0x30>
 8001272:	0015      	movs	r5, r2
 8001274:	0021      	movs	r1, r4
 8001276:	2201      	movs	r2, #1
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	2b1b      	cmp	r3, #27
 800127c:	dd00      	ble.n	8001280 <__aeabi_fmul+0x250>
 800127e:	e786      	b.n	800118e <__aeabi_fmul+0x15e>
 8001280:	319e      	adds	r1, #158	@ 0x9e
 8001282:	0032      	movs	r2, r6
 8001284:	408e      	lsls	r6, r1
 8001286:	40da      	lsrs	r2, r3
 8001288:	1e73      	subs	r3, r6, #1
 800128a:	419e      	sbcs	r6, r3
 800128c:	4332      	orrs	r2, r6
 800128e:	0753      	lsls	r3, r2, #29
 8001290:	d004      	beq.n	800129c <__aeabi_fmul+0x26c>
 8001292:	230f      	movs	r3, #15
 8001294:	4013      	ands	r3, r2
 8001296:	2b04      	cmp	r3, #4
 8001298:	d000      	beq.n	800129c <__aeabi_fmul+0x26c>
 800129a:	3204      	adds	r2, #4
 800129c:	0153      	lsls	r3, r2, #5
 800129e:	d510      	bpl.n	80012c2 <__aeabi_fmul+0x292>
 80012a0:	2301      	movs	r3, #1
 80012a2:	2200      	movs	r2, #0
 80012a4:	e792      	b.n	80011cc <__aeabi_fmul+0x19c>
 80012a6:	003d      	movs	r5, r7
 80012a8:	4646      	mov	r6, r8
 80012aa:	4682      	mov	sl, r0
 80012ac:	e767      	b.n	800117e <__aeabi_fmul+0x14e>
 80012ae:	23ff      	movs	r3, #255	@ 0xff
 80012b0:	2200      	movs	r2, #0
 80012b2:	e78b      	b.n	80011cc <__aeabi_fmul+0x19c>
 80012b4:	2280      	movs	r2, #128	@ 0x80
 80012b6:	2500      	movs	r5, #0
 80012b8:	03d2      	lsls	r2, r2, #15
 80012ba:	e786      	b.n	80011ca <__aeabi_fmul+0x19a>
 80012bc:	003d      	movs	r5, r7
 80012be:	431a      	orrs	r2, r3
 80012c0:	e783      	b.n	80011ca <__aeabi_fmul+0x19a>
 80012c2:	0192      	lsls	r2, r2, #6
 80012c4:	2300      	movs	r3, #0
 80012c6:	0a52      	lsrs	r2, r2, #9
 80012c8:	e780      	b.n	80011cc <__aeabi_fmul+0x19c>
 80012ca:	003d      	movs	r5, r7
 80012cc:	4646      	mov	r6, r8
 80012ce:	e777      	b.n	80011c0 <__aeabi_fmul+0x190>
 80012d0:	002a      	movs	r2, r5
 80012d2:	2301      	movs	r3, #1
 80012d4:	407a      	eors	r2, r7
 80012d6:	408b      	lsls	r3, r1
 80012d8:	2003      	movs	r0, #3
 80012da:	b2d2      	uxtb	r2, r2
 80012dc:	e6e9      	b.n	80010b2 <__aeabi_fmul+0x82>
 80012de:	46c0      	nop			@ (mov r8, r8)
 80012e0:	f7ffffff 	.word	0xf7ffffff

080012e4 <__aeabi_fsub>:
 80012e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012e6:	4647      	mov	r7, r8
 80012e8:	46ce      	mov	lr, r9
 80012ea:	0243      	lsls	r3, r0, #9
 80012ec:	b580      	push	{r7, lr}
 80012ee:	0a5f      	lsrs	r7, r3, #9
 80012f0:	099b      	lsrs	r3, r3, #6
 80012f2:	0045      	lsls	r5, r0, #1
 80012f4:	004a      	lsls	r2, r1, #1
 80012f6:	469c      	mov	ip, r3
 80012f8:	024b      	lsls	r3, r1, #9
 80012fa:	0fc4      	lsrs	r4, r0, #31
 80012fc:	0fce      	lsrs	r6, r1, #31
 80012fe:	0e2d      	lsrs	r5, r5, #24
 8001300:	0a58      	lsrs	r0, r3, #9
 8001302:	0e12      	lsrs	r2, r2, #24
 8001304:	0999      	lsrs	r1, r3, #6
 8001306:	2aff      	cmp	r2, #255	@ 0xff
 8001308:	d06b      	beq.n	80013e2 <__aeabi_fsub+0xfe>
 800130a:	2301      	movs	r3, #1
 800130c:	405e      	eors	r6, r3
 800130e:	1aab      	subs	r3, r5, r2
 8001310:	42b4      	cmp	r4, r6
 8001312:	d04b      	beq.n	80013ac <__aeabi_fsub+0xc8>
 8001314:	2b00      	cmp	r3, #0
 8001316:	dc00      	bgt.n	800131a <__aeabi_fsub+0x36>
 8001318:	e0ff      	b.n	800151a <__aeabi_fsub+0x236>
 800131a:	2a00      	cmp	r2, #0
 800131c:	d100      	bne.n	8001320 <__aeabi_fsub+0x3c>
 800131e:	e088      	b.n	8001432 <__aeabi_fsub+0x14e>
 8001320:	2dff      	cmp	r5, #255	@ 0xff
 8001322:	d100      	bne.n	8001326 <__aeabi_fsub+0x42>
 8001324:	e0ef      	b.n	8001506 <__aeabi_fsub+0x222>
 8001326:	2280      	movs	r2, #128	@ 0x80
 8001328:	04d2      	lsls	r2, r2, #19
 800132a:	4311      	orrs	r1, r2
 800132c:	2001      	movs	r0, #1
 800132e:	2b1b      	cmp	r3, #27
 8001330:	dc08      	bgt.n	8001344 <__aeabi_fsub+0x60>
 8001332:	0008      	movs	r0, r1
 8001334:	2220      	movs	r2, #32
 8001336:	40d8      	lsrs	r0, r3
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	4099      	lsls	r1, r3
 800133c:	000b      	movs	r3, r1
 800133e:	1e5a      	subs	r2, r3, #1
 8001340:	4193      	sbcs	r3, r2
 8001342:	4318      	orrs	r0, r3
 8001344:	4663      	mov	r3, ip
 8001346:	1a1b      	subs	r3, r3, r0
 8001348:	469c      	mov	ip, r3
 800134a:	4663      	mov	r3, ip
 800134c:	015b      	lsls	r3, r3, #5
 800134e:	d400      	bmi.n	8001352 <__aeabi_fsub+0x6e>
 8001350:	e0cd      	b.n	80014ee <__aeabi_fsub+0x20a>
 8001352:	4663      	mov	r3, ip
 8001354:	019f      	lsls	r7, r3, #6
 8001356:	09bf      	lsrs	r7, r7, #6
 8001358:	0038      	movs	r0, r7
 800135a:	f002 fb47 	bl	80039ec <__clzsi2>
 800135e:	003b      	movs	r3, r7
 8001360:	3805      	subs	r0, #5
 8001362:	4083      	lsls	r3, r0
 8001364:	4285      	cmp	r5, r0
 8001366:	dc00      	bgt.n	800136a <__aeabi_fsub+0x86>
 8001368:	e0a2      	b.n	80014b0 <__aeabi_fsub+0x1cc>
 800136a:	4ab7      	ldr	r2, [pc, #732]	@ (8001648 <__aeabi_fsub+0x364>)
 800136c:	1a2d      	subs	r5, r5, r0
 800136e:	401a      	ands	r2, r3
 8001370:	4694      	mov	ip, r2
 8001372:	075a      	lsls	r2, r3, #29
 8001374:	d100      	bne.n	8001378 <__aeabi_fsub+0x94>
 8001376:	e0c3      	b.n	8001500 <__aeabi_fsub+0x21c>
 8001378:	220f      	movs	r2, #15
 800137a:	4013      	ands	r3, r2
 800137c:	2b04      	cmp	r3, #4
 800137e:	d100      	bne.n	8001382 <__aeabi_fsub+0x9e>
 8001380:	e0be      	b.n	8001500 <__aeabi_fsub+0x21c>
 8001382:	2304      	movs	r3, #4
 8001384:	4698      	mov	r8, r3
 8001386:	44c4      	add	ip, r8
 8001388:	4663      	mov	r3, ip
 800138a:	015b      	lsls	r3, r3, #5
 800138c:	d400      	bmi.n	8001390 <__aeabi_fsub+0xac>
 800138e:	e0b7      	b.n	8001500 <__aeabi_fsub+0x21c>
 8001390:	1c68      	adds	r0, r5, #1
 8001392:	2dfe      	cmp	r5, #254	@ 0xfe
 8001394:	d000      	beq.n	8001398 <__aeabi_fsub+0xb4>
 8001396:	e0a5      	b.n	80014e4 <__aeabi_fsub+0x200>
 8001398:	20ff      	movs	r0, #255	@ 0xff
 800139a:	2200      	movs	r2, #0
 800139c:	05c0      	lsls	r0, r0, #23
 800139e:	4310      	orrs	r0, r2
 80013a0:	07e4      	lsls	r4, r4, #31
 80013a2:	4320      	orrs	r0, r4
 80013a4:	bcc0      	pop	{r6, r7}
 80013a6:	46b9      	mov	r9, r7
 80013a8:	46b0      	mov	r8, r6
 80013aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	dc00      	bgt.n	80013b2 <__aeabi_fsub+0xce>
 80013b0:	e1eb      	b.n	800178a <__aeabi_fsub+0x4a6>
 80013b2:	2a00      	cmp	r2, #0
 80013b4:	d046      	beq.n	8001444 <__aeabi_fsub+0x160>
 80013b6:	2dff      	cmp	r5, #255	@ 0xff
 80013b8:	d100      	bne.n	80013bc <__aeabi_fsub+0xd8>
 80013ba:	e0a4      	b.n	8001506 <__aeabi_fsub+0x222>
 80013bc:	2280      	movs	r2, #128	@ 0x80
 80013be:	04d2      	lsls	r2, r2, #19
 80013c0:	4311      	orrs	r1, r2
 80013c2:	2b1b      	cmp	r3, #27
 80013c4:	dc00      	bgt.n	80013c8 <__aeabi_fsub+0xe4>
 80013c6:	e0fb      	b.n	80015c0 <__aeabi_fsub+0x2dc>
 80013c8:	2305      	movs	r3, #5
 80013ca:	4698      	mov	r8, r3
 80013cc:	002b      	movs	r3, r5
 80013ce:	44c4      	add	ip, r8
 80013d0:	4662      	mov	r2, ip
 80013d2:	08d7      	lsrs	r7, r2, #3
 80013d4:	2bff      	cmp	r3, #255	@ 0xff
 80013d6:	d100      	bne.n	80013da <__aeabi_fsub+0xf6>
 80013d8:	e095      	b.n	8001506 <__aeabi_fsub+0x222>
 80013da:	027a      	lsls	r2, r7, #9
 80013dc:	0a52      	lsrs	r2, r2, #9
 80013de:	b2d8      	uxtb	r0, r3
 80013e0:	e7dc      	b.n	800139c <__aeabi_fsub+0xb8>
 80013e2:	002b      	movs	r3, r5
 80013e4:	3bff      	subs	r3, #255	@ 0xff
 80013e6:	4699      	mov	r9, r3
 80013e8:	2900      	cmp	r1, #0
 80013ea:	d118      	bne.n	800141e <__aeabi_fsub+0x13a>
 80013ec:	2301      	movs	r3, #1
 80013ee:	405e      	eors	r6, r3
 80013f0:	42b4      	cmp	r4, r6
 80013f2:	d100      	bne.n	80013f6 <__aeabi_fsub+0x112>
 80013f4:	e0ca      	b.n	800158c <__aeabi_fsub+0x2a8>
 80013f6:	464b      	mov	r3, r9
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d02d      	beq.n	8001458 <__aeabi_fsub+0x174>
 80013fc:	2d00      	cmp	r5, #0
 80013fe:	d000      	beq.n	8001402 <__aeabi_fsub+0x11e>
 8001400:	e13c      	b.n	800167c <__aeabi_fsub+0x398>
 8001402:	23ff      	movs	r3, #255	@ 0xff
 8001404:	4664      	mov	r4, ip
 8001406:	2c00      	cmp	r4, #0
 8001408:	d100      	bne.n	800140c <__aeabi_fsub+0x128>
 800140a:	e15f      	b.n	80016cc <__aeabi_fsub+0x3e8>
 800140c:	1e5d      	subs	r5, r3, #1
 800140e:	2b01      	cmp	r3, #1
 8001410:	d100      	bne.n	8001414 <__aeabi_fsub+0x130>
 8001412:	e174      	b.n	80016fe <__aeabi_fsub+0x41a>
 8001414:	0034      	movs	r4, r6
 8001416:	2bff      	cmp	r3, #255	@ 0xff
 8001418:	d074      	beq.n	8001504 <__aeabi_fsub+0x220>
 800141a:	002b      	movs	r3, r5
 800141c:	e103      	b.n	8001626 <__aeabi_fsub+0x342>
 800141e:	42b4      	cmp	r4, r6
 8001420:	d100      	bne.n	8001424 <__aeabi_fsub+0x140>
 8001422:	e09c      	b.n	800155e <__aeabi_fsub+0x27a>
 8001424:	2b00      	cmp	r3, #0
 8001426:	d017      	beq.n	8001458 <__aeabi_fsub+0x174>
 8001428:	2d00      	cmp	r5, #0
 800142a:	d0ea      	beq.n	8001402 <__aeabi_fsub+0x11e>
 800142c:	0007      	movs	r7, r0
 800142e:	0034      	movs	r4, r6
 8001430:	e06c      	b.n	800150c <__aeabi_fsub+0x228>
 8001432:	2900      	cmp	r1, #0
 8001434:	d0cc      	beq.n	80013d0 <__aeabi_fsub+0xec>
 8001436:	1e5a      	subs	r2, r3, #1
 8001438:	2b01      	cmp	r3, #1
 800143a:	d02b      	beq.n	8001494 <__aeabi_fsub+0x1b0>
 800143c:	2bff      	cmp	r3, #255	@ 0xff
 800143e:	d062      	beq.n	8001506 <__aeabi_fsub+0x222>
 8001440:	0013      	movs	r3, r2
 8001442:	e773      	b.n	800132c <__aeabi_fsub+0x48>
 8001444:	2900      	cmp	r1, #0
 8001446:	d0c3      	beq.n	80013d0 <__aeabi_fsub+0xec>
 8001448:	1e5a      	subs	r2, r3, #1
 800144a:	2b01      	cmp	r3, #1
 800144c:	d100      	bne.n	8001450 <__aeabi_fsub+0x16c>
 800144e:	e11e      	b.n	800168e <__aeabi_fsub+0x3aa>
 8001450:	2bff      	cmp	r3, #255	@ 0xff
 8001452:	d058      	beq.n	8001506 <__aeabi_fsub+0x222>
 8001454:	0013      	movs	r3, r2
 8001456:	e7b4      	b.n	80013c2 <__aeabi_fsub+0xde>
 8001458:	22fe      	movs	r2, #254	@ 0xfe
 800145a:	1c6b      	adds	r3, r5, #1
 800145c:	421a      	tst	r2, r3
 800145e:	d10d      	bne.n	800147c <__aeabi_fsub+0x198>
 8001460:	2d00      	cmp	r5, #0
 8001462:	d060      	beq.n	8001526 <__aeabi_fsub+0x242>
 8001464:	4663      	mov	r3, ip
 8001466:	2b00      	cmp	r3, #0
 8001468:	d000      	beq.n	800146c <__aeabi_fsub+0x188>
 800146a:	e120      	b.n	80016ae <__aeabi_fsub+0x3ca>
 800146c:	2900      	cmp	r1, #0
 800146e:	d000      	beq.n	8001472 <__aeabi_fsub+0x18e>
 8001470:	e128      	b.n	80016c4 <__aeabi_fsub+0x3e0>
 8001472:	2280      	movs	r2, #128	@ 0x80
 8001474:	2400      	movs	r4, #0
 8001476:	20ff      	movs	r0, #255	@ 0xff
 8001478:	03d2      	lsls	r2, r2, #15
 800147a:	e78f      	b.n	800139c <__aeabi_fsub+0xb8>
 800147c:	4663      	mov	r3, ip
 800147e:	1a5f      	subs	r7, r3, r1
 8001480:	017b      	lsls	r3, r7, #5
 8001482:	d500      	bpl.n	8001486 <__aeabi_fsub+0x1a2>
 8001484:	e0fe      	b.n	8001684 <__aeabi_fsub+0x3a0>
 8001486:	2f00      	cmp	r7, #0
 8001488:	d000      	beq.n	800148c <__aeabi_fsub+0x1a8>
 800148a:	e765      	b.n	8001358 <__aeabi_fsub+0x74>
 800148c:	2400      	movs	r4, #0
 800148e:	2000      	movs	r0, #0
 8001490:	2200      	movs	r2, #0
 8001492:	e783      	b.n	800139c <__aeabi_fsub+0xb8>
 8001494:	4663      	mov	r3, ip
 8001496:	1a59      	subs	r1, r3, r1
 8001498:	014b      	lsls	r3, r1, #5
 800149a:	d400      	bmi.n	800149e <__aeabi_fsub+0x1ba>
 800149c:	e119      	b.n	80016d2 <__aeabi_fsub+0x3ee>
 800149e:	018f      	lsls	r7, r1, #6
 80014a0:	09bf      	lsrs	r7, r7, #6
 80014a2:	0038      	movs	r0, r7
 80014a4:	f002 faa2 	bl	80039ec <__clzsi2>
 80014a8:	003b      	movs	r3, r7
 80014aa:	3805      	subs	r0, #5
 80014ac:	4083      	lsls	r3, r0
 80014ae:	2501      	movs	r5, #1
 80014b0:	2220      	movs	r2, #32
 80014b2:	1b40      	subs	r0, r0, r5
 80014b4:	3001      	adds	r0, #1
 80014b6:	1a12      	subs	r2, r2, r0
 80014b8:	0019      	movs	r1, r3
 80014ba:	4093      	lsls	r3, r2
 80014bc:	40c1      	lsrs	r1, r0
 80014be:	1e5a      	subs	r2, r3, #1
 80014c0:	4193      	sbcs	r3, r2
 80014c2:	4319      	orrs	r1, r3
 80014c4:	468c      	mov	ip, r1
 80014c6:	1e0b      	subs	r3, r1, #0
 80014c8:	d0e1      	beq.n	800148e <__aeabi_fsub+0x1aa>
 80014ca:	075b      	lsls	r3, r3, #29
 80014cc:	d100      	bne.n	80014d0 <__aeabi_fsub+0x1ec>
 80014ce:	e152      	b.n	8001776 <__aeabi_fsub+0x492>
 80014d0:	230f      	movs	r3, #15
 80014d2:	2500      	movs	r5, #0
 80014d4:	400b      	ands	r3, r1
 80014d6:	2b04      	cmp	r3, #4
 80014d8:	d000      	beq.n	80014dc <__aeabi_fsub+0x1f8>
 80014da:	e752      	b.n	8001382 <__aeabi_fsub+0x9e>
 80014dc:	2001      	movs	r0, #1
 80014de:	014a      	lsls	r2, r1, #5
 80014e0:	d400      	bmi.n	80014e4 <__aeabi_fsub+0x200>
 80014e2:	e092      	b.n	800160a <__aeabi_fsub+0x326>
 80014e4:	b2c0      	uxtb	r0, r0
 80014e6:	4663      	mov	r3, ip
 80014e8:	019a      	lsls	r2, r3, #6
 80014ea:	0a52      	lsrs	r2, r2, #9
 80014ec:	e756      	b.n	800139c <__aeabi_fsub+0xb8>
 80014ee:	4663      	mov	r3, ip
 80014f0:	075b      	lsls	r3, r3, #29
 80014f2:	d005      	beq.n	8001500 <__aeabi_fsub+0x21c>
 80014f4:	230f      	movs	r3, #15
 80014f6:	4662      	mov	r2, ip
 80014f8:	4013      	ands	r3, r2
 80014fa:	2b04      	cmp	r3, #4
 80014fc:	d000      	beq.n	8001500 <__aeabi_fsub+0x21c>
 80014fe:	e740      	b.n	8001382 <__aeabi_fsub+0x9e>
 8001500:	002b      	movs	r3, r5
 8001502:	e765      	b.n	80013d0 <__aeabi_fsub+0xec>
 8001504:	0007      	movs	r7, r0
 8001506:	2f00      	cmp	r7, #0
 8001508:	d100      	bne.n	800150c <__aeabi_fsub+0x228>
 800150a:	e745      	b.n	8001398 <__aeabi_fsub+0xb4>
 800150c:	2280      	movs	r2, #128	@ 0x80
 800150e:	03d2      	lsls	r2, r2, #15
 8001510:	433a      	orrs	r2, r7
 8001512:	0252      	lsls	r2, r2, #9
 8001514:	20ff      	movs	r0, #255	@ 0xff
 8001516:	0a52      	lsrs	r2, r2, #9
 8001518:	e740      	b.n	800139c <__aeabi_fsub+0xb8>
 800151a:	2b00      	cmp	r3, #0
 800151c:	d179      	bne.n	8001612 <__aeabi_fsub+0x32e>
 800151e:	22fe      	movs	r2, #254	@ 0xfe
 8001520:	1c6b      	adds	r3, r5, #1
 8001522:	421a      	tst	r2, r3
 8001524:	d1aa      	bne.n	800147c <__aeabi_fsub+0x198>
 8001526:	4663      	mov	r3, ip
 8001528:	2b00      	cmp	r3, #0
 800152a:	d100      	bne.n	800152e <__aeabi_fsub+0x24a>
 800152c:	e0f5      	b.n	800171a <__aeabi_fsub+0x436>
 800152e:	2900      	cmp	r1, #0
 8001530:	d100      	bne.n	8001534 <__aeabi_fsub+0x250>
 8001532:	e0d1      	b.n	80016d8 <__aeabi_fsub+0x3f4>
 8001534:	1a5f      	subs	r7, r3, r1
 8001536:	2380      	movs	r3, #128	@ 0x80
 8001538:	04db      	lsls	r3, r3, #19
 800153a:	421f      	tst	r7, r3
 800153c:	d100      	bne.n	8001540 <__aeabi_fsub+0x25c>
 800153e:	e10e      	b.n	800175e <__aeabi_fsub+0x47a>
 8001540:	4662      	mov	r2, ip
 8001542:	2401      	movs	r4, #1
 8001544:	1a8a      	subs	r2, r1, r2
 8001546:	4694      	mov	ip, r2
 8001548:	2000      	movs	r0, #0
 800154a:	4034      	ands	r4, r6
 800154c:	2a00      	cmp	r2, #0
 800154e:	d100      	bne.n	8001552 <__aeabi_fsub+0x26e>
 8001550:	e724      	b.n	800139c <__aeabi_fsub+0xb8>
 8001552:	2001      	movs	r0, #1
 8001554:	421a      	tst	r2, r3
 8001556:	d1c6      	bne.n	80014e6 <__aeabi_fsub+0x202>
 8001558:	2300      	movs	r3, #0
 800155a:	08d7      	lsrs	r7, r2, #3
 800155c:	e73d      	b.n	80013da <__aeabi_fsub+0xf6>
 800155e:	2b00      	cmp	r3, #0
 8001560:	d017      	beq.n	8001592 <__aeabi_fsub+0x2ae>
 8001562:	2d00      	cmp	r5, #0
 8001564:	d000      	beq.n	8001568 <__aeabi_fsub+0x284>
 8001566:	e0af      	b.n	80016c8 <__aeabi_fsub+0x3e4>
 8001568:	23ff      	movs	r3, #255	@ 0xff
 800156a:	4665      	mov	r5, ip
 800156c:	2d00      	cmp	r5, #0
 800156e:	d100      	bne.n	8001572 <__aeabi_fsub+0x28e>
 8001570:	e0ad      	b.n	80016ce <__aeabi_fsub+0x3ea>
 8001572:	1e5e      	subs	r6, r3, #1
 8001574:	2b01      	cmp	r3, #1
 8001576:	d100      	bne.n	800157a <__aeabi_fsub+0x296>
 8001578:	e089      	b.n	800168e <__aeabi_fsub+0x3aa>
 800157a:	2bff      	cmp	r3, #255	@ 0xff
 800157c:	d0c2      	beq.n	8001504 <__aeabi_fsub+0x220>
 800157e:	2e1b      	cmp	r6, #27
 8001580:	dc00      	bgt.n	8001584 <__aeabi_fsub+0x2a0>
 8001582:	e0ab      	b.n	80016dc <__aeabi_fsub+0x3f8>
 8001584:	1d4b      	adds	r3, r1, #5
 8001586:	469c      	mov	ip, r3
 8001588:	0013      	movs	r3, r2
 800158a:	e721      	b.n	80013d0 <__aeabi_fsub+0xec>
 800158c:	464b      	mov	r3, r9
 800158e:	2b00      	cmp	r3, #0
 8001590:	d170      	bne.n	8001674 <__aeabi_fsub+0x390>
 8001592:	22fe      	movs	r2, #254	@ 0xfe
 8001594:	1c6b      	adds	r3, r5, #1
 8001596:	421a      	tst	r2, r3
 8001598:	d15e      	bne.n	8001658 <__aeabi_fsub+0x374>
 800159a:	2d00      	cmp	r5, #0
 800159c:	d000      	beq.n	80015a0 <__aeabi_fsub+0x2bc>
 800159e:	e0c3      	b.n	8001728 <__aeabi_fsub+0x444>
 80015a0:	4663      	mov	r3, ip
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d100      	bne.n	80015a8 <__aeabi_fsub+0x2c4>
 80015a6:	e0d0      	b.n	800174a <__aeabi_fsub+0x466>
 80015a8:	2900      	cmp	r1, #0
 80015aa:	d100      	bne.n	80015ae <__aeabi_fsub+0x2ca>
 80015ac:	e094      	b.n	80016d8 <__aeabi_fsub+0x3f4>
 80015ae:	000a      	movs	r2, r1
 80015b0:	4462      	add	r2, ip
 80015b2:	0153      	lsls	r3, r2, #5
 80015b4:	d400      	bmi.n	80015b8 <__aeabi_fsub+0x2d4>
 80015b6:	e0d8      	b.n	800176a <__aeabi_fsub+0x486>
 80015b8:	0192      	lsls	r2, r2, #6
 80015ba:	2001      	movs	r0, #1
 80015bc:	0a52      	lsrs	r2, r2, #9
 80015be:	e6ed      	b.n	800139c <__aeabi_fsub+0xb8>
 80015c0:	0008      	movs	r0, r1
 80015c2:	2220      	movs	r2, #32
 80015c4:	40d8      	lsrs	r0, r3
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	4099      	lsls	r1, r3
 80015ca:	000b      	movs	r3, r1
 80015cc:	1e5a      	subs	r2, r3, #1
 80015ce:	4193      	sbcs	r3, r2
 80015d0:	4303      	orrs	r3, r0
 80015d2:	449c      	add	ip, r3
 80015d4:	4663      	mov	r3, ip
 80015d6:	015b      	lsls	r3, r3, #5
 80015d8:	d589      	bpl.n	80014ee <__aeabi_fsub+0x20a>
 80015da:	3501      	adds	r5, #1
 80015dc:	2dff      	cmp	r5, #255	@ 0xff
 80015de:	d100      	bne.n	80015e2 <__aeabi_fsub+0x2fe>
 80015e0:	e6da      	b.n	8001398 <__aeabi_fsub+0xb4>
 80015e2:	4662      	mov	r2, ip
 80015e4:	2301      	movs	r3, #1
 80015e6:	4919      	ldr	r1, [pc, #100]	@ (800164c <__aeabi_fsub+0x368>)
 80015e8:	4013      	ands	r3, r2
 80015ea:	0852      	lsrs	r2, r2, #1
 80015ec:	400a      	ands	r2, r1
 80015ee:	431a      	orrs	r2, r3
 80015f0:	0013      	movs	r3, r2
 80015f2:	4694      	mov	ip, r2
 80015f4:	075b      	lsls	r3, r3, #29
 80015f6:	d004      	beq.n	8001602 <__aeabi_fsub+0x31e>
 80015f8:	230f      	movs	r3, #15
 80015fa:	4013      	ands	r3, r2
 80015fc:	2b04      	cmp	r3, #4
 80015fe:	d000      	beq.n	8001602 <__aeabi_fsub+0x31e>
 8001600:	e6bf      	b.n	8001382 <__aeabi_fsub+0x9e>
 8001602:	4663      	mov	r3, ip
 8001604:	015b      	lsls	r3, r3, #5
 8001606:	d500      	bpl.n	800160a <__aeabi_fsub+0x326>
 8001608:	e6c2      	b.n	8001390 <__aeabi_fsub+0xac>
 800160a:	4663      	mov	r3, ip
 800160c:	08df      	lsrs	r7, r3, #3
 800160e:	002b      	movs	r3, r5
 8001610:	e6e3      	b.n	80013da <__aeabi_fsub+0xf6>
 8001612:	1b53      	subs	r3, r2, r5
 8001614:	2d00      	cmp	r5, #0
 8001616:	d100      	bne.n	800161a <__aeabi_fsub+0x336>
 8001618:	e6f4      	b.n	8001404 <__aeabi_fsub+0x120>
 800161a:	2080      	movs	r0, #128	@ 0x80
 800161c:	4664      	mov	r4, ip
 800161e:	04c0      	lsls	r0, r0, #19
 8001620:	4304      	orrs	r4, r0
 8001622:	46a4      	mov	ip, r4
 8001624:	0034      	movs	r4, r6
 8001626:	2001      	movs	r0, #1
 8001628:	2b1b      	cmp	r3, #27
 800162a:	dc09      	bgt.n	8001640 <__aeabi_fsub+0x35c>
 800162c:	2520      	movs	r5, #32
 800162e:	4660      	mov	r0, ip
 8001630:	40d8      	lsrs	r0, r3
 8001632:	1aeb      	subs	r3, r5, r3
 8001634:	4665      	mov	r5, ip
 8001636:	409d      	lsls	r5, r3
 8001638:	002b      	movs	r3, r5
 800163a:	1e5d      	subs	r5, r3, #1
 800163c:	41ab      	sbcs	r3, r5
 800163e:	4318      	orrs	r0, r3
 8001640:	1a0b      	subs	r3, r1, r0
 8001642:	469c      	mov	ip, r3
 8001644:	0015      	movs	r5, r2
 8001646:	e680      	b.n	800134a <__aeabi_fsub+0x66>
 8001648:	fbffffff 	.word	0xfbffffff
 800164c:	7dffffff 	.word	0x7dffffff
 8001650:	22fe      	movs	r2, #254	@ 0xfe
 8001652:	1c6b      	adds	r3, r5, #1
 8001654:	4213      	tst	r3, r2
 8001656:	d0a3      	beq.n	80015a0 <__aeabi_fsub+0x2bc>
 8001658:	2bff      	cmp	r3, #255	@ 0xff
 800165a:	d100      	bne.n	800165e <__aeabi_fsub+0x37a>
 800165c:	e69c      	b.n	8001398 <__aeabi_fsub+0xb4>
 800165e:	4461      	add	r1, ip
 8001660:	0849      	lsrs	r1, r1, #1
 8001662:	074a      	lsls	r2, r1, #29
 8001664:	d049      	beq.n	80016fa <__aeabi_fsub+0x416>
 8001666:	220f      	movs	r2, #15
 8001668:	400a      	ands	r2, r1
 800166a:	2a04      	cmp	r2, #4
 800166c:	d045      	beq.n	80016fa <__aeabi_fsub+0x416>
 800166e:	1d0a      	adds	r2, r1, #4
 8001670:	4694      	mov	ip, r2
 8001672:	e6ad      	b.n	80013d0 <__aeabi_fsub+0xec>
 8001674:	2d00      	cmp	r5, #0
 8001676:	d100      	bne.n	800167a <__aeabi_fsub+0x396>
 8001678:	e776      	b.n	8001568 <__aeabi_fsub+0x284>
 800167a:	e68d      	b.n	8001398 <__aeabi_fsub+0xb4>
 800167c:	0034      	movs	r4, r6
 800167e:	20ff      	movs	r0, #255	@ 0xff
 8001680:	2200      	movs	r2, #0
 8001682:	e68b      	b.n	800139c <__aeabi_fsub+0xb8>
 8001684:	4663      	mov	r3, ip
 8001686:	2401      	movs	r4, #1
 8001688:	1acf      	subs	r7, r1, r3
 800168a:	4034      	ands	r4, r6
 800168c:	e664      	b.n	8001358 <__aeabi_fsub+0x74>
 800168e:	4461      	add	r1, ip
 8001690:	014b      	lsls	r3, r1, #5
 8001692:	d56d      	bpl.n	8001770 <__aeabi_fsub+0x48c>
 8001694:	0848      	lsrs	r0, r1, #1
 8001696:	4944      	ldr	r1, [pc, #272]	@ (80017a8 <__aeabi_fsub+0x4c4>)
 8001698:	4001      	ands	r1, r0
 800169a:	0743      	lsls	r3, r0, #29
 800169c:	d02c      	beq.n	80016f8 <__aeabi_fsub+0x414>
 800169e:	230f      	movs	r3, #15
 80016a0:	4003      	ands	r3, r0
 80016a2:	2b04      	cmp	r3, #4
 80016a4:	d028      	beq.n	80016f8 <__aeabi_fsub+0x414>
 80016a6:	1d0b      	adds	r3, r1, #4
 80016a8:	469c      	mov	ip, r3
 80016aa:	2302      	movs	r3, #2
 80016ac:	e690      	b.n	80013d0 <__aeabi_fsub+0xec>
 80016ae:	2900      	cmp	r1, #0
 80016b0:	d100      	bne.n	80016b4 <__aeabi_fsub+0x3d0>
 80016b2:	e72b      	b.n	800150c <__aeabi_fsub+0x228>
 80016b4:	2380      	movs	r3, #128	@ 0x80
 80016b6:	03db      	lsls	r3, r3, #15
 80016b8:	429f      	cmp	r7, r3
 80016ba:	d200      	bcs.n	80016be <__aeabi_fsub+0x3da>
 80016bc:	e726      	b.n	800150c <__aeabi_fsub+0x228>
 80016be:	4298      	cmp	r0, r3
 80016c0:	d300      	bcc.n	80016c4 <__aeabi_fsub+0x3e0>
 80016c2:	e723      	b.n	800150c <__aeabi_fsub+0x228>
 80016c4:	2401      	movs	r4, #1
 80016c6:	4034      	ands	r4, r6
 80016c8:	0007      	movs	r7, r0
 80016ca:	e71f      	b.n	800150c <__aeabi_fsub+0x228>
 80016cc:	0034      	movs	r4, r6
 80016ce:	468c      	mov	ip, r1
 80016d0:	e67e      	b.n	80013d0 <__aeabi_fsub+0xec>
 80016d2:	2301      	movs	r3, #1
 80016d4:	08cf      	lsrs	r7, r1, #3
 80016d6:	e680      	b.n	80013da <__aeabi_fsub+0xf6>
 80016d8:	2300      	movs	r3, #0
 80016da:	e67e      	b.n	80013da <__aeabi_fsub+0xf6>
 80016dc:	2020      	movs	r0, #32
 80016de:	4665      	mov	r5, ip
 80016e0:	1b80      	subs	r0, r0, r6
 80016e2:	4085      	lsls	r5, r0
 80016e4:	4663      	mov	r3, ip
 80016e6:	0028      	movs	r0, r5
 80016e8:	40f3      	lsrs	r3, r6
 80016ea:	1e45      	subs	r5, r0, #1
 80016ec:	41a8      	sbcs	r0, r5
 80016ee:	4303      	orrs	r3, r0
 80016f0:	469c      	mov	ip, r3
 80016f2:	0015      	movs	r5, r2
 80016f4:	448c      	add	ip, r1
 80016f6:	e76d      	b.n	80015d4 <__aeabi_fsub+0x2f0>
 80016f8:	2302      	movs	r3, #2
 80016fa:	08cf      	lsrs	r7, r1, #3
 80016fc:	e66d      	b.n	80013da <__aeabi_fsub+0xf6>
 80016fe:	1b0f      	subs	r7, r1, r4
 8001700:	017b      	lsls	r3, r7, #5
 8001702:	d528      	bpl.n	8001756 <__aeabi_fsub+0x472>
 8001704:	01bf      	lsls	r7, r7, #6
 8001706:	09bf      	lsrs	r7, r7, #6
 8001708:	0038      	movs	r0, r7
 800170a:	f002 f96f 	bl	80039ec <__clzsi2>
 800170e:	003b      	movs	r3, r7
 8001710:	3805      	subs	r0, #5
 8001712:	4083      	lsls	r3, r0
 8001714:	0034      	movs	r4, r6
 8001716:	2501      	movs	r5, #1
 8001718:	e6ca      	b.n	80014b0 <__aeabi_fsub+0x1cc>
 800171a:	2900      	cmp	r1, #0
 800171c:	d100      	bne.n	8001720 <__aeabi_fsub+0x43c>
 800171e:	e6b5      	b.n	800148c <__aeabi_fsub+0x1a8>
 8001720:	2401      	movs	r4, #1
 8001722:	0007      	movs	r7, r0
 8001724:	4034      	ands	r4, r6
 8001726:	e658      	b.n	80013da <__aeabi_fsub+0xf6>
 8001728:	4663      	mov	r3, ip
 800172a:	2b00      	cmp	r3, #0
 800172c:	d100      	bne.n	8001730 <__aeabi_fsub+0x44c>
 800172e:	e6e9      	b.n	8001504 <__aeabi_fsub+0x220>
 8001730:	2900      	cmp	r1, #0
 8001732:	d100      	bne.n	8001736 <__aeabi_fsub+0x452>
 8001734:	e6ea      	b.n	800150c <__aeabi_fsub+0x228>
 8001736:	2380      	movs	r3, #128	@ 0x80
 8001738:	03db      	lsls	r3, r3, #15
 800173a:	429f      	cmp	r7, r3
 800173c:	d200      	bcs.n	8001740 <__aeabi_fsub+0x45c>
 800173e:	e6e5      	b.n	800150c <__aeabi_fsub+0x228>
 8001740:	4298      	cmp	r0, r3
 8001742:	d300      	bcc.n	8001746 <__aeabi_fsub+0x462>
 8001744:	e6e2      	b.n	800150c <__aeabi_fsub+0x228>
 8001746:	0007      	movs	r7, r0
 8001748:	e6e0      	b.n	800150c <__aeabi_fsub+0x228>
 800174a:	2900      	cmp	r1, #0
 800174c:	d100      	bne.n	8001750 <__aeabi_fsub+0x46c>
 800174e:	e69e      	b.n	800148e <__aeabi_fsub+0x1aa>
 8001750:	2300      	movs	r3, #0
 8001752:	08cf      	lsrs	r7, r1, #3
 8001754:	e641      	b.n	80013da <__aeabi_fsub+0xf6>
 8001756:	0034      	movs	r4, r6
 8001758:	2301      	movs	r3, #1
 800175a:	08ff      	lsrs	r7, r7, #3
 800175c:	e63d      	b.n	80013da <__aeabi_fsub+0xf6>
 800175e:	2f00      	cmp	r7, #0
 8001760:	d100      	bne.n	8001764 <__aeabi_fsub+0x480>
 8001762:	e693      	b.n	800148c <__aeabi_fsub+0x1a8>
 8001764:	2300      	movs	r3, #0
 8001766:	08ff      	lsrs	r7, r7, #3
 8001768:	e637      	b.n	80013da <__aeabi_fsub+0xf6>
 800176a:	2300      	movs	r3, #0
 800176c:	08d7      	lsrs	r7, r2, #3
 800176e:	e634      	b.n	80013da <__aeabi_fsub+0xf6>
 8001770:	2301      	movs	r3, #1
 8001772:	08cf      	lsrs	r7, r1, #3
 8001774:	e631      	b.n	80013da <__aeabi_fsub+0xf6>
 8001776:	2280      	movs	r2, #128	@ 0x80
 8001778:	000b      	movs	r3, r1
 800177a:	04d2      	lsls	r2, r2, #19
 800177c:	2001      	movs	r0, #1
 800177e:	4013      	ands	r3, r2
 8001780:	4211      	tst	r1, r2
 8001782:	d000      	beq.n	8001786 <__aeabi_fsub+0x4a2>
 8001784:	e6ae      	b.n	80014e4 <__aeabi_fsub+0x200>
 8001786:	08cf      	lsrs	r7, r1, #3
 8001788:	e627      	b.n	80013da <__aeabi_fsub+0xf6>
 800178a:	2b00      	cmp	r3, #0
 800178c:	d100      	bne.n	8001790 <__aeabi_fsub+0x4ac>
 800178e:	e75f      	b.n	8001650 <__aeabi_fsub+0x36c>
 8001790:	1b56      	subs	r6, r2, r5
 8001792:	2d00      	cmp	r5, #0
 8001794:	d101      	bne.n	800179a <__aeabi_fsub+0x4b6>
 8001796:	0033      	movs	r3, r6
 8001798:	e6e7      	b.n	800156a <__aeabi_fsub+0x286>
 800179a:	2380      	movs	r3, #128	@ 0x80
 800179c:	4660      	mov	r0, ip
 800179e:	04db      	lsls	r3, r3, #19
 80017a0:	4318      	orrs	r0, r3
 80017a2:	4684      	mov	ip, r0
 80017a4:	e6eb      	b.n	800157e <__aeabi_fsub+0x29a>
 80017a6:	46c0      	nop			@ (mov r8, r8)
 80017a8:	7dffffff 	.word	0x7dffffff

080017ac <__aeabi_f2iz>:
 80017ac:	0241      	lsls	r1, r0, #9
 80017ae:	0042      	lsls	r2, r0, #1
 80017b0:	0fc3      	lsrs	r3, r0, #31
 80017b2:	0a49      	lsrs	r1, r1, #9
 80017b4:	2000      	movs	r0, #0
 80017b6:	0e12      	lsrs	r2, r2, #24
 80017b8:	2a7e      	cmp	r2, #126	@ 0x7e
 80017ba:	dd03      	ble.n	80017c4 <__aeabi_f2iz+0x18>
 80017bc:	2a9d      	cmp	r2, #157	@ 0x9d
 80017be:	dd02      	ble.n	80017c6 <__aeabi_f2iz+0x1a>
 80017c0:	4a09      	ldr	r2, [pc, #36]	@ (80017e8 <__aeabi_f2iz+0x3c>)
 80017c2:	1898      	adds	r0, r3, r2
 80017c4:	4770      	bx	lr
 80017c6:	2080      	movs	r0, #128	@ 0x80
 80017c8:	0400      	lsls	r0, r0, #16
 80017ca:	4301      	orrs	r1, r0
 80017cc:	2a95      	cmp	r2, #149	@ 0x95
 80017ce:	dc07      	bgt.n	80017e0 <__aeabi_f2iz+0x34>
 80017d0:	2096      	movs	r0, #150	@ 0x96
 80017d2:	1a82      	subs	r2, r0, r2
 80017d4:	40d1      	lsrs	r1, r2
 80017d6:	4248      	negs	r0, r1
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d1f3      	bne.n	80017c4 <__aeabi_f2iz+0x18>
 80017dc:	0008      	movs	r0, r1
 80017de:	e7f1      	b.n	80017c4 <__aeabi_f2iz+0x18>
 80017e0:	3a96      	subs	r2, #150	@ 0x96
 80017e2:	4091      	lsls	r1, r2
 80017e4:	e7f7      	b.n	80017d6 <__aeabi_f2iz+0x2a>
 80017e6:	46c0      	nop			@ (mov r8, r8)
 80017e8:	7fffffff 	.word	0x7fffffff

080017ec <__aeabi_i2f>:
 80017ec:	b570      	push	{r4, r5, r6, lr}
 80017ee:	2800      	cmp	r0, #0
 80017f0:	d012      	beq.n	8001818 <__aeabi_i2f+0x2c>
 80017f2:	17c3      	asrs	r3, r0, #31
 80017f4:	18c5      	adds	r5, r0, r3
 80017f6:	405d      	eors	r5, r3
 80017f8:	0fc4      	lsrs	r4, r0, #31
 80017fa:	0028      	movs	r0, r5
 80017fc:	f002 f8f6 	bl	80039ec <__clzsi2>
 8001800:	239e      	movs	r3, #158	@ 0x9e
 8001802:	1a1b      	subs	r3, r3, r0
 8001804:	2b96      	cmp	r3, #150	@ 0x96
 8001806:	dc0f      	bgt.n	8001828 <__aeabi_i2f+0x3c>
 8001808:	2808      	cmp	r0, #8
 800180a:	d038      	beq.n	800187e <__aeabi_i2f+0x92>
 800180c:	3808      	subs	r0, #8
 800180e:	4085      	lsls	r5, r0
 8001810:	026d      	lsls	r5, r5, #9
 8001812:	0a6d      	lsrs	r5, r5, #9
 8001814:	b2d8      	uxtb	r0, r3
 8001816:	e002      	b.n	800181e <__aeabi_i2f+0x32>
 8001818:	2400      	movs	r4, #0
 800181a:	2000      	movs	r0, #0
 800181c:	2500      	movs	r5, #0
 800181e:	05c0      	lsls	r0, r0, #23
 8001820:	4328      	orrs	r0, r5
 8001822:	07e4      	lsls	r4, r4, #31
 8001824:	4320      	orrs	r0, r4
 8001826:	bd70      	pop	{r4, r5, r6, pc}
 8001828:	2b99      	cmp	r3, #153	@ 0x99
 800182a:	dc14      	bgt.n	8001856 <__aeabi_i2f+0x6a>
 800182c:	1f42      	subs	r2, r0, #5
 800182e:	4095      	lsls	r5, r2
 8001830:	002a      	movs	r2, r5
 8001832:	4915      	ldr	r1, [pc, #84]	@ (8001888 <__aeabi_i2f+0x9c>)
 8001834:	4011      	ands	r1, r2
 8001836:	0755      	lsls	r5, r2, #29
 8001838:	d01c      	beq.n	8001874 <__aeabi_i2f+0x88>
 800183a:	250f      	movs	r5, #15
 800183c:	402a      	ands	r2, r5
 800183e:	2a04      	cmp	r2, #4
 8001840:	d018      	beq.n	8001874 <__aeabi_i2f+0x88>
 8001842:	3104      	adds	r1, #4
 8001844:	08ca      	lsrs	r2, r1, #3
 8001846:	0149      	lsls	r1, r1, #5
 8001848:	d515      	bpl.n	8001876 <__aeabi_i2f+0x8a>
 800184a:	239f      	movs	r3, #159	@ 0x9f
 800184c:	0252      	lsls	r2, r2, #9
 800184e:	1a18      	subs	r0, r3, r0
 8001850:	0a55      	lsrs	r5, r2, #9
 8001852:	b2c0      	uxtb	r0, r0
 8001854:	e7e3      	b.n	800181e <__aeabi_i2f+0x32>
 8001856:	2205      	movs	r2, #5
 8001858:	0029      	movs	r1, r5
 800185a:	1a12      	subs	r2, r2, r0
 800185c:	40d1      	lsrs	r1, r2
 800185e:	0002      	movs	r2, r0
 8001860:	321b      	adds	r2, #27
 8001862:	4095      	lsls	r5, r2
 8001864:	002a      	movs	r2, r5
 8001866:	1e55      	subs	r5, r2, #1
 8001868:	41aa      	sbcs	r2, r5
 800186a:	430a      	orrs	r2, r1
 800186c:	4906      	ldr	r1, [pc, #24]	@ (8001888 <__aeabi_i2f+0x9c>)
 800186e:	4011      	ands	r1, r2
 8001870:	0755      	lsls	r5, r2, #29
 8001872:	d1e2      	bne.n	800183a <__aeabi_i2f+0x4e>
 8001874:	08ca      	lsrs	r2, r1, #3
 8001876:	0252      	lsls	r2, r2, #9
 8001878:	0a55      	lsrs	r5, r2, #9
 800187a:	b2d8      	uxtb	r0, r3
 800187c:	e7cf      	b.n	800181e <__aeabi_i2f+0x32>
 800187e:	026d      	lsls	r5, r5, #9
 8001880:	0a6d      	lsrs	r5, r5, #9
 8001882:	308e      	adds	r0, #142	@ 0x8e
 8001884:	e7cb      	b.n	800181e <__aeabi_i2f+0x32>
 8001886:	46c0      	nop			@ (mov r8, r8)
 8001888:	fbffffff 	.word	0xfbffffff

0800188c <__aeabi_ui2f>:
 800188c:	b510      	push	{r4, lr}
 800188e:	1e04      	subs	r4, r0, #0
 8001890:	d00d      	beq.n	80018ae <__aeabi_ui2f+0x22>
 8001892:	f002 f8ab 	bl	80039ec <__clzsi2>
 8001896:	239e      	movs	r3, #158	@ 0x9e
 8001898:	1a1b      	subs	r3, r3, r0
 800189a:	2b96      	cmp	r3, #150	@ 0x96
 800189c:	dc0c      	bgt.n	80018b8 <__aeabi_ui2f+0x2c>
 800189e:	2808      	cmp	r0, #8
 80018a0:	d034      	beq.n	800190c <__aeabi_ui2f+0x80>
 80018a2:	3808      	subs	r0, #8
 80018a4:	4084      	lsls	r4, r0
 80018a6:	0264      	lsls	r4, r4, #9
 80018a8:	0a64      	lsrs	r4, r4, #9
 80018aa:	b2d8      	uxtb	r0, r3
 80018ac:	e001      	b.n	80018b2 <__aeabi_ui2f+0x26>
 80018ae:	2000      	movs	r0, #0
 80018b0:	2400      	movs	r4, #0
 80018b2:	05c0      	lsls	r0, r0, #23
 80018b4:	4320      	orrs	r0, r4
 80018b6:	bd10      	pop	{r4, pc}
 80018b8:	2b99      	cmp	r3, #153	@ 0x99
 80018ba:	dc13      	bgt.n	80018e4 <__aeabi_ui2f+0x58>
 80018bc:	1f42      	subs	r2, r0, #5
 80018be:	4094      	lsls	r4, r2
 80018c0:	4a14      	ldr	r2, [pc, #80]	@ (8001914 <__aeabi_ui2f+0x88>)
 80018c2:	4022      	ands	r2, r4
 80018c4:	0761      	lsls	r1, r4, #29
 80018c6:	d01c      	beq.n	8001902 <__aeabi_ui2f+0x76>
 80018c8:	210f      	movs	r1, #15
 80018ca:	4021      	ands	r1, r4
 80018cc:	2904      	cmp	r1, #4
 80018ce:	d018      	beq.n	8001902 <__aeabi_ui2f+0x76>
 80018d0:	3204      	adds	r2, #4
 80018d2:	08d4      	lsrs	r4, r2, #3
 80018d4:	0152      	lsls	r2, r2, #5
 80018d6:	d515      	bpl.n	8001904 <__aeabi_ui2f+0x78>
 80018d8:	239f      	movs	r3, #159	@ 0x9f
 80018da:	0264      	lsls	r4, r4, #9
 80018dc:	1a18      	subs	r0, r3, r0
 80018de:	0a64      	lsrs	r4, r4, #9
 80018e0:	b2c0      	uxtb	r0, r0
 80018e2:	e7e6      	b.n	80018b2 <__aeabi_ui2f+0x26>
 80018e4:	0002      	movs	r2, r0
 80018e6:	0021      	movs	r1, r4
 80018e8:	321b      	adds	r2, #27
 80018ea:	4091      	lsls	r1, r2
 80018ec:	000a      	movs	r2, r1
 80018ee:	1e51      	subs	r1, r2, #1
 80018f0:	418a      	sbcs	r2, r1
 80018f2:	2105      	movs	r1, #5
 80018f4:	1a09      	subs	r1, r1, r0
 80018f6:	40cc      	lsrs	r4, r1
 80018f8:	4314      	orrs	r4, r2
 80018fa:	4a06      	ldr	r2, [pc, #24]	@ (8001914 <__aeabi_ui2f+0x88>)
 80018fc:	4022      	ands	r2, r4
 80018fe:	0761      	lsls	r1, r4, #29
 8001900:	d1e2      	bne.n	80018c8 <__aeabi_ui2f+0x3c>
 8001902:	08d4      	lsrs	r4, r2, #3
 8001904:	0264      	lsls	r4, r4, #9
 8001906:	0a64      	lsrs	r4, r4, #9
 8001908:	b2d8      	uxtb	r0, r3
 800190a:	e7d2      	b.n	80018b2 <__aeabi_ui2f+0x26>
 800190c:	0264      	lsls	r4, r4, #9
 800190e:	0a64      	lsrs	r4, r4, #9
 8001910:	308e      	adds	r0, #142	@ 0x8e
 8001912:	e7ce      	b.n	80018b2 <__aeabi_ui2f+0x26>
 8001914:	fbffffff 	.word	0xfbffffff

08001918 <__aeabi_dadd>:
 8001918:	b5f0      	push	{r4, r5, r6, r7, lr}
 800191a:	464f      	mov	r7, r9
 800191c:	4646      	mov	r6, r8
 800191e:	46d6      	mov	lr, sl
 8001920:	b5c0      	push	{r6, r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	9000      	str	r0, [sp, #0]
 8001926:	9101      	str	r1, [sp, #4]
 8001928:	030e      	lsls	r6, r1, #12
 800192a:	004c      	lsls	r4, r1, #1
 800192c:	0fcd      	lsrs	r5, r1, #31
 800192e:	0a71      	lsrs	r1, r6, #9
 8001930:	9e00      	ldr	r6, [sp, #0]
 8001932:	005f      	lsls	r7, r3, #1
 8001934:	0f76      	lsrs	r6, r6, #29
 8001936:	430e      	orrs	r6, r1
 8001938:	9900      	ldr	r1, [sp, #0]
 800193a:	9200      	str	r2, [sp, #0]
 800193c:	9301      	str	r3, [sp, #4]
 800193e:	00c9      	lsls	r1, r1, #3
 8001940:	4689      	mov	r9, r1
 8001942:	0319      	lsls	r1, r3, #12
 8001944:	0d7b      	lsrs	r3, r7, #21
 8001946:	4698      	mov	r8, r3
 8001948:	9b01      	ldr	r3, [sp, #4]
 800194a:	0a49      	lsrs	r1, r1, #9
 800194c:	0fdb      	lsrs	r3, r3, #31
 800194e:	469c      	mov	ip, r3
 8001950:	9b00      	ldr	r3, [sp, #0]
 8001952:	9a00      	ldr	r2, [sp, #0]
 8001954:	0f5b      	lsrs	r3, r3, #29
 8001956:	430b      	orrs	r3, r1
 8001958:	4641      	mov	r1, r8
 800195a:	0d64      	lsrs	r4, r4, #21
 800195c:	00d2      	lsls	r2, r2, #3
 800195e:	1a61      	subs	r1, r4, r1
 8001960:	4565      	cmp	r5, ip
 8001962:	d100      	bne.n	8001966 <__aeabi_dadd+0x4e>
 8001964:	e0a6      	b.n	8001ab4 <__aeabi_dadd+0x19c>
 8001966:	2900      	cmp	r1, #0
 8001968:	dd72      	ble.n	8001a50 <__aeabi_dadd+0x138>
 800196a:	4647      	mov	r7, r8
 800196c:	2f00      	cmp	r7, #0
 800196e:	d100      	bne.n	8001972 <__aeabi_dadd+0x5a>
 8001970:	e0dd      	b.n	8001b2e <__aeabi_dadd+0x216>
 8001972:	4fcc      	ldr	r7, [pc, #816]	@ (8001ca4 <__aeabi_dadd+0x38c>)
 8001974:	42bc      	cmp	r4, r7
 8001976:	d100      	bne.n	800197a <__aeabi_dadd+0x62>
 8001978:	e19a      	b.n	8001cb0 <__aeabi_dadd+0x398>
 800197a:	2701      	movs	r7, #1
 800197c:	2938      	cmp	r1, #56	@ 0x38
 800197e:	dc17      	bgt.n	80019b0 <__aeabi_dadd+0x98>
 8001980:	2780      	movs	r7, #128	@ 0x80
 8001982:	043f      	lsls	r7, r7, #16
 8001984:	433b      	orrs	r3, r7
 8001986:	291f      	cmp	r1, #31
 8001988:	dd00      	ble.n	800198c <__aeabi_dadd+0x74>
 800198a:	e1dd      	b.n	8001d48 <__aeabi_dadd+0x430>
 800198c:	2720      	movs	r7, #32
 800198e:	1a78      	subs	r0, r7, r1
 8001990:	001f      	movs	r7, r3
 8001992:	4087      	lsls	r7, r0
 8001994:	46ba      	mov	sl, r7
 8001996:	0017      	movs	r7, r2
 8001998:	40cf      	lsrs	r7, r1
 800199a:	4684      	mov	ip, r0
 800199c:	0038      	movs	r0, r7
 800199e:	4657      	mov	r7, sl
 80019a0:	4307      	orrs	r7, r0
 80019a2:	4660      	mov	r0, ip
 80019a4:	4082      	lsls	r2, r0
 80019a6:	40cb      	lsrs	r3, r1
 80019a8:	1e50      	subs	r0, r2, #1
 80019aa:	4182      	sbcs	r2, r0
 80019ac:	1af6      	subs	r6, r6, r3
 80019ae:	4317      	orrs	r7, r2
 80019b0:	464b      	mov	r3, r9
 80019b2:	1bdf      	subs	r7, r3, r7
 80019b4:	45b9      	cmp	r9, r7
 80019b6:	4180      	sbcs	r0, r0
 80019b8:	4240      	negs	r0, r0
 80019ba:	1a36      	subs	r6, r6, r0
 80019bc:	0233      	lsls	r3, r6, #8
 80019be:	d400      	bmi.n	80019c2 <__aeabi_dadd+0xaa>
 80019c0:	e0ff      	b.n	8001bc2 <__aeabi_dadd+0x2aa>
 80019c2:	0276      	lsls	r6, r6, #9
 80019c4:	0a76      	lsrs	r6, r6, #9
 80019c6:	2e00      	cmp	r6, #0
 80019c8:	d100      	bne.n	80019cc <__aeabi_dadd+0xb4>
 80019ca:	e13c      	b.n	8001c46 <__aeabi_dadd+0x32e>
 80019cc:	0030      	movs	r0, r6
 80019ce:	f002 f80d 	bl	80039ec <__clzsi2>
 80019d2:	0003      	movs	r3, r0
 80019d4:	3b08      	subs	r3, #8
 80019d6:	2120      	movs	r1, #32
 80019d8:	0038      	movs	r0, r7
 80019da:	1aca      	subs	r2, r1, r3
 80019dc:	40d0      	lsrs	r0, r2
 80019de:	409e      	lsls	r6, r3
 80019e0:	0002      	movs	r2, r0
 80019e2:	409f      	lsls	r7, r3
 80019e4:	4332      	orrs	r2, r6
 80019e6:	429c      	cmp	r4, r3
 80019e8:	dd00      	ble.n	80019ec <__aeabi_dadd+0xd4>
 80019ea:	e1a6      	b.n	8001d3a <__aeabi_dadd+0x422>
 80019ec:	1b18      	subs	r0, r3, r4
 80019ee:	3001      	adds	r0, #1
 80019f0:	1a09      	subs	r1, r1, r0
 80019f2:	003e      	movs	r6, r7
 80019f4:	408f      	lsls	r7, r1
 80019f6:	40c6      	lsrs	r6, r0
 80019f8:	1e7b      	subs	r3, r7, #1
 80019fa:	419f      	sbcs	r7, r3
 80019fc:	0013      	movs	r3, r2
 80019fe:	408b      	lsls	r3, r1
 8001a00:	4337      	orrs	r7, r6
 8001a02:	431f      	orrs	r7, r3
 8001a04:	40c2      	lsrs	r2, r0
 8001a06:	003b      	movs	r3, r7
 8001a08:	0016      	movs	r6, r2
 8001a0a:	2400      	movs	r4, #0
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	d100      	bne.n	8001a12 <__aeabi_dadd+0xfa>
 8001a10:	e1df      	b.n	8001dd2 <__aeabi_dadd+0x4ba>
 8001a12:	077b      	lsls	r3, r7, #29
 8001a14:	d100      	bne.n	8001a18 <__aeabi_dadd+0x100>
 8001a16:	e332      	b.n	800207e <__aeabi_dadd+0x766>
 8001a18:	230f      	movs	r3, #15
 8001a1a:	003a      	movs	r2, r7
 8001a1c:	403b      	ands	r3, r7
 8001a1e:	2b04      	cmp	r3, #4
 8001a20:	d004      	beq.n	8001a2c <__aeabi_dadd+0x114>
 8001a22:	1d3a      	adds	r2, r7, #4
 8001a24:	42ba      	cmp	r2, r7
 8001a26:	41bf      	sbcs	r7, r7
 8001a28:	427f      	negs	r7, r7
 8001a2a:	19f6      	adds	r6, r6, r7
 8001a2c:	0233      	lsls	r3, r6, #8
 8001a2e:	d400      	bmi.n	8001a32 <__aeabi_dadd+0x11a>
 8001a30:	e323      	b.n	800207a <__aeabi_dadd+0x762>
 8001a32:	4b9c      	ldr	r3, [pc, #624]	@ (8001ca4 <__aeabi_dadd+0x38c>)
 8001a34:	3401      	adds	r4, #1
 8001a36:	429c      	cmp	r4, r3
 8001a38:	d100      	bne.n	8001a3c <__aeabi_dadd+0x124>
 8001a3a:	e0b4      	b.n	8001ba6 <__aeabi_dadd+0x28e>
 8001a3c:	4b9a      	ldr	r3, [pc, #616]	@ (8001ca8 <__aeabi_dadd+0x390>)
 8001a3e:	0564      	lsls	r4, r4, #21
 8001a40:	401e      	ands	r6, r3
 8001a42:	0d64      	lsrs	r4, r4, #21
 8001a44:	0777      	lsls	r7, r6, #29
 8001a46:	08d2      	lsrs	r2, r2, #3
 8001a48:	0276      	lsls	r6, r6, #9
 8001a4a:	4317      	orrs	r7, r2
 8001a4c:	0b36      	lsrs	r6, r6, #12
 8001a4e:	e0ac      	b.n	8001baa <__aeabi_dadd+0x292>
 8001a50:	2900      	cmp	r1, #0
 8001a52:	d100      	bne.n	8001a56 <__aeabi_dadd+0x13e>
 8001a54:	e07e      	b.n	8001b54 <__aeabi_dadd+0x23c>
 8001a56:	4641      	mov	r1, r8
 8001a58:	1b09      	subs	r1, r1, r4
 8001a5a:	2c00      	cmp	r4, #0
 8001a5c:	d000      	beq.n	8001a60 <__aeabi_dadd+0x148>
 8001a5e:	e160      	b.n	8001d22 <__aeabi_dadd+0x40a>
 8001a60:	0034      	movs	r4, r6
 8001a62:	4648      	mov	r0, r9
 8001a64:	4304      	orrs	r4, r0
 8001a66:	d100      	bne.n	8001a6a <__aeabi_dadd+0x152>
 8001a68:	e1c9      	b.n	8001dfe <__aeabi_dadd+0x4e6>
 8001a6a:	1e4c      	subs	r4, r1, #1
 8001a6c:	2901      	cmp	r1, #1
 8001a6e:	d100      	bne.n	8001a72 <__aeabi_dadd+0x15a>
 8001a70:	e22e      	b.n	8001ed0 <__aeabi_dadd+0x5b8>
 8001a72:	4d8c      	ldr	r5, [pc, #560]	@ (8001ca4 <__aeabi_dadd+0x38c>)
 8001a74:	42a9      	cmp	r1, r5
 8001a76:	d100      	bne.n	8001a7a <__aeabi_dadd+0x162>
 8001a78:	e224      	b.n	8001ec4 <__aeabi_dadd+0x5ac>
 8001a7a:	2701      	movs	r7, #1
 8001a7c:	2c38      	cmp	r4, #56	@ 0x38
 8001a7e:	dc11      	bgt.n	8001aa4 <__aeabi_dadd+0x18c>
 8001a80:	0021      	movs	r1, r4
 8001a82:	291f      	cmp	r1, #31
 8001a84:	dd00      	ble.n	8001a88 <__aeabi_dadd+0x170>
 8001a86:	e20b      	b.n	8001ea0 <__aeabi_dadd+0x588>
 8001a88:	2420      	movs	r4, #32
 8001a8a:	0037      	movs	r7, r6
 8001a8c:	4648      	mov	r0, r9
 8001a8e:	1a64      	subs	r4, r4, r1
 8001a90:	40a7      	lsls	r7, r4
 8001a92:	40c8      	lsrs	r0, r1
 8001a94:	4307      	orrs	r7, r0
 8001a96:	4648      	mov	r0, r9
 8001a98:	40a0      	lsls	r0, r4
 8001a9a:	40ce      	lsrs	r6, r1
 8001a9c:	1e44      	subs	r4, r0, #1
 8001a9e:	41a0      	sbcs	r0, r4
 8001aa0:	1b9b      	subs	r3, r3, r6
 8001aa2:	4307      	orrs	r7, r0
 8001aa4:	1bd7      	subs	r7, r2, r7
 8001aa6:	42ba      	cmp	r2, r7
 8001aa8:	4192      	sbcs	r2, r2
 8001aaa:	4252      	negs	r2, r2
 8001aac:	4665      	mov	r5, ip
 8001aae:	4644      	mov	r4, r8
 8001ab0:	1a9e      	subs	r6, r3, r2
 8001ab2:	e783      	b.n	80019bc <__aeabi_dadd+0xa4>
 8001ab4:	2900      	cmp	r1, #0
 8001ab6:	dc00      	bgt.n	8001aba <__aeabi_dadd+0x1a2>
 8001ab8:	e09c      	b.n	8001bf4 <__aeabi_dadd+0x2dc>
 8001aba:	4647      	mov	r7, r8
 8001abc:	2f00      	cmp	r7, #0
 8001abe:	d167      	bne.n	8001b90 <__aeabi_dadd+0x278>
 8001ac0:	001f      	movs	r7, r3
 8001ac2:	4317      	orrs	r7, r2
 8001ac4:	d100      	bne.n	8001ac8 <__aeabi_dadd+0x1b0>
 8001ac6:	e0e4      	b.n	8001c92 <__aeabi_dadd+0x37a>
 8001ac8:	1e48      	subs	r0, r1, #1
 8001aca:	2901      	cmp	r1, #1
 8001acc:	d100      	bne.n	8001ad0 <__aeabi_dadd+0x1b8>
 8001ace:	e19b      	b.n	8001e08 <__aeabi_dadd+0x4f0>
 8001ad0:	4f74      	ldr	r7, [pc, #464]	@ (8001ca4 <__aeabi_dadd+0x38c>)
 8001ad2:	42b9      	cmp	r1, r7
 8001ad4:	d100      	bne.n	8001ad8 <__aeabi_dadd+0x1c0>
 8001ad6:	e0eb      	b.n	8001cb0 <__aeabi_dadd+0x398>
 8001ad8:	2701      	movs	r7, #1
 8001ada:	0001      	movs	r1, r0
 8001adc:	2838      	cmp	r0, #56	@ 0x38
 8001ade:	dc11      	bgt.n	8001b04 <__aeabi_dadd+0x1ec>
 8001ae0:	291f      	cmp	r1, #31
 8001ae2:	dd00      	ble.n	8001ae6 <__aeabi_dadd+0x1ce>
 8001ae4:	e1c7      	b.n	8001e76 <__aeabi_dadd+0x55e>
 8001ae6:	2720      	movs	r7, #32
 8001ae8:	1a78      	subs	r0, r7, r1
 8001aea:	001f      	movs	r7, r3
 8001aec:	4684      	mov	ip, r0
 8001aee:	4087      	lsls	r7, r0
 8001af0:	0010      	movs	r0, r2
 8001af2:	40c8      	lsrs	r0, r1
 8001af4:	4307      	orrs	r7, r0
 8001af6:	4660      	mov	r0, ip
 8001af8:	4082      	lsls	r2, r0
 8001afa:	40cb      	lsrs	r3, r1
 8001afc:	1e50      	subs	r0, r2, #1
 8001afe:	4182      	sbcs	r2, r0
 8001b00:	18f6      	adds	r6, r6, r3
 8001b02:	4317      	orrs	r7, r2
 8001b04:	444f      	add	r7, r9
 8001b06:	454f      	cmp	r7, r9
 8001b08:	4180      	sbcs	r0, r0
 8001b0a:	4240      	negs	r0, r0
 8001b0c:	1836      	adds	r6, r6, r0
 8001b0e:	0233      	lsls	r3, r6, #8
 8001b10:	d557      	bpl.n	8001bc2 <__aeabi_dadd+0x2aa>
 8001b12:	4b64      	ldr	r3, [pc, #400]	@ (8001ca4 <__aeabi_dadd+0x38c>)
 8001b14:	3401      	adds	r4, #1
 8001b16:	429c      	cmp	r4, r3
 8001b18:	d045      	beq.n	8001ba6 <__aeabi_dadd+0x28e>
 8001b1a:	2101      	movs	r1, #1
 8001b1c:	4b62      	ldr	r3, [pc, #392]	@ (8001ca8 <__aeabi_dadd+0x390>)
 8001b1e:	087a      	lsrs	r2, r7, #1
 8001b20:	401e      	ands	r6, r3
 8001b22:	4039      	ands	r1, r7
 8001b24:	430a      	orrs	r2, r1
 8001b26:	07f7      	lsls	r7, r6, #31
 8001b28:	4317      	orrs	r7, r2
 8001b2a:	0876      	lsrs	r6, r6, #1
 8001b2c:	e771      	b.n	8001a12 <__aeabi_dadd+0xfa>
 8001b2e:	001f      	movs	r7, r3
 8001b30:	4317      	orrs	r7, r2
 8001b32:	d100      	bne.n	8001b36 <__aeabi_dadd+0x21e>
 8001b34:	e0ad      	b.n	8001c92 <__aeabi_dadd+0x37a>
 8001b36:	1e4f      	subs	r7, r1, #1
 8001b38:	46bc      	mov	ip, r7
 8001b3a:	2901      	cmp	r1, #1
 8001b3c:	d100      	bne.n	8001b40 <__aeabi_dadd+0x228>
 8001b3e:	e182      	b.n	8001e46 <__aeabi_dadd+0x52e>
 8001b40:	4f58      	ldr	r7, [pc, #352]	@ (8001ca4 <__aeabi_dadd+0x38c>)
 8001b42:	42b9      	cmp	r1, r7
 8001b44:	d100      	bne.n	8001b48 <__aeabi_dadd+0x230>
 8001b46:	e190      	b.n	8001e6a <__aeabi_dadd+0x552>
 8001b48:	4661      	mov	r1, ip
 8001b4a:	2701      	movs	r7, #1
 8001b4c:	2938      	cmp	r1, #56	@ 0x38
 8001b4e:	dd00      	ble.n	8001b52 <__aeabi_dadd+0x23a>
 8001b50:	e72e      	b.n	80019b0 <__aeabi_dadd+0x98>
 8001b52:	e718      	b.n	8001986 <__aeabi_dadd+0x6e>
 8001b54:	4f55      	ldr	r7, [pc, #340]	@ (8001cac <__aeabi_dadd+0x394>)
 8001b56:	1c61      	adds	r1, r4, #1
 8001b58:	4239      	tst	r1, r7
 8001b5a:	d000      	beq.n	8001b5e <__aeabi_dadd+0x246>
 8001b5c:	e0d0      	b.n	8001d00 <__aeabi_dadd+0x3e8>
 8001b5e:	0031      	movs	r1, r6
 8001b60:	4648      	mov	r0, r9
 8001b62:	001f      	movs	r7, r3
 8001b64:	4301      	orrs	r1, r0
 8001b66:	4317      	orrs	r7, r2
 8001b68:	2c00      	cmp	r4, #0
 8001b6a:	d000      	beq.n	8001b6e <__aeabi_dadd+0x256>
 8001b6c:	e13d      	b.n	8001dea <__aeabi_dadd+0x4d2>
 8001b6e:	2900      	cmp	r1, #0
 8001b70:	d100      	bne.n	8001b74 <__aeabi_dadd+0x25c>
 8001b72:	e1bc      	b.n	8001eee <__aeabi_dadd+0x5d6>
 8001b74:	2f00      	cmp	r7, #0
 8001b76:	d000      	beq.n	8001b7a <__aeabi_dadd+0x262>
 8001b78:	e1bf      	b.n	8001efa <__aeabi_dadd+0x5e2>
 8001b7a:	464b      	mov	r3, r9
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	08d8      	lsrs	r0, r3, #3
 8001b80:	0777      	lsls	r7, r6, #29
 8001b82:	4307      	orrs	r7, r0
 8001b84:	08f0      	lsrs	r0, r6, #3
 8001b86:	0306      	lsls	r6, r0, #12
 8001b88:	054c      	lsls	r4, r1, #21
 8001b8a:	0b36      	lsrs	r6, r6, #12
 8001b8c:	0d64      	lsrs	r4, r4, #21
 8001b8e:	e00c      	b.n	8001baa <__aeabi_dadd+0x292>
 8001b90:	4f44      	ldr	r7, [pc, #272]	@ (8001ca4 <__aeabi_dadd+0x38c>)
 8001b92:	42bc      	cmp	r4, r7
 8001b94:	d100      	bne.n	8001b98 <__aeabi_dadd+0x280>
 8001b96:	e08b      	b.n	8001cb0 <__aeabi_dadd+0x398>
 8001b98:	2701      	movs	r7, #1
 8001b9a:	2938      	cmp	r1, #56	@ 0x38
 8001b9c:	dcb2      	bgt.n	8001b04 <__aeabi_dadd+0x1ec>
 8001b9e:	2780      	movs	r7, #128	@ 0x80
 8001ba0:	043f      	lsls	r7, r7, #16
 8001ba2:	433b      	orrs	r3, r7
 8001ba4:	e79c      	b.n	8001ae0 <__aeabi_dadd+0x1c8>
 8001ba6:	2600      	movs	r6, #0
 8001ba8:	2700      	movs	r7, #0
 8001baa:	0524      	lsls	r4, r4, #20
 8001bac:	4334      	orrs	r4, r6
 8001bae:	07ed      	lsls	r5, r5, #31
 8001bb0:	432c      	orrs	r4, r5
 8001bb2:	0038      	movs	r0, r7
 8001bb4:	0021      	movs	r1, r4
 8001bb6:	b002      	add	sp, #8
 8001bb8:	bce0      	pop	{r5, r6, r7}
 8001bba:	46ba      	mov	sl, r7
 8001bbc:	46b1      	mov	r9, r6
 8001bbe:	46a8      	mov	r8, r5
 8001bc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bc2:	077b      	lsls	r3, r7, #29
 8001bc4:	d004      	beq.n	8001bd0 <__aeabi_dadd+0x2b8>
 8001bc6:	230f      	movs	r3, #15
 8001bc8:	403b      	ands	r3, r7
 8001bca:	2b04      	cmp	r3, #4
 8001bcc:	d000      	beq.n	8001bd0 <__aeabi_dadd+0x2b8>
 8001bce:	e728      	b.n	8001a22 <__aeabi_dadd+0x10a>
 8001bd0:	08f8      	lsrs	r0, r7, #3
 8001bd2:	4b34      	ldr	r3, [pc, #208]	@ (8001ca4 <__aeabi_dadd+0x38c>)
 8001bd4:	0777      	lsls	r7, r6, #29
 8001bd6:	4307      	orrs	r7, r0
 8001bd8:	08f0      	lsrs	r0, r6, #3
 8001bda:	429c      	cmp	r4, r3
 8001bdc:	d000      	beq.n	8001be0 <__aeabi_dadd+0x2c8>
 8001bde:	e24a      	b.n	8002076 <__aeabi_dadd+0x75e>
 8001be0:	003b      	movs	r3, r7
 8001be2:	4303      	orrs	r3, r0
 8001be4:	d059      	beq.n	8001c9a <__aeabi_dadd+0x382>
 8001be6:	2680      	movs	r6, #128	@ 0x80
 8001be8:	0336      	lsls	r6, r6, #12
 8001bea:	4306      	orrs	r6, r0
 8001bec:	0336      	lsls	r6, r6, #12
 8001bee:	4c2d      	ldr	r4, [pc, #180]	@ (8001ca4 <__aeabi_dadd+0x38c>)
 8001bf0:	0b36      	lsrs	r6, r6, #12
 8001bf2:	e7da      	b.n	8001baa <__aeabi_dadd+0x292>
 8001bf4:	2900      	cmp	r1, #0
 8001bf6:	d061      	beq.n	8001cbc <__aeabi_dadd+0x3a4>
 8001bf8:	4641      	mov	r1, r8
 8001bfa:	1b09      	subs	r1, r1, r4
 8001bfc:	2c00      	cmp	r4, #0
 8001bfe:	d100      	bne.n	8001c02 <__aeabi_dadd+0x2ea>
 8001c00:	e0b9      	b.n	8001d76 <__aeabi_dadd+0x45e>
 8001c02:	4c28      	ldr	r4, [pc, #160]	@ (8001ca4 <__aeabi_dadd+0x38c>)
 8001c04:	45a0      	cmp	r8, r4
 8001c06:	d100      	bne.n	8001c0a <__aeabi_dadd+0x2f2>
 8001c08:	e1a5      	b.n	8001f56 <__aeabi_dadd+0x63e>
 8001c0a:	2701      	movs	r7, #1
 8001c0c:	2938      	cmp	r1, #56	@ 0x38
 8001c0e:	dc13      	bgt.n	8001c38 <__aeabi_dadd+0x320>
 8001c10:	2480      	movs	r4, #128	@ 0x80
 8001c12:	0424      	lsls	r4, r4, #16
 8001c14:	4326      	orrs	r6, r4
 8001c16:	291f      	cmp	r1, #31
 8001c18:	dd00      	ble.n	8001c1c <__aeabi_dadd+0x304>
 8001c1a:	e1c8      	b.n	8001fae <__aeabi_dadd+0x696>
 8001c1c:	2420      	movs	r4, #32
 8001c1e:	0037      	movs	r7, r6
 8001c20:	4648      	mov	r0, r9
 8001c22:	1a64      	subs	r4, r4, r1
 8001c24:	40a7      	lsls	r7, r4
 8001c26:	40c8      	lsrs	r0, r1
 8001c28:	4307      	orrs	r7, r0
 8001c2a:	4648      	mov	r0, r9
 8001c2c:	40a0      	lsls	r0, r4
 8001c2e:	40ce      	lsrs	r6, r1
 8001c30:	1e44      	subs	r4, r0, #1
 8001c32:	41a0      	sbcs	r0, r4
 8001c34:	199b      	adds	r3, r3, r6
 8001c36:	4307      	orrs	r7, r0
 8001c38:	18bf      	adds	r7, r7, r2
 8001c3a:	4297      	cmp	r7, r2
 8001c3c:	4192      	sbcs	r2, r2
 8001c3e:	4252      	negs	r2, r2
 8001c40:	4644      	mov	r4, r8
 8001c42:	18d6      	adds	r6, r2, r3
 8001c44:	e763      	b.n	8001b0e <__aeabi_dadd+0x1f6>
 8001c46:	0038      	movs	r0, r7
 8001c48:	f001 fed0 	bl	80039ec <__clzsi2>
 8001c4c:	0003      	movs	r3, r0
 8001c4e:	3318      	adds	r3, #24
 8001c50:	2b1f      	cmp	r3, #31
 8001c52:	dc00      	bgt.n	8001c56 <__aeabi_dadd+0x33e>
 8001c54:	e6bf      	b.n	80019d6 <__aeabi_dadd+0xbe>
 8001c56:	003a      	movs	r2, r7
 8001c58:	3808      	subs	r0, #8
 8001c5a:	4082      	lsls	r2, r0
 8001c5c:	429c      	cmp	r4, r3
 8001c5e:	dd00      	ble.n	8001c62 <__aeabi_dadd+0x34a>
 8001c60:	e083      	b.n	8001d6a <__aeabi_dadd+0x452>
 8001c62:	1b1b      	subs	r3, r3, r4
 8001c64:	1c58      	adds	r0, r3, #1
 8001c66:	281f      	cmp	r0, #31
 8001c68:	dc00      	bgt.n	8001c6c <__aeabi_dadd+0x354>
 8001c6a:	e1b4      	b.n	8001fd6 <__aeabi_dadd+0x6be>
 8001c6c:	0017      	movs	r7, r2
 8001c6e:	3b1f      	subs	r3, #31
 8001c70:	40df      	lsrs	r7, r3
 8001c72:	2820      	cmp	r0, #32
 8001c74:	d005      	beq.n	8001c82 <__aeabi_dadd+0x36a>
 8001c76:	2340      	movs	r3, #64	@ 0x40
 8001c78:	1a1b      	subs	r3, r3, r0
 8001c7a:	409a      	lsls	r2, r3
 8001c7c:	1e53      	subs	r3, r2, #1
 8001c7e:	419a      	sbcs	r2, r3
 8001c80:	4317      	orrs	r7, r2
 8001c82:	2400      	movs	r4, #0
 8001c84:	2f00      	cmp	r7, #0
 8001c86:	d00a      	beq.n	8001c9e <__aeabi_dadd+0x386>
 8001c88:	077b      	lsls	r3, r7, #29
 8001c8a:	d000      	beq.n	8001c8e <__aeabi_dadd+0x376>
 8001c8c:	e6c4      	b.n	8001a18 <__aeabi_dadd+0x100>
 8001c8e:	0026      	movs	r6, r4
 8001c90:	e79e      	b.n	8001bd0 <__aeabi_dadd+0x2b8>
 8001c92:	464b      	mov	r3, r9
 8001c94:	000c      	movs	r4, r1
 8001c96:	08d8      	lsrs	r0, r3, #3
 8001c98:	e79b      	b.n	8001bd2 <__aeabi_dadd+0x2ba>
 8001c9a:	2700      	movs	r7, #0
 8001c9c:	4c01      	ldr	r4, [pc, #4]	@ (8001ca4 <__aeabi_dadd+0x38c>)
 8001c9e:	2600      	movs	r6, #0
 8001ca0:	e783      	b.n	8001baa <__aeabi_dadd+0x292>
 8001ca2:	46c0      	nop			@ (mov r8, r8)
 8001ca4:	000007ff 	.word	0x000007ff
 8001ca8:	ff7fffff 	.word	0xff7fffff
 8001cac:	000007fe 	.word	0x000007fe
 8001cb0:	464b      	mov	r3, r9
 8001cb2:	0777      	lsls	r7, r6, #29
 8001cb4:	08d8      	lsrs	r0, r3, #3
 8001cb6:	4307      	orrs	r7, r0
 8001cb8:	08f0      	lsrs	r0, r6, #3
 8001cba:	e791      	b.n	8001be0 <__aeabi_dadd+0x2c8>
 8001cbc:	4fcd      	ldr	r7, [pc, #820]	@ (8001ff4 <__aeabi_dadd+0x6dc>)
 8001cbe:	1c61      	adds	r1, r4, #1
 8001cc0:	4239      	tst	r1, r7
 8001cc2:	d16b      	bne.n	8001d9c <__aeabi_dadd+0x484>
 8001cc4:	0031      	movs	r1, r6
 8001cc6:	4648      	mov	r0, r9
 8001cc8:	4301      	orrs	r1, r0
 8001cca:	2c00      	cmp	r4, #0
 8001ccc:	d000      	beq.n	8001cd0 <__aeabi_dadd+0x3b8>
 8001cce:	e14b      	b.n	8001f68 <__aeabi_dadd+0x650>
 8001cd0:	001f      	movs	r7, r3
 8001cd2:	4317      	orrs	r7, r2
 8001cd4:	2900      	cmp	r1, #0
 8001cd6:	d100      	bne.n	8001cda <__aeabi_dadd+0x3c2>
 8001cd8:	e181      	b.n	8001fde <__aeabi_dadd+0x6c6>
 8001cda:	2f00      	cmp	r7, #0
 8001cdc:	d100      	bne.n	8001ce0 <__aeabi_dadd+0x3c8>
 8001cde:	e74c      	b.n	8001b7a <__aeabi_dadd+0x262>
 8001ce0:	444a      	add	r2, r9
 8001ce2:	454a      	cmp	r2, r9
 8001ce4:	4180      	sbcs	r0, r0
 8001ce6:	18f6      	adds	r6, r6, r3
 8001ce8:	4240      	negs	r0, r0
 8001cea:	1836      	adds	r6, r6, r0
 8001cec:	0233      	lsls	r3, r6, #8
 8001cee:	d500      	bpl.n	8001cf2 <__aeabi_dadd+0x3da>
 8001cf0:	e1b0      	b.n	8002054 <__aeabi_dadd+0x73c>
 8001cf2:	0017      	movs	r7, r2
 8001cf4:	4691      	mov	r9, r2
 8001cf6:	4337      	orrs	r7, r6
 8001cf8:	d000      	beq.n	8001cfc <__aeabi_dadd+0x3e4>
 8001cfa:	e73e      	b.n	8001b7a <__aeabi_dadd+0x262>
 8001cfc:	2600      	movs	r6, #0
 8001cfe:	e754      	b.n	8001baa <__aeabi_dadd+0x292>
 8001d00:	4649      	mov	r1, r9
 8001d02:	1a89      	subs	r1, r1, r2
 8001d04:	4688      	mov	r8, r1
 8001d06:	45c1      	cmp	r9, r8
 8001d08:	41bf      	sbcs	r7, r7
 8001d0a:	1af1      	subs	r1, r6, r3
 8001d0c:	427f      	negs	r7, r7
 8001d0e:	1bc9      	subs	r1, r1, r7
 8001d10:	020f      	lsls	r7, r1, #8
 8001d12:	d461      	bmi.n	8001dd8 <__aeabi_dadd+0x4c0>
 8001d14:	4647      	mov	r7, r8
 8001d16:	430f      	orrs	r7, r1
 8001d18:	d100      	bne.n	8001d1c <__aeabi_dadd+0x404>
 8001d1a:	e0bd      	b.n	8001e98 <__aeabi_dadd+0x580>
 8001d1c:	000e      	movs	r6, r1
 8001d1e:	4647      	mov	r7, r8
 8001d20:	e651      	b.n	80019c6 <__aeabi_dadd+0xae>
 8001d22:	4cb5      	ldr	r4, [pc, #724]	@ (8001ff8 <__aeabi_dadd+0x6e0>)
 8001d24:	45a0      	cmp	r8, r4
 8001d26:	d100      	bne.n	8001d2a <__aeabi_dadd+0x412>
 8001d28:	e100      	b.n	8001f2c <__aeabi_dadd+0x614>
 8001d2a:	2701      	movs	r7, #1
 8001d2c:	2938      	cmp	r1, #56	@ 0x38
 8001d2e:	dd00      	ble.n	8001d32 <__aeabi_dadd+0x41a>
 8001d30:	e6b8      	b.n	8001aa4 <__aeabi_dadd+0x18c>
 8001d32:	2480      	movs	r4, #128	@ 0x80
 8001d34:	0424      	lsls	r4, r4, #16
 8001d36:	4326      	orrs	r6, r4
 8001d38:	e6a3      	b.n	8001a82 <__aeabi_dadd+0x16a>
 8001d3a:	4eb0      	ldr	r6, [pc, #704]	@ (8001ffc <__aeabi_dadd+0x6e4>)
 8001d3c:	1ae4      	subs	r4, r4, r3
 8001d3e:	4016      	ands	r6, r2
 8001d40:	077b      	lsls	r3, r7, #29
 8001d42:	d000      	beq.n	8001d46 <__aeabi_dadd+0x42e>
 8001d44:	e73f      	b.n	8001bc6 <__aeabi_dadd+0x2ae>
 8001d46:	e743      	b.n	8001bd0 <__aeabi_dadd+0x2b8>
 8001d48:	000f      	movs	r7, r1
 8001d4a:	0018      	movs	r0, r3
 8001d4c:	3f20      	subs	r7, #32
 8001d4e:	40f8      	lsrs	r0, r7
 8001d50:	4684      	mov	ip, r0
 8001d52:	2920      	cmp	r1, #32
 8001d54:	d003      	beq.n	8001d5e <__aeabi_dadd+0x446>
 8001d56:	2740      	movs	r7, #64	@ 0x40
 8001d58:	1a79      	subs	r1, r7, r1
 8001d5a:	408b      	lsls	r3, r1
 8001d5c:	431a      	orrs	r2, r3
 8001d5e:	1e53      	subs	r3, r2, #1
 8001d60:	419a      	sbcs	r2, r3
 8001d62:	4663      	mov	r3, ip
 8001d64:	0017      	movs	r7, r2
 8001d66:	431f      	orrs	r7, r3
 8001d68:	e622      	b.n	80019b0 <__aeabi_dadd+0x98>
 8001d6a:	48a4      	ldr	r0, [pc, #656]	@ (8001ffc <__aeabi_dadd+0x6e4>)
 8001d6c:	1ae1      	subs	r1, r4, r3
 8001d6e:	4010      	ands	r0, r2
 8001d70:	0747      	lsls	r7, r0, #29
 8001d72:	08c0      	lsrs	r0, r0, #3
 8001d74:	e707      	b.n	8001b86 <__aeabi_dadd+0x26e>
 8001d76:	0034      	movs	r4, r6
 8001d78:	4648      	mov	r0, r9
 8001d7a:	4304      	orrs	r4, r0
 8001d7c:	d100      	bne.n	8001d80 <__aeabi_dadd+0x468>
 8001d7e:	e0fa      	b.n	8001f76 <__aeabi_dadd+0x65e>
 8001d80:	1e4c      	subs	r4, r1, #1
 8001d82:	2901      	cmp	r1, #1
 8001d84:	d100      	bne.n	8001d88 <__aeabi_dadd+0x470>
 8001d86:	e0d7      	b.n	8001f38 <__aeabi_dadd+0x620>
 8001d88:	4f9b      	ldr	r7, [pc, #620]	@ (8001ff8 <__aeabi_dadd+0x6e0>)
 8001d8a:	42b9      	cmp	r1, r7
 8001d8c:	d100      	bne.n	8001d90 <__aeabi_dadd+0x478>
 8001d8e:	e0e2      	b.n	8001f56 <__aeabi_dadd+0x63e>
 8001d90:	2701      	movs	r7, #1
 8001d92:	2c38      	cmp	r4, #56	@ 0x38
 8001d94:	dd00      	ble.n	8001d98 <__aeabi_dadd+0x480>
 8001d96:	e74f      	b.n	8001c38 <__aeabi_dadd+0x320>
 8001d98:	0021      	movs	r1, r4
 8001d9a:	e73c      	b.n	8001c16 <__aeabi_dadd+0x2fe>
 8001d9c:	4c96      	ldr	r4, [pc, #600]	@ (8001ff8 <__aeabi_dadd+0x6e0>)
 8001d9e:	42a1      	cmp	r1, r4
 8001da0:	d100      	bne.n	8001da4 <__aeabi_dadd+0x48c>
 8001da2:	e0dd      	b.n	8001f60 <__aeabi_dadd+0x648>
 8001da4:	444a      	add	r2, r9
 8001da6:	454a      	cmp	r2, r9
 8001da8:	4180      	sbcs	r0, r0
 8001daa:	18f3      	adds	r3, r6, r3
 8001dac:	4240      	negs	r0, r0
 8001dae:	1818      	adds	r0, r3, r0
 8001db0:	07c7      	lsls	r7, r0, #31
 8001db2:	0852      	lsrs	r2, r2, #1
 8001db4:	4317      	orrs	r7, r2
 8001db6:	0846      	lsrs	r6, r0, #1
 8001db8:	0752      	lsls	r2, r2, #29
 8001dba:	d005      	beq.n	8001dc8 <__aeabi_dadd+0x4b0>
 8001dbc:	220f      	movs	r2, #15
 8001dbe:	000c      	movs	r4, r1
 8001dc0:	403a      	ands	r2, r7
 8001dc2:	2a04      	cmp	r2, #4
 8001dc4:	d000      	beq.n	8001dc8 <__aeabi_dadd+0x4b0>
 8001dc6:	e62c      	b.n	8001a22 <__aeabi_dadd+0x10a>
 8001dc8:	0776      	lsls	r6, r6, #29
 8001dca:	08ff      	lsrs	r7, r7, #3
 8001dcc:	4337      	orrs	r7, r6
 8001dce:	0900      	lsrs	r0, r0, #4
 8001dd0:	e6d9      	b.n	8001b86 <__aeabi_dadd+0x26e>
 8001dd2:	2700      	movs	r7, #0
 8001dd4:	2600      	movs	r6, #0
 8001dd6:	e6e8      	b.n	8001baa <__aeabi_dadd+0x292>
 8001dd8:	4649      	mov	r1, r9
 8001dda:	1a57      	subs	r7, r2, r1
 8001ddc:	42ba      	cmp	r2, r7
 8001dde:	4192      	sbcs	r2, r2
 8001de0:	1b9e      	subs	r6, r3, r6
 8001de2:	4252      	negs	r2, r2
 8001de4:	4665      	mov	r5, ip
 8001de6:	1ab6      	subs	r6, r6, r2
 8001de8:	e5ed      	b.n	80019c6 <__aeabi_dadd+0xae>
 8001dea:	2900      	cmp	r1, #0
 8001dec:	d000      	beq.n	8001df0 <__aeabi_dadd+0x4d8>
 8001dee:	e0c6      	b.n	8001f7e <__aeabi_dadd+0x666>
 8001df0:	2f00      	cmp	r7, #0
 8001df2:	d167      	bne.n	8001ec4 <__aeabi_dadd+0x5ac>
 8001df4:	2680      	movs	r6, #128	@ 0x80
 8001df6:	2500      	movs	r5, #0
 8001df8:	4c7f      	ldr	r4, [pc, #508]	@ (8001ff8 <__aeabi_dadd+0x6e0>)
 8001dfa:	0336      	lsls	r6, r6, #12
 8001dfc:	e6d5      	b.n	8001baa <__aeabi_dadd+0x292>
 8001dfe:	4665      	mov	r5, ip
 8001e00:	000c      	movs	r4, r1
 8001e02:	001e      	movs	r6, r3
 8001e04:	08d0      	lsrs	r0, r2, #3
 8001e06:	e6e4      	b.n	8001bd2 <__aeabi_dadd+0x2ba>
 8001e08:	444a      	add	r2, r9
 8001e0a:	454a      	cmp	r2, r9
 8001e0c:	4180      	sbcs	r0, r0
 8001e0e:	18f3      	adds	r3, r6, r3
 8001e10:	4240      	negs	r0, r0
 8001e12:	1818      	adds	r0, r3, r0
 8001e14:	0011      	movs	r1, r2
 8001e16:	0203      	lsls	r3, r0, #8
 8001e18:	d400      	bmi.n	8001e1c <__aeabi_dadd+0x504>
 8001e1a:	e096      	b.n	8001f4a <__aeabi_dadd+0x632>
 8001e1c:	4b77      	ldr	r3, [pc, #476]	@ (8001ffc <__aeabi_dadd+0x6e4>)
 8001e1e:	0849      	lsrs	r1, r1, #1
 8001e20:	4018      	ands	r0, r3
 8001e22:	07c3      	lsls	r3, r0, #31
 8001e24:	430b      	orrs	r3, r1
 8001e26:	0844      	lsrs	r4, r0, #1
 8001e28:	0749      	lsls	r1, r1, #29
 8001e2a:	d100      	bne.n	8001e2e <__aeabi_dadd+0x516>
 8001e2c:	e129      	b.n	8002082 <__aeabi_dadd+0x76a>
 8001e2e:	220f      	movs	r2, #15
 8001e30:	401a      	ands	r2, r3
 8001e32:	2a04      	cmp	r2, #4
 8001e34:	d100      	bne.n	8001e38 <__aeabi_dadd+0x520>
 8001e36:	e0ea      	b.n	800200e <__aeabi_dadd+0x6f6>
 8001e38:	1d1f      	adds	r7, r3, #4
 8001e3a:	429f      	cmp	r7, r3
 8001e3c:	41b6      	sbcs	r6, r6
 8001e3e:	4276      	negs	r6, r6
 8001e40:	1936      	adds	r6, r6, r4
 8001e42:	2402      	movs	r4, #2
 8001e44:	e6c4      	b.n	8001bd0 <__aeabi_dadd+0x2b8>
 8001e46:	4649      	mov	r1, r9
 8001e48:	1a8f      	subs	r7, r1, r2
 8001e4a:	45b9      	cmp	r9, r7
 8001e4c:	4180      	sbcs	r0, r0
 8001e4e:	1af6      	subs	r6, r6, r3
 8001e50:	4240      	negs	r0, r0
 8001e52:	1a36      	subs	r6, r6, r0
 8001e54:	0233      	lsls	r3, r6, #8
 8001e56:	d406      	bmi.n	8001e66 <__aeabi_dadd+0x54e>
 8001e58:	0773      	lsls	r3, r6, #29
 8001e5a:	08ff      	lsrs	r7, r7, #3
 8001e5c:	2101      	movs	r1, #1
 8001e5e:	431f      	orrs	r7, r3
 8001e60:	08f0      	lsrs	r0, r6, #3
 8001e62:	e690      	b.n	8001b86 <__aeabi_dadd+0x26e>
 8001e64:	4665      	mov	r5, ip
 8001e66:	2401      	movs	r4, #1
 8001e68:	e5ab      	b.n	80019c2 <__aeabi_dadd+0xaa>
 8001e6a:	464b      	mov	r3, r9
 8001e6c:	0777      	lsls	r7, r6, #29
 8001e6e:	08d8      	lsrs	r0, r3, #3
 8001e70:	4307      	orrs	r7, r0
 8001e72:	08f0      	lsrs	r0, r6, #3
 8001e74:	e6b4      	b.n	8001be0 <__aeabi_dadd+0x2c8>
 8001e76:	000f      	movs	r7, r1
 8001e78:	0018      	movs	r0, r3
 8001e7a:	3f20      	subs	r7, #32
 8001e7c:	40f8      	lsrs	r0, r7
 8001e7e:	4684      	mov	ip, r0
 8001e80:	2920      	cmp	r1, #32
 8001e82:	d003      	beq.n	8001e8c <__aeabi_dadd+0x574>
 8001e84:	2740      	movs	r7, #64	@ 0x40
 8001e86:	1a79      	subs	r1, r7, r1
 8001e88:	408b      	lsls	r3, r1
 8001e8a:	431a      	orrs	r2, r3
 8001e8c:	1e53      	subs	r3, r2, #1
 8001e8e:	419a      	sbcs	r2, r3
 8001e90:	4663      	mov	r3, ip
 8001e92:	0017      	movs	r7, r2
 8001e94:	431f      	orrs	r7, r3
 8001e96:	e635      	b.n	8001b04 <__aeabi_dadd+0x1ec>
 8001e98:	2500      	movs	r5, #0
 8001e9a:	2400      	movs	r4, #0
 8001e9c:	2600      	movs	r6, #0
 8001e9e:	e684      	b.n	8001baa <__aeabi_dadd+0x292>
 8001ea0:	000c      	movs	r4, r1
 8001ea2:	0035      	movs	r5, r6
 8001ea4:	3c20      	subs	r4, #32
 8001ea6:	40e5      	lsrs	r5, r4
 8001ea8:	2920      	cmp	r1, #32
 8001eaa:	d005      	beq.n	8001eb8 <__aeabi_dadd+0x5a0>
 8001eac:	2440      	movs	r4, #64	@ 0x40
 8001eae:	1a61      	subs	r1, r4, r1
 8001eb0:	408e      	lsls	r6, r1
 8001eb2:	4649      	mov	r1, r9
 8001eb4:	4331      	orrs	r1, r6
 8001eb6:	4689      	mov	r9, r1
 8001eb8:	4648      	mov	r0, r9
 8001eba:	1e41      	subs	r1, r0, #1
 8001ebc:	4188      	sbcs	r0, r1
 8001ebe:	0007      	movs	r7, r0
 8001ec0:	432f      	orrs	r7, r5
 8001ec2:	e5ef      	b.n	8001aa4 <__aeabi_dadd+0x18c>
 8001ec4:	08d2      	lsrs	r2, r2, #3
 8001ec6:	075f      	lsls	r7, r3, #29
 8001ec8:	4665      	mov	r5, ip
 8001eca:	4317      	orrs	r7, r2
 8001ecc:	08d8      	lsrs	r0, r3, #3
 8001ece:	e687      	b.n	8001be0 <__aeabi_dadd+0x2c8>
 8001ed0:	1a17      	subs	r7, r2, r0
 8001ed2:	42ba      	cmp	r2, r7
 8001ed4:	4192      	sbcs	r2, r2
 8001ed6:	1b9e      	subs	r6, r3, r6
 8001ed8:	4252      	negs	r2, r2
 8001eda:	1ab6      	subs	r6, r6, r2
 8001edc:	0233      	lsls	r3, r6, #8
 8001ede:	d4c1      	bmi.n	8001e64 <__aeabi_dadd+0x54c>
 8001ee0:	0773      	lsls	r3, r6, #29
 8001ee2:	08ff      	lsrs	r7, r7, #3
 8001ee4:	4665      	mov	r5, ip
 8001ee6:	2101      	movs	r1, #1
 8001ee8:	431f      	orrs	r7, r3
 8001eea:	08f0      	lsrs	r0, r6, #3
 8001eec:	e64b      	b.n	8001b86 <__aeabi_dadd+0x26e>
 8001eee:	2f00      	cmp	r7, #0
 8001ef0:	d07b      	beq.n	8001fea <__aeabi_dadd+0x6d2>
 8001ef2:	4665      	mov	r5, ip
 8001ef4:	001e      	movs	r6, r3
 8001ef6:	4691      	mov	r9, r2
 8001ef8:	e63f      	b.n	8001b7a <__aeabi_dadd+0x262>
 8001efa:	1a81      	subs	r1, r0, r2
 8001efc:	4688      	mov	r8, r1
 8001efe:	45c1      	cmp	r9, r8
 8001f00:	41a4      	sbcs	r4, r4
 8001f02:	1af1      	subs	r1, r6, r3
 8001f04:	4264      	negs	r4, r4
 8001f06:	1b09      	subs	r1, r1, r4
 8001f08:	2480      	movs	r4, #128	@ 0x80
 8001f0a:	0424      	lsls	r4, r4, #16
 8001f0c:	4221      	tst	r1, r4
 8001f0e:	d077      	beq.n	8002000 <__aeabi_dadd+0x6e8>
 8001f10:	1a10      	subs	r0, r2, r0
 8001f12:	4282      	cmp	r2, r0
 8001f14:	4192      	sbcs	r2, r2
 8001f16:	0007      	movs	r7, r0
 8001f18:	1b9e      	subs	r6, r3, r6
 8001f1a:	4252      	negs	r2, r2
 8001f1c:	1ab6      	subs	r6, r6, r2
 8001f1e:	4337      	orrs	r7, r6
 8001f20:	d000      	beq.n	8001f24 <__aeabi_dadd+0x60c>
 8001f22:	e0a0      	b.n	8002066 <__aeabi_dadd+0x74e>
 8001f24:	4665      	mov	r5, ip
 8001f26:	2400      	movs	r4, #0
 8001f28:	2600      	movs	r6, #0
 8001f2a:	e63e      	b.n	8001baa <__aeabi_dadd+0x292>
 8001f2c:	075f      	lsls	r7, r3, #29
 8001f2e:	08d2      	lsrs	r2, r2, #3
 8001f30:	4665      	mov	r5, ip
 8001f32:	4317      	orrs	r7, r2
 8001f34:	08d8      	lsrs	r0, r3, #3
 8001f36:	e653      	b.n	8001be0 <__aeabi_dadd+0x2c8>
 8001f38:	1881      	adds	r1, r0, r2
 8001f3a:	4291      	cmp	r1, r2
 8001f3c:	4192      	sbcs	r2, r2
 8001f3e:	18f0      	adds	r0, r6, r3
 8001f40:	4252      	negs	r2, r2
 8001f42:	1880      	adds	r0, r0, r2
 8001f44:	0203      	lsls	r3, r0, #8
 8001f46:	d500      	bpl.n	8001f4a <__aeabi_dadd+0x632>
 8001f48:	e768      	b.n	8001e1c <__aeabi_dadd+0x504>
 8001f4a:	0747      	lsls	r7, r0, #29
 8001f4c:	08c9      	lsrs	r1, r1, #3
 8001f4e:	430f      	orrs	r7, r1
 8001f50:	08c0      	lsrs	r0, r0, #3
 8001f52:	2101      	movs	r1, #1
 8001f54:	e617      	b.n	8001b86 <__aeabi_dadd+0x26e>
 8001f56:	08d2      	lsrs	r2, r2, #3
 8001f58:	075f      	lsls	r7, r3, #29
 8001f5a:	4317      	orrs	r7, r2
 8001f5c:	08d8      	lsrs	r0, r3, #3
 8001f5e:	e63f      	b.n	8001be0 <__aeabi_dadd+0x2c8>
 8001f60:	000c      	movs	r4, r1
 8001f62:	2600      	movs	r6, #0
 8001f64:	2700      	movs	r7, #0
 8001f66:	e620      	b.n	8001baa <__aeabi_dadd+0x292>
 8001f68:	2900      	cmp	r1, #0
 8001f6a:	d156      	bne.n	800201a <__aeabi_dadd+0x702>
 8001f6c:	075f      	lsls	r7, r3, #29
 8001f6e:	08d2      	lsrs	r2, r2, #3
 8001f70:	4317      	orrs	r7, r2
 8001f72:	08d8      	lsrs	r0, r3, #3
 8001f74:	e634      	b.n	8001be0 <__aeabi_dadd+0x2c8>
 8001f76:	000c      	movs	r4, r1
 8001f78:	001e      	movs	r6, r3
 8001f7a:	08d0      	lsrs	r0, r2, #3
 8001f7c:	e629      	b.n	8001bd2 <__aeabi_dadd+0x2ba>
 8001f7e:	08c1      	lsrs	r1, r0, #3
 8001f80:	0770      	lsls	r0, r6, #29
 8001f82:	4301      	orrs	r1, r0
 8001f84:	08f0      	lsrs	r0, r6, #3
 8001f86:	2f00      	cmp	r7, #0
 8001f88:	d062      	beq.n	8002050 <__aeabi_dadd+0x738>
 8001f8a:	2480      	movs	r4, #128	@ 0x80
 8001f8c:	0324      	lsls	r4, r4, #12
 8001f8e:	4220      	tst	r0, r4
 8001f90:	d007      	beq.n	8001fa2 <__aeabi_dadd+0x68a>
 8001f92:	08de      	lsrs	r6, r3, #3
 8001f94:	4226      	tst	r6, r4
 8001f96:	d104      	bne.n	8001fa2 <__aeabi_dadd+0x68a>
 8001f98:	4665      	mov	r5, ip
 8001f9a:	0030      	movs	r0, r6
 8001f9c:	08d1      	lsrs	r1, r2, #3
 8001f9e:	075b      	lsls	r3, r3, #29
 8001fa0:	4319      	orrs	r1, r3
 8001fa2:	0f4f      	lsrs	r7, r1, #29
 8001fa4:	00c9      	lsls	r1, r1, #3
 8001fa6:	08c9      	lsrs	r1, r1, #3
 8001fa8:	077f      	lsls	r7, r7, #29
 8001faa:	430f      	orrs	r7, r1
 8001fac:	e618      	b.n	8001be0 <__aeabi_dadd+0x2c8>
 8001fae:	000c      	movs	r4, r1
 8001fb0:	0030      	movs	r0, r6
 8001fb2:	3c20      	subs	r4, #32
 8001fb4:	40e0      	lsrs	r0, r4
 8001fb6:	4684      	mov	ip, r0
 8001fb8:	2920      	cmp	r1, #32
 8001fba:	d005      	beq.n	8001fc8 <__aeabi_dadd+0x6b0>
 8001fbc:	2440      	movs	r4, #64	@ 0x40
 8001fbe:	1a61      	subs	r1, r4, r1
 8001fc0:	408e      	lsls	r6, r1
 8001fc2:	4649      	mov	r1, r9
 8001fc4:	4331      	orrs	r1, r6
 8001fc6:	4689      	mov	r9, r1
 8001fc8:	4648      	mov	r0, r9
 8001fca:	1e41      	subs	r1, r0, #1
 8001fcc:	4188      	sbcs	r0, r1
 8001fce:	4661      	mov	r1, ip
 8001fd0:	0007      	movs	r7, r0
 8001fd2:	430f      	orrs	r7, r1
 8001fd4:	e630      	b.n	8001c38 <__aeabi_dadd+0x320>
 8001fd6:	2120      	movs	r1, #32
 8001fd8:	2700      	movs	r7, #0
 8001fda:	1a09      	subs	r1, r1, r0
 8001fdc:	e50e      	b.n	80019fc <__aeabi_dadd+0xe4>
 8001fde:	001e      	movs	r6, r3
 8001fe0:	2f00      	cmp	r7, #0
 8001fe2:	d000      	beq.n	8001fe6 <__aeabi_dadd+0x6ce>
 8001fe4:	e522      	b.n	8001a2c <__aeabi_dadd+0x114>
 8001fe6:	2400      	movs	r4, #0
 8001fe8:	e758      	b.n	8001e9c <__aeabi_dadd+0x584>
 8001fea:	2500      	movs	r5, #0
 8001fec:	2400      	movs	r4, #0
 8001fee:	2600      	movs	r6, #0
 8001ff0:	e5db      	b.n	8001baa <__aeabi_dadd+0x292>
 8001ff2:	46c0      	nop			@ (mov r8, r8)
 8001ff4:	000007fe 	.word	0x000007fe
 8001ff8:	000007ff 	.word	0x000007ff
 8001ffc:	ff7fffff 	.word	0xff7fffff
 8002000:	4647      	mov	r7, r8
 8002002:	430f      	orrs	r7, r1
 8002004:	d100      	bne.n	8002008 <__aeabi_dadd+0x6f0>
 8002006:	e747      	b.n	8001e98 <__aeabi_dadd+0x580>
 8002008:	000e      	movs	r6, r1
 800200a:	46c1      	mov	r9, r8
 800200c:	e5b5      	b.n	8001b7a <__aeabi_dadd+0x262>
 800200e:	08df      	lsrs	r7, r3, #3
 8002010:	0764      	lsls	r4, r4, #29
 8002012:	2102      	movs	r1, #2
 8002014:	4327      	orrs	r7, r4
 8002016:	0900      	lsrs	r0, r0, #4
 8002018:	e5b5      	b.n	8001b86 <__aeabi_dadd+0x26e>
 800201a:	0019      	movs	r1, r3
 800201c:	08c0      	lsrs	r0, r0, #3
 800201e:	0777      	lsls	r7, r6, #29
 8002020:	4307      	orrs	r7, r0
 8002022:	4311      	orrs	r1, r2
 8002024:	08f0      	lsrs	r0, r6, #3
 8002026:	2900      	cmp	r1, #0
 8002028:	d100      	bne.n	800202c <__aeabi_dadd+0x714>
 800202a:	e5d9      	b.n	8001be0 <__aeabi_dadd+0x2c8>
 800202c:	2180      	movs	r1, #128	@ 0x80
 800202e:	0309      	lsls	r1, r1, #12
 8002030:	4208      	tst	r0, r1
 8002032:	d007      	beq.n	8002044 <__aeabi_dadd+0x72c>
 8002034:	08dc      	lsrs	r4, r3, #3
 8002036:	420c      	tst	r4, r1
 8002038:	d104      	bne.n	8002044 <__aeabi_dadd+0x72c>
 800203a:	08d2      	lsrs	r2, r2, #3
 800203c:	075b      	lsls	r3, r3, #29
 800203e:	431a      	orrs	r2, r3
 8002040:	0017      	movs	r7, r2
 8002042:	0020      	movs	r0, r4
 8002044:	0f7b      	lsrs	r3, r7, #29
 8002046:	00ff      	lsls	r7, r7, #3
 8002048:	08ff      	lsrs	r7, r7, #3
 800204a:	075b      	lsls	r3, r3, #29
 800204c:	431f      	orrs	r7, r3
 800204e:	e5c7      	b.n	8001be0 <__aeabi_dadd+0x2c8>
 8002050:	000f      	movs	r7, r1
 8002052:	e5c5      	b.n	8001be0 <__aeabi_dadd+0x2c8>
 8002054:	4b12      	ldr	r3, [pc, #72]	@ (80020a0 <__aeabi_dadd+0x788>)
 8002056:	08d2      	lsrs	r2, r2, #3
 8002058:	4033      	ands	r3, r6
 800205a:	075f      	lsls	r7, r3, #29
 800205c:	025b      	lsls	r3, r3, #9
 800205e:	2401      	movs	r4, #1
 8002060:	4317      	orrs	r7, r2
 8002062:	0b1e      	lsrs	r6, r3, #12
 8002064:	e5a1      	b.n	8001baa <__aeabi_dadd+0x292>
 8002066:	4226      	tst	r6, r4
 8002068:	d012      	beq.n	8002090 <__aeabi_dadd+0x778>
 800206a:	4b0d      	ldr	r3, [pc, #52]	@ (80020a0 <__aeabi_dadd+0x788>)
 800206c:	4665      	mov	r5, ip
 800206e:	0002      	movs	r2, r0
 8002070:	2401      	movs	r4, #1
 8002072:	401e      	ands	r6, r3
 8002074:	e4e6      	b.n	8001a44 <__aeabi_dadd+0x12c>
 8002076:	0021      	movs	r1, r4
 8002078:	e585      	b.n	8001b86 <__aeabi_dadd+0x26e>
 800207a:	0017      	movs	r7, r2
 800207c:	e5a8      	b.n	8001bd0 <__aeabi_dadd+0x2b8>
 800207e:	003a      	movs	r2, r7
 8002080:	e4d4      	b.n	8001a2c <__aeabi_dadd+0x114>
 8002082:	08db      	lsrs	r3, r3, #3
 8002084:	0764      	lsls	r4, r4, #29
 8002086:	431c      	orrs	r4, r3
 8002088:	0027      	movs	r7, r4
 800208a:	2102      	movs	r1, #2
 800208c:	0900      	lsrs	r0, r0, #4
 800208e:	e57a      	b.n	8001b86 <__aeabi_dadd+0x26e>
 8002090:	08c0      	lsrs	r0, r0, #3
 8002092:	0777      	lsls	r7, r6, #29
 8002094:	4307      	orrs	r7, r0
 8002096:	4665      	mov	r5, ip
 8002098:	2100      	movs	r1, #0
 800209a:	08f0      	lsrs	r0, r6, #3
 800209c:	e573      	b.n	8001b86 <__aeabi_dadd+0x26e>
 800209e:	46c0      	nop			@ (mov r8, r8)
 80020a0:	ff7fffff 	.word	0xff7fffff

080020a4 <__aeabi_ddiv>:
 80020a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020a6:	46de      	mov	lr, fp
 80020a8:	4645      	mov	r5, r8
 80020aa:	4657      	mov	r7, sl
 80020ac:	464e      	mov	r6, r9
 80020ae:	b5e0      	push	{r5, r6, r7, lr}
 80020b0:	b087      	sub	sp, #28
 80020b2:	9200      	str	r2, [sp, #0]
 80020b4:	9301      	str	r3, [sp, #4]
 80020b6:	030b      	lsls	r3, r1, #12
 80020b8:	0b1b      	lsrs	r3, r3, #12
 80020ba:	469b      	mov	fp, r3
 80020bc:	0fca      	lsrs	r2, r1, #31
 80020be:	004b      	lsls	r3, r1, #1
 80020c0:	0004      	movs	r4, r0
 80020c2:	4680      	mov	r8, r0
 80020c4:	0d5b      	lsrs	r3, r3, #21
 80020c6:	9202      	str	r2, [sp, #8]
 80020c8:	d100      	bne.n	80020cc <__aeabi_ddiv+0x28>
 80020ca:	e098      	b.n	80021fe <__aeabi_ddiv+0x15a>
 80020cc:	4a7c      	ldr	r2, [pc, #496]	@ (80022c0 <__aeabi_ddiv+0x21c>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d037      	beq.n	8002142 <__aeabi_ddiv+0x9e>
 80020d2:	4659      	mov	r1, fp
 80020d4:	0f42      	lsrs	r2, r0, #29
 80020d6:	00c9      	lsls	r1, r1, #3
 80020d8:	430a      	orrs	r2, r1
 80020da:	2180      	movs	r1, #128	@ 0x80
 80020dc:	0409      	lsls	r1, r1, #16
 80020de:	4311      	orrs	r1, r2
 80020e0:	00c2      	lsls	r2, r0, #3
 80020e2:	4690      	mov	r8, r2
 80020e4:	4a77      	ldr	r2, [pc, #476]	@ (80022c4 <__aeabi_ddiv+0x220>)
 80020e6:	4689      	mov	r9, r1
 80020e8:	4692      	mov	sl, r2
 80020ea:	449a      	add	sl, r3
 80020ec:	2300      	movs	r3, #0
 80020ee:	2400      	movs	r4, #0
 80020f0:	9303      	str	r3, [sp, #12]
 80020f2:	9e00      	ldr	r6, [sp, #0]
 80020f4:	9f01      	ldr	r7, [sp, #4]
 80020f6:	033b      	lsls	r3, r7, #12
 80020f8:	0b1b      	lsrs	r3, r3, #12
 80020fa:	469b      	mov	fp, r3
 80020fc:	007b      	lsls	r3, r7, #1
 80020fe:	0030      	movs	r0, r6
 8002100:	0d5b      	lsrs	r3, r3, #21
 8002102:	0ffd      	lsrs	r5, r7, #31
 8002104:	2b00      	cmp	r3, #0
 8002106:	d059      	beq.n	80021bc <__aeabi_ddiv+0x118>
 8002108:	4a6d      	ldr	r2, [pc, #436]	@ (80022c0 <__aeabi_ddiv+0x21c>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d048      	beq.n	80021a0 <__aeabi_ddiv+0xfc>
 800210e:	4659      	mov	r1, fp
 8002110:	0f72      	lsrs	r2, r6, #29
 8002112:	00c9      	lsls	r1, r1, #3
 8002114:	430a      	orrs	r2, r1
 8002116:	2180      	movs	r1, #128	@ 0x80
 8002118:	0409      	lsls	r1, r1, #16
 800211a:	4311      	orrs	r1, r2
 800211c:	468b      	mov	fp, r1
 800211e:	4969      	ldr	r1, [pc, #420]	@ (80022c4 <__aeabi_ddiv+0x220>)
 8002120:	00f2      	lsls	r2, r6, #3
 8002122:	468c      	mov	ip, r1
 8002124:	4651      	mov	r1, sl
 8002126:	4463      	add	r3, ip
 8002128:	1acb      	subs	r3, r1, r3
 800212a:	469a      	mov	sl, r3
 800212c:	2100      	movs	r1, #0
 800212e:	9e02      	ldr	r6, [sp, #8]
 8002130:	406e      	eors	r6, r5
 8002132:	b2f6      	uxtb	r6, r6
 8002134:	2c0f      	cmp	r4, #15
 8002136:	d900      	bls.n	800213a <__aeabi_ddiv+0x96>
 8002138:	e0ce      	b.n	80022d8 <__aeabi_ddiv+0x234>
 800213a:	4b63      	ldr	r3, [pc, #396]	@ (80022c8 <__aeabi_ddiv+0x224>)
 800213c:	00a4      	lsls	r4, r4, #2
 800213e:	591b      	ldr	r3, [r3, r4]
 8002140:	469f      	mov	pc, r3
 8002142:	465a      	mov	r2, fp
 8002144:	4302      	orrs	r2, r0
 8002146:	4691      	mov	r9, r2
 8002148:	d000      	beq.n	800214c <__aeabi_ddiv+0xa8>
 800214a:	e090      	b.n	800226e <__aeabi_ddiv+0x1ca>
 800214c:	469a      	mov	sl, r3
 800214e:	2302      	movs	r3, #2
 8002150:	4690      	mov	r8, r2
 8002152:	2408      	movs	r4, #8
 8002154:	9303      	str	r3, [sp, #12]
 8002156:	e7cc      	b.n	80020f2 <__aeabi_ddiv+0x4e>
 8002158:	46cb      	mov	fp, r9
 800215a:	4642      	mov	r2, r8
 800215c:	9d02      	ldr	r5, [sp, #8]
 800215e:	9903      	ldr	r1, [sp, #12]
 8002160:	2902      	cmp	r1, #2
 8002162:	d100      	bne.n	8002166 <__aeabi_ddiv+0xc2>
 8002164:	e1de      	b.n	8002524 <__aeabi_ddiv+0x480>
 8002166:	2903      	cmp	r1, #3
 8002168:	d100      	bne.n	800216c <__aeabi_ddiv+0xc8>
 800216a:	e08d      	b.n	8002288 <__aeabi_ddiv+0x1e4>
 800216c:	2901      	cmp	r1, #1
 800216e:	d000      	beq.n	8002172 <__aeabi_ddiv+0xce>
 8002170:	e179      	b.n	8002466 <__aeabi_ddiv+0x3c2>
 8002172:	002e      	movs	r6, r5
 8002174:	2200      	movs	r2, #0
 8002176:	2300      	movs	r3, #0
 8002178:	2400      	movs	r4, #0
 800217a:	4690      	mov	r8, r2
 800217c:	051b      	lsls	r3, r3, #20
 800217e:	4323      	orrs	r3, r4
 8002180:	07f6      	lsls	r6, r6, #31
 8002182:	4333      	orrs	r3, r6
 8002184:	4640      	mov	r0, r8
 8002186:	0019      	movs	r1, r3
 8002188:	b007      	add	sp, #28
 800218a:	bcf0      	pop	{r4, r5, r6, r7}
 800218c:	46bb      	mov	fp, r7
 800218e:	46b2      	mov	sl, r6
 8002190:	46a9      	mov	r9, r5
 8002192:	46a0      	mov	r8, r4
 8002194:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002196:	2200      	movs	r2, #0
 8002198:	2400      	movs	r4, #0
 800219a:	4690      	mov	r8, r2
 800219c:	4b48      	ldr	r3, [pc, #288]	@ (80022c0 <__aeabi_ddiv+0x21c>)
 800219e:	e7ed      	b.n	800217c <__aeabi_ddiv+0xd8>
 80021a0:	465a      	mov	r2, fp
 80021a2:	9b00      	ldr	r3, [sp, #0]
 80021a4:	431a      	orrs	r2, r3
 80021a6:	4b49      	ldr	r3, [pc, #292]	@ (80022cc <__aeabi_ddiv+0x228>)
 80021a8:	469c      	mov	ip, r3
 80021aa:	44e2      	add	sl, ip
 80021ac:	2a00      	cmp	r2, #0
 80021ae:	d159      	bne.n	8002264 <__aeabi_ddiv+0x1c0>
 80021b0:	2302      	movs	r3, #2
 80021b2:	431c      	orrs	r4, r3
 80021b4:	2300      	movs	r3, #0
 80021b6:	2102      	movs	r1, #2
 80021b8:	469b      	mov	fp, r3
 80021ba:	e7b8      	b.n	800212e <__aeabi_ddiv+0x8a>
 80021bc:	465a      	mov	r2, fp
 80021be:	9b00      	ldr	r3, [sp, #0]
 80021c0:	431a      	orrs	r2, r3
 80021c2:	d049      	beq.n	8002258 <__aeabi_ddiv+0x1b4>
 80021c4:	465b      	mov	r3, fp
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d100      	bne.n	80021cc <__aeabi_ddiv+0x128>
 80021ca:	e19c      	b.n	8002506 <__aeabi_ddiv+0x462>
 80021cc:	4658      	mov	r0, fp
 80021ce:	f001 fc0d 	bl	80039ec <__clzsi2>
 80021d2:	0002      	movs	r2, r0
 80021d4:	0003      	movs	r3, r0
 80021d6:	3a0b      	subs	r2, #11
 80021d8:	271d      	movs	r7, #29
 80021da:	9e00      	ldr	r6, [sp, #0]
 80021dc:	1aba      	subs	r2, r7, r2
 80021de:	0019      	movs	r1, r3
 80021e0:	4658      	mov	r0, fp
 80021e2:	40d6      	lsrs	r6, r2
 80021e4:	3908      	subs	r1, #8
 80021e6:	4088      	lsls	r0, r1
 80021e8:	0032      	movs	r2, r6
 80021ea:	4302      	orrs	r2, r0
 80021ec:	4693      	mov	fp, r2
 80021ee:	9a00      	ldr	r2, [sp, #0]
 80021f0:	408a      	lsls	r2, r1
 80021f2:	4937      	ldr	r1, [pc, #220]	@ (80022d0 <__aeabi_ddiv+0x22c>)
 80021f4:	4453      	add	r3, sl
 80021f6:	468a      	mov	sl, r1
 80021f8:	2100      	movs	r1, #0
 80021fa:	449a      	add	sl, r3
 80021fc:	e797      	b.n	800212e <__aeabi_ddiv+0x8a>
 80021fe:	465b      	mov	r3, fp
 8002200:	4303      	orrs	r3, r0
 8002202:	4699      	mov	r9, r3
 8002204:	d021      	beq.n	800224a <__aeabi_ddiv+0x1a6>
 8002206:	465b      	mov	r3, fp
 8002208:	2b00      	cmp	r3, #0
 800220a:	d100      	bne.n	800220e <__aeabi_ddiv+0x16a>
 800220c:	e169      	b.n	80024e2 <__aeabi_ddiv+0x43e>
 800220e:	4658      	mov	r0, fp
 8002210:	f001 fbec 	bl	80039ec <__clzsi2>
 8002214:	230b      	movs	r3, #11
 8002216:	425b      	negs	r3, r3
 8002218:	469c      	mov	ip, r3
 800221a:	0002      	movs	r2, r0
 800221c:	4484      	add	ip, r0
 800221e:	4666      	mov	r6, ip
 8002220:	231d      	movs	r3, #29
 8002222:	1b9b      	subs	r3, r3, r6
 8002224:	0026      	movs	r6, r4
 8002226:	0011      	movs	r1, r2
 8002228:	4658      	mov	r0, fp
 800222a:	40de      	lsrs	r6, r3
 800222c:	3908      	subs	r1, #8
 800222e:	4088      	lsls	r0, r1
 8002230:	0033      	movs	r3, r6
 8002232:	4303      	orrs	r3, r0
 8002234:	4699      	mov	r9, r3
 8002236:	0023      	movs	r3, r4
 8002238:	408b      	lsls	r3, r1
 800223a:	4698      	mov	r8, r3
 800223c:	4b25      	ldr	r3, [pc, #148]	@ (80022d4 <__aeabi_ddiv+0x230>)
 800223e:	2400      	movs	r4, #0
 8002240:	1a9b      	subs	r3, r3, r2
 8002242:	469a      	mov	sl, r3
 8002244:	2300      	movs	r3, #0
 8002246:	9303      	str	r3, [sp, #12]
 8002248:	e753      	b.n	80020f2 <__aeabi_ddiv+0x4e>
 800224a:	2300      	movs	r3, #0
 800224c:	4698      	mov	r8, r3
 800224e:	469a      	mov	sl, r3
 8002250:	3301      	adds	r3, #1
 8002252:	2404      	movs	r4, #4
 8002254:	9303      	str	r3, [sp, #12]
 8002256:	e74c      	b.n	80020f2 <__aeabi_ddiv+0x4e>
 8002258:	2301      	movs	r3, #1
 800225a:	431c      	orrs	r4, r3
 800225c:	2300      	movs	r3, #0
 800225e:	2101      	movs	r1, #1
 8002260:	469b      	mov	fp, r3
 8002262:	e764      	b.n	800212e <__aeabi_ddiv+0x8a>
 8002264:	2303      	movs	r3, #3
 8002266:	0032      	movs	r2, r6
 8002268:	2103      	movs	r1, #3
 800226a:	431c      	orrs	r4, r3
 800226c:	e75f      	b.n	800212e <__aeabi_ddiv+0x8a>
 800226e:	469a      	mov	sl, r3
 8002270:	2303      	movs	r3, #3
 8002272:	46d9      	mov	r9, fp
 8002274:	240c      	movs	r4, #12
 8002276:	9303      	str	r3, [sp, #12]
 8002278:	e73b      	b.n	80020f2 <__aeabi_ddiv+0x4e>
 800227a:	2300      	movs	r3, #0
 800227c:	2480      	movs	r4, #128	@ 0x80
 800227e:	4698      	mov	r8, r3
 8002280:	2600      	movs	r6, #0
 8002282:	4b0f      	ldr	r3, [pc, #60]	@ (80022c0 <__aeabi_ddiv+0x21c>)
 8002284:	0324      	lsls	r4, r4, #12
 8002286:	e779      	b.n	800217c <__aeabi_ddiv+0xd8>
 8002288:	2480      	movs	r4, #128	@ 0x80
 800228a:	465b      	mov	r3, fp
 800228c:	0324      	lsls	r4, r4, #12
 800228e:	431c      	orrs	r4, r3
 8002290:	0324      	lsls	r4, r4, #12
 8002292:	002e      	movs	r6, r5
 8002294:	4690      	mov	r8, r2
 8002296:	4b0a      	ldr	r3, [pc, #40]	@ (80022c0 <__aeabi_ddiv+0x21c>)
 8002298:	0b24      	lsrs	r4, r4, #12
 800229a:	e76f      	b.n	800217c <__aeabi_ddiv+0xd8>
 800229c:	2480      	movs	r4, #128	@ 0x80
 800229e:	464b      	mov	r3, r9
 80022a0:	0324      	lsls	r4, r4, #12
 80022a2:	4223      	tst	r3, r4
 80022a4:	d002      	beq.n	80022ac <__aeabi_ddiv+0x208>
 80022a6:	465b      	mov	r3, fp
 80022a8:	4223      	tst	r3, r4
 80022aa:	d0f0      	beq.n	800228e <__aeabi_ddiv+0x1ea>
 80022ac:	2480      	movs	r4, #128	@ 0x80
 80022ae:	464b      	mov	r3, r9
 80022b0:	0324      	lsls	r4, r4, #12
 80022b2:	431c      	orrs	r4, r3
 80022b4:	0324      	lsls	r4, r4, #12
 80022b6:	9e02      	ldr	r6, [sp, #8]
 80022b8:	4b01      	ldr	r3, [pc, #4]	@ (80022c0 <__aeabi_ddiv+0x21c>)
 80022ba:	0b24      	lsrs	r4, r4, #12
 80022bc:	e75e      	b.n	800217c <__aeabi_ddiv+0xd8>
 80022be:	46c0      	nop			@ (mov r8, r8)
 80022c0:	000007ff 	.word	0x000007ff
 80022c4:	fffffc01 	.word	0xfffffc01
 80022c8:	0801190c 	.word	0x0801190c
 80022cc:	fffff801 	.word	0xfffff801
 80022d0:	000003f3 	.word	0x000003f3
 80022d4:	fffffc0d 	.word	0xfffffc0d
 80022d8:	45cb      	cmp	fp, r9
 80022da:	d200      	bcs.n	80022de <__aeabi_ddiv+0x23a>
 80022dc:	e0f8      	b.n	80024d0 <__aeabi_ddiv+0x42c>
 80022de:	d100      	bne.n	80022e2 <__aeabi_ddiv+0x23e>
 80022e0:	e0f3      	b.n	80024ca <__aeabi_ddiv+0x426>
 80022e2:	2301      	movs	r3, #1
 80022e4:	425b      	negs	r3, r3
 80022e6:	469c      	mov	ip, r3
 80022e8:	4644      	mov	r4, r8
 80022ea:	4648      	mov	r0, r9
 80022ec:	2500      	movs	r5, #0
 80022ee:	44e2      	add	sl, ip
 80022f0:	465b      	mov	r3, fp
 80022f2:	0e17      	lsrs	r7, r2, #24
 80022f4:	021b      	lsls	r3, r3, #8
 80022f6:	431f      	orrs	r7, r3
 80022f8:	0c19      	lsrs	r1, r3, #16
 80022fa:	043b      	lsls	r3, r7, #16
 80022fc:	0212      	lsls	r2, r2, #8
 80022fe:	9700      	str	r7, [sp, #0]
 8002300:	0c1f      	lsrs	r7, r3, #16
 8002302:	4691      	mov	r9, r2
 8002304:	9102      	str	r1, [sp, #8]
 8002306:	9703      	str	r7, [sp, #12]
 8002308:	f7fd ffaa 	bl	8000260 <__aeabi_uidivmod>
 800230c:	0002      	movs	r2, r0
 800230e:	437a      	muls	r2, r7
 8002310:	040b      	lsls	r3, r1, #16
 8002312:	0c21      	lsrs	r1, r4, #16
 8002314:	4680      	mov	r8, r0
 8002316:	4319      	orrs	r1, r3
 8002318:	428a      	cmp	r2, r1
 800231a:	d909      	bls.n	8002330 <__aeabi_ddiv+0x28c>
 800231c:	9f00      	ldr	r7, [sp, #0]
 800231e:	2301      	movs	r3, #1
 8002320:	46bc      	mov	ip, r7
 8002322:	425b      	negs	r3, r3
 8002324:	4461      	add	r1, ip
 8002326:	469c      	mov	ip, r3
 8002328:	44e0      	add	r8, ip
 800232a:	428f      	cmp	r7, r1
 800232c:	d800      	bhi.n	8002330 <__aeabi_ddiv+0x28c>
 800232e:	e15c      	b.n	80025ea <__aeabi_ddiv+0x546>
 8002330:	1a88      	subs	r0, r1, r2
 8002332:	9902      	ldr	r1, [sp, #8]
 8002334:	f7fd ff94 	bl	8000260 <__aeabi_uidivmod>
 8002338:	9a03      	ldr	r2, [sp, #12]
 800233a:	0424      	lsls	r4, r4, #16
 800233c:	4342      	muls	r2, r0
 800233e:	0409      	lsls	r1, r1, #16
 8002340:	0c24      	lsrs	r4, r4, #16
 8002342:	0003      	movs	r3, r0
 8002344:	430c      	orrs	r4, r1
 8002346:	42a2      	cmp	r2, r4
 8002348:	d906      	bls.n	8002358 <__aeabi_ddiv+0x2b4>
 800234a:	9900      	ldr	r1, [sp, #0]
 800234c:	3b01      	subs	r3, #1
 800234e:	468c      	mov	ip, r1
 8002350:	4464      	add	r4, ip
 8002352:	42a1      	cmp	r1, r4
 8002354:	d800      	bhi.n	8002358 <__aeabi_ddiv+0x2b4>
 8002356:	e142      	b.n	80025de <__aeabi_ddiv+0x53a>
 8002358:	1aa0      	subs	r0, r4, r2
 800235a:	4642      	mov	r2, r8
 800235c:	0412      	lsls	r2, r2, #16
 800235e:	431a      	orrs	r2, r3
 8002360:	4693      	mov	fp, r2
 8002362:	464b      	mov	r3, r9
 8002364:	4659      	mov	r1, fp
 8002366:	0c1b      	lsrs	r3, r3, #16
 8002368:	001f      	movs	r7, r3
 800236a:	9304      	str	r3, [sp, #16]
 800236c:	040b      	lsls	r3, r1, #16
 800236e:	4649      	mov	r1, r9
 8002370:	0409      	lsls	r1, r1, #16
 8002372:	0c09      	lsrs	r1, r1, #16
 8002374:	000c      	movs	r4, r1
 8002376:	0c1b      	lsrs	r3, r3, #16
 8002378:	435c      	muls	r4, r3
 800237a:	0c12      	lsrs	r2, r2, #16
 800237c:	437b      	muls	r3, r7
 800237e:	4688      	mov	r8, r1
 8002380:	4351      	muls	r1, r2
 8002382:	437a      	muls	r2, r7
 8002384:	0c27      	lsrs	r7, r4, #16
 8002386:	46bc      	mov	ip, r7
 8002388:	185b      	adds	r3, r3, r1
 800238a:	4463      	add	r3, ip
 800238c:	4299      	cmp	r1, r3
 800238e:	d903      	bls.n	8002398 <__aeabi_ddiv+0x2f4>
 8002390:	2180      	movs	r1, #128	@ 0x80
 8002392:	0249      	lsls	r1, r1, #9
 8002394:	468c      	mov	ip, r1
 8002396:	4462      	add	r2, ip
 8002398:	0c19      	lsrs	r1, r3, #16
 800239a:	0424      	lsls	r4, r4, #16
 800239c:	041b      	lsls	r3, r3, #16
 800239e:	0c24      	lsrs	r4, r4, #16
 80023a0:	188a      	adds	r2, r1, r2
 80023a2:	191c      	adds	r4, r3, r4
 80023a4:	4290      	cmp	r0, r2
 80023a6:	d302      	bcc.n	80023ae <__aeabi_ddiv+0x30a>
 80023a8:	d116      	bne.n	80023d8 <__aeabi_ddiv+0x334>
 80023aa:	42a5      	cmp	r5, r4
 80023ac:	d214      	bcs.n	80023d8 <__aeabi_ddiv+0x334>
 80023ae:	465b      	mov	r3, fp
 80023b0:	9f00      	ldr	r7, [sp, #0]
 80023b2:	3b01      	subs	r3, #1
 80023b4:	444d      	add	r5, r9
 80023b6:	9305      	str	r3, [sp, #20]
 80023b8:	454d      	cmp	r5, r9
 80023ba:	419b      	sbcs	r3, r3
 80023bc:	46bc      	mov	ip, r7
 80023be:	425b      	negs	r3, r3
 80023c0:	4463      	add	r3, ip
 80023c2:	18c0      	adds	r0, r0, r3
 80023c4:	4287      	cmp	r7, r0
 80023c6:	d300      	bcc.n	80023ca <__aeabi_ddiv+0x326>
 80023c8:	e102      	b.n	80025d0 <__aeabi_ddiv+0x52c>
 80023ca:	4282      	cmp	r2, r0
 80023cc:	d900      	bls.n	80023d0 <__aeabi_ddiv+0x32c>
 80023ce:	e129      	b.n	8002624 <__aeabi_ddiv+0x580>
 80023d0:	d100      	bne.n	80023d4 <__aeabi_ddiv+0x330>
 80023d2:	e124      	b.n	800261e <__aeabi_ddiv+0x57a>
 80023d4:	9b05      	ldr	r3, [sp, #20]
 80023d6:	469b      	mov	fp, r3
 80023d8:	1b2c      	subs	r4, r5, r4
 80023da:	42a5      	cmp	r5, r4
 80023dc:	41ad      	sbcs	r5, r5
 80023de:	9b00      	ldr	r3, [sp, #0]
 80023e0:	1a80      	subs	r0, r0, r2
 80023e2:	426d      	negs	r5, r5
 80023e4:	1b40      	subs	r0, r0, r5
 80023e6:	4283      	cmp	r3, r0
 80023e8:	d100      	bne.n	80023ec <__aeabi_ddiv+0x348>
 80023ea:	e10f      	b.n	800260c <__aeabi_ddiv+0x568>
 80023ec:	9902      	ldr	r1, [sp, #8]
 80023ee:	f7fd ff37 	bl	8000260 <__aeabi_uidivmod>
 80023f2:	9a03      	ldr	r2, [sp, #12]
 80023f4:	040b      	lsls	r3, r1, #16
 80023f6:	4342      	muls	r2, r0
 80023f8:	0c21      	lsrs	r1, r4, #16
 80023fa:	0005      	movs	r5, r0
 80023fc:	4319      	orrs	r1, r3
 80023fe:	428a      	cmp	r2, r1
 8002400:	d900      	bls.n	8002404 <__aeabi_ddiv+0x360>
 8002402:	e0cb      	b.n	800259c <__aeabi_ddiv+0x4f8>
 8002404:	1a88      	subs	r0, r1, r2
 8002406:	9902      	ldr	r1, [sp, #8]
 8002408:	f7fd ff2a 	bl	8000260 <__aeabi_uidivmod>
 800240c:	9a03      	ldr	r2, [sp, #12]
 800240e:	0424      	lsls	r4, r4, #16
 8002410:	4342      	muls	r2, r0
 8002412:	0409      	lsls	r1, r1, #16
 8002414:	0c24      	lsrs	r4, r4, #16
 8002416:	0003      	movs	r3, r0
 8002418:	430c      	orrs	r4, r1
 800241a:	42a2      	cmp	r2, r4
 800241c:	d900      	bls.n	8002420 <__aeabi_ddiv+0x37c>
 800241e:	e0ca      	b.n	80025b6 <__aeabi_ddiv+0x512>
 8002420:	4641      	mov	r1, r8
 8002422:	1aa4      	subs	r4, r4, r2
 8002424:	042a      	lsls	r2, r5, #16
 8002426:	431a      	orrs	r2, r3
 8002428:	9f04      	ldr	r7, [sp, #16]
 800242a:	0413      	lsls	r3, r2, #16
 800242c:	0c1b      	lsrs	r3, r3, #16
 800242e:	4359      	muls	r1, r3
 8002430:	4640      	mov	r0, r8
 8002432:	437b      	muls	r3, r7
 8002434:	469c      	mov	ip, r3
 8002436:	0c15      	lsrs	r5, r2, #16
 8002438:	4368      	muls	r0, r5
 800243a:	0c0b      	lsrs	r3, r1, #16
 800243c:	4484      	add	ip, r0
 800243e:	4463      	add	r3, ip
 8002440:	437d      	muls	r5, r7
 8002442:	4298      	cmp	r0, r3
 8002444:	d903      	bls.n	800244e <__aeabi_ddiv+0x3aa>
 8002446:	2080      	movs	r0, #128	@ 0x80
 8002448:	0240      	lsls	r0, r0, #9
 800244a:	4684      	mov	ip, r0
 800244c:	4465      	add	r5, ip
 800244e:	0c18      	lsrs	r0, r3, #16
 8002450:	0409      	lsls	r1, r1, #16
 8002452:	041b      	lsls	r3, r3, #16
 8002454:	0c09      	lsrs	r1, r1, #16
 8002456:	1940      	adds	r0, r0, r5
 8002458:	185b      	adds	r3, r3, r1
 800245a:	4284      	cmp	r4, r0
 800245c:	d327      	bcc.n	80024ae <__aeabi_ddiv+0x40a>
 800245e:	d023      	beq.n	80024a8 <__aeabi_ddiv+0x404>
 8002460:	2301      	movs	r3, #1
 8002462:	0035      	movs	r5, r6
 8002464:	431a      	orrs	r2, r3
 8002466:	4b94      	ldr	r3, [pc, #592]	@ (80026b8 <__aeabi_ddiv+0x614>)
 8002468:	4453      	add	r3, sl
 800246a:	2b00      	cmp	r3, #0
 800246c:	dd60      	ble.n	8002530 <__aeabi_ddiv+0x48c>
 800246e:	0751      	lsls	r1, r2, #29
 8002470:	d000      	beq.n	8002474 <__aeabi_ddiv+0x3d0>
 8002472:	e086      	b.n	8002582 <__aeabi_ddiv+0x4de>
 8002474:	002e      	movs	r6, r5
 8002476:	08d1      	lsrs	r1, r2, #3
 8002478:	465a      	mov	r2, fp
 800247a:	01d2      	lsls	r2, r2, #7
 800247c:	d506      	bpl.n	800248c <__aeabi_ddiv+0x3e8>
 800247e:	465a      	mov	r2, fp
 8002480:	4b8e      	ldr	r3, [pc, #568]	@ (80026bc <__aeabi_ddiv+0x618>)
 8002482:	401a      	ands	r2, r3
 8002484:	2380      	movs	r3, #128	@ 0x80
 8002486:	4693      	mov	fp, r2
 8002488:	00db      	lsls	r3, r3, #3
 800248a:	4453      	add	r3, sl
 800248c:	4a8c      	ldr	r2, [pc, #560]	@ (80026c0 <__aeabi_ddiv+0x61c>)
 800248e:	4293      	cmp	r3, r2
 8002490:	dd00      	ble.n	8002494 <__aeabi_ddiv+0x3f0>
 8002492:	e680      	b.n	8002196 <__aeabi_ddiv+0xf2>
 8002494:	465a      	mov	r2, fp
 8002496:	0752      	lsls	r2, r2, #29
 8002498:	430a      	orrs	r2, r1
 800249a:	4690      	mov	r8, r2
 800249c:	465a      	mov	r2, fp
 800249e:	055b      	lsls	r3, r3, #21
 80024a0:	0254      	lsls	r4, r2, #9
 80024a2:	0b24      	lsrs	r4, r4, #12
 80024a4:	0d5b      	lsrs	r3, r3, #21
 80024a6:	e669      	b.n	800217c <__aeabi_ddiv+0xd8>
 80024a8:	0035      	movs	r5, r6
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d0db      	beq.n	8002466 <__aeabi_ddiv+0x3c2>
 80024ae:	9d00      	ldr	r5, [sp, #0]
 80024b0:	1e51      	subs	r1, r2, #1
 80024b2:	46ac      	mov	ip, r5
 80024b4:	4464      	add	r4, ip
 80024b6:	42ac      	cmp	r4, r5
 80024b8:	d200      	bcs.n	80024bc <__aeabi_ddiv+0x418>
 80024ba:	e09e      	b.n	80025fa <__aeabi_ddiv+0x556>
 80024bc:	4284      	cmp	r4, r0
 80024be:	d200      	bcs.n	80024c2 <__aeabi_ddiv+0x41e>
 80024c0:	e0e1      	b.n	8002686 <__aeabi_ddiv+0x5e2>
 80024c2:	d100      	bne.n	80024c6 <__aeabi_ddiv+0x422>
 80024c4:	e0ee      	b.n	80026a4 <__aeabi_ddiv+0x600>
 80024c6:	000a      	movs	r2, r1
 80024c8:	e7ca      	b.n	8002460 <__aeabi_ddiv+0x3bc>
 80024ca:	4542      	cmp	r2, r8
 80024cc:	d900      	bls.n	80024d0 <__aeabi_ddiv+0x42c>
 80024ce:	e708      	b.n	80022e2 <__aeabi_ddiv+0x23e>
 80024d0:	464b      	mov	r3, r9
 80024d2:	07dc      	lsls	r4, r3, #31
 80024d4:	0858      	lsrs	r0, r3, #1
 80024d6:	4643      	mov	r3, r8
 80024d8:	085b      	lsrs	r3, r3, #1
 80024da:	431c      	orrs	r4, r3
 80024dc:	4643      	mov	r3, r8
 80024de:	07dd      	lsls	r5, r3, #31
 80024e0:	e706      	b.n	80022f0 <__aeabi_ddiv+0x24c>
 80024e2:	f001 fa83 	bl	80039ec <__clzsi2>
 80024e6:	2315      	movs	r3, #21
 80024e8:	469c      	mov	ip, r3
 80024ea:	4484      	add	ip, r0
 80024ec:	0002      	movs	r2, r0
 80024ee:	4663      	mov	r3, ip
 80024f0:	3220      	adds	r2, #32
 80024f2:	2b1c      	cmp	r3, #28
 80024f4:	dc00      	bgt.n	80024f8 <__aeabi_ddiv+0x454>
 80024f6:	e692      	b.n	800221e <__aeabi_ddiv+0x17a>
 80024f8:	0023      	movs	r3, r4
 80024fa:	3808      	subs	r0, #8
 80024fc:	4083      	lsls	r3, r0
 80024fe:	4699      	mov	r9, r3
 8002500:	2300      	movs	r3, #0
 8002502:	4698      	mov	r8, r3
 8002504:	e69a      	b.n	800223c <__aeabi_ddiv+0x198>
 8002506:	f001 fa71 	bl	80039ec <__clzsi2>
 800250a:	0002      	movs	r2, r0
 800250c:	0003      	movs	r3, r0
 800250e:	3215      	adds	r2, #21
 8002510:	3320      	adds	r3, #32
 8002512:	2a1c      	cmp	r2, #28
 8002514:	dc00      	bgt.n	8002518 <__aeabi_ddiv+0x474>
 8002516:	e65f      	b.n	80021d8 <__aeabi_ddiv+0x134>
 8002518:	9900      	ldr	r1, [sp, #0]
 800251a:	3808      	subs	r0, #8
 800251c:	4081      	lsls	r1, r0
 800251e:	2200      	movs	r2, #0
 8002520:	468b      	mov	fp, r1
 8002522:	e666      	b.n	80021f2 <__aeabi_ddiv+0x14e>
 8002524:	2200      	movs	r2, #0
 8002526:	002e      	movs	r6, r5
 8002528:	2400      	movs	r4, #0
 800252a:	4690      	mov	r8, r2
 800252c:	4b65      	ldr	r3, [pc, #404]	@ (80026c4 <__aeabi_ddiv+0x620>)
 800252e:	e625      	b.n	800217c <__aeabi_ddiv+0xd8>
 8002530:	002e      	movs	r6, r5
 8002532:	2101      	movs	r1, #1
 8002534:	1ac9      	subs	r1, r1, r3
 8002536:	2938      	cmp	r1, #56	@ 0x38
 8002538:	dd00      	ble.n	800253c <__aeabi_ddiv+0x498>
 800253a:	e61b      	b.n	8002174 <__aeabi_ddiv+0xd0>
 800253c:	291f      	cmp	r1, #31
 800253e:	dc7e      	bgt.n	800263e <__aeabi_ddiv+0x59a>
 8002540:	4861      	ldr	r0, [pc, #388]	@ (80026c8 <__aeabi_ddiv+0x624>)
 8002542:	0014      	movs	r4, r2
 8002544:	4450      	add	r0, sl
 8002546:	465b      	mov	r3, fp
 8002548:	4082      	lsls	r2, r0
 800254a:	4083      	lsls	r3, r0
 800254c:	40cc      	lsrs	r4, r1
 800254e:	1e50      	subs	r0, r2, #1
 8002550:	4182      	sbcs	r2, r0
 8002552:	4323      	orrs	r3, r4
 8002554:	431a      	orrs	r2, r3
 8002556:	465b      	mov	r3, fp
 8002558:	40cb      	lsrs	r3, r1
 800255a:	0751      	lsls	r1, r2, #29
 800255c:	d009      	beq.n	8002572 <__aeabi_ddiv+0x4ce>
 800255e:	210f      	movs	r1, #15
 8002560:	4011      	ands	r1, r2
 8002562:	2904      	cmp	r1, #4
 8002564:	d005      	beq.n	8002572 <__aeabi_ddiv+0x4ce>
 8002566:	1d11      	adds	r1, r2, #4
 8002568:	4291      	cmp	r1, r2
 800256a:	4192      	sbcs	r2, r2
 800256c:	4252      	negs	r2, r2
 800256e:	189b      	adds	r3, r3, r2
 8002570:	000a      	movs	r2, r1
 8002572:	0219      	lsls	r1, r3, #8
 8002574:	d400      	bmi.n	8002578 <__aeabi_ddiv+0x4d4>
 8002576:	e09b      	b.n	80026b0 <__aeabi_ddiv+0x60c>
 8002578:	2200      	movs	r2, #0
 800257a:	2301      	movs	r3, #1
 800257c:	2400      	movs	r4, #0
 800257e:	4690      	mov	r8, r2
 8002580:	e5fc      	b.n	800217c <__aeabi_ddiv+0xd8>
 8002582:	210f      	movs	r1, #15
 8002584:	4011      	ands	r1, r2
 8002586:	2904      	cmp	r1, #4
 8002588:	d100      	bne.n	800258c <__aeabi_ddiv+0x4e8>
 800258a:	e773      	b.n	8002474 <__aeabi_ddiv+0x3d0>
 800258c:	1d11      	adds	r1, r2, #4
 800258e:	4291      	cmp	r1, r2
 8002590:	4192      	sbcs	r2, r2
 8002592:	4252      	negs	r2, r2
 8002594:	002e      	movs	r6, r5
 8002596:	08c9      	lsrs	r1, r1, #3
 8002598:	4493      	add	fp, r2
 800259a:	e76d      	b.n	8002478 <__aeabi_ddiv+0x3d4>
 800259c:	9b00      	ldr	r3, [sp, #0]
 800259e:	3d01      	subs	r5, #1
 80025a0:	469c      	mov	ip, r3
 80025a2:	4461      	add	r1, ip
 80025a4:	428b      	cmp	r3, r1
 80025a6:	d900      	bls.n	80025aa <__aeabi_ddiv+0x506>
 80025a8:	e72c      	b.n	8002404 <__aeabi_ddiv+0x360>
 80025aa:	428a      	cmp	r2, r1
 80025ac:	d800      	bhi.n	80025b0 <__aeabi_ddiv+0x50c>
 80025ae:	e729      	b.n	8002404 <__aeabi_ddiv+0x360>
 80025b0:	1e85      	subs	r5, r0, #2
 80025b2:	4461      	add	r1, ip
 80025b4:	e726      	b.n	8002404 <__aeabi_ddiv+0x360>
 80025b6:	9900      	ldr	r1, [sp, #0]
 80025b8:	3b01      	subs	r3, #1
 80025ba:	468c      	mov	ip, r1
 80025bc:	4464      	add	r4, ip
 80025be:	42a1      	cmp	r1, r4
 80025c0:	d900      	bls.n	80025c4 <__aeabi_ddiv+0x520>
 80025c2:	e72d      	b.n	8002420 <__aeabi_ddiv+0x37c>
 80025c4:	42a2      	cmp	r2, r4
 80025c6:	d800      	bhi.n	80025ca <__aeabi_ddiv+0x526>
 80025c8:	e72a      	b.n	8002420 <__aeabi_ddiv+0x37c>
 80025ca:	1e83      	subs	r3, r0, #2
 80025cc:	4464      	add	r4, ip
 80025ce:	e727      	b.n	8002420 <__aeabi_ddiv+0x37c>
 80025d0:	4287      	cmp	r7, r0
 80025d2:	d000      	beq.n	80025d6 <__aeabi_ddiv+0x532>
 80025d4:	e6fe      	b.n	80023d4 <__aeabi_ddiv+0x330>
 80025d6:	45a9      	cmp	r9, r5
 80025d8:	d900      	bls.n	80025dc <__aeabi_ddiv+0x538>
 80025da:	e6fb      	b.n	80023d4 <__aeabi_ddiv+0x330>
 80025dc:	e6f5      	b.n	80023ca <__aeabi_ddiv+0x326>
 80025de:	42a2      	cmp	r2, r4
 80025e0:	d800      	bhi.n	80025e4 <__aeabi_ddiv+0x540>
 80025e2:	e6b9      	b.n	8002358 <__aeabi_ddiv+0x2b4>
 80025e4:	1e83      	subs	r3, r0, #2
 80025e6:	4464      	add	r4, ip
 80025e8:	e6b6      	b.n	8002358 <__aeabi_ddiv+0x2b4>
 80025ea:	428a      	cmp	r2, r1
 80025ec:	d800      	bhi.n	80025f0 <__aeabi_ddiv+0x54c>
 80025ee:	e69f      	b.n	8002330 <__aeabi_ddiv+0x28c>
 80025f0:	46bc      	mov	ip, r7
 80025f2:	1e83      	subs	r3, r0, #2
 80025f4:	4698      	mov	r8, r3
 80025f6:	4461      	add	r1, ip
 80025f8:	e69a      	b.n	8002330 <__aeabi_ddiv+0x28c>
 80025fa:	000a      	movs	r2, r1
 80025fc:	4284      	cmp	r4, r0
 80025fe:	d000      	beq.n	8002602 <__aeabi_ddiv+0x55e>
 8002600:	e72e      	b.n	8002460 <__aeabi_ddiv+0x3bc>
 8002602:	454b      	cmp	r3, r9
 8002604:	d000      	beq.n	8002608 <__aeabi_ddiv+0x564>
 8002606:	e72b      	b.n	8002460 <__aeabi_ddiv+0x3bc>
 8002608:	0035      	movs	r5, r6
 800260a:	e72c      	b.n	8002466 <__aeabi_ddiv+0x3c2>
 800260c:	4b2a      	ldr	r3, [pc, #168]	@ (80026b8 <__aeabi_ddiv+0x614>)
 800260e:	4a2f      	ldr	r2, [pc, #188]	@ (80026cc <__aeabi_ddiv+0x628>)
 8002610:	4453      	add	r3, sl
 8002612:	4592      	cmp	sl, r2
 8002614:	db43      	blt.n	800269e <__aeabi_ddiv+0x5fa>
 8002616:	2201      	movs	r2, #1
 8002618:	2100      	movs	r1, #0
 800261a:	4493      	add	fp, r2
 800261c:	e72c      	b.n	8002478 <__aeabi_ddiv+0x3d4>
 800261e:	42ac      	cmp	r4, r5
 8002620:	d800      	bhi.n	8002624 <__aeabi_ddiv+0x580>
 8002622:	e6d7      	b.n	80023d4 <__aeabi_ddiv+0x330>
 8002624:	2302      	movs	r3, #2
 8002626:	425b      	negs	r3, r3
 8002628:	469c      	mov	ip, r3
 800262a:	9900      	ldr	r1, [sp, #0]
 800262c:	444d      	add	r5, r9
 800262e:	454d      	cmp	r5, r9
 8002630:	419b      	sbcs	r3, r3
 8002632:	44e3      	add	fp, ip
 8002634:	468c      	mov	ip, r1
 8002636:	425b      	negs	r3, r3
 8002638:	4463      	add	r3, ip
 800263a:	18c0      	adds	r0, r0, r3
 800263c:	e6cc      	b.n	80023d8 <__aeabi_ddiv+0x334>
 800263e:	201f      	movs	r0, #31
 8002640:	4240      	negs	r0, r0
 8002642:	1ac3      	subs	r3, r0, r3
 8002644:	4658      	mov	r0, fp
 8002646:	40d8      	lsrs	r0, r3
 8002648:	2920      	cmp	r1, #32
 800264a:	d004      	beq.n	8002656 <__aeabi_ddiv+0x5b2>
 800264c:	4659      	mov	r1, fp
 800264e:	4b20      	ldr	r3, [pc, #128]	@ (80026d0 <__aeabi_ddiv+0x62c>)
 8002650:	4453      	add	r3, sl
 8002652:	4099      	lsls	r1, r3
 8002654:	430a      	orrs	r2, r1
 8002656:	1e53      	subs	r3, r2, #1
 8002658:	419a      	sbcs	r2, r3
 800265a:	2307      	movs	r3, #7
 800265c:	0019      	movs	r1, r3
 800265e:	4302      	orrs	r2, r0
 8002660:	2400      	movs	r4, #0
 8002662:	4011      	ands	r1, r2
 8002664:	4213      	tst	r3, r2
 8002666:	d009      	beq.n	800267c <__aeabi_ddiv+0x5d8>
 8002668:	3308      	adds	r3, #8
 800266a:	4013      	ands	r3, r2
 800266c:	2b04      	cmp	r3, #4
 800266e:	d01d      	beq.n	80026ac <__aeabi_ddiv+0x608>
 8002670:	1d13      	adds	r3, r2, #4
 8002672:	4293      	cmp	r3, r2
 8002674:	4189      	sbcs	r1, r1
 8002676:	001a      	movs	r2, r3
 8002678:	4249      	negs	r1, r1
 800267a:	0749      	lsls	r1, r1, #29
 800267c:	08d2      	lsrs	r2, r2, #3
 800267e:	430a      	orrs	r2, r1
 8002680:	4690      	mov	r8, r2
 8002682:	2300      	movs	r3, #0
 8002684:	e57a      	b.n	800217c <__aeabi_ddiv+0xd8>
 8002686:	4649      	mov	r1, r9
 8002688:	9f00      	ldr	r7, [sp, #0]
 800268a:	004d      	lsls	r5, r1, #1
 800268c:	454d      	cmp	r5, r9
 800268e:	4189      	sbcs	r1, r1
 8002690:	46bc      	mov	ip, r7
 8002692:	4249      	negs	r1, r1
 8002694:	4461      	add	r1, ip
 8002696:	46a9      	mov	r9, r5
 8002698:	3a02      	subs	r2, #2
 800269a:	1864      	adds	r4, r4, r1
 800269c:	e7ae      	b.n	80025fc <__aeabi_ddiv+0x558>
 800269e:	2201      	movs	r2, #1
 80026a0:	4252      	negs	r2, r2
 80026a2:	e746      	b.n	8002532 <__aeabi_ddiv+0x48e>
 80026a4:	4599      	cmp	r9, r3
 80026a6:	d3ee      	bcc.n	8002686 <__aeabi_ddiv+0x5e2>
 80026a8:	000a      	movs	r2, r1
 80026aa:	e7aa      	b.n	8002602 <__aeabi_ddiv+0x55e>
 80026ac:	2100      	movs	r1, #0
 80026ae:	e7e5      	b.n	800267c <__aeabi_ddiv+0x5d8>
 80026b0:	0759      	lsls	r1, r3, #29
 80026b2:	025b      	lsls	r3, r3, #9
 80026b4:	0b1c      	lsrs	r4, r3, #12
 80026b6:	e7e1      	b.n	800267c <__aeabi_ddiv+0x5d8>
 80026b8:	000003ff 	.word	0x000003ff
 80026bc:	feffffff 	.word	0xfeffffff
 80026c0:	000007fe 	.word	0x000007fe
 80026c4:	000007ff 	.word	0x000007ff
 80026c8:	0000041e 	.word	0x0000041e
 80026cc:	fffffc02 	.word	0xfffffc02
 80026d0:	0000043e 	.word	0x0000043e

080026d4 <__eqdf2>:
 80026d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026d6:	4657      	mov	r7, sl
 80026d8:	46de      	mov	lr, fp
 80026da:	464e      	mov	r6, r9
 80026dc:	4645      	mov	r5, r8
 80026de:	b5e0      	push	{r5, r6, r7, lr}
 80026e0:	000d      	movs	r5, r1
 80026e2:	0004      	movs	r4, r0
 80026e4:	0fe8      	lsrs	r0, r5, #31
 80026e6:	4683      	mov	fp, r0
 80026e8:	0309      	lsls	r1, r1, #12
 80026ea:	0fd8      	lsrs	r0, r3, #31
 80026ec:	0b09      	lsrs	r1, r1, #12
 80026ee:	4682      	mov	sl, r0
 80026f0:	4819      	ldr	r0, [pc, #100]	@ (8002758 <__eqdf2+0x84>)
 80026f2:	468c      	mov	ip, r1
 80026f4:	031f      	lsls	r7, r3, #12
 80026f6:	0069      	lsls	r1, r5, #1
 80026f8:	005e      	lsls	r6, r3, #1
 80026fa:	0d49      	lsrs	r1, r1, #21
 80026fc:	0b3f      	lsrs	r7, r7, #12
 80026fe:	0d76      	lsrs	r6, r6, #21
 8002700:	4281      	cmp	r1, r0
 8002702:	d018      	beq.n	8002736 <__eqdf2+0x62>
 8002704:	4286      	cmp	r6, r0
 8002706:	d00f      	beq.n	8002728 <__eqdf2+0x54>
 8002708:	2001      	movs	r0, #1
 800270a:	42b1      	cmp	r1, r6
 800270c:	d10d      	bne.n	800272a <__eqdf2+0x56>
 800270e:	45bc      	cmp	ip, r7
 8002710:	d10b      	bne.n	800272a <__eqdf2+0x56>
 8002712:	4294      	cmp	r4, r2
 8002714:	d109      	bne.n	800272a <__eqdf2+0x56>
 8002716:	45d3      	cmp	fp, sl
 8002718:	d01c      	beq.n	8002754 <__eqdf2+0x80>
 800271a:	2900      	cmp	r1, #0
 800271c:	d105      	bne.n	800272a <__eqdf2+0x56>
 800271e:	4660      	mov	r0, ip
 8002720:	4320      	orrs	r0, r4
 8002722:	1e43      	subs	r3, r0, #1
 8002724:	4198      	sbcs	r0, r3
 8002726:	e000      	b.n	800272a <__eqdf2+0x56>
 8002728:	2001      	movs	r0, #1
 800272a:	bcf0      	pop	{r4, r5, r6, r7}
 800272c:	46bb      	mov	fp, r7
 800272e:	46b2      	mov	sl, r6
 8002730:	46a9      	mov	r9, r5
 8002732:	46a0      	mov	r8, r4
 8002734:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002736:	2001      	movs	r0, #1
 8002738:	428e      	cmp	r6, r1
 800273a:	d1f6      	bne.n	800272a <__eqdf2+0x56>
 800273c:	4661      	mov	r1, ip
 800273e:	4339      	orrs	r1, r7
 8002740:	000f      	movs	r7, r1
 8002742:	4317      	orrs	r7, r2
 8002744:	4327      	orrs	r7, r4
 8002746:	d1f0      	bne.n	800272a <__eqdf2+0x56>
 8002748:	465b      	mov	r3, fp
 800274a:	4652      	mov	r2, sl
 800274c:	1a98      	subs	r0, r3, r2
 800274e:	1e43      	subs	r3, r0, #1
 8002750:	4198      	sbcs	r0, r3
 8002752:	e7ea      	b.n	800272a <__eqdf2+0x56>
 8002754:	2000      	movs	r0, #0
 8002756:	e7e8      	b.n	800272a <__eqdf2+0x56>
 8002758:	000007ff 	.word	0x000007ff

0800275c <__gedf2>:
 800275c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800275e:	4657      	mov	r7, sl
 8002760:	464e      	mov	r6, r9
 8002762:	4645      	mov	r5, r8
 8002764:	46de      	mov	lr, fp
 8002766:	b5e0      	push	{r5, r6, r7, lr}
 8002768:	000d      	movs	r5, r1
 800276a:	030e      	lsls	r6, r1, #12
 800276c:	0049      	lsls	r1, r1, #1
 800276e:	0d49      	lsrs	r1, r1, #21
 8002770:	468a      	mov	sl, r1
 8002772:	0fdf      	lsrs	r7, r3, #31
 8002774:	0fe9      	lsrs	r1, r5, #31
 8002776:	46bc      	mov	ip, r7
 8002778:	b083      	sub	sp, #12
 800277a:	4f2f      	ldr	r7, [pc, #188]	@ (8002838 <__gedf2+0xdc>)
 800277c:	0004      	movs	r4, r0
 800277e:	4680      	mov	r8, r0
 8002780:	9101      	str	r1, [sp, #4]
 8002782:	0058      	lsls	r0, r3, #1
 8002784:	0319      	lsls	r1, r3, #12
 8002786:	4691      	mov	r9, r2
 8002788:	0b36      	lsrs	r6, r6, #12
 800278a:	0b09      	lsrs	r1, r1, #12
 800278c:	0d40      	lsrs	r0, r0, #21
 800278e:	45ba      	cmp	sl, r7
 8002790:	d01d      	beq.n	80027ce <__gedf2+0x72>
 8002792:	42b8      	cmp	r0, r7
 8002794:	d00d      	beq.n	80027b2 <__gedf2+0x56>
 8002796:	4657      	mov	r7, sl
 8002798:	2f00      	cmp	r7, #0
 800279a:	d12a      	bne.n	80027f2 <__gedf2+0x96>
 800279c:	4334      	orrs	r4, r6
 800279e:	2800      	cmp	r0, #0
 80027a0:	d124      	bne.n	80027ec <__gedf2+0x90>
 80027a2:	430a      	orrs	r2, r1
 80027a4:	d036      	beq.n	8002814 <__gedf2+0xb8>
 80027a6:	2c00      	cmp	r4, #0
 80027a8:	d141      	bne.n	800282e <__gedf2+0xd2>
 80027aa:	4663      	mov	r3, ip
 80027ac:	0058      	lsls	r0, r3, #1
 80027ae:	3801      	subs	r0, #1
 80027b0:	e015      	b.n	80027de <__gedf2+0x82>
 80027b2:	4311      	orrs	r1, r2
 80027b4:	d138      	bne.n	8002828 <__gedf2+0xcc>
 80027b6:	4653      	mov	r3, sl
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d101      	bne.n	80027c0 <__gedf2+0x64>
 80027bc:	4326      	orrs	r6, r4
 80027be:	d0f4      	beq.n	80027aa <__gedf2+0x4e>
 80027c0:	9b01      	ldr	r3, [sp, #4]
 80027c2:	4563      	cmp	r3, ip
 80027c4:	d107      	bne.n	80027d6 <__gedf2+0x7a>
 80027c6:	9b01      	ldr	r3, [sp, #4]
 80027c8:	0058      	lsls	r0, r3, #1
 80027ca:	3801      	subs	r0, #1
 80027cc:	e007      	b.n	80027de <__gedf2+0x82>
 80027ce:	4326      	orrs	r6, r4
 80027d0:	d12a      	bne.n	8002828 <__gedf2+0xcc>
 80027d2:	4550      	cmp	r0, sl
 80027d4:	d021      	beq.n	800281a <__gedf2+0xbe>
 80027d6:	2001      	movs	r0, #1
 80027d8:	9b01      	ldr	r3, [sp, #4]
 80027da:	425f      	negs	r7, r3
 80027dc:	4338      	orrs	r0, r7
 80027de:	b003      	add	sp, #12
 80027e0:	bcf0      	pop	{r4, r5, r6, r7}
 80027e2:	46bb      	mov	fp, r7
 80027e4:	46b2      	mov	sl, r6
 80027e6:	46a9      	mov	r9, r5
 80027e8:	46a0      	mov	r8, r4
 80027ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027ec:	2c00      	cmp	r4, #0
 80027ee:	d0dc      	beq.n	80027aa <__gedf2+0x4e>
 80027f0:	e7e6      	b.n	80027c0 <__gedf2+0x64>
 80027f2:	2800      	cmp	r0, #0
 80027f4:	d0ef      	beq.n	80027d6 <__gedf2+0x7a>
 80027f6:	9b01      	ldr	r3, [sp, #4]
 80027f8:	4563      	cmp	r3, ip
 80027fa:	d1ec      	bne.n	80027d6 <__gedf2+0x7a>
 80027fc:	4582      	cmp	sl, r0
 80027fe:	dcea      	bgt.n	80027d6 <__gedf2+0x7a>
 8002800:	dbe1      	blt.n	80027c6 <__gedf2+0x6a>
 8002802:	428e      	cmp	r6, r1
 8002804:	d8e7      	bhi.n	80027d6 <__gedf2+0x7a>
 8002806:	d1de      	bne.n	80027c6 <__gedf2+0x6a>
 8002808:	45c8      	cmp	r8, r9
 800280a:	d8e4      	bhi.n	80027d6 <__gedf2+0x7a>
 800280c:	2000      	movs	r0, #0
 800280e:	45c8      	cmp	r8, r9
 8002810:	d2e5      	bcs.n	80027de <__gedf2+0x82>
 8002812:	e7d8      	b.n	80027c6 <__gedf2+0x6a>
 8002814:	2c00      	cmp	r4, #0
 8002816:	d0e2      	beq.n	80027de <__gedf2+0x82>
 8002818:	e7dd      	b.n	80027d6 <__gedf2+0x7a>
 800281a:	4311      	orrs	r1, r2
 800281c:	d104      	bne.n	8002828 <__gedf2+0xcc>
 800281e:	9b01      	ldr	r3, [sp, #4]
 8002820:	4563      	cmp	r3, ip
 8002822:	d1d8      	bne.n	80027d6 <__gedf2+0x7a>
 8002824:	2000      	movs	r0, #0
 8002826:	e7da      	b.n	80027de <__gedf2+0x82>
 8002828:	2002      	movs	r0, #2
 800282a:	4240      	negs	r0, r0
 800282c:	e7d7      	b.n	80027de <__gedf2+0x82>
 800282e:	9b01      	ldr	r3, [sp, #4]
 8002830:	4563      	cmp	r3, ip
 8002832:	d0e6      	beq.n	8002802 <__gedf2+0xa6>
 8002834:	e7cf      	b.n	80027d6 <__gedf2+0x7a>
 8002836:	46c0      	nop			@ (mov r8, r8)
 8002838:	000007ff 	.word	0x000007ff

0800283c <__ledf2>:
 800283c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800283e:	4657      	mov	r7, sl
 8002840:	464e      	mov	r6, r9
 8002842:	4645      	mov	r5, r8
 8002844:	46de      	mov	lr, fp
 8002846:	b5e0      	push	{r5, r6, r7, lr}
 8002848:	000d      	movs	r5, r1
 800284a:	030e      	lsls	r6, r1, #12
 800284c:	0049      	lsls	r1, r1, #1
 800284e:	0d49      	lsrs	r1, r1, #21
 8002850:	468a      	mov	sl, r1
 8002852:	0fdf      	lsrs	r7, r3, #31
 8002854:	0fe9      	lsrs	r1, r5, #31
 8002856:	46bc      	mov	ip, r7
 8002858:	b083      	sub	sp, #12
 800285a:	4f2e      	ldr	r7, [pc, #184]	@ (8002914 <__ledf2+0xd8>)
 800285c:	0004      	movs	r4, r0
 800285e:	4680      	mov	r8, r0
 8002860:	9101      	str	r1, [sp, #4]
 8002862:	0058      	lsls	r0, r3, #1
 8002864:	0319      	lsls	r1, r3, #12
 8002866:	4691      	mov	r9, r2
 8002868:	0b36      	lsrs	r6, r6, #12
 800286a:	0b09      	lsrs	r1, r1, #12
 800286c:	0d40      	lsrs	r0, r0, #21
 800286e:	45ba      	cmp	sl, r7
 8002870:	d01e      	beq.n	80028b0 <__ledf2+0x74>
 8002872:	42b8      	cmp	r0, r7
 8002874:	d00d      	beq.n	8002892 <__ledf2+0x56>
 8002876:	4657      	mov	r7, sl
 8002878:	2f00      	cmp	r7, #0
 800287a:	d127      	bne.n	80028cc <__ledf2+0x90>
 800287c:	4334      	orrs	r4, r6
 800287e:	2800      	cmp	r0, #0
 8002880:	d133      	bne.n	80028ea <__ledf2+0xae>
 8002882:	430a      	orrs	r2, r1
 8002884:	d034      	beq.n	80028f0 <__ledf2+0xb4>
 8002886:	2c00      	cmp	r4, #0
 8002888:	d140      	bne.n	800290c <__ledf2+0xd0>
 800288a:	4663      	mov	r3, ip
 800288c:	0058      	lsls	r0, r3, #1
 800288e:	3801      	subs	r0, #1
 8002890:	e015      	b.n	80028be <__ledf2+0x82>
 8002892:	4311      	orrs	r1, r2
 8002894:	d112      	bne.n	80028bc <__ledf2+0x80>
 8002896:	4653      	mov	r3, sl
 8002898:	2b00      	cmp	r3, #0
 800289a:	d101      	bne.n	80028a0 <__ledf2+0x64>
 800289c:	4326      	orrs	r6, r4
 800289e:	d0f4      	beq.n	800288a <__ledf2+0x4e>
 80028a0:	9b01      	ldr	r3, [sp, #4]
 80028a2:	4563      	cmp	r3, ip
 80028a4:	d01d      	beq.n	80028e2 <__ledf2+0xa6>
 80028a6:	2001      	movs	r0, #1
 80028a8:	9b01      	ldr	r3, [sp, #4]
 80028aa:	425f      	negs	r7, r3
 80028ac:	4338      	orrs	r0, r7
 80028ae:	e006      	b.n	80028be <__ledf2+0x82>
 80028b0:	4326      	orrs	r6, r4
 80028b2:	d103      	bne.n	80028bc <__ledf2+0x80>
 80028b4:	4550      	cmp	r0, sl
 80028b6:	d1f6      	bne.n	80028a6 <__ledf2+0x6a>
 80028b8:	4311      	orrs	r1, r2
 80028ba:	d01c      	beq.n	80028f6 <__ledf2+0xba>
 80028bc:	2002      	movs	r0, #2
 80028be:	b003      	add	sp, #12
 80028c0:	bcf0      	pop	{r4, r5, r6, r7}
 80028c2:	46bb      	mov	fp, r7
 80028c4:	46b2      	mov	sl, r6
 80028c6:	46a9      	mov	r9, r5
 80028c8:	46a0      	mov	r8, r4
 80028ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028cc:	2800      	cmp	r0, #0
 80028ce:	d0ea      	beq.n	80028a6 <__ledf2+0x6a>
 80028d0:	9b01      	ldr	r3, [sp, #4]
 80028d2:	4563      	cmp	r3, ip
 80028d4:	d1e7      	bne.n	80028a6 <__ledf2+0x6a>
 80028d6:	4582      	cmp	sl, r0
 80028d8:	dce5      	bgt.n	80028a6 <__ledf2+0x6a>
 80028da:	db02      	blt.n	80028e2 <__ledf2+0xa6>
 80028dc:	428e      	cmp	r6, r1
 80028de:	d8e2      	bhi.n	80028a6 <__ledf2+0x6a>
 80028e0:	d00e      	beq.n	8002900 <__ledf2+0xc4>
 80028e2:	9b01      	ldr	r3, [sp, #4]
 80028e4:	0058      	lsls	r0, r3, #1
 80028e6:	3801      	subs	r0, #1
 80028e8:	e7e9      	b.n	80028be <__ledf2+0x82>
 80028ea:	2c00      	cmp	r4, #0
 80028ec:	d0cd      	beq.n	800288a <__ledf2+0x4e>
 80028ee:	e7d7      	b.n	80028a0 <__ledf2+0x64>
 80028f0:	2c00      	cmp	r4, #0
 80028f2:	d0e4      	beq.n	80028be <__ledf2+0x82>
 80028f4:	e7d7      	b.n	80028a6 <__ledf2+0x6a>
 80028f6:	9b01      	ldr	r3, [sp, #4]
 80028f8:	2000      	movs	r0, #0
 80028fa:	4563      	cmp	r3, ip
 80028fc:	d0df      	beq.n	80028be <__ledf2+0x82>
 80028fe:	e7d2      	b.n	80028a6 <__ledf2+0x6a>
 8002900:	45c8      	cmp	r8, r9
 8002902:	d8d0      	bhi.n	80028a6 <__ledf2+0x6a>
 8002904:	2000      	movs	r0, #0
 8002906:	45c8      	cmp	r8, r9
 8002908:	d2d9      	bcs.n	80028be <__ledf2+0x82>
 800290a:	e7ea      	b.n	80028e2 <__ledf2+0xa6>
 800290c:	9b01      	ldr	r3, [sp, #4]
 800290e:	4563      	cmp	r3, ip
 8002910:	d0e4      	beq.n	80028dc <__ledf2+0xa0>
 8002912:	e7c8      	b.n	80028a6 <__ledf2+0x6a>
 8002914:	000007ff 	.word	0x000007ff

08002918 <__aeabi_dmul>:
 8002918:	b5f0      	push	{r4, r5, r6, r7, lr}
 800291a:	4657      	mov	r7, sl
 800291c:	464e      	mov	r6, r9
 800291e:	46de      	mov	lr, fp
 8002920:	4645      	mov	r5, r8
 8002922:	b5e0      	push	{r5, r6, r7, lr}
 8002924:	001f      	movs	r7, r3
 8002926:	030b      	lsls	r3, r1, #12
 8002928:	0b1b      	lsrs	r3, r3, #12
 800292a:	0016      	movs	r6, r2
 800292c:	469a      	mov	sl, r3
 800292e:	0fca      	lsrs	r2, r1, #31
 8002930:	004b      	lsls	r3, r1, #1
 8002932:	0004      	movs	r4, r0
 8002934:	4691      	mov	r9, r2
 8002936:	b085      	sub	sp, #20
 8002938:	0d5b      	lsrs	r3, r3, #21
 800293a:	d100      	bne.n	800293e <__aeabi_dmul+0x26>
 800293c:	e1cf      	b.n	8002cde <__aeabi_dmul+0x3c6>
 800293e:	4acd      	ldr	r2, [pc, #820]	@ (8002c74 <__aeabi_dmul+0x35c>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d055      	beq.n	80029f0 <__aeabi_dmul+0xd8>
 8002944:	4651      	mov	r1, sl
 8002946:	0f42      	lsrs	r2, r0, #29
 8002948:	00c9      	lsls	r1, r1, #3
 800294a:	430a      	orrs	r2, r1
 800294c:	2180      	movs	r1, #128	@ 0x80
 800294e:	0409      	lsls	r1, r1, #16
 8002950:	4311      	orrs	r1, r2
 8002952:	00c2      	lsls	r2, r0, #3
 8002954:	4690      	mov	r8, r2
 8002956:	4ac8      	ldr	r2, [pc, #800]	@ (8002c78 <__aeabi_dmul+0x360>)
 8002958:	468a      	mov	sl, r1
 800295a:	4693      	mov	fp, r2
 800295c:	449b      	add	fp, r3
 800295e:	2300      	movs	r3, #0
 8002960:	2500      	movs	r5, #0
 8002962:	9302      	str	r3, [sp, #8]
 8002964:	033c      	lsls	r4, r7, #12
 8002966:	007b      	lsls	r3, r7, #1
 8002968:	0ffa      	lsrs	r2, r7, #31
 800296a:	9601      	str	r6, [sp, #4]
 800296c:	0b24      	lsrs	r4, r4, #12
 800296e:	0d5b      	lsrs	r3, r3, #21
 8002970:	9200      	str	r2, [sp, #0]
 8002972:	d100      	bne.n	8002976 <__aeabi_dmul+0x5e>
 8002974:	e188      	b.n	8002c88 <__aeabi_dmul+0x370>
 8002976:	4abf      	ldr	r2, [pc, #764]	@ (8002c74 <__aeabi_dmul+0x35c>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d100      	bne.n	800297e <__aeabi_dmul+0x66>
 800297c:	e092      	b.n	8002aa4 <__aeabi_dmul+0x18c>
 800297e:	4abe      	ldr	r2, [pc, #760]	@ (8002c78 <__aeabi_dmul+0x360>)
 8002980:	4694      	mov	ip, r2
 8002982:	4463      	add	r3, ip
 8002984:	449b      	add	fp, r3
 8002986:	2d0a      	cmp	r5, #10
 8002988:	dc42      	bgt.n	8002a10 <__aeabi_dmul+0xf8>
 800298a:	00e4      	lsls	r4, r4, #3
 800298c:	0f73      	lsrs	r3, r6, #29
 800298e:	4323      	orrs	r3, r4
 8002990:	2480      	movs	r4, #128	@ 0x80
 8002992:	4649      	mov	r1, r9
 8002994:	0424      	lsls	r4, r4, #16
 8002996:	431c      	orrs	r4, r3
 8002998:	00f3      	lsls	r3, r6, #3
 800299a:	9301      	str	r3, [sp, #4]
 800299c:	9b00      	ldr	r3, [sp, #0]
 800299e:	2000      	movs	r0, #0
 80029a0:	4059      	eors	r1, r3
 80029a2:	b2cb      	uxtb	r3, r1
 80029a4:	9303      	str	r3, [sp, #12]
 80029a6:	2d02      	cmp	r5, #2
 80029a8:	dc00      	bgt.n	80029ac <__aeabi_dmul+0x94>
 80029aa:	e094      	b.n	8002ad6 <__aeabi_dmul+0x1be>
 80029ac:	2301      	movs	r3, #1
 80029ae:	40ab      	lsls	r3, r5
 80029b0:	001d      	movs	r5, r3
 80029b2:	23a6      	movs	r3, #166	@ 0xa6
 80029b4:	002a      	movs	r2, r5
 80029b6:	00db      	lsls	r3, r3, #3
 80029b8:	401a      	ands	r2, r3
 80029ba:	421d      	tst	r5, r3
 80029bc:	d000      	beq.n	80029c0 <__aeabi_dmul+0xa8>
 80029be:	e229      	b.n	8002e14 <__aeabi_dmul+0x4fc>
 80029c0:	2390      	movs	r3, #144	@ 0x90
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	421d      	tst	r5, r3
 80029c6:	d100      	bne.n	80029ca <__aeabi_dmul+0xb2>
 80029c8:	e24d      	b.n	8002e66 <__aeabi_dmul+0x54e>
 80029ca:	2300      	movs	r3, #0
 80029cc:	2480      	movs	r4, #128	@ 0x80
 80029ce:	4699      	mov	r9, r3
 80029d0:	0324      	lsls	r4, r4, #12
 80029d2:	4ba8      	ldr	r3, [pc, #672]	@ (8002c74 <__aeabi_dmul+0x35c>)
 80029d4:	0010      	movs	r0, r2
 80029d6:	464a      	mov	r2, r9
 80029d8:	051b      	lsls	r3, r3, #20
 80029da:	4323      	orrs	r3, r4
 80029dc:	07d2      	lsls	r2, r2, #31
 80029de:	4313      	orrs	r3, r2
 80029e0:	0019      	movs	r1, r3
 80029e2:	b005      	add	sp, #20
 80029e4:	bcf0      	pop	{r4, r5, r6, r7}
 80029e6:	46bb      	mov	fp, r7
 80029e8:	46b2      	mov	sl, r6
 80029ea:	46a9      	mov	r9, r5
 80029ec:	46a0      	mov	r8, r4
 80029ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029f0:	4652      	mov	r2, sl
 80029f2:	4302      	orrs	r2, r0
 80029f4:	4690      	mov	r8, r2
 80029f6:	d000      	beq.n	80029fa <__aeabi_dmul+0xe2>
 80029f8:	e1ac      	b.n	8002d54 <__aeabi_dmul+0x43c>
 80029fa:	469b      	mov	fp, r3
 80029fc:	2302      	movs	r3, #2
 80029fe:	4692      	mov	sl, r2
 8002a00:	2508      	movs	r5, #8
 8002a02:	9302      	str	r3, [sp, #8]
 8002a04:	e7ae      	b.n	8002964 <__aeabi_dmul+0x4c>
 8002a06:	9b00      	ldr	r3, [sp, #0]
 8002a08:	46a2      	mov	sl, r4
 8002a0a:	4699      	mov	r9, r3
 8002a0c:	9b01      	ldr	r3, [sp, #4]
 8002a0e:	4698      	mov	r8, r3
 8002a10:	9b02      	ldr	r3, [sp, #8]
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d100      	bne.n	8002a18 <__aeabi_dmul+0x100>
 8002a16:	e1ca      	b.n	8002dae <__aeabi_dmul+0x496>
 8002a18:	2b03      	cmp	r3, #3
 8002a1a:	d100      	bne.n	8002a1e <__aeabi_dmul+0x106>
 8002a1c:	e192      	b.n	8002d44 <__aeabi_dmul+0x42c>
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d110      	bne.n	8002a44 <__aeabi_dmul+0x12c>
 8002a22:	2300      	movs	r3, #0
 8002a24:	2400      	movs	r4, #0
 8002a26:	2200      	movs	r2, #0
 8002a28:	e7d4      	b.n	80029d4 <__aeabi_dmul+0xbc>
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	087b      	lsrs	r3, r7, #1
 8002a2e:	403a      	ands	r2, r7
 8002a30:	4313      	orrs	r3, r2
 8002a32:	4652      	mov	r2, sl
 8002a34:	07d2      	lsls	r2, r2, #31
 8002a36:	4313      	orrs	r3, r2
 8002a38:	4698      	mov	r8, r3
 8002a3a:	4653      	mov	r3, sl
 8002a3c:	085b      	lsrs	r3, r3, #1
 8002a3e:	469a      	mov	sl, r3
 8002a40:	9b03      	ldr	r3, [sp, #12]
 8002a42:	4699      	mov	r9, r3
 8002a44:	465b      	mov	r3, fp
 8002a46:	1c58      	adds	r0, r3, #1
 8002a48:	2380      	movs	r3, #128	@ 0x80
 8002a4a:	00db      	lsls	r3, r3, #3
 8002a4c:	445b      	add	r3, fp
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	dc00      	bgt.n	8002a54 <__aeabi_dmul+0x13c>
 8002a52:	e1b1      	b.n	8002db8 <__aeabi_dmul+0x4a0>
 8002a54:	4642      	mov	r2, r8
 8002a56:	0752      	lsls	r2, r2, #29
 8002a58:	d00b      	beq.n	8002a72 <__aeabi_dmul+0x15a>
 8002a5a:	220f      	movs	r2, #15
 8002a5c:	4641      	mov	r1, r8
 8002a5e:	400a      	ands	r2, r1
 8002a60:	2a04      	cmp	r2, #4
 8002a62:	d006      	beq.n	8002a72 <__aeabi_dmul+0x15a>
 8002a64:	4642      	mov	r2, r8
 8002a66:	1d11      	adds	r1, r2, #4
 8002a68:	4541      	cmp	r1, r8
 8002a6a:	4192      	sbcs	r2, r2
 8002a6c:	4688      	mov	r8, r1
 8002a6e:	4252      	negs	r2, r2
 8002a70:	4492      	add	sl, r2
 8002a72:	4652      	mov	r2, sl
 8002a74:	01d2      	lsls	r2, r2, #7
 8002a76:	d506      	bpl.n	8002a86 <__aeabi_dmul+0x16e>
 8002a78:	4652      	mov	r2, sl
 8002a7a:	4b80      	ldr	r3, [pc, #512]	@ (8002c7c <__aeabi_dmul+0x364>)
 8002a7c:	401a      	ands	r2, r3
 8002a7e:	2380      	movs	r3, #128	@ 0x80
 8002a80:	4692      	mov	sl, r2
 8002a82:	00db      	lsls	r3, r3, #3
 8002a84:	18c3      	adds	r3, r0, r3
 8002a86:	4a7e      	ldr	r2, [pc, #504]	@ (8002c80 <__aeabi_dmul+0x368>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	dd00      	ble.n	8002a8e <__aeabi_dmul+0x176>
 8002a8c:	e18f      	b.n	8002dae <__aeabi_dmul+0x496>
 8002a8e:	4642      	mov	r2, r8
 8002a90:	08d1      	lsrs	r1, r2, #3
 8002a92:	4652      	mov	r2, sl
 8002a94:	0752      	lsls	r2, r2, #29
 8002a96:	430a      	orrs	r2, r1
 8002a98:	4651      	mov	r1, sl
 8002a9a:	055b      	lsls	r3, r3, #21
 8002a9c:	024c      	lsls	r4, r1, #9
 8002a9e:	0b24      	lsrs	r4, r4, #12
 8002aa0:	0d5b      	lsrs	r3, r3, #21
 8002aa2:	e797      	b.n	80029d4 <__aeabi_dmul+0xbc>
 8002aa4:	4b73      	ldr	r3, [pc, #460]	@ (8002c74 <__aeabi_dmul+0x35c>)
 8002aa6:	4326      	orrs	r6, r4
 8002aa8:	469c      	mov	ip, r3
 8002aaa:	44e3      	add	fp, ip
 8002aac:	2e00      	cmp	r6, #0
 8002aae:	d100      	bne.n	8002ab2 <__aeabi_dmul+0x19a>
 8002ab0:	e16f      	b.n	8002d92 <__aeabi_dmul+0x47a>
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	4649      	mov	r1, r9
 8002ab6:	431d      	orrs	r5, r3
 8002ab8:	9b00      	ldr	r3, [sp, #0]
 8002aba:	4059      	eors	r1, r3
 8002abc:	b2cb      	uxtb	r3, r1
 8002abe:	9303      	str	r3, [sp, #12]
 8002ac0:	2d0a      	cmp	r5, #10
 8002ac2:	dd00      	ble.n	8002ac6 <__aeabi_dmul+0x1ae>
 8002ac4:	e133      	b.n	8002d2e <__aeabi_dmul+0x416>
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	40ab      	lsls	r3, r5
 8002aca:	001d      	movs	r5, r3
 8002acc:	2303      	movs	r3, #3
 8002ace:	9302      	str	r3, [sp, #8]
 8002ad0:	2288      	movs	r2, #136	@ 0x88
 8002ad2:	422a      	tst	r2, r5
 8002ad4:	d197      	bne.n	8002a06 <__aeabi_dmul+0xee>
 8002ad6:	4642      	mov	r2, r8
 8002ad8:	4643      	mov	r3, r8
 8002ada:	0412      	lsls	r2, r2, #16
 8002adc:	0c12      	lsrs	r2, r2, #16
 8002ade:	0016      	movs	r6, r2
 8002ae0:	9801      	ldr	r0, [sp, #4]
 8002ae2:	0c1d      	lsrs	r5, r3, #16
 8002ae4:	0c03      	lsrs	r3, r0, #16
 8002ae6:	0400      	lsls	r0, r0, #16
 8002ae8:	0c00      	lsrs	r0, r0, #16
 8002aea:	4346      	muls	r6, r0
 8002aec:	46b4      	mov	ip, r6
 8002aee:	001e      	movs	r6, r3
 8002af0:	436e      	muls	r6, r5
 8002af2:	9600      	str	r6, [sp, #0]
 8002af4:	0016      	movs	r6, r2
 8002af6:	0007      	movs	r7, r0
 8002af8:	435e      	muls	r6, r3
 8002afa:	4661      	mov	r1, ip
 8002afc:	46b0      	mov	r8, r6
 8002afe:	436f      	muls	r7, r5
 8002b00:	0c0e      	lsrs	r6, r1, #16
 8002b02:	44b8      	add	r8, r7
 8002b04:	4446      	add	r6, r8
 8002b06:	42b7      	cmp	r7, r6
 8002b08:	d905      	bls.n	8002b16 <__aeabi_dmul+0x1fe>
 8002b0a:	2180      	movs	r1, #128	@ 0x80
 8002b0c:	0249      	lsls	r1, r1, #9
 8002b0e:	4688      	mov	r8, r1
 8002b10:	9f00      	ldr	r7, [sp, #0]
 8002b12:	4447      	add	r7, r8
 8002b14:	9700      	str	r7, [sp, #0]
 8002b16:	4661      	mov	r1, ip
 8002b18:	0409      	lsls	r1, r1, #16
 8002b1a:	0c09      	lsrs	r1, r1, #16
 8002b1c:	0c37      	lsrs	r7, r6, #16
 8002b1e:	0436      	lsls	r6, r6, #16
 8002b20:	468c      	mov	ip, r1
 8002b22:	0031      	movs	r1, r6
 8002b24:	4461      	add	r1, ip
 8002b26:	9101      	str	r1, [sp, #4]
 8002b28:	0011      	movs	r1, r2
 8002b2a:	0c26      	lsrs	r6, r4, #16
 8002b2c:	0424      	lsls	r4, r4, #16
 8002b2e:	0c24      	lsrs	r4, r4, #16
 8002b30:	4361      	muls	r1, r4
 8002b32:	468c      	mov	ip, r1
 8002b34:	0021      	movs	r1, r4
 8002b36:	4369      	muls	r1, r5
 8002b38:	4689      	mov	r9, r1
 8002b3a:	4661      	mov	r1, ip
 8002b3c:	0c09      	lsrs	r1, r1, #16
 8002b3e:	4688      	mov	r8, r1
 8002b40:	4372      	muls	r2, r6
 8002b42:	444a      	add	r2, r9
 8002b44:	4442      	add	r2, r8
 8002b46:	4375      	muls	r5, r6
 8002b48:	4591      	cmp	r9, r2
 8002b4a:	d903      	bls.n	8002b54 <__aeabi_dmul+0x23c>
 8002b4c:	2180      	movs	r1, #128	@ 0x80
 8002b4e:	0249      	lsls	r1, r1, #9
 8002b50:	4688      	mov	r8, r1
 8002b52:	4445      	add	r5, r8
 8002b54:	0c11      	lsrs	r1, r2, #16
 8002b56:	4688      	mov	r8, r1
 8002b58:	4661      	mov	r1, ip
 8002b5a:	0409      	lsls	r1, r1, #16
 8002b5c:	0c09      	lsrs	r1, r1, #16
 8002b5e:	468c      	mov	ip, r1
 8002b60:	0412      	lsls	r2, r2, #16
 8002b62:	4462      	add	r2, ip
 8002b64:	18b9      	adds	r1, r7, r2
 8002b66:	9102      	str	r1, [sp, #8]
 8002b68:	4651      	mov	r1, sl
 8002b6a:	0c09      	lsrs	r1, r1, #16
 8002b6c:	468c      	mov	ip, r1
 8002b6e:	4651      	mov	r1, sl
 8002b70:	040f      	lsls	r7, r1, #16
 8002b72:	0c3f      	lsrs	r7, r7, #16
 8002b74:	0039      	movs	r1, r7
 8002b76:	4341      	muls	r1, r0
 8002b78:	4445      	add	r5, r8
 8002b7a:	4688      	mov	r8, r1
 8002b7c:	4661      	mov	r1, ip
 8002b7e:	4341      	muls	r1, r0
 8002b80:	468a      	mov	sl, r1
 8002b82:	4641      	mov	r1, r8
 8002b84:	4660      	mov	r0, ip
 8002b86:	0c09      	lsrs	r1, r1, #16
 8002b88:	4689      	mov	r9, r1
 8002b8a:	4358      	muls	r0, r3
 8002b8c:	437b      	muls	r3, r7
 8002b8e:	4453      	add	r3, sl
 8002b90:	444b      	add	r3, r9
 8002b92:	459a      	cmp	sl, r3
 8002b94:	d903      	bls.n	8002b9e <__aeabi_dmul+0x286>
 8002b96:	2180      	movs	r1, #128	@ 0x80
 8002b98:	0249      	lsls	r1, r1, #9
 8002b9a:	4689      	mov	r9, r1
 8002b9c:	4448      	add	r0, r9
 8002b9e:	0c19      	lsrs	r1, r3, #16
 8002ba0:	4689      	mov	r9, r1
 8002ba2:	4641      	mov	r1, r8
 8002ba4:	0409      	lsls	r1, r1, #16
 8002ba6:	0c09      	lsrs	r1, r1, #16
 8002ba8:	4688      	mov	r8, r1
 8002baa:	0039      	movs	r1, r7
 8002bac:	4361      	muls	r1, r4
 8002bae:	041b      	lsls	r3, r3, #16
 8002bb0:	4443      	add	r3, r8
 8002bb2:	4688      	mov	r8, r1
 8002bb4:	4661      	mov	r1, ip
 8002bb6:	434c      	muls	r4, r1
 8002bb8:	4371      	muls	r1, r6
 8002bba:	468c      	mov	ip, r1
 8002bbc:	4641      	mov	r1, r8
 8002bbe:	4377      	muls	r7, r6
 8002bc0:	0c0e      	lsrs	r6, r1, #16
 8002bc2:	193f      	adds	r7, r7, r4
 8002bc4:	19f6      	adds	r6, r6, r7
 8002bc6:	4448      	add	r0, r9
 8002bc8:	42b4      	cmp	r4, r6
 8002bca:	d903      	bls.n	8002bd4 <__aeabi_dmul+0x2bc>
 8002bcc:	2180      	movs	r1, #128	@ 0x80
 8002bce:	0249      	lsls	r1, r1, #9
 8002bd0:	4689      	mov	r9, r1
 8002bd2:	44cc      	add	ip, r9
 8002bd4:	9902      	ldr	r1, [sp, #8]
 8002bd6:	9f00      	ldr	r7, [sp, #0]
 8002bd8:	4689      	mov	r9, r1
 8002bda:	0431      	lsls	r1, r6, #16
 8002bdc:	444f      	add	r7, r9
 8002bde:	4689      	mov	r9, r1
 8002be0:	4641      	mov	r1, r8
 8002be2:	4297      	cmp	r7, r2
 8002be4:	4192      	sbcs	r2, r2
 8002be6:	040c      	lsls	r4, r1, #16
 8002be8:	0c24      	lsrs	r4, r4, #16
 8002bea:	444c      	add	r4, r9
 8002bec:	18ff      	adds	r7, r7, r3
 8002bee:	4252      	negs	r2, r2
 8002bf0:	1964      	adds	r4, r4, r5
 8002bf2:	18a1      	adds	r1, r4, r2
 8002bf4:	429f      	cmp	r7, r3
 8002bf6:	419b      	sbcs	r3, r3
 8002bf8:	4688      	mov	r8, r1
 8002bfa:	4682      	mov	sl, r0
 8002bfc:	425b      	negs	r3, r3
 8002bfe:	4699      	mov	r9, r3
 8002c00:	4590      	cmp	r8, r2
 8002c02:	4192      	sbcs	r2, r2
 8002c04:	42ac      	cmp	r4, r5
 8002c06:	41a4      	sbcs	r4, r4
 8002c08:	44c2      	add	sl, r8
 8002c0a:	44d1      	add	r9, sl
 8002c0c:	4252      	negs	r2, r2
 8002c0e:	4264      	negs	r4, r4
 8002c10:	4314      	orrs	r4, r2
 8002c12:	4599      	cmp	r9, r3
 8002c14:	419b      	sbcs	r3, r3
 8002c16:	4582      	cmp	sl, r0
 8002c18:	4192      	sbcs	r2, r2
 8002c1a:	425b      	negs	r3, r3
 8002c1c:	4252      	negs	r2, r2
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	464a      	mov	r2, r9
 8002c22:	0c36      	lsrs	r6, r6, #16
 8002c24:	19a4      	adds	r4, r4, r6
 8002c26:	18e3      	adds	r3, r4, r3
 8002c28:	4463      	add	r3, ip
 8002c2a:	025b      	lsls	r3, r3, #9
 8002c2c:	0dd2      	lsrs	r2, r2, #23
 8002c2e:	431a      	orrs	r2, r3
 8002c30:	9901      	ldr	r1, [sp, #4]
 8002c32:	4692      	mov	sl, r2
 8002c34:	027a      	lsls	r2, r7, #9
 8002c36:	430a      	orrs	r2, r1
 8002c38:	1e50      	subs	r0, r2, #1
 8002c3a:	4182      	sbcs	r2, r0
 8002c3c:	0dff      	lsrs	r7, r7, #23
 8002c3e:	4317      	orrs	r7, r2
 8002c40:	464a      	mov	r2, r9
 8002c42:	0252      	lsls	r2, r2, #9
 8002c44:	4317      	orrs	r7, r2
 8002c46:	46b8      	mov	r8, r7
 8002c48:	01db      	lsls	r3, r3, #7
 8002c4a:	d500      	bpl.n	8002c4e <__aeabi_dmul+0x336>
 8002c4c:	e6ed      	b.n	8002a2a <__aeabi_dmul+0x112>
 8002c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8002c84 <__aeabi_dmul+0x36c>)
 8002c50:	9a03      	ldr	r2, [sp, #12]
 8002c52:	445b      	add	r3, fp
 8002c54:	4691      	mov	r9, r2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	dc00      	bgt.n	8002c5c <__aeabi_dmul+0x344>
 8002c5a:	e0ac      	b.n	8002db6 <__aeabi_dmul+0x49e>
 8002c5c:	003a      	movs	r2, r7
 8002c5e:	0752      	lsls	r2, r2, #29
 8002c60:	d100      	bne.n	8002c64 <__aeabi_dmul+0x34c>
 8002c62:	e710      	b.n	8002a86 <__aeabi_dmul+0x16e>
 8002c64:	220f      	movs	r2, #15
 8002c66:	4658      	mov	r0, fp
 8002c68:	403a      	ands	r2, r7
 8002c6a:	2a04      	cmp	r2, #4
 8002c6c:	d000      	beq.n	8002c70 <__aeabi_dmul+0x358>
 8002c6e:	e6f9      	b.n	8002a64 <__aeabi_dmul+0x14c>
 8002c70:	e709      	b.n	8002a86 <__aeabi_dmul+0x16e>
 8002c72:	46c0      	nop			@ (mov r8, r8)
 8002c74:	000007ff 	.word	0x000007ff
 8002c78:	fffffc01 	.word	0xfffffc01
 8002c7c:	feffffff 	.word	0xfeffffff
 8002c80:	000007fe 	.word	0x000007fe
 8002c84:	000003ff 	.word	0x000003ff
 8002c88:	0022      	movs	r2, r4
 8002c8a:	4332      	orrs	r2, r6
 8002c8c:	d06f      	beq.n	8002d6e <__aeabi_dmul+0x456>
 8002c8e:	2c00      	cmp	r4, #0
 8002c90:	d100      	bne.n	8002c94 <__aeabi_dmul+0x37c>
 8002c92:	e0c2      	b.n	8002e1a <__aeabi_dmul+0x502>
 8002c94:	0020      	movs	r0, r4
 8002c96:	f000 fea9 	bl	80039ec <__clzsi2>
 8002c9a:	0002      	movs	r2, r0
 8002c9c:	0003      	movs	r3, r0
 8002c9e:	3a0b      	subs	r2, #11
 8002ca0:	201d      	movs	r0, #29
 8002ca2:	1a82      	subs	r2, r0, r2
 8002ca4:	0030      	movs	r0, r6
 8002ca6:	0019      	movs	r1, r3
 8002ca8:	40d0      	lsrs	r0, r2
 8002caa:	3908      	subs	r1, #8
 8002cac:	408c      	lsls	r4, r1
 8002cae:	0002      	movs	r2, r0
 8002cb0:	4322      	orrs	r2, r4
 8002cb2:	0034      	movs	r4, r6
 8002cb4:	408c      	lsls	r4, r1
 8002cb6:	4659      	mov	r1, fp
 8002cb8:	1acb      	subs	r3, r1, r3
 8002cba:	4986      	ldr	r1, [pc, #536]	@ (8002ed4 <__aeabi_dmul+0x5bc>)
 8002cbc:	468b      	mov	fp, r1
 8002cbe:	449b      	add	fp, r3
 8002cc0:	2d0a      	cmp	r5, #10
 8002cc2:	dd00      	ble.n	8002cc6 <__aeabi_dmul+0x3ae>
 8002cc4:	e6a4      	b.n	8002a10 <__aeabi_dmul+0xf8>
 8002cc6:	4649      	mov	r1, r9
 8002cc8:	9b00      	ldr	r3, [sp, #0]
 8002cca:	9401      	str	r4, [sp, #4]
 8002ccc:	4059      	eors	r1, r3
 8002cce:	b2cb      	uxtb	r3, r1
 8002cd0:	0014      	movs	r4, r2
 8002cd2:	2000      	movs	r0, #0
 8002cd4:	9303      	str	r3, [sp, #12]
 8002cd6:	2d02      	cmp	r5, #2
 8002cd8:	dd00      	ble.n	8002cdc <__aeabi_dmul+0x3c4>
 8002cda:	e667      	b.n	80029ac <__aeabi_dmul+0x94>
 8002cdc:	e6fb      	b.n	8002ad6 <__aeabi_dmul+0x1be>
 8002cde:	4653      	mov	r3, sl
 8002ce0:	4303      	orrs	r3, r0
 8002ce2:	4698      	mov	r8, r3
 8002ce4:	d03c      	beq.n	8002d60 <__aeabi_dmul+0x448>
 8002ce6:	4653      	mov	r3, sl
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d100      	bne.n	8002cee <__aeabi_dmul+0x3d6>
 8002cec:	e0a3      	b.n	8002e36 <__aeabi_dmul+0x51e>
 8002cee:	4650      	mov	r0, sl
 8002cf0:	f000 fe7c 	bl	80039ec <__clzsi2>
 8002cf4:	230b      	movs	r3, #11
 8002cf6:	425b      	negs	r3, r3
 8002cf8:	469c      	mov	ip, r3
 8002cfa:	0002      	movs	r2, r0
 8002cfc:	4484      	add	ip, r0
 8002cfe:	0011      	movs	r1, r2
 8002d00:	4650      	mov	r0, sl
 8002d02:	3908      	subs	r1, #8
 8002d04:	4088      	lsls	r0, r1
 8002d06:	231d      	movs	r3, #29
 8002d08:	4680      	mov	r8, r0
 8002d0a:	4660      	mov	r0, ip
 8002d0c:	1a1b      	subs	r3, r3, r0
 8002d0e:	0020      	movs	r0, r4
 8002d10:	40d8      	lsrs	r0, r3
 8002d12:	0003      	movs	r3, r0
 8002d14:	4640      	mov	r0, r8
 8002d16:	4303      	orrs	r3, r0
 8002d18:	469a      	mov	sl, r3
 8002d1a:	0023      	movs	r3, r4
 8002d1c:	408b      	lsls	r3, r1
 8002d1e:	4698      	mov	r8, r3
 8002d20:	4b6c      	ldr	r3, [pc, #432]	@ (8002ed4 <__aeabi_dmul+0x5bc>)
 8002d22:	2500      	movs	r5, #0
 8002d24:	1a9b      	subs	r3, r3, r2
 8002d26:	469b      	mov	fp, r3
 8002d28:	2300      	movs	r3, #0
 8002d2a:	9302      	str	r3, [sp, #8]
 8002d2c:	e61a      	b.n	8002964 <__aeabi_dmul+0x4c>
 8002d2e:	2d0f      	cmp	r5, #15
 8002d30:	d000      	beq.n	8002d34 <__aeabi_dmul+0x41c>
 8002d32:	e0c9      	b.n	8002ec8 <__aeabi_dmul+0x5b0>
 8002d34:	2380      	movs	r3, #128	@ 0x80
 8002d36:	4652      	mov	r2, sl
 8002d38:	031b      	lsls	r3, r3, #12
 8002d3a:	421a      	tst	r2, r3
 8002d3c:	d002      	beq.n	8002d44 <__aeabi_dmul+0x42c>
 8002d3e:	421c      	tst	r4, r3
 8002d40:	d100      	bne.n	8002d44 <__aeabi_dmul+0x42c>
 8002d42:	e092      	b.n	8002e6a <__aeabi_dmul+0x552>
 8002d44:	2480      	movs	r4, #128	@ 0x80
 8002d46:	4653      	mov	r3, sl
 8002d48:	0324      	lsls	r4, r4, #12
 8002d4a:	431c      	orrs	r4, r3
 8002d4c:	0324      	lsls	r4, r4, #12
 8002d4e:	4642      	mov	r2, r8
 8002d50:	0b24      	lsrs	r4, r4, #12
 8002d52:	e63e      	b.n	80029d2 <__aeabi_dmul+0xba>
 8002d54:	469b      	mov	fp, r3
 8002d56:	2303      	movs	r3, #3
 8002d58:	4680      	mov	r8, r0
 8002d5a:	250c      	movs	r5, #12
 8002d5c:	9302      	str	r3, [sp, #8]
 8002d5e:	e601      	b.n	8002964 <__aeabi_dmul+0x4c>
 8002d60:	2300      	movs	r3, #0
 8002d62:	469a      	mov	sl, r3
 8002d64:	469b      	mov	fp, r3
 8002d66:	3301      	adds	r3, #1
 8002d68:	2504      	movs	r5, #4
 8002d6a:	9302      	str	r3, [sp, #8]
 8002d6c:	e5fa      	b.n	8002964 <__aeabi_dmul+0x4c>
 8002d6e:	2101      	movs	r1, #1
 8002d70:	430d      	orrs	r5, r1
 8002d72:	2d0a      	cmp	r5, #10
 8002d74:	dd00      	ble.n	8002d78 <__aeabi_dmul+0x460>
 8002d76:	e64b      	b.n	8002a10 <__aeabi_dmul+0xf8>
 8002d78:	4649      	mov	r1, r9
 8002d7a:	9800      	ldr	r0, [sp, #0]
 8002d7c:	4041      	eors	r1, r0
 8002d7e:	b2c9      	uxtb	r1, r1
 8002d80:	9103      	str	r1, [sp, #12]
 8002d82:	2d02      	cmp	r5, #2
 8002d84:	dc00      	bgt.n	8002d88 <__aeabi_dmul+0x470>
 8002d86:	e096      	b.n	8002eb6 <__aeabi_dmul+0x59e>
 8002d88:	2300      	movs	r3, #0
 8002d8a:	2400      	movs	r4, #0
 8002d8c:	2001      	movs	r0, #1
 8002d8e:	9301      	str	r3, [sp, #4]
 8002d90:	e60c      	b.n	80029ac <__aeabi_dmul+0x94>
 8002d92:	4649      	mov	r1, r9
 8002d94:	2302      	movs	r3, #2
 8002d96:	9a00      	ldr	r2, [sp, #0]
 8002d98:	432b      	orrs	r3, r5
 8002d9a:	4051      	eors	r1, r2
 8002d9c:	b2ca      	uxtb	r2, r1
 8002d9e:	9203      	str	r2, [sp, #12]
 8002da0:	2b0a      	cmp	r3, #10
 8002da2:	dd00      	ble.n	8002da6 <__aeabi_dmul+0x48e>
 8002da4:	e634      	b.n	8002a10 <__aeabi_dmul+0xf8>
 8002da6:	2d00      	cmp	r5, #0
 8002da8:	d157      	bne.n	8002e5a <__aeabi_dmul+0x542>
 8002daa:	9b03      	ldr	r3, [sp, #12]
 8002dac:	4699      	mov	r9, r3
 8002dae:	2400      	movs	r4, #0
 8002db0:	2200      	movs	r2, #0
 8002db2:	4b49      	ldr	r3, [pc, #292]	@ (8002ed8 <__aeabi_dmul+0x5c0>)
 8002db4:	e60e      	b.n	80029d4 <__aeabi_dmul+0xbc>
 8002db6:	4658      	mov	r0, fp
 8002db8:	2101      	movs	r1, #1
 8002dba:	1ac9      	subs	r1, r1, r3
 8002dbc:	2938      	cmp	r1, #56	@ 0x38
 8002dbe:	dd00      	ble.n	8002dc2 <__aeabi_dmul+0x4aa>
 8002dc0:	e62f      	b.n	8002a22 <__aeabi_dmul+0x10a>
 8002dc2:	291f      	cmp	r1, #31
 8002dc4:	dd56      	ble.n	8002e74 <__aeabi_dmul+0x55c>
 8002dc6:	221f      	movs	r2, #31
 8002dc8:	4654      	mov	r4, sl
 8002dca:	4252      	negs	r2, r2
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	40dc      	lsrs	r4, r3
 8002dd0:	2920      	cmp	r1, #32
 8002dd2:	d007      	beq.n	8002de4 <__aeabi_dmul+0x4cc>
 8002dd4:	4b41      	ldr	r3, [pc, #260]	@ (8002edc <__aeabi_dmul+0x5c4>)
 8002dd6:	4642      	mov	r2, r8
 8002dd8:	469c      	mov	ip, r3
 8002dda:	4653      	mov	r3, sl
 8002ddc:	4460      	add	r0, ip
 8002dde:	4083      	lsls	r3, r0
 8002de0:	431a      	orrs	r2, r3
 8002de2:	4690      	mov	r8, r2
 8002de4:	4642      	mov	r2, r8
 8002de6:	2107      	movs	r1, #7
 8002de8:	1e53      	subs	r3, r2, #1
 8002dea:	419a      	sbcs	r2, r3
 8002dec:	000b      	movs	r3, r1
 8002dee:	4322      	orrs	r2, r4
 8002df0:	4013      	ands	r3, r2
 8002df2:	2400      	movs	r4, #0
 8002df4:	4211      	tst	r1, r2
 8002df6:	d009      	beq.n	8002e0c <__aeabi_dmul+0x4f4>
 8002df8:	230f      	movs	r3, #15
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	2b04      	cmp	r3, #4
 8002dfe:	d05d      	beq.n	8002ebc <__aeabi_dmul+0x5a4>
 8002e00:	1d11      	adds	r1, r2, #4
 8002e02:	4291      	cmp	r1, r2
 8002e04:	419b      	sbcs	r3, r3
 8002e06:	000a      	movs	r2, r1
 8002e08:	425b      	negs	r3, r3
 8002e0a:	075b      	lsls	r3, r3, #29
 8002e0c:	08d2      	lsrs	r2, r2, #3
 8002e0e:	431a      	orrs	r2, r3
 8002e10:	2300      	movs	r3, #0
 8002e12:	e5df      	b.n	80029d4 <__aeabi_dmul+0xbc>
 8002e14:	9b03      	ldr	r3, [sp, #12]
 8002e16:	4699      	mov	r9, r3
 8002e18:	e5fa      	b.n	8002a10 <__aeabi_dmul+0xf8>
 8002e1a:	9801      	ldr	r0, [sp, #4]
 8002e1c:	f000 fde6 	bl	80039ec <__clzsi2>
 8002e20:	0002      	movs	r2, r0
 8002e22:	0003      	movs	r3, r0
 8002e24:	3215      	adds	r2, #21
 8002e26:	3320      	adds	r3, #32
 8002e28:	2a1c      	cmp	r2, #28
 8002e2a:	dc00      	bgt.n	8002e2e <__aeabi_dmul+0x516>
 8002e2c:	e738      	b.n	8002ca0 <__aeabi_dmul+0x388>
 8002e2e:	9a01      	ldr	r2, [sp, #4]
 8002e30:	3808      	subs	r0, #8
 8002e32:	4082      	lsls	r2, r0
 8002e34:	e73f      	b.n	8002cb6 <__aeabi_dmul+0x39e>
 8002e36:	f000 fdd9 	bl	80039ec <__clzsi2>
 8002e3a:	2315      	movs	r3, #21
 8002e3c:	469c      	mov	ip, r3
 8002e3e:	4484      	add	ip, r0
 8002e40:	0002      	movs	r2, r0
 8002e42:	4663      	mov	r3, ip
 8002e44:	3220      	adds	r2, #32
 8002e46:	2b1c      	cmp	r3, #28
 8002e48:	dc00      	bgt.n	8002e4c <__aeabi_dmul+0x534>
 8002e4a:	e758      	b.n	8002cfe <__aeabi_dmul+0x3e6>
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	4698      	mov	r8, r3
 8002e50:	0023      	movs	r3, r4
 8002e52:	3808      	subs	r0, #8
 8002e54:	4083      	lsls	r3, r0
 8002e56:	469a      	mov	sl, r3
 8002e58:	e762      	b.n	8002d20 <__aeabi_dmul+0x408>
 8002e5a:	001d      	movs	r5, r3
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	2400      	movs	r4, #0
 8002e60:	2002      	movs	r0, #2
 8002e62:	9301      	str	r3, [sp, #4]
 8002e64:	e5a2      	b.n	80029ac <__aeabi_dmul+0x94>
 8002e66:	9002      	str	r0, [sp, #8]
 8002e68:	e632      	b.n	8002ad0 <__aeabi_dmul+0x1b8>
 8002e6a:	431c      	orrs	r4, r3
 8002e6c:	9b00      	ldr	r3, [sp, #0]
 8002e6e:	9a01      	ldr	r2, [sp, #4]
 8002e70:	4699      	mov	r9, r3
 8002e72:	e5ae      	b.n	80029d2 <__aeabi_dmul+0xba>
 8002e74:	4b1a      	ldr	r3, [pc, #104]	@ (8002ee0 <__aeabi_dmul+0x5c8>)
 8002e76:	4652      	mov	r2, sl
 8002e78:	18c3      	adds	r3, r0, r3
 8002e7a:	4640      	mov	r0, r8
 8002e7c:	409a      	lsls	r2, r3
 8002e7e:	40c8      	lsrs	r0, r1
 8002e80:	4302      	orrs	r2, r0
 8002e82:	4640      	mov	r0, r8
 8002e84:	4098      	lsls	r0, r3
 8002e86:	0003      	movs	r3, r0
 8002e88:	1e58      	subs	r0, r3, #1
 8002e8a:	4183      	sbcs	r3, r0
 8002e8c:	4654      	mov	r4, sl
 8002e8e:	431a      	orrs	r2, r3
 8002e90:	40cc      	lsrs	r4, r1
 8002e92:	0753      	lsls	r3, r2, #29
 8002e94:	d009      	beq.n	8002eaa <__aeabi_dmul+0x592>
 8002e96:	230f      	movs	r3, #15
 8002e98:	4013      	ands	r3, r2
 8002e9a:	2b04      	cmp	r3, #4
 8002e9c:	d005      	beq.n	8002eaa <__aeabi_dmul+0x592>
 8002e9e:	1d13      	adds	r3, r2, #4
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	4192      	sbcs	r2, r2
 8002ea4:	4252      	negs	r2, r2
 8002ea6:	18a4      	adds	r4, r4, r2
 8002ea8:	001a      	movs	r2, r3
 8002eaa:	0223      	lsls	r3, r4, #8
 8002eac:	d508      	bpl.n	8002ec0 <__aeabi_dmul+0x5a8>
 8002eae:	2301      	movs	r3, #1
 8002eb0:	2400      	movs	r4, #0
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	e58e      	b.n	80029d4 <__aeabi_dmul+0xbc>
 8002eb6:	4689      	mov	r9, r1
 8002eb8:	2400      	movs	r4, #0
 8002eba:	e58b      	b.n	80029d4 <__aeabi_dmul+0xbc>
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	e7a5      	b.n	8002e0c <__aeabi_dmul+0x4f4>
 8002ec0:	0763      	lsls	r3, r4, #29
 8002ec2:	0264      	lsls	r4, r4, #9
 8002ec4:	0b24      	lsrs	r4, r4, #12
 8002ec6:	e7a1      	b.n	8002e0c <__aeabi_dmul+0x4f4>
 8002ec8:	9b00      	ldr	r3, [sp, #0]
 8002eca:	46a2      	mov	sl, r4
 8002ecc:	4699      	mov	r9, r3
 8002ece:	9b01      	ldr	r3, [sp, #4]
 8002ed0:	4698      	mov	r8, r3
 8002ed2:	e737      	b.n	8002d44 <__aeabi_dmul+0x42c>
 8002ed4:	fffffc0d 	.word	0xfffffc0d
 8002ed8:	000007ff 	.word	0x000007ff
 8002edc:	0000043e 	.word	0x0000043e
 8002ee0:	0000041e 	.word	0x0000041e

08002ee4 <__aeabi_dsub>:
 8002ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ee6:	4657      	mov	r7, sl
 8002ee8:	464e      	mov	r6, r9
 8002eea:	4645      	mov	r5, r8
 8002eec:	46de      	mov	lr, fp
 8002eee:	b5e0      	push	{r5, r6, r7, lr}
 8002ef0:	b083      	sub	sp, #12
 8002ef2:	9000      	str	r0, [sp, #0]
 8002ef4:	9101      	str	r1, [sp, #4]
 8002ef6:	030c      	lsls	r4, r1, #12
 8002ef8:	004d      	lsls	r5, r1, #1
 8002efa:	0fce      	lsrs	r6, r1, #31
 8002efc:	0a61      	lsrs	r1, r4, #9
 8002efe:	9c00      	ldr	r4, [sp, #0]
 8002f00:	005f      	lsls	r7, r3, #1
 8002f02:	0f64      	lsrs	r4, r4, #29
 8002f04:	430c      	orrs	r4, r1
 8002f06:	9900      	ldr	r1, [sp, #0]
 8002f08:	9200      	str	r2, [sp, #0]
 8002f0a:	9301      	str	r3, [sp, #4]
 8002f0c:	00c8      	lsls	r0, r1, #3
 8002f0e:	0319      	lsls	r1, r3, #12
 8002f10:	0d7b      	lsrs	r3, r7, #21
 8002f12:	4699      	mov	r9, r3
 8002f14:	9b01      	ldr	r3, [sp, #4]
 8002f16:	4fcc      	ldr	r7, [pc, #816]	@ (8003248 <__aeabi_dsub+0x364>)
 8002f18:	0fdb      	lsrs	r3, r3, #31
 8002f1a:	469c      	mov	ip, r3
 8002f1c:	0a4b      	lsrs	r3, r1, #9
 8002f1e:	9900      	ldr	r1, [sp, #0]
 8002f20:	4680      	mov	r8, r0
 8002f22:	0f49      	lsrs	r1, r1, #29
 8002f24:	4319      	orrs	r1, r3
 8002f26:	9b00      	ldr	r3, [sp, #0]
 8002f28:	468b      	mov	fp, r1
 8002f2a:	00da      	lsls	r2, r3, #3
 8002f2c:	4692      	mov	sl, r2
 8002f2e:	0d6d      	lsrs	r5, r5, #21
 8002f30:	45b9      	cmp	r9, r7
 8002f32:	d100      	bne.n	8002f36 <__aeabi_dsub+0x52>
 8002f34:	e0bf      	b.n	80030b6 <__aeabi_dsub+0x1d2>
 8002f36:	2301      	movs	r3, #1
 8002f38:	4661      	mov	r1, ip
 8002f3a:	4059      	eors	r1, r3
 8002f3c:	464b      	mov	r3, r9
 8002f3e:	468c      	mov	ip, r1
 8002f40:	1aeb      	subs	r3, r5, r3
 8002f42:	428e      	cmp	r6, r1
 8002f44:	d075      	beq.n	8003032 <__aeabi_dsub+0x14e>
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	dc00      	bgt.n	8002f4c <__aeabi_dsub+0x68>
 8002f4a:	e2a3      	b.n	8003494 <__aeabi_dsub+0x5b0>
 8002f4c:	4649      	mov	r1, r9
 8002f4e:	2900      	cmp	r1, #0
 8002f50:	d100      	bne.n	8002f54 <__aeabi_dsub+0x70>
 8002f52:	e0ce      	b.n	80030f2 <__aeabi_dsub+0x20e>
 8002f54:	42bd      	cmp	r5, r7
 8002f56:	d100      	bne.n	8002f5a <__aeabi_dsub+0x76>
 8002f58:	e200      	b.n	800335c <__aeabi_dsub+0x478>
 8002f5a:	2701      	movs	r7, #1
 8002f5c:	2b38      	cmp	r3, #56	@ 0x38
 8002f5e:	dc19      	bgt.n	8002f94 <__aeabi_dsub+0xb0>
 8002f60:	2780      	movs	r7, #128	@ 0x80
 8002f62:	4659      	mov	r1, fp
 8002f64:	043f      	lsls	r7, r7, #16
 8002f66:	4339      	orrs	r1, r7
 8002f68:	468b      	mov	fp, r1
 8002f6a:	2b1f      	cmp	r3, #31
 8002f6c:	dd00      	ble.n	8002f70 <__aeabi_dsub+0x8c>
 8002f6e:	e1fa      	b.n	8003366 <__aeabi_dsub+0x482>
 8002f70:	2720      	movs	r7, #32
 8002f72:	1af9      	subs	r1, r7, r3
 8002f74:	468c      	mov	ip, r1
 8002f76:	4659      	mov	r1, fp
 8002f78:	4667      	mov	r7, ip
 8002f7a:	40b9      	lsls	r1, r7
 8002f7c:	000f      	movs	r7, r1
 8002f7e:	0011      	movs	r1, r2
 8002f80:	40d9      	lsrs	r1, r3
 8002f82:	430f      	orrs	r7, r1
 8002f84:	4661      	mov	r1, ip
 8002f86:	408a      	lsls	r2, r1
 8002f88:	1e51      	subs	r1, r2, #1
 8002f8a:	418a      	sbcs	r2, r1
 8002f8c:	4659      	mov	r1, fp
 8002f8e:	40d9      	lsrs	r1, r3
 8002f90:	4317      	orrs	r7, r2
 8002f92:	1a64      	subs	r4, r4, r1
 8002f94:	1bc7      	subs	r7, r0, r7
 8002f96:	42b8      	cmp	r0, r7
 8002f98:	4180      	sbcs	r0, r0
 8002f9a:	4240      	negs	r0, r0
 8002f9c:	1a24      	subs	r4, r4, r0
 8002f9e:	0223      	lsls	r3, r4, #8
 8002fa0:	d400      	bmi.n	8002fa4 <__aeabi_dsub+0xc0>
 8002fa2:	e140      	b.n	8003226 <__aeabi_dsub+0x342>
 8002fa4:	0264      	lsls	r4, r4, #9
 8002fa6:	0a64      	lsrs	r4, r4, #9
 8002fa8:	2c00      	cmp	r4, #0
 8002faa:	d100      	bne.n	8002fae <__aeabi_dsub+0xca>
 8002fac:	e154      	b.n	8003258 <__aeabi_dsub+0x374>
 8002fae:	0020      	movs	r0, r4
 8002fb0:	f000 fd1c 	bl	80039ec <__clzsi2>
 8002fb4:	0003      	movs	r3, r0
 8002fb6:	3b08      	subs	r3, #8
 8002fb8:	2120      	movs	r1, #32
 8002fba:	0038      	movs	r0, r7
 8002fbc:	1aca      	subs	r2, r1, r3
 8002fbe:	40d0      	lsrs	r0, r2
 8002fc0:	409c      	lsls	r4, r3
 8002fc2:	0002      	movs	r2, r0
 8002fc4:	409f      	lsls	r7, r3
 8002fc6:	4322      	orrs	r2, r4
 8002fc8:	429d      	cmp	r5, r3
 8002fca:	dd00      	ble.n	8002fce <__aeabi_dsub+0xea>
 8002fcc:	e1a6      	b.n	800331c <__aeabi_dsub+0x438>
 8002fce:	1b58      	subs	r0, r3, r5
 8002fd0:	3001      	adds	r0, #1
 8002fd2:	1a09      	subs	r1, r1, r0
 8002fd4:	003c      	movs	r4, r7
 8002fd6:	408f      	lsls	r7, r1
 8002fd8:	40c4      	lsrs	r4, r0
 8002fda:	1e7b      	subs	r3, r7, #1
 8002fdc:	419f      	sbcs	r7, r3
 8002fde:	0013      	movs	r3, r2
 8002fe0:	408b      	lsls	r3, r1
 8002fe2:	4327      	orrs	r7, r4
 8002fe4:	431f      	orrs	r7, r3
 8002fe6:	40c2      	lsrs	r2, r0
 8002fe8:	003b      	movs	r3, r7
 8002fea:	0014      	movs	r4, r2
 8002fec:	2500      	movs	r5, #0
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	d100      	bne.n	8002ff4 <__aeabi_dsub+0x110>
 8002ff2:	e1f7      	b.n	80033e4 <__aeabi_dsub+0x500>
 8002ff4:	077b      	lsls	r3, r7, #29
 8002ff6:	d100      	bne.n	8002ffa <__aeabi_dsub+0x116>
 8002ff8:	e377      	b.n	80036ea <__aeabi_dsub+0x806>
 8002ffa:	230f      	movs	r3, #15
 8002ffc:	0038      	movs	r0, r7
 8002ffe:	403b      	ands	r3, r7
 8003000:	2b04      	cmp	r3, #4
 8003002:	d004      	beq.n	800300e <__aeabi_dsub+0x12a>
 8003004:	1d38      	adds	r0, r7, #4
 8003006:	42b8      	cmp	r0, r7
 8003008:	41bf      	sbcs	r7, r7
 800300a:	427f      	negs	r7, r7
 800300c:	19e4      	adds	r4, r4, r7
 800300e:	0223      	lsls	r3, r4, #8
 8003010:	d400      	bmi.n	8003014 <__aeabi_dsub+0x130>
 8003012:	e368      	b.n	80036e6 <__aeabi_dsub+0x802>
 8003014:	4b8c      	ldr	r3, [pc, #560]	@ (8003248 <__aeabi_dsub+0x364>)
 8003016:	3501      	adds	r5, #1
 8003018:	429d      	cmp	r5, r3
 800301a:	d100      	bne.n	800301e <__aeabi_dsub+0x13a>
 800301c:	e0f4      	b.n	8003208 <__aeabi_dsub+0x324>
 800301e:	4b8b      	ldr	r3, [pc, #556]	@ (800324c <__aeabi_dsub+0x368>)
 8003020:	056d      	lsls	r5, r5, #21
 8003022:	401c      	ands	r4, r3
 8003024:	0d6d      	lsrs	r5, r5, #21
 8003026:	0767      	lsls	r7, r4, #29
 8003028:	08c0      	lsrs	r0, r0, #3
 800302a:	0264      	lsls	r4, r4, #9
 800302c:	4307      	orrs	r7, r0
 800302e:	0b24      	lsrs	r4, r4, #12
 8003030:	e0ec      	b.n	800320c <__aeabi_dsub+0x328>
 8003032:	2b00      	cmp	r3, #0
 8003034:	dc00      	bgt.n	8003038 <__aeabi_dsub+0x154>
 8003036:	e329      	b.n	800368c <__aeabi_dsub+0x7a8>
 8003038:	4649      	mov	r1, r9
 800303a:	2900      	cmp	r1, #0
 800303c:	d000      	beq.n	8003040 <__aeabi_dsub+0x15c>
 800303e:	e0d6      	b.n	80031ee <__aeabi_dsub+0x30a>
 8003040:	4659      	mov	r1, fp
 8003042:	4311      	orrs	r1, r2
 8003044:	d100      	bne.n	8003048 <__aeabi_dsub+0x164>
 8003046:	e12e      	b.n	80032a6 <__aeabi_dsub+0x3c2>
 8003048:	1e59      	subs	r1, r3, #1
 800304a:	2b01      	cmp	r3, #1
 800304c:	d100      	bne.n	8003050 <__aeabi_dsub+0x16c>
 800304e:	e1e6      	b.n	800341e <__aeabi_dsub+0x53a>
 8003050:	42bb      	cmp	r3, r7
 8003052:	d100      	bne.n	8003056 <__aeabi_dsub+0x172>
 8003054:	e182      	b.n	800335c <__aeabi_dsub+0x478>
 8003056:	2701      	movs	r7, #1
 8003058:	000b      	movs	r3, r1
 800305a:	2938      	cmp	r1, #56	@ 0x38
 800305c:	dc14      	bgt.n	8003088 <__aeabi_dsub+0x1a4>
 800305e:	2b1f      	cmp	r3, #31
 8003060:	dd00      	ble.n	8003064 <__aeabi_dsub+0x180>
 8003062:	e23c      	b.n	80034de <__aeabi_dsub+0x5fa>
 8003064:	2720      	movs	r7, #32
 8003066:	1af9      	subs	r1, r7, r3
 8003068:	468c      	mov	ip, r1
 800306a:	4659      	mov	r1, fp
 800306c:	4667      	mov	r7, ip
 800306e:	40b9      	lsls	r1, r7
 8003070:	000f      	movs	r7, r1
 8003072:	0011      	movs	r1, r2
 8003074:	40d9      	lsrs	r1, r3
 8003076:	430f      	orrs	r7, r1
 8003078:	4661      	mov	r1, ip
 800307a:	408a      	lsls	r2, r1
 800307c:	1e51      	subs	r1, r2, #1
 800307e:	418a      	sbcs	r2, r1
 8003080:	4659      	mov	r1, fp
 8003082:	40d9      	lsrs	r1, r3
 8003084:	4317      	orrs	r7, r2
 8003086:	1864      	adds	r4, r4, r1
 8003088:	183f      	adds	r7, r7, r0
 800308a:	4287      	cmp	r7, r0
 800308c:	4180      	sbcs	r0, r0
 800308e:	4240      	negs	r0, r0
 8003090:	1824      	adds	r4, r4, r0
 8003092:	0223      	lsls	r3, r4, #8
 8003094:	d400      	bmi.n	8003098 <__aeabi_dsub+0x1b4>
 8003096:	e0c6      	b.n	8003226 <__aeabi_dsub+0x342>
 8003098:	4b6b      	ldr	r3, [pc, #428]	@ (8003248 <__aeabi_dsub+0x364>)
 800309a:	3501      	adds	r5, #1
 800309c:	429d      	cmp	r5, r3
 800309e:	d100      	bne.n	80030a2 <__aeabi_dsub+0x1be>
 80030a0:	e0b2      	b.n	8003208 <__aeabi_dsub+0x324>
 80030a2:	2101      	movs	r1, #1
 80030a4:	4b69      	ldr	r3, [pc, #420]	@ (800324c <__aeabi_dsub+0x368>)
 80030a6:	087a      	lsrs	r2, r7, #1
 80030a8:	401c      	ands	r4, r3
 80030aa:	4039      	ands	r1, r7
 80030ac:	430a      	orrs	r2, r1
 80030ae:	07e7      	lsls	r7, r4, #31
 80030b0:	4317      	orrs	r7, r2
 80030b2:	0864      	lsrs	r4, r4, #1
 80030b4:	e79e      	b.n	8002ff4 <__aeabi_dsub+0x110>
 80030b6:	4b66      	ldr	r3, [pc, #408]	@ (8003250 <__aeabi_dsub+0x36c>)
 80030b8:	4311      	orrs	r1, r2
 80030ba:	468a      	mov	sl, r1
 80030bc:	18eb      	adds	r3, r5, r3
 80030be:	2900      	cmp	r1, #0
 80030c0:	d028      	beq.n	8003114 <__aeabi_dsub+0x230>
 80030c2:	4566      	cmp	r6, ip
 80030c4:	d02c      	beq.n	8003120 <__aeabi_dsub+0x23c>
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d05b      	beq.n	8003182 <__aeabi_dsub+0x29e>
 80030ca:	2d00      	cmp	r5, #0
 80030cc:	d100      	bne.n	80030d0 <__aeabi_dsub+0x1ec>
 80030ce:	e12c      	b.n	800332a <__aeabi_dsub+0x446>
 80030d0:	465b      	mov	r3, fp
 80030d2:	4666      	mov	r6, ip
 80030d4:	075f      	lsls	r7, r3, #29
 80030d6:	08d2      	lsrs	r2, r2, #3
 80030d8:	4317      	orrs	r7, r2
 80030da:	08dd      	lsrs	r5, r3, #3
 80030dc:	003b      	movs	r3, r7
 80030de:	432b      	orrs	r3, r5
 80030e0:	d100      	bne.n	80030e4 <__aeabi_dsub+0x200>
 80030e2:	e0e2      	b.n	80032aa <__aeabi_dsub+0x3c6>
 80030e4:	2480      	movs	r4, #128	@ 0x80
 80030e6:	0324      	lsls	r4, r4, #12
 80030e8:	432c      	orrs	r4, r5
 80030ea:	0324      	lsls	r4, r4, #12
 80030ec:	4d56      	ldr	r5, [pc, #344]	@ (8003248 <__aeabi_dsub+0x364>)
 80030ee:	0b24      	lsrs	r4, r4, #12
 80030f0:	e08c      	b.n	800320c <__aeabi_dsub+0x328>
 80030f2:	4659      	mov	r1, fp
 80030f4:	4311      	orrs	r1, r2
 80030f6:	d100      	bne.n	80030fa <__aeabi_dsub+0x216>
 80030f8:	e0d5      	b.n	80032a6 <__aeabi_dsub+0x3c2>
 80030fa:	1e59      	subs	r1, r3, #1
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d100      	bne.n	8003102 <__aeabi_dsub+0x21e>
 8003100:	e1b9      	b.n	8003476 <__aeabi_dsub+0x592>
 8003102:	42bb      	cmp	r3, r7
 8003104:	d100      	bne.n	8003108 <__aeabi_dsub+0x224>
 8003106:	e1b1      	b.n	800346c <__aeabi_dsub+0x588>
 8003108:	2701      	movs	r7, #1
 800310a:	000b      	movs	r3, r1
 800310c:	2938      	cmp	r1, #56	@ 0x38
 800310e:	dd00      	ble.n	8003112 <__aeabi_dsub+0x22e>
 8003110:	e740      	b.n	8002f94 <__aeabi_dsub+0xb0>
 8003112:	e72a      	b.n	8002f6a <__aeabi_dsub+0x86>
 8003114:	4661      	mov	r1, ip
 8003116:	2701      	movs	r7, #1
 8003118:	4079      	eors	r1, r7
 800311a:	468c      	mov	ip, r1
 800311c:	4566      	cmp	r6, ip
 800311e:	d1d2      	bne.n	80030c6 <__aeabi_dsub+0x1e2>
 8003120:	2b00      	cmp	r3, #0
 8003122:	d100      	bne.n	8003126 <__aeabi_dsub+0x242>
 8003124:	e0c5      	b.n	80032b2 <__aeabi_dsub+0x3ce>
 8003126:	2d00      	cmp	r5, #0
 8003128:	d000      	beq.n	800312c <__aeabi_dsub+0x248>
 800312a:	e155      	b.n	80033d8 <__aeabi_dsub+0x4f4>
 800312c:	464b      	mov	r3, r9
 800312e:	0025      	movs	r5, r4
 8003130:	4305      	orrs	r5, r0
 8003132:	d100      	bne.n	8003136 <__aeabi_dsub+0x252>
 8003134:	e212      	b.n	800355c <__aeabi_dsub+0x678>
 8003136:	1e59      	subs	r1, r3, #1
 8003138:	468c      	mov	ip, r1
 800313a:	2b01      	cmp	r3, #1
 800313c:	d100      	bne.n	8003140 <__aeabi_dsub+0x25c>
 800313e:	e249      	b.n	80035d4 <__aeabi_dsub+0x6f0>
 8003140:	4d41      	ldr	r5, [pc, #260]	@ (8003248 <__aeabi_dsub+0x364>)
 8003142:	42ab      	cmp	r3, r5
 8003144:	d100      	bne.n	8003148 <__aeabi_dsub+0x264>
 8003146:	e28f      	b.n	8003668 <__aeabi_dsub+0x784>
 8003148:	2701      	movs	r7, #1
 800314a:	2938      	cmp	r1, #56	@ 0x38
 800314c:	dc11      	bgt.n	8003172 <__aeabi_dsub+0x28e>
 800314e:	4663      	mov	r3, ip
 8003150:	2b1f      	cmp	r3, #31
 8003152:	dd00      	ble.n	8003156 <__aeabi_dsub+0x272>
 8003154:	e25b      	b.n	800360e <__aeabi_dsub+0x72a>
 8003156:	4661      	mov	r1, ip
 8003158:	2320      	movs	r3, #32
 800315a:	0027      	movs	r7, r4
 800315c:	1a5b      	subs	r3, r3, r1
 800315e:	0005      	movs	r5, r0
 8003160:	4098      	lsls	r0, r3
 8003162:	409f      	lsls	r7, r3
 8003164:	40cd      	lsrs	r5, r1
 8003166:	1e43      	subs	r3, r0, #1
 8003168:	4198      	sbcs	r0, r3
 800316a:	40cc      	lsrs	r4, r1
 800316c:	432f      	orrs	r7, r5
 800316e:	4307      	orrs	r7, r0
 8003170:	44a3      	add	fp, r4
 8003172:	18bf      	adds	r7, r7, r2
 8003174:	4297      	cmp	r7, r2
 8003176:	4192      	sbcs	r2, r2
 8003178:	4252      	negs	r2, r2
 800317a:	445a      	add	r2, fp
 800317c:	0014      	movs	r4, r2
 800317e:	464d      	mov	r5, r9
 8003180:	e787      	b.n	8003092 <__aeabi_dsub+0x1ae>
 8003182:	4f34      	ldr	r7, [pc, #208]	@ (8003254 <__aeabi_dsub+0x370>)
 8003184:	1c6b      	adds	r3, r5, #1
 8003186:	423b      	tst	r3, r7
 8003188:	d000      	beq.n	800318c <__aeabi_dsub+0x2a8>
 800318a:	e0b6      	b.n	80032fa <__aeabi_dsub+0x416>
 800318c:	4659      	mov	r1, fp
 800318e:	0023      	movs	r3, r4
 8003190:	4311      	orrs	r1, r2
 8003192:	000f      	movs	r7, r1
 8003194:	4303      	orrs	r3, r0
 8003196:	2d00      	cmp	r5, #0
 8003198:	d000      	beq.n	800319c <__aeabi_dsub+0x2b8>
 800319a:	e126      	b.n	80033ea <__aeabi_dsub+0x506>
 800319c:	2b00      	cmp	r3, #0
 800319e:	d100      	bne.n	80031a2 <__aeabi_dsub+0x2be>
 80031a0:	e1c0      	b.n	8003524 <__aeabi_dsub+0x640>
 80031a2:	2900      	cmp	r1, #0
 80031a4:	d100      	bne.n	80031a8 <__aeabi_dsub+0x2c4>
 80031a6:	e0a1      	b.n	80032ec <__aeabi_dsub+0x408>
 80031a8:	1a83      	subs	r3, r0, r2
 80031aa:	4698      	mov	r8, r3
 80031ac:	465b      	mov	r3, fp
 80031ae:	4540      	cmp	r0, r8
 80031b0:	41ad      	sbcs	r5, r5
 80031b2:	1ae3      	subs	r3, r4, r3
 80031b4:	426d      	negs	r5, r5
 80031b6:	1b5b      	subs	r3, r3, r5
 80031b8:	2580      	movs	r5, #128	@ 0x80
 80031ba:	042d      	lsls	r5, r5, #16
 80031bc:	422b      	tst	r3, r5
 80031be:	d100      	bne.n	80031c2 <__aeabi_dsub+0x2de>
 80031c0:	e14b      	b.n	800345a <__aeabi_dsub+0x576>
 80031c2:	465b      	mov	r3, fp
 80031c4:	1a10      	subs	r0, r2, r0
 80031c6:	4282      	cmp	r2, r0
 80031c8:	4192      	sbcs	r2, r2
 80031ca:	1b1c      	subs	r4, r3, r4
 80031cc:	0007      	movs	r7, r0
 80031ce:	2601      	movs	r6, #1
 80031d0:	4663      	mov	r3, ip
 80031d2:	4252      	negs	r2, r2
 80031d4:	1aa4      	subs	r4, r4, r2
 80031d6:	4327      	orrs	r7, r4
 80031d8:	401e      	ands	r6, r3
 80031da:	2f00      	cmp	r7, #0
 80031dc:	d100      	bne.n	80031e0 <__aeabi_dsub+0x2fc>
 80031de:	e142      	b.n	8003466 <__aeabi_dsub+0x582>
 80031e0:	422c      	tst	r4, r5
 80031e2:	d100      	bne.n	80031e6 <__aeabi_dsub+0x302>
 80031e4:	e26d      	b.n	80036c2 <__aeabi_dsub+0x7de>
 80031e6:	4b19      	ldr	r3, [pc, #100]	@ (800324c <__aeabi_dsub+0x368>)
 80031e8:	2501      	movs	r5, #1
 80031ea:	401c      	ands	r4, r3
 80031ec:	e71b      	b.n	8003026 <__aeabi_dsub+0x142>
 80031ee:	42bd      	cmp	r5, r7
 80031f0:	d100      	bne.n	80031f4 <__aeabi_dsub+0x310>
 80031f2:	e13b      	b.n	800346c <__aeabi_dsub+0x588>
 80031f4:	2701      	movs	r7, #1
 80031f6:	2b38      	cmp	r3, #56	@ 0x38
 80031f8:	dd00      	ble.n	80031fc <__aeabi_dsub+0x318>
 80031fa:	e745      	b.n	8003088 <__aeabi_dsub+0x1a4>
 80031fc:	2780      	movs	r7, #128	@ 0x80
 80031fe:	4659      	mov	r1, fp
 8003200:	043f      	lsls	r7, r7, #16
 8003202:	4339      	orrs	r1, r7
 8003204:	468b      	mov	fp, r1
 8003206:	e72a      	b.n	800305e <__aeabi_dsub+0x17a>
 8003208:	2400      	movs	r4, #0
 800320a:	2700      	movs	r7, #0
 800320c:	052d      	lsls	r5, r5, #20
 800320e:	4325      	orrs	r5, r4
 8003210:	07f6      	lsls	r6, r6, #31
 8003212:	4335      	orrs	r5, r6
 8003214:	0038      	movs	r0, r7
 8003216:	0029      	movs	r1, r5
 8003218:	b003      	add	sp, #12
 800321a:	bcf0      	pop	{r4, r5, r6, r7}
 800321c:	46bb      	mov	fp, r7
 800321e:	46b2      	mov	sl, r6
 8003220:	46a9      	mov	r9, r5
 8003222:	46a0      	mov	r8, r4
 8003224:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003226:	077b      	lsls	r3, r7, #29
 8003228:	d004      	beq.n	8003234 <__aeabi_dsub+0x350>
 800322a:	230f      	movs	r3, #15
 800322c:	403b      	ands	r3, r7
 800322e:	2b04      	cmp	r3, #4
 8003230:	d000      	beq.n	8003234 <__aeabi_dsub+0x350>
 8003232:	e6e7      	b.n	8003004 <__aeabi_dsub+0x120>
 8003234:	002b      	movs	r3, r5
 8003236:	08f8      	lsrs	r0, r7, #3
 8003238:	4a03      	ldr	r2, [pc, #12]	@ (8003248 <__aeabi_dsub+0x364>)
 800323a:	0767      	lsls	r7, r4, #29
 800323c:	4307      	orrs	r7, r0
 800323e:	08e5      	lsrs	r5, r4, #3
 8003240:	4293      	cmp	r3, r2
 8003242:	d100      	bne.n	8003246 <__aeabi_dsub+0x362>
 8003244:	e74a      	b.n	80030dc <__aeabi_dsub+0x1f8>
 8003246:	e0a5      	b.n	8003394 <__aeabi_dsub+0x4b0>
 8003248:	000007ff 	.word	0x000007ff
 800324c:	ff7fffff 	.word	0xff7fffff
 8003250:	fffff801 	.word	0xfffff801
 8003254:	000007fe 	.word	0x000007fe
 8003258:	0038      	movs	r0, r7
 800325a:	f000 fbc7 	bl	80039ec <__clzsi2>
 800325e:	0003      	movs	r3, r0
 8003260:	3318      	adds	r3, #24
 8003262:	2b1f      	cmp	r3, #31
 8003264:	dc00      	bgt.n	8003268 <__aeabi_dsub+0x384>
 8003266:	e6a7      	b.n	8002fb8 <__aeabi_dsub+0xd4>
 8003268:	003a      	movs	r2, r7
 800326a:	3808      	subs	r0, #8
 800326c:	4082      	lsls	r2, r0
 800326e:	429d      	cmp	r5, r3
 8003270:	dd00      	ble.n	8003274 <__aeabi_dsub+0x390>
 8003272:	e08a      	b.n	800338a <__aeabi_dsub+0x4a6>
 8003274:	1b5b      	subs	r3, r3, r5
 8003276:	1c58      	adds	r0, r3, #1
 8003278:	281f      	cmp	r0, #31
 800327a:	dc00      	bgt.n	800327e <__aeabi_dsub+0x39a>
 800327c:	e1d8      	b.n	8003630 <__aeabi_dsub+0x74c>
 800327e:	0017      	movs	r7, r2
 8003280:	3b1f      	subs	r3, #31
 8003282:	40df      	lsrs	r7, r3
 8003284:	2820      	cmp	r0, #32
 8003286:	d005      	beq.n	8003294 <__aeabi_dsub+0x3b0>
 8003288:	2340      	movs	r3, #64	@ 0x40
 800328a:	1a1b      	subs	r3, r3, r0
 800328c:	409a      	lsls	r2, r3
 800328e:	1e53      	subs	r3, r2, #1
 8003290:	419a      	sbcs	r2, r3
 8003292:	4317      	orrs	r7, r2
 8003294:	2500      	movs	r5, #0
 8003296:	2f00      	cmp	r7, #0
 8003298:	d100      	bne.n	800329c <__aeabi_dsub+0x3b8>
 800329a:	e0e5      	b.n	8003468 <__aeabi_dsub+0x584>
 800329c:	077b      	lsls	r3, r7, #29
 800329e:	d000      	beq.n	80032a2 <__aeabi_dsub+0x3be>
 80032a0:	e6ab      	b.n	8002ffa <__aeabi_dsub+0x116>
 80032a2:	002c      	movs	r4, r5
 80032a4:	e7c6      	b.n	8003234 <__aeabi_dsub+0x350>
 80032a6:	08c0      	lsrs	r0, r0, #3
 80032a8:	e7c6      	b.n	8003238 <__aeabi_dsub+0x354>
 80032aa:	2700      	movs	r7, #0
 80032ac:	2400      	movs	r4, #0
 80032ae:	4dd1      	ldr	r5, [pc, #836]	@ (80035f4 <__aeabi_dsub+0x710>)
 80032b0:	e7ac      	b.n	800320c <__aeabi_dsub+0x328>
 80032b2:	4fd1      	ldr	r7, [pc, #836]	@ (80035f8 <__aeabi_dsub+0x714>)
 80032b4:	1c6b      	adds	r3, r5, #1
 80032b6:	423b      	tst	r3, r7
 80032b8:	d171      	bne.n	800339e <__aeabi_dsub+0x4ba>
 80032ba:	0023      	movs	r3, r4
 80032bc:	4303      	orrs	r3, r0
 80032be:	2d00      	cmp	r5, #0
 80032c0:	d000      	beq.n	80032c4 <__aeabi_dsub+0x3e0>
 80032c2:	e14e      	b.n	8003562 <__aeabi_dsub+0x67e>
 80032c4:	4657      	mov	r7, sl
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d100      	bne.n	80032cc <__aeabi_dsub+0x3e8>
 80032ca:	e1b5      	b.n	8003638 <__aeabi_dsub+0x754>
 80032cc:	2f00      	cmp	r7, #0
 80032ce:	d00d      	beq.n	80032ec <__aeabi_dsub+0x408>
 80032d0:	1883      	adds	r3, r0, r2
 80032d2:	4283      	cmp	r3, r0
 80032d4:	4180      	sbcs	r0, r0
 80032d6:	445c      	add	r4, fp
 80032d8:	4240      	negs	r0, r0
 80032da:	1824      	adds	r4, r4, r0
 80032dc:	0222      	lsls	r2, r4, #8
 80032de:	d500      	bpl.n	80032e2 <__aeabi_dsub+0x3fe>
 80032e0:	e1c8      	b.n	8003674 <__aeabi_dsub+0x790>
 80032e2:	001f      	movs	r7, r3
 80032e4:	4698      	mov	r8, r3
 80032e6:	4327      	orrs	r7, r4
 80032e8:	d100      	bne.n	80032ec <__aeabi_dsub+0x408>
 80032ea:	e0bc      	b.n	8003466 <__aeabi_dsub+0x582>
 80032ec:	4643      	mov	r3, r8
 80032ee:	0767      	lsls	r7, r4, #29
 80032f0:	08db      	lsrs	r3, r3, #3
 80032f2:	431f      	orrs	r7, r3
 80032f4:	08e5      	lsrs	r5, r4, #3
 80032f6:	2300      	movs	r3, #0
 80032f8:	e04c      	b.n	8003394 <__aeabi_dsub+0x4b0>
 80032fa:	1a83      	subs	r3, r0, r2
 80032fc:	4698      	mov	r8, r3
 80032fe:	465b      	mov	r3, fp
 8003300:	4540      	cmp	r0, r8
 8003302:	41bf      	sbcs	r7, r7
 8003304:	1ae3      	subs	r3, r4, r3
 8003306:	427f      	negs	r7, r7
 8003308:	1bdb      	subs	r3, r3, r7
 800330a:	021f      	lsls	r7, r3, #8
 800330c:	d47c      	bmi.n	8003408 <__aeabi_dsub+0x524>
 800330e:	4647      	mov	r7, r8
 8003310:	431f      	orrs	r7, r3
 8003312:	d100      	bne.n	8003316 <__aeabi_dsub+0x432>
 8003314:	e0a6      	b.n	8003464 <__aeabi_dsub+0x580>
 8003316:	001c      	movs	r4, r3
 8003318:	4647      	mov	r7, r8
 800331a:	e645      	b.n	8002fa8 <__aeabi_dsub+0xc4>
 800331c:	4cb7      	ldr	r4, [pc, #732]	@ (80035fc <__aeabi_dsub+0x718>)
 800331e:	1aed      	subs	r5, r5, r3
 8003320:	4014      	ands	r4, r2
 8003322:	077b      	lsls	r3, r7, #29
 8003324:	d000      	beq.n	8003328 <__aeabi_dsub+0x444>
 8003326:	e780      	b.n	800322a <__aeabi_dsub+0x346>
 8003328:	e784      	b.n	8003234 <__aeabi_dsub+0x350>
 800332a:	464b      	mov	r3, r9
 800332c:	0025      	movs	r5, r4
 800332e:	4305      	orrs	r5, r0
 8003330:	d066      	beq.n	8003400 <__aeabi_dsub+0x51c>
 8003332:	1e5f      	subs	r7, r3, #1
 8003334:	2b01      	cmp	r3, #1
 8003336:	d100      	bne.n	800333a <__aeabi_dsub+0x456>
 8003338:	e0fc      	b.n	8003534 <__aeabi_dsub+0x650>
 800333a:	4dae      	ldr	r5, [pc, #696]	@ (80035f4 <__aeabi_dsub+0x710>)
 800333c:	42ab      	cmp	r3, r5
 800333e:	d100      	bne.n	8003342 <__aeabi_dsub+0x45e>
 8003340:	e15e      	b.n	8003600 <__aeabi_dsub+0x71c>
 8003342:	4666      	mov	r6, ip
 8003344:	2f38      	cmp	r7, #56	@ 0x38
 8003346:	dc00      	bgt.n	800334a <__aeabi_dsub+0x466>
 8003348:	e0b4      	b.n	80034b4 <__aeabi_dsub+0x5d0>
 800334a:	2001      	movs	r0, #1
 800334c:	1a17      	subs	r7, r2, r0
 800334e:	42ba      	cmp	r2, r7
 8003350:	4192      	sbcs	r2, r2
 8003352:	465b      	mov	r3, fp
 8003354:	4252      	negs	r2, r2
 8003356:	464d      	mov	r5, r9
 8003358:	1a9c      	subs	r4, r3, r2
 800335a:	e620      	b.n	8002f9e <__aeabi_dsub+0xba>
 800335c:	0767      	lsls	r7, r4, #29
 800335e:	08c0      	lsrs	r0, r0, #3
 8003360:	4307      	orrs	r7, r0
 8003362:	08e5      	lsrs	r5, r4, #3
 8003364:	e6ba      	b.n	80030dc <__aeabi_dsub+0x1f8>
 8003366:	001f      	movs	r7, r3
 8003368:	4659      	mov	r1, fp
 800336a:	3f20      	subs	r7, #32
 800336c:	40f9      	lsrs	r1, r7
 800336e:	000f      	movs	r7, r1
 8003370:	2b20      	cmp	r3, #32
 8003372:	d005      	beq.n	8003380 <__aeabi_dsub+0x49c>
 8003374:	2140      	movs	r1, #64	@ 0x40
 8003376:	1acb      	subs	r3, r1, r3
 8003378:	4659      	mov	r1, fp
 800337a:	4099      	lsls	r1, r3
 800337c:	430a      	orrs	r2, r1
 800337e:	4692      	mov	sl, r2
 8003380:	4653      	mov	r3, sl
 8003382:	1e5a      	subs	r2, r3, #1
 8003384:	4193      	sbcs	r3, r2
 8003386:	431f      	orrs	r7, r3
 8003388:	e604      	b.n	8002f94 <__aeabi_dsub+0xb0>
 800338a:	1aeb      	subs	r3, r5, r3
 800338c:	4d9b      	ldr	r5, [pc, #620]	@ (80035fc <__aeabi_dsub+0x718>)
 800338e:	4015      	ands	r5, r2
 8003390:	076f      	lsls	r7, r5, #29
 8003392:	08ed      	lsrs	r5, r5, #3
 8003394:	032c      	lsls	r4, r5, #12
 8003396:	055d      	lsls	r5, r3, #21
 8003398:	0b24      	lsrs	r4, r4, #12
 800339a:	0d6d      	lsrs	r5, r5, #21
 800339c:	e736      	b.n	800320c <__aeabi_dsub+0x328>
 800339e:	4d95      	ldr	r5, [pc, #596]	@ (80035f4 <__aeabi_dsub+0x710>)
 80033a0:	42ab      	cmp	r3, r5
 80033a2:	d100      	bne.n	80033a6 <__aeabi_dsub+0x4c2>
 80033a4:	e0d6      	b.n	8003554 <__aeabi_dsub+0x670>
 80033a6:	1882      	adds	r2, r0, r2
 80033a8:	0021      	movs	r1, r4
 80033aa:	4282      	cmp	r2, r0
 80033ac:	4180      	sbcs	r0, r0
 80033ae:	4459      	add	r1, fp
 80033b0:	4240      	negs	r0, r0
 80033b2:	1808      	adds	r0, r1, r0
 80033b4:	07c7      	lsls	r7, r0, #31
 80033b6:	0852      	lsrs	r2, r2, #1
 80033b8:	4317      	orrs	r7, r2
 80033ba:	0844      	lsrs	r4, r0, #1
 80033bc:	0752      	lsls	r2, r2, #29
 80033be:	d400      	bmi.n	80033c2 <__aeabi_dsub+0x4de>
 80033c0:	e185      	b.n	80036ce <__aeabi_dsub+0x7ea>
 80033c2:	220f      	movs	r2, #15
 80033c4:	001d      	movs	r5, r3
 80033c6:	403a      	ands	r2, r7
 80033c8:	2a04      	cmp	r2, #4
 80033ca:	d000      	beq.n	80033ce <__aeabi_dsub+0x4ea>
 80033cc:	e61a      	b.n	8003004 <__aeabi_dsub+0x120>
 80033ce:	08ff      	lsrs	r7, r7, #3
 80033d0:	0764      	lsls	r4, r4, #29
 80033d2:	4327      	orrs	r7, r4
 80033d4:	0905      	lsrs	r5, r0, #4
 80033d6:	e7dd      	b.n	8003394 <__aeabi_dsub+0x4b0>
 80033d8:	465b      	mov	r3, fp
 80033da:	08d2      	lsrs	r2, r2, #3
 80033dc:	075f      	lsls	r7, r3, #29
 80033de:	4317      	orrs	r7, r2
 80033e0:	08dd      	lsrs	r5, r3, #3
 80033e2:	e67b      	b.n	80030dc <__aeabi_dsub+0x1f8>
 80033e4:	2700      	movs	r7, #0
 80033e6:	2400      	movs	r4, #0
 80033e8:	e710      	b.n	800320c <__aeabi_dsub+0x328>
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d000      	beq.n	80033f0 <__aeabi_dsub+0x50c>
 80033ee:	e0d6      	b.n	800359e <__aeabi_dsub+0x6ba>
 80033f0:	2900      	cmp	r1, #0
 80033f2:	d000      	beq.n	80033f6 <__aeabi_dsub+0x512>
 80033f4:	e12f      	b.n	8003656 <__aeabi_dsub+0x772>
 80033f6:	2480      	movs	r4, #128	@ 0x80
 80033f8:	2600      	movs	r6, #0
 80033fa:	4d7e      	ldr	r5, [pc, #504]	@ (80035f4 <__aeabi_dsub+0x710>)
 80033fc:	0324      	lsls	r4, r4, #12
 80033fe:	e705      	b.n	800320c <__aeabi_dsub+0x328>
 8003400:	4666      	mov	r6, ip
 8003402:	465c      	mov	r4, fp
 8003404:	08d0      	lsrs	r0, r2, #3
 8003406:	e717      	b.n	8003238 <__aeabi_dsub+0x354>
 8003408:	465b      	mov	r3, fp
 800340a:	1a17      	subs	r7, r2, r0
 800340c:	42ba      	cmp	r2, r7
 800340e:	4192      	sbcs	r2, r2
 8003410:	1b1c      	subs	r4, r3, r4
 8003412:	2601      	movs	r6, #1
 8003414:	4663      	mov	r3, ip
 8003416:	4252      	negs	r2, r2
 8003418:	1aa4      	subs	r4, r4, r2
 800341a:	401e      	ands	r6, r3
 800341c:	e5c4      	b.n	8002fa8 <__aeabi_dsub+0xc4>
 800341e:	1883      	adds	r3, r0, r2
 8003420:	4283      	cmp	r3, r0
 8003422:	4180      	sbcs	r0, r0
 8003424:	445c      	add	r4, fp
 8003426:	4240      	negs	r0, r0
 8003428:	1825      	adds	r5, r4, r0
 800342a:	022a      	lsls	r2, r5, #8
 800342c:	d400      	bmi.n	8003430 <__aeabi_dsub+0x54c>
 800342e:	e0da      	b.n	80035e6 <__aeabi_dsub+0x702>
 8003430:	4a72      	ldr	r2, [pc, #456]	@ (80035fc <__aeabi_dsub+0x718>)
 8003432:	085b      	lsrs	r3, r3, #1
 8003434:	4015      	ands	r5, r2
 8003436:	07ea      	lsls	r2, r5, #31
 8003438:	431a      	orrs	r2, r3
 800343a:	0869      	lsrs	r1, r5, #1
 800343c:	075b      	lsls	r3, r3, #29
 800343e:	d400      	bmi.n	8003442 <__aeabi_dsub+0x55e>
 8003440:	e14a      	b.n	80036d8 <__aeabi_dsub+0x7f4>
 8003442:	230f      	movs	r3, #15
 8003444:	4013      	ands	r3, r2
 8003446:	2b04      	cmp	r3, #4
 8003448:	d100      	bne.n	800344c <__aeabi_dsub+0x568>
 800344a:	e0fc      	b.n	8003646 <__aeabi_dsub+0x762>
 800344c:	1d17      	adds	r7, r2, #4
 800344e:	4297      	cmp	r7, r2
 8003450:	41a4      	sbcs	r4, r4
 8003452:	4264      	negs	r4, r4
 8003454:	2502      	movs	r5, #2
 8003456:	1864      	adds	r4, r4, r1
 8003458:	e6ec      	b.n	8003234 <__aeabi_dsub+0x350>
 800345a:	4647      	mov	r7, r8
 800345c:	001c      	movs	r4, r3
 800345e:	431f      	orrs	r7, r3
 8003460:	d000      	beq.n	8003464 <__aeabi_dsub+0x580>
 8003462:	e743      	b.n	80032ec <__aeabi_dsub+0x408>
 8003464:	2600      	movs	r6, #0
 8003466:	2500      	movs	r5, #0
 8003468:	2400      	movs	r4, #0
 800346a:	e6cf      	b.n	800320c <__aeabi_dsub+0x328>
 800346c:	08c0      	lsrs	r0, r0, #3
 800346e:	0767      	lsls	r7, r4, #29
 8003470:	4307      	orrs	r7, r0
 8003472:	08e5      	lsrs	r5, r4, #3
 8003474:	e632      	b.n	80030dc <__aeabi_dsub+0x1f8>
 8003476:	1a87      	subs	r7, r0, r2
 8003478:	465b      	mov	r3, fp
 800347a:	42b8      	cmp	r0, r7
 800347c:	4180      	sbcs	r0, r0
 800347e:	1ae4      	subs	r4, r4, r3
 8003480:	4240      	negs	r0, r0
 8003482:	1a24      	subs	r4, r4, r0
 8003484:	0223      	lsls	r3, r4, #8
 8003486:	d428      	bmi.n	80034da <__aeabi_dsub+0x5f6>
 8003488:	0763      	lsls	r3, r4, #29
 800348a:	08ff      	lsrs	r7, r7, #3
 800348c:	431f      	orrs	r7, r3
 800348e:	08e5      	lsrs	r5, r4, #3
 8003490:	2301      	movs	r3, #1
 8003492:	e77f      	b.n	8003394 <__aeabi_dsub+0x4b0>
 8003494:	2b00      	cmp	r3, #0
 8003496:	d100      	bne.n	800349a <__aeabi_dsub+0x5b6>
 8003498:	e673      	b.n	8003182 <__aeabi_dsub+0x29e>
 800349a:	464b      	mov	r3, r9
 800349c:	1b5f      	subs	r7, r3, r5
 800349e:	003b      	movs	r3, r7
 80034a0:	2d00      	cmp	r5, #0
 80034a2:	d100      	bne.n	80034a6 <__aeabi_dsub+0x5c2>
 80034a4:	e742      	b.n	800332c <__aeabi_dsub+0x448>
 80034a6:	2f38      	cmp	r7, #56	@ 0x38
 80034a8:	dd00      	ble.n	80034ac <__aeabi_dsub+0x5c8>
 80034aa:	e0ec      	b.n	8003686 <__aeabi_dsub+0x7a2>
 80034ac:	2380      	movs	r3, #128	@ 0x80
 80034ae:	000e      	movs	r6, r1
 80034b0:	041b      	lsls	r3, r3, #16
 80034b2:	431c      	orrs	r4, r3
 80034b4:	2f1f      	cmp	r7, #31
 80034b6:	dc25      	bgt.n	8003504 <__aeabi_dsub+0x620>
 80034b8:	2520      	movs	r5, #32
 80034ba:	0023      	movs	r3, r4
 80034bc:	1bed      	subs	r5, r5, r7
 80034be:	0001      	movs	r1, r0
 80034c0:	40a8      	lsls	r0, r5
 80034c2:	40ab      	lsls	r3, r5
 80034c4:	40f9      	lsrs	r1, r7
 80034c6:	1e45      	subs	r5, r0, #1
 80034c8:	41a8      	sbcs	r0, r5
 80034ca:	430b      	orrs	r3, r1
 80034cc:	40fc      	lsrs	r4, r7
 80034ce:	4318      	orrs	r0, r3
 80034d0:	465b      	mov	r3, fp
 80034d2:	1b1b      	subs	r3, r3, r4
 80034d4:	469b      	mov	fp, r3
 80034d6:	e739      	b.n	800334c <__aeabi_dsub+0x468>
 80034d8:	4666      	mov	r6, ip
 80034da:	2501      	movs	r5, #1
 80034dc:	e562      	b.n	8002fa4 <__aeabi_dsub+0xc0>
 80034de:	001f      	movs	r7, r3
 80034e0:	4659      	mov	r1, fp
 80034e2:	3f20      	subs	r7, #32
 80034e4:	40f9      	lsrs	r1, r7
 80034e6:	468c      	mov	ip, r1
 80034e8:	2b20      	cmp	r3, #32
 80034ea:	d005      	beq.n	80034f8 <__aeabi_dsub+0x614>
 80034ec:	2740      	movs	r7, #64	@ 0x40
 80034ee:	4659      	mov	r1, fp
 80034f0:	1afb      	subs	r3, r7, r3
 80034f2:	4099      	lsls	r1, r3
 80034f4:	430a      	orrs	r2, r1
 80034f6:	4692      	mov	sl, r2
 80034f8:	4657      	mov	r7, sl
 80034fa:	1e7b      	subs	r3, r7, #1
 80034fc:	419f      	sbcs	r7, r3
 80034fe:	4663      	mov	r3, ip
 8003500:	431f      	orrs	r7, r3
 8003502:	e5c1      	b.n	8003088 <__aeabi_dsub+0x1a4>
 8003504:	003b      	movs	r3, r7
 8003506:	0025      	movs	r5, r4
 8003508:	3b20      	subs	r3, #32
 800350a:	40dd      	lsrs	r5, r3
 800350c:	2f20      	cmp	r7, #32
 800350e:	d004      	beq.n	800351a <__aeabi_dsub+0x636>
 8003510:	2340      	movs	r3, #64	@ 0x40
 8003512:	1bdb      	subs	r3, r3, r7
 8003514:	409c      	lsls	r4, r3
 8003516:	4320      	orrs	r0, r4
 8003518:	4680      	mov	r8, r0
 800351a:	4640      	mov	r0, r8
 800351c:	1e43      	subs	r3, r0, #1
 800351e:	4198      	sbcs	r0, r3
 8003520:	4328      	orrs	r0, r5
 8003522:	e713      	b.n	800334c <__aeabi_dsub+0x468>
 8003524:	2900      	cmp	r1, #0
 8003526:	d09d      	beq.n	8003464 <__aeabi_dsub+0x580>
 8003528:	2601      	movs	r6, #1
 800352a:	4663      	mov	r3, ip
 800352c:	465c      	mov	r4, fp
 800352e:	4690      	mov	r8, r2
 8003530:	401e      	ands	r6, r3
 8003532:	e6db      	b.n	80032ec <__aeabi_dsub+0x408>
 8003534:	1a17      	subs	r7, r2, r0
 8003536:	465b      	mov	r3, fp
 8003538:	42ba      	cmp	r2, r7
 800353a:	4192      	sbcs	r2, r2
 800353c:	1b1c      	subs	r4, r3, r4
 800353e:	4252      	negs	r2, r2
 8003540:	1aa4      	subs	r4, r4, r2
 8003542:	0223      	lsls	r3, r4, #8
 8003544:	d4c8      	bmi.n	80034d8 <__aeabi_dsub+0x5f4>
 8003546:	0763      	lsls	r3, r4, #29
 8003548:	08ff      	lsrs	r7, r7, #3
 800354a:	431f      	orrs	r7, r3
 800354c:	4666      	mov	r6, ip
 800354e:	2301      	movs	r3, #1
 8003550:	08e5      	lsrs	r5, r4, #3
 8003552:	e71f      	b.n	8003394 <__aeabi_dsub+0x4b0>
 8003554:	001d      	movs	r5, r3
 8003556:	2400      	movs	r4, #0
 8003558:	2700      	movs	r7, #0
 800355a:	e657      	b.n	800320c <__aeabi_dsub+0x328>
 800355c:	465c      	mov	r4, fp
 800355e:	08d0      	lsrs	r0, r2, #3
 8003560:	e66a      	b.n	8003238 <__aeabi_dsub+0x354>
 8003562:	2b00      	cmp	r3, #0
 8003564:	d100      	bne.n	8003568 <__aeabi_dsub+0x684>
 8003566:	e737      	b.n	80033d8 <__aeabi_dsub+0x4f4>
 8003568:	4653      	mov	r3, sl
 800356a:	08c0      	lsrs	r0, r0, #3
 800356c:	0767      	lsls	r7, r4, #29
 800356e:	4307      	orrs	r7, r0
 8003570:	08e5      	lsrs	r5, r4, #3
 8003572:	2b00      	cmp	r3, #0
 8003574:	d100      	bne.n	8003578 <__aeabi_dsub+0x694>
 8003576:	e5b1      	b.n	80030dc <__aeabi_dsub+0x1f8>
 8003578:	2380      	movs	r3, #128	@ 0x80
 800357a:	031b      	lsls	r3, r3, #12
 800357c:	421d      	tst	r5, r3
 800357e:	d008      	beq.n	8003592 <__aeabi_dsub+0x6ae>
 8003580:	4659      	mov	r1, fp
 8003582:	08c8      	lsrs	r0, r1, #3
 8003584:	4218      	tst	r0, r3
 8003586:	d104      	bne.n	8003592 <__aeabi_dsub+0x6ae>
 8003588:	08d2      	lsrs	r2, r2, #3
 800358a:	0749      	lsls	r1, r1, #29
 800358c:	430a      	orrs	r2, r1
 800358e:	0017      	movs	r7, r2
 8003590:	0005      	movs	r5, r0
 8003592:	0f7b      	lsrs	r3, r7, #29
 8003594:	00ff      	lsls	r7, r7, #3
 8003596:	08ff      	lsrs	r7, r7, #3
 8003598:	075b      	lsls	r3, r3, #29
 800359a:	431f      	orrs	r7, r3
 800359c:	e59e      	b.n	80030dc <__aeabi_dsub+0x1f8>
 800359e:	08c0      	lsrs	r0, r0, #3
 80035a0:	0763      	lsls	r3, r4, #29
 80035a2:	4318      	orrs	r0, r3
 80035a4:	08e5      	lsrs	r5, r4, #3
 80035a6:	2900      	cmp	r1, #0
 80035a8:	d053      	beq.n	8003652 <__aeabi_dsub+0x76e>
 80035aa:	2380      	movs	r3, #128	@ 0x80
 80035ac:	031b      	lsls	r3, r3, #12
 80035ae:	421d      	tst	r5, r3
 80035b0:	d00a      	beq.n	80035c8 <__aeabi_dsub+0x6e4>
 80035b2:	4659      	mov	r1, fp
 80035b4:	08cc      	lsrs	r4, r1, #3
 80035b6:	421c      	tst	r4, r3
 80035b8:	d106      	bne.n	80035c8 <__aeabi_dsub+0x6e4>
 80035ba:	2601      	movs	r6, #1
 80035bc:	4663      	mov	r3, ip
 80035be:	0025      	movs	r5, r4
 80035c0:	08d0      	lsrs	r0, r2, #3
 80035c2:	0749      	lsls	r1, r1, #29
 80035c4:	4308      	orrs	r0, r1
 80035c6:	401e      	ands	r6, r3
 80035c8:	0f47      	lsrs	r7, r0, #29
 80035ca:	00c0      	lsls	r0, r0, #3
 80035cc:	08c0      	lsrs	r0, r0, #3
 80035ce:	077f      	lsls	r7, r7, #29
 80035d0:	4307      	orrs	r7, r0
 80035d2:	e583      	b.n	80030dc <__aeabi_dsub+0x1f8>
 80035d4:	1883      	adds	r3, r0, r2
 80035d6:	4293      	cmp	r3, r2
 80035d8:	4192      	sbcs	r2, r2
 80035da:	445c      	add	r4, fp
 80035dc:	4252      	negs	r2, r2
 80035de:	18a5      	adds	r5, r4, r2
 80035e0:	022a      	lsls	r2, r5, #8
 80035e2:	d500      	bpl.n	80035e6 <__aeabi_dsub+0x702>
 80035e4:	e724      	b.n	8003430 <__aeabi_dsub+0x54c>
 80035e6:	076f      	lsls	r7, r5, #29
 80035e8:	08db      	lsrs	r3, r3, #3
 80035ea:	431f      	orrs	r7, r3
 80035ec:	08ed      	lsrs	r5, r5, #3
 80035ee:	2301      	movs	r3, #1
 80035f0:	e6d0      	b.n	8003394 <__aeabi_dsub+0x4b0>
 80035f2:	46c0      	nop			@ (mov r8, r8)
 80035f4:	000007ff 	.word	0x000007ff
 80035f8:	000007fe 	.word	0x000007fe
 80035fc:	ff7fffff 	.word	0xff7fffff
 8003600:	465b      	mov	r3, fp
 8003602:	08d2      	lsrs	r2, r2, #3
 8003604:	075f      	lsls	r7, r3, #29
 8003606:	4666      	mov	r6, ip
 8003608:	4317      	orrs	r7, r2
 800360a:	08dd      	lsrs	r5, r3, #3
 800360c:	e566      	b.n	80030dc <__aeabi_dsub+0x1f8>
 800360e:	0025      	movs	r5, r4
 8003610:	3b20      	subs	r3, #32
 8003612:	40dd      	lsrs	r5, r3
 8003614:	4663      	mov	r3, ip
 8003616:	2b20      	cmp	r3, #32
 8003618:	d005      	beq.n	8003626 <__aeabi_dsub+0x742>
 800361a:	2340      	movs	r3, #64	@ 0x40
 800361c:	4661      	mov	r1, ip
 800361e:	1a5b      	subs	r3, r3, r1
 8003620:	409c      	lsls	r4, r3
 8003622:	4320      	orrs	r0, r4
 8003624:	4680      	mov	r8, r0
 8003626:	4647      	mov	r7, r8
 8003628:	1e7b      	subs	r3, r7, #1
 800362a:	419f      	sbcs	r7, r3
 800362c:	432f      	orrs	r7, r5
 800362e:	e5a0      	b.n	8003172 <__aeabi_dsub+0x28e>
 8003630:	2120      	movs	r1, #32
 8003632:	2700      	movs	r7, #0
 8003634:	1a09      	subs	r1, r1, r0
 8003636:	e4d2      	b.n	8002fde <__aeabi_dsub+0xfa>
 8003638:	2f00      	cmp	r7, #0
 800363a:	d100      	bne.n	800363e <__aeabi_dsub+0x75a>
 800363c:	e713      	b.n	8003466 <__aeabi_dsub+0x582>
 800363e:	465c      	mov	r4, fp
 8003640:	0017      	movs	r7, r2
 8003642:	2500      	movs	r5, #0
 8003644:	e5f6      	b.n	8003234 <__aeabi_dsub+0x350>
 8003646:	08d7      	lsrs	r7, r2, #3
 8003648:	0749      	lsls	r1, r1, #29
 800364a:	2302      	movs	r3, #2
 800364c:	430f      	orrs	r7, r1
 800364e:	092d      	lsrs	r5, r5, #4
 8003650:	e6a0      	b.n	8003394 <__aeabi_dsub+0x4b0>
 8003652:	0007      	movs	r7, r0
 8003654:	e542      	b.n	80030dc <__aeabi_dsub+0x1f8>
 8003656:	465b      	mov	r3, fp
 8003658:	2601      	movs	r6, #1
 800365a:	075f      	lsls	r7, r3, #29
 800365c:	08dd      	lsrs	r5, r3, #3
 800365e:	4663      	mov	r3, ip
 8003660:	08d2      	lsrs	r2, r2, #3
 8003662:	4317      	orrs	r7, r2
 8003664:	401e      	ands	r6, r3
 8003666:	e539      	b.n	80030dc <__aeabi_dsub+0x1f8>
 8003668:	465b      	mov	r3, fp
 800366a:	08d2      	lsrs	r2, r2, #3
 800366c:	075f      	lsls	r7, r3, #29
 800366e:	4317      	orrs	r7, r2
 8003670:	08dd      	lsrs	r5, r3, #3
 8003672:	e533      	b.n	80030dc <__aeabi_dsub+0x1f8>
 8003674:	4a1e      	ldr	r2, [pc, #120]	@ (80036f0 <__aeabi_dsub+0x80c>)
 8003676:	08db      	lsrs	r3, r3, #3
 8003678:	4022      	ands	r2, r4
 800367a:	0757      	lsls	r7, r2, #29
 800367c:	0252      	lsls	r2, r2, #9
 800367e:	2501      	movs	r5, #1
 8003680:	431f      	orrs	r7, r3
 8003682:	0b14      	lsrs	r4, r2, #12
 8003684:	e5c2      	b.n	800320c <__aeabi_dsub+0x328>
 8003686:	000e      	movs	r6, r1
 8003688:	2001      	movs	r0, #1
 800368a:	e65f      	b.n	800334c <__aeabi_dsub+0x468>
 800368c:	2b00      	cmp	r3, #0
 800368e:	d00d      	beq.n	80036ac <__aeabi_dsub+0x7c8>
 8003690:	464b      	mov	r3, r9
 8003692:	1b5b      	subs	r3, r3, r5
 8003694:	469c      	mov	ip, r3
 8003696:	2d00      	cmp	r5, #0
 8003698:	d100      	bne.n	800369c <__aeabi_dsub+0x7b8>
 800369a:	e548      	b.n	800312e <__aeabi_dsub+0x24a>
 800369c:	2701      	movs	r7, #1
 800369e:	2b38      	cmp	r3, #56	@ 0x38
 80036a0:	dd00      	ble.n	80036a4 <__aeabi_dsub+0x7c0>
 80036a2:	e566      	b.n	8003172 <__aeabi_dsub+0x28e>
 80036a4:	2380      	movs	r3, #128	@ 0x80
 80036a6:	041b      	lsls	r3, r3, #16
 80036a8:	431c      	orrs	r4, r3
 80036aa:	e550      	b.n	800314e <__aeabi_dsub+0x26a>
 80036ac:	1c6b      	adds	r3, r5, #1
 80036ae:	4d11      	ldr	r5, [pc, #68]	@ (80036f4 <__aeabi_dsub+0x810>)
 80036b0:	422b      	tst	r3, r5
 80036b2:	d000      	beq.n	80036b6 <__aeabi_dsub+0x7d2>
 80036b4:	e673      	b.n	800339e <__aeabi_dsub+0x4ba>
 80036b6:	4659      	mov	r1, fp
 80036b8:	0023      	movs	r3, r4
 80036ba:	4311      	orrs	r1, r2
 80036bc:	468a      	mov	sl, r1
 80036be:	4303      	orrs	r3, r0
 80036c0:	e600      	b.n	80032c4 <__aeabi_dsub+0x3e0>
 80036c2:	0767      	lsls	r7, r4, #29
 80036c4:	08c0      	lsrs	r0, r0, #3
 80036c6:	2300      	movs	r3, #0
 80036c8:	4307      	orrs	r7, r0
 80036ca:	08e5      	lsrs	r5, r4, #3
 80036cc:	e662      	b.n	8003394 <__aeabi_dsub+0x4b0>
 80036ce:	0764      	lsls	r4, r4, #29
 80036d0:	08ff      	lsrs	r7, r7, #3
 80036d2:	4327      	orrs	r7, r4
 80036d4:	0905      	lsrs	r5, r0, #4
 80036d6:	e65d      	b.n	8003394 <__aeabi_dsub+0x4b0>
 80036d8:	08d2      	lsrs	r2, r2, #3
 80036da:	0749      	lsls	r1, r1, #29
 80036dc:	4311      	orrs	r1, r2
 80036de:	000f      	movs	r7, r1
 80036e0:	2302      	movs	r3, #2
 80036e2:	092d      	lsrs	r5, r5, #4
 80036e4:	e656      	b.n	8003394 <__aeabi_dsub+0x4b0>
 80036e6:	0007      	movs	r7, r0
 80036e8:	e5a4      	b.n	8003234 <__aeabi_dsub+0x350>
 80036ea:	0038      	movs	r0, r7
 80036ec:	e48f      	b.n	800300e <__aeabi_dsub+0x12a>
 80036ee:	46c0      	nop			@ (mov r8, r8)
 80036f0:	ff7fffff 	.word	0xff7fffff
 80036f4:	000007fe 	.word	0x000007fe

080036f8 <__aeabi_dcmpun>:
 80036f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036fa:	46c6      	mov	lr, r8
 80036fc:	031e      	lsls	r6, r3, #12
 80036fe:	0b36      	lsrs	r6, r6, #12
 8003700:	46b0      	mov	r8, r6
 8003702:	4e0d      	ldr	r6, [pc, #52]	@ (8003738 <__aeabi_dcmpun+0x40>)
 8003704:	030c      	lsls	r4, r1, #12
 8003706:	004d      	lsls	r5, r1, #1
 8003708:	005f      	lsls	r7, r3, #1
 800370a:	b500      	push	{lr}
 800370c:	0b24      	lsrs	r4, r4, #12
 800370e:	0d6d      	lsrs	r5, r5, #21
 8003710:	0d7f      	lsrs	r7, r7, #21
 8003712:	42b5      	cmp	r5, r6
 8003714:	d00b      	beq.n	800372e <__aeabi_dcmpun+0x36>
 8003716:	4908      	ldr	r1, [pc, #32]	@ (8003738 <__aeabi_dcmpun+0x40>)
 8003718:	2000      	movs	r0, #0
 800371a:	428f      	cmp	r7, r1
 800371c:	d104      	bne.n	8003728 <__aeabi_dcmpun+0x30>
 800371e:	4646      	mov	r6, r8
 8003720:	4316      	orrs	r6, r2
 8003722:	0030      	movs	r0, r6
 8003724:	1e43      	subs	r3, r0, #1
 8003726:	4198      	sbcs	r0, r3
 8003728:	bc80      	pop	{r7}
 800372a:	46b8      	mov	r8, r7
 800372c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800372e:	4304      	orrs	r4, r0
 8003730:	2001      	movs	r0, #1
 8003732:	2c00      	cmp	r4, #0
 8003734:	d1f8      	bne.n	8003728 <__aeabi_dcmpun+0x30>
 8003736:	e7ee      	b.n	8003716 <__aeabi_dcmpun+0x1e>
 8003738:	000007ff 	.word	0x000007ff

0800373c <__aeabi_d2iz>:
 800373c:	000b      	movs	r3, r1
 800373e:	0002      	movs	r2, r0
 8003740:	b570      	push	{r4, r5, r6, lr}
 8003742:	4d16      	ldr	r5, [pc, #88]	@ (800379c <__aeabi_d2iz+0x60>)
 8003744:	030c      	lsls	r4, r1, #12
 8003746:	b082      	sub	sp, #8
 8003748:	0049      	lsls	r1, r1, #1
 800374a:	2000      	movs	r0, #0
 800374c:	9200      	str	r2, [sp, #0]
 800374e:	9301      	str	r3, [sp, #4]
 8003750:	0b24      	lsrs	r4, r4, #12
 8003752:	0d49      	lsrs	r1, r1, #21
 8003754:	0fde      	lsrs	r6, r3, #31
 8003756:	42a9      	cmp	r1, r5
 8003758:	dd04      	ble.n	8003764 <__aeabi_d2iz+0x28>
 800375a:	4811      	ldr	r0, [pc, #68]	@ (80037a0 <__aeabi_d2iz+0x64>)
 800375c:	4281      	cmp	r1, r0
 800375e:	dd03      	ble.n	8003768 <__aeabi_d2iz+0x2c>
 8003760:	4b10      	ldr	r3, [pc, #64]	@ (80037a4 <__aeabi_d2iz+0x68>)
 8003762:	18f0      	adds	r0, r6, r3
 8003764:	b002      	add	sp, #8
 8003766:	bd70      	pop	{r4, r5, r6, pc}
 8003768:	2080      	movs	r0, #128	@ 0x80
 800376a:	0340      	lsls	r0, r0, #13
 800376c:	4320      	orrs	r0, r4
 800376e:	4c0e      	ldr	r4, [pc, #56]	@ (80037a8 <__aeabi_d2iz+0x6c>)
 8003770:	1a64      	subs	r4, r4, r1
 8003772:	2c1f      	cmp	r4, #31
 8003774:	dd08      	ble.n	8003788 <__aeabi_d2iz+0x4c>
 8003776:	4b0d      	ldr	r3, [pc, #52]	@ (80037ac <__aeabi_d2iz+0x70>)
 8003778:	1a5b      	subs	r3, r3, r1
 800377a:	40d8      	lsrs	r0, r3
 800377c:	0003      	movs	r3, r0
 800377e:	4258      	negs	r0, r3
 8003780:	2e00      	cmp	r6, #0
 8003782:	d1ef      	bne.n	8003764 <__aeabi_d2iz+0x28>
 8003784:	0018      	movs	r0, r3
 8003786:	e7ed      	b.n	8003764 <__aeabi_d2iz+0x28>
 8003788:	4b09      	ldr	r3, [pc, #36]	@ (80037b0 <__aeabi_d2iz+0x74>)
 800378a:	9a00      	ldr	r2, [sp, #0]
 800378c:	469c      	mov	ip, r3
 800378e:	0003      	movs	r3, r0
 8003790:	4461      	add	r1, ip
 8003792:	408b      	lsls	r3, r1
 8003794:	40e2      	lsrs	r2, r4
 8003796:	4313      	orrs	r3, r2
 8003798:	e7f1      	b.n	800377e <__aeabi_d2iz+0x42>
 800379a:	46c0      	nop			@ (mov r8, r8)
 800379c:	000003fe 	.word	0x000003fe
 80037a0:	0000041d 	.word	0x0000041d
 80037a4:	7fffffff 	.word	0x7fffffff
 80037a8:	00000433 	.word	0x00000433
 80037ac:	00000413 	.word	0x00000413
 80037b0:	fffffbed 	.word	0xfffffbed

080037b4 <__aeabi_i2d>:
 80037b4:	b570      	push	{r4, r5, r6, lr}
 80037b6:	2800      	cmp	r0, #0
 80037b8:	d016      	beq.n	80037e8 <__aeabi_i2d+0x34>
 80037ba:	17c3      	asrs	r3, r0, #31
 80037bc:	18c5      	adds	r5, r0, r3
 80037be:	405d      	eors	r5, r3
 80037c0:	0fc4      	lsrs	r4, r0, #31
 80037c2:	0028      	movs	r0, r5
 80037c4:	f000 f912 	bl	80039ec <__clzsi2>
 80037c8:	4b10      	ldr	r3, [pc, #64]	@ (800380c <__aeabi_i2d+0x58>)
 80037ca:	1a1b      	subs	r3, r3, r0
 80037cc:	055b      	lsls	r3, r3, #21
 80037ce:	0d5b      	lsrs	r3, r3, #21
 80037d0:	280a      	cmp	r0, #10
 80037d2:	dc14      	bgt.n	80037fe <__aeabi_i2d+0x4a>
 80037d4:	0002      	movs	r2, r0
 80037d6:	002e      	movs	r6, r5
 80037d8:	3215      	adds	r2, #21
 80037da:	4096      	lsls	r6, r2
 80037dc:	220b      	movs	r2, #11
 80037de:	1a12      	subs	r2, r2, r0
 80037e0:	40d5      	lsrs	r5, r2
 80037e2:	032d      	lsls	r5, r5, #12
 80037e4:	0b2d      	lsrs	r5, r5, #12
 80037e6:	e003      	b.n	80037f0 <__aeabi_i2d+0x3c>
 80037e8:	2400      	movs	r4, #0
 80037ea:	2300      	movs	r3, #0
 80037ec:	2500      	movs	r5, #0
 80037ee:	2600      	movs	r6, #0
 80037f0:	051b      	lsls	r3, r3, #20
 80037f2:	432b      	orrs	r3, r5
 80037f4:	07e4      	lsls	r4, r4, #31
 80037f6:	4323      	orrs	r3, r4
 80037f8:	0030      	movs	r0, r6
 80037fa:	0019      	movs	r1, r3
 80037fc:	bd70      	pop	{r4, r5, r6, pc}
 80037fe:	380b      	subs	r0, #11
 8003800:	4085      	lsls	r5, r0
 8003802:	032d      	lsls	r5, r5, #12
 8003804:	2600      	movs	r6, #0
 8003806:	0b2d      	lsrs	r5, r5, #12
 8003808:	e7f2      	b.n	80037f0 <__aeabi_i2d+0x3c>
 800380a:	46c0      	nop			@ (mov r8, r8)
 800380c:	0000041e 	.word	0x0000041e

08003810 <__aeabi_ui2d>:
 8003810:	b510      	push	{r4, lr}
 8003812:	1e04      	subs	r4, r0, #0
 8003814:	d010      	beq.n	8003838 <__aeabi_ui2d+0x28>
 8003816:	f000 f8e9 	bl	80039ec <__clzsi2>
 800381a:	4b0e      	ldr	r3, [pc, #56]	@ (8003854 <__aeabi_ui2d+0x44>)
 800381c:	1a1b      	subs	r3, r3, r0
 800381e:	055b      	lsls	r3, r3, #21
 8003820:	0d5b      	lsrs	r3, r3, #21
 8003822:	280a      	cmp	r0, #10
 8003824:	dc0f      	bgt.n	8003846 <__aeabi_ui2d+0x36>
 8003826:	220b      	movs	r2, #11
 8003828:	0021      	movs	r1, r4
 800382a:	1a12      	subs	r2, r2, r0
 800382c:	40d1      	lsrs	r1, r2
 800382e:	3015      	adds	r0, #21
 8003830:	030a      	lsls	r2, r1, #12
 8003832:	4084      	lsls	r4, r0
 8003834:	0b12      	lsrs	r2, r2, #12
 8003836:	e001      	b.n	800383c <__aeabi_ui2d+0x2c>
 8003838:	2300      	movs	r3, #0
 800383a:	2200      	movs	r2, #0
 800383c:	051b      	lsls	r3, r3, #20
 800383e:	4313      	orrs	r3, r2
 8003840:	0020      	movs	r0, r4
 8003842:	0019      	movs	r1, r3
 8003844:	bd10      	pop	{r4, pc}
 8003846:	0022      	movs	r2, r4
 8003848:	380b      	subs	r0, #11
 800384a:	4082      	lsls	r2, r0
 800384c:	0312      	lsls	r2, r2, #12
 800384e:	2400      	movs	r4, #0
 8003850:	0b12      	lsrs	r2, r2, #12
 8003852:	e7f3      	b.n	800383c <__aeabi_ui2d+0x2c>
 8003854:	0000041e 	.word	0x0000041e

08003858 <__aeabi_f2d>:
 8003858:	b570      	push	{r4, r5, r6, lr}
 800385a:	0242      	lsls	r2, r0, #9
 800385c:	0043      	lsls	r3, r0, #1
 800385e:	0fc4      	lsrs	r4, r0, #31
 8003860:	20fe      	movs	r0, #254	@ 0xfe
 8003862:	0e1b      	lsrs	r3, r3, #24
 8003864:	1c59      	adds	r1, r3, #1
 8003866:	0a55      	lsrs	r5, r2, #9
 8003868:	4208      	tst	r0, r1
 800386a:	d00c      	beq.n	8003886 <__aeabi_f2d+0x2e>
 800386c:	21e0      	movs	r1, #224	@ 0xe0
 800386e:	0089      	lsls	r1, r1, #2
 8003870:	468c      	mov	ip, r1
 8003872:	076d      	lsls	r5, r5, #29
 8003874:	0b12      	lsrs	r2, r2, #12
 8003876:	4463      	add	r3, ip
 8003878:	051b      	lsls	r3, r3, #20
 800387a:	4313      	orrs	r3, r2
 800387c:	07e4      	lsls	r4, r4, #31
 800387e:	4323      	orrs	r3, r4
 8003880:	0028      	movs	r0, r5
 8003882:	0019      	movs	r1, r3
 8003884:	bd70      	pop	{r4, r5, r6, pc}
 8003886:	2b00      	cmp	r3, #0
 8003888:	d114      	bne.n	80038b4 <__aeabi_f2d+0x5c>
 800388a:	2d00      	cmp	r5, #0
 800388c:	d01b      	beq.n	80038c6 <__aeabi_f2d+0x6e>
 800388e:	0028      	movs	r0, r5
 8003890:	f000 f8ac 	bl	80039ec <__clzsi2>
 8003894:	280a      	cmp	r0, #10
 8003896:	dc1c      	bgt.n	80038d2 <__aeabi_f2d+0x7a>
 8003898:	230b      	movs	r3, #11
 800389a:	002a      	movs	r2, r5
 800389c:	1a1b      	subs	r3, r3, r0
 800389e:	40da      	lsrs	r2, r3
 80038a0:	0003      	movs	r3, r0
 80038a2:	3315      	adds	r3, #21
 80038a4:	409d      	lsls	r5, r3
 80038a6:	4b0e      	ldr	r3, [pc, #56]	@ (80038e0 <__aeabi_f2d+0x88>)
 80038a8:	0312      	lsls	r2, r2, #12
 80038aa:	1a1b      	subs	r3, r3, r0
 80038ac:	055b      	lsls	r3, r3, #21
 80038ae:	0b12      	lsrs	r2, r2, #12
 80038b0:	0d5b      	lsrs	r3, r3, #21
 80038b2:	e7e1      	b.n	8003878 <__aeabi_f2d+0x20>
 80038b4:	2d00      	cmp	r5, #0
 80038b6:	d009      	beq.n	80038cc <__aeabi_f2d+0x74>
 80038b8:	0b13      	lsrs	r3, r2, #12
 80038ba:	2280      	movs	r2, #128	@ 0x80
 80038bc:	0312      	lsls	r2, r2, #12
 80038be:	431a      	orrs	r2, r3
 80038c0:	076d      	lsls	r5, r5, #29
 80038c2:	4b08      	ldr	r3, [pc, #32]	@ (80038e4 <__aeabi_f2d+0x8c>)
 80038c4:	e7d8      	b.n	8003878 <__aeabi_f2d+0x20>
 80038c6:	2300      	movs	r3, #0
 80038c8:	2200      	movs	r2, #0
 80038ca:	e7d5      	b.n	8003878 <__aeabi_f2d+0x20>
 80038cc:	2200      	movs	r2, #0
 80038ce:	4b05      	ldr	r3, [pc, #20]	@ (80038e4 <__aeabi_f2d+0x8c>)
 80038d0:	e7d2      	b.n	8003878 <__aeabi_f2d+0x20>
 80038d2:	0003      	movs	r3, r0
 80038d4:	002a      	movs	r2, r5
 80038d6:	3b0b      	subs	r3, #11
 80038d8:	409a      	lsls	r2, r3
 80038da:	2500      	movs	r5, #0
 80038dc:	e7e3      	b.n	80038a6 <__aeabi_f2d+0x4e>
 80038de:	46c0      	nop			@ (mov r8, r8)
 80038e0:	00000389 	.word	0x00000389
 80038e4:	000007ff 	.word	0x000007ff

080038e8 <__aeabi_d2f>:
 80038e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038ea:	004b      	lsls	r3, r1, #1
 80038ec:	030f      	lsls	r7, r1, #12
 80038ee:	0d5b      	lsrs	r3, r3, #21
 80038f0:	4c3a      	ldr	r4, [pc, #232]	@ (80039dc <__aeabi_d2f+0xf4>)
 80038f2:	0f45      	lsrs	r5, r0, #29
 80038f4:	b083      	sub	sp, #12
 80038f6:	0a7f      	lsrs	r7, r7, #9
 80038f8:	1c5e      	adds	r6, r3, #1
 80038fa:	432f      	orrs	r7, r5
 80038fc:	9000      	str	r0, [sp, #0]
 80038fe:	9101      	str	r1, [sp, #4]
 8003900:	0fca      	lsrs	r2, r1, #31
 8003902:	00c5      	lsls	r5, r0, #3
 8003904:	4226      	tst	r6, r4
 8003906:	d00b      	beq.n	8003920 <__aeabi_d2f+0x38>
 8003908:	4935      	ldr	r1, [pc, #212]	@ (80039e0 <__aeabi_d2f+0xf8>)
 800390a:	185c      	adds	r4, r3, r1
 800390c:	2cfe      	cmp	r4, #254	@ 0xfe
 800390e:	dd13      	ble.n	8003938 <__aeabi_d2f+0x50>
 8003910:	20ff      	movs	r0, #255	@ 0xff
 8003912:	2300      	movs	r3, #0
 8003914:	05c0      	lsls	r0, r0, #23
 8003916:	4318      	orrs	r0, r3
 8003918:	07d2      	lsls	r2, r2, #31
 800391a:	4310      	orrs	r0, r2
 800391c:	b003      	add	sp, #12
 800391e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003920:	433d      	orrs	r5, r7
 8003922:	2b00      	cmp	r3, #0
 8003924:	d101      	bne.n	800392a <__aeabi_d2f+0x42>
 8003926:	2000      	movs	r0, #0
 8003928:	e7f4      	b.n	8003914 <__aeabi_d2f+0x2c>
 800392a:	2d00      	cmp	r5, #0
 800392c:	d0f0      	beq.n	8003910 <__aeabi_d2f+0x28>
 800392e:	2380      	movs	r3, #128	@ 0x80
 8003930:	03db      	lsls	r3, r3, #15
 8003932:	20ff      	movs	r0, #255	@ 0xff
 8003934:	433b      	orrs	r3, r7
 8003936:	e7ed      	b.n	8003914 <__aeabi_d2f+0x2c>
 8003938:	2c00      	cmp	r4, #0
 800393a:	dd0c      	ble.n	8003956 <__aeabi_d2f+0x6e>
 800393c:	9b00      	ldr	r3, [sp, #0]
 800393e:	00ff      	lsls	r7, r7, #3
 8003940:	019b      	lsls	r3, r3, #6
 8003942:	1e58      	subs	r0, r3, #1
 8003944:	4183      	sbcs	r3, r0
 8003946:	0f69      	lsrs	r1, r5, #29
 8003948:	433b      	orrs	r3, r7
 800394a:	430b      	orrs	r3, r1
 800394c:	0759      	lsls	r1, r3, #29
 800394e:	d127      	bne.n	80039a0 <__aeabi_d2f+0xb8>
 8003950:	08db      	lsrs	r3, r3, #3
 8003952:	b2e0      	uxtb	r0, r4
 8003954:	e7de      	b.n	8003914 <__aeabi_d2f+0x2c>
 8003956:	0021      	movs	r1, r4
 8003958:	3117      	adds	r1, #23
 800395a:	db31      	blt.n	80039c0 <__aeabi_d2f+0xd8>
 800395c:	2180      	movs	r1, #128	@ 0x80
 800395e:	201e      	movs	r0, #30
 8003960:	0409      	lsls	r1, r1, #16
 8003962:	4339      	orrs	r1, r7
 8003964:	1b00      	subs	r0, r0, r4
 8003966:	281f      	cmp	r0, #31
 8003968:	dd2d      	ble.n	80039c6 <__aeabi_d2f+0xde>
 800396a:	2602      	movs	r6, #2
 800396c:	4276      	negs	r6, r6
 800396e:	1b34      	subs	r4, r6, r4
 8003970:	000e      	movs	r6, r1
 8003972:	40e6      	lsrs	r6, r4
 8003974:	0034      	movs	r4, r6
 8003976:	2820      	cmp	r0, #32
 8003978:	d004      	beq.n	8003984 <__aeabi_d2f+0x9c>
 800397a:	481a      	ldr	r0, [pc, #104]	@ (80039e4 <__aeabi_d2f+0xfc>)
 800397c:	4684      	mov	ip, r0
 800397e:	4463      	add	r3, ip
 8003980:	4099      	lsls	r1, r3
 8003982:	430d      	orrs	r5, r1
 8003984:	002b      	movs	r3, r5
 8003986:	1e59      	subs	r1, r3, #1
 8003988:	418b      	sbcs	r3, r1
 800398a:	4323      	orrs	r3, r4
 800398c:	0759      	lsls	r1, r3, #29
 800398e:	d003      	beq.n	8003998 <__aeabi_d2f+0xb0>
 8003990:	210f      	movs	r1, #15
 8003992:	4019      	ands	r1, r3
 8003994:	2904      	cmp	r1, #4
 8003996:	d10b      	bne.n	80039b0 <__aeabi_d2f+0xc8>
 8003998:	019b      	lsls	r3, r3, #6
 800399a:	2000      	movs	r0, #0
 800399c:	0a5b      	lsrs	r3, r3, #9
 800399e:	e7b9      	b.n	8003914 <__aeabi_d2f+0x2c>
 80039a0:	210f      	movs	r1, #15
 80039a2:	4019      	ands	r1, r3
 80039a4:	2904      	cmp	r1, #4
 80039a6:	d104      	bne.n	80039b2 <__aeabi_d2f+0xca>
 80039a8:	019b      	lsls	r3, r3, #6
 80039aa:	0a5b      	lsrs	r3, r3, #9
 80039ac:	b2e0      	uxtb	r0, r4
 80039ae:	e7b1      	b.n	8003914 <__aeabi_d2f+0x2c>
 80039b0:	2400      	movs	r4, #0
 80039b2:	3304      	adds	r3, #4
 80039b4:	0159      	lsls	r1, r3, #5
 80039b6:	d5f7      	bpl.n	80039a8 <__aeabi_d2f+0xc0>
 80039b8:	3401      	adds	r4, #1
 80039ba:	2300      	movs	r3, #0
 80039bc:	b2e0      	uxtb	r0, r4
 80039be:	e7a9      	b.n	8003914 <__aeabi_d2f+0x2c>
 80039c0:	2000      	movs	r0, #0
 80039c2:	2300      	movs	r3, #0
 80039c4:	e7a6      	b.n	8003914 <__aeabi_d2f+0x2c>
 80039c6:	4c08      	ldr	r4, [pc, #32]	@ (80039e8 <__aeabi_d2f+0x100>)
 80039c8:	191c      	adds	r4, r3, r4
 80039ca:	002b      	movs	r3, r5
 80039cc:	40a5      	lsls	r5, r4
 80039ce:	40c3      	lsrs	r3, r0
 80039d0:	40a1      	lsls	r1, r4
 80039d2:	1e68      	subs	r0, r5, #1
 80039d4:	4185      	sbcs	r5, r0
 80039d6:	4329      	orrs	r1, r5
 80039d8:	430b      	orrs	r3, r1
 80039da:	e7d7      	b.n	800398c <__aeabi_d2f+0xa4>
 80039dc:	000007fe 	.word	0x000007fe
 80039e0:	fffffc80 	.word	0xfffffc80
 80039e4:	fffffca2 	.word	0xfffffca2
 80039e8:	fffffc82 	.word	0xfffffc82

080039ec <__clzsi2>:
 80039ec:	211c      	movs	r1, #28
 80039ee:	2301      	movs	r3, #1
 80039f0:	041b      	lsls	r3, r3, #16
 80039f2:	4298      	cmp	r0, r3
 80039f4:	d301      	bcc.n	80039fa <__clzsi2+0xe>
 80039f6:	0c00      	lsrs	r0, r0, #16
 80039f8:	3910      	subs	r1, #16
 80039fa:	0a1b      	lsrs	r3, r3, #8
 80039fc:	4298      	cmp	r0, r3
 80039fe:	d301      	bcc.n	8003a04 <__clzsi2+0x18>
 8003a00:	0a00      	lsrs	r0, r0, #8
 8003a02:	3908      	subs	r1, #8
 8003a04:	091b      	lsrs	r3, r3, #4
 8003a06:	4298      	cmp	r0, r3
 8003a08:	d301      	bcc.n	8003a0e <__clzsi2+0x22>
 8003a0a:	0900      	lsrs	r0, r0, #4
 8003a0c:	3904      	subs	r1, #4
 8003a0e:	a202      	add	r2, pc, #8	@ (adr r2, 8003a18 <__clzsi2+0x2c>)
 8003a10:	5c10      	ldrb	r0, [r2, r0]
 8003a12:	1840      	adds	r0, r0, r1
 8003a14:	4770      	bx	lr
 8003a16:	46c0      	nop			@ (mov r8, r8)
 8003a18:	02020304 	.word	0x02020304
 8003a1c:	01010101 	.word	0x01010101
	...

08003a28 <__clzdi2>:
 8003a28:	b510      	push	{r4, lr}
 8003a2a:	2900      	cmp	r1, #0
 8003a2c:	d103      	bne.n	8003a36 <__clzdi2+0xe>
 8003a2e:	f7ff ffdd 	bl	80039ec <__clzsi2>
 8003a32:	3020      	adds	r0, #32
 8003a34:	e002      	b.n	8003a3c <__clzdi2+0x14>
 8003a36:	0008      	movs	r0, r1
 8003a38:	f7ff ffd8 	bl	80039ec <__clzsi2>
 8003a3c:	bd10      	pop	{r4, pc}
 8003a3e:	46c0      	nop			@ (mov r8, r8)

08003a40 <drawPixel>:
extern uint8_t _rowstart;       ///< Some displays need this changed to offset
extern uint8_t _xstart;
extern uint8_t _ystart;

void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 8003a40:	b590      	push	{r4, r7, lr}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	0004      	movs	r4, r0
 8003a48:	0008      	movs	r0, r1
 8003a4a:	0011      	movs	r1, r2
 8003a4c:	1dbb      	adds	r3, r7, #6
 8003a4e:	1c22      	adds	r2, r4, #0
 8003a50:	801a      	strh	r2, [r3, #0]
 8003a52:	1d3b      	adds	r3, r7, #4
 8003a54:	1c02      	adds	r2, r0, #0
 8003a56:	801a      	strh	r2, [r3, #0]
 8003a58:	1cbb      	adds	r3, r7, #2
 8003a5a:	1c0a      	adds	r2, r1, #0
 8003a5c:	801a      	strh	r2, [r3, #0]
	ST7735_DrawPixel(y,x, color);
 8003a5e:	1d3b      	adds	r3, r7, #4
 8003a60:	8818      	ldrh	r0, [r3, #0]
 8003a62:	1dbb      	adds	r3, r7, #6
 8003a64:	8819      	ldrh	r1, [r3, #0]
 8003a66:	1cbb      	adds	r3, r7, #2
 8003a68:	881b      	ldrh	r3, [r3, #0]
 8003a6a:	001a      	movs	r2, r3
 8003a6c:	f000 fefe 	bl	800486c <ST7735_DrawPixel>
}
 8003a70:	46c0      	nop			@ (mov r8, r8)
 8003a72:	46bd      	mov	sp, r7
 8003a74:	b003      	add	sp, #12
 8003a76:	bd90      	pop	{r4, r7, pc}

08003a78 <fillRect>:

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8003a78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a7a:	46c6      	mov	lr, r8
 8003a7c:	b500      	push	{lr}
 8003a7e:	b090      	sub	sp, #64	@ 0x40
 8003a80:	af04      	add	r7, sp, #16
 8003a82:	468c      	mov	ip, r1
 8003a84:	0016      	movs	r6, r2
 8003a86:	0019      	movs	r1, r3
 8003a88:	221e      	movs	r2, #30
 8003a8a:	18ba      	adds	r2, r7, r2
 8003a8c:	1c03      	adds	r3, r0, #0
 8003a8e:	8013      	strh	r3, [r2, #0]
 8003a90:	231c      	movs	r3, #28
 8003a92:	18fb      	adds	r3, r7, r3
 8003a94:	4662      	mov	r2, ip
 8003a96:	801a      	strh	r2, [r3, #0]
 8003a98:	201a      	movs	r0, #26
 8003a9a:	183b      	adds	r3, r7, r0
 8003a9c:	1c32      	adds	r2, r6, #0
 8003a9e:	801a      	strh	r2, [r3, #0]
 8003aa0:	2018      	movs	r0, #24
 8003aa2:	183b      	adds	r3, r7, r0
 8003aa4:	1c0a      	adds	r2, r1, #0
 8003aa6:	801a      	strh	r2, [r3, #0]
 8003aa8:	466b      	mov	r3, sp
 8003aaa:	4698      	mov	r8, r3
	uint16_t pallette[] = {color};
 8003aac:	230c      	movs	r3, #12
 8003aae:	0001      	movs	r1, r0
 8003ab0:	185e      	adds	r6, r3, r1
 8003ab2:	19f2      	adds	r2, r6, r7
 8003ab4:	2030      	movs	r0, #48	@ 0x30
 8003ab6:	1846      	adds	r6, r0, r1
 8003ab8:	19f3      	adds	r3, r6, r7
 8003aba:	881b      	ldrh	r3, [r3, #0]
 8003abc:	8013      	strh	r3, [r2, #0]
	    uint16_t pixels[w*h][2];
 8003abe:	201a      	movs	r0, #26
 8003ac0:	183b      	adds	r3, r7, r0
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	5e9b      	ldrsh	r3, [r3, r2]
 8003ac6:	187a      	adds	r2, r7, r1
 8003ac8:	2000      	movs	r0, #0
 8003aca:	5e12      	ldrsh	r2, [r2, r0]
 8003acc:	4353      	muls	r3, r2
 8003ace:	1e5a      	subs	r2, r3, #1
 8003ad0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ad2:	001a      	movs	r2, r3
 8003ad4:	60ba      	str	r2, [r7, #8]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	60fa      	str	r2, [r7, #12]
 8003ada:	68b8      	ldr	r0, [r7, #8]
 8003adc:	68f9      	ldr	r1, [r7, #12]
 8003ade:	0002      	movs	r2, r0
 8003ae0:	0ed2      	lsrs	r2, r2, #27
 8003ae2:	000e      	movs	r6, r1
 8003ae4:	0176      	lsls	r6, r6, #5
 8003ae6:	617e      	str	r6, [r7, #20]
 8003ae8:	697e      	ldr	r6, [r7, #20]
 8003aea:	4316      	orrs	r6, r2
 8003aec:	617e      	str	r6, [r7, #20]
 8003aee:	0002      	movs	r2, r0
 8003af0:	0152      	lsls	r2, r2, #5
 8003af2:	613a      	str	r2, [r7, #16]
 8003af4:	001a      	movs	r2, r3
 8003af6:	603a      	str	r2, [r7, #0]
 8003af8:	2200      	movs	r2, #0
 8003afa:	607a      	str	r2, [r7, #4]
 8003afc:	6838      	ldr	r0, [r7, #0]
 8003afe:	6879      	ldr	r1, [r7, #4]
 8003b00:	0002      	movs	r2, r0
 8003b02:	0ed2      	lsrs	r2, r2, #27
 8003b04:	000e      	movs	r6, r1
 8003b06:	0175      	lsls	r5, r6, #5
 8003b08:	4315      	orrs	r5, r2
 8003b0a:	0002      	movs	r2, r0
 8003b0c:	0154      	lsls	r4, r2, #5
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	3307      	adds	r3, #7
 8003b12:	08db      	lsrs	r3, r3, #3
 8003b14:	00db      	lsls	r3, r3, #3
 8003b16:	466a      	mov	r2, sp
 8003b18:	1ad2      	subs	r2, r2, r3
 8003b1a:	4695      	mov	sp, r2
 8003b1c:	ab04      	add	r3, sp, #16
 8003b1e:	3301      	adds	r3, #1
 8003b20:	085b      	lsrs	r3, r3, #1
 8003b22:	005b      	lsls	r3, r3, #1
 8003b24:	62bb      	str	r3, [r7, #40]	@ 0x28

	    pixels[0][0] = 0;
 8003b26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b28:	2200      	movs	r2, #0
 8003b2a:	801a      	strh	r2, [r3, #0]
	    pixels[0][1] = w*h;
 8003b2c:	201a      	movs	r0, #26
 8003b2e:	183b      	adds	r3, r7, r0
 8003b30:	881b      	ldrh	r3, [r3, #0]
 8003b32:	2118      	movs	r1, #24
 8003b34:	187a      	adds	r2, r7, r1
 8003b36:	8812      	ldrh	r2, [r2, #0]
 8003b38:	4353      	muls	r3, r2
 8003b3a:	b29a      	uxth	r2, r3
 8003b3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b3e:	805a      	strh	r2, [r3, #2]
	    drawImage(pixels, pallette, x, y, w, h, 1);
 8003b40:	221e      	movs	r2, #30
 8003b42:	18bb      	adds	r3, r7, r2
 8003b44:	2200      	movs	r2, #0
 8003b46:	5e9c      	ldrsh	r4, [r3, r2]
 8003b48:	231c      	movs	r3, #28
 8003b4a:	18fb      	adds	r3, r7, r3
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	5e9d      	ldrsh	r5, [r3, r2]
 8003b50:	183b      	adds	r3, r7, r0
 8003b52:	2200      	movs	r2, #0
 8003b54:	5e9b      	ldrsh	r3, [r3, r2]
 8003b56:	000e      	movs	r6, r1
 8003b58:	187a      	adds	r2, r7, r1
 8003b5a:	2000      	movs	r0, #0
 8003b5c:	5e12      	ldrsh	r2, [r2, r0]
 8003b5e:	210c      	movs	r1, #12
 8003b60:	1989      	adds	r1, r1, r6
 8003b62:	19c9      	adds	r1, r1, r7
 8003b64:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003b66:	2601      	movs	r6, #1
 8003b68:	46b4      	mov	ip, r6
 8003b6a:	4666      	mov	r6, ip
 8003b6c:	9602      	str	r6, [sp, #8]
 8003b6e:	9201      	str	r2, [sp, #4]
 8003b70:	9300      	str	r3, [sp, #0]
 8003b72:	002b      	movs	r3, r5
 8003b74:	0022      	movs	r2, r4
 8003b76:	f000 fbc5 	bl	8004304 <drawImage>
 8003b7a:	46c5      	mov	sp, r8

	//ST7735_FillRectangle(x, y, w, h, color);
}
 8003b7c:	46c0      	nop			@ (mov r8, r8)
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	b00c      	add	sp, #48	@ 0x30
 8003b82:	bc80      	pop	{r7}
 8003b84:	46b8      	mov	r8, r7
 8003b86:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003b88 <writePixel>:

#define min(a, b) (((a) < (b)) ? (a) : (b))


void writePixel(int16_t x, int16_t y, uint16_t color)
{
 8003b88:	b590      	push	{r4, r7, lr}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	0004      	movs	r4, r0
 8003b90:	0008      	movs	r0, r1
 8003b92:	0011      	movs	r1, r2
 8003b94:	1dbb      	adds	r3, r7, #6
 8003b96:	1c22      	adds	r2, r4, #0
 8003b98:	801a      	strh	r2, [r3, #0]
 8003b9a:	1d3b      	adds	r3, r7, #4
 8003b9c:	1c02      	adds	r2, r0, #0
 8003b9e:	801a      	strh	r2, [r3, #0]
 8003ba0:	1cbb      	adds	r3, r7, #2
 8003ba2:	1c0a      	adds	r2, r1, #0
 8003ba4:	801a      	strh	r2, [r3, #0]
    drawPixel(x, y, color);
 8003ba6:	1cbb      	adds	r3, r7, #2
 8003ba8:	881a      	ldrh	r2, [r3, #0]
 8003baa:	1d3b      	adds	r3, r7, #4
 8003bac:	2100      	movs	r1, #0
 8003bae:	5e59      	ldrsh	r1, [r3, r1]
 8003bb0:	1dbb      	adds	r3, r7, #6
 8003bb2:	2000      	movs	r0, #0
 8003bb4:	5e1b      	ldrsh	r3, [r3, r0]
 8003bb6:	0018      	movs	r0, r3
 8003bb8:	f7ff ff42 	bl	8003a40 <drawPixel>
}
 8003bbc:	46c0      	nop			@ (mov r8, r8)
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	b003      	add	sp, #12
 8003bc2:	bd90      	pop	{r4, r7, pc}

08003bc4 <writeLine>:

void writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8003bc4:	b5b0      	push	{r4, r5, r7, lr}
 8003bc6:	b088      	sub	sp, #32
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	0005      	movs	r5, r0
 8003bcc:	000c      	movs	r4, r1
 8003bce:	0010      	movs	r0, r2
 8003bd0:	0019      	movs	r1, r3
 8003bd2:	1dbb      	adds	r3, r7, #6
 8003bd4:	1c2a      	adds	r2, r5, #0
 8003bd6:	801a      	strh	r2, [r3, #0]
 8003bd8:	1d3b      	adds	r3, r7, #4
 8003bda:	1c22      	adds	r2, r4, #0
 8003bdc:	801a      	strh	r2, [r3, #0]
 8003bde:	1cbb      	adds	r3, r7, #2
 8003be0:	1c02      	adds	r2, r0, #0
 8003be2:	801a      	strh	r2, [r3, #0]
 8003be4:	003b      	movs	r3, r7
 8003be6:	1c0a      	adds	r2, r1, #0
 8003be8:	801a      	strh	r2, [r3, #0]
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8003bea:	003b      	movs	r3, r7
 8003bec:	2200      	movs	r2, #0
 8003bee:	5e9a      	ldrsh	r2, [r3, r2]
 8003bf0:	1d3b      	adds	r3, r7, #4
 8003bf2:	2100      	movs	r1, #0
 8003bf4:	5e5b      	ldrsh	r3, [r3, r1]
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	17d9      	asrs	r1, r3, #31
 8003bfa:	185a      	adds	r2, r3, r1
 8003bfc:	404a      	eors	r2, r1
 8003bfe:	1cbb      	adds	r3, r7, #2
 8003c00:	2100      	movs	r1, #0
 8003c02:	5e59      	ldrsh	r1, [r3, r1]
 8003c04:	1dbb      	adds	r3, r7, #6
 8003c06:	2000      	movs	r0, #0
 8003c08:	5e1b      	ldrsh	r3, [r3, r0]
 8003c0a:	1acb      	subs	r3, r1, r3
 8003c0c:	17d9      	asrs	r1, r3, #31
 8003c0e:	185b      	adds	r3, r3, r1
 8003c10:	404b      	eors	r3, r1
 8003c12:	2101      	movs	r1, #1
 8003c14:	429a      	cmp	r2, r3
 8003c16:	dc01      	bgt.n	8003c1c <writeLine+0x58>
 8003c18:	2300      	movs	r3, #0
 8003c1a:	1c19      	adds	r1, r3, #0
 8003c1c:	b2ca      	uxtb	r2, r1
 8003c1e:	211a      	movs	r1, #26
 8003c20:	187b      	adds	r3, r7, r1
 8003c22:	801a      	strh	r2, [r3, #0]
    if (steep) {
 8003c24:	187b      	adds	r3, r7, r1
 8003c26:	2200      	movs	r2, #0
 8003c28:	5e9b      	ldrsh	r3, [r3, r2]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d019      	beq.n	8003c62 <writeLine+0x9e>
        _swap_int16_t(x0, y0);
 8003c2e:	2118      	movs	r1, #24
 8003c30:	187b      	adds	r3, r7, r1
 8003c32:	1dba      	adds	r2, r7, #6
 8003c34:	8812      	ldrh	r2, [r2, #0]
 8003c36:	801a      	strh	r2, [r3, #0]
 8003c38:	1dbb      	adds	r3, r7, #6
 8003c3a:	1d3a      	adds	r2, r7, #4
 8003c3c:	8812      	ldrh	r2, [r2, #0]
 8003c3e:	801a      	strh	r2, [r3, #0]
 8003c40:	1d3b      	adds	r3, r7, #4
 8003c42:	187a      	adds	r2, r7, r1
 8003c44:	8812      	ldrh	r2, [r2, #0]
 8003c46:	801a      	strh	r2, [r3, #0]
        _swap_int16_t(x1, y1);
 8003c48:	2116      	movs	r1, #22
 8003c4a:	187b      	adds	r3, r7, r1
 8003c4c:	1cba      	adds	r2, r7, #2
 8003c4e:	8812      	ldrh	r2, [r2, #0]
 8003c50:	801a      	strh	r2, [r3, #0]
 8003c52:	1cbb      	adds	r3, r7, #2
 8003c54:	003a      	movs	r2, r7
 8003c56:	8812      	ldrh	r2, [r2, #0]
 8003c58:	801a      	strh	r2, [r3, #0]
 8003c5a:	003b      	movs	r3, r7
 8003c5c:	187a      	adds	r2, r7, r1
 8003c5e:	8812      	ldrh	r2, [r2, #0]
 8003c60:	801a      	strh	r2, [r3, #0]
    }

    if (x0 > x1) {
 8003c62:	1dba      	adds	r2, r7, #6
 8003c64:	1cbb      	adds	r3, r7, #2
 8003c66:	2100      	movs	r1, #0
 8003c68:	5e52      	ldrsh	r2, [r2, r1]
 8003c6a:	2100      	movs	r1, #0
 8003c6c:	5e5b      	ldrsh	r3, [r3, r1]
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	dd19      	ble.n	8003ca6 <writeLine+0xe2>
        _swap_int16_t(x0, x1);
 8003c72:	2114      	movs	r1, #20
 8003c74:	187b      	adds	r3, r7, r1
 8003c76:	1dba      	adds	r2, r7, #6
 8003c78:	8812      	ldrh	r2, [r2, #0]
 8003c7a:	801a      	strh	r2, [r3, #0]
 8003c7c:	1dbb      	adds	r3, r7, #6
 8003c7e:	1cba      	adds	r2, r7, #2
 8003c80:	8812      	ldrh	r2, [r2, #0]
 8003c82:	801a      	strh	r2, [r3, #0]
 8003c84:	1cbb      	adds	r3, r7, #2
 8003c86:	187a      	adds	r2, r7, r1
 8003c88:	8812      	ldrh	r2, [r2, #0]
 8003c8a:	801a      	strh	r2, [r3, #0]
        _swap_int16_t(y0, y1);
 8003c8c:	2112      	movs	r1, #18
 8003c8e:	187b      	adds	r3, r7, r1
 8003c90:	1d3a      	adds	r2, r7, #4
 8003c92:	8812      	ldrh	r2, [r2, #0]
 8003c94:	801a      	strh	r2, [r3, #0]
 8003c96:	1d3b      	adds	r3, r7, #4
 8003c98:	003a      	movs	r2, r7
 8003c9a:	8812      	ldrh	r2, [r2, #0]
 8003c9c:	801a      	strh	r2, [r3, #0]
 8003c9e:	003b      	movs	r3, r7
 8003ca0:	187a      	adds	r2, r7, r1
 8003ca2:	8812      	ldrh	r2, [r2, #0]
 8003ca4:	801a      	strh	r2, [r3, #0]
    }

    int16_t dx, dy;
    dx = x1 - x0;
 8003ca6:	1cbb      	adds	r3, r7, #2
 8003ca8:	881a      	ldrh	r2, [r3, #0]
 8003caa:	1dbb      	adds	r3, r7, #6
 8003cac:	881b      	ldrh	r3, [r3, #0]
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	b29a      	uxth	r2, r3
 8003cb2:	2010      	movs	r0, #16
 8003cb4:	183b      	adds	r3, r7, r0
 8003cb6:	801a      	strh	r2, [r3, #0]
    dy = abs(y1 - y0);
 8003cb8:	003b      	movs	r3, r7
 8003cba:	2200      	movs	r2, #0
 8003cbc:	5e9a      	ldrsh	r2, [r3, r2]
 8003cbe:	1d3b      	adds	r3, r7, #4
 8003cc0:	2100      	movs	r1, #0
 8003cc2:	5e5b      	ldrsh	r3, [r3, r1]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	17d9      	asrs	r1, r3, #31
 8003cc8:	185a      	adds	r2, r3, r1
 8003cca:	404a      	eors	r2, r1
 8003ccc:	230e      	movs	r3, #14
 8003cce:	18fb      	adds	r3, r7, r3
 8003cd0:	801a      	strh	r2, [r3, #0]

    int16_t err = dx / 2;
 8003cd2:	231e      	movs	r3, #30
 8003cd4:	18fa      	adds	r2, r7, r3
 8003cd6:	183b      	adds	r3, r7, r0
 8003cd8:	2100      	movs	r1, #0
 8003cda:	5e5b      	ldrsh	r3, [r3, r1]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	da00      	bge.n	8003ce2 <writeLine+0x11e>
 8003ce0:	3301      	adds	r3, #1
 8003ce2:	105b      	asrs	r3, r3, #1
 8003ce4:	8013      	strh	r3, [r2, #0]
    int16_t ystep;

    if (y0 < y1) {
 8003ce6:	1d3a      	adds	r2, r7, #4
 8003ce8:	003b      	movs	r3, r7
 8003cea:	2100      	movs	r1, #0
 8003cec:	5e52      	ldrsh	r2, [r2, r1]
 8003cee:	2100      	movs	r1, #0
 8003cf0:	5e5b      	ldrsh	r3, [r3, r1]
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	da04      	bge.n	8003d00 <writeLine+0x13c>
        ystep = 1;
 8003cf6:	231c      	movs	r3, #28
 8003cf8:	18fb      	adds	r3, r7, r3
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	801a      	strh	r2, [r3, #0]
 8003cfe:	e04d      	b.n	8003d9c <writeLine+0x1d8>
    } else {
        ystep = -1;
 8003d00:	231c      	movs	r3, #28
 8003d02:	18fb      	adds	r3, r7, r3
 8003d04:	2201      	movs	r2, #1
 8003d06:	4252      	negs	r2, r2
 8003d08:	801a      	strh	r2, [r3, #0]
    }

    for (; x0<=x1; x0++) {
 8003d0a:	e047      	b.n	8003d9c <writeLine+0x1d8>
        if (steep) {
 8003d0c:	231a      	movs	r3, #26
 8003d0e:	18fb      	adds	r3, r7, r3
 8003d10:	2200      	movs	r2, #0
 8003d12:	5e9b      	ldrsh	r3, [r3, r2]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d00c      	beq.n	8003d32 <writeLine+0x16e>
            writePixel(y0, x0, color);
 8003d18:	2330      	movs	r3, #48	@ 0x30
 8003d1a:	18fb      	adds	r3, r7, r3
 8003d1c:	881a      	ldrh	r2, [r3, #0]
 8003d1e:	1dbb      	adds	r3, r7, #6
 8003d20:	2100      	movs	r1, #0
 8003d22:	5e59      	ldrsh	r1, [r3, r1]
 8003d24:	1d3b      	adds	r3, r7, #4
 8003d26:	2000      	movs	r0, #0
 8003d28:	5e1b      	ldrsh	r3, [r3, r0]
 8003d2a:	0018      	movs	r0, r3
 8003d2c:	f7ff ff2c 	bl	8003b88 <writePixel>
 8003d30:	e00b      	b.n	8003d4a <writeLine+0x186>
        } else {
            writePixel(x0, y0, color);
 8003d32:	2330      	movs	r3, #48	@ 0x30
 8003d34:	18fb      	adds	r3, r7, r3
 8003d36:	881a      	ldrh	r2, [r3, #0]
 8003d38:	1d3b      	adds	r3, r7, #4
 8003d3a:	2100      	movs	r1, #0
 8003d3c:	5e59      	ldrsh	r1, [r3, r1]
 8003d3e:	1dbb      	adds	r3, r7, #6
 8003d40:	2000      	movs	r0, #0
 8003d42:	5e1b      	ldrsh	r3, [r3, r0]
 8003d44:	0018      	movs	r0, r3
 8003d46:	f7ff ff1f 	bl	8003b88 <writePixel>
        }
        err -= dy;
 8003d4a:	211e      	movs	r1, #30
 8003d4c:	187b      	adds	r3, r7, r1
 8003d4e:	881a      	ldrh	r2, [r3, #0]
 8003d50:	230e      	movs	r3, #14
 8003d52:	18fb      	adds	r3, r7, r3
 8003d54:	881b      	ldrh	r3, [r3, #0]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	b29a      	uxth	r2, r3
 8003d5a:	187b      	adds	r3, r7, r1
 8003d5c:	801a      	strh	r2, [r3, #0]
        if (err < 0) {
 8003d5e:	187b      	adds	r3, r7, r1
 8003d60:	2200      	movs	r2, #0
 8003d62:	5e9b      	ldrsh	r3, [r3, r2]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	da11      	bge.n	8003d8c <writeLine+0x1c8>
            y0 += ystep;
 8003d68:	1d3b      	adds	r3, r7, #4
 8003d6a:	881a      	ldrh	r2, [r3, #0]
 8003d6c:	231c      	movs	r3, #28
 8003d6e:	18fb      	adds	r3, r7, r3
 8003d70:	881b      	ldrh	r3, [r3, #0]
 8003d72:	18d3      	adds	r3, r2, r3
 8003d74:	b29a      	uxth	r2, r3
 8003d76:	1d3b      	adds	r3, r7, #4
 8003d78:	801a      	strh	r2, [r3, #0]
            err += dx;
 8003d7a:	187b      	adds	r3, r7, r1
 8003d7c:	881a      	ldrh	r2, [r3, #0]
 8003d7e:	2310      	movs	r3, #16
 8003d80:	18fb      	adds	r3, r7, r3
 8003d82:	881b      	ldrh	r3, [r3, #0]
 8003d84:	18d3      	adds	r3, r2, r3
 8003d86:	b29a      	uxth	r2, r3
 8003d88:	187b      	adds	r3, r7, r1
 8003d8a:	801a      	strh	r2, [r3, #0]
    for (; x0<=x1; x0++) {
 8003d8c:	1dbb      	adds	r3, r7, #6
 8003d8e:	2200      	movs	r2, #0
 8003d90:	5e9b      	ldrsh	r3, [r3, r2]
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	3301      	adds	r3, #1
 8003d96:	b29a      	uxth	r2, r3
 8003d98:	1dbb      	adds	r3, r7, #6
 8003d9a:	801a      	strh	r2, [r3, #0]
 8003d9c:	1dba      	adds	r2, r7, #6
 8003d9e:	1cbb      	adds	r3, r7, #2
 8003da0:	2100      	movs	r1, #0
 8003da2:	5e52      	ldrsh	r2, [r2, r1]
 8003da4:	2100      	movs	r1, #0
 8003da6:	5e5b      	ldrsh	r3, [r3, r1]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	ddaf      	ble.n	8003d0c <writeLine+0x148>
        }
    }
}
 8003dac:	46c0      	nop			@ (mov r8, r8)
 8003dae:	46c0      	nop			@ (mov r8, r8)
 8003db0:	46bd      	mov	sp, r7
 8003db2:	b008      	add	sp, #32
 8003db4:	bdb0      	pop	{r4, r5, r7, pc}

08003db6 <drawFastVLine>:

void  drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 8003db6:	b5b0      	push	{r4, r5, r7, lr}
 8003db8:	b084      	sub	sp, #16
 8003dba:	af02      	add	r7, sp, #8
 8003dbc:	0005      	movs	r5, r0
 8003dbe:	000c      	movs	r4, r1
 8003dc0:	0010      	movs	r0, r2
 8003dc2:	0019      	movs	r1, r3
 8003dc4:	1dbb      	adds	r3, r7, #6
 8003dc6:	1c2a      	adds	r2, r5, #0
 8003dc8:	801a      	strh	r2, [r3, #0]
 8003dca:	1d3b      	adds	r3, r7, #4
 8003dcc:	1c22      	adds	r2, r4, #0
 8003dce:	801a      	strh	r2, [r3, #0]
 8003dd0:	1cbb      	adds	r3, r7, #2
 8003dd2:	1c02      	adds	r2, r0, #0
 8003dd4:	801a      	strh	r2, [r3, #0]
 8003dd6:	003b      	movs	r3, r7
 8003dd8:	1c0a      	adds	r2, r1, #0
 8003dda:	801a      	strh	r2, [r3, #0]
	writeLine(x, y, x, y + h - 1, color);
 8003ddc:	1d3b      	adds	r3, r7, #4
 8003dde:	881a      	ldrh	r2, [r3, #0]
 8003de0:	1cbb      	adds	r3, r7, #2
 8003de2:	881b      	ldrh	r3, [r3, #0]
 8003de4:	18d3      	adds	r3, r2, r3
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	3b01      	subs	r3, #1
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	b21c      	sxth	r4, r3
 8003dee:	1dbb      	adds	r3, r7, #6
 8003df0:	2200      	movs	r2, #0
 8003df2:	5e9a      	ldrsh	r2, [r3, r2]
 8003df4:	1d3b      	adds	r3, r7, #4
 8003df6:	2100      	movs	r1, #0
 8003df8:	5e59      	ldrsh	r1, [r3, r1]
 8003dfa:	1dbb      	adds	r3, r7, #6
 8003dfc:	2000      	movs	r0, #0
 8003dfe:	5e18      	ldrsh	r0, [r3, r0]
 8003e00:	003b      	movs	r3, r7
 8003e02:	881b      	ldrh	r3, [r3, #0]
 8003e04:	9300      	str	r3, [sp, #0]
 8003e06:	0023      	movs	r3, r4
 8003e08:	f7ff fedc 	bl	8003bc4 <writeLine>
}
 8003e0c:	46c0      	nop			@ (mov r8, r8)
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	b002      	add	sp, #8
 8003e12:	bdb0      	pop	{r4, r5, r7, pc}

08003e14 <drawFastHLine>:
void  drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 8003e14:	b5b0      	push	{r4, r5, r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af02      	add	r7, sp, #8
 8003e1a:	0005      	movs	r5, r0
 8003e1c:	000c      	movs	r4, r1
 8003e1e:	0010      	movs	r0, r2
 8003e20:	0019      	movs	r1, r3
 8003e22:	1dbb      	adds	r3, r7, #6
 8003e24:	1c2a      	adds	r2, r5, #0
 8003e26:	801a      	strh	r2, [r3, #0]
 8003e28:	1d3b      	adds	r3, r7, #4
 8003e2a:	1c22      	adds	r2, r4, #0
 8003e2c:	801a      	strh	r2, [r3, #0]
 8003e2e:	1cbb      	adds	r3, r7, #2
 8003e30:	1c02      	adds	r2, r0, #0
 8003e32:	801a      	strh	r2, [r3, #0]
 8003e34:	003b      	movs	r3, r7
 8003e36:	1c0a      	adds	r2, r1, #0
 8003e38:	801a      	strh	r2, [r3, #0]
	writeLine(x, y, x + w - 1, y, color);
 8003e3a:	1dbb      	adds	r3, r7, #6
 8003e3c:	881a      	ldrh	r2, [r3, #0]
 8003e3e:	1cbb      	adds	r3, r7, #2
 8003e40:	881b      	ldrh	r3, [r3, #0]
 8003e42:	18d3      	adds	r3, r2, r3
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	3b01      	subs	r3, #1
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	b21a      	sxth	r2, r3
 8003e4c:	1d3b      	adds	r3, r7, #4
 8003e4e:	2400      	movs	r4, #0
 8003e50:	5f1c      	ldrsh	r4, [r3, r4]
 8003e52:	1d3b      	adds	r3, r7, #4
 8003e54:	2100      	movs	r1, #0
 8003e56:	5e59      	ldrsh	r1, [r3, r1]
 8003e58:	1dbb      	adds	r3, r7, #6
 8003e5a:	2000      	movs	r0, #0
 8003e5c:	5e18      	ldrsh	r0, [r3, r0]
 8003e5e:	003b      	movs	r3, r7
 8003e60:	881b      	ldrh	r3, [r3, #0]
 8003e62:	9300      	str	r3, [sp, #0]
 8003e64:	0023      	movs	r3, r4
 8003e66:	f7ff fead 	bl	8003bc4 <writeLine>
}
 8003e6a:	46c0      	nop			@ (mov r8, r8)
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	b002      	add	sp, #8
 8003e70:	bdb0      	pop	{r4, r5, r7, pc}

08003e72 <drawLine>:

void drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8003e72:	b5b0      	push	{r4, r5, r7, lr}
 8003e74:	b086      	sub	sp, #24
 8003e76:	af02      	add	r7, sp, #8
 8003e78:	0005      	movs	r5, r0
 8003e7a:	000c      	movs	r4, r1
 8003e7c:	0010      	movs	r0, r2
 8003e7e:	0019      	movs	r1, r3
 8003e80:	1dbb      	adds	r3, r7, #6
 8003e82:	1c2a      	adds	r2, r5, #0
 8003e84:	801a      	strh	r2, [r3, #0]
 8003e86:	1d3b      	adds	r3, r7, #4
 8003e88:	1c22      	adds	r2, r4, #0
 8003e8a:	801a      	strh	r2, [r3, #0]
 8003e8c:	1cbb      	adds	r3, r7, #2
 8003e8e:	1c02      	adds	r2, r0, #0
 8003e90:	801a      	strh	r2, [r3, #0]
 8003e92:	003b      	movs	r3, r7
 8003e94:	1c0a      	adds	r2, r1, #0
 8003e96:	801a      	strh	r2, [r3, #0]
    if(x0 == x1){
 8003e98:	1dba      	adds	r2, r7, #6
 8003e9a:	1cbb      	adds	r3, r7, #2
 8003e9c:	2100      	movs	r1, #0
 8003e9e:	5e52      	ldrsh	r2, [r2, r1]
 8003ea0:	2100      	movs	r1, #0
 8003ea2:	5e5b      	ldrsh	r3, [r3, r1]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d12a      	bne.n	8003efe <drawLine+0x8c>
        if(y0 > y1) _swap_int16_t(y0, y1);
 8003ea8:	1d3a      	adds	r2, r7, #4
 8003eaa:	003b      	movs	r3, r7
 8003eac:	2100      	movs	r1, #0
 8003eae:	5e52      	ldrsh	r2, [r2, r1]
 8003eb0:	2100      	movs	r1, #0
 8003eb2:	5e5b      	ldrsh	r3, [r3, r1]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	dd0c      	ble.n	8003ed2 <drawLine+0x60>
 8003eb8:	210c      	movs	r1, #12
 8003eba:	187b      	adds	r3, r7, r1
 8003ebc:	1d3a      	adds	r2, r7, #4
 8003ebe:	8812      	ldrh	r2, [r2, #0]
 8003ec0:	801a      	strh	r2, [r3, #0]
 8003ec2:	1d3b      	adds	r3, r7, #4
 8003ec4:	003a      	movs	r2, r7
 8003ec6:	8812      	ldrh	r2, [r2, #0]
 8003ec8:	801a      	strh	r2, [r3, #0]
 8003eca:	003b      	movs	r3, r7
 8003ecc:	187a      	adds	r2, r7, r1
 8003ece:	8812      	ldrh	r2, [r2, #0]
 8003ed0:	801a      	strh	r2, [r3, #0]
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
 8003ed2:	003b      	movs	r3, r7
 8003ed4:	881a      	ldrh	r2, [r3, #0]
 8003ed6:	1d3b      	adds	r3, r7, #4
 8003ed8:	881b      	ldrh	r3, [r3, #0]
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	3301      	adds	r3, #1
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	b21a      	sxth	r2, r3
 8003ee4:	2320      	movs	r3, #32
 8003ee6:	18fb      	adds	r3, r7, r3
 8003ee8:	881c      	ldrh	r4, [r3, #0]
 8003eea:	1d3b      	adds	r3, r7, #4
 8003eec:	2100      	movs	r1, #0
 8003eee:	5e59      	ldrsh	r1, [r3, r1]
 8003ef0:	1dbb      	adds	r3, r7, #6
 8003ef2:	2000      	movs	r0, #0
 8003ef4:	5e18      	ldrsh	r0, [r3, r0]
 8003ef6:	0023      	movs	r3, r4
 8003ef8:	f7ff ff5d 	bl	8003db6 <drawFastVLine>
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
    } else {
        writeLine(x0, y0, x1, y1, color);
    }
}
 8003efc:	e045      	b.n	8003f8a <drawLine+0x118>
    } else if(y0 == y1){
 8003efe:	1d3a      	adds	r2, r7, #4
 8003f00:	003b      	movs	r3, r7
 8003f02:	2100      	movs	r1, #0
 8003f04:	5e52      	ldrsh	r2, [r2, r1]
 8003f06:	2100      	movs	r1, #0
 8003f08:	5e5b      	ldrsh	r3, [r3, r1]
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d12a      	bne.n	8003f64 <drawLine+0xf2>
        if(x0 > x1) _swap_int16_t(x0, x1);
 8003f0e:	1dba      	adds	r2, r7, #6
 8003f10:	1cbb      	adds	r3, r7, #2
 8003f12:	2100      	movs	r1, #0
 8003f14:	5e52      	ldrsh	r2, [r2, r1]
 8003f16:	2100      	movs	r1, #0
 8003f18:	5e5b      	ldrsh	r3, [r3, r1]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	dd0c      	ble.n	8003f38 <drawLine+0xc6>
 8003f1e:	210e      	movs	r1, #14
 8003f20:	187b      	adds	r3, r7, r1
 8003f22:	1dba      	adds	r2, r7, #6
 8003f24:	8812      	ldrh	r2, [r2, #0]
 8003f26:	801a      	strh	r2, [r3, #0]
 8003f28:	1dbb      	adds	r3, r7, #6
 8003f2a:	1cba      	adds	r2, r7, #2
 8003f2c:	8812      	ldrh	r2, [r2, #0]
 8003f2e:	801a      	strh	r2, [r3, #0]
 8003f30:	1cbb      	adds	r3, r7, #2
 8003f32:	187a      	adds	r2, r7, r1
 8003f34:	8812      	ldrh	r2, [r2, #0]
 8003f36:	801a      	strh	r2, [r3, #0]
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
 8003f38:	1cbb      	adds	r3, r7, #2
 8003f3a:	881a      	ldrh	r2, [r3, #0]
 8003f3c:	1dbb      	adds	r3, r7, #6
 8003f3e:	881b      	ldrh	r3, [r3, #0]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	3301      	adds	r3, #1
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	b21a      	sxth	r2, r3
 8003f4a:	2320      	movs	r3, #32
 8003f4c:	18fb      	adds	r3, r7, r3
 8003f4e:	881c      	ldrh	r4, [r3, #0]
 8003f50:	1d3b      	adds	r3, r7, #4
 8003f52:	2100      	movs	r1, #0
 8003f54:	5e59      	ldrsh	r1, [r3, r1]
 8003f56:	1dbb      	adds	r3, r7, #6
 8003f58:	2000      	movs	r0, #0
 8003f5a:	5e18      	ldrsh	r0, [r3, r0]
 8003f5c:	0023      	movs	r3, r4
 8003f5e:	f7ff ff59 	bl	8003e14 <drawFastHLine>
}
 8003f62:	e012      	b.n	8003f8a <drawLine+0x118>
        writeLine(x0, y0, x1, y1, color);
 8003f64:	003b      	movs	r3, r7
 8003f66:	2400      	movs	r4, #0
 8003f68:	5f1c      	ldrsh	r4, [r3, r4]
 8003f6a:	1cbb      	adds	r3, r7, #2
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	5e9a      	ldrsh	r2, [r3, r2]
 8003f70:	1d3b      	adds	r3, r7, #4
 8003f72:	2100      	movs	r1, #0
 8003f74:	5e59      	ldrsh	r1, [r3, r1]
 8003f76:	1dbb      	adds	r3, r7, #6
 8003f78:	2000      	movs	r0, #0
 8003f7a:	5e18      	ldrsh	r0, [r3, r0]
 8003f7c:	2320      	movs	r3, #32
 8003f7e:	18fb      	adds	r3, r7, r3
 8003f80:	881b      	ldrh	r3, [r3, #0]
 8003f82:	9300      	str	r3, [sp, #0]
 8003f84:	0023      	movs	r3, r4
 8003f86:	f7ff fe1d 	bl	8003bc4 <writeLine>
}
 8003f8a:	46c0      	nop			@ (mov r8, r8)
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	b004      	add	sp, #16
 8003f90:	bdb0      	pop	{r4, r5, r7, pc}

08003f92 <drawString>:
void drawString(int16_t x, int16_t y, char* c, int16_t textColor, int16_t bgColor, uint8_t size, uint8_t spacing)
{
 8003f92:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f94:	b089      	sub	sp, #36	@ 0x24
 8003f96:	af02      	add	r7, sp, #8
 8003f98:	0004      	movs	r4, r0
 8003f9a:	0008      	movs	r0, r1
 8003f9c:	60ba      	str	r2, [r7, #8]
 8003f9e:	0019      	movs	r1, r3
 8003fa0:	230e      	movs	r3, #14
 8003fa2:	18fb      	adds	r3, r7, r3
 8003fa4:	1c22      	adds	r2, r4, #0
 8003fa6:	801a      	strh	r2, [r3, #0]
 8003fa8:	230c      	movs	r3, #12
 8003faa:	18fb      	adds	r3, r7, r3
 8003fac:	1c02      	adds	r2, r0, #0
 8003fae:	801a      	strh	r2, [r3, #0]
 8003fb0:	1dbb      	adds	r3, r7, #6
 8003fb2:	1c0a      	adds	r2, r1, #0
 8003fb4:	801a      	strh	r2, [r3, #0]
	uint16_t i =0;
 8003fb6:	2316      	movs	r3, #22
 8003fb8:	18fb      	adds	r3, r7, r3
 8003fba:	2200      	movs	r2, #0
 8003fbc:	801a      	strh	r2, [r3, #0]

	while(c[i])
 8003fbe:	e03f      	b.n	8004040 <drawString+0xae>
	{
		drawChar(x, y, c[i], textColor, bgColor, size);
 8003fc0:	2516      	movs	r5, #22
 8003fc2:	197b      	adds	r3, r7, r5
 8003fc4:	881b      	ldrh	r3, [r3, #0]
 8003fc6:	68ba      	ldr	r2, [r7, #8]
 8003fc8:	18d3      	adds	r3, r2, r3
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	469c      	mov	ip, r3
 8003fce:	1dbb      	adds	r3, r7, #6
 8003fd0:	2400      	movs	r4, #0
 8003fd2:	5f1c      	ldrsh	r4, [r3, r4]
 8003fd4:	230c      	movs	r3, #12
 8003fd6:	18fb      	adds	r3, r7, r3
 8003fd8:	2100      	movs	r1, #0
 8003fda:	5e59      	ldrsh	r1, [r3, r1]
 8003fdc:	260e      	movs	r6, #14
 8003fde:	19bb      	adds	r3, r7, r6
 8003fe0:	2000      	movs	r0, #0
 8003fe2:	5e18      	ldrsh	r0, [r3, r0]
 8003fe4:	232c      	movs	r3, #44	@ 0x2c
 8003fe6:	2208      	movs	r2, #8
 8003fe8:	189b      	adds	r3, r3, r2
 8003fea:	19db      	adds	r3, r3, r7
 8003fec:	781b      	ldrb	r3, [r3, #0]
 8003fee:	9301      	str	r3, [sp, #4]
 8003ff0:	2328      	movs	r3, #40	@ 0x28
 8003ff2:	189b      	adds	r3, r3, r2
 8003ff4:	19db      	adds	r3, r3, r7
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	5e9b      	ldrsh	r3, [r3, r2]
 8003ffa:	9300      	str	r3, [sp, #0]
 8003ffc:	0023      	movs	r3, r4
 8003ffe:	4662      	mov	r2, ip
 8004000:	f000 f82c 	bl	800405c <drawChar>
		x+=(size*6)+spacing;
 8004004:	232c      	movs	r3, #44	@ 0x2c
 8004006:	2108      	movs	r1, #8
 8004008:	185b      	adds	r3, r3, r1
 800400a:	19db      	adds	r3, r3, r7
 800400c:	781b      	ldrb	r3, [r3, #0]
 800400e:	b29b      	uxth	r3, r3
 8004010:	1c1a      	adds	r2, r3, #0
 8004012:	1c13      	adds	r3, r2, #0
 8004014:	18db      	adds	r3, r3, r3
 8004016:	189b      	adds	r3, r3, r2
 8004018:	18db      	adds	r3, r3, r3
 800401a:	b29a      	uxth	r2, r3
 800401c:	2330      	movs	r3, #48	@ 0x30
 800401e:	185b      	adds	r3, r3, r1
 8004020:	19db      	adds	r3, r3, r7
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	b29b      	uxth	r3, r3
 8004026:	18d3      	adds	r3, r2, r3
 8004028:	b29a      	uxth	r2, r3
 800402a:	19bb      	adds	r3, r7, r6
 800402c:	881b      	ldrh	r3, [r3, #0]
 800402e:	18d3      	adds	r3, r2, r3
 8004030:	b29a      	uxth	r2, r3
 8004032:	19bb      	adds	r3, r7, r6
 8004034:	801a      	strh	r2, [r3, #0]
		i++;
 8004036:	197b      	adds	r3, r7, r5
 8004038:	881a      	ldrh	r2, [r3, #0]
 800403a:	197b      	adds	r3, r7, r5
 800403c:	3201      	adds	r2, #1
 800403e:	801a      	strh	r2, [r3, #0]
	while(c[i])
 8004040:	2316      	movs	r3, #22
 8004042:	18fb      	adds	r3, r7, r3
 8004044:	881b      	ldrh	r3, [r3, #0]
 8004046:	68ba      	ldr	r2, [r7, #8]
 8004048:	18d3      	adds	r3, r2, r3
 800404a:	781b      	ldrb	r3, [r3, #0]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d1b7      	bne.n	8003fc0 <drawString+0x2e>
	}
}
 8004050:	46c0      	nop			@ (mov r8, r8)
 8004052:	46c0      	nop			@ (mov r8, r8)
 8004054:	46bd      	mov	sp, r7
 8004056:	b007      	add	sp, #28
 8004058:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800405c <drawChar>:
void drawChar(int16_t x, int16_t y, char c, int16_t textColor, int16_t bgColor, uint8_t size){
 800405c:	b5b0      	push	{r4, r5, r7, lr}
 800405e:	b088      	sub	sp, #32
 8004060:	af02      	add	r7, sp, #8
 8004062:	0005      	movs	r5, r0
 8004064:	000c      	movs	r4, r1
 8004066:	0010      	movs	r0, r2
 8004068:	0019      	movs	r1, r3
 800406a:	1dbb      	adds	r3, r7, #6
 800406c:	1c2a      	adds	r2, r5, #0
 800406e:	801a      	strh	r2, [r3, #0]
 8004070:	1d3b      	adds	r3, r7, #4
 8004072:	1c22      	adds	r2, r4, #0
 8004074:	801a      	strh	r2, [r3, #0]
 8004076:	1cfb      	adds	r3, r7, #3
 8004078:	1c02      	adds	r2, r0, #0
 800407a:	701a      	strb	r2, [r3, #0]
 800407c:	003b      	movs	r3, r7
 800407e:	1c0a      	adds	r2, r1, #0
 8004080:	801a      	strh	r2, [r3, #0]
     //(y >= _height))           //||
     //((x + 5 * size - 1) < 0) ||
     //((y + 8 * size - 1) < 0))
   // return;

  for (i=0; i<6; i++ ) {
 8004082:	2300      	movs	r3, #0
 8004084:	613b      	str	r3, [r7, #16]
 8004086:	e0bd      	b.n	8004204 <drawChar+0x1a8>
    if ((i) == 5)
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	2b05      	cmp	r3, #5
 800408c:	d104      	bne.n	8004098 <drawChar+0x3c>
      line = 0x0;
 800408e:	2317      	movs	r3, #23
 8004090:	18fb      	adds	r3, r7, r3
 8004092:	2200      	movs	r2, #0
 8004094:	701a      	strb	r2, [r3, #0]
 8004096:	e00b      	b.n	80040b0 <drawChar+0x54>
    else
      line = Font[(c*5)+(i)];
 8004098:	1cfb      	adds	r3, r7, #3
 800409a:	781a      	ldrb	r2, [r3, #0]
 800409c:	0013      	movs	r3, r2
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	189a      	adds	r2, r3, r2
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	18d2      	adds	r2, r2, r3
 80040a6:	2317      	movs	r3, #23
 80040a8:	18fb      	adds	r3, r7, r3
 80040aa:	495b      	ldr	r1, [pc, #364]	@ (8004218 <drawChar+0x1bc>)
 80040ac:	5c8a      	ldrb	r2, [r1, r2]
 80040ae:	701a      	strb	r2, [r3, #0]
    for (j = 0; j<8; j++) {
 80040b0:	2300      	movs	r3, #0
 80040b2:	60fb      	str	r3, [r7, #12]
 80040b4:	e09f      	b.n	80041f6 <drawChar+0x19a>
      if (line & 0x1) {
 80040b6:	2317      	movs	r3, #23
 80040b8:	18fb      	adds	r3, r7, r3
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	2201      	movs	r2, #1
 80040be:	4013      	ands	r3, r2
 80040c0:	d043      	beq.n	800414a <drawChar+0xee>
        if (size == 1)
 80040c2:	232c      	movs	r3, #44	@ 0x2c
 80040c4:	18fb      	adds	r3, r7, r3
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d115      	bne.n	80040f8 <drawChar+0x9c>
          writePixel(x+(i), y+(7-j), textColor);
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	b29a      	uxth	r2, r3
 80040d0:	1dbb      	adds	r3, r7, #6
 80040d2:	881b      	ldrh	r3, [r3, #0]
 80040d4:	18d3      	adds	r3, r2, r3
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	b218      	sxth	r0, r3
 80040da:	1d3b      	adds	r3, r7, #4
 80040dc:	881a      	ldrh	r2, [r3, #0]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	3307      	adds	r3, #7
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	b219      	sxth	r1, r3
 80040ec:	003b      	movs	r3, r7
 80040ee:	881b      	ldrh	r3, [r3, #0]
 80040f0:	001a      	movs	r2, r3
 80040f2:	f7ff fd49 	bl	8003b88 <writePixel>
 80040f6:	e075      	b.n	80041e4 <drawChar+0x188>
        else {
          fillRect(x+((i)*size), y+((7-j)*size), size, size, textColor);
 80040f8:	212c      	movs	r1, #44	@ 0x2c
 80040fa:	187b      	adds	r3, r7, r1
 80040fc:	781b      	ldrb	r3, [r3, #0]
 80040fe:	b29b      	uxth	r3, r3
 8004100:	693a      	ldr	r2, [r7, #16]
 8004102:	b292      	uxth	r2, r2
 8004104:	4353      	muls	r3, r2
 8004106:	b29a      	uxth	r2, r3
 8004108:	1dbb      	adds	r3, r7, #6
 800410a:	881b      	ldrh	r3, [r3, #0]
 800410c:	18d3      	adds	r3, r2, r3
 800410e:	b29b      	uxth	r3, r3
 8004110:	b218      	sxth	r0, r3
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2207      	movs	r2, #7
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	b29b      	uxth	r3, r3
 800411a:	000c      	movs	r4, r1
 800411c:	187a      	adds	r2, r7, r1
 800411e:	7812      	ldrb	r2, [r2, #0]
 8004120:	b292      	uxth	r2, r2
 8004122:	4353      	muls	r3, r2
 8004124:	b29a      	uxth	r2, r3
 8004126:	1d3b      	adds	r3, r7, #4
 8004128:	881b      	ldrh	r3, [r3, #0]
 800412a:	18d3      	adds	r3, r2, r3
 800412c:	b29b      	uxth	r3, r3
 800412e:	b219      	sxth	r1, r3
 8004130:	193b      	adds	r3, r7, r4
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	b21a      	sxth	r2, r3
 8004136:	193b      	adds	r3, r7, r4
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	b21c      	sxth	r4, r3
 800413c:	003b      	movs	r3, r7
 800413e:	881b      	ldrh	r3, [r3, #0]
 8004140:	9300      	str	r3, [sp, #0]
 8004142:	0023      	movs	r3, r4
 8004144:	f7ff fc98 	bl	8003a78 <fillRect>
 8004148:	e04c      	b.n	80041e4 <drawChar+0x188>
        }
      } else if (bgColor != textColor) {
 800414a:	2428      	movs	r4, #40	@ 0x28
 800414c:	193b      	adds	r3, r7, r4
 800414e:	0039      	movs	r1, r7
 8004150:	2200      	movs	r2, #0
 8004152:	5e9a      	ldrsh	r2, [r3, r2]
 8004154:	2300      	movs	r3, #0
 8004156:	5ecb      	ldrsh	r3, [r1, r3]
 8004158:	429a      	cmp	r2, r3
 800415a:	d043      	beq.n	80041e4 <drawChar+0x188>
        if (size == 1) // default size
 800415c:	232c      	movs	r3, #44	@ 0x2c
 800415e:	18fb      	adds	r3, r7, r3
 8004160:	781b      	ldrb	r3, [r3, #0]
 8004162:	2b01      	cmp	r3, #1
 8004164:	d115      	bne.n	8004192 <drawChar+0x136>
          writePixel(x+(i), y+(7-j), bgColor);
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	b29a      	uxth	r2, r3
 800416a:	1dbb      	adds	r3, r7, #6
 800416c:	881b      	ldrh	r3, [r3, #0]
 800416e:	18d3      	adds	r3, r2, r3
 8004170:	b29b      	uxth	r3, r3
 8004172:	b218      	sxth	r0, r3
 8004174:	1d3b      	adds	r3, r7, #4
 8004176:	881a      	ldrh	r2, [r3, #0]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	b29b      	uxth	r3, r3
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	b29b      	uxth	r3, r3
 8004180:	3307      	adds	r3, #7
 8004182:	b29b      	uxth	r3, r3
 8004184:	b219      	sxth	r1, r3
 8004186:	193b      	adds	r3, r7, r4
 8004188:	881b      	ldrh	r3, [r3, #0]
 800418a:	001a      	movs	r2, r3
 800418c:	f7ff fcfc 	bl	8003b88 <writePixel>
 8004190:	e028      	b.n	80041e4 <drawChar+0x188>
        else {  // big size
          fillRect(x+(i)*size, y+(7-j)*size, size, size, bgColor);
 8004192:	212c      	movs	r1, #44	@ 0x2c
 8004194:	187b      	adds	r3, r7, r1
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	b29b      	uxth	r3, r3
 800419a:	693a      	ldr	r2, [r7, #16]
 800419c:	b292      	uxth	r2, r2
 800419e:	4353      	muls	r3, r2
 80041a0:	b29a      	uxth	r2, r3
 80041a2:	1dbb      	adds	r3, r7, #6
 80041a4:	881b      	ldrh	r3, [r3, #0]
 80041a6:	18d3      	adds	r3, r2, r3
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	b218      	sxth	r0, r3
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2207      	movs	r2, #7
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	000c      	movs	r4, r1
 80041b6:	187a      	adds	r2, r7, r1
 80041b8:	7812      	ldrb	r2, [r2, #0]
 80041ba:	b292      	uxth	r2, r2
 80041bc:	4353      	muls	r3, r2
 80041be:	b29a      	uxth	r2, r3
 80041c0:	1d3b      	adds	r3, r7, #4
 80041c2:	881b      	ldrh	r3, [r3, #0]
 80041c4:	18d3      	adds	r3, r2, r3
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	b219      	sxth	r1, r3
 80041ca:	193b      	adds	r3, r7, r4
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	b21a      	sxth	r2, r3
 80041d0:	193b      	adds	r3, r7, r4
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	b21c      	sxth	r4, r3
 80041d6:	2328      	movs	r3, #40	@ 0x28
 80041d8:	18fb      	adds	r3, r7, r3
 80041da:	881b      	ldrh	r3, [r3, #0]
 80041dc:	9300      	str	r3, [sp, #0]
 80041de:	0023      	movs	r3, r4
 80041e0:	f7ff fc4a 	bl	8003a78 <fillRect>
        }
      }
      line >>= 1;
 80041e4:	2217      	movs	r2, #23
 80041e6:	18bb      	adds	r3, r7, r2
 80041e8:	18ba      	adds	r2, r7, r2
 80041ea:	7812      	ldrb	r2, [r2, #0]
 80041ec:	0852      	lsrs	r2, r2, #1
 80041ee:	701a      	strb	r2, [r3, #0]
    for (j = 0; j<8; j++) {
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	3301      	adds	r3, #1
 80041f4:	60fb      	str	r3, [r7, #12]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2b07      	cmp	r3, #7
 80041fa:	dc00      	bgt.n	80041fe <drawChar+0x1a2>
 80041fc:	e75b      	b.n	80040b6 <drawChar+0x5a>
  for (i=0; i<6; i++ ) {
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	3301      	adds	r3, #1
 8004202:	613b      	str	r3, [r7, #16]
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	2b05      	cmp	r3, #5
 8004208:	dc00      	bgt.n	800420c <drawChar+0x1b0>
 800420a:	e73d      	b.n	8004088 <drawChar+0x2c>
    }
  }
}
 800420c:	46c0      	nop			@ (mov r8, r8)
 800420e:	46c0      	nop			@ (mov r8, r8)
 8004210:	46bd      	mov	sp, r7
 8004212:	b006      	add	sp, #24
 8004214:	bdb0      	pop	{r4, r5, r7, pc}
 8004216:	46c0      	nop			@ (mov r8, r8)
 8004218:	0801194c 	.word	0x0801194c

0800421c <fillScreen>:
        if(a > b) _swap_int16_t(a,b);
        drawFastHLine(a, y, b-a+1, color);
    }
}

void fillScreen(uint16_t color) {
 800421c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800421e:	b091      	sub	sp, #68	@ 0x44
 8004220:	af04      	add	r7, sp, #16
 8004222:	231e      	movs	r3, #30
 8004224:	18f9      	adds	r1, r7, r3
 8004226:	8008      	strh	r0, [r1, #0]
 8004228:	4669      	mov	r1, sp
 800422a:	000e      	movs	r6, r1
    uint16_t pallette[] = {color};
 800422c:	210c      	movs	r1, #12
 800422e:	2318      	movs	r3, #24
 8004230:	18cb      	adds	r3, r1, r3
 8004232:	19d9      	adds	r1, r3, r7
 8004234:	231e      	movs	r3, #30
 8004236:	18f8      	adds	r0, r7, r3
 8004238:	8800      	ldrh	r0, [r0, #0]
 800423a:	8008      	strh	r0, [r1, #0]
    uint16_t pixels[_width*_height][2];
 800423c:	492f      	ldr	r1, [pc, #188]	@ (80042fc <fillScreen+0xe0>)
 800423e:	2300      	movs	r3, #0
 8004240:	5ec9      	ldrsh	r1, [r1, r3]
 8004242:	0008      	movs	r0, r1
 8004244:	492e      	ldr	r1, [pc, #184]	@ (8004300 <fillScreen+0xe4>)
 8004246:	2300      	movs	r3, #0
 8004248:	5ec9      	ldrsh	r1, [r1, r3]
 800424a:	4341      	muls	r1, r0
 800424c:	1e48      	subs	r0, r1, #1
 800424e:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8004250:	0008      	movs	r0, r1
 8004252:	6138      	str	r0, [r7, #16]
 8004254:	2000      	movs	r0, #0
 8004256:	6178      	str	r0, [r7, #20]
 8004258:	693a      	ldr	r2, [r7, #16]
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	0010      	movs	r0, r2
 800425e:	0ec0      	lsrs	r0, r0, #27
 8004260:	613a      	str	r2, [r7, #16]
 8004262:	617b      	str	r3, [r7, #20]
 8004264:	015d      	lsls	r5, r3, #5
 8004266:	4305      	orrs	r5, r0
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	015c      	lsls	r4, r3, #5
 800426c:	0008      	movs	r0, r1
 800426e:	6038      	str	r0, [r7, #0]
 8004270:	2000      	movs	r0, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	683c      	ldr	r4, [r7, #0]
 8004276:	687d      	ldr	r5, [r7, #4]
 8004278:	0023      	movs	r3, r4
 800427a:	0ed8      	lsrs	r0, r3, #27
 800427c:	002b      	movs	r3, r5
 800427e:	015b      	lsls	r3, r3, #5
 8004280:	60fb      	str	r3, [r7, #12]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	4303      	orrs	r3, r0
 8004286:	60fb      	str	r3, [r7, #12]
 8004288:	0023      	movs	r3, r4
 800428a:	015b      	lsls	r3, r3, #5
 800428c:	60bb      	str	r3, [r7, #8]
 800428e:	000b      	movs	r3, r1
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	3307      	adds	r3, #7
 8004294:	08db      	lsrs	r3, r3, #3
 8004296:	00db      	lsls	r3, r3, #3
 8004298:	466a      	mov	r2, sp
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	469d      	mov	sp, r3
 800429e:	ab04      	add	r3, sp, #16
 80042a0:	3301      	adds	r3, #1
 80042a2:	085b      	lsrs	r3, r3, #1
 80042a4:	005b      	lsls	r3, r3, #1
 80042a6:	62bb      	str	r3, [r7, #40]	@ 0x28

    pixels[0][0] = 0;
 80042a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042aa:	2200      	movs	r2, #0
 80042ac:	801a      	strh	r2, [r3, #0]
    pixels[0][1] = _width*_height;
 80042ae:	4b13      	ldr	r3, [pc, #76]	@ (80042fc <fillScreen+0xe0>)
 80042b0:	2200      	movs	r2, #0
 80042b2:	5e9b      	ldrsh	r3, [r3, r2]
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	4a12      	ldr	r2, [pc, #72]	@ (8004300 <fillScreen+0xe4>)
 80042b8:	2000      	movs	r0, #0
 80042ba:	5e12      	ldrsh	r2, [r2, r0]
 80042bc:	b292      	uxth	r2, r2
 80042be:	4353      	muls	r3, r2
 80042c0:	b29a      	uxth	r2, r3
 80042c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042c4:	805a      	strh	r2, [r3, #2]
    drawImage(pixels, pallette, 0, 0, _width, _height, 1);
 80042c6:	4b0d      	ldr	r3, [pc, #52]	@ (80042fc <fillScreen+0xe0>)
 80042c8:	2200      	movs	r2, #0
 80042ca:	5e9b      	ldrsh	r3, [r3, r2]
 80042cc:	001a      	movs	r2, r3
 80042ce:	4b0c      	ldr	r3, [pc, #48]	@ (8004300 <fillScreen+0xe4>)
 80042d0:	2000      	movs	r0, #0
 80042d2:	5e1b      	ldrsh	r3, [r3, r0]
 80042d4:	001c      	movs	r4, r3
 80042d6:	210c      	movs	r1, #12
 80042d8:	2318      	movs	r3, #24
 80042da:	18cb      	adds	r3, r1, r3
 80042dc:	19d9      	adds	r1, r3, r7
 80042de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80042e0:	2301      	movs	r3, #1
 80042e2:	9302      	str	r3, [sp, #8]
 80042e4:	9401      	str	r4, [sp, #4]
 80042e6:	9200      	str	r2, [sp, #0]
 80042e8:	2300      	movs	r3, #0
 80042ea:	2200      	movs	r2, #0
 80042ec:	f000 f80a 	bl	8004304 <drawImage>
 80042f0:	46b5      	mov	sp, r6
	//fillRect(0, 0, _width, _height, color);
}
 80042f2:	46c0      	nop			@ (mov r8, r8)
 80042f4:	46bd      	mov	sp, r7
 80042f6:	b00d      	add	sp, #52	@ 0x34
 80042f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042fa:	46c0      	nop			@ (mov r8, r8)
 80042fc:	2000027c 	.word	0x2000027c
 8004300:	2000027e 	.word	0x2000027e

08004304 <drawImage>:

void drawImage(uint16_t image[][2], uint16_t palette[], uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t c)
{
 8004304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004306:	46c6      	mov	lr, r8
 8004308:	b500      	push	{lr}
 800430a:	b092      	sub	sp, #72	@ 0x48
 800430c:	af02      	add	r7, sp, #8
 800430e:	6278      	str	r0, [r7, #36]	@ 0x24
 8004310:	6239      	str	r1, [r7, #32]
 8004312:	0019      	movs	r1, r3
 8004314:	231e      	movs	r3, #30
 8004316:	18fb      	adds	r3, r7, r3
 8004318:	801a      	strh	r2, [r3, #0]
 800431a:	231c      	movs	r3, #28
 800431c:	18fb      	adds	r3, r7, r3
 800431e:	1c0a      	adds	r2, r1, #0
 8004320:	801a      	strh	r2, [r3, #0]
 8004322:	466b      	mov	r3, sp
 8004324:	4698      	mov	r8, r3
	uint16_t i;
	uint16_t j;
	uint16_t totalInd =0;
 8004326:	2322      	movs	r3, #34	@ 0x22
 8004328:	2118      	movs	r1, #24
 800432a:	185b      	adds	r3, r3, r1
 800432c:	19db      	adds	r3, r3, r7
 800432e:	2200      	movs	r2, #0
 8004330:	801a      	strh	r2, [r3, #0]
	uint16_t ind;
	uint16_t count;
	uint16_t pixelBuffer[w*h];
 8004332:	2340      	movs	r3, #64	@ 0x40
 8004334:	185b      	adds	r3, r3, r1
 8004336:	19db      	adds	r3, r3, r7
 8004338:	881b      	ldrh	r3, [r3, #0]
 800433a:	2244      	movs	r2, #68	@ 0x44
 800433c:	1852      	adds	r2, r2, r1
 800433e:	19d2      	adds	r2, r2, r7
 8004340:	8812      	ldrh	r2, [r2, #0]
 8004342:	4353      	muls	r3, r2
 8004344:	1e5a      	subs	r2, r3, #1
 8004346:	637a      	str	r2, [r7, #52]	@ 0x34
 8004348:	001a      	movs	r2, r3
 800434a:	60ba      	str	r2, [r7, #8]
 800434c:	2200      	movs	r2, #0
 800434e:	60fa      	str	r2, [r7, #12]
 8004350:	68b8      	ldr	r0, [r7, #8]
 8004352:	68f9      	ldr	r1, [r7, #12]
 8004354:	0002      	movs	r2, r0
 8004356:	0f12      	lsrs	r2, r2, #28
 8004358:	000e      	movs	r6, r1
 800435a:	0136      	lsls	r6, r6, #4
 800435c:	617e      	str	r6, [r7, #20]
 800435e:	697e      	ldr	r6, [r7, #20]
 8004360:	4316      	orrs	r6, r2
 8004362:	617e      	str	r6, [r7, #20]
 8004364:	0002      	movs	r2, r0
 8004366:	0112      	lsls	r2, r2, #4
 8004368:	613a      	str	r2, [r7, #16]
 800436a:	001a      	movs	r2, r3
 800436c:	603a      	str	r2, [r7, #0]
 800436e:	2200      	movs	r2, #0
 8004370:	607a      	str	r2, [r7, #4]
 8004372:	6838      	ldr	r0, [r7, #0]
 8004374:	6879      	ldr	r1, [r7, #4]
 8004376:	0002      	movs	r2, r0
 8004378:	0f12      	lsrs	r2, r2, #28
 800437a:	000e      	movs	r6, r1
 800437c:	0135      	lsls	r5, r6, #4
 800437e:	4315      	orrs	r5, r2
 8004380:	0002      	movs	r2, r0
 8004382:	0114      	lsls	r4, r2, #4
 8004384:	005b      	lsls	r3, r3, #1
 8004386:	3307      	adds	r3, #7
 8004388:	08db      	lsrs	r3, r3, #3
 800438a:	00db      	lsls	r3, r3, #3
 800438c:	466a      	mov	r2, sp
 800438e:	1ad3      	subs	r3, r2, r3
 8004390:	469d      	mov	sp, r3
 8004392:	ab02      	add	r3, sp, #8
 8004394:	3301      	adds	r3, #1
 8004396:	085b      	lsrs	r3, r3, #1
 8004398:	005b      	lsls	r3, r3, #1
 800439a:	633b      	str	r3, [r7, #48]	@ 0x30

for(i=0; i<c; i++)
 800439c:	2326      	movs	r3, #38	@ 0x26
 800439e:	2118      	movs	r1, #24
 80043a0:	185b      	adds	r3, r3, r1
 80043a2:	19db      	adds	r3, r3, r7
 80043a4:	2200      	movs	r2, #0
 80043a6:	801a      	strh	r2, [r3, #0]
 80043a8:	e05e      	b.n	8004468 <drawImage+0x164>
{
	ind = image[i][0];
 80043aa:	2126      	movs	r1, #38	@ 0x26
 80043ac:	2018      	movs	r0, #24
 80043ae:	180b      	adds	r3, r1, r0
 80043b0:	19db      	adds	r3, r3, r7
 80043b2:	881b      	ldrh	r3, [r3, #0]
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043b8:	18d2      	adds	r2, r2, r3
 80043ba:	2316      	movs	r3, #22
 80043bc:	181b      	adds	r3, r3, r0
 80043be:	19db      	adds	r3, r3, r7
 80043c0:	8812      	ldrh	r2, [r2, #0]
 80043c2:	801a      	strh	r2, [r3, #0]
	count = image[i][1];
 80043c4:	180b      	adds	r3, r1, r0
 80043c6:	19db      	adds	r3, r3, r7
 80043c8:	881b      	ldrh	r3, [r3, #0]
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043ce:	18d2      	adds	r2, r2, r3
 80043d0:	2314      	movs	r3, #20
 80043d2:	181b      	adds	r3, r3, r0
 80043d4:	19db      	adds	r3, r3, r7
 80043d6:	8852      	ldrh	r2, [r2, #2]
 80043d8:	801a      	strh	r2, [r3, #0]

	for(j=0; j<count; j++)
 80043da:	2324      	movs	r3, #36	@ 0x24
 80043dc:	181b      	adds	r3, r3, r0
 80043de:	19db      	adds	r3, r3, r7
 80043e0:	2200      	movs	r2, #0
 80043e2:	801a      	strh	r2, [r3, #0]
 80043e4:	e02d      	b.n	8004442 <drawImage+0x13e>
	{
		pixelBuffer[totalInd++] = ((palette[ind] & 0xFF)<<8) | (palette[ind] >> 8);
 80043e6:	2116      	movs	r1, #22
 80043e8:	2018      	movs	r0, #24
 80043ea:	180b      	adds	r3, r1, r0
 80043ec:	19db      	adds	r3, r3, r7
 80043ee:	881b      	ldrh	r3, [r3, #0]
 80043f0:	005b      	lsls	r3, r3, #1
 80043f2:	6a3a      	ldr	r2, [r7, #32]
 80043f4:	18d3      	adds	r3, r2, r3
 80043f6:	881b      	ldrh	r3, [r3, #0]
 80043f8:	b21b      	sxth	r3, r3
 80043fa:	021b      	lsls	r3, r3, #8
 80043fc:	b21a      	sxth	r2, r3
 80043fe:	180b      	adds	r3, r1, r0
 8004400:	19db      	adds	r3, r3, r7
 8004402:	881b      	ldrh	r3, [r3, #0]
 8004404:	005b      	lsls	r3, r3, #1
 8004406:	6a39      	ldr	r1, [r7, #32]
 8004408:	18cb      	adds	r3, r1, r3
 800440a:	881b      	ldrh	r3, [r3, #0]
 800440c:	0a1b      	lsrs	r3, r3, #8
 800440e:	b29b      	uxth	r3, r3
 8004410:	b21b      	sxth	r3, r3
 8004412:	4313      	orrs	r3, r2
 8004414:	b219      	sxth	r1, r3
 8004416:	2222      	movs	r2, #34	@ 0x22
 8004418:	1813      	adds	r3, r2, r0
 800441a:	19db      	adds	r3, r3, r7
 800441c:	881b      	ldrh	r3, [r3, #0]
 800441e:	0004      	movs	r4, r0
 8004420:	1812      	adds	r2, r2, r0
 8004422:	19d2      	adds	r2, r2, r7
 8004424:	1c58      	adds	r0, r3, #1
 8004426:	8010      	strh	r0, [r2, #0]
 8004428:	001a      	movs	r2, r3
 800442a:	b289      	uxth	r1, r1
 800442c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800442e:	0052      	lsls	r2, r2, #1
 8004430:	52d1      	strh	r1, [r2, r3]
	for(j=0; j<count; j++)
 8004432:	2124      	movs	r1, #36	@ 0x24
 8004434:	190b      	adds	r3, r1, r4
 8004436:	19db      	adds	r3, r3, r7
 8004438:	881a      	ldrh	r2, [r3, #0]
 800443a:	190b      	adds	r3, r1, r4
 800443c:	19db      	adds	r3, r3, r7
 800443e:	3201      	adds	r2, #1
 8004440:	801a      	strh	r2, [r3, #0]
 8004442:	2324      	movs	r3, #36	@ 0x24
 8004444:	2018      	movs	r0, #24
 8004446:	181b      	adds	r3, r3, r0
 8004448:	19da      	adds	r2, r3, r7
 800444a:	2314      	movs	r3, #20
 800444c:	181b      	adds	r3, r3, r0
 800444e:	19db      	adds	r3, r3, r7
 8004450:	8812      	ldrh	r2, [r2, #0]
 8004452:	881b      	ldrh	r3, [r3, #0]
 8004454:	429a      	cmp	r2, r3
 8004456:	d3c6      	bcc.n	80043e6 <drawImage+0xe2>
for(i=0; i<c; i++)
 8004458:	2126      	movs	r1, #38	@ 0x26
 800445a:	180b      	adds	r3, r1, r0
 800445c:	19db      	adds	r3, r3, r7
 800445e:	881a      	ldrh	r2, [r3, #0]
 8004460:	180b      	adds	r3, r1, r0
 8004462:	19db      	adds	r3, r3, r7
 8004464:	3201      	adds	r2, #1
 8004466:	801a      	strh	r2, [r3, #0]
 8004468:	2326      	movs	r3, #38	@ 0x26
 800446a:	2118      	movs	r1, #24
 800446c:	185b      	adds	r3, r3, r1
 800446e:	19da      	adds	r2, r3, r7
 8004470:	2348      	movs	r3, #72	@ 0x48
 8004472:	185b      	adds	r3, r3, r1
 8004474:	19db      	adds	r3, r3, r7
 8004476:	8812      	ldrh	r2, [r2, #0]
 8004478:	881b      	ldrh	r3, [r3, #0]
 800447a:	429a      	cmp	r2, r3
 800447c:	d395      	bcc.n	80043aa <drawImage+0xa6>
	}
}
ST7735_DrawImage(y, x, w, h, pixelBuffer);
 800447e:	2344      	movs	r3, #68	@ 0x44
 8004480:	185b      	adds	r3, r3, r1
 8004482:	19db      	adds	r3, r3, r7
 8004484:	881c      	ldrh	r4, [r3, #0]
 8004486:	2340      	movs	r3, #64	@ 0x40
 8004488:	185b      	adds	r3, r3, r1
 800448a:	19db      	adds	r3, r3, r7
 800448c:	881a      	ldrh	r2, [r3, #0]
 800448e:	231e      	movs	r3, #30
 8004490:	18fb      	adds	r3, r7, r3
 8004492:	8819      	ldrh	r1, [r3, #0]
 8004494:	231c      	movs	r3, #28
 8004496:	18fb      	adds	r3, r7, r3
 8004498:	8818      	ldrh	r0, [r3, #0]
 800449a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800449c:	9300      	str	r3, [sp, #0]
 800449e:	0023      	movs	r3, r4
 80044a0:	f000 fa32 	bl	8004908 <ST7735_DrawImage>
 80044a4:	46c5      	mov	sp, r8
}
 80044a6:	46c0      	nop			@ (mov r8, r8)
 80044a8:	46bd      	mov	sp, r7
 80044aa:	b010      	add	sp, #64	@ 0x40
 80044ac:	bc80      	pop	{r7}
 80044ae:	46b8      	mov	r8, r7
 80044b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080044b2 <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 80044b2:	b580      	push	{r7, lr}
 80044b4:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 80044b6:	23a0      	movs	r3, #160	@ 0xa0
 80044b8:	05db      	lsls	r3, r3, #23
 80044ba:	2200      	movs	r2, #0
 80044bc:	2120      	movs	r1, #32
 80044be:	0018      	movs	r0, r3
 80044c0:	f005 f9b1 	bl	8009826 <HAL_GPIO_WritePin>
}
 80044c4:	46c0      	nop			@ (mov r8, r8)
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}

080044ca <ST7735_Unselect>:

void ST7735_Unselect()
{
 80044ca:	b580      	push	{r7, lr}
 80044cc:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 80044ce:	23a0      	movs	r3, #160	@ 0xa0
 80044d0:	05db      	lsls	r3, r3, #23
 80044d2:	2201      	movs	r2, #1
 80044d4:	2120      	movs	r1, #32
 80044d6:	0018      	movs	r0, r3
 80044d8:	f005 f9a5 	bl	8009826 <HAL_GPIO_WritePin>
}
 80044dc:	46c0      	nop			@ (mov r8, r8)
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}

080044e2 <ST7735_Reset>:

void ST7735_Reset()
{
 80044e2:	b580      	push	{r7, lr}
 80044e4:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 80044e6:	2380      	movs	r3, #128	@ 0x80
 80044e8:	0219      	lsls	r1, r3, #8
 80044ea:	23a0      	movs	r3, #160	@ 0xa0
 80044ec:	05db      	lsls	r3, r3, #23
 80044ee:	2200      	movs	r2, #0
 80044f0:	0018      	movs	r0, r3
 80044f2:	f005 f998 	bl	8009826 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 80044f6:	2005      	movs	r0, #5
 80044f8:	f004 fd42 	bl	8008f80 <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 80044fc:	2380      	movs	r3, #128	@ 0x80
 80044fe:	0219      	lsls	r1, r3, #8
 8004500:	23a0      	movs	r3, #160	@ 0xa0
 8004502:	05db      	lsls	r3, r3, #23
 8004504:	2201      	movs	r2, #1
 8004506:	0018      	movs	r0, r3
 8004508:	f005 f98d 	bl	8009826 <HAL_GPIO_WritePin>
}
 800450c:	46c0      	nop			@ (mov r8, r8)
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
	...

08004514 <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 8004514:	b580      	push	{r7, lr}
 8004516:	b082      	sub	sp, #8
 8004518:	af00      	add	r7, sp, #0
 800451a:	0002      	movs	r2, r0
 800451c:	1dfb      	adds	r3, r7, #7
 800451e:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 8004520:	23a0      	movs	r3, #160	@ 0xa0
 8004522:	05db      	lsls	r3, r3, #23
 8004524:	2200      	movs	r2, #0
 8004526:	2110      	movs	r1, #16
 8004528:	0018      	movs	r0, r3
 800452a:	f005 f97c 	bl	8009826 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800452e:	2301      	movs	r3, #1
 8004530:	425b      	negs	r3, r3
 8004532:	1df9      	adds	r1, r7, #7
 8004534:	4803      	ldr	r0, [pc, #12]	@ (8004544 <ST7735_WriteCommand+0x30>)
 8004536:	2201      	movs	r2, #1
 8004538:	f007 f9a2 	bl	800b880 <HAL_SPI_Transmit>
}
 800453c:	46c0      	nop			@ (mov r8, r8)
 800453e:	46bd      	mov	sp, r7
 8004540:	b002      	add	sp, #8
 8004542:	bd80      	pop	{r7, pc}
 8004544:	200012fc 	.word	0x200012fc

08004548 <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8004552:	23a0      	movs	r3, #160	@ 0xa0
 8004554:	05db      	lsls	r3, r3, #23
 8004556:	2201      	movs	r2, #1
 8004558:	2110      	movs	r1, #16
 800455a:	0018      	movs	r0, r3
 800455c:	f005 f963 	bl	8009826 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	b29a      	uxth	r2, r3
 8004564:	2301      	movs	r3, #1
 8004566:	425b      	negs	r3, r3
 8004568:	6879      	ldr	r1, [r7, #4]
 800456a:	4803      	ldr	r0, [pc, #12]	@ (8004578 <ST7735_WriteData+0x30>)
 800456c:	f007 f988 	bl	800b880 <HAL_SPI_Transmit>
}
 8004570:	46c0      	nop			@ (mov r8, r8)
 8004572:	46bd      	mov	sp, r7
 8004574:	b002      	add	sp, #8
 8004576:	bd80      	pop	{r7, pc}
 8004578:	200012fc 	.word	0x200012fc

0800457c <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 800457c:	b590      	push	{r4, r7, lr}
 800457e:	b085      	sub	sp, #20
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	1c5a      	adds	r2, r3, #1
 8004588:	607a      	str	r2, [r7, #4]
 800458a:	220f      	movs	r2, #15
 800458c:	18ba      	adds	r2, r7, r2
 800458e:	781b      	ldrb	r3, [r3, #0]
 8004590:	7013      	strb	r3, [r2, #0]
    while(numCommands--) {
 8004592:	e04a      	b.n	800462a <DisplayInit+0xae>
        uint8_t cmd = *addr++;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	1c5a      	adds	r2, r3, #1
 8004598:	607a      	str	r2, [r7, #4]
 800459a:	210b      	movs	r1, #11
 800459c:	187a      	adds	r2, r7, r1
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	7013      	strb	r3, [r2, #0]
        ST7735_WriteCommand(cmd);
 80045a2:	187b      	adds	r3, r7, r1
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	0018      	movs	r0, r3
 80045a8:	f7ff ffb4 	bl	8004514 <ST7735_WriteCommand>

        numArgs = *addr++;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	1c5a      	adds	r2, r3, #1
 80045b0:	607a      	str	r2, [r7, #4]
 80045b2:	200a      	movs	r0, #10
 80045b4:	183a      	adds	r2, r7, r0
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	7013      	strb	r3, [r2, #0]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 80045ba:	183b      	adds	r3, r7, r0
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	b29a      	uxth	r2, r3
 80045c0:	230c      	movs	r3, #12
 80045c2:	18fb      	adds	r3, r7, r3
 80045c4:	2180      	movs	r1, #128	@ 0x80
 80045c6:	400a      	ands	r2, r1
 80045c8:	801a      	strh	r2, [r3, #0]
        numArgs &= ~DELAY;
 80045ca:	183b      	adds	r3, r7, r0
 80045cc:	183a      	adds	r2, r7, r0
 80045ce:	7812      	ldrb	r2, [r2, #0]
 80045d0:	217f      	movs	r1, #127	@ 0x7f
 80045d2:	400a      	ands	r2, r1
 80045d4:	701a      	strb	r2, [r3, #0]
        if(numArgs) {
 80045d6:	183b      	adds	r3, r7, r0
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d00c      	beq.n	80045f8 <DisplayInit+0x7c>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 80045de:	0004      	movs	r4, r0
 80045e0:	183b      	adds	r3, r7, r0
 80045e2:	781a      	ldrb	r2, [r3, #0]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	0011      	movs	r1, r2
 80045e8:	0018      	movs	r0, r3
 80045ea:	f7ff ffad 	bl	8004548 <ST7735_WriteData>
            addr += numArgs;
 80045ee:	193b      	adds	r3, r7, r4
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	18d3      	adds	r3, r2, r3
 80045f6:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 80045f8:	210c      	movs	r1, #12
 80045fa:	187b      	adds	r3, r7, r1
 80045fc:	881b      	ldrh	r3, [r3, #0]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d013      	beq.n	800462a <DisplayInit+0xae>
            ms = *addr++;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	1c5a      	adds	r2, r3, #1
 8004606:	607a      	str	r2, [r7, #4]
 8004608:	781a      	ldrb	r2, [r3, #0]
 800460a:	187b      	adds	r3, r7, r1
 800460c:	801a      	strh	r2, [r3, #0]
            if(ms == 255) ms = 500;
 800460e:	187b      	adds	r3, r7, r1
 8004610:	881b      	ldrh	r3, [r3, #0]
 8004612:	2bff      	cmp	r3, #255	@ 0xff
 8004614:	d103      	bne.n	800461e <DisplayInit+0xa2>
 8004616:	187b      	adds	r3, r7, r1
 8004618:	22fa      	movs	r2, #250	@ 0xfa
 800461a:	0052      	lsls	r2, r2, #1
 800461c:	801a      	strh	r2, [r3, #0]
            HAL_Delay(ms);
 800461e:	230c      	movs	r3, #12
 8004620:	18fb      	adds	r3, r7, r3
 8004622:	881b      	ldrh	r3, [r3, #0]
 8004624:	0018      	movs	r0, r3
 8004626:	f004 fcab 	bl	8008f80 <HAL_Delay>
    while(numCommands--) {
 800462a:	220f      	movs	r2, #15
 800462c:	18bb      	adds	r3, r7, r2
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	18ba      	adds	r2, r7, r2
 8004632:	1e59      	subs	r1, r3, #1
 8004634:	7011      	strb	r1, [r2, #0]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d1ac      	bne.n	8004594 <DisplayInit+0x18>
        }
    }
}
 800463a:	46c0      	nop			@ (mov r8, r8)
 800463c:	46c0      	nop			@ (mov r8, r8)
 800463e:	46bd      	mov	sp, r7
 8004640:	b005      	add	sp, #20
 8004642:	bd90      	pop	{r4, r7, pc}

08004644 <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8004644:	b5b0      	push	{r4, r5, r7, lr}
 8004646:	b084      	sub	sp, #16
 8004648:	af00      	add	r7, sp, #0
 800464a:	0005      	movs	r5, r0
 800464c:	000c      	movs	r4, r1
 800464e:	0010      	movs	r0, r2
 8004650:	0019      	movs	r1, r3
 8004652:	1dfb      	adds	r3, r7, #7
 8004654:	1c2a      	adds	r2, r5, #0
 8004656:	701a      	strb	r2, [r3, #0]
 8004658:	1dbb      	adds	r3, r7, #6
 800465a:	1c22      	adds	r2, r4, #0
 800465c:	701a      	strb	r2, [r3, #0]
 800465e:	1d7b      	adds	r3, r7, #5
 8004660:	1c02      	adds	r2, r0, #0
 8004662:	701a      	strb	r2, [r3, #0]
 8004664:	1d3b      	adds	r3, r7, #4
 8004666:	1c0a      	adds	r2, r1, #0
 8004668:	701a      	strb	r2, [r3, #0]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 800466a:	202a      	movs	r0, #42	@ 0x2a
 800466c:	f7ff ff52 	bl	8004514 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 8004670:	210c      	movs	r1, #12
 8004672:	187b      	adds	r3, r7, r1
 8004674:	2200      	movs	r2, #0
 8004676:	701a      	strb	r2, [r3, #0]
 8004678:	4b1c      	ldr	r3, [pc, #112]	@ (80046ec <ST7735_SetAddressWindow+0xa8>)
 800467a:	781a      	ldrb	r2, [r3, #0]
 800467c:	1dfb      	adds	r3, r7, #7
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	18d3      	adds	r3, r2, r3
 8004682:	b2da      	uxtb	r2, r3
 8004684:	187b      	adds	r3, r7, r1
 8004686:	705a      	strb	r2, [r3, #1]
 8004688:	187b      	adds	r3, r7, r1
 800468a:	2200      	movs	r2, #0
 800468c:	709a      	strb	r2, [r3, #2]
 800468e:	4b17      	ldr	r3, [pc, #92]	@ (80046ec <ST7735_SetAddressWindow+0xa8>)
 8004690:	781a      	ldrb	r2, [r3, #0]
 8004692:	1d7b      	adds	r3, r7, #5
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	18d3      	adds	r3, r2, r3
 8004698:	b2da      	uxtb	r2, r3
 800469a:	187b      	adds	r3, r7, r1
 800469c:	70da      	strb	r2, [r3, #3]
    ST7735_WriteData(data, sizeof(data));
 800469e:	000c      	movs	r4, r1
 80046a0:	187b      	adds	r3, r7, r1
 80046a2:	2104      	movs	r1, #4
 80046a4:	0018      	movs	r0, r3
 80046a6:	f7ff ff4f 	bl	8004548 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 80046aa:	202b      	movs	r0, #43	@ 0x2b
 80046ac:	f7ff ff32 	bl	8004514 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 80046b0:	4b0f      	ldr	r3, [pc, #60]	@ (80046f0 <ST7735_SetAddressWindow+0xac>)
 80046b2:	781a      	ldrb	r2, [r3, #0]
 80046b4:	1dbb      	adds	r3, r7, #6
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	18d3      	adds	r3, r2, r3
 80046ba:	b2da      	uxtb	r2, r3
 80046bc:	0021      	movs	r1, r4
 80046be:	187b      	adds	r3, r7, r1
 80046c0:	705a      	strb	r2, [r3, #1]
    data[3] = y1 + _ystart;
 80046c2:	4b0b      	ldr	r3, [pc, #44]	@ (80046f0 <ST7735_SetAddressWindow+0xac>)
 80046c4:	781a      	ldrb	r2, [r3, #0]
 80046c6:	1d3b      	adds	r3, r7, #4
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	18d3      	adds	r3, r2, r3
 80046cc:	b2da      	uxtb	r2, r3
 80046ce:	187b      	adds	r3, r7, r1
 80046d0:	70da      	strb	r2, [r3, #3]
    ST7735_WriteData(data, sizeof(data));
 80046d2:	187b      	adds	r3, r7, r1
 80046d4:	2104      	movs	r1, #4
 80046d6:	0018      	movs	r0, r3
 80046d8:	f7ff ff36 	bl	8004548 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 80046dc:	202c      	movs	r0, #44	@ 0x2c
 80046de:	f7ff ff19 	bl	8004514 <ST7735_WriteCommand>
}
 80046e2:	46c0      	nop			@ (mov r8, r8)
 80046e4:	46bd      	mov	sp, r7
 80046e6:	b004      	add	sp, #16
 80046e8:	bdb0      	pop	{r4, r5, r7, pc}
 80046ea:	46c0      	nop			@ (mov r8, r8)
 80046ec:	20000283 	.word	0x20000283
 80046f0:	20000284 	.word	0x20000284

080046f4 <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b082      	sub	sp, #8
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	0002      	movs	r2, r0
 80046fc:	1dfb      	adds	r3, r7, #7
 80046fe:	701a      	strb	r2, [r3, #0]
    ST7735_Select();
 8004700:	f7ff fed7 	bl	80044b2 <ST7735_Select>
    ST7735_Reset();
 8004704:	f7ff feed 	bl	80044e2 <ST7735_Reset>
    DisplayInit(init_cmds1);
 8004708:	4b0e      	ldr	r3, [pc, #56]	@ (8004744 <ST7735_Init+0x50>)
 800470a:	0018      	movs	r0, r3
 800470c:	f7ff ff36 	bl	800457c <DisplayInit>
    DisplayInit(init_cmds2);
 8004710:	4b0d      	ldr	r3, [pc, #52]	@ (8004748 <ST7735_Init+0x54>)
 8004712:	0018      	movs	r0, r3
 8004714:	f7ff ff32 	bl	800457c <DisplayInit>
    DisplayInit(init_cmds3);
 8004718:	4b0c      	ldr	r3, [pc, #48]	@ (800474c <ST7735_Init+0x58>)
 800471a:	0018      	movs	r0, r3
 800471c:	f7ff ff2e 	bl	800457c <DisplayInit>
    ST7735_Select();
    ST7735_WriteCommand(ST7735_MADCTL);
    ST7735_WriteData(&data,1);
    ST7735_Unselect();
#else
    _colstart = 0;
 8004720:	4b0b      	ldr	r3, [pc, #44]	@ (8004750 <ST7735_Init+0x5c>)
 8004722:	2200      	movs	r2, #0
 8004724:	701a      	strb	r2, [r3, #0]
    _rowstart = 0;
 8004726:	4b0b      	ldr	r3, [pc, #44]	@ (8004754 <ST7735_Init+0x60>)
 8004728:	2200      	movs	r2, #0
 800472a:	701a      	strb	r2, [r3, #0]
#endif
    ST7735_SetRotation (rotation);
 800472c:	1dfb      	adds	r3, r7, #7
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	0018      	movs	r0, r3
 8004732:	f000 f811 	bl	8004758 <ST7735_SetRotation>
    ST7735_Unselect();
 8004736:	f7ff fec8 	bl	80044ca <ST7735_Unselect>

}
 800473a:	46c0      	nop			@ (mov r8, r8)
 800473c:	46bd      	mov	sp, r7
 800473e:	b002      	add	sp, #8
 8004740:	bd80      	pop	{r7, pc}
 8004742:	46c0      	nop			@ (mov r8, r8)
 8004744:	08011e48 	.word	0x08011e48
 8004748:	08011e80 	.word	0x08011e80
 800474c:	08011e90 	.word	0x08011e90
 8004750:	20000281 	.word	0x20000281
 8004754:	20000282 	.word	0x20000282

08004758 <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	0002      	movs	r2, r0
 8004760:	1dfb      	adds	r3, r7, #7
 8004762:	701a      	strb	r2, [r3, #0]

  uint8_t madctl = 0;
 8004764:	230f      	movs	r3, #15
 8004766:	18fb      	adds	r3, r7, r3
 8004768:	2200      	movs	r2, #0
 800476a:	701a      	strb	r2, [r3, #0]

  rotation = m % 4; // can't be higher than 3
 800476c:	1dfb      	adds	r3, r7, #7
 800476e:	781b      	ldrb	r3, [r3, #0]
 8004770:	2203      	movs	r2, #3
 8004772:	4013      	ands	r3, r2
 8004774:	b2da      	uxtb	r2, r3
 8004776:	4b36      	ldr	r3, [pc, #216]	@ (8004850 <ST7735_SetRotation+0xf8>)
 8004778:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 800477a:	4b35      	ldr	r3, [pc, #212]	@ (8004850 <ST7735_SetRotation+0xf8>)
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	2b03      	cmp	r3, #3
 8004780:	d041      	beq.n	8004806 <ST7735_SetRotation+0xae>
 8004782:	dc53      	bgt.n	800482c <ST7735_SetRotation+0xd4>
 8004784:	2b02      	cmp	r3, #2
 8004786:	d02b      	beq.n	80047e0 <ST7735_SetRotation+0x88>
 8004788:	dc50      	bgt.n	800482c <ST7735_SetRotation+0xd4>
 800478a:	2b00      	cmp	r3, #0
 800478c:	d002      	beq.n	8004794 <ST7735_SetRotation+0x3c>
 800478e:	2b01      	cmp	r3, #1
 8004790:	d013      	beq.n	80047ba <ST7735_SetRotation+0x62>
 8004792:	e04b      	b.n	800482c <ST7735_SetRotation+0xd4>
  {
  case 0:
#ifdef ST7735_IS_180X128
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 8004794:	230f      	movs	r3, #15
 8004796:	18fb      	adds	r3, r7, r3
 8004798:	22c0      	movs	r2, #192	@ 0xc0
 800479a:	701a      	strb	r2, [r3, #0]
      _height = ST7735_HEIGHT;
 800479c:	4b2d      	ldr	r3, [pc, #180]	@ (8004854 <ST7735_SetRotation+0xfc>)
 800479e:	22a0      	movs	r2, #160	@ 0xa0
 80047a0:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 80047a2:	4b2d      	ldr	r3, [pc, #180]	@ (8004858 <ST7735_SetRotation+0x100>)
 80047a4:	2280      	movs	r2, #128	@ 0x80
 80047a6:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 80047a8:	4b2c      	ldr	r3, [pc, #176]	@ (800485c <ST7735_SetRotation+0x104>)
 80047aa:	781a      	ldrb	r2, [r3, #0]
 80047ac:	4b2c      	ldr	r3, [pc, #176]	@ (8004860 <ST7735_SetRotation+0x108>)
 80047ae:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 80047b0:	4b2c      	ldr	r3, [pc, #176]	@ (8004864 <ST7735_SetRotation+0x10c>)
 80047b2:	781a      	ldrb	r2, [r3, #0]
 80047b4:	4b2c      	ldr	r3, [pc, #176]	@ (8004868 <ST7735_SetRotation+0x110>)
 80047b6:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80047b8:	e038      	b.n	800482c <ST7735_SetRotation+0xd4>
  case 1:
#if ST7735_IS_180X128
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 80047ba:	230f      	movs	r3, #15
 80047bc:	18fb      	adds	r3, r7, r3
 80047be:	22a0      	movs	r2, #160	@ 0xa0
 80047c0:	701a      	strb	r2, [r3, #0]
      _width = ST7735_HEIGHT;
 80047c2:	4b25      	ldr	r3, [pc, #148]	@ (8004858 <ST7735_SetRotation+0x100>)
 80047c4:	22a0      	movs	r2, #160	@ 0xa0
 80047c6:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 80047c8:	4b22      	ldr	r3, [pc, #136]	@ (8004854 <ST7735_SetRotation+0xfc>)
 80047ca:	2280      	movs	r2, #128	@ 0x80
 80047cc:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 80047ce:	4b23      	ldr	r3, [pc, #140]	@ (800485c <ST7735_SetRotation+0x104>)
 80047d0:	781a      	ldrb	r2, [r3, #0]
 80047d2:	4b25      	ldr	r3, [pc, #148]	@ (8004868 <ST7735_SetRotation+0x110>)
 80047d4:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 80047d6:	4b23      	ldr	r3, [pc, #140]	@ (8004864 <ST7735_SetRotation+0x10c>)
 80047d8:	781a      	ldrb	r2, [r3, #0]
 80047da:	4b21      	ldr	r3, [pc, #132]	@ (8004860 <ST7735_SetRotation+0x108>)
 80047dc:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80047de:	e025      	b.n	800482c <ST7735_SetRotation+0xd4>
  case 2:
#if ST7735_IS_180X128
	  madctl = ST7735_MADCTL_RGB;
#else
      madctl = ST7735_MADCTL_RGB;
 80047e0:	230f      	movs	r3, #15
 80047e2:	18fb      	adds	r3, r7, r3
 80047e4:	2200      	movs	r2, #0
 80047e6:	701a      	strb	r2, [r3, #0]
      _height = ST7735_HEIGHT;
 80047e8:	4b1a      	ldr	r3, [pc, #104]	@ (8004854 <ST7735_SetRotation+0xfc>)
 80047ea:	22a0      	movs	r2, #160	@ 0xa0
 80047ec:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 80047ee:	4b1a      	ldr	r3, [pc, #104]	@ (8004858 <ST7735_SetRotation+0x100>)
 80047f0:	2280      	movs	r2, #128	@ 0x80
 80047f2:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 80047f4:	4b19      	ldr	r3, [pc, #100]	@ (800485c <ST7735_SetRotation+0x104>)
 80047f6:	781a      	ldrb	r2, [r3, #0]
 80047f8:	4b19      	ldr	r3, [pc, #100]	@ (8004860 <ST7735_SetRotation+0x108>)
 80047fa:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 80047fc:	4b19      	ldr	r3, [pc, #100]	@ (8004864 <ST7735_SetRotation+0x10c>)
 80047fe:	781a      	ldrb	r2, [r3, #0]
 8004800:	4b19      	ldr	r3, [pc, #100]	@ (8004868 <ST7735_SetRotation+0x110>)
 8004802:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8004804:	e012      	b.n	800482c <ST7735_SetRotation+0xd4>
  case 3:
#if ST7735_IS_180X128
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8004806:	230f      	movs	r3, #15
 8004808:	18fb      	adds	r3, r7, r3
 800480a:	2260      	movs	r2, #96	@ 0x60
 800480c:	701a      	strb	r2, [r3, #0]
      _width = ST7735_HEIGHT;
 800480e:	4b12      	ldr	r3, [pc, #72]	@ (8004858 <ST7735_SetRotation+0x100>)
 8004810:	22a0      	movs	r2, #160	@ 0xa0
 8004812:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8004814:	4b0f      	ldr	r3, [pc, #60]	@ (8004854 <ST7735_SetRotation+0xfc>)
 8004816:	2280      	movs	r2, #128	@ 0x80
 8004818:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 800481a:	4b10      	ldr	r3, [pc, #64]	@ (800485c <ST7735_SetRotation+0x104>)
 800481c:	781a      	ldrb	r2, [r3, #0]
 800481e:	4b12      	ldr	r3, [pc, #72]	@ (8004868 <ST7735_SetRotation+0x110>)
 8004820:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8004822:	4b10      	ldr	r3, [pc, #64]	@ (8004864 <ST7735_SetRotation+0x10c>)
 8004824:	781a      	ldrb	r2, [r3, #0]
 8004826:	4b0e      	ldr	r3, [pc, #56]	@ (8004860 <ST7735_SetRotation+0x108>)
 8004828:	701a      	strb	r2, [r3, #0]
#endif
    break;
 800482a:	46c0      	nop			@ (mov r8, r8)
  }
  ST7735_Select();
 800482c:	f7ff fe41 	bl	80044b2 <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 8004830:	2036      	movs	r0, #54	@ 0x36
 8004832:	f7ff fe6f 	bl	8004514 <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 8004836:	230f      	movs	r3, #15
 8004838:	18fb      	adds	r3, r7, r3
 800483a:	2101      	movs	r1, #1
 800483c:	0018      	movs	r0, r3
 800483e:	f7ff fe83 	bl	8004548 <ST7735_WriteData>
  ST7735_Unselect();
 8004842:	f7ff fe42 	bl	80044ca <ST7735_Unselect>
}
 8004846:	46c0      	nop			@ (mov r8, r8)
 8004848:	46bd      	mov	sp, r7
 800484a:	b004      	add	sp, #16
 800484c:	bd80      	pop	{r7, pc}
 800484e:	46c0      	nop			@ (mov r8, r8)
 8004850:	20000280 	.word	0x20000280
 8004854:	2000027e 	.word	0x2000027e
 8004858:	2000027c 	.word	0x2000027c
 800485c:	20000281 	.word	0x20000281
 8004860:	20000283 	.word	0x20000283
 8004864:	20000282 	.word	0x20000282
 8004868:	20000284 	.word	0x20000284

0800486c <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 800486c:	b590      	push	{r4, r7, lr}
 800486e:	b085      	sub	sp, #20
 8004870:	af00      	add	r7, sp, #0
 8004872:	0004      	movs	r4, r0
 8004874:	0008      	movs	r0, r1
 8004876:	0011      	movs	r1, r2
 8004878:	1dbb      	adds	r3, r7, #6
 800487a:	1c22      	adds	r2, r4, #0
 800487c:	801a      	strh	r2, [r3, #0]
 800487e:	1d3b      	adds	r3, r7, #4
 8004880:	1c02      	adds	r2, r0, #0
 8004882:	801a      	strh	r2, [r3, #0]
 8004884:	1cbb      	adds	r3, r7, #2
 8004886:	1c0a      	adds	r2, r1, #0
 8004888:	801a      	strh	r2, [r3, #0]
    if((x >= _width) || (y >= _height))
 800488a:	1dbb      	adds	r3, r7, #6
 800488c:	881b      	ldrh	r3, [r3, #0]
 800488e:	4a1c      	ldr	r2, [pc, #112]	@ (8004900 <ST7735_DrawPixel+0x94>)
 8004890:	2100      	movs	r1, #0
 8004892:	5e52      	ldrsh	r2, [r2, r1]
 8004894:	4293      	cmp	r3, r2
 8004896:	da2f      	bge.n	80048f8 <ST7735_DrawPixel+0x8c>
 8004898:	1d3b      	adds	r3, r7, #4
 800489a:	881b      	ldrh	r3, [r3, #0]
 800489c:	4a19      	ldr	r2, [pc, #100]	@ (8004904 <ST7735_DrawPixel+0x98>)
 800489e:	2100      	movs	r1, #0
 80048a0:	5e52      	ldrsh	r2, [r2, r1]
 80048a2:	4293      	cmp	r3, r2
 80048a4:	da28      	bge.n	80048f8 <ST7735_DrawPixel+0x8c>
        return;

    ST7735_Select();
 80048a6:	f7ff fe04 	bl	80044b2 <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 80048aa:	1dbb      	adds	r3, r7, #6
 80048ac:	881b      	ldrh	r3, [r3, #0]
 80048ae:	b2d8      	uxtb	r0, r3
 80048b0:	1d3b      	adds	r3, r7, #4
 80048b2:	881b      	ldrh	r3, [r3, #0]
 80048b4:	b2d9      	uxtb	r1, r3
 80048b6:	1dbb      	adds	r3, r7, #6
 80048b8:	881b      	ldrh	r3, [r3, #0]
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	3301      	adds	r3, #1
 80048be:	b2da      	uxtb	r2, r3
 80048c0:	1d3b      	adds	r3, r7, #4
 80048c2:	881b      	ldrh	r3, [r3, #0]
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	3301      	adds	r3, #1
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	f7ff febb 	bl	8004644 <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 80048ce:	1cbb      	adds	r3, r7, #2
 80048d0:	881b      	ldrh	r3, [r3, #0]
 80048d2:	0a1b      	lsrs	r3, r3, #8
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	b2da      	uxtb	r2, r3
 80048d8:	210c      	movs	r1, #12
 80048da:	187b      	adds	r3, r7, r1
 80048dc:	701a      	strb	r2, [r3, #0]
 80048de:	1cbb      	adds	r3, r7, #2
 80048e0:	881b      	ldrh	r3, [r3, #0]
 80048e2:	b2da      	uxtb	r2, r3
 80048e4:	187b      	adds	r3, r7, r1
 80048e6:	705a      	strb	r2, [r3, #1]
    ST7735_WriteData(data, sizeof(data));
 80048e8:	187b      	adds	r3, r7, r1
 80048ea:	2102      	movs	r1, #2
 80048ec:	0018      	movs	r0, r3
 80048ee:	f7ff fe2b 	bl	8004548 <ST7735_WriteData>

    ST7735_Unselect();
 80048f2:	f7ff fdea 	bl	80044ca <ST7735_Unselect>
 80048f6:	e000      	b.n	80048fa <ST7735_DrawPixel+0x8e>
        return;
 80048f8:	46c0      	nop			@ (mov r8, r8)
}
 80048fa:	46bd      	mov	sp, r7
 80048fc:	b005      	add	sp, #20
 80048fe:	bd90      	pop	{r4, r7, pc}
 8004900:	2000027c 	.word	0x2000027c
 8004904:	2000027e 	.word	0x2000027e

08004908 <ST7735_DrawImage>:
    }

    ST7735_Unselect();
}

void ST7735_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data) {
 8004908:	b5b0      	push	{r4, r5, r7, lr}
 800490a:	b082      	sub	sp, #8
 800490c:	af00      	add	r7, sp, #0
 800490e:	0005      	movs	r5, r0
 8004910:	000c      	movs	r4, r1
 8004912:	0010      	movs	r0, r2
 8004914:	0019      	movs	r1, r3
 8004916:	1dbb      	adds	r3, r7, #6
 8004918:	1c2a      	adds	r2, r5, #0
 800491a:	801a      	strh	r2, [r3, #0]
 800491c:	1d3b      	adds	r3, r7, #4
 800491e:	1c22      	adds	r2, r4, #0
 8004920:	801a      	strh	r2, [r3, #0]
 8004922:	1cbb      	adds	r3, r7, #2
 8004924:	1c02      	adds	r2, r0, #0
 8004926:	801a      	strh	r2, [r3, #0]
 8004928:	003b      	movs	r3, r7
 800492a:	1c0a      	adds	r2, r1, #0
 800492c:	801a      	strh	r2, [r3, #0]
    if((x >= _width) || (y >= _height)) return;
 800492e:	1dbb      	adds	r3, r7, #6
 8004930:	881b      	ldrh	r3, [r3, #0]
 8004932:	4a2a      	ldr	r2, [pc, #168]	@ (80049dc <ST7735_DrawImage+0xd4>)
 8004934:	2100      	movs	r1, #0
 8004936:	5e52      	ldrsh	r2, [r2, r1]
 8004938:	4293      	cmp	r3, r2
 800493a:	da47      	bge.n	80049cc <ST7735_DrawImage+0xc4>
 800493c:	1d3b      	adds	r3, r7, #4
 800493e:	881b      	ldrh	r3, [r3, #0]
 8004940:	4a27      	ldr	r2, [pc, #156]	@ (80049e0 <ST7735_DrawImage+0xd8>)
 8004942:	2100      	movs	r1, #0
 8004944:	5e52      	ldrsh	r2, [r2, r1]
 8004946:	4293      	cmp	r3, r2
 8004948:	da40      	bge.n	80049cc <ST7735_DrawImage+0xc4>
    if((x + w - 1) >= _width) return;
 800494a:	1dbb      	adds	r3, r7, #6
 800494c:	881a      	ldrh	r2, [r3, #0]
 800494e:	1cbb      	adds	r3, r7, #2
 8004950:	881b      	ldrh	r3, [r3, #0]
 8004952:	18d3      	adds	r3, r2, r3
 8004954:	4a21      	ldr	r2, [pc, #132]	@ (80049dc <ST7735_DrawImage+0xd4>)
 8004956:	2100      	movs	r1, #0
 8004958:	5e52      	ldrsh	r2, [r2, r1]
 800495a:	4293      	cmp	r3, r2
 800495c:	dc38      	bgt.n	80049d0 <ST7735_DrawImage+0xc8>
    if((y + h - 1) >= _height) return;
 800495e:	1d3b      	adds	r3, r7, #4
 8004960:	881a      	ldrh	r2, [r3, #0]
 8004962:	003b      	movs	r3, r7
 8004964:	881b      	ldrh	r3, [r3, #0]
 8004966:	18d3      	adds	r3, r2, r3
 8004968:	4a1d      	ldr	r2, [pc, #116]	@ (80049e0 <ST7735_DrawImage+0xd8>)
 800496a:	2100      	movs	r1, #0
 800496c:	5e52      	ldrsh	r2, [r2, r1]
 800496e:	4293      	cmp	r3, r2
 8004970:	dc30      	bgt.n	80049d4 <ST7735_DrawImage+0xcc>

    ST7735_Select();
 8004972:	f7ff fd9e 	bl	80044b2 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8004976:	1dbb      	adds	r3, r7, #6
 8004978:	881b      	ldrh	r3, [r3, #0]
 800497a:	b2d8      	uxtb	r0, r3
 800497c:	1d3b      	adds	r3, r7, #4
 800497e:	881b      	ldrh	r3, [r3, #0]
 8004980:	b2d9      	uxtb	r1, r3
 8004982:	1dbb      	adds	r3, r7, #6
 8004984:	881b      	ldrh	r3, [r3, #0]
 8004986:	b2da      	uxtb	r2, r3
 8004988:	1cbb      	adds	r3, r7, #2
 800498a:	881b      	ldrh	r3, [r3, #0]
 800498c:	b2db      	uxtb	r3, r3
 800498e:	18d3      	adds	r3, r2, r3
 8004990:	b2db      	uxtb	r3, r3
 8004992:	3b01      	subs	r3, #1
 8004994:	b2dc      	uxtb	r4, r3
 8004996:	1d3b      	adds	r3, r7, #4
 8004998:	881b      	ldrh	r3, [r3, #0]
 800499a:	b2da      	uxtb	r2, r3
 800499c:	003b      	movs	r3, r7
 800499e:	881b      	ldrh	r3, [r3, #0]
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	18d3      	adds	r3, r2, r3
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	3b01      	subs	r3, #1
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	0022      	movs	r2, r4
 80049ac:	f7ff fe4a 	bl	8004644 <ST7735_SetAddressWindow>
    ST7735_WriteData((uint8_t*)data, sizeof(uint16_t)*w*h);
 80049b0:	1cbb      	adds	r3, r7, #2
 80049b2:	881b      	ldrh	r3, [r3, #0]
 80049b4:	003a      	movs	r2, r7
 80049b6:	8812      	ldrh	r2, [r2, #0]
 80049b8:	4353      	muls	r3, r2
 80049ba:	005a      	lsls	r2, r3, #1
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	0011      	movs	r1, r2
 80049c0:	0018      	movs	r0, r3
 80049c2:	f7ff fdc1 	bl	8004548 <ST7735_WriteData>
    ST7735_Unselect();
 80049c6:	f7ff fd80 	bl	80044ca <ST7735_Unselect>
 80049ca:	e004      	b.n	80049d6 <ST7735_DrawImage+0xce>
    if((x >= _width) || (y >= _height)) return;
 80049cc:	46c0      	nop			@ (mov r8, r8)
 80049ce:	e002      	b.n	80049d6 <ST7735_DrawImage+0xce>
    if((x + w - 1) >= _width) return;
 80049d0:	46c0      	nop			@ (mov r8, r8)
 80049d2:	e000      	b.n	80049d6 <ST7735_DrawImage+0xce>
    if((y + h - 1) >= _height) return;
 80049d4:	46c0      	nop			@ (mov r8, r8)
}
 80049d6:	46bd      	mov	sp, r7
 80049d8:	b002      	add	sp, #8
 80049da:	bdb0      	pop	{r4, r5, r7, pc}
 80049dc:	2000027c 	.word	0x2000027c
 80049e0:	2000027e 	.word	0x2000027e

080049e4 <minmea_tocoord>:
/**
 * Convert a raw coordinate to a floating point DD.DDD... value.
 * Returns NaN for "unknown" values.
 */
static inline float minmea_tocoord(struct minmea_float *f)
{
 80049e4:	b5b0      	push	{r4, r5, r7, lr}
 80049e6:	b084      	sub	sp, #16
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
    if (f->scale == 0)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d101      	bne.n	80049f8 <minmea_tocoord+0x14>
        return NAN;
 80049f4:	4b1c      	ldr	r3, [pc, #112]	@ (8004a68 <minmea_tocoord+0x84>)
 80049f6:	e033      	b.n	8004a60 <minmea_tocoord+0x7c>
    int_least32_t degrees = f->value / (f->scale * 100);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	2164      	movs	r1, #100	@ 0x64
 8004a02:	434b      	muls	r3, r1
 8004a04:	0019      	movs	r1, r3
 8004a06:	0010      	movs	r0, r2
 8004a08:	f7fb fc2e 	bl	8000268 <__divsi3>
 8004a0c:	0003      	movs	r3, r0
 8004a0e:	60fb      	str	r3, [r7, #12]
    int_least32_t minutes = f->value % (f->scale * 100);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	2164      	movs	r1, #100	@ 0x64
 8004a1a:	434b      	muls	r3, r1
 8004a1c:	0019      	movs	r1, r3
 8004a1e:	0010      	movs	r0, r2
 8004a20:	f7fb fd08 	bl	8000434 <__aeabi_idivmod>
 8004a24:	000b      	movs	r3, r1
 8004a26:	60bb      	str	r3, [r7, #8]
    return (float) degrees + (float) minutes / (60 * f->scale);
 8004a28:	68f8      	ldr	r0, [r7, #12]
 8004a2a:	f7fc fedf 	bl	80017ec <__aeabi_i2f>
 8004a2e:	1c04      	adds	r4, r0, #0
 8004a30:	68b8      	ldr	r0, [r7, #8]
 8004a32:	f7fc fedb 	bl	80017ec <__aeabi_i2f>
 8004a36:	1c05      	adds	r5, r0, #0
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	685a      	ldr	r2, [r3, #4]
 8004a3c:	0013      	movs	r3, r2
 8004a3e:	011b      	lsls	r3, r3, #4
 8004a40:	1a9b      	subs	r3, r3, r2
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	0018      	movs	r0, r3
 8004a46:	f7fc fed1 	bl	80017ec <__aeabi_i2f>
 8004a4a:	1c03      	adds	r3, r0, #0
 8004a4c:	1c19      	adds	r1, r3, #0
 8004a4e:	1c28      	adds	r0, r5, #0
 8004a50:	f7fc f920 	bl	8000c94 <__aeabi_fdiv>
 8004a54:	1c03      	adds	r3, r0, #0
 8004a56:	1c19      	adds	r1, r3, #0
 8004a58:	1c20      	adds	r0, r4, #0
 8004a5a:	f7fb ff29 	bl	80008b0 <__aeabi_fadd>
 8004a5e:	1c03      	adds	r3, r0, #0
}
 8004a60:	1c18      	adds	r0, r3, #0
 8004a62:	46bd      	mov	sp, r7
 8004a64:	b004      	add	sp, #16
 8004a66:	bdb0      	pop	{r4, r5, r7, pc}
 8004a68:	7fc00000 	.word	0x7fc00000

08004a6c <json_getSibling>:

/** Get the next sibling of a JSON property that is within a JSON object or array.
  * @param json A valid handler of a json property.
  * @retval The handler of the next sibling if found.
  * @retval Null pointer if the json property is the last one. */
static inline json_t const* json_getSibling( json_t const* json ) {
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b082      	sub	sp, #8
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
    return json->sibling;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
}
 8004a78:	0018      	movs	r0, r3
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	b002      	add	sp, #8
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <json_getChild>:
/** Get the first property of a JSON object or array.
  * @param json A valid handler of a json property.
  *             Its type must be JSON_OBJ or JSON_ARRAY.
  * @retval The handler of the first property if there is.
  * @retval Null pointer if the json object has not properties. */
static inline json_t const* json_getChild( json_t const* json ) {
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b082      	sub	sp, #8
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
    return json->u.c.child;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	689b      	ldr	r3, [r3, #8]
}
 8004a8c:	0018      	movs	r0, r3
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	b002      	add	sp, #8
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <json_getInteger>:
}

/** Get the value of a json integer property.
  * @param property A valid handler of a json object. Its type must be JSON_INTEGER.
  * @return The value stdint. */
static inline int64_t json_getInteger( json_t const* property ) {
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b082      	sub	sp, #8
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  return strtoll( property->u.value,(char**)NULL, 10);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	220a      	movs	r2, #10
 8004aa2:	2100      	movs	r1, #0
 8004aa4:	0018      	movs	r0, r3
 8004aa6:	f00a f8f3 	bl	800ec90 <strtoll>
 8004aaa:	0002      	movs	r2, r0
 8004aac:	000b      	movs	r3, r1
}
 8004aae:	0010      	movs	r0, r2
 8004ab0:	0019      	movs	r1, r3
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	b002      	add	sp, #8
 8004ab6:	bd80      	pop	{r7, pc}

08004ab8 <json_getReal>:

/** Get the value of a json real property.
  * @param property A valid handler of a json object. Its type must be JSON_REAL.
  * @return The value. */
static inline double json_getReal( json_t const* property ) {
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b082      	sub	sp, #8
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  return strtod( property->u.value,(char**)NULL );
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	2100      	movs	r1, #0
 8004ac6:	0018      	movs	r0, r3
 8004ac8:	f009 ff9a 	bl	800ea00 <strtod>
 8004acc:	0002      	movs	r2, r0
 8004ace:	000b      	movs	r3, r1
}
 8004ad0:	0010      	movs	r0, r2
 8004ad2:	0019      	movs	r1, r3
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	b002      	add	sp, #8
 8004ad8:	bd80      	pop	{r7, pc}
	...

08004adc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004adc:	b5b0      	push	{r4, r5, r7, lr}
 8004ade:	b08e      	sub	sp, #56	@ 0x38
 8004ae0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004ae2:	f004 f9c7 	bl	8008e74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004ae6:	f000 fc9d 	bl	8005424 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	StructInit();
 8004aea:	f001 f93f 	bl	8005d6c <StructInit>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004aee:	f000 fecd 	bl	800588c <MX_GPIO_Init>
  MX_I2C1_Init();
 8004af2:	f000 fcf9 	bl	80054e8 <MX_I2C1_Init>
  MX_SPI1_Init();
 8004af6:	f000 fd65 	bl	80055c4 <MX_SPI1_Init>
  MX_TIM17_Init();
 8004afa:	f000 fda3 	bl	8005644 <MX_TIM17_Init>
  MX_USART1_UART_Init();
 8004afe:	f000 fe29 	bl	8005754 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8004b02:	f000 fe75 	bl	80057f0 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8004b06:	f000 fd2f 	bl	8005568 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
	PeripheralInit();
 8004b0a:	f001 f8f1 	bl	8005cf0 <PeripheralInit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	//Before entering the while, fill the screen to clear it once
	fillScreen(BLACK);
 8004b0e:	2000      	movs	r0, #0
 8004b10:	f7ff fb84 	bl	800421c <fillScreen>
	while (1) {
		if ((totalFrames) % 200 == 0){
 8004b14:	4bad      	ldr	r3, [pc, #692]	@ (8004dcc <main+0x2f0>)
 8004b16:	881b      	ldrh	r3, [r3, #0]
 8004b18:	21c8      	movs	r1, #200	@ 0xc8
 8004b1a:	0018      	movs	r0, r3
 8004b1c:	f7fb fba0 	bl	8000260 <__aeabi_uidivmod>
 8004b20:	000b      	movs	r3, r1
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d104      	bne.n	8004b32 <main+0x56>
						GetLatLon();
 8004b28:	f002 fa60 	bl	8006fec <GetLatLon>
						checkTime=1;
 8004b2c:	4ba8      	ldr	r3, [pc, #672]	@ (8004dd0 <main+0x2f4>)
 8004b2e:	2201      	movs	r2, #1
 8004b30:	801a      	strh	r2, [r3, #0]
					}
		game.weeklyGoal = game.dailyGoal*(game.evo+1);
 8004b32:	4aa8      	ldr	r2, [pc, #672]	@ (8004dd4 <main+0x2f8>)
 8004b34:	2392      	movs	r3, #146	@ 0x92
 8004b36:	005b      	lsls	r3, r3, #1
 8004b38:	58d3      	ldr	r3, [r2, r3]
 8004b3a:	4aa6      	ldr	r2, [pc, #664]	@ (8004dd4 <main+0x2f8>)
 8004b3c:	7c12      	ldrb	r2, [r2, #16]
 8004b3e:	3201      	adds	r2, #1
 8004b40:	435a      	muls	r2, r3
 8004b42:	0011      	movs	r1, r2
 8004b44:	4aa3      	ldr	r2, [pc, #652]	@ (8004dd4 <main+0x2f8>)
 8004b46:	2394      	movs	r3, #148	@ 0x94
 8004b48:	005b      	lsls	r3, r3, #1
 8004b4a:	50d1      	str	r1, [r2, r3]
		_ADXL343_ReadReg8(0x15, &steps, 2);
 8004b4c:	4ba2      	ldr	r3, [pc, #648]	@ (8004dd8 <main+0x2fc>)
 8004b4e:	2202      	movs	r2, #2
 8004b50:	0019      	movs	r1, r3
 8004b52:	2015      	movs	r0, #21
 8004b54:	f001 fef8 	bl	8006948 <_ADXL343_ReadReg8>

		//SendData();
		//ReceiveData();
		//_ADXL343_ReadReg8(0x00, &steps, 1);
		if (CheckExp(game.dailyGoal, game.stepsToday) == 1) {
 8004b58:	4a9e      	ldr	r2, [pc, #632]	@ (8004dd4 <main+0x2f8>)
 8004b5a:	2392      	movs	r3, #146	@ 0x92
 8004b5c:	005b      	lsls	r3, r3, #1
 8004b5e:	58d3      	ldr	r3, [r2, r3]
 8004b60:	0018      	movs	r0, r3
 8004b62:	4a9c      	ldr	r2, [pc, #624]	@ (8004dd4 <main+0x2f8>)
 8004b64:	2390      	movs	r3, #144	@ 0x90
 8004b66:	005b      	lsls	r3, r3, #1
 8004b68:	58d3      	ldr	r3, [r2, r3]
 8004b6a:	0019      	movs	r1, r3
 8004b6c:	f002 f9fa 	bl	8006f64 <CheckExp>
 8004b70:	0003      	movs	r3, r0
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d10c      	bne.n	8004b90 <main+0xb4>
			game.mood += moodIncrementUp;
 8004b76:	4b97      	ldr	r3, [pc, #604]	@ (8004dd4 <main+0x2f8>)
 8004b78:	7c5a      	ldrb	r2, [r3, #17]
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	18d3      	adds	r3, r2, r3
 8004b80:	b2da      	uxtb	r2, r3
 8004b82:	4b94      	ldr	r3, [pc, #592]	@ (8004dd4 <main+0x2f8>)
 8004b84:	745a      	strb	r2, [r3, #17]
			game.stepsToday = 0;
 8004b86:	4a93      	ldr	r2, [pc, #588]	@ (8004dd4 <main+0x2f8>)
 8004b88:	2390      	movs	r3, #144	@ 0x90
 8004b8a:	005b      	lsls	r3, r3, #1
 8004b8c:	2100      	movs	r1, #0
 8004b8e:	50d1      	str	r1, [r2, r3]
		}
		if(CheckExp(game.weeklyGoal, game.weeklySteps)==1) {
 8004b90:	4a90      	ldr	r2, [pc, #576]	@ (8004dd4 <main+0x2f8>)
 8004b92:	2394      	movs	r3, #148	@ 0x94
 8004b94:	005b      	lsls	r3, r3, #1
 8004b96:	58d3      	ldr	r3, [r2, r3]
 8004b98:	0018      	movs	r0, r3
 8004b9a:	4a8e      	ldr	r2, [pc, #568]	@ (8004dd4 <main+0x2f8>)
 8004b9c:	238e      	movs	r3, #142	@ 0x8e
 8004b9e:	005b      	lsls	r3, r3, #1
 8004ba0:	58d3      	ldr	r3, [r2, r3]
 8004ba2:	0019      	movs	r1, r3
 8004ba4:	f002 f9de 	bl	8006f64 <CheckExp>
 8004ba8:	0003      	movs	r3, r0
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d106      	bne.n	8004bbc <main+0xe0>
			Evolve();
 8004bae:	f001 f9f5 	bl	8005f9c <Evolve>
			game.weeklySteps=0;
 8004bb2:	4a88      	ldr	r2, [pc, #544]	@ (8004dd4 <main+0x2f8>)
 8004bb4:	238e      	movs	r3, #142	@ 0x8e
 8004bb6:	005b      	lsls	r3, r3, #1
 8004bb8:	2100      	movs	r1, #0
 8004bba:	50d1      	str	r1, [r2, r3]
		}

		if (checkTime) {
 8004bbc:	4b84      	ldr	r3, [pc, #528]	@ (8004dd0 <main+0x2f4>)
 8004bbe:	881b      	ldrh	r3, [r3, #0]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d04f      	beq.n	8004c64 <main+0x188>
			checkTime=0;
 8004bc4:	4b82      	ldr	r3, [pc, #520]	@ (8004dd0 <main+0x2f4>)
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	801a      	strh	r2, [r3, #0]
                  			FlashWrite();
 8004bca:	f001 fa21 	bl	8006010 <FlashWrite>
			if (((game.time.minutes % dayLength) == 0)
 8004bce:	4b81      	ldr	r3, [pc, #516]	@ (8004dd4 <main+0x2f8>)
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	2218      	movs	r2, #24
 8004bd4:	0011      	movs	r1, r2
 8004bd6:	0018      	movs	r0, r3
 8004bd8:	f7fb fc2c 	bl	8000434 <__aeabi_idivmod>
 8004bdc:	1e0b      	subs	r3, r1, #0
 8004bde:	d12c      	bne.n	8004c3a <main+0x15e>
					&& game.time.seconds > 0) {
 8004be0:	4b7c      	ldr	r3, [pc, #496]	@ (8004dd4 <main+0x2f8>)
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	dd28      	ble.n	8004c3a <main+0x15e>
				if (CheckExp(game.dailyGoal, game.stepsToday) == -1)
 8004be8:	4a7a      	ldr	r2, [pc, #488]	@ (8004dd4 <main+0x2f8>)
 8004bea:	2392      	movs	r3, #146	@ 0x92
 8004bec:	005b      	lsls	r3, r3, #1
 8004bee:	58d3      	ldr	r3, [r2, r3]
 8004bf0:	0018      	movs	r0, r3
 8004bf2:	4a78      	ldr	r2, [pc, #480]	@ (8004dd4 <main+0x2f8>)
 8004bf4:	2390      	movs	r3, #144	@ 0x90
 8004bf6:	005b      	lsls	r3, r3, #1
 8004bf8:	58d3      	ldr	r3, [r2, r3]
 8004bfa:	0019      	movs	r1, r3
 8004bfc:	f002 f9b2 	bl	8006f64 <CheckExp>
 8004c00:	0003      	movs	r3, r0
 8004c02:	3301      	adds	r3, #1
 8004c04:	d107      	bne.n	8004c16 <main+0x13a>
					game.mood -= moodIncrementDown;
 8004c06:	4b73      	ldr	r3, [pc, #460]	@ (8004dd4 <main+0x2f8>)
 8004c08:	7c5a      	ldrb	r2, [r3, #17]
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	1ad3      	subs	r3, r2, r3
 8004c10:	b2da      	uxtb	r2, r3
 8004c12:	4b70      	ldr	r3, [pc, #448]	@ (8004dd4 <main+0x2f8>)
 8004c14:	745a      	strb	r2, [r3, #17]
				game.stepsToday = 0;
 8004c16:	4a6f      	ldr	r2, [pc, #444]	@ (8004dd4 <main+0x2f8>)
 8004c18:	2390      	movs	r3, #144	@ 0x90
 8004c1a:	005b      	lsls	r3, r3, #1
 8004c1c:	2100      	movs	r1, #0
 8004c1e:	50d1      	str	r1, [r2, r3]
				memset(&game.positions, 0, sizeof(game.positions));
 8004c20:	2380      	movs	r3, #128	@ 0x80
 8004c22:	005a      	lsls	r2, r3, #1
 8004c24:	4b6d      	ldr	r3, [pc, #436]	@ (8004ddc <main+0x300>)
 8004c26:	2100      	movs	r1, #0
 8004c28:	0018      	movs	r0, r3
 8004c2a:	f00a f96f 	bl	800ef0c <memset>
				game.numLocations = 0;
 8004c2e:	4b69      	ldr	r3, [pc, #420]	@ (8004dd4 <main+0x2f8>)
 8004c30:	2200      	movs	r2, #0
 8004c32:	615a      	str	r2, [r3, #20]
				checkTime = 0;
 8004c34:	4b66      	ldr	r3, [pc, #408]	@ (8004dd0 <main+0x2f4>)
 8004c36:	2200      	movs	r2, #0
 8004c38:	801a      	strh	r2, [r3, #0]
			}

			if (((game.time.minutes % weekLength) == 0)
 8004c3a:	4b66      	ldr	r3, [pc, #408]	@ (8004dd4 <main+0x2f8>)
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	22a8      	movs	r2, #168	@ 0xa8
 8004c40:	0011      	movs	r1, r2
 8004c42:	0018      	movs	r0, r3
 8004c44:	f7fb fbf6 	bl	8000434 <__aeabi_idivmod>
 8004c48:	1e0b      	subs	r3, r1, #0
 8004c4a:	d10b      	bne.n	8004c64 <main+0x188>
					&& game.time.seconds > 0) {
 8004c4c:	4b61      	ldr	r3, [pc, #388]	@ (8004dd4 <main+0x2f8>)
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	dd07      	ble.n	8004c64 <main+0x188>
				game.weeklySteps = 0;
 8004c54:	4a5f      	ldr	r2, [pc, #380]	@ (8004dd4 <main+0x2f8>)
 8004c56:	238e      	movs	r3, #142	@ 0x8e
 8004c58:	005b      	lsls	r3, r3, #1
 8004c5a:	2100      	movs	r1, #0
 8004c5c:	50d1      	str	r1, [r2, r3]
				checkTime = 0;
 8004c5e:	4b5c      	ldr	r3, [pc, #368]	@ (8004dd0 <main+0x2f4>)
 8004c60:	2200      	movs	r2, #0
 8004c62:	801a      	strh	r2, [r3, #0]
			}
		}
		if (steps != 0) {
 8004c64:	4b5c      	ldr	r3, [pc, #368]	@ (8004dd8 <main+0x2fc>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d027      	beq.n	8004cbc <main+0x1e0>
			game.stepsToday += steps;
 8004c6c:	4a59      	ldr	r2, [pc, #356]	@ (8004dd4 <main+0x2f8>)
 8004c6e:	2390      	movs	r3, #144	@ 0x90
 8004c70:	005b      	lsls	r3, r3, #1
 8004c72:	58d2      	ldr	r2, [r2, r3]
 8004c74:	4b58      	ldr	r3, [pc, #352]	@ (8004dd8 <main+0x2fc>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	18d1      	adds	r1, r2, r3
 8004c7a:	4a56      	ldr	r2, [pc, #344]	@ (8004dd4 <main+0x2f8>)
 8004c7c:	2390      	movs	r3, #144	@ 0x90
 8004c7e:	005b      	lsls	r3, r3, #1
 8004c80:	50d1      	str	r1, [r2, r3]
			game.weeklySteps += steps;
 8004c82:	4a54      	ldr	r2, [pc, #336]	@ (8004dd4 <main+0x2f8>)
 8004c84:	238e      	movs	r3, #142	@ 0x8e
 8004c86:	005b      	lsls	r3, r3, #1
 8004c88:	58d2      	ldr	r2, [r2, r3]
 8004c8a:	4b53      	ldr	r3, [pc, #332]	@ (8004dd8 <main+0x2fc>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	18d1      	adds	r1, r2, r3
 8004c90:	4a50      	ldr	r2, [pc, #320]	@ (8004dd4 <main+0x2f8>)
 8004c92:	238e      	movs	r3, #142	@ 0x8e
 8004c94:	005b      	lsls	r3, r3, #1
 8004c96:	50d1      	str	r1, [r2, r3]
			game.allSteps += steps;
 8004c98:	4a4e      	ldr	r2, [pc, #312]	@ (8004dd4 <main+0x2f8>)
 8004c9a:	238c      	movs	r3, #140	@ 0x8c
 8004c9c:	005b      	lsls	r3, r3, #1
 8004c9e:	58d2      	ldr	r2, [r2, r3]
 8004ca0:	4b4d      	ldr	r3, [pc, #308]	@ (8004dd8 <main+0x2fc>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	18d1      	adds	r1, r2, r3
 8004ca6:	4a4b      	ldr	r2, [pc, #300]	@ (8004dd4 <main+0x2f8>)
 8004ca8:	238c      	movs	r3, #140	@ 0x8c
 8004caa:	005b      	lsls	r3, r3, #1
 8004cac:	50d1      	str	r1, [r2, r3]
			steps = 0;
 8004cae:	4b4a      	ldr	r3, [pc, #296]	@ (8004dd8 <main+0x2fc>)
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	601a      	str	r2, [r3, #0]
			_ADXL343_WriteReg8(0x7E, 0xB1);
 8004cb4:	21b1      	movs	r1, #177	@ 0xb1
 8004cb6:	207e      	movs	r0, #126	@ 0x7e
 8004cb8:	f001 fe78 	bl	80069ac <_ADXL343_WriteReg8>
		}
		++updateScreen;
 8004cbc:	4b48      	ldr	r3, [pc, #288]	@ (8004de0 <main+0x304>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	1c5a      	adds	r2, r3, #1
 8004cc2:	4b47      	ldr	r3, [pc, #284]	@ (8004de0 <main+0x304>)
 8004cc4:	601a      	str	r2, [r3, #0]
		//SendData();
		//HAL_UART_Transmit(&huart2, "hello", 5, 100);
		switch (currentMenu) {
 8004cc6:	4b47      	ldr	r3, [pc, #284]	@ (8004de4 <main+0x308>)
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	2b04      	cmp	r3, #4
 8004ccc:	d100      	bne.n	8004cd0 <main+0x1f4>
 8004cce:	e21d      	b.n	800510c <main+0x630>
 8004cd0:	dd00      	ble.n	8004cd4 <main+0x1f8>
 8004cd2:	e37e      	b.n	80053d2 <main+0x8f6>
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d100      	bne.n	8004cda <main+0x1fe>
 8004cd8:	e096      	b.n	8004e08 <main+0x32c>
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d000      	beq.n	8004ce0 <main+0x204>
 8004cde:	e378      	b.n	80053d2 <main+0x8f6>
		case Main:


			if (updateScreen >= 3) {
 8004ce0:	4b3f      	ldr	r3, [pc, #252]	@ (8004de0 <main+0x304>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	2b02      	cmp	r3, #2
 8004ce6:	d92b      	bls.n	8004d40 <main+0x264>
				updateScreen = 0;
 8004ce8:	4b3d      	ldr	r3, [pc, #244]	@ (8004de0 <main+0x304>)
 8004cea:	2200      	movs	r2, #0
 8004cec:	601a      	str	r2, [r3, #0]

				AnimateCharacter(imgPalette);
 8004cee:	4b3e      	ldr	r3, [pc, #248]	@ (8004de8 <main+0x30c>)
 8004cf0:	0018      	movs	r0, r3
 8004cf2:	f001 fbbb 	bl	800646c <AnimateCharacter>
				//Update steps
				drawString(0, 150, "-SILLY LITTLE GUY-", WHITE, BLACK, 1, 1);
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	425b      	negs	r3, r3
 8004cfa:	4a3c      	ldr	r2, [pc, #240]	@ (8004dec <main+0x310>)
 8004cfc:	2101      	movs	r1, #1
 8004cfe:	9102      	str	r1, [sp, #8]
 8004d00:	2101      	movs	r1, #1
 8004d02:	9101      	str	r1, [sp, #4]
 8004d04:	2100      	movs	r1, #0
 8004d06:	9100      	str	r1, [sp, #0]
 8004d08:	2196      	movs	r1, #150	@ 0x96
 8004d0a:	2000      	movs	r0, #0
 8004d0c:	f7ff f941 	bl	8003f92 <drawString>
				sprintf(buffer2, "Steps: %d ", game.stepsToday);
 8004d10:	4a30      	ldr	r2, [pc, #192]	@ (8004dd4 <main+0x2f8>)
 8004d12:	2390      	movs	r3, #144	@ 0x90
 8004d14:	005b      	lsls	r3, r3, #1
 8004d16:	58d2      	ldr	r2, [r2, r3]
 8004d18:	4935      	ldr	r1, [pc, #212]	@ (8004df0 <main+0x314>)
 8004d1a:	4b36      	ldr	r3, [pc, #216]	@ (8004df4 <main+0x318>)
 8004d1c:	0018      	movs	r0, r3
 8004d1e:	f00a f887 	bl	800ee30 <siprintf>
				drawString(0, 0, buffer2, WHITE, BLACK, 1, 1);
 8004d22:	2301      	movs	r3, #1
 8004d24:	425b      	negs	r3, r3
 8004d26:	4a33      	ldr	r2, [pc, #204]	@ (8004df4 <main+0x318>)
 8004d28:	2101      	movs	r1, #1
 8004d2a:	9102      	str	r1, [sp, #8]
 8004d2c:	2101      	movs	r1, #1
 8004d2e:	9101      	str	r1, [sp, #4]
 8004d30:	2100      	movs	r1, #0
 8004d32:	9100      	str	r1, [sp, #0]
 8004d34:	2100      	movs	r1, #0
 8004d36:	2000      	movs	r0, #0
 8004d38:	f7ff f92b 	bl	8003f92 <drawString>
				Emote();
 8004d3c:	f002 fa62 	bl	8007204 <Emote>
			}

			//Interact with the SLG
			if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1) == GPIO_PIN_SET) {
 8004d40:	4b2d      	ldr	r3, [pc, #180]	@ (8004df8 <main+0x31c>)
 8004d42:	2102      	movs	r1, #2
 8004d44:	0018      	movs	r0, r3
 8004d46:	f004 fd51 	bl	80097ec <HAL_GPIO_ReadPin>
 8004d4a:	0003      	movs	r3, r0
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d101      	bne.n	8004d54 <main+0x278>
				//if(game.weeklySteps == game.weeklyGoal)
				//{
					//Evolve();
				//}
				//Evolve();
				FlashErase();
 8004d50:	f001 f940 	bl	8005fd4 <FlashErase>
				//FlashWrite();
				//StructInit();
			}

			//Change current Menu
			if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_SET) {
 8004d54:	4b29      	ldr	r3, [pc, #164]	@ (8004dfc <main+0x320>)
 8004d56:	2104      	movs	r1, #4
 8004d58:	0018      	movs	r0, r3
 8004d5a:	f004 fd47 	bl	80097ec <HAL_GPIO_ReadPin>
 8004d5e:	0003      	movs	r3, r0
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d111      	bne.n	8004d88 <main+0x2ac>
				effect = MenuBeep;
 8004d64:	4b26      	ldr	r3, [pc, #152]	@ (8004e00 <main+0x324>)
 8004d66:	2200      	movs	r2, #0
 8004d68:	701a      	strb	r2, [r3, #0]
				PlayEffect(effect);
 8004d6a:	4b25      	ldr	r3, [pc, #148]	@ (8004e00 <main+0x324>)
 8004d6c:	781b      	ldrb	r3, [r3, #0]
 8004d6e:	0018      	movs	r0, r3
 8004d70:	f000 fe5a 	bl	8005a28 <PlayEffect>

				currentMenu = Settings;
 8004d74:	4b1b      	ldr	r3, [pc, #108]	@ (8004de4 <main+0x308>)
 8004d76:	2204      	movs	r2, #4
 8004d78:	701a      	strb	r2, [r3, #0]
				canChange = 0;
 8004d7a:	4b22      	ldr	r3, [pc, #136]	@ (8004e04 <main+0x328>)
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	701a      	strb	r2, [r3, #0]
				fillScreen(BLACK);
 8004d80:	2000      	movs	r0, #0
 8004d82:	f7ff fa4b 	bl	800421c <fillScreen>
				canChange = 0;
				fillScreen(BLACK);
			} else
				canChange = 1;

			break;
 8004d86:	e324      	b.n	80053d2 <main+0x8f6>
			} else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_SET) {
 8004d88:	2380      	movs	r3, #128	@ 0x80
 8004d8a:	011a      	lsls	r2, r3, #4
 8004d8c:	23a0      	movs	r3, #160	@ 0xa0
 8004d8e:	05db      	lsls	r3, r3, #23
 8004d90:	0011      	movs	r1, r2
 8004d92:	0018      	movs	r0, r3
 8004d94:	f004 fd2a 	bl	80097ec <HAL_GPIO_ReadPin>
 8004d98:	0003      	movs	r3, r0
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d111      	bne.n	8004dc2 <main+0x2e6>
				effect = MenuBeep;
 8004d9e:	4b18      	ldr	r3, [pc, #96]	@ (8004e00 <main+0x324>)
 8004da0:	2200      	movs	r2, #0
 8004da2:	701a      	strb	r2, [r3, #0]
				PlayEffect(effect);
 8004da4:	4b16      	ldr	r3, [pc, #88]	@ (8004e00 <main+0x324>)
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	0018      	movs	r0, r3
 8004daa:	f000 fe3d 	bl	8005a28 <PlayEffect>
				currentMenu = StatsDisplay;
 8004dae:	4b0d      	ldr	r3, [pc, #52]	@ (8004de4 <main+0x308>)
 8004db0:	2200      	movs	r2, #0
 8004db2:	701a      	strb	r2, [r3, #0]
				canChange = 0;
 8004db4:	4b13      	ldr	r3, [pc, #76]	@ (8004e04 <main+0x328>)
 8004db6:	2200      	movs	r2, #0
 8004db8:	701a      	strb	r2, [r3, #0]
				fillScreen(BLACK);
 8004dba:	2000      	movs	r0, #0
 8004dbc:	f7ff fa2e 	bl	800421c <fillScreen>
			break;
 8004dc0:	e307      	b.n	80053d2 <main+0x8f6>
				canChange = 1;
 8004dc2:	4b10      	ldr	r3, [pc, #64]	@ (8004e04 <main+0x328>)
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	701a      	strb	r2, [r3, #0]
			break;
 8004dc8:	e303      	b.n	80053d2 <main+0x8f6>
 8004dca:	46c0      	nop			@ (mov r8, r8)
 8004dcc:	2000043c 	.word	0x2000043c
 8004dd0:	20000000 	.word	0x20000000
 8004dd4:	20000298 	.word	0x20000298
 8004dd8:	2000126c 	.word	0x2000126c
 8004ddc:	200002b0 	.word	0x200002b0
 8004de0:	2000028c 	.word	0x2000028c
 8004de4:	20000002 	.word	0x20000002
 8004de8:	08011ebc 	.word	0x08011ebc
 8004dec:	080115c0 	.word	0x080115c0
 8004df0:	080115d4 	.word	0x080115d4
 8004df4:	20001208 	.word	0x20001208
 8004df8:	50000800 	.word	0x50000800
 8004dfc:	50000400 	.word	0x50000400
 8004e00:	20000288 	.word	0x20000288
 8004e04:	20000003 	.word	0x20000003
		case StatsDisplay:

			if (updateScreen >= 5) {
 8004e08:	4bec      	ldr	r3, [pc, #944]	@ (80051bc <main+0x6e0>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	2b04      	cmp	r3, #4
 8004e0e:	d800      	bhi.n	8004e12 <main+0x336>
 8004e10:	e15e      	b.n	80050d0 <main+0x5f4>
				//fillScreen(BLACK);

				drawString(0, 150, "STEPS", WHITE, BLACK, 1, 1);
 8004e12:	2301      	movs	r3, #1
 8004e14:	425b      	negs	r3, r3
 8004e16:	4aea      	ldr	r2, [pc, #936]	@ (80051c0 <main+0x6e4>)
 8004e18:	2101      	movs	r1, #1
 8004e1a:	9102      	str	r1, [sp, #8]
 8004e1c:	2101      	movs	r1, #1
 8004e1e:	9101      	str	r1, [sp, #4]
 8004e20:	2100      	movs	r1, #0
 8004e22:	9100      	str	r1, [sp, #0]
 8004e24:	2196      	movs	r1, #150	@ 0x96
 8004e26:	2000      	movs	r0, #0
 8004e28:	f7ff f8b3 	bl	8003f92 <drawString>
				sprintf(buffer2, "Today: %d ", game.stepsToday);
 8004e2c:	4ae5      	ldr	r2, [pc, #916]	@ (80051c4 <main+0x6e8>)
 8004e2e:	2390      	movs	r3, #144	@ 0x90
 8004e30:	005b      	lsls	r3, r3, #1
 8004e32:	58d2      	ldr	r2, [r2, r3]
 8004e34:	49e4      	ldr	r1, [pc, #912]	@ (80051c8 <main+0x6ec>)
 8004e36:	4be5      	ldr	r3, [pc, #916]	@ (80051cc <main+0x6f0>)
 8004e38:	0018      	movs	r0, r3
 8004e3a:	f009 fff9 	bl	800ee30 <siprintf>
				drawString(0, 140, buffer2, WHITE, BLACK, 1, 1);
 8004e3e:	2301      	movs	r3, #1
 8004e40:	425b      	negs	r3, r3
 8004e42:	4ae2      	ldr	r2, [pc, #904]	@ (80051cc <main+0x6f0>)
 8004e44:	2101      	movs	r1, #1
 8004e46:	9102      	str	r1, [sp, #8]
 8004e48:	2101      	movs	r1, #1
 8004e4a:	9101      	str	r1, [sp, #4]
 8004e4c:	2100      	movs	r1, #0
 8004e4e:	9100      	str	r1, [sp, #0]
 8004e50:	218c      	movs	r1, #140	@ 0x8c
 8004e52:	2000      	movs	r0, #0
 8004e54:	f7ff f89d 	bl	8003f92 <drawString>
				sprintf(buffer2, "This week: %d ", game.weeklySteps);
 8004e58:	4ada      	ldr	r2, [pc, #872]	@ (80051c4 <main+0x6e8>)
 8004e5a:	238e      	movs	r3, #142	@ 0x8e
 8004e5c:	005b      	lsls	r3, r3, #1
 8004e5e:	58d2      	ldr	r2, [r2, r3]
 8004e60:	49db      	ldr	r1, [pc, #876]	@ (80051d0 <main+0x6f4>)
 8004e62:	4bda      	ldr	r3, [pc, #872]	@ (80051cc <main+0x6f0>)
 8004e64:	0018      	movs	r0, r3
 8004e66:	f009 ffe3 	bl	800ee30 <siprintf>
				drawString(0, 130, buffer2, WHITE, BLACK, 1, 1);
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	425b      	negs	r3, r3
 8004e6e:	4ad7      	ldr	r2, [pc, #860]	@ (80051cc <main+0x6f0>)
 8004e70:	2101      	movs	r1, #1
 8004e72:	9102      	str	r1, [sp, #8]
 8004e74:	2101      	movs	r1, #1
 8004e76:	9101      	str	r1, [sp, #4]
 8004e78:	2100      	movs	r1, #0
 8004e7a:	9100      	str	r1, [sp, #0]
 8004e7c:	2182      	movs	r1, #130	@ 0x82
 8004e7e:	2000      	movs	r0, #0
 8004e80:	f7ff f887 	bl	8003f92 <drawString>
				sprintf(buffer2, "All time: %d ", game.allSteps);
 8004e84:	4acf      	ldr	r2, [pc, #828]	@ (80051c4 <main+0x6e8>)
 8004e86:	238c      	movs	r3, #140	@ 0x8c
 8004e88:	005b      	lsls	r3, r3, #1
 8004e8a:	58d2      	ldr	r2, [r2, r3]
 8004e8c:	49d1      	ldr	r1, [pc, #836]	@ (80051d4 <main+0x6f8>)
 8004e8e:	4bcf      	ldr	r3, [pc, #828]	@ (80051cc <main+0x6f0>)
 8004e90:	0018      	movs	r0, r3
 8004e92:	f009 ffcd 	bl	800ee30 <siprintf>
				drawString(0, 120, buffer2, WHITE, BLACK, 1, 1);
 8004e96:	2301      	movs	r3, #1
 8004e98:	425b      	negs	r3, r3
 8004e9a:	4acc      	ldr	r2, [pc, #816]	@ (80051cc <main+0x6f0>)
 8004e9c:	2101      	movs	r1, #1
 8004e9e:	9102      	str	r1, [sp, #8]
 8004ea0:	2101      	movs	r1, #1
 8004ea2:	9101      	str	r1, [sp, #4]
 8004ea4:	2100      	movs	r1, #0
 8004ea6:	9100      	str	r1, [sp, #0]
 8004ea8:	2178      	movs	r1, #120	@ 0x78
 8004eaa:	2000      	movs	r0, #0
 8004eac:	f7ff f871 	bl	8003f92 <drawString>
				drawString(0, 110, "POSITIONS", WHITE, BLACK, 1, 1);
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	425b      	negs	r3, r3
 8004eb4:	4ac8      	ldr	r2, [pc, #800]	@ (80051d8 <main+0x6fc>)
 8004eb6:	2101      	movs	r1, #1
 8004eb8:	9102      	str	r1, [sp, #8]
 8004eba:	2101      	movs	r1, #1
 8004ebc:	9101      	str	r1, [sp, #4]
 8004ebe:	2100      	movs	r1, #0
 8004ec0:	9100      	str	r1, [sp, #0]
 8004ec2:	216e      	movs	r1, #110	@ 0x6e
 8004ec4:	2000      	movs	r0, #0
 8004ec6:	f7ff f864 	bl	8003f92 <drawString>
				sprintf(buffer2, "Count/Mult: %d", game.numLocations);
 8004eca:	4bbe      	ldr	r3, [pc, #760]	@ (80051c4 <main+0x6e8>)
 8004ecc:	695a      	ldr	r2, [r3, #20]
 8004ece:	49c3      	ldr	r1, [pc, #780]	@ (80051dc <main+0x700>)
 8004ed0:	4bbe      	ldr	r3, [pc, #760]	@ (80051cc <main+0x6f0>)
 8004ed2:	0018      	movs	r0, r3
 8004ed4:	f009 ffac 	bl	800ee30 <siprintf>
				drawString(0, 100, buffer2, WHITE, BLACK, 1, 1);
 8004ed8:	2301      	movs	r3, #1
 8004eda:	425b      	negs	r3, r3
 8004edc:	4abb      	ldr	r2, [pc, #748]	@ (80051cc <main+0x6f0>)
 8004ede:	2101      	movs	r1, #1
 8004ee0:	9102      	str	r1, [sp, #8]
 8004ee2:	2101      	movs	r1, #1
 8004ee4:	9101      	str	r1, [sp, #4]
 8004ee6:	2100      	movs	r1, #0
 8004ee8:	9100      	str	r1, [sp, #0]
 8004eea:	2164      	movs	r1, #100	@ 0x64
 8004eec:	2000      	movs	r0, #0
 8004eee:	f7ff f850 	bl	8003f92 <drawString>
				sprintf(buffer2, "Old Lat: %d.%d",
						(int) (game.positions[game.numLocations - 1].lat),
 8004ef2:	4bb4      	ldr	r3, [pc, #720]	@ (80051c4 <main+0x6e8>)
 8004ef4:	695b      	ldr	r3, [r3, #20]
 8004ef6:	1e5a      	subs	r2, r3, #1
 8004ef8:	4bb2      	ldr	r3, [pc, #712]	@ (80051c4 <main+0x6e8>)
 8004efa:	3203      	adds	r2, #3
 8004efc:	00d2      	lsls	r2, r2, #3
 8004efe:	58d3      	ldr	r3, [r2, r3]
				sprintf(buffer2, "Old Lat: %d.%d",
 8004f00:	1c18      	adds	r0, r3, #0
 8004f02:	f7fc fc53 	bl	80017ac <__aeabi_f2iz>
 8004f06:	0004      	movs	r4, r0
						abs(
								(int) (((game.positions[game.numLocations - 1].lat)
 8004f08:	4bae      	ldr	r3, [pc, #696]	@ (80051c4 <main+0x6e8>)
 8004f0a:	695b      	ldr	r3, [r3, #20]
 8004f0c:	1e5a      	subs	r2, r3, #1
 8004f0e:	4bad      	ldr	r3, [pc, #692]	@ (80051c4 <main+0x6e8>)
 8004f10:	3203      	adds	r2, #3
 8004f12:	00d2      	lsls	r2, r2, #3
 8004f14:	58d3      	ldr	r3, [r2, r3]
										* 10000)) % 10000));
 8004f16:	49b2      	ldr	r1, [pc, #712]	@ (80051e0 <main+0x704>)
 8004f18:	1c18      	adds	r0, r3, #0
 8004f1a:	f7fc f889 	bl	8001030 <__aeabi_fmul>
 8004f1e:	1c03      	adds	r3, r0, #0
								(int) (((game.positions[game.numLocations - 1].lat)
 8004f20:	1c18      	adds	r0, r3, #0
 8004f22:	f7fc fc43 	bl	80017ac <__aeabi_f2iz>
 8004f26:	0003      	movs	r3, r0
										* 10000)) % 10000));
 8004f28:	49ae      	ldr	r1, [pc, #696]	@ (80051e4 <main+0x708>)
 8004f2a:	0018      	movs	r0, r3
 8004f2c:	f7fb fa82 	bl	8000434 <__aeabi_idivmod>
 8004f30:	000b      	movs	r3, r1
				sprintf(buffer2, "Old Lat: %d.%d",
 8004f32:	17da      	asrs	r2, r3, #31
 8004f34:	189b      	adds	r3, r3, r2
 8004f36:	4053      	eors	r3, r2
 8004f38:	49ab      	ldr	r1, [pc, #684]	@ (80051e8 <main+0x70c>)
 8004f3a:	48a4      	ldr	r0, [pc, #656]	@ (80051cc <main+0x6f0>)
 8004f3c:	0022      	movs	r2, r4
 8004f3e:	f009 ff77 	bl	800ee30 <siprintf>
				drawString(0, 90, buffer2, WHITE, BLACK, 1, 1);
 8004f42:	2301      	movs	r3, #1
 8004f44:	425b      	negs	r3, r3
 8004f46:	4aa1      	ldr	r2, [pc, #644]	@ (80051cc <main+0x6f0>)
 8004f48:	2101      	movs	r1, #1
 8004f4a:	9102      	str	r1, [sp, #8]
 8004f4c:	2101      	movs	r1, #1
 8004f4e:	9101      	str	r1, [sp, #4]
 8004f50:	2100      	movs	r1, #0
 8004f52:	9100      	str	r1, [sp, #0]
 8004f54:	215a      	movs	r1, #90	@ 0x5a
 8004f56:	2000      	movs	r0, #0
 8004f58:	f7ff f81b 	bl	8003f92 <drawString>
				sprintf(buffer2, "Old Lon: %d.%d",
						(int) (game.positions[game.numLocations - 1].lon),
 8004f5c:	4b99      	ldr	r3, [pc, #612]	@ (80051c4 <main+0x6e8>)
 8004f5e:	695b      	ldr	r3, [r3, #20]
 8004f60:	3b01      	subs	r3, #1
 8004f62:	4a98      	ldr	r2, [pc, #608]	@ (80051c4 <main+0x6e8>)
 8004f64:	3303      	adds	r3, #3
 8004f66:	00db      	lsls	r3, r3, #3
 8004f68:	18d3      	adds	r3, r2, r3
 8004f6a:	3304      	adds	r3, #4
 8004f6c:	681b      	ldr	r3, [r3, #0]
				sprintf(buffer2, "Old Lon: %d.%d",
 8004f6e:	1c18      	adds	r0, r3, #0
 8004f70:	f7fc fc1c 	bl	80017ac <__aeabi_f2iz>
 8004f74:	0004      	movs	r4, r0
						abs(
								(int) (((game.positions[game.numLocations - 1].lon)
 8004f76:	4b93      	ldr	r3, [pc, #588]	@ (80051c4 <main+0x6e8>)
 8004f78:	695b      	ldr	r3, [r3, #20]
 8004f7a:	3b01      	subs	r3, #1
 8004f7c:	4a91      	ldr	r2, [pc, #580]	@ (80051c4 <main+0x6e8>)
 8004f7e:	3303      	adds	r3, #3
 8004f80:	00db      	lsls	r3, r3, #3
 8004f82:	18d3      	adds	r3, r2, r3
 8004f84:	3304      	adds	r3, #4
 8004f86:	681b      	ldr	r3, [r3, #0]
										* 10000)) % 10000));
 8004f88:	4995      	ldr	r1, [pc, #596]	@ (80051e0 <main+0x704>)
 8004f8a:	1c18      	adds	r0, r3, #0
 8004f8c:	f7fc f850 	bl	8001030 <__aeabi_fmul>
 8004f90:	1c03      	adds	r3, r0, #0
								(int) (((game.positions[game.numLocations - 1].lon)
 8004f92:	1c18      	adds	r0, r3, #0
 8004f94:	f7fc fc0a 	bl	80017ac <__aeabi_f2iz>
 8004f98:	0003      	movs	r3, r0
										* 10000)) % 10000));
 8004f9a:	4992      	ldr	r1, [pc, #584]	@ (80051e4 <main+0x708>)
 8004f9c:	0018      	movs	r0, r3
 8004f9e:	f7fb fa49 	bl	8000434 <__aeabi_idivmod>
 8004fa2:	000b      	movs	r3, r1
				sprintf(buffer2, "Old Lon: %d.%d",
 8004fa4:	17da      	asrs	r2, r3, #31
 8004fa6:	189b      	adds	r3, r3, r2
 8004fa8:	4053      	eors	r3, r2
 8004faa:	4990      	ldr	r1, [pc, #576]	@ (80051ec <main+0x710>)
 8004fac:	4887      	ldr	r0, [pc, #540]	@ (80051cc <main+0x6f0>)
 8004fae:	0022      	movs	r2, r4
 8004fb0:	f009 ff3e 	bl	800ee30 <siprintf>
				drawString(0, 80, buffer2, WHITE, BLACK, 1, 1);
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	425b      	negs	r3, r3
 8004fb8:	4a84      	ldr	r2, [pc, #528]	@ (80051cc <main+0x6f0>)
 8004fba:	2101      	movs	r1, #1
 8004fbc:	9102      	str	r1, [sp, #8]
 8004fbe:	2101      	movs	r1, #1
 8004fc0:	9101      	str	r1, [sp, #4]
 8004fc2:	2100      	movs	r1, #0
 8004fc4:	9100      	str	r1, [sp, #0]
 8004fc6:	2150      	movs	r1, #80	@ 0x50
 8004fc8:	2000      	movs	r0, #0
 8004fca:	f7fe ffe2 	bl	8003f92 <drawString>
				if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1) == GPIO_PIN_SET) {
 8004fce:	4b88      	ldr	r3, [pc, #544]	@ (80051f0 <main+0x714>)
 8004fd0:	2102      	movs	r1, #2
 8004fd2:	0018      	movs	r0, r3
 8004fd4:	f004 fc0a 	bl	80097ec <HAL_GPIO_ReadPin>
 8004fd8:	0003      	movs	r3, r0
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d175      	bne.n	80050ca <main+0x5ee>
					if(GetJustLatLon().lat<2000.0f){
 8004fde:	003b      	movs	r3, r7
 8004fe0:	0018      	movs	r0, r3
 8004fe2:	f002 f9cb 	bl	800737c <GetJustLatLon>
 8004fe6:	003b      	movs	r3, r7
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4982      	ldr	r1, [pc, #520]	@ (80051f4 <main+0x718>)
 8004fec:	1c18      	adds	r0, r3, #0
 8004fee:	f7fb fa77 	bl	80004e0 <__aeabi_fcmplt>
 8004ff2:	1e03      	subs	r3, r0, #0
 8004ff4:	d069      	beq.n	80050ca <main+0x5ee>
					sprintf(buffer2, "Lat: %d.%d", (int) (GetJustLatLon().lat),
 8004ff6:	2408      	movs	r4, #8
 8004ff8:	193b      	adds	r3, r7, r4
 8004ffa:	0018      	movs	r0, r3
 8004ffc:	f002 f9be 	bl	800737c <GetJustLatLon>
 8005000:	193b      	adds	r3, r7, r4
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	1c18      	adds	r0, r3, #0
 8005006:	f7fc fbd1 	bl	80017ac <__aeabi_f2iz>
 800500a:	0004      	movs	r4, r0
							abs(
									((int) ((GetJustLatLon().lat) * 10000))
 800500c:	2510      	movs	r5, #16
 800500e:	197b      	adds	r3, r7, r5
 8005010:	0018      	movs	r0, r3
 8005012:	f002 f9b3 	bl	800737c <GetJustLatLon>
 8005016:	197b      	adds	r3, r7, r5
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4971      	ldr	r1, [pc, #452]	@ (80051e0 <main+0x704>)
 800501c:	1c18      	adds	r0, r3, #0
 800501e:	f7fc f807 	bl	8001030 <__aeabi_fmul>
 8005022:	1c03      	adds	r3, r0, #0
 8005024:	1c18      	adds	r0, r3, #0
 8005026:	f7fc fbc1 	bl	80017ac <__aeabi_f2iz>
 800502a:	0003      	movs	r3, r0
											% 10000));
 800502c:	496d      	ldr	r1, [pc, #436]	@ (80051e4 <main+0x708>)
 800502e:	0018      	movs	r0, r3
 8005030:	f7fb fa00 	bl	8000434 <__aeabi_idivmod>
 8005034:	000b      	movs	r3, r1
					sprintf(buffer2, "Lat: %d.%d", (int) (GetJustLatLon().lat),
 8005036:	17da      	asrs	r2, r3, #31
 8005038:	189b      	adds	r3, r3, r2
 800503a:	4053      	eors	r3, r2
 800503c:	496e      	ldr	r1, [pc, #440]	@ (80051f8 <main+0x71c>)
 800503e:	4863      	ldr	r0, [pc, #396]	@ (80051cc <main+0x6f0>)
 8005040:	0022      	movs	r2, r4
 8005042:	f009 fef5 	bl	800ee30 <siprintf>
					drawString(0, 70, buffer2, WHITE, BLACK, 1, 1);
 8005046:	2301      	movs	r3, #1
 8005048:	425b      	negs	r3, r3
 800504a:	4a60      	ldr	r2, [pc, #384]	@ (80051cc <main+0x6f0>)
 800504c:	2101      	movs	r1, #1
 800504e:	9102      	str	r1, [sp, #8]
 8005050:	2101      	movs	r1, #1
 8005052:	9101      	str	r1, [sp, #4]
 8005054:	2100      	movs	r1, #0
 8005056:	9100      	str	r1, [sp, #0]
 8005058:	2146      	movs	r1, #70	@ 0x46
 800505a:	2000      	movs	r0, #0
 800505c:	f7fe ff99 	bl	8003f92 <drawString>
					sprintf(buffer2, "Lon: %d.%d", (int) (GetJustLatLon().lon),
 8005060:	2418      	movs	r4, #24
 8005062:	193b      	adds	r3, r7, r4
 8005064:	0018      	movs	r0, r3
 8005066:	f002 f989 	bl	800737c <GetJustLatLon>
 800506a:	193b      	adds	r3, r7, r4
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	1c18      	adds	r0, r3, #0
 8005070:	f7fc fb9c 	bl	80017ac <__aeabi_f2iz>
 8005074:	0004      	movs	r4, r0
							abs(
									(int) (((GetJustLatLon().lon) * 10000))
 8005076:	2520      	movs	r5, #32
 8005078:	197b      	adds	r3, r7, r5
 800507a:	0018      	movs	r0, r3
 800507c:	f002 f97e 	bl	800737c <GetJustLatLon>
 8005080:	197b      	adds	r3, r7, r5
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	4956      	ldr	r1, [pc, #344]	@ (80051e0 <main+0x704>)
 8005086:	1c18      	adds	r0, r3, #0
 8005088:	f7fb ffd2 	bl	8001030 <__aeabi_fmul>
 800508c:	1c03      	adds	r3, r0, #0
 800508e:	1c18      	adds	r0, r3, #0
 8005090:	f7fc fb8c 	bl	80017ac <__aeabi_f2iz>
 8005094:	0003      	movs	r3, r0
											% 10000));
 8005096:	4953      	ldr	r1, [pc, #332]	@ (80051e4 <main+0x708>)
 8005098:	0018      	movs	r0, r3
 800509a:	f7fb f9cb 	bl	8000434 <__aeabi_idivmod>
 800509e:	000b      	movs	r3, r1
					sprintf(buffer2, "Lon: %d.%d", (int) (GetJustLatLon().lon),
 80050a0:	17da      	asrs	r2, r3, #31
 80050a2:	189b      	adds	r3, r3, r2
 80050a4:	4053      	eors	r3, r2
 80050a6:	4955      	ldr	r1, [pc, #340]	@ (80051fc <main+0x720>)
 80050a8:	4848      	ldr	r0, [pc, #288]	@ (80051cc <main+0x6f0>)
 80050aa:	0022      	movs	r2, r4
 80050ac:	f009 fec0 	bl	800ee30 <siprintf>
					drawString(0, 60, buffer2, WHITE, BLACK, 1, 1);
 80050b0:	2301      	movs	r3, #1
 80050b2:	425b      	negs	r3, r3
 80050b4:	4a45      	ldr	r2, [pc, #276]	@ (80051cc <main+0x6f0>)
 80050b6:	2101      	movs	r1, #1
 80050b8:	9102      	str	r1, [sp, #8]
 80050ba:	2101      	movs	r1, #1
 80050bc:	9101      	str	r1, [sp, #4]
 80050be:	2100      	movs	r1, #0
 80050c0:	9100      	str	r1, [sp, #0]
 80050c2:	213c      	movs	r1, #60	@ 0x3c
 80050c4:	2000      	movs	r0, #0
 80050c6:	f7fe ff64 	bl	8003f92 <drawString>
				}
				}
				updateScreen = 0;
 80050ca:	4b3c      	ldr	r3, [pc, #240]	@ (80051bc <main+0x6e0>)
 80050cc:	2200      	movs	r2, #0
 80050ce:	601a      	str	r2, [r3, #0]
			}
			if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_SET) {
 80050d0:	4b4b      	ldr	r3, [pc, #300]	@ (8005200 <main+0x724>)
 80050d2:	2104      	movs	r1, #4
 80050d4:	0018      	movs	r0, r3
 80050d6:	f004 fb89 	bl	80097ec <HAL_GPIO_ReadPin>
 80050da:	0003      	movs	r3, r0
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d111      	bne.n	8005104 <main+0x628>
				effect = MenuBeep;
 80050e0:	4b48      	ldr	r3, [pc, #288]	@ (8005204 <main+0x728>)
 80050e2:	2200      	movs	r2, #0
 80050e4:	701a      	strb	r2, [r3, #0]
				PlayEffect(effect);
 80050e6:	4b47      	ldr	r3, [pc, #284]	@ (8005204 <main+0x728>)
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	0018      	movs	r0, r3
 80050ec:	f000 fc9c 	bl	8005a28 <PlayEffect>

				currentMenu = Main;
 80050f0:	4b45      	ldr	r3, [pc, #276]	@ (8005208 <main+0x72c>)
 80050f2:	2201      	movs	r2, #1
 80050f4:	701a      	strb	r2, [r3, #0]
				canChange = 0;
 80050f6:	4b45      	ldr	r3, [pc, #276]	@ (800520c <main+0x730>)
 80050f8:	2200      	movs	r2, #0
 80050fa:	701a      	strb	r2, [r3, #0]
				fillScreen(BLACK);
 80050fc:	2000      	movs	r0, #0
 80050fe:	f7ff f88d 	bl	800421c <fillScreen>
			} else
				canChange = 1;

			break;
 8005102:	e166      	b.n	80053d2 <main+0x8f6>
				canChange = 1;
 8005104:	4b41      	ldr	r3, [pc, #260]	@ (800520c <main+0x730>)
 8005106:	2201      	movs	r2, #1
 8005108:	701a      	strb	r2, [r3, #0]
			break;
 800510a:	e162      	b.n	80053d2 <main+0x8f6>
			//{
			//SendData();
			//ReceiveData();
			//}

			if (updateScreen >= 2) {
 800510c:	4b2b      	ldr	r3, [pc, #172]	@ (80051bc <main+0x6e0>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	2b01      	cmp	r3, #1
 8005112:	d800      	bhi.n	8005116 <main+0x63a>
 8005114:	e138      	b.n	8005388 <main+0x8ac>
				updateScreen = 0;
 8005116:	4b29      	ldr	r3, [pc, #164]	@ (80051bc <main+0x6e0>)
 8005118:	2200      	movs	r2, #0
 800511a:	601a      	str	r2, [r3, #0]
				drawString(0, 150, "-OPTIONS-", WHITE, BLACK, 1, 1);
 800511c:	2301      	movs	r3, #1
 800511e:	425b      	negs	r3, r3
 8005120:	4a3b      	ldr	r2, [pc, #236]	@ (8005210 <main+0x734>)
 8005122:	2101      	movs	r1, #1
 8005124:	9102      	str	r1, [sp, #8]
 8005126:	2101      	movs	r1, #1
 8005128:	9101      	str	r1, [sp, #4]
 800512a:	2100      	movs	r1, #0
 800512c:	9100      	str	r1, [sp, #0]
 800512e:	2196      	movs	r1, #150	@ 0x96
 8005130:	2000      	movs	r0, #0
 8005132:	f7fe ff2e 	bl	8003f92 <drawString>
				sprintf(buffer2, "GOAL: %d ", game.dailyGoal);
 8005136:	4a23      	ldr	r2, [pc, #140]	@ (80051c4 <main+0x6e8>)
 8005138:	2392      	movs	r3, #146	@ 0x92
 800513a:	005b      	lsls	r3, r3, #1
 800513c:	58d2      	ldr	r2, [r2, r3]
 800513e:	4935      	ldr	r1, [pc, #212]	@ (8005214 <main+0x738>)
 8005140:	4b22      	ldr	r3, [pc, #136]	@ (80051cc <main+0x6f0>)
 8005142:	0018      	movs	r0, r3
 8005144:	f009 fe74 	bl	800ee30 <siprintf>
				drawString(0, 130, buffer2, WHITE, BLACK, 1, 1); //Display the current difficulty
 8005148:	2301      	movs	r3, #1
 800514a:	425b      	negs	r3, r3
 800514c:	4a1f      	ldr	r2, [pc, #124]	@ (80051cc <main+0x6f0>)
 800514e:	2101      	movs	r1, #1
 8005150:	9102      	str	r1, [sp, #8]
 8005152:	2101      	movs	r1, #1
 8005154:	9101      	str	r1, [sp, #4]
 8005156:	2100      	movs	r1, #0
 8005158:	9100      	str	r1, [sp, #0]
 800515a:	2182      	movs	r1, #130	@ 0x82
 800515c:	2000      	movs	r0, #0
 800515e:	f7fe ff18 	bl	8003f92 <drawString>
				drawString(0, 110, "UPLOAD DATA", WHITE, BLACK, 1, 1);
 8005162:	2301      	movs	r3, #1
 8005164:	425b      	negs	r3, r3
 8005166:	4a2c      	ldr	r2, [pc, #176]	@ (8005218 <main+0x73c>)
 8005168:	2101      	movs	r1, #1
 800516a:	9102      	str	r1, [sp, #8]
 800516c:	2101      	movs	r1, #1
 800516e:	9101      	str	r1, [sp, #4]
 8005170:	2100      	movs	r1, #0
 8005172:	9100      	str	r1, [sp, #0]
 8005174:	216e      	movs	r1, #110	@ 0x6e
 8005176:	2000      	movs	r0, #0
 8005178:	f7fe ff0b 	bl	8003f92 <drawString>
				if (editDifficulty) {
 800517c:	4b27      	ldr	r3, [pc, #156]	@ (800521c <main+0x740>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d100      	bne.n	8005186 <main+0x6aa>
 8005184:	e097      	b.n	80052b6 <main+0x7da>
					//Editing difficulty
					drawLine(0, 125, 128, 125, WHITE);
 8005186:	4b26      	ldr	r3, [pc, #152]	@ (8005220 <main+0x744>)
 8005188:	9300      	str	r3, [sp, #0]
 800518a:	237d      	movs	r3, #125	@ 0x7d
 800518c:	2280      	movs	r2, #128	@ 0x80
 800518e:	217d      	movs	r1, #125	@ 0x7d
 8005190:	2000      	movs	r0, #0
 8005192:	f7fe fe6e 	bl	8003e72 <drawLine>
					//GET OUT when the center button is pressed!
					if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1)) {
 8005196:	4b16      	ldr	r3, [pc, #88]	@ (80051f0 <main+0x714>)
 8005198:	2102      	movs	r1, #2
 800519a:	0018      	movs	r0, r3
 800519c:	f004 fb26 	bl	80097ec <HAL_GPIO_ReadPin>
 80051a0:	1e03      	subs	r3, r0, #0
 80051a2:	d03f      	beq.n	8005224 <main+0x748>
						editDifficulty = 0;
 80051a4:	4b1d      	ldr	r3, [pc, #116]	@ (800521c <main+0x740>)
 80051a6:	2200      	movs	r2, #0
 80051a8:	601a      	str	r2, [r3, #0]
						drawLine(0, 125, 128, 125, BLACK);
 80051aa:	2300      	movs	r3, #0
 80051ac:	9300      	str	r3, [sp, #0]
 80051ae:	237d      	movs	r3, #125	@ 0x7d
 80051b0:	2280      	movs	r2, #128	@ 0x80
 80051b2:	217d      	movs	r1, #125	@ 0x7d
 80051b4:	2000      	movs	r0, #0
 80051b6:	f7fe fe5c 	bl	8003e72 <drawLine>
 80051ba:	e05a      	b.n	8005272 <main+0x796>
 80051bc:	2000028c 	.word	0x2000028c
 80051c0:	080115e0 	.word	0x080115e0
 80051c4:	20000298 	.word	0x20000298
 80051c8:	080115e8 	.word	0x080115e8
 80051cc:	20001208 	.word	0x20001208
 80051d0:	080115f4 	.word	0x080115f4
 80051d4:	08011604 	.word	0x08011604
 80051d8:	08011614 	.word	0x08011614
 80051dc:	08011620 	.word	0x08011620
 80051e0:	461c4000 	.word	0x461c4000
 80051e4:	00002710 	.word	0x00002710
 80051e8:	08011630 	.word	0x08011630
 80051ec:	08011640 	.word	0x08011640
 80051f0:	50000800 	.word	0x50000800
 80051f4:	44fa0000 	.word	0x44fa0000
 80051f8:	08011650 	.word	0x08011650
 80051fc:	0801165c 	.word	0x0801165c
 8005200:	50000400 	.word	0x50000400
 8005204:	20000288 	.word	0x20000288
 8005208:	20000002 	.word	0x20000002
 800520c:	20000003 	.word	0x20000003
 8005210:	08011668 	.word	0x08011668
 8005214:	08011674 	.word	0x08011674
 8005218:	08011680 	.word	0x08011680
 800521c:	20001274 	.word	0x20001274
 8005220:	0000ffff 	.word	0x0000ffff
					}
					//Right increments the goal
					else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2)) {
 8005224:	4b6f      	ldr	r3, [pc, #444]	@ (80053e4 <main+0x908>)
 8005226:	2104      	movs	r1, #4
 8005228:	0018      	movs	r0, r3
 800522a:	f004 fadf 	bl	80097ec <HAL_GPIO_ReadPin>
 800522e:	1e03      	subs	r3, r0, #0
 8005230:	d00b      	beq.n	800524a <main+0x76e>
						game.dailyGoal += 1000;
 8005232:	4a6d      	ldr	r2, [pc, #436]	@ (80053e8 <main+0x90c>)
 8005234:	2392      	movs	r3, #146	@ 0x92
 8005236:	005b      	lsls	r3, r3, #1
 8005238:	58d3      	ldr	r3, [r2, r3]
 800523a:	22fa      	movs	r2, #250	@ 0xfa
 800523c:	0092      	lsls	r2, r2, #2
 800523e:	1899      	adds	r1, r3, r2
 8005240:	4a69      	ldr	r2, [pc, #420]	@ (80053e8 <main+0x90c>)
 8005242:	2392      	movs	r3, #146	@ 0x92
 8005244:	005b      	lsls	r3, r3, #1
 8005246:	50d1      	str	r1, [r2, r3]
 8005248:	e013      	b.n	8005272 <main+0x796>
					}
					//Left decrements the goal
					else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11)) {
 800524a:	2380      	movs	r3, #128	@ 0x80
 800524c:	011a      	lsls	r2, r3, #4
 800524e:	23a0      	movs	r3, #160	@ 0xa0
 8005250:	05db      	lsls	r3, r3, #23
 8005252:	0011      	movs	r1, r2
 8005254:	0018      	movs	r0, r3
 8005256:	f004 fac9 	bl	80097ec <HAL_GPIO_ReadPin>
 800525a:	1e03      	subs	r3, r0, #0
 800525c:	d009      	beq.n	8005272 <main+0x796>
						game.dailyGoal -= 1000;
 800525e:	4a62      	ldr	r2, [pc, #392]	@ (80053e8 <main+0x90c>)
 8005260:	2392      	movs	r3, #146	@ 0x92
 8005262:	005b      	lsls	r3, r3, #1
 8005264:	58d3      	ldr	r3, [r2, r3]
 8005266:	4a61      	ldr	r2, [pc, #388]	@ (80053ec <main+0x910>)
 8005268:	1899      	adds	r1, r3, r2
 800526a:	4a5f      	ldr	r2, [pc, #380]	@ (80053e8 <main+0x90c>)
 800526c:	2392      	movs	r3, #146	@ 0x92
 800526e:	005b      	lsls	r3, r3, #1
 8005270:	50d1      	str	r1, [r2, r3]
					}

					if (game.dailyGoal >= 999000) {
 8005272:	4a5d      	ldr	r2, [pc, #372]	@ (80053e8 <main+0x90c>)
 8005274:	2392      	movs	r3, #146	@ 0x92
 8005276:	005b      	lsls	r3, r3, #1
 8005278:	58d3      	ldr	r3, [r2, r3]
 800527a:	4a5d      	ldr	r2, [pc, #372]	@ (80053f0 <main+0x914>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d905      	bls.n	800528c <main+0x7b0>
						game.dailyGoal = 0;
 8005280:	4a59      	ldr	r2, [pc, #356]	@ (80053e8 <main+0x90c>)
 8005282:	2392      	movs	r3, #146	@ 0x92
 8005284:	005b      	lsls	r3, r3, #1
 8005286:	2100      	movs	r1, #0
 8005288:	50d1      	str	r1, [r2, r3]
 800528a:	e00a      	b.n	80052a2 <main+0x7c6>
					} else if (game.dailyGoal <= 0) {
 800528c:	4a56      	ldr	r2, [pc, #344]	@ (80053e8 <main+0x90c>)
 800528e:	2392      	movs	r3, #146	@ 0x92
 8005290:	005b      	lsls	r3, r3, #1
 8005292:	58d3      	ldr	r3, [r2, r3]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d104      	bne.n	80052a2 <main+0x7c6>
						game.dailyGoal = 999000;
 8005298:	4a53      	ldr	r2, [pc, #332]	@ (80053e8 <main+0x90c>)
 800529a:	2392      	movs	r3, #146	@ 0x92
 800529c:	005b      	lsls	r3, r3, #1
 800529e:	4955      	ldr	r1, [pc, #340]	@ (80053f4 <main+0x918>)
 80052a0:	50d1      	str	r1, [r2, r3]
					}
					sprintf(buffer2, "DIFFICULTY: %d ", game.dailyGoal);
 80052a2:	4a51      	ldr	r2, [pc, #324]	@ (80053e8 <main+0x90c>)
 80052a4:	2392      	movs	r3, #146	@ 0x92
 80052a6:	005b      	lsls	r3, r3, #1
 80052a8:	58d2      	ldr	r2, [r2, r3]
 80052aa:	4953      	ldr	r1, [pc, #332]	@ (80053f8 <main+0x91c>)
 80052ac:	4b53      	ldr	r3, [pc, #332]	@ (80053fc <main+0x920>)
 80052ae:	0018      	movs	r0, r3
 80052b0:	f009 fdbe 	bl	800ee30 <siprintf>
 80052b4:	e068      	b.n	8005388 <main+0x8ac>

				} else if (userUpload) {
 80052b6:	4b52      	ldr	r3, [pc, #328]	@ (8005400 <main+0x924>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d009      	beq.n	80052d2 <main+0x7f6>
					FlashWrite();
 80052be:	f000 fea7 	bl	8006010 <FlashWrite>

					userUpload = 0;
 80052c2:	4b4f      	ldr	r3, [pc, #316]	@ (8005400 <main+0x924>)
 80052c4:	2200      	movs	r2, #0
 80052c6:	601a      	str	r2, [r3, #0]
					SendData();
 80052c8:	f001 fb98 	bl	80069fc <SendData>
					ReceiveData();
 80052cc:	f001 fc5e 	bl	8006b8c <ReceiveData>
 80052d0:	e05a      	b.n	8005388 <main+0x8ac>
				} else {
					//Difficulty
					if (currentSetting == 0) {
 80052d2:	4b4c      	ldr	r3, [pc, #304]	@ (8005404 <main+0x928>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d110      	bne.n	80052fc <main+0x820>
						//Try to underline the option being selected
						drawLine(0, 125, 20, 125, WHITE);
 80052da:	4b4b      	ldr	r3, [pc, #300]	@ (8005408 <main+0x92c>)
 80052dc:	9300      	str	r3, [sp, #0]
 80052de:	237d      	movs	r3, #125	@ 0x7d
 80052e0:	2214      	movs	r2, #20
 80052e2:	217d      	movs	r1, #125	@ 0x7d
 80052e4:	2000      	movs	r0, #0
 80052e6:	f7fe fdc4 	bl	8003e72 <drawLine>
						//Then erase the highlight under the other option not being selected
						drawLine(0, 105, 20, 105, BLACK);
 80052ea:	2300      	movs	r3, #0
 80052ec:	9300      	str	r3, [sp, #0]
 80052ee:	2369      	movs	r3, #105	@ 0x69
 80052f0:	2214      	movs	r2, #20
 80052f2:	2169      	movs	r1, #105	@ 0x69
 80052f4:	2000      	movs	r0, #0
 80052f6:	f7fe fdbc 	bl	8003e72 <drawLine>
 80052fa:	e013      	b.n	8005324 <main+0x848>
					}
					//Upload
					else if (currentSetting == 1) {
 80052fc:	4b41      	ldr	r3, [pc, #260]	@ (8005404 <main+0x928>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	2b01      	cmp	r3, #1
 8005302:	d10f      	bne.n	8005324 <main+0x848>
						drawLine(0, 105, 20, 105, WHITE);
 8005304:	4b40      	ldr	r3, [pc, #256]	@ (8005408 <main+0x92c>)
 8005306:	9300      	str	r3, [sp, #0]
 8005308:	2369      	movs	r3, #105	@ 0x69
 800530a:	2214      	movs	r2, #20
 800530c:	2169      	movs	r1, #105	@ 0x69
 800530e:	2000      	movs	r0, #0
 8005310:	f7fe fdaf 	bl	8003e72 <drawLine>
						drawLine(0, 125, 20, 125, BLACK);
 8005314:	2300      	movs	r3, #0
 8005316:	9300      	str	r3, [sp, #0]
 8005318:	237d      	movs	r3, #125	@ 0x7d
 800531a:	2214      	movs	r2, #20
 800531c:	217d      	movs	r1, #125	@ 0x7d
 800531e:	2000      	movs	r0, #0
 8005320:	f7fe fda7 	bl	8003e72 <drawLine>
					}
					//IF RIGHT BUTTON IS PRESSED, INCREMENT THE SETTINGS MENU
					if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_SET) {
 8005324:	4b2f      	ldr	r3, [pc, #188]	@ (80053e4 <main+0x908>)
 8005326:	2104      	movs	r1, #4
 8005328:	0018      	movs	r0, r3
 800532a:	f004 fa5f 	bl	80097ec <HAL_GPIO_ReadPin>
 800532e:	0003      	movs	r3, r0
 8005330:	2b01      	cmp	r3, #1
 8005332:	d10c      	bne.n	800534e <main+0x872>
						++currentSetting;
 8005334:	4b33      	ldr	r3, [pc, #204]	@ (8005404 <main+0x928>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	1c5a      	adds	r2, r3, #1
 800533a:	4b32      	ldr	r3, [pc, #200]	@ (8005404 <main+0x928>)
 800533c:	601a      	str	r2, [r3, #0]
						if (currentSetting > 1)
 800533e:	4b31      	ldr	r3, [pc, #196]	@ (8005404 <main+0x928>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	2b01      	cmp	r3, #1
 8005344:	d920      	bls.n	8005388 <main+0x8ac>
							currentSetting = 0;
 8005346:	4b2f      	ldr	r3, [pc, #188]	@ (8005404 <main+0x928>)
 8005348:	2200      	movs	r2, #0
 800534a:	601a      	str	r2, [r3, #0]
 800534c:	e01c      	b.n	8005388 <main+0x8ac>
					}
					//PD6=Center button
					else if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1)
 800534e:	4b2f      	ldr	r3, [pc, #188]	@ (800540c <main+0x930>)
 8005350:	2102      	movs	r1, #2
 8005352:	0018      	movs	r0, r3
 8005354:	f004 fa4a 	bl	80097ec <HAL_GPIO_ReadPin>
 8005358:	1e03      	subs	r3, r0, #0
 800535a:	d007      	beq.n	800536c <main+0x890>
							&& currentSetting == 0) {
 800535c:	4b29      	ldr	r3, [pc, #164]	@ (8005404 <main+0x928>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d103      	bne.n	800536c <main+0x890>
						editDifficulty = 1;
 8005364:	4b2a      	ldr	r3, [pc, #168]	@ (8005410 <main+0x934>)
 8005366:	2201      	movs	r2, #1
 8005368:	601a      	str	r2, [r3, #0]
 800536a:	e00d      	b.n	8005388 <main+0x8ac>
					} else if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1)
 800536c:	4b27      	ldr	r3, [pc, #156]	@ (800540c <main+0x930>)
 800536e:	2102      	movs	r1, #2
 8005370:	0018      	movs	r0, r3
 8005372:	f004 fa3b 	bl	80097ec <HAL_GPIO_ReadPin>
 8005376:	1e03      	subs	r3, r0, #0
 8005378:	d006      	beq.n	8005388 <main+0x8ac>
							&& currentSetting == 1) {
 800537a:	4b22      	ldr	r3, [pc, #136]	@ (8005404 <main+0x928>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	2b01      	cmp	r3, #1
 8005380:	d102      	bne.n	8005388 <main+0x8ac>
						userUpload = 1;
 8005382:	4b1f      	ldr	r3, [pc, #124]	@ (8005400 <main+0x924>)
 8005384:	2201      	movs	r2, #1
 8005386:	601a      	str	r2, [r3, #0]
					}
				}
			}

			if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_SET
 8005388:	2380      	movs	r3, #128	@ 0x80
 800538a:	011a      	lsls	r2, r3, #4
 800538c:	23a0      	movs	r3, #160	@ 0xa0
 800538e:	05db      	lsls	r3, r3, #23
 8005390:	0011      	movs	r1, r2
 8005392:	0018      	movs	r0, r3
 8005394:	f004 fa2a 	bl	80097ec <HAL_GPIO_ReadPin>
 8005398:	0003      	movs	r3, r0
 800539a:	2b01      	cmp	r3, #1
 800539c:	d115      	bne.n	80053ca <main+0x8ee>
					&& !editDifficulty) {
 800539e:	4b1c      	ldr	r3, [pc, #112]	@ (8005410 <main+0x934>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d111      	bne.n	80053ca <main+0x8ee>
				effect = MenuBeep;
 80053a6:	4b1b      	ldr	r3, [pc, #108]	@ (8005414 <main+0x938>)
 80053a8:	2200      	movs	r2, #0
 80053aa:	701a      	strb	r2, [r3, #0]
				PlayEffect(effect);
 80053ac:	4b19      	ldr	r3, [pc, #100]	@ (8005414 <main+0x938>)
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	0018      	movs	r0, r3
 80053b2:	f000 fb39 	bl	8005a28 <PlayEffect>

				currentMenu = Main;
 80053b6:	4b18      	ldr	r3, [pc, #96]	@ (8005418 <main+0x93c>)
 80053b8:	2201      	movs	r2, #1
 80053ba:	701a      	strb	r2, [r3, #0]
				canChange = 0;
 80053bc:	4b17      	ldr	r3, [pc, #92]	@ (800541c <main+0x940>)
 80053be:	2200      	movs	r2, #0
 80053c0:	701a      	strb	r2, [r3, #0]
				fillScreen(BLACK);
 80053c2:	2000      	movs	r0, #0
 80053c4:	f7fe ff2a 	bl	800421c <fillScreen>
			} else
				canChange = 1;
			break;
 80053c8:	e002      	b.n	80053d0 <main+0x8f4>
				canChange = 1;
 80053ca:	4b14      	ldr	r3, [pc, #80]	@ (800541c <main+0x940>)
 80053cc:	2201      	movs	r2, #1
 80053ce:	701a      	strb	r2, [r3, #0]
			break;
 80053d0:	46c0      	nop			@ (mov r8, r8)

		}
		totalFrames++;
 80053d2:	4b13      	ldr	r3, [pc, #76]	@ (8005420 <main+0x944>)
 80053d4:	881b      	ldrh	r3, [r3, #0]
 80053d6:	3301      	adds	r3, #1
 80053d8:	b29a      	uxth	r2, r3
 80053da:	4b11      	ldr	r3, [pc, #68]	@ (8005420 <main+0x944>)
 80053dc:	801a      	strh	r2, [r3, #0]
		if ((totalFrames) % 200 == 0){
 80053de:	f7ff fb99 	bl	8004b14 <main+0x38>
 80053e2:	46c0      	nop			@ (mov r8, r8)
 80053e4:	50000400 	.word	0x50000400
 80053e8:	20000298 	.word	0x20000298
 80053ec:	fffffc18 	.word	0xfffffc18
 80053f0:	000f3e57 	.word	0x000f3e57
 80053f4:	000f3e58 	.word	0x000f3e58
 80053f8:	0801168c 	.word	0x0801168c
 80053fc:	20001208 	.word	0x20001208
 8005400:	20001278 	.word	0x20001278
 8005404:	20001270 	.word	0x20001270
 8005408:	0000ffff 	.word	0x0000ffff
 800540c:	50000800 	.word	0x50000800
 8005410:	20001274 	.word	0x20001274
 8005414:	20000288 	.word	0x20000288
 8005418:	20000002 	.word	0x20000002
 800541c:	20000003 	.word	0x20000003
 8005420:	2000043c 	.word	0x2000043c

08005424 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005424:	b590      	push	{r4, r7, lr}
 8005426:	b095      	sub	sp, #84	@ 0x54
 8005428:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800542a:	2414      	movs	r4, #20
 800542c:	193b      	adds	r3, r7, r4
 800542e:	0018      	movs	r0, r3
 8005430:	233c      	movs	r3, #60	@ 0x3c
 8005432:	001a      	movs	r2, r3
 8005434:	2100      	movs	r1, #0
 8005436:	f009 fd69 	bl	800ef0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800543a:	1d3b      	adds	r3, r7, #4
 800543c:	0018      	movs	r0, r3
 800543e:	2310      	movs	r3, #16
 8005440:	001a      	movs	r2, r3
 8005442:	2100      	movs	r1, #0
 8005444:	f009 fd62 	bl	800ef0c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005448:	2380      	movs	r3, #128	@ 0x80
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	0018      	movs	r0, r3
 800544e:	f005 f87f 	bl	800a550 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8005452:	193b      	adds	r3, r7, r4
 8005454:	220a      	movs	r2, #10
 8005456:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005458:	193b      	adds	r3, r7, r4
 800545a:	2280      	movs	r2, #128	@ 0x80
 800545c:	0052      	lsls	r2, r2, #1
 800545e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8005460:	0021      	movs	r1, r4
 8005462:	187b      	adds	r3, r7, r1
 8005464:	2200      	movs	r2, #0
 8005466:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005468:	187b      	adds	r3, r7, r1
 800546a:	2240      	movs	r2, #64	@ 0x40
 800546c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800546e:	187b      	adds	r3, r7, r1
 8005470:	2201      	movs	r2, #1
 8005472:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005474:	187b      	adds	r3, r7, r1
 8005476:	2202      	movs	r2, #2
 8005478:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800547a:	187b      	adds	r3, r7, r1
 800547c:	2202      	movs	r2, #2
 800547e:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8005480:	187b      	adds	r3, r7, r1
 8005482:	2200      	movs	r2, #0
 8005484:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 8005486:	187b      	adds	r3, r7, r1
 8005488:	2208      	movs	r2, #8
 800548a:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800548c:	187b      	adds	r3, r7, r1
 800548e:	2280      	movs	r2, #128	@ 0x80
 8005490:	0292      	lsls	r2, r2, #10
 8005492:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8005494:	187b      	adds	r3, r7, r1
 8005496:	2280      	movs	r2, #128	@ 0x80
 8005498:	0492      	lsls	r2, r2, #18
 800549a:	635a      	str	r2, [r3, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800549c:	187b      	adds	r3, r7, r1
 800549e:	2280      	movs	r2, #128	@ 0x80
 80054a0:	0592      	lsls	r2, r2, #22
 80054a2:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80054a4:	187b      	adds	r3, r7, r1
 80054a6:	0018      	movs	r0, r3
 80054a8:	f005 f89e 	bl	800a5e8 <HAL_RCC_OscConfig>
 80054ac:	1e03      	subs	r3, r0, #0
 80054ae:	d001      	beq.n	80054b4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80054b0:	f001 ffe6 	bl	8007480 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80054b4:	1d3b      	adds	r3, r7, #4
 80054b6:	2207      	movs	r2, #7
 80054b8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80054ba:	1d3b      	adds	r3, r7, #4
 80054bc:	2202      	movs	r2, #2
 80054be:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80054c0:	1d3b      	adds	r3, r7, #4
 80054c2:	2200      	movs	r2, #0
 80054c4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80054c6:	1d3b      	adds	r3, r7, #4
 80054c8:	2200      	movs	r2, #0
 80054ca:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80054cc:	1d3b      	adds	r3, r7, #4
 80054ce:	2102      	movs	r1, #2
 80054d0:	0018      	movs	r0, r3
 80054d2:	f005 fbe9 	bl	800aca8 <HAL_RCC_ClockConfig>
 80054d6:	1e03      	subs	r3, r0, #0
 80054d8:	d001      	beq.n	80054de <SystemClock_Config+0xba>
  {
    Error_Handler();
 80054da:	f001 ffd1 	bl	8007480 <Error_Handler>
  }
}
 80054de:	46c0      	nop			@ (mov r8, r8)
 80054e0:	46bd      	mov	sp, r7
 80054e2:	b015      	add	sp, #84	@ 0x54
 80054e4:	bd90      	pop	{r4, r7, pc}
	...

080054e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80054ec:	4b1b      	ldr	r3, [pc, #108]	@ (800555c <MX_I2C1_Init+0x74>)
 80054ee:	4a1c      	ldr	r2, [pc, #112]	@ (8005560 <MX_I2C1_Init+0x78>)
 80054f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10B17DB5;
 80054f2:	4b1a      	ldr	r3, [pc, #104]	@ (800555c <MX_I2C1_Init+0x74>)
 80054f4:	4a1b      	ldr	r2, [pc, #108]	@ (8005564 <MX_I2C1_Init+0x7c>)
 80054f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80054f8:	4b18      	ldr	r3, [pc, #96]	@ (800555c <MX_I2C1_Init+0x74>)
 80054fa:	2200      	movs	r2, #0
 80054fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80054fe:	4b17      	ldr	r3, [pc, #92]	@ (800555c <MX_I2C1_Init+0x74>)
 8005500:	2201      	movs	r2, #1
 8005502:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005504:	4b15      	ldr	r3, [pc, #84]	@ (800555c <MX_I2C1_Init+0x74>)
 8005506:	2200      	movs	r2, #0
 8005508:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800550a:	4b14      	ldr	r3, [pc, #80]	@ (800555c <MX_I2C1_Init+0x74>)
 800550c:	2200      	movs	r2, #0
 800550e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005510:	4b12      	ldr	r3, [pc, #72]	@ (800555c <MX_I2C1_Init+0x74>)
 8005512:	2200      	movs	r2, #0
 8005514:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005516:	4b11      	ldr	r3, [pc, #68]	@ (800555c <MX_I2C1_Init+0x74>)
 8005518:	2200      	movs	r2, #0
 800551a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800551c:	4b0f      	ldr	r3, [pc, #60]	@ (800555c <MX_I2C1_Init+0x74>)
 800551e:	2200      	movs	r2, #0
 8005520:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005522:	4b0e      	ldr	r3, [pc, #56]	@ (800555c <MX_I2C1_Init+0x74>)
 8005524:	0018      	movs	r0, r3
 8005526:	f004 f9cf 	bl	80098c8 <HAL_I2C_Init>
 800552a:	1e03      	subs	r3, r0, #0
 800552c:	d001      	beq.n	8005532 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800552e:	f001 ffa7 	bl	8007480 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005532:	4b0a      	ldr	r3, [pc, #40]	@ (800555c <MX_I2C1_Init+0x74>)
 8005534:	2100      	movs	r1, #0
 8005536:	0018      	movs	r0, r3
 8005538:	f004 ff72 	bl	800a420 <HAL_I2CEx_ConfigAnalogFilter>
 800553c:	1e03      	subs	r3, r0, #0
 800553e:	d001      	beq.n	8005544 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8005540:	f001 ff9e 	bl	8007480 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8005544:	4b05      	ldr	r3, [pc, #20]	@ (800555c <MX_I2C1_Init+0x74>)
 8005546:	2100      	movs	r1, #0
 8005548:	0018      	movs	r0, r3
 800554a:	f004 ffb5 	bl	800a4b8 <HAL_I2CEx_ConfigDigitalFilter>
 800554e:	1e03      	subs	r3, r0, #0
 8005550:	d001      	beq.n	8005556 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8005552:	f001 ff95 	bl	8007480 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005556:	46c0      	nop			@ (mov r8, r8)
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}
 800555c:	2000127c 	.word	0x2000127c
 8005560:	40005400 	.word	0x40005400
 8005564:	10b17db5 	.word	0x10b17db5

08005568 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800556c:	4b13      	ldr	r3, [pc, #76]	@ (80055bc <MX_RTC_Init+0x54>)
 800556e:	4a14      	ldr	r2, [pc, #80]	@ (80055c0 <MX_RTC_Init+0x58>)
 8005570:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8005572:	4b12      	ldr	r3, [pc, #72]	@ (80055bc <MX_RTC_Init+0x54>)
 8005574:	2200      	movs	r2, #0
 8005576:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8005578:	4b10      	ldr	r3, [pc, #64]	@ (80055bc <MX_RTC_Init+0x54>)
 800557a:	227f      	movs	r2, #127	@ 0x7f
 800557c:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 800557e:	4b0f      	ldr	r3, [pc, #60]	@ (80055bc <MX_RTC_Init+0x54>)
 8005580:	22ff      	movs	r2, #255	@ 0xff
 8005582:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8005584:	4b0d      	ldr	r3, [pc, #52]	@ (80055bc <MX_RTC_Init+0x54>)
 8005586:	2200      	movs	r2, #0
 8005588:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800558a:	4b0c      	ldr	r3, [pc, #48]	@ (80055bc <MX_RTC_Init+0x54>)
 800558c:	2200      	movs	r2, #0
 800558e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8005590:	4b0a      	ldr	r3, [pc, #40]	@ (80055bc <MX_RTC_Init+0x54>)
 8005592:	2200      	movs	r2, #0
 8005594:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8005596:	4b09      	ldr	r3, [pc, #36]	@ (80055bc <MX_RTC_Init+0x54>)
 8005598:	2280      	movs	r2, #128	@ 0x80
 800559a:	05d2      	lsls	r2, r2, #23
 800559c:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800559e:	4b07      	ldr	r3, [pc, #28]	@ (80055bc <MX_RTC_Init+0x54>)
 80055a0:	2200      	movs	r2, #0
 80055a2:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80055a4:	4b05      	ldr	r3, [pc, #20]	@ (80055bc <MX_RTC_Init+0x54>)
 80055a6:	0018      	movs	r0, r3
 80055a8:	f005 ff64 	bl	800b474 <HAL_RTC_Init>
 80055ac:	1e03      	subs	r3, r0, #0
 80055ae:	d001      	beq.n	80055b4 <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 80055b0:	f001 ff66 	bl	8007480 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80055b4:	46c0      	nop			@ (mov r8, r8)
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}
 80055ba:	46c0      	nop			@ (mov r8, r8)
 80055bc:	200012d0 	.word	0x200012d0
 80055c0:	40002800 	.word	0x40002800

080055c4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80055c8:	4b1c      	ldr	r3, [pc, #112]	@ (800563c <MX_SPI1_Init+0x78>)
 80055ca:	4a1d      	ldr	r2, [pc, #116]	@ (8005640 <MX_SPI1_Init+0x7c>)
 80055cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80055ce:	4b1b      	ldr	r3, [pc, #108]	@ (800563c <MX_SPI1_Init+0x78>)
 80055d0:	2282      	movs	r2, #130	@ 0x82
 80055d2:	0052      	lsls	r2, r2, #1
 80055d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80055d6:	4b19      	ldr	r3, [pc, #100]	@ (800563c <MX_SPI1_Init+0x78>)
 80055d8:	2280      	movs	r2, #128	@ 0x80
 80055da:	0212      	lsls	r2, r2, #8
 80055dc:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80055de:	4b17      	ldr	r3, [pc, #92]	@ (800563c <MX_SPI1_Init+0x78>)
 80055e0:	22e0      	movs	r2, #224	@ 0xe0
 80055e2:	00d2      	lsls	r2, r2, #3
 80055e4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80055e6:	4b15      	ldr	r3, [pc, #84]	@ (800563c <MX_SPI1_Init+0x78>)
 80055e8:	2200      	movs	r2, #0
 80055ea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80055ec:	4b13      	ldr	r3, [pc, #76]	@ (800563c <MX_SPI1_Init+0x78>)
 80055ee:	2200      	movs	r2, #0
 80055f0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80055f2:	4b12      	ldr	r3, [pc, #72]	@ (800563c <MX_SPI1_Init+0x78>)
 80055f4:	2280      	movs	r2, #128	@ 0x80
 80055f6:	0092      	lsls	r2, r2, #2
 80055f8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80055fa:	4b10      	ldr	r3, [pc, #64]	@ (800563c <MX_SPI1_Init+0x78>)
 80055fc:	2220      	movs	r2, #32
 80055fe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005600:	4b0e      	ldr	r3, [pc, #56]	@ (800563c <MX_SPI1_Init+0x78>)
 8005602:	2200      	movs	r2, #0
 8005604:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005606:	4b0d      	ldr	r3, [pc, #52]	@ (800563c <MX_SPI1_Init+0x78>)
 8005608:	2200      	movs	r2, #0
 800560a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800560c:	4b0b      	ldr	r3, [pc, #44]	@ (800563c <MX_SPI1_Init+0x78>)
 800560e:	2200      	movs	r2, #0
 8005610:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8005612:	4b0a      	ldr	r3, [pc, #40]	@ (800563c <MX_SPI1_Init+0x78>)
 8005614:	2207      	movs	r2, #7
 8005616:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005618:	4b08      	ldr	r3, [pc, #32]	@ (800563c <MX_SPI1_Init+0x78>)
 800561a:	2200      	movs	r2, #0
 800561c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800561e:	4b07      	ldr	r3, [pc, #28]	@ (800563c <MX_SPI1_Init+0x78>)
 8005620:	2208      	movs	r2, #8
 8005622:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005624:	4b05      	ldr	r3, [pc, #20]	@ (800563c <MX_SPI1_Init+0x78>)
 8005626:	0018      	movs	r0, r3
 8005628:	f006 f872 	bl	800b710 <HAL_SPI_Init>
 800562c:	1e03      	subs	r3, r0, #0
 800562e:	d001      	beq.n	8005634 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8005630:	f001 ff26 	bl	8007480 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8005634:	46c0      	nop			@ (mov r8, r8)
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
 800563a:	46c0      	nop			@ (mov r8, r8)
 800563c:	200012fc 	.word	0x200012fc
 8005640:	40013000 	.word	0x40013000

08005644 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b094      	sub	sp, #80	@ 0x50
 8005648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800564a:	2334      	movs	r3, #52	@ 0x34
 800564c:	18fb      	adds	r3, r7, r3
 800564e:	0018      	movs	r0, r3
 8005650:	231c      	movs	r3, #28
 8005652:	001a      	movs	r2, r3
 8005654:	2100      	movs	r1, #0
 8005656:	f009 fc59 	bl	800ef0c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800565a:	003b      	movs	r3, r7
 800565c:	0018      	movs	r0, r3
 800565e:	2334      	movs	r3, #52	@ 0x34
 8005660:	001a      	movs	r2, r3
 8005662:	2100      	movs	r1, #0
 8005664:	f009 fc52 	bl	800ef0c <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8005668:	4b37      	ldr	r3, [pc, #220]	@ (8005748 <MX_TIM17_Init+0x104>)
 800566a:	4a38      	ldr	r2, [pc, #224]	@ (800574c <MX_TIM17_Init+0x108>)
 800566c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 800566e:	4b36      	ldr	r3, [pc, #216]	@ (8005748 <MX_TIM17_Init+0x104>)
 8005670:	2200      	movs	r2, #0
 8005672:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005674:	4b34      	ldr	r3, [pc, #208]	@ (8005748 <MX_TIM17_Init+0x104>)
 8005676:	2200      	movs	r2, #0
 8005678:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 800567a:	4b33      	ldr	r3, [pc, #204]	@ (8005748 <MX_TIM17_Init+0x104>)
 800567c:	4a34      	ldr	r2, [pc, #208]	@ (8005750 <MX_TIM17_Init+0x10c>)
 800567e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005680:	4b31      	ldr	r3, [pc, #196]	@ (8005748 <MX_TIM17_Init+0x104>)
 8005682:	2200      	movs	r2, #0
 8005684:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8005686:	4b30      	ldr	r3, [pc, #192]	@ (8005748 <MX_TIM17_Init+0x104>)
 8005688:	2200      	movs	r2, #0
 800568a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800568c:	4b2e      	ldr	r3, [pc, #184]	@ (8005748 <MX_TIM17_Init+0x104>)
 800568e:	2200      	movs	r2, #0
 8005690:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8005692:	4b2d      	ldr	r3, [pc, #180]	@ (8005748 <MX_TIM17_Init+0x104>)
 8005694:	0018      	movs	r0, r3
 8005696:	f006 fbc9 	bl	800be2c <HAL_TIM_Base_Init>
 800569a:	1e03      	subs	r3, r0, #0
 800569c:	d001      	beq.n	80056a2 <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 800569e:	f001 feef 	bl	8007480 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 80056a2:	4b29      	ldr	r3, [pc, #164]	@ (8005748 <MX_TIM17_Init+0x104>)
 80056a4:	0018      	movs	r0, r3
 80056a6:	f006 fc19 	bl	800bedc <HAL_TIM_PWM_Init>
 80056aa:	1e03      	subs	r3, r0, #0
 80056ac:	d001      	beq.n	80056b2 <MX_TIM17_Init+0x6e>
  {
    Error_Handler();
 80056ae:	f001 fee7 	bl	8007480 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80056b2:	2134      	movs	r1, #52	@ 0x34
 80056b4:	187b      	adds	r3, r7, r1
 80056b6:	2260      	movs	r2, #96	@ 0x60
 80056b8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80056ba:	187b      	adds	r3, r7, r1
 80056bc:	2200      	movs	r2, #0
 80056be:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80056c0:	187b      	adds	r3, r7, r1
 80056c2:	2200      	movs	r2, #0
 80056c4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80056c6:	187b      	adds	r3, r7, r1
 80056c8:	2200      	movs	r2, #0
 80056ca:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80056cc:	187b      	adds	r3, r7, r1
 80056ce:	2200      	movs	r2, #0
 80056d0:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80056d2:	187b      	adds	r3, r7, r1
 80056d4:	2200      	movs	r2, #0
 80056d6:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80056d8:	187b      	adds	r3, r7, r1
 80056da:	2200      	movs	r2, #0
 80056dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80056de:	1879      	adds	r1, r7, r1
 80056e0:	4b19      	ldr	r3, [pc, #100]	@ (8005748 <MX_TIM17_Init+0x104>)
 80056e2:	2200      	movs	r2, #0
 80056e4:	0018      	movs	r0, r3
 80056e6:	f006 fdd5 	bl	800c294 <HAL_TIM_PWM_ConfigChannel>
 80056ea:	1e03      	subs	r3, r0, #0
 80056ec:	d001      	beq.n	80056f2 <MX_TIM17_Init+0xae>
  {
    Error_Handler();
 80056ee:	f001 fec7 	bl	8007480 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80056f2:	003b      	movs	r3, r7
 80056f4:	2200      	movs	r2, #0
 80056f6:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80056f8:	003b      	movs	r3, r7
 80056fa:	2200      	movs	r2, #0
 80056fc:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80056fe:	003b      	movs	r3, r7
 8005700:	2200      	movs	r2, #0
 8005702:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005704:	003b      	movs	r3, r7
 8005706:	2200      	movs	r2, #0
 8005708:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800570a:	003b      	movs	r3, r7
 800570c:	2200      	movs	r2, #0
 800570e:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005710:	003b      	movs	r3, r7
 8005712:	2280      	movs	r2, #128	@ 0x80
 8005714:	0192      	lsls	r2, r2, #6
 8005716:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8005718:	003b      	movs	r3, r7
 800571a:	2200      	movs	r2, #0
 800571c:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800571e:	003b      	movs	r3, r7
 8005720:	2200      	movs	r2, #0
 8005722:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8005724:	003a      	movs	r2, r7
 8005726:	4b08      	ldr	r3, [pc, #32]	@ (8005748 <MX_TIM17_Init+0x104>)
 8005728:	0011      	movs	r1, r2
 800572a:	0018      	movs	r0, r3
 800572c:	f007 fa32 	bl	800cb94 <HAL_TIMEx_ConfigBreakDeadTime>
 8005730:	1e03      	subs	r3, r0, #0
 8005732:	d001      	beq.n	8005738 <MX_TIM17_Init+0xf4>
  {
    Error_Handler();
 8005734:	f001 fea4 	bl	8007480 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8005738:	4b03      	ldr	r3, [pc, #12]	@ (8005748 <MX_TIM17_Init+0x104>)
 800573a:	0018      	movs	r0, r3
 800573c:	f002 fc48 	bl	8007fd0 <HAL_TIM_MspPostInit>

}
 8005740:	46c0      	nop			@ (mov r8, r8)
 8005742:	46bd      	mov	sp, r7
 8005744:	b014      	add	sp, #80	@ 0x50
 8005746:	bd80      	pop	{r7, pc}
 8005748:	20001360 	.word	0x20001360
 800574c:	40014800 	.word	0x40014800
 8005750:	0000ffff 	.word	0x0000ffff

08005754 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005758:	4b23      	ldr	r3, [pc, #140]	@ (80057e8 <MX_USART1_UART_Init+0x94>)
 800575a:	4a24      	ldr	r2, [pc, #144]	@ (80057ec <MX_USART1_UART_Init+0x98>)
 800575c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800575e:	4b22      	ldr	r3, [pc, #136]	@ (80057e8 <MX_USART1_UART_Init+0x94>)
 8005760:	2296      	movs	r2, #150	@ 0x96
 8005762:	0192      	lsls	r2, r2, #6
 8005764:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005766:	4b20      	ldr	r3, [pc, #128]	@ (80057e8 <MX_USART1_UART_Init+0x94>)
 8005768:	2200      	movs	r2, #0
 800576a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800576c:	4b1e      	ldr	r3, [pc, #120]	@ (80057e8 <MX_USART1_UART_Init+0x94>)
 800576e:	2200      	movs	r2, #0
 8005770:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005772:	4b1d      	ldr	r3, [pc, #116]	@ (80057e8 <MX_USART1_UART_Init+0x94>)
 8005774:	2200      	movs	r2, #0
 8005776:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005778:	4b1b      	ldr	r3, [pc, #108]	@ (80057e8 <MX_USART1_UART_Init+0x94>)
 800577a:	220c      	movs	r2, #12
 800577c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800577e:	4b1a      	ldr	r3, [pc, #104]	@ (80057e8 <MX_USART1_UART_Init+0x94>)
 8005780:	2200      	movs	r2, #0
 8005782:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005784:	4b18      	ldr	r3, [pc, #96]	@ (80057e8 <MX_USART1_UART_Init+0x94>)
 8005786:	2200      	movs	r2, #0
 8005788:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800578a:	4b17      	ldr	r3, [pc, #92]	@ (80057e8 <MX_USART1_UART_Init+0x94>)
 800578c:	2200      	movs	r2, #0
 800578e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005790:	4b15      	ldr	r3, [pc, #84]	@ (80057e8 <MX_USART1_UART_Init+0x94>)
 8005792:	2200      	movs	r2, #0
 8005794:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005796:	4b14      	ldr	r3, [pc, #80]	@ (80057e8 <MX_USART1_UART_Init+0x94>)
 8005798:	2200      	movs	r2, #0
 800579a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800579c:	4b12      	ldr	r3, [pc, #72]	@ (80057e8 <MX_USART1_UART_Init+0x94>)
 800579e:	0018      	movs	r0, r3
 80057a0:	f007 fa94 	bl	800cccc <HAL_UART_Init>
 80057a4:	1e03      	subs	r3, r0, #0
 80057a6:	d001      	beq.n	80057ac <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80057a8:	f001 fe6a 	bl	8007480 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80057ac:	4b0e      	ldr	r3, [pc, #56]	@ (80057e8 <MX_USART1_UART_Init+0x94>)
 80057ae:	2100      	movs	r1, #0
 80057b0:	0018      	movs	r0, r3
 80057b2:	f008 fa2f 	bl	800dc14 <HAL_UARTEx_SetTxFifoThreshold>
 80057b6:	1e03      	subs	r3, r0, #0
 80057b8:	d001      	beq.n	80057be <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80057ba:	f001 fe61 	bl	8007480 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80057be:	4b0a      	ldr	r3, [pc, #40]	@ (80057e8 <MX_USART1_UART_Init+0x94>)
 80057c0:	2100      	movs	r1, #0
 80057c2:	0018      	movs	r0, r3
 80057c4:	f008 fa66 	bl	800dc94 <HAL_UARTEx_SetRxFifoThreshold>
 80057c8:	1e03      	subs	r3, r0, #0
 80057ca:	d001      	beq.n	80057d0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80057cc:	f001 fe58 	bl	8007480 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80057d0:	4b05      	ldr	r3, [pc, #20]	@ (80057e8 <MX_USART1_UART_Init+0x94>)
 80057d2:	0018      	movs	r0, r3
 80057d4:	f008 f9e4 	bl	800dba0 <HAL_UARTEx_DisableFifoMode>
 80057d8:	1e03      	subs	r3, r0, #0
 80057da:	d001      	beq.n	80057e0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80057dc:	f001 fe50 	bl	8007480 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80057e0:	46c0      	nop			@ (mov r8, r8)
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
 80057e6:	46c0      	nop			@ (mov r8, r8)
 80057e8:	200013ac 	.word	0x200013ac
 80057ec:	40013800 	.word	0x40013800

080057f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80057f4:	4b23      	ldr	r3, [pc, #140]	@ (8005884 <MX_USART2_UART_Init+0x94>)
 80057f6:	4a24      	ldr	r2, [pc, #144]	@ (8005888 <MX_USART2_UART_Init+0x98>)
 80057f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80057fa:	4b22      	ldr	r3, [pc, #136]	@ (8005884 <MX_USART2_UART_Init+0x94>)
 80057fc:	22e1      	movs	r2, #225	@ 0xe1
 80057fe:	0252      	lsls	r2, r2, #9
 8005800:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005802:	4b20      	ldr	r3, [pc, #128]	@ (8005884 <MX_USART2_UART_Init+0x94>)
 8005804:	2200      	movs	r2, #0
 8005806:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005808:	4b1e      	ldr	r3, [pc, #120]	@ (8005884 <MX_USART2_UART_Init+0x94>)
 800580a:	2200      	movs	r2, #0
 800580c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800580e:	4b1d      	ldr	r3, [pc, #116]	@ (8005884 <MX_USART2_UART_Init+0x94>)
 8005810:	2200      	movs	r2, #0
 8005812:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005814:	4b1b      	ldr	r3, [pc, #108]	@ (8005884 <MX_USART2_UART_Init+0x94>)
 8005816:	220c      	movs	r2, #12
 8005818:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800581a:	4b1a      	ldr	r3, [pc, #104]	@ (8005884 <MX_USART2_UART_Init+0x94>)
 800581c:	2200      	movs	r2, #0
 800581e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005820:	4b18      	ldr	r3, [pc, #96]	@ (8005884 <MX_USART2_UART_Init+0x94>)
 8005822:	2200      	movs	r2, #0
 8005824:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005826:	4b17      	ldr	r3, [pc, #92]	@ (8005884 <MX_USART2_UART_Init+0x94>)
 8005828:	2200      	movs	r2, #0
 800582a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800582c:	4b15      	ldr	r3, [pc, #84]	@ (8005884 <MX_USART2_UART_Init+0x94>)
 800582e:	2200      	movs	r2, #0
 8005830:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005832:	4b14      	ldr	r3, [pc, #80]	@ (8005884 <MX_USART2_UART_Init+0x94>)
 8005834:	2200      	movs	r2, #0
 8005836:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005838:	4b12      	ldr	r3, [pc, #72]	@ (8005884 <MX_USART2_UART_Init+0x94>)
 800583a:	0018      	movs	r0, r3
 800583c:	f007 fa46 	bl	800cccc <HAL_UART_Init>
 8005840:	1e03      	subs	r3, r0, #0
 8005842:	d001      	beq.n	8005848 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8005844:	f001 fe1c 	bl	8007480 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005848:	4b0e      	ldr	r3, [pc, #56]	@ (8005884 <MX_USART2_UART_Init+0x94>)
 800584a:	2100      	movs	r1, #0
 800584c:	0018      	movs	r0, r3
 800584e:	f008 f9e1 	bl	800dc14 <HAL_UARTEx_SetTxFifoThreshold>
 8005852:	1e03      	subs	r3, r0, #0
 8005854:	d001      	beq.n	800585a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8005856:	f001 fe13 	bl	8007480 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800585a:	4b0a      	ldr	r3, [pc, #40]	@ (8005884 <MX_USART2_UART_Init+0x94>)
 800585c:	2100      	movs	r1, #0
 800585e:	0018      	movs	r0, r3
 8005860:	f008 fa18 	bl	800dc94 <HAL_UARTEx_SetRxFifoThreshold>
 8005864:	1e03      	subs	r3, r0, #0
 8005866:	d001      	beq.n	800586c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8005868:	f001 fe0a 	bl	8007480 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800586c:	4b05      	ldr	r3, [pc, #20]	@ (8005884 <MX_USART2_UART_Init+0x94>)
 800586e:	0018      	movs	r0, r3
 8005870:	f008 f996 	bl	800dba0 <HAL_UARTEx_DisableFifoMode>
 8005874:	1e03      	subs	r3, r0, #0
 8005876:	d001      	beq.n	800587c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8005878:	f001 fe02 	bl	8007480 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800587c:	46c0      	nop			@ (mov r8, r8)
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
 8005882:	46c0      	nop			@ (mov r8, r8)
 8005884:	20001440 	.word	0x20001440
 8005888:	40004400 	.word	0x40004400

0800588c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800588c:	b590      	push	{r4, r7, lr}
 800588e:	b08b      	sub	sp, #44	@ 0x2c
 8005890:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005892:	2414      	movs	r4, #20
 8005894:	193b      	adds	r3, r7, r4
 8005896:	0018      	movs	r0, r3
 8005898:	2314      	movs	r3, #20
 800589a:	001a      	movs	r2, r3
 800589c:	2100      	movs	r1, #0
 800589e:	f009 fb35 	bl	800ef0c <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80058a2:	4b4d      	ldr	r3, [pc, #308]	@ (80059d8 <MX_GPIO_Init+0x14c>)
 80058a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80058a6:	4b4c      	ldr	r3, [pc, #304]	@ (80059d8 <MX_GPIO_Init+0x14c>)
 80058a8:	2104      	movs	r1, #4
 80058aa:	430a      	orrs	r2, r1
 80058ac:	635a      	str	r2, [r3, #52]	@ 0x34
 80058ae:	4b4a      	ldr	r3, [pc, #296]	@ (80059d8 <MX_GPIO_Init+0x14c>)
 80058b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058b2:	2204      	movs	r2, #4
 80058b4:	4013      	ands	r3, r2
 80058b6:	613b      	str	r3, [r7, #16]
 80058b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80058ba:	4b47      	ldr	r3, [pc, #284]	@ (80059d8 <MX_GPIO_Init+0x14c>)
 80058bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80058be:	4b46      	ldr	r3, [pc, #280]	@ (80059d8 <MX_GPIO_Init+0x14c>)
 80058c0:	2101      	movs	r1, #1
 80058c2:	430a      	orrs	r2, r1
 80058c4:	635a      	str	r2, [r3, #52]	@ 0x34
 80058c6:	4b44      	ldr	r3, [pc, #272]	@ (80059d8 <MX_GPIO_Init+0x14c>)
 80058c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058ca:	2201      	movs	r2, #1
 80058cc:	4013      	ands	r3, r2
 80058ce:	60fb      	str	r3, [r7, #12]
 80058d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80058d2:	4b41      	ldr	r3, [pc, #260]	@ (80059d8 <MX_GPIO_Init+0x14c>)
 80058d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80058d6:	4b40      	ldr	r3, [pc, #256]	@ (80059d8 <MX_GPIO_Init+0x14c>)
 80058d8:	2102      	movs	r1, #2
 80058da:	430a      	orrs	r2, r1
 80058dc:	635a      	str	r2, [r3, #52]	@ 0x34
 80058de:	4b3e      	ldr	r3, [pc, #248]	@ (80059d8 <MX_GPIO_Init+0x14c>)
 80058e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058e2:	2202      	movs	r2, #2
 80058e4:	4013      	ands	r3, r2
 80058e6:	60bb      	str	r3, [r7, #8]
 80058e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80058ea:	4b3b      	ldr	r3, [pc, #236]	@ (80059d8 <MX_GPIO_Init+0x14c>)
 80058ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80058ee:	4b3a      	ldr	r3, [pc, #232]	@ (80059d8 <MX_GPIO_Init+0x14c>)
 80058f0:	2108      	movs	r1, #8
 80058f2:	430a      	orrs	r2, r1
 80058f4:	635a      	str	r2, [r3, #52]	@ 0x34
 80058f6:	4b38      	ldr	r3, [pc, #224]	@ (80059d8 <MX_GPIO_Init+0x14c>)
 80058f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058fa:	2208      	movs	r2, #8
 80058fc:	4013      	ands	r3, r2
 80058fe:	607b      	str	r3, [r7, #4]
 8005900:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_15, GPIO_PIN_RESET);
 8005902:	4936      	ldr	r1, [pc, #216]	@ (80059dc <MX_GPIO_Init+0x150>)
 8005904:	23a0      	movs	r3, #160	@ 0xa0
 8005906:	05db      	lsls	r3, r3, #23
 8005908:	2200      	movs	r2, #0
 800590a:	0018      	movs	r0, r3
 800590c:	f003 ff8b 	bl	8009826 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8005910:	193b      	adds	r3, r7, r4
 8005912:	2202      	movs	r2, #2
 8005914:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005916:	193b      	adds	r3, r7, r4
 8005918:	2288      	movs	r2, #136	@ 0x88
 800591a:	0352      	lsls	r2, r2, #13
 800591c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800591e:	193b      	adds	r3, r7, r4
 8005920:	2200      	movs	r2, #0
 8005922:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005924:	193b      	adds	r3, r7, r4
 8005926:	4a2e      	ldr	r2, [pc, #184]	@ (80059e0 <MX_GPIO_Init+0x154>)
 8005928:	0019      	movs	r1, r3
 800592a:	0010      	movs	r0, r2
 800592c:	f003 fdf2 	bl	8009514 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA4 PA5 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_15;
 8005930:	193b      	adds	r3, r7, r4
 8005932:	4a2a      	ldr	r2, [pc, #168]	@ (80059dc <MX_GPIO_Init+0x150>)
 8005934:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005936:	193b      	adds	r3, r7, r4
 8005938:	2201      	movs	r2, #1
 800593a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800593c:	193b      	adds	r3, r7, r4
 800593e:	2200      	movs	r2, #0
 8005940:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005942:	193b      	adds	r3, r7, r4
 8005944:	2200      	movs	r2, #0
 8005946:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005948:	193a      	adds	r2, r7, r4
 800594a:	23a0      	movs	r3, #160	@ 0xa0
 800594c:	05db      	lsls	r3, r3, #23
 800594e:	0011      	movs	r1, r2
 8005950:	0018      	movs	r0, r3
 8005952:	f003 fddf 	bl	8009514 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005956:	0021      	movs	r1, r4
 8005958:	187b      	adds	r3, r7, r1
 800595a:	2204      	movs	r2, #4
 800595c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800595e:	187b      	adds	r3, r7, r1
 8005960:	2288      	movs	r2, #136	@ 0x88
 8005962:	0352      	lsls	r2, r2, #13
 8005964:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005966:	187b      	adds	r3, r7, r1
 8005968:	2200      	movs	r2, #0
 800596a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800596c:	000c      	movs	r4, r1
 800596e:	187b      	adds	r3, r7, r1
 8005970:	4a1c      	ldr	r2, [pc, #112]	@ (80059e4 <MX_GPIO_Init+0x158>)
 8005972:	0019      	movs	r1, r3
 8005974:	0010      	movs	r0, r2
 8005976:	f003 fdcd 	bl	8009514 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800597a:	0021      	movs	r1, r4
 800597c:	187b      	adds	r3, r7, r1
 800597e:	2280      	movs	r2, #128	@ 0x80
 8005980:	0112      	lsls	r2, r2, #4
 8005982:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005984:	187b      	adds	r3, r7, r1
 8005986:	2288      	movs	r2, #136	@ 0x88
 8005988:	0352      	lsls	r2, r2, #13
 800598a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800598c:	187b      	adds	r3, r7, r1
 800598e:	2200      	movs	r2, #0
 8005990:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005992:	187a      	adds	r2, r7, r1
 8005994:	23a0      	movs	r3, #160	@ 0xa0
 8005996:	05db      	lsls	r3, r3, #23
 8005998:	0011      	movs	r1, r2
 800599a:	0018      	movs	r0, r3
 800599c:	f003 fdba 	bl	8009514 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 80059a0:	2200      	movs	r2, #0
 80059a2:	2100      	movs	r1, #0
 80059a4:	2005      	movs	r0, #5
 80059a6:	f003 fbd1 	bl	800914c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80059aa:	2005      	movs	r0, #5
 80059ac:	f003 fbe3 	bl	8009176 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 80059b0:	2200      	movs	r2, #0
 80059b2:	2100      	movs	r1, #0
 80059b4:	2006      	movs	r0, #6
 80059b6:	f003 fbc9 	bl	800914c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 80059ba:	2006      	movs	r0, #6
 80059bc:	f003 fbdb 	bl	8009176 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80059c0:	2200      	movs	r2, #0
 80059c2:	2100      	movs	r1, #0
 80059c4:	2007      	movs	r0, #7
 80059c6:	f003 fbc1 	bl	800914c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80059ca:	2007      	movs	r0, #7
 80059cc:	f003 fbd3 	bl	8009176 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80059d0:	46c0      	nop			@ (mov r8, r8)
 80059d2:	46bd      	mov	sp, r7
 80059d4:	b00b      	add	sp, #44	@ 0x2c
 80059d6:	bd90      	pop	{r4, r7, pc}
 80059d8:	40021000 	.word	0x40021000
 80059dc:	00008031 	.word	0x00008031
 80059e0:	50000800 	.word	0x50000800
 80059e4:	50000400 	.word	0x50000400

080059e8 <ChangeNote>:

/* USER CODE BEGIN 4 */
void ChangeNote(enum Scale freq) {
 80059e8:	b590      	push	{r4, r7, lr}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	0002      	movs	r2, r0
 80059f0:	1dbb      	adds	r3, r7, #6
 80059f2:	801a      	strh	r2, [r3, #0]
	TIM17->ARR = (uint32_t) (987 * (float) 1000 / (float) freq);
 80059f4:	1dbb      	adds	r3, r7, #6
 80059f6:	881b      	ldrh	r3, [r3, #0]
 80059f8:	0018      	movs	r0, r3
 80059fa:	f7fb ff47 	bl	800188c <__aeabi_ui2f>
 80059fe:	1c03      	adds	r3, r0, #0
 8005a00:	1c19      	adds	r1, r3, #0
 8005a02:	4807      	ldr	r0, [pc, #28]	@ (8005a20 <ChangeNote+0x38>)
 8005a04:	f7fb f946 	bl	8000c94 <__aeabi_fdiv>
 8005a08:	1c03      	adds	r3, r0, #0
 8005a0a:	4c06      	ldr	r4, [pc, #24]	@ (8005a24 <ChangeNote+0x3c>)
 8005a0c:	1c18      	adds	r0, r3, #0
 8005a0e:	f7fa fddd 	bl	80005cc <__aeabi_f2uiz>
 8005a12:	0003      	movs	r3, r0
 8005a14:	62e3      	str	r3, [r4, #44]	@ 0x2c
}
 8005a16:	46c0      	nop			@ (mov r8, r8)
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	b003      	add	sp, #12
 8005a1c:	bd90      	pop	{r4, r7, pc}
 8005a1e:	46c0      	nop			@ (mov r8, r8)
 8005a20:	4970f780 	.word	0x4970f780
 8005a24:	40014800 	.word	0x40014800

08005a28 <PlayEffect>:
void PlayEffect(enum SoundEffects effect) {
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b082      	sub	sp, #8
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	0002      	movs	r2, r0
 8005a30:	1dfb      	adds	r3, r7, #7
 8005a32:	701a      	strb	r2, [r3, #0]
	HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8005a34:	4ba0      	ldr	r3, [pc, #640]	@ (8005cb8 <PlayEffect+0x290>)
 8005a36:	2100      	movs	r1, #0
 8005a38:	0018      	movs	r0, r3
 8005a3a:	f006 faaf 	bl	800bf9c <HAL_TIM_PWM_Start>
	HAL_Delay(5);
 8005a3e:	2005      	movs	r0, #5
 8005a40:	f003 fa9e 	bl	8008f80 <HAL_Delay>
	switch (effect) {
 8005a44:	1dfb      	adds	r3, r7, #7
 8005a46:	781b      	ldrb	r3, [r3, #0]
 8005a48:	2b06      	cmp	r3, #6
 8005a4a:	d900      	bls.n	8005a4e <PlayEffect+0x26>
 8005a4c:	e12a      	b.n	8005ca4 <PlayEffect+0x27c>
 8005a4e:	009a      	lsls	r2, r3, #2
 8005a50:	4b9a      	ldr	r3, [pc, #616]	@ (8005cbc <PlayEffect+0x294>)
 8005a52:	18d3      	adds	r3, r2, r3
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	469f      	mov	pc, r3
	case MenuBeep:

		curNote = G * 3;
 8005a58:	4b99      	ldr	r3, [pc, #612]	@ (8005cc0 <PlayEffect+0x298>)
 8005a5a:	2293      	movs	r2, #147	@ 0x93
 8005a5c:	0112      	lsls	r2, r2, #4
 8005a5e:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 8005a60:	4b97      	ldr	r3, [pc, #604]	@ (8005cc0 <PlayEffect+0x298>)
 8005a62:	881b      	ldrh	r3, [r3, #0]
 8005a64:	0018      	movs	r0, r3
 8005a66:	f7ff ffbf 	bl	80059e8 <ChangeNote>
		HAL_Delay(25);
 8005a6a:	2019      	movs	r0, #25
 8005a6c:	f003 fa88 	bl	8008f80 <HAL_Delay>

		curNote = G * 2;
 8005a70:	4b93      	ldr	r3, [pc, #588]	@ (8005cc0 <PlayEffect+0x298>)
 8005a72:	22c4      	movs	r2, #196	@ 0xc4
 8005a74:	00d2      	lsls	r2, r2, #3
 8005a76:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 8005a78:	4b91      	ldr	r3, [pc, #580]	@ (8005cc0 <PlayEffect+0x298>)
 8005a7a:	881b      	ldrh	r3, [r3, #0]
 8005a7c:	0018      	movs	r0, r3
 8005a7e:	f7ff ffb3 	bl	80059e8 <ChangeNote>
		HAL_Delay(25);
 8005a82:	2019      	movs	r0, #25
 8005a84:	f003 fa7c 	bl	8008f80 <HAL_Delay>

		break;
 8005a88:	e10c      	b.n	8005ca4 <PlayEffect+0x27c>
	case EggNoise:

		curNote = A;
 8005a8a:	4b8d      	ldr	r3, [pc, #564]	@ (8005cc0 <PlayEffect+0x298>)
 8005a8c:	22dc      	movs	r2, #220	@ 0xdc
 8005a8e:	0052      	lsls	r2, r2, #1
 8005a90:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 8005a92:	4b8b      	ldr	r3, [pc, #556]	@ (8005cc0 <PlayEffect+0x298>)
 8005a94:	881b      	ldrh	r3, [r3, #0]
 8005a96:	0018      	movs	r0, r3
 8005a98:	f7ff ffa6 	bl	80059e8 <ChangeNote>
		HAL_Delay(20);
 8005a9c:	2014      	movs	r0, #20
 8005a9e:	f003 fa6f 	bl	8008f80 <HAL_Delay>

		curNote = C;
 8005aa2:	4b87      	ldr	r3, [pc, #540]	@ (8005cc0 <PlayEffect+0x298>)
 8005aa4:	4a87      	ldr	r2, [pc, #540]	@ (8005cc4 <PlayEffect+0x29c>)
 8005aa6:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 8005aa8:	4b85      	ldr	r3, [pc, #532]	@ (8005cc0 <PlayEffect+0x298>)
 8005aaa:	881b      	ldrh	r3, [r3, #0]
 8005aac:	0018      	movs	r0, r3
 8005aae:	f7ff ff9b 	bl	80059e8 <ChangeNote>
		HAL_Delay(20);
 8005ab2:	2014      	movs	r0, #20
 8005ab4:	f003 fa64 	bl	8008f80 <HAL_Delay>

		curNote = A;
 8005ab8:	4b81      	ldr	r3, [pc, #516]	@ (8005cc0 <PlayEffect+0x298>)
 8005aba:	22dc      	movs	r2, #220	@ 0xdc
 8005abc:	0052      	lsls	r2, r2, #1
 8005abe:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 8005ac0:	4b7f      	ldr	r3, [pc, #508]	@ (8005cc0 <PlayEffect+0x298>)
 8005ac2:	881b      	ldrh	r3, [r3, #0]
 8005ac4:	0018      	movs	r0, r3
 8005ac6:	f7ff ff8f 	bl	80059e8 <ChangeNote>
		HAL_Delay(20);
 8005aca:	2014      	movs	r0, #20
 8005acc:	f003 fa58 	bl	8008f80 <HAL_Delay>

		curNote = C;
 8005ad0:	4b7b      	ldr	r3, [pc, #492]	@ (8005cc0 <PlayEffect+0x298>)
 8005ad2:	4a7c      	ldr	r2, [pc, #496]	@ (8005cc4 <PlayEffect+0x29c>)
 8005ad4:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 8005ad6:	4b7a      	ldr	r3, [pc, #488]	@ (8005cc0 <PlayEffect+0x298>)
 8005ad8:	881b      	ldrh	r3, [r3, #0]
 8005ada:	0018      	movs	r0, r3
 8005adc:	f7ff ff84 	bl	80059e8 <ChangeNote>
		HAL_Delay(20);
 8005ae0:	2014      	movs	r0, #20
 8005ae2:	f003 fa4d 	bl	8008f80 <HAL_Delay>

		break;
 8005ae6:	e0dd      	b.n	8005ca4 <PlayEffect+0x27c>
	case YoungNoiseHappy:

		curNote = F * 4;
 8005ae8:	4b75      	ldr	r3, [pc, #468]	@ (8005cc0 <PlayEffect+0x298>)
 8005aea:	4a77      	ldr	r2, [pc, #476]	@ (8005cc8 <PlayEffect+0x2a0>)
 8005aec:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 8005aee:	4b74      	ldr	r3, [pc, #464]	@ (8005cc0 <PlayEffect+0x298>)
 8005af0:	881b      	ldrh	r3, [r3, #0]
 8005af2:	0018      	movs	r0, r3
 8005af4:	f7ff ff78 	bl	80059e8 <ChangeNote>
		HAL_Delay(35);
 8005af8:	2023      	movs	r0, #35	@ 0x23
 8005afa:	f003 fa41 	bl	8008f80 <HAL_Delay>

		curNote = B * 4;
 8005afe:	4b70      	ldr	r3, [pc, #448]	@ (8005cc0 <PlayEffect+0x298>)
 8005b00:	22f7      	movs	r2, #247	@ 0xf7
 8005b02:	00d2      	lsls	r2, r2, #3
 8005b04:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 8005b06:	4b6e      	ldr	r3, [pc, #440]	@ (8005cc0 <PlayEffect+0x298>)
 8005b08:	881b      	ldrh	r3, [r3, #0]
 8005b0a:	0018      	movs	r0, r3
 8005b0c:	f7ff ff6c 	bl	80059e8 <ChangeNote>
		HAL_Delay(15);
 8005b10:	200f      	movs	r0, #15
 8005b12:	f003 fa35 	bl	8008f80 <HAL_Delay>

		break;
 8005b16:	e0c5      	b.n	8005ca4 <PlayEffect+0x27c>
	case YoungNoiseSad:

		curNote = B * 4;
 8005b18:	4b69      	ldr	r3, [pc, #420]	@ (8005cc0 <PlayEffect+0x298>)
 8005b1a:	22f7      	movs	r2, #247	@ 0xf7
 8005b1c:	00d2      	lsls	r2, r2, #3
 8005b1e:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 8005b20:	4b67      	ldr	r3, [pc, #412]	@ (8005cc0 <PlayEffect+0x298>)
 8005b22:	881b      	ldrh	r3, [r3, #0]
 8005b24:	0018      	movs	r0, r3
 8005b26:	f7ff ff5f 	bl	80059e8 <ChangeNote>
		HAL_Delay(35);
 8005b2a:	2023      	movs	r0, #35	@ 0x23
 8005b2c:	f003 fa28 	bl	8008f80 <HAL_Delay>

		curNote = B * 3;
 8005b30:	4b63      	ldr	r3, [pc, #396]	@ (8005cc0 <PlayEffect+0x298>)
 8005b32:	4a66      	ldr	r2, [pc, #408]	@ (8005ccc <PlayEffect+0x2a4>)
 8005b34:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 8005b36:	4b62      	ldr	r3, [pc, #392]	@ (8005cc0 <PlayEffect+0x298>)
 8005b38:	881b      	ldrh	r3, [r3, #0]
 8005b3a:	0018      	movs	r0, r3
 8005b3c:	f7ff ff54 	bl	80059e8 <ChangeNote>
		HAL_Delay(15);
 8005b40:	200f      	movs	r0, #15
 8005b42:	f003 fa1d 	bl	8008f80 <HAL_Delay>

		break;
 8005b46:	e0ad      	b.n	8005ca4 <PlayEffect+0x27c>
	case AdultNoiseHappy:

		curNote = F / 4;
 8005b48:	4b5d      	ldr	r3, [pc, #372]	@ (8005cc0 <PlayEffect+0x298>)
 8005b4a:	22ae      	movs	r2, #174	@ 0xae
 8005b4c:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 8005b4e:	4b5c      	ldr	r3, [pc, #368]	@ (8005cc0 <PlayEffect+0x298>)
 8005b50:	881b      	ldrh	r3, [r3, #0]
 8005b52:	0018      	movs	r0, r3
 8005b54:	f7ff ff48 	bl	80059e8 <ChangeNote>
		HAL_Delay(35);
 8005b58:	2023      	movs	r0, #35	@ 0x23
 8005b5a:	f003 fa11 	bl	8008f80 <HAL_Delay>

		curNote = B / 4;
 8005b5e:	4b58      	ldr	r3, [pc, #352]	@ (8005cc0 <PlayEffect+0x298>)
 8005b60:	227b      	movs	r2, #123	@ 0x7b
 8005b62:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 8005b64:	4b56      	ldr	r3, [pc, #344]	@ (8005cc0 <PlayEffect+0x298>)
 8005b66:	881b      	ldrh	r3, [r3, #0]
 8005b68:	0018      	movs	r0, r3
 8005b6a:	f7ff ff3d 	bl	80059e8 <ChangeNote>
		HAL_Delay(15);
 8005b6e:	200f      	movs	r0, #15
 8005b70:	f003 fa06 	bl	8008f80 <HAL_Delay>

		break;
 8005b74:	e096      	b.n	8005ca4 <PlayEffect+0x27c>
	case AdultNoiseSad:

		curNote = C / 4;
 8005b76:	4b52      	ldr	r3, [pc, #328]	@ (8005cc0 <PlayEffect+0x298>)
 8005b78:	2282      	movs	r2, #130	@ 0x82
 8005b7a:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 8005b7c:	4b50      	ldr	r3, [pc, #320]	@ (8005cc0 <PlayEffect+0x298>)
 8005b7e:	881b      	ldrh	r3, [r3, #0]
 8005b80:	0018      	movs	r0, r3
 8005b82:	f7ff ff31 	bl	80059e8 <ChangeNote>
		HAL_Delay(35);
 8005b86:	2023      	movs	r0, #35	@ 0x23
 8005b88:	f003 f9fa 	bl	8008f80 <HAL_Delay>

		curNote = A / 4;
 8005b8c:	4b4c      	ldr	r3, [pc, #304]	@ (8005cc0 <PlayEffect+0x298>)
 8005b8e:	226e      	movs	r2, #110	@ 0x6e
 8005b90:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 8005b92:	4b4b      	ldr	r3, [pc, #300]	@ (8005cc0 <PlayEffect+0x298>)
 8005b94:	881b      	ldrh	r3, [r3, #0]
 8005b96:	0018      	movs	r0, r3
 8005b98:	f7ff ff26 	bl	80059e8 <ChangeNote>
		HAL_Delay(15);
 8005b9c:	200f      	movs	r0, #15
 8005b9e:	f003 f9ef 	bl	8008f80 <HAL_Delay>

		break;
 8005ba2:	e07f      	b.n	8005ca4 <PlayEffect+0x27c>
	case Evolution:

		curNote = A * 2;
 8005ba4:	4b46      	ldr	r3, [pc, #280]	@ (8005cc0 <PlayEffect+0x298>)
 8005ba6:	22dc      	movs	r2, #220	@ 0xdc
 8005ba8:	0092      	lsls	r2, r2, #2
 8005baa:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 8005bac:	4b44      	ldr	r3, [pc, #272]	@ (8005cc0 <PlayEffect+0x298>)
 8005bae:	881b      	ldrh	r3, [r3, #0]
 8005bb0:	0018      	movs	r0, r3
 8005bb2:	f7ff ff19 	bl	80059e8 <ChangeNote>
		HAL_Delay(50);
 8005bb6:	2032      	movs	r0, #50	@ 0x32
 8005bb8:	f003 f9e2 	bl	8008f80 <HAL_Delay>

		curNote = B * 2;
 8005bbc:	4b40      	ldr	r3, [pc, #256]	@ (8005cc0 <PlayEffect+0x298>)
 8005bbe:	22f7      	movs	r2, #247	@ 0xf7
 8005bc0:	0092      	lsls	r2, r2, #2
 8005bc2:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 8005bc4:	4b3e      	ldr	r3, [pc, #248]	@ (8005cc0 <PlayEffect+0x298>)
 8005bc6:	881b      	ldrh	r3, [r3, #0]
 8005bc8:	0018      	movs	r0, r3
 8005bca:	f7ff ff0d 	bl	80059e8 <ChangeNote>
		HAL_Delay(50);
 8005bce:	2032      	movs	r0, #50	@ 0x32
 8005bd0:	f003 f9d6 	bl	8008f80 <HAL_Delay>

		curNote = C * 2;
 8005bd4:	4b3a      	ldr	r3, [pc, #232]	@ (8005cc0 <PlayEffect+0x298>)
 8005bd6:	4a3e      	ldr	r2, [pc, #248]	@ (8005cd0 <PlayEffect+0x2a8>)
 8005bd8:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 8005bda:	4b39      	ldr	r3, [pc, #228]	@ (8005cc0 <PlayEffect+0x298>)
 8005bdc:	881b      	ldrh	r3, [r3, #0]
 8005bde:	0018      	movs	r0, r3
 8005be0:	f7ff ff02 	bl	80059e8 <ChangeNote>
		HAL_Delay(50);
 8005be4:	2032      	movs	r0, #50	@ 0x32
 8005be6:	f003 f9cb 	bl	8008f80 <HAL_Delay>

		curNote = A * 2;
 8005bea:	4b35      	ldr	r3, [pc, #212]	@ (8005cc0 <PlayEffect+0x298>)
 8005bec:	22dc      	movs	r2, #220	@ 0xdc
 8005bee:	0092      	lsls	r2, r2, #2
 8005bf0:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 8005bf2:	4b33      	ldr	r3, [pc, #204]	@ (8005cc0 <PlayEffect+0x298>)
 8005bf4:	881b      	ldrh	r3, [r3, #0]
 8005bf6:	0018      	movs	r0, r3
 8005bf8:	f7ff fef6 	bl	80059e8 <ChangeNote>
		HAL_Delay(50);
 8005bfc:	2032      	movs	r0, #50	@ 0x32
 8005bfe:	f003 f9bf 	bl	8008f80 <HAL_Delay>

		curNote = C * 2;
 8005c02:	4b2f      	ldr	r3, [pc, #188]	@ (8005cc0 <PlayEffect+0x298>)
 8005c04:	4a32      	ldr	r2, [pc, #200]	@ (8005cd0 <PlayEffect+0x2a8>)
 8005c06:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 8005c08:	4b2d      	ldr	r3, [pc, #180]	@ (8005cc0 <PlayEffect+0x298>)
 8005c0a:	881b      	ldrh	r3, [r3, #0]
 8005c0c:	0018      	movs	r0, r3
 8005c0e:	f7ff feeb 	bl	80059e8 <ChangeNote>
		HAL_Delay(50);
 8005c12:	2032      	movs	r0, #50	@ 0x32
 8005c14:	f003 f9b4 	bl	8008f80 <HAL_Delay>

		curNote = D * 2;
 8005c18:	4b29      	ldr	r3, [pc, #164]	@ (8005cc0 <PlayEffect+0x298>)
 8005c1a:	4a2e      	ldr	r2, [pc, #184]	@ (8005cd4 <PlayEffect+0x2ac>)
 8005c1c:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 8005c1e:	4b28      	ldr	r3, [pc, #160]	@ (8005cc0 <PlayEffect+0x298>)
 8005c20:	881b      	ldrh	r3, [r3, #0]
 8005c22:	0018      	movs	r0, r3
 8005c24:	f7ff fee0 	bl	80059e8 <ChangeNote>
		HAL_Delay(50);
 8005c28:	2032      	movs	r0, #50	@ 0x32
 8005c2a:	f003 f9a9 	bl	8008f80 <HAL_Delay>

		curNote = B * 2;
 8005c2e:	4b24      	ldr	r3, [pc, #144]	@ (8005cc0 <PlayEffect+0x298>)
 8005c30:	22f7      	movs	r2, #247	@ 0xf7
 8005c32:	0092      	lsls	r2, r2, #2
 8005c34:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 8005c36:	4b22      	ldr	r3, [pc, #136]	@ (8005cc0 <PlayEffect+0x298>)
 8005c38:	881b      	ldrh	r3, [r3, #0]
 8005c3a:	0018      	movs	r0, r3
 8005c3c:	f7ff fed4 	bl	80059e8 <ChangeNote>
		HAL_Delay(50);
 8005c40:	2032      	movs	r0, #50	@ 0x32
 8005c42:	f003 f99d 	bl	8008f80 <HAL_Delay>

		curNote = D * 2;
 8005c46:	4b1e      	ldr	r3, [pc, #120]	@ (8005cc0 <PlayEffect+0x298>)
 8005c48:	4a22      	ldr	r2, [pc, #136]	@ (8005cd4 <PlayEffect+0x2ac>)
 8005c4a:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 8005c4c:	4b1c      	ldr	r3, [pc, #112]	@ (8005cc0 <PlayEffect+0x298>)
 8005c4e:	881b      	ldrh	r3, [r3, #0]
 8005c50:	0018      	movs	r0, r3
 8005c52:	f7ff fec9 	bl	80059e8 <ChangeNote>
		HAL_Delay(50);
 8005c56:	2032      	movs	r0, #50	@ 0x32
 8005c58:	f003 f992 	bl	8008f80 <HAL_Delay>

		curNote = E * 2;
 8005c5c:	4b18      	ldr	r3, [pc, #96]	@ (8005cc0 <PlayEffect+0x298>)
 8005c5e:	4a1e      	ldr	r2, [pc, #120]	@ (8005cd8 <PlayEffect+0x2b0>)
 8005c60:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 8005c62:	4b17      	ldr	r3, [pc, #92]	@ (8005cc0 <PlayEffect+0x298>)
 8005c64:	881b      	ldrh	r3, [r3, #0]
 8005c66:	0018      	movs	r0, r3
 8005c68:	f7ff febe 	bl	80059e8 <ChangeNote>
		HAL_Delay(50);
 8005c6c:	2032      	movs	r0, #50	@ 0x32
 8005c6e:	f003 f987 	bl	8008f80 <HAL_Delay>

		curNote = G * 2;
 8005c72:	4b13      	ldr	r3, [pc, #76]	@ (8005cc0 <PlayEffect+0x298>)
 8005c74:	22c4      	movs	r2, #196	@ 0xc4
 8005c76:	00d2      	lsls	r2, r2, #3
 8005c78:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 8005c7a:	4b11      	ldr	r3, [pc, #68]	@ (8005cc0 <PlayEffect+0x298>)
 8005c7c:	881b      	ldrh	r3, [r3, #0]
 8005c7e:	0018      	movs	r0, r3
 8005c80:	f7ff feb2 	bl	80059e8 <ChangeNote>
		HAL_Delay(50);
 8005c84:	2032      	movs	r0, #50	@ 0x32
 8005c86:	f003 f97b 	bl	8008f80 <HAL_Delay>

		curNote = G * 2;
 8005c8a:	4b0d      	ldr	r3, [pc, #52]	@ (8005cc0 <PlayEffect+0x298>)
 8005c8c:	22c4      	movs	r2, #196	@ 0xc4
 8005c8e:	00d2      	lsls	r2, r2, #3
 8005c90:	801a      	strh	r2, [r3, #0]
		ChangeNote(curNote);
 8005c92:	4b0b      	ldr	r3, [pc, #44]	@ (8005cc0 <PlayEffect+0x298>)
 8005c94:	881b      	ldrh	r3, [r3, #0]
 8005c96:	0018      	movs	r0, r3
 8005c98:	f7ff fea6 	bl	80059e8 <ChangeNote>
		HAL_Delay(50);
 8005c9c:	2032      	movs	r0, #50	@ 0x32
 8005c9e:	f003 f96f 	bl	8008f80 <HAL_Delay>

		break;
 8005ca2:	46c0      	nop			@ (mov r8, r8)
	}
	HAL_TIM_PWM_Stop(&htim17, TIM_CHANNEL_1);
 8005ca4:	4b04      	ldr	r3, [pc, #16]	@ (8005cb8 <PlayEffect+0x290>)
 8005ca6:	2100      	movs	r1, #0
 8005ca8:	0018      	movs	r0, r3
 8005caa:	f006 fa67 	bl	800c17c <HAL_TIM_PWM_Stop>
}
 8005cae:	46c0      	nop			@ (mov r8, r8)
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	b002      	add	sp, #8
 8005cb4:	bd80      	pop	{r7, pc}
 8005cb6:	46c0      	nop			@ (mov r8, r8)
 8005cb8:	20001360 	.word	0x20001360
 8005cbc:	0801bf34 	.word	0x0801bf34
 8005cc0:	20000286 	.word	0x20000286
 8005cc4:	0000020b 	.word	0x0000020b
 8005cc8:	00000ae8 	.word	0x00000ae8
 8005ccc:	000005ca 	.word	0x000005ca
 8005cd0:	00000416 	.word	0x00000416
 8005cd4:	00000496 	.word	0x00000496
 8005cd8:	00000526 	.word	0x00000526

08005cdc <HAL_GPIO_EXTI_Rising_Callback>:
//INTERRUPTS ARE CALLED BACK HERE
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin) {
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b082      	sub	sp, #8
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	0002      	movs	r2, r0
 8005ce4:	1dbb      	adds	r3, r7, #6
 8005ce6:	801a      	strh	r2, [r3, #0]
	 //Left=2048
	 else if(GPIO_PIN==2048)
	 {

	 }*/
}
 8005ce8:	46c0      	nop			@ (mov r8, r8)
 8005cea:	46bd      	mov	sp, r7
 8005cec:	b002      	add	sp, #8
 8005cee:	bd80      	pop	{r7, pc}

08005cf0 <PeripheralInit>:

//AURORA: Put custom functions here!
void PeripheralInit(void) {
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	af00      	add	r7, sp, #0
	ST7735_Unselect();
 8005cf4:	f7fe fbe9 	bl	80044ca <ST7735_Unselect>
	ST7735_Init(1);
 8005cf8:	2001      	movs	r0, #1
 8005cfa:	f7fe fcfb 	bl	80046f4 <ST7735_Init>

	fillScreen(BLACK);
 8005cfe:	2000      	movs	r0, #0
 8005d00:	f7fe fa8c 	bl	800421c <fillScreen>
	buffer[0] = 'A';
 8005d04:	4b17      	ldr	r3, [pc, #92]	@ (8005d64 <PeripheralInit+0x74>)
 8005d06:	2241      	movs	r2, #65	@ 0x41
 8005d08:	701a      	strb	r2, [r3, #0]
	buffer[1] = 'B';
 8005d0a:	4b16      	ldr	r3, [pc, #88]	@ (8005d64 <PeripheralInit+0x74>)
 8005d0c:	2242      	movs	r2, #66	@ 0x42
 8005d0e:	705a      	strb	r2, [r3, #1]
	TIM17->CCR1 = 5;
 8005d10:	4b15      	ldr	r3, [pc, #84]	@ (8005d68 <PeripheralInit+0x78>)
 8005d12:	2205      	movs	r2, #5
 8005d14:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM17->PSC = 64;
 8005d16:	4b14      	ldr	r3, [pc, #80]	@ (8005d68 <PeripheralInit+0x78>)
 8005d18:	2240      	movs	r2, #64	@ 0x40
 8005d1a:	629a      	str	r2, [r3, #40]	@ 0x28
	//uint8_t ret=0;
	//_ADXL343_Init();

	//Pedometer Setup
	_ADXL343_WriteReg8(0x19, 0x02);
 8005d1c:	2102      	movs	r1, #2
 8005d1e:	2019      	movs	r0, #25
 8005d20:	f000 fe44 	bl	80069ac <_ADXL343_WriteReg8>
	////wait

	_ADXL343_WriteReg8(0x7C, 0x01);
 8005d24:	2101      	movs	r1, #1
 8005d26:	207c      	movs	r0, #124	@ 0x7c
 8005d28:	f000 fe40 	bl	80069ac <_ADXL343_WriteReg8>
	_ADXL343_WriteReg8(0x1A, 0x38);
 8005d2c:	2138      	movs	r1, #56	@ 0x38
 8005d2e:	201a      	movs	r0, #26
 8005d30:	f000 fe3c 	bl	80069ac <_ADXL343_WriteReg8>
	_ADXL343_WriteReg8(0x1B, 0x04);
 8005d34:	2104      	movs	r1, #4
 8005d36:	201b      	movs	r0, #27
 8005d38:	f000 fe38 	bl	80069ac <_ADXL343_WriteReg8>
	_ADXL343_WriteReg8(0x1F, 0x80);
 8005d3c:	2180      	movs	r1, #128	@ 0x80
 8005d3e:	201f      	movs	r0, #31
 8005d40:	f000 fe34 	bl	80069ac <_ADXL343_WriteReg8>
	_ADXL343_WriteReg8(0x21, 0x80);
 8005d44:	2180      	movs	r1, #128	@ 0x80
 8005d46:	2021      	movs	r0, #33	@ 0x21
 8005d48:	f000 fe30 	bl	80069ac <_ADXL343_WriteReg8>

	//  //Step Counter
	_ADXL343_WriteReg8(0x18, 0x01); // enable walking mode
 8005d4c:	2101      	movs	r1, #1
 8005d4e:	2018      	movs	r0, #24
 8005d50:	f000 fe2c 	bl	80069ac <_ADXL343_WriteReg8>
	_ADXL343_WriteReg8(0x20, 0x01); // enable step interrupt
 8005d54:	2101      	movs	r1, #1
 8005d56:	2020      	movs	r0, #32
 8005d58:	f000 fe28 	bl	80069ac <_ADXL343_WriteReg8>
}
 8005d5c:	46c0      	nop			@ (mov r8, r8)
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}
 8005d62:	46c0      	nop			@ (mov r8, r8)
 8005d64:	20000440 	.word	0x20000440
 8005d68:	40014800 	.word	0x40014800

08005d6c <StructInit>:
//INITIALIZE GAME VALUES
void StructInit(void) {
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b084      	sub	sp, #16
 8005d70:	af00      	add	r7, sp, #0
	steps = 0;
 8005d72:	4b82      	ldr	r3, [pc, #520]	@ (8005f7c <StructInit+0x210>)
 8005d74:	2200      	movs	r2, #0
 8005d76:	601a      	str	r2, [r3, #0]
	uint32_t Address = 0x0803F800;
 8005d78:	4b81      	ldr	r3, [pc, #516]	@ (8005f80 <StructInit+0x214>)
 8005d7a:	60fb      	str	r3, [r7, #12]
	if ((*(__IO uint64_t*) (Address)) == (uint64_t) 0x12345678) {
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	4980      	ldr	r1, [pc, #512]	@ (8005f84 <StructInit+0x218>)
 8005d84:	428a      	cmp	r2, r1
 8005d86:	d000      	beq.n	8005d8a <StructInit+0x1e>
 8005d88:	e0a7      	b.n	8005eda <StructInit+0x16e>
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d000      	beq.n	8005d90 <StructInit+0x24>
 8005d8e:	e0a4      	b.n	8005eda <StructInit+0x16e>
		Address += 8;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	3308      	adds	r3, #8
 8005d94:	60fb      	str	r3, [r7, #12]
		game.allSteps = (unsigned int) (*(__IO uint64_t*) (Address));
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	0011      	movs	r1, r2
 8005d9e:	4a7a      	ldr	r2, [pc, #488]	@ (8005f88 <StructInit+0x21c>)
 8005da0:	238c      	movs	r3, #140	@ 0x8c
 8005da2:	005b      	lsls	r3, r3, #1
 8005da4:	50d1      	str	r1, [r2, r3]
		Address += 8;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	3308      	adds	r3, #8
 8005daa:	60fb      	str	r3, [r7, #12]
		game.stepsToday = (unsigned int) (*(__IO uint64_t*) (Address));
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	0011      	movs	r1, r2
 8005db4:	4a74      	ldr	r2, [pc, #464]	@ (8005f88 <StructInit+0x21c>)
 8005db6:	2390      	movs	r3, #144	@ 0x90
 8005db8:	005b      	lsls	r3, r3, #1
 8005dba:	50d1      	str	r1, [r2, r3]
		Address += 8;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	3308      	adds	r3, #8
 8005dc0:	60fb      	str	r3, [r7, #12]
		game.weeklySteps = (unsigned int) (*(__IO uint64_t*) (Address));
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	0011      	movs	r1, r2
 8005dca:	4a6f      	ldr	r2, [pc, #444]	@ (8005f88 <StructInit+0x21c>)
 8005dcc:	238e      	movs	r3, #142	@ 0x8e
 8005dce:	005b      	lsls	r3, r3, #1
 8005dd0:	50d1      	str	r1, [r2, r3]
		Address += 8;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	3308      	adds	r3, #8
 8005dd6:	60fb      	str	r3, [r7, #12]
		game.dailyGoal = (unsigned int) (*(__IO uint64_t*) (Address));
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	0011      	movs	r1, r2
 8005de0:	4a69      	ldr	r2, [pc, #420]	@ (8005f88 <StructInit+0x21c>)
 8005de2:	2392      	movs	r3, #146	@ 0x92
 8005de4:	005b      	lsls	r3, r3, #1
 8005de6:	50d1      	str	r1, [r2, r3]
		Address += 8;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	3308      	adds	r3, #8
 8005dec:	60fb      	str	r3, [r7, #12]
		game.weeklyGoal = game.dailyGoal*(game.evo+1);
 8005dee:	4a66      	ldr	r2, [pc, #408]	@ (8005f88 <StructInit+0x21c>)
 8005df0:	2392      	movs	r3, #146	@ 0x92
 8005df2:	005b      	lsls	r3, r3, #1
 8005df4:	58d3      	ldr	r3, [r2, r3]
 8005df6:	4a64      	ldr	r2, [pc, #400]	@ (8005f88 <StructInit+0x21c>)
 8005df8:	7c12      	ldrb	r2, [r2, #16]
 8005dfa:	3201      	adds	r2, #1
 8005dfc:	435a      	muls	r2, r3
 8005dfe:	0011      	movs	r1, r2
 8005e00:	4a61      	ldr	r2, [pc, #388]	@ (8005f88 <StructInit+0x21c>)
 8005e02:	2394      	movs	r3, #148	@ 0x94
 8005e04:	005b      	lsls	r3, r3, #1
 8005e06:	50d1      	str	r1, [r2, r3]
		Address += 8;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	3308      	adds	r3, #8
 8005e0c:	60fb      	str	r3, [r7, #12]
		game.evo = (unsigned char) (*(__IO uint64_t*) (Address));
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	b2d2      	uxtb	r2, r2
 8005e16:	4b5c      	ldr	r3, [pc, #368]	@ (8005f88 <StructInit+0x21c>)
 8005e18:	741a      	strb	r2, [r3, #16]
		Address += 8;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	3308      	adds	r3, #8
 8005e1e:	60fb      	str	r3, [r7, #12]
		game.mood = (unsigned char) (*(__IO uint64_t*) (Address));
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	b2d2      	uxtb	r2, r2
 8005e28:	4b57      	ldr	r3, [pc, #348]	@ (8005f88 <StructInit+0x21c>)
 8005e2a:	745a      	strb	r2, [r3, #17]
		Address += 8;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	3308      	adds	r3, #8
 8005e30:	60fb      	str	r3, [r7, #12]
		game.numLocations = (unsigned int) (*(__IO uint64_t*) (Address));
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	4b53      	ldr	r3, [pc, #332]	@ (8005f88 <StructInit+0x21c>)
 8005e3a:	615a      	str	r2, [r3, #20]
		for (int flashI = 0; flashI < 32; flashI++) {
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	60bb      	str	r3, [r7, #8]
 8005e40:	e010      	b.n	8005e64 <StructInit+0xf8>
			Address += 1;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	3301      	adds	r3, #1
 8005e46:	60fb      	str	r3, [r7, #12]
			game.uid[flashI] = (char) (*(__IO uint8_t*) (Address));
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	b2d8      	uxtb	r0, r3
 8005e4e:	494e      	ldr	r1, [pc, #312]	@ (8005f88 <StructInit+0x21c>)
 8005e50:	2396      	movs	r3, #150	@ 0x96
 8005e52:	005b      	lsls	r3, r3, #1
 8005e54:	68ba      	ldr	r2, [r7, #8]
 8005e56:	188a      	adds	r2, r1, r2
 8005e58:	18d3      	adds	r3, r2, r3
 8005e5a:	1c02      	adds	r2, r0, #0
 8005e5c:	701a      	strb	r2, [r3, #0]
		for (int flashI = 0; flashI < 32; flashI++) {
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	3301      	adds	r3, #1
 8005e62:	60bb      	str	r3, [r7, #8]
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	2b1f      	cmp	r3, #31
 8005e68:	ddeb      	ble.n	8005e42 <StructInit+0xd6>
		}
		for (int flashI = 0; flashI < 32; flashI++) {
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	607b      	str	r3, [r7, #4]
 8005e6e:	e030      	b.n	8005ed2 <StructInit+0x166>
			Address += 8;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	3308      	adds	r3, #8
 8005e74:	60fb      	str	r3, [r7, #12]
			game.positions[flashI].lat =
					((float) ((int) (*(__IO uint64_t*) (Address)))) / 100000;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	0013      	movs	r3, r2
 8005e7e:	0018      	movs	r0, r3
 8005e80:	f7fb fcb4 	bl	80017ec <__aeabi_i2f>
 8005e84:	1c03      	adds	r3, r0, #0
 8005e86:	4941      	ldr	r1, [pc, #260]	@ (8005f8c <StructInit+0x220>)
 8005e88:	1c18      	adds	r0, r3, #0
 8005e8a:	f7fa ff03 	bl	8000c94 <__aeabi_fdiv>
 8005e8e:	1c03      	adds	r3, r0, #0
 8005e90:	1c19      	adds	r1, r3, #0
			game.positions[flashI].lat =
 8005e92:	4b3d      	ldr	r3, [pc, #244]	@ (8005f88 <StructInit+0x21c>)
 8005e94:	687a      	ldr	r2, [r7, #4]
 8005e96:	3203      	adds	r2, #3
 8005e98:	00d2      	lsls	r2, r2, #3
 8005e9a:	50d1      	str	r1, [r2, r3]
			Address += 8;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	3308      	adds	r3, #8
 8005ea0:	60fb      	str	r3, [r7, #12]
			game.positions[flashI].lon =
					((float) ((int) (*(__IO uint64_t*) (Address)))) / 100000;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	0013      	movs	r3, r2
 8005eaa:	0018      	movs	r0, r3
 8005eac:	f7fb fc9e 	bl	80017ec <__aeabi_i2f>
 8005eb0:	1c03      	adds	r3, r0, #0
 8005eb2:	4936      	ldr	r1, [pc, #216]	@ (8005f8c <StructInit+0x220>)
 8005eb4:	1c18      	adds	r0, r3, #0
 8005eb6:	f7fa feed 	bl	8000c94 <__aeabi_fdiv>
 8005eba:	1c03      	adds	r3, r0, #0
 8005ebc:	1c19      	adds	r1, r3, #0
			game.positions[flashI].lon =
 8005ebe:	4a32      	ldr	r2, [pc, #200]	@ (8005f88 <StructInit+0x21c>)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	3303      	adds	r3, #3
 8005ec4:	00db      	lsls	r3, r3, #3
 8005ec6:	18d3      	adds	r3, r2, r3
 8005ec8:	3304      	adds	r3, #4
 8005eca:	6019      	str	r1, [r3, #0]
		for (int flashI = 0; flashI < 32; flashI++) {
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	3301      	adds	r3, #1
 8005ed0:	607b      	str	r3, [r7, #4]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2b1f      	cmp	r3, #31
 8005ed6:	ddcb      	ble.n	8005e70 <StructInit+0x104>
		game.positions[0] = dummy;
		game.positions[1] = dummy;
		game.positions[2] = dummy;
		game.time.hours = 0;
	}
}
 8005ed8:	e04b      	b.n	8005f72 <StructInit+0x206>
		game.evo = 0;
 8005eda:	4b2b      	ldr	r3, [pc, #172]	@ (8005f88 <StructInit+0x21c>)
 8005edc:	2200      	movs	r2, #0
 8005ede:	741a      	strb	r2, [r3, #16]
		game.uid[0] = 'h';
 8005ee0:	4a29      	ldr	r2, [pc, #164]	@ (8005f88 <StructInit+0x21c>)
 8005ee2:	2396      	movs	r3, #150	@ 0x96
 8005ee4:	005b      	lsls	r3, r3, #1
 8005ee6:	2168      	movs	r1, #104	@ 0x68
 8005ee8:	54d1      	strb	r1, [r2, r3]
		game.uid[1] = 'i';
 8005eea:	4a27      	ldr	r2, [pc, #156]	@ (8005f88 <StructInit+0x21c>)
 8005eec:	232e      	movs	r3, #46	@ 0x2e
 8005eee:	33ff      	adds	r3, #255	@ 0xff
 8005ef0:	2169      	movs	r1, #105	@ 0x69
 8005ef2:	54d1      	strb	r1, [r2, r3]
		game.allSteps = 0;
 8005ef4:	4a24      	ldr	r2, [pc, #144]	@ (8005f88 <StructInit+0x21c>)
 8005ef6:	238c      	movs	r3, #140	@ 0x8c
 8005ef8:	005b      	lsls	r3, r3, #1
 8005efa:	2100      	movs	r1, #0
 8005efc:	50d1      	str	r1, [r2, r3]
		game.mood = 1;
 8005efe:	4b22      	ldr	r3, [pc, #136]	@ (8005f88 <StructInit+0x21c>)
 8005f00:	2201      	movs	r2, #1
 8005f02:	745a      	strb	r2, [r3, #17]
		game.numLocations = 3;
 8005f04:	4b20      	ldr	r3, [pc, #128]	@ (8005f88 <StructInit+0x21c>)
 8005f06:	2203      	movs	r2, #3
 8005f08:	615a      	str	r2, [r3, #20]
		game.stepsToday = 0;
 8005f0a:	4a1f      	ldr	r2, [pc, #124]	@ (8005f88 <StructInit+0x21c>)
 8005f0c:	2390      	movs	r3, #144	@ 0x90
 8005f0e:	005b      	lsls	r3, r3, #1
 8005f10:	2100      	movs	r1, #0
 8005f12:	50d1      	str	r1, [r2, r3]
		game.weeklySteps = 0;
 8005f14:	4a1c      	ldr	r2, [pc, #112]	@ (8005f88 <StructInit+0x21c>)
 8005f16:	238e      	movs	r3, #142	@ 0x8e
 8005f18:	005b      	lsls	r3, r3, #1
 8005f1a:	2100      	movs	r1, #0
 8005f1c:	50d1      	str	r1, [r2, r3]
		game.dailyGoal = 50;
 8005f1e:	4a1a      	ldr	r2, [pc, #104]	@ (8005f88 <StructInit+0x21c>)
 8005f20:	2392      	movs	r3, #146	@ 0x92
 8005f22:	005b      	lsls	r3, r3, #1
 8005f24:	2132      	movs	r1, #50	@ 0x32
 8005f26:	50d1      	str	r1, [r2, r3]
		game.weeklyGoal = game.dailyGoal*(game.evo+1);
 8005f28:	4a17      	ldr	r2, [pc, #92]	@ (8005f88 <StructInit+0x21c>)
 8005f2a:	2392      	movs	r3, #146	@ 0x92
 8005f2c:	005b      	lsls	r3, r3, #1
 8005f2e:	58d3      	ldr	r3, [r2, r3]
 8005f30:	4a15      	ldr	r2, [pc, #84]	@ (8005f88 <StructInit+0x21c>)
 8005f32:	7c12      	ldrb	r2, [r2, #16]
 8005f34:	3201      	adds	r2, #1
 8005f36:	435a      	muls	r2, r3
 8005f38:	0011      	movs	r1, r2
 8005f3a:	4a13      	ldr	r2, [pc, #76]	@ (8005f88 <StructInit+0x21c>)
 8005f3c:	2394      	movs	r3, #148	@ 0x94
 8005f3e:	005b      	lsls	r3, r3, #1
 8005f40:	50d1      	str	r1, [r2, r3]
		dummy.lat = 12.34567;
 8005f42:	4b13      	ldr	r3, [pc, #76]	@ (8005f90 <StructInit+0x224>)
 8005f44:	4a13      	ldr	r2, [pc, #76]	@ (8005f94 <StructInit+0x228>)
 8005f46:	601a      	str	r2, [r3, #0]
		dummy.lon = -89.10111;
 8005f48:	4b11      	ldr	r3, [pc, #68]	@ (8005f90 <StructInit+0x224>)
 8005f4a:	4a13      	ldr	r2, [pc, #76]	@ (8005f98 <StructInit+0x22c>)
 8005f4c:	605a      	str	r2, [r3, #4]
		game.positions[0] = dummy;
 8005f4e:	4b0e      	ldr	r3, [pc, #56]	@ (8005f88 <StructInit+0x21c>)
 8005f50:	4a0f      	ldr	r2, [pc, #60]	@ (8005f90 <StructInit+0x224>)
 8005f52:	3318      	adds	r3, #24
 8005f54:	ca03      	ldmia	r2!, {r0, r1}
 8005f56:	c303      	stmia	r3!, {r0, r1}
		game.positions[1] = dummy;
 8005f58:	4b0b      	ldr	r3, [pc, #44]	@ (8005f88 <StructInit+0x21c>)
 8005f5a:	4a0d      	ldr	r2, [pc, #52]	@ (8005f90 <StructInit+0x224>)
 8005f5c:	3320      	adds	r3, #32
 8005f5e:	ca03      	ldmia	r2!, {r0, r1}
 8005f60:	c303      	stmia	r3!, {r0, r1}
		game.positions[2] = dummy;
 8005f62:	4b09      	ldr	r3, [pc, #36]	@ (8005f88 <StructInit+0x21c>)
 8005f64:	4a0a      	ldr	r2, [pc, #40]	@ (8005f90 <StructInit+0x224>)
 8005f66:	3328      	adds	r3, #40	@ 0x28
 8005f68:	ca03      	ldmia	r2!, {r0, r1}
 8005f6a:	c303      	stmia	r3!, {r0, r1}
		game.time.hours = 0;
 8005f6c:	4b06      	ldr	r3, [pc, #24]	@ (8005f88 <StructInit+0x21c>)
 8005f6e:	2200      	movs	r2, #0
 8005f70:	601a      	str	r2, [r3, #0]
}
 8005f72:	46c0      	nop			@ (mov r8, r8)
 8005f74:	46bd      	mov	sp, r7
 8005f76:	b004      	add	sp, #16
 8005f78:	bd80      	pop	{r7, pc}
 8005f7a:	46c0      	nop			@ (mov r8, r8)
 8005f7c:	2000126c 	.word	0x2000126c
 8005f80:	0803f800 	.word	0x0803f800
 8005f84:	12345678 	.word	0x12345678
 8005f88:	20000298 	.word	0x20000298
 8005f8c:	47c35000 	.word	0x47c35000
 8005f90:	200003e4 	.word	0x200003e4
 8005f94:	414587dd 	.word	0x414587dd
 8005f98:	c2b233c5 	.word	0xc2b233c5

08005f9c <Evolve>:
//Method for displaying the evolution animation
void Evolve() {
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	af00      	add	r7, sp, #0
	if (game.evo < 2)
 8005fa0:	4b0a      	ldr	r3, [pc, #40]	@ (8005fcc <Evolve+0x30>)
 8005fa2:	7c1b      	ldrb	r3, [r3, #16]
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	d80d      	bhi.n	8005fc4 <Evolve+0x28>
	{
		effect = Evolution;
 8005fa8:	4b09      	ldr	r3, [pc, #36]	@ (8005fd0 <Evolve+0x34>)
 8005faa:	2206      	movs	r2, #6
 8005fac:	701a      	strb	r2, [r3, #0]
		PlayEffect(effect);
 8005fae:	4b08      	ldr	r3, [pc, #32]	@ (8005fd0 <Evolve+0x34>)
 8005fb0:	781b      	ldrb	r3, [r3, #0]
 8005fb2:	0018      	movs	r0, r3
 8005fb4:	f7ff fd38 	bl	8005a28 <PlayEffect>
		game.evo += 1;
 8005fb8:	4b04      	ldr	r3, [pc, #16]	@ (8005fcc <Evolve+0x30>)
 8005fba:	7c1b      	ldrb	r3, [r3, #16]
 8005fbc:	3301      	adds	r3, #1
 8005fbe:	b2da      	uxtb	r2, r3
 8005fc0:	4b02      	ldr	r3, [pc, #8]	@ (8005fcc <Evolve+0x30>)
 8005fc2:	741a      	strb	r2, [r3, #16]
	}
}
 8005fc4:	46c0      	nop			@ (mov r8, r8)
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}
 8005fca:	46c0      	nop			@ (mov r8, r8)
 8005fcc:	20000298 	.word	0x20000298
 8005fd0:	20000288 	.word	0x20000288

08005fd4 <FlashErase>:
void FlashErase() {
 8005fd4:	b590      	push	{r4, r7, lr}
 8005fd6:	b087      	sub	sp, #28
 8005fd8:	af00      	add	r7, sp, #0
	FLASH_EraseInitTypeDef tryit;
	tryit.Banks = FLASH_BANK_1;
 8005fda:	2408      	movs	r4, #8
 8005fdc:	193b      	adds	r3, r7, r4
 8005fde:	2204      	movs	r2, #4
 8005fe0:	605a      	str	r2, [r3, #4]
	tryit.NbPages = 1;
 8005fe2:	193b      	adds	r3, r7, r4
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	60da      	str	r2, [r3, #12]
	tryit.Page = 127;
 8005fe8:	193b      	adds	r3, r7, r4
 8005fea:	227f      	movs	r2, #127	@ 0x7f
 8005fec:	609a      	str	r2, [r3, #8]
	tryit.TypeErase = FLASH_TYPEERASE_PAGES;
 8005fee:	193b      	adds	r3, r7, r4
 8005ff0:	2202      	movs	r2, #2
 8005ff2:	601a      	str	r2, [r3, #0]
	uint32_t pgerror;
	HAL_FLASH_Unlock();
 8005ff4:	f003 f92a 	bl	800924c <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&tryit, &pgerror);
 8005ff8:	1d3a      	adds	r2, r7, #4
 8005ffa:	193b      	adds	r3, r7, r4
 8005ffc:	0011      	movs	r1, r2
 8005ffe:	0018      	movs	r0, r3
 8006000:	f003 f9d8 	bl	80093b4 <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();
 8006004:	f003 f946 	bl	8009294 <HAL_FLASH_Lock>
}
 8006008:	46c0      	nop			@ (mov r8, r8)
 800600a:	46bd      	mov	sp, r7
 800600c:	b007      	add	sp, #28
 800600e:	bd90      	pop	{r4, r7, pc}

08006010 <FlashWrite>:
void FlashWrite() {
 8006010:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006012:	4cce      	ldr	r4, [pc, #824]	@ (800634c <FlashWrite+0x33c>)
 8006014:	44a5      	add	sp, r4
 8006016:	af00      	add	r7, sp, #0
	uint32_t Address = 0x0803F800;
 8006018:	4bcd      	ldr	r3, [pc, #820]	@ (8006350 <FlashWrite+0x340>)
 800601a:	4cce      	ldr	r4, [pc, #824]	@ (8006354 <FlashWrite+0x344>)
 800601c:	2140      	movs	r1, #64	@ 0x40
 800601e:	1862      	adds	r2, r4, r1
 8006020:	19d2      	adds	r2, r2, r7
 8006022:	6013      	str	r3, [r2, #0]
	uint8_t flashBuffer[496] = "I am the very model of a modern major general.";
 8006024:	4bcc      	ldr	r3, [pc, #816]	@ (8006358 <FlashWrite+0x348>)
 8006026:	48cd      	ldr	r0, [pc, #820]	@ (800635c <FlashWrite+0x34c>)
 8006028:	181b      	adds	r3, r3, r0
 800602a:	187a      	adds	r2, r7, r1
 800602c:	189c      	adds	r4, r3, r2
 800602e:	4bcc      	ldr	r3, [pc, #816]	@ (8006360 <FlashWrite+0x350>)
 8006030:	0020      	movs	r0, r4
 8006032:	0019      	movs	r1, r3
 8006034:	232f      	movs	r3, #47	@ 0x2f
 8006036:	001a      	movs	r2, r3
 8006038:	f008 fffd 	bl	800f036 <memcpy>
 800603c:	232f      	movs	r3, #47	@ 0x2f
 800603e:	18e0      	adds	r0, r4, r3
 8006040:	23c2      	movs	r3, #194	@ 0xc2
 8006042:	33ff      	adds	r3, #255	@ 0xff
 8006044:	001a      	movs	r2, r3
 8006046:	2100      	movs	r1, #0
 8006048:	f008 ff60 	bl	800ef0c <memset>
	uint64_t flashTestBuffer[496];
	uint64_t xyz = 0;
 800604c:	2200      	movs	r2, #0
 800604e:	2300      	movs	r3, #0
 8006050:	49c4      	ldr	r1, [pc, #784]	@ (8006364 <FlashWrite+0x354>)
 8006052:	2040      	movs	r0, #64	@ 0x40
 8006054:	1809      	adds	r1, r1, r0
 8006056:	19c9      	adds	r1, r1, r7
 8006058:	600a      	str	r2, [r1, #0]
 800605a:	604b      	str	r3, [r1, #4]
	int chunkI = 8;
 800605c:	2308      	movs	r3, #8
 800605e:	4ac2      	ldr	r2, [pc, #776]	@ (8006368 <FlashWrite+0x358>)
 8006060:	0001      	movs	r1, r0
 8006062:	1852      	adds	r2, r2, r1
 8006064:	19d2      	adds	r2, r2, r7
 8006066:	6013      	str	r3, [r2, #0]

	FLASH_EraseInitTypeDef tryit;
	tryit.Banks = FLASH_BANK_1;
 8006068:	4bc0      	ldr	r3, [pc, #768]	@ (800636c <FlashWrite+0x35c>)
 800606a:	48bc      	ldr	r0, [pc, #752]	@ (800635c <FlashWrite+0x34c>)
 800606c:	181b      	adds	r3, r3, r0
 800606e:	187a      	adds	r2, r7, r1
 8006070:	189a      	adds	r2, r3, r2
 8006072:	2304      	movs	r3, #4
 8006074:	6053      	str	r3, [r2, #4]
	tryit.NbPages = 1;
 8006076:	4bbd      	ldr	r3, [pc, #756]	@ (800636c <FlashWrite+0x35c>)
 8006078:	181b      	adds	r3, r3, r0
 800607a:	187a      	adds	r2, r7, r1
 800607c:	189a      	adds	r2, r3, r2
 800607e:	2301      	movs	r3, #1
 8006080:	60d3      	str	r3, [r2, #12]
	tryit.Page = 127;
 8006082:	4bba      	ldr	r3, [pc, #744]	@ (800636c <FlashWrite+0x35c>)
 8006084:	181b      	adds	r3, r3, r0
 8006086:	187a      	adds	r2, r7, r1
 8006088:	189a      	adds	r2, r3, r2
 800608a:	237f      	movs	r3, #127	@ 0x7f
 800608c:	6093      	str	r3, [r2, #8]
	tryit.TypeErase = FLASH_TYPEERASE_PAGES;
 800608e:	4bb7      	ldr	r3, [pc, #732]	@ (800636c <FlashWrite+0x35c>)
 8006090:	181b      	adds	r3, r3, r0
 8006092:	000c      	movs	r4, r1
 8006094:	187a      	adds	r2, r7, r1
 8006096:	189a      	adds	r2, r3, r2
 8006098:	2302      	movs	r3, #2
 800609a:	6013      	str	r3, [r2, #0]
	uint32_t pgerror;
	HAL_FLASH_Unlock();
 800609c:	f003 f8d6 	bl	800924c <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&tryit, &pgerror);
 80060a0:	2344      	movs	r3, #68	@ 0x44
 80060a2:	18fa      	adds	r2, r7, r3
 80060a4:	2308      	movs	r3, #8
 80060a6:	191b      	adds	r3, r3, r4
 80060a8:	19db      	adds	r3, r3, r7
 80060aa:	0011      	movs	r1, r2
 80060ac:	0018      	movs	r0, r3
 80060ae:	f003 f981 	bl	80093b4 <HAL_FLASHEx_Erase>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address,
 80060b2:	4aaf      	ldr	r2, [pc, #700]	@ (8006370 <FlashWrite+0x360>)
 80060b4:	2300      	movs	r3, #0
 80060b6:	4ca7      	ldr	r4, [pc, #668]	@ (8006354 <FlashWrite+0x344>)
 80060b8:	2040      	movs	r0, #64	@ 0x40
 80060ba:	1821      	adds	r1, r4, r0
 80060bc:	19c9      	adds	r1, r1, r7
 80060be:	6809      	ldr	r1, [r1, #0]
 80060c0:	2001      	movs	r0, #1
 80060c2:	f003 f875 	bl	80091b0 <HAL_FLASH_Program>
			(uint64_t) 0x12345678);
	Address += 8;
 80060c6:	0021      	movs	r1, r4
 80060c8:	2040      	movs	r0, #64	@ 0x40
 80060ca:	180b      	adds	r3, r1, r0
 80060cc:	19db      	adds	r3, r3, r7
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	3308      	adds	r3, #8
 80060d2:	180a      	adds	r2, r1, r0
 80060d4:	19d2      	adds	r2, r2, r7
 80060d6:	6013      	str	r3, [r2, #0]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address,
			(uint64_t) game.allSteps);
 80060d8:	4aa6      	ldr	r2, [pc, #664]	@ (8006374 <FlashWrite+0x364>)
 80060da:	238c      	movs	r3, #140	@ 0x8c
 80060dc:	005b      	lsls	r3, r3, #1
 80060de:	58d3      	ldr	r3, [r2, r3]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address,
 80060e0:	001d      	movs	r5, r3
 80060e2:	2300      	movs	r3, #0
 80060e4:	001e      	movs	r6, r3
 80060e6:	000c      	movs	r4, r1
 80060e8:	180b      	adds	r3, r1, r0
 80060ea:	19db      	adds	r3, r3, r7
 80060ec:	6819      	ldr	r1, [r3, #0]
 80060ee:	002a      	movs	r2, r5
 80060f0:	0033      	movs	r3, r6
 80060f2:	2001      	movs	r0, #1
 80060f4:	f003 f85c 	bl	80091b0 <HAL_FLASH_Program>
	Address += 8;
 80060f8:	0021      	movs	r1, r4
 80060fa:	2040      	movs	r0, #64	@ 0x40
 80060fc:	180b      	adds	r3, r1, r0
 80060fe:	19db      	adds	r3, r3, r7
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	3308      	adds	r3, #8
 8006104:	180a      	adds	r2, r1, r0
 8006106:	19d2      	adds	r2, r2, r7
 8006108:	6013      	str	r3, [r2, #0]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address,
			(uint64_t) game.stepsToday);
 800610a:	4a9a      	ldr	r2, [pc, #616]	@ (8006374 <FlashWrite+0x364>)
 800610c:	2390      	movs	r3, #144	@ 0x90
 800610e:	005b      	lsls	r3, r3, #1
 8006110:	58d3      	ldr	r3, [r2, r3]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address,
 8006112:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006114:	2300      	movs	r3, #0
 8006116:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006118:	000c      	movs	r4, r1
 800611a:	0005      	movs	r5, r0
 800611c:	180b      	adds	r3, r1, r0
 800611e:	19db      	adds	r3, r3, r7
 8006120:	6819      	ldr	r1, [r3, #0]
 8006122:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006124:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006126:	2001      	movs	r0, #1
 8006128:	f003 f842 	bl	80091b0 <HAL_FLASH_Program>
	Address += 8;
 800612c:	0021      	movs	r1, r4
 800612e:	0028      	movs	r0, r5
 8006130:	180b      	adds	r3, r1, r0
 8006132:	19db      	adds	r3, r3, r7
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	3308      	adds	r3, #8
 8006138:	180a      	adds	r2, r1, r0
 800613a:	19d2      	adds	r2, r2, r7
 800613c:	6013      	str	r3, [r2, #0]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address,
			(uint64_t) game.weeklySteps);
 800613e:	4a8d      	ldr	r2, [pc, #564]	@ (8006374 <FlashWrite+0x364>)
 8006140:	238e      	movs	r3, #142	@ 0x8e
 8006142:	005b      	lsls	r3, r3, #1
 8006144:	58d3      	ldr	r3, [r2, r3]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address,
 8006146:	633b      	str	r3, [r7, #48]	@ 0x30
 8006148:	2300      	movs	r3, #0
 800614a:	637b      	str	r3, [r7, #52]	@ 0x34
 800614c:	000c      	movs	r4, r1
 800614e:	0005      	movs	r5, r0
 8006150:	180b      	adds	r3, r1, r0
 8006152:	19db      	adds	r3, r3, r7
 8006154:	6819      	ldr	r1, [r3, #0]
 8006156:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006158:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800615a:	2001      	movs	r0, #1
 800615c:	f003 f828 	bl	80091b0 <HAL_FLASH_Program>
	Address += 8;
 8006160:	0021      	movs	r1, r4
 8006162:	0028      	movs	r0, r5
 8006164:	180b      	adds	r3, r1, r0
 8006166:	19db      	adds	r3, r3, r7
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	3308      	adds	r3, #8
 800616c:	180a      	adds	r2, r1, r0
 800616e:	19d2      	adds	r2, r2, r7
 8006170:	6013      	str	r3, [r2, #0]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address,
			(uint64_t) game.dailyGoal);
 8006172:	4a80      	ldr	r2, [pc, #512]	@ (8006374 <FlashWrite+0x364>)
 8006174:	2392      	movs	r3, #146	@ 0x92
 8006176:	005b      	lsls	r3, r3, #1
 8006178:	58d3      	ldr	r3, [r2, r3]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address,
 800617a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800617c:	2300      	movs	r3, #0
 800617e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006180:	000c      	movs	r4, r1
 8006182:	0005      	movs	r5, r0
 8006184:	180b      	adds	r3, r1, r0
 8006186:	19db      	adds	r3, r3, r7
 8006188:	6819      	ldr	r1, [r3, #0]
 800618a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800618c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800618e:	2001      	movs	r0, #1
 8006190:	f003 f80e 	bl	80091b0 <HAL_FLASH_Program>
	Address += 8;
 8006194:	0021      	movs	r1, r4
 8006196:	0028      	movs	r0, r5
 8006198:	180b      	adds	r3, r1, r0
 800619a:	19db      	adds	r3, r3, r7
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	3308      	adds	r3, #8
 80061a0:	180a      	adds	r2, r1, r0
 80061a2:	19d2      	adds	r2, r2, r7
 80061a4:	6013      	str	r3, [r2, #0]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address,
			(uint64_t) game.weeklyGoal);
 80061a6:	4a73      	ldr	r2, [pc, #460]	@ (8006374 <FlashWrite+0x364>)
 80061a8:	2394      	movs	r3, #148	@ 0x94
 80061aa:	005b      	lsls	r3, r3, #1
 80061ac:	58d3      	ldr	r3, [r2, r3]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address,
 80061ae:	623b      	str	r3, [r7, #32]
 80061b0:	2300      	movs	r3, #0
 80061b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80061b4:	000c      	movs	r4, r1
 80061b6:	0005      	movs	r5, r0
 80061b8:	180b      	adds	r3, r1, r0
 80061ba:	19db      	adds	r3, r3, r7
 80061bc:	6819      	ldr	r1, [r3, #0]
 80061be:	6a3a      	ldr	r2, [r7, #32]
 80061c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061c2:	2001      	movs	r0, #1
 80061c4:	f002 fff4 	bl	80091b0 <HAL_FLASH_Program>
	Address += 8;
 80061c8:	0022      	movs	r2, r4
 80061ca:	0028      	movs	r0, r5
 80061cc:	1813      	adds	r3, r2, r0
 80061ce:	19db      	adds	r3, r3, r7
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	3308      	adds	r3, #8
 80061d4:	1811      	adds	r1, r2, r0
 80061d6:	19c9      	adds	r1, r1, r7
 80061d8:	600b      	str	r3, [r1, #0]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address,
			(uint64_t) game.evo);
 80061da:	4b66      	ldr	r3, [pc, #408]	@ (8006374 <FlashWrite+0x364>)
 80061dc:	7c1b      	ldrb	r3, [r3, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address,
 80061de:	61bb      	str	r3, [r7, #24]
 80061e0:	2300      	movs	r3, #0
 80061e2:	61fb      	str	r3, [r7, #28]
 80061e4:	0014      	movs	r4, r2
 80061e6:	0005      	movs	r5, r0
 80061e8:	1813      	adds	r3, r2, r0
 80061ea:	19db      	adds	r3, r3, r7
 80061ec:	6819      	ldr	r1, [r3, #0]
 80061ee:	69ba      	ldr	r2, [r7, #24]
 80061f0:	69fb      	ldr	r3, [r7, #28]
 80061f2:	2001      	movs	r0, #1
 80061f4:	f002 ffdc 	bl	80091b0 <HAL_FLASH_Program>
	Address += 8;
 80061f8:	0022      	movs	r2, r4
 80061fa:	0028      	movs	r0, r5
 80061fc:	1813      	adds	r3, r2, r0
 80061fe:	19db      	adds	r3, r3, r7
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	3308      	adds	r3, #8
 8006204:	1811      	adds	r1, r2, r0
 8006206:	19c9      	adds	r1, r1, r7
 8006208:	600b      	str	r3, [r1, #0]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address,
			(uint64_t) game.mood);
 800620a:	4b5a      	ldr	r3, [pc, #360]	@ (8006374 <FlashWrite+0x364>)
 800620c:	7c5b      	ldrb	r3, [r3, #17]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address,
 800620e:	613b      	str	r3, [r7, #16]
 8006210:	2300      	movs	r3, #0
 8006212:	617b      	str	r3, [r7, #20]
 8006214:	0014      	movs	r4, r2
 8006216:	0005      	movs	r5, r0
 8006218:	1813      	adds	r3, r2, r0
 800621a:	19db      	adds	r3, r3, r7
 800621c:	6819      	ldr	r1, [r3, #0]
 800621e:	693a      	ldr	r2, [r7, #16]
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	2001      	movs	r0, #1
 8006224:	f002 ffc4 	bl	80091b0 <HAL_FLASH_Program>
	Address += 8;
 8006228:	0022      	movs	r2, r4
 800622a:	0028      	movs	r0, r5
 800622c:	1813      	adds	r3, r2, r0
 800622e:	19db      	adds	r3, r3, r7
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	3308      	adds	r3, #8
 8006234:	1811      	adds	r1, r2, r0
 8006236:	19c9      	adds	r1, r1, r7
 8006238:	600b      	str	r3, [r1, #0]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address,
			(uint64_t) game.numLocations);
 800623a:	4b4e      	ldr	r3, [pc, #312]	@ (8006374 <FlashWrite+0x364>)
 800623c:	695b      	ldr	r3, [r3, #20]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address,
 800623e:	60bb      	str	r3, [r7, #8]
 8006240:	2300      	movs	r3, #0
 8006242:	60fb      	str	r3, [r7, #12]
 8006244:	0014      	movs	r4, r2
 8006246:	0005      	movs	r5, r0
 8006248:	1813      	adds	r3, r2, r0
 800624a:	19db      	adds	r3, r3, r7
 800624c:	6819      	ldr	r1, [r3, #0]
 800624e:	68ba      	ldr	r2, [r7, #8]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2001      	movs	r0, #1
 8006254:	f002 ffac 	bl	80091b0 <HAL_FLASH_Program>
	Address += 8;
 8006258:	0022      	movs	r2, r4
 800625a:	0028      	movs	r0, r5
 800625c:	1813      	adds	r3, r2, r0
 800625e:	19db      	adds	r3, r3, r7
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	3308      	adds	r3, #8
 8006264:	1812      	adds	r2, r2, r0
 8006266:	19d2      	adds	r2, r2, r7
 8006268:	6013      	str	r3, [r2, #0]
	for (int flashI = 0; flashI < 32; flashI++) {
 800626a:	2300      	movs	r3, #0
 800626c:	4a42      	ldr	r2, [pc, #264]	@ (8006378 <FlashWrite+0x368>)
 800626e:	1812      	adds	r2, r2, r0
 8006270:	19d2      	adds	r2, r2, r7
 8006272:	6013      	str	r3, [r2, #0]
 8006274:	e05c      	b.n	8006330 <FlashWrite+0x320>
		xyz += (game.uid[flashI]) << ((8 - (chunkI)) * 8);
 8006276:	493f      	ldr	r1, [pc, #252]	@ (8006374 <FlashWrite+0x364>)
 8006278:	2396      	movs	r3, #150	@ 0x96
 800627a:	005b      	lsls	r3, r3, #1
 800627c:	4a3e      	ldr	r2, [pc, #248]	@ (8006378 <FlashWrite+0x368>)
 800627e:	2040      	movs	r0, #64	@ 0x40
 8006280:	1812      	adds	r2, r2, r0
 8006282:	19d2      	adds	r2, r2, r7
 8006284:	6812      	ldr	r2, [r2, #0]
 8006286:	188a      	adds	r2, r1, r2
 8006288:	18d3      	adds	r3, r2, r3
 800628a:	781b      	ldrb	r3, [r3, #0]
 800628c:	0019      	movs	r1, r3
 800628e:	4c36      	ldr	r4, [pc, #216]	@ (8006368 <FlashWrite+0x358>)
 8006290:	1823      	adds	r3, r4, r0
 8006292:	19db      	adds	r3, r3, r7
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	2208      	movs	r2, #8
 8006298:	1ad3      	subs	r3, r2, r3
 800629a:	00db      	lsls	r3, r3, #3
 800629c:	4099      	lsls	r1, r3
 800629e:	000b      	movs	r3, r1
 80062a0:	603b      	str	r3, [r7, #0]
 80062a2:	17db      	asrs	r3, r3, #31
 80062a4:	607b      	str	r3, [r7, #4]
 80062a6:	4d2f      	ldr	r5, [pc, #188]	@ (8006364 <FlashWrite+0x354>)
 80062a8:	0006      	movs	r6, r0
 80062aa:	182b      	adds	r3, r5, r0
 80062ac:	19db      	adds	r3, r3, r7
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	6838      	ldr	r0, [r7, #0]
 80062b4:	6879      	ldr	r1, [r7, #4]
 80062b6:	1812      	adds	r2, r2, r0
 80062b8:	414b      	adcs	r3, r1
 80062ba:	0029      	movs	r1, r5
 80062bc:	1988      	adds	r0, r1, r6
 80062be:	19c0      	adds	r0, r0, r7
 80062c0:	6002      	str	r2, [r0, #0]
 80062c2:	6043      	str	r3, [r0, #4]
		if (--chunkI == 0) {
 80062c4:	0030      	movs	r0, r6
 80062c6:	19a3      	adds	r3, r4, r6
 80062c8:	19db      	adds	r3, r3, r7
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	3b01      	subs	r3, #1
 80062ce:	1822      	adds	r2, r4, r0
 80062d0:	19d2      	adds	r2, r2, r7
 80062d2:	6013      	str	r3, [r2, #0]
 80062d4:	1823      	adds	r3, r4, r0
 80062d6:	19db      	adds	r3, r3, r7
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d11f      	bne.n	800631e <FlashWrite+0x30e>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, xyz);
 80062de:	000d      	movs	r5, r1
 80062e0:	180b      	adds	r3, r1, r0
 80062e2:	19db      	adds	r3, r3, r7
 80062e4:	681a      	ldr	r2, [r3, #0]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	4e1a      	ldr	r6, [pc, #104]	@ (8006354 <FlashWrite+0x344>)
 80062ea:	1831      	adds	r1, r6, r0
 80062ec:	19c9      	adds	r1, r1, r7
 80062ee:	6809      	ldr	r1, [r1, #0]
 80062f0:	2001      	movs	r0, #1
 80062f2:	f002 ff5d 	bl	80091b0 <HAL_FLASH_Program>
			chunkI = 8;
 80062f6:	2308      	movs	r3, #8
 80062f8:	2140      	movs	r1, #64	@ 0x40
 80062fa:	1862      	adds	r2, r4, r1
 80062fc:	19d2      	adds	r2, r2, r7
 80062fe:	6013      	str	r3, [r2, #0]
			xyz = 0;
 8006300:	2200      	movs	r2, #0
 8006302:	2300      	movs	r3, #0
 8006304:	0008      	movs	r0, r1
 8006306:	1869      	adds	r1, r5, r1
 8006308:	19c9      	adds	r1, r1, r7
 800630a:	600a      	str	r2, [r1, #0]
 800630c:	604b      	str	r3, [r1, #4]
			Address += 8;
 800630e:	0002      	movs	r2, r0
 8006310:	18b3      	adds	r3, r6, r2
 8006312:	19db      	adds	r3, r3, r7
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	3308      	adds	r3, #8
 8006318:	18b2      	adds	r2, r6, r2
 800631a:	19d2      	adds	r2, r2, r7
 800631c:	6013      	str	r3, [r2, #0]
	for (int flashI = 0; flashI < 32; flashI++) {
 800631e:	4a16      	ldr	r2, [pc, #88]	@ (8006378 <FlashWrite+0x368>)
 8006320:	2140      	movs	r1, #64	@ 0x40
 8006322:	1853      	adds	r3, r2, r1
 8006324:	19db      	adds	r3, r3, r7
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	3301      	adds	r3, #1
 800632a:	1852      	adds	r2, r2, r1
 800632c:	19d2      	adds	r2, r2, r7
 800632e:	6013      	str	r3, [r2, #0]
 8006330:	4b11      	ldr	r3, [pc, #68]	@ (8006378 <FlashWrite+0x368>)
 8006332:	2140      	movs	r1, #64	@ 0x40
 8006334:	185b      	adds	r3, r3, r1
 8006336:	19db      	adds	r3, r3, r7
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	2b1f      	cmp	r3, #31
 800633c:	dd9b      	ble.n	8006276 <FlashWrite+0x266>
		}
	}
	for (int flashI = 0; flashI < 32; flashI++) {
 800633e:	2300      	movs	r3, #0
 8006340:	4a0e      	ldr	r2, [pc, #56]	@ (800637c <FlashWrite+0x36c>)
 8006342:	1852      	adds	r2, r2, r1
 8006344:	19d2      	adds	r2, r2, r7
 8006346:	6013      	str	r3, [r2, #0]
 8006348:	e065      	b.n	8006416 <FlashWrite+0x406>
 800634a:	46c0      	nop			@ (mov r8, r8)
 800634c:	ffffee14 	.word	0xffffee14
 8006350:	0803f800 	.word	0x0803f800
 8006354:	000011a4 	.word	0x000011a4
 8006358:	fffffdf4 	.word	0xfffffdf4
 800635c:	000011a8 	.word	0x000011a8
 8006360:	0801169c 	.word	0x0801169c
 8006364:	00001198 	.word	0x00001198
 8006368:	00001194 	.word	0x00001194
 800636c:	ffffee60 	.word	0xffffee60
 8006370:	12345678 	.word	0x12345678
 8006374:	20000298 	.word	0x20000298
 8006378:	00001190 	.word	0x00001190
 800637c:	0000118c 	.word	0x0000118c
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address,
				(uint64_t) (game.positions[flashI].lat * 100000));
 8006380:	4b33      	ldr	r3, [pc, #204]	@ (8006450 <FlashWrite+0x440>)
 8006382:	4d34      	ldr	r5, [pc, #208]	@ (8006454 <FlashWrite+0x444>)
 8006384:	2640      	movs	r6, #64	@ 0x40
 8006386:	19aa      	adds	r2, r5, r6
 8006388:	19d2      	adds	r2, r2, r7
 800638a:	6812      	ldr	r2, [r2, #0]
 800638c:	3203      	adds	r2, #3
 800638e:	00d2      	lsls	r2, r2, #3
 8006390:	58d3      	ldr	r3, [r2, r3]
 8006392:	4931      	ldr	r1, [pc, #196]	@ (8006458 <FlashWrite+0x448>)
 8006394:	1c18      	adds	r0, r3, #0
 8006396:	f7fa fe4b 	bl	8001030 <__aeabi_fmul>
 800639a:	1c03      	adds	r3, r0, #0
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address,
 800639c:	1c18      	adds	r0, r3, #0
 800639e:	f7fa f967 	bl	8000670 <__aeabi_f2ulz>
 80063a2:	0002      	movs	r2, r0
 80063a4:	000b      	movs	r3, r1
 80063a6:	4c2d      	ldr	r4, [pc, #180]	@ (800645c <FlashWrite+0x44c>)
 80063a8:	19a1      	adds	r1, r4, r6
 80063aa:	19c9      	adds	r1, r1, r7
 80063ac:	6809      	ldr	r1, [r1, #0]
 80063ae:	2001      	movs	r0, #1
 80063b0:	f002 fefe 	bl	80091b0 <HAL_FLASH_Program>
		Address += 8;
 80063b4:	19a3      	adds	r3, r4, r6
 80063b6:	19db      	adds	r3, r3, r7
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	3308      	adds	r3, #8
 80063bc:	19a2      	adds	r2, r4, r6
 80063be:	19d2      	adds	r2, r2, r7
 80063c0:	6013      	str	r3, [r2, #0]
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address,
				(uint64_t) (game.positions[flashI].lon * 100000));
 80063c2:	4a23      	ldr	r2, [pc, #140]	@ (8006450 <FlashWrite+0x440>)
 80063c4:	19ab      	adds	r3, r5, r6
 80063c6:	19db      	adds	r3, r3, r7
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	3303      	adds	r3, #3
 80063cc:	00db      	lsls	r3, r3, #3
 80063ce:	18d3      	adds	r3, r2, r3
 80063d0:	3304      	adds	r3, #4
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4920      	ldr	r1, [pc, #128]	@ (8006458 <FlashWrite+0x448>)
 80063d6:	1c18      	adds	r0, r3, #0
 80063d8:	f7fa fe2a 	bl	8001030 <__aeabi_fmul>
 80063dc:	1c03      	adds	r3, r0, #0
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address,
 80063de:	1c18      	adds	r0, r3, #0
 80063e0:	f7fa f946 	bl	8000670 <__aeabi_f2ulz>
 80063e4:	0002      	movs	r2, r0
 80063e6:	000b      	movs	r3, r1
 80063e8:	19a1      	adds	r1, r4, r6
 80063ea:	19c9      	adds	r1, r1, r7
 80063ec:	6809      	ldr	r1, [r1, #0]
 80063ee:	2001      	movs	r0, #1
 80063f0:	f002 fede 	bl	80091b0 <HAL_FLASH_Program>
		Address += 8;
 80063f4:	0032      	movs	r2, r6
 80063f6:	19a3      	adds	r3, r4, r6
 80063f8:	19db      	adds	r3, r3, r7
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	3308      	adds	r3, #8
 80063fe:	0016      	movs	r6, r2
 8006400:	18a2      	adds	r2, r4, r2
 8006402:	19d2      	adds	r2, r2, r7
 8006404:	6013      	str	r3, [r2, #0]
	for (int flashI = 0; flashI < 32; flashI++) {
 8006406:	0032      	movs	r2, r6
 8006408:	18ab      	adds	r3, r5, r2
 800640a:	19db      	adds	r3, r3, r7
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	3301      	adds	r3, #1
 8006410:	18aa      	adds	r2, r5, r2
 8006412:	19d2      	adds	r2, r2, r7
 8006414:	6013      	str	r3, [r2, #0]
 8006416:	4b0f      	ldr	r3, [pc, #60]	@ (8006454 <FlashWrite+0x444>)
 8006418:	2040      	movs	r0, #64	@ 0x40
 800641a:	181b      	adds	r3, r3, r0
 800641c:	19db      	adds	r3, r3, r7
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	2b1f      	cmp	r3, #31
 8006422:	ddad      	ble.n	8006380 <FlashWrite+0x370>
	}
	Address = 0x0803F808;
 8006424:	4b0e      	ldr	r3, [pc, #56]	@ (8006460 <FlashWrite+0x450>)
 8006426:	4a0d      	ldr	r2, [pc, #52]	@ (800645c <FlashWrite+0x44c>)
 8006428:	1811      	adds	r1, r2, r0
 800642a:	19c9      	adds	r1, r1, r7
 800642c:	600b      	str	r3, [r1, #0]
	xyz = *(__IO uint64_t*) (Address);
 800642e:	1813      	adds	r3, r2, r0
 8006430:	19db      	adds	r3, r3, r7
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	490a      	ldr	r1, [pc, #40]	@ (8006464 <FlashWrite+0x454>)
 800643a:	1809      	adds	r1, r1, r0
 800643c:	19c9      	adds	r1, r1, r7
 800643e:	600a      	str	r2, [r1, #0]
 8006440:	604b      	str	r3, [r1, #4]
	HAL_FLASH_Lock();
 8006442:	f002 ff27 	bl	8009294 <HAL_FLASH_Lock>
}
 8006446:	46c0      	nop			@ (mov r8, r8)
 8006448:	46bd      	mov	sp, r7
 800644a:	4b07      	ldr	r3, [pc, #28]	@ (8006468 <FlashWrite+0x458>)
 800644c:	449d      	add	sp, r3
 800644e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006450:	20000298 	.word	0x20000298
 8006454:	0000118c 	.word	0x0000118c
 8006458:	47c35000 	.word	0x47c35000
 800645c:	000011a4 	.word	0x000011a4
 8006460:	0803f808 	.word	0x0803f808
 8006464:	00001198 	.word	0x00001198
 8006468:	000011ec 	.word	0x000011ec

0800646c <AnimateCharacter>:
void AnimateCharacter(uint16_t palette[])
{
 800646c:	b590      	push	{r4, r7, lr}
 800646e:	b089      	sub	sp, #36	@ 0x24
 8006470:	af04      	add	r7, sp, #16
 8006472:	6078      	str	r0, [r7, #4]
	unsigned char walkingCheck;
	_ADXL343_ReadReg8(0x18, &walkingCheck, 1);
 8006474:	240e      	movs	r4, #14
 8006476:	193b      	adds	r3, r7, r4
 8006478:	2201      	movs	r2, #1
 800647a:	0019      	movs	r1, r3
 800647c:	2018      	movs	r0, #24
 800647e:	f000 fa63 	bl	8006948 <_ADXL343_ReadReg8>
	unsigned char walkingYes = walkingCheck>0;
 8006482:	193b      	adds	r3, r7, r4
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	1e5a      	subs	r2, r3, #1
 8006488:	4193      	sbcs	r3, r2
 800648a:	b2da      	uxtb	r2, r3
 800648c:	230f      	movs	r3, #15
 800648e:	18fb      	adds	r3, r7, r3
 8006490:	701a      	strb	r2, [r3, #0]
	switch(game.evo)
 8006492:	4be3      	ldr	r3, [pc, #908]	@ (8006820 <AnimateCharacter+0x3b4>)
 8006494:	7c1b      	ldrb	r3, [r3, #16]
 8006496:	2b02      	cmp	r3, #2
 8006498:	d100      	bne.n	800649c <AnimateCharacter+0x30>
 800649a:	e151      	b.n	8006740 <AnimateCharacter+0x2d4>
 800649c:	dd00      	ble.n	80064a0 <AnimateCharacter+0x34>
 800649e:	e239      	b.n	8006914 <AnimateCharacter+0x4a8>
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d003      	beq.n	80064ac <AnimateCharacter+0x40>
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d100      	bne.n	80064aa <AnimateCharacter+0x3e>
 80064a8:	e0af      	b.n	800660a <AnimateCharacter+0x19e>
 80064aa:	e233      	b.n	8006914 <AnimateCharacter+0x4a8>
	{
	case 0:
		if(walkingYes>0)
 80064ac:	230f      	movs	r3, #15
 80064ae:	18fb      	adds	r3, r7, r3
 80064b0:	781b      	ldrb	r3, [r3, #0]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d05a      	beq.n	800656c <AnimateCharacter+0x100>
		{
			frameCount = 5;
 80064b6:	4bdb      	ldr	r3, [pc, #876]	@ (8006824 <AnimateCharacter+0x3b8>)
 80064b8:	2205      	movs	r2, #5
 80064ba:	601a      	str	r2, [r3, #0]
			switch(currentFrame)
 80064bc:	4bda      	ldr	r3, [pc, #872]	@ (8006828 <AnimateCharacter+0x3bc>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	2b05      	cmp	r3, #5
 80064c2:	d900      	bls.n	80064c6 <AnimateCharacter+0x5a>
 80064c4:	e0a1      	b.n	800660a <AnimateCharacter+0x19e>
 80064c6:	009a      	lsls	r2, r3, #2
 80064c8:	4bd8      	ldr	r3, [pc, #864]	@ (800682c <AnimateCharacter+0x3c0>)
 80064ca:	18d3      	adds	r3, r2, r3
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	469f      	mov	pc, r3
			{
			case 0:
				drawImage(imgEggWalking0, palette, 30, 30, 64, 64, 225);
 80064d0:	6879      	ldr	r1, [r7, #4]
 80064d2:	48d7      	ldr	r0, [pc, #860]	@ (8006830 <AnimateCharacter+0x3c4>)
 80064d4:	23e1      	movs	r3, #225	@ 0xe1
 80064d6:	9302      	str	r3, [sp, #8]
 80064d8:	2340      	movs	r3, #64	@ 0x40
 80064da:	9301      	str	r3, [sp, #4]
 80064dc:	2340      	movs	r3, #64	@ 0x40
 80064de:	9300      	str	r3, [sp, #0]
 80064e0:	231e      	movs	r3, #30
 80064e2:	221e      	movs	r2, #30
 80064e4:	f7fd ff0e 	bl	8004304 <drawImage>
				break;
 80064e8:	e08f      	b.n	800660a <AnimateCharacter+0x19e>
			case 1:
				drawImage(imgEggWalking1, palette, 30, 30, 64, 64, 212);
 80064ea:	6879      	ldr	r1, [r7, #4]
 80064ec:	48d1      	ldr	r0, [pc, #836]	@ (8006834 <AnimateCharacter+0x3c8>)
 80064ee:	23d4      	movs	r3, #212	@ 0xd4
 80064f0:	9302      	str	r3, [sp, #8]
 80064f2:	2340      	movs	r3, #64	@ 0x40
 80064f4:	9301      	str	r3, [sp, #4]
 80064f6:	2340      	movs	r3, #64	@ 0x40
 80064f8:	9300      	str	r3, [sp, #0]
 80064fa:	231e      	movs	r3, #30
 80064fc:	221e      	movs	r2, #30
 80064fe:	f7fd ff01 	bl	8004304 <drawImage>
				break;
 8006502:	e082      	b.n	800660a <AnimateCharacter+0x19e>
			case 2:
				drawImage(imgEggWalking2, palette, 30, 30, 64, 64, 197);
 8006504:	6879      	ldr	r1, [r7, #4]
 8006506:	48cc      	ldr	r0, [pc, #816]	@ (8006838 <AnimateCharacter+0x3cc>)
 8006508:	23c5      	movs	r3, #197	@ 0xc5
 800650a:	9302      	str	r3, [sp, #8]
 800650c:	2340      	movs	r3, #64	@ 0x40
 800650e:	9301      	str	r3, [sp, #4]
 8006510:	2340      	movs	r3, #64	@ 0x40
 8006512:	9300      	str	r3, [sp, #0]
 8006514:	231e      	movs	r3, #30
 8006516:	221e      	movs	r2, #30
 8006518:	f7fd fef4 	bl	8004304 <drawImage>
				break;
 800651c:	e075      	b.n	800660a <AnimateCharacter+0x19e>
			case 3:
				drawImage(imgEggWalking3, palette, 30, 30, 64, 64, 227);
 800651e:	6879      	ldr	r1, [r7, #4]
 8006520:	48c6      	ldr	r0, [pc, #792]	@ (800683c <AnimateCharacter+0x3d0>)
 8006522:	23e3      	movs	r3, #227	@ 0xe3
 8006524:	9302      	str	r3, [sp, #8]
 8006526:	2340      	movs	r3, #64	@ 0x40
 8006528:	9301      	str	r3, [sp, #4]
 800652a:	2340      	movs	r3, #64	@ 0x40
 800652c:	9300      	str	r3, [sp, #0]
 800652e:	231e      	movs	r3, #30
 8006530:	221e      	movs	r2, #30
 8006532:	f7fd fee7 	bl	8004304 <drawImage>
				break;
 8006536:	e068      	b.n	800660a <AnimateCharacter+0x19e>
			case 4:
				drawImage(imgEggWalking4, palette, 30, 30, 64, 64, 241);
 8006538:	6879      	ldr	r1, [r7, #4]
 800653a:	48c1      	ldr	r0, [pc, #772]	@ (8006840 <AnimateCharacter+0x3d4>)
 800653c:	23f1      	movs	r3, #241	@ 0xf1
 800653e:	9302      	str	r3, [sp, #8]
 8006540:	2340      	movs	r3, #64	@ 0x40
 8006542:	9301      	str	r3, [sp, #4]
 8006544:	2340      	movs	r3, #64	@ 0x40
 8006546:	9300      	str	r3, [sp, #0]
 8006548:	231e      	movs	r3, #30
 800654a:	221e      	movs	r2, #30
 800654c:	f7fd feda 	bl	8004304 <drawImage>
				break;
 8006550:	e05b      	b.n	800660a <AnimateCharacter+0x19e>
			case 5:
				drawImage(imgEggWalking5, palette, 30, 30, 64, 64, 226);
 8006552:	6879      	ldr	r1, [r7, #4]
 8006554:	48bb      	ldr	r0, [pc, #748]	@ (8006844 <AnimateCharacter+0x3d8>)
 8006556:	23e2      	movs	r3, #226	@ 0xe2
 8006558:	9302      	str	r3, [sp, #8]
 800655a:	2340      	movs	r3, #64	@ 0x40
 800655c:	9301      	str	r3, [sp, #4]
 800655e:	2340      	movs	r3, #64	@ 0x40
 8006560:	9300      	str	r3, [sp, #0]
 8006562:	231e      	movs	r3, #30
 8006564:	221e      	movs	r2, #30
 8006566:	f7fd fecd 	bl	8004304 <drawImage>
				break;
 800656a:	e04e      	b.n	800660a <AnimateCharacter+0x19e>
			}
		}
		else
		{
			frameCount = 4;
 800656c:	4bad      	ldr	r3, [pc, #692]	@ (8006824 <AnimateCharacter+0x3b8>)
 800656e:	2204      	movs	r2, #4
 8006570:	601a      	str	r2, [r3, #0]
			switch(currentFrame)
 8006572:	4bad      	ldr	r3, [pc, #692]	@ (8006828 <AnimateCharacter+0x3bc>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	2b04      	cmp	r3, #4
 8006578:	d900      	bls.n	800657c <AnimateCharacter+0x110>
 800657a:	e1c8      	b.n	800690e <AnimateCharacter+0x4a2>
 800657c:	009a      	lsls	r2, r3, #2
 800657e:	4bb2      	ldr	r3, [pc, #712]	@ (8006848 <AnimateCharacter+0x3dc>)
 8006580:	18d3      	adds	r3, r2, r3
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	469f      	mov	pc, r3
					{
					case 0:
						drawImage(imgEggSitting0, palette, 30, 30, 64, 64, 226);
 8006586:	6879      	ldr	r1, [r7, #4]
 8006588:	48b0      	ldr	r0, [pc, #704]	@ (800684c <AnimateCharacter+0x3e0>)
 800658a:	23e2      	movs	r3, #226	@ 0xe2
 800658c:	9302      	str	r3, [sp, #8]
 800658e:	2340      	movs	r3, #64	@ 0x40
 8006590:	9301      	str	r3, [sp, #4]
 8006592:	2340      	movs	r3, #64	@ 0x40
 8006594:	9300      	str	r3, [sp, #0]
 8006596:	231e      	movs	r3, #30
 8006598:	221e      	movs	r2, #30
 800659a:	f7fd feb3 	bl	8004304 <drawImage>
						break;
 800659e:	e033      	b.n	8006608 <AnimateCharacter+0x19c>
					case 1:
						drawImage(imgEggSitting1, palette, 30, 30, 64, 64, 227);
 80065a0:	6879      	ldr	r1, [r7, #4]
 80065a2:	48ab      	ldr	r0, [pc, #684]	@ (8006850 <AnimateCharacter+0x3e4>)
 80065a4:	23e3      	movs	r3, #227	@ 0xe3
 80065a6:	9302      	str	r3, [sp, #8]
 80065a8:	2340      	movs	r3, #64	@ 0x40
 80065aa:	9301      	str	r3, [sp, #4]
 80065ac:	2340      	movs	r3, #64	@ 0x40
 80065ae:	9300      	str	r3, [sp, #0]
 80065b0:	231e      	movs	r3, #30
 80065b2:	221e      	movs	r2, #30
 80065b4:	f7fd fea6 	bl	8004304 <drawImage>
						break;
 80065b8:	e026      	b.n	8006608 <AnimateCharacter+0x19c>
					case 2:
						drawImage(imgEggSitting2, palette, 30, 30, 64, 64, 221);
 80065ba:	6879      	ldr	r1, [r7, #4]
 80065bc:	48a5      	ldr	r0, [pc, #660]	@ (8006854 <AnimateCharacter+0x3e8>)
 80065be:	23dd      	movs	r3, #221	@ 0xdd
 80065c0:	9302      	str	r3, [sp, #8]
 80065c2:	2340      	movs	r3, #64	@ 0x40
 80065c4:	9301      	str	r3, [sp, #4]
 80065c6:	2340      	movs	r3, #64	@ 0x40
 80065c8:	9300      	str	r3, [sp, #0]
 80065ca:	231e      	movs	r3, #30
 80065cc:	221e      	movs	r2, #30
 80065ce:	f7fd fe99 	bl	8004304 <drawImage>
						break;
 80065d2:	e019      	b.n	8006608 <AnimateCharacter+0x19c>
					case 3:
						drawImage(imgEggSitting3, palette, 30, 30, 64, 64, 217);
 80065d4:	6879      	ldr	r1, [r7, #4]
 80065d6:	48a0      	ldr	r0, [pc, #640]	@ (8006858 <AnimateCharacter+0x3ec>)
 80065d8:	23d9      	movs	r3, #217	@ 0xd9
 80065da:	9302      	str	r3, [sp, #8]
 80065dc:	2340      	movs	r3, #64	@ 0x40
 80065de:	9301      	str	r3, [sp, #4]
 80065e0:	2340      	movs	r3, #64	@ 0x40
 80065e2:	9300      	str	r3, [sp, #0]
 80065e4:	231e      	movs	r3, #30
 80065e6:	221e      	movs	r2, #30
 80065e8:	f7fd fe8c 	bl	8004304 <drawImage>
						break;
 80065ec:	e00c      	b.n	8006608 <AnimateCharacter+0x19c>
					case 4:
						drawImage(imgEggSitting4, palette, 30, 30, 64, 64, 221);
 80065ee:	6879      	ldr	r1, [r7, #4]
 80065f0:	489a      	ldr	r0, [pc, #616]	@ (800685c <AnimateCharacter+0x3f0>)
 80065f2:	23dd      	movs	r3, #221	@ 0xdd
 80065f4:	9302      	str	r3, [sp, #8]
 80065f6:	2340      	movs	r3, #64	@ 0x40
 80065f8:	9301      	str	r3, [sp, #4]
 80065fa:	2340      	movs	r3, #64	@ 0x40
 80065fc:	9300      	str	r3, [sp, #0]
 80065fe:	231e      	movs	r3, #30
 8006600:	221e      	movs	r2, #30
 8006602:	f7fd fe7f 	bl	8004304 <drawImage>
						break;
 8006606:	46c0      	nop			@ (mov r8, r8)
					}
					break;
 8006608:	e181      	b.n	800690e <AnimateCharacter+0x4a2>
		}

	case 1:
		if(walkingYes>0)
 800660a:	230f      	movs	r3, #15
 800660c:	18fb      	adds	r3, r7, r3
 800660e:	781b      	ldrb	r3, [r3, #0]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d06e      	beq.n	80066f2 <AnimateCharacter+0x286>
		{
			frameCount = 6;
 8006614:	4b83      	ldr	r3, [pc, #524]	@ (8006824 <AnimateCharacter+0x3b8>)
 8006616:	2206      	movs	r2, #6
 8006618:	601a      	str	r2, [r3, #0]
			switch(currentFrame)
 800661a:	4b83      	ldr	r3, [pc, #524]	@ (8006828 <AnimateCharacter+0x3bc>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	2b06      	cmp	r3, #6
 8006620:	d900      	bls.n	8006624 <AnimateCharacter+0x1b8>
 8006622:	e08d      	b.n	8006740 <AnimateCharacter+0x2d4>
 8006624:	009a      	lsls	r2, r3, #2
 8006626:	4b8e      	ldr	r3, [pc, #568]	@ (8006860 <AnimateCharacter+0x3f4>)
 8006628:	18d3      	adds	r3, r2, r3
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	469f      	mov	pc, r3
			{
			case 0:
				drawImage(imgYoungWalking0, palette, 30, 30, 64, 64, 312);
 800662e:	6879      	ldr	r1, [r7, #4]
 8006630:	488c      	ldr	r0, [pc, #560]	@ (8006864 <AnimateCharacter+0x3f8>)
 8006632:	239c      	movs	r3, #156	@ 0x9c
 8006634:	005b      	lsls	r3, r3, #1
 8006636:	9302      	str	r3, [sp, #8]
 8006638:	2340      	movs	r3, #64	@ 0x40
 800663a:	9301      	str	r3, [sp, #4]
 800663c:	2340      	movs	r3, #64	@ 0x40
 800663e:	9300      	str	r3, [sp, #0]
 8006640:	231e      	movs	r3, #30
 8006642:	221e      	movs	r2, #30
 8006644:	f7fd fe5e 	bl	8004304 <drawImage>
				break;
 8006648:	e07a      	b.n	8006740 <AnimateCharacter+0x2d4>
			case 1:
				drawImage(imgYoungWalking1, palette, 30, 30, 64, 64, 314);
 800664a:	6879      	ldr	r1, [r7, #4]
 800664c:	4886      	ldr	r0, [pc, #536]	@ (8006868 <AnimateCharacter+0x3fc>)
 800664e:	239d      	movs	r3, #157	@ 0x9d
 8006650:	005b      	lsls	r3, r3, #1
 8006652:	9302      	str	r3, [sp, #8]
 8006654:	2340      	movs	r3, #64	@ 0x40
 8006656:	9301      	str	r3, [sp, #4]
 8006658:	2340      	movs	r3, #64	@ 0x40
 800665a:	9300      	str	r3, [sp, #0]
 800665c:	231e      	movs	r3, #30
 800665e:	221e      	movs	r2, #30
 8006660:	f7fd fe50 	bl	8004304 <drawImage>
				break;
 8006664:	e06c      	b.n	8006740 <AnimateCharacter+0x2d4>
			case 2:
				drawImage(imgYoungWalking2, palette, 30, 30, 64, 64, 322);
 8006666:	6879      	ldr	r1, [r7, #4]
 8006668:	4880      	ldr	r0, [pc, #512]	@ (800686c <AnimateCharacter+0x400>)
 800666a:	23a1      	movs	r3, #161	@ 0xa1
 800666c:	005b      	lsls	r3, r3, #1
 800666e:	9302      	str	r3, [sp, #8]
 8006670:	2340      	movs	r3, #64	@ 0x40
 8006672:	9301      	str	r3, [sp, #4]
 8006674:	2340      	movs	r3, #64	@ 0x40
 8006676:	9300      	str	r3, [sp, #0]
 8006678:	231e      	movs	r3, #30
 800667a:	221e      	movs	r2, #30
 800667c:	f7fd fe42 	bl	8004304 <drawImage>
				break;
 8006680:	e05e      	b.n	8006740 <AnimateCharacter+0x2d4>
			case 3:
				drawImage(imgYoungWalking3, palette, 30, 30, 64, 64, 323);
 8006682:	6879      	ldr	r1, [r7, #4]
 8006684:	487a      	ldr	r0, [pc, #488]	@ (8006870 <AnimateCharacter+0x404>)
 8006686:	2344      	movs	r3, #68	@ 0x44
 8006688:	33ff      	adds	r3, #255	@ 0xff
 800668a:	9302      	str	r3, [sp, #8]
 800668c:	2340      	movs	r3, #64	@ 0x40
 800668e:	9301      	str	r3, [sp, #4]
 8006690:	2340      	movs	r3, #64	@ 0x40
 8006692:	9300      	str	r3, [sp, #0]
 8006694:	231e      	movs	r3, #30
 8006696:	221e      	movs	r2, #30
 8006698:	f7fd fe34 	bl	8004304 <drawImage>
				break;
 800669c:	e050      	b.n	8006740 <AnimateCharacter+0x2d4>
			case 4:
				drawImage(imgYoungWalking4, palette, 30, 30, 64, 64, 322);
 800669e:	6879      	ldr	r1, [r7, #4]
 80066a0:	4874      	ldr	r0, [pc, #464]	@ (8006874 <AnimateCharacter+0x408>)
 80066a2:	23a1      	movs	r3, #161	@ 0xa1
 80066a4:	005b      	lsls	r3, r3, #1
 80066a6:	9302      	str	r3, [sp, #8]
 80066a8:	2340      	movs	r3, #64	@ 0x40
 80066aa:	9301      	str	r3, [sp, #4]
 80066ac:	2340      	movs	r3, #64	@ 0x40
 80066ae:	9300      	str	r3, [sp, #0]
 80066b0:	231e      	movs	r3, #30
 80066b2:	221e      	movs	r2, #30
 80066b4:	f7fd fe26 	bl	8004304 <drawImage>
				break;
 80066b8:	e042      	b.n	8006740 <AnimateCharacter+0x2d4>
			case 5:
				drawImage(imgYoungWalking5, palette, 30, 30, 64, 64, 321);
 80066ba:	6879      	ldr	r1, [r7, #4]
 80066bc:	486e      	ldr	r0, [pc, #440]	@ (8006878 <AnimateCharacter+0x40c>)
 80066be:	2342      	movs	r3, #66	@ 0x42
 80066c0:	33ff      	adds	r3, #255	@ 0xff
 80066c2:	9302      	str	r3, [sp, #8]
 80066c4:	2340      	movs	r3, #64	@ 0x40
 80066c6:	9301      	str	r3, [sp, #4]
 80066c8:	2340      	movs	r3, #64	@ 0x40
 80066ca:	9300      	str	r3, [sp, #0]
 80066cc:	231e      	movs	r3, #30
 80066ce:	221e      	movs	r2, #30
 80066d0:	f7fd fe18 	bl	8004304 <drawImage>
				break;
 80066d4:	e034      	b.n	8006740 <AnimateCharacter+0x2d4>
			case 6:
				drawImage(imgYoungWalking6, palette, 30, 30, 64, 64, 313);
 80066d6:	6879      	ldr	r1, [r7, #4]
 80066d8:	4868      	ldr	r0, [pc, #416]	@ (800687c <AnimateCharacter+0x410>)
 80066da:	233a      	movs	r3, #58	@ 0x3a
 80066dc:	33ff      	adds	r3, #255	@ 0xff
 80066de:	9302      	str	r3, [sp, #8]
 80066e0:	2340      	movs	r3, #64	@ 0x40
 80066e2:	9301      	str	r3, [sp, #4]
 80066e4:	2340      	movs	r3, #64	@ 0x40
 80066e6:	9300      	str	r3, [sp, #0]
 80066e8:	231e      	movs	r3, #30
 80066ea:	221e      	movs	r2, #30
 80066ec:	f7fd fe0a 	bl	8004304 <drawImage>
				break;
 80066f0:	e026      	b.n	8006740 <AnimateCharacter+0x2d4>
			}
		}
		else
		{
			frameCount=1;
 80066f2:	4b4c      	ldr	r3, [pc, #304]	@ (8006824 <AnimateCharacter+0x3b8>)
 80066f4:	2201      	movs	r2, #1
 80066f6:	601a      	str	r2, [r3, #0]
			switch(currentFrame)
 80066f8:	4b4b      	ldr	r3, [pc, #300]	@ (8006828 <AnimateCharacter+0x3bc>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d002      	beq.n	8006706 <AnimateCharacter+0x29a>
 8006700:	2b01      	cmp	r3, #1
 8006702:	d00e      	beq.n	8006722 <AnimateCharacter+0x2b6>
				break;
			case 1:
				drawImage(imgSitting1,palette,30,30,64,64,305);
				break;
			}
			break;
 8006704:	e106      	b.n	8006914 <AnimateCharacter+0x4a8>
				drawImage(imgSitting0, palette, 30,30,64,64,307);
 8006706:	6879      	ldr	r1, [r7, #4]
 8006708:	485d      	ldr	r0, [pc, #372]	@ (8006880 <AnimateCharacter+0x414>)
 800670a:	2334      	movs	r3, #52	@ 0x34
 800670c:	33ff      	adds	r3, #255	@ 0xff
 800670e:	9302      	str	r3, [sp, #8]
 8006710:	2340      	movs	r3, #64	@ 0x40
 8006712:	9301      	str	r3, [sp, #4]
 8006714:	2340      	movs	r3, #64	@ 0x40
 8006716:	9300      	str	r3, [sp, #0]
 8006718:	231e      	movs	r3, #30
 800671a:	221e      	movs	r2, #30
 800671c:	f7fd fdf2 	bl	8004304 <drawImage>
				break;
 8006720:	e00d      	b.n	800673e <AnimateCharacter+0x2d2>
				drawImage(imgSitting1,palette,30,30,64,64,305);
 8006722:	6879      	ldr	r1, [r7, #4]
 8006724:	4857      	ldr	r0, [pc, #348]	@ (8006884 <AnimateCharacter+0x418>)
 8006726:	2332      	movs	r3, #50	@ 0x32
 8006728:	33ff      	adds	r3, #255	@ 0xff
 800672a:	9302      	str	r3, [sp, #8]
 800672c:	2340      	movs	r3, #64	@ 0x40
 800672e:	9301      	str	r3, [sp, #4]
 8006730:	2340      	movs	r3, #64	@ 0x40
 8006732:	9300      	str	r3, [sp, #0]
 8006734:	231e      	movs	r3, #30
 8006736:	221e      	movs	r2, #30
 8006738:	f7fd fde4 	bl	8004304 <drawImage>
				break;
 800673c:	46c0      	nop			@ (mov r8, r8)
			break;
 800673e:	e0e9      	b.n	8006914 <AnimateCharacter+0x4a8>
		}
	case 2:
		if(walkingYes>0)
 8006740:	230f      	movs	r3, #15
 8006742:	18fb      	adds	r3, r7, r3
 8006744:	781b      	ldrb	r3, [r3, #0]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d100      	bne.n	800674c <AnimateCharacter+0x2e0>
 800674a:	e0b9      	b.n	80068c0 <AnimateCharacter+0x454>
		{
			frameCount = 6;
 800674c:	4b35      	ldr	r3, [pc, #212]	@ (8006824 <AnimateCharacter+0x3b8>)
 800674e:	2206      	movs	r2, #6
 8006750:	601a      	str	r2, [r3, #0]
			switch (currentFrame){
 8006752:	4b35      	ldr	r3, [pc, #212]	@ (8006828 <AnimateCharacter+0x3bc>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	2b06      	cmp	r3, #6
 8006758:	d900      	bls.n	800675c <AnimateCharacter+0x2f0>
 800675a:	e0da      	b.n	8006912 <AnimateCharacter+0x4a6>
 800675c:	009a      	lsls	r2, r3, #2
 800675e:	4b4a      	ldr	r3, [pc, #296]	@ (8006888 <AnimateCharacter+0x41c>)
 8006760:	18d3      	adds	r3, r2, r3
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	469f      	mov	pc, r3
			case 0:
				drawImage(imgAdultWalking0, palette, 20, 30, 80, 80, 568);
 8006766:	6879      	ldr	r1, [r7, #4]
 8006768:	4848      	ldr	r0, [pc, #288]	@ (800688c <AnimateCharacter+0x420>)
 800676a:	238e      	movs	r3, #142	@ 0x8e
 800676c:	009b      	lsls	r3, r3, #2
 800676e:	9302      	str	r3, [sp, #8]
 8006770:	2350      	movs	r3, #80	@ 0x50
 8006772:	9301      	str	r3, [sp, #4]
 8006774:	2350      	movs	r3, #80	@ 0x50
 8006776:	9300      	str	r3, [sp, #0]
 8006778:	231e      	movs	r3, #30
 800677a:	2214      	movs	r2, #20
 800677c:	f7fd fdc2 	bl	8004304 <drawImage>
				break;
 8006780:	e0c4      	b.n	800690c <AnimateCharacter+0x4a0>
			case 1:
				drawImage(imgAdultWalking1, palette, 20, 30, 80, 80, 562);
 8006782:	6879      	ldr	r1, [r7, #4]
 8006784:	4842      	ldr	r0, [pc, #264]	@ (8006890 <AnimateCharacter+0x424>)
 8006786:	4b43      	ldr	r3, [pc, #268]	@ (8006894 <AnimateCharacter+0x428>)
 8006788:	9302      	str	r3, [sp, #8]
 800678a:	2350      	movs	r3, #80	@ 0x50
 800678c:	9301      	str	r3, [sp, #4]
 800678e:	2350      	movs	r3, #80	@ 0x50
 8006790:	9300      	str	r3, [sp, #0]
 8006792:	231e      	movs	r3, #30
 8006794:	2214      	movs	r2, #20
 8006796:	f7fd fdb5 	bl	8004304 <drawImage>
				break;
 800679a:	e0b7      	b.n	800690c <AnimateCharacter+0x4a0>
			case 2:
				drawImage(imgAdultWalking2, palette, 20, 30, 80, 80, 601);
 800679c:	6879      	ldr	r1, [r7, #4]
 800679e:	483e      	ldr	r0, [pc, #248]	@ (8006898 <AnimateCharacter+0x42c>)
 80067a0:	4b3e      	ldr	r3, [pc, #248]	@ (800689c <AnimateCharacter+0x430>)
 80067a2:	9302      	str	r3, [sp, #8]
 80067a4:	2350      	movs	r3, #80	@ 0x50
 80067a6:	9301      	str	r3, [sp, #4]
 80067a8:	2350      	movs	r3, #80	@ 0x50
 80067aa:	9300      	str	r3, [sp, #0]
 80067ac:	231e      	movs	r3, #30
 80067ae:	2214      	movs	r2, #20
 80067b0:	f7fd fda8 	bl	8004304 <drawImage>
				break;
 80067b4:	e0aa      	b.n	800690c <AnimateCharacter+0x4a0>
			case 3:
				drawImage(imgAdultWalking3, palette, 20, 30, 80, 80, 585);
 80067b6:	6879      	ldr	r1, [r7, #4]
 80067b8:	4839      	ldr	r0, [pc, #228]	@ (80068a0 <AnimateCharacter+0x434>)
 80067ba:	4b3a      	ldr	r3, [pc, #232]	@ (80068a4 <AnimateCharacter+0x438>)
 80067bc:	9302      	str	r3, [sp, #8]
 80067be:	2350      	movs	r3, #80	@ 0x50
 80067c0:	9301      	str	r3, [sp, #4]
 80067c2:	2350      	movs	r3, #80	@ 0x50
 80067c4:	9300      	str	r3, [sp, #0]
 80067c6:	231e      	movs	r3, #30
 80067c8:	2214      	movs	r2, #20
 80067ca:	f7fd fd9b 	bl	8004304 <drawImage>
				break;
 80067ce:	e09d      	b.n	800690c <AnimateCharacter+0x4a0>
			case 4:
				drawImage(imgAdultWalking4, palette, 20, 30, 80, 80, 566);
 80067d0:	6879      	ldr	r1, [r7, #4]
 80067d2:	4835      	ldr	r0, [pc, #212]	@ (80068a8 <AnimateCharacter+0x43c>)
 80067d4:	4b35      	ldr	r3, [pc, #212]	@ (80068ac <AnimateCharacter+0x440>)
 80067d6:	9302      	str	r3, [sp, #8]
 80067d8:	2350      	movs	r3, #80	@ 0x50
 80067da:	9301      	str	r3, [sp, #4]
 80067dc:	2350      	movs	r3, #80	@ 0x50
 80067de:	9300      	str	r3, [sp, #0]
 80067e0:	231e      	movs	r3, #30
 80067e2:	2214      	movs	r2, #20
 80067e4:	f7fd fd8e 	bl	8004304 <drawImage>
				break;
 80067e8:	e090      	b.n	800690c <AnimateCharacter+0x4a0>
			case 5:
				drawImage(imgAdultWalking5, palette, 20, 30, 80, 80, 581);
 80067ea:	6879      	ldr	r1, [r7, #4]
 80067ec:	4830      	ldr	r0, [pc, #192]	@ (80068b0 <AnimateCharacter+0x444>)
 80067ee:	4b31      	ldr	r3, [pc, #196]	@ (80068b4 <AnimateCharacter+0x448>)
 80067f0:	9302      	str	r3, [sp, #8]
 80067f2:	2350      	movs	r3, #80	@ 0x50
 80067f4:	9301      	str	r3, [sp, #4]
 80067f6:	2350      	movs	r3, #80	@ 0x50
 80067f8:	9300      	str	r3, [sp, #0]
 80067fa:	231e      	movs	r3, #30
 80067fc:	2214      	movs	r2, #20
 80067fe:	f7fd fd81 	bl	8004304 <drawImage>
				break;
 8006802:	e083      	b.n	800690c <AnimateCharacter+0x4a0>
			case 6:
				drawImage(imgAdultWalking6, palette, 20, 30, 80, 80, 563);
 8006804:	6879      	ldr	r1, [r7, #4]
 8006806:	482c      	ldr	r0, [pc, #176]	@ (80068b8 <AnimateCharacter+0x44c>)
 8006808:	4b2c      	ldr	r3, [pc, #176]	@ (80068bc <AnimateCharacter+0x450>)
 800680a:	9302      	str	r3, [sp, #8]
 800680c:	2350      	movs	r3, #80	@ 0x50
 800680e:	9301      	str	r3, [sp, #4]
 8006810:	2350      	movs	r3, #80	@ 0x50
 8006812:	9300      	str	r3, [sp, #0]
 8006814:	231e      	movs	r3, #30
 8006816:	2214      	movs	r2, #20
 8006818:	f7fd fd74 	bl	8004304 <drawImage>
				break;
 800681c:	e076      	b.n	800690c <AnimateCharacter+0x4a0>
 800681e:	46c0      	nop			@ (mov r8, r8)
 8006820:	20000298 	.word	0x20000298
 8006824:	20000294 	.word	0x20000294
 8006828:	20000290 	.word	0x20000290
 800682c:	0801bf50 	.word	0x0801bf50
 8006830:	08013030 	.word	0x08013030
 8006834:	080133b4 	.word	0x080133b4
 8006838:	08013704 	.word	0x08013704
 800683c:	08013a18 	.word	0x08013a18
 8006840:	08013da4 	.word	0x08013da4
 8006844:	08014168 	.word	0x08014168
 8006848:	0801bf68 	.word	0x0801bf68
 800684c:	08011ed0 	.word	0x08011ed0
 8006850:	08012258 	.word	0x08012258
 8006854:	080125e4 	.word	0x080125e4
 8006858:	08012958 	.word	0x08012958
 800685c:	08012cbc 	.word	0x08012cbc
 8006860:	0801bf7c 	.word	0x0801bf7c
 8006864:	080144f0 	.word	0x080144f0
 8006868:	080149d0 	.word	0x080149d0
 800686c:	08014eb8 	.word	0x08014eb8
 8006870:	080153c0 	.word	0x080153c0
 8006874:	080158cc 	.word	0x080158cc
 8006878:	08015dd4 	.word	0x08015dd4
 800687c:	080162d8 	.word	0x080162d8
 8006880:	080167bc 	.word	0x080167bc
 8006884:	08016c88 	.word	0x08016c88
 8006888:	0801bf98 	.word	0x0801bf98
 800688c:	0801804c 	.word	0x0801804c
 8006890:	0801892c 	.word	0x0801892c
 8006894:	00000232 	.word	0x00000232
 8006898:	080191f4 	.word	0x080191f4
 800689c:	00000259 	.word	0x00000259
 80068a0:	08019b58 	.word	0x08019b58
 80068a4:	00000249 	.word	0x00000249
 80068a8:	0801a47c 	.word	0x0801a47c
 80068ac:	00000236 	.word	0x00000236
 80068b0:	0801ad54 	.word	0x0801ad54
 80068b4:	00000245 	.word	0x00000245
 80068b8:	0801b668 	.word	0x0801b668
 80068bc:	00000233 	.word	0x00000233
			}
		}
		else{
		frameCount=1;
 80068c0:	4b1d      	ldr	r3, [pc, #116]	@ (8006938 <AnimateCharacter+0x4cc>)
 80068c2:	2201      	movs	r2, #1
 80068c4:	601a      	str	r2, [r3, #0]
		switch(currentFrame)
 80068c6:	4b1d      	ldr	r3, [pc, #116]	@ (800693c <AnimateCharacter+0x4d0>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d002      	beq.n	80068d4 <AnimateCharacter+0x468>
 80068ce:	2b01      	cmp	r3, #1
 80068d0:	d00e      	beq.n	80068f0 <AnimateCharacter+0x484>
			drawImage(imgAdultSitting1, palette, 20,30,80,80,479);
			break;
		}

		}
	break;
 80068d2:	e01e      	b.n	8006912 <AnimateCharacter+0x4a6>
			drawImage(imgAdultSitting0, palette, 20,30,80,80,481);
 80068d4:	6879      	ldr	r1, [r7, #4]
 80068d6:	481a      	ldr	r0, [pc, #104]	@ (8006940 <AnimateCharacter+0x4d4>)
 80068d8:	23e2      	movs	r3, #226	@ 0xe2
 80068da:	33ff      	adds	r3, #255	@ 0xff
 80068dc:	9302      	str	r3, [sp, #8]
 80068de:	2350      	movs	r3, #80	@ 0x50
 80068e0:	9301      	str	r3, [sp, #4]
 80068e2:	2350      	movs	r3, #80	@ 0x50
 80068e4:	9300      	str	r3, [sp, #0]
 80068e6:	231e      	movs	r3, #30
 80068e8:	2214      	movs	r2, #20
 80068ea:	f7fd fd0b 	bl	8004304 <drawImage>
			break;
 80068ee:	e00d      	b.n	800690c <AnimateCharacter+0x4a0>
			drawImage(imgAdultSitting1, palette, 20,30,80,80,479);
 80068f0:	6879      	ldr	r1, [r7, #4]
 80068f2:	4814      	ldr	r0, [pc, #80]	@ (8006944 <AnimateCharacter+0x4d8>)
 80068f4:	23e0      	movs	r3, #224	@ 0xe0
 80068f6:	33ff      	adds	r3, #255	@ 0xff
 80068f8:	9302      	str	r3, [sp, #8]
 80068fa:	2350      	movs	r3, #80	@ 0x50
 80068fc:	9301      	str	r3, [sp, #4]
 80068fe:	2350      	movs	r3, #80	@ 0x50
 8006900:	9300      	str	r3, [sp, #0]
 8006902:	231e      	movs	r3, #30
 8006904:	2214      	movs	r2, #20
 8006906:	f7fd fcfd 	bl	8004304 <drawImage>
			break;
 800690a:	46c0      	nop			@ (mov r8, r8)
	break;
 800690c:	e001      	b.n	8006912 <AnimateCharacter+0x4a6>
					break;
 800690e:	46c0      	nop			@ (mov r8, r8)
 8006910:	e000      	b.n	8006914 <AnimateCharacter+0x4a8>
	break;
 8006912:	46c0      	nop			@ (mov r8, r8)
	}
	currentFrame++;
 8006914:	4b09      	ldr	r3, [pc, #36]	@ (800693c <AnimateCharacter+0x4d0>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	1c5a      	adds	r2, r3, #1
 800691a:	4b08      	ldr	r3, [pc, #32]	@ (800693c <AnimateCharacter+0x4d0>)
 800691c:	601a      	str	r2, [r3, #0]
	if(currentFrame>frameCount)
 800691e:	4b07      	ldr	r3, [pc, #28]	@ (800693c <AnimateCharacter+0x4d0>)
 8006920:	681a      	ldr	r2, [r3, #0]
 8006922:	4b05      	ldr	r3, [pc, #20]	@ (8006938 <AnimateCharacter+0x4cc>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	429a      	cmp	r2, r3
 8006928:	d902      	bls.n	8006930 <AnimateCharacter+0x4c4>
		currentFrame = 0;
 800692a:	4b04      	ldr	r3, [pc, #16]	@ (800693c <AnimateCharacter+0x4d0>)
 800692c:	2200      	movs	r2, #0
 800692e:	601a      	str	r2, [r3, #0]
}
 8006930:	46c0      	nop			@ (mov r8, r8)
 8006932:	46bd      	mov	sp, r7
 8006934:	b005      	add	sp, #20
 8006936:	bd90      	pop	{r4, r7, pc}
 8006938:	20000294 	.word	0x20000294
 800693c:	20000290 	.word	0x20000290
 8006940:	0801714c 	.word	0x0801714c
 8006944:	080178d0 	.word	0x080178d0

08006948 <_ADXL343_ReadReg8>:
			animation[currentFrame].Size);
	return;
}

int _ADXL343_ReadReg8(unsigned char TargetRegister, unsigned char *TargetValue,
		uint8_t size) {
 8006948:	b580      	push	{r7, lr}
 800694a:	b084      	sub	sp, #16
 800694c:	af02      	add	r7, sp, #8
 800694e:	6039      	str	r1, [r7, #0]
 8006950:	0011      	movs	r1, r2
 8006952:	1dfb      	adds	r3, r7, #7
 8006954:	1c02      	adds	r2, r0, #0
 8006956:	701a      	strb	r2, [r3, #0]
 8006958:	1dbb      	adds	r3, r7, #6
 800695a:	1c0a      	adds	r2, r1, #0
 800695c:	701a      	strb	r2, [r3, #0]
	if (!HAL_I2C_Master_Transmit(&hi2c1, 0x14 << 1, &TargetRegister, 1, 1000)
 800695e:	1dfa      	adds	r2, r7, #7
 8006960:	4811      	ldr	r0, [pc, #68]	@ (80069a8 <_ADXL343_ReadReg8+0x60>)
 8006962:	23fa      	movs	r3, #250	@ 0xfa
 8006964:	009b      	lsls	r3, r3, #2
 8006966:	9300      	str	r3, [sp, #0]
 8006968:	2301      	movs	r3, #1
 800696a:	2128      	movs	r1, #40	@ 0x28
 800696c:	f003 f852 	bl	8009a14 <HAL_I2C_Master_Transmit>
 8006970:	1e03      	subs	r3, r0, #0
 8006972:	d002      	beq.n	800697a <_ADXL343_ReadReg8+0x32>
			== HAL_OK)
		return -1;
 8006974:	2301      	movs	r3, #1
 8006976:	425b      	negs	r3, r3
 8006978:	e011      	b.n	800699e <_ADXL343_ReadReg8+0x56>

	if (!HAL_I2C_Master_Receive(&hi2c1, 0x14 << 1, TargetValue, size, 1000)
 800697a:	1dbb      	adds	r3, r7, #6
 800697c:	781b      	ldrb	r3, [r3, #0]
 800697e:	b299      	uxth	r1, r3
 8006980:	683a      	ldr	r2, [r7, #0]
 8006982:	4809      	ldr	r0, [pc, #36]	@ (80069a8 <_ADXL343_ReadReg8+0x60>)
 8006984:	23fa      	movs	r3, #250	@ 0xfa
 8006986:	009b      	lsls	r3, r3, #2
 8006988:	9300      	str	r3, [sp, #0]
 800698a:	000b      	movs	r3, r1
 800698c:	2128      	movs	r1, #40	@ 0x28
 800698e:	f003 f96b 	bl	8009c68 <HAL_I2C_Master_Receive>
 8006992:	1e03      	subs	r3, r0, #0
 8006994:	d002      	beq.n	800699c <_ADXL343_ReadReg8+0x54>
			== HAL_OK)
		return -2;
 8006996:	2302      	movs	r3, #2
 8006998:	425b      	negs	r3, r3
 800699a:	e000      	b.n	800699e <_ADXL343_ReadReg8+0x56>

	return 0;
 800699c:	2300      	movs	r3, #0
}
 800699e:	0018      	movs	r0, r3
 80069a0:	46bd      	mov	sp, r7
 80069a2:	b002      	add	sp, #8
 80069a4:	bd80      	pop	{r7, pc}
 80069a6:	46c0      	nop			@ (mov r8, r8)
 80069a8:	2000127c 	.word	0x2000127c

080069ac <_ADXL343_WriteReg8>:

int _ADXL343_WriteReg8(unsigned char TargetRegister, unsigned char TargetValue) {
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b086      	sub	sp, #24
 80069b0:	af02      	add	r7, sp, #8
 80069b2:	0002      	movs	r2, r0
 80069b4:	1dfb      	adds	r3, r7, #7
 80069b6:	701a      	strb	r2, [r3, #0]
 80069b8:	1dbb      	adds	r3, r7, #6
 80069ba:	1c0a      	adds	r2, r1, #0
 80069bc:	701a      	strb	r2, [r3, #0]
	unsigned char buff[2];
	buff[0] = TargetRegister;
 80069be:	210c      	movs	r1, #12
 80069c0:	187b      	adds	r3, r7, r1
 80069c2:	1dfa      	adds	r2, r7, #7
 80069c4:	7812      	ldrb	r2, [r2, #0]
 80069c6:	701a      	strb	r2, [r3, #0]
	buff[1] = TargetValue;
 80069c8:	187b      	adds	r3, r7, r1
 80069ca:	1dba      	adds	r2, r7, #6
 80069cc:	7812      	ldrb	r2, [r2, #0]
 80069ce:	705a      	strb	r2, [r3, #1]

	if (HAL_I2C_Master_Transmit(&hi2c1, 0x14 << 1, buff, 2, 1000) == HAL_OK)
 80069d0:	187a      	adds	r2, r7, r1
 80069d2:	4809      	ldr	r0, [pc, #36]	@ (80069f8 <_ADXL343_WriteReg8+0x4c>)
 80069d4:	23fa      	movs	r3, #250	@ 0xfa
 80069d6:	009b      	lsls	r3, r3, #2
 80069d8:	9300      	str	r3, [sp, #0]
 80069da:	2302      	movs	r3, #2
 80069dc:	2128      	movs	r1, #40	@ 0x28
 80069de:	f003 f819 	bl	8009a14 <HAL_I2C_Master_Transmit>
 80069e2:	1e03      	subs	r3, r0, #0
 80069e4:	d102      	bne.n	80069ec <_ADXL343_WriteReg8+0x40>
		return -1;
 80069e6:	2301      	movs	r3, #1
 80069e8:	425b      	negs	r3, r3
 80069ea:	e000      	b.n	80069ee <_ADXL343_WriteReg8+0x42>

	return 0;
 80069ec:	2300      	movs	r3, #0
}
 80069ee:	0018      	movs	r0, r3
 80069f0:	46bd      	mov	sp, r7
 80069f2:	b004      	add	sp, #16
 80069f4:	bd80      	pop	{r7, pc}
 80069f6:	46c0      	nop			@ (mov r8, r8)
 80069f8:	2000127c 	.word	0x2000127c

080069fc <SendData>:
void SendData() {
 80069fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069fe:	46c6      	mov	lr, r8
 8006a00:	b500      	push	{lr}
 8006a02:	b088      	sub	sp, #32
 8006a04:	af06      	add	r7, sp, #24
	unsigned int posIndex;
	unsigned int clrIndex;
	sprintf(sendBuffer,
 8006a06:	4a59      	ldr	r2, [pc, #356]	@ (8006b6c <SendData+0x170>)
 8006a08:	238c      	movs	r3, #140	@ 0x8c
 8006a0a:	005b      	lsls	r3, r3, #1
 8006a0c:	58d4      	ldr	r4, [r2, r3]
 8006a0e:	4a57      	ldr	r2, [pc, #348]	@ (8006b6c <SendData+0x170>)
 8006a10:	238e      	movs	r3, #142	@ 0x8e
 8006a12:	005b      	lsls	r3, r3, #1
 8006a14:	58d5      	ldr	r5, [r2, r3]
 8006a16:	4a55      	ldr	r2, [pc, #340]	@ (8006b6c <SendData+0x170>)
 8006a18:	2390      	movs	r3, #144	@ 0x90
 8006a1a:	005b      	lsls	r3, r3, #1
 8006a1c:	58d3      	ldr	r3, [r2, r3]
 8006a1e:	4698      	mov	r8, r3
			"(lifeSteps:%d),(weeklySteps:%d),(dailySteps:%d),(uid:%s),(friendship:%d),(password:password),(difficulty:%d),(evolution:%d) \n\r",
			game.allSteps, game.weeklySteps, game.stepsToday, game.uid,
			game.mood, game.dailyGoal, game.evo);
 8006a20:	4a52      	ldr	r2, [pc, #328]	@ (8006b6c <SendData+0x170>)
 8006a22:	7c52      	ldrb	r2, [r2, #17]
	sprintf(sendBuffer,
 8006a24:	0016      	movs	r6, r2
 8006a26:	4951      	ldr	r1, [pc, #324]	@ (8006b6c <SendData+0x170>)
 8006a28:	2292      	movs	r2, #146	@ 0x92
 8006a2a:	0052      	lsls	r2, r2, #1
 8006a2c:	588a      	ldr	r2, [r1, r2]
			game.mood, game.dailyGoal, game.evo);
 8006a2e:	494f      	ldr	r1, [pc, #316]	@ (8006b6c <SendData+0x170>)
 8006a30:	7c09      	ldrb	r1, [r1, #16]
	sprintf(sendBuffer,
 8006a32:	468c      	mov	ip, r1
 8006a34:	494e      	ldr	r1, [pc, #312]	@ (8006b70 <SendData+0x174>)
 8006a36:	484f      	ldr	r0, [pc, #316]	@ (8006b74 <SendData+0x178>)
 8006a38:	4663      	mov	r3, ip
 8006a3a:	9304      	str	r3, [sp, #16]
 8006a3c:	9203      	str	r2, [sp, #12]
 8006a3e:	9602      	str	r6, [sp, #8]
 8006a40:	4a4d      	ldr	r2, [pc, #308]	@ (8006b78 <SendData+0x17c>)
 8006a42:	9201      	str	r2, [sp, #4]
 8006a44:	4643      	mov	r3, r8
 8006a46:	9300      	str	r3, [sp, #0]
 8006a48:	002b      	movs	r3, r5
 8006a4a:	0022      	movs	r2, r4
 8006a4c:	f008 f9f0 	bl	800ee30 <siprintf>
	HAL_UART_Transmit(&huart2, sendBuffer, strlen(sendBuffer), 200);
 8006a50:	4b48      	ldr	r3, [pc, #288]	@ (8006b74 <SendData+0x178>)
 8006a52:	0018      	movs	r0, r3
 8006a54:	f7f9 fb62 	bl	800011c <strlen>
 8006a58:	0003      	movs	r3, r0
 8006a5a:	b29a      	uxth	r2, r3
 8006a5c:	4945      	ldr	r1, [pc, #276]	@ (8006b74 <SendData+0x178>)
 8006a5e:	4847      	ldr	r0, [pc, #284]	@ (8006b7c <SendData+0x180>)
 8006a60:	23c8      	movs	r3, #200	@ 0xc8
 8006a62:	f006 f989 	bl	800cd78 <HAL_UART_Transmit>
	for (posIndex = 0; posIndex < game.numLocations; posIndex++) {
 8006a66:	2300      	movs	r3, #0
 8006a68:	607b      	str	r3, [r7, #4]
 8006a6a:	e072      	b.n	8006b52 <SendData+0x156>
		HAL_Delay(5);
 8006a6c:	2005      	movs	r0, #5
 8006a6e:	f002 fa87 	bl	8008f80 <HAL_Delay>
		for (clrIndex = 0; clrIndex < 400; clrIndex++)
 8006a72:	2300      	movs	r3, #0
 8006a74:	603b      	str	r3, [r7, #0]
 8006a76:	e007      	b.n	8006a88 <SendData+0x8c>
			sendBuffer[clrIndex] = 0;
 8006a78:	4a3e      	ldr	r2, [pc, #248]	@ (8006b74 <SendData+0x178>)
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	18d3      	adds	r3, r2, r3
 8006a7e:	2200      	movs	r2, #0
 8006a80:	701a      	strb	r2, [r3, #0]
		for (clrIndex = 0; clrIndex < 400; clrIndex++)
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	3301      	adds	r3, #1
 8006a86:	603b      	str	r3, [r7, #0]
 8006a88:	683a      	ldr	r2, [r7, #0]
 8006a8a:	23c8      	movs	r3, #200	@ 0xc8
 8006a8c:	005b      	lsls	r3, r3, #1
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	d3f2      	bcc.n	8006a78 <SendData+0x7c>
		sprintf(sendBuffer, "(lat:%d.%d),(lon:%d.%d),",
				((int) game.positions[posIndex].lat),
 8006a92:	4b36      	ldr	r3, [pc, #216]	@ (8006b6c <SendData+0x170>)
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	3203      	adds	r2, #3
 8006a98:	00d2      	lsls	r2, r2, #3
 8006a9a:	58d3      	ldr	r3, [r2, r3]
		sprintf(sendBuffer, "(lat:%d.%d),(lon:%d.%d),",
 8006a9c:	1c18      	adds	r0, r3, #0
 8006a9e:	f7fa fe85 	bl	80017ac <__aeabi_f2iz>
 8006aa2:	0006      	movs	r6, r0
				abs(
						(int) ((fmod((double) game.positions[posIndex].lat,
 8006aa4:	4b31      	ldr	r3, [pc, #196]	@ (8006b6c <SendData+0x170>)
 8006aa6:	687a      	ldr	r2, [r7, #4]
 8006aa8:	3203      	adds	r2, #3
 8006aaa:	00d2      	lsls	r2, r2, #3
 8006aac:	58d3      	ldr	r3, [r2, r3]
 8006aae:	1c18      	adds	r0, r3, #0
 8006ab0:	f7fc fed2 	bl	8003858 <__aeabi_f2d>
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	4b32      	ldr	r3, [pc, #200]	@ (8006b80 <SendData+0x184>)
 8006ab8:	f00a fb22 	bl	8011100 <fmod>
								(double) 1)) * 10000)),
 8006abc:	2200      	movs	r2, #0
 8006abe:	4b31      	ldr	r3, [pc, #196]	@ (8006b84 <SendData+0x188>)
 8006ac0:	f7fb ff2a 	bl	8002918 <__aeabi_dmul>
 8006ac4:	0002      	movs	r2, r0
 8006ac6:	000b      	movs	r3, r1
						(int) ((fmod((double) game.positions[posIndex].lat,
 8006ac8:	0010      	movs	r0, r2
 8006aca:	0019      	movs	r1, r3
 8006acc:	f7fc fe36 	bl	800373c <__aeabi_d2iz>
 8006ad0:	0003      	movs	r3, r0
		sprintf(sendBuffer, "(lat:%d.%d),(lon:%d.%d),",
 8006ad2:	17da      	asrs	r2, r3, #31
 8006ad4:	189c      	adds	r4, r3, r2
 8006ad6:	4054      	eors	r4, r2
				((int) game.positions[posIndex].lon),
 8006ad8:	4a24      	ldr	r2, [pc, #144]	@ (8006b6c <SendData+0x170>)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	3303      	adds	r3, #3
 8006ade:	00db      	lsls	r3, r3, #3
 8006ae0:	18d3      	adds	r3, r2, r3
 8006ae2:	3304      	adds	r3, #4
 8006ae4:	681b      	ldr	r3, [r3, #0]
		sprintf(sendBuffer, "(lat:%d.%d),(lon:%d.%d),",
 8006ae6:	1c18      	adds	r0, r3, #0
 8006ae8:	f7fa fe60 	bl	80017ac <__aeabi_f2iz>
 8006aec:	0005      	movs	r5, r0
				abs(
						(int) ((fmod((double) game.positions[posIndex].lon,
 8006aee:	4a1f      	ldr	r2, [pc, #124]	@ (8006b6c <SendData+0x170>)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	3303      	adds	r3, #3
 8006af4:	00db      	lsls	r3, r3, #3
 8006af6:	18d3      	adds	r3, r2, r3
 8006af8:	3304      	adds	r3, #4
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	1c18      	adds	r0, r3, #0
 8006afe:	f7fc feab 	bl	8003858 <__aeabi_f2d>
 8006b02:	2200      	movs	r2, #0
 8006b04:	4b1e      	ldr	r3, [pc, #120]	@ (8006b80 <SendData+0x184>)
 8006b06:	f00a fafb 	bl	8011100 <fmod>
								(double) 1)) * 10000)));
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	4b1d      	ldr	r3, [pc, #116]	@ (8006b84 <SendData+0x188>)
 8006b0e:	f7fb ff03 	bl	8002918 <__aeabi_dmul>
 8006b12:	0002      	movs	r2, r0
 8006b14:	000b      	movs	r3, r1
						(int) ((fmod((double) game.positions[posIndex].lon,
 8006b16:	0010      	movs	r0, r2
 8006b18:	0019      	movs	r1, r3
 8006b1a:	f7fc fe0f 	bl	800373c <__aeabi_d2iz>
 8006b1e:	0003      	movs	r3, r0
		sprintf(sendBuffer, "(lat:%d.%d),(lon:%d.%d),",
 8006b20:	17da      	asrs	r2, r3, #31
 8006b22:	189b      	adds	r3, r3, r2
 8006b24:	4053      	eors	r3, r2
 8006b26:	4918      	ldr	r1, [pc, #96]	@ (8006b88 <SendData+0x18c>)
 8006b28:	4812      	ldr	r0, [pc, #72]	@ (8006b74 <SendData+0x178>)
 8006b2a:	9301      	str	r3, [sp, #4]
 8006b2c:	9500      	str	r5, [sp, #0]
 8006b2e:	0023      	movs	r3, r4
 8006b30:	0032      	movs	r2, r6
 8006b32:	f008 f97d 	bl	800ee30 <siprintf>
		HAL_UART_Transmit(&huart2, sendBuffer, strlen(sendBuffer), 200);
 8006b36:	4b0f      	ldr	r3, [pc, #60]	@ (8006b74 <SendData+0x178>)
 8006b38:	0018      	movs	r0, r3
 8006b3a:	f7f9 faef 	bl	800011c <strlen>
 8006b3e:	0003      	movs	r3, r0
 8006b40:	b29a      	uxth	r2, r3
 8006b42:	490c      	ldr	r1, [pc, #48]	@ (8006b74 <SendData+0x178>)
 8006b44:	480d      	ldr	r0, [pc, #52]	@ (8006b7c <SendData+0x180>)
 8006b46:	23c8      	movs	r3, #200	@ 0xc8
 8006b48:	f006 f916 	bl	800cd78 <HAL_UART_Transmit>
	for (posIndex = 0; posIndex < game.numLocations; posIndex++) {
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	3301      	adds	r3, #1
 8006b50:	607b      	str	r3, [r7, #4]
 8006b52:	4b06      	ldr	r3, [pc, #24]	@ (8006b6c <SendData+0x170>)
 8006b54:	695b      	ldr	r3, [r3, #20]
 8006b56:	687a      	ldr	r2, [r7, #4]
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	d387      	bcc.n	8006a6c <SendData+0x70>

	}
}
 8006b5c:	46c0      	nop			@ (mov r8, r8)
 8006b5e:	46c0      	nop			@ (mov r8, r8)
 8006b60:	46bd      	mov	sp, r7
 8006b62:	b002      	add	sp, #8
 8006b64:	bc80      	pop	{r7}
 8006b66:	46b8      	mov	r8, r7
 8006b68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b6a:	46c0      	nop			@ (mov r8, r8)
 8006b6c:	20000298 	.word	0x20000298
 8006b70:	080116cc 	.word	0x080116cc
 8006b74:	200004c0 	.word	0x200004c0
 8006b78:	200003c4 	.word	0x200003c4
 8006b7c:	20001440 	.word	0x20001440
 8006b80:	3ff00000 	.word	0x3ff00000
 8006b84:	40c38800 	.word	0x40c38800
 8006b88:	0801174c 	.word	0x0801174c

08006b8c <ReceiveData>:
void ReceiveData() {
 8006b8c:	b5b0      	push	{r4, r5, r7, lr}
 8006b8e:	4cda      	ldr	r4, [pc, #872]	@ (8006ef8 <ReceiveData+0x36c>)
 8006b90:	44a5      	add	sp, r4
 8006b92:	af00      	add	r7, sp, #0
	int rI = 0;
 8006b94:	2300      	movs	r3, #0
 8006b96:	4ad9      	ldr	r2, [pc, #868]	@ (8006efc <ReceiveData+0x370>)
 8006b98:	18ba      	adds	r2, r7, r2
 8006b9a:	6013      	str	r3, [r2, #0]
	while (HAL_UART_Receive(&huart2, &(syncBuffer[rI]), 1, 1000) == HAL_OK) {
 8006b9c:	e197      	b.n	8006ece <ReceiveData+0x342>
		if (syncBuffer[rI] && syncBuffer[rI] == '\r') {
 8006b9e:	4ad8      	ldr	r2, [pc, #864]	@ (8006f00 <ReceiveData+0x374>)
 8006ba0:	49d6      	ldr	r1, [pc, #856]	@ (8006efc <ReceiveData+0x370>)
 8006ba2:	187b      	adds	r3, r7, r1
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	18d3      	adds	r3, r2, r3
 8006ba8:	781b      	ldrb	r3, [r3, #0]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d100      	bne.n	8006bb0 <ReceiveData+0x24>
 8006bae:	e188      	b.n	8006ec2 <ReceiveData+0x336>
 8006bb0:	4ad3      	ldr	r2, [pc, #844]	@ (8006f00 <ReceiveData+0x374>)
 8006bb2:	187b      	adds	r3, r7, r1
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	18d3      	adds	r3, r2, r3
 8006bb8:	781b      	ldrb	r3, [r3, #0]
 8006bba:	2b0d      	cmp	r3, #13
 8006bbc:	d000      	beq.n	8006bc0 <ReceiveData+0x34>
 8006bbe:	e180      	b.n	8006ec2 <ReceiveData+0x336>
			enum {
				MAX_FIELDS = 255
			};
			json_t pool[MAX_FIELDS];
			json_t const *parent = json_create(syncBuffer, pool, MAX_FIELDS);
 8006bc0:	0039      	movs	r1, r7
 8006bc2:	4bcf      	ldr	r3, [pc, #828]	@ (8006f00 <ReceiveData+0x374>)
 8006bc4:	22ff      	movs	r2, #255	@ 0xff
 8006bc6:	0018      	movs	r0, r3
 8006bc8:	f001 fc7a 	bl	80084c0 <json_create>
 8006bcc:	0003      	movs	r3, r0
 8006bce:	49cd      	ldr	r1, [pc, #820]	@ (8006f04 <ReceiveData+0x378>)
 8006bd0:	187a      	adds	r2, r7, r1
 8006bd2:	6013      	str	r3, [r2, #0]
			if (parent) {
 8006bd4:	187b      	adds	r3, r7, r1
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d100      	bne.n	8006bde <ReceiveData+0x52>
 8006bdc:	e152      	b.n	8006e84 <ReceiveData+0x2f8>
				int locI = 0;
 8006bde:	2300      	movs	r3, #0
 8006be0:	4ac9      	ldr	r2, [pc, #804]	@ (8006f08 <ReceiveData+0x37c>)
 8006be2:	18ba      	adds	r2, r7, r2
 8006be4:	6013      	str	r3, [r2, #0]
				struct latLon tempLoc;
				char const *uidRxStr = json_getPropertyValue(parent, "uid");
 8006be6:	4ac9      	ldr	r2, [pc, #804]	@ (8006f0c <ReceiveData+0x380>)
 8006be8:	187b      	adds	r3, r7, r1
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	0011      	movs	r1, r2
 8006bee:	0018      	movs	r0, r3
 8006bf0:	f001 fc02 	bl	80083f8 <json_getPropertyValue>
 8006bf4:	0003      	movs	r3, r0
 8006bf6:	4ac6      	ldr	r2, [pc, #792]	@ (8006f10 <ReceiveData+0x384>)
 8006bf8:	18ba      	adds	r2, r7, r2
 8006bfa:	6013      	str	r3, [r2, #0]
				//HAL_UART_Transmit(&huart2, json_getPropertyValue(parent, "uid"), strlen(json_getPropertyValue(parent, "uid")), 1000);
				for (int strI = 0; strI < strlen(uidRxStr); strI++)
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	4ac5      	ldr	r2, [pc, #788]	@ (8006f14 <ReceiveData+0x388>)
 8006c00:	18ba      	adds	r2, r7, r2
 8006c02:	6013      	str	r3, [r2, #0]
 8006c04:	e015      	b.n	8006c32 <ReceiveData+0xa6>
					game.uid[strI] = uidRxStr[strI];
 8006c06:	4cc3      	ldr	r4, [pc, #780]	@ (8006f14 <ReceiveData+0x388>)
 8006c08:	193b      	adds	r3, r7, r4
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4ac0      	ldr	r2, [pc, #768]	@ (8006f10 <ReceiveData+0x384>)
 8006c0e:	18ba      	adds	r2, r7, r2
 8006c10:	6812      	ldr	r2, [r2, #0]
 8006c12:	18d3      	adds	r3, r2, r3
 8006c14:	7818      	ldrb	r0, [r3, #0]
 8006c16:	49c0      	ldr	r1, [pc, #768]	@ (8006f18 <ReceiveData+0x38c>)
 8006c18:	2396      	movs	r3, #150	@ 0x96
 8006c1a:	005b      	lsls	r3, r3, #1
 8006c1c:	193a      	adds	r2, r7, r4
 8006c1e:	6812      	ldr	r2, [r2, #0]
 8006c20:	188a      	adds	r2, r1, r2
 8006c22:	18d3      	adds	r3, r2, r3
 8006c24:	1c02      	adds	r2, r0, #0
 8006c26:	701a      	strb	r2, [r3, #0]
				for (int strI = 0; strI < strlen(uidRxStr); strI++)
 8006c28:	193b      	adds	r3, r7, r4
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	3301      	adds	r3, #1
 8006c2e:	193a      	adds	r2, r7, r4
 8006c30:	6013      	str	r3, [r2, #0]
 8006c32:	4bb7      	ldr	r3, [pc, #732]	@ (8006f10 <ReceiveData+0x384>)
 8006c34:	18fb      	adds	r3, r7, r3
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	0018      	movs	r0, r3
 8006c3a:	f7f9 fa6f 	bl	800011c <strlen>
 8006c3e:	0002      	movs	r2, r0
 8006c40:	4bb4      	ldr	r3, [pc, #720]	@ (8006f14 <ReceiveData+0x388>)
 8006c42:	18fb      	adds	r3, r7, r3
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d8dd      	bhi.n	8006c06 <ReceiveData+0x7a>
				game.allSteps = (unsigned int) json_getInteger(
 8006c4a:	4ab4      	ldr	r2, [pc, #720]	@ (8006f1c <ReceiveData+0x390>)
 8006c4c:	4cad      	ldr	r4, [pc, #692]	@ (8006f04 <ReceiveData+0x378>)
 8006c4e:	193b      	adds	r3, r7, r4
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	0011      	movs	r1, r2
 8006c54:	0018      	movs	r0, r3
 8006c56:	f001 fbac 	bl	80083b2 <json_getProperty>
 8006c5a:	0003      	movs	r3, r0
 8006c5c:	0018      	movs	r0, r3
 8006c5e:	f7fd ff19 	bl	8004a94 <json_getInteger>
 8006c62:	0002      	movs	r2, r0
 8006c64:	000b      	movs	r3, r1
 8006c66:	0011      	movs	r1, r2
 8006c68:	4aab      	ldr	r2, [pc, #684]	@ (8006f18 <ReceiveData+0x38c>)
 8006c6a:	238c      	movs	r3, #140	@ 0x8c
 8006c6c:	005b      	lsls	r3, r3, #1
 8006c6e:	50d1      	str	r1, [r2, r3]
						json_getProperty(parent, "lifeSteps"));
				game.dailyGoal = (unsigned int) json_getInteger(
 8006c70:	4aab      	ldr	r2, [pc, #684]	@ (8006f20 <ReceiveData+0x394>)
 8006c72:	193b      	adds	r3, r7, r4
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	0011      	movs	r1, r2
 8006c78:	0018      	movs	r0, r3
 8006c7a:	f001 fb9a 	bl	80083b2 <json_getProperty>
 8006c7e:	0003      	movs	r3, r0
 8006c80:	0018      	movs	r0, r3
 8006c82:	f7fd ff07 	bl	8004a94 <json_getInteger>
 8006c86:	0002      	movs	r2, r0
 8006c88:	000b      	movs	r3, r1
 8006c8a:	0011      	movs	r1, r2
 8006c8c:	4aa2      	ldr	r2, [pc, #648]	@ (8006f18 <ReceiveData+0x38c>)
 8006c8e:	2392      	movs	r3, #146	@ 0x92
 8006c90:	005b      	lsls	r3, r3, #1
 8006c92:	50d1      	str	r1, [r2, r3]
						json_getProperty(parent, "difficulty"));
				game.evo = (unsigned int) json_getInteger(
 8006c94:	4aa3      	ldr	r2, [pc, #652]	@ (8006f24 <ReceiveData+0x398>)
 8006c96:	193b      	adds	r3, r7, r4
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	0011      	movs	r1, r2
 8006c9c:	0018      	movs	r0, r3
 8006c9e:	f001 fb88 	bl	80083b2 <json_getProperty>
 8006ca2:	0003      	movs	r3, r0
 8006ca4:	0018      	movs	r0, r3
 8006ca6:	f7fd fef5 	bl	8004a94 <json_getInteger>
 8006caa:	0002      	movs	r2, r0
 8006cac:	000b      	movs	r3, r1
 8006cae:	b2d2      	uxtb	r2, r2
 8006cb0:	4b99      	ldr	r3, [pc, #612]	@ (8006f18 <ReceiveData+0x38c>)
 8006cb2:	741a      	strb	r2, [r3, #16]
						json_getProperty(parent, "evolution"));
				game.mood = (unsigned int) json_getInteger(
 8006cb4:	4a9c      	ldr	r2, [pc, #624]	@ (8006f28 <ReceiveData+0x39c>)
 8006cb6:	193b      	adds	r3, r7, r4
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	0011      	movs	r1, r2
 8006cbc:	0018      	movs	r0, r3
 8006cbe:	f001 fb78 	bl	80083b2 <json_getProperty>
 8006cc2:	0003      	movs	r3, r0
 8006cc4:	0018      	movs	r0, r3
 8006cc6:	f7fd fee5 	bl	8004a94 <json_getInteger>
 8006cca:	0002      	movs	r2, r0
 8006ccc:	000b      	movs	r3, r1
 8006cce:	b2d2      	uxtb	r2, r2
 8006cd0:	4b91      	ldr	r3, [pc, #580]	@ (8006f18 <ReceiveData+0x38c>)
 8006cd2:	745a      	strb	r2, [r3, #17]
						json_getProperty(parent, "friendship"));
				game.stepsToday = (unsigned int) json_getInteger(
 8006cd4:	4a95      	ldr	r2, [pc, #596]	@ (8006f2c <ReceiveData+0x3a0>)
 8006cd6:	193b      	adds	r3, r7, r4
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	0011      	movs	r1, r2
 8006cdc:	0018      	movs	r0, r3
 8006cde:	f001 fb68 	bl	80083b2 <json_getProperty>
 8006ce2:	0003      	movs	r3, r0
 8006ce4:	0018      	movs	r0, r3
 8006ce6:	f7fd fed5 	bl	8004a94 <json_getInteger>
 8006cea:	0002      	movs	r2, r0
 8006cec:	000b      	movs	r3, r1
 8006cee:	0011      	movs	r1, r2
 8006cf0:	4a89      	ldr	r2, [pc, #548]	@ (8006f18 <ReceiveData+0x38c>)
 8006cf2:	2390      	movs	r3, #144	@ 0x90
 8006cf4:	005b      	lsls	r3, r3, #1
 8006cf6:	50d1      	str	r1, [r2, r3]
						json_getProperty(parent, "dailySteps"));
				game.weeklySteps = (unsigned int) json_getInteger(
 8006cf8:	4a8d      	ldr	r2, [pc, #564]	@ (8006f30 <ReceiveData+0x3a4>)
 8006cfa:	193b      	adds	r3, r7, r4
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	0011      	movs	r1, r2
 8006d00:	0018      	movs	r0, r3
 8006d02:	f001 fb56 	bl	80083b2 <json_getProperty>
 8006d06:	0003      	movs	r3, r0
 8006d08:	0018      	movs	r0, r3
 8006d0a:	f7fd fec3 	bl	8004a94 <json_getInteger>
 8006d0e:	0002      	movs	r2, r0
 8006d10:	000b      	movs	r3, r1
 8006d12:	0011      	movs	r1, r2
 8006d14:	4a80      	ldr	r2, [pc, #512]	@ (8006f18 <ReceiveData+0x38c>)
 8006d16:	238e      	movs	r3, #142	@ 0x8e
 8006d18:	005b      	lsls	r3, r3, #1
 8006d1a:	50d1      	str	r1, [r2, r3]
						json_getProperty(parent, "weeklySteps"));
				json_t const *location;
				json_t const *locations = json_getProperty(parent, "locations");
 8006d1c:	4a85      	ldr	r2, [pc, #532]	@ (8006f34 <ReceiveData+0x3a8>)
 8006d1e:	193b      	adds	r3, r7, r4
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	0011      	movs	r1, r2
 8006d24:	0018      	movs	r0, r3
 8006d26:	f001 fb44 	bl	80083b2 <json_getProperty>
 8006d2a:	0003      	movs	r3, r0
 8006d2c:	4a82      	ldr	r2, [pc, #520]	@ (8006f38 <ReceiveData+0x3ac>)
 8006d2e:	18b9      	adds	r1, r7, r2
 8006d30:	600b      	str	r3, [r1, #0]
				for (location = json_getChild(locations); location; location =
 8006d32:	18bb      	adds	r3, r7, r2
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	0018      	movs	r0, r3
 8006d38:	f7fd fea2 	bl	8004a80 <json_getChild>
 8006d3c:	0003      	movs	r3, r0
 8006d3e:	22a0      	movs	r2, #160	@ 0xa0
 8006d40:	0152      	lsls	r2, r2, #5
 8006d42:	18ba      	adds	r2, r7, r2
 8006d44:	6013      	str	r3, [r2, #0]
 8006d46:	e07a      	b.n	8006e3e <ReceiveData+0x2b2>
						json_getSibling(location)) {
					tempLoc.lat = (float) json_getReal(
 8006d48:	4a7c      	ldr	r2, [pc, #496]	@ (8006f3c <ReceiveData+0x3b0>)
 8006d4a:	25a0      	movs	r5, #160	@ 0xa0
 8006d4c:	016d      	lsls	r5, r5, #5
 8006d4e:	197b      	adds	r3, r7, r5
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	0011      	movs	r1, r2
 8006d54:	0018      	movs	r0, r3
 8006d56:	f001 fb2c 	bl	80083b2 <json_getProperty>
 8006d5a:	0003      	movs	r3, r0
 8006d5c:	0018      	movs	r0, r3
 8006d5e:	f7fd feab 	bl	8004ab8 <json_getReal>
 8006d62:	0002      	movs	r2, r0
 8006d64:	000b      	movs	r3, r1
 8006d66:	0010      	movs	r0, r2
 8006d68:	0019      	movs	r1, r3
 8006d6a:	f7fc fdbd 	bl	80038e8 <__aeabi_d2f>
 8006d6e:	1c02      	adds	r2, r0, #0
 8006d70:	4c73      	ldr	r4, [pc, #460]	@ (8006f40 <ReceiveData+0x3b4>)
 8006d72:	193b      	adds	r3, r7, r4
 8006d74:	601a      	str	r2, [r3, #0]
							json_getProperty(location, "lat"));
					tempLoc.lon = (float) json_getReal(
 8006d76:	4a73      	ldr	r2, [pc, #460]	@ (8006f44 <ReceiveData+0x3b8>)
 8006d78:	197b      	adds	r3, r7, r5
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	0011      	movs	r1, r2
 8006d7e:	0018      	movs	r0, r3
 8006d80:	f001 fb17 	bl	80083b2 <json_getProperty>
 8006d84:	0003      	movs	r3, r0
 8006d86:	0018      	movs	r0, r3
 8006d88:	f7fd fe96 	bl	8004ab8 <json_getReal>
 8006d8c:	0002      	movs	r2, r0
 8006d8e:	000b      	movs	r3, r1
 8006d90:	0010      	movs	r0, r2
 8006d92:	0019      	movs	r1, r3
 8006d94:	f7fc fda8 	bl	80038e8 <__aeabi_d2f>
 8006d98:	1c02      	adds	r2, r0, #0
 8006d9a:	193b      	adds	r3, r7, r4
 8006d9c:	605a      	str	r2, [r3, #4]
							json_getProperty(location, "lng"));
					if (fabs(tempLoc.lat) < .00001) {
 8006d9e:	193b      	adds	r3, r7, r4
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	005b      	lsls	r3, r3, #1
 8006da4:	085b      	lsrs	r3, r3, #1
 8006da6:	1c18      	adds	r0, r3, #0
 8006da8:	f7fc fd56 	bl	8003858 <__aeabi_f2d>
 8006dac:	4a66      	ldr	r2, [pc, #408]	@ (8006f48 <ReceiveData+0x3bc>)
 8006dae:	4b67      	ldr	r3, [pc, #412]	@ (8006f4c <ReceiveData+0x3c0>)
 8006db0:	f7f9 fb5c 	bl	800046c <__aeabi_dcmplt>
 8006db4:	1e03      	subs	r3, r0, #0
 8006db6:	d027      	beq.n	8006e08 <ReceiveData+0x27c>

						tempLoc.lat = (float) json_getReal(
 8006db8:	4a65      	ldr	r2, [pc, #404]	@ (8006f50 <ReceiveData+0x3c4>)
 8006dba:	197b      	adds	r3, r7, r5
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	0011      	movs	r1, r2
 8006dc0:	0018      	movs	r0, r3
 8006dc2:	f001 faf6 	bl	80083b2 <json_getProperty>
 8006dc6:	0003      	movs	r3, r0
 8006dc8:	0018      	movs	r0, r3
 8006dca:	f7fd fe75 	bl	8004ab8 <json_getReal>
 8006dce:	0002      	movs	r2, r0
 8006dd0:	000b      	movs	r3, r1
 8006dd2:	0010      	movs	r0, r2
 8006dd4:	0019      	movs	r1, r3
 8006dd6:	f7fc fd87 	bl	80038e8 <__aeabi_d2f>
 8006dda:	1c02      	adds	r2, r0, #0
 8006ddc:	193b      	adds	r3, r7, r4
 8006dde:	601a      	str	r2, [r3, #0]
								json_getProperty(location, "Lat"));
						tempLoc.lon = (float) json_getReal(
 8006de0:	4a5c      	ldr	r2, [pc, #368]	@ (8006f54 <ReceiveData+0x3c8>)
 8006de2:	197b      	adds	r3, r7, r5
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	0011      	movs	r1, r2
 8006de8:	0018      	movs	r0, r3
 8006dea:	f001 fae2 	bl	80083b2 <json_getProperty>
 8006dee:	0003      	movs	r3, r0
 8006df0:	0018      	movs	r0, r3
 8006df2:	f7fd fe61 	bl	8004ab8 <json_getReal>
 8006df6:	0002      	movs	r2, r0
 8006df8:	000b      	movs	r3, r1
 8006dfa:	0010      	movs	r0, r2
 8006dfc:	0019      	movs	r1, r3
 8006dfe:	f7fc fd73 	bl	80038e8 <__aeabi_d2f>
 8006e02:	1c02      	adds	r2, r0, #0
 8006e04:	193b      	adds	r3, r7, r4
 8006e06:	605a      	str	r2, [r3, #4]
								json_getProperty(location, "Lng"));
					}
					game.positions[locI] = tempLoc;
 8006e08:	4a43      	ldr	r2, [pc, #268]	@ (8006f18 <ReceiveData+0x38c>)
 8006e0a:	4c3f      	ldr	r4, [pc, #252]	@ (8006f08 <ReceiveData+0x37c>)
 8006e0c:	193b      	adds	r3, r7, r4
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	3303      	adds	r3, #3
 8006e12:	00db      	lsls	r3, r3, #3
 8006e14:	494a      	ldr	r1, [pc, #296]	@ (8006f40 <ReceiveData+0x3b4>)
 8006e16:	1879      	adds	r1, r7, r1
 8006e18:	18d3      	adds	r3, r2, r3
 8006e1a:	000a      	movs	r2, r1
 8006e1c:	ca03      	ldmia	r2!, {r0, r1}
 8006e1e:	c303      	stmia	r3!, {r0, r1}
					locI++;
 8006e20:	193b      	adds	r3, r7, r4
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	3301      	adds	r3, #1
 8006e26:	193a      	adds	r2, r7, r4
 8006e28:	6013      	str	r3, [r2, #0]
						json_getSibling(location)) {
 8006e2a:	24a0      	movs	r4, #160	@ 0xa0
 8006e2c:	0164      	lsls	r4, r4, #5
 8006e2e:	193b      	adds	r3, r7, r4
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	0018      	movs	r0, r3
 8006e34:	f7fd fe1a 	bl	8004a6c <json_getSibling>
 8006e38:	0003      	movs	r3, r0
 8006e3a:	193a      	adds	r2, r7, r4
 8006e3c:	6013      	str	r3, [r2, #0]
				for (location = json_getChild(locations); location; location =
 8006e3e:	23a0      	movs	r3, #160	@ 0xa0
 8006e40:	015b      	lsls	r3, r3, #5
 8006e42:	18fb      	adds	r3, r7, r3
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d000      	beq.n	8006e4c <ReceiveData+0x2c0>
 8006e4a:	e77d      	b.n	8006d48 <ReceiveData+0x1bc>
				}
				game.numLocations = locI;
 8006e4c:	4b2e      	ldr	r3, [pc, #184]	@ (8006f08 <ReceiveData+0x37c>)
 8006e4e:	18fb      	adds	r3, r7, r3
 8006e50:	681a      	ldr	r2, [r3, #0]
 8006e52:	4b31      	ldr	r3, [pc, #196]	@ (8006f18 <ReceiveData+0x38c>)
 8006e54:	615a      	str	r2, [r3, #20]
				for (locI = locI; locI < 32; locI++) {
 8006e56:	e010      	b.n	8006e7a <ReceiveData+0x2ee>
					memset(&game.positions[locI], 0,
 8006e58:	4c2b      	ldr	r4, [pc, #172]	@ (8006f08 <ReceiveData+0x37c>)
 8006e5a:	193b      	adds	r3, r7, r4
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	3303      	adds	r3, #3
 8006e60:	00da      	lsls	r2, r3, #3
 8006e62:	4b2d      	ldr	r3, [pc, #180]	@ (8006f18 <ReceiveData+0x38c>)
 8006e64:	18d3      	adds	r3, r2, r3
 8006e66:	2208      	movs	r2, #8
 8006e68:	2100      	movs	r1, #0
 8006e6a:	0018      	movs	r0, r3
 8006e6c:	f008 f84e 	bl	800ef0c <memset>
				for (locI = locI; locI < 32; locI++) {
 8006e70:	193b      	adds	r3, r7, r4
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	3301      	adds	r3, #1
 8006e76:	193a      	adds	r2, r7, r4
 8006e78:	6013      	str	r3, [r2, #0]
 8006e7a:	4b23      	ldr	r3, [pc, #140]	@ (8006f08 <ReceiveData+0x37c>)
 8006e7c:	18fb      	adds	r3, r7, r3
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	2b1f      	cmp	r3, #31
 8006e82:	dde9      	ble.n	8006e58 <ReceiveData+0x2cc>
							sizeof(game.positions[locI]));
				}
				//SendData();
			}
			for (ii = 0; ii <= rI; ii++)
 8006e84:	4b34      	ldr	r3, [pc, #208]	@ (8006f58 <ReceiveData+0x3cc>)
 8006e86:	2200      	movs	r2, #0
 8006e88:	801a      	strh	r2, [r3, #0]
 8006e8a:	e00d      	b.n	8006ea8 <ReceiveData+0x31c>
				syncBuffer[ii] = 0;
 8006e8c:	4b32      	ldr	r3, [pc, #200]	@ (8006f58 <ReceiveData+0x3cc>)
 8006e8e:	881b      	ldrh	r3, [r3, #0]
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	001a      	movs	r2, r3
 8006e94:	4b1a      	ldr	r3, [pc, #104]	@ (8006f00 <ReceiveData+0x374>)
 8006e96:	2100      	movs	r1, #0
 8006e98:	5499      	strb	r1, [r3, r2]
			for (ii = 0; ii <= rI; ii++)
 8006e9a:	4b2f      	ldr	r3, [pc, #188]	@ (8006f58 <ReceiveData+0x3cc>)
 8006e9c:	881b      	ldrh	r3, [r3, #0]
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	3301      	adds	r3, #1
 8006ea2:	b29a      	uxth	r2, r3
 8006ea4:	4b2c      	ldr	r3, [pc, #176]	@ (8006f58 <ReceiveData+0x3cc>)
 8006ea6:	801a      	strh	r2, [r3, #0]
 8006ea8:	4b2b      	ldr	r3, [pc, #172]	@ (8006f58 <ReceiveData+0x3cc>)
 8006eaa:	881b      	ldrh	r3, [r3, #0]
 8006eac:	b29b      	uxth	r3, r3
 8006eae:	001a      	movs	r2, r3
 8006eb0:	4912      	ldr	r1, [pc, #72]	@ (8006efc <ReceiveData+0x370>)
 8006eb2:	187b      	adds	r3, r7, r1
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	dae8      	bge.n	8006e8c <ReceiveData+0x300>
			rI = 0;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	187a      	adds	r2, r7, r1
 8006ebe:	6013      	str	r3, [r2, #0]
			break;
 8006ec0:	e014      	b.n	8006eec <ReceiveData+0x360>
		} else {
			rI++;
 8006ec2:	4a0e      	ldr	r2, [pc, #56]	@ (8006efc <ReceiveData+0x370>)
 8006ec4:	18bb      	adds	r3, r7, r2
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	3301      	adds	r3, #1
 8006eca:	18ba      	adds	r2, r7, r2
 8006ecc:	6013      	str	r3, [r2, #0]
	while (HAL_UART_Receive(&huart2, &(syncBuffer[rI]), 1, 1000) == HAL_OK) {
 8006ece:	4b0b      	ldr	r3, [pc, #44]	@ (8006efc <ReceiveData+0x370>)
 8006ed0:	18fb      	adds	r3, r7, r3
 8006ed2:	681a      	ldr	r2, [r3, #0]
 8006ed4:	4b0a      	ldr	r3, [pc, #40]	@ (8006f00 <ReceiveData+0x374>)
 8006ed6:	18d1      	adds	r1, r2, r3
 8006ed8:	23fa      	movs	r3, #250	@ 0xfa
 8006eda:	009b      	lsls	r3, r3, #2
 8006edc:	481f      	ldr	r0, [pc, #124]	@ (8006f5c <ReceiveData+0x3d0>)
 8006ede:	2201      	movs	r2, #1
 8006ee0:	f005 ffee 	bl	800cec0 <HAL_UART_Receive>
 8006ee4:	1e03      	subs	r3, r0, #0
 8006ee6:	d100      	bne.n	8006eea <ReceiveData+0x35e>
 8006ee8:	e659      	b.n	8006b9e <ReceiveData+0x12>
		}
	}

}
 8006eea:	46c0      	nop			@ (mov r8, r8)
 8006eec:	46c0      	nop			@ (mov r8, r8)
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	4b1b      	ldr	r3, [pc, #108]	@ (8006f60 <ReceiveData+0x3d4>)
 8006ef2:	449d      	add	sp, r3
 8006ef4:	bdb0      	pop	{r4, r5, r7, pc}
 8006ef6:	46c0      	nop			@ (mov r8, r8)
 8006ef8:	ffffebf0 	.word	0xffffebf0
 8006efc:	0000140c 	.word	0x0000140c
 8006f00:	20000650 	.word	0x20000650
 8006f04:	000013fc 	.word	0x000013fc
 8006f08:	00001408 	.word	0x00001408
 8006f0c:	08011768 	.word	0x08011768
 8006f10:	000013f8 	.word	0x000013f8
 8006f14:	00001404 	.word	0x00001404
 8006f18:	20000298 	.word	0x20000298
 8006f1c:	0801176c 	.word	0x0801176c
 8006f20:	08011778 	.word	0x08011778
 8006f24:	08011784 	.word	0x08011784
 8006f28:	08011790 	.word	0x08011790
 8006f2c:	0801179c 	.word	0x0801179c
 8006f30:	080117a8 	.word	0x080117a8
 8006f34:	080117b4 	.word	0x080117b4
 8006f38:	000013f4 	.word	0x000013f4
 8006f3c:	080117c0 	.word	0x080117c0
 8006f40:	000013ec 	.word	0x000013ec
 8006f44:	080117c4 	.word	0x080117c4
 8006f48:	88e368f1 	.word	0x88e368f1
 8006f4c:	3ee4f8b5 	.word	0x3ee4f8b5
 8006f50:	080117c8 	.word	0x080117c8
 8006f54:	080117cc 	.word	0x080117cc
 8006f58:	200003ec 	.word	0x200003ec
 8006f5c:	20001440 	.word	0x20001440
 8006f60:	00001410 	.word	0x00001410

08006f64 <CheckExp>:
int CheckExp(int threshold, int comparer) {
 8006f64:	b590      	push	{r4, r7, lr}
 8006f66:	b085      	sub	sp, #20
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	6039      	str	r1, [r7, #0]
	int value = (int) ((float) comparer
 8006f6e:	6838      	ldr	r0, [r7, #0]
 8006f70:	f7fa fc3c 	bl	80017ec <__aeabi_i2f>
 8006f74:	1c04      	adds	r4, r0, #0
			* (1.0f + ((float) game.numLocations) / expDivisor));
 8006f76:	4b1c      	ldr	r3, [pc, #112]	@ (8006fe8 <CheckExp+0x84>)
 8006f78:	695b      	ldr	r3, [r3, #20]
 8006f7a:	0018      	movs	r0, r3
 8006f7c:	f7fa fc86 	bl	800188c <__aeabi_ui2f>
 8006f80:	1c03      	adds	r3, r0, #0
 8006f82:	2281      	movs	r2, #129	@ 0x81
 8006f84:	05d2      	lsls	r2, r2, #23
 8006f86:	1c11      	adds	r1, r2, #0
 8006f88:	1c18      	adds	r0, r3, #0
 8006f8a:	f7f9 fe83 	bl	8000c94 <__aeabi_fdiv>
 8006f8e:	1c03      	adds	r3, r0, #0
 8006f90:	21fe      	movs	r1, #254	@ 0xfe
 8006f92:	0589      	lsls	r1, r1, #22
 8006f94:	1c18      	adds	r0, r3, #0
 8006f96:	f7f9 fc8b 	bl	80008b0 <__aeabi_fadd>
 8006f9a:	1c03      	adds	r3, r0, #0
 8006f9c:	1c19      	adds	r1, r3, #0
 8006f9e:	1c20      	adds	r0, r4, #0
 8006fa0:	f7fa f846 	bl	8001030 <__aeabi_fmul>
 8006fa4:	1c03      	adds	r3, r0, #0
	int value = (int) ((float) comparer
 8006fa6:	1c18      	adds	r0, r3, #0
 8006fa8:	f7fa fc00 	bl	80017ac <__aeabi_f2iz>
 8006fac:	0003      	movs	r3, r0
 8006fae:	60fb      	str	r3, [r7, #12]
	if (value < (threshold / 4))
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	da00      	bge.n	8006fb8 <CheckExp+0x54>
 8006fb6:	3303      	adds	r3, #3
 8006fb8:	109b      	asrs	r3, r3, #2
 8006fba:	001a      	movs	r2, r3
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	da02      	bge.n	8006fc8 <CheckExp+0x64>
		return -1;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	425b      	negs	r3, r3
 8006fc6:	e00b      	b.n	8006fe0 <CheckExp+0x7c>
	if (value < threshold)
 8006fc8:	68fa      	ldr	r2, [r7, #12]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	da01      	bge.n	8006fd4 <CheckExp+0x70>
		return 0;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	e005      	b.n	8006fe0 <CheckExp+0x7c>
	if (value >= threshold)
 8006fd4:	68fa      	ldr	r2, [r7, #12]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	db01      	blt.n	8006fe0 <CheckExp+0x7c>
		return 1;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	e7ff      	b.n	8006fe0 <CheckExp+0x7c>
}
 8006fe0:	0018      	movs	r0, r3
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	b005      	add	sp, #20
 8006fe6:	bd90      	pop	{r4, r7, pc}
 8006fe8:	20000298 	.word	0x20000298

08006fec <GetLatLon>:
void GetLatLon() {
 8006fec:	b5b0      	push	{r4, r5, r7, lr}
 8006fee:	b08c      	sub	sp, #48	@ 0x30
 8006ff0:	af00      	add	r7, sp, #0
	int gpsI = 0;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	struct latLon pos;
	struct latLon tempPos;
	double checkW;
	double checkH;
	int posCheckI = 0;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	62bb      	str	r3, [r7, #40]	@ 0x28
	double gpsThreshold = 0.00383;
 8006ffa:	4a78      	ldr	r2, [pc, #480]	@ (80071dc <GetLatLon+0x1f0>)
 8006ffc:	4b78      	ldr	r3, [pc, #480]	@ (80071e0 <GetLatLon+0x1f4>)
 8006ffe:	623a      	str	r2, [r7, #32]
 8007000:	627b      	str	r3, [r7, #36]	@ 0x24
	//HAL_UART_Recieve();
	while (HAL_UART_Receive(&huart1, &(buffer[gpsI]), 1, 1000) == HAL_OK || 1) {
 8007002:	e0d3      	b.n	80071ac <GetLatLon+0x1c0>
		if (buffer[gpsI] == '$') {
			for (ii = 0; ii <= 127; ii++)
 8007004:	4b77      	ldr	r3, [pc, #476]	@ (80071e4 <GetLatLon+0x1f8>)
 8007006:	2200      	movs	r2, #0
 8007008:	801a      	strh	r2, [r3, #0]
 800700a:	e00d      	b.n	8007028 <GetLatLon+0x3c>
				buffer[ii] = 0;
 800700c:	4b75      	ldr	r3, [pc, #468]	@ (80071e4 <GetLatLon+0x1f8>)
 800700e:	881b      	ldrh	r3, [r3, #0]
 8007010:	b29b      	uxth	r3, r3
 8007012:	001a      	movs	r2, r3
 8007014:	4b74      	ldr	r3, [pc, #464]	@ (80071e8 <GetLatLon+0x1fc>)
 8007016:	2100      	movs	r1, #0
 8007018:	5499      	strb	r1, [r3, r2]
			for (ii = 0; ii <= 127; ii++)
 800701a:	4b72      	ldr	r3, [pc, #456]	@ (80071e4 <GetLatLon+0x1f8>)
 800701c:	881b      	ldrh	r3, [r3, #0]
 800701e:	b29b      	uxth	r3, r3
 8007020:	3301      	adds	r3, #1
 8007022:	b29a      	uxth	r2, r3
 8007024:	4b6f      	ldr	r3, [pc, #444]	@ (80071e4 <GetLatLon+0x1f8>)
 8007026:	801a      	strh	r2, [r3, #0]
 8007028:	4b6e      	ldr	r3, [pc, #440]	@ (80071e4 <GetLatLon+0x1f8>)
 800702a:	881b      	ldrh	r3, [r3, #0]
 800702c:	b29b      	uxth	r3, r3
 800702e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007030:	d9ec      	bls.n	800700c <GetLatLon+0x20>
			buffer[0] = '$';
 8007032:	4b6d      	ldr	r3, [pc, #436]	@ (80071e8 <GetLatLon+0x1fc>)
 8007034:	2224      	movs	r2, #36	@ 0x24
 8007036:	701a      	strb	r2, [r3, #0]
			gpsI = 0;
 8007038:	2300      	movs	r3, #0
 800703a:	62fb      	str	r3, [r7, #44]	@ 0x2c
		}	  //HAL_UART_Transmit(&huart2, buffer[i], 1, 1000);
		if (buffer[gpsI] == '\n') {
 800703c:	4a6a      	ldr	r2, [pc, #424]	@ (80071e8 <GetLatLon+0x1fc>)
 800703e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007040:	18d3      	adds	r3, r2, r3
 8007042:	781b      	ldrb	r3, [r3, #0]
 8007044:	2b0a      	cmp	r3, #10
 8007046:	d000      	beq.n	800704a <GetLatLon+0x5e>
 8007048:	e0ad      	b.n	80071a6 <GetLatLon+0x1ba>
			 else return;
			 }

			 break;
			 }*/
			if (minmea_parse_gga(&ggaStruct, &(buffer))) {
 800704a:	4a67      	ldr	r2, [pc, #412]	@ (80071e8 <GetLatLon+0x1fc>)
 800704c:	4b67      	ldr	r3, [pc, #412]	@ (80071ec <GetLatLon+0x200>)
 800704e:	0011      	movs	r1, r2
 8007050:	0018      	movs	r0, r3
 8007052:	f000 fdd1 	bl	8007bf8 <minmea_parse_gga>
 8007056:	1e03      	subs	r3, r0, #0
 8007058:	d100      	bne.n	800705c <GetLatLon+0x70>
 800705a:	e08d      	b.n	8007178 <GetLatLon+0x18c>
				pos.lat = minmea_tocoord(&ggaStruct.latitude);
 800705c:	4b64      	ldr	r3, [pc, #400]	@ (80071f0 <GetLatLon+0x204>)
 800705e:	0018      	movs	r0, r3
 8007060:	f7fd fcc0 	bl	80049e4 <minmea_tocoord>
 8007064:	1c02      	adds	r2, r0, #0
 8007066:	2408      	movs	r4, #8
 8007068:	193b      	adds	r3, r7, r4
 800706a:	601a      	str	r2, [r3, #0]
				pos.lon = minmea_tocoord(&ggaStruct.longitude);
 800706c:	4b61      	ldr	r3, [pc, #388]	@ (80071f4 <GetLatLon+0x208>)
 800706e:	0018      	movs	r0, r3
 8007070:	f7fd fcb8 	bl	80049e4 <minmea_tocoord>
 8007074:	1c02      	adds	r2, r0, #0
 8007076:	193b      	adds	r3, r7, r4
 8007078:	605a      	str	r2, [r3, #4]
				game.time = ggaStruct.time;
 800707a:	4b5f      	ldr	r3, [pc, #380]	@ (80071f8 <GetLatLon+0x20c>)
 800707c:	4a5b      	ldr	r2, [pc, #364]	@ (80071ec <GetLatLon+0x200>)
 800707e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8007080:	c313      	stmia	r3!, {r0, r1, r4}
 8007082:	6812      	ldr	r2, [r2, #0]
 8007084:	601a      	str	r2, [r3, #0]
				frameGot = 1;
 8007086:	4b5d      	ldr	r3, [pc, #372]	@ (80071fc <GetLatLon+0x210>)
 8007088:	2201      	movs	r2, #1
 800708a:	701a      	strb	r2, [r3, #0]
				posCheckI = 0;
 800708c:	2300      	movs	r3, #0
 800708e:	62bb      	str	r3, [r7, #40]	@ 0x28
				for (posCheckI = 0; posCheckI < game.numLocations;
 8007090:	2300      	movs	r3, #0
 8007092:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007094:	e053      	b.n	800713e <GetLatLon+0x152>
						posCheckI++) {
					tempPos = game.positions[posCheckI];
 8007096:	003a      	movs	r2, r7
 8007098:	4957      	ldr	r1, [pc, #348]	@ (80071f8 <GetLatLon+0x20c>)
 800709a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800709c:	3303      	adds	r3, #3
 800709e:	00db      	lsls	r3, r3, #3
 80070a0:	18cb      	adds	r3, r1, r3
 80070a2:	cb03      	ldmia	r3!, {r0, r1}
 80070a4:	c203      	stmia	r2!, {r0, r1}
						checkW = fabs(tempPos.lat - pos.lat);
 80070a6:	003b      	movs	r3, r7
 80070a8:	681a      	ldr	r2, [r3, #0]
 80070aa:	2408      	movs	r4, #8
 80070ac:	193b      	adds	r3, r7, r4
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	1c19      	adds	r1, r3, #0
 80070b2:	1c10      	adds	r0, r2, #0
 80070b4:	f7fa f916 	bl	80012e4 <__aeabi_fsub>
 80070b8:	1c03      	adds	r3, r0, #0
 80070ba:	005b      	lsls	r3, r3, #1
 80070bc:	085b      	lsrs	r3, r3, #1
 80070be:	1c18      	adds	r0, r3, #0
 80070c0:	f7fc fbca 	bl	8003858 <__aeabi_f2d>
 80070c4:	0002      	movs	r2, r0
 80070c6:	000b      	movs	r3, r1
 80070c8:	61ba      	str	r2, [r7, #24]
 80070ca:	61fb      	str	r3, [r7, #28]
						checkH = fabs(tempPos.lon - pos.lon);
 80070cc:	003b      	movs	r3, r7
 80070ce:	685a      	ldr	r2, [r3, #4]
 80070d0:	193b      	adds	r3, r7, r4
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	1c19      	adds	r1, r3, #0
 80070d6:	1c10      	adds	r0, r2, #0
 80070d8:	f7fa f904 	bl	80012e4 <__aeabi_fsub>
 80070dc:	1c03      	adds	r3, r0, #0
 80070de:	005b      	lsls	r3, r3, #1
 80070e0:	085b      	lsrs	r3, r3, #1
 80070e2:	1c18      	adds	r0, r3, #0
 80070e4:	f7fc fbb8 	bl	8003858 <__aeabi_f2d>
 80070e8:	0002      	movs	r2, r0
 80070ea:	000b      	movs	r3, r1
 80070ec:	613a      	str	r2, [r7, #16]
 80070ee:	617b      	str	r3, [r7, #20]
						if ((double)sqrt((checkW * checkW) + (checkH * checkH))
 80070f0:	69ba      	ldr	r2, [r7, #24]
 80070f2:	69fb      	ldr	r3, [r7, #28]
 80070f4:	69b8      	ldr	r0, [r7, #24]
 80070f6:	69f9      	ldr	r1, [r7, #28]
 80070f8:	f7fb fc0e 	bl	8002918 <__aeabi_dmul>
 80070fc:	0002      	movs	r2, r0
 80070fe:	000b      	movs	r3, r1
 8007100:	0014      	movs	r4, r2
 8007102:	001d      	movs	r5, r3
 8007104:	693a      	ldr	r2, [r7, #16]
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	6938      	ldr	r0, [r7, #16]
 800710a:	6979      	ldr	r1, [r7, #20]
 800710c:	f7fb fc04 	bl	8002918 <__aeabi_dmul>
 8007110:	0002      	movs	r2, r0
 8007112:	000b      	movs	r3, r1
 8007114:	0020      	movs	r0, r4
 8007116:	0029      	movs	r1, r5
 8007118:	f7fa fbfe 	bl	8001918 <__aeabi_dadd>
 800711c:	0002      	movs	r2, r0
 800711e:	000b      	movs	r3, r1
 8007120:	0010      	movs	r0, r2
 8007122:	0019      	movs	r1, r3
 8007124:	f00a f815 	bl	8011152 <sqrt>
 8007128:	0002      	movs	r2, r0
 800712a:	000b      	movs	r3, r1
 800712c:	6a38      	ldr	r0, [r7, #32]
 800712e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007130:	f7f9 f9b0 	bl	8000494 <__aeabi_dcmpgt>
 8007134:	1e03      	subs	r3, r0, #0
 8007136:	d14a      	bne.n	80071ce <GetLatLon+0x1e2>
						posCheckI++) {
 8007138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800713a:	3301      	adds	r3, #1
 800713c:	62bb      	str	r3, [r7, #40]	@ 0x28
				for (posCheckI = 0; posCheckI < game.numLocations;
 800713e:	4b2e      	ldr	r3, [pc, #184]	@ (80071f8 <GetLatLon+0x20c>)
 8007140:	695a      	ldr	r2, [r3, #20]
 8007142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007144:	429a      	cmp	r2, r3
 8007146:	d8a6      	bhi.n	8007096 <GetLatLon+0xaa>
								< gpsThreshold)
							return;

					}
game.positions[game.numLocations] = pos;
 8007148:	4b2b      	ldr	r3, [pc, #172]	@ (80071f8 <GetLatLon+0x20c>)
 800714a:	695b      	ldr	r3, [r3, #20]
 800714c:	4a2a      	ldr	r2, [pc, #168]	@ (80071f8 <GetLatLon+0x20c>)
 800714e:	3303      	adds	r3, #3
 8007150:	00db      	lsls	r3, r3, #3
 8007152:	2108      	movs	r1, #8
 8007154:	1879      	adds	r1, r7, r1
 8007156:	18d3      	adds	r3, r2, r3
 8007158:	000a      	movs	r2, r1
 800715a:	ca03      	ldmia	r2!, {r0, r1}
 800715c:	c303      	stmia	r3!, {r0, r1}
				game.numLocations++;
 800715e:	4b26      	ldr	r3, [pc, #152]	@ (80071f8 <GetLatLon+0x20c>)
 8007160:	695b      	ldr	r3, [r3, #20]
 8007162:	1c5a      	adds	r2, r3, #1
 8007164:	4b24      	ldr	r3, [pc, #144]	@ (80071f8 <GetLatLon+0x20c>)
 8007166:	615a      	str	r2, [r3, #20]
				if (game.numLocations > 31)
 8007168:	4b23      	ldr	r3, [pc, #140]	@ (80071f8 <GetLatLon+0x20c>)
 800716a:	695b      	ldr	r3, [r3, #20]
 800716c:	2b1f      	cmp	r3, #31
 800716e:	d930      	bls.n	80071d2 <GetLatLon+0x1e6>
					game.numLocations = 0;
 8007170:	4b21      	ldr	r3, [pc, #132]	@ (80071f8 <GetLatLon+0x20c>)
 8007172:	2200      	movs	r2, #0
 8007174:	615a      	str	r2, [r3, #20]
				break;
 8007176:	e02c      	b.n	80071d2 <GetLatLon+0x1e6>
				}
				for (ii = 0; ii <= 127; ii++)
 8007178:	4b1a      	ldr	r3, [pc, #104]	@ (80071e4 <GetLatLon+0x1f8>)
 800717a:	2200      	movs	r2, #0
 800717c:	801a      	strh	r2, [r3, #0]
 800717e:	e00d      	b.n	800719c <GetLatLon+0x1b0>
				buffer[ii] = 0;
 8007180:	4b18      	ldr	r3, [pc, #96]	@ (80071e4 <GetLatLon+0x1f8>)
 8007182:	881b      	ldrh	r3, [r3, #0]
 8007184:	b29b      	uxth	r3, r3
 8007186:	001a      	movs	r2, r3
 8007188:	4b17      	ldr	r3, [pc, #92]	@ (80071e8 <GetLatLon+0x1fc>)
 800718a:	2100      	movs	r1, #0
 800718c:	5499      	strb	r1, [r3, r2]
				for (ii = 0; ii <= 127; ii++)
 800718e:	4b15      	ldr	r3, [pc, #84]	@ (80071e4 <GetLatLon+0x1f8>)
 8007190:	881b      	ldrh	r3, [r3, #0]
 8007192:	b29b      	uxth	r3, r3
 8007194:	3301      	adds	r3, #1
 8007196:	b29a      	uxth	r2, r3
 8007198:	4b12      	ldr	r3, [pc, #72]	@ (80071e4 <GetLatLon+0x1f8>)
 800719a:	801a      	strh	r2, [r3, #0]
 800719c:	4b11      	ldr	r3, [pc, #68]	@ (80071e4 <GetLatLon+0x1f8>)
 800719e:	881b      	ldrh	r3, [r3, #0]
 80071a0:	b29b      	uxth	r3, r3
 80071a2:	2b7f      	cmp	r3, #127	@ 0x7f
 80071a4:	d9ec      	bls.n	8007180 <GetLatLon+0x194>
			}

			gpsI++;
 80071a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071a8:	3301      	adds	r3, #1
 80071aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (HAL_UART_Receive(&huart1, &(buffer[gpsI]), 1, 1000) == HAL_OK || 1) {
 80071ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80071ae:	4b0e      	ldr	r3, [pc, #56]	@ (80071e8 <GetLatLon+0x1fc>)
 80071b0:	18d1      	adds	r1, r2, r3
 80071b2:	23fa      	movs	r3, #250	@ 0xfa
 80071b4:	009b      	lsls	r3, r3, #2
 80071b6:	4812      	ldr	r0, [pc, #72]	@ (8007200 <GetLatLon+0x214>)
 80071b8:	2201      	movs	r2, #1
 80071ba:	f005 fe81 	bl	800cec0 <HAL_UART_Receive>
		if (buffer[gpsI] == '$') {
 80071be:	4a0a      	ldr	r2, [pc, #40]	@ (80071e8 <GetLatLon+0x1fc>)
 80071c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071c2:	18d3      	adds	r3, r2, r3
 80071c4:	781b      	ldrb	r3, [r3, #0]
 80071c6:	2b24      	cmp	r3, #36	@ 0x24
 80071c8:	d000      	beq.n	80071cc <GetLatLon+0x1e0>
 80071ca:	e737      	b.n	800703c <GetLatLon+0x50>
 80071cc:	e71a      	b.n	8007004 <GetLatLon+0x18>
							return;
 80071ce:	46c0      	nop			@ (mov r8, r8)
 80071d0:	e000      	b.n	80071d4 <GetLatLon+0x1e8>
				break;
 80071d2:	46c0      	nop			@ (mov r8, r8)
		}


	}
 80071d4:	46bd      	mov	sp, r7
 80071d6:	b00c      	add	sp, #48	@ 0x30
 80071d8:	bdb0      	pop	{r4, r5, r7, pc}
 80071da:	46c0      	nop			@ (mov r8, r8)
 80071dc:	97cc3a00 	.word	0x97cc3a00
 80071e0:	3f6f6017 	.word	0x3f6f6017
 80071e4:	200003ec 	.word	0x200003ec
 80071e8:	20000440 	.word	0x20000440
 80071ec:	200003f0 	.word	0x200003f0
 80071f0:	20000400 	.word	0x20000400
 80071f4:	20000408 	.word	0x20000408
 80071f8:	20000298 	.word	0x20000298
 80071fc:	2000043e 	.word	0x2000043e
 8007200:	200013ac 	.word	0x200013ac

08007204 <Emote>:

void Emote() {
 8007204:	b580      	push	{r7, lr}
 8007206:	b084      	sub	sp, #16
 8007208:	af04      	add	r7, sp, #16
	switch (game.evo) {
 800720a:	4b57      	ldr	r3, [pc, #348]	@ (8007368 <Emote+0x164>)
 800720c:	7c1b      	ldrb	r3, [r3, #16]
 800720e:	2b02      	cmp	r3, #2
 8007210:	d041      	beq.n	8007296 <Emote+0x92>
 8007212:	dd00      	ble.n	8007216 <Emote+0x12>
 8007214:	e069      	b.n	80072ea <Emote+0xe6>
 8007216:	2b00      	cmp	r3, #0
 8007218:	d002      	beq.n	8007220 <Emote+0x1c>
 800721a:	2b01      	cmp	r3, #1
 800721c:	d016      	beq.n	800724c <Emote+0x48>
 800721e:	e064      	b.n	80072ea <Emote+0xe6>
	case 0:
		if (game.time.seconds % 3 == 0) {
 8007220:	4b51      	ldr	r3, [pc, #324]	@ (8007368 <Emote+0x164>)
 8007222:	689b      	ldr	r3, [r3, #8]
 8007224:	2103      	movs	r1, #3
 8007226:	0018      	movs	r0, r3
 8007228:	f7f9 f904 	bl	8000434 <__aeabi_idivmod>
 800722c:	1e0b      	subs	r3, r1, #0
 800722e:	d157      	bne.n	80072e0 <Emote+0xdc>
			game.time.seconds++;
 8007230:	4b4d      	ldr	r3, [pc, #308]	@ (8007368 <Emote+0x164>)
 8007232:	689b      	ldr	r3, [r3, #8]
 8007234:	1c5a      	adds	r2, r3, #1
 8007236:	4b4c      	ldr	r3, [pc, #304]	@ (8007368 <Emote+0x164>)
 8007238:	609a      	str	r2, [r3, #8]
			effect = EggNoise;
 800723a:	4b4c      	ldr	r3, [pc, #304]	@ (800736c <Emote+0x168>)
 800723c:	2201      	movs	r2, #1
 800723e:	701a      	strb	r2, [r3, #0]
			PlayEffect(effect);
 8007240:	4b4a      	ldr	r3, [pc, #296]	@ (800736c <Emote+0x168>)
 8007242:	781b      	ldrb	r3, [r3, #0]
 8007244:	0018      	movs	r0, r3
 8007246:	f7fe fbef 	bl	8005a28 <PlayEffect>
		}
		break;
 800724a:	e049      	b.n	80072e0 <Emote+0xdc>
	case 1:
		if (game.time.seconds % 3 == 0) {
 800724c:	4b46      	ldr	r3, [pc, #280]	@ (8007368 <Emote+0x164>)
 800724e:	689b      	ldr	r3, [r3, #8]
 8007250:	2103      	movs	r1, #3
 8007252:	0018      	movs	r0, r3
 8007254:	f7f9 f8ee 	bl	8000434 <__aeabi_idivmod>
 8007258:	1e0b      	subs	r3, r1, #0
 800725a:	d143      	bne.n	80072e4 <Emote+0xe0>
			game.time.seconds++;
 800725c:	4b42      	ldr	r3, [pc, #264]	@ (8007368 <Emote+0x164>)
 800725e:	689b      	ldr	r3, [r3, #8]
 8007260:	1c5a      	adds	r2, r3, #1
 8007262:	4b41      	ldr	r3, [pc, #260]	@ (8007368 <Emote+0x164>)
 8007264:	609a      	str	r2, [r3, #8]
			if (game.mood > sadMood) {
 8007266:	4b40      	ldr	r3, [pc, #256]	@ (8007368 <Emote+0x164>)
 8007268:	7c5b      	ldrb	r3, [r3, #17]
 800726a:	001a      	movs	r2, r3
 800726c:	2300      	movs	r3, #0
 800726e:	429a      	cmp	r2, r3
 8007270:	dd08      	ble.n	8007284 <Emote+0x80>
				effect = YoungNoiseHappy;
 8007272:	4b3e      	ldr	r3, [pc, #248]	@ (800736c <Emote+0x168>)
 8007274:	2202      	movs	r2, #2
 8007276:	701a      	strb	r2, [r3, #0]
				PlayEffect(effect);
 8007278:	4b3c      	ldr	r3, [pc, #240]	@ (800736c <Emote+0x168>)
 800727a:	781b      	ldrb	r3, [r3, #0]
 800727c:	0018      	movs	r0, r3
 800727e:	f7fe fbd3 	bl	8005a28 <PlayEffect>
				effect = YoungNoiseSad;
				PlayEffect(effect);

			}
		}
		break;
 8007282:	e02f      	b.n	80072e4 <Emote+0xe0>
				effect = YoungNoiseSad;
 8007284:	4b39      	ldr	r3, [pc, #228]	@ (800736c <Emote+0x168>)
 8007286:	2203      	movs	r2, #3
 8007288:	701a      	strb	r2, [r3, #0]
				PlayEffect(effect);
 800728a:	4b38      	ldr	r3, [pc, #224]	@ (800736c <Emote+0x168>)
 800728c:	781b      	ldrb	r3, [r3, #0]
 800728e:	0018      	movs	r0, r3
 8007290:	f7fe fbca 	bl	8005a28 <PlayEffect>
		break;
 8007294:	e026      	b.n	80072e4 <Emote+0xe0>
	case 2:
		if (game.time.seconds % 3 == 0) {
 8007296:	4b34      	ldr	r3, [pc, #208]	@ (8007368 <Emote+0x164>)
 8007298:	689b      	ldr	r3, [r3, #8]
 800729a:	2103      	movs	r1, #3
 800729c:	0018      	movs	r0, r3
 800729e:	f7f9 f8c9 	bl	8000434 <__aeabi_idivmod>
 80072a2:	1e0b      	subs	r3, r1, #0
 80072a4:	d120      	bne.n	80072e8 <Emote+0xe4>
			game.time.seconds++;
 80072a6:	4b30      	ldr	r3, [pc, #192]	@ (8007368 <Emote+0x164>)
 80072a8:	689b      	ldr	r3, [r3, #8]
 80072aa:	1c5a      	adds	r2, r3, #1
 80072ac:	4b2e      	ldr	r3, [pc, #184]	@ (8007368 <Emote+0x164>)
 80072ae:	609a      	str	r2, [r3, #8]
			if (game.mood > sadMood) {
 80072b0:	4b2d      	ldr	r3, [pc, #180]	@ (8007368 <Emote+0x164>)
 80072b2:	7c5b      	ldrb	r3, [r3, #17]
 80072b4:	001a      	movs	r2, r3
 80072b6:	2300      	movs	r3, #0
 80072b8:	429a      	cmp	r2, r3
 80072ba:	dd08      	ble.n	80072ce <Emote+0xca>
				effect = AdultNoiseHappy;
 80072bc:	4b2b      	ldr	r3, [pc, #172]	@ (800736c <Emote+0x168>)
 80072be:	2204      	movs	r2, #4
 80072c0:	701a      	strb	r2, [r3, #0]
				PlayEffect(effect);
 80072c2:	4b2a      	ldr	r3, [pc, #168]	@ (800736c <Emote+0x168>)
 80072c4:	781b      	ldrb	r3, [r3, #0]
 80072c6:	0018      	movs	r0, r3
 80072c8:	f7fe fbae 	bl	8005a28 <PlayEffect>
				effect = AdultNoiseSad;
				PlayEffect(effect);

			}
		}
		break;
 80072cc:	e00c      	b.n	80072e8 <Emote+0xe4>
				effect = AdultNoiseSad;
 80072ce:	4b27      	ldr	r3, [pc, #156]	@ (800736c <Emote+0x168>)
 80072d0:	2205      	movs	r2, #5
 80072d2:	701a      	strb	r2, [r3, #0]
				PlayEffect(effect);
 80072d4:	4b25      	ldr	r3, [pc, #148]	@ (800736c <Emote+0x168>)
 80072d6:	781b      	ldrb	r3, [r3, #0]
 80072d8:	0018      	movs	r0, r3
 80072da:	f7fe fba5 	bl	8005a28 <PlayEffect>
		break;
 80072de:	e003      	b.n	80072e8 <Emote+0xe4>
		break;
 80072e0:	46c0      	nop			@ (mov r8, r8)
 80072e2:	e002      	b.n	80072ea <Emote+0xe6>
		break;
 80072e4:	46c0      	nop			@ (mov r8, r8)
 80072e6:	e000      	b.n	80072ea <Emote+0xe6>
		break;
 80072e8:	46c0      	nop			@ (mov r8, r8)
	}
	if (game.mood <= sadMood) {
 80072ea:	4b1f      	ldr	r3, [pc, #124]	@ (8007368 <Emote+0x164>)
 80072ec:	7c5b      	ldrb	r3, [r3, #17]
 80072ee:	001a      	movs	r2, r3
 80072f0:	2300      	movs	r3, #0
 80072f2:	429a      	cmp	r2, r3
 80072f4:	dc0d      	bgt.n	8007312 <Emote+0x10e>
		drawString(0, 10, "Mood :( ", WHITE, BLACK, 1, 1);
 80072f6:	2301      	movs	r3, #1
 80072f8:	425b      	negs	r3, r3
 80072fa:	4a1d      	ldr	r2, [pc, #116]	@ (8007370 <Emote+0x16c>)
 80072fc:	2101      	movs	r1, #1
 80072fe:	9102      	str	r1, [sp, #8]
 8007300:	2101      	movs	r1, #1
 8007302:	9101      	str	r1, [sp, #4]
 8007304:	2100      	movs	r1, #0
 8007306:	9100      	str	r1, [sp, #0]
 8007308:	210a      	movs	r1, #10
 800730a:	2000      	movs	r0, #0
 800730c:	f7fc fe41 	bl	8003f92 <drawString>
	} else if (game.mood <= mehMood) {
		drawString(0, 10, "Mood :I ", WHITE, BLACK, 1, 1);
	} else if (game.mood >= happyMood) {
		drawString(0, 10, "Mood :) ", WHITE, BLACK, 1, 1);
	}
}
 8007310:	e026      	b.n	8007360 <Emote+0x15c>
	} else if (game.mood <= mehMood) {
 8007312:	4b15      	ldr	r3, [pc, #84]	@ (8007368 <Emote+0x164>)
 8007314:	7c5b      	ldrb	r3, [r3, #17]
 8007316:	001a      	movs	r2, r3
 8007318:	2301      	movs	r3, #1
 800731a:	429a      	cmp	r2, r3
 800731c:	dc0d      	bgt.n	800733a <Emote+0x136>
		drawString(0, 10, "Mood :I ", WHITE, BLACK, 1, 1);
 800731e:	2301      	movs	r3, #1
 8007320:	425b      	negs	r3, r3
 8007322:	4a14      	ldr	r2, [pc, #80]	@ (8007374 <Emote+0x170>)
 8007324:	2101      	movs	r1, #1
 8007326:	9102      	str	r1, [sp, #8]
 8007328:	2101      	movs	r1, #1
 800732a:	9101      	str	r1, [sp, #4]
 800732c:	2100      	movs	r1, #0
 800732e:	9100      	str	r1, [sp, #0]
 8007330:	210a      	movs	r1, #10
 8007332:	2000      	movs	r0, #0
 8007334:	f7fc fe2d 	bl	8003f92 <drawString>
}
 8007338:	e012      	b.n	8007360 <Emote+0x15c>
	} else if (game.mood >= happyMood) {
 800733a:	4b0b      	ldr	r3, [pc, #44]	@ (8007368 <Emote+0x164>)
 800733c:	7c5b      	ldrb	r3, [r3, #17]
 800733e:	001a      	movs	r2, r3
 8007340:	2302      	movs	r3, #2
 8007342:	429a      	cmp	r2, r3
 8007344:	db0c      	blt.n	8007360 <Emote+0x15c>
		drawString(0, 10, "Mood :) ", WHITE, BLACK, 1, 1);
 8007346:	2301      	movs	r3, #1
 8007348:	425b      	negs	r3, r3
 800734a:	4a0b      	ldr	r2, [pc, #44]	@ (8007378 <Emote+0x174>)
 800734c:	2101      	movs	r1, #1
 800734e:	9102      	str	r1, [sp, #8]
 8007350:	2101      	movs	r1, #1
 8007352:	9101      	str	r1, [sp, #4]
 8007354:	2100      	movs	r1, #0
 8007356:	9100      	str	r1, [sp, #0]
 8007358:	210a      	movs	r1, #10
 800735a:	2000      	movs	r0, #0
 800735c:	f7fc fe19 	bl	8003f92 <drawString>
}
 8007360:	46c0      	nop			@ (mov r8, r8)
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}
 8007366:	46c0      	nop			@ (mov r8, r8)
 8007368:	20000298 	.word	0x20000298
 800736c:	20000288 	.word	0x20000288
 8007370:	080117d0 	.word	0x080117d0
 8007374:	080117dc 	.word	0x080117dc
 8007378:	080117e8 	.word	0x080117e8

0800737c <GetJustLatLon>:
struct latLon GetJustLatLon() {
 800737c:	b590      	push	{r4, r7, lr}
 800737e:	b089      	sub	sp, #36	@ 0x24
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
	int gpsI = 0;
 8007384:	2300      	movs	r3, #0
 8007386:	61fb      	str	r3, [r7, #28]
	struct latLon pos;
	struct latLon tempPos;
	double checkW;
	double checkH;
	int posCheckI = 0;
 8007388:	2300      	movs	r3, #0
 800738a:	61bb      	str	r3, [r7, #24]
	//HAL_UART_Recieve();
	while (HAL_UART_Receive(&huart1, &(buffer[gpsI]), 1, 1000) == HAL_OK || 1) {
 800738c:	e057      	b.n	800743e <GetJustLatLon+0xc2>
		if (buffer[gpsI] == '$') {
			for (ii = 0; ii <= 127; ii++)
 800738e:	4b36      	ldr	r3, [pc, #216]	@ (8007468 <GetJustLatLon+0xec>)
 8007390:	2200      	movs	r2, #0
 8007392:	801a      	strh	r2, [r3, #0]
 8007394:	e00d      	b.n	80073b2 <GetJustLatLon+0x36>
				buffer[ii] = 0;
 8007396:	4b34      	ldr	r3, [pc, #208]	@ (8007468 <GetJustLatLon+0xec>)
 8007398:	881b      	ldrh	r3, [r3, #0]
 800739a:	b29b      	uxth	r3, r3
 800739c:	001a      	movs	r2, r3
 800739e:	4b33      	ldr	r3, [pc, #204]	@ (800746c <GetJustLatLon+0xf0>)
 80073a0:	2100      	movs	r1, #0
 80073a2:	5499      	strb	r1, [r3, r2]
			for (ii = 0; ii <= 127; ii++)
 80073a4:	4b30      	ldr	r3, [pc, #192]	@ (8007468 <GetJustLatLon+0xec>)
 80073a6:	881b      	ldrh	r3, [r3, #0]
 80073a8:	b29b      	uxth	r3, r3
 80073aa:	3301      	adds	r3, #1
 80073ac:	b29a      	uxth	r2, r3
 80073ae:	4b2e      	ldr	r3, [pc, #184]	@ (8007468 <GetJustLatLon+0xec>)
 80073b0:	801a      	strh	r2, [r3, #0]
 80073b2:	4b2d      	ldr	r3, [pc, #180]	@ (8007468 <GetJustLatLon+0xec>)
 80073b4:	881b      	ldrh	r3, [r3, #0]
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	2b7f      	cmp	r3, #127	@ 0x7f
 80073ba:	d9ec      	bls.n	8007396 <GetJustLatLon+0x1a>
			buffer[0] = '$';
 80073bc:	4b2b      	ldr	r3, [pc, #172]	@ (800746c <GetJustLatLon+0xf0>)
 80073be:	2224      	movs	r2, #36	@ 0x24
 80073c0:	701a      	strb	r2, [r3, #0]
			gpsI = 0;
 80073c2:	2300      	movs	r3, #0
 80073c4:	61fb      	str	r3, [r7, #28]
		}	  //HAL_UART_Transmit(&huart2, buffer[i], 1, 1000);
		if (buffer[gpsI] == '\n') {
 80073c6:	4a29      	ldr	r2, [pc, #164]	@ (800746c <GetJustLatLon+0xf0>)
 80073c8:	69fb      	ldr	r3, [r7, #28]
 80073ca:	18d3      	adds	r3, r2, r3
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	2b0a      	cmp	r3, #10
 80073d0:	d132      	bne.n	8007438 <GetJustLatLon+0xbc>
			 else return;
			 }

			 break;
			 }*/
			if (minmea_parse_gga(&ggaStruct, &(buffer))) {
 80073d2:	4a26      	ldr	r2, [pc, #152]	@ (800746c <GetJustLatLon+0xf0>)
 80073d4:	4b26      	ldr	r3, [pc, #152]	@ (8007470 <GetJustLatLon+0xf4>)
 80073d6:	0011      	movs	r1, r2
 80073d8:	0018      	movs	r0, r3
 80073da:	f000 fc0d 	bl	8007bf8 <minmea_parse_gga>
 80073de:	1e03      	subs	r3, r0, #0
 80073e0:	d013      	beq.n	800740a <GetJustLatLon+0x8e>
				pos.lat = minmea_tocoord(&ggaStruct.latitude);
 80073e2:	4b24      	ldr	r3, [pc, #144]	@ (8007474 <GetJustLatLon+0xf8>)
 80073e4:	0018      	movs	r0, r3
 80073e6:	f7fd fafd 	bl	80049e4 <minmea_tocoord>
 80073ea:	1c02      	adds	r2, r0, #0
 80073ec:	2410      	movs	r4, #16
 80073ee:	193b      	adds	r3, r7, r4
 80073f0:	601a      	str	r2, [r3, #0]
				pos.lon = minmea_tocoord(&ggaStruct.longitude);
 80073f2:	4b21      	ldr	r3, [pc, #132]	@ (8007478 <GetJustLatLon+0xfc>)
 80073f4:	0018      	movs	r0, r3
 80073f6:	f7fd faf5 	bl	80049e4 <minmea_tocoord>
 80073fa:	1c02      	adds	r2, r0, #0
 80073fc:	193b      	adds	r3, r7, r4
 80073fe:	605a      	str	r2, [r3, #4]
				return pos;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	193a      	adds	r2, r7, r4
 8007404:	ca03      	ldmia	r2!, {r0, r1}
 8007406:	c303      	stmia	r3!, {r0, r1}
 8007408:	e029      	b.n	800745e <GetJustLatLon+0xe2>
				break;
			}

			for (ii = 0; ii <= 127; ii++)
 800740a:	4b17      	ldr	r3, [pc, #92]	@ (8007468 <GetJustLatLon+0xec>)
 800740c:	2200      	movs	r2, #0
 800740e:	801a      	strh	r2, [r3, #0]
 8007410:	e00d      	b.n	800742e <GetJustLatLon+0xb2>
				buffer[ii] = 0;
 8007412:	4b15      	ldr	r3, [pc, #84]	@ (8007468 <GetJustLatLon+0xec>)
 8007414:	881b      	ldrh	r3, [r3, #0]
 8007416:	b29b      	uxth	r3, r3
 8007418:	001a      	movs	r2, r3
 800741a:	4b14      	ldr	r3, [pc, #80]	@ (800746c <GetJustLatLon+0xf0>)
 800741c:	2100      	movs	r1, #0
 800741e:	5499      	strb	r1, [r3, r2]
			for (ii = 0; ii <= 127; ii++)
 8007420:	4b11      	ldr	r3, [pc, #68]	@ (8007468 <GetJustLatLon+0xec>)
 8007422:	881b      	ldrh	r3, [r3, #0]
 8007424:	b29b      	uxth	r3, r3
 8007426:	3301      	adds	r3, #1
 8007428:	b29a      	uxth	r2, r3
 800742a:	4b0f      	ldr	r3, [pc, #60]	@ (8007468 <GetJustLatLon+0xec>)
 800742c:	801a      	strh	r2, [r3, #0]
 800742e:	4b0e      	ldr	r3, [pc, #56]	@ (8007468 <GetJustLatLon+0xec>)
 8007430:	881b      	ldrh	r3, [r3, #0]
 8007432:	b29b      	uxth	r3, r3
 8007434:	2b7f      	cmp	r3, #127	@ 0x7f
 8007436:	d9ec      	bls.n	8007412 <GetJustLatLon+0x96>
		}
		gpsI++;
 8007438:	69fb      	ldr	r3, [r7, #28]
 800743a:	3301      	adds	r3, #1
 800743c:	61fb      	str	r3, [r7, #28]
	while (HAL_UART_Receive(&huart1, &(buffer[gpsI]), 1, 1000) == HAL_OK || 1) {
 800743e:	69fa      	ldr	r2, [r7, #28]
 8007440:	4b0a      	ldr	r3, [pc, #40]	@ (800746c <GetJustLatLon+0xf0>)
 8007442:	18d1      	adds	r1, r2, r3
 8007444:	23fa      	movs	r3, #250	@ 0xfa
 8007446:	009b      	lsls	r3, r3, #2
 8007448:	480c      	ldr	r0, [pc, #48]	@ (800747c <GetJustLatLon+0x100>)
 800744a:	2201      	movs	r2, #1
 800744c:	f005 fd38 	bl	800cec0 <HAL_UART_Receive>
		if (buffer[gpsI] == '$') {
 8007450:	4a06      	ldr	r2, [pc, #24]	@ (800746c <GetJustLatLon+0xf0>)
 8007452:	69fb      	ldr	r3, [r7, #28]
 8007454:	18d3      	adds	r3, r2, r3
 8007456:	781b      	ldrb	r3, [r3, #0]
 8007458:	2b24      	cmp	r3, #36	@ 0x24
 800745a:	d1b4      	bne.n	80073c6 <GetJustLatLon+0x4a>
 800745c:	e797      	b.n	800738e <GetJustLatLon+0x12>
				return pos;
 800745e:	46c0      	nop			@ (mov r8, r8)

	}

}
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	46bd      	mov	sp, r7
 8007464:	b009      	add	sp, #36	@ 0x24
 8007466:	bd90      	pop	{r4, r7, pc}
 8007468:	200003ec 	.word	0x200003ec
 800746c:	20000440 	.word	0x20000440
 8007470:	200003f0 	.word	0x200003f0
 8007474:	20000400 	.word	0x20000400
 8007478:	20000408 	.word	0x20000408
 800747c:	200013ac 	.word	0x200013ac

08007480 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8007484:	b672      	cpsid	i
}
 8007486:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8007488:	46c0      	nop			@ (mov r8, r8)
 800748a:	e7fd      	b.n	8007488 <Error_Handler+0x8>

0800748c <minmea_isfield>:
        return false;

    return true;
}

static inline bool minmea_isfield(char c) {
 800748c:	b580      	push	{r7, lr}
 800748e:	b082      	sub	sp, #8
 8007490:	af00      	add	r7, sp, #0
 8007492:	0002      	movs	r2, r0
 8007494:	1dfb      	adds	r3, r7, #7
 8007496:	701a      	strb	r2, [r3, #0]
    return isprint((unsigned char) c) && c != ',' && c != '*';
 8007498:	1dfb      	adds	r3, r7, #7
 800749a:	781b      	ldrb	r3, [r3, #0]
 800749c:	1c5a      	adds	r2, r3, #1
 800749e:	4b0d      	ldr	r3, [pc, #52]	@ (80074d4 <minmea_isfield+0x48>)
 80074a0:	18d3      	adds	r3, r2, r3
 80074a2:	781b      	ldrb	r3, [r3, #0]
 80074a4:	001a      	movs	r2, r3
 80074a6:	2397      	movs	r3, #151	@ 0x97
 80074a8:	4013      	ands	r3, r2
 80074aa:	d009      	beq.n	80074c0 <minmea_isfield+0x34>
 80074ac:	1dfb      	adds	r3, r7, #7
 80074ae:	781b      	ldrb	r3, [r3, #0]
 80074b0:	2b2c      	cmp	r3, #44	@ 0x2c
 80074b2:	d005      	beq.n	80074c0 <minmea_isfield+0x34>
 80074b4:	1dfb      	adds	r3, r7, #7
 80074b6:	781b      	ldrb	r3, [r3, #0]
 80074b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80074ba:	d001      	beq.n	80074c0 <minmea_isfield+0x34>
 80074bc:	2301      	movs	r3, #1
 80074be:	e000      	b.n	80074c2 <minmea_isfield+0x36>
 80074c0:	2300      	movs	r3, #0
 80074c2:	1c1a      	adds	r2, r3, #0
 80074c4:	2301      	movs	r3, #1
 80074c6:	4013      	ands	r3, r2
 80074c8:	b2db      	uxtb	r3, r3
}
 80074ca:	0018      	movs	r0, r3
 80074cc:	46bd      	mov	sp, r7
 80074ce:	b002      	add	sp, #8
 80074d0:	bd80      	pop	{r7, pc}
 80074d2:	46c0      	nop			@ (mov r8, r8)
 80074d4:	0801c3d0 	.word	0x0801c3d0

080074d8 <minmea_scan>:

bool minmea_scan(const char *sentence, const char *format, ...)
{
 80074d8:	b40e      	push	{r1, r2, r3}
 80074da:	b5b0      	push	{r4, r5, r7, lr}
 80074dc:	b0a7      	sub	sp, #156	@ 0x9c
 80074de:	af00      	add	r7, sp, #0
 80074e0:	6078      	str	r0, [r7, #4]
    bool result = false;
 80074e2:	2397      	movs	r3, #151	@ 0x97
 80074e4:	18fb      	adds	r3, r7, r3
 80074e6:	2200      	movs	r2, #0
 80074e8:	701a      	strb	r2, [r3, #0]
    bool optional = false;
 80074ea:	2396      	movs	r3, #150	@ 0x96
 80074ec:	18fb      	adds	r3, r7, r3
 80074ee:	2200      	movs	r2, #0
 80074f0:	701a      	strb	r2, [r3, #0]
    va_list ap;
    va_start(ap, format);
 80074f2:	23a8      	movs	r3, #168	@ 0xa8
 80074f4:	2208      	movs	r2, #8
 80074f6:	189b      	adds	r3, r3, r2
 80074f8:	19db      	adds	r3, r3, r7
 80074fa:	62fb      	str	r3, [r7, #44]	@ 0x2c

    const char *field = sentence;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2290      	movs	r2, #144	@ 0x90
 8007500:	18ba      	adds	r2, r7, r2
 8007502:	6013      	str	r3, [r2, #0]
        } else { \
            field = NULL; \
        } \
    } while (0)

    while (*format) {
 8007504:	e345      	b.n	8007b92 <minmea_scan+0x6ba>
        char type = *format++;
 8007506:	21a4      	movs	r1, #164	@ 0xa4
 8007508:	2008      	movs	r0, #8
 800750a:	180b      	adds	r3, r1, r0
 800750c:	19db      	adds	r3, r3, r7
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	1c5a      	adds	r2, r3, #1
 8007512:	1809      	adds	r1, r1, r0
 8007514:	19c9      	adds	r1, r1, r7
 8007516:	600a      	str	r2, [r1, #0]
 8007518:	2143      	movs	r1, #67	@ 0x43
 800751a:	187a      	adds	r2, r7, r1
 800751c:	781b      	ldrb	r3, [r3, #0]
 800751e:	7013      	strb	r3, [r2, #0]

        if (type == ';') {
 8007520:	187b      	adds	r3, r7, r1
 8007522:	781b      	ldrb	r3, [r3, #0]
 8007524:	2b3b      	cmp	r3, #59	@ 0x3b
 8007526:	d104      	bne.n	8007532 <minmea_scan+0x5a>
            // All further fields are optional.
            optional = true;
 8007528:	2396      	movs	r3, #150	@ 0x96
 800752a:	18fb      	adds	r3, r7, r3
 800752c:	2201      	movs	r2, #1
 800752e:	701a      	strb	r2, [r3, #0]
            continue;
 8007530:	e32f      	b.n	8007b92 <minmea_scan+0x6ba>
        }

        if (!field && !optional) {
 8007532:	2390      	movs	r3, #144	@ 0x90
 8007534:	18fb      	adds	r3, r7, r3
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d108      	bne.n	800754e <minmea_scan+0x76>
 800753c:	2396      	movs	r3, #150	@ 0x96
 800753e:	18fb      	adds	r3, r7, r3
 8007540:	781b      	ldrb	r3, [r3, #0]
 8007542:	2201      	movs	r2, #1
 8007544:	4053      	eors	r3, r2
 8007546:	b2db      	uxtb	r3, r3
 8007548:	2b00      	cmp	r3, #0
 800754a:	d000      	beq.n	800754e <minmea_scan+0x76>
 800754c:	e32f      	b.n	8007bae <minmea_scan+0x6d6>
            // Field requested but we ran out if input. Bail out.
            goto parse_error;
        }

        switch (type) {
 800754e:	2343      	movs	r3, #67	@ 0x43
 8007550:	18fb      	adds	r3, r7, r3
 8007552:	781b      	ldrb	r3, [r3, #0]
 8007554:	3b44      	subs	r3, #68	@ 0x44
 8007556:	2b30      	cmp	r3, #48	@ 0x30
 8007558:	d900      	bls.n	800755c <minmea_scan+0x84>
 800755a:	e32a      	b.n	8007bb2 <minmea_scan+0x6da>
 800755c:	009a      	lsls	r2, r3, #2
 800755e:	4bbd      	ldr	r3, [pc, #756]	@ (8007854 <minmea_scan+0x37c>)
 8007560:	18d3      	adds	r3, r2, r3
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	469f      	mov	pc, r3
            case 'c': { // Single character field (char).
                char value = '\0';
 8007566:	258f      	movs	r5, #143	@ 0x8f
 8007568:	197b      	adds	r3, r7, r5
 800756a:	2200      	movs	r2, #0
 800756c:	701a      	strb	r2, [r3, #0]

                if (field && minmea_isfield(*field))
 800756e:	2490      	movs	r4, #144	@ 0x90
 8007570:	193b      	adds	r3, r7, r4
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d00c      	beq.n	8007592 <minmea_scan+0xba>
 8007578:	193b      	adds	r3, r7, r4
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	781b      	ldrb	r3, [r3, #0]
 800757e:	0018      	movs	r0, r3
 8007580:	f7ff ff84 	bl	800748c <minmea_isfield>
 8007584:	1e03      	subs	r3, r0, #0
 8007586:	d004      	beq.n	8007592 <minmea_scan+0xba>
                    value = *field;
 8007588:	197b      	adds	r3, r7, r5
 800758a:	193a      	adds	r2, r7, r4
 800758c:	6812      	ldr	r2, [r2, #0]
 800758e:	7812      	ldrb	r2, [r2, #0]
 8007590:	701a      	strb	r2, [r3, #0]

                *va_arg(ap, char *) = value;
 8007592:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007594:	1d1a      	adds	r2, r3, #4
 8007596:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	228f      	movs	r2, #143	@ 0x8f
 800759c:	18ba      	adds	r2, r7, r2
 800759e:	7812      	ldrb	r2, [r2, #0]
 80075a0:	701a      	strb	r2, [r3, #0]
            } break;
 80075a2:	e2db      	b.n	8007b5c <minmea_scan+0x684>

            case 'd': { // Single character direction field (int).
                int value = 0;
 80075a4:	2300      	movs	r3, #0
 80075a6:	2288      	movs	r2, #136	@ 0x88
 80075a8:	18ba      	adds	r2, r7, r2
 80075aa:	6013      	str	r3, [r2, #0]

                if (field && minmea_isfield(*field)) {
 80075ac:	2490      	movs	r4, #144	@ 0x90
 80075ae:	193b      	adds	r3, r7, r4
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d022      	beq.n	80075fc <minmea_scan+0x124>
 80075b6:	193b      	adds	r3, r7, r4
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	781b      	ldrb	r3, [r3, #0]
 80075bc:	0018      	movs	r0, r3
 80075be:	f7ff ff65 	bl	800748c <minmea_isfield>
 80075c2:	1e03      	subs	r3, r0, #0
 80075c4:	d01a      	beq.n	80075fc <minmea_scan+0x124>
                    switch (*field) {
 80075c6:	193b      	adds	r3, r7, r4
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	781b      	ldrb	r3, [r3, #0]
 80075cc:	2b57      	cmp	r3, #87	@ 0x57
 80075ce:	d00f      	beq.n	80075f0 <minmea_scan+0x118>
 80075d0:	dd00      	ble.n	80075d4 <minmea_scan+0xfc>
 80075d2:	e2f0      	b.n	8007bb6 <minmea_scan+0x6de>
 80075d4:	2b53      	cmp	r3, #83	@ 0x53
 80075d6:	d00b      	beq.n	80075f0 <minmea_scan+0x118>
 80075d8:	dd00      	ble.n	80075dc <minmea_scan+0x104>
 80075da:	e2ec      	b.n	8007bb6 <minmea_scan+0x6de>
 80075dc:	2b45      	cmp	r3, #69	@ 0x45
 80075de:	d002      	beq.n	80075e6 <minmea_scan+0x10e>
 80075e0:	2b4e      	cmp	r3, #78	@ 0x4e
 80075e2:	d000      	beq.n	80075e6 <minmea_scan+0x10e>
 80075e4:	e2e7      	b.n	8007bb6 <minmea_scan+0x6de>
                        case 'N':
                        case 'E':
                            value = 1;
 80075e6:	2301      	movs	r3, #1
 80075e8:	2288      	movs	r2, #136	@ 0x88
 80075ea:	18ba      	adds	r2, r7, r2
 80075ec:	6013      	str	r3, [r2, #0]
                            break;
 80075ee:	e005      	b.n	80075fc <minmea_scan+0x124>
                        case 'S':
                        case 'W':
                            value = -1;
 80075f0:	2301      	movs	r3, #1
 80075f2:	425b      	negs	r3, r3
 80075f4:	2288      	movs	r2, #136	@ 0x88
 80075f6:	18ba      	adds	r2, r7, r2
 80075f8:	6013      	str	r3, [r2, #0]
                            break;
 80075fa:	46c0      	nop			@ (mov r8, r8)
                        default:
                            goto parse_error;
                    }
                }

                *va_arg(ap, int *) = value;
 80075fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075fe:	1d1a      	adds	r2, r3, #4
 8007600:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	2288      	movs	r2, #136	@ 0x88
 8007606:	18ba      	adds	r2, r7, r2
 8007608:	6812      	ldr	r2, [r2, #0]
 800760a:	601a      	str	r2, [r3, #0]
            } break;
 800760c:	e2a6      	b.n	8007b5c <minmea_scan+0x684>

            case 'f': { // Fractional value with scale (struct minmea_float).
                int sign = 0;
 800760e:	2300      	movs	r3, #0
 8007610:	2284      	movs	r2, #132	@ 0x84
 8007612:	18ba      	adds	r2, r7, r2
 8007614:	6013      	str	r3, [r2, #0]
                int_least32_t value = -1;
 8007616:	2301      	movs	r3, #1
 8007618:	425b      	negs	r3, r3
 800761a:	2280      	movs	r2, #128	@ 0x80
 800761c:	18ba      	adds	r2, r7, r2
 800761e:	6013      	str	r3, [r2, #0]
                int_least32_t scale = 0;
 8007620:	2300      	movs	r3, #0
 8007622:	67fb      	str	r3, [r7, #124]	@ 0x7c

                if (field) {
 8007624:	2390      	movs	r3, #144	@ 0x90
 8007626:	18fb      	adds	r3, r7, r3
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d100      	bne.n	8007630 <minmea_scan+0x158>
 800762e:	e088      	b.n	8007742 <minmea_scan+0x26a>
                    while (minmea_isfield(*field)) {
 8007630:	e07d      	b.n	800772e <minmea_scan+0x256>
                        if (*field == '+' && !sign && value == -1) {
 8007632:	2390      	movs	r3, #144	@ 0x90
 8007634:	18fb      	adds	r3, r7, r3
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	781b      	ldrb	r3, [r3, #0]
 800763a:	2b2b      	cmp	r3, #43	@ 0x2b
 800763c:	d10d      	bne.n	800765a <minmea_scan+0x182>
 800763e:	2284      	movs	r2, #132	@ 0x84
 8007640:	18bb      	adds	r3, r7, r2
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d108      	bne.n	800765a <minmea_scan+0x182>
 8007648:	2380      	movs	r3, #128	@ 0x80
 800764a:	18fb      	adds	r3, r7, r3
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	3301      	adds	r3, #1
 8007650:	d103      	bne.n	800765a <minmea_scan+0x182>
                            sign = 1;
 8007652:	2301      	movs	r3, #1
 8007654:	18ba      	adds	r2, r7, r2
 8007656:	6013      	str	r3, [r2, #0]
 8007658:	e063      	b.n	8007722 <minmea_scan+0x24a>
                        } else if (*field == '-' && !sign && value == -1) {
 800765a:	2390      	movs	r3, #144	@ 0x90
 800765c:	18fb      	adds	r3, r7, r3
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	781b      	ldrb	r3, [r3, #0]
 8007662:	2b2d      	cmp	r3, #45	@ 0x2d
 8007664:	d10e      	bne.n	8007684 <minmea_scan+0x1ac>
 8007666:	2284      	movs	r2, #132	@ 0x84
 8007668:	18bb      	adds	r3, r7, r2
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d109      	bne.n	8007684 <minmea_scan+0x1ac>
 8007670:	2380      	movs	r3, #128	@ 0x80
 8007672:	18fb      	adds	r3, r7, r3
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	3301      	adds	r3, #1
 8007678:	d104      	bne.n	8007684 <minmea_scan+0x1ac>
                            sign = -1;
 800767a:	2301      	movs	r3, #1
 800767c:	425b      	negs	r3, r3
 800767e:	18ba      	adds	r2, r7, r2
 8007680:	6013      	str	r3, [r2, #0]
 8007682:	e04e      	b.n	8007722 <minmea_scan+0x24a>
                        } else if (isdigit((unsigned char) *field)) {
 8007684:	2190      	movs	r1, #144	@ 0x90
 8007686:	187b      	adds	r3, r7, r1
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	781b      	ldrb	r3, [r3, #0]
 800768c:	1c5a      	adds	r2, r3, #1
 800768e:	4b72      	ldr	r3, [pc, #456]	@ (8007858 <minmea_scan+0x380>)
 8007690:	18d3      	adds	r3, r2, r3
 8007692:	781b      	ldrb	r3, [r3, #0]
 8007694:	001a      	movs	r2, r3
 8007696:	2304      	movs	r3, #4
 8007698:	4013      	ands	r3, r2
 800769a:	d035      	beq.n	8007708 <minmea_scan+0x230>
                            int digit = *field - '0';
 800769c:	187b      	adds	r3, r7, r1
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	781b      	ldrb	r3, [r3, #0]
 80076a2:	3b30      	subs	r3, #48	@ 0x30
 80076a4:	63bb      	str	r3, [r7, #56]	@ 0x38
                            if (value == -1)
 80076a6:	2280      	movs	r2, #128	@ 0x80
 80076a8:	18bb      	adds	r3, r7, r2
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	3301      	adds	r3, #1
 80076ae:	d102      	bne.n	80076b6 <minmea_scan+0x1de>
                                value = 0;
 80076b0:	2300      	movs	r3, #0
 80076b2:	18ba      	adds	r2, r7, r2
 80076b4:	6013      	str	r3, [r2, #0]
                            if (value > (INT_LEAST32_MAX-digit) / 10) {
 80076b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076b8:	4a68      	ldr	r2, [pc, #416]	@ (800785c <minmea_scan+0x384>)
 80076ba:	1ad3      	subs	r3, r2, r3
 80076bc:	210a      	movs	r1, #10
 80076be:	0018      	movs	r0, r3
 80076c0:	f7f8 fdd2 	bl	8000268 <__divsi3>
 80076c4:	0003      	movs	r3, r0
 80076c6:	001a      	movs	r2, r3
 80076c8:	2380      	movs	r3, #128	@ 0x80
 80076ca:	18fb      	adds	r3, r7, r3
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4293      	cmp	r3, r2
 80076d0:	dd04      	ble.n	80076dc <minmea_scan+0x204>
                                /* we ran out of bits, what do we do? */
                                if (scale) {
 80076d2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d100      	bne.n	80076da <minmea_scan+0x202>
 80076d8:	e26f      	b.n	8007bba <minmea_scan+0x6e2>
                                    /* truncate extra precision */
                                    break;
 80076da:	e032      	b.n	8007742 <minmea_scan+0x26a>
                                } else {
                                    /* integer overflow. bail out. */
                                    goto parse_error;
                                }
                            }
                            value = (10 * value) + digit;
 80076dc:	2180      	movs	r1, #128	@ 0x80
 80076de:	187b      	adds	r3, r7, r1
 80076e0:	681a      	ldr	r2, [r3, #0]
 80076e2:	0013      	movs	r3, r2
 80076e4:	009b      	lsls	r3, r3, #2
 80076e6:	189b      	adds	r3, r3, r2
 80076e8:	005b      	lsls	r3, r3, #1
 80076ea:	001a      	movs	r2, r3
 80076ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076ee:	189b      	adds	r3, r3, r2
 80076f0:	187a      	adds	r2, r7, r1
 80076f2:	6013      	str	r3, [r2, #0]
                            if (scale)
 80076f4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d013      	beq.n	8007722 <minmea_scan+0x24a>
                                scale *= 10;
 80076fa:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80076fc:	0013      	movs	r3, r2
 80076fe:	009b      	lsls	r3, r3, #2
 8007700:	189b      	adds	r3, r3, r2
 8007702:	005b      	lsls	r3, r3, #1
 8007704:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007706:	e00c      	b.n	8007722 <minmea_scan+0x24a>
                        } else if (*field == '.' && scale == 0) {
 8007708:	2390      	movs	r3, #144	@ 0x90
 800770a:	18fb      	adds	r3, r7, r3
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	781b      	ldrb	r3, [r3, #0]
 8007710:	2b2e      	cmp	r3, #46	@ 0x2e
 8007712:	d000      	beq.n	8007716 <minmea_scan+0x23e>
 8007714:	e253      	b.n	8007bbe <minmea_scan+0x6e6>
 8007716:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007718:	2b00      	cmp	r3, #0
 800771a:	d000      	beq.n	800771e <minmea_scan+0x246>
 800771c:	e24f      	b.n	8007bbe <minmea_scan+0x6e6>
                            scale = 1;
 800771e:	2301      	movs	r3, #1
 8007720:	67fb      	str	r3, [r7, #124]	@ 0x7c
                        } else {
                            goto parse_error;
                        }
                        field++;
 8007722:	2290      	movs	r2, #144	@ 0x90
 8007724:	18bb      	adds	r3, r7, r2
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	3301      	adds	r3, #1
 800772a:	18ba      	adds	r2, r7, r2
 800772c:	6013      	str	r3, [r2, #0]
                    while (minmea_isfield(*field)) {
 800772e:	2390      	movs	r3, #144	@ 0x90
 8007730:	18fb      	adds	r3, r7, r3
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	781b      	ldrb	r3, [r3, #0]
 8007736:	0018      	movs	r0, r3
 8007738:	f7ff fea8 	bl	800748c <minmea_isfield>
 800773c:	1e03      	subs	r3, r0, #0
 800773e:	d000      	beq.n	8007742 <minmea_scan+0x26a>
 8007740:	e777      	b.n	8007632 <minmea_scan+0x15a>
                    }
                }

                if ((sign || scale) && value == -1)
 8007742:	2384      	movs	r3, #132	@ 0x84
 8007744:	18fb      	adds	r3, r7, r3
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d102      	bne.n	8007752 <minmea_scan+0x27a>
 800774c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800774e:	2b00      	cmp	r3, #0
 8007750:	d005      	beq.n	800775e <minmea_scan+0x286>
 8007752:	2380      	movs	r3, #128	@ 0x80
 8007754:	18fb      	adds	r3, r7, r3
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	3301      	adds	r3, #1
 800775a:	d100      	bne.n	800775e <minmea_scan+0x286>
 800775c:	e231      	b.n	8007bc2 <minmea_scan+0x6ea>
                    goto parse_error;

                if (value == -1) {
 800775e:	2280      	movs	r2, #128	@ 0x80
 8007760:	18bb      	adds	r3, r7, r2
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	3301      	adds	r3, #1
 8007766:	d105      	bne.n	8007774 <minmea_scan+0x29c>
                    /* No digits were scanned. */
                    value = 0;
 8007768:	2300      	movs	r3, #0
 800776a:	18ba      	adds	r2, r7, r2
 800776c:	6013      	str	r3, [r2, #0]
                    scale = 0;
 800776e:	2300      	movs	r3, #0
 8007770:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007772:	e004      	b.n	800777e <minmea_scan+0x2a6>
                } else if (scale == 0) {
 8007774:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007776:	2b00      	cmp	r3, #0
 8007778:	d101      	bne.n	800777e <minmea_scan+0x2a6>
                    /* No decimal point. */
                    scale = 1;
 800777a:	2301      	movs	r3, #1
 800777c:	67fb      	str	r3, [r7, #124]	@ 0x7c
                }
                if (sign)
 800777e:	2284      	movs	r2, #132	@ 0x84
 8007780:	18bb      	adds	r3, r7, r2
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d007      	beq.n	8007798 <minmea_scan+0x2c0>
                    value *= sign;
 8007788:	2180      	movs	r1, #128	@ 0x80
 800778a:	187b      	adds	r3, r7, r1
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	18ba      	adds	r2, r7, r2
 8007790:	6812      	ldr	r2, [r2, #0]
 8007792:	4353      	muls	r3, r2
 8007794:	187a      	adds	r2, r7, r1
 8007796:	6013      	str	r3, [r2, #0]

                *va_arg(ap, struct minmea_float *) = (struct minmea_float) {value, scale};
 8007798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800779a:	1d1a      	adds	r2, r3, #4
 800779c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	2280      	movs	r2, #128	@ 0x80
 80077a2:	18ba      	adds	r2, r7, r2
 80077a4:	6812      	ldr	r2, [r2, #0]
 80077a6:	601a      	str	r2, [r3, #0]
 80077a8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80077aa:	605a      	str	r2, [r3, #4]
            } break;
 80077ac:	e1d6      	b.n	8007b5c <minmea_scan+0x684>

            case 'i': { // Integer value, default 0 (int).
                int value = 0;
 80077ae:	2300      	movs	r3, #0
 80077b0:	67bb      	str	r3, [r7, #120]	@ 0x78

                if (field) {
 80077b2:	2290      	movs	r2, #144	@ 0x90
 80077b4:	18bb      	adds	r3, r7, r2
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d011      	beq.n	80077e0 <minmea_scan+0x308>
                    char *endptr;
                    value = strtol(field, &endptr, 10);
 80077bc:	2320      	movs	r3, #32
 80077be:	18f9      	adds	r1, r7, r3
 80077c0:	18bb      	adds	r3, r7, r2
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	220a      	movs	r2, #10
 80077c6:	0018      	movs	r0, r3
 80077c8:	f007 f9b2 	bl	800eb30 <strtol>
 80077cc:	0003      	movs	r3, r0
 80077ce:	67bb      	str	r3, [r7, #120]	@ 0x78
                    if (minmea_isfield(*endptr))
 80077d0:	6a3b      	ldr	r3, [r7, #32]
 80077d2:	781b      	ldrb	r3, [r3, #0]
 80077d4:	0018      	movs	r0, r3
 80077d6:	f7ff fe59 	bl	800748c <minmea_isfield>
 80077da:	1e03      	subs	r3, r0, #0
 80077dc:	d000      	beq.n	80077e0 <minmea_scan+0x308>
 80077de:	e1f2      	b.n	8007bc6 <minmea_scan+0x6ee>
                        goto parse_error;
                }

                *va_arg(ap, int *) = value;
 80077e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077e2:	1d1a      	adds	r2, r3, #4
 80077e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80077ea:	601a      	str	r2, [r3, #0]
            } break;
 80077ec:	e1b6      	b.n	8007b5c <minmea_scan+0x684>

            case 's': { // String value (char *).
                char *buf = va_arg(ap, char *);
 80077ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077f0:	1d1a      	adds	r2, r3, #4
 80077f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	677b      	str	r3, [r7, #116]	@ 0x74

                if (field) {
 80077f8:	2390      	movs	r3, #144	@ 0x90
 80077fa:	18fb      	adds	r3, r7, r3
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d014      	beq.n	800782c <minmea_scan+0x354>
                    while (minmea_isfield(*field))
 8007802:	e00a      	b.n	800781a <minmea_scan+0x342>
                        *buf++ = *field++;
 8007804:	2190      	movs	r1, #144	@ 0x90
 8007806:	187b      	adds	r3, r7, r1
 8007808:	681a      	ldr	r2, [r3, #0]
 800780a:	1c53      	adds	r3, r2, #1
 800780c:	1879      	adds	r1, r7, r1
 800780e:	600b      	str	r3, [r1, #0]
 8007810:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007812:	1c59      	adds	r1, r3, #1
 8007814:	6779      	str	r1, [r7, #116]	@ 0x74
 8007816:	7812      	ldrb	r2, [r2, #0]
 8007818:	701a      	strb	r2, [r3, #0]
                    while (minmea_isfield(*field))
 800781a:	2390      	movs	r3, #144	@ 0x90
 800781c:	18fb      	adds	r3, r7, r3
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	781b      	ldrb	r3, [r3, #0]
 8007822:	0018      	movs	r0, r3
 8007824:	f7ff fe32 	bl	800748c <minmea_isfield>
 8007828:	1e03      	subs	r3, r0, #0
 800782a:	d1eb      	bne.n	8007804 <minmea_scan+0x32c>
                }

                *buf = '\0';
 800782c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800782e:	2200      	movs	r2, #0
 8007830:	701a      	strb	r2, [r3, #0]
            } break;
 8007832:	e193      	b.n	8007b5c <minmea_scan+0x684>

            case 't': { // NMEA talker+sentence identifier (char *).
                // This field is always mandatory.
                if (!field)
 8007834:	2290      	movs	r2, #144	@ 0x90
 8007836:	18bb      	adds	r3, r7, r2
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d100      	bne.n	8007840 <minmea_scan+0x368>
 800783e:	e1c4      	b.n	8007bca <minmea_scan+0x6f2>
                    goto parse_error;

                if (field[0] != '$')
 8007840:	18bb      	adds	r3, r7, r2
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	781b      	ldrb	r3, [r3, #0]
 8007846:	2b24      	cmp	r3, #36	@ 0x24
 8007848:	d000      	beq.n	800784c <minmea_scan+0x374>
 800784a:	e1c0      	b.n	8007bce <minmea_scan+0x6f6>
                    goto parse_error;
                for (int i=0; i<5; i++)
 800784c:	2300      	movs	r3, #0
 800784e:	673b      	str	r3, [r7, #112]	@ 0x70
 8007850:	e01c      	b.n	800788c <minmea_scan+0x3b4>
 8007852:	46c0      	nop			@ (mov r8, r8)
 8007854:	0801bfb4 	.word	0x0801bfb4
 8007858:	0801c3d0 	.word	0x0801c3d0
 800785c:	7fffffff 	.word	0x7fffffff
                    if (!minmea_isfield(field[1+i]))
 8007860:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007862:	3301      	adds	r3, #1
 8007864:	001a      	movs	r2, r3
 8007866:	2390      	movs	r3, #144	@ 0x90
 8007868:	18fb      	adds	r3, r7, r3
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	189b      	adds	r3, r3, r2
 800786e:	781b      	ldrb	r3, [r3, #0]
 8007870:	0018      	movs	r0, r3
 8007872:	f7ff fe0b 	bl	800748c <minmea_isfield>
 8007876:	0003      	movs	r3, r0
 8007878:	001a      	movs	r2, r3
 800787a:	2301      	movs	r3, #1
 800787c:	4053      	eors	r3, r2
 800787e:	b2db      	uxtb	r3, r3
 8007880:	2b00      	cmp	r3, #0
 8007882:	d000      	beq.n	8007886 <minmea_scan+0x3ae>
 8007884:	e1a5      	b.n	8007bd2 <minmea_scan+0x6fa>
                for (int i=0; i<5; i++)
 8007886:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007888:	3301      	adds	r3, #1
 800788a:	673b      	str	r3, [r7, #112]	@ 0x70
 800788c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800788e:	2b04      	cmp	r3, #4
 8007890:	dde6      	ble.n	8007860 <minmea_scan+0x388>
                        goto parse_error;

                char *buf = va_arg(ap, char *);
 8007892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007894:	1d1a      	adds	r2, r3, #4
 8007896:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	63fb      	str	r3, [r7, #60]	@ 0x3c
                memcpy(buf, field+1, 5);
 800789c:	2390      	movs	r3, #144	@ 0x90
 800789e:	18fb      	adds	r3, r7, r3
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	1c59      	adds	r1, r3, #1
 80078a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80078a6:	2205      	movs	r2, #5
 80078a8:	0018      	movs	r0, r3
 80078aa:	f007 fbc4 	bl	800f036 <memcpy>
                buf[5] = '\0';
 80078ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80078b0:	3305      	adds	r3, #5
 80078b2:	2200      	movs	r2, #0
 80078b4:	701a      	strb	r2, [r3, #0]
            } break;
 80078b6:	e151      	b.n	8007b5c <minmea_scan+0x684>

            case 'D': { // Date (int, int, int), -1 if empty.
                struct minmea_date *date = va_arg(ap, struct minmea_date *);
 80078b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078ba:	1d1a      	adds	r2, r3, #4
 80078bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	633b      	str	r3, [r7, #48]	@ 0x30

                int d = -1, m = -1, y = -1;
 80078c2:	2301      	movs	r3, #1
 80078c4:	425b      	negs	r3, r3
 80078c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80078c8:	2301      	movs	r3, #1
 80078ca:	425b      	negs	r3, r3
 80078cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80078ce:	2301      	movs	r3, #1
 80078d0:	425b      	negs	r3, r3
 80078d2:	667b      	str	r3, [r7, #100]	@ 0x64

                if (field && minmea_isfield(*field)) {
 80078d4:	2290      	movs	r2, #144	@ 0x90
 80078d6:	18bb      	adds	r3, r7, r2
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d067      	beq.n	80079ae <minmea_scan+0x4d6>
 80078de:	18bb      	adds	r3, r7, r2
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	781b      	ldrb	r3, [r3, #0]
 80078e4:	0018      	movs	r0, r3
 80078e6:	f7ff fdd1 	bl	800748c <minmea_isfield>
 80078ea:	1e03      	subs	r3, r0, #0
 80078ec:	d05f      	beq.n	80079ae <minmea_scan+0x4d6>
                    // Always six digits.
                    for (int i=0; i<6; i++)
 80078ee:	2300      	movs	r3, #0
 80078f0:	663b      	str	r3, [r7, #96]	@ 0x60
 80078f2:	e011      	b.n	8007918 <minmea_scan+0x440>
                        if (!isdigit((unsigned char) field[i]))
 80078f4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80078f6:	2290      	movs	r2, #144	@ 0x90
 80078f8:	18ba      	adds	r2, r7, r2
 80078fa:	6812      	ldr	r2, [r2, #0]
 80078fc:	18d3      	adds	r3, r2, r3
 80078fe:	781b      	ldrb	r3, [r3, #0]
 8007900:	1c5a      	adds	r2, r3, #1
 8007902:	4bbb      	ldr	r3, [pc, #748]	@ (8007bf0 <minmea_scan+0x718>)
 8007904:	18d3      	adds	r3, r2, r3
 8007906:	781b      	ldrb	r3, [r3, #0]
 8007908:	001a      	movs	r2, r3
 800790a:	2304      	movs	r3, #4
 800790c:	4013      	ands	r3, r2
 800790e:	d100      	bne.n	8007912 <minmea_scan+0x43a>
 8007910:	e161      	b.n	8007bd6 <minmea_scan+0x6fe>
                    for (int i=0; i<6; i++)
 8007912:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007914:	3301      	adds	r3, #1
 8007916:	663b      	str	r3, [r7, #96]	@ 0x60
 8007918:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800791a:	2b05      	cmp	r3, #5
 800791c:	ddea      	ble.n	80078f4 <minmea_scan+0x41c>
                            goto parse_error;

                    d = strtol((char[]) {field[0], field[1], '\0'}, NULL, 10);
 800791e:	2490      	movs	r4, #144	@ 0x90
 8007920:	193b      	adds	r3, r7, r4
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	781a      	ldrb	r2, [r3, #0]
 8007926:	211c      	movs	r1, #28
 8007928:	187b      	adds	r3, r7, r1
 800792a:	701a      	strb	r2, [r3, #0]
 800792c:	193b      	adds	r3, r7, r4
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	3301      	adds	r3, #1
 8007932:	781a      	ldrb	r2, [r3, #0]
 8007934:	187b      	adds	r3, r7, r1
 8007936:	705a      	strb	r2, [r3, #1]
 8007938:	187b      	adds	r3, r7, r1
 800793a:	2200      	movs	r2, #0
 800793c:	709a      	strb	r2, [r3, #2]
 800793e:	187b      	adds	r3, r7, r1
 8007940:	220a      	movs	r2, #10
 8007942:	2100      	movs	r1, #0
 8007944:	0018      	movs	r0, r3
 8007946:	f007 f8f3 	bl	800eb30 <strtol>
 800794a:	0003      	movs	r3, r0
 800794c:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    m = strtol((char[]) {field[2], field[3], '\0'}, NULL, 10);
 800794e:	193b      	adds	r3, r7, r4
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	3302      	adds	r3, #2
 8007954:	781a      	ldrb	r2, [r3, #0]
 8007956:	2118      	movs	r1, #24
 8007958:	187b      	adds	r3, r7, r1
 800795a:	701a      	strb	r2, [r3, #0]
 800795c:	193b      	adds	r3, r7, r4
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	3303      	adds	r3, #3
 8007962:	781a      	ldrb	r2, [r3, #0]
 8007964:	187b      	adds	r3, r7, r1
 8007966:	705a      	strb	r2, [r3, #1]
 8007968:	187b      	adds	r3, r7, r1
 800796a:	2200      	movs	r2, #0
 800796c:	709a      	strb	r2, [r3, #2]
 800796e:	187b      	adds	r3, r7, r1
 8007970:	220a      	movs	r2, #10
 8007972:	2100      	movs	r1, #0
 8007974:	0018      	movs	r0, r3
 8007976:	f007 f8db 	bl	800eb30 <strtol>
 800797a:	0003      	movs	r3, r0
 800797c:	66bb      	str	r3, [r7, #104]	@ 0x68
                    y = strtol((char[]) {field[4], field[5], '\0'}, NULL, 10);
 800797e:	193b      	adds	r3, r7, r4
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	3304      	adds	r3, #4
 8007984:	781a      	ldrb	r2, [r3, #0]
 8007986:	2114      	movs	r1, #20
 8007988:	187b      	adds	r3, r7, r1
 800798a:	701a      	strb	r2, [r3, #0]
 800798c:	193b      	adds	r3, r7, r4
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	3305      	adds	r3, #5
 8007992:	781a      	ldrb	r2, [r3, #0]
 8007994:	187b      	adds	r3, r7, r1
 8007996:	705a      	strb	r2, [r3, #1]
 8007998:	187b      	adds	r3, r7, r1
 800799a:	2200      	movs	r2, #0
 800799c:	709a      	strb	r2, [r3, #2]
 800799e:	187b      	adds	r3, r7, r1
 80079a0:	220a      	movs	r2, #10
 80079a2:	2100      	movs	r1, #0
 80079a4:	0018      	movs	r0, r3
 80079a6:	f007 f8c3 	bl	800eb30 <strtol>
 80079aa:	0003      	movs	r3, r0
 80079ac:	667b      	str	r3, [r7, #100]	@ 0x64
                }

                date->day = d;
 80079ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079b0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80079b2:	601a      	str	r2, [r3, #0]
                date->month = m;
 80079b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079b6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80079b8:	605a      	str	r2, [r3, #4]
                date->year = y;
 80079ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079bc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80079be:	609a      	str	r2, [r3, #8]
            } break;
 80079c0:	e0cc      	b.n	8007b5c <minmea_scan+0x684>

            case 'T': { // Time (int, int, int, int), -1 if empty.
                struct minmea_time *time = va_arg(ap, struct minmea_time *);
 80079c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079c4:	1d1a      	adds	r2, r3, #4
 80079c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	637b      	str	r3, [r7, #52]	@ 0x34

                int h = -1, i = -1, s = -1, u = -1;
 80079cc:	2301      	movs	r3, #1
 80079ce:	425b      	negs	r3, r3
 80079d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80079d2:	2301      	movs	r3, #1
 80079d4:	425b      	negs	r3, r3
 80079d6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80079d8:	2301      	movs	r3, #1
 80079da:	425b      	negs	r3, r3
 80079dc:	657b      	str	r3, [r7, #84]	@ 0x54
 80079de:	2301      	movs	r3, #1
 80079e0:	425b      	negs	r3, r3
 80079e2:	653b      	str	r3, [r7, #80]	@ 0x50

                if (field && minmea_isfield(*field)) {
 80079e4:	2290      	movs	r2, #144	@ 0x90
 80079e6:	18bb      	adds	r3, r7, r2
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d100      	bne.n	80079f0 <minmea_scan+0x518>
 80079ee:	e0a7      	b.n	8007b40 <minmea_scan+0x668>
 80079f0:	18bb      	adds	r3, r7, r2
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	781b      	ldrb	r3, [r3, #0]
 80079f6:	0018      	movs	r0, r3
 80079f8:	f7ff fd48 	bl	800748c <minmea_isfield>
 80079fc:	1e03      	subs	r3, r0, #0
 80079fe:	d100      	bne.n	8007a02 <minmea_scan+0x52a>
 8007a00:	e09e      	b.n	8007b40 <minmea_scan+0x668>
                    // Minimum required: integer time.
                    for (int i=0; i<6; i++)
 8007a02:	2300      	movs	r3, #0
 8007a04:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007a06:	e011      	b.n	8007a2c <minmea_scan+0x554>
                        if (!isdigit((unsigned char) field[i]))
 8007a08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a0a:	2290      	movs	r2, #144	@ 0x90
 8007a0c:	18ba      	adds	r2, r7, r2
 8007a0e:	6812      	ldr	r2, [r2, #0]
 8007a10:	18d3      	adds	r3, r2, r3
 8007a12:	781b      	ldrb	r3, [r3, #0]
 8007a14:	1c5a      	adds	r2, r3, #1
 8007a16:	4b76      	ldr	r3, [pc, #472]	@ (8007bf0 <minmea_scan+0x718>)
 8007a18:	18d3      	adds	r3, r2, r3
 8007a1a:	781b      	ldrb	r3, [r3, #0]
 8007a1c:	001a      	movs	r2, r3
 8007a1e:	2304      	movs	r3, #4
 8007a20:	4013      	ands	r3, r2
 8007a22:	d100      	bne.n	8007a26 <minmea_scan+0x54e>
 8007a24:	e0d9      	b.n	8007bda <minmea_scan+0x702>
                    for (int i=0; i<6; i++)
 8007a26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a28:	3301      	adds	r3, #1
 8007a2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007a2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a2e:	2b05      	cmp	r3, #5
 8007a30:	ddea      	ble.n	8007a08 <minmea_scan+0x530>
                            goto parse_error;

                    h = strtol((char[]) {field[0], field[1], '\0'}, NULL, 10);
 8007a32:	2490      	movs	r4, #144	@ 0x90
 8007a34:	193b      	adds	r3, r7, r4
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	781a      	ldrb	r2, [r3, #0]
 8007a3a:	2110      	movs	r1, #16
 8007a3c:	187b      	adds	r3, r7, r1
 8007a3e:	701a      	strb	r2, [r3, #0]
 8007a40:	193b      	adds	r3, r7, r4
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	3301      	adds	r3, #1
 8007a46:	781a      	ldrb	r2, [r3, #0]
 8007a48:	187b      	adds	r3, r7, r1
 8007a4a:	705a      	strb	r2, [r3, #1]
 8007a4c:	187b      	adds	r3, r7, r1
 8007a4e:	2200      	movs	r2, #0
 8007a50:	709a      	strb	r2, [r3, #2]
 8007a52:	187b      	adds	r3, r7, r1
 8007a54:	220a      	movs	r2, #10
 8007a56:	2100      	movs	r1, #0
 8007a58:	0018      	movs	r0, r3
 8007a5a:	f007 f869 	bl	800eb30 <strtol>
 8007a5e:	0003      	movs	r3, r0
 8007a60:	65fb      	str	r3, [r7, #92]	@ 0x5c
                    i = strtol((char[]) {field[2], field[3], '\0'}, NULL, 10);
 8007a62:	193b      	adds	r3, r7, r4
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	3302      	adds	r3, #2
 8007a68:	781a      	ldrb	r2, [r3, #0]
 8007a6a:	210c      	movs	r1, #12
 8007a6c:	187b      	adds	r3, r7, r1
 8007a6e:	701a      	strb	r2, [r3, #0]
 8007a70:	193b      	adds	r3, r7, r4
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	3303      	adds	r3, #3
 8007a76:	781a      	ldrb	r2, [r3, #0]
 8007a78:	187b      	adds	r3, r7, r1
 8007a7a:	705a      	strb	r2, [r3, #1]
 8007a7c:	187b      	adds	r3, r7, r1
 8007a7e:	2200      	movs	r2, #0
 8007a80:	709a      	strb	r2, [r3, #2]
 8007a82:	187b      	adds	r3, r7, r1
 8007a84:	220a      	movs	r2, #10
 8007a86:	2100      	movs	r1, #0
 8007a88:	0018      	movs	r0, r3
 8007a8a:	f007 f851 	bl	800eb30 <strtol>
 8007a8e:	0003      	movs	r3, r0
 8007a90:	65bb      	str	r3, [r7, #88]	@ 0x58
                    s = strtol((char[]) {field[4], field[5], '\0'}, NULL, 10);
 8007a92:	193b      	adds	r3, r7, r4
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	3304      	adds	r3, #4
 8007a98:	781a      	ldrb	r2, [r3, #0]
 8007a9a:	2108      	movs	r1, #8
 8007a9c:	187b      	adds	r3, r7, r1
 8007a9e:	701a      	strb	r2, [r3, #0]
 8007aa0:	193b      	adds	r3, r7, r4
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	3305      	adds	r3, #5
 8007aa6:	781a      	ldrb	r2, [r3, #0]
 8007aa8:	187b      	adds	r3, r7, r1
 8007aaa:	705a      	strb	r2, [r3, #1]
 8007aac:	187b      	adds	r3, r7, r1
 8007aae:	2200      	movs	r2, #0
 8007ab0:	709a      	strb	r2, [r3, #2]
 8007ab2:	187b      	adds	r3, r7, r1
 8007ab4:	220a      	movs	r2, #10
 8007ab6:	2100      	movs	r1, #0
 8007ab8:	0018      	movs	r0, r3
 8007aba:	f007 f839 	bl	800eb30 <strtol>
 8007abe:	0003      	movs	r3, r0
 8007ac0:	657b      	str	r3, [r7, #84]	@ 0x54
                    field += 6;
 8007ac2:	193b      	adds	r3, r7, r4
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	3306      	adds	r3, #6
 8007ac8:	193a      	adds	r2, r7, r4
 8007aca:	6013      	str	r3, [r2, #0]

                    // Extra: fractional time. Saved as microseconds.
                    if (*field++ == '.') {
 8007acc:	193b      	adds	r3, r7, r4
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	1c5a      	adds	r2, r3, #1
 8007ad2:	1939      	adds	r1, r7, r4
 8007ad4:	600a      	str	r2, [r1, #0]
 8007ad6:	781b      	ldrb	r3, [r3, #0]
 8007ad8:	2b2e      	cmp	r3, #46	@ 0x2e
 8007ada:	d12f      	bne.n	8007b3c <minmea_scan+0x664>
                        int value = 0;
 8007adc:	2300      	movs	r3, #0
 8007ade:	64bb      	str	r3, [r7, #72]	@ 0x48
                        int scale = 1000000;
 8007ae0:	4b44      	ldr	r3, [pc, #272]	@ (8007bf4 <minmea_scan+0x71c>)
 8007ae2:	647b      	str	r3, [r7, #68]	@ 0x44
                        while (isdigit((unsigned char) *field) && scale > 1) {
 8007ae4:	e016      	b.n	8007b14 <minmea_scan+0x63c>
                            value = (value * 10) + (*field++ - '0');
 8007ae6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007ae8:	0013      	movs	r3, r2
 8007aea:	009b      	lsls	r3, r3, #2
 8007aec:	189b      	adds	r3, r3, r2
 8007aee:	005b      	lsls	r3, r3, #1
 8007af0:	0019      	movs	r1, r3
 8007af2:	2090      	movs	r0, #144	@ 0x90
 8007af4:	183b      	adds	r3, r7, r0
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	1c5a      	adds	r2, r3, #1
 8007afa:	1838      	adds	r0, r7, r0
 8007afc:	6002      	str	r2, [r0, #0]
 8007afe:	781b      	ldrb	r3, [r3, #0]
 8007b00:	3b30      	subs	r3, #48	@ 0x30
 8007b02:	18cb      	adds	r3, r1, r3
 8007b04:	64bb      	str	r3, [r7, #72]	@ 0x48
                            scale /= 10;
 8007b06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b08:	210a      	movs	r1, #10
 8007b0a:	0018      	movs	r0, r3
 8007b0c:	f7f8 fbac 	bl	8000268 <__divsi3>
 8007b10:	0003      	movs	r3, r0
 8007b12:	647b      	str	r3, [r7, #68]	@ 0x44
                        while (isdigit((unsigned char) *field) && scale > 1) {
 8007b14:	2390      	movs	r3, #144	@ 0x90
 8007b16:	18fb      	adds	r3, r7, r3
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	781b      	ldrb	r3, [r3, #0]
 8007b1c:	1c5a      	adds	r2, r3, #1
 8007b1e:	4b34      	ldr	r3, [pc, #208]	@ (8007bf0 <minmea_scan+0x718>)
 8007b20:	18d3      	adds	r3, r2, r3
 8007b22:	781b      	ldrb	r3, [r3, #0]
 8007b24:	001a      	movs	r2, r3
 8007b26:	2304      	movs	r3, #4
 8007b28:	4013      	ands	r3, r2
 8007b2a:	d002      	beq.n	8007b32 <minmea_scan+0x65a>
 8007b2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b2e:	2b01      	cmp	r3, #1
 8007b30:	dcd9      	bgt.n	8007ae6 <minmea_scan+0x60e>
                        }
                        u = value * scale;
 8007b32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007b34:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007b36:	4353      	muls	r3, r2
 8007b38:	653b      	str	r3, [r7, #80]	@ 0x50
 8007b3a:	e001      	b.n	8007b40 <minmea_scan+0x668>
                    } else {
                        u = 0;
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	653b      	str	r3, [r7, #80]	@ 0x50
                    }
                }

                time->hours = h;
 8007b40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b42:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007b44:	601a      	str	r2, [r3, #0]
                time->minutes = i;
 8007b46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b48:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007b4a:	605a      	str	r2, [r3, #4]
                time->seconds = s;
 8007b4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b4e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007b50:	609a      	str	r2, [r3, #8]
                time->microseconds = u;
 8007b52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b54:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007b56:	60da      	str	r2, [r3, #12]
            } break;
 8007b58:	e000      	b.n	8007b5c <minmea_scan+0x684>

            case '_': { // Ignore the field.
            } break;
 8007b5a:	46c0      	nop			@ (mov r8, r8)
            default: { // Unknown.
                goto parse_error;
            } break;
        }

        next_field();
 8007b5c:	e002      	b.n	8007b64 <minmea_scan+0x68c>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	3301      	adds	r3, #1
 8007b62:	607b      	str	r3, [r7, #4]
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	781b      	ldrb	r3, [r3, #0]
 8007b68:	0018      	movs	r0, r3
 8007b6a:	f7ff fc8f 	bl	800748c <minmea_isfield>
 8007b6e:	1e03      	subs	r3, r0, #0
 8007b70:	d1f5      	bne.n	8007b5e <minmea_scan+0x686>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	781b      	ldrb	r3, [r3, #0]
 8007b76:	2b2c      	cmp	r3, #44	@ 0x2c
 8007b78:	d107      	bne.n	8007b8a <minmea_scan+0x6b2>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	3301      	adds	r3, #1
 8007b7e:	607b      	str	r3, [r7, #4]
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2290      	movs	r2, #144	@ 0x90
 8007b84:	18ba      	adds	r2, r7, r2
 8007b86:	6013      	str	r3, [r2, #0]
 8007b88:	e003      	b.n	8007b92 <minmea_scan+0x6ba>
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	2290      	movs	r2, #144	@ 0x90
 8007b8e:	18ba      	adds	r2, r7, r2
 8007b90:	6013      	str	r3, [r2, #0]
    while (*format) {
 8007b92:	23a4      	movs	r3, #164	@ 0xa4
 8007b94:	2208      	movs	r2, #8
 8007b96:	189b      	adds	r3, r3, r2
 8007b98:	19db      	adds	r3, r3, r7
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	781b      	ldrb	r3, [r3, #0]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d000      	beq.n	8007ba4 <minmea_scan+0x6cc>
 8007ba2:	e4b0      	b.n	8007506 <minmea_scan+0x2e>
    }

    result = true;
 8007ba4:	2397      	movs	r3, #151	@ 0x97
 8007ba6:	18fb      	adds	r3, r7, r3
 8007ba8:	2201      	movs	r2, #1
 8007baa:	701a      	strb	r2, [r3, #0]
 8007bac:	e016      	b.n	8007bdc <minmea_scan+0x704>
            goto parse_error;
 8007bae:	46c0      	nop			@ (mov r8, r8)
 8007bb0:	e014      	b.n	8007bdc <minmea_scan+0x704>
                goto parse_error;
 8007bb2:	46c0      	nop			@ (mov r8, r8)
 8007bb4:	e012      	b.n	8007bdc <minmea_scan+0x704>
                            goto parse_error;
 8007bb6:	46c0      	nop			@ (mov r8, r8)
 8007bb8:	e010      	b.n	8007bdc <minmea_scan+0x704>
                                    goto parse_error;
 8007bba:	46c0      	nop			@ (mov r8, r8)
 8007bbc:	e00e      	b.n	8007bdc <minmea_scan+0x704>
                            goto parse_error;
 8007bbe:	46c0      	nop			@ (mov r8, r8)
 8007bc0:	e00c      	b.n	8007bdc <minmea_scan+0x704>
                    goto parse_error;
 8007bc2:	46c0      	nop			@ (mov r8, r8)
 8007bc4:	e00a      	b.n	8007bdc <minmea_scan+0x704>
                        goto parse_error;
 8007bc6:	46c0      	nop			@ (mov r8, r8)
 8007bc8:	e008      	b.n	8007bdc <minmea_scan+0x704>
                    goto parse_error;
 8007bca:	46c0      	nop			@ (mov r8, r8)
 8007bcc:	e006      	b.n	8007bdc <minmea_scan+0x704>
                    goto parse_error;
 8007bce:	46c0      	nop			@ (mov r8, r8)
 8007bd0:	e004      	b.n	8007bdc <minmea_scan+0x704>
                        goto parse_error;
 8007bd2:	46c0      	nop			@ (mov r8, r8)
 8007bd4:	e002      	b.n	8007bdc <minmea_scan+0x704>
                            goto parse_error;
 8007bd6:	46c0      	nop			@ (mov r8, r8)
 8007bd8:	e000      	b.n	8007bdc <minmea_scan+0x704>
                            goto parse_error;
 8007bda:	46c0      	nop			@ (mov r8, r8)

parse_error:
    va_end(ap);
    return result;
 8007bdc:	2397      	movs	r3, #151	@ 0x97
 8007bde:	18fb      	adds	r3, r7, r3
 8007be0:	781b      	ldrb	r3, [r3, #0]
}
 8007be2:	0018      	movs	r0, r3
 8007be4:	46bd      	mov	sp, r7
 8007be6:	b027      	add	sp, #156	@ 0x9c
 8007be8:	bcb0      	pop	{r4, r5, r7}
 8007bea:	bc08      	pop	{r3}
 8007bec:	b003      	add	sp, #12
 8007bee:	4718      	bx	r3
 8007bf0:	0801c3d0 	.word	0x0801c3d0
 8007bf4:	000f4240 	.word	0x000f4240

08007bf8 <minmea_parse_gga>:

    return true;
}

bool minmea_parse_gga(struct minmea_sentence_gga *frame, const char *sentence)
{
 8007bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007bfa:	46de      	mov	lr, fp
 8007bfc:	4657      	mov	r7, sl
 8007bfe:	464e      	mov	r6, r9
 8007c00:	4645      	mov	r5, r8
 8007c02:	b5e0      	push	{r5, r6, r7, lr}
 8007c04:	b097      	sub	sp, #92	@ 0x5c
 8007c06:	af0c      	add	r7, sp, #48	@ 0x30
 8007c08:	6178      	str	r0, [r7, #20]
 8007c0a:	6139      	str	r1, [r7, #16]
    // $GPGGA,123519,4807.038,N,01131.000,E,1,08,0.9,545.4,M,46.9,M,,*47
    char type[6];
    int latitude_direction;
    int longitude_direction;

    if (!minmea_scan(sentence, "tTfdfdiiffcfci_",
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	60fb      	str	r3, [r7, #12]
 8007c10:	697b      	ldr	r3, [r7, #20]
 8007c12:	001a      	movs	r2, r3
 8007c14:	3210      	adds	r2, #16
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	0019      	movs	r1, r3
 8007c1a:	3118      	adds	r1, #24
 8007c1c:	697b      	ldr	r3, [r7, #20]
 8007c1e:	001c      	movs	r4, r3
 8007c20:	3420      	adds	r4, #32
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	001d      	movs	r5, r3
 8007c26:	3524      	adds	r5, #36	@ 0x24
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	001e      	movs	r6, r3
 8007c2c:	3628      	adds	r6, #40	@ 0x28
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	2030      	movs	r0, #48	@ 0x30
 8007c32:	4684      	mov	ip, r0
 8007c34:	449c      	add	ip, r3
 8007c36:	4663      	mov	r3, ip
 8007c38:	607b      	str	r3, [r7, #4]
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	2038      	movs	r0, #56	@ 0x38
 8007c3e:	4680      	mov	r8, r0
 8007c40:	4498      	add	r8, r3
 8007c42:	4643      	mov	r3, r8
 8007c44:	603b      	str	r3, [r7, #0]
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	203c      	movs	r0, #60	@ 0x3c
 8007c4a:	4681      	mov	r9, r0
 8007c4c:	4499      	add	r9, r3
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	2044      	movs	r0, #68	@ 0x44
 8007c52:	4682      	mov	sl, r0
 8007c54:	449a      	add	sl, r3
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	3348      	adds	r3, #72	@ 0x48
 8007c5a:	2010      	movs	r0, #16
 8007c5c:	4683      	mov	fp, r0
 8007c5e:	2008      	movs	r0, #8
 8007c60:	4684      	mov	ip, r0
 8007c62:	2008      	movs	r0, #8
 8007c64:	4680      	mov	r8, r0
 8007c66:	44b8      	add	r8, r7
 8007c68:	44c4      	add	ip, r8
 8007c6a:	44e3      	add	fp, ip
 8007c6c:	4658      	mov	r0, fp
 8007c6e:	60b8      	str	r0, [r7, #8]
 8007c70:	482a      	ldr	r0, [pc, #168]	@ (8007d1c <minmea_parse_gga+0x124>)
 8007c72:	4683      	mov	fp, r0
 8007c74:	6938      	ldr	r0, [r7, #16]
 8007c76:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007c78:	4653      	mov	r3, sl
 8007c7a:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c7c:	464b      	mov	r3, r9
 8007c7e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	9308      	str	r3, [sp, #32]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	9307      	str	r3, [sp, #28]
 8007c88:	9606      	str	r6, [sp, #24]
 8007c8a:	9505      	str	r5, [sp, #20]
 8007c8c:	9404      	str	r4, [sp, #16]
 8007c8e:	2408      	movs	r4, #8
 8007c90:	2508      	movs	r5, #8
 8007c92:	1963      	adds	r3, r4, r5
 8007c94:	2408      	movs	r4, #8
 8007c96:	46a4      	mov	ip, r4
 8007c98:	44bc      	add	ip, r7
 8007c9a:	4463      	add	r3, ip
 8007c9c:	9303      	str	r3, [sp, #12]
 8007c9e:	9102      	str	r1, [sp, #8]
 8007ca0:	210c      	movs	r1, #12
 8007ca2:	194b      	adds	r3, r1, r5
 8007ca4:	2108      	movs	r1, #8
 8007ca6:	468c      	mov	ip, r1
 8007ca8:	44bc      	add	ip, r7
 8007caa:	4463      	add	r3, ip
 8007cac:	9301      	str	r3, [sp, #4]
 8007cae:	9200      	str	r2, [sp, #0]
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	68ba      	ldr	r2, [r7, #8]
 8007cb4:	4659      	mov	r1, fp
 8007cb6:	f7ff fc0f 	bl	80074d8 <minmea_scan>
 8007cba:	0003      	movs	r3, r0
 8007cbc:	001a      	movs	r2, r3
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	4053      	eors	r3, r2
 8007cc2:	b2db      	uxtb	r3, r3
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d001      	beq.n	8007ccc <minmea_parse_gga+0xd4>
            &frame->satellites_tracked,
            &frame->hdop,
            &frame->altitude, &frame->altitude_units,
            &frame->height, &frame->height_units,
            &frame->dgps_age))
        return false;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	e01d      	b.n	8007d08 <minmea_parse_gga+0x110>
    if (strcmp(type+2, "GGA"))
 8007ccc:	2310      	movs	r3, #16
 8007cce:	2208      	movs	r2, #8
 8007cd0:	189b      	adds	r3, r3, r2
 8007cd2:	2208      	movs	r2, #8
 8007cd4:	4694      	mov	ip, r2
 8007cd6:	44bc      	add	ip, r7
 8007cd8:	4463      	add	r3, ip
 8007cda:	3302      	adds	r3, #2
 8007cdc:	4a10      	ldr	r2, [pc, #64]	@ (8007d20 <minmea_parse_gga+0x128>)
 8007cde:	0011      	movs	r1, r2
 8007ce0:	0018      	movs	r0, r3
 8007ce2:	f7f8 fa11 	bl	8000108 <strcmp>
 8007ce6:	1e03      	subs	r3, r0, #0
 8007ce8:	d001      	beq.n	8007cee <minmea_parse_gga+0xf6>
        return false;
 8007cea:	2300      	movs	r3, #0
 8007cec:	e00c      	b.n	8007d08 <minmea_parse_gga+0x110>

    frame->latitude.value *= latitude_direction;
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	691b      	ldr	r3, [r3, #16]
 8007cf2:	69fa      	ldr	r2, [r7, #28]
 8007cf4:	435a      	muls	r2, r3
 8007cf6:	697b      	ldr	r3, [r7, #20]
 8007cf8:	611a      	str	r2, [r3, #16]
    frame->longitude.value *= longitude_direction;
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	699b      	ldr	r3, [r3, #24]
 8007cfe:	69ba      	ldr	r2, [r7, #24]
 8007d00:	435a      	muls	r2, r3
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	619a      	str	r2, [r3, #24]

    return true;
 8007d06:	2301      	movs	r3, #1
}
 8007d08:	0018      	movs	r0, r3
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	b00b      	add	sp, #44	@ 0x2c
 8007d0e:	bcf0      	pop	{r4, r5, r6, r7}
 8007d10:	46bb      	mov	fp, r7
 8007d12:	46b2      	mov	sl, r6
 8007d14:	46a9      	mov	r9, r5
 8007d16:	46a0      	mov	r8, r4
 8007d18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d1a:	46c0      	nop			@ (mov r8, r8)
 8007d1c:	08011824 	.word	0x08011824
 8007d20:	08011804 	.word	0x08011804

08007d24 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b082      	sub	sp, #8
 8007d28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007d2a:	4b11      	ldr	r3, [pc, #68]	@ (8007d70 <HAL_MspInit+0x4c>)
 8007d2c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007d2e:	4b10      	ldr	r3, [pc, #64]	@ (8007d70 <HAL_MspInit+0x4c>)
 8007d30:	2101      	movs	r1, #1
 8007d32:	430a      	orrs	r2, r1
 8007d34:	641a      	str	r2, [r3, #64]	@ 0x40
 8007d36:	4b0e      	ldr	r3, [pc, #56]	@ (8007d70 <HAL_MspInit+0x4c>)
 8007d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	4013      	ands	r3, r2
 8007d3e:	607b      	str	r3, [r7, #4]
 8007d40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007d42:	4b0b      	ldr	r3, [pc, #44]	@ (8007d70 <HAL_MspInit+0x4c>)
 8007d44:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007d46:	4b0a      	ldr	r3, [pc, #40]	@ (8007d70 <HAL_MspInit+0x4c>)
 8007d48:	2180      	movs	r1, #128	@ 0x80
 8007d4a:	0549      	lsls	r1, r1, #21
 8007d4c:	430a      	orrs	r2, r1
 8007d4e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007d50:	4b07      	ldr	r3, [pc, #28]	@ (8007d70 <HAL_MspInit+0x4c>)
 8007d52:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007d54:	2380      	movs	r3, #128	@ 0x80
 8007d56:	055b      	lsls	r3, r3, #21
 8007d58:	4013      	ands	r3, r2
 8007d5a:	603b      	str	r3, [r7, #0]
 8007d5c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8007d5e:	23c0      	movs	r3, #192	@ 0xc0
 8007d60:	00db      	lsls	r3, r3, #3
 8007d62:	0018      	movs	r0, r3
 8007d64:	f001 f930 	bl	8008fc8 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007d68:	46c0      	nop			@ (mov r8, r8)
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	b002      	add	sp, #8
 8007d6e:	bd80      	pop	{r7, pc}
 8007d70:	40021000 	.word	0x40021000

08007d74 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007d74:	b590      	push	{r4, r7, lr}
 8007d76:	b09d      	sub	sp, #116	@ 0x74
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d7c:	235c      	movs	r3, #92	@ 0x5c
 8007d7e:	18fb      	adds	r3, r7, r3
 8007d80:	0018      	movs	r0, r3
 8007d82:	2314      	movs	r3, #20
 8007d84:	001a      	movs	r2, r3
 8007d86:	2100      	movs	r1, #0
 8007d88:	f007 f8c0 	bl	800ef0c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007d8c:	2410      	movs	r4, #16
 8007d8e:	193b      	adds	r3, r7, r4
 8007d90:	0018      	movs	r0, r3
 8007d92:	234c      	movs	r3, #76	@ 0x4c
 8007d94:	001a      	movs	r2, r3
 8007d96:	2100      	movs	r1, #0
 8007d98:	f007 f8b8 	bl	800ef0c <memset>
  if(hi2c->Instance==I2C1)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4a23      	ldr	r2, [pc, #140]	@ (8007e30 <HAL_I2C_MspInit+0xbc>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d13f      	bne.n	8007e26 <HAL_I2C_MspInit+0xb2>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8007da6:	193b      	adds	r3, r7, r4
 8007da8:	2220      	movs	r2, #32
 8007daa:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8007dac:	193b      	adds	r3, r7, r4
 8007dae:	2200      	movs	r2, #0
 8007db0:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007db2:	193b      	adds	r3, r7, r4
 8007db4:	0018      	movs	r0, r3
 8007db6:	f003 f921 	bl	800affc <HAL_RCCEx_PeriphCLKConfig>
 8007dba:	1e03      	subs	r3, r0, #0
 8007dbc:	d001      	beq.n	8007dc2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8007dbe:	f7ff fb5f 	bl	8007480 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007dc2:	4b1c      	ldr	r3, [pc, #112]	@ (8007e34 <HAL_I2C_MspInit+0xc0>)
 8007dc4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007dc6:	4b1b      	ldr	r3, [pc, #108]	@ (8007e34 <HAL_I2C_MspInit+0xc0>)
 8007dc8:	2101      	movs	r1, #1
 8007dca:	430a      	orrs	r2, r1
 8007dcc:	635a      	str	r2, [r3, #52]	@ 0x34
 8007dce:	4b19      	ldr	r3, [pc, #100]	@ (8007e34 <HAL_I2C_MspInit+0xc0>)
 8007dd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	4013      	ands	r3, r2
 8007dd6:	60fb      	str	r3, [r7, #12]
 8007dd8:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8007dda:	215c      	movs	r1, #92	@ 0x5c
 8007ddc:	187b      	adds	r3, r7, r1
 8007dde:	22c0      	movs	r2, #192	@ 0xc0
 8007de0:	00d2      	lsls	r2, r2, #3
 8007de2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007de4:	187b      	adds	r3, r7, r1
 8007de6:	2212      	movs	r2, #18
 8007de8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007dea:	187b      	adds	r3, r7, r1
 8007dec:	2200      	movs	r2, #0
 8007dee:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007df0:	187b      	adds	r3, r7, r1
 8007df2:	2200      	movs	r2, #0
 8007df4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8007df6:	187b      	adds	r3, r7, r1
 8007df8:	2206      	movs	r2, #6
 8007dfa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007dfc:	187a      	adds	r2, r7, r1
 8007dfe:	23a0      	movs	r3, #160	@ 0xa0
 8007e00:	05db      	lsls	r3, r3, #23
 8007e02:	0011      	movs	r1, r2
 8007e04:	0018      	movs	r0, r3
 8007e06:	f001 fb85 	bl	8009514 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007e0a:	4b0a      	ldr	r3, [pc, #40]	@ (8007e34 <HAL_I2C_MspInit+0xc0>)
 8007e0c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007e0e:	4b09      	ldr	r3, [pc, #36]	@ (8007e34 <HAL_I2C_MspInit+0xc0>)
 8007e10:	2180      	movs	r1, #128	@ 0x80
 8007e12:	0389      	lsls	r1, r1, #14
 8007e14:	430a      	orrs	r2, r1
 8007e16:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007e18:	4b06      	ldr	r3, [pc, #24]	@ (8007e34 <HAL_I2C_MspInit+0xc0>)
 8007e1a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007e1c:	2380      	movs	r3, #128	@ 0x80
 8007e1e:	039b      	lsls	r3, r3, #14
 8007e20:	4013      	ands	r3, r2
 8007e22:	60bb      	str	r3, [r7, #8]
 8007e24:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8007e26:	46c0      	nop			@ (mov r8, r8)
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	b01d      	add	sp, #116	@ 0x74
 8007e2c:	bd90      	pop	{r4, r7, pc}
 8007e2e:	46c0      	nop			@ (mov r8, r8)
 8007e30:	40005400 	.word	0x40005400
 8007e34:	40021000 	.word	0x40021000

08007e38 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8007e38:	b590      	push	{r4, r7, lr}
 8007e3a:	b097      	sub	sp, #92	@ 0x5c
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007e40:	240c      	movs	r4, #12
 8007e42:	193b      	adds	r3, r7, r4
 8007e44:	0018      	movs	r0, r3
 8007e46:	234c      	movs	r3, #76	@ 0x4c
 8007e48:	001a      	movs	r2, r3
 8007e4a:	2100      	movs	r1, #0
 8007e4c:	f007 f85e 	bl	800ef0c <memset>
  if(hrtc->Instance==RTC)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4a15      	ldr	r2, [pc, #84]	@ (8007eac <HAL_RTC_MspInit+0x74>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d124      	bne.n	8007ea4 <HAL_RTC_MspInit+0x6c>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8007e5a:	193b      	adds	r3, r7, r4
 8007e5c:	2280      	movs	r2, #128	@ 0x80
 8007e5e:	0292      	lsls	r2, r2, #10
 8007e60:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8007e62:	193b      	adds	r3, r7, r4
 8007e64:	2280      	movs	r2, #128	@ 0x80
 8007e66:	0092      	lsls	r2, r2, #2
 8007e68:	641a      	str	r2, [r3, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007e6a:	193b      	adds	r3, r7, r4
 8007e6c:	0018      	movs	r0, r3
 8007e6e:	f003 f8c5 	bl	800affc <HAL_RCCEx_PeriphCLKConfig>
 8007e72:	1e03      	subs	r3, r0, #0
 8007e74:	d001      	beq.n	8007e7a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8007e76:	f7ff fb03 	bl	8007480 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8007e7a:	4b0d      	ldr	r3, [pc, #52]	@ (8007eb0 <HAL_RTC_MspInit+0x78>)
 8007e7c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007e7e:	4b0c      	ldr	r3, [pc, #48]	@ (8007eb0 <HAL_RTC_MspInit+0x78>)
 8007e80:	2180      	movs	r1, #128	@ 0x80
 8007e82:	0209      	lsls	r1, r1, #8
 8007e84:	430a      	orrs	r2, r1
 8007e86:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8007e88:	4b09      	ldr	r3, [pc, #36]	@ (8007eb0 <HAL_RTC_MspInit+0x78>)
 8007e8a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007e8c:	4b08      	ldr	r3, [pc, #32]	@ (8007eb0 <HAL_RTC_MspInit+0x78>)
 8007e8e:	2180      	movs	r1, #128	@ 0x80
 8007e90:	00c9      	lsls	r1, r1, #3
 8007e92:	430a      	orrs	r2, r1
 8007e94:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007e96:	4b06      	ldr	r3, [pc, #24]	@ (8007eb0 <HAL_RTC_MspInit+0x78>)
 8007e98:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007e9a:	2380      	movs	r3, #128	@ 0x80
 8007e9c:	00db      	lsls	r3, r3, #3
 8007e9e:	4013      	ands	r3, r2
 8007ea0:	60bb      	str	r3, [r7, #8]
 8007ea2:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8007ea4:	46c0      	nop			@ (mov r8, r8)
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	b017      	add	sp, #92	@ 0x5c
 8007eaa:	bd90      	pop	{r4, r7, pc}
 8007eac:	40002800 	.word	0x40002800
 8007eb0:	40021000 	.word	0x40021000

08007eb4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007eb4:	b590      	push	{r4, r7, lr}
 8007eb6:	b08b      	sub	sp, #44	@ 0x2c
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ebc:	2414      	movs	r4, #20
 8007ebe:	193b      	adds	r3, r7, r4
 8007ec0:	0018      	movs	r0, r3
 8007ec2:	2314      	movs	r3, #20
 8007ec4:	001a      	movs	r2, r3
 8007ec6:	2100      	movs	r1, #0
 8007ec8:	f007 f820 	bl	800ef0c <memset>
  if(hspi->Instance==SPI1)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4a2c      	ldr	r2, [pc, #176]	@ (8007f84 <HAL_SPI_MspInit+0xd0>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d151      	bne.n	8007f7a <HAL_SPI_MspInit+0xc6>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007ed6:	4b2c      	ldr	r3, [pc, #176]	@ (8007f88 <HAL_SPI_MspInit+0xd4>)
 8007ed8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007eda:	4b2b      	ldr	r3, [pc, #172]	@ (8007f88 <HAL_SPI_MspInit+0xd4>)
 8007edc:	2180      	movs	r1, #128	@ 0x80
 8007ede:	0149      	lsls	r1, r1, #5
 8007ee0:	430a      	orrs	r2, r1
 8007ee2:	641a      	str	r2, [r3, #64]	@ 0x40
 8007ee4:	4b28      	ldr	r3, [pc, #160]	@ (8007f88 <HAL_SPI_MspInit+0xd4>)
 8007ee6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007ee8:	2380      	movs	r3, #128	@ 0x80
 8007eea:	015b      	lsls	r3, r3, #5
 8007eec:	4013      	ands	r3, r2
 8007eee:	613b      	str	r3, [r7, #16]
 8007ef0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007ef2:	4b25      	ldr	r3, [pc, #148]	@ (8007f88 <HAL_SPI_MspInit+0xd4>)
 8007ef4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007ef6:	4b24      	ldr	r3, [pc, #144]	@ (8007f88 <HAL_SPI_MspInit+0xd4>)
 8007ef8:	2101      	movs	r1, #1
 8007efa:	430a      	orrs	r2, r1
 8007efc:	635a      	str	r2, [r3, #52]	@ 0x34
 8007efe:	4b22      	ldr	r3, [pc, #136]	@ (8007f88 <HAL_SPI_MspInit+0xd4>)
 8007f00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f02:	2201      	movs	r2, #1
 8007f04:	4013      	ands	r3, r2
 8007f06:	60fb      	str	r3, [r7, #12]
 8007f08:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007f0a:	4b1f      	ldr	r3, [pc, #124]	@ (8007f88 <HAL_SPI_MspInit+0xd4>)
 8007f0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007f0e:	4b1e      	ldr	r3, [pc, #120]	@ (8007f88 <HAL_SPI_MspInit+0xd4>)
 8007f10:	2108      	movs	r1, #8
 8007f12:	430a      	orrs	r2, r1
 8007f14:	635a      	str	r2, [r3, #52]	@ 0x34
 8007f16:	4b1c      	ldr	r3, [pc, #112]	@ (8007f88 <HAL_SPI_MspInit+0xd4>)
 8007f18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f1a:	2208      	movs	r2, #8
 8007f1c:	4013      	ands	r3, r2
 8007f1e:	60bb      	str	r3, [r7, #8]
 8007f20:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PD5     ------> SPI1_MISO
    PD6     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8007f22:	193b      	adds	r3, r7, r4
 8007f24:	2202      	movs	r2, #2
 8007f26:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f28:	193b      	adds	r3, r7, r4
 8007f2a:	2202      	movs	r2, #2
 8007f2c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f2e:	193b      	adds	r3, r7, r4
 8007f30:	2200      	movs	r2, #0
 8007f32:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007f34:	193b      	adds	r3, r7, r4
 8007f36:	2200      	movs	r2, #0
 8007f38:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8007f3a:	193b      	adds	r3, r7, r4
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f40:	193a      	adds	r2, r7, r4
 8007f42:	23a0      	movs	r3, #160	@ 0xa0
 8007f44:	05db      	lsls	r3, r3, #23
 8007f46:	0011      	movs	r1, r2
 8007f48:	0018      	movs	r0, r3
 8007f4a:	f001 fae3 	bl	8009514 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8007f4e:	0021      	movs	r1, r4
 8007f50:	187b      	adds	r3, r7, r1
 8007f52:	2260      	movs	r2, #96	@ 0x60
 8007f54:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f56:	187b      	adds	r3, r7, r1
 8007f58:	2202      	movs	r2, #2
 8007f5a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f5c:	187b      	adds	r3, r7, r1
 8007f5e:	2200      	movs	r2, #0
 8007f60:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007f62:	187b      	adds	r3, r7, r1
 8007f64:	2200      	movs	r2, #0
 8007f66:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI1;
 8007f68:	187b      	adds	r3, r7, r1
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007f6e:	187b      	adds	r3, r7, r1
 8007f70:	4a06      	ldr	r2, [pc, #24]	@ (8007f8c <HAL_SPI_MspInit+0xd8>)
 8007f72:	0019      	movs	r1, r3
 8007f74:	0010      	movs	r0, r2
 8007f76:	f001 facd 	bl	8009514 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8007f7a:	46c0      	nop			@ (mov r8, r8)
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	b00b      	add	sp, #44	@ 0x2c
 8007f80:	bd90      	pop	{r4, r7, pc}
 8007f82:	46c0      	nop			@ (mov r8, r8)
 8007f84:	40013000 	.word	0x40013000
 8007f88:	40021000 	.word	0x40021000
 8007f8c:	50000c00 	.word	0x50000c00

08007f90 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b084      	sub	sp, #16
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	4a0a      	ldr	r2, [pc, #40]	@ (8007fc8 <HAL_TIM_Base_MspInit+0x38>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d10d      	bne.n	8007fbe <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM17_MspInit 0 */

    /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8007fa2:	4b0a      	ldr	r3, [pc, #40]	@ (8007fcc <HAL_TIM_Base_MspInit+0x3c>)
 8007fa4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007fa6:	4b09      	ldr	r3, [pc, #36]	@ (8007fcc <HAL_TIM_Base_MspInit+0x3c>)
 8007fa8:	2180      	movs	r1, #128	@ 0x80
 8007faa:	02c9      	lsls	r1, r1, #11
 8007fac:	430a      	orrs	r2, r1
 8007fae:	641a      	str	r2, [r3, #64]	@ 0x40
 8007fb0:	4b06      	ldr	r3, [pc, #24]	@ (8007fcc <HAL_TIM_Base_MspInit+0x3c>)
 8007fb2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007fb4:	2380      	movs	r3, #128	@ 0x80
 8007fb6:	02db      	lsls	r3, r3, #11
 8007fb8:	4013      	ands	r3, r2
 8007fba:	60fb      	str	r3, [r7, #12]
 8007fbc:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM17_MspInit 1 */

  }

}
 8007fbe:	46c0      	nop			@ (mov r8, r8)
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	b004      	add	sp, #16
 8007fc4:	bd80      	pop	{r7, pc}
 8007fc6:	46c0      	nop			@ (mov r8, r8)
 8007fc8:	40014800 	.word	0x40014800
 8007fcc:	40021000 	.word	0x40021000

08007fd0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8007fd0:	b590      	push	{r4, r7, lr}
 8007fd2:	b089      	sub	sp, #36	@ 0x24
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007fd8:	240c      	movs	r4, #12
 8007fda:	193b      	adds	r3, r7, r4
 8007fdc:	0018      	movs	r0, r3
 8007fde:	2314      	movs	r3, #20
 8007fe0:	001a      	movs	r2, r3
 8007fe2:	2100      	movs	r1, #0
 8007fe4:	f006 ff92 	bl	800ef0c <memset>
  if(htim->Instance==TIM17)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4a14      	ldr	r2, [pc, #80]	@ (8008040 <HAL_TIM_MspPostInit+0x70>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d122      	bne.n	8008038 <HAL_TIM_MspPostInit+0x68>
  {
    /* USER CODE BEGIN TIM17_MspPostInit 0 */

    /* USER CODE END TIM17_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007ff2:	4b14      	ldr	r3, [pc, #80]	@ (8008044 <HAL_TIM_MspPostInit+0x74>)
 8007ff4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007ff6:	4b13      	ldr	r3, [pc, #76]	@ (8008044 <HAL_TIM_MspPostInit+0x74>)
 8007ff8:	2101      	movs	r1, #1
 8007ffa:	430a      	orrs	r2, r1
 8007ffc:	635a      	str	r2, [r3, #52]	@ 0x34
 8007ffe:	4b11      	ldr	r3, [pc, #68]	@ (8008044 <HAL_TIM_MspPostInit+0x74>)
 8008000:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008002:	2201      	movs	r2, #1
 8008004:	4013      	ands	r3, r2
 8008006:	60bb      	str	r3, [r7, #8]
 8008008:	68bb      	ldr	r3, [r7, #8]
    /**TIM17 GPIO Configuration
    PA7     ------> TIM17_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800800a:	0021      	movs	r1, r4
 800800c:	187b      	adds	r3, r7, r1
 800800e:	2280      	movs	r2, #128	@ 0x80
 8008010:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008012:	187b      	adds	r3, r7, r1
 8008014:	2202      	movs	r2, #2
 8008016:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008018:	187b      	adds	r3, r7, r1
 800801a:	2200      	movs	r2, #0
 800801c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800801e:	187b      	adds	r3, r7, r1
 8008020:	2200      	movs	r2, #0
 8008022:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM17;
 8008024:	187b      	adds	r3, r7, r1
 8008026:	2205      	movs	r2, #5
 8008028:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800802a:	187a      	adds	r2, r7, r1
 800802c:	23a0      	movs	r3, #160	@ 0xa0
 800802e:	05db      	lsls	r3, r3, #23
 8008030:	0011      	movs	r1, r2
 8008032:	0018      	movs	r0, r3
 8008034:	f001 fa6e 	bl	8009514 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM17_MspPostInit 1 */

    /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8008038:	46c0      	nop			@ (mov r8, r8)
 800803a:	46bd      	mov	sp, r7
 800803c:	b009      	add	sp, #36	@ 0x24
 800803e:	bd90      	pop	{r4, r7, pc}
 8008040:	40014800 	.word	0x40014800
 8008044:	40021000 	.word	0x40021000

08008048 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008048:	b590      	push	{r4, r7, lr}
 800804a:	b09f      	sub	sp, #124	@ 0x7c
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008050:	2364      	movs	r3, #100	@ 0x64
 8008052:	18fb      	adds	r3, r7, r3
 8008054:	0018      	movs	r0, r3
 8008056:	2314      	movs	r3, #20
 8008058:	001a      	movs	r2, r3
 800805a:	2100      	movs	r1, #0
 800805c:	f006 ff56 	bl	800ef0c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008060:	2418      	movs	r4, #24
 8008062:	193b      	adds	r3, r7, r4
 8008064:	0018      	movs	r0, r3
 8008066:	234c      	movs	r3, #76	@ 0x4c
 8008068:	001a      	movs	r2, r3
 800806a:	2100      	movs	r1, #0
 800806c:	f006 ff4e 	bl	800ef0c <memset>
  if(huart->Instance==USART1)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4a45      	ldr	r2, [pc, #276]	@ (800818c <HAL_UART_MspInit+0x144>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d13e      	bne.n	80080f8 <HAL_UART_MspInit+0xb0>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800807a:	193b      	adds	r3, r7, r4
 800807c:	2201      	movs	r2, #1
 800807e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8008080:	193b      	adds	r3, r7, r4
 8008082:	2200      	movs	r2, #0
 8008084:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008086:	193b      	adds	r3, r7, r4
 8008088:	0018      	movs	r0, r3
 800808a:	f002 ffb7 	bl	800affc <HAL_RCCEx_PeriphCLKConfig>
 800808e:	1e03      	subs	r3, r0, #0
 8008090:	d001      	beq.n	8008096 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8008092:	f7ff f9f5 	bl	8007480 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008096:	4b3e      	ldr	r3, [pc, #248]	@ (8008190 <HAL_UART_MspInit+0x148>)
 8008098:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800809a:	4b3d      	ldr	r3, [pc, #244]	@ (8008190 <HAL_UART_MspInit+0x148>)
 800809c:	2180      	movs	r1, #128	@ 0x80
 800809e:	01c9      	lsls	r1, r1, #7
 80080a0:	430a      	orrs	r2, r1
 80080a2:	641a      	str	r2, [r3, #64]	@ 0x40
 80080a4:	4b3a      	ldr	r3, [pc, #232]	@ (8008190 <HAL_UART_MspInit+0x148>)
 80080a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80080a8:	2380      	movs	r3, #128	@ 0x80
 80080aa:	01db      	lsls	r3, r3, #7
 80080ac:	4013      	ands	r3, r2
 80080ae:	617b      	str	r3, [r7, #20]
 80080b0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80080b2:	4b37      	ldr	r3, [pc, #220]	@ (8008190 <HAL_UART_MspInit+0x148>)
 80080b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80080b6:	4b36      	ldr	r3, [pc, #216]	@ (8008190 <HAL_UART_MspInit+0x148>)
 80080b8:	2104      	movs	r1, #4
 80080ba:	430a      	orrs	r2, r1
 80080bc:	635a      	str	r2, [r3, #52]	@ 0x34
 80080be:	4b34      	ldr	r3, [pc, #208]	@ (8008190 <HAL_UART_MspInit+0x148>)
 80080c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080c2:	2204      	movs	r2, #4
 80080c4:	4013      	ands	r3, r2
 80080c6:	613b      	str	r3, [r7, #16]
 80080c8:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80080ca:	2164      	movs	r1, #100	@ 0x64
 80080cc:	187b      	adds	r3, r7, r1
 80080ce:	2230      	movs	r2, #48	@ 0x30
 80080d0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080d2:	187b      	adds	r3, r7, r1
 80080d4:	2202      	movs	r2, #2
 80080d6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080d8:	187b      	adds	r3, r7, r1
 80080da:	2200      	movs	r2, #0
 80080dc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80080de:	187b      	adds	r3, r7, r1
 80080e0:	2200      	movs	r2, #0
 80080e2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80080e4:	187b      	adds	r3, r7, r1
 80080e6:	2201      	movs	r2, #1
 80080e8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80080ea:	187b      	adds	r3, r7, r1
 80080ec:	4a29      	ldr	r2, [pc, #164]	@ (8008194 <HAL_UART_MspInit+0x14c>)
 80080ee:	0019      	movs	r1, r3
 80080f0:	0010      	movs	r0, r2
 80080f2:	f001 fa0f 	bl	8009514 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 80080f6:	e044      	b.n	8008182 <HAL_UART_MspInit+0x13a>
  else if(huart->Instance==USART2)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4a26      	ldr	r2, [pc, #152]	@ (8008198 <HAL_UART_MspInit+0x150>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d13f      	bne.n	8008182 <HAL_UART_MspInit+0x13a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8008102:	2118      	movs	r1, #24
 8008104:	187b      	adds	r3, r7, r1
 8008106:	2202      	movs	r2, #2
 8008108:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800810a:	187b      	adds	r3, r7, r1
 800810c:	2200      	movs	r2, #0
 800810e:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008110:	187b      	adds	r3, r7, r1
 8008112:	0018      	movs	r0, r3
 8008114:	f002 ff72 	bl	800affc <HAL_RCCEx_PeriphCLKConfig>
 8008118:	1e03      	subs	r3, r0, #0
 800811a:	d001      	beq.n	8008120 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 800811c:	f7ff f9b0 	bl	8007480 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8008120:	4b1b      	ldr	r3, [pc, #108]	@ (8008190 <HAL_UART_MspInit+0x148>)
 8008122:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008124:	4b1a      	ldr	r3, [pc, #104]	@ (8008190 <HAL_UART_MspInit+0x148>)
 8008126:	2180      	movs	r1, #128	@ 0x80
 8008128:	0289      	lsls	r1, r1, #10
 800812a:	430a      	orrs	r2, r1
 800812c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800812e:	4b18      	ldr	r3, [pc, #96]	@ (8008190 <HAL_UART_MspInit+0x148>)
 8008130:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008132:	2380      	movs	r3, #128	@ 0x80
 8008134:	029b      	lsls	r3, r3, #10
 8008136:	4013      	ands	r3, r2
 8008138:	60fb      	str	r3, [r7, #12]
 800813a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800813c:	4b14      	ldr	r3, [pc, #80]	@ (8008190 <HAL_UART_MspInit+0x148>)
 800813e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008140:	4b13      	ldr	r3, [pc, #76]	@ (8008190 <HAL_UART_MspInit+0x148>)
 8008142:	2101      	movs	r1, #1
 8008144:	430a      	orrs	r2, r1
 8008146:	635a      	str	r2, [r3, #52]	@ 0x34
 8008148:	4b11      	ldr	r3, [pc, #68]	@ (8008190 <HAL_UART_MspInit+0x148>)
 800814a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800814c:	2201      	movs	r2, #1
 800814e:	4013      	ands	r3, r2
 8008150:	60bb      	str	r3, [r7, #8]
 8008152:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8008154:	2164      	movs	r1, #100	@ 0x64
 8008156:	187b      	adds	r3, r7, r1
 8008158:	220c      	movs	r2, #12
 800815a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800815c:	187b      	adds	r3, r7, r1
 800815e:	2202      	movs	r2, #2
 8008160:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008162:	187b      	adds	r3, r7, r1
 8008164:	2200      	movs	r2, #0
 8008166:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008168:	187b      	adds	r3, r7, r1
 800816a:	2200      	movs	r2, #0
 800816c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800816e:	187b      	adds	r3, r7, r1
 8008170:	2201      	movs	r2, #1
 8008172:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008174:	187a      	adds	r2, r7, r1
 8008176:	23a0      	movs	r3, #160	@ 0xa0
 8008178:	05db      	lsls	r3, r3, #23
 800817a:	0011      	movs	r1, r2
 800817c:	0018      	movs	r0, r3
 800817e:	f001 f9c9 	bl	8009514 <HAL_GPIO_Init>
}
 8008182:	46c0      	nop			@ (mov r8, r8)
 8008184:	46bd      	mov	sp, r7
 8008186:	b01f      	add	sp, #124	@ 0x7c
 8008188:	bd90      	pop	{r4, r7, pc}
 800818a:	46c0      	nop			@ (mov r8, r8)
 800818c:	40013800 	.word	0x40013800
 8008190:	40021000 	.word	0x40021000
 8008194:	50000800 	.word	0x50000800
 8008198:	40004400 	.word	0x40004400

0800819c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80081a0:	46c0      	nop			@ (mov r8, r8)
 80081a2:	e7fd      	b.n	80081a0 <NMI_Handler+0x4>

080081a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	//drawString(0, 150, "ERROR", WHITE, BLACK, 10, 10);
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80081a8:	46c0      	nop			@ (mov r8, r8)
 80081aa:	e7fd      	b.n	80081a8 <HardFault_Handler+0x4>

080081ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80081b0:	46c0      	nop			@ (mov r8, r8)
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}

080081b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80081b6:	b580      	push	{r7, lr}
 80081b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80081ba:	46c0      	nop			@ (mov r8, r8)
 80081bc:	46bd      	mov	sp, r7
 80081be:	bd80      	pop	{r7, pc}

080081c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80081c4:	f000 fec0 	bl	8008f48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80081c8:	46c0      	nop			@ (mov r8, r8)
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}

080081ce <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80081ce:	b580      	push	{r7, lr}
 80081d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80081d2:	2002      	movs	r0, #2
 80081d4:	f001 fb44 	bl	8009860 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80081d8:	46c0      	nop			@ (mov r8, r8)
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}

080081de <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 80081de:	b580      	push	{r7, lr}
 80081e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80081e2:	2004      	movs	r0, #4
 80081e4:	f001 fb3c 	bl	8009860 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 80081e8:	46c0      	nop			@ (mov r8, r8)
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}

080081ee <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80081ee:	b580      	push	{r7, lr}
 80081f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80081f2:	2380      	movs	r3, #128	@ 0x80
 80081f4:	011b      	lsls	r3, r3, #4
 80081f6:	0018      	movs	r0, r3
 80081f8:	f001 fb32 	bl	8009860 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80081fc:	46c0      	nop			@ (mov r8, r8)
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}

08008202 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8008202:	b580      	push	{r7, lr}
 8008204:	af00      	add	r7, sp, #0
  return 1;
 8008206:	2301      	movs	r3, #1
}
 8008208:	0018      	movs	r0, r3
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}

0800820e <_kill>:

int _kill(int pid, int sig)
{
 800820e:	b580      	push	{r7, lr}
 8008210:	b082      	sub	sp, #8
 8008212:	af00      	add	r7, sp, #0
 8008214:	6078      	str	r0, [r7, #4]
 8008216:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8008218:	f006 fee0 	bl	800efdc <__errno>
 800821c:	0003      	movs	r3, r0
 800821e:	2216      	movs	r2, #22
 8008220:	601a      	str	r2, [r3, #0]
  return -1;
 8008222:	2301      	movs	r3, #1
 8008224:	425b      	negs	r3, r3
}
 8008226:	0018      	movs	r0, r3
 8008228:	46bd      	mov	sp, r7
 800822a:	b002      	add	sp, #8
 800822c:	bd80      	pop	{r7, pc}

0800822e <_exit>:

void _exit (int status)
{
 800822e:	b580      	push	{r7, lr}
 8008230:	b082      	sub	sp, #8
 8008232:	af00      	add	r7, sp, #0
 8008234:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8008236:	2301      	movs	r3, #1
 8008238:	425a      	negs	r2, r3
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	0011      	movs	r1, r2
 800823e:	0018      	movs	r0, r3
 8008240:	f7ff ffe5 	bl	800820e <_kill>
  while (1) {}    /* Make sure we hang here */
 8008244:	46c0      	nop			@ (mov r8, r8)
 8008246:	e7fd      	b.n	8008244 <_exit+0x16>

08008248 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b086      	sub	sp, #24
 800824c:	af00      	add	r7, sp, #0
 800824e:	60f8      	str	r0, [r7, #12]
 8008250:	60b9      	str	r1, [r7, #8]
 8008252:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008254:	2300      	movs	r3, #0
 8008256:	617b      	str	r3, [r7, #20]
 8008258:	e00a      	b.n	8008270 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800825a:	e000      	b.n	800825e <_read+0x16>
 800825c:	bf00      	nop
 800825e:	0001      	movs	r1, r0
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	1c5a      	adds	r2, r3, #1
 8008264:	60ba      	str	r2, [r7, #8]
 8008266:	b2ca      	uxtb	r2, r1
 8008268:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	3301      	adds	r3, #1
 800826e:	617b      	str	r3, [r7, #20]
 8008270:	697a      	ldr	r2, [r7, #20]
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	429a      	cmp	r2, r3
 8008276:	dbf0      	blt.n	800825a <_read+0x12>
  }

  return len;
 8008278:	687b      	ldr	r3, [r7, #4]
}
 800827a:	0018      	movs	r0, r3
 800827c:	46bd      	mov	sp, r7
 800827e:	b006      	add	sp, #24
 8008280:	bd80      	pop	{r7, pc}

08008282 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8008282:	b580      	push	{r7, lr}
 8008284:	b086      	sub	sp, #24
 8008286:	af00      	add	r7, sp, #0
 8008288:	60f8      	str	r0, [r7, #12]
 800828a:	60b9      	str	r1, [r7, #8]
 800828c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800828e:	2300      	movs	r3, #0
 8008290:	617b      	str	r3, [r7, #20]
 8008292:	e009      	b.n	80082a8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	1c5a      	adds	r2, r3, #1
 8008298:	60ba      	str	r2, [r7, #8]
 800829a:	781b      	ldrb	r3, [r3, #0]
 800829c:	0018      	movs	r0, r3
 800829e:	e000      	b.n	80082a2 <_write+0x20>
 80082a0:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	3301      	adds	r3, #1
 80082a6:	617b      	str	r3, [r7, #20]
 80082a8:	697a      	ldr	r2, [r7, #20]
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	429a      	cmp	r2, r3
 80082ae:	dbf1      	blt.n	8008294 <_write+0x12>
  }
  return len;
 80082b0:	687b      	ldr	r3, [r7, #4]
}
 80082b2:	0018      	movs	r0, r3
 80082b4:	46bd      	mov	sp, r7
 80082b6:	b006      	add	sp, #24
 80082b8:	bd80      	pop	{r7, pc}

080082ba <_close>:

int _close(int file)
{
 80082ba:	b580      	push	{r7, lr}
 80082bc:	b082      	sub	sp, #8
 80082be:	af00      	add	r7, sp, #0
 80082c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80082c2:	2301      	movs	r3, #1
 80082c4:	425b      	negs	r3, r3
}
 80082c6:	0018      	movs	r0, r3
 80082c8:	46bd      	mov	sp, r7
 80082ca:	b002      	add	sp, #8
 80082cc:	bd80      	pop	{r7, pc}

080082ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80082ce:	b580      	push	{r7, lr}
 80082d0:	b082      	sub	sp, #8
 80082d2:	af00      	add	r7, sp, #0
 80082d4:	6078      	str	r0, [r7, #4]
 80082d6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	2280      	movs	r2, #128	@ 0x80
 80082dc:	0192      	lsls	r2, r2, #6
 80082de:	605a      	str	r2, [r3, #4]
  return 0;
 80082e0:	2300      	movs	r3, #0
}
 80082e2:	0018      	movs	r0, r3
 80082e4:	46bd      	mov	sp, r7
 80082e6:	b002      	add	sp, #8
 80082e8:	bd80      	pop	{r7, pc}

080082ea <_isatty>:

int _isatty(int file)
{
 80082ea:	b580      	push	{r7, lr}
 80082ec:	b082      	sub	sp, #8
 80082ee:	af00      	add	r7, sp, #0
 80082f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80082f2:	2301      	movs	r3, #1
}
 80082f4:	0018      	movs	r0, r3
 80082f6:	46bd      	mov	sp, r7
 80082f8:	b002      	add	sp, #8
 80082fa:	bd80      	pop	{r7, pc}

080082fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b084      	sub	sp, #16
 8008300:	af00      	add	r7, sp, #0
 8008302:	60f8      	str	r0, [r7, #12]
 8008304:	60b9      	str	r1, [r7, #8]
 8008306:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8008308:	2300      	movs	r3, #0
}
 800830a:	0018      	movs	r0, r3
 800830c:	46bd      	mov	sp, r7
 800830e:	b004      	add	sp, #16
 8008310:	bd80      	pop	{r7, pc}
	...

08008314 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b086      	sub	sp, #24
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800831c:	4a14      	ldr	r2, [pc, #80]	@ (8008370 <_sbrk+0x5c>)
 800831e:	4b15      	ldr	r3, [pc, #84]	@ (8008374 <_sbrk+0x60>)
 8008320:	1ad3      	subs	r3, r2, r3
 8008322:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008324:	697b      	ldr	r3, [r7, #20]
 8008326:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008328:	4b13      	ldr	r3, [pc, #76]	@ (8008378 <_sbrk+0x64>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d102      	bne.n	8008336 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008330:	4b11      	ldr	r3, [pc, #68]	@ (8008378 <_sbrk+0x64>)
 8008332:	4a12      	ldr	r2, [pc, #72]	@ (800837c <_sbrk+0x68>)
 8008334:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008336:	4b10      	ldr	r3, [pc, #64]	@ (8008378 <_sbrk+0x64>)
 8008338:	681a      	ldr	r2, [r3, #0]
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	18d3      	adds	r3, r2, r3
 800833e:	693a      	ldr	r2, [r7, #16]
 8008340:	429a      	cmp	r2, r3
 8008342:	d207      	bcs.n	8008354 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008344:	f006 fe4a 	bl	800efdc <__errno>
 8008348:	0003      	movs	r3, r0
 800834a:	220c      	movs	r2, #12
 800834c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800834e:	2301      	movs	r3, #1
 8008350:	425b      	negs	r3, r3
 8008352:	e009      	b.n	8008368 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008354:	4b08      	ldr	r3, [pc, #32]	@ (8008378 <_sbrk+0x64>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800835a:	4b07      	ldr	r3, [pc, #28]	@ (8008378 <_sbrk+0x64>)
 800835c:	681a      	ldr	r2, [r3, #0]
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	18d2      	adds	r2, r2, r3
 8008362:	4b05      	ldr	r3, [pc, #20]	@ (8008378 <_sbrk+0x64>)
 8008364:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8008366:	68fb      	ldr	r3, [r7, #12]
}
 8008368:	0018      	movs	r0, r3
 800836a:	46bd      	mov	sp, r7
 800836c:	b006      	add	sp, #24
 800836e:	bd80      	pop	{r7, pc}
 8008370:	20024000 	.word	0x20024000
 8008374:	00000400 	.word	0x00000400
 8008378:	200014d4 	.word	0x200014d4
 800837c:	20001648 	.word	0x20001648

08008380 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008384:	46c0      	nop			@ (mov r8, r8)
 8008386:	46bd      	mov	sp, r7
 8008388:	bd80      	pop	{r7, pc}

0800838a <json_getValue>:
static inline char const* json_getValue( json_t const* property ) {
 800838a:	b580      	push	{r7, lr}
 800838c:	b082      	sub	sp, #8
 800838e:	af00      	add	r7, sp, #0
 8008390:	6078      	str	r0, [r7, #4]
    return property->u.value;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	689b      	ldr	r3, [r3, #8]
}
 8008396:	0018      	movs	r0, r3
 8008398:	46bd      	mov	sp, r7
 800839a:	b002      	add	sp, #8
 800839c:	bd80      	pop	{r7, pc}

0800839e <json_getType>:
static inline jsonType_t json_getType( json_t const* json ) {
 800839e:	b580      	push	{r7, lr}
 80083a0:	b082      	sub	sp, #8
 80083a2:	af00      	add	r7, sp, #0
 80083a4:	6078      	str	r0, [r7, #4]
    return json->type;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	7c1b      	ldrb	r3, [r3, #16]
}
 80083aa:	0018      	movs	r0, r3
 80083ac:	46bd      	mov	sp, r7
 80083ae:	b002      	add	sp, #8
 80083b0:	bd80      	pop	{r7, pc}

080083b2 <json_getProperty>:
    unsigned int nextFree;  /**< The index of the next free json property. */
    jsonPool_t pool;
} jsonStaticPool_t;

/* Search a property by its name in a JSON object. */
json_t const* json_getProperty( json_t const* obj, char const* property ) {
 80083b2:	b580      	push	{r7, lr}
 80083b4:	b084      	sub	sp, #16
 80083b6:	af00      	add	r7, sp, #0
 80083b8:	6078      	str	r0, [r7, #4]
 80083ba:	6039      	str	r1, [r7, #0]
    json_t const* sibling;
    for( sibling = obj->u.c.child; sibling; sibling = sibling->sibling )
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	689b      	ldr	r3, [r3, #8]
 80083c0:	60fb      	str	r3, [r7, #12]
 80083c2:	e011      	b.n	80083e8 <json_getProperty+0x36>
        if ( sibling->name && !strcmp( sibling->name, property ) )
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	685b      	ldr	r3, [r3, #4]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d00a      	beq.n	80083e2 <json_getProperty+0x30>
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	685b      	ldr	r3, [r3, #4]
 80083d0:	683a      	ldr	r2, [r7, #0]
 80083d2:	0011      	movs	r1, r2
 80083d4:	0018      	movs	r0, r3
 80083d6:	f7f7 fe97 	bl	8000108 <strcmp>
 80083da:	1e03      	subs	r3, r0, #0
 80083dc:	d101      	bne.n	80083e2 <json_getProperty+0x30>
            return sibling;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	e006      	b.n	80083f0 <json_getProperty+0x3e>
    for( sibling = obj->u.c.child; sibling; sibling = sibling->sibling )
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	60fb      	str	r3, [r7, #12]
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d1ea      	bne.n	80083c4 <json_getProperty+0x12>
    return 0;
 80083ee:	2300      	movs	r3, #0
}
 80083f0:	0018      	movs	r0, r3
 80083f2:	46bd      	mov	sp, r7
 80083f4:	b004      	add	sp, #16
 80083f6:	bd80      	pop	{r7, pc}

080083f8 <json_getPropertyValue>:

/* Search a property by its name in a JSON object and return its value. */
char const* json_getPropertyValue( json_t const* obj, char const* property ) {
 80083f8:	b5b0      	push	{r4, r5, r7, lr}
 80083fa:	b084      	sub	sp, #16
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
 8008400:	6039      	str	r1, [r7, #0]
	json_t const* field = json_getProperty( obj, property );
 8008402:	683a      	ldr	r2, [r7, #0]
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	0011      	movs	r1, r2
 8008408:	0018      	movs	r0, r3
 800840a:	f7ff ffd2 	bl	80083b2 <json_getProperty>
 800840e:	0003      	movs	r3, r0
 8008410:	60fb      	str	r3, [r7, #12]
	if ( !field ) return 0;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d101      	bne.n	800841c <json_getPropertyValue+0x24>
 8008418:	2300      	movs	r3, #0
 800841a:	e012      	b.n	8008442 <json_getPropertyValue+0x4a>
        jsonType_t type = json_getType( field );
 800841c:	250b      	movs	r5, #11
 800841e:	197c      	adds	r4, r7, r5
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	0018      	movs	r0, r3
 8008424:	f7ff ffbb 	bl	800839e <json_getType>
 8008428:	0003      	movs	r3, r0
 800842a:	7023      	strb	r3, [r4, #0]
        if ( JSON_ARRAY >= type ) return 0;
 800842c:	197b      	adds	r3, r7, r5
 800842e:	781b      	ldrb	r3, [r3, #0]
 8008430:	2b01      	cmp	r3, #1
 8008432:	d801      	bhi.n	8008438 <json_getPropertyValue+0x40>
 8008434:	2300      	movs	r3, #0
 8008436:	e004      	b.n	8008442 <json_getPropertyValue+0x4a>
	return json_getValue( field );
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	0018      	movs	r0, r3
 800843c:	f7ff ffa5 	bl	800838a <json_getValue>
 8008440:	0003      	movs	r3, r0
}
 8008442:	0018      	movs	r0, r3
 8008444:	46bd      	mov	sp, r7
 8008446:	b004      	add	sp, #16
 8008448:	bdb0      	pop	{r4, r5, r7, pc}

0800844a <json_createWithPool>:
static char* objValue( char* ptr, json_t* obj, jsonPool_t* pool );
static char* setToNull( char* ch );
static bool isEndOfPrimitive( char ch );

/* Parse a string to get a json. */
json_t const* json_createWithPool( char *str, jsonPool_t *pool ) {
 800844a:	b580      	push	{r7, lr}
 800844c:	b084      	sub	sp, #16
 800844e:	af00      	add	r7, sp, #0
 8008450:	6078      	str	r0, [r7, #4]
 8008452:	6039      	str	r1, [r7, #0]
    char* ptr = goBlank( str );
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	0018      	movs	r0, r3
 8008458:	f000 fc66 	bl	8008d28 <goBlank>
 800845c:	0003      	movs	r3, r0
 800845e:	60fb      	str	r3, [r7, #12]
    if ( !ptr || (*ptr != '{' && *ptr != '[') ) return 0;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d007      	beq.n	8008476 <json_createWithPool+0x2c>
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	781b      	ldrb	r3, [r3, #0]
 800846a:	2b7b      	cmp	r3, #123	@ 0x7b
 800846c:	d005      	beq.n	800847a <json_createWithPool+0x30>
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	781b      	ldrb	r3, [r3, #0]
 8008472:	2b5b      	cmp	r3, #91	@ 0x5b
 8008474:	d001      	beq.n	800847a <json_createWithPool+0x30>
 8008476:	2300      	movs	r3, #0
 8008478:	e01d      	b.n	80084b6 <json_createWithPool+0x6c>
    json_t* obj = pool->init( pool );
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	683a      	ldr	r2, [r7, #0]
 8008480:	0010      	movs	r0, r2
 8008482:	4798      	blx	r3
 8008484:	0003      	movs	r3, r0
 8008486:	60bb      	str	r3, [r7, #8]
    obj->name    = 0;
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	2200      	movs	r2, #0
 800848c:	605a      	str	r2, [r3, #4]
    obj->sibling = 0;
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	2200      	movs	r2, #0
 8008492:	601a      	str	r2, [r3, #0]
    obj->u.c.child = 0;
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	2200      	movs	r2, #0
 8008498:	609a      	str	r2, [r3, #8]
    ptr = objValue( ptr, obj, pool );
 800849a:	683a      	ldr	r2, [r7, #0]
 800849c:	68b9      	ldr	r1, [r7, #8]
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	0018      	movs	r0, r3
 80084a2:	f000 faeb 	bl	8008a7c <objValue>
 80084a6:	0003      	movs	r3, r0
 80084a8:	60fb      	str	r3, [r7, #12]
    if ( !ptr ) return 0;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d101      	bne.n	80084b4 <json_createWithPool+0x6a>
 80084b0:	2300      	movs	r3, #0
 80084b2:	e000      	b.n	80084b6 <json_createWithPool+0x6c>
    return obj;
 80084b4:	68bb      	ldr	r3, [r7, #8]
}
 80084b6:	0018      	movs	r0, r3
 80084b8:	46bd      	mov	sp, r7
 80084ba:	b004      	add	sp, #16
 80084bc:	bd80      	pop	{r7, pc}
	...

080084c0 <json_create>:

/* Parse a string to get a json. */
json_t const* json_create( char* str, json_t mem[], unsigned int qty ) {
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b08a      	sub	sp, #40	@ 0x28
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	60f8      	str	r0, [r7, #12]
 80084c8:	60b9      	str	r1, [r7, #8]
 80084ca:	607a      	str	r2, [r7, #4]
    jsonStaticPool_t spool;
    spool.mem = mem;
 80084cc:	2114      	movs	r1, #20
 80084ce:	187b      	adds	r3, r7, r1
 80084d0:	68ba      	ldr	r2, [r7, #8]
 80084d2:	601a      	str	r2, [r3, #0]
    spool.qty = qty;
 80084d4:	187b      	adds	r3, r7, r1
 80084d6:	687a      	ldr	r2, [r7, #4]
 80084d8:	605a      	str	r2, [r3, #4]
    spool.pool.init = poolInit;
 80084da:	187b      	adds	r3, r7, r1
 80084dc:	4a08      	ldr	r2, [pc, #32]	@ (8008500 <json_create+0x40>)
 80084de:	60da      	str	r2, [r3, #12]
    spool.pool.alloc = poolAlloc;
 80084e0:	187b      	adds	r3, r7, r1
 80084e2:	4a08      	ldr	r2, [pc, #32]	@ (8008504 <json_create+0x44>)
 80084e4:	611a      	str	r2, [r3, #16]
    return json_createWithPool( str, &spool.pool );
 80084e6:	187b      	adds	r3, r7, r1
 80084e8:	330c      	adds	r3, #12
 80084ea:	001a      	movs	r2, r3
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	0011      	movs	r1, r2
 80084f0:	0018      	movs	r0, r3
 80084f2:	f7ff ffaa 	bl	800844a <json_createWithPool>
 80084f6:	0003      	movs	r3, r0
}
 80084f8:	0018      	movs	r0, r3
 80084fa:	46bd      	mov	sp, r7
 80084fc:	b00a      	add	sp, #40	@ 0x28
 80084fe:	bd80      	pop	{r7, pc}
 8008500:	08008c51 	.word	0x08008c51
 8008504:	08008c71 	.word	0x08008c71

08008508 <getEscape>:

/** Get a special character with its escape character. Examples:
  * 'b' -> '\\b', 'n' -> '\\n', 't' -> '\\t'
  * @param ch The escape character.
  * @retval  The character code. */
static char getEscape( char ch ) {
 8008508:	b580      	push	{r7, lr}
 800850a:	b084      	sub	sp, #16
 800850c:	af00      	add	r7, sp, #0
 800850e:	0002      	movs	r2, r0
 8008510:	1dfb      	adds	r3, r7, #7
 8008512:	701a      	strb	r2, [r3, #0]
        { '/',  '/'  }, { 'b',  '\b' },
        { 'f',  '\f' }, { 'n',  '\n' },
        { 'r',  '\r' }, { 't',  '\t' },
    };
    unsigned int i;
    for( i = 0; i < sizeof pair / sizeof *pair; ++i )
 8008514:	2300      	movs	r3, #0
 8008516:	60fb      	str	r3, [r7, #12]
 8008518:	e011      	b.n	800853e <getEscape+0x36>
        if ( pair[i].ch == ch )
 800851a:	4b0d      	ldr	r3, [pc, #52]	@ (8008550 <getEscape+0x48>)
 800851c:	68fa      	ldr	r2, [r7, #12]
 800851e:	0052      	lsls	r2, r2, #1
 8008520:	5cd3      	ldrb	r3, [r2, r3]
 8008522:	1dfa      	adds	r2, r7, #7
 8008524:	7812      	ldrb	r2, [r2, #0]
 8008526:	429a      	cmp	r2, r3
 8008528:	d106      	bne.n	8008538 <getEscape+0x30>
            return pair[i].code;
 800852a:	4a09      	ldr	r2, [pc, #36]	@ (8008550 <getEscape+0x48>)
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	005b      	lsls	r3, r3, #1
 8008530:	18d3      	adds	r3, r2, r3
 8008532:	3301      	adds	r3, #1
 8008534:	781b      	ldrb	r3, [r3, #0]
 8008536:	e006      	b.n	8008546 <getEscape+0x3e>
    for( i = 0; i < sizeof pair / sizeof *pair; ++i )
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	3301      	adds	r3, #1
 800853c:	60fb      	str	r3, [r7, #12]
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	2b07      	cmp	r3, #7
 8008542:	d9ea      	bls.n	800851a <getEscape+0x12>
    return '\0';
 8008544:	2300      	movs	r3, #0
}
 8008546:	0018      	movs	r0, r3
 8008548:	46bd      	mov	sp, r7
 800854a:	b004      	add	sp, #16
 800854c:	bd80      	pop	{r7, pc}
 800854e:	46c0      	nop			@ (mov r8, r8)
 8008550:	0801c15c 	.word	0x0801c15c

08008554 <getCharFromUnicode>:

/** Parse 4 characters.
  * @param str Pointer to  first digit.
  * @retval '?' If the four characters are hexadecimal digits.
  * @retval '\0' In other cases. */
static unsigned char getCharFromUnicode( unsigned char const* str ) {
 8008554:	b580      	push	{r7, lr}
 8008556:	b084      	sub	sp, #16
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
    unsigned int i;
    for( i = 0; i < 4; ++i )
 800855c:	2300      	movs	r3, #0
 800855e:	60fb      	str	r3, [r7, #12]
 8008560:	e010      	b.n	8008584 <getCharFromUnicode+0x30>
        if ( !isxdigit( str[i] ) )
 8008562:	687a      	ldr	r2, [r7, #4]
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	18d3      	adds	r3, r2, r3
 8008568:	781b      	ldrb	r3, [r3, #0]
 800856a:	1c5a      	adds	r2, r3, #1
 800856c:	4b09      	ldr	r3, [pc, #36]	@ (8008594 <getCharFromUnicode+0x40>)
 800856e:	18d3      	adds	r3, r2, r3
 8008570:	781b      	ldrb	r3, [r3, #0]
 8008572:	001a      	movs	r2, r3
 8008574:	2344      	movs	r3, #68	@ 0x44
 8008576:	4013      	ands	r3, r2
 8008578:	d101      	bne.n	800857e <getCharFromUnicode+0x2a>
            return '\0';
 800857a:	2300      	movs	r3, #0
 800857c:	e006      	b.n	800858c <getCharFromUnicode+0x38>
    for( i = 0; i < 4; ++i )
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	3301      	adds	r3, #1
 8008582:	60fb      	str	r3, [r7, #12]
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	2b03      	cmp	r3, #3
 8008588:	d9eb      	bls.n	8008562 <getCharFromUnicode+0xe>
    return '?';
 800858a:	233f      	movs	r3, #63	@ 0x3f
}
 800858c:	0018      	movs	r0, r3
 800858e:	46bd      	mov	sp, r7
 8008590:	b004      	add	sp, #16
 8008592:	bd80      	pop	{r7, pc}
 8008594:	0801c3d0 	.word	0x0801c3d0

08008598 <parseString>:
/** Parse a string and replace the scape characters by their meaning characters.
  * This parser stops when finds the character '\"'. Then replaces '\"' by '\0'.
  * @param str Pointer to first character.
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* parseString( char* str ) {
 8008598:	b5b0      	push	{r4, r5, r7, lr}
 800859a:	b086      	sub	sp, #24
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
    unsigned char* head = (unsigned char*)str;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	617b      	str	r3, [r7, #20]
    unsigned char* tail = (unsigned char*)str;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	613b      	str	r3, [r7, #16]
    for( ; *head; ++head, ++tail ) {
 80085a8:	e04f      	b.n	800864a <parseString+0xb2>
        if ( *head == '\"' ) {
 80085aa:	697b      	ldr	r3, [r7, #20]
 80085ac:	781b      	ldrb	r3, [r3, #0]
 80085ae:	2b22      	cmp	r3, #34	@ 0x22
 80085b0:	d107      	bne.n	80085c2 <parseString+0x2a>
            *tail = '\0';
 80085b2:	693b      	ldr	r3, [r7, #16]
 80085b4:	2200      	movs	r2, #0
 80085b6:	701a      	strb	r2, [r3, #0]
            return (char*)++head;
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	3301      	adds	r3, #1
 80085bc:	617b      	str	r3, [r7, #20]
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	e048      	b.n	8008654 <parseString+0xbc>
        }
        if ( *head == '\\' ) {
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	781b      	ldrb	r3, [r3, #0]
 80085c6:	2b5c      	cmp	r3, #92	@ 0x5c
 80085c8:	d135      	bne.n	8008636 <parseString+0x9e>
            if ( *++head == 'u' ) {
 80085ca:	697b      	ldr	r3, [r7, #20]
 80085cc:	3301      	adds	r3, #1
 80085ce:	617b      	str	r3, [r7, #20]
 80085d0:	697b      	ldr	r3, [r7, #20]
 80085d2:	781b      	ldrb	r3, [r3, #0]
 80085d4:	2b75      	cmp	r3, #117	@ 0x75
 80085d6:	d119      	bne.n	800860c <parseString+0x74>
                char const ch = getCharFromUnicode( ++head );
 80085d8:	697b      	ldr	r3, [r7, #20]
 80085da:	3301      	adds	r3, #1
 80085dc:	617b      	str	r3, [r7, #20]
 80085de:	250e      	movs	r5, #14
 80085e0:	197c      	adds	r4, r7, r5
 80085e2:	697b      	ldr	r3, [r7, #20]
 80085e4:	0018      	movs	r0, r3
 80085e6:	f7ff ffb5 	bl	8008554 <getCharFromUnicode>
 80085ea:	0003      	movs	r3, r0
 80085ec:	7023      	strb	r3, [r4, #0]
                if ( ch == '\0' ) return 0;
 80085ee:	197b      	adds	r3, r7, r5
 80085f0:	781b      	ldrb	r3, [r3, #0]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d101      	bne.n	80085fa <parseString+0x62>
 80085f6:	2300      	movs	r3, #0
 80085f8:	e02c      	b.n	8008654 <parseString+0xbc>
                *tail = ch;
 80085fa:	693b      	ldr	r3, [r7, #16]
 80085fc:	220e      	movs	r2, #14
 80085fe:	18ba      	adds	r2, r7, r2
 8008600:	7812      	ldrb	r2, [r2, #0]
 8008602:	701a      	strb	r2, [r3, #0]
                head += 3;
 8008604:	697b      	ldr	r3, [r7, #20]
 8008606:	3303      	adds	r3, #3
 8008608:	617b      	str	r3, [r7, #20]
 800860a:	e018      	b.n	800863e <parseString+0xa6>
            }
            else {
                char const esc = getEscape( *head );
 800860c:	697b      	ldr	r3, [r7, #20]
 800860e:	781b      	ldrb	r3, [r3, #0]
 8008610:	250f      	movs	r5, #15
 8008612:	197c      	adds	r4, r7, r5
 8008614:	0018      	movs	r0, r3
 8008616:	f7ff ff77 	bl	8008508 <getEscape>
 800861a:	0003      	movs	r3, r0
 800861c:	7023      	strb	r3, [r4, #0]
                if ( esc == '\0' ) return 0;
 800861e:	197b      	adds	r3, r7, r5
 8008620:	781b      	ldrb	r3, [r3, #0]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d101      	bne.n	800862a <parseString+0x92>
 8008626:	2300      	movs	r3, #0
 8008628:	e014      	b.n	8008654 <parseString+0xbc>
                *tail = esc;
 800862a:	693b      	ldr	r3, [r7, #16]
 800862c:	220f      	movs	r2, #15
 800862e:	18ba      	adds	r2, r7, r2
 8008630:	7812      	ldrb	r2, [r2, #0]
 8008632:	701a      	strb	r2, [r3, #0]
 8008634:	e003      	b.n	800863e <parseString+0xa6>
            }
        }
        else *tail = *head;
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	781a      	ldrb	r2, [r3, #0]
 800863a:	693b      	ldr	r3, [r7, #16]
 800863c:	701a      	strb	r2, [r3, #0]
    for( ; *head; ++head, ++tail ) {
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	3301      	adds	r3, #1
 8008642:	617b      	str	r3, [r7, #20]
 8008644:	693b      	ldr	r3, [r7, #16]
 8008646:	3301      	adds	r3, #1
 8008648:	613b      	str	r3, [r7, #16]
 800864a:	697b      	ldr	r3, [r7, #20]
 800864c:	781b      	ldrb	r3, [r3, #0]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d1ab      	bne.n	80085aa <parseString+0x12>
    }
    return 0;
 8008652:	2300      	movs	r3, #0
}
 8008654:	0018      	movs	r0, r3
 8008656:	46bd      	mov	sp, r7
 8008658:	b006      	add	sp, #24
 800865a:	bdb0      	pop	{r4, r5, r7, pc}

0800865c <propertyName>:
/** Parse a string to get the name of a property.
  * @param ptr Pointer to first character.
  * @param property The property to assign the name.
  * @retval Pointer to first of property value. If success.
  * @retval Null pointer if any error occur. */
static char* propertyName( char* ptr, json_t* property ) {
 800865c:	b580      	push	{r7, lr}
 800865e:	b082      	sub	sp, #8
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
 8008664:	6039      	str	r1, [r7, #0]
    property->name = ++ptr;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	3301      	adds	r3, #1
 800866a:	607b      	str	r3, [r7, #4]
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	687a      	ldr	r2, [r7, #4]
 8008670:	605a      	str	r2, [r3, #4]
    ptr = parseString( ptr );
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	0018      	movs	r0, r3
 8008676:	f7ff ff8f 	bl	8008598 <parseString>
 800867a:	0003      	movs	r3, r0
 800867c:	607b      	str	r3, [r7, #4]
    if ( !ptr ) return 0;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d101      	bne.n	8008688 <propertyName+0x2c>
 8008684:	2300      	movs	r3, #0
 8008686:	e017      	b.n	80086b8 <propertyName+0x5c>
    ptr = goBlank( ptr );
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	0018      	movs	r0, r3
 800868c:	f000 fb4c 	bl	8008d28 <goBlank>
 8008690:	0003      	movs	r3, r0
 8008692:	607b      	str	r3, [r7, #4]
    if ( !ptr ) return 0;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d101      	bne.n	800869e <propertyName+0x42>
 800869a:	2300      	movs	r3, #0
 800869c:	e00c      	b.n	80086b8 <propertyName+0x5c>
    if ( *ptr++ != ':' ) return 0;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	1c5a      	adds	r2, r3, #1
 80086a2:	607a      	str	r2, [r7, #4]
 80086a4:	781b      	ldrb	r3, [r3, #0]
 80086a6:	2b3a      	cmp	r3, #58	@ 0x3a
 80086a8:	d001      	beq.n	80086ae <propertyName+0x52>
 80086aa:	2300      	movs	r3, #0
 80086ac:	e004      	b.n	80086b8 <propertyName+0x5c>
    return goBlank( ptr );
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	0018      	movs	r0, r3
 80086b2:	f000 fb39 	bl	8008d28 <goBlank>
 80086b6:	0003      	movs	r3, r0
}
 80086b8:	0018      	movs	r0, r3
 80086ba:	46bd      	mov	sp, r7
 80086bc:	b002      	add	sp, #8
 80086be:	bd80      	pop	{r7, pc}

080086c0 <textValue>:
/** Parse a string to get the value of a property when its type is JSON_TEXT.
  * @param ptr Pointer to first character ('\"').
  * @param property The property to assign the name.
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* textValue( char* ptr, json_t* property ) {
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b082      	sub	sp, #8
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
 80086c8:	6039      	str	r1, [r7, #0]
    ++property->u.value;
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	689b      	ldr	r3, [r3, #8]
 80086ce:	1c5a      	adds	r2, r3, #1
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	609a      	str	r2, [r3, #8]
    ptr = parseString( ++ptr );
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	3301      	adds	r3, #1
 80086d8:	607b      	str	r3, [r7, #4]
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	0018      	movs	r0, r3
 80086de:	f7ff ff5b 	bl	8008598 <parseString>
 80086e2:	0003      	movs	r3, r0
 80086e4:	607b      	str	r3, [r7, #4]
    if ( !ptr ) return 0;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d101      	bne.n	80086f0 <textValue+0x30>
 80086ec:	2300      	movs	r3, #0
 80086ee:	e003      	b.n	80086f8 <textValue+0x38>
    property->type = JSON_TEXT;
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	2202      	movs	r2, #2
 80086f4:	741a      	strb	r2, [r3, #16]
    return ptr;
 80086f6:	687b      	ldr	r3, [r7, #4]
}
 80086f8:	0018      	movs	r0, r3
 80086fa:	46bd      	mov	sp, r7
 80086fc:	b002      	add	sp, #8
 80086fe:	bd80      	pop	{r7, pc}

08008700 <checkStr>:
/** Compare two strings until get the null character in the second one.
  * @param ptr sub string
  * @param str main string
  * @retval Pointer to next character.
  * @retval Null pointer if any error occur. */
static char* checkStr( char* ptr, char const* str ) {
 8008700:	b580      	push	{r7, lr}
 8008702:	b082      	sub	sp, #8
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
 8008708:	6039      	str	r1, [r7, #0]
    while( *str )
 800870a:	e00b      	b.n	8008724 <checkStr+0x24>
        if ( *ptr++ != *str++ )
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	1c5a      	adds	r2, r3, #1
 8008710:	607a      	str	r2, [r7, #4]
 8008712:	781a      	ldrb	r2, [r3, #0]
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	1c59      	adds	r1, r3, #1
 8008718:	6039      	str	r1, [r7, #0]
 800871a:	781b      	ldrb	r3, [r3, #0]
 800871c:	429a      	cmp	r2, r3
 800871e:	d001      	beq.n	8008724 <checkStr+0x24>
            return 0;
 8008720:	2300      	movs	r3, #0
 8008722:	e004      	b.n	800872e <checkStr+0x2e>
    while( *str )
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	781b      	ldrb	r3, [r3, #0]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d1ef      	bne.n	800870c <checkStr+0xc>
    return ptr;
 800872c:	687b      	ldr	r3, [r7, #4]
}
 800872e:	0018      	movs	r0, r3
 8008730:	46bd      	mov	sp, r7
 8008732:	b002      	add	sp, #8
 8008734:	bd80      	pop	{r7, pc}

08008736 <primitiveValue>:
  * @param property Property handler to set the value and the type, (true, false or null).
  * @param value String with the primitive literal.
  * @param type The code of the type. ( JSON_BOOLEAN or JSON_NULL )
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* primitiveValue( char* ptr, json_t* property, char const* value, jsonType_t type ) {
 8008736:	b580      	push	{r7, lr}
 8008738:	b084      	sub	sp, #16
 800873a:	af00      	add	r7, sp, #0
 800873c:	60f8      	str	r0, [r7, #12]
 800873e:	60b9      	str	r1, [r7, #8]
 8008740:	607a      	str	r2, [r7, #4]
 8008742:	001a      	movs	r2, r3
 8008744:	1cfb      	adds	r3, r7, #3
 8008746:	701a      	strb	r2, [r3, #0]
    ptr = checkStr( ptr, value );
 8008748:	687a      	ldr	r2, [r7, #4]
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	0011      	movs	r1, r2
 800874e:	0018      	movs	r0, r3
 8008750:	f7ff ffd6 	bl	8008700 <checkStr>
 8008754:	0003      	movs	r3, r0
 8008756:	60fb      	str	r3, [r7, #12]
    if ( !ptr || !isEndOfPrimitive( *ptr ) ) return 0;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d00b      	beq.n	8008776 <primitiveValue+0x40>
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	781b      	ldrb	r3, [r3, #0]
 8008762:	0018      	movs	r0, r3
 8008764:	f000 fb30 	bl	8008dc8 <isEndOfPrimitive>
 8008768:	0003      	movs	r3, r0
 800876a:	001a      	movs	r2, r3
 800876c:	2301      	movs	r3, #1
 800876e:	4053      	eors	r3, r2
 8008770:	b2db      	uxtb	r3, r3
 8008772:	2b00      	cmp	r3, #0
 8008774:	d001      	beq.n	800877a <primitiveValue+0x44>
 8008776:	2300      	movs	r3, #0
 8008778:	e00a      	b.n	8008790 <primitiveValue+0x5a>
    ptr = setToNull( ptr );
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	0018      	movs	r0, r3
 800877e:	f000 fb05 	bl	8008d8c <setToNull>
 8008782:	0003      	movs	r3, r0
 8008784:	60fb      	str	r3, [r7, #12]
    property->type = type;
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	1cfa      	adds	r2, r7, #3
 800878a:	7812      	ldrb	r2, [r2, #0]
 800878c:	741a      	strb	r2, [r3, #16]
    return ptr;
 800878e:	68fb      	ldr	r3, [r7, #12]
}
 8008790:	0018      	movs	r0, r3
 8008792:	46bd      	mov	sp, r7
 8008794:	b004      	add	sp, #16
 8008796:	bd80      	pop	{r7, pc}

08008798 <trueValue>:
  * If the first character after the value is different of '}' or ']' is set to '\0'.
  * @param ptr Pointer to first character.
  * @param property Property handler to set the value and the type, (true, false or null).
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* trueValue( char* ptr, json_t* property ) {
 8008798:	b580      	push	{r7, lr}
 800879a:	b082      	sub	sp, #8
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
 80087a0:	6039      	str	r1, [r7, #0]
    return primitiveValue( ptr, property, "true", JSON_BOOLEAN );
 80087a2:	4a05      	ldr	r2, [pc, #20]	@ (80087b8 <trueValue+0x20>)
 80087a4:	6839      	ldr	r1, [r7, #0]
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	2303      	movs	r3, #3
 80087aa:	f7ff ffc4 	bl	8008736 <primitiveValue>
 80087ae:	0003      	movs	r3, r0
}
 80087b0:	0018      	movs	r0, r3
 80087b2:	46bd      	mov	sp, r7
 80087b4:	b002      	add	sp, #8
 80087b6:	bd80      	pop	{r7, pc}
 80087b8:	0801186c 	.word	0x0801186c

080087bc <falseValue>:
  * If the first character after the value is different of '}' or ']' is set to '\0'.
  * @param ptr Pointer to first character.
  * @param property Property handler to set the value and the type, (true, false or null).
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* falseValue( char* ptr, json_t* property ) {
 80087bc:	b580      	push	{r7, lr}
 80087be:	b082      	sub	sp, #8
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
 80087c4:	6039      	str	r1, [r7, #0]
    return primitiveValue( ptr, property, "false", JSON_BOOLEAN );
 80087c6:	4a05      	ldr	r2, [pc, #20]	@ (80087dc <falseValue+0x20>)
 80087c8:	6839      	ldr	r1, [r7, #0]
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	2303      	movs	r3, #3
 80087ce:	f7ff ffb2 	bl	8008736 <primitiveValue>
 80087d2:	0003      	movs	r3, r0
}
 80087d4:	0018      	movs	r0, r3
 80087d6:	46bd      	mov	sp, r7
 80087d8:	b002      	add	sp, #8
 80087da:	bd80      	pop	{r7, pc}
 80087dc:	08011874 	.word	0x08011874

080087e0 <nullValue>:
  * If the first character after the value is different of '}' or ']' is set to '\0'.
  * @param ptr Pointer to first character.
  * @param property Property handler to set the value and the type, (true, false or null).
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* nullValue( char* ptr, json_t* property ) {
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b082      	sub	sp, #8
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
 80087e8:	6039      	str	r1, [r7, #0]
    return primitiveValue( ptr, property, "null", JSON_NULL );
 80087ea:	4a05      	ldr	r2, [pc, #20]	@ (8008800 <nullValue+0x20>)
 80087ec:	6839      	ldr	r1, [r7, #0]
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	2306      	movs	r3, #6
 80087f2:	f7ff ffa0 	bl	8008736 <primitiveValue>
 80087f6:	0003      	movs	r3, r0
}
 80087f8:	0018      	movs	r0, r3
 80087fa:	46bd      	mov	sp, r7
 80087fc:	b002      	add	sp, #8
 80087fe:	bd80      	pop	{r7, pc}
 8008800:	0801187c 	.word	0x0801187c

08008804 <expValue>:

/** Analyze the exponential part of a real number.
  * @param ptr Pointer to first character.
  * @retval Pointer to first non numerical after the string. If success.
  * @retval Null pointer if any error occur. */
static char* expValue( char* ptr ) {
 8008804:	b580      	push	{r7, lr}
 8008806:	b082      	sub	sp, #8
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
    if ( *ptr == '-' || *ptr == '+' ) ++ptr;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	781b      	ldrb	r3, [r3, #0]
 8008810:	2b2d      	cmp	r3, #45	@ 0x2d
 8008812:	d003      	beq.n	800881c <expValue+0x18>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	781b      	ldrb	r3, [r3, #0]
 8008818:	2b2b      	cmp	r3, #43	@ 0x2b
 800881a:	d102      	bne.n	8008822 <expValue+0x1e>
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	3301      	adds	r3, #1
 8008820:	607b      	str	r3, [r7, #4]
    if ( !isdigit( (int)(*ptr) ) ) return 0;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	781b      	ldrb	r3, [r3, #0]
 8008826:	1c5a      	adds	r2, r3, #1
 8008828:	4b0b      	ldr	r3, [pc, #44]	@ (8008858 <expValue+0x54>)
 800882a:	18d3      	adds	r3, r2, r3
 800882c:	781b      	ldrb	r3, [r3, #0]
 800882e:	001a      	movs	r2, r3
 8008830:	2304      	movs	r3, #4
 8008832:	4013      	ands	r3, r2
 8008834:	d101      	bne.n	800883a <expValue+0x36>
 8008836:	2300      	movs	r3, #0
 8008838:	e009      	b.n	800884e <expValue+0x4a>
    ptr = goNum( ++ptr );
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	3301      	adds	r3, #1
 800883e:	607b      	str	r3, [r7, #4]
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	0018      	movs	r0, r3
 8008844:	f000 fa82 	bl	8008d4c <goNum>
 8008848:	0003      	movs	r3, r0
 800884a:	607b      	str	r3, [r7, #4]
    return ptr;
 800884c:	687b      	ldr	r3, [r7, #4]
}
 800884e:	0018      	movs	r0, r3
 8008850:	46bd      	mov	sp, r7
 8008852:	b002      	add	sp, #8
 8008854:	bd80      	pop	{r7, pc}
 8008856:	46c0      	nop			@ (mov r8, r8)
 8008858:	0801c3d0 	.word	0x0801c3d0

0800885c <fraqValue>:

/** Analyze the decimal part of a real number.
  * @param ptr Pointer to first character.
  * @retval Pointer to first non numerical after the string. If success.
  * @retval Null pointer if any error occur. */
static char* fraqValue( char* ptr ) {
 800885c:	b580      	push	{r7, lr}
 800885e:	b082      	sub	sp, #8
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
    if ( !isdigit( (int)(*ptr) ) ) return 0;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	781b      	ldrb	r3, [r3, #0]
 8008868:	1c5a      	adds	r2, r3, #1
 800886a:	4b0e      	ldr	r3, [pc, #56]	@ (80088a4 <fraqValue+0x48>)
 800886c:	18d3      	adds	r3, r2, r3
 800886e:	781b      	ldrb	r3, [r3, #0]
 8008870:	001a      	movs	r2, r3
 8008872:	2304      	movs	r3, #4
 8008874:	4013      	ands	r3, r2
 8008876:	d101      	bne.n	800887c <fraqValue+0x20>
 8008878:	2300      	movs	r3, #0
 800887a:	e00e      	b.n	800889a <fraqValue+0x3e>
    ptr = goNum( ++ptr );
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	3301      	adds	r3, #1
 8008880:	607b      	str	r3, [r7, #4]
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	0018      	movs	r0, r3
 8008886:	f000 fa61 	bl	8008d4c <goNum>
 800888a:	0003      	movs	r3, r0
 800888c:	607b      	str	r3, [r7, #4]
    if ( !ptr ) return 0;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d101      	bne.n	8008898 <fraqValue+0x3c>
 8008894:	2300      	movs	r3, #0
 8008896:	e000      	b.n	800889a <fraqValue+0x3e>
    return ptr;
 8008898:	687b      	ldr	r3, [r7, #4]
}
 800889a:	0018      	movs	r0, r3
 800889c:	46bd      	mov	sp, r7
 800889e:	b002      	add	sp, #8
 80088a0:	bd80      	pop	{r7, pc}
 80088a2:	46c0      	nop			@ (mov r8, r8)
 80088a4:	0801c3d0 	.word	0x0801c3d0

080088a8 <numValue>:
  * If the first character after the value is different of '}' or ']' is set to '\0'.
  * @param ptr Pointer to first character.
  * @param property Property handler to set the value and the type: JSON_REAL or JSON_INTEGER.
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* numValue( char* ptr, json_t* property ) {
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b088      	sub	sp, #32
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
 80088b0:	6039      	str	r1, [r7, #0]
    if ( *ptr == '-' ) ++ptr;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	781b      	ldrb	r3, [r3, #0]
 80088b6:	2b2d      	cmp	r3, #45	@ 0x2d
 80088b8:	d102      	bne.n	80088c0 <numValue+0x18>
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	3301      	adds	r3, #1
 80088be:	607b      	str	r3, [r7, #4]
    if ( !isdigit( (int)(*ptr) ) ) return 0;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	781b      	ldrb	r3, [r3, #0]
 80088c4:	1c5a      	adds	r2, r3, #1
 80088c6:	4b5b      	ldr	r3, [pc, #364]	@ (8008a34 <numValue+0x18c>)
 80088c8:	18d3      	adds	r3, r2, r3
 80088ca:	781b      	ldrb	r3, [r3, #0]
 80088cc:	001a      	movs	r2, r3
 80088ce:	2304      	movs	r3, #4
 80088d0:	4013      	ands	r3, r2
 80088d2:	d101      	bne.n	80088d8 <numValue+0x30>
 80088d4:	2300      	movs	r3, #0
 80088d6:	e0a8      	b.n	8008a2a <numValue+0x182>
    if ( *ptr != '0' ) {
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	781b      	ldrb	r3, [r3, #0]
 80088dc:	2b30      	cmp	r3, #48	@ 0x30
 80088de:	d00a      	beq.n	80088f6 <numValue+0x4e>
        ptr = goNum( ptr );
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	0018      	movs	r0, r3
 80088e4:	f000 fa32 	bl	8008d4c <goNum>
 80088e8:	0003      	movs	r3, r0
 80088ea:	607b      	str	r3, [r7, #4]
        if ( !ptr ) return 0;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d110      	bne.n	8008914 <numValue+0x6c>
 80088f2:	2300      	movs	r3, #0
 80088f4:	e099      	b.n	8008a2a <numValue+0x182>
    }
    else if ( isdigit( (int)(*++ptr) ) ) return 0;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	3301      	adds	r3, #1
 80088fa:	607b      	str	r3, [r7, #4]
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	781b      	ldrb	r3, [r3, #0]
 8008900:	1c5a      	adds	r2, r3, #1
 8008902:	4b4c      	ldr	r3, [pc, #304]	@ (8008a34 <numValue+0x18c>)
 8008904:	18d3      	adds	r3, r2, r3
 8008906:	781b      	ldrb	r3, [r3, #0]
 8008908:	001a      	movs	r2, r3
 800890a:	2304      	movs	r3, #4
 800890c:	4013      	ands	r3, r2
 800890e:	d001      	beq.n	8008914 <numValue+0x6c>
 8008910:	2300      	movs	r3, #0
 8008912:	e08a      	b.n	8008a2a <numValue+0x182>
    property->type = JSON_INTEGER;
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	2204      	movs	r2, #4
 8008918:	741a      	strb	r2, [r3, #16]
    if ( *ptr == '.' ) {
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	781b      	ldrb	r3, [r3, #0]
 800891e:	2b2e      	cmp	r3, #46	@ 0x2e
 8008920:	d110      	bne.n	8008944 <numValue+0x9c>
        ptr = fraqValue( ++ptr );
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	3301      	adds	r3, #1
 8008926:	607b      	str	r3, [r7, #4]
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	0018      	movs	r0, r3
 800892c:	f7ff ff96 	bl	800885c <fraqValue>
 8008930:	0003      	movs	r3, r0
 8008932:	607b      	str	r3, [r7, #4]
        if ( !ptr ) return 0;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d101      	bne.n	800893e <numValue+0x96>
 800893a:	2300      	movs	r3, #0
 800893c:	e075      	b.n	8008a2a <numValue+0x182>
        property->type = JSON_REAL;
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	2205      	movs	r2, #5
 8008942:	741a      	strb	r2, [r3, #16]
    }
    if ( *ptr == 'e' || *ptr == 'E' ) {
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	781b      	ldrb	r3, [r3, #0]
 8008948:	2b65      	cmp	r3, #101	@ 0x65
 800894a:	d003      	beq.n	8008954 <numValue+0xac>
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	781b      	ldrb	r3, [r3, #0]
 8008950:	2b45      	cmp	r3, #69	@ 0x45
 8008952:	d110      	bne.n	8008976 <numValue+0xce>
        ptr = expValue( ++ptr );
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	3301      	adds	r3, #1
 8008958:	607b      	str	r3, [r7, #4]
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	0018      	movs	r0, r3
 800895e:	f7ff ff51 	bl	8008804 <expValue>
 8008962:	0003      	movs	r3, r0
 8008964:	607b      	str	r3, [r7, #4]
        if ( !ptr ) return 0;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d101      	bne.n	8008970 <numValue+0xc8>
 800896c:	2300      	movs	r3, #0
 800896e:	e05c      	b.n	8008a2a <numValue+0x182>
        property->type = JSON_REAL;
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	2205      	movs	r2, #5
 8008974:	741a      	strb	r2, [r3, #16]
    }
    if ( !isEndOfPrimitive( *ptr ) ) return 0;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	781b      	ldrb	r3, [r3, #0]
 800897a:	0018      	movs	r0, r3
 800897c:	f000 fa24 	bl	8008dc8 <isEndOfPrimitive>
 8008980:	0003      	movs	r3, r0
 8008982:	001a      	movs	r2, r3
 8008984:	2301      	movs	r3, #1
 8008986:	4053      	eors	r3, r2
 8008988:	b2db      	uxtb	r3, r3
 800898a:	2b00      	cmp	r3, #0
 800898c:	d001      	beq.n	8008992 <numValue+0xea>
 800898e:	2300      	movs	r3, #0
 8008990:	e04b      	b.n	8008a2a <numValue+0x182>
    if ( JSON_INTEGER == property->type ) {
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	7c1b      	ldrb	r3, [r3, #16]
 8008996:	2b04      	cmp	r3, #4
 8008998:	d140      	bne.n	8008a1c <numValue+0x174>
        char const* value = property->u.value;
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	689b      	ldr	r3, [r3, #8]
 800899e:	61fb      	str	r3, [r7, #28]
        bool const negative = *value == '-';
 80089a0:	69fb      	ldr	r3, [r7, #28]
 80089a2:	781a      	ldrb	r2, [r3, #0]
 80089a4:	201b      	movs	r0, #27
 80089a6:	183b      	adds	r3, r7, r0
 80089a8:	3a2d      	subs	r2, #45	@ 0x2d
 80089aa:	4251      	negs	r1, r2
 80089ac:	414a      	adcs	r2, r1
 80089ae:	701a      	strb	r2, [r3, #0]
        static char const min[] = "-9223372036854775808";
        static char const max[] = "9223372036854775807";
        unsigned int const maxdigits = ( negative? sizeof min: sizeof max ) - 1;
 80089b0:	183b      	adds	r3, r7, r0
 80089b2:	781b      	ldrb	r3, [r3, #0]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d001      	beq.n	80089bc <numValue+0x114>
 80089b8:	2314      	movs	r3, #20
 80089ba:	e000      	b.n	80089be <numValue+0x116>
 80089bc:	2313      	movs	r3, #19
 80089be:	617b      	str	r3, [r7, #20]
        unsigned int const len = ( unsigned int const ) ( ptr - value );
 80089c0:	687a      	ldr	r2, [r7, #4]
 80089c2:	69fb      	ldr	r3, [r7, #28]
 80089c4:	1ad3      	subs	r3, r2, r3
 80089c6:	613b      	str	r3, [r7, #16]
        if ( len > maxdigits ) return 0;
 80089c8:	693a      	ldr	r2, [r7, #16]
 80089ca:	697b      	ldr	r3, [r7, #20]
 80089cc:	429a      	cmp	r2, r3
 80089ce:	d901      	bls.n	80089d4 <numValue+0x12c>
 80089d0:	2300      	movs	r3, #0
 80089d2:	e02a      	b.n	8008a2a <numValue+0x182>
        if ( len == maxdigits ) {
 80089d4:	693a      	ldr	r2, [r7, #16]
 80089d6:	697b      	ldr	r3, [r7, #20]
 80089d8:	429a      	cmp	r2, r3
 80089da:	d11f      	bne.n	8008a1c <numValue+0x174>
            char const tmp = *ptr;
 80089dc:	230f      	movs	r3, #15
 80089de:	18fb      	adds	r3, r7, r3
 80089e0:	687a      	ldr	r2, [r7, #4]
 80089e2:	7812      	ldrb	r2, [r2, #0]
 80089e4:	701a      	strb	r2, [r3, #0]
            *ptr = '\0';
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2200      	movs	r2, #0
 80089ea:	701a      	strb	r2, [r3, #0]
            char const* const threshold = negative ? min: max;
 80089ec:	231b      	movs	r3, #27
 80089ee:	18fb      	adds	r3, r7, r3
 80089f0:	781b      	ldrb	r3, [r3, #0]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d001      	beq.n	80089fa <numValue+0x152>
 80089f6:	4b10      	ldr	r3, [pc, #64]	@ (8008a38 <numValue+0x190>)
 80089f8:	e000      	b.n	80089fc <numValue+0x154>
 80089fa:	4b10      	ldr	r3, [pc, #64]	@ (8008a3c <numValue+0x194>)
 80089fc:	60bb      	str	r3, [r7, #8]
            if ( 0 > strcmp( threshold, value ) ) return 0;
 80089fe:	69fa      	ldr	r2, [r7, #28]
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	0011      	movs	r1, r2
 8008a04:	0018      	movs	r0, r3
 8008a06:	f7f7 fb7f 	bl	8000108 <strcmp>
 8008a0a:	1e03      	subs	r3, r0, #0
 8008a0c:	da01      	bge.n	8008a12 <numValue+0x16a>
 8008a0e:	2300      	movs	r3, #0
 8008a10:	e00b      	b.n	8008a2a <numValue+0x182>
            *ptr = tmp;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	220f      	movs	r2, #15
 8008a16:	18ba      	adds	r2, r7, r2
 8008a18:	7812      	ldrb	r2, [r2, #0]
 8008a1a:	701a      	strb	r2, [r3, #0]
        }
    }
    ptr = setToNull( ptr );
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	0018      	movs	r0, r3
 8008a20:	f000 f9b4 	bl	8008d8c <setToNull>
 8008a24:	0003      	movs	r3, r0
 8008a26:	607b      	str	r3, [r7, #4]
    return ptr;
 8008a28:	687b      	ldr	r3, [r7, #4]
}
 8008a2a:	0018      	movs	r0, r3
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	b008      	add	sp, #32
 8008a30:	bd80      	pop	{r7, pc}
 8008a32:	46c0      	nop			@ (mov r8, r8)
 8008a34:	0801c3d0 	.word	0x0801c3d0
 8008a38:	0801c16c 	.word	0x0801c16c
 8008a3c:	0801c184 	.word	0x0801c184

08008a40 <add>:

/** Add a property to a JSON object or array.
  * @param obj The handler of the JSON object or array.
  * @param property The handler of the property to be added. */
static void add( json_t* obj, json_t* property ) {
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b082      	sub	sp, #8
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
 8008a48:	6039      	str	r1, [r7, #0]
    property->sibling = 0;
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	601a      	str	r2, [r3, #0]
    if ( !obj->u.c.child ){
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	689b      	ldr	r3, [r3, #8]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d106      	bne.n	8008a66 <add+0x26>
	    obj->u.c.child = property;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	683a      	ldr	r2, [r7, #0]
 8008a5c:	609a      	str	r2, [r3, #8]
	    obj->u.c.last_child = property;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	683a      	ldr	r2, [r7, #0]
 8008a62:	60da      	str	r2, [r3, #12]
    } else {
	    obj->u.c.last_child->sibling = property;
	    obj->u.c.last_child = property;
    }
}
 8008a64:	e006      	b.n	8008a74 <add+0x34>
	    obj->u.c.last_child->sibling = property;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	68db      	ldr	r3, [r3, #12]
 8008a6a:	683a      	ldr	r2, [r7, #0]
 8008a6c:	601a      	str	r2, [r3, #0]
	    obj->u.c.last_child = property;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	683a      	ldr	r2, [r7, #0]
 8008a72:	60da      	str	r2, [r3, #12]
}
 8008a74:	46c0      	nop			@ (mov r8, r8)
 8008a76:	46bd      	mov	sp, r7
 8008a78:	b002      	add	sp, #8
 8008a7a:	bd80      	pop	{r7, pc}

08008a7c <objValue>:
  * @param ptr Pointer to first character.
  * @param obj The handler of the JSON root object or array.
  * @param pool The handler of a json pool for creating json instances.
  * @retval Pointer to first character after the value. If success.
  * @retval Null pointer if any error occur. */
static char* objValue( char* ptr, json_t* obj, jsonPool_t* pool ) {
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b088      	sub	sp, #32
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	60f8      	str	r0, [r7, #12]
 8008a84:	60b9      	str	r1, [r7, #8]
 8008a86:	607a      	str	r2, [r7, #4]
    obj->type    = *ptr == '{' ? JSON_OBJ : JSON_ARRAY;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	781b      	ldrb	r3, [r3, #0]
 8008a8c:	3b7b      	subs	r3, #123	@ 0x7b
 8008a8e:	1e5a      	subs	r2, r3, #1
 8008a90:	4193      	sbcs	r3, r2
 8008a92:	b2db      	uxtb	r3, r3
 8008a94:	001a      	movs	r2, r3
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	741a      	strb	r2, [r3, #16]
    obj->u.c.child = 0;
 8008a9a:	68bb      	ldr	r3, [r7, #8]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	609a      	str	r2, [r3, #8]
    obj->sibling = 0;
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	601a      	str	r2, [r3, #0]
    ptr++;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	3301      	adds	r3, #1
 8008aaa:	60fb      	str	r3, [r7, #12]
    for(;;) {
        ptr = goBlank( ptr );
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	0018      	movs	r0, r3
 8008ab0:	f000 f93a 	bl	8008d28 <goBlank>
 8008ab4:	0003      	movs	r3, r0
 8008ab6:	60fb      	str	r3, [r7, #12]
        if ( !ptr ) return 0;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d101      	bne.n	8008ac2 <objValue+0x46>
 8008abe:	2300      	movs	r3, #0
 8008ac0:	e0c0      	b.n	8008c44 <objValue+0x1c8>
        if ( *ptr == ',' ) {
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	781b      	ldrb	r3, [r3, #0]
 8008ac6:	2b2c      	cmp	r3, #44	@ 0x2c
 8008ac8:	d103      	bne.n	8008ad2 <objValue+0x56>
            ++ptr;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	3301      	adds	r3, #1
 8008ace:	60fb      	str	r3, [r7, #12]
            continue;
 8008ad0:	e0b7      	b.n	8008c42 <objValue+0x1c6>
        }
        char const endchar = ( obj->type == JSON_OBJ )? '}': ']';
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	7c1b      	ldrb	r3, [r3, #16]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d101      	bne.n	8008ade <objValue+0x62>
 8008ada:	227d      	movs	r2, #125	@ 0x7d
 8008adc:	e000      	b.n	8008ae0 <objValue+0x64>
 8008ade:	225d      	movs	r2, #93	@ 0x5d
 8008ae0:	211f      	movs	r1, #31
 8008ae2:	187b      	adds	r3, r7, r1
 8008ae4:	701a      	strb	r2, [r3, #0]
        if ( *ptr == endchar ) {
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	781b      	ldrb	r3, [r3, #0]
 8008aea:	187a      	adds	r2, r7, r1
 8008aec:	7812      	ldrb	r2, [r2, #0]
 8008aee:	429a      	cmp	r2, r3
 8008af0:	d116      	bne.n	8008b20 <objValue+0xa4>
            *ptr = '\0';
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	2200      	movs	r2, #0
 8008af6:	701a      	strb	r2, [r3, #0]
            json_t* parentObj = obj->sibling;
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	617b      	str	r3, [r7, #20]
            if ( !parentObj ) return ++ptr;
 8008afe:	697b      	ldr	r3, [r7, #20]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d104      	bne.n	8008b0e <objValue+0x92>
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	3301      	adds	r3, #1
 8008b08:	60fb      	str	r3, [r7, #12]
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	e09a      	b.n	8008c44 <objValue+0x1c8>
            obj->sibling = 0;
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	2200      	movs	r2, #0
 8008b12:	601a      	str	r2, [r3, #0]
            obj = parentObj;
 8008b14:	697b      	ldr	r3, [r7, #20]
 8008b16:	60bb      	str	r3, [r7, #8]
            ++ptr;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	3301      	adds	r3, #1
 8008b1c:	60fb      	str	r3, [r7, #12]
            continue;
 8008b1e:	e090      	b.n	8008c42 <objValue+0x1c6>
        }
        json_t* property = pool->alloc( pool );
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	685b      	ldr	r3, [r3, #4]
 8008b24:	687a      	ldr	r2, [r7, #4]
 8008b26:	0010      	movs	r0, r2
 8008b28:	4798      	blx	r3
 8008b2a:	0003      	movs	r3, r0
 8008b2c:	61bb      	str	r3, [r7, #24]
        if ( !property ) return 0;
 8008b2e:	69bb      	ldr	r3, [r7, #24]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d101      	bne.n	8008b38 <objValue+0xbc>
 8008b34:	2300      	movs	r3, #0
 8008b36:	e085      	b.n	8008c44 <objValue+0x1c8>
        if( obj->type != JSON_ARRAY ) {
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	7c1b      	ldrb	r3, [r3, #16]
 8008b3c:	2b01      	cmp	r3, #1
 8008b3e:	d012      	beq.n	8008b66 <objValue+0xea>
            if ( *ptr != '\"' ) return 0;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	781b      	ldrb	r3, [r3, #0]
 8008b44:	2b22      	cmp	r3, #34	@ 0x22
 8008b46:	d001      	beq.n	8008b4c <objValue+0xd0>
 8008b48:	2300      	movs	r3, #0
 8008b4a:	e07b      	b.n	8008c44 <objValue+0x1c8>
            ptr = propertyName( ptr, property );
 8008b4c:	69ba      	ldr	r2, [r7, #24]
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	0011      	movs	r1, r2
 8008b52:	0018      	movs	r0, r3
 8008b54:	f7ff fd82 	bl	800865c <propertyName>
 8008b58:	0003      	movs	r3, r0
 8008b5a:	60fb      	str	r3, [r7, #12]
            if ( !ptr ) return 0;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d104      	bne.n	8008b6c <objValue+0xf0>
 8008b62:	2300      	movs	r3, #0
 8008b64:	e06e      	b.n	8008c44 <objValue+0x1c8>
        }
        else property->name = 0;
 8008b66:	69bb      	ldr	r3, [r7, #24]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	605a      	str	r2, [r3, #4]
        add( obj, property );
 8008b6c:	69ba      	ldr	r2, [r7, #24]
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	0011      	movs	r1, r2
 8008b72:	0018      	movs	r0, r3
 8008b74:	f7ff ff64 	bl	8008a40 <add>
        property->u.value = ptr;
 8008b78:	69bb      	ldr	r3, [r7, #24]
 8008b7a:	68fa      	ldr	r2, [r7, #12]
 8008b7c:	609a      	str	r2, [r3, #8]
        switch( *ptr ) {
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	781b      	ldrb	r3, [r3, #0]
 8008b82:	2b22      	cmp	r3, #34	@ 0x22
 8008b84:	d02a      	beq.n	8008bdc <objValue+0x160>
 8008b86:	db4d      	blt.n	8008c24 <objValue+0x1a8>
 8008b88:	2b7b      	cmp	r3, #123	@ 0x7b
 8008b8a:	dc4b      	bgt.n	8008c24 <objValue+0x1a8>
 8008b8c:	2b5b      	cmp	r3, #91	@ 0x5b
 8008b8e:	db49      	blt.n	8008c24 <objValue+0x1a8>
 8008b90:	3b5b      	subs	r3, #91	@ 0x5b
 8008b92:	2b20      	cmp	r3, #32
 8008b94:	d846      	bhi.n	8008c24 <objValue+0x1a8>
 8008b96:	009a      	lsls	r2, r3, #2
 8008b98:	4b2c      	ldr	r3, [pc, #176]	@ (8008c4c <objValue+0x1d0>)
 8008b9a:	18d3      	adds	r3, r2, r3
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	469f      	mov	pc, r3
            case '{':
                property->type    = JSON_OBJ;
 8008ba0:	69bb      	ldr	r3, [r7, #24]
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	741a      	strb	r2, [r3, #16]
                property->u.c.child = 0;
 8008ba6:	69bb      	ldr	r3, [r7, #24]
 8008ba8:	2200      	movs	r2, #0
 8008baa:	609a      	str	r2, [r3, #8]
                property->sibling = obj;
 8008bac:	69bb      	ldr	r3, [r7, #24]
 8008bae:	68ba      	ldr	r2, [r7, #8]
 8008bb0:	601a      	str	r2, [r3, #0]
                obj = property;
 8008bb2:	69bb      	ldr	r3, [r7, #24]
 8008bb4:	60bb      	str	r3, [r7, #8]
                ++ptr;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	3301      	adds	r3, #1
 8008bba:	60fb      	str	r3, [r7, #12]
                break;
 8008bbc:	e03b      	b.n	8008c36 <objValue+0x1ba>
            case '[':
                property->type    = JSON_ARRAY;
 8008bbe:	69bb      	ldr	r3, [r7, #24]
 8008bc0:	2201      	movs	r2, #1
 8008bc2:	741a      	strb	r2, [r3, #16]
                property->u.c.child = 0;
 8008bc4:	69bb      	ldr	r3, [r7, #24]
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	609a      	str	r2, [r3, #8]
                property->sibling = obj;
 8008bca:	69bb      	ldr	r3, [r7, #24]
 8008bcc:	68ba      	ldr	r2, [r7, #8]
 8008bce:	601a      	str	r2, [r3, #0]
                obj = property;
 8008bd0:	69bb      	ldr	r3, [r7, #24]
 8008bd2:	60bb      	str	r3, [r7, #8]
                ++ptr;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	3301      	adds	r3, #1
 8008bd8:	60fb      	str	r3, [r7, #12]
                break;
 8008bda:	e02c      	b.n	8008c36 <objValue+0x1ba>
            case '\"': ptr = textValue( ptr, property );  break;
 8008bdc:	69ba      	ldr	r2, [r7, #24]
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	0011      	movs	r1, r2
 8008be2:	0018      	movs	r0, r3
 8008be4:	f7ff fd6c 	bl	80086c0 <textValue>
 8008be8:	0003      	movs	r3, r0
 8008bea:	60fb      	str	r3, [r7, #12]
 8008bec:	e023      	b.n	8008c36 <objValue+0x1ba>
            case 't':  ptr = trueValue( ptr, property );  break;
 8008bee:	69ba      	ldr	r2, [r7, #24]
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	0011      	movs	r1, r2
 8008bf4:	0018      	movs	r0, r3
 8008bf6:	f7ff fdcf 	bl	8008798 <trueValue>
 8008bfa:	0003      	movs	r3, r0
 8008bfc:	60fb      	str	r3, [r7, #12]
 8008bfe:	e01a      	b.n	8008c36 <objValue+0x1ba>
            case 'f':  ptr = falseValue( ptr, property ); break;
 8008c00:	69ba      	ldr	r2, [r7, #24]
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	0011      	movs	r1, r2
 8008c06:	0018      	movs	r0, r3
 8008c08:	f7ff fdd8 	bl	80087bc <falseValue>
 8008c0c:	0003      	movs	r3, r0
 8008c0e:	60fb      	str	r3, [r7, #12]
 8008c10:	e011      	b.n	8008c36 <objValue+0x1ba>
            case 'n':  ptr = nullValue( ptr, property );  break;
 8008c12:	69ba      	ldr	r2, [r7, #24]
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	0011      	movs	r1, r2
 8008c18:	0018      	movs	r0, r3
 8008c1a:	f7ff fde1 	bl	80087e0 <nullValue>
 8008c1e:	0003      	movs	r3, r0
 8008c20:	60fb      	str	r3, [r7, #12]
 8008c22:	e008      	b.n	8008c36 <objValue+0x1ba>
            default:   ptr = numValue( ptr, property );   break;
 8008c24:	69ba      	ldr	r2, [r7, #24]
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	0011      	movs	r1, r2
 8008c2a:	0018      	movs	r0, r3
 8008c2c:	f7ff fe3c 	bl	80088a8 <numValue>
 8008c30:	0003      	movs	r3, r0
 8008c32:	60fb      	str	r3, [r7, #12]
 8008c34:	46c0      	nop			@ (mov r8, r8)
        }
        if ( !ptr ) return 0;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d000      	beq.n	8008c3e <objValue+0x1c2>
 8008c3c:	e736      	b.n	8008aac <objValue+0x30>
 8008c3e:	2300      	movs	r3, #0
 8008c40:	e000      	b.n	8008c44 <objValue+0x1c8>
    for(;;) {
 8008c42:	e733      	b.n	8008aac <objValue+0x30>
    }
}
 8008c44:	0018      	movs	r0, r3
 8008c46:	46bd      	mov	sp, r7
 8008c48:	b008      	add	sp, #32
 8008c4a:	bd80      	pop	{r7, pc}
 8008c4c:	0801c0d8 	.word	0x0801c0d8

08008c50 <poolInit>:

/** Initialize a json pool.
  * @param pool The handler of the pool.
  * @return a instance of a json. */
static json_t* poolInit( jsonPool_t* pool ) {
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b084      	sub	sp, #16
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
    jsonStaticPool_t *spool = json_containerOf( pool, jsonStaticPool_t, pool );
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	3b0c      	subs	r3, #12
 8008c5c:	60fb      	str	r3, [r7, #12]
    spool->nextFree = 1;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	2201      	movs	r2, #1
 8008c62:	609a      	str	r2, [r3, #8]
    return spool->mem;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	681b      	ldr	r3, [r3, #0]
}
 8008c68:	0018      	movs	r0, r3
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	b004      	add	sp, #16
 8008c6e:	bd80      	pop	{r7, pc}

08008c70 <poolAlloc>:

/** Create an instance of a json from a pool.
  * @param pool The handler of the pool.
  * @retval The handler of the new instance if success.
  * @retval Null pointer if the pool was empty. */
static json_t* poolAlloc( jsonPool_t* pool ) {
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b084      	sub	sp, #16
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
    jsonStaticPool_t *spool = json_containerOf( pool, jsonStaticPool_t, pool );
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	3b0c      	subs	r3, #12
 8008c7c:	60fb      	str	r3, [r7, #12]
    if ( spool->nextFree >= spool->qty ) return 0;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	689a      	ldr	r2, [r3, #8]
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	685b      	ldr	r3, [r3, #4]
 8008c86:	429a      	cmp	r2, r3
 8008c88:	d301      	bcc.n	8008c8e <poolAlloc+0x1e>
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	e00b      	b.n	8008ca6 <poolAlloc+0x36>
    return spool->mem + spool->nextFree++;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	6819      	ldr	r1, [r3, #0]
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	689a      	ldr	r2, [r3, #8]
 8008c96:	1c50      	adds	r0, r2, #1
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	6098      	str	r0, [r3, #8]
 8008c9c:	0013      	movs	r3, r2
 8008c9e:	009b      	lsls	r3, r3, #2
 8008ca0:	189b      	adds	r3, r3, r2
 8008ca2:	009b      	lsls	r3, r3, #2
 8008ca4:	18cb      	adds	r3, r1, r3
}
 8008ca6:	0018      	movs	r0, r3
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	b004      	add	sp, #16
 8008cac:	bd80      	pop	{r7, pc}

08008cae <isOneOfThem>:

/** Checks whether an character belongs to set.
  * @param ch Character value to be checked.
  * @param set Set of characters. It is just a null-terminated string.
  * @return true or false there is membership or not. */
static bool isOneOfThem( char ch, char const* set ) {
 8008cae:	b580      	push	{r7, lr}
 8008cb0:	b082      	sub	sp, #8
 8008cb2:	af00      	add	r7, sp, #0
 8008cb4:	0002      	movs	r2, r0
 8008cb6:	6039      	str	r1, [r7, #0]
 8008cb8:	1dfb      	adds	r3, r7, #7
 8008cba:	701a      	strb	r2, [r3, #0]
    while( *set != '\0' )
 8008cbc:	e009      	b.n	8008cd2 <isOneOfThem+0x24>
        if ( ch == *set++ )
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	1c5a      	adds	r2, r3, #1
 8008cc2:	603a      	str	r2, [r7, #0]
 8008cc4:	781b      	ldrb	r3, [r3, #0]
 8008cc6:	1dfa      	adds	r2, r7, #7
 8008cc8:	7812      	ldrb	r2, [r2, #0]
 8008cca:	429a      	cmp	r2, r3
 8008ccc:	d101      	bne.n	8008cd2 <isOneOfThem+0x24>
            return true;
 8008cce:	2301      	movs	r3, #1
 8008cd0:	e004      	b.n	8008cdc <isOneOfThem+0x2e>
    while( *set != '\0' )
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	781b      	ldrb	r3, [r3, #0]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d1f1      	bne.n	8008cbe <isOneOfThem+0x10>
    return false;
 8008cda:	2300      	movs	r3, #0
}
 8008cdc:	0018      	movs	r0, r3
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	b002      	add	sp, #8
 8008ce2:	bd80      	pop	{r7, pc}

08008ce4 <goWhile>:

/** Increases a pointer while it points to a character that belongs to a set.
  * @param str The initial pointer value.
  * @param set Set of characters. It is just a null-terminated string.
  * @return The final pointer value or null pointer if the null character was found. */
static char* goWhile( char* str, char const* set ) {
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b082      	sub	sp, #8
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
 8008cec:	6039      	str	r1, [r7, #0]
    for(; *str != '\0'; ++str ) {
 8008cee:	e012      	b.n	8008d16 <goWhile+0x32>
        if ( !isOneOfThem( *str, set ) )
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	781b      	ldrb	r3, [r3, #0]
 8008cf4:	683a      	ldr	r2, [r7, #0]
 8008cf6:	0011      	movs	r1, r2
 8008cf8:	0018      	movs	r0, r3
 8008cfa:	f7ff ffd8 	bl	8008cae <isOneOfThem>
 8008cfe:	0003      	movs	r3, r0
 8008d00:	001a      	movs	r2, r3
 8008d02:	2301      	movs	r3, #1
 8008d04:	4053      	eors	r3, r2
 8008d06:	b2db      	uxtb	r3, r3
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d001      	beq.n	8008d10 <goWhile+0x2c>
            return str;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	e007      	b.n	8008d20 <goWhile+0x3c>
    for(; *str != '\0'; ++str ) {
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	3301      	adds	r3, #1
 8008d14:	607b      	str	r3, [r7, #4]
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	781b      	ldrb	r3, [r3, #0]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d1e8      	bne.n	8008cf0 <goWhile+0xc>
    }
    return 0;
 8008d1e:	2300      	movs	r3, #0
}
 8008d20:	0018      	movs	r0, r3
 8008d22:	46bd      	mov	sp, r7
 8008d24:	b002      	add	sp, #8
 8008d26:	bd80      	pop	{r7, pc}

08008d28 <goBlank>:
static char const* const blank = " \n\r\t\f";

/** Increases a pointer while it points to a white space character.
  * @param str The initial pointer value.
  * @return The final pointer value or null pointer if the null character was found. */
static char* goBlank( char* str ) {
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b082      	sub	sp, #8
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
    return goWhile( str, blank );
 8008d30:	4a05      	ldr	r2, [pc, #20]	@ (8008d48 <goBlank+0x20>)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	0011      	movs	r1, r2
 8008d36:	0018      	movs	r0, r3
 8008d38:	f7ff ffd4 	bl	8008ce4 <goWhile>
 8008d3c:	0003      	movs	r3, r0
}
 8008d3e:	0018      	movs	r0, r3
 8008d40:	46bd      	mov	sp, r7
 8008d42:	b002      	add	sp, #8
 8008d44:	bd80      	pop	{r7, pc}
 8008d46:	46c0      	nop			@ (mov r8, r8)
 8008d48:	08011884 	.word	0x08011884

08008d4c <goNum>:

/** Increases a pointer while it points to a decimal digit character.
  * @param str The initial pointer value.
  * @return The final pointer value or null pointer if the null character was found. */
static char* goNum( char* str ) {
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b082      	sub	sp, #8
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
    for( ; *str != '\0'; ++str ) {
 8008d54:	e00e      	b.n	8008d74 <goNum+0x28>
        if ( !isdigit( (int)(*str) ) )
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	781b      	ldrb	r3, [r3, #0]
 8008d5a:	1c5a      	adds	r2, r3, #1
 8008d5c:	4b0a      	ldr	r3, [pc, #40]	@ (8008d88 <goNum+0x3c>)
 8008d5e:	18d3      	adds	r3, r2, r3
 8008d60:	781b      	ldrb	r3, [r3, #0]
 8008d62:	001a      	movs	r2, r3
 8008d64:	2304      	movs	r3, #4
 8008d66:	4013      	ands	r3, r2
 8008d68:	d101      	bne.n	8008d6e <goNum+0x22>
            return str;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	e007      	b.n	8008d7e <goNum+0x32>
    for( ; *str != '\0'; ++str ) {
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	3301      	adds	r3, #1
 8008d72:	607b      	str	r3, [r7, #4]
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	781b      	ldrb	r3, [r3, #0]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d1ec      	bne.n	8008d56 <goNum+0xa>
    }
    return 0;
 8008d7c:	2300      	movs	r3, #0
}
 8008d7e:	0018      	movs	r0, r3
 8008d80:	46bd      	mov	sp, r7
 8008d82:	b002      	add	sp, #8
 8008d84:	bd80      	pop	{r7, pc}
 8008d86:	46c0      	nop			@ (mov r8, r8)
 8008d88:	0801c3d0 	.word	0x0801c3d0

08008d8c <setToNull>:
static char const* const endofblock = "}]";

/** Set a char to '\0' and increase its pointer if the char is different to '}' or ']'.
  * @param ch Pointer to character.
  * @return  Final value pointer. */
static char* setToNull( char* ch ) {
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b082      	sub	sp, #8
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
    if ( !isOneOfThem( *ch, endofblock ) ) *ch++ = '\0';
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	781b      	ldrb	r3, [r3, #0]
 8008d98:	4a0a      	ldr	r2, [pc, #40]	@ (8008dc4 <setToNull+0x38>)
 8008d9a:	0011      	movs	r1, r2
 8008d9c:	0018      	movs	r0, r3
 8008d9e:	f7ff ff86 	bl	8008cae <isOneOfThem>
 8008da2:	0003      	movs	r3, r0
 8008da4:	001a      	movs	r2, r3
 8008da6:	2301      	movs	r3, #1
 8008da8:	4053      	eors	r3, r2
 8008daa:	b2db      	uxtb	r3, r3
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d004      	beq.n	8008dba <setToNull+0x2e>
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	1c5a      	adds	r2, r3, #1
 8008db4:	607a      	str	r2, [r7, #4]
 8008db6:	2200      	movs	r2, #0
 8008db8:	701a      	strb	r2, [r3, #0]
    return ch;
 8008dba:	687b      	ldr	r3, [r7, #4]
}
 8008dbc:	0018      	movs	r0, r3
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	b002      	add	sp, #8
 8008dc2:	bd80      	pop	{r7, pc}
 8008dc4:	0801188c 	.word	0x0801188c

08008dc8 <isEndOfPrimitive>:

/** Indicate if a character is the end of a primitive value. */
static bool isEndOfPrimitive( char ch ) {
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b082      	sub	sp, #8
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	0002      	movs	r2, r0
 8008dd0:	1dfb      	adds	r3, r7, #7
 8008dd2:	701a      	strb	r2, [r3, #0]
    return ch == ',' || isOneOfThem( ch, blank ) || isOneOfThem( ch, endofblock );
 8008dd4:	1dfb      	adds	r3, r7, #7
 8008dd6:	781b      	ldrb	r3, [r3, #0]
 8008dd8:	2b2c      	cmp	r3, #44	@ 0x2c
 8008dda:	d011      	beq.n	8008e00 <isEndOfPrimitive+0x38>
 8008ddc:	4a0e      	ldr	r2, [pc, #56]	@ (8008e18 <isEndOfPrimitive+0x50>)
 8008dde:	1dfb      	adds	r3, r7, #7
 8008de0:	781b      	ldrb	r3, [r3, #0]
 8008de2:	0011      	movs	r1, r2
 8008de4:	0018      	movs	r0, r3
 8008de6:	f7ff ff62 	bl	8008cae <isOneOfThem>
 8008dea:	1e03      	subs	r3, r0, #0
 8008dec:	d108      	bne.n	8008e00 <isEndOfPrimitive+0x38>
 8008dee:	4a0b      	ldr	r2, [pc, #44]	@ (8008e1c <isEndOfPrimitive+0x54>)
 8008df0:	1dfb      	adds	r3, r7, #7
 8008df2:	781b      	ldrb	r3, [r3, #0]
 8008df4:	0011      	movs	r1, r2
 8008df6:	0018      	movs	r0, r3
 8008df8:	f7ff ff59 	bl	8008cae <isOneOfThem>
 8008dfc:	1e03      	subs	r3, r0, #0
 8008dfe:	d001      	beq.n	8008e04 <isEndOfPrimitive+0x3c>
 8008e00:	2301      	movs	r3, #1
 8008e02:	e000      	b.n	8008e06 <isEndOfPrimitive+0x3e>
 8008e04:	2300      	movs	r3, #0
 8008e06:	1c1a      	adds	r2, r3, #0
 8008e08:	2301      	movs	r3, #1
 8008e0a:	4013      	ands	r3, r2
 8008e0c:	b2db      	uxtb	r3, r3
}
 8008e0e:	0018      	movs	r0, r3
 8008e10:	46bd      	mov	sp, r7
 8008e12:	b002      	add	sp, #8
 8008e14:	bd80      	pop	{r7, pc}
 8008e16:	46c0      	nop			@ (mov r8, r8)
 8008e18:	08011884 	.word	0x08011884
 8008e1c:	0801188c 	.word	0x0801188c

08008e20 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8008e20:	480d      	ldr	r0, [pc, #52]	@ (8008e58 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8008e22:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8008e24:	f7ff faac 	bl	8008380 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008e28:	480c      	ldr	r0, [pc, #48]	@ (8008e5c <LoopForever+0x6>)
  ldr r1, =_edata
 8008e2a:	490d      	ldr	r1, [pc, #52]	@ (8008e60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8008e2c:	4a0d      	ldr	r2, [pc, #52]	@ (8008e64 <LoopForever+0xe>)
  movs r3, #0
 8008e2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008e30:	e002      	b.n	8008e38 <LoopCopyDataInit>

08008e32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008e32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008e34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008e36:	3304      	adds	r3, #4

08008e38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008e38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008e3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008e3c:	d3f9      	bcc.n	8008e32 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008e3e:	4a0a      	ldr	r2, [pc, #40]	@ (8008e68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8008e40:	4c0a      	ldr	r4, [pc, #40]	@ (8008e6c <LoopForever+0x16>)
  movs r3, #0
 8008e42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008e44:	e001      	b.n	8008e4a <LoopFillZerobss>

08008e46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008e46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008e48:	3204      	adds	r2, #4

08008e4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008e4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008e4c:	d3fb      	bcc.n	8008e46 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8008e4e:	f006 f8cb 	bl	800efe8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8008e52:	f7fb fe43 	bl	8004adc <main>

08008e56 <LoopForever>:

LoopForever:
  b LoopForever
 8008e56:	e7fe      	b.n	8008e56 <LoopForever>
  ldr   r0, =_estack
 8008e58:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8008e5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008e60:	20000260 	.word	0x20000260
  ldr r2, =_sidata
 8008e64:	0801c600 	.word	0x0801c600
  ldr r2, =_sbss
 8008e68:	20000260 	.word	0x20000260
  ldr r4, =_ebss
 8008e6c:	20001644 	.word	0x20001644

08008e70 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008e70:	e7fe      	b.n	8008e70 <ADC1_COMP_IRQHandler>
	...

08008e74 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b082      	sub	sp, #8
 8008e78:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8008e7a:	1dfb      	adds	r3, r7, #7
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008e80:	4b0b      	ldr	r3, [pc, #44]	@ (8008eb0 <HAL_Init+0x3c>)
 8008e82:	681a      	ldr	r2, [r3, #0]
 8008e84:	4b0a      	ldr	r3, [pc, #40]	@ (8008eb0 <HAL_Init+0x3c>)
 8008e86:	2180      	movs	r1, #128	@ 0x80
 8008e88:	0049      	lsls	r1, r1, #1
 8008e8a:	430a      	orrs	r2, r1
 8008e8c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008e8e:	2003      	movs	r0, #3
 8008e90:	f000 f810 	bl	8008eb4 <HAL_InitTick>
 8008e94:	1e03      	subs	r3, r0, #0
 8008e96:	d003      	beq.n	8008ea0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8008e98:	1dfb      	adds	r3, r7, #7
 8008e9a:	2201      	movs	r2, #1
 8008e9c:	701a      	strb	r2, [r3, #0]
 8008e9e:	e001      	b.n	8008ea4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8008ea0:	f7fe ff40 	bl	8007d24 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8008ea4:	1dfb      	adds	r3, r7, #7
 8008ea6:	781b      	ldrb	r3, [r3, #0]
}
 8008ea8:	0018      	movs	r0, r3
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	b002      	add	sp, #8
 8008eae:	bd80      	pop	{r7, pc}
 8008eb0:	40022000 	.word	0x40022000

08008eb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008eb4:	b590      	push	{r4, r7, lr}
 8008eb6:	b085      	sub	sp, #20
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8008ebc:	230f      	movs	r3, #15
 8008ebe:	18fb      	adds	r3, r7, r3
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8008ec4:	4b1d      	ldr	r3, [pc, #116]	@ (8008f3c <HAL_InitTick+0x88>)
 8008ec6:	781b      	ldrb	r3, [r3, #0]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d02b      	beq.n	8008f24 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8008ecc:	4b1c      	ldr	r3, [pc, #112]	@ (8008f40 <HAL_InitTick+0x8c>)
 8008ece:	681c      	ldr	r4, [r3, #0]
 8008ed0:	4b1a      	ldr	r3, [pc, #104]	@ (8008f3c <HAL_InitTick+0x88>)
 8008ed2:	781b      	ldrb	r3, [r3, #0]
 8008ed4:	0019      	movs	r1, r3
 8008ed6:	23fa      	movs	r3, #250	@ 0xfa
 8008ed8:	0098      	lsls	r0, r3, #2
 8008eda:	f7f7 f93b 	bl	8000154 <__udivsi3>
 8008ede:	0003      	movs	r3, r0
 8008ee0:	0019      	movs	r1, r3
 8008ee2:	0020      	movs	r0, r4
 8008ee4:	f7f7 f936 	bl	8000154 <__udivsi3>
 8008ee8:	0003      	movs	r3, r0
 8008eea:	0018      	movs	r0, r3
 8008eec:	f000 f953 	bl	8009196 <HAL_SYSTICK_Config>
 8008ef0:	1e03      	subs	r3, r0, #0
 8008ef2:	d112      	bne.n	8008f1a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2b03      	cmp	r3, #3
 8008ef8:	d80a      	bhi.n	8008f10 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008efa:	6879      	ldr	r1, [r7, #4]
 8008efc:	2301      	movs	r3, #1
 8008efe:	425b      	negs	r3, r3
 8008f00:	2200      	movs	r2, #0
 8008f02:	0018      	movs	r0, r3
 8008f04:	f000 f922 	bl	800914c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8008f08:	4b0e      	ldr	r3, [pc, #56]	@ (8008f44 <HAL_InitTick+0x90>)
 8008f0a:	687a      	ldr	r2, [r7, #4]
 8008f0c:	601a      	str	r2, [r3, #0]
 8008f0e:	e00d      	b.n	8008f2c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8008f10:	230f      	movs	r3, #15
 8008f12:	18fb      	adds	r3, r7, r3
 8008f14:	2201      	movs	r2, #1
 8008f16:	701a      	strb	r2, [r3, #0]
 8008f18:	e008      	b.n	8008f2c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8008f1a:	230f      	movs	r3, #15
 8008f1c:	18fb      	adds	r3, r7, r3
 8008f1e:	2201      	movs	r2, #1
 8008f20:	701a      	strb	r2, [r3, #0]
 8008f22:	e003      	b.n	8008f2c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8008f24:	230f      	movs	r3, #15
 8008f26:	18fb      	adds	r3, r7, r3
 8008f28:	2201      	movs	r2, #1
 8008f2a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8008f2c:	230f      	movs	r3, #15
 8008f2e:	18fb      	adds	r3, r7, r3
 8008f30:	781b      	ldrb	r3, [r3, #0]
}
 8008f32:	0018      	movs	r0, r3
 8008f34:	46bd      	mov	sp, r7
 8008f36:	b005      	add	sp, #20
 8008f38:	bd90      	pop	{r4, r7, pc}
 8008f3a:	46c0      	nop			@ (mov r8, r8)
 8008f3c:	2000000c 	.word	0x2000000c
 8008f40:	20000004 	.word	0x20000004
 8008f44:	20000008 	.word	0x20000008

08008f48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8008f4c:	4b05      	ldr	r3, [pc, #20]	@ (8008f64 <HAL_IncTick+0x1c>)
 8008f4e:	781b      	ldrb	r3, [r3, #0]
 8008f50:	001a      	movs	r2, r3
 8008f52:	4b05      	ldr	r3, [pc, #20]	@ (8008f68 <HAL_IncTick+0x20>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	18d2      	adds	r2, r2, r3
 8008f58:	4b03      	ldr	r3, [pc, #12]	@ (8008f68 <HAL_IncTick+0x20>)
 8008f5a:	601a      	str	r2, [r3, #0]
}
 8008f5c:	46c0      	nop			@ (mov r8, r8)
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}
 8008f62:	46c0      	nop			@ (mov r8, r8)
 8008f64:	2000000c 	.word	0x2000000c
 8008f68:	200014d8 	.word	0x200014d8

08008f6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	af00      	add	r7, sp, #0
  return uwTick;
 8008f70:	4b02      	ldr	r3, [pc, #8]	@ (8008f7c <HAL_GetTick+0x10>)
 8008f72:	681b      	ldr	r3, [r3, #0]
}
 8008f74:	0018      	movs	r0, r3
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}
 8008f7a:	46c0      	nop			@ (mov r8, r8)
 8008f7c:	200014d8 	.word	0x200014d8

08008f80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b084      	sub	sp, #16
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008f88:	f7ff fff0 	bl	8008f6c <HAL_GetTick>
 8008f8c:	0003      	movs	r3, r0
 8008f8e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	3301      	adds	r3, #1
 8008f98:	d005      	beq.n	8008fa6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008f9a:	4b0a      	ldr	r3, [pc, #40]	@ (8008fc4 <HAL_Delay+0x44>)
 8008f9c:	781b      	ldrb	r3, [r3, #0]
 8008f9e:	001a      	movs	r2, r3
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	189b      	adds	r3, r3, r2
 8008fa4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008fa6:	46c0      	nop			@ (mov r8, r8)
 8008fa8:	f7ff ffe0 	bl	8008f6c <HAL_GetTick>
 8008fac:	0002      	movs	r2, r0
 8008fae:	68bb      	ldr	r3, [r7, #8]
 8008fb0:	1ad3      	subs	r3, r2, r3
 8008fb2:	68fa      	ldr	r2, [r7, #12]
 8008fb4:	429a      	cmp	r2, r3
 8008fb6:	d8f7      	bhi.n	8008fa8 <HAL_Delay+0x28>
  {
  }
}
 8008fb8:	46c0      	nop			@ (mov r8, r8)
 8008fba:	46c0      	nop			@ (mov r8, r8)
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	b004      	add	sp, #16
 8008fc0:	bd80      	pop	{r7, pc}
 8008fc2:	46c0      	nop			@ (mov r8, r8)
 8008fc4:	2000000c 	.word	0x2000000c

08008fc8 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b082      	sub	sp, #8
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8008fd0:	4b06      	ldr	r3, [pc, #24]	@ (8008fec <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	4a06      	ldr	r2, [pc, #24]	@ (8008ff0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8008fd6:	4013      	ands	r3, r2
 8008fd8:	0019      	movs	r1, r3
 8008fda:	4b04      	ldr	r3, [pc, #16]	@ (8008fec <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8008fdc:	687a      	ldr	r2, [r7, #4]
 8008fde:	430a      	orrs	r2, r1
 8008fe0:	601a      	str	r2, [r3, #0]
}
 8008fe2:	46c0      	nop			@ (mov r8, r8)
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	b002      	add	sp, #8
 8008fe8:	bd80      	pop	{r7, pc}
 8008fea:	46c0      	nop			@ (mov r8, r8)
 8008fec:	40010000 	.word	0x40010000
 8008ff0:	fffff9ff 	.word	0xfffff9ff

08008ff4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b082      	sub	sp, #8
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	0002      	movs	r2, r0
 8008ffc:	1dfb      	adds	r3, r7, #7
 8008ffe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8009000:	1dfb      	adds	r3, r7, #7
 8009002:	781b      	ldrb	r3, [r3, #0]
 8009004:	2b7f      	cmp	r3, #127	@ 0x7f
 8009006:	d809      	bhi.n	800901c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009008:	1dfb      	adds	r3, r7, #7
 800900a:	781b      	ldrb	r3, [r3, #0]
 800900c:	001a      	movs	r2, r3
 800900e:	231f      	movs	r3, #31
 8009010:	401a      	ands	r2, r3
 8009012:	4b04      	ldr	r3, [pc, #16]	@ (8009024 <__NVIC_EnableIRQ+0x30>)
 8009014:	2101      	movs	r1, #1
 8009016:	4091      	lsls	r1, r2
 8009018:	000a      	movs	r2, r1
 800901a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800901c:	46c0      	nop			@ (mov r8, r8)
 800901e:	46bd      	mov	sp, r7
 8009020:	b002      	add	sp, #8
 8009022:	bd80      	pop	{r7, pc}
 8009024:	e000e100 	.word	0xe000e100

08009028 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009028:	b590      	push	{r4, r7, lr}
 800902a:	b083      	sub	sp, #12
 800902c:	af00      	add	r7, sp, #0
 800902e:	0002      	movs	r2, r0
 8009030:	6039      	str	r1, [r7, #0]
 8009032:	1dfb      	adds	r3, r7, #7
 8009034:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8009036:	1dfb      	adds	r3, r7, #7
 8009038:	781b      	ldrb	r3, [r3, #0]
 800903a:	2b7f      	cmp	r3, #127	@ 0x7f
 800903c:	d828      	bhi.n	8009090 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800903e:	4a2f      	ldr	r2, [pc, #188]	@ (80090fc <__NVIC_SetPriority+0xd4>)
 8009040:	1dfb      	adds	r3, r7, #7
 8009042:	781b      	ldrb	r3, [r3, #0]
 8009044:	b25b      	sxtb	r3, r3
 8009046:	089b      	lsrs	r3, r3, #2
 8009048:	33c0      	adds	r3, #192	@ 0xc0
 800904a:	009b      	lsls	r3, r3, #2
 800904c:	589b      	ldr	r3, [r3, r2]
 800904e:	1dfa      	adds	r2, r7, #7
 8009050:	7812      	ldrb	r2, [r2, #0]
 8009052:	0011      	movs	r1, r2
 8009054:	2203      	movs	r2, #3
 8009056:	400a      	ands	r2, r1
 8009058:	00d2      	lsls	r2, r2, #3
 800905a:	21ff      	movs	r1, #255	@ 0xff
 800905c:	4091      	lsls	r1, r2
 800905e:	000a      	movs	r2, r1
 8009060:	43d2      	mvns	r2, r2
 8009062:	401a      	ands	r2, r3
 8009064:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	019b      	lsls	r3, r3, #6
 800906a:	22ff      	movs	r2, #255	@ 0xff
 800906c:	401a      	ands	r2, r3
 800906e:	1dfb      	adds	r3, r7, #7
 8009070:	781b      	ldrb	r3, [r3, #0]
 8009072:	0018      	movs	r0, r3
 8009074:	2303      	movs	r3, #3
 8009076:	4003      	ands	r3, r0
 8009078:	00db      	lsls	r3, r3, #3
 800907a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800907c:	481f      	ldr	r0, [pc, #124]	@ (80090fc <__NVIC_SetPriority+0xd4>)
 800907e:	1dfb      	adds	r3, r7, #7
 8009080:	781b      	ldrb	r3, [r3, #0]
 8009082:	b25b      	sxtb	r3, r3
 8009084:	089b      	lsrs	r3, r3, #2
 8009086:	430a      	orrs	r2, r1
 8009088:	33c0      	adds	r3, #192	@ 0xc0
 800908a:	009b      	lsls	r3, r3, #2
 800908c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800908e:	e031      	b.n	80090f4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009090:	4a1b      	ldr	r2, [pc, #108]	@ (8009100 <__NVIC_SetPriority+0xd8>)
 8009092:	1dfb      	adds	r3, r7, #7
 8009094:	781b      	ldrb	r3, [r3, #0]
 8009096:	0019      	movs	r1, r3
 8009098:	230f      	movs	r3, #15
 800909a:	400b      	ands	r3, r1
 800909c:	3b08      	subs	r3, #8
 800909e:	089b      	lsrs	r3, r3, #2
 80090a0:	3306      	adds	r3, #6
 80090a2:	009b      	lsls	r3, r3, #2
 80090a4:	18d3      	adds	r3, r2, r3
 80090a6:	3304      	adds	r3, #4
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	1dfa      	adds	r2, r7, #7
 80090ac:	7812      	ldrb	r2, [r2, #0]
 80090ae:	0011      	movs	r1, r2
 80090b0:	2203      	movs	r2, #3
 80090b2:	400a      	ands	r2, r1
 80090b4:	00d2      	lsls	r2, r2, #3
 80090b6:	21ff      	movs	r1, #255	@ 0xff
 80090b8:	4091      	lsls	r1, r2
 80090ba:	000a      	movs	r2, r1
 80090bc:	43d2      	mvns	r2, r2
 80090be:	401a      	ands	r2, r3
 80090c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	019b      	lsls	r3, r3, #6
 80090c6:	22ff      	movs	r2, #255	@ 0xff
 80090c8:	401a      	ands	r2, r3
 80090ca:	1dfb      	adds	r3, r7, #7
 80090cc:	781b      	ldrb	r3, [r3, #0]
 80090ce:	0018      	movs	r0, r3
 80090d0:	2303      	movs	r3, #3
 80090d2:	4003      	ands	r3, r0
 80090d4:	00db      	lsls	r3, r3, #3
 80090d6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80090d8:	4809      	ldr	r0, [pc, #36]	@ (8009100 <__NVIC_SetPriority+0xd8>)
 80090da:	1dfb      	adds	r3, r7, #7
 80090dc:	781b      	ldrb	r3, [r3, #0]
 80090de:	001c      	movs	r4, r3
 80090e0:	230f      	movs	r3, #15
 80090e2:	4023      	ands	r3, r4
 80090e4:	3b08      	subs	r3, #8
 80090e6:	089b      	lsrs	r3, r3, #2
 80090e8:	430a      	orrs	r2, r1
 80090ea:	3306      	adds	r3, #6
 80090ec:	009b      	lsls	r3, r3, #2
 80090ee:	18c3      	adds	r3, r0, r3
 80090f0:	3304      	adds	r3, #4
 80090f2:	601a      	str	r2, [r3, #0]
}
 80090f4:	46c0      	nop			@ (mov r8, r8)
 80090f6:	46bd      	mov	sp, r7
 80090f8:	b003      	add	sp, #12
 80090fa:	bd90      	pop	{r4, r7, pc}
 80090fc:	e000e100 	.word	0xe000e100
 8009100:	e000ed00 	.word	0xe000ed00

08009104 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b082      	sub	sp, #8
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	1e5a      	subs	r2, r3, #1
 8009110:	2380      	movs	r3, #128	@ 0x80
 8009112:	045b      	lsls	r3, r3, #17
 8009114:	429a      	cmp	r2, r3
 8009116:	d301      	bcc.n	800911c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009118:	2301      	movs	r3, #1
 800911a:	e010      	b.n	800913e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800911c:	4b0a      	ldr	r3, [pc, #40]	@ (8009148 <SysTick_Config+0x44>)
 800911e:	687a      	ldr	r2, [r7, #4]
 8009120:	3a01      	subs	r2, #1
 8009122:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009124:	2301      	movs	r3, #1
 8009126:	425b      	negs	r3, r3
 8009128:	2103      	movs	r1, #3
 800912a:	0018      	movs	r0, r3
 800912c:	f7ff ff7c 	bl	8009028 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009130:	4b05      	ldr	r3, [pc, #20]	@ (8009148 <SysTick_Config+0x44>)
 8009132:	2200      	movs	r2, #0
 8009134:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009136:	4b04      	ldr	r3, [pc, #16]	@ (8009148 <SysTick_Config+0x44>)
 8009138:	2207      	movs	r2, #7
 800913a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800913c:	2300      	movs	r3, #0
}
 800913e:	0018      	movs	r0, r3
 8009140:	46bd      	mov	sp, r7
 8009142:	b002      	add	sp, #8
 8009144:	bd80      	pop	{r7, pc}
 8009146:	46c0      	nop			@ (mov r8, r8)
 8009148:	e000e010 	.word	0xe000e010

0800914c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b084      	sub	sp, #16
 8009150:	af00      	add	r7, sp, #0
 8009152:	60b9      	str	r1, [r7, #8]
 8009154:	607a      	str	r2, [r7, #4]
 8009156:	210f      	movs	r1, #15
 8009158:	187b      	adds	r3, r7, r1
 800915a:	1c02      	adds	r2, r0, #0
 800915c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800915e:	68ba      	ldr	r2, [r7, #8]
 8009160:	187b      	adds	r3, r7, r1
 8009162:	781b      	ldrb	r3, [r3, #0]
 8009164:	b25b      	sxtb	r3, r3
 8009166:	0011      	movs	r1, r2
 8009168:	0018      	movs	r0, r3
 800916a:	f7ff ff5d 	bl	8009028 <__NVIC_SetPriority>
}
 800916e:	46c0      	nop			@ (mov r8, r8)
 8009170:	46bd      	mov	sp, r7
 8009172:	b004      	add	sp, #16
 8009174:	bd80      	pop	{r7, pc}

08009176 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009176:	b580      	push	{r7, lr}
 8009178:	b082      	sub	sp, #8
 800917a:	af00      	add	r7, sp, #0
 800917c:	0002      	movs	r2, r0
 800917e:	1dfb      	adds	r3, r7, #7
 8009180:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009182:	1dfb      	adds	r3, r7, #7
 8009184:	781b      	ldrb	r3, [r3, #0]
 8009186:	b25b      	sxtb	r3, r3
 8009188:	0018      	movs	r0, r3
 800918a:	f7ff ff33 	bl	8008ff4 <__NVIC_EnableIRQ>
}
 800918e:	46c0      	nop			@ (mov r8, r8)
 8009190:	46bd      	mov	sp, r7
 8009192:	b002      	add	sp, #8
 8009194:	bd80      	pop	{r7, pc}

08009196 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009196:	b580      	push	{r7, lr}
 8009198:	b082      	sub	sp, #8
 800919a:	af00      	add	r7, sp, #0
 800919c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	0018      	movs	r0, r3
 80091a2:	f7ff ffaf 	bl	8009104 <SysTick_Config>
 80091a6:	0003      	movs	r3, r0
}
 80091a8:	0018      	movs	r0, r3
 80091aa:	46bd      	mov	sp, r7
 80091ac:	b002      	add	sp, #8
 80091ae:	bd80      	pop	{r7, pc}

080091b0 <HAL_FLASH_Program>:
  *               TypeProgram = FLASH_TYPEPROGRAM_FAST (32-bit).
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80091b0:	b5b0      	push	{r4, r5, r7, lr}
 80091b2:	b086      	sub	sp, #24
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	60f8      	str	r0, [r7, #12]
 80091b8:	60b9      	str	r1, [r7, #8]
 80091ba:	603a      	str	r2, [r7, #0]
 80091bc:	607b      	str	r3, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80091be:	4b21      	ldr	r3, [pc, #132]	@ (8009244 <HAL_FLASH_Program+0x94>)
 80091c0:	781b      	ldrb	r3, [r3, #0]
 80091c2:	2b01      	cmp	r3, #1
 80091c4:	d101      	bne.n	80091ca <HAL_FLASH_Program+0x1a>
 80091c6:	2302      	movs	r3, #2
 80091c8:	e038      	b.n	800923c <HAL_FLASH_Program+0x8c>
 80091ca:	4b1e      	ldr	r3, [pc, #120]	@ (8009244 <HAL_FLASH_Program+0x94>)
 80091cc:	2201      	movs	r2, #1
 80091ce:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80091d0:	4b1c      	ldr	r3, [pc, #112]	@ (8009244 <HAL_FLASH_Program+0x94>)
 80091d2:	2200      	movs	r2, #0
 80091d4:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80091d6:	2517      	movs	r5, #23
 80091d8:	197c      	adds	r4, r7, r5
 80091da:	23fa      	movs	r3, #250	@ 0xfa
 80091dc:	009b      	lsls	r3, r3, #2
 80091de:	0018      	movs	r0, r3
 80091e0:	f000 f87a 	bl	80092d8 <FLASH_WaitForLastOperation>
 80091e4:	0003      	movs	r3, r0
 80091e6:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80091e8:	197b      	adds	r3, r7, r5
 80091ea:	781b      	ldrb	r3, [r3, #0]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d11f      	bne.n	8009230 <HAL_FLASH_Program+0x80>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	2b01      	cmp	r3, #1
 80091f4:	d106      	bne.n	8009204 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 80091f6:	683a      	ldr	r2, [r7, #0]
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	68b9      	ldr	r1, [r7, #8]
 80091fc:	0008      	movs	r0, r1
 80091fe:	f000 f8b9 	bl	8009374 <FLASH_Program_DoubleWord>
 8009202:	e005      	b.n	8009210 <HAL_FLASH_Program+0x60>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8009204:	683a      	ldr	r2, [r7, #0]
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	0011      	movs	r1, r2
 800920a:	0018      	movs	r0, r3
 800920c:	f008 f9d0 	bl	80115b0 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8009210:	2317      	movs	r3, #23
 8009212:	18fc      	adds	r4, r7, r3
 8009214:	23fa      	movs	r3, #250	@ 0xfa
 8009216:	009b      	lsls	r3, r3, #2
 8009218:	0018      	movs	r0, r3
 800921a:	f000 f85d 	bl	80092d8 <FLASH_WaitForLastOperation>
 800921e:	0003      	movs	r3, r0
 8009220:	7023      	strb	r3, [r4, #0]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8009222:	4b09      	ldr	r3, [pc, #36]	@ (8009248 <HAL_FLASH_Program+0x98>)
 8009224:	695a      	ldr	r2, [r3, #20]
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	43d9      	mvns	r1, r3
 800922a:	4b07      	ldr	r3, [pc, #28]	@ (8009248 <HAL_FLASH_Program+0x98>)
 800922c:	400a      	ands	r2, r1
 800922e:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8009230:	4b04      	ldr	r3, [pc, #16]	@ (8009244 <HAL_FLASH_Program+0x94>)
 8009232:	2200      	movs	r2, #0
 8009234:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8009236:	2317      	movs	r3, #23
 8009238:	18fb      	adds	r3, r7, r3
 800923a:	781b      	ldrb	r3, [r3, #0]
}
 800923c:	0018      	movs	r0, r3
 800923e:	46bd      	mov	sp, r7
 8009240:	b006      	add	sp, #24
 8009242:	bdb0      	pop	{r4, r5, r7, pc}
 8009244:	200014dc 	.word	0x200014dc
 8009248:	40022000 	.word	0x40022000

0800924c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b082      	sub	sp, #8
 8009250:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8009252:	1dfb      	adds	r3, r7, #7
 8009254:	2200      	movs	r2, #0
 8009256:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8009258:	4b0b      	ldr	r3, [pc, #44]	@ (8009288 <HAL_FLASH_Unlock+0x3c>)
 800925a:	695b      	ldr	r3, [r3, #20]
 800925c:	2b00      	cmp	r3, #0
 800925e:	da0c      	bge.n	800927a <HAL_FLASH_Unlock+0x2e>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8009260:	4b09      	ldr	r3, [pc, #36]	@ (8009288 <HAL_FLASH_Unlock+0x3c>)
 8009262:	4a0a      	ldr	r2, [pc, #40]	@ (800928c <HAL_FLASH_Unlock+0x40>)
 8009264:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8009266:	4b08      	ldr	r3, [pc, #32]	@ (8009288 <HAL_FLASH_Unlock+0x3c>)
 8009268:	4a09      	ldr	r2, [pc, #36]	@ (8009290 <HAL_FLASH_Unlock+0x44>)
 800926a:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 800926c:	4b06      	ldr	r3, [pc, #24]	@ (8009288 <HAL_FLASH_Unlock+0x3c>)
 800926e:	695b      	ldr	r3, [r3, #20]
 8009270:	2b00      	cmp	r3, #0
 8009272:	da02      	bge.n	800927a <HAL_FLASH_Unlock+0x2e>
    {
      status = HAL_ERROR;
 8009274:	1dfb      	adds	r3, r7, #7
 8009276:	2201      	movs	r2, #1
 8009278:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 800927a:	1dfb      	adds	r3, r7, #7
 800927c:	781b      	ldrb	r3, [r3, #0]
}
 800927e:	0018      	movs	r0, r3
 8009280:	46bd      	mov	sp, r7
 8009282:	b002      	add	sp, #8
 8009284:	bd80      	pop	{r7, pc}
 8009286:	46c0      	nop			@ (mov r8, r8)
 8009288:	40022000 	.word	0x40022000
 800928c:	45670123 	.word	0x45670123
 8009290:	cdef89ab 	.word	0xcdef89ab

08009294 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b082      	sub	sp, #8
 8009298:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 800929a:	1dfb      	adds	r3, r7, #7
 800929c:	2201      	movs	r2, #1
 800929e:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  (void)FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80092a0:	23fa      	movs	r3, #250	@ 0xfa
 80092a2:	009b      	lsls	r3, r3, #2
 80092a4:	0018      	movs	r0, r3
 80092a6:	f000 f817 	bl	80092d8 <FLASH_WaitForLastOperation>

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80092aa:	4b0a      	ldr	r3, [pc, #40]	@ (80092d4 <HAL_FLASH_Lock+0x40>)
 80092ac:	695a      	ldr	r2, [r3, #20]
 80092ae:	4b09      	ldr	r3, [pc, #36]	@ (80092d4 <HAL_FLASH_Lock+0x40>)
 80092b0:	2180      	movs	r1, #128	@ 0x80
 80092b2:	0609      	lsls	r1, r1, #24
 80092b4:	430a      	orrs	r2, r1
 80092b6:	615a      	str	r2, [r3, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 80092b8:	4b06      	ldr	r3, [pc, #24]	@ (80092d4 <HAL_FLASH_Lock+0x40>)
 80092ba:	695b      	ldr	r3, [r3, #20]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	da02      	bge.n	80092c6 <HAL_FLASH_Lock+0x32>
  {
    status = HAL_OK;
 80092c0:	1dfb      	adds	r3, r7, #7
 80092c2:	2200      	movs	r2, #0
 80092c4:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80092c6:	1dfb      	adds	r3, r7, #7
 80092c8:	781b      	ldrb	r3, [r3, #0]
}
 80092ca:	0018      	movs	r0, r3
 80092cc:	46bd      	mov	sp, r7
 80092ce:	b002      	add	sp, #8
 80092d0:	bd80      	pop	{r7, pc}
 80092d2:	46c0      	nop			@ (mov r8, r8)
 80092d4:	40022000 	.word	0x40022000

080092d8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b084      	sub	sp, #16
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 80092e0:	f7ff fe44 	bl	8008f6c <HAL_GetTick>
 80092e4:	0003      	movs	r3, r0
 80092e6:	60fb      	str	r3, [r7, #12]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

#if defined(FLASH_DBANK_SUPPORT)
  error = (FLASH_SR_BSY1 | FLASH_SR_BSY2);
 80092e8:	23c0      	movs	r3, #192	@ 0xc0
 80092ea:	029b      	lsls	r3, r3, #10
 80092ec:	60bb      	str	r3, [r7, #8]
#else
  error = FLASH_SR_BSY1;
#endif /* FLASH_DBANK_SUPPORT */

  while ((FLASH->SR & error) != 0x00U)
 80092ee:	e00c      	b.n	800930a <FLASH_WaitForLastOperation+0x32>
  {
    if(Timeout != HAL_MAX_DELAY)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	3301      	adds	r3, #1
 80092f4:	d009      	beq.n	800930a <FLASH_WaitForLastOperation+0x32>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
 80092f6:	f7ff fe39 	bl	8008f6c <HAL_GetTick>
 80092fa:	0002      	movs	r2, r0
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	1ad3      	subs	r3, r2, r3
 8009300:	687a      	ldr	r2, [r7, #4]
 8009302:	429a      	cmp	r2, r3
 8009304:	d801      	bhi.n	800930a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8009306:	2303      	movs	r3, #3
 8009308:	e028      	b.n	800935c <FLASH_WaitForLastOperation+0x84>
  while ((FLASH->SR & error) != 0x00U)
 800930a:	4b16      	ldr	r3, [pc, #88]	@ (8009364 <FLASH_WaitForLastOperation+0x8c>)
 800930c:	691b      	ldr	r3, [r3, #16]
 800930e:	68ba      	ldr	r2, [r7, #8]
 8009310:	4013      	ands	r3, r2
 8009312:	d1ed      	bne.n	80092f0 <FLASH_WaitForLastOperation+0x18>
      }
    }
  }

  /* check flash errors */
  error = (FLASH->SR & FLASH_SR_ERRORS);
 8009314:	4b13      	ldr	r3, [pc, #76]	@ (8009364 <FLASH_WaitForLastOperation+0x8c>)
 8009316:	691b      	ldr	r3, [r3, #16]
 8009318:	4a13      	ldr	r2, [pc, #76]	@ (8009368 <FLASH_WaitForLastOperation+0x90>)
 800931a:	4013      	ands	r3, r2
 800931c:	60bb      	str	r3, [r7, #8]

  /* Clear SR register */
  FLASH->SR = FLASH_SR_CLEAR;
 800931e:	4b11      	ldr	r3, [pc, #68]	@ (8009364 <FLASH_WaitForLastOperation+0x8c>)
 8009320:	4a12      	ldr	r2, [pc, #72]	@ (800936c <FLASH_WaitForLastOperation+0x94>)
 8009322:	611a      	str	r2, [r3, #16]

  if (error != 0x00U)
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d011      	beq.n	800934e <FLASH_WaitForLastOperation+0x76>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 800932a:	4b11      	ldr	r3, [pc, #68]	@ (8009370 <FLASH_WaitForLastOperation+0x98>)
 800932c:	68ba      	ldr	r2, [r7, #8]
 800932e:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
 8009330:	2301      	movs	r3, #1
 8009332:	e013      	b.n	800935c <FLASH_WaitForLastOperation+0x84>
  }

  /* Wait for control register to be written */
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
  {
    if(Timeout != HAL_MAX_DELAY)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	3301      	adds	r3, #1
 8009338:	d009      	beq.n	800934e <FLASH_WaitForLastOperation+0x76>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
 800933a:	f7ff fe17 	bl	8008f6c <HAL_GetTick>
 800933e:	0002      	movs	r2, r0
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	1ad3      	subs	r3, r2, r3
 8009344:	687a      	ldr	r2, [r7, #4]
 8009346:	429a      	cmp	r2, r3
 8009348:	d801      	bhi.n	800934e <FLASH_WaitForLastOperation+0x76>
      {
        return HAL_TIMEOUT;
 800934a:	2303      	movs	r3, #3
 800934c:	e006      	b.n	800935c <FLASH_WaitForLastOperation+0x84>
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 800934e:	4b05      	ldr	r3, [pc, #20]	@ (8009364 <FLASH_WaitForLastOperation+0x8c>)
 8009350:	691a      	ldr	r2, [r3, #16]
 8009352:	2380      	movs	r3, #128	@ 0x80
 8009354:	02db      	lsls	r3, r3, #11
 8009356:	4013      	ands	r3, r2
 8009358:	d1ec      	bne.n	8009334 <FLASH_WaitForLastOperation+0x5c>
      }
    }
  }

  return HAL_OK;
 800935a:	2300      	movs	r3, #0
}
 800935c:	0018      	movs	r0, r3
 800935e:	46bd      	mov	sp, r7
 8009360:	b004      	add	sp, #16
 8009362:	bd80      	pop	{r7, pc}
 8009364:	40022000 	.word	0x40022000
 8009368:	0000c3fa 	.word	0x0000c3fa
 800936c:	0008c3fb 	.word	0x0008c3fb
 8009370:	200014dc 	.word	0x200014dc

08009374 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8009374:	b5b0      	push	{r4, r5, r7, lr}
 8009376:	b084      	sub	sp, #16
 8009378:	af00      	add	r7, sp, #0
 800937a:	60f8      	str	r0, [r7, #12]
 800937c:	603a      	str	r2, [r7, #0]
 800937e:	607b      	str	r3, [r7, #4]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8009380:	4b0b      	ldr	r3, [pc, #44]	@ (80093b0 <FLASH_Program_DoubleWord+0x3c>)
 8009382:	695a      	ldr	r2, [r3, #20]
 8009384:	4b0a      	ldr	r3, [pc, #40]	@ (80093b0 <FLASH_Program_DoubleWord+0x3c>)
 8009386:	2101      	movs	r1, #1
 8009388:	430a      	orrs	r2, r1
 800938a:	615a      	str	r2, [r3, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	683a      	ldr	r2, [r7, #0]
 8009390:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8009392:	f3bf 8f6f 	isb	sy
}
 8009396:	46c0      	nop			@ (mov r8, r8)
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	001c      	movs	r4, r3
 800939c:	2300      	movs	r3, #0
 800939e:	001d      	movs	r5, r3
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	3304      	adds	r3, #4
 80093a4:	0022      	movs	r2, r4
 80093a6:	601a      	str	r2, [r3, #0]
}
 80093a8:	46c0      	nop			@ (mov r8, r8)
 80093aa:	46bd      	mov	sp, r7
 80093ac:	b004      	add	sp, #16
 80093ae:	bdb0      	pop	{r4, r5, r7, pc}
 80093b0:	40022000 	.word	0x40022000

080093b4 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80093b4:	b5b0      	push	{r4, r5, r7, lr}
 80093b6:	b084      	sub	sp, #16
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
 80093bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80093be:	4b33      	ldr	r3, [pc, #204]	@ (800948c <HAL_FLASHEx_Erase+0xd8>)
 80093c0:	781b      	ldrb	r3, [r3, #0]
 80093c2:	2b01      	cmp	r3, #1
 80093c4:	d101      	bne.n	80093ca <HAL_FLASHEx_Erase+0x16>
 80093c6:	2302      	movs	r3, #2
 80093c8:	e05c      	b.n	8009484 <HAL_FLASHEx_Erase+0xd0>
 80093ca:	4b30      	ldr	r3, [pc, #192]	@ (800948c <HAL_FLASHEx_Erase+0xd8>)
 80093cc:	2201      	movs	r2, #1
 80093ce:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80093d0:	4b2e      	ldr	r3, [pc, #184]	@ (800948c <HAL_FLASHEx_Erase+0xd8>)
 80093d2:	2200      	movs	r2, #0
 80093d4:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80093d6:	250f      	movs	r5, #15
 80093d8:	197c      	adds	r4, r7, r5
 80093da:	23fa      	movs	r3, #250	@ 0xfa
 80093dc:	009b      	lsls	r3, r3, #2
 80093de:	0018      	movs	r0, r3
 80093e0:	f7ff ff7a 	bl	80092d8 <FLASH_WaitForLastOperation>
 80093e4:	0003      	movs	r3, r0
 80093e6:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80093e8:	002c      	movs	r4, r5
 80093ea:	193b      	adds	r3, r7, r4
 80093ec:	781b      	ldrb	r3, [r3, #0]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d142      	bne.n	8009478 <HAL_FLASHEx_Erase+0xc4>
#if !defined(FLASH_DBANK_SUPPORT)
    /* For single bank product force Banks to Bank 1 */
    pEraseInit->Banks = FLASH_BANK_1;
#endif /* FLASH_DBANK_SUPPORT */

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASS)
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	2b04      	cmp	r3, #4
 80093f8:	d10d      	bne.n	8009416 <HAL_FLASHEx_Erase+0x62>
    {
      /* Proceed to Mass Erase */
      FLASH_MassErase(pEraseInit->Banks);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	685b      	ldr	r3, [r3, #4]
 80093fe:	0018      	movs	r0, r3
 8009400:	f000 f848 	bl	8009494 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8009404:	193c      	adds	r4, r7, r4
 8009406:	23fa      	movs	r3, #250	@ 0xfa
 8009408:	009b      	lsls	r3, r3, #2
 800940a:	0018      	movs	r0, r3
 800940c:	f7ff ff64 	bl	80092d8 <FLASH_WaitForLastOperation>
 8009410:	0003      	movs	r3, r0
 8009412:	7023      	strb	r3, [r4, #0]
 8009414:	e030      	b.n	8009478 <HAL_FLASHEx_Erase+0xc4>
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	2201      	movs	r2, #1
 800941a:	4252      	negs	r2, r2
 800941c:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	689b      	ldr	r3, [r3, #8]
 8009422:	60bb      	str	r3, [r7, #8]
 8009424:	e01a      	b.n	800945c <HAL_FLASHEx_Erase+0xa8>
      {
        /* Start erase page */
        FLASH_PageErase(pEraseInit->Banks, index);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	685b      	ldr	r3, [r3, #4]
 800942a:	68ba      	ldr	r2, [r7, #8]
 800942c:	0011      	movs	r1, r2
 800942e:	0018      	movs	r0, r3
 8009430:	f000 f844 	bl	80094bc <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8009434:	250f      	movs	r5, #15
 8009436:	197c      	adds	r4, r7, r5
 8009438:	23fa      	movs	r3, #250	@ 0xfa
 800943a:	009b      	lsls	r3, r3, #2
 800943c:	0018      	movs	r0, r3
 800943e:	f7ff ff4b 	bl	80092d8 <FLASH_WaitForLastOperation>
 8009442:	0003      	movs	r3, r0
 8009444:	7023      	strb	r3, [r4, #0]

        if (status != HAL_OK)
 8009446:	197b      	adds	r3, r7, r5
 8009448:	781b      	ldrb	r3, [r3, #0]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d003      	beq.n	8009456 <HAL_FLASHEx_Erase+0xa2>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	68ba      	ldr	r2, [r7, #8]
 8009452:	601a      	str	r2, [r3, #0]
          break;
 8009454:	e00a      	b.n	800946c <HAL_FLASHEx_Erase+0xb8>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8009456:	68bb      	ldr	r3, [r7, #8]
 8009458:	3301      	adds	r3, #1
 800945a:	60bb      	str	r3, [r7, #8]
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	689a      	ldr	r2, [r3, #8]
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	68db      	ldr	r3, [r3, #12]
 8009464:	18d3      	adds	r3, r2, r3
 8009466:	68ba      	ldr	r2, [r7, #8]
 8009468:	429a      	cmp	r2, r3
 800946a:	d3dc      	bcc.n	8009426 <HAL_FLASHEx_Erase+0x72>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800946c:	4b08      	ldr	r3, [pc, #32]	@ (8009490 <HAL_FLASHEx_Erase+0xdc>)
 800946e:	695a      	ldr	r2, [r3, #20]
 8009470:	4b07      	ldr	r3, [pc, #28]	@ (8009490 <HAL_FLASHEx_Erase+0xdc>)
 8009472:	2102      	movs	r1, #2
 8009474:	438a      	bics	r2, r1
 8009476:	615a      	str	r2, [r3, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8009478:	4b04      	ldr	r3, [pc, #16]	@ (800948c <HAL_FLASHEx_Erase+0xd8>)
 800947a:	2200      	movs	r2, #0
 800947c:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 800947e:	230f      	movs	r3, #15
 8009480:	18fb      	adds	r3, r7, r3
 8009482:	781b      	ldrb	r3, [r3, #0]
}
 8009484:	0018      	movs	r0, r3
 8009486:	46bd      	mov	sp, r7
 8009488:	b004      	add	sp, #16
 800948a:	bdb0      	pop	{r4, r5, r7, pc}
 800948c:	200014dc 	.word	0x200014dc
 8009490:	40022000 	.word	0x40022000

08009494 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased*
  * @note (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b082      	sub	sp, #8
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Set the Mass Erase Bit and start bit */
  FLASH->CR |= (FLASH_CR_STRT | Banks);
 800949c:	4b06      	ldr	r3, [pc, #24]	@ (80094b8 <FLASH_MassErase+0x24>)
 800949e:	695a      	ldr	r2, [r3, #20]
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	431a      	orrs	r2, r3
 80094a4:	4b04      	ldr	r3, [pc, #16]	@ (80094b8 <FLASH_MassErase+0x24>)
 80094a6:	2180      	movs	r1, #128	@ 0x80
 80094a8:	0249      	lsls	r1, r1, #9
 80094aa:	430a      	orrs	r2, r1
 80094ac:	615a      	str	r2, [r3, #20]
}
 80094ae:	46c0      	nop			@ (mov r8, r8)
 80094b0:	46bd      	mov	sp, r7
 80094b2:	b002      	add	sp, #8
 80094b4:	bd80      	pop	{r7, pc}
 80094b6:	46c0      	nop			@ (mov r8, r8)
 80094b8:	40022000 	.word	0x40022000

080094bc <FLASH_PageErase>:
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @note (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Banks, uint32_t Page)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b084      	sub	sp, #16
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
 80094c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_FLASH_PAGE(Page));

  /* Get configuration register, then clear page number */
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 80094c6:	4b0f      	ldr	r3, [pc, #60]	@ (8009504 <FLASH_PageErase+0x48>)
 80094c8:	695b      	ldr	r3, [r3, #20]
 80094ca:	4a0f      	ldr	r2, [pc, #60]	@ (8009508 <FLASH_PageErase+0x4c>)
 80094cc:	4013      	ands	r3, r2
 80094ce:	60fb      	str	r3, [r7, #12]

#if defined(FLASH_DBANK_SUPPORT)
  /* Check if page has to be erased in bank 1 or 2 */
  if (Banks != FLASH_BANK_1)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2b04      	cmp	r3, #4
 80094d4:	d005      	beq.n	80094e2 <FLASH_PageErase+0x26>
  {
    tmp |= FLASH_CR_BKER;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	2280      	movs	r2, #128	@ 0x80
 80094da:	0192      	lsls	r2, r2, #6
 80094dc:	4313      	orrs	r3, r2
 80094de:	60fb      	str	r3, [r7, #12]
 80094e0:	e003      	b.n	80094ea <FLASH_PageErase+0x2e>
  }
  else
  {
    tmp &= ~FLASH_CR_BKER;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	4a09      	ldr	r2, [pc, #36]	@ (800950c <FLASH_PageErase+0x50>)
 80094e6:	4013      	ands	r3, r2
 80094e8:	60fb      	str	r3, [r7, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_DBANK_SUPPORT */

  /* Set page number, Page Erase bit & Start bit */
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	00da      	lsls	r2, r3, #3
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	431a      	orrs	r2, r3
 80094f2:	4b04      	ldr	r3, [pc, #16]	@ (8009504 <FLASH_PageErase+0x48>)
 80094f4:	4906      	ldr	r1, [pc, #24]	@ (8009510 <FLASH_PageErase+0x54>)
 80094f6:	430a      	orrs	r2, r1
 80094f8:	615a      	str	r2, [r3, #20]
}
 80094fa:	46c0      	nop			@ (mov r8, r8)
 80094fc:	46bd      	mov	sp, r7
 80094fe:	b004      	add	sp, #16
 8009500:	bd80      	pop	{r7, pc}
 8009502:	46c0      	nop			@ (mov r8, r8)
 8009504:	40022000 	.word	0x40022000
 8009508:	ffffe007 	.word	0xffffe007
 800950c:	ffffdfff 	.word	0xffffdfff
 8009510:	00010002 	.word	0x00010002

08009514 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b086      	sub	sp, #24
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
 800951c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800951e:	2300      	movs	r3, #0
 8009520:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009522:	e14d      	b.n	80097c0 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	2101      	movs	r1, #1
 800952a:	697a      	ldr	r2, [r7, #20]
 800952c:	4091      	lsls	r1, r2
 800952e:	000a      	movs	r2, r1
 8009530:	4013      	ands	r3, r2
 8009532:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d100      	bne.n	800953c <HAL_GPIO_Init+0x28>
 800953a:	e13e      	b.n	80097ba <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	685b      	ldr	r3, [r3, #4]
 8009540:	2203      	movs	r2, #3
 8009542:	4013      	ands	r3, r2
 8009544:	2b01      	cmp	r3, #1
 8009546:	d005      	beq.n	8009554 <HAL_GPIO_Init+0x40>
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	685b      	ldr	r3, [r3, #4]
 800954c:	2203      	movs	r2, #3
 800954e:	4013      	ands	r3, r2
 8009550:	2b02      	cmp	r3, #2
 8009552:	d130      	bne.n	80095b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	689b      	ldr	r3, [r3, #8]
 8009558:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800955a:	697b      	ldr	r3, [r7, #20]
 800955c:	005b      	lsls	r3, r3, #1
 800955e:	2203      	movs	r2, #3
 8009560:	409a      	lsls	r2, r3
 8009562:	0013      	movs	r3, r2
 8009564:	43da      	mvns	r2, r3
 8009566:	693b      	ldr	r3, [r7, #16]
 8009568:	4013      	ands	r3, r2
 800956a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	68da      	ldr	r2, [r3, #12]
 8009570:	697b      	ldr	r3, [r7, #20]
 8009572:	005b      	lsls	r3, r3, #1
 8009574:	409a      	lsls	r2, r3
 8009576:	0013      	movs	r3, r2
 8009578:	693a      	ldr	r2, [r7, #16]
 800957a:	4313      	orrs	r3, r2
 800957c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	693a      	ldr	r2, [r7, #16]
 8009582:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	685b      	ldr	r3, [r3, #4]
 8009588:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800958a:	2201      	movs	r2, #1
 800958c:	697b      	ldr	r3, [r7, #20]
 800958e:	409a      	lsls	r2, r3
 8009590:	0013      	movs	r3, r2
 8009592:	43da      	mvns	r2, r3
 8009594:	693b      	ldr	r3, [r7, #16]
 8009596:	4013      	ands	r3, r2
 8009598:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	685b      	ldr	r3, [r3, #4]
 800959e:	091b      	lsrs	r3, r3, #4
 80095a0:	2201      	movs	r2, #1
 80095a2:	401a      	ands	r2, r3
 80095a4:	697b      	ldr	r3, [r7, #20]
 80095a6:	409a      	lsls	r2, r3
 80095a8:	0013      	movs	r3, r2
 80095aa:	693a      	ldr	r2, [r7, #16]
 80095ac:	4313      	orrs	r3, r2
 80095ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	693a      	ldr	r2, [r7, #16]
 80095b4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	685b      	ldr	r3, [r3, #4]
 80095ba:	2203      	movs	r2, #3
 80095bc:	4013      	ands	r3, r2
 80095be:	2b03      	cmp	r3, #3
 80095c0:	d017      	beq.n	80095f2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	68db      	ldr	r3, [r3, #12]
 80095c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80095c8:	697b      	ldr	r3, [r7, #20]
 80095ca:	005b      	lsls	r3, r3, #1
 80095cc:	2203      	movs	r2, #3
 80095ce:	409a      	lsls	r2, r3
 80095d0:	0013      	movs	r3, r2
 80095d2:	43da      	mvns	r2, r3
 80095d4:	693b      	ldr	r3, [r7, #16]
 80095d6:	4013      	ands	r3, r2
 80095d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	689a      	ldr	r2, [r3, #8]
 80095de:	697b      	ldr	r3, [r7, #20]
 80095e0:	005b      	lsls	r3, r3, #1
 80095e2:	409a      	lsls	r2, r3
 80095e4:	0013      	movs	r3, r2
 80095e6:	693a      	ldr	r2, [r7, #16]
 80095e8:	4313      	orrs	r3, r2
 80095ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	693a      	ldr	r2, [r7, #16]
 80095f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	685b      	ldr	r3, [r3, #4]
 80095f6:	2203      	movs	r2, #3
 80095f8:	4013      	ands	r3, r2
 80095fa:	2b02      	cmp	r3, #2
 80095fc:	d123      	bne.n	8009646 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80095fe:	697b      	ldr	r3, [r7, #20]
 8009600:	08da      	lsrs	r2, r3, #3
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	3208      	adds	r2, #8
 8009606:	0092      	lsls	r2, r2, #2
 8009608:	58d3      	ldr	r3, [r2, r3]
 800960a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800960c:	697b      	ldr	r3, [r7, #20]
 800960e:	2207      	movs	r2, #7
 8009610:	4013      	ands	r3, r2
 8009612:	009b      	lsls	r3, r3, #2
 8009614:	220f      	movs	r2, #15
 8009616:	409a      	lsls	r2, r3
 8009618:	0013      	movs	r3, r2
 800961a:	43da      	mvns	r2, r3
 800961c:	693b      	ldr	r3, [r7, #16]
 800961e:	4013      	ands	r3, r2
 8009620:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	691a      	ldr	r2, [r3, #16]
 8009626:	697b      	ldr	r3, [r7, #20]
 8009628:	2107      	movs	r1, #7
 800962a:	400b      	ands	r3, r1
 800962c:	009b      	lsls	r3, r3, #2
 800962e:	409a      	lsls	r2, r3
 8009630:	0013      	movs	r3, r2
 8009632:	693a      	ldr	r2, [r7, #16]
 8009634:	4313      	orrs	r3, r2
 8009636:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8009638:	697b      	ldr	r3, [r7, #20]
 800963a:	08da      	lsrs	r2, r3, #3
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	3208      	adds	r2, #8
 8009640:	0092      	lsls	r2, r2, #2
 8009642:	6939      	ldr	r1, [r7, #16]
 8009644:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800964c:	697b      	ldr	r3, [r7, #20]
 800964e:	005b      	lsls	r3, r3, #1
 8009650:	2203      	movs	r2, #3
 8009652:	409a      	lsls	r2, r3
 8009654:	0013      	movs	r3, r2
 8009656:	43da      	mvns	r2, r3
 8009658:	693b      	ldr	r3, [r7, #16]
 800965a:	4013      	ands	r3, r2
 800965c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	685b      	ldr	r3, [r3, #4]
 8009662:	2203      	movs	r2, #3
 8009664:	401a      	ands	r2, r3
 8009666:	697b      	ldr	r3, [r7, #20]
 8009668:	005b      	lsls	r3, r3, #1
 800966a:	409a      	lsls	r2, r3
 800966c:	0013      	movs	r3, r2
 800966e:	693a      	ldr	r2, [r7, #16]
 8009670:	4313      	orrs	r3, r2
 8009672:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	693a      	ldr	r2, [r7, #16]
 8009678:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	685a      	ldr	r2, [r3, #4]
 800967e:	23c0      	movs	r3, #192	@ 0xc0
 8009680:	029b      	lsls	r3, r3, #10
 8009682:	4013      	ands	r3, r2
 8009684:	d100      	bne.n	8009688 <HAL_GPIO_Init+0x174>
 8009686:	e098      	b.n	80097ba <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8009688:	4a53      	ldr	r2, [pc, #332]	@ (80097d8 <HAL_GPIO_Init+0x2c4>)
 800968a:	697b      	ldr	r3, [r7, #20]
 800968c:	089b      	lsrs	r3, r3, #2
 800968e:	3318      	adds	r3, #24
 8009690:	009b      	lsls	r3, r3, #2
 8009692:	589b      	ldr	r3, [r3, r2]
 8009694:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8009696:	697b      	ldr	r3, [r7, #20]
 8009698:	2203      	movs	r2, #3
 800969a:	4013      	ands	r3, r2
 800969c:	00db      	lsls	r3, r3, #3
 800969e:	220f      	movs	r2, #15
 80096a0:	409a      	lsls	r2, r3
 80096a2:	0013      	movs	r3, r2
 80096a4:	43da      	mvns	r2, r3
 80096a6:	693b      	ldr	r3, [r7, #16]
 80096a8:	4013      	ands	r3, r2
 80096aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80096ac:	687a      	ldr	r2, [r7, #4]
 80096ae:	23a0      	movs	r3, #160	@ 0xa0
 80096b0:	05db      	lsls	r3, r3, #23
 80096b2:	429a      	cmp	r2, r3
 80096b4:	d019      	beq.n	80096ea <HAL_GPIO_Init+0x1d6>
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	4a48      	ldr	r2, [pc, #288]	@ (80097dc <HAL_GPIO_Init+0x2c8>)
 80096ba:	4293      	cmp	r3, r2
 80096bc:	d013      	beq.n	80096e6 <HAL_GPIO_Init+0x1d2>
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	4a47      	ldr	r2, [pc, #284]	@ (80097e0 <HAL_GPIO_Init+0x2cc>)
 80096c2:	4293      	cmp	r3, r2
 80096c4:	d00d      	beq.n	80096e2 <HAL_GPIO_Init+0x1ce>
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	4a46      	ldr	r2, [pc, #280]	@ (80097e4 <HAL_GPIO_Init+0x2d0>)
 80096ca:	4293      	cmp	r3, r2
 80096cc:	d007      	beq.n	80096de <HAL_GPIO_Init+0x1ca>
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	4a45      	ldr	r2, [pc, #276]	@ (80097e8 <HAL_GPIO_Init+0x2d4>)
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d101      	bne.n	80096da <HAL_GPIO_Init+0x1c6>
 80096d6:	2304      	movs	r3, #4
 80096d8:	e008      	b.n	80096ec <HAL_GPIO_Init+0x1d8>
 80096da:	2305      	movs	r3, #5
 80096dc:	e006      	b.n	80096ec <HAL_GPIO_Init+0x1d8>
 80096de:	2303      	movs	r3, #3
 80096e0:	e004      	b.n	80096ec <HAL_GPIO_Init+0x1d8>
 80096e2:	2302      	movs	r3, #2
 80096e4:	e002      	b.n	80096ec <HAL_GPIO_Init+0x1d8>
 80096e6:	2301      	movs	r3, #1
 80096e8:	e000      	b.n	80096ec <HAL_GPIO_Init+0x1d8>
 80096ea:	2300      	movs	r3, #0
 80096ec:	697a      	ldr	r2, [r7, #20]
 80096ee:	2103      	movs	r1, #3
 80096f0:	400a      	ands	r2, r1
 80096f2:	00d2      	lsls	r2, r2, #3
 80096f4:	4093      	lsls	r3, r2
 80096f6:	693a      	ldr	r2, [r7, #16]
 80096f8:	4313      	orrs	r3, r2
 80096fa:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80096fc:	4936      	ldr	r1, [pc, #216]	@ (80097d8 <HAL_GPIO_Init+0x2c4>)
 80096fe:	697b      	ldr	r3, [r7, #20]
 8009700:	089b      	lsrs	r3, r3, #2
 8009702:	3318      	adds	r3, #24
 8009704:	009b      	lsls	r3, r3, #2
 8009706:	693a      	ldr	r2, [r7, #16]
 8009708:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800970a:	4b33      	ldr	r3, [pc, #204]	@ (80097d8 <HAL_GPIO_Init+0x2c4>)
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	43da      	mvns	r2, r3
 8009714:	693b      	ldr	r3, [r7, #16]
 8009716:	4013      	ands	r3, r2
 8009718:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	685a      	ldr	r2, [r3, #4]
 800971e:	2380      	movs	r3, #128	@ 0x80
 8009720:	035b      	lsls	r3, r3, #13
 8009722:	4013      	ands	r3, r2
 8009724:	d003      	beq.n	800972e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8009726:	693a      	ldr	r2, [r7, #16]
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	4313      	orrs	r3, r2
 800972c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800972e:	4b2a      	ldr	r3, [pc, #168]	@ (80097d8 <HAL_GPIO_Init+0x2c4>)
 8009730:	693a      	ldr	r2, [r7, #16]
 8009732:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8009734:	4b28      	ldr	r3, [pc, #160]	@ (80097d8 <HAL_GPIO_Init+0x2c4>)
 8009736:	685b      	ldr	r3, [r3, #4]
 8009738:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	43da      	mvns	r2, r3
 800973e:	693b      	ldr	r3, [r7, #16]
 8009740:	4013      	ands	r3, r2
 8009742:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	685a      	ldr	r2, [r3, #4]
 8009748:	2380      	movs	r3, #128	@ 0x80
 800974a:	039b      	lsls	r3, r3, #14
 800974c:	4013      	ands	r3, r2
 800974e:	d003      	beq.n	8009758 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8009750:	693a      	ldr	r2, [r7, #16]
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	4313      	orrs	r3, r2
 8009756:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8009758:	4b1f      	ldr	r3, [pc, #124]	@ (80097d8 <HAL_GPIO_Init+0x2c4>)
 800975a:	693a      	ldr	r2, [r7, #16]
 800975c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800975e:	4a1e      	ldr	r2, [pc, #120]	@ (80097d8 <HAL_GPIO_Init+0x2c4>)
 8009760:	2384      	movs	r3, #132	@ 0x84
 8009762:	58d3      	ldr	r3, [r2, r3]
 8009764:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	43da      	mvns	r2, r3
 800976a:	693b      	ldr	r3, [r7, #16]
 800976c:	4013      	ands	r3, r2
 800976e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	685a      	ldr	r2, [r3, #4]
 8009774:	2380      	movs	r3, #128	@ 0x80
 8009776:	029b      	lsls	r3, r3, #10
 8009778:	4013      	ands	r3, r2
 800977a:	d003      	beq.n	8009784 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800977c:	693a      	ldr	r2, [r7, #16]
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	4313      	orrs	r3, r2
 8009782:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8009784:	4914      	ldr	r1, [pc, #80]	@ (80097d8 <HAL_GPIO_Init+0x2c4>)
 8009786:	2284      	movs	r2, #132	@ 0x84
 8009788:	693b      	ldr	r3, [r7, #16]
 800978a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800978c:	4a12      	ldr	r2, [pc, #72]	@ (80097d8 <HAL_GPIO_Init+0x2c4>)
 800978e:	2380      	movs	r3, #128	@ 0x80
 8009790:	58d3      	ldr	r3, [r2, r3]
 8009792:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	43da      	mvns	r2, r3
 8009798:	693b      	ldr	r3, [r7, #16]
 800979a:	4013      	ands	r3, r2
 800979c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	685a      	ldr	r2, [r3, #4]
 80097a2:	2380      	movs	r3, #128	@ 0x80
 80097a4:	025b      	lsls	r3, r3, #9
 80097a6:	4013      	ands	r3, r2
 80097a8:	d003      	beq.n	80097b2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80097aa:	693a      	ldr	r2, [r7, #16]
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	4313      	orrs	r3, r2
 80097b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80097b2:	4909      	ldr	r1, [pc, #36]	@ (80097d8 <HAL_GPIO_Init+0x2c4>)
 80097b4:	2280      	movs	r2, #128	@ 0x80
 80097b6:	693b      	ldr	r3, [r7, #16]
 80097b8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80097ba:	697b      	ldr	r3, [r7, #20]
 80097bc:	3301      	adds	r3, #1
 80097be:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	681a      	ldr	r2, [r3, #0]
 80097c4:	697b      	ldr	r3, [r7, #20]
 80097c6:	40da      	lsrs	r2, r3
 80097c8:	1e13      	subs	r3, r2, #0
 80097ca:	d000      	beq.n	80097ce <HAL_GPIO_Init+0x2ba>
 80097cc:	e6aa      	b.n	8009524 <HAL_GPIO_Init+0x10>
  }
}
 80097ce:	46c0      	nop			@ (mov r8, r8)
 80097d0:	46c0      	nop			@ (mov r8, r8)
 80097d2:	46bd      	mov	sp, r7
 80097d4:	b006      	add	sp, #24
 80097d6:	bd80      	pop	{r7, pc}
 80097d8:	40021800 	.word	0x40021800
 80097dc:	50000400 	.word	0x50000400
 80097e0:	50000800 	.word	0x50000800
 80097e4:	50000c00 	.word	0x50000c00
 80097e8:	50001000 	.word	0x50001000

080097ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b084      	sub	sp, #16
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
 80097f4:	000a      	movs	r2, r1
 80097f6:	1cbb      	adds	r3, r7, #2
 80097f8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	691b      	ldr	r3, [r3, #16]
 80097fe:	1cba      	adds	r2, r7, #2
 8009800:	8812      	ldrh	r2, [r2, #0]
 8009802:	4013      	ands	r3, r2
 8009804:	d004      	beq.n	8009810 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8009806:	230f      	movs	r3, #15
 8009808:	18fb      	adds	r3, r7, r3
 800980a:	2201      	movs	r2, #1
 800980c:	701a      	strb	r2, [r3, #0]
 800980e:	e003      	b.n	8009818 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009810:	230f      	movs	r3, #15
 8009812:	18fb      	adds	r3, r7, r3
 8009814:	2200      	movs	r2, #0
 8009816:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8009818:	230f      	movs	r3, #15
 800981a:	18fb      	adds	r3, r7, r3
 800981c:	781b      	ldrb	r3, [r3, #0]
}
 800981e:	0018      	movs	r0, r3
 8009820:	46bd      	mov	sp, r7
 8009822:	b004      	add	sp, #16
 8009824:	bd80      	pop	{r7, pc}

08009826 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009826:	b580      	push	{r7, lr}
 8009828:	b082      	sub	sp, #8
 800982a:	af00      	add	r7, sp, #0
 800982c:	6078      	str	r0, [r7, #4]
 800982e:	0008      	movs	r0, r1
 8009830:	0011      	movs	r1, r2
 8009832:	1cbb      	adds	r3, r7, #2
 8009834:	1c02      	adds	r2, r0, #0
 8009836:	801a      	strh	r2, [r3, #0]
 8009838:	1c7b      	adds	r3, r7, #1
 800983a:	1c0a      	adds	r2, r1, #0
 800983c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800983e:	1c7b      	adds	r3, r7, #1
 8009840:	781b      	ldrb	r3, [r3, #0]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d004      	beq.n	8009850 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8009846:	1cbb      	adds	r3, r7, #2
 8009848:	881a      	ldrh	r2, [r3, #0]
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800984e:	e003      	b.n	8009858 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8009850:	1cbb      	adds	r3, r7, #2
 8009852:	881a      	ldrh	r2, [r3, #0]
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8009858:	46c0      	nop			@ (mov r8, r8)
 800985a:	46bd      	mov	sp, r7
 800985c:	b002      	add	sp, #8
 800985e:	bd80      	pop	{r7, pc}

08009860 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b082      	sub	sp, #8
 8009864:	af00      	add	r7, sp, #0
 8009866:	0002      	movs	r2, r0
 8009868:	1dbb      	adds	r3, r7, #6
 800986a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 800986c:	4b10      	ldr	r3, [pc, #64]	@ (80098b0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800986e:	68db      	ldr	r3, [r3, #12]
 8009870:	1dba      	adds	r2, r7, #6
 8009872:	8812      	ldrh	r2, [r2, #0]
 8009874:	4013      	ands	r3, r2
 8009876:	d008      	beq.n	800988a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8009878:	4b0d      	ldr	r3, [pc, #52]	@ (80098b0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800987a:	1dba      	adds	r2, r7, #6
 800987c:	8812      	ldrh	r2, [r2, #0]
 800987e:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8009880:	1dbb      	adds	r3, r7, #6
 8009882:	881b      	ldrh	r3, [r3, #0]
 8009884:	0018      	movs	r0, r3
 8009886:	f7fc fa29 	bl	8005cdc <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 800988a:	4b09      	ldr	r3, [pc, #36]	@ (80098b0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800988c:	691b      	ldr	r3, [r3, #16]
 800988e:	1dba      	adds	r2, r7, #6
 8009890:	8812      	ldrh	r2, [r2, #0]
 8009892:	4013      	ands	r3, r2
 8009894:	d008      	beq.n	80098a8 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8009896:	4b06      	ldr	r3, [pc, #24]	@ (80098b0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8009898:	1dba      	adds	r2, r7, #6
 800989a:	8812      	ldrh	r2, [r2, #0]
 800989c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800989e:	1dbb      	adds	r3, r7, #6
 80098a0:	881b      	ldrh	r3, [r3, #0]
 80098a2:	0018      	movs	r0, r3
 80098a4:	f000 f806 	bl	80098b4 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80098a8:	46c0      	nop			@ (mov r8, r8)
 80098aa:	46bd      	mov	sp, r7
 80098ac:	b002      	add	sp, #8
 80098ae:	bd80      	pop	{r7, pc}
 80098b0:	40021800 	.word	0x40021800

080098b4 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b082      	sub	sp, #8
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	0002      	movs	r2, r0
 80098bc:	1dbb      	adds	r3, r7, #6
 80098be:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 80098c0:	46c0      	nop			@ (mov r8, r8)
 80098c2:	46bd      	mov	sp, r7
 80098c4:	b002      	add	sp, #8
 80098c6:	bd80      	pop	{r7, pc}

080098c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b082      	sub	sp, #8
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d101      	bne.n	80098da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80098d6:	2301      	movs	r3, #1
 80098d8:	e08f      	b.n	80099fa <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	2241      	movs	r2, #65	@ 0x41
 80098de:	5c9b      	ldrb	r3, [r3, r2]
 80098e0:	b2db      	uxtb	r3, r3
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d107      	bne.n	80098f6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2240      	movs	r2, #64	@ 0x40
 80098ea:	2100      	movs	r1, #0
 80098ec:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	0018      	movs	r0, r3
 80098f2:	f7fe fa3f 	bl	8007d74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2241      	movs	r2, #65	@ 0x41
 80098fa:	2124      	movs	r1, #36	@ 0x24
 80098fc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	681a      	ldr	r2, [r3, #0]
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	2101      	movs	r1, #1
 800990a:	438a      	bics	r2, r1
 800990c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	685a      	ldr	r2, [r3, #4]
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	493b      	ldr	r1, [pc, #236]	@ (8009a04 <HAL_I2C_Init+0x13c>)
 8009918:	400a      	ands	r2, r1
 800991a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	689a      	ldr	r2, [r3, #8]
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	4938      	ldr	r1, [pc, #224]	@ (8009a08 <HAL_I2C_Init+0x140>)
 8009928:	400a      	ands	r2, r1
 800992a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	68db      	ldr	r3, [r3, #12]
 8009930:	2b01      	cmp	r3, #1
 8009932:	d108      	bne.n	8009946 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	689a      	ldr	r2, [r3, #8]
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	2180      	movs	r1, #128	@ 0x80
 800993e:	0209      	lsls	r1, r1, #8
 8009940:	430a      	orrs	r2, r1
 8009942:	609a      	str	r2, [r3, #8]
 8009944:	e007      	b.n	8009956 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	689a      	ldr	r2, [r3, #8]
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	2184      	movs	r1, #132	@ 0x84
 8009950:	0209      	lsls	r1, r1, #8
 8009952:	430a      	orrs	r2, r1
 8009954:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	68db      	ldr	r3, [r3, #12]
 800995a:	2b02      	cmp	r3, #2
 800995c:	d109      	bne.n	8009972 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	685a      	ldr	r2, [r3, #4]
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	2180      	movs	r1, #128	@ 0x80
 800996a:	0109      	lsls	r1, r1, #4
 800996c:	430a      	orrs	r2, r1
 800996e:	605a      	str	r2, [r3, #4]
 8009970:	e007      	b.n	8009982 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	685a      	ldr	r2, [r3, #4]
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	4923      	ldr	r1, [pc, #140]	@ (8009a0c <HAL_I2C_Init+0x144>)
 800997e:	400a      	ands	r2, r1
 8009980:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	685a      	ldr	r2, [r3, #4]
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	4920      	ldr	r1, [pc, #128]	@ (8009a10 <HAL_I2C_Init+0x148>)
 800998e:	430a      	orrs	r2, r1
 8009990:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	68da      	ldr	r2, [r3, #12]
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	491a      	ldr	r1, [pc, #104]	@ (8009a08 <HAL_I2C_Init+0x140>)
 800999e:	400a      	ands	r2, r1
 80099a0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	691a      	ldr	r2, [r3, #16]
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	695b      	ldr	r3, [r3, #20]
 80099aa:	431a      	orrs	r2, r3
 80099ac:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	699b      	ldr	r3, [r3, #24]
 80099b2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	430a      	orrs	r2, r1
 80099ba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	69d9      	ldr	r1, [r3, #28]
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	6a1a      	ldr	r2, [r3, #32]
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	430a      	orrs	r2, r1
 80099ca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	681a      	ldr	r2, [r3, #0]
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	2101      	movs	r1, #1
 80099d8:	430a      	orrs	r2, r1
 80099da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2200      	movs	r2, #0
 80099e0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2241      	movs	r2, #65	@ 0x41
 80099e6:	2120      	movs	r1, #32
 80099e8:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2200      	movs	r2, #0
 80099ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2242      	movs	r2, #66	@ 0x42
 80099f4:	2100      	movs	r1, #0
 80099f6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80099f8:	2300      	movs	r3, #0
}
 80099fa:	0018      	movs	r0, r3
 80099fc:	46bd      	mov	sp, r7
 80099fe:	b002      	add	sp, #8
 8009a00:	bd80      	pop	{r7, pc}
 8009a02:	46c0      	nop			@ (mov r8, r8)
 8009a04:	f0ffffff 	.word	0xf0ffffff
 8009a08:	ffff7fff 	.word	0xffff7fff
 8009a0c:	fffff7ff 	.word	0xfffff7ff
 8009a10:	02008000 	.word	0x02008000

08009a14 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8009a14:	b590      	push	{r4, r7, lr}
 8009a16:	b089      	sub	sp, #36	@ 0x24
 8009a18:	af02      	add	r7, sp, #8
 8009a1a:	60f8      	str	r0, [r7, #12]
 8009a1c:	0008      	movs	r0, r1
 8009a1e:	607a      	str	r2, [r7, #4]
 8009a20:	0019      	movs	r1, r3
 8009a22:	230a      	movs	r3, #10
 8009a24:	18fb      	adds	r3, r7, r3
 8009a26:	1c02      	adds	r2, r0, #0
 8009a28:	801a      	strh	r2, [r3, #0]
 8009a2a:	2308      	movs	r3, #8
 8009a2c:	18fb      	adds	r3, r7, r3
 8009a2e:	1c0a      	adds	r2, r1, #0
 8009a30:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	2241      	movs	r2, #65	@ 0x41
 8009a36:	5c9b      	ldrb	r3, [r3, r2]
 8009a38:	b2db      	uxtb	r3, r3
 8009a3a:	2b20      	cmp	r3, #32
 8009a3c:	d000      	beq.n	8009a40 <HAL_I2C_Master_Transmit+0x2c>
 8009a3e:	e10a      	b.n	8009c56 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	2240      	movs	r2, #64	@ 0x40
 8009a44:	5c9b      	ldrb	r3, [r3, r2]
 8009a46:	2b01      	cmp	r3, #1
 8009a48:	d101      	bne.n	8009a4e <HAL_I2C_Master_Transmit+0x3a>
 8009a4a:	2302      	movs	r3, #2
 8009a4c:	e104      	b.n	8009c58 <HAL_I2C_Master_Transmit+0x244>
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	2240      	movs	r2, #64	@ 0x40
 8009a52:	2101      	movs	r1, #1
 8009a54:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009a56:	f7ff fa89 	bl	8008f6c <HAL_GetTick>
 8009a5a:	0003      	movs	r3, r0
 8009a5c:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009a5e:	2380      	movs	r3, #128	@ 0x80
 8009a60:	0219      	lsls	r1, r3, #8
 8009a62:	68f8      	ldr	r0, [r7, #12]
 8009a64:	693b      	ldr	r3, [r7, #16]
 8009a66:	9300      	str	r3, [sp, #0]
 8009a68:	2319      	movs	r3, #25
 8009a6a:	2201      	movs	r2, #1
 8009a6c:	f000 fa26 	bl	8009ebc <I2C_WaitOnFlagUntilTimeout>
 8009a70:	1e03      	subs	r3, r0, #0
 8009a72:	d001      	beq.n	8009a78 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8009a74:	2301      	movs	r3, #1
 8009a76:	e0ef      	b.n	8009c58 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	2241      	movs	r2, #65	@ 0x41
 8009a7c:	2121      	movs	r1, #33	@ 0x21
 8009a7e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	2242      	movs	r2, #66	@ 0x42
 8009a84:	2110      	movs	r1, #16
 8009a86:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	687a      	ldr	r2, [r7, #4]
 8009a92:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	2208      	movs	r2, #8
 8009a98:	18ba      	adds	r2, r7, r2
 8009a9a:	8812      	ldrh	r2, [r2, #0]
 8009a9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009aa8:	b29b      	uxth	r3, r3
 8009aaa:	2bff      	cmp	r3, #255	@ 0xff
 8009aac:	d906      	bls.n	8009abc <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	22ff      	movs	r2, #255	@ 0xff
 8009ab2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8009ab4:	2380      	movs	r3, #128	@ 0x80
 8009ab6:	045b      	lsls	r3, r3, #17
 8009ab8:	617b      	str	r3, [r7, #20]
 8009aba:	e007      	b.n	8009acc <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009ac0:	b29a      	uxth	r2, r3
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8009ac6:	2380      	movs	r3, #128	@ 0x80
 8009ac8:	049b      	lsls	r3, r3, #18
 8009aca:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d027      	beq.n	8009b24 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ad8:	781a      	ldrb	r2, [r3, #0]
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ae4:	1c5a      	adds	r2, r3, #1
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009aee:	b29b      	uxth	r3, r3
 8009af0:	3b01      	subs	r3, #1
 8009af2:	b29a      	uxth	r2, r3
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009afc:	3b01      	subs	r3, #1
 8009afe:	b29a      	uxth	r2, r3
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009b08:	b2db      	uxtb	r3, r3
 8009b0a:	3301      	adds	r3, #1
 8009b0c:	b2da      	uxtb	r2, r3
 8009b0e:	697c      	ldr	r4, [r7, #20]
 8009b10:	230a      	movs	r3, #10
 8009b12:	18fb      	adds	r3, r7, r3
 8009b14:	8819      	ldrh	r1, [r3, #0]
 8009b16:	68f8      	ldr	r0, [r7, #12]
 8009b18:	4b51      	ldr	r3, [pc, #324]	@ (8009c60 <HAL_I2C_Master_Transmit+0x24c>)
 8009b1a:	9300      	str	r3, [sp, #0]
 8009b1c:	0023      	movs	r3, r4
 8009b1e:	f000 fc45 	bl	800a3ac <I2C_TransferConfig>
 8009b22:	e06f      	b.n	8009c04 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009b28:	b2da      	uxtb	r2, r3
 8009b2a:	697c      	ldr	r4, [r7, #20]
 8009b2c:	230a      	movs	r3, #10
 8009b2e:	18fb      	adds	r3, r7, r3
 8009b30:	8819      	ldrh	r1, [r3, #0]
 8009b32:	68f8      	ldr	r0, [r7, #12]
 8009b34:	4b4a      	ldr	r3, [pc, #296]	@ (8009c60 <HAL_I2C_Master_Transmit+0x24c>)
 8009b36:	9300      	str	r3, [sp, #0]
 8009b38:	0023      	movs	r3, r4
 8009b3a:	f000 fc37 	bl	800a3ac <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8009b3e:	e061      	b.n	8009c04 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009b40:	693a      	ldr	r2, [r7, #16]
 8009b42:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	0018      	movs	r0, r3
 8009b48:	f000 fa10 	bl	8009f6c <I2C_WaitOnTXISFlagUntilTimeout>
 8009b4c:	1e03      	subs	r3, r0, #0
 8009b4e:	d001      	beq.n	8009b54 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8009b50:	2301      	movs	r3, #1
 8009b52:	e081      	b.n	8009c58 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b58:	781a      	ldrb	r2, [r3, #0]
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b64:	1c5a      	adds	r2, r3, #1
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009b6e:	b29b      	uxth	r3, r3
 8009b70:	3b01      	subs	r3, #1
 8009b72:	b29a      	uxth	r2, r3
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009b7c:	3b01      	subs	r3, #1
 8009b7e:	b29a      	uxth	r2, r3
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009b88:	b29b      	uxth	r3, r3
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d03a      	beq.n	8009c04 <HAL_I2C_Master_Transmit+0x1f0>
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d136      	bne.n	8009c04 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009b96:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009b98:	68f8      	ldr	r0, [r7, #12]
 8009b9a:	693b      	ldr	r3, [r7, #16]
 8009b9c:	9300      	str	r3, [sp, #0]
 8009b9e:	0013      	movs	r3, r2
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	2180      	movs	r1, #128	@ 0x80
 8009ba4:	f000 f98a 	bl	8009ebc <I2C_WaitOnFlagUntilTimeout>
 8009ba8:	1e03      	subs	r3, r0, #0
 8009baa:	d001      	beq.n	8009bb0 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8009bac:	2301      	movs	r3, #1
 8009bae:	e053      	b.n	8009c58 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009bb4:	b29b      	uxth	r3, r3
 8009bb6:	2bff      	cmp	r3, #255	@ 0xff
 8009bb8:	d911      	bls.n	8009bde <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	22ff      	movs	r2, #255	@ 0xff
 8009bbe:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009bc4:	b2da      	uxtb	r2, r3
 8009bc6:	2380      	movs	r3, #128	@ 0x80
 8009bc8:	045c      	lsls	r4, r3, #17
 8009bca:	230a      	movs	r3, #10
 8009bcc:	18fb      	adds	r3, r7, r3
 8009bce:	8819      	ldrh	r1, [r3, #0]
 8009bd0:	68f8      	ldr	r0, [r7, #12]
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	9300      	str	r3, [sp, #0]
 8009bd6:	0023      	movs	r3, r4
 8009bd8:	f000 fbe8 	bl	800a3ac <I2C_TransferConfig>
 8009bdc:	e012      	b.n	8009c04 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009be2:	b29a      	uxth	r2, r3
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009bec:	b2da      	uxtb	r2, r3
 8009bee:	2380      	movs	r3, #128	@ 0x80
 8009bf0:	049c      	lsls	r4, r3, #18
 8009bf2:	230a      	movs	r3, #10
 8009bf4:	18fb      	adds	r3, r7, r3
 8009bf6:	8819      	ldrh	r1, [r3, #0]
 8009bf8:	68f8      	ldr	r0, [r7, #12]
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	9300      	str	r3, [sp, #0]
 8009bfe:	0023      	movs	r3, r4
 8009c00:	f000 fbd4 	bl	800a3ac <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009c08:	b29b      	uxth	r3, r3
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d198      	bne.n	8009b40 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009c0e:	693a      	ldr	r2, [r7, #16]
 8009c10:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	0018      	movs	r0, r3
 8009c16:	f000 f9ef 	bl	8009ff8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009c1a:	1e03      	subs	r3, r0, #0
 8009c1c:	d001      	beq.n	8009c22 <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8009c1e:	2301      	movs	r3, #1
 8009c20:	e01a      	b.n	8009c58 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	2220      	movs	r2, #32
 8009c28:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	685a      	ldr	r2, [r3, #4]
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	490b      	ldr	r1, [pc, #44]	@ (8009c64 <HAL_I2C_Master_Transmit+0x250>)
 8009c36:	400a      	ands	r2, r1
 8009c38:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	2241      	movs	r2, #65	@ 0x41
 8009c3e:	2120      	movs	r1, #32
 8009c40:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	2242      	movs	r2, #66	@ 0x42
 8009c46:	2100      	movs	r1, #0
 8009c48:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	2240      	movs	r2, #64	@ 0x40
 8009c4e:	2100      	movs	r1, #0
 8009c50:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009c52:	2300      	movs	r3, #0
 8009c54:	e000      	b.n	8009c58 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8009c56:	2302      	movs	r3, #2
  }
}
 8009c58:	0018      	movs	r0, r3
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	b007      	add	sp, #28
 8009c5e:	bd90      	pop	{r4, r7, pc}
 8009c60:	80002000 	.word	0x80002000
 8009c64:	fe00e800 	.word	0xfe00e800

08009c68 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8009c68:	b590      	push	{r4, r7, lr}
 8009c6a:	b089      	sub	sp, #36	@ 0x24
 8009c6c:	af02      	add	r7, sp, #8
 8009c6e:	60f8      	str	r0, [r7, #12]
 8009c70:	0008      	movs	r0, r1
 8009c72:	607a      	str	r2, [r7, #4]
 8009c74:	0019      	movs	r1, r3
 8009c76:	230a      	movs	r3, #10
 8009c78:	18fb      	adds	r3, r7, r3
 8009c7a:	1c02      	adds	r2, r0, #0
 8009c7c:	801a      	strh	r2, [r3, #0]
 8009c7e:	2308      	movs	r3, #8
 8009c80:	18fb      	adds	r3, r7, r3
 8009c82:	1c0a      	adds	r2, r1, #0
 8009c84:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	2241      	movs	r2, #65	@ 0x41
 8009c8a:	5c9b      	ldrb	r3, [r3, r2]
 8009c8c:	b2db      	uxtb	r3, r3
 8009c8e:	2b20      	cmp	r3, #32
 8009c90:	d000      	beq.n	8009c94 <HAL_I2C_Master_Receive+0x2c>
 8009c92:	e0e8      	b.n	8009e66 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	2240      	movs	r2, #64	@ 0x40
 8009c98:	5c9b      	ldrb	r3, [r3, r2]
 8009c9a:	2b01      	cmp	r3, #1
 8009c9c:	d101      	bne.n	8009ca2 <HAL_I2C_Master_Receive+0x3a>
 8009c9e:	2302      	movs	r3, #2
 8009ca0:	e0e2      	b.n	8009e68 <HAL_I2C_Master_Receive+0x200>
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	2240      	movs	r2, #64	@ 0x40
 8009ca6:	2101      	movs	r1, #1
 8009ca8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009caa:	f7ff f95f 	bl	8008f6c <HAL_GetTick>
 8009cae:	0003      	movs	r3, r0
 8009cb0:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009cb2:	2380      	movs	r3, #128	@ 0x80
 8009cb4:	0219      	lsls	r1, r3, #8
 8009cb6:	68f8      	ldr	r0, [r7, #12]
 8009cb8:	697b      	ldr	r3, [r7, #20]
 8009cba:	9300      	str	r3, [sp, #0]
 8009cbc:	2319      	movs	r3, #25
 8009cbe:	2201      	movs	r2, #1
 8009cc0:	f000 f8fc 	bl	8009ebc <I2C_WaitOnFlagUntilTimeout>
 8009cc4:	1e03      	subs	r3, r0, #0
 8009cc6:	d001      	beq.n	8009ccc <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8009cc8:	2301      	movs	r3, #1
 8009cca:	e0cd      	b.n	8009e68 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	2241      	movs	r2, #65	@ 0x41
 8009cd0:	2122      	movs	r1, #34	@ 0x22
 8009cd2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	2242      	movs	r2, #66	@ 0x42
 8009cd8:	2110      	movs	r1, #16
 8009cda:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	2200      	movs	r2, #0
 8009ce0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	687a      	ldr	r2, [r7, #4]
 8009ce6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	2208      	movs	r2, #8
 8009cec:	18ba      	adds	r2, r7, r2
 8009cee:	8812      	ldrh	r2, [r2, #0]
 8009cf0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009cfc:	b29b      	uxth	r3, r3
 8009cfe:	2bff      	cmp	r3, #255	@ 0xff
 8009d00:	d911      	bls.n	8009d26 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	22ff      	movs	r2, #255	@ 0xff
 8009d06:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009d0c:	b2da      	uxtb	r2, r3
 8009d0e:	2380      	movs	r3, #128	@ 0x80
 8009d10:	045c      	lsls	r4, r3, #17
 8009d12:	230a      	movs	r3, #10
 8009d14:	18fb      	adds	r3, r7, r3
 8009d16:	8819      	ldrh	r1, [r3, #0]
 8009d18:	68f8      	ldr	r0, [r7, #12]
 8009d1a:	4b55      	ldr	r3, [pc, #340]	@ (8009e70 <HAL_I2C_Master_Receive+0x208>)
 8009d1c:	9300      	str	r3, [sp, #0]
 8009d1e:	0023      	movs	r3, r4
 8009d20:	f000 fb44 	bl	800a3ac <I2C_TransferConfig>
 8009d24:	e076      	b.n	8009e14 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009d2a:	b29a      	uxth	r2, r3
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009d34:	b2da      	uxtb	r2, r3
 8009d36:	2380      	movs	r3, #128	@ 0x80
 8009d38:	049c      	lsls	r4, r3, #18
 8009d3a:	230a      	movs	r3, #10
 8009d3c:	18fb      	adds	r3, r7, r3
 8009d3e:	8819      	ldrh	r1, [r3, #0]
 8009d40:	68f8      	ldr	r0, [r7, #12]
 8009d42:	4b4b      	ldr	r3, [pc, #300]	@ (8009e70 <HAL_I2C_Master_Receive+0x208>)
 8009d44:	9300      	str	r3, [sp, #0]
 8009d46:	0023      	movs	r3, r4
 8009d48:	f000 fb30 	bl	800a3ac <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8009d4c:	e062      	b.n	8009e14 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009d4e:	697a      	ldr	r2, [r7, #20]
 8009d50:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	0018      	movs	r0, r3
 8009d56:	f000 f993 	bl	800a080 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009d5a:	1e03      	subs	r3, r0, #0
 8009d5c:	d001      	beq.n	8009d62 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8009d5e:	2301      	movs	r3, #1
 8009d60:	e082      	b.n	8009e68 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d6c:	b2d2      	uxtb	r2, r2
 8009d6e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d74:	1c5a      	adds	r2, r3, #1
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009d7e:	3b01      	subs	r3, #1
 8009d80:	b29a      	uxth	r2, r3
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009d8a:	b29b      	uxth	r3, r3
 8009d8c:	3b01      	subs	r3, #1
 8009d8e:	b29a      	uxth	r2, r3
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009d98:	b29b      	uxth	r3, r3
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d03a      	beq.n	8009e14 <HAL_I2C_Master_Receive+0x1ac>
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d136      	bne.n	8009e14 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009da6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009da8:	68f8      	ldr	r0, [r7, #12]
 8009daa:	697b      	ldr	r3, [r7, #20]
 8009dac:	9300      	str	r3, [sp, #0]
 8009dae:	0013      	movs	r3, r2
 8009db0:	2200      	movs	r2, #0
 8009db2:	2180      	movs	r1, #128	@ 0x80
 8009db4:	f000 f882 	bl	8009ebc <I2C_WaitOnFlagUntilTimeout>
 8009db8:	1e03      	subs	r3, r0, #0
 8009dba:	d001      	beq.n	8009dc0 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8009dbc:	2301      	movs	r3, #1
 8009dbe:	e053      	b.n	8009e68 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009dc4:	b29b      	uxth	r3, r3
 8009dc6:	2bff      	cmp	r3, #255	@ 0xff
 8009dc8:	d911      	bls.n	8009dee <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	22ff      	movs	r2, #255	@ 0xff
 8009dce:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009dd4:	b2da      	uxtb	r2, r3
 8009dd6:	2380      	movs	r3, #128	@ 0x80
 8009dd8:	045c      	lsls	r4, r3, #17
 8009dda:	230a      	movs	r3, #10
 8009ddc:	18fb      	adds	r3, r7, r3
 8009dde:	8819      	ldrh	r1, [r3, #0]
 8009de0:	68f8      	ldr	r0, [r7, #12]
 8009de2:	2300      	movs	r3, #0
 8009de4:	9300      	str	r3, [sp, #0]
 8009de6:	0023      	movs	r3, r4
 8009de8:	f000 fae0 	bl	800a3ac <I2C_TransferConfig>
 8009dec:	e012      	b.n	8009e14 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009df2:	b29a      	uxth	r2, r3
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009dfc:	b2da      	uxtb	r2, r3
 8009dfe:	2380      	movs	r3, #128	@ 0x80
 8009e00:	049c      	lsls	r4, r3, #18
 8009e02:	230a      	movs	r3, #10
 8009e04:	18fb      	adds	r3, r7, r3
 8009e06:	8819      	ldrh	r1, [r3, #0]
 8009e08:	68f8      	ldr	r0, [r7, #12]
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	9300      	str	r3, [sp, #0]
 8009e0e:	0023      	movs	r3, r4
 8009e10:	f000 facc 	bl	800a3ac <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009e18:	b29b      	uxth	r3, r3
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d197      	bne.n	8009d4e <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009e1e:	697a      	ldr	r2, [r7, #20]
 8009e20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	0018      	movs	r0, r3
 8009e26:	f000 f8e7 	bl	8009ff8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009e2a:	1e03      	subs	r3, r0, #0
 8009e2c:	d001      	beq.n	8009e32 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8009e2e:	2301      	movs	r3, #1
 8009e30:	e01a      	b.n	8009e68 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	2220      	movs	r2, #32
 8009e38:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	685a      	ldr	r2, [r3, #4]
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	490b      	ldr	r1, [pc, #44]	@ (8009e74 <HAL_I2C_Master_Receive+0x20c>)
 8009e46:	400a      	ands	r2, r1
 8009e48:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	2241      	movs	r2, #65	@ 0x41
 8009e4e:	2120      	movs	r1, #32
 8009e50:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	2242      	movs	r2, #66	@ 0x42
 8009e56:	2100      	movs	r1, #0
 8009e58:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	2240      	movs	r2, #64	@ 0x40
 8009e5e:	2100      	movs	r1, #0
 8009e60:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009e62:	2300      	movs	r3, #0
 8009e64:	e000      	b.n	8009e68 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8009e66:	2302      	movs	r3, #2
  }
}
 8009e68:	0018      	movs	r0, r3
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	b007      	add	sp, #28
 8009e6e:	bd90      	pop	{r4, r7, pc}
 8009e70:	80002400 	.word	0x80002400
 8009e74:	fe00e800 	.word	0xfe00e800

08009e78 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b082      	sub	sp, #8
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	699b      	ldr	r3, [r3, #24]
 8009e86:	2202      	movs	r2, #2
 8009e88:	4013      	ands	r3, r2
 8009e8a:	2b02      	cmp	r3, #2
 8009e8c:	d103      	bne.n	8009e96 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	2200      	movs	r2, #0
 8009e94:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	699b      	ldr	r3, [r3, #24]
 8009e9c:	2201      	movs	r2, #1
 8009e9e:	4013      	ands	r3, r2
 8009ea0:	2b01      	cmp	r3, #1
 8009ea2:	d007      	beq.n	8009eb4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	699a      	ldr	r2, [r3, #24]
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	2101      	movs	r1, #1
 8009eb0:	430a      	orrs	r2, r1
 8009eb2:	619a      	str	r2, [r3, #24]
  }
}
 8009eb4:	46c0      	nop			@ (mov r8, r8)
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	b002      	add	sp, #8
 8009eba:	bd80      	pop	{r7, pc}

08009ebc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b084      	sub	sp, #16
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	60f8      	str	r0, [r7, #12]
 8009ec4:	60b9      	str	r1, [r7, #8]
 8009ec6:	603b      	str	r3, [r7, #0]
 8009ec8:	1dfb      	adds	r3, r7, #7
 8009eca:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009ecc:	e03a      	b.n	8009f44 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009ece:	69ba      	ldr	r2, [r7, #24]
 8009ed0:	6839      	ldr	r1, [r7, #0]
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	0018      	movs	r0, r3
 8009ed6:	f000 f971 	bl	800a1bc <I2C_IsErrorOccurred>
 8009eda:	1e03      	subs	r3, r0, #0
 8009edc:	d001      	beq.n	8009ee2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8009ede:	2301      	movs	r3, #1
 8009ee0:	e040      	b.n	8009f64 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009ee2:	683b      	ldr	r3, [r7, #0]
 8009ee4:	3301      	adds	r3, #1
 8009ee6:	d02d      	beq.n	8009f44 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ee8:	f7ff f840 	bl	8008f6c <HAL_GetTick>
 8009eec:	0002      	movs	r2, r0
 8009eee:	69bb      	ldr	r3, [r7, #24]
 8009ef0:	1ad3      	subs	r3, r2, r3
 8009ef2:	683a      	ldr	r2, [r7, #0]
 8009ef4:	429a      	cmp	r2, r3
 8009ef6:	d302      	bcc.n	8009efe <I2C_WaitOnFlagUntilTimeout+0x42>
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d122      	bne.n	8009f44 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	699b      	ldr	r3, [r3, #24]
 8009f04:	68ba      	ldr	r2, [r7, #8]
 8009f06:	4013      	ands	r3, r2
 8009f08:	68ba      	ldr	r2, [r7, #8]
 8009f0a:	1ad3      	subs	r3, r2, r3
 8009f0c:	425a      	negs	r2, r3
 8009f0e:	4153      	adcs	r3, r2
 8009f10:	b2db      	uxtb	r3, r3
 8009f12:	001a      	movs	r2, r3
 8009f14:	1dfb      	adds	r3, r7, #7
 8009f16:	781b      	ldrb	r3, [r3, #0]
 8009f18:	429a      	cmp	r2, r3
 8009f1a:	d113      	bne.n	8009f44 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f20:	2220      	movs	r2, #32
 8009f22:	431a      	orrs	r2, r3
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	2241      	movs	r2, #65	@ 0x41
 8009f2c:	2120      	movs	r1, #32
 8009f2e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	2242      	movs	r2, #66	@ 0x42
 8009f34:	2100      	movs	r1, #0
 8009f36:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	2240      	movs	r2, #64	@ 0x40
 8009f3c:	2100      	movs	r1, #0
 8009f3e:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8009f40:	2301      	movs	r3, #1
 8009f42:	e00f      	b.n	8009f64 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	699b      	ldr	r3, [r3, #24]
 8009f4a:	68ba      	ldr	r2, [r7, #8]
 8009f4c:	4013      	ands	r3, r2
 8009f4e:	68ba      	ldr	r2, [r7, #8]
 8009f50:	1ad3      	subs	r3, r2, r3
 8009f52:	425a      	negs	r2, r3
 8009f54:	4153      	adcs	r3, r2
 8009f56:	b2db      	uxtb	r3, r3
 8009f58:	001a      	movs	r2, r3
 8009f5a:	1dfb      	adds	r3, r7, #7
 8009f5c:	781b      	ldrb	r3, [r3, #0]
 8009f5e:	429a      	cmp	r2, r3
 8009f60:	d0b5      	beq.n	8009ece <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009f62:	2300      	movs	r3, #0
}
 8009f64:	0018      	movs	r0, r3
 8009f66:	46bd      	mov	sp, r7
 8009f68:	b004      	add	sp, #16
 8009f6a:	bd80      	pop	{r7, pc}

08009f6c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b084      	sub	sp, #16
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	60f8      	str	r0, [r7, #12]
 8009f74:	60b9      	str	r1, [r7, #8]
 8009f76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009f78:	e032      	b.n	8009fe0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009f7a:	687a      	ldr	r2, [r7, #4]
 8009f7c:	68b9      	ldr	r1, [r7, #8]
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	0018      	movs	r0, r3
 8009f82:	f000 f91b 	bl	800a1bc <I2C_IsErrorOccurred>
 8009f86:	1e03      	subs	r3, r0, #0
 8009f88:	d001      	beq.n	8009f8e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009f8a:	2301      	movs	r3, #1
 8009f8c:	e030      	b.n	8009ff0 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f8e:	68bb      	ldr	r3, [r7, #8]
 8009f90:	3301      	adds	r3, #1
 8009f92:	d025      	beq.n	8009fe0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f94:	f7fe ffea 	bl	8008f6c <HAL_GetTick>
 8009f98:	0002      	movs	r2, r0
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	1ad3      	subs	r3, r2, r3
 8009f9e:	68ba      	ldr	r2, [r7, #8]
 8009fa0:	429a      	cmp	r2, r3
 8009fa2:	d302      	bcc.n	8009faa <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d11a      	bne.n	8009fe0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	699b      	ldr	r3, [r3, #24]
 8009fb0:	2202      	movs	r2, #2
 8009fb2:	4013      	ands	r3, r2
 8009fb4:	2b02      	cmp	r3, #2
 8009fb6:	d013      	beq.n	8009fe0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009fbc:	2220      	movs	r2, #32
 8009fbe:	431a      	orrs	r2, r3
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	2241      	movs	r2, #65	@ 0x41
 8009fc8:	2120      	movs	r1, #32
 8009fca:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	2242      	movs	r2, #66	@ 0x42
 8009fd0:	2100      	movs	r1, #0
 8009fd2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	2240      	movs	r2, #64	@ 0x40
 8009fd8:	2100      	movs	r1, #0
 8009fda:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8009fdc:	2301      	movs	r3, #1
 8009fde:	e007      	b.n	8009ff0 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	699b      	ldr	r3, [r3, #24]
 8009fe6:	2202      	movs	r2, #2
 8009fe8:	4013      	ands	r3, r2
 8009fea:	2b02      	cmp	r3, #2
 8009fec:	d1c5      	bne.n	8009f7a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009fee:	2300      	movs	r3, #0
}
 8009ff0:	0018      	movs	r0, r3
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	b004      	add	sp, #16
 8009ff6:	bd80      	pop	{r7, pc}

08009ff8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b084      	sub	sp, #16
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	60f8      	str	r0, [r7, #12]
 800a000:	60b9      	str	r1, [r7, #8]
 800a002:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a004:	e02f      	b.n	800a066 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a006:	687a      	ldr	r2, [r7, #4]
 800a008:	68b9      	ldr	r1, [r7, #8]
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	0018      	movs	r0, r3
 800a00e:	f000 f8d5 	bl	800a1bc <I2C_IsErrorOccurred>
 800a012:	1e03      	subs	r3, r0, #0
 800a014:	d001      	beq.n	800a01a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a016:	2301      	movs	r3, #1
 800a018:	e02d      	b.n	800a076 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a01a:	f7fe ffa7 	bl	8008f6c <HAL_GetTick>
 800a01e:	0002      	movs	r2, r0
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	1ad3      	subs	r3, r2, r3
 800a024:	68ba      	ldr	r2, [r7, #8]
 800a026:	429a      	cmp	r2, r3
 800a028:	d302      	bcc.n	800a030 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800a02a:	68bb      	ldr	r3, [r7, #8]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d11a      	bne.n	800a066 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	699b      	ldr	r3, [r3, #24]
 800a036:	2220      	movs	r2, #32
 800a038:	4013      	ands	r3, r2
 800a03a:	2b20      	cmp	r3, #32
 800a03c:	d013      	beq.n	800a066 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a042:	2220      	movs	r2, #32
 800a044:	431a      	orrs	r2, r3
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	2241      	movs	r2, #65	@ 0x41
 800a04e:	2120      	movs	r1, #32
 800a050:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	2242      	movs	r2, #66	@ 0x42
 800a056:	2100      	movs	r1, #0
 800a058:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	2240      	movs	r2, #64	@ 0x40
 800a05e:	2100      	movs	r1, #0
 800a060:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800a062:	2301      	movs	r3, #1
 800a064:	e007      	b.n	800a076 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	699b      	ldr	r3, [r3, #24]
 800a06c:	2220      	movs	r2, #32
 800a06e:	4013      	ands	r3, r2
 800a070:	2b20      	cmp	r3, #32
 800a072:	d1c8      	bne.n	800a006 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a074:	2300      	movs	r3, #0
}
 800a076:	0018      	movs	r0, r3
 800a078:	46bd      	mov	sp, r7
 800a07a:	b004      	add	sp, #16
 800a07c:	bd80      	pop	{r7, pc}
	...

0800a080 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b086      	sub	sp, #24
 800a084:	af00      	add	r7, sp, #0
 800a086:	60f8      	str	r0, [r7, #12]
 800a088:	60b9      	str	r1, [r7, #8]
 800a08a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a08c:	2317      	movs	r3, #23
 800a08e:	18fb      	adds	r3, r7, r3
 800a090:	2200      	movs	r2, #0
 800a092:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800a094:	e07b      	b.n	800a18e <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a096:	687a      	ldr	r2, [r7, #4]
 800a098:	68b9      	ldr	r1, [r7, #8]
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	0018      	movs	r0, r3
 800a09e:	f000 f88d 	bl	800a1bc <I2C_IsErrorOccurred>
 800a0a2:	1e03      	subs	r3, r0, #0
 800a0a4:	d003      	beq.n	800a0ae <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 800a0a6:	2317      	movs	r3, #23
 800a0a8:	18fb      	adds	r3, r7, r3
 800a0aa:	2201      	movs	r2, #1
 800a0ac:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	699b      	ldr	r3, [r3, #24]
 800a0b4:	2220      	movs	r2, #32
 800a0b6:	4013      	ands	r3, r2
 800a0b8:	2b20      	cmp	r3, #32
 800a0ba:	d140      	bne.n	800a13e <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 800a0bc:	2117      	movs	r1, #23
 800a0be:	187b      	adds	r3, r7, r1
 800a0c0:	781b      	ldrb	r3, [r3, #0]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d13b      	bne.n	800a13e <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	699b      	ldr	r3, [r3, #24]
 800a0cc:	2204      	movs	r2, #4
 800a0ce:	4013      	ands	r3, r2
 800a0d0:	2b04      	cmp	r3, #4
 800a0d2:	d106      	bne.n	800a0e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d002      	beq.n	800a0e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800a0dc:	187b      	adds	r3, r7, r1
 800a0de:	2200      	movs	r2, #0
 800a0e0:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	699b      	ldr	r3, [r3, #24]
 800a0e8:	2210      	movs	r2, #16
 800a0ea:	4013      	ands	r3, r2
 800a0ec:	2b10      	cmp	r3, #16
 800a0ee:	d123      	bne.n	800a138 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	2210      	movs	r2, #16
 800a0f6:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	2204      	movs	r2, #4
 800a0fc:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	2220      	movs	r2, #32
 800a104:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	685a      	ldr	r2, [r3, #4]
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	4929      	ldr	r1, [pc, #164]	@ (800a1b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 800a112:	400a      	ands	r2, r1
 800a114:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	2241      	movs	r2, #65	@ 0x41
 800a11a:	2120      	movs	r1, #32
 800a11c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	2242      	movs	r2, #66	@ 0x42
 800a122:	2100      	movs	r1, #0
 800a124:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	2240      	movs	r2, #64	@ 0x40
 800a12a:	2100      	movs	r1, #0
 800a12c:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 800a12e:	2317      	movs	r3, #23
 800a130:	18fb      	adds	r3, r7, r3
 800a132:	2201      	movs	r2, #1
 800a134:	701a      	strb	r2, [r3, #0]
 800a136:	e002      	b.n	800a13e <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	2200      	movs	r2, #0
 800a13c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800a13e:	f7fe ff15 	bl	8008f6c <HAL_GetTick>
 800a142:	0002      	movs	r2, r0
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	1ad3      	subs	r3, r2, r3
 800a148:	68ba      	ldr	r2, [r7, #8]
 800a14a:	429a      	cmp	r2, r3
 800a14c:	d302      	bcc.n	800a154 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 800a14e:	68bb      	ldr	r3, [r7, #8]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d11c      	bne.n	800a18e <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 800a154:	2017      	movs	r0, #23
 800a156:	183b      	adds	r3, r7, r0
 800a158:	781b      	ldrb	r3, [r3, #0]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d117      	bne.n	800a18e <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	699b      	ldr	r3, [r3, #24]
 800a164:	2204      	movs	r2, #4
 800a166:	4013      	ands	r3, r2
 800a168:	2b04      	cmp	r3, #4
 800a16a:	d010      	beq.n	800a18e <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a170:	2220      	movs	r2, #32
 800a172:	431a      	orrs	r2, r3
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	2241      	movs	r2, #65	@ 0x41
 800a17c:	2120      	movs	r1, #32
 800a17e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	2240      	movs	r2, #64	@ 0x40
 800a184:	2100      	movs	r1, #0
 800a186:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 800a188:	183b      	adds	r3, r7, r0
 800a18a:	2201      	movs	r2, #1
 800a18c:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	699b      	ldr	r3, [r3, #24]
 800a194:	2204      	movs	r2, #4
 800a196:	4013      	ands	r3, r2
 800a198:	2b04      	cmp	r3, #4
 800a19a:	d005      	beq.n	800a1a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 800a19c:	2317      	movs	r3, #23
 800a19e:	18fb      	adds	r3, r7, r3
 800a1a0:	781b      	ldrb	r3, [r3, #0]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d100      	bne.n	800a1a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 800a1a6:	e776      	b.n	800a096 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 800a1a8:	2317      	movs	r3, #23
 800a1aa:	18fb      	adds	r3, r7, r3
 800a1ac:	781b      	ldrb	r3, [r3, #0]
}
 800a1ae:	0018      	movs	r0, r3
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	b006      	add	sp, #24
 800a1b4:	bd80      	pop	{r7, pc}
 800a1b6:	46c0      	nop			@ (mov r8, r8)
 800a1b8:	fe00e800 	.word	0xfe00e800

0800a1bc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b08a      	sub	sp, #40	@ 0x28
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	60f8      	str	r0, [r7, #12]
 800a1c4:	60b9      	str	r1, [r7, #8]
 800a1c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a1c8:	2327      	movs	r3, #39	@ 0x27
 800a1ca:	18fb      	adds	r3, r7, r3
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	699b      	ldr	r3, [r3, #24]
 800a1d6:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800a1d8:	2300      	movs	r3, #0
 800a1da:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800a1e0:	69bb      	ldr	r3, [r7, #24]
 800a1e2:	2210      	movs	r2, #16
 800a1e4:	4013      	ands	r3, r2
 800a1e6:	d100      	bne.n	800a1ea <I2C_IsErrorOccurred+0x2e>
 800a1e8:	e079      	b.n	800a2de <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	2210      	movs	r2, #16
 800a1f0:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a1f2:	e057      	b.n	800a2a4 <I2C_IsErrorOccurred+0xe8>
 800a1f4:	2227      	movs	r2, #39	@ 0x27
 800a1f6:	18bb      	adds	r3, r7, r2
 800a1f8:	18ba      	adds	r2, r7, r2
 800a1fa:	7812      	ldrb	r2, [r2, #0]
 800a1fc:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800a1fe:	68bb      	ldr	r3, [r7, #8]
 800a200:	3301      	adds	r3, #1
 800a202:	d04f      	beq.n	800a2a4 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a204:	f7fe feb2 	bl	8008f6c <HAL_GetTick>
 800a208:	0002      	movs	r2, r0
 800a20a:	69fb      	ldr	r3, [r7, #28]
 800a20c:	1ad3      	subs	r3, r2, r3
 800a20e:	68ba      	ldr	r2, [r7, #8]
 800a210:	429a      	cmp	r2, r3
 800a212:	d302      	bcc.n	800a21a <I2C_IsErrorOccurred+0x5e>
 800a214:	68bb      	ldr	r3, [r7, #8]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d144      	bne.n	800a2a4 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	685a      	ldr	r2, [r3, #4]
 800a220:	2380      	movs	r3, #128	@ 0x80
 800a222:	01db      	lsls	r3, r3, #7
 800a224:	4013      	ands	r3, r2
 800a226:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800a228:	2013      	movs	r0, #19
 800a22a:	183b      	adds	r3, r7, r0
 800a22c:	68fa      	ldr	r2, [r7, #12]
 800a22e:	2142      	movs	r1, #66	@ 0x42
 800a230:	5c52      	ldrb	r2, [r2, r1]
 800a232:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	699a      	ldr	r2, [r3, #24]
 800a23a:	2380      	movs	r3, #128	@ 0x80
 800a23c:	021b      	lsls	r3, r3, #8
 800a23e:	401a      	ands	r2, r3
 800a240:	2380      	movs	r3, #128	@ 0x80
 800a242:	021b      	lsls	r3, r3, #8
 800a244:	429a      	cmp	r2, r3
 800a246:	d126      	bne.n	800a296 <I2C_IsErrorOccurred+0xda>
 800a248:	697a      	ldr	r2, [r7, #20]
 800a24a:	2380      	movs	r3, #128	@ 0x80
 800a24c:	01db      	lsls	r3, r3, #7
 800a24e:	429a      	cmp	r2, r3
 800a250:	d021      	beq.n	800a296 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 800a252:	183b      	adds	r3, r7, r0
 800a254:	781b      	ldrb	r3, [r3, #0]
 800a256:	2b20      	cmp	r3, #32
 800a258:	d01d      	beq.n	800a296 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	685a      	ldr	r2, [r3, #4]
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	2180      	movs	r1, #128	@ 0x80
 800a266:	01c9      	lsls	r1, r1, #7
 800a268:	430a      	orrs	r2, r1
 800a26a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800a26c:	f7fe fe7e 	bl	8008f6c <HAL_GetTick>
 800a270:	0003      	movs	r3, r0
 800a272:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a274:	e00f      	b.n	800a296 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800a276:	f7fe fe79 	bl	8008f6c <HAL_GetTick>
 800a27a:	0002      	movs	r2, r0
 800a27c:	69fb      	ldr	r3, [r7, #28]
 800a27e:	1ad3      	subs	r3, r2, r3
 800a280:	2b19      	cmp	r3, #25
 800a282:	d908      	bls.n	800a296 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800a284:	6a3b      	ldr	r3, [r7, #32]
 800a286:	2220      	movs	r2, #32
 800a288:	4313      	orrs	r3, r2
 800a28a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800a28c:	2327      	movs	r3, #39	@ 0x27
 800a28e:	18fb      	adds	r3, r7, r3
 800a290:	2201      	movs	r2, #1
 800a292:	701a      	strb	r2, [r3, #0]

              break;
 800a294:	e006      	b.n	800a2a4 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	699b      	ldr	r3, [r3, #24]
 800a29c:	2220      	movs	r2, #32
 800a29e:	4013      	ands	r3, r2
 800a2a0:	2b20      	cmp	r3, #32
 800a2a2:	d1e8      	bne.n	800a276 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	699b      	ldr	r3, [r3, #24]
 800a2aa:	2220      	movs	r2, #32
 800a2ac:	4013      	ands	r3, r2
 800a2ae:	2b20      	cmp	r3, #32
 800a2b0:	d004      	beq.n	800a2bc <I2C_IsErrorOccurred+0x100>
 800a2b2:	2327      	movs	r3, #39	@ 0x27
 800a2b4:	18fb      	adds	r3, r7, r3
 800a2b6:	781b      	ldrb	r3, [r3, #0]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d09b      	beq.n	800a1f4 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800a2bc:	2327      	movs	r3, #39	@ 0x27
 800a2be:	18fb      	adds	r3, r7, r3
 800a2c0:	781b      	ldrb	r3, [r3, #0]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d103      	bne.n	800a2ce <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	2220      	movs	r2, #32
 800a2cc:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800a2ce:	6a3b      	ldr	r3, [r7, #32]
 800a2d0:	2204      	movs	r2, #4
 800a2d2:	4313      	orrs	r3, r2
 800a2d4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800a2d6:	2327      	movs	r3, #39	@ 0x27
 800a2d8:	18fb      	adds	r3, r7, r3
 800a2da:	2201      	movs	r2, #1
 800a2dc:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	699b      	ldr	r3, [r3, #24]
 800a2e4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800a2e6:	69ba      	ldr	r2, [r7, #24]
 800a2e8:	2380      	movs	r3, #128	@ 0x80
 800a2ea:	005b      	lsls	r3, r3, #1
 800a2ec:	4013      	ands	r3, r2
 800a2ee:	d00c      	beq.n	800a30a <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800a2f0:	6a3b      	ldr	r3, [r7, #32]
 800a2f2:	2201      	movs	r2, #1
 800a2f4:	4313      	orrs	r3, r2
 800a2f6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	2280      	movs	r2, #128	@ 0x80
 800a2fe:	0052      	lsls	r2, r2, #1
 800a300:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a302:	2327      	movs	r3, #39	@ 0x27
 800a304:	18fb      	adds	r3, r7, r3
 800a306:	2201      	movs	r2, #1
 800a308:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800a30a:	69ba      	ldr	r2, [r7, #24]
 800a30c:	2380      	movs	r3, #128	@ 0x80
 800a30e:	00db      	lsls	r3, r3, #3
 800a310:	4013      	ands	r3, r2
 800a312:	d00c      	beq.n	800a32e <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800a314:	6a3b      	ldr	r3, [r7, #32]
 800a316:	2208      	movs	r2, #8
 800a318:	4313      	orrs	r3, r2
 800a31a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	2280      	movs	r2, #128	@ 0x80
 800a322:	00d2      	lsls	r2, r2, #3
 800a324:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a326:	2327      	movs	r3, #39	@ 0x27
 800a328:	18fb      	adds	r3, r7, r3
 800a32a:	2201      	movs	r2, #1
 800a32c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800a32e:	69ba      	ldr	r2, [r7, #24]
 800a330:	2380      	movs	r3, #128	@ 0x80
 800a332:	009b      	lsls	r3, r3, #2
 800a334:	4013      	ands	r3, r2
 800a336:	d00c      	beq.n	800a352 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800a338:	6a3b      	ldr	r3, [r7, #32]
 800a33a:	2202      	movs	r2, #2
 800a33c:	4313      	orrs	r3, r2
 800a33e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	2280      	movs	r2, #128	@ 0x80
 800a346:	0092      	lsls	r2, r2, #2
 800a348:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a34a:	2327      	movs	r3, #39	@ 0x27
 800a34c:	18fb      	adds	r3, r7, r3
 800a34e:	2201      	movs	r2, #1
 800a350:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800a352:	2327      	movs	r3, #39	@ 0x27
 800a354:	18fb      	adds	r3, r7, r3
 800a356:	781b      	ldrb	r3, [r3, #0]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d01d      	beq.n	800a398 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	0018      	movs	r0, r3
 800a360:	f7ff fd8a 	bl	8009e78 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	685a      	ldr	r2, [r3, #4]
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	490e      	ldr	r1, [pc, #56]	@ (800a3a8 <I2C_IsErrorOccurred+0x1ec>)
 800a370:	400a      	ands	r2, r1
 800a372:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a378:	6a3b      	ldr	r3, [r7, #32]
 800a37a:	431a      	orrs	r2, r3
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	2241      	movs	r2, #65	@ 0x41
 800a384:	2120      	movs	r1, #32
 800a386:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	2242      	movs	r2, #66	@ 0x42
 800a38c:	2100      	movs	r1, #0
 800a38e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	2240      	movs	r2, #64	@ 0x40
 800a394:	2100      	movs	r1, #0
 800a396:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800a398:	2327      	movs	r3, #39	@ 0x27
 800a39a:	18fb      	adds	r3, r7, r3
 800a39c:	781b      	ldrb	r3, [r3, #0]
}
 800a39e:	0018      	movs	r0, r3
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	b00a      	add	sp, #40	@ 0x28
 800a3a4:	bd80      	pop	{r7, pc}
 800a3a6:	46c0      	nop			@ (mov r8, r8)
 800a3a8:	fe00e800 	.word	0xfe00e800

0800a3ac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800a3ac:	b590      	push	{r4, r7, lr}
 800a3ae:	b087      	sub	sp, #28
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	60f8      	str	r0, [r7, #12]
 800a3b4:	0008      	movs	r0, r1
 800a3b6:	0011      	movs	r1, r2
 800a3b8:	607b      	str	r3, [r7, #4]
 800a3ba:	240a      	movs	r4, #10
 800a3bc:	193b      	adds	r3, r7, r4
 800a3be:	1c02      	adds	r2, r0, #0
 800a3c0:	801a      	strh	r2, [r3, #0]
 800a3c2:	2009      	movs	r0, #9
 800a3c4:	183b      	adds	r3, r7, r0
 800a3c6:	1c0a      	adds	r2, r1, #0
 800a3c8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a3ca:	193b      	adds	r3, r7, r4
 800a3cc:	881b      	ldrh	r3, [r3, #0]
 800a3ce:	059b      	lsls	r3, r3, #22
 800a3d0:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a3d2:	183b      	adds	r3, r7, r0
 800a3d4:	781b      	ldrb	r3, [r3, #0]
 800a3d6:	0419      	lsls	r1, r3, #16
 800a3d8:	23ff      	movs	r3, #255	@ 0xff
 800a3da:	041b      	lsls	r3, r3, #16
 800a3dc:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a3de:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a3e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3e6:	4313      	orrs	r3, r2
 800a3e8:	005b      	lsls	r3, r3, #1
 800a3ea:	085b      	lsrs	r3, r3, #1
 800a3ec:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	685b      	ldr	r3, [r3, #4]
 800a3f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a3f6:	0d51      	lsrs	r1, r2, #21
 800a3f8:	2280      	movs	r2, #128	@ 0x80
 800a3fa:	00d2      	lsls	r2, r2, #3
 800a3fc:	400a      	ands	r2, r1
 800a3fe:	4907      	ldr	r1, [pc, #28]	@ (800a41c <I2C_TransferConfig+0x70>)
 800a400:	430a      	orrs	r2, r1
 800a402:	43d2      	mvns	r2, r2
 800a404:	401a      	ands	r2, r3
 800a406:	0011      	movs	r1, r2
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	697a      	ldr	r2, [r7, #20]
 800a40e:	430a      	orrs	r2, r1
 800a410:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800a412:	46c0      	nop			@ (mov r8, r8)
 800a414:	46bd      	mov	sp, r7
 800a416:	b007      	add	sp, #28
 800a418:	bd90      	pop	{r4, r7, pc}
 800a41a:	46c0      	nop			@ (mov r8, r8)
 800a41c:	03ff63ff 	.word	0x03ff63ff

0800a420 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b082      	sub	sp, #8
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
 800a428:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	2241      	movs	r2, #65	@ 0x41
 800a42e:	5c9b      	ldrb	r3, [r3, r2]
 800a430:	b2db      	uxtb	r3, r3
 800a432:	2b20      	cmp	r3, #32
 800a434:	d138      	bne.n	800a4a8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	2240      	movs	r2, #64	@ 0x40
 800a43a:	5c9b      	ldrb	r3, [r3, r2]
 800a43c:	2b01      	cmp	r3, #1
 800a43e:	d101      	bne.n	800a444 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a440:	2302      	movs	r3, #2
 800a442:	e032      	b.n	800a4aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2240      	movs	r2, #64	@ 0x40
 800a448:	2101      	movs	r1, #1
 800a44a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	2241      	movs	r2, #65	@ 0x41
 800a450:	2124      	movs	r1, #36	@ 0x24
 800a452:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	681a      	ldr	r2, [r3, #0]
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	2101      	movs	r1, #1
 800a460:	438a      	bics	r2, r1
 800a462:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	681a      	ldr	r2, [r3, #0]
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	4911      	ldr	r1, [pc, #68]	@ (800a4b4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800a470:	400a      	ands	r2, r1
 800a472:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	6819      	ldr	r1, [r3, #0]
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	683a      	ldr	r2, [r7, #0]
 800a480:	430a      	orrs	r2, r1
 800a482:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	681a      	ldr	r2, [r3, #0]
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	2101      	movs	r1, #1
 800a490:	430a      	orrs	r2, r1
 800a492:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2241      	movs	r2, #65	@ 0x41
 800a498:	2120      	movs	r1, #32
 800a49a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2240      	movs	r2, #64	@ 0x40
 800a4a0:	2100      	movs	r1, #0
 800a4a2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	e000      	b.n	800a4aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a4a8:	2302      	movs	r3, #2
  }
}
 800a4aa:	0018      	movs	r0, r3
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	b002      	add	sp, #8
 800a4b0:	bd80      	pop	{r7, pc}
 800a4b2:	46c0      	nop			@ (mov r8, r8)
 800a4b4:	ffffefff 	.word	0xffffefff

0800a4b8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b084      	sub	sp, #16
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
 800a4c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	2241      	movs	r2, #65	@ 0x41
 800a4c6:	5c9b      	ldrb	r3, [r3, r2]
 800a4c8:	b2db      	uxtb	r3, r3
 800a4ca:	2b20      	cmp	r3, #32
 800a4cc:	d139      	bne.n	800a542 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	2240      	movs	r2, #64	@ 0x40
 800a4d2:	5c9b      	ldrb	r3, [r3, r2]
 800a4d4:	2b01      	cmp	r3, #1
 800a4d6:	d101      	bne.n	800a4dc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a4d8:	2302      	movs	r3, #2
 800a4da:	e033      	b.n	800a544 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2240      	movs	r2, #64	@ 0x40
 800a4e0:	2101      	movs	r1, #1
 800a4e2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2241      	movs	r2, #65	@ 0x41
 800a4e8:	2124      	movs	r1, #36	@ 0x24
 800a4ea:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	681a      	ldr	r2, [r3, #0]
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	2101      	movs	r1, #1
 800a4f8:	438a      	bics	r2, r1
 800a4fa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	4a11      	ldr	r2, [pc, #68]	@ (800a54c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800a508:	4013      	ands	r3, r2
 800a50a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a50c:	683b      	ldr	r3, [r7, #0]
 800a50e:	021b      	lsls	r3, r3, #8
 800a510:	68fa      	ldr	r2, [r7, #12]
 800a512:	4313      	orrs	r3, r2
 800a514:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	68fa      	ldr	r2, [r7, #12]
 800a51c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	681a      	ldr	r2, [r3, #0]
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	2101      	movs	r1, #1
 800a52a:	430a      	orrs	r2, r1
 800a52c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2241      	movs	r2, #65	@ 0x41
 800a532:	2120      	movs	r1, #32
 800a534:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	2240      	movs	r2, #64	@ 0x40
 800a53a:	2100      	movs	r1, #0
 800a53c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800a53e:	2300      	movs	r3, #0
 800a540:	e000      	b.n	800a544 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a542:	2302      	movs	r3, #2
  }
}
 800a544:	0018      	movs	r0, r3
 800a546:	46bd      	mov	sp, r7
 800a548:	b004      	add	sp, #16
 800a54a:	bd80      	pop	{r7, pc}
 800a54c:	fffff0ff 	.word	0xfffff0ff

0800a550 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b084      	sub	sp, #16
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800a558:	4b19      	ldr	r3, [pc, #100]	@ (800a5c0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	4a19      	ldr	r2, [pc, #100]	@ (800a5c4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800a55e:	4013      	ands	r3, r2
 800a560:	0019      	movs	r1, r3
 800a562:	4b17      	ldr	r3, [pc, #92]	@ (800a5c0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800a564:	687a      	ldr	r2, [r7, #4]
 800a566:	430a      	orrs	r2, r1
 800a568:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a56a:	687a      	ldr	r2, [r7, #4]
 800a56c:	2380      	movs	r3, #128	@ 0x80
 800a56e:	009b      	lsls	r3, r3, #2
 800a570:	429a      	cmp	r2, r3
 800a572:	d11f      	bne.n	800a5b4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800a574:	4b14      	ldr	r3, [pc, #80]	@ (800a5c8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800a576:	681a      	ldr	r2, [r3, #0]
 800a578:	0013      	movs	r3, r2
 800a57a:	005b      	lsls	r3, r3, #1
 800a57c:	189b      	adds	r3, r3, r2
 800a57e:	005b      	lsls	r3, r3, #1
 800a580:	4912      	ldr	r1, [pc, #72]	@ (800a5cc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800a582:	0018      	movs	r0, r3
 800a584:	f7f5 fde6 	bl	8000154 <__udivsi3>
 800a588:	0003      	movs	r3, r0
 800a58a:	3301      	adds	r3, #1
 800a58c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a58e:	e008      	b.n	800a5a2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d003      	beq.n	800a59e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	3b01      	subs	r3, #1
 800a59a:	60fb      	str	r3, [r7, #12]
 800a59c:	e001      	b.n	800a5a2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800a59e:	2303      	movs	r3, #3
 800a5a0:	e009      	b.n	800a5b6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a5a2:	4b07      	ldr	r3, [pc, #28]	@ (800a5c0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800a5a4:	695a      	ldr	r2, [r3, #20]
 800a5a6:	2380      	movs	r3, #128	@ 0x80
 800a5a8:	00db      	lsls	r3, r3, #3
 800a5aa:	401a      	ands	r2, r3
 800a5ac:	2380      	movs	r3, #128	@ 0x80
 800a5ae:	00db      	lsls	r3, r3, #3
 800a5b0:	429a      	cmp	r2, r3
 800a5b2:	d0ed      	beq.n	800a590 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800a5b4:	2300      	movs	r3, #0
}
 800a5b6:	0018      	movs	r0, r3
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	b004      	add	sp, #16
 800a5bc:	bd80      	pop	{r7, pc}
 800a5be:	46c0      	nop			@ (mov r8, r8)
 800a5c0:	40007000 	.word	0x40007000
 800a5c4:	fffff9ff 	.word	0xfffff9ff
 800a5c8:	20000004 	.word	0x20000004
 800a5cc:	000f4240 	.word	0x000f4240

0800a5d0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800a5d4:	4b03      	ldr	r3, [pc, #12]	@ (800a5e4 <LL_RCC_GetAPB1Prescaler+0x14>)
 800a5d6:	689a      	ldr	r2, [r3, #8]
 800a5d8:	23e0      	movs	r3, #224	@ 0xe0
 800a5da:	01db      	lsls	r3, r3, #7
 800a5dc:	4013      	ands	r3, r2
}
 800a5de:	0018      	movs	r0, r3
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	bd80      	pop	{r7, pc}
 800a5e4:	40021000 	.word	0x40021000

0800a5e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b088      	sub	sp, #32
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d102      	bne.n	800a5fc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a5f6:	2301      	movs	r3, #1
 800a5f8:	f000 fb50 	bl	800ac9c <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	2201      	movs	r2, #1
 800a602:	4013      	ands	r3, r2
 800a604:	d100      	bne.n	800a608 <HAL_RCC_OscConfig+0x20>
 800a606:	e07c      	b.n	800a702 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a608:	4bc3      	ldr	r3, [pc, #780]	@ (800a918 <HAL_RCC_OscConfig+0x330>)
 800a60a:	689b      	ldr	r3, [r3, #8]
 800a60c:	2238      	movs	r2, #56	@ 0x38
 800a60e:	4013      	ands	r3, r2
 800a610:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a612:	4bc1      	ldr	r3, [pc, #772]	@ (800a918 <HAL_RCC_OscConfig+0x330>)
 800a614:	68db      	ldr	r3, [r3, #12]
 800a616:	2203      	movs	r2, #3
 800a618:	4013      	ands	r3, r2
 800a61a:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800a61c:	69bb      	ldr	r3, [r7, #24]
 800a61e:	2b10      	cmp	r3, #16
 800a620:	d102      	bne.n	800a628 <HAL_RCC_OscConfig+0x40>
 800a622:	697b      	ldr	r3, [r7, #20]
 800a624:	2b03      	cmp	r3, #3
 800a626:	d002      	beq.n	800a62e <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800a628:	69bb      	ldr	r3, [r7, #24]
 800a62a:	2b08      	cmp	r3, #8
 800a62c:	d10b      	bne.n	800a646 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a62e:	4bba      	ldr	r3, [pc, #744]	@ (800a918 <HAL_RCC_OscConfig+0x330>)
 800a630:	681a      	ldr	r2, [r3, #0]
 800a632:	2380      	movs	r3, #128	@ 0x80
 800a634:	029b      	lsls	r3, r3, #10
 800a636:	4013      	ands	r3, r2
 800a638:	d062      	beq.n	800a700 <HAL_RCC_OscConfig+0x118>
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	685b      	ldr	r3, [r3, #4]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d15e      	bne.n	800a700 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 800a642:	2301      	movs	r3, #1
 800a644:	e32a      	b.n	800ac9c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	685a      	ldr	r2, [r3, #4]
 800a64a:	2380      	movs	r3, #128	@ 0x80
 800a64c:	025b      	lsls	r3, r3, #9
 800a64e:	429a      	cmp	r2, r3
 800a650:	d107      	bne.n	800a662 <HAL_RCC_OscConfig+0x7a>
 800a652:	4bb1      	ldr	r3, [pc, #708]	@ (800a918 <HAL_RCC_OscConfig+0x330>)
 800a654:	681a      	ldr	r2, [r3, #0]
 800a656:	4bb0      	ldr	r3, [pc, #704]	@ (800a918 <HAL_RCC_OscConfig+0x330>)
 800a658:	2180      	movs	r1, #128	@ 0x80
 800a65a:	0249      	lsls	r1, r1, #9
 800a65c:	430a      	orrs	r2, r1
 800a65e:	601a      	str	r2, [r3, #0]
 800a660:	e020      	b.n	800a6a4 <HAL_RCC_OscConfig+0xbc>
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	685a      	ldr	r2, [r3, #4]
 800a666:	23a0      	movs	r3, #160	@ 0xa0
 800a668:	02db      	lsls	r3, r3, #11
 800a66a:	429a      	cmp	r2, r3
 800a66c:	d10e      	bne.n	800a68c <HAL_RCC_OscConfig+0xa4>
 800a66e:	4baa      	ldr	r3, [pc, #680]	@ (800a918 <HAL_RCC_OscConfig+0x330>)
 800a670:	681a      	ldr	r2, [r3, #0]
 800a672:	4ba9      	ldr	r3, [pc, #676]	@ (800a918 <HAL_RCC_OscConfig+0x330>)
 800a674:	2180      	movs	r1, #128	@ 0x80
 800a676:	02c9      	lsls	r1, r1, #11
 800a678:	430a      	orrs	r2, r1
 800a67a:	601a      	str	r2, [r3, #0]
 800a67c:	4ba6      	ldr	r3, [pc, #664]	@ (800a918 <HAL_RCC_OscConfig+0x330>)
 800a67e:	681a      	ldr	r2, [r3, #0]
 800a680:	4ba5      	ldr	r3, [pc, #660]	@ (800a918 <HAL_RCC_OscConfig+0x330>)
 800a682:	2180      	movs	r1, #128	@ 0x80
 800a684:	0249      	lsls	r1, r1, #9
 800a686:	430a      	orrs	r2, r1
 800a688:	601a      	str	r2, [r3, #0]
 800a68a:	e00b      	b.n	800a6a4 <HAL_RCC_OscConfig+0xbc>
 800a68c:	4ba2      	ldr	r3, [pc, #648]	@ (800a918 <HAL_RCC_OscConfig+0x330>)
 800a68e:	681a      	ldr	r2, [r3, #0]
 800a690:	4ba1      	ldr	r3, [pc, #644]	@ (800a918 <HAL_RCC_OscConfig+0x330>)
 800a692:	49a2      	ldr	r1, [pc, #648]	@ (800a91c <HAL_RCC_OscConfig+0x334>)
 800a694:	400a      	ands	r2, r1
 800a696:	601a      	str	r2, [r3, #0]
 800a698:	4b9f      	ldr	r3, [pc, #636]	@ (800a918 <HAL_RCC_OscConfig+0x330>)
 800a69a:	681a      	ldr	r2, [r3, #0]
 800a69c:	4b9e      	ldr	r3, [pc, #632]	@ (800a918 <HAL_RCC_OscConfig+0x330>)
 800a69e:	49a0      	ldr	r1, [pc, #640]	@ (800a920 <HAL_RCC_OscConfig+0x338>)
 800a6a0:	400a      	ands	r2, r1
 800a6a2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	685b      	ldr	r3, [r3, #4]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d014      	beq.n	800a6d6 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6ac:	f7fe fc5e 	bl	8008f6c <HAL_GetTick>
 800a6b0:	0003      	movs	r3, r0
 800a6b2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a6b4:	e008      	b.n	800a6c8 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a6b6:	f7fe fc59 	bl	8008f6c <HAL_GetTick>
 800a6ba:	0002      	movs	r2, r0
 800a6bc:	693b      	ldr	r3, [r7, #16]
 800a6be:	1ad3      	subs	r3, r2, r3
 800a6c0:	2b64      	cmp	r3, #100	@ 0x64
 800a6c2:	d901      	bls.n	800a6c8 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 800a6c4:	2303      	movs	r3, #3
 800a6c6:	e2e9      	b.n	800ac9c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a6c8:	4b93      	ldr	r3, [pc, #588]	@ (800a918 <HAL_RCC_OscConfig+0x330>)
 800a6ca:	681a      	ldr	r2, [r3, #0]
 800a6cc:	2380      	movs	r3, #128	@ 0x80
 800a6ce:	029b      	lsls	r3, r3, #10
 800a6d0:	4013      	ands	r3, r2
 800a6d2:	d0f0      	beq.n	800a6b6 <HAL_RCC_OscConfig+0xce>
 800a6d4:	e015      	b.n	800a702 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6d6:	f7fe fc49 	bl	8008f6c <HAL_GetTick>
 800a6da:	0003      	movs	r3, r0
 800a6dc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a6de:	e008      	b.n	800a6f2 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a6e0:	f7fe fc44 	bl	8008f6c <HAL_GetTick>
 800a6e4:	0002      	movs	r2, r0
 800a6e6:	693b      	ldr	r3, [r7, #16]
 800a6e8:	1ad3      	subs	r3, r2, r3
 800a6ea:	2b64      	cmp	r3, #100	@ 0x64
 800a6ec:	d901      	bls.n	800a6f2 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800a6ee:	2303      	movs	r3, #3
 800a6f0:	e2d4      	b.n	800ac9c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a6f2:	4b89      	ldr	r3, [pc, #548]	@ (800a918 <HAL_RCC_OscConfig+0x330>)
 800a6f4:	681a      	ldr	r2, [r3, #0]
 800a6f6:	2380      	movs	r3, #128	@ 0x80
 800a6f8:	029b      	lsls	r3, r3, #10
 800a6fa:	4013      	ands	r3, r2
 800a6fc:	d1f0      	bne.n	800a6e0 <HAL_RCC_OscConfig+0xf8>
 800a6fe:	e000      	b.n	800a702 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a700:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	2202      	movs	r2, #2
 800a708:	4013      	ands	r3, r2
 800a70a:	d100      	bne.n	800a70e <HAL_RCC_OscConfig+0x126>
 800a70c:	e099      	b.n	800a842 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a70e:	4b82      	ldr	r3, [pc, #520]	@ (800a918 <HAL_RCC_OscConfig+0x330>)
 800a710:	689b      	ldr	r3, [r3, #8]
 800a712:	2238      	movs	r2, #56	@ 0x38
 800a714:	4013      	ands	r3, r2
 800a716:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a718:	4b7f      	ldr	r3, [pc, #508]	@ (800a918 <HAL_RCC_OscConfig+0x330>)
 800a71a:	68db      	ldr	r3, [r3, #12]
 800a71c:	2203      	movs	r2, #3
 800a71e:	4013      	ands	r3, r2
 800a720:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800a722:	69bb      	ldr	r3, [r7, #24]
 800a724:	2b10      	cmp	r3, #16
 800a726:	d102      	bne.n	800a72e <HAL_RCC_OscConfig+0x146>
 800a728:	697b      	ldr	r3, [r7, #20]
 800a72a:	2b02      	cmp	r3, #2
 800a72c:	d002      	beq.n	800a734 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800a72e:	69bb      	ldr	r3, [r7, #24]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d135      	bne.n	800a7a0 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a734:	4b78      	ldr	r3, [pc, #480]	@ (800a918 <HAL_RCC_OscConfig+0x330>)
 800a736:	681a      	ldr	r2, [r3, #0]
 800a738:	2380      	movs	r3, #128	@ 0x80
 800a73a:	00db      	lsls	r3, r3, #3
 800a73c:	4013      	ands	r3, r2
 800a73e:	d005      	beq.n	800a74c <HAL_RCC_OscConfig+0x164>
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	68db      	ldr	r3, [r3, #12]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d101      	bne.n	800a74c <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 800a748:	2301      	movs	r3, #1
 800a74a:	e2a7      	b.n	800ac9c <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a74c:	4b72      	ldr	r3, [pc, #456]	@ (800a918 <HAL_RCC_OscConfig+0x330>)
 800a74e:	685b      	ldr	r3, [r3, #4]
 800a750:	4a74      	ldr	r2, [pc, #464]	@ (800a924 <HAL_RCC_OscConfig+0x33c>)
 800a752:	4013      	ands	r3, r2
 800a754:	0019      	movs	r1, r3
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	695b      	ldr	r3, [r3, #20]
 800a75a:	021a      	lsls	r2, r3, #8
 800a75c:	4b6e      	ldr	r3, [pc, #440]	@ (800a918 <HAL_RCC_OscConfig+0x330>)
 800a75e:	430a      	orrs	r2, r1
 800a760:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a762:	69bb      	ldr	r3, [r7, #24]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d112      	bne.n	800a78e <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800a768:	4b6b      	ldr	r3, [pc, #428]	@ (800a918 <HAL_RCC_OscConfig+0x330>)
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	4a6e      	ldr	r2, [pc, #440]	@ (800a928 <HAL_RCC_OscConfig+0x340>)
 800a76e:	4013      	ands	r3, r2
 800a770:	0019      	movs	r1, r3
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	691a      	ldr	r2, [r3, #16]
 800a776:	4b68      	ldr	r3, [pc, #416]	@ (800a918 <HAL_RCC_OscConfig+0x330>)
 800a778:	430a      	orrs	r2, r1
 800a77a:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800a77c:	4b66      	ldr	r3, [pc, #408]	@ (800a918 <HAL_RCC_OscConfig+0x330>)
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	0adb      	lsrs	r3, r3, #11
 800a782:	2207      	movs	r2, #7
 800a784:	4013      	ands	r3, r2
 800a786:	4a69      	ldr	r2, [pc, #420]	@ (800a92c <HAL_RCC_OscConfig+0x344>)
 800a788:	40da      	lsrs	r2, r3
 800a78a:	4b69      	ldr	r3, [pc, #420]	@ (800a930 <HAL_RCC_OscConfig+0x348>)
 800a78c:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800a78e:	4b69      	ldr	r3, [pc, #420]	@ (800a934 <HAL_RCC_OscConfig+0x34c>)
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	0018      	movs	r0, r3
 800a794:	f7fe fb8e 	bl	8008eb4 <HAL_InitTick>
 800a798:	1e03      	subs	r3, r0, #0
 800a79a:	d051      	beq.n	800a840 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 800a79c:	2301      	movs	r3, #1
 800a79e:	e27d      	b.n	800ac9c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	68db      	ldr	r3, [r3, #12]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d030      	beq.n	800a80a <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800a7a8:	4b5b      	ldr	r3, [pc, #364]	@ (800a918 <HAL_RCC_OscConfig+0x330>)
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	4a5e      	ldr	r2, [pc, #376]	@ (800a928 <HAL_RCC_OscConfig+0x340>)
 800a7ae:	4013      	ands	r3, r2
 800a7b0:	0019      	movs	r1, r3
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	691a      	ldr	r2, [r3, #16]
 800a7b6:	4b58      	ldr	r3, [pc, #352]	@ (800a918 <HAL_RCC_OscConfig+0x330>)
 800a7b8:	430a      	orrs	r2, r1
 800a7ba:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800a7bc:	4b56      	ldr	r3, [pc, #344]	@ (800a918 <HAL_RCC_OscConfig+0x330>)
 800a7be:	681a      	ldr	r2, [r3, #0]
 800a7c0:	4b55      	ldr	r3, [pc, #340]	@ (800a918 <HAL_RCC_OscConfig+0x330>)
 800a7c2:	2180      	movs	r1, #128	@ 0x80
 800a7c4:	0049      	lsls	r1, r1, #1
 800a7c6:	430a      	orrs	r2, r1
 800a7c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a7ca:	f7fe fbcf 	bl	8008f6c <HAL_GetTick>
 800a7ce:	0003      	movs	r3, r0
 800a7d0:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a7d2:	e008      	b.n	800a7e6 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a7d4:	f7fe fbca 	bl	8008f6c <HAL_GetTick>
 800a7d8:	0002      	movs	r2, r0
 800a7da:	693b      	ldr	r3, [r7, #16]
 800a7dc:	1ad3      	subs	r3, r2, r3
 800a7de:	2b02      	cmp	r3, #2
 800a7e0:	d901      	bls.n	800a7e6 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800a7e2:	2303      	movs	r3, #3
 800a7e4:	e25a      	b.n	800ac9c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a7e6:	4b4c      	ldr	r3, [pc, #304]	@ (800a918 <HAL_RCC_OscConfig+0x330>)
 800a7e8:	681a      	ldr	r2, [r3, #0]
 800a7ea:	2380      	movs	r3, #128	@ 0x80
 800a7ec:	00db      	lsls	r3, r3, #3
 800a7ee:	4013      	ands	r3, r2
 800a7f0:	d0f0      	beq.n	800a7d4 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a7f2:	4b49      	ldr	r3, [pc, #292]	@ (800a918 <HAL_RCC_OscConfig+0x330>)
 800a7f4:	685b      	ldr	r3, [r3, #4]
 800a7f6:	4a4b      	ldr	r2, [pc, #300]	@ (800a924 <HAL_RCC_OscConfig+0x33c>)
 800a7f8:	4013      	ands	r3, r2
 800a7fa:	0019      	movs	r1, r3
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	695b      	ldr	r3, [r3, #20]
 800a800:	021a      	lsls	r2, r3, #8
 800a802:	4b45      	ldr	r3, [pc, #276]	@ (800a918 <HAL_RCC_OscConfig+0x330>)
 800a804:	430a      	orrs	r2, r1
 800a806:	605a      	str	r2, [r3, #4]
 800a808:	e01b      	b.n	800a842 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800a80a:	4b43      	ldr	r3, [pc, #268]	@ (800a918 <HAL_RCC_OscConfig+0x330>)
 800a80c:	681a      	ldr	r2, [r3, #0]
 800a80e:	4b42      	ldr	r3, [pc, #264]	@ (800a918 <HAL_RCC_OscConfig+0x330>)
 800a810:	4949      	ldr	r1, [pc, #292]	@ (800a938 <HAL_RCC_OscConfig+0x350>)
 800a812:	400a      	ands	r2, r1
 800a814:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a816:	f7fe fba9 	bl	8008f6c <HAL_GetTick>
 800a81a:	0003      	movs	r3, r0
 800a81c:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a81e:	e008      	b.n	800a832 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a820:	f7fe fba4 	bl	8008f6c <HAL_GetTick>
 800a824:	0002      	movs	r2, r0
 800a826:	693b      	ldr	r3, [r7, #16]
 800a828:	1ad3      	subs	r3, r2, r3
 800a82a:	2b02      	cmp	r3, #2
 800a82c:	d901      	bls.n	800a832 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 800a82e:	2303      	movs	r3, #3
 800a830:	e234      	b.n	800ac9c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a832:	4b39      	ldr	r3, [pc, #228]	@ (800a918 <HAL_RCC_OscConfig+0x330>)
 800a834:	681a      	ldr	r2, [r3, #0]
 800a836:	2380      	movs	r3, #128	@ 0x80
 800a838:	00db      	lsls	r3, r3, #3
 800a83a:	4013      	ands	r3, r2
 800a83c:	d1f0      	bne.n	800a820 <HAL_RCC_OscConfig+0x238>
 800a83e:	e000      	b.n	800a842 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a840:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	2208      	movs	r2, #8
 800a848:	4013      	ands	r3, r2
 800a84a:	d047      	beq.n	800a8dc <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800a84c:	4b32      	ldr	r3, [pc, #200]	@ (800a918 <HAL_RCC_OscConfig+0x330>)
 800a84e:	689b      	ldr	r3, [r3, #8]
 800a850:	2238      	movs	r2, #56	@ 0x38
 800a852:	4013      	ands	r3, r2
 800a854:	2b18      	cmp	r3, #24
 800a856:	d10a      	bne.n	800a86e <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800a858:	4b2f      	ldr	r3, [pc, #188]	@ (800a918 <HAL_RCC_OscConfig+0x330>)
 800a85a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a85c:	2202      	movs	r2, #2
 800a85e:	4013      	ands	r3, r2
 800a860:	d03c      	beq.n	800a8dc <HAL_RCC_OscConfig+0x2f4>
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	699b      	ldr	r3, [r3, #24]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d138      	bne.n	800a8dc <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800a86a:	2301      	movs	r3, #1
 800a86c:	e216      	b.n	800ac9c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	699b      	ldr	r3, [r3, #24]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d019      	beq.n	800a8aa <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800a876:	4b28      	ldr	r3, [pc, #160]	@ (800a918 <HAL_RCC_OscConfig+0x330>)
 800a878:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800a87a:	4b27      	ldr	r3, [pc, #156]	@ (800a918 <HAL_RCC_OscConfig+0x330>)
 800a87c:	2101      	movs	r1, #1
 800a87e:	430a      	orrs	r2, r1
 800a880:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a882:	f7fe fb73 	bl	8008f6c <HAL_GetTick>
 800a886:	0003      	movs	r3, r0
 800a888:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a88a:	e008      	b.n	800a89e <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a88c:	f7fe fb6e 	bl	8008f6c <HAL_GetTick>
 800a890:	0002      	movs	r2, r0
 800a892:	693b      	ldr	r3, [r7, #16]
 800a894:	1ad3      	subs	r3, r2, r3
 800a896:	2b02      	cmp	r3, #2
 800a898:	d901      	bls.n	800a89e <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 800a89a:	2303      	movs	r3, #3
 800a89c:	e1fe      	b.n	800ac9c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a89e:	4b1e      	ldr	r3, [pc, #120]	@ (800a918 <HAL_RCC_OscConfig+0x330>)
 800a8a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a8a2:	2202      	movs	r2, #2
 800a8a4:	4013      	ands	r3, r2
 800a8a6:	d0f1      	beq.n	800a88c <HAL_RCC_OscConfig+0x2a4>
 800a8a8:	e018      	b.n	800a8dc <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800a8aa:	4b1b      	ldr	r3, [pc, #108]	@ (800a918 <HAL_RCC_OscConfig+0x330>)
 800a8ac:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800a8ae:	4b1a      	ldr	r3, [pc, #104]	@ (800a918 <HAL_RCC_OscConfig+0x330>)
 800a8b0:	2101      	movs	r1, #1
 800a8b2:	438a      	bics	r2, r1
 800a8b4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a8b6:	f7fe fb59 	bl	8008f6c <HAL_GetTick>
 800a8ba:	0003      	movs	r3, r0
 800a8bc:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a8be:	e008      	b.n	800a8d2 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a8c0:	f7fe fb54 	bl	8008f6c <HAL_GetTick>
 800a8c4:	0002      	movs	r2, r0
 800a8c6:	693b      	ldr	r3, [r7, #16]
 800a8c8:	1ad3      	subs	r3, r2, r3
 800a8ca:	2b02      	cmp	r3, #2
 800a8cc:	d901      	bls.n	800a8d2 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 800a8ce:	2303      	movs	r3, #3
 800a8d0:	e1e4      	b.n	800ac9c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a8d2:	4b11      	ldr	r3, [pc, #68]	@ (800a918 <HAL_RCC_OscConfig+0x330>)
 800a8d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a8d6:	2202      	movs	r2, #2
 800a8d8:	4013      	ands	r3, r2
 800a8da:	d1f1      	bne.n	800a8c0 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	2204      	movs	r2, #4
 800a8e2:	4013      	ands	r3, r2
 800a8e4:	d100      	bne.n	800a8e8 <HAL_RCC_OscConfig+0x300>
 800a8e6:	e0c7      	b.n	800aa78 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a8e8:	231f      	movs	r3, #31
 800a8ea:	18fb      	adds	r3, r7, r3
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800a8f0:	4b09      	ldr	r3, [pc, #36]	@ (800a918 <HAL_RCC_OscConfig+0x330>)
 800a8f2:	689b      	ldr	r3, [r3, #8]
 800a8f4:	2238      	movs	r2, #56	@ 0x38
 800a8f6:	4013      	ands	r3, r2
 800a8f8:	2b20      	cmp	r3, #32
 800a8fa:	d11f      	bne.n	800a93c <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800a8fc:	4b06      	ldr	r3, [pc, #24]	@ (800a918 <HAL_RCC_OscConfig+0x330>)
 800a8fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a900:	2202      	movs	r2, #2
 800a902:	4013      	ands	r3, r2
 800a904:	d100      	bne.n	800a908 <HAL_RCC_OscConfig+0x320>
 800a906:	e0b7      	b.n	800aa78 <HAL_RCC_OscConfig+0x490>
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	689b      	ldr	r3, [r3, #8]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d000      	beq.n	800a912 <HAL_RCC_OscConfig+0x32a>
 800a910:	e0b2      	b.n	800aa78 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 800a912:	2301      	movs	r3, #1
 800a914:	e1c2      	b.n	800ac9c <HAL_RCC_OscConfig+0x6b4>
 800a916:	46c0      	nop			@ (mov r8, r8)
 800a918:	40021000 	.word	0x40021000
 800a91c:	fffeffff 	.word	0xfffeffff
 800a920:	fffbffff 	.word	0xfffbffff
 800a924:	ffff80ff 	.word	0xffff80ff
 800a928:	ffffc7ff 	.word	0xffffc7ff
 800a92c:	00f42400 	.word	0x00f42400
 800a930:	20000004 	.word	0x20000004
 800a934:	20000008 	.word	0x20000008
 800a938:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800a93c:	4bb5      	ldr	r3, [pc, #724]	@ (800ac14 <HAL_RCC_OscConfig+0x62c>)
 800a93e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a940:	2380      	movs	r3, #128	@ 0x80
 800a942:	055b      	lsls	r3, r3, #21
 800a944:	4013      	ands	r3, r2
 800a946:	d101      	bne.n	800a94c <HAL_RCC_OscConfig+0x364>
 800a948:	2301      	movs	r3, #1
 800a94a:	e000      	b.n	800a94e <HAL_RCC_OscConfig+0x366>
 800a94c:	2300      	movs	r3, #0
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d011      	beq.n	800a976 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800a952:	4bb0      	ldr	r3, [pc, #704]	@ (800ac14 <HAL_RCC_OscConfig+0x62c>)
 800a954:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a956:	4baf      	ldr	r3, [pc, #700]	@ (800ac14 <HAL_RCC_OscConfig+0x62c>)
 800a958:	2180      	movs	r1, #128	@ 0x80
 800a95a:	0549      	lsls	r1, r1, #21
 800a95c:	430a      	orrs	r2, r1
 800a95e:	63da      	str	r2, [r3, #60]	@ 0x3c
 800a960:	4bac      	ldr	r3, [pc, #688]	@ (800ac14 <HAL_RCC_OscConfig+0x62c>)
 800a962:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a964:	2380      	movs	r3, #128	@ 0x80
 800a966:	055b      	lsls	r3, r3, #21
 800a968:	4013      	ands	r3, r2
 800a96a:	60fb      	str	r3, [r7, #12]
 800a96c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800a96e:	231f      	movs	r3, #31
 800a970:	18fb      	adds	r3, r7, r3
 800a972:	2201      	movs	r2, #1
 800a974:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a976:	4ba8      	ldr	r3, [pc, #672]	@ (800ac18 <HAL_RCC_OscConfig+0x630>)
 800a978:	681a      	ldr	r2, [r3, #0]
 800a97a:	2380      	movs	r3, #128	@ 0x80
 800a97c:	005b      	lsls	r3, r3, #1
 800a97e:	4013      	ands	r3, r2
 800a980:	d11a      	bne.n	800a9b8 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a982:	4ba5      	ldr	r3, [pc, #660]	@ (800ac18 <HAL_RCC_OscConfig+0x630>)
 800a984:	681a      	ldr	r2, [r3, #0]
 800a986:	4ba4      	ldr	r3, [pc, #656]	@ (800ac18 <HAL_RCC_OscConfig+0x630>)
 800a988:	2180      	movs	r1, #128	@ 0x80
 800a98a:	0049      	lsls	r1, r1, #1
 800a98c:	430a      	orrs	r2, r1
 800a98e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800a990:	f7fe faec 	bl	8008f6c <HAL_GetTick>
 800a994:	0003      	movs	r3, r0
 800a996:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a998:	e008      	b.n	800a9ac <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a99a:	f7fe fae7 	bl	8008f6c <HAL_GetTick>
 800a99e:	0002      	movs	r2, r0
 800a9a0:	693b      	ldr	r3, [r7, #16]
 800a9a2:	1ad3      	subs	r3, r2, r3
 800a9a4:	2b02      	cmp	r3, #2
 800a9a6:	d901      	bls.n	800a9ac <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 800a9a8:	2303      	movs	r3, #3
 800a9aa:	e177      	b.n	800ac9c <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a9ac:	4b9a      	ldr	r3, [pc, #616]	@ (800ac18 <HAL_RCC_OscConfig+0x630>)
 800a9ae:	681a      	ldr	r2, [r3, #0]
 800a9b0:	2380      	movs	r3, #128	@ 0x80
 800a9b2:	005b      	lsls	r3, r3, #1
 800a9b4:	4013      	ands	r3, r2
 800a9b6:	d0f0      	beq.n	800a99a <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	689b      	ldr	r3, [r3, #8]
 800a9bc:	2b01      	cmp	r3, #1
 800a9be:	d106      	bne.n	800a9ce <HAL_RCC_OscConfig+0x3e6>
 800a9c0:	4b94      	ldr	r3, [pc, #592]	@ (800ac14 <HAL_RCC_OscConfig+0x62c>)
 800a9c2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a9c4:	4b93      	ldr	r3, [pc, #588]	@ (800ac14 <HAL_RCC_OscConfig+0x62c>)
 800a9c6:	2101      	movs	r1, #1
 800a9c8:	430a      	orrs	r2, r1
 800a9ca:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a9cc:	e01c      	b.n	800aa08 <HAL_RCC_OscConfig+0x420>
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	689b      	ldr	r3, [r3, #8]
 800a9d2:	2b05      	cmp	r3, #5
 800a9d4:	d10c      	bne.n	800a9f0 <HAL_RCC_OscConfig+0x408>
 800a9d6:	4b8f      	ldr	r3, [pc, #572]	@ (800ac14 <HAL_RCC_OscConfig+0x62c>)
 800a9d8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a9da:	4b8e      	ldr	r3, [pc, #568]	@ (800ac14 <HAL_RCC_OscConfig+0x62c>)
 800a9dc:	2104      	movs	r1, #4
 800a9de:	430a      	orrs	r2, r1
 800a9e0:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a9e2:	4b8c      	ldr	r3, [pc, #560]	@ (800ac14 <HAL_RCC_OscConfig+0x62c>)
 800a9e4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a9e6:	4b8b      	ldr	r3, [pc, #556]	@ (800ac14 <HAL_RCC_OscConfig+0x62c>)
 800a9e8:	2101      	movs	r1, #1
 800a9ea:	430a      	orrs	r2, r1
 800a9ec:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a9ee:	e00b      	b.n	800aa08 <HAL_RCC_OscConfig+0x420>
 800a9f0:	4b88      	ldr	r3, [pc, #544]	@ (800ac14 <HAL_RCC_OscConfig+0x62c>)
 800a9f2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a9f4:	4b87      	ldr	r3, [pc, #540]	@ (800ac14 <HAL_RCC_OscConfig+0x62c>)
 800a9f6:	2101      	movs	r1, #1
 800a9f8:	438a      	bics	r2, r1
 800a9fa:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a9fc:	4b85      	ldr	r3, [pc, #532]	@ (800ac14 <HAL_RCC_OscConfig+0x62c>)
 800a9fe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800aa00:	4b84      	ldr	r3, [pc, #528]	@ (800ac14 <HAL_RCC_OscConfig+0x62c>)
 800aa02:	2104      	movs	r1, #4
 800aa04:	438a      	bics	r2, r1
 800aa06:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	689b      	ldr	r3, [r3, #8]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d014      	beq.n	800aa3a <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa10:	f7fe faac 	bl	8008f6c <HAL_GetTick>
 800aa14:	0003      	movs	r3, r0
 800aa16:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800aa18:	e009      	b.n	800aa2e <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aa1a:	f7fe faa7 	bl	8008f6c <HAL_GetTick>
 800aa1e:	0002      	movs	r2, r0
 800aa20:	693b      	ldr	r3, [r7, #16]
 800aa22:	1ad3      	subs	r3, r2, r3
 800aa24:	4a7d      	ldr	r2, [pc, #500]	@ (800ac1c <HAL_RCC_OscConfig+0x634>)
 800aa26:	4293      	cmp	r3, r2
 800aa28:	d901      	bls.n	800aa2e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800aa2a:	2303      	movs	r3, #3
 800aa2c:	e136      	b.n	800ac9c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800aa2e:	4b79      	ldr	r3, [pc, #484]	@ (800ac14 <HAL_RCC_OscConfig+0x62c>)
 800aa30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aa32:	2202      	movs	r2, #2
 800aa34:	4013      	ands	r3, r2
 800aa36:	d0f0      	beq.n	800aa1a <HAL_RCC_OscConfig+0x432>
 800aa38:	e013      	b.n	800aa62 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa3a:	f7fe fa97 	bl	8008f6c <HAL_GetTick>
 800aa3e:	0003      	movs	r3, r0
 800aa40:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800aa42:	e009      	b.n	800aa58 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aa44:	f7fe fa92 	bl	8008f6c <HAL_GetTick>
 800aa48:	0002      	movs	r2, r0
 800aa4a:	693b      	ldr	r3, [r7, #16]
 800aa4c:	1ad3      	subs	r3, r2, r3
 800aa4e:	4a73      	ldr	r2, [pc, #460]	@ (800ac1c <HAL_RCC_OscConfig+0x634>)
 800aa50:	4293      	cmp	r3, r2
 800aa52:	d901      	bls.n	800aa58 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 800aa54:	2303      	movs	r3, #3
 800aa56:	e121      	b.n	800ac9c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800aa58:	4b6e      	ldr	r3, [pc, #440]	@ (800ac14 <HAL_RCC_OscConfig+0x62c>)
 800aa5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aa5c:	2202      	movs	r2, #2
 800aa5e:	4013      	ands	r3, r2
 800aa60:	d1f0      	bne.n	800aa44 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800aa62:	231f      	movs	r3, #31
 800aa64:	18fb      	adds	r3, r7, r3
 800aa66:	781b      	ldrb	r3, [r3, #0]
 800aa68:	2b01      	cmp	r3, #1
 800aa6a:	d105      	bne.n	800aa78 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800aa6c:	4b69      	ldr	r3, [pc, #420]	@ (800ac14 <HAL_RCC_OscConfig+0x62c>)
 800aa6e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800aa70:	4b68      	ldr	r3, [pc, #416]	@ (800ac14 <HAL_RCC_OscConfig+0x62c>)
 800aa72:	496b      	ldr	r1, [pc, #428]	@ (800ac20 <HAL_RCC_OscConfig+0x638>)
 800aa74:	400a      	ands	r2, r1
 800aa76:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	2220      	movs	r2, #32
 800aa7e:	4013      	ands	r3, r2
 800aa80:	d039      	beq.n	800aaf6 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	69db      	ldr	r3, [r3, #28]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d01b      	beq.n	800aac2 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800aa8a:	4b62      	ldr	r3, [pc, #392]	@ (800ac14 <HAL_RCC_OscConfig+0x62c>)
 800aa8c:	681a      	ldr	r2, [r3, #0]
 800aa8e:	4b61      	ldr	r3, [pc, #388]	@ (800ac14 <HAL_RCC_OscConfig+0x62c>)
 800aa90:	2180      	movs	r1, #128	@ 0x80
 800aa92:	03c9      	lsls	r1, r1, #15
 800aa94:	430a      	orrs	r2, r1
 800aa96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aa98:	f7fe fa68 	bl	8008f6c <HAL_GetTick>
 800aa9c:	0003      	movs	r3, r0
 800aa9e:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800aaa0:	e008      	b.n	800aab4 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800aaa2:	f7fe fa63 	bl	8008f6c <HAL_GetTick>
 800aaa6:	0002      	movs	r2, r0
 800aaa8:	693b      	ldr	r3, [r7, #16]
 800aaaa:	1ad3      	subs	r3, r2, r3
 800aaac:	2b02      	cmp	r3, #2
 800aaae:	d901      	bls.n	800aab4 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 800aab0:	2303      	movs	r3, #3
 800aab2:	e0f3      	b.n	800ac9c <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800aab4:	4b57      	ldr	r3, [pc, #348]	@ (800ac14 <HAL_RCC_OscConfig+0x62c>)
 800aab6:	681a      	ldr	r2, [r3, #0]
 800aab8:	2380      	movs	r3, #128	@ 0x80
 800aaba:	041b      	lsls	r3, r3, #16
 800aabc:	4013      	ands	r3, r2
 800aabe:	d0f0      	beq.n	800aaa2 <HAL_RCC_OscConfig+0x4ba>
 800aac0:	e019      	b.n	800aaf6 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800aac2:	4b54      	ldr	r3, [pc, #336]	@ (800ac14 <HAL_RCC_OscConfig+0x62c>)
 800aac4:	681a      	ldr	r2, [r3, #0]
 800aac6:	4b53      	ldr	r3, [pc, #332]	@ (800ac14 <HAL_RCC_OscConfig+0x62c>)
 800aac8:	4956      	ldr	r1, [pc, #344]	@ (800ac24 <HAL_RCC_OscConfig+0x63c>)
 800aaca:	400a      	ands	r2, r1
 800aacc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aace:	f7fe fa4d 	bl	8008f6c <HAL_GetTick>
 800aad2:	0003      	movs	r3, r0
 800aad4:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800aad6:	e008      	b.n	800aaea <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800aad8:	f7fe fa48 	bl	8008f6c <HAL_GetTick>
 800aadc:	0002      	movs	r2, r0
 800aade:	693b      	ldr	r3, [r7, #16]
 800aae0:	1ad3      	subs	r3, r2, r3
 800aae2:	2b02      	cmp	r3, #2
 800aae4:	d901      	bls.n	800aaea <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 800aae6:	2303      	movs	r3, #3
 800aae8:	e0d8      	b.n	800ac9c <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800aaea:	4b4a      	ldr	r3, [pc, #296]	@ (800ac14 <HAL_RCC_OscConfig+0x62c>)
 800aaec:	681a      	ldr	r2, [r3, #0]
 800aaee:	2380      	movs	r3, #128	@ 0x80
 800aaf0:	041b      	lsls	r3, r3, #16
 800aaf2:	4013      	ands	r3, r2
 800aaf4:	d1f0      	bne.n	800aad8 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	6a1b      	ldr	r3, [r3, #32]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d100      	bne.n	800ab00 <HAL_RCC_OscConfig+0x518>
 800aafe:	e0cc      	b.n	800ac9a <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ab00:	4b44      	ldr	r3, [pc, #272]	@ (800ac14 <HAL_RCC_OscConfig+0x62c>)
 800ab02:	689b      	ldr	r3, [r3, #8]
 800ab04:	2238      	movs	r2, #56	@ 0x38
 800ab06:	4013      	ands	r3, r2
 800ab08:	2b10      	cmp	r3, #16
 800ab0a:	d100      	bne.n	800ab0e <HAL_RCC_OscConfig+0x526>
 800ab0c:	e07b      	b.n	800ac06 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	6a1b      	ldr	r3, [r3, #32]
 800ab12:	2b02      	cmp	r3, #2
 800ab14:	d156      	bne.n	800abc4 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ab16:	4b3f      	ldr	r3, [pc, #252]	@ (800ac14 <HAL_RCC_OscConfig+0x62c>)
 800ab18:	681a      	ldr	r2, [r3, #0]
 800ab1a:	4b3e      	ldr	r3, [pc, #248]	@ (800ac14 <HAL_RCC_OscConfig+0x62c>)
 800ab1c:	4942      	ldr	r1, [pc, #264]	@ (800ac28 <HAL_RCC_OscConfig+0x640>)
 800ab1e:	400a      	ands	r2, r1
 800ab20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab22:	f7fe fa23 	bl	8008f6c <HAL_GetTick>
 800ab26:	0003      	movs	r3, r0
 800ab28:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ab2a:	e008      	b.n	800ab3e <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ab2c:	f7fe fa1e 	bl	8008f6c <HAL_GetTick>
 800ab30:	0002      	movs	r2, r0
 800ab32:	693b      	ldr	r3, [r7, #16]
 800ab34:	1ad3      	subs	r3, r2, r3
 800ab36:	2b02      	cmp	r3, #2
 800ab38:	d901      	bls.n	800ab3e <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 800ab3a:	2303      	movs	r3, #3
 800ab3c:	e0ae      	b.n	800ac9c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ab3e:	4b35      	ldr	r3, [pc, #212]	@ (800ac14 <HAL_RCC_OscConfig+0x62c>)
 800ab40:	681a      	ldr	r2, [r3, #0]
 800ab42:	2380      	movs	r3, #128	@ 0x80
 800ab44:	049b      	lsls	r3, r3, #18
 800ab46:	4013      	ands	r3, r2
 800ab48:	d1f0      	bne.n	800ab2c <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ab4a:	4b32      	ldr	r3, [pc, #200]	@ (800ac14 <HAL_RCC_OscConfig+0x62c>)
 800ab4c:	68db      	ldr	r3, [r3, #12]
 800ab4e:	4a37      	ldr	r2, [pc, #220]	@ (800ac2c <HAL_RCC_OscConfig+0x644>)
 800ab50:	4013      	ands	r3, r2
 800ab52:	0019      	movs	r1, r3
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab5c:	431a      	orrs	r2, r3
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab62:	021b      	lsls	r3, r3, #8
 800ab64:	431a      	orrs	r2, r3
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab6a:	431a      	orrs	r2, r3
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab70:	431a      	orrs	r2, r3
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab76:	431a      	orrs	r2, r3
 800ab78:	4b26      	ldr	r3, [pc, #152]	@ (800ac14 <HAL_RCC_OscConfig+0x62c>)
 800ab7a:	430a      	orrs	r2, r1
 800ab7c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ab7e:	4b25      	ldr	r3, [pc, #148]	@ (800ac14 <HAL_RCC_OscConfig+0x62c>)
 800ab80:	681a      	ldr	r2, [r3, #0]
 800ab82:	4b24      	ldr	r3, [pc, #144]	@ (800ac14 <HAL_RCC_OscConfig+0x62c>)
 800ab84:	2180      	movs	r1, #128	@ 0x80
 800ab86:	0449      	lsls	r1, r1, #17
 800ab88:	430a      	orrs	r2, r1
 800ab8a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800ab8c:	4b21      	ldr	r3, [pc, #132]	@ (800ac14 <HAL_RCC_OscConfig+0x62c>)
 800ab8e:	68da      	ldr	r2, [r3, #12]
 800ab90:	4b20      	ldr	r3, [pc, #128]	@ (800ac14 <HAL_RCC_OscConfig+0x62c>)
 800ab92:	2180      	movs	r1, #128	@ 0x80
 800ab94:	0549      	lsls	r1, r1, #21
 800ab96:	430a      	orrs	r2, r1
 800ab98:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab9a:	f7fe f9e7 	bl	8008f6c <HAL_GetTick>
 800ab9e:	0003      	movs	r3, r0
 800aba0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800aba2:	e008      	b.n	800abb6 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aba4:	f7fe f9e2 	bl	8008f6c <HAL_GetTick>
 800aba8:	0002      	movs	r2, r0
 800abaa:	693b      	ldr	r3, [r7, #16]
 800abac:	1ad3      	subs	r3, r2, r3
 800abae:	2b02      	cmp	r3, #2
 800abb0:	d901      	bls.n	800abb6 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 800abb2:	2303      	movs	r3, #3
 800abb4:	e072      	b.n	800ac9c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800abb6:	4b17      	ldr	r3, [pc, #92]	@ (800ac14 <HAL_RCC_OscConfig+0x62c>)
 800abb8:	681a      	ldr	r2, [r3, #0]
 800abba:	2380      	movs	r3, #128	@ 0x80
 800abbc:	049b      	lsls	r3, r3, #18
 800abbe:	4013      	ands	r3, r2
 800abc0:	d0f0      	beq.n	800aba4 <HAL_RCC_OscConfig+0x5bc>
 800abc2:	e06a      	b.n	800ac9a <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800abc4:	4b13      	ldr	r3, [pc, #76]	@ (800ac14 <HAL_RCC_OscConfig+0x62c>)
 800abc6:	681a      	ldr	r2, [r3, #0]
 800abc8:	4b12      	ldr	r3, [pc, #72]	@ (800ac14 <HAL_RCC_OscConfig+0x62c>)
 800abca:	4917      	ldr	r1, [pc, #92]	@ (800ac28 <HAL_RCC_OscConfig+0x640>)
 800abcc:	400a      	ands	r2, r1
 800abce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800abd0:	f7fe f9cc 	bl	8008f6c <HAL_GetTick>
 800abd4:	0003      	movs	r3, r0
 800abd6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800abd8:	e008      	b.n	800abec <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800abda:	f7fe f9c7 	bl	8008f6c <HAL_GetTick>
 800abde:	0002      	movs	r2, r0
 800abe0:	693b      	ldr	r3, [r7, #16]
 800abe2:	1ad3      	subs	r3, r2, r3
 800abe4:	2b02      	cmp	r3, #2
 800abe6:	d901      	bls.n	800abec <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 800abe8:	2303      	movs	r3, #3
 800abea:	e057      	b.n	800ac9c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800abec:	4b09      	ldr	r3, [pc, #36]	@ (800ac14 <HAL_RCC_OscConfig+0x62c>)
 800abee:	681a      	ldr	r2, [r3, #0]
 800abf0:	2380      	movs	r3, #128	@ 0x80
 800abf2:	049b      	lsls	r3, r3, #18
 800abf4:	4013      	ands	r3, r2
 800abf6:	d1f0      	bne.n	800abda <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800abf8:	4b06      	ldr	r3, [pc, #24]	@ (800ac14 <HAL_RCC_OscConfig+0x62c>)
 800abfa:	68da      	ldr	r2, [r3, #12]
 800abfc:	4b05      	ldr	r3, [pc, #20]	@ (800ac14 <HAL_RCC_OscConfig+0x62c>)
 800abfe:	490c      	ldr	r1, [pc, #48]	@ (800ac30 <HAL_RCC_OscConfig+0x648>)
 800ac00:	400a      	ands	r2, r1
 800ac02:	60da      	str	r2, [r3, #12]
 800ac04:	e049      	b.n	800ac9a <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	6a1b      	ldr	r3, [r3, #32]
 800ac0a:	2b01      	cmp	r3, #1
 800ac0c:	d112      	bne.n	800ac34 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 800ac0e:	2301      	movs	r3, #1
 800ac10:	e044      	b.n	800ac9c <HAL_RCC_OscConfig+0x6b4>
 800ac12:	46c0      	nop			@ (mov r8, r8)
 800ac14:	40021000 	.word	0x40021000
 800ac18:	40007000 	.word	0x40007000
 800ac1c:	00001388 	.word	0x00001388
 800ac20:	efffffff 	.word	0xefffffff
 800ac24:	ffbfffff 	.word	0xffbfffff
 800ac28:	feffffff 	.word	0xfeffffff
 800ac2c:	11c1808c 	.word	0x11c1808c
 800ac30:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800ac34:	4b1b      	ldr	r3, [pc, #108]	@ (800aca4 <HAL_RCC_OscConfig+0x6bc>)
 800ac36:	68db      	ldr	r3, [r3, #12]
 800ac38:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ac3a:	697b      	ldr	r3, [r7, #20]
 800ac3c:	2203      	movs	r2, #3
 800ac3e:	401a      	ands	r2, r3
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac44:	429a      	cmp	r2, r3
 800ac46:	d126      	bne.n	800ac96 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800ac48:	697b      	ldr	r3, [r7, #20]
 800ac4a:	2270      	movs	r2, #112	@ 0x70
 800ac4c:	401a      	ands	r2, r3
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ac52:	429a      	cmp	r2, r3
 800ac54:	d11f      	bne.n	800ac96 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800ac56:	697a      	ldr	r2, [r7, #20]
 800ac58:	23fe      	movs	r3, #254	@ 0xfe
 800ac5a:	01db      	lsls	r3, r3, #7
 800ac5c:	401a      	ands	r2, r3
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac62:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800ac64:	429a      	cmp	r2, r3
 800ac66:	d116      	bne.n	800ac96 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800ac68:	697a      	ldr	r2, [r7, #20]
 800ac6a:	23f8      	movs	r3, #248	@ 0xf8
 800ac6c:	039b      	lsls	r3, r3, #14
 800ac6e:	401a      	ands	r2, r3
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800ac74:	429a      	cmp	r2, r3
 800ac76:	d10e      	bne.n	800ac96 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800ac78:	697a      	ldr	r2, [r7, #20]
 800ac7a:	23e0      	movs	r3, #224	@ 0xe0
 800ac7c:	051b      	lsls	r3, r3, #20
 800ac7e:	401a      	ands	r2, r3
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800ac84:	429a      	cmp	r2, r3
 800ac86:	d106      	bne.n	800ac96 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800ac88:	697b      	ldr	r3, [r7, #20]
 800ac8a:	0f5b      	lsrs	r3, r3, #29
 800ac8c:	075a      	lsls	r2, r3, #29
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800ac92:	429a      	cmp	r2, r3
 800ac94:	d001      	beq.n	800ac9a <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 800ac96:	2301      	movs	r3, #1
 800ac98:	e000      	b.n	800ac9c <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 800ac9a:	2300      	movs	r3, #0
}
 800ac9c:	0018      	movs	r0, r3
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	b008      	add	sp, #32
 800aca2:	bd80      	pop	{r7, pc}
 800aca4:	40021000 	.word	0x40021000

0800aca8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b084      	sub	sp, #16
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
 800acb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d101      	bne.n	800acbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800acb8:	2301      	movs	r3, #1
 800acba:	e0e9      	b.n	800ae90 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800acbc:	4b76      	ldr	r3, [pc, #472]	@ (800ae98 <HAL_RCC_ClockConfig+0x1f0>)
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	2207      	movs	r2, #7
 800acc2:	4013      	ands	r3, r2
 800acc4:	683a      	ldr	r2, [r7, #0]
 800acc6:	429a      	cmp	r2, r3
 800acc8:	d91e      	bls.n	800ad08 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800acca:	4b73      	ldr	r3, [pc, #460]	@ (800ae98 <HAL_RCC_ClockConfig+0x1f0>)
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	2207      	movs	r2, #7
 800acd0:	4393      	bics	r3, r2
 800acd2:	0019      	movs	r1, r3
 800acd4:	4b70      	ldr	r3, [pc, #448]	@ (800ae98 <HAL_RCC_ClockConfig+0x1f0>)
 800acd6:	683a      	ldr	r2, [r7, #0]
 800acd8:	430a      	orrs	r2, r1
 800acda:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800acdc:	f7fe f946 	bl	8008f6c <HAL_GetTick>
 800ace0:	0003      	movs	r3, r0
 800ace2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800ace4:	e009      	b.n	800acfa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ace6:	f7fe f941 	bl	8008f6c <HAL_GetTick>
 800acea:	0002      	movs	r2, r0
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	1ad3      	subs	r3, r2, r3
 800acf0:	4a6a      	ldr	r2, [pc, #424]	@ (800ae9c <HAL_RCC_ClockConfig+0x1f4>)
 800acf2:	4293      	cmp	r3, r2
 800acf4:	d901      	bls.n	800acfa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800acf6:	2303      	movs	r3, #3
 800acf8:	e0ca      	b.n	800ae90 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800acfa:	4b67      	ldr	r3, [pc, #412]	@ (800ae98 <HAL_RCC_ClockConfig+0x1f0>)
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	2207      	movs	r2, #7
 800ad00:	4013      	ands	r3, r2
 800ad02:	683a      	ldr	r2, [r7, #0]
 800ad04:	429a      	cmp	r2, r3
 800ad06:	d1ee      	bne.n	800ace6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	2202      	movs	r2, #2
 800ad0e:	4013      	ands	r3, r2
 800ad10:	d015      	beq.n	800ad3e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	2204      	movs	r2, #4
 800ad18:	4013      	ands	r3, r2
 800ad1a:	d006      	beq.n	800ad2a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800ad1c:	4b60      	ldr	r3, [pc, #384]	@ (800aea0 <HAL_RCC_ClockConfig+0x1f8>)
 800ad1e:	689a      	ldr	r2, [r3, #8]
 800ad20:	4b5f      	ldr	r3, [pc, #380]	@ (800aea0 <HAL_RCC_ClockConfig+0x1f8>)
 800ad22:	21e0      	movs	r1, #224	@ 0xe0
 800ad24:	01c9      	lsls	r1, r1, #7
 800ad26:	430a      	orrs	r2, r1
 800ad28:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ad2a:	4b5d      	ldr	r3, [pc, #372]	@ (800aea0 <HAL_RCC_ClockConfig+0x1f8>)
 800ad2c:	689b      	ldr	r3, [r3, #8]
 800ad2e:	4a5d      	ldr	r2, [pc, #372]	@ (800aea4 <HAL_RCC_ClockConfig+0x1fc>)
 800ad30:	4013      	ands	r3, r2
 800ad32:	0019      	movs	r1, r3
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	689a      	ldr	r2, [r3, #8]
 800ad38:	4b59      	ldr	r3, [pc, #356]	@ (800aea0 <HAL_RCC_ClockConfig+0x1f8>)
 800ad3a:	430a      	orrs	r2, r1
 800ad3c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	2201      	movs	r2, #1
 800ad44:	4013      	ands	r3, r2
 800ad46:	d057      	beq.n	800adf8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	685b      	ldr	r3, [r3, #4]
 800ad4c:	2b01      	cmp	r3, #1
 800ad4e:	d107      	bne.n	800ad60 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ad50:	4b53      	ldr	r3, [pc, #332]	@ (800aea0 <HAL_RCC_ClockConfig+0x1f8>)
 800ad52:	681a      	ldr	r2, [r3, #0]
 800ad54:	2380      	movs	r3, #128	@ 0x80
 800ad56:	029b      	lsls	r3, r3, #10
 800ad58:	4013      	ands	r3, r2
 800ad5a:	d12b      	bne.n	800adb4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800ad5c:	2301      	movs	r3, #1
 800ad5e:	e097      	b.n	800ae90 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	685b      	ldr	r3, [r3, #4]
 800ad64:	2b02      	cmp	r3, #2
 800ad66:	d107      	bne.n	800ad78 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ad68:	4b4d      	ldr	r3, [pc, #308]	@ (800aea0 <HAL_RCC_ClockConfig+0x1f8>)
 800ad6a:	681a      	ldr	r2, [r3, #0]
 800ad6c:	2380      	movs	r3, #128	@ 0x80
 800ad6e:	049b      	lsls	r3, r3, #18
 800ad70:	4013      	ands	r3, r2
 800ad72:	d11f      	bne.n	800adb4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800ad74:	2301      	movs	r3, #1
 800ad76:	e08b      	b.n	800ae90 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	685b      	ldr	r3, [r3, #4]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d107      	bne.n	800ad90 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ad80:	4b47      	ldr	r3, [pc, #284]	@ (800aea0 <HAL_RCC_ClockConfig+0x1f8>)
 800ad82:	681a      	ldr	r2, [r3, #0]
 800ad84:	2380      	movs	r3, #128	@ 0x80
 800ad86:	00db      	lsls	r3, r3, #3
 800ad88:	4013      	ands	r3, r2
 800ad8a:	d113      	bne.n	800adb4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800ad8c:	2301      	movs	r3, #1
 800ad8e:	e07f      	b.n	800ae90 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	685b      	ldr	r3, [r3, #4]
 800ad94:	2b03      	cmp	r3, #3
 800ad96:	d106      	bne.n	800ada6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800ad98:	4b41      	ldr	r3, [pc, #260]	@ (800aea0 <HAL_RCC_ClockConfig+0x1f8>)
 800ad9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ad9c:	2202      	movs	r2, #2
 800ad9e:	4013      	ands	r3, r2
 800ada0:	d108      	bne.n	800adb4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800ada2:	2301      	movs	r3, #1
 800ada4:	e074      	b.n	800ae90 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ada6:	4b3e      	ldr	r3, [pc, #248]	@ (800aea0 <HAL_RCC_ClockConfig+0x1f8>)
 800ada8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800adaa:	2202      	movs	r2, #2
 800adac:	4013      	ands	r3, r2
 800adae:	d101      	bne.n	800adb4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800adb0:	2301      	movs	r3, #1
 800adb2:	e06d      	b.n	800ae90 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800adb4:	4b3a      	ldr	r3, [pc, #232]	@ (800aea0 <HAL_RCC_ClockConfig+0x1f8>)
 800adb6:	689b      	ldr	r3, [r3, #8]
 800adb8:	2207      	movs	r2, #7
 800adba:	4393      	bics	r3, r2
 800adbc:	0019      	movs	r1, r3
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	685a      	ldr	r2, [r3, #4]
 800adc2:	4b37      	ldr	r3, [pc, #220]	@ (800aea0 <HAL_RCC_ClockConfig+0x1f8>)
 800adc4:	430a      	orrs	r2, r1
 800adc6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800adc8:	f7fe f8d0 	bl	8008f6c <HAL_GetTick>
 800adcc:	0003      	movs	r3, r0
 800adce:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800add0:	e009      	b.n	800ade6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800add2:	f7fe f8cb 	bl	8008f6c <HAL_GetTick>
 800add6:	0002      	movs	r2, r0
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	1ad3      	subs	r3, r2, r3
 800addc:	4a2f      	ldr	r2, [pc, #188]	@ (800ae9c <HAL_RCC_ClockConfig+0x1f4>)
 800adde:	4293      	cmp	r3, r2
 800ade0:	d901      	bls.n	800ade6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800ade2:	2303      	movs	r3, #3
 800ade4:	e054      	b.n	800ae90 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ade6:	4b2e      	ldr	r3, [pc, #184]	@ (800aea0 <HAL_RCC_ClockConfig+0x1f8>)
 800ade8:	689b      	ldr	r3, [r3, #8]
 800adea:	2238      	movs	r2, #56	@ 0x38
 800adec:	401a      	ands	r2, r3
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	685b      	ldr	r3, [r3, #4]
 800adf2:	00db      	lsls	r3, r3, #3
 800adf4:	429a      	cmp	r2, r3
 800adf6:	d1ec      	bne.n	800add2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800adf8:	4b27      	ldr	r3, [pc, #156]	@ (800ae98 <HAL_RCC_ClockConfig+0x1f0>)
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	2207      	movs	r2, #7
 800adfe:	4013      	ands	r3, r2
 800ae00:	683a      	ldr	r2, [r7, #0]
 800ae02:	429a      	cmp	r2, r3
 800ae04:	d21e      	bcs.n	800ae44 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ae06:	4b24      	ldr	r3, [pc, #144]	@ (800ae98 <HAL_RCC_ClockConfig+0x1f0>)
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	2207      	movs	r2, #7
 800ae0c:	4393      	bics	r3, r2
 800ae0e:	0019      	movs	r1, r3
 800ae10:	4b21      	ldr	r3, [pc, #132]	@ (800ae98 <HAL_RCC_ClockConfig+0x1f0>)
 800ae12:	683a      	ldr	r2, [r7, #0]
 800ae14:	430a      	orrs	r2, r1
 800ae16:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800ae18:	f7fe f8a8 	bl	8008f6c <HAL_GetTick>
 800ae1c:	0003      	movs	r3, r0
 800ae1e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800ae20:	e009      	b.n	800ae36 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ae22:	f7fe f8a3 	bl	8008f6c <HAL_GetTick>
 800ae26:	0002      	movs	r2, r0
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	1ad3      	subs	r3, r2, r3
 800ae2c:	4a1b      	ldr	r2, [pc, #108]	@ (800ae9c <HAL_RCC_ClockConfig+0x1f4>)
 800ae2e:	4293      	cmp	r3, r2
 800ae30:	d901      	bls.n	800ae36 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800ae32:	2303      	movs	r3, #3
 800ae34:	e02c      	b.n	800ae90 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800ae36:	4b18      	ldr	r3, [pc, #96]	@ (800ae98 <HAL_RCC_ClockConfig+0x1f0>)
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	2207      	movs	r2, #7
 800ae3c:	4013      	ands	r3, r2
 800ae3e:	683a      	ldr	r2, [r7, #0]
 800ae40:	429a      	cmp	r2, r3
 800ae42:	d1ee      	bne.n	800ae22 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	2204      	movs	r2, #4
 800ae4a:	4013      	ands	r3, r2
 800ae4c:	d009      	beq.n	800ae62 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800ae4e:	4b14      	ldr	r3, [pc, #80]	@ (800aea0 <HAL_RCC_ClockConfig+0x1f8>)
 800ae50:	689b      	ldr	r3, [r3, #8]
 800ae52:	4a15      	ldr	r2, [pc, #84]	@ (800aea8 <HAL_RCC_ClockConfig+0x200>)
 800ae54:	4013      	ands	r3, r2
 800ae56:	0019      	movs	r1, r3
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	68da      	ldr	r2, [r3, #12]
 800ae5c:	4b10      	ldr	r3, [pc, #64]	@ (800aea0 <HAL_RCC_ClockConfig+0x1f8>)
 800ae5e:	430a      	orrs	r2, r1
 800ae60:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800ae62:	f000 f829 	bl	800aeb8 <HAL_RCC_GetSysClockFreq>
 800ae66:	0001      	movs	r1, r0
 800ae68:	4b0d      	ldr	r3, [pc, #52]	@ (800aea0 <HAL_RCC_ClockConfig+0x1f8>)
 800ae6a:	689b      	ldr	r3, [r3, #8]
 800ae6c:	0a1b      	lsrs	r3, r3, #8
 800ae6e:	220f      	movs	r2, #15
 800ae70:	401a      	ands	r2, r3
 800ae72:	4b0e      	ldr	r3, [pc, #56]	@ (800aeac <HAL_RCC_ClockConfig+0x204>)
 800ae74:	0092      	lsls	r2, r2, #2
 800ae76:	58d3      	ldr	r3, [r2, r3]
 800ae78:	221f      	movs	r2, #31
 800ae7a:	4013      	ands	r3, r2
 800ae7c:	000a      	movs	r2, r1
 800ae7e:	40da      	lsrs	r2, r3
 800ae80:	4b0b      	ldr	r3, [pc, #44]	@ (800aeb0 <HAL_RCC_ClockConfig+0x208>)
 800ae82:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800ae84:	4b0b      	ldr	r3, [pc, #44]	@ (800aeb4 <HAL_RCC_ClockConfig+0x20c>)
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	0018      	movs	r0, r3
 800ae8a:	f7fe f813 	bl	8008eb4 <HAL_InitTick>
 800ae8e:	0003      	movs	r3, r0
}
 800ae90:	0018      	movs	r0, r3
 800ae92:	46bd      	mov	sp, r7
 800ae94:	b004      	add	sp, #16
 800ae96:	bd80      	pop	{r7, pc}
 800ae98:	40022000 	.word	0x40022000
 800ae9c:	00001388 	.word	0x00001388
 800aea0:	40021000 	.word	0x40021000
 800aea4:	fffff0ff 	.word	0xfffff0ff
 800aea8:	ffff8fff 	.word	0xffff8fff
 800aeac:	0801c078 	.word	0x0801c078
 800aeb0:	20000004 	.word	0x20000004
 800aeb4:	20000008 	.word	0x20000008

0800aeb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b086      	sub	sp, #24
 800aebc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800aebe:	4b3c      	ldr	r3, [pc, #240]	@ (800afb0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800aec0:	689b      	ldr	r3, [r3, #8]
 800aec2:	2238      	movs	r2, #56	@ 0x38
 800aec4:	4013      	ands	r3, r2
 800aec6:	d10f      	bne.n	800aee8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800aec8:	4b39      	ldr	r3, [pc, #228]	@ (800afb0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	0adb      	lsrs	r3, r3, #11
 800aece:	2207      	movs	r2, #7
 800aed0:	4013      	ands	r3, r2
 800aed2:	2201      	movs	r2, #1
 800aed4:	409a      	lsls	r2, r3
 800aed6:	0013      	movs	r3, r2
 800aed8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800aeda:	6839      	ldr	r1, [r7, #0]
 800aedc:	4835      	ldr	r0, [pc, #212]	@ (800afb4 <HAL_RCC_GetSysClockFreq+0xfc>)
 800aede:	f7f5 f939 	bl	8000154 <__udivsi3>
 800aee2:	0003      	movs	r3, r0
 800aee4:	613b      	str	r3, [r7, #16]
 800aee6:	e05d      	b.n	800afa4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800aee8:	4b31      	ldr	r3, [pc, #196]	@ (800afb0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800aeea:	689b      	ldr	r3, [r3, #8]
 800aeec:	2238      	movs	r2, #56	@ 0x38
 800aeee:	4013      	ands	r3, r2
 800aef0:	2b08      	cmp	r3, #8
 800aef2:	d102      	bne.n	800aefa <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800aef4:	4b30      	ldr	r3, [pc, #192]	@ (800afb8 <HAL_RCC_GetSysClockFreq+0x100>)
 800aef6:	613b      	str	r3, [r7, #16]
 800aef8:	e054      	b.n	800afa4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800aefa:	4b2d      	ldr	r3, [pc, #180]	@ (800afb0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800aefc:	689b      	ldr	r3, [r3, #8]
 800aefe:	2238      	movs	r2, #56	@ 0x38
 800af00:	4013      	ands	r3, r2
 800af02:	2b10      	cmp	r3, #16
 800af04:	d138      	bne.n	800af78 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800af06:	4b2a      	ldr	r3, [pc, #168]	@ (800afb0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800af08:	68db      	ldr	r3, [r3, #12]
 800af0a:	2203      	movs	r2, #3
 800af0c:	4013      	ands	r3, r2
 800af0e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800af10:	4b27      	ldr	r3, [pc, #156]	@ (800afb0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800af12:	68db      	ldr	r3, [r3, #12]
 800af14:	091b      	lsrs	r3, r3, #4
 800af16:	2207      	movs	r2, #7
 800af18:	4013      	ands	r3, r2
 800af1a:	3301      	adds	r3, #1
 800af1c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	2b03      	cmp	r3, #3
 800af22:	d10d      	bne.n	800af40 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800af24:	68b9      	ldr	r1, [r7, #8]
 800af26:	4824      	ldr	r0, [pc, #144]	@ (800afb8 <HAL_RCC_GetSysClockFreq+0x100>)
 800af28:	f7f5 f914 	bl	8000154 <__udivsi3>
 800af2c:	0003      	movs	r3, r0
 800af2e:	0019      	movs	r1, r3
 800af30:	4b1f      	ldr	r3, [pc, #124]	@ (800afb0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800af32:	68db      	ldr	r3, [r3, #12]
 800af34:	0a1b      	lsrs	r3, r3, #8
 800af36:	227f      	movs	r2, #127	@ 0x7f
 800af38:	4013      	ands	r3, r2
 800af3a:	434b      	muls	r3, r1
 800af3c:	617b      	str	r3, [r7, #20]
        break;
 800af3e:	e00d      	b.n	800af5c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800af40:	68b9      	ldr	r1, [r7, #8]
 800af42:	481c      	ldr	r0, [pc, #112]	@ (800afb4 <HAL_RCC_GetSysClockFreq+0xfc>)
 800af44:	f7f5 f906 	bl	8000154 <__udivsi3>
 800af48:	0003      	movs	r3, r0
 800af4a:	0019      	movs	r1, r3
 800af4c:	4b18      	ldr	r3, [pc, #96]	@ (800afb0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800af4e:	68db      	ldr	r3, [r3, #12]
 800af50:	0a1b      	lsrs	r3, r3, #8
 800af52:	227f      	movs	r2, #127	@ 0x7f
 800af54:	4013      	ands	r3, r2
 800af56:	434b      	muls	r3, r1
 800af58:	617b      	str	r3, [r7, #20]
        break;
 800af5a:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800af5c:	4b14      	ldr	r3, [pc, #80]	@ (800afb0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800af5e:	68db      	ldr	r3, [r3, #12]
 800af60:	0f5b      	lsrs	r3, r3, #29
 800af62:	2207      	movs	r2, #7
 800af64:	4013      	ands	r3, r2
 800af66:	3301      	adds	r3, #1
 800af68:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800af6a:	6879      	ldr	r1, [r7, #4]
 800af6c:	6978      	ldr	r0, [r7, #20]
 800af6e:	f7f5 f8f1 	bl	8000154 <__udivsi3>
 800af72:	0003      	movs	r3, r0
 800af74:	613b      	str	r3, [r7, #16]
 800af76:	e015      	b.n	800afa4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800af78:	4b0d      	ldr	r3, [pc, #52]	@ (800afb0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800af7a:	689b      	ldr	r3, [r3, #8]
 800af7c:	2238      	movs	r2, #56	@ 0x38
 800af7e:	4013      	ands	r3, r2
 800af80:	2b20      	cmp	r3, #32
 800af82:	d103      	bne.n	800af8c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800af84:	2380      	movs	r3, #128	@ 0x80
 800af86:	021b      	lsls	r3, r3, #8
 800af88:	613b      	str	r3, [r7, #16]
 800af8a:	e00b      	b.n	800afa4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800af8c:	4b08      	ldr	r3, [pc, #32]	@ (800afb0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800af8e:	689b      	ldr	r3, [r3, #8]
 800af90:	2238      	movs	r2, #56	@ 0x38
 800af92:	4013      	ands	r3, r2
 800af94:	2b18      	cmp	r3, #24
 800af96:	d103      	bne.n	800afa0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800af98:	23fa      	movs	r3, #250	@ 0xfa
 800af9a:	01db      	lsls	r3, r3, #7
 800af9c:	613b      	str	r3, [r7, #16]
 800af9e:	e001      	b.n	800afa4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800afa0:	2300      	movs	r3, #0
 800afa2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800afa4:	693b      	ldr	r3, [r7, #16]
}
 800afa6:	0018      	movs	r0, r3
 800afa8:	46bd      	mov	sp, r7
 800afaa:	b006      	add	sp, #24
 800afac:	bd80      	pop	{r7, pc}
 800afae:	46c0      	nop			@ (mov r8, r8)
 800afb0:	40021000 	.word	0x40021000
 800afb4:	00f42400 	.word	0x00f42400
 800afb8:	007a1200 	.word	0x007a1200

0800afbc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800afbc:	b580      	push	{r7, lr}
 800afbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800afc0:	4b02      	ldr	r3, [pc, #8]	@ (800afcc <HAL_RCC_GetHCLKFreq+0x10>)
 800afc2:	681b      	ldr	r3, [r3, #0]
}
 800afc4:	0018      	movs	r0, r3
 800afc6:	46bd      	mov	sp, r7
 800afc8:	bd80      	pop	{r7, pc}
 800afca:	46c0      	nop			@ (mov r8, r8)
 800afcc:	20000004 	.word	0x20000004

0800afd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800afd0:	b5b0      	push	{r4, r5, r7, lr}
 800afd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800afd4:	f7ff fff2 	bl	800afbc <HAL_RCC_GetHCLKFreq>
 800afd8:	0004      	movs	r4, r0
 800afda:	f7ff faf9 	bl	800a5d0 <LL_RCC_GetAPB1Prescaler>
 800afde:	0003      	movs	r3, r0
 800afe0:	0b1a      	lsrs	r2, r3, #12
 800afe2:	4b05      	ldr	r3, [pc, #20]	@ (800aff8 <HAL_RCC_GetPCLK1Freq+0x28>)
 800afe4:	0092      	lsls	r2, r2, #2
 800afe6:	58d3      	ldr	r3, [r2, r3]
 800afe8:	221f      	movs	r2, #31
 800afea:	4013      	ands	r3, r2
 800afec:	40dc      	lsrs	r4, r3
 800afee:	0023      	movs	r3, r4
}
 800aff0:	0018      	movs	r0, r3
 800aff2:	46bd      	mov	sp, r7
 800aff4:	bdb0      	pop	{r4, r5, r7, pc}
 800aff6:	46c0      	nop			@ (mov r8, r8)
 800aff8:	0801c0b8 	.word	0x0801c0b8

0800affc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800affc:	b580      	push	{r7, lr}
 800affe:	b086      	sub	sp, #24
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800b004:	2313      	movs	r3, #19
 800b006:	18fb      	adds	r3, r7, r3
 800b008:	2200      	movs	r2, #0
 800b00a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b00c:	2312      	movs	r3, #18
 800b00e:	18fb      	adds	r3, r7, r3
 800b010:	2200      	movs	r2, #0
 800b012:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681a      	ldr	r2, [r3, #0]
 800b018:	2380      	movs	r3, #128	@ 0x80
 800b01a:	029b      	lsls	r3, r3, #10
 800b01c:	4013      	ands	r3, r2
 800b01e:	d100      	bne.n	800b022 <HAL_RCCEx_PeriphCLKConfig+0x26>
 800b020:	e0ad      	b.n	800b17e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b022:	2011      	movs	r0, #17
 800b024:	183b      	adds	r3, r7, r0
 800b026:	2200      	movs	r2, #0
 800b028:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b02a:	4b47      	ldr	r3, [pc, #284]	@ (800b148 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800b02c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b02e:	2380      	movs	r3, #128	@ 0x80
 800b030:	055b      	lsls	r3, r3, #21
 800b032:	4013      	ands	r3, r2
 800b034:	d110      	bne.n	800b058 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b036:	4b44      	ldr	r3, [pc, #272]	@ (800b148 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800b038:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b03a:	4b43      	ldr	r3, [pc, #268]	@ (800b148 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800b03c:	2180      	movs	r1, #128	@ 0x80
 800b03e:	0549      	lsls	r1, r1, #21
 800b040:	430a      	orrs	r2, r1
 800b042:	63da      	str	r2, [r3, #60]	@ 0x3c
 800b044:	4b40      	ldr	r3, [pc, #256]	@ (800b148 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800b046:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b048:	2380      	movs	r3, #128	@ 0x80
 800b04a:	055b      	lsls	r3, r3, #21
 800b04c:	4013      	ands	r3, r2
 800b04e:	60bb      	str	r3, [r7, #8]
 800b050:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b052:	183b      	adds	r3, r7, r0
 800b054:	2201      	movs	r2, #1
 800b056:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b058:	4b3c      	ldr	r3, [pc, #240]	@ (800b14c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800b05a:	681a      	ldr	r2, [r3, #0]
 800b05c:	4b3b      	ldr	r3, [pc, #236]	@ (800b14c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800b05e:	2180      	movs	r1, #128	@ 0x80
 800b060:	0049      	lsls	r1, r1, #1
 800b062:	430a      	orrs	r2, r1
 800b064:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b066:	f7fd ff81 	bl	8008f6c <HAL_GetTick>
 800b06a:	0003      	movs	r3, r0
 800b06c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b06e:	e00b      	b.n	800b088 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b070:	f7fd ff7c 	bl	8008f6c <HAL_GetTick>
 800b074:	0002      	movs	r2, r0
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	1ad3      	subs	r3, r2, r3
 800b07a:	2b02      	cmp	r3, #2
 800b07c:	d904      	bls.n	800b088 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800b07e:	2313      	movs	r3, #19
 800b080:	18fb      	adds	r3, r7, r3
 800b082:	2203      	movs	r2, #3
 800b084:	701a      	strb	r2, [r3, #0]
        break;
 800b086:	e005      	b.n	800b094 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b088:	4b30      	ldr	r3, [pc, #192]	@ (800b14c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800b08a:	681a      	ldr	r2, [r3, #0]
 800b08c:	2380      	movs	r3, #128	@ 0x80
 800b08e:	005b      	lsls	r3, r3, #1
 800b090:	4013      	ands	r3, r2
 800b092:	d0ed      	beq.n	800b070 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800b094:	2313      	movs	r3, #19
 800b096:	18fb      	adds	r3, r7, r3
 800b098:	781b      	ldrb	r3, [r3, #0]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d15e      	bne.n	800b15c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800b09e:	4b2a      	ldr	r3, [pc, #168]	@ (800b148 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800b0a0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b0a2:	23c0      	movs	r3, #192	@ 0xc0
 800b0a4:	009b      	lsls	r3, r3, #2
 800b0a6:	4013      	ands	r3, r2
 800b0a8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800b0aa:	697b      	ldr	r3, [r7, #20]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d019      	beq.n	800b0e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0b4:	697a      	ldr	r2, [r7, #20]
 800b0b6:	429a      	cmp	r2, r3
 800b0b8:	d014      	beq.n	800b0e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800b0ba:	4b23      	ldr	r3, [pc, #140]	@ (800b148 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800b0bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b0be:	4a24      	ldr	r2, [pc, #144]	@ (800b150 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800b0c0:	4013      	ands	r3, r2
 800b0c2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b0c4:	4b20      	ldr	r3, [pc, #128]	@ (800b148 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800b0c6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b0c8:	4b1f      	ldr	r3, [pc, #124]	@ (800b148 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800b0ca:	2180      	movs	r1, #128	@ 0x80
 800b0cc:	0249      	lsls	r1, r1, #9
 800b0ce:	430a      	orrs	r2, r1
 800b0d0:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b0d2:	4b1d      	ldr	r3, [pc, #116]	@ (800b148 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800b0d4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b0d6:	4b1c      	ldr	r3, [pc, #112]	@ (800b148 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800b0d8:	491e      	ldr	r1, [pc, #120]	@ (800b154 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 800b0da:	400a      	ands	r2, r1
 800b0dc:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800b0de:	4b1a      	ldr	r3, [pc, #104]	@ (800b148 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800b0e0:	697a      	ldr	r2, [r7, #20]
 800b0e2:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800b0e4:	697b      	ldr	r3, [r7, #20]
 800b0e6:	2201      	movs	r2, #1
 800b0e8:	4013      	ands	r3, r2
 800b0ea:	d016      	beq.n	800b11a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b0ec:	f7fd ff3e 	bl	8008f6c <HAL_GetTick>
 800b0f0:	0003      	movs	r3, r0
 800b0f2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b0f4:	e00c      	b.n	800b110 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b0f6:	f7fd ff39 	bl	8008f6c <HAL_GetTick>
 800b0fa:	0002      	movs	r2, r0
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	1ad3      	subs	r3, r2, r3
 800b100:	4a15      	ldr	r2, [pc, #84]	@ (800b158 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800b102:	4293      	cmp	r3, r2
 800b104:	d904      	bls.n	800b110 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800b106:	2313      	movs	r3, #19
 800b108:	18fb      	adds	r3, r7, r3
 800b10a:	2203      	movs	r2, #3
 800b10c:	701a      	strb	r2, [r3, #0]
            break;
 800b10e:	e004      	b.n	800b11a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b110:	4b0d      	ldr	r3, [pc, #52]	@ (800b148 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800b112:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b114:	2202      	movs	r2, #2
 800b116:	4013      	ands	r3, r2
 800b118:	d0ed      	beq.n	800b0f6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800b11a:	2313      	movs	r3, #19
 800b11c:	18fb      	adds	r3, r7, r3
 800b11e:	781b      	ldrb	r3, [r3, #0]
 800b120:	2b00      	cmp	r3, #0
 800b122:	d10a      	bne.n	800b13a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b124:	4b08      	ldr	r3, [pc, #32]	@ (800b148 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800b126:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b128:	4a09      	ldr	r2, [pc, #36]	@ (800b150 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800b12a:	4013      	ands	r3, r2
 800b12c:	0019      	movs	r1, r3
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b132:	4b05      	ldr	r3, [pc, #20]	@ (800b148 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800b134:	430a      	orrs	r2, r1
 800b136:	65da      	str	r2, [r3, #92]	@ 0x5c
 800b138:	e016      	b.n	800b168 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b13a:	2312      	movs	r3, #18
 800b13c:	18fb      	adds	r3, r7, r3
 800b13e:	2213      	movs	r2, #19
 800b140:	18ba      	adds	r2, r7, r2
 800b142:	7812      	ldrb	r2, [r2, #0]
 800b144:	701a      	strb	r2, [r3, #0]
 800b146:	e00f      	b.n	800b168 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800b148:	40021000 	.word	0x40021000
 800b14c:	40007000 	.word	0x40007000
 800b150:	fffffcff 	.word	0xfffffcff
 800b154:	fffeffff 	.word	0xfffeffff
 800b158:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b15c:	2312      	movs	r3, #18
 800b15e:	18fb      	adds	r3, r7, r3
 800b160:	2213      	movs	r2, #19
 800b162:	18ba      	adds	r2, r7, r2
 800b164:	7812      	ldrb	r2, [r2, #0]
 800b166:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b168:	2311      	movs	r3, #17
 800b16a:	18fb      	adds	r3, r7, r3
 800b16c:	781b      	ldrb	r3, [r3, #0]
 800b16e:	2b01      	cmp	r3, #1
 800b170:	d105      	bne.n	800b17e <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b172:	4bb6      	ldr	r3, [pc, #728]	@ (800b44c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b174:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b176:	4bb5      	ldr	r3, [pc, #724]	@ (800b44c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b178:	49b5      	ldr	r1, [pc, #724]	@ (800b450 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800b17a:	400a      	ands	r2, r1
 800b17c:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	2201      	movs	r2, #1
 800b184:	4013      	ands	r3, r2
 800b186:	d009      	beq.n	800b19c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b188:	4bb0      	ldr	r3, [pc, #704]	@ (800b44c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b18a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b18c:	2203      	movs	r2, #3
 800b18e:	4393      	bics	r3, r2
 800b190:	0019      	movs	r1, r3
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	685a      	ldr	r2, [r3, #4]
 800b196:	4bad      	ldr	r3, [pc, #692]	@ (800b44c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b198:	430a      	orrs	r2, r1
 800b19a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	2202      	movs	r2, #2
 800b1a2:	4013      	ands	r3, r2
 800b1a4:	d009      	beq.n	800b1ba <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800b1a6:	4ba9      	ldr	r3, [pc, #676]	@ (800b44c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b1a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b1aa:	220c      	movs	r2, #12
 800b1ac:	4393      	bics	r3, r2
 800b1ae:	0019      	movs	r1, r3
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	689a      	ldr	r2, [r3, #8]
 800b1b4:	4ba5      	ldr	r3, [pc, #660]	@ (800b44c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b1b6:	430a      	orrs	r2, r1
 800b1b8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	2204      	movs	r2, #4
 800b1c0:	4013      	ands	r3, r2
 800b1c2:	d009      	beq.n	800b1d8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800b1c4:	4ba1      	ldr	r3, [pc, #644]	@ (800b44c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b1c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b1c8:	2230      	movs	r2, #48	@ 0x30
 800b1ca:	4393      	bics	r3, r2
 800b1cc:	0019      	movs	r1, r3
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	68da      	ldr	r2, [r3, #12]
 800b1d2:	4b9e      	ldr	r3, [pc, #632]	@ (800b44c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b1d4:	430a      	orrs	r2, r1
 800b1d6:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	2210      	movs	r2, #16
 800b1de:	4013      	ands	r3, r2
 800b1e0:	d009      	beq.n	800b1f6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b1e2:	4b9a      	ldr	r3, [pc, #616]	@ (800b44c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b1e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b1e6:	4a9b      	ldr	r2, [pc, #620]	@ (800b454 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800b1e8:	4013      	ands	r3, r2
 800b1ea:	0019      	movs	r1, r3
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	691a      	ldr	r2, [r3, #16]
 800b1f0:	4b96      	ldr	r3, [pc, #600]	@ (800b44c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b1f2:	430a      	orrs	r2, r1
 800b1f4:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681a      	ldr	r2, [r3, #0]
 800b1fa:	2380      	movs	r3, #128	@ 0x80
 800b1fc:	015b      	lsls	r3, r3, #5
 800b1fe:	4013      	ands	r3, r2
 800b200:	d009      	beq.n	800b216 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 800b202:	4b92      	ldr	r3, [pc, #584]	@ (800b44c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b204:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b206:	4a94      	ldr	r2, [pc, #592]	@ (800b458 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800b208:	4013      	ands	r3, r2
 800b20a:	0019      	movs	r1, r3
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	695a      	ldr	r2, [r3, #20]
 800b210:	4b8e      	ldr	r3, [pc, #568]	@ (800b44c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b212:	430a      	orrs	r2, r1
 800b214:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681a      	ldr	r2, [r3, #0]
 800b21a:	2380      	movs	r3, #128	@ 0x80
 800b21c:	009b      	lsls	r3, r3, #2
 800b21e:	4013      	ands	r3, r2
 800b220:	d009      	beq.n	800b236 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b222:	4b8a      	ldr	r3, [pc, #552]	@ (800b44c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b224:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b226:	4a8d      	ldr	r2, [pc, #564]	@ (800b45c <HAL_RCCEx_PeriphCLKConfig+0x460>)
 800b228:	4013      	ands	r3, r2
 800b22a:	0019      	movs	r1, r3
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b230:	4b86      	ldr	r3, [pc, #536]	@ (800b44c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b232:	430a      	orrs	r2, r1
 800b234:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681a      	ldr	r2, [r3, #0]
 800b23a:	2380      	movs	r3, #128	@ 0x80
 800b23c:	00db      	lsls	r3, r3, #3
 800b23e:	4013      	ands	r3, r2
 800b240:	d009      	beq.n	800b256 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b242:	4b82      	ldr	r3, [pc, #520]	@ (800b44c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b244:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b246:	4a86      	ldr	r2, [pc, #536]	@ (800b460 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 800b248:	4013      	ands	r3, r2
 800b24a:	0019      	movs	r1, r3
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b250:	4b7e      	ldr	r3, [pc, #504]	@ (800b44c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b252:	430a      	orrs	r2, r1
 800b254:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	2220      	movs	r2, #32
 800b25c:	4013      	ands	r3, r2
 800b25e:	d009      	beq.n	800b274 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b260:	4b7a      	ldr	r3, [pc, #488]	@ (800b44c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b262:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b264:	4a7f      	ldr	r2, [pc, #508]	@ (800b464 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b266:	4013      	ands	r3, r2
 800b268:	0019      	movs	r1, r3
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	699a      	ldr	r2, [r3, #24]
 800b26e:	4b77      	ldr	r3, [pc, #476]	@ (800b44c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b270:	430a      	orrs	r2, r1
 800b272:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	2240      	movs	r2, #64	@ 0x40
 800b27a:	4013      	ands	r3, r2
 800b27c:	d009      	beq.n	800b292 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800b27e:	4b73      	ldr	r3, [pc, #460]	@ (800b44c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b280:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b282:	4a79      	ldr	r2, [pc, #484]	@ (800b468 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800b284:	4013      	ands	r3, r2
 800b286:	0019      	movs	r1, r3
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	69da      	ldr	r2, [r3, #28]
 800b28c:	4b6f      	ldr	r3, [pc, #444]	@ (800b44c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b28e:	430a      	orrs	r2, r1
 800b290:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681a      	ldr	r2, [r3, #0]
 800b296:	2380      	movs	r3, #128	@ 0x80
 800b298:	01db      	lsls	r3, r3, #7
 800b29a:	4013      	ands	r3, r2
 800b29c:	d015      	beq.n	800b2ca <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b29e:	4b6b      	ldr	r3, [pc, #428]	@ (800b44c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b2a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b2a2:	009b      	lsls	r3, r3, #2
 800b2a4:	0899      	lsrs	r1, r3, #2
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b2aa:	4b68      	ldr	r3, [pc, #416]	@ (800b44c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b2ac:	430a      	orrs	r2, r1
 800b2ae:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b2b4:	2380      	movs	r3, #128	@ 0x80
 800b2b6:	05db      	lsls	r3, r3, #23
 800b2b8:	429a      	cmp	r2, r3
 800b2ba:	d106      	bne.n	800b2ca <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800b2bc:	4b63      	ldr	r3, [pc, #396]	@ (800b44c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b2be:	68da      	ldr	r2, [r3, #12]
 800b2c0:	4b62      	ldr	r3, [pc, #392]	@ (800b44c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b2c2:	2180      	movs	r1, #128	@ 0x80
 800b2c4:	0249      	lsls	r1, r1, #9
 800b2c6:	430a      	orrs	r2, r1
 800b2c8:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681a      	ldr	r2, [r3, #0]
 800b2ce:	2380      	movs	r3, #128	@ 0x80
 800b2d0:	031b      	lsls	r3, r3, #12
 800b2d2:	4013      	ands	r3, r2
 800b2d4:	d009      	beq.n	800b2ea <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b2d6:	4b5d      	ldr	r3, [pc, #372]	@ (800b44c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b2d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b2da:	2240      	movs	r2, #64	@ 0x40
 800b2dc:	4393      	bics	r3, r2
 800b2de:	0019      	movs	r1, r3
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b2e4:	4b59      	ldr	r3, [pc, #356]	@ (800b44c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b2e6:	430a      	orrs	r2, r1
 800b2e8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681a      	ldr	r2, [r3, #0]
 800b2ee:	2380      	movs	r3, #128	@ 0x80
 800b2f0:	039b      	lsls	r3, r3, #14
 800b2f2:	4013      	ands	r3, r2
 800b2f4:	d016      	beq.n	800b324 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800b2f6:	4b55      	ldr	r3, [pc, #340]	@ (800b44c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b2f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b2fa:	4a5c      	ldr	r2, [pc, #368]	@ (800b46c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800b2fc:	4013      	ands	r3, r2
 800b2fe:	0019      	movs	r1, r3
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b304:	4b51      	ldr	r3, [pc, #324]	@ (800b44c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b306:	430a      	orrs	r2, r1
 800b308:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b30e:	2380      	movs	r3, #128	@ 0x80
 800b310:	03db      	lsls	r3, r3, #15
 800b312:	429a      	cmp	r2, r3
 800b314:	d106      	bne.n	800b324 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800b316:	4b4d      	ldr	r3, [pc, #308]	@ (800b44c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b318:	68da      	ldr	r2, [r3, #12]
 800b31a:	4b4c      	ldr	r3, [pc, #304]	@ (800b44c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b31c:	2180      	movs	r1, #128	@ 0x80
 800b31e:	0449      	lsls	r1, r1, #17
 800b320:	430a      	orrs	r2, r1
 800b322:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681a      	ldr	r2, [r3, #0]
 800b328:	2380      	movs	r3, #128	@ 0x80
 800b32a:	03db      	lsls	r3, r3, #15
 800b32c:	4013      	ands	r3, r2
 800b32e:	d016      	beq.n	800b35e <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800b330:	4b46      	ldr	r3, [pc, #280]	@ (800b44c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b332:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b334:	4a4e      	ldr	r2, [pc, #312]	@ (800b470 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800b336:	4013      	ands	r3, r2
 800b338:	0019      	movs	r1, r3
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b33e:	4b43      	ldr	r3, [pc, #268]	@ (800b44c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b340:	430a      	orrs	r2, r1
 800b342:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b348:	2380      	movs	r3, #128	@ 0x80
 800b34a:	045b      	lsls	r3, r3, #17
 800b34c:	429a      	cmp	r2, r3
 800b34e:	d106      	bne.n	800b35e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800b350:	4b3e      	ldr	r3, [pc, #248]	@ (800b44c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b352:	68da      	ldr	r2, [r3, #12]
 800b354:	4b3d      	ldr	r3, [pc, #244]	@ (800b44c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b356:	2180      	movs	r1, #128	@ 0x80
 800b358:	0449      	lsls	r1, r1, #17
 800b35a:	430a      	orrs	r2, r1
 800b35c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681a      	ldr	r2, [r3, #0]
 800b362:	2380      	movs	r3, #128	@ 0x80
 800b364:	011b      	lsls	r3, r3, #4
 800b366:	4013      	ands	r3, r2
 800b368:	d014      	beq.n	800b394 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800b36a:	4b38      	ldr	r3, [pc, #224]	@ (800b44c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b36c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b36e:	2203      	movs	r2, #3
 800b370:	4393      	bics	r3, r2
 800b372:	0019      	movs	r1, r3
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	6a1a      	ldr	r2, [r3, #32]
 800b378:	4b34      	ldr	r3, [pc, #208]	@ (800b44c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b37a:	430a      	orrs	r2, r1
 800b37c:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	6a1b      	ldr	r3, [r3, #32]
 800b382:	2b01      	cmp	r3, #1
 800b384:	d106      	bne.n	800b394 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800b386:	4b31      	ldr	r3, [pc, #196]	@ (800b44c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b388:	68da      	ldr	r2, [r3, #12]
 800b38a:	4b30      	ldr	r3, [pc, #192]	@ (800b44c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b38c:	2180      	movs	r1, #128	@ 0x80
 800b38e:	0249      	lsls	r1, r1, #9
 800b390:	430a      	orrs	r2, r1
 800b392:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681a      	ldr	r2, [r3, #0]
 800b398:	2380      	movs	r3, #128	@ 0x80
 800b39a:	019b      	lsls	r3, r3, #6
 800b39c:	4013      	ands	r3, r2
 800b39e:	d014      	beq.n	800b3ca <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800b3a0:	4b2a      	ldr	r3, [pc, #168]	@ (800b44c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b3a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b3a4:	220c      	movs	r2, #12
 800b3a6:	4393      	bics	r3, r2
 800b3a8:	0019      	movs	r1, r3
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b3ae:	4b27      	ldr	r3, [pc, #156]	@ (800b44c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b3b0:	430a      	orrs	r2, r1
 800b3b2:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3b8:	2b04      	cmp	r3, #4
 800b3ba:	d106      	bne.n	800b3ca <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800b3bc:	4b23      	ldr	r3, [pc, #140]	@ (800b44c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b3be:	68da      	ldr	r2, [r3, #12]
 800b3c0:	4b22      	ldr	r3, [pc, #136]	@ (800b44c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b3c2:	2180      	movs	r1, #128	@ 0x80
 800b3c4:	0249      	lsls	r1, r1, #9
 800b3c6:	430a      	orrs	r2, r1
 800b3c8:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	681a      	ldr	r2, [r3, #0]
 800b3ce:	2380      	movs	r3, #128	@ 0x80
 800b3d0:	045b      	lsls	r3, r3, #17
 800b3d2:	4013      	ands	r3, r2
 800b3d4:	d016      	beq.n	800b404 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b3d6:	4b1d      	ldr	r3, [pc, #116]	@ (800b44c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b3d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b3da:	4a22      	ldr	r2, [pc, #136]	@ (800b464 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b3dc:	4013      	ands	r3, r2
 800b3de:	0019      	movs	r1, r3
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b3e4:	4b19      	ldr	r3, [pc, #100]	@ (800b44c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b3e6:	430a      	orrs	r2, r1
 800b3e8:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b3ee:	2380      	movs	r3, #128	@ 0x80
 800b3f0:	019b      	lsls	r3, r3, #6
 800b3f2:	429a      	cmp	r2, r3
 800b3f4:	d106      	bne.n	800b404 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800b3f6:	4b15      	ldr	r3, [pc, #84]	@ (800b44c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b3f8:	68da      	ldr	r2, [r3, #12]
 800b3fa:	4b14      	ldr	r3, [pc, #80]	@ (800b44c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b3fc:	2180      	movs	r1, #128	@ 0x80
 800b3fe:	0449      	lsls	r1, r1, #17
 800b400:	430a      	orrs	r2, r1
 800b402:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	681a      	ldr	r2, [r3, #0]
 800b408:	2380      	movs	r3, #128	@ 0x80
 800b40a:	049b      	lsls	r3, r3, #18
 800b40c:	4013      	ands	r3, r2
 800b40e:	d016      	beq.n	800b43e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b410:	4b0e      	ldr	r3, [pc, #56]	@ (800b44c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b412:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b414:	4a10      	ldr	r2, [pc, #64]	@ (800b458 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800b416:	4013      	ands	r3, r2
 800b418:	0019      	movs	r1, r3
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b41e:	4b0b      	ldr	r3, [pc, #44]	@ (800b44c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b420:	430a      	orrs	r2, r1
 800b422:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b428:	2380      	movs	r3, #128	@ 0x80
 800b42a:	005b      	lsls	r3, r3, #1
 800b42c:	429a      	cmp	r2, r3
 800b42e:	d106      	bne.n	800b43e <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800b430:	4b06      	ldr	r3, [pc, #24]	@ (800b44c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b432:	68da      	ldr	r2, [r3, #12]
 800b434:	4b05      	ldr	r3, [pc, #20]	@ (800b44c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800b436:	2180      	movs	r1, #128	@ 0x80
 800b438:	0449      	lsls	r1, r1, #17
 800b43a:	430a      	orrs	r2, r1
 800b43c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800b43e:	2312      	movs	r3, #18
 800b440:	18fb      	adds	r3, r7, r3
 800b442:	781b      	ldrb	r3, [r3, #0]
}
 800b444:	0018      	movs	r0, r3
 800b446:	46bd      	mov	sp, r7
 800b448:	b006      	add	sp, #24
 800b44a:	bd80      	pop	{r7, pc}
 800b44c:	40021000 	.word	0x40021000
 800b450:	efffffff 	.word	0xefffffff
 800b454:	fffff3ff 	.word	0xfffff3ff
 800b458:	fffffcff 	.word	0xfffffcff
 800b45c:	fff3ffff 	.word	0xfff3ffff
 800b460:	ffcfffff 	.word	0xffcfffff
 800b464:	ffffcfff 	.word	0xffffcfff
 800b468:	ffff3fff 	.word	0xffff3fff
 800b46c:	ffbfffff 	.word	0xffbfffff
 800b470:	feffffff 	.word	0xfeffffff

0800b474 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800b474:	b5b0      	push	{r4, r5, r7, lr}
 800b476:	b084      	sub	sp, #16
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800b47c:	230f      	movs	r3, #15
 800b47e:	18fb      	adds	r3, r7, r3
 800b480:	2201      	movs	r2, #1
 800b482:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d100      	bne.n	800b48c <HAL_RTC_Init+0x18>
 800b48a:	e08c      	b.n	800b5a6 <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	2229      	movs	r2, #41	@ 0x29
 800b490:	5c9b      	ldrb	r3, [r3, r2]
 800b492:	b2db      	uxtb	r3, r3
 800b494:	2b00      	cmp	r3, #0
 800b496:	d10b      	bne.n	800b4b0 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	2228      	movs	r2, #40	@ 0x28
 800b49c:	2100      	movs	r1, #0
 800b49e:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	2288      	movs	r2, #136	@ 0x88
 800b4a4:	0212      	lsls	r2, r2, #8
 800b4a6:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	0018      	movs	r0, r3
 800b4ac:	f7fc fcc4 	bl	8007e38 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	2229      	movs	r2, #41	@ 0x29
 800b4b4:	2102      	movs	r1, #2
 800b4b6:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	68db      	ldr	r3, [r3, #12]
 800b4be:	2210      	movs	r2, #16
 800b4c0:	4013      	ands	r3, r2
 800b4c2:	2b10      	cmp	r3, #16
 800b4c4:	d062      	beq.n	800b58c <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	22ca      	movs	r2, #202	@ 0xca
 800b4cc:	625a      	str	r2, [r3, #36]	@ 0x24
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	2253      	movs	r2, #83	@ 0x53
 800b4d4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800b4d6:	250f      	movs	r5, #15
 800b4d8:	197c      	adds	r4, r7, r5
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	0018      	movs	r0, r3
 800b4de:	f000 f891 	bl	800b604 <RTC_EnterInitMode>
 800b4e2:	0003      	movs	r3, r0
 800b4e4:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 800b4e6:	0028      	movs	r0, r5
 800b4e8:	183b      	adds	r3, r7, r0
 800b4ea:	781b      	ldrb	r3, [r3, #0]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d12c      	bne.n	800b54a <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	699a      	ldr	r2, [r3, #24]
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	492e      	ldr	r1, [pc, #184]	@ (800b5b4 <HAL_RTC_Init+0x140>)
 800b4fc:	400a      	ands	r2, r1
 800b4fe:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	6999      	ldr	r1, [r3, #24]
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	689a      	ldr	r2, [r3, #8]
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	695b      	ldr	r3, [r3, #20]
 800b50e:	431a      	orrs	r2, r3
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	69db      	ldr	r3, [r3, #28]
 800b514:	431a      	orrs	r2, r3
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	430a      	orrs	r2, r1
 800b51c:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	687a      	ldr	r2, [r7, #4]
 800b524:	6912      	ldr	r2, [r2, #16]
 800b526:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	6919      	ldr	r1, [r3, #16]
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	68db      	ldr	r3, [r3, #12]
 800b532:	041a      	lsls	r2, r3, #16
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	430a      	orrs	r2, r1
 800b53a:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800b53c:	183c      	adds	r4, r7, r0
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	0018      	movs	r0, r3
 800b542:	f000 f8a1 	bl	800b688 <RTC_ExitInitMode>
 800b546:	0003      	movs	r3, r0
 800b548:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 800b54a:	230f      	movs	r3, #15
 800b54c:	18fb      	adds	r3, r7, r3
 800b54e:	781b      	ldrb	r3, [r3, #0]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d116      	bne.n	800b582 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	699a      	ldr	r2, [r3, #24]
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	00d2      	lsls	r2, r2, #3
 800b560:	08d2      	lsrs	r2, r2, #3
 800b562:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	6999      	ldr	r1, [r3, #24]
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	6a1b      	ldr	r3, [r3, #32]
 800b572:	431a      	orrs	r2, r3
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	699b      	ldr	r3, [r3, #24]
 800b578:	431a      	orrs	r2, r3
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	430a      	orrs	r2, r1
 800b580:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	22ff      	movs	r2, #255	@ 0xff
 800b588:	625a      	str	r2, [r3, #36]	@ 0x24
 800b58a:	e003      	b.n	800b594 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800b58c:	230f      	movs	r3, #15
 800b58e:	18fb      	adds	r3, r7, r3
 800b590:	2200      	movs	r2, #0
 800b592:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 800b594:	230f      	movs	r3, #15
 800b596:	18fb      	adds	r3, r7, r3
 800b598:	781b      	ldrb	r3, [r3, #0]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d103      	bne.n	800b5a6 <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	2229      	movs	r2, #41	@ 0x29
 800b5a2:	2101      	movs	r1, #1
 800b5a4:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 800b5a6:	230f      	movs	r3, #15
 800b5a8:	18fb      	adds	r3, r7, r3
 800b5aa:	781b      	ldrb	r3, [r3, #0]
}
 800b5ac:	0018      	movs	r0, r3
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	b004      	add	sp, #16
 800b5b2:	bdb0      	pop	{r4, r5, r7, pc}
 800b5b4:	fb8fffbf 	.word	0xfb8fffbf

0800b5b8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b084      	sub	sp, #16
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	4a0e      	ldr	r2, [pc, #56]	@ (800b600 <HAL_RTC_WaitForSynchro+0x48>)
 800b5c6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800b5c8:	f7fd fcd0 	bl	8008f6c <HAL_GetTick>
 800b5cc:	0003      	movs	r3, r0
 800b5ce:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800b5d0:	e00a      	b.n	800b5e8 <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800b5d2:	f7fd fccb 	bl	8008f6c <HAL_GetTick>
 800b5d6:	0002      	movs	r2, r0
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	1ad2      	subs	r2, r2, r3
 800b5dc:	23fa      	movs	r3, #250	@ 0xfa
 800b5de:	009b      	lsls	r3, r3, #2
 800b5e0:	429a      	cmp	r2, r3
 800b5e2:	d901      	bls.n	800b5e8 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800b5e4:	2303      	movs	r3, #3
 800b5e6:	e006      	b.n	800b5f6 <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	68db      	ldr	r3, [r3, #12]
 800b5ee:	2220      	movs	r2, #32
 800b5f0:	4013      	ands	r3, r2
 800b5f2:	d0ee      	beq.n	800b5d2 <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 800b5f4:	2300      	movs	r3, #0
}
 800b5f6:	0018      	movs	r0, r3
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	b004      	add	sp, #16
 800b5fc:	bd80      	pop	{r7, pc}
 800b5fe:	46c0      	nop			@ (mov r8, r8)
 800b600:	0001005f 	.word	0x0001005f

0800b604 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800b604:	b580      	push	{r7, lr}
 800b606:	b084      	sub	sp, #16
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 800b60c:	230f      	movs	r3, #15
 800b60e:	18fb      	adds	r3, r7, r3
 800b610:	2200      	movs	r2, #0
 800b612:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	68db      	ldr	r3, [r3, #12]
 800b61a:	2240      	movs	r2, #64	@ 0x40
 800b61c:	4013      	ands	r3, r2
 800b61e:	d12c      	bne.n	800b67a <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	68da      	ldr	r2, [r3, #12]
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	2180      	movs	r1, #128	@ 0x80
 800b62c:	430a      	orrs	r2, r1
 800b62e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800b630:	f7fd fc9c 	bl	8008f6c <HAL_GetTick>
 800b634:	0003      	movs	r3, r0
 800b636:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800b638:	e014      	b.n	800b664 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800b63a:	f7fd fc97 	bl	8008f6c <HAL_GetTick>
 800b63e:	0002      	movs	r2, r0
 800b640:	68bb      	ldr	r3, [r7, #8]
 800b642:	1ad2      	subs	r2, r2, r3
 800b644:	200f      	movs	r0, #15
 800b646:	183b      	adds	r3, r7, r0
 800b648:	1839      	adds	r1, r7, r0
 800b64a:	7809      	ldrb	r1, [r1, #0]
 800b64c:	7019      	strb	r1, [r3, #0]
 800b64e:	23fa      	movs	r3, #250	@ 0xfa
 800b650:	009b      	lsls	r3, r3, #2
 800b652:	429a      	cmp	r2, r3
 800b654:	d906      	bls.n	800b664 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 800b656:	183b      	adds	r3, r7, r0
 800b658:	2203      	movs	r2, #3
 800b65a:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	2229      	movs	r2, #41	@ 0x29
 800b660:	2103      	movs	r1, #3
 800b662:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	68db      	ldr	r3, [r3, #12]
 800b66a:	2240      	movs	r2, #64	@ 0x40
 800b66c:	4013      	ands	r3, r2
 800b66e:	d104      	bne.n	800b67a <RTC_EnterInitMode+0x76>
 800b670:	230f      	movs	r3, #15
 800b672:	18fb      	adds	r3, r7, r3
 800b674:	781b      	ldrb	r3, [r3, #0]
 800b676:	2b03      	cmp	r3, #3
 800b678:	d1df      	bne.n	800b63a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800b67a:	230f      	movs	r3, #15
 800b67c:	18fb      	adds	r3, r7, r3
 800b67e:	781b      	ldrb	r3, [r3, #0]
}
 800b680:	0018      	movs	r0, r3
 800b682:	46bd      	mov	sp, r7
 800b684:	b004      	add	sp, #16
 800b686:	bd80      	pop	{r7, pc}

0800b688 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800b688:	b590      	push	{r4, r7, lr}
 800b68a:	b085      	sub	sp, #20
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b690:	240f      	movs	r4, #15
 800b692:	193b      	adds	r3, r7, r4
 800b694:	2200      	movs	r2, #0
 800b696:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800b698:	4b1c      	ldr	r3, [pc, #112]	@ (800b70c <RTC_ExitInitMode+0x84>)
 800b69a:	68da      	ldr	r2, [r3, #12]
 800b69c:	4b1b      	ldr	r3, [pc, #108]	@ (800b70c <RTC_ExitInitMode+0x84>)
 800b69e:	2180      	movs	r1, #128	@ 0x80
 800b6a0:	438a      	bics	r2, r1
 800b6a2:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800b6a4:	4b19      	ldr	r3, [pc, #100]	@ (800b70c <RTC_ExitInitMode+0x84>)
 800b6a6:	699b      	ldr	r3, [r3, #24]
 800b6a8:	2220      	movs	r2, #32
 800b6aa:	4013      	ands	r3, r2
 800b6ac:	d10d      	bne.n	800b6ca <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	0018      	movs	r0, r3
 800b6b2:	f7ff ff81 	bl	800b5b8 <HAL_RTC_WaitForSynchro>
 800b6b6:	1e03      	subs	r3, r0, #0
 800b6b8:	d021      	beq.n	800b6fe <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	2229      	movs	r2, #41	@ 0x29
 800b6be:	2103      	movs	r1, #3
 800b6c0:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800b6c2:	193b      	adds	r3, r7, r4
 800b6c4:	2203      	movs	r2, #3
 800b6c6:	701a      	strb	r2, [r3, #0]
 800b6c8:	e019      	b.n	800b6fe <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800b6ca:	4b10      	ldr	r3, [pc, #64]	@ (800b70c <RTC_ExitInitMode+0x84>)
 800b6cc:	699a      	ldr	r2, [r3, #24]
 800b6ce:	4b0f      	ldr	r3, [pc, #60]	@ (800b70c <RTC_ExitInitMode+0x84>)
 800b6d0:	2120      	movs	r1, #32
 800b6d2:	438a      	bics	r2, r1
 800b6d4:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	0018      	movs	r0, r3
 800b6da:	f7ff ff6d 	bl	800b5b8 <HAL_RTC_WaitForSynchro>
 800b6de:	1e03      	subs	r3, r0, #0
 800b6e0:	d007      	beq.n	800b6f2 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	2229      	movs	r2, #41	@ 0x29
 800b6e6:	2103      	movs	r1, #3
 800b6e8:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800b6ea:	230f      	movs	r3, #15
 800b6ec:	18fb      	adds	r3, r7, r3
 800b6ee:	2203      	movs	r2, #3
 800b6f0:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800b6f2:	4b06      	ldr	r3, [pc, #24]	@ (800b70c <RTC_ExitInitMode+0x84>)
 800b6f4:	699a      	ldr	r2, [r3, #24]
 800b6f6:	4b05      	ldr	r3, [pc, #20]	@ (800b70c <RTC_ExitInitMode+0x84>)
 800b6f8:	2120      	movs	r1, #32
 800b6fa:	430a      	orrs	r2, r1
 800b6fc:	619a      	str	r2, [r3, #24]
  }

  return status;
 800b6fe:	230f      	movs	r3, #15
 800b700:	18fb      	adds	r3, r7, r3
 800b702:	781b      	ldrb	r3, [r3, #0]
}
 800b704:	0018      	movs	r0, r3
 800b706:	46bd      	mov	sp, r7
 800b708:	b005      	add	sp, #20
 800b70a:	bd90      	pop	{r4, r7, pc}
 800b70c:	40002800 	.word	0x40002800

0800b710 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b084      	sub	sp, #16
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d101      	bne.n	800b722 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b71e:	2301      	movs	r3, #1
 800b720:	e0a8      	b.n	800b874 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b726:	2b00      	cmp	r3, #0
 800b728:	d109      	bne.n	800b73e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	685a      	ldr	r2, [r3, #4]
 800b72e:	2382      	movs	r3, #130	@ 0x82
 800b730:	005b      	lsls	r3, r3, #1
 800b732:	429a      	cmp	r2, r3
 800b734:	d009      	beq.n	800b74a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	2200      	movs	r2, #0
 800b73a:	61da      	str	r2, [r3, #28]
 800b73c:	e005      	b.n	800b74a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	2200      	movs	r2, #0
 800b742:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	2200      	movs	r2, #0
 800b748:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	2200      	movs	r2, #0
 800b74e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	225d      	movs	r2, #93	@ 0x5d
 800b754:	5c9b      	ldrb	r3, [r3, r2]
 800b756:	b2db      	uxtb	r3, r3
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d107      	bne.n	800b76c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	225c      	movs	r2, #92	@ 0x5c
 800b760:	2100      	movs	r1, #0
 800b762:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	0018      	movs	r0, r3
 800b768:	f7fc fba4 	bl	8007eb4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	225d      	movs	r2, #93	@ 0x5d
 800b770:	2102      	movs	r1, #2
 800b772:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	681a      	ldr	r2, [r3, #0]
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	2140      	movs	r1, #64	@ 0x40
 800b780:	438a      	bics	r2, r1
 800b782:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	68da      	ldr	r2, [r3, #12]
 800b788:	23e0      	movs	r3, #224	@ 0xe0
 800b78a:	00db      	lsls	r3, r3, #3
 800b78c:	429a      	cmp	r2, r3
 800b78e:	d902      	bls.n	800b796 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800b790:	2300      	movs	r3, #0
 800b792:	60fb      	str	r3, [r7, #12]
 800b794:	e002      	b.n	800b79c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800b796:	2380      	movs	r3, #128	@ 0x80
 800b798:	015b      	lsls	r3, r3, #5
 800b79a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	68da      	ldr	r2, [r3, #12]
 800b7a0:	23f0      	movs	r3, #240	@ 0xf0
 800b7a2:	011b      	lsls	r3, r3, #4
 800b7a4:	429a      	cmp	r2, r3
 800b7a6:	d008      	beq.n	800b7ba <HAL_SPI_Init+0xaa>
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	68da      	ldr	r2, [r3, #12]
 800b7ac:	23e0      	movs	r3, #224	@ 0xe0
 800b7ae:	00db      	lsls	r3, r3, #3
 800b7b0:	429a      	cmp	r2, r3
 800b7b2:	d002      	beq.n	800b7ba <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	685a      	ldr	r2, [r3, #4]
 800b7be:	2382      	movs	r3, #130	@ 0x82
 800b7c0:	005b      	lsls	r3, r3, #1
 800b7c2:	401a      	ands	r2, r3
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	6899      	ldr	r1, [r3, #8]
 800b7c8:	2384      	movs	r3, #132	@ 0x84
 800b7ca:	021b      	lsls	r3, r3, #8
 800b7cc:	400b      	ands	r3, r1
 800b7ce:	431a      	orrs	r2, r3
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	691b      	ldr	r3, [r3, #16]
 800b7d4:	2102      	movs	r1, #2
 800b7d6:	400b      	ands	r3, r1
 800b7d8:	431a      	orrs	r2, r3
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	695b      	ldr	r3, [r3, #20]
 800b7de:	2101      	movs	r1, #1
 800b7e0:	400b      	ands	r3, r1
 800b7e2:	431a      	orrs	r2, r3
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	6999      	ldr	r1, [r3, #24]
 800b7e8:	2380      	movs	r3, #128	@ 0x80
 800b7ea:	009b      	lsls	r3, r3, #2
 800b7ec:	400b      	ands	r3, r1
 800b7ee:	431a      	orrs	r2, r3
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	69db      	ldr	r3, [r3, #28]
 800b7f4:	2138      	movs	r1, #56	@ 0x38
 800b7f6:	400b      	ands	r3, r1
 800b7f8:	431a      	orrs	r2, r3
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	6a1b      	ldr	r3, [r3, #32]
 800b7fe:	2180      	movs	r1, #128	@ 0x80
 800b800:	400b      	ands	r3, r1
 800b802:	431a      	orrs	r2, r3
 800b804:	0011      	movs	r1, r2
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b80a:	2380      	movs	r3, #128	@ 0x80
 800b80c:	019b      	lsls	r3, r3, #6
 800b80e:	401a      	ands	r2, r3
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	430a      	orrs	r2, r1
 800b816:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	699b      	ldr	r3, [r3, #24]
 800b81c:	0c1b      	lsrs	r3, r3, #16
 800b81e:	2204      	movs	r2, #4
 800b820:	401a      	ands	r2, r3
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b826:	2110      	movs	r1, #16
 800b828:	400b      	ands	r3, r1
 800b82a:	431a      	orrs	r2, r3
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b830:	2108      	movs	r1, #8
 800b832:	400b      	ands	r3, r1
 800b834:	431a      	orrs	r2, r3
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	68d9      	ldr	r1, [r3, #12]
 800b83a:	23f0      	movs	r3, #240	@ 0xf0
 800b83c:	011b      	lsls	r3, r3, #4
 800b83e:	400b      	ands	r3, r1
 800b840:	431a      	orrs	r2, r3
 800b842:	0011      	movs	r1, r2
 800b844:	68fa      	ldr	r2, [r7, #12]
 800b846:	2380      	movs	r3, #128	@ 0x80
 800b848:	015b      	lsls	r3, r3, #5
 800b84a:	401a      	ands	r2, r3
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	430a      	orrs	r2, r1
 800b852:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	69da      	ldr	r2, [r3, #28]
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	4907      	ldr	r1, [pc, #28]	@ (800b87c <HAL_SPI_Init+0x16c>)
 800b860:	400a      	ands	r2, r1
 800b862:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2200      	movs	r2, #0
 800b868:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	225d      	movs	r2, #93	@ 0x5d
 800b86e:	2101      	movs	r1, #1
 800b870:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b872:	2300      	movs	r3, #0
}
 800b874:	0018      	movs	r0, r3
 800b876:	46bd      	mov	sp, r7
 800b878:	b004      	add	sp, #16
 800b87a:	bd80      	pop	{r7, pc}
 800b87c:	fffff7ff 	.word	0xfffff7ff

0800b880 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b880:	b580      	push	{r7, lr}
 800b882:	b088      	sub	sp, #32
 800b884:	af00      	add	r7, sp, #0
 800b886:	60f8      	str	r0, [r7, #12]
 800b888:	60b9      	str	r1, [r7, #8]
 800b88a:	603b      	str	r3, [r7, #0]
 800b88c:	1dbb      	adds	r3, r7, #6
 800b88e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b890:	231f      	movs	r3, #31
 800b892:	18fb      	adds	r3, r7, r3
 800b894:	2200      	movs	r2, #0
 800b896:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	225c      	movs	r2, #92	@ 0x5c
 800b89c:	5c9b      	ldrb	r3, [r3, r2]
 800b89e:	2b01      	cmp	r3, #1
 800b8a0:	d101      	bne.n	800b8a6 <HAL_SPI_Transmit+0x26>
 800b8a2:	2302      	movs	r3, #2
 800b8a4:	e147      	b.n	800bb36 <HAL_SPI_Transmit+0x2b6>
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	225c      	movs	r2, #92	@ 0x5c
 800b8aa:	2101      	movs	r1, #1
 800b8ac:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b8ae:	f7fd fb5d 	bl	8008f6c <HAL_GetTick>
 800b8b2:	0003      	movs	r3, r0
 800b8b4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800b8b6:	2316      	movs	r3, #22
 800b8b8:	18fb      	adds	r3, r7, r3
 800b8ba:	1dba      	adds	r2, r7, #6
 800b8bc:	8812      	ldrh	r2, [r2, #0]
 800b8be:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	225d      	movs	r2, #93	@ 0x5d
 800b8c4:	5c9b      	ldrb	r3, [r3, r2]
 800b8c6:	b2db      	uxtb	r3, r3
 800b8c8:	2b01      	cmp	r3, #1
 800b8ca:	d004      	beq.n	800b8d6 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800b8cc:	231f      	movs	r3, #31
 800b8ce:	18fb      	adds	r3, r7, r3
 800b8d0:	2202      	movs	r2, #2
 800b8d2:	701a      	strb	r2, [r3, #0]
    goto error;
 800b8d4:	e128      	b.n	800bb28 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 800b8d6:	68bb      	ldr	r3, [r7, #8]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d003      	beq.n	800b8e4 <HAL_SPI_Transmit+0x64>
 800b8dc:	1dbb      	adds	r3, r7, #6
 800b8de:	881b      	ldrh	r3, [r3, #0]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d104      	bne.n	800b8ee <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800b8e4:	231f      	movs	r3, #31
 800b8e6:	18fb      	adds	r3, r7, r3
 800b8e8:	2201      	movs	r2, #1
 800b8ea:	701a      	strb	r2, [r3, #0]
    goto error;
 800b8ec:	e11c      	b.n	800bb28 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	225d      	movs	r2, #93	@ 0x5d
 800b8f2:	2103      	movs	r1, #3
 800b8f4:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	2200      	movs	r2, #0
 800b8fa:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	68ba      	ldr	r2, [r7, #8]
 800b900:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	1dba      	adds	r2, r7, #6
 800b906:	8812      	ldrh	r2, [r2, #0]
 800b908:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	1dba      	adds	r2, r7, #6
 800b90e:	8812      	ldrh	r2, [r2, #0]
 800b910:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	2200      	movs	r2, #0
 800b916:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	2244      	movs	r2, #68	@ 0x44
 800b91c:	2100      	movs	r1, #0
 800b91e:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	2246      	movs	r2, #70	@ 0x46
 800b924:	2100      	movs	r1, #0
 800b926:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	2200      	movs	r2, #0
 800b92c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	2200      	movs	r2, #0
 800b932:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	689a      	ldr	r2, [r3, #8]
 800b938:	2380      	movs	r3, #128	@ 0x80
 800b93a:	021b      	lsls	r3, r3, #8
 800b93c:	429a      	cmp	r2, r3
 800b93e:	d110      	bne.n	800b962 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	681a      	ldr	r2, [r3, #0]
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	2140      	movs	r1, #64	@ 0x40
 800b94c:	438a      	bics	r2, r1
 800b94e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	681a      	ldr	r2, [r3, #0]
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	2180      	movs	r1, #128	@ 0x80
 800b95c:	01c9      	lsls	r1, r1, #7
 800b95e:	430a      	orrs	r2, r1
 800b960:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	2240      	movs	r2, #64	@ 0x40
 800b96a:	4013      	ands	r3, r2
 800b96c:	2b40      	cmp	r3, #64	@ 0x40
 800b96e:	d007      	beq.n	800b980 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	681a      	ldr	r2, [r3, #0]
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	2140      	movs	r1, #64	@ 0x40
 800b97c:	430a      	orrs	r2, r1
 800b97e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	68da      	ldr	r2, [r3, #12]
 800b984:	23e0      	movs	r3, #224	@ 0xe0
 800b986:	00db      	lsls	r3, r3, #3
 800b988:	429a      	cmp	r2, r3
 800b98a:	d952      	bls.n	800ba32 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	685b      	ldr	r3, [r3, #4]
 800b990:	2b00      	cmp	r3, #0
 800b992:	d004      	beq.n	800b99e <HAL_SPI_Transmit+0x11e>
 800b994:	2316      	movs	r3, #22
 800b996:	18fb      	adds	r3, r7, r3
 800b998:	881b      	ldrh	r3, [r3, #0]
 800b99a:	2b01      	cmp	r3, #1
 800b99c:	d143      	bne.n	800ba26 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9a2:	881a      	ldrh	r2, [r3, #0]
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9ae:	1c9a      	adds	r2, r3, #2
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b9b8:	b29b      	uxth	r3, r3
 800b9ba:	3b01      	subs	r3, #1
 800b9bc:	b29a      	uxth	r2, r3
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b9c2:	e030      	b.n	800ba26 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	689b      	ldr	r3, [r3, #8]
 800b9ca:	2202      	movs	r2, #2
 800b9cc:	4013      	ands	r3, r2
 800b9ce:	2b02      	cmp	r3, #2
 800b9d0:	d112      	bne.n	800b9f8 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9d6:	881a      	ldrh	r2, [r3, #0]
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9e2:	1c9a      	adds	r2, r3, #2
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b9ec:	b29b      	uxth	r3, r3
 800b9ee:	3b01      	subs	r3, #1
 800b9f0:	b29a      	uxth	r2, r3
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800b9f6:	e016      	b.n	800ba26 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b9f8:	f7fd fab8 	bl	8008f6c <HAL_GetTick>
 800b9fc:	0002      	movs	r2, r0
 800b9fe:	69bb      	ldr	r3, [r7, #24]
 800ba00:	1ad3      	subs	r3, r2, r3
 800ba02:	683a      	ldr	r2, [r7, #0]
 800ba04:	429a      	cmp	r2, r3
 800ba06:	d802      	bhi.n	800ba0e <HAL_SPI_Transmit+0x18e>
 800ba08:	683b      	ldr	r3, [r7, #0]
 800ba0a:	3301      	adds	r3, #1
 800ba0c:	d102      	bne.n	800ba14 <HAL_SPI_Transmit+0x194>
 800ba0e:	683b      	ldr	r3, [r7, #0]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d108      	bne.n	800ba26 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 800ba14:	231f      	movs	r3, #31
 800ba16:	18fb      	adds	r3, r7, r3
 800ba18:	2203      	movs	r2, #3
 800ba1a:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	225d      	movs	r2, #93	@ 0x5d
 800ba20:	2101      	movs	r1, #1
 800ba22:	5499      	strb	r1, [r3, r2]
          goto error;
 800ba24:	e080      	b.n	800bb28 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ba2a:	b29b      	uxth	r3, r3
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d1c9      	bne.n	800b9c4 <HAL_SPI_Transmit+0x144>
 800ba30:	e053      	b.n	800bada <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	685b      	ldr	r3, [r3, #4]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d004      	beq.n	800ba44 <HAL_SPI_Transmit+0x1c4>
 800ba3a:	2316      	movs	r3, #22
 800ba3c:	18fb      	adds	r3, r7, r3
 800ba3e:	881b      	ldrh	r3, [r3, #0]
 800ba40:	2b01      	cmp	r3, #1
 800ba42:	d145      	bne.n	800bad0 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	330c      	adds	r3, #12
 800ba4e:	7812      	ldrb	r2, [r2, #0]
 800ba50:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba56:	1c5a      	adds	r2, r3, #1
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ba60:	b29b      	uxth	r3, r3
 800ba62:	3b01      	subs	r3, #1
 800ba64:	b29a      	uxth	r2, r3
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800ba6a:	e031      	b.n	800bad0 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	689b      	ldr	r3, [r3, #8]
 800ba72:	2202      	movs	r2, #2
 800ba74:	4013      	ands	r3, r2
 800ba76:	2b02      	cmp	r3, #2
 800ba78:	d113      	bne.n	800baa2 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	330c      	adds	r3, #12
 800ba84:	7812      	ldrb	r2, [r2, #0]
 800ba86:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba8c:	1c5a      	adds	r2, r3, #1
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ba96:	b29b      	uxth	r3, r3
 800ba98:	3b01      	subs	r3, #1
 800ba9a:	b29a      	uxth	r2, r3
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800baa0:	e016      	b.n	800bad0 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800baa2:	f7fd fa63 	bl	8008f6c <HAL_GetTick>
 800baa6:	0002      	movs	r2, r0
 800baa8:	69bb      	ldr	r3, [r7, #24]
 800baaa:	1ad3      	subs	r3, r2, r3
 800baac:	683a      	ldr	r2, [r7, #0]
 800baae:	429a      	cmp	r2, r3
 800bab0:	d802      	bhi.n	800bab8 <HAL_SPI_Transmit+0x238>
 800bab2:	683b      	ldr	r3, [r7, #0]
 800bab4:	3301      	adds	r3, #1
 800bab6:	d102      	bne.n	800babe <HAL_SPI_Transmit+0x23e>
 800bab8:	683b      	ldr	r3, [r7, #0]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d108      	bne.n	800bad0 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 800babe:	231f      	movs	r3, #31
 800bac0:	18fb      	adds	r3, r7, r3
 800bac2:	2203      	movs	r2, #3
 800bac4:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	225d      	movs	r2, #93	@ 0x5d
 800baca:	2101      	movs	r1, #1
 800bacc:	5499      	strb	r1, [r3, r2]
          goto error;
 800bace:	e02b      	b.n	800bb28 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800bad4:	b29b      	uxth	r3, r3
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d1c8      	bne.n	800ba6c <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bada:	69ba      	ldr	r2, [r7, #24]
 800badc:	6839      	ldr	r1, [r7, #0]
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	0018      	movs	r0, r3
 800bae2:	f000 f95d 	bl	800bda0 <SPI_EndRxTxTransaction>
 800bae6:	1e03      	subs	r3, r0, #0
 800bae8:	d002      	beq.n	800baf0 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	2220      	movs	r2, #32
 800baee:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	689b      	ldr	r3, [r3, #8]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d10a      	bne.n	800bb0e <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800baf8:	2300      	movs	r3, #0
 800bafa:	613b      	str	r3, [r7, #16]
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	68db      	ldr	r3, [r3, #12]
 800bb02:	613b      	str	r3, [r7, #16]
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	689b      	ldr	r3, [r3, #8]
 800bb0a:	613b      	str	r3, [r7, #16]
 800bb0c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d004      	beq.n	800bb20 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 800bb16:	231f      	movs	r3, #31
 800bb18:	18fb      	adds	r3, r7, r3
 800bb1a:	2201      	movs	r2, #1
 800bb1c:	701a      	strb	r2, [r3, #0]
 800bb1e:	e003      	b.n	800bb28 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	225d      	movs	r2, #93	@ 0x5d
 800bb24:	2101      	movs	r1, #1
 800bb26:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	225c      	movs	r2, #92	@ 0x5c
 800bb2c:	2100      	movs	r1, #0
 800bb2e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800bb30:	231f      	movs	r3, #31
 800bb32:	18fb      	adds	r3, r7, r3
 800bb34:	781b      	ldrb	r3, [r3, #0]
}
 800bb36:	0018      	movs	r0, r3
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	b008      	add	sp, #32
 800bb3c:	bd80      	pop	{r7, pc}
	...

0800bb40 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b088      	sub	sp, #32
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	60f8      	str	r0, [r7, #12]
 800bb48:	60b9      	str	r1, [r7, #8]
 800bb4a:	603b      	str	r3, [r7, #0]
 800bb4c:	1dfb      	adds	r3, r7, #7
 800bb4e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800bb50:	f7fd fa0c 	bl	8008f6c <HAL_GetTick>
 800bb54:	0002      	movs	r2, r0
 800bb56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb58:	1a9b      	subs	r3, r3, r2
 800bb5a:	683a      	ldr	r2, [r7, #0]
 800bb5c:	18d3      	adds	r3, r2, r3
 800bb5e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800bb60:	f7fd fa04 	bl	8008f6c <HAL_GetTick>
 800bb64:	0003      	movs	r3, r0
 800bb66:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800bb68:	4b3a      	ldr	r3, [pc, #232]	@ (800bc54 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	015b      	lsls	r3, r3, #5
 800bb6e:	0d1b      	lsrs	r3, r3, #20
 800bb70:	69fa      	ldr	r2, [r7, #28]
 800bb72:	4353      	muls	r3, r2
 800bb74:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bb76:	e058      	b.n	800bc2a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800bb78:	683b      	ldr	r3, [r7, #0]
 800bb7a:	3301      	adds	r3, #1
 800bb7c:	d055      	beq.n	800bc2a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800bb7e:	f7fd f9f5 	bl	8008f6c <HAL_GetTick>
 800bb82:	0002      	movs	r2, r0
 800bb84:	69bb      	ldr	r3, [r7, #24]
 800bb86:	1ad3      	subs	r3, r2, r3
 800bb88:	69fa      	ldr	r2, [r7, #28]
 800bb8a:	429a      	cmp	r2, r3
 800bb8c:	d902      	bls.n	800bb94 <SPI_WaitFlagStateUntilTimeout+0x54>
 800bb8e:	69fb      	ldr	r3, [r7, #28]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d142      	bne.n	800bc1a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	685a      	ldr	r2, [r3, #4]
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	21e0      	movs	r1, #224	@ 0xe0
 800bba0:	438a      	bics	r2, r1
 800bba2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	685a      	ldr	r2, [r3, #4]
 800bba8:	2382      	movs	r3, #130	@ 0x82
 800bbaa:	005b      	lsls	r3, r3, #1
 800bbac:	429a      	cmp	r2, r3
 800bbae:	d113      	bne.n	800bbd8 <SPI_WaitFlagStateUntilTimeout+0x98>
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	689a      	ldr	r2, [r3, #8]
 800bbb4:	2380      	movs	r3, #128	@ 0x80
 800bbb6:	021b      	lsls	r3, r3, #8
 800bbb8:	429a      	cmp	r2, r3
 800bbba:	d005      	beq.n	800bbc8 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	689a      	ldr	r2, [r3, #8]
 800bbc0:	2380      	movs	r3, #128	@ 0x80
 800bbc2:	00db      	lsls	r3, r3, #3
 800bbc4:	429a      	cmp	r2, r3
 800bbc6:	d107      	bne.n	800bbd8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	681a      	ldr	r2, [r3, #0]
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	2140      	movs	r1, #64	@ 0x40
 800bbd4:	438a      	bics	r2, r1
 800bbd6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bbdc:	2380      	movs	r3, #128	@ 0x80
 800bbde:	019b      	lsls	r3, r3, #6
 800bbe0:	429a      	cmp	r2, r3
 800bbe2:	d110      	bne.n	800bc06 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	681a      	ldr	r2, [r3, #0]
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	491a      	ldr	r1, [pc, #104]	@ (800bc58 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800bbf0:	400a      	ands	r2, r1
 800bbf2:	601a      	str	r2, [r3, #0]
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	681a      	ldr	r2, [r3, #0]
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	2180      	movs	r1, #128	@ 0x80
 800bc00:	0189      	lsls	r1, r1, #6
 800bc02:	430a      	orrs	r2, r1
 800bc04:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	225d      	movs	r2, #93	@ 0x5d
 800bc0a:	2101      	movs	r1, #1
 800bc0c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	225c      	movs	r2, #92	@ 0x5c
 800bc12:	2100      	movs	r1, #0
 800bc14:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800bc16:	2303      	movs	r3, #3
 800bc18:	e017      	b.n	800bc4a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800bc1a:	697b      	ldr	r3, [r7, #20]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d101      	bne.n	800bc24 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800bc20:	2300      	movs	r3, #0
 800bc22:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800bc24:	697b      	ldr	r3, [r7, #20]
 800bc26:	3b01      	subs	r3, #1
 800bc28:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	689b      	ldr	r3, [r3, #8]
 800bc30:	68ba      	ldr	r2, [r7, #8]
 800bc32:	4013      	ands	r3, r2
 800bc34:	68ba      	ldr	r2, [r7, #8]
 800bc36:	1ad3      	subs	r3, r2, r3
 800bc38:	425a      	negs	r2, r3
 800bc3a:	4153      	adcs	r3, r2
 800bc3c:	b2db      	uxtb	r3, r3
 800bc3e:	001a      	movs	r2, r3
 800bc40:	1dfb      	adds	r3, r7, #7
 800bc42:	781b      	ldrb	r3, [r3, #0]
 800bc44:	429a      	cmp	r2, r3
 800bc46:	d197      	bne.n	800bb78 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800bc48:	2300      	movs	r3, #0
}
 800bc4a:	0018      	movs	r0, r3
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	b008      	add	sp, #32
 800bc50:	bd80      	pop	{r7, pc}
 800bc52:	46c0      	nop			@ (mov r8, r8)
 800bc54:	20000004 	.word	0x20000004
 800bc58:	ffffdfff 	.word	0xffffdfff

0800bc5c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800bc5c:	b580      	push	{r7, lr}
 800bc5e:	b08a      	sub	sp, #40	@ 0x28
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	60f8      	str	r0, [r7, #12]
 800bc64:	60b9      	str	r1, [r7, #8]
 800bc66:	607a      	str	r2, [r7, #4]
 800bc68:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800bc6a:	2317      	movs	r3, #23
 800bc6c:	18fb      	adds	r3, r7, r3
 800bc6e:	2200      	movs	r2, #0
 800bc70:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800bc72:	f7fd f97b 	bl	8008f6c <HAL_GetTick>
 800bc76:	0002      	movs	r2, r0
 800bc78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc7a:	1a9b      	subs	r3, r3, r2
 800bc7c:	683a      	ldr	r2, [r7, #0]
 800bc7e:	18d3      	adds	r3, r2, r3
 800bc80:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800bc82:	f7fd f973 	bl	8008f6c <HAL_GetTick>
 800bc86:	0003      	movs	r3, r0
 800bc88:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	330c      	adds	r3, #12
 800bc90:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800bc92:	4b41      	ldr	r3, [pc, #260]	@ (800bd98 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 800bc94:	681a      	ldr	r2, [r3, #0]
 800bc96:	0013      	movs	r3, r2
 800bc98:	009b      	lsls	r3, r3, #2
 800bc9a:	189b      	adds	r3, r3, r2
 800bc9c:	00da      	lsls	r2, r3, #3
 800bc9e:	1ad3      	subs	r3, r2, r3
 800bca0:	0d1b      	lsrs	r3, r3, #20
 800bca2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bca4:	4353      	muls	r3, r2
 800bca6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800bca8:	e068      	b.n	800bd7c <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800bcaa:	68ba      	ldr	r2, [r7, #8]
 800bcac:	23c0      	movs	r3, #192	@ 0xc0
 800bcae:	00db      	lsls	r3, r3, #3
 800bcb0:	429a      	cmp	r2, r3
 800bcb2:	d10a      	bne.n	800bcca <SPI_WaitFifoStateUntilTimeout+0x6e>
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d107      	bne.n	800bcca <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800bcba:	69fb      	ldr	r3, [r7, #28]
 800bcbc:	781b      	ldrb	r3, [r3, #0]
 800bcbe:	b2da      	uxtb	r2, r3
 800bcc0:	2117      	movs	r1, #23
 800bcc2:	187b      	adds	r3, r7, r1
 800bcc4:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800bcc6:	187b      	adds	r3, r7, r1
 800bcc8:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800bcca:	683b      	ldr	r3, [r7, #0]
 800bccc:	3301      	adds	r3, #1
 800bcce:	d055      	beq.n	800bd7c <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800bcd0:	f7fd f94c 	bl	8008f6c <HAL_GetTick>
 800bcd4:	0002      	movs	r2, r0
 800bcd6:	6a3b      	ldr	r3, [r7, #32]
 800bcd8:	1ad3      	subs	r3, r2, r3
 800bcda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bcdc:	429a      	cmp	r2, r3
 800bcde:	d902      	bls.n	800bce6 <SPI_WaitFifoStateUntilTimeout+0x8a>
 800bce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d142      	bne.n	800bd6c <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	685a      	ldr	r2, [r3, #4]
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	21e0      	movs	r1, #224	@ 0xe0
 800bcf2:	438a      	bics	r2, r1
 800bcf4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	685a      	ldr	r2, [r3, #4]
 800bcfa:	2382      	movs	r3, #130	@ 0x82
 800bcfc:	005b      	lsls	r3, r3, #1
 800bcfe:	429a      	cmp	r2, r3
 800bd00:	d113      	bne.n	800bd2a <SPI_WaitFifoStateUntilTimeout+0xce>
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	689a      	ldr	r2, [r3, #8]
 800bd06:	2380      	movs	r3, #128	@ 0x80
 800bd08:	021b      	lsls	r3, r3, #8
 800bd0a:	429a      	cmp	r2, r3
 800bd0c:	d005      	beq.n	800bd1a <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	689a      	ldr	r2, [r3, #8]
 800bd12:	2380      	movs	r3, #128	@ 0x80
 800bd14:	00db      	lsls	r3, r3, #3
 800bd16:	429a      	cmp	r2, r3
 800bd18:	d107      	bne.n	800bd2a <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	681a      	ldr	r2, [r3, #0]
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	2140      	movs	r1, #64	@ 0x40
 800bd26:	438a      	bics	r2, r1
 800bd28:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bd2e:	2380      	movs	r3, #128	@ 0x80
 800bd30:	019b      	lsls	r3, r3, #6
 800bd32:	429a      	cmp	r2, r3
 800bd34:	d110      	bne.n	800bd58 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	681a      	ldr	r2, [r3, #0]
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	4916      	ldr	r1, [pc, #88]	@ (800bd9c <SPI_WaitFifoStateUntilTimeout+0x140>)
 800bd42:	400a      	ands	r2, r1
 800bd44:	601a      	str	r2, [r3, #0]
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	681a      	ldr	r2, [r3, #0]
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	2180      	movs	r1, #128	@ 0x80
 800bd52:	0189      	lsls	r1, r1, #6
 800bd54:	430a      	orrs	r2, r1
 800bd56:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	225d      	movs	r2, #93	@ 0x5d
 800bd5c:	2101      	movs	r1, #1
 800bd5e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	225c      	movs	r2, #92	@ 0x5c
 800bd64:	2100      	movs	r1, #0
 800bd66:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800bd68:	2303      	movs	r3, #3
 800bd6a:	e010      	b.n	800bd8e <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800bd6c:	69bb      	ldr	r3, [r7, #24]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d101      	bne.n	800bd76 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800bd72:	2300      	movs	r3, #0
 800bd74:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800bd76:	69bb      	ldr	r3, [r7, #24]
 800bd78:	3b01      	subs	r3, #1
 800bd7a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	689b      	ldr	r3, [r3, #8]
 800bd82:	68ba      	ldr	r2, [r7, #8]
 800bd84:	4013      	ands	r3, r2
 800bd86:	687a      	ldr	r2, [r7, #4]
 800bd88:	429a      	cmp	r2, r3
 800bd8a:	d18e      	bne.n	800bcaa <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800bd8c:	2300      	movs	r3, #0
}
 800bd8e:	0018      	movs	r0, r3
 800bd90:	46bd      	mov	sp, r7
 800bd92:	b00a      	add	sp, #40	@ 0x28
 800bd94:	bd80      	pop	{r7, pc}
 800bd96:	46c0      	nop			@ (mov r8, r8)
 800bd98:	20000004 	.word	0x20000004
 800bd9c:	ffffdfff 	.word	0xffffdfff

0800bda0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b086      	sub	sp, #24
 800bda4:	af02      	add	r7, sp, #8
 800bda6:	60f8      	str	r0, [r7, #12]
 800bda8:	60b9      	str	r1, [r7, #8]
 800bdaa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800bdac:	68ba      	ldr	r2, [r7, #8]
 800bdae:	23c0      	movs	r3, #192	@ 0xc0
 800bdb0:	0159      	lsls	r1, r3, #5
 800bdb2:	68f8      	ldr	r0, [r7, #12]
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	9300      	str	r3, [sp, #0]
 800bdb8:	0013      	movs	r3, r2
 800bdba:	2200      	movs	r2, #0
 800bdbc:	f7ff ff4e 	bl	800bc5c <SPI_WaitFifoStateUntilTimeout>
 800bdc0:	1e03      	subs	r3, r0, #0
 800bdc2:	d007      	beq.n	800bdd4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bdc8:	2220      	movs	r2, #32
 800bdca:	431a      	orrs	r2, r3
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800bdd0:	2303      	movs	r3, #3
 800bdd2:	e027      	b.n	800be24 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bdd4:	68ba      	ldr	r2, [r7, #8]
 800bdd6:	68f8      	ldr	r0, [r7, #12]
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	9300      	str	r3, [sp, #0]
 800bddc:	0013      	movs	r3, r2
 800bdde:	2200      	movs	r2, #0
 800bde0:	2180      	movs	r1, #128	@ 0x80
 800bde2:	f7ff fead 	bl	800bb40 <SPI_WaitFlagStateUntilTimeout>
 800bde6:	1e03      	subs	r3, r0, #0
 800bde8:	d007      	beq.n	800bdfa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bdee:	2220      	movs	r2, #32
 800bdf0:	431a      	orrs	r2, r3
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800bdf6:	2303      	movs	r3, #3
 800bdf8:	e014      	b.n	800be24 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800bdfa:	68ba      	ldr	r2, [r7, #8]
 800bdfc:	23c0      	movs	r3, #192	@ 0xc0
 800bdfe:	00d9      	lsls	r1, r3, #3
 800be00:	68f8      	ldr	r0, [r7, #12]
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	9300      	str	r3, [sp, #0]
 800be06:	0013      	movs	r3, r2
 800be08:	2200      	movs	r2, #0
 800be0a:	f7ff ff27 	bl	800bc5c <SPI_WaitFifoStateUntilTimeout>
 800be0e:	1e03      	subs	r3, r0, #0
 800be10:	d007      	beq.n	800be22 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800be16:	2220      	movs	r2, #32
 800be18:	431a      	orrs	r2, r3
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800be1e:	2303      	movs	r3, #3
 800be20:	e000      	b.n	800be24 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800be22:	2300      	movs	r3, #0
}
 800be24:	0018      	movs	r0, r3
 800be26:	46bd      	mov	sp, r7
 800be28:	b004      	add	sp, #16
 800be2a:	bd80      	pop	{r7, pc}

0800be2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b082      	sub	sp, #8
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d101      	bne.n	800be3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800be3a:	2301      	movs	r3, #1
 800be3c:	e04a      	b.n	800bed4 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	223d      	movs	r2, #61	@ 0x3d
 800be42:	5c9b      	ldrb	r3, [r3, r2]
 800be44:	b2db      	uxtb	r3, r3
 800be46:	2b00      	cmp	r3, #0
 800be48:	d107      	bne.n	800be5a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	223c      	movs	r2, #60	@ 0x3c
 800be4e:	2100      	movs	r1, #0
 800be50:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	0018      	movs	r0, r3
 800be56:	f7fc f89b 	bl	8007f90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	223d      	movs	r2, #61	@ 0x3d
 800be5e:	2102      	movs	r1, #2
 800be60:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681a      	ldr	r2, [r3, #0]
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	3304      	adds	r3, #4
 800be6a:	0019      	movs	r1, r3
 800be6c:	0010      	movs	r0, r2
 800be6e:	f000 fb11 	bl	800c494 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	2248      	movs	r2, #72	@ 0x48
 800be76:	2101      	movs	r1, #1
 800be78:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	223e      	movs	r2, #62	@ 0x3e
 800be7e:	2101      	movs	r1, #1
 800be80:	5499      	strb	r1, [r3, r2]
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	223f      	movs	r2, #63	@ 0x3f
 800be86:	2101      	movs	r1, #1
 800be88:	5499      	strb	r1, [r3, r2]
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	2240      	movs	r2, #64	@ 0x40
 800be8e:	2101      	movs	r1, #1
 800be90:	5499      	strb	r1, [r3, r2]
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	2241      	movs	r2, #65	@ 0x41
 800be96:	2101      	movs	r1, #1
 800be98:	5499      	strb	r1, [r3, r2]
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	2242      	movs	r2, #66	@ 0x42
 800be9e:	2101      	movs	r1, #1
 800bea0:	5499      	strb	r1, [r3, r2]
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	2243      	movs	r2, #67	@ 0x43
 800bea6:	2101      	movs	r1, #1
 800bea8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	2244      	movs	r2, #68	@ 0x44
 800beae:	2101      	movs	r1, #1
 800beb0:	5499      	strb	r1, [r3, r2]
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	2245      	movs	r2, #69	@ 0x45
 800beb6:	2101      	movs	r1, #1
 800beb8:	5499      	strb	r1, [r3, r2]
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	2246      	movs	r2, #70	@ 0x46
 800bebe:	2101      	movs	r1, #1
 800bec0:	5499      	strb	r1, [r3, r2]
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	2247      	movs	r2, #71	@ 0x47
 800bec6:	2101      	movs	r1, #1
 800bec8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	223d      	movs	r2, #61	@ 0x3d
 800bece:	2101      	movs	r1, #1
 800bed0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800bed2:	2300      	movs	r3, #0
}
 800bed4:	0018      	movs	r0, r3
 800bed6:	46bd      	mov	sp, r7
 800bed8:	b002      	add	sp, #8
 800beda:	bd80      	pop	{r7, pc}

0800bedc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800bedc:	b580      	push	{r7, lr}
 800bede:	b082      	sub	sp, #8
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d101      	bne.n	800beee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800beea:	2301      	movs	r3, #1
 800beec:	e04a      	b.n	800bf84 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	223d      	movs	r2, #61	@ 0x3d
 800bef2:	5c9b      	ldrb	r3, [r3, r2]
 800bef4:	b2db      	uxtb	r3, r3
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d107      	bne.n	800bf0a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	223c      	movs	r2, #60	@ 0x3c
 800befe:	2100      	movs	r1, #0
 800bf00:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	0018      	movs	r0, r3
 800bf06:	f000 f841 	bl	800bf8c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	223d      	movs	r2, #61	@ 0x3d
 800bf0e:	2102      	movs	r1, #2
 800bf10:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	681a      	ldr	r2, [r3, #0]
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	3304      	adds	r3, #4
 800bf1a:	0019      	movs	r1, r3
 800bf1c:	0010      	movs	r0, r2
 800bf1e:	f000 fab9 	bl	800c494 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	2248      	movs	r2, #72	@ 0x48
 800bf26:	2101      	movs	r1, #1
 800bf28:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	223e      	movs	r2, #62	@ 0x3e
 800bf2e:	2101      	movs	r1, #1
 800bf30:	5499      	strb	r1, [r3, r2]
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	223f      	movs	r2, #63	@ 0x3f
 800bf36:	2101      	movs	r1, #1
 800bf38:	5499      	strb	r1, [r3, r2]
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	2240      	movs	r2, #64	@ 0x40
 800bf3e:	2101      	movs	r1, #1
 800bf40:	5499      	strb	r1, [r3, r2]
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	2241      	movs	r2, #65	@ 0x41
 800bf46:	2101      	movs	r1, #1
 800bf48:	5499      	strb	r1, [r3, r2]
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	2242      	movs	r2, #66	@ 0x42
 800bf4e:	2101      	movs	r1, #1
 800bf50:	5499      	strb	r1, [r3, r2]
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	2243      	movs	r2, #67	@ 0x43
 800bf56:	2101      	movs	r1, #1
 800bf58:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	2244      	movs	r2, #68	@ 0x44
 800bf5e:	2101      	movs	r1, #1
 800bf60:	5499      	strb	r1, [r3, r2]
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	2245      	movs	r2, #69	@ 0x45
 800bf66:	2101      	movs	r1, #1
 800bf68:	5499      	strb	r1, [r3, r2]
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	2246      	movs	r2, #70	@ 0x46
 800bf6e:	2101      	movs	r1, #1
 800bf70:	5499      	strb	r1, [r3, r2]
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	2247      	movs	r2, #71	@ 0x47
 800bf76:	2101      	movs	r1, #1
 800bf78:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	223d      	movs	r2, #61	@ 0x3d
 800bf7e:	2101      	movs	r1, #1
 800bf80:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800bf82:	2300      	movs	r3, #0
}
 800bf84:	0018      	movs	r0, r3
 800bf86:	46bd      	mov	sp, r7
 800bf88:	b002      	add	sp, #8
 800bf8a:	bd80      	pop	{r7, pc}

0800bf8c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800bf8c:	b580      	push	{r7, lr}
 800bf8e:	b082      	sub	sp, #8
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800bf94:	46c0      	nop			@ (mov r8, r8)
 800bf96:	46bd      	mov	sp, r7
 800bf98:	b002      	add	sp, #8
 800bf9a:	bd80      	pop	{r7, pc}

0800bf9c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bf9c:	b580      	push	{r7, lr}
 800bf9e:	b084      	sub	sp, #16
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
 800bfa4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800bfa6:	683b      	ldr	r3, [r7, #0]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d108      	bne.n	800bfbe <HAL_TIM_PWM_Start+0x22>
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	223e      	movs	r2, #62	@ 0x3e
 800bfb0:	5c9b      	ldrb	r3, [r3, r2]
 800bfb2:	b2db      	uxtb	r3, r3
 800bfb4:	3b01      	subs	r3, #1
 800bfb6:	1e5a      	subs	r2, r3, #1
 800bfb8:	4193      	sbcs	r3, r2
 800bfba:	b2db      	uxtb	r3, r3
 800bfbc:	e037      	b.n	800c02e <HAL_TIM_PWM_Start+0x92>
 800bfbe:	683b      	ldr	r3, [r7, #0]
 800bfc0:	2b04      	cmp	r3, #4
 800bfc2:	d108      	bne.n	800bfd6 <HAL_TIM_PWM_Start+0x3a>
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	223f      	movs	r2, #63	@ 0x3f
 800bfc8:	5c9b      	ldrb	r3, [r3, r2]
 800bfca:	b2db      	uxtb	r3, r3
 800bfcc:	3b01      	subs	r3, #1
 800bfce:	1e5a      	subs	r2, r3, #1
 800bfd0:	4193      	sbcs	r3, r2
 800bfd2:	b2db      	uxtb	r3, r3
 800bfd4:	e02b      	b.n	800c02e <HAL_TIM_PWM_Start+0x92>
 800bfd6:	683b      	ldr	r3, [r7, #0]
 800bfd8:	2b08      	cmp	r3, #8
 800bfda:	d108      	bne.n	800bfee <HAL_TIM_PWM_Start+0x52>
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	2240      	movs	r2, #64	@ 0x40
 800bfe0:	5c9b      	ldrb	r3, [r3, r2]
 800bfe2:	b2db      	uxtb	r3, r3
 800bfe4:	3b01      	subs	r3, #1
 800bfe6:	1e5a      	subs	r2, r3, #1
 800bfe8:	4193      	sbcs	r3, r2
 800bfea:	b2db      	uxtb	r3, r3
 800bfec:	e01f      	b.n	800c02e <HAL_TIM_PWM_Start+0x92>
 800bfee:	683b      	ldr	r3, [r7, #0]
 800bff0:	2b0c      	cmp	r3, #12
 800bff2:	d108      	bne.n	800c006 <HAL_TIM_PWM_Start+0x6a>
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	2241      	movs	r2, #65	@ 0x41
 800bff8:	5c9b      	ldrb	r3, [r3, r2]
 800bffa:	b2db      	uxtb	r3, r3
 800bffc:	3b01      	subs	r3, #1
 800bffe:	1e5a      	subs	r2, r3, #1
 800c000:	4193      	sbcs	r3, r2
 800c002:	b2db      	uxtb	r3, r3
 800c004:	e013      	b.n	800c02e <HAL_TIM_PWM_Start+0x92>
 800c006:	683b      	ldr	r3, [r7, #0]
 800c008:	2b10      	cmp	r3, #16
 800c00a:	d108      	bne.n	800c01e <HAL_TIM_PWM_Start+0x82>
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	2242      	movs	r2, #66	@ 0x42
 800c010:	5c9b      	ldrb	r3, [r3, r2]
 800c012:	b2db      	uxtb	r3, r3
 800c014:	3b01      	subs	r3, #1
 800c016:	1e5a      	subs	r2, r3, #1
 800c018:	4193      	sbcs	r3, r2
 800c01a:	b2db      	uxtb	r3, r3
 800c01c:	e007      	b.n	800c02e <HAL_TIM_PWM_Start+0x92>
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	2243      	movs	r2, #67	@ 0x43
 800c022:	5c9b      	ldrb	r3, [r3, r2]
 800c024:	b2db      	uxtb	r3, r3
 800c026:	3b01      	subs	r3, #1
 800c028:	1e5a      	subs	r2, r3, #1
 800c02a:	4193      	sbcs	r3, r2
 800c02c:	b2db      	uxtb	r3, r3
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d001      	beq.n	800c036 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800c032:	2301      	movs	r3, #1
 800c034:	e090      	b.n	800c158 <HAL_TIM_PWM_Start+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c036:	683b      	ldr	r3, [r7, #0]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d104      	bne.n	800c046 <HAL_TIM_PWM_Start+0xaa>
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	223e      	movs	r2, #62	@ 0x3e
 800c040:	2102      	movs	r1, #2
 800c042:	5499      	strb	r1, [r3, r2]
 800c044:	e023      	b.n	800c08e <HAL_TIM_PWM_Start+0xf2>
 800c046:	683b      	ldr	r3, [r7, #0]
 800c048:	2b04      	cmp	r3, #4
 800c04a:	d104      	bne.n	800c056 <HAL_TIM_PWM_Start+0xba>
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	223f      	movs	r2, #63	@ 0x3f
 800c050:	2102      	movs	r1, #2
 800c052:	5499      	strb	r1, [r3, r2]
 800c054:	e01b      	b.n	800c08e <HAL_TIM_PWM_Start+0xf2>
 800c056:	683b      	ldr	r3, [r7, #0]
 800c058:	2b08      	cmp	r3, #8
 800c05a:	d104      	bne.n	800c066 <HAL_TIM_PWM_Start+0xca>
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	2240      	movs	r2, #64	@ 0x40
 800c060:	2102      	movs	r1, #2
 800c062:	5499      	strb	r1, [r3, r2]
 800c064:	e013      	b.n	800c08e <HAL_TIM_PWM_Start+0xf2>
 800c066:	683b      	ldr	r3, [r7, #0]
 800c068:	2b0c      	cmp	r3, #12
 800c06a:	d104      	bne.n	800c076 <HAL_TIM_PWM_Start+0xda>
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	2241      	movs	r2, #65	@ 0x41
 800c070:	2102      	movs	r1, #2
 800c072:	5499      	strb	r1, [r3, r2]
 800c074:	e00b      	b.n	800c08e <HAL_TIM_PWM_Start+0xf2>
 800c076:	683b      	ldr	r3, [r7, #0]
 800c078:	2b10      	cmp	r3, #16
 800c07a:	d104      	bne.n	800c086 <HAL_TIM_PWM_Start+0xea>
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	2242      	movs	r2, #66	@ 0x42
 800c080:	2102      	movs	r1, #2
 800c082:	5499      	strb	r1, [r3, r2]
 800c084:	e003      	b.n	800c08e <HAL_TIM_PWM_Start+0xf2>
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	2243      	movs	r2, #67	@ 0x43
 800c08a:	2102      	movs	r1, #2
 800c08c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	6839      	ldr	r1, [r7, #0]
 800c094:	2201      	movs	r2, #1
 800c096:	0018      	movs	r0, r3
 800c098:	f000 fd58 	bl	800cb4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	4a2f      	ldr	r2, [pc, #188]	@ (800c160 <HAL_TIM_PWM_Start+0x1c4>)
 800c0a2:	4293      	cmp	r3, r2
 800c0a4:	d00e      	beq.n	800c0c4 <HAL_TIM_PWM_Start+0x128>
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	4a2e      	ldr	r2, [pc, #184]	@ (800c164 <HAL_TIM_PWM_Start+0x1c8>)
 800c0ac:	4293      	cmp	r3, r2
 800c0ae:	d009      	beq.n	800c0c4 <HAL_TIM_PWM_Start+0x128>
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	4a2c      	ldr	r2, [pc, #176]	@ (800c168 <HAL_TIM_PWM_Start+0x1cc>)
 800c0b6:	4293      	cmp	r3, r2
 800c0b8:	d004      	beq.n	800c0c4 <HAL_TIM_PWM_Start+0x128>
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	4a2b      	ldr	r2, [pc, #172]	@ (800c16c <HAL_TIM_PWM_Start+0x1d0>)
 800c0c0:	4293      	cmp	r3, r2
 800c0c2:	d101      	bne.n	800c0c8 <HAL_TIM_PWM_Start+0x12c>
 800c0c4:	2301      	movs	r3, #1
 800c0c6:	e000      	b.n	800c0ca <HAL_TIM_PWM_Start+0x12e>
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d008      	beq.n	800c0e0 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	2180      	movs	r1, #128	@ 0x80
 800c0da:	0209      	lsls	r1, r1, #8
 800c0dc:	430a      	orrs	r2, r1
 800c0de:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	4a1e      	ldr	r2, [pc, #120]	@ (800c160 <HAL_TIM_PWM_Start+0x1c4>)
 800c0e6:	4293      	cmp	r3, r2
 800c0e8:	d014      	beq.n	800c114 <HAL_TIM_PWM_Start+0x178>
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	681a      	ldr	r2, [r3, #0]
 800c0ee:	2380      	movs	r3, #128	@ 0x80
 800c0f0:	05db      	lsls	r3, r3, #23
 800c0f2:	429a      	cmp	r2, r3
 800c0f4:	d00e      	beq.n	800c114 <HAL_TIM_PWM_Start+0x178>
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	4a1d      	ldr	r2, [pc, #116]	@ (800c170 <HAL_TIM_PWM_Start+0x1d4>)
 800c0fc:	4293      	cmp	r3, r2
 800c0fe:	d009      	beq.n	800c114 <HAL_TIM_PWM_Start+0x178>
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	4a1b      	ldr	r2, [pc, #108]	@ (800c174 <HAL_TIM_PWM_Start+0x1d8>)
 800c106:	4293      	cmp	r3, r2
 800c108:	d004      	beq.n	800c114 <HAL_TIM_PWM_Start+0x178>
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	4a15      	ldr	r2, [pc, #84]	@ (800c164 <HAL_TIM_PWM_Start+0x1c8>)
 800c110:	4293      	cmp	r3, r2
 800c112:	d116      	bne.n	800c142 <HAL_TIM_PWM_Start+0x1a6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	689b      	ldr	r3, [r3, #8]
 800c11a:	4a17      	ldr	r2, [pc, #92]	@ (800c178 <HAL_TIM_PWM_Start+0x1dc>)
 800c11c:	4013      	ands	r3, r2
 800c11e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	2b06      	cmp	r3, #6
 800c124:	d016      	beq.n	800c154 <HAL_TIM_PWM_Start+0x1b8>
 800c126:	68fa      	ldr	r2, [r7, #12]
 800c128:	2380      	movs	r3, #128	@ 0x80
 800c12a:	025b      	lsls	r3, r3, #9
 800c12c:	429a      	cmp	r2, r3
 800c12e:	d011      	beq.n	800c154 <HAL_TIM_PWM_Start+0x1b8>
    {
      __HAL_TIM_ENABLE(htim);
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	681a      	ldr	r2, [r3, #0]
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	2101      	movs	r1, #1
 800c13c:	430a      	orrs	r2, r1
 800c13e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c140:	e008      	b.n	800c154 <HAL_TIM_PWM_Start+0x1b8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	681a      	ldr	r2, [r3, #0]
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	2101      	movs	r1, #1
 800c14e:	430a      	orrs	r2, r1
 800c150:	601a      	str	r2, [r3, #0]
 800c152:	e000      	b.n	800c156 <HAL_TIM_PWM_Start+0x1ba>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c154:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800c156:	2300      	movs	r3, #0
}
 800c158:	0018      	movs	r0, r3
 800c15a:	46bd      	mov	sp, r7
 800c15c:	b004      	add	sp, #16
 800c15e:	bd80      	pop	{r7, pc}
 800c160:	40012c00 	.word	0x40012c00
 800c164:	40014000 	.word	0x40014000
 800c168:	40014400 	.word	0x40014400
 800c16c:	40014800 	.word	0x40014800
 800c170:	40000400 	.word	0x40000400
 800c174:	40000800 	.word	0x40000800
 800c178:	00010007 	.word	0x00010007

0800c17c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c17c:	b580      	push	{r7, lr}
 800c17e:	b082      	sub	sp, #8
 800c180:	af00      	add	r7, sp, #0
 800c182:	6078      	str	r0, [r7, #4]
 800c184:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	6839      	ldr	r1, [r7, #0]
 800c18c:	2200      	movs	r2, #0
 800c18e:	0018      	movs	r0, r3
 800c190:	f000 fcdc 	bl	800cb4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	4a37      	ldr	r2, [pc, #220]	@ (800c278 <HAL_TIM_PWM_Stop+0xfc>)
 800c19a:	4293      	cmp	r3, r2
 800c19c:	d00e      	beq.n	800c1bc <HAL_TIM_PWM_Stop+0x40>
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	4a36      	ldr	r2, [pc, #216]	@ (800c27c <HAL_TIM_PWM_Stop+0x100>)
 800c1a4:	4293      	cmp	r3, r2
 800c1a6:	d009      	beq.n	800c1bc <HAL_TIM_PWM_Stop+0x40>
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	4a34      	ldr	r2, [pc, #208]	@ (800c280 <HAL_TIM_PWM_Stop+0x104>)
 800c1ae:	4293      	cmp	r3, r2
 800c1b0:	d004      	beq.n	800c1bc <HAL_TIM_PWM_Stop+0x40>
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	4a33      	ldr	r2, [pc, #204]	@ (800c284 <HAL_TIM_PWM_Stop+0x108>)
 800c1b8:	4293      	cmp	r3, r2
 800c1ba:	d101      	bne.n	800c1c0 <HAL_TIM_PWM_Stop+0x44>
 800c1bc:	2301      	movs	r3, #1
 800c1be:	e000      	b.n	800c1c2 <HAL_TIM_PWM_Stop+0x46>
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d013      	beq.n	800c1ee <HAL_TIM_PWM_Stop+0x72>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	6a1b      	ldr	r3, [r3, #32]
 800c1cc:	4a2e      	ldr	r2, [pc, #184]	@ (800c288 <HAL_TIM_PWM_Stop+0x10c>)
 800c1ce:	4013      	ands	r3, r2
 800c1d0:	d10d      	bne.n	800c1ee <HAL_TIM_PWM_Stop+0x72>
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	6a1b      	ldr	r3, [r3, #32]
 800c1d8:	4a2c      	ldr	r2, [pc, #176]	@ (800c28c <HAL_TIM_PWM_Stop+0x110>)
 800c1da:	4013      	ands	r3, r2
 800c1dc:	d107      	bne.n	800c1ee <HAL_TIM_PWM_Stop+0x72>
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	4929      	ldr	r1, [pc, #164]	@ (800c290 <HAL_TIM_PWM_Stop+0x114>)
 800c1ea:	400a      	ands	r2, r1
 800c1ec:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	6a1b      	ldr	r3, [r3, #32]
 800c1f4:	4a24      	ldr	r2, [pc, #144]	@ (800c288 <HAL_TIM_PWM_Stop+0x10c>)
 800c1f6:	4013      	ands	r3, r2
 800c1f8:	d10d      	bne.n	800c216 <HAL_TIM_PWM_Stop+0x9a>
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	6a1b      	ldr	r3, [r3, #32]
 800c200:	4a22      	ldr	r2, [pc, #136]	@ (800c28c <HAL_TIM_PWM_Stop+0x110>)
 800c202:	4013      	ands	r3, r2
 800c204:	d107      	bne.n	800c216 <HAL_TIM_PWM_Stop+0x9a>
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	681a      	ldr	r2, [r3, #0]
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	2101      	movs	r1, #1
 800c212:	438a      	bics	r2, r1
 800c214:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800c216:	683b      	ldr	r3, [r7, #0]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d104      	bne.n	800c226 <HAL_TIM_PWM_Stop+0xaa>
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	223e      	movs	r2, #62	@ 0x3e
 800c220:	2101      	movs	r1, #1
 800c222:	5499      	strb	r1, [r3, r2]
 800c224:	e023      	b.n	800c26e <HAL_TIM_PWM_Stop+0xf2>
 800c226:	683b      	ldr	r3, [r7, #0]
 800c228:	2b04      	cmp	r3, #4
 800c22a:	d104      	bne.n	800c236 <HAL_TIM_PWM_Stop+0xba>
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	223f      	movs	r2, #63	@ 0x3f
 800c230:	2101      	movs	r1, #1
 800c232:	5499      	strb	r1, [r3, r2]
 800c234:	e01b      	b.n	800c26e <HAL_TIM_PWM_Stop+0xf2>
 800c236:	683b      	ldr	r3, [r7, #0]
 800c238:	2b08      	cmp	r3, #8
 800c23a:	d104      	bne.n	800c246 <HAL_TIM_PWM_Stop+0xca>
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	2240      	movs	r2, #64	@ 0x40
 800c240:	2101      	movs	r1, #1
 800c242:	5499      	strb	r1, [r3, r2]
 800c244:	e013      	b.n	800c26e <HAL_TIM_PWM_Stop+0xf2>
 800c246:	683b      	ldr	r3, [r7, #0]
 800c248:	2b0c      	cmp	r3, #12
 800c24a:	d104      	bne.n	800c256 <HAL_TIM_PWM_Stop+0xda>
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	2241      	movs	r2, #65	@ 0x41
 800c250:	2101      	movs	r1, #1
 800c252:	5499      	strb	r1, [r3, r2]
 800c254:	e00b      	b.n	800c26e <HAL_TIM_PWM_Stop+0xf2>
 800c256:	683b      	ldr	r3, [r7, #0]
 800c258:	2b10      	cmp	r3, #16
 800c25a:	d104      	bne.n	800c266 <HAL_TIM_PWM_Stop+0xea>
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	2242      	movs	r2, #66	@ 0x42
 800c260:	2101      	movs	r1, #1
 800c262:	5499      	strb	r1, [r3, r2]
 800c264:	e003      	b.n	800c26e <HAL_TIM_PWM_Stop+0xf2>
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	2243      	movs	r2, #67	@ 0x43
 800c26a:	2101      	movs	r1, #1
 800c26c:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800c26e:	2300      	movs	r3, #0
}
 800c270:	0018      	movs	r0, r3
 800c272:	46bd      	mov	sp, r7
 800c274:	b002      	add	sp, #8
 800c276:	bd80      	pop	{r7, pc}
 800c278:	40012c00 	.word	0x40012c00
 800c27c:	40014000 	.word	0x40014000
 800c280:	40014400 	.word	0x40014400
 800c284:	40014800 	.word	0x40014800
 800c288:	00001111 	.word	0x00001111
 800c28c:	00000444 	.word	0x00000444
 800c290:	ffff7fff 	.word	0xffff7fff

0800c294 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c294:	b580      	push	{r7, lr}
 800c296:	b086      	sub	sp, #24
 800c298:	af00      	add	r7, sp, #0
 800c29a:	60f8      	str	r0, [r7, #12]
 800c29c:	60b9      	str	r1, [r7, #8]
 800c29e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c2a0:	2317      	movs	r3, #23
 800c2a2:	18fb      	adds	r3, r7, r3
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	223c      	movs	r2, #60	@ 0x3c
 800c2ac:	5c9b      	ldrb	r3, [r3, r2]
 800c2ae:	2b01      	cmp	r3, #1
 800c2b0:	d101      	bne.n	800c2b6 <HAL_TIM_PWM_ConfigChannel+0x22>
 800c2b2:	2302      	movs	r3, #2
 800c2b4:	e0e5      	b.n	800c482 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	223c      	movs	r2, #60	@ 0x3c
 800c2ba:	2101      	movs	r1, #1
 800c2bc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	2b14      	cmp	r3, #20
 800c2c2:	d900      	bls.n	800c2c6 <HAL_TIM_PWM_ConfigChannel+0x32>
 800c2c4:	e0d1      	b.n	800c46a <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	009a      	lsls	r2, r3, #2
 800c2ca:	4b70      	ldr	r3, [pc, #448]	@ (800c48c <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800c2cc:	18d3      	adds	r3, r2, r3
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	68ba      	ldr	r2, [r7, #8]
 800c2d8:	0011      	movs	r1, r2
 800c2da:	0018      	movs	r0, r3
 800c2dc:	f000 f972 	bl	800c5c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	699a      	ldr	r2, [r3, #24]
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	2108      	movs	r1, #8
 800c2ec:	430a      	orrs	r2, r1
 800c2ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	699a      	ldr	r2, [r3, #24]
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	2104      	movs	r1, #4
 800c2fc:	438a      	bics	r2, r1
 800c2fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	6999      	ldr	r1, [r3, #24]
 800c306:	68bb      	ldr	r3, [r7, #8]
 800c308:	691a      	ldr	r2, [r3, #16]
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	430a      	orrs	r2, r1
 800c310:	619a      	str	r2, [r3, #24]
      break;
 800c312:	e0af      	b.n	800c474 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	68ba      	ldr	r2, [r7, #8]
 800c31a:	0011      	movs	r1, r2
 800c31c:	0018      	movs	r0, r3
 800c31e:	f000 f9db 	bl	800c6d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	699a      	ldr	r2, [r3, #24]
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	2180      	movs	r1, #128	@ 0x80
 800c32e:	0109      	lsls	r1, r1, #4
 800c330:	430a      	orrs	r2, r1
 800c332:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	699a      	ldr	r2, [r3, #24]
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	4954      	ldr	r1, [pc, #336]	@ (800c490 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800c340:	400a      	ands	r2, r1
 800c342:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	6999      	ldr	r1, [r3, #24]
 800c34a:	68bb      	ldr	r3, [r7, #8]
 800c34c:	691b      	ldr	r3, [r3, #16]
 800c34e:	021a      	lsls	r2, r3, #8
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	430a      	orrs	r2, r1
 800c356:	619a      	str	r2, [r3, #24]
      break;
 800c358:	e08c      	b.n	800c474 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	68ba      	ldr	r2, [r7, #8]
 800c360:	0011      	movs	r1, r2
 800c362:	0018      	movs	r0, r3
 800c364:	f000 fa3c 	bl	800c7e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	69da      	ldr	r2, [r3, #28]
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	2108      	movs	r1, #8
 800c374:	430a      	orrs	r2, r1
 800c376:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	69da      	ldr	r2, [r3, #28]
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	2104      	movs	r1, #4
 800c384:	438a      	bics	r2, r1
 800c386:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	69d9      	ldr	r1, [r3, #28]
 800c38e:	68bb      	ldr	r3, [r7, #8]
 800c390:	691a      	ldr	r2, [r3, #16]
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	430a      	orrs	r2, r1
 800c398:	61da      	str	r2, [r3, #28]
      break;
 800c39a:	e06b      	b.n	800c474 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	68ba      	ldr	r2, [r7, #8]
 800c3a2:	0011      	movs	r1, r2
 800c3a4:	0018      	movs	r0, r3
 800c3a6:	f000 faa3 	bl	800c8f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	69da      	ldr	r2, [r3, #28]
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	2180      	movs	r1, #128	@ 0x80
 800c3b6:	0109      	lsls	r1, r1, #4
 800c3b8:	430a      	orrs	r2, r1
 800c3ba:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	69da      	ldr	r2, [r3, #28]
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	4932      	ldr	r1, [pc, #200]	@ (800c490 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800c3c8:	400a      	ands	r2, r1
 800c3ca:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	69d9      	ldr	r1, [r3, #28]
 800c3d2:	68bb      	ldr	r3, [r7, #8]
 800c3d4:	691b      	ldr	r3, [r3, #16]
 800c3d6:	021a      	lsls	r2, r3, #8
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	430a      	orrs	r2, r1
 800c3de:	61da      	str	r2, [r3, #28]
      break;
 800c3e0:	e048      	b.n	800c474 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	68ba      	ldr	r2, [r7, #8]
 800c3e8:	0011      	movs	r1, r2
 800c3ea:	0018      	movs	r0, r3
 800c3ec:	f000 faea 	bl	800c9c4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	2108      	movs	r1, #8
 800c3fc:	430a      	orrs	r2, r1
 800c3fe:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	2104      	movs	r1, #4
 800c40c:	438a      	bics	r2, r1
 800c40e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800c416:	68bb      	ldr	r3, [r7, #8]
 800c418:	691a      	ldr	r2, [r3, #16]
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	430a      	orrs	r2, r1
 800c420:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800c422:	e027      	b.n	800c474 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	68ba      	ldr	r2, [r7, #8]
 800c42a:	0011      	movs	r1, r2
 800c42c:	0018      	movs	r0, r3
 800c42e:	f000 fb29 	bl	800ca84 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	2180      	movs	r1, #128	@ 0x80
 800c43e:	0109      	lsls	r1, r1, #4
 800c440:	430a      	orrs	r2, r1
 800c442:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	4910      	ldr	r1, [pc, #64]	@ (800c490 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800c450:	400a      	ands	r2, r1
 800c452:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800c45a:	68bb      	ldr	r3, [r7, #8]
 800c45c:	691b      	ldr	r3, [r3, #16]
 800c45e:	021a      	lsls	r2, r3, #8
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	430a      	orrs	r2, r1
 800c466:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800c468:	e004      	b.n	800c474 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800c46a:	2317      	movs	r3, #23
 800c46c:	18fb      	adds	r3, r7, r3
 800c46e:	2201      	movs	r2, #1
 800c470:	701a      	strb	r2, [r3, #0]
      break;
 800c472:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	223c      	movs	r2, #60	@ 0x3c
 800c478:	2100      	movs	r1, #0
 800c47a:	5499      	strb	r1, [r3, r2]

  return status;
 800c47c:	2317      	movs	r3, #23
 800c47e:	18fb      	adds	r3, r7, r3
 800c480:	781b      	ldrb	r3, [r3, #0]
}
 800c482:	0018      	movs	r0, r3
 800c484:	46bd      	mov	sp, r7
 800c486:	b006      	add	sp, #24
 800c488:	bd80      	pop	{r7, pc}
 800c48a:	46c0      	nop			@ (mov r8, r8)
 800c48c:	0801c198 	.word	0x0801c198
 800c490:	fffffbff 	.word	0xfffffbff

0800c494 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c494:	b580      	push	{r7, lr}
 800c496:	b084      	sub	sp, #16
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6078      	str	r0, [r7, #4]
 800c49c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	4a3f      	ldr	r2, [pc, #252]	@ (800c5a4 <TIM_Base_SetConfig+0x110>)
 800c4a8:	4293      	cmp	r3, r2
 800c4aa:	d00c      	beq.n	800c4c6 <TIM_Base_SetConfig+0x32>
 800c4ac:	687a      	ldr	r2, [r7, #4]
 800c4ae:	2380      	movs	r3, #128	@ 0x80
 800c4b0:	05db      	lsls	r3, r3, #23
 800c4b2:	429a      	cmp	r2, r3
 800c4b4:	d007      	beq.n	800c4c6 <TIM_Base_SetConfig+0x32>
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	4a3b      	ldr	r2, [pc, #236]	@ (800c5a8 <TIM_Base_SetConfig+0x114>)
 800c4ba:	4293      	cmp	r3, r2
 800c4bc:	d003      	beq.n	800c4c6 <TIM_Base_SetConfig+0x32>
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	4a3a      	ldr	r2, [pc, #232]	@ (800c5ac <TIM_Base_SetConfig+0x118>)
 800c4c2:	4293      	cmp	r3, r2
 800c4c4:	d108      	bne.n	800c4d8 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	2270      	movs	r2, #112	@ 0x70
 800c4ca:	4393      	bics	r3, r2
 800c4cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c4ce:	683b      	ldr	r3, [r7, #0]
 800c4d0:	685b      	ldr	r3, [r3, #4]
 800c4d2:	68fa      	ldr	r2, [r7, #12]
 800c4d4:	4313      	orrs	r3, r2
 800c4d6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	4a32      	ldr	r2, [pc, #200]	@ (800c5a4 <TIM_Base_SetConfig+0x110>)
 800c4dc:	4293      	cmp	r3, r2
 800c4de:	d01c      	beq.n	800c51a <TIM_Base_SetConfig+0x86>
 800c4e0:	687a      	ldr	r2, [r7, #4]
 800c4e2:	2380      	movs	r3, #128	@ 0x80
 800c4e4:	05db      	lsls	r3, r3, #23
 800c4e6:	429a      	cmp	r2, r3
 800c4e8:	d017      	beq.n	800c51a <TIM_Base_SetConfig+0x86>
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	4a2e      	ldr	r2, [pc, #184]	@ (800c5a8 <TIM_Base_SetConfig+0x114>)
 800c4ee:	4293      	cmp	r3, r2
 800c4f0:	d013      	beq.n	800c51a <TIM_Base_SetConfig+0x86>
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	4a2d      	ldr	r2, [pc, #180]	@ (800c5ac <TIM_Base_SetConfig+0x118>)
 800c4f6:	4293      	cmp	r3, r2
 800c4f8:	d00f      	beq.n	800c51a <TIM_Base_SetConfig+0x86>
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	4a2c      	ldr	r2, [pc, #176]	@ (800c5b0 <TIM_Base_SetConfig+0x11c>)
 800c4fe:	4293      	cmp	r3, r2
 800c500:	d00b      	beq.n	800c51a <TIM_Base_SetConfig+0x86>
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	4a2b      	ldr	r2, [pc, #172]	@ (800c5b4 <TIM_Base_SetConfig+0x120>)
 800c506:	4293      	cmp	r3, r2
 800c508:	d007      	beq.n	800c51a <TIM_Base_SetConfig+0x86>
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	4a2a      	ldr	r2, [pc, #168]	@ (800c5b8 <TIM_Base_SetConfig+0x124>)
 800c50e:	4293      	cmp	r3, r2
 800c510:	d003      	beq.n	800c51a <TIM_Base_SetConfig+0x86>
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	4a29      	ldr	r2, [pc, #164]	@ (800c5bc <TIM_Base_SetConfig+0x128>)
 800c516:	4293      	cmp	r3, r2
 800c518:	d108      	bne.n	800c52c <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	4a28      	ldr	r2, [pc, #160]	@ (800c5c0 <TIM_Base_SetConfig+0x12c>)
 800c51e:	4013      	ands	r3, r2
 800c520:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c522:	683b      	ldr	r3, [r7, #0]
 800c524:	68db      	ldr	r3, [r3, #12]
 800c526:	68fa      	ldr	r2, [r7, #12]
 800c528:	4313      	orrs	r3, r2
 800c52a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	2280      	movs	r2, #128	@ 0x80
 800c530:	4393      	bics	r3, r2
 800c532:	001a      	movs	r2, r3
 800c534:	683b      	ldr	r3, [r7, #0]
 800c536:	695b      	ldr	r3, [r3, #20]
 800c538:	4313      	orrs	r3, r2
 800c53a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	68fa      	ldr	r2, [r7, #12]
 800c540:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c542:	683b      	ldr	r3, [r7, #0]
 800c544:	689a      	ldr	r2, [r3, #8]
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c54a:	683b      	ldr	r3, [r7, #0]
 800c54c:	681a      	ldr	r2, [r3, #0]
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	4a13      	ldr	r2, [pc, #76]	@ (800c5a4 <TIM_Base_SetConfig+0x110>)
 800c556:	4293      	cmp	r3, r2
 800c558:	d00b      	beq.n	800c572 <TIM_Base_SetConfig+0xde>
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	4a15      	ldr	r2, [pc, #84]	@ (800c5b4 <TIM_Base_SetConfig+0x120>)
 800c55e:	4293      	cmp	r3, r2
 800c560:	d007      	beq.n	800c572 <TIM_Base_SetConfig+0xde>
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	4a14      	ldr	r2, [pc, #80]	@ (800c5b8 <TIM_Base_SetConfig+0x124>)
 800c566:	4293      	cmp	r3, r2
 800c568:	d003      	beq.n	800c572 <TIM_Base_SetConfig+0xde>
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	4a13      	ldr	r2, [pc, #76]	@ (800c5bc <TIM_Base_SetConfig+0x128>)
 800c56e:	4293      	cmp	r3, r2
 800c570:	d103      	bne.n	800c57a <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c572:	683b      	ldr	r3, [r7, #0]
 800c574:	691a      	ldr	r2, [r3, #16]
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	2201      	movs	r2, #1
 800c57e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	691b      	ldr	r3, [r3, #16]
 800c584:	2201      	movs	r2, #1
 800c586:	4013      	ands	r3, r2
 800c588:	2b01      	cmp	r3, #1
 800c58a:	d106      	bne.n	800c59a <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	691b      	ldr	r3, [r3, #16]
 800c590:	2201      	movs	r2, #1
 800c592:	4393      	bics	r3, r2
 800c594:	001a      	movs	r2, r3
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	611a      	str	r2, [r3, #16]
  }
}
 800c59a:	46c0      	nop			@ (mov r8, r8)
 800c59c:	46bd      	mov	sp, r7
 800c59e:	b004      	add	sp, #16
 800c5a0:	bd80      	pop	{r7, pc}
 800c5a2:	46c0      	nop			@ (mov r8, r8)
 800c5a4:	40012c00 	.word	0x40012c00
 800c5a8:	40000400 	.word	0x40000400
 800c5ac:	40000800 	.word	0x40000800
 800c5b0:	40002000 	.word	0x40002000
 800c5b4:	40014000 	.word	0x40014000
 800c5b8:	40014400 	.word	0x40014400
 800c5bc:	40014800 	.word	0x40014800
 800c5c0:	fffffcff 	.word	0xfffffcff

0800c5c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b086      	sub	sp, #24
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	6078      	str	r0, [r7, #4]
 800c5cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	6a1b      	ldr	r3, [r3, #32]
 800c5d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	6a1b      	ldr	r3, [r3, #32]
 800c5d8:	2201      	movs	r2, #1
 800c5da:	4393      	bics	r3, r2
 800c5dc:	001a      	movs	r2, r3
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	685b      	ldr	r3, [r3, #4]
 800c5e6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	699b      	ldr	r3, [r3, #24]
 800c5ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	4a32      	ldr	r2, [pc, #200]	@ (800c6bc <TIM_OC1_SetConfig+0xf8>)
 800c5f2:	4013      	ands	r3, r2
 800c5f4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	2203      	movs	r2, #3
 800c5fa:	4393      	bics	r3, r2
 800c5fc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c5fe:	683b      	ldr	r3, [r7, #0]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	68fa      	ldr	r2, [r7, #12]
 800c604:	4313      	orrs	r3, r2
 800c606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c608:	697b      	ldr	r3, [r7, #20]
 800c60a:	2202      	movs	r2, #2
 800c60c:	4393      	bics	r3, r2
 800c60e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c610:	683b      	ldr	r3, [r7, #0]
 800c612:	689b      	ldr	r3, [r3, #8]
 800c614:	697a      	ldr	r2, [r7, #20]
 800c616:	4313      	orrs	r3, r2
 800c618:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	4a28      	ldr	r2, [pc, #160]	@ (800c6c0 <TIM_OC1_SetConfig+0xfc>)
 800c61e:	4293      	cmp	r3, r2
 800c620:	d00b      	beq.n	800c63a <TIM_OC1_SetConfig+0x76>
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	4a27      	ldr	r2, [pc, #156]	@ (800c6c4 <TIM_OC1_SetConfig+0x100>)
 800c626:	4293      	cmp	r3, r2
 800c628:	d007      	beq.n	800c63a <TIM_OC1_SetConfig+0x76>
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	4a26      	ldr	r2, [pc, #152]	@ (800c6c8 <TIM_OC1_SetConfig+0x104>)
 800c62e:	4293      	cmp	r3, r2
 800c630:	d003      	beq.n	800c63a <TIM_OC1_SetConfig+0x76>
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	4a25      	ldr	r2, [pc, #148]	@ (800c6cc <TIM_OC1_SetConfig+0x108>)
 800c636:	4293      	cmp	r3, r2
 800c638:	d10c      	bne.n	800c654 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c63a:	697b      	ldr	r3, [r7, #20]
 800c63c:	2208      	movs	r2, #8
 800c63e:	4393      	bics	r3, r2
 800c640:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c642:	683b      	ldr	r3, [r7, #0]
 800c644:	68db      	ldr	r3, [r3, #12]
 800c646:	697a      	ldr	r2, [r7, #20]
 800c648:	4313      	orrs	r3, r2
 800c64a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c64c:	697b      	ldr	r3, [r7, #20]
 800c64e:	2204      	movs	r2, #4
 800c650:	4393      	bics	r3, r2
 800c652:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	4a1a      	ldr	r2, [pc, #104]	@ (800c6c0 <TIM_OC1_SetConfig+0xfc>)
 800c658:	4293      	cmp	r3, r2
 800c65a:	d00b      	beq.n	800c674 <TIM_OC1_SetConfig+0xb0>
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	4a19      	ldr	r2, [pc, #100]	@ (800c6c4 <TIM_OC1_SetConfig+0x100>)
 800c660:	4293      	cmp	r3, r2
 800c662:	d007      	beq.n	800c674 <TIM_OC1_SetConfig+0xb0>
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	4a18      	ldr	r2, [pc, #96]	@ (800c6c8 <TIM_OC1_SetConfig+0x104>)
 800c668:	4293      	cmp	r3, r2
 800c66a:	d003      	beq.n	800c674 <TIM_OC1_SetConfig+0xb0>
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	4a17      	ldr	r2, [pc, #92]	@ (800c6cc <TIM_OC1_SetConfig+0x108>)
 800c670:	4293      	cmp	r3, r2
 800c672:	d111      	bne.n	800c698 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c674:	693b      	ldr	r3, [r7, #16]
 800c676:	4a16      	ldr	r2, [pc, #88]	@ (800c6d0 <TIM_OC1_SetConfig+0x10c>)
 800c678:	4013      	ands	r3, r2
 800c67a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c67c:	693b      	ldr	r3, [r7, #16]
 800c67e:	4a15      	ldr	r2, [pc, #84]	@ (800c6d4 <TIM_OC1_SetConfig+0x110>)
 800c680:	4013      	ands	r3, r2
 800c682:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c684:	683b      	ldr	r3, [r7, #0]
 800c686:	695b      	ldr	r3, [r3, #20]
 800c688:	693a      	ldr	r2, [r7, #16]
 800c68a:	4313      	orrs	r3, r2
 800c68c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c68e:	683b      	ldr	r3, [r7, #0]
 800c690:	699b      	ldr	r3, [r3, #24]
 800c692:	693a      	ldr	r2, [r7, #16]
 800c694:	4313      	orrs	r3, r2
 800c696:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	693a      	ldr	r2, [r7, #16]
 800c69c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	68fa      	ldr	r2, [r7, #12]
 800c6a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c6a4:	683b      	ldr	r3, [r7, #0]
 800c6a6:	685a      	ldr	r2, [r3, #4]
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	697a      	ldr	r2, [r7, #20]
 800c6b0:	621a      	str	r2, [r3, #32]
}
 800c6b2:	46c0      	nop			@ (mov r8, r8)
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	b006      	add	sp, #24
 800c6b8:	bd80      	pop	{r7, pc}
 800c6ba:	46c0      	nop			@ (mov r8, r8)
 800c6bc:	fffeff8f 	.word	0xfffeff8f
 800c6c0:	40012c00 	.word	0x40012c00
 800c6c4:	40014000 	.word	0x40014000
 800c6c8:	40014400 	.word	0x40014400
 800c6cc:	40014800 	.word	0x40014800
 800c6d0:	fffffeff 	.word	0xfffffeff
 800c6d4:	fffffdff 	.word	0xfffffdff

0800c6d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b086      	sub	sp, #24
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	6078      	str	r0, [r7, #4]
 800c6e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	6a1b      	ldr	r3, [r3, #32]
 800c6e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	6a1b      	ldr	r3, [r3, #32]
 800c6ec:	2210      	movs	r2, #16
 800c6ee:	4393      	bics	r3, r2
 800c6f0:	001a      	movs	r2, r3
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	685b      	ldr	r3, [r3, #4]
 800c6fa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	699b      	ldr	r3, [r3, #24]
 800c700:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	4a2e      	ldr	r2, [pc, #184]	@ (800c7c0 <TIM_OC2_SetConfig+0xe8>)
 800c706:	4013      	ands	r3, r2
 800c708:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	4a2d      	ldr	r2, [pc, #180]	@ (800c7c4 <TIM_OC2_SetConfig+0xec>)
 800c70e:	4013      	ands	r3, r2
 800c710:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c712:	683b      	ldr	r3, [r7, #0]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	021b      	lsls	r3, r3, #8
 800c718:	68fa      	ldr	r2, [r7, #12]
 800c71a:	4313      	orrs	r3, r2
 800c71c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c71e:	697b      	ldr	r3, [r7, #20]
 800c720:	2220      	movs	r2, #32
 800c722:	4393      	bics	r3, r2
 800c724:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c726:	683b      	ldr	r3, [r7, #0]
 800c728:	689b      	ldr	r3, [r3, #8]
 800c72a:	011b      	lsls	r3, r3, #4
 800c72c:	697a      	ldr	r2, [r7, #20]
 800c72e:	4313      	orrs	r3, r2
 800c730:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	4a24      	ldr	r2, [pc, #144]	@ (800c7c8 <TIM_OC2_SetConfig+0xf0>)
 800c736:	4293      	cmp	r3, r2
 800c738:	d10d      	bne.n	800c756 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c73a:	697b      	ldr	r3, [r7, #20]
 800c73c:	2280      	movs	r2, #128	@ 0x80
 800c73e:	4393      	bics	r3, r2
 800c740:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c742:	683b      	ldr	r3, [r7, #0]
 800c744:	68db      	ldr	r3, [r3, #12]
 800c746:	011b      	lsls	r3, r3, #4
 800c748:	697a      	ldr	r2, [r7, #20]
 800c74a:	4313      	orrs	r3, r2
 800c74c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c74e:	697b      	ldr	r3, [r7, #20]
 800c750:	2240      	movs	r2, #64	@ 0x40
 800c752:	4393      	bics	r3, r2
 800c754:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	4a1b      	ldr	r2, [pc, #108]	@ (800c7c8 <TIM_OC2_SetConfig+0xf0>)
 800c75a:	4293      	cmp	r3, r2
 800c75c:	d00b      	beq.n	800c776 <TIM_OC2_SetConfig+0x9e>
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	4a1a      	ldr	r2, [pc, #104]	@ (800c7cc <TIM_OC2_SetConfig+0xf4>)
 800c762:	4293      	cmp	r3, r2
 800c764:	d007      	beq.n	800c776 <TIM_OC2_SetConfig+0x9e>
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	4a19      	ldr	r2, [pc, #100]	@ (800c7d0 <TIM_OC2_SetConfig+0xf8>)
 800c76a:	4293      	cmp	r3, r2
 800c76c:	d003      	beq.n	800c776 <TIM_OC2_SetConfig+0x9e>
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	4a18      	ldr	r2, [pc, #96]	@ (800c7d4 <TIM_OC2_SetConfig+0xfc>)
 800c772:	4293      	cmp	r3, r2
 800c774:	d113      	bne.n	800c79e <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c776:	693b      	ldr	r3, [r7, #16]
 800c778:	4a17      	ldr	r2, [pc, #92]	@ (800c7d8 <TIM_OC2_SetConfig+0x100>)
 800c77a:	4013      	ands	r3, r2
 800c77c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c77e:	693b      	ldr	r3, [r7, #16]
 800c780:	4a16      	ldr	r2, [pc, #88]	@ (800c7dc <TIM_OC2_SetConfig+0x104>)
 800c782:	4013      	ands	r3, r2
 800c784:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c786:	683b      	ldr	r3, [r7, #0]
 800c788:	695b      	ldr	r3, [r3, #20]
 800c78a:	009b      	lsls	r3, r3, #2
 800c78c:	693a      	ldr	r2, [r7, #16]
 800c78e:	4313      	orrs	r3, r2
 800c790:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c792:	683b      	ldr	r3, [r7, #0]
 800c794:	699b      	ldr	r3, [r3, #24]
 800c796:	009b      	lsls	r3, r3, #2
 800c798:	693a      	ldr	r2, [r7, #16]
 800c79a:	4313      	orrs	r3, r2
 800c79c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	693a      	ldr	r2, [r7, #16]
 800c7a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	68fa      	ldr	r2, [r7, #12]
 800c7a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c7aa:	683b      	ldr	r3, [r7, #0]
 800c7ac:	685a      	ldr	r2, [r3, #4]
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	697a      	ldr	r2, [r7, #20]
 800c7b6:	621a      	str	r2, [r3, #32]
}
 800c7b8:	46c0      	nop			@ (mov r8, r8)
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	b006      	add	sp, #24
 800c7be:	bd80      	pop	{r7, pc}
 800c7c0:	feff8fff 	.word	0xfeff8fff
 800c7c4:	fffffcff 	.word	0xfffffcff
 800c7c8:	40012c00 	.word	0x40012c00
 800c7cc:	40014000 	.word	0x40014000
 800c7d0:	40014400 	.word	0x40014400
 800c7d4:	40014800 	.word	0x40014800
 800c7d8:	fffffbff 	.word	0xfffffbff
 800c7dc:	fffff7ff 	.word	0xfffff7ff

0800c7e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	b086      	sub	sp, #24
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	6078      	str	r0, [r7, #4]
 800c7e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	6a1b      	ldr	r3, [r3, #32]
 800c7ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	6a1b      	ldr	r3, [r3, #32]
 800c7f4:	4a33      	ldr	r2, [pc, #204]	@ (800c8c4 <TIM_OC3_SetConfig+0xe4>)
 800c7f6:	401a      	ands	r2, r3
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	685b      	ldr	r3, [r3, #4]
 800c800:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	69db      	ldr	r3, [r3, #28]
 800c806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	4a2f      	ldr	r2, [pc, #188]	@ (800c8c8 <TIM_OC3_SetConfig+0xe8>)
 800c80c:	4013      	ands	r3, r2
 800c80e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	2203      	movs	r2, #3
 800c814:	4393      	bics	r3, r2
 800c816:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c818:	683b      	ldr	r3, [r7, #0]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	68fa      	ldr	r2, [r7, #12]
 800c81e:	4313      	orrs	r3, r2
 800c820:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c822:	697b      	ldr	r3, [r7, #20]
 800c824:	4a29      	ldr	r2, [pc, #164]	@ (800c8cc <TIM_OC3_SetConfig+0xec>)
 800c826:	4013      	ands	r3, r2
 800c828:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c82a:	683b      	ldr	r3, [r7, #0]
 800c82c:	689b      	ldr	r3, [r3, #8]
 800c82e:	021b      	lsls	r3, r3, #8
 800c830:	697a      	ldr	r2, [r7, #20]
 800c832:	4313      	orrs	r3, r2
 800c834:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	4a25      	ldr	r2, [pc, #148]	@ (800c8d0 <TIM_OC3_SetConfig+0xf0>)
 800c83a:	4293      	cmp	r3, r2
 800c83c:	d10d      	bne.n	800c85a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c83e:	697b      	ldr	r3, [r7, #20]
 800c840:	4a24      	ldr	r2, [pc, #144]	@ (800c8d4 <TIM_OC3_SetConfig+0xf4>)
 800c842:	4013      	ands	r3, r2
 800c844:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c846:	683b      	ldr	r3, [r7, #0]
 800c848:	68db      	ldr	r3, [r3, #12]
 800c84a:	021b      	lsls	r3, r3, #8
 800c84c:	697a      	ldr	r2, [r7, #20]
 800c84e:	4313      	orrs	r3, r2
 800c850:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c852:	697b      	ldr	r3, [r7, #20]
 800c854:	4a20      	ldr	r2, [pc, #128]	@ (800c8d8 <TIM_OC3_SetConfig+0xf8>)
 800c856:	4013      	ands	r3, r2
 800c858:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	4a1c      	ldr	r2, [pc, #112]	@ (800c8d0 <TIM_OC3_SetConfig+0xf0>)
 800c85e:	4293      	cmp	r3, r2
 800c860:	d00b      	beq.n	800c87a <TIM_OC3_SetConfig+0x9a>
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	4a1d      	ldr	r2, [pc, #116]	@ (800c8dc <TIM_OC3_SetConfig+0xfc>)
 800c866:	4293      	cmp	r3, r2
 800c868:	d007      	beq.n	800c87a <TIM_OC3_SetConfig+0x9a>
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	4a1c      	ldr	r2, [pc, #112]	@ (800c8e0 <TIM_OC3_SetConfig+0x100>)
 800c86e:	4293      	cmp	r3, r2
 800c870:	d003      	beq.n	800c87a <TIM_OC3_SetConfig+0x9a>
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	4a1b      	ldr	r2, [pc, #108]	@ (800c8e4 <TIM_OC3_SetConfig+0x104>)
 800c876:	4293      	cmp	r3, r2
 800c878:	d113      	bne.n	800c8a2 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c87a:	693b      	ldr	r3, [r7, #16]
 800c87c:	4a1a      	ldr	r2, [pc, #104]	@ (800c8e8 <TIM_OC3_SetConfig+0x108>)
 800c87e:	4013      	ands	r3, r2
 800c880:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c882:	693b      	ldr	r3, [r7, #16]
 800c884:	4a19      	ldr	r2, [pc, #100]	@ (800c8ec <TIM_OC3_SetConfig+0x10c>)
 800c886:	4013      	ands	r3, r2
 800c888:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c88a:	683b      	ldr	r3, [r7, #0]
 800c88c:	695b      	ldr	r3, [r3, #20]
 800c88e:	011b      	lsls	r3, r3, #4
 800c890:	693a      	ldr	r2, [r7, #16]
 800c892:	4313      	orrs	r3, r2
 800c894:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c896:	683b      	ldr	r3, [r7, #0]
 800c898:	699b      	ldr	r3, [r3, #24]
 800c89a:	011b      	lsls	r3, r3, #4
 800c89c:	693a      	ldr	r2, [r7, #16]
 800c89e:	4313      	orrs	r3, r2
 800c8a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	693a      	ldr	r2, [r7, #16]
 800c8a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	68fa      	ldr	r2, [r7, #12]
 800c8ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c8ae:	683b      	ldr	r3, [r7, #0]
 800c8b0:	685a      	ldr	r2, [r3, #4]
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	697a      	ldr	r2, [r7, #20]
 800c8ba:	621a      	str	r2, [r3, #32]
}
 800c8bc:	46c0      	nop			@ (mov r8, r8)
 800c8be:	46bd      	mov	sp, r7
 800c8c0:	b006      	add	sp, #24
 800c8c2:	bd80      	pop	{r7, pc}
 800c8c4:	fffffeff 	.word	0xfffffeff
 800c8c8:	fffeff8f 	.word	0xfffeff8f
 800c8cc:	fffffdff 	.word	0xfffffdff
 800c8d0:	40012c00 	.word	0x40012c00
 800c8d4:	fffff7ff 	.word	0xfffff7ff
 800c8d8:	fffffbff 	.word	0xfffffbff
 800c8dc:	40014000 	.word	0x40014000
 800c8e0:	40014400 	.word	0x40014400
 800c8e4:	40014800 	.word	0x40014800
 800c8e8:	ffffefff 	.word	0xffffefff
 800c8ec:	ffffdfff 	.word	0xffffdfff

0800c8f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c8f0:	b580      	push	{r7, lr}
 800c8f2:	b086      	sub	sp, #24
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	6078      	str	r0, [r7, #4]
 800c8f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	6a1b      	ldr	r3, [r3, #32]
 800c8fe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	6a1b      	ldr	r3, [r3, #32]
 800c904:	4a26      	ldr	r2, [pc, #152]	@ (800c9a0 <TIM_OC4_SetConfig+0xb0>)
 800c906:	401a      	ands	r2, r3
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	685b      	ldr	r3, [r3, #4]
 800c910:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	69db      	ldr	r3, [r3, #28]
 800c916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	4a22      	ldr	r2, [pc, #136]	@ (800c9a4 <TIM_OC4_SetConfig+0xb4>)
 800c91c:	4013      	ands	r3, r2
 800c91e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	4a21      	ldr	r2, [pc, #132]	@ (800c9a8 <TIM_OC4_SetConfig+0xb8>)
 800c924:	4013      	ands	r3, r2
 800c926:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c928:	683b      	ldr	r3, [r7, #0]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	021b      	lsls	r3, r3, #8
 800c92e:	68fa      	ldr	r2, [r7, #12]
 800c930:	4313      	orrs	r3, r2
 800c932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c934:	693b      	ldr	r3, [r7, #16]
 800c936:	4a1d      	ldr	r2, [pc, #116]	@ (800c9ac <TIM_OC4_SetConfig+0xbc>)
 800c938:	4013      	ands	r3, r2
 800c93a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c93c:	683b      	ldr	r3, [r7, #0]
 800c93e:	689b      	ldr	r3, [r3, #8]
 800c940:	031b      	lsls	r3, r3, #12
 800c942:	693a      	ldr	r2, [r7, #16]
 800c944:	4313      	orrs	r3, r2
 800c946:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	4a19      	ldr	r2, [pc, #100]	@ (800c9b0 <TIM_OC4_SetConfig+0xc0>)
 800c94c:	4293      	cmp	r3, r2
 800c94e:	d00b      	beq.n	800c968 <TIM_OC4_SetConfig+0x78>
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	4a18      	ldr	r2, [pc, #96]	@ (800c9b4 <TIM_OC4_SetConfig+0xc4>)
 800c954:	4293      	cmp	r3, r2
 800c956:	d007      	beq.n	800c968 <TIM_OC4_SetConfig+0x78>
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	4a17      	ldr	r2, [pc, #92]	@ (800c9b8 <TIM_OC4_SetConfig+0xc8>)
 800c95c:	4293      	cmp	r3, r2
 800c95e:	d003      	beq.n	800c968 <TIM_OC4_SetConfig+0x78>
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	4a16      	ldr	r2, [pc, #88]	@ (800c9bc <TIM_OC4_SetConfig+0xcc>)
 800c964:	4293      	cmp	r3, r2
 800c966:	d109      	bne.n	800c97c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c968:	697b      	ldr	r3, [r7, #20]
 800c96a:	4a15      	ldr	r2, [pc, #84]	@ (800c9c0 <TIM_OC4_SetConfig+0xd0>)
 800c96c:	4013      	ands	r3, r2
 800c96e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c970:	683b      	ldr	r3, [r7, #0]
 800c972:	695b      	ldr	r3, [r3, #20]
 800c974:	019b      	lsls	r3, r3, #6
 800c976:	697a      	ldr	r2, [r7, #20]
 800c978:	4313      	orrs	r3, r2
 800c97a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	697a      	ldr	r2, [r7, #20]
 800c980:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	68fa      	ldr	r2, [r7, #12]
 800c986:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c988:	683b      	ldr	r3, [r7, #0]
 800c98a:	685a      	ldr	r2, [r3, #4]
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	693a      	ldr	r2, [r7, #16]
 800c994:	621a      	str	r2, [r3, #32]
}
 800c996:	46c0      	nop			@ (mov r8, r8)
 800c998:	46bd      	mov	sp, r7
 800c99a:	b006      	add	sp, #24
 800c99c:	bd80      	pop	{r7, pc}
 800c99e:	46c0      	nop			@ (mov r8, r8)
 800c9a0:	ffffefff 	.word	0xffffefff
 800c9a4:	feff8fff 	.word	0xfeff8fff
 800c9a8:	fffffcff 	.word	0xfffffcff
 800c9ac:	ffffdfff 	.word	0xffffdfff
 800c9b0:	40012c00 	.word	0x40012c00
 800c9b4:	40014000 	.word	0x40014000
 800c9b8:	40014400 	.word	0x40014400
 800c9bc:	40014800 	.word	0x40014800
 800c9c0:	ffffbfff 	.word	0xffffbfff

0800c9c4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c9c4:	b580      	push	{r7, lr}
 800c9c6:	b086      	sub	sp, #24
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	6078      	str	r0, [r7, #4]
 800c9cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	6a1b      	ldr	r3, [r3, #32]
 800c9d2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	6a1b      	ldr	r3, [r3, #32]
 800c9d8:	4a23      	ldr	r2, [pc, #140]	@ (800ca68 <TIM_OC5_SetConfig+0xa4>)
 800c9da:	401a      	ands	r2, r3
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	685b      	ldr	r3, [r3, #4]
 800c9e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c9ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	4a1f      	ldr	r2, [pc, #124]	@ (800ca6c <TIM_OC5_SetConfig+0xa8>)
 800c9f0:	4013      	ands	r3, r2
 800c9f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c9f4:	683b      	ldr	r3, [r7, #0]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	68fa      	ldr	r2, [r7, #12]
 800c9fa:	4313      	orrs	r3, r2
 800c9fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c9fe:	693b      	ldr	r3, [r7, #16]
 800ca00:	4a1b      	ldr	r2, [pc, #108]	@ (800ca70 <TIM_OC5_SetConfig+0xac>)
 800ca02:	4013      	ands	r3, r2
 800ca04:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ca06:	683b      	ldr	r3, [r7, #0]
 800ca08:	689b      	ldr	r3, [r3, #8]
 800ca0a:	041b      	lsls	r3, r3, #16
 800ca0c:	693a      	ldr	r2, [r7, #16]
 800ca0e:	4313      	orrs	r3, r2
 800ca10:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	4a17      	ldr	r2, [pc, #92]	@ (800ca74 <TIM_OC5_SetConfig+0xb0>)
 800ca16:	4293      	cmp	r3, r2
 800ca18:	d00b      	beq.n	800ca32 <TIM_OC5_SetConfig+0x6e>
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	4a16      	ldr	r2, [pc, #88]	@ (800ca78 <TIM_OC5_SetConfig+0xb4>)
 800ca1e:	4293      	cmp	r3, r2
 800ca20:	d007      	beq.n	800ca32 <TIM_OC5_SetConfig+0x6e>
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	4a15      	ldr	r2, [pc, #84]	@ (800ca7c <TIM_OC5_SetConfig+0xb8>)
 800ca26:	4293      	cmp	r3, r2
 800ca28:	d003      	beq.n	800ca32 <TIM_OC5_SetConfig+0x6e>
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	4a14      	ldr	r2, [pc, #80]	@ (800ca80 <TIM_OC5_SetConfig+0xbc>)
 800ca2e:	4293      	cmp	r3, r2
 800ca30:	d109      	bne.n	800ca46 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ca32:	697b      	ldr	r3, [r7, #20]
 800ca34:	4a0c      	ldr	r2, [pc, #48]	@ (800ca68 <TIM_OC5_SetConfig+0xa4>)
 800ca36:	4013      	ands	r3, r2
 800ca38:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ca3a:	683b      	ldr	r3, [r7, #0]
 800ca3c:	695b      	ldr	r3, [r3, #20]
 800ca3e:	021b      	lsls	r3, r3, #8
 800ca40:	697a      	ldr	r2, [r7, #20]
 800ca42:	4313      	orrs	r3, r2
 800ca44:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	697a      	ldr	r2, [r7, #20]
 800ca4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	68fa      	ldr	r2, [r7, #12]
 800ca50:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ca52:	683b      	ldr	r3, [r7, #0]
 800ca54:	685a      	ldr	r2, [r3, #4]
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	693a      	ldr	r2, [r7, #16]
 800ca5e:	621a      	str	r2, [r3, #32]
}
 800ca60:	46c0      	nop			@ (mov r8, r8)
 800ca62:	46bd      	mov	sp, r7
 800ca64:	b006      	add	sp, #24
 800ca66:	bd80      	pop	{r7, pc}
 800ca68:	fffeffff 	.word	0xfffeffff
 800ca6c:	fffeff8f 	.word	0xfffeff8f
 800ca70:	fffdffff 	.word	0xfffdffff
 800ca74:	40012c00 	.word	0x40012c00
 800ca78:	40014000 	.word	0x40014000
 800ca7c:	40014400 	.word	0x40014400
 800ca80:	40014800 	.word	0x40014800

0800ca84 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b086      	sub	sp, #24
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	6078      	str	r0, [r7, #4]
 800ca8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	6a1b      	ldr	r3, [r3, #32]
 800ca92:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	6a1b      	ldr	r3, [r3, #32]
 800ca98:	4a24      	ldr	r2, [pc, #144]	@ (800cb2c <TIM_OC6_SetConfig+0xa8>)
 800ca9a:	401a      	ands	r2, r3
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	685b      	ldr	r3, [r3, #4]
 800caa4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800caaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	4a20      	ldr	r2, [pc, #128]	@ (800cb30 <TIM_OC6_SetConfig+0xac>)
 800cab0:	4013      	ands	r3, r2
 800cab2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cab4:	683b      	ldr	r3, [r7, #0]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	021b      	lsls	r3, r3, #8
 800caba:	68fa      	ldr	r2, [r7, #12]
 800cabc:	4313      	orrs	r3, r2
 800cabe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800cac0:	693b      	ldr	r3, [r7, #16]
 800cac2:	4a1c      	ldr	r2, [pc, #112]	@ (800cb34 <TIM_OC6_SetConfig+0xb0>)
 800cac4:	4013      	ands	r3, r2
 800cac6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800cac8:	683b      	ldr	r3, [r7, #0]
 800caca:	689b      	ldr	r3, [r3, #8]
 800cacc:	051b      	lsls	r3, r3, #20
 800cace:	693a      	ldr	r2, [r7, #16]
 800cad0:	4313      	orrs	r3, r2
 800cad2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	4a18      	ldr	r2, [pc, #96]	@ (800cb38 <TIM_OC6_SetConfig+0xb4>)
 800cad8:	4293      	cmp	r3, r2
 800cada:	d00b      	beq.n	800caf4 <TIM_OC6_SetConfig+0x70>
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	4a17      	ldr	r2, [pc, #92]	@ (800cb3c <TIM_OC6_SetConfig+0xb8>)
 800cae0:	4293      	cmp	r3, r2
 800cae2:	d007      	beq.n	800caf4 <TIM_OC6_SetConfig+0x70>
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	4a16      	ldr	r2, [pc, #88]	@ (800cb40 <TIM_OC6_SetConfig+0xbc>)
 800cae8:	4293      	cmp	r3, r2
 800caea:	d003      	beq.n	800caf4 <TIM_OC6_SetConfig+0x70>
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	4a15      	ldr	r2, [pc, #84]	@ (800cb44 <TIM_OC6_SetConfig+0xc0>)
 800caf0:	4293      	cmp	r3, r2
 800caf2:	d109      	bne.n	800cb08 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800caf4:	697b      	ldr	r3, [r7, #20]
 800caf6:	4a14      	ldr	r2, [pc, #80]	@ (800cb48 <TIM_OC6_SetConfig+0xc4>)
 800caf8:	4013      	ands	r3, r2
 800cafa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800cafc:	683b      	ldr	r3, [r7, #0]
 800cafe:	695b      	ldr	r3, [r3, #20]
 800cb00:	029b      	lsls	r3, r3, #10
 800cb02:	697a      	ldr	r2, [r7, #20]
 800cb04:	4313      	orrs	r3, r2
 800cb06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	697a      	ldr	r2, [r7, #20]
 800cb0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	68fa      	ldr	r2, [r7, #12]
 800cb12:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800cb14:	683b      	ldr	r3, [r7, #0]
 800cb16:	685a      	ldr	r2, [r3, #4]
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	693a      	ldr	r2, [r7, #16]
 800cb20:	621a      	str	r2, [r3, #32]
}
 800cb22:	46c0      	nop			@ (mov r8, r8)
 800cb24:	46bd      	mov	sp, r7
 800cb26:	b006      	add	sp, #24
 800cb28:	bd80      	pop	{r7, pc}
 800cb2a:	46c0      	nop			@ (mov r8, r8)
 800cb2c:	ffefffff 	.word	0xffefffff
 800cb30:	feff8fff 	.word	0xfeff8fff
 800cb34:	ffdfffff 	.word	0xffdfffff
 800cb38:	40012c00 	.word	0x40012c00
 800cb3c:	40014000 	.word	0x40014000
 800cb40:	40014400 	.word	0x40014400
 800cb44:	40014800 	.word	0x40014800
 800cb48:	fffbffff 	.word	0xfffbffff

0800cb4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800cb4c:	b580      	push	{r7, lr}
 800cb4e:	b086      	sub	sp, #24
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	60f8      	str	r0, [r7, #12]
 800cb54:	60b9      	str	r1, [r7, #8]
 800cb56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cb58:	68bb      	ldr	r3, [r7, #8]
 800cb5a:	221f      	movs	r2, #31
 800cb5c:	4013      	ands	r3, r2
 800cb5e:	2201      	movs	r2, #1
 800cb60:	409a      	lsls	r2, r3
 800cb62:	0013      	movs	r3, r2
 800cb64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	6a1b      	ldr	r3, [r3, #32]
 800cb6a:	697a      	ldr	r2, [r7, #20]
 800cb6c:	43d2      	mvns	r2, r2
 800cb6e:	401a      	ands	r2, r3
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	6a1a      	ldr	r2, [r3, #32]
 800cb78:	68bb      	ldr	r3, [r7, #8]
 800cb7a:	211f      	movs	r1, #31
 800cb7c:	400b      	ands	r3, r1
 800cb7e:	6879      	ldr	r1, [r7, #4]
 800cb80:	4099      	lsls	r1, r3
 800cb82:	000b      	movs	r3, r1
 800cb84:	431a      	orrs	r2, r3
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	621a      	str	r2, [r3, #32]
}
 800cb8a:	46c0      	nop			@ (mov r8, r8)
 800cb8c:	46bd      	mov	sp, r7
 800cb8e:	b006      	add	sp, #24
 800cb90:	bd80      	pop	{r7, pc}
	...

0800cb94 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800cb94:	b580      	push	{r7, lr}
 800cb96:	b084      	sub	sp, #16
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	6078      	str	r0, [r7, #4]
 800cb9c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800cb9e:	2300      	movs	r3, #0
 800cba0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	223c      	movs	r2, #60	@ 0x3c
 800cba6:	5c9b      	ldrb	r3, [r3, r2]
 800cba8:	2b01      	cmp	r3, #1
 800cbaa:	d101      	bne.n	800cbb0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800cbac:	2302      	movs	r3, #2
 800cbae:	e06f      	b.n	800cc90 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	223c      	movs	r2, #60	@ 0x3c
 800cbb4:	2101      	movs	r1, #1
 800cbb6:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	22ff      	movs	r2, #255	@ 0xff
 800cbbc:	4393      	bics	r3, r2
 800cbbe:	001a      	movs	r2, r3
 800cbc0:	683b      	ldr	r3, [r7, #0]
 800cbc2:	68db      	ldr	r3, [r3, #12]
 800cbc4:	4313      	orrs	r3, r2
 800cbc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	4a33      	ldr	r2, [pc, #204]	@ (800cc98 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 800cbcc:	401a      	ands	r2, r3
 800cbce:	683b      	ldr	r3, [r7, #0]
 800cbd0:	689b      	ldr	r3, [r3, #8]
 800cbd2:	4313      	orrs	r3, r2
 800cbd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	4a30      	ldr	r2, [pc, #192]	@ (800cc9c <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800cbda:	401a      	ands	r2, r3
 800cbdc:	683b      	ldr	r3, [r7, #0]
 800cbde:	685b      	ldr	r3, [r3, #4]
 800cbe0:	4313      	orrs	r3, r2
 800cbe2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	4a2e      	ldr	r2, [pc, #184]	@ (800cca0 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 800cbe8:	401a      	ands	r2, r3
 800cbea:	683b      	ldr	r3, [r7, #0]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	4313      	orrs	r3, r2
 800cbf0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	4a2b      	ldr	r2, [pc, #172]	@ (800cca4 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800cbf6:	401a      	ands	r2, r3
 800cbf8:	683b      	ldr	r3, [r7, #0]
 800cbfa:	691b      	ldr	r3, [r3, #16]
 800cbfc:	4313      	orrs	r3, r2
 800cbfe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	4a29      	ldr	r2, [pc, #164]	@ (800cca8 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800cc04:	401a      	ands	r2, r3
 800cc06:	683b      	ldr	r3, [r7, #0]
 800cc08:	695b      	ldr	r3, [r3, #20]
 800cc0a:	4313      	orrs	r3, r2
 800cc0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	4a26      	ldr	r2, [pc, #152]	@ (800ccac <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800cc12:	401a      	ands	r2, r3
 800cc14:	683b      	ldr	r3, [r7, #0]
 800cc16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cc18:	4313      	orrs	r3, r2
 800cc1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	4a24      	ldr	r2, [pc, #144]	@ (800ccb0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800cc20:	401a      	ands	r2, r3
 800cc22:	683b      	ldr	r3, [r7, #0]
 800cc24:	699b      	ldr	r3, [r3, #24]
 800cc26:	041b      	lsls	r3, r3, #16
 800cc28:	4313      	orrs	r3, r2
 800cc2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	4a21      	ldr	r2, [pc, #132]	@ (800ccb4 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800cc30:	401a      	ands	r2, r3
 800cc32:	683b      	ldr	r3, [r7, #0]
 800cc34:	69db      	ldr	r3, [r3, #28]
 800cc36:	4313      	orrs	r3, r2
 800cc38:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	4a1e      	ldr	r2, [pc, #120]	@ (800ccb8 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800cc40:	4293      	cmp	r3, r2
 800cc42:	d11c      	bne.n	800cc7e <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	4a1d      	ldr	r2, [pc, #116]	@ (800ccbc <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800cc48:	401a      	ands	r2, r3
 800cc4a:	683b      	ldr	r3, [r7, #0]
 800cc4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc4e:	051b      	lsls	r3, r3, #20
 800cc50:	4313      	orrs	r3, r2
 800cc52:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	4a1a      	ldr	r2, [pc, #104]	@ (800ccc0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800cc58:	401a      	ands	r2, r3
 800cc5a:	683b      	ldr	r3, [r7, #0]
 800cc5c:	6a1b      	ldr	r3, [r3, #32]
 800cc5e:	4313      	orrs	r3, r2
 800cc60:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	4a17      	ldr	r2, [pc, #92]	@ (800ccc4 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800cc66:	401a      	ands	r2, r3
 800cc68:	683b      	ldr	r3, [r7, #0]
 800cc6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc6c:	4313      	orrs	r3, r2
 800cc6e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	4a15      	ldr	r2, [pc, #84]	@ (800ccc8 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800cc74:	401a      	ands	r2, r3
 800cc76:	683b      	ldr	r3, [r7, #0]
 800cc78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc7a:	4313      	orrs	r3, r2
 800cc7c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	68fa      	ldr	r2, [r7, #12]
 800cc84:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	223c      	movs	r2, #60	@ 0x3c
 800cc8a:	2100      	movs	r1, #0
 800cc8c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800cc8e:	2300      	movs	r3, #0
}
 800cc90:	0018      	movs	r0, r3
 800cc92:	46bd      	mov	sp, r7
 800cc94:	b004      	add	sp, #16
 800cc96:	bd80      	pop	{r7, pc}
 800cc98:	fffffcff 	.word	0xfffffcff
 800cc9c:	fffffbff 	.word	0xfffffbff
 800cca0:	fffff7ff 	.word	0xfffff7ff
 800cca4:	ffffefff 	.word	0xffffefff
 800cca8:	ffffdfff 	.word	0xffffdfff
 800ccac:	ffffbfff 	.word	0xffffbfff
 800ccb0:	fff0ffff 	.word	0xfff0ffff
 800ccb4:	efffffff 	.word	0xefffffff
 800ccb8:	40012c00 	.word	0x40012c00
 800ccbc:	ff0fffff 	.word	0xff0fffff
 800ccc0:	feffffff 	.word	0xfeffffff
 800ccc4:	fdffffff 	.word	0xfdffffff
 800ccc8:	dfffffff 	.word	0xdfffffff

0800cccc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cccc:	b580      	push	{r7, lr}
 800ccce:	b082      	sub	sp, #8
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d101      	bne.n	800ccde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ccda:	2301      	movs	r3, #1
 800ccdc:	e046      	b.n	800cd6c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	2288      	movs	r2, #136	@ 0x88
 800cce2:	589b      	ldr	r3, [r3, r2]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d107      	bne.n	800ccf8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	2284      	movs	r2, #132	@ 0x84
 800ccec:	2100      	movs	r1, #0
 800ccee:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	0018      	movs	r0, r3
 800ccf4:	f7fb f9a8 	bl	8008048 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	2288      	movs	r2, #136	@ 0x88
 800ccfc:	2124      	movs	r1, #36	@ 0x24
 800ccfe:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	681a      	ldr	r2, [r3, #0]
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	2101      	movs	r1, #1
 800cd0c:	438a      	bics	r2, r1
 800cd0e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d003      	beq.n	800cd20 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	0018      	movs	r0, r3
 800cd1c:	f000 fd0c 	bl	800d738 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	0018      	movs	r0, r3
 800cd24:	f000 f9b2 	bl	800d08c <UART_SetConfig>
 800cd28:	0003      	movs	r3, r0
 800cd2a:	2b01      	cmp	r3, #1
 800cd2c:	d101      	bne.n	800cd32 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800cd2e:	2301      	movs	r3, #1
 800cd30:	e01c      	b.n	800cd6c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	685a      	ldr	r2, [r3, #4]
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	490d      	ldr	r1, [pc, #52]	@ (800cd74 <HAL_UART_Init+0xa8>)
 800cd3e:	400a      	ands	r2, r1
 800cd40:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	689a      	ldr	r2, [r3, #8]
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	212a      	movs	r1, #42	@ 0x2a
 800cd4e:	438a      	bics	r2, r1
 800cd50:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	681a      	ldr	r2, [r3, #0]
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	2101      	movs	r1, #1
 800cd5e:	430a      	orrs	r2, r1
 800cd60:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	0018      	movs	r0, r3
 800cd66:	f000 fd9b 	bl	800d8a0 <UART_CheckIdleState>
 800cd6a:	0003      	movs	r3, r0
}
 800cd6c:	0018      	movs	r0, r3
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	b002      	add	sp, #8
 800cd72:	bd80      	pop	{r7, pc}
 800cd74:	ffffb7ff 	.word	0xffffb7ff

0800cd78 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cd78:	b580      	push	{r7, lr}
 800cd7a:	b08a      	sub	sp, #40	@ 0x28
 800cd7c:	af02      	add	r7, sp, #8
 800cd7e:	60f8      	str	r0, [r7, #12]
 800cd80:	60b9      	str	r1, [r7, #8]
 800cd82:	603b      	str	r3, [r7, #0]
 800cd84:	1dbb      	adds	r3, r7, #6
 800cd86:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	2288      	movs	r2, #136	@ 0x88
 800cd8c:	589b      	ldr	r3, [r3, r2]
 800cd8e:	2b20      	cmp	r3, #32
 800cd90:	d000      	beq.n	800cd94 <HAL_UART_Transmit+0x1c>
 800cd92:	e090      	b.n	800ceb6 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 800cd94:	68bb      	ldr	r3, [r7, #8]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d003      	beq.n	800cda2 <HAL_UART_Transmit+0x2a>
 800cd9a:	1dbb      	adds	r3, r7, #6
 800cd9c:	881b      	ldrh	r3, [r3, #0]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d101      	bne.n	800cda6 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800cda2:	2301      	movs	r3, #1
 800cda4:	e088      	b.n	800ceb8 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	689a      	ldr	r2, [r3, #8]
 800cdaa:	2380      	movs	r3, #128	@ 0x80
 800cdac:	015b      	lsls	r3, r3, #5
 800cdae:	429a      	cmp	r2, r3
 800cdb0:	d109      	bne.n	800cdc6 <HAL_UART_Transmit+0x4e>
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	691b      	ldr	r3, [r3, #16]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d105      	bne.n	800cdc6 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800cdba:	68bb      	ldr	r3, [r7, #8]
 800cdbc:	2201      	movs	r2, #1
 800cdbe:	4013      	ands	r3, r2
 800cdc0:	d001      	beq.n	800cdc6 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800cdc2:	2301      	movs	r3, #1
 800cdc4:	e078      	b.n	800ceb8 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	2290      	movs	r2, #144	@ 0x90
 800cdca:	2100      	movs	r1, #0
 800cdcc:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	2288      	movs	r2, #136	@ 0x88
 800cdd2:	2121      	movs	r1, #33	@ 0x21
 800cdd4:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cdd6:	f7fc f8c9 	bl	8008f6c <HAL_GetTick>
 800cdda:	0003      	movs	r3, r0
 800cddc:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	1dba      	adds	r2, r7, #6
 800cde2:	2154      	movs	r1, #84	@ 0x54
 800cde4:	8812      	ldrh	r2, [r2, #0]
 800cde6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	1dba      	adds	r2, r7, #6
 800cdec:	2156      	movs	r1, #86	@ 0x56
 800cdee:	8812      	ldrh	r2, [r2, #0]
 800cdf0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	689a      	ldr	r2, [r3, #8]
 800cdf6:	2380      	movs	r3, #128	@ 0x80
 800cdf8:	015b      	lsls	r3, r3, #5
 800cdfa:	429a      	cmp	r2, r3
 800cdfc:	d108      	bne.n	800ce10 <HAL_UART_Transmit+0x98>
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	691b      	ldr	r3, [r3, #16]
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d104      	bne.n	800ce10 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800ce06:	2300      	movs	r3, #0
 800ce08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ce0a:	68bb      	ldr	r3, [r7, #8]
 800ce0c:	61bb      	str	r3, [r7, #24]
 800ce0e:	e003      	b.n	800ce18 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 800ce10:	68bb      	ldr	r3, [r7, #8]
 800ce12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ce14:	2300      	movs	r3, #0
 800ce16:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ce18:	e030      	b.n	800ce7c <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ce1a:	697a      	ldr	r2, [r7, #20]
 800ce1c:	68f8      	ldr	r0, [r7, #12]
 800ce1e:	683b      	ldr	r3, [r7, #0]
 800ce20:	9300      	str	r3, [sp, #0]
 800ce22:	0013      	movs	r3, r2
 800ce24:	2200      	movs	r2, #0
 800ce26:	2180      	movs	r1, #128	@ 0x80
 800ce28:	f000 fde4 	bl	800d9f4 <UART_WaitOnFlagUntilTimeout>
 800ce2c:	1e03      	subs	r3, r0, #0
 800ce2e:	d005      	beq.n	800ce3c <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	2288      	movs	r2, #136	@ 0x88
 800ce34:	2120      	movs	r1, #32
 800ce36:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 800ce38:	2303      	movs	r3, #3
 800ce3a:	e03d      	b.n	800ceb8 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 800ce3c:	69fb      	ldr	r3, [r7, #28]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d10b      	bne.n	800ce5a <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ce42:	69bb      	ldr	r3, [r7, #24]
 800ce44:	881b      	ldrh	r3, [r3, #0]
 800ce46:	001a      	movs	r2, r3
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	05d2      	lsls	r2, r2, #23
 800ce4e:	0dd2      	lsrs	r2, r2, #23
 800ce50:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800ce52:	69bb      	ldr	r3, [r7, #24]
 800ce54:	3302      	adds	r3, #2
 800ce56:	61bb      	str	r3, [r7, #24]
 800ce58:	e007      	b.n	800ce6a <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ce5a:	69fb      	ldr	r3, [r7, #28]
 800ce5c:	781a      	ldrb	r2, [r3, #0]
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800ce64:	69fb      	ldr	r3, [r7, #28]
 800ce66:	3301      	adds	r3, #1
 800ce68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	2256      	movs	r2, #86	@ 0x56
 800ce6e:	5a9b      	ldrh	r3, [r3, r2]
 800ce70:	b29b      	uxth	r3, r3
 800ce72:	3b01      	subs	r3, #1
 800ce74:	b299      	uxth	r1, r3
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	2256      	movs	r2, #86	@ 0x56
 800ce7a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	2256      	movs	r2, #86	@ 0x56
 800ce80:	5a9b      	ldrh	r3, [r3, r2]
 800ce82:	b29b      	uxth	r3, r3
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d1c8      	bne.n	800ce1a <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ce88:	697a      	ldr	r2, [r7, #20]
 800ce8a:	68f8      	ldr	r0, [r7, #12]
 800ce8c:	683b      	ldr	r3, [r7, #0]
 800ce8e:	9300      	str	r3, [sp, #0]
 800ce90:	0013      	movs	r3, r2
 800ce92:	2200      	movs	r2, #0
 800ce94:	2140      	movs	r1, #64	@ 0x40
 800ce96:	f000 fdad 	bl	800d9f4 <UART_WaitOnFlagUntilTimeout>
 800ce9a:	1e03      	subs	r3, r0, #0
 800ce9c:	d005      	beq.n	800ceaa <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	2288      	movs	r2, #136	@ 0x88
 800cea2:	2120      	movs	r1, #32
 800cea4:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 800cea6:	2303      	movs	r3, #3
 800cea8:	e006      	b.n	800ceb8 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	2288      	movs	r2, #136	@ 0x88
 800ceae:	2120      	movs	r1, #32
 800ceb0:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800ceb2:	2300      	movs	r3, #0
 800ceb4:	e000      	b.n	800ceb8 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 800ceb6:	2302      	movs	r3, #2
  }
}
 800ceb8:	0018      	movs	r0, r3
 800ceba:	46bd      	mov	sp, r7
 800cebc:	b008      	add	sp, #32
 800cebe:	bd80      	pop	{r7, pc}

0800cec0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b08a      	sub	sp, #40	@ 0x28
 800cec4:	af02      	add	r7, sp, #8
 800cec6:	60f8      	str	r0, [r7, #12]
 800cec8:	60b9      	str	r1, [r7, #8]
 800ceca:	603b      	str	r3, [r7, #0]
 800cecc:	1dbb      	adds	r3, r7, #6
 800cece:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	228c      	movs	r2, #140	@ 0x8c
 800ced4:	589b      	ldr	r3, [r3, r2]
 800ced6:	2b20      	cmp	r3, #32
 800ced8:	d000      	beq.n	800cedc <HAL_UART_Receive+0x1c>
 800ceda:	e0d0      	b.n	800d07e <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 800cedc:	68bb      	ldr	r3, [r7, #8]
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d003      	beq.n	800ceea <HAL_UART_Receive+0x2a>
 800cee2:	1dbb      	adds	r3, r7, #6
 800cee4:	881b      	ldrh	r3, [r3, #0]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d101      	bne.n	800ceee <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 800ceea:	2301      	movs	r3, #1
 800ceec:	e0c8      	b.n	800d080 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	689a      	ldr	r2, [r3, #8]
 800cef2:	2380      	movs	r3, #128	@ 0x80
 800cef4:	015b      	lsls	r3, r3, #5
 800cef6:	429a      	cmp	r2, r3
 800cef8:	d109      	bne.n	800cf0e <HAL_UART_Receive+0x4e>
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	691b      	ldr	r3, [r3, #16]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d105      	bne.n	800cf0e <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800cf02:	68bb      	ldr	r3, [r7, #8]
 800cf04:	2201      	movs	r2, #1
 800cf06:	4013      	ands	r3, r2
 800cf08:	d001      	beq.n	800cf0e <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 800cf0a:	2301      	movs	r3, #1
 800cf0c:	e0b8      	b.n	800d080 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	2290      	movs	r2, #144	@ 0x90
 800cf12:	2100      	movs	r1, #0
 800cf14:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	228c      	movs	r2, #140	@ 0x8c
 800cf1a:	2122      	movs	r1, #34	@ 0x22
 800cf1c:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	2200      	movs	r2, #0
 800cf22:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cf24:	f7fc f822 	bl	8008f6c <HAL_GetTick>
 800cf28:	0003      	movs	r3, r0
 800cf2a:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	1dba      	adds	r2, r7, #6
 800cf30:	215c      	movs	r1, #92	@ 0x5c
 800cf32:	8812      	ldrh	r2, [r2, #0]
 800cf34:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	1dba      	adds	r2, r7, #6
 800cf3a:	215e      	movs	r1, #94	@ 0x5e
 800cf3c:	8812      	ldrh	r2, [r2, #0]
 800cf3e:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	689a      	ldr	r2, [r3, #8]
 800cf44:	2380      	movs	r3, #128	@ 0x80
 800cf46:	015b      	lsls	r3, r3, #5
 800cf48:	429a      	cmp	r2, r3
 800cf4a:	d10d      	bne.n	800cf68 <HAL_UART_Receive+0xa8>
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	691b      	ldr	r3, [r3, #16]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d104      	bne.n	800cf5e <HAL_UART_Receive+0x9e>
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	2260      	movs	r2, #96	@ 0x60
 800cf58:	494b      	ldr	r1, [pc, #300]	@ (800d088 <HAL_UART_Receive+0x1c8>)
 800cf5a:	5299      	strh	r1, [r3, r2]
 800cf5c:	e02e      	b.n	800cfbc <HAL_UART_Receive+0xfc>
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	2260      	movs	r2, #96	@ 0x60
 800cf62:	21ff      	movs	r1, #255	@ 0xff
 800cf64:	5299      	strh	r1, [r3, r2]
 800cf66:	e029      	b.n	800cfbc <HAL_UART_Receive+0xfc>
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	689b      	ldr	r3, [r3, #8]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d10d      	bne.n	800cf8c <HAL_UART_Receive+0xcc>
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	691b      	ldr	r3, [r3, #16]
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d104      	bne.n	800cf82 <HAL_UART_Receive+0xc2>
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	2260      	movs	r2, #96	@ 0x60
 800cf7c:	21ff      	movs	r1, #255	@ 0xff
 800cf7e:	5299      	strh	r1, [r3, r2]
 800cf80:	e01c      	b.n	800cfbc <HAL_UART_Receive+0xfc>
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	2260      	movs	r2, #96	@ 0x60
 800cf86:	217f      	movs	r1, #127	@ 0x7f
 800cf88:	5299      	strh	r1, [r3, r2]
 800cf8a:	e017      	b.n	800cfbc <HAL_UART_Receive+0xfc>
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	689a      	ldr	r2, [r3, #8]
 800cf90:	2380      	movs	r3, #128	@ 0x80
 800cf92:	055b      	lsls	r3, r3, #21
 800cf94:	429a      	cmp	r2, r3
 800cf96:	d10d      	bne.n	800cfb4 <HAL_UART_Receive+0xf4>
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	691b      	ldr	r3, [r3, #16]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d104      	bne.n	800cfaa <HAL_UART_Receive+0xea>
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	2260      	movs	r2, #96	@ 0x60
 800cfa4:	217f      	movs	r1, #127	@ 0x7f
 800cfa6:	5299      	strh	r1, [r3, r2]
 800cfa8:	e008      	b.n	800cfbc <HAL_UART_Receive+0xfc>
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	2260      	movs	r2, #96	@ 0x60
 800cfae:	213f      	movs	r1, #63	@ 0x3f
 800cfb0:	5299      	strh	r1, [r3, r2]
 800cfb2:	e003      	b.n	800cfbc <HAL_UART_Receive+0xfc>
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	2260      	movs	r2, #96	@ 0x60
 800cfb8:	2100      	movs	r1, #0
 800cfba:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 800cfbc:	2312      	movs	r3, #18
 800cfbe:	18fb      	adds	r3, r7, r3
 800cfc0:	68fa      	ldr	r2, [r7, #12]
 800cfc2:	2160      	movs	r1, #96	@ 0x60
 800cfc4:	5a52      	ldrh	r2, [r2, r1]
 800cfc6:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	689a      	ldr	r2, [r3, #8]
 800cfcc:	2380      	movs	r3, #128	@ 0x80
 800cfce:	015b      	lsls	r3, r3, #5
 800cfd0:	429a      	cmp	r2, r3
 800cfd2:	d108      	bne.n	800cfe6 <HAL_UART_Receive+0x126>
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	691b      	ldr	r3, [r3, #16]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d104      	bne.n	800cfe6 <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 800cfdc:	2300      	movs	r3, #0
 800cfde:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800cfe0:	68bb      	ldr	r3, [r7, #8]
 800cfe2:	61bb      	str	r3, [r7, #24]
 800cfe4:	e003      	b.n	800cfee <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 800cfe6:	68bb      	ldr	r3, [r7, #8]
 800cfe8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cfea:	2300      	movs	r3, #0
 800cfec:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800cfee:	e03a      	b.n	800d066 <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800cff0:	697a      	ldr	r2, [r7, #20]
 800cff2:	68f8      	ldr	r0, [r7, #12]
 800cff4:	683b      	ldr	r3, [r7, #0]
 800cff6:	9300      	str	r3, [sp, #0]
 800cff8:	0013      	movs	r3, r2
 800cffa:	2200      	movs	r2, #0
 800cffc:	2120      	movs	r1, #32
 800cffe:	f000 fcf9 	bl	800d9f4 <UART_WaitOnFlagUntilTimeout>
 800d002:	1e03      	subs	r3, r0, #0
 800d004:	d005      	beq.n	800d012 <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	228c      	movs	r2, #140	@ 0x8c
 800d00a:	2120      	movs	r1, #32
 800d00c:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 800d00e:	2303      	movs	r3, #3
 800d010:	e036      	b.n	800d080 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 800d012:	69fb      	ldr	r3, [r7, #28]
 800d014:	2b00      	cmp	r3, #0
 800d016:	d10e      	bne.n	800d036 <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d01e:	b29b      	uxth	r3, r3
 800d020:	2212      	movs	r2, #18
 800d022:	18ba      	adds	r2, r7, r2
 800d024:	8812      	ldrh	r2, [r2, #0]
 800d026:	4013      	ands	r3, r2
 800d028:	b29a      	uxth	r2, r3
 800d02a:	69bb      	ldr	r3, [r7, #24]
 800d02c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800d02e:	69bb      	ldr	r3, [r7, #24]
 800d030:	3302      	adds	r3, #2
 800d032:	61bb      	str	r3, [r7, #24]
 800d034:	e00e      	b.n	800d054 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d03c:	b2db      	uxtb	r3, r3
 800d03e:	2212      	movs	r2, #18
 800d040:	18ba      	adds	r2, r7, r2
 800d042:	8812      	ldrh	r2, [r2, #0]
 800d044:	b2d2      	uxtb	r2, r2
 800d046:	4013      	ands	r3, r2
 800d048:	b2da      	uxtb	r2, r3
 800d04a:	69fb      	ldr	r3, [r7, #28]
 800d04c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800d04e:	69fb      	ldr	r3, [r7, #28]
 800d050:	3301      	adds	r3, #1
 800d052:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	225e      	movs	r2, #94	@ 0x5e
 800d058:	5a9b      	ldrh	r3, [r3, r2]
 800d05a:	b29b      	uxth	r3, r3
 800d05c:	3b01      	subs	r3, #1
 800d05e:	b299      	uxth	r1, r3
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	225e      	movs	r2, #94	@ 0x5e
 800d064:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	225e      	movs	r2, #94	@ 0x5e
 800d06a:	5a9b      	ldrh	r3, [r3, r2]
 800d06c:	b29b      	uxth	r3, r3
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d1be      	bne.n	800cff0 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	228c      	movs	r2, #140	@ 0x8c
 800d076:	2120      	movs	r1, #32
 800d078:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800d07a:	2300      	movs	r3, #0
 800d07c:	e000      	b.n	800d080 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 800d07e:	2302      	movs	r3, #2
  }
}
 800d080:	0018      	movs	r0, r3
 800d082:	46bd      	mov	sp, r7
 800d084:	b008      	add	sp, #32
 800d086:	bd80      	pop	{r7, pc}
 800d088:	000001ff 	.word	0x000001ff

0800d08c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d08c:	b5b0      	push	{r4, r5, r7, lr}
 800d08e:	b090      	sub	sp, #64	@ 0x40
 800d090:	af00      	add	r7, sp, #0
 800d092:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d094:	231a      	movs	r3, #26
 800d096:	2220      	movs	r2, #32
 800d098:	189b      	adds	r3, r3, r2
 800d09a:	19db      	adds	r3, r3, r7
 800d09c:	2200      	movs	r2, #0
 800d09e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d0a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0a2:	689a      	ldr	r2, [r3, #8]
 800d0a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0a6:	691b      	ldr	r3, [r3, #16]
 800d0a8:	431a      	orrs	r2, r3
 800d0aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0ac:	695b      	ldr	r3, [r3, #20]
 800d0ae:	431a      	orrs	r2, r3
 800d0b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0b2:	69db      	ldr	r3, [r3, #28]
 800d0b4:	4313      	orrs	r3, r2
 800d0b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d0b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	4ac1      	ldr	r2, [pc, #772]	@ (800d3c4 <UART_SetConfig+0x338>)
 800d0c0:	4013      	ands	r3, r2
 800d0c2:	0019      	movs	r1, r3
 800d0c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0c6:	681a      	ldr	r2, [r3, #0]
 800d0c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d0ca:	430b      	orrs	r3, r1
 800d0cc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d0ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	685b      	ldr	r3, [r3, #4]
 800d0d4:	4abc      	ldr	r2, [pc, #752]	@ (800d3c8 <UART_SetConfig+0x33c>)
 800d0d6:	4013      	ands	r3, r2
 800d0d8:	0018      	movs	r0, r3
 800d0da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0dc:	68d9      	ldr	r1, [r3, #12]
 800d0de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0e0:	681a      	ldr	r2, [r3, #0]
 800d0e2:	0003      	movs	r3, r0
 800d0e4:	430b      	orrs	r3, r1
 800d0e6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d0e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0ea:	699b      	ldr	r3, [r3, #24]
 800d0ec:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d0ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	4ab6      	ldr	r2, [pc, #728]	@ (800d3cc <UART_SetConfig+0x340>)
 800d0f4:	4293      	cmp	r3, r2
 800d0f6:	d009      	beq.n	800d10c <UART_SetConfig+0x80>
 800d0f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	4ab4      	ldr	r2, [pc, #720]	@ (800d3d0 <UART_SetConfig+0x344>)
 800d0fe:	4293      	cmp	r3, r2
 800d100:	d004      	beq.n	800d10c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d104:	6a1b      	ldr	r3, [r3, #32]
 800d106:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d108:	4313      	orrs	r3, r2
 800d10a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d10c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	689b      	ldr	r3, [r3, #8]
 800d112:	4ab0      	ldr	r2, [pc, #704]	@ (800d3d4 <UART_SetConfig+0x348>)
 800d114:	4013      	ands	r3, r2
 800d116:	0019      	movs	r1, r3
 800d118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d11a:	681a      	ldr	r2, [r3, #0]
 800d11c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d11e:	430b      	orrs	r3, r1
 800d120:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d128:	220f      	movs	r2, #15
 800d12a:	4393      	bics	r3, r2
 800d12c:	0018      	movs	r0, r3
 800d12e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d130:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800d132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d134:	681a      	ldr	r2, [r3, #0]
 800d136:	0003      	movs	r3, r0
 800d138:	430b      	orrs	r3, r1
 800d13a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d13c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	4aa5      	ldr	r2, [pc, #660]	@ (800d3d8 <UART_SetConfig+0x34c>)
 800d142:	4293      	cmp	r3, r2
 800d144:	d131      	bne.n	800d1aa <UART_SetConfig+0x11e>
 800d146:	4ba5      	ldr	r3, [pc, #660]	@ (800d3dc <UART_SetConfig+0x350>)
 800d148:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d14a:	2203      	movs	r2, #3
 800d14c:	4013      	ands	r3, r2
 800d14e:	2b03      	cmp	r3, #3
 800d150:	d01d      	beq.n	800d18e <UART_SetConfig+0x102>
 800d152:	d823      	bhi.n	800d19c <UART_SetConfig+0x110>
 800d154:	2b02      	cmp	r3, #2
 800d156:	d00c      	beq.n	800d172 <UART_SetConfig+0xe6>
 800d158:	d820      	bhi.n	800d19c <UART_SetConfig+0x110>
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d002      	beq.n	800d164 <UART_SetConfig+0xd8>
 800d15e:	2b01      	cmp	r3, #1
 800d160:	d00e      	beq.n	800d180 <UART_SetConfig+0xf4>
 800d162:	e01b      	b.n	800d19c <UART_SetConfig+0x110>
 800d164:	231b      	movs	r3, #27
 800d166:	2220      	movs	r2, #32
 800d168:	189b      	adds	r3, r3, r2
 800d16a:	19db      	adds	r3, r3, r7
 800d16c:	2200      	movs	r2, #0
 800d16e:	701a      	strb	r2, [r3, #0]
 800d170:	e154      	b.n	800d41c <UART_SetConfig+0x390>
 800d172:	231b      	movs	r3, #27
 800d174:	2220      	movs	r2, #32
 800d176:	189b      	adds	r3, r3, r2
 800d178:	19db      	adds	r3, r3, r7
 800d17a:	2202      	movs	r2, #2
 800d17c:	701a      	strb	r2, [r3, #0]
 800d17e:	e14d      	b.n	800d41c <UART_SetConfig+0x390>
 800d180:	231b      	movs	r3, #27
 800d182:	2220      	movs	r2, #32
 800d184:	189b      	adds	r3, r3, r2
 800d186:	19db      	adds	r3, r3, r7
 800d188:	2204      	movs	r2, #4
 800d18a:	701a      	strb	r2, [r3, #0]
 800d18c:	e146      	b.n	800d41c <UART_SetConfig+0x390>
 800d18e:	231b      	movs	r3, #27
 800d190:	2220      	movs	r2, #32
 800d192:	189b      	adds	r3, r3, r2
 800d194:	19db      	adds	r3, r3, r7
 800d196:	2208      	movs	r2, #8
 800d198:	701a      	strb	r2, [r3, #0]
 800d19a:	e13f      	b.n	800d41c <UART_SetConfig+0x390>
 800d19c:	231b      	movs	r3, #27
 800d19e:	2220      	movs	r2, #32
 800d1a0:	189b      	adds	r3, r3, r2
 800d1a2:	19db      	adds	r3, r3, r7
 800d1a4:	2210      	movs	r2, #16
 800d1a6:	701a      	strb	r2, [r3, #0]
 800d1a8:	e138      	b.n	800d41c <UART_SetConfig+0x390>
 800d1aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	4a8c      	ldr	r2, [pc, #560]	@ (800d3e0 <UART_SetConfig+0x354>)
 800d1b0:	4293      	cmp	r3, r2
 800d1b2:	d131      	bne.n	800d218 <UART_SetConfig+0x18c>
 800d1b4:	4b89      	ldr	r3, [pc, #548]	@ (800d3dc <UART_SetConfig+0x350>)
 800d1b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d1b8:	220c      	movs	r2, #12
 800d1ba:	4013      	ands	r3, r2
 800d1bc:	2b0c      	cmp	r3, #12
 800d1be:	d01d      	beq.n	800d1fc <UART_SetConfig+0x170>
 800d1c0:	d823      	bhi.n	800d20a <UART_SetConfig+0x17e>
 800d1c2:	2b08      	cmp	r3, #8
 800d1c4:	d00c      	beq.n	800d1e0 <UART_SetConfig+0x154>
 800d1c6:	d820      	bhi.n	800d20a <UART_SetConfig+0x17e>
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d002      	beq.n	800d1d2 <UART_SetConfig+0x146>
 800d1cc:	2b04      	cmp	r3, #4
 800d1ce:	d00e      	beq.n	800d1ee <UART_SetConfig+0x162>
 800d1d0:	e01b      	b.n	800d20a <UART_SetConfig+0x17e>
 800d1d2:	231b      	movs	r3, #27
 800d1d4:	2220      	movs	r2, #32
 800d1d6:	189b      	adds	r3, r3, r2
 800d1d8:	19db      	adds	r3, r3, r7
 800d1da:	2200      	movs	r2, #0
 800d1dc:	701a      	strb	r2, [r3, #0]
 800d1de:	e11d      	b.n	800d41c <UART_SetConfig+0x390>
 800d1e0:	231b      	movs	r3, #27
 800d1e2:	2220      	movs	r2, #32
 800d1e4:	189b      	adds	r3, r3, r2
 800d1e6:	19db      	adds	r3, r3, r7
 800d1e8:	2202      	movs	r2, #2
 800d1ea:	701a      	strb	r2, [r3, #0]
 800d1ec:	e116      	b.n	800d41c <UART_SetConfig+0x390>
 800d1ee:	231b      	movs	r3, #27
 800d1f0:	2220      	movs	r2, #32
 800d1f2:	189b      	adds	r3, r3, r2
 800d1f4:	19db      	adds	r3, r3, r7
 800d1f6:	2204      	movs	r2, #4
 800d1f8:	701a      	strb	r2, [r3, #0]
 800d1fa:	e10f      	b.n	800d41c <UART_SetConfig+0x390>
 800d1fc:	231b      	movs	r3, #27
 800d1fe:	2220      	movs	r2, #32
 800d200:	189b      	adds	r3, r3, r2
 800d202:	19db      	adds	r3, r3, r7
 800d204:	2208      	movs	r2, #8
 800d206:	701a      	strb	r2, [r3, #0]
 800d208:	e108      	b.n	800d41c <UART_SetConfig+0x390>
 800d20a:	231b      	movs	r3, #27
 800d20c:	2220      	movs	r2, #32
 800d20e:	189b      	adds	r3, r3, r2
 800d210:	19db      	adds	r3, r3, r7
 800d212:	2210      	movs	r2, #16
 800d214:	701a      	strb	r2, [r3, #0]
 800d216:	e101      	b.n	800d41c <UART_SetConfig+0x390>
 800d218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	4a71      	ldr	r2, [pc, #452]	@ (800d3e4 <UART_SetConfig+0x358>)
 800d21e:	4293      	cmp	r3, r2
 800d220:	d131      	bne.n	800d286 <UART_SetConfig+0x1fa>
 800d222:	4b6e      	ldr	r3, [pc, #440]	@ (800d3dc <UART_SetConfig+0x350>)
 800d224:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d226:	2230      	movs	r2, #48	@ 0x30
 800d228:	4013      	ands	r3, r2
 800d22a:	2b30      	cmp	r3, #48	@ 0x30
 800d22c:	d01d      	beq.n	800d26a <UART_SetConfig+0x1de>
 800d22e:	d823      	bhi.n	800d278 <UART_SetConfig+0x1ec>
 800d230:	2b20      	cmp	r3, #32
 800d232:	d00c      	beq.n	800d24e <UART_SetConfig+0x1c2>
 800d234:	d820      	bhi.n	800d278 <UART_SetConfig+0x1ec>
 800d236:	2b00      	cmp	r3, #0
 800d238:	d002      	beq.n	800d240 <UART_SetConfig+0x1b4>
 800d23a:	2b10      	cmp	r3, #16
 800d23c:	d00e      	beq.n	800d25c <UART_SetConfig+0x1d0>
 800d23e:	e01b      	b.n	800d278 <UART_SetConfig+0x1ec>
 800d240:	231b      	movs	r3, #27
 800d242:	2220      	movs	r2, #32
 800d244:	189b      	adds	r3, r3, r2
 800d246:	19db      	adds	r3, r3, r7
 800d248:	2200      	movs	r2, #0
 800d24a:	701a      	strb	r2, [r3, #0]
 800d24c:	e0e6      	b.n	800d41c <UART_SetConfig+0x390>
 800d24e:	231b      	movs	r3, #27
 800d250:	2220      	movs	r2, #32
 800d252:	189b      	adds	r3, r3, r2
 800d254:	19db      	adds	r3, r3, r7
 800d256:	2202      	movs	r2, #2
 800d258:	701a      	strb	r2, [r3, #0]
 800d25a:	e0df      	b.n	800d41c <UART_SetConfig+0x390>
 800d25c:	231b      	movs	r3, #27
 800d25e:	2220      	movs	r2, #32
 800d260:	189b      	adds	r3, r3, r2
 800d262:	19db      	adds	r3, r3, r7
 800d264:	2204      	movs	r2, #4
 800d266:	701a      	strb	r2, [r3, #0]
 800d268:	e0d8      	b.n	800d41c <UART_SetConfig+0x390>
 800d26a:	231b      	movs	r3, #27
 800d26c:	2220      	movs	r2, #32
 800d26e:	189b      	adds	r3, r3, r2
 800d270:	19db      	adds	r3, r3, r7
 800d272:	2208      	movs	r2, #8
 800d274:	701a      	strb	r2, [r3, #0]
 800d276:	e0d1      	b.n	800d41c <UART_SetConfig+0x390>
 800d278:	231b      	movs	r3, #27
 800d27a:	2220      	movs	r2, #32
 800d27c:	189b      	adds	r3, r3, r2
 800d27e:	19db      	adds	r3, r3, r7
 800d280:	2210      	movs	r2, #16
 800d282:	701a      	strb	r2, [r3, #0]
 800d284:	e0ca      	b.n	800d41c <UART_SetConfig+0x390>
 800d286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	4a57      	ldr	r2, [pc, #348]	@ (800d3e8 <UART_SetConfig+0x35c>)
 800d28c:	4293      	cmp	r3, r2
 800d28e:	d106      	bne.n	800d29e <UART_SetConfig+0x212>
 800d290:	231b      	movs	r3, #27
 800d292:	2220      	movs	r2, #32
 800d294:	189b      	adds	r3, r3, r2
 800d296:	19db      	adds	r3, r3, r7
 800d298:	2200      	movs	r2, #0
 800d29a:	701a      	strb	r2, [r3, #0]
 800d29c:	e0be      	b.n	800d41c <UART_SetConfig+0x390>
 800d29e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	4a52      	ldr	r2, [pc, #328]	@ (800d3ec <UART_SetConfig+0x360>)
 800d2a4:	4293      	cmp	r3, r2
 800d2a6:	d106      	bne.n	800d2b6 <UART_SetConfig+0x22a>
 800d2a8:	231b      	movs	r3, #27
 800d2aa:	2220      	movs	r2, #32
 800d2ac:	189b      	adds	r3, r3, r2
 800d2ae:	19db      	adds	r3, r3, r7
 800d2b0:	2200      	movs	r2, #0
 800d2b2:	701a      	strb	r2, [r3, #0]
 800d2b4:	e0b2      	b.n	800d41c <UART_SetConfig+0x390>
 800d2b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	4a4d      	ldr	r2, [pc, #308]	@ (800d3f0 <UART_SetConfig+0x364>)
 800d2bc:	4293      	cmp	r3, r2
 800d2be:	d106      	bne.n	800d2ce <UART_SetConfig+0x242>
 800d2c0:	231b      	movs	r3, #27
 800d2c2:	2220      	movs	r2, #32
 800d2c4:	189b      	adds	r3, r3, r2
 800d2c6:	19db      	adds	r3, r3, r7
 800d2c8:	2200      	movs	r2, #0
 800d2ca:	701a      	strb	r2, [r3, #0]
 800d2cc:	e0a6      	b.n	800d41c <UART_SetConfig+0x390>
 800d2ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	4a3e      	ldr	r2, [pc, #248]	@ (800d3cc <UART_SetConfig+0x340>)
 800d2d4:	4293      	cmp	r3, r2
 800d2d6:	d13e      	bne.n	800d356 <UART_SetConfig+0x2ca>
 800d2d8:	4b40      	ldr	r3, [pc, #256]	@ (800d3dc <UART_SetConfig+0x350>)
 800d2da:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d2dc:	23c0      	movs	r3, #192	@ 0xc0
 800d2de:	011b      	lsls	r3, r3, #4
 800d2e0:	4013      	ands	r3, r2
 800d2e2:	22c0      	movs	r2, #192	@ 0xc0
 800d2e4:	0112      	lsls	r2, r2, #4
 800d2e6:	4293      	cmp	r3, r2
 800d2e8:	d027      	beq.n	800d33a <UART_SetConfig+0x2ae>
 800d2ea:	22c0      	movs	r2, #192	@ 0xc0
 800d2ec:	0112      	lsls	r2, r2, #4
 800d2ee:	4293      	cmp	r3, r2
 800d2f0:	d82a      	bhi.n	800d348 <UART_SetConfig+0x2bc>
 800d2f2:	2280      	movs	r2, #128	@ 0x80
 800d2f4:	0112      	lsls	r2, r2, #4
 800d2f6:	4293      	cmp	r3, r2
 800d2f8:	d011      	beq.n	800d31e <UART_SetConfig+0x292>
 800d2fa:	2280      	movs	r2, #128	@ 0x80
 800d2fc:	0112      	lsls	r2, r2, #4
 800d2fe:	4293      	cmp	r3, r2
 800d300:	d822      	bhi.n	800d348 <UART_SetConfig+0x2bc>
 800d302:	2b00      	cmp	r3, #0
 800d304:	d004      	beq.n	800d310 <UART_SetConfig+0x284>
 800d306:	2280      	movs	r2, #128	@ 0x80
 800d308:	00d2      	lsls	r2, r2, #3
 800d30a:	4293      	cmp	r3, r2
 800d30c:	d00e      	beq.n	800d32c <UART_SetConfig+0x2a0>
 800d30e:	e01b      	b.n	800d348 <UART_SetConfig+0x2bc>
 800d310:	231b      	movs	r3, #27
 800d312:	2220      	movs	r2, #32
 800d314:	189b      	adds	r3, r3, r2
 800d316:	19db      	adds	r3, r3, r7
 800d318:	2200      	movs	r2, #0
 800d31a:	701a      	strb	r2, [r3, #0]
 800d31c:	e07e      	b.n	800d41c <UART_SetConfig+0x390>
 800d31e:	231b      	movs	r3, #27
 800d320:	2220      	movs	r2, #32
 800d322:	189b      	adds	r3, r3, r2
 800d324:	19db      	adds	r3, r3, r7
 800d326:	2202      	movs	r2, #2
 800d328:	701a      	strb	r2, [r3, #0]
 800d32a:	e077      	b.n	800d41c <UART_SetConfig+0x390>
 800d32c:	231b      	movs	r3, #27
 800d32e:	2220      	movs	r2, #32
 800d330:	189b      	adds	r3, r3, r2
 800d332:	19db      	adds	r3, r3, r7
 800d334:	2204      	movs	r2, #4
 800d336:	701a      	strb	r2, [r3, #0]
 800d338:	e070      	b.n	800d41c <UART_SetConfig+0x390>
 800d33a:	231b      	movs	r3, #27
 800d33c:	2220      	movs	r2, #32
 800d33e:	189b      	adds	r3, r3, r2
 800d340:	19db      	adds	r3, r3, r7
 800d342:	2208      	movs	r2, #8
 800d344:	701a      	strb	r2, [r3, #0]
 800d346:	e069      	b.n	800d41c <UART_SetConfig+0x390>
 800d348:	231b      	movs	r3, #27
 800d34a:	2220      	movs	r2, #32
 800d34c:	189b      	adds	r3, r3, r2
 800d34e:	19db      	adds	r3, r3, r7
 800d350:	2210      	movs	r2, #16
 800d352:	701a      	strb	r2, [r3, #0]
 800d354:	e062      	b.n	800d41c <UART_SetConfig+0x390>
 800d356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	4a1d      	ldr	r2, [pc, #116]	@ (800d3d0 <UART_SetConfig+0x344>)
 800d35c:	4293      	cmp	r3, r2
 800d35e:	d157      	bne.n	800d410 <UART_SetConfig+0x384>
 800d360:	4b1e      	ldr	r3, [pc, #120]	@ (800d3dc <UART_SetConfig+0x350>)
 800d362:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d364:	23c0      	movs	r3, #192	@ 0xc0
 800d366:	009b      	lsls	r3, r3, #2
 800d368:	4013      	ands	r3, r2
 800d36a:	22c0      	movs	r2, #192	@ 0xc0
 800d36c:	0092      	lsls	r2, r2, #2
 800d36e:	4293      	cmp	r3, r2
 800d370:	d040      	beq.n	800d3f4 <UART_SetConfig+0x368>
 800d372:	22c0      	movs	r2, #192	@ 0xc0
 800d374:	0092      	lsls	r2, r2, #2
 800d376:	4293      	cmp	r3, r2
 800d378:	d843      	bhi.n	800d402 <UART_SetConfig+0x376>
 800d37a:	2280      	movs	r2, #128	@ 0x80
 800d37c:	0092      	lsls	r2, r2, #2
 800d37e:	4293      	cmp	r3, r2
 800d380:	d011      	beq.n	800d3a6 <UART_SetConfig+0x31a>
 800d382:	2280      	movs	r2, #128	@ 0x80
 800d384:	0092      	lsls	r2, r2, #2
 800d386:	4293      	cmp	r3, r2
 800d388:	d83b      	bhi.n	800d402 <UART_SetConfig+0x376>
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d004      	beq.n	800d398 <UART_SetConfig+0x30c>
 800d38e:	2280      	movs	r2, #128	@ 0x80
 800d390:	0052      	lsls	r2, r2, #1
 800d392:	4293      	cmp	r3, r2
 800d394:	d00e      	beq.n	800d3b4 <UART_SetConfig+0x328>
 800d396:	e034      	b.n	800d402 <UART_SetConfig+0x376>
 800d398:	231b      	movs	r3, #27
 800d39a:	2220      	movs	r2, #32
 800d39c:	189b      	adds	r3, r3, r2
 800d39e:	19db      	adds	r3, r3, r7
 800d3a0:	2200      	movs	r2, #0
 800d3a2:	701a      	strb	r2, [r3, #0]
 800d3a4:	e03a      	b.n	800d41c <UART_SetConfig+0x390>
 800d3a6:	231b      	movs	r3, #27
 800d3a8:	2220      	movs	r2, #32
 800d3aa:	189b      	adds	r3, r3, r2
 800d3ac:	19db      	adds	r3, r3, r7
 800d3ae:	2202      	movs	r2, #2
 800d3b0:	701a      	strb	r2, [r3, #0]
 800d3b2:	e033      	b.n	800d41c <UART_SetConfig+0x390>
 800d3b4:	231b      	movs	r3, #27
 800d3b6:	2220      	movs	r2, #32
 800d3b8:	189b      	adds	r3, r3, r2
 800d3ba:	19db      	adds	r3, r3, r7
 800d3bc:	2204      	movs	r2, #4
 800d3be:	701a      	strb	r2, [r3, #0]
 800d3c0:	e02c      	b.n	800d41c <UART_SetConfig+0x390>
 800d3c2:	46c0      	nop			@ (mov r8, r8)
 800d3c4:	cfff69f3 	.word	0xcfff69f3
 800d3c8:	ffffcfff 	.word	0xffffcfff
 800d3cc:	40008000 	.word	0x40008000
 800d3d0:	40008400 	.word	0x40008400
 800d3d4:	11fff4ff 	.word	0x11fff4ff
 800d3d8:	40013800 	.word	0x40013800
 800d3dc:	40021000 	.word	0x40021000
 800d3e0:	40004400 	.word	0x40004400
 800d3e4:	40004800 	.word	0x40004800
 800d3e8:	40004c00 	.word	0x40004c00
 800d3ec:	40005000 	.word	0x40005000
 800d3f0:	40013c00 	.word	0x40013c00
 800d3f4:	231b      	movs	r3, #27
 800d3f6:	2220      	movs	r2, #32
 800d3f8:	189b      	adds	r3, r3, r2
 800d3fa:	19db      	adds	r3, r3, r7
 800d3fc:	2208      	movs	r2, #8
 800d3fe:	701a      	strb	r2, [r3, #0]
 800d400:	e00c      	b.n	800d41c <UART_SetConfig+0x390>
 800d402:	231b      	movs	r3, #27
 800d404:	2220      	movs	r2, #32
 800d406:	189b      	adds	r3, r3, r2
 800d408:	19db      	adds	r3, r3, r7
 800d40a:	2210      	movs	r2, #16
 800d40c:	701a      	strb	r2, [r3, #0]
 800d40e:	e005      	b.n	800d41c <UART_SetConfig+0x390>
 800d410:	231b      	movs	r3, #27
 800d412:	2220      	movs	r2, #32
 800d414:	189b      	adds	r3, r3, r2
 800d416:	19db      	adds	r3, r3, r7
 800d418:	2210      	movs	r2, #16
 800d41a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d41c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	4ac1      	ldr	r2, [pc, #772]	@ (800d728 <UART_SetConfig+0x69c>)
 800d422:	4293      	cmp	r3, r2
 800d424:	d005      	beq.n	800d432 <UART_SetConfig+0x3a6>
 800d426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	4ac0      	ldr	r2, [pc, #768]	@ (800d72c <UART_SetConfig+0x6a0>)
 800d42c:	4293      	cmp	r3, r2
 800d42e:	d000      	beq.n	800d432 <UART_SetConfig+0x3a6>
 800d430:	e093      	b.n	800d55a <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d432:	231b      	movs	r3, #27
 800d434:	2220      	movs	r2, #32
 800d436:	189b      	adds	r3, r3, r2
 800d438:	19db      	adds	r3, r3, r7
 800d43a:	781b      	ldrb	r3, [r3, #0]
 800d43c:	2b08      	cmp	r3, #8
 800d43e:	d015      	beq.n	800d46c <UART_SetConfig+0x3e0>
 800d440:	dc18      	bgt.n	800d474 <UART_SetConfig+0x3e8>
 800d442:	2b04      	cmp	r3, #4
 800d444:	d00d      	beq.n	800d462 <UART_SetConfig+0x3d6>
 800d446:	dc15      	bgt.n	800d474 <UART_SetConfig+0x3e8>
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d002      	beq.n	800d452 <UART_SetConfig+0x3c6>
 800d44c:	2b02      	cmp	r3, #2
 800d44e:	d005      	beq.n	800d45c <UART_SetConfig+0x3d0>
 800d450:	e010      	b.n	800d474 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d452:	f7fd fdbd 	bl	800afd0 <HAL_RCC_GetPCLK1Freq>
 800d456:	0003      	movs	r3, r0
 800d458:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d45a:	e014      	b.n	800d486 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d45c:	4bb4      	ldr	r3, [pc, #720]	@ (800d730 <UART_SetConfig+0x6a4>)
 800d45e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d460:	e011      	b.n	800d486 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d462:	f7fd fd29 	bl	800aeb8 <HAL_RCC_GetSysClockFreq>
 800d466:	0003      	movs	r3, r0
 800d468:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d46a:	e00c      	b.n	800d486 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d46c:	2380      	movs	r3, #128	@ 0x80
 800d46e:	021b      	lsls	r3, r3, #8
 800d470:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d472:	e008      	b.n	800d486 <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 800d474:	2300      	movs	r3, #0
 800d476:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800d478:	231a      	movs	r3, #26
 800d47a:	2220      	movs	r2, #32
 800d47c:	189b      	adds	r3, r3, r2
 800d47e:	19db      	adds	r3, r3, r7
 800d480:	2201      	movs	r2, #1
 800d482:	701a      	strb	r2, [r3, #0]
        break;
 800d484:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d486:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d100      	bne.n	800d48e <UART_SetConfig+0x402>
 800d48c:	e135      	b.n	800d6fa <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d48e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d490:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d492:	4ba8      	ldr	r3, [pc, #672]	@ (800d734 <UART_SetConfig+0x6a8>)
 800d494:	0052      	lsls	r2, r2, #1
 800d496:	5ad3      	ldrh	r3, [r2, r3]
 800d498:	0019      	movs	r1, r3
 800d49a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800d49c:	f7f2 fe5a 	bl	8000154 <__udivsi3>
 800d4a0:	0003      	movs	r3, r0
 800d4a2:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d4a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4a6:	685a      	ldr	r2, [r3, #4]
 800d4a8:	0013      	movs	r3, r2
 800d4aa:	005b      	lsls	r3, r3, #1
 800d4ac:	189b      	adds	r3, r3, r2
 800d4ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d4b0:	429a      	cmp	r2, r3
 800d4b2:	d305      	bcc.n	800d4c0 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d4b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4b6:	685b      	ldr	r3, [r3, #4]
 800d4b8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d4ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d4bc:	429a      	cmp	r2, r3
 800d4be:	d906      	bls.n	800d4ce <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 800d4c0:	231a      	movs	r3, #26
 800d4c2:	2220      	movs	r2, #32
 800d4c4:	189b      	adds	r3, r3, r2
 800d4c6:	19db      	adds	r3, r3, r7
 800d4c8:	2201      	movs	r2, #1
 800d4ca:	701a      	strb	r2, [r3, #0]
 800d4cc:	e044      	b.n	800d558 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d4ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d4d0:	61bb      	str	r3, [r7, #24]
 800d4d2:	2300      	movs	r3, #0
 800d4d4:	61fb      	str	r3, [r7, #28]
 800d4d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d4da:	4b96      	ldr	r3, [pc, #600]	@ (800d734 <UART_SetConfig+0x6a8>)
 800d4dc:	0052      	lsls	r2, r2, #1
 800d4de:	5ad3      	ldrh	r3, [r2, r3]
 800d4e0:	613b      	str	r3, [r7, #16]
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	617b      	str	r3, [r7, #20]
 800d4e6:	693a      	ldr	r2, [r7, #16]
 800d4e8:	697b      	ldr	r3, [r7, #20]
 800d4ea:	69b8      	ldr	r0, [r7, #24]
 800d4ec:	69f9      	ldr	r1, [r7, #28]
 800d4ee:	f7f3 f81f 	bl	8000530 <__aeabi_uldivmod>
 800d4f2:	0002      	movs	r2, r0
 800d4f4:	000b      	movs	r3, r1
 800d4f6:	0e11      	lsrs	r1, r2, #24
 800d4f8:	021d      	lsls	r5, r3, #8
 800d4fa:	430d      	orrs	r5, r1
 800d4fc:	0214      	lsls	r4, r2, #8
 800d4fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d500:	685b      	ldr	r3, [r3, #4]
 800d502:	085b      	lsrs	r3, r3, #1
 800d504:	60bb      	str	r3, [r7, #8]
 800d506:	2300      	movs	r3, #0
 800d508:	60fb      	str	r3, [r7, #12]
 800d50a:	68b8      	ldr	r0, [r7, #8]
 800d50c:	68f9      	ldr	r1, [r7, #12]
 800d50e:	1900      	adds	r0, r0, r4
 800d510:	4169      	adcs	r1, r5
 800d512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d514:	685b      	ldr	r3, [r3, #4]
 800d516:	603b      	str	r3, [r7, #0]
 800d518:	2300      	movs	r3, #0
 800d51a:	607b      	str	r3, [r7, #4]
 800d51c:	683a      	ldr	r2, [r7, #0]
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	f7f3 f806 	bl	8000530 <__aeabi_uldivmod>
 800d524:	0002      	movs	r2, r0
 800d526:	000b      	movs	r3, r1
 800d528:	0013      	movs	r3, r2
 800d52a:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d52c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d52e:	23c0      	movs	r3, #192	@ 0xc0
 800d530:	009b      	lsls	r3, r3, #2
 800d532:	429a      	cmp	r2, r3
 800d534:	d309      	bcc.n	800d54a <UART_SetConfig+0x4be>
 800d536:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d538:	2380      	movs	r3, #128	@ 0x80
 800d53a:	035b      	lsls	r3, r3, #13
 800d53c:	429a      	cmp	r2, r3
 800d53e:	d204      	bcs.n	800d54a <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 800d540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d546:	60da      	str	r2, [r3, #12]
 800d548:	e006      	b.n	800d558 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 800d54a:	231a      	movs	r3, #26
 800d54c:	2220      	movs	r2, #32
 800d54e:	189b      	adds	r3, r3, r2
 800d550:	19db      	adds	r3, r3, r7
 800d552:	2201      	movs	r2, #1
 800d554:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 800d556:	e0d0      	b.n	800d6fa <UART_SetConfig+0x66e>
 800d558:	e0cf      	b.n	800d6fa <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d55a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d55c:	69da      	ldr	r2, [r3, #28]
 800d55e:	2380      	movs	r3, #128	@ 0x80
 800d560:	021b      	lsls	r3, r3, #8
 800d562:	429a      	cmp	r2, r3
 800d564:	d000      	beq.n	800d568 <UART_SetConfig+0x4dc>
 800d566:	e070      	b.n	800d64a <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 800d568:	231b      	movs	r3, #27
 800d56a:	2220      	movs	r2, #32
 800d56c:	189b      	adds	r3, r3, r2
 800d56e:	19db      	adds	r3, r3, r7
 800d570:	781b      	ldrb	r3, [r3, #0]
 800d572:	2b08      	cmp	r3, #8
 800d574:	d015      	beq.n	800d5a2 <UART_SetConfig+0x516>
 800d576:	dc18      	bgt.n	800d5aa <UART_SetConfig+0x51e>
 800d578:	2b04      	cmp	r3, #4
 800d57a:	d00d      	beq.n	800d598 <UART_SetConfig+0x50c>
 800d57c:	dc15      	bgt.n	800d5aa <UART_SetConfig+0x51e>
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d002      	beq.n	800d588 <UART_SetConfig+0x4fc>
 800d582:	2b02      	cmp	r3, #2
 800d584:	d005      	beq.n	800d592 <UART_SetConfig+0x506>
 800d586:	e010      	b.n	800d5aa <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d588:	f7fd fd22 	bl	800afd0 <HAL_RCC_GetPCLK1Freq>
 800d58c:	0003      	movs	r3, r0
 800d58e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d590:	e014      	b.n	800d5bc <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d592:	4b67      	ldr	r3, [pc, #412]	@ (800d730 <UART_SetConfig+0x6a4>)
 800d594:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d596:	e011      	b.n	800d5bc <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d598:	f7fd fc8e 	bl	800aeb8 <HAL_RCC_GetSysClockFreq>
 800d59c:	0003      	movs	r3, r0
 800d59e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d5a0:	e00c      	b.n	800d5bc <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d5a2:	2380      	movs	r3, #128	@ 0x80
 800d5a4:	021b      	lsls	r3, r3, #8
 800d5a6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d5a8:	e008      	b.n	800d5bc <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800d5ae:	231a      	movs	r3, #26
 800d5b0:	2220      	movs	r2, #32
 800d5b2:	189b      	adds	r3, r3, r2
 800d5b4:	19db      	adds	r3, r3, r7
 800d5b6:	2201      	movs	r2, #1
 800d5b8:	701a      	strb	r2, [r3, #0]
        break;
 800d5ba:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d5bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d100      	bne.n	800d5c4 <UART_SetConfig+0x538>
 800d5c2:	e09a      	b.n	800d6fa <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d5c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d5c8:	4b5a      	ldr	r3, [pc, #360]	@ (800d734 <UART_SetConfig+0x6a8>)
 800d5ca:	0052      	lsls	r2, r2, #1
 800d5cc:	5ad3      	ldrh	r3, [r2, r3]
 800d5ce:	0019      	movs	r1, r3
 800d5d0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800d5d2:	f7f2 fdbf 	bl	8000154 <__udivsi3>
 800d5d6:	0003      	movs	r3, r0
 800d5d8:	005a      	lsls	r2, r3, #1
 800d5da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5dc:	685b      	ldr	r3, [r3, #4]
 800d5de:	085b      	lsrs	r3, r3, #1
 800d5e0:	18d2      	adds	r2, r2, r3
 800d5e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5e4:	685b      	ldr	r3, [r3, #4]
 800d5e6:	0019      	movs	r1, r3
 800d5e8:	0010      	movs	r0, r2
 800d5ea:	f7f2 fdb3 	bl	8000154 <__udivsi3>
 800d5ee:	0003      	movs	r3, r0
 800d5f0:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d5f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5f4:	2b0f      	cmp	r3, #15
 800d5f6:	d921      	bls.n	800d63c <UART_SetConfig+0x5b0>
 800d5f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d5fa:	2380      	movs	r3, #128	@ 0x80
 800d5fc:	025b      	lsls	r3, r3, #9
 800d5fe:	429a      	cmp	r2, r3
 800d600:	d21c      	bcs.n	800d63c <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d604:	b29a      	uxth	r2, r3
 800d606:	200e      	movs	r0, #14
 800d608:	2420      	movs	r4, #32
 800d60a:	1903      	adds	r3, r0, r4
 800d60c:	19db      	adds	r3, r3, r7
 800d60e:	210f      	movs	r1, #15
 800d610:	438a      	bics	r2, r1
 800d612:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d616:	085b      	lsrs	r3, r3, #1
 800d618:	b29b      	uxth	r3, r3
 800d61a:	2207      	movs	r2, #7
 800d61c:	4013      	ands	r3, r2
 800d61e:	b299      	uxth	r1, r3
 800d620:	1903      	adds	r3, r0, r4
 800d622:	19db      	adds	r3, r3, r7
 800d624:	1902      	adds	r2, r0, r4
 800d626:	19d2      	adds	r2, r2, r7
 800d628:	8812      	ldrh	r2, [r2, #0]
 800d62a:	430a      	orrs	r2, r1
 800d62c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800d62e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	1902      	adds	r2, r0, r4
 800d634:	19d2      	adds	r2, r2, r7
 800d636:	8812      	ldrh	r2, [r2, #0]
 800d638:	60da      	str	r2, [r3, #12]
 800d63a:	e05e      	b.n	800d6fa <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 800d63c:	231a      	movs	r3, #26
 800d63e:	2220      	movs	r2, #32
 800d640:	189b      	adds	r3, r3, r2
 800d642:	19db      	adds	r3, r3, r7
 800d644:	2201      	movs	r2, #1
 800d646:	701a      	strb	r2, [r3, #0]
 800d648:	e057      	b.n	800d6fa <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d64a:	231b      	movs	r3, #27
 800d64c:	2220      	movs	r2, #32
 800d64e:	189b      	adds	r3, r3, r2
 800d650:	19db      	adds	r3, r3, r7
 800d652:	781b      	ldrb	r3, [r3, #0]
 800d654:	2b08      	cmp	r3, #8
 800d656:	d015      	beq.n	800d684 <UART_SetConfig+0x5f8>
 800d658:	dc18      	bgt.n	800d68c <UART_SetConfig+0x600>
 800d65a:	2b04      	cmp	r3, #4
 800d65c:	d00d      	beq.n	800d67a <UART_SetConfig+0x5ee>
 800d65e:	dc15      	bgt.n	800d68c <UART_SetConfig+0x600>
 800d660:	2b00      	cmp	r3, #0
 800d662:	d002      	beq.n	800d66a <UART_SetConfig+0x5de>
 800d664:	2b02      	cmp	r3, #2
 800d666:	d005      	beq.n	800d674 <UART_SetConfig+0x5e8>
 800d668:	e010      	b.n	800d68c <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d66a:	f7fd fcb1 	bl	800afd0 <HAL_RCC_GetPCLK1Freq>
 800d66e:	0003      	movs	r3, r0
 800d670:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d672:	e014      	b.n	800d69e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d674:	4b2e      	ldr	r3, [pc, #184]	@ (800d730 <UART_SetConfig+0x6a4>)
 800d676:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d678:	e011      	b.n	800d69e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d67a:	f7fd fc1d 	bl	800aeb8 <HAL_RCC_GetSysClockFreq>
 800d67e:	0003      	movs	r3, r0
 800d680:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d682:	e00c      	b.n	800d69e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d684:	2380      	movs	r3, #128	@ 0x80
 800d686:	021b      	lsls	r3, r3, #8
 800d688:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d68a:	e008      	b.n	800d69e <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 800d68c:	2300      	movs	r3, #0
 800d68e:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800d690:	231a      	movs	r3, #26
 800d692:	2220      	movs	r2, #32
 800d694:	189b      	adds	r3, r3, r2
 800d696:	19db      	adds	r3, r3, r7
 800d698:	2201      	movs	r2, #1
 800d69a:	701a      	strb	r2, [r3, #0]
        break;
 800d69c:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800d69e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d02a      	beq.n	800d6fa <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d6a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d6a8:	4b22      	ldr	r3, [pc, #136]	@ (800d734 <UART_SetConfig+0x6a8>)
 800d6aa:	0052      	lsls	r2, r2, #1
 800d6ac:	5ad3      	ldrh	r3, [r2, r3]
 800d6ae:	0019      	movs	r1, r3
 800d6b0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800d6b2:	f7f2 fd4f 	bl	8000154 <__udivsi3>
 800d6b6:	0003      	movs	r3, r0
 800d6b8:	001a      	movs	r2, r3
 800d6ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6bc:	685b      	ldr	r3, [r3, #4]
 800d6be:	085b      	lsrs	r3, r3, #1
 800d6c0:	18d2      	adds	r2, r2, r3
 800d6c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6c4:	685b      	ldr	r3, [r3, #4]
 800d6c6:	0019      	movs	r1, r3
 800d6c8:	0010      	movs	r0, r2
 800d6ca:	f7f2 fd43 	bl	8000154 <__udivsi3>
 800d6ce:	0003      	movs	r3, r0
 800d6d0:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d6d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6d4:	2b0f      	cmp	r3, #15
 800d6d6:	d90a      	bls.n	800d6ee <UART_SetConfig+0x662>
 800d6d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d6da:	2380      	movs	r3, #128	@ 0x80
 800d6dc:	025b      	lsls	r3, r3, #9
 800d6de:	429a      	cmp	r2, r3
 800d6e0:	d205      	bcs.n	800d6ee <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d6e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6e4:	b29a      	uxth	r2, r3
 800d6e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	60da      	str	r2, [r3, #12]
 800d6ec:	e005      	b.n	800d6fa <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 800d6ee:	231a      	movs	r3, #26
 800d6f0:	2220      	movs	r2, #32
 800d6f2:	189b      	adds	r3, r3, r2
 800d6f4:	19db      	adds	r3, r3, r7
 800d6f6:	2201      	movs	r2, #1
 800d6f8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d6fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6fc:	226a      	movs	r2, #106	@ 0x6a
 800d6fe:	2101      	movs	r1, #1
 800d700:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800d702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d704:	2268      	movs	r2, #104	@ 0x68
 800d706:	2101      	movs	r1, #1
 800d708:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d70a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d70c:	2200      	movs	r2, #0
 800d70e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d712:	2200      	movs	r2, #0
 800d714:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d716:	231a      	movs	r3, #26
 800d718:	2220      	movs	r2, #32
 800d71a:	189b      	adds	r3, r3, r2
 800d71c:	19db      	adds	r3, r3, r7
 800d71e:	781b      	ldrb	r3, [r3, #0]
}
 800d720:	0018      	movs	r0, r3
 800d722:	46bd      	mov	sp, r7
 800d724:	b010      	add	sp, #64	@ 0x40
 800d726:	bdb0      	pop	{r4, r5, r7, pc}
 800d728:	40008000 	.word	0x40008000
 800d72c:	40008400 	.word	0x40008400
 800d730:	00f42400 	.word	0x00f42400
 800d734:	0801c1ec 	.word	0x0801c1ec

0800d738 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d738:	b580      	push	{r7, lr}
 800d73a:	b082      	sub	sp, #8
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d744:	2208      	movs	r2, #8
 800d746:	4013      	ands	r3, r2
 800d748:	d00b      	beq.n	800d762 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	685b      	ldr	r3, [r3, #4]
 800d750:	4a4a      	ldr	r2, [pc, #296]	@ (800d87c <UART_AdvFeatureConfig+0x144>)
 800d752:	4013      	ands	r3, r2
 800d754:	0019      	movs	r1, r3
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	430a      	orrs	r2, r1
 800d760:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d766:	2201      	movs	r2, #1
 800d768:	4013      	ands	r3, r2
 800d76a:	d00b      	beq.n	800d784 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	685b      	ldr	r3, [r3, #4]
 800d772:	4a43      	ldr	r2, [pc, #268]	@ (800d880 <UART_AdvFeatureConfig+0x148>)
 800d774:	4013      	ands	r3, r2
 800d776:	0019      	movs	r1, r3
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	430a      	orrs	r2, r1
 800d782:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d788:	2202      	movs	r2, #2
 800d78a:	4013      	ands	r3, r2
 800d78c:	d00b      	beq.n	800d7a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	685b      	ldr	r3, [r3, #4]
 800d794:	4a3b      	ldr	r2, [pc, #236]	@ (800d884 <UART_AdvFeatureConfig+0x14c>)
 800d796:	4013      	ands	r3, r2
 800d798:	0019      	movs	r1, r3
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	430a      	orrs	r2, r1
 800d7a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d7aa:	2204      	movs	r2, #4
 800d7ac:	4013      	ands	r3, r2
 800d7ae:	d00b      	beq.n	800d7c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	685b      	ldr	r3, [r3, #4]
 800d7b6:	4a34      	ldr	r2, [pc, #208]	@ (800d888 <UART_AdvFeatureConfig+0x150>)
 800d7b8:	4013      	ands	r3, r2
 800d7ba:	0019      	movs	r1, r3
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	430a      	orrs	r2, r1
 800d7c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d7cc:	2210      	movs	r2, #16
 800d7ce:	4013      	ands	r3, r2
 800d7d0:	d00b      	beq.n	800d7ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	689b      	ldr	r3, [r3, #8]
 800d7d8:	4a2c      	ldr	r2, [pc, #176]	@ (800d88c <UART_AdvFeatureConfig+0x154>)
 800d7da:	4013      	ands	r3, r2
 800d7dc:	0019      	movs	r1, r3
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	430a      	orrs	r2, r1
 800d7e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d7ee:	2220      	movs	r2, #32
 800d7f0:	4013      	ands	r3, r2
 800d7f2:	d00b      	beq.n	800d80c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	689b      	ldr	r3, [r3, #8]
 800d7fa:	4a25      	ldr	r2, [pc, #148]	@ (800d890 <UART_AdvFeatureConfig+0x158>)
 800d7fc:	4013      	ands	r3, r2
 800d7fe:	0019      	movs	r1, r3
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	430a      	orrs	r2, r1
 800d80a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d810:	2240      	movs	r2, #64	@ 0x40
 800d812:	4013      	ands	r3, r2
 800d814:	d01d      	beq.n	800d852 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	685b      	ldr	r3, [r3, #4]
 800d81c:	4a1d      	ldr	r2, [pc, #116]	@ (800d894 <UART_AdvFeatureConfig+0x15c>)
 800d81e:	4013      	ands	r3, r2
 800d820:	0019      	movs	r1, r3
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	430a      	orrs	r2, r1
 800d82c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d832:	2380      	movs	r3, #128	@ 0x80
 800d834:	035b      	lsls	r3, r3, #13
 800d836:	429a      	cmp	r2, r3
 800d838:	d10b      	bne.n	800d852 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	685b      	ldr	r3, [r3, #4]
 800d840:	4a15      	ldr	r2, [pc, #84]	@ (800d898 <UART_AdvFeatureConfig+0x160>)
 800d842:	4013      	ands	r3, r2
 800d844:	0019      	movs	r1, r3
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	430a      	orrs	r2, r1
 800d850:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d856:	2280      	movs	r2, #128	@ 0x80
 800d858:	4013      	ands	r3, r2
 800d85a:	d00b      	beq.n	800d874 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	685b      	ldr	r3, [r3, #4]
 800d862:	4a0e      	ldr	r2, [pc, #56]	@ (800d89c <UART_AdvFeatureConfig+0x164>)
 800d864:	4013      	ands	r3, r2
 800d866:	0019      	movs	r1, r3
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	430a      	orrs	r2, r1
 800d872:	605a      	str	r2, [r3, #4]
  }
}
 800d874:	46c0      	nop			@ (mov r8, r8)
 800d876:	46bd      	mov	sp, r7
 800d878:	b002      	add	sp, #8
 800d87a:	bd80      	pop	{r7, pc}
 800d87c:	ffff7fff 	.word	0xffff7fff
 800d880:	fffdffff 	.word	0xfffdffff
 800d884:	fffeffff 	.word	0xfffeffff
 800d888:	fffbffff 	.word	0xfffbffff
 800d88c:	ffffefff 	.word	0xffffefff
 800d890:	ffffdfff 	.word	0xffffdfff
 800d894:	ffefffff 	.word	0xffefffff
 800d898:	ff9fffff 	.word	0xff9fffff
 800d89c:	fff7ffff 	.word	0xfff7ffff

0800d8a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d8a0:	b580      	push	{r7, lr}
 800d8a2:	b092      	sub	sp, #72	@ 0x48
 800d8a4:	af02      	add	r7, sp, #8
 800d8a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	2290      	movs	r2, #144	@ 0x90
 800d8ac:	2100      	movs	r1, #0
 800d8ae:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d8b0:	f7fb fb5c 	bl	8008f6c <HAL_GetTick>
 800d8b4:	0003      	movs	r3, r0
 800d8b6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	2208      	movs	r2, #8
 800d8c0:	4013      	ands	r3, r2
 800d8c2:	2b08      	cmp	r3, #8
 800d8c4:	d12d      	bne.n	800d922 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d8c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d8c8:	2280      	movs	r2, #128	@ 0x80
 800d8ca:	0391      	lsls	r1, r2, #14
 800d8cc:	6878      	ldr	r0, [r7, #4]
 800d8ce:	4a47      	ldr	r2, [pc, #284]	@ (800d9ec <UART_CheckIdleState+0x14c>)
 800d8d0:	9200      	str	r2, [sp, #0]
 800d8d2:	2200      	movs	r2, #0
 800d8d4:	f000 f88e 	bl	800d9f4 <UART_WaitOnFlagUntilTimeout>
 800d8d8:	1e03      	subs	r3, r0, #0
 800d8da:	d022      	beq.n	800d922 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d8dc:	f3ef 8310 	mrs	r3, PRIMASK
 800d8e0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800d8e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d8e4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d8e6:	2301      	movs	r3, #1
 800d8e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d8ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8ec:	f383 8810 	msr	PRIMASK, r3
}
 800d8f0:	46c0      	nop			@ (mov r8, r8)
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	681a      	ldr	r2, [r3, #0]
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	2180      	movs	r1, #128	@ 0x80
 800d8fe:	438a      	bics	r2, r1
 800d900:	601a      	str	r2, [r3, #0]
 800d902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d904:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d906:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d908:	f383 8810 	msr	PRIMASK, r3
}
 800d90c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	2288      	movs	r2, #136	@ 0x88
 800d912:	2120      	movs	r1, #32
 800d914:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	2284      	movs	r2, #132	@ 0x84
 800d91a:	2100      	movs	r1, #0
 800d91c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d91e:	2303      	movs	r3, #3
 800d920:	e060      	b.n	800d9e4 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	2204      	movs	r2, #4
 800d92a:	4013      	ands	r3, r2
 800d92c:	2b04      	cmp	r3, #4
 800d92e:	d146      	bne.n	800d9be <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d930:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d932:	2280      	movs	r2, #128	@ 0x80
 800d934:	03d1      	lsls	r1, r2, #15
 800d936:	6878      	ldr	r0, [r7, #4]
 800d938:	4a2c      	ldr	r2, [pc, #176]	@ (800d9ec <UART_CheckIdleState+0x14c>)
 800d93a:	9200      	str	r2, [sp, #0]
 800d93c:	2200      	movs	r2, #0
 800d93e:	f000 f859 	bl	800d9f4 <UART_WaitOnFlagUntilTimeout>
 800d942:	1e03      	subs	r3, r0, #0
 800d944:	d03b      	beq.n	800d9be <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d946:	f3ef 8310 	mrs	r3, PRIMASK
 800d94a:	60fb      	str	r3, [r7, #12]
  return(result);
 800d94c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d94e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d950:	2301      	movs	r3, #1
 800d952:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d954:	693b      	ldr	r3, [r7, #16]
 800d956:	f383 8810 	msr	PRIMASK, r3
}
 800d95a:	46c0      	nop			@ (mov r8, r8)
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	681a      	ldr	r2, [r3, #0]
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	4922      	ldr	r1, [pc, #136]	@ (800d9f0 <UART_CheckIdleState+0x150>)
 800d968:	400a      	ands	r2, r1
 800d96a:	601a      	str	r2, [r3, #0]
 800d96c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d96e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d970:	697b      	ldr	r3, [r7, #20]
 800d972:	f383 8810 	msr	PRIMASK, r3
}
 800d976:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d978:	f3ef 8310 	mrs	r3, PRIMASK
 800d97c:	61bb      	str	r3, [r7, #24]
  return(result);
 800d97e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d980:	633b      	str	r3, [r7, #48]	@ 0x30
 800d982:	2301      	movs	r3, #1
 800d984:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d986:	69fb      	ldr	r3, [r7, #28]
 800d988:	f383 8810 	msr	PRIMASK, r3
}
 800d98c:	46c0      	nop			@ (mov r8, r8)
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	689a      	ldr	r2, [r3, #8]
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	2101      	movs	r1, #1
 800d99a:	438a      	bics	r2, r1
 800d99c:	609a      	str	r2, [r3, #8]
 800d99e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9a0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d9a2:	6a3b      	ldr	r3, [r7, #32]
 800d9a4:	f383 8810 	msr	PRIMASK, r3
}
 800d9a8:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	228c      	movs	r2, #140	@ 0x8c
 800d9ae:	2120      	movs	r1, #32
 800d9b0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	2284      	movs	r2, #132	@ 0x84
 800d9b6:	2100      	movs	r1, #0
 800d9b8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d9ba:	2303      	movs	r3, #3
 800d9bc:	e012      	b.n	800d9e4 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	2288      	movs	r2, #136	@ 0x88
 800d9c2:	2120      	movs	r1, #32
 800d9c4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	228c      	movs	r2, #140	@ 0x8c
 800d9ca:	2120      	movs	r1, #32
 800d9cc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	2200      	movs	r2, #0
 800d9d2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	2200      	movs	r2, #0
 800d9d8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	2284      	movs	r2, #132	@ 0x84
 800d9de:	2100      	movs	r1, #0
 800d9e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800d9e2:	2300      	movs	r3, #0
}
 800d9e4:	0018      	movs	r0, r3
 800d9e6:	46bd      	mov	sp, r7
 800d9e8:	b010      	add	sp, #64	@ 0x40
 800d9ea:	bd80      	pop	{r7, pc}
 800d9ec:	01ffffff 	.word	0x01ffffff
 800d9f0:	fffffedf 	.word	0xfffffedf

0800d9f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d9f4:	b580      	push	{r7, lr}
 800d9f6:	b084      	sub	sp, #16
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	60f8      	str	r0, [r7, #12]
 800d9fc:	60b9      	str	r1, [r7, #8]
 800d9fe:	603b      	str	r3, [r7, #0]
 800da00:	1dfb      	adds	r3, r7, #7
 800da02:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800da04:	e051      	b.n	800daaa <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800da06:	69bb      	ldr	r3, [r7, #24]
 800da08:	3301      	adds	r3, #1
 800da0a:	d04e      	beq.n	800daaa <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800da0c:	f7fb faae 	bl	8008f6c <HAL_GetTick>
 800da10:	0002      	movs	r2, r0
 800da12:	683b      	ldr	r3, [r7, #0]
 800da14:	1ad3      	subs	r3, r2, r3
 800da16:	69ba      	ldr	r2, [r7, #24]
 800da18:	429a      	cmp	r2, r3
 800da1a:	d302      	bcc.n	800da22 <UART_WaitOnFlagUntilTimeout+0x2e>
 800da1c:	69bb      	ldr	r3, [r7, #24]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d101      	bne.n	800da26 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800da22:	2303      	movs	r3, #3
 800da24:	e051      	b.n	800daca <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	2204      	movs	r2, #4
 800da2e:	4013      	ands	r3, r2
 800da30:	d03b      	beq.n	800daaa <UART_WaitOnFlagUntilTimeout+0xb6>
 800da32:	68bb      	ldr	r3, [r7, #8]
 800da34:	2b80      	cmp	r3, #128	@ 0x80
 800da36:	d038      	beq.n	800daaa <UART_WaitOnFlagUntilTimeout+0xb6>
 800da38:	68bb      	ldr	r3, [r7, #8]
 800da3a:	2b40      	cmp	r3, #64	@ 0x40
 800da3c:	d035      	beq.n	800daaa <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	69db      	ldr	r3, [r3, #28]
 800da44:	2208      	movs	r2, #8
 800da46:	4013      	ands	r3, r2
 800da48:	2b08      	cmp	r3, #8
 800da4a:	d111      	bne.n	800da70 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	2208      	movs	r2, #8
 800da52:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	0018      	movs	r0, r3
 800da58:	f000 f83c 	bl	800dad4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	2290      	movs	r2, #144	@ 0x90
 800da60:	2108      	movs	r1, #8
 800da62:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	2284      	movs	r2, #132	@ 0x84
 800da68:	2100      	movs	r1, #0
 800da6a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800da6c:	2301      	movs	r3, #1
 800da6e:	e02c      	b.n	800daca <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	69da      	ldr	r2, [r3, #28]
 800da76:	2380      	movs	r3, #128	@ 0x80
 800da78:	011b      	lsls	r3, r3, #4
 800da7a:	401a      	ands	r2, r3
 800da7c:	2380      	movs	r3, #128	@ 0x80
 800da7e:	011b      	lsls	r3, r3, #4
 800da80:	429a      	cmp	r2, r3
 800da82:	d112      	bne.n	800daaa <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	2280      	movs	r2, #128	@ 0x80
 800da8a:	0112      	lsls	r2, r2, #4
 800da8c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	0018      	movs	r0, r3
 800da92:	f000 f81f 	bl	800dad4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	2290      	movs	r2, #144	@ 0x90
 800da9a:	2120      	movs	r1, #32
 800da9c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	2284      	movs	r2, #132	@ 0x84
 800daa2:	2100      	movs	r1, #0
 800daa4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800daa6:	2303      	movs	r3, #3
 800daa8:	e00f      	b.n	800daca <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	69db      	ldr	r3, [r3, #28]
 800dab0:	68ba      	ldr	r2, [r7, #8]
 800dab2:	4013      	ands	r3, r2
 800dab4:	68ba      	ldr	r2, [r7, #8]
 800dab6:	1ad3      	subs	r3, r2, r3
 800dab8:	425a      	negs	r2, r3
 800daba:	4153      	adcs	r3, r2
 800dabc:	b2db      	uxtb	r3, r3
 800dabe:	001a      	movs	r2, r3
 800dac0:	1dfb      	adds	r3, r7, #7
 800dac2:	781b      	ldrb	r3, [r3, #0]
 800dac4:	429a      	cmp	r2, r3
 800dac6:	d09e      	beq.n	800da06 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800dac8:	2300      	movs	r3, #0
}
 800daca:	0018      	movs	r0, r3
 800dacc:	46bd      	mov	sp, r7
 800dace:	b004      	add	sp, #16
 800dad0:	bd80      	pop	{r7, pc}
	...

0800dad4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800dad4:	b580      	push	{r7, lr}
 800dad6:	b08e      	sub	sp, #56	@ 0x38
 800dad8:	af00      	add	r7, sp, #0
 800dada:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dadc:	f3ef 8310 	mrs	r3, PRIMASK
 800dae0:	617b      	str	r3, [r7, #20]
  return(result);
 800dae2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dae4:	637b      	str	r3, [r7, #52]	@ 0x34
 800dae6:	2301      	movs	r3, #1
 800dae8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800daea:	69bb      	ldr	r3, [r7, #24]
 800daec:	f383 8810 	msr	PRIMASK, r3
}
 800daf0:	46c0      	nop			@ (mov r8, r8)
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	681a      	ldr	r2, [r3, #0]
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	4926      	ldr	r1, [pc, #152]	@ (800db98 <UART_EndRxTransfer+0xc4>)
 800dafe:	400a      	ands	r2, r1
 800db00:	601a      	str	r2, [r3, #0]
 800db02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db04:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800db06:	69fb      	ldr	r3, [r7, #28]
 800db08:	f383 8810 	msr	PRIMASK, r3
}
 800db0c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800db0e:	f3ef 8310 	mrs	r3, PRIMASK
 800db12:	623b      	str	r3, [r7, #32]
  return(result);
 800db14:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800db16:	633b      	str	r3, [r7, #48]	@ 0x30
 800db18:	2301      	movs	r3, #1
 800db1a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800db1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db1e:	f383 8810 	msr	PRIMASK, r3
}
 800db22:	46c0      	nop			@ (mov r8, r8)
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	689a      	ldr	r2, [r3, #8]
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	491b      	ldr	r1, [pc, #108]	@ (800db9c <UART_EndRxTransfer+0xc8>)
 800db30:	400a      	ands	r2, r1
 800db32:	609a      	str	r2, [r3, #8]
 800db34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db36:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800db38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db3a:	f383 8810 	msr	PRIMASK, r3
}
 800db3e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800db44:	2b01      	cmp	r3, #1
 800db46:	d118      	bne.n	800db7a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800db48:	f3ef 8310 	mrs	r3, PRIMASK
 800db4c:	60bb      	str	r3, [r7, #8]
  return(result);
 800db4e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800db50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800db52:	2301      	movs	r3, #1
 800db54:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	f383 8810 	msr	PRIMASK, r3
}
 800db5c:	46c0      	nop			@ (mov r8, r8)
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	681a      	ldr	r2, [r3, #0]
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	2110      	movs	r1, #16
 800db6a:	438a      	bics	r2, r1
 800db6c:	601a      	str	r2, [r3, #0]
 800db6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db70:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800db72:	693b      	ldr	r3, [r7, #16]
 800db74:	f383 8810 	msr	PRIMASK, r3
}
 800db78:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	228c      	movs	r2, #140	@ 0x8c
 800db7e:	2120      	movs	r1, #32
 800db80:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	2200      	movs	r2, #0
 800db86:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	2200      	movs	r2, #0
 800db8c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800db8e:	46c0      	nop			@ (mov r8, r8)
 800db90:	46bd      	mov	sp, r7
 800db92:	b00e      	add	sp, #56	@ 0x38
 800db94:	bd80      	pop	{r7, pc}
 800db96:	46c0      	nop			@ (mov r8, r8)
 800db98:	fffffedf 	.word	0xfffffedf
 800db9c:	effffffe 	.word	0xeffffffe

0800dba0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800dba0:	b580      	push	{r7, lr}
 800dba2:	b084      	sub	sp, #16
 800dba4:	af00      	add	r7, sp, #0
 800dba6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	2284      	movs	r2, #132	@ 0x84
 800dbac:	5c9b      	ldrb	r3, [r3, r2]
 800dbae:	2b01      	cmp	r3, #1
 800dbb0:	d101      	bne.n	800dbb6 <HAL_UARTEx_DisableFifoMode+0x16>
 800dbb2:	2302      	movs	r3, #2
 800dbb4:	e027      	b.n	800dc06 <HAL_UARTEx_DisableFifoMode+0x66>
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	2284      	movs	r2, #132	@ 0x84
 800dbba:	2101      	movs	r1, #1
 800dbbc:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	2288      	movs	r2, #136	@ 0x88
 800dbc2:	2124      	movs	r1, #36	@ 0x24
 800dbc4:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	681a      	ldr	r2, [r3, #0]
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	2101      	movs	r1, #1
 800dbda:	438a      	bics	r2, r1
 800dbdc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	4a0b      	ldr	r2, [pc, #44]	@ (800dc10 <HAL_UARTEx_DisableFifoMode+0x70>)
 800dbe2:	4013      	ands	r3, r2
 800dbe4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	2200      	movs	r2, #0
 800dbea:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	68fa      	ldr	r2, [r7, #12]
 800dbf2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	2288      	movs	r2, #136	@ 0x88
 800dbf8:	2120      	movs	r1, #32
 800dbfa:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	2284      	movs	r2, #132	@ 0x84
 800dc00:	2100      	movs	r1, #0
 800dc02:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800dc04:	2300      	movs	r3, #0
}
 800dc06:	0018      	movs	r0, r3
 800dc08:	46bd      	mov	sp, r7
 800dc0a:	b004      	add	sp, #16
 800dc0c:	bd80      	pop	{r7, pc}
 800dc0e:	46c0      	nop			@ (mov r8, r8)
 800dc10:	dfffffff 	.word	0xdfffffff

0800dc14 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dc14:	b580      	push	{r7, lr}
 800dc16:	b084      	sub	sp, #16
 800dc18:	af00      	add	r7, sp, #0
 800dc1a:	6078      	str	r0, [r7, #4]
 800dc1c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	2284      	movs	r2, #132	@ 0x84
 800dc22:	5c9b      	ldrb	r3, [r3, r2]
 800dc24:	2b01      	cmp	r3, #1
 800dc26:	d101      	bne.n	800dc2c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800dc28:	2302      	movs	r3, #2
 800dc2a:	e02e      	b.n	800dc8a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	2284      	movs	r2, #132	@ 0x84
 800dc30:	2101      	movs	r1, #1
 800dc32:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	2288      	movs	r2, #136	@ 0x88
 800dc38:	2124      	movs	r1, #36	@ 0x24
 800dc3a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	681a      	ldr	r2, [r3, #0]
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	2101      	movs	r1, #1
 800dc50:	438a      	bics	r2, r1
 800dc52:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	689b      	ldr	r3, [r3, #8]
 800dc5a:	00db      	lsls	r3, r3, #3
 800dc5c:	08d9      	lsrs	r1, r3, #3
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	683a      	ldr	r2, [r7, #0]
 800dc64:	430a      	orrs	r2, r1
 800dc66:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	0018      	movs	r0, r3
 800dc6c:	f000 f854 	bl	800dd18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	68fa      	ldr	r2, [r7, #12]
 800dc76:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	2288      	movs	r2, #136	@ 0x88
 800dc7c:	2120      	movs	r1, #32
 800dc7e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	2284      	movs	r2, #132	@ 0x84
 800dc84:	2100      	movs	r1, #0
 800dc86:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800dc88:	2300      	movs	r3, #0
}
 800dc8a:	0018      	movs	r0, r3
 800dc8c:	46bd      	mov	sp, r7
 800dc8e:	b004      	add	sp, #16
 800dc90:	bd80      	pop	{r7, pc}
	...

0800dc94 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dc94:	b580      	push	{r7, lr}
 800dc96:	b084      	sub	sp, #16
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	6078      	str	r0, [r7, #4]
 800dc9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	2284      	movs	r2, #132	@ 0x84
 800dca2:	5c9b      	ldrb	r3, [r3, r2]
 800dca4:	2b01      	cmp	r3, #1
 800dca6:	d101      	bne.n	800dcac <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800dca8:	2302      	movs	r3, #2
 800dcaa:	e02f      	b.n	800dd0c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	2284      	movs	r2, #132	@ 0x84
 800dcb0:	2101      	movs	r1, #1
 800dcb2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	2288      	movs	r2, #136	@ 0x88
 800dcb8:	2124      	movs	r1, #36	@ 0x24
 800dcba:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	681a      	ldr	r2, [r3, #0]
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	2101      	movs	r1, #1
 800dcd0:	438a      	bics	r2, r1
 800dcd2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	689b      	ldr	r3, [r3, #8]
 800dcda:	4a0e      	ldr	r2, [pc, #56]	@ (800dd14 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800dcdc:	4013      	ands	r3, r2
 800dcde:	0019      	movs	r1, r3
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	683a      	ldr	r2, [r7, #0]
 800dce6:	430a      	orrs	r2, r1
 800dce8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	0018      	movs	r0, r3
 800dcee:	f000 f813 	bl	800dd18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	68fa      	ldr	r2, [r7, #12]
 800dcf8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	2288      	movs	r2, #136	@ 0x88
 800dcfe:	2120      	movs	r1, #32
 800dd00:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	2284      	movs	r2, #132	@ 0x84
 800dd06:	2100      	movs	r1, #0
 800dd08:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800dd0a:	2300      	movs	r3, #0
}
 800dd0c:	0018      	movs	r0, r3
 800dd0e:	46bd      	mov	sp, r7
 800dd10:	b004      	add	sp, #16
 800dd12:	bd80      	pop	{r7, pc}
 800dd14:	f1ffffff 	.word	0xf1ffffff

0800dd18 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800dd18:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd1a:	b085      	sub	sp, #20
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d108      	bne.n	800dd3a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	226a      	movs	r2, #106	@ 0x6a
 800dd2c:	2101      	movs	r1, #1
 800dd2e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	2268      	movs	r2, #104	@ 0x68
 800dd34:	2101      	movs	r1, #1
 800dd36:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800dd38:	e043      	b.n	800ddc2 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800dd3a:	260f      	movs	r6, #15
 800dd3c:	19bb      	adds	r3, r7, r6
 800dd3e:	2208      	movs	r2, #8
 800dd40:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800dd42:	200e      	movs	r0, #14
 800dd44:	183b      	adds	r3, r7, r0
 800dd46:	2208      	movs	r2, #8
 800dd48:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	689b      	ldr	r3, [r3, #8]
 800dd50:	0e5b      	lsrs	r3, r3, #25
 800dd52:	b2da      	uxtb	r2, r3
 800dd54:	240d      	movs	r4, #13
 800dd56:	193b      	adds	r3, r7, r4
 800dd58:	2107      	movs	r1, #7
 800dd5a:	400a      	ands	r2, r1
 800dd5c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	689b      	ldr	r3, [r3, #8]
 800dd64:	0f5b      	lsrs	r3, r3, #29
 800dd66:	b2da      	uxtb	r2, r3
 800dd68:	250c      	movs	r5, #12
 800dd6a:	197b      	adds	r3, r7, r5
 800dd6c:	2107      	movs	r1, #7
 800dd6e:	400a      	ands	r2, r1
 800dd70:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dd72:	183b      	adds	r3, r7, r0
 800dd74:	781b      	ldrb	r3, [r3, #0]
 800dd76:	197a      	adds	r2, r7, r5
 800dd78:	7812      	ldrb	r2, [r2, #0]
 800dd7a:	4914      	ldr	r1, [pc, #80]	@ (800ddcc <UARTEx_SetNbDataToProcess+0xb4>)
 800dd7c:	5c8a      	ldrb	r2, [r1, r2]
 800dd7e:	435a      	muls	r2, r3
 800dd80:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800dd82:	197b      	adds	r3, r7, r5
 800dd84:	781b      	ldrb	r3, [r3, #0]
 800dd86:	4a12      	ldr	r2, [pc, #72]	@ (800ddd0 <UARTEx_SetNbDataToProcess+0xb8>)
 800dd88:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dd8a:	0019      	movs	r1, r3
 800dd8c:	f7f2 fa6c 	bl	8000268 <__divsi3>
 800dd90:	0003      	movs	r3, r0
 800dd92:	b299      	uxth	r1, r3
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	226a      	movs	r2, #106	@ 0x6a
 800dd98:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dd9a:	19bb      	adds	r3, r7, r6
 800dd9c:	781b      	ldrb	r3, [r3, #0]
 800dd9e:	193a      	adds	r2, r7, r4
 800dda0:	7812      	ldrb	r2, [r2, #0]
 800dda2:	490a      	ldr	r1, [pc, #40]	@ (800ddcc <UARTEx_SetNbDataToProcess+0xb4>)
 800dda4:	5c8a      	ldrb	r2, [r1, r2]
 800dda6:	435a      	muls	r2, r3
 800dda8:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800ddaa:	193b      	adds	r3, r7, r4
 800ddac:	781b      	ldrb	r3, [r3, #0]
 800ddae:	4a08      	ldr	r2, [pc, #32]	@ (800ddd0 <UARTEx_SetNbDataToProcess+0xb8>)
 800ddb0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ddb2:	0019      	movs	r1, r3
 800ddb4:	f7f2 fa58 	bl	8000268 <__divsi3>
 800ddb8:	0003      	movs	r3, r0
 800ddba:	b299      	uxth	r1, r3
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	2268      	movs	r2, #104	@ 0x68
 800ddc0:	5299      	strh	r1, [r3, r2]
}
 800ddc2:	46c0      	nop			@ (mov r8, r8)
 800ddc4:	46bd      	mov	sp, r7
 800ddc6:	b005      	add	sp, #20
 800ddc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ddca:	46c0      	nop			@ (mov r8, r8)
 800ddcc:	0801c204 	.word	0x0801c204
 800ddd0:	0801c20c 	.word	0x0801c20c

0800ddd4 <sulp>:
 800ddd4:	b570      	push	{r4, r5, r6, lr}
 800ddd6:	0016      	movs	r6, r2
 800ddd8:	000d      	movs	r5, r1
 800ddda:	f002 f92b 	bl	8010034 <__ulp>
 800ddde:	2e00      	cmp	r6, #0
 800dde0:	d00d      	beq.n	800ddfe <sulp+0x2a>
 800dde2:	236b      	movs	r3, #107	@ 0x6b
 800dde4:	006a      	lsls	r2, r5, #1
 800dde6:	0d52      	lsrs	r2, r2, #21
 800dde8:	1a9b      	subs	r3, r3, r2
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	dd07      	ble.n	800ddfe <sulp+0x2a>
 800ddee:	2400      	movs	r4, #0
 800ddf0:	4a03      	ldr	r2, [pc, #12]	@ (800de00 <sulp+0x2c>)
 800ddf2:	051b      	lsls	r3, r3, #20
 800ddf4:	189d      	adds	r5, r3, r2
 800ddf6:	002b      	movs	r3, r5
 800ddf8:	0022      	movs	r2, r4
 800ddfa:	f7f4 fd8d 	bl	8002918 <__aeabi_dmul>
 800ddfe:	bd70      	pop	{r4, r5, r6, pc}
 800de00:	3ff00000 	.word	0x3ff00000

0800de04 <_strtod_l>:
 800de04:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de06:	b0a3      	sub	sp, #140	@ 0x8c
 800de08:	921b      	str	r2, [sp, #108]	@ 0x6c
 800de0a:	2200      	movs	r2, #0
 800de0c:	2600      	movs	r6, #0
 800de0e:	2700      	movs	r7, #0
 800de10:	9005      	str	r0, [sp, #20]
 800de12:	9109      	str	r1, [sp, #36]	@ 0x24
 800de14:	921e      	str	r2, [sp, #120]	@ 0x78
 800de16:	911d      	str	r1, [sp, #116]	@ 0x74
 800de18:	780a      	ldrb	r2, [r1, #0]
 800de1a:	2a2b      	cmp	r2, #43	@ 0x2b
 800de1c:	d053      	beq.n	800dec6 <_strtod_l+0xc2>
 800de1e:	d83f      	bhi.n	800dea0 <_strtod_l+0x9c>
 800de20:	2a0d      	cmp	r2, #13
 800de22:	d839      	bhi.n	800de98 <_strtod_l+0x94>
 800de24:	2a08      	cmp	r2, #8
 800de26:	d839      	bhi.n	800de9c <_strtod_l+0x98>
 800de28:	2a00      	cmp	r2, #0
 800de2a:	d042      	beq.n	800deb2 <_strtod_l+0xae>
 800de2c:	2200      	movs	r2, #0
 800de2e:	9212      	str	r2, [sp, #72]	@ 0x48
 800de30:	2100      	movs	r1, #0
 800de32:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 800de34:	910c      	str	r1, [sp, #48]	@ 0x30
 800de36:	782a      	ldrb	r2, [r5, #0]
 800de38:	2a30      	cmp	r2, #48	@ 0x30
 800de3a:	d000      	beq.n	800de3e <_strtod_l+0x3a>
 800de3c:	e083      	b.n	800df46 <_strtod_l+0x142>
 800de3e:	786a      	ldrb	r2, [r5, #1]
 800de40:	3120      	adds	r1, #32
 800de42:	438a      	bics	r2, r1
 800de44:	2a58      	cmp	r2, #88	@ 0x58
 800de46:	d000      	beq.n	800de4a <_strtod_l+0x46>
 800de48:	e073      	b.n	800df32 <_strtod_l+0x12e>
 800de4a:	9302      	str	r3, [sp, #8]
 800de4c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800de4e:	4a9b      	ldr	r2, [pc, #620]	@ (800e0bc <_strtod_l+0x2b8>)
 800de50:	9301      	str	r3, [sp, #4]
 800de52:	ab1e      	add	r3, sp, #120	@ 0x78
 800de54:	9300      	str	r3, [sp, #0]
 800de56:	9805      	ldr	r0, [sp, #20]
 800de58:	ab1f      	add	r3, sp, #124	@ 0x7c
 800de5a:	a91d      	add	r1, sp, #116	@ 0x74
 800de5c:	f001 f9ac 	bl	800f1b8 <__gethex>
 800de60:	230f      	movs	r3, #15
 800de62:	0002      	movs	r2, r0
 800de64:	401a      	ands	r2, r3
 800de66:	0004      	movs	r4, r0
 800de68:	9206      	str	r2, [sp, #24]
 800de6a:	4218      	tst	r0, r3
 800de6c:	d005      	beq.n	800de7a <_strtod_l+0x76>
 800de6e:	2a06      	cmp	r2, #6
 800de70:	d12b      	bne.n	800deca <_strtod_l+0xc6>
 800de72:	2300      	movs	r3, #0
 800de74:	3501      	adds	r5, #1
 800de76:	951d      	str	r5, [sp, #116]	@ 0x74
 800de78:	9312      	str	r3, [sp, #72]	@ 0x48
 800de7a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d002      	beq.n	800de86 <_strtod_l+0x82>
 800de80:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800de82:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800de84:	6013      	str	r3, [r2, #0]
 800de86:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d019      	beq.n	800dec0 <_strtod_l+0xbc>
 800de8c:	2380      	movs	r3, #128	@ 0x80
 800de8e:	0030      	movs	r0, r6
 800de90:	061b      	lsls	r3, r3, #24
 800de92:	18f9      	adds	r1, r7, r3
 800de94:	b023      	add	sp, #140	@ 0x8c
 800de96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de98:	2a20      	cmp	r2, #32
 800de9a:	d1c7      	bne.n	800de2c <_strtod_l+0x28>
 800de9c:	3101      	adds	r1, #1
 800de9e:	e7ba      	b.n	800de16 <_strtod_l+0x12>
 800dea0:	2a2d      	cmp	r2, #45	@ 0x2d
 800dea2:	d1c3      	bne.n	800de2c <_strtod_l+0x28>
 800dea4:	3a2c      	subs	r2, #44	@ 0x2c
 800dea6:	9212      	str	r2, [sp, #72]	@ 0x48
 800dea8:	1c4a      	adds	r2, r1, #1
 800deaa:	921d      	str	r2, [sp, #116]	@ 0x74
 800deac:	784a      	ldrb	r2, [r1, #1]
 800deae:	2a00      	cmp	r2, #0
 800deb0:	d1be      	bne.n	800de30 <_strtod_l+0x2c>
 800deb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800deb4:	931d      	str	r3, [sp, #116]	@ 0x74
 800deb6:	2300      	movs	r3, #0
 800deb8:	9312      	str	r3, [sp, #72]	@ 0x48
 800deba:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800debc:	2b00      	cmp	r3, #0
 800debe:	d1df      	bne.n	800de80 <_strtod_l+0x7c>
 800dec0:	0030      	movs	r0, r6
 800dec2:	0039      	movs	r1, r7
 800dec4:	e7e6      	b.n	800de94 <_strtod_l+0x90>
 800dec6:	2200      	movs	r2, #0
 800dec8:	e7ed      	b.n	800dea6 <_strtod_l+0xa2>
 800deca:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 800decc:	2a00      	cmp	r2, #0
 800dece:	d007      	beq.n	800dee0 <_strtod_l+0xdc>
 800ded0:	2135      	movs	r1, #53	@ 0x35
 800ded2:	a820      	add	r0, sp, #128	@ 0x80
 800ded4:	f002 f9a4 	bl	8010220 <__copybits>
 800ded8:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800deda:	9805      	ldr	r0, [sp, #20]
 800dedc:	f001 fd66 	bl	800f9ac <_Bfree>
 800dee0:	9806      	ldr	r0, [sp, #24]
 800dee2:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800dee4:	3801      	subs	r0, #1
 800dee6:	2804      	cmp	r0, #4
 800dee8:	d806      	bhi.n	800def8 <_strtod_l+0xf4>
 800deea:	f7f2 f91f 	bl	800012c <__gnu_thumb1_case_uqi>
 800deee:	0312      	.short	0x0312
 800def0:	1e1c      	.short	0x1e1c
 800def2:	12          	.byte	0x12
 800def3:	00          	.byte	0x00
 800def4:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800def6:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 800def8:	05e4      	lsls	r4, r4, #23
 800defa:	d502      	bpl.n	800df02 <_strtod_l+0xfe>
 800defc:	2380      	movs	r3, #128	@ 0x80
 800defe:	061b      	lsls	r3, r3, #24
 800df00:	431f      	orrs	r7, r3
 800df02:	4b6f      	ldr	r3, [pc, #444]	@ (800e0c0 <_strtod_l+0x2bc>)
 800df04:	423b      	tst	r3, r7
 800df06:	d1b8      	bne.n	800de7a <_strtod_l+0x76>
 800df08:	f001 f868 	bl	800efdc <__errno>
 800df0c:	2322      	movs	r3, #34	@ 0x22
 800df0e:	6003      	str	r3, [r0, #0]
 800df10:	e7b3      	b.n	800de7a <_strtod_l+0x76>
 800df12:	496c      	ldr	r1, [pc, #432]	@ (800e0c4 <_strtod_l+0x2c0>)
 800df14:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800df16:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800df18:	400a      	ands	r2, r1
 800df1a:	496b      	ldr	r1, [pc, #428]	@ (800e0c8 <_strtod_l+0x2c4>)
 800df1c:	185b      	adds	r3, r3, r1
 800df1e:	051b      	lsls	r3, r3, #20
 800df20:	431a      	orrs	r2, r3
 800df22:	0017      	movs	r7, r2
 800df24:	e7e8      	b.n	800def8 <_strtod_l+0xf4>
 800df26:	4f66      	ldr	r7, [pc, #408]	@ (800e0c0 <_strtod_l+0x2bc>)
 800df28:	e7e6      	b.n	800def8 <_strtod_l+0xf4>
 800df2a:	2601      	movs	r6, #1
 800df2c:	4f67      	ldr	r7, [pc, #412]	@ (800e0cc <_strtod_l+0x2c8>)
 800df2e:	4276      	negs	r6, r6
 800df30:	e7e2      	b.n	800def8 <_strtod_l+0xf4>
 800df32:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800df34:	1c5a      	adds	r2, r3, #1
 800df36:	921d      	str	r2, [sp, #116]	@ 0x74
 800df38:	785b      	ldrb	r3, [r3, #1]
 800df3a:	2b30      	cmp	r3, #48	@ 0x30
 800df3c:	d0f9      	beq.n	800df32 <_strtod_l+0x12e>
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d09b      	beq.n	800de7a <_strtod_l+0x76>
 800df42:	2301      	movs	r3, #1
 800df44:	930c      	str	r3, [sp, #48]	@ 0x30
 800df46:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800df48:	220a      	movs	r2, #10
 800df4a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800df4c:	2300      	movs	r3, #0
 800df4e:	9310      	str	r3, [sp, #64]	@ 0x40
 800df50:	930d      	str	r3, [sp, #52]	@ 0x34
 800df52:	9308      	str	r3, [sp, #32]
 800df54:	981d      	ldr	r0, [sp, #116]	@ 0x74
 800df56:	7804      	ldrb	r4, [r0, #0]
 800df58:	0023      	movs	r3, r4
 800df5a:	3b30      	subs	r3, #48	@ 0x30
 800df5c:	b2d9      	uxtb	r1, r3
 800df5e:	2909      	cmp	r1, #9
 800df60:	d927      	bls.n	800dfb2 <_strtod_l+0x1ae>
 800df62:	2201      	movs	r2, #1
 800df64:	495a      	ldr	r1, [pc, #360]	@ (800e0d0 <_strtod_l+0x2cc>)
 800df66:	f000 ffd9 	bl	800ef1c <strncmp>
 800df6a:	2800      	cmp	r0, #0
 800df6c:	d033      	beq.n	800dfd6 <_strtod_l+0x1d2>
 800df6e:	2000      	movs	r0, #0
 800df70:	0023      	movs	r3, r4
 800df72:	4684      	mov	ip, r0
 800df74:	9a08      	ldr	r2, [sp, #32]
 800df76:	900e      	str	r0, [sp, #56]	@ 0x38
 800df78:	9206      	str	r2, [sp, #24]
 800df7a:	2220      	movs	r2, #32
 800df7c:	0019      	movs	r1, r3
 800df7e:	4391      	bics	r1, r2
 800df80:	000a      	movs	r2, r1
 800df82:	2100      	movs	r1, #0
 800df84:	9107      	str	r1, [sp, #28]
 800df86:	2a45      	cmp	r2, #69	@ 0x45
 800df88:	d000      	beq.n	800df8c <_strtod_l+0x188>
 800df8a:	e0cb      	b.n	800e124 <_strtod_l+0x320>
 800df8c:	9b06      	ldr	r3, [sp, #24]
 800df8e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800df90:	4303      	orrs	r3, r0
 800df92:	4313      	orrs	r3, r2
 800df94:	428b      	cmp	r3, r1
 800df96:	d08c      	beq.n	800deb2 <_strtod_l+0xae>
 800df98:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800df9a:	9309      	str	r3, [sp, #36]	@ 0x24
 800df9c:	3301      	adds	r3, #1
 800df9e:	931d      	str	r3, [sp, #116]	@ 0x74
 800dfa0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dfa2:	785b      	ldrb	r3, [r3, #1]
 800dfa4:	2b2b      	cmp	r3, #43	@ 0x2b
 800dfa6:	d07b      	beq.n	800e0a0 <_strtod_l+0x29c>
 800dfa8:	000c      	movs	r4, r1
 800dfaa:	2b2d      	cmp	r3, #45	@ 0x2d
 800dfac:	d17e      	bne.n	800e0ac <_strtod_l+0x2a8>
 800dfae:	2401      	movs	r4, #1
 800dfb0:	e077      	b.n	800e0a2 <_strtod_l+0x29e>
 800dfb2:	9908      	ldr	r1, [sp, #32]
 800dfb4:	2908      	cmp	r1, #8
 800dfb6:	dc09      	bgt.n	800dfcc <_strtod_l+0x1c8>
 800dfb8:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800dfba:	4351      	muls	r1, r2
 800dfbc:	185b      	adds	r3, r3, r1
 800dfbe:	930d      	str	r3, [sp, #52]	@ 0x34
 800dfc0:	9b08      	ldr	r3, [sp, #32]
 800dfc2:	3001      	adds	r0, #1
 800dfc4:	3301      	adds	r3, #1
 800dfc6:	9308      	str	r3, [sp, #32]
 800dfc8:	901d      	str	r0, [sp, #116]	@ 0x74
 800dfca:	e7c3      	b.n	800df54 <_strtod_l+0x150>
 800dfcc:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800dfce:	4355      	muls	r5, r2
 800dfd0:	195b      	adds	r3, r3, r5
 800dfd2:	9310      	str	r3, [sp, #64]	@ 0x40
 800dfd4:	e7f4      	b.n	800dfc0 <_strtod_l+0x1bc>
 800dfd6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800dfd8:	1c5a      	adds	r2, r3, #1
 800dfda:	921d      	str	r2, [sp, #116]	@ 0x74
 800dfdc:	9a08      	ldr	r2, [sp, #32]
 800dfde:	785b      	ldrb	r3, [r3, #1]
 800dfe0:	2a00      	cmp	r2, #0
 800dfe2:	d03e      	beq.n	800e062 <_strtod_l+0x25e>
 800dfe4:	900e      	str	r0, [sp, #56]	@ 0x38
 800dfe6:	9206      	str	r2, [sp, #24]
 800dfe8:	001a      	movs	r2, r3
 800dfea:	3a30      	subs	r2, #48	@ 0x30
 800dfec:	2a09      	cmp	r2, #9
 800dfee:	d912      	bls.n	800e016 <_strtod_l+0x212>
 800dff0:	2201      	movs	r2, #1
 800dff2:	4694      	mov	ip, r2
 800dff4:	e7c1      	b.n	800df7a <_strtod_l+0x176>
 800dff6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800dff8:	3001      	adds	r0, #1
 800dffa:	1c5a      	adds	r2, r3, #1
 800dffc:	921d      	str	r2, [sp, #116]	@ 0x74
 800dffe:	785b      	ldrb	r3, [r3, #1]
 800e000:	2b30      	cmp	r3, #48	@ 0x30
 800e002:	d0f8      	beq.n	800dff6 <_strtod_l+0x1f2>
 800e004:	001a      	movs	r2, r3
 800e006:	3a31      	subs	r2, #49	@ 0x31
 800e008:	2a08      	cmp	r2, #8
 800e00a:	d844      	bhi.n	800e096 <_strtod_l+0x292>
 800e00c:	900e      	str	r0, [sp, #56]	@ 0x38
 800e00e:	2000      	movs	r0, #0
 800e010:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800e012:	9006      	str	r0, [sp, #24]
 800e014:	9213      	str	r2, [sp, #76]	@ 0x4c
 800e016:	001c      	movs	r4, r3
 800e018:	1c42      	adds	r2, r0, #1
 800e01a:	3c30      	subs	r4, #48	@ 0x30
 800e01c:	2b30      	cmp	r3, #48	@ 0x30
 800e01e:	d01a      	beq.n	800e056 <_strtod_l+0x252>
 800e020:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e022:	9906      	ldr	r1, [sp, #24]
 800e024:	189b      	adds	r3, r3, r2
 800e026:	930e      	str	r3, [sp, #56]	@ 0x38
 800e028:	230a      	movs	r3, #10
 800e02a:	469c      	mov	ip, r3
 800e02c:	9d06      	ldr	r5, [sp, #24]
 800e02e:	1c4b      	adds	r3, r1, #1
 800e030:	1b5d      	subs	r5, r3, r5
 800e032:	42aa      	cmp	r2, r5
 800e034:	dc17      	bgt.n	800e066 <_strtod_l+0x262>
 800e036:	43c3      	mvns	r3, r0
 800e038:	9a06      	ldr	r2, [sp, #24]
 800e03a:	17db      	asrs	r3, r3, #31
 800e03c:	4003      	ands	r3, r0
 800e03e:	18d1      	adds	r1, r2, r3
 800e040:	3201      	adds	r2, #1
 800e042:	18d3      	adds	r3, r2, r3
 800e044:	9306      	str	r3, [sp, #24]
 800e046:	2908      	cmp	r1, #8
 800e048:	dc1c      	bgt.n	800e084 <_strtod_l+0x280>
 800e04a:	230a      	movs	r3, #10
 800e04c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e04e:	4353      	muls	r3, r2
 800e050:	2200      	movs	r2, #0
 800e052:	18e3      	adds	r3, r4, r3
 800e054:	930d      	str	r3, [sp, #52]	@ 0x34
 800e056:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e058:	0010      	movs	r0, r2
 800e05a:	1c59      	adds	r1, r3, #1
 800e05c:	911d      	str	r1, [sp, #116]	@ 0x74
 800e05e:	785b      	ldrb	r3, [r3, #1]
 800e060:	e7c2      	b.n	800dfe8 <_strtod_l+0x1e4>
 800e062:	9808      	ldr	r0, [sp, #32]
 800e064:	e7cc      	b.n	800e000 <_strtod_l+0x1fc>
 800e066:	2908      	cmp	r1, #8
 800e068:	dc05      	bgt.n	800e076 <_strtod_l+0x272>
 800e06a:	4665      	mov	r5, ip
 800e06c:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800e06e:	4369      	muls	r1, r5
 800e070:	910d      	str	r1, [sp, #52]	@ 0x34
 800e072:	0019      	movs	r1, r3
 800e074:	e7da      	b.n	800e02c <_strtod_l+0x228>
 800e076:	2b10      	cmp	r3, #16
 800e078:	dcfb      	bgt.n	800e072 <_strtod_l+0x26e>
 800e07a:	4661      	mov	r1, ip
 800e07c:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800e07e:	434d      	muls	r5, r1
 800e080:	9510      	str	r5, [sp, #64]	@ 0x40
 800e082:	e7f6      	b.n	800e072 <_strtod_l+0x26e>
 800e084:	2200      	movs	r2, #0
 800e086:	290f      	cmp	r1, #15
 800e088:	dce5      	bgt.n	800e056 <_strtod_l+0x252>
 800e08a:	230a      	movs	r3, #10
 800e08c:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800e08e:	435d      	muls	r5, r3
 800e090:	1963      	adds	r3, r4, r5
 800e092:	9310      	str	r3, [sp, #64]	@ 0x40
 800e094:	e7df      	b.n	800e056 <_strtod_l+0x252>
 800e096:	2200      	movs	r2, #0
 800e098:	920e      	str	r2, [sp, #56]	@ 0x38
 800e09a:	9206      	str	r2, [sp, #24]
 800e09c:	3201      	adds	r2, #1
 800e09e:	e7a8      	b.n	800dff2 <_strtod_l+0x1ee>
 800e0a0:	2400      	movs	r4, #0
 800e0a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e0a4:	3302      	adds	r3, #2
 800e0a6:	931d      	str	r3, [sp, #116]	@ 0x74
 800e0a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e0aa:	789b      	ldrb	r3, [r3, #2]
 800e0ac:	001a      	movs	r2, r3
 800e0ae:	3a30      	subs	r2, #48	@ 0x30
 800e0b0:	2a09      	cmp	r2, #9
 800e0b2:	d913      	bls.n	800e0dc <_strtod_l+0x2d8>
 800e0b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e0b6:	921d      	str	r2, [sp, #116]	@ 0x74
 800e0b8:	2200      	movs	r2, #0
 800e0ba:	e032      	b.n	800e122 <_strtod_l+0x31e>
 800e0bc:	0801c390 	.word	0x0801c390
 800e0c0:	7ff00000 	.word	0x7ff00000
 800e0c4:	ffefffff 	.word	0xffefffff
 800e0c8:	00000433 	.word	0x00000433
 800e0cc:	7fffffff 	.word	0x7fffffff
 800e0d0:	0801c214 	.word	0x0801c214
 800e0d4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e0d6:	1c5a      	adds	r2, r3, #1
 800e0d8:	921d      	str	r2, [sp, #116]	@ 0x74
 800e0da:	785b      	ldrb	r3, [r3, #1]
 800e0dc:	2b30      	cmp	r3, #48	@ 0x30
 800e0de:	d0f9      	beq.n	800e0d4 <_strtod_l+0x2d0>
 800e0e0:	2200      	movs	r2, #0
 800e0e2:	9207      	str	r2, [sp, #28]
 800e0e4:	001a      	movs	r2, r3
 800e0e6:	3a31      	subs	r2, #49	@ 0x31
 800e0e8:	2a08      	cmp	r2, #8
 800e0ea:	d81b      	bhi.n	800e124 <_strtod_l+0x320>
 800e0ec:	3b30      	subs	r3, #48	@ 0x30
 800e0ee:	001a      	movs	r2, r3
 800e0f0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e0f2:	9307      	str	r3, [sp, #28]
 800e0f4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e0f6:	1c59      	adds	r1, r3, #1
 800e0f8:	911d      	str	r1, [sp, #116]	@ 0x74
 800e0fa:	785b      	ldrb	r3, [r3, #1]
 800e0fc:	001d      	movs	r5, r3
 800e0fe:	3d30      	subs	r5, #48	@ 0x30
 800e100:	2d09      	cmp	r5, #9
 800e102:	d93a      	bls.n	800e17a <_strtod_l+0x376>
 800e104:	9d07      	ldr	r5, [sp, #28]
 800e106:	1b49      	subs	r1, r1, r5
 800e108:	000d      	movs	r5, r1
 800e10a:	49b3      	ldr	r1, [pc, #716]	@ (800e3d8 <_strtod_l+0x5d4>)
 800e10c:	9107      	str	r1, [sp, #28]
 800e10e:	2d08      	cmp	r5, #8
 800e110:	dc03      	bgt.n	800e11a <_strtod_l+0x316>
 800e112:	9207      	str	r2, [sp, #28]
 800e114:	428a      	cmp	r2, r1
 800e116:	dd00      	ble.n	800e11a <_strtod_l+0x316>
 800e118:	9107      	str	r1, [sp, #28]
 800e11a:	2c00      	cmp	r4, #0
 800e11c:	d002      	beq.n	800e124 <_strtod_l+0x320>
 800e11e:	9a07      	ldr	r2, [sp, #28]
 800e120:	4252      	negs	r2, r2
 800e122:	9207      	str	r2, [sp, #28]
 800e124:	9a06      	ldr	r2, [sp, #24]
 800e126:	2a00      	cmp	r2, #0
 800e128:	d14b      	bne.n	800e1c2 <_strtod_l+0x3be>
 800e12a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e12c:	4310      	orrs	r0, r2
 800e12e:	d000      	beq.n	800e132 <_strtod_l+0x32e>
 800e130:	e6a3      	b.n	800de7a <_strtod_l+0x76>
 800e132:	4662      	mov	r2, ip
 800e134:	2a00      	cmp	r2, #0
 800e136:	d000      	beq.n	800e13a <_strtod_l+0x336>
 800e138:	e6bb      	b.n	800deb2 <_strtod_l+0xae>
 800e13a:	2b69      	cmp	r3, #105	@ 0x69
 800e13c:	d025      	beq.n	800e18a <_strtod_l+0x386>
 800e13e:	dc21      	bgt.n	800e184 <_strtod_l+0x380>
 800e140:	2b49      	cmp	r3, #73	@ 0x49
 800e142:	d022      	beq.n	800e18a <_strtod_l+0x386>
 800e144:	2b4e      	cmp	r3, #78	@ 0x4e
 800e146:	d000      	beq.n	800e14a <_strtod_l+0x346>
 800e148:	e6b3      	b.n	800deb2 <_strtod_l+0xae>
 800e14a:	49a4      	ldr	r1, [pc, #656]	@ (800e3dc <_strtod_l+0x5d8>)
 800e14c:	a81d      	add	r0, sp, #116	@ 0x74
 800e14e:	f001 fa69 	bl	800f624 <__match>
 800e152:	2800      	cmp	r0, #0
 800e154:	d100      	bne.n	800e158 <_strtod_l+0x354>
 800e156:	e6ac      	b.n	800deb2 <_strtod_l+0xae>
 800e158:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e15a:	781b      	ldrb	r3, [r3, #0]
 800e15c:	2b28      	cmp	r3, #40	@ 0x28
 800e15e:	d12a      	bne.n	800e1b6 <_strtod_l+0x3b2>
 800e160:	499f      	ldr	r1, [pc, #636]	@ (800e3e0 <_strtod_l+0x5dc>)
 800e162:	aa20      	add	r2, sp, #128	@ 0x80
 800e164:	a81d      	add	r0, sp, #116	@ 0x74
 800e166:	f001 fa71 	bl	800f64c <__hexnan>
 800e16a:	2805      	cmp	r0, #5
 800e16c:	d123      	bne.n	800e1b6 <_strtod_l+0x3b2>
 800e16e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e170:	4a9c      	ldr	r2, [pc, #624]	@ (800e3e4 <_strtod_l+0x5e0>)
 800e172:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800e174:	431a      	orrs	r2, r3
 800e176:	0017      	movs	r7, r2
 800e178:	e67f      	b.n	800de7a <_strtod_l+0x76>
 800e17a:	210a      	movs	r1, #10
 800e17c:	434a      	muls	r2, r1
 800e17e:	18d2      	adds	r2, r2, r3
 800e180:	3a30      	subs	r2, #48	@ 0x30
 800e182:	e7b7      	b.n	800e0f4 <_strtod_l+0x2f0>
 800e184:	2b6e      	cmp	r3, #110	@ 0x6e
 800e186:	d0e0      	beq.n	800e14a <_strtod_l+0x346>
 800e188:	e693      	b.n	800deb2 <_strtod_l+0xae>
 800e18a:	4997      	ldr	r1, [pc, #604]	@ (800e3e8 <_strtod_l+0x5e4>)
 800e18c:	a81d      	add	r0, sp, #116	@ 0x74
 800e18e:	f001 fa49 	bl	800f624 <__match>
 800e192:	2800      	cmp	r0, #0
 800e194:	d100      	bne.n	800e198 <_strtod_l+0x394>
 800e196:	e68c      	b.n	800deb2 <_strtod_l+0xae>
 800e198:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e19a:	4994      	ldr	r1, [pc, #592]	@ (800e3ec <_strtod_l+0x5e8>)
 800e19c:	3b01      	subs	r3, #1
 800e19e:	a81d      	add	r0, sp, #116	@ 0x74
 800e1a0:	931d      	str	r3, [sp, #116]	@ 0x74
 800e1a2:	f001 fa3f 	bl	800f624 <__match>
 800e1a6:	2800      	cmp	r0, #0
 800e1a8:	d102      	bne.n	800e1b0 <_strtod_l+0x3ac>
 800e1aa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e1ac:	3301      	adds	r3, #1
 800e1ae:	931d      	str	r3, [sp, #116]	@ 0x74
 800e1b0:	2600      	movs	r6, #0
 800e1b2:	4f8c      	ldr	r7, [pc, #560]	@ (800e3e4 <_strtod_l+0x5e0>)
 800e1b4:	e661      	b.n	800de7a <_strtod_l+0x76>
 800e1b6:	488e      	ldr	r0, [pc, #568]	@ (800e3f0 <_strtod_l+0x5ec>)
 800e1b8:	f000 ff46 	bl	800f048 <nan>
 800e1bc:	0006      	movs	r6, r0
 800e1be:	000f      	movs	r7, r1
 800e1c0:	e65b      	b.n	800de7a <_strtod_l+0x76>
 800e1c2:	9b07      	ldr	r3, [sp, #28]
 800e1c4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e1c6:	1a9b      	subs	r3, r3, r2
 800e1c8:	930c      	str	r3, [sp, #48]	@ 0x30
 800e1ca:	9b08      	ldr	r3, [sp, #32]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d101      	bne.n	800e1d4 <_strtod_l+0x3d0>
 800e1d0:	9b06      	ldr	r3, [sp, #24]
 800e1d2:	9308      	str	r3, [sp, #32]
 800e1d4:	9c06      	ldr	r4, [sp, #24]
 800e1d6:	2c10      	cmp	r4, #16
 800e1d8:	dd00      	ble.n	800e1dc <_strtod_l+0x3d8>
 800e1da:	2410      	movs	r4, #16
 800e1dc:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800e1de:	f7f5 fb17 	bl	8003810 <__aeabi_ui2d>
 800e1e2:	9b06      	ldr	r3, [sp, #24]
 800e1e4:	0006      	movs	r6, r0
 800e1e6:	000f      	movs	r7, r1
 800e1e8:	2b09      	cmp	r3, #9
 800e1ea:	dc13      	bgt.n	800e214 <_strtod_l+0x410>
 800e1ec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d100      	bne.n	800e1f4 <_strtod_l+0x3f0>
 800e1f2:	e642      	b.n	800de7a <_strtod_l+0x76>
 800e1f4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	dc00      	bgt.n	800e1fc <_strtod_l+0x3f8>
 800e1fa:	e07e      	b.n	800e2fa <_strtod_l+0x4f6>
 800e1fc:	2b16      	cmp	r3, #22
 800e1fe:	dc63      	bgt.n	800e2c8 <_strtod_l+0x4c4>
 800e200:	497c      	ldr	r1, [pc, #496]	@ (800e3f4 <_strtod_l+0x5f0>)
 800e202:	00db      	lsls	r3, r3, #3
 800e204:	18c9      	adds	r1, r1, r3
 800e206:	0032      	movs	r2, r6
 800e208:	6808      	ldr	r0, [r1, #0]
 800e20a:	6849      	ldr	r1, [r1, #4]
 800e20c:	003b      	movs	r3, r7
 800e20e:	f7f4 fb83 	bl	8002918 <__aeabi_dmul>
 800e212:	e7d3      	b.n	800e1bc <_strtod_l+0x3b8>
 800e214:	0022      	movs	r2, r4
 800e216:	4b77      	ldr	r3, [pc, #476]	@ (800e3f4 <_strtod_l+0x5f0>)
 800e218:	3a09      	subs	r2, #9
 800e21a:	00d2      	lsls	r2, r2, #3
 800e21c:	189b      	adds	r3, r3, r2
 800e21e:	681a      	ldr	r2, [r3, #0]
 800e220:	685b      	ldr	r3, [r3, #4]
 800e222:	f7f4 fb79 	bl	8002918 <__aeabi_dmul>
 800e226:	0006      	movs	r6, r0
 800e228:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800e22a:	000f      	movs	r7, r1
 800e22c:	f7f5 faf0 	bl	8003810 <__aeabi_ui2d>
 800e230:	000b      	movs	r3, r1
 800e232:	0002      	movs	r2, r0
 800e234:	0039      	movs	r1, r7
 800e236:	0030      	movs	r0, r6
 800e238:	f7f3 fb6e 	bl	8001918 <__aeabi_dadd>
 800e23c:	9b06      	ldr	r3, [sp, #24]
 800e23e:	0006      	movs	r6, r0
 800e240:	000f      	movs	r7, r1
 800e242:	2b0f      	cmp	r3, #15
 800e244:	ddd2      	ble.n	800e1ec <_strtod_l+0x3e8>
 800e246:	9b06      	ldr	r3, [sp, #24]
 800e248:	1b1c      	subs	r4, r3, r4
 800e24a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e24c:	18e4      	adds	r4, r4, r3
 800e24e:	2c00      	cmp	r4, #0
 800e250:	dc00      	bgt.n	800e254 <_strtod_l+0x450>
 800e252:	e09b      	b.n	800e38c <_strtod_l+0x588>
 800e254:	220f      	movs	r2, #15
 800e256:	0023      	movs	r3, r4
 800e258:	4013      	ands	r3, r2
 800e25a:	4214      	tst	r4, r2
 800e25c:	d00a      	beq.n	800e274 <_strtod_l+0x470>
 800e25e:	4965      	ldr	r1, [pc, #404]	@ (800e3f4 <_strtod_l+0x5f0>)
 800e260:	00db      	lsls	r3, r3, #3
 800e262:	18c9      	adds	r1, r1, r3
 800e264:	0032      	movs	r2, r6
 800e266:	6808      	ldr	r0, [r1, #0]
 800e268:	6849      	ldr	r1, [r1, #4]
 800e26a:	003b      	movs	r3, r7
 800e26c:	f7f4 fb54 	bl	8002918 <__aeabi_dmul>
 800e270:	0006      	movs	r6, r0
 800e272:	000f      	movs	r7, r1
 800e274:	230f      	movs	r3, #15
 800e276:	439c      	bics	r4, r3
 800e278:	d073      	beq.n	800e362 <_strtod_l+0x55e>
 800e27a:	3326      	adds	r3, #38	@ 0x26
 800e27c:	33ff      	adds	r3, #255	@ 0xff
 800e27e:	429c      	cmp	r4, r3
 800e280:	dd4b      	ble.n	800e31a <_strtod_l+0x516>
 800e282:	2300      	movs	r3, #0
 800e284:	9306      	str	r3, [sp, #24]
 800e286:	9307      	str	r3, [sp, #28]
 800e288:	930d      	str	r3, [sp, #52]	@ 0x34
 800e28a:	9308      	str	r3, [sp, #32]
 800e28c:	2322      	movs	r3, #34	@ 0x22
 800e28e:	2600      	movs	r6, #0
 800e290:	9a05      	ldr	r2, [sp, #20]
 800e292:	4f54      	ldr	r7, [pc, #336]	@ (800e3e4 <_strtod_l+0x5e0>)
 800e294:	6013      	str	r3, [r2, #0]
 800e296:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e298:	42b3      	cmp	r3, r6
 800e29a:	d100      	bne.n	800e29e <_strtod_l+0x49a>
 800e29c:	e5ed      	b.n	800de7a <_strtod_l+0x76>
 800e29e:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800e2a0:	9805      	ldr	r0, [sp, #20]
 800e2a2:	f001 fb83 	bl	800f9ac <_Bfree>
 800e2a6:	9908      	ldr	r1, [sp, #32]
 800e2a8:	9805      	ldr	r0, [sp, #20]
 800e2aa:	f001 fb7f 	bl	800f9ac <_Bfree>
 800e2ae:	9907      	ldr	r1, [sp, #28]
 800e2b0:	9805      	ldr	r0, [sp, #20]
 800e2b2:	f001 fb7b 	bl	800f9ac <_Bfree>
 800e2b6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800e2b8:	9805      	ldr	r0, [sp, #20]
 800e2ba:	f001 fb77 	bl	800f9ac <_Bfree>
 800e2be:	9906      	ldr	r1, [sp, #24]
 800e2c0:	9805      	ldr	r0, [sp, #20]
 800e2c2:	f001 fb73 	bl	800f9ac <_Bfree>
 800e2c6:	e5d8      	b.n	800de7a <_strtod_l+0x76>
 800e2c8:	2325      	movs	r3, #37	@ 0x25
 800e2ca:	9a06      	ldr	r2, [sp, #24]
 800e2cc:	1a9b      	subs	r3, r3, r2
 800e2ce:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e2d0:	4293      	cmp	r3, r2
 800e2d2:	dbb8      	blt.n	800e246 <_strtod_l+0x442>
 800e2d4:	240f      	movs	r4, #15
 800e2d6:	9b06      	ldr	r3, [sp, #24]
 800e2d8:	4d46      	ldr	r5, [pc, #280]	@ (800e3f4 <_strtod_l+0x5f0>)
 800e2da:	1ae4      	subs	r4, r4, r3
 800e2dc:	00e1      	lsls	r1, r4, #3
 800e2de:	1869      	adds	r1, r5, r1
 800e2e0:	0032      	movs	r2, r6
 800e2e2:	6808      	ldr	r0, [r1, #0]
 800e2e4:	6849      	ldr	r1, [r1, #4]
 800e2e6:	003b      	movs	r3, r7
 800e2e8:	f7f4 fb16 	bl	8002918 <__aeabi_dmul>
 800e2ec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e2ee:	1b1c      	subs	r4, r3, r4
 800e2f0:	00e4      	lsls	r4, r4, #3
 800e2f2:	192d      	adds	r5, r5, r4
 800e2f4:	682a      	ldr	r2, [r5, #0]
 800e2f6:	686b      	ldr	r3, [r5, #4]
 800e2f8:	e789      	b.n	800e20e <_strtod_l+0x40a>
 800e2fa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e2fc:	3316      	adds	r3, #22
 800e2fe:	dba2      	blt.n	800e246 <_strtod_l+0x442>
 800e300:	9907      	ldr	r1, [sp, #28]
 800e302:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e304:	4b3b      	ldr	r3, [pc, #236]	@ (800e3f4 <_strtod_l+0x5f0>)
 800e306:	1a52      	subs	r2, r2, r1
 800e308:	00d2      	lsls	r2, r2, #3
 800e30a:	189b      	adds	r3, r3, r2
 800e30c:	0030      	movs	r0, r6
 800e30e:	681a      	ldr	r2, [r3, #0]
 800e310:	685b      	ldr	r3, [r3, #4]
 800e312:	0039      	movs	r1, r7
 800e314:	f7f3 fec6 	bl	80020a4 <__aeabi_ddiv>
 800e318:	e750      	b.n	800e1bc <_strtod_l+0x3b8>
 800e31a:	2300      	movs	r3, #0
 800e31c:	0030      	movs	r0, r6
 800e31e:	0039      	movs	r1, r7
 800e320:	4d35      	ldr	r5, [pc, #212]	@ (800e3f8 <_strtod_l+0x5f4>)
 800e322:	1124      	asrs	r4, r4, #4
 800e324:	9309      	str	r3, [sp, #36]	@ 0x24
 800e326:	2c01      	cmp	r4, #1
 800e328:	dc1e      	bgt.n	800e368 <_strtod_l+0x564>
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d001      	beq.n	800e332 <_strtod_l+0x52e>
 800e32e:	0006      	movs	r6, r0
 800e330:	000f      	movs	r7, r1
 800e332:	4b32      	ldr	r3, [pc, #200]	@ (800e3fc <_strtod_l+0x5f8>)
 800e334:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e336:	18ff      	adds	r7, r7, r3
 800e338:	4b2f      	ldr	r3, [pc, #188]	@ (800e3f8 <_strtod_l+0x5f4>)
 800e33a:	00d5      	lsls	r5, r2, #3
 800e33c:	195d      	adds	r5, r3, r5
 800e33e:	0032      	movs	r2, r6
 800e340:	6828      	ldr	r0, [r5, #0]
 800e342:	6869      	ldr	r1, [r5, #4]
 800e344:	003b      	movs	r3, r7
 800e346:	f7f4 fae7 	bl	8002918 <__aeabi_dmul>
 800e34a:	4b26      	ldr	r3, [pc, #152]	@ (800e3e4 <_strtod_l+0x5e0>)
 800e34c:	4a2c      	ldr	r2, [pc, #176]	@ (800e400 <_strtod_l+0x5fc>)
 800e34e:	0006      	movs	r6, r0
 800e350:	400b      	ands	r3, r1
 800e352:	4293      	cmp	r3, r2
 800e354:	d895      	bhi.n	800e282 <_strtod_l+0x47e>
 800e356:	4a2b      	ldr	r2, [pc, #172]	@ (800e404 <_strtod_l+0x600>)
 800e358:	4293      	cmp	r3, r2
 800e35a:	d913      	bls.n	800e384 <_strtod_l+0x580>
 800e35c:	2601      	movs	r6, #1
 800e35e:	4f2a      	ldr	r7, [pc, #168]	@ (800e408 <_strtod_l+0x604>)
 800e360:	4276      	negs	r6, r6
 800e362:	2300      	movs	r3, #0
 800e364:	9309      	str	r3, [sp, #36]	@ 0x24
 800e366:	e086      	b.n	800e476 <_strtod_l+0x672>
 800e368:	2201      	movs	r2, #1
 800e36a:	4214      	tst	r4, r2
 800e36c:	d004      	beq.n	800e378 <_strtod_l+0x574>
 800e36e:	682a      	ldr	r2, [r5, #0]
 800e370:	686b      	ldr	r3, [r5, #4]
 800e372:	f7f4 fad1 	bl	8002918 <__aeabi_dmul>
 800e376:	2301      	movs	r3, #1
 800e378:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e37a:	1064      	asrs	r4, r4, #1
 800e37c:	3201      	adds	r2, #1
 800e37e:	9209      	str	r2, [sp, #36]	@ 0x24
 800e380:	3508      	adds	r5, #8
 800e382:	e7d0      	b.n	800e326 <_strtod_l+0x522>
 800e384:	23d4      	movs	r3, #212	@ 0xd4
 800e386:	049b      	lsls	r3, r3, #18
 800e388:	18cf      	adds	r7, r1, r3
 800e38a:	e7ea      	b.n	800e362 <_strtod_l+0x55e>
 800e38c:	2c00      	cmp	r4, #0
 800e38e:	d0e8      	beq.n	800e362 <_strtod_l+0x55e>
 800e390:	4264      	negs	r4, r4
 800e392:	230f      	movs	r3, #15
 800e394:	0022      	movs	r2, r4
 800e396:	401a      	ands	r2, r3
 800e398:	421c      	tst	r4, r3
 800e39a:	d00a      	beq.n	800e3b2 <_strtod_l+0x5ae>
 800e39c:	4b15      	ldr	r3, [pc, #84]	@ (800e3f4 <_strtod_l+0x5f0>)
 800e39e:	00d2      	lsls	r2, r2, #3
 800e3a0:	189b      	adds	r3, r3, r2
 800e3a2:	0030      	movs	r0, r6
 800e3a4:	681a      	ldr	r2, [r3, #0]
 800e3a6:	685b      	ldr	r3, [r3, #4]
 800e3a8:	0039      	movs	r1, r7
 800e3aa:	f7f3 fe7b 	bl	80020a4 <__aeabi_ddiv>
 800e3ae:	0006      	movs	r6, r0
 800e3b0:	000f      	movs	r7, r1
 800e3b2:	1124      	asrs	r4, r4, #4
 800e3b4:	d0d5      	beq.n	800e362 <_strtod_l+0x55e>
 800e3b6:	2c1f      	cmp	r4, #31
 800e3b8:	dd28      	ble.n	800e40c <_strtod_l+0x608>
 800e3ba:	2300      	movs	r3, #0
 800e3bc:	9306      	str	r3, [sp, #24]
 800e3be:	9307      	str	r3, [sp, #28]
 800e3c0:	930d      	str	r3, [sp, #52]	@ 0x34
 800e3c2:	9308      	str	r3, [sp, #32]
 800e3c4:	2322      	movs	r3, #34	@ 0x22
 800e3c6:	9a05      	ldr	r2, [sp, #20]
 800e3c8:	2600      	movs	r6, #0
 800e3ca:	6013      	str	r3, [r2, #0]
 800e3cc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e3ce:	2700      	movs	r7, #0
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d000      	beq.n	800e3d6 <_strtod_l+0x5d2>
 800e3d4:	e763      	b.n	800e29e <_strtod_l+0x49a>
 800e3d6:	e550      	b.n	800de7a <_strtod_l+0x76>
 800e3d8:	00004e1f 	.word	0x00004e1f
 800e3dc:	0801c21f 	.word	0x0801c21f
 800e3e0:	0801c37c 	.word	0x0801c37c
 800e3e4:	7ff00000 	.word	0x7ff00000
 800e3e8:	0801c216 	.word	0x0801c216
 800e3ec:	0801c219 	.word	0x0801c219
 800e3f0:	0801c379 	.word	0x0801c379
 800e3f4:	0801c508 	.word	0x0801c508
 800e3f8:	0801c4e0 	.word	0x0801c4e0
 800e3fc:	fcb00000 	.word	0xfcb00000
 800e400:	7ca00000 	.word	0x7ca00000
 800e404:	7c900000 	.word	0x7c900000
 800e408:	7fefffff 	.word	0x7fefffff
 800e40c:	2310      	movs	r3, #16
 800e40e:	0022      	movs	r2, r4
 800e410:	401a      	ands	r2, r3
 800e412:	9209      	str	r2, [sp, #36]	@ 0x24
 800e414:	421c      	tst	r4, r3
 800e416:	d001      	beq.n	800e41c <_strtod_l+0x618>
 800e418:	335a      	adds	r3, #90	@ 0x5a
 800e41a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e41c:	0030      	movs	r0, r6
 800e41e:	0039      	movs	r1, r7
 800e420:	2300      	movs	r3, #0
 800e422:	4dc0      	ldr	r5, [pc, #768]	@ (800e724 <_strtod_l+0x920>)
 800e424:	2201      	movs	r2, #1
 800e426:	4214      	tst	r4, r2
 800e428:	d004      	beq.n	800e434 <_strtod_l+0x630>
 800e42a:	682a      	ldr	r2, [r5, #0]
 800e42c:	686b      	ldr	r3, [r5, #4]
 800e42e:	f7f4 fa73 	bl	8002918 <__aeabi_dmul>
 800e432:	2301      	movs	r3, #1
 800e434:	1064      	asrs	r4, r4, #1
 800e436:	3508      	adds	r5, #8
 800e438:	2c00      	cmp	r4, #0
 800e43a:	d1f3      	bne.n	800e424 <_strtod_l+0x620>
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d001      	beq.n	800e444 <_strtod_l+0x640>
 800e440:	0006      	movs	r6, r0
 800e442:	000f      	movs	r7, r1
 800e444:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e446:	2b00      	cmp	r3, #0
 800e448:	d00d      	beq.n	800e466 <_strtod_l+0x662>
 800e44a:	236b      	movs	r3, #107	@ 0x6b
 800e44c:	007a      	lsls	r2, r7, #1
 800e44e:	0d52      	lsrs	r2, r2, #21
 800e450:	0039      	movs	r1, r7
 800e452:	1a9b      	subs	r3, r3, r2
 800e454:	2b00      	cmp	r3, #0
 800e456:	dd06      	ble.n	800e466 <_strtod_l+0x662>
 800e458:	2b1f      	cmp	r3, #31
 800e45a:	dd5c      	ble.n	800e516 <_strtod_l+0x712>
 800e45c:	2600      	movs	r6, #0
 800e45e:	2b34      	cmp	r3, #52	@ 0x34
 800e460:	dd52      	ble.n	800e508 <_strtod_l+0x704>
 800e462:	27dc      	movs	r7, #220	@ 0xdc
 800e464:	04bf      	lsls	r7, r7, #18
 800e466:	2200      	movs	r2, #0
 800e468:	2300      	movs	r3, #0
 800e46a:	0030      	movs	r0, r6
 800e46c:	0039      	movs	r1, r7
 800e46e:	f7f1 fff7 	bl	8000460 <__aeabi_dcmpeq>
 800e472:	2800      	cmp	r0, #0
 800e474:	d1a1      	bne.n	800e3ba <_strtod_l+0x5b6>
 800e476:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e478:	9a08      	ldr	r2, [sp, #32]
 800e47a:	9300      	str	r3, [sp, #0]
 800e47c:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800e47e:	9b06      	ldr	r3, [sp, #24]
 800e480:	9805      	ldr	r0, [sp, #20]
 800e482:	f001 fafb 	bl	800fa7c <__s2b>
 800e486:	900d      	str	r0, [sp, #52]	@ 0x34
 800e488:	2800      	cmp	r0, #0
 800e48a:	d100      	bne.n	800e48e <_strtod_l+0x68a>
 800e48c:	e6f9      	b.n	800e282 <_strtod_l+0x47e>
 800e48e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e490:	9907      	ldr	r1, [sp, #28]
 800e492:	43db      	mvns	r3, r3
 800e494:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e496:	17db      	asrs	r3, r3, #31
 800e498:	1a52      	subs	r2, r2, r1
 800e49a:	9214      	str	r2, [sp, #80]	@ 0x50
 800e49c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e49e:	9914      	ldr	r1, [sp, #80]	@ 0x50
 800e4a0:	17d2      	asrs	r2, r2, #31
 800e4a2:	4011      	ands	r1, r2
 800e4a4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e4a6:	9114      	str	r1, [sp, #80]	@ 0x50
 800e4a8:	401a      	ands	r2, r3
 800e4aa:	2300      	movs	r3, #0
 800e4ac:	921a      	str	r2, [sp, #104]	@ 0x68
 800e4ae:	9306      	str	r3, [sp, #24]
 800e4b0:	9307      	str	r3, [sp, #28]
 800e4b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e4b4:	9805      	ldr	r0, [sp, #20]
 800e4b6:	6859      	ldr	r1, [r3, #4]
 800e4b8:	f001 fa34 	bl	800f924 <_Balloc>
 800e4bc:	9008      	str	r0, [sp, #32]
 800e4be:	2800      	cmp	r0, #0
 800e4c0:	d100      	bne.n	800e4c4 <_strtod_l+0x6c0>
 800e4c2:	e6e3      	b.n	800e28c <_strtod_l+0x488>
 800e4c4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e4c6:	300c      	adds	r0, #12
 800e4c8:	0019      	movs	r1, r3
 800e4ca:	691a      	ldr	r2, [r3, #16]
 800e4cc:	310c      	adds	r1, #12
 800e4ce:	3202      	adds	r2, #2
 800e4d0:	0092      	lsls	r2, r2, #2
 800e4d2:	f000 fdb0 	bl	800f036 <memcpy>
 800e4d6:	ab20      	add	r3, sp, #128	@ 0x80
 800e4d8:	9301      	str	r3, [sp, #4]
 800e4da:	ab1f      	add	r3, sp, #124	@ 0x7c
 800e4dc:	9300      	str	r3, [sp, #0]
 800e4de:	0032      	movs	r2, r6
 800e4e0:	003b      	movs	r3, r7
 800e4e2:	9805      	ldr	r0, [sp, #20]
 800e4e4:	9610      	str	r6, [sp, #64]	@ 0x40
 800e4e6:	9711      	str	r7, [sp, #68]	@ 0x44
 800e4e8:	f001 fe10 	bl	801010c <__d2b>
 800e4ec:	901e      	str	r0, [sp, #120]	@ 0x78
 800e4ee:	2800      	cmp	r0, #0
 800e4f0:	d100      	bne.n	800e4f4 <_strtod_l+0x6f0>
 800e4f2:	e6cb      	b.n	800e28c <_strtod_l+0x488>
 800e4f4:	2101      	movs	r1, #1
 800e4f6:	9805      	ldr	r0, [sp, #20]
 800e4f8:	f001 fb5c 	bl	800fbb4 <__i2b>
 800e4fc:	9007      	str	r0, [sp, #28]
 800e4fe:	2800      	cmp	r0, #0
 800e500:	d10e      	bne.n	800e520 <_strtod_l+0x71c>
 800e502:	2300      	movs	r3, #0
 800e504:	9307      	str	r3, [sp, #28]
 800e506:	e6c1      	b.n	800e28c <_strtod_l+0x488>
 800e508:	234b      	movs	r3, #75	@ 0x4b
 800e50a:	1a9a      	subs	r2, r3, r2
 800e50c:	3b4c      	subs	r3, #76	@ 0x4c
 800e50e:	4093      	lsls	r3, r2
 800e510:	4019      	ands	r1, r3
 800e512:	000f      	movs	r7, r1
 800e514:	e7a7      	b.n	800e466 <_strtod_l+0x662>
 800e516:	2201      	movs	r2, #1
 800e518:	4252      	negs	r2, r2
 800e51a:	409a      	lsls	r2, r3
 800e51c:	4016      	ands	r6, r2
 800e51e:	e7a2      	b.n	800e466 <_strtod_l+0x662>
 800e520:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800e522:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e524:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800e526:	1ad4      	subs	r4, r2, r3
 800e528:	2b00      	cmp	r3, #0
 800e52a:	db01      	blt.n	800e530 <_strtod_l+0x72c>
 800e52c:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 800e52e:	195d      	adds	r5, r3, r5
 800e530:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e532:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800e534:	1a5b      	subs	r3, r3, r1
 800e536:	2136      	movs	r1, #54	@ 0x36
 800e538:	189b      	adds	r3, r3, r2
 800e53a:	1a8a      	subs	r2, r1, r2
 800e53c:	497a      	ldr	r1, [pc, #488]	@ (800e728 <_strtod_l+0x924>)
 800e53e:	2001      	movs	r0, #1
 800e540:	468c      	mov	ip, r1
 800e542:	2100      	movs	r1, #0
 800e544:	3b01      	subs	r3, #1
 800e546:	9115      	str	r1, [sp, #84]	@ 0x54
 800e548:	9016      	str	r0, [sp, #88]	@ 0x58
 800e54a:	4563      	cmp	r3, ip
 800e54c:	da06      	bge.n	800e55c <_strtod_l+0x758>
 800e54e:	4661      	mov	r1, ip
 800e550:	1ac9      	subs	r1, r1, r3
 800e552:	1a52      	subs	r2, r2, r1
 800e554:	291f      	cmp	r1, #31
 800e556:	dc3f      	bgt.n	800e5d8 <_strtod_l+0x7d4>
 800e558:	4088      	lsls	r0, r1
 800e55a:	9016      	str	r0, [sp, #88]	@ 0x58
 800e55c:	18ab      	adds	r3, r5, r2
 800e55e:	930e      	str	r3, [sp, #56]	@ 0x38
 800e560:	18a4      	adds	r4, r4, r2
 800e562:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e564:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e566:	191c      	adds	r4, r3, r4
 800e568:	002b      	movs	r3, r5
 800e56a:	4295      	cmp	r5, r2
 800e56c:	dd00      	ble.n	800e570 <_strtod_l+0x76c>
 800e56e:	0013      	movs	r3, r2
 800e570:	42a3      	cmp	r3, r4
 800e572:	dd00      	ble.n	800e576 <_strtod_l+0x772>
 800e574:	0023      	movs	r3, r4
 800e576:	2b00      	cmp	r3, #0
 800e578:	dd04      	ble.n	800e584 <_strtod_l+0x780>
 800e57a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e57c:	1ae4      	subs	r4, r4, r3
 800e57e:	1ad2      	subs	r2, r2, r3
 800e580:	920e      	str	r2, [sp, #56]	@ 0x38
 800e582:	1aed      	subs	r5, r5, r3
 800e584:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e586:	2b00      	cmp	r3, #0
 800e588:	dd16      	ble.n	800e5b8 <_strtod_l+0x7b4>
 800e58a:	001a      	movs	r2, r3
 800e58c:	9907      	ldr	r1, [sp, #28]
 800e58e:	9805      	ldr	r0, [sp, #20]
 800e590:	f001 fbd2 	bl	800fd38 <__pow5mult>
 800e594:	9007      	str	r0, [sp, #28]
 800e596:	2800      	cmp	r0, #0
 800e598:	d0b3      	beq.n	800e502 <_strtod_l+0x6fe>
 800e59a:	0001      	movs	r1, r0
 800e59c:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 800e59e:	9805      	ldr	r0, [sp, #20]
 800e5a0:	f001 fb20 	bl	800fbe4 <__multiply>
 800e5a4:	9013      	str	r0, [sp, #76]	@ 0x4c
 800e5a6:	2800      	cmp	r0, #0
 800e5a8:	d100      	bne.n	800e5ac <_strtod_l+0x7a8>
 800e5aa:	e66f      	b.n	800e28c <_strtod_l+0x488>
 800e5ac:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800e5ae:	9805      	ldr	r0, [sp, #20]
 800e5b0:	f001 f9fc 	bl	800f9ac <_Bfree>
 800e5b4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e5b6:	931e      	str	r3, [sp, #120]	@ 0x78
 800e5b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	dc12      	bgt.n	800e5e4 <_strtod_l+0x7e0>
 800e5be:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	dd18      	ble.n	800e5f6 <_strtod_l+0x7f2>
 800e5c4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e5c6:	9908      	ldr	r1, [sp, #32]
 800e5c8:	9805      	ldr	r0, [sp, #20]
 800e5ca:	f001 fbb5 	bl	800fd38 <__pow5mult>
 800e5ce:	9008      	str	r0, [sp, #32]
 800e5d0:	2800      	cmp	r0, #0
 800e5d2:	d110      	bne.n	800e5f6 <_strtod_l+0x7f2>
 800e5d4:	2300      	movs	r3, #0
 800e5d6:	e658      	b.n	800e28a <_strtod_l+0x486>
 800e5d8:	4954      	ldr	r1, [pc, #336]	@ (800e72c <_strtod_l+0x928>)
 800e5da:	1acb      	subs	r3, r1, r3
 800e5dc:	0001      	movs	r1, r0
 800e5de:	4099      	lsls	r1, r3
 800e5e0:	9115      	str	r1, [sp, #84]	@ 0x54
 800e5e2:	e7ba      	b.n	800e55a <_strtod_l+0x756>
 800e5e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e5e6:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800e5e8:	9805      	ldr	r0, [sp, #20]
 800e5ea:	f001 fc01 	bl	800fdf0 <__lshift>
 800e5ee:	901e      	str	r0, [sp, #120]	@ 0x78
 800e5f0:	2800      	cmp	r0, #0
 800e5f2:	d1e4      	bne.n	800e5be <_strtod_l+0x7ba>
 800e5f4:	e64a      	b.n	800e28c <_strtod_l+0x488>
 800e5f6:	2c00      	cmp	r4, #0
 800e5f8:	dd07      	ble.n	800e60a <_strtod_l+0x806>
 800e5fa:	0022      	movs	r2, r4
 800e5fc:	9908      	ldr	r1, [sp, #32]
 800e5fe:	9805      	ldr	r0, [sp, #20]
 800e600:	f001 fbf6 	bl	800fdf0 <__lshift>
 800e604:	9008      	str	r0, [sp, #32]
 800e606:	2800      	cmp	r0, #0
 800e608:	d0e4      	beq.n	800e5d4 <_strtod_l+0x7d0>
 800e60a:	2d00      	cmp	r5, #0
 800e60c:	dd08      	ble.n	800e620 <_strtod_l+0x81c>
 800e60e:	002a      	movs	r2, r5
 800e610:	9907      	ldr	r1, [sp, #28]
 800e612:	9805      	ldr	r0, [sp, #20]
 800e614:	f001 fbec 	bl	800fdf0 <__lshift>
 800e618:	9007      	str	r0, [sp, #28]
 800e61a:	2800      	cmp	r0, #0
 800e61c:	d100      	bne.n	800e620 <_strtod_l+0x81c>
 800e61e:	e635      	b.n	800e28c <_strtod_l+0x488>
 800e620:	9a08      	ldr	r2, [sp, #32]
 800e622:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800e624:	9805      	ldr	r0, [sp, #20]
 800e626:	f001 fc6b 	bl	800ff00 <__mdiff>
 800e62a:	9006      	str	r0, [sp, #24]
 800e62c:	2800      	cmp	r0, #0
 800e62e:	d100      	bne.n	800e632 <_strtod_l+0x82e>
 800e630:	e62c      	b.n	800e28c <_strtod_l+0x488>
 800e632:	68c3      	ldr	r3, [r0, #12]
 800e634:	9907      	ldr	r1, [sp, #28]
 800e636:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e638:	2300      	movs	r3, #0
 800e63a:	60c3      	str	r3, [r0, #12]
 800e63c:	f001 fc44 	bl	800fec8 <__mcmp>
 800e640:	2800      	cmp	r0, #0
 800e642:	da3b      	bge.n	800e6bc <_strtod_l+0x8b8>
 800e644:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e646:	4333      	orrs	r3, r6
 800e648:	d167      	bne.n	800e71a <_strtod_l+0x916>
 800e64a:	033b      	lsls	r3, r7, #12
 800e64c:	d165      	bne.n	800e71a <_strtod_l+0x916>
 800e64e:	22d6      	movs	r2, #214	@ 0xd6
 800e650:	4b37      	ldr	r3, [pc, #220]	@ (800e730 <_strtod_l+0x92c>)
 800e652:	04d2      	lsls	r2, r2, #19
 800e654:	403b      	ands	r3, r7
 800e656:	4293      	cmp	r3, r2
 800e658:	d95f      	bls.n	800e71a <_strtod_l+0x916>
 800e65a:	9b06      	ldr	r3, [sp, #24]
 800e65c:	695b      	ldr	r3, [r3, #20]
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d103      	bne.n	800e66a <_strtod_l+0x866>
 800e662:	9b06      	ldr	r3, [sp, #24]
 800e664:	691b      	ldr	r3, [r3, #16]
 800e666:	2b01      	cmp	r3, #1
 800e668:	dd57      	ble.n	800e71a <_strtod_l+0x916>
 800e66a:	9906      	ldr	r1, [sp, #24]
 800e66c:	2201      	movs	r2, #1
 800e66e:	9805      	ldr	r0, [sp, #20]
 800e670:	f001 fbbe 	bl	800fdf0 <__lshift>
 800e674:	9907      	ldr	r1, [sp, #28]
 800e676:	9006      	str	r0, [sp, #24]
 800e678:	f001 fc26 	bl	800fec8 <__mcmp>
 800e67c:	2800      	cmp	r0, #0
 800e67e:	dd4c      	ble.n	800e71a <_strtod_l+0x916>
 800e680:	4b2b      	ldr	r3, [pc, #172]	@ (800e730 <_strtod_l+0x92c>)
 800e682:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e684:	403b      	ands	r3, r7
 800e686:	2a00      	cmp	r2, #0
 800e688:	d074      	beq.n	800e774 <_strtod_l+0x970>
 800e68a:	22d6      	movs	r2, #214	@ 0xd6
 800e68c:	04d2      	lsls	r2, r2, #19
 800e68e:	4293      	cmp	r3, r2
 800e690:	d870      	bhi.n	800e774 <_strtod_l+0x970>
 800e692:	22dc      	movs	r2, #220	@ 0xdc
 800e694:	0492      	lsls	r2, r2, #18
 800e696:	4293      	cmp	r3, r2
 800e698:	d800      	bhi.n	800e69c <_strtod_l+0x898>
 800e69a:	e693      	b.n	800e3c4 <_strtod_l+0x5c0>
 800e69c:	0030      	movs	r0, r6
 800e69e:	0039      	movs	r1, r7
 800e6a0:	4b24      	ldr	r3, [pc, #144]	@ (800e734 <_strtod_l+0x930>)
 800e6a2:	2200      	movs	r2, #0
 800e6a4:	f7f4 f938 	bl	8002918 <__aeabi_dmul>
 800e6a8:	4b21      	ldr	r3, [pc, #132]	@ (800e730 <_strtod_l+0x92c>)
 800e6aa:	0006      	movs	r6, r0
 800e6ac:	000f      	movs	r7, r1
 800e6ae:	420b      	tst	r3, r1
 800e6b0:	d000      	beq.n	800e6b4 <_strtod_l+0x8b0>
 800e6b2:	e5f4      	b.n	800e29e <_strtod_l+0x49a>
 800e6b4:	2322      	movs	r3, #34	@ 0x22
 800e6b6:	9a05      	ldr	r2, [sp, #20]
 800e6b8:	6013      	str	r3, [r2, #0]
 800e6ba:	e5f0      	b.n	800e29e <_strtod_l+0x49a>
 800e6bc:	970e      	str	r7, [sp, #56]	@ 0x38
 800e6be:	2800      	cmp	r0, #0
 800e6c0:	d175      	bne.n	800e7ae <_strtod_l+0x9aa>
 800e6c2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e6c4:	033b      	lsls	r3, r7, #12
 800e6c6:	0b1b      	lsrs	r3, r3, #12
 800e6c8:	2a00      	cmp	r2, #0
 800e6ca:	d039      	beq.n	800e740 <_strtod_l+0x93c>
 800e6cc:	4a1a      	ldr	r2, [pc, #104]	@ (800e738 <_strtod_l+0x934>)
 800e6ce:	4293      	cmp	r3, r2
 800e6d0:	d138      	bne.n	800e744 <_strtod_l+0x940>
 800e6d2:	2101      	movs	r1, #1
 800e6d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e6d6:	4249      	negs	r1, r1
 800e6d8:	0032      	movs	r2, r6
 800e6da:	0008      	movs	r0, r1
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d00b      	beq.n	800e6f8 <_strtod_l+0x8f4>
 800e6e0:	24d4      	movs	r4, #212	@ 0xd4
 800e6e2:	4b13      	ldr	r3, [pc, #76]	@ (800e730 <_strtod_l+0x92c>)
 800e6e4:	0008      	movs	r0, r1
 800e6e6:	403b      	ands	r3, r7
 800e6e8:	04e4      	lsls	r4, r4, #19
 800e6ea:	42a3      	cmp	r3, r4
 800e6ec:	d804      	bhi.n	800e6f8 <_strtod_l+0x8f4>
 800e6ee:	306c      	adds	r0, #108	@ 0x6c
 800e6f0:	0d1b      	lsrs	r3, r3, #20
 800e6f2:	1ac3      	subs	r3, r0, r3
 800e6f4:	4099      	lsls	r1, r3
 800e6f6:	0008      	movs	r0, r1
 800e6f8:	4282      	cmp	r2, r0
 800e6fa:	d123      	bne.n	800e744 <_strtod_l+0x940>
 800e6fc:	4b0f      	ldr	r3, [pc, #60]	@ (800e73c <_strtod_l+0x938>)
 800e6fe:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800e700:	4299      	cmp	r1, r3
 800e702:	d102      	bne.n	800e70a <_strtod_l+0x906>
 800e704:	3201      	adds	r2, #1
 800e706:	d100      	bne.n	800e70a <_strtod_l+0x906>
 800e708:	e5c0      	b.n	800e28c <_strtod_l+0x488>
 800e70a:	4b09      	ldr	r3, [pc, #36]	@ (800e730 <_strtod_l+0x92c>)
 800e70c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e70e:	2600      	movs	r6, #0
 800e710:	401a      	ands	r2, r3
 800e712:	0013      	movs	r3, r2
 800e714:	2280      	movs	r2, #128	@ 0x80
 800e716:	0352      	lsls	r2, r2, #13
 800e718:	189f      	adds	r7, r3, r2
 800e71a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d1bd      	bne.n	800e69c <_strtod_l+0x898>
 800e720:	e5bd      	b.n	800e29e <_strtod_l+0x49a>
 800e722:	46c0      	nop			@ (mov r8, r8)
 800e724:	0801c3a8 	.word	0x0801c3a8
 800e728:	fffffc02 	.word	0xfffffc02
 800e72c:	fffffbe2 	.word	0xfffffbe2
 800e730:	7ff00000 	.word	0x7ff00000
 800e734:	39500000 	.word	0x39500000
 800e738:	000fffff 	.word	0x000fffff
 800e73c:	7fefffff 	.word	0x7fefffff
 800e740:	4333      	orrs	r3, r6
 800e742:	d09d      	beq.n	800e680 <_strtod_l+0x87c>
 800e744:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800e746:	2b00      	cmp	r3, #0
 800e748:	d01c      	beq.n	800e784 <_strtod_l+0x980>
 800e74a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e74c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800e74e:	4213      	tst	r3, r2
 800e750:	d0e3      	beq.n	800e71a <_strtod_l+0x916>
 800e752:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e754:	0030      	movs	r0, r6
 800e756:	0039      	movs	r1, r7
 800e758:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d016      	beq.n	800e78c <_strtod_l+0x988>
 800e75e:	f7ff fb39 	bl	800ddd4 <sulp>
 800e762:	0002      	movs	r2, r0
 800e764:	000b      	movs	r3, r1
 800e766:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800e768:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800e76a:	f7f3 f8d5 	bl	8001918 <__aeabi_dadd>
 800e76e:	0006      	movs	r6, r0
 800e770:	000f      	movs	r7, r1
 800e772:	e7d2      	b.n	800e71a <_strtod_l+0x916>
 800e774:	2601      	movs	r6, #1
 800e776:	4a92      	ldr	r2, [pc, #584]	@ (800e9c0 <_strtod_l+0xbbc>)
 800e778:	4276      	negs	r6, r6
 800e77a:	189b      	adds	r3, r3, r2
 800e77c:	4a91      	ldr	r2, [pc, #580]	@ (800e9c4 <_strtod_l+0xbc0>)
 800e77e:	431a      	orrs	r2, r3
 800e780:	0017      	movs	r7, r2
 800e782:	e7ca      	b.n	800e71a <_strtod_l+0x916>
 800e784:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e786:	4233      	tst	r3, r6
 800e788:	d0c7      	beq.n	800e71a <_strtod_l+0x916>
 800e78a:	e7e2      	b.n	800e752 <_strtod_l+0x94e>
 800e78c:	f7ff fb22 	bl	800ddd4 <sulp>
 800e790:	0002      	movs	r2, r0
 800e792:	000b      	movs	r3, r1
 800e794:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800e796:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800e798:	f7f4 fba4 	bl	8002ee4 <__aeabi_dsub>
 800e79c:	2200      	movs	r2, #0
 800e79e:	2300      	movs	r3, #0
 800e7a0:	0006      	movs	r6, r0
 800e7a2:	000f      	movs	r7, r1
 800e7a4:	f7f1 fe5c 	bl	8000460 <__aeabi_dcmpeq>
 800e7a8:	2800      	cmp	r0, #0
 800e7aa:	d0b6      	beq.n	800e71a <_strtod_l+0x916>
 800e7ac:	e60a      	b.n	800e3c4 <_strtod_l+0x5c0>
 800e7ae:	9907      	ldr	r1, [sp, #28]
 800e7b0:	9806      	ldr	r0, [sp, #24]
 800e7b2:	f001 fd0b 	bl	80101cc <__ratio>
 800e7b6:	2380      	movs	r3, #128	@ 0x80
 800e7b8:	2200      	movs	r2, #0
 800e7ba:	05db      	lsls	r3, r3, #23
 800e7bc:	0004      	movs	r4, r0
 800e7be:	000d      	movs	r5, r1
 800e7c0:	f7f1 fe5e 	bl	8000480 <__aeabi_dcmple>
 800e7c4:	2800      	cmp	r0, #0
 800e7c6:	d06c      	beq.n	800e8a2 <_strtod_l+0xa9e>
 800e7c8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d177      	bne.n	800e8be <_strtod_l+0xaba>
 800e7ce:	2e00      	cmp	r6, #0
 800e7d0:	d157      	bne.n	800e882 <_strtod_l+0xa7e>
 800e7d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e7d4:	031b      	lsls	r3, r3, #12
 800e7d6:	d15a      	bne.n	800e88e <_strtod_l+0xa8a>
 800e7d8:	2200      	movs	r2, #0
 800e7da:	0020      	movs	r0, r4
 800e7dc:	0029      	movs	r1, r5
 800e7de:	4b7a      	ldr	r3, [pc, #488]	@ (800e9c8 <_strtod_l+0xbc4>)
 800e7e0:	f7f1 fe44 	bl	800046c <__aeabi_dcmplt>
 800e7e4:	2800      	cmp	r0, #0
 800e7e6:	d159      	bne.n	800e89c <_strtod_l+0xa98>
 800e7e8:	0020      	movs	r0, r4
 800e7ea:	0029      	movs	r1, r5
 800e7ec:	2200      	movs	r2, #0
 800e7ee:	4b77      	ldr	r3, [pc, #476]	@ (800e9cc <_strtod_l+0xbc8>)
 800e7f0:	f7f4 f892 	bl	8002918 <__aeabi_dmul>
 800e7f4:	0004      	movs	r4, r0
 800e7f6:	000d      	movs	r5, r1
 800e7f8:	2380      	movs	r3, #128	@ 0x80
 800e7fa:	061b      	lsls	r3, r3, #24
 800e7fc:	18eb      	adds	r3, r5, r3
 800e7fe:	940a      	str	r4, [sp, #40]	@ 0x28
 800e800:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e802:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e804:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e806:	9216      	str	r2, [sp, #88]	@ 0x58
 800e808:	9317      	str	r3, [sp, #92]	@ 0x5c
 800e80a:	4a71      	ldr	r2, [pc, #452]	@ (800e9d0 <_strtod_l+0xbcc>)
 800e80c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e80e:	4013      	ands	r3, r2
 800e810:	9315      	str	r3, [sp, #84]	@ 0x54
 800e812:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800e814:	4b6f      	ldr	r3, [pc, #444]	@ (800e9d4 <_strtod_l+0xbd0>)
 800e816:	429a      	cmp	r2, r3
 800e818:	d000      	beq.n	800e81c <_strtod_l+0xa18>
 800e81a:	e087      	b.n	800e92c <_strtod_l+0xb28>
 800e81c:	4a6e      	ldr	r2, [pc, #440]	@ (800e9d8 <_strtod_l+0xbd4>)
 800e81e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e820:	4694      	mov	ip, r2
 800e822:	4463      	add	r3, ip
 800e824:	001f      	movs	r7, r3
 800e826:	0030      	movs	r0, r6
 800e828:	0019      	movs	r1, r3
 800e82a:	f001 fc03 	bl	8010034 <__ulp>
 800e82e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e830:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e832:	f7f4 f871 	bl	8002918 <__aeabi_dmul>
 800e836:	0032      	movs	r2, r6
 800e838:	003b      	movs	r3, r7
 800e83a:	f7f3 f86d 	bl	8001918 <__aeabi_dadd>
 800e83e:	4a64      	ldr	r2, [pc, #400]	@ (800e9d0 <_strtod_l+0xbcc>)
 800e840:	4b66      	ldr	r3, [pc, #408]	@ (800e9dc <_strtod_l+0xbd8>)
 800e842:	0006      	movs	r6, r0
 800e844:	400a      	ands	r2, r1
 800e846:	429a      	cmp	r2, r3
 800e848:	d940      	bls.n	800e8cc <_strtod_l+0xac8>
 800e84a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e84c:	4a64      	ldr	r2, [pc, #400]	@ (800e9e0 <_strtod_l+0xbdc>)
 800e84e:	4293      	cmp	r3, r2
 800e850:	d103      	bne.n	800e85a <_strtod_l+0xa56>
 800e852:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e854:	3301      	adds	r3, #1
 800e856:	d100      	bne.n	800e85a <_strtod_l+0xa56>
 800e858:	e518      	b.n	800e28c <_strtod_l+0x488>
 800e85a:	2601      	movs	r6, #1
 800e85c:	4f60      	ldr	r7, [pc, #384]	@ (800e9e0 <_strtod_l+0xbdc>)
 800e85e:	4276      	negs	r6, r6
 800e860:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800e862:	9805      	ldr	r0, [sp, #20]
 800e864:	f001 f8a2 	bl	800f9ac <_Bfree>
 800e868:	9908      	ldr	r1, [sp, #32]
 800e86a:	9805      	ldr	r0, [sp, #20]
 800e86c:	f001 f89e 	bl	800f9ac <_Bfree>
 800e870:	9907      	ldr	r1, [sp, #28]
 800e872:	9805      	ldr	r0, [sp, #20]
 800e874:	f001 f89a 	bl	800f9ac <_Bfree>
 800e878:	9906      	ldr	r1, [sp, #24]
 800e87a:	9805      	ldr	r0, [sp, #20]
 800e87c:	f001 f896 	bl	800f9ac <_Bfree>
 800e880:	e617      	b.n	800e4b2 <_strtod_l+0x6ae>
 800e882:	2e01      	cmp	r6, #1
 800e884:	d103      	bne.n	800e88e <_strtod_l+0xa8a>
 800e886:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d100      	bne.n	800e88e <_strtod_l+0xa8a>
 800e88c:	e59a      	b.n	800e3c4 <_strtod_l+0x5c0>
 800e88e:	2300      	movs	r3, #0
 800e890:	4c54      	ldr	r4, [pc, #336]	@ (800e9e4 <_strtod_l+0xbe0>)
 800e892:	4d4d      	ldr	r5, [pc, #308]	@ (800e9c8 <_strtod_l+0xbc4>)
 800e894:	930a      	str	r3, [sp, #40]	@ 0x28
 800e896:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e898:	2400      	movs	r4, #0
 800e89a:	e7b2      	b.n	800e802 <_strtod_l+0x9fe>
 800e89c:	2400      	movs	r4, #0
 800e89e:	4d4b      	ldr	r5, [pc, #300]	@ (800e9cc <_strtod_l+0xbc8>)
 800e8a0:	e7aa      	b.n	800e7f8 <_strtod_l+0x9f4>
 800e8a2:	0020      	movs	r0, r4
 800e8a4:	0029      	movs	r1, r5
 800e8a6:	4b49      	ldr	r3, [pc, #292]	@ (800e9cc <_strtod_l+0xbc8>)
 800e8a8:	2200      	movs	r2, #0
 800e8aa:	f7f4 f835 	bl	8002918 <__aeabi_dmul>
 800e8ae:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e8b0:	0004      	movs	r4, r0
 800e8b2:	000d      	movs	r5, r1
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d09f      	beq.n	800e7f8 <_strtod_l+0x9f4>
 800e8b8:	940a      	str	r4, [sp, #40]	@ 0x28
 800e8ba:	950b      	str	r5, [sp, #44]	@ 0x2c
 800e8bc:	e7a1      	b.n	800e802 <_strtod_l+0x9fe>
 800e8be:	2300      	movs	r3, #0
 800e8c0:	4c41      	ldr	r4, [pc, #260]	@ (800e9c8 <_strtod_l+0xbc4>)
 800e8c2:	0025      	movs	r5, r4
 800e8c4:	930a      	str	r3, [sp, #40]	@ 0x28
 800e8c6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e8c8:	001c      	movs	r4, r3
 800e8ca:	e79a      	b.n	800e802 <_strtod_l+0x9fe>
 800e8cc:	23d4      	movs	r3, #212	@ 0xd4
 800e8ce:	049b      	lsls	r3, r3, #18
 800e8d0:	18cf      	adds	r7, r1, r3
 800e8d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e8d4:	9710      	str	r7, [sp, #64]	@ 0x40
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d1c2      	bne.n	800e860 <_strtod_l+0xa5c>
 800e8da:	4b3d      	ldr	r3, [pc, #244]	@ (800e9d0 <_strtod_l+0xbcc>)
 800e8dc:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800e8de:	403b      	ands	r3, r7
 800e8e0:	429a      	cmp	r2, r3
 800e8e2:	d1bd      	bne.n	800e860 <_strtod_l+0xa5c>
 800e8e4:	0020      	movs	r0, r4
 800e8e6:	0029      	movs	r1, r5
 800e8e8:	f7f1 fea6 	bl	8000638 <__aeabi_d2lz>
 800e8ec:	f7f1 fefe 	bl	80006ec <__aeabi_l2d>
 800e8f0:	0002      	movs	r2, r0
 800e8f2:	000b      	movs	r3, r1
 800e8f4:	0020      	movs	r0, r4
 800e8f6:	0029      	movs	r1, r5
 800e8f8:	f7f4 faf4 	bl	8002ee4 <__aeabi_dsub>
 800e8fc:	033c      	lsls	r4, r7, #12
 800e8fe:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e900:	0b24      	lsrs	r4, r4, #12
 800e902:	4334      	orrs	r4, r6
 800e904:	900e      	str	r0, [sp, #56]	@ 0x38
 800e906:	910f      	str	r1, [sp, #60]	@ 0x3c
 800e908:	4a37      	ldr	r2, [pc, #220]	@ (800e9e8 <_strtod_l+0xbe4>)
 800e90a:	431c      	orrs	r4, r3
 800e90c:	d052      	beq.n	800e9b4 <_strtod_l+0xbb0>
 800e90e:	4b37      	ldr	r3, [pc, #220]	@ (800e9ec <_strtod_l+0xbe8>)
 800e910:	f7f1 fdac 	bl	800046c <__aeabi_dcmplt>
 800e914:	2800      	cmp	r0, #0
 800e916:	d000      	beq.n	800e91a <_strtod_l+0xb16>
 800e918:	e4c1      	b.n	800e29e <_strtod_l+0x49a>
 800e91a:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800e91c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800e91e:	4a34      	ldr	r2, [pc, #208]	@ (800e9f0 <_strtod_l+0xbec>)
 800e920:	4b2a      	ldr	r3, [pc, #168]	@ (800e9cc <_strtod_l+0xbc8>)
 800e922:	f7f1 fdb7 	bl	8000494 <__aeabi_dcmpgt>
 800e926:	2800      	cmp	r0, #0
 800e928:	d09a      	beq.n	800e860 <_strtod_l+0xa5c>
 800e92a:	e4b8      	b.n	800e29e <_strtod_l+0x49a>
 800e92c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d02a      	beq.n	800e988 <_strtod_l+0xb84>
 800e932:	23d4      	movs	r3, #212	@ 0xd4
 800e934:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800e936:	04db      	lsls	r3, r3, #19
 800e938:	429a      	cmp	r2, r3
 800e93a:	d825      	bhi.n	800e988 <_strtod_l+0xb84>
 800e93c:	0020      	movs	r0, r4
 800e93e:	0029      	movs	r1, r5
 800e940:	4a2c      	ldr	r2, [pc, #176]	@ (800e9f4 <_strtod_l+0xbf0>)
 800e942:	4b2d      	ldr	r3, [pc, #180]	@ (800e9f8 <_strtod_l+0xbf4>)
 800e944:	f7f1 fd9c 	bl	8000480 <__aeabi_dcmple>
 800e948:	2800      	cmp	r0, #0
 800e94a:	d016      	beq.n	800e97a <_strtod_l+0xb76>
 800e94c:	0020      	movs	r0, r4
 800e94e:	0029      	movs	r1, r5
 800e950:	f7f1 fe54 	bl	80005fc <__aeabi_d2uiz>
 800e954:	2800      	cmp	r0, #0
 800e956:	d100      	bne.n	800e95a <_strtod_l+0xb56>
 800e958:	3001      	adds	r0, #1
 800e95a:	f7f4 ff59 	bl	8003810 <__aeabi_ui2d>
 800e95e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e960:	0004      	movs	r4, r0
 800e962:	000d      	movs	r5, r1
 800e964:	2b00      	cmp	r3, #0
 800e966:	d122      	bne.n	800e9ae <_strtod_l+0xbaa>
 800e968:	2380      	movs	r3, #128	@ 0x80
 800e96a:	061b      	lsls	r3, r3, #24
 800e96c:	18cb      	adds	r3, r1, r3
 800e96e:	9018      	str	r0, [sp, #96]	@ 0x60
 800e970:	9319      	str	r3, [sp, #100]	@ 0x64
 800e972:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800e974:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e976:	9216      	str	r2, [sp, #88]	@ 0x58
 800e978:	9317      	str	r3, [sp, #92]	@ 0x5c
 800e97a:	22d6      	movs	r2, #214	@ 0xd6
 800e97c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e97e:	04d2      	lsls	r2, r2, #19
 800e980:	189b      	adds	r3, r3, r2
 800e982:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800e984:	1a9b      	subs	r3, r3, r2
 800e986:	9317      	str	r3, [sp, #92]	@ 0x5c
 800e988:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800e98a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800e98c:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 800e98e:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 800e990:	f001 fb50 	bl	8010034 <__ulp>
 800e994:	0002      	movs	r2, r0
 800e996:	000b      	movs	r3, r1
 800e998:	0030      	movs	r0, r6
 800e99a:	0039      	movs	r1, r7
 800e99c:	f7f3 ffbc 	bl	8002918 <__aeabi_dmul>
 800e9a0:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800e9a2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e9a4:	f7f2 ffb8 	bl	8001918 <__aeabi_dadd>
 800e9a8:	0006      	movs	r6, r0
 800e9aa:	000f      	movs	r7, r1
 800e9ac:	e791      	b.n	800e8d2 <_strtod_l+0xace>
 800e9ae:	9418      	str	r4, [sp, #96]	@ 0x60
 800e9b0:	9519      	str	r5, [sp, #100]	@ 0x64
 800e9b2:	e7de      	b.n	800e972 <_strtod_l+0xb6e>
 800e9b4:	4b11      	ldr	r3, [pc, #68]	@ (800e9fc <_strtod_l+0xbf8>)
 800e9b6:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800e9b8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800e9ba:	f7f1 fd57 	bl	800046c <__aeabi_dcmplt>
 800e9be:	e7b2      	b.n	800e926 <_strtod_l+0xb22>
 800e9c0:	fff00000 	.word	0xfff00000
 800e9c4:	000fffff 	.word	0x000fffff
 800e9c8:	3ff00000 	.word	0x3ff00000
 800e9cc:	3fe00000 	.word	0x3fe00000
 800e9d0:	7ff00000 	.word	0x7ff00000
 800e9d4:	7fe00000 	.word	0x7fe00000
 800e9d8:	fcb00000 	.word	0xfcb00000
 800e9dc:	7c9fffff 	.word	0x7c9fffff
 800e9e0:	7fefffff 	.word	0x7fefffff
 800e9e4:	bff00000 	.word	0xbff00000
 800e9e8:	94a03595 	.word	0x94a03595
 800e9ec:	3fdfffff 	.word	0x3fdfffff
 800e9f0:	35afe535 	.word	0x35afe535
 800e9f4:	ffc00000 	.word	0xffc00000
 800e9f8:	41dfffff 	.word	0x41dfffff
 800e9fc:	3fcfffff 	.word	0x3fcfffff

0800ea00 <strtod>:
 800ea00:	b510      	push	{r4, lr}
 800ea02:	4c04      	ldr	r4, [pc, #16]	@ (800ea14 <strtod+0x14>)
 800ea04:	000a      	movs	r2, r1
 800ea06:	0001      	movs	r1, r0
 800ea08:	4b03      	ldr	r3, [pc, #12]	@ (800ea18 <strtod+0x18>)
 800ea0a:	6820      	ldr	r0, [r4, #0]
 800ea0c:	f7ff f9fa 	bl	800de04 <_strtod_l>
 800ea10:	bd10      	pop	{r4, pc}
 800ea12:	46c0      	nop			@ (mov r8, r8)
 800ea14:	20000188 	.word	0x20000188
 800ea18:	2000001c 	.word	0x2000001c

0800ea1c <_strtol_l.isra.0>:
 800ea1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea1e:	b085      	sub	sp, #20
 800ea20:	0017      	movs	r7, r2
 800ea22:	001e      	movs	r6, r3
 800ea24:	9003      	str	r0, [sp, #12]
 800ea26:	9101      	str	r1, [sp, #4]
 800ea28:	2b24      	cmp	r3, #36	@ 0x24
 800ea2a:	d823      	bhi.n	800ea74 <_strtol_l.isra.0+0x58>
 800ea2c:	000c      	movs	r4, r1
 800ea2e:	2b01      	cmp	r3, #1
 800ea30:	d020      	beq.n	800ea74 <_strtol_l.isra.0+0x58>
 800ea32:	4b3d      	ldr	r3, [pc, #244]	@ (800eb28 <_strtol_l.isra.0+0x10c>)
 800ea34:	2208      	movs	r2, #8
 800ea36:	469c      	mov	ip, r3
 800ea38:	0023      	movs	r3, r4
 800ea3a:	4661      	mov	r1, ip
 800ea3c:	781d      	ldrb	r5, [r3, #0]
 800ea3e:	3401      	adds	r4, #1
 800ea40:	5d48      	ldrb	r0, [r1, r5]
 800ea42:	0001      	movs	r1, r0
 800ea44:	4011      	ands	r1, r2
 800ea46:	4210      	tst	r0, r2
 800ea48:	d1f6      	bne.n	800ea38 <_strtol_l.isra.0+0x1c>
 800ea4a:	2d2d      	cmp	r5, #45	@ 0x2d
 800ea4c:	d119      	bne.n	800ea82 <_strtol_l.isra.0+0x66>
 800ea4e:	7825      	ldrb	r5, [r4, #0]
 800ea50:	1c9c      	adds	r4, r3, #2
 800ea52:	2301      	movs	r3, #1
 800ea54:	9300      	str	r3, [sp, #0]
 800ea56:	2210      	movs	r2, #16
 800ea58:	0033      	movs	r3, r6
 800ea5a:	4393      	bics	r3, r2
 800ea5c:	d11d      	bne.n	800ea9a <_strtol_l.isra.0+0x7e>
 800ea5e:	2d30      	cmp	r5, #48	@ 0x30
 800ea60:	d115      	bne.n	800ea8e <_strtol_l.isra.0+0x72>
 800ea62:	2120      	movs	r1, #32
 800ea64:	7823      	ldrb	r3, [r4, #0]
 800ea66:	438b      	bics	r3, r1
 800ea68:	2b58      	cmp	r3, #88	@ 0x58
 800ea6a:	d110      	bne.n	800ea8e <_strtol_l.isra.0+0x72>
 800ea6c:	7865      	ldrb	r5, [r4, #1]
 800ea6e:	3402      	adds	r4, #2
 800ea70:	2610      	movs	r6, #16
 800ea72:	e012      	b.n	800ea9a <_strtol_l.isra.0+0x7e>
 800ea74:	f000 fab2 	bl	800efdc <__errno>
 800ea78:	2316      	movs	r3, #22
 800ea7a:	6003      	str	r3, [r0, #0]
 800ea7c:	2000      	movs	r0, #0
 800ea7e:	b005      	add	sp, #20
 800ea80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ea82:	9100      	str	r1, [sp, #0]
 800ea84:	2d2b      	cmp	r5, #43	@ 0x2b
 800ea86:	d1e6      	bne.n	800ea56 <_strtol_l.isra.0+0x3a>
 800ea88:	7825      	ldrb	r5, [r4, #0]
 800ea8a:	1c9c      	adds	r4, r3, #2
 800ea8c:	e7e3      	b.n	800ea56 <_strtol_l.isra.0+0x3a>
 800ea8e:	2e00      	cmp	r6, #0
 800ea90:	d1ee      	bne.n	800ea70 <_strtol_l.isra.0+0x54>
 800ea92:	360a      	adds	r6, #10
 800ea94:	2d30      	cmp	r5, #48	@ 0x30
 800ea96:	d100      	bne.n	800ea9a <_strtol_l.isra.0+0x7e>
 800ea98:	3e02      	subs	r6, #2
 800ea9a:	4a24      	ldr	r2, [pc, #144]	@ (800eb2c <_strtol_l.isra.0+0x110>)
 800ea9c:	9b00      	ldr	r3, [sp, #0]
 800ea9e:	4694      	mov	ip, r2
 800eaa0:	4463      	add	r3, ip
 800eaa2:	0031      	movs	r1, r6
 800eaa4:	0018      	movs	r0, r3
 800eaa6:	9302      	str	r3, [sp, #8]
 800eaa8:	f7f1 fbda 	bl	8000260 <__aeabi_uidivmod>
 800eaac:	2200      	movs	r2, #0
 800eaae:	4684      	mov	ip, r0
 800eab0:	0010      	movs	r0, r2
 800eab2:	002b      	movs	r3, r5
 800eab4:	3b30      	subs	r3, #48	@ 0x30
 800eab6:	2b09      	cmp	r3, #9
 800eab8:	d811      	bhi.n	800eade <_strtol_l.isra.0+0xc2>
 800eaba:	001d      	movs	r5, r3
 800eabc:	42ae      	cmp	r6, r5
 800eabe:	dd1d      	ble.n	800eafc <_strtol_l.isra.0+0xe0>
 800eac0:	1c53      	adds	r3, r2, #1
 800eac2:	d009      	beq.n	800ead8 <_strtol_l.isra.0+0xbc>
 800eac4:	2201      	movs	r2, #1
 800eac6:	4252      	negs	r2, r2
 800eac8:	4584      	cmp	ip, r0
 800eaca:	d305      	bcc.n	800ead8 <_strtol_l.isra.0+0xbc>
 800eacc:	d101      	bne.n	800ead2 <_strtol_l.isra.0+0xb6>
 800eace:	42a9      	cmp	r1, r5
 800ead0:	db11      	blt.n	800eaf6 <_strtol_l.isra.0+0xda>
 800ead2:	2201      	movs	r2, #1
 800ead4:	4370      	muls	r0, r6
 800ead6:	1828      	adds	r0, r5, r0
 800ead8:	7825      	ldrb	r5, [r4, #0]
 800eada:	3401      	adds	r4, #1
 800eadc:	e7e9      	b.n	800eab2 <_strtol_l.isra.0+0x96>
 800eade:	002b      	movs	r3, r5
 800eae0:	3b41      	subs	r3, #65	@ 0x41
 800eae2:	2b19      	cmp	r3, #25
 800eae4:	d801      	bhi.n	800eaea <_strtol_l.isra.0+0xce>
 800eae6:	3d37      	subs	r5, #55	@ 0x37
 800eae8:	e7e8      	b.n	800eabc <_strtol_l.isra.0+0xa0>
 800eaea:	002b      	movs	r3, r5
 800eaec:	3b61      	subs	r3, #97	@ 0x61
 800eaee:	2b19      	cmp	r3, #25
 800eaf0:	d804      	bhi.n	800eafc <_strtol_l.isra.0+0xe0>
 800eaf2:	3d57      	subs	r5, #87	@ 0x57
 800eaf4:	e7e2      	b.n	800eabc <_strtol_l.isra.0+0xa0>
 800eaf6:	2201      	movs	r2, #1
 800eaf8:	4252      	negs	r2, r2
 800eafa:	e7ed      	b.n	800ead8 <_strtol_l.isra.0+0xbc>
 800eafc:	1c53      	adds	r3, r2, #1
 800eafe:	d108      	bne.n	800eb12 <_strtol_l.isra.0+0xf6>
 800eb00:	2322      	movs	r3, #34	@ 0x22
 800eb02:	9a03      	ldr	r2, [sp, #12]
 800eb04:	9802      	ldr	r0, [sp, #8]
 800eb06:	6013      	str	r3, [r2, #0]
 800eb08:	2f00      	cmp	r7, #0
 800eb0a:	d0b8      	beq.n	800ea7e <_strtol_l.isra.0+0x62>
 800eb0c:	1e63      	subs	r3, r4, #1
 800eb0e:	9301      	str	r3, [sp, #4]
 800eb10:	e007      	b.n	800eb22 <_strtol_l.isra.0+0x106>
 800eb12:	9b00      	ldr	r3, [sp, #0]
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d000      	beq.n	800eb1a <_strtol_l.isra.0+0xfe>
 800eb18:	4240      	negs	r0, r0
 800eb1a:	2f00      	cmp	r7, #0
 800eb1c:	d0af      	beq.n	800ea7e <_strtol_l.isra.0+0x62>
 800eb1e:	2a00      	cmp	r2, #0
 800eb20:	d1f4      	bne.n	800eb0c <_strtol_l.isra.0+0xf0>
 800eb22:	9b01      	ldr	r3, [sp, #4]
 800eb24:	603b      	str	r3, [r7, #0]
 800eb26:	e7aa      	b.n	800ea7e <_strtol_l.isra.0+0x62>
 800eb28:	0801c3d1 	.word	0x0801c3d1
 800eb2c:	7fffffff 	.word	0x7fffffff

0800eb30 <strtol>:
 800eb30:	b510      	push	{r4, lr}
 800eb32:	4c04      	ldr	r4, [pc, #16]	@ (800eb44 <strtol+0x14>)
 800eb34:	0013      	movs	r3, r2
 800eb36:	000a      	movs	r2, r1
 800eb38:	0001      	movs	r1, r0
 800eb3a:	6820      	ldr	r0, [r4, #0]
 800eb3c:	f7ff ff6e 	bl	800ea1c <_strtol_l.isra.0>
 800eb40:	bd10      	pop	{r4, pc}
 800eb42:	46c0      	nop			@ (mov r8, r8)
 800eb44:	20000188 	.word	0x20000188

0800eb48 <_strtoll_l.isra.0>:
 800eb48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb4a:	b08d      	sub	sp, #52	@ 0x34
 800eb4c:	000c      	movs	r4, r1
 800eb4e:	9102      	str	r1, [sp, #8]
 800eb50:	001e      	movs	r6, r3
 800eb52:	2108      	movs	r1, #8
 800eb54:	4f4c      	ldr	r7, [pc, #304]	@ (800ec88 <_strtoll_l.isra.0+0x140>)
 800eb56:	900a      	str	r0, [sp, #40]	@ 0x28
 800eb58:	9203      	str	r2, [sp, #12]
 800eb5a:	0023      	movs	r3, r4
 800eb5c:	781a      	ldrb	r2, [r3, #0]
 800eb5e:	3401      	adds	r4, #1
 800eb60:	5cbd      	ldrb	r5, [r7, r2]
 800eb62:	0028      	movs	r0, r5
 800eb64:	4008      	ands	r0, r1
 800eb66:	420d      	tst	r5, r1
 800eb68:	d1f7      	bne.n	800eb5a <_strtoll_l.isra.0+0x12>
 800eb6a:	0015      	movs	r5, r2
 800eb6c:	2a2d      	cmp	r2, #45	@ 0x2d
 800eb6e:	d112      	bne.n	800eb96 <_strtoll_l.isra.0+0x4e>
 800eb70:	7825      	ldrb	r5, [r4, #0]
 800eb72:	1c9c      	adds	r4, r3, #2
 800eb74:	2301      	movs	r3, #1
 800eb76:	9301      	str	r3, [sp, #4]
 800eb78:	2210      	movs	r2, #16
 800eb7a:	0033      	movs	r3, r6
 800eb7c:	4393      	bics	r3, r2
 800eb7e:	d116      	bne.n	800ebae <_strtoll_l.isra.0+0x66>
 800eb80:	2d30      	cmp	r5, #48	@ 0x30
 800eb82:	d10e      	bne.n	800eba2 <_strtoll_l.isra.0+0x5a>
 800eb84:	2120      	movs	r1, #32
 800eb86:	7823      	ldrb	r3, [r4, #0]
 800eb88:	438b      	bics	r3, r1
 800eb8a:	2b58      	cmp	r3, #88	@ 0x58
 800eb8c:	d109      	bne.n	800eba2 <_strtoll_l.isra.0+0x5a>
 800eb8e:	7865      	ldrb	r5, [r4, #1]
 800eb90:	3402      	adds	r4, #2
 800eb92:	2610      	movs	r6, #16
 800eb94:	e00b      	b.n	800ebae <_strtoll_l.isra.0+0x66>
 800eb96:	9001      	str	r0, [sp, #4]
 800eb98:	2a2b      	cmp	r2, #43	@ 0x2b
 800eb9a:	d1ed      	bne.n	800eb78 <_strtoll_l.isra.0+0x30>
 800eb9c:	7825      	ldrb	r5, [r4, #0]
 800eb9e:	1c9c      	adds	r4, r3, #2
 800eba0:	e7ea      	b.n	800eb78 <_strtoll_l.isra.0+0x30>
 800eba2:	2e00      	cmp	r6, #0
 800eba4:	d1f5      	bne.n	800eb92 <_strtoll_l.isra.0+0x4a>
 800eba6:	360a      	adds	r6, #10
 800eba8:	2d30      	cmp	r5, #48	@ 0x30
 800ebaa:	d100      	bne.n	800ebae <_strtoll_l.isra.0+0x66>
 800ebac:	3e02      	subs	r6, #2
 800ebae:	2001      	movs	r0, #1
 800ebb0:	2300      	movs	r3, #0
 800ebb2:	4936      	ldr	r1, [pc, #216]	@ (800ec8c <_strtoll_l.isra.0+0x144>)
 800ebb4:	9a01      	ldr	r2, [sp, #4]
 800ebb6:	4240      	negs	r0, r0
 800ebb8:	1812      	adds	r2, r2, r0
 800ebba:	414b      	adcs	r3, r1
 800ebbc:	9204      	str	r2, [sp, #16]
 800ebbe:	9305      	str	r3, [sp, #20]
 800ebc0:	9804      	ldr	r0, [sp, #16]
 800ebc2:	9905      	ldr	r1, [sp, #20]
 800ebc4:	17f3      	asrs	r3, r6, #31
 800ebc6:	0032      	movs	r2, r6
 800ebc8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ebca:	f7f1 fcb1 	bl	8000530 <__aeabi_uldivmod>
 800ebce:	2300      	movs	r3, #0
 800ebd0:	000f      	movs	r7, r1
 800ebd2:	9008      	str	r0, [sp, #32]
 800ebd4:	2100      	movs	r1, #0
 800ebd6:	2000      	movs	r0, #0
 800ebd8:	9209      	str	r2, [sp, #36]	@ 0x24
 800ebda:	002a      	movs	r2, r5
 800ebdc:	3a30      	subs	r2, #48	@ 0x30
 800ebde:	2a09      	cmp	r2, #9
 800ebe0:	d823      	bhi.n	800ec2a <_strtoll_l.isra.0+0xe2>
 800ebe2:	0015      	movs	r5, r2
 800ebe4:	42ae      	cmp	r6, r5
 800ebe6:	dd2f      	ble.n	800ec48 <_strtoll_l.isra.0+0x100>
 800ebe8:	1c5a      	adds	r2, r3, #1
 800ebea:	d01b      	beq.n	800ec24 <_strtoll_l.isra.0+0xdc>
 800ebec:	42b9      	cmp	r1, r7
 800ebee:	d828      	bhi.n	800ec42 <_strtoll_l.isra.0+0xfa>
 800ebf0:	d102      	bne.n	800ebf8 <_strtoll_l.isra.0+0xb0>
 800ebf2:	9b08      	ldr	r3, [sp, #32]
 800ebf4:	4298      	cmp	r0, r3
 800ebf6:	d824      	bhi.n	800ec42 <_strtoll_l.isra.0+0xfa>
 800ebf8:	9b08      	ldr	r3, [sp, #32]
 800ebfa:	4283      	cmp	r3, r0
 800ebfc:	d104      	bne.n	800ec08 <_strtoll_l.isra.0+0xc0>
 800ebfe:	428f      	cmp	r7, r1
 800ec00:	d102      	bne.n	800ec08 <_strtoll_l.isra.0+0xc0>
 800ec02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec04:	42ab      	cmp	r3, r5
 800ec06:	db1c      	blt.n	800ec42 <_strtoll_l.isra.0+0xfa>
 800ec08:	0002      	movs	r2, r0
 800ec0a:	000b      	movs	r3, r1
 800ec0c:	0030      	movs	r0, r6
 800ec0e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ec10:	f7f1 fcae 	bl	8000570 <__aeabi_lmul>
 800ec14:	17eb      	asrs	r3, r5, #31
 800ec16:	9506      	str	r5, [sp, #24]
 800ec18:	9307      	str	r3, [sp, #28]
 800ec1a:	9a06      	ldr	r2, [sp, #24]
 800ec1c:	9b07      	ldr	r3, [sp, #28]
 800ec1e:	1880      	adds	r0, r0, r2
 800ec20:	4159      	adcs	r1, r3
 800ec22:	2301      	movs	r3, #1
 800ec24:	7825      	ldrb	r5, [r4, #0]
 800ec26:	3401      	adds	r4, #1
 800ec28:	e7d7      	b.n	800ebda <_strtoll_l.isra.0+0x92>
 800ec2a:	002a      	movs	r2, r5
 800ec2c:	3a41      	subs	r2, #65	@ 0x41
 800ec2e:	2a19      	cmp	r2, #25
 800ec30:	d801      	bhi.n	800ec36 <_strtoll_l.isra.0+0xee>
 800ec32:	3d37      	subs	r5, #55	@ 0x37
 800ec34:	e7d6      	b.n	800ebe4 <_strtoll_l.isra.0+0x9c>
 800ec36:	002a      	movs	r2, r5
 800ec38:	3a61      	subs	r2, #97	@ 0x61
 800ec3a:	2a19      	cmp	r2, #25
 800ec3c:	d804      	bhi.n	800ec48 <_strtoll_l.isra.0+0x100>
 800ec3e:	3d57      	subs	r5, #87	@ 0x57
 800ec40:	e7d0      	b.n	800ebe4 <_strtoll_l.isra.0+0x9c>
 800ec42:	2301      	movs	r3, #1
 800ec44:	425b      	negs	r3, r3
 800ec46:	e7ed      	b.n	800ec24 <_strtoll_l.isra.0+0xdc>
 800ec48:	1c5a      	adds	r2, r3, #1
 800ec4a:	d109      	bne.n	800ec60 <_strtoll_l.isra.0+0x118>
 800ec4c:	9804      	ldr	r0, [sp, #16]
 800ec4e:	9905      	ldr	r1, [sp, #20]
 800ec50:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ec52:	3323      	adds	r3, #35	@ 0x23
 800ec54:	6013      	str	r3, [r2, #0]
 800ec56:	9b03      	ldr	r3, [sp, #12]
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d10e      	bne.n	800ec7a <_strtoll_l.isra.0+0x132>
 800ec5c:	b00d      	add	sp, #52	@ 0x34
 800ec5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec60:	9a01      	ldr	r2, [sp, #4]
 800ec62:	2a00      	cmp	r2, #0
 800ec64:	d004      	beq.n	800ec70 <_strtoll_l.isra.0+0x128>
 800ec66:	0005      	movs	r5, r0
 800ec68:	000e      	movs	r6, r1
 800ec6a:	2100      	movs	r1, #0
 800ec6c:	4268      	negs	r0, r5
 800ec6e:	41b1      	sbcs	r1, r6
 800ec70:	9a03      	ldr	r2, [sp, #12]
 800ec72:	2a00      	cmp	r2, #0
 800ec74:	d0f2      	beq.n	800ec5c <_strtoll_l.isra.0+0x114>
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d001      	beq.n	800ec7e <_strtoll_l.isra.0+0x136>
 800ec7a:	1e63      	subs	r3, r4, #1
 800ec7c:	9302      	str	r3, [sp, #8]
 800ec7e:	9b03      	ldr	r3, [sp, #12]
 800ec80:	9a02      	ldr	r2, [sp, #8]
 800ec82:	601a      	str	r2, [r3, #0]
 800ec84:	e7ea      	b.n	800ec5c <_strtoll_l.isra.0+0x114>
 800ec86:	46c0      	nop			@ (mov r8, r8)
 800ec88:	0801c3d1 	.word	0x0801c3d1
 800ec8c:	7fffffff 	.word	0x7fffffff

0800ec90 <strtoll>:
 800ec90:	b510      	push	{r4, lr}
 800ec92:	4c04      	ldr	r4, [pc, #16]	@ (800eca4 <strtoll+0x14>)
 800ec94:	0013      	movs	r3, r2
 800ec96:	000a      	movs	r2, r1
 800ec98:	0001      	movs	r1, r0
 800ec9a:	6820      	ldr	r0, [r4, #0]
 800ec9c:	f7ff ff54 	bl	800eb48 <_strtoll_l.isra.0>
 800eca0:	bd10      	pop	{r4, pc}
 800eca2:	46c0      	nop			@ (mov r8, r8)
 800eca4:	20000188 	.word	0x20000188

0800eca8 <std>:
 800eca8:	2300      	movs	r3, #0
 800ecaa:	b510      	push	{r4, lr}
 800ecac:	0004      	movs	r4, r0
 800ecae:	6003      	str	r3, [r0, #0]
 800ecb0:	6043      	str	r3, [r0, #4]
 800ecb2:	6083      	str	r3, [r0, #8]
 800ecb4:	8181      	strh	r1, [r0, #12]
 800ecb6:	6643      	str	r3, [r0, #100]	@ 0x64
 800ecb8:	81c2      	strh	r2, [r0, #14]
 800ecba:	6103      	str	r3, [r0, #16]
 800ecbc:	6143      	str	r3, [r0, #20]
 800ecbe:	6183      	str	r3, [r0, #24]
 800ecc0:	0019      	movs	r1, r3
 800ecc2:	2208      	movs	r2, #8
 800ecc4:	305c      	adds	r0, #92	@ 0x5c
 800ecc6:	f000 f921 	bl	800ef0c <memset>
 800ecca:	4b0b      	ldr	r3, [pc, #44]	@ (800ecf8 <std+0x50>)
 800eccc:	6224      	str	r4, [r4, #32]
 800ecce:	6263      	str	r3, [r4, #36]	@ 0x24
 800ecd0:	4b0a      	ldr	r3, [pc, #40]	@ (800ecfc <std+0x54>)
 800ecd2:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ecd4:	4b0a      	ldr	r3, [pc, #40]	@ (800ed00 <std+0x58>)
 800ecd6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ecd8:	4b0a      	ldr	r3, [pc, #40]	@ (800ed04 <std+0x5c>)
 800ecda:	6323      	str	r3, [r4, #48]	@ 0x30
 800ecdc:	4b0a      	ldr	r3, [pc, #40]	@ (800ed08 <std+0x60>)
 800ecde:	429c      	cmp	r4, r3
 800ece0:	d005      	beq.n	800ecee <std+0x46>
 800ece2:	4b0a      	ldr	r3, [pc, #40]	@ (800ed0c <std+0x64>)
 800ece4:	429c      	cmp	r4, r3
 800ece6:	d002      	beq.n	800ecee <std+0x46>
 800ece8:	4b09      	ldr	r3, [pc, #36]	@ (800ed10 <std+0x68>)
 800ecea:	429c      	cmp	r4, r3
 800ecec:	d103      	bne.n	800ecf6 <std+0x4e>
 800ecee:	0020      	movs	r0, r4
 800ecf0:	3058      	adds	r0, #88	@ 0x58
 800ecf2:	f000 f99d 	bl	800f030 <__retarget_lock_init_recursive>
 800ecf6:	bd10      	pop	{r4, pc}
 800ecf8:	0800ee75 	.word	0x0800ee75
 800ecfc:	0800ee9d 	.word	0x0800ee9d
 800ed00:	0800eed5 	.word	0x0800eed5
 800ed04:	0800ef01 	.word	0x0800ef01
 800ed08:	200014f8 	.word	0x200014f8
 800ed0c:	20001560 	.word	0x20001560
 800ed10:	200015c8 	.word	0x200015c8

0800ed14 <stdio_exit_handler>:
 800ed14:	b510      	push	{r4, lr}
 800ed16:	4a03      	ldr	r2, [pc, #12]	@ (800ed24 <stdio_exit_handler+0x10>)
 800ed18:	4903      	ldr	r1, [pc, #12]	@ (800ed28 <stdio_exit_handler+0x14>)
 800ed1a:	4804      	ldr	r0, [pc, #16]	@ (800ed2c <stdio_exit_handler+0x18>)
 800ed1c:	f000 f86c 	bl	800edf8 <_fwalk_sglue>
 800ed20:	bd10      	pop	{r4, pc}
 800ed22:	46c0      	nop			@ (mov r8, r8)
 800ed24:	20000010 	.word	0x20000010
 800ed28:	08010c0d 	.word	0x08010c0d
 800ed2c:	2000018c 	.word	0x2000018c

0800ed30 <cleanup_stdio>:
 800ed30:	6841      	ldr	r1, [r0, #4]
 800ed32:	4b0b      	ldr	r3, [pc, #44]	@ (800ed60 <cleanup_stdio+0x30>)
 800ed34:	b510      	push	{r4, lr}
 800ed36:	0004      	movs	r4, r0
 800ed38:	4299      	cmp	r1, r3
 800ed3a:	d001      	beq.n	800ed40 <cleanup_stdio+0x10>
 800ed3c:	f001 ff66 	bl	8010c0c <_fflush_r>
 800ed40:	68a1      	ldr	r1, [r4, #8]
 800ed42:	4b08      	ldr	r3, [pc, #32]	@ (800ed64 <cleanup_stdio+0x34>)
 800ed44:	4299      	cmp	r1, r3
 800ed46:	d002      	beq.n	800ed4e <cleanup_stdio+0x1e>
 800ed48:	0020      	movs	r0, r4
 800ed4a:	f001 ff5f 	bl	8010c0c <_fflush_r>
 800ed4e:	68e1      	ldr	r1, [r4, #12]
 800ed50:	4b05      	ldr	r3, [pc, #20]	@ (800ed68 <cleanup_stdio+0x38>)
 800ed52:	4299      	cmp	r1, r3
 800ed54:	d002      	beq.n	800ed5c <cleanup_stdio+0x2c>
 800ed56:	0020      	movs	r0, r4
 800ed58:	f001 ff58 	bl	8010c0c <_fflush_r>
 800ed5c:	bd10      	pop	{r4, pc}
 800ed5e:	46c0      	nop			@ (mov r8, r8)
 800ed60:	200014f8 	.word	0x200014f8
 800ed64:	20001560 	.word	0x20001560
 800ed68:	200015c8 	.word	0x200015c8

0800ed6c <global_stdio_init.part.0>:
 800ed6c:	b510      	push	{r4, lr}
 800ed6e:	4b09      	ldr	r3, [pc, #36]	@ (800ed94 <global_stdio_init.part.0+0x28>)
 800ed70:	4a09      	ldr	r2, [pc, #36]	@ (800ed98 <global_stdio_init.part.0+0x2c>)
 800ed72:	2104      	movs	r1, #4
 800ed74:	601a      	str	r2, [r3, #0]
 800ed76:	4809      	ldr	r0, [pc, #36]	@ (800ed9c <global_stdio_init.part.0+0x30>)
 800ed78:	2200      	movs	r2, #0
 800ed7a:	f7ff ff95 	bl	800eca8 <std>
 800ed7e:	2201      	movs	r2, #1
 800ed80:	2109      	movs	r1, #9
 800ed82:	4807      	ldr	r0, [pc, #28]	@ (800eda0 <global_stdio_init.part.0+0x34>)
 800ed84:	f7ff ff90 	bl	800eca8 <std>
 800ed88:	2202      	movs	r2, #2
 800ed8a:	2112      	movs	r1, #18
 800ed8c:	4805      	ldr	r0, [pc, #20]	@ (800eda4 <global_stdio_init.part.0+0x38>)
 800ed8e:	f7ff ff8b 	bl	800eca8 <std>
 800ed92:	bd10      	pop	{r4, pc}
 800ed94:	20001630 	.word	0x20001630
 800ed98:	0800ed15 	.word	0x0800ed15
 800ed9c:	200014f8 	.word	0x200014f8
 800eda0:	20001560 	.word	0x20001560
 800eda4:	200015c8 	.word	0x200015c8

0800eda8 <__sfp_lock_acquire>:
 800eda8:	b510      	push	{r4, lr}
 800edaa:	4802      	ldr	r0, [pc, #8]	@ (800edb4 <__sfp_lock_acquire+0xc>)
 800edac:	f000 f941 	bl	800f032 <__retarget_lock_acquire_recursive>
 800edb0:	bd10      	pop	{r4, pc}
 800edb2:	46c0      	nop			@ (mov r8, r8)
 800edb4:	20001639 	.word	0x20001639

0800edb8 <__sfp_lock_release>:
 800edb8:	b510      	push	{r4, lr}
 800edba:	4802      	ldr	r0, [pc, #8]	@ (800edc4 <__sfp_lock_release+0xc>)
 800edbc:	f000 f93a 	bl	800f034 <__retarget_lock_release_recursive>
 800edc0:	bd10      	pop	{r4, pc}
 800edc2:	46c0      	nop			@ (mov r8, r8)
 800edc4:	20001639 	.word	0x20001639

0800edc8 <__sinit>:
 800edc8:	b510      	push	{r4, lr}
 800edca:	0004      	movs	r4, r0
 800edcc:	f7ff ffec 	bl	800eda8 <__sfp_lock_acquire>
 800edd0:	6a23      	ldr	r3, [r4, #32]
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d002      	beq.n	800eddc <__sinit+0x14>
 800edd6:	f7ff ffef 	bl	800edb8 <__sfp_lock_release>
 800edda:	bd10      	pop	{r4, pc}
 800eddc:	4b04      	ldr	r3, [pc, #16]	@ (800edf0 <__sinit+0x28>)
 800edde:	6223      	str	r3, [r4, #32]
 800ede0:	4b04      	ldr	r3, [pc, #16]	@ (800edf4 <__sinit+0x2c>)
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d1f6      	bne.n	800edd6 <__sinit+0xe>
 800ede8:	f7ff ffc0 	bl	800ed6c <global_stdio_init.part.0>
 800edec:	e7f3      	b.n	800edd6 <__sinit+0xe>
 800edee:	46c0      	nop			@ (mov r8, r8)
 800edf0:	0800ed31 	.word	0x0800ed31
 800edf4:	20001630 	.word	0x20001630

0800edf8 <_fwalk_sglue>:
 800edf8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800edfa:	0014      	movs	r4, r2
 800edfc:	2600      	movs	r6, #0
 800edfe:	9000      	str	r0, [sp, #0]
 800ee00:	9101      	str	r1, [sp, #4]
 800ee02:	68a5      	ldr	r5, [r4, #8]
 800ee04:	6867      	ldr	r7, [r4, #4]
 800ee06:	3f01      	subs	r7, #1
 800ee08:	d504      	bpl.n	800ee14 <_fwalk_sglue+0x1c>
 800ee0a:	6824      	ldr	r4, [r4, #0]
 800ee0c:	2c00      	cmp	r4, #0
 800ee0e:	d1f8      	bne.n	800ee02 <_fwalk_sglue+0xa>
 800ee10:	0030      	movs	r0, r6
 800ee12:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ee14:	89ab      	ldrh	r3, [r5, #12]
 800ee16:	2b01      	cmp	r3, #1
 800ee18:	d908      	bls.n	800ee2c <_fwalk_sglue+0x34>
 800ee1a:	220e      	movs	r2, #14
 800ee1c:	5eab      	ldrsh	r3, [r5, r2]
 800ee1e:	3301      	adds	r3, #1
 800ee20:	d004      	beq.n	800ee2c <_fwalk_sglue+0x34>
 800ee22:	0029      	movs	r1, r5
 800ee24:	9800      	ldr	r0, [sp, #0]
 800ee26:	9b01      	ldr	r3, [sp, #4]
 800ee28:	4798      	blx	r3
 800ee2a:	4306      	orrs	r6, r0
 800ee2c:	3568      	adds	r5, #104	@ 0x68
 800ee2e:	e7ea      	b.n	800ee06 <_fwalk_sglue+0xe>

0800ee30 <siprintf>:
 800ee30:	b40e      	push	{r1, r2, r3}
 800ee32:	b510      	push	{r4, lr}
 800ee34:	2400      	movs	r4, #0
 800ee36:	490c      	ldr	r1, [pc, #48]	@ (800ee68 <siprintf+0x38>)
 800ee38:	b09d      	sub	sp, #116	@ 0x74
 800ee3a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800ee3c:	9002      	str	r0, [sp, #8]
 800ee3e:	9006      	str	r0, [sp, #24]
 800ee40:	9107      	str	r1, [sp, #28]
 800ee42:	9104      	str	r1, [sp, #16]
 800ee44:	4809      	ldr	r0, [pc, #36]	@ (800ee6c <siprintf+0x3c>)
 800ee46:	490a      	ldr	r1, [pc, #40]	@ (800ee70 <siprintf+0x40>)
 800ee48:	cb04      	ldmia	r3!, {r2}
 800ee4a:	9105      	str	r1, [sp, #20]
 800ee4c:	6800      	ldr	r0, [r0, #0]
 800ee4e:	a902      	add	r1, sp, #8
 800ee50:	9301      	str	r3, [sp, #4]
 800ee52:	941b      	str	r4, [sp, #108]	@ 0x6c
 800ee54:	f001 fa96 	bl	8010384 <_svfiprintf_r>
 800ee58:	9b02      	ldr	r3, [sp, #8]
 800ee5a:	701c      	strb	r4, [r3, #0]
 800ee5c:	b01d      	add	sp, #116	@ 0x74
 800ee5e:	bc10      	pop	{r4}
 800ee60:	bc08      	pop	{r3}
 800ee62:	b003      	add	sp, #12
 800ee64:	4718      	bx	r3
 800ee66:	46c0      	nop			@ (mov r8, r8)
 800ee68:	7fffffff 	.word	0x7fffffff
 800ee6c:	20000188 	.word	0x20000188
 800ee70:	ffff0208 	.word	0xffff0208

0800ee74 <__sread>:
 800ee74:	b570      	push	{r4, r5, r6, lr}
 800ee76:	000c      	movs	r4, r1
 800ee78:	250e      	movs	r5, #14
 800ee7a:	5f49      	ldrsh	r1, [r1, r5]
 800ee7c:	f000 f886 	bl	800ef8c <_read_r>
 800ee80:	2800      	cmp	r0, #0
 800ee82:	db03      	blt.n	800ee8c <__sread+0x18>
 800ee84:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800ee86:	181b      	adds	r3, r3, r0
 800ee88:	6563      	str	r3, [r4, #84]	@ 0x54
 800ee8a:	bd70      	pop	{r4, r5, r6, pc}
 800ee8c:	89a3      	ldrh	r3, [r4, #12]
 800ee8e:	4a02      	ldr	r2, [pc, #8]	@ (800ee98 <__sread+0x24>)
 800ee90:	4013      	ands	r3, r2
 800ee92:	81a3      	strh	r3, [r4, #12]
 800ee94:	e7f9      	b.n	800ee8a <__sread+0x16>
 800ee96:	46c0      	nop			@ (mov r8, r8)
 800ee98:	ffffefff 	.word	0xffffefff

0800ee9c <__swrite>:
 800ee9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee9e:	001f      	movs	r7, r3
 800eea0:	898b      	ldrh	r3, [r1, #12]
 800eea2:	0005      	movs	r5, r0
 800eea4:	000c      	movs	r4, r1
 800eea6:	0016      	movs	r6, r2
 800eea8:	05db      	lsls	r3, r3, #23
 800eeaa:	d505      	bpl.n	800eeb8 <__swrite+0x1c>
 800eeac:	230e      	movs	r3, #14
 800eeae:	5ec9      	ldrsh	r1, [r1, r3]
 800eeb0:	2200      	movs	r2, #0
 800eeb2:	2302      	movs	r3, #2
 800eeb4:	f000 f856 	bl	800ef64 <_lseek_r>
 800eeb8:	89a3      	ldrh	r3, [r4, #12]
 800eeba:	4a05      	ldr	r2, [pc, #20]	@ (800eed0 <__swrite+0x34>)
 800eebc:	0028      	movs	r0, r5
 800eebe:	4013      	ands	r3, r2
 800eec0:	81a3      	strh	r3, [r4, #12]
 800eec2:	0032      	movs	r2, r6
 800eec4:	230e      	movs	r3, #14
 800eec6:	5ee1      	ldrsh	r1, [r4, r3]
 800eec8:	003b      	movs	r3, r7
 800eeca:	f000 f873 	bl	800efb4 <_write_r>
 800eece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eed0:	ffffefff 	.word	0xffffefff

0800eed4 <__sseek>:
 800eed4:	b570      	push	{r4, r5, r6, lr}
 800eed6:	000c      	movs	r4, r1
 800eed8:	250e      	movs	r5, #14
 800eeda:	5f49      	ldrsh	r1, [r1, r5]
 800eedc:	f000 f842 	bl	800ef64 <_lseek_r>
 800eee0:	89a3      	ldrh	r3, [r4, #12]
 800eee2:	1c42      	adds	r2, r0, #1
 800eee4:	d103      	bne.n	800eeee <__sseek+0x1a>
 800eee6:	4a05      	ldr	r2, [pc, #20]	@ (800eefc <__sseek+0x28>)
 800eee8:	4013      	ands	r3, r2
 800eeea:	81a3      	strh	r3, [r4, #12]
 800eeec:	bd70      	pop	{r4, r5, r6, pc}
 800eeee:	2280      	movs	r2, #128	@ 0x80
 800eef0:	0152      	lsls	r2, r2, #5
 800eef2:	4313      	orrs	r3, r2
 800eef4:	81a3      	strh	r3, [r4, #12]
 800eef6:	6560      	str	r0, [r4, #84]	@ 0x54
 800eef8:	e7f8      	b.n	800eeec <__sseek+0x18>
 800eefa:	46c0      	nop			@ (mov r8, r8)
 800eefc:	ffffefff 	.word	0xffffefff

0800ef00 <__sclose>:
 800ef00:	b510      	push	{r4, lr}
 800ef02:	230e      	movs	r3, #14
 800ef04:	5ec9      	ldrsh	r1, [r1, r3]
 800ef06:	f000 f81b 	bl	800ef40 <_close_r>
 800ef0a:	bd10      	pop	{r4, pc}

0800ef0c <memset>:
 800ef0c:	0003      	movs	r3, r0
 800ef0e:	1882      	adds	r2, r0, r2
 800ef10:	4293      	cmp	r3, r2
 800ef12:	d100      	bne.n	800ef16 <memset+0xa>
 800ef14:	4770      	bx	lr
 800ef16:	7019      	strb	r1, [r3, #0]
 800ef18:	3301      	adds	r3, #1
 800ef1a:	e7f9      	b.n	800ef10 <memset+0x4>

0800ef1c <strncmp>:
 800ef1c:	b530      	push	{r4, r5, lr}
 800ef1e:	0005      	movs	r5, r0
 800ef20:	1e10      	subs	r0, r2, #0
 800ef22:	d00b      	beq.n	800ef3c <strncmp+0x20>
 800ef24:	2400      	movs	r4, #0
 800ef26:	3a01      	subs	r2, #1
 800ef28:	5d2b      	ldrb	r3, [r5, r4]
 800ef2a:	5d08      	ldrb	r0, [r1, r4]
 800ef2c:	4283      	cmp	r3, r0
 800ef2e:	d104      	bne.n	800ef3a <strncmp+0x1e>
 800ef30:	4294      	cmp	r4, r2
 800ef32:	d002      	beq.n	800ef3a <strncmp+0x1e>
 800ef34:	3401      	adds	r4, #1
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d1f6      	bne.n	800ef28 <strncmp+0xc>
 800ef3a:	1a18      	subs	r0, r3, r0
 800ef3c:	bd30      	pop	{r4, r5, pc}
	...

0800ef40 <_close_r>:
 800ef40:	2300      	movs	r3, #0
 800ef42:	b570      	push	{r4, r5, r6, lr}
 800ef44:	4d06      	ldr	r5, [pc, #24]	@ (800ef60 <_close_r+0x20>)
 800ef46:	0004      	movs	r4, r0
 800ef48:	0008      	movs	r0, r1
 800ef4a:	602b      	str	r3, [r5, #0]
 800ef4c:	f7f9 f9b5 	bl	80082ba <_close>
 800ef50:	1c43      	adds	r3, r0, #1
 800ef52:	d103      	bne.n	800ef5c <_close_r+0x1c>
 800ef54:	682b      	ldr	r3, [r5, #0]
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d000      	beq.n	800ef5c <_close_r+0x1c>
 800ef5a:	6023      	str	r3, [r4, #0]
 800ef5c:	bd70      	pop	{r4, r5, r6, pc}
 800ef5e:	46c0      	nop			@ (mov r8, r8)
 800ef60:	20001634 	.word	0x20001634

0800ef64 <_lseek_r>:
 800ef64:	b570      	push	{r4, r5, r6, lr}
 800ef66:	0004      	movs	r4, r0
 800ef68:	0008      	movs	r0, r1
 800ef6a:	0011      	movs	r1, r2
 800ef6c:	001a      	movs	r2, r3
 800ef6e:	2300      	movs	r3, #0
 800ef70:	4d05      	ldr	r5, [pc, #20]	@ (800ef88 <_lseek_r+0x24>)
 800ef72:	602b      	str	r3, [r5, #0]
 800ef74:	f7f9 f9c2 	bl	80082fc <_lseek>
 800ef78:	1c43      	adds	r3, r0, #1
 800ef7a:	d103      	bne.n	800ef84 <_lseek_r+0x20>
 800ef7c:	682b      	ldr	r3, [r5, #0]
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d000      	beq.n	800ef84 <_lseek_r+0x20>
 800ef82:	6023      	str	r3, [r4, #0]
 800ef84:	bd70      	pop	{r4, r5, r6, pc}
 800ef86:	46c0      	nop			@ (mov r8, r8)
 800ef88:	20001634 	.word	0x20001634

0800ef8c <_read_r>:
 800ef8c:	b570      	push	{r4, r5, r6, lr}
 800ef8e:	0004      	movs	r4, r0
 800ef90:	0008      	movs	r0, r1
 800ef92:	0011      	movs	r1, r2
 800ef94:	001a      	movs	r2, r3
 800ef96:	2300      	movs	r3, #0
 800ef98:	4d05      	ldr	r5, [pc, #20]	@ (800efb0 <_read_r+0x24>)
 800ef9a:	602b      	str	r3, [r5, #0]
 800ef9c:	f7f9 f954 	bl	8008248 <_read>
 800efa0:	1c43      	adds	r3, r0, #1
 800efa2:	d103      	bne.n	800efac <_read_r+0x20>
 800efa4:	682b      	ldr	r3, [r5, #0]
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d000      	beq.n	800efac <_read_r+0x20>
 800efaa:	6023      	str	r3, [r4, #0]
 800efac:	bd70      	pop	{r4, r5, r6, pc}
 800efae:	46c0      	nop			@ (mov r8, r8)
 800efb0:	20001634 	.word	0x20001634

0800efb4 <_write_r>:
 800efb4:	b570      	push	{r4, r5, r6, lr}
 800efb6:	0004      	movs	r4, r0
 800efb8:	0008      	movs	r0, r1
 800efba:	0011      	movs	r1, r2
 800efbc:	001a      	movs	r2, r3
 800efbe:	2300      	movs	r3, #0
 800efc0:	4d05      	ldr	r5, [pc, #20]	@ (800efd8 <_write_r+0x24>)
 800efc2:	602b      	str	r3, [r5, #0]
 800efc4:	f7f9 f95d 	bl	8008282 <_write>
 800efc8:	1c43      	adds	r3, r0, #1
 800efca:	d103      	bne.n	800efd4 <_write_r+0x20>
 800efcc:	682b      	ldr	r3, [r5, #0]
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d000      	beq.n	800efd4 <_write_r+0x20>
 800efd2:	6023      	str	r3, [r4, #0]
 800efd4:	bd70      	pop	{r4, r5, r6, pc}
 800efd6:	46c0      	nop			@ (mov r8, r8)
 800efd8:	20001634 	.word	0x20001634

0800efdc <__errno>:
 800efdc:	4b01      	ldr	r3, [pc, #4]	@ (800efe4 <__errno+0x8>)
 800efde:	6818      	ldr	r0, [r3, #0]
 800efe0:	4770      	bx	lr
 800efe2:	46c0      	nop			@ (mov r8, r8)
 800efe4:	20000188 	.word	0x20000188

0800efe8 <__libc_init_array>:
 800efe8:	b570      	push	{r4, r5, r6, lr}
 800efea:	2600      	movs	r6, #0
 800efec:	4c0c      	ldr	r4, [pc, #48]	@ (800f020 <__libc_init_array+0x38>)
 800efee:	4d0d      	ldr	r5, [pc, #52]	@ (800f024 <__libc_init_array+0x3c>)
 800eff0:	1b64      	subs	r4, r4, r5
 800eff2:	10a4      	asrs	r4, r4, #2
 800eff4:	42a6      	cmp	r6, r4
 800eff6:	d109      	bne.n	800f00c <__libc_init_array+0x24>
 800eff8:	2600      	movs	r6, #0
 800effa:	f002 facd 	bl	8011598 <_init>
 800effe:	4c0a      	ldr	r4, [pc, #40]	@ (800f028 <__libc_init_array+0x40>)
 800f000:	4d0a      	ldr	r5, [pc, #40]	@ (800f02c <__libc_init_array+0x44>)
 800f002:	1b64      	subs	r4, r4, r5
 800f004:	10a4      	asrs	r4, r4, #2
 800f006:	42a6      	cmp	r6, r4
 800f008:	d105      	bne.n	800f016 <__libc_init_array+0x2e>
 800f00a:	bd70      	pop	{r4, r5, r6, pc}
 800f00c:	00b3      	lsls	r3, r6, #2
 800f00e:	58eb      	ldr	r3, [r5, r3]
 800f010:	4798      	blx	r3
 800f012:	3601      	adds	r6, #1
 800f014:	e7ee      	b.n	800eff4 <__libc_init_array+0xc>
 800f016:	00b3      	lsls	r3, r6, #2
 800f018:	58eb      	ldr	r3, [r5, r3]
 800f01a:	4798      	blx	r3
 800f01c:	3601      	adds	r6, #1
 800f01e:	e7f2      	b.n	800f006 <__libc_init_array+0x1e>
 800f020:	0801c5f8 	.word	0x0801c5f8
 800f024:	0801c5f8 	.word	0x0801c5f8
 800f028:	0801c5fc 	.word	0x0801c5fc
 800f02c:	0801c5f8 	.word	0x0801c5f8

0800f030 <__retarget_lock_init_recursive>:
 800f030:	4770      	bx	lr

0800f032 <__retarget_lock_acquire_recursive>:
 800f032:	4770      	bx	lr

0800f034 <__retarget_lock_release_recursive>:
 800f034:	4770      	bx	lr

0800f036 <memcpy>:
 800f036:	2300      	movs	r3, #0
 800f038:	b510      	push	{r4, lr}
 800f03a:	429a      	cmp	r2, r3
 800f03c:	d100      	bne.n	800f040 <memcpy+0xa>
 800f03e:	bd10      	pop	{r4, pc}
 800f040:	5ccc      	ldrb	r4, [r1, r3]
 800f042:	54c4      	strb	r4, [r0, r3]
 800f044:	3301      	adds	r3, #1
 800f046:	e7f8      	b.n	800f03a <memcpy+0x4>

0800f048 <nan>:
 800f048:	2000      	movs	r0, #0
 800f04a:	4901      	ldr	r1, [pc, #4]	@ (800f050 <nan+0x8>)
 800f04c:	4770      	bx	lr
 800f04e:	46c0      	nop			@ (mov r8, r8)
 800f050:	7ff80000 	.word	0x7ff80000

0800f054 <_free_r>:
 800f054:	b570      	push	{r4, r5, r6, lr}
 800f056:	0005      	movs	r5, r0
 800f058:	1e0c      	subs	r4, r1, #0
 800f05a:	d010      	beq.n	800f07e <_free_r+0x2a>
 800f05c:	3c04      	subs	r4, #4
 800f05e:	6823      	ldr	r3, [r4, #0]
 800f060:	2b00      	cmp	r3, #0
 800f062:	da00      	bge.n	800f066 <_free_r+0x12>
 800f064:	18e4      	adds	r4, r4, r3
 800f066:	0028      	movs	r0, r5
 800f068:	f000 fc4c 	bl	800f904 <__malloc_lock>
 800f06c:	4a1d      	ldr	r2, [pc, #116]	@ (800f0e4 <_free_r+0x90>)
 800f06e:	6813      	ldr	r3, [r2, #0]
 800f070:	2b00      	cmp	r3, #0
 800f072:	d105      	bne.n	800f080 <_free_r+0x2c>
 800f074:	6063      	str	r3, [r4, #4]
 800f076:	6014      	str	r4, [r2, #0]
 800f078:	0028      	movs	r0, r5
 800f07a:	f000 fc4b 	bl	800f914 <__malloc_unlock>
 800f07e:	bd70      	pop	{r4, r5, r6, pc}
 800f080:	42a3      	cmp	r3, r4
 800f082:	d908      	bls.n	800f096 <_free_r+0x42>
 800f084:	6820      	ldr	r0, [r4, #0]
 800f086:	1821      	adds	r1, r4, r0
 800f088:	428b      	cmp	r3, r1
 800f08a:	d1f3      	bne.n	800f074 <_free_r+0x20>
 800f08c:	6819      	ldr	r1, [r3, #0]
 800f08e:	685b      	ldr	r3, [r3, #4]
 800f090:	1809      	adds	r1, r1, r0
 800f092:	6021      	str	r1, [r4, #0]
 800f094:	e7ee      	b.n	800f074 <_free_r+0x20>
 800f096:	001a      	movs	r2, r3
 800f098:	685b      	ldr	r3, [r3, #4]
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d001      	beq.n	800f0a2 <_free_r+0x4e>
 800f09e:	42a3      	cmp	r3, r4
 800f0a0:	d9f9      	bls.n	800f096 <_free_r+0x42>
 800f0a2:	6811      	ldr	r1, [r2, #0]
 800f0a4:	1850      	adds	r0, r2, r1
 800f0a6:	42a0      	cmp	r0, r4
 800f0a8:	d10b      	bne.n	800f0c2 <_free_r+0x6e>
 800f0aa:	6820      	ldr	r0, [r4, #0]
 800f0ac:	1809      	adds	r1, r1, r0
 800f0ae:	1850      	adds	r0, r2, r1
 800f0b0:	6011      	str	r1, [r2, #0]
 800f0b2:	4283      	cmp	r3, r0
 800f0b4:	d1e0      	bne.n	800f078 <_free_r+0x24>
 800f0b6:	6818      	ldr	r0, [r3, #0]
 800f0b8:	685b      	ldr	r3, [r3, #4]
 800f0ba:	1841      	adds	r1, r0, r1
 800f0bc:	6011      	str	r1, [r2, #0]
 800f0be:	6053      	str	r3, [r2, #4]
 800f0c0:	e7da      	b.n	800f078 <_free_r+0x24>
 800f0c2:	42a0      	cmp	r0, r4
 800f0c4:	d902      	bls.n	800f0cc <_free_r+0x78>
 800f0c6:	230c      	movs	r3, #12
 800f0c8:	602b      	str	r3, [r5, #0]
 800f0ca:	e7d5      	b.n	800f078 <_free_r+0x24>
 800f0cc:	6820      	ldr	r0, [r4, #0]
 800f0ce:	1821      	adds	r1, r4, r0
 800f0d0:	428b      	cmp	r3, r1
 800f0d2:	d103      	bne.n	800f0dc <_free_r+0x88>
 800f0d4:	6819      	ldr	r1, [r3, #0]
 800f0d6:	685b      	ldr	r3, [r3, #4]
 800f0d8:	1809      	adds	r1, r1, r0
 800f0da:	6021      	str	r1, [r4, #0]
 800f0dc:	6063      	str	r3, [r4, #4]
 800f0de:	6054      	str	r4, [r2, #4]
 800f0e0:	e7ca      	b.n	800f078 <_free_r+0x24>
 800f0e2:	46c0      	nop			@ (mov r8, r8)
 800f0e4:	20001640 	.word	0x20001640

0800f0e8 <rshift>:
 800f0e8:	0002      	movs	r2, r0
 800f0ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f0ec:	6904      	ldr	r4, [r0, #16]
 800f0ee:	b085      	sub	sp, #20
 800f0f0:	3214      	adds	r2, #20
 800f0f2:	114b      	asrs	r3, r1, #5
 800f0f4:	0016      	movs	r6, r2
 800f0f6:	9302      	str	r3, [sp, #8]
 800f0f8:	429c      	cmp	r4, r3
 800f0fa:	dd31      	ble.n	800f160 <rshift+0x78>
 800f0fc:	261f      	movs	r6, #31
 800f0fe:	000f      	movs	r7, r1
 800f100:	009b      	lsls	r3, r3, #2
 800f102:	00a5      	lsls	r5, r4, #2
 800f104:	18d3      	adds	r3, r2, r3
 800f106:	4037      	ands	r7, r6
 800f108:	1955      	adds	r5, r2, r5
 800f10a:	9300      	str	r3, [sp, #0]
 800f10c:	9701      	str	r7, [sp, #4]
 800f10e:	4231      	tst	r1, r6
 800f110:	d10d      	bne.n	800f12e <rshift+0x46>
 800f112:	0016      	movs	r6, r2
 800f114:	0019      	movs	r1, r3
 800f116:	428d      	cmp	r5, r1
 800f118:	d836      	bhi.n	800f188 <rshift+0xa0>
 800f11a:	9b00      	ldr	r3, [sp, #0]
 800f11c:	2600      	movs	r6, #0
 800f11e:	3b03      	subs	r3, #3
 800f120:	429d      	cmp	r5, r3
 800f122:	d302      	bcc.n	800f12a <rshift+0x42>
 800f124:	9b02      	ldr	r3, [sp, #8]
 800f126:	1ae4      	subs	r4, r4, r3
 800f128:	00a6      	lsls	r6, r4, #2
 800f12a:	1996      	adds	r6, r2, r6
 800f12c:	e018      	b.n	800f160 <rshift+0x78>
 800f12e:	2120      	movs	r1, #32
 800f130:	9e01      	ldr	r6, [sp, #4]
 800f132:	9f01      	ldr	r7, [sp, #4]
 800f134:	1b89      	subs	r1, r1, r6
 800f136:	9e00      	ldr	r6, [sp, #0]
 800f138:	9103      	str	r1, [sp, #12]
 800f13a:	ce02      	ldmia	r6!, {r1}
 800f13c:	4694      	mov	ip, r2
 800f13e:	40f9      	lsrs	r1, r7
 800f140:	42b5      	cmp	r5, r6
 800f142:	d816      	bhi.n	800f172 <rshift+0x8a>
 800f144:	9b00      	ldr	r3, [sp, #0]
 800f146:	2600      	movs	r6, #0
 800f148:	3301      	adds	r3, #1
 800f14a:	429d      	cmp	r5, r3
 800f14c:	d303      	bcc.n	800f156 <rshift+0x6e>
 800f14e:	9b02      	ldr	r3, [sp, #8]
 800f150:	1ae4      	subs	r4, r4, r3
 800f152:	00a6      	lsls	r6, r4, #2
 800f154:	3e04      	subs	r6, #4
 800f156:	1996      	adds	r6, r2, r6
 800f158:	6031      	str	r1, [r6, #0]
 800f15a:	2900      	cmp	r1, #0
 800f15c:	d000      	beq.n	800f160 <rshift+0x78>
 800f15e:	3604      	adds	r6, #4
 800f160:	1ab1      	subs	r1, r6, r2
 800f162:	1089      	asrs	r1, r1, #2
 800f164:	6101      	str	r1, [r0, #16]
 800f166:	4296      	cmp	r6, r2
 800f168:	d101      	bne.n	800f16e <rshift+0x86>
 800f16a:	2300      	movs	r3, #0
 800f16c:	6143      	str	r3, [r0, #20]
 800f16e:	b005      	add	sp, #20
 800f170:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f172:	6837      	ldr	r7, [r6, #0]
 800f174:	9b03      	ldr	r3, [sp, #12]
 800f176:	409f      	lsls	r7, r3
 800f178:	430f      	orrs	r7, r1
 800f17a:	4661      	mov	r1, ip
 800f17c:	c180      	stmia	r1!, {r7}
 800f17e:	468c      	mov	ip, r1
 800f180:	9b01      	ldr	r3, [sp, #4]
 800f182:	ce02      	ldmia	r6!, {r1}
 800f184:	40d9      	lsrs	r1, r3
 800f186:	e7db      	b.n	800f140 <rshift+0x58>
 800f188:	c980      	ldmia	r1!, {r7}
 800f18a:	c680      	stmia	r6!, {r7}
 800f18c:	e7c3      	b.n	800f116 <rshift+0x2e>

0800f18e <__hexdig_fun>:
 800f18e:	0002      	movs	r2, r0
 800f190:	3a30      	subs	r2, #48	@ 0x30
 800f192:	0003      	movs	r3, r0
 800f194:	2a09      	cmp	r2, #9
 800f196:	d802      	bhi.n	800f19e <__hexdig_fun+0x10>
 800f198:	3b20      	subs	r3, #32
 800f19a:	b2d8      	uxtb	r0, r3
 800f19c:	4770      	bx	lr
 800f19e:	0002      	movs	r2, r0
 800f1a0:	3a61      	subs	r2, #97	@ 0x61
 800f1a2:	2a05      	cmp	r2, #5
 800f1a4:	d801      	bhi.n	800f1aa <__hexdig_fun+0x1c>
 800f1a6:	3b47      	subs	r3, #71	@ 0x47
 800f1a8:	e7f7      	b.n	800f19a <__hexdig_fun+0xc>
 800f1aa:	001a      	movs	r2, r3
 800f1ac:	3a41      	subs	r2, #65	@ 0x41
 800f1ae:	2000      	movs	r0, #0
 800f1b0:	2a05      	cmp	r2, #5
 800f1b2:	d8f3      	bhi.n	800f19c <__hexdig_fun+0xe>
 800f1b4:	3b27      	subs	r3, #39	@ 0x27
 800f1b6:	e7f0      	b.n	800f19a <__hexdig_fun+0xc>

0800f1b8 <__gethex>:
 800f1b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f1ba:	b089      	sub	sp, #36	@ 0x24
 800f1bc:	9307      	str	r3, [sp, #28]
 800f1be:	680b      	ldr	r3, [r1, #0]
 800f1c0:	9201      	str	r2, [sp, #4]
 800f1c2:	9003      	str	r0, [sp, #12]
 800f1c4:	9106      	str	r1, [sp, #24]
 800f1c6:	1c9a      	adds	r2, r3, #2
 800f1c8:	0011      	movs	r1, r2
 800f1ca:	3201      	adds	r2, #1
 800f1cc:	1e50      	subs	r0, r2, #1
 800f1ce:	7800      	ldrb	r0, [r0, #0]
 800f1d0:	2830      	cmp	r0, #48	@ 0x30
 800f1d2:	d0f9      	beq.n	800f1c8 <__gethex+0x10>
 800f1d4:	1acb      	subs	r3, r1, r3
 800f1d6:	3b02      	subs	r3, #2
 800f1d8:	9305      	str	r3, [sp, #20]
 800f1da:	9100      	str	r1, [sp, #0]
 800f1dc:	f7ff ffd7 	bl	800f18e <__hexdig_fun>
 800f1e0:	2300      	movs	r3, #0
 800f1e2:	001d      	movs	r5, r3
 800f1e4:	9302      	str	r3, [sp, #8]
 800f1e6:	4298      	cmp	r0, r3
 800f1e8:	d11e      	bne.n	800f228 <__gethex+0x70>
 800f1ea:	2201      	movs	r2, #1
 800f1ec:	49a6      	ldr	r1, [pc, #664]	@ (800f488 <__gethex+0x2d0>)
 800f1ee:	9800      	ldr	r0, [sp, #0]
 800f1f0:	f7ff fe94 	bl	800ef1c <strncmp>
 800f1f4:	0007      	movs	r7, r0
 800f1f6:	42a8      	cmp	r0, r5
 800f1f8:	d000      	beq.n	800f1fc <__gethex+0x44>
 800f1fa:	e06a      	b.n	800f2d2 <__gethex+0x11a>
 800f1fc:	9b00      	ldr	r3, [sp, #0]
 800f1fe:	7858      	ldrb	r0, [r3, #1]
 800f200:	1c5c      	adds	r4, r3, #1
 800f202:	f7ff ffc4 	bl	800f18e <__hexdig_fun>
 800f206:	2301      	movs	r3, #1
 800f208:	9302      	str	r3, [sp, #8]
 800f20a:	42a8      	cmp	r0, r5
 800f20c:	d02f      	beq.n	800f26e <__gethex+0xb6>
 800f20e:	9400      	str	r4, [sp, #0]
 800f210:	9b00      	ldr	r3, [sp, #0]
 800f212:	7818      	ldrb	r0, [r3, #0]
 800f214:	2830      	cmp	r0, #48	@ 0x30
 800f216:	d009      	beq.n	800f22c <__gethex+0x74>
 800f218:	f7ff ffb9 	bl	800f18e <__hexdig_fun>
 800f21c:	4242      	negs	r2, r0
 800f21e:	4142      	adcs	r2, r0
 800f220:	2301      	movs	r3, #1
 800f222:	0025      	movs	r5, r4
 800f224:	9202      	str	r2, [sp, #8]
 800f226:	9305      	str	r3, [sp, #20]
 800f228:	9c00      	ldr	r4, [sp, #0]
 800f22a:	e004      	b.n	800f236 <__gethex+0x7e>
 800f22c:	9b00      	ldr	r3, [sp, #0]
 800f22e:	3301      	adds	r3, #1
 800f230:	9300      	str	r3, [sp, #0]
 800f232:	e7ed      	b.n	800f210 <__gethex+0x58>
 800f234:	3401      	adds	r4, #1
 800f236:	7820      	ldrb	r0, [r4, #0]
 800f238:	f7ff ffa9 	bl	800f18e <__hexdig_fun>
 800f23c:	1e07      	subs	r7, r0, #0
 800f23e:	d1f9      	bne.n	800f234 <__gethex+0x7c>
 800f240:	2201      	movs	r2, #1
 800f242:	0020      	movs	r0, r4
 800f244:	4990      	ldr	r1, [pc, #576]	@ (800f488 <__gethex+0x2d0>)
 800f246:	f7ff fe69 	bl	800ef1c <strncmp>
 800f24a:	2800      	cmp	r0, #0
 800f24c:	d10d      	bne.n	800f26a <__gethex+0xb2>
 800f24e:	2d00      	cmp	r5, #0
 800f250:	d106      	bne.n	800f260 <__gethex+0xa8>
 800f252:	3401      	adds	r4, #1
 800f254:	0025      	movs	r5, r4
 800f256:	7820      	ldrb	r0, [r4, #0]
 800f258:	f7ff ff99 	bl	800f18e <__hexdig_fun>
 800f25c:	2800      	cmp	r0, #0
 800f25e:	d102      	bne.n	800f266 <__gethex+0xae>
 800f260:	1b2d      	subs	r5, r5, r4
 800f262:	00af      	lsls	r7, r5, #2
 800f264:	e003      	b.n	800f26e <__gethex+0xb6>
 800f266:	3401      	adds	r4, #1
 800f268:	e7f5      	b.n	800f256 <__gethex+0x9e>
 800f26a:	2d00      	cmp	r5, #0
 800f26c:	d1f8      	bne.n	800f260 <__gethex+0xa8>
 800f26e:	2220      	movs	r2, #32
 800f270:	7823      	ldrb	r3, [r4, #0]
 800f272:	0026      	movs	r6, r4
 800f274:	4393      	bics	r3, r2
 800f276:	2b50      	cmp	r3, #80	@ 0x50
 800f278:	d11d      	bne.n	800f2b6 <__gethex+0xfe>
 800f27a:	7863      	ldrb	r3, [r4, #1]
 800f27c:	2b2b      	cmp	r3, #43	@ 0x2b
 800f27e:	d02d      	beq.n	800f2dc <__gethex+0x124>
 800f280:	2b2d      	cmp	r3, #45	@ 0x2d
 800f282:	d02f      	beq.n	800f2e4 <__gethex+0x12c>
 800f284:	2300      	movs	r3, #0
 800f286:	1c66      	adds	r6, r4, #1
 800f288:	9304      	str	r3, [sp, #16]
 800f28a:	7830      	ldrb	r0, [r6, #0]
 800f28c:	f7ff ff7f 	bl	800f18e <__hexdig_fun>
 800f290:	1e43      	subs	r3, r0, #1
 800f292:	b2db      	uxtb	r3, r3
 800f294:	0005      	movs	r5, r0
 800f296:	2b18      	cmp	r3, #24
 800f298:	d82a      	bhi.n	800f2f0 <__gethex+0x138>
 800f29a:	7870      	ldrb	r0, [r6, #1]
 800f29c:	f7ff ff77 	bl	800f18e <__hexdig_fun>
 800f2a0:	1e43      	subs	r3, r0, #1
 800f2a2:	b2db      	uxtb	r3, r3
 800f2a4:	3601      	adds	r6, #1
 800f2a6:	3d10      	subs	r5, #16
 800f2a8:	2b18      	cmp	r3, #24
 800f2aa:	d91d      	bls.n	800f2e8 <__gethex+0x130>
 800f2ac:	9b04      	ldr	r3, [sp, #16]
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d000      	beq.n	800f2b4 <__gethex+0xfc>
 800f2b2:	426d      	negs	r5, r5
 800f2b4:	197f      	adds	r7, r7, r5
 800f2b6:	9b06      	ldr	r3, [sp, #24]
 800f2b8:	601e      	str	r6, [r3, #0]
 800f2ba:	9b02      	ldr	r3, [sp, #8]
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d019      	beq.n	800f2f4 <__gethex+0x13c>
 800f2c0:	9b05      	ldr	r3, [sp, #20]
 800f2c2:	2606      	movs	r6, #6
 800f2c4:	425a      	negs	r2, r3
 800f2c6:	4153      	adcs	r3, r2
 800f2c8:	425b      	negs	r3, r3
 800f2ca:	401e      	ands	r6, r3
 800f2cc:	0030      	movs	r0, r6
 800f2ce:	b009      	add	sp, #36	@ 0x24
 800f2d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f2d2:	2301      	movs	r3, #1
 800f2d4:	2700      	movs	r7, #0
 800f2d6:	9c00      	ldr	r4, [sp, #0]
 800f2d8:	9302      	str	r3, [sp, #8]
 800f2da:	e7c8      	b.n	800f26e <__gethex+0xb6>
 800f2dc:	2300      	movs	r3, #0
 800f2de:	9304      	str	r3, [sp, #16]
 800f2e0:	1ca6      	adds	r6, r4, #2
 800f2e2:	e7d2      	b.n	800f28a <__gethex+0xd2>
 800f2e4:	2301      	movs	r3, #1
 800f2e6:	e7fa      	b.n	800f2de <__gethex+0x126>
 800f2e8:	230a      	movs	r3, #10
 800f2ea:	435d      	muls	r5, r3
 800f2ec:	182d      	adds	r5, r5, r0
 800f2ee:	e7d4      	b.n	800f29a <__gethex+0xe2>
 800f2f0:	0026      	movs	r6, r4
 800f2f2:	e7e0      	b.n	800f2b6 <__gethex+0xfe>
 800f2f4:	9b00      	ldr	r3, [sp, #0]
 800f2f6:	9902      	ldr	r1, [sp, #8]
 800f2f8:	1ae3      	subs	r3, r4, r3
 800f2fa:	3b01      	subs	r3, #1
 800f2fc:	2b07      	cmp	r3, #7
 800f2fe:	dc0a      	bgt.n	800f316 <__gethex+0x15e>
 800f300:	9803      	ldr	r0, [sp, #12]
 800f302:	f000 fb0f 	bl	800f924 <_Balloc>
 800f306:	1e05      	subs	r5, r0, #0
 800f308:	d108      	bne.n	800f31c <__gethex+0x164>
 800f30a:	002a      	movs	r2, r5
 800f30c:	21e4      	movs	r1, #228	@ 0xe4
 800f30e:	4b5f      	ldr	r3, [pc, #380]	@ (800f48c <__gethex+0x2d4>)
 800f310:	485f      	ldr	r0, [pc, #380]	@ (800f490 <__gethex+0x2d8>)
 800f312:	f001 fd77 	bl	8010e04 <__assert_func>
 800f316:	3101      	adds	r1, #1
 800f318:	105b      	asrs	r3, r3, #1
 800f31a:	e7ef      	b.n	800f2fc <__gethex+0x144>
 800f31c:	0003      	movs	r3, r0
 800f31e:	3314      	adds	r3, #20
 800f320:	9302      	str	r3, [sp, #8]
 800f322:	9305      	str	r3, [sp, #20]
 800f324:	2300      	movs	r3, #0
 800f326:	001e      	movs	r6, r3
 800f328:	9304      	str	r3, [sp, #16]
 800f32a:	9b00      	ldr	r3, [sp, #0]
 800f32c:	42a3      	cmp	r3, r4
 800f32e:	d338      	bcc.n	800f3a2 <__gethex+0x1ea>
 800f330:	9c05      	ldr	r4, [sp, #20]
 800f332:	9b02      	ldr	r3, [sp, #8]
 800f334:	c440      	stmia	r4!, {r6}
 800f336:	1ae4      	subs	r4, r4, r3
 800f338:	10a4      	asrs	r4, r4, #2
 800f33a:	0030      	movs	r0, r6
 800f33c:	612c      	str	r4, [r5, #16]
 800f33e:	f000 fbe9 	bl	800fb14 <__hi0bits>
 800f342:	9b01      	ldr	r3, [sp, #4]
 800f344:	0164      	lsls	r4, r4, #5
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	1a26      	subs	r6, r4, r0
 800f34a:	9300      	str	r3, [sp, #0]
 800f34c:	429e      	cmp	r6, r3
 800f34e:	dd52      	ble.n	800f3f6 <__gethex+0x23e>
 800f350:	1af6      	subs	r6, r6, r3
 800f352:	0031      	movs	r1, r6
 800f354:	0028      	movs	r0, r5
 800f356:	f000 ff84 	bl	8010262 <__any_on>
 800f35a:	1e04      	subs	r4, r0, #0
 800f35c:	d00f      	beq.n	800f37e <__gethex+0x1c6>
 800f35e:	2401      	movs	r4, #1
 800f360:	211f      	movs	r1, #31
 800f362:	0020      	movs	r0, r4
 800f364:	1e73      	subs	r3, r6, #1
 800f366:	4019      	ands	r1, r3
 800f368:	4088      	lsls	r0, r1
 800f36a:	0001      	movs	r1, r0
 800f36c:	115a      	asrs	r2, r3, #5
 800f36e:	9802      	ldr	r0, [sp, #8]
 800f370:	0092      	lsls	r2, r2, #2
 800f372:	5812      	ldr	r2, [r2, r0]
 800f374:	420a      	tst	r2, r1
 800f376:	d002      	beq.n	800f37e <__gethex+0x1c6>
 800f378:	42a3      	cmp	r3, r4
 800f37a:	dc34      	bgt.n	800f3e6 <__gethex+0x22e>
 800f37c:	2402      	movs	r4, #2
 800f37e:	0031      	movs	r1, r6
 800f380:	0028      	movs	r0, r5
 800f382:	f7ff feb1 	bl	800f0e8 <rshift>
 800f386:	19bf      	adds	r7, r7, r6
 800f388:	9b01      	ldr	r3, [sp, #4]
 800f38a:	689b      	ldr	r3, [r3, #8]
 800f38c:	42bb      	cmp	r3, r7
 800f38e:	da42      	bge.n	800f416 <__gethex+0x25e>
 800f390:	0029      	movs	r1, r5
 800f392:	9803      	ldr	r0, [sp, #12]
 800f394:	f000 fb0a 	bl	800f9ac <_Bfree>
 800f398:	2300      	movs	r3, #0
 800f39a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f39c:	26a3      	movs	r6, #163	@ 0xa3
 800f39e:	6013      	str	r3, [r2, #0]
 800f3a0:	e794      	b.n	800f2cc <__gethex+0x114>
 800f3a2:	3c01      	subs	r4, #1
 800f3a4:	7823      	ldrb	r3, [r4, #0]
 800f3a6:	2b2e      	cmp	r3, #46	@ 0x2e
 800f3a8:	d012      	beq.n	800f3d0 <__gethex+0x218>
 800f3aa:	9b04      	ldr	r3, [sp, #16]
 800f3ac:	2b20      	cmp	r3, #32
 800f3ae:	d104      	bne.n	800f3ba <__gethex+0x202>
 800f3b0:	9b05      	ldr	r3, [sp, #20]
 800f3b2:	c340      	stmia	r3!, {r6}
 800f3b4:	2600      	movs	r6, #0
 800f3b6:	9305      	str	r3, [sp, #20]
 800f3b8:	9604      	str	r6, [sp, #16]
 800f3ba:	7820      	ldrb	r0, [r4, #0]
 800f3bc:	f7ff fee7 	bl	800f18e <__hexdig_fun>
 800f3c0:	230f      	movs	r3, #15
 800f3c2:	4018      	ands	r0, r3
 800f3c4:	9b04      	ldr	r3, [sp, #16]
 800f3c6:	4098      	lsls	r0, r3
 800f3c8:	3304      	adds	r3, #4
 800f3ca:	4306      	orrs	r6, r0
 800f3cc:	9304      	str	r3, [sp, #16]
 800f3ce:	e7ac      	b.n	800f32a <__gethex+0x172>
 800f3d0:	9b00      	ldr	r3, [sp, #0]
 800f3d2:	42a3      	cmp	r3, r4
 800f3d4:	d8e9      	bhi.n	800f3aa <__gethex+0x1f2>
 800f3d6:	2201      	movs	r2, #1
 800f3d8:	0020      	movs	r0, r4
 800f3da:	492b      	ldr	r1, [pc, #172]	@ (800f488 <__gethex+0x2d0>)
 800f3dc:	f7ff fd9e 	bl	800ef1c <strncmp>
 800f3e0:	2800      	cmp	r0, #0
 800f3e2:	d1e2      	bne.n	800f3aa <__gethex+0x1f2>
 800f3e4:	e7a1      	b.n	800f32a <__gethex+0x172>
 800f3e6:	0028      	movs	r0, r5
 800f3e8:	1eb1      	subs	r1, r6, #2
 800f3ea:	f000 ff3a 	bl	8010262 <__any_on>
 800f3ee:	2800      	cmp	r0, #0
 800f3f0:	d0c4      	beq.n	800f37c <__gethex+0x1c4>
 800f3f2:	2403      	movs	r4, #3
 800f3f4:	e7c3      	b.n	800f37e <__gethex+0x1c6>
 800f3f6:	9b00      	ldr	r3, [sp, #0]
 800f3f8:	2400      	movs	r4, #0
 800f3fa:	429e      	cmp	r6, r3
 800f3fc:	dac4      	bge.n	800f388 <__gethex+0x1d0>
 800f3fe:	1b9e      	subs	r6, r3, r6
 800f400:	0029      	movs	r1, r5
 800f402:	0032      	movs	r2, r6
 800f404:	9803      	ldr	r0, [sp, #12]
 800f406:	f000 fcf3 	bl	800fdf0 <__lshift>
 800f40a:	0003      	movs	r3, r0
 800f40c:	3314      	adds	r3, #20
 800f40e:	0005      	movs	r5, r0
 800f410:	1bbf      	subs	r7, r7, r6
 800f412:	9302      	str	r3, [sp, #8]
 800f414:	e7b8      	b.n	800f388 <__gethex+0x1d0>
 800f416:	9b01      	ldr	r3, [sp, #4]
 800f418:	685e      	ldr	r6, [r3, #4]
 800f41a:	42be      	cmp	r6, r7
 800f41c:	dd6f      	ble.n	800f4fe <__gethex+0x346>
 800f41e:	9b00      	ldr	r3, [sp, #0]
 800f420:	1bf6      	subs	r6, r6, r7
 800f422:	42b3      	cmp	r3, r6
 800f424:	dc36      	bgt.n	800f494 <__gethex+0x2dc>
 800f426:	9b01      	ldr	r3, [sp, #4]
 800f428:	68db      	ldr	r3, [r3, #12]
 800f42a:	2b02      	cmp	r3, #2
 800f42c:	d024      	beq.n	800f478 <__gethex+0x2c0>
 800f42e:	2b03      	cmp	r3, #3
 800f430:	d026      	beq.n	800f480 <__gethex+0x2c8>
 800f432:	2b01      	cmp	r3, #1
 800f434:	d117      	bne.n	800f466 <__gethex+0x2ae>
 800f436:	9b00      	ldr	r3, [sp, #0]
 800f438:	42b3      	cmp	r3, r6
 800f43a:	d114      	bne.n	800f466 <__gethex+0x2ae>
 800f43c:	2b01      	cmp	r3, #1
 800f43e:	d10b      	bne.n	800f458 <__gethex+0x2a0>
 800f440:	9b01      	ldr	r3, [sp, #4]
 800f442:	9a07      	ldr	r2, [sp, #28]
 800f444:	685b      	ldr	r3, [r3, #4]
 800f446:	2662      	movs	r6, #98	@ 0x62
 800f448:	6013      	str	r3, [r2, #0]
 800f44a:	2301      	movs	r3, #1
 800f44c:	9a02      	ldr	r2, [sp, #8]
 800f44e:	612b      	str	r3, [r5, #16]
 800f450:	6013      	str	r3, [r2, #0]
 800f452:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f454:	601d      	str	r5, [r3, #0]
 800f456:	e739      	b.n	800f2cc <__gethex+0x114>
 800f458:	9900      	ldr	r1, [sp, #0]
 800f45a:	0028      	movs	r0, r5
 800f45c:	3901      	subs	r1, #1
 800f45e:	f000 ff00 	bl	8010262 <__any_on>
 800f462:	2800      	cmp	r0, #0
 800f464:	d1ec      	bne.n	800f440 <__gethex+0x288>
 800f466:	0029      	movs	r1, r5
 800f468:	9803      	ldr	r0, [sp, #12]
 800f46a:	f000 fa9f 	bl	800f9ac <_Bfree>
 800f46e:	2300      	movs	r3, #0
 800f470:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f472:	2650      	movs	r6, #80	@ 0x50
 800f474:	6013      	str	r3, [r2, #0]
 800f476:	e729      	b.n	800f2cc <__gethex+0x114>
 800f478:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d1f3      	bne.n	800f466 <__gethex+0x2ae>
 800f47e:	e7df      	b.n	800f440 <__gethex+0x288>
 800f480:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f482:	2b00      	cmp	r3, #0
 800f484:	d1dc      	bne.n	800f440 <__gethex+0x288>
 800f486:	e7ee      	b.n	800f466 <__gethex+0x2ae>
 800f488:	0801c214 	.word	0x0801c214
 800f48c:	0801c22a 	.word	0x0801c22a
 800f490:	0801c23b 	.word	0x0801c23b
 800f494:	1e77      	subs	r7, r6, #1
 800f496:	2c00      	cmp	r4, #0
 800f498:	d12f      	bne.n	800f4fa <__gethex+0x342>
 800f49a:	2f00      	cmp	r7, #0
 800f49c:	d004      	beq.n	800f4a8 <__gethex+0x2f0>
 800f49e:	0039      	movs	r1, r7
 800f4a0:	0028      	movs	r0, r5
 800f4a2:	f000 fede 	bl	8010262 <__any_on>
 800f4a6:	0004      	movs	r4, r0
 800f4a8:	231f      	movs	r3, #31
 800f4aa:	117a      	asrs	r2, r7, #5
 800f4ac:	401f      	ands	r7, r3
 800f4ae:	3b1e      	subs	r3, #30
 800f4b0:	40bb      	lsls	r3, r7
 800f4b2:	9902      	ldr	r1, [sp, #8]
 800f4b4:	0092      	lsls	r2, r2, #2
 800f4b6:	5852      	ldr	r2, [r2, r1]
 800f4b8:	421a      	tst	r2, r3
 800f4ba:	d001      	beq.n	800f4c0 <__gethex+0x308>
 800f4bc:	2302      	movs	r3, #2
 800f4be:	431c      	orrs	r4, r3
 800f4c0:	9b00      	ldr	r3, [sp, #0]
 800f4c2:	0031      	movs	r1, r6
 800f4c4:	1b9b      	subs	r3, r3, r6
 800f4c6:	2602      	movs	r6, #2
 800f4c8:	0028      	movs	r0, r5
 800f4ca:	9300      	str	r3, [sp, #0]
 800f4cc:	f7ff fe0c 	bl	800f0e8 <rshift>
 800f4d0:	9b01      	ldr	r3, [sp, #4]
 800f4d2:	685f      	ldr	r7, [r3, #4]
 800f4d4:	2c00      	cmp	r4, #0
 800f4d6:	d03f      	beq.n	800f558 <__gethex+0x3a0>
 800f4d8:	9b01      	ldr	r3, [sp, #4]
 800f4da:	68db      	ldr	r3, [r3, #12]
 800f4dc:	2b02      	cmp	r3, #2
 800f4de:	d010      	beq.n	800f502 <__gethex+0x34a>
 800f4e0:	2b03      	cmp	r3, #3
 800f4e2:	d012      	beq.n	800f50a <__gethex+0x352>
 800f4e4:	2b01      	cmp	r3, #1
 800f4e6:	d106      	bne.n	800f4f6 <__gethex+0x33e>
 800f4e8:	07a2      	lsls	r2, r4, #30
 800f4ea:	d504      	bpl.n	800f4f6 <__gethex+0x33e>
 800f4ec:	9a02      	ldr	r2, [sp, #8]
 800f4ee:	6812      	ldr	r2, [r2, #0]
 800f4f0:	4314      	orrs	r4, r2
 800f4f2:	421c      	tst	r4, r3
 800f4f4:	d10c      	bne.n	800f510 <__gethex+0x358>
 800f4f6:	2310      	movs	r3, #16
 800f4f8:	e02d      	b.n	800f556 <__gethex+0x39e>
 800f4fa:	2401      	movs	r4, #1
 800f4fc:	e7d4      	b.n	800f4a8 <__gethex+0x2f0>
 800f4fe:	2601      	movs	r6, #1
 800f500:	e7e8      	b.n	800f4d4 <__gethex+0x31c>
 800f502:	2301      	movs	r3, #1
 800f504:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f506:	1a9b      	subs	r3, r3, r2
 800f508:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f50a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d0f2      	beq.n	800f4f6 <__gethex+0x33e>
 800f510:	692b      	ldr	r3, [r5, #16]
 800f512:	2000      	movs	r0, #0
 800f514:	9302      	str	r3, [sp, #8]
 800f516:	009b      	lsls	r3, r3, #2
 800f518:	9304      	str	r3, [sp, #16]
 800f51a:	002b      	movs	r3, r5
 800f51c:	9a04      	ldr	r2, [sp, #16]
 800f51e:	3314      	adds	r3, #20
 800f520:	1899      	adds	r1, r3, r2
 800f522:	681a      	ldr	r2, [r3, #0]
 800f524:	1c54      	adds	r4, r2, #1
 800f526:	d01c      	beq.n	800f562 <__gethex+0x3aa>
 800f528:	3201      	adds	r2, #1
 800f52a:	601a      	str	r2, [r3, #0]
 800f52c:	002b      	movs	r3, r5
 800f52e:	3314      	adds	r3, #20
 800f530:	2e02      	cmp	r6, #2
 800f532:	d13f      	bne.n	800f5b4 <__gethex+0x3fc>
 800f534:	9a01      	ldr	r2, [sp, #4]
 800f536:	9900      	ldr	r1, [sp, #0]
 800f538:	6812      	ldr	r2, [r2, #0]
 800f53a:	3a01      	subs	r2, #1
 800f53c:	428a      	cmp	r2, r1
 800f53e:	d109      	bne.n	800f554 <__gethex+0x39c>
 800f540:	000a      	movs	r2, r1
 800f542:	201f      	movs	r0, #31
 800f544:	4010      	ands	r0, r2
 800f546:	2201      	movs	r2, #1
 800f548:	4082      	lsls	r2, r0
 800f54a:	1149      	asrs	r1, r1, #5
 800f54c:	0089      	lsls	r1, r1, #2
 800f54e:	58cb      	ldr	r3, [r1, r3]
 800f550:	4213      	tst	r3, r2
 800f552:	d13d      	bne.n	800f5d0 <__gethex+0x418>
 800f554:	2320      	movs	r3, #32
 800f556:	431e      	orrs	r6, r3
 800f558:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f55a:	601d      	str	r5, [r3, #0]
 800f55c:	9b07      	ldr	r3, [sp, #28]
 800f55e:	601f      	str	r7, [r3, #0]
 800f560:	e6b4      	b.n	800f2cc <__gethex+0x114>
 800f562:	c301      	stmia	r3!, {r0}
 800f564:	4299      	cmp	r1, r3
 800f566:	d8dc      	bhi.n	800f522 <__gethex+0x36a>
 800f568:	68ab      	ldr	r3, [r5, #8]
 800f56a:	9a02      	ldr	r2, [sp, #8]
 800f56c:	429a      	cmp	r2, r3
 800f56e:	db18      	blt.n	800f5a2 <__gethex+0x3ea>
 800f570:	6869      	ldr	r1, [r5, #4]
 800f572:	9803      	ldr	r0, [sp, #12]
 800f574:	3101      	adds	r1, #1
 800f576:	f000 f9d5 	bl	800f924 <_Balloc>
 800f57a:	1e04      	subs	r4, r0, #0
 800f57c:	d104      	bne.n	800f588 <__gethex+0x3d0>
 800f57e:	0022      	movs	r2, r4
 800f580:	2184      	movs	r1, #132	@ 0x84
 800f582:	4b1d      	ldr	r3, [pc, #116]	@ (800f5f8 <__gethex+0x440>)
 800f584:	481d      	ldr	r0, [pc, #116]	@ (800f5fc <__gethex+0x444>)
 800f586:	e6c4      	b.n	800f312 <__gethex+0x15a>
 800f588:	0029      	movs	r1, r5
 800f58a:	692a      	ldr	r2, [r5, #16]
 800f58c:	310c      	adds	r1, #12
 800f58e:	3202      	adds	r2, #2
 800f590:	0092      	lsls	r2, r2, #2
 800f592:	300c      	adds	r0, #12
 800f594:	f7ff fd4f 	bl	800f036 <memcpy>
 800f598:	0029      	movs	r1, r5
 800f59a:	9803      	ldr	r0, [sp, #12]
 800f59c:	f000 fa06 	bl	800f9ac <_Bfree>
 800f5a0:	0025      	movs	r5, r4
 800f5a2:	692b      	ldr	r3, [r5, #16]
 800f5a4:	1c5a      	adds	r2, r3, #1
 800f5a6:	612a      	str	r2, [r5, #16]
 800f5a8:	2201      	movs	r2, #1
 800f5aa:	3304      	adds	r3, #4
 800f5ac:	009b      	lsls	r3, r3, #2
 800f5ae:	18eb      	adds	r3, r5, r3
 800f5b0:	605a      	str	r2, [r3, #4]
 800f5b2:	e7bb      	b.n	800f52c <__gethex+0x374>
 800f5b4:	692a      	ldr	r2, [r5, #16]
 800f5b6:	9902      	ldr	r1, [sp, #8]
 800f5b8:	428a      	cmp	r2, r1
 800f5ba:	dd0b      	ble.n	800f5d4 <__gethex+0x41c>
 800f5bc:	2101      	movs	r1, #1
 800f5be:	0028      	movs	r0, r5
 800f5c0:	f7ff fd92 	bl	800f0e8 <rshift>
 800f5c4:	9b01      	ldr	r3, [sp, #4]
 800f5c6:	3701      	adds	r7, #1
 800f5c8:	689b      	ldr	r3, [r3, #8]
 800f5ca:	42bb      	cmp	r3, r7
 800f5cc:	da00      	bge.n	800f5d0 <__gethex+0x418>
 800f5ce:	e6df      	b.n	800f390 <__gethex+0x1d8>
 800f5d0:	2601      	movs	r6, #1
 800f5d2:	e7bf      	b.n	800f554 <__gethex+0x39c>
 800f5d4:	221f      	movs	r2, #31
 800f5d6:	9c00      	ldr	r4, [sp, #0]
 800f5d8:	9900      	ldr	r1, [sp, #0]
 800f5da:	4014      	ands	r4, r2
 800f5dc:	4211      	tst	r1, r2
 800f5de:	d0f7      	beq.n	800f5d0 <__gethex+0x418>
 800f5e0:	9a04      	ldr	r2, [sp, #16]
 800f5e2:	189b      	adds	r3, r3, r2
 800f5e4:	3b04      	subs	r3, #4
 800f5e6:	6818      	ldr	r0, [r3, #0]
 800f5e8:	f000 fa94 	bl	800fb14 <__hi0bits>
 800f5ec:	2320      	movs	r3, #32
 800f5ee:	1b1b      	subs	r3, r3, r4
 800f5f0:	4298      	cmp	r0, r3
 800f5f2:	dbe3      	blt.n	800f5bc <__gethex+0x404>
 800f5f4:	e7ec      	b.n	800f5d0 <__gethex+0x418>
 800f5f6:	46c0      	nop			@ (mov r8, r8)
 800f5f8:	0801c22a 	.word	0x0801c22a
 800f5fc:	0801c23b 	.word	0x0801c23b

0800f600 <L_shift>:
 800f600:	2308      	movs	r3, #8
 800f602:	b570      	push	{r4, r5, r6, lr}
 800f604:	2520      	movs	r5, #32
 800f606:	1a9a      	subs	r2, r3, r2
 800f608:	0092      	lsls	r2, r2, #2
 800f60a:	1aad      	subs	r5, r5, r2
 800f60c:	6843      	ldr	r3, [r0, #4]
 800f60e:	6804      	ldr	r4, [r0, #0]
 800f610:	001e      	movs	r6, r3
 800f612:	40ae      	lsls	r6, r5
 800f614:	40d3      	lsrs	r3, r2
 800f616:	4334      	orrs	r4, r6
 800f618:	6004      	str	r4, [r0, #0]
 800f61a:	6043      	str	r3, [r0, #4]
 800f61c:	3004      	adds	r0, #4
 800f61e:	4288      	cmp	r0, r1
 800f620:	d3f4      	bcc.n	800f60c <L_shift+0xc>
 800f622:	bd70      	pop	{r4, r5, r6, pc}

0800f624 <__match>:
 800f624:	b530      	push	{r4, r5, lr}
 800f626:	6803      	ldr	r3, [r0, #0]
 800f628:	780c      	ldrb	r4, [r1, #0]
 800f62a:	3301      	adds	r3, #1
 800f62c:	2c00      	cmp	r4, #0
 800f62e:	d102      	bne.n	800f636 <__match+0x12>
 800f630:	6003      	str	r3, [r0, #0]
 800f632:	2001      	movs	r0, #1
 800f634:	bd30      	pop	{r4, r5, pc}
 800f636:	781a      	ldrb	r2, [r3, #0]
 800f638:	0015      	movs	r5, r2
 800f63a:	3d41      	subs	r5, #65	@ 0x41
 800f63c:	2d19      	cmp	r5, #25
 800f63e:	d800      	bhi.n	800f642 <__match+0x1e>
 800f640:	3220      	adds	r2, #32
 800f642:	3101      	adds	r1, #1
 800f644:	42a2      	cmp	r2, r4
 800f646:	d0ef      	beq.n	800f628 <__match+0x4>
 800f648:	2000      	movs	r0, #0
 800f64a:	e7f3      	b.n	800f634 <__match+0x10>

0800f64c <__hexnan>:
 800f64c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f64e:	680b      	ldr	r3, [r1, #0]
 800f650:	b08b      	sub	sp, #44	@ 0x2c
 800f652:	9201      	str	r2, [sp, #4]
 800f654:	9901      	ldr	r1, [sp, #4]
 800f656:	115a      	asrs	r2, r3, #5
 800f658:	0092      	lsls	r2, r2, #2
 800f65a:	188a      	adds	r2, r1, r2
 800f65c:	9202      	str	r2, [sp, #8]
 800f65e:	0019      	movs	r1, r3
 800f660:	221f      	movs	r2, #31
 800f662:	4011      	ands	r1, r2
 800f664:	9008      	str	r0, [sp, #32]
 800f666:	9106      	str	r1, [sp, #24]
 800f668:	4213      	tst	r3, r2
 800f66a:	d002      	beq.n	800f672 <__hexnan+0x26>
 800f66c:	9b02      	ldr	r3, [sp, #8]
 800f66e:	3304      	adds	r3, #4
 800f670:	9302      	str	r3, [sp, #8]
 800f672:	9b02      	ldr	r3, [sp, #8]
 800f674:	2500      	movs	r5, #0
 800f676:	1f1f      	subs	r7, r3, #4
 800f678:	003e      	movs	r6, r7
 800f67a:	003c      	movs	r4, r7
 800f67c:	9b08      	ldr	r3, [sp, #32]
 800f67e:	603d      	str	r5, [r7, #0]
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	9507      	str	r5, [sp, #28]
 800f684:	9305      	str	r3, [sp, #20]
 800f686:	9503      	str	r5, [sp, #12]
 800f688:	9b05      	ldr	r3, [sp, #20]
 800f68a:	3301      	adds	r3, #1
 800f68c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f68e:	9b05      	ldr	r3, [sp, #20]
 800f690:	785b      	ldrb	r3, [r3, #1]
 800f692:	9304      	str	r3, [sp, #16]
 800f694:	2b00      	cmp	r3, #0
 800f696:	d028      	beq.n	800f6ea <__hexnan+0x9e>
 800f698:	9804      	ldr	r0, [sp, #16]
 800f69a:	f7ff fd78 	bl	800f18e <__hexdig_fun>
 800f69e:	2800      	cmp	r0, #0
 800f6a0:	d155      	bne.n	800f74e <__hexnan+0x102>
 800f6a2:	9b04      	ldr	r3, [sp, #16]
 800f6a4:	2b20      	cmp	r3, #32
 800f6a6:	d819      	bhi.n	800f6dc <__hexnan+0x90>
 800f6a8:	9b03      	ldr	r3, [sp, #12]
 800f6aa:	9a07      	ldr	r2, [sp, #28]
 800f6ac:	4293      	cmp	r3, r2
 800f6ae:	dd12      	ble.n	800f6d6 <__hexnan+0x8a>
 800f6b0:	42b4      	cmp	r4, r6
 800f6b2:	d206      	bcs.n	800f6c2 <__hexnan+0x76>
 800f6b4:	2d07      	cmp	r5, #7
 800f6b6:	dc04      	bgt.n	800f6c2 <__hexnan+0x76>
 800f6b8:	002a      	movs	r2, r5
 800f6ba:	0031      	movs	r1, r6
 800f6bc:	0020      	movs	r0, r4
 800f6be:	f7ff ff9f 	bl	800f600 <L_shift>
 800f6c2:	9b01      	ldr	r3, [sp, #4]
 800f6c4:	2508      	movs	r5, #8
 800f6c6:	429c      	cmp	r4, r3
 800f6c8:	d905      	bls.n	800f6d6 <__hexnan+0x8a>
 800f6ca:	1f26      	subs	r6, r4, #4
 800f6cc:	2500      	movs	r5, #0
 800f6ce:	0034      	movs	r4, r6
 800f6d0:	9b03      	ldr	r3, [sp, #12]
 800f6d2:	6035      	str	r5, [r6, #0]
 800f6d4:	9307      	str	r3, [sp, #28]
 800f6d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f6d8:	9305      	str	r3, [sp, #20]
 800f6da:	e7d5      	b.n	800f688 <__hexnan+0x3c>
 800f6dc:	9b04      	ldr	r3, [sp, #16]
 800f6de:	2b29      	cmp	r3, #41	@ 0x29
 800f6e0:	d15a      	bne.n	800f798 <__hexnan+0x14c>
 800f6e2:	9b05      	ldr	r3, [sp, #20]
 800f6e4:	9a08      	ldr	r2, [sp, #32]
 800f6e6:	3302      	adds	r3, #2
 800f6e8:	6013      	str	r3, [r2, #0]
 800f6ea:	9b03      	ldr	r3, [sp, #12]
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d053      	beq.n	800f798 <__hexnan+0x14c>
 800f6f0:	42b4      	cmp	r4, r6
 800f6f2:	d206      	bcs.n	800f702 <__hexnan+0xb6>
 800f6f4:	2d07      	cmp	r5, #7
 800f6f6:	dc04      	bgt.n	800f702 <__hexnan+0xb6>
 800f6f8:	002a      	movs	r2, r5
 800f6fa:	0031      	movs	r1, r6
 800f6fc:	0020      	movs	r0, r4
 800f6fe:	f7ff ff7f 	bl	800f600 <L_shift>
 800f702:	9b01      	ldr	r3, [sp, #4]
 800f704:	429c      	cmp	r4, r3
 800f706:	d936      	bls.n	800f776 <__hexnan+0x12a>
 800f708:	001a      	movs	r2, r3
 800f70a:	0023      	movs	r3, r4
 800f70c:	cb02      	ldmia	r3!, {r1}
 800f70e:	c202      	stmia	r2!, {r1}
 800f710:	429f      	cmp	r7, r3
 800f712:	d2fb      	bcs.n	800f70c <__hexnan+0xc0>
 800f714:	9b02      	ldr	r3, [sp, #8]
 800f716:	1c62      	adds	r2, r4, #1
 800f718:	1ed9      	subs	r1, r3, #3
 800f71a:	2304      	movs	r3, #4
 800f71c:	4291      	cmp	r1, r2
 800f71e:	d305      	bcc.n	800f72c <__hexnan+0xe0>
 800f720:	9b02      	ldr	r3, [sp, #8]
 800f722:	3b04      	subs	r3, #4
 800f724:	1b1b      	subs	r3, r3, r4
 800f726:	089b      	lsrs	r3, r3, #2
 800f728:	3301      	adds	r3, #1
 800f72a:	009b      	lsls	r3, r3, #2
 800f72c:	9a01      	ldr	r2, [sp, #4]
 800f72e:	18d3      	adds	r3, r2, r3
 800f730:	2200      	movs	r2, #0
 800f732:	c304      	stmia	r3!, {r2}
 800f734:	429f      	cmp	r7, r3
 800f736:	d2fc      	bcs.n	800f732 <__hexnan+0xe6>
 800f738:	683b      	ldr	r3, [r7, #0]
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d104      	bne.n	800f748 <__hexnan+0xfc>
 800f73e:	9b01      	ldr	r3, [sp, #4]
 800f740:	429f      	cmp	r7, r3
 800f742:	d127      	bne.n	800f794 <__hexnan+0x148>
 800f744:	2301      	movs	r3, #1
 800f746:	603b      	str	r3, [r7, #0]
 800f748:	2005      	movs	r0, #5
 800f74a:	b00b      	add	sp, #44	@ 0x2c
 800f74c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f74e:	9b03      	ldr	r3, [sp, #12]
 800f750:	3501      	adds	r5, #1
 800f752:	3301      	adds	r3, #1
 800f754:	9303      	str	r3, [sp, #12]
 800f756:	2d08      	cmp	r5, #8
 800f758:	dd06      	ble.n	800f768 <__hexnan+0x11c>
 800f75a:	9b01      	ldr	r3, [sp, #4]
 800f75c:	429c      	cmp	r4, r3
 800f75e:	d9ba      	bls.n	800f6d6 <__hexnan+0x8a>
 800f760:	2300      	movs	r3, #0
 800f762:	2501      	movs	r5, #1
 800f764:	3c04      	subs	r4, #4
 800f766:	6023      	str	r3, [r4, #0]
 800f768:	220f      	movs	r2, #15
 800f76a:	6823      	ldr	r3, [r4, #0]
 800f76c:	4010      	ands	r0, r2
 800f76e:	011b      	lsls	r3, r3, #4
 800f770:	4303      	orrs	r3, r0
 800f772:	6023      	str	r3, [r4, #0]
 800f774:	e7af      	b.n	800f6d6 <__hexnan+0x8a>
 800f776:	9b06      	ldr	r3, [sp, #24]
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d0dd      	beq.n	800f738 <__hexnan+0xec>
 800f77c:	2320      	movs	r3, #32
 800f77e:	9a06      	ldr	r2, [sp, #24]
 800f780:	9902      	ldr	r1, [sp, #8]
 800f782:	1a9b      	subs	r3, r3, r2
 800f784:	2201      	movs	r2, #1
 800f786:	4252      	negs	r2, r2
 800f788:	40da      	lsrs	r2, r3
 800f78a:	3904      	subs	r1, #4
 800f78c:	680b      	ldr	r3, [r1, #0]
 800f78e:	4013      	ands	r3, r2
 800f790:	600b      	str	r3, [r1, #0]
 800f792:	e7d1      	b.n	800f738 <__hexnan+0xec>
 800f794:	3f04      	subs	r7, #4
 800f796:	e7cf      	b.n	800f738 <__hexnan+0xec>
 800f798:	2004      	movs	r0, #4
 800f79a:	e7d6      	b.n	800f74a <__hexnan+0xfe>

0800f79c <sbrk_aligned>:
 800f79c:	b570      	push	{r4, r5, r6, lr}
 800f79e:	4e0f      	ldr	r6, [pc, #60]	@ (800f7dc <sbrk_aligned+0x40>)
 800f7a0:	000d      	movs	r5, r1
 800f7a2:	6831      	ldr	r1, [r6, #0]
 800f7a4:	0004      	movs	r4, r0
 800f7a6:	2900      	cmp	r1, #0
 800f7a8:	d102      	bne.n	800f7b0 <sbrk_aligned+0x14>
 800f7aa:	f001 fb0d 	bl	8010dc8 <_sbrk_r>
 800f7ae:	6030      	str	r0, [r6, #0]
 800f7b0:	0029      	movs	r1, r5
 800f7b2:	0020      	movs	r0, r4
 800f7b4:	f001 fb08 	bl	8010dc8 <_sbrk_r>
 800f7b8:	1c43      	adds	r3, r0, #1
 800f7ba:	d103      	bne.n	800f7c4 <sbrk_aligned+0x28>
 800f7bc:	2501      	movs	r5, #1
 800f7be:	426d      	negs	r5, r5
 800f7c0:	0028      	movs	r0, r5
 800f7c2:	bd70      	pop	{r4, r5, r6, pc}
 800f7c4:	2303      	movs	r3, #3
 800f7c6:	1cc5      	adds	r5, r0, #3
 800f7c8:	439d      	bics	r5, r3
 800f7ca:	42a8      	cmp	r0, r5
 800f7cc:	d0f8      	beq.n	800f7c0 <sbrk_aligned+0x24>
 800f7ce:	1a29      	subs	r1, r5, r0
 800f7d0:	0020      	movs	r0, r4
 800f7d2:	f001 faf9 	bl	8010dc8 <_sbrk_r>
 800f7d6:	3001      	adds	r0, #1
 800f7d8:	d1f2      	bne.n	800f7c0 <sbrk_aligned+0x24>
 800f7da:	e7ef      	b.n	800f7bc <sbrk_aligned+0x20>
 800f7dc:	2000163c 	.word	0x2000163c

0800f7e0 <_malloc_r>:
 800f7e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f7e2:	2203      	movs	r2, #3
 800f7e4:	1ccb      	adds	r3, r1, #3
 800f7e6:	4393      	bics	r3, r2
 800f7e8:	3308      	adds	r3, #8
 800f7ea:	0005      	movs	r5, r0
 800f7ec:	001f      	movs	r7, r3
 800f7ee:	2b0c      	cmp	r3, #12
 800f7f0:	d234      	bcs.n	800f85c <_malloc_r+0x7c>
 800f7f2:	270c      	movs	r7, #12
 800f7f4:	42b9      	cmp	r1, r7
 800f7f6:	d833      	bhi.n	800f860 <_malloc_r+0x80>
 800f7f8:	0028      	movs	r0, r5
 800f7fa:	f000 f883 	bl	800f904 <__malloc_lock>
 800f7fe:	4e37      	ldr	r6, [pc, #220]	@ (800f8dc <_malloc_r+0xfc>)
 800f800:	6833      	ldr	r3, [r6, #0]
 800f802:	001c      	movs	r4, r3
 800f804:	2c00      	cmp	r4, #0
 800f806:	d12f      	bne.n	800f868 <_malloc_r+0x88>
 800f808:	0039      	movs	r1, r7
 800f80a:	0028      	movs	r0, r5
 800f80c:	f7ff ffc6 	bl	800f79c <sbrk_aligned>
 800f810:	0004      	movs	r4, r0
 800f812:	1c43      	adds	r3, r0, #1
 800f814:	d15f      	bne.n	800f8d6 <_malloc_r+0xf6>
 800f816:	6834      	ldr	r4, [r6, #0]
 800f818:	9400      	str	r4, [sp, #0]
 800f81a:	9b00      	ldr	r3, [sp, #0]
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d14a      	bne.n	800f8b6 <_malloc_r+0xd6>
 800f820:	2c00      	cmp	r4, #0
 800f822:	d052      	beq.n	800f8ca <_malloc_r+0xea>
 800f824:	6823      	ldr	r3, [r4, #0]
 800f826:	0028      	movs	r0, r5
 800f828:	18e3      	adds	r3, r4, r3
 800f82a:	9900      	ldr	r1, [sp, #0]
 800f82c:	9301      	str	r3, [sp, #4]
 800f82e:	f001 facb 	bl	8010dc8 <_sbrk_r>
 800f832:	9b01      	ldr	r3, [sp, #4]
 800f834:	4283      	cmp	r3, r0
 800f836:	d148      	bne.n	800f8ca <_malloc_r+0xea>
 800f838:	6823      	ldr	r3, [r4, #0]
 800f83a:	0028      	movs	r0, r5
 800f83c:	1aff      	subs	r7, r7, r3
 800f83e:	0039      	movs	r1, r7
 800f840:	f7ff ffac 	bl	800f79c <sbrk_aligned>
 800f844:	3001      	adds	r0, #1
 800f846:	d040      	beq.n	800f8ca <_malloc_r+0xea>
 800f848:	6823      	ldr	r3, [r4, #0]
 800f84a:	19db      	adds	r3, r3, r7
 800f84c:	6023      	str	r3, [r4, #0]
 800f84e:	6833      	ldr	r3, [r6, #0]
 800f850:	685a      	ldr	r2, [r3, #4]
 800f852:	2a00      	cmp	r2, #0
 800f854:	d133      	bne.n	800f8be <_malloc_r+0xde>
 800f856:	9b00      	ldr	r3, [sp, #0]
 800f858:	6033      	str	r3, [r6, #0]
 800f85a:	e019      	b.n	800f890 <_malloc_r+0xb0>
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	dac9      	bge.n	800f7f4 <_malloc_r+0x14>
 800f860:	230c      	movs	r3, #12
 800f862:	602b      	str	r3, [r5, #0]
 800f864:	2000      	movs	r0, #0
 800f866:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f868:	6821      	ldr	r1, [r4, #0]
 800f86a:	1bc9      	subs	r1, r1, r7
 800f86c:	d420      	bmi.n	800f8b0 <_malloc_r+0xd0>
 800f86e:	290b      	cmp	r1, #11
 800f870:	d90a      	bls.n	800f888 <_malloc_r+0xa8>
 800f872:	19e2      	adds	r2, r4, r7
 800f874:	6027      	str	r7, [r4, #0]
 800f876:	42a3      	cmp	r3, r4
 800f878:	d104      	bne.n	800f884 <_malloc_r+0xa4>
 800f87a:	6032      	str	r2, [r6, #0]
 800f87c:	6863      	ldr	r3, [r4, #4]
 800f87e:	6011      	str	r1, [r2, #0]
 800f880:	6053      	str	r3, [r2, #4]
 800f882:	e005      	b.n	800f890 <_malloc_r+0xb0>
 800f884:	605a      	str	r2, [r3, #4]
 800f886:	e7f9      	b.n	800f87c <_malloc_r+0x9c>
 800f888:	6862      	ldr	r2, [r4, #4]
 800f88a:	42a3      	cmp	r3, r4
 800f88c:	d10e      	bne.n	800f8ac <_malloc_r+0xcc>
 800f88e:	6032      	str	r2, [r6, #0]
 800f890:	0028      	movs	r0, r5
 800f892:	f000 f83f 	bl	800f914 <__malloc_unlock>
 800f896:	0020      	movs	r0, r4
 800f898:	2207      	movs	r2, #7
 800f89a:	300b      	adds	r0, #11
 800f89c:	1d23      	adds	r3, r4, #4
 800f89e:	4390      	bics	r0, r2
 800f8a0:	1ac2      	subs	r2, r0, r3
 800f8a2:	4298      	cmp	r0, r3
 800f8a4:	d0df      	beq.n	800f866 <_malloc_r+0x86>
 800f8a6:	1a1b      	subs	r3, r3, r0
 800f8a8:	50a3      	str	r3, [r4, r2]
 800f8aa:	e7dc      	b.n	800f866 <_malloc_r+0x86>
 800f8ac:	605a      	str	r2, [r3, #4]
 800f8ae:	e7ef      	b.n	800f890 <_malloc_r+0xb0>
 800f8b0:	0023      	movs	r3, r4
 800f8b2:	6864      	ldr	r4, [r4, #4]
 800f8b4:	e7a6      	b.n	800f804 <_malloc_r+0x24>
 800f8b6:	9c00      	ldr	r4, [sp, #0]
 800f8b8:	6863      	ldr	r3, [r4, #4]
 800f8ba:	9300      	str	r3, [sp, #0]
 800f8bc:	e7ad      	b.n	800f81a <_malloc_r+0x3a>
 800f8be:	001a      	movs	r2, r3
 800f8c0:	685b      	ldr	r3, [r3, #4]
 800f8c2:	42a3      	cmp	r3, r4
 800f8c4:	d1fb      	bne.n	800f8be <_malloc_r+0xde>
 800f8c6:	2300      	movs	r3, #0
 800f8c8:	e7da      	b.n	800f880 <_malloc_r+0xa0>
 800f8ca:	230c      	movs	r3, #12
 800f8cc:	0028      	movs	r0, r5
 800f8ce:	602b      	str	r3, [r5, #0]
 800f8d0:	f000 f820 	bl	800f914 <__malloc_unlock>
 800f8d4:	e7c6      	b.n	800f864 <_malloc_r+0x84>
 800f8d6:	6007      	str	r7, [r0, #0]
 800f8d8:	e7da      	b.n	800f890 <_malloc_r+0xb0>
 800f8da:	46c0      	nop			@ (mov r8, r8)
 800f8dc:	20001640 	.word	0x20001640

0800f8e0 <__ascii_mbtowc>:
 800f8e0:	b082      	sub	sp, #8
 800f8e2:	2900      	cmp	r1, #0
 800f8e4:	d100      	bne.n	800f8e8 <__ascii_mbtowc+0x8>
 800f8e6:	a901      	add	r1, sp, #4
 800f8e8:	1e10      	subs	r0, r2, #0
 800f8ea:	d006      	beq.n	800f8fa <__ascii_mbtowc+0x1a>
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d006      	beq.n	800f8fe <__ascii_mbtowc+0x1e>
 800f8f0:	7813      	ldrb	r3, [r2, #0]
 800f8f2:	600b      	str	r3, [r1, #0]
 800f8f4:	7810      	ldrb	r0, [r2, #0]
 800f8f6:	1e43      	subs	r3, r0, #1
 800f8f8:	4198      	sbcs	r0, r3
 800f8fa:	b002      	add	sp, #8
 800f8fc:	4770      	bx	lr
 800f8fe:	2002      	movs	r0, #2
 800f900:	4240      	negs	r0, r0
 800f902:	e7fa      	b.n	800f8fa <__ascii_mbtowc+0x1a>

0800f904 <__malloc_lock>:
 800f904:	b510      	push	{r4, lr}
 800f906:	4802      	ldr	r0, [pc, #8]	@ (800f910 <__malloc_lock+0xc>)
 800f908:	f7ff fb93 	bl	800f032 <__retarget_lock_acquire_recursive>
 800f90c:	bd10      	pop	{r4, pc}
 800f90e:	46c0      	nop			@ (mov r8, r8)
 800f910:	20001638 	.word	0x20001638

0800f914 <__malloc_unlock>:
 800f914:	b510      	push	{r4, lr}
 800f916:	4802      	ldr	r0, [pc, #8]	@ (800f920 <__malloc_unlock+0xc>)
 800f918:	f7ff fb8c 	bl	800f034 <__retarget_lock_release_recursive>
 800f91c:	bd10      	pop	{r4, pc}
 800f91e:	46c0      	nop			@ (mov r8, r8)
 800f920:	20001638 	.word	0x20001638

0800f924 <_Balloc>:
 800f924:	b570      	push	{r4, r5, r6, lr}
 800f926:	69c5      	ldr	r5, [r0, #28]
 800f928:	0006      	movs	r6, r0
 800f92a:	000c      	movs	r4, r1
 800f92c:	2d00      	cmp	r5, #0
 800f92e:	d10e      	bne.n	800f94e <_Balloc+0x2a>
 800f930:	2010      	movs	r0, #16
 800f932:	f001 fab3 	bl	8010e9c <malloc>
 800f936:	1e02      	subs	r2, r0, #0
 800f938:	61f0      	str	r0, [r6, #28]
 800f93a:	d104      	bne.n	800f946 <_Balloc+0x22>
 800f93c:	216b      	movs	r1, #107	@ 0x6b
 800f93e:	4b19      	ldr	r3, [pc, #100]	@ (800f9a4 <_Balloc+0x80>)
 800f940:	4819      	ldr	r0, [pc, #100]	@ (800f9a8 <_Balloc+0x84>)
 800f942:	f001 fa5f 	bl	8010e04 <__assert_func>
 800f946:	6045      	str	r5, [r0, #4]
 800f948:	6085      	str	r5, [r0, #8]
 800f94a:	6005      	str	r5, [r0, #0]
 800f94c:	60c5      	str	r5, [r0, #12]
 800f94e:	69f5      	ldr	r5, [r6, #28]
 800f950:	68eb      	ldr	r3, [r5, #12]
 800f952:	2b00      	cmp	r3, #0
 800f954:	d013      	beq.n	800f97e <_Balloc+0x5a>
 800f956:	69f3      	ldr	r3, [r6, #28]
 800f958:	00a2      	lsls	r2, r4, #2
 800f95a:	68db      	ldr	r3, [r3, #12]
 800f95c:	189b      	adds	r3, r3, r2
 800f95e:	6818      	ldr	r0, [r3, #0]
 800f960:	2800      	cmp	r0, #0
 800f962:	d118      	bne.n	800f996 <_Balloc+0x72>
 800f964:	2101      	movs	r1, #1
 800f966:	000d      	movs	r5, r1
 800f968:	40a5      	lsls	r5, r4
 800f96a:	1d6a      	adds	r2, r5, #5
 800f96c:	0030      	movs	r0, r6
 800f96e:	0092      	lsls	r2, r2, #2
 800f970:	f001 fa66 	bl	8010e40 <_calloc_r>
 800f974:	2800      	cmp	r0, #0
 800f976:	d00c      	beq.n	800f992 <_Balloc+0x6e>
 800f978:	6044      	str	r4, [r0, #4]
 800f97a:	6085      	str	r5, [r0, #8]
 800f97c:	e00d      	b.n	800f99a <_Balloc+0x76>
 800f97e:	2221      	movs	r2, #33	@ 0x21
 800f980:	2104      	movs	r1, #4
 800f982:	0030      	movs	r0, r6
 800f984:	f001 fa5c 	bl	8010e40 <_calloc_r>
 800f988:	69f3      	ldr	r3, [r6, #28]
 800f98a:	60e8      	str	r0, [r5, #12]
 800f98c:	68db      	ldr	r3, [r3, #12]
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d1e1      	bne.n	800f956 <_Balloc+0x32>
 800f992:	2000      	movs	r0, #0
 800f994:	bd70      	pop	{r4, r5, r6, pc}
 800f996:	6802      	ldr	r2, [r0, #0]
 800f998:	601a      	str	r2, [r3, #0]
 800f99a:	2300      	movs	r3, #0
 800f99c:	6103      	str	r3, [r0, #16]
 800f99e:	60c3      	str	r3, [r0, #12]
 800f9a0:	e7f8      	b.n	800f994 <_Balloc+0x70>
 800f9a2:	46c0      	nop			@ (mov r8, r8)
 800f9a4:	0801c29b 	.word	0x0801c29b
 800f9a8:	0801c2b2 	.word	0x0801c2b2

0800f9ac <_Bfree>:
 800f9ac:	b570      	push	{r4, r5, r6, lr}
 800f9ae:	69c6      	ldr	r6, [r0, #28]
 800f9b0:	0005      	movs	r5, r0
 800f9b2:	000c      	movs	r4, r1
 800f9b4:	2e00      	cmp	r6, #0
 800f9b6:	d10e      	bne.n	800f9d6 <_Bfree+0x2a>
 800f9b8:	2010      	movs	r0, #16
 800f9ba:	f001 fa6f 	bl	8010e9c <malloc>
 800f9be:	1e02      	subs	r2, r0, #0
 800f9c0:	61e8      	str	r0, [r5, #28]
 800f9c2:	d104      	bne.n	800f9ce <_Bfree+0x22>
 800f9c4:	218f      	movs	r1, #143	@ 0x8f
 800f9c6:	4b09      	ldr	r3, [pc, #36]	@ (800f9ec <_Bfree+0x40>)
 800f9c8:	4809      	ldr	r0, [pc, #36]	@ (800f9f0 <_Bfree+0x44>)
 800f9ca:	f001 fa1b 	bl	8010e04 <__assert_func>
 800f9ce:	6046      	str	r6, [r0, #4]
 800f9d0:	6086      	str	r6, [r0, #8]
 800f9d2:	6006      	str	r6, [r0, #0]
 800f9d4:	60c6      	str	r6, [r0, #12]
 800f9d6:	2c00      	cmp	r4, #0
 800f9d8:	d007      	beq.n	800f9ea <_Bfree+0x3e>
 800f9da:	69eb      	ldr	r3, [r5, #28]
 800f9dc:	6862      	ldr	r2, [r4, #4]
 800f9de:	68db      	ldr	r3, [r3, #12]
 800f9e0:	0092      	lsls	r2, r2, #2
 800f9e2:	189b      	adds	r3, r3, r2
 800f9e4:	681a      	ldr	r2, [r3, #0]
 800f9e6:	6022      	str	r2, [r4, #0]
 800f9e8:	601c      	str	r4, [r3, #0]
 800f9ea:	bd70      	pop	{r4, r5, r6, pc}
 800f9ec:	0801c29b 	.word	0x0801c29b
 800f9f0:	0801c2b2 	.word	0x0801c2b2

0800f9f4 <__multadd>:
 800f9f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f9f6:	000f      	movs	r7, r1
 800f9f8:	9001      	str	r0, [sp, #4]
 800f9fa:	000c      	movs	r4, r1
 800f9fc:	001e      	movs	r6, r3
 800f9fe:	2000      	movs	r0, #0
 800fa00:	690d      	ldr	r5, [r1, #16]
 800fa02:	3714      	adds	r7, #20
 800fa04:	683b      	ldr	r3, [r7, #0]
 800fa06:	3001      	adds	r0, #1
 800fa08:	b299      	uxth	r1, r3
 800fa0a:	4351      	muls	r1, r2
 800fa0c:	0c1b      	lsrs	r3, r3, #16
 800fa0e:	4353      	muls	r3, r2
 800fa10:	1989      	adds	r1, r1, r6
 800fa12:	0c0e      	lsrs	r6, r1, #16
 800fa14:	199b      	adds	r3, r3, r6
 800fa16:	0c1e      	lsrs	r6, r3, #16
 800fa18:	b289      	uxth	r1, r1
 800fa1a:	041b      	lsls	r3, r3, #16
 800fa1c:	185b      	adds	r3, r3, r1
 800fa1e:	c708      	stmia	r7!, {r3}
 800fa20:	4285      	cmp	r5, r0
 800fa22:	dcef      	bgt.n	800fa04 <__multadd+0x10>
 800fa24:	2e00      	cmp	r6, #0
 800fa26:	d022      	beq.n	800fa6e <__multadd+0x7a>
 800fa28:	68a3      	ldr	r3, [r4, #8]
 800fa2a:	42ab      	cmp	r3, r5
 800fa2c:	dc19      	bgt.n	800fa62 <__multadd+0x6e>
 800fa2e:	6861      	ldr	r1, [r4, #4]
 800fa30:	9801      	ldr	r0, [sp, #4]
 800fa32:	3101      	adds	r1, #1
 800fa34:	f7ff ff76 	bl	800f924 <_Balloc>
 800fa38:	1e07      	subs	r7, r0, #0
 800fa3a:	d105      	bne.n	800fa48 <__multadd+0x54>
 800fa3c:	003a      	movs	r2, r7
 800fa3e:	21ba      	movs	r1, #186	@ 0xba
 800fa40:	4b0c      	ldr	r3, [pc, #48]	@ (800fa74 <__multadd+0x80>)
 800fa42:	480d      	ldr	r0, [pc, #52]	@ (800fa78 <__multadd+0x84>)
 800fa44:	f001 f9de 	bl	8010e04 <__assert_func>
 800fa48:	0021      	movs	r1, r4
 800fa4a:	6922      	ldr	r2, [r4, #16]
 800fa4c:	310c      	adds	r1, #12
 800fa4e:	3202      	adds	r2, #2
 800fa50:	0092      	lsls	r2, r2, #2
 800fa52:	300c      	adds	r0, #12
 800fa54:	f7ff faef 	bl	800f036 <memcpy>
 800fa58:	0021      	movs	r1, r4
 800fa5a:	9801      	ldr	r0, [sp, #4]
 800fa5c:	f7ff ffa6 	bl	800f9ac <_Bfree>
 800fa60:	003c      	movs	r4, r7
 800fa62:	1d2b      	adds	r3, r5, #4
 800fa64:	009b      	lsls	r3, r3, #2
 800fa66:	18e3      	adds	r3, r4, r3
 800fa68:	3501      	adds	r5, #1
 800fa6a:	605e      	str	r6, [r3, #4]
 800fa6c:	6125      	str	r5, [r4, #16]
 800fa6e:	0020      	movs	r0, r4
 800fa70:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800fa72:	46c0      	nop			@ (mov r8, r8)
 800fa74:	0801c22a 	.word	0x0801c22a
 800fa78:	0801c2b2 	.word	0x0801c2b2

0800fa7c <__s2b>:
 800fa7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fa7e:	0007      	movs	r7, r0
 800fa80:	0018      	movs	r0, r3
 800fa82:	000c      	movs	r4, r1
 800fa84:	3008      	adds	r0, #8
 800fa86:	2109      	movs	r1, #9
 800fa88:	9301      	str	r3, [sp, #4]
 800fa8a:	0015      	movs	r5, r2
 800fa8c:	f7f0 fbec 	bl	8000268 <__divsi3>
 800fa90:	2301      	movs	r3, #1
 800fa92:	2100      	movs	r1, #0
 800fa94:	4283      	cmp	r3, r0
 800fa96:	db0a      	blt.n	800faae <__s2b+0x32>
 800fa98:	0038      	movs	r0, r7
 800fa9a:	f7ff ff43 	bl	800f924 <_Balloc>
 800fa9e:	1e01      	subs	r1, r0, #0
 800faa0:	d108      	bne.n	800fab4 <__s2b+0x38>
 800faa2:	000a      	movs	r2, r1
 800faa4:	4b19      	ldr	r3, [pc, #100]	@ (800fb0c <__s2b+0x90>)
 800faa6:	481a      	ldr	r0, [pc, #104]	@ (800fb10 <__s2b+0x94>)
 800faa8:	31d3      	adds	r1, #211	@ 0xd3
 800faaa:	f001 f9ab 	bl	8010e04 <__assert_func>
 800faae:	005b      	lsls	r3, r3, #1
 800fab0:	3101      	adds	r1, #1
 800fab2:	e7ef      	b.n	800fa94 <__s2b+0x18>
 800fab4:	9b08      	ldr	r3, [sp, #32]
 800fab6:	6143      	str	r3, [r0, #20]
 800fab8:	2301      	movs	r3, #1
 800faba:	6103      	str	r3, [r0, #16]
 800fabc:	2d09      	cmp	r5, #9
 800fabe:	dd18      	ble.n	800faf2 <__s2b+0x76>
 800fac0:	0023      	movs	r3, r4
 800fac2:	3309      	adds	r3, #9
 800fac4:	001e      	movs	r6, r3
 800fac6:	9300      	str	r3, [sp, #0]
 800fac8:	1964      	adds	r4, r4, r5
 800faca:	7833      	ldrb	r3, [r6, #0]
 800facc:	220a      	movs	r2, #10
 800face:	0038      	movs	r0, r7
 800fad0:	3b30      	subs	r3, #48	@ 0x30
 800fad2:	f7ff ff8f 	bl	800f9f4 <__multadd>
 800fad6:	3601      	adds	r6, #1
 800fad8:	0001      	movs	r1, r0
 800fada:	42a6      	cmp	r6, r4
 800fadc:	d1f5      	bne.n	800faca <__s2b+0x4e>
 800fade:	002c      	movs	r4, r5
 800fae0:	9b00      	ldr	r3, [sp, #0]
 800fae2:	3c08      	subs	r4, #8
 800fae4:	191c      	adds	r4, r3, r4
 800fae6:	002e      	movs	r6, r5
 800fae8:	9b01      	ldr	r3, [sp, #4]
 800faea:	429e      	cmp	r6, r3
 800faec:	db04      	blt.n	800faf8 <__s2b+0x7c>
 800faee:	0008      	movs	r0, r1
 800faf0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800faf2:	2509      	movs	r5, #9
 800faf4:	340a      	adds	r4, #10
 800faf6:	e7f6      	b.n	800fae6 <__s2b+0x6a>
 800faf8:	1b63      	subs	r3, r4, r5
 800fafa:	5d9b      	ldrb	r3, [r3, r6]
 800fafc:	220a      	movs	r2, #10
 800fafe:	0038      	movs	r0, r7
 800fb00:	3b30      	subs	r3, #48	@ 0x30
 800fb02:	f7ff ff77 	bl	800f9f4 <__multadd>
 800fb06:	3601      	adds	r6, #1
 800fb08:	0001      	movs	r1, r0
 800fb0a:	e7ed      	b.n	800fae8 <__s2b+0x6c>
 800fb0c:	0801c22a 	.word	0x0801c22a
 800fb10:	0801c2b2 	.word	0x0801c2b2

0800fb14 <__hi0bits>:
 800fb14:	2280      	movs	r2, #128	@ 0x80
 800fb16:	0003      	movs	r3, r0
 800fb18:	0252      	lsls	r2, r2, #9
 800fb1a:	2000      	movs	r0, #0
 800fb1c:	4293      	cmp	r3, r2
 800fb1e:	d201      	bcs.n	800fb24 <__hi0bits+0x10>
 800fb20:	041b      	lsls	r3, r3, #16
 800fb22:	3010      	adds	r0, #16
 800fb24:	2280      	movs	r2, #128	@ 0x80
 800fb26:	0452      	lsls	r2, r2, #17
 800fb28:	4293      	cmp	r3, r2
 800fb2a:	d201      	bcs.n	800fb30 <__hi0bits+0x1c>
 800fb2c:	3008      	adds	r0, #8
 800fb2e:	021b      	lsls	r3, r3, #8
 800fb30:	2280      	movs	r2, #128	@ 0x80
 800fb32:	0552      	lsls	r2, r2, #21
 800fb34:	4293      	cmp	r3, r2
 800fb36:	d201      	bcs.n	800fb3c <__hi0bits+0x28>
 800fb38:	3004      	adds	r0, #4
 800fb3a:	011b      	lsls	r3, r3, #4
 800fb3c:	2280      	movs	r2, #128	@ 0x80
 800fb3e:	05d2      	lsls	r2, r2, #23
 800fb40:	4293      	cmp	r3, r2
 800fb42:	d201      	bcs.n	800fb48 <__hi0bits+0x34>
 800fb44:	3002      	adds	r0, #2
 800fb46:	009b      	lsls	r3, r3, #2
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	db03      	blt.n	800fb54 <__hi0bits+0x40>
 800fb4c:	3001      	adds	r0, #1
 800fb4e:	4213      	tst	r3, r2
 800fb50:	d100      	bne.n	800fb54 <__hi0bits+0x40>
 800fb52:	2020      	movs	r0, #32
 800fb54:	4770      	bx	lr

0800fb56 <__lo0bits>:
 800fb56:	6803      	ldr	r3, [r0, #0]
 800fb58:	0001      	movs	r1, r0
 800fb5a:	2207      	movs	r2, #7
 800fb5c:	0018      	movs	r0, r3
 800fb5e:	4010      	ands	r0, r2
 800fb60:	4213      	tst	r3, r2
 800fb62:	d00d      	beq.n	800fb80 <__lo0bits+0x2a>
 800fb64:	3a06      	subs	r2, #6
 800fb66:	2000      	movs	r0, #0
 800fb68:	4213      	tst	r3, r2
 800fb6a:	d105      	bne.n	800fb78 <__lo0bits+0x22>
 800fb6c:	3002      	adds	r0, #2
 800fb6e:	4203      	tst	r3, r0
 800fb70:	d003      	beq.n	800fb7a <__lo0bits+0x24>
 800fb72:	40d3      	lsrs	r3, r2
 800fb74:	0010      	movs	r0, r2
 800fb76:	600b      	str	r3, [r1, #0]
 800fb78:	4770      	bx	lr
 800fb7a:	089b      	lsrs	r3, r3, #2
 800fb7c:	600b      	str	r3, [r1, #0]
 800fb7e:	e7fb      	b.n	800fb78 <__lo0bits+0x22>
 800fb80:	b29a      	uxth	r2, r3
 800fb82:	2a00      	cmp	r2, #0
 800fb84:	d101      	bne.n	800fb8a <__lo0bits+0x34>
 800fb86:	2010      	movs	r0, #16
 800fb88:	0c1b      	lsrs	r3, r3, #16
 800fb8a:	b2da      	uxtb	r2, r3
 800fb8c:	2a00      	cmp	r2, #0
 800fb8e:	d101      	bne.n	800fb94 <__lo0bits+0x3e>
 800fb90:	3008      	adds	r0, #8
 800fb92:	0a1b      	lsrs	r3, r3, #8
 800fb94:	071a      	lsls	r2, r3, #28
 800fb96:	d101      	bne.n	800fb9c <__lo0bits+0x46>
 800fb98:	3004      	adds	r0, #4
 800fb9a:	091b      	lsrs	r3, r3, #4
 800fb9c:	079a      	lsls	r2, r3, #30
 800fb9e:	d101      	bne.n	800fba4 <__lo0bits+0x4e>
 800fba0:	3002      	adds	r0, #2
 800fba2:	089b      	lsrs	r3, r3, #2
 800fba4:	07da      	lsls	r2, r3, #31
 800fba6:	d4e9      	bmi.n	800fb7c <__lo0bits+0x26>
 800fba8:	3001      	adds	r0, #1
 800fbaa:	085b      	lsrs	r3, r3, #1
 800fbac:	d1e6      	bne.n	800fb7c <__lo0bits+0x26>
 800fbae:	2020      	movs	r0, #32
 800fbb0:	e7e2      	b.n	800fb78 <__lo0bits+0x22>
	...

0800fbb4 <__i2b>:
 800fbb4:	b510      	push	{r4, lr}
 800fbb6:	000c      	movs	r4, r1
 800fbb8:	2101      	movs	r1, #1
 800fbba:	f7ff feb3 	bl	800f924 <_Balloc>
 800fbbe:	2800      	cmp	r0, #0
 800fbc0:	d107      	bne.n	800fbd2 <__i2b+0x1e>
 800fbc2:	2146      	movs	r1, #70	@ 0x46
 800fbc4:	4c05      	ldr	r4, [pc, #20]	@ (800fbdc <__i2b+0x28>)
 800fbc6:	0002      	movs	r2, r0
 800fbc8:	4b05      	ldr	r3, [pc, #20]	@ (800fbe0 <__i2b+0x2c>)
 800fbca:	0020      	movs	r0, r4
 800fbcc:	31ff      	adds	r1, #255	@ 0xff
 800fbce:	f001 f919 	bl	8010e04 <__assert_func>
 800fbd2:	2301      	movs	r3, #1
 800fbd4:	6144      	str	r4, [r0, #20]
 800fbd6:	6103      	str	r3, [r0, #16]
 800fbd8:	bd10      	pop	{r4, pc}
 800fbda:	46c0      	nop			@ (mov r8, r8)
 800fbdc:	0801c2b2 	.word	0x0801c2b2
 800fbe0:	0801c22a 	.word	0x0801c22a

0800fbe4 <__multiply>:
 800fbe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fbe6:	0014      	movs	r4, r2
 800fbe8:	690a      	ldr	r2, [r1, #16]
 800fbea:	6923      	ldr	r3, [r4, #16]
 800fbec:	000d      	movs	r5, r1
 800fbee:	b089      	sub	sp, #36	@ 0x24
 800fbf0:	429a      	cmp	r2, r3
 800fbf2:	db02      	blt.n	800fbfa <__multiply+0x16>
 800fbf4:	0023      	movs	r3, r4
 800fbf6:	000c      	movs	r4, r1
 800fbf8:	001d      	movs	r5, r3
 800fbfa:	6927      	ldr	r7, [r4, #16]
 800fbfc:	692e      	ldr	r6, [r5, #16]
 800fbfe:	6861      	ldr	r1, [r4, #4]
 800fc00:	19bb      	adds	r3, r7, r6
 800fc02:	9300      	str	r3, [sp, #0]
 800fc04:	68a3      	ldr	r3, [r4, #8]
 800fc06:	19ba      	adds	r2, r7, r6
 800fc08:	4293      	cmp	r3, r2
 800fc0a:	da00      	bge.n	800fc0e <__multiply+0x2a>
 800fc0c:	3101      	adds	r1, #1
 800fc0e:	f7ff fe89 	bl	800f924 <_Balloc>
 800fc12:	4684      	mov	ip, r0
 800fc14:	2800      	cmp	r0, #0
 800fc16:	d106      	bne.n	800fc26 <__multiply+0x42>
 800fc18:	21b1      	movs	r1, #177	@ 0xb1
 800fc1a:	4662      	mov	r2, ip
 800fc1c:	4b44      	ldr	r3, [pc, #272]	@ (800fd30 <__multiply+0x14c>)
 800fc1e:	4845      	ldr	r0, [pc, #276]	@ (800fd34 <__multiply+0x150>)
 800fc20:	0049      	lsls	r1, r1, #1
 800fc22:	f001 f8ef 	bl	8010e04 <__assert_func>
 800fc26:	0002      	movs	r2, r0
 800fc28:	19bb      	adds	r3, r7, r6
 800fc2a:	3214      	adds	r2, #20
 800fc2c:	009b      	lsls	r3, r3, #2
 800fc2e:	18d3      	adds	r3, r2, r3
 800fc30:	9301      	str	r3, [sp, #4]
 800fc32:	2100      	movs	r1, #0
 800fc34:	0013      	movs	r3, r2
 800fc36:	9801      	ldr	r0, [sp, #4]
 800fc38:	4283      	cmp	r3, r0
 800fc3a:	d328      	bcc.n	800fc8e <__multiply+0xaa>
 800fc3c:	0023      	movs	r3, r4
 800fc3e:	00bf      	lsls	r7, r7, #2
 800fc40:	3314      	adds	r3, #20
 800fc42:	9304      	str	r3, [sp, #16]
 800fc44:	3514      	adds	r5, #20
 800fc46:	19db      	adds	r3, r3, r7
 800fc48:	00b6      	lsls	r6, r6, #2
 800fc4a:	9302      	str	r3, [sp, #8]
 800fc4c:	19ab      	adds	r3, r5, r6
 800fc4e:	9307      	str	r3, [sp, #28]
 800fc50:	2304      	movs	r3, #4
 800fc52:	9305      	str	r3, [sp, #20]
 800fc54:	0023      	movs	r3, r4
 800fc56:	9902      	ldr	r1, [sp, #8]
 800fc58:	3315      	adds	r3, #21
 800fc5a:	4299      	cmp	r1, r3
 800fc5c:	d305      	bcc.n	800fc6a <__multiply+0x86>
 800fc5e:	1b0c      	subs	r4, r1, r4
 800fc60:	3c15      	subs	r4, #21
 800fc62:	08a4      	lsrs	r4, r4, #2
 800fc64:	3401      	adds	r4, #1
 800fc66:	00a3      	lsls	r3, r4, #2
 800fc68:	9305      	str	r3, [sp, #20]
 800fc6a:	9b07      	ldr	r3, [sp, #28]
 800fc6c:	429d      	cmp	r5, r3
 800fc6e:	d310      	bcc.n	800fc92 <__multiply+0xae>
 800fc70:	9b00      	ldr	r3, [sp, #0]
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	dd05      	ble.n	800fc82 <__multiply+0x9e>
 800fc76:	9b01      	ldr	r3, [sp, #4]
 800fc78:	3b04      	subs	r3, #4
 800fc7a:	9301      	str	r3, [sp, #4]
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d052      	beq.n	800fd28 <__multiply+0x144>
 800fc82:	4663      	mov	r3, ip
 800fc84:	4660      	mov	r0, ip
 800fc86:	9a00      	ldr	r2, [sp, #0]
 800fc88:	611a      	str	r2, [r3, #16]
 800fc8a:	b009      	add	sp, #36	@ 0x24
 800fc8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc8e:	c302      	stmia	r3!, {r1}
 800fc90:	e7d1      	b.n	800fc36 <__multiply+0x52>
 800fc92:	682c      	ldr	r4, [r5, #0]
 800fc94:	b2a4      	uxth	r4, r4
 800fc96:	2c00      	cmp	r4, #0
 800fc98:	d01f      	beq.n	800fcda <__multiply+0xf6>
 800fc9a:	2300      	movs	r3, #0
 800fc9c:	0017      	movs	r7, r2
 800fc9e:	9e04      	ldr	r6, [sp, #16]
 800fca0:	9303      	str	r3, [sp, #12]
 800fca2:	ce08      	ldmia	r6!, {r3}
 800fca4:	6839      	ldr	r1, [r7, #0]
 800fca6:	9306      	str	r3, [sp, #24]
 800fca8:	466b      	mov	r3, sp
 800fcaa:	8b1b      	ldrh	r3, [r3, #24]
 800fcac:	b288      	uxth	r0, r1
 800fcae:	4363      	muls	r3, r4
 800fcb0:	181b      	adds	r3, r3, r0
 800fcb2:	9803      	ldr	r0, [sp, #12]
 800fcb4:	0c09      	lsrs	r1, r1, #16
 800fcb6:	181b      	adds	r3, r3, r0
 800fcb8:	9806      	ldr	r0, [sp, #24]
 800fcba:	0c00      	lsrs	r0, r0, #16
 800fcbc:	4360      	muls	r0, r4
 800fcbe:	1840      	adds	r0, r0, r1
 800fcc0:	0c19      	lsrs	r1, r3, #16
 800fcc2:	1841      	adds	r1, r0, r1
 800fcc4:	0c08      	lsrs	r0, r1, #16
 800fcc6:	b29b      	uxth	r3, r3
 800fcc8:	0409      	lsls	r1, r1, #16
 800fcca:	4319      	orrs	r1, r3
 800fccc:	9b02      	ldr	r3, [sp, #8]
 800fcce:	9003      	str	r0, [sp, #12]
 800fcd0:	c702      	stmia	r7!, {r1}
 800fcd2:	42b3      	cmp	r3, r6
 800fcd4:	d8e5      	bhi.n	800fca2 <__multiply+0xbe>
 800fcd6:	9b05      	ldr	r3, [sp, #20]
 800fcd8:	50d0      	str	r0, [r2, r3]
 800fcda:	682c      	ldr	r4, [r5, #0]
 800fcdc:	0c24      	lsrs	r4, r4, #16
 800fcde:	d020      	beq.n	800fd22 <__multiply+0x13e>
 800fce0:	2100      	movs	r1, #0
 800fce2:	0010      	movs	r0, r2
 800fce4:	6813      	ldr	r3, [r2, #0]
 800fce6:	9e04      	ldr	r6, [sp, #16]
 800fce8:	9103      	str	r1, [sp, #12]
 800fcea:	6831      	ldr	r1, [r6, #0]
 800fcec:	6807      	ldr	r7, [r0, #0]
 800fcee:	b289      	uxth	r1, r1
 800fcf0:	4361      	muls	r1, r4
 800fcf2:	0c3f      	lsrs	r7, r7, #16
 800fcf4:	19c9      	adds	r1, r1, r7
 800fcf6:	9f03      	ldr	r7, [sp, #12]
 800fcf8:	b29b      	uxth	r3, r3
 800fcfa:	19c9      	adds	r1, r1, r7
 800fcfc:	040f      	lsls	r7, r1, #16
 800fcfe:	431f      	orrs	r7, r3
 800fd00:	6007      	str	r7, [r0, #0]
 800fd02:	ce80      	ldmia	r6!, {r7}
 800fd04:	6843      	ldr	r3, [r0, #4]
 800fd06:	0c3f      	lsrs	r7, r7, #16
 800fd08:	4367      	muls	r7, r4
 800fd0a:	b29b      	uxth	r3, r3
 800fd0c:	0c09      	lsrs	r1, r1, #16
 800fd0e:	18fb      	adds	r3, r7, r3
 800fd10:	185b      	adds	r3, r3, r1
 800fd12:	0c19      	lsrs	r1, r3, #16
 800fd14:	9103      	str	r1, [sp, #12]
 800fd16:	9902      	ldr	r1, [sp, #8]
 800fd18:	3004      	adds	r0, #4
 800fd1a:	42b1      	cmp	r1, r6
 800fd1c:	d8e5      	bhi.n	800fcea <__multiply+0x106>
 800fd1e:	9905      	ldr	r1, [sp, #20]
 800fd20:	5053      	str	r3, [r2, r1]
 800fd22:	3504      	adds	r5, #4
 800fd24:	3204      	adds	r2, #4
 800fd26:	e7a0      	b.n	800fc6a <__multiply+0x86>
 800fd28:	9b00      	ldr	r3, [sp, #0]
 800fd2a:	3b01      	subs	r3, #1
 800fd2c:	9300      	str	r3, [sp, #0]
 800fd2e:	e79f      	b.n	800fc70 <__multiply+0x8c>
 800fd30:	0801c22a 	.word	0x0801c22a
 800fd34:	0801c2b2 	.word	0x0801c2b2

0800fd38 <__pow5mult>:
 800fd38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fd3a:	2303      	movs	r3, #3
 800fd3c:	0015      	movs	r5, r2
 800fd3e:	0007      	movs	r7, r0
 800fd40:	000e      	movs	r6, r1
 800fd42:	401a      	ands	r2, r3
 800fd44:	421d      	tst	r5, r3
 800fd46:	d008      	beq.n	800fd5a <__pow5mult+0x22>
 800fd48:	4925      	ldr	r1, [pc, #148]	@ (800fde0 <__pow5mult+0xa8>)
 800fd4a:	3a01      	subs	r2, #1
 800fd4c:	0092      	lsls	r2, r2, #2
 800fd4e:	5852      	ldr	r2, [r2, r1]
 800fd50:	2300      	movs	r3, #0
 800fd52:	0031      	movs	r1, r6
 800fd54:	f7ff fe4e 	bl	800f9f4 <__multadd>
 800fd58:	0006      	movs	r6, r0
 800fd5a:	10ad      	asrs	r5, r5, #2
 800fd5c:	d03d      	beq.n	800fdda <__pow5mult+0xa2>
 800fd5e:	69fc      	ldr	r4, [r7, #28]
 800fd60:	2c00      	cmp	r4, #0
 800fd62:	d10f      	bne.n	800fd84 <__pow5mult+0x4c>
 800fd64:	2010      	movs	r0, #16
 800fd66:	f001 f899 	bl	8010e9c <malloc>
 800fd6a:	1e02      	subs	r2, r0, #0
 800fd6c:	61f8      	str	r0, [r7, #28]
 800fd6e:	d105      	bne.n	800fd7c <__pow5mult+0x44>
 800fd70:	21b4      	movs	r1, #180	@ 0xb4
 800fd72:	4b1c      	ldr	r3, [pc, #112]	@ (800fde4 <__pow5mult+0xac>)
 800fd74:	481c      	ldr	r0, [pc, #112]	@ (800fde8 <__pow5mult+0xb0>)
 800fd76:	31ff      	adds	r1, #255	@ 0xff
 800fd78:	f001 f844 	bl	8010e04 <__assert_func>
 800fd7c:	6044      	str	r4, [r0, #4]
 800fd7e:	6084      	str	r4, [r0, #8]
 800fd80:	6004      	str	r4, [r0, #0]
 800fd82:	60c4      	str	r4, [r0, #12]
 800fd84:	69fb      	ldr	r3, [r7, #28]
 800fd86:	689c      	ldr	r4, [r3, #8]
 800fd88:	9301      	str	r3, [sp, #4]
 800fd8a:	2c00      	cmp	r4, #0
 800fd8c:	d108      	bne.n	800fda0 <__pow5mult+0x68>
 800fd8e:	0038      	movs	r0, r7
 800fd90:	4916      	ldr	r1, [pc, #88]	@ (800fdec <__pow5mult+0xb4>)
 800fd92:	f7ff ff0f 	bl	800fbb4 <__i2b>
 800fd96:	9b01      	ldr	r3, [sp, #4]
 800fd98:	0004      	movs	r4, r0
 800fd9a:	6098      	str	r0, [r3, #8]
 800fd9c:	2300      	movs	r3, #0
 800fd9e:	6003      	str	r3, [r0, #0]
 800fda0:	2301      	movs	r3, #1
 800fda2:	421d      	tst	r5, r3
 800fda4:	d00a      	beq.n	800fdbc <__pow5mult+0x84>
 800fda6:	0031      	movs	r1, r6
 800fda8:	0022      	movs	r2, r4
 800fdaa:	0038      	movs	r0, r7
 800fdac:	f7ff ff1a 	bl	800fbe4 <__multiply>
 800fdb0:	0031      	movs	r1, r6
 800fdb2:	9001      	str	r0, [sp, #4]
 800fdb4:	0038      	movs	r0, r7
 800fdb6:	f7ff fdf9 	bl	800f9ac <_Bfree>
 800fdba:	9e01      	ldr	r6, [sp, #4]
 800fdbc:	106d      	asrs	r5, r5, #1
 800fdbe:	d00c      	beq.n	800fdda <__pow5mult+0xa2>
 800fdc0:	6820      	ldr	r0, [r4, #0]
 800fdc2:	2800      	cmp	r0, #0
 800fdc4:	d107      	bne.n	800fdd6 <__pow5mult+0x9e>
 800fdc6:	0022      	movs	r2, r4
 800fdc8:	0021      	movs	r1, r4
 800fdca:	0038      	movs	r0, r7
 800fdcc:	f7ff ff0a 	bl	800fbe4 <__multiply>
 800fdd0:	2300      	movs	r3, #0
 800fdd2:	6020      	str	r0, [r4, #0]
 800fdd4:	6003      	str	r3, [r0, #0]
 800fdd6:	0004      	movs	r4, r0
 800fdd8:	e7e2      	b.n	800fda0 <__pow5mult+0x68>
 800fdda:	0030      	movs	r0, r6
 800fddc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800fdde:	46c0      	nop			@ (mov r8, r8)
 800fde0:	0801c4d4 	.word	0x0801c4d4
 800fde4:	0801c29b 	.word	0x0801c29b
 800fde8:	0801c2b2 	.word	0x0801c2b2
 800fdec:	00000271 	.word	0x00000271

0800fdf0 <__lshift>:
 800fdf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fdf2:	000c      	movs	r4, r1
 800fdf4:	0016      	movs	r6, r2
 800fdf6:	6923      	ldr	r3, [r4, #16]
 800fdf8:	1157      	asrs	r7, r2, #5
 800fdfa:	b085      	sub	sp, #20
 800fdfc:	18fb      	adds	r3, r7, r3
 800fdfe:	9301      	str	r3, [sp, #4]
 800fe00:	3301      	adds	r3, #1
 800fe02:	9300      	str	r3, [sp, #0]
 800fe04:	6849      	ldr	r1, [r1, #4]
 800fe06:	68a3      	ldr	r3, [r4, #8]
 800fe08:	9002      	str	r0, [sp, #8]
 800fe0a:	9a00      	ldr	r2, [sp, #0]
 800fe0c:	4293      	cmp	r3, r2
 800fe0e:	db10      	blt.n	800fe32 <__lshift+0x42>
 800fe10:	9802      	ldr	r0, [sp, #8]
 800fe12:	f7ff fd87 	bl	800f924 <_Balloc>
 800fe16:	2300      	movs	r3, #0
 800fe18:	0001      	movs	r1, r0
 800fe1a:	0005      	movs	r5, r0
 800fe1c:	001a      	movs	r2, r3
 800fe1e:	3114      	adds	r1, #20
 800fe20:	4298      	cmp	r0, r3
 800fe22:	d10c      	bne.n	800fe3e <__lshift+0x4e>
 800fe24:	21ef      	movs	r1, #239	@ 0xef
 800fe26:	002a      	movs	r2, r5
 800fe28:	4b25      	ldr	r3, [pc, #148]	@ (800fec0 <__lshift+0xd0>)
 800fe2a:	4826      	ldr	r0, [pc, #152]	@ (800fec4 <__lshift+0xd4>)
 800fe2c:	0049      	lsls	r1, r1, #1
 800fe2e:	f000 ffe9 	bl	8010e04 <__assert_func>
 800fe32:	3101      	adds	r1, #1
 800fe34:	005b      	lsls	r3, r3, #1
 800fe36:	e7e8      	b.n	800fe0a <__lshift+0x1a>
 800fe38:	0098      	lsls	r0, r3, #2
 800fe3a:	500a      	str	r2, [r1, r0]
 800fe3c:	3301      	adds	r3, #1
 800fe3e:	42bb      	cmp	r3, r7
 800fe40:	dbfa      	blt.n	800fe38 <__lshift+0x48>
 800fe42:	43fb      	mvns	r3, r7
 800fe44:	17db      	asrs	r3, r3, #31
 800fe46:	401f      	ands	r7, r3
 800fe48:	00bf      	lsls	r7, r7, #2
 800fe4a:	0023      	movs	r3, r4
 800fe4c:	201f      	movs	r0, #31
 800fe4e:	19c9      	adds	r1, r1, r7
 800fe50:	0037      	movs	r7, r6
 800fe52:	6922      	ldr	r2, [r4, #16]
 800fe54:	3314      	adds	r3, #20
 800fe56:	0092      	lsls	r2, r2, #2
 800fe58:	189a      	adds	r2, r3, r2
 800fe5a:	4007      	ands	r7, r0
 800fe5c:	4206      	tst	r6, r0
 800fe5e:	d029      	beq.n	800feb4 <__lshift+0xc4>
 800fe60:	3001      	adds	r0, #1
 800fe62:	1bc0      	subs	r0, r0, r7
 800fe64:	9003      	str	r0, [sp, #12]
 800fe66:	468c      	mov	ip, r1
 800fe68:	2000      	movs	r0, #0
 800fe6a:	681e      	ldr	r6, [r3, #0]
 800fe6c:	40be      	lsls	r6, r7
 800fe6e:	4306      	orrs	r6, r0
 800fe70:	4660      	mov	r0, ip
 800fe72:	c040      	stmia	r0!, {r6}
 800fe74:	4684      	mov	ip, r0
 800fe76:	9e03      	ldr	r6, [sp, #12]
 800fe78:	cb01      	ldmia	r3!, {r0}
 800fe7a:	40f0      	lsrs	r0, r6
 800fe7c:	429a      	cmp	r2, r3
 800fe7e:	d8f4      	bhi.n	800fe6a <__lshift+0x7a>
 800fe80:	0026      	movs	r6, r4
 800fe82:	3615      	adds	r6, #21
 800fe84:	2304      	movs	r3, #4
 800fe86:	42b2      	cmp	r2, r6
 800fe88:	d304      	bcc.n	800fe94 <__lshift+0xa4>
 800fe8a:	1b13      	subs	r3, r2, r4
 800fe8c:	3b15      	subs	r3, #21
 800fe8e:	089b      	lsrs	r3, r3, #2
 800fe90:	3301      	adds	r3, #1
 800fe92:	009b      	lsls	r3, r3, #2
 800fe94:	50c8      	str	r0, [r1, r3]
 800fe96:	2800      	cmp	r0, #0
 800fe98:	d002      	beq.n	800fea0 <__lshift+0xb0>
 800fe9a:	9b01      	ldr	r3, [sp, #4]
 800fe9c:	3302      	adds	r3, #2
 800fe9e:	9300      	str	r3, [sp, #0]
 800fea0:	9b00      	ldr	r3, [sp, #0]
 800fea2:	9802      	ldr	r0, [sp, #8]
 800fea4:	3b01      	subs	r3, #1
 800fea6:	0021      	movs	r1, r4
 800fea8:	612b      	str	r3, [r5, #16]
 800feaa:	f7ff fd7f 	bl	800f9ac <_Bfree>
 800feae:	0028      	movs	r0, r5
 800feb0:	b005      	add	sp, #20
 800feb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800feb4:	cb01      	ldmia	r3!, {r0}
 800feb6:	c101      	stmia	r1!, {r0}
 800feb8:	429a      	cmp	r2, r3
 800feba:	d8fb      	bhi.n	800feb4 <__lshift+0xc4>
 800febc:	e7f0      	b.n	800fea0 <__lshift+0xb0>
 800febe:	46c0      	nop			@ (mov r8, r8)
 800fec0:	0801c22a 	.word	0x0801c22a
 800fec4:	0801c2b2 	.word	0x0801c2b2

0800fec8 <__mcmp>:
 800fec8:	b530      	push	{r4, r5, lr}
 800feca:	690b      	ldr	r3, [r1, #16]
 800fecc:	6904      	ldr	r4, [r0, #16]
 800fece:	0002      	movs	r2, r0
 800fed0:	1ae0      	subs	r0, r4, r3
 800fed2:	429c      	cmp	r4, r3
 800fed4:	d10f      	bne.n	800fef6 <__mcmp+0x2e>
 800fed6:	3214      	adds	r2, #20
 800fed8:	009b      	lsls	r3, r3, #2
 800feda:	3114      	adds	r1, #20
 800fedc:	0014      	movs	r4, r2
 800fede:	18c9      	adds	r1, r1, r3
 800fee0:	18d2      	adds	r2, r2, r3
 800fee2:	3a04      	subs	r2, #4
 800fee4:	3904      	subs	r1, #4
 800fee6:	6815      	ldr	r5, [r2, #0]
 800fee8:	680b      	ldr	r3, [r1, #0]
 800feea:	429d      	cmp	r5, r3
 800feec:	d004      	beq.n	800fef8 <__mcmp+0x30>
 800feee:	2001      	movs	r0, #1
 800fef0:	429d      	cmp	r5, r3
 800fef2:	d200      	bcs.n	800fef6 <__mcmp+0x2e>
 800fef4:	3802      	subs	r0, #2
 800fef6:	bd30      	pop	{r4, r5, pc}
 800fef8:	4294      	cmp	r4, r2
 800fefa:	d3f2      	bcc.n	800fee2 <__mcmp+0x1a>
 800fefc:	e7fb      	b.n	800fef6 <__mcmp+0x2e>
	...

0800ff00 <__mdiff>:
 800ff00:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff02:	000c      	movs	r4, r1
 800ff04:	b087      	sub	sp, #28
 800ff06:	9000      	str	r0, [sp, #0]
 800ff08:	0011      	movs	r1, r2
 800ff0a:	0020      	movs	r0, r4
 800ff0c:	0017      	movs	r7, r2
 800ff0e:	f7ff ffdb 	bl	800fec8 <__mcmp>
 800ff12:	1e05      	subs	r5, r0, #0
 800ff14:	d110      	bne.n	800ff38 <__mdiff+0x38>
 800ff16:	0001      	movs	r1, r0
 800ff18:	9800      	ldr	r0, [sp, #0]
 800ff1a:	f7ff fd03 	bl	800f924 <_Balloc>
 800ff1e:	1e02      	subs	r2, r0, #0
 800ff20:	d104      	bne.n	800ff2c <__mdiff+0x2c>
 800ff22:	4b40      	ldr	r3, [pc, #256]	@ (8010024 <__mdiff+0x124>)
 800ff24:	4840      	ldr	r0, [pc, #256]	@ (8010028 <__mdiff+0x128>)
 800ff26:	4941      	ldr	r1, [pc, #260]	@ (801002c <__mdiff+0x12c>)
 800ff28:	f000 ff6c 	bl	8010e04 <__assert_func>
 800ff2c:	2301      	movs	r3, #1
 800ff2e:	6145      	str	r5, [r0, #20]
 800ff30:	6103      	str	r3, [r0, #16]
 800ff32:	0010      	movs	r0, r2
 800ff34:	b007      	add	sp, #28
 800ff36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ff38:	2600      	movs	r6, #0
 800ff3a:	42b0      	cmp	r0, r6
 800ff3c:	da03      	bge.n	800ff46 <__mdiff+0x46>
 800ff3e:	0023      	movs	r3, r4
 800ff40:	003c      	movs	r4, r7
 800ff42:	001f      	movs	r7, r3
 800ff44:	3601      	adds	r6, #1
 800ff46:	6861      	ldr	r1, [r4, #4]
 800ff48:	9800      	ldr	r0, [sp, #0]
 800ff4a:	f7ff fceb 	bl	800f924 <_Balloc>
 800ff4e:	1e02      	subs	r2, r0, #0
 800ff50:	d103      	bne.n	800ff5a <__mdiff+0x5a>
 800ff52:	4b34      	ldr	r3, [pc, #208]	@ (8010024 <__mdiff+0x124>)
 800ff54:	4834      	ldr	r0, [pc, #208]	@ (8010028 <__mdiff+0x128>)
 800ff56:	4936      	ldr	r1, [pc, #216]	@ (8010030 <__mdiff+0x130>)
 800ff58:	e7e6      	b.n	800ff28 <__mdiff+0x28>
 800ff5a:	6923      	ldr	r3, [r4, #16]
 800ff5c:	3414      	adds	r4, #20
 800ff5e:	9300      	str	r3, [sp, #0]
 800ff60:	009b      	lsls	r3, r3, #2
 800ff62:	18e3      	adds	r3, r4, r3
 800ff64:	0021      	movs	r1, r4
 800ff66:	9401      	str	r4, [sp, #4]
 800ff68:	003c      	movs	r4, r7
 800ff6a:	9302      	str	r3, [sp, #8]
 800ff6c:	693b      	ldr	r3, [r7, #16]
 800ff6e:	3414      	adds	r4, #20
 800ff70:	009b      	lsls	r3, r3, #2
 800ff72:	18e3      	adds	r3, r4, r3
 800ff74:	9303      	str	r3, [sp, #12]
 800ff76:	0003      	movs	r3, r0
 800ff78:	60c6      	str	r6, [r0, #12]
 800ff7a:	468c      	mov	ip, r1
 800ff7c:	2000      	movs	r0, #0
 800ff7e:	3314      	adds	r3, #20
 800ff80:	9304      	str	r3, [sp, #16]
 800ff82:	9305      	str	r3, [sp, #20]
 800ff84:	4663      	mov	r3, ip
 800ff86:	cb20      	ldmia	r3!, {r5}
 800ff88:	b2a9      	uxth	r1, r5
 800ff8a:	000e      	movs	r6, r1
 800ff8c:	469c      	mov	ip, r3
 800ff8e:	cc08      	ldmia	r4!, {r3}
 800ff90:	0c2d      	lsrs	r5, r5, #16
 800ff92:	b299      	uxth	r1, r3
 800ff94:	1a71      	subs	r1, r6, r1
 800ff96:	1809      	adds	r1, r1, r0
 800ff98:	0c1b      	lsrs	r3, r3, #16
 800ff9a:	1408      	asrs	r0, r1, #16
 800ff9c:	1aeb      	subs	r3, r5, r3
 800ff9e:	181b      	adds	r3, r3, r0
 800ffa0:	1418      	asrs	r0, r3, #16
 800ffa2:	b289      	uxth	r1, r1
 800ffa4:	041b      	lsls	r3, r3, #16
 800ffa6:	4319      	orrs	r1, r3
 800ffa8:	9b05      	ldr	r3, [sp, #20]
 800ffaa:	c302      	stmia	r3!, {r1}
 800ffac:	9305      	str	r3, [sp, #20]
 800ffae:	9b03      	ldr	r3, [sp, #12]
 800ffb0:	42a3      	cmp	r3, r4
 800ffb2:	d8e7      	bhi.n	800ff84 <__mdiff+0x84>
 800ffb4:	0039      	movs	r1, r7
 800ffb6:	9c03      	ldr	r4, [sp, #12]
 800ffb8:	3115      	adds	r1, #21
 800ffba:	2304      	movs	r3, #4
 800ffbc:	428c      	cmp	r4, r1
 800ffbe:	d304      	bcc.n	800ffca <__mdiff+0xca>
 800ffc0:	1be3      	subs	r3, r4, r7
 800ffc2:	3b15      	subs	r3, #21
 800ffc4:	089b      	lsrs	r3, r3, #2
 800ffc6:	3301      	adds	r3, #1
 800ffc8:	009b      	lsls	r3, r3, #2
 800ffca:	9901      	ldr	r1, [sp, #4]
 800ffcc:	18cd      	adds	r5, r1, r3
 800ffce:	9904      	ldr	r1, [sp, #16]
 800ffd0:	002e      	movs	r6, r5
 800ffd2:	18cb      	adds	r3, r1, r3
 800ffd4:	001f      	movs	r7, r3
 800ffd6:	9902      	ldr	r1, [sp, #8]
 800ffd8:	428e      	cmp	r6, r1
 800ffda:	d311      	bcc.n	8010000 <__mdiff+0x100>
 800ffdc:	9c02      	ldr	r4, [sp, #8]
 800ffde:	1ee9      	subs	r1, r5, #3
 800ffe0:	2000      	movs	r0, #0
 800ffe2:	428c      	cmp	r4, r1
 800ffe4:	d304      	bcc.n	800fff0 <__mdiff+0xf0>
 800ffe6:	0021      	movs	r1, r4
 800ffe8:	3103      	adds	r1, #3
 800ffea:	1b49      	subs	r1, r1, r5
 800ffec:	0889      	lsrs	r1, r1, #2
 800ffee:	0088      	lsls	r0, r1, #2
 800fff0:	181b      	adds	r3, r3, r0
 800fff2:	3b04      	subs	r3, #4
 800fff4:	6819      	ldr	r1, [r3, #0]
 800fff6:	2900      	cmp	r1, #0
 800fff8:	d010      	beq.n	801001c <__mdiff+0x11c>
 800fffa:	9b00      	ldr	r3, [sp, #0]
 800fffc:	6113      	str	r3, [r2, #16]
 800fffe:	e798      	b.n	800ff32 <__mdiff+0x32>
 8010000:	4684      	mov	ip, r0
 8010002:	ce02      	ldmia	r6!, {r1}
 8010004:	b288      	uxth	r0, r1
 8010006:	4460      	add	r0, ip
 8010008:	1400      	asrs	r0, r0, #16
 801000a:	0c0c      	lsrs	r4, r1, #16
 801000c:	1904      	adds	r4, r0, r4
 801000e:	4461      	add	r1, ip
 8010010:	1420      	asrs	r0, r4, #16
 8010012:	b289      	uxth	r1, r1
 8010014:	0424      	lsls	r4, r4, #16
 8010016:	4321      	orrs	r1, r4
 8010018:	c702      	stmia	r7!, {r1}
 801001a:	e7dc      	b.n	800ffd6 <__mdiff+0xd6>
 801001c:	9900      	ldr	r1, [sp, #0]
 801001e:	3901      	subs	r1, #1
 8010020:	9100      	str	r1, [sp, #0]
 8010022:	e7e6      	b.n	800fff2 <__mdiff+0xf2>
 8010024:	0801c22a 	.word	0x0801c22a
 8010028:	0801c2b2 	.word	0x0801c2b2
 801002c:	00000237 	.word	0x00000237
 8010030:	00000245 	.word	0x00000245

08010034 <__ulp>:
 8010034:	b510      	push	{r4, lr}
 8010036:	2400      	movs	r4, #0
 8010038:	4b0c      	ldr	r3, [pc, #48]	@ (801006c <__ulp+0x38>)
 801003a:	4a0d      	ldr	r2, [pc, #52]	@ (8010070 <__ulp+0x3c>)
 801003c:	400b      	ands	r3, r1
 801003e:	189b      	adds	r3, r3, r2
 8010040:	42a3      	cmp	r3, r4
 8010042:	dc06      	bgt.n	8010052 <__ulp+0x1e>
 8010044:	425b      	negs	r3, r3
 8010046:	151a      	asrs	r2, r3, #20
 8010048:	2a13      	cmp	r2, #19
 801004a:	dc05      	bgt.n	8010058 <__ulp+0x24>
 801004c:	2380      	movs	r3, #128	@ 0x80
 801004e:	031b      	lsls	r3, r3, #12
 8010050:	4113      	asrs	r3, r2
 8010052:	0019      	movs	r1, r3
 8010054:	0020      	movs	r0, r4
 8010056:	bd10      	pop	{r4, pc}
 8010058:	3a14      	subs	r2, #20
 801005a:	2401      	movs	r4, #1
 801005c:	2a1e      	cmp	r2, #30
 801005e:	dc02      	bgt.n	8010066 <__ulp+0x32>
 8010060:	2480      	movs	r4, #128	@ 0x80
 8010062:	0624      	lsls	r4, r4, #24
 8010064:	40d4      	lsrs	r4, r2
 8010066:	2300      	movs	r3, #0
 8010068:	e7f3      	b.n	8010052 <__ulp+0x1e>
 801006a:	46c0      	nop			@ (mov r8, r8)
 801006c:	7ff00000 	.word	0x7ff00000
 8010070:	fcc00000 	.word	0xfcc00000

08010074 <__b2d>:
 8010074:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010076:	0006      	movs	r6, r0
 8010078:	6903      	ldr	r3, [r0, #16]
 801007a:	3614      	adds	r6, #20
 801007c:	009b      	lsls	r3, r3, #2
 801007e:	18f3      	adds	r3, r6, r3
 8010080:	1f1d      	subs	r5, r3, #4
 8010082:	682c      	ldr	r4, [r5, #0]
 8010084:	000f      	movs	r7, r1
 8010086:	0020      	movs	r0, r4
 8010088:	9301      	str	r3, [sp, #4]
 801008a:	f7ff fd43 	bl	800fb14 <__hi0bits>
 801008e:	2220      	movs	r2, #32
 8010090:	1a12      	subs	r2, r2, r0
 8010092:	603a      	str	r2, [r7, #0]
 8010094:	0003      	movs	r3, r0
 8010096:	4a1c      	ldr	r2, [pc, #112]	@ (8010108 <__b2d+0x94>)
 8010098:	280a      	cmp	r0, #10
 801009a:	dc15      	bgt.n	80100c8 <__b2d+0x54>
 801009c:	210b      	movs	r1, #11
 801009e:	0027      	movs	r7, r4
 80100a0:	1a09      	subs	r1, r1, r0
 80100a2:	40cf      	lsrs	r7, r1
 80100a4:	433a      	orrs	r2, r7
 80100a6:	468c      	mov	ip, r1
 80100a8:	0011      	movs	r1, r2
 80100aa:	2200      	movs	r2, #0
 80100ac:	42ae      	cmp	r6, r5
 80100ae:	d202      	bcs.n	80100b6 <__b2d+0x42>
 80100b0:	9a01      	ldr	r2, [sp, #4]
 80100b2:	3a08      	subs	r2, #8
 80100b4:	6812      	ldr	r2, [r2, #0]
 80100b6:	3315      	adds	r3, #21
 80100b8:	409c      	lsls	r4, r3
 80100ba:	4663      	mov	r3, ip
 80100bc:	0027      	movs	r7, r4
 80100be:	40da      	lsrs	r2, r3
 80100c0:	4317      	orrs	r7, r2
 80100c2:	0038      	movs	r0, r7
 80100c4:	b003      	add	sp, #12
 80100c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80100c8:	2700      	movs	r7, #0
 80100ca:	42ae      	cmp	r6, r5
 80100cc:	d202      	bcs.n	80100d4 <__b2d+0x60>
 80100ce:	9d01      	ldr	r5, [sp, #4]
 80100d0:	3d08      	subs	r5, #8
 80100d2:	682f      	ldr	r7, [r5, #0]
 80100d4:	210b      	movs	r1, #11
 80100d6:	4249      	negs	r1, r1
 80100d8:	468c      	mov	ip, r1
 80100da:	449c      	add	ip, r3
 80100dc:	2b0b      	cmp	r3, #11
 80100de:	d010      	beq.n	8010102 <__b2d+0x8e>
 80100e0:	4661      	mov	r1, ip
 80100e2:	2320      	movs	r3, #32
 80100e4:	408c      	lsls	r4, r1
 80100e6:	1a5b      	subs	r3, r3, r1
 80100e8:	0039      	movs	r1, r7
 80100ea:	40d9      	lsrs	r1, r3
 80100ec:	430c      	orrs	r4, r1
 80100ee:	4322      	orrs	r2, r4
 80100f0:	0011      	movs	r1, r2
 80100f2:	2200      	movs	r2, #0
 80100f4:	42b5      	cmp	r5, r6
 80100f6:	d901      	bls.n	80100fc <__b2d+0x88>
 80100f8:	3d04      	subs	r5, #4
 80100fa:	682a      	ldr	r2, [r5, #0]
 80100fc:	4664      	mov	r4, ip
 80100fe:	40a7      	lsls	r7, r4
 8010100:	e7dd      	b.n	80100be <__b2d+0x4a>
 8010102:	4322      	orrs	r2, r4
 8010104:	0011      	movs	r1, r2
 8010106:	e7dc      	b.n	80100c2 <__b2d+0x4e>
 8010108:	3ff00000 	.word	0x3ff00000

0801010c <__d2b>:
 801010c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801010e:	2101      	movs	r1, #1
 8010110:	0016      	movs	r6, r2
 8010112:	001f      	movs	r7, r3
 8010114:	f7ff fc06 	bl	800f924 <_Balloc>
 8010118:	1e04      	subs	r4, r0, #0
 801011a:	d105      	bne.n	8010128 <__d2b+0x1c>
 801011c:	0022      	movs	r2, r4
 801011e:	4b25      	ldr	r3, [pc, #148]	@ (80101b4 <__d2b+0xa8>)
 8010120:	4825      	ldr	r0, [pc, #148]	@ (80101b8 <__d2b+0xac>)
 8010122:	4926      	ldr	r1, [pc, #152]	@ (80101bc <__d2b+0xb0>)
 8010124:	f000 fe6e 	bl	8010e04 <__assert_func>
 8010128:	033b      	lsls	r3, r7, #12
 801012a:	007d      	lsls	r5, r7, #1
 801012c:	0b1b      	lsrs	r3, r3, #12
 801012e:	0d6d      	lsrs	r5, r5, #21
 8010130:	d002      	beq.n	8010138 <__d2b+0x2c>
 8010132:	2280      	movs	r2, #128	@ 0x80
 8010134:	0352      	lsls	r2, r2, #13
 8010136:	4313      	orrs	r3, r2
 8010138:	9301      	str	r3, [sp, #4]
 801013a:	2e00      	cmp	r6, #0
 801013c:	d025      	beq.n	801018a <__d2b+0x7e>
 801013e:	4668      	mov	r0, sp
 8010140:	9600      	str	r6, [sp, #0]
 8010142:	f7ff fd08 	bl	800fb56 <__lo0bits>
 8010146:	9b01      	ldr	r3, [sp, #4]
 8010148:	9900      	ldr	r1, [sp, #0]
 801014a:	2800      	cmp	r0, #0
 801014c:	d01b      	beq.n	8010186 <__d2b+0x7a>
 801014e:	2220      	movs	r2, #32
 8010150:	001e      	movs	r6, r3
 8010152:	1a12      	subs	r2, r2, r0
 8010154:	4096      	lsls	r6, r2
 8010156:	0032      	movs	r2, r6
 8010158:	40c3      	lsrs	r3, r0
 801015a:	430a      	orrs	r2, r1
 801015c:	6162      	str	r2, [r4, #20]
 801015e:	9301      	str	r3, [sp, #4]
 8010160:	9e01      	ldr	r6, [sp, #4]
 8010162:	61a6      	str	r6, [r4, #24]
 8010164:	1e73      	subs	r3, r6, #1
 8010166:	419e      	sbcs	r6, r3
 8010168:	3601      	adds	r6, #1
 801016a:	6126      	str	r6, [r4, #16]
 801016c:	2d00      	cmp	r5, #0
 801016e:	d014      	beq.n	801019a <__d2b+0x8e>
 8010170:	2635      	movs	r6, #53	@ 0x35
 8010172:	4b13      	ldr	r3, [pc, #76]	@ (80101c0 <__d2b+0xb4>)
 8010174:	18ed      	adds	r5, r5, r3
 8010176:	9b08      	ldr	r3, [sp, #32]
 8010178:	182d      	adds	r5, r5, r0
 801017a:	601d      	str	r5, [r3, #0]
 801017c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801017e:	1a36      	subs	r6, r6, r0
 8010180:	601e      	str	r6, [r3, #0]
 8010182:	0020      	movs	r0, r4
 8010184:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010186:	6161      	str	r1, [r4, #20]
 8010188:	e7ea      	b.n	8010160 <__d2b+0x54>
 801018a:	a801      	add	r0, sp, #4
 801018c:	f7ff fce3 	bl	800fb56 <__lo0bits>
 8010190:	9b01      	ldr	r3, [sp, #4]
 8010192:	2601      	movs	r6, #1
 8010194:	6163      	str	r3, [r4, #20]
 8010196:	3020      	adds	r0, #32
 8010198:	e7e7      	b.n	801016a <__d2b+0x5e>
 801019a:	4b0a      	ldr	r3, [pc, #40]	@ (80101c4 <__d2b+0xb8>)
 801019c:	18c0      	adds	r0, r0, r3
 801019e:	9b08      	ldr	r3, [sp, #32]
 80101a0:	6018      	str	r0, [r3, #0]
 80101a2:	4b09      	ldr	r3, [pc, #36]	@ (80101c8 <__d2b+0xbc>)
 80101a4:	18f3      	adds	r3, r6, r3
 80101a6:	009b      	lsls	r3, r3, #2
 80101a8:	18e3      	adds	r3, r4, r3
 80101aa:	6958      	ldr	r0, [r3, #20]
 80101ac:	f7ff fcb2 	bl	800fb14 <__hi0bits>
 80101b0:	0176      	lsls	r6, r6, #5
 80101b2:	e7e3      	b.n	801017c <__d2b+0x70>
 80101b4:	0801c22a 	.word	0x0801c22a
 80101b8:	0801c2b2 	.word	0x0801c2b2
 80101bc:	0000030f 	.word	0x0000030f
 80101c0:	fffffbcd 	.word	0xfffffbcd
 80101c4:	fffffbce 	.word	0xfffffbce
 80101c8:	3fffffff 	.word	0x3fffffff

080101cc <__ratio>:
 80101cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80101ce:	b087      	sub	sp, #28
 80101d0:	000f      	movs	r7, r1
 80101d2:	a904      	add	r1, sp, #16
 80101d4:	0006      	movs	r6, r0
 80101d6:	f7ff ff4d 	bl	8010074 <__b2d>
 80101da:	9000      	str	r0, [sp, #0]
 80101dc:	9101      	str	r1, [sp, #4]
 80101de:	9b00      	ldr	r3, [sp, #0]
 80101e0:	9c01      	ldr	r4, [sp, #4]
 80101e2:	0038      	movs	r0, r7
 80101e4:	a905      	add	r1, sp, #20
 80101e6:	9302      	str	r3, [sp, #8]
 80101e8:	9403      	str	r4, [sp, #12]
 80101ea:	f7ff ff43 	bl	8010074 <__b2d>
 80101ee:	000d      	movs	r5, r1
 80101f0:	0002      	movs	r2, r0
 80101f2:	000b      	movs	r3, r1
 80101f4:	6930      	ldr	r0, [r6, #16]
 80101f6:	6939      	ldr	r1, [r7, #16]
 80101f8:	9e04      	ldr	r6, [sp, #16]
 80101fa:	1a40      	subs	r0, r0, r1
 80101fc:	9905      	ldr	r1, [sp, #20]
 80101fe:	0140      	lsls	r0, r0, #5
 8010200:	1a71      	subs	r1, r6, r1
 8010202:	1841      	adds	r1, r0, r1
 8010204:	0508      	lsls	r0, r1, #20
 8010206:	2900      	cmp	r1, #0
 8010208:	dd08      	ble.n	801021c <__ratio+0x50>
 801020a:	9901      	ldr	r1, [sp, #4]
 801020c:	1841      	adds	r1, r0, r1
 801020e:	9103      	str	r1, [sp, #12]
 8010210:	9802      	ldr	r0, [sp, #8]
 8010212:	9903      	ldr	r1, [sp, #12]
 8010214:	f7f1 ff46 	bl	80020a4 <__aeabi_ddiv>
 8010218:	b007      	add	sp, #28
 801021a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801021c:	1a2b      	subs	r3, r5, r0
 801021e:	e7f7      	b.n	8010210 <__ratio+0x44>

08010220 <__copybits>:
 8010220:	b570      	push	{r4, r5, r6, lr}
 8010222:	0014      	movs	r4, r2
 8010224:	0005      	movs	r5, r0
 8010226:	3901      	subs	r1, #1
 8010228:	6913      	ldr	r3, [r2, #16]
 801022a:	1149      	asrs	r1, r1, #5
 801022c:	3101      	adds	r1, #1
 801022e:	0089      	lsls	r1, r1, #2
 8010230:	3414      	adds	r4, #20
 8010232:	009b      	lsls	r3, r3, #2
 8010234:	1841      	adds	r1, r0, r1
 8010236:	18e3      	adds	r3, r4, r3
 8010238:	42a3      	cmp	r3, r4
 801023a:	d80d      	bhi.n	8010258 <__copybits+0x38>
 801023c:	0014      	movs	r4, r2
 801023e:	3411      	adds	r4, #17
 8010240:	2500      	movs	r5, #0
 8010242:	42a3      	cmp	r3, r4
 8010244:	d303      	bcc.n	801024e <__copybits+0x2e>
 8010246:	1a9b      	subs	r3, r3, r2
 8010248:	3b11      	subs	r3, #17
 801024a:	089b      	lsrs	r3, r3, #2
 801024c:	009d      	lsls	r5, r3, #2
 801024e:	2300      	movs	r3, #0
 8010250:	1940      	adds	r0, r0, r5
 8010252:	4281      	cmp	r1, r0
 8010254:	d803      	bhi.n	801025e <__copybits+0x3e>
 8010256:	bd70      	pop	{r4, r5, r6, pc}
 8010258:	cc40      	ldmia	r4!, {r6}
 801025a:	c540      	stmia	r5!, {r6}
 801025c:	e7ec      	b.n	8010238 <__copybits+0x18>
 801025e:	c008      	stmia	r0!, {r3}
 8010260:	e7f7      	b.n	8010252 <__copybits+0x32>

08010262 <__any_on>:
 8010262:	0002      	movs	r2, r0
 8010264:	6900      	ldr	r0, [r0, #16]
 8010266:	b510      	push	{r4, lr}
 8010268:	3214      	adds	r2, #20
 801026a:	114b      	asrs	r3, r1, #5
 801026c:	4298      	cmp	r0, r3
 801026e:	db13      	blt.n	8010298 <__any_on+0x36>
 8010270:	dd0c      	ble.n	801028c <__any_on+0x2a>
 8010272:	241f      	movs	r4, #31
 8010274:	0008      	movs	r0, r1
 8010276:	4020      	ands	r0, r4
 8010278:	4221      	tst	r1, r4
 801027a:	d007      	beq.n	801028c <__any_on+0x2a>
 801027c:	0099      	lsls	r1, r3, #2
 801027e:	588c      	ldr	r4, [r1, r2]
 8010280:	0021      	movs	r1, r4
 8010282:	40c1      	lsrs	r1, r0
 8010284:	4081      	lsls	r1, r0
 8010286:	2001      	movs	r0, #1
 8010288:	428c      	cmp	r4, r1
 801028a:	d104      	bne.n	8010296 <__any_on+0x34>
 801028c:	009b      	lsls	r3, r3, #2
 801028e:	18d3      	adds	r3, r2, r3
 8010290:	4293      	cmp	r3, r2
 8010292:	d803      	bhi.n	801029c <__any_on+0x3a>
 8010294:	2000      	movs	r0, #0
 8010296:	bd10      	pop	{r4, pc}
 8010298:	0003      	movs	r3, r0
 801029a:	e7f7      	b.n	801028c <__any_on+0x2a>
 801029c:	3b04      	subs	r3, #4
 801029e:	6819      	ldr	r1, [r3, #0]
 80102a0:	2900      	cmp	r1, #0
 80102a2:	d0f5      	beq.n	8010290 <__any_on+0x2e>
 80102a4:	2001      	movs	r0, #1
 80102a6:	e7f6      	b.n	8010296 <__any_on+0x34>

080102a8 <__ascii_wctomb>:
 80102a8:	0003      	movs	r3, r0
 80102aa:	1e08      	subs	r0, r1, #0
 80102ac:	d005      	beq.n	80102ba <__ascii_wctomb+0x12>
 80102ae:	2aff      	cmp	r2, #255	@ 0xff
 80102b0:	d904      	bls.n	80102bc <__ascii_wctomb+0x14>
 80102b2:	228a      	movs	r2, #138	@ 0x8a
 80102b4:	2001      	movs	r0, #1
 80102b6:	601a      	str	r2, [r3, #0]
 80102b8:	4240      	negs	r0, r0
 80102ba:	4770      	bx	lr
 80102bc:	2001      	movs	r0, #1
 80102be:	700a      	strb	r2, [r1, #0]
 80102c0:	e7fb      	b.n	80102ba <__ascii_wctomb+0x12>
	...

080102c4 <__ssputs_r>:
 80102c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80102c6:	688e      	ldr	r6, [r1, #8]
 80102c8:	b085      	sub	sp, #20
 80102ca:	001f      	movs	r7, r3
 80102cc:	000c      	movs	r4, r1
 80102ce:	680b      	ldr	r3, [r1, #0]
 80102d0:	9002      	str	r0, [sp, #8]
 80102d2:	9203      	str	r2, [sp, #12]
 80102d4:	42be      	cmp	r6, r7
 80102d6:	d830      	bhi.n	801033a <__ssputs_r+0x76>
 80102d8:	210c      	movs	r1, #12
 80102da:	5e62      	ldrsh	r2, [r4, r1]
 80102dc:	2190      	movs	r1, #144	@ 0x90
 80102de:	00c9      	lsls	r1, r1, #3
 80102e0:	420a      	tst	r2, r1
 80102e2:	d028      	beq.n	8010336 <__ssputs_r+0x72>
 80102e4:	2003      	movs	r0, #3
 80102e6:	6921      	ldr	r1, [r4, #16]
 80102e8:	1a5b      	subs	r3, r3, r1
 80102ea:	9301      	str	r3, [sp, #4]
 80102ec:	6963      	ldr	r3, [r4, #20]
 80102ee:	4343      	muls	r3, r0
 80102f0:	9801      	ldr	r0, [sp, #4]
 80102f2:	0fdd      	lsrs	r5, r3, #31
 80102f4:	18ed      	adds	r5, r5, r3
 80102f6:	1c7b      	adds	r3, r7, #1
 80102f8:	181b      	adds	r3, r3, r0
 80102fa:	106d      	asrs	r5, r5, #1
 80102fc:	42ab      	cmp	r3, r5
 80102fe:	d900      	bls.n	8010302 <__ssputs_r+0x3e>
 8010300:	001d      	movs	r5, r3
 8010302:	0552      	lsls	r2, r2, #21
 8010304:	d528      	bpl.n	8010358 <__ssputs_r+0x94>
 8010306:	0029      	movs	r1, r5
 8010308:	9802      	ldr	r0, [sp, #8]
 801030a:	f7ff fa69 	bl	800f7e0 <_malloc_r>
 801030e:	1e06      	subs	r6, r0, #0
 8010310:	d02c      	beq.n	801036c <__ssputs_r+0xa8>
 8010312:	9a01      	ldr	r2, [sp, #4]
 8010314:	6921      	ldr	r1, [r4, #16]
 8010316:	f7fe fe8e 	bl	800f036 <memcpy>
 801031a:	89a2      	ldrh	r2, [r4, #12]
 801031c:	4b18      	ldr	r3, [pc, #96]	@ (8010380 <__ssputs_r+0xbc>)
 801031e:	401a      	ands	r2, r3
 8010320:	2380      	movs	r3, #128	@ 0x80
 8010322:	4313      	orrs	r3, r2
 8010324:	81a3      	strh	r3, [r4, #12]
 8010326:	9b01      	ldr	r3, [sp, #4]
 8010328:	6126      	str	r6, [r4, #16]
 801032a:	18f6      	adds	r6, r6, r3
 801032c:	6026      	str	r6, [r4, #0]
 801032e:	003e      	movs	r6, r7
 8010330:	6165      	str	r5, [r4, #20]
 8010332:	1aed      	subs	r5, r5, r3
 8010334:	60a5      	str	r5, [r4, #8]
 8010336:	42be      	cmp	r6, r7
 8010338:	d900      	bls.n	801033c <__ssputs_r+0x78>
 801033a:	003e      	movs	r6, r7
 801033c:	0032      	movs	r2, r6
 801033e:	9903      	ldr	r1, [sp, #12]
 8010340:	6820      	ldr	r0, [r4, #0]
 8010342:	f000 fd2f 	bl	8010da4 <memmove>
 8010346:	2000      	movs	r0, #0
 8010348:	68a3      	ldr	r3, [r4, #8]
 801034a:	1b9b      	subs	r3, r3, r6
 801034c:	60a3      	str	r3, [r4, #8]
 801034e:	6823      	ldr	r3, [r4, #0]
 8010350:	199b      	adds	r3, r3, r6
 8010352:	6023      	str	r3, [r4, #0]
 8010354:	b005      	add	sp, #20
 8010356:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010358:	002a      	movs	r2, r5
 801035a:	9802      	ldr	r0, [sp, #8]
 801035c:	f000 fda8 	bl	8010eb0 <_realloc_r>
 8010360:	1e06      	subs	r6, r0, #0
 8010362:	d1e0      	bne.n	8010326 <__ssputs_r+0x62>
 8010364:	6921      	ldr	r1, [r4, #16]
 8010366:	9802      	ldr	r0, [sp, #8]
 8010368:	f7fe fe74 	bl	800f054 <_free_r>
 801036c:	230c      	movs	r3, #12
 801036e:	2001      	movs	r0, #1
 8010370:	9a02      	ldr	r2, [sp, #8]
 8010372:	4240      	negs	r0, r0
 8010374:	6013      	str	r3, [r2, #0]
 8010376:	89a2      	ldrh	r2, [r4, #12]
 8010378:	3334      	adds	r3, #52	@ 0x34
 801037a:	4313      	orrs	r3, r2
 801037c:	81a3      	strh	r3, [r4, #12]
 801037e:	e7e9      	b.n	8010354 <__ssputs_r+0x90>
 8010380:	fffffb7f 	.word	0xfffffb7f

08010384 <_svfiprintf_r>:
 8010384:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010386:	b0a1      	sub	sp, #132	@ 0x84
 8010388:	9003      	str	r0, [sp, #12]
 801038a:	001d      	movs	r5, r3
 801038c:	898b      	ldrh	r3, [r1, #12]
 801038e:	000f      	movs	r7, r1
 8010390:	0016      	movs	r6, r2
 8010392:	061b      	lsls	r3, r3, #24
 8010394:	d511      	bpl.n	80103ba <_svfiprintf_r+0x36>
 8010396:	690b      	ldr	r3, [r1, #16]
 8010398:	2b00      	cmp	r3, #0
 801039a:	d10e      	bne.n	80103ba <_svfiprintf_r+0x36>
 801039c:	2140      	movs	r1, #64	@ 0x40
 801039e:	f7ff fa1f 	bl	800f7e0 <_malloc_r>
 80103a2:	6038      	str	r0, [r7, #0]
 80103a4:	6138      	str	r0, [r7, #16]
 80103a6:	2800      	cmp	r0, #0
 80103a8:	d105      	bne.n	80103b6 <_svfiprintf_r+0x32>
 80103aa:	230c      	movs	r3, #12
 80103ac:	9a03      	ldr	r2, [sp, #12]
 80103ae:	6013      	str	r3, [r2, #0]
 80103b0:	2001      	movs	r0, #1
 80103b2:	4240      	negs	r0, r0
 80103b4:	e0cf      	b.n	8010556 <_svfiprintf_r+0x1d2>
 80103b6:	2340      	movs	r3, #64	@ 0x40
 80103b8:	617b      	str	r3, [r7, #20]
 80103ba:	2300      	movs	r3, #0
 80103bc:	ac08      	add	r4, sp, #32
 80103be:	6163      	str	r3, [r4, #20]
 80103c0:	3320      	adds	r3, #32
 80103c2:	7663      	strb	r3, [r4, #25]
 80103c4:	3310      	adds	r3, #16
 80103c6:	76a3      	strb	r3, [r4, #26]
 80103c8:	9507      	str	r5, [sp, #28]
 80103ca:	0035      	movs	r5, r6
 80103cc:	782b      	ldrb	r3, [r5, #0]
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d001      	beq.n	80103d6 <_svfiprintf_r+0x52>
 80103d2:	2b25      	cmp	r3, #37	@ 0x25
 80103d4:	d148      	bne.n	8010468 <_svfiprintf_r+0xe4>
 80103d6:	1bab      	subs	r3, r5, r6
 80103d8:	9305      	str	r3, [sp, #20]
 80103da:	42b5      	cmp	r5, r6
 80103dc:	d00b      	beq.n	80103f6 <_svfiprintf_r+0x72>
 80103de:	0032      	movs	r2, r6
 80103e0:	0039      	movs	r1, r7
 80103e2:	9803      	ldr	r0, [sp, #12]
 80103e4:	f7ff ff6e 	bl	80102c4 <__ssputs_r>
 80103e8:	3001      	adds	r0, #1
 80103ea:	d100      	bne.n	80103ee <_svfiprintf_r+0x6a>
 80103ec:	e0ae      	b.n	801054c <_svfiprintf_r+0x1c8>
 80103ee:	6963      	ldr	r3, [r4, #20]
 80103f0:	9a05      	ldr	r2, [sp, #20]
 80103f2:	189b      	adds	r3, r3, r2
 80103f4:	6163      	str	r3, [r4, #20]
 80103f6:	782b      	ldrb	r3, [r5, #0]
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	d100      	bne.n	80103fe <_svfiprintf_r+0x7a>
 80103fc:	e0a6      	b.n	801054c <_svfiprintf_r+0x1c8>
 80103fe:	2201      	movs	r2, #1
 8010400:	2300      	movs	r3, #0
 8010402:	4252      	negs	r2, r2
 8010404:	6062      	str	r2, [r4, #4]
 8010406:	a904      	add	r1, sp, #16
 8010408:	3254      	adds	r2, #84	@ 0x54
 801040a:	1852      	adds	r2, r2, r1
 801040c:	1c6e      	adds	r6, r5, #1
 801040e:	6023      	str	r3, [r4, #0]
 8010410:	60e3      	str	r3, [r4, #12]
 8010412:	60a3      	str	r3, [r4, #8]
 8010414:	7013      	strb	r3, [r2, #0]
 8010416:	65a3      	str	r3, [r4, #88]	@ 0x58
 8010418:	4b54      	ldr	r3, [pc, #336]	@ (801056c <_svfiprintf_r+0x1e8>)
 801041a:	2205      	movs	r2, #5
 801041c:	0018      	movs	r0, r3
 801041e:	7831      	ldrb	r1, [r6, #0]
 8010420:	9305      	str	r3, [sp, #20]
 8010422:	f000 fce3 	bl	8010dec <memchr>
 8010426:	1c75      	adds	r5, r6, #1
 8010428:	2800      	cmp	r0, #0
 801042a:	d11f      	bne.n	801046c <_svfiprintf_r+0xe8>
 801042c:	6822      	ldr	r2, [r4, #0]
 801042e:	06d3      	lsls	r3, r2, #27
 8010430:	d504      	bpl.n	801043c <_svfiprintf_r+0xb8>
 8010432:	2353      	movs	r3, #83	@ 0x53
 8010434:	a904      	add	r1, sp, #16
 8010436:	185b      	adds	r3, r3, r1
 8010438:	2120      	movs	r1, #32
 801043a:	7019      	strb	r1, [r3, #0]
 801043c:	0713      	lsls	r3, r2, #28
 801043e:	d504      	bpl.n	801044a <_svfiprintf_r+0xc6>
 8010440:	2353      	movs	r3, #83	@ 0x53
 8010442:	a904      	add	r1, sp, #16
 8010444:	185b      	adds	r3, r3, r1
 8010446:	212b      	movs	r1, #43	@ 0x2b
 8010448:	7019      	strb	r1, [r3, #0]
 801044a:	7833      	ldrb	r3, [r6, #0]
 801044c:	2b2a      	cmp	r3, #42	@ 0x2a
 801044e:	d016      	beq.n	801047e <_svfiprintf_r+0xfa>
 8010450:	0035      	movs	r5, r6
 8010452:	2100      	movs	r1, #0
 8010454:	200a      	movs	r0, #10
 8010456:	68e3      	ldr	r3, [r4, #12]
 8010458:	782a      	ldrb	r2, [r5, #0]
 801045a:	1c6e      	adds	r6, r5, #1
 801045c:	3a30      	subs	r2, #48	@ 0x30
 801045e:	2a09      	cmp	r2, #9
 8010460:	d950      	bls.n	8010504 <_svfiprintf_r+0x180>
 8010462:	2900      	cmp	r1, #0
 8010464:	d111      	bne.n	801048a <_svfiprintf_r+0x106>
 8010466:	e017      	b.n	8010498 <_svfiprintf_r+0x114>
 8010468:	3501      	adds	r5, #1
 801046a:	e7af      	b.n	80103cc <_svfiprintf_r+0x48>
 801046c:	9b05      	ldr	r3, [sp, #20]
 801046e:	6822      	ldr	r2, [r4, #0]
 8010470:	1ac0      	subs	r0, r0, r3
 8010472:	2301      	movs	r3, #1
 8010474:	4083      	lsls	r3, r0
 8010476:	4313      	orrs	r3, r2
 8010478:	002e      	movs	r6, r5
 801047a:	6023      	str	r3, [r4, #0]
 801047c:	e7cc      	b.n	8010418 <_svfiprintf_r+0x94>
 801047e:	9b07      	ldr	r3, [sp, #28]
 8010480:	1d19      	adds	r1, r3, #4
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	9107      	str	r1, [sp, #28]
 8010486:	2b00      	cmp	r3, #0
 8010488:	db01      	blt.n	801048e <_svfiprintf_r+0x10a>
 801048a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801048c:	e004      	b.n	8010498 <_svfiprintf_r+0x114>
 801048e:	425b      	negs	r3, r3
 8010490:	60e3      	str	r3, [r4, #12]
 8010492:	2302      	movs	r3, #2
 8010494:	4313      	orrs	r3, r2
 8010496:	6023      	str	r3, [r4, #0]
 8010498:	782b      	ldrb	r3, [r5, #0]
 801049a:	2b2e      	cmp	r3, #46	@ 0x2e
 801049c:	d10c      	bne.n	80104b8 <_svfiprintf_r+0x134>
 801049e:	786b      	ldrb	r3, [r5, #1]
 80104a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80104a2:	d134      	bne.n	801050e <_svfiprintf_r+0x18a>
 80104a4:	9b07      	ldr	r3, [sp, #28]
 80104a6:	3502      	adds	r5, #2
 80104a8:	1d1a      	adds	r2, r3, #4
 80104aa:	681b      	ldr	r3, [r3, #0]
 80104ac:	9207      	str	r2, [sp, #28]
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	da01      	bge.n	80104b6 <_svfiprintf_r+0x132>
 80104b2:	2301      	movs	r3, #1
 80104b4:	425b      	negs	r3, r3
 80104b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80104b8:	4e2d      	ldr	r6, [pc, #180]	@ (8010570 <_svfiprintf_r+0x1ec>)
 80104ba:	2203      	movs	r2, #3
 80104bc:	0030      	movs	r0, r6
 80104be:	7829      	ldrb	r1, [r5, #0]
 80104c0:	f000 fc94 	bl	8010dec <memchr>
 80104c4:	2800      	cmp	r0, #0
 80104c6:	d006      	beq.n	80104d6 <_svfiprintf_r+0x152>
 80104c8:	2340      	movs	r3, #64	@ 0x40
 80104ca:	1b80      	subs	r0, r0, r6
 80104cc:	4083      	lsls	r3, r0
 80104ce:	6822      	ldr	r2, [r4, #0]
 80104d0:	3501      	adds	r5, #1
 80104d2:	4313      	orrs	r3, r2
 80104d4:	6023      	str	r3, [r4, #0]
 80104d6:	7829      	ldrb	r1, [r5, #0]
 80104d8:	2206      	movs	r2, #6
 80104da:	4826      	ldr	r0, [pc, #152]	@ (8010574 <_svfiprintf_r+0x1f0>)
 80104dc:	1c6e      	adds	r6, r5, #1
 80104de:	7621      	strb	r1, [r4, #24]
 80104e0:	f000 fc84 	bl	8010dec <memchr>
 80104e4:	2800      	cmp	r0, #0
 80104e6:	d038      	beq.n	801055a <_svfiprintf_r+0x1d6>
 80104e8:	4b23      	ldr	r3, [pc, #140]	@ (8010578 <_svfiprintf_r+0x1f4>)
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d122      	bne.n	8010534 <_svfiprintf_r+0x1b0>
 80104ee:	2207      	movs	r2, #7
 80104f0:	9b07      	ldr	r3, [sp, #28]
 80104f2:	3307      	adds	r3, #7
 80104f4:	4393      	bics	r3, r2
 80104f6:	3308      	adds	r3, #8
 80104f8:	9307      	str	r3, [sp, #28]
 80104fa:	6963      	ldr	r3, [r4, #20]
 80104fc:	9a04      	ldr	r2, [sp, #16]
 80104fe:	189b      	adds	r3, r3, r2
 8010500:	6163      	str	r3, [r4, #20]
 8010502:	e762      	b.n	80103ca <_svfiprintf_r+0x46>
 8010504:	4343      	muls	r3, r0
 8010506:	0035      	movs	r5, r6
 8010508:	2101      	movs	r1, #1
 801050a:	189b      	adds	r3, r3, r2
 801050c:	e7a4      	b.n	8010458 <_svfiprintf_r+0xd4>
 801050e:	2300      	movs	r3, #0
 8010510:	200a      	movs	r0, #10
 8010512:	0019      	movs	r1, r3
 8010514:	3501      	adds	r5, #1
 8010516:	6063      	str	r3, [r4, #4]
 8010518:	782a      	ldrb	r2, [r5, #0]
 801051a:	1c6e      	adds	r6, r5, #1
 801051c:	3a30      	subs	r2, #48	@ 0x30
 801051e:	2a09      	cmp	r2, #9
 8010520:	d903      	bls.n	801052a <_svfiprintf_r+0x1a6>
 8010522:	2b00      	cmp	r3, #0
 8010524:	d0c8      	beq.n	80104b8 <_svfiprintf_r+0x134>
 8010526:	9109      	str	r1, [sp, #36]	@ 0x24
 8010528:	e7c6      	b.n	80104b8 <_svfiprintf_r+0x134>
 801052a:	4341      	muls	r1, r0
 801052c:	0035      	movs	r5, r6
 801052e:	2301      	movs	r3, #1
 8010530:	1889      	adds	r1, r1, r2
 8010532:	e7f1      	b.n	8010518 <_svfiprintf_r+0x194>
 8010534:	aa07      	add	r2, sp, #28
 8010536:	9200      	str	r2, [sp, #0]
 8010538:	0021      	movs	r1, r4
 801053a:	003a      	movs	r2, r7
 801053c:	4b0f      	ldr	r3, [pc, #60]	@ (801057c <_svfiprintf_r+0x1f8>)
 801053e:	9803      	ldr	r0, [sp, #12]
 8010540:	e000      	b.n	8010544 <_svfiprintf_r+0x1c0>
 8010542:	bf00      	nop
 8010544:	9004      	str	r0, [sp, #16]
 8010546:	9b04      	ldr	r3, [sp, #16]
 8010548:	3301      	adds	r3, #1
 801054a:	d1d6      	bne.n	80104fa <_svfiprintf_r+0x176>
 801054c:	89bb      	ldrh	r3, [r7, #12]
 801054e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8010550:	065b      	lsls	r3, r3, #25
 8010552:	d500      	bpl.n	8010556 <_svfiprintf_r+0x1d2>
 8010554:	e72c      	b.n	80103b0 <_svfiprintf_r+0x2c>
 8010556:	b021      	add	sp, #132	@ 0x84
 8010558:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801055a:	aa07      	add	r2, sp, #28
 801055c:	9200      	str	r2, [sp, #0]
 801055e:	0021      	movs	r1, r4
 8010560:	003a      	movs	r2, r7
 8010562:	4b06      	ldr	r3, [pc, #24]	@ (801057c <_svfiprintf_r+0x1f8>)
 8010564:	9803      	ldr	r0, [sp, #12]
 8010566:	f000 f9bf 	bl	80108e8 <_printf_i>
 801056a:	e7eb      	b.n	8010544 <_svfiprintf_r+0x1c0>
 801056c:	0801c30b 	.word	0x0801c30b
 8010570:	0801c311 	.word	0x0801c311
 8010574:	0801c315 	.word	0x0801c315
 8010578:	00000000 	.word	0x00000000
 801057c:	080102c5 	.word	0x080102c5

08010580 <__sfputc_r>:
 8010580:	6893      	ldr	r3, [r2, #8]
 8010582:	b510      	push	{r4, lr}
 8010584:	3b01      	subs	r3, #1
 8010586:	6093      	str	r3, [r2, #8]
 8010588:	2b00      	cmp	r3, #0
 801058a:	da04      	bge.n	8010596 <__sfputc_r+0x16>
 801058c:	6994      	ldr	r4, [r2, #24]
 801058e:	42a3      	cmp	r3, r4
 8010590:	db07      	blt.n	80105a2 <__sfputc_r+0x22>
 8010592:	290a      	cmp	r1, #10
 8010594:	d005      	beq.n	80105a2 <__sfputc_r+0x22>
 8010596:	6813      	ldr	r3, [r2, #0]
 8010598:	1c58      	adds	r0, r3, #1
 801059a:	6010      	str	r0, [r2, #0]
 801059c:	7019      	strb	r1, [r3, #0]
 801059e:	0008      	movs	r0, r1
 80105a0:	bd10      	pop	{r4, pc}
 80105a2:	f000 fb5e 	bl	8010c62 <__swbuf_r>
 80105a6:	0001      	movs	r1, r0
 80105a8:	e7f9      	b.n	801059e <__sfputc_r+0x1e>

080105aa <__sfputs_r>:
 80105aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105ac:	0006      	movs	r6, r0
 80105ae:	000f      	movs	r7, r1
 80105b0:	0014      	movs	r4, r2
 80105b2:	18d5      	adds	r5, r2, r3
 80105b4:	42ac      	cmp	r4, r5
 80105b6:	d101      	bne.n	80105bc <__sfputs_r+0x12>
 80105b8:	2000      	movs	r0, #0
 80105ba:	e007      	b.n	80105cc <__sfputs_r+0x22>
 80105bc:	7821      	ldrb	r1, [r4, #0]
 80105be:	003a      	movs	r2, r7
 80105c0:	0030      	movs	r0, r6
 80105c2:	f7ff ffdd 	bl	8010580 <__sfputc_r>
 80105c6:	3401      	adds	r4, #1
 80105c8:	1c43      	adds	r3, r0, #1
 80105ca:	d1f3      	bne.n	80105b4 <__sfputs_r+0xa>
 80105cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080105d0 <_vfiprintf_r>:
 80105d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80105d2:	b0a1      	sub	sp, #132	@ 0x84
 80105d4:	000f      	movs	r7, r1
 80105d6:	0015      	movs	r5, r2
 80105d8:	001e      	movs	r6, r3
 80105da:	9003      	str	r0, [sp, #12]
 80105dc:	2800      	cmp	r0, #0
 80105de:	d004      	beq.n	80105ea <_vfiprintf_r+0x1a>
 80105e0:	6a03      	ldr	r3, [r0, #32]
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d101      	bne.n	80105ea <_vfiprintf_r+0x1a>
 80105e6:	f7fe fbef 	bl	800edc8 <__sinit>
 80105ea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80105ec:	07db      	lsls	r3, r3, #31
 80105ee:	d405      	bmi.n	80105fc <_vfiprintf_r+0x2c>
 80105f0:	89bb      	ldrh	r3, [r7, #12]
 80105f2:	059b      	lsls	r3, r3, #22
 80105f4:	d402      	bmi.n	80105fc <_vfiprintf_r+0x2c>
 80105f6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80105f8:	f7fe fd1b 	bl	800f032 <__retarget_lock_acquire_recursive>
 80105fc:	89bb      	ldrh	r3, [r7, #12]
 80105fe:	071b      	lsls	r3, r3, #28
 8010600:	d502      	bpl.n	8010608 <_vfiprintf_r+0x38>
 8010602:	693b      	ldr	r3, [r7, #16]
 8010604:	2b00      	cmp	r3, #0
 8010606:	d113      	bne.n	8010630 <_vfiprintf_r+0x60>
 8010608:	0039      	movs	r1, r7
 801060a:	9803      	ldr	r0, [sp, #12]
 801060c:	f000 fb6c 	bl	8010ce8 <__swsetup_r>
 8010610:	2800      	cmp	r0, #0
 8010612:	d00d      	beq.n	8010630 <_vfiprintf_r+0x60>
 8010614:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010616:	07db      	lsls	r3, r3, #31
 8010618:	d503      	bpl.n	8010622 <_vfiprintf_r+0x52>
 801061a:	2001      	movs	r0, #1
 801061c:	4240      	negs	r0, r0
 801061e:	b021      	add	sp, #132	@ 0x84
 8010620:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010622:	89bb      	ldrh	r3, [r7, #12]
 8010624:	059b      	lsls	r3, r3, #22
 8010626:	d4f8      	bmi.n	801061a <_vfiprintf_r+0x4a>
 8010628:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801062a:	f7fe fd03 	bl	800f034 <__retarget_lock_release_recursive>
 801062e:	e7f4      	b.n	801061a <_vfiprintf_r+0x4a>
 8010630:	2300      	movs	r3, #0
 8010632:	ac08      	add	r4, sp, #32
 8010634:	6163      	str	r3, [r4, #20]
 8010636:	3320      	adds	r3, #32
 8010638:	7663      	strb	r3, [r4, #25]
 801063a:	3310      	adds	r3, #16
 801063c:	76a3      	strb	r3, [r4, #26]
 801063e:	9607      	str	r6, [sp, #28]
 8010640:	002e      	movs	r6, r5
 8010642:	7833      	ldrb	r3, [r6, #0]
 8010644:	2b00      	cmp	r3, #0
 8010646:	d001      	beq.n	801064c <_vfiprintf_r+0x7c>
 8010648:	2b25      	cmp	r3, #37	@ 0x25
 801064a:	d148      	bne.n	80106de <_vfiprintf_r+0x10e>
 801064c:	1b73      	subs	r3, r6, r5
 801064e:	9305      	str	r3, [sp, #20]
 8010650:	42ae      	cmp	r6, r5
 8010652:	d00b      	beq.n	801066c <_vfiprintf_r+0x9c>
 8010654:	002a      	movs	r2, r5
 8010656:	0039      	movs	r1, r7
 8010658:	9803      	ldr	r0, [sp, #12]
 801065a:	f7ff ffa6 	bl	80105aa <__sfputs_r>
 801065e:	3001      	adds	r0, #1
 8010660:	d100      	bne.n	8010664 <_vfiprintf_r+0x94>
 8010662:	e0ae      	b.n	80107c2 <_vfiprintf_r+0x1f2>
 8010664:	6963      	ldr	r3, [r4, #20]
 8010666:	9a05      	ldr	r2, [sp, #20]
 8010668:	189b      	adds	r3, r3, r2
 801066a:	6163      	str	r3, [r4, #20]
 801066c:	7833      	ldrb	r3, [r6, #0]
 801066e:	2b00      	cmp	r3, #0
 8010670:	d100      	bne.n	8010674 <_vfiprintf_r+0xa4>
 8010672:	e0a6      	b.n	80107c2 <_vfiprintf_r+0x1f2>
 8010674:	2201      	movs	r2, #1
 8010676:	2300      	movs	r3, #0
 8010678:	4252      	negs	r2, r2
 801067a:	6062      	str	r2, [r4, #4]
 801067c:	a904      	add	r1, sp, #16
 801067e:	3254      	adds	r2, #84	@ 0x54
 8010680:	1852      	adds	r2, r2, r1
 8010682:	1c75      	adds	r5, r6, #1
 8010684:	6023      	str	r3, [r4, #0]
 8010686:	60e3      	str	r3, [r4, #12]
 8010688:	60a3      	str	r3, [r4, #8]
 801068a:	7013      	strb	r3, [r2, #0]
 801068c:	65a3      	str	r3, [r4, #88]	@ 0x58
 801068e:	4b59      	ldr	r3, [pc, #356]	@ (80107f4 <_vfiprintf_r+0x224>)
 8010690:	2205      	movs	r2, #5
 8010692:	0018      	movs	r0, r3
 8010694:	7829      	ldrb	r1, [r5, #0]
 8010696:	9305      	str	r3, [sp, #20]
 8010698:	f000 fba8 	bl	8010dec <memchr>
 801069c:	1c6e      	adds	r6, r5, #1
 801069e:	2800      	cmp	r0, #0
 80106a0:	d11f      	bne.n	80106e2 <_vfiprintf_r+0x112>
 80106a2:	6822      	ldr	r2, [r4, #0]
 80106a4:	06d3      	lsls	r3, r2, #27
 80106a6:	d504      	bpl.n	80106b2 <_vfiprintf_r+0xe2>
 80106a8:	2353      	movs	r3, #83	@ 0x53
 80106aa:	a904      	add	r1, sp, #16
 80106ac:	185b      	adds	r3, r3, r1
 80106ae:	2120      	movs	r1, #32
 80106b0:	7019      	strb	r1, [r3, #0]
 80106b2:	0713      	lsls	r3, r2, #28
 80106b4:	d504      	bpl.n	80106c0 <_vfiprintf_r+0xf0>
 80106b6:	2353      	movs	r3, #83	@ 0x53
 80106b8:	a904      	add	r1, sp, #16
 80106ba:	185b      	adds	r3, r3, r1
 80106bc:	212b      	movs	r1, #43	@ 0x2b
 80106be:	7019      	strb	r1, [r3, #0]
 80106c0:	782b      	ldrb	r3, [r5, #0]
 80106c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80106c4:	d016      	beq.n	80106f4 <_vfiprintf_r+0x124>
 80106c6:	002e      	movs	r6, r5
 80106c8:	2100      	movs	r1, #0
 80106ca:	200a      	movs	r0, #10
 80106cc:	68e3      	ldr	r3, [r4, #12]
 80106ce:	7832      	ldrb	r2, [r6, #0]
 80106d0:	1c75      	adds	r5, r6, #1
 80106d2:	3a30      	subs	r2, #48	@ 0x30
 80106d4:	2a09      	cmp	r2, #9
 80106d6:	d950      	bls.n	801077a <_vfiprintf_r+0x1aa>
 80106d8:	2900      	cmp	r1, #0
 80106da:	d111      	bne.n	8010700 <_vfiprintf_r+0x130>
 80106dc:	e017      	b.n	801070e <_vfiprintf_r+0x13e>
 80106de:	3601      	adds	r6, #1
 80106e0:	e7af      	b.n	8010642 <_vfiprintf_r+0x72>
 80106e2:	9b05      	ldr	r3, [sp, #20]
 80106e4:	6822      	ldr	r2, [r4, #0]
 80106e6:	1ac0      	subs	r0, r0, r3
 80106e8:	2301      	movs	r3, #1
 80106ea:	4083      	lsls	r3, r0
 80106ec:	4313      	orrs	r3, r2
 80106ee:	0035      	movs	r5, r6
 80106f0:	6023      	str	r3, [r4, #0]
 80106f2:	e7cc      	b.n	801068e <_vfiprintf_r+0xbe>
 80106f4:	9b07      	ldr	r3, [sp, #28]
 80106f6:	1d19      	adds	r1, r3, #4
 80106f8:	681b      	ldr	r3, [r3, #0]
 80106fa:	9107      	str	r1, [sp, #28]
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	db01      	blt.n	8010704 <_vfiprintf_r+0x134>
 8010700:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010702:	e004      	b.n	801070e <_vfiprintf_r+0x13e>
 8010704:	425b      	negs	r3, r3
 8010706:	60e3      	str	r3, [r4, #12]
 8010708:	2302      	movs	r3, #2
 801070a:	4313      	orrs	r3, r2
 801070c:	6023      	str	r3, [r4, #0]
 801070e:	7833      	ldrb	r3, [r6, #0]
 8010710:	2b2e      	cmp	r3, #46	@ 0x2e
 8010712:	d10c      	bne.n	801072e <_vfiprintf_r+0x15e>
 8010714:	7873      	ldrb	r3, [r6, #1]
 8010716:	2b2a      	cmp	r3, #42	@ 0x2a
 8010718:	d134      	bne.n	8010784 <_vfiprintf_r+0x1b4>
 801071a:	9b07      	ldr	r3, [sp, #28]
 801071c:	3602      	adds	r6, #2
 801071e:	1d1a      	adds	r2, r3, #4
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	9207      	str	r2, [sp, #28]
 8010724:	2b00      	cmp	r3, #0
 8010726:	da01      	bge.n	801072c <_vfiprintf_r+0x15c>
 8010728:	2301      	movs	r3, #1
 801072a:	425b      	negs	r3, r3
 801072c:	9309      	str	r3, [sp, #36]	@ 0x24
 801072e:	4d32      	ldr	r5, [pc, #200]	@ (80107f8 <_vfiprintf_r+0x228>)
 8010730:	2203      	movs	r2, #3
 8010732:	0028      	movs	r0, r5
 8010734:	7831      	ldrb	r1, [r6, #0]
 8010736:	f000 fb59 	bl	8010dec <memchr>
 801073a:	2800      	cmp	r0, #0
 801073c:	d006      	beq.n	801074c <_vfiprintf_r+0x17c>
 801073e:	2340      	movs	r3, #64	@ 0x40
 8010740:	1b40      	subs	r0, r0, r5
 8010742:	4083      	lsls	r3, r0
 8010744:	6822      	ldr	r2, [r4, #0]
 8010746:	3601      	adds	r6, #1
 8010748:	4313      	orrs	r3, r2
 801074a:	6023      	str	r3, [r4, #0]
 801074c:	7831      	ldrb	r1, [r6, #0]
 801074e:	2206      	movs	r2, #6
 8010750:	482a      	ldr	r0, [pc, #168]	@ (80107fc <_vfiprintf_r+0x22c>)
 8010752:	1c75      	adds	r5, r6, #1
 8010754:	7621      	strb	r1, [r4, #24]
 8010756:	f000 fb49 	bl	8010dec <memchr>
 801075a:	2800      	cmp	r0, #0
 801075c:	d040      	beq.n	80107e0 <_vfiprintf_r+0x210>
 801075e:	4b28      	ldr	r3, [pc, #160]	@ (8010800 <_vfiprintf_r+0x230>)
 8010760:	2b00      	cmp	r3, #0
 8010762:	d122      	bne.n	80107aa <_vfiprintf_r+0x1da>
 8010764:	2207      	movs	r2, #7
 8010766:	9b07      	ldr	r3, [sp, #28]
 8010768:	3307      	adds	r3, #7
 801076a:	4393      	bics	r3, r2
 801076c:	3308      	adds	r3, #8
 801076e:	9307      	str	r3, [sp, #28]
 8010770:	6963      	ldr	r3, [r4, #20]
 8010772:	9a04      	ldr	r2, [sp, #16]
 8010774:	189b      	adds	r3, r3, r2
 8010776:	6163      	str	r3, [r4, #20]
 8010778:	e762      	b.n	8010640 <_vfiprintf_r+0x70>
 801077a:	4343      	muls	r3, r0
 801077c:	002e      	movs	r6, r5
 801077e:	2101      	movs	r1, #1
 8010780:	189b      	adds	r3, r3, r2
 8010782:	e7a4      	b.n	80106ce <_vfiprintf_r+0xfe>
 8010784:	2300      	movs	r3, #0
 8010786:	200a      	movs	r0, #10
 8010788:	0019      	movs	r1, r3
 801078a:	3601      	adds	r6, #1
 801078c:	6063      	str	r3, [r4, #4]
 801078e:	7832      	ldrb	r2, [r6, #0]
 8010790:	1c75      	adds	r5, r6, #1
 8010792:	3a30      	subs	r2, #48	@ 0x30
 8010794:	2a09      	cmp	r2, #9
 8010796:	d903      	bls.n	80107a0 <_vfiprintf_r+0x1d0>
 8010798:	2b00      	cmp	r3, #0
 801079a:	d0c8      	beq.n	801072e <_vfiprintf_r+0x15e>
 801079c:	9109      	str	r1, [sp, #36]	@ 0x24
 801079e:	e7c6      	b.n	801072e <_vfiprintf_r+0x15e>
 80107a0:	4341      	muls	r1, r0
 80107a2:	002e      	movs	r6, r5
 80107a4:	2301      	movs	r3, #1
 80107a6:	1889      	adds	r1, r1, r2
 80107a8:	e7f1      	b.n	801078e <_vfiprintf_r+0x1be>
 80107aa:	aa07      	add	r2, sp, #28
 80107ac:	9200      	str	r2, [sp, #0]
 80107ae:	0021      	movs	r1, r4
 80107b0:	003a      	movs	r2, r7
 80107b2:	4b14      	ldr	r3, [pc, #80]	@ (8010804 <_vfiprintf_r+0x234>)
 80107b4:	9803      	ldr	r0, [sp, #12]
 80107b6:	e000      	b.n	80107ba <_vfiprintf_r+0x1ea>
 80107b8:	bf00      	nop
 80107ba:	9004      	str	r0, [sp, #16]
 80107bc:	9b04      	ldr	r3, [sp, #16]
 80107be:	3301      	adds	r3, #1
 80107c0:	d1d6      	bne.n	8010770 <_vfiprintf_r+0x1a0>
 80107c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80107c4:	07db      	lsls	r3, r3, #31
 80107c6:	d405      	bmi.n	80107d4 <_vfiprintf_r+0x204>
 80107c8:	89bb      	ldrh	r3, [r7, #12]
 80107ca:	059b      	lsls	r3, r3, #22
 80107cc:	d402      	bmi.n	80107d4 <_vfiprintf_r+0x204>
 80107ce:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80107d0:	f7fe fc30 	bl	800f034 <__retarget_lock_release_recursive>
 80107d4:	89bb      	ldrh	r3, [r7, #12]
 80107d6:	065b      	lsls	r3, r3, #25
 80107d8:	d500      	bpl.n	80107dc <_vfiprintf_r+0x20c>
 80107da:	e71e      	b.n	801061a <_vfiprintf_r+0x4a>
 80107dc:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80107de:	e71e      	b.n	801061e <_vfiprintf_r+0x4e>
 80107e0:	aa07      	add	r2, sp, #28
 80107e2:	9200      	str	r2, [sp, #0]
 80107e4:	0021      	movs	r1, r4
 80107e6:	003a      	movs	r2, r7
 80107e8:	4b06      	ldr	r3, [pc, #24]	@ (8010804 <_vfiprintf_r+0x234>)
 80107ea:	9803      	ldr	r0, [sp, #12]
 80107ec:	f000 f87c 	bl	80108e8 <_printf_i>
 80107f0:	e7e3      	b.n	80107ba <_vfiprintf_r+0x1ea>
 80107f2:	46c0      	nop			@ (mov r8, r8)
 80107f4:	0801c30b 	.word	0x0801c30b
 80107f8:	0801c311 	.word	0x0801c311
 80107fc:	0801c315 	.word	0x0801c315
 8010800:	00000000 	.word	0x00000000
 8010804:	080105ab 	.word	0x080105ab

08010808 <_printf_common>:
 8010808:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801080a:	0016      	movs	r6, r2
 801080c:	9301      	str	r3, [sp, #4]
 801080e:	688a      	ldr	r2, [r1, #8]
 8010810:	690b      	ldr	r3, [r1, #16]
 8010812:	000c      	movs	r4, r1
 8010814:	9000      	str	r0, [sp, #0]
 8010816:	4293      	cmp	r3, r2
 8010818:	da00      	bge.n	801081c <_printf_common+0x14>
 801081a:	0013      	movs	r3, r2
 801081c:	0022      	movs	r2, r4
 801081e:	6033      	str	r3, [r6, #0]
 8010820:	3243      	adds	r2, #67	@ 0x43
 8010822:	7812      	ldrb	r2, [r2, #0]
 8010824:	2a00      	cmp	r2, #0
 8010826:	d001      	beq.n	801082c <_printf_common+0x24>
 8010828:	3301      	adds	r3, #1
 801082a:	6033      	str	r3, [r6, #0]
 801082c:	6823      	ldr	r3, [r4, #0]
 801082e:	069b      	lsls	r3, r3, #26
 8010830:	d502      	bpl.n	8010838 <_printf_common+0x30>
 8010832:	6833      	ldr	r3, [r6, #0]
 8010834:	3302      	adds	r3, #2
 8010836:	6033      	str	r3, [r6, #0]
 8010838:	6822      	ldr	r2, [r4, #0]
 801083a:	2306      	movs	r3, #6
 801083c:	0015      	movs	r5, r2
 801083e:	401d      	ands	r5, r3
 8010840:	421a      	tst	r2, r3
 8010842:	d027      	beq.n	8010894 <_printf_common+0x8c>
 8010844:	0023      	movs	r3, r4
 8010846:	3343      	adds	r3, #67	@ 0x43
 8010848:	781b      	ldrb	r3, [r3, #0]
 801084a:	1e5a      	subs	r2, r3, #1
 801084c:	4193      	sbcs	r3, r2
 801084e:	6822      	ldr	r2, [r4, #0]
 8010850:	0692      	lsls	r2, r2, #26
 8010852:	d430      	bmi.n	80108b6 <_printf_common+0xae>
 8010854:	0022      	movs	r2, r4
 8010856:	9901      	ldr	r1, [sp, #4]
 8010858:	9800      	ldr	r0, [sp, #0]
 801085a:	9d08      	ldr	r5, [sp, #32]
 801085c:	3243      	adds	r2, #67	@ 0x43
 801085e:	47a8      	blx	r5
 8010860:	3001      	adds	r0, #1
 8010862:	d025      	beq.n	80108b0 <_printf_common+0xa8>
 8010864:	2206      	movs	r2, #6
 8010866:	6823      	ldr	r3, [r4, #0]
 8010868:	2500      	movs	r5, #0
 801086a:	4013      	ands	r3, r2
 801086c:	2b04      	cmp	r3, #4
 801086e:	d105      	bne.n	801087c <_printf_common+0x74>
 8010870:	6833      	ldr	r3, [r6, #0]
 8010872:	68e5      	ldr	r5, [r4, #12]
 8010874:	1aed      	subs	r5, r5, r3
 8010876:	43eb      	mvns	r3, r5
 8010878:	17db      	asrs	r3, r3, #31
 801087a:	401d      	ands	r5, r3
 801087c:	68a3      	ldr	r3, [r4, #8]
 801087e:	6922      	ldr	r2, [r4, #16]
 8010880:	4293      	cmp	r3, r2
 8010882:	dd01      	ble.n	8010888 <_printf_common+0x80>
 8010884:	1a9b      	subs	r3, r3, r2
 8010886:	18ed      	adds	r5, r5, r3
 8010888:	2600      	movs	r6, #0
 801088a:	42b5      	cmp	r5, r6
 801088c:	d120      	bne.n	80108d0 <_printf_common+0xc8>
 801088e:	2000      	movs	r0, #0
 8010890:	e010      	b.n	80108b4 <_printf_common+0xac>
 8010892:	3501      	adds	r5, #1
 8010894:	68e3      	ldr	r3, [r4, #12]
 8010896:	6832      	ldr	r2, [r6, #0]
 8010898:	1a9b      	subs	r3, r3, r2
 801089a:	42ab      	cmp	r3, r5
 801089c:	ddd2      	ble.n	8010844 <_printf_common+0x3c>
 801089e:	0022      	movs	r2, r4
 80108a0:	2301      	movs	r3, #1
 80108a2:	9901      	ldr	r1, [sp, #4]
 80108a4:	9800      	ldr	r0, [sp, #0]
 80108a6:	9f08      	ldr	r7, [sp, #32]
 80108a8:	3219      	adds	r2, #25
 80108aa:	47b8      	blx	r7
 80108ac:	3001      	adds	r0, #1
 80108ae:	d1f0      	bne.n	8010892 <_printf_common+0x8a>
 80108b0:	2001      	movs	r0, #1
 80108b2:	4240      	negs	r0, r0
 80108b4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80108b6:	2030      	movs	r0, #48	@ 0x30
 80108b8:	18e1      	adds	r1, r4, r3
 80108ba:	3143      	adds	r1, #67	@ 0x43
 80108bc:	7008      	strb	r0, [r1, #0]
 80108be:	0021      	movs	r1, r4
 80108c0:	1c5a      	adds	r2, r3, #1
 80108c2:	3145      	adds	r1, #69	@ 0x45
 80108c4:	7809      	ldrb	r1, [r1, #0]
 80108c6:	18a2      	adds	r2, r4, r2
 80108c8:	3243      	adds	r2, #67	@ 0x43
 80108ca:	3302      	adds	r3, #2
 80108cc:	7011      	strb	r1, [r2, #0]
 80108ce:	e7c1      	b.n	8010854 <_printf_common+0x4c>
 80108d0:	0022      	movs	r2, r4
 80108d2:	2301      	movs	r3, #1
 80108d4:	9901      	ldr	r1, [sp, #4]
 80108d6:	9800      	ldr	r0, [sp, #0]
 80108d8:	9f08      	ldr	r7, [sp, #32]
 80108da:	321a      	adds	r2, #26
 80108dc:	47b8      	blx	r7
 80108de:	3001      	adds	r0, #1
 80108e0:	d0e6      	beq.n	80108b0 <_printf_common+0xa8>
 80108e2:	3601      	adds	r6, #1
 80108e4:	e7d1      	b.n	801088a <_printf_common+0x82>
	...

080108e8 <_printf_i>:
 80108e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80108ea:	b08b      	sub	sp, #44	@ 0x2c
 80108ec:	9206      	str	r2, [sp, #24]
 80108ee:	000a      	movs	r2, r1
 80108f0:	3243      	adds	r2, #67	@ 0x43
 80108f2:	9307      	str	r3, [sp, #28]
 80108f4:	9005      	str	r0, [sp, #20]
 80108f6:	9203      	str	r2, [sp, #12]
 80108f8:	7e0a      	ldrb	r2, [r1, #24]
 80108fa:	000c      	movs	r4, r1
 80108fc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80108fe:	2a78      	cmp	r2, #120	@ 0x78
 8010900:	d809      	bhi.n	8010916 <_printf_i+0x2e>
 8010902:	2a62      	cmp	r2, #98	@ 0x62
 8010904:	d80b      	bhi.n	801091e <_printf_i+0x36>
 8010906:	2a00      	cmp	r2, #0
 8010908:	d100      	bne.n	801090c <_printf_i+0x24>
 801090a:	e0ba      	b.n	8010a82 <_printf_i+0x19a>
 801090c:	497a      	ldr	r1, [pc, #488]	@ (8010af8 <_printf_i+0x210>)
 801090e:	9104      	str	r1, [sp, #16]
 8010910:	2a58      	cmp	r2, #88	@ 0x58
 8010912:	d100      	bne.n	8010916 <_printf_i+0x2e>
 8010914:	e08e      	b.n	8010a34 <_printf_i+0x14c>
 8010916:	0025      	movs	r5, r4
 8010918:	3542      	adds	r5, #66	@ 0x42
 801091a:	702a      	strb	r2, [r5, #0]
 801091c:	e022      	b.n	8010964 <_printf_i+0x7c>
 801091e:	0010      	movs	r0, r2
 8010920:	3863      	subs	r0, #99	@ 0x63
 8010922:	2815      	cmp	r0, #21
 8010924:	d8f7      	bhi.n	8010916 <_printf_i+0x2e>
 8010926:	f7ef fc0b 	bl	8000140 <__gnu_thumb1_case_shi>
 801092a:	0016      	.short	0x0016
 801092c:	fff6001f 	.word	0xfff6001f
 8010930:	fff6fff6 	.word	0xfff6fff6
 8010934:	001ffff6 	.word	0x001ffff6
 8010938:	fff6fff6 	.word	0xfff6fff6
 801093c:	fff6fff6 	.word	0xfff6fff6
 8010940:	0036009f 	.word	0x0036009f
 8010944:	fff6007e 	.word	0xfff6007e
 8010948:	00b0fff6 	.word	0x00b0fff6
 801094c:	0036fff6 	.word	0x0036fff6
 8010950:	fff6fff6 	.word	0xfff6fff6
 8010954:	0082      	.short	0x0082
 8010956:	0025      	movs	r5, r4
 8010958:	681a      	ldr	r2, [r3, #0]
 801095a:	3542      	adds	r5, #66	@ 0x42
 801095c:	1d11      	adds	r1, r2, #4
 801095e:	6019      	str	r1, [r3, #0]
 8010960:	6813      	ldr	r3, [r2, #0]
 8010962:	702b      	strb	r3, [r5, #0]
 8010964:	2301      	movs	r3, #1
 8010966:	e09e      	b.n	8010aa6 <_printf_i+0x1be>
 8010968:	6818      	ldr	r0, [r3, #0]
 801096a:	6809      	ldr	r1, [r1, #0]
 801096c:	1d02      	adds	r2, r0, #4
 801096e:	060d      	lsls	r5, r1, #24
 8010970:	d50b      	bpl.n	801098a <_printf_i+0xa2>
 8010972:	6806      	ldr	r6, [r0, #0]
 8010974:	601a      	str	r2, [r3, #0]
 8010976:	2e00      	cmp	r6, #0
 8010978:	da03      	bge.n	8010982 <_printf_i+0x9a>
 801097a:	232d      	movs	r3, #45	@ 0x2d
 801097c:	9a03      	ldr	r2, [sp, #12]
 801097e:	4276      	negs	r6, r6
 8010980:	7013      	strb	r3, [r2, #0]
 8010982:	4b5d      	ldr	r3, [pc, #372]	@ (8010af8 <_printf_i+0x210>)
 8010984:	270a      	movs	r7, #10
 8010986:	9304      	str	r3, [sp, #16]
 8010988:	e018      	b.n	80109bc <_printf_i+0xd4>
 801098a:	6806      	ldr	r6, [r0, #0]
 801098c:	601a      	str	r2, [r3, #0]
 801098e:	0649      	lsls	r1, r1, #25
 8010990:	d5f1      	bpl.n	8010976 <_printf_i+0x8e>
 8010992:	b236      	sxth	r6, r6
 8010994:	e7ef      	b.n	8010976 <_printf_i+0x8e>
 8010996:	6808      	ldr	r0, [r1, #0]
 8010998:	6819      	ldr	r1, [r3, #0]
 801099a:	c940      	ldmia	r1!, {r6}
 801099c:	0605      	lsls	r5, r0, #24
 801099e:	d402      	bmi.n	80109a6 <_printf_i+0xbe>
 80109a0:	0640      	lsls	r0, r0, #25
 80109a2:	d500      	bpl.n	80109a6 <_printf_i+0xbe>
 80109a4:	b2b6      	uxth	r6, r6
 80109a6:	6019      	str	r1, [r3, #0]
 80109a8:	4b53      	ldr	r3, [pc, #332]	@ (8010af8 <_printf_i+0x210>)
 80109aa:	270a      	movs	r7, #10
 80109ac:	9304      	str	r3, [sp, #16]
 80109ae:	2a6f      	cmp	r2, #111	@ 0x6f
 80109b0:	d100      	bne.n	80109b4 <_printf_i+0xcc>
 80109b2:	3f02      	subs	r7, #2
 80109b4:	0023      	movs	r3, r4
 80109b6:	2200      	movs	r2, #0
 80109b8:	3343      	adds	r3, #67	@ 0x43
 80109ba:	701a      	strb	r2, [r3, #0]
 80109bc:	6863      	ldr	r3, [r4, #4]
 80109be:	60a3      	str	r3, [r4, #8]
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	db06      	blt.n	80109d2 <_printf_i+0xea>
 80109c4:	2104      	movs	r1, #4
 80109c6:	6822      	ldr	r2, [r4, #0]
 80109c8:	9d03      	ldr	r5, [sp, #12]
 80109ca:	438a      	bics	r2, r1
 80109cc:	6022      	str	r2, [r4, #0]
 80109ce:	4333      	orrs	r3, r6
 80109d0:	d00c      	beq.n	80109ec <_printf_i+0x104>
 80109d2:	9d03      	ldr	r5, [sp, #12]
 80109d4:	0030      	movs	r0, r6
 80109d6:	0039      	movs	r1, r7
 80109d8:	f7ef fc42 	bl	8000260 <__aeabi_uidivmod>
 80109dc:	9b04      	ldr	r3, [sp, #16]
 80109de:	3d01      	subs	r5, #1
 80109e0:	5c5b      	ldrb	r3, [r3, r1]
 80109e2:	702b      	strb	r3, [r5, #0]
 80109e4:	0033      	movs	r3, r6
 80109e6:	0006      	movs	r6, r0
 80109e8:	429f      	cmp	r7, r3
 80109ea:	d9f3      	bls.n	80109d4 <_printf_i+0xec>
 80109ec:	2f08      	cmp	r7, #8
 80109ee:	d109      	bne.n	8010a04 <_printf_i+0x11c>
 80109f0:	6823      	ldr	r3, [r4, #0]
 80109f2:	07db      	lsls	r3, r3, #31
 80109f4:	d506      	bpl.n	8010a04 <_printf_i+0x11c>
 80109f6:	6862      	ldr	r2, [r4, #4]
 80109f8:	6923      	ldr	r3, [r4, #16]
 80109fa:	429a      	cmp	r2, r3
 80109fc:	dc02      	bgt.n	8010a04 <_printf_i+0x11c>
 80109fe:	2330      	movs	r3, #48	@ 0x30
 8010a00:	3d01      	subs	r5, #1
 8010a02:	702b      	strb	r3, [r5, #0]
 8010a04:	9b03      	ldr	r3, [sp, #12]
 8010a06:	1b5b      	subs	r3, r3, r5
 8010a08:	6123      	str	r3, [r4, #16]
 8010a0a:	9b07      	ldr	r3, [sp, #28]
 8010a0c:	0021      	movs	r1, r4
 8010a0e:	9300      	str	r3, [sp, #0]
 8010a10:	9805      	ldr	r0, [sp, #20]
 8010a12:	9b06      	ldr	r3, [sp, #24]
 8010a14:	aa09      	add	r2, sp, #36	@ 0x24
 8010a16:	f7ff fef7 	bl	8010808 <_printf_common>
 8010a1a:	3001      	adds	r0, #1
 8010a1c:	d148      	bne.n	8010ab0 <_printf_i+0x1c8>
 8010a1e:	2001      	movs	r0, #1
 8010a20:	4240      	negs	r0, r0
 8010a22:	b00b      	add	sp, #44	@ 0x2c
 8010a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010a26:	2220      	movs	r2, #32
 8010a28:	6809      	ldr	r1, [r1, #0]
 8010a2a:	430a      	orrs	r2, r1
 8010a2c:	6022      	str	r2, [r4, #0]
 8010a2e:	2278      	movs	r2, #120	@ 0x78
 8010a30:	4932      	ldr	r1, [pc, #200]	@ (8010afc <_printf_i+0x214>)
 8010a32:	9104      	str	r1, [sp, #16]
 8010a34:	0021      	movs	r1, r4
 8010a36:	3145      	adds	r1, #69	@ 0x45
 8010a38:	700a      	strb	r2, [r1, #0]
 8010a3a:	6819      	ldr	r1, [r3, #0]
 8010a3c:	6822      	ldr	r2, [r4, #0]
 8010a3e:	c940      	ldmia	r1!, {r6}
 8010a40:	0610      	lsls	r0, r2, #24
 8010a42:	d402      	bmi.n	8010a4a <_printf_i+0x162>
 8010a44:	0650      	lsls	r0, r2, #25
 8010a46:	d500      	bpl.n	8010a4a <_printf_i+0x162>
 8010a48:	b2b6      	uxth	r6, r6
 8010a4a:	6019      	str	r1, [r3, #0]
 8010a4c:	07d3      	lsls	r3, r2, #31
 8010a4e:	d502      	bpl.n	8010a56 <_printf_i+0x16e>
 8010a50:	2320      	movs	r3, #32
 8010a52:	4313      	orrs	r3, r2
 8010a54:	6023      	str	r3, [r4, #0]
 8010a56:	2e00      	cmp	r6, #0
 8010a58:	d001      	beq.n	8010a5e <_printf_i+0x176>
 8010a5a:	2710      	movs	r7, #16
 8010a5c:	e7aa      	b.n	80109b4 <_printf_i+0xcc>
 8010a5e:	2220      	movs	r2, #32
 8010a60:	6823      	ldr	r3, [r4, #0]
 8010a62:	4393      	bics	r3, r2
 8010a64:	6023      	str	r3, [r4, #0]
 8010a66:	e7f8      	b.n	8010a5a <_printf_i+0x172>
 8010a68:	681a      	ldr	r2, [r3, #0]
 8010a6a:	680d      	ldr	r5, [r1, #0]
 8010a6c:	1d10      	adds	r0, r2, #4
 8010a6e:	6949      	ldr	r1, [r1, #20]
 8010a70:	6018      	str	r0, [r3, #0]
 8010a72:	6813      	ldr	r3, [r2, #0]
 8010a74:	062e      	lsls	r6, r5, #24
 8010a76:	d501      	bpl.n	8010a7c <_printf_i+0x194>
 8010a78:	6019      	str	r1, [r3, #0]
 8010a7a:	e002      	b.n	8010a82 <_printf_i+0x19a>
 8010a7c:	066d      	lsls	r5, r5, #25
 8010a7e:	d5fb      	bpl.n	8010a78 <_printf_i+0x190>
 8010a80:	8019      	strh	r1, [r3, #0]
 8010a82:	2300      	movs	r3, #0
 8010a84:	9d03      	ldr	r5, [sp, #12]
 8010a86:	6123      	str	r3, [r4, #16]
 8010a88:	e7bf      	b.n	8010a0a <_printf_i+0x122>
 8010a8a:	681a      	ldr	r2, [r3, #0]
 8010a8c:	1d11      	adds	r1, r2, #4
 8010a8e:	6019      	str	r1, [r3, #0]
 8010a90:	6815      	ldr	r5, [r2, #0]
 8010a92:	2100      	movs	r1, #0
 8010a94:	0028      	movs	r0, r5
 8010a96:	6862      	ldr	r2, [r4, #4]
 8010a98:	f000 f9a8 	bl	8010dec <memchr>
 8010a9c:	2800      	cmp	r0, #0
 8010a9e:	d001      	beq.n	8010aa4 <_printf_i+0x1bc>
 8010aa0:	1b40      	subs	r0, r0, r5
 8010aa2:	6060      	str	r0, [r4, #4]
 8010aa4:	6863      	ldr	r3, [r4, #4]
 8010aa6:	6123      	str	r3, [r4, #16]
 8010aa8:	2300      	movs	r3, #0
 8010aaa:	9a03      	ldr	r2, [sp, #12]
 8010aac:	7013      	strb	r3, [r2, #0]
 8010aae:	e7ac      	b.n	8010a0a <_printf_i+0x122>
 8010ab0:	002a      	movs	r2, r5
 8010ab2:	6923      	ldr	r3, [r4, #16]
 8010ab4:	9906      	ldr	r1, [sp, #24]
 8010ab6:	9805      	ldr	r0, [sp, #20]
 8010ab8:	9d07      	ldr	r5, [sp, #28]
 8010aba:	47a8      	blx	r5
 8010abc:	3001      	adds	r0, #1
 8010abe:	d0ae      	beq.n	8010a1e <_printf_i+0x136>
 8010ac0:	6823      	ldr	r3, [r4, #0]
 8010ac2:	079b      	lsls	r3, r3, #30
 8010ac4:	d415      	bmi.n	8010af2 <_printf_i+0x20a>
 8010ac6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010ac8:	68e0      	ldr	r0, [r4, #12]
 8010aca:	4298      	cmp	r0, r3
 8010acc:	daa9      	bge.n	8010a22 <_printf_i+0x13a>
 8010ace:	0018      	movs	r0, r3
 8010ad0:	e7a7      	b.n	8010a22 <_printf_i+0x13a>
 8010ad2:	0022      	movs	r2, r4
 8010ad4:	2301      	movs	r3, #1
 8010ad6:	9906      	ldr	r1, [sp, #24]
 8010ad8:	9805      	ldr	r0, [sp, #20]
 8010ada:	9e07      	ldr	r6, [sp, #28]
 8010adc:	3219      	adds	r2, #25
 8010ade:	47b0      	blx	r6
 8010ae0:	3001      	adds	r0, #1
 8010ae2:	d09c      	beq.n	8010a1e <_printf_i+0x136>
 8010ae4:	3501      	adds	r5, #1
 8010ae6:	68e3      	ldr	r3, [r4, #12]
 8010ae8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010aea:	1a9b      	subs	r3, r3, r2
 8010aec:	42ab      	cmp	r3, r5
 8010aee:	dcf0      	bgt.n	8010ad2 <_printf_i+0x1ea>
 8010af0:	e7e9      	b.n	8010ac6 <_printf_i+0x1de>
 8010af2:	2500      	movs	r5, #0
 8010af4:	e7f7      	b.n	8010ae6 <_printf_i+0x1fe>
 8010af6:	46c0      	nop			@ (mov r8, r8)
 8010af8:	0801c31c 	.word	0x0801c31c
 8010afc:	0801c32d 	.word	0x0801c32d

08010b00 <__sflush_r>:
 8010b00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010b02:	220c      	movs	r2, #12
 8010b04:	5e8b      	ldrsh	r3, [r1, r2]
 8010b06:	0005      	movs	r5, r0
 8010b08:	000c      	movs	r4, r1
 8010b0a:	071a      	lsls	r2, r3, #28
 8010b0c:	d456      	bmi.n	8010bbc <__sflush_r+0xbc>
 8010b0e:	684a      	ldr	r2, [r1, #4]
 8010b10:	2a00      	cmp	r2, #0
 8010b12:	dc02      	bgt.n	8010b1a <__sflush_r+0x1a>
 8010b14:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8010b16:	2a00      	cmp	r2, #0
 8010b18:	dd4e      	ble.n	8010bb8 <__sflush_r+0xb8>
 8010b1a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8010b1c:	2f00      	cmp	r7, #0
 8010b1e:	d04b      	beq.n	8010bb8 <__sflush_r+0xb8>
 8010b20:	2200      	movs	r2, #0
 8010b22:	2080      	movs	r0, #128	@ 0x80
 8010b24:	682e      	ldr	r6, [r5, #0]
 8010b26:	602a      	str	r2, [r5, #0]
 8010b28:	001a      	movs	r2, r3
 8010b2a:	0140      	lsls	r0, r0, #5
 8010b2c:	6a21      	ldr	r1, [r4, #32]
 8010b2e:	4002      	ands	r2, r0
 8010b30:	4203      	tst	r3, r0
 8010b32:	d033      	beq.n	8010b9c <__sflush_r+0x9c>
 8010b34:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010b36:	89a3      	ldrh	r3, [r4, #12]
 8010b38:	075b      	lsls	r3, r3, #29
 8010b3a:	d506      	bpl.n	8010b4a <__sflush_r+0x4a>
 8010b3c:	6863      	ldr	r3, [r4, #4]
 8010b3e:	1ad2      	subs	r2, r2, r3
 8010b40:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	d001      	beq.n	8010b4a <__sflush_r+0x4a>
 8010b46:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010b48:	1ad2      	subs	r2, r2, r3
 8010b4a:	2300      	movs	r3, #0
 8010b4c:	0028      	movs	r0, r5
 8010b4e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8010b50:	6a21      	ldr	r1, [r4, #32]
 8010b52:	47b8      	blx	r7
 8010b54:	89a2      	ldrh	r2, [r4, #12]
 8010b56:	1c43      	adds	r3, r0, #1
 8010b58:	d106      	bne.n	8010b68 <__sflush_r+0x68>
 8010b5a:	6829      	ldr	r1, [r5, #0]
 8010b5c:	291d      	cmp	r1, #29
 8010b5e:	d846      	bhi.n	8010bee <__sflush_r+0xee>
 8010b60:	4b29      	ldr	r3, [pc, #164]	@ (8010c08 <__sflush_r+0x108>)
 8010b62:	40cb      	lsrs	r3, r1
 8010b64:	07db      	lsls	r3, r3, #31
 8010b66:	d542      	bpl.n	8010bee <__sflush_r+0xee>
 8010b68:	2300      	movs	r3, #0
 8010b6a:	6063      	str	r3, [r4, #4]
 8010b6c:	6923      	ldr	r3, [r4, #16]
 8010b6e:	6023      	str	r3, [r4, #0]
 8010b70:	04d2      	lsls	r2, r2, #19
 8010b72:	d505      	bpl.n	8010b80 <__sflush_r+0x80>
 8010b74:	1c43      	adds	r3, r0, #1
 8010b76:	d102      	bne.n	8010b7e <__sflush_r+0x7e>
 8010b78:	682b      	ldr	r3, [r5, #0]
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d100      	bne.n	8010b80 <__sflush_r+0x80>
 8010b7e:	6560      	str	r0, [r4, #84]	@ 0x54
 8010b80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010b82:	602e      	str	r6, [r5, #0]
 8010b84:	2900      	cmp	r1, #0
 8010b86:	d017      	beq.n	8010bb8 <__sflush_r+0xb8>
 8010b88:	0023      	movs	r3, r4
 8010b8a:	3344      	adds	r3, #68	@ 0x44
 8010b8c:	4299      	cmp	r1, r3
 8010b8e:	d002      	beq.n	8010b96 <__sflush_r+0x96>
 8010b90:	0028      	movs	r0, r5
 8010b92:	f7fe fa5f 	bl	800f054 <_free_r>
 8010b96:	2300      	movs	r3, #0
 8010b98:	6363      	str	r3, [r4, #52]	@ 0x34
 8010b9a:	e00d      	b.n	8010bb8 <__sflush_r+0xb8>
 8010b9c:	2301      	movs	r3, #1
 8010b9e:	0028      	movs	r0, r5
 8010ba0:	47b8      	blx	r7
 8010ba2:	0002      	movs	r2, r0
 8010ba4:	1c43      	adds	r3, r0, #1
 8010ba6:	d1c6      	bne.n	8010b36 <__sflush_r+0x36>
 8010ba8:	682b      	ldr	r3, [r5, #0]
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	d0c3      	beq.n	8010b36 <__sflush_r+0x36>
 8010bae:	2b1d      	cmp	r3, #29
 8010bb0:	d001      	beq.n	8010bb6 <__sflush_r+0xb6>
 8010bb2:	2b16      	cmp	r3, #22
 8010bb4:	d11a      	bne.n	8010bec <__sflush_r+0xec>
 8010bb6:	602e      	str	r6, [r5, #0]
 8010bb8:	2000      	movs	r0, #0
 8010bba:	e01e      	b.n	8010bfa <__sflush_r+0xfa>
 8010bbc:	690e      	ldr	r6, [r1, #16]
 8010bbe:	2e00      	cmp	r6, #0
 8010bc0:	d0fa      	beq.n	8010bb8 <__sflush_r+0xb8>
 8010bc2:	680f      	ldr	r7, [r1, #0]
 8010bc4:	600e      	str	r6, [r1, #0]
 8010bc6:	1bba      	subs	r2, r7, r6
 8010bc8:	9201      	str	r2, [sp, #4]
 8010bca:	2200      	movs	r2, #0
 8010bcc:	079b      	lsls	r3, r3, #30
 8010bce:	d100      	bne.n	8010bd2 <__sflush_r+0xd2>
 8010bd0:	694a      	ldr	r2, [r1, #20]
 8010bd2:	60a2      	str	r2, [r4, #8]
 8010bd4:	9b01      	ldr	r3, [sp, #4]
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	ddee      	ble.n	8010bb8 <__sflush_r+0xb8>
 8010bda:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8010bdc:	0032      	movs	r2, r6
 8010bde:	001f      	movs	r7, r3
 8010be0:	0028      	movs	r0, r5
 8010be2:	9b01      	ldr	r3, [sp, #4]
 8010be4:	6a21      	ldr	r1, [r4, #32]
 8010be6:	47b8      	blx	r7
 8010be8:	2800      	cmp	r0, #0
 8010bea:	dc07      	bgt.n	8010bfc <__sflush_r+0xfc>
 8010bec:	89a2      	ldrh	r2, [r4, #12]
 8010bee:	2340      	movs	r3, #64	@ 0x40
 8010bf0:	2001      	movs	r0, #1
 8010bf2:	4313      	orrs	r3, r2
 8010bf4:	b21b      	sxth	r3, r3
 8010bf6:	81a3      	strh	r3, [r4, #12]
 8010bf8:	4240      	negs	r0, r0
 8010bfa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010bfc:	9b01      	ldr	r3, [sp, #4]
 8010bfe:	1836      	adds	r6, r6, r0
 8010c00:	1a1b      	subs	r3, r3, r0
 8010c02:	9301      	str	r3, [sp, #4]
 8010c04:	e7e6      	b.n	8010bd4 <__sflush_r+0xd4>
 8010c06:	46c0      	nop			@ (mov r8, r8)
 8010c08:	20400001 	.word	0x20400001

08010c0c <_fflush_r>:
 8010c0c:	690b      	ldr	r3, [r1, #16]
 8010c0e:	b570      	push	{r4, r5, r6, lr}
 8010c10:	0005      	movs	r5, r0
 8010c12:	000c      	movs	r4, r1
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	d102      	bne.n	8010c1e <_fflush_r+0x12>
 8010c18:	2500      	movs	r5, #0
 8010c1a:	0028      	movs	r0, r5
 8010c1c:	bd70      	pop	{r4, r5, r6, pc}
 8010c1e:	2800      	cmp	r0, #0
 8010c20:	d004      	beq.n	8010c2c <_fflush_r+0x20>
 8010c22:	6a03      	ldr	r3, [r0, #32]
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d101      	bne.n	8010c2c <_fflush_r+0x20>
 8010c28:	f7fe f8ce 	bl	800edc8 <__sinit>
 8010c2c:	220c      	movs	r2, #12
 8010c2e:	5ea3      	ldrsh	r3, [r4, r2]
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	d0f1      	beq.n	8010c18 <_fflush_r+0xc>
 8010c34:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010c36:	07d2      	lsls	r2, r2, #31
 8010c38:	d404      	bmi.n	8010c44 <_fflush_r+0x38>
 8010c3a:	059b      	lsls	r3, r3, #22
 8010c3c:	d402      	bmi.n	8010c44 <_fflush_r+0x38>
 8010c3e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010c40:	f7fe f9f7 	bl	800f032 <__retarget_lock_acquire_recursive>
 8010c44:	0028      	movs	r0, r5
 8010c46:	0021      	movs	r1, r4
 8010c48:	f7ff ff5a 	bl	8010b00 <__sflush_r>
 8010c4c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010c4e:	0005      	movs	r5, r0
 8010c50:	07db      	lsls	r3, r3, #31
 8010c52:	d4e2      	bmi.n	8010c1a <_fflush_r+0xe>
 8010c54:	89a3      	ldrh	r3, [r4, #12]
 8010c56:	059b      	lsls	r3, r3, #22
 8010c58:	d4df      	bmi.n	8010c1a <_fflush_r+0xe>
 8010c5a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010c5c:	f7fe f9ea 	bl	800f034 <__retarget_lock_release_recursive>
 8010c60:	e7db      	b.n	8010c1a <_fflush_r+0xe>

08010c62 <__swbuf_r>:
 8010c62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c64:	0006      	movs	r6, r0
 8010c66:	000d      	movs	r5, r1
 8010c68:	0014      	movs	r4, r2
 8010c6a:	2800      	cmp	r0, #0
 8010c6c:	d004      	beq.n	8010c78 <__swbuf_r+0x16>
 8010c6e:	6a03      	ldr	r3, [r0, #32]
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d101      	bne.n	8010c78 <__swbuf_r+0x16>
 8010c74:	f7fe f8a8 	bl	800edc8 <__sinit>
 8010c78:	69a3      	ldr	r3, [r4, #24]
 8010c7a:	60a3      	str	r3, [r4, #8]
 8010c7c:	89a3      	ldrh	r3, [r4, #12]
 8010c7e:	071b      	lsls	r3, r3, #28
 8010c80:	d502      	bpl.n	8010c88 <__swbuf_r+0x26>
 8010c82:	6923      	ldr	r3, [r4, #16]
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d109      	bne.n	8010c9c <__swbuf_r+0x3a>
 8010c88:	0021      	movs	r1, r4
 8010c8a:	0030      	movs	r0, r6
 8010c8c:	f000 f82c 	bl	8010ce8 <__swsetup_r>
 8010c90:	2800      	cmp	r0, #0
 8010c92:	d003      	beq.n	8010c9c <__swbuf_r+0x3a>
 8010c94:	2501      	movs	r5, #1
 8010c96:	426d      	negs	r5, r5
 8010c98:	0028      	movs	r0, r5
 8010c9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010c9c:	6923      	ldr	r3, [r4, #16]
 8010c9e:	6820      	ldr	r0, [r4, #0]
 8010ca0:	b2ef      	uxtb	r7, r5
 8010ca2:	1ac0      	subs	r0, r0, r3
 8010ca4:	6963      	ldr	r3, [r4, #20]
 8010ca6:	b2ed      	uxtb	r5, r5
 8010ca8:	4283      	cmp	r3, r0
 8010caa:	dc05      	bgt.n	8010cb8 <__swbuf_r+0x56>
 8010cac:	0021      	movs	r1, r4
 8010cae:	0030      	movs	r0, r6
 8010cb0:	f7ff ffac 	bl	8010c0c <_fflush_r>
 8010cb4:	2800      	cmp	r0, #0
 8010cb6:	d1ed      	bne.n	8010c94 <__swbuf_r+0x32>
 8010cb8:	68a3      	ldr	r3, [r4, #8]
 8010cba:	3001      	adds	r0, #1
 8010cbc:	3b01      	subs	r3, #1
 8010cbe:	60a3      	str	r3, [r4, #8]
 8010cc0:	6823      	ldr	r3, [r4, #0]
 8010cc2:	1c5a      	adds	r2, r3, #1
 8010cc4:	6022      	str	r2, [r4, #0]
 8010cc6:	701f      	strb	r7, [r3, #0]
 8010cc8:	6963      	ldr	r3, [r4, #20]
 8010cca:	4283      	cmp	r3, r0
 8010ccc:	d004      	beq.n	8010cd8 <__swbuf_r+0x76>
 8010cce:	89a3      	ldrh	r3, [r4, #12]
 8010cd0:	07db      	lsls	r3, r3, #31
 8010cd2:	d5e1      	bpl.n	8010c98 <__swbuf_r+0x36>
 8010cd4:	2d0a      	cmp	r5, #10
 8010cd6:	d1df      	bne.n	8010c98 <__swbuf_r+0x36>
 8010cd8:	0021      	movs	r1, r4
 8010cda:	0030      	movs	r0, r6
 8010cdc:	f7ff ff96 	bl	8010c0c <_fflush_r>
 8010ce0:	2800      	cmp	r0, #0
 8010ce2:	d0d9      	beq.n	8010c98 <__swbuf_r+0x36>
 8010ce4:	e7d6      	b.n	8010c94 <__swbuf_r+0x32>
	...

08010ce8 <__swsetup_r>:
 8010ce8:	4b2d      	ldr	r3, [pc, #180]	@ (8010da0 <__swsetup_r+0xb8>)
 8010cea:	b570      	push	{r4, r5, r6, lr}
 8010cec:	0005      	movs	r5, r0
 8010cee:	6818      	ldr	r0, [r3, #0]
 8010cf0:	000c      	movs	r4, r1
 8010cf2:	2800      	cmp	r0, #0
 8010cf4:	d004      	beq.n	8010d00 <__swsetup_r+0x18>
 8010cf6:	6a03      	ldr	r3, [r0, #32]
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d101      	bne.n	8010d00 <__swsetup_r+0x18>
 8010cfc:	f7fe f864 	bl	800edc8 <__sinit>
 8010d00:	220c      	movs	r2, #12
 8010d02:	5ea3      	ldrsh	r3, [r4, r2]
 8010d04:	071a      	lsls	r2, r3, #28
 8010d06:	d423      	bmi.n	8010d50 <__swsetup_r+0x68>
 8010d08:	06da      	lsls	r2, r3, #27
 8010d0a:	d407      	bmi.n	8010d1c <__swsetup_r+0x34>
 8010d0c:	2209      	movs	r2, #9
 8010d0e:	602a      	str	r2, [r5, #0]
 8010d10:	2240      	movs	r2, #64	@ 0x40
 8010d12:	2001      	movs	r0, #1
 8010d14:	4313      	orrs	r3, r2
 8010d16:	81a3      	strh	r3, [r4, #12]
 8010d18:	4240      	negs	r0, r0
 8010d1a:	e03a      	b.n	8010d92 <__swsetup_r+0xaa>
 8010d1c:	075b      	lsls	r3, r3, #29
 8010d1e:	d513      	bpl.n	8010d48 <__swsetup_r+0x60>
 8010d20:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010d22:	2900      	cmp	r1, #0
 8010d24:	d008      	beq.n	8010d38 <__swsetup_r+0x50>
 8010d26:	0023      	movs	r3, r4
 8010d28:	3344      	adds	r3, #68	@ 0x44
 8010d2a:	4299      	cmp	r1, r3
 8010d2c:	d002      	beq.n	8010d34 <__swsetup_r+0x4c>
 8010d2e:	0028      	movs	r0, r5
 8010d30:	f7fe f990 	bl	800f054 <_free_r>
 8010d34:	2300      	movs	r3, #0
 8010d36:	6363      	str	r3, [r4, #52]	@ 0x34
 8010d38:	2224      	movs	r2, #36	@ 0x24
 8010d3a:	89a3      	ldrh	r3, [r4, #12]
 8010d3c:	4393      	bics	r3, r2
 8010d3e:	81a3      	strh	r3, [r4, #12]
 8010d40:	2300      	movs	r3, #0
 8010d42:	6063      	str	r3, [r4, #4]
 8010d44:	6923      	ldr	r3, [r4, #16]
 8010d46:	6023      	str	r3, [r4, #0]
 8010d48:	2308      	movs	r3, #8
 8010d4a:	89a2      	ldrh	r2, [r4, #12]
 8010d4c:	4313      	orrs	r3, r2
 8010d4e:	81a3      	strh	r3, [r4, #12]
 8010d50:	6923      	ldr	r3, [r4, #16]
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	d10b      	bne.n	8010d6e <__swsetup_r+0x86>
 8010d56:	21a0      	movs	r1, #160	@ 0xa0
 8010d58:	2280      	movs	r2, #128	@ 0x80
 8010d5a:	89a3      	ldrh	r3, [r4, #12]
 8010d5c:	0089      	lsls	r1, r1, #2
 8010d5e:	0092      	lsls	r2, r2, #2
 8010d60:	400b      	ands	r3, r1
 8010d62:	4293      	cmp	r3, r2
 8010d64:	d003      	beq.n	8010d6e <__swsetup_r+0x86>
 8010d66:	0021      	movs	r1, r4
 8010d68:	0028      	movs	r0, r5
 8010d6a:	f000 f90b 	bl	8010f84 <__smakebuf_r>
 8010d6e:	220c      	movs	r2, #12
 8010d70:	5ea3      	ldrsh	r3, [r4, r2]
 8010d72:	2101      	movs	r1, #1
 8010d74:	001a      	movs	r2, r3
 8010d76:	400a      	ands	r2, r1
 8010d78:	420b      	tst	r3, r1
 8010d7a:	d00b      	beq.n	8010d94 <__swsetup_r+0xac>
 8010d7c:	2200      	movs	r2, #0
 8010d7e:	60a2      	str	r2, [r4, #8]
 8010d80:	6962      	ldr	r2, [r4, #20]
 8010d82:	4252      	negs	r2, r2
 8010d84:	61a2      	str	r2, [r4, #24]
 8010d86:	2000      	movs	r0, #0
 8010d88:	6922      	ldr	r2, [r4, #16]
 8010d8a:	4282      	cmp	r2, r0
 8010d8c:	d101      	bne.n	8010d92 <__swsetup_r+0xaa>
 8010d8e:	061a      	lsls	r2, r3, #24
 8010d90:	d4be      	bmi.n	8010d10 <__swsetup_r+0x28>
 8010d92:	bd70      	pop	{r4, r5, r6, pc}
 8010d94:	0799      	lsls	r1, r3, #30
 8010d96:	d400      	bmi.n	8010d9a <__swsetup_r+0xb2>
 8010d98:	6962      	ldr	r2, [r4, #20]
 8010d9a:	60a2      	str	r2, [r4, #8]
 8010d9c:	e7f3      	b.n	8010d86 <__swsetup_r+0x9e>
 8010d9e:	46c0      	nop			@ (mov r8, r8)
 8010da0:	20000188 	.word	0x20000188

08010da4 <memmove>:
 8010da4:	b510      	push	{r4, lr}
 8010da6:	4288      	cmp	r0, r1
 8010da8:	d902      	bls.n	8010db0 <memmove+0xc>
 8010daa:	188b      	adds	r3, r1, r2
 8010dac:	4298      	cmp	r0, r3
 8010dae:	d308      	bcc.n	8010dc2 <memmove+0x1e>
 8010db0:	2300      	movs	r3, #0
 8010db2:	429a      	cmp	r2, r3
 8010db4:	d007      	beq.n	8010dc6 <memmove+0x22>
 8010db6:	5ccc      	ldrb	r4, [r1, r3]
 8010db8:	54c4      	strb	r4, [r0, r3]
 8010dba:	3301      	adds	r3, #1
 8010dbc:	e7f9      	b.n	8010db2 <memmove+0xe>
 8010dbe:	5c8b      	ldrb	r3, [r1, r2]
 8010dc0:	5483      	strb	r3, [r0, r2]
 8010dc2:	3a01      	subs	r2, #1
 8010dc4:	d2fb      	bcs.n	8010dbe <memmove+0x1a>
 8010dc6:	bd10      	pop	{r4, pc}

08010dc8 <_sbrk_r>:
 8010dc8:	2300      	movs	r3, #0
 8010dca:	b570      	push	{r4, r5, r6, lr}
 8010dcc:	4d06      	ldr	r5, [pc, #24]	@ (8010de8 <_sbrk_r+0x20>)
 8010dce:	0004      	movs	r4, r0
 8010dd0:	0008      	movs	r0, r1
 8010dd2:	602b      	str	r3, [r5, #0]
 8010dd4:	f7f7 fa9e 	bl	8008314 <_sbrk>
 8010dd8:	1c43      	adds	r3, r0, #1
 8010dda:	d103      	bne.n	8010de4 <_sbrk_r+0x1c>
 8010ddc:	682b      	ldr	r3, [r5, #0]
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	d000      	beq.n	8010de4 <_sbrk_r+0x1c>
 8010de2:	6023      	str	r3, [r4, #0]
 8010de4:	bd70      	pop	{r4, r5, r6, pc}
 8010de6:	46c0      	nop			@ (mov r8, r8)
 8010de8:	20001634 	.word	0x20001634

08010dec <memchr>:
 8010dec:	b2c9      	uxtb	r1, r1
 8010dee:	1882      	adds	r2, r0, r2
 8010df0:	4290      	cmp	r0, r2
 8010df2:	d101      	bne.n	8010df8 <memchr+0xc>
 8010df4:	2000      	movs	r0, #0
 8010df6:	4770      	bx	lr
 8010df8:	7803      	ldrb	r3, [r0, #0]
 8010dfa:	428b      	cmp	r3, r1
 8010dfc:	d0fb      	beq.n	8010df6 <memchr+0xa>
 8010dfe:	3001      	adds	r0, #1
 8010e00:	e7f6      	b.n	8010df0 <memchr+0x4>
	...

08010e04 <__assert_func>:
 8010e04:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8010e06:	0014      	movs	r4, r2
 8010e08:	001a      	movs	r2, r3
 8010e0a:	4b09      	ldr	r3, [pc, #36]	@ (8010e30 <__assert_func+0x2c>)
 8010e0c:	0005      	movs	r5, r0
 8010e0e:	681b      	ldr	r3, [r3, #0]
 8010e10:	000e      	movs	r6, r1
 8010e12:	68d8      	ldr	r0, [r3, #12]
 8010e14:	4b07      	ldr	r3, [pc, #28]	@ (8010e34 <__assert_func+0x30>)
 8010e16:	2c00      	cmp	r4, #0
 8010e18:	d101      	bne.n	8010e1e <__assert_func+0x1a>
 8010e1a:	4b07      	ldr	r3, [pc, #28]	@ (8010e38 <__assert_func+0x34>)
 8010e1c:	001c      	movs	r4, r3
 8010e1e:	4907      	ldr	r1, [pc, #28]	@ (8010e3c <__assert_func+0x38>)
 8010e20:	9301      	str	r3, [sp, #4]
 8010e22:	9402      	str	r4, [sp, #8]
 8010e24:	002b      	movs	r3, r5
 8010e26:	9600      	str	r6, [sp, #0]
 8010e28:	f000 f872 	bl	8010f10 <fiprintf>
 8010e2c:	f000 f910 	bl	8011050 <abort>
 8010e30:	20000188 	.word	0x20000188
 8010e34:	0801c33e 	.word	0x0801c33e
 8010e38:	0801c379 	.word	0x0801c379
 8010e3c:	0801c34b 	.word	0x0801c34b

08010e40 <_calloc_r>:
 8010e40:	b570      	push	{r4, r5, r6, lr}
 8010e42:	0c0b      	lsrs	r3, r1, #16
 8010e44:	0c15      	lsrs	r5, r2, #16
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d11e      	bne.n	8010e88 <_calloc_r+0x48>
 8010e4a:	2d00      	cmp	r5, #0
 8010e4c:	d10c      	bne.n	8010e68 <_calloc_r+0x28>
 8010e4e:	b289      	uxth	r1, r1
 8010e50:	b294      	uxth	r4, r2
 8010e52:	434c      	muls	r4, r1
 8010e54:	0021      	movs	r1, r4
 8010e56:	f7fe fcc3 	bl	800f7e0 <_malloc_r>
 8010e5a:	1e05      	subs	r5, r0, #0
 8010e5c:	d01b      	beq.n	8010e96 <_calloc_r+0x56>
 8010e5e:	0022      	movs	r2, r4
 8010e60:	2100      	movs	r1, #0
 8010e62:	f7fe f853 	bl	800ef0c <memset>
 8010e66:	e016      	b.n	8010e96 <_calloc_r+0x56>
 8010e68:	1c2b      	adds	r3, r5, #0
 8010e6a:	1c0c      	adds	r4, r1, #0
 8010e6c:	b289      	uxth	r1, r1
 8010e6e:	b292      	uxth	r2, r2
 8010e70:	434a      	muls	r2, r1
 8010e72:	b29b      	uxth	r3, r3
 8010e74:	b2a1      	uxth	r1, r4
 8010e76:	4359      	muls	r1, r3
 8010e78:	0c14      	lsrs	r4, r2, #16
 8010e7a:	190c      	adds	r4, r1, r4
 8010e7c:	0c23      	lsrs	r3, r4, #16
 8010e7e:	d107      	bne.n	8010e90 <_calloc_r+0x50>
 8010e80:	0424      	lsls	r4, r4, #16
 8010e82:	b292      	uxth	r2, r2
 8010e84:	4314      	orrs	r4, r2
 8010e86:	e7e5      	b.n	8010e54 <_calloc_r+0x14>
 8010e88:	2d00      	cmp	r5, #0
 8010e8a:	d101      	bne.n	8010e90 <_calloc_r+0x50>
 8010e8c:	1c14      	adds	r4, r2, #0
 8010e8e:	e7ed      	b.n	8010e6c <_calloc_r+0x2c>
 8010e90:	230c      	movs	r3, #12
 8010e92:	2500      	movs	r5, #0
 8010e94:	6003      	str	r3, [r0, #0]
 8010e96:	0028      	movs	r0, r5
 8010e98:	bd70      	pop	{r4, r5, r6, pc}
	...

08010e9c <malloc>:
 8010e9c:	b510      	push	{r4, lr}
 8010e9e:	4b03      	ldr	r3, [pc, #12]	@ (8010eac <malloc+0x10>)
 8010ea0:	0001      	movs	r1, r0
 8010ea2:	6818      	ldr	r0, [r3, #0]
 8010ea4:	f7fe fc9c 	bl	800f7e0 <_malloc_r>
 8010ea8:	bd10      	pop	{r4, pc}
 8010eaa:	46c0      	nop			@ (mov r8, r8)
 8010eac:	20000188 	.word	0x20000188

08010eb0 <_realloc_r>:
 8010eb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010eb2:	0006      	movs	r6, r0
 8010eb4:	000c      	movs	r4, r1
 8010eb6:	0015      	movs	r5, r2
 8010eb8:	2900      	cmp	r1, #0
 8010eba:	d105      	bne.n	8010ec8 <_realloc_r+0x18>
 8010ebc:	0011      	movs	r1, r2
 8010ebe:	f7fe fc8f 	bl	800f7e0 <_malloc_r>
 8010ec2:	0004      	movs	r4, r0
 8010ec4:	0020      	movs	r0, r4
 8010ec6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010ec8:	2a00      	cmp	r2, #0
 8010eca:	d103      	bne.n	8010ed4 <_realloc_r+0x24>
 8010ecc:	f7fe f8c2 	bl	800f054 <_free_r>
 8010ed0:	002c      	movs	r4, r5
 8010ed2:	e7f7      	b.n	8010ec4 <_realloc_r+0x14>
 8010ed4:	f000 f8c3 	bl	801105e <_malloc_usable_size_r>
 8010ed8:	0007      	movs	r7, r0
 8010eda:	4285      	cmp	r5, r0
 8010edc:	d802      	bhi.n	8010ee4 <_realloc_r+0x34>
 8010ede:	0843      	lsrs	r3, r0, #1
 8010ee0:	42ab      	cmp	r3, r5
 8010ee2:	d3ef      	bcc.n	8010ec4 <_realloc_r+0x14>
 8010ee4:	0029      	movs	r1, r5
 8010ee6:	0030      	movs	r0, r6
 8010ee8:	f7fe fc7a 	bl	800f7e0 <_malloc_r>
 8010eec:	9001      	str	r0, [sp, #4]
 8010eee:	2800      	cmp	r0, #0
 8010ef0:	d101      	bne.n	8010ef6 <_realloc_r+0x46>
 8010ef2:	9c01      	ldr	r4, [sp, #4]
 8010ef4:	e7e6      	b.n	8010ec4 <_realloc_r+0x14>
 8010ef6:	002a      	movs	r2, r5
 8010ef8:	42bd      	cmp	r5, r7
 8010efa:	d900      	bls.n	8010efe <_realloc_r+0x4e>
 8010efc:	003a      	movs	r2, r7
 8010efe:	0021      	movs	r1, r4
 8010f00:	9801      	ldr	r0, [sp, #4]
 8010f02:	f7fe f898 	bl	800f036 <memcpy>
 8010f06:	0021      	movs	r1, r4
 8010f08:	0030      	movs	r0, r6
 8010f0a:	f7fe f8a3 	bl	800f054 <_free_r>
 8010f0e:	e7f0      	b.n	8010ef2 <_realloc_r+0x42>

08010f10 <fiprintf>:
 8010f10:	b40e      	push	{r1, r2, r3}
 8010f12:	b517      	push	{r0, r1, r2, r4, lr}
 8010f14:	4c05      	ldr	r4, [pc, #20]	@ (8010f2c <fiprintf+0x1c>)
 8010f16:	ab05      	add	r3, sp, #20
 8010f18:	cb04      	ldmia	r3!, {r2}
 8010f1a:	0001      	movs	r1, r0
 8010f1c:	6820      	ldr	r0, [r4, #0]
 8010f1e:	9301      	str	r3, [sp, #4]
 8010f20:	f7ff fb56 	bl	80105d0 <_vfiprintf_r>
 8010f24:	bc1e      	pop	{r1, r2, r3, r4}
 8010f26:	bc08      	pop	{r3}
 8010f28:	b003      	add	sp, #12
 8010f2a:	4718      	bx	r3
 8010f2c:	20000188 	.word	0x20000188

08010f30 <__swhatbuf_r>:
 8010f30:	b570      	push	{r4, r5, r6, lr}
 8010f32:	000e      	movs	r6, r1
 8010f34:	001d      	movs	r5, r3
 8010f36:	230e      	movs	r3, #14
 8010f38:	5ec9      	ldrsh	r1, [r1, r3]
 8010f3a:	0014      	movs	r4, r2
 8010f3c:	b096      	sub	sp, #88	@ 0x58
 8010f3e:	2900      	cmp	r1, #0
 8010f40:	da0c      	bge.n	8010f5c <__swhatbuf_r+0x2c>
 8010f42:	89b2      	ldrh	r2, [r6, #12]
 8010f44:	2380      	movs	r3, #128	@ 0x80
 8010f46:	0011      	movs	r1, r2
 8010f48:	4019      	ands	r1, r3
 8010f4a:	421a      	tst	r2, r3
 8010f4c:	d114      	bne.n	8010f78 <__swhatbuf_r+0x48>
 8010f4e:	2380      	movs	r3, #128	@ 0x80
 8010f50:	00db      	lsls	r3, r3, #3
 8010f52:	2000      	movs	r0, #0
 8010f54:	6029      	str	r1, [r5, #0]
 8010f56:	6023      	str	r3, [r4, #0]
 8010f58:	b016      	add	sp, #88	@ 0x58
 8010f5a:	bd70      	pop	{r4, r5, r6, pc}
 8010f5c:	466a      	mov	r2, sp
 8010f5e:	f000 f853 	bl	8011008 <_fstat_r>
 8010f62:	2800      	cmp	r0, #0
 8010f64:	dbed      	blt.n	8010f42 <__swhatbuf_r+0x12>
 8010f66:	23f0      	movs	r3, #240	@ 0xf0
 8010f68:	9901      	ldr	r1, [sp, #4]
 8010f6a:	021b      	lsls	r3, r3, #8
 8010f6c:	4019      	ands	r1, r3
 8010f6e:	4b04      	ldr	r3, [pc, #16]	@ (8010f80 <__swhatbuf_r+0x50>)
 8010f70:	18c9      	adds	r1, r1, r3
 8010f72:	424b      	negs	r3, r1
 8010f74:	4159      	adcs	r1, r3
 8010f76:	e7ea      	b.n	8010f4e <__swhatbuf_r+0x1e>
 8010f78:	2100      	movs	r1, #0
 8010f7a:	2340      	movs	r3, #64	@ 0x40
 8010f7c:	e7e9      	b.n	8010f52 <__swhatbuf_r+0x22>
 8010f7e:	46c0      	nop			@ (mov r8, r8)
 8010f80:	ffffe000 	.word	0xffffe000

08010f84 <__smakebuf_r>:
 8010f84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f86:	2602      	movs	r6, #2
 8010f88:	898b      	ldrh	r3, [r1, #12]
 8010f8a:	0005      	movs	r5, r0
 8010f8c:	000c      	movs	r4, r1
 8010f8e:	b085      	sub	sp, #20
 8010f90:	4233      	tst	r3, r6
 8010f92:	d007      	beq.n	8010fa4 <__smakebuf_r+0x20>
 8010f94:	0023      	movs	r3, r4
 8010f96:	3347      	adds	r3, #71	@ 0x47
 8010f98:	6023      	str	r3, [r4, #0]
 8010f9a:	6123      	str	r3, [r4, #16]
 8010f9c:	2301      	movs	r3, #1
 8010f9e:	6163      	str	r3, [r4, #20]
 8010fa0:	b005      	add	sp, #20
 8010fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010fa4:	ab03      	add	r3, sp, #12
 8010fa6:	aa02      	add	r2, sp, #8
 8010fa8:	f7ff ffc2 	bl	8010f30 <__swhatbuf_r>
 8010fac:	9f02      	ldr	r7, [sp, #8]
 8010fae:	9001      	str	r0, [sp, #4]
 8010fb0:	0039      	movs	r1, r7
 8010fb2:	0028      	movs	r0, r5
 8010fb4:	f7fe fc14 	bl	800f7e0 <_malloc_r>
 8010fb8:	2800      	cmp	r0, #0
 8010fba:	d108      	bne.n	8010fce <__smakebuf_r+0x4a>
 8010fbc:	220c      	movs	r2, #12
 8010fbe:	5ea3      	ldrsh	r3, [r4, r2]
 8010fc0:	059a      	lsls	r2, r3, #22
 8010fc2:	d4ed      	bmi.n	8010fa0 <__smakebuf_r+0x1c>
 8010fc4:	2203      	movs	r2, #3
 8010fc6:	4393      	bics	r3, r2
 8010fc8:	431e      	orrs	r6, r3
 8010fca:	81a6      	strh	r6, [r4, #12]
 8010fcc:	e7e2      	b.n	8010f94 <__smakebuf_r+0x10>
 8010fce:	2380      	movs	r3, #128	@ 0x80
 8010fd0:	89a2      	ldrh	r2, [r4, #12]
 8010fd2:	6020      	str	r0, [r4, #0]
 8010fd4:	4313      	orrs	r3, r2
 8010fd6:	81a3      	strh	r3, [r4, #12]
 8010fd8:	9b03      	ldr	r3, [sp, #12]
 8010fda:	6120      	str	r0, [r4, #16]
 8010fdc:	6167      	str	r7, [r4, #20]
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d00c      	beq.n	8010ffc <__smakebuf_r+0x78>
 8010fe2:	0028      	movs	r0, r5
 8010fe4:	230e      	movs	r3, #14
 8010fe6:	5ee1      	ldrsh	r1, [r4, r3]
 8010fe8:	f000 f820 	bl	801102c <_isatty_r>
 8010fec:	2800      	cmp	r0, #0
 8010fee:	d005      	beq.n	8010ffc <__smakebuf_r+0x78>
 8010ff0:	2303      	movs	r3, #3
 8010ff2:	89a2      	ldrh	r2, [r4, #12]
 8010ff4:	439a      	bics	r2, r3
 8010ff6:	3b02      	subs	r3, #2
 8010ff8:	4313      	orrs	r3, r2
 8010ffa:	81a3      	strh	r3, [r4, #12]
 8010ffc:	89a3      	ldrh	r3, [r4, #12]
 8010ffe:	9a01      	ldr	r2, [sp, #4]
 8011000:	4313      	orrs	r3, r2
 8011002:	81a3      	strh	r3, [r4, #12]
 8011004:	e7cc      	b.n	8010fa0 <__smakebuf_r+0x1c>
	...

08011008 <_fstat_r>:
 8011008:	2300      	movs	r3, #0
 801100a:	b570      	push	{r4, r5, r6, lr}
 801100c:	4d06      	ldr	r5, [pc, #24]	@ (8011028 <_fstat_r+0x20>)
 801100e:	0004      	movs	r4, r0
 8011010:	0008      	movs	r0, r1
 8011012:	0011      	movs	r1, r2
 8011014:	602b      	str	r3, [r5, #0]
 8011016:	f7f7 f95a 	bl	80082ce <_fstat>
 801101a:	1c43      	adds	r3, r0, #1
 801101c:	d103      	bne.n	8011026 <_fstat_r+0x1e>
 801101e:	682b      	ldr	r3, [r5, #0]
 8011020:	2b00      	cmp	r3, #0
 8011022:	d000      	beq.n	8011026 <_fstat_r+0x1e>
 8011024:	6023      	str	r3, [r4, #0]
 8011026:	bd70      	pop	{r4, r5, r6, pc}
 8011028:	20001634 	.word	0x20001634

0801102c <_isatty_r>:
 801102c:	2300      	movs	r3, #0
 801102e:	b570      	push	{r4, r5, r6, lr}
 8011030:	4d06      	ldr	r5, [pc, #24]	@ (801104c <_isatty_r+0x20>)
 8011032:	0004      	movs	r4, r0
 8011034:	0008      	movs	r0, r1
 8011036:	602b      	str	r3, [r5, #0]
 8011038:	f7f7 f957 	bl	80082ea <_isatty>
 801103c:	1c43      	adds	r3, r0, #1
 801103e:	d103      	bne.n	8011048 <_isatty_r+0x1c>
 8011040:	682b      	ldr	r3, [r5, #0]
 8011042:	2b00      	cmp	r3, #0
 8011044:	d000      	beq.n	8011048 <_isatty_r+0x1c>
 8011046:	6023      	str	r3, [r4, #0]
 8011048:	bd70      	pop	{r4, r5, r6, pc}
 801104a:	46c0      	nop			@ (mov r8, r8)
 801104c:	20001634 	.word	0x20001634

08011050 <abort>:
 8011050:	2006      	movs	r0, #6
 8011052:	b510      	push	{r4, lr}
 8011054:	f000 f834 	bl	80110c0 <raise>
 8011058:	2001      	movs	r0, #1
 801105a:	f7f7 f8e8 	bl	800822e <_exit>

0801105e <_malloc_usable_size_r>:
 801105e:	1f0b      	subs	r3, r1, #4
 8011060:	681b      	ldr	r3, [r3, #0]
 8011062:	1f18      	subs	r0, r3, #4
 8011064:	2b00      	cmp	r3, #0
 8011066:	da01      	bge.n	801106c <_malloc_usable_size_r+0xe>
 8011068:	580b      	ldr	r3, [r1, r0]
 801106a:	18c0      	adds	r0, r0, r3
 801106c:	4770      	bx	lr

0801106e <_raise_r>:
 801106e:	b570      	push	{r4, r5, r6, lr}
 8011070:	0004      	movs	r4, r0
 8011072:	000d      	movs	r5, r1
 8011074:	291f      	cmp	r1, #31
 8011076:	d904      	bls.n	8011082 <_raise_r+0x14>
 8011078:	2316      	movs	r3, #22
 801107a:	6003      	str	r3, [r0, #0]
 801107c:	2001      	movs	r0, #1
 801107e:	4240      	negs	r0, r0
 8011080:	bd70      	pop	{r4, r5, r6, pc}
 8011082:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8011084:	2b00      	cmp	r3, #0
 8011086:	d004      	beq.n	8011092 <_raise_r+0x24>
 8011088:	008a      	lsls	r2, r1, #2
 801108a:	189b      	adds	r3, r3, r2
 801108c:	681a      	ldr	r2, [r3, #0]
 801108e:	2a00      	cmp	r2, #0
 8011090:	d108      	bne.n	80110a4 <_raise_r+0x36>
 8011092:	0020      	movs	r0, r4
 8011094:	f000 f830 	bl	80110f8 <_getpid_r>
 8011098:	002a      	movs	r2, r5
 801109a:	0001      	movs	r1, r0
 801109c:	0020      	movs	r0, r4
 801109e:	f000 f819 	bl	80110d4 <_kill_r>
 80110a2:	e7ed      	b.n	8011080 <_raise_r+0x12>
 80110a4:	2a01      	cmp	r2, #1
 80110a6:	d009      	beq.n	80110bc <_raise_r+0x4e>
 80110a8:	1c51      	adds	r1, r2, #1
 80110aa:	d103      	bne.n	80110b4 <_raise_r+0x46>
 80110ac:	2316      	movs	r3, #22
 80110ae:	6003      	str	r3, [r0, #0]
 80110b0:	2001      	movs	r0, #1
 80110b2:	e7e5      	b.n	8011080 <_raise_r+0x12>
 80110b4:	2100      	movs	r1, #0
 80110b6:	0028      	movs	r0, r5
 80110b8:	6019      	str	r1, [r3, #0]
 80110ba:	4790      	blx	r2
 80110bc:	2000      	movs	r0, #0
 80110be:	e7df      	b.n	8011080 <_raise_r+0x12>

080110c0 <raise>:
 80110c0:	b510      	push	{r4, lr}
 80110c2:	4b03      	ldr	r3, [pc, #12]	@ (80110d0 <raise+0x10>)
 80110c4:	0001      	movs	r1, r0
 80110c6:	6818      	ldr	r0, [r3, #0]
 80110c8:	f7ff ffd1 	bl	801106e <_raise_r>
 80110cc:	bd10      	pop	{r4, pc}
 80110ce:	46c0      	nop			@ (mov r8, r8)
 80110d0:	20000188 	.word	0x20000188

080110d4 <_kill_r>:
 80110d4:	2300      	movs	r3, #0
 80110d6:	b570      	push	{r4, r5, r6, lr}
 80110d8:	4d06      	ldr	r5, [pc, #24]	@ (80110f4 <_kill_r+0x20>)
 80110da:	0004      	movs	r4, r0
 80110dc:	0008      	movs	r0, r1
 80110de:	0011      	movs	r1, r2
 80110e0:	602b      	str	r3, [r5, #0]
 80110e2:	f7f7 f894 	bl	800820e <_kill>
 80110e6:	1c43      	adds	r3, r0, #1
 80110e8:	d103      	bne.n	80110f2 <_kill_r+0x1e>
 80110ea:	682b      	ldr	r3, [r5, #0]
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d000      	beq.n	80110f2 <_kill_r+0x1e>
 80110f0:	6023      	str	r3, [r4, #0]
 80110f2:	bd70      	pop	{r4, r5, r6, pc}
 80110f4:	20001634 	.word	0x20001634

080110f8 <_getpid_r>:
 80110f8:	b510      	push	{r4, lr}
 80110fa:	f7f7 f882 	bl	8008202 <_getpid>
 80110fe:	bd10      	pop	{r4, pc}

08011100 <fmod>:
 8011100:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011102:	0014      	movs	r4, r2
 8011104:	001d      	movs	r5, r3
 8011106:	9000      	str	r0, [sp, #0]
 8011108:	9101      	str	r1, [sp, #4]
 801110a:	f000 f92d 	bl	8011368 <__ieee754_fmod>
 801110e:	0022      	movs	r2, r4
 8011110:	0006      	movs	r6, r0
 8011112:	000f      	movs	r7, r1
 8011114:	9800      	ldr	r0, [sp, #0]
 8011116:	9901      	ldr	r1, [sp, #4]
 8011118:	002b      	movs	r3, r5
 801111a:	f7f2 faed 	bl	80036f8 <__aeabi_dcmpun>
 801111e:	2800      	cmp	r0, #0
 8011120:	d113      	bne.n	801114a <fmod+0x4a>
 8011122:	2200      	movs	r2, #0
 8011124:	2300      	movs	r3, #0
 8011126:	0020      	movs	r0, r4
 8011128:	0029      	movs	r1, r5
 801112a:	f7ef f999 	bl	8000460 <__aeabi_dcmpeq>
 801112e:	2800      	cmp	r0, #0
 8011130:	d00b      	beq.n	801114a <fmod+0x4a>
 8011132:	f7fd ff53 	bl	800efdc <__errno>
 8011136:	2321      	movs	r3, #33	@ 0x21
 8011138:	2200      	movs	r2, #0
 801113a:	6003      	str	r3, [r0, #0]
 801113c:	2300      	movs	r3, #0
 801113e:	0010      	movs	r0, r2
 8011140:	0019      	movs	r1, r3
 8011142:	f7f0 ffaf 	bl	80020a4 <__aeabi_ddiv>
 8011146:	0006      	movs	r6, r0
 8011148:	000f      	movs	r7, r1
 801114a:	0030      	movs	r0, r6
 801114c:	0039      	movs	r1, r7
 801114e:	b003      	add	sp, #12
 8011150:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011152 <sqrt>:
 8011152:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011154:	0004      	movs	r4, r0
 8011156:	000d      	movs	r5, r1
 8011158:	f000 f822 	bl	80111a0 <__ieee754_sqrt>
 801115c:	0022      	movs	r2, r4
 801115e:	0006      	movs	r6, r0
 8011160:	000f      	movs	r7, r1
 8011162:	002b      	movs	r3, r5
 8011164:	0020      	movs	r0, r4
 8011166:	0029      	movs	r1, r5
 8011168:	f7f2 fac6 	bl	80036f8 <__aeabi_dcmpun>
 801116c:	2800      	cmp	r0, #0
 801116e:	d113      	bne.n	8011198 <sqrt+0x46>
 8011170:	2200      	movs	r2, #0
 8011172:	2300      	movs	r3, #0
 8011174:	0020      	movs	r0, r4
 8011176:	0029      	movs	r1, r5
 8011178:	f7ef f978 	bl	800046c <__aeabi_dcmplt>
 801117c:	2800      	cmp	r0, #0
 801117e:	d00b      	beq.n	8011198 <sqrt+0x46>
 8011180:	f7fd ff2c 	bl	800efdc <__errno>
 8011184:	2321      	movs	r3, #33	@ 0x21
 8011186:	2200      	movs	r2, #0
 8011188:	6003      	str	r3, [r0, #0]
 801118a:	2300      	movs	r3, #0
 801118c:	0010      	movs	r0, r2
 801118e:	0019      	movs	r1, r3
 8011190:	f7f0 ff88 	bl	80020a4 <__aeabi_ddiv>
 8011194:	0006      	movs	r6, r0
 8011196:	000f      	movs	r7, r1
 8011198:	0030      	movs	r0, r6
 801119a:	0039      	movs	r1, r7
 801119c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080111a0 <__ieee754_sqrt>:
 80111a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80111a2:	000a      	movs	r2, r1
 80111a4:	000d      	movs	r5, r1
 80111a6:	496b      	ldr	r1, [pc, #428]	@ (8011354 <__ieee754_sqrt+0x1b4>)
 80111a8:	0004      	movs	r4, r0
 80111aa:	0003      	movs	r3, r0
 80111ac:	0008      	movs	r0, r1
 80111ae:	b087      	sub	sp, #28
 80111b0:	4028      	ands	r0, r5
 80111b2:	4288      	cmp	r0, r1
 80111b4:	d111      	bne.n	80111da <__ieee754_sqrt+0x3a>
 80111b6:	0022      	movs	r2, r4
 80111b8:	002b      	movs	r3, r5
 80111ba:	0020      	movs	r0, r4
 80111bc:	0029      	movs	r1, r5
 80111be:	f7f1 fbab 	bl	8002918 <__aeabi_dmul>
 80111c2:	0002      	movs	r2, r0
 80111c4:	000b      	movs	r3, r1
 80111c6:	0020      	movs	r0, r4
 80111c8:	0029      	movs	r1, r5
 80111ca:	f7f0 fba5 	bl	8001918 <__aeabi_dadd>
 80111ce:	0004      	movs	r4, r0
 80111d0:	000d      	movs	r5, r1
 80111d2:	0020      	movs	r0, r4
 80111d4:	0029      	movs	r1, r5
 80111d6:	b007      	add	sp, #28
 80111d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80111da:	2d00      	cmp	r5, #0
 80111dc:	dc11      	bgt.n	8011202 <__ieee754_sqrt+0x62>
 80111de:	0069      	lsls	r1, r5, #1
 80111e0:	0849      	lsrs	r1, r1, #1
 80111e2:	4321      	orrs	r1, r4
 80111e4:	d0f5      	beq.n	80111d2 <__ieee754_sqrt+0x32>
 80111e6:	2000      	movs	r0, #0
 80111e8:	4285      	cmp	r5, r0
 80111ea:	d010      	beq.n	801120e <__ieee754_sqrt+0x6e>
 80111ec:	0022      	movs	r2, r4
 80111ee:	002b      	movs	r3, r5
 80111f0:	0020      	movs	r0, r4
 80111f2:	0029      	movs	r1, r5
 80111f4:	f7f1 fe76 	bl	8002ee4 <__aeabi_dsub>
 80111f8:	0002      	movs	r2, r0
 80111fa:	000b      	movs	r3, r1
 80111fc:	f7f0 ff52 	bl	80020a4 <__aeabi_ddiv>
 8011200:	e7e5      	b.n	80111ce <__ieee754_sqrt+0x2e>
 8011202:	1528      	asrs	r0, r5, #20
 8011204:	d115      	bne.n	8011232 <__ieee754_sqrt+0x92>
 8011206:	2480      	movs	r4, #128	@ 0x80
 8011208:	2100      	movs	r1, #0
 801120a:	0364      	lsls	r4, r4, #13
 801120c:	e007      	b.n	801121e <__ieee754_sqrt+0x7e>
 801120e:	0ada      	lsrs	r2, r3, #11
 8011210:	3815      	subs	r0, #21
 8011212:	055b      	lsls	r3, r3, #21
 8011214:	2a00      	cmp	r2, #0
 8011216:	d0fa      	beq.n	801120e <__ieee754_sqrt+0x6e>
 8011218:	e7f5      	b.n	8011206 <__ieee754_sqrt+0x66>
 801121a:	0052      	lsls	r2, r2, #1
 801121c:	3101      	adds	r1, #1
 801121e:	4222      	tst	r2, r4
 8011220:	d0fb      	beq.n	801121a <__ieee754_sqrt+0x7a>
 8011222:	1e4c      	subs	r4, r1, #1
 8011224:	1b00      	subs	r0, r0, r4
 8011226:	2420      	movs	r4, #32
 8011228:	001d      	movs	r5, r3
 801122a:	1a64      	subs	r4, r4, r1
 801122c:	40e5      	lsrs	r5, r4
 801122e:	408b      	lsls	r3, r1
 8011230:	432a      	orrs	r2, r5
 8011232:	4949      	ldr	r1, [pc, #292]	@ (8011358 <__ieee754_sqrt+0x1b8>)
 8011234:	0312      	lsls	r2, r2, #12
 8011236:	1844      	adds	r4, r0, r1
 8011238:	2180      	movs	r1, #128	@ 0x80
 801123a:	0b12      	lsrs	r2, r2, #12
 801123c:	0349      	lsls	r1, r1, #13
 801123e:	4311      	orrs	r1, r2
 8011240:	07c0      	lsls	r0, r0, #31
 8011242:	d403      	bmi.n	801124c <__ieee754_sqrt+0xac>
 8011244:	0fda      	lsrs	r2, r3, #31
 8011246:	0049      	lsls	r1, r1, #1
 8011248:	1851      	adds	r1, r2, r1
 801124a:	005b      	lsls	r3, r3, #1
 801124c:	2500      	movs	r5, #0
 801124e:	1062      	asrs	r2, r4, #1
 8011250:	0049      	lsls	r1, r1, #1
 8011252:	2480      	movs	r4, #128	@ 0x80
 8011254:	9205      	str	r2, [sp, #20]
 8011256:	0fda      	lsrs	r2, r3, #31
 8011258:	1852      	adds	r2, r2, r1
 801125a:	2016      	movs	r0, #22
 801125c:	0029      	movs	r1, r5
 801125e:	005b      	lsls	r3, r3, #1
 8011260:	03a4      	lsls	r4, r4, #14
 8011262:	190e      	adds	r6, r1, r4
 8011264:	4296      	cmp	r6, r2
 8011266:	dc02      	bgt.n	801126e <__ieee754_sqrt+0xce>
 8011268:	1931      	adds	r1, r6, r4
 801126a:	1b92      	subs	r2, r2, r6
 801126c:	192d      	adds	r5, r5, r4
 801126e:	0fde      	lsrs	r6, r3, #31
 8011270:	0052      	lsls	r2, r2, #1
 8011272:	3801      	subs	r0, #1
 8011274:	1992      	adds	r2, r2, r6
 8011276:	005b      	lsls	r3, r3, #1
 8011278:	0864      	lsrs	r4, r4, #1
 801127a:	2800      	cmp	r0, #0
 801127c:	d1f1      	bne.n	8011262 <__ieee754_sqrt+0xc2>
 801127e:	2620      	movs	r6, #32
 8011280:	2780      	movs	r7, #128	@ 0x80
 8011282:	0004      	movs	r4, r0
 8011284:	9604      	str	r6, [sp, #16]
 8011286:	063f      	lsls	r7, r7, #24
 8011288:	183e      	adds	r6, r7, r0
 801128a:	46b4      	mov	ip, r6
 801128c:	428a      	cmp	r2, r1
 801128e:	dc02      	bgt.n	8011296 <__ieee754_sqrt+0xf6>
 8011290:	d114      	bne.n	80112bc <__ieee754_sqrt+0x11c>
 8011292:	429e      	cmp	r6, r3
 8011294:	d812      	bhi.n	80112bc <__ieee754_sqrt+0x11c>
 8011296:	4660      	mov	r0, ip
 8011298:	4666      	mov	r6, ip
 801129a:	19c0      	adds	r0, r0, r7
 801129c:	9100      	str	r1, [sp, #0]
 801129e:	2e00      	cmp	r6, #0
 80112a0:	da03      	bge.n	80112aa <__ieee754_sqrt+0x10a>
 80112a2:	43c6      	mvns	r6, r0
 80112a4:	0ff6      	lsrs	r6, r6, #31
 80112a6:	198e      	adds	r6, r1, r6
 80112a8:	9600      	str	r6, [sp, #0]
 80112aa:	1a52      	subs	r2, r2, r1
 80112ac:	4563      	cmp	r3, ip
 80112ae:	4189      	sbcs	r1, r1
 80112b0:	4249      	negs	r1, r1
 80112b2:	1a52      	subs	r2, r2, r1
 80112b4:	4661      	mov	r1, ip
 80112b6:	1a5b      	subs	r3, r3, r1
 80112b8:	9900      	ldr	r1, [sp, #0]
 80112ba:	19e4      	adds	r4, r4, r7
 80112bc:	0fde      	lsrs	r6, r3, #31
 80112be:	0052      	lsls	r2, r2, #1
 80112c0:	1992      	adds	r2, r2, r6
 80112c2:	9e04      	ldr	r6, [sp, #16]
 80112c4:	005b      	lsls	r3, r3, #1
 80112c6:	3e01      	subs	r6, #1
 80112c8:	087f      	lsrs	r7, r7, #1
 80112ca:	9604      	str	r6, [sp, #16]
 80112cc:	2e00      	cmp	r6, #0
 80112ce:	d1db      	bne.n	8011288 <__ieee754_sqrt+0xe8>
 80112d0:	431a      	orrs	r2, r3
 80112d2:	d01f      	beq.n	8011314 <__ieee754_sqrt+0x174>
 80112d4:	4e21      	ldr	r6, [pc, #132]	@ (801135c <__ieee754_sqrt+0x1bc>)
 80112d6:	4f22      	ldr	r7, [pc, #136]	@ (8011360 <__ieee754_sqrt+0x1c0>)
 80112d8:	6830      	ldr	r0, [r6, #0]
 80112da:	6871      	ldr	r1, [r6, #4]
 80112dc:	683a      	ldr	r2, [r7, #0]
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	9200      	str	r2, [sp, #0]
 80112e2:	9301      	str	r3, [sp, #4]
 80112e4:	6832      	ldr	r2, [r6, #0]
 80112e6:	6873      	ldr	r3, [r6, #4]
 80112e8:	9202      	str	r2, [sp, #8]
 80112ea:	9303      	str	r3, [sp, #12]
 80112ec:	9a00      	ldr	r2, [sp, #0]
 80112ee:	9b01      	ldr	r3, [sp, #4]
 80112f0:	f7f1 fdf8 	bl	8002ee4 <__aeabi_dsub>
 80112f4:	0002      	movs	r2, r0
 80112f6:	000b      	movs	r3, r1
 80112f8:	9802      	ldr	r0, [sp, #8]
 80112fa:	9903      	ldr	r1, [sp, #12]
 80112fc:	f7ef f8c0 	bl	8000480 <__aeabi_dcmple>
 8011300:	2800      	cmp	r0, #0
 8011302:	d007      	beq.n	8011314 <__ieee754_sqrt+0x174>
 8011304:	6830      	ldr	r0, [r6, #0]
 8011306:	6871      	ldr	r1, [r6, #4]
 8011308:	683a      	ldr	r2, [r7, #0]
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	1c67      	adds	r7, r4, #1
 801130e:	d10c      	bne.n	801132a <__ieee754_sqrt+0x18a>
 8011310:	9c04      	ldr	r4, [sp, #16]
 8011312:	3501      	adds	r5, #1
 8011314:	4a13      	ldr	r2, [pc, #76]	@ (8011364 <__ieee754_sqrt+0x1c4>)
 8011316:	106b      	asrs	r3, r5, #1
 8011318:	189b      	adds	r3, r3, r2
 801131a:	9a05      	ldr	r2, [sp, #20]
 801131c:	07ed      	lsls	r5, r5, #31
 801131e:	0864      	lsrs	r4, r4, #1
 8011320:	0512      	lsls	r2, r2, #20
 8011322:	4325      	orrs	r5, r4
 8011324:	0028      	movs	r0, r5
 8011326:	18d1      	adds	r1, r2, r3
 8011328:	e751      	b.n	80111ce <__ieee754_sqrt+0x2e>
 801132a:	f7f0 faf5 	bl	8001918 <__aeabi_dadd>
 801132e:	6877      	ldr	r7, [r6, #4]
 8011330:	6836      	ldr	r6, [r6, #0]
 8011332:	0002      	movs	r2, r0
 8011334:	000b      	movs	r3, r1
 8011336:	0030      	movs	r0, r6
 8011338:	0039      	movs	r1, r7
 801133a:	f7ef f897 	bl	800046c <__aeabi_dcmplt>
 801133e:	2800      	cmp	r0, #0
 8011340:	d004      	beq.n	801134c <__ieee754_sqrt+0x1ac>
 8011342:	3402      	adds	r4, #2
 8011344:	4263      	negs	r3, r4
 8011346:	4163      	adcs	r3, r4
 8011348:	18ed      	adds	r5, r5, r3
 801134a:	e7e3      	b.n	8011314 <__ieee754_sqrt+0x174>
 801134c:	2301      	movs	r3, #1
 801134e:	3401      	adds	r4, #1
 8011350:	439c      	bics	r4, r3
 8011352:	e7df      	b.n	8011314 <__ieee754_sqrt+0x174>
 8011354:	7ff00000 	.word	0x7ff00000
 8011358:	fffffc01 	.word	0xfffffc01
 801135c:	0801c5d8 	.word	0x0801c5d8
 8011360:	0801c5d0 	.word	0x0801c5d0
 8011364:	3fe00000 	.word	0x3fe00000

08011368 <__ieee754_fmod>:
 8011368:	b5f0      	push	{r4, r5, r6, r7, lr}
 801136a:	b087      	sub	sp, #28
 801136c:	9200      	str	r2, [sp, #0]
 801136e:	9301      	str	r3, [sp, #4]
 8011370:	9b01      	ldr	r3, [sp, #4]
 8011372:	9e00      	ldr	r6, [sp, #0]
 8011374:	005c      	lsls	r4, r3, #1
 8011376:	0863      	lsrs	r3, r4, #1
 8011378:	001c      	movs	r4, r3
 801137a:	469c      	mov	ip, r3
 801137c:	9604      	str	r6, [sp, #16]
 801137e:	4334      	orrs	r4, r6
 8011380:	d00d      	beq.n	801139e <__ieee754_fmod+0x36>
 8011382:	4d7b      	ldr	r5, [pc, #492]	@ (8011570 <__ieee754_fmod+0x208>)
 8011384:	004c      	lsls	r4, r1, #1
 8011386:	9105      	str	r1, [sp, #20]
 8011388:	0864      	lsrs	r4, r4, #1
 801138a:	42ac      	cmp	r4, r5
 801138c:	d807      	bhi.n	801139e <__ieee754_fmod+0x36>
 801138e:	4663      	mov	r3, ip
 8011390:	4275      	negs	r5, r6
 8011392:	4335      	orrs	r5, r6
 8011394:	0fed      	lsrs	r5, r5, #31
 8011396:	431d      	orrs	r5, r3
 8011398:	4b76      	ldr	r3, [pc, #472]	@ (8011574 <__ieee754_fmod+0x20c>)
 801139a:	429d      	cmp	r5, r3
 801139c:	d909      	bls.n	80113b2 <__ieee754_fmod+0x4a>
 801139e:	9a00      	ldr	r2, [sp, #0]
 80113a0:	9b01      	ldr	r3, [sp, #4]
 80113a2:	f7f1 fab9 	bl	8002918 <__aeabi_dmul>
 80113a6:	0002      	movs	r2, r0
 80113a8:	000b      	movs	r3, r1
 80113aa:	f7f0 fe7b 	bl	80020a4 <__aeabi_ddiv>
 80113ae:	b007      	add	sp, #28
 80113b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80113b2:	9b05      	ldr	r3, [sp, #20]
 80113b4:	0007      	movs	r7, r0
 80113b6:	0fdb      	lsrs	r3, r3, #31
 80113b8:	07db      	lsls	r3, r3, #31
 80113ba:	0005      	movs	r5, r0
 80113bc:	9303      	str	r3, [sp, #12]
 80113be:	4564      	cmp	r4, ip
 80113c0:	dc0a      	bgt.n	80113d8 <__ieee754_fmod+0x70>
 80113c2:	dbf4      	blt.n	80113ae <__ieee754_fmod+0x46>
 80113c4:	4286      	cmp	r6, r0
 80113c6:	d8f2      	bhi.n	80113ae <__ieee754_fmod+0x46>
 80113c8:	d106      	bne.n	80113d8 <__ieee754_fmod+0x70>
 80113ca:	9a03      	ldr	r2, [sp, #12]
 80113cc:	4b6a      	ldr	r3, [pc, #424]	@ (8011578 <__ieee754_fmod+0x210>)
 80113ce:	0f12      	lsrs	r2, r2, #28
 80113d0:	189b      	adds	r3, r3, r2
 80113d2:	6818      	ldr	r0, [r3, #0]
 80113d4:	6859      	ldr	r1, [r3, #4]
 80113d6:	e7ea      	b.n	80113ae <__ieee754_fmod+0x46>
 80113d8:	9b05      	ldr	r3, [sp, #20]
 80113da:	4a66      	ldr	r2, [pc, #408]	@ (8011574 <__ieee754_fmod+0x20c>)
 80113dc:	4213      	tst	r3, r2
 80113de:	d14e      	bne.n	801147e <__ieee754_fmod+0x116>
 80113e0:	2c00      	cmp	r4, #0
 80113e2:	d145      	bne.n	8011470 <__ieee754_fmod+0x108>
 80113e4:	0039      	movs	r1, r7
 80113e6:	4865      	ldr	r0, [pc, #404]	@ (801157c <__ieee754_fmod+0x214>)
 80113e8:	2900      	cmp	r1, #0
 80113ea:	dc3e      	bgt.n	801146a <__ieee754_fmod+0x102>
 80113ec:	4b61      	ldr	r3, [pc, #388]	@ (8011574 <__ieee754_fmod+0x20c>)
 80113ee:	9a01      	ldr	r2, [sp, #4]
 80113f0:	4213      	tst	r3, r2
 80113f2:	d152      	bne.n	801149a <__ieee754_fmod+0x132>
 80113f4:	4663      	mov	r3, ip
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d148      	bne.n	801148c <__ieee754_fmod+0x124>
 80113fa:	4960      	ldr	r1, [pc, #384]	@ (801157c <__ieee754_fmod+0x214>)
 80113fc:	2e00      	cmp	r6, #0
 80113fe:	dc42      	bgt.n	8011486 <__ieee754_fmod+0x11e>
 8011400:	4e5f      	ldr	r6, [pc, #380]	@ (8011580 <__ieee754_fmod+0x218>)
 8011402:	42b0      	cmp	r0, r6
 8011404:	db4e      	blt.n	80114a4 <__ieee754_fmod+0x13c>
 8011406:	2480      	movs	r4, #128	@ 0x80
 8011408:	9b05      	ldr	r3, [sp, #20]
 801140a:	0364      	lsls	r4, r4, #13
 801140c:	031f      	lsls	r7, r3, #12
 801140e:	0b3f      	lsrs	r7, r7, #12
 8011410:	433c      	orrs	r4, r7
 8011412:	42b1      	cmp	r1, r6
 8011414:	db5a      	blt.n	80114cc <__ieee754_fmod+0x164>
 8011416:	2280      	movs	r2, #128	@ 0x80
 8011418:	9b01      	ldr	r3, [sp, #4]
 801141a:	0352      	lsls	r2, r2, #13
 801141c:	031b      	lsls	r3, r3, #12
 801141e:	0b1b      	lsrs	r3, r3, #12
 8011420:	431a      	orrs	r2, r3
 8011422:	4694      	mov	ip, r2
 8011424:	1a40      	subs	r0, r0, r1
 8011426:	4663      	mov	r3, ip
 8011428:	9a04      	ldr	r2, [sp, #16]
 801142a:	1ae3      	subs	r3, r4, r3
 801142c:	1aaa      	subs	r2, r5, r2
 801142e:	2800      	cmp	r0, #0
 8011430:	d166      	bne.n	8011500 <__ieee754_fmod+0x198>
 8011432:	9804      	ldr	r0, [sp, #16]
 8011434:	4285      	cmp	r5, r0
 8011436:	4180      	sbcs	r0, r0
 8011438:	4240      	negs	r0, r0
 801143a:	1a1b      	subs	r3, r3, r0
 801143c:	d501      	bpl.n	8011442 <__ieee754_fmod+0xda>
 801143e:	002a      	movs	r2, r5
 8011440:	0023      	movs	r3, r4
 8011442:	0018      	movs	r0, r3
 8011444:	4310      	orrs	r0, r2
 8011446:	d0c0      	beq.n	80113ca <__ieee754_fmod+0x62>
 8011448:	2080      	movs	r0, #128	@ 0x80
 801144a:	0340      	lsls	r0, r0, #13
 801144c:	4283      	cmp	r3, r0
 801144e:	db6c      	blt.n	801152a <__ieee754_fmod+0x1c2>
 8011450:	42b1      	cmp	r1, r6
 8011452:	db70      	blt.n	8011536 <__ieee754_fmod+0x1ce>
 8011454:	484b      	ldr	r0, [pc, #300]	@ (8011584 <__ieee754_fmod+0x21c>)
 8011456:	181b      	adds	r3, r3, r0
 8011458:	9803      	ldr	r0, [sp, #12]
 801145a:	4303      	orrs	r3, r0
 801145c:	484a      	ldr	r0, [pc, #296]	@ (8011588 <__ieee754_fmod+0x220>)
 801145e:	1809      	adds	r1, r1, r0
 8011460:	050c      	lsls	r4, r1, #20
 8011462:	4323      	orrs	r3, r4
 8011464:	0019      	movs	r1, r3
 8011466:	0010      	movs	r0, r2
 8011468:	e7a1      	b.n	80113ae <__ieee754_fmod+0x46>
 801146a:	3801      	subs	r0, #1
 801146c:	0049      	lsls	r1, r1, #1
 801146e:	e7bb      	b.n	80113e8 <__ieee754_fmod+0x80>
 8011470:	4843      	ldr	r0, [pc, #268]	@ (8011580 <__ieee754_fmod+0x218>)
 8011472:	02e1      	lsls	r1, r4, #11
 8011474:	2900      	cmp	r1, #0
 8011476:	ddb9      	ble.n	80113ec <__ieee754_fmod+0x84>
 8011478:	3801      	subs	r0, #1
 801147a:	0049      	lsls	r1, r1, #1
 801147c:	e7fa      	b.n	8011474 <__ieee754_fmod+0x10c>
 801147e:	4b43      	ldr	r3, [pc, #268]	@ (801158c <__ieee754_fmod+0x224>)
 8011480:	1520      	asrs	r0, r4, #20
 8011482:	18c0      	adds	r0, r0, r3
 8011484:	e7b2      	b.n	80113ec <__ieee754_fmod+0x84>
 8011486:	3901      	subs	r1, #1
 8011488:	0076      	lsls	r6, r6, #1
 801148a:	e7b7      	b.n	80113fc <__ieee754_fmod+0x94>
 801148c:	493c      	ldr	r1, [pc, #240]	@ (8011580 <__ieee754_fmod+0x218>)
 801148e:	02de      	lsls	r6, r3, #11
 8011490:	2e00      	cmp	r6, #0
 8011492:	ddb5      	ble.n	8011400 <__ieee754_fmod+0x98>
 8011494:	3901      	subs	r1, #1
 8011496:	0076      	lsls	r6, r6, #1
 8011498:	e7fa      	b.n	8011490 <__ieee754_fmod+0x128>
 801149a:	4663      	mov	r3, ip
 801149c:	1519      	asrs	r1, r3, #20
 801149e:	4b3b      	ldr	r3, [pc, #236]	@ (801158c <__ieee754_fmod+0x224>)
 80114a0:	18c9      	adds	r1, r1, r3
 80114a2:	e7ad      	b.n	8011400 <__ieee754_fmod+0x98>
 80114a4:	1a35      	subs	r5, r6, r0
 80114a6:	2d1f      	cmp	r5, #31
 80114a8:	dc0a      	bgt.n	80114c0 <__ieee754_fmod+0x158>
 80114aa:	40ac      	lsls	r4, r5
 80114ac:	4b38      	ldr	r3, [pc, #224]	@ (8011590 <__ieee754_fmod+0x228>)
 80114ae:	0022      	movs	r2, r4
 80114b0:	18c4      	adds	r4, r0, r3
 80114b2:	003b      	movs	r3, r7
 80114b4:	40e3      	lsrs	r3, r4
 80114b6:	40af      	lsls	r7, r5
 80114b8:	001c      	movs	r4, r3
 80114ba:	003d      	movs	r5, r7
 80114bc:	4314      	orrs	r4, r2
 80114be:	e7a8      	b.n	8011412 <__ieee754_fmod+0xaa>
 80114c0:	4c34      	ldr	r4, [pc, #208]	@ (8011594 <__ieee754_fmod+0x22c>)
 80114c2:	2500      	movs	r5, #0
 80114c4:	1a24      	subs	r4, r4, r0
 80114c6:	40a7      	lsls	r7, r4
 80114c8:	003c      	movs	r4, r7
 80114ca:	e7a2      	b.n	8011412 <__ieee754_fmod+0xaa>
 80114cc:	1a77      	subs	r7, r6, r1
 80114ce:	2f1f      	cmp	r7, #31
 80114d0:	dc0f      	bgt.n	80114f2 <__ieee754_fmod+0x18a>
 80114d2:	4663      	mov	r3, ip
 80114d4:	4a2e      	ldr	r2, [pc, #184]	@ (8011590 <__ieee754_fmod+0x228>)
 80114d6:	40bb      	lsls	r3, r7
 80114d8:	4694      	mov	ip, r2
 80114da:	448c      	add	ip, r1
 80114dc:	9304      	str	r3, [sp, #16]
 80114de:	4663      	mov	r3, ip
 80114e0:	9a00      	ldr	r2, [sp, #0]
 80114e2:	40da      	lsrs	r2, r3
 80114e4:	9b04      	ldr	r3, [sp, #16]
 80114e6:	431a      	orrs	r2, r3
 80114e8:	9b00      	ldr	r3, [sp, #0]
 80114ea:	4694      	mov	ip, r2
 80114ec:	40bb      	lsls	r3, r7
 80114ee:	9304      	str	r3, [sp, #16]
 80114f0:	e798      	b.n	8011424 <__ieee754_fmod+0xbc>
 80114f2:	4b28      	ldr	r3, [pc, #160]	@ (8011594 <__ieee754_fmod+0x22c>)
 80114f4:	9a00      	ldr	r2, [sp, #0]
 80114f6:	1a5b      	subs	r3, r3, r1
 80114f8:	409a      	lsls	r2, r3
 80114fa:	2300      	movs	r3, #0
 80114fc:	4694      	mov	ip, r2
 80114fe:	e7f6      	b.n	80114ee <__ieee754_fmod+0x186>
 8011500:	9f04      	ldr	r7, [sp, #16]
 8011502:	42bd      	cmp	r5, r7
 8011504:	41bf      	sbcs	r7, r7
 8011506:	427f      	negs	r7, r7
 8011508:	1bdb      	subs	r3, r3, r7
 801150a:	d505      	bpl.n	8011518 <__ieee754_fmod+0x1b0>
 801150c:	0feb      	lsrs	r3, r5, #31
 801150e:	0064      	lsls	r4, r4, #1
 8011510:	18e4      	adds	r4, r4, r3
 8011512:	006d      	lsls	r5, r5, #1
 8011514:	3801      	subs	r0, #1
 8011516:	e786      	b.n	8011426 <__ieee754_fmod+0xbe>
 8011518:	001c      	movs	r4, r3
 801151a:	4314      	orrs	r4, r2
 801151c:	d100      	bne.n	8011520 <__ieee754_fmod+0x1b8>
 801151e:	e754      	b.n	80113ca <__ieee754_fmod+0x62>
 8011520:	005b      	lsls	r3, r3, #1
 8011522:	0fd4      	lsrs	r4, r2, #31
 8011524:	191c      	adds	r4, r3, r4
 8011526:	0055      	lsls	r5, r2, #1
 8011528:	e7f4      	b.n	8011514 <__ieee754_fmod+0x1ac>
 801152a:	0fd4      	lsrs	r4, r2, #31
 801152c:	005b      	lsls	r3, r3, #1
 801152e:	191b      	adds	r3, r3, r4
 8011530:	0052      	lsls	r2, r2, #1
 8011532:	3901      	subs	r1, #1
 8011534:	e78a      	b.n	801144c <__ieee754_fmod+0xe4>
 8011536:	1a76      	subs	r6, r6, r1
 8011538:	2e14      	cmp	r6, #20
 801153a:	dc0b      	bgt.n	8011554 <__ieee754_fmod+0x1ec>
 801153c:	40f2      	lsrs	r2, r6
 801153e:	0010      	movs	r0, r2
 8011540:	4a13      	ldr	r2, [pc, #76]	@ (8011590 <__ieee754_fmod+0x228>)
 8011542:	1889      	adds	r1, r1, r2
 8011544:	001a      	movs	r2, r3
 8011546:	408a      	lsls	r2, r1
 8011548:	4133      	asrs	r3, r6
 801154a:	4302      	orrs	r2, r0
 801154c:	9c03      	ldr	r4, [sp, #12]
 801154e:	431c      	orrs	r4, r3
 8011550:	0021      	movs	r1, r4
 8011552:	e788      	b.n	8011466 <__ieee754_fmod+0xfe>
 8011554:	2e1f      	cmp	r6, #31
 8011556:	dc06      	bgt.n	8011566 <__ieee754_fmod+0x1fe>
 8011558:	480d      	ldr	r0, [pc, #52]	@ (8011590 <__ieee754_fmod+0x228>)
 801155a:	40f2      	lsrs	r2, r6
 801155c:	1809      	adds	r1, r1, r0
 801155e:	408b      	lsls	r3, r1
 8011560:	431a      	orrs	r2, r3
 8011562:	9b03      	ldr	r3, [sp, #12]
 8011564:	e7f2      	b.n	801154c <__ieee754_fmod+0x1e4>
 8011566:	4a0b      	ldr	r2, [pc, #44]	@ (8011594 <__ieee754_fmod+0x22c>)
 8011568:	1a52      	subs	r2, r2, r1
 801156a:	4113      	asrs	r3, r2
 801156c:	001a      	movs	r2, r3
 801156e:	e7f8      	b.n	8011562 <__ieee754_fmod+0x1fa>
 8011570:	7fefffff 	.word	0x7fefffff
 8011574:	7ff00000 	.word	0x7ff00000
 8011578:	0801c5e0 	.word	0x0801c5e0
 801157c:	fffffbed 	.word	0xfffffbed
 8011580:	fffffc02 	.word	0xfffffc02
 8011584:	fff00000 	.word	0xfff00000
 8011588:	000003ff 	.word	0x000003ff
 801158c:	fffffc01 	.word	0xfffffc01
 8011590:	0000041e 	.word	0x0000041e
 8011594:	fffffbe2 	.word	0xfffffbe2

08011598 <_init>:
 8011598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801159a:	46c0      	nop			@ (mov r8, r8)
 801159c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801159e:	bc08      	pop	{r3}
 80115a0:	469e      	mov	lr, r3
 80115a2:	4770      	bx	lr

080115a4 <_fini>:
 80115a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80115a6:	46c0      	nop			@ (mov r8, r8)
 80115a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80115aa:	bc08      	pop	{r3}
 80115ac:	469e      	mov	lr, r3
 80115ae:	4770      	bx	lr

080115b0 <__FLASH_Program_Fast_veneer>:
 80115b0:	b401      	push	{r0}
 80115b2:	4802      	ldr	r0, [pc, #8]	@ (80115bc <__FLASH_Program_Fast_veneer+0xc>)
 80115b4:	4684      	mov	ip, r0
 80115b6:	bc01      	pop	{r0}
 80115b8:	4760      	bx	ip
 80115ba:	bf00      	nop
 80115bc:	200001d9 	.word	0x200001d9

Disassembly of section .data:

20000000 <checkTime>:
20000000:	                                         ..

20000002 <currentMenu>:
20000002:	                                         .

20000003 <canChange>:
20000003:	                                         .

20000004 <SystemCoreClock>:
20000004:	00f42400                                .$..

20000008 <uwTickPrio>:
20000008:	00000004                                ....

2000000c <uwTickFreq>:
2000000c:	00000001                                ....

20000010 <__sglue>:
20000010:	00000000 00000003 200014f8              ........... 

2000001c <__global_locale>:
2000001c:	00000043 00000000 00000000 00000000     C...............
	...
2000003c:	00000043 00000000 00000000 00000000     C...............
	...
2000005c:	00000043 00000000 00000000 00000000     C...............
	...
2000007c:	00000043 00000000 00000000 00000000     C...............
	...
2000009c:	00000043 00000000 00000000 00000000     C...............
	...
200000bc:	00000043 00000000 00000000 00000000     C...............
	...
200000dc:	00000043 00000000 00000000 00000000     C...............
	...
200000fc:	080102a9 0800f8e1 00000000 0801c3d0     ................
2000010c:	0801c214 0801c379 0801c379 0801c379     ....y...y...y...
2000011c:	0801c379 0801c379 0801c379 0801c379     y...y...y...y...
2000012c:	0801c379 0801c379 ffffffff ffffffff     y...y...........
2000013c:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
20000164:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

20000188 <_impure_ptr>:
20000188:	2000018c                                ... 

2000018c <_impure_data>:
2000018c:	00000000 200014f8 20001560 200015c8     ....... `.. ... 
	...

200001d8 <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
200001d8:	b580      	push	{r7, lr}
200001da:	b088      	sub	sp, #32
200001dc:	af00      	add	r7, sp, #0
200001de:	6078      	str	r0, [r7, #4]
200001e0:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
200001e2:	231f      	movs	r3, #31
200001e4:	18fb      	adds	r3, r7, r3
200001e6:	2200      	movs	r2, #0
200001e8:	701a      	strb	r2, [r3, #0]
  uint32_t dest = Address;
200001ea:	687b      	ldr	r3, [r7, #4]
200001ec:	61bb      	str	r3, [r7, #24]
  uint32_t src = DataAddress;
200001ee:	683b      	ldr	r3, [r7, #0]
200001f0:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
200001f2:	4b1a      	ldr	r3, [pc, #104]	@ (2000025c <FLASH_Program_Fast+0x84>)
200001f4:	695a      	ldr	r2, [r3, #20]
200001f6:	4b19      	ldr	r3, [pc, #100]	@ (2000025c <FLASH_Program_Fast+0x84>)
200001f8:	2180      	movs	r1, #128	@ 0x80
200001fa:	02c9      	lsls	r1, r1, #11
200001fc:	430a      	orrs	r2, r1
200001fe:	615a      	str	r2, [r3, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
20000200:	f3ef 8310 	mrs	r3, PRIMASK
20000204:	60fb      	str	r3, [r7, #12]
  return(result);
20000206:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
20000208:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
2000020a:	b672      	cpsid	i
}
2000020c:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();

  /* Fast Program : 64 words */
  while (index < 64U)
2000020e:	e00f      	b.n	20000230 <FLASH_Program_Fast+0x58>
  {
    *(uint32_t *)dest = *(uint32_t *)src;
20000210:	697a      	ldr	r2, [r7, #20]
20000212:	69bb      	ldr	r3, [r7, #24]
20000214:	6812      	ldr	r2, [r2, #0]
20000216:	601a      	str	r2, [r3, #0]
    src += 4U;
20000218:	697b      	ldr	r3, [r7, #20]
2000021a:	3304      	adds	r3, #4
2000021c:	617b      	str	r3, [r7, #20]
    dest += 4U;
2000021e:	69bb      	ldr	r3, [r7, #24]
20000220:	3304      	adds	r3, #4
20000222:	61bb      	str	r3, [r7, #24]
    index++;
20000224:	211f      	movs	r1, #31
20000226:	187b      	adds	r3, r7, r1
20000228:	781a      	ldrb	r2, [r3, #0]
2000022a:	187b      	adds	r3, r7, r1
2000022c:	3201      	adds	r2, #1
2000022e:	701a      	strb	r2, [r3, #0]
  while (index < 64U)
20000230:	231f      	movs	r3, #31
20000232:	18fb      	adds	r3, r7, r3
20000234:	781b      	ldrb	r3, [r3, #0]
20000236:	2b3f      	cmp	r3, #63	@ 0x3f
20000238:	d9ea      	bls.n	20000210 <FLASH_Program_Fast+0x38>
  /* wait for BSY1 in order to be sure that flash operation is ended befoire
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */

#if defined(FLASH_DBANK_SUPPORT)
  while ((FLASH->SR & (FLASH_SR_BSY1 | FLASH_SR_BSY2)) != 0x00U)
2000023a:	46c0      	nop			@ (mov r8, r8)
2000023c:	4b07      	ldr	r3, [pc, #28]	@ (2000025c <FLASH_Program_Fast+0x84>)
2000023e:	691a      	ldr	r2, [r3, #16]
20000240:	23c0      	movs	r3, #192	@ 0xc0
20000242:	029b      	lsls	r3, r3, #10
20000244:	4013      	ands	r3, r2
20000246:	d1f9      	bne.n	2000023c <FLASH_Program_Fast+0x64>
20000248:	693b      	ldr	r3, [r7, #16]
2000024a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
2000024c:	68bb      	ldr	r3, [r7, #8]
2000024e:	f383 8810 	msr	PRIMASK, r3
}
20000252:	46c0      	nop			@ (mov r8, r8)
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
20000254:	46c0      	nop			@ (mov r8, r8)
20000256:	46bd      	mov	sp, r7
20000258:	b008      	add	sp, #32
2000025a:	bd80      	pop	{r7, pc}
2000025c:	40022000 	.word	0x40022000
