
ynotag.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000111a8  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f38  08011268  08011268  00012268  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080121a0  080121a0  00014f0c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080121a0  080121a0  000131a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080121a8  080121a8  00014f0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080121a8  080121a8  000131a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080121ac  080121ac  000131ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000f0c  20000000  080121b0  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013f4  20000f0c  080130bc  00014f0c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002300  080130bc  00015300  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00014f0c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cbde  00000000  00000000  00014f34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a33  00000000  00000000  00031b12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a68  00000000  00000000  00035548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001568  00000000  00000000  00036fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020377  00000000  00000000  00038518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000202af  00000000  00000000  0005888f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cbddd  00000000  00000000  00078b3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014491b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000798c  00000000  00000000  00144960  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000085  00000000  00000000  0014c2ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000f0c 	.word	0x20000f0c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0801124c 	.word	0x0801124c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000f10 	.word	0x20000f10
 8000100:	0801124c 	.word	0x0801124c

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <strlen>:
 8000118:	2300      	movs	r3, #0
 800011a:	5cc2      	ldrb	r2, [r0, r3]
 800011c:	3301      	adds	r3, #1
 800011e:	2a00      	cmp	r2, #0
 8000120:	d1fb      	bne.n	800011a <strlen+0x2>
 8000122:	1e58      	subs	r0, r3, #1
 8000124:	4770      	bx	lr
	...

08000128 <__gnu_thumb1_case_uqi>:
 8000128:	b402      	push	{r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	5c09      	ldrb	r1, [r1, r0]
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	448e      	add	lr, r1
 8000136:	bc02      	pop	{r1}
 8000138:	4770      	bx	lr
 800013a:	46c0      	nop			@ (mov r8, r8)

0800013c <__gnu_thumb1_case_shi>:
 800013c:	b403      	push	{r0, r1}
 800013e:	4671      	mov	r1, lr
 8000140:	0849      	lsrs	r1, r1, #1
 8000142:	0040      	lsls	r0, r0, #1
 8000144:	0049      	lsls	r1, r1, #1
 8000146:	5e09      	ldrsh	r1, [r1, r0]
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	448e      	add	lr, r1
 800014c:	bc03      	pop	{r0, r1}
 800014e:	4770      	bx	lr

08000150 <__udivsi3>:
 8000150:	2200      	movs	r2, #0
 8000152:	0843      	lsrs	r3, r0, #1
 8000154:	428b      	cmp	r3, r1
 8000156:	d374      	bcc.n	8000242 <__udivsi3+0xf2>
 8000158:	0903      	lsrs	r3, r0, #4
 800015a:	428b      	cmp	r3, r1
 800015c:	d35f      	bcc.n	800021e <__udivsi3+0xce>
 800015e:	0a03      	lsrs	r3, r0, #8
 8000160:	428b      	cmp	r3, r1
 8000162:	d344      	bcc.n	80001ee <__udivsi3+0x9e>
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d328      	bcc.n	80001bc <__udivsi3+0x6c>
 800016a:	0c03      	lsrs	r3, r0, #16
 800016c:	428b      	cmp	r3, r1
 800016e:	d30d      	bcc.n	800018c <__udivsi3+0x3c>
 8000170:	22ff      	movs	r2, #255	@ 0xff
 8000172:	0209      	lsls	r1, r1, #8
 8000174:	ba12      	rev	r2, r2
 8000176:	0c03      	lsrs	r3, r0, #16
 8000178:	428b      	cmp	r3, r1
 800017a:	d302      	bcc.n	8000182 <__udivsi3+0x32>
 800017c:	1212      	asrs	r2, r2, #8
 800017e:	0209      	lsls	r1, r1, #8
 8000180:	d065      	beq.n	800024e <__udivsi3+0xfe>
 8000182:	0b03      	lsrs	r3, r0, #12
 8000184:	428b      	cmp	r3, r1
 8000186:	d319      	bcc.n	80001bc <__udivsi3+0x6c>
 8000188:	e000      	b.n	800018c <__udivsi3+0x3c>
 800018a:	0a09      	lsrs	r1, r1, #8
 800018c:	0bc3      	lsrs	r3, r0, #15
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x46>
 8000192:	03cb      	lsls	r3, r1, #15
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b83      	lsrs	r3, r0, #14
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x52>
 800019e:	038b      	lsls	r3, r1, #14
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0b43      	lsrs	r3, r0, #13
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x5e>
 80001aa:	034b      	lsls	r3, r1, #13
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0b03      	lsrs	r3, r0, #12
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x6a>
 80001b6:	030b      	lsls	r3, r1, #12
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0ac3      	lsrs	r3, r0, #11
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x76>
 80001c2:	02cb      	lsls	r3, r1, #11
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a83      	lsrs	r3, r0, #10
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x82>
 80001ce:	028b      	lsls	r3, r1, #10
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0a43      	lsrs	r3, r0, #9
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x8e>
 80001da:	024b      	lsls	r3, r1, #9
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	0a03      	lsrs	r3, r0, #8
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x9a>
 80001e6:	020b      	lsls	r3, r1, #8
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	d2cd      	bcs.n	800018a <__udivsi3+0x3a>
 80001ee:	09c3      	lsrs	r3, r0, #7
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xa8>
 80001f4:	01cb      	lsls	r3, r1, #7
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0983      	lsrs	r3, r0, #6
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xb4>
 8000200:	018b      	lsls	r3, r1, #6
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0943      	lsrs	r3, r0, #5
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xc0>
 800020c:	014b      	lsls	r3, r1, #5
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0903      	lsrs	r3, r0, #4
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xcc>
 8000218:	010b      	lsls	r3, r1, #4
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	08c3      	lsrs	r3, r0, #3
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xd8>
 8000224:	00cb      	lsls	r3, r1, #3
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0883      	lsrs	r3, r0, #2
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xe4>
 8000230:	008b      	lsls	r3, r1, #2
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	0843      	lsrs	r3, r0, #1
 8000238:	428b      	cmp	r3, r1
 800023a:	d301      	bcc.n	8000240 <__udivsi3+0xf0>
 800023c:	004b      	lsls	r3, r1, #1
 800023e:	1ac0      	subs	r0, r0, r3
 8000240:	4152      	adcs	r2, r2
 8000242:	1a41      	subs	r1, r0, r1
 8000244:	d200      	bcs.n	8000248 <__udivsi3+0xf8>
 8000246:	4601      	mov	r1, r0
 8000248:	4152      	adcs	r2, r2
 800024a:	4610      	mov	r0, r2
 800024c:	4770      	bx	lr
 800024e:	e7ff      	b.n	8000250 <__udivsi3+0x100>
 8000250:	b501      	push	{r0, lr}
 8000252:	2000      	movs	r0, #0
 8000254:	f000 f8f0 	bl	8000438 <__aeabi_idiv0>
 8000258:	bd02      	pop	{r1, pc}
 800025a:	46c0      	nop			@ (mov r8, r8)

0800025c <__aeabi_uidivmod>:
 800025c:	2900      	cmp	r1, #0
 800025e:	d0f7      	beq.n	8000250 <__udivsi3+0x100>
 8000260:	e776      	b.n	8000150 <__udivsi3>
 8000262:	4770      	bx	lr

08000264 <__divsi3>:
 8000264:	4603      	mov	r3, r0
 8000266:	430b      	orrs	r3, r1
 8000268:	d47f      	bmi.n	800036a <__divsi3+0x106>
 800026a:	2200      	movs	r2, #0
 800026c:	0843      	lsrs	r3, r0, #1
 800026e:	428b      	cmp	r3, r1
 8000270:	d374      	bcc.n	800035c <__divsi3+0xf8>
 8000272:	0903      	lsrs	r3, r0, #4
 8000274:	428b      	cmp	r3, r1
 8000276:	d35f      	bcc.n	8000338 <__divsi3+0xd4>
 8000278:	0a03      	lsrs	r3, r0, #8
 800027a:	428b      	cmp	r3, r1
 800027c:	d344      	bcc.n	8000308 <__divsi3+0xa4>
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d328      	bcc.n	80002d6 <__divsi3+0x72>
 8000284:	0c03      	lsrs	r3, r0, #16
 8000286:	428b      	cmp	r3, r1
 8000288:	d30d      	bcc.n	80002a6 <__divsi3+0x42>
 800028a:	22ff      	movs	r2, #255	@ 0xff
 800028c:	0209      	lsls	r1, r1, #8
 800028e:	ba12      	rev	r2, r2
 8000290:	0c03      	lsrs	r3, r0, #16
 8000292:	428b      	cmp	r3, r1
 8000294:	d302      	bcc.n	800029c <__divsi3+0x38>
 8000296:	1212      	asrs	r2, r2, #8
 8000298:	0209      	lsls	r1, r1, #8
 800029a:	d065      	beq.n	8000368 <__divsi3+0x104>
 800029c:	0b03      	lsrs	r3, r0, #12
 800029e:	428b      	cmp	r3, r1
 80002a0:	d319      	bcc.n	80002d6 <__divsi3+0x72>
 80002a2:	e000      	b.n	80002a6 <__divsi3+0x42>
 80002a4:	0a09      	lsrs	r1, r1, #8
 80002a6:	0bc3      	lsrs	r3, r0, #15
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x4c>
 80002ac:	03cb      	lsls	r3, r1, #15
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b83      	lsrs	r3, r0, #14
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x58>
 80002b8:	038b      	lsls	r3, r1, #14
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0b43      	lsrs	r3, r0, #13
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x64>
 80002c4:	034b      	lsls	r3, r1, #13
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0b03      	lsrs	r3, r0, #12
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x70>
 80002d0:	030b      	lsls	r3, r1, #12
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0ac3      	lsrs	r3, r0, #11
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x7c>
 80002dc:	02cb      	lsls	r3, r1, #11
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a83      	lsrs	r3, r0, #10
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0x88>
 80002e8:	028b      	lsls	r3, r1, #10
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	0a43      	lsrs	r3, r0, #9
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d301      	bcc.n	80002f8 <__divsi3+0x94>
 80002f4:	024b      	lsls	r3, r1, #9
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	4152      	adcs	r2, r2
 80002fa:	0a03      	lsrs	r3, r0, #8
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0xa0>
 8000300:	020b      	lsls	r3, r1, #8
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	d2cd      	bcs.n	80002a4 <__divsi3+0x40>
 8000308:	09c3      	lsrs	r3, r0, #7
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xae>
 800030e:	01cb      	lsls	r3, r1, #7
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0983      	lsrs	r3, r0, #6
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xba>
 800031a:	018b      	lsls	r3, r1, #6
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0943      	lsrs	r3, r0, #5
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xc6>
 8000326:	014b      	lsls	r3, r1, #5
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xd2>
 8000332:	010b      	lsls	r3, r1, #4
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	08c3      	lsrs	r3, r0, #3
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xde>
 800033e:	00cb      	lsls	r3, r1, #3
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	0883      	lsrs	r3, r0, #2
 8000346:	428b      	cmp	r3, r1
 8000348:	d301      	bcc.n	800034e <__divsi3+0xea>
 800034a:	008b      	lsls	r3, r1, #2
 800034c:	1ac0      	subs	r0, r0, r3
 800034e:	4152      	adcs	r2, r2
 8000350:	0843      	lsrs	r3, r0, #1
 8000352:	428b      	cmp	r3, r1
 8000354:	d301      	bcc.n	800035a <__divsi3+0xf6>
 8000356:	004b      	lsls	r3, r1, #1
 8000358:	1ac0      	subs	r0, r0, r3
 800035a:	4152      	adcs	r2, r2
 800035c:	1a41      	subs	r1, r0, r1
 800035e:	d200      	bcs.n	8000362 <__divsi3+0xfe>
 8000360:	4601      	mov	r1, r0
 8000362:	4152      	adcs	r2, r2
 8000364:	4610      	mov	r0, r2
 8000366:	4770      	bx	lr
 8000368:	e05d      	b.n	8000426 <__divsi3+0x1c2>
 800036a:	0fca      	lsrs	r2, r1, #31
 800036c:	d000      	beq.n	8000370 <__divsi3+0x10c>
 800036e:	4249      	negs	r1, r1
 8000370:	1003      	asrs	r3, r0, #32
 8000372:	d300      	bcc.n	8000376 <__divsi3+0x112>
 8000374:	4240      	negs	r0, r0
 8000376:	4053      	eors	r3, r2
 8000378:	2200      	movs	r2, #0
 800037a:	469c      	mov	ip, r3
 800037c:	0903      	lsrs	r3, r0, #4
 800037e:	428b      	cmp	r3, r1
 8000380:	d32d      	bcc.n	80003de <__divsi3+0x17a>
 8000382:	0a03      	lsrs	r3, r0, #8
 8000384:	428b      	cmp	r3, r1
 8000386:	d312      	bcc.n	80003ae <__divsi3+0x14a>
 8000388:	22fc      	movs	r2, #252	@ 0xfc
 800038a:	0189      	lsls	r1, r1, #6
 800038c:	ba12      	rev	r2, r2
 800038e:	0a03      	lsrs	r3, r0, #8
 8000390:	428b      	cmp	r3, r1
 8000392:	d30c      	bcc.n	80003ae <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	1192      	asrs	r2, r2, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d308      	bcc.n	80003ae <__divsi3+0x14a>
 800039c:	0189      	lsls	r1, r1, #6
 800039e:	1192      	asrs	r2, r2, #6
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d304      	bcc.n	80003ae <__divsi3+0x14a>
 80003a4:	0189      	lsls	r1, r1, #6
 80003a6:	d03a      	beq.n	800041e <__divsi3+0x1ba>
 80003a8:	1192      	asrs	r2, r2, #6
 80003aa:	e000      	b.n	80003ae <__divsi3+0x14a>
 80003ac:	0989      	lsrs	r1, r1, #6
 80003ae:	09c3      	lsrs	r3, r0, #7
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x154>
 80003b4:	01cb      	lsls	r3, r1, #7
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0983      	lsrs	r3, r0, #6
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x160>
 80003c0:	018b      	lsls	r3, r1, #6
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0943      	lsrs	r3, r0, #5
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x16c>
 80003cc:	014b      	lsls	r3, r1, #5
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0903      	lsrs	r3, r0, #4
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x178>
 80003d8:	010b      	lsls	r3, r1, #4
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	08c3      	lsrs	r3, r0, #3
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x184>
 80003e4:	00cb      	lsls	r3, r1, #3
 80003e6:	1ac0      	subs	r0, r0, r3
 80003e8:	4152      	adcs	r2, r2
 80003ea:	0883      	lsrs	r3, r0, #2
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x190>
 80003f0:	008b      	lsls	r3, r1, #2
 80003f2:	1ac0      	subs	r0, r0, r3
 80003f4:	4152      	adcs	r2, r2
 80003f6:	d2d9      	bcs.n	80003ac <__divsi3+0x148>
 80003f8:	0843      	lsrs	r3, r0, #1
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d301      	bcc.n	8000402 <__divsi3+0x19e>
 80003fe:	004b      	lsls	r3, r1, #1
 8000400:	1ac0      	subs	r0, r0, r3
 8000402:	4152      	adcs	r2, r2
 8000404:	1a41      	subs	r1, r0, r1
 8000406:	d200      	bcs.n	800040a <__divsi3+0x1a6>
 8000408:	4601      	mov	r1, r0
 800040a:	4663      	mov	r3, ip
 800040c:	4152      	adcs	r2, r2
 800040e:	105b      	asrs	r3, r3, #1
 8000410:	4610      	mov	r0, r2
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x1b4>
 8000414:	4240      	negs	r0, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d500      	bpl.n	800041c <__divsi3+0x1b8>
 800041a:	4249      	negs	r1, r1
 800041c:	4770      	bx	lr
 800041e:	4663      	mov	r3, ip
 8000420:	105b      	asrs	r3, r3, #1
 8000422:	d300      	bcc.n	8000426 <__divsi3+0x1c2>
 8000424:	4240      	negs	r0, r0
 8000426:	b501      	push	{r0, lr}
 8000428:	2000      	movs	r0, #0
 800042a:	f000 f805 	bl	8000438 <__aeabi_idiv0>
 800042e:	bd02      	pop	{r1, pc}

08000430 <__aeabi_idivmod>:
 8000430:	2900      	cmp	r1, #0
 8000432:	d0f8      	beq.n	8000426 <__divsi3+0x1c2>
 8000434:	e716      	b.n	8000264 <__divsi3>
 8000436:	4770      	bx	lr

08000438 <__aeabi_idiv0>:
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdrcmple>:
 800043c:	4684      	mov	ip, r0
 800043e:	0010      	movs	r0, r2
 8000440:	4662      	mov	r2, ip
 8000442:	468c      	mov	ip, r1
 8000444:	0019      	movs	r1, r3
 8000446:	4663      	mov	r3, ip
 8000448:	e000      	b.n	800044c <__aeabi_cdcmpeq>
 800044a:	46c0      	nop			@ (mov r8, r8)

0800044c <__aeabi_cdcmpeq>:
 800044c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800044e:	f002 f9d3 	bl	80027f8 <__ledf2>
 8000452:	2800      	cmp	r0, #0
 8000454:	d401      	bmi.n	800045a <__aeabi_cdcmpeq+0xe>
 8000456:	2100      	movs	r1, #0
 8000458:	42c8      	cmn	r0, r1
 800045a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800045c <__aeabi_dcmpeq>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f002 f917 	bl	8002690 <__eqdf2>
 8000462:	4240      	negs	r0, r0
 8000464:	3001      	adds	r0, #1
 8000466:	bd10      	pop	{r4, pc}

08000468 <__aeabi_dcmplt>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f002 f9c5 	bl	80027f8 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	db01      	blt.n	8000476 <__aeabi_dcmplt+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			@ (mov r8, r8)

0800047c <__aeabi_dcmple>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f002 f9bb 	bl	80027f8 <__ledf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dd01      	ble.n	800048a <__aeabi_dcmple+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__aeabi_dcmpgt>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f002 f941 	bl	8002718 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	dc01      	bgt.n	800049e <__aeabi_dcmpgt+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			@ (mov r8, r8)

080004a4 <__aeabi_dcmpge>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	f002 f937 	bl	8002718 <__gedf2>
 80004aa:	2800      	cmp	r0, #0
 80004ac:	da01      	bge.n	80004b2 <__aeabi_dcmpge+0xe>
 80004ae:	2000      	movs	r0, #0
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	2001      	movs	r0, #1
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	46c0      	nop			@ (mov r8, r8)

080004b8 <__aeabi_cfrcmple>:
 80004b8:	4684      	mov	ip, r0
 80004ba:	0008      	movs	r0, r1
 80004bc:	4661      	mov	r1, ip
 80004be:	e7ff      	b.n	80004c0 <__aeabi_cfcmpeq>

080004c0 <__aeabi_cfcmpeq>:
 80004c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004c2:	f000 fd4b 	bl	8000f5c <__lesf2>
 80004c6:	2800      	cmp	r0, #0
 80004c8:	d401      	bmi.n	80004ce <__aeabi_cfcmpeq+0xe>
 80004ca:	2100      	movs	r1, #0
 80004cc:	42c8      	cmn	r0, r1
 80004ce:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004d0 <__aeabi_fcmpeq>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 fcd3 	bl	8000e7c <__eqsf2>
 80004d6:	4240      	negs	r0, r0
 80004d8:	3001      	adds	r0, #1
 80004da:	bd10      	pop	{r4, pc}

080004dc <__aeabi_fcmplt>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 fd3d 	bl	8000f5c <__lesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	db01      	blt.n	80004ea <__aeabi_fcmplt+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			@ (mov r8, r8)

080004f0 <__aeabi_fcmple>:
 80004f0:	b510      	push	{r4, lr}
 80004f2:	f000 fd33 	bl	8000f5c <__lesf2>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	dd01      	ble.n	80004fe <__aeabi_fcmple+0xe>
 80004fa:	2000      	movs	r0, #0
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	2001      	movs	r0, #1
 8000500:	bd10      	pop	{r4, pc}
 8000502:	46c0      	nop			@ (mov r8, r8)

08000504 <__aeabi_fcmpgt>:
 8000504:	b510      	push	{r4, lr}
 8000506:	f000 fce1 	bl	8000ecc <__gesf2>
 800050a:	2800      	cmp	r0, #0
 800050c:	dc01      	bgt.n	8000512 <__aeabi_fcmpgt+0xe>
 800050e:	2000      	movs	r0, #0
 8000510:	bd10      	pop	{r4, pc}
 8000512:	2001      	movs	r0, #1
 8000514:	bd10      	pop	{r4, pc}
 8000516:	46c0      	nop			@ (mov r8, r8)

08000518 <__aeabi_fcmpge>:
 8000518:	b510      	push	{r4, lr}
 800051a:	f000 fcd7 	bl	8000ecc <__gesf2>
 800051e:	2800      	cmp	r0, #0
 8000520:	da01      	bge.n	8000526 <__aeabi_fcmpge+0xe>
 8000522:	2000      	movs	r0, #0
 8000524:	bd10      	pop	{r4, pc}
 8000526:	2001      	movs	r0, #1
 8000528:	bd10      	pop	{r4, pc}
 800052a:	46c0      	nop			@ (mov r8, r8)

0800052c <__aeabi_uldivmod>:
 800052c:	2b00      	cmp	r3, #0
 800052e:	d111      	bne.n	8000554 <__aeabi_uldivmod+0x28>
 8000530:	2a00      	cmp	r2, #0
 8000532:	d10f      	bne.n	8000554 <__aeabi_uldivmod+0x28>
 8000534:	2900      	cmp	r1, #0
 8000536:	d100      	bne.n	800053a <__aeabi_uldivmod+0xe>
 8000538:	2800      	cmp	r0, #0
 800053a:	d002      	beq.n	8000542 <__aeabi_uldivmod+0x16>
 800053c:	2100      	movs	r1, #0
 800053e:	43c9      	mvns	r1, r1
 8000540:	0008      	movs	r0, r1
 8000542:	b407      	push	{r0, r1, r2}
 8000544:	4802      	ldr	r0, [pc, #8]	@ (8000550 <__aeabi_uldivmod+0x24>)
 8000546:	a102      	add	r1, pc, #8	@ (adr r1, 8000550 <__aeabi_uldivmod+0x24>)
 8000548:	1840      	adds	r0, r0, r1
 800054a:	9002      	str	r0, [sp, #8]
 800054c:	bd03      	pop	{r0, r1, pc}
 800054e:	46c0      	nop			@ (mov r8, r8)
 8000550:	fffffee9 	.word	0xfffffee9
 8000554:	b403      	push	{r0, r1}
 8000556:	4668      	mov	r0, sp
 8000558:	b501      	push	{r0, lr}
 800055a:	9802      	ldr	r0, [sp, #8]
 800055c:	f000 f8ba 	bl	80006d4 <__udivmoddi4>
 8000560:	9b01      	ldr	r3, [sp, #4]
 8000562:	469e      	mov	lr, r3
 8000564:	b002      	add	sp, #8
 8000566:	bc0c      	pop	{r2, r3}
 8000568:	4770      	bx	lr
 800056a:	46c0      	nop			@ (mov r8, r8)

0800056c <__aeabi_lmul>:
 800056c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800056e:	46ce      	mov	lr, r9
 8000570:	4699      	mov	r9, r3
 8000572:	0c03      	lsrs	r3, r0, #16
 8000574:	469c      	mov	ip, r3
 8000576:	0413      	lsls	r3, r2, #16
 8000578:	4647      	mov	r7, r8
 800057a:	0c1b      	lsrs	r3, r3, #16
 800057c:	001d      	movs	r5, r3
 800057e:	000e      	movs	r6, r1
 8000580:	4661      	mov	r1, ip
 8000582:	0404      	lsls	r4, r0, #16
 8000584:	0c24      	lsrs	r4, r4, #16
 8000586:	b580      	push	{r7, lr}
 8000588:	0007      	movs	r7, r0
 800058a:	0c10      	lsrs	r0, r2, #16
 800058c:	434b      	muls	r3, r1
 800058e:	4365      	muls	r5, r4
 8000590:	4341      	muls	r1, r0
 8000592:	4360      	muls	r0, r4
 8000594:	0c2c      	lsrs	r4, r5, #16
 8000596:	18c0      	adds	r0, r0, r3
 8000598:	1824      	adds	r4, r4, r0
 800059a:	468c      	mov	ip, r1
 800059c:	42a3      	cmp	r3, r4
 800059e:	d903      	bls.n	80005a8 <__aeabi_lmul+0x3c>
 80005a0:	2380      	movs	r3, #128	@ 0x80
 80005a2:	025b      	lsls	r3, r3, #9
 80005a4:	4698      	mov	r8, r3
 80005a6:	44c4      	add	ip, r8
 80005a8:	4649      	mov	r1, r9
 80005aa:	4379      	muls	r1, r7
 80005ac:	4356      	muls	r6, r2
 80005ae:	0c23      	lsrs	r3, r4, #16
 80005b0:	042d      	lsls	r5, r5, #16
 80005b2:	0c2d      	lsrs	r5, r5, #16
 80005b4:	1989      	adds	r1, r1, r6
 80005b6:	4463      	add	r3, ip
 80005b8:	0424      	lsls	r4, r4, #16
 80005ba:	1960      	adds	r0, r4, r5
 80005bc:	18c9      	adds	r1, r1, r3
 80005be:	bcc0      	pop	{r6, r7}
 80005c0:	46b9      	mov	r9, r7
 80005c2:	46b0      	mov	r8, r6
 80005c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005c6:	46c0      	nop			@ (mov r8, r8)

080005c8 <__aeabi_f2uiz>:
 80005c8:	219e      	movs	r1, #158	@ 0x9e
 80005ca:	b510      	push	{r4, lr}
 80005cc:	05c9      	lsls	r1, r1, #23
 80005ce:	1c04      	adds	r4, r0, #0
 80005d0:	f7ff ffa2 	bl	8000518 <__aeabi_fcmpge>
 80005d4:	2800      	cmp	r0, #0
 80005d6:	d103      	bne.n	80005e0 <__aeabi_f2uiz+0x18>
 80005d8:	1c20      	adds	r0, r4, #0
 80005da:	f001 f8c5 	bl	8001768 <__aeabi_f2iz>
 80005de:	bd10      	pop	{r4, pc}
 80005e0:	219e      	movs	r1, #158	@ 0x9e
 80005e2:	1c20      	adds	r0, r4, #0
 80005e4:	05c9      	lsls	r1, r1, #23
 80005e6:	f000 fe5b 	bl	80012a0 <__aeabi_fsub>
 80005ea:	f001 f8bd 	bl	8001768 <__aeabi_f2iz>
 80005ee:	2380      	movs	r3, #128	@ 0x80
 80005f0:	061b      	lsls	r3, r3, #24
 80005f2:	469c      	mov	ip, r3
 80005f4:	4460      	add	r0, ip
 80005f6:	e7f2      	b.n	80005de <__aeabi_f2uiz+0x16>

080005f8 <__aeabi_d2uiz>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	2200      	movs	r2, #0
 80005fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000630 <__aeabi_d2uiz+0x38>)
 80005fe:	0004      	movs	r4, r0
 8000600:	000d      	movs	r5, r1
 8000602:	f7ff ff4f 	bl	80004a4 <__aeabi_dcmpge>
 8000606:	2800      	cmp	r0, #0
 8000608:	d104      	bne.n	8000614 <__aeabi_d2uiz+0x1c>
 800060a:	0020      	movs	r0, r4
 800060c:	0029      	movs	r1, r5
 800060e:	f003 f873 	bl	80036f8 <__aeabi_d2iz>
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	4b06      	ldr	r3, [pc, #24]	@ (8000630 <__aeabi_d2uiz+0x38>)
 8000616:	2200      	movs	r2, #0
 8000618:	0020      	movs	r0, r4
 800061a:	0029      	movs	r1, r5
 800061c:	f002 fc40 	bl	8002ea0 <__aeabi_dsub>
 8000620:	f003 f86a 	bl	80036f8 <__aeabi_d2iz>
 8000624:	2380      	movs	r3, #128	@ 0x80
 8000626:	061b      	lsls	r3, r3, #24
 8000628:	469c      	mov	ip, r3
 800062a:	4460      	add	r0, ip
 800062c:	e7f1      	b.n	8000612 <__aeabi_d2uiz+0x1a>
 800062e:	46c0      	nop			@ (mov r8, r8)
 8000630:	41e00000 	.word	0x41e00000

08000634 <__aeabi_d2lz>:
 8000634:	b570      	push	{r4, r5, r6, lr}
 8000636:	2200      	movs	r2, #0
 8000638:	2300      	movs	r3, #0
 800063a:	0004      	movs	r4, r0
 800063c:	000d      	movs	r5, r1
 800063e:	f7ff ff13 	bl	8000468 <__aeabi_dcmplt>
 8000642:	2800      	cmp	r0, #0
 8000644:	d108      	bne.n	8000658 <__aeabi_d2lz+0x24>
 8000646:	0020      	movs	r0, r4
 8000648:	0029      	movs	r1, r5
 800064a:	f000 f80f 	bl	800066c <__aeabi_d2ulz>
 800064e:	0002      	movs	r2, r0
 8000650:	000b      	movs	r3, r1
 8000652:	0010      	movs	r0, r2
 8000654:	0019      	movs	r1, r3
 8000656:	bd70      	pop	{r4, r5, r6, pc}
 8000658:	2380      	movs	r3, #128	@ 0x80
 800065a:	061b      	lsls	r3, r3, #24
 800065c:	18e9      	adds	r1, r5, r3
 800065e:	0020      	movs	r0, r4
 8000660:	f000 f804 	bl	800066c <__aeabi_d2ulz>
 8000664:	2300      	movs	r3, #0
 8000666:	4242      	negs	r2, r0
 8000668:	418b      	sbcs	r3, r1
 800066a:	e7f2      	b.n	8000652 <__aeabi_d2lz+0x1e>

0800066c <__aeabi_d2ulz>:
 800066c:	b570      	push	{r4, r5, r6, lr}
 800066e:	2200      	movs	r2, #0
 8000670:	4b0b      	ldr	r3, [pc, #44]	@ (80006a0 <__aeabi_d2ulz+0x34>)
 8000672:	000d      	movs	r5, r1
 8000674:	0004      	movs	r4, r0
 8000676:	f002 f92d 	bl	80028d4 <__aeabi_dmul>
 800067a:	f7ff ffbd 	bl	80005f8 <__aeabi_d2uiz>
 800067e:	0006      	movs	r6, r0
 8000680:	f003 f8a4 	bl	80037cc <__aeabi_ui2d>
 8000684:	2200      	movs	r2, #0
 8000686:	4b07      	ldr	r3, [pc, #28]	@ (80006a4 <__aeabi_d2ulz+0x38>)
 8000688:	f002 f924 	bl	80028d4 <__aeabi_dmul>
 800068c:	0002      	movs	r2, r0
 800068e:	000b      	movs	r3, r1
 8000690:	0020      	movs	r0, r4
 8000692:	0029      	movs	r1, r5
 8000694:	f002 fc04 	bl	8002ea0 <__aeabi_dsub>
 8000698:	f7ff ffae 	bl	80005f8 <__aeabi_d2uiz>
 800069c:	0031      	movs	r1, r6
 800069e:	bd70      	pop	{r4, r5, r6, pc}
 80006a0:	3df00000 	.word	0x3df00000
 80006a4:	41f00000 	.word	0x41f00000

080006a8 <__aeabi_l2d>:
 80006a8:	b570      	push	{r4, r5, r6, lr}
 80006aa:	0006      	movs	r6, r0
 80006ac:	0008      	movs	r0, r1
 80006ae:	f003 f85f 	bl	8003770 <__aeabi_i2d>
 80006b2:	2200      	movs	r2, #0
 80006b4:	4b06      	ldr	r3, [pc, #24]	@ (80006d0 <__aeabi_l2d+0x28>)
 80006b6:	f002 f90d 	bl	80028d4 <__aeabi_dmul>
 80006ba:	000d      	movs	r5, r1
 80006bc:	0004      	movs	r4, r0
 80006be:	0030      	movs	r0, r6
 80006c0:	f003 f884 	bl	80037cc <__aeabi_ui2d>
 80006c4:	002b      	movs	r3, r5
 80006c6:	0022      	movs	r2, r4
 80006c8:	f001 f904 	bl	80018d4 <__aeabi_dadd>
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	46c0      	nop			@ (mov r8, r8)
 80006d0:	41f00000 	.word	0x41f00000

080006d4 <__udivmoddi4>:
 80006d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006d6:	4657      	mov	r7, sl
 80006d8:	464e      	mov	r6, r9
 80006da:	4645      	mov	r5, r8
 80006dc:	46de      	mov	lr, fp
 80006de:	b5e0      	push	{r5, r6, r7, lr}
 80006e0:	0004      	movs	r4, r0
 80006e2:	000d      	movs	r5, r1
 80006e4:	4692      	mov	sl, r2
 80006e6:	4699      	mov	r9, r3
 80006e8:	b083      	sub	sp, #12
 80006ea:	428b      	cmp	r3, r1
 80006ec:	d830      	bhi.n	8000750 <__udivmoddi4+0x7c>
 80006ee:	d02d      	beq.n	800074c <__udivmoddi4+0x78>
 80006f0:	4649      	mov	r1, r9
 80006f2:	4650      	mov	r0, sl
 80006f4:	f003 f976 	bl	80039e4 <__clzdi2>
 80006f8:	0029      	movs	r1, r5
 80006fa:	0006      	movs	r6, r0
 80006fc:	0020      	movs	r0, r4
 80006fe:	f003 f971 	bl	80039e4 <__clzdi2>
 8000702:	1a33      	subs	r3, r6, r0
 8000704:	4698      	mov	r8, r3
 8000706:	3b20      	subs	r3, #32
 8000708:	d434      	bmi.n	8000774 <__udivmoddi4+0xa0>
 800070a:	469b      	mov	fp, r3
 800070c:	4653      	mov	r3, sl
 800070e:	465a      	mov	r2, fp
 8000710:	4093      	lsls	r3, r2
 8000712:	4642      	mov	r2, r8
 8000714:	001f      	movs	r7, r3
 8000716:	4653      	mov	r3, sl
 8000718:	4093      	lsls	r3, r2
 800071a:	001e      	movs	r6, r3
 800071c:	42af      	cmp	r7, r5
 800071e:	d83b      	bhi.n	8000798 <__udivmoddi4+0xc4>
 8000720:	42af      	cmp	r7, r5
 8000722:	d100      	bne.n	8000726 <__udivmoddi4+0x52>
 8000724:	e079      	b.n	800081a <__udivmoddi4+0x146>
 8000726:	465b      	mov	r3, fp
 8000728:	1ba4      	subs	r4, r4, r6
 800072a:	41bd      	sbcs	r5, r7
 800072c:	2b00      	cmp	r3, #0
 800072e:	da00      	bge.n	8000732 <__udivmoddi4+0x5e>
 8000730:	e076      	b.n	8000820 <__udivmoddi4+0x14c>
 8000732:	2200      	movs	r2, #0
 8000734:	2300      	movs	r3, #0
 8000736:	9200      	str	r2, [sp, #0]
 8000738:	9301      	str	r3, [sp, #4]
 800073a:	2301      	movs	r3, #1
 800073c:	465a      	mov	r2, fp
 800073e:	4093      	lsls	r3, r2
 8000740:	9301      	str	r3, [sp, #4]
 8000742:	2301      	movs	r3, #1
 8000744:	4642      	mov	r2, r8
 8000746:	4093      	lsls	r3, r2
 8000748:	9300      	str	r3, [sp, #0]
 800074a:	e029      	b.n	80007a0 <__udivmoddi4+0xcc>
 800074c:	4282      	cmp	r2, r0
 800074e:	d9cf      	bls.n	80006f0 <__udivmoddi4+0x1c>
 8000750:	2200      	movs	r2, #0
 8000752:	2300      	movs	r3, #0
 8000754:	9200      	str	r2, [sp, #0]
 8000756:	9301      	str	r3, [sp, #4]
 8000758:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <__udivmoddi4+0x8e>
 800075e:	601c      	str	r4, [r3, #0]
 8000760:	605d      	str	r5, [r3, #4]
 8000762:	9800      	ldr	r0, [sp, #0]
 8000764:	9901      	ldr	r1, [sp, #4]
 8000766:	b003      	add	sp, #12
 8000768:	bcf0      	pop	{r4, r5, r6, r7}
 800076a:	46bb      	mov	fp, r7
 800076c:	46b2      	mov	sl, r6
 800076e:	46a9      	mov	r9, r5
 8000770:	46a0      	mov	r8, r4
 8000772:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000774:	4642      	mov	r2, r8
 8000776:	469b      	mov	fp, r3
 8000778:	2320      	movs	r3, #32
 800077a:	1a9b      	subs	r3, r3, r2
 800077c:	4652      	mov	r2, sl
 800077e:	40da      	lsrs	r2, r3
 8000780:	4641      	mov	r1, r8
 8000782:	0013      	movs	r3, r2
 8000784:	464a      	mov	r2, r9
 8000786:	408a      	lsls	r2, r1
 8000788:	0017      	movs	r7, r2
 800078a:	4642      	mov	r2, r8
 800078c:	431f      	orrs	r7, r3
 800078e:	4653      	mov	r3, sl
 8000790:	4093      	lsls	r3, r2
 8000792:	001e      	movs	r6, r3
 8000794:	42af      	cmp	r7, r5
 8000796:	d9c3      	bls.n	8000720 <__udivmoddi4+0x4c>
 8000798:	2200      	movs	r2, #0
 800079a:	2300      	movs	r3, #0
 800079c:	9200      	str	r2, [sp, #0]
 800079e:	9301      	str	r3, [sp, #4]
 80007a0:	4643      	mov	r3, r8
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d0d8      	beq.n	8000758 <__udivmoddi4+0x84>
 80007a6:	07fb      	lsls	r3, r7, #31
 80007a8:	0872      	lsrs	r2, r6, #1
 80007aa:	431a      	orrs	r2, r3
 80007ac:	4646      	mov	r6, r8
 80007ae:	087b      	lsrs	r3, r7, #1
 80007b0:	e00e      	b.n	80007d0 <__udivmoddi4+0xfc>
 80007b2:	42ab      	cmp	r3, r5
 80007b4:	d101      	bne.n	80007ba <__udivmoddi4+0xe6>
 80007b6:	42a2      	cmp	r2, r4
 80007b8:	d80c      	bhi.n	80007d4 <__udivmoddi4+0x100>
 80007ba:	1aa4      	subs	r4, r4, r2
 80007bc:	419d      	sbcs	r5, r3
 80007be:	2001      	movs	r0, #1
 80007c0:	1924      	adds	r4, r4, r4
 80007c2:	416d      	adcs	r5, r5
 80007c4:	2100      	movs	r1, #0
 80007c6:	3e01      	subs	r6, #1
 80007c8:	1824      	adds	r4, r4, r0
 80007ca:	414d      	adcs	r5, r1
 80007cc:	2e00      	cmp	r6, #0
 80007ce:	d006      	beq.n	80007de <__udivmoddi4+0x10a>
 80007d0:	42ab      	cmp	r3, r5
 80007d2:	d9ee      	bls.n	80007b2 <__udivmoddi4+0xde>
 80007d4:	3e01      	subs	r6, #1
 80007d6:	1924      	adds	r4, r4, r4
 80007d8:	416d      	adcs	r5, r5
 80007da:	2e00      	cmp	r6, #0
 80007dc:	d1f8      	bne.n	80007d0 <__udivmoddi4+0xfc>
 80007de:	9800      	ldr	r0, [sp, #0]
 80007e0:	9901      	ldr	r1, [sp, #4]
 80007e2:	465b      	mov	r3, fp
 80007e4:	1900      	adds	r0, r0, r4
 80007e6:	4169      	adcs	r1, r5
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	db24      	blt.n	8000836 <__udivmoddi4+0x162>
 80007ec:	002b      	movs	r3, r5
 80007ee:	465a      	mov	r2, fp
 80007f0:	4644      	mov	r4, r8
 80007f2:	40d3      	lsrs	r3, r2
 80007f4:	002a      	movs	r2, r5
 80007f6:	40e2      	lsrs	r2, r4
 80007f8:	001c      	movs	r4, r3
 80007fa:	465b      	mov	r3, fp
 80007fc:	0015      	movs	r5, r2
 80007fe:	2b00      	cmp	r3, #0
 8000800:	db2a      	blt.n	8000858 <__udivmoddi4+0x184>
 8000802:	0026      	movs	r6, r4
 8000804:	409e      	lsls	r6, r3
 8000806:	0033      	movs	r3, r6
 8000808:	0026      	movs	r6, r4
 800080a:	4647      	mov	r7, r8
 800080c:	40be      	lsls	r6, r7
 800080e:	0032      	movs	r2, r6
 8000810:	1a80      	subs	r0, r0, r2
 8000812:	4199      	sbcs	r1, r3
 8000814:	9000      	str	r0, [sp, #0]
 8000816:	9101      	str	r1, [sp, #4]
 8000818:	e79e      	b.n	8000758 <__udivmoddi4+0x84>
 800081a:	42a3      	cmp	r3, r4
 800081c:	d8bc      	bhi.n	8000798 <__udivmoddi4+0xc4>
 800081e:	e782      	b.n	8000726 <__udivmoddi4+0x52>
 8000820:	4642      	mov	r2, r8
 8000822:	2320      	movs	r3, #32
 8000824:	2100      	movs	r1, #0
 8000826:	1a9b      	subs	r3, r3, r2
 8000828:	2200      	movs	r2, #0
 800082a:	9100      	str	r1, [sp, #0]
 800082c:	9201      	str	r2, [sp, #4]
 800082e:	2201      	movs	r2, #1
 8000830:	40da      	lsrs	r2, r3
 8000832:	9201      	str	r2, [sp, #4]
 8000834:	e785      	b.n	8000742 <__udivmoddi4+0x6e>
 8000836:	4642      	mov	r2, r8
 8000838:	2320      	movs	r3, #32
 800083a:	1a9b      	subs	r3, r3, r2
 800083c:	002a      	movs	r2, r5
 800083e:	4646      	mov	r6, r8
 8000840:	409a      	lsls	r2, r3
 8000842:	0023      	movs	r3, r4
 8000844:	40f3      	lsrs	r3, r6
 8000846:	4644      	mov	r4, r8
 8000848:	4313      	orrs	r3, r2
 800084a:	002a      	movs	r2, r5
 800084c:	40e2      	lsrs	r2, r4
 800084e:	001c      	movs	r4, r3
 8000850:	465b      	mov	r3, fp
 8000852:	0015      	movs	r5, r2
 8000854:	2b00      	cmp	r3, #0
 8000856:	dad4      	bge.n	8000802 <__udivmoddi4+0x12e>
 8000858:	4642      	mov	r2, r8
 800085a:	002f      	movs	r7, r5
 800085c:	2320      	movs	r3, #32
 800085e:	0026      	movs	r6, r4
 8000860:	4097      	lsls	r7, r2
 8000862:	1a9b      	subs	r3, r3, r2
 8000864:	40de      	lsrs	r6, r3
 8000866:	003b      	movs	r3, r7
 8000868:	4333      	orrs	r3, r6
 800086a:	e7cd      	b.n	8000808 <__udivmoddi4+0x134>

0800086c <__aeabi_fadd>:
 800086c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800086e:	024b      	lsls	r3, r1, #9
 8000870:	0a5a      	lsrs	r2, r3, #9
 8000872:	4694      	mov	ip, r2
 8000874:	004a      	lsls	r2, r1, #1
 8000876:	0fc9      	lsrs	r1, r1, #31
 8000878:	46ce      	mov	lr, r9
 800087a:	4647      	mov	r7, r8
 800087c:	4689      	mov	r9, r1
 800087e:	0045      	lsls	r5, r0, #1
 8000880:	0246      	lsls	r6, r0, #9
 8000882:	0e2d      	lsrs	r5, r5, #24
 8000884:	0e12      	lsrs	r2, r2, #24
 8000886:	b580      	push	{r7, lr}
 8000888:	0999      	lsrs	r1, r3, #6
 800088a:	0a77      	lsrs	r7, r6, #9
 800088c:	0fc4      	lsrs	r4, r0, #31
 800088e:	09b6      	lsrs	r6, r6, #6
 8000890:	1aab      	subs	r3, r5, r2
 8000892:	454c      	cmp	r4, r9
 8000894:	d020      	beq.n	80008d8 <__aeabi_fadd+0x6c>
 8000896:	2b00      	cmp	r3, #0
 8000898:	dd0c      	ble.n	80008b4 <__aeabi_fadd+0x48>
 800089a:	2a00      	cmp	r2, #0
 800089c:	d134      	bne.n	8000908 <__aeabi_fadd+0x9c>
 800089e:	2900      	cmp	r1, #0
 80008a0:	d02a      	beq.n	80008f8 <__aeabi_fadd+0x8c>
 80008a2:	1e5a      	subs	r2, r3, #1
 80008a4:	2b01      	cmp	r3, #1
 80008a6:	d100      	bne.n	80008aa <__aeabi_fadd+0x3e>
 80008a8:	e08f      	b.n	80009ca <__aeabi_fadd+0x15e>
 80008aa:	2bff      	cmp	r3, #255	@ 0xff
 80008ac:	d100      	bne.n	80008b0 <__aeabi_fadd+0x44>
 80008ae:	e0cd      	b.n	8000a4c <__aeabi_fadd+0x1e0>
 80008b0:	0013      	movs	r3, r2
 80008b2:	e02f      	b.n	8000914 <__aeabi_fadd+0xa8>
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d060      	beq.n	800097a <__aeabi_fadd+0x10e>
 80008b8:	1b53      	subs	r3, r2, r5
 80008ba:	2d00      	cmp	r5, #0
 80008bc:	d000      	beq.n	80008c0 <__aeabi_fadd+0x54>
 80008be:	e0ee      	b.n	8000a9e <__aeabi_fadd+0x232>
 80008c0:	2e00      	cmp	r6, #0
 80008c2:	d100      	bne.n	80008c6 <__aeabi_fadd+0x5a>
 80008c4:	e13e      	b.n	8000b44 <__aeabi_fadd+0x2d8>
 80008c6:	1e5c      	subs	r4, r3, #1
 80008c8:	2b01      	cmp	r3, #1
 80008ca:	d100      	bne.n	80008ce <__aeabi_fadd+0x62>
 80008cc:	e16b      	b.n	8000ba6 <__aeabi_fadd+0x33a>
 80008ce:	2bff      	cmp	r3, #255	@ 0xff
 80008d0:	d100      	bne.n	80008d4 <__aeabi_fadd+0x68>
 80008d2:	e0b9      	b.n	8000a48 <__aeabi_fadd+0x1dc>
 80008d4:	0023      	movs	r3, r4
 80008d6:	e0e7      	b.n	8000aa8 <__aeabi_fadd+0x23c>
 80008d8:	2b00      	cmp	r3, #0
 80008da:	dc00      	bgt.n	80008de <__aeabi_fadd+0x72>
 80008dc:	e0a4      	b.n	8000a28 <__aeabi_fadd+0x1bc>
 80008de:	2a00      	cmp	r2, #0
 80008e0:	d069      	beq.n	80009b6 <__aeabi_fadd+0x14a>
 80008e2:	2dff      	cmp	r5, #255	@ 0xff
 80008e4:	d100      	bne.n	80008e8 <__aeabi_fadd+0x7c>
 80008e6:	e0b1      	b.n	8000a4c <__aeabi_fadd+0x1e0>
 80008e8:	2280      	movs	r2, #128	@ 0x80
 80008ea:	04d2      	lsls	r2, r2, #19
 80008ec:	4311      	orrs	r1, r2
 80008ee:	2b1b      	cmp	r3, #27
 80008f0:	dc00      	bgt.n	80008f4 <__aeabi_fadd+0x88>
 80008f2:	e0e9      	b.n	8000ac8 <__aeabi_fadd+0x25c>
 80008f4:	002b      	movs	r3, r5
 80008f6:	3605      	adds	r6, #5
 80008f8:	08f7      	lsrs	r7, r6, #3
 80008fa:	2bff      	cmp	r3, #255	@ 0xff
 80008fc:	d100      	bne.n	8000900 <__aeabi_fadd+0x94>
 80008fe:	e0a5      	b.n	8000a4c <__aeabi_fadd+0x1e0>
 8000900:	027a      	lsls	r2, r7, #9
 8000902:	0a52      	lsrs	r2, r2, #9
 8000904:	b2d8      	uxtb	r0, r3
 8000906:	e030      	b.n	800096a <__aeabi_fadd+0xfe>
 8000908:	2dff      	cmp	r5, #255	@ 0xff
 800090a:	d100      	bne.n	800090e <__aeabi_fadd+0xa2>
 800090c:	e09e      	b.n	8000a4c <__aeabi_fadd+0x1e0>
 800090e:	2280      	movs	r2, #128	@ 0x80
 8000910:	04d2      	lsls	r2, r2, #19
 8000912:	4311      	orrs	r1, r2
 8000914:	2001      	movs	r0, #1
 8000916:	2b1b      	cmp	r3, #27
 8000918:	dc08      	bgt.n	800092c <__aeabi_fadd+0xc0>
 800091a:	0008      	movs	r0, r1
 800091c:	2220      	movs	r2, #32
 800091e:	40d8      	lsrs	r0, r3
 8000920:	1ad3      	subs	r3, r2, r3
 8000922:	4099      	lsls	r1, r3
 8000924:	000b      	movs	r3, r1
 8000926:	1e5a      	subs	r2, r3, #1
 8000928:	4193      	sbcs	r3, r2
 800092a:	4318      	orrs	r0, r3
 800092c:	1a36      	subs	r6, r6, r0
 800092e:	0173      	lsls	r3, r6, #5
 8000930:	d400      	bmi.n	8000934 <__aeabi_fadd+0xc8>
 8000932:	e071      	b.n	8000a18 <__aeabi_fadd+0x1ac>
 8000934:	01b6      	lsls	r6, r6, #6
 8000936:	09b7      	lsrs	r7, r6, #6
 8000938:	0038      	movs	r0, r7
 800093a:	f003 f835 	bl	80039a8 <__clzsi2>
 800093e:	003b      	movs	r3, r7
 8000940:	3805      	subs	r0, #5
 8000942:	4083      	lsls	r3, r0
 8000944:	4285      	cmp	r5, r0
 8000946:	dd4d      	ble.n	80009e4 <__aeabi_fadd+0x178>
 8000948:	4eb4      	ldr	r6, [pc, #720]	@ (8000c1c <__aeabi_fadd+0x3b0>)
 800094a:	1a2d      	subs	r5, r5, r0
 800094c:	401e      	ands	r6, r3
 800094e:	075a      	lsls	r2, r3, #29
 8000950:	d068      	beq.n	8000a24 <__aeabi_fadd+0x1b8>
 8000952:	220f      	movs	r2, #15
 8000954:	4013      	ands	r3, r2
 8000956:	2b04      	cmp	r3, #4
 8000958:	d064      	beq.n	8000a24 <__aeabi_fadd+0x1b8>
 800095a:	3604      	adds	r6, #4
 800095c:	0173      	lsls	r3, r6, #5
 800095e:	d561      	bpl.n	8000a24 <__aeabi_fadd+0x1b8>
 8000960:	1c68      	adds	r0, r5, #1
 8000962:	2dfe      	cmp	r5, #254	@ 0xfe
 8000964:	d154      	bne.n	8000a10 <__aeabi_fadd+0x1a4>
 8000966:	20ff      	movs	r0, #255	@ 0xff
 8000968:	2200      	movs	r2, #0
 800096a:	05c0      	lsls	r0, r0, #23
 800096c:	4310      	orrs	r0, r2
 800096e:	07e4      	lsls	r4, r4, #31
 8000970:	4320      	orrs	r0, r4
 8000972:	bcc0      	pop	{r6, r7}
 8000974:	46b9      	mov	r9, r7
 8000976:	46b0      	mov	r8, r6
 8000978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800097a:	22fe      	movs	r2, #254	@ 0xfe
 800097c:	4690      	mov	r8, r2
 800097e:	1c68      	adds	r0, r5, #1
 8000980:	0002      	movs	r2, r0
 8000982:	4640      	mov	r0, r8
 8000984:	4210      	tst	r0, r2
 8000986:	d16b      	bne.n	8000a60 <__aeabi_fadd+0x1f4>
 8000988:	2d00      	cmp	r5, #0
 800098a:	d000      	beq.n	800098e <__aeabi_fadd+0x122>
 800098c:	e0dd      	b.n	8000b4a <__aeabi_fadd+0x2de>
 800098e:	2e00      	cmp	r6, #0
 8000990:	d100      	bne.n	8000994 <__aeabi_fadd+0x128>
 8000992:	e102      	b.n	8000b9a <__aeabi_fadd+0x32e>
 8000994:	2900      	cmp	r1, #0
 8000996:	d0b3      	beq.n	8000900 <__aeabi_fadd+0x94>
 8000998:	2280      	movs	r2, #128	@ 0x80
 800099a:	1a77      	subs	r7, r6, r1
 800099c:	04d2      	lsls	r2, r2, #19
 800099e:	4217      	tst	r7, r2
 80009a0:	d100      	bne.n	80009a4 <__aeabi_fadd+0x138>
 80009a2:	e136      	b.n	8000c12 <__aeabi_fadd+0x3a6>
 80009a4:	464c      	mov	r4, r9
 80009a6:	1b8e      	subs	r6, r1, r6
 80009a8:	d061      	beq.n	8000a6e <__aeabi_fadd+0x202>
 80009aa:	2001      	movs	r0, #1
 80009ac:	4216      	tst	r6, r2
 80009ae:	d130      	bne.n	8000a12 <__aeabi_fadd+0x1a6>
 80009b0:	2300      	movs	r3, #0
 80009b2:	08f7      	lsrs	r7, r6, #3
 80009b4:	e7a4      	b.n	8000900 <__aeabi_fadd+0x94>
 80009b6:	2900      	cmp	r1, #0
 80009b8:	d09e      	beq.n	80008f8 <__aeabi_fadd+0x8c>
 80009ba:	1e5a      	subs	r2, r3, #1
 80009bc:	2b01      	cmp	r3, #1
 80009be:	d100      	bne.n	80009c2 <__aeabi_fadd+0x156>
 80009c0:	e0ca      	b.n	8000b58 <__aeabi_fadd+0x2ec>
 80009c2:	2bff      	cmp	r3, #255	@ 0xff
 80009c4:	d042      	beq.n	8000a4c <__aeabi_fadd+0x1e0>
 80009c6:	0013      	movs	r3, r2
 80009c8:	e791      	b.n	80008ee <__aeabi_fadd+0x82>
 80009ca:	1a71      	subs	r1, r6, r1
 80009cc:	014b      	lsls	r3, r1, #5
 80009ce:	d400      	bmi.n	80009d2 <__aeabi_fadd+0x166>
 80009d0:	e0d1      	b.n	8000b76 <__aeabi_fadd+0x30a>
 80009d2:	018f      	lsls	r7, r1, #6
 80009d4:	09bf      	lsrs	r7, r7, #6
 80009d6:	0038      	movs	r0, r7
 80009d8:	f002 ffe6 	bl	80039a8 <__clzsi2>
 80009dc:	003b      	movs	r3, r7
 80009de:	3805      	subs	r0, #5
 80009e0:	4083      	lsls	r3, r0
 80009e2:	2501      	movs	r5, #1
 80009e4:	2220      	movs	r2, #32
 80009e6:	1b40      	subs	r0, r0, r5
 80009e8:	3001      	adds	r0, #1
 80009ea:	1a12      	subs	r2, r2, r0
 80009ec:	001e      	movs	r6, r3
 80009ee:	4093      	lsls	r3, r2
 80009f0:	40c6      	lsrs	r6, r0
 80009f2:	1e5a      	subs	r2, r3, #1
 80009f4:	4193      	sbcs	r3, r2
 80009f6:	431e      	orrs	r6, r3
 80009f8:	d039      	beq.n	8000a6e <__aeabi_fadd+0x202>
 80009fa:	0773      	lsls	r3, r6, #29
 80009fc:	d100      	bne.n	8000a00 <__aeabi_fadd+0x194>
 80009fe:	e11b      	b.n	8000c38 <__aeabi_fadd+0x3cc>
 8000a00:	230f      	movs	r3, #15
 8000a02:	2500      	movs	r5, #0
 8000a04:	4033      	ands	r3, r6
 8000a06:	2b04      	cmp	r3, #4
 8000a08:	d1a7      	bne.n	800095a <__aeabi_fadd+0xee>
 8000a0a:	2001      	movs	r0, #1
 8000a0c:	0172      	lsls	r2, r6, #5
 8000a0e:	d57c      	bpl.n	8000b0a <__aeabi_fadd+0x29e>
 8000a10:	b2c0      	uxtb	r0, r0
 8000a12:	01b2      	lsls	r2, r6, #6
 8000a14:	0a52      	lsrs	r2, r2, #9
 8000a16:	e7a8      	b.n	800096a <__aeabi_fadd+0xfe>
 8000a18:	0773      	lsls	r3, r6, #29
 8000a1a:	d003      	beq.n	8000a24 <__aeabi_fadd+0x1b8>
 8000a1c:	230f      	movs	r3, #15
 8000a1e:	4033      	ands	r3, r6
 8000a20:	2b04      	cmp	r3, #4
 8000a22:	d19a      	bne.n	800095a <__aeabi_fadd+0xee>
 8000a24:	002b      	movs	r3, r5
 8000a26:	e767      	b.n	80008f8 <__aeabi_fadd+0x8c>
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d023      	beq.n	8000a74 <__aeabi_fadd+0x208>
 8000a2c:	1b53      	subs	r3, r2, r5
 8000a2e:	2d00      	cmp	r5, #0
 8000a30:	d17b      	bne.n	8000b2a <__aeabi_fadd+0x2be>
 8000a32:	2e00      	cmp	r6, #0
 8000a34:	d100      	bne.n	8000a38 <__aeabi_fadd+0x1cc>
 8000a36:	e086      	b.n	8000b46 <__aeabi_fadd+0x2da>
 8000a38:	1e5d      	subs	r5, r3, #1
 8000a3a:	2b01      	cmp	r3, #1
 8000a3c:	d100      	bne.n	8000a40 <__aeabi_fadd+0x1d4>
 8000a3e:	e08b      	b.n	8000b58 <__aeabi_fadd+0x2ec>
 8000a40:	2bff      	cmp	r3, #255	@ 0xff
 8000a42:	d002      	beq.n	8000a4a <__aeabi_fadd+0x1de>
 8000a44:	002b      	movs	r3, r5
 8000a46:	e075      	b.n	8000b34 <__aeabi_fadd+0x2c8>
 8000a48:	464c      	mov	r4, r9
 8000a4a:	4667      	mov	r7, ip
 8000a4c:	2f00      	cmp	r7, #0
 8000a4e:	d100      	bne.n	8000a52 <__aeabi_fadd+0x1e6>
 8000a50:	e789      	b.n	8000966 <__aeabi_fadd+0xfa>
 8000a52:	2280      	movs	r2, #128	@ 0x80
 8000a54:	03d2      	lsls	r2, r2, #15
 8000a56:	433a      	orrs	r2, r7
 8000a58:	0252      	lsls	r2, r2, #9
 8000a5a:	20ff      	movs	r0, #255	@ 0xff
 8000a5c:	0a52      	lsrs	r2, r2, #9
 8000a5e:	e784      	b.n	800096a <__aeabi_fadd+0xfe>
 8000a60:	1a77      	subs	r7, r6, r1
 8000a62:	017b      	lsls	r3, r7, #5
 8000a64:	d46b      	bmi.n	8000b3e <__aeabi_fadd+0x2d2>
 8000a66:	2f00      	cmp	r7, #0
 8000a68:	d000      	beq.n	8000a6c <__aeabi_fadd+0x200>
 8000a6a:	e765      	b.n	8000938 <__aeabi_fadd+0xcc>
 8000a6c:	2400      	movs	r4, #0
 8000a6e:	2000      	movs	r0, #0
 8000a70:	2200      	movs	r2, #0
 8000a72:	e77a      	b.n	800096a <__aeabi_fadd+0xfe>
 8000a74:	22fe      	movs	r2, #254	@ 0xfe
 8000a76:	1c6b      	adds	r3, r5, #1
 8000a78:	421a      	tst	r2, r3
 8000a7a:	d149      	bne.n	8000b10 <__aeabi_fadd+0x2a4>
 8000a7c:	2d00      	cmp	r5, #0
 8000a7e:	d000      	beq.n	8000a82 <__aeabi_fadd+0x216>
 8000a80:	e09f      	b.n	8000bc2 <__aeabi_fadd+0x356>
 8000a82:	2e00      	cmp	r6, #0
 8000a84:	d100      	bne.n	8000a88 <__aeabi_fadd+0x21c>
 8000a86:	e0ba      	b.n	8000bfe <__aeabi_fadd+0x392>
 8000a88:	2900      	cmp	r1, #0
 8000a8a:	d100      	bne.n	8000a8e <__aeabi_fadd+0x222>
 8000a8c:	e0cf      	b.n	8000c2e <__aeabi_fadd+0x3c2>
 8000a8e:	1872      	adds	r2, r6, r1
 8000a90:	0153      	lsls	r3, r2, #5
 8000a92:	d400      	bmi.n	8000a96 <__aeabi_fadd+0x22a>
 8000a94:	e0cd      	b.n	8000c32 <__aeabi_fadd+0x3c6>
 8000a96:	0192      	lsls	r2, r2, #6
 8000a98:	2001      	movs	r0, #1
 8000a9a:	0a52      	lsrs	r2, r2, #9
 8000a9c:	e765      	b.n	800096a <__aeabi_fadd+0xfe>
 8000a9e:	2aff      	cmp	r2, #255	@ 0xff
 8000aa0:	d0d2      	beq.n	8000a48 <__aeabi_fadd+0x1dc>
 8000aa2:	2080      	movs	r0, #128	@ 0x80
 8000aa4:	04c0      	lsls	r0, r0, #19
 8000aa6:	4306      	orrs	r6, r0
 8000aa8:	2001      	movs	r0, #1
 8000aaa:	2b1b      	cmp	r3, #27
 8000aac:	dc08      	bgt.n	8000ac0 <__aeabi_fadd+0x254>
 8000aae:	0030      	movs	r0, r6
 8000ab0:	2420      	movs	r4, #32
 8000ab2:	40d8      	lsrs	r0, r3
 8000ab4:	1ae3      	subs	r3, r4, r3
 8000ab6:	409e      	lsls	r6, r3
 8000ab8:	0033      	movs	r3, r6
 8000aba:	1e5c      	subs	r4, r3, #1
 8000abc:	41a3      	sbcs	r3, r4
 8000abe:	4318      	orrs	r0, r3
 8000ac0:	464c      	mov	r4, r9
 8000ac2:	0015      	movs	r5, r2
 8000ac4:	1a0e      	subs	r6, r1, r0
 8000ac6:	e732      	b.n	800092e <__aeabi_fadd+0xc2>
 8000ac8:	0008      	movs	r0, r1
 8000aca:	2220      	movs	r2, #32
 8000acc:	40d8      	lsrs	r0, r3
 8000ace:	1ad3      	subs	r3, r2, r3
 8000ad0:	4099      	lsls	r1, r3
 8000ad2:	000b      	movs	r3, r1
 8000ad4:	1e5a      	subs	r2, r3, #1
 8000ad6:	4193      	sbcs	r3, r2
 8000ad8:	4303      	orrs	r3, r0
 8000ada:	18f6      	adds	r6, r6, r3
 8000adc:	0173      	lsls	r3, r6, #5
 8000ade:	d59b      	bpl.n	8000a18 <__aeabi_fadd+0x1ac>
 8000ae0:	3501      	adds	r5, #1
 8000ae2:	2dff      	cmp	r5, #255	@ 0xff
 8000ae4:	d100      	bne.n	8000ae8 <__aeabi_fadd+0x27c>
 8000ae6:	e73e      	b.n	8000966 <__aeabi_fadd+0xfa>
 8000ae8:	2301      	movs	r3, #1
 8000aea:	494d      	ldr	r1, [pc, #308]	@ (8000c20 <__aeabi_fadd+0x3b4>)
 8000aec:	0872      	lsrs	r2, r6, #1
 8000aee:	4033      	ands	r3, r6
 8000af0:	400a      	ands	r2, r1
 8000af2:	431a      	orrs	r2, r3
 8000af4:	0016      	movs	r6, r2
 8000af6:	0753      	lsls	r3, r2, #29
 8000af8:	d004      	beq.n	8000b04 <__aeabi_fadd+0x298>
 8000afa:	230f      	movs	r3, #15
 8000afc:	4013      	ands	r3, r2
 8000afe:	2b04      	cmp	r3, #4
 8000b00:	d000      	beq.n	8000b04 <__aeabi_fadd+0x298>
 8000b02:	e72a      	b.n	800095a <__aeabi_fadd+0xee>
 8000b04:	0173      	lsls	r3, r6, #5
 8000b06:	d500      	bpl.n	8000b0a <__aeabi_fadd+0x29e>
 8000b08:	e72a      	b.n	8000960 <__aeabi_fadd+0xf4>
 8000b0a:	002b      	movs	r3, r5
 8000b0c:	08f7      	lsrs	r7, r6, #3
 8000b0e:	e6f7      	b.n	8000900 <__aeabi_fadd+0x94>
 8000b10:	2bff      	cmp	r3, #255	@ 0xff
 8000b12:	d100      	bne.n	8000b16 <__aeabi_fadd+0x2aa>
 8000b14:	e727      	b.n	8000966 <__aeabi_fadd+0xfa>
 8000b16:	1871      	adds	r1, r6, r1
 8000b18:	0849      	lsrs	r1, r1, #1
 8000b1a:	074a      	lsls	r2, r1, #29
 8000b1c:	d02f      	beq.n	8000b7e <__aeabi_fadd+0x312>
 8000b1e:	220f      	movs	r2, #15
 8000b20:	400a      	ands	r2, r1
 8000b22:	2a04      	cmp	r2, #4
 8000b24:	d02b      	beq.n	8000b7e <__aeabi_fadd+0x312>
 8000b26:	1d0e      	adds	r6, r1, #4
 8000b28:	e6e6      	b.n	80008f8 <__aeabi_fadd+0x8c>
 8000b2a:	2aff      	cmp	r2, #255	@ 0xff
 8000b2c:	d08d      	beq.n	8000a4a <__aeabi_fadd+0x1de>
 8000b2e:	2080      	movs	r0, #128	@ 0x80
 8000b30:	04c0      	lsls	r0, r0, #19
 8000b32:	4306      	orrs	r6, r0
 8000b34:	2b1b      	cmp	r3, #27
 8000b36:	dd24      	ble.n	8000b82 <__aeabi_fadd+0x316>
 8000b38:	0013      	movs	r3, r2
 8000b3a:	1d4e      	adds	r6, r1, #5
 8000b3c:	e6dc      	b.n	80008f8 <__aeabi_fadd+0x8c>
 8000b3e:	464c      	mov	r4, r9
 8000b40:	1b8f      	subs	r7, r1, r6
 8000b42:	e6f9      	b.n	8000938 <__aeabi_fadd+0xcc>
 8000b44:	464c      	mov	r4, r9
 8000b46:	000e      	movs	r6, r1
 8000b48:	e6d6      	b.n	80008f8 <__aeabi_fadd+0x8c>
 8000b4a:	2e00      	cmp	r6, #0
 8000b4c:	d149      	bne.n	8000be2 <__aeabi_fadd+0x376>
 8000b4e:	2900      	cmp	r1, #0
 8000b50:	d068      	beq.n	8000c24 <__aeabi_fadd+0x3b8>
 8000b52:	4667      	mov	r7, ip
 8000b54:	464c      	mov	r4, r9
 8000b56:	e77c      	b.n	8000a52 <__aeabi_fadd+0x1e6>
 8000b58:	1870      	adds	r0, r6, r1
 8000b5a:	0143      	lsls	r3, r0, #5
 8000b5c:	d574      	bpl.n	8000c48 <__aeabi_fadd+0x3dc>
 8000b5e:	4930      	ldr	r1, [pc, #192]	@ (8000c20 <__aeabi_fadd+0x3b4>)
 8000b60:	0840      	lsrs	r0, r0, #1
 8000b62:	4001      	ands	r1, r0
 8000b64:	0743      	lsls	r3, r0, #29
 8000b66:	d009      	beq.n	8000b7c <__aeabi_fadd+0x310>
 8000b68:	230f      	movs	r3, #15
 8000b6a:	4003      	ands	r3, r0
 8000b6c:	2b04      	cmp	r3, #4
 8000b6e:	d005      	beq.n	8000b7c <__aeabi_fadd+0x310>
 8000b70:	2302      	movs	r3, #2
 8000b72:	1d0e      	adds	r6, r1, #4
 8000b74:	e6c0      	b.n	80008f8 <__aeabi_fadd+0x8c>
 8000b76:	2301      	movs	r3, #1
 8000b78:	08cf      	lsrs	r7, r1, #3
 8000b7a:	e6c1      	b.n	8000900 <__aeabi_fadd+0x94>
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	08cf      	lsrs	r7, r1, #3
 8000b80:	e6be      	b.n	8000900 <__aeabi_fadd+0x94>
 8000b82:	2520      	movs	r5, #32
 8000b84:	0030      	movs	r0, r6
 8000b86:	40d8      	lsrs	r0, r3
 8000b88:	1aeb      	subs	r3, r5, r3
 8000b8a:	409e      	lsls	r6, r3
 8000b8c:	0033      	movs	r3, r6
 8000b8e:	1e5d      	subs	r5, r3, #1
 8000b90:	41ab      	sbcs	r3, r5
 8000b92:	4303      	orrs	r3, r0
 8000b94:	0015      	movs	r5, r2
 8000b96:	185e      	adds	r6, r3, r1
 8000b98:	e7a0      	b.n	8000adc <__aeabi_fadd+0x270>
 8000b9a:	2900      	cmp	r1, #0
 8000b9c:	d100      	bne.n	8000ba0 <__aeabi_fadd+0x334>
 8000b9e:	e765      	b.n	8000a6c <__aeabi_fadd+0x200>
 8000ba0:	464c      	mov	r4, r9
 8000ba2:	4667      	mov	r7, ip
 8000ba4:	e6ac      	b.n	8000900 <__aeabi_fadd+0x94>
 8000ba6:	1b8f      	subs	r7, r1, r6
 8000ba8:	017b      	lsls	r3, r7, #5
 8000baa:	d52e      	bpl.n	8000c0a <__aeabi_fadd+0x39e>
 8000bac:	01bf      	lsls	r7, r7, #6
 8000bae:	09bf      	lsrs	r7, r7, #6
 8000bb0:	0038      	movs	r0, r7
 8000bb2:	f002 fef9 	bl	80039a8 <__clzsi2>
 8000bb6:	003b      	movs	r3, r7
 8000bb8:	3805      	subs	r0, #5
 8000bba:	4083      	lsls	r3, r0
 8000bbc:	464c      	mov	r4, r9
 8000bbe:	3501      	adds	r5, #1
 8000bc0:	e710      	b.n	80009e4 <__aeabi_fadd+0x178>
 8000bc2:	2e00      	cmp	r6, #0
 8000bc4:	d100      	bne.n	8000bc8 <__aeabi_fadd+0x35c>
 8000bc6:	e740      	b.n	8000a4a <__aeabi_fadd+0x1de>
 8000bc8:	2900      	cmp	r1, #0
 8000bca:	d100      	bne.n	8000bce <__aeabi_fadd+0x362>
 8000bcc:	e741      	b.n	8000a52 <__aeabi_fadd+0x1e6>
 8000bce:	2380      	movs	r3, #128	@ 0x80
 8000bd0:	03db      	lsls	r3, r3, #15
 8000bd2:	429f      	cmp	r7, r3
 8000bd4:	d200      	bcs.n	8000bd8 <__aeabi_fadd+0x36c>
 8000bd6:	e73c      	b.n	8000a52 <__aeabi_fadd+0x1e6>
 8000bd8:	459c      	cmp	ip, r3
 8000bda:	d300      	bcc.n	8000bde <__aeabi_fadd+0x372>
 8000bdc:	e739      	b.n	8000a52 <__aeabi_fadd+0x1e6>
 8000bde:	4667      	mov	r7, ip
 8000be0:	e737      	b.n	8000a52 <__aeabi_fadd+0x1e6>
 8000be2:	2900      	cmp	r1, #0
 8000be4:	d100      	bne.n	8000be8 <__aeabi_fadd+0x37c>
 8000be6:	e734      	b.n	8000a52 <__aeabi_fadd+0x1e6>
 8000be8:	2380      	movs	r3, #128	@ 0x80
 8000bea:	03db      	lsls	r3, r3, #15
 8000bec:	429f      	cmp	r7, r3
 8000bee:	d200      	bcs.n	8000bf2 <__aeabi_fadd+0x386>
 8000bf0:	e72f      	b.n	8000a52 <__aeabi_fadd+0x1e6>
 8000bf2:	459c      	cmp	ip, r3
 8000bf4:	d300      	bcc.n	8000bf8 <__aeabi_fadd+0x38c>
 8000bf6:	e72c      	b.n	8000a52 <__aeabi_fadd+0x1e6>
 8000bf8:	464c      	mov	r4, r9
 8000bfa:	4667      	mov	r7, ip
 8000bfc:	e729      	b.n	8000a52 <__aeabi_fadd+0x1e6>
 8000bfe:	2900      	cmp	r1, #0
 8000c00:	d100      	bne.n	8000c04 <__aeabi_fadd+0x398>
 8000c02:	e734      	b.n	8000a6e <__aeabi_fadd+0x202>
 8000c04:	2300      	movs	r3, #0
 8000c06:	08cf      	lsrs	r7, r1, #3
 8000c08:	e67a      	b.n	8000900 <__aeabi_fadd+0x94>
 8000c0a:	464c      	mov	r4, r9
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	08ff      	lsrs	r7, r7, #3
 8000c10:	e676      	b.n	8000900 <__aeabi_fadd+0x94>
 8000c12:	2f00      	cmp	r7, #0
 8000c14:	d100      	bne.n	8000c18 <__aeabi_fadd+0x3ac>
 8000c16:	e729      	b.n	8000a6c <__aeabi_fadd+0x200>
 8000c18:	08ff      	lsrs	r7, r7, #3
 8000c1a:	e671      	b.n	8000900 <__aeabi_fadd+0x94>
 8000c1c:	fbffffff 	.word	0xfbffffff
 8000c20:	7dffffff 	.word	0x7dffffff
 8000c24:	2280      	movs	r2, #128	@ 0x80
 8000c26:	2400      	movs	r4, #0
 8000c28:	20ff      	movs	r0, #255	@ 0xff
 8000c2a:	03d2      	lsls	r2, r2, #15
 8000c2c:	e69d      	b.n	800096a <__aeabi_fadd+0xfe>
 8000c2e:	2300      	movs	r3, #0
 8000c30:	e666      	b.n	8000900 <__aeabi_fadd+0x94>
 8000c32:	2300      	movs	r3, #0
 8000c34:	08d7      	lsrs	r7, r2, #3
 8000c36:	e663      	b.n	8000900 <__aeabi_fadd+0x94>
 8000c38:	2001      	movs	r0, #1
 8000c3a:	0172      	lsls	r2, r6, #5
 8000c3c:	d500      	bpl.n	8000c40 <__aeabi_fadd+0x3d4>
 8000c3e:	e6e7      	b.n	8000a10 <__aeabi_fadd+0x1a4>
 8000c40:	0031      	movs	r1, r6
 8000c42:	2300      	movs	r3, #0
 8000c44:	08cf      	lsrs	r7, r1, #3
 8000c46:	e65b      	b.n	8000900 <__aeabi_fadd+0x94>
 8000c48:	2301      	movs	r3, #1
 8000c4a:	08c7      	lsrs	r7, r0, #3
 8000c4c:	e658      	b.n	8000900 <__aeabi_fadd+0x94>
 8000c4e:	46c0      	nop			@ (mov r8, r8)

08000c50 <__aeabi_fdiv>:
 8000c50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c52:	4646      	mov	r6, r8
 8000c54:	464f      	mov	r7, r9
 8000c56:	46d6      	mov	lr, sl
 8000c58:	0245      	lsls	r5, r0, #9
 8000c5a:	b5c0      	push	{r6, r7, lr}
 8000c5c:	0fc3      	lsrs	r3, r0, #31
 8000c5e:	0047      	lsls	r7, r0, #1
 8000c60:	4698      	mov	r8, r3
 8000c62:	1c0e      	adds	r6, r1, #0
 8000c64:	0a6d      	lsrs	r5, r5, #9
 8000c66:	0e3f      	lsrs	r7, r7, #24
 8000c68:	d05b      	beq.n	8000d22 <__aeabi_fdiv+0xd2>
 8000c6a:	2fff      	cmp	r7, #255	@ 0xff
 8000c6c:	d021      	beq.n	8000cb2 <__aeabi_fdiv+0x62>
 8000c6e:	2380      	movs	r3, #128	@ 0x80
 8000c70:	00ed      	lsls	r5, r5, #3
 8000c72:	04db      	lsls	r3, r3, #19
 8000c74:	431d      	orrs	r5, r3
 8000c76:	2300      	movs	r3, #0
 8000c78:	4699      	mov	r9, r3
 8000c7a:	469a      	mov	sl, r3
 8000c7c:	3f7f      	subs	r7, #127	@ 0x7f
 8000c7e:	0274      	lsls	r4, r6, #9
 8000c80:	0073      	lsls	r3, r6, #1
 8000c82:	0a64      	lsrs	r4, r4, #9
 8000c84:	0e1b      	lsrs	r3, r3, #24
 8000c86:	0ff6      	lsrs	r6, r6, #31
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d020      	beq.n	8000cce <__aeabi_fdiv+0x7e>
 8000c8c:	2bff      	cmp	r3, #255	@ 0xff
 8000c8e:	d043      	beq.n	8000d18 <__aeabi_fdiv+0xc8>
 8000c90:	2280      	movs	r2, #128	@ 0x80
 8000c92:	2000      	movs	r0, #0
 8000c94:	00e4      	lsls	r4, r4, #3
 8000c96:	04d2      	lsls	r2, r2, #19
 8000c98:	4314      	orrs	r4, r2
 8000c9a:	3b7f      	subs	r3, #127	@ 0x7f
 8000c9c:	4642      	mov	r2, r8
 8000c9e:	1aff      	subs	r7, r7, r3
 8000ca0:	464b      	mov	r3, r9
 8000ca2:	4072      	eors	r2, r6
 8000ca4:	2b0f      	cmp	r3, #15
 8000ca6:	d900      	bls.n	8000caa <__aeabi_fdiv+0x5a>
 8000ca8:	e09d      	b.n	8000de6 <__aeabi_fdiv+0x196>
 8000caa:	4971      	ldr	r1, [pc, #452]	@ (8000e70 <__aeabi_fdiv+0x220>)
 8000cac:	009b      	lsls	r3, r3, #2
 8000cae:	58cb      	ldr	r3, [r1, r3]
 8000cb0:	469f      	mov	pc, r3
 8000cb2:	2d00      	cmp	r5, #0
 8000cb4:	d15a      	bne.n	8000d6c <__aeabi_fdiv+0x11c>
 8000cb6:	2308      	movs	r3, #8
 8000cb8:	4699      	mov	r9, r3
 8000cba:	3b06      	subs	r3, #6
 8000cbc:	0274      	lsls	r4, r6, #9
 8000cbe:	469a      	mov	sl, r3
 8000cc0:	0073      	lsls	r3, r6, #1
 8000cc2:	27ff      	movs	r7, #255	@ 0xff
 8000cc4:	0a64      	lsrs	r4, r4, #9
 8000cc6:	0e1b      	lsrs	r3, r3, #24
 8000cc8:	0ff6      	lsrs	r6, r6, #31
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d1de      	bne.n	8000c8c <__aeabi_fdiv+0x3c>
 8000cce:	2c00      	cmp	r4, #0
 8000cd0:	d13b      	bne.n	8000d4a <__aeabi_fdiv+0xfa>
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	4642      	mov	r2, r8
 8000cd6:	4649      	mov	r1, r9
 8000cd8:	4072      	eors	r2, r6
 8000cda:	4319      	orrs	r1, r3
 8000cdc:	290e      	cmp	r1, #14
 8000cde:	d818      	bhi.n	8000d12 <__aeabi_fdiv+0xc2>
 8000ce0:	4864      	ldr	r0, [pc, #400]	@ (8000e74 <__aeabi_fdiv+0x224>)
 8000ce2:	0089      	lsls	r1, r1, #2
 8000ce4:	5841      	ldr	r1, [r0, r1]
 8000ce6:	468f      	mov	pc, r1
 8000ce8:	4653      	mov	r3, sl
 8000cea:	2b02      	cmp	r3, #2
 8000cec:	d100      	bne.n	8000cf0 <__aeabi_fdiv+0xa0>
 8000cee:	e0b8      	b.n	8000e62 <__aeabi_fdiv+0x212>
 8000cf0:	2b03      	cmp	r3, #3
 8000cf2:	d06e      	beq.n	8000dd2 <__aeabi_fdiv+0x182>
 8000cf4:	4642      	mov	r2, r8
 8000cf6:	002c      	movs	r4, r5
 8000cf8:	2b01      	cmp	r3, #1
 8000cfa:	d140      	bne.n	8000d7e <__aeabi_fdiv+0x12e>
 8000cfc:	2000      	movs	r0, #0
 8000cfe:	2400      	movs	r4, #0
 8000d00:	05c0      	lsls	r0, r0, #23
 8000d02:	4320      	orrs	r0, r4
 8000d04:	07d2      	lsls	r2, r2, #31
 8000d06:	4310      	orrs	r0, r2
 8000d08:	bce0      	pop	{r5, r6, r7}
 8000d0a:	46ba      	mov	sl, r7
 8000d0c:	46b1      	mov	r9, r6
 8000d0e:	46a8      	mov	r8, r5
 8000d10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d12:	20ff      	movs	r0, #255	@ 0xff
 8000d14:	2400      	movs	r4, #0
 8000d16:	e7f3      	b.n	8000d00 <__aeabi_fdiv+0xb0>
 8000d18:	2c00      	cmp	r4, #0
 8000d1a:	d120      	bne.n	8000d5e <__aeabi_fdiv+0x10e>
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	3fff      	subs	r7, #255	@ 0xff
 8000d20:	e7d8      	b.n	8000cd4 <__aeabi_fdiv+0x84>
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d105      	bne.n	8000d32 <__aeabi_fdiv+0xe2>
 8000d26:	2304      	movs	r3, #4
 8000d28:	4699      	mov	r9, r3
 8000d2a:	3b03      	subs	r3, #3
 8000d2c:	2700      	movs	r7, #0
 8000d2e:	469a      	mov	sl, r3
 8000d30:	e7a5      	b.n	8000c7e <__aeabi_fdiv+0x2e>
 8000d32:	0028      	movs	r0, r5
 8000d34:	f002 fe38 	bl	80039a8 <__clzsi2>
 8000d38:	2776      	movs	r7, #118	@ 0x76
 8000d3a:	1f43      	subs	r3, r0, #5
 8000d3c:	409d      	lsls	r5, r3
 8000d3e:	2300      	movs	r3, #0
 8000d40:	427f      	negs	r7, r7
 8000d42:	4699      	mov	r9, r3
 8000d44:	469a      	mov	sl, r3
 8000d46:	1a3f      	subs	r7, r7, r0
 8000d48:	e799      	b.n	8000c7e <__aeabi_fdiv+0x2e>
 8000d4a:	0020      	movs	r0, r4
 8000d4c:	f002 fe2c 	bl	80039a8 <__clzsi2>
 8000d50:	1f43      	subs	r3, r0, #5
 8000d52:	409c      	lsls	r4, r3
 8000d54:	2376      	movs	r3, #118	@ 0x76
 8000d56:	425b      	negs	r3, r3
 8000d58:	1a1b      	subs	r3, r3, r0
 8000d5a:	2000      	movs	r0, #0
 8000d5c:	e79e      	b.n	8000c9c <__aeabi_fdiv+0x4c>
 8000d5e:	2303      	movs	r3, #3
 8000d60:	464a      	mov	r2, r9
 8000d62:	431a      	orrs	r2, r3
 8000d64:	4691      	mov	r9, r2
 8000d66:	2003      	movs	r0, #3
 8000d68:	33fc      	adds	r3, #252	@ 0xfc
 8000d6a:	e797      	b.n	8000c9c <__aeabi_fdiv+0x4c>
 8000d6c:	230c      	movs	r3, #12
 8000d6e:	4699      	mov	r9, r3
 8000d70:	3b09      	subs	r3, #9
 8000d72:	27ff      	movs	r7, #255	@ 0xff
 8000d74:	469a      	mov	sl, r3
 8000d76:	e782      	b.n	8000c7e <__aeabi_fdiv+0x2e>
 8000d78:	2803      	cmp	r0, #3
 8000d7a:	d02c      	beq.n	8000dd6 <__aeabi_fdiv+0x186>
 8000d7c:	0032      	movs	r2, r6
 8000d7e:	0038      	movs	r0, r7
 8000d80:	307f      	adds	r0, #127	@ 0x7f
 8000d82:	2800      	cmp	r0, #0
 8000d84:	dd47      	ble.n	8000e16 <__aeabi_fdiv+0x1c6>
 8000d86:	0763      	lsls	r3, r4, #29
 8000d88:	d004      	beq.n	8000d94 <__aeabi_fdiv+0x144>
 8000d8a:	230f      	movs	r3, #15
 8000d8c:	4023      	ands	r3, r4
 8000d8e:	2b04      	cmp	r3, #4
 8000d90:	d000      	beq.n	8000d94 <__aeabi_fdiv+0x144>
 8000d92:	3404      	adds	r4, #4
 8000d94:	0123      	lsls	r3, r4, #4
 8000d96:	d503      	bpl.n	8000da0 <__aeabi_fdiv+0x150>
 8000d98:	0038      	movs	r0, r7
 8000d9a:	4b37      	ldr	r3, [pc, #220]	@ (8000e78 <__aeabi_fdiv+0x228>)
 8000d9c:	3080      	adds	r0, #128	@ 0x80
 8000d9e:	401c      	ands	r4, r3
 8000da0:	28fe      	cmp	r0, #254	@ 0xfe
 8000da2:	dcb6      	bgt.n	8000d12 <__aeabi_fdiv+0xc2>
 8000da4:	01a4      	lsls	r4, r4, #6
 8000da6:	0a64      	lsrs	r4, r4, #9
 8000da8:	b2c0      	uxtb	r0, r0
 8000daa:	e7a9      	b.n	8000d00 <__aeabi_fdiv+0xb0>
 8000dac:	2480      	movs	r4, #128	@ 0x80
 8000dae:	2200      	movs	r2, #0
 8000db0:	20ff      	movs	r0, #255	@ 0xff
 8000db2:	03e4      	lsls	r4, r4, #15
 8000db4:	e7a4      	b.n	8000d00 <__aeabi_fdiv+0xb0>
 8000db6:	2380      	movs	r3, #128	@ 0x80
 8000db8:	03db      	lsls	r3, r3, #15
 8000dba:	421d      	tst	r5, r3
 8000dbc:	d001      	beq.n	8000dc2 <__aeabi_fdiv+0x172>
 8000dbe:	421c      	tst	r4, r3
 8000dc0:	d00b      	beq.n	8000dda <__aeabi_fdiv+0x18a>
 8000dc2:	2480      	movs	r4, #128	@ 0x80
 8000dc4:	03e4      	lsls	r4, r4, #15
 8000dc6:	432c      	orrs	r4, r5
 8000dc8:	0264      	lsls	r4, r4, #9
 8000dca:	4642      	mov	r2, r8
 8000dcc:	20ff      	movs	r0, #255	@ 0xff
 8000dce:	0a64      	lsrs	r4, r4, #9
 8000dd0:	e796      	b.n	8000d00 <__aeabi_fdiv+0xb0>
 8000dd2:	4646      	mov	r6, r8
 8000dd4:	002c      	movs	r4, r5
 8000dd6:	2380      	movs	r3, #128	@ 0x80
 8000dd8:	03db      	lsls	r3, r3, #15
 8000dda:	431c      	orrs	r4, r3
 8000ddc:	0264      	lsls	r4, r4, #9
 8000dde:	0032      	movs	r2, r6
 8000de0:	20ff      	movs	r0, #255	@ 0xff
 8000de2:	0a64      	lsrs	r4, r4, #9
 8000de4:	e78c      	b.n	8000d00 <__aeabi_fdiv+0xb0>
 8000de6:	016d      	lsls	r5, r5, #5
 8000de8:	0160      	lsls	r0, r4, #5
 8000dea:	4285      	cmp	r5, r0
 8000dec:	d22d      	bcs.n	8000e4a <__aeabi_fdiv+0x1fa>
 8000dee:	231b      	movs	r3, #27
 8000df0:	2400      	movs	r4, #0
 8000df2:	3f01      	subs	r7, #1
 8000df4:	2601      	movs	r6, #1
 8000df6:	0029      	movs	r1, r5
 8000df8:	0064      	lsls	r4, r4, #1
 8000dfa:	006d      	lsls	r5, r5, #1
 8000dfc:	2900      	cmp	r1, #0
 8000dfe:	db01      	blt.n	8000e04 <__aeabi_fdiv+0x1b4>
 8000e00:	4285      	cmp	r5, r0
 8000e02:	d301      	bcc.n	8000e08 <__aeabi_fdiv+0x1b8>
 8000e04:	1a2d      	subs	r5, r5, r0
 8000e06:	4334      	orrs	r4, r6
 8000e08:	3b01      	subs	r3, #1
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d1f3      	bne.n	8000df6 <__aeabi_fdiv+0x1a6>
 8000e0e:	1e6b      	subs	r3, r5, #1
 8000e10:	419d      	sbcs	r5, r3
 8000e12:	432c      	orrs	r4, r5
 8000e14:	e7b3      	b.n	8000d7e <__aeabi_fdiv+0x12e>
 8000e16:	2301      	movs	r3, #1
 8000e18:	1a1b      	subs	r3, r3, r0
 8000e1a:	2b1b      	cmp	r3, #27
 8000e1c:	dd00      	ble.n	8000e20 <__aeabi_fdiv+0x1d0>
 8000e1e:	e76d      	b.n	8000cfc <__aeabi_fdiv+0xac>
 8000e20:	0021      	movs	r1, r4
 8000e22:	379e      	adds	r7, #158	@ 0x9e
 8000e24:	40d9      	lsrs	r1, r3
 8000e26:	40bc      	lsls	r4, r7
 8000e28:	000b      	movs	r3, r1
 8000e2a:	1e61      	subs	r1, r4, #1
 8000e2c:	418c      	sbcs	r4, r1
 8000e2e:	4323      	orrs	r3, r4
 8000e30:	0759      	lsls	r1, r3, #29
 8000e32:	d004      	beq.n	8000e3e <__aeabi_fdiv+0x1ee>
 8000e34:	210f      	movs	r1, #15
 8000e36:	4019      	ands	r1, r3
 8000e38:	2904      	cmp	r1, #4
 8000e3a:	d000      	beq.n	8000e3e <__aeabi_fdiv+0x1ee>
 8000e3c:	3304      	adds	r3, #4
 8000e3e:	0159      	lsls	r1, r3, #5
 8000e40:	d413      	bmi.n	8000e6a <__aeabi_fdiv+0x21a>
 8000e42:	019b      	lsls	r3, r3, #6
 8000e44:	2000      	movs	r0, #0
 8000e46:	0a5c      	lsrs	r4, r3, #9
 8000e48:	e75a      	b.n	8000d00 <__aeabi_fdiv+0xb0>
 8000e4a:	231a      	movs	r3, #26
 8000e4c:	2401      	movs	r4, #1
 8000e4e:	1a2d      	subs	r5, r5, r0
 8000e50:	e7d0      	b.n	8000df4 <__aeabi_fdiv+0x1a4>
 8000e52:	1e98      	subs	r0, r3, #2
 8000e54:	4243      	negs	r3, r0
 8000e56:	4158      	adcs	r0, r3
 8000e58:	4240      	negs	r0, r0
 8000e5a:	0032      	movs	r2, r6
 8000e5c:	2400      	movs	r4, #0
 8000e5e:	b2c0      	uxtb	r0, r0
 8000e60:	e74e      	b.n	8000d00 <__aeabi_fdiv+0xb0>
 8000e62:	4642      	mov	r2, r8
 8000e64:	20ff      	movs	r0, #255	@ 0xff
 8000e66:	2400      	movs	r4, #0
 8000e68:	e74a      	b.n	8000d00 <__aeabi_fdiv+0xb0>
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	2400      	movs	r4, #0
 8000e6e:	e747      	b.n	8000d00 <__aeabi_fdiv+0xb0>
 8000e70:	08011520 	.word	0x08011520
 8000e74:	08011560 	.word	0x08011560
 8000e78:	f7ffffff 	.word	0xf7ffffff

08000e7c <__eqsf2>:
 8000e7c:	b570      	push	{r4, r5, r6, lr}
 8000e7e:	0042      	lsls	r2, r0, #1
 8000e80:	024e      	lsls	r6, r1, #9
 8000e82:	004c      	lsls	r4, r1, #1
 8000e84:	0245      	lsls	r5, r0, #9
 8000e86:	0a6d      	lsrs	r5, r5, #9
 8000e88:	0e12      	lsrs	r2, r2, #24
 8000e8a:	0fc3      	lsrs	r3, r0, #31
 8000e8c:	0a76      	lsrs	r6, r6, #9
 8000e8e:	0e24      	lsrs	r4, r4, #24
 8000e90:	0fc9      	lsrs	r1, r1, #31
 8000e92:	2aff      	cmp	r2, #255	@ 0xff
 8000e94:	d010      	beq.n	8000eb8 <__eqsf2+0x3c>
 8000e96:	2cff      	cmp	r4, #255	@ 0xff
 8000e98:	d00c      	beq.n	8000eb4 <__eqsf2+0x38>
 8000e9a:	2001      	movs	r0, #1
 8000e9c:	42a2      	cmp	r2, r4
 8000e9e:	d10a      	bne.n	8000eb6 <__eqsf2+0x3a>
 8000ea0:	42b5      	cmp	r5, r6
 8000ea2:	d108      	bne.n	8000eb6 <__eqsf2+0x3a>
 8000ea4:	428b      	cmp	r3, r1
 8000ea6:	d00f      	beq.n	8000ec8 <__eqsf2+0x4c>
 8000ea8:	2a00      	cmp	r2, #0
 8000eaa:	d104      	bne.n	8000eb6 <__eqsf2+0x3a>
 8000eac:	0028      	movs	r0, r5
 8000eae:	1e43      	subs	r3, r0, #1
 8000eb0:	4198      	sbcs	r0, r3
 8000eb2:	e000      	b.n	8000eb6 <__eqsf2+0x3a>
 8000eb4:	2001      	movs	r0, #1
 8000eb6:	bd70      	pop	{r4, r5, r6, pc}
 8000eb8:	2001      	movs	r0, #1
 8000eba:	2cff      	cmp	r4, #255	@ 0xff
 8000ebc:	d1fb      	bne.n	8000eb6 <__eqsf2+0x3a>
 8000ebe:	4335      	orrs	r5, r6
 8000ec0:	d1f9      	bne.n	8000eb6 <__eqsf2+0x3a>
 8000ec2:	404b      	eors	r3, r1
 8000ec4:	0018      	movs	r0, r3
 8000ec6:	e7f6      	b.n	8000eb6 <__eqsf2+0x3a>
 8000ec8:	2000      	movs	r0, #0
 8000eca:	e7f4      	b.n	8000eb6 <__eqsf2+0x3a>

08000ecc <__gesf2>:
 8000ecc:	b530      	push	{r4, r5, lr}
 8000ece:	0042      	lsls	r2, r0, #1
 8000ed0:	0244      	lsls	r4, r0, #9
 8000ed2:	024d      	lsls	r5, r1, #9
 8000ed4:	0fc3      	lsrs	r3, r0, #31
 8000ed6:	0048      	lsls	r0, r1, #1
 8000ed8:	0a64      	lsrs	r4, r4, #9
 8000eda:	0e12      	lsrs	r2, r2, #24
 8000edc:	0a6d      	lsrs	r5, r5, #9
 8000ede:	0e00      	lsrs	r0, r0, #24
 8000ee0:	0fc9      	lsrs	r1, r1, #31
 8000ee2:	2aff      	cmp	r2, #255	@ 0xff
 8000ee4:	d018      	beq.n	8000f18 <__gesf2+0x4c>
 8000ee6:	28ff      	cmp	r0, #255	@ 0xff
 8000ee8:	d00a      	beq.n	8000f00 <__gesf2+0x34>
 8000eea:	2a00      	cmp	r2, #0
 8000eec:	d11e      	bne.n	8000f2c <__gesf2+0x60>
 8000eee:	2800      	cmp	r0, #0
 8000ef0:	d10a      	bne.n	8000f08 <__gesf2+0x3c>
 8000ef2:	2d00      	cmp	r5, #0
 8000ef4:	d029      	beq.n	8000f4a <__gesf2+0x7e>
 8000ef6:	2c00      	cmp	r4, #0
 8000ef8:	d12d      	bne.n	8000f56 <__gesf2+0x8a>
 8000efa:	0048      	lsls	r0, r1, #1
 8000efc:	3801      	subs	r0, #1
 8000efe:	bd30      	pop	{r4, r5, pc}
 8000f00:	2d00      	cmp	r5, #0
 8000f02:	d125      	bne.n	8000f50 <__gesf2+0x84>
 8000f04:	2a00      	cmp	r2, #0
 8000f06:	d101      	bne.n	8000f0c <__gesf2+0x40>
 8000f08:	2c00      	cmp	r4, #0
 8000f0a:	d0f6      	beq.n	8000efa <__gesf2+0x2e>
 8000f0c:	428b      	cmp	r3, r1
 8000f0e:	d019      	beq.n	8000f44 <__gesf2+0x78>
 8000f10:	2001      	movs	r0, #1
 8000f12:	425b      	negs	r3, r3
 8000f14:	4318      	orrs	r0, r3
 8000f16:	e7f2      	b.n	8000efe <__gesf2+0x32>
 8000f18:	2c00      	cmp	r4, #0
 8000f1a:	d119      	bne.n	8000f50 <__gesf2+0x84>
 8000f1c:	28ff      	cmp	r0, #255	@ 0xff
 8000f1e:	d1f7      	bne.n	8000f10 <__gesf2+0x44>
 8000f20:	2d00      	cmp	r5, #0
 8000f22:	d115      	bne.n	8000f50 <__gesf2+0x84>
 8000f24:	2000      	movs	r0, #0
 8000f26:	428b      	cmp	r3, r1
 8000f28:	d1f2      	bne.n	8000f10 <__gesf2+0x44>
 8000f2a:	e7e8      	b.n	8000efe <__gesf2+0x32>
 8000f2c:	2800      	cmp	r0, #0
 8000f2e:	d0ef      	beq.n	8000f10 <__gesf2+0x44>
 8000f30:	428b      	cmp	r3, r1
 8000f32:	d1ed      	bne.n	8000f10 <__gesf2+0x44>
 8000f34:	4282      	cmp	r2, r0
 8000f36:	dceb      	bgt.n	8000f10 <__gesf2+0x44>
 8000f38:	db04      	blt.n	8000f44 <__gesf2+0x78>
 8000f3a:	42ac      	cmp	r4, r5
 8000f3c:	d8e8      	bhi.n	8000f10 <__gesf2+0x44>
 8000f3e:	2000      	movs	r0, #0
 8000f40:	42ac      	cmp	r4, r5
 8000f42:	d2dc      	bcs.n	8000efe <__gesf2+0x32>
 8000f44:	0058      	lsls	r0, r3, #1
 8000f46:	3801      	subs	r0, #1
 8000f48:	e7d9      	b.n	8000efe <__gesf2+0x32>
 8000f4a:	2c00      	cmp	r4, #0
 8000f4c:	d0d7      	beq.n	8000efe <__gesf2+0x32>
 8000f4e:	e7df      	b.n	8000f10 <__gesf2+0x44>
 8000f50:	2002      	movs	r0, #2
 8000f52:	4240      	negs	r0, r0
 8000f54:	e7d3      	b.n	8000efe <__gesf2+0x32>
 8000f56:	428b      	cmp	r3, r1
 8000f58:	d1da      	bne.n	8000f10 <__gesf2+0x44>
 8000f5a:	e7ee      	b.n	8000f3a <__gesf2+0x6e>

08000f5c <__lesf2>:
 8000f5c:	b530      	push	{r4, r5, lr}
 8000f5e:	0042      	lsls	r2, r0, #1
 8000f60:	0244      	lsls	r4, r0, #9
 8000f62:	024d      	lsls	r5, r1, #9
 8000f64:	0fc3      	lsrs	r3, r0, #31
 8000f66:	0048      	lsls	r0, r1, #1
 8000f68:	0a64      	lsrs	r4, r4, #9
 8000f6a:	0e12      	lsrs	r2, r2, #24
 8000f6c:	0a6d      	lsrs	r5, r5, #9
 8000f6e:	0e00      	lsrs	r0, r0, #24
 8000f70:	0fc9      	lsrs	r1, r1, #31
 8000f72:	2aff      	cmp	r2, #255	@ 0xff
 8000f74:	d017      	beq.n	8000fa6 <__lesf2+0x4a>
 8000f76:	28ff      	cmp	r0, #255	@ 0xff
 8000f78:	d00a      	beq.n	8000f90 <__lesf2+0x34>
 8000f7a:	2a00      	cmp	r2, #0
 8000f7c:	d11b      	bne.n	8000fb6 <__lesf2+0x5a>
 8000f7e:	2800      	cmp	r0, #0
 8000f80:	d10a      	bne.n	8000f98 <__lesf2+0x3c>
 8000f82:	2d00      	cmp	r5, #0
 8000f84:	d01d      	beq.n	8000fc2 <__lesf2+0x66>
 8000f86:	2c00      	cmp	r4, #0
 8000f88:	d12d      	bne.n	8000fe6 <__lesf2+0x8a>
 8000f8a:	0048      	lsls	r0, r1, #1
 8000f8c:	3801      	subs	r0, #1
 8000f8e:	e011      	b.n	8000fb4 <__lesf2+0x58>
 8000f90:	2d00      	cmp	r5, #0
 8000f92:	d10e      	bne.n	8000fb2 <__lesf2+0x56>
 8000f94:	2a00      	cmp	r2, #0
 8000f96:	d101      	bne.n	8000f9c <__lesf2+0x40>
 8000f98:	2c00      	cmp	r4, #0
 8000f9a:	d0f6      	beq.n	8000f8a <__lesf2+0x2e>
 8000f9c:	428b      	cmp	r3, r1
 8000f9e:	d10c      	bne.n	8000fba <__lesf2+0x5e>
 8000fa0:	0058      	lsls	r0, r3, #1
 8000fa2:	3801      	subs	r0, #1
 8000fa4:	e006      	b.n	8000fb4 <__lesf2+0x58>
 8000fa6:	2c00      	cmp	r4, #0
 8000fa8:	d103      	bne.n	8000fb2 <__lesf2+0x56>
 8000faa:	28ff      	cmp	r0, #255	@ 0xff
 8000fac:	d105      	bne.n	8000fba <__lesf2+0x5e>
 8000fae:	2d00      	cmp	r5, #0
 8000fb0:	d015      	beq.n	8000fde <__lesf2+0x82>
 8000fb2:	2002      	movs	r0, #2
 8000fb4:	bd30      	pop	{r4, r5, pc}
 8000fb6:	2800      	cmp	r0, #0
 8000fb8:	d106      	bne.n	8000fc8 <__lesf2+0x6c>
 8000fba:	2001      	movs	r0, #1
 8000fbc:	425b      	negs	r3, r3
 8000fbe:	4318      	orrs	r0, r3
 8000fc0:	e7f8      	b.n	8000fb4 <__lesf2+0x58>
 8000fc2:	2c00      	cmp	r4, #0
 8000fc4:	d0f6      	beq.n	8000fb4 <__lesf2+0x58>
 8000fc6:	e7f8      	b.n	8000fba <__lesf2+0x5e>
 8000fc8:	428b      	cmp	r3, r1
 8000fca:	d1f6      	bne.n	8000fba <__lesf2+0x5e>
 8000fcc:	4282      	cmp	r2, r0
 8000fce:	dcf4      	bgt.n	8000fba <__lesf2+0x5e>
 8000fd0:	dbe6      	blt.n	8000fa0 <__lesf2+0x44>
 8000fd2:	42ac      	cmp	r4, r5
 8000fd4:	d8f1      	bhi.n	8000fba <__lesf2+0x5e>
 8000fd6:	2000      	movs	r0, #0
 8000fd8:	42ac      	cmp	r4, r5
 8000fda:	d2eb      	bcs.n	8000fb4 <__lesf2+0x58>
 8000fdc:	e7e0      	b.n	8000fa0 <__lesf2+0x44>
 8000fde:	2000      	movs	r0, #0
 8000fe0:	428b      	cmp	r3, r1
 8000fe2:	d1ea      	bne.n	8000fba <__lesf2+0x5e>
 8000fe4:	e7e6      	b.n	8000fb4 <__lesf2+0x58>
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	d1e7      	bne.n	8000fba <__lesf2+0x5e>
 8000fea:	e7f2      	b.n	8000fd2 <__lesf2+0x76>

08000fec <__aeabi_fmul>:
 8000fec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fee:	464f      	mov	r7, r9
 8000ff0:	4646      	mov	r6, r8
 8000ff2:	46d6      	mov	lr, sl
 8000ff4:	0044      	lsls	r4, r0, #1
 8000ff6:	b5c0      	push	{r6, r7, lr}
 8000ff8:	0246      	lsls	r6, r0, #9
 8000ffa:	1c0f      	adds	r7, r1, #0
 8000ffc:	0a76      	lsrs	r6, r6, #9
 8000ffe:	0e24      	lsrs	r4, r4, #24
 8001000:	0fc5      	lsrs	r5, r0, #31
 8001002:	2c00      	cmp	r4, #0
 8001004:	d100      	bne.n	8001008 <__aeabi_fmul+0x1c>
 8001006:	e0da      	b.n	80011be <__aeabi_fmul+0x1d2>
 8001008:	2cff      	cmp	r4, #255	@ 0xff
 800100a:	d074      	beq.n	80010f6 <__aeabi_fmul+0x10a>
 800100c:	2380      	movs	r3, #128	@ 0x80
 800100e:	00f6      	lsls	r6, r6, #3
 8001010:	04db      	lsls	r3, r3, #19
 8001012:	431e      	orrs	r6, r3
 8001014:	2300      	movs	r3, #0
 8001016:	4699      	mov	r9, r3
 8001018:	469a      	mov	sl, r3
 800101a:	3c7f      	subs	r4, #127	@ 0x7f
 800101c:	027b      	lsls	r3, r7, #9
 800101e:	0a5b      	lsrs	r3, r3, #9
 8001020:	4698      	mov	r8, r3
 8001022:	007b      	lsls	r3, r7, #1
 8001024:	0e1b      	lsrs	r3, r3, #24
 8001026:	0fff      	lsrs	r7, r7, #31
 8001028:	2b00      	cmp	r3, #0
 800102a:	d074      	beq.n	8001116 <__aeabi_fmul+0x12a>
 800102c:	2bff      	cmp	r3, #255	@ 0xff
 800102e:	d100      	bne.n	8001032 <__aeabi_fmul+0x46>
 8001030:	e08e      	b.n	8001150 <__aeabi_fmul+0x164>
 8001032:	4642      	mov	r2, r8
 8001034:	2180      	movs	r1, #128	@ 0x80
 8001036:	00d2      	lsls	r2, r2, #3
 8001038:	04c9      	lsls	r1, r1, #19
 800103a:	4311      	orrs	r1, r2
 800103c:	3b7f      	subs	r3, #127	@ 0x7f
 800103e:	002a      	movs	r2, r5
 8001040:	18e4      	adds	r4, r4, r3
 8001042:	464b      	mov	r3, r9
 8001044:	407a      	eors	r2, r7
 8001046:	4688      	mov	r8, r1
 8001048:	b2d2      	uxtb	r2, r2
 800104a:	2b0a      	cmp	r3, #10
 800104c:	dc75      	bgt.n	800113a <__aeabi_fmul+0x14e>
 800104e:	464b      	mov	r3, r9
 8001050:	2000      	movs	r0, #0
 8001052:	2b02      	cmp	r3, #2
 8001054:	dd0f      	ble.n	8001076 <__aeabi_fmul+0x8a>
 8001056:	4649      	mov	r1, r9
 8001058:	2301      	movs	r3, #1
 800105a:	408b      	lsls	r3, r1
 800105c:	21a6      	movs	r1, #166	@ 0xa6
 800105e:	00c9      	lsls	r1, r1, #3
 8001060:	420b      	tst	r3, r1
 8001062:	d169      	bne.n	8001138 <__aeabi_fmul+0x14c>
 8001064:	2190      	movs	r1, #144	@ 0x90
 8001066:	0089      	lsls	r1, r1, #2
 8001068:	420b      	tst	r3, r1
 800106a:	d000      	beq.n	800106e <__aeabi_fmul+0x82>
 800106c:	e100      	b.n	8001270 <__aeabi_fmul+0x284>
 800106e:	2188      	movs	r1, #136	@ 0x88
 8001070:	4219      	tst	r1, r3
 8001072:	d000      	beq.n	8001076 <__aeabi_fmul+0x8a>
 8001074:	e0f5      	b.n	8001262 <__aeabi_fmul+0x276>
 8001076:	4641      	mov	r1, r8
 8001078:	0409      	lsls	r1, r1, #16
 800107a:	0c09      	lsrs	r1, r1, #16
 800107c:	4643      	mov	r3, r8
 800107e:	0008      	movs	r0, r1
 8001080:	0c35      	lsrs	r5, r6, #16
 8001082:	0436      	lsls	r6, r6, #16
 8001084:	0c1b      	lsrs	r3, r3, #16
 8001086:	0c36      	lsrs	r6, r6, #16
 8001088:	4370      	muls	r0, r6
 800108a:	4369      	muls	r1, r5
 800108c:	435e      	muls	r6, r3
 800108e:	435d      	muls	r5, r3
 8001090:	1876      	adds	r6, r6, r1
 8001092:	0c03      	lsrs	r3, r0, #16
 8001094:	199b      	adds	r3, r3, r6
 8001096:	4299      	cmp	r1, r3
 8001098:	d903      	bls.n	80010a2 <__aeabi_fmul+0xb6>
 800109a:	2180      	movs	r1, #128	@ 0x80
 800109c:	0249      	lsls	r1, r1, #9
 800109e:	468c      	mov	ip, r1
 80010a0:	4465      	add	r5, ip
 80010a2:	0400      	lsls	r0, r0, #16
 80010a4:	0419      	lsls	r1, r3, #16
 80010a6:	0c00      	lsrs	r0, r0, #16
 80010a8:	1809      	adds	r1, r1, r0
 80010aa:	018e      	lsls	r6, r1, #6
 80010ac:	1e70      	subs	r0, r6, #1
 80010ae:	4186      	sbcs	r6, r0
 80010b0:	0c1b      	lsrs	r3, r3, #16
 80010b2:	0e89      	lsrs	r1, r1, #26
 80010b4:	195b      	adds	r3, r3, r5
 80010b6:	430e      	orrs	r6, r1
 80010b8:	019b      	lsls	r3, r3, #6
 80010ba:	431e      	orrs	r6, r3
 80010bc:	011b      	lsls	r3, r3, #4
 80010be:	d46c      	bmi.n	800119a <__aeabi_fmul+0x1ae>
 80010c0:	0023      	movs	r3, r4
 80010c2:	337f      	adds	r3, #127	@ 0x7f
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	dc00      	bgt.n	80010ca <__aeabi_fmul+0xde>
 80010c8:	e0b1      	b.n	800122e <__aeabi_fmul+0x242>
 80010ca:	0015      	movs	r5, r2
 80010cc:	0771      	lsls	r1, r6, #29
 80010ce:	d00b      	beq.n	80010e8 <__aeabi_fmul+0xfc>
 80010d0:	200f      	movs	r0, #15
 80010d2:	0021      	movs	r1, r4
 80010d4:	4030      	ands	r0, r6
 80010d6:	2804      	cmp	r0, #4
 80010d8:	d006      	beq.n	80010e8 <__aeabi_fmul+0xfc>
 80010da:	3604      	adds	r6, #4
 80010dc:	0132      	lsls	r2, r6, #4
 80010de:	d503      	bpl.n	80010e8 <__aeabi_fmul+0xfc>
 80010e0:	4b6e      	ldr	r3, [pc, #440]	@ (800129c <__aeabi_fmul+0x2b0>)
 80010e2:	401e      	ands	r6, r3
 80010e4:	000b      	movs	r3, r1
 80010e6:	3380      	adds	r3, #128	@ 0x80
 80010e8:	2bfe      	cmp	r3, #254	@ 0xfe
 80010ea:	dd00      	ble.n	80010ee <__aeabi_fmul+0x102>
 80010ec:	e0bd      	b.n	800126a <__aeabi_fmul+0x27e>
 80010ee:	01b2      	lsls	r2, r6, #6
 80010f0:	0a52      	lsrs	r2, r2, #9
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	e048      	b.n	8001188 <__aeabi_fmul+0x19c>
 80010f6:	2e00      	cmp	r6, #0
 80010f8:	d000      	beq.n	80010fc <__aeabi_fmul+0x110>
 80010fa:	e092      	b.n	8001222 <__aeabi_fmul+0x236>
 80010fc:	2308      	movs	r3, #8
 80010fe:	4699      	mov	r9, r3
 8001100:	3b06      	subs	r3, #6
 8001102:	469a      	mov	sl, r3
 8001104:	027b      	lsls	r3, r7, #9
 8001106:	0a5b      	lsrs	r3, r3, #9
 8001108:	4698      	mov	r8, r3
 800110a:	007b      	lsls	r3, r7, #1
 800110c:	24ff      	movs	r4, #255	@ 0xff
 800110e:	0e1b      	lsrs	r3, r3, #24
 8001110:	0fff      	lsrs	r7, r7, #31
 8001112:	2b00      	cmp	r3, #0
 8001114:	d18a      	bne.n	800102c <__aeabi_fmul+0x40>
 8001116:	4642      	mov	r2, r8
 8001118:	2a00      	cmp	r2, #0
 800111a:	d164      	bne.n	80011e6 <__aeabi_fmul+0x1fa>
 800111c:	4649      	mov	r1, r9
 800111e:	3201      	adds	r2, #1
 8001120:	4311      	orrs	r1, r2
 8001122:	4689      	mov	r9, r1
 8001124:	290a      	cmp	r1, #10
 8001126:	dc08      	bgt.n	800113a <__aeabi_fmul+0x14e>
 8001128:	407d      	eors	r5, r7
 800112a:	2001      	movs	r0, #1
 800112c:	b2ea      	uxtb	r2, r5
 800112e:	2902      	cmp	r1, #2
 8001130:	dc91      	bgt.n	8001056 <__aeabi_fmul+0x6a>
 8001132:	0015      	movs	r5, r2
 8001134:	2200      	movs	r2, #0
 8001136:	e027      	b.n	8001188 <__aeabi_fmul+0x19c>
 8001138:	0015      	movs	r5, r2
 800113a:	4653      	mov	r3, sl
 800113c:	2b02      	cmp	r3, #2
 800113e:	d100      	bne.n	8001142 <__aeabi_fmul+0x156>
 8001140:	e093      	b.n	800126a <__aeabi_fmul+0x27e>
 8001142:	2b03      	cmp	r3, #3
 8001144:	d01a      	beq.n	800117c <__aeabi_fmul+0x190>
 8001146:	2b01      	cmp	r3, #1
 8001148:	d12c      	bne.n	80011a4 <__aeabi_fmul+0x1b8>
 800114a:	2300      	movs	r3, #0
 800114c:	2200      	movs	r2, #0
 800114e:	e01b      	b.n	8001188 <__aeabi_fmul+0x19c>
 8001150:	4643      	mov	r3, r8
 8001152:	34ff      	adds	r4, #255	@ 0xff
 8001154:	2b00      	cmp	r3, #0
 8001156:	d055      	beq.n	8001204 <__aeabi_fmul+0x218>
 8001158:	2103      	movs	r1, #3
 800115a:	464b      	mov	r3, r9
 800115c:	430b      	orrs	r3, r1
 800115e:	0019      	movs	r1, r3
 8001160:	2b0a      	cmp	r3, #10
 8001162:	dc00      	bgt.n	8001166 <__aeabi_fmul+0x17a>
 8001164:	e092      	b.n	800128c <__aeabi_fmul+0x2a0>
 8001166:	2b0f      	cmp	r3, #15
 8001168:	d000      	beq.n	800116c <__aeabi_fmul+0x180>
 800116a:	e08c      	b.n	8001286 <__aeabi_fmul+0x29a>
 800116c:	2280      	movs	r2, #128	@ 0x80
 800116e:	03d2      	lsls	r2, r2, #15
 8001170:	4216      	tst	r6, r2
 8001172:	d003      	beq.n	800117c <__aeabi_fmul+0x190>
 8001174:	4643      	mov	r3, r8
 8001176:	4213      	tst	r3, r2
 8001178:	d100      	bne.n	800117c <__aeabi_fmul+0x190>
 800117a:	e07d      	b.n	8001278 <__aeabi_fmul+0x28c>
 800117c:	2280      	movs	r2, #128	@ 0x80
 800117e:	03d2      	lsls	r2, r2, #15
 8001180:	4332      	orrs	r2, r6
 8001182:	0252      	lsls	r2, r2, #9
 8001184:	0a52      	lsrs	r2, r2, #9
 8001186:	23ff      	movs	r3, #255	@ 0xff
 8001188:	05d8      	lsls	r0, r3, #23
 800118a:	07ed      	lsls	r5, r5, #31
 800118c:	4310      	orrs	r0, r2
 800118e:	4328      	orrs	r0, r5
 8001190:	bce0      	pop	{r5, r6, r7}
 8001192:	46ba      	mov	sl, r7
 8001194:	46b1      	mov	r9, r6
 8001196:	46a8      	mov	r8, r5
 8001198:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800119a:	2301      	movs	r3, #1
 800119c:	0015      	movs	r5, r2
 800119e:	0871      	lsrs	r1, r6, #1
 80011a0:	401e      	ands	r6, r3
 80011a2:	430e      	orrs	r6, r1
 80011a4:	0023      	movs	r3, r4
 80011a6:	3380      	adds	r3, #128	@ 0x80
 80011a8:	1c61      	adds	r1, r4, #1
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	dd41      	ble.n	8001232 <__aeabi_fmul+0x246>
 80011ae:	0772      	lsls	r2, r6, #29
 80011b0:	d094      	beq.n	80010dc <__aeabi_fmul+0xf0>
 80011b2:	220f      	movs	r2, #15
 80011b4:	4032      	ands	r2, r6
 80011b6:	2a04      	cmp	r2, #4
 80011b8:	d000      	beq.n	80011bc <__aeabi_fmul+0x1d0>
 80011ba:	e78e      	b.n	80010da <__aeabi_fmul+0xee>
 80011bc:	e78e      	b.n	80010dc <__aeabi_fmul+0xf0>
 80011be:	2e00      	cmp	r6, #0
 80011c0:	d105      	bne.n	80011ce <__aeabi_fmul+0x1e2>
 80011c2:	2304      	movs	r3, #4
 80011c4:	4699      	mov	r9, r3
 80011c6:	3b03      	subs	r3, #3
 80011c8:	2400      	movs	r4, #0
 80011ca:	469a      	mov	sl, r3
 80011cc:	e726      	b.n	800101c <__aeabi_fmul+0x30>
 80011ce:	0030      	movs	r0, r6
 80011d0:	f002 fbea 	bl	80039a8 <__clzsi2>
 80011d4:	2476      	movs	r4, #118	@ 0x76
 80011d6:	1f43      	subs	r3, r0, #5
 80011d8:	409e      	lsls	r6, r3
 80011da:	2300      	movs	r3, #0
 80011dc:	4264      	negs	r4, r4
 80011de:	4699      	mov	r9, r3
 80011e0:	469a      	mov	sl, r3
 80011e2:	1a24      	subs	r4, r4, r0
 80011e4:	e71a      	b.n	800101c <__aeabi_fmul+0x30>
 80011e6:	4640      	mov	r0, r8
 80011e8:	f002 fbde 	bl	80039a8 <__clzsi2>
 80011ec:	464b      	mov	r3, r9
 80011ee:	1a24      	subs	r4, r4, r0
 80011f0:	3c76      	subs	r4, #118	@ 0x76
 80011f2:	2b0a      	cmp	r3, #10
 80011f4:	dca1      	bgt.n	800113a <__aeabi_fmul+0x14e>
 80011f6:	4643      	mov	r3, r8
 80011f8:	3805      	subs	r0, #5
 80011fa:	4083      	lsls	r3, r0
 80011fc:	407d      	eors	r5, r7
 80011fe:	4698      	mov	r8, r3
 8001200:	b2ea      	uxtb	r2, r5
 8001202:	e724      	b.n	800104e <__aeabi_fmul+0x62>
 8001204:	464a      	mov	r2, r9
 8001206:	3302      	adds	r3, #2
 8001208:	4313      	orrs	r3, r2
 800120a:	002a      	movs	r2, r5
 800120c:	407a      	eors	r2, r7
 800120e:	b2d2      	uxtb	r2, r2
 8001210:	2b0a      	cmp	r3, #10
 8001212:	dc92      	bgt.n	800113a <__aeabi_fmul+0x14e>
 8001214:	4649      	mov	r1, r9
 8001216:	0015      	movs	r5, r2
 8001218:	2900      	cmp	r1, #0
 800121a:	d026      	beq.n	800126a <__aeabi_fmul+0x27e>
 800121c:	4699      	mov	r9, r3
 800121e:	2002      	movs	r0, #2
 8001220:	e719      	b.n	8001056 <__aeabi_fmul+0x6a>
 8001222:	230c      	movs	r3, #12
 8001224:	4699      	mov	r9, r3
 8001226:	3b09      	subs	r3, #9
 8001228:	24ff      	movs	r4, #255	@ 0xff
 800122a:	469a      	mov	sl, r3
 800122c:	e6f6      	b.n	800101c <__aeabi_fmul+0x30>
 800122e:	0015      	movs	r5, r2
 8001230:	0021      	movs	r1, r4
 8001232:	2201      	movs	r2, #1
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	2b1b      	cmp	r3, #27
 8001238:	dd00      	ble.n	800123c <__aeabi_fmul+0x250>
 800123a:	e786      	b.n	800114a <__aeabi_fmul+0x15e>
 800123c:	319e      	adds	r1, #158	@ 0x9e
 800123e:	0032      	movs	r2, r6
 8001240:	408e      	lsls	r6, r1
 8001242:	40da      	lsrs	r2, r3
 8001244:	1e73      	subs	r3, r6, #1
 8001246:	419e      	sbcs	r6, r3
 8001248:	4332      	orrs	r2, r6
 800124a:	0753      	lsls	r3, r2, #29
 800124c:	d004      	beq.n	8001258 <__aeabi_fmul+0x26c>
 800124e:	230f      	movs	r3, #15
 8001250:	4013      	ands	r3, r2
 8001252:	2b04      	cmp	r3, #4
 8001254:	d000      	beq.n	8001258 <__aeabi_fmul+0x26c>
 8001256:	3204      	adds	r2, #4
 8001258:	0153      	lsls	r3, r2, #5
 800125a:	d510      	bpl.n	800127e <__aeabi_fmul+0x292>
 800125c:	2301      	movs	r3, #1
 800125e:	2200      	movs	r2, #0
 8001260:	e792      	b.n	8001188 <__aeabi_fmul+0x19c>
 8001262:	003d      	movs	r5, r7
 8001264:	4646      	mov	r6, r8
 8001266:	4682      	mov	sl, r0
 8001268:	e767      	b.n	800113a <__aeabi_fmul+0x14e>
 800126a:	23ff      	movs	r3, #255	@ 0xff
 800126c:	2200      	movs	r2, #0
 800126e:	e78b      	b.n	8001188 <__aeabi_fmul+0x19c>
 8001270:	2280      	movs	r2, #128	@ 0x80
 8001272:	2500      	movs	r5, #0
 8001274:	03d2      	lsls	r2, r2, #15
 8001276:	e786      	b.n	8001186 <__aeabi_fmul+0x19a>
 8001278:	003d      	movs	r5, r7
 800127a:	431a      	orrs	r2, r3
 800127c:	e783      	b.n	8001186 <__aeabi_fmul+0x19a>
 800127e:	0192      	lsls	r2, r2, #6
 8001280:	2300      	movs	r3, #0
 8001282:	0a52      	lsrs	r2, r2, #9
 8001284:	e780      	b.n	8001188 <__aeabi_fmul+0x19c>
 8001286:	003d      	movs	r5, r7
 8001288:	4646      	mov	r6, r8
 800128a:	e777      	b.n	800117c <__aeabi_fmul+0x190>
 800128c:	002a      	movs	r2, r5
 800128e:	2301      	movs	r3, #1
 8001290:	407a      	eors	r2, r7
 8001292:	408b      	lsls	r3, r1
 8001294:	2003      	movs	r0, #3
 8001296:	b2d2      	uxtb	r2, r2
 8001298:	e6e9      	b.n	800106e <__aeabi_fmul+0x82>
 800129a:	46c0      	nop			@ (mov r8, r8)
 800129c:	f7ffffff 	.word	0xf7ffffff

080012a0 <__aeabi_fsub>:
 80012a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012a2:	4647      	mov	r7, r8
 80012a4:	46ce      	mov	lr, r9
 80012a6:	0243      	lsls	r3, r0, #9
 80012a8:	b580      	push	{r7, lr}
 80012aa:	0a5f      	lsrs	r7, r3, #9
 80012ac:	099b      	lsrs	r3, r3, #6
 80012ae:	0045      	lsls	r5, r0, #1
 80012b0:	004a      	lsls	r2, r1, #1
 80012b2:	469c      	mov	ip, r3
 80012b4:	024b      	lsls	r3, r1, #9
 80012b6:	0fc4      	lsrs	r4, r0, #31
 80012b8:	0fce      	lsrs	r6, r1, #31
 80012ba:	0e2d      	lsrs	r5, r5, #24
 80012bc:	0a58      	lsrs	r0, r3, #9
 80012be:	0e12      	lsrs	r2, r2, #24
 80012c0:	0999      	lsrs	r1, r3, #6
 80012c2:	2aff      	cmp	r2, #255	@ 0xff
 80012c4:	d06b      	beq.n	800139e <__aeabi_fsub+0xfe>
 80012c6:	2301      	movs	r3, #1
 80012c8:	405e      	eors	r6, r3
 80012ca:	1aab      	subs	r3, r5, r2
 80012cc:	42b4      	cmp	r4, r6
 80012ce:	d04b      	beq.n	8001368 <__aeabi_fsub+0xc8>
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	dc00      	bgt.n	80012d6 <__aeabi_fsub+0x36>
 80012d4:	e0ff      	b.n	80014d6 <__aeabi_fsub+0x236>
 80012d6:	2a00      	cmp	r2, #0
 80012d8:	d100      	bne.n	80012dc <__aeabi_fsub+0x3c>
 80012da:	e088      	b.n	80013ee <__aeabi_fsub+0x14e>
 80012dc:	2dff      	cmp	r5, #255	@ 0xff
 80012de:	d100      	bne.n	80012e2 <__aeabi_fsub+0x42>
 80012e0:	e0ef      	b.n	80014c2 <__aeabi_fsub+0x222>
 80012e2:	2280      	movs	r2, #128	@ 0x80
 80012e4:	04d2      	lsls	r2, r2, #19
 80012e6:	4311      	orrs	r1, r2
 80012e8:	2001      	movs	r0, #1
 80012ea:	2b1b      	cmp	r3, #27
 80012ec:	dc08      	bgt.n	8001300 <__aeabi_fsub+0x60>
 80012ee:	0008      	movs	r0, r1
 80012f0:	2220      	movs	r2, #32
 80012f2:	40d8      	lsrs	r0, r3
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	4099      	lsls	r1, r3
 80012f8:	000b      	movs	r3, r1
 80012fa:	1e5a      	subs	r2, r3, #1
 80012fc:	4193      	sbcs	r3, r2
 80012fe:	4318      	orrs	r0, r3
 8001300:	4663      	mov	r3, ip
 8001302:	1a1b      	subs	r3, r3, r0
 8001304:	469c      	mov	ip, r3
 8001306:	4663      	mov	r3, ip
 8001308:	015b      	lsls	r3, r3, #5
 800130a:	d400      	bmi.n	800130e <__aeabi_fsub+0x6e>
 800130c:	e0cd      	b.n	80014aa <__aeabi_fsub+0x20a>
 800130e:	4663      	mov	r3, ip
 8001310:	019f      	lsls	r7, r3, #6
 8001312:	09bf      	lsrs	r7, r7, #6
 8001314:	0038      	movs	r0, r7
 8001316:	f002 fb47 	bl	80039a8 <__clzsi2>
 800131a:	003b      	movs	r3, r7
 800131c:	3805      	subs	r0, #5
 800131e:	4083      	lsls	r3, r0
 8001320:	4285      	cmp	r5, r0
 8001322:	dc00      	bgt.n	8001326 <__aeabi_fsub+0x86>
 8001324:	e0a2      	b.n	800146c <__aeabi_fsub+0x1cc>
 8001326:	4ab7      	ldr	r2, [pc, #732]	@ (8001604 <__aeabi_fsub+0x364>)
 8001328:	1a2d      	subs	r5, r5, r0
 800132a:	401a      	ands	r2, r3
 800132c:	4694      	mov	ip, r2
 800132e:	075a      	lsls	r2, r3, #29
 8001330:	d100      	bne.n	8001334 <__aeabi_fsub+0x94>
 8001332:	e0c3      	b.n	80014bc <__aeabi_fsub+0x21c>
 8001334:	220f      	movs	r2, #15
 8001336:	4013      	ands	r3, r2
 8001338:	2b04      	cmp	r3, #4
 800133a:	d100      	bne.n	800133e <__aeabi_fsub+0x9e>
 800133c:	e0be      	b.n	80014bc <__aeabi_fsub+0x21c>
 800133e:	2304      	movs	r3, #4
 8001340:	4698      	mov	r8, r3
 8001342:	44c4      	add	ip, r8
 8001344:	4663      	mov	r3, ip
 8001346:	015b      	lsls	r3, r3, #5
 8001348:	d400      	bmi.n	800134c <__aeabi_fsub+0xac>
 800134a:	e0b7      	b.n	80014bc <__aeabi_fsub+0x21c>
 800134c:	1c68      	adds	r0, r5, #1
 800134e:	2dfe      	cmp	r5, #254	@ 0xfe
 8001350:	d000      	beq.n	8001354 <__aeabi_fsub+0xb4>
 8001352:	e0a5      	b.n	80014a0 <__aeabi_fsub+0x200>
 8001354:	20ff      	movs	r0, #255	@ 0xff
 8001356:	2200      	movs	r2, #0
 8001358:	05c0      	lsls	r0, r0, #23
 800135a:	4310      	orrs	r0, r2
 800135c:	07e4      	lsls	r4, r4, #31
 800135e:	4320      	orrs	r0, r4
 8001360:	bcc0      	pop	{r6, r7}
 8001362:	46b9      	mov	r9, r7
 8001364:	46b0      	mov	r8, r6
 8001366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001368:	2b00      	cmp	r3, #0
 800136a:	dc00      	bgt.n	800136e <__aeabi_fsub+0xce>
 800136c:	e1eb      	b.n	8001746 <__aeabi_fsub+0x4a6>
 800136e:	2a00      	cmp	r2, #0
 8001370:	d046      	beq.n	8001400 <__aeabi_fsub+0x160>
 8001372:	2dff      	cmp	r5, #255	@ 0xff
 8001374:	d100      	bne.n	8001378 <__aeabi_fsub+0xd8>
 8001376:	e0a4      	b.n	80014c2 <__aeabi_fsub+0x222>
 8001378:	2280      	movs	r2, #128	@ 0x80
 800137a:	04d2      	lsls	r2, r2, #19
 800137c:	4311      	orrs	r1, r2
 800137e:	2b1b      	cmp	r3, #27
 8001380:	dc00      	bgt.n	8001384 <__aeabi_fsub+0xe4>
 8001382:	e0fb      	b.n	800157c <__aeabi_fsub+0x2dc>
 8001384:	2305      	movs	r3, #5
 8001386:	4698      	mov	r8, r3
 8001388:	002b      	movs	r3, r5
 800138a:	44c4      	add	ip, r8
 800138c:	4662      	mov	r2, ip
 800138e:	08d7      	lsrs	r7, r2, #3
 8001390:	2bff      	cmp	r3, #255	@ 0xff
 8001392:	d100      	bne.n	8001396 <__aeabi_fsub+0xf6>
 8001394:	e095      	b.n	80014c2 <__aeabi_fsub+0x222>
 8001396:	027a      	lsls	r2, r7, #9
 8001398:	0a52      	lsrs	r2, r2, #9
 800139a:	b2d8      	uxtb	r0, r3
 800139c:	e7dc      	b.n	8001358 <__aeabi_fsub+0xb8>
 800139e:	002b      	movs	r3, r5
 80013a0:	3bff      	subs	r3, #255	@ 0xff
 80013a2:	4699      	mov	r9, r3
 80013a4:	2900      	cmp	r1, #0
 80013a6:	d118      	bne.n	80013da <__aeabi_fsub+0x13a>
 80013a8:	2301      	movs	r3, #1
 80013aa:	405e      	eors	r6, r3
 80013ac:	42b4      	cmp	r4, r6
 80013ae:	d100      	bne.n	80013b2 <__aeabi_fsub+0x112>
 80013b0:	e0ca      	b.n	8001548 <__aeabi_fsub+0x2a8>
 80013b2:	464b      	mov	r3, r9
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d02d      	beq.n	8001414 <__aeabi_fsub+0x174>
 80013b8:	2d00      	cmp	r5, #0
 80013ba:	d000      	beq.n	80013be <__aeabi_fsub+0x11e>
 80013bc:	e13c      	b.n	8001638 <__aeabi_fsub+0x398>
 80013be:	23ff      	movs	r3, #255	@ 0xff
 80013c0:	4664      	mov	r4, ip
 80013c2:	2c00      	cmp	r4, #0
 80013c4:	d100      	bne.n	80013c8 <__aeabi_fsub+0x128>
 80013c6:	e15f      	b.n	8001688 <__aeabi_fsub+0x3e8>
 80013c8:	1e5d      	subs	r5, r3, #1
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d100      	bne.n	80013d0 <__aeabi_fsub+0x130>
 80013ce:	e174      	b.n	80016ba <__aeabi_fsub+0x41a>
 80013d0:	0034      	movs	r4, r6
 80013d2:	2bff      	cmp	r3, #255	@ 0xff
 80013d4:	d074      	beq.n	80014c0 <__aeabi_fsub+0x220>
 80013d6:	002b      	movs	r3, r5
 80013d8:	e103      	b.n	80015e2 <__aeabi_fsub+0x342>
 80013da:	42b4      	cmp	r4, r6
 80013dc:	d100      	bne.n	80013e0 <__aeabi_fsub+0x140>
 80013de:	e09c      	b.n	800151a <__aeabi_fsub+0x27a>
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d017      	beq.n	8001414 <__aeabi_fsub+0x174>
 80013e4:	2d00      	cmp	r5, #0
 80013e6:	d0ea      	beq.n	80013be <__aeabi_fsub+0x11e>
 80013e8:	0007      	movs	r7, r0
 80013ea:	0034      	movs	r4, r6
 80013ec:	e06c      	b.n	80014c8 <__aeabi_fsub+0x228>
 80013ee:	2900      	cmp	r1, #0
 80013f0:	d0cc      	beq.n	800138c <__aeabi_fsub+0xec>
 80013f2:	1e5a      	subs	r2, r3, #1
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d02b      	beq.n	8001450 <__aeabi_fsub+0x1b0>
 80013f8:	2bff      	cmp	r3, #255	@ 0xff
 80013fa:	d062      	beq.n	80014c2 <__aeabi_fsub+0x222>
 80013fc:	0013      	movs	r3, r2
 80013fe:	e773      	b.n	80012e8 <__aeabi_fsub+0x48>
 8001400:	2900      	cmp	r1, #0
 8001402:	d0c3      	beq.n	800138c <__aeabi_fsub+0xec>
 8001404:	1e5a      	subs	r2, r3, #1
 8001406:	2b01      	cmp	r3, #1
 8001408:	d100      	bne.n	800140c <__aeabi_fsub+0x16c>
 800140a:	e11e      	b.n	800164a <__aeabi_fsub+0x3aa>
 800140c:	2bff      	cmp	r3, #255	@ 0xff
 800140e:	d058      	beq.n	80014c2 <__aeabi_fsub+0x222>
 8001410:	0013      	movs	r3, r2
 8001412:	e7b4      	b.n	800137e <__aeabi_fsub+0xde>
 8001414:	22fe      	movs	r2, #254	@ 0xfe
 8001416:	1c6b      	adds	r3, r5, #1
 8001418:	421a      	tst	r2, r3
 800141a:	d10d      	bne.n	8001438 <__aeabi_fsub+0x198>
 800141c:	2d00      	cmp	r5, #0
 800141e:	d060      	beq.n	80014e2 <__aeabi_fsub+0x242>
 8001420:	4663      	mov	r3, ip
 8001422:	2b00      	cmp	r3, #0
 8001424:	d000      	beq.n	8001428 <__aeabi_fsub+0x188>
 8001426:	e120      	b.n	800166a <__aeabi_fsub+0x3ca>
 8001428:	2900      	cmp	r1, #0
 800142a:	d000      	beq.n	800142e <__aeabi_fsub+0x18e>
 800142c:	e128      	b.n	8001680 <__aeabi_fsub+0x3e0>
 800142e:	2280      	movs	r2, #128	@ 0x80
 8001430:	2400      	movs	r4, #0
 8001432:	20ff      	movs	r0, #255	@ 0xff
 8001434:	03d2      	lsls	r2, r2, #15
 8001436:	e78f      	b.n	8001358 <__aeabi_fsub+0xb8>
 8001438:	4663      	mov	r3, ip
 800143a:	1a5f      	subs	r7, r3, r1
 800143c:	017b      	lsls	r3, r7, #5
 800143e:	d500      	bpl.n	8001442 <__aeabi_fsub+0x1a2>
 8001440:	e0fe      	b.n	8001640 <__aeabi_fsub+0x3a0>
 8001442:	2f00      	cmp	r7, #0
 8001444:	d000      	beq.n	8001448 <__aeabi_fsub+0x1a8>
 8001446:	e765      	b.n	8001314 <__aeabi_fsub+0x74>
 8001448:	2400      	movs	r4, #0
 800144a:	2000      	movs	r0, #0
 800144c:	2200      	movs	r2, #0
 800144e:	e783      	b.n	8001358 <__aeabi_fsub+0xb8>
 8001450:	4663      	mov	r3, ip
 8001452:	1a59      	subs	r1, r3, r1
 8001454:	014b      	lsls	r3, r1, #5
 8001456:	d400      	bmi.n	800145a <__aeabi_fsub+0x1ba>
 8001458:	e119      	b.n	800168e <__aeabi_fsub+0x3ee>
 800145a:	018f      	lsls	r7, r1, #6
 800145c:	09bf      	lsrs	r7, r7, #6
 800145e:	0038      	movs	r0, r7
 8001460:	f002 faa2 	bl	80039a8 <__clzsi2>
 8001464:	003b      	movs	r3, r7
 8001466:	3805      	subs	r0, #5
 8001468:	4083      	lsls	r3, r0
 800146a:	2501      	movs	r5, #1
 800146c:	2220      	movs	r2, #32
 800146e:	1b40      	subs	r0, r0, r5
 8001470:	3001      	adds	r0, #1
 8001472:	1a12      	subs	r2, r2, r0
 8001474:	0019      	movs	r1, r3
 8001476:	4093      	lsls	r3, r2
 8001478:	40c1      	lsrs	r1, r0
 800147a:	1e5a      	subs	r2, r3, #1
 800147c:	4193      	sbcs	r3, r2
 800147e:	4319      	orrs	r1, r3
 8001480:	468c      	mov	ip, r1
 8001482:	1e0b      	subs	r3, r1, #0
 8001484:	d0e1      	beq.n	800144a <__aeabi_fsub+0x1aa>
 8001486:	075b      	lsls	r3, r3, #29
 8001488:	d100      	bne.n	800148c <__aeabi_fsub+0x1ec>
 800148a:	e152      	b.n	8001732 <__aeabi_fsub+0x492>
 800148c:	230f      	movs	r3, #15
 800148e:	2500      	movs	r5, #0
 8001490:	400b      	ands	r3, r1
 8001492:	2b04      	cmp	r3, #4
 8001494:	d000      	beq.n	8001498 <__aeabi_fsub+0x1f8>
 8001496:	e752      	b.n	800133e <__aeabi_fsub+0x9e>
 8001498:	2001      	movs	r0, #1
 800149a:	014a      	lsls	r2, r1, #5
 800149c:	d400      	bmi.n	80014a0 <__aeabi_fsub+0x200>
 800149e:	e092      	b.n	80015c6 <__aeabi_fsub+0x326>
 80014a0:	b2c0      	uxtb	r0, r0
 80014a2:	4663      	mov	r3, ip
 80014a4:	019a      	lsls	r2, r3, #6
 80014a6:	0a52      	lsrs	r2, r2, #9
 80014a8:	e756      	b.n	8001358 <__aeabi_fsub+0xb8>
 80014aa:	4663      	mov	r3, ip
 80014ac:	075b      	lsls	r3, r3, #29
 80014ae:	d005      	beq.n	80014bc <__aeabi_fsub+0x21c>
 80014b0:	230f      	movs	r3, #15
 80014b2:	4662      	mov	r2, ip
 80014b4:	4013      	ands	r3, r2
 80014b6:	2b04      	cmp	r3, #4
 80014b8:	d000      	beq.n	80014bc <__aeabi_fsub+0x21c>
 80014ba:	e740      	b.n	800133e <__aeabi_fsub+0x9e>
 80014bc:	002b      	movs	r3, r5
 80014be:	e765      	b.n	800138c <__aeabi_fsub+0xec>
 80014c0:	0007      	movs	r7, r0
 80014c2:	2f00      	cmp	r7, #0
 80014c4:	d100      	bne.n	80014c8 <__aeabi_fsub+0x228>
 80014c6:	e745      	b.n	8001354 <__aeabi_fsub+0xb4>
 80014c8:	2280      	movs	r2, #128	@ 0x80
 80014ca:	03d2      	lsls	r2, r2, #15
 80014cc:	433a      	orrs	r2, r7
 80014ce:	0252      	lsls	r2, r2, #9
 80014d0:	20ff      	movs	r0, #255	@ 0xff
 80014d2:	0a52      	lsrs	r2, r2, #9
 80014d4:	e740      	b.n	8001358 <__aeabi_fsub+0xb8>
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d179      	bne.n	80015ce <__aeabi_fsub+0x32e>
 80014da:	22fe      	movs	r2, #254	@ 0xfe
 80014dc:	1c6b      	adds	r3, r5, #1
 80014de:	421a      	tst	r2, r3
 80014e0:	d1aa      	bne.n	8001438 <__aeabi_fsub+0x198>
 80014e2:	4663      	mov	r3, ip
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d100      	bne.n	80014ea <__aeabi_fsub+0x24a>
 80014e8:	e0f5      	b.n	80016d6 <__aeabi_fsub+0x436>
 80014ea:	2900      	cmp	r1, #0
 80014ec:	d100      	bne.n	80014f0 <__aeabi_fsub+0x250>
 80014ee:	e0d1      	b.n	8001694 <__aeabi_fsub+0x3f4>
 80014f0:	1a5f      	subs	r7, r3, r1
 80014f2:	2380      	movs	r3, #128	@ 0x80
 80014f4:	04db      	lsls	r3, r3, #19
 80014f6:	421f      	tst	r7, r3
 80014f8:	d100      	bne.n	80014fc <__aeabi_fsub+0x25c>
 80014fa:	e10e      	b.n	800171a <__aeabi_fsub+0x47a>
 80014fc:	4662      	mov	r2, ip
 80014fe:	2401      	movs	r4, #1
 8001500:	1a8a      	subs	r2, r1, r2
 8001502:	4694      	mov	ip, r2
 8001504:	2000      	movs	r0, #0
 8001506:	4034      	ands	r4, r6
 8001508:	2a00      	cmp	r2, #0
 800150a:	d100      	bne.n	800150e <__aeabi_fsub+0x26e>
 800150c:	e724      	b.n	8001358 <__aeabi_fsub+0xb8>
 800150e:	2001      	movs	r0, #1
 8001510:	421a      	tst	r2, r3
 8001512:	d1c6      	bne.n	80014a2 <__aeabi_fsub+0x202>
 8001514:	2300      	movs	r3, #0
 8001516:	08d7      	lsrs	r7, r2, #3
 8001518:	e73d      	b.n	8001396 <__aeabi_fsub+0xf6>
 800151a:	2b00      	cmp	r3, #0
 800151c:	d017      	beq.n	800154e <__aeabi_fsub+0x2ae>
 800151e:	2d00      	cmp	r5, #0
 8001520:	d000      	beq.n	8001524 <__aeabi_fsub+0x284>
 8001522:	e0af      	b.n	8001684 <__aeabi_fsub+0x3e4>
 8001524:	23ff      	movs	r3, #255	@ 0xff
 8001526:	4665      	mov	r5, ip
 8001528:	2d00      	cmp	r5, #0
 800152a:	d100      	bne.n	800152e <__aeabi_fsub+0x28e>
 800152c:	e0ad      	b.n	800168a <__aeabi_fsub+0x3ea>
 800152e:	1e5e      	subs	r6, r3, #1
 8001530:	2b01      	cmp	r3, #1
 8001532:	d100      	bne.n	8001536 <__aeabi_fsub+0x296>
 8001534:	e089      	b.n	800164a <__aeabi_fsub+0x3aa>
 8001536:	2bff      	cmp	r3, #255	@ 0xff
 8001538:	d0c2      	beq.n	80014c0 <__aeabi_fsub+0x220>
 800153a:	2e1b      	cmp	r6, #27
 800153c:	dc00      	bgt.n	8001540 <__aeabi_fsub+0x2a0>
 800153e:	e0ab      	b.n	8001698 <__aeabi_fsub+0x3f8>
 8001540:	1d4b      	adds	r3, r1, #5
 8001542:	469c      	mov	ip, r3
 8001544:	0013      	movs	r3, r2
 8001546:	e721      	b.n	800138c <__aeabi_fsub+0xec>
 8001548:	464b      	mov	r3, r9
 800154a:	2b00      	cmp	r3, #0
 800154c:	d170      	bne.n	8001630 <__aeabi_fsub+0x390>
 800154e:	22fe      	movs	r2, #254	@ 0xfe
 8001550:	1c6b      	adds	r3, r5, #1
 8001552:	421a      	tst	r2, r3
 8001554:	d15e      	bne.n	8001614 <__aeabi_fsub+0x374>
 8001556:	2d00      	cmp	r5, #0
 8001558:	d000      	beq.n	800155c <__aeabi_fsub+0x2bc>
 800155a:	e0c3      	b.n	80016e4 <__aeabi_fsub+0x444>
 800155c:	4663      	mov	r3, ip
 800155e:	2b00      	cmp	r3, #0
 8001560:	d100      	bne.n	8001564 <__aeabi_fsub+0x2c4>
 8001562:	e0d0      	b.n	8001706 <__aeabi_fsub+0x466>
 8001564:	2900      	cmp	r1, #0
 8001566:	d100      	bne.n	800156a <__aeabi_fsub+0x2ca>
 8001568:	e094      	b.n	8001694 <__aeabi_fsub+0x3f4>
 800156a:	000a      	movs	r2, r1
 800156c:	4462      	add	r2, ip
 800156e:	0153      	lsls	r3, r2, #5
 8001570:	d400      	bmi.n	8001574 <__aeabi_fsub+0x2d4>
 8001572:	e0d8      	b.n	8001726 <__aeabi_fsub+0x486>
 8001574:	0192      	lsls	r2, r2, #6
 8001576:	2001      	movs	r0, #1
 8001578:	0a52      	lsrs	r2, r2, #9
 800157a:	e6ed      	b.n	8001358 <__aeabi_fsub+0xb8>
 800157c:	0008      	movs	r0, r1
 800157e:	2220      	movs	r2, #32
 8001580:	40d8      	lsrs	r0, r3
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	4099      	lsls	r1, r3
 8001586:	000b      	movs	r3, r1
 8001588:	1e5a      	subs	r2, r3, #1
 800158a:	4193      	sbcs	r3, r2
 800158c:	4303      	orrs	r3, r0
 800158e:	449c      	add	ip, r3
 8001590:	4663      	mov	r3, ip
 8001592:	015b      	lsls	r3, r3, #5
 8001594:	d589      	bpl.n	80014aa <__aeabi_fsub+0x20a>
 8001596:	3501      	adds	r5, #1
 8001598:	2dff      	cmp	r5, #255	@ 0xff
 800159a:	d100      	bne.n	800159e <__aeabi_fsub+0x2fe>
 800159c:	e6da      	b.n	8001354 <__aeabi_fsub+0xb4>
 800159e:	4662      	mov	r2, ip
 80015a0:	2301      	movs	r3, #1
 80015a2:	4919      	ldr	r1, [pc, #100]	@ (8001608 <__aeabi_fsub+0x368>)
 80015a4:	4013      	ands	r3, r2
 80015a6:	0852      	lsrs	r2, r2, #1
 80015a8:	400a      	ands	r2, r1
 80015aa:	431a      	orrs	r2, r3
 80015ac:	0013      	movs	r3, r2
 80015ae:	4694      	mov	ip, r2
 80015b0:	075b      	lsls	r3, r3, #29
 80015b2:	d004      	beq.n	80015be <__aeabi_fsub+0x31e>
 80015b4:	230f      	movs	r3, #15
 80015b6:	4013      	ands	r3, r2
 80015b8:	2b04      	cmp	r3, #4
 80015ba:	d000      	beq.n	80015be <__aeabi_fsub+0x31e>
 80015bc:	e6bf      	b.n	800133e <__aeabi_fsub+0x9e>
 80015be:	4663      	mov	r3, ip
 80015c0:	015b      	lsls	r3, r3, #5
 80015c2:	d500      	bpl.n	80015c6 <__aeabi_fsub+0x326>
 80015c4:	e6c2      	b.n	800134c <__aeabi_fsub+0xac>
 80015c6:	4663      	mov	r3, ip
 80015c8:	08df      	lsrs	r7, r3, #3
 80015ca:	002b      	movs	r3, r5
 80015cc:	e6e3      	b.n	8001396 <__aeabi_fsub+0xf6>
 80015ce:	1b53      	subs	r3, r2, r5
 80015d0:	2d00      	cmp	r5, #0
 80015d2:	d100      	bne.n	80015d6 <__aeabi_fsub+0x336>
 80015d4:	e6f4      	b.n	80013c0 <__aeabi_fsub+0x120>
 80015d6:	2080      	movs	r0, #128	@ 0x80
 80015d8:	4664      	mov	r4, ip
 80015da:	04c0      	lsls	r0, r0, #19
 80015dc:	4304      	orrs	r4, r0
 80015de:	46a4      	mov	ip, r4
 80015e0:	0034      	movs	r4, r6
 80015e2:	2001      	movs	r0, #1
 80015e4:	2b1b      	cmp	r3, #27
 80015e6:	dc09      	bgt.n	80015fc <__aeabi_fsub+0x35c>
 80015e8:	2520      	movs	r5, #32
 80015ea:	4660      	mov	r0, ip
 80015ec:	40d8      	lsrs	r0, r3
 80015ee:	1aeb      	subs	r3, r5, r3
 80015f0:	4665      	mov	r5, ip
 80015f2:	409d      	lsls	r5, r3
 80015f4:	002b      	movs	r3, r5
 80015f6:	1e5d      	subs	r5, r3, #1
 80015f8:	41ab      	sbcs	r3, r5
 80015fa:	4318      	orrs	r0, r3
 80015fc:	1a0b      	subs	r3, r1, r0
 80015fe:	469c      	mov	ip, r3
 8001600:	0015      	movs	r5, r2
 8001602:	e680      	b.n	8001306 <__aeabi_fsub+0x66>
 8001604:	fbffffff 	.word	0xfbffffff
 8001608:	7dffffff 	.word	0x7dffffff
 800160c:	22fe      	movs	r2, #254	@ 0xfe
 800160e:	1c6b      	adds	r3, r5, #1
 8001610:	4213      	tst	r3, r2
 8001612:	d0a3      	beq.n	800155c <__aeabi_fsub+0x2bc>
 8001614:	2bff      	cmp	r3, #255	@ 0xff
 8001616:	d100      	bne.n	800161a <__aeabi_fsub+0x37a>
 8001618:	e69c      	b.n	8001354 <__aeabi_fsub+0xb4>
 800161a:	4461      	add	r1, ip
 800161c:	0849      	lsrs	r1, r1, #1
 800161e:	074a      	lsls	r2, r1, #29
 8001620:	d049      	beq.n	80016b6 <__aeabi_fsub+0x416>
 8001622:	220f      	movs	r2, #15
 8001624:	400a      	ands	r2, r1
 8001626:	2a04      	cmp	r2, #4
 8001628:	d045      	beq.n	80016b6 <__aeabi_fsub+0x416>
 800162a:	1d0a      	adds	r2, r1, #4
 800162c:	4694      	mov	ip, r2
 800162e:	e6ad      	b.n	800138c <__aeabi_fsub+0xec>
 8001630:	2d00      	cmp	r5, #0
 8001632:	d100      	bne.n	8001636 <__aeabi_fsub+0x396>
 8001634:	e776      	b.n	8001524 <__aeabi_fsub+0x284>
 8001636:	e68d      	b.n	8001354 <__aeabi_fsub+0xb4>
 8001638:	0034      	movs	r4, r6
 800163a:	20ff      	movs	r0, #255	@ 0xff
 800163c:	2200      	movs	r2, #0
 800163e:	e68b      	b.n	8001358 <__aeabi_fsub+0xb8>
 8001640:	4663      	mov	r3, ip
 8001642:	2401      	movs	r4, #1
 8001644:	1acf      	subs	r7, r1, r3
 8001646:	4034      	ands	r4, r6
 8001648:	e664      	b.n	8001314 <__aeabi_fsub+0x74>
 800164a:	4461      	add	r1, ip
 800164c:	014b      	lsls	r3, r1, #5
 800164e:	d56d      	bpl.n	800172c <__aeabi_fsub+0x48c>
 8001650:	0848      	lsrs	r0, r1, #1
 8001652:	4944      	ldr	r1, [pc, #272]	@ (8001764 <__aeabi_fsub+0x4c4>)
 8001654:	4001      	ands	r1, r0
 8001656:	0743      	lsls	r3, r0, #29
 8001658:	d02c      	beq.n	80016b4 <__aeabi_fsub+0x414>
 800165a:	230f      	movs	r3, #15
 800165c:	4003      	ands	r3, r0
 800165e:	2b04      	cmp	r3, #4
 8001660:	d028      	beq.n	80016b4 <__aeabi_fsub+0x414>
 8001662:	1d0b      	adds	r3, r1, #4
 8001664:	469c      	mov	ip, r3
 8001666:	2302      	movs	r3, #2
 8001668:	e690      	b.n	800138c <__aeabi_fsub+0xec>
 800166a:	2900      	cmp	r1, #0
 800166c:	d100      	bne.n	8001670 <__aeabi_fsub+0x3d0>
 800166e:	e72b      	b.n	80014c8 <__aeabi_fsub+0x228>
 8001670:	2380      	movs	r3, #128	@ 0x80
 8001672:	03db      	lsls	r3, r3, #15
 8001674:	429f      	cmp	r7, r3
 8001676:	d200      	bcs.n	800167a <__aeabi_fsub+0x3da>
 8001678:	e726      	b.n	80014c8 <__aeabi_fsub+0x228>
 800167a:	4298      	cmp	r0, r3
 800167c:	d300      	bcc.n	8001680 <__aeabi_fsub+0x3e0>
 800167e:	e723      	b.n	80014c8 <__aeabi_fsub+0x228>
 8001680:	2401      	movs	r4, #1
 8001682:	4034      	ands	r4, r6
 8001684:	0007      	movs	r7, r0
 8001686:	e71f      	b.n	80014c8 <__aeabi_fsub+0x228>
 8001688:	0034      	movs	r4, r6
 800168a:	468c      	mov	ip, r1
 800168c:	e67e      	b.n	800138c <__aeabi_fsub+0xec>
 800168e:	2301      	movs	r3, #1
 8001690:	08cf      	lsrs	r7, r1, #3
 8001692:	e680      	b.n	8001396 <__aeabi_fsub+0xf6>
 8001694:	2300      	movs	r3, #0
 8001696:	e67e      	b.n	8001396 <__aeabi_fsub+0xf6>
 8001698:	2020      	movs	r0, #32
 800169a:	4665      	mov	r5, ip
 800169c:	1b80      	subs	r0, r0, r6
 800169e:	4085      	lsls	r5, r0
 80016a0:	4663      	mov	r3, ip
 80016a2:	0028      	movs	r0, r5
 80016a4:	40f3      	lsrs	r3, r6
 80016a6:	1e45      	subs	r5, r0, #1
 80016a8:	41a8      	sbcs	r0, r5
 80016aa:	4303      	orrs	r3, r0
 80016ac:	469c      	mov	ip, r3
 80016ae:	0015      	movs	r5, r2
 80016b0:	448c      	add	ip, r1
 80016b2:	e76d      	b.n	8001590 <__aeabi_fsub+0x2f0>
 80016b4:	2302      	movs	r3, #2
 80016b6:	08cf      	lsrs	r7, r1, #3
 80016b8:	e66d      	b.n	8001396 <__aeabi_fsub+0xf6>
 80016ba:	1b0f      	subs	r7, r1, r4
 80016bc:	017b      	lsls	r3, r7, #5
 80016be:	d528      	bpl.n	8001712 <__aeabi_fsub+0x472>
 80016c0:	01bf      	lsls	r7, r7, #6
 80016c2:	09bf      	lsrs	r7, r7, #6
 80016c4:	0038      	movs	r0, r7
 80016c6:	f002 f96f 	bl	80039a8 <__clzsi2>
 80016ca:	003b      	movs	r3, r7
 80016cc:	3805      	subs	r0, #5
 80016ce:	4083      	lsls	r3, r0
 80016d0:	0034      	movs	r4, r6
 80016d2:	2501      	movs	r5, #1
 80016d4:	e6ca      	b.n	800146c <__aeabi_fsub+0x1cc>
 80016d6:	2900      	cmp	r1, #0
 80016d8:	d100      	bne.n	80016dc <__aeabi_fsub+0x43c>
 80016da:	e6b5      	b.n	8001448 <__aeabi_fsub+0x1a8>
 80016dc:	2401      	movs	r4, #1
 80016de:	0007      	movs	r7, r0
 80016e0:	4034      	ands	r4, r6
 80016e2:	e658      	b.n	8001396 <__aeabi_fsub+0xf6>
 80016e4:	4663      	mov	r3, ip
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d100      	bne.n	80016ec <__aeabi_fsub+0x44c>
 80016ea:	e6e9      	b.n	80014c0 <__aeabi_fsub+0x220>
 80016ec:	2900      	cmp	r1, #0
 80016ee:	d100      	bne.n	80016f2 <__aeabi_fsub+0x452>
 80016f0:	e6ea      	b.n	80014c8 <__aeabi_fsub+0x228>
 80016f2:	2380      	movs	r3, #128	@ 0x80
 80016f4:	03db      	lsls	r3, r3, #15
 80016f6:	429f      	cmp	r7, r3
 80016f8:	d200      	bcs.n	80016fc <__aeabi_fsub+0x45c>
 80016fa:	e6e5      	b.n	80014c8 <__aeabi_fsub+0x228>
 80016fc:	4298      	cmp	r0, r3
 80016fe:	d300      	bcc.n	8001702 <__aeabi_fsub+0x462>
 8001700:	e6e2      	b.n	80014c8 <__aeabi_fsub+0x228>
 8001702:	0007      	movs	r7, r0
 8001704:	e6e0      	b.n	80014c8 <__aeabi_fsub+0x228>
 8001706:	2900      	cmp	r1, #0
 8001708:	d100      	bne.n	800170c <__aeabi_fsub+0x46c>
 800170a:	e69e      	b.n	800144a <__aeabi_fsub+0x1aa>
 800170c:	2300      	movs	r3, #0
 800170e:	08cf      	lsrs	r7, r1, #3
 8001710:	e641      	b.n	8001396 <__aeabi_fsub+0xf6>
 8001712:	0034      	movs	r4, r6
 8001714:	2301      	movs	r3, #1
 8001716:	08ff      	lsrs	r7, r7, #3
 8001718:	e63d      	b.n	8001396 <__aeabi_fsub+0xf6>
 800171a:	2f00      	cmp	r7, #0
 800171c:	d100      	bne.n	8001720 <__aeabi_fsub+0x480>
 800171e:	e693      	b.n	8001448 <__aeabi_fsub+0x1a8>
 8001720:	2300      	movs	r3, #0
 8001722:	08ff      	lsrs	r7, r7, #3
 8001724:	e637      	b.n	8001396 <__aeabi_fsub+0xf6>
 8001726:	2300      	movs	r3, #0
 8001728:	08d7      	lsrs	r7, r2, #3
 800172a:	e634      	b.n	8001396 <__aeabi_fsub+0xf6>
 800172c:	2301      	movs	r3, #1
 800172e:	08cf      	lsrs	r7, r1, #3
 8001730:	e631      	b.n	8001396 <__aeabi_fsub+0xf6>
 8001732:	2280      	movs	r2, #128	@ 0x80
 8001734:	000b      	movs	r3, r1
 8001736:	04d2      	lsls	r2, r2, #19
 8001738:	2001      	movs	r0, #1
 800173a:	4013      	ands	r3, r2
 800173c:	4211      	tst	r1, r2
 800173e:	d000      	beq.n	8001742 <__aeabi_fsub+0x4a2>
 8001740:	e6ae      	b.n	80014a0 <__aeabi_fsub+0x200>
 8001742:	08cf      	lsrs	r7, r1, #3
 8001744:	e627      	b.n	8001396 <__aeabi_fsub+0xf6>
 8001746:	2b00      	cmp	r3, #0
 8001748:	d100      	bne.n	800174c <__aeabi_fsub+0x4ac>
 800174a:	e75f      	b.n	800160c <__aeabi_fsub+0x36c>
 800174c:	1b56      	subs	r6, r2, r5
 800174e:	2d00      	cmp	r5, #0
 8001750:	d101      	bne.n	8001756 <__aeabi_fsub+0x4b6>
 8001752:	0033      	movs	r3, r6
 8001754:	e6e7      	b.n	8001526 <__aeabi_fsub+0x286>
 8001756:	2380      	movs	r3, #128	@ 0x80
 8001758:	4660      	mov	r0, ip
 800175a:	04db      	lsls	r3, r3, #19
 800175c:	4318      	orrs	r0, r3
 800175e:	4684      	mov	ip, r0
 8001760:	e6eb      	b.n	800153a <__aeabi_fsub+0x29a>
 8001762:	46c0      	nop			@ (mov r8, r8)
 8001764:	7dffffff 	.word	0x7dffffff

08001768 <__aeabi_f2iz>:
 8001768:	0241      	lsls	r1, r0, #9
 800176a:	0042      	lsls	r2, r0, #1
 800176c:	0fc3      	lsrs	r3, r0, #31
 800176e:	0a49      	lsrs	r1, r1, #9
 8001770:	2000      	movs	r0, #0
 8001772:	0e12      	lsrs	r2, r2, #24
 8001774:	2a7e      	cmp	r2, #126	@ 0x7e
 8001776:	dd03      	ble.n	8001780 <__aeabi_f2iz+0x18>
 8001778:	2a9d      	cmp	r2, #157	@ 0x9d
 800177a:	dd02      	ble.n	8001782 <__aeabi_f2iz+0x1a>
 800177c:	4a09      	ldr	r2, [pc, #36]	@ (80017a4 <__aeabi_f2iz+0x3c>)
 800177e:	1898      	adds	r0, r3, r2
 8001780:	4770      	bx	lr
 8001782:	2080      	movs	r0, #128	@ 0x80
 8001784:	0400      	lsls	r0, r0, #16
 8001786:	4301      	orrs	r1, r0
 8001788:	2a95      	cmp	r2, #149	@ 0x95
 800178a:	dc07      	bgt.n	800179c <__aeabi_f2iz+0x34>
 800178c:	2096      	movs	r0, #150	@ 0x96
 800178e:	1a82      	subs	r2, r0, r2
 8001790:	40d1      	lsrs	r1, r2
 8001792:	4248      	negs	r0, r1
 8001794:	2b00      	cmp	r3, #0
 8001796:	d1f3      	bne.n	8001780 <__aeabi_f2iz+0x18>
 8001798:	0008      	movs	r0, r1
 800179a:	e7f1      	b.n	8001780 <__aeabi_f2iz+0x18>
 800179c:	3a96      	subs	r2, #150	@ 0x96
 800179e:	4091      	lsls	r1, r2
 80017a0:	e7f7      	b.n	8001792 <__aeabi_f2iz+0x2a>
 80017a2:	46c0      	nop			@ (mov r8, r8)
 80017a4:	7fffffff 	.word	0x7fffffff

080017a8 <__aeabi_i2f>:
 80017a8:	b570      	push	{r4, r5, r6, lr}
 80017aa:	2800      	cmp	r0, #0
 80017ac:	d012      	beq.n	80017d4 <__aeabi_i2f+0x2c>
 80017ae:	17c3      	asrs	r3, r0, #31
 80017b0:	18c5      	adds	r5, r0, r3
 80017b2:	405d      	eors	r5, r3
 80017b4:	0fc4      	lsrs	r4, r0, #31
 80017b6:	0028      	movs	r0, r5
 80017b8:	f002 f8f6 	bl	80039a8 <__clzsi2>
 80017bc:	239e      	movs	r3, #158	@ 0x9e
 80017be:	1a1b      	subs	r3, r3, r0
 80017c0:	2b96      	cmp	r3, #150	@ 0x96
 80017c2:	dc0f      	bgt.n	80017e4 <__aeabi_i2f+0x3c>
 80017c4:	2808      	cmp	r0, #8
 80017c6:	d038      	beq.n	800183a <__aeabi_i2f+0x92>
 80017c8:	3808      	subs	r0, #8
 80017ca:	4085      	lsls	r5, r0
 80017cc:	026d      	lsls	r5, r5, #9
 80017ce:	0a6d      	lsrs	r5, r5, #9
 80017d0:	b2d8      	uxtb	r0, r3
 80017d2:	e002      	b.n	80017da <__aeabi_i2f+0x32>
 80017d4:	2400      	movs	r4, #0
 80017d6:	2000      	movs	r0, #0
 80017d8:	2500      	movs	r5, #0
 80017da:	05c0      	lsls	r0, r0, #23
 80017dc:	4328      	orrs	r0, r5
 80017de:	07e4      	lsls	r4, r4, #31
 80017e0:	4320      	orrs	r0, r4
 80017e2:	bd70      	pop	{r4, r5, r6, pc}
 80017e4:	2b99      	cmp	r3, #153	@ 0x99
 80017e6:	dc14      	bgt.n	8001812 <__aeabi_i2f+0x6a>
 80017e8:	1f42      	subs	r2, r0, #5
 80017ea:	4095      	lsls	r5, r2
 80017ec:	002a      	movs	r2, r5
 80017ee:	4915      	ldr	r1, [pc, #84]	@ (8001844 <__aeabi_i2f+0x9c>)
 80017f0:	4011      	ands	r1, r2
 80017f2:	0755      	lsls	r5, r2, #29
 80017f4:	d01c      	beq.n	8001830 <__aeabi_i2f+0x88>
 80017f6:	250f      	movs	r5, #15
 80017f8:	402a      	ands	r2, r5
 80017fa:	2a04      	cmp	r2, #4
 80017fc:	d018      	beq.n	8001830 <__aeabi_i2f+0x88>
 80017fe:	3104      	adds	r1, #4
 8001800:	08ca      	lsrs	r2, r1, #3
 8001802:	0149      	lsls	r1, r1, #5
 8001804:	d515      	bpl.n	8001832 <__aeabi_i2f+0x8a>
 8001806:	239f      	movs	r3, #159	@ 0x9f
 8001808:	0252      	lsls	r2, r2, #9
 800180a:	1a18      	subs	r0, r3, r0
 800180c:	0a55      	lsrs	r5, r2, #9
 800180e:	b2c0      	uxtb	r0, r0
 8001810:	e7e3      	b.n	80017da <__aeabi_i2f+0x32>
 8001812:	2205      	movs	r2, #5
 8001814:	0029      	movs	r1, r5
 8001816:	1a12      	subs	r2, r2, r0
 8001818:	40d1      	lsrs	r1, r2
 800181a:	0002      	movs	r2, r0
 800181c:	321b      	adds	r2, #27
 800181e:	4095      	lsls	r5, r2
 8001820:	002a      	movs	r2, r5
 8001822:	1e55      	subs	r5, r2, #1
 8001824:	41aa      	sbcs	r2, r5
 8001826:	430a      	orrs	r2, r1
 8001828:	4906      	ldr	r1, [pc, #24]	@ (8001844 <__aeabi_i2f+0x9c>)
 800182a:	4011      	ands	r1, r2
 800182c:	0755      	lsls	r5, r2, #29
 800182e:	d1e2      	bne.n	80017f6 <__aeabi_i2f+0x4e>
 8001830:	08ca      	lsrs	r2, r1, #3
 8001832:	0252      	lsls	r2, r2, #9
 8001834:	0a55      	lsrs	r5, r2, #9
 8001836:	b2d8      	uxtb	r0, r3
 8001838:	e7cf      	b.n	80017da <__aeabi_i2f+0x32>
 800183a:	026d      	lsls	r5, r5, #9
 800183c:	0a6d      	lsrs	r5, r5, #9
 800183e:	308e      	adds	r0, #142	@ 0x8e
 8001840:	e7cb      	b.n	80017da <__aeabi_i2f+0x32>
 8001842:	46c0      	nop			@ (mov r8, r8)
 8001844:	fbffffff 	.word	0xfbffffff

08001848 <__aeabi_ui2f>:
 8001848:	b510      	push	{r4, lr}
 800184a:	1e04      	subs	r4, r0, #0
 800184c:	d00d      	beq.n	800186a <__aeabi_ui2f+0x22>
 800184e:	f002 f8ab 	bl	80039a8 <__clzsi2>
 8001852:	239e      	movs	r3, #158	@ 0x9e
 8001854:	1a1b      	subs	r3, r3, r0
 8001856:	2b96      	cmp	r3, #150	@ 0x96
 8001858:	dc0c      	bgt.n	8001874 <__aeabi_ui2f+0x2c>
 800185a:	2808      	cmp	r0, #8
 800185c:	d034      	beq.n	80018c8 <__aeabi_ui2f+0x80>
 800185e:	3808      	subs	r0, #8
 8001860:	4084      	lsls	r4, r0
 8001862:	0264      	lsls	r4, r4, #9
 8001864:	0a64      	lsrs	r4, r4, #9
 8001866:	b2d8      	uxtb	r0, r3
 8001868:	e001      	b.n	800186e <__aeabi_ui2f+0x26>
 800186a:	2000      	movs	r0, #0
 800186c:	2400      	movs	r4, #0
 800186e:	05c0      	lsls	r0, r0, #23
 8001870:	4320      	orrs	r0, r4
 8001872:	bd10      	pop	{r4, pc}
 8001874:	2b99      	cmp	r3, #153	@ 0x99
 8001876:	dc13      	bgt.n	80018a0 <__aeabi_ui2f+0x58>
 8001878:	1f42      	subs	r2, r0, #5
 800187a:	4094      	lsls	r4, r2
 800187c:	4a14      	ldr	r2, [pc, #80]	@ (80018d0 <__aeabi_ui2f+0x88>)
 800187e:	4022      	ands	r2, r4
 8001880:	0761      	lsls	r1, r4, #29
 8001882:	d01c      	beq.n	80018be <__aeabi_ui2f+0x76>
 8001884:	210f      	movs	r1, #15
 8001886:	4021      	ands	r1, r4
 8001888:	2904      	cmp	r1, #4
 800188a:	d018      	beq.n	80018be <__aeabi_ui2f+0x76>
 800188c:	3204      	adds	r2, #4
 800188e:	08d4      	lsrs	r4, r2, #3
 8001890:	0152      	lsls	r2, r2, #5
 8001892:	d515      	bpl.n	80018c0 <__aeabi_ui2f+0x78>
 8001894:	239f      	movs	r3, #159	@ 0x9f
 8001896:	0264      	lsls	r4, r4, #9
 8001898:	1a18      	subs	r0, r3, r0
 800189a:	0a64      	lsrs	r4, r4, #9
 800189c:	b2c0      	uxtb	r0, r0
 800189e:	e7e6      	b.n	800186e <__aeabi_ui2f+0x26>
 80018a0:	0002      	movs	r2, r0
 80018a2:	0021      	movs	r1, r4
 80018a4:	321b      	adds	r2, #27
 80018a6:	4091      	lsls	r1, r2
 80018a8:	000a      	movs	r2, r1
 80018aa:	1e51      	subs	r1, r2, #1
 80018ac:	418a      	sbcs	r2, r1
 80018ae:	2105      	movs	r1, #5
 80018b0:	1a09      	subs	r1, r1, r0
 80018b2:	40cc      	lsrs	r4, r1
 80018b4:	4314      	orrs	r4, r2
 80018b6:	4a06      	ldr	r2, [pc, #24]	@ (80018d0 <__aeabi_ui2f+0x88>)
 80018b8:	4022      	ands	r2, r4
 80018ba:	0761      	lsls	r1, r4, #29
 80018bc:	d1e2      	bne.n	8001884 <__aeabi_ui2f+0x3c>
 80018be:	08d4      	lsrs	r4, r2, #3
 80018c0:	0264      	lsls	r4, r4, #9
 80018c2:	0a64      	lsrs	r4, r4, #9
 80018c4:	b2d8      	uxtb	r0, r3
 80018c6:	e7d2      	b.n	800186e <__aeabi_ui2f+0x26>
 80018c8:	0264      	lsls	r4, r4, #9
 80018ca:	0a64      	lsrs	r4, r4, #9
 80018cc:	308e      	adds	r0, #142	@ 0x8e
 80018ce:	e7ce      	b.n	800186e <__aeabi_ui2f+0x26>
 80018d0:	fbffffff 	.word	0xfbffffff

080018d4 <__aeabi_dadd>:
 80018d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018d6:	464f      	mov	r7, r9
 80018d8:	4646      	mov	r6, r8
 80018da:	46d6      	mov	lr, sl
 80018dc:	b5c0      	push	{r6, r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	9000      	str	r0, [sp, #0]
 80018e2:	9101      	str	r1, [sp, #4]
 80018e4:	030e      	lsls	r6, r1, #12
 80018e6:	004c      	lsls	r4, r1, #1
 80018e8:	0fcd      	lsrs	r5, r1, #31
 80018ea:	0a71      	lsrs	r1, r6, #9
 80018ec:	9e00      	ldr	r6, [sp, #0]
 80018ee:	005f      	lsls	r7, r3, #1
 80018f0:	0f76      	lsrs	r6, r6, #29
 80018f2:	430e      	orrs	r6, r1
 80018f4:	9900      	ldr	r1, [sp, #0]
 80018f6:	9200      	str	r2, [sp, #0]
 80018f8:	9301      	str	r3, [sp, #4]
 80018fa:	00c9      	lsls	r1, r1, #3
 80018fc:	4689      	mov	r9, r1
 80018fe:	0319      	lsls	r1, r3, #12
 8001900:	0d7b      	lsrs	r3, r7, #21
 8001902:	4698      	mov	r8, r3
 8001904:	9b01      	ldr	r3, [sp, #4]
 8001906:	0a49      	lsrs	r1, r1, #9
 8001908:	0fdb      	lsrs	r3, r3, #31
 800190a:	469c      	mov	ip, r3
 800190c:	9b00      	ldr	r3, [sp, #0]
 800190e:	9a00      	ldr	r2, [sp, #0]
 8001910:	0f5b      	lsrs	r3, r3, #29
 8001912:	430b      	orrs	r3, r1
 8001914:	4641      	mov	r1, r8
 8001916:	0d64      	lsrs	r4, r4, #21
 8001918:	00d2      	lsls	r2, r2, #3
 800191a:	1a61      	subs	r1, r4, r1
 800191c:	4565      	cmp	r5, ip
 800191e:	d100      	bne.n	8001922 <__aeabi_dadd+0x4e>
 8001920:	e0a6      	b.n	8001a70 <__aeabi_dadd+0x19c>
 8001922:	2900      	cmp	r1, #0
 8001924:	dd72      	ble.n	8001a0c <__aeabi_dadd+0x138>
 8001926:	4647      	mov	r7, r8
 8001928:	2f00      	cmp	r7, #0
 800192a:	d100      	bne.n	800192e <__aeabi_dadd+0x5a>
 800192c:	e0dd      	b.n	8001aea <__aeabi_dadd+0x216>
 800192e:	4fcc      	ldr	r7, [pc, #816]	@ (8001c60 <__aeabi_dadd+0x38c>)
 8001930:	42bc      	cmp	r4, r7
 8001932:	d100      	bne.n	8001936 <__aeabi_dadd+0x62>
 8001934:	e19a      	b.n	8001c6c <__aeabi_dadd+0x398>
 8001936:	2701      	movs	r7, #1
 8001938:	2938      	cmp	r1, #56	@ 0x38
 800193a:	dc17      	bgt.n	800196c <__aeabi_dadd+0x98>
 800193c:	2780      	movs	r7, #128	@ 0x80
 800193e:	043f      	lsls	r7, r7, #16
 8001940:	433b      	orrs	r3, r7
 8001942:	291f      	cmp	r1, #31
 8001944:	dd00      	ble.n	8001948 <__aeabi_dadd+0x74>
 8001946:	e1dd      	b.n	8001d04 <__aeabi_dadd+0x430>
 8001948:	2720      	movs	r7, #32
 800194a:	1a78      	subs	r0, r7, r1
 800194c:	001f      	movs	r7, r3
 800194e:	4087      	lsls	r7, r0
 8001950:	46ba      	mov	sl, r7
 8001952:	0017      	movs	r7, r2
 8001954:	40cf      	lsrs	r7, r1
 8001956:	4684      	mov	ip, r0
 8001958:	0038      	movs	r0, r7
 800195a:	4657      	mov	r7, sl
 800195c:	4307      	orrs	r7, r0
 800195e:	4660      	mov	r0, ip
 8001960:	4082      	lsls	r2, r0
 8001962:	40cb      	lsrs	r3, r1
 8001964:	1e50      	subs	r0, r2, #1
 8001966:	4182      	sbcs	r2, r0
 8001968:	1af6      	subs	r6, r6, r3
 800196a:	4317      	orrs	r7, r2
 800196c:	464b      	mov	r3, r9
 800196e:	1bdf      	subs	r7, r3, r7
 8001970:	45b9      	cmp	r9, r7
 8001972:	4180      	sbcs	r0, r0
 8001974:	4240      	negs	r0, r0
 8001976:	1a36      	subs	r6, r6, r0
 8001978:	0233      	lsls	r3, r6, #8
 800197a:	d400      	bmi.n	800197e <__aeabi_dadd+0xaa>
 800197c:	e0ff      	b.n	8001b7e <__aeabi_dadd+0x2aa>
 800197e:	0276      	lsls	r6, r6, #9
 8001980:	0a76      	lsrs	r6, r6, #9
 8001982:	2e00      	cmp	r6, #0
 8001984:	d100      	bne.n	8001988 <__aeabi_dadd+0xb4>
 8001986:	e13c      	b.n	8001c02 <__aeabi_dadd+0x32e>
 8001988:	0030      	movs	r0, r6
 800198a:	f002 f80d 	bl	80039a8 <__clzsi2>
 800198e:	0003      	movs	r3, r0
 8001990:	3b08      	subs	r3, #8
 8001992:	2120      	movs	r1, #32
 8001994:	0038      	movs	r0, r7
 8001996:	1aca      	subs	r2, r1, r3
 8001998:	40d0      	lsrs	r0, r2
 800199a:	409e      	lsls	r6, r3
 800199c:	0002      	movs	r2, r0
 800199e:	409f      	lsls	r7, r3
 80019a0:	4332      	orrs	r2, r6
 80019a2:	429c      	cmp	r4, r3
 80019a4:	dd00      	ble.n	80019a8 <__aeabi_dadd+0xd4>
 80019a6:	e1a6      	b.n	8001cf6 <__aeabi_dadd+0x422>
 80019a8:	1b18      	subs	r0, r3, r4
 80019aa:	3001      	adds	r0, #1
 80019ac:	1a09      	subs	r1, r1, r0
 80019ae:	003e      	movs	r6, r7
 80019b0:	408f      	lsls	r7, r1
 80019b2:	40c6      	lsrs	r6, r0
 80019b4:	1e7b      	subs	r3, r7, #1
 80019b6:	419f      	sbcs	r7, r3
 80019b8:	0013      	movs	r3, r2
 80019ba:	408b      	lsls	r3, r1
 80019bc:	4337      	orrs	r7, r6
 80019be:	431f      	orrs	r7, r3
 80019c0:	40c2      	lsrs	r2, r0
 80019c2:	003b      	movs	r3, r7
 80019c4:	0016      	movs	r6, r2
 80019c6:	2400      	movs	r4, #0
 80019c8:	4313      	orrs	r3, r2
 80019ca:	d100      	bne.n	80019ce <__aeabi_dadd+0xfa>
 80019cc:	e1df      	b.n	8001d8e <__aeabi_dadd+0x4ba>
 80019ce:	077b      	lsls	r3, r7, #29
 80019d0:	d100      	bne.n	80019d4 <__aeabi_dadd+0x100>
 80019d2:	e332      	b.n	800203a <__aeabi_dadd+0x766>
 80019d4:	230f      	movs	r3, #15
 80019d6:	003a      	movs	r2, r7
 80019d8:	403b      	ands	r3, r7
 80019da:	2b04      	cmp	r3, #4
 80019dc:	d004      	beq.n	80019e8 <__aeabi_dadd+0x114>
 80019de:	1d3a      	adds	r2, r7, #4
 80019e0:	42ba      	cmp	r2, r7
 80019e2:	41bf      	sbcs	r7, r7
 80019e4:	427f      	negs	r7, r7
 80019e6:	19f6      	adds	r6, r6, r7
 80019e8:	0233      	lsls	r3, r6, #8
 80019ea:	d400      	bmi.n	80019ee <__aeabi_dadd+0x11a>
 80019ec:	e323      	b.n	8002036 <__aeabi_dadd+0x762>
 80019ee:	4b9c      	ldr	r3, [pc, #624]	@ (8001c60 <__aeabi_dadd+0x38c>)
 80019f0:	3401      	adds	r4, #1
 80019f2:	429c      	cmp	r4, r3
 80019f4:	d100      	bne.n	80019f8 <__aeabi_dadd+0x124>
 80019f6:	e0b4      	b.n	8001b62 <__aeabi_dadd+0x28e>
 80019f8:	4b9a      	ldr	r3, [pc, #616]	@ (8001c64 <__aeabi_dadd+0x390>)
 80019fa:	0564      	lsls	r4, r4, #21
 80019fc:	401e      	ands	r6, r3
 80019fe:	0d64      	lsrs	r4, r4, #21
 8001a00:	0777      	lsls	r7, r6, #29
 8001a02:	08d2      	lsrs	r2, r2, #3
 8001a04:	0276      	lsls	r6, r6, #9
 8001a06:	4317      	orrs	r7, r2
 8001a08:	0b36      	lsrs	r6, r6, #12
 8001a0a:	e0ac      	b.n	8001b66 <__aeabi_dadd+0x292>
 8001a0c:	2900      	cmp	r1, #0
 8001a0e:	d100      	bne.n	8001a12 <__aeabi_dadd+0x13e>
 8001a10:	e07e      	b.n	8001b10 <__aeabi_dadd+0x23c>
 8001a12:	4641      	mov	r1, r8
 8001a14:	1b09      	subs	r1, r1, r4
 8001a16:	2c00      	cmp	r4, #0
 8001a18:	d000      	beq.n	8001a1c <__aeabi_dadd+0x148>
 8001a1a:	e160      	b.n	8001cde <__aeabi_dadd+0x40a>
 8001a1c:	0034      	movs	r4, r6
 8001a1e:	4648      	mov	r0, r9
 8001a20:	4304      	orrs	r4, r0
 8001a22:	d100      	bne.n	8001a26 <__aeabi_dadd+0x152>
 8001a24:	e1c9      	b.n	8001dba <__aeabi_dadd+0x4e6>
 8001a26:	1e4c      	subs	r4, r1, #1
 8001a28:	2901      	cmp	r1, #1
 8001a2a:	d100      	bne.n	8001a2e <__aeabi_dadd+0x15a>
 8001a2c:	e22e      	b.n	8001e8c <__aeabi_dadd+0x5b8>
 8001a2e:	4d8c      	ldr	r5, [pc, #560]	@ (8001c60 <__aeabi_dadd+0x38c>)
 8001a30:	42a9      	cmp	r1, r5
 8001a32:	d100      	bne.n	8001a36 <__aeabi_dadd+0x162>
 8001a34:	e224      	b.n	8001e80 <__aeabi_dadd+0x5ac>
 8001a36:	2701      	movs	r7, #1
 8001a38:	2c38      	cmp	r4, #56	@ 0x38
 8001a3a:	dc11      	bgt.n	8001a60 <__aeabi_dadd+0x18c>
 8001a3c:	0021      	movs	r1, r4
 8001a3e:	291f      	cmp	r1, #31
 8001a40:	dd00      	ble.n	8001a44 <__aeabi_dadd+0x170>
 8001a42:	e20b      	b.n	8001e5c <__aeabi_dadd+0x588>
 8001a44:	2420      	movs	r4, #32
 8001a46:	0037      	movs	r7, r6
 8001a48:	4648      	mov	r0, r9
 8001a4a:	1a64      	subs	r4, r4, r1
 8001a4c:	40a7      	lsls	r7, r4
 8001a4e:	40c8      	lsrs	r0, r1
 8001a50:	4307      	orrs	r7, r0
 8001a52:	4648      	mov	r0, r9
 8001a54:	40a0      	lsls	r0, r4
 8001a56:	40ce      	lsrs	r6, r1
 8001a58:	1e44      	subs	r4, r0, #1
 8001a5a:	41a0      	sbcs	r0, r4
 8001a5c:	1b9b      	subs	r3, r3, r6
 8001a5e:	4307      	orrs	r7, r0
 8001a60:	1bd7      	subs	r7, r2, r7
 8001a62:	42ba      	cmp	r2, r7
 8001a64:	4192      	sbcs	r2, r2
 8001a66:	4252      	negs	r2, r2
 8001a68:	4665      	mov	r5, ip
 8001a6a:	4644      	mov	r4, r8
 8001a6c:	1a9e      	subs	r6, r3, r2
 8001a6e:	e783      	b.n	8001978 <__aeabi_dadd+0xa4>
 8001a70:	2900      	cmp	r1, #0
 8001a72:	dc00      	bgt.n	8001a76 <__aeabi_dadd+0x1a2>
 8001a74:	e09c      	b.n	8001bb0 <__aeabi_dadd+0x2dc>
 8001a76:	4647      	mov	r7, r8
 8001a78:	2f00      	cmp	r7, #0
 8001a7a:	d167      	bne.n	8001b4c <__aeabi_dadd+0x278>
 8001a7c:	001f      	movs	r7, r3
 8001a7e:	4317      	orrs	r7, r2
 8001a80:	d100      	bne.n	8001a84 <__aeabi_dadd+0x1b0>
 8001a82:	e0e4      	b.n	8001c4e <__aeabi_dadd+0x37a>
 8001a84:	1e48      	subs	r0, r1, #1
 8001a86:	2901      	cmp	r1, #1
 8001a88:	d100      	bne.n	8001a8c <__aeabi_dadd+0x1b8>
 8001a8a:	e19b      	b.n	8001dc4 <__aeabi_dadd+0x4f0>
 8001a8c:	4f74      	ldr	r7, [pc, #464]	@ (8001c60 <__aeabi_dadd+0x38c>)
 8001a8e:	42b9      	cmp	r1, r7
 8001a90:	d100      	bne.n	8001a94 <__aeabi_dadd+0x1c0>
 8001a92:	e0eb      	b.n	8001c6c <__aeabi_dadd+0x398>
 8001a94:	2701      	movs	r7, #1
 8001a96:	0001      	movs	r1, r0
 8001a98:	2838      	cmp	r0, #56	@ 0x38
 8001a9a:	dc11      	bgt.n	8001ac0 <__aeabi_dadd+0x1ec>
 8001a9c:	291f      	cmp	r1, #31
 8001a9e:	dd00      	ble.n	8001aa2 <__aeabi_dadd+0x1ce>
 8001aa0:	e1c7      	b.n	8001e32 <__aeabi_dadd+0x55e>
 8001aa2:	2720      	movs	r7, #32
 8001aa4:	1a78      	subs	r0, r7, r1
 8001aa6:	001f      	movs	r7, r3
 8001aa8:	4684      	mov	ip, r0
 8001aaa:	4087      	lsls	r7, r0
 8001aac:	0010      	movs	r0, r2
 8001aae:	40c8      	lsrs	r0, r1
 8001ab0:	4307      	orrs	r7, r0
 8001ab2:	4660      	mov	r0, ip
 8001ab4:	4082      	lsls	r2, r0
 8001ab6:	40cb      	lsrs	r3, r1
 8001ab8:	1e50      	subs	r0, r2, #1
 8001aba:	4182      	sbcs	r2, r0
 8001abc:	18f6      	adds	r6, r6, r3
 8001abe:	4317      	orrs	r7, r2
 8001ac0:	444f      	add	r7, r9
 8001ac2:	454f      	cmp	r7, r9
 8001ac4:	4180      	sbcs	r0, r0
 8001ac6:	4240      	negs	r0, r0
 8001ac8:	1836      	adds	r6, r6, r0
 8001aca:	0233      	lsls	r3, r6, #8
 8001acc:	d557      	bpl.n	8001b7e <__aeabi_dadd+0x2aa>
 8001ace:	4b64      	ldr	r3, [pc, #400]	@ (8001c60 <__aeabi_dadd+0x38c>)
 8001ad0:	3401      	adds	r4, #1
 8001ad2:	429c      	cmp	r4, r3
 8001ad4:	d045      	beq.n	8001b62 <__aeabi_dadd+0x28e>
 8001ad6:	2101      	movs	r1, #1
 8001ad8:	4b62      	ldr	r3, [pc, #392]	@ (8001c64 <__aeabi_dadd+0x390>)
 8001ada:	087a      	lsrs	r2, r7, #1
 8001adc:	401e      	ands	r6, r3
 8001ade:	4039      	ands	r1, r7
 8001ae0:	430a      	orrs	r2, r1
 8001ae2:	07f7      	lsls	r7, r6, #31
 8001ae4:	4317      	orrs	r7, r2
 8001ae6:	0876      	lsrs	r6, r6, #1
 8001ae8:	e771      	b.n	80019ce <__aeabi_dadd+0xfa>
 8001aea:	001f      	movs	r7, r3
 8001aec:	4317      	orrs	r7, r2
 8001aee:	d100      	bne.n	8001af2 <__aeabi_dadd+0x21e>
 8001af0:	e0ad      	b.n	8001c4e <__aeabi_dadd+0x37a>
 8001af2:	1e4f      	subs	r7, r1, #1
 8001af4:	46bc      	mov	ip, r7
 8001af6:	2901      	cmp	r1, #1
 8001af8:	d100      	bne.n	8001afc <__aeabi_dadd+0x228>
 8001afa:	e182      	b.n	8001e02 <__aeabi_dadd+0x52e>
 8001afc:	4f58      	ldr	r7, [pc, #352]	@ (8001c60 <__aeabi_dadd+0x38c>)
 8001afe:	42b9      	cmp	r1, r7
 8001b00:	d100      	bne.n	8001b04 <__aeabi_dadd+0x230>
 8001b02:	e190      	b.n	8001e26 <__aeabi_dadd+0x552>
 8001b04:	4661      	mov	r1, ip
 8001b06:	2701      	movs	r7, #1
 8001b08:	2938      	cmp	r1, #56	@ 0x38
 8001b0a:	dd00      	ble.n	8001b0e <__aeabi_dadd+0x23a>
 8001b0c:	e72e      	b.n	800196c <__aeabi_dadd+0x98>
 8001b0e:	e718      	b.n	8001942 <__aeabi_dadd+0x6e>
 8001b10:	4f55      	ldr	r7, [pc, #340]	@ (8001c68 <__aeabi_dadd+0x394>)
 8001b12:	1c61      	adds	r1, r4, #1
 8001b14:	4239      	tst	r1, r7
 8001b16:	d000      	beq.n	8001b1a <__aeabi_dadd+0x246>
 8001b18:	e0d0      	b.n	8001cbc <__aeabi_dadd+0x3e8>
 8001b1a:	0031      	movs	r1, r6
 8001b1c:	4648      	mov	r0, r9
 8001b1e:	001f      	movs	r7, r3
 8001b20:	4301      	orrs	r1, r0
 8001b22:	4317      	orrs	r7, r2
 8001b24:	2c00      	cmp	r4, #0
 8001b26:	d000      	beq.n	8001b2a <__aeabi_dadd+0x256>
 8001b28:	e13d      	b.n	8001da6 <__aeabi_dadd+0x4d2>
 8001b2a:	2900      	cmp	r1, #0
 8001b2c:	d100      	bne.n	8001b30 <__aeabi_dadd+0x25c>
 8001b2e:	e1bc      	b.n	8001eaa <__aeabi_dadd+0x5d6>
 8001b30:	2f00      	cmp	r7, #0
 8001b32:	d000      	beq.n	8001b36 <__aeabi_dadd+0x262>
 8001b34:	e1bf      	b.n	8001eb6 <__aeabi_dadd+0x5e2>
 8001b36:	464b      	mov	r3, r9
 8001b38:	2100      	movs	r1, #0
 8001b3a:	08d8      	lsrs	r0, r3, #3
 8001b3c:	0777      	lsls	r7, r6, #29
 8001b3e:	4307      	orrs	r7, r0
 8001b40:	08f0      	lsrs	r0, r6, #3
 8001b42:	0306      	lsls	r6, r0, #12
 8001b44:	054c      	lsls	r4, r1, #21
 8001b46:	0b36      	lsrs	r6, r6, #12
 8001b48:	0d64      	lsrs	r4, r4, #21
 8001b4a:	e00c      	b.n	8001b66 <__aeabi_dadd+0x292>
 8001b4c:	4f44      	ldr	r7, [pc, #272]	@ (8001c60 <__aeabi_dadd+0x38c>)
 8001b4e:	42bc      	cmp	r4, r7
 8001b50:	d100      	bne.n	8001b54 <__aeabi_dadd+0x280>
 8001b52:	e08b      	b.n	8001c6c <__aeabi_dadd+0x398>
 8001b54:	2701      	movs	r7, #1
 8001b56:	2938      	cmp	r1, #56	@ 0x38
 8001b58:	dcb2      	bgt.n	8001ac0 <__aeabi_dadd+0x1ec>
 8001b5a:	2780      	movs	r7, #128	@ 0x80
 8001b5c:	043f      	lsls	r7, r7, #16
 8001b5e:	433b      	orrs	r3, r7
 8001b60:	e79c      	b.n	8001a9c <__aeabi_dadd+0x1c8>
 8001b62:	2600      	movs	r6, #0
 8001b64:	2700      	movs	r7, #0
 8001b66:	0524      	lsls	r4, r4, #20
 8001b68:	4334      	orrs	r4, r6
 8001b6a:	07ed      	lsls	r5, r5, #31
 8001b6c:	432c      	orrs	r4, r5
 8001b6e:	0038      	movs	r0, r7
 8001b70:	0021      	movs	r1, r4
 8001b72:	b002      	add	sp, #8
 8001b74:	bce0      	pop	{r5, r6, r7}
 8001b76:	46ba      	mov	sl, r7
 8001b78:	46b1      	mov	r9, r6
 8001b7a:	46a8      	mov	r8, r5
 8001b7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b7e:	077b      	lsls	r3, r7, #29
 8001b80:	d004      	beq.n	8001b8c <__aeabi_dadd+0x2b8>
 8001b82:	230f      	movs	r3, #15
 8001b84:	403b      	ands	r3, r7
 8001b86:	2b04      	cmp	r3, #4
 8001b88:	d000      	beq.n	8001b8c <__aeabi_dadd+0x2b8>
 8001b8a:	e728      	b.n	80019de <__aeabi_dadd+0x10a>
 8001b8c:	08f8      	lsrs	r0, r7, #3
 8001b8e:	4b34      	ldr	r3, [pc, #208]	@ (8001c60 <__aeabi_dadd+0x38c>)
 8001b90:	0777      	lsls	r7, r6, #29
 8001b92:	4307      	orrs	r7, r0
 8001b94:	08f0      	lsrs	r0, r6, #3
 8001b96:	429c      	cmp	r4, r3
 8001b98:	d000      	beq.n	8001b9c <__aeabi_dadd+0x2c8>
 8001b9a:	e24a      	b.n	8002032 <__aeabi_dadd+0x75e>
 8001b9c:	003b      	movs	r3, r7
 8001b9e:	4303      	orrs	r3, r0
 8001ba0:	d059      	beq.n	8001c56 <__aeabi_dadd+0x382>
 8001ba2:	2680      	movs	r6, #128	@ 0x80
 8001ba4:	0336      	lsls	r6, r6, #12
 8001ba6:	4306      	orrs	r6, r0
 8001ba8:	0336      	lsls	r6, r6, #12
 8001baa:	4c2d      	ldr	r4, [pc, #180]	@ (8001c60 <__aeabi_dadd+0x38c>)
 8001bac:	0b36      	lsrs	r6, r6, #12
 8001bae:	e7da      	b.n	8001b66 <__aeabi_dadd+0x292>
 8001bb0:	2900      	cmp	r1, #0
 8001bb2:	d061      	beq.n	8001c78 <__aeabi_dadd+0x3a4>
 8001bb4:	4641      	mov	r1, r8
 8001bb6:	1b09      	subs	r1, r1, r4
 8001bb8:	2c00      	cmp	r4, #0
 8001bba:	d100      	bne.n	8001bbe <__aeabi_dadd+0x2ea>
 8001bbc:	e0b9      	b.n	8001d32 <__aeabi_dadd+0x45e>
 8001bbe:	4c28      	ldr	r4, [pc, #160]	@ (8001c60 <__aeabi_dadd+0x38c>)
 8001bc0:	45a0      	cmp	r8, r4
 8001bc2:	d100      	bne.n	8001bc6 <__aeabi_dadd+0x2f2>
 8001bc4:	e1a5      	b.n	8001f12 <__aeabi_dadd+0x63e>
 8001bc6:	2701      	movs	r7, #1
 8001bc8:	2938      	cmp	r1, #56	@ 0x38
 8001bca:	dc13      	bgt.n	8001bf4 <__aeabi_dadd+0x320>
 8001bcc:	2480      	movs	r4, #128	@ 0x80
 8001bce:	0424      	lsls	r4, r4, #16
 8001bd0:	4326      	orrs	r6, r4
 8001bd2:	291f      	cmp	r1, #31
 8001bd4:	dd00      	ble.n	8001bd8 <__aeabi_dadd+0x304>
 8001bd6:	e1c8      	b.n	8001f6a <__aeabi_dadd+0x696>
 8001bd8:	2420      	movs	r4, #32
 8001bda:	0037      	movs	r7, r6
 8001bdc:	4648      	mov	r0, r9
 8001bde:	1a64      	subs	r4, r4, r1
 8001be0:	40a7      	lsls	r7, r4
 8001be2:	40c8      	lsrs	r0, r1
 8001be4:	4307      	orrs	r7, r0
 8001be6:	4648      	mov	r0, r9
 8001be8:	40a0      	lsls	r0, r4
 8001bea:	40ce      	lsrs	r6, r1
 8001bec:	1e44      	subs	r4, r0, #1
 8001bee:	41a0      	sbcs	r0, r4
 8001bf0:	199b      	adds	r3, r3, r6
 8001bf2:	4307      	orrs	r7, r0
 8001bf4:	18bf      	adds	r7, r7, r2
 8001bf6:	4297      	cmp	r7, r2
 8001bf8:	4192      	sbcs	r2, r2
 8001bfa:	4252      	negs	r2, r2
 8001bfc:	4644      	mov	r4, r8
 8001bfe:	18d6      	adds	r6, r2, r3
 8001c00:	e763      	b.n	8001aca <__aeabi_dadd+0x1f6>
 8001c02:	0038      	movs	r0, r7
 8001c04:	f001 fed0 	bl	80039a8 <__clzsi2>
 8001c08:	0003      	movs	r3, r0
 8001c0a:	3318      	adds	r3, #24
 8001c0c:	2b1f      	cmp	r3, #31
 8001c0e:	dc00      	bgt.n	8001c12 <__aeabi_dadd+0x33e>
 8001c10:	e6bf      	b.n	8001992 <__aeabi_dadd+0xbe>
 8001c12:	003a      	movs	r2, r7
 8001c14:	3808      	subs	r0, #8
 8001c16:	4082      	lsls	r2, r0
 8001c18:	429c      	cmp	r4, r3
 8001c1a:	dd00      	ble.n	8001c1e <__aeabi_dadd+0x34a>
 8001c1c:	e083      	b.n	8001d26 <__aeabi_dadd+0x452>
 8001c1e:	1b1b      	subs	r3, r3, r4
 8001c20:	1c58      	adds	r0, r3, #1
 8001c22:	281f      	cmp	r0, #31
 8001c24:	dc00      	bgt.n	8001c28 <__aeabi_dadd+0x354>
 8001c26:	e1b4      	b.n	8001f92 <__aeabi_dadd+0x6be>
 8001c28:	0017      	movs	r7, r2
 8001c2a:	3b1f      	subs	r3, #31
 8001c2c:	40df      	lsrs	r7, r3
 8001c2e:	2820      	cmp	r0, #32
 8001c30:	d005      	beq.n	8001c3e <__aeabi_dadd+0x36a>
 8001c32:	2340      	movs	r3, #64	@ 0x40
 8001c34:	1a1b      	subs	r3, r3, r0
 8001c36:	409a      	lsls	r2, r3
 8001c38:	1e53      	subs	r3, r2, #1
 8001c3a:	419a      	sbcs	r2, r3
 8001c3c:	4317      	orrs	r7, r2
 8001c3e:	2400      	movs	r4, #0
 8001c40:	2f00      	cmp	r7, #0
 8001c42:	d00a      	beq.n	8001c5a <__aeabi_dadd+0x386>
 8001c44:	077b      	lsls	r3, r7, #29
 8001c46:	d000      	beq.n	8001c4a <__aeabi_dadd+0x376>
 8001c48:	e6c4      	b.n	80019d4 <__aeabi_dadd+0x100>
 8001c4a:	0026      	movs	r6, r4
 8001c4c:	e79e      	b.n	8001b8c <__aeabi_dadd+0x2b8>
 8001c4e:	464b      	mov	r3, r9
 8001c50:	000c      	movs	r4, r1
 8001c52:	08d8      	lsrs	r0, r3, #3
 8001c54:	e79b      	b.n	8001b8e <__aeabi_dadd+0x2ba>
 8001c56:	2700      	movs	r7, #0
 8001c58:	4c01      	ldr	r4, [pc, #4]	@ (8001c60 <__aeabi_dadd+0x38c>)
 8001c5a:	2600      	movs	r6, #0
 8001c5c:	e783      	b.n	8001b66 <__aeabi_dadd+0x292>
 8001c5e:	46c0      	nop			@ (mov r8, r8)
 8001c60:	000007ff 	.word	0x000007ff
 8001c64:	ff7fffff 	.word	0xff7fffff
 8001c68:	000007fe 	.word	0x000007fe
 8001c6c:	464b      	mov	r3, r9
 8001c6e:	0777      	lsls	r7, r6, #29
 8001c70:	08d8      	lsrs	r0, r3, #3
 8001c72:	4307      	orrs	r7, r0
 8001c74:	08f0      	lsrs	r0, r6, #3
 8001c76:	e791      	b.n	8001b9c <__aeabi_dadd+0x2c8>
 8001c78:	4fcd      	ldr	r7, [pc, #820]	@ (8001fb0 <__aeabi_dadd+0x6dc>)
 8001c7a:	1c61      	adds	r1, r4, #1
 8001c7c:	4239      	tst	r1, r7
 8001c7e:	d16b      	bne.n	8001d58 <__aeabi_dadd+0x484>
 8001c80:	0031      	movs	r1, r6
 8001c82:	4648      	mov	r0, r9
 8001c84:	4301      	orrs	r1, r0
 8001c86:	2c00      	cmp	r4, #0
 8001c88:	d000      	beq.n	8001c8c <__aeabi_dadd+0x3b8>
 8001c8a:	e14b      	b.n	8001f24 <__aeabi_dadd+0x650>
 8001c8c:	001f      	movs	r7, r3
 8001c8e:	4317      	orrs	r7, r2
 8001c90:	2900      	cmp	r1, #0
 8001c92:	d100      	bne.n	8001c96 <__aeabi_dadd+0x3c2>
 8001c94:	e181      	b.n	8001f9a <__aeabi_dadd+0x6c6>
 8001c96:	2f00      	cmp	r7, #0
 8001c98:	d100      	bne.n	8001c9c <__aeabi_dadd+0x3c8>
 8001c9a:	e74c      	b.n	8001b36 <__aeabi_dadd+0x262>
 8001c9c:	444a      	add	r2, r9
 8001c9e:	454a      	cmp	r2, r9
 8001ca0:	4180      	sbcs	r0, r0
 8001ca2:	18f6      	adds	r6, r6, r3
 8001ca4:	4240      	negs	r0, r0
 8001ca6:	1836      	adds	r6, r6, r0
 8001ca8:	0233      	lsls	r3, r6, #8
 8001caa:	d500      	bpl.n	8001cae <__aeabi_dadd+0x3da>
 8001cac:	e1b0      	b.n	8002010 <__aeabi_dadd+0x73c>
 8001cae:	0017      	movs	r7, r2
 8001cb0:	4691      	mov	r9, r2
 8001cb2:	4337      	orrs	r7, r6
 8001cb4:	d000      	beq.n	8001cb8 <__aeabi_dadd+0x3e4>
 8001cb6:	e73e      	b.n	8001b36 <__aeabi_dadd+0x262>
 8001cb8:	2600      	movs	r6, #0
 8001cba:	e754      	b.n	8001b66 <__aeabi_dadd+0x292>
 8001cbc:	4649      	mov	r1, r9
 8001cbe:	1a89      	subs	r1, r1, r2
 8001cc0:	4688      	mov	r8, r1
 8001cc2:	45c1      	cmp	r9, r8
 8001cc4:	41bf      	sbcs	r7, r7
 8001cc6:	1af1      	subs	r1, r6, r3
 8001cc8:	427f      	negs	r7, r7
 8001cca:	1bc9      	subs	r1, r1, r7
 8001ccc:	020f      	lsls	r7, r1, #8
 8001cce:	d461      	bmi.n	8001d94 <__aeabi_dadd+0x4c0>
 8001cd0:	4647      	mov	r7, r8
 8001cd2:	430f      	orrs	r7, r1
 8001cd4:	d100      	bne.n	8001cd8 <__aeabi_dadd+0x404>
 8001cd6:	e0bd      	b.n	8001e54 <__aeabi_dadd+0x580>
 8001cd8:	000e      	movs	r6, r1
 8001cda:	4647      	mov	r7, r8
 8001cdc:	e651      	b.n	8001982 <__aeabi_dadd+0xae>
 8001cde:	4cb5      	ldr	r4, [pc, #724]	@ (8001fb4 <__aeabi_dadd+0x6e0>)
 8001ce0:	45a0      	cmp	r8, r4
 8001ce2:	d100      	bne.n	8001ce6 <__aeabi_dadd+0x412>
 8001ce4:	e100      	b.n	8001ee8 <__aeabi_dadd+0x614>
 8001ce6:	2701      	movs	r7, #1
 8001ce8:	2938      	cmp	r1, #56	@ 0x38
 8001cea:	dd00      	ble.n	8001cee <__aeabi_dadd+0x41a>
 8001cec:	e6b8      	b.n	8001a60 <__aeabi_dadd+0x18c>
 8001cee:	2480      	movs	r4, #128	@ 0x80
 8001cf0:	0424      	lsls	r4, r4, #16
 8001cf2:	4326      	orrs	r6, r4
 8001cf4:	e6a3      	b.n	8001a3e <__aeabi_dadd+0x16a>
 8001cf6:	4eb0      	ldr	r6, [pc, #704]	@ (8001fb8 <__aeabi_dadd+0x6e4>)
 8001cf8:	1ae4      	subs	r4, r4, r3
 8001cfa:	4016      	ands	r6, r2
 8001cfc:	077b      	lsls	r3, r7, #29
 8001cfe:	d000      	beq.n	8001d02 <__aeabi_dadd+0x42e>
 8001d00:	e73f      	b.n	8001b82 <__aeabi_dadd+0x2ae>
 8001d02:	e743      	b.n	8001b8c <__aeabi_dadd+0x2b8>
 8001d04:	000f      	movs	r7, r1
 8001d06:	0018      	movs	r0, r3
 8001d08:	3f20      	subs	r7, #32
 8001d0a:	40f8      	lsrs	r0, r7
 8001d0c:	4684      	mov	ip, r0
 8001d0e:	2920      	cmp	r1, #32
 8001d10:	d003      	beq.n	8001d1a <__aeabi_dadd+0x446>
 8001d12:	2740      	movs	r7, #64	@ 0x40
 8001d14:	1a79      	subs	r1, r7, r1
 8001d16:	408b      	lsls	r3, r1
 8001d18:	431a      	orrs	r2, r3
 8001d1a:	1e53      	subs	r3, r2, #1
 8001d1c:	419a      	sbcs	r2, r3
 8001d1e:	4663      	mov	r3, ip
 8001d20:	0017      	movs	r7, r2
 8001d22:	431f      	orrs	r7, r3
 8001d24:	e622      	b.n	800196c <__aeabi_dadd+0x98>
 8001d26:	48a4      	ldr	r0, [pc, #656]	@ (8001fb8 <__aeabi_dadd+0x6e4>)
 8001d28:	1ae1      	subs	r1, r4, r3
 8001d2a:	4010      	ands	r0, r2
 8001d2c:	0747      	lsls	r7, r0, #29
 8001d2e:	08c0      	lsrs	r0, r0, #3
 8001d30:	e707      	b.n	8001b42 <__aeabi_dadd+0x26e>
 8001d32:	0034      	movs	r4, r6
 8001d34:	4648      	mov	r0, r9
 8001d36:	4304      	orrs	r4, r0
 8001d38:	d100      	bne.n	8001d3c <__aeabi_dadd+0x468>
 8001d3a:	e0fa      	b.n	8001f32 <__aeabi_dadd+0x65e>
 8001d3c:	1e4c      	subs	r4, r1, #1
 8001d3e:	2901      	cmp	r1, #1
 8001d40:	d100      	bne.n	8001d44 <__aeabi_dadd+0x470>
 8001d42:	e0d7      	b.n	8001ef4 <__aeabi_dadd+0x620>
 8001d44:	4f9b      	ldr	r7, [pc, #620]	@ (8001fb4 <__aeabi_dadd+0x6e0>)
 8001d46:	42b9      	cmp	r1, r7
 8001d48:	d100      	bne.n	8001d4c <__aeabi_dadd+0x478>
 8001d4a:	e0e2      	b.n	8001f12 <__aeabi_dadd+0x63e>
 8001d4c:	2701      	movs	r7, #1
 8001d4e:	2c38      	cmp	r4, #56	@ 0x38
 8001d50:	dd00      	ble.n	8001d54 <__aeabi_dadd+0x480>
 8001d52:	e74f      	b.n	8001bf4 <__aeabi_dadd+0x320>
 8001d54:	0021      	movs	r1, r4
 8001d56:	e73c      	b.n	8001bd2 <__aeabi_dadd+0x2fe>
 8001d58:	4c96      	ldr	r4, [pc, #600]	@ (8001fb4 <__aeabi_dadd+0x6e0>)
 8001d5a:	42a1      	cmp	r1, r4
 8001d5c:	d100      	bne.n	8001d60 <__aeabi_dadd+0x48c>
 8001d5e:	e0dd      	b.n	8001f1c <__aeabi_dadd+0x648>
 8001d60:	444a      	add	r2, r9
 8001d62:	454a      	cmp	r2, r9
 8001d64:	4180      	sbcs	r0, r0
 8001d66:	18f3      	adds	r3, r6, r3
 8001d68:	4240      	negs	r0, r0
 8001d6a:	1818      	adds	r0, r3, r0
 8001d6c:	07c7      	lsls	r7, r0, #31
 8001d6e:	0852      	lsrs	r2, r2, #1
 8001d70:	4317      	orrs	r7, r2
 8001d72:	0846      	lsrs	r6, r0, #1
 8001d74:	0752      	lsls	r2, r2, #29
 8001d76:	d005      	beq.n	8001d84 <__aeabi_dadd+0x4b0>
 8001d78:	220f      	movs	r2, #15
 8001d7a:	000c      	movs	r4, r1
 8001d7c:	403a      	ands	r2, r7
 8001d7e:	2a04      	cmp	r2, #4
 8001d80:	d000      	beq.n	8001d84 <__aeabi_dadd+0x4b0>
 8001d82:	e62c      	b.n	80019de <__aeabi_dadd+0x10a>
 8001d84:	0776      	lsls	r6, r6, #29
 8001d86:	08ff      	lsrs	r7, r7, #3
 8001d88:	4337      	orrs	r7, r6
 8001d8a:	0900      	lsrs	r0, r0, #4
 8001d8c:	e6d9      	b.n	8001b42 <__aeabi_dadd+0x26e>
 8001d8e:	2700      	movs	r7, #0
 8001d90:	2600      	movs	r6, #0
 8001d92:	e6e8      	b.n	8001b66 <__aeabi_dadd+0x292>
 8001d94:	4649      	mov	r1, r9
 8001d96:	1a57      	subs	r7, r2, r1
 8001d98:	42ba      	cmp	r2, r7
 8001d9a:	4192      	sbcs	r2, r2
 8001d9c:	1b9e      	subs	r6, r3, r6
 8001d9e:	4252      	negs	r2, r2
 8001da0:	4665      	mov	r5, ip
 8001da2:	1ab6      	subs	r6, r6, r2
 8001da4:	e5ed      	b.n	8001982 <__aeabi_dadd+0xae>
 8001da6:	2900      	cmp	r1, #0
 8001da8:	d000      	beq.n	8001dac <__aeabi_dadd+0x4d8>
 8001daa:	e0c6      	b.n	8001f3a <__aeabi_dadd+0x666>
 8001dac:	2f00      	cmp	r7, #0
 8001dae:	d167      	bne.n	8001e80 <__aeabi_dadd+0x5ac>
 8001db0:	2680      	movs	r6, #128	@ 0x80
 8001db2:	2500      	movs	r5, #0
 8001db4:	4c7f      	ldr	r4, [pc, #508]	@ (8001fb4 <__aeabi_dadd+0x6e0>)
 8001db6:	0336      	lsls	r6, r6, #12
 8001db8:	e6d5      	b.n	8001b66 <__aeabi_dadd+0x292>
 8001dba:	4665      	mov	r5, ip
 8001dbc:	000c      	movs	r4, r1
 8001dbe:	001e      	movs	r6, r3
 8001dc0:	08d0      	lsrs	r0, r2, #3
 8001dc2:	e6e4      	b.n	8001b8e <__aeabi_dadd+0x2ba>
 8001dc4:	444a      	add	r2, r9
 8001dc6:	454a      	cmp	r2, r9
 8001dc8:	4180      	sbcs	r0, r0
 8001dca:	18f3      	adds	r3, r6, r3
 8001dcc:	4240      	negs	r0, r0
 8001dce:	1818      	adds	r0, r3, r0
 8001dd0:	0011      	movs	r1, r2
 8001dd2:	0203      	lsls	r3, r0, #8
 8001dd4:	d400      	bmi.n	8001dd8 <__aeabi_dadd+0x504>
 8001dd6:	e096      	b.n	8001f06 <__aeabi_dadd+0x632>
 8001dd8:	4b77      	ldr	r3, [pc, #476]	@ (8001fb8 <__aeabi_dadd+0x6e4>)
 8001dda:	0849      	lsrs	r1, r1, #1
 8001ddc:	4018      	ands	r0, r3
 8001dde:	07c3      	lsls	r3, r0, #31
 8001de0:	430b      	orrs	r3, r1
 8001de2:	0844      	lsrs	r4, r0, #1
 8001de4:	0749      	lsls	r1, r1, #29
 8001de6:	d100      	bne.n	8001dea <__aeabi_dadd+0x516>
 8001de8:	e129      	b.n	800203e <__aeabi_dadd+0x76a>
 8001dea:	220f      	movs	r2, #15
 8001dec:	401a      	ands	r2, r3
 8001dee:	2a04      	cmp	r2, #4
 8001df0:	d100      	bne.n	8001df4 <__aeabi_dadd+0x520>
 8001df2:	e0ea      	b.n	8001fca <__aeabi_dadd+0x6f6>
 8001df4:	1d1f      	adds	r7, r3, #4
 8001df6:	429f      	cmp	r7, r3
 8001df8:	41b6      	sbcs	r6, r6
 8001dfa:	4276      	negs	r6, r6
 8001dfc:	1936      	adds	r6, r6, r4
 8001dfe:	2402      	movs	r4, #2
 8001e00:	e6c4      	b.n	8001b8c <__aeabi_dadd+0x2b8>
 8001e02:	4649      	mov	r1, r9
 8001e04:	1a8f      	subs	r7, r1, r2
 8001e06:	45b9      	cmp	r9, r7
 8001e08:	4180      	sbcs	r0, r0
 8001e0a:	1af6      	subs	r6, r6, r3
 8001e0c:	4240      	negs	r0, r0
 8001e0e:	1a36      	subs	r6, r6, r0
 8001e10:	0233      	lsls	r3, r6, #8
 8001e12:	d406      	bmi.n	8001e22 <__aeabi_dadd+0x54e>
 8001e14:	0773      	lsls	r3, r6, #29
 8001e16:	08ff      	lsrs	r7, r7, #3
 8001e18:	2101      	movs	r1, #1
 8001e1a:	431f      	orrs	r7, r3
 8001e1c:	08f0      	lsrs	r0, r6, #3
 8001e1e:	e690      	b.n	8001b42 <__aeabi_dadd+0x26e>
 8001e20:	4665      	mov	r5, ip
 8001e22:	2401      	movs	r4, #1
 8001e24:	e5ab      	b.n	800197e <__aeabi_dadd+0xaa>
 8001e26:	464b      	mov	r3, r9
 8001e28:	0777      	lsls	r7, r6, #29
 8001e2a:	08d8      	lsrs	r0, r3, #3
 8001e2c:	4307      	orrs	r7, r0
 8001e2e:	08f0      	lsrs	r0, r6, #3
 8001e30:	e6b4      	b.n	8001b9c <__aeabi_dadd+0x2c8>
 8001e32:	000f      	movs	r7, r1
 8001e34:	0018      	movs	r0, r3
 8001e36:	3f20      	subs	r7, #32
 8001e38:	40f8      	lsrs	r0, r7
 8001e3a:	4684      	mov	ip, r0
 8001e3c:	2920      	cmp	r1, #32
 8001e3e:	d003      	beq.n	8001e48 <__aeabi_dadd+0x574>
 8001e40:	2740      	movs	r7, #64	@ 0x40
 8001e42:	1a79      	subs	r1, r7, r1
 8001e44:	408b      	lsls	r3, r1
 8001e46:	431a      	orrs	r2, r3
 8001e48:	1e53      	subs	r3, r2, #1
 8001e4a:	419a      	sbcs	r2, r3
 8001e4c:	4663      	mov	r3, ip
 8001e4e:	0017      	movs	r7, r2
 8001e50:	431f      	orrs	r7, r3
 8001e52:	e635      	b.n	8001ac0 <__aeabi_dadd+0x1ec>
 8001e54:	2500      	movs	r5, #0
 8001e56:	2400      	movs	r4, #0
 8001e58:	2600      	movs	r6, #0
 8001e5a:	e684      	b.n	8001b66 <__aeabi_dadd+0x292>
 8001e5c:	000c      	movs	r4, r1
 8001e5e:	0035      	movs	r5, r6
 8001e60:	3c20      	subs	r4, #32
 8001e62:	40e5      	lsrs	r5, r4
 8001e64:	2920      	cmp	r1, #32
 8001e66:	d005      	beq.n	8001e74 <__aeabi_dadd+0x5a0>
 8001e68:	2440      	movs	r4, #64	@ 0x40
 8001e6a:	1a61      	subs	r1, r4, r1
 8001e6c:	408e      	lsls	r6, r1
 8001e6e:	4649      	mov	r1, r9
 8001e70:	4331      	orrs	r1, r6
 8001e72:	4689      	mov	r9, r1
 8001e74:	4648      	mov	r0, r9
 8001e76:	1e41      	subs	r1, r0, #1
 8001e78:	4188      	sbcs	r0, r1
 8001e7a:	0007      	movs	r7, r0
 8001e7c:	432f      	orrs	r7, r5
 8001e7e:	e5ef      	b.n	8001a60 <__aeabi_dadd+0x18c>
 8001e80:	08d2      	lsrs	r2, r2, #3
 8001e82:	075f      	lsls	r7, r3, #29
 8001e84:	4665      	mov	r5, ip
 8001e86:	4317      	orrs	r7, r2
 8001e88:	08d8      	lsrs	r0, r3, #3
 8001e8a:	e687      	b.n	8001b9c <__aeabi_dadd+0x2c8>
 8001e8c:	1a17      	subs	r7, r2, r0
 8001e8e:	42ba      	cmp	r2, r7
 8001e90:	4192      	sbcs	r2, r2
 8001e92:	1b9e      	subs	r6, r3, r6
 8001e94:	4252      	negs	r2, r2
 8001e96:	1ab6      	subs	r6, r6, r2
 8001e98:	0233      	lsls	r3, r6, #8
 8001e9a:	d4c1      	bmi.n	8001e20 <__aeabi_dadd+0x54c>
 8001e9c:	0773      	lsls	r3, r6, #29
 8001e9e:	08ff      	lsrs	r7, r7, #3
 8001ea0:	4665      	mov	r5, ip
 8001ea2:	2101      	movs	r1, #1
 8001ea4:	431f      	orrs	r7, r3
 8001ea6:	08f0      	lsrs	r0, r6, #3
 8001ea8:	e64b      	b.n	8001b42 <__aeabi_dadd+0x26e>
 8001eaa:	2f00      	cmp	r7, #0
 8001eac:	d07b      	beq.n	8001fa6 <__aeabi_dadd+0x6d2>
 8001eae:	4665      	mov	r5, ip
 8001eb0:	001e      	movs	r6, r3
 8001eb2:	4691      	mov	r9, r2
 8001eb4:	e63f      	b.n	8001b36 <__aeabi_dadd+0x262>
 8001eb6:	1a81      	subs	r1, r0, r2
 8001eb8:	4688      	mov	r8, r1
 8001eba:	45c1      	cmp	r9, r8
 8001ebc:	41a4      	sbcs	r4, r4
 8001ebe:	1af1      	subs	r1, r6, r3
 8001ec0:	4264      	negs	r4, r4
 8001ec2:	1b09      	subs	r1, r1, r4
 8001ec4:	2480      	movs	r4, #128	@ 0x80
 8001ec6:	0424      	lsls	r4, r4, #16
 8001ec8:	4221      	tst	r1, r4
 8001eca:	d077      	beq.n	8001fbc <__aeabi_dadd+0x6e8>
 8001ecc:	1a10      	subs	r0, r2, r0
 8001ece:	4282      	cmp	r2, r0
 8001ed0:	4192      	sbcs	r2, r2
 8001ed2:	0007      	movs	r7, r0
 8001ed4:	1b9e      	subs	r6, r3, r6
 8001ed6:	4252      	negs	r2, r2
 8001ed8:	1ab6      	subs	r6, r6, r2
 8001eda:	4337      	orrs	r7, r6
 8001edc:	d000      	beq.n	8001ee0 <__aeabi_dadd+0x60c>
 8001ede:	e0a0      	b.n	8002022 <__aeabi_dadd+0x74e>
 8001ee0:	4665      	mov	r5, ip
 8001ee2:	2400      	movs	r4, #0
 8001ee4:	2600      	movs	r6, #0
 8001ee6:	e63e      	b.n	8001b66 <__aeabi_dadd+0x292>
 8001ee8:	075f      	lsls	r7, r3, #29
 8001eea:	08d2      	lsrs	r2, r2, #3
 8001eec:	4665      	mov	r5, ip
 8001eee:	4317      	orrs	r7, r2
 8001ef0:	08d8      	lsrs	r0, r3, #3
 8001ef2:	e653      	b.n	8001b9c <__aeabi_dadd+0x2c8>
 8001ef4:	1881      	adds	r1, r0, r2
 8001ef6:	4291      	cmp	r1, r2
 8001ef8:	4192      	sbcs	r2, r2
 8001efa:	18f0      	adds	r0, r6, r3
 8001efc:	4252      	negs	r2, r2
 8001efe:	1880      	adds	r0, r0, r2
 8001f00:	0203      	lsls	r3, r0, #8
 8001f02:	d500      	bpl.n	8001f06 <__aeabi_dadd+0x632>
 8001f04:	e768      	b.n	8001dd8 <__aeabi_dadd+0x504>
 8001f06:	0747      	lsls	r7, r0, #29
 8001f08:	08c9      	lsrs	r1, r1, #3
 8001f0a:	430f      	orrs	r7, r1
 8001f0c:	08c0      	lsrs	r0, r0, #3
 8001f0e:	2101      	movs	r1, #1
 8001f10:	e617      	b.n	8001b42 <__aeabi_dadd+0x26e>
 8001f12:	08d2      	lsrs	r2, r2, #3
 8001f14:	075f      	lsls	r7, r3, #29
 8001f16:	4317      	orrs	r7, r2
 8001f18:	08d8      	lsrs	r0, r3, #3
 8001f1a:	e63f      	b.n	8001b9c <__aeabi_dadd+0x2c8>
 8001f1c:	000c      	movs	r4, r1
 8001f1e:	2600      	movs	r6, #0
 8001f20:	2700      	movs	r7, #0
 8001f22:	e620      	b.n	8001b66 <__aeabi_dadd+0x292>
 8001f24:	2900      	cmp	r1, #0
 8001f26:	d156      	bne.n	8001fd6 <__aeabi_dadd+0x702>
 8001f28:	075f      	lsls	r7, r3, #29
 8001f2a:	08d2      	lsrs	r2, r2, #3
 8001f2c:	4317      	orrs	r7, r2
 8001f2e:	08d8      	lsrs	r0, r3, #3
 8001f30:	e634      	b.n	8001b9c <__aeabi_dadd+0x2c8>
 8001f32:	000c      	movs	r4, r1
 8001f34:	001e      	movs	r6, r3
 8001f36:	08d0      	lsrs	r0, r2, #3
 8001f38:	e629      	b.n	8001b8e <__aeabi_dadd+0x2ba>
 8001f3a:	08c1      	lsrs	r1, r0, #3
 8001f3c:	0770      	lsls	r0, r6, #29
 8001f3e:	4301      	orrs	r1, r0
 8001f40:	08f0      	lsrs	r0, r6, #3
 8001f42:	2f00      	cmp	r7, #0
 8001f44:	d062      	beq.n	800200c <__aeabi_dadd+0x738>
 8001f46:	2480      	movs	r4, #128	@ 0x80
 8001f48:	0324      	lsls	r4, r4, #12
 8001f4a:	4220      	tst	r0, r4
 8001f4c:	d007      	beq.n	8001f5e <__aeabi_dadd+0x68a>
 8001f4e:	08de      	lsrs	r6, r3, #3
 8001f50:	4226      	tst	r6, r4
 8001f52:	d104      	bne.n	8001f5e <__aeabi_dadd+0x68a>
 8001f54:	4665      	mov	r5, ip
 8001f56:	0030      	movs	r0, r6
 8001f58:	08d1      	lsrs	r1, r2, #3
 8001f5a:	075b      	lsls	r3, r3, #29
 8001f5c:	4319      	orrs	r1, r3
 8001f5e:	0f4f      	lsrs	r7, r1, #29
 8001f60:	00c9      	lsls	r1, r1, #3
 8001f62:	08c9      	lsrs	r1, r1, #3
 8001f64:	077f      	lsls	r7, r7, #29
 8001f66:	430f      	orrs	r7, r1
 8001f68:	e618      	b.n	8001b9c <__aeabi_dadd+0x2c8>
 8001f6a:	000c      	movs	r4, r1
 8001f6c:	0030      	movs	r0, r6
 8001f6e:	3c20      	subs	r4, #32
 8001f70:	40e0      	lsrs	r0, r4
 8001f72:	4684      	mov	ip, r0
 8001f74:	2920      	cmp	r1, #32
 8001f76:	d005      	beq.n	8001f84 <__aeabi_dadd+0x6b0>
 8001f78:	2440      	movs	r4, #64	@ 0x40
 8001f7a:	1a61      	subs	r1, r4, r1
 8001f7c:	408e      	lsls	r6, r1
 8001f7e:	4649      	mov	r1, r9
 8001f80:	4331      	orrs	r1, r6
 8001f82:	4689      	mov	r9, r1
 8001f84:	4648      	mov	r0, r9
 8001f86:	1e41      	subs	r1, r0, #1
 8001f88:	4188      	sbcs	r0, r1
 8001f8a:	4661      	mov	r1, ip
 8001f8c:	0007      	movs	r7, r0
 8001f8e:	430f      	orrs	r7, r1
 8001f90:	e630      	b.n	8001bf4 <__aeabi_dadd+0x320>
 8001f92:	2120      	movs	r1, #32
 8001f94:	2700      	movs	r7, #0
 8001f96:	1a09      	subs	r1, r1, r0
 8001f98:	e50e      	b.n	80019b8 <__aeabi_dadd+0xe4>
 8001f9a:	001e      	movs	r6, r3
 8001f9c:	2f00      	cmp	r7, #0
 8001f9e:	d000      	beq.n	8001fa2 <__aeabi_dadd+0x6ce>
 8001fa0:	e522      	b.n	80019e8 <__aeabi_dadd+0x114>
 8001fa2:	2400      	movs	r4, #0
 8001fa4:	e758      	b.n	8001e58 <__aeabi_dadd+0x584>
 8001fa6:	2500      	movs	r5, #0
 8001fa8:	2400      	movs	r4, #0
 8001faa:	2600      	movs	r6, #0
 8001fac:	e5db      	b.n	8001b66 <__aeabi_dadd+0x292>
 8001fae:	46c0      	nop			@ (mov r8, r8)
 8001fb0:	000007fe 	.word	0x000007fe
 8001fb4:	000007ff 	.word	0x000007ff
 8001fb8:	ff7fffff 	.word	0xff7fffff
 8001fbc:	4647      	mov	r7, r8
 8001fbe:	430f      	orrs	r7, r1
 8001fc0:	d100      	bne.n	8001fc4 <__aeabi_dadd+0x6f0>
 8001fc2:	e747      	b.n	8001e54 <__aeabi_dadd+0x580>
 8001fc4:	000e      	movs	r6, r1
 8001fc6:	46c1      	mov	r9, r8
 8001fc8:	e5b5      	b.n	8001b36 <__aeabi_dadd+0x262>
 8001fca:	08df      	lsrs	r7, r3, #3
 8001fcc:	0764      	lsls	r4, r4, #29
 8001fce:	2102      	movs	r1, #2
 8001fd0:	4327      	orrs	r7, r4
 8001fd2:	0900      	lsrs	r0, r0, #4
 8001fd4:	e5b5      	b.n	8001b42 <__aeabi_dadd+0x26e>
 8001fd6:	0019      	movs	r1, r3
 8001fd8:	08c0      	lsrs	r0, r0, #3
 8001fda:	0777      	lsls	r7, r6, #29
 8001fdc:	4307      	orrs	r7, r0
 8001fde:	4311      	orrs	r1, r2
 8001fe0:	08f0      	lsrs	r0, r6, #3
 8001fe2:	2900      	cmp	r1, #0
 8001fe4:	d100      	bne.n	8001fe8 <__aeabi_dadd+0x714>
 8001fe6:	e5d9      	b.n	8001b9c <__aeabi_dadd+0x2c8>
 8001fe8:	2180      	movs	r1, #128	@ 0x80
 8001fea:	0309      	lsls	r1, r1, #12
 8001fec:	4208      	tst	r0, r1
 8001fee:	d007      	beq.n	8002000 <__aeabi_dadd+0x72c>
 8001ff0:	08dc      	lsrs	r4, r3, #3
 8001ff2:	420c      	tst	r4, r1
 8001ff4:	d104      	bne.n	8002000 <__aeabi_dadd+0x72c>
 8001ff6:	08d2      	lsrs	r2, r2, #3
 8001ff8:	075b      	lsls	r3, r3, #29
 8001ffa:	431a      	orrs	r2, r3
 8001ffc:	0017      	movs	r7, r2
 8001ffe:	0020      	movs	r0, r4
 8002000:	0f7b      	lsrs	r3, r7, #29
 8002002:	00ff      	lsls	r7, r7, #3
 8002004:	08ff      	lsrs	r7, r7, #3
 8002006:	075b      	lsls	r3, r3, #29
 8002008:	431f      	orrs	r7, r3
 800200a:	e5c7      	b.n	8001b9c <__aeabi_dadd+0x2c8>
 800200c:	000f      	movs	r7, r1
 800200e:	e5c5      	b.n	8001b9c <__aeabi_dadd+0x2c8>
 8002010:	4b12      	ldr	r3, [pc, #72]	@ (800205c <__aeabi_dadd+0x788>)
 8002012:	08d2      	lsrs	r2, r2, #3
 8002014:	4033      	ands	r3, r6
 8002016:	075f      	lsls	r7, r3, #29
 8002018:	025b      	lsls	r3, r3, #9
 800201a:	2401      	movs	r4, #1
 800201c:	4317      	orrs	r7, r2
 800201e:	0b1e      	lsrs	r6, r3, #12
 8002020:	e5a1      	b.n	8001b66 <__aeabi_dadd+0x292>
 8002022:	4226      	tst	r6, r4
 8002024:	d012      	beq.n	800204c <__aeabi_dadd+0x778>
 8002026:	4b0d      	ldr	r3, [pc, #52]	@ (800205c <__aeabi_dadd+0x788>)
 8002028:	4665      	mov	r5, ip
 800202a:	0002      	movs	r2, r0
 800202c:	2401      	movs	r4, #1
 800202e:	401e      	ands	r6, r3
 8002030:	e4e6      	b.n	8001a00 <__aeabi_dadd+0x12c>
 8002032:	0021      	movs	r1, r4
 8002034:	e585      	b.n	8001b42 <__aeabi_dadd+0x26e>
 8002036:	0017      	movs	r7, r2
 8002038:	e5a8      	b.n	8001b8c <__aeabi_dadd+0x2b8>
 800203a:	003a      	movs	r2, r7
 800203c:	e4d4      	b.n	80019e8 <__aeabi_dadd+0x114>
 800203e:	08db      	lsrs	r3, r3, #3
 8002040:	0764      	lsls	r4, r4, #29
 8002042:	431c      	orrs	r4, r3
 8002044:	0027      	movs	r7, r4
 8002046:	2102      	movs	r1, #2
 8002048:	0900      	lsrs	r0, r0, #4
 800204a:	e57a      	b.n	8001b42 <__aeabi_dadd+0x26e>
 800204c:	08c0      	lsrs	r0, r0, #3
 800204e:	0777      	lsls	r7, r6, #29
 8002050:	4307      	orrs	r7, r0
 8002052:	4665      	mov	r5, ip
 8002054:	2100      	movs	r1, #0
 8002056:	08f0      	lsrs	r0, r6, #3
 8002058:	e573      	b.n	8001b42 <__aeabi_dadd+0x26e>
 800205a:	46c0      	nop			@ (mov r8, r8)
 800205c:	ff7fffff 	.word	0xff7fffff

08002060 <__aeabi_ddiv>:
 8002060:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002062:	46de      	mov	lr, fp
 8002064:	4645      	mov	r5, r8
 8002066:	4657      	mov	r7, sl
 8002068:	464e      	mov	r6, r9
 800206a:	b5e0      	push	{r5, r6, r7, lr}
 800206c:	b087      	sub	sp, #28
 800206e:	9200      	str	r2, [sp, #0]
 8002070:	9301      	str	r3, [sp, #4]
 8002072:	030b      	lsls	r3, r1, #12
 8002074:	0b1b      	lsrs	r3, r3, #12
 8002076:	469b      	mov	fp, r3
 8002078:	0fca      	lsrs	r2, r1, #31
 800207a:	004b      	lsls	r3, r1, #1
 800207c:	0004      	movs	r4, r0
 800207e:	4680      	mov	r8, r0
 8002080:	0d5b      	lsrs	r3, r3, #21
 8002082:	9202      	str	r2, [sp, #8]
 8002084:	d100      	bne.n	8002088 <__aeabi_ddiv+0x28>
 8002086:	e098      	b.n	80021ba <__aeabi_ddiv+0x15a>
 8002088:	4a7c      	ldr	r2, [pc, #496]	@ (800227c <__aeabi_ddiv+0x21c>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d037      	beq.n	80020fe <__aeabi_ddiv+0x9e>
 800208e:	4659      	mov	r1, fp
 8002090:	0f42      	lsrs	r2, r0, #29
 8002092:	00c9      	lsls	r1, r1, #3
 8002094:	430a      	orrs	r2, r1
 8002096:	2180      	movs	r1, #128	@ 0x80
 8002098:	0409      	lsls	r1, r1, #16
 800209a:	4311      	orrs	r1, r2
 800209c:	00c2      	lsls	r2, r0, #3
 800209e:	4690      	mov	r8, r2
 80020a0:	4a77      	ldr	r2, [pc, #476]	@ (8002280 <__aeabi_ddiv+0x220>)
 80020a2:	4689      	mov	r9, r1
 80020a4:	4692      	mov	sl, r2
 80020a6:	449a      	add	sl, r3
 80020a8:	2300      	movs	r3, #0
 80020aa:	2400      	movs	r4, #0
 80020ac:	9303      	str	r3, [sp, #12]
 80020ae:	9e00      	ldr	r6, [sp, #0]
 80020b0:	9f01      	ldr	r7, [sp, #4]
 80020b2:	033b      	lsls	r3, r7, #12
 80020b4:	0b1b      	lsrs	r3, r3, #12
 80020b6:	469b      	mov	fp, r3
 80020b8:	007b      	lsls	r3, r7, #1
 80020ba:	0030      	movs	r0, r6
 80020bc:	0d5b      	lsrs	r3, r3, #21
 80020be:	0ffd      	lsrs	r5, r7, #31
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d059      	beq.n	8002178 <__aeabi_ddiv+0x118>
 80020c4:	4a6d      	ldr	r2, [pc, #436]	@ (800227c <__aeabi_ddiv+0x21c>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d048      	beq.n	800215c <__aeabi_ddiv+0xfc>
 80020ca:	4659      	mov	r1, fp
 80020cc:	0f72      	lsrs	r2, r6, #29
 80020ce:	00c9      	lsls	r1, r1, #3
 80020d0:	430a      	orrs	r2, r1
 80020d2:	2180      	movs	r1, #128	@ 0x80
 80020d4:	0409      	lsls	r1, r1, #16
 80020d6:	4311      	orrs	r1, r2
 80020d8:	468b      	mov	fp, r1
 80020da:	4969      	ldr	r1, [pc, #420]	@ (8002280 <__aeabi_ddiv+0x220>)
 80020dc:	00f2      	lsls	r2, r6, #3
 80020de:	468c      	mov	ip, r1
 80020e0:	4651      	mov	r1, sl
 80020e2:	4463      	add	r3, ip
 80020e4:	1acb      	subs	r3, r1, r3
 80020e6:	469a      	mov	sl, r3
 80020e8:	2100      	movs	r1, #0
 80020ea:	9e02      	ldr	r6, [sp, #8]
 80020ec:	406e      	eors	r6, r5
 80020ee:	b2f6      	uxtb	r6, r6
 80020f0:	2c0f      	cmp	r4, #15
 80020f2:	d900      	bls.n	80020f6 <__aeabi_ddiv+0x96>
 80020f4:	e0ce      	b.n	8002294 <__aeabi_ddiv+0x234>
 80020f6:	4b63      	ldr	r3, [pc, #396]	@ (8002284 <__aeabi_ddiv+0x224>)
 80020f8:	00a4      	lsls	r4, r4, #2
 80020fa:	591b      	ldr	r3, [r3, r4]
 80020fc:	469f      	mov	pc, r3
 80020fe:	465a      	mov	r2, fp
 8002100:	4302      	orrs	r2, r0
 8002102:	4691      	mov	r9, r2
 8002104:	d000      	beq.n	8002108 <__aeabi_ddiv+0xa8>
 8002106:	e090      	b.n	800222a <__aeabi_ddiv+0x1ca>
 8002108:	469a      	mov	sl, r3
 800210a:	2302      	movs	r3, #2
 800210c:	4690      	mov	r8, r2
 800210e:	2408      	movs	r4, #8
 8002110:	9303      	str	r3, [sp, #12]
 8002112:	e7cc      	b.n	80020ae <__aeabi_ddiv+0x4e>
 8002114:	46cb      	mov	fp, r9
 8002116:	4642      	mov	r2, r8
 8002118:	9d02      	ldr	r5, [sp, #8]
 800211a:	9903      	ldr	r1, [sp, #12]
 800211c:	2902      	cmp	r1, #2
 800211e:	d100      	bne.n	8002122 <__aeabi_ddiv+0xc2>
 8002120:	e1de      	b.n	80024e0 <__aeabi_ddiv+0x480>
 8002122:	2903      	cmp	r1, #3
 8002124:	d100      	bne.n	8002128 <__aeabi_ddiv+0xc8>
 8002126:	e08d      	b.n	8002244 <__aeabi_ddiv+0x1e4>
 8002128:	2901      	cmp	r1, #1
 800212a:	d000      	beq.n	800212e <__aeabi_ddiv+0xce>
 800212c:	e179      	b.n	8002422 <__aeabi_ddiv+0x3c2>
 800212e:	002e      	movs	r6, r5
 8002130:	2200      	movs	r2, #0
 8002132:	2300      	movs	r3, #0
 8002134:	2400      	movs	r4, #0
 8002136:	4690      	mov	r8, r2
 8002138:	051b      	lsls	r3, r3, #20
 800213a:	4323      	orrs	r3, r4
 800213c:	07f6      	lsls	r6, r6, #31
 800213e:	4333      	orrs	r3, r6
 8002140:	4640      	mov	r0, r8
 8002142:	0019      	movs	r1, r3
 8002144:	b007      	add	sp, #28
 8002146:	bcf0      	pop	{r4, r5, r6, r7}
 8002148:	46bb      	mov	fp, r7
 800214a:	46b2      	mov	sl, r6
 800214c:	46a9      	mov	r9, r5
 800214e:	46a0      	mov	r8, r4
 8002150:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002152:	2200      	movs	r2, #0
 8002154:	2400      	movs	r4, #0
 8002156:	4690      	mov	r8, r2
 8002158:	4b48      	ldr	r3, [pc, #288]	@ (800227c <__aeabi_ddiv+0x21c>)
 800215a:	e7ed      	b.n	8002138 <__aeabi_ddiv+0xd8>
 800215c:	465a      	mov	r2, fp
 800215e:	9b00      	ldr	r3, [sp, #0]
 8002160:	431a      	orrs	r2, r3
 8002162:	4b49      	ldr	r3, [pc, #292]	@ (8002288 <__aeabi_ddiv+0x228>)
 8002164:	469c      	mov	ip, r3
 8002166:	44e2      	add	sl, ip
 8002168:	2a00      	cmp	r2, #0
 800216a:	d159      	bne.n	8002220 <__aeabi_ddiv+0x1c0>
 800216c:	2302      	movs	r3, #2
 800216e:	431c      	orrs	r4, r3
 8002170:	2300      	movs	r3, #0
 8002172:	2102      	movs	r1, #2
 8002174:	469b      	mov	fp, r3
 8002176:	e7b8      	b.n	80020ea <__aeabi_ddiv+0x8a>
 8002178:	465a      	mov	r2, fp
 800217a:	9b00      	ldr	r3, [sp, #0]
 800217c:	431a      	orrs	r2, r3
 800217e:	d049      	beq.n	8002214 <__aeabi_ddiv+0x1b4>
 8002180:	465b      	mov	r3, fp
 8002182:	2b00      	cmp	r3, #0
 8002184:	d100      	bne.n	8002188 <__aeabi_ddiv+0x128>
 8002186:	e19c      	b.n	80024c2 <__aeabi_ddiv+0x462>
 8002188:	4658      	mov	r0, fp
 800218a:	f001 fc0d 	bl	80039a8 <__clzsi2>
 800218e:	0002      	movs	r2, r0
 8002190:	0003      	movs	r3, r0
 8002192:	3a0b      	subs	r2, #11
 8002194:	271d      	movs	r7, #29
 8002196:	9e00      	ldr	r6, [sp, #0]
 8002198:	1aba      	subs	r2, r7, r2
 800219a:	0019      	movs	r1, r3
 800219c:	4658      	mov	r0, fp
 800219e:	40d6      	lsrs	r6, r2
 80021a0:	3908      	subs	r1, #8
 80021a2:	4088      	lsls	r0, r1
 80021a4:	0032      	movs	r2, r6
 80021a6:	4302      	orrs	r2, r0
 80021a8:	4693      	mov	fp, r2
 80021aa:	9a00      	ldr	r2, [sp, #0]
 80021ac:	408a      	lsls	r2, r1
 80021ae:	4937      	ldr	r1, [pc, #220]	@ (800228c <__aeabi_ddiv+0x22c>)
 80021b0:	4453      	add	r3, sl
 80021b2:	468a      	mov	sl, r1
 80021b4:	2100      	movs	r1, #0
 80021b6:	449a      	add	sl, r3
 80021b8:	e797      	b.n	80020ea <__aeabi_ddiv+0x8a>
 80021ba:	465b      	mov	r3, fp
 80021bc:	4303      	orrs	r3, r0
 80021be:	4699      	mov	r9, r3
 80021c0:	d021      	beq.n	8002206 <__aeabi_ddiv+0x1a6>
 80021c2:	465b      	mov	r3, fp
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d100      	bne.n	80021ca <__aeabi_ddiv+0x16a>
 80021c8:	e169      	b.n	800249e <__aeabi_ddiv+0x43e>
 80021ca:	4658      	mov	r0, fp
 80021cc:	f001 fbec 	bl	80039a8 <__clzsi2>
 80021d0:	230b      	movs	r3, #11
 80021d2:	425b      	negs	r3, r3
 80021d4:	469c      	mov	ip, r3
 80021d6:	0002      	movs	r2, r0
 80021d8:	4484      	add	ip, r0
 80021da:	4666      	mov	r6, ip
 80021dc:	231d      	movs	r3, #29
 80021de:	1b9b      	subs	r3, r3, r6
 80021e0:	0026      	movs	r6, r4
 80021e2:	0011      	movs	r1, r2
 80021e4:	4658      	mov	r0, fp
 80021e6:	40de      	lsrs	r6, r3
 80021e8:	3908      	subs	r1, #8
 80021ea:	4088      	lsls	r0, r1
 80021ec:	0033      	movs	r3, r6
 80021ee:	4303      	orrs	r3, r0
 80021f0:	4699      	mov	r9, r3
 80021f2:	0023      	movs	r3, r4
 80021f4:	408b      	lsls	r3, r1
 80021f6:	4698      	mov	r8, r3
 80021f8:	4b25      	ldr	r3, [pc, #148]	@ (8002290 <__aeabi_ddiv+0x230>)
 80021fa:	2400      	movs	r4, #0
 80021fc:	1a9b      	subs	r3, r3, r2
 80021fe:	469a      	mov	sl, r3
 8002200:	2300      	movs	r3, #0
 8002202:	9303      	str	r3, [sp, #12]
 8002204:	e753      	b.n	80020ae <__aeabi_ddiv+0x4e>
 8002206:	2300      	movs	r3, #0
 8002208:	4698      	mov	r8, r3
 800220a:	469a      	mov	sl, r3
 800220c:	3301      	adds	r3, #1
 800220e:	2404      	movs	r4, #4
 8002210:	9303      	str	r3, [sp, #12]
 8002212:	e74c      	b.n	80020ae <__aeabi_ddiv+0x4e>
 8002214:	2301      	movs	r3, #1
 8002216:	431c      	orrs	r4, r3
 8002218:	2300      	movs	r3, #0
 800221a:	2101      	movs	r1, #1
 800221c:	469b      	mov	fp, r3
 800221e:	e764      	b.n	80020ea <__aeabi_ddiv+0x8a>
 8002220:	2303      	movs	r3, #3
 8002222:	0032      	movs	r2, r6
 8002224:	2103      	movs	r1, #3
 8002226:	431c      	orrs	r4, r3
 8002228:	e75f      	b.n	80020ea <__aeabi_ddiv+0x8a>
 800222a:	469a      	mov	sl, r3
 800222c:	2303      	movs	r3, #3
 800222e:	46d9      	mov	r9, fp
 8002230:	240c      	movs	r4, #12
 8002232:	9303      	str	r3, [sp, #12]
 8002234:	e73b      	b.n	80020ae <__aeabi_ddiv+0x4e>
 8002236:	2300      	movs	r3, #0
 8002238:	2480      	movs	r4, #128	@ 0x80
 800223a:	4698      	mov	r8, r3
 800223c:	2600      	movs	r6, #0
 800223e:	4b0f      	ldr	r3, [pc, #60]	@ (800227c <__aeabi_ddiv+0x21c>)
 8002240:	0324      	lsls	r4, r4, #12
 8002242:	e779      	b.n	8002138 <__aeabi_ddiv+0xd8>
 8002244:	2480      	movs	r4, #128	@ 0x80
 8002246:	465b      	mov	r3, fp
 8002248:	0324      	lsls	r4, r4, #12
 800224a:	431c      	orrs	r4, r3
 800224c:	0324      	lsls	r4, r4, #12
 800224e:	002e      	movs	r6, r5
 8002250:	4690      	mov	r8, r2
 8002252:	4b0a      	ldr	r3, [pc, #40]	@ (800227c <__aeabi_ddiv+0x21c>)
 8002254:	0b24      	lsrs	r4, r4, #12
 8002256:	e76f      	b.n	8002138 <__aeabi_ddiv+0xd8>
 8002258:	2480      	movs	r4, #128	@ 0x80
 800225a:	464b      	mov	r3, r9
 800225c:	0324      	lsls	r4, r4, #12
 800225e:	4223      	tst	r3, r4
 8002260:	d002      	beq.n	8002268 <__aeabi_ddiv+0x208>
 8002262:	465b      	mov	r3, fp
 8002264:	4223      	tst	r3, r4
 8002266:	d0f0      	beq.n	800224a <__aeabi_ddiv+0x1ea>
 8002268:	2480      	movs	r4, #128	@ 0x80
 800226a:	464b      	mov	r3, r9
 800226c:	0324      	lsls	r4, r4, #12
 800226e:	431c      	orrs	r4, r3
 8002270:	0324      	lsls	r4, r4, #12
 8002272:	9e02      	ldr	r6, [sp, #8]
 8002274:	4b01      	ldr	r3, [pc, #4]	@ (800227c <__aeabi_ddiv+0x21c>)
 8002276:	0b24      	lsrs	r4, r4, #12
 8002278:	e75e      	b.n	8002138 <__aeabi_ddiv+0xd8>
 800227a:	46c0      	nop			@ (mov r8, r8)
 800227c:	000007ff 	.word	0x000007ff
 8002280:	fffffc01 	.word	0xfffffc01
 8002284:	0801159c 	.word	0x0801159c
 8002288:	fffff801 	.word	0xfffff801
 800228c:	000003f3 	.word	0x000003f3
 8002290:	fffffc0d 	.word	0xfffffc0d
 8002294:	45cb      	cmp	fp, r9
 8002296:	d200      	bcs.n	800229a <__aeabi_ddiv+0x23a>
 8002298:	e0f8      	b.n	800248c <__aeabi_ddiv+0x42c>
 800229a:	d100      	bne.n	800229e <__aeabi_ddiv+0x23e>
 800229c:	e0f3      	b.n	8002486 <__aeabi_ddiv+0x426>
 800229e:	2301      	movs	r3, #1
 80022a0:	425b      	negs	r3, r3
 80022a2:	469c      	mov	ip, r3
 80022a4:	4644      	mov	r4, r8
 80022a6:	4648      	mov	r0, r9
 80022a8:	2500      	movs	r5, #0
 80022aa:	44e2      	add	sl, ip
 80022ac:	465b      	mov	r3, fp
 80022ae:	0e17      	lsrs	r7, r2, #24
 80022b0:	021b      	lsls	r3, r3, #8
 80022b2:	431f      	orrs	r7, r3
 80022b4:	0c19      	lsrs	r1, r3, #16
 80022b6:	043b      	lsls	r3, r7, #16
 80022b8:	0212      	lsls	r2, r2, #8
 80022ba:	9700      	str	r7, [sp, #0]
 80022bc:	0c1f      	lsrs	r7, r3, #16
 80022be:	4691      	mov	r9, r2
 80022c0:	9102      	str	r1, [sp, #8]
 80022c2:	9703      	str	r7, [sp, #12]
 80022c4:	f7fd ffca 	bl	800025c <__aeabi_uidivmod>
 80022c8:	0002      	movs	r2, r0
 80022ca:	437a      	muls	r2, r7
 80022cc:	040b      	lsls	r3, r1, #16
 80022ce:	0c21      	lsrs	r1, r4, #16
 80022d0:	4680      	mov	r8, r0
 80022d2:	4319      	orrs	r1, r3
 80022d4:	428a      	cmp	r2, r1
 80022d6:	d909      	bls.n	80022ec <__aeabi_ddiv+0x28c>
 80022d8:	9f00      	ldr	r7, [sp, #0]
 80022da:	2301      	movs	r3, #1
 80022dc:	46bc      	mov	ip, r7
 80022de:	425b      	negs	r3, r3
 80022e0:	4461      	add	r1, ip
 80022e2:	469c      	mov	ip, r3
 80022e4:	44e0      	add	r8, ip
 80022e6:	428f      	cmp	r7, r1
 80022e8:	d800      	bhi.n	80022ec <__aeabi_ddiv+0x28c>
 80022ea:	e15c      	b.n	80025a6 <__aeabi_ddiv+0x546>
 80022ec:	1a88      	subs	r0, r1, r2
 80022ee:	9902      	ldr	r1, [sp, #8]
 80022f0:	f7fd ffb4 	bl	800025c <__aeabi_uidivmod>
 80022f4:	9a03      	ldr	r2, [sp, #12]
 80022f6:	0424      	lsls	r4, r4, #16
 80022f8:	4342      	muls	r2, r0
 80022fa:	0409      	lsls	r1, r1, #16
 80022fc:	0c24      	lsrs	r4, r4, #16
 80022fe:	0003      	movs	r3, r0
 8002300:	430c      	orrs	r4, r1
 8002302:	42a2      	cmp	r2, r4
 8002304:	d906      	bls.n	8002314 <__aeabi_ddiv+0x2b4>
 8002306:	9900      	ldr	r1, [sp, #0]
 8002308:	3b01      	subs	r3, #1
 800230a:	468c      	mov	ip, r1
 800230c:	4464      	add	r4, ip
 800230e:	42a1      	cmp	r1, r4
 8002310:	d800      	bhi.n	8002314 <__aeabi_ddiv+0x2b4>
 8002312:	e142      	b.n	800259a <__aeabi_ddiv+0x53a>
 8002314:	1aa0      	subs	r0, r4, r2
 8002316:	4642      	mov	r2, r8
 8002318:	0412      	lsls	r2, r2, #16
 800231a:	431a      	orrs	r2, r3
 800231c:	4693      	mov	fp, r2
 800231e:	464b      	mov	r3, r9
 8002320:	4659      	mov	r1, fp
 8002322:	0c1b      	lsrs	r3, r3, #16
 8002324:	001f      	movs	r7, r3
 8002326:	9304      	str	r3, [sp, #16]
 8002328:	040b      	lsls	r3, r1, #16
 800232a:	4649      	mov	r1, r9
 800232c:	0409      	lsls	r1, r1, #16
 800232e:	0c09      	lsrs	r1, r1, #16
 8002330:	000c      	movs	r4, r1
 8002332:	0c1b      	lsrs	r3, r3, #16
 8002334:	435c      	muls	r4, r3
 8002336:	0c12      	lsrs	r2, r2, #16
 8002338:	437b      	muls	r3, r7
 800233a:	4688      	mov	r8, r1
 800233c:	4351      	muls	r1, r2
 800233e:	437a      	muls	r2, r7
 8002340:	0c27      	lsrs	r7, r4, #16
 8002342:	46bc      	mov	ip, r7
 8002344:	185b      	adds	r3, r3, r1
 8002346:	4463      	add	r3, ip
 8002348:	4299      	cmp	r1, r3
 800234a:	d903      	bls.n	8002354 <__aeabi_ddiv+0x2f4>
 800234c:	2180      	movs	r1, #128	@ 0x80
 800234e:	0249      	lsls	r1, r1, #9
 8002350:	468c      	mov	ip, r1
 8002352:	4462      	add	r2, ip
 8002354:	0c19      	lsrs	r1, r3, #16
 8002356:	0424      	lsls	r4, r4, #16
 8002358:	041b      	lsls	r3, r3, #16
 800235a:	0c24      	lsrs	r4, r4, #16
 800235c:	188a      	adds	r2, r1, r2
 800235e:	191c      	adds	r4, r3, r4
 8002360:	4290      	cmp	r0, r2
 8002362:	d302      	bcc.n	800236a <__aeabi_ddiv+0x30a>
 8002364:	d116      	bne.n	8002394 <__aeabi_ddiv+0x334>
 8002366:	42a5      	cmp	r5, r4
 8002368:	d214      	bcs.n	8002394 <__aeabi_ddiv+0x334>
 800236a:	465b      	mov	r3, fp
 800236c:	9f00      	ldr	r7, [sp, #0]
 800236e:	3b01      	subs	r3, #1
 8002370:	444d      	add	r5, r9
 8002372:	9305      	str	r3, [sp, #20]
 8002374:	454d      	cmp	r5, r9
 8002376:	419b      	sbcs	r3, r3
 8002378:	46bc      	mov	ip, r7
 800237a:	425b      	negs	r3, r3
 800237c:	4463      	add	r3, ip
 800237e:	18c0      	adds	r0, r0, r3
 8002380:	4287      	cmp	r7, r0
 8002382:	d300      	bcc.n	8002386 <__aeabi_ddiv+0x326>
 8002384:	e102      	b.n	800258c <__aeabi_ddiv+0x52c>
 8002386:	4282      	cmp	r2, r0
 8002388:	d900      	bls.n	800238c <__aeabi_ddiv+0x32c>
 800238a:	e129      	b.n	80025e0 <__aeabi_ddiv+0x580>
 800238c:	d100      	bne.n	8002390 <__aeabi_ddiv+0x330>
 800238e:	e124      	b.n	80025da <__aeabi_ddiv+0x57a>
 8002390:	9b05      	ldr	r3, [sp, #20]
 8002392:	469b      	mov	fp, r3
 8002394:	1b2c      	subs	r4, r5, r4
 8002396:	42a5      	cmp	r5, r4
 8002398:	41ad      	sbcs	r5, r5
 800239a:	9b00      	ldr	r3, [sp, #0]
 800239c:	1a80      	subs	r0, r0, r2
 800239e:	426d      	negs	r5, r5
 80023a0:	1b40      	subs	r0, r0, r5
 80023a2:	4283      	cmp	r3, r0
 80023a4:	d100      	bne.n	80023a8 <__aeabi_ddiv+0x348>
 80023a6:	e10f      	b.n	80025c8 <__aeabi_ddiv+0x568>
 80023a8:	9902      	ldr	r1, [sp, #8]
 80023aa:	f7fd ff57 	bl	800025c <__aeabi_uidivmod>
 80023ae:	9a03      	ldr	r2, [sp, #12]
 80023b0:	040b      	lsls	r3, r1, #16
 80023b2:	4342      	muls	r2, r0
 80023b4:	0c21      	lsrs	r1, r4, #16
 80023b6:	0005      	movs	r5, r0
 80023b8:	4319      	orrs	r1, r3
 80023ba:	428a      	cmp	r2, r1
 80023bc:	d900      	bls.n	80023c0 <__aeabi_ddiv+0x360>
 80023be:	e0cb      	b.n	8002558 <__aeabi_ddiv+0x4f8>
 80023c0:	1a88      	subs	r0, r1, r2
 80023c2:	9902      	ldr	r1, [sp, #8]
 80023c4:	f7fd ff4a 	bl	800025c <__aeabi_uidivmod>
 80023c8:	9a03      	ldr	r2, [sp, #12]
 80023ca:	0424      	lsls	r4, r4, #16
 80023cc:	4342      	muls	r2, r0
 80023ce:	0409      	lsls	r1, r1, #16
 80023d0:	0c24      	lsrs	r4, r4, #16
 80023d2:	0003      	movs	r3, r0
 80023d4:	430c      	orrs	r4, r1
 80023d6:	42a2      	cmp	r2, r4
 80023d8:	d900      	bls.n	80023dc <__aeabi_ddiv+0x37c>
 80023da:	e0ca      	b.n	8002572 <__aeabi_ddiv+0x512>
 80023dc:	4641      	mov	r1, r8
 80023de:	1aa4      	subs	r4, r4, r2
 80023e0:	042a      	lsls	r2, r5, #16
 80023e2:	431a      	orrs	r2, r3
 80023e4:	9f04      	ldr	r7, [sp, #16]
 80023e6:	0413      	lsls	r3, r2, #16
 80023e8:	0c1b      	lsrs	r3, r3, #16
 80023ea:	4359      	muls	r1, r3
 80023ec:	4640      	mov	r0, r8
 80023ee:	437b      	muls	r3, r7
 80023f0:	469c      	mov	ip, r3
 80023f2:	0c15      	lsrs	r5, r2, #16
 80023f4:	4368      	muls	r0, r5
 80023f6:	0c0b      	lsrs	r3, r1, #16
 80023f8:	4484      	add	ip, r0
 80023fa:	4463      	add	r3, ip
 80023fc:	437d      	muls	r5, r7
 80023fe:	4298      	cmp	r0, r3
 8002400:	d903      	bls.n	800240a <__aeabi_ddiv+0x3aa>
 8002402:	2080      	movs	r0, #128	@ 0x80
 8002404:	0240      	lsls	r0, r0, #9
 8002406:	4684      	mov	ip, r0
 8002408:	4465      	add	r5, ip
 800240a:	0c18      	lsrs	r0, r3, #16
 800240c:	0409      	lsls	r1, r1, #16
 800240e:	041b      	lsls	r3, r3, #16
 8002410:	0c09      	lsrs	r1, r1, #16
 8002412:	1940      	adds	r0, r0, r5
 8002414:	185b      	adds	r3, r3, r1
 8002416:	4284      	cmp	r4, r0
 8002418:	d327      	bcc.n	800246a <__aeabi_ddiv+0x40a>
 800241a:	d023      	beq.n	8002464 <__aeabi_ddiv+0x404>
 800241c:	2301      	movs	r3, #1
 800241e:	0035      	movs	r5, r6
 8002420:	431a      	orrs	r2, r3
 8002422:	4b94      	ldr	r3, [pc, #592]	@ (8002674 <__aeabi_ddiv+0x614>)
 8002424:	4453      	add	r3, sl
 8002426:	2b00      	cmp	r3, #0
 8002428:	dd60      	ble.n	80024ec <__aeabi_ddiv+0x48c>
 800242a:	0751      	lsls	r1, r2, #29
 800242c:	d000      	beq.n	8002430 <__aeabi_ddiv+0x3d0>
 800242e:	e086      	b.n	800253e <__aeabi_ddiv+0x4de>
 8002430:	002e      	movs	r6, r5
 8002432:	08d1      	lsrs	r1, r2, #3
 8002434:	465a      	mov	r2, fp
 8002436:	01d2      	lsls	r2, r2, #7
 8002438:	d506      	bpl.n	8002448 <__aeabi_ddiv+0x3e8>
 800243a:	465a      	mov	r2, fp
 800243c:	4b8e      	ldr	r3, [pc, #568]	@ (8002678 <__aeabi_ddiv+0x618>)
 800243e:	401a      	ands	r2, r3
 8002440:	2380      	movs	r3, #128	@ 0x80
 8002442:	4693      	mov	fp, r2
 8002444:	00db      	lsls	r3, r3, #3
 8002446:	4453      	add	r3, sl
 8002448:	4a8c      	ldr	r2, [pc, #560]	@ (800267c <__aeabi_ddiv+0x61c>)
 800244a:	4293      	cmp	r3, r2
 800244c:	dd00      	ble.n	8002450 <__aeabi_ddiv+0x3f0>
 800244e:	e680      	b.n	8002152 <__aeabi_ddiv+0xf2>
 8002450:	465a      	mov	r2, fp
 8002452:	0752      	lsls	r2, r2, #29
 8002454:	430a      	orrs	r2, r1
 8002456:	4690      	mov	r8, r2
 8002458:	465a      	mov	r2, fp
 800245a:	055b      	lsls	r3, r3, #21
 800245c:	0254      	lsls	r4, r2, #9
 800245e:	0b24      	lsrs	r4, r4, #12
 8002460:	0d5b      	lsrs	r3, r3, #21
 8002462:	e669      	b.n	8002138 <__aeabi_ddiv+0xd8>
 8002464:	0035      	movs	r5, r6
 8002466:	2b00      	cmp	r3, #0
 8002468:	d0db      	beq.n	8002422 <__aeabi_ddiv+0x3c2>
 800246a:	9d00      	ldr	r5, [sp, #0]
 800246c:	1e51      	subs	r1, r2, #1
 800246e:	46ac      	mov	ip, r5
 8002470:	4464      	add	r4, ip
 8002472:	42ac      	cmp	r4, r5
 8002474:	d200      	bcs.n	8002478 <__aeabi_ddiv+0x418>
 8002476:	e09e      	b.n	80025b6 <__aeabi_ddiv+0x556>
 8002478:	4284      	cmp	r4, r0
 800247a:	d200      	bcs.n	800247e <__aeabi_ddiv+0x41e>
 800247c:	e0e1      	b.n	8002642 <__aeabi_ddiv+0x5e2>
 800247e:	d100      	bne.n	8002482 <__aeabi_ddiv+0x422>
 8002480:	e0ee      	b.n	8002660 <__aeabi_ddiv+0x600>
 8002482:	000a      	movs	r2, r1
 8002484:	e7ca      	b.n	800241c <__aeabi_ddiv+0x3bc>
 8002486:	4542      	cmp	r2, r8
 8002488:	d900      	bls.n	800248c <__aeabi_ddiv+0x42c>
 800248a:	e708      	b.n	800229e <__aeabi_ddiv+0x23e>
 800248c:	464b      	mov	r3, r9
 800248e:	07dc      	lsls	r4, r3, #31
 8002490:	0858      	lsrs	r0, r3, #1
 8002492:	4643      	mov	r3, r8
 8002494:	085b      	lsrs	r3, r3, #1
 8002496:	431c      	orrs	r4, r3
 8002498:	4643      	mov	r3, r8
 800249a:	07dd      	lsls	r5, r3, #31
 800249c:	e706      	b.n	80022ac <__aeabi_ddiv+0x24c>
 800249e:	f001 fa83 	bl	80039a8 <__clzsi2>
 80024a2:	2315      	movs	r3, #21
 80024a4:	469c      	mov	ip, r3
 80024a6:	4484      	add	ip, r0
 80024a8:	0002      	movs	r2, r0
 80024aa:	4663      	mov	r3, ip
 80024ac:	3220      	adds	r2, #32
 80024ae:	2b1c      	cmp	r3, #28
 80024b0:	dc00      	bgt.n	80024b4 <__aeabi_ddiv+0x454>
 80024b2:	e692      	b.n	80021da <__aeabi_ddiv+0x17a>
 80024b4:	0023      	movs	r3, r4
 80024b6:	3808      	subs	r0, #8
 80024b8:	4083      	lsls	r3, r0
 80024ba:	4699      	mov	r9, r3
 80024bc:	2300      	movs	r3, #0
 80024be:	4698      	mov	r8, r3
 80024c0:	e69a      	b.n	80021f8 <__aeabi_ddiv+0x198>
 80024c2:	f001 fa71 	bl	80039a8 <__clzsi2>
 80024c6:	0002      	movs	r2, r0
 80024c8:	0003      	movs	r3, r0
 80024ca:	3215      	adds	r2, #21
 80024cc:	3320      	adds	r3, #32
 80024ce:	2a1c      	cmp	r2, #28
 80024d0:	dc00      	bgt.n	80024d4 <__aeabi_ddiv+0x474>
 80024d2:	e65f      	b.n	8002194 <__aeabi_ddiv+0x134>
 80024d4:	9900      	ldr	r1, [sp, #0]
 80024d6:	3808      	subs	r0, #8
 80024d8:	4081      	lsls	r1, r0
 80024da:	2200      	movs	r2, #0
 80024dc:	468b      	mov	fp, r1
 80024de:	e666      	b.n	80021ae <__aeabi_ddiv+0x14e>
 80024e0:	2200      	movs	r2, #0
 80024e2:	002e      	movs	r6, r5
 80024e4:	2400      	movs	r4, #0
 80024e6:	4690      	mov	r8, r2
 80024e8:	4b65      	ldr	r3, [pc, #404]	@ (8002680 <__aeabi_ddiv+0x620>)
 80024ea:	e625      	b.n	8002138 <__aeabi_ddiv+0xd8>
 80024ec:	002e      	movs	r6, r5
 80024ee:	2101      	movs	r1, #1
 80024f0:	1ac9      	subs	r1, r1, r3
 80024f2:	2938      	cmp	r1, #56	@ 0x38
 80024f4:	dd00      	ble.n	80024f8 <__aeabi_ddiv+0x498>
 80024f6:	e61b      	b.n	8002130 <__aeabi_ddiv+0xd0>
 80024f8:	291f      	cmp	r1, #31
 80024fa:	dc7e      	bgt.n	80025fa <__aeabi_ddiv+0x59a>
 80024fc:	4861      	ldr	r0, [pc, #388]	@ (8002684 <__aeabi_ddiv+0x624>)
 80024fe:	0014      	movs	r4, r2
 8002500:	4450      	add	r0, sl
 8002502:	465b      	mov	r3, fp
 8002504:	4082      	lsls	r2, r0
 8002506:	4083      	lsls	r3, r0
 8002508:	40cc      	lsrs	r4, r1
 800250a:	1e50      	subs	r0, r2, #1
 800250c:	4182      	sbcs	r2, r0
 800250e:	4323      	orrs	r3, r4
 8002510:	431a      	orrs	r2, r3
 8002512:	465b      	mov	r3, fp
 8002514:	40cb      	lsrs	r3, r1
 8002516:	0751      	lsls	r1, r2, #29
 8002518:	d009      	beq.n	800252e <__aeabi_ddiv+0x4ce>
 800251a:	210f      	movs	r1, #15
 800251c:	4011      	ands	r1, r2
 800251e:	2904      	cmp	r1, #4
 8002520:	d005      	beq.n	800252e <__aeabi_ddiv+0x4ce>
 8002522:	1d11      	adds	r1, r2, #4
 8002524:	4291      	cmp	r1, r2
 8002526:	4192      	sbcs	r2, r2
 8002528:	4252      	negs	r2, r2
 800252a:	189b      	adds	r3, r3, r2
 800252c:	000a      	movs	r2, r1
 800252e:	0219      	lsls	r1, r3, #8
 8002530:	d400      	bmi.n	8002534 <__aeabi_ddiv+0x4d4>
 8002532:	e09b      	b.n	800266c <__aeabi_ddiv+0x60c>
 8002534:	2200      	movs	r2, #0
 8002536:	2301      	movs	r3, #1
 8002538:	2400      	movs	r4, #0
 800253a:	4690      	mov	r8, r2
 800253c:	e5fc      	b.n	8002138 <__aeabi_ddiv+0xd8>
 800253e:	210f      	movs	r1, #15
 8002540:	4011      	ands	r1, r2
 8002542:	2904      	cmp	r1, #4
 8002544:	d100      	bne.n	8002548 <__aeabi_ddiv+0x4e8>
 8002546:	e773      	b.n	8002430 <__aeabi_ddiv+0x3d0>
 8002548:	1d11      	adds	r1, r2, #4
 800254a:	4291      	cmp	r1, r2
 800254c:	4192      	sbcs	r2, r2
 800254e:	4252      	negs	r2, r2
 8002550:	002e      	movs	r6, r5
 8002552:	08c9      	lsrs	r1, r1, #3
 8002554:	4493      	add	fp, r2
 8002556:	e76d      	b.n	8002434 <__aeabi_ddiv+0x3d4>
 8002558:	9b00      	ldr	r3, [sp, #0]
 800255a:	3d01      	subs	r5, #1
 800255c:	469c      	mov	ip, r3
 800255e:	4461      	add	r1, ip
 8002560:	428b      	cmp	r3, r1
 8002562:	d900      	bls.n	8002566 <__aeabi_ddiv+0x506>
 8002564:	e72c      	b.n	80023c0 <__aeabi_ddiv+0x360>
 8002566:	428a      	cmp	r2, r1
 8002568:	d800      	bhi.n	800256c <__aeabi_ddiv+0x50c>
 800256a:	e729      	b.n	80023c0 <__aeabi_ddiv+0x360>
 800256c:	1e85      	subs	r5, r0, #2
 800256e:	4461      	add	r1, ip
 8002570:	e726      	b.n	80023c0 <__aeabi_ddiv+0x360>
 8002572:	9900      	ldr	r1, [sp, #0]
 8002574:	3b01      	subs	r3, #1
 8002576:	468c      	mov	ip, r1
 8002578:	4464      	add	r4, ip
 800257a:	42a1      	cmp	r1, r4
 800257c:	d900      	bls.n	8002580 <__aeabi_ddiv+0x520>
 800257e:	e72d      	b.n	80023dc <__aeabi_ddiv+0x37c>
 8002580:	42a2      	cmp	r2, r4
 8002582:	d800      	bhi.n	8002586 <__aeabi_ddiv+0x526>
 8002584:	e72a      	b.n	80023dc <__aeabi_ddiv+0x37c>
 8002586:	1e83      	subs	r3, r0, #2
 8002588:	4464      	add	r4, ip
 800258a:	e727      	b.n	80023dc <__aeabi_ddiv+0x37c>
 800258c:	4287      	cmp	r7, r0
 800258e:	d000      	beq.n	8002592 <__aeabi_ddiv+0x532>
 8002590:	e6fe      	b.n	8002390 <__aeabi_ddiv+0x330>
 8002592:	45a9      	cmp	r9, r5
 8002594:	d900      	bls.n	8002598 <__aeabi_ddiv+0x538>
 8002596:	e6fb      	b.n	8002390 <__aeabi_ddiv+0x330>
 8002598:	e6f5      	b.n	8002386 <__aeabi_ddiv+0x326>
 800259a:	42a2      	cmp	r2, r4
 800259c:	d800      	bhi.n	80025a0 <__aeabi_ddiv+0x540>
 800259e:	e6b9      	b.n	8002314 <__aeabi_ddiv+0x2b4>
 80025a0:	1e83      	subs	r3, r0, #2
 80025a2:	4464      	add	r4, ip
 80025a4:	e6b6      	b.n	8002314 <__aeabi_ddiv+0x2b4>
 80025a6:	428a      	cmp	r2, r1
 80025a8:	d800      	bhi.n	80025ac <__aeabi_ddiv+0x54c>
 80025aa:	e69f      	b.n	80022ec <__aeabi_ddiv+0x28c>
 80025ac:	46bc      	mov	ip, r7
 80025ae:	1e83      	subs	r3, r0, #2
 80025b0:	4698      	mov	r8, r3
 80025b2:	4461      	add	r1, ip
 80025b4:	e69a      	b.n	80022ec <__aeabi_ddiv+0x28c>
 80025b6:	000a      	movs	r2, r1
 80025b8:	4284      	cmp	r4, r0
 80025ba:	d000      	beq.n	80025be <__aeabi_ddiv+0x55e>
 80025bc:	e72e      	b.n	800241c <__aeabi_ddiv+0x3bc>
 80025be:	454b      	cmp	r3, r9
 80025c0:	d000      	beq.n	80025c4 <__aeabi_ddiv+0x564>
 80025c2:	e72b      	b.n	800241c <__aeabi_ddiv+0x3bc>
 80025c4:	0035      	movs	r5, r6
 80025c6:	e72c      	b.n	8002422 <__aeabi_ddiv+0x3c2>
 80025c8:	4b2a      	ldr	r3, [pc, #168]	@ (8002674 <__aeabi_ddiv+0x614>)
 80025ca:	4a2f      	ldr	r2, [pc, #188]	@ (8002688 <__aeabi_ddiv+0x628>)
 80025cc:	4453      	add	r3, sl
 80025ce:	4592      	cmp	sl, r2
 80025d0:	db43      	blt.n	800265a <__aeabi_ddiv+0x5fa>
 80025d2:	2201      	movs	r2, #1
 80025d4:	2100      	movs	r1, #0
 80025d6:	4493      	add	fp, r2
 80025d8:	e72c      	b.n	8002434 <__aeabi_ddiv+0x3d4>
 80025da:	42ac      	cmp	r4, r5
 80025dc:	d800      	bhi.n	80025e0 <__aeabi_ddiv+0x580>
 80025de:	e6d7      	b.n	8002390 <__aeabi_ddiv+0x330>
 80025e0:	2302      	movs	r3, #2
 80025e2:	425b      	negs	r3, r3
 80025e4:	469c      	mov	ip, r3
 80025e6:	9900      	ldr	r1, [sp, #0]
 80025e8:	444d      	add	r5, r9
 80025ea:	454d      	cmp	r5, r9
 80025ec:	419b      	sbcs	r3, r3
 80025ee:	44e3      	add	fp, ip
 80025f0:	468c      	mov	ip, r1
 80025f2:	425b      	negs	r3, r3
 80025f4:	4463      	add	r3, ip
 80025f6:	18c0      	adds	r0, r0, r3
 80025f8:	e6cc      	b.n	8002394 <__aeabi_ddiv+0x334>
 80025fa:	201f      	movs	r0, #31
 80025fc:	4240      	negs	r0, r0
 80025fe:	1ac3      	subs	r3, r0, r3
 8002600:	4658      	mov	r0, fp
 8002602:	40d8      	lsrs	r0, r3
 8002604:	2920      	cmp	r1, #32
 8002606:	d004      	beq.n	8002612 <__aeabi_ddiv+0x5b2>
 8002608:	4659      	mov	r1, fp
 800260a:	4b20      	ldr	r3, [pc, #128]	@ (800268c <__aeabi_ddiv+0x62c>)
 800260c:	4453      	add	r3, sl
 800260e:	4099      	lsls	r1, r3
 8002610:	430a      	orrs	r2, r1
 8002612:	1e53      	subs	r3, r2, #1
 8002614:	419a      	sbcs	r2, r3
 8002616:	2307      	movs	r3, #7
 8002618:	0019      	movs	r1, r3
 800261a:	4302      	orrs	r2, r0
 800261c:	2400      	movs	r4, #0
 800261e:	4011      	ands	r1, r2
 8002620:	4213      	tst	r3, r2
 8002622:	d009      	beq.n	8002638 <__aeabi_ddiv+0x5d8>
 8002624:	3308      	adds	r3, #8
 8002626:	4013      	ands	r3, r2
 8002628:	2b04      	cmp	r3, #4
 800262a:	d01d      	beq.n	8002668 <__aeabi_ddiv+0x608>
 800262c:	1d13      	adds	r3, r2, #4
 800262e:	4293      	cmp	r3, r2
 8002630:	4189      	sbcs	r1, r1
 8002632:	001a      	movs	r2, r3
 8002634:	4249      	negs	r1, r1
 8002636:	0749      	lsls	r1, r1, #29
 8002638:	08d2      	lsrs	r2, r2, #3
 800263a:	430a      	orrs	r2, r1
 800263c:	4690      	mov	r8, r2
 800263e:	2300      	movs	r3, #0
 8002640:	e57a      	b.n	8002138 <__aeabi_ddiv+0xd8>
 8002642:	4649      	mov	r1, r9
 8002644:	9f00      	ldr	r7, [sp, #0]
 8002646:	004d      	lsls	r5, r1, #1
 8002648:	454d      	cmp	r5, r9
 800264a:	4189      	sbcs	r1, r1
 800264c:	46bc      	mov	ip, r7
 800264e:	4249      	negs	r1, r1
 8002650:	4461      	add	r1, ip
 8002652:	46a9      	mov	r9, r5
 8002654:	3a02      	subs	r2, #2
 8002656:	1864      	adds	r4, r4, r1
 8002658:	e7ae      	b.n	80025b8 <__aeabi_ddiv+0x558>
 800265a:	2201      	movs	r2, #1
 800265c:	4252      	negs	r2, r2
 800265e:	e746      	b.n	80024ee <__aeabi_ddiv+0x48e>
 8002660:	4599      	cmp	r9, r3
 8002662:	d3ee      	bcc.n	8002642 <__aeabi_ddiv+0x5e2>
 8002664:	000a      	movs	r2, r1
 8002666:	e7aa      	b.n	80025be <__aeabi_ddiv+0x55e>
 8002668:	2100      	movs	r1, #0
 800266a:	e7e5      	b.n	8002638 <__aeabi_ddiv+0x5d8>
 800266c:	0759      	lsls	r1, r3, #29
 800266e:	025b      	lsls	r3, r3, #9
 8002670:	0b1c      	lsrs	r4, r3, #12
 8002672:	e7e1      	b.n	8002638 <__aeabi_ddiv+0x5d8>
 8002674:	000003ff 	.word	0x000003ff
 8002678:	feffffff 	.word	0xfeffffff
 800267c:	000007fe 	.word	0x000007fe
 8002680:	000007ff 	.word	0x000007ff
 8002684:	0000041e 	.word	0x0000041e
 8002688:	fffffc02 	.word	0xfffffc02
 800268c:	0000043e 	.word	0x0000043e

08002690 <__eqdf2>:
 8002690:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002692:	4657      	mov	r7, sl
 8002694:	46de      	mov	lr, fp
 8002696:	464e      	mov	r6, r9
 8002698:	4645      	mov	r5, r8
 800269a:	b5e0      	push	{r5, r6, r7, lr}
 800269c:	000d      	movs	r5, r1
 800269e:	0004      	movs	r4, r0
 80026a0:	0fe8      	lsrs	r0, r5, #31
 80026a2:	4683      	mov	fp, r0
 80026a4:	0309      	lsls	r1, r1, #12
 80026a6:	0fd8      	lsrs	r0, r3, #31
 80026a8:	0b09      	lsrs	r1, r1, #12
 80026aa:	4682      	mov	sl, r0
 80026ac:	4819      	ldr	r0, [pc, #100]	@ (8002714 <__eqdf2+0x84>)
 80026ae:	468c      	mov	ip, r1
 80026b0:	031f      	lsls	r7, r3, #12
 80026b2:	0069      	lsls	r1, r5, #1
 80026b4:	005e      	lsls	r6, r3, #1
 80026b6:	0d49      	lsrs	r1, r1, #21
 80026b8:	0b3f      	lsrs	r7, r7, #12
 80026ba:	0d76      	lsrs	r6, r6, #21
 80026bc:	4281      	cmp	r1, r0
 80026be:	d018      	beq.n	80026f2 <__eqdf2+0x62>
 80026c0:	4286      	cmp	r6, r0
 80026c2:	d00f      	beq.n	80026e4 <__eqdf2+0x54>
 80026c4:	2001      	movs	r0, #1
 80026c6:	42b1      	cmp	r1, r6
 80026c8:	d10d      	bne.n	80026e6 <__eqdf2+0x56>
 80026ca:	45bc      	cmp	ip, r7
 80026cc:	d10b      	bne.n	80026e6 <__eqdf2+0x56>
 80026ce:	4294      	cmp	r4, r2
 80026d0:	d109      	bne.n	80026e6 <__eqdf2+0x56>
 80026d2:	45d3      	cmp	fp, sl
 80026d4:	d01c      	beq.n	8002710 <__eqdf2+0x80>
 80026d6:	2900      	cmp	r1, #0
 80026d8:	d105      	bne.n	80026e6 <__eqdf2+0x56>
 80026da:	4660      	mov	r0, ip
 80026dc:	4320      	orrs	r0, r4
 80026de:	1e43      	subs	r3, r0, #1
 80026e0:	4198      	sbcs	r0, r3
 80026e2:	e000      	b.n	80026e6 <__eqdf2+0x56>
 80026e4:	2001      	movs	r0, #1
 80026e6:	bcf0      	pop	{r4, r5, r6, r7}
 80026e8:	46bb      	mov	fp, r7
 80026ea:	46b2      	mov	sl, r6
 80026ec:	46a9      	mov	r9, r5
 80026ee:	46a0      	mov	r8, r4
 80026f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026f2:	2001      	movs	r0, #1
 80026f4:	428e      	cmp	r6, r1
 80026f6:	d1f6      	bne.n	80026e6 <__eqdf2+0x56>
 80026f8:	4661      	mov	r1, ip
 80026fa:	4339      	orrs	r1, r7
 80026fc:	000f      	movs	r7, r1
 80026fe:	4317      	orrs	r7, r2
 8002700:	4327      	orrs	r7, r4
 8002702:	d1f0      	bne.n	80026e6 <__eqdf2+0x56>
 8002704:	465b      	mov	r3, fp
 8002706:	4652      	mov	r2, sl
 8002708:	1a98      	subs	r0, r3, r2
 800270a:	1e43      	subs	r3, r0, #1
 800270c:	4198      	sbcs	r0, r3
 800270e:	e7ea      	b.n	80026e6 <__eqdf2+0x56>
 8002710:	2000      	movs	r0, #0
 8002712:	e7e8      	b.n	80026e6 <__eqdf2+0x56>
 8002714:	000007ff 	.word	0x000007ff

08002718 <__gedf2>:
 8002718:	b5f0      	push	{r4, r5, r6, r7, lr}
 800271a:	4657      	mov	r7, sl
 800271c:	464e      	mov	r6, r9
 800271e:	4645      	mov	r5, r8
 8002720:	46de      	mov	lr, fp
 8002722:	b5e0      	push	{r5, r6, r7, lr}
 8002724:	000d      	movs	r5, r1
 8002726:	030e      	lsls	r6, r1, #12
 8002728:	0049      	lsls	r1, r1, #1
 800272a:	0d49      	lsrs	r1, r1, #21
 800272c:	468a      	mov	sl, r1
 800272e:	0fdf      	lsrs	r7, r3, #31
 8002730:	0fe9      	lsrs	r1, r5, #31
 8002732:	46bc      	mov	ip, r7
 8002734:	b083      	sub	sp, #12
 8002736:	4f2f      	ldr	r7, [pc, #188]	@ (80027f4 <__gedf2+0xdc>)
 8002738:	0004      	movs	r4, r0
 800273a:	4680      	mov	r8, r0
 800273c:	9101      	str	r1, [sp, #4]
 800273e:	0058      	lsls	r0, r3, #1
 8002740:	0319      	lsls	r1, r3, #12
 8002742:	4691      	mov	r9, r2
 8002744:	0b36      	lsrs	r6, r6, #12
 8002746:	0b09      	lsrs	r1, r1, #12
 8002748:	0d40      	lsrs	r0, r0, #21
 800274a:	45ba      	cmp	sl, r7
 800274c:	d01d      	beq.n	800278a <__gedf2+0x72>
 800274e:	42b8      	cmp	r0, r7
 8002750:	d00d      	beq.n	800276e <__gedf2+0x56>
 8002752:	4657      	mov	r7, sl
 8002754:	2f00      	cmp	r7, #0
 8002756:	d12a      	bne.n	80027ae <__gedf2+0x96>
 8002758:	4334      	orrs	r4, r6
 800275a:	2800      	cmp	r0, #0
 800275c:	d124      	bne.n	80027a8 <__gedf2+0x90>
 800275e:	430a      	orrs	r2, r1
 8002760:	d036      	beq.n	80027d0 <__gedf2+0xb8>
 8002762:	2c00      	cmp	r4, #0
 8002764:	d141      	bne.n	80027ea <__gedf2+0xd2>
 8002766:	4663      	mov	r3, ip
 8002768:	0058      	lsls	r0, r3, #1
 800276a:	3801      	subs	r0, #1
 800276c:	e015      	b.n	800279a <__gedf2+0x82>
 800276e:	4311      	orrs	r1, r2
 8002770:	d138      	bne.n	80027e4 <__gedf2+0xcc>
 8002772:	4653      	mov	r3, sl
 8002774:	2b00      	cmp	r3, #0
 8002776:	d101      	bne.n	800277c <__gedf2+0x64>
 8002778:	4326      	orrs	r6, r4
 800277a:	d0f4      	beq.n	8002766 <__gedf2+0x4e>
 800277c:	9b01      	ldr	r3, [sp, #4]
 800277e:	4563      	cmp	r3, ip
 8002780:	d107      	bne.n	8002792 <__gedf2+0x7a>
 8002782:	9b01      	ldr	r3, [sp, #4]
 8002784:	0058      	lsls	r0, r3, #1
 8002786:	3801      	subs	r0, #1
 8002788:	e007      	b.n	800279a <__gedf2+0x82>
 800278a:	4326      	orrs	r6, r4
 800278c:	d12a      	bne.n	80027e4 <__gedf2+0xcc>
 800278e:	4550      	cmp	r0, sl
 8002790:	d021      	beq.n	80027d6 <__gedf2+0xbe>
 8002792:	2001      	movs	r0, #1
 8002794:	9b01      	ldr	r3, [sp, #4]
 8002796:	425f      	negs	r7, r3
 8002798:	4338      	orrs	r0, r7
 800279a:	b003      	add	sp, #12
 800279c:	bcf0      	pop	{r4, r5, r6, r7}
 800279e:	46bb      	mov	fp, r7
 80027a0:	46b2      	mov	sl, r6
 80027a2:	46a9      	mov	r9, r5
 80027a4:	46a0      	mov	r8, r4
 80027a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027a8:	2c00      	cmp	r4, #0
 80027aa:	d0dc      	beq.n	8002766 <__gedf2+0x4e>
 80027ac:	e7e6      	b.n	800277c <__gedf2+0x64>
 80027ae:	2800      	cmp	r0, #0
 80027b0:	d0ef      	beq.n	8002792 <__gedf2+0x7a>
 80027b2:	9b01      	ldr	r3, [sp, #4]
 80027b4:	4563      	cmp	r3, ip
 80027b6:	d1ec      	bne.n	8002792 <__gedf2+0x7a>
 80027b8:	4582      	cmp	sl, r0
 80027ba:	dcea      	bgt.n	8002792 <__gedf2+0x7a>
 80027bc:	dbe1      	blt.n	8002782 <__gedf2+0x6a>
 80027be:	428e      	cmp	r6, r1
 80027c0:	d8e7      	bhi.n	8002792 <__gedf2+0x7a>
 80027c2:	d1de      	bne.n	8002782 <__gedf2+0x6a>
 80027c4:	45c8      	cmp	r8, r9
 80027c6:	d8e4      	bhi.n	8002792 <__gedf2+0x7a>
 80027c8:	2000      	movs	r0, #0
 80027ca:	45c8      	cmp	r8, r9
 80027cc:	d2e5      	bcs.n	800279a <__gedf2+0x82>
 80027ce:	e7d8      	b.n	8002782 <__gedf2+0x6a>
 80027d0:	2c00      	cmp	r4, #0
 80027d2:	d0e2      	beq.n	800279a <__gedf2+0x82>
 80027d4:	e7dd      	b.n	8002792 <__gedf2+0x7a>
 80027d6:	4311      	orrs	r1, r2
 80027d8:	d104      	bne.n	80027e4 <__gedf2+0xcc>
 80027da:	9b01      	ldr	r3, [sp, #4]
 80027dc:	4563      	cmp	r3, ip
 80027de:	d1d8      	bne.n	8002792 <__gedf2+0x7a>
 80027e0:	2000      	movs	r0, #0
 80027e2:	e7da      	b.n	800279a <__gedf2+0x82>
 80027e4:	2002      	movs	r0, #2
 80027e6:	4240      	negs	r0, r0
 80027e8:	e7d7      	b.n	800279a <__gedf2+0x82>
 80027ea:	9b01      	ldr	r3, [sp, #4]
 80027ec:	4563      	cmp	r3, ip
 80027ee:	d0e6      	beq.n	80027be <__gedf2+0xa6>
 80027f0:	e7cf      	b.n	8002792 <__gedf2+0x7a>
 80027f2:	46c0      	nop			@ (mov r8, r8)
 80027f4:	000007ff 	.word	0x000007ff

080027f8 <__ledf2>:
 80027f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027fa:	4657      	mov	r7, sl
 80027fc:	464e      	mov	r6, r9
 80027fe:	4645      	mov	r5, r8
 8002800:	46de      	mov	lr, fp
 8002802:	b5e0      	push	{r5, r6, r7, lr}
 8002804:	000d      	movs	r5, r1
 8002806:	030e      	lsls	r6, r1, #12
 8002808:	0049      	lsls	r1, r1, #1
 800280a:	0d49      	lsrs	r1, r1, #21
 800280c:	468a      	mov	sl, r1
 800280e:	0fdf      	lsrs	r7, r3, #31
 8002810:	0fe9      	lsrs	r1, r5, #31
 8002812:	46bc      	mov	ip, r7
 8002814:	b083      	sub	sp, #12
 8002816:	4f2e      	ldr	r7, [pc, #184]	@ (80028d0 <__ledf2+0xd8>)
 8002818:	0004      	movs	r4, r0
 800281a:	4680      	mov	r8, r0
 800281c:	9101      	str	r1, [sp, #4]
 800281e:	0058      	lsls	r0, r3, #1
 8002820:	0319      	lsls	r1, r3, #12
 8002822:	4691      	mov	r9, r2
 8002824:	0b36      	lsrs	r6, r6, #12
 8002826:	0b09      	lsrs	r1, r1, #12
 8002828:	0d40      	lsrs	r0, r0, #21
 800282a:	45ba      	cmp	sl, r7
 800282c:	d01e      	beq.n	800286c <__ledf2+0x74>
 800282e:	42b8      	cmp	r0, r7
 8002830:	d00d      	beq.n	800284e <__ledf2+0x56>
 8002832:	4657      	mov	r7, sl
 8002834:	2f00      	cmp	r7, #0
 8002836:	d127      	bne.n	8002888 <__ledf2+0x90>
 8002838:	4334      	orrs	r4, r6
 800283a:	2800      	cmp	r0, #0
 800283c:	d133      	bne.n	80028a6 <__ledf2+0xae>
 800283e:	430a      	orrs	r2, r1
 8002840:	d034      	beq.n	80028ac <__ledf2+0xb4>
 8002842:	2c00      	cmp	r4, #0
 8002844:	d140      	bne.n	80028c8 <__ledf2+0xd0>
 8002846:	4663      	mov	r3, ip
 8002848:	0058      	lsls	r0, r3, #1
 800284a:	3801      	subs	r0, #1
 800284c:	e015      	b.n	800287a <__ledf2+0x82>
 800284e:	4311      	orrs	r1, r2
 8002850:	d112      	bne.n	8002878 <__ledf2+0x80>
 8002852:	4653      	mov	r3, sl
 8002854:	2b00      	cmp	r3, #0
 8002856:	d101      	bne.n	800285c <__ledf2+0x64>
 8002858:	4326      	orrs	r6, r4
 800285a:	d0f4      	beq.n	8002846 <__ledf2+0x4e>
 800285c:	9b01      	ldr	r3, [sp, #4]
 800285e:	4563      	cmp	r3, ip
 8002860:	d01d      	beq.n	800289e <__ledf2+0xa6>
 8002862:	2001      	movs	r0, #1
 8002864:	9b01      	ldr	r3, [sp, #4]
 8002866:	425f      	negs	r7, r3
 8002868:	4338      	orrs	r0, r7
 800286a:	e006      	b.n	800287a <__ledf2+0x82>
 800286c:	4326      	orrs	r6, r4
 800286e:	d103      	bne.n	8002878 <__ledf2+0x80>
 8002870:	4550      	cmp	r0, sl
 8002872:	d1f6      	bne.n	8002862 <__ledf2+0x6a>
 8002874:	4311      	orrs	r1, r2
 8002876:	d01c      	beq.n	80028b2 <__ledf2+0xba>
 8002878:	2002      	movs	r0, #2
 800287a:	b003      	add	sp, #12
 800287c:	bcf0      	pop	{r4, r5, r6, r7}
 800287e:	46bb      	mov	fp, r7
 8002880:	46b2      	mov	sl, r6
 8002882:	46a9      	mov	r9, r5
 8002884:	46a0      	mov	r8, r4
 8002886:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002888:	2800      	cmp	r0, #0
 800288a:	d0ea      	beq.n	8002862 <__ledf2+0x6a>
 800288c:	9b01      	ldr	r3, [sp, #4]
 800288e:	4563      	cmp	r3, ip
 8002890:	d1e7      	bne.n	8002862 <__ledf2+0x6a>
 8002892:	4582      	cmp	sl, r0
 8002894:	dce5      	bgt.n	8002862 <__ledf2+0x6a>
 8002896:	db02      	blt.n	800289e <__ledf2+0xa6>
 8002898:	428e      	cmp	r6, r1
 800289a:	d8e2      	bhi.n	8002862 <__ledf2+0x6a>
 800289c:	d00e      	beq.n	80028bc <__ledf2+0xc4>
 800289e:	9b01      	ldr	r3, [sp, #4]
 80028a0:	0058      	lsls	r0, r3, #1
 80028a2:	3801      	subs	r0, #1
 80028a4:	e7e9      	b.n	800287a <__ledf2+0x82>
 80028a6:	2c00      	cmp	r4, #0
 80028a8:	d0cd      	beq.n	8002846 <__ledf2+0x4e>
 80028aa:	e7d7      	b.n	800285c <__ledf2+0x64>
 80028ac:	2c00      	cmp	r4, #0
 80028ae:	d0e4      	beq.n	800287a <__ledf2+0x82>
 80028b0:	e7d7      	b.n	8002862 <__ledf2+0x6a>
 80028b2:	9b01      	ldr	r3, [sp, #4]
 80028b4:	2000      	movs	r0, #0
 80028b6:	4563      	cmp	r3, ip
 80028b8:	d0df      	beq.n	800287a <__ledf2+0x82>
 80028ba:	e7d2      	b.n	8002862 <__ledf2+0x6a>
 80028bc:	45c8      	cmp	r8, r9
 80028be:	d8d0      	bhi.n	8002862 <__ledf2+0x6a>
 80028c0:	2000      	movs	r0, #0
 80028c2:	45c8      	cmp	r8, r9
 80028c4:	d2d9      	bcs.n	800287a <__ledf2+0x82>
 80028c6:	e7ea      	b.n	800289e <__ledf2+0xa6>
 80028c8:	9b01      	ldr	r3, [sp, #4]
 80028ca:	4563      	cmp	r3, ip
 80028cc:	d0e4      	beq.n	8002898 <__ledf2+0xa0>
 80028ce:	e7c8      	b.n	8002862 <__ledf2+0x6a>
 80028d0:	000007ff 	.word	0x000007ff

080028d4 <__aeabi_dmul>:
 80028d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028d6:	4657      	mov	r7, sl
 80028d8:	464e      	mov	r6, r9
 80028da:	46de      	mov	lr, fp
 80028dc:	4645      	mov	r5, r8
 80028de:	b5e0      	push	{r5, r6, r7, lr}
 80028e0:	001f      	movs	r7, r3
 80028e2:	030b      	lsls	r3, r1, #12
 80028e4:	0b1b      	lsrs	r3, r3, #12
 80028e6:	0016      	movs	r6, r2
 80028e8:	469a      	mov	sl, r3
 80028ea:	0fca      	lsrs	r2, r1, #31
 80028ec:	004b      	lsls	r3, r1, #1
 80028ee:	0004      	movs	r4, r0
 80028f0:	4691      	mov	r9, r2
 80028f2:	b085      	sub	sp, #20
 80028f4:	0d5b      	lsrs	r3, r3, #21
 80028f6:	d100      	bne.n	80028fa <__aeabi_dmul+0x26>
 80028f8:	e1cf      	b.n	8002c9a <__aeabi_dmul+0x3c6>
 80028fa:	4acd      	ldr	r2, [pc, #820]	@ (8002c30 <__aeabi_dmul+0x35c>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d055      	beq.n	80029ac <__aeabi_dmul+0xd8>
 8002900:	4651      	mov	r1, sl
 8002902:	0f42      	lsrs	r2, r0, #29
 8002904:	00c9      	lsls	r1, r1, #3
 8002906:	430a      	orrs	r2, r1
 8002908:	2180      	movs	r1, #128	@ 0x80
 800290a:	0409      	lsls	r1, r1, #16
 800290c:	4311      	orrs	r1, r2
 800290e:	00c2      	lsls	r2, r0, #3
 8002910:	4690      	mov	r8, r2
 8002912:	4ac8      	ldr	r2, [pc, #800]	@ (8002c34 <__aeabi_dmul+0x360>)
 8002914:	468a      	mov	sl, r1
 8002916:	4693      	mov	fp, r2
 8002918:	449b      	add	fp, r3
 800291a:	2300      	movs	r3, #0
 800291c:	2500      	movs	r5, #0
 800291e:	9302      	str	r3, [sp, #8]
 8002920:	033c      	lsls	r4, r7, #12
 8002922:	007b      	lsls	r3, r7, #1
 8002924:	0ffa      	lsrs	r2, r7, #31
 8002926:	9601      	str	r6, [sp, #4]
 8002928:	0b24      	lsrs	r4, r4, #12
 800292a:	0d5b      	lsrs	r3, r3, #21
 800292c:	9200      	str	r2, [sp, #0]
 800292e:	d100      	bne.n	8002932 <__aeabi_dmul+0x5e>
 8002930:	e188      	b.n	8002c44 <__aeabi_dmul+0x370>
 8002932:	4abf      	ldr	r2, [pc, #764]	@ (8002c30 <__aeabi_dmul+0x35c>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d100      	bne.n	800293a <__aeabi_dmul+0x66>
 8002938:	e092      	b.n	8002a60 <__aeabi_dmul+0x18c>
 800293a:	4abe      	ldr	r2, [pc, #760]	@ (8002c34 <__aeabi_dmul+0x360>)
 800293c:	4694      	mov	ip, r2
 800293e:	4463      	add	r3, ip
 8002940:	449b      	add	fp, r3
 8002942:	2d0a      	cmp	r5, #10
 8002944:	dc42      	bgt.n	80029cc <__aeabi_dmul+0xf8>
 8002946:	00e4      	lsls	r4, r4, #3
 8002948:	0f73      	lsrs	r3, r6, #29
 800294a:	4323      	orrs	r3, r4
 800294c:	2480      	movs	r4, #128	@ 0x80
 800294e:	4649      	mov	r1, r9
 8002950:	0424      	lsls	r4, r4, #16
 8002952:	431c      	orrs	r4, r3
 8002954:	00f3      	lsls	r3, r6, #3
 8002956:	9301      	str	r3, [sp, #4]
 8002958:	9b00      	ldr	r3, [sp, #0]
 800295a:	2000      	movs	r0, #0
 800295c:	4059      	eors	r1, r3
 800295e:	b2cb      	uxtb	r3, r1
 8002960:	9303      	str	r3, [sp, #12]
 8002962:	2d02      	cmp	r5, #2
 8002964:	dc00      	bgt.n	8002968 <__aeabi_dmul+0x94>
 8002966:	e094      	b.n	8002a92 <__aeabi_dmul+0x1be>
 8002968:	2301      	movs	r3, #1
 800296a:	40ab      	lsls	r3, r5
 800296c:	001d      	movs	r5, r3
 800296e:	23a6      	movs	r3, #166	@ 0xa6
 8002970:	002a      	movs	r2, r5
 8002972:	00db      	lsls	r3, r3, #3
 8002974:	401a      	ands	r2, r3
 8002976:	421d      	tst	r5, r3
 8002978:	d000      	beq.n	800297c <__aeabi_dmul+0xa8>
 800297a:	e229      	b.n	8002dd0 <__aeabi_dmul+0x4fc>
 800297c:	2390      	movs	r3, #144	@ 0x90
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	421d      	tst	r5, r3
 8002982:	d100      	bne.n	8002986 <__aeabi_dmul+0xb2>
 8002984:	e24d      	b.n	8002e22 <__aeabi_dmul+0x54e>
 8002986:	2300      	movs	r3, #0
 8002988:	2480      	movs	r4, #128	@ 0x80
 800298a:	4699      	mov	r9, r3
 800298c:	0324      	lsls	r4, r4, #12
 800298e:	4ba8      	ldr	r3, [pc, #672]	@ (8002c30 <__aeabi_dmul+0x35c>)
 8002990:	0010      	movs	r0, r2
 8002992:	464a      	mov	r2, r9
 8002994:	051b      	lsls	r3, r3, #20
 8002996:	4323      	orrs	r3, r4
 8002998:	07d2      	lsls	r2, r2, #31
 800299a:	4313      	orrs	r3, r2
 800299c:	0019      	movs	r1, r3
 800299e:	b005      	add	sp, #20
 80029a0:	bcf0      	pop	{r4, r5, r6, r7}
 80029a2:	46bb      	mov	fp, r7
 80029a4:	46b2      	mov	sl, r6
 80029a6:	46a9      	mov	r9, r5
 80029a8:	46a0      	mov	r8, r4
 80029aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029ac:	4652      	mov	r2, sl
 80029ae:	4302      	orrs	r2, r0
 80029b0:	4690      	mov	r8, r2
 80029b2:	d000      	beq.n	80029b6 <__aeabi_dmul+0xe2>
 80029b4:	e1ac      	b.n	8002d10 <__aeabi_dmul+0x43c>
 80029b6:	469b      	mov	fp, r3
 80029b8:	2302      	movs	r3, #2
 80029ba:	4692      	mov	sl, r2
 80029bc:	2508      	movs	r5, #8
 80029be:	9302      	str	r3, [sp, #8]
 80029c0:	e7ae      	b.n	8002920 <__aeabi_dmul+0x4c>
 80029c2:	9b00      	ldr	r3, [sp, #0]
 80029c4:	46a2      	mov	sl, r4
 80029c6:	4699      	mov	r9, r3
 80029c8:	9b01      	ldr	r3, [sp, #4]
 80029ca:	4698      	mov	r8, r3
 80029cc:	9b02      	ldr	r3, [sp, #8]
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d100      	bne.n	80029d4 <__aeabi_dmul+0x100>
 80029d2:	e1ca      	b.n	8002d6a <__aeabi_dmul+0x496>
 80029d4:	2b03      	cmp	r3, #3
 80029d6:	d100      	bne.n	80029da <__aeabi_dmul+0x106>
 80029d8:	e192      	b.n	8002d00 <__aeabi_dmul+0x42c>
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d110      	bne.n	8002a00 <__aeabi_dmul+0x12c>
 80029de:	2300      	movs	r3, #0
 80029e0:	2400      	movs	r4, #0
 80029e2:	2200      	movs	r2, #0
 80029e4:	e7d4      	b.n	8002990 <__aeabi_dmul+0xbc>
 80029e6:	2201      	movs	r2, #1
 80029e8:	087b      	lsrs	r3, r7, #1
 80029ea:	403a      	ands	r2, r7
 80029ec:	4313      	orrs	r3, r2
 80029ee:	4652      	mov	r2, sl
 80029f0:	07d2      	lsls	r2, r2, #31
 80029f2:	4313      	orrs	r3, r2
 80029f4:	4698      	mov	r8, r3
 80029f6:	4653      	mov	r3, sl
 80029f8:	085b      	lsrs	r3, r3, #1
 80029fa:	469a      	mov	sl, r3
 80029fc:	9b03      	ldr	r3, [sp, #12]
 80029fe:	4699      	mov	r9, r3
 8002a00:	465b      	mov	r3, fp
 8002a02:	1c58      	adds	r0, r3, #1
 8002a04:	2380      	movs	r3, #128	@ 0x80
 8002a06:	00db      	lsls	r3, r3, #3
 8002a08:	445b      	add	r3, fp
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	dc00      	bgt.n	8002a10 <__aeabi_dmul+0x13c>
 8002a0e:	e1b1      	b.n	8002d74 <__aeabi_dmul+0x4a0>
 8002a10:	4642      	mov	r2, r8
 8002a12:	0752      	lsls	r2, r2, #29
 8002a14:	d00b      	beq.n	8002a2e <__aeabi_dmul+0x15a>
 8002a16:	220f      	movs	r2, #15
 8002a18:	4641      	mov	r1, r8
 8002a1a:	400a      	ands	r2, r1
 8002a1c:	2a04      	cmp	r2, #4
 8002a1e:	d006      	beq.n	8002a2e <__aeabi_dmul+0x15a>
 8002a20:	4642      	mov	r2, r8
 8002a22:	1d11      	adds	r1, r2, #4
 8002a24:	4541      	cmp	r1, r8
 8002a26:	4192      	sbcs	r2, r2
 8002a28:	4688      	mov	r8, r1
 8002a2a:	4252      	negs	r2, r2
 8002a2c:	4492      	add	sl, r2
 8002a2e:	4652      	mov	r2, sl
 8002a30:	01d2      	lsls	r2, r2, #7
 8002a32:	d506      	bpl.n	8002a42 <__aeabi_dmul+0x16e>
 8002a34:	4652      	mov	r2, sl
 8002a36:	4b80      	ldr	r3, [pc, #512]	@ (8002c38 <__aeabi_dmul+0x364>)
 8002a38:	401a      	ands	r2, r3
 8002a3a:	2380      	movs	r3, #128	@ 0x80
 8002a3c:	4692      	mov	sl, r2
 8002a3e:	00db      	lsls	r3, r3, #3
 8002a40:	18c3      	adds	r3, r0, r3
 8002a42:	4a7e      	ldr	r2, [pc, #504]	@ (8002c3c <__aeabi_dmul+0x368>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	dd00      	ble.n	8002a4a <__aeabi_dmul+0x176>
 8002a48:	e18f      	b.n	8002d6a <__aeabi_dmul+0x496>
 8002a4a:	4642      	mov	r2, r8
 8002a4c:	08d1      	lsrs	r1, r2, #3
 8002a4e:	4652      	mov	r2, sl
 8002a50:	0752      	lsls	r2, r2, #29
 8002a52:	430a      	orrs	r2, r1
 8002a54:	4651      	mov	r1, sl
 8002a56:	055b      	lsls	r3, r3, #21
 8002a58:	024c      	lsls	r4, r1, #9
 8002a5a:	0b24      	lsrs	r4, r4, #12
 8002a5c:	0d5b      	lsrs	r3, r3, #21
 8002a5e:	e797      	b.n	8002990 <__aeabi_dmul+0xbc>
 8002a60:	4b73      	ldr	r3, [pc, #460]	@ (8002c30 <__aeabi_dmul+0x35c>)
 8002a62:	4326      	orrs	r6, r4
 8002a64:	469c      	mov	ip, r3
 8002a66:	44e3      	add	fp, ip
 8002a68:	2e00      	cmp	r6, #0
 8002a6a:	d100      	bne.n	8002a6e <__aeabi_dmul+0x19a>
 8002a6c:	e16f      	b.n	8002d4e <__aeabi_dmul+0x47a>
 8002a6e:	2303      	movs	r3, #3
 8002a70:	4649      	mov	r1, r9
 8002a72:	431d      	orrs	r5, r3
 8002a74:	9b00      	ldr	r3, [sp, #0]
 8002a76:	4059      	eors	r1, r3
 8002a78:	b2cb      	uxtb	r3, r1
 8002a7a:	9303      	str	r3, [sp, #12]
 8002a7c:	2d0a      	cmp	r5, #10
 8002a7e:	dd00      	ble.n	8002a82 <__aeabi_dmul+0x1ae>
 8002a80:	e133      	b.n	8002cea <__aeabi_dmul+0x416>
 8002a82:	2301      	movs	r3, #1
 8002a84:	40ab      	lsls	r3, r5
 8002a86:	001d      	movs	r5, r3
 8002a88:	2303      	movs	r3, #3
 8002a8a:	9302      	str	r3, [sp, #8]
 8002a8c:	2288      	movs	r2, #136	@ 0x88
 8002a8e:	422a      	tst	r2, r5
 8002a90:	d197      	bne.n	80029c2 <__aeabi_dmul+0xee>
 8002a92:	4642      	mov	r2, r8
 8002a94:	4643      	mov	r3, r8
 8002a96:	0412      	lsls	r2, r2, #16
 8002a98:	0c12      	lsrs	r2, r2, #16
 8002a9a:	0016      	movs	r6, r2
 8002a9c:	9801      	ldr	r0, [sp, #4]
 8002a9e:	0c1d      	lsrs	r5, r3, #16
 8002aa0:	0c03      	lsrs	r3, r0, #16
 8002aa2:	0400      	lsls	r0, r0, #16
 8002aa4:	0c00      	lsrs	r0, r0, #16
 8002aa6:	4346      	muls	r6, r0
 8002aa8:	46b4      	mov	ip, r6
 8002aaa:	001e      	movs	r6, r3
 8002aac:	436e      	muls	r6, r5
 8002aae:	9600      	str	r6, [sp, #0]
 8002ab0:	0016      	movs	r6, r2
 8002ab2:	0007      	movs	r7, r0
 8002ab4:	435e      	muls	r6, r3
 8002ab6:	4661      	mov	r1, ip
 8002ab8:	46b0      	mov	r8, r6
 8002aba:	436f      	muls	r7, r5
 8002abc:	0c0e      	lsrs	r6, r1, #16
 8002abe:	44b8      	add	r8, r7
 8002ac0:	4446      	add	r6, r8
 8002ac2:	42b7      	cmp	r7, r6
 8002ac4:	d905      	bls.n	8002ad2 <__aeabi_dmul+0x1fe>
 8002ac6:	2180      	movs	r1, #128	@ 0x80
 8002ac8:	0249      	lsls	r1, r1, #9
 8002aca:	4688      	mov	r8, r1
 8002acc:	9f00      	ldr	r7, [sp, #0]
 8002ace:	4447      	add	r7, r8
 8002ad0:	9700      	str	r7, [sp, #0]
 8002ad2:	4661      	mov	r1, ip
 8002ad4:	0409      	lsls	r1, r1, #16
 8002ad6:	0c09      	lsrs	r1, r1, #16
 8002ad8:	0c37      	lsrs	r7, r6, #16
 8002ada:	0436      	lsls	r6, r6, #16
 8002adc:	468c      	mov	ip, r1
 8002ade:	0031      	movs	r1, r6
 8002ae0:	4461      	add	r1, ip
 8002ae2:	9101      	str	r1, [sp, #4]
 8002ae4:	0011      	movs	r1, r2
 8002ae6:	0c26      	lsrs	r6, r4, #16
 8002ae8:	0424      	lsls	r4, r4, #16
 8002aea:	0c24      	lsrs	r4, r4, #16
 8002aec:	4361      	muls	r1, r4
 8002aee:	468c      	mov	ip, r1
 8002af0:	0021      	movs	r1, r4
 8002af2:	4369      	muls	r1, r5
 8002af4:	4689      	mov	r9, r1
 8002af6:	4661      	mov	r1, ip
 8002af8:	0c09      	lsrs	r1, r1, #16
 8002afa:	4688      	mov	r8, r1
 8002afc:	4372      	muls	r2, r6
 8002afe:	444a      	add	r2, r9
 8002b00:	4442      	add	r2, r8
 8002b02:	4375      	muls	r5, r6
 8002b04:	4591      	cmp	r9, r2
 8002b06:	d903      	bls.n	8002b10 <__aeabi_dmul+0x23c>
 8002b08:	2180      	movs	r1, #128	@ 0x80
 8002b0a:	0249      	lsls	r1, r1, #9
 8002b0c:	4688      	mov	r8, r1
 8002b0e:	4445      	add	r5, r8
 8002b10:	0c11      	lsrs	r1, r2, #16
 8002b12:	4688      	mov	r8, r1
 8002b14:	4661      	mov	r1, ip
 8002b16:	0409      	lsls	r1, r1, #16
 8002b18:	0c09      	lsrs	r1, r1, #16
 8002b1a:	468c      	mov	ip, r1
 8002b1c:	0412      	lsls	r2, r2, #16
 8002b1e:	4462      	add	r2, ip
 8002b20:	18b9      	adds	r1, r7, r2
 8002b22:	9102      	str	r1, [sp, #8]
 8002b24:	4651      	mov	r1, sl
 8002b26:	0c09      	lsrs	r1, r1, #16
 8002b28:	468c      	mov	ip, r1
 8002b2a:	4651      	mov	r1, sl
 8002b2c:	040f      	lsls	r7, r1, #16
 8002b2e:	0c3f      	lsrs	r7, r7, #16
 8002b30:	0039      	movs	r1, r7
 8002b32:	4341      	muls	r1, r0
 8002b34:	4445      	add	r5, r8
 8002b36:	4688      	mov	r8, r1
 8002b38:	4661      	mov	r1, ip
 8002b3a:	4341      	muls	r1, r0
 8002b3c:	468a      	mov	sl, r1
 8002b3e:	4641      	mov	r1, r8
 8002b40:	4660      	mov	r0, ip
 8002b42:	0c09      	lsrs	r1, r1, #16
 8002b44:	4689      	mov	r9, r1
 8002b46:	4358      	muls	r0, r3
 8002b48:	437b      	muls	r3, r7
 8002b4a:	4453      	add	r3, sl
 8002b4c:	444b      	add	r3, r9
 8002b4e:	459a      	cmp	sl, r3
 8002b50:	d903      	bls.n	8002b5a <__aeabi_dmul+0x286>
 8002b52:	2180      	movs	r1, #128	@ 0x80
 8002b54:	0249      	lsls	r1, r1, #9
 8002b56:	4689      	mov	r9, r1
 8002b58:	4448      	add	r0, r9
 8002b5a:	0c19      	lsrs	r1, r3, #16
 8002b5c:	4689      	mov	r9, r1
 8002b5e:	4641      	mov	r1, r8
 8002b60:	0409      	lsls	r1, r1, #16
 8002b62:	0c09      	lsrs	r1, r1, #16
 8002b64:	4688      	mov	r8, r1
 8002b66:	0039      	movs	r1, r7
 8002b68:	4361      	muls	r1, r4
 8002b6a:	041b      	lsls	r3, r3, #16
 8002b6c:	4443      	add	r3, r8
 8002b6e:	4688      	mov	r8, r1
 8002b70:	4661      	mov	r1, ip
 8002b72:	434c      	muls	r4, r1
 8002b74:	4371      	muls	r1, r6
 8002b76:	468c      	mov	ip, r1
 8002b78:	4641      	mov	r1, r8
 8002b7a:	4377      	muls	r7, r6
 8002b7c:	0c0e      	lsrs	r6, r1, #16
 8002b7e:	193f      	adds	r7, r7, r4
 8002b80:	19f6      	adds	r6, r6, r7
 8002b82:	4448      	add	r0, r9
 8002b84:	42b4      	cmp	r4, r6
 8002b86:	d903      	bls.n	8002b90 <__aeabi_dmul+0x2bc>
 8002b88:	2180      	movs	r1, #128	@ 0x80
 8002b8a:	0249      	lsls	r1, r1, #9
 8002b8c:	4689      	mov	r9, r1
 8002b8e:	44cc      	add	ip, r9
 8002b90:	9902      	ldr	r1, [sp, #8]
 8002b92:	9f00      	ldr	r7, [sp, #0]
 8002b94:	4689      	mov	r9, r1
 8002b96:	0431      	lsls	r1, r6, #16
 8002b98:	444f      	add	r7, r9
 8002b9a:	4689      	mov	r9, r1
 8002b9c:	4641      	mov	r1, r8
 8002b9e:	4297      	cmp	r7, r2
 8002ba0:	4192      	sbcs	r2, r2
 8002ba2:	040c      	lsls	r4, r1, #16
 8002ba4:	0c24      	lsrs	r4, r4, #16
 8002ba6:	444c      	add	r4, r9
 8002ba8:	18ff      	adds	r7, r7, r3
 8002baa:	4252      	negs	r2, r2
 8002bac:	1964      	adds	r4, r4, r5
 8002bae:	18a1      	adds	r1, r4, r2
 8002bb0:	429f      	cmp	r7, r3
 8002bb2:	419b      	sbcs	r3, r3
 8002bb4:	4688      	mov	r8, r1
 8002bb6:	4682      	mov	sl, r0
 8002bb8:	425b      	negs	r3, r3
 8002bba:	4699      	mov	r9, r3
 8002bbc:	4590      	cmp	r8, r2
 8002bbe:	4192      	sbcs	r2, r2
 8002bc0:	42ac      	cmp	r4, r5
 8002bc2:	41a4      	sbcs	r4, r4
 8002bc4:	44c2      	add	sl, r8
 8002bc6:	44d1      	add	r9, sl
 8002bc8:	4252      	negs	r2, r2
 8002bca:	4264      	negs	r4, r4
 8002bcc:	4314      	orrs	r4, r2
 8002bce:	4599      	cmp	r9, r3
 8002bd0:	419b      	sbcs	r3, r3
 8002bd2:	4582      	cmp	sl, r0
 8002bd4:	4192      	sbcs	r2, r2
 8002bd6:	425b      	negs	r3, r3
 8002bd8:	4252      	negs	r2, r2
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	464a      	mov	r2, r9
 8002bde:	0c36      	lsrs	r6, r6, #16
 8002be0:	19a4      	adds	r4, r4, r6
 8002be2:	18e3      	adds	r3, r4, r3
 8002be4:	4463      	add	r3, ip
 8002be6:	025b      	lsls	r3, r3, #9
 8002be8:	0dd2      	lsrs	r2, r2, #23
 8002bea:	431a      	orrs	r2, r3
 8002bec:	9901      	ldr	r1, [sp, #4]
 8002bee:	4692      	mov	sl, r2
 8002bf0:	027a      	lsls	r2, r7, #9
 8002bf2:	430a      	orrs	r2, r1
 8002bf4:	1e50      	subs	r0, r2, #1
 8002bf6:	4182      	sbcs	r2, r0
 8002bf8:	0dff      	lsrs	r7, r7, #23
 8002bfa:	4317      	orrs	r7, r2
 8002bfc:	464a      	mov	r2, r9
 8002bfe:	0252      	lsls	r2, r2, #9
 8002c00:	4317      	orrs	r7, r2
 8002c02:	46b8      	mov	r8, r7
 8002c04:	01db      	lsls	r3, r3, #7
 8002c06:	d500      	bpl.n	8002c0a <__aeabi_dmul+0x336>
 8002c08:	e6ed      	b.n	80029e6 <__aeabi_dmul+0x112>
 8002c0a:	4b0d      	ldr	r3, [pc, #52]	@ (8002c40 <__aeabi_dmul+0x36c>)
 8002c0c:	9a03      	ldr	r2, [sp, #12]
 8002c0e:	445b      	add	r3, fp
 8002c10:	4691      	mov	r9, r2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	dc00      	bgt.n	8002c18 <__aeabi_dmul+0x344>
 8002c16:	e0ac      	b.n	8002d72 <__aeabi_dmul+0x49e>
 8002c18:	003a      	movs	r2, r7
 8002c1a:	0752      	lsls	r2, r2, #29
 8002c1c:	d100      	bne.n	8002c20 <__aeabi_dmul+0x34c>
 8002c1e:	e710      	b.n	8002a42 <__aeabi_dmul+0x16e>
 8002c20:	220f      	movs	r2, #15
 8002c22:	4658      	mov	r0, fp
 8002c24:	403a      	ands	r2, r7
 8002c26:	2a04      	cmp	r2, #4
 8002c28:	d000      	beq.n	8002c2c <__aeabi_dmul+0x358>
 8002c2a:	e6f9      	b.n	8002a20 <__aeabi_dmul+0x14c>
 8002c2c:	e709      	b.n	8002a42 <__aeabi_dmul+0x16e>
 8002c2e:	46c0      	nop			@ (mov r8, r8)
 8002c30:	000007ff 	.word	0x000007ff
 8002c34:	fffffc01 	.word	0xfffffc01
 8002c38:	feffffff 	.word	0xfeffffff
 8002c3c:	000007fe 	.word	0x000007fe
 8002c40:	000003ff 	.word	0x000003ff
 8002c44:	0022      	movs	r2, r4
 8002c46:	4332      	orrs	r2, r6
 8002c48:	d06f      	beq.n	8002d2a <__aeabi_dmul+0x456>
 8002c4a:	2c00      	cmp	r4, #0
 8002c4c:	d100      	bne.n	8002c50 <__aeabi_dmul+0x37c>
 8002c4e:	e0c2      	b.n	8002dd6 <__aeabi_dmul+0x502>
 8002c50:	0020      	movs	r0, r4
 8002c52:	f000 fea9 	bl	80039a8 <__clzsi2>
 8002c56:	0002      	movs	r2, r0
 8002c58:	0003      	movs	r3, r0
 8002c5a:	3a0b      	subs	r2, #11
 8002c5c:	201d      	movs	r0, #29
 8002c5e:	1a82      	subs	r2, r0, r2
 8002c60:	0030      	movs	r0, r6
 8002c62:	0019      	movs	r1, r3
 8002c64:	40d0      	lsrs	r0, r2
 8002c66:	3908      	subs	r1, #8
 8002c68:	408c      	lsls	r4, r1
 8002c6a:	0002      	movs	r2, r0
 8002c6c:	4322      	orrs	r2, r4
 8002c6e:	0034      	movs	r4, r6
 8002c70:	408c      	lsls	r4, r1
 8002c72:	4659      	mov	r1, fp
 8002c74:	1acb      	subs	r3, r1, r3
 8002c76:	4986      	ldr	r1, [pc, #536]	@ (8002e90 <__aeabi_dmul+0x5bc>)
 8002c78:	468b      	mov	fp, r1
 8002c7a:	449b      	add	fp, r3
 8002c7c:	2d0a      	cmp	r5, #10
 8002c7e:	dd00      	ble.n	8002c82 <__aeabi_dmul+0x3ae>
 8002c80:	e6a4      	b.n	80029cc <__aeabi_dmul+0xf8>
 8002c82:	4649      	mov	r1, r9
 8002c84:	9b00      	ldr	r3, [sp, #0]
 8002c86:	9401      	str	r4, [sp, #4]
 8002c88:	4059      	eors	r1, r3
 8002c8a:	b2cb      	uxtb	r3, r1
 8002c8c:	0014      	movs	r4, r2
 8002c8e:	2000      	movs	r0, #0
 8002c90:	9303      	str	r3, [sp, #12]
 8002c92:	2d02      	cmp	r5, #2
 8002c94:	dd00      	ble.n	8002c98 <__aeabi_dmul+0x3c4>
 8002c96:	e667      	b.n	8002968 <__aeabi_dmul+0x94>
 8002c98:	e6fb      	b.n	8002a92 <__aeabi_dmul+0x1be>
 8002c9a:	4653      	mov	r3, sl
 8002c9c:	4303      	orrs	r3, r0
 8002c9e:	4698      	mov	r8, r3
 8002ca0:	d03c      	beq.n	8002d1c <__aeabi_dmul+0x448>
 8002ca2:	4653      	mov	r3, sl
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d100      	bne.n	8002caa <__aeabi_dmul+0x3d6>
 8002ca8:	e0a3      	b.n	8002df2 <__aeabi_dmul+0x51e>
 8002caa:	4650      	mov	r0, sl
 8002cac:	f000 fe7c 	bl	80039a8 <__clzsi2>
 8002cb0:	230b      	movs	r3, #11
 8002cb2:	425b      	negs	r3, r3
 8002cb4:	469c      	mov	ip, r3
 8002cb6:	0002      	movs	r2, r0
 8002cb8:	4484      	add	ip, r0
 8002cba:	0011      	movs	r1, r2
 8002cbc:	4650      	mov	r0, sl
 8002cbe:	3908      	subs	r1, #8
 8002cc0:	4088      	lsls	r0, r1
 8002cc2:	231d      	movs	r3, #29
 8002cc4:	4680      	mov	r8, r0
 8002cc6:	4660      	mov	r0, ip
 8002cc8:	1a1b      	subs	r3, r3, r0
 8002cca:	0020      	movs	r0, r4
 8002ccc:	40d8      	lsrs	r0, r3
 8002cce:	0003      	movs	r3, r0
 8002cd0:	4640      	mov	r0, r8
 8002cd2:	4303      	orrs	r3, r0
 8002cd4:	469a      	mov	sl, r3
 8002cd6:	0023      	movs	r3, r4
 8002cd8:	408b      	lsls	r3, r1
 8002cda:	4698      	mov	r8, r3
 8002cdc:	4b6c      	ldr	r3, [pc, #432]	@ (8002e90 <__aeabi_dmul+0x5bc>)
 8002cde:	2500      	movs	r5, #0
 8002ce0:	1a9b      	subs	r3, r3, r2
 8002ce2:	469b      	mov	fp, r3
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	9302      	str	r3, [sp, #8]
 8002ce8:	e61a      	b.n	8002920 <__aeabi_dmul+0x4c>
 8002cea:	2d0f      	cmp	r5, #15
 8002cec:	d000      	beq.n	8002cf0 <__aeabi_dmul+0x41c>
 8002cee:	e0c9      	b.n	8002e84 <__aeabi_dmul+0x5b0>
 8002cf0:	2380      	movs	r3, #128	@ 0x80
 8002cf2:	4652      	mov	r2, sl
 8002cf4:	031b      	lsls	r3, r3, #12
 8002cf6:	421a      	tst	r2, r3
 8002cf8:	d002      	beq.n	8002d00 <__aeabi_dmul+0x42c>
 8002cfa:	421c      	tst	r4, r3
 8002cfc:	d100      	bne.n	8002d00 <__aeabi_dmul+0x42c>
 8002cfe:	e092      	b.n	8002e26 <__aeabi_dmul+0x552>
 8002d00:	2480      	movs	r4, #128	@ 0x80
 8002d02:	4653      	mov	r3, sl
 8002d04:	0324      	lsls	r4, r4, #12
 8002d06:	431c      	orrs	r4, r3
 8002d08:	0324      	lsls	r4, r4, #12
 8002d0a:	4642      	mov	r2, r8
 8002d0c:	0b24      	lsrs	r4, r4, #12
 8002d0e:	e63e      	b.n	800298e <__aeabi_dmul+0xba>
 8002d10:	469b      	mov	fp, r3
 8002d12:	2303      	movs	r3, #3
 8002d14:	4680      	mov	r8, r0
 8002d16:	250c      	movs	r5, #12
 8002d18:	9302      	str	r3, [sp, #8]
 8002d1a:	e601      	b.n	8002920 <__aeabi_dmul+0x4c>
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	469a      	mov	sl, r3
 8002d20:	469b      	mov	fp, r3
 8002d22:	3301      	adds	r3, #1
 8002d24:	2504      	movs	r5, #4
 8002d26:	9302      	str	r3, [sp, #8]
 8002d28:	e5fa      	b.n	8002920 <__aeabi_dmul+0x4c>
 8002d2a:	2101      	movs	r1, #1
 8002d2c:	430d      	orrs	r5, r1
 8002d2e:	2d0a      	cmp	r5, #10
 8002d30:	dd00      	ble.n	8002d34 <__aeabi_dmul+0x460>
 8002d32:	e64b      	b.n	80029cc <__aeabi_dmul+0xf8>
 8002d34:	4649      	mov	r1, r9
 8002d36:	9800      	ldr	r0, [sp, #0]
 8002d38:	4041      	eors	r1, r0
 8002d3a:	b2c9      	uxtb	r1, r1
 8002d3c:	9103      	str	r1, [sp, #12]
 8002d3e:	2d02      	cmp	r5, #2
 8002d40:	dc00      	bgt.n	8002d44 <__aeabi_dmul+0x470>
 8002d42:	e096      	b.n	8002e72 <__aeabi_dmul+0x59e>
 8002d44:	2300      	movs	r3, #0
 8002d46:	2400      	movs	r4, #0
 8002d48:	2001      	movs	r0, #1
 8002d4a:	9301      	str	r3, [sp, #4]
 8002d4c:	e60c      	b.n	8002968 <__aeabi_dmul+0x94>
 8002d4e:	4649      	mov	r1, r9
 8002d50:	2302      	movs	r3, #2
 8002d52:	9a00      	ldr	r2, [sp, #0]
 8002d54:	432b      	orrs	r3, r5
 8002d56:	4051      	eors	r1, r2
 8002d58:	b2ca      	uxtb	r2, r1
 8002d5a:	9203      	str	r2, [sp, #12]
 8002d5c:	2b0a      	cmp	r3, #10
 8002d5e:	dd00      	ble.n	8002d62 <__aeabi_dmul+0x48e>
 8002d60:	e634      	b.n	80029cc <__aeabi_dmul+0xf8>
 8002d62:	2d00      	cmp	r5, #0
 8002d64:	d157      	bne.n	8002e16 <__aeabi_dmul+0x542>
 8002d66:	9b03      	ldr	r3, [sp, #12]
 8002d68:	4699      	mov	r9, r3
 8002d6a:	2400      	movs	r4, #0
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	4b49      	ldr	r3, [pc, #292]	@ (8002e94 <__aeabi_dmul+0x5c0>)
 8002d70:	e60e      	b.n	8002990 <__aeabi_dmul+0xbc>
 8002d72:	4658      	mov	r0, fp
 8002d74:	2101      	movs	r1, #1
 8002d76:	1ac9      	subs	r1, r1, r3
 8002d78:	2938      	cmp	r1, #56	@ 0x38
 8002d7a:	dd00      	ble.n	8002d7e <__aeabi_dmul+0x4aa>
 8002d7c:	e62f      	b.n	80029de <__aeabi_dmul+0x10a>
 8002d7e:	291f      	cmp	r1, #31
 8002d80:	dd56      	ble.n	8002e30 <__aeabi_dmul+0x55c>
 8002d82:	221f      	movs	r2, #31
 8002d84:	4654      	mov	r4, sl
 8002d86:	4252      	negs	r2, r2
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	40dc      	lsrs	r4, r3
 8002d8c:	2920      	cmp	r1, #32
 8002d8e:	d007      	beq.n	8002da0 <__aeabi_dmul+0x4cc>
 8002d90:	4b41      	ldr	r3, [pc, #260]	@ (8002e98 <__aeabi_dmul+0x5c4>)
 8002d92:	4642      	mov	r2, r8
 8002d94:	469c      	mov	ip, r3
 8002d96:	4653      	mov	r3, sl
 8002d98:	4460      	add	r0, ip
 8002d9a:	4083      	lsls	r3, r0
 8002d9c:	431a      	orrs	r2, r3
 8002d9e:	4690      	mov	r8, r2
 8002da0:	4642      	mov	r2, r8
 8002da2:	2107      	movs	r1, #7
 8002da4:	1e53      	subs	r3, r2, #1
 8002da6:	419a      	sbcs	r2, r3
 8002da8:	000b      	movs	r3, r1
 8002daa:	4322      	orrs	r2, r4
 8002dac:	4013      	ands	r3, r2
 8002dae:	2400      	movs	r4, #0
 8002db0:	4211      	tst	r1, r2
 8002db2:	d009      	beq.n	8002dc8 <__aeabi_dmul+0x4f4>
 8002db4:	230f      	movs	r3, #15
 8002db6:	4013      	ands	r3, r2
 8002db8:	2b04      	cmp	r3, #4
 8002dba:	d05d      	beq.n	8002e78 <__aeabi_dmul+0x5a4>
 8002dbc:	1d11      	adds	r1, r2, #4
 8002dbe:	4291      	cmp	r1, r2
 8002dc0:	419b      	sbcs	r3, r3
 8002dc2:	000a      	movs	r2, r1
 8002dc4:	425b      	negs	r3, r3
 8002dc6:	075b      	lsls	r3, r3, #29
 8002dc8:	08d2      	lsrs	r2, r2, #3
 8002dca:	431a      	orrs	r2, r3
 8002dcc:	2300      	movs	r3, #0
 8002dce:	e5df      	b.n	8002990 <__aeabi_dmul+0xbc>
 8002dd0:	9b03      	ldr	r3, [sp, #12]
 8002dd2:	4699      	mov	r9, r3
 8002dd4:	e5fa      	b.n	80029cc <__aeabi_dmul+0xf8>
 8002dd6:	9801      	ldr	r0, [sp, #4]
 8002dd8:	f000 fde6 	bl	80039a8 <__clzsi2>
 8002ddc:	0002      	movs	r2, r0
 8002dde:	0003      	movs	r3, r0
 8002de0:	3215      	adds	r2, #21
 8002de2:	3320      	adds	r3, #32
 8002de4:	2a1c      	cmp	r2, #28
 8002de6:	dc00      	bgt.n	8002dea <__aeabi_dmul+0x516>
 8002de8:	e738      	b.n	8002c5c <__aeabi_dmul+0x388>
 8002dea:	9a01      	ldr	r2, [sp, #4]
 8002dec:	3808      	subs	r0, #8
 8002dee:	4082      	lsls	r2, r0
 8002df0:	e73f      	b.n	8002c72 <__aeabi_dmul+0x39e>
 8002df2:	f000 fdd9 	bl	80039a8 <__clzsi2>
 8002df6:	2315      	movs	r3, #21
 8002df8:	469c      	mov	ip, r3
 8002dfa:	4484      	add	ip, r0
 8002dfc:	0002      	movs	r2, r0
 8002dfe:	4663      	mov	r3, ip
 8002e00:	3220      	adds	r2, #32
 8002e02:	2b1c      	cmp	r3, #28
 8002e04:	dc00      	bgt.n	8002e08 <__aeabi_dmul+0x534>
 8002e06:	e758      	b.n	8002cba <__aeabi_dmul+0x3e6>
 8002e08:	2300      	movs	r3, #0
 8002e0a:	4698      	mov	r8, r3
 8002e0c:	0023      	movs	r3, r4
 8002e0e:	3808      	subs	r0, #8
 8002e10:	4083      	lsls	r3, r0
 8002e12:	469a      	mov	sl, r3
 8002e14:	e762      	b.n	8002cdc <__aeabi_dmul+0x408>
 8002e16:	001d      	movs	r5, r3
 8002e18:	2300      	movs	r3, #0
 8002e1a:	2400      	movs	r4, #0
 8002e1c:	2002      	movs	r0, #2
 8002e1e:	9301      	str	r3, [sp, #4]
 8002e20:	e5a2      	b.n	8002968 <__aeabi_dmul+0x94>
 8002e22:	9002      	str	r0, [sp, #8]
 8002e24:	e632      	b.n	8002a8c <__aeabi_dmul+0x1b8>
 8002e26:	431c      	orrs	r4, r3
 8002e28:	9b00      	ldr	r3, [sp, #0]
 8002e2a:	9a01      	ldr	r2, [sp, #4]
 8002e2c:	4699      	mov	r9, r3
 8002e2e:	e5ae      	b.n	800298e <__aeabi_dmul+0xba>
 8002e30:	4b1a      	ldr	r3, [pc, #104]	@ (8002e9c <__aeabi_dmul+0x5c8>)
 8002e32:	4652      	mov	r2, sl
 8002e34:	18c3      	adds	r3, r0, r3
 8002e36:	4640      	mov	r0, r8
 8002e38:	409a      	lsls	r2, r3
 8002e3a:	40c8      	lsrs	r0, r1
 8002e3c:	4302      	orrs	r2, r0
 8002e3e:	4640      	mov	r0, r8
 8002e40:	4098      	lsls	r0, r3
 8002e42:	0003      	movs	r3, r0
 8002e44:	1e58      	subs	r0, r3, #1
 8002e46:	4183      	sbcs	r3, r0
 8002e48:	4654      	mov	r4, sl
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	40cc      	lsrs	r4, r1
 8002e4e:	0753      	lsls	r3, r2, #29
 8002e50:	d009      	beq.n	8002e66 <__aeabi_dmul+0x592>
 8002e52:	230f      	movs	r3, #15
 8002e54:	4013      	ands	r3, r2
 8002e56:	2b04      	cmp	r3, #4
 8002e58:	d005      	beq.n	8002e66 <__aeabi_dmul+0x592>
 8002e5a:	1d13      	adds	r3, r2, #4
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	4192      	sbcs	r2, r2
 8002e60:	4252      	negs	r2, r2
 8002e62:	18a4      	adds	r4, r4, r2
 8002e64:	001a      	movs	r2, r3
 8002e66:	0223      	lsls	r3, r4, #8
 8002e68:	d508      	bpl.n	8002e7c <__aeabi_dmul+0x5a8>
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	2400      	movs	r4, #0
 8002e6e:	2200      	movs	r2, #0
 8002e70:	e58e      	b.n	8002990 <__aeabi_dmul+0xbc>
 8002e72:	4689      	mov	r9, r1
 8002e74:	2400      	movs	r4, #0
 8002e76:	e58b      	b.n	8002990 <__aeabi_dmul+0xbc>
 8002e78:	2300      	movs	r3, #0
 8002e7a:	e7a5      	b.n	8002dc8 <__aeabi_dmul+0x4f4>
 8002e7c:	0763      	lsls	r3, r4, #29
 8002e7e:	0264      	lsls	r4, r4, #9
 8002e80:	0b24      	lsrs	r4, r4, #12
 8002e82:	e7a1      	b.n	8002dc8 <__aeabi_dmul+0x4f4>
 8002e84:	9b00      	ldr	r3, [sp, #0]
 8002e86:	46a2      	mov	sl, r4
 8002e88:	4699      	mov	r9, r3
 8002e8a:	9b01      	ldr	r3, [sp, #4]
 8002e8c:	4698      	mov	r8, r3
 8002e8e:	e737      	b.n	8002d00 <__aeabi_dmul+0x42c>
 8002e90:	fffffc0d 	.word	0xfffffc0d
 8002e94:	000007ff 	.word	0x000007ff
 8002e98:	0000043e 	.word	0x0000043e
 8002e9c:	0000041e 	.word	0x0000041e

08002ea0 <__aeabi_dsub>:
 8002ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ea2:	4657      	mov	r7, sl
 8002ea4:	464e      	mov	r6, r9
 8002ea6:	4645      	mov	r5, r8
 8002ea8:	46de      	mov	lr, fp
 8002eaa:	b5e0      	push	{r5, r6, r7, lr}
 8002eac:	b083      	sub	sp, #12
 8002eae:	9000      	str	r0, [sp, #0]
 8002eb0:	9101      	str	r1, [sp, #4]
 8002eb2:	030c      	lsls	r4, r1, #12
 8002eb4:	004d      	lsls	r5, r1, #1
 8002eb6:	0fce      	lsrs	r6, r1, #31
 8002eb8:	0a61      	lsrs	r1, r4, #9
 8002eba:	9c00      	ldr	r4, [sp, #0]
 8002ebc:	005f      	lsls	r7, r3, #1
 8002ebe:	0f64      	lsrs	r4, r4, #29
 8002ec0:	430c      	orrs	r4, r1
 8002ec2:	9900      	ldr	r1, [sp, #0]
 8002ec4:	9200      	str	r2, [sp, #0]
 8002ec6:	9301      	str	r3, [sp, #4]
 8002ec8:	00c8      	lsls	r0, r1, #3
 8002eca:	0319      	lsls	r1, r3, #12
 8002ecc:	0d7b      	lsrs	r3, r7, #21
 8002ece:	4699      	mov	r9, r3
 8002ed0:	9b01      	ldr	r3, [sp, #4]
 8002ed2:	4fcc      	ldr	r7, [pc, #816]	@ (8003204 <__aeabi_dsub+0x364>)
 8002ed4:	0fdb      	lsrs	r3, r3, #31
 8002ed6:	469c      	mov	ip, r3
 8002ed8:	0a4b      	lsrs	r3, r1, #9
 8002eda:	9900      	ldr	r1, [sp, #0]
 8002edc:	4680      	mov	r8, r0
 8002ede:	0f49      	lsrs	r1, r1, #29
 8002ee0:	4319      	orrs	r1, r3
 8002ee2:	9b00      	ldr	r3, [sp, #0]
 8002ee4:	468b      	mov	fp, r1
 8002ee6:	00da      	lsls	r2, r3, #3
 8002ee8:	4692      	mov	sl, r2
 8002eea:	0d6d      	lsrs	r5, r5, #21
 8002eec:	45b9      	cmp	r9, r7
 8002eee:	d100      	bne.n	8002ef2 <__aeabi_dsub+0x52>
 8002ef0:	e0bf      	b.n	8003072 <__aeabi_dsub+0x1d2>
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	4661      	mov	r1, ip
 8002ef6:	4059      	eors	r1, r3
 8002ef8:	464b      	mov	r3, r9
 8002efa:	468c      	mov	ip, r1
 8002efc:	1aeb      	subs	r3, r5, r3
 8002efe:	428e      	cmp	r6, r1
 8002f00:	d075      	beq.n	8002fee <__aeabi_dsub+0x14e>
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	dc00      	bgt.n	8002f08 <__aeabi_dsub+0x68>
 8002f06:	e2a3      	b.n	8003450 <__aeabi_dsub+0x5b0>
 8002f08:	4649      	mov	r1, r9
 8002f0a:	2900      	cmp	r1, #0
 8002f0c:	d100      	bne.n	8002f10 <__aeabi_dsub+0x70>
 8002f0e:	e0ce      	b.n	80030ae <__aeabi_dsub+0x20e>
 8002f10:	42bd      	cmp	r5, r7
 8002f12:	d100      	bne.n	8002f16 <__aeabi_dsub+0x76>
 8002f14:	e200      	b.n	8003318 <__aeabi_dsub+0x478>
 8002f16:	2701      	movs	r7, #1
 8002f18:	2b38      	cmp	r3, #56	@ 0x38
 8002f1a:	dc19      	bgt.n	8002f50 <__aeabi_dsub+0xb0>
 8002f1c:	2780      	movs	r7, #128	@ 0x80
 8002f1e:	4659      	mov	r1, fp
 8002f20:	043f      	lsls	r7, r7, #16
 8002f22:	4339      	orrs	r1, r7
 8002f24:	468b      	mov	fp, r1
 8002f26:	2b1f      	cmp	r3, #31
 8002f28:	dd00      	ble.n	8002f2c <__aeabi_dsub+0x8c>
 8002f2a:	e1fa      	b.n	8003322 <__aeabi_dsub+0x482>
 8002f2c:	2720      	movs	r7, #32
 8002f2e:	1af9      	subs	r1, r7, r3
 8002f30:	468c      	mov	ip, r1
 8002f32:	4659      	mov	r1, fp
 8002f34:	4667      	mov	r7, ip
 8002f36:	40b9      	lsls	r1, r7
 8002f38:	000f      	movs	r7, r1
 8002f3a:	0011      	movs	r1, r2
 8002f3c:	40d9      	lsrs	r1, r3
 8002f3e:	430f      	orrs	r7, r1
 8002f40:	4661      	mov	r1, ip
 8002f42:	408a      	lsls	r2, r1
 8002f44:	1e51      	subs	r1, r2, #1
 8002f46:	418a      	sbcs	r2, r1
 8002f48:	4659      	mov	r1, fp
 8002f4a:	40d9      	lsrs	r1, r3
 8002f4c:	4317      	orrs	r7, r2
 8002f4e:	1a64      	subs	r4, r4, r1
 8002f50:	1bc7      	subs	r7, r0, r7
 8002f52:	42b8      	cmp	r0, r7
 8002f54:	4180      	sbcs	r0, r0
 8002f56:	4240      	negs	r0, r0
 8002f58:	1a24      	subs	r4, r4, r0
 8002f5a:	0223      	lsls	r3, r4, #8
 8002f5c:	d400      	bmi.n	8002f60 <__aeabi_dsub+0xc0>
 8002f5e:	e140      	b.n	80031e2 <__aeabi_dsub+0x342>
 8002f60:	0264      	lsls	r4, r4, #9
 8002f62:	0a64      	lsrs	r4, r4, #9
 8002f64:	2c00      	cmp	r4, #0
 8002f66:	d100      	bne.n	8002f6a <__aeabi_dsub+0xca>
 8002f68:	e154      	b.n	8003214 <__aeabi_dsub+0x374>
 8002f6a:	0020      	movs	r0, r4
 8002f6c:	f000 fd1c 	bl	80039a8 <__clzsi2>
 8002f70:	0003      	movs	r3, r0
 8002f72:	3b08      	subs	r3, #8
 8002f74:	2120      	movs	r1, #32
 8002f76:	0038      	movs	r0, r7
 8002f78:	1aca      	subs	r2, r1, r3
 8002f7a:	40d0      	lsrs	r0, r2
 8002f7c:	409c      	lsls	r4, r3
 8002f7e:	0002      	movs	r2, r0
 8002f80:	409f      	lsls	r7, r3
 8002f82:	4322      	orrs	r2, r4
 8002f84:	429d      	cmp	r5, r3
 8002f86:	dd00      	ble.n	8002f8a <__aeabi_dsub+0xea>
 8002f88:	e1a6      	b.n	80032d8 <__aeabi_dsub+0x438>
 8002f8a:	1b58      	subs	r0, r3, r5
 8002f8c:	3001      	adds	r0, #1
 8002f8e:	1a09      	subs	r1, r1, r0
 8002f90:	003c      	movs	r4, r7
 8002f92:	408f      	lsls	r7, r1
 8002f94:	40c4      	lsrs	r4, r0
 8002f96:	1e7b      	subs	r3, r7, #1
 8002f98:	419f      	sbcs	r7, r3
 8002f9a:	0013      	movs	r3, r2
 8002f9c:	408b      	lsls	r3, r1
 8002f9e:	4327      	orrs	r7, r4
 8002fa0:	431f      	orrs	r7, r3
 8002fa2:	40c2      	lsrs	r2, r0
 8002fa4:	003b      	movs	r3, r7
 8002fa6:	0014      	movs	r4, r2
 8002fa8:	2500      	movs	r5, #0
 8002faa:	4313      	orrs	r3, r2
 8002fac:	d100      	bne.n	8002fb0 <__aeabi_dsub+0x110>
 8002fae:	e1f7      	b.n	80033a0 <__aeabi_dsub+0x500>
 8002fb0:	077b      	lsls	r3, r7, #29
 8002fb2:	d100      	bne.n	8002fb6 <__aeabi_dsub+0x116>
 8002fb4:	e377      	b.n	80036a6 <__aeabi_dsub+0x806>
 8002fb6:	230f      	movs	r3, #15
 8002fb8:	0038      	movs	r0, r7
 8002fba:	403b      	ands	r3, r7
 8002fbc:	2b04      	cmp	r3, #4
 8002fbe:	d004      	beq.n	8002fca <__aeabi_dsub+0x12a>
 8002fc0:	1d38      	adds	r0, r7, #4
 8002fc2:	42b8      	cmp	r0, r7
 8002fc4:	41bf      	sbcs	r7, r7
 8002fc6:	427f      	negs	r7, r7
 8002fc8:	19e4      	adds	r4, r4, r7
 8002fca:	0223      	lsls	r3, r4, #8
 8002fcc:	d400      	bmi.n	8002fd0 <__aeabi_dsub+0x130>
 8002fce:	e368      	b.n	80036a2 <__aeabi_dsub+0x802>
 8002fd0:	4b8c      	ldr	r3, [pc, #560]	@ (8003204 <__aeabi_dsub+0x364>)
 8002fd2:	3501      	adds	r5, #1
 8002fd4:	429d      	cmp	r5, r3
 8002fd6:	d100      	bne.n	8002fda <__aeabi_dsub+0x13a>
 8002fd8:	e0f4      	b.n	80031c4 <__aeabi_dsub+0x324>
 8002fda:	4b8b      	ldr	r3, [pc, #556]	@ (8003208 <__aeabi_dsub+0x368>)
 8002fdc:	056d      	lsls	r5, r5, #21
 8002fde:	401c      	ands	r4, r3
 8002fe0:	0d6d      	lsrs	r5, r5, #21
 8002fe2:	0767      	lsls	r7, r4, #29
 8002fe4:	08c0      	lsrs	r0, r0, #3
 8002fe6:	0264      	lsls	r4, r4, #9
 8002fe8:	4307      	orrs	r7, r0
 8002fea:	0b24      	lsrs	r4, r4, #12
 8002fec:	e0ec      	b.n	80031c8 <__aeabi_dsub+0x328>
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	dc00      	bgt.n	8002ff4 <__aeabi_dsub+0x154>
 8002ff2:	e329      	b.n	8003648 <__aeabi_dsub+0x7a8>
 8002ff4:	4649      	mov	r1, r9
 8002ff6:	2900      	cmp	r1, #0
 8002ff8:	d000      	beq.n	8002ffc <__aeabi_dsub+0x15c>
 8002ffa:	e0d6      	b.n	80031aa <__aeabi_dsub+0x30a>
 8002ffc:	4659      	mov	r1, fp
 8002ffe:	4311      	orrs	r1, r2
 8003000:	d100      	bne.n	8003004 <__aeabi_dsub+0x164>
 8003002:	e12e      	b.n	8003262 <__aeabi_dsub+0x3c2>
 8003004:	1e59      	subs	r1, r3, #1
 8003006:	2b01      	cmp	r3, #1
 8003008:	d100      	bne.n	800300c <__aeabi_dsub+0x16c>
 800300a:	e1e6      	b.n	80033da <__aeabi_dsub+0x53a>
 800300c:	42bb      	cmp	r3, r7
 800300e:	d100      	bne.n	8003012 <__aeabi_dsub+0x172>
 8003010:	e182      	b.n	8003318 <__aeabi_dsub+0x478>
 8003012:	2701      	movs	r7, #1
 8003014:	000b      	movs	r3, r1
 8003016:	2938      	cmp	r1, #56	@ 0x38
 8003018:	dc14      	bgt.n	8003044 <__aeabi_dsub+0x1a4>
 800301a:	2b1f      	cmp	r3, #31
 800301c:	dd00      	ble.n	8003020 <__aeabi_dsub+0x180>
 800301e:	e23c      	b.n	800349a <__aeabi_dsub+0x5fa>
 8003020:	2720      	movs	r7, #32
 8003022:	1af9      	subs	r1, r7, r3
 8003024:	468c      	mov	ip, r1
 8003026:	4659      	mov	r1, fp
 8003028:	4667      	mov	r7, ip
 800302a:	40b9      	lsls	r1, r7
 800302c:	000f      	movs	r7, r1
 800302e:	0011      	movs	r1, r2
 8003030:	40d9      	lsrs	r1, r3
 8003032:	430f      	orrs	r7, r1
 8003034:	4661      	mov	r1, ip
 8003036:	408a      	lsls	r2, r1
 8003038:	1e51      	subs	r1, r2, #1
 800303a:	418a      	sbcs	r2, r1
 800303c:	4659      	mov	r1, fp
 800303e:	40d9      	lsrs	r1, r3
 8003040:	4317      	orrs	r7, r2
 8003042:	1864      	adds	r4, r4, r1
 8003044:	183f      	adds	r7, r7, r0
 8003046:	4287      	cmp	r7, r0
 8003048:	4180      	sbcs	r0, r0
 800304a:	4240      	negs	r0, r0
 800304c:	1824      	adds	r4, r4, r0
 800304e:	0223      	lsls	r3, r4, #8
 8003050:	d400      	bmi.n	8003054 <__aeabi_dsub+0x1b4>
 8003052:	e0c6      	b.n	80031e2 <__aeabi_dsub+0x342>
 8003054:	4b6b      	ldr	r3, [pc, #428]	@ (8003204 <__aeabi_dsub+0x364>)
 8003056:	3501      	adds	r5, #1
 8003058:	429d      	cmp	r5, r3
 800305a:	d100      	bne.n	800305e <__aeabi_dsub+0x1be>
 800305c:	e0b2      	b.n	80031c4 <__aeabi_dsub+0x324>
 800305e:	2101      	movs	r1, #1
 8003060:	4b69      	ldr	r3, [pc, #420]	@ (8003208 <__aeabi_dsub+0x368>)
 8003062:	087a      	lsrs	r2, r7, #1
 8003064:	401c      	ands	r4, r3
 8003066:	4039      	ands	r1, r7
 8003068:	430a      	orrs	r2, r1
 800306a:	07e7      	lsls	r7, r4, #31
 800306c:	4317      	orrs	r7, r2
 800306e:	0864      	lsrs	r4, r4, #1
 8003070:	e79e      	b.n	8002fb0 <__aeabi_dsub+0x110>
 8003072:	4b66      	ldr	r3, [pc, #408]	@ (800320c <__aeabi_dsub+0x36c>)
 8003074:	4311      	orrs	r1, r2
 8003076:	468a      	mov	sl, r1
 8003078:	18eb      	adds	r3, r5, r3
 800307a:	2900      	cmp	r1, #0
 800307c:	d028      	beq.n	80030d0 <__aeabi_dsub+0x230>
 800307e:	4566      	cmp	r6, ip
 8003080:	d02c      	beq.n	80030dc <__aeabi_dsub+0x23c>
 8003082:	2b00      	cmp	r3, #0
 8003084:	d05b      	beq.n	800313e <__aeabi_dsub+0x29e>
 8003086:	2d00      	cmp	r5, #0
 8003088:	d100      	bne.n	800308c <__aeabi_dsub+0x1ec>
 800308a:	e12c      	b.n	80032e6 <__aeabi_dsub+0x446>
 800308c:	465b      	mov	r3, fp
 800308e:	4666      	mov	r6, ip
 8003090:	075f      	lsls	r7, r3, #29
 8003092:	08d2      	lsrs	r2, r2, #3
 8003094:	4317      	orrs	r7, r2
 8003096:	08dd      	lsrs	r5, r3, #3
 8003098:	003b      	movs	r3, r7
 800309a:	432b      	orrs	r3, r5
 800309c:	d100      	bne.n	80030a0 <__aeabi_dsub+0x200>
 800309e:	e0e2      	b.n	8003266 <__aeabi_dsub+0x3c6>
 80030a0:	2480      	movs	r4, #128	@ 0x80
 80030a2:	0324      	lsls	r4, r4, #12
 80030a4:	432c      	orrs	r4, r5
 80030a6:	0324      	lsls	r4, r4, #12
 80030a8:	4d56      	ldr	r5, [pc, #344]	@ (8003204 <__aeabi_dsub+0x364>)
 80030aa:	0b24      	lsrs	r4, r4, #12
 80030ac:	e08c      	b.n	80031c8 <__aeabi_dsub+0x328>
 80030ae:	4659      	mov	r1, fp
 80030b0:	4311      	orrs	r1, r2
 80030b2:	d100      	bne.n	80030b6 <__aeabi_dsub+0x216>
 80030b4:	e0d5      	b.n	8003262 <__aeabi_dsub+0x3c2>
 80030b6:	1e59      	subs	r1, r3, #1
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d100      	bne.n	80030be <__aeabi_dsub+0x21e>
 80030bc:	e1b9      	b.n	8003432 <__aeabi_dsub+0x592>
 80030be:	42bb      	cmp	r3, r7
 80030c0:	d100      	bne.n	80030c4 <__aeabi_dsub+0x224>
 80030c2:	e1b1      	b.n	8003428 <__aeabi_dsub+0x588>
 80030c4:	2701      	movs	r7, #1
 80030c6:	000b      	movs	r3, r1
 80030c8:	2938      	cmp	r1, #56	@ 0x38
 80030ca:	dd00      	ble.n	80030ce <__aeabi_dsub+0x22e>
 80030cc:	e740      	b.n	8002f50 <__aeabi_dsub+0xb0>
 80030ce:	e72a      	b.n	8002f26 <__aeabi_dsub+0x86>
 80030d0:	4661      	mov	r1, ip
 80030d2:	2701      	movs	r7, #1
 80030d4:	4079      	eors	r1, r7
 80030d6:	468c      	mov	ip, r1
 80030d8:	4566      	cmp	r6, ip
 80030da:	d1d2      	bne.n	8003082 <__aeabi_dsub+0x1e2>
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d100      	bne.n	80030e2 <__aeabi_dsub+0x242>
 80030e0:	e0c5      	b.n	800326e <__aeabi_dsub+0x3ce>
 80030e2:	2d00      	cmp	r5, #0
 80030e4:	d000      	beq.n	80030e8 <__aeabi_dsub+0x248>
 80030e6:	e155      	b.n	8003394 <__aeabi_dsub+0x4f4>
 80030e8:	464b      	mov	r3, r9
 80030ea:	0025      	movs	r5, r4
 80030ec:	4305      	orrs	r5, r0
 80030ee:	d100      	bne.n	80030f2 <__aeabi_dsub+0x252>
 80030f0:	e212      	b.n	8003518 <__aeabi_dsub+0x678>
 80030f2:	1e59      	subs	r1, r3, #1
 80030f4:	468c      	mov	ip, r1
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d100      	bne.n	80030fc <__aeabi_dsub+0x25c>
 80030fa:	e249      	b.n	8003590 <__aeabi_dsub+0x6f0>
 80030fc:	4d41      	ldr	r5, [pc, #260]	@ (8003204 <__aeabi_dsub+0x364>)
 80030fe:	42ab      	cmp	r3, r5
 8003100:	d100      	bne.n	8003104 <__aeabi_dsub+0x264>
 8003102:	e28f      	b.n	8003624 <__aeabi_dsub+0x784>
 8003104:	2701      	movs	r7, #1
 8003106:	2938      	cmp	r1, #56	@ 0x38
 8003108:	dc11      	bgt.n	800312e <__aeabi_dsub+0x28e>
 800310a:	4663      	mov	r3, ip
 800310c:	2b1f      	cmp	r3, #31
 800310e:	dd00      	ble.n	8003112 <__aeabi_dsub+0x272>
 8003110:	e25b      	b.n	80035ca <__aeabi_dsub+0x72a>
 8003112:	4661      	mov	r1, ip
 8003114:	2320      	movs	r3, #32
 8003116:	0027      	movs	r7, r4
 8003118:	1a5b      	subs	r3, r3, r1
 800311a:	0005      	movs	r5, r0
 800311c:	4098      	lsls	r0, r3
 800311e:	409f      	lsls	r7, r3
 8003120:	40cd      	lsrs	r5, r1
 8003122:	1e43      	subs	r3, r0, #1
 8003124:	4198      	sbcs	r0, r3
 8003126:	40cc      	lsrs	r4, r1
 8003128:	432f      	orrs	r7, r5
 800312a:	4307      	orrs	r7, r0
 800312c:	44a3      	add	fp, r4
 800312e:	18bf      	adds	r7, r7, r2
 8003130:	4297      	cmp	r7, r2
 8003132:	4192      	sbcs	r2, r2
 8003134:	4252      	negs	r2, r2
 8003136:	445a      	add	r2, fp
 8003138:	0014      	movs	r4, r2
 800313a:	464d      	mov	r5, r9
 800313c:	e787      	b.n	800304e <__aeabi_dsub+0x1ae>
 800313e:	4f34      	ldr	r7, [pc, #208]	@ (8003210 <__aeabi_dsub+0x370>)
 8003140:	1c6b      	adds	r3, r5, #1
 8003142:	423b      	tst	r3, r7
 8003144:	d000      	beq.n	8003148 <__aeabi_dsub+0x2a8>
 8003146:	e0b6      	b.n	80032b6 <__aeabi_dsub+0x416>
 8003148:	4659      	mov	r1, fp
 800314a:	0023      	movs	r3, r4
 800314c:	4311      	orrs	r1, r2
 800314e:	000f      	movs	r7, r1
 8003150:	4303      	orrs	r3, r0
 8003152:	2d00      	cmp	r5, #0
 8003154:	d000      	beq.n	8003158 <__aeabi_dsub+0x2b8>
 8003156:	e126      	b.n	80033a6 <__aeabi_dsub+0x506>
 8003158:	2b00      	cmp	r3, #0
 800315a:	d100      	bne.n	800315e <__aeabi_dsub+0x2be>
 800315c:	e1c0      	b.n	80034e0 <__aeabi_dsub+0x640>
 800315e:	2900      	cmp	r1, #0
 8003160:	d100      	bne.n	8003164 <__aeabi_dsub+0x2c4>
 8003162:	e0a1      	b.n	80032a8 <__aeabi_dsub+0x408>
 8003164:	1a83      	subs	r3, r0, r2
 8003166:	4698      	mov	r8, r3
 8003168:	465b      	mov	r3, fp
 800316a:	4540      	cmp	r0, r8
 800316c:	41ad      	sbcs	r5, r5
 800316e:	1ae3      	subs	r3, r4, r3
 8003170:	426d      	negs	r5, r5
 8003172:	1b5b      	subs	r3, r3, r5
 8003174:	2580      	movs	r5, #128	@ 0x80
 8003176:	042d      	lsls	r5, r5, #16
 8003178:	422b      	tst	r3, r5
 800317a:	d100      	bne.n	800317e <__aeabi_dsub+0x2de>
 800317c:	e14b      	b.n	8003416 <__aeabi_dsub+0x576>
 800317e:	465b      	mov	r3, fp
 8003180:	1a10      	subs	r0, r2, r0
 8003182:	4282      	cmp	r2, r0
 8003184:	4192      	sbcs	r2, r2
 8003186:	1b1c      	subs	r4, r3, r4
 8003188:	0007      	movs	r7, r0
 800318a:	2601      	movs	r6, #1
 800318c:	4663      	mov	r3, ip
 800318e:	4252      	negs	r2, r2
 8003190:	1aa4      	subs	r4, r4, r2
 8003192:	4327      	orrs	r7, r4
 8003194:	401e      	ands	r6, r3
 8003196:	2f00      	cmp	r7, #0
 8003198:	d100      	bne.n	800319c <__aeabi_dsub+0x2fc>
 800319a:	e142      	b.n	8003422 <__aeabi_dsub+0x582>
 800319c:	422c      	tst	r4, r5
 800319e:	d100      	bne.n	80031a2 <__aeabi_dsub+0x302>
 80031a0:	e26d      	b.n	800367e <__aeabi_dsub+0x7de>
 80031a2:	4b19      	ldr	r3, [pc, #100]	@ (8003208 <__aeabi_dsub+0x368>)
 80031a4:	2501      	movs	r5, #1
 80031a6:	401c      	ands	r4, r3
 80031a8:	e71b      	b.n	8002fe2 <__aeabi_dsub+0x142>
 80031aa:	42bd      	cmp	r5, r7
 80031ac:	d100      	bne.n	80031b0 <__aeabi_dsub+0x310>
 80031ae:	e13b      	b.n	8003428 <__aeabi_dsub+0x588>
 80031b0:	2701      	movs	r7, #1
 80031b2:	2b38      	cmp	r3, #56	@ 0x38
 80031b4:	dd00      	ble.n	80031b8 <__aeabi_dsub+0x318>
 80031b6:	e745      	b.n	8003044 <__aeabi_dsub+0x1a4>
 80031b8:	2780      	movs	r7, #128	@ 0x80
 80031ba:	4659      	mov	r1, fp
 80031bc:	043f      	lsls	r7, r7, #16
 80031be:	4339      	orrs	r1, r7
 80031c0:	468b      	mov	fp, r1
 80031c2:	e72a      	b.n	800301a <__aeabi_dsub+0x17a>
 80031c4:	2400      	movs	r4, #0
 80031c6:	2700      	movs	r7, #0
 80031c8:	052d      	lsls	r5, r5, #20
 80031ca:	4325      	orrs	r5, r4
 80031cc:	07f6      	lsls	r6, r6, #31
 80031ce:	4335      	orrs	r5, r6
 80031d0:	0038      	movs	r0, r7
 80031d2:	0029      	movs	r1, r5
 80031d4:	b003      	add	sp, #12
 80031d6:	bcf0      	pop	{r4, r5, r6, r7}
 80031d8:	46bb      	mov	fp, r7
 80031da:	46b2      	mov	sl, r6
 80031dc:	46a9      	mov	r9, r5
 80031de:	46a0      	mov	r8, r4
 80031e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031e2:	077b      	lsls	r3, r7, #29
 80031e4:	d004      	beq.n	80031f0 <__aeabi_dsub+0x350>
 80031e6:	230f      	movs	r3, #15
 80031e8:	403b      	ands	r3, r7
 80031ea:	2b04      	cmp	r3, #4
 80031ec:	d000      	beq.n	80031f0 <__aeabi_dsub+0x350>
 80031ee:	e6e7      	b.n	8002fc0 <__aeabi_dsub+0x120>
 80031f0:	002b      	movs	r3, r5
 80031f2:	08f8      	lsrs	r0, r7, #3
 80031f4:	4a03      	ldr	r2, [pc, #12]	@ (8003204 <__aeabi_dsub+0x364>)
 80031f6:	0767      	lsls	r7, r4, #29
 80031f8:	4307      	orrs	r7, r0
 80031fa:	08e5      	lsrs	r5, r4, #3
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d100      	bne.n	8003202 <__aeabi_dsub+0x362>
 8003200:	e74a      	b.n	8003098 <__aeabi_dsub+0x1f8>
 8003202:	e0a5      	b.n	8003350 <__aeabi_dsub+0x4b0>
 8003204:	000007ff 	.word	0x000007ff
 8003208:	ff7fffff 	.word	0xff7fffff
 800320c:	fffff801 	.word	0xfffff801
 8003210:	000007fe 	.word	0x000007fe
 8003214:	0038      	movs	r0, r7
 8003216:	f000 fbc7 	bl	80039a8 <__clzsi2>
 800321a:	0003      	movs	r3, r0
 800321c:	3318      	adds	r3, #24
 800321e:	2b1f      	cmp	r3, #31
 8003220:	dc00      	bgt.n	8003224 <__aeabi_dsub+0x384>
 8003222:	e6a7      	b.n	8002f74 <__aeabi_dsub+0xd4>
 8003224:	003a      	movs	r2, r7
 8003226:	3808      	subs	r0, #8
 8003228:	4082      	lsls	r2, r0
 800322a:	429d      	cmp	r5, r3
 800322c:	dd00      	ble.n	8003230 <__aeabi_dsub+0x390>
 800322e:	e08a      	b.n	8003346 <__aeabi_dsub+0x4a6>
 8003230:	1b5b      	subs	r3, r3, r5
 8003232:	1c58      	adds	r0, r3, #1
 8003234:	281f      	cmp	r0, #31
 8003236:	dc00      	bgt.n	800323a <__aeabi_dsub+0x39a>
 8003238:	e1d8      	b.n	80035ec <__aeabi_dsub+0x74c>
 800323a:	0017      	movs	r7, r2
 800323c:	3b1f      	subs	r3, #31
 800323e:	40df      	lsrs	r7, r3
 8003240:	2820      	cmp	r0, #32
 8003242:	d005      	beq.n	8003250 <__aeabi_dsub+0x3b0>
 8003244:	2340      	movs	r3, #64	@ 0x40
 8003246:	1a1b      	subs	r3, r3, r0
 8003248:	409a      	lsls	r2, r3
 800324a:	1e53      	subs	r3, r2, #1
 800324c:	419a      	sbcs	r2, r3
 800324e:	4317      	orrs	r7, r2
 8003250:	2500      	movs	r5, #0
 8003252:	2f00      	cmp	r7, #0
 8003254:	d100      	bne.n	8003258 <__aeabi_dsub+0x3b8>
 8003256:	e0e5      	b.n	8003424 <__aeabi_dsub+0x584>
 8003258:	077b      	lsls	r3, r7, #29
 800325a:	d000      	beq.n	800325e <__aeabi_dsub+0x3be>
 800325c:	e6ab      	b.n	8002fb6 <__aeabi_dsub+0x116>
 800325e:	002c      	movs	r4, r5
 8003260:	e7c6      	b.n	80031f0 <__aeabi_dsub+0x350>
 8003262:	08c0      	lsrs	r0, r0, #3
 8003264:	e7c6      	b.n	80031f4 <__aeabi_dsub+0x354>
 8003266:	2700      	movs	r7, #0
 8003268:	2400      	movs	r4, #0
 800326a:	4dd1      	ldr	r5, [pc, #836]	@ (80035b0 <__aeabi_dsub+0x710>)
 800326c:	e7ac      	b.n	80031c8 <__aeabi_dsub+0x328>
 800326e:	4fd1      	ldr	r7, [pc, #836]	@ (80035b4 <__aeabi_dsub+0x714>)
 8003270:	1c6b      	adds	r3, r5, #1
 8003272:	423b      	tst	r3, r7
 8003274:	d171      	bne.n	800335a <__aeabi_dsub+0x4ba>
 8003276:	0023      	movs	r3, r4
 8003278:	4303      	orrs	r3, r0
 800327a:	2d00      	cmp	r5, #0
 800327c:	d000      	beq.n	8003280 <__aeabi_dsub+0x3e0>
 800327e:	e14e      	b.n	800351e <__aeabi_dsub+0x67e>
 8003280:	4657      	mov	r7, sl
 8003282:	2b00      	cmp	r3, #0
 8003284:	d100      	bne.n	8003288 <__aeabi_dsub+0x3e8>
 8003286:	e1b5      	b.n	80035f4 <__aeabi_dsub+0x754>
 8003288:	2f00      	cmp	r7, #0
 800328a:	d00d      	beq.n	80032a8 <__aeabi_dsub+0x408>
 800328c:	1883      	adds	r3, r0, r2
 800328e:	4283      	cmp	r3, r0
 8003290:	4180      	sbcs	r0, r0
 8003292:	445c      	add	r4, fp
 8003294:	4240      	negs	r0, r0
 8003296:	1824      	adds	r4, r4, r0
 8003298:	0222      	lsls	r2, r4, #8
 800329a:	d500      	bpl.n	800329e <__aeabi_dsub+0x3fe>
 800329c:	e1c8      	b.n	8003630 <__aeabi_dsub+0x790>
 800329e:	001f      	movs	r7, r3
 80032a0:	4698      	mov	r8, r3
 80032a2:	4327      	orrs	r7, r4
 80032a4:	d100      	bne.n	80032a8 <__aeabi_dsub+0x408>
 80032a6:	e0bc      	b.n	8003422 <__aeabi_dsub+0x582>
 80032a8:	4643      	mov	r3, r8
 80032aa:	0767      	lsls	r7, r4, #29
 80032ac:	08db      	lsrs	r3, r3, #3
 80032ae:	431f      	orrs	r7, r3
 80032b0:	08e5      	lsrs	r5, r4, #3
 80032b2:	2300      	movs	r3, #0
 80032b4:	e04c      	b.n	8003350 <__aeabi_dsub+0x4b0>
 80032b6:	1a83      	subs	r3, r0, r2
 80032b8:	4698      	mov	r8, r3
 80032ba:	465b      	mov	r3, fp
 80032bc:	4540      	cmp	r0, r8
 80032be:	41bf      	sbcs	r7, r7
 80032c0:	1ae3      	subs	r3, r4, r3
 80032c2:	427f      	negs	r7, r7
 80032c4:	1bdb      	subs	r3, r3, r7
 80032c6:	021f      	lsls	r7, r3, #8
 80032c8:	d47c      	bmi.n	80033c4 <__aeabi_dsub+0x524>
 80032ca:	4647      	mov	r7, r8
 80032cc:	431f      	orrs	r7, r3
 80032ce:	d100      	bne.n	80032d2 <__aeabi_dsub+0x432>
 80032d0:	e0a6      	b.n	8003420 <__aeabi_dsub+0x580>
 80032d2:	001c      	movs	r4, r3
 80032d4:	4647      	mov	r7, r8
 80032d6:	e645      	b.n	8002f64 <__aeabi_dsub+0xc4>
 80032d8:	4cb7      	ldr	r4, [pc, #732]	@ (80035b8 <__aeabi_dsub+0x718>)
 80032da:	1aed      	subs	r5, r5, r3
 80032dc:	4014      	ands	r4, r2
 80032de:	077b      	lsls	r3, r7, #29
 80032e0:	d000      	beq.n	80032e4 <__aeabi_dsub+0x444>
 80032e2:	e780      	b.n	80031e6 <__aeabi_dsub+0x346>
 80032e4:	e784      	b.n	80031f0 <__aeabi_dsub+0x350>
 80032e6:	464b      	mov	r3, r9
 80032e8:	0025      	movs	r5, r4
 80032ea:	4305      	orrs	r5, r0
 80032ec:	d066      	beq.n	80033bc <__aeabi_dsub+0x51c>
 80032ee:	1e5f      	subs	r7, r3, #1
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d100      	bne.n	80032f6 <__aeabi_dsub+0x456>
 80032f4:	e0fc      	b.n	80034f0 <__aeabi_dsub+0x650>
 80032f6:	4dae      	ldr	r5, [pc, #696]	@ (80035b0 <__aeabi_dsub+0x710>)
 80032f8:	42ab      	cmp	r3, r5
 80032fa:	d100      	bne.n	80032fe <__aeabi_dsub+0x45e>
 80032fc:	e15e      	b.n	80035bc <__aeabi_dsub+0x71c>
 80032fe:	4666      	mov	r6, ip
 8003300:	2f38      	cmp	r7, #56	@ 0x38
 8003302:	dc00      	bgt.n	8003306 <__aeabi_dsub+0x466>
 8003304:	e0b4      	b.n	8003470 <__aeabi_dsub+0x5d0>
 8003306:	2001      	movs	r0, #1
 8003308:	1a17      	subs	r7, r2, r0
 800330a:	42ba      	cmp	r2, r7
 800330c:	4192      	sbcs	r2, r2
 800330e:	465b      	mov	r3, fp
 8003310:	4252      	negs	r2, r2
 8003312:	464d      	mov	r5, r9
 8003314:	1a9c      	subs	r4, r3, r2
 8003316:	e620      	b.n	8002f5a <__aeabi_dsub+0xba>
 8003318:	0767      	lsls	r7, r4, #29
 800331a:	08c0      	lsrs	r0, r0, #3
 800331c:	4307      	orrs	r7, r0
 800331e:	08e5      	lsrs	r5, r4, #3
 8003320:	e6ba      	b.n	8003098 <__aeabi_dsub+0x1f8>
 8003322:	001f      	movs	r7, r3
 8003324:	4659      	mov	r1, fp
 8003326:	3f20      	subs	r7, #32
 8003328:	40f9      	lsrs	r1, r7
 800332a:	000f      	movs	r7, r1
 800332c:	2b20      	cmp	r3, #32
 800332e:	d005      	beq.n	800333c <__aeabi_dsub+0x49c>
 8003330:	2140      	movs	r1, #64	@ 0x40
 8003332:	1acb      	subs	r3, r1, r3
 8003334:	4659      	mov	r1, fp
 8003336:	4099      	lsls	r1, r3
 8003338:	430a      	orrs	r2, r1
 800333a:	4692      	mov	sl, r2
 800333c:	4653      	mov	r3, sl
 800333e:	1e5a      	subs	r2, r3, #1
 8003340:	4193      	sbcs	r3, r2
 8003342:	431f      	orrs	r7, r3
 8003344:	e604      	b.n	8002f50 <__aeabi_dsub+0xb0>
 8003346:	1aeb      	subs	r3, r5, r3
 8003348:	4d9b      	ldr	r5, [pc, #620]	@ (80035b8 <__aeabi_dsub+0x718>)
 800334a:	4015      	ands	r5, r2
 800334c:	076f      	lsls	r7, r5, #29
 800334e:	08ed      	lsrs	r5, r5, #3
 8003350:	032c      	lsls	r4, r5, #12
 8003352:	055d      	lsls	r5, r3, #21
 8003354:	0b24      	lsrs	r4, r4, #12
 8003356:	0d6d      	lsrs	r5, r5, #21
 8003358:	e736      	b.n	80031c8 <__aeabi_dsub+0x328>
 800335a:	4d95      	ldr	r5, [pc, #596]	@ (80035b0 <__aeabi_dsub+0x710>)
 800335c:	42ab      	cmp	r3, r5
 800335e:	d100      	bne.n	8003362 <__aeabi_dsub+0x4c2>
 8003360:	e0d6      	b.n	8003510 <__aeabi_dsub+0x670>
 8003362:	1882      	adds	r2, r0, r2
 8003364:	0021      	movs	r1, r4
 8003366:	4282      	cmp	r2, r0
 8003368:	4180      	sbcs	r0, r0
 800336a:	4459      	add	r1, fp
 800336c:	4240      	negs	r0, r0
 800336e:	1808      	adds	r0, r1, r0
 8003370:	07c7      	lsls	r7, r0, #31
 8003372:	0852      	lsrs	r2, r2, #1
 8003374:	4317      	orrs	r7, r2
 8003376:	0844      	lsrs	r4, r0, #1
 8003378:	0752      	lsls	r2, r2, #29
 800337a:	d400      	bmi.n	800337e <__aeabi_dsub+0x4de>
 800337c:	e185      	b.n	800368a <__aeabi_dsub+0x7ea>
 800337e:	220f      	movs	r2, #15
 8003380:	001d      	movs	r5, r3
 8003382:	403a      	ands	r2, r7
 8003384:	2a04      	cmp	r2, #4
 8003386:	d000      	beq.n	800338a <__aeabi_dsub+0x4ea>
 8003388:	e61a      	b.n	8002fc0 <__aeabi_dsub+0x120>
 800338a:	08ff      	lsrs	r7, r7, #3
 800338c:	0764      	lsls	r4, r4, #29
 800338e:	4327      	orrs	r7, r4
 8003390:	0905      	lsrs	r5, r0, #4
 8003392:	e7dd      	b.n	8003350 <__aeabi_dsub+0x4b0>
 8003394:	465b      	mov	r3, fp
 8003396:	08d2      	lsrs	r2, r2, #3
 8003398:	075f      	lsls	r7, r3, #29
 800339a:	4317      	orrs	r7, r2
 800339c:	08dd      	lsrs	r5, r3, #3
 800339e:	e67b      	b.n	8003098 <__aeabi_dsub+0x1f8>
 80033a0:	2700      	movs	r7, #0
 80033a2:	2400      	movs	r4, #0
 80033a4:	e710      	b.n	80031c8 <__aeabi_dsub+0x328>
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d000      	beq.n	80033ac <__aeabi_dsub+0x50c>
 80033aa:	e0d6      	b.n	800355a <__aeabi_dsub+0x6ba>
 80033ac:	2900      	cmp	r1, #0
 80033ae:	d000      	beq.n	80033b2 <__aeabi_dsub+0x512>
 80033b0:	e12f      	b.n	8003612 <__aeabi_dsub+0x772>
 80033b2:	2480      	movs	r4, #128	@ 0x80
 80033b4:	2600      	movs	r6, #0
 80033b6:	4d7e      	ldr	r5, [pc, #504]	@ (80035b0 <__aeabi_dsub+0x710>)
 80033b8:	0324      	lsls	r4, r4, #12
 80033ba:	e705      	b.n	80031c8 <__aeabi_dsub+0x328>
 80033bc:	4666      	mov	r6, ip
 80033be:	465c      	mov	r4, fp
 80033c0:	08d0      	lsrs	r0, r2, #3
 80033c2:	e717      	b.n	80031f4 <__aeabi_dsub+0x354>
 80033c4:	465b      	mov	r3, fp
 80033c6:	1a17      	subs	r7, r2, r0
 80033c8:	42ba      	cmp	r2, r7
 80033ca:	4192      	sbcs	r2, r2
 80033cc:	1b1c      	subs	r4, r3, r4
 80033ce:	2601      	movs	r6, #1
 80033d0:	4663      	mov	r3, ip
 80033d2:	4252      	negs	r2, r2
 80033d4:	1aa4      	subs	r4, r4, r2
 80033d6:	401e      	ands	r6, r3
 80033d8:	e5c4      	b.n	8002f64 <__aeabi_dsub+0xc4>
 80033da:	1883      	adds	r3, r0, r2
 80033dc:	4283      	cmp	r3, r0
 80033de:	4180      	sbcs	r0, r0
 80033e0:	445c      	add	r4, fp
 80033e2:	4240      	negs	r0, r0
 80033e4:	1825      	adds	r5, r4, r0
 80033e6:	022a      	lsls	r2, r5, #8
 80033e8:	d400      	bmi.n	80033ec <__aeabi_dsub+0x54c>
 80033ea:	e0da      	b.n	80035a2 <__aeabi_dsub+0x702>
 80033ec:	4a72      	ldr	r2, [pc, #456]	@ (80035b8 <__aeabi_dsub+0x718>)
 80033ee:	085b      	lsrs	r3, r3, #1
 80033f0:	4015      	ands	r5, r2
 80033f2:	07ea      	lsls	r2, r5, #31
 80033f4:	431a      	orrs	r2, r3
 80033f6:	0869      	lsrs	r1, r5, #1
 80033f8:	075b      	lsls	r3, r3, #29
 80033fa:	d400      	bmi.n	80033fe <__aeabi_dsub+0x55e>
 80033fc:	e14a      	b.n	8003694 <__aeabi_dsub+0x7f4>
 80033fe:	230f      	movs	r3, #15
 8003400:	4013      	ands	r3, r2
 8003402:	2b04      	cmp	r3, #4
 8003404:	d100      	bne.n	8003408 <__aeabi_dsub+0x568>
 8003406:	e0fc      	b.n	8003602 <__aeabi_dsub+0x762>
 8003408:	1d17      	adds	r7, r2, #4
 800340a:	4297      	cmp	r7, r2
 800340c:	41a4      	sbcs	r4, r4
 800340e:	4264      	negs	r4, r4
 8003410:	2502      	movs	r5, #2
 8003412:	1864      	adds	r4, r4, r1
 8003414:	e6ec      	b.n	80031f0 <__aeabi_dsub+0x350>
 8003416:	4647      	mov	r7, r8
 8003418:	001c      	movs	r4, r3
 800341a:	431f      	orrs	r7, r3
 800341c:	d000      	beq.n	8003420 <__aeabi_dsub+0x580>
 800341e:	e743      	b.n	80032a8 <__aeabi_dsub+0x408>
 8003420:	2600      	movs	r6, #0
 8003422:	2500      	movs	r5, #0
 8003424:	2400      	movs	r4, #0
 8003426:	e6cf      	b.n	80031c8 <__aeabi_dsub+0x328>
 8003428:	08c0      	lsrs	r0, r0, #3
 800342a:	0767      	lsls	r7, r4, #29
 800342c:	4307      	orrs	r7, r0
 800342e:	08e5      	lsrs	r5, r4, #3
 8003430:	e632      	b.n	8003098 <__aeabi_dsub+0x1f8>
 8003432:	1a87      	subs	r7, r0, r2
 8003434:	465b      	mov	r3, fp
 8003436:	42b8      	cmp	r0, r7
 8003438:	4180      	sbcs	r0, r0
 800343a:	1ae4      	subs	r4, r4, r3
 800343c:	4240      	negs	r0, r0
 800343e:	1a24      	subs	r4, r4, r0
 8003440:	0223      	lsls	r3, r4, #8
 8003442:	d428      	bmi.n	8003496 <__aeabi_dsub+0x5f6>
 8003444:	0763      	lsls	r3, r4, #29
 8003446:	08ff      	lsrs	r7, r7, #3
 8003448:	431f      	orrs	r7, r3
 800344a:	08e5      	lsrs	r5, r4, #3
 800344c:	2301      	movs	r3, #1
 800344e:	e77f      	b.n	8003350 <__aeabi_dsub+0x4b0>
 8003450:	2b00      	cmp	r3, #0
 8003452:	d100      	bne.n	8003456 <__aeabi_dsub+0x5b6>
 8003454:	e673      	b.n	800313e <__aeabi_dsub+0x29e>
 8003456:	464b      	mov	r3, r9
 8003458:	1b5f      	subs	r7, r3, r5
 800345a:	003b      	movs	r3, r7
 800345c:	2d00      	cmp	r5, #0
 800345e:	d100      	bne.n	8003462 <__aeabi_dsub+0x5c2>
 8003460:	e742      	b.n	80032e8 <__aeabi_dsub+0x448>
 8003462:	2f38      	cmp	r7, #56	@ 0x38
 8003464:	dd00      	ble.n	8003468 <__aeabi_dsub+0x5c8>
 8003466:	e0ec      	b.n	8003642 <__aeabi_dsub+0x7a2>
 8003468:	2380      	movs	r3, #128	@ 0x80
 800346a:	000e      	movs	r6, r1
 800346c:	041b      	lsls	r3, r3, #16
 800346e:	431c      	orrs	r4, r3
 8003470:	2f1f      	cmp	r7, #31
 8003472:	dc25      	bgt.n	80034c0 <__aeabi_dsub+0x620>
 8003474:	2520      	movs	r5, #32
 8003476:	0023      	movs	r3, r4
 8003478:	1bed      	subs	r5, r5, r7
 800347a:	0001      	movs	r1, r0
 800347c:	40a8      	lsls	r0, r5
 800347e:	40ab      	lsls	r3, r5
 8003480:	40f9      	lsrs	r1, r7
 8003482:	1e45      	subs	r5, r0, #1
 8003484:	41a8      	sbcs	r0, r5
 8003486:	430b      	orrs	r3, r1
 8003488:	40fc      	lsrs	r4, r7
 800348a:	4318      	orrs	r0, r3
 800348c:	465b      	mov	r3, fp
 800348e:	1b1b      	subs	r3, r3, r4
 8003490:	469b      	mov	fp, r3
 8003492:	e739      	b.n	8003308 <__aeabi_dsub+0x468>
 8003494:	4666      	mov	r6, ip
 8003496:	2501      	movs	r5, #1
 8003498:	e562      	b.n	8002f60 <__aeabi_dsub+0xc0>
 800349a:	001f      	movs	r7, r3
 800349c:	4659      	mov	r1, fp
 800349e:	3f20      	subs	r7, #32
 80034a0:	40f9      	lsrs	r1, r7
 80034a2:	468c      	mov	ip, r1
 80034a4:	2b20      	cmp	r3, #32
 80034a6:	d005      	beq.n	80034b4 <__aeabi_dsub+0x614>
 80034a8:	2740      	movs	r7, #64	@ 0x40
 80034aa:	4659      	mov	r1, fp
 80034ac:	1afb      	subs	r3, r7, r3
 80034ae:	4099      	lsls	r1, r3
 80034b0:	430a      	orrs	r2, r1
 80034b2:	4692      	mov	sl, r2
 80034b4:	4657      	mov	r7, sl
 80034b6:	1e7b      	subs	r3, r7, #1
 80034b8:	419f      	sbcs	r7, r3
 80034ba:	4663      	mov	r3, ip
 80034bc:	431f      	orrs	r7, r3
 80034be:	e5c1      	b.n	8003044 <__aeabi_dsub+0x1a4>
 80034c0:	003b      	movs	r3, r7
 80034c2:	0025      	movs	r5, r4
 80034c4:	3b20      	subs	r3, #32
 80034c6:	40dd      	lsrs	r5, r3
 80034c8:	2f20      	cmp	r7, #32
 80034ca:	d004      	beq.n	80034d6 <__aeabi_dsub+0x636>
 80034cc:	2340      	movs	r3, #64	@ 0x40
 80034ce:	1bdb      	subs	r3, r3, r7
 80034d0:	409c      	lsls	r4, r3
 80034d2:	4320      	orrs	r0, r4
 80034d4:	4680      	mov	r8, r0
 80034d6:	4640      	mov	r0, r8
 80034d8:	1e43      	subs	r3, r0, #1
 80034da:	4198      	sbcs	r0, r3
 80034dc:	4328      	orrs	r0, r5
 80034de:	e713      	b.n	8003308 <__aeabi_dsub+0x468>
 80034e0:	2900      	cmp	r1, #0
 80034e2:	d09d      	beq.n	8003420 <__aeabi_dsub+0x580>
 80034e4:	2601      	movs	r6, #1
 80034e6:	4663      	mov	r3, ip
 80034e8:	465c      	mov	r4, fp
 80034ea:	4690      	mov	r8, r2
 80034ec:	401e      	ands	r6, r3
 80034ee:	e6db      	b.n	80032a8 <__aeabi_dsub+0x408>
 80034f0:	1a17      	subs	r7, r2, r0
 80034f2:	465b      	mov	r3, fp
 80034f4:	42ba      	cmp	r2, r7
 80034f6:	4192      	sbcs	r2, r2
 80034f8:	1b1c      	subs	r4, r3, r4
 80034fa:	4252      	negs	r2, r2
 80034fc:	1aa4      	subs	r4, r4, r2
 80034fe:	0223      	lsls	r3, r4, #8
 8003500:	d4c8      	bmi.n	8003494 <__aeabi_dsub+0x5f4>
 8003502:	0763      	lsls	r3, r4, #29
 8003504:	08ff      	lsrs	r7, r7, #3
 8003506:	431f      	orrs	r7, r3
 8003508:	4666      	mov	r6, ip
 800350a:	2301      	movs	r3, #1
 800350c:	08e5      	lsrs	r5, r4, #3
 800350e:	e71f      	b.n	8003350 <__aeabi_dsub+0x4b0>
 8003510:	001d      	movs	r5, r3
 8003512:	2400      	movs	r4, #0
 8003514:	2700      	movs	r7, #0
 8003516:	e657      	b.n	80031c8 <__aeabi_dsub+0x328>
 8003518:	465c      	mov	r4, fp
 800351a:	08d0      	lsrs	r0, r2, #3
 800351c:	e66a      	b.n	80031f4 <__aeabi_dsub+0x354>
 800351e:	2b00      	cmp	r3, #0
 8003520:	d100      	bne.n	8003524 <__aeabi_dsub+0x684>
 8003522:	e737      	b.n	8003394 <__aeabi_dsub+0x4f4>
 8003524:	4653      	mov	r3, sl
 8003526:	08c0      	lsrs	r0, r0, #3
 8003528:	0767      	lsls	r7, r4, #29
 800352a:	4307      	orrs	r7, r0
 800352c:	08e5      	lsrs	r5, r4, #3
 800352e:	2b00      	cmp	r3, #0
 8003530:	d100      	bne.n	8003534 <__aeabi_dsub+0x694>
 8003532:	e5b1      	b.n	8003098 <__aeabi_dsub+0x1f8>
 8003534:	2380      	movs	r3, #128	@ 0x80
 8003536:	031b      	lsls	r3, r3, #12
 8003538:	421d      	tst	r5, r3
 800353a:	d008      	beq.n	800354e <__aeabi_dsub+0x6ae>
 800353c:	4659      	mov	r1, fp
 800353e:	08c8      	lsrs	r0, r1, #3
 8003540:	4218      	tst	r0, r3
 8003542:	d104      	bne.n	800354e <__aeabi_dsub+0x6ae>
 8003544:	08d2      	lsrs	r2, r2, #3
 8003546:	0749      	lsls	r1, r1, #29
 8003548:	430a      	orrs	r2, r1
 800354a:	0017      	movs	r7, r2
 800354c:	0005      	movs	r5, r0
 800354e:	0f7b      	lsrs	r3, r7, #29
 8003550:	00ff      	lsls	r7, r7, #3
 8003552:	08ff      	lsrs	r7, r7, #3
 8003554:	075b      	lsls	r3, r3, #29
 8003556:	431f      	orrs	r7, r3
 8003558:	e59e      	b.n	8003098 <__aeabi_dsub+0x1f8>
 800355a:	08c0      	lsrs	r0, r0, #3
 800355c:	0763      	lsls	r3, r4, #29
 800355e:	4318      	orrs	r0, r3
 8003560:	08e5      	lsrs	r5, r4, #3
 8003562:	2900      	cmp	r1, #0
 8003564:	d053      	beq.n	800360e <__aeabi_dsub+0x76e>
 8003566:	2380      	movs	r3, #128	@ 0x80
 8003568:	031b      	lsls	r3, r3, #12
 800356a:	421d      	tst	r5, r3
 800356c:	d00a      	beq.n	8003584 <__aeabi_dsub+0x6e4>
 800356e:	4659      	mov	r1, fp
 8003570:	08cc      	lsrs	r4, r1, #3
 8003572:	421c      	tst	r4, r3
 8003574:	d106      	bne.n	8003584 <__aeabi_dsub+0x6e4>
 8003576:	2601      	movs	r6, #1
 8003578:	4663      	mov	r3, ip
 800357a:	0025      	movs	r5, r4
 800357c:	08d0      	lsrs	r0, r2, #3
 800357e:	0749      	lsls	r1, r1, #29
 8003580:	4308      	orrs	r0, r1
 8003582:	401e      	ands	r6, r3
 8003584:	0f47      	lsrs	r7, r0, #29
 8003586:	00c0      	lsls	r0, r0, #3
 8003588:	08c0      	lsrs	r0, r0, #3
 800358a:	077f      	lsls	r7, r7, #29
 800358c:	4307      	orrs	r7, r0
 800358e:	e583      	b.n	8003098 <__aeabi_dsub+0x1f8>
 8003590:	1883      	adds	r3, r0, r2
 8003592:	4293      	cmp	r3, r2
 8003594:	4192      	sbcs	r2, r2
 8003596:	445c      	add	r4, fp
 8003598:	4252      	negs	r2, r2
 800359a:	18a5      	adds	r5, r4, r2
 800359c:	022a      	lsls	r2, r5, #8
 800359e:	d500      	bpl.n	80035a2 <__aeabi_dsub+0x702>
 80035a0:	e724      	b.n	80033ec <__aeabi_dsub+0x54c>
 80035a2:	076f      	lsls	r7, r5, #29
 80035a4:	08db      	lsrs	r3, r3, #3
 80035a6:	431f      	orrs	r7, r3
 80035a8:	08ed      	lsrs	r5, r5, #3
 80035aa:	2301      	movs	r3, #1
 80035ac:	e6d0      	b.n	8003350 <__aeabi_dsub+0x4b0>
 80035ae:	46c0      	nop			@ (mov r8, r8)
 80035b0:	000007ff 	.word	0x000007ff
 80035b4:	000007fe 	.word	0x000007fe
 80035b8:	ff7fffff 	.word	0xff7fffff
 80035bc:	465b      	mov	r3, fp
 80035be:	08d2      	lsrs	r2, r2, #3
 80035c0:	075f      	lsls	r7, r3, #29
 80035c2:	4666      	mov	r6, ip
 80035c4:	4317      	orrs	r7, r2
 80035c6:	08dd      	lsrs	r5, r3, #3
 80035c8:	e566      	b.n	8003098 <__aeabi_dsub+0x1f8>
 80035ca:	0025      	movs	r5, r4
 80035cc:	3b20      	subs	r3, #32
 80035ce:	40dd      	lsrs	r5, r3
 80035d0:	4663      	mov	r3, ip
 80035d2:	2b20      	cmp	r3, #32
 80035d4:	d005      	beq.n	80035e2 <__aeabi_dsub+0x742>
 80035d6:	2340      	movs	r3, #64	@ 0x40
 80035d8:	4661      	mov	r1, ip
 80035da:	1a5b      	subs	r3, r3, r1
 80035dc:	409c      	lsls	r4, r3
 80035de:	4320      	orrs	r0, r4
 80035e0:	4680      	mov	r8, r0
 80035e2:	4647      	mov	r7, r8
 80035e4:	1e7b      	subs	r3, r7, #1
 80035e6:	419f      	sbcs	r7, r3
 80035e8:	432f      	orrs	r7, r5
 80035ea:	e5a0      	b.n	800312e <__aeabi_dsub+0x28e>
 80035ec:	2120      	movs	r1, #32
 80035ee:	2700      	movs	r7, #0
 80035f0:	1a09      	subs	r1, r1, r0
 80035f2:	e4d2      	b.n	8002f9a <__aeabi_dsub+0xfa>
 80035f4:	2f00      	cmp	r7, #0
 80035f6:	d100      	bne.n	80035fa <__aeabi_dsub+0x75a>
 80035f8:	e713      	b.n	8003422 <__aeabi_dsub+0x582>
 80035fa:	465c      	mov	r4, fp
 80035fc:	0017      	movs	r7, r2
 80035fe:	2500      	movs	r5, #0
 8003600:	e5f6      	b.n	80031f0 <__aeabi_dsub+0x350>
 8003602:	08d7      	lsrs	r7, r2, #3
 8003604:	0749      	lsls	r1, r1, #29
 8003606:	2302      	movs	r3, #2
 8003608:	430f      	orrs	r7, r1
 800360a:	092d      	lsrs	r5, r5, #4
 800360c:	e6a0      	b.n	8003350 <__aeabi_dsub+0x4b0>
 800360e:	0007      	movs	r7, r0
 8003610:	e542      	b.n	8003098 <__aeabi_dsub+0x1f8>
 8003612:	465b      	mov	r3, fp
 8003614:	2601      	movs	r6, #1
 8003616:	075f      	lsls	r7, r3, #29
 8003618:	08dd      	lsrs	r5, r3, #3
 800361a:	4663      	mov	r3, ip
 800361c:	08d2      	lsrs	r2, r2, #3
 800361e:	4317      	orrs	r7, r2
 8003620:	401e      	ands	r6, r3
 8003622:	e539      	b.n	8003098 <__aeabi_dsub+0x1f8>
 8003624:	465b      	mov	r3, fp
 8003626:	08d2      	lsrs	r2, r2, #3
 8003628:	075f      	lsls	r7, r3, #29
 800362a:	4317      	orrs	r7, r2
 800362c:	08dd      	lsrs	r5, r3, #3
 800362e:	e533      	b.n	8003098 <__aeabi_dsub+0x1f8>
 8003630:	4a1e      	ldr	r2, [pc, #120]	@ (80036ac <__aeabi_dsub+0x80c>)
 8003632:	08db      	lsrs	r3, r3, #3
 8003634:	4022      	ands	r2, r4
 8003636:	0757      	lsls	r7, r2, #29
 8003638:	0252      	lsls	r2, r2, #9
 800363a:	2501      	movs	r5, #1
 800363c:	431f      	orrs	r7, r3
 800363e:	0b14      	lsrs	r4, r2, #12
 8003640:	e5c2      	b.n	80031c8 <__aeabi_dsub+0x328>
 8003642:	000e      	movs	r6, r1
 8003644:	2001      	movs	r0, #1
 8003646:	e65f      	b.n	8003308 <__aeabi_dsub+0x468>
 8003648:	2b00      	cmp	r3, #0
 800364a:	d00d      	beq.n	8003668 <__aeabi_dsub+0x7c8>
 800364c:	464b      	mov	r3, r9
 800364e:	1b5b      	subs	r3, r3, r5
 8003650:	469c      	mov	ip, r3
 8003652:	2d00      	cmp	r5, #0
 8003654:	d100      	bne.n	8003658 <__aeabi_dsub+0x7b8>
 8003656:	e548      	b.n	80030ea <__aeabi_dsub+0x24a>
 8003658:	2701      	movs	r7, #1
 800365a:	2b38      	cmp	r3, #56	@ 0x38
 800365c:	dd00      	ble.n	8003660 <__aeabi_dsub+0x7c0>
 800365e:	e566      	b.n	800312e <__aeabi_dsub+0x28e>
 8003660:	2380      	movs	r3, #128	@ 0x80
 8003662:	041b      	lsls	r3, r3, #16
 8003664:	431c      	orrs	r4, r3
 8003666:	e550      	b.n	800310a <__aeabi_dsub+0x26a>
 8003668:	1c6b      	adds	r3, r5, #1
 800366a:	4d11      	ldr	r5, [pc, #68]	@ (80036b0 <__aeabi_dsub+0x810>)
 800366c:	422b      	tst	r3, r5
 800366e:	d000      	beq.n	8003672 <__aeabi_dsub+0x7d2>
 8003670:	e673      	b.n	800335a <__aeabi_dsub+0x4ba>
 8003672:	4659      	mov	r1, fp
 8003674:	0023      	movs	r3, r4
 8003676:	4311      	orrs	r1, r2
 8003678:	468a      	mov	sl, r1
 800367a:	4303      	orrs	r3, r0
 800367c:	e600      	b.n	8003280 <__aeabi_dsub+0x3e0>
 800367e:	0767      	lsls	r7, r4, #29
 8003680:	08c0      	lsrs	r0, r0, #3
 8003682:	2300      	movs	r3, #0
 8003684:	4307      	orrs	r7, r0
 8003686:	08e5      	lsrs	r5, r4, #3
 8003688:	e662      	b.n	8003350 <__aeabi_dsub+0x4b0>
 800368a:	0764      	lsls	r4, r4, #29
 800368c:	08ff      	lsrs	r7, r7, #3
 800368e:	4327      	orrs	r7, r4
 8003690:	0905      	lsrs	r5, r0, #4
 8003692:	e65d      	b.n	8003350 <__aeabi_dsub+0x4b0>
 8003694:	08d2      	lsrs	r2, r2, #3
 8003696:	0749      	lsls	r1, r1, #29
 8003698:	4311      	orrs	r1, r2
 800369a:	000f      	movs	r7, r1
 800369c:	2302      	movs	r3, #2
 800369e:	092d      	lsrs	r5, r5, #4
 80036a0:	e656      	b.n	8003350 <__aeabi_dsub+0x4b0>
 80036a2:	0007      	movs	r7, r0
 80036a4:	e5a4      	b.n	80031f0 <__aeabi_dsub+0x350>
 80036a6:	0038      	movs	r0, r7
 80036a8:	e48f      	b.n	8002fca <__aeabi_dsub+0x12a>
 80036aa:	46c0      	nop			@ (mov r8, r8)
 80036ac:	ff7fffff 	.word	0xff7fffff
 80036b0:	000007fe 	.word	0x000007fe

080036b4 <__aeabi_dcmpun>:
 80036b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036b6:	46c6      	mov	lr, r8
 80036b8:	031e      	lsls	r6, r3, #12
 80036ba:	0b36      	lsrs	r6, r6, #12
 80036bc:	46b0      	mov	r8, r6
 80036be:	4e0d      	ldr	r6, [pc, #52]	@ (80036f4 <__aeabi_dcmpun+0x40>)
 80036c0:	030c      	lsls	r4, r1, #12
 80036c2:	004d      	lsls	r5, r1, #1
 80036c4:	005f      	lsls	r7, r3, #1
 80036c6:	b500      	push	{lr}
 80036c8:	0b24      	lsrs	r4, r4, #12
 80036ca:	0d6d      	lsrs	r5, r5, #21
 80036cc:	0d7f      	lsrs	r7, r7, #21
 80036ce:	42b5      	cmp	r5, r6
 80036d0:	d00b      	beq.n	80036ea <__aeabi_dcmpun+0x36>
 80036d2:	4908      	ldr	r1, [pc, #32]	@ (80036f4 <__aeabi_dcmpun+0x40>)
 80036d4:	2000      	movs	r0, #0
 80036d6:	428f      	cmp	r7, r1
 80036d8:	d104      	bne.n	80036e4 <__aeabi_dcmpun+0x30>
 80036da:	4646      	mov	r6, r8
 80036dc:	4316      	orrs	r6, r2
 80036de:	0030      	movs	r0, r6
 80036e0:	1e43      	subs	r3, r0, #1
 80036e2:	4198      	sbcs	r0, r3
 80036e4:	bc80      	pop	{r7}
 80036e6:	46b8      	mov	r8, r7
 80036e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036ea:	4304      	orrs	r4, r0
 80036ec:	2001      	movs	r0, #1
 80036ee:	2c00      	cmp	r4, #0
 80036f0:	d1f8      	bne.n	80036e4 <__aeabi_dcmpun+0x30>
 80036f2:	e7ee      	b.n	80036d2 <__aeabi_dcmpun+0x1e>
 80036f4:	000007ff 	.word	0x000007ff

080036f8 <__aeabi_d2iz>:
 80036f8:	000b      	movs	r3, r1
 80036fa:	0002      	movs	r2, r0
 80036fc:	b570      	push	{r4, r5, r6, lr}
 80036fe:	4d16      	ldr	r5, [pc, #88]	@ (8003758 <__aeabi_d2iz+0x60>)
 8003700:	030c      	lsls	r4, r1, #12
 8003702:	b082      	sub	sp, #8
 8003704:	0049      	lsls	r1, r1, #1
 8003706:	2000      	movs	r0, #0
 8003708:	9200      	str	r2, [sp, #0]
 800370a:	9301      	str	r3, [sp, #4]
 800370c:	0b24      	lsrs	r4, r4, #12
 800370e:	0d49      	lsrs	r1, r1, #21
 8003710:	0fde      	lsrs	r6, r3, #31
 8003712:	42a9      	cmp	r1, r5
 8003714:	dd04      	ble.n	8003720 <__aeabi_d2iz+0x28>
 8003716:	4811      	ldr	r0, [pc, #68]	@ (800375c <__aeabi_d2iz+0x64>)
 8003718:	4281      	cmp	r1, r0
 800371a:	dd03      	ble.n	8003724 <__aeabi_d2iz+0x2c>
 800371c:	4b10      	ldr	r3, [pc, #64]	@ (8003760 <__aeabi_d2iz+0x68>)
 800371e:	18f0      	adds	r0, r6, r3
 8003720:	b002      	add	sp, #8
 8003722:	bd70      	pop	{r4, r5, r6, pc}
 8003724:	2080      	movs	r0, #128	@ 0x80
 8003726:	0340      	lsls	r0, r0, #13
 8003728:	4320      	orrs	r0, r4
 800372a:	4c0e      	ldr	r4, [pc, #56]	@ (8003764 <__aeabi_d2iz+0x6c>)
 800372c:	1a64      	subs	r4, r4, r1
 800372e:	2c1f      	cmp	r4, #31
 8003730:	dd08      	ble.n	8003744 <__aeabi_d2iz+0x4c>
 8003732:	4b0d      	ldr	r3, [pc, #52]	@ (8003768 <__aeabi_d2iz+0x70>)
 8003734:	1a5b      	subs	r3, r3, r1
 8003736:	40d8      	lsrs	r0, r3
 8003738:	0003      	movs	r3, r0
 800373a:	4258      	negs	r0, r3
 800373c:	2e00      	cmp	r6, #0
 800373e:	d1ef      	bne.n	8003720 <__aeabi_d2iz+0x28>
 8003740:	0018      	movs	r0, r3
 8003742:	e7ed      	b.n	8003720 <__aeabi_d2iz+0x28>
 8003744:	4b09      	ldr	r3, [pc, #36]	@ (800376c <__aeabi_d2iz+0x74>)
 8003746:	9a00      	ldr	r2, [sp, #0]
 8003748:	469c      	mov	ip, r3
 800374a:	0003      	movs	r3, r0
 800374c:	4461      	add	r1, ip
 800374e:	408b      	lsls	r3, r1
 8003750:	40e2      	lsrs	r2, r4
 8003752:	4313      	orrs	r3, r2
 8003754:	e7f1      	b.n	800373a <__aeabi_d2iz+0x42>
 8003756:	46c0      	nop			@ (mov r8, r8)
 8003758:	000003fe 	.word	0x000003fe
 800375c:	0000041d 	.word	0x0000041d
 8003760:	7fffffff 	.word	0x7fffffff
 8003764:	00000433 	.word	0x00000433
 8003768:	00000413 	.word	0x00000413
 800376c:	fffffbed 	.word	0xfffffbed

08003770 <__aeabi_i2d>:
 8003770:	b570      	push	{r4, r5, r6, lr}
 8003772:	2800      	cmp	r0, #0
 8003774:	d016      	beq.n	80037a4 <__aeabi_i2d+0x34>
 8003776:	17c3      	asrs	r3, r0, #31
 8003778:	18c5      	adds	r5, r0, r3
 800377a:	405d      	eors	r5, r3
 800377c:	0fc4      	lsrs	r4, r0, #31
 800377e:	0028      	movs	r0, r5
 8003780:	f000 f912 	bl	80039a8 <__clzsi2>
 8003784:	4b10      	ldr	r3, [pc, #64]	@ (80037c8 <__aeabi_i2d+0x58>)
 8003786:	1a1b      	subs	r3, r3, r0
 8003788:	055b      	lsls	r3, r3, #21
 800378a:	0d5b      	lsrs	r3, r3, #21
 800378c:	280a      	cmp	r0, #10
 800378e:	dc14      	bgt.n	80037ba <__aeabi_i2d+0x4a>
 8003790:	0002      	movs	r2, r0
 8003792:	002e      	movs	r6, r5
 8003794:	3215      	adds	r2, #21
 8003796:	4096      	lsls	r6, r2
 8003798:	220b      	movs	r2, #11
 800379a:	1a12      	subs	r2, r2, r0
 800379c:	40d5      	lsrs	r5, r2
 800379e:	032d      	lsls	r5, r5, #12
 80037a0:	0b2d      	lsrs	r5, r5, #12
 80037a2:	e003      	b.n	80037ac <__aeabi_i2d+0x3c>
 80037a4:	2400      	movs	r4, #0
 80037a6:	2300      	movs	r3, #0
 80037a8:	2500      	movs	r5, #0
 80037aa:	2600      	movs	r6, #0
 80037ac:	051b      	lsls	r3, r3, #20
 80037ae:	432b      	orrs	r3, r5
 80037b0:	07e4      	lsls	r4, r4, #31
 80037b2:	4323      	orrs	r3, r4
 80037b4:	0030      	movs	r0, r6
 80037b6:	0019      	movs	r1, r3
 80037b8:	bd70      	pop	{r4, r5, r6, pc}
 80037ba:	380b      	subs	r0, #11
 80037bc:	4085      	lsls	r5, r0
 80037be:	032d      	lsls	r5, r5, #12
 80037c0:	2600      	movs	r6, #0
 80037c2:	0b2d      	lsrs	r5, r5, #12
 80037c4:	e7f2      	b.n	80037ac <__aeabi_i2d+0x3c>
 80037c6:	46c0      	nop			@ (mov r8, r8)
 80037c8:	0000041e 	.word	0x0000041e

080037cc <__aeabi_ui2d>:
 80037cc:	b510      	push	{r4, lr}
 80037ce:	1e04      	subs	r4, r0, #0
 80037d0:	d010      	beq.n	80037f4 <__aeabi_ui2d+0x28>
 80037d2:	f000 f8e9 	bl	80039a8 <__clzsi2>
 80037d6:	4b0e      	ldr	r3, [pc, #56]	@ (8003810 <__aeabi_ui2d+0x44>)
 80037d8:	1a1b      	subs	r3, r3, r0
 80037da:	055b      	lsls	r3, r3, #21
 80037dc:	0d5b      	lsrs	r3, r3, #21
 80037de:	280a      	cmp	r0, #10
 80037e0:	dc0f      	bgt.n	8003802 <__aeabi_ui2d+0x36>
 80037e2:	220b      	movs	r2, #11
 80037e4:	0021      	movs	r1, r4
 80037e6:	1a12      	subs	r2, r2, r0
 80037e8:	40d1      	lsrs	r1, r2
 80037ea:	3015      	adds	r0, #21
 80037ec:	030a      	lsls	r2, r1, #12
 80037ee:	4084      	lsls	r4, r0
 80037f0:	0b12      	lsrs	r2, r2, #12
 80037f2:	e001      	b.n	80037f8 <__aeabi_ui2d+0x2c>
 80037f4:	2300      	movs	r3, #0
 80037f6:	2200      	movs	r2, #0
 80037f8:	051b      	lsls	r3, r3, #20
 80037fa:	4313      	orrs	r3, r2
 80037fc:	0020      	movs	r0, r4
 80037fe:	0019      	movs	r1, r3
 8003800:	bd10      	pop	{r4, pc}
 8003802:	0022      	movs	r2, r4
 8003804:	380b      	subs	r0, #11
 8003806:	4082      	lsls	r2, r0
 8003808:	0312      	lsls	r2, r2, #12
 800380a:	2400      	movs	r4, #0
 800380c:	0b12      	lsrs	r2, r2, #12
 800380e:	e7f3      	b.n	80037f8 <__aeabi_ui2d+0x2c>
 8003810:	0000041e 	.word	0x0000041e

08003814 <__aeabi_f2d>:
 8003814:	b570      	push	{r4, r5, r6, lr}
 8003816:	0242      	lsls	r2, r0, #9
 8003818:	0043      	lsls	r3, r0, #1
 800381a:	0fc4      	lsrs	r4, r0, #31
 800381c:	20fe      	movs	r0, #254	@ 0xfe
 800381e:	0e1b      	lsrs	r3, r3, #24
 8003820:	1c59      	adds	r1, r3, #1
 8003822:	0a55      	lsrs	r5, r2, #9
 8003824:	4208      	tst	r0, r1
 8003826:	d00c      	beq.n	8003842 <__aeabi_f2d+0x2e>
 8003828:	21e0      	movs	r1, #224	@ 0xe0
 800382a:	0089      	lsls	r1, r1, #2
 800382c:	468c      	mov	ip, r1
 800382e:	076d      	lsls	r5, r5, #29
 8003830:	0b12      	lsrs	r2, r2, #12
 8003832:	4463      	add	r3, ip
 8003834:	051b      	lsls	r3, r3, #20
 8003836:	4313      	orrs	r3, r2
 8003838:	07e4      	lsls	r4, r4, #31
 800383a:	4323      	orrs	r3, r4
 800383c:	0028      	movs	r0, r5
 800383e:	0019      	movs	r1, r3
 8003840:	bd70      	pop	{r4, r5, r6, pc}
 8003842:	2b00      	cmp	r3, #0
 8003844:	d114      	bne.n	8003870 <__aeabi_f2d+0x5c>
 8003846:	2d00      	cmp	r5, #0
 8003848:	d01b      	beq.n	8003882 <__aeabi_f2d+0x6e>
 800384a:	0028      	movs	r0, r5
 800384c:	f000 f8ac 	bl	80039a8 <__clzsi2>
 8003850:	280a      	cmp	r0, #10
 8003852:	dc1c      	bgt.n	800388e <__aeabi_f2d+0x7a>
 8003854:	230b      	movs	r3, #11
 8003856:	002a      	movs	r2, r5
 8003858:	1a1b      	subs	r3, r3, r0
 800385a:	40da      	lsrs	r2, r3
 800385c:	0003      	movs	r3, r0
 800385e:	3315      	adds	r3, #21
 8003860:	409d      	lsls	r5, r3
 8003862:	4b0e      	ldr	r3, [pc, #56]	@ (800389c <__aeabi_f2d+0x88>)
 8003864:	0312      	lsls	r2, r2, #12
 8003866:	1a1b      	subs	r3, r3, r0
 8003868:	055b      	lsls	r3, r3, #21
 800386a:	0b12      	lsrs	r2, r2, #12
 800386c:	0d5b      	lsrs	r3, r3, #21
 800386e:	e7e1      	b.n	8003834 <__aeabi_f2d+0x20>
 8003870:	2d00      	cmp	r5, #0
 8003872:	d009      	beq.n	8003888 <__aeabi_f2d+0x74>
 8003874:	0b13      	lsrs	r3, r2, #12
 8003876:	2280      	movs	r2, #128	@ 0x80
 8003878:	0312      	lsls	r2, r2, #12
 800387a:	431a      	orrs	r2, r3
 800387c:	076d      	lsls	r5, r5, #29
 800387e:	4b08      	ldr	r3, [pc, #32]	@ (80038a0 <__aeabi_f2d+0x8c>)
 8003880:	e7d8      	b.n	8003834 <__aeabi_f2d+0x20>
 8003882:	2300      	movs	r3, #0
 8003884:	2200      	movs	r2, #0
 8003886:	e7d5      	b.n	8003834 <__aeabi_f2d+0x20>
 8003888:	2200      	movs	r2, #0
 800388a:	4b05      	ldr	r3, [pc, #20]	@ (80038a0 <__aeabi_f2d+0x8c>)
 800388c:	e7d2      	b.n	8003834 <__aeabi_f2d+0x20>
 800388e:	0003      	movs	r3, r0
 8003890:	002a      	movs	r2, r5
 8003892:	3b0b      	subs	r3, #11
 8003894:	409a      	lsls	r2, r3
 8003896:	2500      	movs	r5, #0
 8003898:	e7e3      	b.n	8003862 <__aeabi_f2d+0x4e>
 800389a:	46c0      	nop			@ (mov r8, r8)
 800389c:	00000389 	.word	0x00000389
 80038a0:	000007ff 	.word	0x000007ff

080038a4 <__aeabi_d2f>:
 80038a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038a6:	004b      	lsls	r3, r1, #1
 80038a8:	030f      	lsls	r7, r1, #12
 80038aa:	0d5b      	lsrs	r3, r3, #21
 80038ac:	4c3a      	ldr	r4, [pc, #232]	@ (8003998 <__aeabi_d2f+0xf4>)
 80038ae:	0f45      	lsrs	r5, r0, #29
 80038b0:	b083      	sub	sp, #12
 80038b2:	0a7f      	lsrs	r7, r7, #9
 80038b4:	1c5e      	adds	r6, r3, #1
 80038b6:	432f      	orrs	r7, r5
 80038b8:	9000      	str	r0, [sp, #0]
 80038ba:	9101      	str	r1, [sp, #4]
 80038bc:	0fca      	lsrs	r2, r1, #31
 80038be:	00c5      	lsls	r5, r0, #3
 80038c0:	4226      	tst	r6, r4
 80038c2:	d00b      	beq.n	80038dc <__aeabi_d2f+0x38>
 80038c4:	4935      	ldr	r1, [pc, #212]	@ (800399c <__aeabi_d2f+0xf8>)
 80038c6:	185c      	adds	r4, r3, r1
 80038c8:	2cfe      	cmp	r4, #254	@ 0xfe
 80038ca:	dd13      	ble.n	80038f4 <__aeabi_d2f+0x50>
 80038cc:	20ff      	movs	r0, #255	@ 0xff
 80038ce:	2300      	movs	r3, #0
 80038d0:	05c0      	lsls	r0, r0, #23
 80038d2:	4318      	orrs	r0, r3
 80038d4:	07d2      	lsls	r2, r2, #31
 80038d6:	4310      	orrs	r0, r2
 80038d8:	b003      	add	sp, #12
 80038da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038dc:	433d      	orrs	r5, r7
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d101      	bne.n	80038e6 <__aeabi_d2f+0x42>
 80038e2:	2000      	movs	r0, #0
 80038e4:	e7f4      	b.n	80038d0 <__aeabi_d2f+0x2c>
 80038e6:	2d00      	cmp	r5, #0
 80038e8:	d0f0      	beq.n	80038cc <__aeabi_d2f+0x28>
 80038ea:	2380      	movs	r3, #128	@ 0x80
 80038ec:	03db      	lsls	r3, r3, #15
 80038ee:	20ff      	movs	r0, #255	@ 0xff
 80038f0:	433b      	orrs	r3, r7
 80038f2:	e7ed      	b.n	80038d0 <__aeabi_d2f+0x2c>
 80038f4:	2c00      	cmp	r4, #0
 80038f6:	dd0c      	ble.n	8003912 <__aeabi_d2f+0x6e>
 80038f8:	9b00      	ldr	r3, [sp, #0]
 80038fa:	00ff      	lsls	r7, r7, #3
 80038fc:	019b      	lsls	r3, r3, #6
 80038fe:	1e58      	subs	r0, r3, #1
 8003900:	4183      	sbcs	r3, r0
 8003902:	0f69      	lsrs	r1, r5, #29
 8003904:	433b      	orrs	r3, r7
 8003906:	430b      	orrs	r3, r1
 8003908:	0759      	lsls	r1, r3, #29
 800390a:	d127      	bne.n	800395c <__aeabi_d2f+0xb8>
 800390c:	08db      	lsrs	r3, r3, #3
 800390e:	b2e0      	uxtb	r0, r4
 8003910:	e7de      	b.n	80038d0 <__aeabi_d2f+0x2c>
 8003912:	0021      	movs	r1, r4
 8003914:	3117      	adds	r1, #23
 8003916:	db31      	blt.n	800397c <__aeabi_d2f+0xd8>
 8003918:	2180      	movs	r1, #128	@ 0x80
 800391a:	201e      	movs	r0, #30
 800391c:	0409      	lsls	r1, r1, #16
 800391e:	4339      	orrs	r1, r7
 8003920:	1b00      	subs	r0, r0, r4
 8003922:	281f      	cmp	r0, #31
 8003924:	dd2d      	ble.n	8003982 <__aeabi_d2f+0xde>
 8003926:	2602      	movs	r6, #2
 8003928:	4276      	negs	r6, r6
 800392a:	1b34      	subs	r4, r6, r4
 800392c:	000e      	movs	r6, r1
 800392e:	40e6      	lsrs	r6, r4
 8003930:	0034      	movs	r4, r6
 8003932:	2820      	cmp	r0, #32
 8003934:	d004      	beq.n	8003940 <__aeabi_d2f+0x9c>
 8003936:	481a      	ldr	r0, [pc, #104]	@ (80039a0 <__aeabi_d2f+0xfc>)
 8003938:	4684      	mov	ip, r0
 800393a:	4463      	add	r3, ip
 800393c:	4099      	lsls	r1, r3
 800393e:	430d      	orrs	r5, r1
 8003940:	002b      	movs	r3, r5
 8003942:	1e59      	subs	r1, r3, #1
 8003944:	418b      	sbcs	r3, r1
 8003946:	4323      	orrs	r3, r4
 8003948:	0759      	lsls	r1, r3, #29
 800394a:	d003      	beq.n	8003954 <__aeabi_d2f+0xb0>
 800394c:	210f      	movs	r1, #15
 800394e:	4019      	ands	r1, r3
 8003950:	2904      	cmp	r1, #4
 8003952:	d10b      	bne.n	800396c <__aeabi_d2f+0xc8>
 8003954:	019b      	lsls	r3, r3, #6
 8003956:	2000      	movs	r0, #0
 8003958:	0a5b      	lsrs	r3, r3, #9
 800395a:	e7b9      	b.n	80038d0 <__aeabi_d2f+0x2c>
 800395c:	210f      	movs	r1, #15
 800395e:	4019      	ands	r1, r3
 8003960:	2904      	cmp	r1, #4
 8003962:	d104      	bne.n	800396e <__aeabi_d2f+0xca>
 8003964:	019b      	lsls	r3, r3, #6
 8003966:	0a5b      	lsrs	r3, r3, #9
 8003968:	b2e0      	uxtb	r0, r4
 800396a:	e7b1      	b.n	80038d0 <__aeabi_d2f+0x2c>
 800396c:	2400      	movs	r4, #0
 800396e:	3304      	adds	r3, #4
 8003970:	0159      	lsls	r1, r3, #5
 8003972:	d5f7      	bpl.n	8003964 <__aeabi_d2f+0xc0>
 8003974:	3401      	adds	r4, #1
 8003976:	2300      	movs	r3, #0
 8003978:	b2e0      	uxtb	r0, r4
 800397a:	e7a9      	b.n	80038d0 <__aeabi_d2f+0x2c>
 800397c:	2000      	movs	r0, #0
 800397e:	2300      	movs	r3, #0
 8003980:	e7a6      	b.n	80038d0 <__aeabi_d2f+0x2c>
 8003982:	4c08      	ldr	r4, [pc, #32]	@ (80039a4 <__aeabi_d2f+0x100>)
 8003984:	191c      	adds	r4, r3, r4
 8003986:	002b      	movs	r3, r5
 8003988:	40a5      	lsls	r5, r4
 800398a:	40c3      	lsrs	r3, r0
 800398c:	40a1      	lsls	r1, r4
 800398e:	1e68      	subs	r0, r5, #1
 8003990:	4185      	sbcs	r5, r0
 8003992:	4329      	orrs	r1, r5
 8003994:	430b      	orrs	r3, r1
 8003996:	e7d7      	b.n	8003948 <__aeabi_d2f+0xa4>
 8003998:	000007fe 	.word	0x000007fe
 800399c:	fffffc80 	.word	0xfffffc80
 80039a0:	fffffca2 	.word	0xfffffca2
 80039a4:	fffffc82 	.word	0xfffffc82

080039a8 <__clzsi2>:
 80039a8:	211c      	movs	r1, #28
 80039aa:	2301      	movs	r3, #1
 80039ac:	041b      	lsls	r3, r3, #16
 80039ae:	4298      	cmp	r0, r3
 80039b0:	d301      	bcc.n	80039b6 <__clzsi2+0xe>
 80039b2:	0c00      	lsrs	r0, r0, #16
 80039b4:	3910      	subs	r1, #16
 80039b6:	0a1b      	lsrs	r3, r3, #8
 80039b8:	4298      	cmp	r0, r3
 80039ba:	d301      	bcc.n	80039c0 <__clzsi2+0x18>
 80039bc:	0a00      	lsrs	r0, r0, #8
 80039be:	3908      	subs	r1, #8
 80039c0:	091b      	lsrs	r3, r3, #4
 80039c2:	4298      	cmp	r0, r3
 80039c4:	d301      	bcc.n	80039ca <__clzsi2+0x22>
 80039c6:	0900      	lsrs	r0, r0, #4
 80039c8:	3904      	subs	r1, #4
 80039ca:	a202      	add	r2, pc, #8	@ (adr r2, 80039d4 <__clzsi2+0x2c>)
 80039cc:	5c10      	ldrb	r0, [r2, r0]
 80039ce:	1840      	adds	r0, r0, r1
 80039d0:	4770      	bx	lr
 80039d2:	46c0      	nop			@ (mov r8, r8)
 80039d4:	02020304 	.word	0x02020304
 80039d8:	01010101 	.word	0x01010101
	...

080039e4 <__clzdi2>:
 80039e4:	b510      	push	{r4, lr}
 80039e6:	2900      	cmp	r1, #0
 80039e8:	d103      	bne.n	80039f2 <__clzdi2+0xe>
 80039ea:	f7ff ffdd 	bl	80039a8 <__clzsi2>
 80039ee:	3020      	adds	r0, #32
 80039f0:	e002      	b.n	80039f8 <__clzdi2+0x14>
 80039f2:	0008      	movs	r0, r1
 80039f4:	f7ff ffd8 	bl	80039a8 <__clzsi2>
 80039f8:	bd10      	pop	{r4, pc}
 80039fa:	46c0      	nop			@ (mov r8, r8)

080039fc <drawPixel>:
extern uint8_t _rowstart;       ///< Some displays need this changed to offset
extern uint8_t _xstart;
extern uint8_t _ystart;

void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 80039fc:	b590      	push	{r4, r7, lr}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	0004      	movs	r4, r0
 8003a04:	0008      	movs	r0, r1
 8003a06:	0011      	movs	r1, r2
 8003a08:	1dbb      	adds	r3, r7, #6
 8003a0a:	1c22      	adds	r2, r4, #0
 8003a0c:	801a      	strh	r2, [r3, #0]
 8003a0e:	1d3b      	adds	r3, r7, #4
 8003a10:	1c02      	adds	r2, r0, #0
 8003a12:	801a      	strh	r2, [r3, #0]
 8003a14:	1cbb      	adds	r3, r7, #2
 8003a16:	1c0a      	adds	r2, r1, #0
 8003a18:	801a      	strh	r2, [r3, #0]
	ST7735_DrawPixel(y,x, color);
 8003a1a:	1d3b      	adds	r3, r7, #4
 8003a1c:	8818      	ldrh	r0, [r3, #0]
 8003a1e:	1dbb      	adds	r3, r7, #6
 8003a20:	8819      	ldrh	r1, [r3, #0]
 8003a22:	1cbb      	adds	r3, r7, #2
 8003a24:	881b      	ldrh	r3, [r3, #0]
 8003a26:	001a      	movs	r2, r3
 8003a28:	f000 fede 	bl	80047e8 <ST7735_DrawPixel>
}
 8003a2c:	46c0      	nop			@ (mov r8, r8)
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	b003      	add	sp, #12
 8003a32:	bd90      	pop	{r4, r7, pc}

08003a34 <fillRect>:

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8003a34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a36:	46c6      	mov	lr, r8
 8003a38:	b500      	push	{lr}
 8003a3a:	b090      	sub	sp, #64	@ 0x40
 8003a3c:	af04      	add	r7, sp, #16
 8003a3e:	468c      	mov	ip, r1
 8003a40:	0016      	movs	r6, r2
 8003a42:	0019      	movs	r1, r3
 8003a44:	221e      	movs	r2, #30
 8003a46:	18ba      	adds	r2, r7, r2
 8003a48:	1c03      	adds	r3, r0, #0
 8003a4a:	8013      	strh	r3, [r2, #0]
 8003a4c:	231c      	movs	r3, #28
 8003a4e:	18fb      	adds	r3, r7, r3
 8003a50:	4662      	mov	r2, ip
 8003a52:	801a      	strh	r2, [r3, #0]
 8003a54:	201a      	movs	r0, #26
 8003a56:	183b      	adds	r3, r7, r0
 8003a58:	1c32      	adds	r2, r6, #0
 8003a5a:	801a      	strh	r2, [r3, #0]
 8003a5c:	2018      	movs	r0, #24
 8003a5e:	183b      	adds	r3, r7, r0
 8003a60:	1c0a      	adds	r2, r1, #0
 8003a62:	801a      	strh	r2, [r3, #0]
 8003a64:	466b      	mov	r3, sp
 8003a66:	4698      	mov	r8, r3
	uint16_t pallette[] = {color};
 8003a68:	230c      	movs	r3, #12
 8003a6a:	0001      	movs	r1, r0
 8003a6c:	185e      	adds	r6, r3, r1
 8003a6e:	19f2      	adds	r2, r6, r7
 8003a70:	2030      	movs	r0, #48	@ 0x30
 8003a72:	1846      	adds	r6, r0, r1
 8003a74:	19f3      	adds	r3, r6, r7
 8003a76:	881b      	ldrh	r3, [r3, #0]
 8003a78:	8013      	strh	r3, [r2, #0]
	    uint16_t pixels[w*h][2];
 8003a7a:	201a      	movs	r0, #26
 8003a7c:	183b      	adds	r3, r7, r0
 8003a7e:	2200      	movs	r2, #0
 8003a80:	5e9b      	ldrsh	r3, [r3, r2]
 8003a82:	187a      	adds	r2, r7, r1
 8003a84:	2000      	movs	r0, #0
 8003a86:	5e12      	ldrsh	r2, [r2, r0]
 8003a88:	4353      	muls	r3, r2
 8003a8a:	1e5a      	subs	r2, r3, #1
 8003a8c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a8e:	001a      	movs	r2, r3
 8003a90:	60ba      	str	r2, [r7, #8]
 8003a92:	2200      	movs	r2, #0
 8003a94:	60fa      	str	r2, [r7, #12]
 8003a96:	68b8      	ldr	r0, [r7, #8]
 8003a98:	68f9      	ldr	r1, [r7, #12]
 8003a9a:	0002      	movs	r2, r0
 8003a9c:	0ed2      	lsrs	r2, r2, #27
 8003a9e:	000e      	movs	r6, r1
 8003aa0:	0176      	lsls	r6, r6, #5
 8003aa2:	617e      	str	r6, [r7, #20]
 8003aa4:	697e      	ldr	r6, [r7, #20]
 8003aa6:	4316      	orrs	r6, r2
 8003aa8:	617e      	str	r6, [r7, #20]
 8003aaa:	0002      	movs	r2, r0
 8003aac:	0152      	lsls	r2, r2, #5
 8003aae:	613a      	str	r2, [r7, #16]
 8003ab0:	001a      	movs	r2, r3
 8003ab2:	603a      	str	r2, [r7, #0]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	607a      	str	r2, [r7, #4]
 8003ab8:	6838      	ldr	r0, [r7, #0]
 8003aba:	6879      	ldr	r1, [r7, #4]
 8003abc:	0002      	movs	r2, r0
 8003abe:	0ed2      	lsrs	r2, r2, #27
 8003ac0:	000e      	movs	r6, r1
 8003ac2:	0175      	lsls	r5, r6, #5
 8003ac4:	4315      	orrs	r5, r2
 8003ac6:	0002      	movs	r2, r0
 8003ac8:	0154      	lsls	r4, r2, #5
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	3307      	adds	r3, #7
 8003ace:	08db      	lsrs	r3, r3, #3
 8003ad0:	00db      	lsls	r3, r3, #3
 8003ad2:	466a      	mov	r2, sp
 8003ad4:	1ad2      	subs	r2, r2, r3
 8003ad6:	4695      	mov	sp, r2
 8003ad8:	ab04      	add	r3, sp, #16
 8003ada:	3301      	adds	r3, #1
 8003adc:	085b      	lsrs	r3, r3, #1
 8003ade:	005b      	lsls	r3, r3, #1
 8003ae0:	62bb      	str	r3, [r7, #40]	@ 0x28

	    pixels[0][0] = 0;
 8003ae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	801a      	strh	r2, [r3, #0]
	    pixels[0][1] = w*h;
 8003ae8:	201a      	movs	r0, #26
 8003aea:	183b      	adds	r3, r7, r0
 8003aec:	881b      	ldrh	r3, [r3, #0]
 8003aee:	2118      	movs	r1, #24
 8003af0:	187a      	adds	r2, r7, r1
 8003af2:	8812      	ldrh	r2, [r2, #0]
 8003af4:	4353      	muls	r3, r2
 8003af6:	b29a      	uxth	r2, r3
 8003af8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003afa:	805a      	strh	r2, [r3, #2]
	    drawImage(pixels, pallette, x, y, w, h, 1);
 8003afc:	221e      	movs	r2, #30
 8003afe:	18bb      	adds	r3, r7, r2
 8003b00:	881c      	ldrh	r4, [r3, #0]
 8003b02:	231c      	movs	r3, #28
 8003b04:	18fb      	adds	r3, r7, r3
 8003b06:	881d      	ldrh	r5, [r3, #0]
 8003b08:	183b      	adds	r3, r7, r0
 8003b0a:	881b      	ldrh	r3, [r3, #0]
 8003b0c:	0008      	movs	r0, r1
 8003b0e:	187a      	adds	r2, r7, r1
 8003b10:	8812      	ldrh	r2, [r2, #0]
 8003b12:	210c      	movs	r1, #12
 8003b14:	1809      	adds	r1, r1, r0
 8003b16:	19c9      	adds	r1, r1, r7
 8003b18:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003b1a:	2601      	movs	r6, #1
 8003b1c:	46b4      	mov	ip, r6
 8003b1e:	4666      	mov	r6, ip
 8003b20:	9602      	str	r6, [sp, #8]
 8003b22:	9201      	str	r2, [sp, #4]
 8003b24:	9300      	str	r3, [sp, #0]
 8003b26:	002b      	movs	r3, r5
 8003b28:	0022      	movs	r2, r4
 8003b2a:	f000 fbc5 	bl	80042b8 <drawImage>
 8003b2e:	46c5      	mov	sp, r8

	//ST7735_FillRectangle(x, y, w, h, color);
}
 8003b30:	46c0      	nop			@ (mov r8, r8)
 8003b32:	46bd      	mov	sp, r7
 8003b34:	b00c      	add	sp, #48	@ 0x30
 8003b36:	bc80      	pop	{r7}
 8003b38:	46b8      	mov	r8, r7
 8003b3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003b3c <writePixel>:

#define min(a, b) (((a) < (b)) ? (a) : (b))


void writePixel(int16_t x, int16_t y, uint16_t color)
{
 8003b3c:	b590      	push	{r4, r7, lr}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	0004      	movs	r4, r0
 8003b44:	0008      	movs	r0, r1
 8003b46:	0011      	movs	r1, r2
 8003b48:	1dbb      	adds	r3, r7, #6
 8003b4a:	1c22      	adds	r2, r4, #0
 8003b4c:	801a      	strh	r2, [r3, #0]
 8003b4e:	1d3b      	adds	r3, r7, #4
 8003b50:	1c02      	adds	r2, r0, #0
 8003b52:	801a      	strh	r2, [r3, #0]
 8003b54:	1cbb      	adds	r3, r7, #2
 8003b56:	1c0a      	adds	r2, r1, #0
 8003b58:	801a      	strh	r2, [r3, #0]
    drawPixel(x, y, color);
 8003b5a:	1cbb      	adds	r3, r7, #2
 8003b5c:	881a      	ldrh	r2, [r3, #0]
 8003b5e:	1d3b      	adds	r3, r7, #4
 8003b60:	2100      	movs	r1, #0
 8003b62:	5e59      	ldrsh	r1, [r3, r1]
 8003b64:	1dbb      	adds	r3, r7, #6
 8003b66:	2000      	movs	r0, #0
 8003b68:	5e1b      	ldrsh	r3, [r3, r0]
 8003b6a:	0018      	movs	r0, r3
 8003b6c:	f7ff ff46 	bl	80039fc <drawPixel>
}
 8003b70:	46c0      	nop			@ (mov r8, r8)
 8003b72:	46bd      	mov	sp, r7
 8003b74:	b003      	add	sp, #12
 8003b76:	bd90      	pop	{r4, r7, pc}

08003b78 <writeLine>:

void writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8003b78:	b5b0      	push	{r4, r5, r7, lr}
 8003b7a:	b088      	sub	sp, #32
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	0005      	movs	r5, r0
 8003b80:	000c      	movs	r4, r1
 8003b82:	0010      	movs	r0, r2
 8003b84:	0019      	movs	r1, r3
 8003b86:	1dbb      	adds	r3, r7, #6
 8003b88:	1c2a      	adds	r2, r5, #0
 8003b8a:	801a      	strh	r2, [r3, #0]
 8003b8c:	1d3b      	adds	r3, r7, #4
 8003b8e:	1c22      	adds	r2, r4, #0
 8003b90:	801a      	strh	r2, [r3, #0]
 8003b92:	1cbb      	adds	r3, r7, #2
 8003b94:	1c02      	adds	r2, r0, #0
 8003b96:	801a      	strh	r2, [r3, #0]
 8003b98:	003b      	movs	r3, r7
 8003b9a:	1c0a      	adds	r2, r1, #0
 8003b9c:	801a      	strh	r2, [r3, #0]
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8003b9e:	003b      	movs	r3, r7
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	5e9a      	ldrsh	r2, [r3, r2]
 8003ba4:	1d3b      	adds	r3, r7, #4
 8003ba6:	2100      	movs	r1, #0
 8003ba8:	5e5b      	ldrsh	r3, [r3, r1]
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	17d9      	asrs	r1, r3, #31
 8003bae:	185a      	adds	r2, r3, r1
 8003bb0:	404a      	eors	r2, r1
 8003bb2:	1cbb      	adds	r3, r7, #2
 8003bb4:	2100      	movs	r1, #0
 8003bb6:	5e59      	ldrsh	r1, [r3, r1]
 8003bb8:	1dbb      	adds	r3, r7, #6
 8003bba:	2000      	movs	r0, #0
 8003bbc:	5e1b      	ldrsh	r3, [r3, r0]
 8003bbe:	1acb      	subs	r3, r1, r3
 8003bc0:	17d9      	asrs	r1, r3, #31
 8003bc2:	185b      	adds	r3, r3, r1
 8003bc4:	404b      	eors	r3, r1
 8003bc6:	2101      	movs	r1, #1
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	dc01      	bgt.n	8003bd0 <writeLine+0x58>
 8003bcc:	2300      	movs	r3, #0
 8003bce:	1c19      	adds	r1, r3, #0
 8003bd0:	b2ca      	uxtb	r2, r1
 8003bd2:	211a      	movs	r1, #26
 8003bd4:	187b      	adds	r3, r7, r1
 8003bd6:	801a      	strh	r2, [r3, #0]
    if (steep) {
 8003bd8:	187b      	adds	r3, r7, r1
 8003bda:	2200      	movs	r2, #0
 8003bdc:	5e9b      	ldrsh	r3, [r3, r2]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d019      	beq.n	8003c16 <writeLine+0x9e>
        _swap_int16_t(x0, y0);
 8003be2:	2118      	movs	r1, #24
 8003be4:	187b      	adds	r3, r7, r1
 8003be6:	1dba      	adds	r2, r7, #6
 8003be8:	8812      	ldrh	r2, [r2, #0]
 8003bea:	801a      	strh	r2, [r3, #0]
 8003bec:	1dbb      	adds	r3, r7, #6
 8003bee:	1d3a      	adds	r2, r7, #4
 8003bf0:	8812      	ldrh	r2, [r2, #0]
 8003bf2:	801a      	strh	r2, [r3, #0]
 8003bf4:	1d3b      	adds	r3, r7, #4
 8003bf6:	187a      	adds	r2, r7, r1
 8003bf8:	8812      	ldrh	r2, [r2, #0]
 8003bfa:	801a      	strh	r2, [r3, #0]
        _swap_int16_t(x1, y1);
 8003bfc:	2116      	movs	r1, #22
 8003bfe:	187b      	adds	r3, r7, r1
 8003c00:	1cba      	adds	r2, r7, #2
 8003c02:	8812      	ldrh	r2, [r2, #0]
 8003c04:	801a      	strh	r2, [r3, #0]
 8003c06:	1cbb      	adds	r3, r7, #2
 8003c08:	003a      	movs	r2, r7
 8003c0a:	8812      	ldrh	r2, [r2, #0]
 8003c0c:	801a      	strh	r2, [r3, #0]
 8003c0e:	003b      	movs	r3, r7
 8003c10:	187a      	adds	r2, r7, r1
 8003c12:	8812      	ldrh	r2, [r2, #0]
 8003c14:	801a      	strh	r2, [r3, #0]
    }

    if (x0 > x1) {
 8003c16:	1dba      	adds	r2, r7, #6
 8003c18:	1cbb      	adds	r3, r7, #2
 8003c1a:	2100      	movs	r1, #0
 8003c1c:	5e52      	ldrsh	r2, [r2, r1]
 8003c1e:	2100      	movs	r1, #0
 8003c20:	5e5b      	ldrsh	r3, [r3, r1]
 8003c22:	429a      	cmp	r2, r3
 8003c24:	dd19      	ble.n	8003c5a <writeLine+0xe2>
        _swap_int16_t(x0, x1);
 8003c26:	2114      	movs	r1, #20
 8003c28:	187b      	adds	r3, r7, r1
 8003c2a:	1dba      	adds	r2, r7, #6
 8003c2c:	8812      	ldrh	r2, [r2, #0]
 8003c2e:	801a      	strh	r2, [r3, #0]
 8003c30:	1dbb      	adds	r3, r7, #6
 8003c32:	1cba      	adds	r2, r7, #2
 8003c34:	8812      	ldrh	r2, [r2, #0]
 8003c36:	801a      	strh	r2, [r3, #0]
 8003c38:	1cbb      	adds	r3, r7, #2
 8003c3a:	187a      	adds	r2, r7, r1
 8003c3c:	8812      	ldrh	r2, [r2, #0]
 8003c3e:	801a      	strh	r2, [r3, #0]
        _swap_int16_t(y0, y1);
 8003c40:	2112      	movs	r1, #18
 8003c42:	187b      	adds	r3, r7, r1
 8003c44:	1d3a      	adds	r2, r7, #4
 8003c46:	8812      	ldrh	r2, [r2, #0]
 8003c48:	801a      	strh	r2, [r3, #0]
 8003c4a:	1d3b      	adds	r3, r7, #4
 8003c4c:	003a      	movs	r2, r7
 8003c4e:	8812      	ldrh	r2, [r2, #0]
 8003c50:	801a      	strh	r2, [r3, #0]
 8003c52:	003b      	movs	r3, r7
 8003c54:	187a      	adds	r2, r7, r1
 8003c56:	8812      	ldrh	r2, [r2, #0]
 8003c58:	801a      	strh	r2, [r3, #0]
    }

    int16_t dx, dy;
    dx = x1 - x0;
 8003c5a:	1cbb      	adds	r3, r7, #2
 8003c5c:	881a      	ldrh	r2, [r3, #0]
 8003c5e:	1dbb      	adds	r3, r7, #6
 8003c60:	881b      	ldrh	r3, [r3, #0]
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	b29a      	uxth	r2, r3
 8003c66:	2010      	movs	r0, #16
 8003c68:	183b      	adds	r3, r7, r0
 8003c6a:	801a      	strh	r2, [r3, #0]
    dy = abs(y1 - y0);
 8003c6c:	003b      	movs	r3, r7
 8003c6e:	2200      	movs	r2, #0
 8003c70:	5e9a      	ldrsh	r2, [r3, r2]
 8003c72:	1d3b      	adds	r3, r7, #4
 8003c74:	2100      	movs	r1, #0
 8003c76:	5e5b      	ldrsh	r3, [r3, r1]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	17d9      	asrs	r1, r3, #31
 8003c7c:	185a      	adds	r2, r3, r1
 8003c7e:	404a      	eors	r2, r1
 8003c80:	230e      	movs	r3, #14
 8003c82:	18fb      	adds	r3, r7, r3
 8003c84:	801a      	strh	r2, [r3, #0]

    int16_t err = dx / 2;
 8003c86:	231e      	movs	r3, #30
 8003c88:	18fa      	adds	r2, r7, r3
 8003c8a:	183b      	adds	r3, r7, r0
 8003c8c:	2100      	movs	r1, #0
 8003c8e:	5e5b      	ldrsh	r3, [r3, r1]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	da00      	bge.n	8003c96 <writeLine+0x11e>
 8003c94:	3301      	adds	r3, #1
 8003c96:	105b      	asrs	r3, r3, #1
 8003c98:	8013      	strh	r3, [r2, #0]
    int16_t ystep;

    if (y0 < y1) {
 8003c9a:	1d3a      	adds	r2, r7, #4
 8003c9c:	003b      	movs	r3, r7
 8003c9e:	2100      	movs	r1, #0
 8003ca0:	5e52      	ldrsh	r2, [r2, r1]
 8003ca2:	2100      	movs	r1, #0
 8003ca4:	5e5b      	ldrsh	r3, [r3, r1]
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	da04      	bge.n	8003cb4 <writeLine+0x13c>
        ystep = 1;
 8003caa:	231c      	movs	r3, #28
 8003cac:	18fb      	adds	r3, r7, r3
 8003cae:	2201      	movs	r2, #1
 8003cb0:	801a      	strh	r2, [r3, #0]
 8003cb2:	e04d      	b.n	8003d50 <writeLine+0x1d8>
    } else {
        ystep = -1;
 8003cb4:	231c      	movs	r3, #28
 8003cb6:	18fb      	adds	r3, r7, r3
 8003cb8:	2201      	movs	r2, #1
 8003cba:	4252      	negs	r2, r2
 8003cbc:	801a      	strh	r2, [r3, #0]
    }

    for (; x0<=x1; x0++) {
 8003cbe:	e047      	b.n	8003d50 <writeLine+0x1d8>
        if (steep) {
 8003cc0:	231a      	movs	r3, #26
 8003cc2:	18fb      	adds	r3, r7, r3
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	5e9b      	ldrsh	r3, [r3, r2]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d00c      	beq.n	8003ce6 <writeLine+0x16e>
            writePixel(y0, x0, color);
 8003ccc:	2330      	movs	r3, #48	@ 0x30
 8003cce:	18fb      	adds	r3, r7, r3
 8003cd0:	881a      	ldrh	r2, [r3, #0]
 8003cd2:	1dbb      	adds	r3, r7, #6
 8003cd4:	2100      	movs	r1, #0
 8003cd6:	5e59      	ldrsh	r1, [r3, r1]
 8003cd8:	1d3b      	adds	r3, r7, #4
 8003cda:	2000      	movs	r0, #0
 8003cdc:	5e1b      	ldrsh	r3, [r3, r0]
 8003cde:	0018      	movs	r0, r3
 8003ce0:	f7ff ff2c 	bl	8003b3c <writePixel>
 8003ce4:	e00b      	b.n	8003cfe <writeLine+0x186>
        } else {
            writePixel(x0, y0, color);
 8003ce6:	2330      	movs	r3, #48	@ 0x30
 8003ce8:	18fb      	adds	r3, r7, r3
 8003cea:	881a      	ldrh	r2, [r3, #0]
 8003cec:	1d3b      	adds	r3, r7, #4
 8003cee:	2100      	movs	r1, #0
 8003cf0:	5e59      	ldrsh	r1, [r3, r1]
 8003cf2:	1dbb      	adds	r3, r7, #6
 8003cf4:	2000      	movs	r0, #0
 8003cf6:	5e1b      	ldrsh	r3, [r3, r0]
 8003cf8:	0018      	movs	r0, r3
 8003cfa:	f7ff ff1f 	bl	8003b3c <writePixel>
        }
        err -= dy;
 8003cfe:	211e      	movs	r1, #30
 8003d00:	187b      	adds	r3, r7, r1
 8003d02:	881a      	ldrh	r2, [r3, #0]
 8003d04:	230e      	movs	r3, #14
 8003d06:	18fb      	adds	r3, r7, r3
 8003d08:	881b      	ldrh	r3, [r3, #0]
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	b29a      	uxth	r2, r3
 8003d0e:	187b      	adds	r3, r7, r1
 8003d10:	801a      	strh	r2, [r3, #0]
        if (err < 0) {
 8003d12:	187b      	adds	r3, r7, r1
 8003d14:	2200      	movs	r2, #0
 8003d16:	5e9b      	ldrsh	r3, [r3, r2]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	da11      	bge.n	8003d40 <writeLine+0x1c8>
            y0 += ystep;
 8003d1c:	1d3b      	adds	r3, r7, #4
 8003d1e:	881a      	ldrh	r2, [r3, #0]
 8003d20:	231c      	movs	r3, #28
 8003d22:	18fb      	adds	r3, r7, r3
 8003d24:	881b      	ldrh	r3, [r3, #0]
 8003d26:	18d3      	adds	r3, r2, r3
 8003d28:	b29a      	uxth	r2, r3
 8003d2a:	1d3b      	adds	r3, r7, #4
 8003d2c:	801a      	strh	r2, [r3, #0]
            err += dx;
 8003d2e:	187b      	adds	r3, r7, r1
 8003d30:	881a      	ldrh	r2, [r3, #0]
 8003d32:	2310      	movs	r3, #16
 8003d34:	18fb      	adds	r3, r7, r3
 8003d36:	881b      	ldrh	r3, [r3, #0]
 8003d38:	18d3      	adds	r3, r2, r3
 8003d3a:	b29a      	uxth	r2, r3
 8003d3c:	187b      	adds	r3, r7, r1
 8003d3e:	801a      	strh	r2, [r3, #0]
    for (; x0<=x1; x0++) {
 8003d40:	1dbb      	adds	r3, r7, #6
 8003d42:	2200      	movs	r2, #0
 8003d44:	5e9b      	ldrsh	r3, [r3, r2]
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	3301      	adds	r3, #1
 8003d4a:	b29a      	uxth	r2, r3
 8003d4c:	1dbb      	adds	r3, r7, #6
 8003d4e:	801a      	strh	r2, [r3, #0]
 8003d50:	1dba      	adds	r2, r7, #6
 8003d52:	1cbb      	adds	r3, r7, #2
 8003d54:	2100      	movs	r1, #0
 8003d56:	5e52      	ldrsh	r2, [r2, r1]
 8003d58:	2100      	movs	r1, #0
 8003d5a:	5e5b      	ldrsh	r3, [r3, r1]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	ddaf      	ble.n	8003cc0 <writeLine+0x148>
        }
    }
}
 8003d60:	46c0      	nop			@ (mov r8, r8)
 8003d62:	46c0      	nop			@ (mov r8, r8)
 8003d64:	46bd      	mov	sp, r7
 8003d66:	b008      	add	sp, #32
 8003d68:	bdb0      	pop	{r4, r5, r7, pc}

08003d6a <drawFastVLine>:

void  drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 8003d6a:	b5b0      	push	{r4, r5, r7, lr}
 8003d6c:	b084      	sub	sp, #16
 8003d6e:	af02      	add	r7, sp, #8
 8003d70:	0005      	movs	r5, r0
 8003d72:	000c      	movs	r4, r1
 8003d74:	0010      	movs	r0, r2
 8003d76:	0019      	movs	r1, r3
 8003d78:	1dbb      	adds	r3, r7, #6
 8003d7a:	1c2a      	adds	r2, r5, #0
 8003d7c:	801a      	strh	r2, [r3, #0]
 8003d7e:	1d3b      	adds	r3, r7, #4
 8003d80:	1c22      	adds	r2, r4, #0
 8003d82:	801a      	strh	r2, [r3, #0]
 8003d84:	1cbb      	adds	r3, r7, #2
 8003d86:	1c02      	adds	r2, r0, #0
 8003d88:	801a      	strh	r2, [r3, #0]
 8003d8a:	003b      	movs	r3, r7
 8003d8c:	1c0a      	adds	r2, r1, #0
 8003d8e:	801a      	strh	r2, [r3, #0]
	writeLine(x, y, x, y + h - 1, color);
 8003d90:	1d3b      	adds	r3, r7, #4
 8003d92:	881a      	ldrh	r2, [r3, #0]
 8003d94:	1cbb      	adds	r3, r7, #2
 8003d96:	881b      	ldrh	r3, [r3, #0]
 8003d98:	18d3      	adds	r3, r2, r3
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	3b01      	subs	r3, #1
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	b21c      	sxth	r4, r3
 8003da2:	1dbb      	adds	r3, r7, #6
 8003da4:	2200      	movs	r2, #0
 8003da6:	5e9a      	ldrsh	r2, [r3, r2]
 8003da8:	1d3b      	adds	r3, r7, #4
 8003daa:	2100      	movs	r1, #0
 8003dac:	5e59      	ldrsh	r1, [r3, r1]
 8003dae:	1dbb      	adds	r3, r7, #6
 8003db0:	2000      	movs	r0, #0
 8003db2:	5e18      	ldrsh	r0, [r3, r0]
 8003db4:	003b      	movs	r3, r7
 8003db6:	881b      	ldrh	r3, [r3, #0]
 8003db8:	9300      	str	r3, [sp, #0]
 8003dba:	0023      	movs	r3, r4
 8003dbc:	f7ff fedc 	bl	8003b78 <writeLine>
}
 8003dc0:	46c0      	nop			@ (mov r8, r8)
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	b002      	add	sp, #8
 8003dc6:	bdb0      	pop	{r4, r5, r7, pc}

08003dc8 <drawFastHLine>:
void  drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 8003dc8:	b5b0      	push	{r4, r5, r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af02      	add	r7, sp, #8
 8003dce:	0005      	movs	r5, r0
 8003dd0:	000c      	movs	r4, r1
 8003dd2:	0010      	movs	r0, r2
 8003dd4:	0019      	movs	r1, r3
 8003dd6:	1dbb      	adds	r3, r7, #6
 8003dd8:	1c2a      	adds	r2, r5, #0
 8003dda:	801a      	strh	r2, [r3, #0]
 8003ddc:	1d3b      	adds	r3, r7, #4
 8003dde:	1c22      	adds	r2, r4, #0
 8003de0:	801a      	strh	r2, [r3, #0]
 8003de2:	1cbb      	adds	r3, r7, #2
 8003de4:	1c02      	adds	r2, r0, #0
 8003de6:	801a      	strh	r2, [r3, #0]
 8003de8:	003b      	movs	r3, r7
 8003dea:	1c0a      	adds	r2, r1, #0
 8003dec:	801a      	strh	r2, [r3, #0]
	writeLine(x, y, x + w - 1, y, color);
 8003dee:	1dbb      	adds	r3, r7, #6
 8003df0:	881a      	ldrh	r2, [r3, #0]
 8003df2:	1cbb      	adds	r3, r7, #2
 8003df4:	881b      	ldrh	r3, [r3, #0]
 8003df6:	18d3      	adds	r3, r2, r3
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	3b01      	subs	r3, #1
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	b21a      	sxth	r2, r3
 8003e00:	1d3b      	adds	r3, r7, #4
 8003e02:	2400      	movs	r4, #0
 8003e04:	5f1c      	ldrsh	r4, [r3, r4]
 8003e06:	1d3b      	adds	r3, r7, #4
 8003e08:	2100      	movs	r1, #0
 8003e0a:	5e59      	ldrsh	r1, [r3, r1]
 8003e0c:	1dbb      	adds	r3, r7, #6
 8003e0e:	2000      	movs	r0, #0
 8003e10:	5e18      	ldrsh	r0, [r3, r0]
 8003e12:	003b      	movs	r3, r7
 8003e14:	881b      	ldrh	r3, [r3, #0]
 8003e16:	9300      	str	r3, [sp, #0]
 8003e18:	0023      	movs	r3, r4
 8003e1a:	f7ff fead 	bl	8003b78 <writeLine>
}
 8003e1e:	46c0      	nop			@ (mov r8, r8)
 8003e20:	46bd      	mov	sp, r7
 8003e22:	b002      	add	sp, #8
 8003e24:	bdb0      	pop	{r4, r5, r7, pc}

08003e26 <drawLine>:

void drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8003e26:	b5b0      	push	{r4, r5, r7, lr}
 8003e28:	b086      	sub	sp, #24
 8003e2a:	af02      	add	r7, sp, #8
 8003e2c:	0005      	movs	r5, r0
 8003e2e:	000c      	movs	r4, r1
 8003e30:	0010      	movs	r0, r2
 8003e32:	0019      	movs	r1, r3
 8003e34:	1dbb      	adds	r3, r7, #6
 8003e36:	1c2a      	adds	r2, r5, #0
 8003e38:	801a      	strh	r2, [r3, #0]
 8003e3a:	1d3b      	adds	r3, r7, #4
 8003e3c:	1c22      	adds	r2, r4, #0
 8003e3e:	801a      	strh	r2, [r3, #0]
 8003e40:	1cbb      	adds	r3, r7, #2
 8003e42:	1c02      	adds	r2, r0, #0
 8003e44:	801a      	strh	r2, [r3, #0]
 8003e46:	003b      	movs	r3, r7
 8003e48:	1c0a      	adds	r2, r1, #0
 8003e4a:	801a      	strh	r2, [r3, #0]
    if(x0 == x1){
 8003e4c:	1dba      	adds	r2, r7, #6
 8003e4e:	1cbb      	adds	r3, r7, #2
 8003e50:	2100      	movs	r1, #0
 8003e52:	5e52      	ldrsh	r2, [r2, r1]
 8003e54:	2100      	movs	r1, #0
 8003e56:	5e5b      	ldrsh	r3, [r3, r1]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d12a      	bne.n	8003eb2 <drawLine+0x8c>
        if(y0 > y1) _swap_int16_t(y0, y1);
 8003e5c:	1d3a      	adds	r2, r7, #4
 8003e5e:	003b      	movs	r3, r7
 8003e60:	2100      	movs	r1, #0
 8003e62:	5e52      	ldrsh	r2, [r2, r1]
 8003e64:	2100      	movs	r1, #0
 8003e66:	5e5b      	ldrsh	r3, [r3, r1]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	dd0c      	ble.n	8003e86 <drawLine+0x60>
 8003e6c:	210c      	movs	r1, #12
 8003e6e:	187b      	adds	r3, r7, r1
 8003e70:	1d3a      	adds	r2, r7, #4
 8003e72:	8812      	ldrh	r2, [r2, #0]
 8003e74:	801a      	strh	r2, [r3, #0]
 8003e76:	1d3b      	adds	r3, r7, #4
 8003e78:	003a      	movs	r2, r7
 8003e7a:	8812      	ldrh	r2, [r2, #0]
 8003e7c:	801a      	strh	r2, [r3, #0]
 8003e7e:	003b      	movs	r3, r7
 8003e80:	187a      	adds	r2, r7, r1
 8003e82:	8812      	ldrh	r2, [r2, #0]
 8003e84:	801a      	strh	r2, [r3, #0]
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
 8003e86:	003b      	movs	r3, r7
 8003e88:	881a      	ldrh	r2, [r3, #0]
 8003e8a:	1d3b      	adds	r3, r7, #4
 8003e8c:	881b      	ldrh	r3, [r3, #0]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	3301      	adds	r3, #1
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	b21a      	sxth	r2, r3
 8003e98:	2320      	movs	r3, #32
 8003e9a:	18fb      	adds	r3, r7, r3
 8003e9c:	881c      	ldrh	r4, [r3, #0]
 8003e9e:	1d3b      	adds	r3, r7, #4
 8003ea0:	2100      	movs	r1, #0
 8003ea2:	5e59      	ldrsh	r1, [r3, r1]
 8003ea4:	1dbb      	adds	r3, r7, #6
 8003ea6:	2000      	movs	r0, #0
 8003ea8:	5e18      	ldrsh	r0, [r3, r0]
 8003eaa:	0023      	movs	r3, r4
 8003eac:	f7ff ff5d 	bl	8003d6a <drawFastVLine>
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
    } else {
        writeLine(x0, y0, x1, y1, color);
    }
}
 8003eb0:	e045      	b.n	8003f3e <drawLine+0x118>
    } else if(y0 == y1){
 8003eb2:	1d3a      	adds	r2, r7, #4
 8003eb4:	003b      	movs	r3, r7
 8003eb6:	2100      	movs	r1, #0
 8003eb8:	5e52      	ldrsh	r2, [r2, r1]
 8003eba:	2100      	movs	r1, #0
 8003ebc:	5e5b      	ldrsh	r3, [r3, r1]
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d12a      	bne.n	8003f18 <drawLine+0xf2>
        if(x0 > x1) _swap_int16_t(x0, x1);
 8003ec2:	1dba      	adds	r2, r7, #6
 8003ec4:	1cbb      	adds	r3, r7, #2
 8003ec6:	2100      	movs	r1, #0
 8003ec8:	5e52      	ldrsh	r2, [r2, r1]
 8003eca:	2100      	movs	r1, #0
 8003ecc:	5e5b      	ldrsh	r3, [r3, r1]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	dd0c      	ble.n	8003eec <drawLine+0xc6>
 8003ed2:	210e      	movs	r1, #14
 8003ed4:	187b      	adds	r3, r7, r1
 8003ed6:	1dba      	adds	r2, r7, #6
 8003ed8:	8812      	ldrh	r2, [r2, #0]
 8003eda:	801a      	strh	r2, [r3, #0]
 8003edc:	1dbb      	adds	r3, r7, #6
 8003ede:	1cba      	adds	r2, r7, #2
 8003ee0:	8812      	ldrh	r2, [r2, #0]
 8003ee2:	801a      	strh	r2, [r3, #0]
 8003ee4:	1cbb      	adds	r3, r7, #2
 8003ee6:	187a      	adds	r2, r7, r1
 8003ee8:	8812      	ldrh	r2, [r2, #0]
 8003eea:	801a      	strh	r2, [r3, #0]
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
 8003eec:	1cbb      	adds	r3, r7, #2
 8003eee:	881a      	ldrh	r2, [r3, #0]
 8003ef0:	1dbb      	adds	r3, r7, #6
 8003ef2:	881b      	ldrh	r3, [r3, #0]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	3301      	adds	r3, #1
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	b21a      	sxth	r2, r3
 8003efe:	2320      	movs	r3, #32
 8003f00:	18fb      	adds	r3, r7, r3
 8003f02:	881c      	ldrh	r4, [r3, #0]
 8003f04:	1d3b      	adds	r3, r7, #4
 8003f06:	2100      	movs	r1, #0
 8003f08:	5e59      	ldrsh	r1, [r3, r1]
 8003f0a:	1dbb      	adds	r3, r7, #6
 8003f0c:	2000      	movs	r0, #0
 8003f0e:	5e18      	ldrsh	r0, [r3, r0]
 8003f10:	0023      	movs	r3, r4
 8003f12:	f7ff ff59 	bl	8003dc8 <drawFastHLine>
}
 8003f16:	e012      	b.n	8003f3e <drawLine+0x118>
        writeLine(x0, y0, x1, y1, color);
 8003f18:	003b      	movs	r3, r7
 8003f1a:	2400      	movs	r4, #0
 8003f1c:	5f1c      	ldrsh	r4, [r3, r4]
 8003f1e:	1cbb      	adds	r3, r7, #2
 8003f20:	2200      	movs	r2, #0
 8003f22:	5e9a      	ldrsh	r2, [r3, r2]
 8003f24:	1d3b      	adds	r3, r7, #4
 8003f26:	2100      	movs	r1, #0
 8003f28:	5e59      	ldrsh	r1, [r3, r1]
 8003f2a:	1dbb      	adds	r3, r7, #6
 8003f2c:	2000      	movs	r0, #0
 8003f2e:	5e18      	ldrsh	r0, [r3, r0]
 8003f30:	2320      	movs	r3, #32
 8003f32:	18fb      	adds	r3, r7, r3
 8003f34:	881b      	ldrh	r3, [r3, #0]
 8003f36:	9300      	str	r3, [sp, #0]
 8003f38:	0023      	movs	r3, r4
 8003f3a:	f7ff fe1d 	bl	8003b78 <writeLine>
}
 8003f3e:	46c0      	nop			@ (mov r8, r8)
 8003f40:	46bd      	mov	sp, r7
 8003f42:	b004      	add	sp, #16
 8003f44:	bdb0      	pop	{r4, r5, r7, pc}

08003f46 <drawString>:
void drawString(int16_t x, int16_t y, char* c, int16_t textColor, int16_t bgColor, uint8_t size, uint8_t spacing)
{
 8003f46:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f48:	b089      	sub	sp, #36	@ 0x24
 8003f4a:	af02      	add	r7, sp, #8
 8003f4c:	0004      	movs	r4, r0
 8003f4e:	0008      	movs	r0, r1
 8003f50:	60ba      	str	r2, [r7, #8]
 8003f52:	0019      	movs	r1, r3
 8003f54:	230e      	movs	r3, #14
 8003f56:	18fb      	adds	r3, r7, r3
 8003f58:	1c22      	adds	r2, r4, #0
 8003f5a:	801a      	strh	r2, [r3, #0]
 8003f5c:	230c      	movs	r3, #12
 8003f5e:	18fb      	adds	r3, r7, r3
 8003f60:	1c02      	adds	r2, r0, #0
 8003f62:	801a      	strh	r2, [r3, #0]
 8003f64:	1dbb      	adds	r3, r7, #6
 8003f66:	1c0a      	adds	r2, r1, #0
 8003f68:	801a      	strh	r2, [r3, #0]
	uint16_t i =0;
 8003f6a:	2316      	movs	r3, #22
 8003f6c:	18fb      	adds	r3, r7, r3
 8003f6e:	2200      	movs	r2, #0
 8003f70:	801a      	strh	r2, [r3, #0]

	while(c[i])
 8003f72:	e03f      	b.n	8003ff4 <drawString+0xae>
	{
		drawChar(x, y, c[i], textColor, bgColor, size);
 8003f74:	2516      	movs	r5, #22
 8003f76:	197b      	adds	r3, r7, r5
 8003f78:	881b      	ldrh	r3, [r3, #0]
 8003f7a:	68ba      	ldr	r2, [r7, #8]
 8003f7c:	18d3      	adds	r3, r2, r3
 8003f7e:	781b      	ldrb	r3, [r3, #0]
 8003f80:	469c      	mov	ip, r3
 8003f82:	1dbb      	adds	r3, r7, #6
 8003f84:	2400      	movs	r4, #0
 8003f86:	5f1c      	ldrsh	r4, [r3, r4]
 8003f88:	230c      	movs	r3, #12
 8003f8a:	18fb      	adds	r3, r7, r3
 8003f8c:	2100      	movs	r1, #0
 8003f8e:	5e59      	ldrsh	r1, [r3, r1]
 8003f90:	260e      	movs	r6, #14
 8003f92:	19bb      	adds	r3, r7, r6
 8003f94:	2000      	movs	r0, #0
 8003f96:	5e18      	ldrsh	r0, [r3, r0]
 8003f98:	232c      	movs	r3, #44	@ 0x2c
 8003f9a:	2208      	movs	r2, #8
 8003f9c:	189b      	adds	r3, r3, r2
 8003f9e:	19db      	adds	r3, r3, r7
 8003fa0:	781b      	ldrb	r3, [r3, #0]
 8003fa2:	9301      	str	r3, [sp, #4]
 8003fa4:	2328      	movs	r3, #40	@ 0x28
 8003fa6:	189b      	adds	r3, r3, r2
 8003fa8:	19db      	adds	r3, r3, r7
 8003faa:	2200      	movs	r2, #0
 8003fac:	5e9b      	ldrsh	r3, [r3, r2]
 8003fae:	9300      	str	r3, [sp, #0]
 8003fb0:	0023      	movs	r3, r4
 8003fb2:	4662      	mov	r2, ip
 8003fb4:	f000 f82c 	bl	8004010 <drawChar>
		x+=(size*6)+spacing;
 8003fb8:	232c      	movs	r3, #44	@ 0x2c
 8003fba:	2108      	movs	r1, #8
 8003fbc:	185b      	adds	r3, r3, r1
 8003fbe:	19db      	adds	r3, r3, r7
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	1c1a      	adds	r2, r3, #0
 8003fc6:	1c13      	adds	r3, r2, #0
 8003fc8:	18db      	adds	r3, r3, r3
 8003fca:	189b      	adds	r3, r3, r2
 8003fcc:	18db      	adds	r3, r3, r3
 8003fce:	b29a      	uxth	r2, r3
 8003fd0:	2330      	movs	r3, #48	@ 0x30
 8003fd2:	185b      	adds	r3, r3, r1
 8003fd4:	19db      	adds	r3, r3, r7
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	18d3      	adds	r3, r2, r3
 8003fdc:	b29a      	uxth	r2, r3
 8003fde:	19bb      	adds	r3, r7, r6
 8003fe0:	881b      	ldrh	r3, [r3, #0]
 8003fe2:	18d3      	adds	r3, r2, r3
 8003fe4:	b29a      	uxth	r2, r3
 8003fe6:	19bb      	adds	r3, r7, r6
 8003fe8:	801a      	strh	r2, [r3, #0]
		i++;
 8003fea:	197b      	adds	r3, r7, r5
 8003fec:	881a      	ldrh	r2, [r3, #0]
 8003fee:	197b      	adds	r3, r7, r5
 8003ff0:	3201      	adds	r2, #1
 8003ff2:	801a      	strh	r2, [r3, #0]
	while(c[i])
 8003ff4:	2316      	movs	r3, #22
 8003ff6:	18fb      	adds	r3, r7, r3
 8003ff8:	881b      	ldrh	r3, [r3, #0]
 8003ffa:	68ba      	ldr	r2, [r7, #8]
 8003ffc:	18d3      	adds	r3, r2, r3
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d1b7      	bne.n	8003f74 <drawString+0x2e>
	}
}
 8004004:	46c0      	nop			@ (mov r8, r8)
 8004006:	46c0      	nop			@ (mov r8, r8)
 8004008:	46bd      	mov	sp, r7
 800400a:	b007      	add	sp, #28
 800400c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004010 <drawChar>:
void drawChar(int16_t x, int16_t y, char c, int16_t textColor, int16_t bgColor, uint8_t size){
 8004010:	b5b0      	push	{r4, r5, r7, lr}
 8004012:	b088      	sub	sp, #32
 8004014:	af02      	add	r7, sp, #8
 8004016:	0005      	movs	r5, r0
 8004018:	000c      	movs	r4, r1
 800401a:	0010      	movs	r0, r2
 800401c:	0019      	movs	r1, r3
 800401e:	1dbb      	adds	r3, r7, #6
 8004020:	1c2a      	adds	r2, r5, #0
 8004022:	801a      	strh	r2, [r3, #0]
 8004024:	1d3b      	adds	r3, r7, #4
 8004026:	1c22      	adds	r2, r4, #0
 8004028:	801a      	strh	r2, [r3, #0]
 800402a:	1cfb      	adds	r3, r7, #3
 800402c:	1c02      	adds	r2, r0, #0
 800402e:	701a      	strb	r2, [r3, #0]
 8004030:	003b      	movs	r3, r7
 8004032:	1c0a      	adds	r2, r1, #0
 8004034:	801a      	strh	r2, [r3, #0]
     //(y >= _height))           //||
     //((x + 5 * size - 1) < 0) ||
     //((y + 8 * size - 1) < 0))
   // return;

  for (i=0; i<6; i++ ) {
 8004036:	2300      	movs	r3, #0
 8004038:	613b      	str	r3, [r7, #16]
 800403a:	e0bd      	b.n	80041b8 <drawChar+0x1a8>
    if ((i) == 5)
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	2b05      	cmp	r3, #5
 8004040:	d104      	bne.n	800404c <drawChar+0x3c>
      line = 0x0;
 8004042:	2317      	movs	r3, #23
 8004044:	18fb      	adds	r3, r7, r3
 8004046:	2200      	movs	r2, #0
 8004048:	701a      	strb	r2, [r3, #0]
 800404a:	e00b      	b.n	8004064 <drawChar+0x54>
    else
      line = Font[(c*5)+(i)];
 800404c:	1cfb      	adds	r3, r7, #3
 800404e:	781a      	ldrb	r2, [r3, #0]
 8004050:	0013      	movs	r3, r2
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	189a      	adds	r2, r3, r2
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	18d2      	adds	r2, r2, r3
 800405a:	2317      	movs	r3, #23
 800405c:	18fb      	adds	r3, r7, r3
 800405e:	495b      	ldr	r1, [pc, #364]	@ (80041cc <drawChar+0x1bc>)
 8004060:	5c8a      	ldrb	r2, [r1, r2]
 8004062:	701a      	strb	r2, [r3, #0]
    for (j = 0; j<8; j++) {
 8004064:	2300      	movs	r3, #0
 8004066:	60fb      	str	r3, [r7, #12]
 8004068:	e09f      	b.n	80041aa <drawChar+0x19a>
      if (line & 0x1) {
 800406a:	2317      	movs	r3, #23
 800406c:	18fb      	adds	r3, r7, r3
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	2201      	movs	r2, #1
 8004072:	4013      	ands	r3, r2
 8004074:	d043      	beq.n	80040fe <drawChar+0xee>
        if (size == 1)
 8004076:	232c      	movs	r3, #44	@ 0x2c
 8004078:	18fb      	adds	r3, r7, r3
 800407a:	781b      	ldrb	r3, [r3, #0]
 800407c:	2b01      	cmp	r3, #1
 800407e:	d115      	bne.n	80040ac <drawChar+0x9c>
          writePixel(x+(i), y+(7-j), textColor);
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	b29a      	uxth	r2, r3
 8004084:	1dbb      	adds	r3, r7, #6
 8004086:	881b      	ldrh	r3, [r3, #0]
 8004088:	18d3      	adds	r3, r2, r3
 800408a:	b29b      	uxth	r3, r3
 800408c:	b218      	sxth	r0, r3
 800408e:	1d3b      	adds	r3, r7, #4
 8004090:	881a      	ldrh	r2, [r3, #0]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	b29b      	uxth	r3, r3
 8004096:	1ad3      	subs	r3, r2, r3
 8004098:	b29b      	uxth	r3, r3
 800409a:	3307      	adds	r3, #7
 800409c:	b29b      	uxth	r3, r3
 800409e:	b219      	sxth	r1, r3
 80040a0:	003b      	movs	r3, r7
 80040a2:	881b      	ldrh	r3, [r3, #0]
 80040a4:	001a      	movs	r2, r3
 80040a6:	f7ff fd49 	bl	8003b3c <writePixel>
 80040aa:	e075      	b.n	8004198 <drawChar+0x188>
        else {
          fillRect(x+((i)*size), y+((7-j)*size), size, size, textColor);
 80040ac:	212c      	movs	r1, #44	@ 0x2c
 80040ae:	187b      	adds	r3, r7, r1
 80040b0:	781b      	ldrb	r3, [r3, #0]
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	693a      	ldr	r2, [r7, #16]
 80040b6:	b292      	uxth	r2, r2
 80040b8:	4353      	muls	r3, r2
 80040ba:	b29a      	uxth	r2, r3
 80040bc:	1dbb      	adds	r3, r7, #6
 80040be:	881b      	ldrh	r3, [r3, #0]
 80040c0:	18d3      	adds	r3, r2, r3
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	b218      	sxth	r0, r3
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2207      	movs	r2, #7
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	000c      	movs	r4, r1
 80040d0:	187a      	adds	r2, r7, r1
 80040d2:	7812      	ldrb	r2, [r2, #0]
 80040d4:	b292      	uxth	r2, r2
 80040d6:	4353      	muls	r3, r2
 80040d8:	b29a      	uxth	r2, r3
 80040da:	1d3b      	adds	r3, r7, #4
 80040dc:	881b      	ldrh	r3, [r3, #0]
 80040de:	18d3      	adds	r3, r2, r3
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	b219      	sxth	r1, r3
 80040e4:	193b      	adds	r3, r7, r4
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	b21a      	sxth	r2, r3
 80040ea:	193b      	adds	r3, r7, r4
 80040ec:	781b      	ldrb	r3, [r3, #0]
 80040ee:	b21c      	sxth	r4, r3
 80040f0:	003b      	movs	r3, r7
 80040f2:	881b      	ldrh	r3, [r3, #0]
 80040f4:	9300      	str	r3, [sp, #0]
 80040f6:	0023      	movs	r3, r4
 80040f8:	f7ff fc9c 	bl	8003a34 <fillRect>
 80040fc:	e04c      	b.n	8004198 <drawChar+0x188>
        }
      } else if (bgColor != textColor) {
 80040fe:	2428      	movs	r4, #40	@ 0x28
 8004100:	193b      	adds	r3, r7, r4
 8004102:	0039      	movs	r1, r7
 8004104:	2200      	movs	r2, #0
 8004106:	5e9a      	ldrsh	r2, [r3, r2]
 8004108:	2300      	movs	r3, #0
 800410a:	5ecb      	ldrsh	r3, [r1, r3]
 800410c:	429a      	cmp	r2, r3
 800410e:	d043      	beq.n	8004198 <drawChar+0x188>
        if (size == 1) // default size
 8004110:	232c      	movs	r3, #44	@ 0x2c
 8004112:	18fb      	adds	r3, r7, r3
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	2b01      	cmp	r3, #1
 8004118:	d115      	bne.n	8004146 <drawChar+0x136>
          writePixel(x+(i), y+(7-j), bgColor);
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	b29a      	uxth	r2, r3
 800411e:	1dbb      	adds	r3, r7, #6
 8004120:	881b      	ldrh	r3, [r3, #0]
 8004122:	18d3      	adds	r3, r2, r3
 8004124:	b29b      	uxth	r3, r3
 8004126:	b218      	sxth	r0, r3
 8004128:	1d3b      	adds	r3, r7, #4
 800412a:	881a      	ldrh	r2, [r3, #0]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	b29b      	uxth	r3, r3
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	b29b      	uxth	r3, r3
 8004134:	3307      	adds	r3, #7
 8004136:	b29b      	uxth	r3, r3
 8004138:	b219      	sxth	r1, r3
 800413a:	193b      	adds	r3, r7, r4
 800413c:	881b      	ldrh	r3, [r3, #0]
 800413e:	001a      	movs	r2, r3
 8004140:	f7ff fcfc 	bl	8003b3c <writePixel>
 8004144:	e028      	b.n	8004198 <drawChar+0x188>
        else {  // big size
          fillRect(x+(i)*size, y+(7-j)*size, size, size, bgColor);
 8004146:	212c      	movs	r1, #44	@ 0x2c
 8004148:	187b      	adds	r3, r7, r1
 800414a:	781b      	ldrb	r3, [r3, #0]
 800414c:	b29b      	uxth	r3, r3
 800414e:	693a      	ldr	r2, [r7, #16]
 8004150:	b292      	uxth	r2, r2
 8004152:	4353      	muls	r3, r2
 8004154:	b29a      	uxth	r2, r3
 8004156:	1dbb      	adds	r3, r7, #6
 8004158:	881b      	ldrh	r3, [r3, #0]
 800415a:	18d3      	adds	r3, r2, r3
 800415c:	b29b      	uxth	r3, r3
 800415e:	b218      	sxth	r0, r3
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2207      	movs	r2, #7
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	b29b      	uxth	r3, r3
 8004168:	000c      	movs	r4, r1
 800416a:	187a      	adds	r2, r7, r1
 800416c:	7812      	ldrb	r2, [r2, #0]
 800416e:	b292      	uxth	r2, r2
 8004170:	4353      	muls	r3, r2
 8004172:	b29a      	uxth	r2, r3
 8004174:	1d3b      	adds	r3, r7, #4
 8004176:	881b      	ldrh	r3, [r3, #0]
 8004178:	18d3      	adds	r3, r2, r3
 800417a:	b29b      	uxth	r3, r3
 800417c:	b219      	sxth	r1, r3
 800417e:	193b      	adds	r3, r7, r4
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	b21a      	sxth	r2, r3
 8004184:	193b      	adds	r3, r7, r4
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	b21c      	sxth	r4, r3
 800418a:	2328      	movs	r3, #40	@ 0x28
 800418c:	18fb      	adds	r3, r7, r3
 800418e:	881b      	ldrh	r3, [r3, #0]
 8004190:	9300      	str	r3, [sp, #0]
 8004192:	0023      	movs	r3, r4
 8004194:	f7ff fc4e 	bl	8003a34 <fillRect>
        }
      }
      line >>= 1;
 8004198:	2217      	movs	r2, #23
 800419a:	18bb      	adds	r3, r7, r2
 800419c:	18ba      	adds	r2, r7, r2
 800419e:	7812      	ldrb	r2, [r2, #0]
 80041a0:	0852      	lsrs	r2, r2, #1
 80041a2:	701a      	strb	r2, [r3, #0]
    for (j = 0; j<8; j++) {
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	3301      	adds	r3, #1
 80041a8:	60fb      	str	r3, [r7, #12]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2b07      	cmp	r3, #7
 80041ae:	dc00      	bgt.n	80041b2 <drawChar+0x1a2>
 80041b0:	e75b      	b.n	800406a <drawChar+0x5a>
  for (i=0; i<6; i++ ) {
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	3301      	adds	r3, #1
 80041b6:	613b      	str	r3, [r7, #16]
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	2b05      	cmp	r3, #5
 80041bc:	dc00      	bgt.n	80041c0 <drawChar+0x1b0>
 80041be:	e73d      	b.n	800403c <drawChar+0x2c>
    }
  }
}
 80041c0:	46c0      	nop			@ (mov r8, r8)
 80041c2:	46c0      	nop			@ (mov r8, r8)
 80041c4:	46bd      	mov	sp, r7
 80041c6:	b006      	add	sp, #24
 80041c8:	bdb0      	pop	{r4, r5, r7, pc}
 80041ca:	46c0      	nop			@ (mov r8, r8)
 80041cc:	080115dc 	.word	0x080115dc

080041d0 <fillScreen>:
        if(a > b) _swap_int16_t(a,b);
        drawFastHLine(a, y, b-a+1, color);
    }
}

void fillScreen(uint16_t color) {
 80041d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041d2:	b091      	sub	sp, #68	@ 0x44
 80041d4:	af04      	add	r7, sp, #16
 80041d6:	231e      	movs	r3, #30
 80041d8:	18f9      	adds	r1, r7, r3
 80041da:	8008      	strh	r0, [r1, #0]
 80041dc:	4669      	mov	r1, sp
 80041de:	000e      	movs	r6, r1
    uint16_t pallette[] = {color};
 80041e0:	210c      	movs	r1, #12
 80041e2:	2318      	movs	r3, #24
 80041e4:	18cb      	adds	r3, r1, r3
 80041e6:	19d9      	adds	r1, r3, r7
 80041e8:	231e      	movs	r3, #30
 80041ea:	18f8      	adds	r0, r7, r3
 80041ec:	8800      	ldrh	r0, [r0, #0]
 80041ee:	8008      	strh	r0, [r1, #0]
    uint16_t pixels[_width*_height][2];
 80041f0:	492f      	ldr	r1, [pc, #188]	@ (80042b0 <fillScreen+0xe0>)
 80041f2:	2300      	movs	r3, #0
 80041f4:	5ec9      	ldrsh	r1, [r1, r3]
 80041f6:	0008      	movs	r0, r1
 80041f8:	492e      	ldr	r1, [pc, #184]	@ (80042b4 <fillScreen+0xe4>)
 80041fa:	2300      	movs	r3, #0
 80041fc:	5ec9      	ldrsh	r1, [r1, r3]
 80041fe:	4341      	muls	r1, r0
 8004200:	1e48      	subs	r0, r1, #1
 8004202:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8004204:	0008      	movs	r0, r1
 8004206:	6138      	str	r0, [r7, #16]
 8004208:	2000      	movs	r0, #0
 800420a:	6178      	str	r0, [r7, #20]
 800420c:	693a      	ldr	r2, [r7, #16]
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	0010      	movs	r0, r2
 8004212:	0ec0      	lsrs	r0, r0, #27
 8004214:	613a      	str	r2, [r7, #16]
 8004216:	617b      	str	r3, [r7, #20]
 8004218:	015d      	lsls	r5, r3, #5
 800421a:	4305      	orrs	r5, r0
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	015c      	lsls	r4, r3, #5
 8004220:	0008      	movs	r0, r1
 8004222:	6038      	str	r0, [r7, #0]
 8004224:	2000      	movs	r0, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	683c      	ldr	r4, [r7, #0]
 800422a:	687d      	ldr	r5, [r7, #4]
 800422c:	0023      	movs	r3, r4
 800422e:	0ed8      	lsrs	r0, r3, #27
 8004230:	002b      	movs	r3, r5
 8004232:	015b      	lsls	r3, r3, #5
 8004234:	60fb      	str	r3, [r7, #12]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	4303      	orrs	r3, r0
 800423a:	60fb      	str	r3, [r7, #12]
 800423c:	0023      	movs	r3, r4
 800423e:	015b      	lsls	r3, r3, #5
 8004240:	60bb      	str	r3, [r7, #8]
 8004242:	000b      	movs	r3, r1
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	3307      	adds	r3, #7
 8004248:	08db      	lsrs	r3, r3, #3
 800424a:	00db      	lsls	r3, r3, #3
 800424c:	466a      	mov	r2, sp
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	469d      	mov	sp, r3
 8004252:	ab04      	add	r3, sp, #16
 8004254:	3301      	adds	r3, #1
 8004256:	085b      	lsrs	r3, r3, #1
 8004258:	005b      	lsls	r3, r3, #1
 800425a:	62bb      	str	r3, [r7, #40]	@ 0x28

    pixels[0][0] = 0;
 800425c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800425e:	2200      	movs	r2, #0
 8004260:	801a      	strh	r2, [r3, #0]
    pixels[0][1] = _width*_height;
 8004262:	4b13      	ldr	r3, [pc, #76]	@ (80042b0 <fillScreen+0xe0>)
 8004264:	2200      	movs	r2, #0
 8004266:	5e9b      	ldrsh	r3, [r3, r2]
 8004268:	b29b      	uxth	r3, r3
 800426a:	4a12      	ldr	r2, [pc, #72]	@ (80042b4 <fillScreen+0xe4>)
 800426c:	2000      	movs	r0, #0
 800426e:	5e12      	ldrsh	r2, [r2, r0]
 8004270:	b292      	uxth	r2, r2
 8004272:	4353      	muls	r3, r2
 8004274:	b29a      	uxth	r2, r3
 8004276:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004278:	805a      	strh	r2, [r3, #2]
    drawImage(pixels, pallette, 0, 0, _width, _height, 1);
 800427a:	4b0d      	ldr	r3, [pc, #52]	@ (80042b0 <fillScreen+0xe0>)
 800427c:	2200      	movs	r2, #0
 800427e:	5e9b      	ldrsh	r3, [r3, r2]
 8004280:	b29b      	uxth	r3, r3
 8004282:	4a0c      	ldr	r2, [pc, #48]	@ (80042b4 <fillScreen+0xe4>)
 8004284:	2000      	movs	r0, #0
 8004286:	5e12      	ldrsh	r2, [r2, r0]
 8004288:	b292      	uxth	r2, r2
 800428a:	210c      	movs	r1, #12
 800428c:	2018      	movs	r0, #24
 800428e:	1809      	adds	r1, r1, r0
 8004290:	19c9      	adds	r1, r1, r7
 8004292:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004294:	2401      	movs	r4, #1
 8004296:	9402      	str	r4, [sp, #8]
 8004298:	9201      	str	r2, [sp, #4]
 800429a:	9300      	str	r3, [sp, #0]
 800429c:	2300      	movs	r3, #0
 800429e:	2200      	movs	r2, #0
 80042a0:	f000 f80a 	bl	80042b8 <drawImage>
 80042a4:	46b5      	mov	sp, r6
	//fillRect(0, 0, _width, _height, color);
}
 80042a6:	46c0      	nop			@ (mov r8, r8)
 80042a8:	46bd      	mov	sp, r7
 80042aa:	b00d      	add	sp, #52	@ 0x34
 80042ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042ae:	46c0      	nop			@ (mov r8, r8)
 80042b0:	20000f28 	.word	0x20000f28
 80042b4:	20000f2a 	.word	0x20000f2a

080042b8 <drawImage>:

void drawImage(uint16_t image[][2], uint16_t palette[], uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t c)
{
 80042b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042ba:	46c6      	mov	lr, r8
 80042bc:	b500      	push	{lr}
 80042be:	b092      	sub	sp, #72	@ 0x48
 80042c0:	af02      	add	r7, sp, #8
 80042c2:	6278      	str	r0, [r7, #36]	@ 0x24
 80042c4:	6239      	str	r1, [r7, #32]
 80042c6:	0019      	movs	r1, r3
 80042c8:	231e      	movs	r3, #30
 80042ca:	18fb      	adds	r3, r7, r3
 80042cc:	801a      	strh	r2, [r3, #0]
 80042ce:	231c      	movs	r3, #28
 80042d0:	18fb      	adds	r3, r7, r3
 80042d2:	1c0a      	adds	r2, r1, #0
 80042d4:	801a      	strh	r2, [r3, #0]
 80042d6:	466b      	mov	r3, sp
 80042d8:	4698      	mov	r8, r3
	uint16_t i;
	uint16_t j;
	uint16_t totalInd =0;
 80042da:	2322      	movs	r3, #34	@ 0x22
 80042dc:	2118      	movs	r1, #24
 80042de:	185b      	adds	r3, r3, r1
 80042e0:	19db      	adds	r3, r3, r7
 80042e2:	2200      	movs	r2, #0
 80042e4:	801a      	strh	r2, [r3, #0]
	uint16_t ind;
	uint16_t count;
	uint16_t bufffer[w*h];
 80042e6:	2340      	movs	r3, #64	@ 0x40
 80042e8:	185b      	adds	r3, r3, r1
 80042ea:	19db      	adds	r3, r3, r7
 80042ec:	881b      	ldrh	r3, [r3, #0]
 80042ee:	2244      	movs	r2, #68	@ 0x44
 80042f0:	1852      	adds	r2, r2, r1
 80042f2:	19d2      	adds	r2, r2, r7
 80042f4:	8812      	ldrh	r2, [r2, #0]
 80042f6:	4353      	muls	r3, r2
 80042f8:	1e5a      	subs	r2, r3, #1
 80042fa:	637a      	str	r2, [r7, #52]	@ 0x34
 80042fc:	001a      	movs	r2, r3
 80042fe:	60ba      	str	r2, [r7, #8]
 8004300:	2200      	movs	r2, #0
 8004302:	60fa      	str	r2, [r7, #12]
 8004304:	68b8      	ldr	r0, [r7, #8]
 8004306:	68f9      	ldr	r1, [r7, #12]
 8004308:	0002      	movs	r2, r0
 800430a:	0f12      	lsrs	r2, r2, #28
 800430c:	000e      	movs	r6, r1
 800430e:	0136      	lsls	r6, r6, #4
 8004310:	617e      	str	r6, [r7, #20]
 8004312:	697e      	ldr	r6, [r7, #20]
 8004314:	4316      	orrs	r6, r2
 8004316:	617e      	str	r6, [r7, #20]
 8004318:	0002      	movs	r2, r0
 800431a:	0112      	lsls	r2, r2, #4
 800431c:	613a      	str	r2, [r7, #16]
 800431e:	001a      	movs	r2, r3
 8004320:	603a      	str	r2, [r7, #0]
 8004322:	2200      	movs	r2, #0
 8004324:	607a      	str	r2, [r7, #4]
 8004326:	6838      	ldr	r0, [r7, #0]
 8004328:	6879      	ldr	r1, [r7, #4]
 800432a:	0002      	movs	r2, r0
 800432c:	0f12      	lsrs	r2, r2, #28
 800432e:	000e      	movs	r6, r1
 8004330:	0135      	lsls	r5, r6, #4
 8004332:	4315      	orrs	r5, r2
 8004334:	0002      	movs	r2, r0
 8004336:	0114      	lsls	r4, r2, #4
 8004338:	005b      	lsls	r3, r3, #1
 800433a:	3307      	adds	r3, #7
 800433c:	08db      	lsrs	r3, r3, #3
 800433e:	00db      	lsls	r3, r3, #3
 8004340:	466a      	mov	r2, sp
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	469d      	mov	sp, r3
 8004346:	ab02      	add	r3, sp, #8
 8004348:	3301      	adds	r3, #1
 800434a:	085b      	lsrs	r3, r3, #1
 800434c:	005b      	lsls	r3, r3, #1
 800434e:	633b      	str	r3, [r7, #48]	@ 0x30
for(i=0; i<c; i++)
 8004350:	2326      	movs	r3, #38	@ 0x26
 8004352:	2118      	movs	r1, #24
 8004354:	185b      	adds	r3, r3, r1
 8004356:	19db      	adds	r3, r3, r7
 8004358:	2200      	movs	r2, #0
 800435a:	801a      	strh	r2, [r3, #0]
 800435c:	e04d      	b.n	80043fa <drawImage+0x142>
{
	ind = image[i][0];
 800435e:	2126      	movs	r1, #38	@ 0x26
 8004360:	2018      	movs	r0, #24
 8004362:	180b      	adds	r3, r1, r0
 8004364:	19db      	adds	r3, r3, r7
 8004366:	881b      	ldrh	r3, [r3, #0]
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800436c:	18d2      	adds	r2, r2, r3
 800436e:	2316      	movs	r3, #22
 8004370:	181b      	adds	r3, r3, r0
 8004372:	19db      	adds	r3, r3, r7
 8004374:	8812      	ldrh	r2, [r2, #0]
 8004376:	801a      	strh	r2, [r3, #0]
	count = image[i][1];
 8004378:	180b      	adds	r3, r1, r0
 800437a:	19db      	adds	r3, r3, r7
 800437c:	881b      	ldrh	r3, [r3, #0]
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004382:	18d2      	adds	r2, r2, r3
 8004384:	2314      	movs	r3, #20
 8004386:	181b      	adds	r3, r3, r0
 8004388:	19db      	adds	r3, r3, r7
 800438a:	8852      	ldrh	r2, [r2, #2]
 800438c:	801a      	strh	r2, [r3, #0]
	for(j=0; j<count; j++)
 800438e:	2324      	movs	r3, #36	@ 0x24
 8004390:	181b      	adds	r3, r3, r0
 8004392:	19db      	adds	r3, r3, r7
 8004394:	2200      	movs	r2, #0
 8004396:	801a      	strh	r2, [r3, #0]
 8004398:	e01c      	b.n	80043d4 <drawImage+0x11c>
	{
		bufffer[totalInd++] = palette[ind];
 800439a:	2316      	movs	r3, #22
 800439c:	2418      	movs	r4, #24
 800439e:	191b      	adds	r3, r3, r4
 80043a0:	19db      	adds	r3, r3, r7
 80043a2:	881b      	ldrh	r3, [r3, #0]
 80043a4:	005b      	lsls	r3, r3, #1
 80043a6:	6a3a      	ldr	r2, [r7, #32]
 80043a8:	18d2      	adds	r2, r2, r3
 80043aa:	2122      	movs	r1, #34	@ 0x22
 80043ac:	190b      	adds	r3, r1, r4
 80043ae:	19db      	adds	r3, r3, r7
 80043b0:	881b      	ldrh	r3, [r3, #0]
 80043b2:	1909      	adds	r1, r1, r4
 80043b4:	19c9      	adds	r1, r1, r7
 80043b6:	1c58      	adds	r0, r3, #1
 80043b8:	8008      	strh	r0, [r1, #0]
 80043ba:	0018      	movs	r0, r3
 80043bc:	8811      	ldrh	r1, [r2, #0]
 80043be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043c0:	0042      	lsls	r2, r0, #1
 80043c2:	52d1      	strh	r1, [r2, r3]
	for(j=0; j<count; j++)
 80043c4:	2124      	movs	r1, #36	@ 0x24
 80043c6:	190b      	adds	r3, r1, r4
 80043c8:	19db      	adds	r3, r3, r7
 80043ca:	881a      	ldrh	r2, [r3, #0]
 80043cc:	190b      	adds	r3, r1, r4
 80043ce:	19db      	adds	r3, r3, r7
 80043d0:	3201      	adds	r2, #1
 80043d2:	801a      	strh	r2, [r3, #0]
 80043d4:	2324      	movs	r3, #36	@ 0x24
 80043d6:	2018      	movs	r0, #24
 80043d8:	181b      	adds	r3, r3, r0
 80043da:	19da      	adds	r2, r3, r7
 80043dc:	2314      	movs	r3, #20
 80043de:	181b      	adds	r3, r3, r0
 80043e0:	19db      	adds	r3, r3, r7
 80043e2:	8812      	ldrh	r2, [r2, #0]
 80043e4:	881b      	ldrh	r3, [r3, #0]
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d3d7      	bcc.n	800439a <drawImage+0xe2>
for(i=0; i<c; i++)
 80043ea:	2126      	movs	r1, #38	@ 0x26
 80043ec:	180b      	adds	r3, r1, r0
 80043ee:	19db      	adds	r3, r3, r7
 80043f0:	881a      	ldrh	r2, [r3, #0]
 80043f2:	180b      	adds	r3, r1, r0
 80043f4:	19db      	adds	r3, r3, r7
 80043f6:	3201      	adds	r2, #1
 80043f8:	801a      	strh	r2, [r3, #0]
 80043fa:	2326      	movs	r3, #38	@ 0x26
 80043fc:	2118      	movs	r1, #24
 80043fe:	185b      	adds	r3, r3, r1
 8004400:	19da      	adds	r2, r3, r7
 8004402:	2348      	movs	r3, #72	@ 0x48
 8004404:	185b      	adds	r3, r3, r1
 8004406:	19db      	adds	r3, r3, r7
 8004408:	8812      	ldrh	r2, [r2, #0]
 800440a:	881b      	ldrh	r3, [r3, #0]
 800440c:	429a      	cmp	r2, r3
 800440e:	d3a6      	bcc.n	800435e <drawImage+0xa6>
	}
}
ST7735_DrawImage(y, x, w, h, bufffer);
 8004410:	2344      	movs	r3, #68	@ 0x44
 8004412:	185b      	adds	r3, r3, r1
 8004414:	19db      	adds	r3, r3, r7
 8004416:	881c      	ldrh	r4, [r3, #0]
 8004418:	2340      	movs	r3, #64	@ 0x40
 800441a:	185b      	adds	r3, r3, r1
 800441c:	19db      	adds	r3, r3, r7
 800441e:	881a      	ldrh	r2, [r3, #0]
 8004420:	231e      	movs	r3, #30
 8004422:	18fb      	adds	r3, r7, r3
 8004424:	8819      	ldrh	r1, [r3, #0]
 8004426:	231c      	movs	r3, #28
 8004428:	18fb      	adds	r3, r7, r3
 800442a:	8818      	ldrh	r0, [r3, #0]
 800442c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800442e:	9300      	str	r3, [sp, #0]
 8004430:	0023      	movs	r3, r4
 8004432:	f000 fa27 	bl	8004884 <ST7735_DrawImage>
 8004436:	46c5      	mov	sp, r8
}
 8004438:	46c0      	nop			@ (mov r8, r8)
 800443a:	46bd      	mov	sp, r7
 800443c:	b010      	add	sp, #64	@ 0x40
 800443e:	bc80      	pop	{r7}
 8004440:	46b8      	mov	r8, r7
 8004442:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004444 <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 8004444:	b580      	push	{r7, lr}
 8004446:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8004448:	23a0      	movs	r3, #160	@ 0xa0
 800444a:	05db      	lsls	r3, r3, #23
 800444c:	2200      	movs	r2, #0
 800444e:	2120      	movs	r1, #32
 8004450:	0018      	movs	r0, r3
 8004452:	f004 fbb6 	bl	8008bc2 <HAL_GPIO_WritePin>
}
 8004456:	46c0      	nop			@ (mov r8, r8)
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <ST7735_Unselect>:

void ST7735_Unselect()
{
 800445c:	b580      	push	{r7, lr}
 800445e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8004460:	23a0      	movs	r3, #160	@ 0xa0
 8004462:	05db      	lsls	r3, r3, #23
 8004464:	2201      	movs	r2, #1
 8004466:	2120      	movs	r1, #32
 8004468:	0018      	movs	r0, r3
 800446a:	f004 fbaa 	bl	8008bc2 <HAL_GPIO_WritePin>
}
 800446e:	46c0      	nop			@ (mov r8, r8)
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}

08004474 <ST7735_Reset>:

void ST7735_Reset()
{
 8004474:	b580      	push	{r7, lr}
 8004476:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 8004478:	2380      	movs	r3, #128	@ 0x80
 800447a:	0219      	lsls	r1, r3, #8
 800447c:	23a0      	movs	r3, #160	@ 0xa0
 800447e:	05db      	lsls	r3, r3, #23
 8004480:	2200      	movs	r2, #0
 8004482:	0018      	movs	r0, r3
 8004484:	f004 fb9d 	bl	8008bc2 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8004488:	2005      	movs	r0, #5
 800448a:	f004 f8f9 	bl	8008680 <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 800448e:	2380      	movs	r3, #128	@ 0x80
 8004490:	0219      	lsls	r1, r3, #8
 8004492:	23a0      	movs	r3, #160	@ 0xa0
 8004494:	05db      	lsls	r3, r3, #23
 8004496:	2201      	movs	r2, #1
 8004498:	0018      	movs	r0, r3
 800449a:	f004 fb92 	bl	8008bc2 <HAL_GPIO_WritePin>
}
 800449e:	46c0      	nop			@ (mov r8, r8)
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b082      	sub	sp, #8
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	0002      	movs	r2, r0
 80044ac:	1dfb      	adds	r3, r7, #7
 80044ae:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 80044b0:	23a0      	movs	r3, #160	@ 0xa0
 80044b2:	05db      	lsls	r3, r3, #23
 80044b4:	2200      	movs	r2, #0
 80044b6:	2110      	movs	r1, #16
 80044b8:	0018      	movs	r0, r3
 80044ba:	f004 fb82 	bl	8008bc2 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80044be:	2301      	movs	r3, #1
 80044c0:	425b      	negs	r3, r3
 80044c2:	1df9      	adds	r1, r7, #7
 80044c4:	4803      	ldr	r0, [pc, #12]	@ (80044d4 <ST7735_WriteCommand+0x30>)
 80044c6:	2201      	movs	r2, #1
 80044c8:	f007 f834 	bl	800b534 <HAL_SPI_Transmit>
}
 80044cc:	46c0      	nop			@ (mov r8, r8)
 80044ce:	46bd      	mov	sp, r7
 80044d0:	b002      	add	sp, #8
 80044d2:	bd80      	pop	{r7, pc}
 80044d4:	20001fd4 	.word	0x20001fd4

080044d8 <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 80044e2:	23a0      	movs	r3, #160	@ 0xa0
 80044e4:	05db      	lsls	r3, r3, #23
 80044e6:	2201      	movs	r2, #1
 80044e8:	2110      	movs	r1, #16
 80044ea:	0018      	movs	r0, r3
 80044ec:	f004 fb69 	bl	8008bc2 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	b29a      	uxth	r2, r3
 80044f4:	2301      	movs	r3, #1
 80044f6:	425b      	negs	r3, r3
 80044f8:	6879      	ldr	r1, [r7, #4]
 80044fa:	4803      	ldr	r0, [pc, #12]	@ (8004508 <ST7735_WriteData+0x30>)
 80044fc:	f007 f81a 	bl	800b534 <HAL_SPI_Transmit>
}
 8004500:	46c0      	nop			@ (mov r8, r8)
 8004502:	46bd      	mov	sp, r7
 8004504:	b002      	add	sp, #8
 8004506:	bd80      	pop	{r7, pc}
 8004508:	20001fd4 	.word	0x20001fd4

0800450c <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 800450c:	b590      	push	{r4, r7, lr}
 800450e:	b085      	sub	sp, #20
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	1c5a      	adds	r2, r3, #1
 8004518:	607a      	str	r2, [r7, #4]
 800451a:	220f      	movs	r2, #15
 800451c:	18ba      	adds	r2, r7, r2
 800451e:	781b      	ldrb	r3, [r3, #0]
 8004520:	7013      	strb	r3, [r2, #0]
    while(numCommands--) {
 8004522:	e04a      	b.n	80045ba <DisplayInit+0xae>
        uint8_t cmd = *addr++;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	1c5a      	adds	r2, r3, #1
 8004528:	607a      	str	r2, [r7, #4]
 800452a:	210b      	movs	r1, #11
 800452c:	187a      	adds	r2, r7, r1
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	7013      	strb	r3, [r2, #0]
        ST7735_WriteCommand(cmd);
 8004532:	187b      	adds	r3, r7, r1
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	0018      	movs	r0, r3
 8004538:	f7ff ffb4 	bl	80044a4 <ST7735_WriteCommand>

        numArgs = *addr++;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	1c5a      	adds	r2, r3, #1
 8004540:	607a      	str	r2, [r7, #4]
 8004542:	200a      	movs	r0, #10
 8004544:	183a      	adds	r2, r7, r0
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	7013      	strb	r3, [r2, #0]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 800454a:	183b      	adds	r3, r7, r0
 800454c:	781b      	ldrb	r3, [r3, #0]
 800454e:	b29a      	uxth	r2, r3
 8004550:	230c      	movs	r3, #12
 8004552:	18fb      	adds	r3, r7, r3
 8004554:	2180      	movs	r1, #128	@ 0x80
 8004556:	400a      	ands	r2, r1
 8004558:	801a      	strh	r2, [r3, #0]
        numArgs &= ~DELAY;
 800455a:	183b      	adds	r3, r7, r0
 800455c:	183a      	adds	r2, r7, r0
 800455e:	7812      	ldrb	r2, [r2, #0]
 8004560:	217f      	movs	r1, #127	@ 0x7f
 8004562:	400a      	ands	r2, r1
 8004564:	701a      	strb	r2, [r3, #0]
        if(numArgs) {
 8004566:	183b      	adds	r3, r7, r0
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d00c      	beq.n	8004588 <DisplayInit+0x7c>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 800456e:	0004      	movs	r4, r0
 8004570:	183b      	adds	r3, r7, r0
 8004572:	781a      	ldrb	r2, [r3, #0]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	0011      	movs	r1, r2
 8004578:	0018      	movs	r0, r3
 800457a:	f7ff ffad 	bl	80044d8 <ST7735_WriteData>
            addr += numArgs;
 800457e:	193b      	adds	r3, r7, r4
 8004580:	781b      	ldrb	r3, [r3, #0]
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	18d3      	adds	r3, r2, r3
 8004586:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8004588:	210c      	movs	r1, #12
 800458a:	187b      	adds	r3, r7, r1
 800458c:	881b      	ldrh	r3, [r3, #0]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d013      	beq.n	80045ba <DisplayInit+0xae>
            ms = *addr++;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	1c5a      	adds	r2, r3, #1
 8004596:	607a      	str	r2, [r7, #4]
 8004598:	781a      	ldrb	r2, [r3, #0]
 800459a:	187b      	adds	r3, r7, r1
 800459c:	801a      	strh	r2, [r3, #0]
            if(ms == 255) ms = 500;
 800459e:	187b      	adds	r3, r7, r1
 80045a0:	881b      	ldrh	r3, [r3, #0]
 80045a2:	2bff      	cmp	r3, #255	@ 0xff
 80045a4:	d103      	bne.n	80045ae <DisplayInit+0xa2>
 80045a6:	187b      	adds	r3, r7, r1
 80045a8:	22fa      	movs	r2, #250	@ 0xfa
 80045aa:	0052      	lsls	r2, r2, #1
 80045ac:	801a      	strh	r2, [r3, #0]
            HAL_Delay(ms);
 80045ae:	230c      	movs	r3, #12
 80045b0:	18fb      	adds	r3, r7, r3
 80045b2:	881b      	ldrh	r3, [r3, #0]
 80045b4:	0018      	movs	r0, r3
 80045b6:	f004 f863 	bl	8008680 <HAL_Delay>
    while(numCommands--) {
 80045ba:	220f      	movs	r2, #15
 80045bc:	18bb      	adds	r3, r7, r2
 80045be:	781b      	ldrb	r3, [r3, #0]
 80045c0:	18ba      	adds	r2, r7, r2
 80045c2:	1e59      	subs	r1, r3, #1
 80045c4:	7011      	strb	r1, [r2, #0]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d1ac      	bne.n	8004524 <DisplayInit+0x18>
        }
    }
}
 80045ca:	46c0      	nop			@ (mov r8, r8)
 80045cc:	46c0      	nop			@ (mov r8, r8)
 80045ce:	46bd      	mov	sp, r7
 80045d0:	b005      	add	sp, #20
 80045d2:	bd90      	pop	{r4, r7, pc}

080045d4 <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 80045d4:	b5b0      	push	{r4, r5, r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
 80045da:	0005      	movs	r5, r0
 80045dc:	000c      	movs	r4, r1
 80045de:	0010      	movs	r0, r2
 80045e0:	0019      	movs	r1, r3
 80045e2:	1dfb      	adds	r3, r7, #7
 80045e4:	1c2a      	adds	r2, r5, #0
 80045e6:	701a      	strb	r2, [r3, #0]
 80045e8:	1dbb      	adds	r3, r7, #6
 80045ea:	1c22      	adds	r2, r4, #0
 80045ec:	701a      	strb	r2, [r3, #0]
 80045ee:	1d7b      	adds	r3, r7, #5
 80045f0:	1c02      	adds	r2, r0, #0
 80045f2:	701a      	strb	r2, [r3, #0]
 80045f4:	1d3b      	adds	r3, r7, #4
 80045f6:	1c0a      	adds	r2, r1, #0
 80045f8:	701a      	strb	r2, [r3, #0]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 80045fa:	202a      	movs	r0, #42	@ 0x2a
 80045fc:	f7ff ff52 	bl	80044a4 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 8004600:	210c      	movs	r1, #12
 8004602:	187b      	adds	r3, r7, r1
 8004604:	2200      	movs	r2, #0
 8004606:	701a      	strb	r2, [r3, #0]
 8004608:	4b1c      	ldr	r3, [pc, #112]	@ (800467c <ST7735_SetAddressWindow+0xa8>)
 800460a:	781a      	ldrb	r2, [r3, #0]
 800460c:	1dfb      	adds	r3, r7, #7
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	18d3      	adds	r3, r2, r3
 8004612:	b2da      	uxtb	r2, r3
 8004614:	187b      	adds	r3, r7, r1
 8004616:	705a      	strb	r2, [r3, #1]
 8004618:	187b      	adds	r3, r7, r1
 800461a:	2200      	movs	r2, #0
 800461c:	709a      	strb	r2, [r3, #2]
 800461e:	4b17      	ldr	r3, [pc, #92]	@ (800467c <ST7735_SetAddressWindow+0xa8>)
 8004620:	781a      	ldrb	r2, [r3, #0]
 8004622:	1d7b      	adds	r3, r7, #5
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	18d3      	adds	r3, r2, r3
 8004628:	b2da      	uxtb	r2, r3
 800462a:	187b      	adds	r3, r7, r1
 800462c:	70da      	strb	r2, [r3, #3]
    ST7735_WriteData(data, sizeof(data));
 800462e:	000c      	movs	r4, r1
 8004630:	187b      	adds	r3, r7, r1
 8004632:	2104      	movs	r1, #4
 8004634:	0018      	movs	r0, r3
 8004636:	f7ff ff4f 	bl	80044d8 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 800463a:	202b      	movs	r0, #43	@ 0x2b
 800463c:	f7ff ff32 	bl	80044a4 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 8004640:	4b0f      	ldr	r3, [pc, #60]	@ (8004680 <ST7735_SetAddressWindow+0xac>)
 8004642:	781a      	ldrb	r2, [r3, #0]
 8004644:	1dbb      	adds	r3, r7, #6
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	18d3      	adds	r3, r2, r3
 800464a:	b2da      	uxtb	r2, r3
 800464c:	0021      	movs	r1, r4
 800464e:	187b      	adds	r3, r7, r1
 8004650:	705a      	strb	r2, [r3, #1]
    data[3] = y1 + _ystart;
 8004652:	4b0b      	ldr	r3, [pc, #44]	@ (8004680 <ST7735_SetAddressWindow+0xac>)
 8004654:	781a      	ldrb	r2, [r3, #0]
 8004656:	1d3b      	adds	r3, r7, #4
 8004658:	781b      	ldrb	r3, [r3, #0]
 800465a:	18d3      	adds	r3, r2, r3
 800465c:	b2da      	uxtb	r2, r3
 800465e:	187b      	adds	r3, r7, r1
 8004660:	70da      	strb	r2, [r3, #3]
    ST7735_WriteData(data, sizeof(data));
 8004662:	187b      	adds	r3, r7, r1
 8004664:	2104      	movs	r1, #4
 8004666:	0018      	movs	r0, r3
 8004668:	f7ff ff36 	bl	80044d8 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 800466c:	202c      	movs	r0, #44	@ 0x2c
 800466e:	f7ff ff19 	bl	80044a4 <ST7735_WriteCommand>
}
 8004672:	46c0      	nop			@ (mov r8, r8)
 8004674:	46bd      	mov	sp, r7
 8004676:	b004      	add	sp, #16
 8004678:	bdb0      	pop	{r4, r5, r7, pc}
 800467a:	46c0      	nop			@ (mov r8, r8)
 800467c:	20000f2f 	.word	0x20000f2f
 8004680:	20000f30 	.word	0x20000f30

08004684 <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b082      	sub	sp, #8
 8004688:	af00      	add	r7, sp, #0
 800468a:	0002      	movs	r2, r0
 800468c:	1dfb      	adds	r3, r7, #7
 800468e:	701a      	strb	r2, [r3, #0]
    ST7735_Select();
 8004690:	f7ff fed8 	bl	8004444 <ST7735_Select>
    ST7735_Reset();
 8004694:	f7ff feee 	bl	8004474 <ST7735_Reset>
    DisplayInit(init_cmds1);
 8004698:	4b0b      	ldr	r3, [pc, #44]	@ (80046c8 <ST7735_Init+0x44>)
 800469a:	0018      	movs	r0, r3
 800469c:	f7ff ff36 	bl	800450c <DisplayInit>
    DisplayInit(init_cmds2);
 80046a0:	4b0a      	ldr	r3, [pc, #40]	@ (80046cc <ST7735_Init+0x48>)
 80046a2:	0018      	movs	r0, r3
 80046a4:	f7ff ff32 	bl	800450c <DisplayInit>
    DisplayInit(init_cmds3);
 80046a8:	4b09      	ldr	r3, [pc, #36]	@ (80046d0 <ST7735_Init+0x4c>)
 80046aa:	0018      	movs	r0, r3
 80046ac:	f7ff ff2e 	bl	800450c <DisplayInit>
    //rowstart = 3;
#else
    //_colstart = 0;
    //rowstart = 0;
#endif
    ST7735_SetRotation (rotation);
 80046b0:	1dfb      	adds	r3, r7, #7
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	0018      	movs	r0, r3
 80046b6:	f000 f80d 	bl	80046d4 <ST7735_SetRotation>
    ST7735_Unselect();
 80046ba:	f7ff fecf 	bl	800445c <ST7735_Unselect>

}
 80046be:	46c0      	nop			@ (mov r8, r8)
 80046c0:	46bd      	mov	sp, r7
 80046c2:	b002      	add	sp, #8
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	46c0      	nop			@ (mov r8, r8)
 80046c8:	08011ad8 	.word	0x08011ad8
 80046cc:	08011b10 	.word	0x08011b10
 80046d0:	08011b20 	.word	0x08011b20

080046d4 <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	0002      	movs	r2, r0
 80046dc:	1dfb      	adds	r3, r7, #7
 80046de:	701a      	strb	r2, [r3, #0]

  uint8_t madctl = 0;
 80046e0:	230f      	movs	r3, #15
 80046e2:	18fb      	adds	r3, r7, r3
 80046e4:	2200      	movs	r2, #0
 80046e6:	701a      	strb	r2, [r3, #0]

  rotation = m % 4; // can't be higher than 3
 80046e8:	1dfb      	adds	r3, r7, #7
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	2203      	movs	r2, #3
 80046ee:	4013      	ands	r3, r2
 80046f0:	b2da      	uxtb	r2, r3
 80046f2:	4b36      	ldr	r3, [pc, #216]	@ (80047cc <ST7735_SetRotation+0xf8>)
 80046f4:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 80046f6:	4b35      	ldr	r3, [pc, #212]	@ (80047cc <ST7735_SetRotation+0xf8>)
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	2b03      	cmp	r3, #3
 80046fc:	d041      	beq.n	8004782 <ST7735_SetRotation+0xae>
 80046fe:	dc53      	bgt.n	80047a8 <ST7735_SetRotation+0xd4>
 8004700:	2b02      	cmp	r3, #2
 8004702:	d02b      	beq.n	800475c <ST7735_SetRotation+0x88>
 8004704:	dc50      	bgt.n	80047a8 <ST7735_SetRotation+0xd4>
 8004706:	2b00      	cmp	r3, #0
 8004708:	d002      	beq.n	8004710 <ST7735_SetRotation+0x3c>
 800470a:	2b01      	cmp	r3, #1
 800470c:	d013      	beq.n	8004736 <ST7735_SetRotation+0x62>
 800470e:	e04b      	b.n	80047a8 <ST7735_SetRotation+0xd4>
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 8004710:	230f      	movs	r3, #15
 8004712:	18fb      	adds	r3, r7, r3
 8004714:	22c0      	movs	r2, #192	@ 0xc0
 8004716:	701a      	strb	r2, [r3, #0]
      _height = ST7735_HEIGHT;
 8004718:	4b2d      	ldr	r3, [pc, #180]	@ (80047d0 <ST7735_SetRotation+0xfc>)
 800471a:	22a0      	movs	r2, #160	@ 0xa0
 800471c:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 800471e:	4b2d      	ldr	r3, [pc, #180]	@ (80047d4 <ST7735_SetRotation+0x100>)
 8004720:	2280      	movs	r2, #128	@ 0x80
 8004722:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 8004724:	4b2c      	ldr	r3, [pc, #176]	@ (80047d8 <ST7735_SetRotation+0x104>)
 8004726:	781a      	ldrb	r2, [r3, #0]
 8004728:	4b2c      	ldr	r3, [pc, #176]	@ (80047dc <ST7735_SetRotation+0x108>)
 800472a:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 800472c:	4b2c      	ldr	r3, [pc, #176]	@ (80047e0 <ST7735_SetRotation+0x10c>)
 800472e:	781a      	ldrb	r2, [r3, #0]
 8004730:	4b2c      	ldr	r3, [pc, #176]	@ (80047e4 <ST7735_SetRotation+0x110>)
 8004732:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8004734:	e038      	b.n	80047a8 <ST7735_SetRotation+0xd4>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8004736:	230f      	movs	r3, #15
 8004738:	18fb      	adds	r3, r7, r3
 800473a:	22a0      	movs	r2, #160	@ 0xa0
 800473c:	701a      	strb	r2, [r3, #0]
      _width = ST7735_HEIGHT;
 800473e:	4b25      	ldr	r3, [pc, #148]	@ (80047d4 <ST7735_SetRotation+0x100>)
 8004740:	22a0      	movs	r2, #160	@ 0xa0
 8004742:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8004744:	4b22      	ldr	r3, [pc, #136]	@ (80047d0 <ST7735_SetRotation+0xfc>)
 8004746:	2280      	movs	r2, #128	@ 0x80
 8004748:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 800474a:	4b23      	ldr	r3, [pc, #140]	@ (80047d8 <ST7735_SetRotation+0x104>)
 800474c:	781a      	ldrb	r2, [r3, #0]
 800474e:	4b25      	ldr	r3, [pc, #148]	@ (80047e4 <ST7735_SetRotation+0x110>)
 8004750:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8004752:	4b23      	ldr	r3, [pc, #140]	@ (80047e0 <ST7735_SetRotation+0x10c>)
 8004754:	781a      	ldrb	r2, [r3, #0]
 8004756:	4b21      	ldr	r3, [pc, #132]	@ (80047dc <ST7735_SetRotation+0x108>)
 8004758:	701a      	strb	r2, [r3, #0]
#endif
    break;
 800475a:	e025      	b.n	80047a8 <ST7735_SetRotation+0xd4>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_RGB;
#else
      madctl = ST7735_MADCTL_RGB;
 800475c:	230f      	movs	r3, #15
 800475e:	18fb      	adds	r3, r7, r3
 8004760:	2200      	movs	r2, #0
 8004762:	701a      	strb	r2, [r3, #0]
      _height = ST7735_HEIGHT;
 8004764:	4b1a      	ldr	r3, [pc, #104]	@ (80047d0 <ST7735_SetRotation+0xfc>)
 8004766:	22a0      	movs	r2, #160	@ 0xa0
 8004768:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 800476a:	4b1a      	ldr	r3, [pc, #104]	@ (80047d4 <ST7735_SetRotation+0x100>)
 800476c:	2280      	movs	r2, #128	@ 0x80
 800476e:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 8004770:	4b19      	ldr	r3, [pc, #100]	@ (80047d8 <ST7735_SetRotation+0x104>)
 8004772:	781a      	ldrb	r2, [r3, #0]
 8004774:	4b19      	ldr	r3, [pc, #100]	@ (80047dc <ST7735_SetRotation+0x108>)
 8004776:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 8004778:	4b19      	ldr	r3, [pc, #100]	@ (80047e0 <ST7735_SetRotation+0x10c>)
 800477a:	781a      	ldrb	r2, [r3, #0]
 800477c:	4b19      	ldr	r3, [pc, #100]	@ (80047e4 <ST7735_SetRotation+0x110>)
 800477e:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8004780:	e012      	b.n	80047a8 <ST7735_SetRotation+0xd4>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8004782:	230f      	movs	r3, #15
 8004784:	18fb      	adds	r3, r7, r3
 8004786:	2260      	movs	r2, #96	@ 0x60
 8004788:	701a      	strb	r2, [r3, #0]
      _width = ST7735_HEIGHT;
 800478a:	4b12      	ldr	r3, [pc, #72]	@ (80047d4 <ST7735_SetRotation+0x100>)
 800478c:	22a0      	movs	r2, #160	@ 0xa0
 800478e:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8004790:	4b0f      	ldr	r3, [pc, #60]	@ (80047d0 <ST7735_SetRotation+0xfc>)
 8004792:	2280      	movs	r2, #128	@ 0x80
 8004794:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8004796:	4b10      	ldr	r3, [pc, #64]	@ (80047d8 <ST7735_SetRotation+0x104>)
 8004798:	781a      	ldrb	r2, [r3, #0]
 800479a:	4b12      	ldr	r3, [pc, #72]	@ (80047e4 <ST7735_SetRotation+0x110>)
 800479c:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 800479e:	4b10      	ldr	r3, [pc, #64]	@ (80047e0 <ST7735_SetRotation+0x10c>)
 80047a0:	781a      	ldrb	r2, [r3, #0]
 80047a2:	4b0e      	ldr	r3, [pc, #56]	@ (80047dc <ST7735_SetRotation+0x108>)
 80047a4:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80047a6:	46c0      	nop			@ (mov r8, r8)
  }
  ST7735_Select();
 80047a8:	f7ff fe4c 	bl	8004444 <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 80047ac:	2036      	movs	r0, #54	@ 0x36
 80047ae:	f7ff fe79 	bl	80044a4 <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 80047b2:	230f      	movs	r3, #15
 80047b4:	18fb      	adds	r3, r7, r3
 80047b6:	2101      	movs	r1, #1
 80047b8:	0018      	movs	r0, r3
 80047ba:	f7ff fe8d 	bl	80044d8 <ST7735_WriteData>
  ST7735_Unselect();
 80047be:	f7ff fe4d 	bl	800445c <ST7735_Unselect>
}
 80047c2:	46c0      	nop			@ (mov r8, r8)
 80047c4:	46bd      	mov	sp, r7
 80047c6:	b004      	add	sp, #16
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	46c0      	nop			@ (mov r8, r8)
 80047cc:	20000f2c 	.word	0x20000f2c
 80047d0:	20000f2a 	.word	0x20000f2a
 80047d4:	20000f28 	.word	0x20000f28
 80047d8:	20000f2d 	.word	0x20000f2d
 80047dc:	20000f2f 	.word	0x20000f2f
 80047e0:	20000f2e 	.word	0x20000f2e
 80047e4:	20000f30 	.word	0x20000f30

080047e8 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 80047e8:	b590      	push	{r4, r7, lr}
 80047ea:	b085      	sub	sp, #20
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	0004      	movs	r4, r0
 80047f0:	0008      	movs	r0, r1
 80047f2:	0011      	movs	r1, r2
 80047f4:	1dbb      	adds	r3, r7, #6
 80047f6:	1c22      	adds	r2, r4, #0
 80047f8:	801a      	strh	r2, [r3, #0]
 80047fa:	1d3b      	adds	r3, r7, #4
 80047fc:	1c02      	adds	r2, r0, #0
 80047fe:	801a      	strh	r2, [r3, #0]
 8004800:	1cbb      	adds	r3, r7, #2
 8004802:	1c0a      	adds	r2, r1, #0
 8004804:	801a      	strh	r2, [r3, #0]
    if((x >= _width) || (y >= _height))
 8004806:	1dbb      	adds	r3, r7, #6
 8004808:	881b      	ldrh	r3, [r3, #0]
 800480a:	4a1c      	ldr	r2, [pc, #112]	@ (800487c <ST7735_DrawPixel+0x94>)
 800480c:	2100      	movs	r1, #0
 800480e:	5e52      	ldrsh	r2, [r2, r1]
 8004810:	4293      	cmp	r3, r2
 8004812:	da2f      	bge.n	8004874 <ST7735_DrawPixel+0x8c>
 8004814:	1d3b      	adds	r3, r7, #4
 8004816:	881b      	ldrh	r3, [r3, #0]
 8004818:	4a19      	ldr	r2, [pc, #100]	@ (8004880 <ST7735_DrawPixel+0x98>)
 800481a:	2100      	movs	r1, #0
 800481c:	5e52      	ldrsh	r2, [r2, r1]
 800481e:	4293      	cmp	r3, r2
 8004820:	da28      	bge.n	8004874 <ST7735_DrawPixel+0x8c>
        return;

    ST7735_Select();
 8004822:	f7ff fe0f 	bl	8004444 <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 8004826:	1dbb      	adds	r3, r7, #6
 8004828:	881b      	ldrh	r3, [r3, #0]
 800482a:	b2d8      	uxtb	r0, r3
 800482c:	1d3b      	adds	r3, r7, #4
 800482e:	881b      	ldrh	r3, [r3, #0]
 8004830:	b2d9      	uxtb	r1, r3
 8004832:	1dbb      	adds	r3, r7, #6
 8004834:	881b      	ldrh	r3, [r3, #0]
 8004836:	b2db      	uxtb	r3, r3
 8004838:	3301      	adds	r3, #1
 800483a:	b2da      	uxtb	r2, r3
 800483c:	1d3b      	adds	r3, r7, #4
 800483e:	881b      	ldrh	r3, [r3, #0]
 8004840:	b2db      	uxtb	r3, r3
 8004842:	3301      	adds	r3, #1
 8004844:	b2db      	uxtb	r3, r3
 8004846:	f7ff fec5 	bl	80045d4 <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 800484a:	1cbb      	adds	r3, r7, #2
 800484c:	881b      	ldrh	r3, [r3, #0]
 800484e:	0a1b      	lsrs	r3, r3, #8
 8004850:	b29b      	uxth	r3, r3
 8004852:	b2da      	uxtb	r2, r3
 8004854:	210c      	movs	r1, #12
 8004856:	187b      	adds	r3, r7, r1
 8004858:	701a      	strb	r2, [r3, #0]
 800485a:	1cbb      	adds	r3, r7, #2
 800485c:	881b      	ldrh	r3, [r3, #0]
 800485e:	b2da      	uxtb	r2, r3
 8004860:	187b      	adds	r3, r7, r1
 8004862:	705a      	strb	r2, [r3, #1]
    ST7735_WriteData(data, sizeof(data));
 8004864:	187b      	adds	r3, r7, r1
 8004866:	2102      	movs	r1, #2
 8004868:	0018      	movs	r0, r3
 800486a:	f7ff fe35 	bl	80044d8 <ST7735_WriteData>

    ST7735_Unselect();
 800486e:	f7ff fdf5 	bl	800445c <ST7735_Unselect>
 8004872:	e000      	b.n	8004876 <ST7735_DrawPixel+0x8e>
        return;
 8004874:	46c0      	nop			@ (mov r8, r8)
}
 8004876:	46bd      	mov	sp, r7
 8004878:	b005      	add	sp, #20
 800487a:	bd90      	pop	{r4, r7, pc}
 800487c:	20000f28 	.word	0x20000f28
 8004880:	20000f2a 	.word	0x20000f2a

08004884 <ST7735_DrawImage>:
    }

    ST7735_Unselect();
}

void ST7735_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data) {
 8004884:	b5b0      	push	{r4, r5, r7, lr}
 8004886:	b082      	sub	sp, #8
 8004888:	af00      	add	r7, sp, #0
 800488a:	0005      	movs	r5, r0
 800488c:	000c      	movs	r4, r1
 800488e:	0010      	movs	r0, r2
 8004890:	0019      	movs	r1, r3
 8004892:	1dbb      	adds	r3, r7, #6
 8004894:	1c2a      	adds	r2, r5, #0
 8004896:	801a      	strh	r2, [r3, #0]
 8004898:	1d3b      	adds	r3, r7, #4
 800489a:	1c22      	adds	r2, r4, #0
 800489c:	801a      	strh	r2, [r3, #0]
 800489e:	1cbb      	adds	r3, r7, #2
 80048a0:	1c02      	adds	r2, r0, #0
 80048a2:	801a      	strh	r2, [r3, #0]
 80048a4:	003b      	movs	r3, r7
 80048a6:	1c0a      	adds	r2, r1, #0
 80048a8:	801a      	strh	r2, [r3, #0]
    if((x >= _width) || (y >= _height)) return;
 80048aa:	1dbb      	adds	r3, r7, #6
 80048ac:	881b      	ldrh	r3, [r3, #0]
 80048ae:	4a2a      	ldr	r2, [pc, #168]	@ (8004958 <ST7735_DrawImage+0xd4>)
 80048b0:	2100      	movs	r1, #0
 80048b2:	5e52      	ldrsh	r2, [r2, r1]
 80048b4:	4293      	cmp	r3, r2
 80048b6:	da47      	bge.n	8004948 <ST7735_DrawImage+0xc4>
 80048b8:	1d3b      	adds	r3, r7, #4
 80048ba:	881b      	ldrh	r3, [r3, #0]
 80048bc:	4a27      	ldr	r2, [pc, #156]	@ (800495c <ST7735_DrawImage+0xd8>)
 80048be:	2100      	movs	r1, #0
 80048c0:	5e52      	ldrsh	r2, [r2, r1]
 80048c2:	4293      	cmp	r3, r2
 80048c4:	da40      	bge.n	8004948 <ST7735_DrawImage+0xc4>
    if((x + w - 1) >= _width) return;
 80048c6:	1dbb      	adds	r3, r7, #6
 80048c8:	881a      	ldrh	r2, [r3, #0]
 80048ca:	1cbb      	adds	r3, r7, #2
 80048cc:	881b      	ldrh	r3, [r3, #0]
 80048ce:	18d3      	adds	r3, r2, r3
 80048d0:	4a21      	ldr	r2, [pc, #132]	@ (8004958 <ST7735_DrawImage+0xd4>)
 80048d2:	2100      	movs	r1, #0
 80048d4:	5e52      	ldrsh	r2, [r2, r1]
 80048d6:	4293      	cmp	r3, r2
 80048d8:	dc38      	bgt.n	800494c <ST7735_DrawImage+0xc8>
    if((y + h - 1) >= _height) return;
 80048da:	1d3b      	adds	r3, r7, #4
 80048dc:	881a      	ldrh	r2, [r3, #0]
 80048de:	003b      	movs	r3, r7
 80048e0:	881b      	ldrh	r3, [r3, #0]
 80048e2:	18d3      	adds	r3, r2, r3
 80048e4:	4a1d      	ldr	r2, [pc, #116]	@ (800495c <ST7735_DrawImage+0xd8>)
 80048e6:	2100      	movs	r1, #0
 80048e8:	5e52      	ldrsh	r2, [r2, r1]
 80048ea:	4293      	cmp	r3, r2
 80048ec:	dc30      	bgt.n	8004950 <ST7735_DrawImage+0xcc>

    ST7735_Select();
 80048ee:	f7ff fda9 	bl	8004444 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 80048f2:	1dbb      	adds	r3, r7, #6
 80048f4:	881b      	ldrh	r3, [r3, #0]
 80048f6:	b2d8      	uxtb	r0, r3
 80048f8:	1d3b      	adds	r3, r7, #4
 80048fa:	881b      	ldrh	r3, [r3, #0]
 80048fc:	b2d9      	uxtb	r1, r3
 80048fe:	1dbb      	adds	r3, r7, #6
 8004900:	881b      	ldrh	r3, [r3, #0]
 8004902:	b2da      	uxtb	r2, r3
 8004904:	1cbb      	adds	r3, r7, #2
 8004906:	881b      	ldrh	r3, [r3, #0]
 8004908:	b2db      	uxtb	r3, r3
 800490a:	18d3      	adds	r3, r2, r3
 800490c:	b2db      	uxtb	r3, r3
 800490e:	3b01      	subs	r3, #1
 8004910:	b2dc      	uxtb	r4, r3
 8004912:	1d3b      	adds	r3, r7, #4
 8004914:	881b      	ldrh	r3, [r3, #0]
 8004916:	b2da      	uxtb	r2, r3
 8004918:	003b      	movs	r3, r7
 800491a:	881b      	ldrh	r3, [r3, #0]
 800491c:	b2db      	uxtb	r3, r3
 800491e:	18d3      	adds	r3, r2, r3
 8004920:	b2db      	uxtb	r3, r3
 8004922:	3b01      	subs	r3, #1
 8004924:	b2db      	uxtb	r3, r3
 8004926:	0022      	movs	r2, r4
 8004928:	f7ff fe54 	bl	80045d4 <ST7735_SetAddressWindow>
    ST7735_WriteData((uint8_t*)data, sizeof(uint16_t)*w*h);
 800492c:	1cbb      	adds	r3, r7, #2
 800492e:	881b      	ldrh	r3, [r3, #0]
 8004930:	003a      	movs	r2, r7
 8004932:	8812      	ldrh	r2, [r2, #0]
 8004934:	4353      	muls	r3, r2
 8004936:	005a      	lsls	r2, r3, #1
 8004938:	69bb      	ldr	r3, [r7, #24]
 800493a:	0011      	movs	r1, r2
 800493c:	0018      	movs	r0, r3
 800493e:	f7ff fdcb 	bl	80044d8 <ST7735_WriteData>
    ST7735_Unselect();
 8004942:	f7ff fd8b 	bl	800445c <ST7735_Unselect>
 8004946:	e004      	b.n	8004952 <ST7735_DrawImage+0xce>
    if((x >= _width) || (y >= _height)) return;
 8004948:	46c0      	nop			@ (mov r8, r8)
 800494a:	e002      	b.n	8004952 <ST7735_DrawImage+0xce>
    if((x + w - 1) >= _width) return;
 800494c:	46c0      	nop			@ (mov r8, r8)
 800494e:	e000      	b.n	8004952 <ST7735_DrawImage+0xce>
    if((y + h - 1) >= _height) return;
 8004950:	46c0      	nop			@ (mov r8, r8)
}
 8004952:	46bd      	mov	sp, r7
 8004954:	b002      	add	sp, #8
 8004956:	bdb0      	pop	{r4, r5, r7, pc}
 8004958:	20000f28 	.word	0x20000f28
 800495c:	20000f2a 	.word	0x20000f2a

08004960 <minmea_tocoord>:
/**
 * Convert a raw coordinate to a floating point DD.DDD... value.
 * Returns NaN for "unknown" values.
 */
static inline float minmea_tocoord(struct minmea_float *f)
{
 8004960:	b5b0      	push	{r4, r5, r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
    if (f->scale == 0)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d101      	bne.n	8004974 <minmea_tocoord+0x14>
        return NAN;
 8004970:	4b1c      	ldr	r3, [pc, #112]	@ (80049e4 <minmea_tocoord+0x84>)
 8004972:	e033      	b.n	80049dc <minmea_tocoord+0x7c>
    int_least32_t degrees = f->value / (f->scale * 100);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	2164      	movs	r1, #100	@ 0x64
 800497e:	434b      	muls	r3, r1
 8004980:	0019      	movs	r1, r3
 8004982:	0010      	movs	r0, r2
 8004984:	f7fb fc6e 	bl	8000264 <__divsi3>
 8004988:	0003      	movs	r3, r0
 800498a:	60fb      	str	r3, [r7, #12]
    int_least32_t minutes = f->value % (f->scale * 100);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	2164      	movs	r1, #100	@ 0x64
 8004996:	434b      	muls	r3, r1
 8004998:	0019      	movs	r1, r3
 800499a:	0010      	movs	r0, r2
 800499c:	f7fb fd48 	bl	8000430 <__aeabi_idivmod>
 80049a0:	000b      	movs	r3, r1
 80049a2:	60bb      	str	r3, [r7, #8]
    return (float) degrees + (float) minutes / (60 * f->scale);
 80049a4:	68f8      	ldr	r0, [r7, #12]
 80049a6:	f7fc feff 	bl	80017a8 <__aeabi_i2f>
 80049aa:	1c04      	adds	r4, r0, #0
 80049ac:	68b8      	ldr	r0, [r7, #8]
 80049ae:	f7fc fefb 	bl	80017a8 <__aeabi_i2f>
 80049b2:	1c05      	adds	r5, r0, #0
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	685a      	ldr	r2, [r3, #4]
 80049b8:	0013      	movs	r3, r2
 80049ba:	011b      	lsls	r3, r3, #4
 80049bc:	1a9b      	subs	r3, r3, r2
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	0018      	movs	r0, r3
 80049c2:	f7fc fef1 	bl	80017a8 <__aeabi_i2f>
 80049c6:	1c03      	adds	r3, r0, #0
 80049c8:	1c19      	adds	r1, r3, #0
 80049ca:	1c28      	adds	r0, r5, #0
 80049cc:	f7fc f940 	bl	8000c50 <__aeabi_fdiv>
 80049d0:	1c03      	adds	r3, r0, #0
 80049d2:	1c19      	adds	r1, r3, #0
 80049d4:	1c20      	adds	r0, r4, #0
 80049d6:	f7fb ff49 	bl	800086c <__aeabi_fadd>
 80049da:	1c03      	adds	r3, r0, #0
}
 80049dc:	1c18      	adds	r0, r3, #0
 80049de:	46bd      	mov	sp, r7
 80049e0:	b004      	add	sp, #16
 80049e2:	bdb0      	pop	{r4, r5, r7, pc}
 80049e4:	7fc00000 	.word	0x7fc00000

080049e8 <json_getSibling>:

/** Get the next sibling of a JSON property that is within a JSON object or array.
  * @param json A valid handler of a json property.
  * @retval The handler of the next sibling if found.
  * @retval Null pointer if the json property is the last one. */
static inline json_t const* json_getSibling( json_t const* json ) {
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b082      	sub	sp, #8
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
    return json->sibling;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
}
 80049f4:	0018      	movs	r0, r3
 80049f6:	46bd      	mov	sp, r7
 80049f8:	b002      	add	sp, #8
 80049fa:	bd80      	pop	{r7, pc}

080049fc <json_getChild>:
/** Get the first property of a JSON object or array.
  * @param json A valid handler of a json property.
  *             Its type must be JSON_OBJ or JSON_ARRAY.
  * @retval The handler of the first property if there is.
  * @retval Null pointer if the json object has not properties. */
static inline json_t const* json_getChild( json_t const* json ) {
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b082      	sub	sp, #8
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
    return json->u.c.child;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	689b      	ldr	r3, [r3, #8]
}
 8004a08:	0018      	movs	r0, r3
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	b002      	add	sp, #8
 8004a0e:	bd80      	pop	{r7, pc}

08004a10 <json_getInteger>:
}

/** Get the value of a json integer property.
  * @param property A valid handler of a json object. Its type must be JSON_INTEGER.
  * @return The value stdint. */
static inline int64_t json_getInteger( json_t const* property ) {
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b082      	sub	sp, #8
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  return strtoll( property->u.value,(char**)NULL, 10);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	220a      	movs	r2, #10
 8004a1e:	2100      	movs	r1, #0
 8004a20:	0018      	movs	r0, r3
 8004a22:	f009 ff8f 	bl	800e944 <strtoll>
 8004a26:	0002      	movs	r2, r0
 8004a28:	000b      	movs	r3, r1
}
 8004a2a:	0010      	movs	r0, r2
 8004a2c:	0019      	movs	r1, r3
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	b002      	add	sp, #8
 8004a32:	bd80      	pop	{r7, pc}

08004a34 <json_getReal>:

/** Get the value of a json real property.
  * @param property A valid handler of a json object. Its type must be JSON_REAL.
  * @return The value. */
static inline double json_getReal( json_t const* property ) {
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b082      	sub	sp, #8
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  return strtod( property->u.value,(char**)NULL );
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	2100      	movs	r1, #0
 8004a42:	0018      	movs	r0, r3
 8004a44:	f009 fe36 	bl	800e6b4 <strtod>
 8004a48:	0002      	movs	r2, r0
 8004a4a:	000b      	movs	r3, r1
}
 8004a4c:	0010      	movs	r0, r2
 8004a4e:	0019      	movs	r1, r3
 8004a50:	46bd      	mov	sp, r7
 8004a52:	b002      	add	sp, #8
 8004a54:	bd80      	pop	{r7, pc}
	...

08004a58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004a58:	b5b0      	push	{r4, r5, r7, lr}
 8004a5a:	b08c      	sub	sp, #48	@ 0x30
 8004a5c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004a5e:	f003 fd89 	bl	8008574 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004a62:	f000 fc9b 	bl	800539c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  StructInit();
 8004a66:	f001 f9bb 	bl	8005de0 <StructInit>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004a6a:	f000 ff4d 	bl	8005908 <MX_GPIO_Init>
  MX_I2C1_Init();
 8004a6e:	f000 fcf7 	bl	8005460 <MX_I2C1_Init>
  MX_SPI1_Init();
 8004a72:	f000 fde5 	bl	8005640 <MX_SPI1_Init>
  MX_TIM17_Init();
 8004a76:	f000 fe23 	bl	80056c0 <MX_TIM17_Init>
  MX_USART1_UART_Init();
 8004a7a:	f000 fea9 	bl	80057d0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8004a7e:	f000 fef5 	bl	800586c <MX_USART2_UART_Init>
  MX_RTC_Init();
 8004a82:	f000 fd2d 	bl	80054e0 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  PeripheralInit();
 8004a86:	f001 f971 	bl	8005d6c <PeripheralInit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
      //Before entering the while, fill the screen to clear it once
      fillScreen(BLACK);
 8004a8a:	2000      	movs	r0, #0
 8004a8c:	f7ff fba0 	bl	80041d0 <fillScreen>
  while (1)
  {
	  _ADXL343_ReadReg8(0x15, &steps, 1);
 8004a90:	4bb4      	ldr	r3, [pc, #720]	@ (8004d64 <main+0x30c>)
 8004a92:	2201      	movs	r2, #1
 8004a94:	0019      	movs	r1, r3
 8004a96:	2015      	movs	r0, #21
 8004a98:	f001 fa62 	bl	8005f60 <_ADXL343_ReadReg8>

	  //SendData();
	  //ReceiveData();
	  //_ADXL343_ReadReg8(0x00, &steps, 1);
	  if(CheckExp(game.dailyGoal, game.stepsToday)==1)
 8004a9c:	4ab2      	ldr	r2, [pc, #712]	@ (8004d68 <main+0x310>)
 8004a9e:	2392      	movs	r3, #146	@ 0x92
 8004aa0:	005b      	lsls	r3, r3, #1
 8004aa2:	58d3      	ldr	r3, [r2, r3]
 8004aa4:	0018      	movs	r0, r3
 8004aa6:	4ab0      	ldr	r2, [pc, #704]	@ (8004d68 <main+0x310>)
 8004aa8:	2390      	movs	r3, #144	@ 0x90
 8004aaa:	005b      	lsls	r3, r3, #1
 8004aac:	58d3      	ldr	r3, [r2, r3]
 8004aae:	0019      	movs	r1, r3
 8004ab0:	f001 fd64 	bl	800657c <CheckExp>
 8004ab4:	0003      	movs	r3, r0
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d10c      	bne.n	8004ad4 <main+0x7c>
	  {
		  game.mood+=moodIncrementUp;
 8004aba:	4bab      	ldr	r3, [pc, #684]	@ (8004d68 <main+0x310>)
 8004abc:	7c5a      	ldrb	r2, [r3, #17]
 8004abe:	2301      	movs	r3, #1
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	18d3      	adds	r3, r2, r3
 8004ac4:	b2da      	uxtb	r2, r3
 8004ac6:	4ba8      	ldr	r3, [pc, #672]	@ (8004d68 <main+0x310>)
 8004ac8:	745a      	strb	r2, [r3, #17]
		  game.stepsToday=0;
 8004aca:	4aa7      	ldr	r2, [pc, #668]	@ (8004d68 <main+0x310>)
 8004acc:	2390      	movs	r3, #144	@ 0x90
 8004ace:	005b      	lsls	r3, r3, #1
 8004ad0:	2100      	movs	r1, #0
 8004ad2:	50d1      	str	r1, [r2, r3]
	  }
	  if(checkTime){
 8004ad4:	4ba5      	ldr	r3, [pc, #660]	@ (8004d6c <main+0x314>)
 8004ad6:	881b      	ldrh	r3, [r3, #0]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d04a      	beq.n	8004b72 <main+0x11a>
	  if(((game.time.minutes%dayLength)==0) && game.time.seconds>0){
 8004adc:	4ba2      	ldr	r3, [pc, #648]	@ (8004d68 <main+0x310>)
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	2218      	movs	r2, #24
 8004ae2:	0011      	movs	r1, r2
 8004ae4:	0018      	movs	r0, r3
 8004ae6:	f7fb fca3 	bl	8000430 <__aeabi_idivmod>
 8004aea:	1e0b      	subs	r3, r1, #0
 8004aec:	d12c      	bne.n	8004b48 <main+0xf0>
 8004aee:	4b9e      	ldr	r3, [pc, #632]	@ (8004d68 <main+0x310>)
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	dd28      	ble.n	8004b48 <main+0xf0>
		  if(CheckExp(game.dailyGoal, game.stepsToday)==-1)game.mood-=moodIncrementDown;
 8004af6:	4a9c      	ldr	r2, [pc, #624]	@ (8004d68 <main+0x310>)
 8004af8:	2392      	movs	r3, #146	@ 0x92
 8004afa:	005b      	lsls	r3, r3, #1
 8004afc:	58d3      	ldr	r3, [r2, r3]
 8004afe:	0018      	movs	r0, r3
 8004b00:	4a99      	ldr	r2, [pc, #612]	@ (8004d68 <main+0x310>)
 8004b02:	2390      	movs	r3, #144	@ 0x90
 8004b04:	005b      	lsls	r3, r3, #1
 8004b06:	58d3      	ldr	r3, [r2, r3]
 8004b08:	0019      	movs	r1, r3
 8004b0a:	f001 fd37 	bl	800657c <CheckExp>
 8004b0e:	0003      	movs	r3, r0
 8004b10:	3301      	adds	r3, #1
 8004b12:	d107      	bne.n	8004b24 <main+0xcc>
 8004b14:	4b94      	ldr	r3, [pc, #592]	@ (8004d68 <main+0x310>)
 8004b16:	7c5a      	ldrb	r2, [r3, #17]
 8004b18:	2301      	movs	r3, #1
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	1ad3      	subs	r3, r2, r3
 8004b1e:	b2da      	uxtb	r2, r3
 8004b20:	4b91      	ldr	r3, [pc, #580]	@ (8004d68 <main+0x310>)
 8004b22:	745a      	strb	r2, [r3, #17]
		  game.stepsToday=0;
 8004b24:	4a90      	ldr	r2, [pc, #576]	@ (8004d68 <main+0x310>)
 8004b26:	2390      	movs	r3, #144	@ 0x90
 8004b28:	005b      	lsls	r3, r3, #1
 8004b2a:	2100      	movs	r1, #0
 8004b2c:	50d1      	str	r1, [r2, r3]
		  memset(&game.positions, 0, sizeof(game.positions));
 8004b2e:	2380      	movs	r3, #128	@ 0x80
 8004b30:	005a      	lsls	r2, r3, #1
 8004b32:	4b8f      	ldr	r3, [pc, #572]	@ (8004d70 <main+0x318>)
 8004b34:	2100      	movs	r1, #0
 8004b36:	0018      	movs	r0, r3
 8004b38:	f00a f842 	bl	800ebc0 <memset>
		  game.numLocations=0;
 8004b3c:	4b8a      	ldr	r3, [pc, #552]	@ (8004d68 <main+0x310>)
 8004b3e:	2200      	movs	r2, #0
 8004b40:	615a      	str	r2, [r3, #20]
		  checkTime=0;
 8004b42:	4b8a      	ldr	r3, [pc, #552]	@ (8004d6c <main+0x314>)
 8004b44:	2200      	movs	r2, #0
 8004b46:	801a      	strh	r2, [r3, #0]
	  }

	  if(((game.time.minutes%weekLength)==0) && game.time.seconds>0){
 8004b48:	4b87      	ldr	r3, [pc, #540]	@ (8004d68 <main+0x310>)
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	22a8      	movs	r2, #168	@ 0xa8
 8004b4e:	0011      	movs	r1, r2
 8004b50:	0018      	movs	r0, r3
 8004b52:	f7fb fc6d 	bl	8000430 <__aeabi_idivmod>
 8004b56:	1e0b      	subs	r3, r1, #0
 8004b58:	d10b      	bne.n	8004b72 <main+0x11a>
 8004b5a:	4b83      	ldr	r3, [pc, #524]	@ (8004d68 <main+0x310>)
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	dd07      	ble.n	8004b72 <main+0x11a>
		  game.weeklySteps=0;
 8004b62:	4a81      	ldr	r2, [pc, #516]	@ (8004d68 <main+0x310>)
 8004b64:	238e      	movs	r3, #142	@ 0x8e
 8004b66:	005b      	lsls	r3, r3, #1
 8004b68:	2100      	movs	r1, #0
 8004b6a:	50d1      	str	r1, [r2, r3]
		  checkTime=0;
 8004b6c:	4b7f      	ldr	r3, [pc, #508]	@ (8004d6c <main+0x314>)
 8004b6e:	2200      	movs	r2, #0
 8004b70:	801a      	strh	r2, [r3, #0]
	  }
	  }
	  if((game.time.minutes%dayLength)==1) checkTime=1;
 8004b72:	4b7d      	ldr	r3, [pc, #500]	@ (8004d68 <main+0x310>)
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	2218      	movs	r2, #24
 8004b78:	0011      	movs	r1, r2
 8004b7a:	0018      	movs	r0, r3
 8004b7c:	f7fb fc58 	bl	8000430 <__aeabi_idivmod>
 8004b80:	000b      	movs	r3, r1
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d102      	bne.n	8004b8c <main+0x134>
 8004b86:	4b79      	ldr	r3, [pc, #484]	@ (8004d6c <main+0x314>)
 8004b88:	2201      	movs	r2, #1
 8004b8a:	801a      	strh	r2, [r3, #0]
	  if(steps!=0){
 8004b8c:	4b75      	ldr	r3, [pc, #468]	@ (8004d64 <main+0x30c>)
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d027      	beq.n	8004be4 <main+0x18c>
	  game.stepsToday +=steps;
 8004b94:	4a74      	ldr	r2, [pc, #464]	@ (8004d68 <main+0x310>)
 8004b96:	2390      	movs	r3, #144	@ 0x90
 8004b98:	005b      	lsls	r3, r3, #1
 8004b9a:	58d3      	ldr	r3, [r2, r3]
 8004b9c:	4a71      	ldr	r2, [pc, #452]	@ (8004d64 <main+0x30c>)
 8004b9e:	7812      	ldrb	r2, [r2, #0]
 8004ba0:	1899      	adds	r1, r3, r2
 8004ba2:	4a71      	ldr	r2, [pc, #452]	@ (8004d68 <main+0x310>)
 8004ba4:	2390      	movs	r3, #144	@ 0x90
 8004ba6:	005b      	lsls	r3, r3, #1
 8004ba8:	50d1      	str	r1, [r2, r3]
	  game.weeklySteps+=steps;
 8004baa:	4a6f      	ldr	r2, [pc, #444]	@ (8004d68 <main+0x310>)
 8004bac:	238e      	movs	r3, #142	@ 0x8e
 8004bae:	005b      	lsls	r3, r3, #1
 8004bb0:	58d3      	ldr	r3, [r2, r3]
 8004bb2:	4a6c      	ldr	r2, [pc, #432]	@ (8004d64 <main+0x30c>)
 8004bb4:	7812      	ldrb	r2, [r2, #0]
 8004bb6:	1899      	adds	r1, r3, r2
 8004bb8:	4a6b      	ldr	r2, [pc, #428]	@ (8004d68 <main+0x310>)
 8004bba:	238e      	movs	r3, #142	@ 0x8e
 8004bbc:	005b      	lsls	r3, r3, #1
 8004bbe:	50d1      	str	r1, [r2, r3]
	  game.allSteps+=steps;
 8004bc0:	4a69      	ldr	r2, [pc, #420]	@ (8004d68 <main+0x310>)
 8004bc2:	238c      	movs	r3, #140	@ 0x8c
 8004bc4:	005b      	lsls	r3, r3, #1
 8004bc6:	58d3      	ldr	r3, [r2, r3]
 8004bc8:	4a66      	ldr	r2, [pc, #408]	@ (8004d64 <main+0x30c>)
 8004bca:	7812      	ldrb	r2, [r2, #0]
 8004bcc:	1899      	adds	r1, r3, r2
 8004bce:	4a66      	ldr	r2, [pc, #408]	@ (8004d68 <main+0x310>)
 8004bd0:	238c      	movs	r3, #140	@ 0x8c
 8004bd2:	005b      	lsls	r3, r3, #1
 8004bd4:	50d1      	str	r1, [r2, r3]
	  steps=0;
 8004bd6:	4b63      	ldr	r3, [pc, #396]	@ (8004d64 <main+0x30c>)
 8004bd8:	2200      	movs	r2, #0
 8004bda:	701a      	strb	r2, [r3, #0]
	  _ADXL343_WriteReg8(0x7E, 0xB1);
 8004bdc:	21b1      	movs	r1, #177	@ 0xb1
 8004bde:	207e      	movs	r0, #126	@ 0x7e
 8004be0:	f001 f9f0 	bl	8005fc4 <_ADXL343_WriteReg8>
	  }
	  ++updateScreen;
 8004be4:	4b63      	ldr	r3, [pc, #396]	@ (8004d74 <main+0x31c>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	1c5a      	adds	r2, r3, #1
 8004bea:	4b62      	ldr	r3, [pc, #392]	@ (8004d74 <main+0x31c>)
 8004bec:	601a      	str	r2, [r3, #0]
	  //SendData();
	  //HAL_UART_Transmit(&huart2, "hello", 5, 100);
	  switch(currentMenu){
 8004bee:	4b62      	ldr	r3, [pc, #392]	@ (8004d78 <main+0x320>)
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	2b04      	cmp	r3, #4
 8004bf4:	d100      	bne.n	8004bf8 <main+0x1a0>
 8004bf6:	e24a      	b.n	800508e <main+0x636>
 8004bf8:	dd01      	ble.n	8004bfe <main+0x1a6>
 8004bfa:	f000 fba7 	bl	800534c <main+0x8f4>
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d100      	bne.n	8004c04 <main+0x1ac>
 8004c02:	e0cf      	b.n	8004da4 <main+0x34c>
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d000      	beq.n	8004c0a <main+0x1b2>
 8004c08:	e3a0      	b.n	800534c <main+0x8f4>
	  case Main:
		  if((totalFrames)%600==0) GetLatLon();
 8004c0a:	4b5c      	ldr	r3, [pc, #368]	@ (8004d7c <main+0x324>)
 8004c0c:	881b      	ldrh	r3, [r3, #0]
 8004c0e:	2296      	movs	r2, #150	@ 0x96
 8004c10:	0091      	lsls	r1, r2, #2
 8004c12:	0018      	movs	r0, r3
 8004c14:	f7fb fb22 	bl	800025c <__aeabi_uidivmod>
 8004c18:	000b      	movs	r3, r1
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d101      	bne.n	8004c24 <main+0x1cc>
 8004c20:	f001 fcf0 	bl	8006604 <GetLatLon>


		  if(updateScreen>=5)
 8004c24:	4b53      	ldr	r3, [pc, #332]	@ (8004d74 <main+0x31c>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	2b04      	cmp	r3, #4
 8004c2a:	d948      	bls.n	8004cbe <main+0x266>
		  {
			  updateScreen = 0;
 8004c2c:	4b51      	ldr	r3, [pc, #324]	@ (8004d74 <main+0x31c>)
 8004c2e:	2200      	movs	r2, #0
 8004c30:	601a      	str	r2, [r3, #0]
			  //Animate character
			  switch(game.evo)
 8004c32:	4b4d      	ldr	r3, [pc, #308]	@ (8004d68 <main+0x310>)
 8004c34:	7c1b      	ldrb	r3, [r3, #16]
 8004c36:	2b02      	cmp	r3, #2
 8004c38:	d01b      	beq.n	8004c72 <main+0x21a>
 8004c3a:	dc1b      	bgt.n	8004c74 <main+0x21c>
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d002      	beq.n	8004c46 <main+0x1ee>
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d00b      	beq.n	8004c5c <main+0x204>
 8004c44:	e016      	b.n	8004c74 <main+0x21c>
			  {
			  case 0:
				  Animate(animEggSitting,0,30,30,64,64);
 8004c46:	484e      	ldr	r0, [pc, #312]	@ (8004d80 <main+0x328>)
 8004c48:	2340      	movs	r3, #64	@ 0x40
 8004c4a:	9301      	str	r3, [sp, #4]
 8004c4c:	2340      	movs	r3, #64	@ 0x40
 8004c4e:	9300      	str	r3, [sp, #0]
 8004c50:	231e      	movs	r3, #30
 8004c52:	221e      	movs	r2, #30
 8004c54:	2100      	movs	r1, #0
 8004c56:	f001 f947 	bl	8005ee8 <Animate>
				  break;
 8004c5a:	e00b      	b.n	8004c74 <main+0x21c>
			  case 1:
				  //Animate as the baby
				  Animate(animSitting,1,30,30,64,64);
 8004c5c:	4849      	ldr	r0, [pc, #292]	@ (8004d84 <main+0x32c>)
 8004c5e:	2340      	movs	r3, #64	@ 0x40
 8004c60:	9301      	str	r3, [sp, #4]
 8004c62:	2340      	movs	r3, #64	@ 0x40
 8004c64:	9300      	str	r3, [sp, #0]
 8004c66:	231e      	movs	r3, #30
 8004c68:	221e      	movs	r2, #30
 8004c6a:	2101      	movs	r1, #1
 8004c6c:	f001 f93c 	bl	8005ee8 <Animate>
				  break;
 8004c70:	e000      	b.n	8004c74 <main+0x21c>
			  case 2:
				  //Animate as the adult
				  break;
 8004c72:	46c0      	nop			@ (mov r8, r8)
			  }

			  //Update steps
			  drawString(0,150,"-SILLY LITTLE GUY-",WHITE,BLACK,1,1);
 8004c74:	2301      	movs	r3, #1
 8004c76:	425b      	negs	r3, r3
 8004c78:	4a43      	ldr	r2, [pc, #268]	@ (8004d88 <main+0x330>)
 8004c7a:	2101      	movs	r1, #1
 8004c7c:	9102      	str	r1, [sp, #8]
 8004c7e:	2101      	movs	r1, #1
 8004c80:	9101      	str	r1, [sp, #4]
 8004c82:	2100      	movs	r1, #0
 8004c84:	9100      	str	r1, [sp, #0]
 8004c86:	2196      	movs	r1, #150	@ 0x96
 8004c88:	2000      	movs	r0, #0
 8004c8a:	f7ff f95c 	bl	8003f46 <drawString>
			  sprintf(buffer2, "Steps: %d ", game.stepsToday);
 8004c8e:	4a36      	ldr	r2, [pc, #216]	@ (8004d68 <main+0x310>)
 8004c90:	2390      	movs	r3, #144	@ 0x90
 8004c92:	005b      	lsls	r3, r3, #1
 8004c94:	58d2      	ldr	r2, [r2, r3]
 8004c96:	493d      	ldr	r1, [pc, #244]	@ (8004d8c <main+0x334>)
 8004c98:	4b3d      	ldr	r3, [pc, #244]	@ (8004d90 <main+0x338>)
 8004c9a:	0018      	movs	r0, r3
 8004c9c:	f009 ff22 	bl	800eae4 <siprintf>
			  drawString(0, 10, buffer2, WHITE, BLACK, 1, 1);
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	425b      	negs	r3, r3
 8004ca4:	4a3a      	ldr	r2, [pc, #232]	@ (8004d90 <main+0x338>)
 8004ca6:	2101      	movs	r1, #1
 8004ca8:	9102      	str	r1, [sp, #8]
 8004caa:	2101      	movs	r1, #1
 8004cac:	9101      	str	r1, [sp, #4]
 8004cae:	2100      	movs	r1, #0
 8004cb0:	9100      	str	r1, [sp, #0]
 8004cb2:	210a      	movs	r1, #10
 8004cb4:	2000      	movs	r0, #0
 8004cb6:	f7ff f946 	bl	8003f46 <drawString>
			  Emote();
 8004cba:	f001 fdfb 	bl	80068b4 <Emote>
		  }

		  //Interact with the SLG
		  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1) == GPIO_PIN_SET )
 8004cbe:	4b35      	ldr	r3, [pc, #212]	@ (8004d94 <main+0x33c>)
 8004cc0:	2102      	movs	r1, #2
 8004cc2:	0018      	movs	r0, r3
 8004cc4:	f003 ff60 	bl	8008b88 <HAL_GPIO_ReadPin>
 8004cc8:	0003      	movs	r3, r0
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d10f      	bne.n	8004cee <main+0x296>
		  {
			  effect = Evolution;
 8004cce:	4b32      	ldr	r3, [pc, #200]	@ (8004d98 <main+0x340>)
 8004cd0:	2206      	movs	r2, #6
 8004cd2:	701a      	strb	r2, [r3, #0]
			  PlayEffect(effect);
 8004cd4:	4b30      	ldr	r3, [pc, #192]	@ (8004d98 <main+0x340>)
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	0018      	movs	r0, r3
 8004cda:	f000 fee3 	bl	8005aa4 <PlayEffect>
			  game.stepsToday = game.dailyGoal;
 8004cde:	4a22      	ldr	r2, [pc, #136]	@ (8004d68 <main+0x310>)
 8004ce0:	2392      	movs	r3, #146	@ 0x92
 8004ce2:	005b      	lsls	r3, r3, #1
 8004ce4:	58d1      	ldr	r1, [r2, r3]
 8004ce6:	4a20      	ldr	r2, [pc, #128]	@ (8004d68 <main+0x310>)
 8004ce8:	2390      	movs	r3, #144	@ 0x90
 8004cea:	005b      	lsls	r3, r3, #1
 8004cec:	50d1      	str	r1, [r2, r3]
			  //Evolve();
		  }


		  //Change current Menu
		  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_SET ) {
 8004cee:	4b2b      	ldr	r3, [pc, #172]	@ (8004d9c <main+0x344>)
 8004cf0:	2104      	movs	r1, #4
 8004cf2:	0018      	movs	r0, r3
 8004cf4:	f003 ff48 	bl	8008b88 <HAL_GPIO_ReadPin>
 8004cf8:	0003      	movs	r3, r0
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d111      	bne.n	8004d22 <main+0x2ca>
			  effect = MenuBeep;
 8004cfe:	4b26      	ldr	r3, [pc, #152]	@ (8004d98 <main+0x340>)
 8004d00:	2200      	movs	r2, #0
 8004d02:	701a      	strb	r2, [r3, #0]
			  PlayEffect(effect);
 8004d04:	4b24      	ldr	r3, [pc, #144]	@ (8004d98 <main+0x340>)
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	0018      	movs	r0, r3
 8004d0a:	f000 fecb 	bl	8005aa4 <PlayEffect>

			  currentMenu = Settings;
 8004d0e:	4b1a      	ldr	r3, [pc, #104]	@ (8004d78 <main+0x320>)
 8004d10:	2204      	movs	r2, #4
 8004d12:	701a      	strb	r2, [r3, #0]
			  canChange = 0;
 8004d14:	4b22      	ldr	r3, [pc, #136]	@ (8004da0 <main+0x348>)
 8004d16:	2200      	movs	r2, #0
 8004d18:	701a      	strb	r2, [r3, #0]
			  fillScreen(BLACK);
 8004d1a:	2000      	movs	r0, #0
 8004d1c:	f7ff fa58 	bl	80041d0 <fillScreen>
		  }
		  else
			  canChange = 1;


		  break;
 8004d20:	e314      	b.n	800534c <main+0x8f4>
		  else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_SET ) {
 8004d22:	2380      	movs	r3, #128	@ 0x80
 8004d24:	011a      	lsls	r2, r3, #4
 8004d26:	23a0      	movs	r3, #160	@ 0xa0
 8004d28:	05db      	lsls	r3, r3, #23
 8004d2a:	0011      	movs	r1, r2
 8004d2c:	0018      	movs	r0, r3
 8004d2e:	f003 ff2b 	bl	8008b88 <HAL_GPIO_ReadPin>
 8004d32:	0003      	movs	r3, r0
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d111      	bne.n	8004d5c <main+0x304>
			  effect = MenuBeep;
 8004d38:	4b17      	ldr	r3, [pc, #92]	@ (8004d98 <main+0x340>)
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	701a      	strb	r2, [r3, #0]
			  PlayEffect(effect);
 8004d3e:	4b16      	ldr	r3, [pc, #88]	@ (8004d98 <main+0x340>)
 8004d40:	781b      	ldrb	r3, [r3, #0]
 8004d42:	0018      	movs	r0, r3
 8004d44:	f000 feae 	bl	8005aa4 <PlayEffect>
			  currentMenu = StatsDisplay;
 8004d48:	4b0b      	ldr	r3, [pc, #44]	@ (8004d78 <main+0x320>)
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	701a      	strb	r2, [r3, #0]
			  canChange = 0;
 8004d4e:	4b14      	ldr	r3, [pc, #80]	@ (8004da0 <main+0x348>)
 8004d50:	2200      	movs	r2, #0
 8004d52:	701a      	strb	r2, [r3, #0]
			  fillScreen(BLACK);
 8004d54:	2000      	movs	r0, #0
 8004d56:	f7ff fa3b 	bl	80041d0 <fillScreen>
		  break;
 8004d5a:	e2f7      	b.n	800534c <main+0x8f4>
			  canChange = 1;
 8004d5c:	4b10      	ldr	r3, [pc, #64]	@ (8004da0 <main+0x348>)
 8004d5e:	2201      	movs	r2, #1
 8004d60:	701a      	strb	r2, [r3, #0]
		  break;
 8004d62:	e2f3      	b.n	800534c <main+0x8f4>
 8004d64:	20001f44 	.word	0x20001f44
 8004d68:	20000f38 	.word	0x20000f38
 8004d6c:	20000000 	.word	0x20000000
 8004d70:	20000f50 	.word	0x20000f50
 8004d74:	20001ea8 	.word	0x20001ea8
 8004d78:	20000d36 	.word	0x20000d36
 8004d7c:	200010dc 	.word	0x200010dc
 8004d80:	20001ec4 	.word	0x20001ec4
 8004d84:	20001ecc 	.word	0x20001ecc
 8004d88:	08011268 	.word	0x08011268
 8004d8c:	0801127c 	.word	0x0801127c
 8004d90:	20001ee0 	.word	0x20001ee0
 8004d94:	50000800 	.word	0x50000800
 8004d98:	20000f34 	.word	0x20000f34
 8004d9c:	50000400 	.word	0x50000400
 8004da0:	20000d37 	.word	0x20000d37
	  case StatsDisplay:

		  if(updateScreen>=5)
 8004da4:	4bef      	ldr	r3, [pc, #956]	@ (8005164 <main+0x70c>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	2b04      	cmp	r3, #4
 8004daa:	d800      	bhi.n	8004dae <main+0x356>
 8004dac:	e151      	b.n	8005052 <main+0x5fa>
		  {
			  //fillScreen(BLACK);

			  drawString(0, 150, "STEPS", WHITE, BLACK, 1, 1);
 8004dae:	2301      	movs	r3, #1
 8004db0:	425b      	negs	r3, r3
 8004db2:	4aed      	ldr	r2, [pc, #948]	@ (8005168 <main+0x710>)
 8004db4:	2101      	movs	r1, #1
 8004db6:	9102      	str	r1, [sp, #8]
 8004db8:	2101      	movs	r1, #1
 8004dba:	9101      	str	r1, [sp, #4]
 8004dbc:	2100      	movs	r1, #0
 8004dbe:	9100      	str	r1, [sp, #0]
 8004dc0:	2196      	movs	r1, #150	@ 0x96
 8004dc2:	2000      	movs	r0, #0
 8004dc4:	f7ff f8bf 	bl	8003f46 <drawString>
			  sprintf(buffer2, "Today: %d ", game.stepsToday);
 8004dc8:	4ae8      	ldr	r2, [pc, #928]	@ (800516c <main+0x714>)
 8004dca:	2390      	movs	r3, #144	@ 0x90
 8004dcc:	005b      	lsls	r3, r3, #1
 8004dce:	58d2      	ldr	r2, [r2, r3]
 8004dd0:	49e7      	ldr	r1, [pc, #924]	@ (8005170 <main+0x718>)
 8004dd2:	4be8      	ldr	r3, [pc, #928]	@ (8005174 <main+0x71c>)
 8004dd4:	0018      	movs	r0, r3
 8004dd6:	f009 fe85 	bl	800eae4 <siprintf>
			  drawString(0, 140, buffer2, WHITE, BLACK, 1, 1);
 8004dda:	2301      	movs	r3, #1
 8004ddc:	425b      	negs	r3, r3
 8004dde:	4ae5      	ldr	r2, [pc, #916]	@ (8005174 <main+0x71c>)
 8004de0:	2101      	movs	r1, #1
 8004de2:	9102      	str	r1, [sp, #8]
 8004de4:	2101      	movs	r1, #1
 8004de6:	9101      	str	r1, [sp, #4]
 8004de8:	2100      	movs	r1, #0
 8004dea:	9100      	str	r1, [sp, #0]
 8004dec:	218c      	movs	r1, #140	@ 0x8c
 8004dee:	2000      	movs	r0, #0
 8004df0:	f7ff f8a9 	bl	8003f46 <drawString>
			  sprintf(buffer2, "This week: %d ", game.weeklySteps);
 8004df4:	4add      	ldr	r2, [pc, #884]	@ (800516c <main+0x714>)
 8004df6:	238e      	movs	r3, #142	@ 0x8e
 8004df8:	005b      	lsls	r3, r3, #1
 8004dfa:	58d2      	ldr	r2, [r2, r3]
 8004dfc:	49de      	ldr	r1, [pc, #888]	@ (8005178 <main+0x720>)
 8004dfe:	4bdd      	ldr	r3, [pc, #884]	@ (8005174 <main+0x71c>)
 8004e00:	0018      	movs	r0, r3
 8004e02:	f009 fe6f 	bl	800eae4 <siprintf>
			  drawString(0, 130, buffer2, WHITE, BLACK, 1, 1);
 8004e06:	2301      	movs	r3, #1
 8004e08:	425b      	negs	r3, r3
 8004e0a:	4ada      	ldr	r2, [pc, #872]	@ (8005174 <main+0x71c>)
 8004e0c:	2101      	movs	r1, #1
 8004e0e:	9102      	str	r1, [sp, #8]
 8004e10:	2101      	movs	r1, #1
 8004e12:	9101      	str	r1, [sp, #4]
 8004e14:	2100      	movs	r1, #0
 8004e16:	9100      	str	r1, [sp, #0]
 8004e18:	2182      	movs	r1, #130	@ 0x82
 8004e1a:	2000      	movs	r0, #0
 8004e1c:	f7ff f893 	bl	8003f46 <drawString>
			  sprintf(buffer2, "All time: %d ", game.allSteps);
 8004e20:	4ad2      	ldr	r2, [pc, #840]	@ (800516c <main+0x714>)
 8004e22:	238c      	movs	r3, #140	@ 0x8c
 8004e24:	005b      	lsls	r3, r3, #1
 8004e26:	58d2      	ldr	r2, [r2, r3]
 8004e28:	49d4      	ldr	r1, [pc, #848]	@ (800517c <main+0x724>)
 8004e2a:	4bd2      	ldr	r3, [pc, #840]	@ (8005174 <main+0x71c>)
 8004e2c:	0018      	movs	r0, r3
 8004e2e:	f009 fe59 	bl	800eae4 <siprintf>
			  drawString(0, 120, buffer2, WHITE, BLACK, 1, 1);
 8004e32:	2301      	movs	r3, #1
 8004e34:	425b      	negs	r3, r3
 8004e36:	4acf      	ldr	r2, [pc, #828]	@ (8005174 <main+0x71c>)
 8004e38:	2101      	movs	r1, #1
 8004e3a:	9102      	str	r1, [sp, #8]
 8004e3c:	2101      	movs	r1, #1
 8004e3e:	9101      	str	r1, [sp, #4]
 8004e40:	2100      	movs	r1, #0
 8004e42:	9100      	str	r1, [sp, #0]
 8004e44:	2178      	movs	r1, #120	@ 0x78
 8004e46:	2000      	movs	r0, #0
 8004e48:	f7ff f87d 	bl	8003f46 <drawString>
			  drawString(0, 110, "POSITIONS", WHITE, BLACK, 1,1);
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	425b      	negs	r3, r3
 8004e50:	4acb      	ldr	r2, [pc, #812]	@ (8005180 <main+0x728>)
 8004e52:	2101      	movs	r1, #1
 8004e54:	9102      	str	r1, [sp, #8]
 8004e56:	2101      	movs	r1, #1
 8004e58:	9101      	str	r1, [sp, #4]
 8004e5a:	2100      	movs	r1, #0
 8004e5c:	9100      	str	r1, [sp, #0]
 8004e5e:	216e      	movs	r1, #110	@ 0x6e
 8004e60:	2000      	movs	r0, #0
 8004e62:	f7ff f870 	bl	8003f46 <drawString>
			  sprintf(buffer2, "Count/Mult: %d", game.numLocations);
 8004e66:	4bc1      	ldr	r3, [pc, #772]	@ (800516c <main+0x714>)
 8004e68:	695a      	ldr	r2, [r3, #20]
 8004e6a:	49c6      	ldr	r1, [pc, #792]	@ (8005184 <main+0x72c>)
 8004e6c:	4bc1      	ldr	r3, [pc, #772]	@ (8005174 <main+0x71c>)
 8004e6e:	0018      	movs	r0, r3
 8004e70:	f009 fe38 	bl	800eae4 <siprintf>
			  drawString(0, 100, buffer2, WHITE, BLACK, 1, 1);
 8004e74:	2301      	movs	r3, #1
 8004e76:	425b      	negs	r3, r3
 8004e78:	4abe      	ldr	r2, [pc, #760]	@ (8005174 <main+0x71c>)
 8004e7a:	2101      	movs	r1, #1
 8004e7c:	9102      	str	r1, [sp, #8]
 8004e7e:	2101      	movs	r1, #1
 8004e80:	9101      	str	r1, [sp, #4]
 8004e82:	2100      	movs	r1, #0
 8004e84:	9100      	str	r1, [sp, #0]
 8004e86:	2164      	movs	r1, #100	@ 0x64
 8004e88:	2000      	movs	r0, #0
 8004e8a:	f7ff f85c 	bl	8003f46 <drawString>
			  sprintf(buffer2, "Old Lat: %d.%d", (int)(game.positions[game.numLocations-1].lat), abs((int)(((game.positions[game.numLocations-1].lat)*10000))%10000));
 8004e8e:	4bb7      	ldr	r3, [pc, #732]	@ (800516c <main+0x714>)
 8004e90:	695b      	ldr	r3, [r3, #20]
 8004e92:	1e5a      	subs	r2, r3, #1
 8004e94:	4bb5      	ldr	r3, [pc, #724]	@ (800516c <main+0x714>)
 8004e96:	3203      	adds	r2, #3
 8004e98:	00d2      	lsls	r2, r2, #3
 8004e9a:	58d3      	ldr	r3, [r2, r3]
 8004e9c:	1c18      	adds	r0, r3, #0
 8004e9e:	f7fc fc63 	bl	8001768 <__aeabi_f2iz>
 8004ea2:	0004      	movs	r4, r0
 8004ea4:	4bb1      	ldr	r3, [pc, #708]	@ (800516c <main+0x714>)
 8004ea6:	695b      	ldr	r3, [r3, #20]
 8004ea8:	1e5a      	subs	r2, r3, #1
 8004eaa:	4bb0      	ldr	r3, [pc, #704]	@ (800516c <main+0x714>)
 8004eac:	3203      	adds	r2, #3
 8004eae:	00d2      	lsls	r2, r2, #3
 8004eb0:	58d3      	ldr	r3, [r2, r3]
 8004eb2:	49b5      	ldr	r1, [pc, #724]	@ (8005188 <main+0x730>)
 8004eb4:	1c18      	adds	r0, r3, #0
 8004eb6:	f7fc f899 	bl	8000fec <__aeabi_fmul>
 8004eba:	1c03      	adds	r3, r0, #0
 8004ebc:	1c18      	adds	r0, r3, #0
 8004ebe:	f7fc fc53 	bl	8001768 <__aeabi_f2iz>
 8004ec2:	0003      	movs	r3, r0
 8004ec4:	49b1      	ldr	r1, [pc, #708]	@ (800518c <main+0x734>)
 8004ec6:	0018      	movs	r0, r3
 8004ec8:	f7fb fab2 	bl	8000430 <__aeabi_idivmod>
 8004ecc:	000b      	movs	r3, r1
 8004ece:	17da      	asrs	r2, r3, #31
 8004ed0:	189b      	adds	r3, r3, r2
 8004ed2:	4053      	eors	r3, r2
 8004ed4:	49ae      	ldr	r1, [pc, #696]	@ (8005190 <main+0x738>)
 8004ed6:	48a7      	ldr	r0, [pc, #668]	@ (8005174 <main+0x71c>)
 8004ed8:	0022      	movs	r2, r4
 8004eda:	f009 fe03 	bl	800eae4 <siprintf>
			  drawString(0, 90, buffer2, WHITE, BLACK, 1, 1);
 8004ede:	2301      	movs	r3, #1
 8004ee0:	425b      	negs	r3, r3
 8004ee2:	4aa4      	ldr	r2, [pc, #656]	@ (8005174 <main+0x71c>)
 8004ee4:	2101      	movs	r1, #1
 8004ee6:	9102      	str	r1, [sp, #8]
 8004ee8:	2101      	movs	r1, #1
 8004eea:	9101      	str	r1, [sp, #4]
 8004eec:	2100      	movs	r1, #0
 8004eee:	9100      	str	r1, [sp, #0]
 8004ef0:	215a      	movs	r1, #90	@ 0x5a
 8004ef2:	2000      	movs	r0, #0
 8004ef4:	f7ff f827 	bl	8003f46 <drawString>
			  sprintf(buffer2, "Old Lon: %d.%d", (int)(game.positions[game.numLocations-1].lon), abs((int)(((game.positions[game.numLocations-1].lon)*10000))%10000));
 8004ef8:	4b9c      	ldr	r3, [pc, #624]	@ (800516c <main+0x714>)
 8004efa:	695b      	ldr	r3, [r3, #20]
 8004efc:	3b01      	subs	r3, #1
 8004efe:	4a9b      	ldr	r2, [pc, #620]	@ (800516c <main+0x714>)
 8004f00:	3303      	adds	r3, #3
 8004f02:	00db      	lsls	r3, r3, #3
 8004f04:	18d3      	adds	r3, r2, r3
 8004f06:	3304      	adds	r3, #4
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	1c18      	adds	r0, r3, #0
 8004f0c:	f7fc fc2c 	bl	8001768 <__aeabi_f2iz>
 8004f10:	0004      	movs	r4, r0
 8004f12:	4b96      	ldr	r3, [pc, #600]	@ (800516c <main+0x714>)
 8004f14:	695b      	ldr	r3, [r3, #20]
 8004f16:	3b01      	subs	r3, #1
 8004f18:	4a94      	ldr	r2, [pc, #592]	@ (800516c <main+0x714>)
 8004f1a:	3303      	adds	r3, #3
 8004f1c:	00db      	lsls	r3, r3, #3
 8004f1e:	18d3      	adds	r3, r2, r3
 8004f20:	3304      	adds	r3, #4
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4998      	ldr	r1, [pc, #608]	@ (8005188 <main+0x730>)
 8004f26:	1c18      	adds	r0, r3, #0
 8004f28:	f7fc f860 	bl	8000fec <__aeabi_fmul>
 8004f2c:	1c03      	adds	r3, r0, #0
 8004f2e:	1c18      	adds	r0, r3, #0
 8004f30:	f7fc fc1a 	bl	8001768 <__aeabi_f2iz>
 8004f34:	0003      	movs	r3, r0
 8004f36:	4995      	ldr	r1, [pc, #596]	@ (800518c <main+0x734>)
 8004f38:	0018      	movs	r0, r3
 8004f3a:	f7fb fa79 	bl	8000430 <__aeabi_idivmod>
 8004f3e:	000b      	movs	r3, r1
 8004f40:	17da      	asrs	r2, r3, #31
 8004f42:	189b      	adds	r3, r3, r2
 8004f44:	4053      	eors	r3, r2
 8004f46:	4993      	ldr	r1, [pc, #588]	@ (8005194 <main+0x73c>)
 8004f48:	488a      	ldr	r0, [pc, #552]	@ (8005174 <main+0x71c>)
 8004f4a:	0022      	movs	r2, r4
 8004f4c:	f009 fdca 	bl	800eae4 <siprintf>
			  drawString(0, 80, buffer2, WHITE, BLACK, 1, 1);
 8004f50:	2301      	movs	r3, #1
 8004f52:	425b      	negs	r3, r3
 8004f54:	4a87      	ldr	r2, [pc, #540]	@ (8005174 <main+0x71c>)
 8004f56:	2101      	movs	r1, #1
 8004f58:	9102      	str	r1, [sp, #8]
 8004f5a:	2101      	movs	r1, #1
 8004f5c:	9101      	str	r1, [sp, #4]
 8004f5e:	2100      	movs	r1, #0
 8004f60:	9100      	str	r1, [sp, #0]
 8004f62:	2150      	movs	r1, #80	@ 0x50
 8004f64:	2000      	movs	r0, #0
 8004f66:	f7fe ffee 	bl	8003f46 <drawString>
			  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1)==GPIO_PIN_SET){
 8004f6a:	4b8b      	ldr	r3, [pc, #556]	@ (8005198 <main+0x740>)
 8004f6c:	2102      	movs	r1, #2
 8004f6e:	0018      	movs	r0, r3
 8004f70:	f003 fe0a 	bl	8008b88 <HAL_GPIO_ReadPin>
 8004f74:	0003      	movs	r3, r0
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d168      	bne.n	800504c <main+0x5f4>
			  sprintf(buffer2, "Lat: %d.%d", (int)(GetJustLatLon().lat), abs(((int)((GetJustLatLon().lat)*10000))%10000));
 8004f7a:	003b      	movs	r3, r7
 8004f7c:	0018      	movs	r0, r3
 8004f7e:	f001 fd45 	bl	8006a0c <GetJustLatLon>
 8004f82:	003b      	movs	r3, r7
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	1c18      	adds	r0, r3, #0
 8004f88:	f7fc fbee 	bl	8001768 <__aeabi_f2iz>
 8004f8c:	0004      	movs	r4, r0
 8004f8e:	2508      	movs	r5, #8
 8004f90:	197b      	adds	r3, r7, r5
 8004f92:	0018      	movs	r0, r3
 8004f94:	f001 fd3a 	bl	8006a0c <GetJustLatLon>
 8004f98:	197b      	adds	r3, r7, r5
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	497a      	ldr	r1, [pc, #488]	@ (8005188 <main+0x730>)
 8004f9e:	1c18      	adds	r0, r3, #0
 8004fa0:	f7fc f824 	bl	8000fec <__aeabi_fmul>
 8004fa4:	1c03      	adds	r3, r0, #0
 8004fa6:	1c18      	adds	r0, r3, #0
 8004fa8:	f7fc fbde 	bl	8001768 <__aeabi_f2iz>
 8004fac:	0003      	movs	r3, r0
 8004fae:	4977      	ldr	r1, [pc, #476]	@ (800518c <main+0x734>)
 8004fb0:	0018      	movs	r0, r3
 8004fb2:	f7fb fa3d 	bl	8000430 <__aeabi_idivmod>
 8004fb6:	000b      	movs	r3, r1
 8004fb8:	17da      	asrs	r2, r3, #31
 8004fba:	189b      	adds	r3, r3, r2
 8004fbc:	4053      	eors	r3, r2
 8004fbe:	4977      	ldr	r1, [pc, #476]	@ (800519c <main+0x744>)
 8004fc0:	486c      	ldr	r0, [pc, #432]	@ (8005174 <main+0x71c>)
 8004fc2:	0022      	movs	r2, r4
 8004fc4:	f009 fd8e 	bl	800eae4 <siprintf>
			  drawString(0, 70, buffer2, WHITE, BLACK, 1, 1);
 8004fc8:	2301      	movs	r3, #1
 8004fca:	425b      	negs	r3, r3
 8004fcc:	4a69      	ldr	r2, [pc, #420]	@ (8005174 <main+0x71c>)
 8004fce:	2101      	movs	r1, #1
 8004fd0:	9102      	str	r1, [sp, #8]
 8004fd2:	2101      	movs	r1, #1
 8004fd4:	9101      	str	r1, [sp, #4]
 8004fd6:	2100      	movs	r1, #0
 8004fd8:	9100      	str	r1, [sp, #0]
 8004fda:	2146      	movs	r1, #70	@ 0x46
 8004fdc:	2000      	movs	r0, #0
 8004fde:	f7fe ffb2 	bl	8003f46 <drawString>
			  sprintf(buffer2, "Lon: %d.%d", (int)(GetJustLatLon().lon), abs((int)(((GetJustLatLon().lon)*10000))%10000));
 8004fe2:	2410      	movs	r4, #16
 8004fe4:	193b      	adds	r3, r7, r4
 8004fe6:	0018      	movs	r0, r3
 8004fe8:	f001 fd10 	bl	8006a0c <GetJustLatLon>
 8004fec:	193b      	adds	r3, r7, r4
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	1c18      	adds	r0, r3, #0
 8004ff2:	f7fc fbb9 	bl	8001768 <__aeabi_f2iz>
 8004ff6:	0004      	movs	r4, r0
 8004ff8:	2518      	movs	r5, #24
 8004ffa:	197b      	adds	r3, r7, r5
 8004ffc:	0018      	movs	r0, r3
 8004ffe:	f001 fd05 	bl	8006a0c <GetJustLatLon>
 8005002:	197b      	adds	r3, r7, r5
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	4960      	ldr	r1, [pc, #384]	@ (8005188 <main+0x730>)
 8005008:	1c18      	adds	r0, r3, #0
 800500a:	f7fb ffef 	bl	8000fec <__aeabi_fmul>
 800500e:	1c03      	adds	r3, r0, #0
 8005010:	1c18      	adds	r0, r3, #0
 8005012:	f7fc fba9 	bl	8001768 <__aeabi_f2iz>
 8005016:	0003      	movs	r3, r0
 8005018:	495c      	ldr	r1, [pc, #368]	@ (800518c <main+0x734>)
 800501a:	0018      	movs	r0, r3
 800501c:	f7fb fa08 	bl	8000430 <__aeabi_idivmod>
 8005020:	000b      	movs	r3, r1
 8005022:	17da      	asrs	r2, r3, #31
 8005024:	189b      	adds	r3, r3, r2
 8005026:	4053      	eors	r3, r2
 8005028:	495d      	ldr	r1, [pc, #372]	@ (80051a0 <main+0x748>)
 800502a:	4852      	ldr	r0, [pc, #328]	@ (8005174 <main+0x71c>)
 800502c:	0022      	movs	r2, r4
 800502e:	f009 fd59 	bl	800eae4 <siprintf>
			  drawString(0, 60, buffer2, WHITE, BLACK, 1, 1);
 8005032:	2301      	movs	r3, #1
 8005034:	425b      	negs	r3, r3
 8005036:	4a4f      	ldr	r2, [pc, #316]	@ (8005174 <main+0x71c>)
 8005038:	2101      	movs	r1, #1
 800503a:	9102      	str	r1, [sp, #8]
 800503c:	2101      	movs	r1, #1
 800503e:	9101      	str	r1, [sp, #4]
 8005040:	2100      	movs	r1, #0
 8005042:	9100      	str	r1, [sp, #0]
 8005044:	213c      	movs	r1, #60	@ 0x3c
 8005046:	2000      	movs	r0, #0
 8005048:	f7fe ff7d 	bl	8003f46 <drawString>
			  }
			  updateScreen = 0;
 800504c:	4b45      	ldr	r3, [pc, #276]	@ (8005164 <main+0x70c>)
 800504e:	2200      	movs	r2, #0
 8005050:	601a      	str	r2, [r3, #0]
		  }
	  	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_SET ){
 8005052:	4b54      	ldr	r3, [pc, #336]	@ (80051a4 <main+0x74c>)
 8005054:	2104      	movs	r1, #4
 8005056:	0018      	movs	r0, r3
 8005058:	f003 fd96 	bl	8008b88 <HAL_GPIO_ReadPin>
 800505c:	0003      	movs	r3, r0
 800505e:	2b01      	cmp	r3, #1
 8005060:	d111      	bne.n	8005086 <main+0x62e>
	  		effect = MenuBeep;
 8005062:	4b51      	ldr	r3, [pc, #324]	@ (80051a8 <main+0x750>)
 8005064:	2200      	movs	r2, #0
 8005066:	701a      	strb	r2, [r3, #0]
	  		PlayEffect(effect);
 8005068:	4b4f      	ldr	r3, [pc, #316]	@ (80051a8 <main+0x750>)
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	0018      	movs	r0, r3
 800506e:	f000 fd19 	bl	8005aa4 <PlayEffect>

	  		currentMenu = Main;
 8005072:	4b4e      	ldr	r3, [pc, #312]	@ (80051ac <main+0x754>)
 8005074:	2201      	movs	r2, #1
 8005076:	701a      	strb	r2, [r3, #0]
	  		canChange = 0;
 8005078:	4b4d      	ldr	r3, [pc, #308]	@ (80051b0 <main+0x758>)
 800507a:	2200      	movs	r2, #0
 800507c:	701a      	strb	r2, [r3, #0]
	  		fillScreen(BLACK);
 800507e:	2000      	movs	r0, #0
 8005080:	f7ff f8a6 	bl	80041d0 <fillScreen>
	  	  }
	  	  else
	  	      canChange = 1;

	  	  break;
 8005084:	e162      	b.n	800534c <main+0x8f4>
	  	      canChange = 1;
 8005086:	4b4a      	ldr	r3, [pc, #296]	@ (80051b0 <main+0x758>)
 8005088:	2201      	movs	r2, #1
 800508a:	701a      	strb	r2, [r3, #0]
	  	  break;
 800508c:	e15e      	b.n	800534c <main+0x8f4>
		  //{
			  //SendData();
			  //ReceiveData();
		  //}

		  if(updateScreen>=2)
 800508e:	4b35      	ldr	r3, [pc, #212]	@ (8005164 <main+0x70c>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	2b01      	cmp	r3, #1
 8005094:	d800      	bhi.n	8005098 <main+0x640>
 8005096:	e134      	b.n	8005302 <main+0x8aa>
		  {
			  updateScreen = 0;
 8005098:	4b32      	ldr	r3, [pc, #200]	@ (8005164 <main+0x70c>)
 800509a:	2200      	movs	r2, #0
 800509c:	601a      	str	r2, [r3, #0]
			  drawString(0, 150, "-OPTIONS-", WHITE, BLACK, 1, 1);
 800509e:	2301      	movs	r3, #1
 80050a0:	425b      	negs	r3, r3
 80050a2:	4a44      	ldr	r2, [pc, #272]	@ (80051b4 <main+0x75c>)
 80050a4:	2101      	movs	r1, #1
 80050a6:	9102      	str	r1, [sp, #8]
 80050a8:	2101      	movs	r1, #1
 80050aa:	9101      	str	r1, [sp, #4]
 80050ac:	2100      	movs	r1, #0
 80050ae:	9100      	str	r1, [sp, #0]
 80050b0:	2196      	movs	r1, #150	@ 0x96
 80050b2:	2000      	movs	r0, #0
 80050b4:	f7fe ff47 	bl	8003f46 <drawString>
			  sprintf(buffer2, "GOAL: %d ", game.dailyGoal);
 80050b8:	4a2c      	ldr	r2, [pc, #176]	@ (800516c <main+0x714>)
 80050ba:	2392      	movs	r3, #146	@ 0x92
 80050bc:	005b      	lsls	r3, r3, #1
 80050be:	58d2      	ldr	r2, [r2, r3]
 80050c0:	493d      	ldr	r1, [pc, #244]	@ (80051b8 <main+0x760>)
 80050c2:	4b2c      	ldr	r3, [pc, #176]	@ (8005174 <main+0x71c>)
 80050c4:	0018      	movs	r0, r3
 80050c6:	f009 fd0d 	bl	800eae4 <siprintf>
			  drawString(0, 130, buffer2, WHITE, BLACK, 1, 1); //Display the current difficulty
 80050ca:	2301      	movs	r3, #1
 80050cc:	425b      	negs	r3, r3
 80050ce:	4a29      	ldr	r2, [pc, #164]	@ (8005174 <main+0x71c>)
 80050d0:	2101      	movs	r1, #1
 80050d2:	9102      	str	r1, [sp, #8]
 80050d4:	2101      	movs	r1, #1
 80050d6:	9101      	str	r1, [sp, #4]
 80050d8:	2100      	movs	r1, #0
 80050da:	9100      	str	r1, [sp, #0]
 80050dc:	2182      	movs	r1, #130	@ 0x82
 80050de:	2000      	movs	r0, #0
 80050e0:	f7fe ff31 	bl	8003f46 <drawString>
			  drawString(0,110,"UPLOAD DATA",WHITE,BLACK,1,1);
 80050e4:	2301      	movs	r3, #1
 80050e6:	425b      	negs	r3, r3
 80050e8:	4a34      	ldr	r2, [pc, #208]	@ (80051bc <main+0x764>)
 80050ea:	2101      	movs	r1, #1
 80050ec:	9102      	str	r1, [sp, #8]
 80050ee:	2101      	movs	r1, #1
 80050f0:	9101      	str	r1, [sp, #4]
 80050f2:	2100      	movs	r1, #0
 80050f4:	9100      	str	r1, [sp, #0]
 80050f6:	216e      	movs	r1, #110	@ 0x6e
 80050f8:	2000      	movs	r0, #0
 80050fa:	f7fe ff24 	bl	8003f46 <drawString>
			  if(editDifficulty)
 80050fe:	4b30      	ldr	r3, [pc, #192]	@ (80051c0 <main+0x768>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d100      	bne.n	8005108 <main+0x6b0>
 8005106:	e095      	b.n	8005234 <main+0x7dc>
			  {
				  //Editing difficulty
				  drawLine(0,125,128,125,WHITE);
 8005108:	4b2e      	ldr	r3, [pc, #184]	@ (80051c4 <main+0x76c>)
 800510a:	9300      	str	r3, [sp, #0]
 800510c:	237d      	movs	r3, #125	@ 0x7d
 800510e:	2280      	movs	r2, #128	@ 0x80
 8005110:	217d      	movs	r1, #125	@ 0x7d
 8005112:	2000      	movs	r0, #0
 8005114:	f7fe fe87 	bl	8003e26 <drawLine>
				  //GET OUT when the center button is pressed!
				  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1))
 8005118:	4b1f      	ldr	r3, [pc, #124]	@ (8005198 <main+0x740>)
 800511a:	2102      	movs	r1, #2
 800511c:	0018      	movs	r0, r3
 800511e:	f003 fd33 	bl	8008b88 <HAL_GPIO_ReadPin>
 8005122:	1e03      	subs	r3, r0, #0
 8005124:	d00b      	beq.n	800513e <main+0x6e6>
				  {
					  editDifficulty = 0;
 8005126:	4b26      	ldr	r3, [pc, #152]	@ (80051c0 <main+0x768>)
 8005128:	2200      	movs	r2, #0
 800512a:	601a      	str	r2, [r3, #0]
					  drawLine(0,125,128,125,BLACK);
 800512c:	2300      	movs	r3, #0
 800512e:	9300      	str	r3, [sp, #0]
 8005130:	237d      	movs	r3, #125	@ 0x7d
 8005132:	2280      	movs	r2, #128	@ 0x80
 8005134:	217d      	movs	r1, #125	@ 0x7d
 8005136:	2000      	movs	r0, #0
 8005138:	f7fe fe75 	bl	8003e26 <drawLine>
 800513c:	e058      	b.n	80051f0 <main+0x798>
				  }
				  //Right increments the goal
				  else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2))
 800513e:	4b19      	ldr	r3, [pc, #100]	@ (80051a4 <main+0x74c>)
 8005140:	2104      	movs	r1, #4
 8005142:	0018      	movs	r0, r3
 8005144:	f003 fd20 	bl	8008b88 <HAL_GPIO_ReadPin>
 8005148:	1e03      	subs	r3, r0, #0
 800514a:	d03d      	beq.n	80051c8 <main+0x770>
				  {
					  game.dailyGoal += 1000;
 800514c:	4a07      	ldr	r2, [pc, #28]	@ (800516c <main+0x714>)
 800514e:	2392      	movs	r3, #146	@ 0x92
 8005150:	005b      	lsls	r3, r3, #1
 8005152:	58d3      	ldr	r3, [r2, r3]
 8005154:	22fa      	movs	r2, #250	@ 0xfa
 8005156:	0092      	lsls	r2, r2, #2
 8005158:	1899      	adds	r1, r3, r2
 800515a:	4a04      	ldr	r2, [pc, #16]	@ (800516c <main+0x714>)
 800515c:	2392      	movs	r3, #146	@ 0x92
 800515e:	005b      	lsls	r3, r3, #1
 8005160:	50d1      	str	r1, [r2, r3]
 8005162:	e045      	b.n	80051f0 <main+0x798>
 8005164:	20001ea8 	.word	0x20001ea8
 8005168:	08011288 	.word	0x08011288
 800516c:	20000f38 	.word	0x20000f38
 8005170:	08011290 	.word	0x08011290
 8005174:	20001ee0 	.word	0x20001ee0
 8005178:	0801129c 	.word	0x0801129c
 800517c:	080112ac 	.word	0x080112ac
 8005180:	080112bc 	.word	0x080112bc
 8005184:	080112c8 	.word	0x080112c8
 8005188:	461c4000 	.word	0x461c4000
 800518c:	00002710 	.word	0x00002710
 8005190:	080112d8 	.word	0x080112d8
 8005194:	080112e8 	.word	0x080112e8
 8005198:	50000800 	.word	0x50000800
 800519c:	080112f8 	.word	0x080112f8
 80051a0:	08011304 	.word	0x08011304
 80051a4:	50000400 	.word	0x50000400
 80051a8:	20000f34 	.word	0x20000f34
 80051ac:	20000d36 	.word	0x20000d36
 80051b0:	20000d37 	.word	0x20000d37
 80051b4:	08011310 	.word	0x08011310
 80051b8:	0801131c 	.word	0x0801131c
 80051bc:	08011328 	.word	0x08011328
 80051c0:	20001f4c 	.word	0x20001f4c
 80051c4:	0000ffff 	.word	0x0000ffff
				  }
				  //Left decrements the goal
				  else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11))
 80051c8:	2380      	movs	r3, #128	@ 0x80
 80051ca:	011a      	lsls	r2, r3, #4
 80051cc:	23a0      	movs	r3, #160	@ 0xa0
 80051ce:	05db      	lsls	r3, r3, #23
 80051d0:	0011      	movs	r1, r2
 80051d2:	0018      	movs	r0, r3
 80051d4:	f003 fcd8 	bl	8008b88 <HAL_GPIO_ReadPin>
 80051d8:	1e03      	subs	r3, r0, #0
 80051da:	d009      	beq.n	80051f0 <main+0x798>
				  {
					  game.dailyGoal -= 1000;
 80051dc:	4a5f      	ldr	r2, [pc, #380]	@ (800535c <main+0x904>)
 80051de:	2392      	movs	r3, #146	@ 0x92
 80051e0:	005b      	lsls	r3, r3, #1
 80051e2:	58d3      	ldr	r3, [r2, r3]
 80051e4:	4a5e      	ldr	r2, [pc, #376]	@ (8005360 <main+0x908>)
 80051e6:	1899      	adds	r1, r3, r2
 80051e8:	4a5c      	ldr	r2, [pc, #368]	@ (800535c <main+0x904>)
 80051ea:	2392      	movs	r3, #146	@ 0x92
 80051ec:	005b      	lsls	r3, r3, #1
 80051ee:	50d1      	str	r1, [r2, r3]
				  }

				  if(game.dailyGoal>=999000)
 80051f0:	4a5a      	ldr	r2, [pc, #360]	@ (800535c <main+0x904>)
 80051f2:	2392      	movs	r3, #146	@ 0x92
 80051f4:	005b      	lsls	r3, r3, #1
 80051f6:	58d3      	ldr	r3, [r2, r3]
 80051f8:	4a5a      	ldr	r2, [pc, #360]	@ (8005364 <main+0x90c>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d905      	bls.n	800520a <main+0x7b2>
				  {
					  game.dailyGoal = 0;
 80051fe:	4a57      	ldr	r2, [pc, #348]	@ (800535c <main+0x904>)
 8005200:	2392      	movs	r3, #146	@ 0x92
 8005202:	005b      	lsls	r3, r3, #1
 8005204:	2100      	movs	r1, #0
 8005206:	50d1      	str	r1, [r2, r3]
 8005208:	e00a      	b.n	8005220 <main+0x7c8>
				  }
				  else if (game.dailyGoal<=0)
 800520a:	4a54      	ldr	r2, [pc, #336]	@ (800535c <main+0x904>)
 800520c:	2392      	movs	r3, #146	@ 0x92
 800520e:	005b      	lsls	r3, r3, #1
 8005210:	58d3      	ldr	r3, [r2, r3]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d104      	bne.n	8005220 <main+0x7c8>
				  {
					  game.dailyGoal=999000;
 8005216:	4a51      	ldr	r2, [pc, #324]	@ (800535c <main+0x904>)
 8005218:	2392      	movs	r3, #146	@ 0x92
 800521a:	005b      	lsls	r3, r3, #1
 800521c:	4952      	ldr	r1, [pc, #328]	@ (8005368 <main+0x910>)
 800521e:	50d1      	str	r1, [r2, r3]
				  }
				  sprintf(buffer2, "DIFFICULTY: %d ", game.dailyGoal);
 8005220:	4a4e      	ldr	r2, [pc, #312]	@ (800535c <main+0x904>)
 8005222:	2392      	movs	r3, #146	@ 0x92
 8005224:	005b      	lsls	r3, r3, #1
 8005226:	58d2      	ldr	r2, [r2, r3]
 8005228:	4950      	ldr	r1, [pc, #320]	@ (800536c <main+0x914>)
 800522a:	4b51      	ldr	r3, [pc, #324]	@ (8005370 <main+0x918>)
 800522c:	0018      	movs	r0, r3
 800522e:	f009 fc59 	bl	800eae4 <siprintf>
 8005232:	e066      	b.n	8005302 <main+0x8aa>

			  }
			  else if(userUpload)
 8005234:	4b4f      	ldr	r3, [pc, #316]	@ (8005374 <main+0x91c>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d007      	beq.n	800524c <main+0x7f4>
			  {
				  userUpload=0;
 800523c:	4b4d      	ldr	r3, [pc, #308]	@ (8005374 <main+0x91c>)
 800523e:	2200      	movs	r2, #0
 8005240:	601a      	str	r2, [r3, #0]
				  SendData();
 8005242:	f000 fee7 	bl	8006014 <SendData>
				  ReceiveData();
 8005246:	f000 ffad 	bl	80061a4 <ReceiveData>
 800524a:	e05a      	b.n	8005302 <main+0x8aa>
			  }
			  else{
			  //Difficulty
			  if(currentSetting==0)
 800524c:	4b4a      	ldr	r3, [pc, #296]	@ (8005378 <main+0x920>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d110      	bne.n	8005276 <main+0x81e>
			  {
				  //Try to underline the option being selected
				  drawLine(0,125,20,125,WHITE);
 8005254:	4b49      	ldr	r3, [pc, #292]	@ (800537c <main+0x924>)
 8005256:	9300      	str	r3, [sp, #0]
 8005258:	237d      	movs	r3, #125	@ 0x7d
 800525a:	2214      	movs	r2, #20
 800525c:	217d      	movs	r1, #125	@ 0x7d
 800525e:	2000      	movs	r0, #0
 8005260:	f7fe fde1 	bl	8003e26 <drawLine>
				  //Then erase the highlight under the other option not being selected
				  drawLine(0,105,20,105,BLACK);
 8005264:	2300      	movs	r3, #0
 8005266:	9300      	str	r3, [sp, #0]
 8005268:	2369      	movs	r3, #105	@ 0x69
 800526a:	2214      	movs	r2, #20
 800526c:	2169      	movs	r1, #105	@ 0x69
 800526e:	2000      	movs	r0, #0
 8005270:	f7fe fdd9 	bl	8003e26 <drawLine>
 8005274:	e013      	b.n	800529e <main+0x846>
			  }
			  //Upload
			  else if(currentSetting==1)
 8005276:	4b40      	ldr	r3, [pc, #256]	@ (8005378 <main+0x920>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	2b01      	cmp	r3, #1
 800527c:	d10f      	bne.n	800529e <main+0x846>
			  {
				  drawLine(0,105,20,105,WHITE);
 800527e:	4b3f      	ldr	r3, [pc, #252]	@ (800537c <main+0x924>)
 8005280:	9300      	str	r3, [sp, #0]
 8005282:	2369      	movs	r3, #105	@ 0x69
 8005284:	2214      	movs	r2, #20
 8005286:	2169      	movs	r1, #105	@ 0x69
 8005288:	2000      	movs	r0, #0
 800528a:	f7fe fdcc 	bl	8003e26 <drawLine>
				  drawLine(0,125,20,125,BLACK);
 800528e:	2300      	movs	r3, #0
 8005290:	9300      	str	r3, [sp, #0]
 8005292:	237d      	movs	r3, #125	@ 0x7d
 8005294:	2214      	movs	r2, #20
 8005296:	217d      	movs	r1, #125	@ 0x7d
 8005298:	2000      	movs	r0, #0
 800529a:	f7fe fdc4 	bl	8003e26 <drawLine>
			  }
			  //IF RIGHT BUTTON IS PRESSED, INCREMENT THE SETTINGS MENU
			  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_SET)
 800529e:	4b38      	ldr	r3, [pc, #224]	@ (8005380 <main+0x928>)
 80052a0:	2104      	movs	r1, #4
 80052a2:	0018      	movs	r0, r3
 80052a4:	f003 fc70 	bl	8008b88 <HAL_GPIO_ReadPin>
 80052a8:	0003      	movs	r3, r0
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d10c      	bne.n	80052c8 <main+0x870>
			  {
				  ++currentSetting;
 80052ae:	4b32      	ldr	r3, [pc, #200]	@ (8005378 <main+0x920>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	1c5a      	adds	r2, r3, #1
 80052b4:	4b30      	ldr	r3, [pc, #192]	@ (8005378 <main+0x920>)
 80052b6:	601a      	str	r2, [r3, #0]
				  if(currentSetting>1)
 80052b8:	4b2f      	ldr	r3, [pc, #188]	@ (8005378 <main+0x920>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d920      	bls.n	8005302 <main+0x8aa>
					  currentSetting=0;
 80052c0:	4b2d      	ldr	r3, [pc, #180]	@ (8005378 <main+0x920>)
 80052c2:	2200      	movs	r2, #0
 80052c4:	601a      	str	r2, [r3, #0]
 80052c6:	e01c      	b.n	8005302 <main+0x8aa>
			  }
			  //PD6=Center button
			  else if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1) && currentSetting==0)
 80052c8:	4b2e      	ldr	r3, [pc, #184]	@ (8005384 <main+0x92c>)
 80052ca:	2102      	movs	r1, #2
 80052cc:	0018      	movs	r0, r3
 80052ce:	f003 fc5b 	bl	8008b88 <HAL_GPIO_ReadPin>
 80052d2:	1e03      	subs	r3, r0, #0
 80052d4:	d007      	beq.n	80052e6 <main+0x88e>
 80052d6:	4b28      	ldr	r3, [pc, #160]	@ (8005378 <main+0x920>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d103      	bne.n	80052e6 <main+0x88e>
			  {
				  editDifficulty=1;
 80052de:	4b2a      	ldr	r3, [pc, #168]	@ (8005388 <main+0x930>)
 80052e0:	2201      	movs	r2, #1
 80052e2:	601a      	str	r2, [r3, #0]
 80052e4:	e00d      	b.n	8005302 <main+0x8aa>
			  }
			  else if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1) && currentSetting==1)
 80052e6:	4b27      	ldr	r3, [pc, #156]	@ (8005384 <main+0x92c>)
 80052e8:	2102      	movs	r1, #2
 80052ea:	0018      	movs	r0, r3
 80052ec:	f003 fc4c 	bl	8008b88 <HAL_GPIO_ReadPin>
 80052f0:	1e03      	subs	r3, r0, #0
 80052f2:	d006      	beq.n	8005302 <main+0x8aa>
 80052f4:	4b20      	ldr	r3, [pc, #128]	@ (8005378 <main+0x920>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d102      	bne.n	8005302 <main+0x8aa>
			  {
				  userUpload=1;
 80052fc:	4b1d      	ldr	r3, [pc, #116]	@ (8005374 <main+0x91c>)
 80052fe:	2201      	movs	r2, #1
 8005300:	601a      	str	r2, [r3, #0]
			  }
		  }
		  }

		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_SET && !editDifficulty) {
 8005302:	2380      	movs	r3, #128	@ 0x80
 8005304:	011a      	lsls	r2, r3, #4
 8005306:	23a0      	movs	r3, #160	@ 0xa0
 8005308:	05db      	lsls	r3, r3, #23
 800530a:	0011      	movs	r1, r2
 800530c:	0018      	movs	r0, r3
 800530e:	f003 fc3b 	bl	8008b88 <HAL_GPIO_ReadPin>
 8005312:	0003      	movs	r3, r0
 8005314:	2b01      	cmp	r3, #1
 8005316:	d115      	bne.n	8005344 <main+0x8ec>
 8005318:	4b1b      	ldr	r3, [pc, #108]	@ (8005388 <main+0x930>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d111      	bne.n	8005344 <main+0x8ec>
			  effect = MenuBeep;
 8005320:	4b1a      	ldr	r3, [pc, #104]	@ (800538c <main+0x934>)
 8005322:	2200      	movs	r2, #0
 8005324:	701a      	strb	r2, [r3, #0]
			  PlayEffect(effect);
 8005326:	4b19      	ldr	r3, [pc, #100]	@ (800538c <main+0x934>)
 8005328:	781b      	ldrb	r3, [r3, #0]
 800532a:	0018      	movs	r0, r3
 800532c:	f000 fbba 	bl	8005aa4 <PlayEffect>

			  currentMenu = Main;
 8005330:	4b17      	ldr	r3, [pc, #92]	@ (8005390 <main+0x938>)
 8005332:	2201      	movs	r2, #1
 8005334:	701a      	strb	r2, [r3, #0]
			  canChange = 0;
 8005336:	4b17      	ldr	r3, [pc, #92]	@ (8005394 <main+0x93c>)
 8005338:	2200      	movs	r2, #0
 800533a:	701a      	strb	r2, [r3, #0]
			  fillScreen(BLACK);
 800533c:	2000      	movs	r0, #0
 800533e:	f7fe ff47 	bl	80041d0 <fillScreen>
		  }
		  else
			  canChange = 1;
		  break;
 8005342:	e002      	b.n	800534a <main+0x8f2>
			  canChange = 1;
 8005344:	4b13      	ldr	r3, [pc, #76]	@ (8005394 <main+0x93c>)
 8005346:	2201      	movs	r2, #1
 8005348:	701a      	strb	r2, [r3, #0]
		  break;
 800534a:	46c0      	nop			@ (mov r8, r8)
		  	  drawString(70, 70, buffer, BLACK, GREEN, 1, 1);

		  break;*/

	  }
	  totalFrames++;
 800534c:	4b12      	ldr	r3, [pc, #72]	@ (8005398 <main+0x940>)
 800534e:	881b      	ldrh	r3, [r3, #0]
 8005350:	3301      	adds	r3, #1
 8005352:	b29a      	uxth	r2, r3
 8005354:	4b10      	ldr	r3, [pc, #64]	@ (8005398 <main+0x940>)
 8005356:	801a      	strh	r2, [r3, #0]
	  _ADXL343_ReadReg8(0x15, &steps, 1);
 8005358:	f7ff fb9a 	bl	8004a90 <main+0x38>
 800535c:	20000f38 	.word	0x20000f38
 8005360:	fffffc18 	.word	0xfffffc18
 8005364:	000f3e57 	.word	0x000f3e57
 8005368:	000f3e58 	.word	0x000f3e58
 800536c:	08011334 	.word	0x08011334
 8005370:	20001ee0 	.word	0x20001ee0
 8005374:	20001f50 	.word	0x20001f50
 8005378:	20001f48 	.word	0x20001f48
 800537c:	0000ffff 	.word	0x0000ffff
 8005380:	50000400 	.word	0x50000400
 8005384:	50000800 	.word	0x50000800
 8005388:	20001f4c 	.word	0x20001f4c
 800538c:	20000f34 	.word	0x20000f34
 8005390:	20000d36 	.word	0x20000d36
 8005394:	20000d37 	.word	0x20000d37
 8005398:	200010dc 	.word	0x200010dc

0800539c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800539c:	b590      	push	{r4, r7, lr}
 800539e:	b095      	sub	sp, #84	@ 0x54
 80053a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80053a2:	2414      	movs	r4, #20
 80053a4:	193b      	adds	r3, r7, r4
 80053a6:	0018      	movs	r0, r3
 80053a8:	233c      	movs	r3, #60	@ 0x3c
 80053aa:	001a      	movs	r2, r3
 80053ac:	2100      	movs	r1, #0
 80053ae:	f009 fc07 	bl	800ebc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80053b2:	1d3b      	adds	r3, r7, #4
 80053b4:	0018      	movs	r0, r3
 80053b6:	2310      	movs	r3, #16
 80053b8:	001a      	movs	r2, r3
 80053ba:	2100      	movs	r1, #0
 80053bc:	f009 fc00 	bl	800ebc0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80053c0:	2380      	movs	r3, #128	@ 0x80
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	0018      	movs	r0, r3
 80053c6:	f004 fa91 	bl	80098ec <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80053ca:	193b      	adds	r3, r7, r4
 80053cc:	220a      	movs	r2, #10
 80053ce:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80053d0:	193b      	adds	r3, r7, r4
 80053d2:	2280      	movs	r2, #128	@ 0x80
 80053d4:	0052      	lsls	r2, r2, #1
 80053d6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80053d8:	0021      	movs	r1, r4
 80053da:	187b      	adds	r3, r7, r1
 80053dc:	2200      	movs	r2, #0
 80053de:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80053e0:	187b      	adds	r3, r7, r1
 80053e2:	2240      	movs	r2, #64	@ 0x40
 80053e4:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80053e6:	187b      	adds	r3, r7, r1
 80053e8:	2201      	movs	r2, #1
 80053ea:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80053ec:	187b      	adds	r3, r7, r1
 80053ee:	2202      	movs	r2, #2
 80053f0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80053f2:	187b      	adds	r3, r7, r1
 80053f4:	2202      	movs	r2, #2
 80053f6:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80053f8:	187b      	adds	r3, r7, r1
 80053fa:	2200      	movs	r2, #0
 80053fc:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 80053fe:	187b      	adds	r3, r7, r1
 8005400:	2208      	movs	r2, #8
 8005402:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005404:	187b      	adds	r3, r7, r1
 8005406:	2280      	movs	r2, #128	@ 0x80
 8005408:	0292      	lsls	r2, r2, #10
 800540a:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800540c:	187b      	adds	r3, r7, r1
 800540e:	2280      	movs	r2, #128	@ 0x80
 8005410:	0492      	lsls	r2, r2, #18
 8005412:	635a      	str	r2, [r3, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8005414:	187b      	adds	r3, r7, r1
 8005416:	2280      	movs	r2, #128	@ 0x80
 8005418:	0592      	lsls	r2, r2, #22
 800541a:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800541c:	187b      	adds	r3, r7, r1
 800541e:	0018      	movs	r0, r3
 8005420:	f004 fab0 	bl	8009984 <HAL_RCC_OscConfig>
 8005424:	1e03      	subs	r3, r0, #0
 8005426:	d001      	beq.n	800542c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8005428:	f001 fb92 	bl	8006b50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800542c:	1d3b      	adds	r3, r7, #4
 800542e:	2207      	movs	r2, #7
 8005430:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005432:	1d3b      	adds	r3, r7, #4
 8005434:	2202      	movs	r2, #2
 8005436:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005438:	1d3b      	adds	r3, r7, #4
 800543a:	2200      	movs	r2, #0
 800543c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800543e:	1d3b      	adds	r3, r7, #4
 8005440:	2200      	movs	r2, #0
 8005442:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005444:	1d3b      	adds	r3, r7, #4
 8005446:	2102      	movs	r1, #2
 8005448:	0018      	movs	r0, r3
 800544a:	f004 fdfb 	bl	800a044 <HAL_RCC_ClockConfig>
 800544e:	1e03      	subs	r3, r0, #0
 8005450:	d001      	beq.n	8005456 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8005452:	f001 fb7d 	bl	8006b50 <Error_Handler>
  }
}
 8005456:	46c0      	nop			@ (mov r8, r8)
 8005458:	46bd      	mov	sp, r7
 800545a:	b015      	add	sp, #84	@ 0x54
 800545c:	bd90      	pop	{r4, r7, pc}
	...

08005460 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005464:	4b1b      	ldr	r3, [pc, #108]	@ (80054d4 <MX_I2C1_Init+0x74>)
 8005466:	4a1c      	ldr	r2, [pc, #112]	@ (80054d8 <MX_I2C1_Init+0x78>)
 8005468:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10B17DB5;
 800546a:	4b1a      	ldr	r3, [pc, #104]	@ (80054d4 <MX_I2C1_Init+0x74>)
 800546c:	4a1b      	ldr	r2, [pc, #108]	@ (80054dc <MX_I2C1_Init+0x7c>)
 800546e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8005470:	4b18      	ldr	r3, [pc, #96]	@ (80054d4 <MX_I2C1_Init+0x74>)
 8005472:	2200      	movs	r2, #0
 8005474:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005476:	4b17      	ldr	r3, [pc, #92]	@ (80054d4 <MX_I2C1_Init+0x74>)
 8005478:	2201      	movs	r2, #1
 800547a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800547c:	4b15      	ldr	r3, [pc, #84]	@ (80054d4 <MX_I2C1_Init+0x74>)
 800547e:	2200      	movs	r2, #0
 8005480:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8005482:	4b14      	ldr	r3, [pc, #80]	@ (80054d4 <MX_I2C1_Init+0x74>)
 8005484:	2200      	movs	r2, #0
 8005486:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005488:	4b12      	ldr	r3, [pc, #72]	@ (80054d4 <MX_I2C1_Init+0x74>)
 800548a:	2200      	movs	r2, #0
 800548c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800548e:	4b11      	ldr	r3, [pc, #68]	@ (80054d4 <MX_I2C1_Init+0x74>)
 8005490:	2200      	movs	r2, #0
 8005492:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005494:	4b0f      	ldr	r3, [pc, #60]	@ (80054d4 <MX_I2C1_Init+0x74>)
 8005496:	2200      	movs	r2, #0
 8005498:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800549a:	4b0e      	ldr	r3, [pc, #56]	@ (80054d4 <MX_I2C1_Init+0x74>)
 800549c:	0018      	movs	r0, r3
 800549e:	f003 fbe1 	bl	8008c64 <HAL_I2C_Init>
 80054a2:	1e03      	subs	r3, r0, #0
 80054a4:	d001      	beq.n	80054aa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80054a6:	f001 fb53 	bl	8006b50 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80054aa:	4b0a      	ldr	r3, [pc, #40]	@ (80054d4 <MX_I2C1_Init+0x74>)
 80054ac:	2100      	movs	r1, #0
 80054ae:	0018      	movs	r0, r3
 80054b0:	f004 f984 	bl	80097bc <HAL_I2CEx_ConfigAnalogFilter>
 80054b4:	1e03      	subs	r3, r0, #0
 80054b6:	d001      	beq.n	80054bc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80054b8:	f001 fb4a 	bl	8006b50 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80054bc:	4b05      	ldr	r3, [pc, #20]	@ (80054d4 <MX_I2C1_Init+0x74>)
 80054be:	2100      	movs	r1, #0
 80054c0:	0018      	movs	r0, r3
 80054c2:	f004 f9c7 	bl	8009854 <HAL_I2CEx_ConfigDigitalFilter>
 80054c6:	1e03      	subs	r3, r0, #0
 80054c8:	d001      	beq.n	80054ce <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80054ca:	f001 fb41 	bl	8006b50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80054ce:	46c0      	nop			@ (mov r8, r8)
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}
 80054d4:	20001f54 	.word	0x20001f54
 80054d8:	40005400 	.word	0x40005400
 80054dc:	10b17db5 	.word	0x10b17db5

080054e0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b090      	sub	sp, #64	@ 0x40
 80054e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80054e6:	232c      	movs	r3, #44	@ 0x2c
 80054e8:	18fb      	adds	r3, r7, r3
 80054ea:	0018      	movs	r0, r3
 80054ec:	2314      	movs	r3, #20
 80054ee:	001a      	movs	r2, r3
 80054f0:	2100      	movs	r1, #0
 80054f2:	f009 fb65 	bl	800ebc0 <memset>
  RTC_DateTypeDef sDate = {0};
 80054f6:	2328      	movs	r3, #40	@ 0x28
 80054f8:	18fb      	adds	r3, r7, r3
 80054fa:	2200      	movs	r2, #0
 80054fc:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 80054fe:	003b      	movs	r3, r7
 8005500:	0018      	movs	r0, r3
 8005502:	2328      	movs	r3, #40	@ 0x28
 8005504:	001a      	movs	r2, r3
 8005506:	2100      	movs	r1, #0
 8005508:	f009 fb5a 	bl	800ebc0 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800550c:	4b49      	ldr	r3, [pc, #292]	@ (8005634 <MX_RTC_Init+0x154>)
 800550e:	4a4a      	ldr	r2, [pc, #296]	@ (8005638 <MX_RTC_Init+0x158>)
 8005510:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8005512:	4b48      	ldr	r3, [pc, #288]	@ (8005634 <MX_RTC_Init+0x154>)
 8005514:	2200      	movs	r2, #0
 8005516:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8005518:	4b46      	ldr	r3, [pc, #280]	@ (8005634 <MX_RTC_Init+0x154>)
 800551a:	227f      	movs	r2, #127	@ 0x7f
 800551c:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 800551e:	4b45      	ldr	r3, [pc, #276]	@ (8005634 <MX_RTC_Init+0x154>)
 8005520:	22ff      	movs	r2, #255	@ 0xff
 8005522:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8005524:	4b43      	ldr	r3, [pc, #268]	@ (8005634 <MX_RTC_Init+0x154>)
 8005526:	2200      	movs	r2, #0
 8005528:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800552a:	4b42      	ldr	r3, [pc, #264]	@ (8005634 <MX_RTC_Init+0x154>)
 800552c:	2200      	movs	r2, #0
 800552e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8005530:	4b40      	ldr	r3, [pc, #256]	@ (8005634 <MX_RTC_Init+0x154>)
 8005532:	2200      	movs	r2, #0
 8005534:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8005536:	4b3f      	ldr	r3, [pc, #252]	@ (8005634 <MX_RTC_Init+0x154>)
 8005538:	2280      	movs	r2, #128	@ 0x80
 800553a:	05d2      	lsls	r2, r2, #23
 800553c:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800553e:	4b3d      	ldr	r3, [pc, #244]	@ (8005634 <MX_RTC_Init+0x154>)
 8005540:	2200      	movs	r2, #0
 8005542:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8005544:	4b3b      	ldr	r3, [pc, #236]	@ (8005634 <MX_RTC_Init+0x154>)
 8005546:	0018      	movs	r0, r3
 8005548:	f005 f962 	bl	800a810 <HAL_RTC_Init>
 800554c:	1e03      	subs	r3, r0, #0
 800554e:	d001      	beq.n	8005554 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 8005550:	f001 fafe 	bl	8006b50 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8005554:	212c      	movs	r1, #44	@ 0x2c
 8005556:	187b      	adds	r3, r7, r1
 8005558:	2200      	movs	r2, #0
 800555a:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 800555c:	187b      	adds	r3, r7, r1
 800555e:	2200      	movs	r2, #0
 8005560:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8005562:	187b      	adds	r3, r7, r1
 8005564:	2200      	movs	r2, #0
 8005566:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 8005568:	187b      	adds	r3, r7, r1
 800556a:	2200      	movs	r2, #0
 800556c:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800556e:	187b      	adds	r3, r7, r1
 8005570:	2200      	movs	r2, #0
 8005572:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8005574:	187b      	adds	r3, r7, r1
 8005576:	2200      	movs	r2, #0
 8005578:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800557a:	1879      	adds	r1, r7, r1
 800557c:	4b2d      	ldr	r3, [pc, #180]	@ (8005634 <MX_RTC_Init+0x154>)
 800557e:	2201      	movs	r2, #1
 8005580:	0018      	movs	r0, r3
 8005582:	f005 f9e7 	bl	800a954 <HAL_RTC_SetTime>
 8005586:	1e03      	subs	r3, r0, #0
 8005588:	d001      	beq.n	800558e <MX_RTC_Init+0xae>
  {
    Error_Handler();
 800558a:	f001 fae1 	bl	8006b50 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800558e:	2128      	movs	r1, #40	@ 0x28
 8005590:	187b      	adds	r3, r7, r1
 8005592:	2201      	movs	r2, #1
 8005594:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8005596:	187b      	adds	r3, r7, r1
 8005598:	2201      	movs	r2, #1
 800559a:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 800559c:	187b      	adds	r3, r7, r1
 800559e:	2201      	movs	r2, #1
 80055a0:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 80055a2:	187b      	adds	r3, r7, r1
 80055a4:	2200      	movs	r2, #0
 80055a6:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80055a8:	1879      	adds	r1, r7, r1
 80055aa:	4b22      	ldr	r3, [pc, #136]	@ (8005634 <MX_RTC_Init+0x154>)
 80055ac:	2201      	movs	r2, #1
 80055ae:	0018      	movs	r0, r3
 80055b0:	f005 fa78 	bl	800aaa4 <HAL_RTC_SetDate>
 80055b4:	1e03      	subs	r3, r0, #0
 80055b6:	d001      	beq.n	80055bc <MX_RTC_Init+0xdc>
  {
    Error_Handler();
 80055b8:	f001 faca 	bl	8006b50 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80055bc:	003b      	movs	r3, r7
 80055be:	2200      	movs	r2, #0
 80055c0:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80055c2:	003b      	movs	r3, r7
 80055c4:	2200      	movs	r2, #0
 80055c6:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x1;
 80055c8:	003b      	movs	r3, r7
 80055ca:	2201      	movs	r2, #1
 80055cc:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80055ce:	003b      	movs	r3, r7
 80055d0:	2200      	movs	r2, #0
 80055d2:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80055d4:	003b      	movs	r3, r7
 80055d6:	2200      	movs	r2, #0
 80055d8:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80055da:	003b      	movs	r3, r7
 80055dc:	2200      	movs	r2, #0
 80055de:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80055e0:	003b      	movs	r3, r7
 80055e2:	2200      	movs	r2, #0
 80055e4:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80055e6:	003b      	movs	r3, r7
 80055e8:	2200      	movs	r2, #0
 80055ea:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80055ec:	003b      	movs	r3, r7
 80055ee:	2200      	movs	r2, #0
 80055f0:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 80055f2:	003b      	movs	r3, r7
 80055f4:	2220      	movs	r2, #32
 80055f6:	2101      	movs	r1, #1
 80055f8:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 80055fa:	003b      	movs	r3, r7
 80055fc:	2280      	movs	r2, #128	@ 0x80
 80055fe:	0052      	lsls	r2, r2, #1
 8005600:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8005602:	0039      	movs	r1, r7
 8005604:	4b0b      	ldr	r3, [pc, #44]	@ (8005634 <MX_RTC_Init+0x154>)
 8005606:	2201      	movs	r2, #1
 8005608:	0018      	movs	r0, r3
 800560a:	f005 fadd 	bl	800abc8 <HAL_RTC_SetAlarm_IT>
 800560e:	1e03      	subs	r3, r0, #0
 8005610:	d001      	beq.n	8005616 <MX_RTC_Init+0x136>
  {
    Error_Handler();
 8005612:	f001 fa9d 	bl	8006b50 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0x500B, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8005616:	4909      	ldr	r1, [pc, #36]	@ (800563c <MX_RTC_Init+0x15c>)
 8005618:	4b06      	ldr	r3, [pc, #24]	@ (8005634 <MX_RTC_Init+0x154>)
 800561a:	2200      	movs	r2, #0
 800561c:	0018      	movs	r0, r3
 800561e:	f005 fe09 	bl	800b234 <HAL_RTCEx_SetWakeUpTimer_IT>
 8005622:	1e03      	subs	r3, r0, #0
 8005624:	d001      	beq.n	800562a <MX_RTC_Init+0x14a>
  {
    Error_Handler();
 8005626:	f001 fa93 	bl	8006b50 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800562a:	46c0      	nop			@ (mov r8, r8)
 800562c:	46bd      	mov	sp, r7
 800562e:	b010      	add	sp, #64	@ 0x40
 8005630:	bd80      	pop	{r7, pc}
 8005632:	46c0      	nop			@ (mov r8, r8)
 8005634:	20001fa8 	.word	0x20001fa8
 8005638:	40002800 	.word	0x40002800
 800563c:	0000500b 	.word	0x0000500b

08005640 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8005644:	4b1c      	ldr	r3, [pc, #112]	@ (80056b8 <MX_SPI1_Init+0x78>)
 8005646:	4a1d      	ldr	r2, [pc, #116]	@ (80056bc <MX_SPI1_Init+0x7c>)
 8005648:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800564a:	4b1b      	ldr	r3, [pc, #108]	@ (80056b8 <MX_SPI1_Init+0x78>)
 800564c:	2282      	movs	r2, #130	@ 0x82
 800564e:	0052      	lsls	r2, r2, #1
 8005650:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8005652:	4b19      	ldr	r3, [pc, #100]	@ (80056b8 <MX_SPI1_Init+0x78>)
 8005654:	2280      	movs	r2, #128	@ 0x80
 8005656:	0212      	lsls	r2, r2, #8
 8005658:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800565a:	4b17      	ldr	r3, [pc, #92]	@ (80056b8 <MX_SPI1_Init+0x78>)
 800565c:	22e0      	movs	r2, #224	@ 0xe0
 800565e:	00d2      	lsls	r2, r2, #3
 8005660:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005662:	4b15      	ldr	r3, [pc, #84]	@ (80056b8 <MX_SPI1_Init+0x78>)
 8005664:	2200      	movs	r2, #0
 8005666:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005668:	4b13      	ldr	r3, [pc, #76]	@ (80056b8 <MX_SPI1_Init+0x78>)
 800566a:	2200      	movs	r2, #0
 800566c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800566e:	4b12      	ldr	r3, [pc, #72]	@ (80056b8 <MX_SPI1_Init+0x78>)
 8005670:	2280      	movs	r2, #128	@ 0x80
 8005672:	0092      	lsls	r2, r2, #2
 8005674:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8005676:	4b10      	ldr	r3, [pc, #64]	@ (80056b8 <MX_SPI1_Init+0x78>)
 8005678:	2220      	movs	r2, #32
 800567a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800567c:	4b0e      	ldr	r3, [pc, #56]	@ (80056b8 <MX_SPI1_Init+0x78>)
 800567e:	2200      	movs	r2, #0
 8005680:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005682:	4b0d      	ldr	r3, [pc, #52]	@ (80056b8 <MX_SPI1_Init+0x78>)
 8005684:	2200      	movs	r2, #0
 8005686:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005688:	4b0b      	ldr	r3, [pc, #44]	@ (80056b8 <MX_SPI1_Init+0x78>)
 800568a:	2200      	movs	r2, #0
 800568c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800568e:	4b0a      	ldr	r3, [pc, #40]	@ (80056b8 <MX_SPI1_Init+0x78>)
 8005690:	2207      	movs	r2, #7
 8005692:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005694:	4b08      	ldr	r3, [pc, #32]	@ (80056b8 <MX_SPI1_Init+0x78>)
 8005696:	2200      	movs	r2, #0
 8005698:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800569a:	4b07      	ldr	r3, [pc, #28]	@ (80056b8 <MX_SPI1_Init+0x78>)
 800569c:	2208      	movs	r2, #8
 800569e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80056a0:	4b05      	ldr	r3, [pc, #20]	@ (80056b8 <MX_SPI1_Init+0x78>)
 80056a2:	0018      	movs	r0, r3
 80056a4:	f005 fe8e 	bl	800b3c4 <HAL_SPI_Init>
 80056a8:	1e03      	subs	r3, r0, #0
 80056aa:	d001      	beq.n	80056b0 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 80056ac:	f001 fa50 	bl	8006b50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80056b0:	46c0      	nop			@ (mov r8, r8)
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	46c0      	nop			@ (mov r8, r8)
 80056b8:	20001fd4 	.word	0x20001fd4
 80056bc:	40013000 	.word	0x40013000

080056c0 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b094      	sub	sp, #80	@ 0x50
 80056c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80056c6:	2334      	movs	r3, #52	@ 0x34
 80056c8:	18fb      	adds	r3, r7, r3
 80056ca:	0018      	movs	r0, r3
 80056cc:	231c      	movs	r3, #28
 80056ce:	001a      	movs	r2, r3
 80056d0:	2100      	movs	r1, #0
 80056d2:	f009 fa75 	bl	800ebc0 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80056d6:	003b      	movs	r3, r7
 80056d8:	0018      	movs	r0, r3
 80056da:	2334      	movs	r3, #52	@ 0x34
 80056dc:	001a      	movs	r2, r3
 80056de:	2100      	movs	r1, #0
 80056e0:	f009 fa6e 	bl	800ebc0 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80056e4:	4b37      	ldr	r3, [pc, #220]	@ (80057c4 <MX_TIM17_Init+0x104>)
 80056e6:	4a38      	ldr	r2, [pc, #224]	@ (80057c8 <MX_TIM17_Init+0x108>)
 80056e8:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 80056ea:	4b36      	ldr	r3, [pc, #216]	@ (80057c4 <MX_TIM17_Init+0x104>)
 80056ec:	2200      	movs	r2, #0
 80056ee:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80056f0:	4b34      	ldr	r3, [pc, #208]	@ (80057c4 <MX_TIM17_Init+0x104>)
 80056f2:	2200      	movs	r2, #0
 80056f4:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 80056f6:	4b33      	ldr	r3, [pc, #204]	@ (80057c4 <MX_TIM17_Init+0x104>)
 80056f8:	4a34      	ldr	r2, [pc, #208]	@ (80057cc <MX_TIM17_Init+0x10c>)
 80056fa:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80056fc:	4b31      	ldr	r3, [pc, #196]	@ (80057c4 <MX_TIM17_Init+0x104>)
 80056fe:	2200      	movs	r2, #0
 8005700:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8005702:	4b30      	ldr	r3, [pc, #192]	@ (80057c4 <MX_TIM17_Init+0x104>)
 8005704:	2200      	movs	r2, #0
 8005706:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005708:	4b2e      	ldr	r3, [pc, #184]	@ (80057c4 <MX_TIM17_Init+0x104>)
 800570a:	2200      	movs	r2, #0
 800570c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800570e:	4b2d      	ldr	r3, [pc, #180]	@ (80057c4 <MX_TIM17_Init+0x104>)
 8005710:	0018      	movs	r0, r3
 8005712:	f006 f9e5 	bl	800bae0 <HAL_TIM_Base_Init>
 8005716:	1e03      	subs	r3, r0, #0
 8005718:	d001      	beq.n	800571e <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 800571a:	f001 fa19 	bl	8006b50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 800571e:	4b29      	ldr	r3, [pc, #164]	@ (80057c4 <MX_TIM17_Init+0x104>)
 8005720:	0018      	movs	r0, r3
 8005722:	f006 fa35 	bl	800bb90 <HAL_TIM_PWM_Init>
 8005726:	1e03      	subs	r3, r0, #0
 8005728:	d001      	beq.n	800572e <MX_TIM17_Init+0x6e>
  {
    Error_Handler();
 800572a:	f001 fa11 	bl	8006b50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800572e:	2134      	movs	r1, #52	@ 0x34
 8005730:	187b      	adds	r3, r7, r1
 8005732:	2260      	movs	r2, #96	@ 0x60
 8005734:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8005736:	187b      	adds	r3, r7, r1
 8005738:	2200      	movs	r2, #0
 800573a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800573c:	187b      	adds	r3, r7, r1
 800573e:	2200      	movs	r2, #0
 8005740:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005742:	187b      	adds	r3, r7, r1
 8005744:	2200      	movs	r2, #0
 8005746:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005748:	187b      	adds	r3, r7, r1
 800574a:	2200      	movs	r2, #0
 800574c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800574e:	187b      	adds	r3, r7, r1
 8005750:	2200      	movs	r2, #0
 8005752:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005754:	187b      	adds	r3, r7, r1
 8005756:	2200      	movs	r2, #0
 8005758:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800575a:	1879      	adds	r1, r7, r1
 800575c:	4b19      	ldr	r3, [pc, #100]	@ (80057c4 <MX_TIM17_Init+0x104>)
 800575e:	2200      	movs	r2, #0
 8005760:	0018      	movs	r0, r3
 8005762:	f006 fbf1 	bl	800bf48 <HAL_TIM_PWM_ConfigChannel>
 8005766:	1e03      	subs	r3, r0, #0
 8005768:	d001      	beq.n	800576e <MX_TIM17_Init+0xae>
  {
    Error_Handler();
 800576a:	f001 f9f1 	bl	8006b50 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800576e:	003b      	movs	r3, r7
 8005770:	2200      	movs	r2, #0
 8005772:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005774:	003b      	movs	r3, r7
 8005776:	2200      	movs	r2, #0
 8005778:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800577a:	003b      	movs	r3, r7
 800577c:	2200      	movs	r2, #0
 800577e:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005780:	003b      	movs	r3, r7
 8005782:	2200      	movs	r2, #0
 8005784:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005786:	003b      	movs	r3, r7
 8005788:	2200      	movs	r2, #0
 800578a:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800578c:	003b      	movs	r3, r7
 800578e:	2280      	movs	r2, #128	@ 0x80
 8005790:	0192      	lsls	r2, r2, #6
 8005792:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8005794:	003b      	movs	r3, r7
 8005796:	2200      	movs	r2, #0
 8005798:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800579a:	003b      	movs	r3, r7
 800579c:	2200      	movs	r2, #0
 800579e:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80057a0:	003a      	movs	r2, r7
 80057a2:	4b08      	ldr	r3, [pc, #32]	@ (80057c4 <MX_TIM17_Init+0x104>)
 80057a4:	0011      	movs	r1, r2
 80057a6:	0018      	movs	r0, r3
 80057a8:	f007 f84e 	bl	800c848 <HAL_TIMEx_ConfigBreakDeadTime>
 80057ac:	1e03      	subs	r3, r0, #0
 80057ae:	d001      	beq.n	80057b4 <MX_TIM17_Init+0xf4>
  {
    Error_Handler();
 80057b0:	f001 f9ce 	bl	8006b50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 80057b4:	4b03      	ldr	r3, [pc, #12]	@ (80057c4 <MX_TIM17_Init+0x104>)
 80057b6:	0018      	movs	r0, r3
 80057b8:	f001 ff7a 	bl	80076b0 <HAL_TIM_MspPostInit>

}
 80057bc:	46c0      	nop			@ (mov r8, r8)
 80057be:	46bd      	mov	sp, r7
 80057c0:	b014      	add	sp, #80	@ 0x50
 80057c2:	bd80      	pop	{r7, pc}
 80057c4:	20002038 	.word	0x20002038
 80057c8:	40014800 	.word	0x40014800
 80057cc:	0000ffff 	.word	0x0000ffff

080057d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80057d4:	4b23      	ldr	r3, [pc, #140]	@ (8005864 <MX_USART1_UART_Init+0x94>)
 80057d6:	4a24      	ldr	r2, [pc, #144]	@ (8005868 <MX_USART1_UART_Init+0x98>)
 80057d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80057da:	4b22      	ldr	r3, [pc, #136]	@ (8005864 <MX_USART1_UART_Init+0x94>)
 80057dc:	2296      	movs	r2, #150	@ 0x96
 80057de:	0192      	lsls	r2, r2, #6
 80057e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80057e2:	4b20      	ldr	r3, [pc, #128]	@ (8005864 <MX_USART1_UART_Init+0x94>)
 80057e4:	2200      	movs	r2, #0
 80057e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80057e8:	4b1e      	ldr	r3, [pc, #120]	@ (8005864 <MX_USART1_UART_Init+0x94>)
 80057ea:	2200      	movs	r2, #0
 80057ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80057ee:	4b1d      	ldr	r3, [pc, #116]	@ (8005864 <MX_USART1_UART_Init+0x94>)
 80057f0:	2200      	movs	r2, #0
 80057f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80057f4:	4b1b      	ldr	r3, [pc, #108]	@ (8005864 <MX_USART1_UART_Init+0x94>)
 80057f6:	220c      	movs	r2, #12
 80057f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80057fa:	4b1a      	ldr	r3, [pc, #104]	@ (8005864 <MX_USART1_UART_Init+0x94>)
 80057fc:	2200      	movs	r2, #0
 80057fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005800:	4b18      	ldr	r3, [pc, #96]	@ (8005864 <MX_USART1_UART_Init+0x94>)
 8005802:	2200      	movs	r2, #0
 8005804:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005806:	4b17      	ldr	r3, [pc, #92]	@ (8005864 <MX_USART1_UART_Init+0x94>)
 8005808:	2200      	movs	r2, #0
 800580a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800580c:	4b15      	ldr	r3, [pc, #84]	@ (8005864 <MX_USART1_UART_Init+0x94>)
 800580e:	2200      	movs	r2, #0
 8005810:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005812:	4b14      	ldr	r3, [pc, #80]	@ (8005864 <MX_USART1_UART_Init+0x94>)
 8005814:	2200      	movs	r2, #0
 8005816:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005818:	4b12      	ldr	r3, [pc, #72]	@ (8005864 <MX_USART1_UART_Init+0x94>)
 800581a:	0018      	movs	r0, r3
 800581c:	f007 f8b0 	bl	800c980 <HAL_UART_Init>
 8005820:	1e03      	subs	r3, r0, #0
 8005822:	d001      	beq.n	8005828 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8005824:	f001 f994 	bl	8006b50 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005828:	4b0e      	ldr	r3, [pc, #56]	@ (8005864 <MX_USART1_UART_Init+0x94>)
 800582a:	2100      	movs	r1, #0
 800582c:	0018      	movs	r0, r3
 800582e:	f008 f84b 	bl	800d8c8 <HAL_UARTEx_SetTxFifoThreshold>
 8005832:	1e03      	subs	r3, r0, #0
 8005834:	d001      	beq.n	800583a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8005836:	f001 f98b 	bl	8006b50 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800583a:	4b0a      	ldr	r3, [pc, #40]	@ (8005864 <MX_USART1_UART_Init+0x94>)
 800583c:	2100      	movs	r1, #0
 800583e:	0018      	movs	r0, r3
 8005840:	f008 f882 	bl	800d948 <HAL_UARTEx_SetRxFifoThreshold>
 8005844:	1e03      	subs	r3, r0, #0
 8005846:	d001      	beq.n	800584c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8005848:	f001 f982 	bl	8006b50 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800584c:	4b05      	ldr	r3, [pc, #20]	@ (8005864 <MX_USART1_UART_Init+0x94>)
 800584e:	0018      	movs	r0, r3
 8005850:	f008 f800 	bl	800d854 <HAL_UARTEx_DisableFifoMode>
 8005854:	1e03      	subs	r3, r0, #0
 8005856:	d001      	beq.n	800585c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8005858:	f001 f97a 	bl	8006b50 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800585c:	46c0      	nop			@ (mov r8, r8)
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
 8005862:	46c0      	nop			@ (mov r8, r8)
 8005864:	20002084 	.word	0x20002084
 8005868:	40013800 	.word	0x40013800

0800586c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005870:	4b23      	ldr	r3, [pc, #140]	@ (8005900 <MX_USART2_UART_Init+0x94>)
 8005872:	4a24      	ldr	r2, [pc, #144]	@ (8005904 <MX_USART2_UART_Init+0x98>)
 8005874:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005876:	4b22      	ldr	r3, [pc, #136]	@ (8005900 <MX_USART2_UART_Init+0x94>)
 8005878:	22e1      	movs	r2, #225	@ 0xe1
 800587a:	0252      	lsls	r2, r2, #9
 800587c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800587e:	4b20      	ldr	r3, [pc, #128]	@ (8005900 <MX_USART2_UART_Init+0x94>)
 8005880:	2200      	movs	r2, #0
 8005882:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005884:	4b1e      	ldr	r3, [pc, #120]	@ (8005900 <MX_USART2_UART_Init+0x94>)
 8005886:	2200      	movs	r2, #0
 8005888:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800588a:	4b1d      	ldr	r3, [pc, #116]	@ (8005900 <MX_USART2_UART_Init+0x94>)
 800588c:	2200      	movs	r2, #0
 800588e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005890:	4b1b      	ldr	r3, [pc, #108]	@ (8005900 <MX_USART2_UART_Init+0x94>)
 8005892:	220c      	movs	r2, #12
 8005894:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005896:	4b1a      	ldr	r3, [pc, #104]	@ (8005900 <MX_USART2_UART_Init+0x94>)
 8005898:	2200      	movs	r2, #0
 800589a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800589c:	4b18      	ldr	r3, [pc, #96]	@ (8005900 <MX_USART2_UART_Init+0x94>)
 800589e:	2200      	movs	r2, #0
 80058a0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80058a2:	4b17      	ldr	r3, [pc, #92]	@ (8005900 <MX_USART2_UART_Init+0x94>)
 80058a4:	2200      	movs	r2, #0
 80058a6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80058a8:	4b15      	ldr	r3, [pc, #84]	@ (8005900 <MX_USART2_UART_Init+0x94>)
 80058aa:	2200      	movs	r2, #0
 80058ac:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80058ae:	4b14      	ldr	r3, [pc, #80]	@ (8005900 <MX_USART2_UART_Init+0x94>)
 80058b0:	2200      	movs	r2, #0
 80058b2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80058b4:	4b12      	ldr	r3, [pc, #72]	@ (8005900 <MX_USART2_UART_Init+0x94>)
 80058b6:	0018      	movs	r0, r3
 80058b8:	f007 f862 	bl	800c980 <HAL_UART_Init>
 80058bc:	1e03      	subs	r3, r0, #0
 80058be:	d001      	beq.n	80058c4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80058c0:	f001 f946 	bl	8006b50 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80058c4:	4b0e      	ldr	r3, [pc, #56]	@ (8005900 <MX_USART2_UART_Init+0x94>)
 80058c6:	2100      	movs	r1, #0
 80058c8:	0018      	movs	r0, r3
 80058ca:	f007 fffd 	bl	800d8c8 <HAL_UARTEx_SetTxFifoThreshold>
 80058ce:	1e03      	subs	r3, r0, #0
 80058d0:	d001      	beq.n	80058d6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80058d2:	f001 f93d 	bl	8006b50 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80058d6:	4b0a      	ldr	r3, [pc, #40]	@ (8005900 <MX_USART2_UART_Init+0x94>)
 80058d8:	2100      	movs	r1, #0
 80058da:	0018      	movs	r0, r3
 80058dc:	f008 f834 	bl	800d948 <HAL_UARTEx_SetRxFifoThreshold>
 80058e0:	1e03      	subs	r3, r0, #0
 80058e2:	d001      	beq.n	80058e8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80058e4:	f001 f934 	bl	8006b50 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80058e8:	4b05      	ldr	r3, [pc, #20]	@ (8005900 <MX_USART2_UART_Init+0x94>)
 80058ea:	0018      	movs	r0, r3
 80058ec:	f007 ffb2 	bl	800d854 <HAL_UARTEx_DisableFifoMode>
 80058f0:	1e03      	subs	r3, r0, #0
 80058f2:	d001      	beq.n	80058f8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80058f4:	f001 f92c 	bl	8006b50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80058f8:	46c0      	nop			@ (mov r8, r8)
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
 80058fe:	46c0      	nop			@ (mov r8, r8)
 8005900:	20002118 	.word	0x20002118
 8005904:	40004400 	.word	0x40004400

08005908 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005908:	b590      	push	{r4, r7, lr}
 800590a:	b08b      	sub	sp, #44	@ 0x2c
 800590c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800590e:	2414      	movs	r4, #20
 8005910:	193b      	adds	r3, r7, r4
 8005912:	0018      	movs	r0, r3
 8005914:	2314      	movs	r3, #20
 8005916:	001a      	movs	r2, r3
 8005918:	2100      	movs	r1, #0
 800591a:	f009 f951 	bl	800ebc0 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800591e:	4b4d      	ldr	r3, [pc, #308]	@ (8005a54 <MX_GPIO_Init+0x14c>)
 8005920:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005922:	4b4c      	ldr	r3, [pc, #304]	@ (8005a54 <MX_GPIO_Init+0x14c>)
 8005924:	2104      	movs	r1, #4
 8005926:	430a      	orrs	r2, r1
 8005928:	635a      	str	r2, [r3, #52]	@ 0x34
 800592a:	4b4a      	ldr	r3, [pc, #296]	@ (8005a54 <MX_GPIO_Init+0x14c>)
 800592c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800592e:	2204      	movs	r2, #4
 8005930:	4013      	ands	r3, r2
 8005932:	613b      	str	r3, [r7, #16]
 8005934:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005936:	4b47      	ldr	r3, [pc, #284]	@ (8005a54 <MX_GPIO_Init+0x14c>)
 8005938:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800593a:	4b46      	ldr	r3, [pc, #280]	@ (8005a54 <MX_GPIO_Init+0x14c>)
 800593c:	2101      	movs	r1, #1
 800593e:	430a      	orrs	r2, r1
 8005940:	635a      	str	r2, [r3, #52]	@ 0x34
 8005942:	4b44      	ldr	r3, [pc, #272]	@ (8005a54 <MX_GPIO_Init+0x14c>)
 8005944:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005946:	2201      	movs	r2, #1
 8005948:	4013      	ands	r3, r2
 800594a:	60fb      	str	r3, [r7, #12]
 800594c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800594e:	4b41      	ldr	r3, [pc, #260]	@ (8005a54 <MX_GPIO_Init+0x14c>)
 8005950:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005952:	4b40      	ldr	r3, [pc, #256]	@ (8005a54 <MX_GPIO_Init+0x14c>)
 8005954:	2102      	movs	r1, #2
 8005956:	430a      	orrs	r2, r1
 8005958:	635a      	str	r2, [r3, #52]	@ 0x34
 800595a:	4b3e      	ldr	r3, [pc, #248]	@ (8005a54 <MX_GPIO_Init+0x14c>)
 800595c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800595e:	2202      	movs	r2, #2
 8005960:	4013      	ands	r3, r2
 8005962:	60bb      	str	r3, [r7, #8]
 8005964:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005966:	4b3b      	ldr	r3, [pc, #236]	@ (8005a54 <MX_GPIO_Init+0x14c>)
 8005968:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800596a:	4b3a      	ldr	r3, [pc, #232]	@ (8005a54 <MX_GPIO_Init+0x14c>)
 800596c:	2108      	movs	r1, #8
 800596e:	430a      	orrs	r2, r1
 8005970:	635a      	str	r2, [r3, #52]	@ 0x34
 8005972:	4b38      	ldr	r3, [pc, #224]	@ (8005a54 <MX_GPIO_Init+0x14c>)
 8005974:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005976:	2208      	movs	r2, #8
 8005978:	4013      	ands	r3, r2
 800597a:	607b      	str	r3, [r7, #4]
 800597c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_15, GPIO_PIN_RESET);
 800597e:	4936      	ldr	r1, [pc, #216]	@ (8005a58 <MX_GPIO_Init+0x150>)
 8005980:	23a0      	movs	r3, #160	@ 0xa0
 8005982:	05db      	lsls	r3, r3, #23
 8005984:	2200      	movs	r2, #0
 8005986:	0018      	movs	r0, r3
 8005988:	f003 f91b 	bl	8008bc2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800598c:	193b      	adds	r3, r7, r4
 800598e:	2202      	movs	r2, #2
 8005990:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005992:	193b      	adds	r3, r7, r4
 8005994:	2288      	movs	r2, #136	@ 0x88
 8005996:	0352      	lsls	r2, r2, #13
 8005998:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800599a:	193b      	adds	r3, r7, r4
 800599c:	2200      	movs	r2, #0
 800599e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80059a0:	193b      	adds	r3, r7, r4
 80059a2:	4a2e      	ldr	r2, [pc, #184]	@ (8005a5c <MX_GPIO_Init+0x154>)
 80059a4:	0019      	movs	r1, r3
 80059a6:	0010      	movs	r0, r2
 80059a8:	f002 ff82 	bl	80088b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_15;
 80059ac:	193b      	adds	r3, r7, r4
 80059ae:	4a2a      	ldr	r2, [pc, #168]	@ (8005a58 <MX_GPIO_Init+0x150>)
 80059b0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80059b2:	193b      	adds	r3, r7, r4
 80059b4:	2201      	movs	r2, #1
 80059b6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059b8:	193b      	adds	r3, r7, r4
 80059ba:	2200      	movs	r2, #0
 80059bc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059be:	193b      	adds	r3, r7, r4
 80059c0:	2200      	movs	r2, #0
 80059c2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80059c4:	193a      	adds	r2, r7, r4
 80059c6:	23a0      	movs	r3, #160	@ 0xa0
 80059c8:	05db      	lsls	r3, r3, #23
 80059ca:	0011      	movs	r1, r2
 80059cc:	0018      	movs	r0, r3
 80059ce:	f002 ff6f 	bl	80088b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80059d2:	0021      	movs	r1, r4
 80059d4:	187b      	adds	r3, r7, r1
 80059d6:	2204      	movs	r2, #4
 80059d8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80059da:	187b      	adds	r3, r7, r1
 80059dc:	2288      	movs	r2, #136	@ 0x88
 80059de:	0352      	lsls	r2, r2, #13
 80059e0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059e2:	187b      	adds	r3, r7, r1
 80059e4:	2200      	movs	r2, #0
 80059e6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80059e8:	000c      	movs	r4, r1
 80059ea:	187b      	adds	r3, r7, r1
 80059ec:	4a1c      	ldr	r2, [pc, #112]	@ (8005a60 <MX_GPIO_Init+0x158>)
 80059ee:	0019      	movs	r1, r3
 80059f0:	0010      	movs	r0, r2
 80059f2:	f002 ff5d 	bl	80088b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80059f6:	0021      	movs	r1, r4
 80059f8:	187b      	adds	r3, r7, r1
 80059fa:	2280      	movs	r2, #128	@ 0x80
 80059fc:	0112      	lsls	r2, r2, #4
 80059fe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005a00:	187b      	adds	r3, r7, r1
 8005a02:	2288      	movs	r2, #136	@ 0x88
 8005a04:	0352      	lsls	r2, r2, #13
 8005a06:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a08:	187b      	adds	r3, r7, r1
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a0e:	187a      	adds	r2, r7, r1
 8005a10:	23a0      	movs	r3, #160	@ 0xa0
 8005a12:	05db      	lsls	r3, r3, #23
 8005a14:	0011      	movs	r1, r2
 8005a16:	0018      	movs	r0, r3
 8005a18:	f002 ff4a 	bl	80088b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	2100      	movs	r1, #0
 8005a20:	2005      	movs	r0, #5
 8005a22:	f002 ff13 	bl	800884c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8005a26:	2005      	movs	r0, #5
 8005a28:	f002 ff25 	bl	8008876 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	2100      	movs	r1, #0
 8005a30:	2006      	movs	r0, #6
 8005a32:	f002 ff0b 	bl	800884c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8005a36:	2006      	movs	r0, #6
 8005a38:	f002 ff1d 	bl	8008876 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	2100      	movs	r1, #0
 8005a40:	2007      	movs	r0, #7
 8005a42:	f002 ff03 	bl	800884c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8005a46:	2007      	movs	r0, #7
 8005a48:	f002 ff15 	bl	8008876 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8005a4c:	46c0      	nop			@ (mov r8, r8)
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	b00b      	add	sp, #44	@ 0x2c
 8005a52:	bd90      	pop	{r4, r7, pc}
 8005a54:	40021000 	.word	0x40021000
 8005a58:	00008030 	.word	0x00008030
 8005a5c:	50000800 	.word	0x50000800
 8005a60:	50000400 	.word	0x50000400

08005a64 <ChangeNote>:

/* USER CODE BEGIN 4 */
void ChangeNote(enum Scale freq)
{
 8005a64:	b590      	push	{r4, r7, lr}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	0002      	movs	r2, r0
 8005a6c:	1dbb      	adds	r3, r7, #6
 8005a6e:	801a      	strh	r2, [r3, #0]
    TIM17->ARR=(uint32_t)(987*(float)1000/(float)freq);
 8005a70:	1dbb      	adds	r3, r7, #6
 8005a72:	881b      	ldrh	r3, [r3, #0]
 8005a74:	0018      	movs	r0, r3
 8005a76:	f7fb fee7 	bl	8001848 <__aeabi_ui2f>
 8005a7a:	1c03      	adds	r3, r0, #0
 8005a7c:	1c19      	adds	r1, r3, #0
 8005a7e:	4807      	ldr	r0, [pc, #28]	@ (8005a9c <ChangeNote+0x38>)
 8005a80:	f7fb f8e6 	bl	8000c50 <__aeabi_fdiv>
 8005a84:	1c03      	adds	r3, r0, #0
 8005a86:	4c06      	ldr	r4, [pc, #24]	@ (8005aa0 <ChangeNote+0x3c>)
 8005a88:	1c18      	adds	r0, r3, #0
 8005a8a:	f7fa fd9d 	bl	80005c8 <__aeabi_f2uiz>
 8005a8e:	0003      	movs	r3, r0
 8005a90:	62e3      	str	r3, [r4, #44]	@ 0x2c
}
 8005a92:	46c0      	nop			@ (mov r8, r8)
 8005a94:	46bd      	mov	sp, r7
 8005a96:	b003      	add	sp, #12
 8005a98:	bd90      	pop	{r4, r7, pc}
 8005a9a:	46c0      	nop			@ (mov r8, r8)
 8005a9c:	4970f780 	.word	0x4970f780
 8005aa0:	40014800 	.word	0x40014800

08005aa4 <PlayEffect>:
void PlayEffect(enum SoundEffects effect) {
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b082      	sub	sp, #8
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	0002      	movs	r2, r0
 8005aac:	1dfb      	adds	r3, r7, #7
 8005aae:	701a      	strb	r2, [r3, #0]
	HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8005ab0:	4ba0      	ldr	r3, [pc, #640]	@ (8005d34 <PlayEffect+0x290>)
 8005ab2:	2100      	movs	r1, #0
 8005ab4:	0018      	movs	r0, r3
 8005ab6:	f006 f8cb 	bl	800bc50 <HAL_TIM_PWM_Start>
	HAL_Delay(5);
 8005aba:	2005      	movs	r0, #5
 8005abc:	f002 fde0 	bl	8008680 <HAL_Delay>
    switch(effect){
 8005ac0:	1dfb      	adds	r3, r7, #7
 8005ac2:	781b      	ldrb	r3, [r3, #0]
 8005ac4:	2b06      	cmp	r3, #6
 8005ac6:	d900      	bls.n	8005aca <PlayEffect+0x26>
 8005ac8:	e12a      	b.n	8005d20 <PlayEffect+0x27c>
 8005aca:	009a      	lsls	r2, r3, #2
 8005acc:	4b9a      	ldr	r3, [pc, #616]	@ (8005d38 <PlayEffect+0x294>)
 8005ace:	18d3      	adds	r3, r2, r3
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	469f      	mov	pc, r3
        case MenuBeep:

        	curNote = G*3;
 8005ad4:	4b99      	ldr	r3, [pc, #612]	@ (8005d3c <PlayEffect+0x298>)
 8005ad6:	2293      	movs	r2, #147	@ 0x93
 8005ad8:	0112      	lsls	r2, r2, #4
 8005ada:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 8005adc:	4b97      	ldr	r3, [pc, #604]	@ (8005d3c <PlayEffect+0x298>)
 8005ade:	881b      	ldrh	r3, [r3, #0]
 8005ae0:	0018      	movs	r0, r3
 8005ae2:	f7ff ffbf 	bl	8005a64 <ChangeNote>
        	HAL_Delay(25);
 8005ae6:	2019      	movs	r0, #25
 8005ae8:	f002 fdca 	bl	8008680 <HAL_Delay>

        	curNote = G*2;
 8005aec:	4b93      	ldr	r3, [pc, #588]	@ (8005d3c <PlayEffect+0x298>)
 8005aee:	22c4      	movs	r2, #196	@ 0xc4
 8005af0:	00d2      	lsls	r2, r2, #3
 8005af2:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 8005af4:	4b91      	ldr	r3, [pc, #580]	@ (8005d3c <PlayEffect+0x298>)
 8005af6:	881b      	ldrh	r3, [r3, #0]
 8005af8:	0018      	movs	r0, r3
 8005afa:	f7ff ffb3 	bl	8005a64 <ChangeNote>
        	HAL_Delay(25);
 8005afe:	2019      	movs	r0, #25
 8005b00:	f002 fdbe 	bl	8008680 <HAL_Delay>

            break;
 8005b04:	e10c      	b.n	8005d20 <PlayEffect+0x27c>
        case EggNoise:

        	curNote = A;
 8005b06:	4b8d      	ldr	r3, [pc, #564]	@ (8005d3c <PlayEffect+0x298>)
 8005b08:	22dc      	movs	r2, #220	@ 0xdc
 8005b0a:	0052      	lsls	r2, r2, #1
 8005b0c:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 8005b0e:	4b8b      	ldr	r3, [pc, #556]	@ (8005d3c <PlayEffect+0x298>)
 8005b10:	881b      	ldrh	r3, [r3, #0]
 8005b12:	0018      	movs	r0, r3
 8005b14:	f7ff ffa6 	bl	8005a64 <ChangeNote>
        	HAL_Delay(20);
 8005b18:	2014      	movs	r0, #20
 8005b1a:	f002 fdb1 	bl	8008680 <HAL_Delay>

        	curNote = C;
 8005b1e:	4b87      	ldr	r3, [pc, #540]	@ (8005d3c <PlayEffect+0x298>)
 8005b20:	4a87      	ldr	r2, [pc, #540]	@ (8005d40 <PlayEffect+0x29c>)
 8005b22:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 8005b24:	4b85      	ldr	r3, [pc, #532]	@ (8005d3c <PlayEffect+0x298>)
 8005b26:	881b      	ldrh	r3, [r3, #0]
 8005b28:	0018      	movs	r0, r3
 8005b2a:	f7ff ff9b 	bl	8005a64 <ChangeNote>
        	HAL_Delay(20);
 8005b2e:	2014      	movs	r0, #20
 8005b30:	f002 fda6 	bl	8008680 <HAL_Delay>

        	curNote = A;
 8005b34:	4b81      	ldr	r3, [pc, #516]	@ (8005d3c <PlayEffect+0x298>)
 8005b36:	22dc      	movs	r2, #220	@ 0xdc
 8005b38:	0052      	lsls	r2, r2, #1
 8005b3a:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 8005b3c:	4b7f      	ldr	r3, [pc, #508]	@ (8005d3c <PlayEffect+0x298>)
 8005b3e:	881b      	ldrh	r3, [r3, #0]
 8005b40:	0018      	movs	r0, r3
 8005b42:	f7ff ff8f 	bl	8005a64 <ChangeNote>
        	HAL_Delay(20);
 8005b46:	2014      	movs	r0, #20
 8005b48:	f002 fd9a 	bl	8008680 <HAL_Delay>

        	curNote = C;
 8005b4c:	4b7b      	ldr	r3, [pc, #492]	@ (8005d3c <PlayEffect+0x298>)
 8005b4e:	4a7c      	ldr	r2, [pc, #496]	@ (8005d40 <PlayEffect+0x29c>)
 8005b50:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 8005b52:	4b7a      	ldr	r3, [pc, #488]	@ (8005d3c <PlayEffect+0x298>)
 8005b54:	881b      	ldrh	r3, [r3, #0]
 8005b56:	0018      	movs	r0, r3
 8005b58:	f7ff ff84 	bl	8005a64 <ChangeNote>
        	HAL_Delay(20);
 8005b5c:	2014      	movs	r0, #20
 8005b5e:	f002 fd8f 	bl	8008680 <HAL_Delay>

            break;
 8005b62:	e0dd      	b.n	8005d20 <PlayEffect+0x27c>
        case YoungNoiseHappy:

        	curNote = F*4;
 8005b64:	4b75      	ldr	r3, [pc, #468]	@ (8005d3c <PlayEffect+0x298>)
 8005b66:	4a77      	ldr	r2, [pc, #476]	@ (8005d44 <PlayEffect+0x2a0>)
 8005b68:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 8005b6a:	4b74      	ldr	r3, [pc, #464]	@ (8005d3c <PlayEffect+0x298>)
 8005b6c:	881b      	ldrh	r3, [r3, #0]
 8005b6e:	0018      	movs	r0, r3
 8005b70:	f7ff ff78 	bl	8005a64 <ChangeNote>
        	HAL_Delay(35);
 8005b74:	2023      	movs	r0, #35	@ 0x23
 8005b76:	f002 fd83 	bl	8008680 <HAL_Delay>

        	curNote = B*4;
 8005b7a:	4b70      	ldr	r3, [pc, #448]	@ (8005d3c <PlayEffect+0x298>)
 8005b7c:	22f7      	movs	r2, #247	@ 0xf7
 8005b7e:	00d2      	lsls	r2, r2, #3
 8005b80:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 8005b82:	4b6e      	ldr	r3, [pc, #440]	@ (8005d3c <PlayEffect+0x298>)
 8005b84:	881b      	ldrh	r3, [r3, #0]
 8005b86:	0018      	movs	r0, r3
 8005b88:	f7ff ff6c 	bl	8005a64 <ChangeNote>
        	HAL_Delay(15);
 8005b8c:	200f      	movs	r0, #15
 8005b8e:	f002 fd77 	bl	8008680 <HAL_Delay>

            break;
 8005b92:	e0c5      	b.n	8005d20 <PlayEffect+0x27c>
        case YoungNoiseSad:

        	curNote = B*4;
 8005b94:	4b69      	ldr	r3, [pc, #420]	@ (8005d3c <PlayEffect+0x298>)
 8005b96:	22f7      	movs	r2, #247	@ 0xf7
 8005b98:	00d2      	lsls	r2, r2, #3
 8005b9a:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 8005b9c:	4b67      	ldr	r3, [pc, #412]	@ (8005d3c <PlayEffect+0x298>)
 8005b9e:	881b      	ldrh	r3, [r3, #0]
 8005ba0:	0018      	movs	r0, r3
 8005ba2:	f7ff ff5f 	bl	8005a64 <ChangeNote>
        	HAL_Delay(35);
 8005ba6:	2023      	movs	r0, #35	@ 0x23
 8005ba8:	f002 fd6a 	bl	8008680 <HAL_Delay>

        	curNote = B*3;
 8005bac:	4b63      	ldr	r3, [pc, #396]	@ (8005d3c <PlayEffect+0x298>)
 8005bae:	4a66      	ldr	r2, [pc, #408]	@ (8005d48 <PlayEffect+0x2a4>)
 8005bb0:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 8005bb2:	4b62      	ldr	r3, [pc, #392]	@ (8005d3c <PlayEffect+0x298>)
 8005bb4:	881b      	ldrh	r3, [r3, #0]
 8005bb6:	0018      	movs	r0, r3
 8005bb8:	f7ff ff54 	bl	8005a64 <ChangeNote>
        	HAL_Delay(15);
 8005bbc:	200f      	movs	r0, #15
 8005bbe:	f002 fd5f 	bl	8008680 <HAL_Delay>

            break;
 8005bc2:	e0ad      	b.n	8005d20 <PlayEffect+0x27c>
        case AdultNoiseHappy:

        	curNote = F/4;
 8005bc4:	4b5d      	ldr	r3, [pc, #372]	@ (8005d3c <PlayEffect+0x298>)
 8005bc6:	22ae      	movs	r2, #174	@ 0xae
 8005bc8:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 8005bca:	4b5c      	ldr	r3, [pc, #368]	@ (8005d3c <PlayEffect+0x298>)
 8005bcc:	881b      	ldrh	r3, [r3, #0]
 8005bce:	0018      	movs	r0, r3
 8005bd0:	f7ff ff48 	bl	8005a64 <ChangeNote>
        	HAL_Delay(35);
 8005bd4:	2023      	movs	r0, #35	@ 0x23
 8005bd6:	f002 fd53 	bl	8008680 <HAL_Delay>

        	curNote = B/4;
 8005bda:	4b58      	ldr	r3, [pc, #352]	@ (8005d3c <PlayEffect+0x298>)
 8005bdc:	227b      	movs	r2, #123	@ 0x7b
 8005bde:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 8005be0:	4b56      	ldr	r3, [pc, #344]	@ (8005d3c <PlayEffect+0x298>)
 8005be2:	881b      	ldrh	r3, [r3, #0]
 8005be4:	0018      	movs	r0, r3
 8005be6:	f7ff ff3d 	bl	8005a64 <ChangeNote>
        	HAL_Delay(15);
 8005bea:	200f      	movs	r0, #15
 8005bec:	f002 fd48 	bl	8008680 <HAL_Delay>

            break;
 8005bf0:	e096      	b.n	8005d20 <PlayEffect+0x27c>
        case AdultNoiseSad:

        	curNote = C/4;
 8005bf2:	4b52      	ldr	r3, [pc, #328]	@ (8005d3c <PlayEffect+0x298>)
 8005bf4:	2282      	movs	r2, #130	@ 0x82
 8005bf6:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 8005bf8:	4b50      	ldr	r3, [pc, #320]	@ (8005d3c <PlayEffect+0x298>)
 8005bfa:	881b      	ldrh	r3, [r3, #0]
 8005bfc:	0018      	movs	r0, r3
 8005bfe:	f7ff ff31 	bl	8005a64 <ChangeNote>
        	HAL_Delay(35);
 8005c02:	2023      	movs	r0, #35	@ 0x23
 8005c04:	f002 fd3c 	bl	8008680 <HAL_Delay>

        	curNote = A/4;
 8005c08:	4b4c      	ldr	r3, [pc, #304]	@ (8005d3c <PlayEffect+0x298>)
 8005c0a:	226e      	movs	r2, #110	@ 0x6e
 8005c0c:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 8005c0e:	4b4b      	ldr	r3, [pc, #300]	@ (8005d3c <PlayEffect+0x298>)
 8005c10:	881b      	ldrh	r3, [r3, #0]
 8005c12:	0018      	movs	r0, r3
 8005c14:	f7ff ff26 	bl	8005a64 <ChangeNote>
        	HAL_Delay(15);
 8005c18:	200f      	movs	r0, #15
 8005c1a:	f002 fd31 	bl	8008680 <HAL_Delay>

        	break;
 8005c1e:	e07f      	b.n	8005d20 <PlayEffect+0x27c>
        case Evolution:

        	curNote = A*2;
 8005c20:	4b46      	ldr	r3, [pc, #280]	@ (8005d3c <PlayEffect+0x298>)
 8005c22:	22dc      	movs	r2, #220	@ 0xdc
 8005c24:	0092      	lsls	r2, r2, #2
 8005c26:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 8005c28:	4b44      	ldr	r3, [pc, #272]	@ (8005d3c <PlayEffect+0x298>)
 8005c2a:	881b      	ldrh	r3, [r3, #0]
 8005c2c:	0018      	movs	r0, r3
 8005c2e:	f7ff ff19 	bl	8005a64 <ChangeNote>
        	HAL_Delay(50);
 8005c32:	2032      	movs	r0, #50	@ 0x32
 8005c34:	f002 fd24 	bl	8008680 <HAL_Delay>

        	curNote = B*2;
 8005c38:	4b40      	ldr	r3, [pc, #256]	@ (8005d3c <PlayEffect+0x298>)
 8005c3a:	22f7      	movs	r2, #247	@ 0xf7
 8005c3c:	0092      	lsls	r2, r2, #2
 8005c3e:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 8005c40:	4b3e      	ldr	r3, [pc, #248]	@ (8005d3c <PlayEffect+0x298>)
 8005c42:	881b      	ldrh	r3, [r3, #0]
 8005c44:	0018      	movs	r0, r3
 8005c46:	f7ff ff0d 	bl	8005a64 <ChangeNote>
        	HAL_Delay(50);
 8005c4a:	2032      	movs	r0, #50	@ 0x32
 8005c4c:	f002 fd18 	bl	8008680 <HAL_Delay>

        	curNote = C*2;
 8005c50:	4b3a      	ldr	r3, [pc, #232]	@ (8005d3c <PlayEffect+0x298>)
 8005c52:	4a3e      	ldr	r2, [pc, #248]	@ (8005d4c <PlayEffect+0x2a8>)
 8005c54:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 8005c56:	4b39      	ldr	r3, [pc, #228]	@ (8005d3c <PlayEffect+0x298>)
 8005c58:	881b      	ldrh	r3, [r3, #0]
 8005c5a:	0018      	movs	r0, r3
 8005c5c:	f7ff ff02 	bl	8005a64 <ChangeNote>
        	HAL_Delay(50);
 8005c60:	2032      	movs	r0, #50	@ 0x32
 8005c62:	f002 fd0d 	bl	8008680 <HAL_Delay>

        	curNote = A*2;
 8005c66:	4b35      	ldr	r3, [pc, #212]	@ (8005d3c <PlayEffect+0x298>)
 8005c68:	22dc      	movs	r2, #220	@ 0xdc
 8005c6a:	0092      	lsls	r2, r2, #2
 8005c6c:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 8005c6e:	4b33      	ldr	r3, [pc, #204]	@ (8005d3c <PlayEffect+0x298>)
 8005c70:	881b      	ldrh	r3, [r3, #0]
 8005c72:	0018      	movs	r0, r3
 8005c74:	f7ff fef6 	bl	8005a64 <ChangeNote>
        	HAL_Delay(50);
 8005c78:	2032      	movs	r0, #50	@ 0x32
 8005c7a:	f002 fd01 	bl	8008680 <HAL_Delay>

        	curNote = C*2;
 8005c7e:	4b2f      	ldr	r3, [pc, #188]	@ (8005d3c <PlayEffect+0x298>)
 8005c80:	4a32      	ldr	r2, [pc, #200]	@ (8005d4c <PlayEffect+0x2a8>)
 8005c82:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 8005c84:	4b2d      	ldr	r3, [pc, #180]	@ (8005d3c <PlayEffect+0x298>)
 8005c86:	881b      	ldrh	r3, [r3, #0]
 8005c88:	0018      	movs	r0, r3
 8005c8a:	f7ff feeb 	bl	8005a64 <ChangeNote>
        	HAL_Delay(50);
 8005c8e:	2032      	movs	r0, #50	@ 0x32
 8005c90:	f002 fcf6 	bl	8008680 <HAL_Delay>

        	curNote = D*2;
 8005c94:	4b29      	ldr	r3, [pc, #164]	@ (8005d3c <PlayEffect+0x298>)
 8005c96:	4a2e      	ldr	r2, [pc, #184]	@ (8005d50 <PlayEffect+0x2ac>)
 8005c98:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 8005c9a:	4b28      	ldr	r3, [pc, #160]	@ (8005d3c <PlayEffect+0x298>)
 8005c9c:	881b      	ldrh	r3, [r3, #0]
 8005c9e:	0018      	movs	r0, r3
 8005ca0:	f7ff fee0 	bl	8005a64 <ChangeNote>
        	HAL_Delay(50);
 8005ca4:	2032      	movs	r0, #50	@ 0x32
 8005ca6:	f002 fceb 	bl	8008680 <HAL_Delay>

        	curNote = B*2;
 8005caa:	4b24      	ldr	r3, [pc, #144]	@ (8005d3c <PlayEffect+0x298>)
 8005cac:	22f7      	movs	r2, #247	@ 0xf7
 8005cae:	0092      	lsls	r2, r2, #2
 8005cb0:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 8005cb2:	4b22      	ldr	r3, [pc, #136]	@ (8005d3c <PlayEffect+0x298>)
 8005cb4:	881b      	ldrh	r3, [r3, #0]
 8005cb6:	0018      	movs	r0, r3
 8005cb8:	f7ff fed4 	bl	8005a64 <ChangeNote>
        	HAL_Delay(50);
 8005cbc:	2032      	movs	r0, #50	@ 0x32
 8005cbe:	f002 fcdf 	bl	8008680 <HAL_Delay>

        	curNote = D*2;
 8005cc2:	4b1e      	ldr	r3, [pc, #120]	@ (8005d3c <PlayEffect+0x298>)
 8005cc4:	4a22      	ldr	r2, [pc, #136]	@ (8005d50 <PlayEffect+0x2ac>)
 8005cc6:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 8005cc8:	4b1c      	ldr	r3, [pc, #112]	@ (8005d3c <PlayEffect+0x298>)
 8005cca:	881b      	ldrh	r3, [r3, #0]
 8005ccc:	0018      	movs	r0, r3
 8005cce:	f7ff fec9 	bl	8005a64 <ChangeNote>
        	HAL_Delay(50);
 8005cd2:	2032      	movs	r0, #50	@ 0x32
 8005cd4:	f002 fcd4 	bl	8008680 <HAL_Delay>

        	curNote = E*2;
 8005cd8:	4b18      	ldr	r3, [pc, #96]	@ (8005d3c <PlayEffect+0x298>)
 8005cda:	4a1e      	ldr	r2, [pc, #120]	@ (8005d54 <PlayEffect+0x2b0>)
 8005cdc:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 8005cde:	4b17      	ldr	r3, [pc, #92]	@ (8005d3c <PlayEffect+0x298>)
 8005ce0:	881b      	ldrh	r3, [r3, #0]
 8005ce2:	0018      	movs	r0, r3
 8005ce4:	f7ff febe 	bl	8005a64 <ChangeNote>
        	HAL_Delay(50);
 8005ce8:	2032      	movs	r0, #50	@ 0x32
 8005cea:	f002 fcc9 	bl	8008680 <HAL_Delay>

        	curNote = G*2;
 8005cee:	4b13      	ldr	r3, [pc, #76]	@ (8005d3c <PlayEffect+0x298>)
 8005cf0:	22c4      	movs	r2, #196	@ 0xc4
 8005cf2:	00d2      	lsls	r2, r2, #3
 8005cf4:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 8005cf6:	4b11      	ldr	r3, [pc, #68]	@ (8005d3c <PlayEffect+0x298>)
 8005cf8:	881b      	ldrh	r3, [r3, #0]
 8005cfa:	0018      	movs	r0, r3
 8005cfc:	f7ff feb2 	bl	8005a64 <ChangeNote>
        	HAL_Delay(50);
 8005d00:	2032      	movs	r0, #50	@ 0x32
 8005d02:	f002 fcbd 	bl	8008680 <HAL_Delay>

        	curNote = G*2;
 8005d06:	4b0d      	ldr	r3, [pc, #52]	@ (8005d3c <PlayEffect+0x298>)
 8005d08:	22c4      	movs	r2, #196	@ 0xc4
 8005d0a:	00d2      	lsls	r2, r2, #3
 8005d0c:	801a      	strh	r2, [r3, #0]
        	ChangeNote(curNote);
 8005d0e:	4b0b      	ldr	r3, [pc, #44]	@ (8005d3c <PlayEffect+0x298>)
 8005d10:	881b      	ldrh	r3, [r3, #0]
 8005d12:	0018      	movs	r0, r3
 8005d14:	f7ff fea6 	bl	8005a64 <ChangeNote>
        	HAL_Delay(50);
 8005d18:	2032      	movs	r0, #50	@ 0x32
 8005d1a:	f002 fcb1 	bl	8008680 <HAL_Delay>

        	break;
 8005d1e:	46c0      	nop			@ (mov r8, r8)
    }
    HAL_TIM_PWM_Stop(&htim17, TIM_CHANNEL_1);
 8005d20:	4b04      	ldr	r3, [pc, #16]	@ (8005d34 <PlayEffect+0x290>)
 8005d22:	2100      	movs	r1, #0
 8005d24:	0018      	movs	r0, r3
 8005d26:	f006 f883 	bl	800be30 <HAL_TIM_PWM_Stop>
}
 8005d2a:	46c0      	nop			@ (mov r8, r8)
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	b002      	add	sp, #8
 8005d30:	bd80      	pop	{r7, pc}
 8005d32:	46c0      	nop			@ (mov r8, r8)
 8005d34:	20002038 	.word	0x20002038
 8005d38:	08011b4c 	.word	0x08011b4c
 8005d3c:	20000f32 	.word	0x20000f32
 8005d40:	0000020b 	.word	0x0000020b
 8005d44:	00000ae8 	.word	0x00000ae8
 8005d48:	000005ca 	.word	0x000005ca
 8005d4c:	00000416 	.word	0x00000416
 8005d50:	00000496 	.word	0x00000496
 8005d54:	00000526 	.word	0x00000526

08005d58 <HAL_GPIO_EXTI_Rising_Callback>:
//INTERRUPTS ARE CALLED BACK HERE
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b082      	sub	sp, #8
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	0002      	movs	r2, r0
 8005d60:	1dbb      	adds	r3, r7, #6
 8005d62:	801a      	strh	r2, [r3, #0]
	//Left=2048
	else if(GPIO_PIN==2048)
	{

	}*/
}
 8005d64:	46c0      	nop			@ (mov r8, r8)
 8005d66:	46bd      	mov	sp, r7
 8005d68:	b002      	add	sp, #8
 8005d6a:	bd80      	pop	{r7, pc}

08005d6c <PeripheralInit>:


//AURORA: Put custom functions here!
void PeripheralInit(void)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	af00      	add	r7, sp, #0
	ST7735_Unselect();
 8005d70:	f7fe fb74 	bl	800445c <ST7735_Unselect>
	ST7735_Init(1);
 8005d74:	2001      	movs	r0, #1
 8005d76:	f7fe fc85 	bl	8004684 <ST7735_Init>
	buffer[0] = 'A';
 8005d7a:	4b17      	ldr	r3, [pc, #92]	@ (8005dd8 <PeripheralInit+0x6c>)
 8005d7c:	2241      	movs	r2, #65	@ 0x41
 8005d7e:	701a      	strb	r2, [r3, #0]
	buffer[1] = 'B';
 8005d80:	4b15      	ldr	r3, [pc, #84]	@ (8005dd8 <PeripheralInit+0x6c>)
 8005d82:	2242      	movs	r2, #66	@ 0x42
 8005d84:	705a      	strb	r2, [r3, #1]
	TIM17->CCR1 = 5;
 8005d86:	4b15      	ldr	r3, [pc, #84]	@ (8005ddc <PeripheralInit+0x70>)
 8005d88:	2205      	movs	r2, #5
 8005d8a:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM17->PSC=64;
 8005d8c:	4b13      	ldr	r3, [pc, #76]	@ (8005ddc <PeripheralInit+0x70>)
 8005d8e:	2240      	movs	r2, #64	@ 0x40
 8005d90:	629a      	str	r2, [r3, #40]	@ 0x28
	//uint8_t ret=0;
	//_ADXL343_Init();

	//Pedometer Setup
	_ADXL343_WriteReg8(0x19, 0x02);
 8005d92:	2102      	movs	r1, #2
 8005d94:	2019      	movs	r0, #25
 8005d96:	f000 f915 	bl	8005fc4 <_ADXL343_WriteReg8>
	////wait

	_ADXL343_WriteReg8(0x7C, 0x01);
 8005d9a:	2101      	movs	r1, #1
 8005d9c:	207c      	movs	r0, #124	@ 0x7c
 8005d9e:	f000 f911 	bl	8005fc4 <_ADXL343_WriteReg8>
	 _ADXL343_WriteReg8(0x1A, 0x38);
 8005da2:	2138      	movs	r1, #56	@ 0x38
 8005da4:	201a      	movs	r0, #26
 8005da6:	f000 f90d 	bl	8005fc4 <_ADXL343_WriteReg8>
	_ADXL343_WriteReg8(0x1B, 0x04);
 8005daa:	2104      	movs	r1, #4
 8005dac:	201b      	movs	r0, #27
 8005dae:	f000 f909 	bl	8005fc4 <_ADXL343_WriteReg8>
	_ADXL343_WriteReg8(0x1F, 0x80);
 8005db2:	2180      	movs	r1, #128	@ 0x80
 8005db4:	201f      	movs	r0, #31
 8005db6:	f000 f905 	bl	8005fc4 <_ADXL343_WriteReg8>
	_ADXL343_WriteReg8(0x21, 0x80);
 8005dba:	2180      	movs	r1, #128	@ 0x80
 8005dbc:	2021      	movs	r0, #33	@ 0x21
 8005dbe:	f000 f901 	bl	8005fc4 <_ADXL343_WriteReg8>



	//  //Step Counter
	_ADXL343_WriteReg8(0x18, 0x01); // enable walking mode
 8005dc2:	2101      	movs	r1, #1
 8005dc4:	2018      	movs	r0, #24
 8005dc6:	f000 f8fd 	bl	8005fc4 <_ADXL343_WriteReg8>
	_ADXL343_WriteReg8(0x20, 0x01); // enable step interrupt
 8005dca:	2101      	movs	r1, #1
 8005dcc:	2020      	movs	r0, #32
 8005dce:	f000 f8f9 	bl	8005fc4 <_ADXL343_WriteReg8>
}
 8005dd2:	46c0      	nop			@ (mov r8, r8)
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}
 8005dd8:	200010e0 	.word	0x200010e0
 8005ddc:	40014800 	.word	0x40014800

08005de0 <StructInit>:
//INITIALIZE GAME VALUES
void StructInit(void)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	af00      	add	r7, sp, #0
	  steps=0;
 8005de4:	4b33      	ldr	r3, [pc, #204]	@ (8005eb4 <StructInit+0xd4>)
 8005de6:	2200      	movs	r2, #0
 8005de8:	701a      	strb	r2, [r3, #0]
	  //ANIMATIONS FOR EGG
	  //ANIMATIONS FOR BABY DRAGON
	  sitting0.Body = *imgSitting0;
 8005dea:	4b33      	ldr	r3, [pc, #204]	@ (8005eb8 <StructInit+0xd8>)
 8005dec:	4a33      	ldr	r2, [pc, #204]	@ (8005ebc <StructInit+0xdc>)
 8005dee:	601a      	str	r2, [r3, #0]
	  sitting0.Size = 307;
 8005df0:	4b31      	ldr	r3, [pc, #196]	@ (8005eb8 <StructInit+0xd8>)
 8005df2:	2234      	movs	r2, #52	@ 0x34
 8005df4:	32ff      	adds	r2, #255	@ 0xff
 8005df6:	605a      	str	r2, [r3, #4]
	  eggSitting0.Body = *imgEggSitting0;
 8005df8:	4b31      	ldr	r3, [pc, #196]	@ (8005ec0 <StructInit+0xe0>)
 8005dfa:	4a32      	ldr	r2, [pc, #200]	@ (8005ec4 <StructInit+0xe4>)
 8005dfc:	601a      	str	r2, [r3, #0]
	  eggSitting0.Size = 227;
 8005dfe:	4b30      	ldr	r3, [pc, #192]	@ (8005ec0 <StructInit+0xe0>)
 8005e00:	22e3      	movs	r2, #227	@ 0xe3
 8005e02:	605a      	str	r2, [r3, #4]
	  sitting1.Body = *imgSitting1;
 8005e04:	4b30      	ldr	r3, [pc, #192]	@ (8005ec8 <StructInit+0xe8>)
 8005e06:	4a31      	ldr	r2, [pc, #196]	@ (8005ecc <StructInit+0xec>)
 8005e08:	601a      	str	r2, [r3, #0]
	  sitting1.Size = 305;
 8005e0a:	4b2f      	ldr	r3, [pc, #188]	@ (8005ec8 <StructInit+0xe8>)
 8005e0c:	2232      	movs	r2, #50	@ 0x32
 8005e0e:	32ff      	adds	r2, #255	@ 0xff
 8005e10:	605a      	str	r2, [r3, #4]
	  animSitting[0] = sitting0;
 8005e12:	4b2f      	ldr	r3, [pc, #188]	@ (8005ed0 <StructInit+0xf0>)
 8005e14:	4a28      	ldr	r2, [pc, #160]	@ (8005eb8 <StructInit+0xd8>)
 8005e16:	ca03      	ldmia	r2!, {r0, r1}
 8005e18:	c303      	stmia	r3!, {r0, r1}
	  animSitting[1] = sitting1;
 8005e1a:	4b2d      	ldr	r3, [pc, #180]	@ (8005ed0 <StructInit+0xf0>)
 8005e1c:	4a2a      	ldr	r2, [pc, #168]	@ (8005ec8 <StructInit+0xe8>)
 8005e1e:	3308      	adds	r3, #8
 8005e20:	ca03      	ldmia	r2!, {r0, r1}
 8005e22:	c303      	stmia	r3!, {r0, r1}
	  animEggSitting[0] = eggSitting0;
 8005e24:	4b2b      	ldr	r3, [pc, #172]	@ (8005ed4 <StructInit+0xf4>)
 8005e26:	4a26      	ldr	r2, [pc, #152]	@ (8005ec0 <StructInit+0xe0>)
 8005e28:	ca03      	ldmia	r2!, {r0, r1}
 8005e2a:	c303      	stmia	r3!, {r0, r1}


	  game.evo=1;
 8005e2c:	4b2a      	ldr	r3, [pc, #168]	@ (8005ed8 <StructInit+0xf8>)
 8005e2e:	2201      	movs	r2, #1
 8005e30:	741a      	strb	r2, [r3, #16]
	  game.uid[0]='h';
 8005e32:	4a29      	ldr	r2, [pc, #164]	@ (8005ed8 <StructInit+0xf8>)
 8005e34:	2396      	movs	r3, #150	@ 0x96
 8005e36:	005b      	lsls	r3, r3, #1
 8005e38:	2168      	movs	r1, #104	@ 0x68
 8005e3a:	54d1      	strb	r1, [r2, r3]
	  game.uid[1]='i';
 8005e3c:	4a26      	ldr	r2, [pc, #152]	@ (8005ed8 <StructInit+0xf8>)
 8005e3e:	232e      	movs	r3, #46	@ 0x2e
 8005e40:	33ff      	adds	r3, #255	@ 0xff
 8005e42:	2169      	movs	r1, #105	@ 0x69
 8005e44:	54d1      	strb	r1, [r2, r3]
	  game.allSteps=0;
 8005e46:	4a24      	ldr	r2, [pc, #144]	@ (8005ed8 <StructInit+0xf8>)
 8005e48:	238c      	movs	r3, #140	@ 0x8c
 8005e4a:	005b      	lsls	r3, r3, #1
 8005e4c:	2100      	movs	r1, #0
 8005e4e:	50d1      	str	r1, [r2, r3]
	  game.mood=1;
 8005e50:	4b21      	ldr	r3, [pc, #132]	@ (8005ed8 <StructInit+0xf8>)
 8005e52:	2201      	movs	r2, #1
 8005e54:	745a      	strb	r2, [r3, #17]
	  game.numLocations=3;
 8005e56:	4b20      	ldr	r3, [pc, #128]	@ (8005ed8 <StructInit+0xf8>)
 8005e58:	2203      	movs	r2, #3
 8005e5a:	615a      	str	r2, [r3, #20]
	  game.stepsToday=0;
 8005e5c:	4a1e      	ldr	r2, [pc, #120]	@ (8005ed8 <StructInit+0xf8>)
 8005e5e:	2390      	movs	r3, #144	@ 0x90
 8005e60:	005b      	lsls	r3, r3, #1
 8005e62:	2100      	movs	r1, #0
 8005e64:	50d1      	str	r1, [r2, r3]
	  game.weeklySteps=0;
 8005e66:	4a1c      	ldr	r2, [pc, #112]	@ (8005ed8 <StructInit+0xf8>)
 8005e68:	238e      	movs	r3, #142	@ 0x8e
 8005e6a:	005b      	lsls	r3, r3, #1
 8005e6c:	2100      	movs	r1, #0
 8005e6e:	50d1      	str	r1, [r2, r3]
	  game.dailyGoal=2000;
 8005e70:	4a19      	ldr	r2, [pc, #100]	@ (8005ed8 <StructInit+0xf8>)
 8005e72:	2392      	movs	r3, #146	@ 0x92
 8005e74:	005b      	lsls	r3, r3, #1
 8005e76:	21fa      	movs	r1, #250	@ 0xfa
 8005e78:	00c9      	lsls	r1, r1, #3
 8005e7a:	50d1      	str	r1, [r2, r3]
	  dummy.lat=12.34567;
 8005e7c:	4b17      	ldr	r3, [pc, #92]	@ (8005edc <StructInit+0xfc>)
 8005e7e:	4a18      	ldr	r2, [pc, #96]	@ (8005ee0 <StructInit+0x100>)
 8005e80:	601a      	str	r2, [r3, #0]
	  dummy.lon=-89.10111;
 8005e82:	4b16      	ldr	r3, [pc, #88]	@ (8005edc <StructInit+0xfc>)
 8005e84:	4a17      	ldr	r2, [pc, #92]	@ (8005ee4 <StructInit+0x104>)
 8005e86:	605a      	str	r2, [r3, #4]
	  game.positions[0]=dummy;
 8005e88:	4b13      	ldr	r3, [pc, #76]	@ (8005ed8 <StructInit+0xf8>)
 8005e8a:	4a14      	ldr	r2, [pc, #80]	@ (8005edc <StructInit+0xfc>)
 8005e8c:	3318      	adds	r3, #24
 8005e8e:	ca03      	ldmia	r2!, {r0, r1}
 8005e90:	c303      	stmia	r3!, {r0, r1}
	  game.positions[1]=dummy;
 8005e92:	4b11      	ldr	r3, [pc, #68]	@ (8005ed8 <StructInit+0xf8>)
 8005e94:	4a11      	ldr	r2, [pc, #68]	@ (8005edc <StructInit+0xfc>)
 8005e96:	3320      	adds	r3, #32
 8005e98:	ca03      	ldmia	r2!, {r0, r1}
 8005e9a:	c303      	stmia	r3!, {r0, r1}
	  game.positions[2]=dummy;
 8005e9c:	4b0e      	ldr	r3, [pc, #56]	@ (8005ed8 <StructInit+0xf8>)
 8005e9e:	4a0f      	ldr	r2, [pc, #60]	@ (8005edc <StructInit+0xfc>)
 8005ea0:	3328      	adds	r3, #40	@ 0x28
 8005ea2:	ca03      	ldmia	r2!, {r0, r1}
 8005ea4:	c303      	stmia	r3!, {r0, r1}
	  game.time.hours=0;
 8005ea6:	4b0c      	ldr	r3, [pc, #48]	@ (8005ed8 <StructInit+0xf8>)
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	601a      	str	r2, [r3, #0]

}
 8005eac:	46c0      	nop			@ (mov r8, r8)
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}
 8005eb2:	46c0      	nop			@ (mov r8, r8)
 8005eb4:	20001f44 	.word	0x20001f44
 8005eb8:	20001eac 	.word	0x20001eac
 8005ebc:	20000390 	.word	0x20000390
 8005ec0:	20001ebc 	.word	0x20001ebc
 8005ec4:	20000004 	.word	0x20000004
 8005ec8:	20001eb4 	.word	0x20001eb4
 8005ecc:	2000085c 	.word	0x2000085c
 8005ed0:	20001ecc 	.word	0x20001ecc
 8005ed4:	20001ec4 	.word	0x20001ec4
 8005ed8:	20000f38 	.word	0x20000f38
 8005edc:	20001084 	.word	0x20001084
 8005ee0:	414587dd 	.word	0x414587dd
 8005ee4:	c2b233c5 	.word	0xc2b233c5

08005ee8 <Animate>:
		game.evo +=1;
	}

}
void Animate (struct Img* animation, unsigned int frameCount, unsigned int xPos, unsigned int yPos, unsigned int xSize, unsigned int ySize)
{
 8005ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005eea:	b089      	sub	sp, #36	@ 0x24
 8005eec:	af04      	add	r7, sp, #16
 8005eee:	60f8      	str	r0, [r7, #12]
 8005ef0:	60b9      	str	r1, [r7, #8]
 8005ef2:	607a      	str	r2, [r7, #4]
 8005ef4:	603b      	str	r3, [r7, #0]
	++currentFrame;
 8005ef6:	4b18      	ldr	r3, [pc, #96]	@ (8005f58 <Animate+0x70>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	1c5a      	adds	r2, r3, #1
 8005efc:	4b16      	ldr	r3, [pc, #88]	@ (8005f58 <Animate+0x70>)
 8005efe:	601a      	str	r2, [r3, #0]
	if(currentFrame > frameCount)
 8005f00:	4b15      	ldr	r3, [pc, #84]	@ (8005f58 <Animate+0x70>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	68ba      	ldr	r2, [r7, #8]
 8005f06:	429a      	cmp	r2, r3
 8005f08:	d202      	bcs.n	8005f10 <Animate+0x28>
	{
		currentFrame = 0;
 8005f0a:	4b13      	ldr	r3, [pc, #76]	@ (8005f58 <Animate+0x70>)
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	601a      	str	r2, [r3, #0]
	}
	drawImage(animation[currentFrame].Body, palette, xPos, yPos, xSize, ySize, animation[currentFrame].Size);
 8005f10:	4b11      	ldr	r3, [pc, #68]	@ (8005f58 <Animate+0x70>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	00db      	lsls	r3, r3, #3
 8005f16:	68fa      	ldr	r2, [r7, #12]
 8005f18:	18d3      	adds	r3, r2, r3
 8005f1a:	681c      	ldr	r4, [r3, #0]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	b29d      	uxth	r5, r3
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	b29e      	uxth	r6, r3
 8005f24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f26:	b29a      	uxth	r2, r3
 8005f28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f2a:	b299      	uxth	r1, r3
 8005f2c:	4b0a      	ldr	r3, [pc, #40]	@ (8005f58 <Animate+0x70>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	00db      	lsls	r3, r3, #3
 8005f32:	68f8      	ldr	r0, [r7, #12]
 8005f34:	18c3      	adds	r3, r0, r3
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	4808      	ldr	r0, [pc, #32]	@ (8005f5c <Animate+0x74>)
 8005f3c:	9302      	str	r3, [sp, #8]
 8005f3e:	9101      	str	r1, [sp, #4]
 8005f40:	9200      	str	r2, [sp, #0]
 8005f42:	0033      	movs	r3, r6
 8005f44:	002a      	movs	r2, r5
 8005f46:	0001      	movs	r1, r0
 8005f48:	0020      	movs	r0, r4
 8005f4a:	f7fe f9b5 	bl	80042b8 <drawImage>
	return;
 8005f4e:	46c0      	nop			@ (mov r8, r8)
}
 8005f50:	46bd      	mov	sp, r7
 8005f52:	b005      	add	sp, #20
 8005f54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f56:	46c0      	nop			@ (mov r8, r8)
 8005f58:	20001edc 	.word	0x20001edc
 8005f5c:	20000d20 	.word	0x20000d20

08005f60 <_ADXL343_ReadReg8>:

int _ADXL343_ReadReg8 (unsigned char TargetRegister, unsigned char * TargetValue, uint8_t size)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b084      	sub	sp, #16
 8005f64:	af02      	add	r7, sp, #8
 8005f66:	6039      	str	r1, [r7, #0]
 8005f68:	0011      	movs	r1, r2
 8005f6a:	1dfb      	adds	r3, r7, #7
 8005f6c:	1c02      	adds	r2, r0, #0
 8005f6e:	701a      	strb	r2, [r3, #0]
 8005f70:	1dbb      	adds	r3, r7, #6
 8005f72:	1c0a      	adds	r2, r1, #0
 8005f74:	701a      	strb	r2, [r3, #0]
  if (!HAL_I2C_Master_Transmit(&hi2c1, 0x14<<1, &TargetRegister, 1, 1000)==HAL_OK)
 8005f76:	1dfa      	adds	r2, r7, #7
 8005f78:	4811      	ldr	r0, [pc, #68]	@ (8005fc0 <_ADXL343_ReadReg8+0x60>)
 8005f7a:	23fa      	movs	r3, #250	@ 0xfa
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	9300      	str	r3, [sp, #0]
 8005f80:	2301      	movs	r3, #1
 8005f82:	2128      	movs	r1, #40	@ 0x28
 8005f84:	f002 ff14 	bl	8008db0 <HAL_I2C_Master_Transmit>
 8005f88:	1e03      	subs	r3, r0, #0
 8005f8a:	d002      	beq.n	8005f92 <_ADXL343_ReadReg8+0x32>
      return -1;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	425b      	negs	r3, r3
 8005f90:	e011      	b.n	8005fb6 <_ADXL343_ReadReg8+0x56>

  if (!HAL_I2C_Master_Receive(&hi2c1, 0x14<<1, TargetValue, size, 1000)==HAL_OK)
 8005f92:	1dbb      	adds	r3, r7, #6
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	b299      	uxth	r1, r3
 8005f98:	683a      	ldr	r2, [r7, #0]
 8005f9a:	4809      	ldr	r0, [pc, #36]	@ (8005fc0 <_ADXL343_ReadReg8+0x60>)
 8005f9c:	23fa      	movs	r3, #250	@ 0xfa
 8005f9e:	009b      	lsls	r3, r3, #2
 8005fa0:	9300      	str	r3, [sp, #0]
 8005fa2:	000b      	movs	r3, r1
 8005fa4:	2128      	movs	r1, #40	@ 0x28
 8005fa6:	f003 f82d 	bl	8009004 <HAL_I2C_Master_Receive>
 8005faa:	1e03      	subs	r3, r0, #0
 8005fac:	d002      	beq.n	8005fb4 <_ADXL343_ReadReg8+0x54>
    return -2;
 8005fae:	2302      	movs	r3, #2
 8005fb0:	425b      	negs	r3, r3
 8005fb2:	e000      	b.n	8005fb6 <_ADXL343_ReadReg8+0x56>

  return 0;
 8005fb4:	2300      	movs	r3, #0
}
 8005fb6:	0018      	movs	r0, r3
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	b002      	add	sp, #8
 8005fbc:	bd80      	pop	{r7, pc}
 8005fbe:	46c0      	nop			@ (mov r8, r8)
 8005fc0:	20001f54 	.word	0x20001f54

08005fc4 <_ADXL343_WriteReg8>:

int _ADXL343_WriteReg8 (unsigned char TargetRegister, unsigned char TargetValue)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b086      	sub	sp, #24
 8005fc8:	af02      	add	r7, sp, #8
 8005fca:	0002      	movs	r2, r0
 8005fcc:	1dfb      	adds	r3, r7, #7
 8005fce:	701a      	strb	r2, [r3, #0]
 8005fd0:	1dbb      	adds	r3, r7, #6
 8005fd2:	1c0a      	adds	r2, r1, #0
 8005fd4:	701a      	strb	r2, [r3, #0]
  unsigned char buff [2];
  buff[0] = TargetRegister;
 8005fd6:	210c      	movs	r1, #12
 8005fd8:	187b      	adds	r3, r7, r1
 8005fda:	1dfa      	adds	r2, r7, #7
 8005fdc:	7812      	ldrb	r2, [r2, #0]
 8005fde:	701a      	strb	r2, [r3, #0]
  buff[1] = TargetValue;
 8005fe0:	187b      	adds	r3, r7, r1
 8005fe2:	1dba      	adds	r2, r7, #6
 8005fe4:	7812      	ldrb	r2, [r2, #0]
 8005fe6:	705a      	strb	r2, [r3, #1]

  if (HAL_I2C_Master_Transmit(&hi2c1, 0x14<<1, buff, 2, 1000)==HAL_OK)
 8005fe8:	187a      	adds	r2, r7, r1
 8005fea:	4809      	ldr	r0, [pc, #36]	@ (8006010 <_ADXL343_WriteReg8+0x4c>)
 8005fec:	23fa      	movs	r3, #250	@ 0xfa
 8005fee:	009b      	lsls	r3, r3, #2
 8005ff0:	9300      	str	r3, [sp, #0]
 8005ff2:	2302      	movs	r3, #2
 8005ff4:	2128      	movs	r1, #40	@ 0x28
 8005ff6:	f002 fedb 	bl	8008db0 <HAL_I2C_Master_Transmit>
 8005ffa:	1e03      	subs	r3, r0, #0
 8005ffc:	d102      	bne.n	8006004 <_ADXL343_WriteReg8+0x40>
      return -1;
 8005ffe:	2301      	movs	r3, #1
 8006000:	425b      	negs	r3, r3
 8006002:	e000      	b.n	8006006 <_ADXL343_WriteReg8+0x42>

  return 0;
 8006004:	2300      	movs	r3, #0
}
 8006006:	0018      	movs	r0, r3
 8006008:	46bd      	mov	sp, r7
 800600a:	b004      	add	sp, #16
 800600c:	bd80      	pop	{r7, pc}
 800600e:	46c0      	nop			@ (mov r8, r8)
 8006010:	20001f54 	.word	0x20001f54

08006014 <SendData>:
void SendData()
{
 8006014:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006016:	46c6      	mov	lr, r8
 8006018:	b500      	push	{lr}
 800601a:	b088      	sub	sp, #32
 800601c:	af06      	add	r7, sp, #24
	unsigned int posIndex;
	unsigned int clrIndex;
	sprintf(sendBuffer, "(lifeSteps:%d),(weeklySteps:%d),(dailySteps:%d),(uid:%s),(friendship:%d),(password:password),(difficulty:%d),(evolution:%d) \n\r", game.allSteps,game.weeklySteps,game.stepsToday, game.uid, game.mood, game.dailyGoal, game.evo);
 800601e:	4a59      	ldr	r2, [pc, #356]	@ (8006184 <SendData+0x170>)
 8006020:	238c      	movs	r3, #140	@ 0x8c
 8006022:	005b      	lsls	r3, r3, #1
 8006024:	58d4      	ldr	r4, [r2, r3]
 8006026:	4a57      	ldr	r2, [pc, #348]	@ (8006184 <SendData+0x170>)
 8006028:	238e      	movs	r3, #142	@ 0x8e
 800602a:	005b      	lsls	r3, r3, #1
 800602c:	58d5      	ldr	r5, [r2, r3]
 800602e:	4a55      	ldr	r2, [pc, #340]	@ (8006184 <SendData+0x170>)
 8006030:	2390      	movs	r3, #144	@ 0x90
 8006032:	005b      	lsls	r3, r3, #1
 8006034:	58d3      	ldr	r3, [r2, r3]
 8006036:	4698      	mov	r8, r3
 8006038:	4a52      	ldr	r2, [pc, #328]	@ (8006184 <SendData+0x170>)
 800603a:	7c52      	ldrb	r2, [r2, #17]
 800603c:	0016      	movs	r6, r2
 800603e:	4951      	ldr	r1, [pc, #324]	@ (8006184 <SendData+0x170>)
 8006040:	2292      	movs	r2, #146	@ 0x92
 8006042:	0052      	lsls	r2, r2, #1
 8006044:	588a      	ldr	r2, [r1, r2]
 8006046:	494f      	ldr	r1, [pc, #316]	@ (8006184 <SendData+0x170>)
 8006048:	7c09      	ldrb	r1, [r1, #16]
 800604a:	468c      	mov	ip, r1
 800604c:	494e      	ldr	r1, [pc, #312]	@ (8006188 <SendData+0x174>)
 800604e:	484f      	ldr	r0, [pc, #316]	@ (800618c <SendData+0x178>)
 8006050:	4663      	mov	r3, ip
 8006052:	9304      	str	r3, [sp, #16]
 8006054:	9203      	str	r2, [sp, #12]
 8006056:	9602      	str	r6, [sp, #8]
 8006058:	4a4d      	ldr	r2, [pc, #308]	@ (8006190 <SendData+0x17c>)
 800605a:	9201      	str	r2, [sp, #4]
 800605c:	4643      	mov	r3, r8
 800605e:	9300      	str	r3, [sp, #0]
 8006060:	002b      	movs	r3, r5
 8006062:	0022      	movs	r2, r4
 8006064:	f008 fd3e 	bl	800eae4 <siprintf>
	HAL_UART_Transmit(&huart2, sendBuffer, strlen(sendBuffer), 200);
 8006068:	4b48      	ldr	r3, [pc, #288]	@ (800618c <SendData+0x178>)
 800606a:	0018      	movs	r0, r3
 800606c:	f7fa f854 	bl	8000118 <strlen>
 8006070:	0003      	movs	r3, r0
 8006072:	b29a      	uxth	r2, r3
 8006074:	4945      	ldr	r1, [pc, #276]	@ (800618c <SendData+0x178>)
 8006076:	4847      	ldr	r0, [pc, #284]	@ (8006194 <SendData+0x180>)
 8006078:	23c8      	movs	r3, #200	@ 0xc8
 800607a:	f006 fcd7 	bl	800ca2c <HAL_UART_Transmit>
	for(posIndex=0; posIndex<game.numLocations; posIndex++)
 800607e:	2300      	movs	r3, #0
 8006080:	607b      	str	r3, [r7, #4]
 8006082:	e072      	b.n	800616a <SendData+0x156>
	{       HAL_Delay(5);
 8006084:	2005      	movs	r0, #5
 8006086:	f002 fafb 	bl	8008680 <HAL_Delay>
		for(clrIndex=0;clrIndex<400;clrIndex++) sendBuffer[clrIndex]=0;
 800608a:	2300      	movs	r3, #0
 800608c:	603b      	str	r3, [r7, #0]
 800608e:	e007      	b.n	80060a0 <SendData+0x8c>
 8006090:	4a3e      	ldr	r2, [pc, #248]	@ (800618c <SendData+0x178>)
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	18d3      	adds	r3, r2, r3
 8006096:	2200      	movs	r2, #0
 8006098:	701a      	strb	r2, [r3, #0]
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	3301      	adds	r3, #1
 800609e:	603b      	str	r3, [r7, #0]
 80060a0:	683a      	ldr	r2, [r7, #0]
 80060a2:	23c8      	movs	r3, #200	@ 0xc8
 80060a4:	005b      	lsls	r3, r3, #1
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d3f2      	bcc.n	8006090 <SendData+0x7c>
		sprintf(sendBuffer, "(lat:%d.%d),(lon:%d.%d),", ((int)game.positions[posIndex].lat), abs((int)((fmod((double)game.positions[posIndex].lat, (double)1))*10000)),((int)game.positions[posIndex].lon), abs((int)((fmod((double)game.positions[posIndex].lon, (double)1))*10000)));
 80060aa:	4b36      	ldr	r3, [pc, #216]	@ (8006184 <SendData+0x170>)
 80060ac:	687a      	ldr	r2, [r7, #4]
 80060ae:	3203      	adds	r2, #3
 80060b0:	00d2      	lsls	r2, r2, #3
 80060b2:	58d3      	ldr	r3, [r2, r3]
 80060b4:	1c18      	adds	r0, r3, #0
 80060b6:	f7fb fb57 	bl	8001768 <__aeabi_f2iz>
 80060ba:	0006      	movs	r6, r0
 80060bc:	4b31      	ldr	r3, [pc, #196]	@ (8006184 <SendData+0x170>)
 80060be:	687a      	ldr	r2, [r7, #4]
 80060c0:	3203      	adds	r2, #3
 80060c2:	00d2      	lsls	r2, r2, #3
 80060c4:	58d3      	ldr	r3, [r2, r3]
 80060c6:	1c18      	adds	r0, r3, #0
 80060c8:	f7fd fba4 	bl	8003814 <__aeabi_f2d>
 80060cc:	2200      	movs	r2, #0
 80060ce:	4b32      	ldr	r3, [pc, #200]	@ (8006198 <SendData+0x184>)
 80060d0:	f00a fe70 	bl	8010db4 <fmod>
 80060d4:	2200      	movs	r2, #0
 80060d6:	4b31      	ldr	r3, [pc, #196]	@ (800619c <SendData+0x188>)
 80060d8:	f7fc fbfc 	bl	80028d4 <__aeabi_dmul>
 80060dc:	0002      	movs	r2, r0
 80060de:	000b      	movs	r3, r1
 80060e0:	0010      	movs	r0, r2
 80060e2:	0019      	movs	r1, r3
 80060e4:	f7fd fb08 	bl	80036f8 <__aeabi_d2iz>
 80060e8:	0003      	movs	r3, r0
 80060ea:	17da      	asrs	r2, r3, #31
 80060ec:	189c      	adds	r4, r3, r2
 80060ee:	4054      	eors	r4, r2
 80060f0:	4a24      	ldr	r2, [pc, #144]	@ (8006184 <SendData+0x170>)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	3303      	adds	r3, #3
 80060f6:	00db      	lsls	r3, r3, #3
 80060f8:	18d3      	adds	r3, r2, r3
 80060fa:	3304      	adds	r3, #4
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	1c18      	adds	r0, r3, #0
 8006100:	f7fb fb32 	bl	8001768 <__aeabi_f2iz>
 8006104:	0005      	movs	r5, r0
 8006106:	4a1f      	ldr	r2, [pc, #124]	@ (8006184 <SendData+0x170>)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	3303      	adds	r3, #3
 800610c:	00db      	lsls	r3, r3, #3
 800610e:	18d3      	adds	r3, r2, r3
 8006110:	3304      	adds	r3, #4
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	1c18      	adds	r0, r3, #0
 8006116:	f7fd fb7d 	bl	8003814 <__aeabi_f2d>
 800611a:	2200      	movs	r2, #0
 800611c:	4b1e      	ldr	r3, [pc, #120]	@ (8006198 <SendData+0x184>)
 800611e:	f00a fe49 	bl	8010db4 <fmod>
 8006122:	2200      	movs	r2, #0
 8006124:	4b1d      	ldr	r3, [pc, #116]	@ (800619c <SendData+0x188>)
 8006126:	f7fc fbd5 	bl	80028d4 <__aeabi_dmul>
 800612a:	0002      	movs	r2, r0
 800612c:	000b      	movs	r3, r1
 800612e:	0010      	movs	r0, r2
 8006130:	0019      	movs	r1, r3
 8006132:	f7fd fae1 	bl	80036f8 <__aeabi_d2iz>
 8006136:	0003      	movs	r3, r0
 8006138:	17da      	asrs	r2, r3, #31
 800613a:	189b      	adds	r3, r3, r2
 800613c:	4053      	eors	r3, r2
 800613e:	4918      	ldr	r1, [pc, #96]	@ (80061a0 <SendData+0x18c>)
 8006140:	4812      	ldr	r0, [pc, #72]	@ (800618c <SendData+0x178>)
 8006142:	9301      	str	r3, [sp, #4]
 8006144:	9500      	str	r5, [sp, #0]
 8006146:	0023      	movs	r3, r4
 8006148:	0032      	movs	r2, r6
 800614a:	f008 fccb 	bl	800eae4 <siprintf>
		HAL_UART_Transmit(&huart2, sendBuffer, strlen(sendBuffer), 200);
 800614e:	4b0f      	ldr	r3, [pc, #60]	@ (800618c <SendData+0x178>)
 8006150:	0018      	movs	r0, r3
 8006152:	f7f9 ffe1 	bl	8000118 <strlen>
 8006156:	0003      	movs	r3, r0
 8006158:	b29a      	uxth	r2, r3
 800615a:	490c      	ldr	r1, [pc, #48]	@ (800618c <SendData+0x178>)
 800615c:	480d      	ldr	r0, [pc, #52]	@ (8006194 <SendData+0x180>)
 800615e:	23c8      	movs	r3, #200	@ 0xc8
 8006160:	f006 fc64 	bl	800ca2c <HAL_UART_Transmit>
	for(posIndex=0; posIndex<game.numLocations; posIndex++)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	3301      	adds	r3, #1
 8006168:	607b      	str	r3, [r7, #4]
 800616a:	4b06      	ldr	r3, [pc, #24]	@ (8006184 <SendData+0x170>)
 800616c:	695b      	ldr	r3, [r3, #20]
 800616e:	687a      	ldr	r2, [r7, #4]
 8006170:	429a      	cmp	r2, r3
 8006172:	d387      	bcc.n	8006084 <SendData+0x70>

	}
}
 8006174:	46c0      	nop			@ (mov r8, r8)
 8006176:	46c0      	nop			@ (mov r8, r8)
 8006178:	46bd      	mov	sp, r7
 800617a:	b002      	add	sp, #8
 800617c:	bc80      	pop	{r7}
 800617e:	46b8      	mov	r8, r7
 8006180:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006182:	46c0      	nop			@ (mov r8, r8)
 8006184:	20000f38 	.word	0x20000f38
 8006188:	08011344 	.word	0x08011344
 800618c:	20001160 	.word	0x20001160
 8006190:	20001064 	.word	0x20001064
 8006194:	20002118 	.word	0x20002118
 8006198:	3ff00000 	.word	0x3ff00000
 800619c:	40c38800 	.word	0x40c38800
 80061a0:	080113c4 	.word	0x080113c4

080061a4 <ReceiveData>:
void ReceiveData()
{
 80061a4:	b5b0      	push	{r4, r5, r7, lr}
 80061a6:	4cda      	ldr	r4, [pc, #872]	@ (8006510 <ReceiveData+0x36c>)
 80061a8:	44a5      	add	sp, r4
 80061aa:	af00      	add	r7, sp, #0
int rI=0;
 80061ac:	2300      	movs	r3, #0
 80061ae:	4ad9      	ldr	r2, [pc, #868]	@ (8006514 <ReceiveData+0x370>)
 80061b0:	18ba      	adds	r2, r7, r2
 80061b2:	6013      	str	r3, [r2, #0]
while(HAL_UART_Receive(&huart2, &(syncBuffer[rI]), 1, 1000)==HAL_OK)
 80061b4:	e197      	b.n	80064e6 <ReceiveData+0x342>
{
	if(syncBuffer[rI]&&syncBuffer[rI]=='\r')
 80061b6:	4ad8      	ldr	r2, [pc, #864]	@ (8006518 <ReceiveData+0x374>)
 80061b8:	49d6      	ldr	r1, [pc, #856]	@ (8006514 <ReceiveData+0x370>)
 80061ba:	187b      	adds	r3, r7, r1
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	18d3      	adds	r3, r2, r3
 80061c0:	781b      	ldrb	r3, [r3, #0]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d100      	bne.n	80061c8 <ReceiveData+0x24>
 80061c6:	e188      	b.n	80064da <ReceiveData+0x336>
 80061c8:	4ad3      	ldr	r2, [pc, #844]	@ (8006518 <ReceiveData+0x374>)
 80061ca:	187b      	adds	r3, r7, r1
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	18d3      	adds	r3, r2, r3
 80061d0:	781b      	ldrb	r3, [r3, #0]
 80061d2:	2b0d      	cmp	r3, #13
 80061d4:	d000      	beq.n	80061d8 <ReceiveData+0x34>
 80061d6:	e180      	b.n	80064da <ReceiveData+0x336>
	{
	 enum { MAX_FIELDS = 255 };
	 json_t pool[ MAX_FIELDS ];
	 json_t const* parent = json_create(syncBuffer, pool, MAX_FIELDS);
 80061d8:	0039      	movs	r1, r7
 80061da:	4bcf      	ldr	r3, [pc, #828]	@ (8006518 <ReceiveData+0x374>)
 80061dc:	22ff      	movs	r2, #255	@ 0xff
 80061de:	0018      	movs	r0, r3
 80061e0:	f001 fcee 	bl	8007bc0 <json_create>
 80061e4:	0003      	movs	r3, r0
 80061e6:	49cd      	ldr	r1, [pc, #820]	@ (800651c <ReceiveData+0x378>)
 80061e8:	187a      	adds	r2, r7, r1
 80061ea:	6013      	str	r3, [r2, #0]
	 if(parent)
 80061ec:	187b      	adds	r3, r7, r1
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d100      	bne.n	80061f6 <ReceiveData+0x52>
 80061f4:	e152      	b.n	800649c <ReceiveData+0x2f8>
	 {
		 int locI=0;
 80061f6:	2300      	movs	r3, #0
 80061f8:	4ac9      	ldr	r2, [pc, #804]	@ (8006520 <ReceiveData+0x37c>)
 80061fa:	18ba      	adds	r2, r7, r2
 80061fc:	6013      	str	r3, [r2, #0]
		 struct latLon tempLoc;
		 char const* uidRxStr = json_getPropertyValue(parent, "uid");
 80061fe:	4ac9      	ldr	r2, [pc, #804]	@ (8006524 <ReceiveData+0x380>)
 8006200:	187b      	adds	r3, r7, r1
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	0011      	movs	r1, r2
 8006206:	0018      	movs	r0, r3
 8006208:	f001 fc76 	bl	8007af8 <json_getPropertyValue>
 800620c:	0003      	movs	r3, r0
 800620e:	4ac6      	ldr	r2, [pc, #792]	@ (8006528 <ReceiveData+0x384>)
 8006210:	18ba      	adds	r2, r7, r2
 8006212:	6013      	str	r3, [r2, #0]
		 //HAL_UART_Transmit(&huart2, json_getPropertyValue(parent, "uid"), strlen(json_getPropertyValue(parent, "uid")), 1000);
		 for(int strI =0; strI<strlen(uidRxStr); strI++) game.uid[strI]=uidRxStr[strI];
 8006214:	2300      	movs	r3, #0
 8006216:	4ac5      	ldr	r2, [pc, #788]	@ (800652c <ReceiveData+0x388>)
 8006218:	18ba      	adds	r2, r7, r2
 800621a:	6013      	str	r3, [r2, #0]
 800621c:	e015      	b.n	800624a <ReceiveData+0xa6>
 800621e:	4cc3      	ldr	r4, [pc, #780]	@ (800652c <ReceiveData+0x388>)
 8006220:	193b      	adds	r3, r7, r4
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4ac0      	ldr	r2, [pc, #768]	@ (8006528 <ReceiveData+0x384>)
 8006226:	18ba      	adds	r2, r7, r2
 8006228:	6812      	ldr	r2, [r2, #0]
 800622a:	18d3      	adds	r3, r2, r3
 800622c:	7818      	ldrb	r0, [r3, #0]
 800622e:	49c0      	ldr	r1, [pc, #768]	@ (8006530 <ReceiveData+0x38c>)
 8006230:	2396      	movs	r3, #150	@ 0x96
 8006232:	005b      	lsls	r3, r3, #1
 8006234:	193a      	adds	r2, r7, r4
 8006236:	6812      	ldr	r2, [r2, #0]
 8006238:	188a      	adds	r2, r1, r2
 800623a:	18d3      	adds	r3, r2, r3
 800623c:	1c02      	adds	r2, r0, #0
 800623e:	701a      	strb	r2, [r3, #0]
 8006240:	193b      	adds	r3, r7, r4
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	3301      	adds	r3, #1
 8006246:	193a      	adds	r2, r7, r4
 8006248:	6013      	str	r3, [r2, #0]
 800624a:	4bb7      	ldr	r3, [pc, #732]	@ (8006528 <ReceiveData+0x384>)
 800624c:	18fb      	adds	r3, r7, r3
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	0018      	movs	r0, r3
 8006252:	f7f9 ff61 	bl	8000118 <strlen>
 8006256:	0002      	movs	r2, r0
 8006258:	4bb4      	ldr	r3, [pc, #720]	@ (800652c <ReceiveData+0x388>)
 800625a:	18fb      	adds	r3, r7, r3
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	429a      	cmp	r2, r3
 8006260:	d8dd      	bhi.n	800621e <ReceiveData+0x7a>
		 game.allSteps = (unsigned int)json_getInteger(json_getProperty(parent, "lifeSteps"));
 8006262:	4ab4      	ldr	r2, [pc, #720]	@ (8006534 <ReceiveData+0x390>)
 8006264:	4cad      	ldr	r4, [pc, #692]	@ (800651c <ReceiveData+0x378>)
 8006266:	193b      	adds	r3, r7, r4
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	0011      	movs	r1, r2
 800626c:	0018      	movs	r0, r3
 800626e:	f001 fc20 	bl	8007ab2 <json_getProperty>
 8006272:	0003      	movs	r3, r0
 8006274:	0018      	movs	r0, r3
 8006276:	f7fe fbcb 	bl	8004a10 <json_getInteger>
 800627a:	0002      	movs	r2, r0
 800627c:	000b      	movs	r3, r1
 800627e:	0011      	movs	r1, r2
 8006280:	4aab      	ldr	r2, [pc, #684]	@ (8006530 <ReceiveData+0x38c>)
 8006282:	238c      	movs	r3, #140	@ 0x8c
 8006284:	005b      	lsls	r3, r3, #1
 8006286:	50d1      	str	r1, [r2, r3]
		 game.dailyGoal = (unsigned int)json_getInteger(json_getProperty(parent, "difficulty"));
 8006288:	4aab      	ldr	r2, [pc, #684]	@ (8006538 <ReceiveData+0x394>)
 800628a:	193b      	adds	r3, r7, r4
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	0011      	movs	r1, r2
 8006290:	0018      	movs	r0, r3
 8006292:	f001 fc0e 	bl	8007ab2 <json_getProperty>
 8006296:	0003      	movs	r3, r0
 8006298:	0018      	movs	r0, r3
 800629a:	f7fe fbb9 	bl	8004a10 <json_getInteger>
 800629e:	0002      	movs	r2, r0
 80062a0:	000b      	movs	r3, r1
 80062a2:	0011      	movs	r1, r2
 80062a4:	4aa2      	ldr	r2, [pc, #648]	@ (8006530 <ReceiveData+0x38c>)
 80062a6:	2392      	movs	r3, #146	@ 0x92
 80062a8:	005b      	lsls	r3, r3, #1
 80062aa:	50d1      	str	r1, [r2, r3]
		 game.evo = (unsigned int)json_getInteger(json_getProperty(parent, "evolution"));
 80062ac:	4aa3      	ldr	r2, [pc, #652]	@ (800653c <ReceiveData+0x398>)
 80062ae:	193b      	adds	r3, r7, r4
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	0011      	movs	r1, r2
 80062b4:	0018      	movs	r0, r3
 80062b6:	f001 fbfc 	bl	8007ab2 <json_getProperty>
 80062ba:	0003      	movs	r3, r0
 80062bc:	0018      	movs	r0, r3
 80062be:	f7fe fba7 	bl	8004a10 <json_getInteger>
 80062c2:	0002      	movs	r2, r0
 80062c4:	000b      	movs	r3, r1
 80062c6:	b2d2      	uxtb	r2, r2
 80062c8:	4b99      	ldr	r3, [pc, #612]	@ (8006530 <ReceiveData+0x38c>)
 80062ca:	741a      	strb	r2, [r3, #16]
		 game.mood = (unsigned int)json_getInteger(json_getProperty(parent, "friendship"));
 80062cc:	4a9c      	ldr	r2, [pc, #624]	@ (8006540 <ReceiveData+0x39c>)
 80062ce:	193b      	adds	r3, r7, r4
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	0011      	movs	r1, r2
 80062d4:	0018      	movs	r0, r3
 80062d6:	f001 fbec 	bl	8007ab2 <json_getProperty>
 80062da:	0003      	movs	r3, r0
 80062dc:	0018      	movs	r0, r3
 80062de:	f7fe fb97 	bl	8004a10 <json_getInteger>
 80062e2:	0002      	movs	r2, r0
 80062e4:	000b      	movs	r3, r1
 80062e6:	b2d2      	uxtb	r2, r2
 80062e8:	4b91      	ldr	r3, [pc, #580]	@ (8006530 <ReceiveData+0x38c>)
 80062ea:	745a      	strb	r2, [r3, #17]
		 game.stepsToday = (unsigned int)json_getInteger(json_getProperty(parent, "dailySteps"));
 80062ec:	4a95      	ldr	r2, [pc, #596]	@ (8006544 <ReceiveData+0x3a0>)
 80062ee:	193b      	adds	r3, r7, r4
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	0011      	movs	r1, r2
 80062f4:	0018      	movs	r0, r3
 80062f6:	f001 fbdc 	bl	8007ab2 <json_getProperty>
 80062fa:	0003      	movs	r3, r0
 80062fc:	0018      	movs	r0, r3
 80062fe:	f7fe fb87 	bl	8004a10 <json_getInteger>
 8006302:	0002      	movs	r2, r0
 8006304:	000b      	movs	r3, r1
 8006306:	0011      	movs	r1, r2
 8006308:	4a89      	ldr	r2, [pc, #548]	@ (8006530 <ReceiveData+0x38c>)
 800630a:	2390      	movs	r3, #144	@ 0x90
 800630c:	005b      	lsls	r3, r3, #1
 800630e:	50d1      	str	r1, [r2, r3]
		 game.weeklySteps = (unsigned int) json_getInteger(json_getProperty(parent, "weeklySteps"));
 8006310:	4a8d      	ldr	r2, [pc, #564]	@ (8006548 <ReceiveData+0x3a4>)
 8006312:	193b      	adds	r3, r7, r4
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	0011      	movs	r1, r2
 8006318:	0018      	movs	r0, r3
 800631a:	f001 fbca 	bl	8007ab2 <json_getProperty>
 800631e:	0003      	movs	r3, r0
 8006320:	0018      	movs	r0, r3
 8006322:	f7fe fb75 	bl	8004a10 <json_getInteger>
 8006326:	0002      	movs	r2, r0
 8006328:	000b      	movs	r3, r1
 800632a:	0011      	movs	r1, r2
 800632c:	4a80      	ldr	r2, [pc, #512]	@ (8006530 <ReceiveData+0x38c>)
 800632e:	238e      	movs	r3, #142	@ 0x8e
 8006330:	005b      	lsls	r3, r3, #1
 8006332:	50d1      	str	r1, [r2, r3]
		 json_t const* location;
		 json_t const* locations = json_getProperty(parent, "locations");
 8006334:	4a85      	ldr	r2, [pc, #532]	@ (800654c <ReceiveData+0x3a8>)
 8006336:	193b      	adds	r3, r7, r4
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	0011      	movs	r1, r2
 800633c:	0018      	movs	r0, r3
 800633e:	f001 fbb8 	bl	8007ab2 <json_getProperty>
 8006342:	0003      	movs	r3, r0
 8006344:	4a82      	ldr	r2, [pc, #520]	@ (8006550 <ReceiveData+0x3ac>)
 8006346:	18b9      	adds	r1, r7, r2
 8006348:	600b      	str	r3, [r1, #0]
		 for(location = json_getChild(locations); location; location=json_getSibling(location))
 800634a:	18bb      	adds	r3, r7, r2
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	0018      	movs	r0, r3
 8006350:	f7fe fb54 	bl	80049fc <json_getChild>
 8006354:	0003      	movs	r3, r0
 8006356:	22a0      	movs	r2, #160	@ 0xa0
 8006358:	0152      	lsls	r2, r2, #5
 800635a:	18ba      	adds	r2, r7, r2
 800635c:	6013      	str	r3, [r2, #0]
 800635e:	e07a      	b.n	8006456 <ReceiveData+0x2b2>
		{
			 tempLoc.lat = (float)json_getReal(json_getProperty(location, "lat"));
 8006360:	4a7c      	ldr	r2, [pc, #496]	@ (8006554 <ReceiveData+0x3b0>)
 8006362:	25a0      	movs	r5, #160	@ 0xa0
 8006364:	016d      	lsls	r5, r5, #5
 8006366:	197b      	adds	r3, r7, r5
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	0011      	movs	r1, r2
 800636c:	0018      	movs	r0, r3
 800636e:	f001 fba0 	bl	8007ab2 <json_getProperty>
 8006372:	0003      	movs	r3, r0
 8006374:	0018      	movs	r0, r3
 8006376:	f7fe fb5d 	bl	8004a34 <json_getReal>
 800637a:	0002      	movs	r2, r0
 800637c:	000b      	movs	r3, r1
 800637e:	0010      	movs	r0, r2
 8006380:	0019      	movs	r1, r3
 8006382:	f7fd fa8f 	bl	80038a4 <__aeabi_d2f>
 8006386:	1c02      	adds	r2, r0, #0
 8006388:	4c73      	ldr	r4, [pc, #460]	@ (8006558 <ReceiveData+0x3b4>)
 800638a:	193b      	adds	r3, r7, r4
 800638c:	601a      	str	r2, [r3, #0]
			 tempLoc.lon = (float)json_getReal(json_getProperty(location, "lng"));
 800638e:	4a73      	ldr	r2, [pc, #460]	@ (800655c <ReceiveData+0x3b8>)
 8006390:	197b      	adds	r3, r7, r5
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	0011      	movs	r1, r2
 8006396:	0018      	movs	r0, r3
 8006398:	f001 fb8b 	bl	8007ab2 <json_getProperty>
 800639c:	0003      	movs	r3, r0
 800639e:	0018      	movs	r0, r3
 80063a0:	f7fe fb48 	bl	8004a34 <json_getReal>
 80063a4:	0002      	movs	r2, r0
 80063a6:	000b      	movs	r3, r1
 80063a8:	0010      	movs	r0, r2
 80063aa:	0019      	movs	r1, r3
 80063ac:	f7fd fa7a 	bl	80038a4 <__aeabi_d2f>
 80063b0:	1c02      	adds	r2, r0, #0
 80063b2:	193b      	adds	r3, r7, r4
 80063b4:	605a      	str	r2, [r3, #4]
			 if(fabs(tempLoc.lat)<.00001)
 80063b6:	193b      	adds	r3, r7, r4
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	005b      	lsls	r3, r3, #1
 80063bc:	085b      	lsrs	r3, r3, #1
 80063be:	1c18      	adds	r0, r3, #0
 80063c0:	f7fd fa28 	bl	8003814 <__aeabi_f2d>
 80063c4:	4a66      	ldr	r2, [pc, #408]	@ (8006560 <ReceiveData+0x3bc>)
 80063c6:	4b67      	ldr	r3, [pc, #412]	@ (8006564 <ReceiveData+0x3c0>)
 80063c8:	f7fa f84e 	bl	8000468 <__aeabi_dcmplt>
 80063cc:	1e03      	subs	r3, r0, #0
 80063ce:	d027      	beq.n	8006420 <ReceiveData+0x27c>
			 {

				 tempLoc.lat = (float)json_getReal(json_getProperty(location, "Lat"));
 80063d0:	4a65      	ldr	r2, [pc, #404]	@ (8006568 <ReceiveData+0x3c4>)
 80063d2:	197b      	adds	r3, r7, r5
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	0011      	movs	r1, r2
 80063d8:	0018      	movs	r0, r3
 80063da:	f001 fb6a 	bl	8007ab2 <json_getProperty>
 80063de:	0003      	movs	r3, r0
 80063e0:	0018      	movs	r0, r3
 80063e2:	f7fe fb27 	bl	8004a34 <json_getReal>
 80063e6:	0002      	movs	r2, r0
 80063e8:	000b      	movs	r3, r1
 80063ea:	0010      	movs	r0, r2
 80063ec:	0019      	movs	r1, r3
 80063ee:	f7fd fa59 	bl	80038a4 <__aeabi_d2f>
 80063f2:	1c02      	adds	r2, r0, #0
 80063f4:	193b      	adds	r3, r7, r4
 80063f6:	601a      	str	r2, [r3, #0]
				 			 tempLoc.lon = (float)json_getReal(json_getProperty(location, "Lng"));
 80063f8:	4a5c      	ldr	r2, [pc, #368]	@ (800656c <ReceiveData+0x3c8>)
 80063fa:	197b      	adds	r3, r7, r5
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	0011      	movs	r1, r2
 8006400:	0018      	movs	r0, r3
 8006402:	f001 fb56 	bl	8007ab2 <json_getProperty>
 8006406:	0003      	movs	r3, r0
 8006408:	0018      	movs	r0, r3
 800640a:	f7fe fb13 	bl	8004a34 <json_getReal>
 800640e:	0002      	movs	r2, r0
 8006410:	000b      	movs	r3, r1
 8006412:	0010      	movs	r0, r2
 8006414:	0019      	movs	r1, r3
 8006416:	f7fd fa45 	bl	80038a4 <__aeabi_d2f>
 800641a:	1c02      	adds	r2, r0, #0
 800641c:	193b      	adds	r3, r7, r4
 800641e:	605a      	str	r2, [r3, #4]
			 }
			 game.positions[locI] = tempLoc;
 8006420:	4a43      	ldr	r2, [pc, #268]	@ (8006530 <ReceiveData+0x38c>)
 8006422:	4c3f      	ldr	r4, [pc, #252]	@ (8006520 <ReceiveData+0x37c>)
 8006424:	193b      	adds	r3, r7, r4
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	3303      	adds	r3, #3
 800642a:	00db      	lsls	r3, r3, #3
 800642c:	494a      	ldr	r1, [pc, #296]	@ (8006558 <ReceiveData+0x3b4>)
 800642e:	1879      	adds	r1, r7, r1
 8006430:	18d3      	adds	r3, r2, r3
 8006432:	000a      	movs	r2, r1
 8006434:	ca03      	ldmia	r2!, {r0, r1}
 8006436:	c303      	stmia	r3!, {r0, r1}
			 locI++;
 8006438:	193b      	adds	r3, r7, r4
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	3301      	adds	r3, #1
 800643e:	193a      	adds	r2, r7, r4
 8006440:	6013      	str	r3, [r2, #0]
		 for(location = json_getChild(locations); location; location=json_getSibling(location))
 8006442:	24a0      	movs	r4, #160	@ 0xa0
 8006444:	0164      	lsls	r4, r4, #5
 8006446:	193b      	adds	r3, r7, r4
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	0018      	movs	r0, r3
 800644c:	f7fe facc 	bl	80049e8 <json_getSibling>
 8006450:	0003      	movs	r3, r0
 8006452:	193a      	adds	r2, r7, r4
 8006454:	6013      	str	r3, [r2, #0]
 8006456:	23a0      	movs	r3, #160	@ 0xa0
 8006458:	015b      	lsls	r3, r3, #5
 800645a:	18fb      	adds	r3, r7, r3
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d000      	beq.n	8006464 <ReceiveData+0x2c0>
 8006462:	e77d      	b.n	8006360 <ReceiveData+0x1bc>
		}
		game.numLocations = locI;
 8006464:	4b2e      	ldr	r3, [pc, #184]	@ (8006520 <ReceiveData+0x37c>)
 8006466:	18fb      	adds	r3, r7, r3
 8006468:	681a      	ldr	r2, [r3, #0]
 800646a:	4b31      	ldr	r3, [pc, #196]	@ (8006530 <ReceiveData+0x38c>)
 800646c:	615a      	str	r2, [r3, #20]
		for(locI=locI; locI<32; locI++)
 800646e:	e010      	b.n	8006492 <ReceiveData+0x2ee>
		{
			memset(&game.positions[locI], 0, sizeof(game.positions[locI]));
 8006470:	4c2b      	ldr	r4, [pc, #172]	@ (8006520 <ReceiveData+0x37c>)
 8006472:	193b      	adds	r3, r7, r4
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	3303      	adds	r3, #3
 8006478:	00da      	lsls	r2, r3, #3
 800647a:	4b2d      	ldr	r3, [pc, #180]	@ (8006530 <ReceiveData+0x38c>)
 800647c:	18d3      	adds	r3, r2, r3
 800647e:	2208      	movs	r2, #8
 8006480:	2100      	movs	r1, #0
 8006482:	0018      	movs	r0, r3
 8006484:	f008 fb9c 	bl	800ebc0 <memset>
		for(locI=locI; locI<32; locI++)
 8006488:	193b      	adds	r3, r7, r4
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	3301      	adds	r3, #1
 800648e:	193a      	adds	r2, r7, r4
 8006490:	6013      	str	r3, [r2, #0]
 8006492:	4b23      	ldr	r3, [pc, #140]	@ (8006520 <ReceiveData+0x37c>)
 8006494:	18fb      	adds	r3, r7, r3
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	2b1f      	cmp	r3, #31
 800649a:	dde9      	ble.n	8006470 <ReceiveData+0x2cc>
		}
		 //SendData();
	 }
     for(ii=0;ii<=rI;ii++) syncBuffer[ii]=0;
 800649c:	4b34      	ldr	r3, [pc, #208]	@ (8006570 <ReceiveData+0x3cc>)
 800649e:	2200      	movs	r2, #0
 80064a0:	801a      	strh	r2, [r3, #0]
 80064a2:	e00d      	b.n	80064c0 <ReceiveData+0x31c>
 80064a4:	4b32      	ldr	r3, [pc, #200]	@ (8006570 <ReceiveData+0x3cc>)
 80064a6:	881b      	ldrh	r3, [r3, #0]
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	001a      	movs	r2, r3
 80064ac:	4b1a      	ldr	r3, [pc, #104]	@ (8006518 <ReceiveData+0x374>)
 80064ae:	2100      	movs	r1, #0
 80064b0:	5499      	strb	r1, [r3, r2]
 80064b2:	4b2f      	ldr	r3, [pc, #188]	@ (8006570 <ReceiveData+0x3cc>)
 80064b4:	881b      	ldrh	r3, [r3, #0]
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	3301      	adds	r3, #1
 80064ba:	b29a      	uxth	r2, r3
 80064bc:	4b2c      	ldr	r3, [pc, #176]	@ (8006570 <ReceiveData+0x3cc>)
 80064be:	801a      	strh	r2, [r3, #0]
 80064c0:	4b2b      	ldr	r3, [pc, #172]	@ (8006570 <ReceiveData+0x3cc>)
 80064c2:	881b      	ldrh	r3, [r3, #0]
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	001a      	movs	r2, r3
 80064c8:	4912      	ldr	r1, [pc, #72]	@ (8006514 <ReceiveData+0x370>)
 80064ca:	187b      	adds	r3, r7, r1
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4293      	cmp	r3, r2
 80064d0:	dae8      	bge.n	80064a4 <ReceiveData+0x300>
     rI=0;
 80064d2:	2300      	movs	r3, #0
 80064d4:	187a      	adds	r2, r7, r1
 80064d6:	6013      	str	r3, [r2, #0]
     break;
 80064d8:	e014      	b.n	8006504 <ReceiveData+0x360>
	}
	else
	{
		rI++;
 80064da:	4a0e      	ldr	r2, [pc, #56]	@ (8006514 <ReceiveData+0x370>)
 80064dc:	18bb      	adds	r3, r7, r2
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	3301      	adds	r3, #1
 80064e2:	18ba      	adds	r2, r7, r2
 80064e4:	6013      	str	r3, [r2, #0]
while(HAL_UART_Receive(&huart2, &(syncBuffer[rI]), 1, 1000)==HAL_OK)
 80064e6:	4b0b      	ldr	r3, [pc, #44]	@ (8006514 <ReceiveData+0x370>)
 80064e8:	18fb      	adds	r3, r7, r3
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	4b0a      	ldr	r3, [pc, #40]	@ (8006518 <ReceiveData+0x374>)
 80064ee:	18d1      	adds	r1, r2, r3
 80064f0:	23fa      	movs	r3, #250	@ 0xfa
 80064f2:	009b      	lsls	r3, r3, #2
 80064f4:	481f      	ldr	r0, [pc, #124]	@ (8006574 <ReceiveData+0x3d0>)
 80064f6:	2201      	movs	r2, #1
 80064f8:	f006 fb3c 	bl	800cb74 <HAL_UART_Receive>
 80064fc:	1e03      	subs	r3, r0, #0
 80064fe:	d100      	bne.n	8006502 <ReceiveData+0x35e>
 8006500:	e659      	b.n	80061b6 <ReceiveData+0x12>
	}
}

}
 8006502:	46c0      	nop			@ (mov r8, r8)
 8006504:	46c0      	nop			@ (mov r8, r8)
 8006506:	46bd      	mov	sp, r7
 8006508:	4b1b      	ldr	r3, [pc, #108]	@ (8006578 <ReceiveData+0x3d4>)
 800650a:	449d      	add	sp, r3
 800650c:	bdb0      	pop	{r4, r5, r7, pc}
 800650e:	46c0      	nop			@ (mov r8, r8)
 8006510:	ffffebf0 	.word	0xffffebf0
 8006514:	0000140c 	.word	0x0000140c
 8006518:	200012f0 	.word	0x200012f0
 800651c:	000013fc 	.word	0x000013fc
 8006520:	00001408 	.word	0x00001408
 8006524:	080113e0 	.word	0x080113e0
 8006528:	000013f8 	.word	0x000013f8
 800652c:	00001404 	.word	0x00001404
 8006530:	20000f38 	.word	0x20000f38
 8006534:	080113e4 	.word	0x080113e4
 8006538:	080113f0 	.word	0x080113f0
 800653c:	080113fc 	.word	0x080113fc
 8006540:	08011408 	.word	0x08011408
 8006544:	08011414 	.word	0x08011414
 8006548:	08011420 	.word	0x08011420
 800654c:	0801142c 	.word	0x0801142c
 8006550:	000013f4 	.word	0x000013f4
 8006554:	08011438 	.word	0x08011438
 8006558:	000013ec 	.word	0x000013ec
 800655c:	0801143c 	.word	0x0801143c
 8006560:	88e368f1 	.word	0x88e368f1
 8006564:	3ee4f8b5 	.word	0x3ee4f8b5
 8006568:	08011440 	.word	0x08011440
 800656c:	08011444 	.word	0x08011444
 8006570:	2000108c 	.word	0x2000108c
 8006574:	20002118 	.word	0x20002118
 8006578:	00001410 	.word	0x00001410

0800657c <CheckExp>:
int CheckExp(int threshold, int comparer)
{
 800657c:	b590      	push	{r4, r7, lr}
 800657e:	b085      	sub	sp, #20
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	6039      	str	r1, [r7, #0]
	int value = (int)((float)comparer*(1.0f+((float)game.numLocations)/expDivisor));
 8006586:	6838      	ldr	r0, [r7, #0]
 8006588:	f7fb f90e 	bl	80017a8 <__aeabi_i2f>
 800658c:	1c04      	adds	r4, r0, #0
 800658e:	4b1c      	ldr	r3, [pc, #112]	@ (8006600 <CheckExp+0x84>)
 8006590:	695b      	ldr	r3, [r3, #20]
 8006592:	0018      	movs	r0, r3
 8006594:	f7fb f958 	bl	8001848 <__aeabi_ui2f>
 8006598:	1c03      	adds	r3, r0, #0
 800659a:	2281      	movs	r2, #129	@ 0x81
 800659c:	05d2      	lsls	r2, r2, #23
 800659e:	1c11      	adds	r1, r2, #0
 80065a0:	1c18      	adds	r0, r3, #0
 80065a2:	f7fa fb55 	bl	8000c50 <__aeabi_fdiv>
 80065a6:	1c03      	adds	r3, r0, #0
 80065a8:	21fe      	movs	r1, #254	@ 0xfe
 80065aa:	0589      	lsls	r1, r1, #22
 80065ac:	1c18      	adds	r0, r3, #0
 80065ae:	f7fa f95d 	bl	800086c <__aeabi_fadd>
 80065b2:	1c03      	adds	r3, r0, #0
 80065b4:	1c19      	adds	r1, r3, #0
 80065b6:	1c20      	adds	r0, r4, #0
 80065b8:	f7fa fd18 	bl	8000fec <__aeabi_fmul>
 80065bc:	1c03      	adds	r3, r0, #0
 80065be:	1c18      	adds	r0, r3, #0
 80065c0:	f7fb f8d2 	bl	8001768 <__aeabi_f2iz>
 80065c4:	0003      	movs	r3, r0
 80065c6:	60fb      	str	r3, [r7, #12]
	if(value<(threshold/4)) return -1;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	da00      	bge.n	80065d0 <CheckExp+0x54>
 80065ce:	3303      	adds	r3, #3
 80065d0:	109b      	asrs	r3, r3, #2
 80065d2:	001a      	movs	r2, r3
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	4293      	cmp	r3, r2
 80065d8:	da02      	bge.n	80065e0 <CheckExp+0x64>
 80065da:	2301      	movs	r3, #1
 80065dc:	425b      	negs	r3, r3
 80065de:	e00b      	b.n	80065f8 <CheckExp+0x7c>
	if(value<threshold) return 0;
 80065e0:	68fa      	ldr	r2, [r7, #12]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	429a      	cmp	r2, r3
 80065e6:	da01      	bge.n	80065ec <CheckExp+0x70>
 80065e8:	2300      	movs	r3, #0
 80065ea:	e005      	b.n	80065f8 <CheckExp+0x7c>
	if(value>=threshold) return 1;
 80065ec:	68fa      	ldr	r2, [r7, #12]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	429a      	cmp	r2, r3
 80065f2:	db01      	blt.n	80065f8 <CheckExp+0x7c>
 80065f4:	2301      	movs	r3, #1
 80065f6:	e7ff      	b.n	80065f8 <CheckExp+0x7c>
}
 80065f8:	0018      	movs	r0, r3
 80065fa:	46bd      	mov	sp, r7
 80065fc:	b005      	add	sp, #20
 80065fe:	bd90      	pop	{r4, r7, pc}
 8006600:	20000f38 	.word	0x20000f38

08006604 <GetLatLon>:
void GetLatLon()
{
 8006604:	b5b0      	push	{r4, r5, r7, lr}
 8006606:	b08a      	sub	sp, #40	@ 0x28
 8006608:	af00      	add	r7, sp, #0
	int gpsI=0;
 800660a:	2300      	movs	r3, #0
 800660c:	627b      	str	r3, [r7, #36]	@ 0x24
	struct latLon pos;
	struct latLon tempPos;
	double checkW;
	double checkH;
	int posCheckI=0;
 800660e:	2300      	movs	r3, #0
 8006610:	623b      	str	r3, [r7, #32]
	//HAL_UART_Recieve();
	while(HAL_UART_Receive(&huart1, &(buffer[gpsI]), 1, 1000)==HAL_OK||1)
 8006612:	e121      	b.n	8006858 <GetLatLon+0x254>
			  		  	{
							if(buffer[gpsI]=='$')
							{
								for(ii=0;ii<=127;ii++) buffer[ii]=0;
 8006614:	4b9c      	ldr	r3, [pc, #624]	@ (8006888 <GetLatLon+0x284>)
 8006616:	2200      	movs	r2, #0
 8006618:	801a      	strh	r2, [r3, #0]
 800661a:	e00d      	b.n	8006638 <GetLatLon+0x34>
 800661c:	4b9a      	ldr	r3, [pc, #616]	@ (8006888 <GetLatLon+0x284>)
 800661e:	881b      	ldrh	r3, [r3, #0]
 8006620:	b29b      	uxth	r3, r3
 8006622:	001a      	movs	r2, r3
 8006624:	4b99      	ldr	r3, [pc, #612]	@ (800688c <GetLatLon+0x288>)
 8006626:	2100      	movs	r1, #0
 8006628:	5499      	strb	r1, [r3, r2]
 800662a:	4b97      	ldr	r3, [pc, #604]	@ (8006888 <GetLatLon+0x284>)
 800662c:	881b      	ldrh	r3, [r3, #0]
 800662e:	b29b      	uxth	r3, r3
 8006630:	3301      	adds	r3, #1
 8006632:	b29a      	uxth	r2, r3
 8006634:	4b94      	ldr	r3, [pc, #592]	@ (8006888 <GetLatLon+0x284>)
 8006636:	801a      	strh	r2, [r3, #0]
 8006638:	4b93      	ldr	r3, [pc, #588]	@ (8006888 <GetLatLon+0x284>)
 800663a:	881b      	ldrh	r3, [r3, #0]
 800663c:	b29b      	uxth	r3, r3
 800663e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006640:	d9ec      	bls.n	800661c <GetLatLon+0x18>
								buffer[0]='$';
 8006642:	4b92      	ldr	r3, [pc, #584]	@ (800688c <GetLatLon+0x288>)
 8006644:	2224      	movs	r2, #36	@ 0x24
 8006646:	701a      	strb	r2, [r3, #0]
								gpsI=0;
 8006648:	2300      	movs	r3, #0
 800664a:	627b      	str	r3, [r7, #36]	@ 0x24
							}//HAL_UART_Transmit(&huart2, buffer[i], 1, 1000);
			  			  if(buffer[gpsI]=='\n')
 800664c:	4a8f      	ldr	r2, [pc, #572]	@ (800688c <GetLatLon+0x288>)
 800664e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006650:	18d3      	adds	r3, r2, r3
 8006652:	781b      	ldrb	r3, [r3, #0]
 8006654:	2b0a      	cmp	r3, #10
 8006656:	d000      	beq.n	800665a <GetLatLon+0x56>
 8006658:	e0fb      	b.n	8006852 <GetLatLon+0x24e>
			  				    	  else return;
			  				      }

			  				      break;
			  				  }*/
			  				if(minmea_parse_gga(&ggaStruct, &(buffer))){
 800665a:	4a8c      	ldr	r2, [pc, #560]	@ (800688c <GetLatLon+0x288>)
 800665c:	4b8c      	ldr	r3, [pc, #560]	@ (8006890 <GetLatLon+0x28c>)
 800665e:	0011      	movs	r1, r2
 8006660:	0018      	movs	r0, r3
 8006662:	f000 fe31 	bl	80072c8 <minmea_parse_gga>
 8006666:	1e03      	subs	r3, r0, #0
 8006668:	d100      	bne.n	800666c <GetLatLon+0x68>
 800666a:	e0db      	b.n	8006824 <GetLatLon+0x220>
			  							  				      pos.lat = minmea_tocoord(&ggaStruct.latitude);
 800666c:	4b89      	ldr	r3, [pc, #548]	@ (8006894 <GetLatLon+0x290>)
 800666e:	0018      	movs	r0, r3
 8006670:	f7fe f976 	bl	8004960 <minmea_tocoord>
 8006674:	1c02      	adds	r2, r0, #0
 8006676:	2408      	movs	r4, #8
 8006678:	193b      	adds	r3, r7, r4
 800667a:	601a      	str	r2, [r3, #0]
			  							  				      pos.lon = minmea_tocoord(&ggaStruct.longitude);
 800667c:	4b86      	ldr	r3, [pc, #536]	@ (8006898 <GetLatLon+0x294>)
 800667e:	0018      	movs	r0, r3
 8006680:	f7fe f96e 	bl	8004960 <minmea_tocoord>
 8006684:	1c02      	adds	r2, r0, #0
 8006686:	193b      	adds	r3, r7, r4
 8006688:	605a      	str	r2, [r3, #4]
			  							  				      game.time = ggaStruct.time;
 800668a:	4b84      	ldr	r3, [pc, #528]	@ (800689c <GetLatLon+0x298>)
 800668c:	4a80      	ldr	r2, [pc, #512]	@ (8006890 <GetLatLon+0x28c>)
 800668e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006690:	c313      	stmia	r3!, {r0, r1, r4}
 8006692:	6812      	ldr	r2, [r2, #0]
 8006694:	601a      	str	r2, [r3, #0]
			  							  				      frameGot=1;
 8006696:	4b82      	ldr	r3, [pc, #520]	@ (80068a0 <GetLatLon+0x29c>)
 8006698:	2201      	movs	r2, #1
 800669a:	701a      	strb	r2, [r3, #0]
			  							  				  posCheckI=0;
 800669c:	2300      	movs	r3, #0
 800669e:	623b      	str	r3, [r7, #32]
			  							  				  for(posCheckI=0;posCheckI<game.numLocations;posCheckI++)
 80066a0:	2300      	movs	r3, #0
 80066a2:	623b      	str	r3, [r7, #32]
 80066a4:	e0a0      	b.n	80067e8 <GetLatLon+0x1e4>
			  							  				  			  				      {

			  							  				  			  				    	  tempPos = game.positions[posCheckI];
 80066a6:	003a      	movs	r2, r7
 80066a8:	497c      	ldr	r1, [pc, #496]	@ (800689c <GetLatLon+0x298>)
 80066aa:	6a3b      	ldr	r3, [r7, #32]
 80066ac:	3303      	adds	r3, #3
 80066ae:	00db      	lsls	r3, r3, #3
 80066b0:	18cb      	adds	r3, r1, r3
 80066b2:	cb03      	ldmia	r3!, {r0, r1}
 80066b4:	c203      	stmia	r2!, {r0, r1}
			  							  				  			  				    	  if((tempPos.lat>.000001f||tempPos.lat<-.000001f)&&(tempPos.lon>.000001f||tempPos.lon<-.000001f)&&(pos.lat>.000001f||pos.lat<-.000001f)&&(pos.lat>.000001f||pos.lat<-.000001f)){
 80066b6:	003b      	movs	r3, r7
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	497a      	ldr	r1, [pc, #488]	@ (80068a4 <GetLatLon+0x2a0>)
 80066bc:	1c18      	adds	r0, r3, #0
 80066be:	f7f9 ff21 	bl	8000504 <__aeabi_fcmpgt>
 80066c2:	1e03      	subs	r3, r0, #0
 80066c4:	d108      	bne.n	80066d8 <GetLatLon+0xd4>
 80066c6:	003b      	movs	r3, r7
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4977      	ldr	r1, [pc, #476]	@ (80068a8 <GetLatLon+0x2a4>)
 80066cc:	1c18      	adds	r0, r3, #0
 80066ce:	f7f9 ff05 	bl	80004dc <__aeabi_fcmplt>
 80066d2:	1e03      	subs	r3, r0, #0
 80066d4:	d100      	bne.n	80066d8 <GetLatLon+0xd4>
			  							  				  			  				    	  checkW = fabs(tempPos.lat-pos.lat);
			  							  				  			  				    	  checkH = fabs(tempPos.lon-pos.lon);
			  							  				  			  				    	  if(sqrt((checkW*checkW)+(checkH*checkH))<gpsThreshold) return;

			  							  				  			  				    	  }
			  							  				  			  				    	  else return;
 80066d6:	e0d3      	b.n	8006880 <GetLatLon+0x27c>
			  							  				  			  				    	  if((tempPos.lat>.000001f||tempPos.lat<-.000001f)&&(tempPos.lon>.000001f||tempPos.lon<-.000001f)&&(pos.lat>.000001f||pos.lat<-.000001f)&&(pos.lat>.000001f||pos.lat<-.000001f)){
 80066d8:	003b      	movs	r3, r7
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	4971      	ldr	r1, [pc, #452]	@ (80068a4 <GetLatLon+0x2a0>)
 80066de:	1c18      	adds	r0, r3, #0
 80066e0:	f7f9 ff10 	bl	8000504 <__aeabi_fcmpgt>
 80066e4:	1e03      	subs	r3, r0, #0
 80066e6:	d108      	bne.n	80066fa <GetLatLon+0xf6>
 80066e8:	003b      	movs	r3, r7
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	496e      	ldr	r1, [pc, #440]	@ (80068a8 <GetLatLon+0x2a4>)
 80066ee:	1c18      	adds	r0, r3, #0
 80066f0:	f7f9 fef4 	bl	80004dc <__aeabi_fcmplt>
 80066f4:	1e03      	subs	r3, r0, #0
 80066f6:	d100      	bne.n	80066fa <GetLatLon+0xf6>
			  							  				  			  				    	  else return;
 80066f8:	e0c2      	b.n	8006880 <GetLatLon+0x27c>
			  							  				  			  				    	  if((tempPos.lat>.000001f||tempPos.lat<-.000001f)&&(tempPos.lon>.000001f||tempPos.lon<-.000001f)&&(pos.lat>.000001f||pos.lat<-.000001f)&&(pos.lat>.000001f||pos.lat<-.000001f)){
 80066fa:	2408      	movs	r4, #8
 80066fc:	193b      	adds	r3, r7, r4
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4968      	ldr	r1, [pc, #416]	@ (80068a4 <GetLatLon+0x2a0>)
 8006702:	1c18      	adds	r0, r3, #0
 8006704:	f7f9 fefe 	bl	8000504 <__aeabi_fcmpgt>
 8006708:	1e03      	subs	r3, r0, #0
 800670a:	d108      	bne.n	800671e <GetLatLon+0x11a>
 800670c:	193b      	adds	r3, r7, r4
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4965      	ldr	r1, [pc, #404]	@ (80068a8 <GetLatLon+0x2a4>)
 8006712:	1c18      	adds	r0, r3, #0
 8006714:	f7f9 fee2 	bl	80004dc <__aeabi_fcmplt>
 8006718:	1e03      	subs	r3, r0, #0
 800671a:	d100      	bne.n	800671e <GetLatLon+0x11a>
			  							  				  			  				    	  else return;
 800671c:	e0b0      	b.n	8006880 <GetLatLon+0x27c>
			  							  				  			  				    	  if((tempPos.lat>.000001f||tempPos.lat<-.000001f)&&(tempPos.lon>.000001f||tempPos.lon<-.000001f)&&(pos.lat>.000001f||pos.lat<-.000001f)&&(pos.lat>.000001f||pos.lat<-.000001f)){
 800671e:	2408      	movs	r4, #8
 8006720:	193b      	adds	r3, r7, r4
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	495f      	ldr	r1, [pc, #380]	@ (80068a4 <GetLatLon+0x2a0>)
 8006726:	1c18      	adds	r0, r3, #0
 8006728:	f7f9 feec 	bl	8000504 <__aeabi_fcmpgt>
 800672c:	1e03      	subs	r3, r0, #0
 800672e:	d108      	bne.n	8006742 <GetLatLon+0x13e>
 8006730:	193b      	adds	r3, r7, r4
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	495c      	ldr	r1, [pc, #368]	@ (80068a8 <GetLatLon+0x2a4>)
 8006736:	1c18      	adds	r0, r3, #0
 8006738:	f7f9 fed0 	bl	80004dc <__aeabi_fcmplt>
 800673c:	1e03      	subs	r3, r0, #0
 800673e:	d100      	bne.n	8006742 <GetLatLon+0x13e>
			  							  				  			  				    	  else return;
 8006740:	e09e      	b.n	8006880 <GetLatLon+0x27c>
			  							  				  			  				    	  checkW = fabs(tempPos.lat-pos.lat);
 8006742:	003b      	movs	r3, r7
 8006744:	681a      	ldr	r2, [r3, #0]
 8006746:	2408      	movs	r4, #8
 8006748:	193b      	adds	r3, r7, r4
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	1c19      	adds	r1, r3, #0
 800674e:	1c10      	adds	r0, r2, #0
 8006750:	f7fa fda6 	bl	80012a0 <__aeabi_fsub>
 8006754:	1c03      	adds	r3, r0, #0
 8006756:	005b      	lsls	r3, r3, #1
 8006758:	085b      	lsrs	r3, r3, #1
 800675a:	1c18      	adds	r0, r3, #0
 800675c:	f7fd f85a 	bl	8003814 <__aeabi_f2d>
 8006760:	0002      	movs	r2, r0
 8006762:	000b      	movs	r3, r1
 8006764:	61ba      	str	r2, [r7, #24]
 8006766:	61fb      	str	r3, [r7, #28]
			  							  				  			  				    	  checkH = fabs(tempPos.lon-pos.lon);
 8006768:	003b      	movs	r3, r7
 800676a:	685a      	ldr	r2, [r3, #4]
 800676c:	193b      	adds	r3, r7, r4
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	1c19      	adds	r1, r3, #0
 8006772:	1c10      	adds	r0, r2, #0
 8006774:	f7fa fd94 	bl	80012a0 <__aeabi_fsub>
 8006778:	1c03      	adds	r3, r0, #0
 800677a:	005b      	lsls	r3, r3, #1
 800677c:	085b      	lsrs	r3, r3, #1
 800677e:	1c18      	adds	r0, r3, #0
 8006780:	f7fd f848 	bl	8003814 <__aeabi_f2d>
 8006784:	0002      	movs	r2, r0
 8006786:	000b      	movs	r3, r1
 8006788:	613a      	str	r2, [r7, #16]
 800678a:	617b      	str	r3, [r7, #20]
			  							  				  			  				    	  if(sqrt((checkW*checkW)+(checkH*checkH))<gpsThreshold) return;
 800678c:	69ba      	ldr	r2, [r7, #24]
 800678e:	69fb      	ldr	r3, [r7, #28]
 8006790:	69b8      	ldr	r0, [r7, #24]
 8006792:	69f9      	ldr	r1, [r7, #28]
 8006794:	f7fc f89e 	bl	80028d4 <__aeabi_dmul>
 8006798:	0002      	movs	r2, r0
 800679a:	000b      	movs	r3, r1
 800679c:	0014      	movs	r4, r2
 800679e:	001d      	movs	r5, r3
 80067a0:	693a      	ldr	r2, [r7, #16]
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	6938      	ldr	r0, [r7, #16]
 80067a6:	6979      	ldr	r1, [r7, #20]
 80067a8:	f7fc f894 	bl	80028d4 <__aeabi_dmul>
 80067ac:	0002      	movs	r2, r0
 80067ae:	000b      	movs	r3, r1
 80067b0:	0020      	movs	r0, r4
 80067b2:	0029      	movs	r1, r5
 80067b4:	f7fb f88e 	bl	80018d4 <__aeabi_dadd>
 80067b8:	0002      	movs	r2, r0
 80067ba:	000b      	movs	r3, r1
 80067bc:	0010      	movs	r0, r2
 80067be:	0019      	movs	r1, r3
 80067c0:	f00a fb21 	bl	8010e06 <sqrt>
 80067c4:	0004      	movs	r4, r0
 80067c6:	000d      	movs	r5, r1
 80067c8:	4b38      	ldr	r3, [pc, #224]	@ (80068ac <GetLatLon+0x2a8>)
 80067ca:	1c18      	adds	r0, r3, #0
 80067cc:	f7fd f822 	bl	8003814 <__aeabi_f2d>
 80067d0:	0002      	movs	r2, r0
 80067d2:	000b      	movs	r3, r1
 80067d4:	0020      	movs	r0, r4
 80067d6:	0029      	movs	r1, r5
 80067d8:	f7f9 fe46 	bl	8000468 <__aeabi_dcmplt>
 80067dc:	1e03      	subs	r3, r0, #0
 80067de:	d14c      	bne.n	800687a <GetLatLon+0x276>
 80067e0:	46c0      	nop			@ (mov r8, r8)
			  							  				  for(posCheckI=0;posCheckI<game.numLocations;posCheckI++)
 80067e2:	6a3b      	ldr	r3, [r7, #32]
 80067e4:	3301      	adds	r3, #1
 80067e6:	623b      	str	r3, [r7, #32]
 80067e8:	4b2c      	ldr	r3, [pc, #176]	@ (800689c <GetLatLon+0x298>)
 80067ea:	695a      	ldr	r2, [r3, #20]
 80067ec:	6a3b      	ldr	r3, [r7, #32]
 80067ee:	429a      	cmp	r2, r3
 80067f0:	d900      	bls.n	80067f4 <GetLatLon+0x1f0>
 80067f2:	e758      	b.n	80066a6 <GetLatLon+0xa2>

			  							  				  			  				      }
			  							  				game.positions[game.numLocations] = pos;
 80067f4:	4b29      	ldr	r3, [pc, #164]	@ (800689c <GetLatLon+0x298>)
 80067f6:	695b      	ldr	r3, [r3, #20]
 80067f8:	4a28      	ldr	r2, [pc, #160]	@ (800689c <GetLatLon+0x298>)
 80067fa:	3303      	adds	r3, #3
 80067fc:	00db      	lsls	r3, r3, #3
 80067fe:	2108      	movs	r1, #8
 8006800:	1879      	adds	r1, r7, r1
 8006802:	18d3      	adds	r3, r2, r3
 8006804:	000a      	movs	r2, r1
 8006806:	ca03      	ldmia	r2!, {r0, r1}
 8006808:	c303      	stmia	r3!, {r0, r1}
			  							  				game.numLocations++;
 800680a:	4b24      	ldr	r3, [pc, #144]	@ (800689c <GetLatLon+0x298>)
 800680c:	695b      	ldr	r3, [r3, #20]
 800680e:	1c5a      	adds	r2, r3, #1
 8006810:	4b22      	ldr	r3, [pc, #136]	@ (800689c <GetLatLon+0x298>)
 8006812:	615a      	str	r2, [r3, #20]
			  							  				if(game.numLocations>31)game.numLocations=0;
 8006814:	4b21      	ldr	r3, [pc, #132]	@ (800689c <GetLatLon+0x298>)
 8006816:	695b      	ldr	r3, [r3, #20]
 8006818:	2b1f      	cmp	r3, #31
 800681a:	d930      	bls.n	800687e <GetLatLon+0x27a>
 800681c:	4b1f      	ldr	r3, [pc, #124]	@ (800689c <GetLatLon+0x298>)
 800681e:	2200      	movs	r2, #0
 8006820:	615a      	str	r2, [r3, #20]
			  							  				      break;
 8006822:	e02c      	b.n	800687e <GetLatLon+0x27a>
			  							  				  }

			  				for(ii=0;ii<=127;ii++) buffer[ii]=0;
 8006824:	4b18      	ldr	r3, [pc, #96]	@ (8006888 <GetLatLon+0x284>)
 8006826:	2200      	movs	r2, #0
 8006828:	801a      	strh	r2, [r3, #0]
 800682a:	e00d      	b.n	8006848 <GetLatLon+0x244>
 800682c:	4b16      	ldr	r3, [pc, #88]	@ (8006888 <GetLatLon+0x284>)
 800682e:	881b      	ldrh	r3, [r3, #0]
 8006830:	b29b      	uxth	r3, r3
 8006832:	001a      	movs	r2, r3
 8006834:	4b15      	ldr	r3, [pc, #84]	@ (800688c <GetLatLon+0x288>)
 8006836:	2100      	movs	r1, #0
 8006838:	5499      	strb	r1, [r3, r2]
 800683a:	4b13      	ldr	r3, [pc, #76]	@ (8006888 <GetLatLon+0x284>)
 800683c:	881b      	ldrh	r3, [r3, #0]
 800683e:	b29b      	uxth	r3, r3
 8006840:	3301      	adds	r3, #1
 8006842:	b29a      	uxth	r2, r3
 8006844:	4b10      	ldr	r3, [pc, #64]	@ (8006888 <GetLatLon+0x284>)
 8006846:	801a      	strh	r2, [r3, #0]
 8006848:	4b0f      	ldr	r3, [pc, #60]	@ (8006888 <GetLatLon+0x284>)
 800684a:	881b      	ldrh	r3, [r3, #0]
 800684c:	b29b      	uxth	r3, r3
 800684e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006850:	d9ec      	bls.n	800682c <GetLatLon+0x228>
			  				  }
			  			  gpsI++;
 8006852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006854:	3301      	adds	r3, #1
 8006856:	627b      	str	r3, [r7, #36]	@ 0x24
	while(HAL_UART_Receive(&huart1, &(buffer[gpsI]), 1, 1000)==HAL_OK||1)
 8006858:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800685a:	4b0c      	ldr	r3, [pc, #48]	@ (800688c <GetLatLon+0x288>)
 800685c:	18d1      	adds	r1, r2, r3
 800685e:	23fa      	movs	r3, #250	@ 0xfa
 8006860:	009b      	lsls	r3, r3, #2
 8006862:	4813      	ldr	r0, [pc, #76]	@ (80068b0 <GetLatLon+0x2ac>)
 8006864:	2201      	movs	r2, #1
 8006866:	f006 f985 	bl	800cb74 <HAL_UART_Receive>
							if(buffer[gpsI]=='$')
 800686a:	4a08      	ldr	r2, [pc, #32]	@ (800688c <GetLatLon+0x288>)
 800686c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800686e:	18d3      	adds	r3, r2, r3
 8006870:	781b      	ldrb	r3, [r3, #0]
 8006872:	2b24      	cmp	r3, #36	@ 0x24
 8006874:	d000      	beq.n	8006878 <GetLatLon+0x274>
 8006876:	e6e9      	b.n	800664c <GetLatLon+0x48>
 8006878:	e6cc      	b.n	8006614 <GetLatLon+0x10>
			  							  				  			  				    	  if(sqrt((checkW*checkW)+(checkH*checkH))<gpsThreshold) return;
 800687a:	46c0      	nop			@ (mov r8, r8)
 800687c:	e000      	b.n	8006880 <GetLatLon+0x27c>
			  							  				      break;
 800687e:	46c0      	nop			@ (mov r8, r8)


			  		  	}


}
 8006880:	46bd      	mov	sp, r7
 8006882:	b00a      	add	sp, #40	@ 0x28
 8006884:	bdb0      	pop	{r4, r5, r7, pc}
 8006886:	46c0      	nop			@ (mov r8, r8)
 8006888:	2000108c 	.word	0x2000108c
 800688c:	200010e0 	.word	0x200010e0
 8006890:	20001090 	.word	0x20001090
 8006894:	200010a0 	.word	0x200010a0
 8006898:	200010a8 	.word	0x200010a8
 800689c:	20000f38 	.word	0x20000f38
 80068a0:	200010de 	.word	0x200010de
 80068a4:	358637bd 	.word	0x358637bd
 80068a8:	b58637bd 	.word	0xb58637bd
 80068ac:	38d1b717 	.word	0x38d1b717
 80068b0:	20002084 	.word	0x20002084

080068b4 <Emote>:
void Emote()
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b084      	sub	sp, #16
 80068b8:	af04      	add	r7, sp, #16
	 switch(game.evo)
 80068ba:	4b4f      	ldr	r3, [pc, #316]	@ (80069f8 <Emote+0x144>)
 80068bc:	7c1b      	ldrb	r3, [r3, #16]
 80068be:	2b02      	cmp	r3, #2
 80068c0:	d036      	beq.n	8006930 <Emote+0x7c>
 80068c2:	dc5a      	bgt.n	800697a <Emote+0xc6>
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d002      	beq.n	80068ce <Emote+0x1a>
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	d011      	beq.n	80068f0 <Emote+0x3c>
 80068cc:	e055      	b.n	800697a <Emote+0xc6>
				  {
				  case 0:
					  if(game.time.seconds%5==0)
 80068ce:	4b4a      	ldr	r3, [pc, #296]	@ (80069f8 <Emote+0x144>)
 80068d0:	689b      	ldr	r3, [r3, #8]
 80068d2:	2105      	movs	r1, #5
 80068d4:	0018      	movs	r0, r3
 80068d6:	f7f9 fdab 	bl	8000430 <__aeabi_idivmod>
 80068da:	1e0b      	subs	r3, r1, #0
 80068dc:	d148      	bne.n	8006970 <Emote+0xbc>
					  {
						  effect = EggNoise;
 80068de:	4b47      	ldr	r3, [pc, #284]	@ (80069fc <Emote+0x148>)
 80068e0:	2201      	movs	r2, #1
 80068e2:	701a      	strb	r2, [r3, #0]
						  PlayEffect(effect);
 80068e4:	4b45      	ldr	r3, [pc, #276]	@ (80069fc <Emote+0x148>)
 80068e6:	781b      	ldrb	r3, [r3, #0]
 80068e8:	0018      	movs	r0, r3
 80068ea:	f7ff f8db 	bl	8005aa4 <PlayEffect>
					  }
					  break;
 80068ee:	e03f      	b.n	8006970 <Emote+0xbc>
				  case 1:
					  if(game.time.seconds%3==0)
 80068f0:	4b41      	ldr	r3, [pc, #260]	@ (80069f8 <Emote+0x144>)
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	2103      	movs	r1, #3
 80068f6:	0018      	movs	r0, r3
 80068f8:	f7f9 fd9a 	bl	8000430 <__aeabi_idivmod>
 80068fc:	1e0b      	subs	r3, r1, #0
 80068fe:	d139      	bne.n	8006974 <Emote+0xc0>
					  					  {
						  if(game.mood>sadMood){
 8006900:	4b3d      	ldr	r3, [pc, #244]	@ (80069f8 <Emote+0x144>)
 8006902:	7c5b      	ldrb	r3, [r3, #17]
 8006904:	001a      	movs	r2, r3
 8006906:	2300      	movs	r3, #0
 8006908:	429a      	cmp	r2, r3
 800690a:	dd08      	ble.n	800691e <Emote+0x6a>
					  			effect = YoungNoiseHappy;
 800690c:	4b3b      	ldr	r3, [pc, #236]	@ (80069fc <Emote+0x148>)
 800690e:	2202      	movs	r2, #2
 8006910:	701a      	strb	r2, [r3, #0]
					  			PlayEffect(effect);
 8006912:	4b3a      	ldr	r3, [pc, #232]	@ (80069fc <Emote+0x148>)
 8006914:	781b      	ldrb	r3, [r3, #0]
 8006916:	0018      	movs	r0, r3
 8006918:	f7ff f8c4 	bl	8005aa4 <PlayEffect>
							  effect = YoungNoiseSad;
							 PlayEffect(effect);

						  }
					  	}
					  break;
 800691c:	e02a      	b.n	8006974 <Emote+0xc0>
							  effect = YoungNoiseSad;
 800691e:	4b37      	ldr	r3, [pc, #220]	@ (80069fc <Emote+0x148>)
 8006920:	2203      	movs	r2, #3
 8006922:	701a      	strb	r2, [r3, #0]
							 PlayEffect(effect);
 8006924:	4b35      	ldr	r3, [pc, #212]	@ (80069fc <Emote+0x148>)
 8006926:	781b      	ldrb	r3, [r3, #0]
 8006928:	0018      	movs	r0, r3
 800692a:	f7ff f8bb 	bl	8005aa4 <PlayEffect>
					  break;
 800692e:	e021      	b.n	8006974 <Emote+0xc0>
				  case 2:
					  if(game.time.seconds%5==0)
 8006930:	4b31      	ldr	r3, [pc, #196]	@ (80069f8 <Emote+0x144>)
 8006932:	689b      	ldr	r3, [r3, #8]
 8006934:	2105      	movs	r1, #5
 8006936:	0018      	movs	r0, r3
 8006938:	f7f9 fd7a 	bl	8000430 <__aeabi_idivmod>
 800693c:	1e0b      	subs	r3, r1, #0
 800693e:	d11b      	bne.n	8006978 <Emote+0xc4>
					  					  					  {
					  						  if(game.mood>sadMood){
 8006940:	4b2d      	ldr	r3, [pc, #180]	@ (80069f8 <Emote+0x144>)
 8006942:	7c5b      	ldrb	r3, [r3, #17]
 8006944:	001a      	movs	r2, r3
 8006946:	2300      	movs	r3, #0
 8006948:	429a      	cmp	r2, r3
 800694a:	dd08      	ble.n	800695e <Emote+0xaa>
					  					  			effect = AdultNoiseHappy;
 800694c:	4b2b      	ldr	r3, [pc, #172]	@ (80069fc <Emote+0x148>)
 800694e:	2204      	movs	r2, #4
 8006950:	701a      	strb	r2, [r3, #0]
					  					  			PlayEffect(effect);
 8006952:	4b2a      	ldr	r3, [pc, #168]	@ (80069fc <Emote+0x148>)
 8006954:	781b      	ldrb	r3, [r3, #0]
 8006956:	0018      	movs	r0, r3
 8006958:	f7ff f8a4 	bl	8005aa4 <PlayEffect>
					  							 PlayEffect(effect);

					  						  }
					  					  	}
					  //Animate as the adult
					  break;
 800695c:	e00c      	b.n	8006978 <Emote+0xc4>
					  							  effect = AdultNoiseSad;
 800695e:	4b27      	ldr	r3, [pc, #156]	@ (80069fc <Emote+0x148>)
 8006960:	2205      	movs	r2, #5
 8006962:	701a      	strb	r2, [r3, #0]
					  							 PlayEffect(effect);
 8006964:	4b25      	ldr	r3, [pc, #148]	@ (80069fc <Emote+0x148>)
 8006966:	781b      	ldrb	r3, [r3, #0]
 8006968:	0018      	movs	r0, r3
 800696a:	f7ff f89b 	bl	8005aa4 <PlayEffect>
					  break;
 800696e:	e003      	b.n	8006978 <Emote+0xc4>
					  break;
 8006970:	46c0      	nop			@ (mov r8, r8)
 8006972:	e002      	b.n	800697a <Emote+0xc6>
					  break;
 8006974:	46c0      	nop			@ (mov r8, r8)
 8006976:	e000      	b.n	800697a <Emote+0xc6>
					  break;
 8006978:	46c0      	nop			@ (mov r8, r8)
				  }
	if(game.mood<=sadMood)
 800697a:	4b1f      	ldr	r3, [pc, #124]	@ (80069f8 <Emote+0x144>)
 800697c:	7c5b      	ldrb	r3, [r3, #17]
 800697e:	001a      	movs	r2, r3
 8006980:	2300      	movs	r3, #0
 8006982:	429a      	cmp	r2, r3
 8006984:	dc0d      	bgt.n	80069a2 <Emote+0xee>
	{
		drawString(0, 140, "Emotional State :(", WHITE, BLACK, 1, 1);
 8006986:	2301      	movs	r3, #1
 8006988:	425b      	negs	r3, r3
 800698a:	4a1d      	ldr	r2, [pc, #116]	@ (8006a00 <Emote+0x14c>)
 800698c:	2101      	movs	r1, #1
 800698e:	9102      	str	r1, [sp, #8]
 8006990:	2101      	movs	r1, #1
 8006992:	9101      	str	r1, [sp, #4]
 8006994:	2100      	movs	r1, #0
 8006996:	9100      	str	r1, [sp, #0]
 8006998:	218c      	movs	r1, #140	@ 0x8c
 800699a:	2000      	movs	r0, #0
 800699c:	f7fd fad3 	bl	8003f46 <drawString>
	}
	else if(game.mood>=happyMood)
	{
		drawString(0, 140, "Emotional State :)", WHITE, BLACK, 1, 1);
	}
}
 80069a0:	e026      	b.n	80069f0 <Emote+0x13c>
	else if(game.mood<=mehMood)
 80069a2:	4b15      	ldr	r3, [pc, #84]	@ (80069f8 <Emote+0x144>)
 80069a4:	7c5b      	ldrb	r3, [r3, #17]
 80069a6:	001a      	movs	r2, r3
 80069a8:	2301      	movs	r3, #1
 80069aa:	429a      	cmp	r2, r3
 80069ac:	dc0d      	bgt.n	80069ca <Emote+0x116>
		drawString(0, 140, "Emotional State :|", WHITE, BLACK, 1, 1);
 80069ae:	2301      	movs	r3, #1
 80069b0:	425b      	negs	r3, r3
 80069b2:	4a14      	ldr	r2, [pc, #80]	@ (8006a04 <Emote+0x150>)
 80069b4:	2101      	movs	r1, #1
 80069b6:	9102      	str	r1, [sp, #8]
 80069b8:	2101      	movs	r1, #1
 80069ba:	9101      	str	r1, [sp, #4]
 80069bc:	2100      	movs	r1, #0
 80069be:	9100      	str	r1, [sp, #0]
 80069c0:	218c      	movs	r1, #140	@ 0x8c
 80069c2:	2000      	movs	r0, #0
 80069c4:	f7fd fabf 	bl	8003f46 <drawString>
}
 80069c8:	e012      	b.n	80069f0 <Emote+0x13c>
	else if(game.mood>=happyMood)
 80069ca:	4b0b      	ldr	r3, [pc, #44]	@ (80069f8 <Emote+0x144>)
 80069cc:	7c5b      	ldrb	r3, [r3, #17]
 80069ce:	001a      	movs	r2, r3
 80069d0:	2302      	movs	r3, #2
 80069d2:	429a      	cmp	r2, r3
 80069d4:	db0c      	blt.n	80069f0 <Emote+0x13c>
		drawString(0, 140, "Emotional State :)", WHITE, BLACK, 1, 1);
 80069d6:	2301      	movs	r3, #1
 80069d8:	425b      	negs	r3, r3
 80069da:	4a0b      	ldr	r2, [pc, #44]	@ (8006a08 <Emote+0x154>)
 80069dc:	2101      	movs	r1, #1
 80069de:	9102      	str	r1, [sp, #8]
 80069e0:	2101      	movs	r1, #1
 80069e2:	9101      	str	r1, [sp, #4]
 80069e4:	2100      	movs	r1, #0
 80069e6:	9100      	str	r1, [sp, #0]
 80069e8:	218c      	movs	r1, #140	@ 0x8c
 80069ea:	2000      	movs	r0, #0
 80069ec:	f7fd faab 	bl	8003f46 <drawString>
}
 80069f0:	46c0      	nop			@ (mov r8, r8)
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}
 80069f6:	46c0      	nop			@ (mov r8, r8)
 80069f8:	20000f38 	.word	0x20000f38
 80069fc:	20000f34 	.word	0x20000f34
 8006a00:	08011448 	.word	0x08011448
 8006a04:	0801145c 	.word	0x0801145c
 8006a08:	08011470 	.word	0x08011470

08006a0c <GetJustLatLon>:
struct latLon GetJustLatLon()
{
 8006a0c:	b590      	push	{r4, r7, lr}
 8006a0e:	b089      	sub	sp, #36	@ 0x24
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
	int gpsI=0;
 8006a14:	2300      	movs	r3, #0
 8006a16:	61fb      	str	r3, [r7, #28]
	struct latLon pos;
	struct latLon tempPos;
	double checkW;
	double checkH;
	int posCheckI=0;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	61bb      	str	r3, [r7, #24]
	//HAL_UART_Recieve();
	while(HAL_UART_Receive(&huart1, &(buffer[gpsI]), 1, 1000)==HAL_OK||1)
 8006a1c:	e057      	b.n	8006ace <GetJustLatLon+0xc2>
			  		  	{
							if(buffer[gpsI]=='$')
							{
								for(ii=0;ii<=127;ii++) buffer[ii]=0;
 8006a1e:	4b36      	ldr	r3, [pc, #216]	@ (8006af8 <GetJustLatLon+0xec>)
 8006a20:	2200      	movs	r2, #0
 8006a22:	801a      	strh	r2, [r3, #0]
 8006a24:	e00d      	b.n	8006a42 <GetJustLatLon+0x36>
 8006a26:	4b34      	ldr	r3, [pc, #208]	@ (8006af8 <GetJustLatLon+0xec>)
 8006a28:	881b      	ldrh	r3, [r3, #0]
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	001a      	movs	r2, r3
 8006a2e:	4b33      	ldr	r3, [pc, #204]	@ (8006afc <GetJustLatLon+0xf0>)
 8006a30:	2100      	movs	r1, #0
 8006a32:	5499      	strb	r1, [r3, r2]
 8006a34:	4b30      	ldr	r3, [pc, #192]	@ (8006af8 <GetJustLatLon+0xec>)
 8006a36:	881b      	ldrh	r3, [r3, #0]
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	3301      	adds	r3, #1
 8006a3c:	b29a      	uxth	r2, r3
 8006a3e:	4b2e      	ldr	r3, [pc, #184]	@ (8006af8 <GetJustLatLon+0xec>)
 8006a40:	801a      	strh	r2, [r3, #0]
 8006a42:	4b2d      	ldr	r3, [pc, #180]	@ (8006af8 <GetJustLatLon+0xec>)
 8006a44:	881b      	ldrh	r3, [r3, #0]
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a4a:	d9ec      	bls.n	8006a26 <GetJustLatLon+0x1a>
								buffer[0]='$';
 8006a4c:	4b2b      	ldr	r3, [pc, #172]	@ (8006afc <GetJustLatLon+0xf0>)
 8006a4e:	2224      	movs	r2, #36	@ 0x24
 8006a50:	701a      	strb	r2, [r3, #0]
								gpsI=0;
 8006a52:	2300      	movs	r3, #0
 8006a54:	61fb      	str	r3, [r7, #28]
							}//HAL_UART_Transmit(&huart2, buffer[i], 1, 1000);
			  			  if(buffer[gpsI]=='\n')
 8006a56:	4a29      	ldr	r2, [pc, #164]	@ (8006afc <GetJustLatLon+0xf0>)
 8006a58:	69fb      	ldr	r3, [r7, #28]
 8006a5a:	18d3      	adds	r3, r2, r3
 8006a5c:	781b      	ldrb	r3, [r3, #0]
 8006a5e:	2b0a      	cmp	r3, #10
 8006a60:	d132      	bne.n	8006ac8 <GetJustLatLon+0xbc>
			  				    	  else return;
			  				      }

			  				      break;
			  				  }*/
			  				if(minmea_parse_gga(&ggaStruct, &(buffer))){
 8006a62:	4a26      	ldr	r2, [pc, #152]	@ (8006afc <GetJustLatLon+0xf0>)
 8006a64:	4b26      	ldr	r3, [pc, #152]	@ (8006b00 <GetJustLatLon+0xf4>)
 8006a66:	0011      	movs	r1, r2
 8006a68:	0018      	movs	r0, r3
 8006a6a:	f000 fc2d 	bl	80072c8 <minmea_parse_gga>
 8006a6e:	1e03      	subs	r3, r0, #0
 8006a70:	d013      	beq.n	8006a9a <GetJustLatLon+0x8e>
			  							  				      pos.lat = minmea_tocoord(&ggaStruct.latitude);
 8006a72:	4b24      	ldr	r3, [pc, #144]	@ (8006b04 <GetJustLatLon+0xf8>)
 8006a74:	0018      	movs	r0, r3
 8006a76:	f7fd ff73 	bl	8004960 <minmea_tocoord>
 8006a7a:	1c02      	adds	r2, r0, #0
 8006a7c:	2410      	movs	r4, #16
 8006a7e:	193b      	adds	r3, r7, r4
 8006a80:	601a      	str	r2, [r3, #0]
			  							  				      pos.lon = minmea_tocoord(&ggaStruct.longitude);
 8006a82:	4b21      	ldr	r3, [pc, #132]	@ (8006b08 <GetJustLatLon+0xfc>)
 8006a84:	0018      	movs	r0, r3
 8006a86:	f7fd ff6b 	bl	8004960 <minmea_tocoord>
 8006a8a:	1c02      	adds	r2, r0, #0
 8006a8c:	193b      	adds	r3, r7, r4
 8006a8e:	605a      	str	r2, [r3, #4]
			  							  				      return pos;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	193a      	adds	r2, r7, r4
 8006a94:	ca03      	ldmia	r2!, {r0, r1}
 8006a96:	c303      	stmia	r3!, {r0, r1}
 8006a98:	e029      	b.n	8006aee <GetJustLatLon+0xe2>
			  							  				      break;
			  							  				  }

			  				for(ii=0;ii<=127;ii++) buffer[ii]=0;
 8006a9a:	4b17      	ldr	r3, [pc, #92]	@ (8006af8 <GetJustLatLon+0xec>)
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	801a      	strh	r2, [r3, #0]
 8006aa0:	e00d      	b.n	8006abe <GetJustLatLon+0xb2>
 8006aa2:	4b15      	ldr	r3, [pc, #84]	@ (8006af8 <GetJustLatLon+0xec>)
 8006aa4:	881b      	ldrh	r3, [r3, #0]
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	001a      	movs	r2, r3
 8006aaa:	4b14      	ldr	r3, [pc, #80]	@ (8006afc <GetJustLatLon+0xf0>)
 8006aac:	2100      	movs	r1, #0
 8006aae:	5499      	strb	r1, [r3, r2]
 8006ab0:	4b11      	ldr	r3, [pc, #68]	@ (8006af8 <GetJustLatLon+0xec>)
 8006ab2:	881b      	ldrh	r3, [r3, #0]
 8006ab4:	b29b      	uxth	r3, r3
 8006ab6:	3301      	adds	r3, #1
 8006ab8:	b29a      	uxth	r2, r3
 8006aba:	4b0f      	ldr	r3, [pc, #60]	@ (8006af8 <GetJustLatLon+0xec>)
 8006abc:	801a      	strh	r2, [r3, #0]
 8006abe:	4b0e      	ldr	r3, [pc, #56]	@ (8006af8 <GetJustLatLon+0xec>)
 8006ac0:	881b      	ldrh	r3, [r3, #0]
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	2b7f      	cmp	r3, #127	@ 0x7f
 8006ac6:	d9ec      	bls.n	8006aa2 <GetJustLatLon+0x96>
			  				  }
			  			  gpsI++;
 8006ac8:	69fb      	ldr	r3, [r7, #28]
 8006aca:	3301      	adds	r3, #1
 8006acc:	61fb      	str	r3, [r7, #28]
	while(HAL_UART_Receive(&huart1, &(buffer[gpsI]), 1, 1000)==HAL_OK||1)
 8006ace:	69fa      	ldr	r2, [r7, #28]
 8006ad0:	4b0a      	ldr	r3, [pc, #40]	@ (8006afc <GetJustLatLon+0xf0>)
 8006ad2:	18d1      	adds	r1, r2, r3
 8006ad4:	23fa      	movs	r3, #250	@ 0xfa
 8006ad6:	009b      	lsls	r3, r3, #2
 8006ad8:	480c      	ldr	r0, [pc, #48]	@ (8006b0c <GetJustLatLon+0x100>)
 8006ada:	2201      	movs	r2, #1
 8006adc:	f006 f84a 	bl	800cb74 <HAL_UART_Receive>
							if(buffer[gpsI]=='$')
 8006ae0:	4a06      	ldr	r2, [pc, #24]	@ (8006afc <GetJustLatLon+0xf0>)
 8006ae2:	69fb      	ldr	r3, [r7, #28]
 8006ae4:	18d3      	adds	r3, r2, r3
 8006ae6:	781b      	ldrb	r3, [r3, #0]
 8006ae8:	2b24      	cmp	r3, #36	@ 0x24
 8006aea:	d1b4      	bne.n	8006a56 <GetJustLatLon+0x4a>
 8006aec:	e797      	b.n	8006a1e <GetJustLatLon+0x12>
			  							  				      return pos;
 8006aee:	46c0      	nop			@ (mov r8, r8)


			  		  	}


}
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	46bd      	mov	sp, r7
 8006af4:	b009      	add	sp, #36	@ 0x24
 8006af6:	bd90      	pop	{r4, r7, pc}
 8006af8:	2000108c 	.word	0x2000108c
 8006afc:	200010e0 	.word	0x200010e0
 8006b00:	20001090 	.word	0x20001090
 8006b04:	200010a0 	.word	0x200010a0
 8006b08:	200010a8 	.word	0x200010a8
 8006b0c:	20002084 	.word	0x20002084

08006b10 <HAL_RTC_AlarmAEventCallback>:
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8006b10:	b590      	push	{r4, r7, lr}
 8006b12:	b08d      	sub	sp, #52	@ 0x34
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  RTC_AlarmTypeDef sAlarm;
  HAL_RTC_GetAlarm(hrtc,&sAlarm,RTC_ALARM_A,FORMAT_BIN);
 8006b18:	2380      	movs	r3, #128	@ 0x80
 8006b1a:	005a      	lsls	r2, r3, #1
 8006b1c:	2408      	movs	r4, #8
 8006b1e:	1939      	adds	r1, r7, r4
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	2300      	movs	r3, #0
 8006b24:	f004 f990 	bl	800ae48 <HAL_RTC_GetAlarm>
  if(sAlarm.AlarmTime.Seconds>58) {
 8006b28:	0022      	movs	r2, r4
 8006b2a:	18bb      	adds	r3, r7, r2
 8006b2c:	789b      	ldrb	r3, [r3, #2]
 8006b2e:	2b3a      	cmp	r3, #58	@ 0x3a
 8006b30:	d903      	bls.n	8006b3a <HAL_RTC_AlarmAEventCallback+0x2a>
    sAlarm.AlarmTime.Seconds=0;
 8006b32:	18bb      	adds	r3, r7, r2
 8006b34:	2200      	movs	r2, #0
 8006b36:	709a      	strb	r2, [r3, #2]
  }else{
    sAlarm.AlarmTime.Seconds=sAlarm.AlarmTime.Seconds+1;
  }
    //while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){}
  	 // drawString(30, 30, "testTime", BLACK, GREEN, 1, 1);
}
 8006b38:	e006      	b.n	8006b48 <HAL_RTC_AlarmAEventCallback+0x38>
    sAlarm.AlarmTime.Seconds=sAlarm.AlarmTime.Seconds+1;
 8006b3a:	2108      	movs	r1, #8
 8006b3c:	187b      	adds	r3, r7, r1
 8006b3e:	789b      	ldrb	r3, [r3, #2]
 8006b40:	3301      	adds	r3, #1
 8006b42:	b2da      	uxtb	r2, r3
 8006b44:	187b      	adds	r3, r7, r1
 8006b46:	709a      	strb	r2, [r3, #2]
}
 8006b48:	46c0      	nop			@ (mov r8, r8)
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	b00d      	add	sp, #52	@ 0x34
 8006b4e:	bd90      	pop	{r4, r7, pc}

08006b50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006b54:	b672      	cpsid	i
}
 8006b56:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006b58:	46c0      	nop			@ (mov r8, r8)
 8006b5a:	e7fd      	b.n	8006b58 <Error_Handler+0x8>

08006b5c <minmea_isfield>:
        return false;

    return true;
}

static inline bool minmea_isfield(char c) {
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b082      	sub	sp, #8
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	0002      	movs	r2, r0
 8006b64:	1dfb      	adds	r3, r7, #7
 8006b66:	701a      	strb	r2, [r3, #0]
    return isprint((unsigned char) c) && c != ',' && c != '*';
 8006b68:	1dfb      	adds	r3, r7, #7
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	1c5a      	adds	r2, r3, #1
 8006b6e:	4b0d      	ldr	r3, [pc, #52]	@ (8006ba4 <minmea_isfield+0x48>)
 8006b70:	18d3      	adds	r3, r2, r3
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	001a      	movs	r2, r3
 8006b76:	2397      	movs	r3, #151	@ 0x97
 8006b78:	4013      	ands	r3, r2
 8006b7a:	d009      	beq.n	8006b90 <minmea_isfield+0x34>
 8006b7c:	1dfb      	adds	r3, r7, #7
 8006b7e:	781b      	ldrb	r3, [r3, #0]
 8006b80:	2b2c      	cmp	r3, #44	@ 0x2c
 8006b82:	d005      	beq.n	8006b90 <minmea_isfield+0x34>
 8006b84:	1dfb      	adds	r3, r7, #7
 8006b86:	781b      	ldrb	r3, [r3, #0]
 8006b88:	2b2a      	cmp	r3, #42	@ 0x2a
 8006b8a:	d001      	beq.n	8006b90 <minmea_isfield+0x34>
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	e000      	b.n	8006b92 <minmea_isfield+0x36>
 8006b90:	2300      	movs	r3, #0
 8006b92:	1c1a      	adds	r2, r3, #0
 8006b94:	2301      	movs	r3, #1
 8006b96:	4013      	ands	r3, r2
 8006b98:	b2db      	uxtb	r3, r3
}
 8006b9a:	0018      	movs	r0, r3
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	b002      	add	sp, #8
 8006ba0:	bd80      	pop	{r7, pc}
 8006ba2:	46c0      	nop			@ (mov r8, r8)
 8006ba4:	08011f80 	.word	0x08011f80

08006ba8 <minmea_scan>:

bool minmea_scan(const char *sentence, const char *format, ...)
{
 8006ba8:	b40e      	push	{r1, r2, r3}
 8006baa:	b5b0      	push	{r4, r5, r7, lr}
 8006bac:	b0a7      	sub	sp, #156	@ 0x9c
 8006bae:	af00      	add	r7, sp, #0
 8006bb0:	6078      	str	r0, [r7, #4]
    bool result = false;
 8006bb2:	2397      	movs	r3, #151	@ 0x97
 8006bb4:	18fb      	adds	r3, r7, r3
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	701a      	strb	r2, [r3, #0]
    bool optional = false;
 8006bba:	2396      	movs	r3, #150	@ 0x96
 8006bbc:	18fb      	adds	r3, r7, r3
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	701a      	strb	r2, [r3, #0]
    va_list ap;
    va_start(ap, format);
 8006bc2:	23a8      	movs	r3, #168	@ 0xa8
 8006bc4:	2208      	movs	r2, #8
 8006bc6:	189b      	adds	r3, r3, r2
 8006bc8:	19db      	adds	r3, r3, r7
 8006bca:	62fb      	str	r3, [r7, #44]	@ 0x2c

    const char *field = sentence;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2290      	movs	r2, #144	@ 0x90
 8006bd0:	18ba      	adds	r2, r7, r2
 8006bd2:	6013      	str	r3, [r2, #0]
        } else { \
            field = NULL; \
        } \
    } while (0)

    while (*format) {
 8006bd4:	e345      	b.n	8007262 <minmea_scan+0x6ba>
        char type = *format++;
 8006bd6:	21a4      	movs	r1, #164	@ 0xa4
 8006bd8:	2008      	movs	r0, #8
 8006bda:	180b      	adds	r3, r1, r0
 8006bdc:	19db      	adds	r3, r3, r7
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	1c5a      	adds	r2, r3, #1
 8006be2:	1809      	adds	r1, r1, r0
 8006be4:	19c9      	adds	r1, r1, r7
 8006be6:	600a      	str	r2, [r1, #0]
 8006be8:	2143      	movs	r1, #67	@ 0x43
 8006bea:	187a      	adds	r2, r7, r1
 8006bec:	781b      	ldrb	r3, [r3, #0]
 8006bee:	7013      	strb	r3, [r2, #0]

        if (type == ';') {
 8006bf0:	187b      	adds	r3, r7, r1
 8006bf2:	781b      	ldrb	r3, [r3, #0]
 8006bf4:	2b3b      	cmp	r3, #59	@ 0x3b
 8006bf6:	d104      	bne.n	8006c02 <minmea_scan+0x5a>
            // All further fields are optional.
            optional = true;
 8006bf8:	2396      	movs	r3, #150	@ 0x96
 8006bfa:	18fb      	adds	r3, r7, r3
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	701a      	strb	r2, [r3, #0]
            continue;
 8006c00:	e32f      	b.n	8007262 <minmea_scan+0x6ba>
        }

        if (!field && !optional) {
 8006c02:	2390      	movs	r3, #144	@ 0x90
 8006c04:	18fb      	adds	r3, r7, r3
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d108      	bne.n	8006c1e <minmea_scan+0x76>
 8006c0c:	2396      	movs	r3, #150	@ 0x96
 8006c0e:	18fb      	adds	r3, r7, r3
 8006c10:	781b      	ldrb	r3, [r3, #0]
 8006c12:	2201      	movs	r2, #1
 8006c14:	4053      	eors	r3, r2
 8006c16:	b2db      	uxtb	r3, r3
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d000      	beq.n	8006c1e <minmea_scan+0x76>
 8006c1c:	e32f      	b.n	800727e <minmea_scan+0x6d6>
            // Field requested but we ran out if input. Bail out.
            goto parse_error;
        }

        switch (type) {
 8006c1e:	2343      	movs	r3, #67	@ 0x43
 8006c20:	18fb      	adds	r3, r7, r3
 8006c22:	781b      	ldrb	r3, [r3, #0]
 8006c24:	3b44      	subs	r3, #68	@ 0x44
 8006c26:	2b30      	cmp	r3, #48	@ 0x30
 8006c28:	d900      	bls.n	8006c2c <minmea_scan+0x84>
 8006c2a:	e32a      	b.n	8007282 <minmea_scan+0x6da>
 8006c2c:	009a      	lsls	r2, r3, #2
 8006c2e:	4bbd      	ldr	r3, [pc, #756]	@ (8006f24 <minmea_scan+0x37c>)
 8006c30:	18d3      	adds	r3, r2, r3
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	469f      	mov	pc, r3
            case 'c': { // Single character field (char).
                char value = '\0';
 8006c36:	258f      	movs	r5, #143	@ 0x8f
 8006c38:	197b      	adds	r3, r7, r5
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	701a      	strb	r2, [r3, #0]

                if (field && minmea_isfield(*field))
 8006c3e:	2490      	movs	r4, #144	@ 0x90
 8006c40:	193b      	adds	r3, r7, r4
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d00c      	beq.n	8006c62 <minmea_scan+0xba>
 8006c48:	193b      	adds	r3, r7, r4
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	781b      	ldrb	r3, [r3, #0]
 8006c4e:	0018      	movs	r0, r3
 8006c50:	f7ff ff84 	bl	8006b5c <minmea_isfield>
 8006c54:	1e03      	subs	r3, r0, #0
 8006c56:	d004      	beq.n	8006c62 <minmea_scan+0xba>
                    value = *field;
 8006c58:	197b      	adds	r3, r7, r5
 8006c5a:	193a      	adds	r2, r7, r4
 8006c5c:	6812      	ldr	r2, [r2, #0]
 8006c5e:	7812      	ldrb	r2, [r2, #0]
 8006c60:	701a      	strb	r2, [r3, #0]

                *va_arg(ap, char *) = value;
 8006c62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c64:	1d1a      	adds	r2, r3, #4
 8006c66:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	228f      	movs	r2, #143	@ 0x8f
 8006c6c:	18ba      	adds	r2, r7, r2
 8006c6e:	7812      	ldrb	r2, [r2, #0]
 8006c70:	701a      	strb	r2, [r3, #0]
            } break;
 8006c72:	e2db      	b.n	800722c <minmea_scan+0x684>

            case 'd': { // Single character direction field (int).
                int value = 0;
 8006c74:	2300      	movs	r3, #0
 8006c76:	2288      	movs	r2, #136	@ 0x88
 8006c78:	18ba      	adds	r2, r7, r2
 8006c7a:	6013      	str	r3, [r2, #0]

                if (field && minmea_isfield(*field)) {
 8006c7c:	2490      	movs	r4, #144	@ 0x90
 8006c7e:	193b      	adds	r3, r7, r4
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d022      	beq.n	8006ccc <minmea_scan+0x124>
 8006c86:	193b      	adds	r3, r7, r4
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	781b      	ldrb	r3, [r3, #0]
 8006c8c:	0018      	movs	r0, r3
 8006c8e:	f7ff ff65 	bl	8006b5c <minmea_isfield>
 8006c92:	1e03      	subs	r3, r0, #0
 8006c94:	d01a      	beq.n	8006ccc <minmea_scan+0x124>
                    switch (*field) {
 8006c96:	193b      	adds	r3, r7, r4
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	2b57      	cmp	r3, #87	@ 0x57
 8006c9e:	d00f      	beq.n	8006cc0 <minmea_scan+0x118>
 8006ca0:	dd00      	ble.n	8006ca4 <minmea_scan+0xfc>
 8006ca2:	e2f0      	b.n	8007286 <minmea_scan+0x6de>
 8006ca4:	2b53      	cmp	r3, #83	@ 0x53
 8006ca6:	d00b      	beq.n	8006cc0 <minmea_scan+0x118>
 8006ca8:	dd00      	ble.n	8006cac <minmea_scan+0x104>
 8006caa:	e2ec      	b.n	8007286 <minmea_scan+0x6de>
 8006cac:	2b45      	cmp	r3, #69	@ 0x45
 8006cae:	d002      	beq.n	8006cb6 <minmea_scan+0x10e>
 8006cb0:	2b4e      	cmp	r3, #78	@ 0x4e
 8006cb2:	d000      	beq.n	8006cb6 <minmea_scan+0x10e>
 8006cb4:	e2e7      	b.n	8007286 <minmea_scan+0x6de>
                        case 'N':
                        case 'E':
                            value = 1;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	2288      	movs	r2, #136	@ 0x88
 8006cba:	18ba      	adds	r2, r7, r2
 8006cbc:	6013      	str	r3, [r2, #0]
                            break;
 8006cbe:	e005      	b.n	8006ccc <minmea_scan+0x124>
                        case 'S':
                        case 'W':
                            value = -1;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	425b      	negs	r3, r3
 8006cc4:	2288      	movs	r2, #136	@ 0x88
 8006cc6:	18ba      	adds	r2, r7, r2
 8006cc8:	6013      	str	r3, [r2, #0]
                            break;
 8006cca:	46c0      	nop			@ (mov r8, r8)
                        default:
                            goto parse_error;
                    }
                }

                *va_arg(ap, int *) = value;
 8006ccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cce:	1d1a      	adds	r2, r3, #4
 8006cd0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	2288      	movs	r2, #136	@ 0x88
 8006cd6:	18ba      	adds	r2, r7, r2
 8006cd8:	6812      	ldr	r2, [r2, #0]
 8006cda:	601a      	str	r2, [r3, #0]
            } break;
 8006cdc:	e2a6      	b.n	800722c <minmea_scan+0x684>

            case 'f': { // Fractional value with scale (struct minmea_float).
                int sign = 0;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	2284      	movs	r2, #132	@ 0x84
 8006ce2:	18ba      	adds	r2, r7, r2
 8006ce4:	6013      	str	r3, [r2, #0]
                int_least32_t value = -1;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	425b      	negs	r3, r3
 8006cea:	2280      	movs	r2, #128	@ 0x80
 8006cec:	18ba      	adds	r2, r7, r2
 8006cee:	6013      	str	r3, [r2, #0]
                int_least32_t scale = 0;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	67fb      	str	r3, [r7, #124]	@ 0x7c

                if (field) {
 8006cf4:	2390      	movs	r3, #144	@ 0x90
 8006cf6:	18fb      	adds	r3, r7, r3
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d100      	bne.n	8006d00 <minmea_scan+0x158>
 8006cfe:	e088      	b.n	8006e12 <minmea_scan+0x26a>
                    while (minmea_isfield(*field)) {
 8006d00:	e07d      	b.n	8006dfe <minmea_scan+0x256>
                        if (*field == '+' && !sign && value == -1) {
 8006d02:	2390      	movs	r3, #144	@ 0x90
 8006d04:	18fb      	adds	r3, r7, r3
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	781b      	ldrb	r3, [r3, #0]
 8006d0a:	2b2b      	cmp	r3, #43	@ 0x2b
 8006d0c:	d10d      	bne.n	8006d2a <minmea_scan+0x182>
 8006d0e:	2284      	movs	r2, #132	@ 0x84
 8006d10:	18bb      	adds	r3, r7, r2
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d108      	bne.n	8006d2a <minmea_scan+0x182>
 8006d18:	2380      	movs	r3, #128	@ 0x80
 8006d1a:	18fb      	adds	r3, r7, r3
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	3301      	adds	r3, #1
 8006d20:	d103      	bne.n	8006d2a <minmea_scan+0x182>
                            sign = 1;
 8006d22:	2301      	movs	r3, #1
 8006d24:	18ba      	adds	r2, r7, r2
 8006d26:	6013      	str	r3, [r2, #0]
 8006d28:	e063      	b.n	8006df2 <minmea_scan+0x24a>
                        } else if (*field == '-' && !sign && value == -1) {
 8006d2a:	2390      	movs	r3, #144	@ 0x90
 8006d2c:	18fb      	adds	r3, r7, r3
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	781b      	ldrb	r3, [r3, #0]
 8006d32:	2b2d      	cmp	r3, #45	@ 0x2d
 8006d34:	d10e      	bne.n	8006d54 <minmea_scan+0x1ac>
 8006d36:	2284      	movs	r2, #132	@ 0x84
 8006d38:	18bb      	adds	r3, r7, r2
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d109      	bne.n	8006d54 <minmea_scan+0x1ac>
 8006d40:	2380      	movs	r3, #128	@ 0x80
 8006d42:	18fb      	adds	r3, r7, r3
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	3301      	adds	r3, #1
 8006d48:	d104      	bne.n	8006d54 <minmea_scan+0x1ac>
                            sign = -1;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	425b      	negs	r3, r3
 8006d4e:	18ba      	adds	r2, r7, r2
 8006d50:	6013      	str	r3, [r2, #0]
 8006d52:	e04e      	b.n	8006df2 <minmea_scan+0x24a>
                        } else if (isdigit((unsigned char) *field)) {
 8006d54:	2190      	movs	r1, #144	@ 0x90
 8006d56:	187b      	adds	r3, r7, r1
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	781b      	ldrb	r3, [r3, #0]
 8006d5c:	1c5a      	adds	r2, r3, #1
 8006d5e:	4b72      	ldr	r3, [pc, #456]	@ (8006f28 <minmea_scan+0x380>)
 8006d60:	18d3      	adds	r3, r2, r3
 8006d62:	781b      	ldrb	r3, [r3, #0]
 8006d64:	001a      	movs	r2, r3
 8006d66:	2304      	movs	r3, #4
 8006d68:	4013      	ands	r3, r2
 8006d6a:	d035      	beq.n	8006dd8 <minmea_scan+0x230>
                            int digit = *field - '0';
 8006d6c:	187b      	adds	r3, r7, r1
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	781b      	ldrb	r3, [r3, #0]
 8006d72:	3b30      	subs	r3, #48	@ 0x30
 8006d74:	63bb      	str	r3, [r7, #56]	@ 0x38
                            if (value == -1)
 8006d76:	2280      	movs	r2, #128	@ 0x80
 8006d78:	18bb      	adds	r3, r7, r2
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	3301      	adds	r3, #1
 8006d7e:	d102      	bne.n	8006d86 <minmea_scan+0x1de>
                                value = 0;
 8006d80:	2300      	movs	r3, #0
 8006d82:	18ba      	adds	r2, r7, r2
 8006d84:	6013      	str	r3, [r2, #0]
                            if (value > (INT_LEAST32_MAX-digit) / 10) {
 8006d86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d88:	4a68      	ldr	r2, [pc, #416]	@ (8006f2c <minmea_scan+0x384>)
 8006d8a:	1ad3      	subs	r3, r2, r3
 8006d8c:	210a      	movs	r1, #10
 8006d8e:	0018      	movs	r0, r3
 8006d90:	f7f9 fa68 	bl	8000264 <__divsi3>
 8006d94:	0003      	movs	r3, r0
 8006d96:	001a      	movs	r2, r3
 8006d98:	2380      	movs	r3, #128	@ 0x80
 8006d9a:	18fb      	adds	r3, r7, r3
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	dd04      	ble.n	8006dac <minmea_scan+0x204>
                                /* we ran out of bits, what do we do? */
                                if (scale) {
 8006da2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d100      	bne.n	8006daa <minmea_scan+0x202>
 8006da8:	e26f      	b.n	800728a <minmea_scan+0x6e2>
                                    /* truncate extra precision */
                                    break;
 8006daa:	e032      	b.n	8006e12 <minmea_scan+0x26a>
                                } else {
                                    /* integer overflow. bail out. */
                                    goto parse_error;
                                }
                            }
                            value = (10 * value) + digit;
 8006dac:	2180      	movs	r1, #128	@ 0x80
 8006dae:	187b      	adds	r3, r7, r1
 8006db0:	681a      	ldr	r2, [r3, #0]
 8006db2:	0013      	movs	r3, r2
 8006db4:	009b      	lsls	r3, r3, #2
 8006db6:	189b      	adds	r3, r3, r2
 8006db8:	005b      	lsls	r3, r3, #1
 8006dba:	001a      	movs	r2, r3
 8006dbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dbe:	189b      	adds	r3, r3, r2
 8006dc0:	187a      	adds	r2, r7, r1
 8006dc2:	6013      	str	r3, [r2, #0]
                            if (scale)
 8006dc4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d013      	beq.n	8006df2 <minmea_scan+0x24a>
                                scale *= 10;
 8006dca:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006dcc:	0013      	movs	r3, r2
 8006dce:	009b      	lsls	r3, r3, #2
 8006dd0:	189b      	adds	r3, r3, r2
 8006dd2:	005b      	lsls	r3, r3, #1
 8006dd4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006dd6:	e00c      	b.n	8006df2 <minmea_scan+0x24a>
                        } else if (*field == '.' && scale == 0) {
 8006dd8:	2390      	movs	r3, #144	@ 0x90
 8006dda:	18fb      	adds	r3, r7, r3
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	781b      	ldrb	r3, [r3, #0]
 8006de0:	2b2e      	cmp	r3, #46	@ 0x2e
 8006de2:	d000      	beq.n	8006de6 <minmea_scan+0x23e>
 8006de4:	e253      	b.n	800728e <minmea_scan+0x6e6>
 8006de6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d000      	beq.n	8006dee <minmea_scan+0x246>
 8006dec:	e24f      	b.n	800728e <minmea_scan+0x6e6>
                            scale = 1;
 8006dee:	2301      	movs	r3, #1
 8006df0:	67fb      	str	r3, [r7, #124]	@ 0x7c
                        } else {
                            goto parse_error;
                        }
                        field++;
 8006df2:	2290      	movs	r2, #144	@ 0x90
 8006df4:	18bb      	adds	r3, r7, r2
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	3301      	adds	r3, #1
 8006dfa:	18ba      	adds	r2, r7, r2
 8006dfc:	6013      	str	r3, [r2, #0]
                    while (minmea_isfield(*field)) {
 8006dfe:	2390      	movs	r3, #144	@ 0x90
 8006e00:	18fb      	adds	r3, r7, r3
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	781b      	ldrb	r3, [r3, #0]
 8006e06:	0018      	movs	r0, r3
 8006e08:	f7ff fea8 	bl	8006b5c <minmea_isfield>
 8006e0c:	1e03      	subs	r3, r0, #0
 8006e0e:	d000      	beq.n	8006e12 <minmea_scan+0x26a>
 8006e10:	e777      	b.n	8006d02 <minmea_scan+0x15a>
                    }
                }

                if ((sign || scale) && value == -1)
 8006e12:	2384      	movs	r3, #132	@ 0x84
 8006e14:	18fb      	adds	r3, r7, r3
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d102      	bne.n	8006e22 <minmea_scan+0x27a>
 8006e1c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d005      	beq.n	8006e2e <minmea_scan+0x286>
 8006e22:	2380      	movs	r3, #128	@ 0x80
 8006e24:	18fb      	adds	r3, r7, r3
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	3301      	adds	r3, #1
 8006e2a:	d100      	bne.n	8006e2e <minmea_scan+0x286>
 8006e2c:	e231      	b.n	8007292 <minmea_scan+0x6ea>
                    goto parse_error;

                if (value == -1) {
 8006e2e:	2280      	movs	r2, #128	@ 0x80
 8006e30:	18bb      	adds	r3, r7, r2
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	3301      	adds	r3, #1
 8006e36:	d105      	bne.n	8006e44 <minmea_scan+0x29c>
                    /* No digits were scanned. */
                    value = 0;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	18ba      	adds	r2, r7, r2
 8006e3c:	6013      	str	r3, [r2, #0]
                    scale = 0;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006e42:	e004      	b.n	8006e4e <minmea_scan+0x2a6>
                } else if (scale == 0) {
 8006e44:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d101      	bne.n	8006e4e <minmea_scan+0x2a6>
                    /* No decimal point. */
                    scale = 1;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	67fb      	str	r3, [r7, #124]	@ 0x7c
                }
                if (sign)
 8006e4e:	2284      	movs	r2, #132	@ 0x84
 8006e50:	18bb      	adds	r3, r7, r2
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d007      	beq.n	8006e68 <minmea_scan+0x2c0>
                    value *= sign;
 8006e58:	2180      	movs	r1, #128	@ 0x80
 8006e5a:	187b      	adds	r3, r7, r1
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	18ba      	adds	r2, r7, r2
 8006e60:	6812      	ldr	r2, [r2, #0]
 8006e62:	4353      	muls	r3, r2
 8006e64:	187a      	adds	r2, r7, r1
 8006e66:	6013      	str	r3, [r2, #0]

                *va_arg(ap, struct minmea_float *) = (struct minmea_float) {value, scale};
 8006e68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e6a:	1d1a      	adds	r2, r3, #4
 8006e6c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	2280      	movs	r2, #128	@ 0x80
 8006e72:	18ba      	adds	r2, r7, r2
 8006e74:	6812      	ldr	r2, [r2, #0]
 8006e76:	601a      	str	r2, [r3, #0]
 8006e78:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006e7a:	605a      	str	r2, [r3, #4]
            } break;
 8006e7c:	e1d6      	b.n	800722c <minmea_scan+0x684>

            case 'i': { // Integer value, default 0 (int).
                int value = 0;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	67bb      	str	r3, [r7, #120]	@ 0x78

                if (field) {
 8006e82:	2290      	movs	r2, #144	@ 0x90
 8006e84:	18bb      	adds	r3, r7, r2
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d011      	beq.n	8006eb0 <minmea_scan+0x308>
                    char *endptr;
                    value = strtol(field, &endptr, 10);
 8006e8c:	2320      	movs	r3, #32
 8006e8e:	18f9      	adds	r1, r7, r3
 8006e90:	18bb      	adds	r3, r7, r2
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	220a      	movs	r2, #10
 8006e96:	0018      	movs	r0, r3
 8006e98:	f007 fca4 	bl	800e7e4 <strtol>
 8006e9c:	0003      	movs	r3, r0
 8006e9e:	67bb      	str	r3, [r7, #120]	@ 0x78
                    if (minmea_isfield(*endptr))
 8006ea0:	6a3b      	ldr	r3, [r7, #32]
 8006ea2:	781b      	ldrb	r3, [r3, #0]
 8006ea4:	0018      	movs	r0, r3
 8006ea6:	f7ff fe59 	bl	8006b5c <minmea_isfield>
 8006eaa:	1e03      	subs	r3, r0, #0
 8006eac:	d000      	beq.n	8006eb0 <minmea_scan+0x308>
 8006eae:	e1f2      	b.n	8007296 <minmea_scan+0x6ee>
                        goto parse_error;
                }

                *va_arg(ap, int *) = value;
 8006eb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006eb2:	1d1a      	adds	r2, r3, #4
 8006eb4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8006eba:	601a      	str	r2, [r3, #0]
            } break;
 8006ebc:	e1b6      	b.n	800722c <minmea_scan+0x684>

            case 's': { // String value (char *).
                char *buf = va_arg(ap, char *);
 8006ebe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ec0:	1d1a      	adds	r2, r3, #4
 8006ec2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	677b      	str	r3, [r7, #116]	@ 0x74

                if (field) {
 8006ec8:	2390      	movs	r3, #144	@ 0x90
 8006eca:	18fb      	adds	r3, r7, r3
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d014      	beq.n	8006efc <minmea_scan+0x354>
                    while (minmea_isfield(*field))
 8006ed2:	e00a      	b.n	8006eea <minmea_scan+0x342>
                        *buf++ = *field++;
 8006ed4:	2190      	movs	r1, #144	@ 0x90
 8006ed6:	187b      	adds	r3, r7, r1
 8006ed8:	681a      	ldr	r2, [r3, #0]
 8006eda:	1c53      	adds	r3, r2, #1
 8006edc:	1879      	adds	r1, r7, r1
 8006ede:	600b      	str	r3, [r1, #0]
 8006ee0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006ee2:	1c59      	adds	r1, r3, #1
 8006ee4:	6779      	str	r1, [r7, #116]	@ 0x74
 8006ee6:	7812      	ldrb	r2, [r2, #0]
 8006ee8:	701a      	strb	r2, [r3, #0]
                    while (minmea_isfield(*field))
 8006eea:	2390      	movs	r3, #144	@ 0x90
 8006eec:	18fb      	adds	r3, r7, r3
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	781b      	ldrb	r3, [r3, #0]
 8006ef2:	0018      	movs	r0, r3
 8006ef4:	f7ff fe32 	bl	8006b5c <minmea_isfield>
 8006ef8:	1e03      	subs	r3, r0, #0
 8006efa:	d1eb      	bne.n	8006ed4 <minmea_scan+0x32c>
                }

                *buf = '\0';
 8006efc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006efe:	2200      	movs	r2, #0
 8006f00:	701a      	strb	r2, [r3, #0]
            } break;
 8006f02:	e193      	b.n	800722c <minmea_scan+0x684>

            case 't': { // NMEA talker+sentence identifier (char *).
                // This field is always mandatory.
                if (!field)
 8006f04:	2290      	movs	r2, #144	@ 0x90
 8006f06:	18bb      	adds	r3, r7, r2
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d100      	bne.n	8006f10 <minmea_scan+0x368>
 8006f0e:	e1c4      	b.n	800729a <minmea_scan+0x6f2>
                    goto parse_error;

                if (field[0] != '$')
 8006f10:	18bb      	adds	r3, r7, r2
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	781b      	ldrb	r3, [r3, #0]
 8006f16:	2b24      	cmp	r3, #36	@ 0x24
 8006f18:	d000      	beq.n	8006f1c <minmea_scan+0x374>
 8006f1a:	e1c0      	b.n	800729e <minmea_scan+0x6f6>
                    goto parse_error;
                for (int i=0; i<5; i++)
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	673b      	str	r3, [r7, #112]	@ 0x70
 8006f20:	e01c      	b.n	8006f5c <minmea_scan+0x3b4>
 8006f22:	46c0      	nop			@ (mov r8, r8)
 8006f24:	08011b68 	.word	0x08011b68
 8006f28:	08011f80 	.word	0x08011f80
 8006f2c:	7fffffff 	.word	0x7fffffff
                    if (!minmea_isfield(field[1+i]))
 8006f30:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006f32:	3301      	adds	r3, #1
 8006f34:	001a      	movs	r2, r3
 8006f36:	2390      	movs	r3, #144	@ 0x90
 8006f38:	18fb      	adds	r3, r7, r3
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	189b      	adds	r3, r3, r2
 8006f3e:	781b      	ldrb	r3, [r3, #0]
 8006f40:	0018      	movs	r0, r3
 8006f42:	f7ff fe0b 	bl	8006b5c <minmea_isfield>
 8006f46:	0003      	movs	r3, r0
 8006f48:	001a      	movs	r2, r3
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	4053      	eors	r3, r2
 8006f4e:	b2db      	uxtb	r3, r3
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d000      	beq.n	8006f56 <minmea_scan+0x3ae>
 8006f54:	e1a5      	b.n	80072a2 <minmea_scan+0x6fa>
                for (int i=0; i<5; i++)
 8006f56:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006f58:	3301      	adds	r3, #1
 8006f5a:	673b      	str	r3, [r7, #112]	@ 0x70
 8006f5c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006f5e:	2b04      	cmp	r3, #4
 8006f60:	dde6      	ble.n	8006f30 <minmea_scan+0x388>
                        goto parse_error;

                char *buf = va_arg(ap, char *);
 8006f62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f64:	1d1a      	adds	r2, r3, #4
 8006f66:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
                memcpy(buf, field+1, 5);
 8006f6c:	2390      	movs	r3, #144	@ 0x90
 8006f6e:	18fb      	adds	r3, r7, r3
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	1c59      	adds	r1, r3, #1
 8006f74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f76:	2205      	movs	r2, #5
 8006f78:	0018      	movs	r0, r3
 8006f7a:	f007 feb6 	bl	800ecea <memcpy>
                buf[5] = '\0';
 8006f7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f80:	3305      	adds	r3, #5
 8006f82:	2200      	movs	r2, #0
 8006f84:	701a      	strb	r2, [r3, #0]
            } break;
 8006f86:	e151      	b.n	800722c <minmea_scan+0x684>

            case 'D': { // Date (int, int, int), -1 if empty.
                struct minmea_date *date = va_arg(ap, struct minmea_date *);
 8006f88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f8a:	1d1a      	adds	r2, r3, #4
 8006f8c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	633b      	str	r3, [r7, #48]	@ 0x30

                int d = -1, m = -1, y = -1;
 8006f92:	2301      	movs	r3, #1
 8006f94:	425b      	negs	r3, r3
 8006f96:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006f98:	2301      	movs	r3, #1
 8006f9a:	425b      	negs	r3, r3
 8006f9c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	425b      	negs	r3, r3
 8006fa2:	667b      	str	r3, [r7, #100]	@ 0x64

                if (field && minmea_isfield(*field)) {
 8006fa4:	2290      	movs	r2, #144	@ 0x90
 8006fa6:	18bb      	adds	r3, r7, r2
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d067      	beq.n	800707e <minmea_scan+0x4d6>
 8006fae:	18bb      	adds	r3, r7, r2
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	781b      	ldrb	r3, [r3, #0]
 8006fb4:	0018      	movs	r0, r3
 8006fb6:	f7ff fdd1 	bl	8006b5c <minmea_isfield>
 8006fba:	1e03      	subs	r3, r0, #0
 8006fbc:	d05f      	beq.n	800707e <minmea_scan+0x4d6>
                    // Always six digits.
                    for (int i=0; i<6; i++)
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	663b      	str	r3, [r7, #96]	@ 0x60
 8006fc2:	e011      	b.n	8006fe8 <minmea_scan+0x440>
                        if (!isdigit((unsigned char) field[i]))
 8006fc4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006fc6:	2290      	movs	r2, #144	@ 0x90
 8006fc8:	18ba      	adds	r2, r7, r2
 8006fca:	6812      	ldr	r2, [r2, #0]
 8006fcc:	18d3      	adds	r3, r2, r3
 8006fce:	781b      	ldrb	r3, [r3, #0]
 8006fd0:	1c5a      	adds	r2, r3, #1
 8006fd2:	4bbb      	ldr	r3, [pc, #748]	@ (80072c0 <minmea_scan+0x718>)
 8006fd4:	18d3      	adds	r3, r2, r3
 8006fd6:	781b      	ldrb	r3, [r3, #0]
 8006fd8:	001a      	movs	r2, r3
 8006fda:	2304      	movs	r3, #4
 8006fdc:	4013      	ands	r3, r2
 8006fde:	d100      	bne.n	8006fe2 <minmea_scan+0x43a>
 8006fe0:	e161      	b.n	80072a6 <minmea_scan+0x6fe>
                    for (int i=0; i<6; i++)
 8006fe2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006fe4:	3301      	adds	r3, #1
 8006fe6:	663b      	str	r3, [r7, #96]	@ 0x60
 8006fe8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006fea:	2b05      	cmp	r3, #5
 8006fec:	ddea      	ble.n	8006fc4 <minmea_scan+0x41c>
                            goto parse_error;

                    d = strtol((char[]) {field[0], field[1], '\0'}, NULL, 10);
 8006fee:	2490      	movs	r4, #144	@ 0x90
 8006ff0:	193b      	adds	r3, r7, r4
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	781a      	ldrb	r2, [r3, #0]
 8006ff6:	211c      	movs	r1, #28
 8006ff8:	187b      	adds	r3, r7, r1
 8006ffa:	701a      	strb	r2, [r3, #0]
 8006ffc:	193b      	adds	r3, r7, r4
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	3301      	adds	r3, #1
 8007002:	781a      	ldrb	r2, [r3, #0]
 8007004:	187b      	adds	r3, r7, r1
 8007006:	705a      	strb	r2, [r3, #1]
 8007008:	187b      	adds	r3, r7, r1
 800700a:	2200      	movs	r2, #0
 800700c:	709a      	strb	r2, [r3, #2]
 800700e:	187b      	adds	r3, r7, r1
 8007010:	220a      	movs	r2, #10
 8007012:	2100      	movs	r1, #0
 8007014:	0018      	movs	r0, r3
 8007016:	f007 fbe5 	bl	800e7e4 <strtol>
 800701a:	0003      	movs	r3, r0
 800701c:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    m = strtol((char[]) {field[2], field[3], '\0'}, NULL, 10);
 800701e:	193b      	adds	r3, r7, r4
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	3302      	adds	r3, #2
 8007024:	781a      	ldrb	r2, [r3, #0]
 8007026:	2118      	movs	r1, #24
 8007028:	187b      	adds	r3, r7, r1
 800702a:	701a      	strb	r2, [r3, #0]
 800702c:	193b      	adds	r3, r7, r4
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	3303      	adds	r3, #3
 8007032:	781a      	ldrb	r2, [r3, #0]
 8007034:	187b      	adds	r3, r7, r1
 8007036:	705a      	strb	r2, [r3, #1]
 8007038:	187b      	adds	r3, r7, r1
 800703a:	2200      	movs	r2, #0
 800703c:	709a      	strb	r2, [r3, #2]
 800703e:	187b      	adds	r3, r7, r1
 8007040:	220a      	movs	r2, #10
 8007042:	2100      	movs	r1, #0
 8007044:	0018      	movs	r0, r3
 8007046:	f007 fbcd 	bl	800e7e4 <strtol>
 800704a:	0003      	movs	r3, r0
 800704c:	66bb      	str	r3, [r7, #104]	@ 0x68
                    y = strtol((char[]) {field[4], field[5], '\0'}, NULL, 10);
 800704e:	193b      	adds	r3, r7, r4
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	3304      	adds	r3, #4
 8007054:	781a      	ldrb	r2, [r3, #0]
 8007056:	2114      	movs	r1, #20
 8007058:	187b      	adds	r3, r7, r1
 800705a:	701a      	strb	r2, [r3, #0]
 800705c:	193b      	adds	r3, r7, r4
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	3305      	adds	r3, #5
 8007062:	781a      	ldrb	r2, [r3, #0]
 8007064:	187b      	adds	r3, r7, r1
 8007066:	705a      	strb	r2, [r3, #1]
 8007068:	187b      	adds	r3, r7, r1
 800706a:	2200      	movs	r2, #0
 800706c:	709a      	strb	r2, [r3, #2]
 800706e:	187b      	adds	r3, r7, r1
 8007070:	220a      	movs	r2, #10
 8007072:	2100      	movs	r1, #0
 8007074:	0018      	movs	r0, r3
 8007076:	f007 fbb5 	bl	800e7e4 <strtol>
 800707a:	0003      	movs	r3, r0
 800707c:	667b      	str	r3, [r7, #100]	@ 0x64
                }

                date->day = d;
 800707e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007080:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007082:	601a      	str	r2, [r3, #0]
                date->month = m;
 8007084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007086:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007088:	605a      	str	r2, [r3, #4]
                date->year = y;
 800708a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800708c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800708e:	609a      	str	r2, [r3, #8]
            } break;
 8007090:	e0cc      	b.n	800722c <minmea_scan+0x684>

            case 'T': { // Time (int, int, int, int), -1 if empty.
                struct minmea_time *time = va_arg(ap, struct minmea_time *);
 8007092:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007094:	1d1a      	adds	r2, r3, #4
 8007096:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	637b      	str	r3, [r7, #52]	@ 0x34

                int h = -1, i = -1, s = -1, u = -1;
 800709c:	2301      	movs	r3, #1
 800709e:	425b      	negs	r3, r3
 80070a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80070a2:	2301      	movs	r3, #1
 80070a4:	425b      	negs	r3, r3
 80070a6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80070a8:	2301      	movs	r3, #1
 80070aa:	425b      	negs	r3, r3
 80070ac:	657b      	str	r3, [r7, #84]	@ 0x54
 80070ae:	2301      	movs	r3, #1
 80070b0:	425b      	negs	r3, r3
 80070b2:	653b      	str	r3, [r7, #80]	@ 0x50

                if (field && minmea_isfield(*field)) {
 80070b4:	2290      	movs	r2, #144	@ 0x90
 80070b6:	18bb      	adds	r3, r7, r2
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d100      	bne.n	80070c0 <minmea_scan+0x518>
 80070be:	e0a7      	b.n	8007210 <minmea_scan+0x668>
 80070c0:	18bb      	adds	r3, r7, r2
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	781b      	ldrb	r3, [r3, #0]
 80070c6:	0018      	movs	r0, r3
 80070c8:	f7ff fd48 	bl	8006b5c <minmea_isfield>
 80070cc:	1e03      	subs	r3, r0, #0
 80070ce:	d100      	bne.n	80070d2 <minmea_scan+0x52a>
 80070d0:	e09e      	b.n	8007210 <minmea_scan+0x668>
                    // Minimum required: integer time.
                    for (int i=0; i<6; i++)
 80070d2:	2300      	movs	r3, #0
 80070d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80070d6:	e011      	b.n	80070fc <minmea_scan+0x554>
                        if (!isdigit((unsigned char) field[i]))
 80070d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80070da:	2290      	movs	r2, #144	@ 0x90
 80070dc:	18ba      	adds	r2, r7, r2
 80070de:	6812      	ldr	r2, [r2, #0]
 80070e0:	18d3      	adds	r3, r2, r3
 80070e2:	781b      	ldrb	r3, [r3, #0]
 80070e4:	1c5a      	adds	r2, r3, #1
 80070e6:	4b76      	ldr	r3, [pc, #472]	@ (80072c0 <minmea_scan+0x718>)
 80070e8:	18d3      	adds	r3, r2, r3
 80070ea:	781b      	ldrb	r3, [r3, #0]
 80070ec:	001a      	movs	r2, r3
 80070ee:	2304      	movs	r3, #4
 80070f0:	4013      	ands	r3, r2
 80070f2:	d100      	bne.n	80070f6 <minmea_scan+0x54e>
 80070f4:	e0d9      	b.n	80072aa <minmea_scan+0x702>
                    for (int i=0; i<6; i++)
 80070f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80070f8:	3301      	adds	r3, #1
 80070fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80070fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80070fe:	2b05      	cmp	r3, #5
 8007100:	ddea      	ble.n	80070d8 <minmea_scan+0x530>
                            goto parse_error;

                    h = strtol((char[]) {field[0], field[1], '\0'}, NULL, 10);
 8007102:	2490      	movs	r4, #144	@ 0x90
 8007104:	193b      	adds	r3, r7, r4
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	781a      	ldrb	r2, [r3, #0]
 800710a:	2110      	movs	r1, #16
 800710c:	187b      	adds	r3, r7, r1
 800710e:	701a      	strb	r2, [r3, #0]
 8007110:	193b      	adds	r3, r7, r4
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	3301      	adds	r3, #1
 8007116:	781a      	ldrb	r2, [r3, #0]
 8007118:	187b      	adds	r3, r7, r1
 800711a:	705a      	strb	r2, [r3, #1]
 800711c:	187b      	adds	r3, r7, r1
 800711e:	2200      	movs	r2, #0
 8007120:	709a      	strb	r2, [r3, #2]
 8007122:	187b      	adds	r3, r7, r1
 8007124:	220a      	movs	r2, #10
 8007126:	2100      	movs	r1, #0
 8007128:	0018      	movs	r0, r3
 800712a:	f007 fb5b 	bl	800e7e4 <strtol>
 800712e:	0003      	movs	r3, r0
 8007130:	65fb      	str	r3, [r7, #92]	@ 0x5c
                    i = strtol((char[]) {field[2], field[3], '\0'}, NULL, 10);
 8007132:	193b      	adds	r3, r7, r4
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	3302      	adds	r3, #2
 8007138:	781a      	ldrb	r2, [r3, #0]
 800713a:	210c      	movs	r1, #12
 800713c:	187b      	adds	r3, r7, r1
 800713e:	701a      	strb	r2, [r3, #0]
 8007140:	193b      	adds	r3, r7, r4
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	3303      	adds	r3, #3
 8007146:	781a      	ldrb	r2, [r3, #0]
 8007148:	187b      	adds	r3, r7, r1
 800714a:	705a      	strb	r2, [r3, #1]
 800714c:	187b      	adds	r3, r7, r1
 800714e:	2200      	movs	r2, #0
 8007150:	709a      	strb	r2, [r3, #2]
 8007152:	187b      	adds	r3, r7, r1
 8007154:	220a      	movs	r2, #10
 8007156:	2100      	movs	r1, #0
 8007158:	0018      	movs	r0, r3
 800715a:	f007 fb43 	bl	800e7e4 <strtol>
 800715e:	0003      	movs	r3, r0
 8007160:	65bb      	str	r3, [r7, #88]	@ 0x58
                    s = strtol((char[]) {field[4], field[5], '\0'}, NULL, 10);
 8007162:	193b      	adds	r3, r7, r4
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	3304      	adds	r3, #4
 8007168:	781a      	ldrb	r2, [r3, #0]
 800716a:	2108      	movs	r1, #8
 800716c:	187b      	adds	r3, r7, r1
 800716e:	701a      	strb	r2, [r3, #0]
 8007170:	193b      	adds	r3, r7, r4
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	3305      	adds	r3, #5
 8007176:	781a      	ldrb	r2, [r3, #0]
 8007178:	187b      	adds	r3, r7, r1
 800717a:	705a      	strb	r2, [r3, #1]
 800717c:	187b      	adds	r3, r7, r1
 800717e:	2200      	movs	r2, #0
 8007180:	709a      	strb	r2, [r3, #2]
 8007182:	187b      	adds	r3, r7, r1
 8007184:	220a      	movs	r2, #10
 8007186:	2100      	movs	r1, #0
 8007188:	0018      	movs	r0, r3
 800718a:	f007 fb2b 	bl	800e7e4 <strtol>
 800718e:	0003      	movs	r3, r0
 8007190:	657b      	str	r3, [r7, #84]	@ 0x54
                    field += 6;
 8007192:	193b      	adds	r3, r7, r4
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	3306      	adds	r3, #6
 8007198:	193a      	adds	r2, r7, r4
 800719a:	6013      	str	r3, [r2, #0]

                    // Extra: fractional time. Saved as microseconds.
                    if (*field++ == '.') {
 800719c:	193b      	adds	r3, r7, r4
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	1c5a      	adds	r2, r3, #1
 80071a2:	1939      	adds	r1, r7, r4
 80071a4:	600a      	str	r2, [r1, #0]
 80071a6:	781b      	ldrb	r3, [r3, #0]
 80071a8:	2b2e      	cmp	r3, #46	@ 0x2e
 80071aa:	d12f      	bne.n	800720c <minmea_scan+0x664>
                        int value = 0;
 80071ac:	2300      	movs	r3, #0
 80071ae:	64bb      	str	r3, [r7, #72]	@ 0x48
                        int scale = 1000000;
 80071b0:	4b44      	ldr	r3, [pc, #272]	@ (80072c4 <minmea_scan+0x71c>)
 80071b2:	647b      	str	r3, [r7, #68]	@ 0x44
                        while (isdigit((unsigned char) *field) && scale > 1) {
 80071b4:	e016      	b.n	80071e4 <minmea_scan+0x63c>
                            value = (value * 10) + (*field++ - '0');
 80071b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80071b8:	0013      	movs	r3, r2
 80071ba:	009b      	lsls	r3, r3, #2
 80071bc:	189b      	adds	r3, r3, r2
 80071be:	005b      	lsls	r3, r3, #1
 80071c0:	0019      	movs	r1, r3
 80071c2:	2090      	movs	r0, #144	@ 0x90
 80071c4:	183b      	adds	r3, r7, r0
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	1c5a      	adds	r2, r3, #1
 80071ca:	1838      	adds	r0, r7, r0
 80071cc:	6002      	str	r2, [r0, #0]
 80071ce:	781b      	ldrb	r3, [r3, #0]
 80071d0:	3b30      	subs	r3, #48	@ 0x30
 80071d2:	18cb      	adds	r3, r1, r3
 80071d4:	64bb      	str	r3, [r7, #72]	@ 0x48
                            scale /= 10;
 80071d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80071d8:	210a      	movs	r1, #10
 80071da:	0018      	movs	r0, r3
 80071dc:	f7f9 f842 	bl	8000264 <__divsi3>
 80071e0:	0003      	movs	r3, r0
 80071e2:	647b      	str	r3, [r7, #68]	@ 0x44
                        while (isdigit((unsigned char) *field) && scale > 1) {
 80071e4:	2390      	movs	r3, #144	@ 0x90
 80071e6:	18fb      	adds	r3, r7, r3
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	781b      	ldrb	r3, [r3, #0]
 80071ec:	1c5a      	adds	r2, r3, #1
 80071ee:	4b34      	ldr	r3, [pc, #208]	@ (80072c0 <minmea_scan+0x718>)
 80071f0:	18d3      	adds	r3, r2, r3
 80071f2:	781b      	ldrb	r3, [r3, #0]
 80071f4:	001a      	movs	r2, r3
 80071f6:	2304      	movs	r3, #4
 80071f8:	4013      	ands	r3, r2
 80071fa:	d002      	beq.n	8007202 <minmea_scan+0x65a>
 80071fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80071fe:	2b01      	cmp	r3, #1
 8007200:	dcd9      	bgt.n	80071b6 <minmea_scan+0x60e>
                        }
                        u = value * scale;
 8007202:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007204:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007206:	4353      	muls	r3, r2
 8007208:	653b      	str	r3, [r7, #80]	@ 0x50
 800720a:	e001      	b.n	8007210 <minmea_scan+0x668>
                    } else {
                        u = 0;
 800720c:	2300      	movs	r3, #0
 800720e:	653b      	str	r3, [r7, #80]	@ 0x50
                    }
                }

                time->hours = h;
 8007210:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007212:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007214:	601a      	str	r2, [r3, #0]
                time->minutes = i;
 8007216:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007218:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800721a:	605a      	str	r2, [r3, #4]
                time->seconds = s;
 800721c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800721e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007220:	609a      	str	r2, [r3, #8]
                time->microseconds = u;
 8007222:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007224:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007226:	60da      	str	r2, [r3, #12]
            } break;
 8007228:	e000      	b.n	800722c <minmea_scan+0x684>

            case '_': { // Ignore the field.
            } break;
 800722a:	46c0      	nop			@ (mov r8, r8)
            default: { // Unknown.
                goto parse_error;
            } break;
        }

        next_field();
 800722c:	e002      	b.n	8007234 <minmea_scan+0x68c>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	3301      	adds	r3, #1
 8007232:	607b      	str	r3, [r7, #4]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	781b      	ldrb	r3, [r3, #0]
 8007238:	0018      	movs	r0, r3
 800723a:	f7ff fc8f 	bl	8006b5c <minmea_isfield>
 800723e:	1e03      	subs	r3, r0, #0
 8007240:	d1f5      	bne.n	800722e <minmea_scan+0x686>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	781b      	ldrb	r3, [r3, #0]
 8007246:	2b2c      	cmp	r3, #44	@ 0x2c
 8007248:	d107      	bne.n	800725a <minmea_scan+0x6b2>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	3301      	adds	r3, #1
 800724e:	607b      	str	r3, [r7, #4]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2290      	movs	r2, #144	@ 0x90
 8007254:	18ba      	adds	r2, r7, r2
 8007256:	6013      	str	r3, [r2, #0]
 8007258:	e003      	b.n	8007262 <minmea_scan+0x6ba>
 800725a:	2300      	movs	r3, #0
 800725c:	2290      	movs	r2, #144	@ 0x90
 800725e:	18ba      	adds	r2, r7, r2
 8007260:	6013      	str	r3, [r2, #0]
    while (*format) {
 8007262:	23a4      	movs	r3, #164	@ 0xa4
 8007264:	2208      	movs	r2, #8
 8007266:	189b      	adds	r3, r3, r2
 8007268:	19db      	adds	r3, r3, r7
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	781b      	ldrb	r3, [r3, #0]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d000      	beq.n	8007274 <minmea_scan+0x6cc>
 8007272:	e4b0      	b.n	8006bd6 <minmea_scan+0x2e>
    }

    result = true;
 8007274:	2397      	movs	r3, #151	@ 0x97
 8007276:	18fb      	adds	r3, r7, r3
 8007278:	2201      	movs	r2, #1
 800727a:	701a      	strb	r2, [r3, #0]
 800727c:	e016      	b.n	80072ac <minmea_scan+0x704>
            goto parse_error;
 800727e:	46c0      	nop			@ (mov r8, r8)
 8007280:	e014      	b.n	80072ac <minmea_scan+0x704>
                goto parse_error;
 8007282:	46c0      	nop			@ (mov r8, r8)
 8007284:	e012      	b.n	80072ac <minmea_scan+0x704>
                            goto parse_error;
 8007286:	46c0      	nop			@ (mov r8, r8)
 8007288:	e010      	b.n	80072ac <minmea_scan+0x704>
                                    goto parse_error;
 800728a:	46c0      	nop			@ (mov r8, r8)
 800728c:	e00e      	b.n	80072ac <minmea_scan+0x704>
                            goto parse_error;
 800728e:	46c0      	nop			@ (mov r8, r8)
 8007290:	e00c      	b.n	80072ac <minmea_scan+0x704>
                    goto parse_error;
 8007292:	46c0      	nop			@ (mov r8, r8)
 8007294:	e00a      	b.n	80072ac <minmea_scan+0x704>
                        goto parse_error;
 8007296:	46c0      	nop			@ (mov r8, r8)
 8007298:	e008      	b.n	80072ac <minmea_scan+0x704>
                    goto parse_error;
 800729a:	46c0      	nop			@ (mov r8, r8)
 800729c:	e006      	b.n	80072ac <minmea_scan+0x704>
                    goto parse_error;
 800729e:	46c0      	nop			@ (mov r8, r8)
 80072a0:	e004      	b.n	80072ac <minmea_scan+0x704>
                        goto parse_error;
 80072a2:	46c0      	nop			@ (mov r8, r8)
 80072a4:	e002      	b.n	80072ac <minmea_scan+0x704>
                            goto parse_error;
 80072a6:	46c0      	nop			@ (mov r8, r8)
 80072a8:	e000      	b.n	80072ac <minmea_scan+0x704>
                            goto parse_error;
 80072aa:	46c0      	nop			@ (mov r8, r8)

parse_error:
    va_end(ap);
    return result;
 80072ac:	2397      	movs	r3, #151	@ 0x97
 80072ae:	18fb      	adds	r3, r7, r3
 80072b0:	781b      	ldrb	r3, [r3, #0]
}
 80072b2:	0018      	movs	r0, r3
 80072b4:	46bd      	mov	sp, r7
 80072b6:	b027      	add	sp, #156	@ 0x9c
 80072b8:	bcb0      	pop	{r4, r5, r7}
 80072ba:	bc08      	pop	{r3}
 80072bc:	b003      	add	sp, #12
 80072be:	4718      	bx	r3
 80072c0:	08011f80 	.word	0x08011f80
 80072c4:	000f4240 	.word	0x000f4240

080072c8 <minmea_parse_gga>:

    return true;
}

bool minmea_parse_gga(struct minmea_sentence_gga *frame, const char *sentence)
{
 80072c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072ca:	46de      	mov	lr, fp
 80072cc:	4657      	mov	r7, sl
 80072ce:	464e      	mov	r6, r9
 80072d0:	4645      	mov	r5, r8
 80072d2:	b5e0      	push	{r5, r6, r7, lr}
 80072d4:	b097      	sub	sp, #92	@ 0x5c
 80072d6:	af0c      	add	r7, sp, #48	@ 0x30
 80072d8:	6178      	str	r0, [r7, #20]
 80072da:	6139      	str	r1, [r7, #16]
    // $GPGGA,123519,4807.038,N,01131.000,E,1,08,0.9,545.4,M,46.9,M,,*47
    char type[6];
    int latitude_direction;
    int longitude_direction;

    if (!minmea_scan(sentence, "tTfdfdiiffcfci_",
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	60fb      	str	r3, [r7, #12]
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	001a      	movs	r2, r3
 80072e4:	3210      	adds	r2, #16
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	0019      	movs	r1, r3
 80072ea:	3118      	adds	r1, #24
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	001c      	movs	r4, r3
 80072f0:	3420      	adds	r4, #32
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	001d      	movs	r5, r3
 80072f6:	3524      	adds	r5, #36	@ 0x24
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	001e      	movs	r6, r3
 80072fc:	3628      	adds	r6, #40	@ 0x28
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	2030      	movs	r0, #48	@ 0x30
 8007302:	4684      	mov	ip, r0
 8007304:	449c      	add	ip, r3
 8007306:	4663      	mov	r3, ip
 8007308:	607b      	str	r3, [r7, #4]
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	2038      	movs	r0, #56	@ 0x38
 800730e:	4680      	mov	r8, r0
 8007310:	4498      	add	r8, r3
 8007312:	4643      	mov	r3, r8
 8007314:	603b      	str	r3, [r7, #0]
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	203c      	movs	r0, #60	@ 0x3c
 800731a:	4681      	mov	r9, r0
 800731c:	4499      	add	r9, r3
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	2044      	movs	r0, #68	@ 0x44
 8007322:	4682      	mov	sl, r0
 8007324:	449a      	add	sl, r3
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	3348      	adds	r3, #72	@ 0x48
 800732a:	2010      	movs	r0, #16
 800732c:	4683      	mov	fp, r0
 800732e:	2008      	movs	r0, #8
 8007330:	4684      	mov	ip, r0
 8007332:	2008      	movs	r0, #8
 8007334:	4680      	mov	r8, r0
 8007336:	44b8      	add	r8, r7
 8007338:	44c4      	add	ip, r8
 800733a:	44e3      	add	fp, ip
 800733c:	4658      	mov	r0, fp
 800733e:	60b8      	str	r0, [r7, #8]
 8007340:	482a      	ldr	r0, [pc, #168]	@ (80073ec <minmea_parse_gga+0x124>)
 8007342:	4683      	mov	fp, r0
 8007344:	6938      	ldr	r0, [r7, #16]
 8007346:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007348:	4653      	mov	r3, sl
 800734a:	930a      	str	r3, [sp, #40]	@ 0x28
 800734c:	464b      	mov	r3, r9
 800734e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	9308      	str	r3, [sp, #32]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	9307      	str	r3, [sp, #28]
 8007358:	9606      	str	r6, [sp, #24]
 800735a:	9505      	str	r5, [sp, #20]
 800735c:	9404      	str	r4, [sp, #16]
 800735e:	2408      	movs	r4, #8
 8007360:	2508      	movs	r5, #8
 8007362:	1963      	adds	r3, r4, r5
 8007364:	2408      	movs	r4, #8
 8007366:	46a4      	mov	ip, r4
 8007368:	44bc      	add	ip, r7
 800736a:	4463      	add	r3, ip
 800736c:	9303      	str	r3, [sp, #12]
 800736e:	9102      	str	r1, [sp, #8]
 8007370:	210c      	movs	r1, #12
 8007372:	194b      	adds	r3, r1, r5
 8007374:	2108      	movs	r1, #8
 8007376:	468c      	mov	ip, r1
 8007378:	44bc      	add	ip, r7
 800737a:	4463      	add	r3, ip
 800737c:	9301      	str	r3, [sp, #4]
 800737e:	9200      	str	r2, [sp, #0]
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	68ba      	ldr	r2, [r7, #8]
 8007384:	4659      	mov	r1, fp
 8007386:	f7ff fc0f 	bl	8006ba8 <minmea_scan>
 800738a:	0003      	movs	r3, r0
 800738c:	001a      	movs	r2, r3
 800738e:	2301      	movs	r3, #1
 8007390:	4053      	eors	r3, r2
 8007392:	b2db      	uxtb	r3, r3
 8007394:	2b00      	cmp	r3, #0
 8007396:	d001      	beq.n	800739c <minmea_parse_gga+0xd4>
            &frame->satellites_tracked,
            &frame->hdop,
            &frame->altitude, &frame->altitude_units,
            &frame->height, &frame->height_units,
            &frame->dgps_age))
        return false;
 8007398:	2300      	movs	r3, #0
 800739a:	e01d      	b.n	80073d8 <minmea_parse_gga+0x110>
    if (strcmp(type+2, "GGA"))
 800739c:	2310      	movs	r3, #16
 800739e:	2208      	movs	r2, #8
 80073a0:	189b      	adds	r3, r3, r2
 80073a2:	2208      	movs	r2, #8
 80073a4:	4694      	mov	ip, r2
 80073a6:	44bc      	add	ip, r7
 80073a8:	4463      	add	r3, ip
 80073aa:	3302      	adds	r3, #2
 80073ac:	4a10      	ldr	r2, [pc, #64]	@ (80073f0 <minmea_parse_gga+0x128>)
 80073ae:	0011      	movs	r1, r2
 80073b0:	0018      	movs	r0, r3
 80073b2:	f7f8 fea7 	bl	8000104 <strcmp>
 80073b6:	1e03      	subs	r3, r0, #0
 80073b8:	d001      	beq.n	80073be <minmea_parse_gga+0xf6>
        return false;
 80073ba:	2300      	movs	r3, #0
 80073bc:	e00c      	b.n	80073d8 <minmea_parse_gga+0x110>

    frame->latitude.value *= latitude_direction;
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	691b      	ldr	r3, [r3, #16]
 80073c2:	69fa      	ldr	r2, [r7, #28]
 80073c4:	435a      	muls	r2, r3
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	611a      	str	r2, [r3, #16]
    frame->longitude.value *= longitude_direction;
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	699b      	ldr	r3, [r3, #24]
 80073ce:	69ba      	ldr	r2, [r7, #24]
 80073d0:	435a      	muls	r2, r3
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	619a      	str	r2, [r3, #24]

    return true;
 80073d6:	2301      	movs	r3, #1
}
 80073d8:	0018      	movs	r0, r3
 80073da:	46bd      	mov	sp, r7
 80073dc:	b00b      	add	sp, #44	@ 0x2c
 80073de:	bcf0      	pop	{r4, r5, r6, r7}
 80073e0:	46bb      	mov	fp, r7
 80073e2:	46b2      	mov	sl, r6
 80073e4:	46a9      	mov	r9, r5
 80073e6:	46a0      	mov	r8, r4
 80073e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073ea:	46c0      	nop			@ (mov r8, r8)
 80073ec:	080114b4 	.word	0x080114b4
 80073f0:	08011494 	.word	0x08011494

080073f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b082      	sub	sp, #8
 80073f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80073fa:	4b11      	ldr	r3, [pc, #68]	@ (8007440 <HAL_MspInit+0x4c>)
 80073fc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80073fe:	4b10      	ldr	r3, [pc, #64]	@ (8007440 <HAL_MspInit+0x4c>)
 8007400:	2101      	movs	r1, #1
 8007402:	430a      	orrs	r2, r1
 8007404:	641a      	str	r2, [r3, #64]	@ 0x40
 8007406:	4b0e      	ldr	r3, [pc, #56]	@ (8007440 <HAL_MspInit+0x4c>)
 8007408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800740a:	2201      	movs	r2, #1
 800740c:	4013      	ands	r3, r2
 800740e:	607b      	str	r3, [r7, #4]
 8007410:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007412:	4b0b      	ldr	r3, [pc, #44]	@ (8007440 <HAL_MspInit+0x4c>)
 8007414:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007416:	4b0a      	ldr	r3, [pc, #40]	@ (8007440 <HAL_MspInit+0x4c>)
 8007418:	2180      	movs	r1, #128	@ 0x80
 800741a:	0549      	lsls	r1, r1, #21
 800741c:	430a      	orrs	r2, r1
 800741e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007420:	4b07      	ldr	r3, [pc, #28]	@ (8007440 <HAL_MspInit+0x4c>)
 8007422:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007424:	2380      	movs	r3, #128	@ 0x80
 8007426:	055b      	lsls	r3, r3, #21
 8007428:	4013      	ands	r3, r2
 800742a:	603b      	str	r3, [r7, #0]
 800742c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 800742e:	23c0      	movs	r3, #192	@ 0xc0
 8007430:	00db      	lsls	r3, r3, #3
 8007432:	0018      	movs	r0, r3
 8007434:	f001 f948 	bl	80086c8 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007438:	46c0      	nop			@ (mov r8, r8)
 800743a:	46bd      	mov	sp, r7
 800743c:	b002      	add	sp, #8
 800743e:	bd80      	pop	{r7, pc}
 8007440:	40021000 	.word	0x40021000

08007444 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007444:	b590      	push	{r4, r7, lr}
 8007446:	b09d      	sub	sp, #116	@ 0x74
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800744c:	235c      	movs	r3, #92	@ 0x5c
 800744e:	18fb      	adds	r3, r7, r3
 8007450:	0018      	movs	r0, r3
 8007452:	2314      	movs	r3, #20
 8007454:	001a      	movs	r2, r3
 8007456:	2100      	movs	r1, #0
 8007458:	f007 fbb2 	bl	800ebc0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800745c:	2410      	movs	r4, #16
 800745e:	193b      	adds	r3, r7, r4
 8007460:	0018      	movs	r0, r3
 8007462:	234c      	movs	r3, #76	@ 0x4c
 8007464:	001a      	movs	r2, r3
 8007466:	2100      	movs	r1, #0
 8007468:	f007 fbaa 	bl	800ebc0 <memset>
  if(hi2c->Instance==I2C1)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a23      	ldr	r2, [pc, #140]	@ (8007500 <HAL_I2C_MspInit+0xbc>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d13f      	bne.n	80074f6 <HAL_I2C_MspInit+0xb2>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8007476:	193b      	adds	r3, r7, r4
 8007478:	2220      	movs	r2, #32
 800747a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800747c:	193b      	adds	r3, r7, r4
 800747e:	2200      	movs	r2, #0
 8007480:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007482:	193b      	adds	r3, r7, r4
 8007484:	0018      	movs	r0, r3
 8007486:	f002 ff87 	bl	800a398 <HAL_RCCEx_PeriphCLKConfig>
 800748a:	1e03      	subs	r3, r0, #0
 800748c:	d001      	beq.n	8007492 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800748e:	f7ff fb5f 	bl	8006b50 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007492:	4b1c      	ldr	r3, [pc, #112]	@ (8007504 <HAL_I2C_MspInit+0xc0>)
 8007494:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007496:	4b1b      	ldr	r3, [pc, #108]	@ (8007504 <HAL_I2C_MspInit+0xc0>)
 8007498:	2101      	movs	r1, #1
 800749a:	430a      	orrs	r2, r1
 800749c:	635a      	str	r2, [r3, #52]	@ 0x34
 800749e:	4b19      	ldr	r3, [pc, #100]	@ (8007504 <HAL_I2C_MspInit+0xc0>)
 80074a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074a2:	2201      	movs	r2, #1
 80074a4:	4013      	ands	r3, r2
 80074a6:	60fb      	str	r3, [r7, #12]
 80074a8:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80074aa:	215c      	movs	r1, #92	@ 0x5c
 80074ac:	187b      	adds	r3, r7, r1
 80074ae:	22c0      	movs	r2, #192	@ 0xc0
 80074b0:	00d2      	lsls	r2, r2, #3
 80074b2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80074b4:	187b      	adds	r3, r7, r1
 80074b6:	2212      	movs	r2, #18
 80074b8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074ba:	187b      	adds	r3, r7, r1
 80074bc:	2200      	movs	r2, #0
 80074be:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80074c0:	187b      	adds	r3, r7, r1
 80074c2:	2200      	movs	r2, #0
 80074c4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80074c6:	187b      	adds	r3, r7, r1
 80074c8:	2206      	movs	r2, #6
 80074ca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80074cc:	187a      	adds	r2, r7, r1
 80074ce:	23a0      	movs	r3, #160	@ 0xa0
 80074d0:	05db      	lsls	r3, r3, #23
 80074d2:	0011      	movs	r1, r2
 80074d4:	0018      	movs	r0, r3
 80074d6:	f001 f9eb 	bl	80088b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80074da:	4b0a      	ldr	r3, [pc, #40]	@ (8007504 <HAL_I2C_MspInit+0xc0>)
 80074dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80074de:	4b09      	ldr	r3, [pc, #36]	@ (8007504 <HAL_I2C_MspInit+0xc0>)
 80074e0:	2180      	movs	r1, #128	@ 0x80
 80074e2:	0389      	lsls	r1, r1, #14
 80074e4:	430a      	orrs	r2, r1
 80074e6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80074e8:	4b06      	ldr	r3, [pc, #24]	@ (8007504 <HAL_I2C_MspInit+0xc0>)
 80074ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80074ec:	2380      	movs	r3, #128	@ 0x80
 80074ee:	039b      	lsls	r3, r3, #14
 80074f0:	4013      	ands	r3, r2
 80074f2:	60bb      	str	r3, [r7, #8]
 80074f4:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80074f6:	46c0      	nop			@ (mov r8, r8)
 80074f8:	46bd      	mov	sp, r7
 80074fa:	b01d      	add	sp, #116	@ 0x74
 80074fc:	bd90      	pop	{r4, r7, pc}
 80074fe:	46c0      	nop			@ (mov r8, r8)
 8007500:	40005400 	.word	0x40005400
 8007504:	40021000 	.word	0x40021000

08007508 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8007508:	b590      	push	{r4, r7, lr}
 800750a:	b097      	sub	sp, #92	@ 0x5c
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007510:	240c      	movs	r4, #12
 8007512:	193b      	adds	r3, r7, r4
 8007514:	0018      	movs	r0, r3
 8007516:	234c      	movs	r3, #76	@ 0x4c
 8007518:	001a      	movs	r2, r3
 800751a:	2100      	movs	r1, #0
 800751c:	f007 fb50 	bl	800ebc0 <memset>
  if(hrtc->Instance==RTC)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4a19      	ldr	r2, [pc, #100]	@ (800758c <HAL_RTC_MspInit+0x84>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d12c      	bne.n	8007584 <HAL_RTC_MspInit+0x7c>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800752a:	193b      	adds	r3, r7, r4
 800752c:	2280      	movs	r2, #128	@ 0x80
 800752e:	0292      	lsls	r2, r2, #10
 8007530:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8007532:	193b      	adds	r3, r7, r4
 8007534:	2280      	movs	r2, #128	@ 0x80
 8007536:	0092      	lsls	r2, r2, #2
 8007538:	641a      	str	r2, [r3, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800753a:	193b      	adds	r3, r7, r4
 800753c:	0018      	movs	r0, r3
 800753e:	f002 ff2b 	bl	800a398 <HAL_RCCEx_PeriphCLKConfig>
 8007542:	1e03      	subs	r3, r0, #0
 8007544:	d001      	beq.n	800754a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8007546:	f7ff fb03 	bl	8006b50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800754a:	4b11      	ldr	r3, [pc, #68]	@ (8007590 <HAL_RTC_MspInit+0x88>)
 800754c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800754e:	4b10      	ldr	r3, [pc, #64]	@ (8007590 <HAL_RTC_MspInit+0x88>)
 8007550:	2180      	movs	r1, #128	@ 0x80
 8007552:	0209      	lsls	r1, r1, #8
 8007554:	430a      	orrs	r2, r1
 8007556:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8007558:	4b0d      	ldr	r3, [pc, #52]	@ (8007590 <HAL_RTC_MspInit+0x88>)
 800755a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800755c:	4b0c      	ldr	r3, [pc, #48]	@ (8007590 <HAL_RTC_MspInit+0x88>)
 800755e:	2180      	movs	r1, #128	@ 0x80
 8007560:	00c9      	lsls	r1, r1, #3
 8007562:	430a      	orrs	r2, r1
 8007564:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007566:	4b0a      	ldr	r3, [pc, #40]	@ (8007590 <HAL_RTC_MspInit+0x88>)
 8007568:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800756a:	2380      	movs	r3, #128	@ 0x80
 800756c:	00db      	lsls	r3, r3, #3
 800756e:	4013      	ands	r3, r2
 8007570:	60bb      	str	r3, [r7, #8]
 8007572:	68bb      	ldr	r3, [r7, #8]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 8007574:	2200      	movs	r2, #0
 8007576:	2100      	movs	r1, #0
 8007578:	2002      	movs	r0, #2
 800757a:	f001 f967 	bl	800884c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 800757e:	2002      	movs	r0, #2
 8007580:	f001 f979 	bl	8008876 <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8007584:	46c0      	nop			@ (mov r8, r8)
 8007586:	46bd      	mov	sp, r7
 8007588:	b017      	add	sp, #92	@ 0x5c
 800758a:	bd90      	pop	{r4, r7, pc}
 800758c:	40002800 	.word	0x40002800
 8007590:	40021000 	.word	0x40021000

08007594 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007594:	b590      	push	{r4, r7, lr}
 8007596:	b08b      	sub	sp, #44	@ 0x2c
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800759c:	2414      	movs	r4, #20
 800759e:	193b      	adds	r3, r7, r4
 80075a0:	0018      	movs	r0, r3
 80075a2:	2314      	movs	r3, #20
 80075a4:	001a      	movs	r2, r3
 80075a6:	2100      	movs	r1, #0
 80075a8:	f007 fb0a 	bl	800ebc0 <memset>
  if(hspi->Instance==SPI1)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a2c      	ldr	r2, [pc, #176]	@ (8007664 <HAL_SPI_MspInit+0xd0>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d151      	bne.n	800765a <HAL_SPI_MspInit+0xc6>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80075b6:	4b2c      	ldr	r3, [pc, #176]	@ (8007668 <HAL_SPI_MspInit+0xd4>)
 80075b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80075ba:	4b2b      	ldr	r3, [pc, #172]	@ (8007668 <HAL_SPI_MspInit+0xd4>)
 80075bc:	2180      	movs	r1, #128	@ 0x80
 80075be:	0149      	lsls	r1, r1, #5
 80075c0:	430a      	orrs	r2, r1
 80075c2:	641a      	str	r2, [r3, #64]	@ 0x40
 80075c4:	4b28      	ldr	r3, [pc, #160]	@ (8007668 <HAL_SPI_MspInit+0xd4>)
 80075c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80075c8:	2380      	movs	r3, #128	@ 0x80
 80075ca:	015b      	lsls	r3, r3, #5
 80075cc:	4013      	ands	r3, r2
 80075ce:	613b      	str	r3, [r7, #16]
 80075d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80075d2:	4b25      	ldr	r3, [pc, #148]	@ (8007668 <HAL_SPI_MspInit+0xd4>)
 80075d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80075d6:	4b24      	ldr	r3, [pc, #144]	@ (8007668 <HAL_SPI_MspInit+0xd4>)
 80075d8:	2101      	movs	r1, #1
 80075da:	430a      	orrs	r2, r1
 80075dc:	635a      	str	r2, [r3, #52]	@ 0x34
 80075de:	4b22      	ldr	r3, [pc, #136]	@ (8007668 <HAL_SPI_MspInit+0xd4>)
 80075e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075e2:	2201      	movs	r2, #1
 80075e4:	4013      	ands	r3, r2
 80075e6:	60fb      	str	r3, [r7, #12]
 80075e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80075ea:	4b1f      	ldr	r3, [pc, #124]	@ (8007668 <HAL_SPI_MspInit+0xd4>)
 80075ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80075ee:	4b1e      	ldr	r3, [pc, #120]	@ (8007668 <HAL_SPI_MspInit+0xd4>)
 80075f0:	2108      	movs	r1, #8
 80075f2:	430a      	orrs	r2, r1
 80075f4:	635a      	str	r2, [r3, #52]	@ 0x34
 80075f6:	4b1c      	ldr	r3, [pc, #112]	@ (8007668 <HAL_SPI_MspInit+0xd4>)
 80075f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075fa:	2208      	movs	r2, #8
 80075fc:	4013      	ands	r3, r2
 80075fe:	60bb      	str	r3, [r7, #8]
 8007600:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PD5     ------> SPI1_MISO
    PD6     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8007602:	193b      	adds	r3, r7, r4
 8007604:	2202      	movs	r2, #2
 8007606:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007608:	193b      	adds	r3, r7, r4
 800760a:	2202      	movs	r2, #2
 800760c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800760e:	193b      	adds	r3, r7, r4
 8007610:	2200      	movs	r2, #0
 8007612:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007614:	193b      	adds	r3, r7, r4
 8007616:	2200      	movs	r2, #0
 8007618:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800761a:	193b      	adds	r3, r7, r4
 800761c:	2200      	movs	r2, #0
 800761e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007620:	193a      	adds	r2, r7, r4
 8007622:	23a0      	movs	r3, #160	@ 0xa0
 8007624:	05db      	lsls	r3, r3, #23
 8007626:	0011      	movs	r1, r2
 8007628:	0018      	movs	r0, r3
 800762a:	f001 f941 	bl	80088b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800762e:	0021      	movs	r1, r4
 8007630:	187b      	adds	r3, r7, r1
 8007632:	2260      	movs	r2, #96	@ 0x60
 8007634:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007636:	187b      	adds	r3, r7, r1
 8007638:	2202      	movs	r2, #2
 800763a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800763c:	187b      	adds	r3, r7, r1
 800763e:	2200      	movs	r2, #0
 8007640:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007642:	187b      	adds	r3, r7, r1
 8007644:	2200      	movs	r2, #0
 8007646:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI1;
 8007648:	187b      	adds	r3, r7, r1
 800764a:	2201      	movs	r2, #1
 800764c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800764e:	187b      	adds	r3, r7, r1
 8007650:	4a06      	ldr	r2, [pc, #24]	@ (800766c <HAL_SPI_MspInit+0xd8>)
 8007652:	0019      	movs	r1, r3
 8007654:	0010      	movs	r0, r2
 8007656:	f001 f92b 	bl	80088b0 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800765a:	46c0      	nop			@ (mov r8, r8)
 800765c:	46bd      	mov	sp, r7
 800765e:	b00b      	add	sp, #44	@ 0x2c
 8007660:	bd90      	pop	{r4, r7, pc}
 8007662:	46c0      	nop			@ (mov r8, r8)
 8007664:	40013000 	.word	0x40013000
 8007668:	40021000 	.word	0x40021000
 800766c:	50000c00 	.word	0x50000c00

08007670 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b084      	sub	sp, #16
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4a0a      	ldr	r2, [pc, #40]	@ (80076a8 <HAL_TIM_Base_MspInit+0x38>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d10d      	bne.n	800769e <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM17_MspInit 0 */

    /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8007682:	4b0a      	ldr	r3, [pc, #40]	@ (80076ac <HAL_TIM_Base_MspInit+0x3c>)
 8007684:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007686:	4b09      	ldr	r3, [pc, #36]	@ (80076ac <HAL_TIM_Base_MspInit+0x3c>)
 8007688:	2180      	movs	r1, #128	@ 0x80
 800768a:	02c9      	lsls	r1, r1, #11
 800768c:	430a      	orrs	r2, r1
 800768e:	641a      	str	r2, [r3, #64]	@ 0x40
 8007690:	4b06      	ldr	r3, [pc, #24]	@ (80076ac <HAL_TIM_Base_MspInit+0x3c>)
 8007692:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007694:	2380      	movs	r3, #128	@ 0x80
 8007696:	02db      	lsls	r3, r3, #11
 8007698:	4013      	ands	r3, r2
 800769a:	60fb      	str	r3, [r7, #12]
 800769c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM17_MspInit 1 */

  }

}
 800769e:	46c0      	nop			@ (mov r8, r8)
 80076a0:	46bd      	mov	sp, r7
 80076a2:	b004      	add	sp, #16
 80076a4:	bd80      	pop	{r7, pc}
 80076a6:	46c0      	nop			@ (mov r8, r8)
 80076a8:	40014800 	.word	0x40014800
 80076ac:	40021000 	.word	0x40021000

080076b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80076b0:	b590      	push	{r4, r7, lr}
 80076b2:	b089      	sub	sp, #36	@ 0x24
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80076b8:	240c      	movs	r4, #12
 80076ba:	193b      	adds	r3, r7, r4
 80076bc:	0018      	movs	r0, r3
 80076be:	2314      	movs	r3, #20
 80076c0:	001a      	movs	r2, r3
 80076c2:	2100      	movs	r1, #0
 80076c4:	f007 fa7c 	bl	800ebc0 <memset>
  if(htim->Instance==TIM17)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a14      	ldr	r2, [pc, #80]	@ (8007720 <HAL_TIM_MspPostInit+0x70>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d122      	bne.n	8007718 <HAL_TIM_MspPostInit+0x68>
  {
    /* USER CODE BEGIN TIM17_MspPostInit 0 */

    /* USER CODE END TIM17_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80076d2:	4b14      	ldr	r3, [pc, #80]	@ (8007724 <HAL_TIM_MspPostInit+0x74>)
 80076d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80076d6:	4b13      	ldr	r3, [pc, #76]	@ (8007724 <HAL_TIM_MspPostInit+0x74>)
 80076d8:	2101      	movs	r1, #1
 80076da:	430a      	orrs	r2, r1
 80076dc:	635a      	str	r2, [r3, #52]	@ 0x34
 80076de:	4b11      	ldr	r3, [pc, #68]	@ (8007724 <HAL_TIM_MspPostInit+0x74>)
 80076e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076e2:	2201      	movs	r2, #1
 80076e4:	4013      	ands	r3, r2
 80076e6:	60bb      	str	r3, [r7, #8]
 80076e8:	68bb      	ldr	r3, [r7, #8]
    /**TIM17 GPIO Configuration
    PA7     ------> TIM17_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80076ea:	0021      	movs	r1, r4
 80076ec:	187b      	adds	r3, r7, r1
 80076ee:	2280      	movs	r2, #128	@ 0x80
 80076f0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80076f2:	187b      	adds	r3, r7, r1
 80076f4:	2202      	movs	r2, #2
 80076f6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076f8:	187b      	adds	r3, r7, r1
 80076fa:	2200      	movs	r2, #0
 80076fc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80076fe:	187b      	adds	r3, r7, r1
 8007700:	2200      	movs	r2, #0
 8007702:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM17;
 8007704:	187b      	adds	r3, r7, r1
 8007706:	2205      	movs	r2, #5
 8007708:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800770a:	187a      	adds	r2, r7, r1
 800770c:	23a0      	movs	r3, #160	@ 0xa0
 800770e:	05db      	lsls	r3, r3, #23
 8007710:	0011      	movs	r1, r2
 8007712:	0018      	movs	r0, r3
 8007714:	f001 f8cc 	bl	80088b0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM17_MspPostInit 1 */

    /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8007718:	46c0      	nop			@ (mov r8, r8)
 800771a:	46bd      	mov	sp, r7
 800771c:	b009      	add	sp, #36	@ 0x24
 800771e:	bd90      	pop	{r4, r7, pc}
 8007720:	40014800 	.word	0x40014800
 8007724:	40021000 	.word	0x40021000

08007728 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007728:	b590      	push	{r4, r7, lr}
 800772a:	b09f      	sub	sp, #124	@ 0x7c
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007730:	2364      	movs	r3, #100	@ 0x64
 8007732:	18fb      	adds	r3, r7, r3
 8007734:	0018      	movs	r0, r3
 8007736:	2314      	movs	r3, #20
 8007738:	001a      	movs	r2, r3
 800773a:	2100      	movs	r1, #0
 800773c:	f007 fa40 	bl	800ebc0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007740:	2418      	movs	r4, #24
 8007742:	193b      	adds	r3, r7, r4
 8007744:	0018      	movs	r0, r3
 8007746:	234c      	movs	r3, #76	@ 0x4c
 8007748:	001a      	movs	r2, r3
 800774a:	2100      	movs	r1, #0
 800774c:	f007 fa38 	bl	800ebc0 <memset>
  if(huart->Instance==USART1)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a45      	ldr	r2, [pc, #276]	@ (800786c <HAL_UART_MspInit+0x144>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d13e      	bne.n	80077d8 <HAL_UART_MspInit+0xb0>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800775a:	193b      	adds	r3, r7, r4
 800775c:	2201      	movs	r2, #1
 800775e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8007760:	193b      	adds	r3, r7, r4
 8007762:	2200      	movs	r2, #0
 8007764:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007766:	193b      	adds	r3, r7, r4
 8007768:	0018      	movs	r0, r3
 800776a:	f002 fe15 	bl	800a398 <HAL_RCCEx_PeriphCLKConfig>
 800776e:	1e03      	subs	r3, r0, #0
 8007770:	d001      	beq.n	8007776 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8007772:	f7ff f9ed 	bl	8006b50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007776:	4b3e      	ldr	r3, [pc, #248]	@ (8007870 <HAL_UART_MspInit+0x148>)
 8007778:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800777a:	4b3d      	ldr	r3, [pc, #244]	@ (8007870 <HAL_UART_MspInit+0x148>)
 800777c:	2180      	movs	r1, #128	@ 0x80
 800777e:	01c9      	lsls	r1, r1, #7
 8007780:	430a      	orrs	r2, r1
 8007782:	641a      	str	r2, [r3, #64]	@ 0x40
 8007784:	4b3a      	ldr	r3, [pc, #232]	@ (8007870 <HAL_UART_MspInit+0x148>)
 8007786:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007788:	2380      	movs	r3, #128	@ 0x80
 800778a:	01db      	lsls	r3, r3, #7
 800778c:	4013      	ands	r3, r2
 800778e:	617b      	str	r3, [r7, #20]
 8007790:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007792:	4b37      	ldr	r3, [pc, #220]	@ (8007870 <HAL_UART_MspInit+0x148>)
 8007794:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007796:	4b36      	ldr	r3, [pc, #216]	@ (8007870 <HAL_UART_MspInit+0x148>)
 8007798:	2104      	movs	r1, #4
 800779a:	430a      	orrs	r2, r1
 800779c:	635a      	str	r2, [r3, #52]	@ 0x34
 800779e:	4b34      	ldr	r3, [pc, #208]	@ (8007870 <HAL_UART_MspInit+0x148>)
 80077a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077a2:	2204      	movs	r2, #4
 80077a4:	4013      	ands	r3, r2
 80077a6:	613b      	str	r3, [r7, #16]
 80077a8:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80077aa:	2164      	movs	r1, #100	@ 0x64
 80077ac:	187b      	adds	r3, r7, r1
 80077ae:	2230      	movs	r2, #48	@ 0x30
 80077b0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077b2:	187b      	adds	r3, r7, r1
 80077b4:	2202      	movs	r2, #2
 80077b6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077b8:	187b      	adds	r3, r7, r1
 80077ba:	2200      	movs	r2, #0
 80077bc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80077be:	187b      	adds	r3, r7, r1
 80077c0:	2200      	movs	r2, #0
 80077c2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80077c4:	187b      	adds	r3, r7, r1
 80077c6:	2201      	movs	r2, #1
 80077c8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80077ca:	187b      	adds	r3, r7, r1
 80077cc:	4a29      	ldr	r2, [pc, #164]	@ (8007874 <HAL_UART_MspInit+0x14c>)
 80077ce:	0019      	movs	r1, r3
 80077d0:	0010      	movs	r0, r2
 80077d2:	f001 f86d 	bl	80088b0 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 80077d6:	e044      	b.n	8007862 <HAL_UART_MspInit+0x13a>
  else if(huart->Instance==USART2)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a26      	ldr	r2, [pc, #152]	@ (8007878 <HAL_UART_MspInit+0x150>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d13f      	bne.n	8007862 <HAL_UART_MspInit+0x13a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80077e2:	2118      	movs	r1, #24
 80077e4:	187b      	adds	r3, r7, r1
 80077e6:	2202      	movs	r2, #2
 80077e8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80077ea:	187b      	adds	r3, r7, r1
 80077ec:	2200      	movs	r2, #0
 80077ee:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80077f0:	187b      	adds	r3, r7, r1
 80077f2:	0018      	movs	r0, r3
 80077f4:	f002 fdd0 	bl	800a398 <HAL_RCCEx_PeriphCLKConfig>
 80077f8:	1e03      	subs	r3, r0, #0
 80077fa:	d001      	beq.n	8007800 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 80077fc:	f7ff f9a8 	bl	8006b50 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8007800:	4b1b      	ldr	r3, [pc, #108]	@ (8007870 <HAL_UART_MspInit+0x148>)
 8007802:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007804:	4b1a      	ldr	r3, [pc, #104]	@ (8007870 <HAL_UART_MspInit+0x148>)
 8007806:	2180      	movs	r1, #128	@ 0x80
 8007808:	0289      	lsls	r1, r1, #10
 800780a:	430a      	orrs	r2, r1
 800780c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800780e:	4b18      	ldr	r3, [pc, #96]	@ (8007870 <HAL_UART_MspInit+0x148>)
 8007810:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007812:	2380      	movs	r3, #128	@ 0x80
 8007814:	029b      	lsls	r3, r3, #10
 8007816:	4013      	ands	r3, r2
 8007818:	60fb      	str	r3, [r7, #12]
 800781a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800781c:	4b14      	ldr	r3, [pc, #80]	@ (8007870 <HAL_UART_MspInit+0x148>)
 800781e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007820:	4b13      	ldr	r3, [pc, #76]	@ (8007870 <HAL_UART_MspInit+0x148>)
 8007822:	2101      	movs	r1, #1
 8007824:	430a      	orrs	r2, r1
 8007826:	635a      	str	r2, [r3, #52]	@ 0x34
 8007828:	4b11      	ldr	r3, [pc, #68]	@ (8007870 <HAL_UART_MspInit+0x148>)
 800782a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800782c:	2201      	movs	r2, #1
 800782e:	4013      	ands	r3, r2
 8007830:	60bb      	str	r3, [r7, #8]
 8007832:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8007834:	2164      	movs	r1, #100	@ 0x64
 8007836:	187b      	adds	r3, r7, r1
 8007838:	220c      	movs	r2, #12
 800783a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800783c:	187b      	adds	r3, r7, r1
 800783e:	2202      	movs	r2, #2
 8007840:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007842:	187b      	adds	r3, r7, r1
 8007844:	2200      	movs	r2, #0
 8007846:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007848:	187b      	adds	r3, r7, r1
 800784a:	2200      	movs	r2, #0
 800784c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800784e:	187b      	adds	r3, r7, r1
 8007850:	2201      	movs	r2, #1
 8007852:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007854:	187a      	adds	r2, r7, r1
 8007856:	23a0      	movs	r3, #160	@ 0xa0
 8007858:	05db      	lsls	r3, r3, #23
 800785a:	0011      	movs	r1, r2
 800785c:	0018      	movs	r0, r3
 800785e:	f001 f827 	bl	80088b0 <HAL_GPIO_Init>
}
 8007862:	46c0      	nop			@ (mov r8, r8)
 8007864:	46bd      	mov	sp, r7
 8007866:	b01f      	add	sp, #124	@ 0x7c
 8007868:	bd90      	pop	{r4, r7, pc}
 800786a:	46c0      	nop			@ (mov r8, r8)
 800786c:	40013800 	.word	0x40013800
 8007870:	40021000 	.word	0x40021000
 8007874:	50000800 	.word	0x50000800
 8007878:	40004400 	.word	0x40004400

0800787c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8007880:	46c0      	nop			@ (mov r8, r8)
 8007882:	e7fd      	b.n	8007880 <NMI_Handler+0x4>

08007884 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	//drawString(0, 150, "ERROR", WHITE, BLACK, 10, 10);
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007888:	46c0      	nop			@ (mov r8, r8)
 800788a:	e7fd      	b.n	8007888 <HardFault_Handler+0x4>

0800788c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8007890:	46c0      	nop			@ (mov r8, r8)
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}

08007896 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007896:	b580      	push	{r7, lr}
 8007898:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800789a:	46c0      	nop			@ (mov r8, r8)
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}

080078a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80078a4:	f000 fed0 	bl	8008648 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80078a8:	46c0      	nop			@ (mov r8, r8)
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}
	...

080078b0 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80078b4:	4b05      	ldr	r3, [pc, #20]	@ (80078cc <RTC_TAMP_IRQHandler+0x1c>)
 80078b6:	0018      	movs	r0, r3
 80078b8:	f003 fb8c 	bl	800afd4 <HAL_RTC_AlarmIRQHandler>
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80078bc:	4b03      	ldr	r3, [pc, #12]	@ (80078cc <RTC_TAMP_IRQHandler+0x1c>)
 80078be:	0018      	movs	r0, r3
 80078c0:	f003 fd52 	bl	800b368 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 80078c4:	46c0      	nop			@ (mov r8, r8)
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}
 80078ca:	46c0      	nop			@ (mov r8, r8)
 80078cc:	20001fa8 	.word	0x20001fa8

080078d0 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80078d4:	2002      	movs	r0, #2
 80078d6:	f001 f991 	bl	8008bfc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80078da:	46c0      	nop			@ (mov r8, r8)
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}

080078e0 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80078e4:	2004      	movs	r0, #4
 80078e6:	f001 f989 	bl	8008bfc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 80078ea:	46c0      	nop			@ (mov r8, r8)
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}

080078f0 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80078f4:	2380      	movs	r3, #128	@ 0x80
 80078f6:	011b      	lsls	r3, r3, #4
 80078f8:	0018      	movs	r0, r3
 80078fa:	f001 f97f 	bl	8008bfc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80078fe:	46c0      	nop			@ (mov r8, r8)
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}

08007904 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	af00      	add	r7, sp, #0
  return 1;
 8007908:	2301      	movs	r3, #1
}
 800790a:	0018      	movs	r0, r3
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}

08007910 <_kill>:

int _kill(int pid, int sig)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b082      	sub	sp, #8
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
 8007918:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800791a:	f007 f9b9 	bl	800ec90 <__errno>
 800791e:	0003      	movs	r3, r0
 8007920:	2216      	movs	r2, #22
 8007922:	601a      	str	r2, [r3, #0]
  return -1;
 8007924:	2301      	movs	r3, #1
 8007926:	425b      	negs	r3, r3
}
 8007928:	0018      	movs	r0, r3
 800792a:	46bd      	mov	sp, r7
 800792c:	b002      	add	sp, #8
 800792e:	bd80      	pop	{r7, pc}

08007930 <_exit>:

void _exit (int status)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b082      	sub	sp, #8
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8007938:	2301      	movs	r3, #1
 800793a:	425a      	negs	r2, r3
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	0011      	movs	r1, r2
 8007940:	0018      	movs	r0, r3
 8007942:	f7ff ffe5 	bl	8007910 <_kill>
  while (1) {}    /* Make sure we hang here */
 8007946:	46c0      	nop			@ (mov r8, r8)
 8007948:	e7fd      	b.n	8007946 <_exit+0x16>

0800794a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800794a:	b580      	push	{r7, lr}
 800794c:	b086      	sub	sp, #24
 800794e:	af00      	add	r7, sp, #0
 8007950:	60f8      	str	r0, [r7, #12]
 8007952:	60b9      	str	r1, [r7, #8]
 8007954:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007956:	2300      	movs	r3, #0
 8007958:	617b      	str	r3, [r7, #20]
 800795a:	e00a      	b.n	8007972 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800795c:	e000      	b.n	8007960 <_read+0x16>
 800795e:	bf00      	nop
 8007960:	0001      	movs	r1, r0
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	1c5a      	adds	r2, r3, #1
 8007966:	60ba      	str	r2, [r7, #8]
 8007968:	b2ca      	uxtb	r2, r1
 800796a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	3301      	adds	r3, #1
 8007970:	617b      	str	r3, [r7, #20]
 8007972:	697a      	ldr	r2, [r7, #20]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	429a      	cmp	r2, r3
 8007978:	dbf0      	blt.n	800795c <_read+0x12>
  }

  return len;
 800797a:	687b      	ldr	r3, [r7, #4]
}
 800797c:	0018      	movs	r0, r3
 800797e:	46bd      	mov	sp, r7
 8007980:	b006      	add	sp, #24
 8007982:	bd80      	pop	{r7, pc}

08007984 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b086      	sub	sp, #24
 8007988:	af00      	add	r7, sp, #0
 800798a:	60f8      	str	r0, [r7, #12]
 800798c:	60b9      	str	r1, [r7, #8]
 800798e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007990:	2300      	movs	r3, #0
 8007992:	617b      	str	r3, [r7, #20]
 8007994:	e009      	b.n	80079aa <_write+0x26>
  {
    __io_putchar(*ptr++);
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	1c5a      	adds	r2, r3, #1
 800799a:	60ba      	str	r2, [r7, #8]
 800799c:	781b      	ldrb	r3, [r3, #0]
 800799e:	0018      	movs	r0, r3
 80079a0:	e000      	b.n	80079a4 <_write+0x20>
 80079a2:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	3301      	adds	r3, #1
 80079a8:	617b      	str	r3, [r7, #20]
 80079aa:	697a      	ldr	r2, [r7, #20]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	429a      	cmp	r2, r3
 80079b0:	dbf1      	blt.n	8007996 <_write+0x12>
  }
  return len;
 80079b2:	687b      	ldr	r3, [r7, #4]
}
 80079b4:	0018      	movs	r0, r3
 80079b6:	46bd      	mov	sp, r7
 80079b8:	b006      	add	sp, #24
 80079ba:	bd80      	pop	{r7, pc}

080079bc <_close>:

int _close(int file)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b082      	sub	sp, #8
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80079c4:	2301      	movs	r3, #1
 80079c6:	425b      	negs	r3, r3
}
 80079c8:	0018      	movs	r0, r3
 80079ca:	46bd      	mov	sp, r7
 80079cc:	b002      	add	sp, #8
 80079ce:	bd80      	pop	{r7, pc}

080079d0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b082      	sub	sp, #8
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
 80079d8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	2280      	movs	r2, #128	@ 0x80
 80079de:	0192      	lsls	r2, r2, #6
 80079e0:	605a      	str	r2, [r3, #4]
  return 0;
 80079e2:	2300      	movs	r3, #0
}
 80079e4:	0018      	movs	r0, r3
 80079e6:	46bd      	mov	sp, r7
 80079e8:	b002      	add	sp, #8
 80079ea:	bd80      	pop	{r7, pc}

080079ec <_isatty>:

int _isatty(int file)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b082      	sub	sp, #8
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80079f4:	2301      	movs	r3, #1
}
 80079f6:	0018      	movs	r0, r3
 80079f8:	46bd      	mov	sp, r7
 80079fa:	b002      	add	sp, #8
 80079fc:	bd80      	pop	{r7, pc}

080079fe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80079fe:	b580      	push	{r7, lr}
 8007a00:	b084      	sub	sp, #16
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	60f8      	str	r0, [r7, #12]
 8007a06:	60b9      	str	r1, [r7, #8]
 8007a08:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8007a0a:	2300      	movs	r3, #0
}
 8007a0c:	0018      	movs	r0, r3
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	b004      	add	sp, #16
 8007a12:	bd80      	pop	{r7, pc}

08007a14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b086      	sub	sp, #24
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007a1c:	4a14      	ldr	r2, [pc, #80]	@ (8007a70 <_sbrk+0x5c>)
 8007a1e:	4b15      	ldr	r3, [pc, #84]	@ (8007a74 <_sbrk+0x60>)
 8007a20:	1ad3      	subs	r3, r2, r3
 8007a22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007a28:	4b13      	ldr	r3, [pc, #76]	@ (8007a78 <_sbrk+0x64>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d102      	bne.n	8007a36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007a30:	4b11      	ldr	r3, [pc, #68]	@ (8007a78 <_sbrk+0x64>)
 8007a32:	4a12      	ldr	r2, [pc, #72]	@ (8007a7c <_sbrk+0x68>)
 8007a34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007a36:	4b10      	ldr	r3, [pc, #64]	@ (8007a78 <_sbrk+0x64>)
 8007a38:	681a      	ldr	r2, [r3, #0]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	18d3      	adds	r3, r2, r3
 8007a3e:	693a      	ldr	r2, [r7, #16]
 8007a40:	429a      	cmp	r2, r3
 8007a42:	d207      	bcs.n	8007a54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007a44:	f007 f924 	bl	800ec90 <__errno>
 8007a48:	0003      	movs	r3, r0
 8007a4a:	220c      	movs	r2, #12
 8007a4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	425b      	negs	r3, r3
 8007a52:	e009      	b.n	8007a68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007a54:	4b08      	ldr	r3, [pc, #32]	@ (8007a78 <_sbrk+0x64>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007a5a:	4b07      	ldr	r3, [pc, #28]	@ (8007a78 <_sbrk+0x64>)
 8007a5c:	681a      	ldr	r2, [r3, #0]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	18d2      	adds	r2, r2, r3
 8007a62:	4b05      	ldr	r3, [pc, #20]	@ (8007a78 <_sbrk+0x64>)
 8007a64:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8007a66:	68fb      	ldr	r3, [r7, #12]
}
 8007a68:	0018      	movs	r0, r3
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	b006      	add	sp, #24
 8007a6e:	bd80      	pop	{r7, pc}
 8007a70:	20024000 	.word	0x20024000
 8007a74:	00000400 	.word	0x00000400
 8007a78:	200021ac 	.word	0x200021ac
 8007a7c:	20002300 	.word	0x20002300

08007a80 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007a84:	46c0      	nop			@ (mov r8, r8)
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}

08007a8a <json_getValue>:
static inline char const* json_getValue( json_t const* property ) {
 8007a8a:	b580      	push	{r7, lr}
 8007a8c:	b082      	sub	sp, #8
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	6078      	str	r0, [r7, #4]
    return property->u.value;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	689b      	ldr	r3, [r3, #8]
}
 8007a96:	0018      	movs	r0, r3
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	b002      	add	sp, #8
 8007a9c:	bd80      	pop	{r7, pc}

08007a9e <json_getType>:
static inline jsonType_t json_getType( json_t const* json ) {
 8007a9e:	b580      	push	{r7, lr}
 8007aa0:	b082      	sub	sp, #8
 8007aa2:	af00      	add	r7, sp, #0
 8007aa4:	6078      	str	r0, [r7, #4]
    return json->type;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	7c1b      	ldrb	r3, [r3, #16]
}
 8007aaa:	0018      	movs	r0, r3
 8007aac:	46bd      	mov	sp, r7
 8007aae:	b002      	add	sp, #8
 8007ab0:	bd80      	pop	{r7, pc}

08007ab2 <json_getProperty>:
    unsigned int nextFree;  /**< The index of the next free json property. */
    jsonPool_t pool;
} jsonStaticPool_t;

/* Search a property by its name in a JSON object. */
json_t const* json_getProperty( json_t const* obj, char const* property ) {
 8007ab2:	b580      	push	{r7, lr}
 8007ab4:	b084      	sub	sp, #16
 8007ab6:	af00      	add	r7, sp, #0
 8007ab8:	6078      	str	r0, [r7, #4]
 8007aba:	6039      	str	r1, [r7, #0]
    json_t const* sibling;
    for( sibling = obj->u.c.child; sibling; sibling = sibling->sibling )
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	689b      	ldr	r3, [r3, #8]
 8007ac0:	60fb      	str	r3, [r7, #12]
 8007ac2:	e011      	b.n	8007ae8 <json_getProperty+0x36>
        if ( sibling->name && !strcmp( sibling->name, property ) )
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d00a      	beq.n	8007ae2 <json_getProperty+0x30>
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	683a      	ldr	r2, [r7, #0]
 8007ad2:	0011      	movs	r1, r2
 8007ad4:	0018      	movs	r0, r3
 8007ad6:	f7f8 fb15 	bl	8000104 <strcmp>
 8007ada:	1e03      	subs	r3, r0, #0
 8007adc:	d101      	bne.n	8007ae2 <json_getProperty+0x30>
            return sibling;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	e006      	b.n	8007af0 <json_getProperty+0x3e>
    for( sibling = obj->u.c.child; sibling; sibling = sibling->sibling )
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	60fb      	str	r3, [r7, #12]
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d1ea      	bne.n	8007ac4 <json_getProperty+0x12>
    return 0;
 8007aee:	2300      	movs	r3, #0
}
 8007af0:	0018      	movs	r0, r3
 8007af2:	46bd      	mov	sp, r7
 8007af4:	b004      	add	sp, #16
 8007af6:	bd80      	pop	{r7, pc}

08007af8 <json_getPropertyValue>:

/* Search a property by its name in a JSON object and return its value. */
char const* json_getPropertyValue( json_t const* obj, char const* property ) {
 8007af8:	b5b0      	push	{r4, r5, r7, lr}
 8007afa:	b084      	sub	sp, #16
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
 8007b00:	6039      	str	r1, [r7, #0]
	json_t const* field = json_getProperty( obj, property );
 8007b02:	683a      	ldr	r2, [r7, #0]
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	0011      	movs	r1, r2
 8007b08:	0018      	movs	r0, r3
 8007b0a:	f7ff ffd2 	bl	8007ab2 <json_getProperty>
 8007b0e:	0003      	movs	r3, r0
 8007b10:	60fb      	str	r3, [r7, #12]
	if ( !field ) return 0;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d101      	bne.n	8007b1c <json_getPropertyValue+0x24>
 8007b18:	2300      	movs	r3, #0
 8007b1a:	e012      	b.n	8007b42 <json_getPropertyValue+0x4a>
        jsonType_t type = json_getType( field );
 8007b1c:	250b      	movs	r5, #11
 8007b1e:	197c      	adds	r4, r7, r5
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	0018      	movs	r0, r3
 8007b24:	f7ff ffbb 	bl	8007a9e <json_getType>
 8007b28:	0003      	movs	r3, r0
 8007b2a:	7023      	strb	r3, [r4, #0]
        if ( JSON_ARRAY >= type ) return 0;
 8007b2c:	197b      	adds	r3, r7, r5
 8007b2e:	781b      	ldrb	r3, [r3, #0]
 8007b30:	2b01      	cmp	r3, #1
 8007b32:	d801      	bhi.n	8007b38 <json_getPropertyValue+0x40>
 8007b34:	2300      	movs	r3, #0
 8007b36:	e004      	b.n	8007b42 <json_getPropertyValue+0x4a>
	return json_getValue( field );
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	0018      	movs	r0, r3
 8007b3c:	f7ff ffa5 	bl	8007a8a <json_getValue>
 8007b40:	0003      	movs	r3, r0
}
 8007b42:	0018      	movs	r0, r3
 8007b44:	46bd      	mov	sp, r7
 8007b46:	b004      	add	sp, #16
 8007b48:	bdb0      	pop	{r4, r5, r7, pc}

08007b4a <json_createWithPool>:
static char* objValue( char* ptr, json_t* obj, jsonPool_t* pool );
static char* setToNull( char* ch );
static bool isEndOfPrimitive( char ch );

/* Parse a string to get a json. */
json_t const* json_createWithPool( char *str, jsonPool_t *pool ) {
 8007b4a:	b580      	push	{r7, lr}
 8007b4c:	b084      	sub	sp, #16
 8007b4e:	af00      	add	r7, sp, #0
 8007b50:	6078      	str	r0, [r7, #4]
 8007b52:	6039      	str	r1, [r7, #0]
    char* ptr = goBlank( str );
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	0018      	movs	r0, r3
 8007b58:	f000 fc66 	bl	8008428 <goBlank>
 8007b5c:	0003      	movs	r3, r0
 8007b5e:	60fb      	str	r3, [r7, #12]
    if ( !ptr || (*ptr != '{' && *ptr != '[') ) return 0;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d007      	beq.n	8007b76 <json_createWithPool+0x2c>
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	781b      	ldrb	r3, [r3, #0]
 8007b6a:	2b7b      	cmp	r3, #123	@ 0x7b
 8007b6c:	d005      	beq.n	8007b7a <json_createWithPool+0x30>
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	781b      	ldrb	r3, [r3, #0]
 8007b72:	2b5b      	cmp	r3, #91	@ 0x5b
 8007b74:	d001      	beq.n	8007b7a <json_createWithPool+0x30>
 8007b76:	2300      	movs	r3, #0
 8007b78:	e01d      	b.n	8007bb6 <json_createWithPool+0x6c>
    json_t* obj = pool->init( pool );
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	683a      	ldr	r2, [r7, #0]
 8007b80:	0010      	movs	r0, r2
 8007b82:	4798      	blx	r3
 8007b84:	0003      	movs	r3, r0
 8007b86:	60bb      	str	r3, [r7, #8]
    obj->name    = 0;
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	605a      	str	r2, [r3, #4]
    obj->sibling = 0;
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	2200      	movs	r2, #0
 8007b92:	601a      	str	r2, [r3, #0]
    obj->u.c.child = 0;
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	2200      	movs	r2, #0
 8007b98:	609a      	str	r2, [r3, #8]
    ptr = objValue( ptr, obj, pool );
 8007b9a:	683a      	ldr	r2, [r7, #0]
 8007b9c:	68b9      	ldr	r1, [r7, #8]
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	0018      	movs	r0, r3
 8007ba2:	f000 faeb 	bl	800817c <objValue>
 8007ba6:	0003      	movs	r3, r0
 8007ba8:	60fb      	str	r3, [r7, #12]
    if ( !ptr ) return 0;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d101      	bne.n	8007bb4 <json_createWithPool+0x6a>
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	e000      	b.n	8007bb6 <json_createWithPool+0x6c>
    return obj;
 8007bb4:	68bb      	ldr	r3, [r7, #8]
}
 8007bb6:	0018      	movs	r0, r3
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	b004      	add	sp, #16
 8007bbc:	bd80      	pop	{r7, pc}
	...

08007bc0 <json_create>:

/* Parse a string to get a json. */
json_t const* json_create( char* str, json_t mem[], unsigned int qty ) {
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b08a      	sub	sp, #40	@ 0x28
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	60f8      	str	r0, [r7, #12]
 8007bc8:	60b9      	str	r1, [r7, #8]
 8007bca:	607a      	str	r2, [r7, #4]
    jsonStaticPool_t spool;
    spool.mem = mem;
 8007bcc:	2114      	movs	r1, #20
 8007bce:	187b      	adds	r3, r7, r1
 8007bd0:	68ba      	ldr	r2, [r7, #8]
 8007bd2:	601a      	str	r2, [r3, #0]
    spool.qty = qty;
 8007bd4:	187b      	adds	r3, r7, r1
 8007bd6:	687a      	ldr	r2, [r7, #4]
 8007bd8:	605a      	str	r2, [r3, #4]
    spool.pool.init = poolInit;
 8007bda:	187b      	adds	r3, r7, r1
 8007bdc:	4a08      	ldr	r2, [pc, #32]	@ (8007c00 <json_create+0x40>)
 8007bde:	60da      	str	r2, [r3, #12]
    spool.pool.alloc = poolAlloc;
 8007be0:	187b      	adds	r3, r7, r1
 8007be2:	4a08      	ldr	r2, [pc, #32]	@ (8007c04 <json_create+0x44>)
 8007be4:	611a      	str	r2, [r3, #16]
    return json_createWithPool( str, &spool.pool );
 8007be6:	187b      	adds	r3, r7, r1
 8007be8:	330c      	adds	r3, #12
 8007bea:	001a      	movs	r2, r3
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	0011      	movs	r1, r2
 8007bf0:	0018      	movs	r0, r3
 8007bf2:	f7ff ffaa 	bl	8007b4a <json_createWithPool>
 8007bf6:	0003      	movs	r3, r0
}
 8007bf8:	0018      	movs	r0, r3
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	b00a      	add	sp, #40	@ 0x28
 8007bfe:	bd80      	pop	{r7, pc}
 8007c00:	08008351 	.word	0x08008351
 8007c04:	08008371 	.word	0x08008371

08007c08 <getEscape>:

/** Get a special character with its escape character. Examples:
  * 'b' -> '\\b', 'n' -> '\\n', 't' -> '\\t'
  * @param ch The escape character.
  * @retval  The character code. */
static char getEscape( char ch ) {
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b084      	sub	sp, #16
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	0002      	movs	r2, r0
 8007c10:	1dfb      	adds	r3, r7, #7
 8007c12:	701a      	strb	r2, [r3, #0]
        { '/',  '/'  }, { 'b',  '\b' },
        { 'f',  '\f' }, { 'n',  '\n' },
        { 'r',  '\r' }, { 't',  '\t' },
    };
    unsigned int i;
    for( i = 0; i < sizeof pair / sizeof *pair; ++i )
 8007c14:	2300      	movs	r3, #0
 8007c16:	60fb      	str	r3, [r7, #12]
 8007c18:	e011      	b.n	8007c3e <getEscape+0x36>
        if ( pair[i].ch == ch )
 8007c1a:	4b0d      	ldr	r3, [pc, #52]	@ (8007c50 <getEscape+0x48>)
 8007c1c:	68fa      	ldr	r2, [r7, #12]
 8007c1e:	0052      	lsls	r2, r2, #1
 8007c20:	5cd3      	ldrb	r3, [r2, r3]
 8007c22:	1dfa      	adds	r2, r7, #7
 8007c24:	7812      	ldrb	r2, [r2, #0]
 8007c26:	429a      	cmp	r2, r3
 8007c28:	d106      	bne.n	8007c38 <getEscape+0x30>
            return pair[i].code;
 8007c2a:	4a09      	ldr	r2, [pc, #36]	@ (8007c50 <getEscape+0x48>)
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	005b      	lsls	r3, r3, #1
 8007c30:	18d3      	adds	r3, r2, r3
 8007c32:	3301      	adds	r3, #1
 8007c34:	781b      	ldrb	r3, [r3, #0]
 8007c36:	e006      	b.n	8007c46 <getEscape+0x3e>
    for( i = 0; i < sizeof pair / sizeof *pair; ++i )
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	3301      	adds	r3, #1
 8007c3c:	60fb      	str	r3, [r7, #12]
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2b07      	cmp	r3, #7
 8007c42:	d9ea      	bls.n	8007c1a <getEscape+0x12>
    return '\0';
 8007c44:	2300      	movs	r3, #0
}
 8007c46:	0018      	movs	r0, r3
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	b004      	add	sp, #16
 8007c4c:	bd80      	pop	{r7, pc}
 8007c4e:	46c0      	nop			@ (mov r8, r8)
 8007c50:	08011d10 	.word	0x08011d10

08007c54 <getCharFromUnicode>:

/** Parse 4 characters.
  * @param str Pointer to  first digit.
  * @retval '?' If the four characters are hexadecimal digits.
  * @retval '\0' In other cases. */
static unsigned char getCharFromUnicode( unsigned char const* str ) {
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b084      	sub	sp, #16
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
    unsigned int i;
    for( i = 0; i < 4; ++i )
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	60fb      	str	r3, [r7, #12]
 8007c60:	e010      	b.n	8007c84 <getCharFromUnicode+0x30>
        if ( !isxdigit( str[i] ) )
 8007c62:	687a      	ldr	r2, [r7, #4]
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	18d3      	adds	r3, r2, r3
 8007c68:	781b      	ldrb	r3, [r3, #0]
 8007c6a:	1c5a      	adds	r2, r3, #1
 8007c6c:	4b09      	ldr	r3, [pc, #36]	@ (8007c94 <getCharFromUnicode+0x40>)
 8007c6e:	18d3      	adds	r3, r2, r3
 8007c70:	781b      	ldrb	r3, [r3, #0]
 8007c72:	001a      	movs	r2, r3
 8007c74:	2344      	movs	r3, #68	@ 0x44
 8007c76:	4013      	ands	r3, r2
 8007c78:	d101      	bne.n	8007c7e <getCharFromUnicode+0x2a>
            return '\0';
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	e006      	b.n	8007c8c <getCharFromUnicode+0x38>
    for( i = 0; i < 4; ++i )
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	3301      	adds	r3, #1
 8007c82:	60fb      	str	r3, [r7, #12]
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	2b03      	cmp	r3, #3
 8007c88:	d9eb      	bls.n	8007c62 <getCharFromUnicode+0xe>
    return '?';
 8007c8a:	233f      	movs	r3, #63	@ 0x3f
}
 8007c8c:	0018      	movs	r0, r3
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	b004      	add	sp, #16
 8007c92:	bd80      	pop	{r7, pc}
 8007c94:	08011f80 	.word	0x08011f80

08007c98 <parseString>:
/** Parse a string and replace the scape characters by their meaning characters.
  * This parser stops when finds the character '\"'. Then replaces '\"' by '\0'.
  * @param str Pointer to first character.
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* parseString( char* str ) {
 8007c98:	b5b0      	push	{r4, r5, r7, lr}
 8007c9a:	b086      	sub	sp, #24
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
    unsigned char* head = (unsigned char*)str;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	617b      	str	r3, [r7, #20]
    unsigned char* tail = (unsigned char*)str;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	613b      	str	r3, [r7, #16]
    for( ; *head; ++head, ++tail ) {
 8007ca8:	e04f      	b.n	8007d4a <parseString+0xb2>
        if ( *head == '\"' ) {
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	781b      	ldrb	r3, [r3, #0]
 8007cae:	2b22      	cmp	r3, #34	@ 0x22
 8007cb0:	d107      	bne.n	8007cc2 <parseString+0x2a>
            *tail = '\0';
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	701a      	strb	r2, [r3, #0]
            return (char*)++head;
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	3301      	adds	r3, #1
 8007cbc:	617b      	str	r3, [r7, #20]
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	e048      	b.n	8007d54 <parseString+0xbc>
        }
        if ( *head == '\\' ) {
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	781b      	ldrb	r3, [r3, #0]
 8007cc6:	2b5c      	cmp	r3, #92	@ 0x5c
 8007cc8:	d135      	bne.n	8007d36 <parseString+0x9e>
            if ( *++head == 'u' ) {
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	3301      	adds	r3, #1
 8007cce:	617b      	str	r3, [r7, #20]
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	781b      	ldrb	r3, [r3, #0]
 8007cd4:	2b75      	cmp	r3, #117	@ 0x75
 8007cd6:	d119      	bne.n	8007d0c <parseString+0x74>
                char const ch = getCharFromUnicode( ++head );
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	3301      	adds	r3, #1
 8007cdc:	617b      	str	r3, [r7, #20]
 8007cde:	250e      	movs	r5, #14
 8007ce0:	197c      	adds	r4, r7, r5
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	0018      	movs	r0, r3
 8007ce6:	f7ff ffb5 	bl	8007c54 <getCharFromUnicode>
 8007cea:	0003      	movs	r3, r0
 8007cec:	7023      	strb	r3, [r4, #0]
                if ( ch == '\0' ) return 0;
 8007cee:	197b      	adds	r3, r7, r5
 8007cf0:	781b      	ldrb	r3, [r3, #0]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d101      	bne.n	8007cfa <parseString+0x62>
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	e02c      	b.n	8007d54 <parseString+0xbc>
                *tail = ch;
 8007cfa:	693b      	ldr	r3, [r7, #16]
 8007cfc:	220e      	movs	r2, #14
 8007cfe:	18ba      	adds	r2, r7, r2
 8007d00:	7812      	ldrb	r2, [r2, #0]
 8007d02:	701a      	strb	r2, [r3, #0]
                head += 3;
 8007d04:	697b      	ldr	r3, [r7, #20]
 8007d06:	3303      	adds	r3, #3
 8007d08:	617b      	str	r3, [r7, #20]
 8007d0a:	e018      	b.n	8007d3e <parseString+0xa6>
            }
            else {
                char const esc = getEscape( *head );
 8007d0c:	697b      	ldr	r3, [r7, #20]
 8007d0e:	781b      	ldrb	r3, [r3, #0]
 8007d10:	250f      	movs	r5, #15
 8007d12:	197c      	adds	r4, r7, r5
 8007d14:	0018      	movs	r0, r3
 8007d16:	f7ff ff77 	bl	8007c08 <getEscape>
 8007d1a:	0003      	movs	r3, r0
 8007d1c:	7023      	strb	r3, [r4, #0]
                if ( esc == '\0' ) return 0;
 8007d1e:	197b      	adds	r3, r7, r5
 8007d20:	781b      	ldrb	r3, [r3, #0]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d101      	bne.n	8007d2a <parseString+0x92>
 8007d26:	2300      	movs	r3, #0
 8007d28:	e014      	b.n	8007d54 <parseString+0xbc>
                *tail = esc;
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	220f      	movs	r2, #15
 8007d2e:	18ba      	adds	r2, r7, r2
 8007d30:	7812      	ldrb	r2, [r2, #0]
 8007d32:	701a      	strb	r2, [r3, #0]
 8007d34:	e003      	b.n	8007d3e <parseString+0xa6>
            }
        }
        else *tail = *head;
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	781a      	ldrb	r2, [r3, #0]
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	701a      	strb	r2, [r3, #0]
    for( ; *head; ++head, ++tail ) {
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	3301      	adds	r3, #1
 8007d42:	617b      	str	r3, [r7, #20]
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	3301      	adds	r3, #1
 8007d48:	613b      	str	r3, [r7, #16]
 8007d4a:	697b      	ldr	r3, [r7, #20]
 8007d4c:	781b      	ldrb	r3, [r3, #0]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d1ab      	bne.n	8007caa <parseString+0x12>
    }
    return 0;
 8007d52:	2300      	movs	r3, #0
}
 8007d54:	0018      	movs	r0, r3
 8007d56:	46bd      	mov	sp, r7
 8007d58:	b006      	add	sp, #24
 8007d5a:	bdb0      	pop	{r4, r5, r7, pc}

08007d5c <propertyName>:
/** Parse a string to get the name of a property.
  * @param ptr Pointer to first character.
  * @param property The property to assign the name.
  * @retval Pointer to first of property value. If success.
  * @retval Null pointer if any error occur. */
static char* propertyName( char* ptr, json_t* property ) {
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b082      	sub	sp, #8
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	6039      	str	r1, [r7, #0]
    property->name = ++ptr;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	3301      	adds	r3, #1
 8007d6a:	607b      	str	r3, [r7, #4]
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	687a      	ldr	r2, [r7, #4]
 8007d70:	605a      	str	r2, [r3, #4]
    ptr = parseString( ptr );
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	0018      	movs	r0, r3
 8007d76:	f7ff ff8f 	bl	8007c98 <parseString>
 8007d7a:	0003      	movs	r3, r0
 8007d7c:	607b      	str	r3, [r7, #4]
    if ( !ptr ) return 0;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d101      	bne.n	8007d88 <propertyName+0x2c>
 8007d84:	2300      	movs	r3, #0
 8007d86:	e017      	b.n	8007db8 <propertyName+0x5c>
    ptr = goBlank( ptr );
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	0018      	movs	r0, r3
 8007d8c:	f000 fb4c 	bl	8008428 <goBlank>
 8007d90:	0003      	movs	r3, r0
 8007d92:	607b      	str	r3, [r7, #4]
    if ( !ptr ) return 0;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d101      	bne.n	8007d9e <propertyName+0x42>
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	e00c      	b.n	8007db8 <propertyName+0x5c>
    if ( *ptr++ != ':' ) return 0;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	1c5a      	adds	r2, r3, #1
 8007da2:	607a      	str	r2, [r7, #4]
 8007da4:	781b      	ldrb	r3, [r3, #0]
 8007da6:	2b3a      	cmp	r3, #58	@ 0x3a
 8007da8:	d001      	beq.n	8007dae <propertyName+0x52>
 8007daa:	2300      	movs	r3, #0
 8007dac:	e004      	b.n	8007db8 <propertyName+0x5c>
    return goBlank( ptr );
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	0018      	movs	r0, r3
 8007db2:	f000 fb39 	bl	8008428 <goBlank>
 8007db6:	0003      	movs	r3, r0
}
 8007db8:	0018      	movs	r0, r3
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	b002      	add	sp, #8
 8007dbe:	bd80      	pop	{r7, pc}

08007dc0 <textValue>:
/** Parse a string to get the value of a property when its type is JSON_TEXT.
  * @param ptr Pointer to first character ('\"').
  * @param property The property to assign the name.
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* textValue( char* ptr, json_t* property ) {
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b082      	sub	sp, #8
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
 8007dc8:	6039      	str	r1, [r7, #0]
    ++property->u.value;
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	689b      	ldr	r3, [r3, #8]
 8007dce:	1c5a      	adds	r2, r3, #1
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	609a      	str	r2, [r3, #8]
    ptr = parseString( ++ptr );
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	3301      	adds	r3, #1
 8007dd8:	607b      	str	r3, [r7, #4]
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	0018      	movs	r0, r3
 8007dde:	f7ff ff5b 	bl	8007c98 <parseString>
 8007de2:	0003      	movs	r3, r0
 8007de4:	607b      	str	r3, [r7, #4]
    if ( !ptr ) return 0;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d101      	bne.n	8007df0 <textValue+0x30>
 8007dec:	2300      	movs	r3, #0
 8007dee:	e003      	b.n	8007df8 <textValue+0x38>
    property->type = JSON_TEXT;
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	2202      	movs	r2, #2
 8007df4:	741a      	strb	r2, [r3, #16]
    return ptr;
 8007df6:	687b      	ldr	r3, [r7, #4]
}
 8007df8:	0018      	movs	r0, r3
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	b002      	add	sp, #8
 8007dfe:	bd80      	pop	{r7, pc}

08007e00 <checkStr>:
/** Compare two strings until get the null character in the second one.
  * @param ptr sub string
  * @param str main string
  * @retval Pointer to next character.
  * @retval Null pointer if any error occur. */
static char* checkStr( char* ptr, char const* str ) {
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b082      	sub	sp, #8
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
 8007e08:	6039      	str	r1, [r7, #0]
    while( *str )
 8007e0a:	e00b      	b.n	8007e24 <checkStr+0x24>
        if ( *ptr++ != *str++ )
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	1c5a      	adds	r2, r3, #1
 8007e10:	607a      	str	r2, [r7, #4]
 8007e12:	781a      	ldrb	r2, [r3, #0]
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	1c59      	adds	r1, r3, #1
 8007e18:	6039      	str	r1, [r7, #0]
 8007e1a:	781b      	ldrb	r3, [r3, #0]
 8007e1c:	429a      	cmp	r2, r3
 8007e1e:	d001      	beq.n	8007e24 <checkStr+0x24>
            return 0;
 8007e20:	2300      	movs	r3, #0
 8007e22:	e004      	b.n	8007e2e <checkStr+0x2e>
    while( *str )
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	781b      	ldrb	r3, [r3, #0]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d1ef      	bne.n	8007e0c <checkStr+0xc>
    return ptr;
 8007e2c:	687b      	ldr	r3, [r7, #4]
}
 8007e2e:	0018      	movs	r0, r3
 8007e30:	46bd      	mov	sp, r7
 8007e32:	b002      	add	sp, #8
 8007e34:	bd80      	pop	{r7, pc}

08007e36 <primitiveValue>:
  * @param property Property handler to set the value and the type, (true, false or null).
  * @param value String with the primitive literal.
  * @param type The code of the type. ( JSON_BOOLEAN or JSON_NULL )
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* primitiveValue( char* ptr, json_t* property, char const* value, jsonType_t type ) {
 8007e36:	b580      	push	{r7, lr}
 8007e38:	b084      	sub	sp, #16
 8007e3a:	af00      	add	r7, sp, #0
 8007e3c:	60f8      	str	r0, [r7, #12]
 8007e3e:	60b9      	str	r1, [r7, #8]
 8007e40:	607a      	str	r2, [r7, #4]
 8007e42:	001a      	movs	r2, r3
 8007e44:	1cfb      	adds	r3, r7, #3
 8007e46:	701a      	strb	r2, [r3, #0]
    ptr = checkStr( ptr, value );
 8007e48:	687a      	ldr	r2, [r7, #4]
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	0011      	movs	r1, r2
 8007e4e:	0018      	movs	r0, r3
 8007e50:	f7ff ffd6 	bl	8007e00 <checkStr>
 8007e54:	0003      	movs	r3, r0
 8007e56:	60fb      	str	r3, [r7, #12]
    if ( !ptr || !isEndOfPrimitive( *ptr ) ) return 0;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d00b      	beq.n	8007e76 <primitiveValue+0x40>
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	781b      	ldrb	r3, [r3, #0]
 8007e62:	0018      	movs	r0, r3
 8007e64:	f000 fb30 	bl	80084c8 <isEndOfPrimitive>
 8007e68:	0003      	movs	r3, r0
 8007e6a:	001a      	movs	r2, r3
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	4053      	eors	r3, r2
 8007e70:	b2db      	uxtb	r3, r3
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d001      	beq.n	8007e7a <primitiveValue+0x44>
 8007e76:	2300      	movs	r3, #0
 8007e78:	e00a      	b.n	8007e90 <primitiveValue+0x5a>
    ptr = setToNull( ptr );
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	0018      	movs	r0, r3
 8007e7e:	f000 fb05 	bl	800848c <setToNull>
 8007e82:	0003      	movs	r3, r0
 8007e84:	60fb      	str	r3, [r7, #12]
    property->type = type;
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	1cfa      	adds	r2, r7, #3
 8007e8a:	7812      	ldrb	r2, [r2, #0]
 8007e8c:	741a      	strb	r2, [r3, #16]
    return ptr;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
}
 8007e90:	0018      	movs	r0, r3
 8007e92:	46bd      	mov	sp, r7
 8007e94:	b004      	add	sp, #16
 8007e96:	bd80      	pop	{r7, pc}

08007e98 <trueValue>:
  * If the first character after the value is different of '}' or ']' is set to '\0'.
  * @param ptr Pointer to first character.
  * @param property Property handler to set the value and the type, (true, false or null).
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* trueValue( char* ptr, json_t* property ) {
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b082      	sub	sp, #8
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
 8007ea0:	6039      	str	r1, [r7, #0]
    return primitiveValue( ptr, property, "true", JSON_BOOLEAN );
 8007ea2:	4a05      	ldr	r2, [pc, #20]	@ (8007eb8 <trueValue+0x20>)
 8007ea4:	6839      	ldr	r1, [r7, #0]
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	2303      	movs	r3, #3
 8007eaa:	f7ff ffc4 	bl	8007e36 <primitiveValue>
 8007eae:	0003      	movs	r3, r0
}
 8007eb0:	0018      	movs	r0, r3
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	b002      	add	sp, #8
 8007eb6:	bd80      	pop	{r7, pc}
 8007eb8:	080114fc 	.word	0x080114fc

08007ebc <falseValue>:
  * If the first character after the value is different of '}' or ']' is set to '\0'.
  * @param ptr Pointer to first character.
  * @param property Property handler to set the value and the type, (true, false or null).
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* falseValue( char* ptr, json_t* property ) {
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b082      	sub	sp, #8
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
 8007ec4:	6039      	str	r1, [r7, #0]
    return primitiveValue( ptr, property, "false", JSON_BOOLEAN );
 8007ec6:	4a05      	ldr	r2, [pc, #20]	@ (8007edc <falseValue+0x20>)
 8007ec8:	6839      	ldr	r1, [r7, #0]
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	2303      	movs	r3, #3
 8007ece:	f7ff ffb2 	bl	8007e36 <primitiveValue>
 8007ed2:	0003      	movs	r3, r0
}
 8007ed4:	0018      	movs	r0, r3
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	b002      	add	sp, #8
 8007eda:	bd80      	pop	{r7, pc}
 8007edc:	08011504 	.word	0x08011504

08007ee0 <nullValue>:
  * If the first character after the value is different of '}' or ']' is set to '\0'.
  * @param ptr Pointer to first character.
  * @param property Property handler to set the value and the type, (true, false or null).
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* nullValue( char* ptr, json_t* property ) {
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b082      	sub	sp, #8
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
 8007ee8:	6039      	str	r1, [r7, #0]
    return primitiveValue( ptr, property, "null", JSON_NULL );
 8007eea:	4a05      	ldr	r2, [pc, #20]	@ (8007f00 <nullValue+0x20>)
 8007eec:	6839      	ldr	r1, [r7, #0]
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	2306      	movs	r3, #6
 8007ef2:	f7ff ffa0 	bl	8007e36 <primitiveValue>
 8007ef6:	0003      	movs	r3, r0
}
 8007ef8:	0018      	movs	r0, r3
 8007efa:	46bd      	mov	sp, r7
 8007efc:	b002      	add	sp, #8
 8007efe:	bd80      	pop	{r7, pc}
 8007f00:	0801150c 	.word	0x0801150c

08007f04 <expValue>:

/** Analyze the exponential part of a real number.
  * @param ptr Pointer to first character.
  * @retval Pointer to first non numerical after the string. If success.
  * @retval Null pointer if any error occur. */
static char* expValue( char* ptr ) {
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b082      	sub	sp, #8
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
    if ( *ptr == '-' || *ptr == '+' ) ++ptr;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	781b      	ldrb	r3, [r3, #0]
 8007f10:	2b2d      	cmp	r3, #45	@ 0x2d
 8007f12:	d003      	beq.n	8007f1c <expValue+0x18>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	781b      	ldrb	r3, [r3, #0]
 8007f18:	2b2b      	cmp	r3, #43	@ 0x2b
 8007f1a:	d102      	bne.n	8007f22 <expValue+0x1e>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	3301      	adds	r3, #1
 8007f20:	607b      	str	r3, [r7, #4]
    if ( !isdigit( (int)(*ptr) ) ) return 0;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	781b      	ldrb	r3, [r3, #0]
 8007f26:	1c5a      	adds	r2, r3, #1
 8007f28:	4b0b      	ldr	r3, [pc, #44]	@ (8007f58 <expValue+0x54>)
 8007f2a:	18d3      	adds	r3, r2, r3
 8007f2c:	781b      	ldrb	r3, [r3, #0]
 8007f2e:	001a      	movs	r2, r3
 8007f30:	2304      	movs	r3, #4
 8007f32:	4013      	ands	r3, r2
 8007f34:	d101      	bne.n	8007f3a <expValue+0x36>
 8007f36:	2300      	movs	r3, #0
 8007f38:	e009      	b.n	8007f4e <expValue+0x4a>
    ptr = goNum( ++ptr );
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	3301      	adds	r3, #1
 8007f3e:	607b      	str	r3, [r7, #4]
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	0018      	movs	r0, r3
 8007f44:	f000 fa82 	bl	800844c <goNum>
 8007f48:	0003      	movs	r3, r0
 8007f4a:	607b      	str	r3, [r7, #4]
    return ptr;
 8007f4c:	687b      	ldr	r3, [r7, #4]
}
 8007f4e:	0018      	movs	r0, r3
 8007f50:	46bd      	mov	sp, r7
 8007f52:	b002      	add	sp, #8
 8007f54:	bd80      	pop	{r7, pc}
 8007f56:	46c0      	nop			@ (mov r8, r8)
 8007f58:	08011f80 	.word	0x08011f80

08007f5c <fraqValue>:

/** Analyze the decimal part of a real number.
  * @param ptr Pointer to first character.
  * @retval Pointer to first non numerical after the string. If success.
  * @retval Null pointer if any error occur. */
static char* fraqValue( char* ptr ) {
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b082      	sub	sp, #8
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
    if ( !isdigit( (int)(*ptr) ) ) return 0;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	781b      	ldrb	r3, [r3, #0]
 8007f68:	1c5a      	adds	r2, r3, #1
 8007f6a:	4b0e      	ldr	r3, [pc, #56]	@ (8007fa4 <fraqValue+0x48>)
 8007f6c:	18d3      	adds	r3, r2, r3
 8007f6e:	781b      	ldrb	r3, [r3, #0]
 8007f70:	001a      	movs	r2, r3
 8007f72:	2304      	movs	r3, #4
 8007f74:	4013      	ands	r3, r2
 8007f76:	d101      	bne.n	8007f7c <fraqValue+0x20>
 8007f78:	2300      	movs	r3, #0
 8007f7a:	e00e      	b.n	8007f9a <fraqValue+0x3e>
    ptr = goNum( ++ptr );
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	3301      	adds	r3, #1
 8007f80:	607b      	str	r3, [r7, #4]
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	0018      	movs	r0, r3
 8007f86:	f000 fa61 	bl	800844c <goNum>
 8007f8a:	0003      	movs	r3, r0
 8007f8c:	607b      	str	r3, [r7, #4]
    if ( !ptr ) return 0;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d101      	bne.n	8007f98 <fraqValue+0x3c>
 8007f94:	2300      	movs	r3, #0
 8007f96:	e000      	b.n	8007f9a <fraqValue+0x3e>
    return ptr;
 8007f98:	687b      	ldr	r3, [r7, #4]
}
 8007f9a:	0018      	movs	r0, r3
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	b002      	add	sp, #8
 8007fa0:	bd80      	pop	{r7, pc}
 8007fa2:	46c0      	nop			@ (mov r8, r8)
 8007fa4:	08011f80 	.word	0x08011f80

08007fa8 <numValue>:
  * If the first character after the value is different of '}' or ']' is set to '\0'.
  * @param ptr Pointer to first character.
  * @param property Property handler to set the value and the type: JSON_REAL or JSON_INTEGER.
  * @retval Pointer to first non white space after the string. If success.
  * @retval Null pointer if any error occur. */
static char* numValue( char* ptr, json_t* property ) {
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b088      	sub	sp, #32
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
 8007fb0:	6039      	str	r1, [r7, #0]
    if ( *ptr == '-' ) ++ptr;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	781b      	ldrb	r3, [r3, #0]
 8007fb6:	2b2d      	cmp	r3, #45	@ 0x2d
 8007fb8:	d102      	bne.n	8007fc0 <numValue+0x18>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	3301      	adds	r3, #1
 8007fbe:	607b      	str	r3, [r7, #4]
    if ( !isdigit( (int)(*ptr) ) ) return 0;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	781b      	ldrb	r3, [r3, #0]
 8007fc4:	1c5a      	adds	r2, r3, #1
 8007fc6:	4b5b      	ldr	r3, [pc, #364]	@ (8008134 <numValue+0x18c>)
 8007fc8:	18d3      	adds	r3, r2, r3
 8007fca:	781b      	ldrb	r3, [r3, #0]
 8007fcc:	001a      	movs	r2, r3
 8007fce:	2304      	movs	r3, #4
 8007fd0:	4013      	ands	r3, r2
 8007fd2:	d101      	bne.n	8007fd8 <numValue+0x30>
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	e0a8      	b.n	800812a <numValue+0x182>
    if ( *ptr != '0' ) {
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	781b      	ldrb	r3, [r3, #0]
 8007fdc:	2b30      	cmp	r3, #48	@ 0x30
 8007fde:	d00a      	beq.n	8007ff6 <numValue+0x4e>
        ptr = goNum( ptr );
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	0018      	movs	r0, r3
 8007fe4:	f000 fa32 	bl	800844c <goNum>
 8007fe8:	0003      	movs	r3, r0
 8007fea:	607b      	str	r3, [r7, #4]
        if ( !ptr ) return 0;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d110      	bne.n	8008014 <numValue+0x6c>
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	e099      	b.n	800812a <numValue+0x182>
    }
    else if ( isdigit( (int)(*++ptr) ) ) return 0;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	3301      	adds	r3, #1
 8007ffa:	607b      	str	r3, [r7, #4]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	781b      	ldrb	r3, [r3, #0]
 8008000:	1c5a      	adds	r2, r3, #1
 8008002:	4b4c      	ldr	r3, [pc, #304]	@ (8008134 <numValue+0x18c>)
 8008004:	18d3      	adds	r3, r2, r3
 8008006:	781b      	ldrb	r3, [r3, #0]
 8008008:	001a      	movs	r2, r3
 800800a:	2304      	movs	r3, #4
 800800c:	4013      	ands	r3, r2
 800800e:	d001      	beq.n	8008014 <numValue+0x6c>
 8008010:	2300      	movs	r3, #0
 8008012:	e08a      	b.n	800812a <numValue+0x182>
    property->type = JSON_INTEGER;
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	2204      	movs	r2, #4
 8008018:	741a      	strb	r2, [r3, #16]
    if ( *ptr == '.' ) {
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	781b      	ldrb	r3, [r3, #0]
 800801e:	2b2e      	cmp	r3, #46	@ 0x2e
 8008020:	d110      	bne.n	8008044 <numValue+0x9c>
        ptr = fraqValue( ++ptr );
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	3301      	adds	r3, #1
 8008026:	607b      	str	r3, [r7, #4]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	0018      	movs	r0, r3
 800802c:	f7ff ff96 	bl	8007f5c <fraqValue>
 8008030:	0003      	movs	r3, r0
 8008032:	607b      	str	r3, [r7, #4]
        if ( !ptr ) return 0;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d101      	bne.n	800803e <numValue+0x96>
 800803a:	2300      	movs	r3, #0
 800803c:	e075      	b.n	800812a <numValue+0x182>
        property->type = JSON_REAL;
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	2205      	movs	r2, #5
 8008042:	741a      	strb	r2, [r3, #16]
    }
    if ( *ptr == 'e' || *ptr == 'E' ) {
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	781b      	ldrb	r3, [r3, #0]
 8008048:	2b65      	cmp	r3, #101	@ 0x65
 800804a:	d003      	beq.n	8008054 <numValue+0xac>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	781b      	ldrb	r3, [r3, #0]
 8008050:	2b45      	cmp	r3, #69	@ 0x45
 8008052:	d110      	bne.n	8008076 <numValue+0xce>
        ptr = expValue( ++ptr );
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	3301      	adds	r3, #1
 8008058:	607b      	str	r3, [r7, #4]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	0018      	movs	r0, r3
 800805e:	f7ff ff51 	bl	8007f04 <expValue>
 8008062:	0003      	movs	r3, r0
 8008064:	607b      	str	r3, [r7, #4]
        if ( !ptr ) return 0;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d101      	bne.n	8008070 <numValue+0xc8>
 800806c:	2300      	movs	r3, #0
 800806e:	e05c      	b.n	800812a <numValue+0x182>
        property->type = JSON_REAL;
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	2205      	movs	r2, #5
 8008074:	741a      	strb	r2, [r3, #16]
    }
    if ( !isEndOfPrimitive( *ptr ) ) return 0;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	781b      	ldrb	r3, [r3, #0]
 800807a:	0018      	movs	r0, r3
 800807c:	f000 fa24 	bl	80084c8 <isEndOfPrimitive>
 8008080:	0003      	movs	r3, r0
 8008082:	001a      	movs	r2, r3
 8008084:	2301      	movs	r3, #1
 8008086:	4053      	eors	r3, r2
 8008088:	b2db      	uxtb	r3, r3
 800808a:	2b00      	cmp	r3, #0
 800808c:	d001      	beq.n	8008092 <numValue+0xea>
 800808e:	2300      	movs	r3, #0
 8008090:	e04b      	b.n	800812a <numValue+0x182>
    if ( JSON_INTEGER == property->type ) {
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	7c1b      	ldrb	r3, [r3, #16]
 8008096:	2b04      	cmp	r3, #4
 8008098:	d140      	bne.n	800811c <numValue+0x174>
        char const* value = property->u.value;
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	689b      	ldr	r3, [r3, #8]
 800809e:	61fb      	str	r3, [r7, #28]
        bool const negative = *value == '-';
 80080a0:	69fb      	ldr	r3, [r7, #28]
 80080a2:	781a      	ldrb	r2, [r3, #0]
 80080a4:	201b      	movs	r0, #27
 80080a6:	183b      	adds	r3, r7, r0
 80080a8:	3a2d      	subs	r2, #45	@ 0x2d
 80080aa:	4251      	negs	r1, r2
 80080ac:	414a      	adcs	r2, r1
 80080ae:	701a      	strb	r2, [r3, #0]
        static char const min[] = "-9223372036854775808";
        static char const max[] = "9223372036854775807";
        unsigned int const maxdigits = ( negative? sizeof min: sizeof max ) - 1;
 80080b0:	183b      	adds	r3, r7, r0
 80080b2:	781b      	ldrb	r3, [r3, #0]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d001      	beq.n	80080bc <numValue+0x114>
 80080b8:	2314      	movs	r3, #20
 80080ba:	e000      	b.n	80080be <numValue+0x116>
 80080bc:	2313      	movs	r3, #19
 80080be:	617b      	str	r3, [r7, #20]
        unsigned int const len = ( unsigned int const ) ( ptr - value );
 80080c0:	687a      	ldr	r2, [r7, #4]
 80080c2:	69fb      	ldr	r3, [r7, #28]
 80080c4:	1ad3      	subs	r3, r2, r3
 80080c6:	613b      	str	r3, [r7, #16]
        if ( len > maxdigits ) return 0;
 80080c8:	693a      	ldr	r2, [r7, #16]
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	429a      	cmp	r2, r3
 80080ce:	d901      	bls.n	80080d4 <numValue+0x12c>
 80080d0:	2300      	movs	r3, #0
 80080d2:	e02a      	b.n	800812a <numValue+0x182>
        if ( len == maxdigits ) {
 80080d4:	693a      	ldr	r2, [r7, #16]
 80080d6:	697b      	ldr	r3, [r7, #20]
 80080d8:	429a      	cmp	r2, r3
 80080da:	d11f      	bne.n	800811c <numValue+0x174>
            char const tmp = *ptr;
 80080dc:	230f      	movs	r3, #15
 80080de:	18fb      	adds	r3, r7, r3
 80080e0:	687a      	ldr	r2, [r7, #4]
 80080e2:	7812      	ldrb	r2, [r2, #0]
 80080e4:	701a      	strb	r2, [r3, #0]
            *ptr = '\0';
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2200      	movs	r2, #0
 80080ea:	701a      	strb	r2, [r3, #0]
            char const* const threshold = negative ? min: max;
 80080ec:	231b      	movs	r3, #27
 80080ee:	18fb      	adds	r3, r7, r3
 80080f0:	781b      	ldrb	r3, [r3, #0]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d001      	beq.n	80080fa <numValue+0x152>
 80080f6:	4b10      	ldr	r3, [pc, #64]	@ (8008138 <numValue+0x190>)
 80080f8:	e000      	b.n	80080fc <numValue+0x154>
 80080fa:	4b10      	ldr	r3, [pc, #64]	@ (800813c <numValue+0x194>)
 80080fc:	60bb      	str	r3, [r7, #8]
            if ( 0 > strcmp( threshold, value ) ) return 0;
 80080fe:	69fa      	ldr	r2, [r7, #28]
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	0011      	movs	r1, r2
 8008104:	0018      	movs	r0, r3
 8008106:	f7f7 fffd 	bl	8000104 <strcmp>
 800810a:	1e03      	subs	r3, r0, #0
 800810c:	da01      	bge.n	8008112 <numValue+0x16a>
 800810e:	2300      	movs	r3, #0
 8008110:	e00b      	b.n	800812a <numValue+0x182>
            *ptr = tmp;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	220f      	movs	r2, #15
 8008116:	18ba      	adds	r2, r7, r2
 8008118:	7812      	ldrb	r2, [r2, #0]
 800811a:	701a      	strb	r2, [r3, #0]
        }
    }
    ptr = setToNull( ptr );
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	0018      	movs	r0, r3
 8008120:	f000 f9b4 	bl	800848c <setToNull>
 8008124:	0003      	movs	r3, r0
 8008126:	607b      	str	r3, [r7, #4]
    return ptr;
 8008128:	687b      	ldr	r3, [r7, #4]
}
 800812a:	0018      	movs	r0, r3
 800812c:	46bd      	mov	sp, r7
 800812e:	b008      	add	sp, #32
 8008130:	bd80      	pop	{r7, pc}
 8008132:	46c0      	nop			@ (mov r8, r8)
 8008134:	08011f80 	.word	0x08011f80
 8008138:	08011d20 	.word	0x08011d20
 800813c:	08011d38 	.word	0x08011d38

08008140 <add>:

/** Add a property to a JSON object or array.
  * @param obj The handler of the JSON object or array.
  * @param property The handler of the property to be added. */
static void add( json_t* obj, json_t* property ) {
 8008140:	b580      	push	{r7, lr}
 8008142:	b082      	sub	sp, #8
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	6039      	str	r1, [r7, #0]
    property->sibling = 0;
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	2200      	movs	r2, #0
 800814e:	601a      	str	r2, [r3, #0]
    if ( !obj->u.c.child ){
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	689b      	ldr	r3, [r3, #8]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d106      	bne.n	8008166 <add+0x26>
	    obj->u.c.child = property;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	683a      	ldr	r2, [r7, #0]
 800815c:	609a      	str	r2, [r3, #8]
	    obj->u.c.last_child = property;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	683a      	ldr	r2, [r7, #0]
 8008162:	60da      	str	r2, [r3, #12]
    } else {
	    obj->u.c.last_child->sibling = property;
	    obj->u.c.last_child = property;
    }
}
 8008164:	e006      	b.n	8008174 <add+0x34>
	    obj->u.c.last_child->sibling = property;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	68db      	ldr	r3, [r3, #12]
 800816a:	683a      	ldr	r2, [r7, #0]
 800816c:	601a      	str	r2, [r3, #0]
	    obj->u.c.last_child = property;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	683a      	ldr	r2, [r7, #0]
 8008172:	60da      	str	r2, [r3, #12]
}
 8008174:	46c0      	nop			@ (mov r8, r8)
 8008176:	46bd      	mov	sp, r7
 8008178:	b002      	add	sp, #8
 800817a:	bd80      	pop	{r7, pc}

0800817c <objValue>:
  * @param ptr Pointer to first character.
  * @param obj The handler of the JSON root object or array.
  * @param pool The handler of a json pool for creating json instances.
  * @retval Pointer to first character after the value. If success.
  * @retval Null pointer if any error occur. */
static char* objValue( char* ptr, json_t* obj, jsonPool_t* pool ) {
 800817c:	b580      	push	{r7, lr}
 800817e:	b088      	sub	sp, #32
 8008180:	af00      	add	r7, sp, #0
 8008182:	60f8      	str	r0, [r7, #12]
 8008184:	60b9      	str	r1, [r7, #8]
 8008186:	607a      	str	r2, [r7, #4]
    obj->type    = *ptr == '{' ? JSON_OBJ : JSON_ARRAY;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	781b      	ldrb	r3, [r3, #0]
 800818c:	3b7b      	subs	r3, #123	@ 0x7b
 800818e:	1e5a      	subs	r2, r3, #1
 8008190:	4193      	sbcs	r3, r2
 8008192:	b2db      	uxtb	r3, r3
 8008194:	001a      	movs	r2, r3
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	741a      	strb	r2, [r3, #16]
    obj->u.c.child = 0;
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	2200      	movs	r2, #0
 800819e:	609a      	str	r2, [r3, #8]
    obj->sibling = 0;
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	2200      	movs	r2, #0
 80081a4:	601a      	str	r2, [r3, #0]
    ptr++;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	3301      	adds	r3, #1
 80081aa:	60fb      	str	r3, [r7, #12]
    for(;;) {
        ptr = goBlank( ptr );
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	0018      	movs	r0, r3
 80081b0:	f000 f93a 	bl	8008428 <goBlank>
 80081b4:	0003      	movs	r3, r0
 80081b6:	60fb      	str	r3, [r7, #12]
        if ( !ptr ) return 0;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d101      	bne.n	80081c2 <objValue+0x46>
 80081be:	2300      	movs	r3, #0
 80081c0:	e0c0      	b.n	8008344 <objValue+0x1c8>
        if ( *ptr == ',' ) {
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	781b      	ldrb	r3, [r3, #0]
 80081c6:	2b2c      	cmp	r3, #44	@ 0x2c
 80081c8:	d103      	bne.n	80081d2 <objValue+0x56>
            ++ptr;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	3301      	adds	r3, #1
 80081ce:	60fb      	str	r3, [r7, #12]
            continue;
 80081d0:	e0b7      	b.n	8008342 <objValue+0x1c6>
        }
        char const endchar = ( obj->type == JSON_OBJ )? '}': ']';
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	7c1b      	ldrb	r3, [r3, #16]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d101      	bne.n	80081de <objValue+0x62>
 80081da:	227d      	movs	r2, #125	@ 0x7d
 80081dc:	e000      	b.n	80081e0 <objValue+0x64>
 80081de:	225d      	movs	r2, #93	@ 0x5d
 80081e0:	211f      	movs	r1, #31
 80081e2:	187b      	adds	r3, r7, r1
 80081e4:	701a      	strb	r2, [r3, #0]
        if ( *ptr == endchar ) {
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	781b      	ldrb	r3, [r3, #0]
 80081ea:	187a      	adds	r2, r7, r1
 80081ec:	7812      	ldrb	r2, [r2, #0]
 80081ee:	429a      	cmp	r2, r3
 80081f0:	d116      	bne.n	8008220 <objValue+0xa4>
            *ptr = '\0';
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	2200      	movs	r2, #0
 80081f6:	701a      	strb	r2, [r3, #0]
            json_t* parentObj = obj->sibling;
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	617b      	str	r3, [r7, #20]
            if ( !parentObj ) return ++ptr;
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d104      	bne.n	800820e <objValue+0x92>
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	3301      	adds	r3, #1
 8008208:	60fb      	str	r3, [r7, #12]
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	e09a      	b.n	8008344 <objValue+0x1c8>
            obj->sibling = 0;
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	2200      	movs	r2, #0
 8008212:	601a      	str	r2, [r3, #0]
            obj = parentObj;
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	60bb      	str	r3, [r7, #8]
            ++ptr;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	3301      	adds	r3, #1
 800821c:	60fb      	str	r3, [r7, #12]
            continue;
 800821e:	e090      	b.n	8008342 <objValue+0x1c6>
        }
        json_t* property = pool->alloc( pool );
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	685b      	ldr	r3, [r3, #4]
 8008224:	687a      	ldr	r2, [r7, #4]
 8008226:	0010      	movs	r0, r2
 8008228:	4798      	blx	r3
 800822a:	0003      	movs	r3, r0
 800822c:	61bb      	str	r3, [r7, #24]
        if ( !property ) return 0;
 800822e:	69bb      	ldr	r3, [r7, #24]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d101      	bne.n	8008238 <objValue+0xbc>
 8008234:	2300      	movs	r3, #0
 8008236:	e085      	b.n	8008344 <objValue+0x1c8>
        if( obj->type != JSON_ARRAY ) {
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	7c1b      	ldrb	r3, [r3, #16]
 800823c:	2b01      	cmp	r3, #1
 800823e:	d012      	beq.n	8008266 <objValue+0xea>
            if ( *ptr != '\"' ) return 0;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	781b      	ldrb	r3, [r3, #0]
 8008244:	2b22      	cmp	r3, #34	@ 0x22
 8008246:	d001      	beq.n	800824c <objValue+0xd0>
 8008248:	2300      	movs	r3, #0
 800824a:	e07b      	b.n	8008344 <objValue+0x1c8>
            ptr = propertyName( ptr, property );
 800824c:	69ba      	ldr	r2, [r7, #24]
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	0011      	movs	r1, r2
 8008252:	0018      	movs	r0, r3
 8008254:	f7ff fd82 	bl	8007d5c <propertyName>
 8008258:	0003      	movs	r3, r0
 800825a:	60fb      	str	r3, [r7, #12]
            if ( !ptr ) return 0;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d104      	bne.n	800826c <objValue+0xf0>
 8008262:	2300      	movs	r3, #0
 8008264:	e06e      	b.n	8008344 <objValue+0x1c8>
        }
        else property->name = 0;
 8008266:	69bb      	ldr	r3, [r7, #24]
 8008268:	2200      	movs	r2, #0
 800826a:	605a      	str	r2, [r3, #4]
        add( obj, property );
 800826c:	69ba      	ldr	r2, [r7, #24]
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	0011      	movs	r1, r2
 8008272:	0018      	movs	r0, r3
 8008274:	f7ff ff64 	bl	8008140 <add>
        property->u.value = ptr;
 8008278:	69bb      	ldr	r3, [r7, #24]
 800827a:	68fa      	ldr	r2, [r7, #12]
 800827c:	609a      	str	r2, [r3, #8]
        switch( *ptr ) {
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	781b      	ldrb	r3, [r3, #0]
 8008282:	2b22      	cmp	r3, #34	@ 0x22
 8008284:	d02a      	beq.n	80082dc <objValue+0x160>
 8008286:	db4d      	blt.n	8008324 <objValue+0x1a8>
 8008288:	2b7b      	cmp	r3, #123	@ 0x7b
 800828a:	dc4b      	bgt.n	8008324 <objValue+0x1a8>
 800828c:	2b5b      	cmp	r3, #91	@ 0x5b
 800828e:	db49      	blt.n	8008324 <objValue+0x1a8>
 8008290:	3b5b      	subs	r3, #91	@ 0x5b
 8008292:	2b20      	cmp	r3, #32
 8008294:	d846      	bhi.n	8008324 <objValue+0x1a8>
 8008296:	009a      	lsls	r2, r3, #2
 8008298:	4b2c      	ldr	r3, [pc, #176]	@ (800834c <objValue+0x1d0>)
 800829a:	18d3      	adds	r3, r2, r3
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	469f      	mov	pc, r3
            case '{':
                property->type    = JSON_OBJ;
 80082a0:	69bb      	ldr	r3, [r7, #24]
 80082a2:	2200      	movs	r2, #0
 80082a4:	741a      	strb	r2, [r3, #16]
                property->u.c.child = 0;
 80082a6:	69bb      	ldr	r3, [r7, #24]
 80082a8:	2200      	movs	r2, #0
 80082aa:	609a      	str	r2, [r3, #8]
                property->sibling = obj;
 80082ac:	69bb      	ldr	r3, [r7, #24]
 80082ae:	68ba      	ldr	r2, [r7, #8]
 80082b0:	601a      	str	r2, [r3, #0]
                obj = property;
 80082b2:	69bb      	ldr	r3, [r7, #24]
 80082b4:	60bb      	str	r3, [r7, #8]
                ++ptr;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	3301      	adds	r3, #1
 80082ba:	60fb      	str	r3, [r7, #12]
                break;
 80082bc:	e03b      	b.n	8008336 <objValue+0x1ba>
            case '[':
                property->type    = JSON_ARRAY;
 80082be:	69bb      	ldr	r3, [r7, #24]
 80082c0:	2201      	movs	r2, #1
 80082c2:	741a      	strb	r2, [r3, #16]
                property->u.c.child = 0;
 80082c4:	69bb      	ldr	r3, [r7, #24]
 80082c6:	2200      	movs	r2, #0
 80082c8:	609a      	str	r2, [r3, #8]
                property->sibling = obj;
 80082ca:	69bb      	ldr	r3, [r7, #24]
 80082cc:	68ba      	ldr	r2, [r7, #8]
 80082ce:	601a      	str	r2, [r3, #0]
                obj = property;
 80082d0:	69bb      	ldr	r3, [r7, #24]
 80082d2:	60bb      	str	r3, [r7, #8]
                ++ptr;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	3301      	adds	r3, #1
 80082d8:	60fb      	str	r3, [r7, #12]
                break;
 80082da:	e02c      	b.n	8008336 <objValue+0x1ba>
            case '\"': ptr = textValue( ptr, property );  break;
 80082dc:	69ba      	ldr	r2, [r7, #24]
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	0011      	movs	r1, r2
 80082e2:	0018      	movs	r0, r3
 80082e4:	f7ff fd6c 	bl	8007dc0 <textValue>
 80082e8:	0003      	movs	r3, r0
 80082ea:	60fb      	str	r3, [r7, #12]
 80082ec:	e023      	b.n	8008336 <objValue+0x1ba>
            case 't':  ptr = trueValue( ptr, property );  break;
 80082ee:	69ba      	ldr	r2, [r7, #24]
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	0011      	movs	r1, r2
 80082f4:	0018      	movs	r0, r3
 80082f6:	f7ff fdcf 	bl	8007e98 <trueValue>
 80082fa:	0003      	movs	r3, r0
 80082fc:	60fb      	str	r3, [r7, #12]
 80082fe:	e01a      	b.n	8008336 <objValue+0x1ba>
            case 'f':  ptr = falseValue( ptr, property ); break;
 8008300:	69ba      	ldr	r2, [r7, #24]
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	0011      	movs	r1, r2
 8008306:	0018      	movs	r0, r3
 8008308:	f7ff fdd8 	bl	8007ebc <falseValue>
 800830c:	0003      	movs	r3, r0
 800830e:	60fb      	str	r3, [r7, #12]
 8008310:	e011      	b.n	8008336 <objValue+0x1ba>
            case 'n':  ptr = nullValue( ptr, property );  break;
 8008312:	69ba      	ldr	r2, [r7, #24]
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	0011      	movs	r1, r2
 8008318:	0018      	movs	r0, r3
 800831a:	f7ff fde1 	bl	8007ee0 <nullValue>
 800831e:	0003      	movs	r3, r0
 8008320:	60fb      	str	r3, [r7, #12]
 8008322:	e008      	b.n	8008336 <objValue+0x1ba>
            default:   ptr = numValue( ptr, property );   break;
 8008324:	69ba      	ldr	r2, [r7, #24]
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	0011      	movs	r1, r2
 800832a:	0018      	movs	r0, r3
 800832c:	f7ff fe3c 	bl	8007fa8 <numValue>
 8008330:	0003      	movs	r3, r0
 8008332:	60fb      	str	r3, [r7, #12]
 8008334:	46c0      	nop			@ (mov r8, r8)
        }
        if ( !ptr ) return 0;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d000      	beq.n	800833e <objValue+0x1c2>
 800833c:	e736      	b.n	80081ac <objValue+0x30>
 800833e:	2300      	movs	r3, #0
 8008340:	e000      	b.n	8008344 <objValue+0x1c8>
    for(;;) {
 8008342:	e733      	b.n	80081ac <objValue+0x30>
    }
}
 8008344:	0018      	movs	r0, r3
 8008346:	46bd      	mov	sp, r7
 8008348:	b008      	add	sp, #32
 800834a:	bd80      	pop	{r7, pc}
 800834c:	08011c8c 	.word	0x08011c8c

08008350 <poolInit>:

/** Initialize a json pool.
  * @param pool The handler of the pool.
  * @return a instance of a json. */
static json_t* poolInit( jsonPool_t* pool ) {
 8008350:	b580      	push	{r7, lr}
 8008352:	b084      	sub	sp, #16
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
    jsonStaticPool_t *spool = json_containerOf( pool, jsonStaticPool_t, pool );
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	3b0c      	subs	r3, #12
 800835c:	60fb      	str	r3, [r7, #12]
    spool->nextFree = 1;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	2201      	movs	r2, #1
 8008362:	609a      	str	r2, [r3, #8]
    return spool->mem;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
}
 8008368:	0018      	movs	r0, r3
 800836a:	46bd      	mov	sp, r7
 800836c:	b004      	add	sp, #16
 800836e:	bd80      	pop	{r7, pc}

08008370 <poolAlloc>:

/** Create an instance of a json from a pool.
  * @param pool The handler of the pool.
  * @retval The handler of the new instance if success.
  * @retval Null pointer if the pool was empty. */
static json_t* poolAlloc( jsonPool_t* pool ) {
 8008370:	b580      	push	{r7, lr}
 8008372:	b084      	sub	sp, #16
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
    jsonStaticPool_t *spool = json_containerOf( pool, jsonStaticPool_t, pool );
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	3b0c      	subs	r3, #12
 800837c:	60fb      	str	r3, [r7, #12]
    if ( spool->nextFree >= spool->qty ) return 0;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	689a      	ldr	r2, [r3, #8]
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	685b      	ldr	r3, [r3, #4]
 8008386:	429a      	cmp	r2, r3
 8008388:	d301      	bcc.n	800838e <poolAlloc+0x1e>
 800838a:	2300      	movs	r3, #0
 800838c:	e00b      	b.n	80083a6 <poolAlloc+0x36>
    return spool->mem + spool->nextFree++;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	6819      	ldr	r1, [r3, #0]
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	689a      	ldr	r2, [r3, #8]
 8008396:	1c50      	adds	r0, r2, #1
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	6098      	str	r0, [r3, #8]
 800839c:	0013      	movs	r3, r2
 800839e:	009b      	lsls	r3, r3, #2
 80083a0:	189b      	adds	r3, r3, r2
 80083a2:	009b      	lsls	r3, r3, #2
 80083a4:	18cb      	adds	r3, r1, r3
}
 80083a6:	0018      	movs	r0, r3
 80083a8:	46bd      	mov	sp, r7
 80083aa:	b004      	add	sp, #16
 80083ac:	bd80      	pop	{r7, pc}

080083ae <isOneOfThem>:

/** Checks whether an character belongs to set.
  * @param ch Character value to be checked.
  * @param set Set of characters. It is just a null-terminated string.
  * @return true or false there is membership or not. */
static bool isOneOfThem( char ch, char const* set ) {
 80083ae:	b580      	push	{r7, lr}
 80083b0:	b082      	sub	sp, #8
 80083b2:	af00      	add	r7, sp, #0
 80083b4:	0002      	movs	r2, r0
 80083b6:	6039      	str	r1, [r7, #0]
 80083b8:	1dfb      	adds	r3, r7, #7
 80083ba:	701a      	strb	r2, [r3, #0]
    while( *set != '\0' )
 80083bc:	e009      	b.n	80083d2 <isOneOfThem+0x24>
        if ( ch == *set++ )
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	1c5a      	adds	r2, r3, #1
 80083c2:	603a      	str	r2, [r7, #0]
 80083c4:	781b      	ldrb	r3, [r3, #0]
 80083c6:	1dfa      	adds	r2, r7, #7
 80083c8:	7812      	ldrb	r2, [r2, #0]
 80083ca:	429a      	cmp	r2, r3
 80083cc:	d101      	bne.n	80083d2 <isOneOfThem+0x24>
            return true;
 80083ce:	2301      	movs	r3, #1
 80083d0:	e004      	b.n	80083dc <isOneOfThem+0x2e>
    while( *set != '\0' )
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	781b      	ldrb	r3, [r3, #0]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d1f1      	bne.n	80083be <isOneOfThem+0x10>
    return false;
 80083da:	2300      	movs	r3, #0
}
 80083dc:	0018      	movs	r0, r3
 80083de:	46bd      	mov	sp, r7
 80083e0:	b002      	add	sp, #8
 80083e2:	bd80      	pop	{r7, pc}

080083e4 <goWhile>:

/** Increases a pointer while it points to a character that belongs to a set.
  * @param str The initial pointer value.
  * @param set Set of characters. It is just a null-terminated string.
  * @return The final pointer value or null pointer if the null character was found. */
static char* goWhile( char* str, char const* set ) {
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b082      	sub	sp, #8
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
 80083ec:	6039      	str	r1, [r7, #0]
    for(; *str != '\0'; ++str ) {
 80083ee:	e012      	b.n	8008416 <goWhile+0x32>
        if ( !isOneOfThem( *str, set ) )
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	781b      	ldrb	r3, [r3, #0]
 80083f4:	683a      	ldr	r2, [r7, #0]
 80083f6:	0011      	movs	r1, r2
 80083f8:	0018      	movs	r0, r3
 80083fa:	f7ff ffd8 	bl	80083ae <isOneOfThem>
 80083fe:	0003      	movs	r3, r0
 8008400:	001a      	movs	r2, r3
 8008402:	2301      	movs	r3, #1
 8008404:	4053      	eors	r3, r2
 8008406:	b2db      	uxtb	r3, r3
 8008408:	2b00      	cmp	r3, #0
 800840a:	d001      	beq.n	8008410 <goWhile+0x2c>
            return str;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	e007      	b.n	8008420 <goWhile+0x3c>
    for(; *str != '\0'; ++str ) {
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	3301      	adds	r3, #1
 8008414:	607b      	str	r3, [r7, #4]
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	781b      	ldrb	r3, [r3, #0]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d1e8      	bne.n	80083f0 <goWhile+0xc>
    }
    return 0;
 800841e:	2300      	movs	r3, #0
}
 8008420:	0018      	movs	r0, r3
 8008422:	46bd      	mov	sp, r7
 8008424:	b002      	add	sp, #8
 8008426:	bd80      	pop	{r7, pc}

08008428 <goBlank>:
static char const* const blank = " \n\r\t\f";

/** Increases a pointer while it points to a white space character.
  * @param str The initial pointer value.
  * @return The final pointer value or null pointer if the null character was found. */
static char* goBlank( char* str ) {
 8008428:	b580      	push	{r7, lr}
 800842a:	b082      	sub	sp, #8
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
    return goWhile( str, blank );
 8008430:	4a05      	ldr	r2, [pc, #20]	@ (8008448 <goBlank+0x20>)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	0011      	movs	r1, r2
 8008436:	0018      	movs	r0, r3
 8008438:	f7ff ffd4 	bl	80083e4 <goWhile>
 800843c:	0003      	movs	r3, r0
}
 800843e:	0018      	movs	r0, r3
 8008440:	46bd      	mov	sp, r7
 8008442:	b002      	add	sp, #8
 8008444:	bd80      	pop	{r7, pc}
 8008446:	46c0      	nop			@ (mov r8, r8)
 8008448:	08011514 	.word	0x08011514

0800844c <goNum>:

/** Increases a pointer while it points to a decimal digit character.
  * @param str The initial pointer value.
  * @return The final pointer value or null pointer if the null character was found. */
static char* goNum( char* str ) {
 800844c:	b580      	push	{r7, lr}
 800844e:	b082      	sub	sp, #8
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
    for( ; *str != '\0'; ++str ) {
 8008454:	e00e      	b.n	8008474 <goNum+0x28>
        if ( !isdigit( (int)(*str) ) )
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	781b      	ldrb	r3, [r3, #0]
 800845a:	1c5a      	adds	r2, r3, #1
 800845c:	4b0a      	ldr	r3, [pc, #40]	@ (8008488 <goNum+0x3c>)
 800845e:	18d3      	adds	r3, r2, r3
 8008460:	781b      	ldrb	r3, [r3, #0]
 8008462:	001a      	movs	r2, r3
 8008464:	2304      	movs	r3, #4
 8008466:	4013      	ands	r3, r2
 8008468:	d101      	bne.n	800846e <goNum+0x22>
            return str;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	e007      	b.n	800847e <goNum+0x32>
    for( ; *str != '\0'; ++str ) {
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	3301      	adds	r3, #1
 8008472:	607b      	str	r3, [r7, #4]
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	781b      	ldrb	r3, [r3, #0]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d1ec      	bne.n	8008456 <goNum+0xa>
    }
    return 0;
 800847c:	2300      	movs	r3, #0
}
 800847e:	0018      	movs	r0, r3
 8008480:	46bd      	mov	sp, r7
 8008482:	b002      	add	sp, #8
 8008484:	bd80      	pop	{r7, pc}
 8008486:	46c0      	nop			@ (mov r8, r8)
 8008488:	08011f80 	.word	0x08011f80

0800848c <setToNull>:
static char const* const endofblock = "}]";

/** Set a char to '\0' and increase its pointer if the char is different to '}' or ']'.
  * @param ch Pointer to character.
  * @return  Final value pointer. */
static char* setToNull( char* ch ) {
 800848c:	b580      	push	{r7, lr}
 800848e:	b082      	sub	sp, #8
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
    if ( !isOneOfThem( *ch, endofblock ) ) *ch++ = '\0';
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	781b      	ldrb	r3, [r3, #0]
 8008498:	4a0a      	ldr	r2, [pc, #40]	@ (80084c4 <setToNull+0x38>)
 800849a:	0011      	movs	r1, r2
 800849c:	0018      	movs	r0, r3
 800849e:	f7ff ff86 	bl	80083ae <isOneOfThem>
 80084a2:	0003      	movs	r3, r0
 80084a4:	001a      	movs	r2, r3
 80084a6:	2301      	movs	r3, #1
 80084a8:	4053      	eors	r3, r2
 80084aa:	b2db      	uxtb	r3, r3
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d004      	beq.n	80084ba <setToNull+0x2e>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	1c5a      	adds	r2, r3, #1
 80084b4:	607a      	str	r2, [r7, #4]
 80084b6:	2200      	movs	r2, #0
 80084b8:	701a      	strb	r2, [r3, #0]
    return ch;
 80084ba:	687b      	ldr	r3, [r7, #4]
}
 80084bc:	0018      	movs	r0, r3
 80084be:	46bd      	mov	sp, r7
 80084c0:	b002      	add	sp, #8
 80084c2:	bd80      	pop	{r7, pc}
 80084c4:	0801151c 	.word	0x0801151c

080084c8 <isEndOfPrimitive>:

/** Indicate if a character is the end of a primitive value. */
static bool isEndOfPrimitive( char ch ) {
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b082      	sub	sp, #8
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	0002      	movs	r2, r0
 80084d0:	1dfb      	adds	r3, r7, #7
 80084d2:	701a      	strb	r2, [r3, #0]
    return ch == ',' || isOneOfThem( ch, blank ) || isOneOfThem( ch, endofblock );
 80084d4:	1dfb      	adds	r3, r7, #7
 80084d6:	781b      	ldrb	r3, [r3, #0]
 80084d8:	2b2c      	cmp	r3, #44	@ 0x2c
 80084da:	d011      	beq.n	8008500 <isEndOfPrimitive+0x38>
 80084dc:	4a0e      	ldr	r2, [pc, #56]	@ (8008518 <isEndOfPrimitive+0x50>)
 80084de:	1dfb      	adds	r3, r7, #7
 80084e0:	781b      	ldrb	r3, [r3, #0]
 80084e2:	0011      	movs	r1, r2
 80084e4:	0018      	movs	r0, r3
 80084e6:	f7ff ff62 	bl	80083ae <isOneOfThem>
 80084ea:	1e03      	subs	r3, r0, #0
 80084ec:	d108      	bne.n	8008500 <isEndOfPrimitive+0x38>
 80084ee:	4a0b      	ldr	r2, [pc, #44]	@ (800851c <isEndOfPrimitive+0x54>)
 80084f0:	1dfb      	adds	r3, r7, #7
 80084f2:	781b      	ldrb	r3, [r3, #0]
 80084f4:	0011      	movs	r1, r2
 80084f6:	0018      	movs	r0, r3
 80084f8:	f7ff ff59 	bl	80083ae <isOneOfThem>
 80084fc:	1e03      	subs	r3, r0, #0
 80084fe:	d001      	beq.n	8008504 <isEndOfPrimitive+0x3c>
 8008500:	2301      	movs	r3, #1
 8008502:	e000      	b.n	8008506 <isEndOfPrimitive+0x3e>
 8008504:	2300      	movs	r3, #0
 8008506:	1c1a      	adds	r2, r3, #0
 8008508:	2301      	movs	r3, #1
 800850a:	4013      	ands	r3, r2
 800850c:	b2db      	uxtb	r3, r3
}
 800850e:	0018      	movs	r0, r3
 8008510:	46bd      	mov	sp, r7
 8008512:	b002      	add	sp, #8
 8008514:	bd80      	pop	{r7, pc}
 8008516:	46c0      	nop			@ (mov r8, r8)
 8008518:	08011514 	.word	0x08011514
 800851c:	0801151c 	.word	0x0801151c

08008520 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8008520:	480d      	ldr	r0, [pc, #52]	@ (8008558 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8008522:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8008524:	f7ff faac 	bl	8007a80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008528:	480c      	ldr	r0, [pc, #48]	@ (800855c <LoopForever+0x6>)
  ldr r1, =_edata
 800852a:	490d      	ldr	r1, [pc, #52]	@ (8008560 <LoopForever+0xa>)
  ldr r2, =_sidata
 800852c:	4a0d      	ldr	r2, [pc, #52]	@ (8008564 <LoopForever+0xe>)
  movs r3, #0
 800852e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008530:	e002      	b.n	8008538 <LoopCopyDataInit>

08008532 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008532:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008534:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008536:	3304      	adds	r3, #4

08008538 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008538:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800853a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800853c:	d3f9      	bcc.n	8008532 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800853e:	4a0a      	ldr	r2, [pc, #40]	@ (8008568 <LoopForever+0x12>)
  ldr r4, =_ebss
 8008540:	4c0a      	ldr	r4, [pc, #40]	@ (800856c <LoopForever+0x16>)
  movs r3, #0
 8008542:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008544:	e001      	b.n	800854a <LoopFillZerobss>

08008546 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008546:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008548:	3204      	adds	r2, #4

0800854a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800854a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800854c:	d3fb      	bcc.n	8008546 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800854e:	f006 fba5 	bl	800ec9c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8008552:	f7fc fa81 	bl	8004a58 <main>

08008556 <LoopForever>:

LoopForever:
  b LoopForever
 8008556:	e7fe      	b.n	8008556 <LoopForever>
  ldr   r0, =_estack
 8008558:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 800855c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008560:	20000f0c 	.word	0x20000f0c
  ldr r2, =_sidata
 8008564:	080121b0 	.word	0x080121b0
  ldr r2, =_sbss
 8008568:	20000f0c 	.word	0x20000f0c
  ldr r4, =_ebss
 800856c:	20002300 	.word	0x20002300

08008570 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008570:	e7fe      	b.n	8008570 <ADC1_COMP_IRQHandler>
	...

08008574 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b082      	sub	sp, #8
 8008578:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800857a:	1dfb      	adds	r3, r7, #7
 800857c:	2200      	movs	r2, #0
 800857e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008580:	4b0b      	ldr	r3, [pc, #44]	@ (80085b0 <HAL_Init+0x3c>)
 8008582:	681a      	ldr	r2, [r3, #0]
 8008584:	4b0a      	ldr	r3, [pc, #40]	@ (80085b0 <HAL_Init+0x3c>)
 8008586:	2180      	movs	r1, #128	@ 0x80
 8008588:	0049      	lsls	r1, r1, #1
 800858a:	430a      	orrs	r2, r1
 800858c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800858e:	2003      	movs	r0, #3
 8008590:	f000 f810 	bl	80085b4 <HAL_InitTick>
 8008594:	1e03      	subs	r3, r0, #0
 8008596:	d003      	beq.n	80085a0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8008598:	1dfb      	adds	r3, r7, #7
 800859a:	2201      	movs	r2, #1
 800859c:	701a      	strb	r2, [r3, #0]
 800859e:	e001      	b.n	80085a4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80085a0:	f7fe ff28 	bl	80073f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80085a4:	1dfb      	adds	r3, r7, #7
 80085a6:	781b      	ldrb	r3, [r3, #0]
}
 80085a8:	0018      	movs	r0, r3
 80085aa:	46bd      	mov	sp, r7
 80085ac:	b002      	add	sp, #8
 80085ae:	bd80      	pop	{r7, pc}
 80085b0:	40022000 	.word	0x40022000

080085b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80085b4:	b590      	push	{r4, r7, lr}
 80085b6:	b085      	sub	sp, #20
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80085bc:	230f      	movs	r3, #15
 80085be:	18fb      	adds	r3, r7, r3
 80085c0:	2200      	movs	r2, #0
 80085c2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80085c4:	4b1d      	ldr	r3, [pc, #116]	@ (800863c <HAL_InitTick+0x88>)
 80085c6:	781b      	ldrb	r3, [r3, #0]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d02b      	beq.n	8008624 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80085cc:	4b1c      	ldr	r3, [pc, #112]	@ (8008640 <HAL_InitTick+0x8c>)
 80085ce:	681c      	ldr	r4, [r3, #0]
 80085d0:	4b1a      	ldr	r3, [pc, #104]	@ (800863c <HAL_InitTick+0x88>)
 80085d2:	781b      	ldrb	r3, [r3, #0]
 80085d4:	0019      	movs	r1, r3
 80085d6:	23fa      	movs	r3, #250	@ 0xfa
 80085d8:	0098      	lsls	r0, r3, #2
 80085da:	f7f7 fdb9 	bl	8000150 <__udivsi3>
 80085de:	0003      	movs	r3, r0
 80085e0:	0019      	movs	r1, r3
 80085e2:	0020      	movs	r0, r4
 80085e4:	f7f7 fdb4 	bl	8000150 <__udivsi3>
 80085e8:	0003      	movs	r3, r0
 80085ea:	0018      	movs	r0, r3
 80085ec:	f000 f953 	bl	8008896 <HAL_SYSTICK_Config>
 80085f0:	1e03      	subs	r3, r0, #0
 80085f2:	d112      	bne.n	800861a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2b03      	cmp	r3, #3
 80085f8:	d80a      	bhi.n	8008610 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80085fa:	6879      	ldr	r1, [r7, #4]
 80085fc:	2301      	movs	r3, #1
 80085fe:	425b      	negs	r3, r3
 8008600:	2200      	movs	r2, #0
 8008602:	0018      	movs	r0, r3
 8008604:	f000 f922 	bl	800884c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8008608:	4b0e      	ldr	r3, [pc, #56]	@ (8008644 <HAL_InitTick+0x90>)
 800860a:	687a      	ldr	r2, [r7, #4]
 800860c:	601a      	str	r2, [r3, #0]
 800860e:	e00d      	b.n	800862c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8008610:	230f      	movs	r3, #15
 8008612:	18fb      	adds	r3, r7, r3
 8008614:	2201      	movs	r2, #1
 8008616:	701a      	strb	r2, [r3, #0]
 8008618:	e008      	b.n	800862c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800861a:	230f      	movs	r3, #15
 800861c:	18fb      	adds	r3, r7, r3
 800861e:	2201      	movs	r2, #1
 8008620:	701a      	strb	r2, [r3, #0]
 8008622:	e003      	b.n	800862c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8008624:	230f      	movs	r3, #15
 8008626:	18fb      	adds	r3, r7, r3
 8008628:	2201      	movs	r2, #1
 800862a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800862c:	230f      	movs	r3, #15
 800862e:	18fb      	adds	r3, r7, r3
 8008630:	781b      	ldrb	r3, [r3, #0]
}
 8008632:	0018      	movs	r0, r3
 8008634:	46bd      	mov	sp, r7
 8008636:	b005      	add	sp, #20
 8008638:	bd90      	pop	{r4, r7, pc}
 800863a:	46c0      	nop			@ (mov r8, r8)
 800863c:	20000d40 	.word	0x20000d40
 8008640:	20000d38 	.word	0x20000d38
 8008644:	20000d3c 	.word	0x20000d3c

08008648 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800864c:	4b05      	ldr	r3, [pc, #20]	@ (8008664 <HAL_IncTick+0x1c>)
 800864e:	781b      	ldrb	r3, [r3, #0]
 8008650:	001a      	movs	r2, r3
 8008652:	4b05      	ldr	r3, [pc, #20]	@ (8008668 <HAL_IncTick+0x20>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	18d2      	adds	r2, r2, r3
 8008658:	4b03      	ldr	r3, [pc, #12]	@ (8008668 <HAL_IncTick+0x20>)
 800865a:	601a      	str	r2, [r3, #0]
}
 800865c:	46c0      	nop			@ (mov r8, r8)
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}
 8008662:	46c0      	nop			@ (mov r8, r8)
 8008664:	20000d40 	.word	0x20000d40
 8008668:	200021b0 	.word	0x200021b0

0800866c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	af00      	add	r7, sp, #0
  return uwTick;
 8008670:	4b02      	ldr	r3, [pc, #8]	@ (800867c <HAL_GetTick+0x10>)
 8008672:	681b      	ldr	r3, [r3, #0]
}
 8008674:	0018      	movs	r0, r3
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}
 800867a:	46c0      	nop			@ (mov r8, r8)
 800867c:	200021b0 	.word	0x200021b0

08008680 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b084      	sub	sp, #16
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008688:	f7ff fff0 	bl	800866c <HAL_GetTick>
 800868c:	0003      	movs	r3, r0
 800868e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	3301      	adds	r3, #1
 8008698:	d005      	beq.n	80086a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800869a:	4b0a      	ldr	r3, [pc, #40]	@ (80086c4 <HAL_Delay+0x44>)
 800869c:	781b      	ldrb	r3, [r3, #0]
 800869e:	001a      	movs	r2, r3
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	189b      	adds	r3, r3, r2
 80086a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80086a6:	46c0      	nop			@ (mov r8, r8)
 80086a8:	f7ff ffe0 	bl	800866c <HAL_GetTick>
 80086ac:	0002      	movs	r2, r0
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	1ad3      	subs	r3, r2, r3
 80086b2:	68fa      	ldr	r2, [r7, #12]
 80086b4:	429a      	cmp	r2, r3
 80086b6:	d8f7      	bhi.n	80086a8 <HAL_Delay+0x28>
  {
  }
}
 80086b8:	46c0      	nop			@ (mov r8, r8)
 80086ba:	46c0      	nop			@ (mov r8, r8)
 80086bc:	46bd      	mov	sp, r7
 80086be:	b004      	add	sp, #16
 80086c0:	bd80      	pop	{r7, pc}
 80086c2:	46c0      	nop			@ (mov r8, r8)
 80086c4:	20000d40 	.word	0x20000d40

080086c8 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b082      	sub	sp, #8
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80086d0:	4b06      	ldr	r3, [pc, #24]	@ (80086ec <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	4a06      	ldr	r2, [pc, #24]	@ (80086f0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80086d6:	4013      	ands	r3, r2
 80086d8:	0019      	movs	r1, r3
 80086da:	4b04      	ldr	r3, [pc, #16]	@ (80086ec <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80086dc:	687a      	ldr	r2, [r7, #4]
 80086de:	430a      	orrs	r2, r1
 80086e0:	601a      	str	r2, [r3, #0]
}
 80086e2:	46c0      	nop			@ (mov r8, r8)
 80086e4:	46bd      	mov	sp, r7
 80086e6:	b002      	add	sp, #8
 80086e8:	bd80      	pop	{r7, pc}
 80086ea:	46c0      	nop			@ (mov r8, r8)
 80086ec:	40010000 	.word	0x40010000
 80086f0:	fffff9ff 	.word	0xfffff9ff

080086f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b082      	sub	sp, #8
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	0002      	movs	r2, r0
 80086fc:	1dfb      	adds	r3, r7, #7
 80086fe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8008700:	1dfb      	adds	r3, r7, #7
 8008702:	781b      	ldrb	r3, [r3, #0]
 8008704:	2b7f      	cmp	r3, #127	@ 0x7f
 8008706:	d809      	bhi.n	800871c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008708:	1dfb      	adds	r3, r7, #7
 800870a:	781b      	ldrb	r3, [r3, #0]
 800870c:	001a      	movs	r2, r3
 800870e:	231f      	movs	r3, #31
 8008710:	401a      	ands	r2, r3
 8008712:	4b04      	ldr	r3, [pc, #16]	@ (8008724 <__NVIC_EnableIRQ+0x30>)
 8008714:	2101      	movs	r1, #1
 8008716:	4091      	lsls	r1, r2
 8008718:	000a      	movs	r2, r1
 800871a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800871c:	46c0      	nop			@ (mov r8, r8)
 800871e:	46bd      	mov	sp, r7
 8008720:	b002      	add	sp, #8
 8008722:	bd80      	pop	{r7, pc}
 8008724:	e000e100 	.word	0xe000e100

08008728 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008728:	b590      	push	{r4, r7, lr}
 800872a:	b083      	sub	sp, #12
 800872c:	af00      	add	r7, sp, #0
 800872e:	0002      	movs	r2, r0
 8008730:	6039      	str	r1, [r7, #0]
 8008732:	1dfb      	adds	r3, r7, #7
 8008734:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8008736:	1dfb      	adds	r3, r7, #7
 8008738:	781b      	ldrb	r3, [r3, #0]
 800873a:	2b7f      	cmp	r3, #127	@ 0x7f
 800873c:	d828      	bhi.n	8008790 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800873e:	4a2f      	ldr	r2, [pc, #188]	@ (80087fc <__NVIC_SetPriority+0xd4>)
 8008740:	1dfb      	adds	r3, r7, #7
 8008742:	781b      	ldrb	r3, [r3, #0]
 8008744:	b25b      	sxtb	r3, r3
 8008746:	089b      	lsrs	r3, r3, #2
 8008748:	33c0      	adds	r3, #192	@ 0xc0
 800874a:	009b      	lsls	r3, r3, #2
 800874c:	589b      	ldr	r3, [r3, r2]
 800874e:	1dfa      	adds	r2, r7, #7
 8008750:	7812      	ldrb	r2, [r2, #0]
 8008752:	0011      	movs	r1, r2
 8008754:	2203      	movs	r2, #3
 8008756:	400a      	ands	r2, r1
 8008758:	00d2      	lsls	r2, r2, #3
 800875a:	21ff      	movs	r1, #255	@ 0xff
 800875c:	4091      	lsls	r1, r2
 800875e:	000a      	movs	r2, r1
 8008760:	43d2      	mvns	r2, r2
 8008762:	401a      	ands	r2, r3
 8008764:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	019b      	lsls	r3, r3, #6
 800876a:	22ff      	movs	r2, #255	@ 0xff
 800876c:	401a      	ands	r2, r3
 800876e:	1dfb      	adds	r3, r7, #7
 8008770:	781b      	ldrb	r3, [r3, #0]
 8008772:	0018      	movs	r0, r3
 8008774:	2303      	movs	r3, #3
 8008776:	4003      	ands	r3, r0
 8008778:	00db      	lsls	r3, r3, #3
 800877a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800877c:	481f      	ldr	r0, [pc, #124]	@ (80087fc <__NVIC_SetPriority+0xd4>)
 800877e:	1dfb      	adds	r3, r7, #7
 8008780:	781b      	ldrb	r3, [r3, #0]
 8008782:	b25b      	sxtb	r3, r3
 8008784:	089b      	lsrs	r3, r3, #2
 8008786:	430a      	orrs	r2, r1
 8008788:	33c0      	adds	r3, #192	@ 0xc0
 800878a:	009b      	lsls	r3, r3, #2
 800878c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800878e:	e031      	b.n	80087f4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008790:	4a1b      	ldr	r2, [pc, #108]	@ (8008800 <__NVIC_SetPriority+0xd8>)
 8008792:	1dfb      	adds	r3, r7, #7
 8008794:	781b      	ldrb	r3, [r3, #0]
 8008796:	0019      	movs	r1, r3
 8008798:	230f      	movs	r3, #15
 800879a:	400b      	ands	r3, r1
 800879c:	3b08      	subs	r3, #8
 800879e:	089b      	lsrs	r3, r3, #2
 80087a0:	3306      	adds	r3, #6
 80087a2:	009b      	lsls	r3, r3, #2
 80087a4:	18d3      	adds	r3, r2, r3
 80087a6:	3304      	adds	r3, #4
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	1dfa      	adds	r2, r7, #7
 80087ac:	7812      	ldrb	r2, [r2, #0]
 80087ae:	0011      	movs	r1, r2
 80087b0:	2203      	movs	r2, #3
 80087b2:	400a      	ands	r2, r1
 80087b4:	00d2      	lsls	r2, r2, #3
 80087b6:	21ff      	movs	r1, #255	@ 0xff
 80087b8:	4091      	lsls	r1, r2
 80087ba:	000a      	movs	r2, r1
 80087bc:	43d2      	mvns	r2, r2
 80087be:	401a      	ands	r2, r3
 80087c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	019b      	lsls	r3, r3, #6
 80087c6:	22ff      	movs	r2, #255	@ 0xff
 80087c8:	401a      	ands	r2, r3
 80087ca:	1dfb      	adds	r3, r7, #7
 80087cc:	781b      	ldrb	r3, [r3, #0]
 80087ce:	0018      	movs	r0, r3
 80087d0:	2303      	movs	r3, #3
 80087d2:	4003      	ands	r3, r0
 80087d4:	00db      	lsls	r3, r3, #3
 80087d6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80087d8:	4809      	ldr	r0, [pc, #36]	@ (8008800 <__NVIC_SetPriority+0xd8>)
 80087da:	1dfb      	adds	r3, r7, #7
 80087dc:	781b      	ldrb	r3, [r3, #0]
 80087de:	001c      	movs	r4, r3
 80087e0:	230f      	movs	r3, #15
 80087e2:	4023      	ands	r3, r4
 80087e4:	3b08      	subs	r3, #8
 80087e6:	089b      	lsrs	r3, r3, #2
 80087e8:	430a      	orrs	r2, r1
 80087ea:	3306      	adds	r3, #6
 80087ec:	009b      	lsls	r3, r3, #2
 80087ee:	18c3      	adds	r3, r0, r3
 80087f0:	3304      	adds	r3, #4
 80087f2:	601a      	str	r2, [r3, #0]
}
 80087f4:	46c0      	nop			@ (mov r8, r8)
 80087f6:	46bd      	mov	sp, r7
 80087f8:	b003      	add	sp, #12
 80087fa:	bd90      	pop	{r4, r7, pc}
 80087fc:	e000e100 	.word	0xe000e100
 8008800:	e000ed00 	.word	0xe000ed00

08008804 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b082      	sub	sp, #8
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	1e5a      	subs	r2, r3, #1
 8008810:	2380      	movs	r3, #128	@ 0x80
 8008812:	045b      	lsls	r3, r3, #17
 8008814:	429a      	cmp	r2, r3
 8008816:	d301      	bcc.n	800881c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008818:	2301      	movs	r3, #1
 800881a:	e010      	b.n	800883e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800881c:	4b0a      	ldr	r3, [pc, #40]	@ (8008848 <SysTick_Config+0x44>)
 800881e:	687a      	ldr	r2, [r7, #4]
 8008820:	3a01      	subs	r2, #1
 8008822:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008824:	2301      	movs	r3, #1
 8008826:	425b      	negs	r3, r3
 8008828:	2103      	movs	r1, #3
 800882a:	0018      	movs	r0, r3
 800882c:	f7ff ff7c 	bl	8008728 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008830:	4b05      	ldr	r3, [pc, #20]	@ (8008848 <SysTick_Config+0x44>)
 8008832:	2200      	movs	r2, #0
 8008834:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008836:	4b04      	ldr	r3, [pc, #16]	@ (8008848 <SysTick_Config+0x44>)
 8008838:	2207      	movs	r2, #7
 800883a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800883c:	2300      	movs	r3, #0
}
 800883e:	0018      	movs	r0, r3
 8008840:	46bd      	mov	sp, r7
 8008842:	b002      	add	sp, #8
 8008844:	bd80      	pop	{r7, pc}
 8008846:	46c0      	nop			@ (mov r8, r8)
 8008848:	e000e010 	.word	0xe000e010

0800884c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b084      	sub	sp, #16
 8008850:	af00      	add	r7, sp, #0
 8008852:	60b9      	str	r1, [r7, #8]
 8008854:	607a      	str	r2, [r7, #4]
 8008856:	210f      	movs	r1, #15
 8008858:	187b      	adds	r3, r7, r1
 800885a:	1c02      	adds	r2, r0, #0
 800885c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800885e:	68ba      	ldr	r2, [r7, #8]
 8008860:	187b      	adds	r3, r7, r1
 8008862:	781b      	ldrb	r3, [r3, #0]
 8008864:	b25b      	sxtb	r3, r3
 8008866:	0011      	movs	r1, r2
 8008868:	0018      	movs	r0, r3
 800886a:	f7ff ff5d 	bl	8008728 <__NVIC_SetPriority>
}
 800886e:	46c0      	nop			@ (mov r8, r8)
 8008870:	46bd      	mov	sp, r7
 8008872:	b004      	add	sp, #16
 8008874:	bd80      	pop	{r7, pc}

08008876 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008876:	b580      	push	{r7, lr}
 8008878:	b082      	sub	sp, #8
 800887a:	af00      	add	r7, sp, #0
 800887c:	0002      	movs	r2, r0
 800887e:	1dfb      	adds	r3, r7, #7
 8008880:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008882:	1dfb      	adds	r3, r7, #7
 8008884:	781b      	ldrb	r3, [r3, #0]
 8008886:	b25b      	sxtb	r3, r3
 8008888:	0018      	movs	r0, r3
 800888a:	f7ff ff33 	bl	80086f4 <__NVIC_EnableIRQ>
}
 800888e:	46c0      	nop			@ (mov r8, r8)
 8008890:	46bd      	mov	sp, r7
 8008892:	b002      	add	sp, #8
 8008894:	bd80      	pop	{r7, pc}

08008896 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008896:	b580      	push	{r7, lr}
 8008898:	b082      	sub	sp, #8
 800889a:	af00      	add	r7, sp, #0
 800889c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	0018      	movs	r0, r3
 80088a2:	f7ff ffaf 	bl	8008804 <SysTick_Config>
 80088a6:	0003      	movs	r3, r0
}
 80088a8:	0018      	movs	r0, r3
 80088aa:	46bd      	mov	sp, r7
 80088ac:	b002      	add	sp, #8
 80088ae:	bd80      	pop	{r7, pc}

080088b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b086      	sub	sp, #24
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
 80088b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80088ba:	2300      	movs	r3, #0
 80088bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80088be:	e14d      	b.n	8008b5c <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	2101      	movs	r1, #1
 80088c6:	697a      	ldr	r2, [r7, #20]
 80088c8:	4091      	lsls	r1, r2
 80088ca:	000a      	movs	r2, r1
 80088cc:	4013      	ands	r3, r2
 80088ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d100      	bne.n	80088d8 <HAL_GPIO_Init+0x28>
 80088d6:	e13e      	b.n	8008b56 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	685b      	ldr	r3, [r3, #4]
 80088dc:	2203      	movs	r2, #3
 80088de:	4013      	ands	r3, r2
 80088e0:	2b01      	cmp	r3, #1
 80088e2:	d005      	beq.n	80088f0 <HAL_GPIO_Init+0x40>
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	685b      	ldr	r3, [r3, #4]
 80088e8:	2203      	movs	r2, #3
 80088ea:	4013      	ands	r3, r2
 80088ec:	2b02      	cmp	r3, #2
 80088ee:	d130      	bne.n	8008952 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	689b      	ldr	r3, [r3, #8]
 80088f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	005b      	lsls	r3, r3, #1
 80088fa:	2203      	movs	r2, #3
 80088fc:	409a      	lsls	r2, r3
 80088fe:	0013      	movs	r3, r2
 8008900:	43da      	mvns	r2, r3
 8008902:	693b      	ldr	r3, [r7, #16]
 8008904:	4013      	ands	r3, r2
 8008906:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	68da      	ldr	r2, [r3, #12]
 800890c:	697b      	ldr	r3, [r7, #20]
 800890e:	005b      	lsls	r3, r3, #1
 8008910:	409a      	lsls	r2, r3
 8008912:	0013      	movs	r3, r2
 8008914:	693a      	ldr	r2, [r7, #16]
 8008916:	4313      	orrs	r3, r2
 8008918:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	693a      	ldr	r2, [r7, #16]
 800891e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	685b      	ldr	r3, [r3, #4]
 8008924:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008926:	2201      	movs	r2, #1
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	409a      	lsls	r2, r3
 800892c:	0013      	movs	r3, r2
 800892e:	43da      	mvns	r2, r3
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	4013      	ands	r3, r2
 8008934:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	685b      	ldr	r3, [r3, #4]
 800893a:	091b      	lsrs	r3, r3, #4
 800893c:	2201      	movs	r2, #1
 800893e:	401a      	ands	r2, r3
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	409a      	lsls	r2, r3
 8008944:	0013      	movs	r3, r2
 8008946:	693a      	ldr	r2, [r7, #16]
 8008948:	4313      	orrs	r3, r2
 800894a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	693a      	ldr	r2, [r7, #16]
 8008950:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	685b      	ldr	r3, [r3, #4]
 8008956:	2203      	movs	r2, #3
 8008958:	4013      	ands	r3, r2
 800895a:	2b03      	cmp	r3, #3
 800895c:	d017      	beq.n	800898e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	68db      	ldr	r3, [r3, #12]
 8008962:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8008964:	697b      	ldr	r3, [r7, #20]
 8008966:	005b      	lsls	r3, r3, #1
 8008968:	2203      	movs	r2, #3
 800896a:	409a      	lsls	r2, r3
 800896c:	0013      	movs	r3, r2
 800896e:	43da      	mvns	r2, r3
 8008970:	693b      	ldr	r3, [r7, #16]
 8008972:	4013      	ands	r3, r2
 8008974:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	689a      	ldr	r2, [r3, #8]
 800897a:	697b      	ldr	r3, [r7, #20]
 800897c:	005b      	lsls	r3, r3, #1
 800897e:	409a      	lsls	r2, r3
 8008980:	0013      	movs	r3, r2
 8008982:	693a      	ldr	r2, [r7, #16]
 8008984:	4313      	orrs	r3, r2
 8008986:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	693a      	ldr	r2, [r7, #16]
 800898c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	685b      	ldr	r3, [r3, #4]
 8008992:	2203      	movs	r2, #3
 8008994:	4013      	ands	r3, r2
 8008996:	2b02      	cmp	r3, #2
 8008998:	d123      	bne.n	80089e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	08da      	lsrs	r2, r3, #3
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	3208      	adds	r2, #8
 80089a2:	0092      	lsls	r2, r2, #2
 80089a4:	58d3      	ldr	r3, [r2, r3]
 80089a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	2207      	movs	r2, #7
 80089ac:	4013      	ands	r3, r2
 80089ae:	009b      	lsls	r3, r3, #2
 80089b0:	220f      	movs	r2, #15
 80089b2:	409a      	lsls	r2, r3
 80089b4:	0013      	movs	r3, r2
 80089b6:	43da      	mvns	r2, r3
 80089b8:	693b      	ldr	r3, [r7, #16]
 80089ba:	4013      	ands	r3, r2
 80089bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	691a      	ldr	r2, [r3, #16]
 80089c2:	697b      	ldr	r3, [r7, #20]
 80089c4:	2107      	movs	r1, #7
 80089c6:	400b      	ands	r3, r1
 80089c8:	009b      	lsls	r3, r3, #2
 80089ca:	409a      	lsls	r2, r3
 80089cc:	0013      	movs	r3, r2
 80089ce:	693a      	ldr	r2, [r7, #16]
 80089d0:	4313      	orrs	r3, r2
 80089d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	08da      	lsrs	r2, r3, #3
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	3208      	adds	r2, #8
 80089dc:	0092      	lsls	r2, r2, #2
 80089de:	6939      	ldr	r1, [r7, #16]
 80089e0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80089e8:	697b      	ldr	r3, [r7, #20]
 80089ea:	005b      	lsls	r3, r3, #1
 80089ec:	2203      	movs	r2, #3
 80089ee:	409a      	lsls	r2, r3
 80089f0:	0013      	movs	r3, r2
 80089f2:	43da      	mvns	r2, r3
 80089f4:	693b      	ldr	r3, [r7, #16]
 80089f6:	4013      	ands	r3, r2
 80089f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	685b      	ldr	r3, [r3, #4]
 80089fe:	2203      	movs	r2, #3
 8008a00:	401a      	ands	r2, r3
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	005b      	lsls	r3, r3, #1
 8008a06:	409a      	lsls	r2, r3
 8008a08:	0013      	movs	r3, r2
 8008a0a:	693a      	ldr	r2, [r7, #16]
 8008a0c:	4313      	orrs	r3, r2
 8008a0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	693a      	ldr	r2, [r7, #16]
 8008a14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	685a      	ldr	r2, [r3, #4]
 8008a1a:	23c0      	movs	r3, #192	@ 0xc0
 8008a1c:	029b      	lsls	r3, r3, #10
 8008a1e:	4013      	ands	r3, r2
 8008a20:	d100      	bne.n	8008a24 <HAL_GPIO_Init+0x174>
 8008a22:	e098      	b.n	8008b56 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8008a24:	4a53      	ldr	r2, [pc, #332]	@ (8008b74 <HAL_GPIO_Init+0x2c4>)
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	089b      	lsrs	r3, r3, #2
 8008a2a:	3318      	adds	r3, #24
 8008a2c:	009b      	lsls	r3, r3, #2
 8008a2e:	589b      	ldr	r3, [r3, r2]
 8008a30:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	2203      	movs	r2, #3
 8008a36:	4013      	ands	r3, r2
 8008a38:	00db      	lsls	r3, r3, #3
 8008a3a:	220f      	movs	r2, #15
 8008a3c:	409a      	lsls	r2, r3
 8008a3e:	0013      	movs	r3, r2
 8008a40:	43da      	mvns	r2, r3
 8008a42:	693b      	ldr	r3, [r7, #16]
 8008a44:	4013      	ands	r3, r2
 8008a46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8008a48:	687a      	ldr	r2, [r7, #4]
 8008a4a:	23a0      	movs	r3, #160	@ 0xa0
 8008a4c:	05db      	lsls	r3, r3, #23
 8008a4e:	429a      	cmp	r2, r3
 8008a50:	d019      	beq.n	8008a86 <HAL_GPIO_Init+0x1d6>
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	4a48      	ldr	r2, [pc, #288]	@ (8008b78 <HAL_GPIO_Init+0x2c8>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d013      	beq.n	8008a82 <HAL_GPIO_Init+0x1d2>
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	4a47      	ldr	r2, [pc, #284]	@ (8008b7c <HAL_GPIO_Init+0x2cc>)
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	d00d      	beq.n	8008a7e <HAL_GPIO_Init+0x1ce>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	4a46      	ldr	r2, [pc, #280]	@ (8008b80 <HAL_GPIO_Init+0x2d0>)
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d007      	beq.n	8008a7a <HAL_GPIO_Init+0x1ca>
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	4a45      	ldr	r2, [pc, #276]	@ (8008b84 <HAL_GPIO_Init+0x2d4>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d101      	bne.n	8008a76 <HAL_GPIO_Init+0x1c6>
 8008a72:	2304      	movs	r3, #4
 8008a74:	e008      	b.n	8008a88 <HAL_GPIO_Init+0x1d8>
 8008a76:	2305      	movs	r3, #5
 8008a78:	e006      	b.n	8008a88 <HAL_GPIO_Init+0x1d8>
 8008a7a:	2303      	movs	r3, #3
 8008a7c:	e004      	b.n	8008a88 <HAL_GPIO_Init+0x1d8>
 8008a7e:	2302      	movs	r3, #2
 8008a80:	e002      	b.n	8008a88 <HAL_GPIO_Init+0x1d8>
 8008a82:	2301      	movs	r3, #1
 8008a84:	e000      	b.n	8008a88 <HAL_GPIO_Init+0x1d8>
 8008a86:	2300      	movs	r3, #0
 8008a88:	697a      	ldr	r2, [r7, #20]
 8008a8a:	2103      	movs	r1, #3
 8008a8c:	400a      	ands	r2, r1
 8008a8e:	00d2      	lsls	r2, r2, #3
 8008a90:	4093      	lsls	r3, r2
 8008a92:	693a      	ldr	r2, [r7, #16]
 8008a94:	4313      	orrs	r3, r2
 8008a96:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8008a98:	4936      	ldr	r1, [pc, #216]	@ (8008b74 <HAL_GPIO_Init+0x2c4>)
 8008a9a:	697b      	ldr	r3, [r7, #20]
 8008a9c:	089b      	lsrs	r3, r3, #2
 8008a9e:	3318      	adds	r3, #24
 8008aa0:	009b      	lsls	r3, r3, #2
 8008aa2:	693a      	ldr	r2, [r7, #16]
 8008aa4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008aa6:	4b33      	ldr	r3, [pc, #204]	@ (8008b74 <HAL_GPIO_Init+0x2c4>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	43da      	mvns	r2, r3
 8008ab0:	693b      	ldr	r3, [r7, #16]
 8008ab2:	4013      	ands	r3, r2
 8008ab4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	685a      	ldr	r2, [r3, #4]
 8008aba:	2380      	movs	r3, #128	@ 0x80
 8008abc:	035b      	lsls	r3, r3, #13
 8008abe:	4013      	ands	r3, r2
 8008ac0:	d003      	beq.n	8008aca <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8008ac2:	693a      	ldr	r2, [r7, #16]
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	4313      	orrs	r3, r2
 8008ac8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008aca:	4b2a      	ldr	r3, [pc, #168]	@ (8008b74 <HAL_GPIO_Init+0x2c4>)
 8008acc:	693a      	ldr	r2, [r7, #16]
 8008ace:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8008ad0:	4b28      	ldr	r3, [pc, #160]	@ (8008b74 <HAL_GPIO_Init+0x2c4>)
 8008ad2:	685b      	ldr	r3, [r3, #4]
 8008ad4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	43da      	mvns	r2, r3
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	4013      	ands	r3, r2
 8008ade:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	685a      	ldr	r2, [r3, #4]
 8008ae4:	2380      	movs	r3, #128	@ 0x80
 8008ae6:	039b      	lsls	r3, r3, #14
 8008ae8:	4013      	ands	r3, r2
 8008aea:	d003      	beq.n	8008af4 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8008aec:	693a      	ldr	r2, [r7, #16]
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	4313      	orrs	r3, r2
 8008af2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008af4:	4b1f      	ldr	r3, [pc, #124]	@ (8008b74 <HAL_GPIO_Init+0x2c4>)
 8008af6:	693a      	ldr	r2, [r7, #16]
 8008af8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8008afa:	4a1e      	ldr	r2, [pc, #120]	@ (8008b74 <HAL_GPIO_Init+0x2c4>)
 8008afc:	2384      	movs	r3, #132	@ 0x84
 8008afe:	58d3      	ldr	r3, [r2, r3]
 8008b00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	43da      	mvns	r2, r3
 8008b06:	693b      	ldr	r3, [r7, #16]
 8008b08:	4013      	ands	r3, r2
 8008b0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	685a      	ldr	r2, [r3, #4]
 8008b10:	2380      	movs	r3, #128	@ 0x80
 8008b12:	029b      	lsls	r3, r3, #10
 8008b14:	4013      	ands	r3, r2
 8008b16:	d003      	beq.n	8008b20 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8008b18:	693a      	ldr	r2, [r7, #16]
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	4313      	orrs	r3, r2
 8008b1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008b20:	4914      	ldr	r1, [pc, #80]	@ (8008b74 <HAL_GPIO_Init+0x2c4>)
 8008b22:	2284      	movs	r2, #132	@ 0x84
 8008b24:	693b      	ldr	r3, [r7, #16]
 8008b26:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8008b28:	4a12      	ldr	r2, [pc, #72]	@ (8008b74 <HAL_GPIO_Init+0x2c4>)
 8008b2a:	2380      	movs	r3, #128	@ 0x80
 8008b2c:	58d3      	ldr	r3, [r2, r3]
 8008b2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	43da      	mvns	r2, r3
 8008b34:	693b      	ldr	r3, [r7, #16]
 8008b36:	4013      	ands	r3, r2
 8008b38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	685a      	ldr	r2, [r3, #4]
 8008b3e:	2380      	movs	r3, #128	@ 0x80
 8008b40:	025b      	lsls	r3, r3, #9
 8008b42:	4013      	ands	r3, r2
 8008b44:	d003      	beq.n	8008b4e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8008b46:	693a      	ldr	r2, [r7, #16]
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	4313      	orrs	r3, r2
 8008b4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008b4e:	4909      	ldr	r1, [pc, #36]	@ (8008b74 <HAL_GPIO_Init+0x2c4>)
 8008b50:	2280      	movs	r2, #128	@ 0x80
 8008b52:	693b      	ldr	r3, [r7, #16]
 8008b54:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8008b56:	697b      	ldr	r3, [r7, #20]
 8008b58:	3301      	adds	r3, #1
 8008b5a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	681a      	ldr	r2, [r3, #0]
 8008b60:	697b      	ldr	r3, [r7, #20]
 8008b62:	40da      	lsrs	r2, r3
 8008b64:	1e13      	subs	r3, r2, #0
 8008b66:	d000      	beq.n	8008b6a <HAL_GPIO_Init+0x2ba>
 8008b68:	e6aa      	b.n	80088c0 <HAL_GPIO_Init+0x10>
  }
}
 8008b6a:	46c0      	nop			@ (mov r8, r8)
 8008b6c:	46c0      	nop			@ (mov r8, r8)
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	b006      	add	sp, #24
 8008b72:	bd80      	pop	{r7, pc}
 8008b74:	40021800 	.word	0x40021800
 8008b78:	50000400 	.word	0x50000400
 8008b7c:	50000800 	.word	0x50000800
 8008b80:	50000c00 	.word	0x50000c00
 8008b84:	50001000 	.word	0x50001000

08008b88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b084      	sub	sp, #16
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
 8008b90:	000a      	movs	r2, r1
 8008b92:	1cbb      	adds	r3, r7, #2
 8008b94:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	691b      	ldr	r3, [r3, #16]
 8008b9a:	1cba      	adds	r2, r7, #2
 8008b9c:	8812      	ldrh	r2, [r2, #0]
 8008b9e:	4013      	ands	r3, r2
 8008ba0:	d004      	beq.n	8008bac <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8008ba2:	230f      	movs	r3, #15
 8008ba4:	18fb      	adds	r3, r7, r3
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	701a      	strb	r2, [r3, #0]
 8008baa:	e003      	b.n	8008bb4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008bac:	230f      	movs	r3, #15
 8008bae:	18fb      	adds	r3, r7, r3
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8008bb4:	230f      	movs	r3, #15
 8008bb6:	18fb      	adds	r3, r7, r3
 8008bb8:	781b      	ldrb	r3, [r3, #0]
}
 8008bba:	0018      	movs	r0, r3
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	b004      	add	sp, #16
 8008bc0:	bd80      	pop	{r7, pc}

08008bc2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008bc2:	b580      	push	{r7, lr}
 8008bc4:	b082      	sub	sp, #8
 8008bc6:	af00      	add	r7, sp, #0
 8008bc8:	6078      	str	r0, [r7, #4]
 8008bca:	0008      	movs	r0, r1
 8008bcc:	0011      	movs	r1, r2
 8008bce:	1cbb      	adds	r3, r7, #2
 8008bd0:	1c02      	adds	r2, r0, #0
 8008bd2:	801a      	strh	r2, [r3, #0]
 8008bd4:	1c7b      	adds	r3, r7, #1
 8008bd6:	1c0a      	adds	r2, r1, #0
 8008bd8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008bda:	1c7b      	adds	r3, r7, #1
 8008bdc:	781b      	ldrb	r3, [r3, #0]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d004      	beq.n	8008bec <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008be2:	1cbb      	adds	r3, r7, #2
 8008be4:	881a      	ldrh	r2, [r3, #0]
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008bea:	e003      	b.n	8008bf4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008bec:	1cbb      	adds	r3, r7, #2
 8008bee:	881a      	ldrh	r2, [r3, #0]
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8008bf4:	46c0      	nop			@ (mov r8, r8)
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	b002      	add	sp, #8
 8008bfa:	bd80      	pop	{r7, pc}

08008bfc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b082      	sub	sp, #8
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	0002      	movs	r2, r0
 8008c04:	1dbb      	adds	r3, r7, #6
 8008c06:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8008c08:	4b10      	ldr	r3, [pc, #64]	@ (8008c4c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8008c0a:	68db      	ldr	r3, [r3, #12]
 8008c0c:	1dba      	adds	r2, r7, #6
 8008c0e:	8812      	ldrh	r2, [r2, #0]
 8008c10:	4013      	ands	r3, r2
 8008c12:	d008      	beq.n	8008c26 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8008c14:	4b0d      	ldr	r3, [pc, #52]	@ (8008c4c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8008c16:	1dba      	adds	r2, r7, #6
 8008c18:	8812      	ldrh	r2, [r2, #0]
 8008c1a:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8008c1c:	1dbb      	adds	r3, r7, #6
 8008c1e:	881b      	ldrh	r3, [r3, #0]
 8008c20:	0018      	movs	r0, r3
 8008c22:	f7fd f899 	bl	8005d58 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8008c26:	4b09      	ldr	r3, [pc, #36]	@ (8008c4c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8008c28:	691b      	ldr	r3, [r3, #16]
 8008c2a:	1dba      	adds	r2, r7, #6
 8008c2c:	8812      	ldrh	r2, [r2, #0]
 8008c2e:	4013      	ands	r3, r2
 8008c30:	d008      	beq.n	8008c44 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8008c32:	4b06      	ldr	r3, [pc, #24]	@ (8008c4c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8008c34:	1dba      	adds	r2, r7, #6
 8008c36:	8812      	ldrh	r2, [r2, #0]
 8008c38:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8008c3a:	1dbb      	adds	r3, r7, #6
 8008c3c:	881b      	ldrh	r3, [r3, #0]
 8008c3e:	0018      	movs	r0, r3
 8008c40:	f000 f806 	bl	8008c50 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8008c44:	46c0      	nop			@ (mov r8, r8)
 8008c46:	46bd      	mov	sp, r7
 8008c48:	b002      	add	sp, #8
 8008c4a:	bd80      	pop	{r7, pc}
 8008c4c:	40021800 	.word	0x40021800

08008c50 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b082      	sub	sp, #8
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	0002      	movs	r2, r0
 8008c58:	1dbb      	adds	r3, r7, #6
 8008c5a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8008c5c:	46c0      	nop			@ (mov r8, r8)
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	b002      	add	sp, #8
 8008c62:	bd80      	pop	{r7, pc}

08008c64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b082      	sub	sp, #8
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d101      	bne.n	8008c76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008c72:	2301      	movs	r3, #1
 8008c74:	e08f      	b.n	8008d96 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2241      	movs	r2, #65	@ 0x41
 8008c7a:	5c9b      	ldrb	r3, [r3, r2]
 8008c7c:	b2db      	uxtb	r3, r3
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d107      	bne.n	8008c92 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2240      	movs	r2, #64	@ 0x40
 8008c86:	2100      	movs	r1, #0
 8008c88:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	0018      	movs	r0, r3
 8008c8e:	f7fe fbd9 	bl	8007444 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2241      	movs	r2, #65	@ 0x41
 8008c96:	2124      	movs	r1, #36	@ 0x24
 8008c98:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	681a      	ldr	r2, [r3, #0]
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	2101      	movs	r1, #1
 8008ca6:	438a      	bics	r2, r1
 8008ca8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	685a      	ldr	r2, [r3, #4]
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	493b      	ldr	r1, [pc, #236]	@ (8008da0 <HAL_I2C_Init+0x13c>)
 8008cb4:	400a      	ands	r2, r1
 8008cb6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	689a      	ldr	r2, [r3, #8]
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	4938      	ldr	r1, [pc, #224]	@ (8008da4 <HAL_I2C_Init+0x140>)
 8008cc4:	400a      	ands	r2, r1
 8008cc6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	68db      	ldr	r3, [r3, #12]
 8008ccc:	2b01      	cmp	r3, #1
 8008cce:	d108      	bne.n	8008ce2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	689a      	ldr	r2, [r3, #8]
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	2180      	movs	r1, #128	@ 0x80
 8008cda:	0209      	lsls	r1, r1, #8
 8008cdc:	430a      	orrs	r2, r1
 8008cde:	609a      	str	r2, [r3, #8]
 8008ce0:	e007      	b.n	8008cf2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	689a      	ldr	r2, [r3, #8]
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	2184      	movs	r1, #132	@ 0x84
 8008cec:	0209      	lsls	r1, r1, #8
 8008cee:	430a      	orrs	r2, r1
 8008cf0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	68db      	ldr	r3, [r3, #12]
 8008cf6:	2b02      	cmp	r3, #2
 8008cf8:	d109      	bne.n	8008d0e <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	685a      	ldr	r2, [r3, #4]
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	2180      	movs	r1, #128	@ 0x80
 8008d06:	0109      	lsls	r1, r1, #4
 8008d08:	430a      	orrs	r2, r1
 8008d0a:	605a      	str	r2, [r3, #4]
 8008d0c:	e007      	b.n	8008d1e <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	685a      	ldr	r2, [r3, #4]
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	4923      	ldr	r1, [pc, #140]	@ (8008da8 <HAL_I2C_Init+0x144>)
 8008d1a:	400a      	ands	r2, r1
 8008d1c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	685a      	ldr	r2, [r3, #4]
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	4920      	ldr	r1, [pc, #128]	@ (8008dac <HAL_I2C_Init+0x148>)
 8008d2a:	430a      	orrs	r2, r1
 8008d2c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	68da      	ldr	r2, [r3, #12]
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	491a      	ldr	r1, [pc, #104]	@ (8008da4 <HAL_I2C_Init+0x140>)
 8008d3a:	400a      	ands	r2, r1
 8008d3c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	691a      	ldr	r2, [r3, #16]
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	695b      	ldr	r3, [r3, #20]
 8008d46:	431a      	orrs	r2, r3
 8008d48:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	699b      	ldr	r3, [r3, #24]
 8008d4e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	430a      	orrs	r2, r1
 8008d56:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	69d9      	ldr	r1, [r3, #28]
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	6a1a      	ldr	r2, [r3, #32]
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	430a      	orrs	r2, r1
 8008d66:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	681a      	ldr	r2, [r3, #0]
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	2101      	movs	r1, #1
 8008d74:	430a      	orrs	r2, r1
 8008d76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2241      	movs	r2, #65	@ 0x41
 8008d82:	2120      	movs	r1, #32
 8008d84:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2242      	movs	r2, #66	@ 0x42
 8008d90:	2100      	movs	r1, #0
 8008d92:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008d94:	2300      	movs	r3, #0
}
 8008d96:	0018      	movs	r0, r3
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	b002      	add	sp, #8
 8008d9c:	bd80      	pop	{r7, pc}
 8008d9e:	46c0      	nop			@ (mov r8, r8)
 8008da0:	f0ffffff 	.word	0xf0ffffff
 8008da4:	ffff7fff 	.word	0xffff7fff
 8008da8:	fffff7ff 	.word	0xfffff7ff
 8008dac:	02008000 	.word	0x02008000

08008db0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008db0:	b590      	push	{r4, r7, lr}
 8008db2:	b089      	sub	sp, #36	@ 0x24
 8008db4:	af02      	add	r7, sp, #8
 8008db6:	60f8      	str	r0, [r7, #12]
 8008db8:	0008      	movs	r0, r1
 8008dba:	607a      	str	r2, [r7, #4]
 8008dbc:	0019      	movs	r1, r3
 8008dbe:	230a      	movs	r3, #10
 8008dc0:	18fb      	adds	r3, r7, r3
 8008dc2:	1c02      	adds	r2, r0, #0
 8008dc4:	801a      	strh	r2, [r3, #0]
 8008dc6:	2308      	movs	r3, #8
 8008dc8:	18fb      	adds	r3, r7, r3
 8008dca:	1c0a      	adds	r2, r1, #0
 8008dcc:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	2241      	movs	r2, #65	@ 0x41
 8008dd2:	5c9b      	ldrb	r3, [r3, r2]
 8008dd4:	b2db      	uxtb	r3, r3
 8008dd6:	2b20      	cmp	r3, #32
 8008dd8:	d000      	beq.n	8008ddc <HAL_I2C_Master_Transmit+0x2c>
 8008dda:	e10a      	b.n	8008ff2 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	2240      	movs	r2, #64	@ 0x40
 8008de0:	5c9b      	ldrb	r3, [r3, r2]
 8008de2:	2b01      	cmp	r3, #1
 8008de4:	d101      	bne.n	8008dea <HAL_I2C_Master_Transmit+0x3a>
 8008de6:	2302      	movs	r3, #2
 8008de8:	e104      	b.n	8008ff4 <HAL_I2C_Master_Transmit+0x244>
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	2240      	movs	r2, #64	@ 0x40
 8008dee:	2101      	movs	r1, #1
 8008df0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008df2:	f7ff fc3b 	bl	800866c <HAL_GetTick>
 8008df6:	0003      	movs	r3, r0
 8008df8:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008dfa:	2380      	movs	r3, #128	@ 0x80
 8008dfc:	0219      	lsls	r1, r3, #8
 8008dfe:	68f8      	ldr	r0, [r7, #12]
 8008e00:	693b      	ldr	r3, [r7, #16]
 8008e02:	9300      	str	r3, [sp, #0]
 8008e04:	2319      	movs	r3, #25
 8008e06:	2201      	movs	r2, #1
 8008e08:	f000 fa26 	bl	8009258 <I2C_WaitOnFlagUntilTimeout>
 8008e0c:	1e03      	subs	r3, r0, #0
 8008e0e:	d001      	beq.n	8008e14 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8008e10:	2301      	movs	r3, #1
 8008e12:	e0ef      	b.n	8008ff4 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	2241      	movs	r2, #65	@ 0x41
 8008e18:	2121      	movs	r1, #33	@ 0x21
 8008e1a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	2242      	movs	r2, #66	@ 0x42
 8008e20:	2110      	movs	r1, #16
 8008e22:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	2200      	movs	r2, #0
 8008e28:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	687a      	ldr	r2, [r7, #4]
 8008e2e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	2208      	movs	r2, #8
 8008e34:	18ba      	adds	r2, r7, r2
 8008e36:	8812      	ldrh	r2, [r2, #0]
 8008e38:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008e44:	b29b      	uxth	r3, r3
 8008e46:	2bff      	cmp	r3, #255	@ 0xff
 8008e48:	d906      	bls.n	8008e58 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	22ff      	movs	r2, #255	@ 0xff
 8008e4e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8008e50:	2380      	movs	r3, #128	@ 0x80
 8008e52:	045b      	lsls	r3, r3, #17
 8008e54:	617b      	str	r3, [r7, #20]
 8008e56:	e007      	b.n	8008e68 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008e5c:	b29a      	uxth	r2, r3
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8008e62:	2380      	movs	r3, #128	@ 0x80
 8008e64:	049b      	lsls	r3, r3, #18
 8008e66:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d027      	beq.n	8008ec0 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e74:	781a      	ldrb	r2, [r3, #0]
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e80:	1c5a      	adds	r2, r3, #1
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008e8a:	b29b      	uxth	r3, r3
 8008e8c:	3b01      	subs	r3, #1
 8008e8e:	b29a      	uxth	r2, r3
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e98:	3b01      	subs	r3, #1
 8008e9a:	b29a      	uxth	r2, r3
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008ea4:	b2db      	uxtb	r3, r3
 8008ea6:	3301      	adds	r3, #1
 8008ea8:	b2da      	uxtb	r2, r3
 8008eaa:	697c      	ldr	r4, [r7, #20]
 8008eac:	230a      	movs	r3, #10
 8008eae:	18fb      	adds	r3, r7, r3
 8008eb0:	8819      	ldrh	r1, [r3, #0]
 8008eb2:	68f8      	ldr	r0, [r7, #12]
 8008eb4:	4b51      	ldr	r3, [pc, #324]	@ (8008ffc <HAL_I2C_Master_Transmit+0x24c>)
 8008eb6:	9300      	str	r3, [sp, #0]
 8008eb8:	0023      	movs	r3, r4
 8008eba:	f000 fc45 	bl	8009748 <I2C_TransferConfig>
 8008ebe:	e06f      	b.n	8008fa0 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008ec4:	b2da      	uxtb	r2, r3
 8008ec6:	697c      	ldr	r4, [r7, #20]
 8008ec8:	230a      	movs	r3, #10
 8008eca:	18fb      	adds	r3, r7, r3
 8008ecc:	8819      	ldrh	r1, [r3, #0]
 8008ece:	68f8      	ldr	r0, [r7, #12]
 8008ed0:	4b4a      	ldr	r3, [pc, #296]	@ (8008ffc <HAL_I2C_Master_Transmit+0x24c>)
 8008ed2:	9300      	str	r3, [sp, #0]
 8008ed4:	0023      	movs	r3, r4
 8008ed6:	f000 fc37 	bl	8009748 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8008eda:	e061      	b.n	8008fa0 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008edc:	693a      	ldr	r2, [r7, #16]
 8008ede:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	0018      	movs	r0, r3
 8008ee4:	f000 fa10 	bl	8009308 <I2C_WaitOnTXISFlagUntilTimeout>
 8008ee8:	1e03      	subs	r3, r0, #0
 8008eea:	d001      	beq.n	8008ef0 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8008eec:	2301      	movs	r3, #1
 8008eee:	e081      	b.n	8008ff4 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ef4:	781a      	ldrb	r2, [r3, #0]
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f00:	1c5a      	adds	r2, r3, #1
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f0a:	b29b      	uxth	r3, r3
 8008f0c:	3b01      	subs	r3, #1
 8008f0e:	b29a      	uxth	r2, r3
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f18:	3b01      	subs	r3, #1
 8008f1a:	b29a      	uxth	r2, r3
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f24:	b29b      	uxth	r3, r3
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d03a      	beq.n	8008fa0 <HAL_I2C_Master_Transmit+0x1f0>
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d136      	bne.n	8008fa0 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008f32:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008f34:	68f8      	ldr	r0, [r7, #12]
 8008f36:	693b      	ldr	r3, [r7, #16]
 8008f38:	9300      	str	r3, [sp, #0]
 8008f3a:	0013      	movs	r3, r2
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	2180      	movs	r1, #128	@ 0x80
 8008f40:	f000 f98a 	bl	8009258 <I2C_WaitOnFlagUntilTimeout>
 8008f44:	1e03      	subs	r3, r0, #0
 8008f46:	d001      	beq.n	8008f4c <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8008f48:	2301      	movs	r3, #1
 8008f4a:	e053      	b.n	8008ff4 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f50:	b29b      	uxth	r3, r3
 8008f52:	2bff      	cmp	r3, #255	@ 0xff
 8008f54:	d911      	bls.n	8008f7a <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	22ff      	movs	r2, #255	@ 0xff
 8008f5a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f60:	b2da      	uxtb	r2, r3
 8008f62:	2380      	movs	r3, #128	@ 0x80
 8008f64:	045c      	lsls	r4, r3, #17
 8008f66:	230a      	movs	r3, #10
 8008f68:	18fb      	adds	r3, r7, r3
 8008f6a:	8819      	ldrh	r1, [r3, #0]
 8008f6c:	68f8      	ldr	r0, [r7, #12]
 8008f6e:	2300      	movs	r3, #0
 8008f70:	9300      	str	r3, [sp, #0]
 8008f72:	0023      	movs	r3, r4
 8008f74:	f000 fbe8 	bl	8009748 <I2C_TransferConfig>
 8008f78:	e012      	b.n	8008fa0 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f7e:	b29a      	uxth	r2, r3
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f88:	b2da      	uxtb	r2, r3
 8008f8a:	2380      	movs	r3, #128	@ 0x80
 8008f8c:	049c      	lsls	r4, r3, #18
 8008f8e:	230a      	movs	r3, #10
 8008f90:	18fb      	adds	r3, r7, r3
 8008f92:	8819      	ldrh	r1, [r3, #0]
 8008f94:	68f8      	ldr	r0, [r7, #12]
 8008f96:	2300      	movs	r3, #0
 8008f98:	9300      	str	r3, [sp, #0]
 8008f9a:	0023      	movs	r3, r4
 8008f9c:	f000 fbd4 	bl	8009748 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008fa4:	b29b      	uxth	r3, r3
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d198      	bne.n	8008edc <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008faa:	693a      	ldr	r2, [r7, #16]
 8008fac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	0018      	movs	r0, r3
 8008fb2:	f000 f9ef 	bl	8009394 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008fb6:	1e03      	subs	r3, r0, #0
 8008fb8:	d001      	beq.n	8008fbe <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8008fba:	2301      	movs	r3, #1
 8008fbc:	e01a      	b.n	8008ff4 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	2220      	movs	r2, #32
 8008fc4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	685a      	ldr	r2, [r3, #4]
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	490b      	ldr	r1, [pc, #44]	@ (8009000 <HAL_I2C_Master_Transmit+0x250>)
 8008fd2:	400a      	ands	r2, r1
 8008fd4:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	2241      	movs	r2, #65	@ 0x41
 8008fda:	2120      	movs	r1, #32
 8008fdc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	2242      	movs	r2, #66	@ 0x42
 8008fe2:	2100      	movs	r1, #0
 8008fe4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	2240      	movs	r2, #64	@ 0x40
 8008fea:	2100      	movs	r1, #0
 8008fec:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8008fee:	2300      	movs	r3, #0
 8008ff0:	e000      	b.n	8008ff4 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8008ff2:	2302      	movs	r3, #2
  }
}
 8008ff4:	0018      	movs	r0, r3
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	b007      	add	sp, #28
 8008ffa:	bd90      	pop	{r4, r7, pc}
 8008ffc:	80002000 	.word	0x80002000
 8009000:	fe00e800 	.word	0xfe00e800

08009004 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8009004:	b590      	push	{r4, r7, lr}
 8009006:	b089      	sub	sp, #36	@ 0x24
 8009008:	af02      	add	r7, sp, #8
 800900a:	60f8      	str	r0, [r7, #12]
 800900c:	0008      	movs	r0, r1
 800900e:	607a      	str	r2, [r7, #4]
 8009010:	0019      	movs	r1, r3
 8009012:	230a      	movs	r3, #10
 8009014:	18fb      	adds	r3, r7, r3
 8009016:	1c02      	adds	r2, r0, #0
 8009018:	801a      	strh	r2, [r3, #0]
 800901a:	2308      	movs	r3, #8
 800901c:	18fb      	adds	r3, r7, r3
 800901e:	1c0a      	adds	r2, r1, #0
 8009020:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	2241      	movs	r2, #65	@ 0x41
 8009026:	5c9b      	ldrb	r3, [r3, r2]
 8009028:	b2db      	uxtb	r3, r3
 800902a:	2b20      	cmp	r3, #32
 800902c:	d000      	beq.n	8009030 <HAL_I2C_Master_Receive+0x2c>
 800902e:	e0e8      	b.n	8009202 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	2240      	movs	r2, #64	@ 0x40
 8009034:	5c9b      	ldrb	r3, [r3, r2]
 8009036:	2b01      	cmp	r3, #1
 8009038:	d101      	bne.n	800903e <HAL_I2C_Master_Receive+0x3a>
 800903a:	2302      	movs	r3, #2
 800903c:	e0e2      	b.n	8009204 <HAL_I2C_Master_Receive+0x200>
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	2240      	movs	r2, #64	@ 0x40
 8009042:	2101      	movs	r1, #1
 8009044:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009046:	f7ff fb11 	bl	800866c <HAL_GetTick>
 800904a:	0003      	movs	r3, r0
 800904c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800904e:	2380      	movs	r3, #128	@ 0x80
 8009050:	0219      	lsls	r1, r3, #8
 8009052:	68f8      	ldr	r0, [r7, #12]
 8009054:	697b      	ldr	r3, [r7, #20]
 8009056:	9300      	str	r3, [sp, #0]
 8009058:	2319      	movs	r3, #25
 800905a:	2201      	movs	r2, #1
 800905c:	f000 f8fc 	bl	8009258 <I2C_WaitOnFlagUntilTimeout>
 8009060:	1e03      	subs	r3, r0, #0
 8009062:	d001      	beq.n	8009068 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8009064:	2301      	movs	r3, #1
 8009066:	e0cd      	b.n	8009204 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	2241      	movs	r2, #65	@ 0x41
 800906c:	2122      	movs	r1, #34	@ 0x22
 800906e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	2242      	movs	r2, #66	@ 0x42
 8009074:	2110      	movs	r1, #16
 8009076:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	2200      	movs	r2, #0
 800907c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	687a      	ldr	r2, [r7, #4]
 8009082:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	2208      	movs	r2, #8
 8009088:	18ba      	adds	r2, r7, r2
 800908a:	8812      	ldrh	r2, [r2, #0]
 800908c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	2200      	movs	r2, #0
 8009092:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009098:	b29b      	uxth	r3, r3
 800909a:	2bff      	cmp	r3, #255	@ 0xff
 800909c:	d911      	bls.n	80090c2 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	22ff      	movs	r2, #255	@ 0xff
 80090a2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80090a8:	b2da      	uxtb	r2, r3
 80090aa:	2380      	movs	r3, #128	@ 0x80
 80090ac:	045c      	lsls	r4, r3, #17
 80090ae:	230a      	movs	r3, #10
 80090b0:	18fb      	adds	r3, r7, r3
 80090b2:	8819      	ldrh	r1, [r3, #0]
 80090b4:	68f8      	ldr	r0, [r7, #12]
 80090b6:	4b55      	ldr	r3, [pc, #340]	@ (800920c <HAL_I2C_Master_Receive+0x208>)
 80090b8:	9300      	str	r3, [sp, #0]
 80090ba:	0023      	movs	r3, r4
 80090bc:	f000 fb44 	bl	8009748 <I2C_TransferConfig>
 80090c0:	e076      	b.n	80091b0 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80090c6:	b29a      	uxth	r2, r3
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80090d0:	b2da      	uxtb	r2, r3
 80090d2:	2380      	movs	r3, #128	@ 0x80
 80090d4:	049c      	lsls	r4, r3, #18
 80090d6:	230a      	movs	r3, #10
 80090d8:	18fb      	adds	r3, r7, r3
 80090da:	8819      	ldrh	r1, [r3, #0]
 80090dc:	68f8      	ldr	r0, [r7, #12]
 80090de:	4b4b      	ldr	r3, [pc, #300]	@ (800920c <HAL_I2C_Master_Receive+0x208>)
 80090e0:	9300      	str	r3, [sp, #0]
 80090e2:	0023      	movs	r3, r4
 80090e4:	f000 fb30 	bl	8009748 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80090e8:	e062      	b.n	80091b0 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80090ea:	697a      	ldr	r2, [r7, #20]
 80090ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	0018      	movs	r0, r3
 80090f2:	f000 f993 	bl	800941c <I2C_WaitOnRXNEFlagUntilTimeout>
 80090f6:	1e03      	subs	r3, r0, #0
 80090f8:	d001      	beq.n	80090fe <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80090fa:	2301      	movs	r3, #1
 80090fc:	e082      	b.n	8009204 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009108:	b2d2      	uxtb	r2, r2
 800910a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009110:	1c5a      	adds	r2, r3, #1
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800911a:	3b01      	subs	r3, #1
 800911c:	b29a      	uxth	r2, r3
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009126:	b29b      	uxth	r3, r3
 8009128:	3b01      	subs	r3, #1
 800912a:	b29a      	uxth	r2, r3
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009134:	b29b      	uxth	r3, r3
 8009136:	2b00      	cmp	r3, #0
 8009138:	d03a      	beq.n	80091b0 <HAL_I2C_Master_Receive+0x1ac>
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800913e:	2b00      	cmp	r3, #0
 8009140:	d136      	bne.n	80091b0 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009142:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009144:	68f8      	ldr	r0, [r7, #12]
 8009146:	697b      	ldr	r3, [r7, #20]
 8009148:	9300      	str	r3, [sp, #0]
 800914a:	0013      	movs	r3, r2
 800914c:	2200      	movs	r2, #0
 800914e:	2180      	movs	r1, #128	@ 0x80
 8009150:	f000 f882 	bl	8009258 <I2C_WaitOnFlagUntilTimeout>
 8009154:	1e03      	subs	r3, r0, #0
 8009156:	d001      	beq.n	800915c <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8009158:	2301      	movs	r3, #1
 800915a:	e053      	b.n	8009204 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009160:	b29b      	uxth	r3, r3
 8009162:	2bff      	cmp	r3, #255	@ 0xff
 8009164:	d911      	bls.n	800918a <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	22ff      	movs	r2, #255	@ 0xff
 800916a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009170:	b2da      	uxtb	r2, r3
 8009172:	2380      	movs	r3, #128	@ 0x80
 8009174:	045c      	lsls	r4, r3, #17
 8009176:	230a      	movs	r3, #10
 8009178:	18fb      	adds	r3, r7, r3
 800917a:	8819      	ldrh	r1, [r3, #0]
 800917c:	68f8      	ldr	r0, [r7, #12]
 800917e:	2300      	movs	r3, #0
 8009180:	9300      	str	r3, [sp, #0]
 8009182:	0023      	movs	r3, r4
 8009184:	f000 fae0 	bl	8009748 <I2C_TransferConfig>
 8009188:	e012      	b.n	80091b0 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800918e:	b29a      	uxth	r2, r3
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009198:	b2da      	uxtb	r2, r3
 800919a:	2380      	movs	r3, #128	@ 0x80
 800919c:	049c      	lsls	r4, r3, #18
 800919e:	230a      	movs	r3, #10
 80091a0:	18fb      	adds	r3, r7, r3
 80091a2:	8819      	ldrh	r1, [r3, #0]
 80091a4:	68f8      	ldr	r0, [r7, #12]
 80091a6:	2300      	movs	r3, #0
 80091a8:	9300      	str	r3, [sp, #0]
 80091aa:	0023      	movs	r3, r4
 80091ac:	f000 facc 	bl	8009748 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80091b4:	b29b      	uxth	r3, r3
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d197      	bne.n	80090ea <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80091ba:	697a      	ldr	r2, [r7, #20]
 80091bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	0018      	movs	r0, r3
 80091c2:	f000 f8e7 	bl	8009394 <I2C_WaitOnSTOPFlagUntilTimeout>
 80091c6:	1e03      	subs	r3, r0, #0
 80091c8:	d001      	beq.n	80091ce <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80091ca:	2301      	movs	r3, #1
 80091cc:	e01a      	b.n	8009204 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	2220      	movs	r2, #32
 80091d4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	685a      	ldr	r2, [r3, #4]
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	490b      	ldr	r1, [pc, #44]	@ (8009210 <HAL_I2C_Master_Receive+0x20c>)
 80091e2:	400a      	ands	r2, r1
 80091e4:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	2241      	movs	r2, #65	@ 0x41
 80091ea:	2120      	movs	r1, #32
 80091ec:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	2242      	movs	r2, #66	@ 0x42
 80091f2:	2100      	movs	r1, #0
 80091f4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	2240      	movs	r2, #64	@ 0x40
 80091fa:	2100      	movs	r1, #0
 80091fc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80091fe:	2300      	movs	r3, #0
 8009200:	e000      	b.n	8009204 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8009202:	2302      	movs	r3, #2
  }
}
 8009204:	0018      	movs	r0, r3
 8009206:	46bd      	mov	sp, r7
 8009208:	b007      	add	sp, #28
 800920a:	bd90      	pop	{r4, r7, pc}
 800920c:	80002400 	.word	0x80002400
 8009210:	fe00e800 	.word	0xfe00e800

08009214 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b082      	sub	sp, #8
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	699b      	ldr	r3, [r3, #24]
 8009222:	2202      	movs	r2, #2
 8009224:	4013      	ands	r3, r2
 8009226:	2b02      	cmp	r3, #2
 8009228:	d103      	bne.n	8009232 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	2200      	movs	r2, #0
 8009230:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	699b      	ldr	r3, [r3, #24]
 8009238:	2201      	movs	r2, #1
 800923a:	4013      	ands	r3, r2
 800923c:	2b01      	cmp	r3, #1
 800923e:	d007      	beq.n	8009250 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	699a      	ldr	r2, [r3, #24]
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	2101      	movs	r1, #1
 800924c:	430a      	orrs	r2, r1
 800924e:	619a      	str	r2, [r3, #24]
  }
}
 8009250:	46c0      	nop			@ (mov r8, r8)
 8009252:	46bd      	mov	sp, r7
 8009254:	b002      	add	sp, #8
 8009256:	bd80      	pop	{r7, pc}

08009258 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b084      	sub	sp, #16
 800925c:	af00      	add	r7, sp, #0
 800925e:	60f8      	str	r0, [r7, #12]
 8009260:	60b9      	str	r1, [r7, #8]
 8009262:	603b      	str	r3, [r7, #0]
 8009264:	1dfb      	adds	r3, r7, #7
 8009266:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009268:	e03a      	b.n	80092e0 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800926a:	69ba      	ldr	r2, [r7, #24]
 800926c:	6839      	ldr	r1, [r7, #0]
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	0018      	movs	r0, r3
 8009272:	f000 f971 	bl	8009558 <I2C_IsErrorOccurred>
 8009276:	1e03      	subs	r3, r0, #0
 8009278:	d001      	beq.n	800927e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800927a:	2301      	movs	r3, #1
 800927c:	e040      	b.n	8009300 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	3301      	adds	r3, #1
 8009282:	d02d      	beq.n	80092e0 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009284:	f7ff f9f2 	bl	800866c <HAL_GetTick>
 8009288:	0002      	movs	r2, r0
 800928a:	69bb      	ldr	r3, [r7, #24]
 800928c:	1ad3      	subs	r3, r2, r3
 800928e:	683a      	ldr	r2, [r7, #0]
 8009290:	429a      	cmp	r2, r3
 8009292:	d302      	bcc.n	800929a <I2C_WaitOnFlagUntilTimeout+0x42>
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d122      	bne.n	80092e0 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	699b      	ldr	r3, [r3, #24]
 80092a0:	68ba      	ldr	r2, [r7, #8]
 80092a2:	4013      	ands	r3, r2
 80092a4:	68ba      	ldr	r2, [r7, #8]
 80092a6:	1ad3      	subs	r3, r2, r3
 80092a8:	425a      	negs	r2, r3
 80092aa:	4153      	adcs	r3, r2
 80092ac:	b2db      	uxtb	r3, r3
 80092ae:	001a      	movs	r2, r3
 80092b0:	1dfb      	adds	r3, r7, #7
 80092b2:	781b      	ldrb	r3, [r3, #0]
 80092b4:	429a      	cmp	r2, r3
 80092b6:	d113      	bne.n	80092e0 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80092bc:	2220      	movs	r2, #32
 80092be:	431a      	orrs	r2, r3
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	2241      	movs	r2, #65	@ 0x41
 80092c8:	2120      	movs	r1, #32
 80092ca:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	2242      	movs	r2, #66	@ 0x42
 80092d0:	2100      	movs	r1, #0
 80092d2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	2240      	movs	r2, #64	@ 0x40
 80092d8:	2100      	movs	r1, #0
 80092da:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80092dc:	2301      	movs	r3, #1
 80092de:	e00f      	b.n	8009300 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	699b      	ldr	r3, [r3, #24]
 80092e6:	68ba      	ldr	r2, [r7, #8]
 80092e8:	4013      	ands	r3, r2
 80092ea:	68ba      	ldr	r2, [r7, #8]
 80092ec:	1ad3      	subs	r3, r2, r3
 80092ee:	425a      	negs	r2, r3
 80092f0:	4153      	adcs	r3, r2
 80092f2:	b2db      	uxtb	r3, r3
 80092f4:	001a      	movs	r2, r3
 80092f6:	1dfb      	adds	r3, r7, #7
 80092f8:	781b      	ldrb	r3, [r3, #0]
 80092fa:	429a      	cmp	r2, r3
 80092fc:	d0b5      	beq.n	800926a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80092fe:	2300      	movs	r3, #0
}
 8009300:	0018      	movs	r0, r3
 8009302:	46bd      	mov	sp, r7
 8009304:	b004      	add	sp, #16
 8009306:	bd80      	pop	{r7, pc}

08009308 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b084      	sub	sp, #16
 800930c:	af00      	add	r7, sp, #0
 800930e:	60f8      	str	r0, [r7, #12]
 8009310:	60b9      	str	r1, [r7, #8]
 8009312:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009314:	e032      	b.n	800937c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009316:	687a      	ldr	r2, [r7, #4]
 8009318:	68b9      	ldr	r1, [r7, #8]
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	0018      	movs	r0, r3
 800931e:	f000 f91b 	bl	8009558 <I2C_IsErrorOccurred>
 8009322:	1e03      	subs	r3, r0, #0
 8009324:	d001      	beq.n	800932a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009326:	2301      	movs	r3, #1
 8009328:	e030      	b.n	800938c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800932a:	68bb      	ldr	r3, [r7, #8]
 800932c:	3301      	adds	r3, #1
 800932e:	d025      	beq.n	800937c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009330:	f7ff f99c 	bl	800866c <HAL_GetTick>
 8009334:	0002      	movs	r2, r0
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	1ad3      	subs	r3, r2, r3
 800933a:	68ba      	ldr	r2, [r7, #8]
 800933c:	429a      	cmp	r2, r3
 800933e:	d302      	bcc.n	8009346 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d11a      	bne.n	800937c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	699b      	ldr	r3, [r3, #24]
 800934c:	2202      	movs	r2, #2
 800934e:	4013      	ands	r3, r2
 8009350:	2b02      	cmp	r3, #2
 8009352:	d013      	beq.n	800937c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009358:	2220      	movs	r2, #32
 800935a:	431a      	orrs	r2, r3
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	2241      	movs	r2, #65	@ 0x41
 8009364:	2120      	movs	r1, #32
 8009366:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	2242      	movs	r2, #66	@ 0x42
 800936c:	2100      	movs	r1, #0
 800936e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	2240      	movs	r2, #64	@ 0x40
 8009374:	2100      	movs	r1, #0
 8009376:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8009378:	2301      	movs	r3, #1
 800937a:	e007      	b.n	800938c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	699b      	ldr	r3, [r3, #24]
 8009382:	2202      	movs	r2, #2
 8009384:	4013      	ands	r3, r2
 8009386:	2b02      	cmp	r3, #2
 8009388:	d1c5      	bne.n	8009316 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800938a:	2300      	movs	r3, #0
}
 800938c:	0018      	movs	r0, r3
 800938e:	46bd      	mov	sp, r7
 8009390:	b004      	add	sp, #16
 8009392:	bd80      	pop	{r7, pc}

08009394 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b084      	sub	sp, #16
 8009398:	af00      	add	r7, sp, #0
 800939a:	60f8      	str	r0, [r7, #12]
 800939c:	60b9      	str	r1, [r7, #8]
 800939e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80093a0:	e02f      	b.n	8009402 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80093a2:	687a      	ldr	r2, [r7, #4]
 80093a4:	68b9      	ldr	r1, [r7, #8]
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	0018      	movs	r0, r3
 80093aa:	f000 f8d5 	bl	8009558 <I2C_IsErrorOccurred>
 80093ae:	1e03      	subs	r3, r0, #0
 80093b0:	d001      	beq.n	80093b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80093b2:	2301      	movs	r3, #1
 80093b4:	e02d      	b.n	8009412 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80093b6:	f7ff f959 	bl	800866c <HAL_GetTick>
 80093ba:	0002      	movs	r2, r0
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	1ad3      	subs	r3, r2, r3
 80093c0:	68ba      	ldr	r2, [r7, #8]
 80093c2:	429a      	cmp	r2, r3
 80093c4:	d302      	bcc.n	80093cc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80093c6:	68bb      	ldr	r3, [r7, #8]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d11a      	bne.n	8009402 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	699b      	ldr	r3, [r3, #24]
 80093d2:	2220      	movs	r2, #32
 80093d4:	4013      	ands	r3, r2
 80093d6:	2b20      	cmp	r3, #32
 80093d8:	d013      	beq.n	8009402 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093de:	2220      	movs	r2, #32
 80093e0:	431a      	orrs	r2, r3
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	2241      	movs	r2, #65	@ 0x41
 80093ea:	2120      	movs	r1, #32
 80093ec:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	2242      	movs	r2, #66	@ 0x42
 80093f2:	2100      	movs	r1, #0
 80093f4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	2240      	movs	r2, #64	@ 0x40
 80093fa:	2100      	movs	r1, #0
 80093fc:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80093fe:	2301      	movs	r3, #1
 8009400:	e007      	b.n	8009412 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	699b      	ldr	r3, [r3, #24]
 8009408:	2220      	movs	r2, #32
 800940a:	4013      	ands	r3, r2
 800940c:	2b20      	cmp	r3, #32
 800940e:	d1c8      	bne.n	80093a2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009410:	2300      	movs	r3, #0
}
 8009412:	0018      	movs	r0, r3
 8009414:	46bd      	mov	sp, r7
 8009416:	b004      	add	sp, #16
 8009418:	bd80      	pop	{r7, pc}
	...

0800941c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b086      	sub	sp, #24
 8009420:	af00      	add	r7, sp, #0
 8009422:	60f8      	str	r0, [r7, #12]
 8009424:	60b9      	str	r1, [r7, #8]
 8009426:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009428:	2317      	movs	r3, #23
 800942a:	18fb      	adds	r3, r7, r3
 800942c:	2200      	movs	r2, #0
 800942e:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8009430:	e07b      	b.n	800952a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009432:	687a      	ldr	r2, [r7, #4]
 8009434:	68b9      	ldr	r1, [r7, #8]
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	0018      	movs	r0, r3
 800943a:	f000 f88d 	bl	8009558 <I2C_IsErrorOccurred>
 800943e:	1e03      	subs	r3, r0, #0
 8009440:	d003      	beq.n	800944a <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 8009442:	2317      	movs	r3, #23
 8009444:	18fb      	adds	r3, r7, r3
 8009446:	2201      	movs	r2, #1
 8009448:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	699b      	ldr	r3, [r3, #24]
 8009450:	2220      	movs	r2, #32
 8009452:	4013      	ands	r3, r2
 8009454:	2b20      	cmp	r3, #32
 8009456:	d140      	bne.n	80094da <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 8009458:	2117      	movs	r1, #23
 800945a:	187b      	adds	r3, r7, r1
 800945c:	781b      	ldrb	r3, [r3, #0]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d13b      	bne.n	80094da <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	699b      	ldr	r3, [r3, #24]
 8009468:	2204      	movs	r2, #4
 800946a:	4013      	ands	r3, r2
 800946c:	2b04      	cmp	r3, #4
 800946e:	d106      	bne.n	800947e <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009474:	2b00      	cmp	r3, #0
 8009476:	d002      	beq.n	800947e <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8009478:	187b      	adds	r3, r7, r1
 800947a:	2200      	movs	r2, #0
 800947c:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	699b      	ldr	r3, [r3, #24]
 8009484:	2210      	movs	r2, #16
 8009486:	4013      	ands	r3, r2
 8009488:	2b10      	cmp	r3, #16
 800948a:	d123      	bne.n	80094d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	2210      	movs	r2, #16
 8009492:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	2204      	movs	r2, #4
 8009498:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	2220      	movs	r2, #32
 80094a0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	685a      	ldr	r2, [r3, #4]
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	4929      	ldr	r1, [pc, #164]	@ (8009554 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 80094ae:	400a      	ands	r2, r1
 80094b0:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	2241      	movs	r2, #65	@ 0x41
 80094b6:	2120      	movs	r1, #32
 80094b8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	2242      	movs	r2, #66	@ 0x42
 80094be:	2100      	movs	r1, #0
 80094c0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	2240      	movs	r2, #64	@ 0x40
 80094c6:	2100      	movs	r1, #0
 80094c8:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 80094ca:	2317      	movs	r3, #23
 80094cc:	18fb      	adds	r3, r7, r3
 80094ce:	2201      	movs	r2, #1
 80094d0:	701a      	strb	r2, [r3, #0]
 80094d2:	e002      	b.n	80094da <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	2200      	movs	r2, #0
 80094d8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80094da:	f7ff f8c7 	bl	800866c <HAL_GetTick>
 80094de:	0002      	movs	r2, r0
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	1ad3      	subs	r3, r2, r3
 80094e4:	68ba      	ldr	r2, [r7, #8]
 80094e6:	429a      	cmp	r2, r3
 80094e8:	d302      	bcc.n	80094f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 80094ea:	68bb      	ldr	r3, [r7, #8]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d11c      	bne.n	800952a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 80094f0:	2017      	movs	r0, #23
 80094f2:	183b      	adds	r3, r7, r0
 80094f4:	781b      	ldrb	r3, [r3, #0]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d117      	bne.n	800952a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	699b      	ldr	r3, [r3, #24]
 8009500:	2204      	movs	r2, #4
 8009502:	4013      	ands	r3, r2
 8009504:	2b04      	cmp	r3, #4
 8009506:	d010      	beq.n	800952a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800950c:	2220      	movs	r2, #32
 800950e:	431a      	orrs	r2, r3
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	2241      	movs	r2, #65	@ 0x41
 8009518:	2120      	movs	r1, #32
 800951a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	2240      	movs	r2, #64	@ 0x40
 8009520:	2100      	movs	r1, #0
 8009522:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8009524:	183b      	adds	r3, r7, r0
 8009526:	2201      	movs	r2, #1
 8009528:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	699b      	ldr	r3, [r3, #24]
 8009530:	2204      	movs	r2, #4
 8009532:	4013      	ands	r3, r2
 8009534:	2b04      	cmp	r3, #4
 8009536:	d005      	beq.n	8009544 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8009538:	2317      	movs	r3, #23
 800953a:	18fb      	adds	r3, r7, r3
 800953c:	781b      	ldrb	r3, [r3, #0]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d100      	bne.n	8009544 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8009542:	e776      	b.n	8009432 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 8009544:	2317      	movs	r3, #23
 8009546:	18fb      	adds	r3, r7, r3
 8009548:	781b      	ldrb	r3, [r3, #0]
}
 800954a:	0018      	movs	r0, r3
 800954c:	46bd      	mov	sp, r7
 800954e:	b006      	add	sp, #24
 8009550:	bd80      	pop	{r7, pc}
 8009552:	46c0      	nop			@ (mov r8, r8)
 8009554:	fe00e800 	.word	0xfe00e800

08009558 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b08a      	sub	sp, #40	@ 0x28
 800955c:	af00      	add	r7, sp, #0
 800955e:	60f8      	str	r0, [r7, #12]
 8009560:	60b9      	str	r1, [r7, #8]
 8009562:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009564:	2327      	movs	r3, #39	@ 0x27
 8009566:	18fb      	adds	r3, r7, r3
 8009568:	2200      	movs	r2, #0
 800956a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	699b      	ldr	r3, [r3, #24]
 8009572:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009574:	2300      	movs	r3, #0
 8009576:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800957c:	69bb      	ldr	r3, [r7, #24]
 800957e:	2210      	movs	r2, #16
 8009580:	4013      	ands	r3, r2
 8009582:	d100      	bne.n	8009586 <I2C_IsErrorOccurred+0x2e>
 8009584:	e079      	b.n	800967a <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	2210      	movs	r2, #16
 800958c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800958e:	e057      	b.n	8009640 <I2C_IsErrorOccurred+0xe8>
 8009590:	2227      	movs	r2, #39	@ 0x27
 8009592:	18bb      	adds	r3, r7, r2
 8009594:	18ba      	adds	r2, r7, r2
 8009596:	7812      	ldrb	r2, [r2, #0]
 8009598:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800959a:	68bb      	ldr	r3, [r7, #8]
 800959c:	3301      	adds	r3, #1
 800959e:	d04f      	beq.n	8009640 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80095a0:	f7ff f864 	bl	800866c <HAL_GetTick>
 80095a4:	0002      	movs	r2, r0
 80095a6:	69fb      	ldr	r3, [r7, #28]
 80095a8:	1ad3      	subs	r3, r2, r3
 80095aa:	68ba      	ldr	r2, [r7, #8]
 80095ac:	429a      	cmp	r2, r3
 80095ae:	d302      	bcc.n	80095b6 <I2C_IsErrorOccurred+0x5e>
 80095b0:	68bb      	ldr	r3, [r7, #8]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d144      	bne.n	8009640 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	685a      	ldr	r2, [r3, #4]
 80095bc:	2380      	movs	r3, #128	@ 0x80
 80095be:	01db      	lsls	r3, r3, #7
 80095c0:	4013      	ands	r3, r2
 80095c2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80095c4:	2013      	movs	r0, #19
 80095c6:	183b      	adds	r3, r7, r0
 80095c8:	68fa      	ldr	r2, [r7, #12]
 80095ca:	2142      	movs	r1, #66	@ 0x42
 80095cc:	5c52      	ldrb	r2, [r2, r1]
 80095ce:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	699a      	ldr	r2, [r3, #24]
 80095d6:	2380      	movs	r3, #128	@ 0x80
 80095d8:	021b      	lsls	r3, r3, #8
 80095da:	401a      	ands	r2, r3
 80095dc:	2380      	movs	r3, #128	@ 0x80
 80095de:	021b      	lsls	r3, r3, #8
 80095e0:	429a      	cmp	r2, r3
 80095e2:	d126      	bne.n	8009632 <I2C_IsErrorOccurred+0xda>
 80095e4:	697a      	ldr	r2, [r7, #20]
 80095e6:	2380      	movs	r3, #128	@ 0x80
 80095e8:	01db      	lsls	r3, r3, #7
 80095ea:	429a      	cmp	r2, r3
 80095ec:	d021      	beq.n	8009632 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 80095ee:	183b      	adds	r3, r7, r0
 80095f0:	781b      	ldrb	r3, [r3, #0]
 80095f2:	2b20      	cmp	r3, #32
 80095f4:	d01d      	beq.n	8009632 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	685a      	ldr	r2, [r3, #4]
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	2180      	movs	r1, #128	@ 0x80
 8009602:	01c9      	lsls	r1, r1, #7
 8009604:	430a      	orrs	r2, r1
 8009606:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009608:	f7ff f830 	bl	800866c <HAL_GetTick>
 800960c:	0003      	movs	r3, r0
 800960e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009610:	e00f      	b.n	8009632 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009612:	f7ff f82b 	bl	800866c <HAL_GetTick>
 8009616:	0002      	movs	r2, r0
 8009618:	69fb      	ldr	r3, [r7, #28]
 800961a:	1ad3      	subs	r3, r2, r3
 800961c:	2b19      	cmp	r3, #25
 800961e:	d908      	bls.n	8009632 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009620:	6a3b      	ldr	r3, [r7, #32]
 8009622:	2220      	movs	r2, #32
 8009624:	4313      	orrs	r3, r2
 8009626:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009628:	2327      	movs	r3, #39	@ 0x27
 800962a:	18fb      	adds	r3, r7, r3
 800962c:	2201      	movs	r2, #1
 800962e:	701a      	strb	r2, [r3, #0]

              break;
 8009630:	e006      	b.n	8009640 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	699b      	ldr	r3, [r3, #24]
 8009638:	2220      	movs	r2, #32
 800963a:	4013      	ands	r3, r2
 800963c:	2b20      	cmp	r3, #32
 800963e:	d1e8      	bne.n	8009612 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	699b      	ldr	r3, [r3, #24]
 8009646:	2220      	movs	r2, #32
 8009648:	4013      	ands	r3, r2
 800964a:	2b20      	cmp	r3, #32
 800964c:	d004      	beq.n	8009658 <I2C_IsErrorOccurred+0x100>
 800964e:	2327      	movs	r3, #39	@ 0x27
 8009650:	18fb      	adds	r3, r7, r3
 8009652:	781b      	ldrb	r3, [r3, #0]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d09b      	beq.n	8009590 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009658:	2327      	movs	r3, #39	@ 0x27
 800965a:	18fb      	adds	r3, r7, r3
 800965c:	781b      	ldrb	r3, [r3, #0]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d103      	bne.n	800966a <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	2220      	movs	r2, #32
 8009668:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800966a:	6a3b      	ldr	r3, [r7, #32]
 800966c:	2204      	movs	r2, #4
 800966e:	4313      	orrs	r3, r2
 8009670:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009672:	2327      	movs	r3, #39	@ 0x27
 8009674:	18fb      	adds	r3, r7, r3
 8009676:	2201      	movs	r2, #1
 8009678:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	699b      	ldr	r3, [r3, #24]
 8009680:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009682:	69ba      	ldr	r2, [r7, #24]
 8009684:	2380      	movs	r3, #128	@ 0x80
 8009686:	005b      	lsls	r3, r3, #1
 8009688:	4013      	ands	r3, r2
 800968a:	d00c      	beq.n	80096a6 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800968c:	6a3b      	ldr	r3, [r7, #32]
 800968e:	2201      	movs	r2, #1
 8009690:	4313      	orrs	r3, r2
 8009692:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	2280      	movs	r2, #128	@ 0x80
 800969a:	0052      	lsls	r2, r2, #1
 800969c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800969e:	2327      	movs	r3, #39	@ 0x27
 80096a0:	18fb      	adds	r3, r7, r3
 80096a2:	2201      	movs	r2, #1
 80096a4:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80096a6:	69ba      	ldr	r2, [r7, #24]
 80096a8:	2380      	movs	r3, #128	@ 0x80
 80096aa:	00db      	lsls	r3, r3, #3
 80096ac:	4013      	ands	r3, r2
 80096ae:	d00c      	beq.n	80096ca <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80096b0:	6a3b      	ldr	r3, [r7, #32]
 80096b2:	2208      	movs	r2, #8
 80096b4:	4313      	orrs	r3, r2
 80096b6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	2280      	movs	r2, #128	@ 0x80
 80096be:	00d2      	lsls	r2, r2, #3
 80096c0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80096c2:	2327      	movs	r3, #39	@ 0x27
 80096c4:	18fb      	adds	r3, r7, r3
 80096c6:	2201      	movs	r2, #1
 80096c8:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80096ca:	69ba      	ldr	r2, [r7, #24]
 80096cc:	2380      	movs	r3, #128	@ 0x80
 80096ce:	009b      	lsls	r3, r3, #2
 80096d0:	4013      	ands	r3, r2
 80096d2:	d00c      	beq.n	80096ee <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80096d4:	6a3b      	ldr	r3, [r7, #32]
 80096d6:	2202      	movs	r2, #2
 80096d8:	4313      	orrs	r3, r2
 80096da:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	2280      	movs	r2, #128	@ 0x80
 80096e2:	0092      	lsls	r2, r2, #2
 80096e4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80096e6:	2327      	movs	r3, #39	@ 0x27
 80096e8:	18fb      	adds	r3, r7, r3
 80096ea:	2201      	movs	r2, #1
 80096ec:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80096ee:	2327      	movs	r3, #39	@ 0x27
 80096f0:	18fb      	adds	r3, r7, r3
 80096f2:	781b      	ldrb	r3, [r3, #0]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d01d      	beq.n	8009734 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	0018      	movs	r0, r3
 80096fc:	f7ff fd8a 	bl	8009214 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	685a      	ldr	r2, [r3, #4]
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	490e      	ldr	r1, [pc, #56]	@ (8009744 <I2C_IsErrorOccurred+0x1ec>)
 800970c:	400a      	ands	r2, r1
 800970e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009714:	6a3b      	ldr	r3, [r7, #32]
 8009716:	431a      	orrs	r2, r3
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	2241      	movs	r2, #65	@ 0x41
 8009720:	2120      	movs	r1, #32
 8009722:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	2242      	movs	r2, #66	@ 0x42
 8009728:	2100      	movs	r1, #0
 800972a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	2240      	movs	r2, #64	@ 0x40
 8009730:	2100      	movs	r1, #0
 8009732:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8009734:	2327      	movs	r3, #39	@ 0x27
 8009736:	18fb      	adds	r3, r7, r3
 8009738:	781b      	ldrb	r3, [r3, #0]
}
 800973a:	0018      	movs	r0, r3
 800973c:	46bd      	mov	sp, r7
 800973e:	b00a      	add	sp, #40	@ 0x28
 8009740:	bd80      	pop	{r7, pc}
 8009742:	46c0      	nop			@ (mov r8, r8)
 8009744:	fe00e800 	.word	0xfe00e800

08009748 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009748:	b590      	push	{r4, r7, lr}
 800974a:	b087      	sub	sp, #28
 800974c:	af00      	add	r7, sp, #0
 800974e:	60f8      	str	r0, [r7, #12]
 8009750:	0008      	movs	r0, r1
 8009752:	0011      	movs	r1, r2
 8009754:	607b      	str	r3, [r7, #4]
 8009756:	240a      	movs	r4, #10
 8009758:	193b      	adds	r3, r7, r4
 800975a:	1c02      	adds	r2, r0, #0
 800975c:	801a      	strh	r2, [r3, #0]
 800975e:	2009      	movs	r0, #9
 8009760:	183b      	adds	r3, r7, r0
 8009762:	1c0a      	adds	r2, r1, #0
 8009764:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009766:	193b      	adds	r3, r7, r4
 8009768:	881b      	ldrh	r3, [r3, #0]
 800976a:	059b      	lsls	r3, r3, #22
 800976c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800976e:	183b      	adds	r3, r7, r0
 8009770:	781b      	ldrb	r3, [r3, #0]
 8009772:	0419      	lsls	r1, r3, #16
 8009774:	23ff      	movs	r3, #255	@ 0xff
 8009776:	041b      	lsls	r3, r3, #16
 8009778:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800977a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009782:	4313      	orrs	r3, r2
 8009784:	005b      	lsls	r3, r3, #1
 8009786:	085b      	lsrs	r3, r3, #1
 8009788:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	685b      	ldr	r3, [r3, #4]
 8009790:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009792:	0d51      	lsrs	r1, r2, #21
 8009794:	2280      	movs	r2, #128	@ 0x80
 8009796:	00d2      	lsls	r2, r2, #3
 8009798:	400a      	ands	r2, r1
 800979a:	4907      	ldr	r1, [pc, #28]	@ (80097b8 <I2C_TransferConfig+0x70>)
 800979c:	430a      	orrs	r2, r1
 800979e:	43d2      	mvns	r2, r2
 80097a0:	401a      	ands	r2, r3
 80097a2:	0011      	movs	r1, r2
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	697a      	ldr	r2, [r7, #20]
 80097aa:	430a      	orrs	r2, r1
 80097ac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80097ae:	46c0      	nop			@ (mov r8, r8)
 80097b0:	46bd      	mov	sp, r7
 80097b2:	b007      	add	sp, #28
 80097b4:	bd90      	pop	{r4, r7, pc}
 80097b6:	46c0      	nop			@ (mov r8, r8)
 80097b8:	03ff63ff 	.word	0x03ff63ff

080097bc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b082      	sub	sp, #8
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
 80097c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2241      	movs	r2, #65	@ 0x41
 80097ca:	5c9b      	ldrb	r3, [r3, r2]
 80097cc:	b2db      	uxtb	r3, r3
 80097ce:	2b20      	cmp	r3, #32
 80097d0:	d138      	bne.n	8009844 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2240      	movs	r2, #64	@ 0x40
 80097d6:	5c9b      	ldrb	r3, [r3, r2]
 80097d8:	2b01      	cmp	r3, #1
 80097da:	d101      	bne.n	80097e0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80097dc:	2302      	movs	r3, #2
 80097de:	e032      	b.n	8009846 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2240      	movs	r2, #64	@ 0x40
 80097e4:	2101      	movs	r1, #1
 80097e6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2241      	movs	r2, #65	@ 0x41
 80097ec:	2124      	movs	r1, #36	@ 0x24
 80097ee:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	681a      	ldr	r2, [r3, #0]
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	2101      	movs	r1, #1
 80097fc:	438a      	bics	r2, r1
 80097fe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	681a      	ldr	r2, [r3, #0]
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	4911      	ldr	r1, [pc, #68]	@ (8009850 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800980c:	400a      	ands	r2, r1
 800980e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	6819      	ldr	r1, [r3, #0]
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	683a      	ldr	r2, [r7, #0]
 800981c:	430a      	orrs	r2, r1
 800981e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	681a      	ldr	r2, [r3, #0]
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	2101      	movs	r1, #1
 800982c:	430a      	orrs	r2, r1
 800982e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2241      	movs	r2, #65	@ 0x41
 8009834:	2120      	movs	r1, #32
 8009836:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2240      	movs	r2, #64	@ 0x40
 800983c:	2100      	movs	r1, #0
 800983e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009840:	2300      	movs	r3, #0
 8009842:	e000      	b.n	8009846 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009844:	2302      	movs	r3, #2
  }
}
 8009846:	0018      	movs	r0, r3
 8009848:	46bd      	mov	sp, r7
 800984a:	b002      	add	sp, #8
 800984c:	bd80      	pop	{r7, pc}
 800984e:	46c0      	nop			@ (mov r8, r8)
 8009850:	ffffefff 	.word	0xffffefff

08009854 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b084      	sub	sp, #16
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
 800985c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	2241      	movs	r2, #65	@ 0x41
 8009862:	5c9b      	ldrb	r3, [r3, r2]
 8009864:	b2db      	uxtb	r3, r3
 8009866:	2b20      	cmp	r3, #32
 8009868:	d139      	bne.n	80098de <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2240      	movs	r2, #64	@ 0x40
 800986e:	5c9b      	ldrb	r3, [r3, r2]
 8009870:	2b01      	cmp	r3, #1
 8009872:	d101      	bne.n	8009878 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009874:	2302      	movs	r3, #2
 8009876:	e033      	b.n	80098e0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2240      	movs	r2, #64	@ 0x40
 800987c:	2101      	movs	r1, #1
 800987e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2241      	movs	r2, #65	@ 0x41
 8009884:	2124      	movs	r1, #36	@ 0x24
 8009886:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	681a      	ldr	r2, [r3, #0]
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	2101      	movs	r1, #1
 8009894:	438a      	bics	r2, r1
 8009896:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	4a11      	ldr	r2, [pc, #68]	@ (80098e8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80098a4:	4013      	ands	r3, r2
 80098a6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	021b      	lsls	r3, r3, #8
 80098ac:	68fa      	ldr	r2, [r7, #12]
 80098ae:	4313      	orrs	r3, r2
 80098b0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	68fa      	ldr	r2, [r7, #12]
 80098b8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	681a      	ldr	r2, [r3, #0]
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	2101      	movs	r1, #1
 80098c6:	430a      	orrs	r2, r1
 80098c8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2241      	movs	r2, #65	@ 0x41
 80098ce:	2120      	movs	r1, #32
 80098d0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	2240      	movs	r2, #64	@ 0x40
 80098d6:	2100      	movs	r1, #0
 80098d8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80098da:	2300      	movs	r3, #0
 80098dc:	e000      	b.n	80098e0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80098de:	2302      	movs	r3, #2
  }
}
 80098e0:	0018      	movs	r0, r3
 80098e2:	46bd      	mov	sp, r7
 80098e4:	b004      	add	sp, #16
 80098e6:	bd80      	pop	{r7, pc}
 80098e8:	fffff0ff 	.word	0xfffff0ff

080098ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b084      	sub	sp, #16
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80098f4:	4b19      	ldr	r3, [pc, #100]	@ (800995c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	4a19      	ldr	r2, [pc, #100]	@ (8009960 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80098fa:	4013      	ands	r3, r2
 80098fc:	0019      	movs	r1, r3
 80098fe:	4b17      	ldr	r3, [pc, #92]	@ (800995c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8009900:	687a      	ldr	r2, [r7, #4]
 8009902:	430a      	orrs	r2, r1
 8009904:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009906:	687a      	ldr	r2, [r7, #4]
 8009908:	2380      	movs	r3, #128	@ 0x80
 800990a:	009b      	lsls	r3, r3, #2
 800990c:	429a      	cmp	r2, r3
 800990e:	d11f      	bne.n	8009950 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8009910:	4b14      	ldr	r3, [pc, #80]	@ (8009964 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8009912:	681a      	ldr	r2, [r3, #0]
 8009914:	0013      	movs	r3, r2
 8009916:	005b      	lsls	r3, r3, #1
 8009918:	189b      	adds	r3, r3, r2
 800991a:	005b      	lsls	r3, r3, #1
 800991c:	4912      	ldr	r1, [pc, #72]	@ (8009968 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800991e:	0018      	movs	r0, r3
 8009920:	f7f6 fc16 	bl	8000150 <__udivsi3>
 8009924:	0003      	movs	r3, r0
 8009926:	3301      	adds	r3, #1
 8009928:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800992a:	e008      	b.n	800993e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d003      	beq.n	800993a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	3b01      	subs	r3, #1
 8009936:	60fb      	str	r3, [r7, #12]
 8009938:	e001      	b.n	800993e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800993a:	2303      	movs	r3, #3
 800993c:	e009      	b.n	8009952 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800993e:	4b07      	ldr	r3, [pc, #28]	@ (800995c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8009940:	695a      	ldr	r2, [r3, #20]
 8009942:	2380      	movs	r3, #128	@ 0x80
 8009944:	00db      	lsls	r3, r3, #3
 8009946:	401a      	ands	r2, r3
 8009948:	2380      	movs	r3, #128	@ 0x80
 800994a:	00db      	lsls	r3, r3, #3
 800994c:	429a      	cmp	r2, r3
 800994e:	d0ed      	beq.n	800992c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8009950:	2300      	movs	r3, #0
}
 8009952:	0018      	movs	r0, r3
 8009954:	46bd      	mov	sp, r7
 8009956:	b004      	add	sp, #16
 8009958:	bd80      	pop	{r7, pc}
 800995a:	46c0      	nop			@ (mov r8, r8)
 800995c:	40007000 	.word	0x40007000
 8009960:	fffff9ff 	.word	0xfffff9ff
 8009964:	20000d38 	.word	0x20000d38
 8009968:	000f4240 	.word	0x000f4240

0800996c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8009970:	4b03      	ldr	r3, [pc, #12]	@ (8009980 <LL_RCC_GetAPB1Prescaler+0x14>)
 8009972:	689a      	ldr	r2, [r3, #8]
 8009974:	23e0      	movs	r3, #224	@ 0xe0
 8009976:	01db      	lsls	r3, r3, #7
 8009978:	4013      	ands	r3, r2
}
 800997a:	0018      	movs	r0, r3
 800997c:	46bd      	mov	sp, r7
 800997e:	bd80      	pop	{r7, pc}
 8009980:	40021000 	.word	0x40021000

08009984 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b088      	sub	sp, #32
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d102      	bne.n	8009998 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8009992:	2301      	movs	r3, #1
 8009994:	f000 fb50 	bl	800a038 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	2201      	movs	r2, #1
 800999e:	4013      	ands	r3, r2
 80099a0:	d100      	bne.n	80099a4 <HAL_RCC_OscConfig+0x20>
 80099a2:	e07c      	b.n	8009a9e <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80099a4:	4bc3      	ldr	r3, [pc, #780]	@ (8009cb4 <HAL_RCC_OscConfig+0x330>)
 80099a6:	689b      	ldr	r3, [r3, #8]
 80099a8:	2238      	movs	r2, #56	@ 0x38
 80099aa:	4013      	ands	r3, r2
 80099ac:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80099ae:	4bc1      	ldr	r3, [pc, #772]	@ (8009cb4 <HAL_RCC_OscConfig+0x330>)
 80099b0:	68db      	ldr	r3, [r3, #12]
 80099b2:	2203      	movs	r2, #3
 80099b4:	4013      	ands	r3, r2
 80099b6:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80099b8:	69bb      	ldr	r3, [r7, #24]
 80099ba:	2b10      	cmp	r3, #16
 80099bc:	d102      	bne.n	80099c4 <HAL_RCC_OscConfig+0x40>
 80099be:	697b      	ldr	r3, [r7, #20]
 80099c0:	2b03      	cmp	r3, #3
 80099c2:	d002      	beq.n	80099ca <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80099c4:	69bb      	ldr	r3, [r7, #24]
 80099c6:	2b08      	cmp	r3, #8
 80099c8:	d10b      	bne.n	80099e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80099ca:	4bba      	ldr	r3, [pc, #744]	@ (8009cb4 <HAL_RCC_OscConfig+0x330>)
 80099cc:	681a      	ldr	r2, [r3, #0]
 80099ce:	2380      	movs	r3, #128	@ 0x80
 80099d0:	029b      	lsls	r3, r3, #10
 80099d2:	4013      	ands	r3, r2
 80099d4:	d062      	beq.n	8009a9c <HAL_RCC_OscConfig+0x118>
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	685b      	ldr	r3, [r3, #4]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d15e      	bne.n	8009a9c <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 80099de:	2301      	movs	r3, #1
 80099e0:	e32a      	b.n	800a038 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	685a      	ldr	r2, [r3, #4]
 80099e6:	2380      	movs	r3, #128	@ 0x80
 80099e8:	025b      	lsls	r3, r3, #9
 80099ea:	429a      	cmp	r2, r3
 80099ec:	d107      	bne.n	80099fe <HAL_RCC_OscConfig+0x7a>
 80099ee:	4bb1      	ldr	r3, [pc, #708]	@ (8009cb4 <HAL_RCC_OscConfig+0x330>)
 80099f0:	681a      	ldr	r2, [r3, #0]
 80099f2:	4bb0      	ldr	r3, [pc, #704]	@ (8009cb4 <HAL_RCC_OscConfig+0x330>)
 80099f4:	2180      	movs	r1, #128	@ 0x80
 80099f6:	0249      	lsls	r1, r1, #9
 80099f8:	430a      	orrs	r2, r1
 80099fa:	601a      	str	r2, [r3, #0]
 80099fc:	e020      	b.n	8009a40 <HAL_RCC_OscConfig+0xbc>
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	685a      	ldr	r2, [r3, #4]
 8009a02:	23a0      	movs	r3, #160	@ 0xa0
 8009a04:	02db      	lsls	r3, r3, #11
 8009a06:	429a      	cmp	r2, r3
 8009a08:	d10e      	bne.n	8009a28 <HAL_RCC_OscConfig+0xa4>
 8009a0a:	4baa      	ldr	r3, [pc, #680]	@ (8009cb4 <HAL_RCC_OscConfig+0x330>)
 8009a0c:	681a      	ldr	r2, [r3, #0]
 8009a0e:	4ba9      	ldr	r3, [pc, #676]	@ (8009cb4 <HAL_RCC_OscConfig+0x330>)
 8009a10:	2180      	movs	r1, #128	@ 0x80
 8009a12:	02c9      	lsls	r1, r1, #11
 8009a14:	430a      	orrs	r2, r1
 8009a16:	601a      	str	r2, [r3, #0]
 8009a18:	4ba6      	ldr	r3, [pc, #664]	@ (8009cb4 <HAL_RCC_OscConfig+0x330>)
 8009a1a:	681a      	ldr	r2, [r3, #0]
 8009a1c:	4ba5      	ldr	r3, [pc, #660]	@ (8009cb4 <HAL_RCC_OscConfig+0x330>)
 8009a1e:	2180      	movs	r1, #128	@ 0x80
 8009a20:	0249      	lsls	r1, r1, #9
 8009a22:	430a      	orrs	r2, r1
 8009a24:	601a      	str	r2, [r3, #0]
 8009a26:	e00b      	b.n	8009a40 <HAL_RCC_OscConfig+0xbc>
 8009a28:	4ba2      	ldr	r3, [pc, #648]	@ (8009cb4 <HAL_RCC_OscConfig+0x330>)
 8009a2a:	681a      	ldr	r2, [r3, #0]
 8009a2c:	4ba1      	ldr	r3, [pc, #644]	@ (8009cb4 <HAL_RCC_OscConfig+0x330>)
 8009a2e:	49a2      	ldr	r1, [pc, #648]	@ (8009cb8 <HAL_RCC_OscConfig+0x334>)
 8009a30:	400a      	ands	r2, r1
 8009a32:	601a      	str	r2, [r3, #0]
 8009a34:	4b9f      	ldr	r3, [pc, #636]	@ (8009cb4 <HAL_RCC_OscConfig+0x330>)
 8009a36:	681a      	ldr	r2, [r3, #0]
 8009a38:	4b9e      	ldr	r3, [pc, #632]	@ (8009cb4 <HAL_RCC_OscConfig+0x330>)
 8009a3a:	49a0      	ldr	r1, [pc, #640]	@ (8009cbc <HAL_RCC_OscConfig+0x338>)
 8009a3c:	400a      	ands	r2, r1
 8009a3e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	685b      	ldr	r3, [r3, #4]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d014      	beq.n	8009a72 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a48:	f7fe fe10 	bl	800866c <HAL_GetTick>
 8009a4c:	0003      	movs	r3, r0
 8009a4e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009a50:	e008      	b.n	8009a64 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009a52:	f7fe fe0b 	bl	800866c <HAL_GetTick>
 8009a56:	0002      	movs	r2, r0
 8009a58:	693b      	ldr	r3, [r7, #16]
 8009a5a:	1ad3      	subs	r3, r2, r3
 8009a5c:	2b64      	cmp	r3, #100	@ 0x64
 8009a5e:	d901      	bls.n	8009a64 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8009a60:	2303      	movs	r3, #3
 8009a62:	e2e9      	b.n	800a038 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009a64:	4b93      	ldr	r3, [pc, #588]	@ (8009cb4 <HAL_RCC_OscConfig+0x330>)
 8009a66:	681a      	ldr	r2, [r3, #0]
 8009a68:	2380      	movs	r3, #128	@ 0x80
 8009a6a:	029b      	lsls	r3, r3, #10
 8009a6c:	4013      	ands	r3, r2
 8009a6e:	d0f0      	beq.n	8009a52 <HAL_RCC_OscConfig+0xce>
 8009a70:	e015      	b.n	8009a9e <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a72:	f7fe fdfb 	bl	800866c <HAL_GetTick>
 8009a76:	0003      	movs	r3, r0
 8009a78:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009a7a:	e008      	b.n	8009a8e <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009a7c:	f7fe fdf6 	bl	800866c <HAL_GetTick>
 8009a80:	0002      	movs	r2, r0
 8009a82:	693b      	ldr	r3, [r7, #16]
 8009a84:	1ad3      	subs	r3, r2, r3
 8009a86:	2b64      	cmp	r3, #100	@ 0x64
 8009a88:	d901      	bls.n	8009a8e <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8009a8a:	2303      	movs	r3, #3
 8009a8c:	e2d4      	b.n	800a038 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009a8e:	4b89      	ldr	r3, [pc, #548]	@ (8009cb4 <HAL_RCC_OscConfig+0x330>)
 8009a90:	681a      	ldr	r2, [r3, #0]
 8009a92:	2380      	movs	r3, #128	@ 0x80
 8009a94:	029b      	lsls	r3, r3, #10
 8009a96:	4013      	ands	r3, r2
 8009a98:	d1f0      	bne.n	8009a7c <HAL_RCC_OscConfig+0xf8>
 8009a9a:	e000      	b.n	8009a9e <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009a9c:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	2202      	movs	r2, #2
 8009aa4:	4013      	ands	r3, r2
 8009aa6:	d100      	bne.n	8009aaa <HAL_RCC_OscConfig+0x126>
 8009aa8:	e099      	b.n	8009bde <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009aaa:	4b82      	ldr	r3, [pc, #520]	@ (8009cb4 <HAL_RCC_OscConfig+0x330>)
 8009aac:	689b      	ldr	r3, [r3, #8]
 8009aae:	2238      	movs	r2, #56	@ 0x38
 8009ab0:	4013      	ands	r3, r2
 8009ab2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009ab4:	4b7f      	ldr	r3, [pc, #508]	@ (8009cb4 <HAL_RCC_OscConfig+0x330>)
 8009ab6:	68db      	ldr	r3, [r3, #12]
 8009ab8:	2203      	movs	r2, #3
 8009aba:	4013      	ands	r3, r2
 8009abc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8009abe:	69bb      	ldr	r3, [r7, #24]
 8009ac0:	2b10      	cmp	r3, #16
 8009ac2:	d102      	bne.n	8009aca <HAL_RCC_OscConfig+0x146>
 8009ac4:	697b      	ldr	r3, [r7, #20]
 8009ac6:	2b02      	cmp	r3, #2
 8009ac8:	d002      	beq.n	8009ad0 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8009aca:	69bb      	ldr	r3, [r7, #24]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d135      	bne.n	8009b3c <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009ad0:	4b78      	ldr	r3, [pc, #480]	@ (8009cb4 <HAL_RCC_OscConfig+0x330>)
 8009ad2:	681a      	ldr	r2, [r3, #0]
 8009ad4:	2380      	movs	r3, #128	@ 0x80
 8009ad6:	00db      	lsls	r3, r3, #3
 8009ad8:	4013      	ands	r3, r2
 8009ada:	d005      	beq.n	8009ae8 <HAL_RCC_OscConfig+0x164>
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	68db      	ldr	r3, [r3, #12]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d101      	bne.n	8009ae8 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8009ae4:	2301      	movs	r3, #1
 8009ae6:	e2a7      	b.n	800a038 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009ae8:	4b72      	ldr	r3, [pc, #456]	@ (8009cb4 <HAL_RCC_OscConfig+0x330>)
 8009aea:	685b      	ldr	r3, [r3, #4]
 8009aec:	4a74      	ldr	r2, [pc, #464]	@ (8009cc0 <HAL_RCC_OscConfig+0x33c>)
 8009aee:	4013      	ands	r3, r2
 8009af0:	0019      	movs	r1, r3
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	695b      	ldr	r3, [r3, #20]
 8009af6:	021a      	lsls	r2, r3, #8
 8009af8:	4b6e      	ldr	r3, [pc, #440]	@ (8009cb4 <HAL_RCC_OscConfig+0x330>)
 8009afa:	430a      	orrs	r2, r1
 8009afc:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009afe:	69bb      	ldr	r3, [r7, #24]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d112      	bne.n	8009b2a <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8009b04:	4b6b      	ldr	r3, [pc, #428]	@ (8009cb4 <HAL_RCC_OscConfig+0x330>)
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	4a6e      	ldr	r2, [pc, #440]	@ (8009cc4 <HAL_RCC_OscConfig+0x340>)
 8009b0a:	4013      	ands	r3, r2
 8009b0c:	0019      	movs	r1, r3
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	691a      	ldr	r2, [r3, #16]
 8009b12:	4b68      	ldr	r3, [pc, #416]	@ (8009cb4 <HAL_RCC_OscConfig+0x330>)
 8009b14:	430a      	orrs	r2, r1
 8009b16:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8009b18:	4b66      	ldr	r3, [pc, #408]	@ (8009cb4 <HAL_RCC_OscConfig+0x330>)
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	0adb      	lsrs	r3, r3, #11
 8009b1e:	2207      	movs	r2, #7
 8009b20:	4013      	ands	r3, r2
 8009b22:	4a69      	ldr	r2, [pc, #420]	@ (8009cc8 <HAL_RCC_OscConfig+0x344>)
 8009b24:	40da      	lsrs	r2, r3
 8009b26:	4b69      	ldr	r3, [pc, #420]	@ (8009ccc <HAL_RCC_OscConfig+0x348>)
 8009b28:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8009b2a:	4b69      	ldr	r3, [pc, #420]	@ (8009cd0 <HAL_RCC_OscConfig+0x34c>)
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	0018      	movs	r0, r3
 8009b30:	f7fe fd40 	bl	80085b4 <HAL_InitTick>
 8009b34:	1e03      	subs	r3, r0, #0
 8009b36:	d051      	beq.n	8009bdc <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8009b38:	2301      	movs	r3, #1
 8009b3a:	e27d      	b.n	800a038 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	68db      	ldr	r3, [r3, #12]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d030      	beq.n	8009ba6 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8009b44:	4b5b      	ldr	r3, [pc, #364]	@ (8009cb4 <HAL_RCC_OscConfig+0x330>)
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	4a5e      	ldr	r2, [pc, #376]	@ (8009cc4 <HAL_RCC_OscConfig+0x340>)
 8009b4a:	4013      	ands	r3, r2
 8009b4c:	0019      	movs	r1, r3
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	691a      	ldr	r2, [r3, #16]
 8009b52:	4b58      	ldr	r3, [pc, #352]	@ (8009cb4 <HAL_RCC_OscConfig+0x330>)
 8009b54:	430a      	orrs	r2, r1
 8009b56:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8009b58:	4b56      	ldr	r3, [pc, #344]	@ (8009cb4 <HAL_RCC_OscConfig+0x330>)
 8009b5a:	681a      	ldr	r2, [r3, #0]
 8009b5c:	4b55      	ldr	r3, [pc, #340]	@ (8009cb4 <HAL_RCC_OscConfig+0x330>)
 8009b5e:	2180      	movs	r1, #128	@ 0x80
 8009b60:	0049      	lsls	r1, r1, #1
 8009b62:	430a      	orrs	r2, r1
 8009b64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b66:	f7fe fd81 	bl	800866c <HAL_GetTick>
 8009b6a:	0003      	movs	r3, r0
 8009b6c:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009b6e:	e008      	b.n	8009b82 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009b70:	f7fe fd7c 	bl	800866c <HAL_GetTick>
 8009b74:	0002      	movs	r2, r0
 8009b76:	693b      	ldr	r3, [r7, #16]
 8009b78:	1ad3      	subs	r3, r2, r3
 8009b7a:	2b02      	cmp	r3, #2
 8009b7c:	d901      	bls.n	8009b82 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8009b7e:	2303      	movs	r3, #3
 8009b80:	e25a      	b.n	800a038 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009b82:	4b4c      	ldr	r3, [pc, #304]	@ (8009cb4 <HAL_RCC_OscConfig+0x330>)
 8009b84:	681a      	ldr	r2, [r3, #0]
 8009b86:	2380      	movs	r3, #128	@ 0x80
 8009b88:	00db      	lsls	r3, r3, #3
 8009b8a:	4013      	ands	r3, r2
 8009b8c:	d0f0      	beq.n	8009b70 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009b8e:	4b49      	ldr	r3, [pc, #292]	@ (8009cb4 <HAL_RCC_OscConfig+0x330>)
 8009b90:	685b      	ldr	r3, [r3, #4]
 8009b92:	4a4b      	ldr	r2, [pc, #300]	@ (8009cc0 <HAL_RCC_OscConfig+0x33c>)
 8009b94:	4013      	ands	r3, r2
 8009b96:	0019      	movs	r1, r3
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	695b      	ldr	r3, [r3, #20]
 8009b9c:	021a      	lsls	r2, r3, #8
 8009b9e:	4b45      	ldr	r3, [pc, #276]	@ (8009cb4 <HAL_RCC_OscConfig+0x330>)
 8009ba0:	430a      	orrs	r2, r1
 8009ba2:	605a      	str	r2, [r3, #4]
 8009ba4:	e01b      	b.n	8009bde <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8009ba6:	4b43      	ldr	r3, [pc, #268]	@ (8009cb4 <HAL_RCC_OscConfig+0x330>)
 8009ba8:	681a      	ldr	r2, [r3, #0]
 8009baa:	4b42      	ldr	r3, [pc, #264]	@ (8009cb4 <HAL_RCC_OscConfig+0x330>)
 8009bac:	4949      	ldr	r1, [pc, #292]	@ (8009cd4 <HAL_RCC_OscConfig+0x350>)
 8009bae:	400a      	ands	r2, r1
 8009bb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009bb2:	f7fe fd5b 	bl	800866c <HAL_GetTick>
 8009bb6:	0003      	movs	r3, r0
 8009bb8:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009bba:	e008      	b.n	8009bce <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009bbc:	f7fe fd56 	bl	800866c <HAL_GetTick>
 8009bc0:	0002      	movs	r2, r0
 8009bc2:	693b      	ldr	r3, [r7, #16]
 8009bc4:	1ad3      	subs	r3, r2, r3
 8009bc6:	2b02      	cmp	r3, #2
 8009bc8:	d901      	bls.n	8009bce <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8009bca:	2303      	movs	r3, #3
 8009bcc:	e234      	b.n	800a038 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009bce:	4b39      	ldr	r3, [pc, #228]	@ (8009cb4 <HAL_RCC_OscConfig+0x330>)
 8009bd0:	681a      	ldr	r2, [r3, #0]
 8009bd2:	2380      	movs	r3, #128	@ 0x80
 8009bd4:	00db      	lsls	r3, r3, #3
 8009bd6:	4013      	ands	r3, r2
 8009bd8:	d1f0      	bne.n	8009bbc <HAL_RCC_OscConfig+0x238>
 8009bda:	e000      	b.n	8009bde <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009bdc:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	2208      	movs	r2, #8
 8009be4:	4013      	ands	r3, r2
 8009be6:	d047      	beq.n	8009c78 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8009be8:	4b32      	ldr	r3, [pc, #200]	@ (8009cb4 <HAL_RCC_OscConfig+0x330>)
 8009bea:	689b      	ldr	r3, [r3, #8]
 8009bec:	2238      	movs	r2, #56	@ 0x38
 8009bee:	4013      	ands	r3, r2
 8009bf0:	2b18      	cmp	r3, #24
 8009bf2:	d10a      	bne.n	8009c0a <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8009bf4:	4b2f      	ldr	r3, [pc, #188]	@ (8009cb4 <HAL_RCC_OscConfig+0x330>)
 8009bf6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009bf8:	2202      	movs	r2, #2
 8009bfa:	4013      	ands	r3, r2
 8009bfc:	d03c      	beq.n	8009c78 <HAL_RCC_OscConfig+0x2f4>
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	699b      	ldr	r3, [r3, #24]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d138      	bne.n	8009c78 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8009c06:	2301      	movs	r3, #1
 8009c08:	e216      	b.n	800a038 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	699b      	ldr	r3, [r3, #24]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d019      	beq.n	8009c46 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8009c12:	4b28      	ldr	r3, [pc, #160]	@ (8009cb4 <HAL_RCC_OscConfig+0x330>)
 8009c14:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8009c16:	4b27      	ldr	r3, [pc, #156]	@ (8009cb4 <HAL_RCC_OscConfig+0x330>)
 8009c18:	2101      	movs	r1, #1
 8009c1a:	430a      	orrs	r2, r1
 8009c1c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c1e:	f7fe fd25 	bl	800866c <HAL_GetTick>
 8009c22:	0003      	movs	r3, r0
 8009c24:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009c26:	e008      	b.n	8009c3a <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009c28:	f7fe fd20 	bl	800866c <HAL_GetTick>
 8009c2c:	0002      	movs	r2, r0
 8009c2e:	693b      	ldr	r3, [r7, #16]
 8009c30:	1ad3      	subs	r3, r2, r3
 8009c32:	2b02      	cmp	r3, #2
 8009c34:	d901      	bls.n	8009c3a <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8009c36:	2303      	movs	r3, #3
 8009c38:	e1fe      	b.n	800a038 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009c3a:	4b1e      	ldr	r3, [pc, #120]	@ (8009cb4 <HAL_RCC_OscConfig+0x330>)
 8009c3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c3e:	2202      	movs	r2, #2
 8009c40:	4013      	ands	r3, r2
 8009c42:	d0f1      	beq.n	8009c28 <HAL_RCC_OscConfig+0x2a4>
 8009c44:	e018      	b.n	8009c78 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8009c46:	4b1b      	ldr	r3, [pc, #108]	@ (8009cb4 <HAL_RCC_OscConfig+0x330>)
 8009c48:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8009c4a:	4b1a      	ldr	r3, [pc, #104]	@ (8009cb4 <HAL_RCC_OscConfig+0x330>)
 8009c4c:	2101      	movs	r1, #1
 8009c4e:	438a      	bics	r2, r1
 8009c50:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c52:	f7fe fd0b 	bl	800866c <HAL_GetTick>
 8009c56:	0003      	movs	r3, r0
 8009c58:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009c5a:	e008      	b.n	8009c6e <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009c5c:	f7fe fd06 	bl	800866c <HAL_GetTick>
 8009c60:	0002      	movs	r2, r0
 8009c62:	693b      	ldr	r3, [r7, #16]
 8009c64:	1ad3      	subs	r3, r2, r3
 8009c66:	2b02      	cmp	r3, #2
 8009c68:	d901      	bls.n	8009c6e <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8009c6a:	2303      	movs	r3, #3
 8009c6c:	e1e4      	b.n	800a038 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009c6e:	4b11      	ldr	r3, [pc, #68]	@ (8009cb4 <HAL_RCC_OscConfig+0x330>)
 8009c70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c72:	2202      	movs	r2, #2
 8009c74:	4013      	ands	r3, r2
 8009c76:	d1f1      	bne.n	8009c5c <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	2204      	movs	r2, #4
 8009c7e:	4013      	ands	r3, r2
 8009c80:	d100      	bne.n	8009c84 <HAL_RCC_OscConfig+0x300>
 8009c82:	e0c7      	b.n	8009e14 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009c84:	231f      	movs	r3, #31
 8009c86:	18fb      	adds	r3, r7, r3
 8009c88:	2200      	movs	r2, #0
 8009c8a:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8009c8c:	4b09      	ldr	r3, [pc, #36]	@ (8009cb4 <HAL_RCC_OscConfig+0x330>)
 8009c8e:	689b      	ldr	r3, [r3, #8]
 8009c90:	2238      	movs	r2, #56	@ 0x38
 8009c92:	4013      	ands	r3, r2
 8009c94:	2b20      	cmp	r3, #32
 8009c96:	d11f      	bne.n	8009cd8 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8009c98:	4b06      	ldr	r3, [pc, #24]	@ (8009cb4 <HAL_RCC_OscConfig+0x330>)
 8009c9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009c9c:	2202      	movs	r2, #2
 8009c9e:	4013      	ands	r3, r2
 8009ca0:	d100      	bne.n	8009ca4 <HAL_RCC_OscConfig+0x320>
 8009ca2:	e0b7      	b.n	8009e14 <HAL_RCC_OscConfig+0x490>
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	689b      	ldr	r3, [r3, #8]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d000      	beq.n	8009cae <HAL_RCC_OscConfig+0x32a>
 8009cac:	e0b2      	b.n	8009e14 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8009cae:	2301      	movs	r3, #1
 8009cb0:	e1c2      	b.n	800a038 <HAL_RCC_OscConfig+0x6b4>
 8009cb2:	46c0      	nop			@ (mov r8, r8)
 8009cb4:	40021000 	.word	0x40021000
 8009cb8:	fffeffff 	.word	0xfffeffff
 8009cbc:	fffbffff 	.word	0xfffbffff
 8009cc0:	ffff80ff 	.word	0xffff80ff
 8009cc4:	ffffc7ff 	.word	0xffffc7ff
 8009cc8:	00f42400 	.word	0x00f42400
 8009ccc:	20000d38 	.word	0x20000d38
 8009cd0:	20000d3c 	.word	0x20000d3c
 8009cd4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009cd8:	4bb5      	ldr	r3, [pc, #724]	@ (8009fb0 <HAL_RCC_OscConfig+0x62c>)
 8009cda:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009cdc:	2380      	movs	r3, #128	@ 0x80
 8009cde:	055b      	lsls	r3, r3, #21
 8009ce0:	4013      	ands	r3, r2
 8009ce2:	d101      	bne.n	8009ce8 <HAL_RCC_OscConfig+0x364>
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	e000      	b.n	8009cea <HAL_RCC_OscConfig+0x366>
 8009ce8:	2300      	movs	r3, #0
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d011      	beq.n	8009d12 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8009cee:	4bb0      	ldr	r3, [pc, #704]	@ (8009fb0 <HAL_RCC_OscConfig+0x62c>)
 8009cf0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009cf2:	4baf      	ldr	r3, [pc, #700]	@ (8009fb0 <HAL_RCC_OscConfig+0x62c>)
 8009cf4:	2180      	movs	r1, #128	@ 0x80
 8009cf6:	0549      	lsls	r1, r1, #21
 8009cf8:	430a      	orrs	r2, r1
 8009cfa:	63da      	str	r2, [r3, #60]	@ 0x3c
 8009cfc:	4bac      	ldr	r3, [pc, #688]	@ (8009fb0 <HAL_RCC_OscConfig+0x62c>)
 8009cfe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009d00:	2380      	movs	r3, #128	@ 0x80
 8009d02:	055b      	lsls	r3, r3, #21
 8009d04:	4013      	ands	r3, r2
 8009d06:	60fb      	str	r3, [r7, #12]
 8009d08:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8009d0a:	231f      	movs	r3, #31
 8009d0c:	18fb      	adds	r3, r7, r3
 8009d0e:	2201      	movs	r2, #1
 8009d10:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009d12:	4ba8      	ldr	r3, [pc, #672]	@ (8009fb4 <HAL_RCC_OscConfig+0x630>)
 8009d14:	681a      	ldr	r2, [r3, #0]
 8009d16:	2380      	movs	r3, #128	@ 0x80
 8009d18:	005b      	lsls	r3, r3, #1
 8009d1a:	4013      	ands	r3, r2
 8009d1c:	d11a      	bne.n	8009d54 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009d1e:	4ba5      	ldr	r3, [pc, #660]	@ (8009fb4 <HAL_RCC_OscConfig+0x630>)
 8009d20:	681a      	ldr	r2, [r3, #0]
 8009d22:	4ba4      	ldr	r3, [pc, #656]	@ (8009fb4 <HAL_RCC_OscConfig+0x630>)
 8009d24:	2180      	movs	r1, #128	@ 0x80
 8009d26:	0049      	lsls	r1, r1, #1
 8009d28:	430a      	orrs	r2, r1
 8009d2a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8009d2c:	f7fe fc9e 	bl	800866c <HAL_GetTick>
 8009d30:	0003      	movs	r3, r0
 8009d32:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009d34:	e008      	b.n	8009d48 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009d36:	f7fe fc99 	bl	800866c <HAL_GetTick>
 8009d3a:	0002      	movs	r2, r0
 8009d3c:	693b      	ldr	r3, [r7, #16]
 8009d3e:	1ad3      	subs	r3, r2, r3
 8009d40:	2b02      	cmp	r3, #2
 8009d42:	d901      	bls.n	8009d48 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8009d44:	2303      	movs	r3, #3
 8009d46:	e177      	b.n	800a038 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009d48:	4b9a      	ldr	r3, [pc, #616]	@ (8009fb4 <HAL_RCC_OscConfig+0x630>)
 8009d4a:	681a      	ldr	r2, [r3, #0]
 8009d4c:	2380      	movs	r3, #128	@ 0x80
 8009d4e:	005b      	lsls	r3, r3, #1
 8009d50:	4013      	ands	r3, r2
 8009d52:	d0f0      	beq.n	8009d36 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	689b      	ldr	r3, [r3, #8]
 8009d58:	2b01      	cmp	r3, #1
 8009d5a:	d106      	bne.n	8009d6a <HAL_RCC_OscConfig+0x3e6>
 8009d5c:	4b94      	ldr	r3, [pc, #592]	@ (8009fb0 <HAL_RCC_OscConfig+0x62c>)
 8009d5e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009d60:	4b93      	ldr	r3, [pc, #588]	@ (8009fb0 <HAL_RCC_OscConfig+0x62c>)
 8009d62:	2101      	movs	r1, #1
 8009d64:	430a      	orrs	r2, r1
 8009d66:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009d68:	e01c      	b.n	8009da4 <HAL_RCC_OscConfig+0x420>
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	689b      	ldr	r3, [r3, #8]
 8009d6e:	2b05      	cmp	r3, #5
 8009d70:	d10c      	bne.n	8009d8c <HAL_RCC_OscConfig+0x408>
 8009d72:	4b8f      	ldr	r3, [pc, #572]	@ (8009fb0 <HAL_RCC_OscConfig+0x62c>)
 8009d74:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009d76:	4b8e      	ldr	r3, [pc, #568]	@ (8009fb0 <HAL_RCC_OscConfig+0x62c>)
 8009d78:	2104      	movs	r1, #4
 8009d7a:	430a      	orrs	r2, r1
 8009d7c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009d7e:	4b8c      	ldr	r3, [pc, #560]	@ (8009fb0 <HAL_RCC_OscConfig+0x62c>)
 8009d80:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009d82:	4b8b      	ldr	r3, [pc, #556]	@ (8009fb0 <HAL_RCC_OscConfig+0x62c>)
 8009d84:	2101      	movs	r1, #1
 8009d86:	430a      	orrs	r2, r1
 8009d88:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009d8a:	e00b      	b.n	8009da4 <HAL_RCC_OscConfig+0x420>
 8009d8c:	4b88      	ldr	r3, [pc, #544]	@ (8009fb0 <HAL_RCC_OscConfig+0x62c>)
 8009d8e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009d90:	4b87      	ldr	r3, [pc, #540]	@ (8009fb0 <HAL_RCC_OscConfig+0x62c>)
 8009d92:	2101      	movs	r1, #1
 8009d94:	438a      	bics	r2, r1
 8009d96:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009d98:	4b85      	ldr	r3, [pc, #532]	@ (8009fb0 <HAL_RCC_OscConfig+0x62c>)
 8009d9a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009d9c:	4b84      	ldr	r3, [pc, #528]	@ (8009fb0 <HAL_RCC_OscConfig+0x62c>)
 8009d9e:	2104      	movs	r1, #4
 8009da0:	438a      	bics	r2, r1
 8009da2:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	689b      	ldr	r3, [r3, #8]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d014      	beq.n	8009dd6 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009dac:	f7fe fc5e 	bl	800866c <HAL_GetTick>
 8009db0:	0003      	movs	r3, r0
 8009db2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009db4:	e009      	b.n	8009dca <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009db6:	f7fe fc59 	bl	800866c <HAL_GetTick>
 8009dba:	0002      	movs	r2, r0
 8009dbc:	693b      	ldr	r3, [r7, #16]
 8009dbe:	1ad3      	subs	r3, r2, r3
 8009dc0:	4a7d      	ldr	r2, [pc, #500]	@ (8009fb8 <HAL_RCC_OscConfig+0x634>)
 8009dc2:	4293      	cmp	r3, r2
 8009dc4:	d901      	bls.n	8009dca <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8009dc6:	2303      	movs	r3, #3
 8009dc8:	e136      	b.n	800a038 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009dca:	4b79      	ldr	r3, [pc, #484]	@ (8009fb0 <HAL_RCC_OscConfig+0x62c>)
 8009dcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009dce:	2202      	movs	r2, #2
 8009dd0:	4013      	ands	r3, r2
 8009dd2:	d0f0      	beq.n	8009db6 <HAL_RCC_OscConfig+0x432>
 8009dd4:	e013      	b.n	8009dfe <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009dd6:	f7fe fc49 	bl	800866c <HAL_GetTick>
 8009dda:	0003      	movs	r3, r0
 8009ddc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009dde:	e009      	b.n	8009df4 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009de0:	f7fe fc44 	bl	800866c <HAL_GetTick>
 8009de4:	0002      	movs	r2, r0
 8009de6:	693b      	ldr	r3, [r7, #16]
 8009de8:	1ad3      	subs	r3, r2, r3
 8009dea:	4a73      	ldr	r2, [pc, #460]	@ (8009fb8 <HAL_RCC_OscConfig+0x634>)
 8009dec:	4293      	cmp	r3, r2
 8009dee:	d901      	bls.n	8009df4 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8009df0:	2303      	movs	r3, #3
 8009df2:	e121      	b.n	800a038 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009df4:	4b6e      	ldr	r3, [pc, #440]	@ (8009fb0 <HAL_RCC_OscConfig+0x62c>)
 8009df6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009df8:	2202      	movs	r2, #2
 8009dfa:	4013      	ands	r3, r2
 8009dfc:	d1f0      	bne.n	8009de0 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8009dfe:	231f      	movs	r3, #31
 8009e00:	18fb      	adds	r3, r7, r3
 8009e02:	781b      	ldrb	r3, [r3, #0]
 8009e04:	2b01      	cmp	r3, #1
 8009e06:	d105      	bne.n	8009e14 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8009e08:	4b69      	ldr	r3, [pc, #420]	@ (8009fb0 <HAL_RCC_OscConfig+0x62c>)
 8009e0a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009e0c:	4b68      	ldr	r3, [pc, #416]	@ (8009fb0 <HAL_RCC_OscConfig+0x62c>)
 8009e0e:	496b      	ldr	r1, [pc, #428]	@ (8009fbc <HAL_RCC_OscConfig+0x638>)
 8009e10:	400a      	ands	r2, r1
 8009e12:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	2220      	movs	r2, #32
 8009e1a:	4013      	ands	r3, r2
 8009e1c:	d039      	beq.n	8009e92 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	69db      	ldr	r3, [r3, #28]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d01b      	beq.n	8009e5e <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009e26:	4b62      	ldr	r3, [pc, #392]	@ (8009fb0 <HAL_RCC_OscConfig+0x62c>)
 8009e28:	681a      	ldr	r2, [r3, #0]
 8009e2a:	4b61      	ldr	r3, [pc, #388]	@ (8009fb0 <HAL_RCC_OscConfig+0x62c>)
 8009e2c:	2180      	movs	r1, #128	@ 0x80
 8009e2e:	03c9      	lsls	r1, r1, #15
 8009e30:	430a      	orrs	r2, r1
 8009e32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e34:	f7fe fc1a 	bl	800866c <HAL_GetTick>
 8009e38:	0003      	movs	r3, r0
 8009e3a:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8009e3c:	e008      	b.n	8009e50 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009e3e:	f7fe fc15 	bl	800866c <HAL_GetTick>
 8009e42:	0002      	movs	r2, r0
 8009e44:	693b      	ldr	r3, [r7, #16]
 8009e46:	1ad3      	subs	r3, r2, r3
 8009e48:	2b02      	cmp	r3, #2
 8009e4a:	d901      	bls.n	8009e50 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8009e4c:	2303      	movs	r3, #3
 8009e4e:	e0f3      	b.n	800a038 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8009e50:	4b57      	ldr	r3, [pc, #348]	@ (8009fb0 <HAL_RCC_OscConfig+0x62c>)
 8009e52:	681a      	ldr	r2, [r3, #0]
 8009e54:	2380      	movs	r3, #128	@ 0x80
 8009e56:	041b      	lsls	r3, r3, #16
 8009e58:	4013      	ands	r3, r2
 8009e5a:	d0f0      	beq.n	8009e3e <HAL_RCC_OscConfig+0x4ba>
 8009e5c:	e019      	b.n	8009e92 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009e5e:	4b54      	ldr	r3, [pc, #336]	@ (8009fb0 <HAL_RCC_OscConfig+0x62c>)
 8009e60:	681a      	ldr	r2, [r3, #0]
 8009e62:	4b53      	ldr	r3, [pc, #332]	@ (8009fb0 <HAL_RCC_OscConfig+0x62c>)
 8009e64:	4956      	ldr	r1, [pc, #344]	@ (8009fc0 <HAL_RCC_OscConfig+0x63c>)
 8009e66:	400a      	ands	r2, r1
 8009e68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e6a:	f7fe fbff 	bl	800866c <HAL_GetTick>
 8009e6e:	0003      	movs	r3, r0
 8009e70:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8009e72:	e008      	b.n	8009e86 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009e74:	f7fe fbfa 	bl	800866c <HAL_GetTick>
 8009e78:	0002      	movs	r2, r0
 8009e7a:	693b      	ldr	r3, [r7, #16]
 8009e7c:	1ad3      	subs	r3, r2, r3
 8009e7e:	2b02      	cmp	r3, #2
 8009e80:	d901      	bls.n	8009e86 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8009e82:	2303      	movs	r3, #3
 8009e84:	e0d8      	b.n	800a038 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8009e86:	4b4a      	ldr	r3, [pc, #296]	@ (8009fb0 <HAL_RCC_OscConfig+0x62c>)
 8009e88:	681a      	ldr	r2, [r3, #0]
 8009e8a:	2380      	movs	r3, #128	@ 0x80
 8009e8c:	041b      	lsls	r3, r3, #16
 8009e8e:	4013      	ands	r3, r2
 8009e90:	d1f0      	bne.n	8009e74 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	6a1b      	ldr	r3, [r3, #32]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d100      	bne.n	8009e9c <HAL_RCC_OscConfig+0x518>
 8009e9a:	e0cc      	b.n	800a036 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009e9c:	4b44      	ldr	r3, [pc, #272]	@ (8009fb0 <HAL_RCC_OscConfig+0x62c>)
 8009e9e:	689b      	ldr	r3, [r3, #8]
 8009ea0:	2238      	movs	r2, #56	@ 0x38
 8009ea2:	4013      	ands	r3, r2
 8009ea4:	2b10      	cmp	r3, #16
 8009ea6:	d100      	bne.n	8009eaa <HAL_RCC_OscConfig+0x526>
 8009ea8:	e07b      	b.n	8009fa2 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	6a1b      	ldr	r3, [r3, #32]
 8009eae:	2b02      	cmp	r3, #2
 8009eb0:	d156      	bne.n	8009f60 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009eb2:	4b3f      	ldr	r3, [pc, #252]	@ (8009fb0 <HAL_RCC_OscConfig+0x62c>)
 8009eb4:	681a      	ldr	r2, [r3, #0]
 8009eb6:	4b3e      	ldr	r3, [pc, #248]	@ (8009fb0 <HAL_RCC_OscConfig+0x62c>)
 8009eb8:	4942      	ldr	r1, [pc, #264]	@ (8009fc4 <HAL_RCC_OscConfig+0x640>)
 8009eba:	400a      	ands	r2, r1
 8009ebc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ebe:	f7fe fbd5 	bl	800866c <HAL_GetTick>
 8009ec2:	0003      	movs	r3, r0
 8009ec4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009ec6:	e008      	b.n	8009eda <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009ec8:	f7fe fbd0 	bl	800866c <HAL_GetTick>
 8009ecc:	0002      	movs	r2, r0
 8009ece:	693b      	ldr	r3, [r7, #16]
 8009ed0:	1ad3      	subs	r3, r2, r3
 8009ed2:	2b02      	cmp	r3, #2
 8009ed4:	d901      	bls.n	8009eda <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8009ed6:	2303      	movs	r3, #3
 8009ed8:	e0ae      	b.n	800a038 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009eda:	4b35      	ldr	r3, [pc, #212]	@ (8009fb0 <HAL_RCC_OscConfig+0x62c>)
 8009edc:	681a      	ldr	r2, [r3, #0]
 8009ede:	2380      	movs	r3, #128	@ 0x80
 8009ee0:	049b      	lsls	r3, r3, #18
 8009ee2:	4013      	ands	r3, r2
 8009ee4:	d1f0      	bne.n	8009ec8 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009ee6:	4b32      	ldr	r3, [pc, #200]	@ (8009fb0 <HAL_RCC_OscConfig+0x62c>)
 8009ee8:	68db      	ldr	r3, [r3, #12]
 8009eea:	4a37      	ldr	r2, [pc, #220]	@ (8009fc8 <HAL_RCC_OscConfig+0x644>)
 8009eec:	4013      	ands	r3, r2
 8009eee:	0019      	movs	r1, r3
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ef8:	431a      	orrs	r2, r3
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009efe:	021b      	lsls	r3, r3, #8
 8009f00:	431a      	orrs	r2, r3
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f06:	431a      	orrs	r2, r3
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f0c:	431a      	orrs	r2, r3
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f12:	431a      	orrs	r2, r3
 8009f14:	4b26      	ldr	r3, [pc, #152]	@ (8009fb0 <HAL_RCC_OscConfig+0x62c>)
 8009f16:	430a      	orrs	r2, r1
 8009f18:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009f1a:	4b25      	ldr	r3, [pc, #148]	@ (8009fb0 <HAL_RCC_OscConfig+0x62c>)
 8009f1c:	681a      	ldr	r2, [r3, #0]
 8009f1e:	4b24      	ldr	r3, [pc, #144]	@ (8009fb0 <HAL_RCC_OscConfig+0x62c>)
 8009f20:	2180      	movs	r1, #128	@ 0x80
 8009f22:	0449      	lsls	r1, r1, #17
 8009f24:	430a      	orrs	r2, r1
 8009f26:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8009f28:	4b21      	ldr	r3, [pc, #132]	@ (8009fb0 <HAL_RCC_OscConfig+0x62c>)
 8009f2a:	68da      	ldr	r2, [r3, #12]
 8009f2c:	4b20      	ldr	r3, [pc, #128]	@ (8009fb0 <HAL_RCC_OscConfig+0x62c>)
 8009f2e:	2180      	movs	r1, #128	@ 0x80
 8009f30:	0549      	lsls	r1, r1, #21
 8009f32:	430a      	orrs	r2, r1
 8009f34:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f36:	f7fe fb99 	bl	800866c <HAL_GetTick>
 8009f3a:	0003      	movs	r3, r0
 8009f3c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009f3e:	e008      	b.n	8009f52 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009f40:	f7fe fb94 	bl	800866c <HAL_GetTick>
 8009f44:	0002      	movs	r2, r0
 8009f46:	693b      	ldr	r3, [r7, #16]
 8009f48:	1ad3      	subs	r3, r2, r3
 8009f4a:	2b02      	cmp	r3, #2
 8009f4c:	d901      	bls.n	8009f52 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8009f4e:	2303      	movs	r3, #3
 8009f50:	e072      	b.n	800a038 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009f52:	4b17      	ldr	r3, [pc, #92]	@ (8009fb0 <HAL_RCC_OscConfig+0x62c>)
 8009f54:	681a      	ldr	r2, [r3, #0]
 8009f56:	2380      	movs	r3, #128	@ 0x80
 8009f58:	049b      	lsls	r3, r3, #18
 8009f5a:	4013      	ands	r3, r2
 8009f5c:	d0f0      	beq.n	8009f40 <HAL_RCC_OscConfig+0x5bc>
 8009f5e:	e06a      	b.n	800a036 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009f60:	4b13      	ldr	r3, [pc, #76]	@ (8009fb0 <HAL_RCC_OscConfig+0x62c>)
 8009f62:	681a      	ldr	r2, [r3, #0]
 8009f64:	4b12      	ldr	r3, [pc, #72]	@ (8009fb0 <HAL_RCC_OscConfig+0x62c>)
 8009f66:	4917      	ldr	r1, [pc, #92]	@ (8009fc4 <HAL_RCC_OscConfig+0x640>)
 8009f68:	400a      	ands	r2, r1
 8009f6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f6c:	f7fe fb7e 	bl	800866c <HAL_GetTick>
 8009f70:	0003      	movs	r3, r0
 8009f72:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009f74:	e008      	b.n	8009f88 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009f76:	f7fe fb79 	bl	800866c <HAL_GetTick>
 8009f7a:	0002      	movs	r2, r0
 8009f7c:	693b      	ldr	r3, [r7, #16]
 8009f7e:	1ad3      	subs	r3, r2, r3
 8009f80:	2b02      	cmp	r3, #2
 8009f82:	d901      	bls.n	8009f88 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8009f84:	2303      	movs	r3, #3
 8009f86:	e057      	b.n	800a038 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009f88:	4b09      	ldr	r3, [pc, #36]	@ (8009fb0 <HAL_RCC_OscConfig+0x62c>)
 8009f8a:	681a      	ldr	r2, [r3, #0]
 8009f8c:	2380      	movs	r3, #128	@ 0x80
 8009f8e:	049b      	lsls	r3, r3, #18
 8009f90:	4013      	ands	r3, r2
 8009f92:	d1f0      	bne.n	8009f76 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8009f94:	4b06      	ldr	r3, [pc, #24]	@ (8009fb0 <HAL_RCC_OscConfig+0x62c>)
 8009f96:	68da      	ldr	r2, [r3, #12]
 8009f98:	4b05      	ldr	r3, [pc, #20]	@ (8009fb0 <HAL_RCC_OscConfig+0x62c>)
 8009f9a:	490c      	ldr	r1, [pc, #48]	@ (8009fcc <HAL_RCC_OscConfig+0x648>)
 8009f9c:	400a      	ands	r2, r1
 8009f9e:	60da      	str	r2, [r3, #12]
 8009fa0:	e049      	b.n	800a036 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6a1b      	ldr	r3, [r3, #32]
 8009fa6:	2b01      	cmp	r3, #1
 8009fa8:	d112      	bne.n	8009fd0 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8009faa:	2301      	movs	r3, #1
 8009fac:	e044      	b.n	800a038 <HAL_RCC_OscConfig+0x6b4>
 8009fae:	46c0      	nop			@ (mov r8, r8)
 8009fb0:	40021000 	.word	0x40021000
 8009fb4:	40007000 	.word	0x40007000
 8009fb8:	00001388 	.word	0x00001388
 8009fbc:	efffffff 	.word	0xefffffff
 8009fc0:	ffbfffff 	.word	0xffbfffff
 8009fc4:	feffffff 	.word	0xfeffffff
 8009fc8:	11c1808c 	.word	0x11c1808c
 8009fcc:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8009fd0:	4b1b      	ldr	r3, [pc, #108]	@ (800a040 <HAL_RCC_OscConfig+0x6bc>)
 8009fd2:	68db      	ldr	r3, [r3, #12]
 8009fd4:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009fd6:	697b      	ldr	r3, [r7, #20]
 8009fd8:	2203      	movs	r2, #3
 8009fda:	401a      	ands	r2, r3
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fe0:	429a      	cmp	r2, r3
 8009fe2:	d126      	bne.n	800a032 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009fe4:	697b      	ldr	r3, [r7, #20]
 8009fe6:	2270      	movs	r2, #112	@ 0x70
 8009fe8:	401a      	ands	r2, r3
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009fee:	429a      	cmp	r2, r3
 8009ff0:	d11f      	bne.n	800a032 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009ff2:	697a      	ldr	r2, [r7, #20]
 8009ff4:	23fe      	movs	r3, #254	@ 0xfe
 8009ff6:	01db      	lsls	r3, r3, #7
 8009ff8:	401a      	ands	r2, r3
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ffe:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a000:	429a      	cmp	r2, r3
 800a002:	d116      	bne.n	800a032 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800a004:	697a      	ldr	r2, [r7, #20]
 800a006:	23f8      	movs	r3, #248	@ 0xf8
 800a008:	039b      	lsls	r3, r3, #14
 800a00a:	401a      	ands	r2, r3
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a010:	429a      	cmp	r2, r3
 800a012:	d10e      	bne.n	800a032 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800a014:	697a      	ldr	r2, [r7, #20]
 800a016:	23e0      	movs	r3, #224	@ 0xe0
 800a018:	051b      	lsls	r3, r3, #20
 800a01a:	401a      	ands	r2, r3
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800a020:	429a      	cmp	r2, r3
 800a022:	d106      	bne.n	800a032 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800a024:	697b      	ldr	r3, [r7, #20]
 800a026:	0f5b      	lsrs	r3, r3, #29
 800a028:	075a      	lsls	r2, r3, #29
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800a02e:	429a      	cmp	r2, r3
 800a030:	d001      	beq.n	800a036 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 800a032:	2301      	movs	r3, #1
 800a034:	e000      	b.n	800a038 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 800a036:	2300      	movs	r3, #0
}
 800a038:	0018      	movs	r0, r3
 800a03a:	46bd      	mov	sp, r7
 800a03c:	b008      	add	sp, #32
 800a03e:	bd80      	pop	{r7, pc}
 800a040:	40021000 	.word	0x40021000

0800a044 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b084      	sub	sp, #16
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
 800a04c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d101      	bne.n	800a058 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a054:	2301      	movs	r3, #1
 800a056:	e0e9      	b.n	800a22c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a058:	4b76      	ldr	r3, [pc, #472]	@ (800a234 <HAL_RCC_ClockConfig+0x1f0>)
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	2207      	movs	r2, #7
 800a05e:	4013      	ands	r3, r2
 800a060:	683a      	ldr	r2, [r7, #0]
 800a062:	429a      	cmp	r2, r3
 800a064:	d91e      	bls.n	800a0a4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a066:	4b73      	ldr	r3, [pc, #460]	@ (800a234 <HAL_RCC_ClockConfig+0x1f0>)
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	2207      	movs	r2, #7
 800a06c:	4393      	bics	r3, r2
 800a06e:	0019      	movs	r1, r3
 800a070:	4b70      	ldr	r3, [pc, #448]	@ (800a234 <HAL_RCC_ClockConfig+0x1f0>)
 800a072:	683a      	ldr	r2, [r7, #0]
 800a074:	430a      	orrs	r2, r1
 800a076:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800a078:	f7fe faf8 	bl	800866c <HAL_GetTick>
 800a07c:	0003      	movs	r3, r0
 800a07e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800a080:	e009      	b.n	800a096 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a082:	f7fe faf3 	bl	800866c <HAL_GetTick>
 800a086:	0002      	movs	r2, r0
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	1ad3      	subs	r3, r2, r3
 800a08c:	4a6a      	ldr	r2, [pc, #424]	@ (800a238 <HAL_RCC_ClockConfig+0x1f4>)
 800a08e:	4293      	cmp	r3, r2
 800a090:	d901      	bls.n	800a096 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800a092:	2303      	movs	r3, #3
 800a094:	e0ca      	b.n	800a22c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800a096:	4b67      	ldr	r3, [pc, #412]	@ (800a234 <HAL_RCC_ClockConfig+0x1f0>)
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	2207      	movs	r2, #7
 800a09c:	4013      	ands	r3, r2
 800a09e:	683a      	ldr	r2, [r7, #0]
 800a0a0:	429a      	cmp	r2, r3
 800a0a2:	d1ee      	bne.n	800a082 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	2202      	movs	r2, #2
 800a0aa:	4013      	ands	r3, r2
 800a0ac:	d015      	beq.n	800a0da <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	2204      	movs	r2, #4
 800a0b4:	4013      	ands	r3, r2
 800a0b6:	d006      	beq.n	800a0c6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800a0b8:	4b60      	ldr	r3, [pc, #384]	@ (800a23c <HAL_RCC_ClockConfig+0x1f8>)
 800a0ba:	689a      	ldr	r2, [r3, #8]
 800a0bc:	4b5f      	ldr	r3, [pc, #380]	@ (800a23c <HAL_RCC_ClockConfig+0x1f8>)
 800a0be:	21e0      	movs	r1, #224	@ 0xe0
 800a0c0:	01c9      	lsls	r1, r1, #7
 800a0c2:	430a      	orrs	r2, r1
 800a0c4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a0c6:	4b5d      	ldr	r3, [pc, #372]	@ (800a23c <HAL_RCC_ClockConfig+0x1f8>)
 800a0c8:	689b      	ldr	r3, [r3, #8]
 800a0ca:	4a5d      	ldr	r2, [pc, #372]	@ (800a240 <HAL_RCC_ClockConfig+0x1fc>)
 800a0cc:	4013      	ands	r3, r2
 800a0ce:	0019      	movs	r1, r3
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	689a      	ldr	r2, [r3, #8]
 800a0d4:	4b59      	ldr	r3, [pc, #356]	@ (800a23c <HAL_RCC_ClockConfig+0x1f8>)
 800a0d6:	430a      	orrs	r2, r1
 800a0d8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	2201      	movs	r2, #1
 800a0e0:	4013      	ands	r3, r2
 800a0e2:	d057      	beq.n	800a194 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	685b      	ldr	r3, [r3, #4]
 800a0e8:	2b01      	cmp	r3, #1
 800a0ea:	d107      	bne.n	800a0fc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a0ec:	4b53      	ldr	r3, [pc, #332]	@ (800a23c <HAL_RCC_ClockConfig+0x1f8>)
 800a0ee:	681a      	ldr	r2, [r3, #0]
 800a0f0:	2380      	movs	r3, #128	@ 0x80
 800a0f2:	029b      	lsls	r3, r3, #10
 800a0f4:	4013      	ands	r3, r2
 800a0f6:	d12b      	bne.n	800a150 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	e097      	b.n	800a22c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	685b      	ldr	r3, [r3, #4]
 800a100:	2b02      	cmp	r3, #2
 800a102:	d107      	bne.n	800a114 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a104:	4b4d      	ldr	r3, [pc, #308]	@ (800a23c <HAL_RCC_ClockConfig+0x1f8>)
 800a106:	681a      	ldr	r2, [r3, #0]
 800a108:	2380      	movs	r3, #128	@ 0x80
 800a10a:	049b      	lsls	r3, r3, #18
 800a10c:	4013      	ands	r3, r2
 800a10e:	d11f      	bne.n	800a150 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800a110:	2301      	movs	r3, #1
 800a112:	e08b      	b.n	800a22c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	685b      	ldr	r3, [r3, #4]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d107      	bne.n	800a12c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a11c:	4b47      	ldr	r3, [pc, #284]	@ (800a23c <HAL_RCC_ClockConfig+0x1f8>)
 800a11e:	681a      	ldr	r2, [r3, #0]
 800a120:	2380      	movs	r3, #128	@ 0x80
 800a122:	00db      	lsls	r3, r3, #3
 800a124:	4013      	ands	r3, r2
 800a126:	d113      	bne.n	800a150 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800a128:	2301      	movs	r3, #1
 800a12a:	e07f      	b.n	800a22c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	685b      	ldr	r3, [r3, #4]
 800a130:	2b03      	cmp	r3, #3
 800a132:	d106      	bne.n	800a142 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a134:	4b41      	ldr	r3, [pc, #260]	@ (800a23c <HAL_RCC_ClockConfig+0x1f8>)
 800a136:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a138:	2202      	movs	r2, #2
 800a13a:	4013      	ands	r3, r2
 800a13c:	d108      	bne.n	800a150 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800a13e:	2301      	movs	r3, #1
 800a140:	e074      	b.n	800a22c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a142:	4b3e      	ldr	r3, [pc, #248]	@ (800a23c <HAL_RCC_ClockConfig+0x1f8>)
 800a144:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a146:	2202      	movs	r2, #2
 800a148:	4013      	ands	r3, r2
 800a14a:	d101      	bne.n	800a150 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800a14c:	2301      	movs	r3, #1
 800a14e:	e06d      	b.n	800a22c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a150:	4b3a      	ldr	r3, [pc, #232]	@ (800a23c <HAL_RCC_ClockConfig+0x1f8>)
 800a152:	689b      	ldr	r3, [r3, #8]
 800a154:	2207      	movs	r2, #7
 800a156:	4393      	bics	r3, r2
 800a158:	0019      	movs	r1, r3
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	685a      	ldr	r2, [r3, #4]
 800a15e:	4b37      	ldr	r3, [pc, #220]	@ (800a23c <HAL_RCC_ClockConfig+0x1f8>)
 800a160:	430a      	orrs	r2, r1
 800a162:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a164:	f7fe fa82 	bl	800866c <HAL_GetTick>
 800a168:	0003      	movs	r3, r0
 800a16a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a16c:	e009      	b.n	800a182 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a16e:	f7fe fa7d 	bl	800866c <HAL_GetTick>
 800a172:	0002      	movs	r2, r0
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	1ad3      	subs	r3, r2, r3
 800a178:	4a2f      	ldr	r2, [pc, #188]	@ (800a238 <HAL_RCC_ClockConfig+0x1f4>)
 800a17a:	4293      	cmp	r3, r2
 800a17c:	d901      	bls.n	800a182 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800a17e:	2303      	movs	r3, #3
 800a180:	e054      	b.n	800a22c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a182:	4b2e      	ldr	r3, [pc, #184]	@ (800a23c <HAL_RCC_ClockConfig+0x1f8>)
 800a184:	689b      	ldr	r3, [r3, #8]
 800a186:	2238      	movs	r2, #56	@ 0x38
 800a188:	401a      	ands	r2, r3
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	685b      	ldr	r3, [r3, #4]
 800a18e:	00db      	lsls	r3, r3, #3
 800a190:	429a      	cmp	r2, r3
 800a192:	d1ec      	bne.n	800a16e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a194:	4b27      	ldr	r3, [pc, #156]	@ (800a234 <HAL_RCC_ClockConfig+0x1f0>)
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	2207      	movs	r2, #7
 800a19a:	4013      	ands	r3, r2
 800a19c:	683a      	ldr	r2, [r7, #0]
 800a19e:	429a      	cmp	r2, r3
 800a1a0:	d21e      	bcs.n	800a1e0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a1a2:	4b24      	ldr	r3, [pc, #144]	@ (800a234 <HAL_RCC_ClockConfig+0x1f0>)
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	2207      	movs	r2, #7
 800a1a8:	4393      	bics	r3, r2
 800a1aa:	0019      	movs	r1, r3
 800a1ac:	4b21      	ldr	r3, [pc, #132]	@ (800a234 <HAL_RCC_ClockConfig+0x1f0>)
 800a1ae:	683a      	ldr	r2, [r7, #0]
 800a1b0:	430a      	orrs	r2, r1
 800a1b2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800a1b4:	f7fe fa5a 	bl	800866c <HAL_GetTick>
 800a1b8:	0003      	movs	r3, r0
 800a1ba:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800a1bc:	e009      	b.n	800a1d2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a1be:	f7fe fa55 	bl	800866c <HAL_GetTick>
 800a1c2:	0002      	movs	r2, r0
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	1ad3      	subs	r3, r2, r3
 800a1c8:	4a1b      	ldr	r2, [pc, #108]	@ (800a238 <HAL_RCC_ClockConfig+0x1f4>)
 800a1ca:	4293      	cmp	r3, r2
 800a1cc:	d901      	bls.n	800a1d2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800a1ce:	2303      	movs	r3, #3
 800a1d0:	e02c      	b.n	800a22c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800a1d2:	4b18      	ldr	r3, [pc, #96]	@ (800a234 <HAL_RCC_ClockConfig+0x1f0>)
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	2207      	movs	r2, #7
 800a1d8:	4013      	ands	r3, r2
 800a1da:	683a      	ldr	r2, [r7, #0]
 800a1dc:	429a      	cmp	r2, r3
 800a1de:	d1ee      	bne.n	800a1be <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	2204      	movs	r2, #4
 800a1e6:	4013      	ands	r3, r2
 800a1e8:	d009      	beq.n	800a1fe <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800a1ea:	4b14      	ldr	r3, [pc, #80]	@ (800a23c <HAL_RCC_ClockConfig+0x1f8>)
 800a1ec:	689b      	ldr	r3, [r3, #8]
 800a1ee:	4a15      	ldr	r2, [pc, #84]	@ (800a244 <HAL_RCC_ClockConfig+0x200>)
 800a1f0:	4013      	ands	r3, r2
 800a1f2:	0019      	movs	r1, r3
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	68da      	ldr	r2, [r3, #12]
 800a1f8:	4b10      	ldr	r3, [pc, #64]	@ (800a23c <HAL_RCC_ClockConfig+0x1f8>)
 800a1fa:	430a      	orrs	r2, r1
 800a1fc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800a1fe:	f000 f829 	bl	800a254 <HAL_RCC_GetSysClockFreq>
 800a202:	0001      	movs	r1, r0
 800a204:	4b0d      	ldr	r3, [pc, #52]	@ (800a23c <HAL_RCC_ClockConfig+0x1f8>)
 800a206:	689b      	ldr	r3, [r3, #8]
 800a208:	0a1b      	lsrs	r3, r3, #8
 800a20a:	220f      	movs	r2, #15
 800a20c:	401a      	ands	r2, r3
 800a20e:	4b0e      	ldr	r3, [pc, #56]	@ (800a248 <HAL_RCC_ClockConfig+0x204>)
 800a210:	0092      	lsls	r2, r2, #2
 800a212:	58d3      	ldr	r3, [r2, r3]
 800a214:	221f      	movs	r2, #31
 800a216:	4013      	ands	r3, r2
 800a218:	000a      	movs	r2, r1
 800a21a:	40da      	lsrs	r2, r3
 800a21c:	4b0b      	ldr	r3, [pc, #44]	@ (800a24c <HAL_RCC_ClockConfig+0x208>)
 800a21e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800a220:	4b0b      	ldr	r3, [pc, #44]	@ (800a250 <HAL_RCC_ClockConfig+0x20c>)
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	0018      	movs	r0, r3
 800a226:	f7fe f9c5 	bl	80085b4 <HAL_InitTick>
 800a22a:	0003      	movs	r3, r0
}
 800a22c:	0018      	movs	r0, r3
 800a22e:	46bd      	mov	sp, r7
 800a230:	b004      	add	sp, #16
 800a232:	bd80      	pop	{r7, pc}
 800a234:	40022000 	.word	0x40022000
 800a238:	00001388 	.word	0x00001388
 800a23c:	40021000 	.word	0x40021000
 800a240:	fffff0ff 	.word	0xfffff0ff
 800a244:	ffff8fff 	.word	0xffff8fff
 800a248:	08011c2c 	.word	0x08011c2c
 800a24c:	20000d38 	.word	0x20000d38
 800a250:	20000d3c 	.word	0x20000d3c

0800a254 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b086      	sub	sp, #24
 800a258:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a25a:	4b3c      	ldr	r3, [pc, #240]	@ (800a34c <HAL_RCC_GetSysClockFreq+0xf8>)
 800a25c:	689b      	ldr	r3, [r3, #8]
 800a25e:	2238      	movs	r2, #56	@ 0x38
 800a260:	4013      	ands	r3, r2
 800a262:	d10f      	bne.n	800a284 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800a264:	4b39      	ldr	r3, [pc, #228]	@ (800a34c <HAL_RCC_GetSysClockFreq+0xf8>)
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	0adb      	lsrs	r3, r3, #11
 800a26a:	2207      	movs	r2, #7
 800a26c:	4013      	ands	r3, r2
 800a26e:	2201      	movs	r2, #1
 800a270:	409a      	lsls	r2, r3
 800a272:	0013      	movs	r3, r2
 800a274:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800a276:	6839      	ldr	r1, [r7, #0]
 800a278:	4835      	ldr	r0, [pc, #212]	@ (800a350 <HAL_RCC_GetSysClockFreq+0xfc>)
 800a27a:	f7f5 ff69 	bl	8000150 <__udivsi3>
 800a27e:	0003      	movs	r3, r0
 800a280:	613b      	str	r3, [r7, #16]
 800a282:	e05d      	b.n	800a340 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a284:	4b31      	ldr	r3, [pc, #196]	@ (800a34c <HAL_RCC_GetSysClockFreq+0xf8>)
 800a286:	689b      	ldr	r3, [r3, #8]
 800a288:	2238      	movs	r2, #56	@ 0x38
 800a28a:	4013      	ands	r3, r2
 800a28c:	2b08      	cmp	r3, #8
 800a28e:	d102      	bne.n	800a296 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800a290:	4b30      	ldr	r3, [pc, #192]	@ (800a354 <HAL_RCC_GetSysClockFreq+0x100>)
 800a292:	613b      	str	r3, [r7, #16]
 800a294:	e054      	b.n	800a340 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a296:	4b2d      	ldr	r3, [pc, #180]	@ (800a34c <HAL_RCC_GetSysClockFreq+0xf8>)
 800a298:	689b      	ldr	r3, [r3, #8]
 800a29a:	2238      	movs	r2, #56	@ 0x38
 800a29c:	4013      	ands	r3, r2
 800a29e:	2b10      	cmp	r3, #16
 800a2a0:	d138      	bne.n	800a314 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800a2a2:	4b2a      	ldr	r3, [pc, #168]	@ (800a34c <HAL_RCC_GetSysClockFreq+0xf8>)
 800a2a4:	68db      	ldr	r3, [r3, #12]
 800a2a6:	2203      	movs	r2, #3
 800a2a8:	4013      	ands	r3, r2
 800a2aa:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a2ac:	4b27      	ldr	r3, [pc, #156]	@ (800a34c <HAL_RCC_GetSysClockFreq+0xf8>)
 800a2ae:	68db      	ldr	r3, [r3, #12]
 800a2b0:	091b      	lsrs	r3, r3, #4
 800a2b2:	2207      	movs	r2, #7
 800a2b4:	4013      	ands	r3, r2
 800a2b6:	3301      	adds	r3, #1
 800a2b8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	2b03      	cmp	r3, #3
 800a2be:	d10d      	bne.n	800a2dc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a2c0:	68b9      	ldr	r1, [r7, #8]
 800a2c2:	4824      	ldr	r0, [pc, #144]	@ (800a354 <HAL_RCC_GetSysClockFreq+0x100>)
 800a2c4:	f7f5 ff44 	bl	8000150 <__udivsi3>
 800a2c8:	0003      	movs	r3, r0
 800a2ca:	0019      	movs	r1, r3
 800a2cc:	4b1f      	ldr	r3, [pc, #124]	@ (800a34c <HAL_RCC_GetSysClockFreq+0xf8>)
 800a2ce:	68db      	ldr	r3, [r3, #12]
 800a2d0:	0a1b      	lsrs	r3, r3, #8
 800a2d2:	227f      	movs	r2, #127	@ 0x7f
 800a2d4:	4013      	ands	r3, r2
 800a2d6:	434b      	muls	r3, r1
 800a2d8:	617b      	str	r3, [r7, #20]
        break;
 800a2da:	e00d      	b.n	800a2f8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800a2dc:	68b9      	ldr	r1, [r7, #8]
 800a2de:	481c      	ldr	r0, [pc, #112]	@ (800a350 <HAL_RCC_GetSysClockFreq+0xfc>)
 800a2e0:	f7f5 ff36 	bl	8000150 <__udivsi3>
 800a2e4:	0003      	movs	r3, r0
 800a2e6:	0019      	movs	r1, r3
 800a2e8:	4b18      	ldr	r3, [pc, #96]	@ (800a34c <HAL_RCC_GetSysClockFreq+0xf8>)
 800a2ea:	68db      	ldr	r3, [r3, #12]
 800a2ec:	0a1b      	lsrs	r3, r3, #8
 800a2ee:	227f      	movs	r2, #127	@ 0x7f
 800a2f0:	4013      	ands	r3, r2
 800a2f2:	434b      	muls	r3, r1
 800a2f4:	617b      	str	r3, [r7, #20]
        break;
 800a2f6:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800a2f8:	4b14      	ldr	r3, [pc, #80]	@ (800a34c <HAL_RCC_GetSysClockFreq+0xf8>)
 800a2fa:	68db      	ldr	r3, [r3, #12]
 800a2fc:	0f5b      	lsrs	r3, r3, #29
 800a2fe:	2207      	movs	r2, #7
 800a300:	4013      	ands	r3, r2
 800a302:	3301      	adds	r3, #1
 800a304:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800a306:	6879      	ldr	r1, [r7, #4]
 800a308:	6978      	ldr	r0, [r7, #20]
 800a30a:	f7f5 ff21 	bl	8000150 <__udivsi3>
 800a30e:	0003      	movs	r3, r0
 800a310:	613b      	str	r3, [r7, #16]
 800a312:	e015      	b.n	800a340 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800a314:	4b0d      	ldr	r3, [pc, #52]	@ (800a34c <HAL_RCC_GetSysClockFreq+0xf8>)
 800a316:	689b      	ldr	r3, [r3, #8]
 800a318:	2238      	movs	r2, #56	@ 0x38
 800a31a:	4013      	ands	r3, r2
 800a31c:	2b20      	cmp	r3, #32
 800a31e:	d103      	bne.n	800a328 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800a320:	2380      	movs	r3, #128	@ 0x80
 800a322:	021b      	lsls	r3, r3, #8
 800a324:	613b      	str	r3, [r7, #16]
 800a326:	e00b      	b.n	800a340 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800a328:	4b08      	ldr	r3, [pc, #32]	@ (800a34c <HAL_RCC_GetSysClockFreq+0xf8>)
 800a32a:	689b      	ldr	r3, [r3, #8]
 800a32c:	2238      	movs	r2, #56	@ 0x38
 800a32e:	4013      	ands	r3, r2
 800a330:	2b18      	cmp	r3, #24
 800a332:	d103      	bne.n	800a33c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800a334:	23fa      	movs	r3, #250	@ 0xfa
 800a336:	01db      	lsls	r3, r3, #7
 800a338:	613b      	str	r3, [r7, #16]
 800a33a:	e001      	b.n	800a340 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800a33c:	2300      	movs	r3, #0
 800a33e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800a340:	693b      	ldr	r3, [r7, #16]
}
 800a342:	0018      	movs	r0, r3
 800a344:	46bd      	mov	sp, r7
 800a346:	b006      	add	sp, #24
 800a348:	bd80      	pop	{r7, pc}
 800a34a:	46c0      	nop			@ (mov r8, r8)
 800a34c:	40021000 	.word	0x40021000
 800a350:	00f42400 	.word	0x00f42400
 800a354:	007a1200 	.word	0x007a1200

0800a358 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a35c:	4b02      	ldr	r3, [pc, #8]	@ (800a368 <HAL_RCC_GetHCLKFreq+0x10>)
 800a35e:	681b      	ldr	r3, [r3, #0]
}
 800a360:	0018      	movs	r0, r3
 800a362:	46bd      	mov	sp, r7
 800a364:	bd80      	pop	{r7, pc}
 800a366:	46c0      	nop			@ (mov r8, r8)
 800a368:	20000d38 	.word	0x20000d38

0800a36c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a36c:	b5b0      	push	{r4, r5, r7, lr}
 800a36e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800a370:	f7ff fff2 	bl	800a358 <HAL_RCC_GetHCLKFreq>
 800a374:	0004      	movs	r4, r0
 800a376:	f7ff faf9 	bl	800996c <LL_RCC_GetAPB1Prescaler>
 800a37a:	0003      	movs	r3, r0
 800a37c:	0b1a      	lsrs	r2, r3, #12
 800a37e:	4b05      	ldr	r3, [pc, #20]	@ (800a394 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a380:	0092      	lsls	r2, r2, #2
 800a382:	58d3      	ldr	r3, [r2, r3]
 800a384:	221f      	movs	r2, #31
 800a386:	4013      	ands	r3, r2
 800a388:	40dc      	lsrs	r4, r3
 800a38a:	0023      	movs	r3, r4
}
 800a38c:	0018      	movs	r0, r3
 800a38e:	46bd      	mov	sp, r7
 800a390:	bdb0      	pop	{r4, r5, r7, pc}
 800a392:	46c0      	nop			@ (mov r8, r8)
 800a394:	08011c6c 	.word	0x08011c6c

0800a398 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b086      	sub	sp, #24
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800a3a0:	2313      	movs	r3, #19
 800a3a2:	18fb      	adds	r3, r7, r3
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a3a8:	2312      	movs	r3, #18
 800a3aa:	18fb      	adds	r3, r7, r3
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681a      	ldr	r2, [r3, #0]
 800a3b4:	2380      	movs	r3, #128	@ 0x80
 800a3b6:	029b      	lsls	r3, r3, #10
 800a3b8:	4013      	ands	r3, r2
 800a3ba:	d100      	bne.n	800a3be <HAL_RCCEx_PeriphCLKConfig+0x26>
 800a3bc:	e0ad      	b.n	800a51a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a3be:	2011      	movs	r0, #17
 800a3c0:	183b      	adds	r3, r7, r0
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a3c6:	4b47      	ldr	r3, [pc, #284]	@ (800a4e4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800a3c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a3ca:	2380      	movs	r3, #128	@ 0x80
 800a3cc:	055b      	lsls	r3, r3, #21
 800a3ce:	4013      	ands	r3, r2
 800a3d0:	d110      	bne.n	800a3f4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a3d2:	4b44      	ldr	r3, [pc, #272]	@ (800a4e4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800a3d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a3d6:	4b43      	ldr	r3, [pc, #268]	@ (800a4e4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800a3d8:	2180      	movs	r1, #128	@ 0x80
 800a3da:	0549      	lsls	r1, r1, #21
 800a3dc:	430a      	orrs	r2, r1
 800a3de:	63da      	str	r2, [r3, #60]	@ 0x3c
 800a3e0:	4b40      	ldr	r3, [pc, #256]	@ (800a4e4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800a3e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a3e4:	2380      	movs	r3, #128	@ 0x80
 800a3e6:	055b      	lsls	r3, r3, #21
 800a3e8:	4013      	ands	r3, r2
 800a3ea:	60bb      	str	r3, [r7, #8]
 800a3ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a3ee:	183b      	adds	r3, r7, r0
 800a3f0:	2201      	movs	r2, #1
 800a3f2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a3f4:	4b3c      	ldr	r3, [pc, #240]	@ (800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800a3f6:	681a      	ldr	r2, [r3, #0]
 800a3f8:	4b3b      	ldr	r3, [pc, #236]	@ (800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800a3fa:	2180      	movs	r1, #128	@ 0x80
 800a3fc:	0049      	lsls	r1, r1, #1
 800a3fe:	430a      	orrs	r2, r1
 800a400:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a402:	f7fe f933 	bl	800866c <HAL_GetTick>
 800a406:	0003      	movs	r3, r0
 800a408:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a40a:	e00b      	b.n	800a424 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a40c:	f7fe f92e 	bl	800866c <HAL_GetTick>
 800a410:	0002      	movs	r2, r0
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	1ad3      	subs	r3, r2, r3
 800a416:	2b02      	cmp	r3, #2
 800a418:	d904      	bls.n	800a424 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800a41a:	2313      	movs	r3, #19
 800a41c:	18fb      	adds	r3, r7, r3
 800a41e:	2203      	movs	r2, #3
 800a420:	701a      	strb	r2, [r3, #0]
        break;
 800a422:	e005      	b.n	800a430 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a424:	4b30      	ldr	r3, [pc, #192]	@ (800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800a426:	681a      	ldr	r2, [r3, #0]
 800a428:	2380      	movs	r3, #128	@ 0x80
 800a42a:	005b      	lsls	r3, r3, #1
 800a42c:	4013      	ands	r3, r2
 800a42e:	d0ed      	beq.n	800a40c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800a430:	2313      	movs	r3, #19
 800a432:	18fb      	adds	r3, r7, r3
 800a434:	781b      	ldrb	r3, [r3, #0]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d15e      	bne.n	800a4f8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a43a:	4b2a      	ldr	r3, [pc, #168]	@ (800a4e4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800a43c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a43e:	23c0      	movs	r3, #192	@ 0xc0
 800a440:	009b      	lsls	r3, r3, #2
 800a442:	4013      	ands	r3, r2
 800a444:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a446:	697b      	ldr	r3, [r7, #20]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d019      	beq.n	800a480 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a450:	697a      	ldr	r2, [r7, #20]
 800a452:	429a      	cmp	r2, r3
 800a454:	d014      	beq.n	800a480 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a456:	4b23      	ldr	r3, [pc, #140]	@ (800a4e4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800a458:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a45a:	4a24      	ldr	r2, [pc, #144]	@ (800a4ec <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800a45c:	4013      	ands	r3, r2
 800a45e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a460:	4b20      	ldr	r3, [pc, #128]	@ (800a4e4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800a462:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a464:	4b1f      	ldr	r3, [pc, #124]	@ (800a4e4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800a466:	2180      	movs	r1, #128	@ 0x80
 800a468:	0249      	lsls	r1, r1, #9
 800a46a:	430a      	orrs	r2, r1
 800a46c:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a46e:	4b1d      	ldr	r3, [pc, #116]	@ (800a4e4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800a470:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a472:	4b1c      	ldr	r3, [pc, #112]	@ (800a4e4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800a474:	491e      	ldr	r1, [pc, #120]	@ (800a4f0 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 800a476:	400a      	ands	r2, r1
 800a478:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a47a:	4b1a      	ldr	r3, [pc, #104]	@ (800a4e4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800a47c:	697a      	ldr	r2, [r7, #20]
 800a47e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a480:	697b      	ldr	r3, [r7, #20]
 800a482:	2201      	movs	r2, #1
 800a484:	4013      	ands	r3, r2
 800a486:	d016      	beq.n	800a4b6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a488:	f7fe f8f0 	bl	800866c <HAL_GetTick>
 800a48c:	0003      	movs	r3, r0
 800a48e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a490:	e00c      	b.n	800a4ac <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a492:	f7fe f8eb 	bl	800866c <HAL_GetTick>
 800a496:	0002      	movs	r2, r0
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	1ad3      	subs	r3, r2, r3
 800a49c:	4a15      	ldr	r2, [pc, #84]	@ (800a4f4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800a49e:	4293      	cmp	r3, r2
 800a4a0:	d904      	bls.n	800a4ac <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800a4a2:	2313      	movs	r3, #19
 800a4a4:	18fb      	adds	r3, r7, r3
 800a4a6:	2203      	movs	r2, #3
 800a4a8:	701a      	strb	r2, [r3, #0]
            break;
 800a4aa:	e004      	b.n	800a4b6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a4ac:	4b0d      	ldr	r3, [pc, #52]	@ (800a4e4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800a4ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a4b0:	2202      	movs	r2, #2
 800a4b2:	4013      	ands	r3, r2
 800a4b4:	d0ed      	beq.n	800a492 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800a4b6:	2313      	movs	r3, #19
 800a4b8:	18fb      	adds	r3, r7, r3
 800a4ba:	781b      	ldrb	r3, [r3, #0]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d10a      	bne.n	800a4d6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a4c0:	4b08      	ldr	r3, [pc, #32]	@ (800a4e4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800a4c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a4c4:	4a09      	ldr	r2, [pc, #36]	@ (800a4ec <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800a4c6:	4013      	ands	r3, r2
 800a4c8:	0019      	movs	r1, r3
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a4ce:	4b05      	ldr	r3, [pc, #20]	@ (800a4e4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800a4d0:	430a      	orrs	r2, r1
 800a4d2:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a4d4:	e016      	b.n	800a504 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a4d6:	2312      	movs	r3, #18
 800a4d8:	18fb      	adds	r3, r7, r3
 800a4da:	2213      	movs	r2, #19
 800a4dc:	18ba      	adds	r2, r7, r2
 800a4de:	7812      	ldrb	r2, [r2, #0]
 800a4e0:	701a      	strb	r2, [r3, #0]
 800a4e2:	e00f      	b.n	800a504 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800a4e4:	40021000 	.word	0x40021000
 800a4e8:	40007000 	.word	0x40007000
 800a4ec:	fffffcff 	.word	0xfffffcff
 800a4f0:	fffeffff 	.word	0xfffeffff
 800a4f4:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4f8:	2312      	movs	r3, #18
 800a4fa:	18fb      	adds	r3, r7, r3
 800a4fc:	2213      	movs	r2, #19
 800a4fe:	18ba      	adds	r2, r7, r2
 800a500:	7812      	ldrb	r2, [r2, #0]
 800a502:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a504:	2311      	movs	r3, #17
 800a506:	18fb      	adds	r3, r7, r3
 800a508:	781b      	ldrb	r3, [r3, #0]
 800a50a:	2b01      	cmp	r3, #1
 800a50c:	d105      	bne.n	800a51a <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a50e:	4bb6      	ldr	r3, [pc, #728]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a510:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a512:	4bb5      	ldr	r3, [pc, #724]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a514:	49b5      	ldr	r1, [pc, #724]	@ (800a7ec <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800a516:	400a      	ands	r2, r1
 800a518:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	2201      	movs	r2, #1
 800a520:	4013      	ands	r3, r2
 800a522:	d009      	beq.n	800a538 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a524:	4bb0      	ldr	r3, [pc, #704]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a526:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a528:	2203      	movs	r2, #3
 800a52a:	4393      	bics	r3, r2
 800a52c:	0019      	movs	r1, r3
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	685a      	ldr	r2, [r3, #4]
 800a532:	4bad      	ldr	r3, [pc, #692]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a534:	430a      	orrs	r2, r1
 800a536:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	2202      	movs	r2, #2
 800a53e:	4013      	ands	r3, r2
 800a540:	d009      	beq.n	800a556 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a542:	4ba9      	ldr	r3, [pc, #676]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a544:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a546:	220c      	movs	r2, #12
 800a548:	4393      	bics	r3, r2
 800a54a:	0019      	movs	r1, r3
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	689a      	ldr	r2, [r3, #8]
 800a550:	4ba5      	ldr	r3, [pc, #660]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a552:	430a      	orrs	r2, r1
 800a554:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	2204      	movs	r2, #4
 800a55c:	4013      	ands	r3, r2
 800a55e:	d009      	beq.n	800a574 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a560:	4ba1      	ldr	r3, [pc, #644]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a562:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a564:	2230      	movs	r2, #48	@ 0x30
 800a566:	4393      	bics	r3, r2
 800a568:	0019      	movs	r1, r3
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	68da      	ldr	r2, [r3, #12]
 800a56e:	4b9e      	ldr	r3, [pc, #632]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a570:	430a      	orrs	r2, r1
 800a572:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	2210      	movs	r2, #16
 800a57a:	4013      	ands	r3, r2
 800a57c:	d009      	beq.n	800a592 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a57e:	4b9a      	ldr	r3, [pc, #616]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a580:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a582:	4a9b      	ldr	r2, [pc, #620]	@ (800a7f0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800a584:	4013      	ands	r3, r2
 800a586:	0019      	movs	r1, r3
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	691a      	ldr	r2, [r3, #16]
 800a58c:	4b96      	ldr	r3, [pc, #600]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a58e:	430a      	orrs	r2, r1
 800a590:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681a      	ldr	r2, [r3, #0]
 800a596:	2380      	movs	r3, #128	@ 0x80
 800a598:	015b      	lsls	r3, r3, #5
 800a59a:	4013      	ands	r3, r2
 800a59c:	d009      	beq.n	800a5b2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 800a59e:	4b92      	ldr	r3, [pc, #584]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a5a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a5a2:	4a94      	ldr	r2, [pc, #592]	@ (800a7f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800a5a4:	4013      	ands	r3, r2
 800a5a6:	0019      	movs	r1, r3
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	695a      	ldr	r2, [r3, #20]
 800a5ac:	4b8e      	ldr	r3, [pc, #568]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a5ae:	430a      	orrs	r2, r1
 800a5b0:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681a      	ldr	r2, [r3, #0]
 800a5b6:	2380      	movs	r3, #128	@ 0x80
 800a5b8:	009b      	lsls	r3, r3, #2
 800a5ba:	4013      	ands	r3, r2
 800a5bc:	d009      	beq.n	800a5d2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a5be:	4b8a      	ldr	r3, [pc, #552]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a5c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a5c2:	4a8d      	ldr	r2, [pc, #564]	@ (800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 800a5c4:	4013      	ands	r3, r2
 800a5c6:	0019      	movs	r1, r3
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a5cc:	4b86      	ldr	r3, [pc, #536]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a5ce:	430a      	orrs	r2, r1
 800a5d0:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681a      	ldr	r2, [r3, #0]
 800a5d6:	2380      	movs	r3, #128	@ 0x80
 800a5d8:	00db      	lsls	r3, r3, #3
 800a5da:	4013      	ands	r3, r2
 800a5dc:	d009      	beq.n	800a5f2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a5de:	4b82      	ldr	r3, [pc, #520]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a5e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a5e2:	4a86      	ldr	r2, [pc, #536]	@ (800a7fc <HAL_RCCEx_PeriphCLKConfig+0x464>)
 800a5e4:	4013      	ands	r3, r2
 800a5e6:	0019      	movs	r1, r3
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a5ec:	4b7e      	ldr	r3, [pc, #504]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a5ee:	430a      	orrs	r2, r1
 800a5f0:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	2220      	movs	r2, #32
 800a5f8:	4013      	ands	r3, r2
 800a5fa:	d009      	beq.n	800a610 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a5fc:	4b7a      	ldr	r3, [pc, #488]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a5fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a600:	4a7f      	ldr	r2, [pc, #508]	@ (800a800 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a602:	4013      	ands	r3, r2
 800a604:	0019      	movs	r1, r3
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	699a      	ldr	r2, [r3, #24]
 800a60a:	4b77      	ldr	r3, [pc, #476]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a60c:	430a      	orrs	r2, r1
 800a60e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	2240      	movs	r2, #64	@ 0x40
 800a616:	4013      	ands	r3, r2
 800a618:	d009      	beq.n	800a62e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a61a:	4b73      	ldr	r3, [pc, #460]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a61c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a61e:	4a79      	ldr	r2, [pc, #484]	@ (800a804 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800a620:	4013      	ands	r3, r2
 800a622:	0019      	movs	r1, r3
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	69da      	ldr	r2, [r3, #28]
 800a628:	4b6f      	ldr	r3, [pc, #444]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a62a:	430a      	orrs	r2, r1
 800a62c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681a      	ldr	r2, [r3, #0]
 800a632:	2380      	movs	r3, #128	@ 0x80
 800a634:	01db      	lsls	r3, r3, #7
 800a636:	4013      	ands	r3, r2
 800a638:	d015      	beq.n	800a666 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a63a:	4b6b      	ldr	r3, [pc, #428]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a63c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a63e:	009b      	lsls	r3, r3, #2
 800a640:	0899      	lsrs	r1, r3, #2
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a646:	4b68      	ldr	r3, [pc, #416]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a648:	430a      	orrs	r2, r1
 800a64a:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a650:	2380      	movs	r3, #128	@ 0x80
 800a652:	05db      	lsls	r3, r3, #23
 800a654:	429a      	cmp	r2, r3
 800a656:	d106      	bne.n	800a666 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800a658:	4b63      	ldr	r3, [pc, #396]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a65a:	68da      	ldr	r2, [r3, #12]
 800a65c:	4b62      	ldr	r3, [pc, #392]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a65e:	2180      	movs	r1, #128	@ 0x80
 800a660:	0249      	lsls	r1, r1, #9
 800a662:	430a      	orrs	r2, r1
 800a664:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681a      	ldr	r2, [r3, #0]
 800a66a:	2380      	movs	r3, #128	@ 0x80
 800a66c:	031b      	lsls	r3, r3, #12
 800a66e:	4013      	ands	r3, r2
 800a670:	d009      	beq.n	800a686 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a672:	4b5d      	ldr	r3, [pc, #372]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a674:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a676:	2240      	movs	r2, #64	@ 0x40
 800a678:	4393      	bics	r3, r2
 800a67a:	0019      	movs	r1, r3
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a680:	4b59      	ldr	r3, [pc, #356]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a682:	430a      	orrs	r2, r1
 800a684:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681a      	ldr	r2, [r3, #0]
 800a68a:	2380      	movs	r3, #128	@ 0x80
 800a68c:	039b      	lsls	r3, r3, #14
 800a68e:	4013      	ands	r3, r2
 800a690:	d016      	beq.n	800a6c0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800a692:	4b55      	ldr	r3, [pc, #340]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a694:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a696:	4a5c      	ldr	r2, [pc, #368]	@ (800a808 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800a698:	4013      	ands	r3, r2
 800a69a:	0019      	movs	r1, r3
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a6a0:	4b51      	ldr	r3, [pc, #324]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a6a2:	430a      	orrs	r2, r1
 800a6a4:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a6aa:	2380      	movs	r3, #128	@ 0x80
 800a6ac:	03db      	lsls	r3, r3, #15
 800a6ae:	429a      	cmp	r2, r3
 800a6b0:	d106      	bne.n	800a6c0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800a6b2:	4b4d      	ldr	r3, [pc, #308]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a6b4:	68da      	ldr	r2, [r3, #12]
 800a6b6:	4b4c      	ldr	r3, [pc, #304]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a6b8:	2180      	movs	r1, #128	@ 0x80
 800a6ba:	0449      	lsls	r1, r1, #17
 800a6bc:	430a      	orrs	r2, r1
 800a6be:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681a      	ldr	r2, [r3, #0]
 800a6c4:	2380      	movs	r3, #128	@ 0x80
 800a6c6:	03db      	lsls	r3, r3, #15
 800a6c8:	4013      	ands	r3, r2
 800a6ca:	d016      	beq.n	800a6fa <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800a6cc:	4b46      	ldr	r3, [pc, #280]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a6ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a6d0:	4a4e      	ldr	r2, [pc, #312]	@ (800a80c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800a6d2:	4013      	ands	r3, r2
 800a6d4:	0019      	movs	r1, r3
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a6da:	4b43      	ldr	r3, [pc, #268]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a6dc:	430a      	orrs	r2, r1
 800a6de:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a6e4:	2380      	movs	r3, #128	@ 0x80
 800a6e6:	045b      	lsls	r3, r3, #17
 800a6e8:	429a      	cmp	r2, r3
 800a6ea:	d106      	bne.n	800a6fa <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800a6ec:	4b3e      	ldr	r3, [pc, #248]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a6ee:	68da      	ldr	r2, [r3, #12]
 800a6f0:	4b3d      	ldr	r3, [pc, #244]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a6f2:	2180      	movs	r1, #128	@ 0x80
 800a6f4:	0449      	lsls	r1, r1, #17
 800a6f6:	430a      	orrs	r2, r1
 800a6f8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681a      	ldr	r2, [r3, #0]
 800a6fe:	2380      	movs	r3, #128	@ 0x80
 800a700:	011b      	lsls	r3, r3, #4
 800a702:	4013      	ands	r3, r2
 800a704:	d014      	beq.n	800a730 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800a706:	4b38      	ldr	r3, [pc, #224]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a708:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a70a:	2203      	movs	r2, #3
 800a70c:	4393      	bics	r3, r2
 800a70e:	0019      	movs	r1, r3
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	6a1a      	ldr	r2, [r3, #32]
 800a714:	4b34      	ldr	r3, [pc, #208]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a716:	430a      	orrs	r2, r1
 800a718:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	6a1b      	ldr	r3, [r3, #32]
 800a71e:	2b01      	cmp	r3, #1
 800a720:	d106      	bne.n	800a730 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800a722:	4b31      	ldr	r3, [pc, #196]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a724:	68da      	ldr	r2, [r3, #12]
 800a726:	4b30      	ldr	r3, [pc, #192]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a728:	2180      	movs	r1, #128	@ 0x80
 800a72a:	0249      	lsls	r1, r1, #9
 800a72c:	430a      	orrs	r2, r1
 800a72e:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681a      	ldr	r2, [r3, #0]
 800a734:	2380      	movs	r3, #128	@ 0x80
 800a736:	019b      	lsls	r3, r3, #6
 800a738:	4013      	ands	r3, r2
 800a73a:	d014      	beq.n	800a766 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800a73c:	4b2a      	ldr	r3, [pc, #168]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a73e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a740:	220c      	movs	r2, #12
 800a742:	4393      	bics	r3, r2
 800a744:	0019      	movs	r1, r3
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a74a:	4b27      	ldr	r3, [pc, #156]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a74c:	430a      	orrs	r2, r1
 800a74e:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a754:	2b04      	cmp	r3, #4
 800a756:	d106      	bne.n	800a766 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800a758:	4b23      	ldr	r3, [pc, #140]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a75a:	68da      	ldr	r2, [r3, #12]
 800a75c:	4b22      	ldr	r3, [pc, #136]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a75e:	2180      	movs	r1, #128	@ 0x80
 800a760:	0249      	lsls	r1, r1, #9
 800a762:	430a      	orrs	r2, r1
 800a764:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681a      	ldr	r2, [r3, #0]
 800a76a:	2380      	movs	r3, #128	@ 0x80
 800a76c:	045b      	lsls	r3, r3, #17
 800a76e:	4013      	ands	r3, r2
 800a770:	d016      	beq.n	800a7a0 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a772:	4b1d      	ldr	r3, [pc, #116]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a774:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a776:	4a22      	ldr	r2, [pc, #136]	@ (800a800 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a778:	4013      	ands	r3, r2
 800a77a:	0019      	movs	r1, r3
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a780:	4b19      	ldr	r3, [pc, #100]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a782:	430a      	orrs	r2, r1
 800a784:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a78a:	2380      	movs	r3, #128	@ 0x80
 800a78c:	019b      	lsls	r3, r3, #6
 800a78e:	429a      	cmp	r2, r3
 800a790:	d106      	bne.n	800a7a0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800a792:	4b15      	ldr	r3, [pc, #84]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a794:	68da      	ldr	r2, [r3, #12]
 800a796:	4b14      	ldr	r3, [pc, #80]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a798:	2180      	movs	r1, #128	@ 0x80
 800a79a:	0449      	lsls	r1, r1, #17
 800a79c:	430a      	orrs	r2, r1
 800a79e:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681a      	ldr	r2, [r3, #0]
 800a7a4:	2380      	movs	r3, #128	@ 0x80
 800a7a6:	049b      	lsls	r3, r3, #18
 800a7a8:	4013      	ands	r3, r2
 800a7aa:	d016      	beq.n	800a7da <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a7ac:	4b0e      	ldr	r3, [pc, #56]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a7ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a7b0:	4a10      	ldr	r2, [pc, #64]	@ (800a7f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800a7b2:	4013      	ands	r3, r2
 800a7b4:	0019      	movs	r1, r3
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a7ba:	4b0b      	ldr	r3, [pc, #44]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a7bc:	430a      	orrs	r2, r1
 800a7be:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a7c4:	2380      	movs	r3, #128	@ 0x80
 800a7c6:	005b      	lsls	r3, r3, #1
 800a7c8:	429a      	cmp	r2, r3
 800a7ca:	d106      	bne.n	800a7da <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800a7cc:	4b06      	ldr	r3, [pc, #24]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a7ce:	68da      	ldr	r2, [r3, #12]
 800a7d0:	4b05      	ldr	r3, [pc, #20]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800a7d2:	2180      	movs	r1, #128	@ 0x80
 800a7d4:	0449      	lsls	r1, r1, #17
 800a7d6:	430a      	orrs	r2, r1
 800a7d8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800a7da:	2312      	movs	r3, #18
 800a7dc:	18fb      	adds	r3, r7, r3
 800a7de:	781b      	ldrb	r3, [r3, #0]
}
 800a7e0:	0018      	movs	r0, r3
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	b006      	add	sp, #24
 800a7e6:	bd80      	pop	{r7, pc}
 800a7e8:	40021000 	.word	0x40021000
 800a7ec:	efffffff 	.word	0xefffffff
 800a7f0:	fffff3ff 	.word	0xfffff3ff
 800a7f4:	fffffcff 	.word	0xfffffcff
 800a7f8:	fff3ffff 	.word	0xfff3ffff
 800a7fc:	ffcfffff 	.word	0xffcfffff
 800a800:	ffffcfff 	.word	0xffffcfff
 800a804:	ffff3fff 	.word	0xffff3fff
 800a808:	ffbfffff 	.word	0xffbfffff
 800a80c:	feffffff 	.word	0xfeffffff

0800a810 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a810:	b5b0      	push	{r4, r5, r7, lr}
 800a812:	b084      	sub	sp, #16
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a818:	230f      	movs	r3, #15
 800a81a:	18fb      	adds	r3, r7, r3
 800a81c:	2201      	movs	r2, #1
 800a81e:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d100      	bne.n	800a828 <HAL_RTC_Init+0x18>
 800a826:	e08c      	b.n	800a942 <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2229      	movs	r2, #41	@ 0x29
 800a82c:	5c9b      	ldrb	r3, [r3, r2]
 800a82e:	b2db      	uxtb	r3, r3
 800a830:	2b00      	cmp	r3, #0
 800a832:	d10b      	bne.n	800a84c <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2228      	movs	r2, #40	@ 0x28
 800a838:	2100      	movs	r1, #0
 800a83a:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2288      	movs	r2, #136	@ 0x88
 800a840:	0212      	lsls	r2, r2, #8
 800a842:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	0018      	movs	r0, r3
 800a848:	f7fc fe5e 	bl	8007508 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	2229      	movs	r2, #41	@ 0x29
 800a850:	2102      	movs	r1, #2
 800a852:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	68db      	ldr	r3, [r3, #12]
 800a85a:	2210      	movs	r2, #16
 800a85c:	4013      	ands	r3, r2
 800a85e:	2b10      	cmp	r3, #16
 800a860:	d062      	beq.n	800a928 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	22ca      	movs	r2, #202	@ 0xca
 800a868:	625a      	str	r2, [r3, #36]	@ 0x24
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	2253      	movs	r2, #83	@ 0x53
 800a870:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800a872:	250f      	movs	r5, #15
 800a874:	197c      	adds	r4, r7, r5
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	0018      	movs	r0, r3
 800a87a:	f000 fc0f 	bl	800b09c <RTC_EnterInitMode>
 800a87e:	0003      	movs	r3, r0
 800a880:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 800a882:	0028      	movs	r0, r5
 800a884:	183b      	adds	r3, r7, r0
 800a886:	781b      	ldrb	r3, [r3, #0]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d12c      	bne.n	800a8e6 <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	699a      	ldr	r2, [r3, #24]
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	492e      	ldr	r1, [pc, #184]	@ (800a950 <HAL_RTC_Init+0x140>)
 800a898:	400a      	ands	r2, r1
 800a89a:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	6999      	ldr	r1, [r3, #24]
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	689a      	ldr	r2, [r3, #8]
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	695b      	ldr	r3, [r3, #20]
 800a8aa:	431a      	orrs	r2, r3
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	69db      	ldr	r3, [r3, #28]
 800a8b0:	431a      	orrs	r2, r3
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	430a      	orrs	r2, r1
 800a8b8:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	687a      	ldr	r2, [r7, #4]
 800a8c0:	6912      	ldr	r2, [r2, #16]
 800a8c2:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	6919      	ldr	r1, [r3, #16]
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	68db      	ldr	r3, [r3, #12]
 800a8ce:	041a      	lsls	r2, r3, #16
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	430a      	orrs	r2, r1
 800a8d6:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800a8d8:	183c      	adds	r4, r7, r0
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	0018      	movs	r0, r3
 800a8de:	f000 fc1f 	bl	800b120 <RTC_ExitInitMode>
 800a8e2:	0003      	movs	r3, r0
 800a8e4:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 800a8e6:	230f      	movs	r3, #15
 800a8e8:	18fb      	adds	r3, r7, r3
 800a8ea:	781b      	ldrb	r3, [r3, #0]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d116      	bne.n	800a91e <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	699a      	ldr	r2, [r3, #24]
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	00d2      	lsls	r2, r2, #3
 800a8fc:	08d2      	lsrs	r2, r2, #3
 800a8fe:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	6999      	ldr	r1, [r3, #24]
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	6a1b      	ldr	r3, [r3, #32]
 800a90e:	431a      	orrs	r2, r3
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	699b      	ldr	r3, [r3, #24]
 800a914:	431a      	orrs	r2, r3
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	430a      	orrs	r2, r1
 800a91c:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	22ff      	movs	r2, #255	@ 0xff
 800a924:	625a      	str	r2, [r3, #36]	@ 0x24
 800a926:	e003      	b.n	800a930 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800a928:	230f      	movs	r3, #15
 800a92a:	18fb      	adds	r3, r7, r3
 800a92c:	2200      	movs	r2, #0
 800a92e:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 800a930:	230f      	movs	r3, #15
 800a932:	18fb      	adds	r3, r7, r3
 800a934:	781b      	ldrb	r3, [r3, #0]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d103      	bne.n	800a942 <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	2229      	movs	r2, #41	@ 0x29
 800a93e:	2101      	movs	r1, #1
 800a940:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 800a942:	230f      	movs	r3, #15
 800a944:	18fb      	adds	r3, r7, r3
 800a946:	781b      	ldrb	r3, [r3, #0]
}
 800a948:	0018      	movs	r0, r3
 800a94a:	46bd      	mov	sp, r7
 800a94c:	b004      	add	sp, #16
 800a94e:	bdb0      	pop	{r4, r5, r7, pc}
 800a950:	fb8fffbf 	.word	0xfb8fffbf

0800a954 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a954:	b5b0      	push	{r4, r5, r7, lr}
 800a956:	b086      	sub	sp, #24
 800a958:	af00      	add	r7, sp, #0
 800a95a:	60f8      	str	r0, [r7, #12]
 800a95c:	60b9      	str	r1, [r7, #8]
 800a95e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	2228      	movs	r2, #40	@ 0x28
 800a964:	5c9b      	ldrb	r3, [r3, r2]
 800a966:	2b01      	cmp	r3, #1
 800a968:	d101      	bne.n	800a96e <HAL_RTC_SetTime+0x1a>
 800a96a:	2302      	movs	r3, #2
 800a96c:	e092      	b.n	800aa94 <HAL_RTC_SetTime+0x140>
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	2228      	movs	r2, #40	@ 0x28
 800a972:	2101      	movs	r1, #1
 800a974:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	2229      	movs	r2, #41	@ 0x29
 800a97a:	2102      	movs	r1, #2
 800a97c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	22ca      	movs	r2, #202	@ 0xca
 800a984:	625a      	str	r2, [r3, #36]	@ 0x24
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	2253      	movs	r2, #83	@ 0x53
 800a98c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a98e:	2513      	movs	r5, #19
 800a990:	197c      	adds	r4, r7, r5
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	0018      	movs	r0, r3
 800a996:	f000 fb81 	bl	800b09c <RTC_EnterInitMode>
 800a99a:	0003      	movs	r3, r0
 800a99c:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 800a99e:	197b      	adds	r3, r7, r5
 800a9a0:	781b      	ldrb	r3, [r3, #0]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d162      	bne.n	800aa6c <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d125      	bne.n	800a9f8 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	699b      	ldr	r3, [r3, #24]
 800a9b2:	2240      	movs	r2, #64	@ 0x40
 800a9b4:	4013      	ands	r3, r2
 800a9b6:	d102      	bne.n	800a9be <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800a9b8:	68bb      	ldr	r3, [r7, #8]
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a9be:	68bb      	ldr	r3, [r7, #8]
 800a9c0:	781b      	ldrb	r3, [r3, #0]
 800a9c2:	0018      	movs	r0, r3
 800a9c4:	f000 fbf0 	bl	800b1a8 <RTC_ByteToBcd2>
 800a9c8:	0003      	movs	r3, r0
 800a9ca:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a9cc:	68bb      	ldr	r3, [r7, #8]
 800a9ce:	785b      	ldrb	r3, [r3, #1]
 800a9d0:	0018      	movs	r0, r3
 800a9d2:	f000 fbe9 	bl	800b1a8 <RTC_ByteToBcd2>
 800a9d6:	0003      	movs	r3, r0
 800a9d8:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a9da:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800a9dc:	68bb      	ldr	r3, [r7, #8]
 800a9de:	789b      	ldrb	r3, [r3, #2]
 800a9e0:	0018      	movs	r0, r3
 800a9e2:	f000 fbe1 	bl	800b1a8 <RTC_ByteToBcd2>
 800a9e6:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a9e8:	0022      	movs	r2, r4
 800a9ea:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800a9ec:	68bb      	ldr	r3, [r7, #8]
 800a9ee:	78db      	ldrb	r3, [r3, #3]
 800a9f0:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a9f2:	4313      	orrs	r3, r2
 800a9f4:	617b      	str	r3, [r7, #20]
 800a9f6:	e017      	b.n	800aa28 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	699b      	ldr	r3, [r3, #24]
 800a9fe:	2240      	movs	r2, #64	@ 0x40
 800aa00:	4013      	ands	r3, r2
 800aa02:	d102      	bne.n	800aa0a <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800aa04:	68bb      	ldr	r3, [r7, #8]
 800aa06:	2200      	movs	r2, #0
 800aa08:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800aa0a:	68bb      	ldr	r3, [r7, #8]
 800aa0c:	781b      	ldrb	r3, [r3, #0]
 800aa0e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800aa10:	68bb      	ldr	r3, [r7, #8]
 800aa12:	785b      	ldrb	r3, [r3, #1]
 800aa14:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800aa16:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800aa18:	68ba      	ldr	r2, [r7, #8]
 800aa1a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800aa1c:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	78db      	ldrb	r3, [r3, #3]
 800aa22:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800aa24:	4313      	orrs	r3, r2
 800aa26:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	697a      	ldr	r2, [r7, #20]
 800aa2e:	491b      	ldr	r1, [pc, #108]	@ (800aa9c <HAL_RTC_SetTime+0x148>)
 800aa30:	400a      	ands	r2, r1
 800aa32:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	699a      	ldr	r2, [r3, #24]
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	4918      	ldr	r1, [pc, #96]	@ (800aaa0 <HAL_RTC_SetTime+0x14c>)
 800aa40:	400a      	ands	r2, r1
 800aa42:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	6999      	ldr	r1, [r3, #24]
 800aa4a:	68bb      	ldr	r3, [r7, #8]
 800aa4c:	68da      	ldr	r2, [r3, #12]
 800aa4e:	68bb      	ldr	r3, [r7, #8]
 800aa50:	691b      	ldr	r3, [r3, #16]
 800aa52:	431a      	orrs	r2, r3
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	430a      	orrs	r2, r1
 800aa5a:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800aa5c:	2313      	movs	r3, #19
 800aa5e:	18fc      	adds	r4, r7, r3
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	0018      	movs	r0, r3
 800aa64:	f000 fb5c 	bl	800b120 <RTC_ExitInitMode>
 800aa68:	0003      	movs	r3, r0
 800aa6a:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	22ff      	movs	r2, #255	@ 0xff
 800aa72:	625a      	str	r2, [r3, #36]	@ 0x24
  
  if (status == HAL_OK)
 800aa74:	2313      	movs	r3, #19
 800aa76:	18fb      	adds	r3, r7, r3
 800aa78:	781b      	ldrb	r3, [r3, #0]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d103      	bne.n	800aa86 <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	2229      	movs	r2, #41	@ 0x29
 800aa82:	2101      	movs	r1, #1
 800aa84:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	2228      	movs	r2, #40	@ 0x28
 800aa8a:	2100      	movs	r1, #0
 800aa8c:	5499      	strb	r1, [r3, r2]

  return status;
 800aa8e:	2313      	movs	r3, #19
 800aa90:	18fb      	adds	r3, r7, r3
 800aa92:	781b      	ldrb	r3, [r3, #0]
}
 800aa94:	0018      	movs	r0, r3
 800aa96:	46bd      	mov	sp, r7
 800aa98:	b006      	add	sp, #24
 800aa9a:	bdb0      	pop	{r4, r5, r7, pc}
 800aa9c:	007f7f7f 	.word	0x007f7f7f
 800aaa0:	fffbffff 	.word	0xfffbffff

0800aaa4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800aaa4:	b5b0      	push	{r4, r5, r7, lr}
 800aaa6:	b086      	sub	sp, #24
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	60f8      	str	r0, [r7, #12]
 800aaac:	60b9      	str	r1, [r7, #8]
 800aaae:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	2228      	movs	r2, #40	@ 0x28
 800aab4:	5c9b      	ldrb	r3, [r3, r2]
 800aab6:	2b01      	cmp	r3, #1
 800aab8:	d101      	bne.n	800aabe <HAL_RTC_SetDate+0x1a>
 800aaba:	2302      	movs	r3, #2
 800aabc:	e07e      	b.n	800abbc <HAL_RTC_SetDate+0x118>
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	2228      	movs	r2, #40	@ 0x28
 800aac2:	2101      	movs	r1, #1
 800aac4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	2229      	movs	r2, #41	@ 0x29
 800aaca:	2102      	movs	r1, #2
 800aacc:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d10e      	bne.n	800aaf2 <HAL_RTC_SetDate+0x4e>
 800aad4:	68bb      	ldr	r3, [r7, #8]
 800aad6:	785b      	ldrb	r3, [r3, #1]
 800aad8:	001a      	movs	r2, r3
 800aada:	2310      	movs	r3, #16
 800aadc:	4013      	ands	r3, r2
 800aade:	d008      	beq.n	800aaf2 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800aae0:	68bb      	ldr	r3, [r7, #8]
 800aae2:	785b      	ldrb	r3, [r3, #1]
 800aae4:	2210      	movs	r2, #16
 800aae6:	4393      	bics	r3, r2
 800aae8:	b2db      	uxtb	r3, r3
 800aaea:	330a      	adds	r3, #10
 800aaec:	b2da      	uxtb	r2, r3
 800aaee:	68bb      	ldr	r3, [r7, #8]
 800aaf0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d11c      	bne.n	800ab32 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800aaf8:	68bb      	ldr	r3, [r7, #8]
 800aafa:	78db      	ldrb	r3, [r3, #3]
 800aafc:	0018      	movs	r0, r3
 800aafe:	f000 fb53 	bl	800b1a8 <RTC_ByteToBcd2>
 800ab02:	0003      	movs	r3, r0
 800ab04:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800ab06:	68bb      	ldr	r3, [r7, #8]
 800ab08:	785b      	ldrb	r3, [r3, #1]
 800ab0a:	0018      	movs	r0, r3
 800ab0c:	f000 fb4c 	bl	800b1a8 <RTC_ByteToBcd2>
 800ab10:	0003      	movs	r3, r0
 800ab12:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800ab14:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800ab16:	68bb      	ldr	r3, [r7, #8]
 800ab18:	789b      	ldrb	r3, [r3, #2]
 800ab1a:	0018      	movs	r0, r3
 800ab1c:	f000 fb44 	bl	800b1a8 <RTC_ByteToBcd2>
 800ab20:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800ab22:	0022      	movs	r2, r4
 800ab24:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800ab26:	68bb      	ldr	r3, [r7, #8]
 800ab28:	781b      	ldrb	r3, [r3, #0]
 800ab2a:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800ab2c:	4313      	orrs	r3, r2
 800ab2e:	617b      	str	r3, [r7, #20]
 800ab30:	e00e      	b.n	800ab50 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800ab32:	68bb      	ldr	r3, [r7, #8]
 800ab34:	78db      	ldrb	r3, [r3, #3]
 800ab36:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800ab38:	68bb      	ldr	r3, [r7, #8]
 800ab3a:	785b      	ldrb	r3, [r3, #1]
 800ab3c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800ab3e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 800ab40:	68ba      	ldr	r2, [r7, #8]
 800ab42:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800ab44:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800ab46:	68bb      	ldr	r3, [r7, #8]
 800ab48:	781b      	ldrb	r3, [r3, #0]
 800ab4a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800ab4c:	4313      	orrs	r3, r2
 800ab4e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	22ca      	movs	r2, #202	@ 0xca
 800ab56:	625a      	str	r2, [r3, #36]	@ 0x24
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	2253      	movs	r2, #83	@ 0x53
 800ab5e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800ab60:	2513      	movs	r5, #19
 800ab62:	197c      	adds	r4, r7, r5
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	0018      	movs	r0, r3
 800ab68:	f000 fa98 	bl	800b09c <RTC_EnterInitMode>
 800ab6c:	0003      	movs	r3, r0
 800ab6e:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 800ab70:	0028      	movs	r0, r5
 800ab72:	183b      	adds	r3, r7, r0
 800ab74:	781b      	ldrb	r3, [r3, #0]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d10c      	bne.n	800ab94 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	697a      	ldr	r2, [r7, #20]
 800ab80:	4910      	ldr	r1, [pc, #64]	@ (800abc4 <HAL_RTC_SetDate+0x120>)
 800ab82:	400a      	ands	r2, r1
 800ab84:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800ab86:	183c      	adds	r4, r7, r0
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	0018      	movs	r0, r3
 800ab8c:	f000 fac8 	bl	800b120 <RTC_ExitInitMode>
 800ab90:	0003      	movs	r3, r0
 800ab92:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	22ff      	movs	r2, #255	@ 0xff
 800ab9a:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800ab9c:	2313      	movs	r3, #19
 800ab9e:	18fb      	adds	r3, r7, r3
 800aba0:	781b      	ldrb	r3, [r3, #0]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d103      	bne.n	800abae <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	2229      	movs	r2, #41	@ 0x29
 800abaa:	2101      	movs	r1, #1
 800abac:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	2228      	movs	r2, #40	@ 0x28
 800abb2:	2100      	movs	r1, #0
 800abb4:	5499      	strb	r1, [r3, r2]

  return status;
 800abb6:	2313      	movs	r3, #19
 800abb8:	18fb      	adds	r3, r7, r3
 800abba:	781b      	ldrb	r3, [r3, #0]
}
 800abbc:	0018      	movs	r0, r3
 800abbe:	46bd      	mov	sp, r7
 800abc0:	b006      	add	sp, #24
 800abc2:	bdb0      	pop	{r4, r5, r7, pc}
 800abc4:	00ffff3f 	.word	0x00ffff3f

0800abc8 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800abc8:	b590      	push	{r4, r7, lr}
 800abca:	b089      	sub	sp, #36	@ 0x24
 800abcc:	af00      	add	r7, sp, #0
 800abce:	60f8      	str	r0, [r7, #12]
 800abd0:	60b9      	str	r1, [r7, #8]
 800abd2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	2228      	movs	r2, #40	@ 0x28
 800abd8:	5c9b      	ldrb	r3, [r3, r2]
 800abda:	2b01      	cmp	r3, #1
 800abdc:	d101      	bne.n	800abe2 <HAL_RTC_SetAlarm_IT+0x1a>
 800abde:	2302      	movs	r3, #2
 800abe0:	e127      	b.n	800ae32 <HAL_RTC_SetAlarm_IT+0x26a>
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	2228      	movs	r2, #40	@ 0x28
 800abe6:	2101      	movs	r1, #1
 800abe8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	2229      	movs	r2, #41	@ 0x29
 800abee:	2102      	movs	r1, #2
 800abf0:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d136      	bne.n	800ac66 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	699b      	ldr	r3, [r3, #24]
 800abfe:	2240      	movs	r2, #64	@ 0x40
 800ac00:	4013      	ands	r3, r2
 800ac02:	d102      	bne.n	800ac0a <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800ac04:	68bb      	ldr	r3, [r7, #8]
 800ac06:	2200      	movs	r2, #0
 800ac08:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800ac0a:	68bb      	ldr	r3, [r7, #8]
 800ac0c:	781b      	ldrb	r3, [r3, #0]
 800ac0e:	0018      	movs	r0, r3
 800ac10:	f000 faca 	bl	800b1a8 <RTC_ByteToBcd2>
 800ac14:	0003      	movs	r3, r0
 800ac16:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800ac18:	68bb      	ldr	r3, [r7, #8]
 800ac1a:	785b      	ldrb	r3, [r3, #1]
 800ac1c:	0018      	movs	r0, r3
 800ac1e:	f000 fac3 	bl	800b1a8 <RTC_ByteToBcd2>
 800ac22:	0003      	movs	r3, r0
 800ac24:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800ac26:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800ac28:	68bb      	ldr	r3, [r7, #8]
 800ac2a:	789b      	ldrb	r3, [r3, #2]
 800ac2c:	0018      	movs	r0, r3
 800ac2e:	f000 fabb 	bl	800b1a8 <RTC_ByteToBcd2>
 800ac32:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800ac34:	0022      	movs	r2, r4
 800ac36:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800ac38:	68bb      	ldr	r3, [r7, #8]
 800ac3a:	78db      	ldrb	r3, [r3, #3]
 800ac3c:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800ac3e:	431a      	orrs	r2, r3
 800ac40:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800ac42:	68bb      	ldr	r3, [r7, #8]
 800ac44:	2220      	movs	r2, #32
 800ac46:	5c9b      	ldrb	r3, [r3, r2]
 800ac48:	0018      	movs	r0, r3
 800ac4a:	f000 faad 	bl	800b1a8 <RTC_ByteToBcd2>
 800ac4e:	0003      	movs	r3, r0
 800ac50:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800ac52:	0022      	movs	r2, r4
 800ac54:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800ac56:	68bb      	ldr	r3, [r7, #8]
 800ac58:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800ac5a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800ac5c:	68bb      	ldr	r3, [r7, #8]
 800ac5e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800ac60:	4313      	orrs	r3, r2
 800ac62:	61fb      	str	r3, [r7, #28]
 800ac64:	e022      	b.n	800acac <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	699b      	ldr	r3, [r3, #24]
 800ac6c:	2240      	movs	r2, #64	@ 0x40
 800ac6e:	4013      	ands	r3, r2
 800ac70:	d102      	bne.n	800ac78 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800ac72:	68bb      	ldr	r3, [r7, #8]
 800ac74:	2200      	movs	r2, #0
 800ac76:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800ac78:	68bb      	ldr	r3, [r7, #8]
 800ac7a:	781b      	ldrb	r3, [r3, #0]
 800ac7c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800ac7e:	68bb      	ldr	r3, [r7, #8]
 800ac80:	785b      	ldrb	r3, [r3, #1]
 800ac82:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800ac84:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800ac86:	68ba      	ldr	r2, [r7, #8]
 800ac88:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800ac8a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800ac8c:	68bb      	ldr	r3, [r7, #8]
 800ac8e:	78db      	ldrb	r3, [r3, #3]
 800ac90:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800ac92:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800ac94:	68bb      	ldr	r3, [r7, #8]
 800ac96:	2120      	movs	r1, #32
 800ac98:	5c5b      	ldrb	r3, [r3, r1]
 800ac9a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800ac9c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800ac9e:	68bb      	ldr	r3, [r7, #8]
 800aca0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800aca2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800aca4:	68bb      	ldr	r3, [r7, #8]
 800aca6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800aca8:	4313      	orrs	r3, r2
 800acaa:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800acac:	68bb      	ldr	r3, [r7, #8]
 800acae:	685a      	ldr	r2, [r3, #4]
 800acb0:	68bb      	ldr	r3, [r7, #8]
 800acb2:	699b      	ldr	r3, [r3, #24]
 800acb4:	4313      	orrs	r3, r2
 800acb6:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	22ca      	movs	r2, #202	@ 0xca
 800acbe:	625a      	str	r2, [r3, #36]	@ 0x24
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	2253      	movs	r2, #83	@ 0x53
 800acc6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800acc8:	68bb      	ldr	r3, [r7, #8]
 800acca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800accc:	2380      	movs	r3, #128	@ 0x80
 800acce:	005b      	lsls	r3, r3, #1
 800acd0:	429a      	cmp	r2, r3
 800acd2:	d14c      	bne.n	800ad6e <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	699a      	ldr	r2, [r3, #24]
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	4957      	ldr	r1, [pc, #348]	@ (800ae3c <HAL_RTC_SetAlarm_IT+0x274>)
 800ace0:	400a      	ands	r2, r1
 800ace2:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	2101      	movs	r1, #1
 800acf0:	430a      	orrs	r2, r1
 800acf2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 800acf4:	f7fd fcba 	bl	800866c <HAL_GetTick>
 800acf8:	0003      	movs	r3, r0
 800acfa:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800acfc:	e016      	b.n	800ad2c <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800acfe:	f7fd fcb5 	bl	800866c <HAL_GetTick>
 800ad02:	0002      	movs	r2, r0
 800ad04:	697b      	ldr	r3, [r7, #20]
 800ad06:	1ad2      	subs	r2, r2, r3
 800ad08:	23fa      	movs	r3, #250	@ 0xfa
 800ad0a:	009b      	lsls	r3, r3, #2
 800ad0c:	429a      	cmp	r2, r3
 800ad0e:	d90d      	bls.n	800ad2c <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	22ff      	movs	r2, #255	@ 0xff
 800ad16:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	2229      	movs	r2, #41	@ 0x29
 800ad1c:	2103      	movs	r1, #3
 800ad1e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	2228      	movs	r2, #40	@ 0x28
 800ad24:	2100      	movs	r1, #0
 800ad26:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800ad28:	2303      	movs	r3, #3
 800ad2a:	e082      	b.n	800ae32 <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	68db      	ldr	r3, [r3, #12]
 800ad32:	2201      	movs	r2, #1
 800ad34:	4013      	ands	r3, r2
 800ad36:	d0e2      	beq.n	800acfe <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	69fa      	ldr	r2, [r7, #28]
 800ad3e:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	69ba      	ldr	r2, [r7, #24]
 800ad46:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	699a      	ldr	r2, [r3, #24]
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	2180      	movs	r1, #128	@ 0x80
 800ad54:	0049      	lsls	r1, r1, #1
 800ad56:	430a      	orrs	r2, r1
 800ad58:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	699a      	ldr	r2, [r3, #24]
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	2180      	movs	r1, #128	@ 0x80
 800ad66:	0149      	lsls	r1, r1, #5
 800ad68:	430a      	orrs	r2, r1
 800ad6a:	619a      	str	r2, [r3, #24]
 800ad6c:	e04b      	b.n	800ae06 <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	699a      	ldr	r2, [r3, #24]
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	4931      	ldr	r1, [pc, #196]	@ (800ae40 <HAL_RTC_SetAlarm_IT+0x278>)
 800ad7a:	400a      	ands	r2, r1
 800ad7c:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	2102      	movs	r1, #2
 800ad8a:	430a      	orrs	r2, r1
 800ad8c:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 800ad8e:	f7fd fc6d 	bl	800866c <HAL_GetTick>
 800ad92:	0003      	movs	r3, r0
 800ad94:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800ad96:	e016      	b.n	800adc6 <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800ad98:	f7fd fc68 	bl	800866c <HAL_GetTick>
 800ad9c:	0002      	movs	r2, r0
 800ad9e:	697b      	ldr	r3, [r7, #20]
 800ada0:	1ad2      	subs	r2, r2, r3
 800ada2:	23fa      	movs	r3, #250	@ 0xfa
 800ada4:	009b      	lsls	r3, r3, #2
 800ada6:	429a      	cmp	r2, r3
 800ada8:	d90d      	bls.n	800adc6 <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	22ff      	movs	r2, #255	@ 0xff
 800adb0:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	2229      	movs	r2, #41	@ 0x29
 800adb6:	2103      	movs	r1, #3
 800adb8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	2228      	movs	r2, #40	@ 0x28
 800adbe:	2100      	movs	r1, #0
 800adc0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800adc2:	2303      	movs	r3, #3
 800adc4:	e035      	b.n	800ae32 <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	68db      	ldr	r3, [r3, #12]
 800adcc:	2202      	movs	r2, #2
 800adce:	4013      	ands	r3, r2
 800add0:	d0e2      	beq.n	800ad98 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	69fa      	ldr	r2, [r7, #28]
 800add8:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	69ba      	ldr	r2, [r7, #24]
 800ade0:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	699a      	ldr	r2, [r3, #24]
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	2180      	movs	r1, #128	@ 0x80
 800adee:	0089      	lsls	r1, r1, #2
 800adf0:	430a      	orrs	r2, r1
 800adf2:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	699a      	ldr	r2, [r3, #24]
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	2180      	movs	r1, #128	@ 0x80
 800ae00:	0189      	lsls	r1, r1, #6
 800ae02:	430a      	orrs	r2, r1
 800ae04:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800ae06:	4a0f      	ldr	r2, [pc, #60]	@ (800ae44 <HAL_RTC_SetAlarm_IT+0x27c>)
 800ae08:	2380      	movs	r3, #128	@ 0x80
 800ae0a:	58d3      	ldr	r3, [r2, r3]
 800ae0c:	490d      	ldr	r1, [pc, #52]	@ (800ae44 <HAL_RTC_SetAlarm_IT+0x27c>)
 800ae0e:	2280      	movs	r2, #128	@ 0x80
 800ae10:	0312      	lsls	r2, r2, #12
 800ae12:	4313      	orrs	r3, r2
 800ae14:	2280      	movs	r2, #128	@ 0x80
 800ae16:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	22ff      	movs	r2, #255	@ 0xff
 800ae1e:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	2229      	movs	r2, #41	@ 0x29
 800ae24:	2101      	movs	r1, #1
 800ae26:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	2228      	movs	r2, #40	@ 0x28
 800ae2c:	2100      	movs	r1, #0
 800ae2e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ae30:	2300      	movs	r3, #0
}
 800ae32:	0018      	movs	r0, r3
 800ae34:	46bd      	mov	sp, r7
 800ae36:	b009      	add	sp, #36	@ 0x24
 800ae38:	bd90      	pop	{r4, r7, pc}
 800ae3a:	46c0      	nop			@ (mov r8, r8)
 800ae3c:	fffffeff 	.word	0xfffffeff
 800ae40:	fffffdff 	.word	0xfffffdff
 800ae44:	40021800 	.word	0x40021800

0800ae48 <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b086      	sub	sp, #24
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	60f8      	str	r0, [r7, #12]
 800ae50:	60b9      	str	r1, [r7, #8]
 800ae52:	607a      	str	r2, [r7, #4]
 800ae54:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if(Alarm == RTC_ALARM_A)
 800ae56:	687a      	ldr	r2, [r7, #4]
 800ae58:	2380      	movs	r3, #128	@ 0x80
 800ae5a:	005b      	lsls	r3, r3, #1
 800ae5c:	429a      	cmp	r2, r3
 800ae5e:	d144      	bne.n	800aeea <HAL_RTC_GetAlarm+0xa2>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 800ae60:	68bb      	ldr	r3, [r7, #8]
 800ae62:	2280      	movs	r2, #128	@ 0x80
 800ae64:	0052      	lsls	r2, r2, #1
 800ae66:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae6e:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR ) & RTC_ALRMASSR_SS);
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ae76:	045b      	lsls	r3, r3, #17
 800ae78:	0c5b      	lsrs	r3, r3, #17
 800ae7a:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> RTC_ALRMAR_HU_Pos);
 800ae7c:	697b      	ldr	r3, [r7, #20]
 800ae7e:	0c1b      	lsrs	r3, r3, #16
 800ae80:	b2db      	uxtb	r3, r3
 800ae82:	223f      	movs	r2, #63	@ 0x3f
 800ae84:	4013      	ands	r3, r2
 800ae86:	b2da      	uxtb	r2, r3
 800ae88:	68bb      	ldr	r3, [r7, #8]
 800ae8a:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 800ae8c:	697b      	ldr	r3, [r7, #20]
 800ae8e:	0a1b      	lsrs	r3, r3, #8
 800ae90:	b2db      	uxtb	r3, r3
 800ae92:	227f      	movs	r2, #127	@ 0x7f
 800ae94:	4013      	ands	r3, r2
 800ae96:	b2da      	uxtb	r2, r3
 800ae98:	68bb      	ldr	r3, [r7, #8]
 800ae9a:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU)) >> RTC_ALRMAR_SU_Pos);
 800ae9c:	697b      	ldr	r3, [r7, #20]
 800ae9e:	b2db      	uxtb	r3, r3
 800aea0:	227f      	movs	r2, #127	@ 0x7f
 800aea2:	4013      	ands	r3, r2
 800aea4:	b2da      	uxtb	r2, r3
 800aea6:	68bb      	ldr	r3, [r7, #8]
 800aea8:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMAR_PM) >> RTC_ALRMAR_PM_Pos);
 800aeaa:	697b      	ldr	r3, [r7, #20]
 800aeac:	0d9b      	lsrs	r3, r3, #22
 800aeae:	b2db      	uxtb	r3, r3
 800aeb0:	2201      	movs	r2, #1
 800aeb2:	4013      	ands	r3, r2
 800aeb4:	b2da      	uxtb	r2, r3
 800aeb6:	68bb      	ldr	r3, [r7, #8]
 800aeb8:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 800aeba:	68bb      	ldr	r3, [r7, #8]
 800aebc:	693a      	ldr	r2, [r7, #16]
 800aebe:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> RTC_ALRMAR_DU_Pos);
 800aec0:	697b      	ldr	r3, [r7, #20]
 800aec2:	0e1b      	lsrs	r3, r3, #24
 800aec4:	b2db      	uxtb	r3, r3
 800aec6:	223f      	movs	r2, #63	@ 0x3f
 800aec8:	4013      	ands	r3, r2
 800aeca:	b2d9      	uxtb	r1, r3
 800aecc:	68bb      	ldr	r3, [r7, #8]
 800aece:	2220      	movs	r2, #32
 800aed0:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 800aed2:	697a      	ldr	r2, [r7, #20]
 800aed4:	2380      	movs	r3, #128	@ 0x80
 800aed6:	05db      	lsls	r3, r3, #23
 800aed8:	401a      	ands	r2, r3
 800aeda:	68bb      	ldr	r3, [r7, #8]
 800aedc:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 800aede:	697b      	ldr	r3, [r7, #20]
 800aee0:	4a3b      	ldr	r2, [pc, #236]	@ (800afd0 <HAL_RTC_GetAlarm+0x188>)
 800aee2:	401a      	ands	r2, r3
 800aee4:	68bb      	ldr	r3, [r7, #8]
 800aee6:	615a      	str	r2, [r3, #20]
 800aee8:	e043      	b.n	800af72 <HAL_RTC_GetAlarm+0x12a>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 800aeea:	68bb      	ldr	r3, [r7, #8]
 800aeec:	2280      	movs	r2, #128	@ 0x80
 800aeee:	0092      	lsls	r2, r2, #2
 800aef0:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800aef8:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800af00:	045b      	lsls	r3, r3, #17
 800af02:	0c5b      	lsrs	r3, r3, #17
 800af04:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMBR_HT | RTC_ALRMBR_HU)) >> RTC_ALRMBR_HU_Pos);
 800af06:	697b      	ldr	r3, [r7, #20]
 800af08:	0c1b      	lsrs	r3, r3, #16
 800af0a:	b2db      	uxtb	r3, r3
 800af0c:	223f      	movs	r2, #63	@ 0x3f
 800af0e:	4013      	ands	r3, r2
 800af10:	b2da      	uxtb	r2, r3
 800af12:	68bb      	ldr	r3, [r7, #8]
 800af14:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> RTC_ALRMBR_MNU_Pos);
 800af16:	697b      	ldr	r3, [r7, #20]
 800af18:	0a1b      	lsrs	r3, r3, #8
 800af1a:	b2db      	uxtb	r3, r3
 800af1c:	227f      	movs	r2, #127	@ 0x7f
 800af1e:	4013      	ands	r3, r2
 800af20:	b2da      	uxtb	r2, r3
 800af22:	68bb      	ldr	r3, [r7, #8]
 800af24:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMBR_ST | RTC_ALRMBR_SU)) >> RTC_ALRMBR_SU_Pos);
 800af26:	697b      	ldr	r3, [r7, #20]
 800af28:	b2db      	uxtb	r3, r3
 800af2a:	227f      	movs	r2, #127	@ 0x7f
 800af2c:	4013      	ands	r3, r2
 800af2e:	b2da      	uxtb	r2, r3
 800af30:	68bb      	ldr	r3, [r7, #8]
 800af32:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMBR_PM) >> RTC_ALRMBR_PM_Pos);
 800af34:	697b      	ldr	r3, [r7, #20]
 800af36:	0d9b      	lsrs	r3, r3, #22
 800af38:	b2db      	uxtb	r3, r3
 800af3a:	2201      	movs	r2, #1
 800af3c:	4013      	ands	r3, r2
 800af3e:	b2da      	uxtb	r2, r3
 800af40:	68bb      	ldr	r3, [r7, #8]
 800af42:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 800af44:	68bb      	ldr	r3, [r7, #8]
 800af46:	693a      	ldr	r2, [r7, #16]
 800af48:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU)) >> RTC_ALRMBR_DU_Pos);
 800af4a:	697b      	ldr	r3, [r7, #20]
 800af4c:	0e1b      	lsrs	r3, r3, #24
 800af4e:	b2db      	uxtb	r3, r3
 800af50:	223f      	movs	r2, #63	@ 0x3f
 800af52:	4013      	ands	r3, r2
 800af54:	b2d9      	uxtb	r1, r3
 800af56:	68bb      	ldr	r3, [r7, #8]
 800af58:	2220      	movs	r2, #32
 800af5a:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMBR_WDSEL);
 800af5c:	697a      	ldr	r2, [r7, #20]
 800af5e:	2380      	movs	r3, #128	@ 0x80
 800af60:	05db      	lsls	r3, r3, #23
 800af62:	401a      	ands	r2, r3
 800af64:	68bb      	ldr	r3, [r7, #8]
 800af66:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 800af68:	697b      	ldr	r3, [r7, #20]
 800af6a:	4a19      	ldr	r2, [pc, #100]	@ (800afd0 <HAL_RTC_GetAlarm+0x188>)
 800af6c:	401a      	ands	r2, r3
 800af6e:	68bb      	ldr	r3, [r7, #8]
 800af70:	615a      	str	r2, [r3, #20]
  }

  if(Format == RTC_FORMAT_BIN)
 800af72:	683b      	ldr	r3, [r7, #0]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d125      	bne.n	800afc4 <HAL_RTC_GetAlarm+0x17c>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 800af78:	68bb      	ldr	r3, [r7, #8]
 800af7a:	781b      	ldrb	r3, [r3, #0]
 800af7c:	0018      	movs	r0, r3
 800af7e:	f000 f93b 	bl	800b1f8 <RTC_Bcd2ToByte>
 800af82:	0003      	movs	r3, r0
 800af84:	001a      	movs	r2, r3
 800af86:	68bb      	ldr	r3, [r7, #8]
 800af88:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 800af8a:	68bb      	ldr	r3, [r7, #8]
 800af8c:	785b      	ldrb	r3, [r3, #1]
 800af8e:	0018      	movs	r0, r3
 800af90:	f000 f932 	bl	800b1f8 <RTC_Bcd2ToByte>
 800af94:	0003      	movs	r3, r0
 800af96:	001a      	movs	r2, r3
 800af98:	68bb      	ldr	r3, [r7, #8]
 800af9a:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 800af9c:	68bb      	ldr	r3, [r7, #8]
 800af9e:	789b      	ldrb	r3, [r3, #2]
 800afa0:	0018      	movs	r0, r3
 800afa2:	f000 f929 	bl	800b1f8 <RTC_Bcd2ToByte>
 800afa6:	0003      	movs	r3, r0
 800afa8:	001a      	movs	r2, r3
 800afaa:	68bb      	ldr	r3, [r7, #8]
 800afac:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 800afae:	68bb      	ldr	r3, [r7, #8]
 800afb0:	2220      	movs	r2, #32
 800afb2:	5c9b      	ldrb	r3, [r3, r2]
 800afb4:	0018      	movs	r0, r3
 800afb6:	f000 f91f 	bl	800b1f8 <RTC_Bcd2ToByte>
 800afba:	0003      	movs	r3, r0
 800afbc:	0019      	movs	r1, r3
 800afbe:	68bb      	ldr	r3, [r7, #8]
 800afc0:	2220      	movs	r2, #32
 800afc2:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 800afc4:	2300      	movs	r3, #0
}
 800afc6:	0018      	movs	r0, r3
 800afc8:	46bd      	mov	sp, r7
 800afca:	b006      	add	sp, #24
 800afcc:	bd80      	pop	{r7, pc}
 800afce:	46c0      	nop			@ (mov r8, r8)
 800afd0:	80808080 	.word	0x80808080

0800afd4 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b082      	sub	sp, #8
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	699a      	ldr	r2, [r3, #24]
 800afe2:	2380      	movs	r3, #128	@ 0x80
 800afe4:	015b      	lsls	r3, r3, #5
 800afe6:	4013      	ands	r3, r2
 800afe8:	d011      	beq.n	800b00e <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aff0:	2201      	movs	r2, #1
 800aff2:	4013      	ands	r3, r2
 800aff4:	d00b      	beq.n	800b00e <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	2101      	movs	r1, #1
 800b002:	430a      	orrs	r2, r1
 800b004:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	0018      	movs	r0, r3
 800b00a:	f7fb fd81 	bl	8006b10 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	699a      	ldr	r2, [r3, #24]
 800b014:	2380      	movs	r3, #128	@ 0x80
 800b016:	019b      	lsls	r3, r3, #6
 800b018:	4013      	ands	r3, r2
 800b01a:	d011      	beq.n	800b040 <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b022:	2202      	movs	r2, #2
 800b024:	4013      	ands	r3, r2
 800b026:	d00b      	beq.n	800b040 <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	2102      	movs	r1, #2
 800b034:	430a      	orrs	r2, r1
 800b036:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	0018      	movs	r0, r3
 800b03c:	f000 f9ba 	bl	800b3b4 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	2229      	movs	r2, #41	@ 0x29
 800b044:	2101      	movs	r1, #1
 800b046:	5499      	strb	r1, [r3, r2]
}
 800b048:	46c0      	nop			@ (mov r8, r8)
 800b04a:	46bd      	mov	sp, r7
 800b04c:	b002      	add	sp, #8
 800b04e:	bd80      	pop	{r7, pc}

0800b050 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800b050:	b580      	push	{r7, lr}
 800b052:	b084      	sub	sp, #16
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	4a0e      	ldr	r2, [pc, #56]	@ (800b098 <HAL_RTC_WaitForSynchro+0x48>)
 800b05e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800b060:	f7fd fb04 	bl	800866c <HAL_GetTick>
 800b064:	0003      	movs	r3, r0
 800b066:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800b068:	e00a      	b.n	800b080 <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800b06a:	f7fd faff 	bl	800866c <HAL_GetTick>
 800b06e:	0002      	movs	r2, r0
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	1ad2      	subs	r2, r2, r3
 800b074:	23fa      	movs	r3, #250	@ 0xfa
 800b076:	009b      	lsls	r3, r3, #2
 800b078:	429a      	cmp	r2, r3
 800b07a:	d901      	bls.n	800b080 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800b07c:	2303      	movs	r3, #3
 800b07e:	e006      	b.n	800b08e <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	68db      	ldr	r3, [r3, #12]
 800b086:	2220      	movs	r2, #32
 800b088:	4013      	ands	r3, r2
 800b08a:	d0ee      	beq.n	800b06a <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 800b08c:	2300      	movs	r3, #0
}
 800b08e:	0018      	movs	r0, r3
 800b090:	46bd      	mov	sp, r7
 800b092:	b004      	add	sp, #16
 800b094:	bd80      	pop	{r7, pc}
 800b096:	46c0      	nop			@ (mov r8, r8)
 800b098:	0001005f 	.word	0x0001005f

0800b09c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b084      	sub	sp, #16
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 800b0a4:	230f      	movs	r3, #15
 800b0a6:	18fb      	adds	r3, r7, r3
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	68db      	ldr	r3, [r3, #12]
 800b0b2:	2240      	movs	r2, #64	@ 0x40
 800b0b4:	4013      	ands	r3, r2
 800b0b6:	d12c      	bne.n	800b112 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	68da      	ldr	r2, [r3, #12]
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	2180      	movs	r1, #128	@ 0x80
 800b0c4:	430a      	orrs	r2, r1
 800b0c6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800b0c8:	f7fd fad0 	bl	800866c <HAL_GetTick>
 800b0cc:	0003      	movs	r3, r0
 800b0ce:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800b0d0:	e014      	b.n	800b0fc <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800b0d2:	f7fd facb 	bl	800866c <HAL_GetTick>
 800b0d6:	0002      	movs	r2, r0
 800b0d8:	68bb      	ldr	r3, [r7, #8]
 800b0da:	1ad2      	subs	r2, r2, r3
 800b0dc:	200f      	movs	r0, #15
 800b0de:	183b      	adds	r3, r7, r0
 800b0e0:	1839      	adds	r1, r7, r0
 800b0e2:	7809      	ldrb	r1, [r1, #0]
 800b0e4:	7019      	strb	r1, [r3, #0]
 800b0e6:	23fa      	movs	r3, #250	@ 0xfa
 800b0e8:	009b      	lsls	r3, r3, #2
 800b0ea:	429a      	cmp	r2, r3
 800b0ec:	d906      	bls.n	800b0fc <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 800b0ee:	183b      	adds	r3, r7, r0
 800b0f0:	2203      	movs	r2, #3
 800b0f2:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	2229      	movs	r2, #41	@ 0x29
 800b0f8:	2103      	movs	r1, #3
 800b0fa:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	68db      	ldr	r3, [r3, #12]
 800b102:	2240      	movs	r2, #64	@ 0x40
 800b104:	4013      	ands	r3, r2
 800b106:	d104      	bne.n	800b112 <RTC_EnterInitMode+0x76>
 800b108:	230f      	movs	r3, #15
 800b10a:	18fb      	adds	r3, r7, r3
 800b10c:	781b      	ldrb	r3, [r3, #0]
 800b10e:	2b03      	cmp	r3, #3
 800b110:	d1df      	bne.n	800b0d2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800b112:	230f      	movs	r3, #15
 800b114:	18fb      	adds	r3, r7, r3
 800b116:	781b      	ldrb	r3, [r3, #0]
}
 800b118:	0018      	movs	r0, r3
 800b11a:	46bd      	mov	sp, r7
 800b11c:	b004      	add	sp, #16
 800b11e:	bd80      	pop	{r7, pc}

0800b120 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800b120:	b590      	push	{r4, r7, lr}
 800b122:	b085      	sub	sp, #20
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b128:	240f      	movs	r4, #15
 800b12a:	193b      	adds	r3, r7, r4
 800b12c:	2200      	movs	r2, #0
 800b12e:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800b130:	4b1c      	ldr	r3, [pc, #112]	@ (800b1a4 <RTC_ExitInitMode+0x84>)
 800b132:	68da      	ldr	r2, [r3, #12]
 800b134:	4b1b      	ldr	r3, [pc, #108]	@ (800b1a4 <RTC_ExitInitMode+0x84>)
 800b136:	2180      	movs	r1, #128	@ 0x80
 800b138:	438a      	bics	r2, r1
 800b13a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800b13c:	4b19      	ldr	r3, [pc, #100]	@ (800b1a4 <RTC_ExitInitMode+0x84>)
 800b13e:	699b      	ldr	r3, [r3, #24]
 800b140:	2220      	movs	r2, #32
 800b142:	4013      	ands	r3, r2
 800b144:	d10d      	bne.n	800b162 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	0018      	movs	r0, r3
 800b14a:	f7ff ff81 	bl	800b050 <HAL_RTC_WaitForSynchro>
 800b14e:	1e03      	subs	r3, r0, #0
 800b150:	d021      	beq.n	800b196 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	2229      	movs	r2, #41	@ 0x29
 800b156:	2103      	movs	r1, #3
 800b158:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800b15a:	193b      	adds	r3, r7, r4
 800b15c:	2203      	movs	r2, #3
 800b15e:	701a      	strb	r2, [r3, #0]
 800b160:	e019      	b.n	800b196 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800b162:	4b10      	ldr	r3, [pc, #64]	@ (800b1a4 <RTC_ExitInitMode+0x84>)
 800b164:	699a      	ldr	r2, [r3, #24]
 800b166:	4b0f      	ldr	r3, [pc, #60]	@ (800b1a4 <RTC_ExitInitMode+0x84>)
 800b168:	2120      	movs	r1, #32
 800b16a:	438a      	bics	r2, r1
 800b16c:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	0018      	movs	r0, r3
 800b172:	f7ff ff6d 	bl	800b050 <HAL_RTC_WaitForSynchro>
 800b176:	1e03      	subs	r3, r0, #0
 800b178:	d007      	beq.n	800b18a <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	2229      	movs	r2, #41	@ 0x29
 800b17e:	2103      	movs	r1, #3
 800b180:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800b182:	230f      	movs	r3, #15
 800b184:	18fb      	adds	r3, r7, r3
 800b186:	2203      	movs	r2, #3
 800b188:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800b18a:	4b06      	ldr	r3, [pc, #24]	@ (800b1a4 <RTC_ExitInitMode+0x84>)
 800b18c:	699a      	ldr	r2, [r3, #24]
 800b18e:	4b05      	ldr	r3, [pc, #20]	@ (800b1a4 <RTC_ExitInitMode+0x84>)
 800b190:	2120      	movs	r1, #32
 800b192:	430a      	orrs	r2, r1
 800b194:	619a      	str	r2, [r3, #24]
  }

  return status;
 800b196:	230f      	movs	r3, #15
 800b198:	18fb      	adds	r3, r7, r3
 800b19a:	781b      	ldrb	r3, [r3, #0]
}
 800b19c:	0018      	movs	r0, r3
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	b005      	add	sp, #20
 800b1a2:	bd90      	pop	{r4, r7, pc}
 800b1a4:	40002800 	.word	0x40002800

0800b1a8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b084      	sub	sp, #16
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	0002      	movs	r2, r0
 800b1b0:	1dfb      	adds	r3, r7, #7
 800b1b2:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 800b1b8:	230b      	movs	r3, #11
 800b1ba:	18fb      	adds	r3, r7, r3
 800b1bc:	1dfa      	adds	r2, r7, #7
 800b1be:	7812      	ldrb	r2, [r2, #0]
 800b1c0:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 800b1c2:	e008      	b.n	800b1d6 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	3301      	adds	r3, #1
 800b1c8:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800b1ca:	220b      	movs	r2, #11
 800b1cc:	18bb      	adds	r3, r7, r2
 800b1ce:	18ba      	adds	r2, r7, r2
 800b1d0:	7812      	ldrb	r2, [r2, #0]
 800b1d2:	3a0a      	subs	r2, #10
 800b1d4:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 800b1d6:	210b      	movs	r1, #11
 800b1d8:	187b      	adds	r3, r7, r1
 800b1da:	781b      	ldrb	r3, [r3, #0]
 800b1dc:	2b09      	cmp	r3, #9
 800b1de:	d8f1      	bhi.n	800b1c4 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	b2db      	uxtb	r3, r3
 800b1e4:	011b      	lsls	r3, r3, #4
 800b1e6:	b2da      	uxtb	r2, r3
 800b1e8:	187b      	adds	r3, r7, r1
 800b1ea:	781b      	ldrb	r3, [r3, #0]
 800b1ec:	4313      	orrs	r3, r2
 800b1ee:	b2db      	uxtb	r3, r3
}
 800b1f0:	0018      	movs	r0, r3
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	b004      	add	sp, #16
 800b1f6:	bd80      	pop	{r7, pc}

0800b1f8 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b084      	sub	sp, #16
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	0002      	movs	r2, r0
 800b200:	1dfb      	adds	r3, r7, #7
 800b202:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800b204:	1dfb      	adds	r3, r7, #7
 800b206:	781b      	ldrb	r3, [r3, #0]
 800b208:	091b      	lsrs	r3, r3, #4
 800b20a:	b2db      	uxtb	r3, r3
 800b20c:	001a      	movs	r2, r3
 800b20e:	0013      	movs	r3, r2
 800b210:	009b      	lsls	r3, r3, #2
 800b212:	189b      	adds	r3, r3, r2
 800b214:	005b      	lsls	r3, r3, #1
 800b216:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	b2da      	uxtb	r2, r3
 800b21c:	1dfb      	adds	r3, r7, #7
 800b21e:	781b      	ldrb	r3, [r3, #0]
 800b220:	210f      	movs	r1, #15
 800b222:	400b      	ands	r3, r1
 800b224:	b2db      	uxtb	r3, r3
 800b226:	18d3      	adds	r3, r2, r3
 800b228:	b2db      	uxtb	r3, r3
}
 800b22a:	0018      	movs	r0, r3
 800b22c:	46bd      	mov	sp, r7
 800b22e:	b004      	add	sp, #16
 800b230:	bd80      	pop	{r7, pc}
	...

0800b234 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800b234:	b580      	push	{r7, lr}
 800b236:	b086      	sub	sp, #24
 800b238:	af00      	add	r7, sp, #0
 800b23a:	60f8      	str	r0, [r7, #12]
 800b23c:	60b9      	str	r1, [r7, #8]
 800b23e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	2228      	movs	r2, #40	@ 0x28
 800b244:	5c9b      	ldrb	r3, [r3, r2]
 800b246:	2b01      	cmp	r3, #1
 800b248:	d101      	bne.n	800b24e <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800b24a:	2302      	movs	r3, #2
 800b24c:	e082      	b.n	800b354 <HAL_RTCEx_SetWakeUpTimer_IT+0x120>
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	2228      	movs	r2, #40	@ 0x28
 800b252:	2101      	movs	r1, #1
 800b254:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	2229      	movs	r2, #41	@ 0x29
 800b25a:	2102      	movs	r1, #2
 800b25c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	22ca      	movs	r2, #202	@ 0xca
 800b264:	625a      	str	r2, [r3, #36]	@ 0x24
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	2253      	movs	r2, #83	@ 0x53
 800b26c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	699a      	ldr	r2, [r3, #24]
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	4938      	ldr	r1, [pc, #224]	@ (800b35c <HAL_RTCEx_SetWakeUpTimer_IT+0x128>)
 800b27a:	400a      	ands	r2, r1
 800b27c:	619a      	str	r2, [r3, #24]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	2104      	movs	r1, #4
 800b28a:	430a      	orrs	r2, r1
 800b28c:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800b28e:	4b34      	ldr	r3, [pc, #208]	@ (800b360 <HAL_RTCEx_SetWakeUpTimer_IT+0x12c>)
 800b290:	68db      	ldr	r3, [r3, #12]
 800b292:	2240      	movs	r2, #64	@ 0x40
 800b294:	4013      	ands	r3, r2
 800b296:	d121      	bne.n	800b2dc <HAL_RTCEx_SetWakeUpTimer_IT+0xa8>
  {
    tickstart = HAL_GetTick();
 800b298:	f7fd f9e8 	bl	800866c <HAL_GetTick>
 800b29c:	0003      	movs	r3, r0
 800b29e:	617b      	str	r3, [r7, #20]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800b2a0:	e016      	b.n	800b2d0 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800b2a2:	f7fd f9e3 	bl	800866c <HAL_GetTick>
 800b2a6:	0002      	movs	r2, r0
 800b2a8:	697b      	ldr	r3, [r7, #20]
 800b2aa:	1ad2      	subs	r2, r2, r3
 800b2ac:	23fa      	movs	r3, #250	@ 0xfa
 800b2ae:	009b      	lsls	r3, r3, #2
 800b2b0:	429a      	cmp	r2, r3
 800b2b2:	d90d      	bls.n	800b2d0 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	22ff      	movs	r2, #255	@ 0xff
 800b2ba:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	2229      	movs	r2, #41	@ 0x29
 800b2c0:	2103      	movs	r1, #3
 800b2c2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	2228      	movs	r2, #40	@ 0x28
 800b2c8:	2100      	movs	r1, #0
 800b2ca:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800b2cc:	2303      	movs	r3, #3
 800b2ce:	e041      	b.n	800b354 <HAL_RTCEx_SetWakeUpTimer_IT+0x120>
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	68db      	ldr	r3, [r3, #12]
 800b2d6:	2204      	movs	r2, #4
 800b2d8:	4013      	ands	r3, r2
 800b2da:	d0e2      	beq.n	800b2a2 <HAL_RTCEx_SetWakeUpTimer_IT+0x6e>
      }
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	68ba      	ldr	r2, [r7, #8]
 800b2e2:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	699a      	ldr	r2, [r3, #24]
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	2107      	movs	r1, #7
 800b2f0:	438a      	bics	r2, r1
 800b2f2:	619a      	str	r2, [r3, #24]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	6999      	ldr	r1, [r3, #24]
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	687a      	ldr	r2, [r7, #4]
 800b300:	430a      	orrs	r2, r1
 800b302:	619a      	str	r2, [r3, #24]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800b304:	4a17      	ldr	r2, [pc, #92]	@ (800b364 <HAL_RTCEx_SetWakeUpTimer_IT+0x130>)
 800b306:	2380      	movs	r3, #128	@ 0x80
 800b308:	58d3      	ldr	r3, [r2, r3]
 800b30a:	4916      	ldr	r1, [pc, #88]	@ (800b364 <HAL_RTCEx_SetWakeUpTimer_IT+0x130>)
 800b30c:	2280      	movs	r2, #128	@ 0x80
 800b30e:	0312      	lsls	r2, r2, #12
 800b310:	4313      	orrs	r3, r2
 800b312:	2280      	movs	r2, #128	@ 0x80
 800b314:	508b      	str	r3, [r1, r2]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	699a      	ldr	r2, [r3, #24]
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	2180      	movs	r1, #128	@ 0x80
 800b322:	01c9      	lsls	r1, r1, #7
 800b324:	430a      	orrs	r2, r1
 800b326:	619a      	str	r2, [r3, #24]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	699a      	ldr	r2, [r3, #24]
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	2180      	movs	r1, #128	@ 0x80
 800b334:	00c9      	lsls	r1, r1, #3
 800b336:	430a      	orrs	r2, r1
 800b338:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	22ff      	movs	r2, #255	@ 0xff
 800b340:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	2229      	movs	r2, #41	@ 0x29
 800b346:	2101      	movs	r1, #1
 800b348:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	2228      	movs	r2, #40	@ 0x28
 800b34e:	2100      	movs	r1, #0
 800b350:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b352:	2300      	movs	r3, #0
}
 800b354:	0018      	movs	r0, r3
 800b356:	46bd      	mov	sp, r7
 800b358:	b006      	add	sp, #24
 800b35a:	bd80      	pop	{r7, pc}
 800b35c:	fffffbff 	.word	0xfffffbff
 800b360:	40002800 	.word	0x40002800
 800b364:	40021800 	.word	0x40021800

0800b368 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b082      	sub	sp, #8
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
    /* Get the pending status of the WAKEUPTIMER Interrupt */
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b376:	2204      	movs	r2, #4
 800b378:	4013      	ands	r3, r2
 800b37a:	d00b      	beq.n	800b394 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2c>
    {
      /* Clear the WAKEUPTIMER interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	2104      	movs	r1, #4
 800b388:	430a      	orrs	r2, r1
 800b38a:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call WakeUpTimerEvent registered Callback */
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      /* WAKEUPTIMER callback */
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	0018      	movs	r0, r3
 800b390:	f000 f808 	bl	800b3a4 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	2229      	movs	r2, #41	@ 0x29
 800b398:	2101      	movs	r1, #1
 800b39a:	5499      	strb	r1, [r3, r2]
}
 800b39c:	46c0      	nop			@ (mov r8, r8)
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	b002      	add	sp, #8
 800b3a2:	bd80      	pop	{r7, pc}

0800b3a4 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b082      	sub	sp, #8
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 800b3ac:	46c0      	nop			@ (mov r8, r8)
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	b002      	add	sp, #8
 800b3b2:	bd80      	pop	{r7, pc}

0800b3b4 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b082      	sub	sp, #8
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800b3bc:	46c0      	nop			@ (mov r8, r8)
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	b002      	add	sp, #8
 800b3c2:	bd80      	pop	{r7, pc}

0800b3c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	b084      	sub	sp, #16
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d101      	bne.n	800b3d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b3d2:	2301      	movs	r3, #1
 800b3d4:	e0a8      	b.n	800b528 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d109      	bne.n	800b3f2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	685a      	ldr	r2, [r3, #4]
 800b3e2:	2382      	movs	r3, #130	@ 0x82
 800b3e4:	005b      	lsls	r3, r3, #1
 800b3e6:	429a      	cmp	r2, r3
 800b3e8:	d009      	beq.n	800b3fe <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	61da      	str	r2, [r3, #28]
 800b3f0:	e005      	b.n	800b3fe <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	2200      	movs	r2, #0
 800b3f6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	2200      	movs	r2, #0
 800b402:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	225d      	movs	r2, #93	@ 0x5d
 800b408:	5c9b      	ldrb	r3, [r3, r2]
 800b40a:	b2db      	uxtb	r3, r3
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d107      	bne.n	800b420 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	225c      	movs	r2, #92	@ 0x5c
 800b414:	2100      	movs	r1, #0
 800b416:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	0018      	movs	r0, r3
 800b41c:	f7fc f8ba 	bl	8007594 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	225d      	movs	r2, #93	@ 0x5d
 800b424:	2102      	movs	r1, #2
 800b426:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	681a      	ldr	r2, [r3, #0]
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	2140      	movs	r1, #64	@ 0x40
 800b434:	438a      	bics	r2, r1
 800b436:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	68da      	ldr	r2, [r3, #12]
 800b43c:	23e0      	movs	r3, #224	@ 0xe0
 800b43e:	00db      	lsls	r3, r3, #3
 800b440:	429a      	cmp	r2, r3
 800b442:	d902      	bls.n	800b44a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800b444:	2300      	movs	r3, #0
 800b446:	60fb      	str	r3, [r7, #12]
 800b448:	e002      	b.n	800b450 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800b44a:	2380      	movs	r3, #128	@ 0x80
 800b44c:	015b      	lsls	r3, r3, #5
 800b44e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	68da      	ldr	r2, [r3, #12]
 800b454:	23f0      	movs	r3, #240	@ 0xf0
 800b456:	011b      	lsls	r3, r3, #4
 800b458:	429a      	cmp	r2, r3
 800b45a:	d008      	beq.n	800b46e <HAL_SPI_Init+0xaa>
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	68da      	ldr	r2, [r3, #12]
 800b460:	23e0      	movs	r3, #224	@ 0xe0
 800b462:	00db      	lsls	r3, r3, #3
 800b464:	429a      	cmp	r2, r3
 800b466:	d002      	beq.n	800b46e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	2200      	movs	r2, #0
 800b46c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	685a      	ldr	r2, [r3, #4]
 800b472:	2382      	movs	r3, #130	@ 0x82
 800b474:	005b      	lsls	r3, r3, #1
 800b476:	401a      	ands	r2, r3
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	6899      	ldr	r1, [r3, #8]
 800b47c:	2384      	movs	r3, #132	@ 0x84
 800b47e:	021b      	lsls	r3, r3, #8
 800b480:	400b      	ands	r3, r1
 800b482:	431a      	orrs	r2, r3
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	691b      	ldr	r3, [r3, #16]
 800b488:	2102      	movs	r1, #2
 800b48a:	400b      	ands	r3, r1
 800b48c:	431a      	orrs	r2, r3
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	695b      	ldr	r3, [r3, #20]
 800b492:	2101      	movs	r1, #1
 800b494:	400b      	ands	r3, r1
 800b496:	431a      	orrs	r2, r3
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	6999      	ldr	r1, [r3, #24]
 800b49c:	2380      	movs	r3, #128	@ 0x80
 800b49e:	009b      	lsls	r3, r3, #2
 800b4a0:	400b      	ands	r3, r1
 800b4a2:	431a      	orrs	r2, r3
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	69db      	ldr	r3, [r3, #28]
 800b4a8:	2138      	movs	r1, #56	@ 0x38
 800b4aa:	400b      	ands	r3, r1
 800b4ac:	431a      	orrs	r2, r3
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	6a1b      	ldr	r3, [r3, #32]
 800b4b2:	2180      	movs	r1, #128	@ 0x80
 800b4b4:	400b      	ands	r3, r1
 800b4b6:	431a      	orrs	r2, r3
 800b4b8:	0011      	movs	r1, r2
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b4be:	2380      	movs	r3, #128	@ 0x80
 800b4c0:	019b      	lsls	r3, r3, #6
 800b4c2:	401a      	ands	r2, r3
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	430a      	orrs	r2, r1
 800b4ca:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	699b      	ldr	r3, [r3, #24]
 800b4d0:	0c1b      	lsrs	r3, r3, #16
 800b4d2:	2204      	movs	r2, #4
 800b4d4:	401a      	ands	r2, r3
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4da:	2110      	movs	r1, #16
 800b4dc:	400b      	ands	r3, r1
 800b4de:	431a      	orrs	r2, r3
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b4e4:	2108      	movs	r1, #8
 800b4e6:	400b      	ands	r3, r1
 800b4e8:	431a      	orrs	r2, r3
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	68d9      	ldr	r1, [r3, #12]
 800b4ee:	23f0      	movs	r3, #240	@ 0xf0
 800b4f0:	011b      	lsls	r3, r3, #4
 800b4f2:	400b      	ands	r3, r1
 800b4f4:	431a      	orrs	r2, r3
 800b4f6:	0011      	movs	r1, r2
 800b4f8:	68fa      	ldr	r2, [r7, #12]
 800b4fa:	2380      	movs	r3, #128	@ 0x80
 800b4fc:	015b      	lsls	r3, r3, #5
 800b4fe:	401a      	ands	r2, r3
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	430a      	orrs	r2, r1
 800b506:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	69da      	ldr	r2, [r3, #28]
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	4907      	ldr	r1, [pc, #28]	@ (800b530 <HAL_SPI_Init+0x16c>)
 800b514:	400a      	ands	r2, r1
 800b516:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	2200      	movs	r2, #0
 800b51c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	225d      	movs	r2, #93	@ 0x5d
 800b522:	2101      	movs	r1, #1
 800b524:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b526:	2300      	movs	r3, #0
}
 800b528:	0018      	movs	r0, r3
 800b52a:	46bd      	mov	sp, r7
 800b52c:	b004      	add	sp, #16
 800b52e:	bd80      	pop	{r7, pc}
 800b530:	fffff7ff 	.word	0xfffff7ff

0800b534 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b534:	b580      	push	{r7, lr}
 800b536:	b088      	sub	sp, #32
 800b538:	af00      	add	r7, sp, #0
 800b53a:	60f8      	str	r0, [r7, #12]
 800b53c:	60b9      	str	r1, [r7, #8]
 800b53e:	603b      	str	r3, [r7, #0]
 800b540:	1dbb      	adds	r3, r7, #6
 800b542:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b544:	231f      	movs	r3, #31
 800b546:	18fb      	adds	r3, r7, r3
 800b548:	2200      	movs	r2, #0
 800b54a:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	225c      	movs	r2, #92	@ 0x5c
 800b550:	5c9b      	ldrb	r3, [r3, r2]
 800b552:	2b01      	cmp	r3, #1
 800b554:	d101      	bne.n	800b55a <HAL_SPI_Transmit+0x26>
 800b556:	2302      	movs	r3, #2
 800b558:	e147      	b.n	800b7ea <HAL_SPI_Transmit+0x2b6>
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	225c      	movs	r2, #92	@ 0x5c
 800b55e:	2101      	movs	r1, #1
 800b560:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b562:	f7fd f883 	bl	800866c <HAL_GetTick>
 800b566:	0003      	movs	r3, r0
 800b568:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800b56a:	2316      	movs	r3, #22
 800b56c:	18fb      	adds	r3, r7, r3
 800b56e:	1dba      	adds	r2, r7, #6
 800b570:	8812      	ldrh	r2, [r2, #0]
 800b572:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	225d      	movs	r2, #93	@ 0x5d
 800b578:	5c9b      	ldrb	r3, [r3, r2]
 800b57a:	b2db      	uxtb	r3, r3
 800b57c:	2b01      	cmp	r3, #1
 800b57e:	d004      	beq.n	800b58a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800b580:	231f      	movs	r3, #31
 800b582:	18fb      	adds	r3, r7, r3
 800b584:	2202      	movs	r2, #2
 800b586:	701a      	strb	r2, [r3, #0]
    goto error;
 800b588:	e128      	b.n	800b7dc <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 800b58a:	68bb      	ldr	r3, [r7, #8]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d003      	beq.n	800b598 <HAL_SPI_Transmit+0x64>
 800b590:	1dbb      	adds	r3, r7, #6
 800b592:	881b      	ldrh	r3, [r3, #0]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d104      	bne.n	800b5a2 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800b598:	231f      	movs	r3, #31
 800b59a:	18fb      	adds	r3, r7, r3
 800b59c:	2201      	movs	r2, #1
 800b59e:	701a      	strb	r2, [r3, #0]
    goto error;
 800b5a0:	e11c      	b.n	800b7dc <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	225d      	movs	r2, #93	@ 0x5d
 800b5a6:	2103      	movs	r1, #3
 800b5a8:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	68ba      	ldr	r2, [r7, #8]
 800b5b4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	1dba      	adds	r2, r7, #6
 800b5ba:	8812      	ldrh	r2, [r2, #0]
 800b5bc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	1dba      	adds	r2, r7, #6
 800b5c2:	8812      	ldrh	r2, [r2, #0]
 800b5c4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	2244      	movs	r2, #68	@ 0x44
 800b5d0:	2100      	movs	r1, #0
 800b5d2:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	2246      	movs	r2, #70	@ 0x46
 800b5d8:	2100      	movs	r1, #0
 800b5da:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	2200      	movs	r2, #0
 800b5e0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	2200      	movs	r2, #0
 800b5e6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	689a      	ldr	r2, [r3, #8]
 800b5ec:	2380      	movs	r3, #128	@ 0x80
 800b5ee:	021b      	lsls	r3, r3, #8
 800b5f0:	429a      	cmp	r2, r3
 800b5f2:	d110      	bne.n	800b616 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	681a      	ldr	r2, [r3, #0]
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	2140      	movs	r1, #64	@ 0x40
 800b600:	438a      	bics	r2, r1
 800b602:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	681a      	ldr	r2, [r3, #0]
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	2180      	movs	r1, #128	@ 0x80
 800b610:	01c9      	lsls	r1, r1, #7
 800b612:	430a      	orrs	r2, r1
 800b614:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	2240      	movs	r2, #64	@ 0x40
 800b61e:	4013      	ands	r3, r2
 800b620:	2b40      	cmp	r3, #64	@ 0x40
 800b622:	d007      	beq.n	800b634 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	681a      	ldr	r2, [r3, #0]
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	2140      	movs	r1, #64	@ 0x40
 800b630:	430a      	orrs	r2, r1
 800b632:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	68da      	ldr	r2, [r3, #12]
 800b638:	23e0      	movs	r3, #224	@ 0xe0
 800b63a:	00db      	lsls	r3, r3, #3
 800b63c:	429a      	cmp	r2, r3
 800b63e:	d952      	bls.n	800b6e6 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	685b      	ldr	r3, [r3, #4]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d004      	beq.n	800b652 <HAL_SPI_Transmit+0x11e>
 800b648:	2316      	movs	r3, #22
 800b64a:	18fb      	adds	r3, r7, r3
 800b64c:	881b      	ldrh	r3, [r3, #0]
 800b64e:	2b01      	cmp	r3, #1
 800b650:	d143      	bne.n	800b6da <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b656:	881a      	ldrh	r2, [r3, #0]
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b662:	1c9a      	adds	r2, r3, #2
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b66c:	b29b      	uxth	r3, r3
 800b66e:	3b01      	subs	r3, #1
 800b670:	b29a      	uxth	r2, r3
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b676:	e030      	b.n	800b6da <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	689b      	ldr	r3, [r3, #8]
 800b67e:	2202      	movs	r2, #2
 800b680:	4013      	ands	r3, r2
 800b682:	2b02      	cmp	r3, #2
 800b684:	d112      	bne.n	800b6ac <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b68a:	881a      	ldrh	r2, [r3, #0]
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b696:	1c9a      	adds	r2, r3, #2
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b6a0:	b29b      	uxth	r3, r3
 800b6a2:	3b01      	subs	r3, #1
 800b6a4:	b29a      	uxth	r2, r3
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800b6aa:	e016      	b.n	800b6da <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b6ac:	f7fc ffde 	bl	800866c <HAL_GetTick>
 800b6b0:	0002      	movs	r2, r0
 800b6b2:	69bb      	ldr	r3, [r7, #24]
 800b6b4:	1ad3      	subs	r3, r2, r3
 800b6b6:	683a      	ldr	r2, [r7, #0]
 800b6b8:	429a      	cmp	r2, r3
 800b6ba:	d802      	bhi.n	800b6c2 <HAL_SPI_Transmit+0x18e>
 800b6bc:	683b      	ldr	r3, [r7, #0]
 800b6be:	3301      	adds	r3, #1
 800b6c0:	d102      	bne.n	800b6c8 <HAL_SPI_Transmit+0x194>
 800b6c2:	683b      	ldr	r3, [r7, #0]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d108      	bne.n	800b6da <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 800b6c8:	231f      	movs	r3, #31
 800b6ca:	18fb      	adds	r3, r7, r3
 800b6cc:	2203      	movs	r2, #3
 800b6ce:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	225d      	movs	r2, #93	@ 0x5d
 800b6d4:	2101      	movs	r1, #1
 800b6d6:	5499      	strb	r1, [r3, r2]
          goto error;
 800b6d8:	e080      	b.n	800b7dc <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b6de:	b29b      	uxth	r3, r3
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d1c9      	bne.n	800b678 <HAL_SPI_Transmit+0x144>
 800b6e4:	e053      	b.n	800b78e <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	685b      	ldr	r3, [r3, #4]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d004      	beq.n	800b6f8 <HAL_SPI_Transmit+0x1c4>
 800b6ee:	2316      	movs	r3, #22
 800b6f0:	18fb      	adds	r3, r7, r3
 800b6f2:	881b      	ldrh	r3, [r3, #0]
 800b6f4:	2b01      	cmp	r3, #1
 800b6f6:	d145      	bne.n	800b784 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	330c      	adds	r3, #12
 800b702:	7812      	ldrb	r2, [r2, #0]
 800b704:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b70a:	1c5a      	adds	r2, r3, #1
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b714:	b29b      	uxth	r3, r3
 800b716:	3b01      	subs	r3, #1
 800b718:	b29a      	uxth	r2, r3
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800b71e:	e031      	b.n	800b784 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	689b      	ldr	r3, [r3, #8]
 800b726:	2202      	movs	r2, #2
 800b728:	4013      	ands	r3, r2
 800b72a:	2b02      	cmp	r3, #2
 800b72c:	d113      	bne.n	800b756 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	330c      	adds	r3, #12
 800b738:	7812      	ldrb	r2, [r2, #0]
 800b73a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b740:	1c5a      	adds	r2, r3, #1
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b74a:	b29b      	uxth	r3, r3
 800b74c:	3b01      	subs	r3, #1
 800b74e:	b29a      	uxth	r2, r3
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800b754:	e016      	b.n	800b784 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b756:	f7fc ff89 	bl	800866c <HAL_GetTick>
 800b75a:	0002      	movs	r2, r0
 800b75c:	69bb      	ldr	r3, [r7, #24]
 800b75e:	1ad3      	subs	r3, r2, r3
 800b760:	683a      	ldr	r2, [r7, #0]
 800b762:	429a      	cmp	r2, r3
 800b764:	d802      	bhi.n	800b76c <HAL_SPI_Transmit+0x238>
 800b766:	683b      	ldr	r3, [r7, #0]
 800b768:	3301      	adds	r3, #1
 800b76a:	d102      	bne.n	800b772 <HAL_SPI_Transmit+0x23e>
 800b76c:	683b      	ldr	r3, [r7, #0]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d108      	bne.n	800b784 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 800b772:	231f      	movs	r3, #31
 800b774:	18fb      	adds	r3, r7, r3
 800b776:	2203      	movs	r2, #3
 800b778:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	225d      	movs	r2, #93	@ 0x5d
 800b77e:	2101      	movs	r1, #1
 800b780:	5499      	strb	r1, [r3, r2]
          goto error;
 800b782:	e02b      	b.n	800b7dc <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b788:	b29b      	uxth	r3, r3
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d1c8      	bne.n	800b720 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b78e:	69ba      	ldr	r2, [r7, #24]
 800b790:	6839      	ldr	r1, [r7, #0]
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	0018      	movs	r0, r3
 800b796:	f000 f95d 	bl	800ba54 <SPI_EndRxTxTransaction>
 800b79a:	1e03      	subs	r3, r0, #0
 800b79c:	d002      	beq.n	800b7a4 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	2220      	movs	r2, #32
 800b7a2:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	689b      	ldr	r3, [r3, #8]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d10a      	bne.n	800b7c2 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	613b      	str	r3, [r7, #16]
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	68db      	ldr	r3, [r3, #12]
 800b7b6:	613b      	str	r3, [r7, #16]
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	689b      	ldr	r3, [r3, #8]
 800b7be:	613b      	str	r3, [r7, #16]
 800b7c0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d004      	beq.n	800b7d4 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 800b7ca:	231f      	movs	r3, #31
 800b7cc:	18fb      	adds	r3, r7, r3
 800b7ce:	2201      	movs	r2, #1
 800b7d0:	701a      	strb	r2, [r3, #0]
 800b7d2:	e003      	b.n	800b7dc <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	225d      	movs	r2, #93	@ 0x5d
 800b7d8:	2101      	movs	r1, #1
 800b7da:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	225c      	movs	r2, #92	@ 0x5c
 800b7e0:	2100      	movs	r1, #0
 800b7e2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800b7e4:	231f      	movs	r3, #31
 800b7e6:	18fb      	adds	r3, r7, r3
 800b7e8:	781b      	ldrb	r3, [r3, #0]
}
 800b7ea:	0018      	movs	r0, r3
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	b008      	add	sp, #32
 800b7f0:	bd80      	pop	{r7, pc}
	...

0800b7f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b088      	sub	sp, #32
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	60f8      	str	r0, [r7, #12]
 800b7fc:	60b9      	str	r1, [r7, #8]
 800b7fe:	603b      	str	r3, [r7, #0]
 800b800:	1dfb      	adds	r3, r7, #7
 800b802:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b804:	f7fc ff32 	bl	800866c <HAL_GetTick>
 800b808:	0002      	movs	r2, r0
 800b80a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b80c:	1a9b      	subs	r3, r3, r2
 800b80e:	683a      	ldr	r2, [r7, #0]
 800b810:	18d3      	adds	r3, r2, r3
 800b812:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b814:	f7fc ff2a 	bl	800866c <HAL_GetTick>
 800b818:	0003      	movs	r3, r0
 800b81a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b81c:	4b3a      	ldr	r3, [pc, #232]	@ (800b908 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	015b      	lsls	r3, r3, #5
 800b822:	0d1b      	lsrs	r3, r3, #20
 800b824:	69fa      	ldr	r2, [r7, #28]
 800b826:	4353      	muls	r3, r2
 800b828:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b82a:	e058      	b.n	800b8de <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b82c:	683b      	ldr	r3, [r7, #0]
 800b82e:	3301      	adds	r3, #1
 800b830:	d055      	beq.n	800b8de <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b832:	f7fc ff1b 	bl	800866c <HAL_GetTick>
 800b836:	0002      	movs	r2, r0
 800b838:	69bb      	ldr	r3, [r7, #24]
 800b83a:	1ad3      	subs	r3, r2, r3
 800b83c:	69fa      	ldr	r2, [r7, #28]
 800b83e:	429a      	cmp	r2, r3
 800b840:	d902      	bls.n	800b848 <SPI_WaitFlagStateUntilTimeout+0x54>
 800b842:	69fb      	ldr	r3, [r7, #28]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d142      	bne.n	800b8ce <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	685a      	ldr	r2, [r3, #4]
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	21e0      	movs	r1, #224	@ 0xe0
 800b854:	438a      	bics	r2, r1
 800b856:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	685a      	ldr	r2, [r3, #4]
 800b85c:	2382      	movs	r3, #130	@ 0x82
 800b85e:	005b      	lsls	r3, r3, #1
 800b860:	429a      	cmp	r2, r3
 800b862:	d113      	bne.n	800b88c <SPI_WaitFlagStateUntilTimeout+0x98>
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	689a      	ldr	r2, [r3, #8]
 800b868:	2380      	movs	r3, #128	@ 0x80
 800b86a:	021b      	lsls	r3, r3, #8
 800b86c:	429a      	cmp	r2, r3
 800b86e:	d005      	beq.n	800b87c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	689a      	ldr	r2, [r3, #8]
 800b874:	2380      	movs	r3, #128	@ 0x80
 800b876:	00db      	lsls	r3, r3, #3
 800b878:	429a      	cmp	r2, r3
 800b87a:	d107      	bne.n	800b88c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	681a      	ldr	r2, [r3, #0]
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	2140      	movs	r1, #64	@ 0x40
 800b888:	438a      	bics	r2, r1
 800b88a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b890:	2380      	movs	r3, #128	@ 0x80
 800b892:	019b      	lsls	r3, r3, #6
 800b894:	429a      	cmp	r2, r3
 800b896:	d110      	bne.n	800b8ba <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	681a      	ldr	r2, [r3, #0]
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	491a      	ldr	r1, [pc, #104]	@ (800b90c <SPI_WaitFlagStateUntilTimeout+0x118>)
 800b8a4:	400a      	ands	r2, r1
 800b8a6:	601a      	str	r2, [r3, #0]
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	681a      	ldr	r2, [r3, #0]
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	2180      	movs	r1, #128	@ 0x80
 800b8b4:	0189      	lsls	r1, r1, #6
 800b8b6:	430a      	orrs	r2, r1
 800b8b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	225d      	movs	r2, #93	@ 0x5d
 800b8be:	2101      	movs	r1, #1
 800b8c0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	225c      	movs	r2, #92	@ 0x5c
 800b8c6:	2100      	movs	r1, #0
 800b8c8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800b8ca:	2303      	movs	r3, #3
 800b8cc:	e017      	b.n	800b8fe <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b8ce:	697b      	ldr	r3, [r7, #20]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d101      	bne.n	800b8d8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b8d8:	697b      	ldr	r3, [r7, #20]
 800b8da:	3b01      	subs	r3, #1
 800b8dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	689b      	ldr	r3, [r3, #8]
 800b8e4:	68ba      	ldr	r2, [r7, #8]
 800b8e6:	4013      	ands	r3, r2
 800b8e8:	68ba      	ldr	r2, [r7, #8]
 800b8ea:	1ad3      	subs	r3, r2, r3
 800b8ec:	425a      	negs	r2, r3
 800b8ee:	4153      	adcs	r3, r2
 800b8f0:	b2db      	uxtb	r3, r3
 800b8f2:	001a      	movs	r2, r3
 800b8f4:	1dfb      	adds	r3, r7, #7
 800b8f6:	781b      	ldrb	r3, [r3, #0]
 800b8f8:	429a      	cmp	r2, r3
 800b8fa:	d197      	bne.n	800b82c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b8fc:	2300      	movs	r3, #0
}
 800b8fe:	0018      	movs	r0, r3
 800b900:	46bd      	mov	sp, r7
 800b902:	b008      	add	sp, #32
 800b904:	bd80      	pop	{r7, pc}
 800b906:	46c0      	nop			@ (mov r8, r8)
 800b908:	20000d38 	.word	0x20000d38
 800b90c:	ffffdfff 	.word	0xffffdfff

0800b910 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b910:	b580      	push	{r7, lr}
 800b912:	b08a      	sub	sp, #40	@ 0x28
 800b914:	af00      	add	r7, sp, #0
 800b916:	60f8      	str	r0, [r7, #12]
 800b918:	60b9      	str	r1, [r7, #8]
 800b91a:	607a      	str	r2, [r7, #4]
 800b91c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800b91e:	2317      	movs	r3, #23
 800b920:	18fb      	adds	r3, r7, r3
 800b922:	2200      	movs	r2, #0
 800b924:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800b926:	f7fc fea1 	bl	800866c <HAL_GetTick>
 800b92a:	0002      	movs	r2, r0
 800b92c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b92e:	1a9b      	subs	r3, r3, r2
 800b930:	683a      	ldr	r2, [r7, #0]
 800b932:	18d3      	adds	r3, r2, r3
 800b934:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800b936:	f7fc fe99 	bl	800866c <HAL_GetTick>
 800b93a:	0003      	movs	r3, r0
 800b93c:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	330c      	adds	r3, #12
 800b944:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800b946:	4b41      	ldr	r3, [pc, #260]	@ (800ba4c <SPI_WaitFifoStateUntilTimeout+0x13c>)
 800b948:	681a      	ldr	r2, [r3, #0]
 800b94a:	0013      	movs	r3, r2
 800b94c:	009b      	lsls	r3, r3, #2
 800b94e:	189b      	adds	r3, r3, r2
 800b950:	00da      	lsls	r2, r3, #3
 800b952:	1ad3      	subs	r3, r2, r3
 800b954:	0d1b      	lsrs	r3, r3, #20
 800b956:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b958:	4353      	muls	r3, r2
 800b95a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800b95c:	e068      	b.n	800ba30 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800b95e:	68ba      	ldr	r2, [r7, #8]
 800b960:	23c0      	movs	r3, #192	@ 0xc0
 800b962:	00db      	lsls	r3, r3, #3
 800b964:	429a      	cmp	r2, r3
 800b966:	d10a      	bne.n	800b97e <SPI_WaitFifoStateUntilTimeout+0x6e>
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d107      	bne.n	800b97e <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800b96e:	69fb      	ldr	r3, [r7, #28]
 800b970:	781b      	ldrb	r3, [r3, #0]
 800b972:	b2da      	uxtb	r2, r3
 800b974:	2117      	movs	r1, #23
 800b976:	187b      	adds	r3, r7, r1
 800b978:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800b97a:	187b      	adds	r3, r7, r1
 800b97c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800b97e:	683b      	ldr	r3, [r7, #0]
 800b980:	3301      	adds	r3, #1
 800b982:	d055      	beq.n	800ba30 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b984:	f7fc fe72 	bl	800866c <HAL_GetTick>
 800b988:	0002      	movs	r2, r0
 800b98a:	6a3b      	ldr	r3, [r7, #32]
 800b98c:	1ad3      	subs	r3, r2, r3
 800b98e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b990:	429a      	cmp	r2, r3
 800b992:	d902      	bls.n	800b99a <SPI_WaitFifoStateUntilTimeout+0x8a>
 800b994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b996:	2b00      	cmp	r3, #0
 800b998:	d142      	bne.n	800ba20 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	685a      	ldr	r2, [r3, #4]
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	21e0      	movs	r1, #224	@ 0xe0
 800b9a6:	438a      	bics	r2, r1
 800b9a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	685a      	ldr	r2, [r3, #4]
 800b9ae:	2382      	movs	r3, #130	@ 0x82
 800b9b0:	005b      	lsls	r3, r3, #1
 800b9b2:	429a      	cmp	r2, r3
 800b9b4:	d113      	bne.n	800b9de <SPI_WaitFifoStateUntilTimeout+0xce>
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	689a      	ldr	r2, [r3, #8]
 800b9ba:	2380      	movs	r3, #128	@ 0x80
 800b9bc:	021b      	lsls	r3, r3, #8
 800b9be:	429a      	cmp	r2, r3
 800b9c0:	d005      	beq.n	800b9ce <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	689a      	ldr	r2, [r3, #8]
 800b9c6:	2380      	movs	r3, #128	@ 0x80
 800b9c8:	00db      	lsls	r3, r3, #3
 800b9ca:	429a      	cmp	r2, r3
 800b9cc:	d107      	bne.n	800b9de <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	681a      	ldr	r2, [r3, #0]
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	2140      	movs	r1, #64	@ 0x40
 800b9da:	438a      	bics	r2, r1
 800b9dc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b9e2:	2380      	movs	r3, #128	@ 0x80
 800b9e4:	019b      	lsls	r3, r3, #6
 800b9e6:	429a      	cmp	r2, r3
 800b9e8:	d110      	bne.n	800ba0c <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	681a      	ldr	r2, [r3, #0]
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	4916      	ldr	r1, [pc, #88]	@ (800ba50 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800b9f6:	400a      	ands	r2, r1
 800b9f8:	601a      	str	r2, [r3, #0]
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	681a      	ldr	r2, [r3, #0]
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	2180      	movs	r1, #128	@ 0x80
 800ba06:	0189      	lsls	r1, r1, #6
 800ba08:	430a      	orrs	r2, r1
 800ba0a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	225d      	movs	r2, #93	@ 0x5d
 800ba10:	2101      	movs	r1, #1
 800ba12:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	225c      	movs	r2, #92	@ 0x5c
 800ba18:	2100      	movs	r1, #0
 800ba1a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800ba1c:	2303      	movs	r3, #3
 800ba1e:	e010      	b.n	800ba42 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800ba20:	69bb      	ldr	r3, [r7, #24]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d101      	bne.n	800ba2a <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800ba26:	2300      	movs	r3, #0
 800ba28:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800ba2a:	69bb      	ldr	r3, [r7, #24]
 800ba2c:	3b01      	subs	r3, #1
 800ba2e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	689b      	ldr	r3, [r3, #8]
 800ba36:	68ba      	ldr	r2, [r7, #8]
 800ba38:	4013      	ands	r3, r2
 800ba3a:	687a      	ldr	r2, [r7, #4]
 800ba3c:	429a      	cmp	r2, r3
 800ba3e:	d18e      	bne.n	800b95e <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800ba40:	2300      	movs	r3, #0
}
 800ba42:	0018      	movs	r0, r3
 800ba44:	46bd      	mov	sp, r7
 800ba46:	b00a      	add	sp, #40	@ 0x28
 800ba48:	bd80      	pop	{r7, pc}
 800ba4a:	46c0      	nop			@ (mov r8, r8)
 800ba4c:	20000d38 	.word	0x20000d38
 800ba50:	ffffdfff 	.word	0xffffdfff

0800ba54 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b086      	sub	sp, #24
 800ba58:	af02      	add	r7, sp, #8
 800ba5a:	60f8      	str	r0, [r7, #12]
 800ba5c:	60b9      	str	r1, [r7, #8]
 800ba5e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ba60:	68ba      	ldr	r2, [r7, #8]
 800ba62:	23c0      	movs	r3, #192	@ 0xc0
 800ba64:	0159      	lsls	r1, r3, #5
 800ba66:	68f8      	ldr	r0, [r7, #12]
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	9300      	str	r3, [sp, #0]
 800ba6c:	0013      	movs	r3, r2
 800ba6e:	2200      	movs	r2, #0
 800ba70:	f7ff ff4e 	bl	800b910 <SPI_WaitFifoStateUntilTimeout>
 800ba74:	1e03      	subs	r3, r0, #0
 800ba76:	d007      	beq.n	800ba88 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ba7c:	2220      	movs	r2, #32
 800ba7e:	431a      	orrs	r2, r3
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800ba84:	2303      	movs	r3, #3
 800ba86:	e027      	b.n	800bad8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ba88:	68ba      	ldr	r2, [r7, #8]
 800ba8a:	68f8      	ldr	r0, [r7, #12]
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	9300      	str	r3, [sp, #0]
 800ba90:	0013      	movs	r3, r2
 800ba92:	2200      	movs	r2, #0
 800ba94:	2180      	movs	r1, #128	@ 0x80
 800ba96:	f7ff fead 	bl	800b7f4 <SPI_WaitFlagStateUntilTimeout>
 800ba9a:	1e03      	subs	r3, r0, #0
 800ba9c:	d007      	beq.n	800baae <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800baa2:	2220      	movs	r2, #32
 800baa4:	431a      	orrs	r2, r3
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800baaa:	2303      	movs	r3, #3
 800baac:	e014      	b.n	800bad8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800baae:	68ba      	ldr	r2, [r7, #8]
 800bab0:	23c0      	movs	r3, #192	@ 0xc0
 800bab2:	00d9      	lsls	r1, r3, #3
 800bab4:	68f8      	ldr	r0, [r7, #12]
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	9300      	str	r3, [sp, #0]
 800baba:	0013      	movs	r3, r2
 800babc:	2200      	movs	r2, #0
 800babe:	f7ff ff27 	bl	800b910 <SPI_WaitFifoStateUntilTimeout>
 800bac2:	1e03      	subs	r3, r0, #0
 800bac4:	d007      	beq.n	800bad6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800baca:	2220      	movs	r2, #32
 800bacc:	431a      	orrs	r2, r3
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800bad2:	2303      	movs	r3, #3
 800bad4:	e000      	b.n	800bad8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800bad6:	2300      	movs	r3, #0
}
 800bad8:	0018      	movs	r0, r3
 800bada:	46bd      	mov	sp, r7
 800badc:	b004      	add	sp, #16
 800bade:	bd80      	pop	{r7, pc}

0800bae0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	b082      	sub	sp, #8
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	2b00      	cmp	r3, #0
 800baec:	d101      	bne.n	800baf2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800baee:	2301      	movs	r3, #1
 800baf0:	e04a      	b.n	800bb88 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	223d      	movs	r2, #61	@ 0x3d
 800baf6:	5c9b      	ldrb	r3, [r3, r2]
 800baf8:	b2db      	uxtb	r3, r3
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d107      	bne.n	800bb0e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	223c      	movs	r2, #60	@ 0x3c
 800bb02:	2100      	movs	r1, #0
 800bb04:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	0018      	movs	r0, r3
 800bb0a:	f7fb fdb1 	bl	8007670 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	223d      	movs	r2, #61	@ 0x3d
 800bb12:	2102      	movs	r1, #2
 800bb14:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	681a      	ldr	r2, [r3, #0]
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	3304      	adds	r3, #4
 800bb1e:	0019      	movs	r1, r3
 800bb20:	0010      	movs	r0, r2
 800bb22:	f000 fb11 	bl	800c148 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	2248      	movs	r2, #72	@ 0x48
 800bb2a:	2101      	movs	r1, #1
 800bb2c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	223e      	movs	r2, #62	@ 0x3e
 800bb32:	2101      	movs	r1, #1
 800bb34:	5499      	strb	r1, [r3, r2]
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	223f      	movs	r2, #63	@ 0x3f
 800bb3a:	2101      	movs	r1, #1
 800bb3c:	5499      	strb	r1, [r3, r2]
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	2240      	movs	r2, #64	@ 0x40
 800bb42:	2101      	movs	r1, #1
 800bb44:	5499      	strb	r1, [r3, r2]
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	2241      	movs	r2, #65	@ 0x41
 800bb4a:	2101      	movs	r1, #1
 800bb4c:	5499      	strb	r1, [r3, r2]
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	2242      	movs	r2, #66	@ 0x42
 800bb52:	2101      	movs	r1, #1
 800bb54:	5499      	strb	r1, [r3, r2]
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	2243      	movs	r2, #67	@ 0x43
 800bb5a:	2101      	movs	r1, #1
 800bb5c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	2244      	movs	r2, #68	@ 0x44
 800bb62:	2101      	movs	r1, #1
 800bb64:	5499      	strb	r1, [r3, r2]
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	2245      	movs	r2, #69	@ 0x45
 800bb6a:	2101      	movs	r1, #1
 800bb6c:	5499      	strb	r1, [r3, r2]
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	2246      	movs	r2, #70	@ 0x46
 800bb72:	2101      	movs	r1, #1
 800bb74:	5499      	strb	r1, [r3, r2]
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	2247      	movs	r2, #71	@ 0x47
 800bb7a:	2101      	movs	r1, #1
 800bb7c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	223d      	movs	r2, #61	@ 0x3d
 800bb82:	2101      	movs	r1, #1
 800bb84:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800bb86:	2300      	movs	r3, #0
}
 800bb88:	0018      	movs	r0, r3
 800bb8a:	46bd      	mov	sp, r7
 800bb8c:	b002      	add	sp, #8
 800bb8e:	bd80      	pop	{r7, pc}

0800bb90 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b082      	sub	sp, #8
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d101      	bne.n	800bba2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800bb9e:	2301      	movs	r3, #1
 800bba0:	e04a      	b.n	800bc38 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	223d      	movs	r2, #61	@ 0x3d
 800bba6:	5c9b      	ldrb	r3, [r3, r2]
 800bba8:	b2db      	uxtb	r3, r3
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d107      	bne.n	800bbbe <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	223c      	movs	r2, #60	@ 0x3c
 800bbb2:	2100      	movs	r1, #0
 800bbb4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	0018      	movs	r0, r3
 800bbba:	f000 f841 	bl	800bc40 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	223d      	movs	r2, #61	@ 0x3d
 800bbc2:	2102      	movs	r1, #2
 800bbc4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	681a      	ldr	r2, [r3, #0]
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	3304      	adds	r3, #4
 800bbce:	0019      	movs	r1, r3
 800bbd0:	0010      	movs	r0, r2
 800bbd2:	f000 fab9 	bl	800c148 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	2248      	movs	r2, #72	@ 0x48
 800bbda:	2101      	movs	r1, #1
 800bbdc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	223e      	movs	r2, #62	@ 0x3e
 800bbe2:	2101      	movs	r1, #1
 800bbe4:	5499      	strb	r1, [r3, r2]
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	223f      	movs	r2, #63	@ 0x3f
 800bbea:	2101      	movs	r1, #1
 800bbec:	5499      	strb	r1, [r3, r2]
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	2240      	movs	r2, #64	@ 0x40
 800bbf2:	2101      	movs	r1, #1
 800bbf4:	5499      	strb	r1, [r3, r2]
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	2241      	movs	r2, #65	@ 0x41
 800bbfa:	2101      	movs	r1, #1
 800bbfc:	5499      	strb	r1, [r3, r2]
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	2242      	movs	r2, #66	@ 0x42
 800bc02:	2101      	movs	r1, #1
 800bc04:	5499      	strb	r1, [r3, r2]
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	2243      	movs	r2, #67	@ 0x43
 800bc0a:	2101      	movs	r1, #1
 800bc0c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	2244      	movs	r2, #68	@ 0x44
 800bc12:	2101      	movs	r1, #1
 800bc14:	5499      	strb	r1, [r3, r2]
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	2245      	movs	r2, #69	@ 0x45
 800bc1a:	2101      	movs	r1, #1
 800bc1c:	5499      	strb	r1, [r3, r2]
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	2246      	movs	r2, #70	@ 0x46
 800bc22:	2101      	movs	r1, #1
 800bc24:	5499      	strb	r1, [r3, r2]
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	2247      	movs	r2, #71	@ 0x47
 800bc2a:	2101      	movs	r1, #1
 800bc2c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	223d      	movs	r2, #61	@ 0x3d
 800bc32:	2101      	movs	r1, #1
 800bc34:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800bc36:	2300      	movs	r3, #0
}
 800bc38:	0018      	movs	r0, r3
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	b002      	add	sp, #8
 800bc3e:	bd80      	pop	{r7, pc}

0800bc40 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b082      	sub	sp, #8
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800bc48:	46c0      	nop			@ (mov r8, r8)
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	b002      	add	sp, #8
 800bc4e:	bd80      	pop	{r7, pc}

0800bc50 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bc50:	b580      	push	{r7, lr}
 800bc52:	b084      	sub	sp, #16
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]
 800bc58:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800bc5a:	683b      	ldr	r3, [r7, #0]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d108      	bne.n	800bc72 <HAL_TIM_PWM_Start+0x22>
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	223e      	movs	r2, #62	@ 0x3e
 800bc64:	5c9b      	ldrb	r3, [r3, r2]
 800bc66:	b2db      	uxtb	r3, r3
 800bc68:	3b01      	subs	r3, #1
 800bc6a:	1e5a      	subs	r2, r3, #1
 800bc6c:	4193      	sbcs	r3, r2
 800bc6e:	b2db      	uxtb	r3, r3
 800bc70:	e037      	b.n	800bce2 <HAL_TIM_PWM_Start+0x92>
 800bc72:	683b      	ldr	r3, [r7, #0]
 800bc74:	2b04      	cmp	r3, #4
 800bc76:	d108      	bne.n	800bc8a <HAL_TIM_PWM_Start+0x3a>
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	223f      	movs	r2, #63	@ 0x3f
 800bc7c:	5c9b      	ldrb	r3, [r3, r2]
 800bc7e:	b2db      	uxtb	r3, r3
 800bc80:	3b01      	subs	r3, #1
 800bc82:	1e5a      	subs	r2, r3, #1
 800bc84:	4193      	sbcs	r3, r2
 800bc86:	b2db      	uxtb	r3, r3
 800bc88:	e02b      	b.n	800bce2 <HAL_TIM_PWM_Start+0x92>
 800bc8a:	683b      	ldr	r3, [r7, #0]
 800bc8c:	2b08      	cmp	r3, #8
 800bc8e:	d108      	bne.n	800bca2 <HAL_TIM_PWM_Start+0x52>
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	2240      	movs	r2, #64	@ 0x40
 800bc94:	5c9b      	ldrb	r3, [r3, r2]
 800bc96:	b2db      	uxtb	r3, r3
 800bc98:	3b01      	subs	r3, #1
 800bc9a:	1e5a      	subs	r2, r3, #1
 800bc9c:	4193      	sbcs	r3, r2
 800bc9e:	b2db      	uxtb	r3, r3
 800bca0:	e01f      	b.n	800bce2 <HAL_TIM_PWM_Start+0x92>
 800bca2:	683b      	ldr	r3, [r7, #0]
 800bca4:	2b0c      	cmp	r3, #12
 800bca6:	d108      	bne.n	800bcba <HAL_TIM_PWM_Start+0x6a>
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	2241      	movs	r2, #65	@ 0x41
 800bcac:	5c9b      	ldrb	r3, [r3, r2]
 800bcae:	b2db      	uxtb	r3, r3
 800bcb0:	3b01      	subs	r3, #1
 800bcb2:	1e5a      	subs	r2, r3, #1
 800bcb4:	4193      	sbcs	r3, r2
 800bcb6:	b2db      	uxtb	r3, r3
 800bcb8:	e013      	b.n	800bce2 <HAL_TIM_PWM_Start+0x92>
 800bcba:	683b      	ldr	r3, [r7, #0]
 800bcbc:	2b10      	cmp	r3, #16
 800bcbe:	d108      	bne.n	800bcd2 <HAL_TIM_PWM_Start+0x82>
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	2242      	movs	r2, #66	@ 0x42
 800bcc4:	5c9b      	ldrb	r3, [r3, r2]
 800bcc6:	b2db      	uxtb	r3, r3
 800bcc8:	3b01      	subs	r3, #1
 800bcca:	1e5a      	subs	r2, r3, #1
 800bccc:	4193      	sbcs	r3, r2
 800bcce:	b2db      	uxtb	r3, r3
 800bcd0:	e007      	b.n	800bce2 <HAL_TIM_PWM_Start+0x92>
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	2243      	movs	r2, #67	@ 0x43
 800bcd6:	5c9b      	ldrb	r3, [r3, r2]
 800bcd8:	b2db      	uxtb	r3, r3
 800bcda:	3b01      	subs	r3, #1
 800bcdc:	1e5a      	subs	r2, r3, #1
 800bcde:	4193      	sbcs	r3, r2
 800bce0:	b2db      	uxtb	r3, r3
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d001      	beq.n	800bcea <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800bce6:	2301      	movs	r3, #1
 800bce8:	e090      	b.n	800be0c <HAL_TIM_PWM_Start+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800bcea:	683b      	ldr	r3, [r7, #0]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d104      	bne.n	800bcfa <HAL_TIM_PWM_Start+0xaa>
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	223e      	movs	r2, #62	@ 0x3e
 800bcf4:	2102      	movs	r1, #2
 800bcf6:	5499      	strb	r1, [r3, r2]
 800bcf8:	e023      	b.n	800bd42 <HAL_TIM_PWM_Start+0xf2>
 800bcfa:	683b      	ldr	r3, [r7, #0]
 800bcfc:	2b04      	cmp	r3, #4
 800bcfe:	d104      	bne.n	800bd0a <HAL_TIM_PWM_Start+0xba>
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	223f      	movs	r2, #63	@ 0x3f
 800bd04:	2102      	movs	r1, #2
 800bd06:	5499      	strb	r1, [r3, r2]
 800bd08:	e01b      	b.n	800bd42 <HAL_TIM_PWM_Start+0xf2>
 800bd0a:	683b      	ldr	r3, [r7, #0]
 800bd0c:	2b08      	cmp	r3, #8
 800bd0e:	d104      	bne.n	800bd1a <HAL_TIM_PWM_Start+0xca>
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	2240      	movs	r2, #64	@ 0x40
 800bd14:	2102      	movs	r1, #2
 800bd16:	5499      	strb	r1, [r3, r2]
 800bd18:	e013      	b.n	800bd42 <HAL_TIM_PWM_Start+0xf2>
 800bd1a:	683b      	ldr	r3, [r7, #0]
 800bd1c:	2b0c      	cmp	r3, #12
 800bd1e:	d104      	bne.n	800bd2a <HAL_TIM_PWM_Start+0xda>
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	2241      	movs	r2, #65	@ 0x41
 800bd24:	2102      	movs	r1, #2
 800bd26:	5499      	strb	r1, [r3, r2]
 800bd28:	e00b      	b.n	800bd42 <HAL_TIM_PWM_Start+0xf2>
 800bd2a:	683b      	ldr	r3, [r7, #0]
 800bd2c:	2b10      	cmp	r3, #16
 800bd2e:	d104      	bne.n	800bd3a <HAL_TIM_PWM_Start+0xea>
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	2242      	movs	r2, #66	@ 0x42
 800bd34:	2102      	movs	r1, #2
 800bd36:	5499      	strb	r1, [r3, r2]
 800bd38:	e003      	b.n	800bd42 <HAL_TIM_PWM_Start+0xf2>
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	2243      	movs	r2, #67	@ 0x43
 800bd3e:	2102      	movs	r1, #2
 800bd40:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	6839      	ldr	r1, [r7, #0]
 800bd48:	2201      	movs	r2, #1
 800bd4a:	0018      	movs	r0, r3
 800bd4c:	f000 fd58 	bl	800c800 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	4a2f      	ldr	r2, [pc, #188]	@ (800be14 <HAL_TIM_PWM_Start+0x1c4>)
 800bd56:	4293      	cmp	r3, r2
 800bd58:	d00e      	beq.n	800bd78 <HAL_TIM_PWM_Start+0x128>
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	4a2e      	ldr	r2, [pc, #184]	@ (800be18 <HAL_TIM_PWM_Start+0x1c8>)
 800bd60:	4293      	cmp	r3, r2
 800bd62:	d009      	beq.n	800bd78 <HAL_TIM_PWM_Start+0x128>
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	4a2c      	ldr	r2, [pc, #176]	@ (800be1c <HAL_TIM_PWM_Start+0x1cc>)
 800bd6a:	4293      	cmp	r3, r2
 800bd6c:	d004      	beq.n	800bd78 <HAL_TIM_PWM_Start+0x128>
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	4a2b      	ldr	r2, [pc, #172]	@ (800be20 <HAL_TIM_PWM_Start+0x1d0>)
 800bd74:	4293      	cmp	r3, r2
 800bd76:	d101      	bne.n	800bd7c <HAL_TIM_PWM_Start+0x12c>
 800bd78:	2301      	movs	r3, #1
 800bd7a:	e000      	b.n	800bd7e <HAL_TIM_PWM_Start+0x12e>
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d008      	beq.n	800bd94 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	2180      	movs	r1, #128	@ 0x80
 800bd8e:	0209      	lsls	r1, r1, #8
 800bd90:	430a      	orrs	r2, r1
 800bd92:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	4a1e      	ldr	r2, [pc, #120]	@ (800be14 <HAL_TIM_PWM_Start+0x1c4>)
 800bd9a:	4293      	cmp	r3, r2
 800bd9c:	d014      	beq.n	800bdc8 <HAL_TIM_PWM_Start+0x178>
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	681a      	ldr	r2, [r3, #0]
 800bda2:	2380      	movs	r3, #128	@ 0x80
 800bda4:	05db      	lsls	r3, r3, #23
 800bda6:	429a      	cmp	r2, r3
 800bda8:	d00e      	beq.n	800bdc8 <HAL_TIM_PWM_Start+0x178>
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	4a1d      	ldr	r2, [pc, #116]	@ (800be24 <HAL_TIM_PWM_Start+0x1d4>)
 800bdb0:	4293      	cmp	r3, r2
 800bdb2:	d009      	beq.n	800bdc8 <HAL_TIM_PWM_Start+0x178>
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	4a1b      	ldr	r2, [pc, #108]	@ (800be28 <HAL_TIM_PWM_Start+0x1d8>)
 800bdba:	4293      	cmp	r3, r2
 800bdbc:	d004      	beq.n	800bdc8 <HAL_TIM_PWM_Start+0x178>
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	4a15      	ldr	r2, [pc, #84]	@ (800be18 <HAL_TIM_PWM_Start+0x1c8>)
 800bdc4:	4293      	cmp	r3, r2
 800bdc6:	d116      	bne.n	800bdf6 <HAL_TIM_PWM_Start+0x1a6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	689b      	ldr	r3, [r3, #8]
 800bdce:	4a17      	ldr	r2, [pc, #92]	@ (800be2c <HAL_TIM_PWM_Start+0x1dc>)
 800bdd0:	4013      	ands	r3, r2
 800bdd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	2b06      	cmp	r3, #6
 800bdd8:	d016      	beq.n	800be08 <HAL_TIM_PWM_Start+0x1b8>
 800bdda:	68fa      	ldr	r2, [r7, #12]
 800bddc:	2380      	movs	r3, #128	@ 0x80
 800bdde:	025b      	lsls	r3, r3, #9
 800bde0:	429a      	cmp	r2, r3
 800bde2:	d011      	beq.n	800be08 <HAL_TIM_PWM_Start+0x1b8>
    {
      __HAL_TIM_ENABLE(htim);
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	681a      	ldr	r2, [r3, #0]
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	2101      	movs	r1, #1
 800bdf0:	430a      	orrs	r2, r1
 800bdf2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bdf4:	e008      	b.n	800be08 <HAL_TIM_PWM_Start+0x1b8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	681a      	ldr	r2, [r3, #0]
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	2101      	movs	r1, #1
 800be02:	430a      	orrs	r2, r1
 800be04:	601a      	str	r2, [r3, #0]
 800be06:	e000      	b.n	800be0a <HAL_TIM_PWM_Start+0x1ba>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800be08:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800be0a:	2300      	movs	r3, #0
}
 800be0c:	0018      	movs	r0, r3
 800be0e:	46bd      	mov	sp, r7
 800be10:	b004      	add	sp, #16
 800be12:	bd80      	pop	{r7, pc}
 800be14:	40012c00 	.word	0x40012c00
 800be18:	40014000 	.word	0x40014000
 800be1c:	40014400 	.word	0x40014400
 800be20:	40014800 	.word	0x40014800
 800be24:	40000400 	.word	0x40000400
 800be28:	40000800 	.word	0x40000800
 800be2c:	00010007 	.word	0x00010007

0800be30 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800be30:	b580      	push	{r7, lr}
 800be32:	b082      	sub	sp, #8
 800be34:	af00      	add	r7, sp, #0
 800be36:	6078      	str	r0, [r7, #4]
 800be38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	6839      	ldr	r1, [r7, #0]
 800be40:	2200      	movs	r2, #0
 800be42:	0018      	movs	r0, r3
 800be44:	f000 fcdc 	bl	800c800 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	4a37      	ldr	r2, [pc, #220]	@ (800bf2c <HAL_TIM_PWM_Stop+0xfc>)
 800be4e:	4293      	cmp	r3, r2
 800be50:	d00e      	beq.n	800be70 <HAL_TIM_PWM_Stop+0x40>
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	4a36      	ldr	r2, [pc, #216]	@ (800bf30 <HAL_TIM_PWM_Stop+0x100>)
 800be58:	4293      	cmp	r3, r2
 800be5a:	d009      	beq.n	800be70 <HAL_TIM_PWM_Stop+0x40>
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	4a34      	ldr	r2, [pc, #208]	@ (800bf34 <HAL_TIM_PWM_Stop+0x104>)
 800be62:	4293      	cmp	r3, r2
 800be64:	d004      	beq.n	800be70 <HAL_TIM_PWM_Stop+0x40>
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	4a33      	ldr	r2, [pc, #204]	@ (800bf38 <HAL_TIM_PWM_Stop+0x108>)
 800be6c:	4293      	cmp	r3, r2
 800be6e:	d101      	bne.n	800be74 <HAL_TIM_PWM_Stop+0x44>
 800be70:	2301      	movs	r3, #1
 800be72:	e000      	b.n	800be76 <HAL_TIM_PWM_Stop+0x46>
 800be74:	2300      	movs	r3, #0
 800be76:	2b00      	cmp	r3, #0
 800be78:	d013      	beq.n	800bea2 <HAL_TIM_PWM_Stop+0x72>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	6a1b      	ldr	r3, [r3, #32]
 800be80:	4a2e      	ldr	r2, [pc, #184]	@ (800bf3c <HAL_TIM_PWM_Stop+0x10c>)
 800be82:	4013      	ands	r3, r2
 800be84:	d10d      	bne.n	800bea2 <HAL_TIM_PWM_Stop+0x72>
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	6a1b      	ldr	r3, [r3, #32]
 800be8c:	4a2c      	ldr	r2, [pc, #176]	@ (800bf40 <HAL_TIM_PWM_Stop+0x110>)
 800be8e:	4013      	ands	r3, r2
 800be90:	d107      	bne.n	800bea2 <HAL_TIM_PWM_Stop+0x72>
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	4929      	ldr	r1, [pc, #164]	@ (800bf44 <HAL_TIM_PWM_Stop+0x114>)
 800be9e:	400a      	ands	r2, r1
 800bea0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	6a1b      	ldr	r3, [r3, #32]
 800bea8:	4a24      	ldr	r2, [pc, #144]	@ (800bf3c <HAL_TIM_PWM_Stop+0x10c>)
 800beaa:	4013      	ands	r3, r2
 800beac:	d10d      	bne.n	800beca <HAL_TIM_PWM_Stop+0x9a>
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	6a1b      	ldr	r3, [r3, #32]
 800beb4:	4a22      	ldr	r2, [pc, #136]	@ (800bf40 <HAL_TIM_PWM_Stop+0x110>)
 800beb6:	4013      	ands	r3, r2
 800beb8:	d107      	bne.n	800beca <HAL_TIM_PWM_Stop+0x9a>
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	681a      	ldr	r2, [r3, #0]
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	2101      	movs	r1, #1
 800bec6:	438a      	bics	r2, r1
 800bec8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800beca:	683b      	ldr	r3, [r7, #0]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d104      	bne.n	800beda <HAL_TIM_PWM_Stop+0xaa>
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	223e      	movs	r2, #62	@ 0x3e
 800bed4:	2101      	movs	r1, #1
 800bed6:	5499      	strb	r1, [r3, r2]
 800bed8:	e023      	b.n	800bf22 <HAL_TIM_PWM_Stop+0xf2>
 800beda:	683b      	ldr	r3, [r7, #0]
 800bedc:	2b04      	cmp	r3, #4
 800bede:	d104      	bne.n	800beea <HAL_TIM_PWM_Stop+0xba>
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	223f      	movs	r2, #63	@ 0x3f
 800bee4:	2101      	movs	r1, #1
 800bee6:	5499      	strb	r1, [r3, r2]
 800bee8:	e01b      	b.n	800bf22 <HAL_TIM_PWM_Stop+0xf2>
 800beea:	683b      	ldr	r3, [r7, #0]
 800beec:	2b08      	cmp	r3, #8
 800beee:	d104      	bne.n	800befa <HAL_TIM_PWM_Stop+0xca>
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	2240      	movs	r2, #64	@ 0x40
 800bef4:	2101      	movs	r1, #1
 800bef6:	5499      	strb	r1, [r3, r2]
 800bef8:	e013      	b.n	800bf22 <HAL_TIM_PWM_Stop+0xf2>
 800befa:	683b      	ldr	r3, [r7, #0]
 800befc:	2b0c      	cmp	r3, #12
 800befe:	d104      	bne.n	800bf0a <HAL_TIM_PWM_Stop+0xda>
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	2241      	movs	r2, #65	@ 0x41
 800bf04:	2101      	movs	r1, #1
 800bf06:	5499      	strb	r1, [r3, r2]
 800bf08:	e00b      	b.n	800bf22 <HAL_TIM_PWM_Stop+0xf2>
 800bf0a:	683b      	ldr	r3, [r7, #0]
 800bf0c:	2b10      	cmp	r3, #16
 800bf0e:	d104      	bne.n	800bf1a <HAL_TIM_PWM_Stop+0xea>
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	2242      	movs	r2, #66	@ 0x42
 800bf14:	2101      	movs	r1, #1
 800bf16:	5499      	strb	r1, [r3, r2]
 800bf18:	e003      	b.n	800bf22 <HAL_TIM_PWM_Stop+0xf2>
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	2243      	movs	r2, #67	@ 0x43
 800bf1e:	2101      	movs	r1, #1
 800bf20:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800bf22:	2300      	movs	r3, #0
}
 800bf24:	0018      	movs	r0, r3
 800bf26:	46bd      	mov	sp, r7
 800bf28:	b002      	add	sp, #8
 800bf2a:	bd80      	pop	{r7, pc}
 800bf2c:	40012c00 	.word	0x40012c00
 800bf30:	40014000 	.word	0x40014000
 800bf34:	40014400 	.word	0x40014400
 800bf38:	40014800 	.word	0x40014800
 800bf3c:	00001111 	.word	0x00001111
 800bf40:	00000444 	.word	0x00000444
 800bf44:	ffff7fff 	.word	0xffff7fff

0800bf48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b086      	sub	sp, #24
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	60f8      	str	r0, [r7, #12]
 800bf50:	60b9      	str	r1, [r7, #8]
 800bf52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bf54:	2317      	movs	r3, #23
 800bf56:	18fb      	adds	r3, r7, r3
 800bf58:	2200      	movs	r2, #0
 800bf5a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	223c      	movs	r2, #60	@ 0x3c
 800bf60:	5c9b      	ldrb	r3, [r3, r2]
 800bf62:	2b01      	cmp	r3, #1
 800bf64:	d101      	bne.n	800bf6a <HAL_TIM_PWM_ConfigChannel+0x22>
 800bf66:	2302      	movs	r3, #2
 800bf68:	e0e5      	b.n	800c136 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	223c      	movs	r2, #60	@ 0x3c
 800bf6e:	2101      	movs	r1, #1
 800bf70:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	2b14      	cmp	r3, #20
 800bf76:	d900      	bls.n	800bf7a <HAL_TIM_PWM_ConfigChannel+0x32>
 800bf78:	e0d1      	b.n	800c11e <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	009a      	lsls	r2, r3, #2
 800bf7e:	4b70      	ldr	r3, [pc, #448]	@ (800c140 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800bf80:	18d3      	adds	r3, r2, r3
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	68ba      	ldr	r2, [r7, #8]
 800bf8c:	0011      	movs	r1, r2
 800bf8e:	0018      	movs	r0, r3
 800bf90:	f000 f972 	bl	800c278 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	699a      	ldr	r2, [r3, #24]
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	2108      	movs	r1, #8
 800bfa0:	430a      	orrs	r2, r1
 800bfa2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	699a      	ldr	r2, [r3, #24]
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	2104      	movs	r1, #4
 800bfb0:	438a      	bics	r2, r1
 800bfb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	6999      	ldr	r1, [r3, #24]
 800bfba:	68bb      	ldr	r3, [r7, #8]
 800bfbc:	691a      	ldr	r2, [r3, #16]
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	430a      	orrs	r2, r1
 800bfc4:	619a      	str	r2, [r3, #24]
      break;
 800bfc6:	e0af      	b.n	800c128 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	68ba      	ldr	r2, [r7, #8]
 800bfce:	0011      	movs	r1, r2
 800bfd0:	0018      	movs	r0, r3
 800bfd2:	f000 f9db 	bl	800c38c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	699a      	ldr	r2, [r3, #24]
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	2180      	movs	r1, #128	@ 0x80
 800bfe2:	0109      	lsls	r1, r1, #4
 800bfe4:	430a      	orrs	r2, r1
 800bfe6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	699a      	ldr	r2, [r3, #24]
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	4954      	ldr	r1, [pc, #336]	@ (800c144 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800bff4:	400a      	ands	r2, r1
 800bff6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	6999      	ldr	r1, [r3, #24]
 800bffe:	68bb      	ldr	r3, [r7, #8]
 800c000:	691b      	ldr	r3, [r3, #16]
 800c002:	021a      	lsls	r2, r3, #8
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	430a      	orrs	r2, r1
 800c00a:	619a      	str	r2, [r3, #24]
      break;
 800c00c:	e08c      	b.n	800c128 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	68ba      	ldr	r2, [r7, #8]
 800c014:	0011      	movs	r1, r2
 800c016:	0018      	movs	r0, r3
 800c018:	f000 fa3c 	bl	800c494 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	69da      	ldr	r2, [r3, #28]
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	2108      	movs	r1, #8
 800c028:	430a      	orrs	r2, r1
 800c02a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	69da      	ldr	r2, [r3, #28]
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	2104      	movs	r1, #4
 800c038:	438a      	bics	r2, r1
 800c03a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	69d9      	ldr	r1, [r3, #28]
 800c042:	68bb      	ldr	r3, [r7, #8]
 800c044:	691a      	ldr	r2, [r3, #16]
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	430a      	orrs	r2, r1
 800c04c:	61da      	str	r2, [r3, #28]
      break;
 800c04e:	e06b      	b.n	800c128 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	68ba      	ldr	r2, [r7, #8]
 800c056:	0011      	movs	r1, r2
 800c058:	0018      	movs	r0, r3
 800c05a:	f000 faa3 	bl	800c5a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	69da      	ldr	r2, [r3, #28]
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	2180      	movs	r1, #128	@ 0x80
 800c06a:	0109      	lsls	r1, r1, #4
 800c06c:	430a      	orrs	r2, r1
 800c06e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	69da      	ldr	r2, [r3, #28]
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	4932      	ldr	r1, [pc, #200]	@ (800c144 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800c07c:	400a      	ands	r2, r1
 800c07e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	69d9      	ldr	r1, [r3, #28]
 800c086:	68bb      	ldr	r3, [r7, #8]
 800c088:	691b      	ldr	r3, [r3, #16]
 800c08a:	021a      	lsls	r2, r3, #8
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	430a      	orrs	r2, r1
 800c092:	61da      	str	r2, [r3, #28]
      break;
 800c094:	e048      	b.n	800c128 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	68ba      	ldr	r2, [r7, #8]
 800c09c:	0011      	movs	r1, r2
 800c09e:	0018      	movs	r0, r3
 800c0a0:	f000 faea 	bl	800c678 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	2108      	movs	r1, #8
 800c0b0:	430a      	orrs	r2, r1
 800c0b2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	2104      	movs	r1, #4
 800c0c0:	438a      	bics	r2, r1
 800c0c2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800c0ca:	68bb      	ldr	r3, [r7, #8]
 800c0cc:	691a      	ldr	r2, [r3, #16]
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	430a      	orrs	r2, r1
 800c0d4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800c0d6:	e027      	b.n	800c128 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	68ba      	ldr	r2, [r7, #8]
 800c0de:	0011      	movs	r1, r2
 800c0e0:	0018      	movs	r0, r3
 800c0e2:	f000 fb29 	bl	800c738 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	2180      	movs	r1, #128	@ 0x80
 800c0f2:	0109      	lsls	r1, r1, #4
 800c0f4:	430a      	orrs	r2, r1
 800c0f6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	4910      	ldr	r1, [pc, #64]	@ (800c144 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800c104:	400a      	ands	r2, r1
 800c106:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800c10e:	68bb      	ldr	r3, [r7, #8]
 800c110:	691b      	ldr	r3, [r3, #16]
 800c112:	021a      	lsls	r2, r3, #8
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	430a      	orrs	r2, r1
 800c11a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800c11c:	e004      	b.n	800c128 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800c11e:	2317      	movs	r3, #23
 800c120:	18fb      	adds	r3, r7, r3
 800c122:	2201      	movs	r2, #1
 800c124:	701a      	strb	r2, [r3, #0]
      break;
 800c126:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	223c      	movs	r2, #60	@ 0x3c
 800c12c:	2100      	movs	r1, #0
 800c12e:	5499      	strb	r1, [r3, r2]

  return status;
 800c130:	2317      	movs	r3, #23
 800c132:	18fb      	adds	r3, r7, r3
 800c134:	781b      	ldrb	r3, [r3, #0]
}
 800c136:	0018      	movs	r0, r3
 800c138:	46bd      	mov	sp, r7
 800c13a:	b006      	add	sp, #24
 800c13c:	bd80      	pop	{r7, pc}
 800c13e:	46c0      	nop			@ (mov r8, r8)
 800c140:	08011d4c 	.word	0x08011d4c
 800c144:	fffffbff 	.word	0xfffffbff

0800c148 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c148:	b580      	push	{r7, lr}
 800c14a:	b084      	sub	sp, #16
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	6078      	str	r0, [r7, #4]
 800c150:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	4a3f      	ldr	r2, [pc, #252]	@ (800c258 <TIM_Base_SetConfig+0x110>)
 800c15c:	4293      	cmp	r3, r2
 800c15e:	d00c      	beq.n	800c17a <TIM_Base_SetConfig+0x32>
 800c160:	687a      	ldr	r2, [r7, #4]
 800c162:	2380      	movs	r3, #128	@ 0x80
 800c164:	05db      	lsls	r3, r3, #23
 800c166:	429a      	cmp	r2, r3
 800c168:	d007      	beq.n	800c17a <TIM_Base_SetConfig+0x32>
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	4a3b      	ldr	r2, [pc, #236]	@ (800c25c <TIM_Base_SetConfig+0x114>)
 800c16e:	4293      	cmp	r3, r2
 800c170:	d003      	beq.n	800c17a <TIM_Base_SetConfig+0x32>
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	4a3a      	ldr	r2, [pc, #232]	@ (800c260 <TIM_Base_SetConfig+0x118>)
 800c176:	4293      	cmp	r3, r2
 800c178:	d108      	bne.n	800c18c <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	2270      	movs	r2, #112	@ 0x70
 800c17e:	4393      	bics	r3, r2
 800c180:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c182:	683b      	ldr	r3, [r7, #0]
 800c184:	685b      	ldr	r3, [r3, #4]
 800c186:	68fa      	ldr	r2, [r7, #12]
 800c188:	4313      	orrs	r3, r2
 800c18a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	4a32      	ldr	r2, [pc, #200]	@ (800c258 <TIM_Base_SetConfig+0x110>)
 800c190:	4293      	cmp	r3, r2
 800c192:	d01c      	beq.n	800c1ce <TIM_Base_SetConfig+0x86>
 800c194:	687a      	ldr	r2, [r7, #4]
 800c196:	2380      	movs	r3, #128	@ 0x80
 800c198:	05db      	lsls	r3, r3, #23
 800c19a:	429a      	cmp	r2, r3
 800c19c:	d017      	beq.n	800c1ce <TIM_Base_SetConfig+0x86>
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	4a2e      	ldr	r2, [pc, #184]	@ (800c25c <TIM_Base_SetConfig+0x114>)
 800c1a2:	4293      	cmp	r3, r2
 800c1a4:	d013      	beq.n	800c1ce <TIM_Base_SetConfig+0x86>
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	4a2d      	ldr	r2, [pc, #180]	@ (800c260 <TIM_Base_SetConfig+0x118>)
 800c1aa:	4293      	cmp	r3, r2
 800c1ac:	d00f      	beq.n	800c1ce <TIM_Base_SetConfig+0x86>
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	4a2c      	ldr	r2, [pc, #176]	@ (800c264 <TIM_Base_SetConfig+0x11c>)
 800c1b2:	4293      	cmp	r3, r2
 800c1b4:	d00b      	beq.n	800c1ce <TIM_Base_SetConfig+0x86>
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	4a2b      	ldr	r2, [pc, #172]	@ (800c268 <TIM_Base_SetConfig+0x120>)
 800c1ba:	4293      	cmp	r3, r2
 800c1bc:	d007      	beq.n	800c1ce <TIM_Base_SetConfig+0x86>
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	4a2a      	ldr	r2, [pc, #168]	@ (800c26c <TIM_Base_SetConfig+0x124>)
 800c1c2:	4293      	cmp	r3, r2
 800c1c4:	d003      	beq.n	800c1ce <TIM_Base_SetConfig+0x86>
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	4a29      	ldr	r2, [pc, #164]	@ (800c270 <TIM_Base_SetConfig+0x128>)
 800c1ca:	4293      	cmp	r3, r2
 800c1cc:	d108      	bne.n	800c1e0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	4a28      	ldr	r2, [pc, #160]	@ (800c274 <TIM_Base_SetConfig+0x12c>)
 800c1d2:	4013      	ands	r3, r2
 800c1d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c1d6:	683b      	ldr	r3, [r7, #0]
 800c1d8:	68db      	ldr	r3, [r3, #12]
 800c1da:	68fa      	ldr	r2, [r7, #12]
 800c1dc:	4313      	orrs	r3, r2
 800c1de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	2280      	movs	r2, #128	@ 0x80
 800c1e4:	4393      	bics	r3, r2
 800c1e6:	001a      	movs	r2, r3
 800c1e8:	683b      	ldr	r3, [r7, #0]
 800c1ea:	695b      	ldr	r3, [r3, #20]
 800c1ec:	4313      	orrs	r3, r2
 800c1ee:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	68fa      	ldr	r2, [r7, #12]
 800c1f4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c1f6:	683b      	ldr	r3, [r7, #0]
 800c1f8:	689a      	ldr	r2, [r3, #8]
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c1fe:	683b      	ldr	r3, [r7, #0]
 800c200:	681a      	ldr	r2, [r3, #0]
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	4a13      	ldr	r2, [pc, #76]	@ (800c258 <TIM_Base_SetConfig+0x110>)
 800c20a:	4293      	cmp	r3, r2
 800c20c:	d00b      	beq.n	800c226 <TIM_Base_SetConfig+0xde>
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	4a15      	ldr	r2, [pc, #84]	@ (800c268 <TIM_Base_SetConfig+0x120>)
 800c212:	4293      	cmp	r3, r2
 800c214:	d007      	beq.n	800c226 <TIM_Base_SetConfig+0xde>
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	4a14      	ldr	r2, [pc, #80]	@ (800c26c <TIM_Base_SetConfig+0x124>)
 800c21a:	4293      	cmp	r3, r2
 800c21c:	d003      	beq.n	800c226 <TIM_Base_SetConfig+0xde>
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	4a13      	ldr	r2, [pc, #76]	@ (800c270 <TIM_Base_SetConfig+0x128>)
 800c222:	4293      	cmp	r3, r2
 800c224:	d103      	bne.n	800c22e <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c226:	683b      	ldr	r3, [r7, #0]
 800c228:	691a      	ldr	r2, [r3, #16]
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	2201      	movs	r2, #1
 800c232:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	691b      	ldr	r3, [r3, #16]
 800c238:	2201      	movs	r2, #1
 800c23a:	4013      	ands	r3, r2
 800c23c:	2b01      	cmp	r3, #1
 800c23e:	d106      	bne.n	800c24e <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	691b      	ldr	r3, [r3, #16]
 800c244:	2201      	movs	r2, #1
 800c246:	4393      	bics	r3, r2
 800c248:	001a      	movs	r2, r3
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	611a      	str	r2, [r3, #16]
  }
}
 800c24e:	46c0      	nop			@ (mov r8, r8)
 800c250:	46bd      	mov	sp, r7
 800c252:	b004      	add	sp, #16
 800c254:	bd80      	pop	{r7, pc}
 800c256:	46c0      	nop			@ (mov r8, r8)
 800c258:	40012c00 	.word	0x40012c00
 800c25c:	40000400 	.word	0x40000400
 800c260:	40000800 	.word	0x40000800
 800c264:	40002000 	.word	0x40002000
 800c268:	40014000 	.word	0x40014000
 800c26c:	40014400 	.word	0x40014400
 800c270:	40014800 	.word	0x40014800
 800c274:	fffffcff 	.word	0xfffffcff

0800c278 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c278:	b580      	push	{r7, lr}
 800c27a:	b086      	sub	sp, #24
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	6078      	str	r0, [r7, #4]
 800c280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	6a1b      	ldr	r3, [r3, #32]
 800c286:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	6a1b      	ldr	r3, [r3, #32]
 800c28c:	2201      	movs	r2, #1
 800c28e:	4393      	bics	r3, r2
 800c290:	001a      	movs	r2, r3
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	685b      	ldr	r3, [r3, #4]
 800c29a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	699b      	ldr	r3, [r3, #24]
 800c2a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	4a32      	ldr	r2, [pc, #200]	@ (800c370 <TIM_OC1_SetConfig+0xf8>)
 800c2a6:	4013      	ands	r3, r2
 800c2a8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	2203      	movs	r2, #3
 800c2ae:	4393      	bics	r3, r2
 800c2b0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c2b2:	683b      	ldr	r3, [r7, #0]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	68fa      	ldr	r2, [r7, #12]
 800c2b8:	4313      	orrs	r3, r2
 800c2ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c2bc:	697b      	ldr	r3, [r7, #20]
 800c2be:	2202      	movs	r2, #2
 800c2c0:	4393      	bics	r3, r2
 800c2c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c2c4:	683b      	ldr	r3, [r7, #0]
 800c2c6:	689b      	ldr	r3, [r3, #8]
 800c2c8:	697a      	ldr	r2, [r7, #20]
 800c2ca:	4313      	orrs	r3, r2
 800c2cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	4a28      	ldr	r2, [pc, #160]	@ (800c374 <TIM_OC1_SetConfig+0xfc>)
 800c2d2:	4293      	cmp	r3, r2
 800c2d4:	d00b      	beq.n	800c2ee <TIM_OC1_SetConfig+0x76>
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	4a27      	ldr	r2, [pc, #156]	@ (800c378 <TIM_OC1_SetConfig+0x100>)
 800c2da:	4293      	cmp	r3, r2
 800c2dc:	d007      	beq.n	800c2ee <TIM_OC1_SetConfig+0x76>
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	4a26      	ldr	r2, [pc, #152]	@ (800c37c <TIM_OC1_SetConfig+0x104>)
 800c2e2:	4293      	cmp	r3, r2
 800c2e4:	d003      	beq.n	800c2ee <TIM_OC1_SetConfig+0x76>
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	4a25      	ldr	r2, [pc, #148]	@ (800c380 <TIM_OC1_SetConfig+0x108>)
 800c2ea:	4293      	cmp	r3, r2
 800c2ec:	d10c      	bne.n	800c308 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c2ee:	697b      	ldr	r3, [r7, #20]
 800c2f0:	2208      	movs	r2, #8
 800c2f2:	4393      	bics	r3, r2
 800c2f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c2f6:	683b      	ldr	r3, [r7, #0]
 800c2f8:	68db      	ldr	r3, [r3, #12]
 800c2fa:	697a      	ldr	r2, [r7, #20]
 800c2fc:	4313      	orrs	r3, r2
 800c2fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c300:	697b      	ldr	r3, [r7, #20]
 800c302:	2204      	movs	r2, #4
 800c304:	4393      	bics	r3, r2
 800c306:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	4a1a      	ldr	r2, [pc, #104]	@ (800c374 <TIM_OC1_SetConfig+0xfc>)
 800c30c:	4293      	cmp	r3, r2
 800c30e:	d00b      	beq.n	800c328 <TIM_OC1_SetConfig+0xb0>
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	4a19      	ldr	r2, [pc, #100]	@ (800c378 <TIM_OC1_SetConfig+0x100>)
 800c314:	4293      	cmp	r3, r2
 800c316:	d007      	beq.n	800c328 <TIM_OC1_SetConfig+0xb0>
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	4a18      	ldr	r2, [pc, #96]	@ (800c37c <TIM_OC1_SetConfig+0x104>)
 800c31c:	4293      	cmp	r3, r2
 800c31e:	d003      	beq.n	800c328 <TIM_OC1_SetConfig+0xb0>
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	4a17      	ldr	r2, [pc, #92]	@ (800c380 <TIM_OC1_SetConfig+0x108>)
 800c324:	4293      	cmp	r3, r2
 800c326:	d111      	bne.n	800c34c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c328:	693b      	ldr	r3, [r7, #16]
 800c32a:	4a16      	ldr	r2, [pc, #88]	@ (800c384 <TIM_OC1_SetConfig+0x10c>)
 800c32c:	4013      	ands	r3, r2
 800c32e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c330:	693b      	ldr	r3, [r7, #16]
 800c332:	4a15      	ldr	r2, [pc, #84]	@ (800c388 <TIM_OC1_SetConfig+0x110>)
 800c334:	4013      	ands	r3, r2
 800c336:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c338:	683b      	ldr	r3, [r7, #0]
 800c33a:	695b      	ldr	r3, [r3, #20]
 800c33c:	693a      	ldr	r2, [r7, #16]
 800c33e:	4313      	orrs	r3, r2
 800c340:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c342:	683b      	ldr	r3, [r7, #0]
 800c344:	699b      	ldr	r3, [r3, #24]
 800c346:	693a      	ldr	r2, [r7, #16]
 800c348:	4313      	orrs	r3, r2
 800c34a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	693a      	ldr	r2, [r7, #16]
 800c350:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	68fa      	ldr	r2, [r7, #12]
 800c356:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c358:	683b      	ldr	r3, [r7, #0]
 800c35a:	685a      	ldr	r2, [r3, #4]
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	697a      	ldr	r2, [r7, #20]
 800c364:	621a      	str	r2, [r3, #32]
}
 800c366:	46c0      	nop			@ (mov r8, r8)
 800c368:	46bd      	mov	sp, r7
 800c36a:	b006      	add	sp, #24
 800c36c:	bd80      	pop	{r7, pc}
 800c36e:	46c0      	nop			@ (mov r8, r8)
 800c370:	fffeff8f 	.word	0xfffeff8f
 800c374:	40012c00 	.word	0x40012c00
 800c378:	40014000 	.word	0x40014000
 800c37c:	40014400 	.word	0x40014400
 800c380:	40014800 	.word	0x40014800
 800c384:	fffffeff 	.word	0xfffffeff
 800c388:	fffffdff 	.word	0xfffffdff

0800c38c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c38c:	b580      	push	{r7, lr}
 800c38e:	b086      	sub	sp, #24
 800c390:	af00      	add	r7, sp, #0
 800c392:	6078      	str	r0, [r7, #4]
 800c394:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	6a1b      	ldr	r3, [r3, #32]
 800c39a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	6a1b      	ldr	r3, [r3, #32]
 800c3a0:	2210      	movs	r2, #16
 800c3a2:	4393      	bics	r3, r2
 800c3a4:	001a      	movs	r2, r3
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	685b      	ldr	r3, [r3, #4]
 800c3ae:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	699b      	ldr	r3, [r3, #24]
 800c3b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	4a2e      	ldr	r2, [pc, #184]	@ (800c474 <TIM_OC2_SetConfig+0xe8>)
 800c3ba:	4013      	ands	r3, r2
 800c3bc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	4a2d      	ldr	r2, [pc, #180]	@ (800c478 <TIM_OC2_SetConfig+0xec>)
 800c3c2:	4013      	ands	r3, r2
 800c3c4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c3c6:	683b      	ldr	r3, [r7, #0]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	021b      	lsls	r3, r3, #8
 800c3cc:	68fa      	ldr	r2, [r7, #12]
 800c3ce:	4313      	orrs	r3, r2
 800c3d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c3d2:	697b      	ldr	r3, [r7, #20]
 800c3d4:	2220      	movs	r2, #32
 800c3d6:	4393      	bics	r3, r2
 800c3d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c3da:	683b      	ldr	r3, [r7, #0]
 800c3dc:	689b      	ldr	r3, [r3, #8]
 800c3de:	011b      	lsls	r3, r3, #4
 800c3e0:	697a      	ldr	r2, [r7, #20]
 800c3e2:	4313      	orrs	r3, r2
 800c3e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	4a24      	ldr	r2, [pc, #144]	@ (800c47c <TIM_OC2_SetConfig+0xf0>)
 800c3ea:	4293      	cmp	r3, r2
 800c3ec:	d10d      	bne.n	800c40a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c3ee:	697b      	ldr	r3, [r7, #20]
 800c3f0:	2280      	movs	r2, #128	@ 0x80
 800c3f2:	4393      	bics	r3, r2
 800c3f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c3f6:	683b      	ldr	r3, [r7, #0]
 800c3f8:	68db      	ldr	r3, [r3, #12]
 800c3fa:	011b      	lsls	r3, r3, #4
 800c3fc:	697a      	ldr	r2, [r7, #20]
 800c3fe:	4313      	orrs	r3, r2
 800c400:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c402:	697b      	ldr	r3, [r7, #20]
 800c404:	2240      	movs	r2, #64	@ 0x40
 800c406:	4393      	bics	r3, r2
 800c408:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	4a1b      	ldr	r2, [pc, #108]	@ (800c47c <TIM_OC2_SetConfig+0xf0>)
 800c40e:	4293      	cmp	r3, r2
 800c410:	d00b      	beq.n	800c42a <TIM_OC2_SetConfig+0x9e>
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	4a1a      	ldr	r2, [pc, #104]	@ (800c480 <TIM_OC2_SetConfig+0xf4>)
 800c416:	4293      	cmp	r3, r2
 800c418:	d007      	beq.n	800c42a <TIM_OC2_SetConfig+0x9e>
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	4a19      	ldr	r2, [pc, #100]	@ (800c484 <TIM_OC2_SetConfig+0xf8>)
 800c41e:	4293      	cmp	r3, r2
 800c420:	d003      	beq.n	800c42a <TIM_OC2_SetConfig+0x9e>
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	4a18      	ldr	r2, [pc, #96]	@ (800c488 <TIM_OC2_SetConfig+0xfc>)
 800c426:	4293      	cmp	r3, r2
 800c428:	d113      	bne.n	800c452 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c42a:	693b      	ldr	r3, [r7, #16]
 800c42c:	4a17      	ldr	r2, [pc, #92]	@ (800c48c <TIM_OC2_SetConfig+0x100>)
 800c42e:	4013      	ands	r3, r2
 800c430:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c432:	693b      	ldr	r3, [r7, #16]
 800c434:	4a16      	ldr	r2, [pc, #88]	@ (800c490 <TIM_OC2_SetConfig+0x104>)
 800c436:	4013      	ands	r3, r2
 800c438:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c43a:	683b      	ldr	r3, [r7, #0]
 800c43c:	695b      	ldr	r3, [r3, #20]
 800c43e:	009b      	lsls	r3, r3, #2
 800c440:	693a      	ldr	r2, [r7, #16]
 800c442:	4313      	orrs	r3, r2
 800c444:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c446:	683b      	ldr	r3, [r7, #0]
 800c448:	699b      	ldr	r3, [r3, #24]
 800c44a:	009b      	lsls	r3, r3, #2
 800c44c:	693a      	ldr	r2, [r7, #16]
 800c44e:	4313      	orrs	r3, r2
 800c450:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	693a      	ldr	r2, [r7, #16]
 800c456:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	68fa      	ldr	r2, [r7, #12]
 800c45c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c45e:	683b      	ldr	r3, [r7, #0]
 800c460:	685a      	ldr	r2, [r3, #4]
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	697a      	ldr	r2, [r7, #20]
 800c46a:	621a      	str	r2, [r3, #32]
}
 800c46c:	46c0      	nop			@ (mov r8, r8)
 800c46e:	46bd      	mov	sp, r7
 800c470:	b006      	add	sp, #24
 800c472:	bd80      	pop	{r7, pc}
 800c474:	feff8fff 	.word	0xfeff8fff
 800c478:	fffffcff 	.word	0xfffffcff
 800c47c:	40012c00 	.word	0x40012c00
 800c480:	40014000 	.word	0x40014000
 800c484:	40014400 	.word	0x40014400
 800c488:	40014800 	.word	0x40014800
 800c48c:	fffffbff 	.word	0xfffffbff
 800c490:	fffff7ff 	.word	0xfffff7ff

0800c494 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c494:	b580      	push	{r7, lr}
 800c496:	b086      	sub	sp, #24
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6078      	str	r0, [r7, #4]
 800c49c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	6a1b      	ldr	r3, [r3, #32]
 800c4a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	6a1b      	ldr	r3, [r3, #32]
 800c4a8:	4a33      	ldr	r2, [pc, #204]	@ (800c578 <TIM_OC3_SetConfig+0xe4>)
 800c4aa:	401a      	ands	r2, r3
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	685b      	ldr	r3, [r3, #4]
 800c4b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	69db      	ldr	r3, [r3, #28]
 800c4ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	4a2f      	ldr	r2, [pc, #188]	@ (800c57c <TIM_OC3_SetConfig+0xe8>)
 800c4c0:	4013      	ands	r3, r2
 800c4c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	2203      	movs	r2, #3
 800c4c8:	4393      	bics	r3, r2
 800c4ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c4cc:	683b      	ldr	r3, [r7, #0]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	68fa      	ldr	r2, [r7, #12]
 800c4d2:	4313      	orrs	r3, r2
 800c4d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c4d6:	697b      	ldr	r3, [r7, #20]
 800c4d8:	4a29      	ldr	r2, [pc, #164]	@ (800c580 <TIM_OC3_SetConfig+0xec>)
 800c4da:	4013      	ands	r3, r2
 800c4dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c4de:	683b      	ldr	r3, [r7, #0]
 800c4e0:	689b      	ldr	r3, [r3, #8]
 800c4e2:	021b      	lsls	r3, r3, #8
 800c4e4:	697a      	ldr	r2, [r7, #20]
 800c4e6:	4313      	orrs	r3, r2
 800c4e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	4a25      	ldr	r2, [pc, #148]	@ (800c584 <TIM_OC3_SetConfig+0xf0>)
 800c4ee:	4293      	cmp	r3, r2
 800c4f0:	d10d      	bne.n	800c50e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c4f2:	697b      	ldr	r3, [r7, #20]
 800c4f4:	4a24      	ldr	r2, [pc, #144]	@ (800c588 <TIM_OC3_SetConfig+0xf4>)
 800c4f6:	4013      	ands	r3, r2
 800c4f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c4fa:	683b      	ldr	r3, [r7, #0]
 800c4fc:	68db      	ldr	r3, [r3, #12]
 800c4fe:	021b      	lsls	r3, r3, #8
 800c500:	697a      	ldr	r2, [r7, #20]
 800c502:	4313      	orrs	r3, r2
 800c504:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c506:	697b      	ldr	r3, [r7, #20]
 800c508:	4a20      	ldr	r2, [pc, #128]	@ (800c58c <TIM_OC3_SetConfig+0xf8>)
 800c50a:	4013      	ands	r3, r2
 800c50c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	4a1c      	ldr	r2, [pc, #112]	@ (800c584 <TIM_OC3_SetConfig+0xf0>)
 800c512:	4293      	cmp	r3, r2
 800c514:	d00b      	beq.n	800c52e <TIM_OC3_SetConfig+0x9a>
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	4a1d      	ldr	r2, [pc, #116]	@ (800c590 <TIM_OC3_SetConfig+0xfc>)
 800c51a:	4293      	cmp	r3, r2
 800c51c:	d007      	beq.n	800c52e <TIM_OC3_SetConfig+0x9a>
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	4a1c      	ldr	r2, [pc, #112]	@ (800c594 <TIM_OC3_SetConfig+0x100>)
 800c522:	4293      	cmp	r3, r2
 800c524:	d003      	beq.n	800c52e <TIM_OC3_SetConfig+0x9a>
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	4a1b      	ldr	r2, [pc, #108]	@ (800c598 <TIM_OC3_SetConfig+0x104>)
 800c52a:	4293      	cmp	r3, r2
 800c52c:	d113      	bne.n	800c556 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c52e:	693b      	ldr	r3, [r7, #16]
 800c530:	4a1a      	ldr	r2, [pc, #104]	@ (800c59c <TIM_OC3_SetConfig+0x108>)
 800c532:	4013      	ands	r3, r2
 800c534:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c536:	693b      	ldr	r3, [r7, #16]
 800c538:	4a19      	ldr	r2, [pc, #100]	@ (800c5a0 <TIM_OC3_SetConfig+0x10c>)
 800c53a:	4013      	ands	r3, r2
 800c53c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c53e:	683b      	ldr	r3, [r7, #0]
 800c540:	695b      	ldr	r3, [r3, #20]
 800c542:	011b      	lsls	r3, r3, #4
 800c544:	693a      	ldr	r2, [r7, #16]
 800c546:	4313      	orrs	r3, r2
 800c548:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c54a:	683b      	ldr	r3, [r7, #0]
 800c54c:	699b      	ldr	r3, [r3, #24]
 800c54e:	011b      	lsls	r3, r3, #4
 800c550:	693a      	ldr	r2, [r7, #16]
 800c552:	4313      	orrs	r3, r2
 800c554:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	693a      	ldr	r2, [r7, #16]
 800c55a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	68fa      	ldr	r2, [r7, #12]
 800c560:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c562:	683b      	ldr	r3, [r7, #0]
 800c564:	685a      	ldr	r2, [r3, #4]
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	697a      	ldr	r2, [r7, #20]
 800c56e:	621a      	str	r2, [r3, #32]
}
 800c570:	46c0      	nop			@ (mov r8, r8)
 800c572:	46bd      	mov	sp, r7
 800c574:	b006      	add	sp, #24
 800c576:	bd80      	pop	{r7, pc}
 800c578:	fffffeff 	.word	0xfffffeff
 800c57c:	fffeff8f 	.word	0xfffeff8f
 800c580:	fffffdff 	.word	0xfffffdff
 800c584:	40012c00 	.word	0x40012c00
 800c588:	fffff7ff 	.word	0xfffff7ff
 800c58c:	fffffbff 	.word	0xfffffbff
 800c590:	40014000 	.word	0x40014000
 800c594:	40014400 	.word	0x40014400
 800c598:	40014800 	.word	0x40014800
 800c59c:	ffffefff 	.word	0xffffefff
 800c5a0:	ffffdfff 	.word	0xffffdfff

0800c5a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	b086      	sub	sp, #24
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
 800c5ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	6a1b      	ldr	r3, [r3, #32]
 800c5b2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	6a1b      	ldr	r3, [r3, #32]
 800c5b8:	4a26      	ldr	r2, [pc, #152]	@ (800c654 <TIM_OC4_SetConfig+0xb0>)
 800c5ba:	401a      	ands	r2, r3
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	685b      	ldr	r3, [r3, #4]
 800c5c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	69db      	ldr	r3, [r3, #28]
 800c5ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	4a22      	ldr	r2, [pc, #136]	@ (800c658 <TIM_OC4_SetConfig+0xb4>)
 800c5d0:	4013      	ands	r3, r2
 800c5d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	4a21      	ldr	r2, [pc, #132]	@ (800c65c <TIM_OC4_SetConfig+0xb8>)
 800c5d8:	4013      	ands	r3, r2
 800c5da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c5dc:	683b      	ldr	r3, [r7, #0]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	021b      	lsls	r3, r3, #8
 800c5e2:	68fa      	ldr	r2, [r7, #12]
 800c5e4:	4313      	orrs	r3, r2
 800c5e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c5e8:	693b      	ldr	r3, [r7, #16]
 800c5ea:	4a1d      	ldr	r2, [pc, #116]	@ (800c660 <TIM_OC4_SetConfig+0xbc>)
 800c5ec:	4013      	ands	r3, r2
 800c5ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c5f0:	683b      	ldr	r3, [r7, #0]
 800c5f2:	689b      	ldr	r3, [r3, #8]
 800c5f4:	031b      	lsls	r3, r3, #12
 800c5f6:	693a      	ldr	r2, [r7, #16]
 800c5f8:	4313      	orrs	r3, r2
 800c5fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	4a19      	ldr	r2, [pc, #100]	@ (800c664 <TIM_OC4_SetConfig+0xc0>)
 800c600:	4293      	cmp	r3, r2
 800c602:	d00b      	beq.n	800c61c <TIM_OC4_SetConfig+0x78>
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	4a18      	ldr	r2, [pc, #96]	@ (800c668 <TIM_OC4_SetConfig+0xc4>)
 800c608:	4293      	cmp	r3, r2
 800c60a:	d007      	beq.n	800c61c <TIM_OC4_SetConfig+0x78>
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	4a17      	ldr	r2, [pc, #92]	@ (800c66c <TIM_OC4_SetConfig+0xc8>)
 800c610:	4293      	cmp	r3, r2
 800c612:	d003      	beq.n	800c61c <TIM_OC4_SetConfig+0x78>
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	4a16      	ldr	r2, [pc, #88]	@ (800c670 <TIM_OC4_SetConfig+0xcc>)
 800c618:	4293      	cmp	r3, r2
 800c61a:	d109      	bne.n	800c630 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c61c:	697b      	ldr	r3, [r7, #20]
 800c61e:	4a15      	ldr	r2, [pc, #84]	@ (800c674 <TIM_OC4_SetConfig+0xd0>)
 800c620:	4013      	ands	r3, r2
 800c622:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c624:	683b      	ldr	r3, [r7, #0]
 800c626:	695b      	ldr	r3, [r3, #20]
 800c628:	019b      	lsls	r3, r3, #6
 800c62a:	697a      	ldr	r2, [r7, #20]
 800c62c:	4313      	orrs	r3, r2
 800c62e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	697a      	ldr	r2, [r7, #20]
 800c634:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	68fa      	ldr	r2, [r7, #12]
 800c63a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c63c:	683b      	ldr	r3, [r7, #0]
 800c63e:	685a      	ldr	r2, [r3, #4]
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	693a      	ldr	r2, [r7, #16]
 800c648:	621a      	str	r2, [r3, #32]
}
 800c64a:	46c0      	nop			@ (mov r8, r8)
 800c64c:	46bd      	mov	sp, r7
 800c64e:	b006      	add	sp, #24
 800c650:	bd80      	pop	{r7, pc}
 800c652:	46c0      	nop			@ (mov r8, r8)
 800c654:	ffffefff 	.word	0xffffefff
 800c658:	feff8fff 	.word	0xfeff8fff
 800c65c:	fffffcff 	.word	0xfffffcff
 800c660:	ffffdfff 	.word	0xffffdfff
 800c664:	40012c00 	.word	0x40012c00
 800c668:	40014000 	.word	0x40014000
 800c66c:	40014400 	.word	0x40014400
 800c670:	40014800 	.word	0x40014800
 800c674:	ffffbfff 	.word	0xffffbfff

0800c678 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c678:	b580      	push	{r7, lr}
 800c67a:	b086      	sub	sp, #24
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	6078      	str	r0, [r7, #4]
 800c680:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	6a1b      	ldr	r3, [r3, #32]
 800c686:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	6a1b      	ldr	r3, [r3, #32]
 800c68c:	4a23      	ldr	r2, [pc, #140]	@ (800c71c <TIM_OC5_SetConfig+0xa4>)
 800c68e:	401a      	ands	r2, r3
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	685b      	ldr	r3, [r3, #4]
 800c698:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c69e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	4a1f      	ldr	r2, [pc, #124]	@ (800c720 <TIM_OC5_SetConfig+0xa8>)
 800c6a4:	4013      	ands	r3, r2
 800c6a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c6a8:	683b      	ldr	r3, [r7, #0]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	68fa      	ldr	r2, [r7, #12]
 800c6ae:	4313      	orrs	r3, r2
 800c6b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c6b2:	693b      	ldr	r3, [r7, #16]
 800c6b4:	4a1b      	ldr	r2, [pc, #108]	@ (800c724 <TIM_OC5_SetConfig+0xac>)
 800c6b6:	4013      	ands	r3, r2
 800c6b8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c6ba:	683b      	ldr	r3, [r7, #0]
 800c6bc:	689b      	ldr	r3, [r3, #8]
 800c6be:	041b      	lsls	r3, r3, #16
 800c6c0:	693a      	ldr	r2, [r7, #16]
 800c6c2:	4313      	orrs	r3, r2
 800c6c4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	4a17      	ldr	r2, [pc, #92]	@ (800c728 <TIM_OC5_SetConfig+0xb0>)
 800c6ca:	4293      	cmp	r3, r2
 800c6cc:	d00b      	beq.n	800c6e6 <TIM_OC5_SetConfig+0x6e>
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	4a16      	ldr	r2, [pc, #88]	@ (800c72c <TIM_OC5_SetConfig+0xb4>)
 800c6d2:	4293      	cmp	r3, r2
 800c6d4:	d007      	beq.n	800c6e6 <TIM_OC5_SetConfig+0x6e>
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	4a15      	ldr	r2, [pc, #84]	@ (800c730 <TIM_OC5_SetConfig+0xb8>)
 800c6da:	4293      	cmp	r3, r2
 800c6dc:	d003      	beq.n	800c6e6 <TIM_OC5_SetConfig+0x6e>
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	4a14      	ldr	r2, [pc, #80]	@ (800c734 <TIM_OC5_SetConfig+0xbc>)
 800c6e2:	4293      	cmp	r3, r2
 800c6e4:	d109      	bne.n	800c6fa <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c6e6:	697b      	ldr	r3, [r7, #20]
 800c6e8:	4a0c      	ldr	r2, [pc, #48]	@ (800c71c <TIM_OC5_SetConfig+0xa4>)
 800c6ea:	4013      	ands	r3, r2
 800c6ec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c6ee:	683b      	ldr	r3, [r7, #0]
 800c6f0:	695b      	ldr	r3, [r3, #20]
 800c6f2:	021b      	lsls	r3, r3, #8
 800c6f4:	697a      	ldr	r2, [r7, #20]
 800c6f6:	4313      	orrs	r3, r2
 800c6f8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	697a      	ldr	r2, [r7, #20]
 800c6fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	68fa      	ldr	r2, [r7, #12]
 800c704:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c706:	683b      	ldr	r3, [r7, #0]
 800c708:	685a      	ldr	r2, [r3, #4]
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	693a      	ldr	r2, [r7, #16]
 800c712:	621a      	str	r2, [r3, #32]
}
 800c714:	46c0      	nop			@ (mov r8, r8)
 800c716:	46bd      	mov	sp, r7
 800c718:	b006      	add	sp, #24
 800c71a:	bd80      	pop	{r7, pc}
 800c71c:	fffeffff 	.word	0xfffeffff
 800c720:	fffeff8f 	.word	0xfffeff8f
 800c724:	fffdffff 	.word	0xfffdffff
 800c728:	40012c00 	.word	0x40012c00
 800c72c:	40014000 	.word	0x40014000
 800c730:	40014400 	.word	0x40014400
 800c734:	40014800 	.word	0x40014800

0800c738 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c738:	b580      	push	{r7, lr}
 800c73a:	b086      	sub	sp, #24
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	6078      	str	r0, [r7, #4]
 800c740:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	6a1b      	ldr	r3, [r3, #32]
 800c746:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	6a1b      	ldr	r3, [r3, #32]
 800c74c:	4a24      	ldr	r2, [pc, #144]	@ (800c7e0 <TIM_OC6_SetConfig+0xa8>)
 800c74e:	401a      	ands	r2, r3
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	685b      	ldr	r3, [r3, #4]
 800c758:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c75e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	4a20      	ldr	r2, [pc, #128]	@ (800c7e4 <TIM_OC6_SetConfig+0xac>)
 800c764:	4013      	ands	r3, r2
 800c766:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c768:	683b      	ldr	r3, [r7, #0]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	021b      	lsls	r3, r3, #8
 800c76e:	68fa      	ldr	r2, [r7, #12]
 800c770:	4313      	orrs	r3, r2
 800c772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c774:	693b      	ldr	r3, [r7, #16]
 800c776:	4a1c      	ldr	r2, [pc, #112]	@ (800c7e8 <TIM_OC6_SetConfig+0xb0>)
 800c778:	4013      	ands	r3, r2
 800c77a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c77c:	683b      	ldr	r3, [r7, #0]
 800c77e:	689b      	ldr	r3, [r3, #8]
 800c780:	051b      	lsls	r3, r3, #20
 800c782:	693a      	ldr	r2, [r7, #16]
 800c784:	4313      	orrs	r3, r2
 800c786:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	4a18      	ldr	r2, [pc, #96]	@ (800c7ec <TIM_OC6_SetConfig+0xb4>)
 800c78c:	4293      	cmp	r3, r2
 800c78e:	d00b      	beq.n	800c7a8 <TIM_OC6_SetConfig+0x70>
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	4a17      	ldr	r2, [pc, #92]	@ (800c7f0 <TIM_OC6_SetConfig+0xb8>)
 800c794:	4293      	cmp	r3, r2
 800c796:	d007      	beq.n	800c7a8 <TIM_OC6_SetConfig+0x70>
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	4a16      	ldr	r2, [pc, #88]	@ (800c7f4 <TIM_OC6_SetConfig+0xbc>)
 800c79c:	4293      	cmp	r3, r2
 800c79e:	d003      	beq.n	800c7a8 <TIM_OC6_SetConfig+0x70>
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	4a15      	ldr	r2, [pc, #84]	@ (800c7f8 <TIM_OC6_SetConfig+0xc0>)
 800c7a4:	4293      	cmp	r3, r2
 800c7a6:	d109      	bne.n	800c7bc <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c7a8:	697b      	ldr	r3, [r7, #20]
 800c7aa:	4a14      	ldr	r2, [pc, #80]	@ (800c7fc <TIM_OC6_SetConfig+0xc4>)
 800c7ac:	4013      	ands	r3, r2
 800c7ae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c7b0:	683b      	ldr	r3, [r7, #0]
 800c7b2:	695b      	ldr	r3, [r3, #20]
 800c7b4:	029b      	lsls	r3, r3, #10
 800c7b6:	697a      	ldr	r2, [r7, #20]
 800c7b8:	4313      	orrs	r3, r2
 800c7ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	697a      	ldr	r2, [r7, #20]
 800c7c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	68fa      	ldr	r2, [r7, #12]
 800c7c6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c7c8:	683b      	ldr	r3, [r7, #0]
 800c7ca:	685a      	ldr	r2, [r3, #4]
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	693a      	ldr	r2, [r7, #16]
 800c7d4:	621a      	str	r2, [r3, #32]
}
 800c7d6:	46c0      	nop			@ (mov r8, r8)
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	b006      	add	sp, #24
 800c7dc:	bd80      	pop	{r7, pc}
 800c7de:	46c0      	nop			@ (mov r8, r8)
 800c7e0:	ffefffff 	.word	0xffefffff
 800c7e4:	feff8fff 	.word	0xfeff8fff
 800c7e8:	ffdfffff 	.word	0xffdfffff
 800c7ec:	40012c00 	.word	0x40012c00
 800c7f0:	40014000 	.word	0x40014000
 800c7f4:	40014400 	.word	0x40014400
 800c7f8:	40014800 	.word	0x40014800
 800c7fc:	fffbffff 	.word	0xfffbffff

0800c800 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c800:	b580      	push	{r7, lr}
 800c802:	b086      	sub	sp, #24
 800c804:	af00      	add	r7, sp, #0
 800c806:	60f8      	str	r0, [r7, #12]
 800c808:	60b9      	str	r1, [r7, #8]
 800c80a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c80c:	68bb      	ldr	r3, [r7, #8]
 800c80e:	221f      	movs	r2, #31
 800c810:	4013      	ands	r3, r2
 800c812:	2201      	movs	r2, #1
 800c814:	409a      	lsls	r2, r3
 800c816:	0013      	movs	r3, r2
 800c818:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	6a1b      	ldr	r3, [r3, #32]
 800c81e:	697a      	ldr	r2, [r7, #20]
 800c820:	43d2      	mvns	r2, r2
 800c822:	401a      	ands	r2, r3
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	6a1a      	ldr	r2, [r3, #32]
 800c82c:	68bb      	ldr	r3, [r7, #8]
 800c82e:	211f      	movs	r1, #31
 800c830:	400b      	ands	r3, r1
 800c832:	6879      	ldr	r1, [r7, #4]
 800c834:	4099      	lsls	r1, r3
 800c836:	000b      	movs	r3, r1
 800c838:	431a      	orrs	r2, r3
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	621a      	str	r2, [r3, #32]
}
 800c83e:	46c0      	nop			@ (mov r8, r8)
 800c840:	46bd      	mov	sp, r7
 800c842:	b006      	add	sp, #24
 800c844:	bd80      	pop	{r7, pc}
	...

0800c848 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c848:	b580      	push	{r7, lr}
 800c84a:	b084      	sub	sp, #16
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	6078      	str	r0, [r7, #4]
 800c850:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c852:	2300      	movs	r3, #0
 800c854:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	223c      	movs	r2, #60	@ 0x3c
 800c85a:	5c9b      	ldrb	r3, [r3, r2]
 800c85c:	2b01      	cmp	r3, #1
 800c85e:	d101      	bne.n	800c864 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c860:	2302      	movs	r3, #2
 800c862:	e06f      	b.n	800c944 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	223c      	movs	r2, #60	@ 0x3c
 800c868:	2101      	movs	r1, #1
 800c86a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	22ff      	movs	r2, #255	@ 0xff
 800c870:	4393      	bics	r3, r2
 800c872:	001a      	movs	r2, r3
 800c874:	683b      	ldr	r3, [r7, #0]
 800c876:	68db      	ldr	r3, [r3, #12]
 800c878:	4313      	orrs	r3, r2
 800c87a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	4a33      	ldr	r2, [pc, #204]	@ (800c94c <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 800c880:	401a      	ands	r2, r3
 800c882:	683b      	ldr	r3, [r7, #0]
 800c884:	689b      	ldr	r3, [r3, #8]
 800c886:	4313      	orrs	r3, r2
 800c888:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	4a30      	ldr	r2, [pc, #192]	@ (800c950 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800c88e:	401a      	ands	r2, r3
 800c890:	683b      	ldr	r3, [r7, #0]
 800c892:	685b      	ldr	r3, [r3, #4]
 800c894:	4313      	orrs	r3, r2
 800c896:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	4a2e      	ldr	r2, [pc, #184]	@ (800c954 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 800c89c:	401a      	ands	r2, r3
 800c89e:	683b      	ldr	r3, [r7, #0]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	4313      	orrs	r3, r2
 800c8a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	4a2b      	ldr	r2, [pc, #172]	@ (800c958 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800c8aa:	401a      	ands	r2, r3
 800c8ac:	683b      	ldr	r3, [r7, #0]
 800c8ae:	691b      	ldr	r3, [r3, #16]
 800c8b0:	4313      	orrs	r3, r2
 800c8b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	4a29      	ldr	r2, [pc, #164]	@ (800c95c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800c8b8:	401a      	ands	r2, r3
 800c8ba:	683b      	ldr	r3, [r7, #0]
 800c8bc:	695b      	ldr	r3, [r3, #20]
 800c8be:	4313      	orrs	r3, r2
 800c8c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	4a26      	ldr	r2, [pc, #152]	@ (800c960 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800c8c6:	401a      	ands	r2, r3
 800c8c8:	683b      	ldr	r3, [r7, #0]
 800c8ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c8cc:	4313      	orrs	r3, r2
 800c8ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	4a24      	ldr	r2, [pc, #144]	@ (800c964 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800c8d4:	401a      	ands	r2, r3
 800c8d6:	683b      	ldr	r3, [r7, #0]
 800c8d8:	699b      	ldr	r3, [r3, #24]
 800c8da:	041b      	lsls	r3, r3, #16
 800c8dc:	4313      	orrs	r3, r2
 800c8de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	4a21      	ldr	r2, [pc, #132]	@ (800c968 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800c8e4:	401a      	ands	r2, r3
 800c8e6:	683b      	ldr	r3, [r7, #0]
 800c8e8:	69db      	ldr	r3, [r3, #28]
 800c8ea:	4313      	orrs	r3, r2
 800c8ec:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	4a1e      	ldr	r2, [pc, #120]	@ (800c96c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800c8f4:	4293      	cmp	r3, r2
 800c8f6:	d11c      	bne.n	800c932 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	4a1d      	ldr	r2, [pc, #116]	@ (800c970 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800c8fc:	401a      	ands	r2, r3
 800c8fe:	683b      	ldr	r3, [r7, #0]
 800c900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c902:	051b      	lsls	r3, r3, #20
 800c904:	4313      	orrs	r3, r2
 800c906:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	4a1a      	ldr	r2, [pc, #104]	@ (800c974 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800c90c:	401a      	ands	r2, r3
 800c90e:	683b      	ldr	r3, [r7, #0]
 800c910:	6a1b      	ldr	r3, [r3, #32]
 800c912:	4313      	orrs	r3, r2
 800c914:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	4a17      	ldr	r2, [pc, #92]	@ (800c978 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800c91a:	401a      	ands	r2, r3
 800c91c:	683b      	ldr	r3, [r7, #0]
 800c91e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c920:	4313      	orrs	r3, r2
 800c922:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	4a15      	ldr	r2, [pc, #84]	@ (800c97c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800c928:	401a      	ands	r2, r3
 800c92a:	683b      	ldr	r3, [r7, #0]
 800c92c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c92e:	4313      	orrs	r3, r2
 800c930:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	68fa      	ldr	r2, [r7, #12]
 800c938:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	223c      	movs	r2, #60	@ 0x3c
 800c93e:	2100      	movs	r1, #0
 800c940:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c942:	2300      	movs	r3, #0
}
 800c944:	0018      	movs	r0, r3
 800c946:	46bd      	mov	sp, r7
 800c948:	b004      	add	sp, #16
 800c94a:	bd80      	pop	{r7, pc}
 800c94c:	fffffcff 	.word	0xfffffcff
 800c950:	fffffbff 	.word	0xfffffbff
 800c954:	fffff7ff 	.word	0xfffff7ff
 800c958:	ffffefff 	.word	0xffffefff
 800c95c:	ffffdfff 	.word	0xffffdfff
 800c960:	ffffbfff 	.word	0xffffbfff
 800c964:	fff0ffff 	.word	0xfff0ffff
 800c968:	efffffff 	.word	0xefffffff
 800c96c:	40012c00 	.word	0x40012c00
 800c970:	ff0fffff 	.word	0xff0fffff
 800c974:	feffffff 	.word	0xfeffffff
 800c978:	fdffffff 	.word	0xfdffffff
 800c97c:	dfffffff 	.word	0xdfffffff

0800c980 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c980:	b580      	push	{r7, lr}
 800c982:	b082      	sub	sp, #8
 800c984:	af00      	add	r7, sp, #0
 800c986:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d101      	bne.n	800c992 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c98e:	2301      	movs	r3, #1
 800c990:	e046      	b.n	800ca20 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	2288      	movs	r2, #136	@ 0x88
 800c996:	589b      	ldr	r3, [r3, r2]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d107      	bne.n	800c9ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	2284      	movs	r2, #132	@ 0x84
 800c9a0:	2100      	movs	r1, #0
 800c9a2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	0018      	movs	r0, r3
 800c9a8:	f7fa febe 	bl	8007728 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	2288      	movs	r2, #136	@ 0x88
 800c9b0:	2124      	movs	r1, #36	@ 0x24
 800c9b2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	681a      	ldr	r2, [r3, #0]
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	2101      	movs	r1, #1
 800c9c0:	438a      	bics	r2, r1
 800c9c2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d003      	beq.n	800c9d4 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	0018      	movs	r0, r3
 800c9d0:	f000 fd0c 	bl	800d3ec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	0018      	movs	r0, r3
 800c9d8:	f000 f9b2 	bl	800cd40 <UART_SetConfig>
 800c9dc:	0003      	movs	r3, r0
 800c9de:	2b01      	cmp	r3, #1
 800c9e0:	d101      	bne.n	800c9e6 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800c9e2:	2301      	movs	r3, #1
 800c9e4:	e01c      	b.n	800ca20 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	685a      	ldr	r2, [r3, #4]
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	490d      	ldr	r1, [pc, #52]	@ (800ca28 <HAL_UART_Init+0xa8>)
 800c9f2:	400a      	ands	r2, r1
 800c9f4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	689a      	ldr	r2, [r3, #8]
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	212a      	movs	r1, #42	@ 0x2a
 800ca02:	438a      	bics	r2, r1
 800ca04:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	681a      	ldr	r2, [r3, #0]
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	2101      	movs	r1, #1
 800ca12:	430a      	orrs	r2, r1
 800ca14:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	0018      	movs	r0, r3
 800ca1a:	f000 fd9b 	bl	800d554 <UART_CheckIdleState>
 800ca1e:	0003      	movs	r3, r0
}
 800ca20:	0018      	movs	r0, r3
 800ca22:	46bd      	mov	sp, r7
 800ca24:	b002      	add	sp, #8
 800ca26:	bd80      	pop	{r7, pc}
 800ca28:	ffffb7ff 	.word	0xffffb7ff

0800ca2c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ca2c:	b580      	push	{r7, lr}
 800ca2e:	b08a      	sub	sp, #40	@ 0x28
 800ca30:	af02      	add	r7, sp, #8
 800ca32:	60f8      	str	r0, [r7, #12]
 800ca34:	60b9      	str	r1, [r7, #8]
 800ca36:	603b      	str	r3, [r7, #0]
 800ca38:	1dbb      	adds	r3, r7, #6
 800ca3a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	2288      	movs	r2, #136	@ 0x88
 800ca40:	589b      	ldr	r3, [r3, r2]
 800ca42:	2b20      	cmp	r3, #32
 800ca44:	d000      	beq.n	800ca48 <HAL_UART_Transmit+0x1c>
 800ca46:	e090      	b.n	800cb6a <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 800ca48:	68bb      	ldr	r3, [r7, #8]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d003      	beq.n	800ca56 <HAL_UART_Transmit+0x2a>
 800ca4e:	1dbb      	adds	r3, r7, #6
 800ca50:	881b      	ldrh	r3, [r3, #0]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d101      	bne.n	800ca5a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800ca56:	2301      	movs	r3, #1
 800ca58:	e088      	b.n	800cb6c <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	689a      	ldr	r2, [r3, #8]
 800ca5e:	2380      	movs	r3, #128	@ 0x80
 800ca60:	015b      	lsls	r3, r3, #5
 800ca62:	429a      	cmp	r2, r3
 800ca64:	d109      	bne.n	800ca7a <HAL_UART_Transmit+0x4e>
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	691b      	ldr	r3, [r3, #16]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d105      	bne.n	800ca7a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800ca6e:	68bb      	ldr	r3, [r7, #8]
 800ca70:	2201      	movs	r2, #1
 800ca72:	4013      	ands	r3, r2
 800ca74:	d001      	beq.n	800ca7a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800ca76:	2301      	movs	r3, #1
 800ca78:	e078      	b.n	800cb6c <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	2290      	movs	r2, #144	@ 0x90
 800ca7e:	2100      	movs	r1, #0
 800ca80:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	2288      	movs	r2, #136	@ 0x88
 800ca86:	2121      	movs	r1, #33	@ 0x21
 800ca88:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ca8a:	f7fb fdef 	bl	800866c <HAL_GetTick>
 800ca8e:	0003      	movs	r3, r0
 800ca90:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	1dba      	adds	r2, r7, #6
 800ca96:	2154      	movs	r1, #84	@ 0x54
 800ca98:	8812      	ldrh	r2, [r2, #0]
 800ca9a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	1dba      	adds	r2, r7, #6
 800caa0:	2156      	movs	r1, #86	@ 0x56
 800caa2:	8812      	ldrh	r2, [r2, #0]
 800caa4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	689a      	ldr	r2, [r3, #8]
 800caaa:	2380      	movs	r3, #128	@ 0x80
 800caac:	015b      	lsls	r3, r3, #5
 800caae:	429a      	cmp	r2, r3
 800cab0:	d108      	bne.n	800cac4 <HAL_UART_Transmit+0x98>
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	691b      	ldr	r3, [r3, #16]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d104      	bne.n	800cac4 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800caba:	2300      	movs	r3, #0
 800cabc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800cabe:	68bb      	ldr	r3, [r7, #8]
 800cac0:	61bb      	str	r3, [r7, #24]
 800cac2:	e003      	b.n	800cacc <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 800cac4:	68bb      	ldr	r3, [r7, #8]
 800cac6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cac8:	2300      	movs	r3, #0
 800caca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800cacc:	e030      	b.n	800cb30 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cace:	697a      	ldr	r2, [r7, #20]
 800cad0:	68f8      	ldr	r0, [r7, #12]
 800cad2:	683b      	ldr	r3, [r7, #0]
 800cad4:	9300      	str	r3, [sp, #0]
 800cad6:	0013      	movs	r3, r2
 800cad8:	2200      	movs	r2, #0
 800cada:	2180      	movs	r1, #128	@ 0x80
 800cadc:	f000 fde4 	bl	800d6a8 <UART_WaitOnFlagUntilTimeout>
 800cae0:	1e03      	subs	r3, r0, #0
 800cae2:	d005      	beq.n	800caf0 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	2288      	movs	r2, #136	@ 0x88
 800cae8:	2120      	movs	r1, #32
 800caea:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 800caec:	2303      	movs	r3, #3
 800caee:	e03d      	b.n	800cb6c <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 800caf0:	69fb      	ldr	r3, [r7, #28]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d10b      	bne.n	800cb0e <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800caf6:	69bb      	ldr	r3, [r7, #24]
 800caf8:	881b      	ldrh	r3, [r3, #0]
 800cafa:	001a      	movs	r2, r3
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	05d2      	lsls	r2, r2, #23
 800cb02:	0dd2      	lsrs	r2, r2, #23
 800cb04:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800cb06:	69bb      	ldr	r3, [r7, #24]
 800cb08:	3302      	adds	r3, #2
 800cb0a:	61bb      	str	r3, [r7, #24]
 800cb0c:	e007      	b.n	800cb1e <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800cb0e:	69fb      	ldr	r3, [r7, #28]
 800cb10:	781a      	ldrb	r2, [r3, #0]
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800cb18:	69fb      	ldr	r3, [r7, #28]
 800cb1a:	3301      	adds	r3, #1
 800cb1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	2256      	movs	r2, #86	@ 0x56
 800cb22:	5a9b      	ldrh	r3, [r3, r2]
 800cb24:	b29b      	uxth	r3, r3
 800cb26:	3b01      	subs	r3, #1
 800cb28:	b299      	uxth	r1, r3
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	2256      	movs	r2, #86	@ 0x56
 800cb2e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	2256      	movs	r2, #86	@ 0x56
 800cb34:	5a9b      	ldrh	r3, [r3, r2]
 800cb36:	b29b      	uxth	r3, r3
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d1c8      	bne.n	800cace <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800cb3c:	697a      	ldr	r2, [r7, #20]
 800cb3e:	68f8      	ldr	r0, [r7, #12]
 800cb40:	683b      	ldr	r3, [r7, #0]
 800cb42:	9300      	str	r3, [sp, #0]
 800cb44:	0013      	movs	r3, r2
 800cb46:	2200      	movs	r2, #0
 800cb48:	2140      	movs	r1, #64	@ 0x40
 800cb4a:	f000 fdad 	bl	800d6a8 <UART_WaitOnFlagUntilTimeout>
 800cb4e:	1e03      	subs	r3, r0, #0
 800cb50:	d005      	beq.n	800cb5e <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	2288      	movs	r2, #136	@ 0x88
 800cb56:	2120      	movs	r1, #32
 800cb58:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 800cb5a:	2303      	movs	r3, #3
 800cb5c:	e006      	b.n	800cb6c <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	2288      	movs	r2, #136	@ 0x88
 800cb62:	2120      	movs	r1, #32
 800cb64:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800cb66:	2300      	movs	r3, #0
 800cb68:	e000      	b.n	800cb6c <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 800cb6a:	2302      	movs	r3, #2
  }
}
 800cb6c:	0018      	movs	r0, r3
 800cb6e:	46bd      	mov	sp, r7
 800cb70:	b008      	add	sp, #32
 800cb72:	bd80      	pop	{r7, pc}

0800cb74 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cb74:	b580      	push	{r7, lr}
 800cb76:	b08a      	sub	sp, #40	@ 0x28
 800cb78:	af02      	add	r7, sp, #8
 800cb7a:	60f8      	str	r0, [r7, #12]
 800cb7c:	60b9      	str	r1, [r7, #8]
 800cb7e:	603b      	str	r3, [r7, #0]
 800cb80:	1dbb      	adds	r3, r7, #6
 800cb82:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	228c      	movs	r2, #140	@ 0x8c
 800cb88:	589b      	ldr	r3, [r3, r2]
 800cb8a:	2b20      	cmp	r3, #32
 800cb8c:	d000      	beq.n	800cb90 <HAL_UART_Receive+0x1c>
 800cb8e:	e0d0      	b.n	800cd32 <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 800cb90:	68bb      	ldr	r3, [r7, #8]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d003      	beq.n	800cb9e <HAL_UART_Receive+0x2a>
 800cb96:	1dbb      	adds	r3, r7, #6
 800cb98:	881b      	ldrh	r3, [r3, #0]
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d101      	bne.n	800cba2 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 800cb9e:	2301      	movs	r3, #1
 800cba0:	e0c8      	b.n	800cd34 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	689a      	ldr	r2, [r3, #8]
 800cba6:	2380      	movs	r3, #128	@ 0x80
 800cba8:	015b      	lsls	r3, r3, #5
 800cbaa:	429a      	cmp	r2, r3
 800cbac:	d109      	bne.n	800cbc2 <HAL_UART_Receive+0x4e>
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	691b      	ldr	r3, [r3, #16]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d105      	bne.n	800cbc2 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800cbb6:	68bb      	ldr	r3, [r7, #8]
 800cbb8:	2201      	movs	r2, #1
 800cbba:	4013      	ands	r3, r2
 800cbbc:	d001      	beq.n	800cbc2 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 800cbbe:	2301      	movs	r3, #1
 800cbc0:	e0b8      	b.n	800cd34 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	2290      	movs	r2, #144	@ 0x90
 800cbc6:	2100      	movs	r1, #0
 800cbc8:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	228c      	movs	r2, #140	@ 0x8c
 800cbce:	2122      	movs	r1, #34	@ 0x22
 800cbd0:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	2200      	movs	r2, #0
 800cbd6:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cbd8:	f7fb fd48 	bl	800866c <HAL_GetTick>
 800cbdc:	0003      	movs	r3, r0
 800cbde:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	1dba      	adds	r2, r7, #6
 800cbe4:	215c      	movs	r1, #92	@ 0x5c
 800cbe6:	8812      	ldrh	r2, [r2, #0]
 800cbe8:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	1dba      	adds	r2, r7, #6
 800cbee:	215e      	movs	r1, #94	@ 0x5e
 800cbf0:	8812      	ldrh	r2, [r2, #0]
 800cbf2:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	689a      	ldr	r2, [r3, #8]
 800cbf8:	2380      	movs	r3, #128	@ 0x80
 800cbfa:	015b      	lsls	r3, r3, #5
 800cbfc:	429a      	cmp	r2, r3
 800cbfe:	d10d      	bne.n	800cc1c <HAL_UART_Receive+0xa8>
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	691b      	ldr	r3, [r3, #16]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d104      	bne.n	800cc12 <HAL_UART_Receive+0x9e>
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	2260      	movs	r2, #96	@ 0x60
 800cc0c:	494b      	ldr	r1, [pc, #300]	@ (800cd3c <HAL_UART_Receive+0x1c8>)
 800cc0e:	5299      	strh	r1, [r3, r2]
 800cc10:	e02e      	b.n	800cc70 <HAL_UART_Receive+0xfc>
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	2260      	movs	r2, #96	@ 0x60
 800cc16:	21ff      	movs	r1, #255	@ 0xff
 800cc18:	5299      	strh	r1, [r3, r2]
 800cc1a:	e029      	b.n	800cc70 <HAL_UART_Receive+0xfc>
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	689b      	ldr	r3, [r3, #8]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d10d      	bne.n	800cc40 <HAL_UART_Receive+0xcc>
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	691b      	ldr	r3, [r3, #16]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d104      	bne.n	800cc36 <HAL_UART_Receive+0xc2>
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	2260      	movs	r2, #96	@ 0x60
 800cc30:	21ff      	movs	r1, #255	@ 0xff
 800cc32:	5299      	strh	r1, [r3, r2]
 800cc34:	e01c      	b.n	800cc70 <HAL_UART_Receive+0xfc>
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	2260      	movs	r2, #96	@ 0x60
 800cc3a:	217f      	movs	r1, #127	@ 0x7f
 800cc3c:	5299      	strh	r1, [r3, r2]
 800cc3e:	e017      	b.n	800cc70 <HAL_UART_Receive+0xfc>
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	689a      	ldr	r2, [r3, #8]
 800cc44:	2380      	movs	r3, #128	@ 0x80
 800cc46:	055b      	lsls	r3, r3, #21
 800cc48:	429a      	cmp	r2, r3
 800cc4a:	d10d      	bne.n	800cc68 <HAL_UART_Receive+0xf4>
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	691b      	ldr	r3, [r3, #16]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d104      	bne.n	800cc5e <HAL_UART_Receive+0xea>
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	2260      	movs	r2, #96	@ 0x60
 800cc58:	217f      	movs	r1, #127	@ 0x7f
 800cc5a:	5299      	strh	r1, [r3, r2]
 800cc5c:	e008      	b.n	800cc70 <HAL_UART_Receive+0xfc>
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	2260      	movs	r2, #96	@ 0x60
 800cc62:	213f      	movs	r1, #63	@ 0x3f
 800cc64:	5299      	strh	r1, [r3, r2]
 800cc66:	e003      	b.n	800cc70 <HAL_UART_Receive+0xfc>
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	2260      	movs	r2, #96	@ 0x60
 800cc6c:	2100      	movs	r1, #0
 800cc6e:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 800cc70:	2312      	movs	r3, #18
 800cc72:	18fb      	adds	r3, r7, r3
 800cc74:	68fa      	ldr	r2, [r7, #12]
 800cc76:	2160      	movs	r1, #96	@ 0x60
 800cc78:	5a52      	ldrh	r2, [r2, r1]
 800cc7a:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	689a      	ldr	r2, [r3, #8]
 800cc80:	2380      	movs	r3, #128	@ 0x80
 800cc82:	015b      	lsls	r3, r3, #5
 800cc84:	429a      	cmp	r2, r3
 800cc86:	d108      	bne.n	800cc9a <HAL_UART_Receive+0x126>
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	691b      	ldr	r3, [r3, #16]
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d104      	bne.n	800cc9a <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 800cc90:	2300      	movs	r3, #0
 800cc92:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800cc94:	68bb      	ldr	r3, [r7, #8]
 800cc96:	61bb      	str	r3, [r7, #24]
 800cc98:	e003      	b.n	800cca2 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 800cc9a:	68bb      	ldr	r3, [r7, #8]
 800cc9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cc9e:	2300      	movs	r3, #0
 800cca0:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800cca2:	e03a      	b.n	800cd1a <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800cca4:	697a      	ldr	r2, [r7, #20]
 800cca6:	68f8      	ldr	r0, [r7, #12]
 800cca8:	683b      	ldr	r3, [r7, #0]
 800ccaa:	9300      	str	r3, [sp, #0]
 800ccac:	0013      	movs	r3, r2
 800ccae:	2200      	movs	r2, #0
 800ccb0:	2120      	movs	r1, #32
 800ccb2:	f000 fcf9 	bl	800d6a8 <UART_WaitOnFlagUntilTimeout>
 800ccb6:	1e03      	subs	r3, r0, #0
 800ccb8:	d005      	beq.n	800ccc6 <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	228c      	movs	r2, #140	@ 0x8c
 800ccbe:	2120      	movs	r1, #32
 800ccc0:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 800ccc2:	2303      	movs	r3, #3
 800ccc4:	e036      	b.n	800cd34 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 800ccc6:	69fb      	ldr	r3, [r7, #28]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d10e      	bne.n	800ccea <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ccd2:	b29b      	uxth	r3, r3
 800ccd4:	2212      	movs	r2, #18
 800ccd6:	18ba      	adds	r2, r7, r2
 800ccd8:	8812      	ldrh	r2, [r2, #0]
 800ccda:	4013      	ands	r3, r2
 800ccdc:	b29a      	uxth	r2, r3
 800ccde:	69bb      	ldr	r3, [r7, #24]
 800cce0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800cce2:	69bb      	ldr	r3, [r7, #24]
 800cce4:	3302      	adds	r3, #2
 800cce6:	61bb      	str	r3, [r7, #24]
 800cce8:	e00e      	b.n	800cd08 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ccf0:	b2db      	uxtb	r3, r3
 800ccf2:	2212      	movs	r2, #18
 800ccf4:	18ba      	adds	r2, r7, r2
 800ccf6:	8812      	ldrh	r2, [r2, #0]
 800ccf8:	b2d2      	uxtb	r2, r2
 800ccfa:	4013      	ands	r3, r2
 800ccfc:	b2da      	uxtb	r2, r3
 800ccfe:	69fb      	ldr	r3, [r7, #28]
 800cd00:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800cd02:	69fb      	ldr	r3, [r7, #28]
 800cd04:	3301      	adds	r3, #1
 800cd06:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	225e      	movs	r2, #94	@ 0x5e
 800cd0c:	5a9b      	ldrh	r3, [r3, r2]
 800cd0e:	b29b      	uxth	r3, r3
 800cd10:	3b01      	subs	r3, #1
 800cd12:	b299      	uxth	r1, r3
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	225e      	movs	r2, #94	@ 0x5e
 800cd18:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	225e      	movs	r2, #94	@ 0x5e
 800cd1e:	5a9b      	ldrh	r3, [r3, r2]
 800cd20:	b29b      	uxth	r3, r3
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d1be      	bne.n	800cca4 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	228c      	movs	r2, #140	@ 0x8c
 800cd2a:	2120      	movs	r1, #32
 800cd2c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800cd2e:	2300      	movs	r3, #0
 800cd30:	e000      	b.n	800cd34 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 800cd32:	2302      	movs	r3, #2
  }
}
 800cd34:	0018      	movs	r0, r3
 800cd36:	46bd      	mov	sp, r7
 800cd38:	b008      	add	sp, #32
 800cd3a:	bd80      	pop	{r7, pc}
 800cd3c:	000001ff 	.word	0x000001ff

0800cd40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cd40:	b5b0      	push	{r4, r5, r7, lr}
 800cd42:	b090      	sub	sp, #64	@ 0x40
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cd48:	231a      	movs	r3, #26
 800cd4a:	2220      	movs	r2, #32
 800cd4c:	189b      	adds	r3, r3, r2
 800cd4e:	19db      	adds	r3, r3, r7
 800cd50:	2200      	movs	r2, #0
 800cd52:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cd54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd56:	689a      	ldr	r2, [r3, #8]
 800cd58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd5a:	691b      	ldr	r3, [r3, #16]
 800cd5c:	431a      	orrs	r2, r3
 800cd5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd60:	695b      	ldr	r3, [r3, #20]
 800cd62:	431a      	orrs	r2, r3
 800cd64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd66:	69db      	ldr	r3, [r3, #28]
 800cd68:	4313      	orrs	r3, r2
 800cd6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cd6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	4ac1      	ldr	r2, [pc, #772]	@ (800d078 <UART_SetConfig+0x338>)
 800cd74:	4013      	ands	r3, r2
 800cd76:	0019      	movs	r1, r3
 800cd78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd7a:	681a      	ldr	r2, [r3, #0]
 800cd7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd7e:	430b      	orrs	r3, r1
 800cd80:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cd82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	685b      	ldr	r3, [r3, #4]
 800cd88:	4abc      	ldr	r2, [pc, #752]	@ (800d07c <UART_SetConfig+0x33c>)
 800cd8a:	4013      	ands	r3, r2
 800cd8c:	0018      	movs	r0, r3
 800cd8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd90:	68d9      	ldr	r1, [r3, #12]
 800cd92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd94:	681a      	ldr	r2, [r3, #0]
 800cd96:	0003      	movs	r3, r0
 800cd98:	430b      	orrs	r3, r1
 800cd9a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cd9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd9e:	699b      	ldr	r3, [r3, #24]
 800cda0:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cda2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	4ab6      	ldr	r2, [pc, #728]	@ (800d080 <UART_SetConfig+0x340>)
 800cda8:	4293      	cmp	r3, r2
 800cdaa:	d009      	beq.n	800cdc0 <UART_SetConfig+0x80>
 800cdac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	4ab4      	ldr	r2, [pc, #720]	@ (800d084 <UART_SetConfig+0x344>)
 800cdb2:	4293      	cmp	r3, r2
 800cdb4:	d004      	beq.n	800cdc0 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800cdb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdb8:	6a1b      	ldr	r3, [r3, #32]
 800cdba:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800cdbc:	4313      	orrs	r3, r2
 800cdbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cdc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	689b      	ldr	r3, [r3, #8]
 800cdc6:	4ab0      	ldr	r2, [pc, #704]	@ (800d088 <UART_SetConfig+0x348>)
 800cdc8:	4013      	ands	r3, r2
 800cdca:	0019      	movs	r1, r3
 800cdcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdce:	681a      	ldr	r2, [r3, #0]
 800cdd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cdd2:	430b      	orrs	r3, r1
 800cdd4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800cdd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cddc:	220f      	movs	r2, #15
 800cdde:	4393      	bics	r3, r2
 800cde0:	0018      	movs	r0, r3
 800cde2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cde4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800cde6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cde8:	681a      	ldr	r2, [r3, #0]
 800cdea:	0003      	movs	r3, r0
 800cdec:	430b      	orrs	r3, r1
 800cdee:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cdf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	4aa5      	ldr	r2, [pc, #660]	@ (800d08c <UART_SetConfig+0x34c>)
 800cdf6:	4293      	cmp	r3, r2
 800cdf8:	d131      	bne.n	800ce5e <UART_SetConfig+0x11e>
 800cdfa:	4ba5      	ldr	r3, [pc, #660]	@ (800d090 <UART_SetConfig+0x350>)
 800cdfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cdfe:	2203      	movs	r2, #3
 800ce00:	4013      	ands	r3, r2
 800ce02:	2b03      	cmp	r3, #3
 800ce04:	d01d      	beq.n	800ce42 <UART_SetConfig+0x102>
 800ce06:	d823      	bhi.n	800ce50 <UART_SetConfig+0x110>
 800ce08:	2b02      	cmp	r3, #2
 800ce0a:	d00c      	beq.n	800ce26 <UART_SetConfig+0xe6>
 800ce0c:	d820      	bhi.n	800ce50 <UART_SetConfig+0x110>
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d002      	beq.n	800ce18 <UART_SetConfig+0xd8>
 800ce12:	2b01      	cmp	r3, #1
 800ce14:	d00e      	beq.n	800ce34 <UART_SetConfig+0xf4>
 800ce16:	e01b      	b.n	800ce50 <UART_SetConfig+0x110>
 800ce18:	231b      	movs	r3, #27
 800ce1a:	2220      	movs	r2, #32
 800ce1c:	189b      	adds	r3, r3, r2
 800ce1e:	19db      	adds	r3, r3, r7
 800ce20:	2200      	movs	r2, #0
 800ce22:	701a      	strb	r2, [r3, #0]
 800ce24:	e154      	b.n	800d0d0 <UART_SetConfig+0x390>
 800ce26:	231b      	movs	r3, #27
 800ce28:	2220      	movs	r2, #32
 800ce2a:	189b      	adds	r3, r3, r2
 800ce2c:	19db      	adds	r3, r3, r7
 800ce2e:	2202      	movs	r2, #2
 800ce30:	701a      	strb	r2, [r3, #0]
 800ce32:	e14d      	b.n	800d0d0 <UART_SetConfig+0x390>
 800ce34:	231b      	movs	r3, #27
 800ce36:	2220      	movs	r2, #32
 800ce38:	189b      	adds	r3, r3, r2
 800ce3a:	19db      	adds	r3, r3, r7
 800ce3c:	2204      	movs	r2, #4
 800ce3e:	701a      	strb	r2, [r3, #0]
 800ce40:	e146      	b.n	800d0d0 <UART_SetConfig+0x390>
 800ce42:	231b      	movs	r3, #27
 800ce44:	2220      	movs	r2, #32
 800ce46:	189b      	adds	r3, r3, r2
 800ce48:	19db      	adds	r3, r3, r7
 800ce4a:	2208      	movs	r2, #8
 800ce4c:	701a      	strb	r2, [r3, #0]
 800ce4e:	e13f      	b.n	800d0d0 <UART_SetConfig+0x390>
 800ce50:	231b      	movs	r3, #27
 800ce52:	2220      	movs	r2, #32
 800ce54:	189b      	adds	r3, r3, r2
 800ce56:	19db      	adds	r3, r3, r7
 800ce58:	2210      	movs	r2, #16
 800ce5a:	701a      	strb	r2, [r3, #0]
 800ce5c:	e138      	b.n	800d0d0 <UART_SetConfig+0x390>
 800ce5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	4a8c      	ldr	r2, [pc, #560]	@ (800d094 <UART_SetConfig+0x354>)
 800ce64:	4293      	cmp	r3, r2
 800ce66:	d131      	bne.n	800cecc <UART_SetConfig+0x18c>
 800ce68:	4b89      	ldr	r3, [pc, #548]	@ (800d090 <UART_SetConfig+0x350>)
 800ce6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ce6c:	220c      	movs	r2, #12
 800ce6e:	4013      	ands	r3, r2
 800ce70:	2b0c      	cmp	r3, #12
 800ce72:	d01d      	beq.n	800ceb0 <UART_SetConfig+0x170>
 800ce74:	d823      	bhi.n	800cebe <UART_SetConfig+0x17e>
 800ce76:	2b08      	cmp	r3, #8
 800ce78:	d00c      	beq.n	800ce94 <UART_SetConfig+0x154>
 800ce7a:	d820      	bhi.n	800cebe <UART_SetConfig+0x17e>
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d002      	beq.n	800ce86 <UART_SetConfig+0x146>
 800ce80:	2b04      	cmp	r3, #4
 800ce82:	d00e      	beq.n	800cea2 <UART_SetConfig+0x162>
 800ce84:	e01b      	b.n	800cebe <UART_SetConfig+0x17e>
 800ce86:	231b      	movs	r3, #27
 800ce88:	2220      	movs	r2, #32
 800ce8a:	189b      	adds	r3, r3, r2
 800ce8c:	19db      	adds	r3, r3, r7
 800ce8e:	2200      	movs	r2, #0
 800ce90:	701a      	strb	r2, [r3, #0]
 800ce92:	e11d      	b.n	800d0d0 <UART_SetConfig+0x390>
 800ce94:	231b      	movs	r3, #27
 800ce96:	2220      	movs	r2, #32
 800ce98:	189b      	adds	r3, r3, r2
 800ce9a:	19db      	adds	r3, r3, r7
 800ce9c:	2202      	movs	r2, #2
 800ce9e:	701a      	strb	r2, [r3, #0]
 800cea0:	e116      	b.n	800d0d0 <UART_SetConfig+0x390>
 800cea2:	231b      	movs	r3, #27
 800cea4:	2220      	movs	r2, #32
 800cea6:	189b      	adds	r3, r3, r2
 800cea8:	19db      	adds	r3, r3, r7
 800ceaa:	2204      	movs	r2, #4
 800ceac:	701a      	strb	r2, [r3, #0]
 800ceae:	e10f      	b.n	800d0d0 <UART_SetConfig+0x390>
 800ceb0:	231b      	movs	r3, #27
 800ceb2:	2220      	movs	r2, #32
 800ceb4:	189b      	adds	r3, r3, r2
 800ceb6:	19db      	adds	r3, r3, r7
 800ceb8:	2208      	movs	r2, #8
 800ceba:	701a      	strb	r2, [r3, #0]
 800cebc:	e108      	b.n	800d0d0 <UART_SetConfig+0x390>
 800cebe:	231b      	movs	r3, #27
 800cec0:	2220      	movs	r2, #32
 800cec2:	189b      	adds	r3, r3, r2
 800cec4:	19db      	adds	r3, r3, r7
 800cec6:	2210      	movs	r2, #16
 800cec8:	701a      	strb	r2, [r3, #0]
 800ceca:	e101      	b.n	800d0d0 <UART_SetConfig+0x390>
 800cecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	4a71      	ldr	r2, [pc, #452]	@ (800d098 <UART_SetConfig+0x358>)
 800ced2:	4293      	cmp	r3, r2
 800ced4:	d131      	bne.n	800cf3a <UART_SetConfig+0x1fa>
 800ced6:	4b6e      	ldr	r3, [pc, #440]	@ (800d090 <UART_SetConfig+0x350>)
 800ced8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ceda:	2230      	movs	r2, #48	@ 0x30
 800cedc:	4013      	ands	r3, r2
 800cede:	2b30      	cmp	r3, #48	@ 0x30
 800cee0:	d01d      	beq.n	800cf1e <UART_SetConfig+0x1de>
 800cee2:	d823      	bhi.n	800cf2c <UART_SetConfig+0x1ec>
 800cee4:	2b20      	cmp	r3, #32
 800cee6:	d00c      	beq.n	800cf02 <UART_SetConfig+0x1c2>
 800cee8:	d820      	bhi.n	800cf2c <UART_SetConfig+0x1ec>
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d002      	beq.n	800cef4 <UART_SetConfig+0x1b4>
 800ceee:	2b10      	cmp	r3, #16
 800cef0:	d00e      	beq.n	800cf10 <UART_SetConfig+0x1d0>
 800cef2:	e01b      	b.n	800cf2c <UART_SetConfig+0x1ec>
 800cef4:	231b      	movs	r3, #27
 800cef6:	2220      	movs	r2, #32
 800cef8:	189b      	adds	r3, r3, r2
 800cefa:	19db      	adds	r3, r3, r7
 800cefc:	2200      	movs	r2, #0
 800cefe:	701a      	strb	r2, [r3, #0]
 800cf00:	e0e6      	b.n	800d0d0 <UART_SetConfig+0x390>
 800cf02:	231b      	movs	r3, #27
 800cf04:	2220      	movs	r2, #32
 800cf06:	189b      	adds	r3, r3, r2
 800cf08:	19db      	adds	r3, r3, r7
 800cf0a:	2202      	movs	r2, #2
 800cf0c:	701a      	strb	r2, [r3, #0]
 800cf0e:	e0df      	b.n	800d0d0 <UART_SetConfig+0x390>
 800cf10:	231b      	movs	r3, #27
 800cf12:	2220      	movs	r2, #32
 800cf14:	189b      	adds	r3, r3, r2
 800cf16:	19db      	adds	r3, r3, r7
 800cf18:	2204      	movs	r2, #4
 800cf1a:	701a      	strb	r2, [r3, #0]
 800cf1c:	e0d8      	b.n	800d0d0 <UART_SetConfig+0x390>
 800cf1e:	231b      	movs	r3, #27
 800cf20:	2220      	movs	r2, #32
 800cf22:	189b      	adds	r3, r3, r2
 800cf24:	19db      	adds	r3, r3, r7
 800cf26:	2208      	movs	r2, #8
 800cf28:	701a      	strb	r2, [r3, #0]
 800cf2a:	e0d1      	b.n	800d0d0 <UART_SetConfig+0x390>
 800cf2c:	231b      	movs	r3, #27
 800cf2e:	2220      	movs	r2, #32
 800cf30:	189b      	adds	r3, r3, r2
 800cf32:	19db      	adds	r3, r3, r7
 800cf34:	2210      	movs	r2, #16
 800cf36:	701a      	strb	r2, [r3, #0]
 800cf38:	e0ca      	b.n	800d0d0 <UART_SetConfig+0x390>
 800cf3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	4a57      	ldr	r2, [pc, #348]	@ (800d09c <UART_SetConfig+0x35c>)
 800cf40:	4293      	cmp	r3, r2
 800cf42:	d106      	bne.n	800cf52 <UART_SetConfig+0x212>
 800cf44:	231b      	movs	r3, #27
 800cf46:	2220      	movs	r2, #32
 800cf48:	189b      	adds	r3, r3, r2
 800cf4a:	19db      	adds	r3, r3, r7
 800cf4c:	2200      	movs	r2, #0
 800cf4e:	701a      	strb	r2, [r3, #0]
 800cf50:	e0be      	b.n	800d0d0 <UART_SetConfig+0x390>
 800cf52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	4a52      	ldr	r2, [pc, #328]	@ (800d0a0 <UART_SetConfig+0x360>)
 800cf58:	4293      	cmp	r3, r2
 800cf5a:	d106      	bne.n	800cf6a <UART_SetConfig+0x22a>
 800cf5c:	231b      	movs	r3, #27
 800cf5e:	2220      	movs	r2, #32
 800cf60:	189b      	adds	r3, r3, r2
 800cf62:	19db      	adds	r3, r3, r7
 800cf64:	2200      	movs	r2, #0
 800cf66:	701a      	strb	r2, [r3, #0]
 800cf68:	e0b2      	b.n	800d0d0 <UART_SetConfig+0x390>
 800cf6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	4a4d      	ldr	r2, [pc, #308]	@ (800d0a4 <UART_SetConfig+0x364>)
 800cf70:	4293      	cmp	r3, r2
 800cf72:	d106      	bne.n	800cf82 <UART_SetConfig+0x242>
 800cf74:	231b      	movs	r3, #27
 800cf76:	2220      	movs	r2, #32
 800cf78:	189b      	adds	r3, r3, r2
 800cf7a:	19db      	adds	r3, r3, r7
 800cf7c:	2200      	movs	r2, #0
 800cf7e:	701a      	strb	r2, [r3, #0]
 800cf80:	e0a6      	b.n	800d0d0 <UART_SetConfig+0x390>
 800cf82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	4a3e      	ldr	r2, [pc, #248]	@ (800d080 <UART_SetConfig+0x340>)
 800cf88:	4293      	cmp	r3, r2
 800cf8a:	d13e      	bne.n	800d00a <UART_SetConfig+0x2ca>
 800cf8c:	4b40      	ldr	r3, [pc, #256]	@ (800d090 <UART_SetConfig+0x350>)
 800cf8e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cf90:	23c0      	movs	r3, #192	@ 0xc0
 800cf92:	011b      	lsls	r3, r3, #4
 800cf94:	4013      	ands	r3, r2
 800cf96:	22c0      	movs	r2, #192	@ 0xc0
 800cf98:	0112      	lsls	r2, r2, #4
 800cf9a:	4293      	cmp	r3, r2
 800cf9c:	d027      	beq.n	800cfee <UART_SetConfig+0x2ae>
 800cf9e:	22c0      	movs	r2, #192	@ 0xc0
 800cfa0:	0112      	lsls	r2, r2, #4
 800cfa2:	4293      	cmp	r3, r2
 800cfa4:	d82a      	bhi.n	800cffc <UART_SetConfig+0x2bc>
 800cfa6:	2280      	movs	r2, #128	@ 0x80
 800cfa8:	0112      	lsls	r2, r2, #4
 800cfaa:	4293      	cmp	r3, r2
 800cfac:	d011      	beq.n	800cfd2 <UART_SetConfig+0x292>
 800cfae:	2280      	movs	r2, #128	@ 0x80
 800cfb0:	0112      	lsls	r2, r2, #4
 800cfb2:	4293      	cmp	r3, r2
 800cfb4:	d822      	bhi.n	800cffc <UART_SetConfig+0x2bc>
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d004      	beq.n	800cfc4 <UART_SetConfig+0x284>
 800cfba:	2280      	movs	r2, #128	@ 0x80
 800cfbc:	00d2      	lsls	r2, r2, #3
 800cfbe:	4293      	cmp	r3, r2
 800cfc0:	d00e      	beq.n	800cfe0 <UART_SetConfig+0x2a0>
 800cfc2:	e01b      	b.n	800cffc <UART_SetConfig+0x2bc>
 800cfc4:	231b      	movs	r3, #27
 800cfc6:	2220      	movs	r2, #32
 800cfc8:	189b      	adds	r3, r3, r2
 800cfca:	19db      	adds	r3, r3, r7
 800cfcc:	2200      	movs	r2, #0
 800cfce:	701a      	strb	r2, [r3, #0]
 800cfd0:	e07e      	b.n	800d0d0 <UART_SetConfig+0x390>
 800cfd2:	231b      	movs	r3, #27
 800cfd4:	2220      	movs	r2, #32
 800cfd6:	189b      	adds	r3, r3, r2
 800cfd8:	19db      	adds	r3, r3, r7
 800cfda:	2202      	movs	r2, #2
 800cfdc:	701a      	strb	r2, [r3, #0]
 800cfde:	e077      	b.n	800d0d0 <UART_SetConfig+0x390>
 800cfe0:	231b      	movs	r3, #27
 800cfe2:	2220      	movs	r2, #32
 800cfe4:	189b      	adds	r3, r3, r2
 800cfe6:	19db      	adds	r3, r3, r7
 800cfe8:	2204      	movs	r2, #4
 800cfea:	701a      	strb	r2, [r3, #0]
 800cfec:	e070      	b.n	800d0d0 <UART_SetConfig+0x390>
 800cfee:	231b      	movs	r3, #27
 800cff0:	2220      	movs	r2, #32
 800cff2:	189b      	adds	r3, r3, r2
 800cff4:	19db      	adds	r3, r3, r7
 800cff6:	2208      	movs	r2, #8
 800cff8:	701a      	strb	r2, [r3, #0]
 800cffa:	e069      	b.n	800d0d0 <UART_SetConfig+0x390>
 800cffc:	231b      	movs	r3, #27
 800cffe:	2220      	movs	r2, #32
 800d000:	189b      	adds	r3, r3, r2
 800d002:	19db      	adds	r3, r3, r7
 800d004:	2210      	movs	r2, #16
 800d006:	701a      	strb	r2, [r3, #0]
 800d008:	e062      	b.n	800d0d0 <UART_SetConfig+0x390>
 800d00a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	4a1d      	ldr	r2, [pc, #116]	@ (800d084 <UART_SetConfig+0x344>)
 800d010:	4293      	cmp	r3, r2
 800d012:	d157      	bne.n	800d0c4 <UART_SetConfig+0x384>
 800d014:	4b1e      	ldr	r3, [pc, #120]	@ (800d090 <UART_SetConfig+0x350>)
 800d016:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d018:	23c0      	movs	r3, #192	@ 0xc0
 800d01a:	009b      	lsls	r3, r3, #2
 800d01c:	4013      	ands	r3, r2
 800d01e:	22c0      	movs	r2, #192	@ 0xc0
 800d020:	0092      	lsls	r2, r2, #2
 800d022:	4293      	cmp	r3, r2
 800d024:	d040      	beq.n	800d0a8 <UART_SetConfig+0x368>
 800d026:	22c0      	movs	r2, #192	@ 0xc0
 800d028:	0092      	lsls	r2, r2, #2
 800d02a:	4293      	cmp	r3, r2
 800d02c:	d843      	bhi.n	800d0b6 <UART_SetConfig+0x376>
 800d02e:	2280      	movs	r2, #128	@ 0x80
 800d030:	0092      	lsls	r2, r2, #2
 800d032:	4293      	cmp	r3, r2
 800d034:	d011      	beq.n	800d05a <UART_SetConfig+0x31a>
 800d036:	2280      	movs	r2, #128	@ 0x80
 800d038:	0092      	lsls	r2, r2, #2
 800d03a:	4293      	cmp	r3, r2
 800d03c:	d83b      	bhi.n	800d0b6 <UART_SetConfig+0x376>
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d004      	beq.n	800d04c <UART_SetConfig+0x30c>
 800d042:	2280      	movs	r2, #128	@ 0x80
 800d044:	0052      	lsls	r2, r2, #1
 800d046:	4293      	cmp	r3, r2
 800d048:	d00e      	beq.n	800d068 <UART_SetConfig+0x328>
 800d04a:	e034      	b.n	800d0b6 <UART_SetConfig+0x376>
 800d04c:	231b      	movs	r3, #27
 800d04e:	2220      	movs	r2, #32
 800d050:	189b      	adds	r3, r3, r2
 800d052:	19db      	adds	r3, r3, r7
 800d054:	2200      	movs	r2, #0
 800d056:	701a      	strb	r2, [r3, #0]
 800d058:	e03a      	b.n	800d0d0 <UART_SetConfig+0x390>
 800d05a:	231b      	movs	r3, #27
 800d05c:	2220      	movs	r2, #32
 800d05e:	189b      	adds	r3, r3, r2
 800d060:	19db      	adds	r3, r3, r7
 800d062:	2202      	movs	r2, #2
 800d064:	701a      	strb	r2, [r3, #0]
 800d066:	e033      	b.n	800d0d0 <UART_SetConfig+0x390>
 800d068:	231b      	movs	r3, #27
 800d06a:	2220      	movs	r2, #32
 800d06c:	189b      	adds	r3, r3, r2
 800d06e:	19db      	adds	r3, r3, r7
 800d070:	2204      	movs	r2, #4
 800d072:	701a      	strb	r2, [r3, #0]
 800d074:	e02c      	b.n	800d0d0 <UART_SetConfig+0x390>
 800d076:	46c0      	nop			@ (mov r8, r8)
 800d078:	cfff69f3 	.word	0xcfff69f3
 800d07c:	ffffcfff 	.word	0xffffcfff
 800d080:	40008000 	.word	0x40008000
 800d084:	40008400 	.word	0x40008400
 800d088:	11fff4ff 	.word	0x11fff4ff
 800d08c:	40013800 	.word	0x40013800
 800d090:	40021000 	.word	0x40021000
 800d094:	40004400 	.word	0x40004400
 800d098:	40004800 	.word	0x40004800
 800d09c:	40004c00 	.word	0x40004c00
 800d0a0:	40005000 	.word	0x40005000
 800d0a4:	40013c00 	.word	0x40013c00
 800d0a8:	231b      	movs	r3, #27
 800d0aa:	2220      	movs	r2, #32
 800d0ac:	189b      	adds	r3, r3, r2
 800d0ae:	19db      	adds	r3, r3, r7
 800d0b0:	2208      	movs	r2, #8
 800d0b2:	701a      	strb	r2, [r3, #0]
 800d0b4:	e00c      	b.n	800d0d0 <UART_SetConfig+0x390>
 800d0b6:	231b      	movs	r3, #27
 800d0b8:	2220      	movs	r2, #32
 800d0ba:	189b      	adds	r3, r3, r2
 800d0bc:	19db      	adds	r3, r3, r7
 800d0be:	2210      	movs	r2, #16
 800d0c0:	701a      	strb	r2, [r3, #0]
 800d0c2:	e005      	b.n	800d0d0 <UART_SetConfig+0x390>
 800d0c4:	231b      	movs	r3, #27
 800d0c6:	2220      	movs	r2, #32
 800d0c8:	189b      	adds	r3, r3, r2
 800d0ca:	19db      	adds	r3, r3, r7
 800d0cc:	2210      	movs	r2, #16
 800d0ce:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d0d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	4ac1      	ldr	r2, [pc, #772]	@ (800d3dc <UART_SetConfig+0x69c>)
 800d0d6:	4293      	cmp	r3, r2
 800d0d8:	d005      	beq.n	800d0e6 <UART_SetConfig+0x3a6>
 800d0da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	4ac0      	ldr	r2, [pc, #768]	@ (800d3e0 <UART_SetConfig+0x6a0>)
 800d0e0:	4293      	cmp	r3, r2
 800d0e2:	d000      	beq.n	800d0e6 <UART_SetConfig+0x3a6>
 800d0e4:	e093      	b.n	800d20e <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d0e6:	231b      	movs	r3, #27
 800d0e8:	2220      	movs	r2, #32
 800d0ea:	189b      	adds	r3, r3, r2
 800d0ec:	19db      	adds	r3, r3, r7
 800d0ee:	781b      	ldrb	r3, [r3, #0]
 800d0f0:	2b08      	cmp	r3, #8
 800d0f2:	d015      	beq.n	800d120 <UART_SetConfig+0x3e0>
 800d0f4:	dc18      	bgt.n	800d128 <UART_SetConfig+0x3e8>
 800d0f6:	2b04      	cmp	r3, #4
 800d0f8:	d00d      	beq.n	800d116 <UART_SetConfig+0x3d6>
 800d0fa:	dc15      	bgt.n	800d128 <UART_SetConfig+0x3e8>
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d002      	beq.n	800d106 <UART_SetConfig+0x3c6>
 800d100:	2b02      	cmp	r3, #2
 800d102:	d005      	beq.n	800d110 <UART_SetConfig+0x3d0>
 800d104:	e010      	b.n	800d128 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d106:	f7fd f931 	bl	800a36c <HAL_RCC_GetPCLK1Freq>
 800d10a:	0003      	movs	r3, r0
 800d10c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d10e:	e014      	b.n	800d13a <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d110:	4bb4      	ldr	r3, [pc, #720]	@ (800d3e4 <UART_SetConfig+0x6a4>)
 800d112:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d114:	e011      	b.n	800d13a <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d116:	f7fd f89d 	bl	800a254 <HAL_RCC_GetSysClockFreq>
 800d11a:	0003      	movs	r3, r0
 800d11c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d11e:	e00c      	b.n	800d13a <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d120:	2380      	movs	r3, #128	@ 0x80
 800d122:	021b      	lsls	r3, r3, #8
 800d124:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d126:	e008      	b.n	800d13a <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 800d128:	2300      	movs	r3, #0
 800d12a:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800d12c:	231a      	movs	r3, #26
 800d12e:	2220      	movs	r2, #32
 800d130:	189b      	adds	r3, r3, r2
 800d132:	19db      	adds	r3, r3, r7
 800d134:	2201      	movs	r2, #1
 800d136:	701a      	strb	r2, [r3, #0]
        break;
 800d138:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d13a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d100      	bne.n	800d142 <UART_SetConfig+0x402>
 800d140:	e135      	b.n	800d3ae <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d144:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d146:	4ba8      	ldr	r3, [pc, #672]	@ (800d3e8 <UART_SetConfig+0x6a8>)
 800d148:	0052      	lsls	r2, r2, #1
 800d14a:	5ad3      	ldrh	r3, [r2, r3]
 800d14c:	0019      	movs	r1, r3
 800d14e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800d150:	f7f2 fffe 	bl	8000150 <__udivsi3>
 800d154:	0003      	movs	r3, r0
 800d156:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d15a:	685a      	ldr	r2, [r3, #4]
 800d15c:	0013      	movs	r3, r2
 800d15e:	005b      	lsls	r3, r3, #1
 800d160:	189b      	adds	r3, r3, r2
 800d162:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d164:	429a      	cmp	r2, r3
 800d166:	d305      	bcc.n	800d174 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d16a:	685b      	ldr	r3, [r3, #4]
 800d16c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d16e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d170:	429a      	cmp	r2, r3
 800d172:	d906      	bls.n	800d182 <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 800d174:	231a      	movs	r3, #26
 800d176:	2220      	movs	r2, #32
 800d178:	189b      	adds	r3, r3, r2
 800d17a:	19db      	adds	r3, r3, r7
 800d17c:	2201      	movs	r2, #1
 800d17e:	701a      	strb	r2, [r3, #0]
 800d180:	e044      	b.n	800d20c <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d182:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d184:	61bb      	str	r3, [r7, #24]
 800d186:	2300      	movs	r3, #0
 800d188:	61fb      	str	r3, [r7, #28]
 800d18a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d18c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d18e:	4b96      	ldr	r3, [pc, #600]	@ (800d3e8 <UART_SetConfig+0x6a8>)
 800d190:	0052      	lsls	r2, r2, #1
 800d192:	5ad3      	ldrh	r3, [r2, r3]
 800d194:	613b      	str	r3, [r7, #16]
 800d196:	2300      	movs	r3, #0
 800d198:	617b      	str	r3, [r7, #20]
 800d19a:	693a      	ldr	r2, [r7, #16]
 800d19c:	697b      	ldr	r3, [r7, #20]
 800d19e:	69b8      	ldr	r0, [r7, #24]
 800d1a0:	69f9      	ldr	r1, [r7, #28]
 800d1a2:	f7f3 f9c3 	bl	800052c <__aeabi_uldivmod>
 800d1a6:	0002      	movs	r2, r0
 800d1a8:	000b      	movs	r3, r1
 800d1aa:	0e11      	lsrs	r1, r2, #24
 800d1ac:	021d      	lsls	r5, r3, #8
 800d1ae:	430d      	orrs	r5, r1
 800d1b0:	0214      	lsls	r4, r2, #8
 800d1b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1b4:	685b      	ldr	r3, [r3, #4]
 800d1b6:	085b      	lsrs	r3, r3, #1
 800d1b8:	60bb      	str	r3, [r7, #8]
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	60fb      	str	r3, [r7, #12]
 800d1be:	68b8      	ldr	r0, [r7, #8]
 800d1c0:	68f9      	ldr	r1, [r7, #12]
 800d1c2:	1900      	adds	r0, r0, r4
 800d1c4:	4169      	adcs	r1, r5
 800d1c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1c8:	685b      	ldr	r3, [r3, #4]
 800d1ca:	603b      	str	r3, [r7, #0]
 800d1cc:	2300      	movs	r3, #0
 800d1ce:	607b      	str	r3, [r7, #4]
 800d1d0:	683a      	ldr	r2, [r7, #0]
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	f7f3 f9aa 	bl	800052c <__aeabi_uldivmod>
 800d1d8:	0002      	movs	r2, r0
 800d1da:	000b      	movs	r3, r1
 800d1dc:	0013      	movs	r3, r2
 800d1de:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d1e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d1e2:	23c0      	movs	r3, #192	@ 0xc0
 800d1e4:	009b      	lsls	r3, r3, #2
 800d1e6:	429a      	cmp	r2, r3
 800d1e8:	d309      	bcc.n	800d1fe <UART_SetConfig+0x4be>
 800d1ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d1ec:	2380      	movs	r3, #128	@ 0x80
 800d1ee:	035b      	lsls	r3, r3, #13
 800d1f0:	429a      	cmp	r2, r3
 800d1f2:	d204      	bcs.n	800d1fe <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 800d1f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d1fa:	60da      	str	r2, [r3, #12]
 800d1fc:	e006      	b.n	800d20c <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 800d1fe:	231a      	movs	r3, #26
 800d200:	2220      	movs	r2, #32
 800d202:	189b      	adds	r3, r3, r2
 800d204:	19db      	adds	r3, r3, r7
 800d206:	2201      	movs	r2, #1
 800d208:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 800d20a:	e0d0      	b.n	800d3ae <UART_SetConfig+0x66e>
 800d20c:	e0cf      	b.n	800d3ae <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d20e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d210:	69da      	ldr	r2, [r3, #28]
 800d212:	2380      	movs	r3, #128	@ 0x80
 800d214:	021b      	lsls	r3, r3, #8
 800d216:	429a      	cmp	r2, r3
 800d218:	d000      	beq.n	800d21c <UART_SetConfig+0x4dc>
 800d21a:	e070      	b.n	800d2fe <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 800d21c:	231b      	movs	r3, #27
 800d21e:	2220      	movs	r2, #32
 800d220:	189b      	adds	r3, r3, r2
 800d222:	19db      	adds	r3, r3, r7
 800d224:	781b      	ldrb	r3, [r3, #0]
 800d226:	2b08      	cmp	r3, #8
 800d228:	d015      	beq.n	800d256 <UART_SetConfig+0x516>
 800d22a:	dc18      	bgt.n	800d25e <UART_SetConfig+0x51e>
 800d22c:	2b04      	cmp	r3, #4
 800d22e:	d00d      	beq.n	800d24c <UART_SetConfig+0x50c>
 800d230:	dc15      	bgt.n	800d25e <UART_SetConfig+0x51e>
 800d232:	2b00      	cmp	r3, #0
 800d234:	d002      	beq.n	800d23c <UART_SetConfig+0x4fc>
 800d236:	2b02      	cmp	r3, #2
 800d238:	d005      	beq.n	800d246 <UART_SetConfig+0x506>
 800d23a:	e010      	b.n	800d25e <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d23c:	f7fd f896 	bl	800a36c <HAL_RCC_GetPCLK1Freq>
 800d240:	0003      	movs	r3, r0
 800d242:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d244:	e014      	b.n	800d270 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d246:	4b67      	ldr	r3, [pc, #412]	@ (800d3e4 <UART_SetConfig+0x6a4>)
 800d248:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d24a:	e011      	b.n	800d270 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d24c:	f7fd f802 	bl	800a254 <HAL_RCC_GetSysClockFreq>
 800d250:	0003      	movs	r3, r0
 800d252:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d254:	e00c      	b.n	800d270 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d256:	2380      	movs	r3, #128	@ 0x80
 800d258:	021b      	lsls	r3, r3, #8
 800d25a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d25c:	e008      	b.n	800d270 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 800d25e:	2300      	movs	r3, #0
 800d260:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800d262:	231a      	movs	r3, #26
 800d264:	2220      	movs	r2, #32
 800d266:	189b      	adds	r3, r3, r2
 800d268:	19db      	adds	r3, r3, r7
 800d26a:	2201      	movs	r2, #1
 800d26c:	701a      	strb	r2, [r3, #0]
        break;
 800d26e:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d270:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d272:	2b00      	cmp	r3, #0
 800d274:	d100      	bne.n	800d278 <UART_SetConfig+0x538>
 800d276:	e09a      	b.n	800d3ae <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d27a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d27c:	4b5a      	ldr	r3, [pc, #360]	@ (800d3e8 <UART_SetConfig+0x6a8>)
 800d27e:	0052      	lsls	r2, r2, #1
 800d280:	5ad3      	ldrh	r3, [r2, r3]
 800d282:	0019      	movs	r1, r3
 800d284:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800d286:	f7f2 ff63 	bl	8000150 <__udivsi3>
 800d28a:	0003      	movs	r3, r0
 800d28c:	005a      	lsls	r2, r3, #1
 800d28e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d290:	685b      	ldr	r3, [r3, #4]
 800d292:	085b      	lsrs	r3, r3, #1
 800d294:	18d2      	adds	r2, r2, r3
 800d296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d298:	685b      	ldr	r3, [r3, #4]
 800d29a:	0019      	movs	r1, r3
 800d29c:	0010      	movs	r0, r2
 800d29e:	f7f2 ff57 	bl	8000150 <__udivsi3>
 800d2a2:	0003      	movs	r3, r0
 800d2a4:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d2a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2a8:	2b0f      	cmp	r3, #15
 800d2aa:	d921      	bls.n	800d2f0 <UART_SetConfig+0x5b0>
 800d2ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d2ae:	2380      	movs	r3, #128	@ 0x80
 800d2b0:	025b      	lsls	r3, r3, #9
 800d2b2:	429a      	cmp	r2, r3
 800d2b4:	d21c      	bcs.n	800d2f0 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d2b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2b8:	b29a      	uxth	r2, r3
 800d2ba:	200e      	movs	r0, #14
 800d2bc:	2420      	movs	r4, #32
 800d2be:	1903      	adds	r3, r0, r4
 800d2c0:	19db      	adds	r3, r3, r7
 800d2c2:	210f      	movs	r1, #15
 800d2c4:	438a      	bics	r2, r1
 800d2c6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d2c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2ca:	085b      	lsrs	r3, r3, #1
 800d2cc:	b29b      	uxth	r3, r3
 800d2ce:	2207      	movs	r2, #7
 800d2d0:	4013      	ands	r3, r2
 800d2d2:	b299      	uxth	r1, r3
 800d2d4:	1903      	adds	r3, r0, r4
 800d2d6:	19db      	adds	r3, r3, r7
 800d2d8:	1902      	adds	r2, r0, r4
 800d2da:	19d2      	adds	r2, r2, r7
 800d2dc:	8812      	ldrh	r2, [r2, #0]
 800d2de:	430a      	orrs	r2, r1
 800d2e0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800d2e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	1902      	adds	r2, r0, r4
 800d2e8:	19d2      	adds	r2, r2, r7
 800d2ea:	8812      	ldrh	r2, [r2, #0]
 800d2ec:	60da      	str	r2, [r3, #12]
 800d2ee:	e05e      	b.n	800d3ae <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 800d2f0:	231a      	movs	r3, #26
 800d2f2:	2220      	movs	r2, #32
 800d2f4:	189b      	adds	r3, r3, r2
 800d2f6:	19db      	adds	r3, r3, r7
 800d2f8:	2201      	movs	r2, #1
 800d2fa:	701a      	strb	r2, [r3, #0]
 800d2fc:	e057      	b.n	800d3ae <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d2fe:	231b      	movs	r3, #27
 800d300:	2220      	movs	r2, #32
 800d302:	189b      	adds	r3, r3, r2
 800d304:	19db      	adds	r3, r3, r7
 800d306:	781b      	ldrb	r3, [r3, #0]
 800d308:	2b08      	cmp	r3, #8
 800d30a:	d015      	beq.n	800d338 <UART_SetConfig+0x5f8>
 800d30c:	dc18      	bgt.n	800d340 <UART_SetConfig+0x600>
 800d30e:	2b04      	cmp	r3, #4
 800d310:	d00d      	beq.n	800d32e <UART_SetConfig+0x5ee>
 800d312:	dc15      	bgt.n	800d340 <UART_SetConfig+0x600>
 800d314:	2b00      	cmp	r3, #0
 800d316:	d002      	beq.n	800d31e <UART_SetConfig+0x5de>
 800d318:	2b02      	cmp	r3, #2
 800d31a:	d005      	beq.n	800d328 <UART_SetConfig+0x5e8>
 800d31c:	e010      	b.n	800d340 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d31e:	f7fd f825 	bl	800a36c <HAL_RCC_GetPCLK1Freq>
 800d322:	0003      	movs	r3, r0
 800d324:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d326:	e014      	b.n	800d352 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d328:	4b2e      	ldr	r3, [pc, #184]	@ (800d3e4 <UART_SetConfig+0x6a4>)
 800d32a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d32c:	e011      	b.n	800d352 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d32e:	f7fc ff91 	bl	800a254 <HAL_RCC_GetSysClockFreq>
 800d332:	0003      	movs	r3, r0
 800d334:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d336:	e00c      	b.n	800d352 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d338:	2380      	movs	r3, #128	@ 0x80
 800d33a:	021b      	lsls	r3, r3, #8
 800d33c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d33e:	e008      	b.n	800d352 <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 800d340:	2300      	movs	r3, #0
 800d342:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800d344:	231a      	movs	r3, #26
 800d346:	2220      	movs	r2, #32
 800d348:	189b      	adds	r3, r3, r2
 800d34a:	19db      	adds	r3, r3, r7
 800d34c:	2201      	movs	r2, #1
 800d34e:	701a      	strb	r2, [r3, #0]
        break;
 800d350:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800d352:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d354:	2b00      	cmp	r3, #0
 800d356:	d02a      	beq.n	800d3ae <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d35a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d35c:	4b22      	ldr	r3, [pc, #136]	@ (800d3e8 <UART_SetConfig+0x6a8>)
 800d35e:	0052      	lsls	r2, r2, #1
 800d360:	5ad3      	ldrh	r3, [r2, r3]
 800d362:	0019      	movs	r1, r3
 800d364:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800d366:	f7f2 fef3 	bl	8000150 <__udivsi3>
 800d36a:	0003      	movs	r3, r0
 800d36c:	001a      	movs	r2, r3
 800d36e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d370:	685b      	ldr	r3, [r3, #4]
 800d372:	085b      	lsrs	r3, r3, #1
 800d374:	18d2      	adds	r2, r2, r3
 800d376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d378:	685b      	ldr	r3, [r3, #4]
 800d37a:	0019      	movs	r1, r3
 800d37c:	0010      	movs	r0, r2
 800d37e:	f7f2 fee7 	bl	8000150 <__udivsi3>
 800d382:	0003      	movs	r3, r0
 800d384:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d388:	2b0f      	cmp	r3, #15
 800d38a:	d90a      	bls.n	800d3a2 <UART_SetConfig+0x662>
 800d38c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d38e:	2380      	movs	r3, #128	@ 0x80
 800d390:	025b      	lsls	r3, r3, #9
 800d392:	429a      	cmp	r2, r3
 800d394:	d205      	bcs.n	800d3a2 <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d398:	b29a      	uxth	r2, r3
 800d39a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	60da      	str	r2, [r3, #12]
 800d3a0:	e005      	b.n	800d3ae <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 800d3a2:	231a      	movs	r3, #26
 800d3a4:	2220      	movs	r2, #32
 800d3a6:	189b      	adds	r3, r3, r2
 800d3a8:	19db      	adds	r3, r3, r7
 800d3aa:	2201      	movs	r2, #1
 800d3ac:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d3ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3b0:	226a      	movs	r2, #106	@ 0x6a
 800d3b2:	2101      	movs	r1, #1
 800d3b4:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800d3b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3b8:	2268      	movs	r2, #104	@ 0x68
 800d3ba:	2101      	movs	r1, #1
 800d3bc:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d3be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3c0:	2200      	movs	r2, #0
 800d3c2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d3c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3c6:	2200      	movs	r2, #0
 800d3c8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d3ca:	231a      	movs	r3, #26
 800d3cc:	2220      	movs	r2, #32
 800d3ce:	189b      	adds	r3, r3, r2
 800d3d0:	19db      	adds	r3, r3, r7
 800d3d2:	781b      	ldrb	r3, [r3, #0]
}
 800d3d4:	0018      	movs	r0, r3
 800d3d6:	46bd      	mov	sp, r7
 800d3d8:	b010      	add	sp, #64	@ 0x40
 800d3da:	bdb0      	pop	{r4, r5, r7, pc}
 800d3dc:	40008000 	.word	0x40008000
 800d3e0:	40008400 	.word	0x40008400
 800d3e4:	00f42400 	.word	0x00f42400
 800d3e8:	08011da0 	.word	0x08011da0

0800d3ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d3ec:	b580      	push	{r7, lr}
 800d3ee:	b082      	sub	sp, #8
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d3f8:	2208      	movs	r2, #8
 800d3fa:	4013      	ands	r3, r2
 800d3fc:	d00b      	beq.n	800d416 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	685b      	ldr	r3, [r3, #4]
 800d404:	4a4a      	ldr	r2, [pc, #296]	@ (800d530 <UART_AdvFeatureConfig+0x144>)
 800d406:	4013      	ands	r3, r2
 800d408:	0019      	movs	r1, r3
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	430a      	orrs	r2, r1
 800d414:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d41a:	2201      	movs	r2, #1
 800d41c:	4013      	ands	r3, r2
 800d41e:	d00b      	beq.n	800d438 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	685b      	ldr	r3, [r3, #4]
 800d426:	4a43      	ldr	r2, [pc, #268]	@ (800d534 <UART_AdvFeatureConfig+0x148>)
 800d428:	4013      	ands	r3, r2
 800d42a:	0019      	movs	r1, r3
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	430a      	orrs	r2, r1
 800d436:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d43c:	2202      	movs	r2, #2
 800d43e:	4013      	ands	r3, r2
 800d440:	d00b      	beq.n	800d45a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	685b      	ldr	r3, [r3, #4]
 800d448:	4a3b      	ldr	r2, [pc, #236]	@ (800d538 <UART_AdvFeatureConfig+0x14c>)
 800d44a:	4013      	ands	r3, r2
 800d44c:	0019      	movs	r1, r3
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	430a      	orrs	r2, r1
 800d458:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d45e:	2204      	movs	r2, #4
 800d460:	4013      	ands	r3, r2
 800d462:	d00b      	beq.n	800d47c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	685b      	ldr	r3, [r3, #4]
 800d46a:	4a34      	ldr	r2, [pc, #208]	@ (800d53c <UART_AdvFeatureConfig+0x150>)
 800d46c:	4013      	ands	r3, r2
 800d46e:	0019      	movs	r1, r3
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	430a      	orrs	r2, r1
 800d47a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d480:	2210      	movs	r2, #16
 800d482:	4013      	ands	r3, r2
 800d484:	d00b      	beq.n	800d49e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	689b      	ldr	r3, [r3, #8]
 800d48c:	4a2c      	ldr	r2, [pc, #176]	@ (800d540 <UART_AdvFeatureConfig+0x154>)
 800d48e:	4013      	ands	r3, r2
 800d490:	0019      	movs	r1, r3
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	430a      	orrs	r2, r1
 800d49c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d4a2:	2220      	movs	r2, #32
 800d4a4:	4013      	ands	r3, r2
 800d4a6:	d00b      	beq.n	800d4c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	689b      	ldr	r3, [r3, #8]
 800d4ae:	4a25      	ldr	r2, [pc, #148]	@ (800d544 <UART_AdvFeatureConfig+0x158>)
 800d4b0:	4013      	ands	r3, r2
 800d4b2:	0019      	movs	r1, r3
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	430a      	orrs	r2, r1
 800d4be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d4c4:	2240      	movs	r2, #64	@ 0x40
 800d4c6:	4013      	ands	r3, r2
 800d4c8:	d01d      	beq.n	800d506 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	685b      	ldr	r3, [r3, #4]
 800d4d0:	4a1d      	ldr	r2, [pc, #116]	@ (800d548 <UART_AdvFeatureConfig+0x15c>)
 800d4d2:	4013      	ands	r3, r2
 800d4d4:	0019      	movs	r1, r3
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	430a      	orrs	r2, r1
 800d4e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d4e6:	2380      	movs	r3, #128	@ 0x80
 800d4e8:	035b      	lsls	r3, r3, #13
 800d4ea:	429a      	cmp	r2, r3
 800d4ec:	d10b      	bne.n	800d506 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	685b      	ldr	r3, [r3, #4]
 800d4f4:	4a15      	ldr	r2, [pc, #84]	@ (800d54c <UART_AdvFeatureConfig+0x160>)
 800d4f6:	4013      	ands	r3, r2
 800d4f8:	0019      	movs	r1, r3
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	430a      	orrs	r2, r1
 800d504:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d50a:	2280      	movs	r2, #128	@ 0x80
 800d50c:	4013      	ands	r3, r2
 800d50e:	d00b      	beq.n	800d528 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	685b      	ldr	r3, [r3, #4]
 800d516:	4a0e      	ldr	r2, [pc, #56]	@ (800d550 <UART_AdvFeatureConfig+0x164>)
 800d518:	4013      	ands	r3, r2
 800d51a:	0019      	movs	r1, r3
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	430a      	orrs	r2, r1
 800d526:	605a      	str	r2, [r3, #4]
  }
}
 800d528:	46c0      	nop			@ (mov r8, r8)
 800d52a:	46bd      	mov	sp, r7
 800d52c:	b002      	add	sp, #8
 800d52e:	bd80      	pop	{r7, pc}
 800d530:	ffff7fff 	.word	0xffff7fff
 800d534:	fffdffff 	.word	0xfffdffff
 800d538:	fffeffff 	.word	0xfffeffff
 800d53c:	fffbffff 	.word	0xfffbffff
 800d540:	ffffefff 	.word	0xffffefff
 800d544:	ffffdfff 	.word	0xffffdfff
 800d548:	ffefffff 	.word	0xffefffff
 800d54c:	ff9fffff 	.word	0xff9fffff
 800d550:	fff7ffff 	.word	0xfff7ffff

0800d554 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d554:	b580      	push	{r7, lr}
 800d556:	b092      	sub	sp, #72	@ 0x48
 800d558:	af02      	add	r7, sp, #8
 800d55a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	2290      	movs	r2, #144	@ 0x90
 800d560:	2100      	movs	r1, #0
 800d562:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d564:	f7fb f882 	bl	800866c <HAL_GetTick>
 800d568:	0003      	movs	r3, r0
 800d56a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	2208      	movs	r2, #8
 800d574:	4013      	ands	r3, r2
 800d576:	2b08      	cmp	r3, #8
 800d578:	d12d      	bne.n	800d5d6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d57a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d57c:	2280      	movs	r2, #128	@ 0x80
 800d57e:	0391      	lsls	r1, r2, #14
 800d580:	6878      	ldr	r0, [r7, #4]
 800d582:	4a47      	ldr	r2, [pc, #284]	@ (800d6a0 <UART_CheckIdleState+0x14c>)
 800d584:	9200      	str	r2, [sp, #0]
 800d586:	2200      	movs	r2, #0
 800d588:	f000 f88e 	bl	800d6a8 <UART_WaitOnFlagUntilTimeout>
 800d58c:	1e03      	subs	r3, r0, #0
 800d58e:	d022      	beq.n	800d5d6 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d590:	f3ef 8310 	mrs	r3, PRIMASK
 800d594:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800d596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d598:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d59a:	2301      	movs	r3, #1
 800d59c:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d59e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5a0:	f383 8810 	msr	PRIMASK, r3
}
 800d5a4:	46c0      	nop			@ (mov r8, r8)
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	681a      	ldr	r2, [r3, #0]
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	2180      	movs	r1, #128	@ 0x80
 800d5b2:	438a      	bics	r2, r1
 800d5b4:	601a      	str	r2, [r3, #0]
 800d5b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d5ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5bc:	f383 8810 	msr	PRIMASK, r3
}
 800d5c0:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	2288      	movs	r2, #136	@ 0x88
 800d5c6:	2120      	movs	r1, #32
 800d5c8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	2284      	movs	r2, #132	@ 0x84
 800d5ce:	2100      	movs	r1, #0
 800d5d0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d5d2:	2303      	movs	r3, #3
 800d5d4:	e060      	b.n	800d698 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	2204      	movs	r2, #4
 800d5de:	4013      	ands	r3, r2
 800d5e0:	2b04      	cmp	r3, #4
 800d5e2:	d146      	bne.n	800d672 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d5e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d5e6:	2280      	movs	r2, #128	@ 0x80
 800d5e8:	03d1      	lsls	r1, r2, #15
 800d5ea:	6878      	ldr	r0, [r7, #4]
 800d5ec:	4a2c      	ldr	r2, [pc, #176]	@ (800d6a0 <UART_CheckIdleState+0x14c>)
 800d5ee:	9200      	str	r2, [sp, #0]
 800d5f0:	2200      	movs	r2, #0
 800d5f2:	f000 f859 	bl	800d6a8 <UART_WaitOnFlagUntilTimeout>
 800d5f6:	1e03      	subs	r3, r0, #0
 800d5f8:	d03b      	beq.n	800d672 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d5fa:	f3ef 8310 	mrs	r3, PRIMASK
 800d5fe:	60fb      	str	r3, [r7, #12]
  return(result);
 800d600:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d602:	637b      	str	r3, [r7, #52]	@ 0x34
 800d604:	2301      	movs	r3, #1
 800d606:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d608:	693b      	ldr	r3, [r7, #16]
 800d60a:	f383 8810 	msr	PRIMASK, r3
}
 800d60e:	46c0      	nop			@ (mov r8, r8)
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	681a      	ldr	r2, [r3, #0]
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	4922      	ldr	r1, [pc, #136]	@ (800d6a4 <UART_CheckIdleState+0x150>)
 800d61c:	400a      	ands	r2, r1
 800d61e:	601a      	str	r2, [r3, #0]
 800d620:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d622:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d624:	697b      	ldr	r3, [r7, #20]
 800d626:	f383 8810 	msr	PRIMASK, r3
}
 800d62a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d62c:	f3ef 8310 	mrs	r3, PRIMASK
 800d630:	61bb      	str	r3, [r7, #24]
  return(result);
 800d632:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d634:	633b      	str	r3, [r7, #48]	@ 0x30
 800d636:	2301      	movs	r3, #1
 800d638:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d63a:	69fb      	ldr	r3, [r7, #28]
 800d63c:	f383 8810 	msr	PRIMASK, r3
}
 800d640:	46c0      	nop			@ (mov r8, r8)
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	689a      	ldr	r2, [r3, #8]
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	2101      	movs	r1, #1
 800d64e:	438a      	bics	r2, r1
 800d650:	609a      	str	r2, [r3, #8]
 800d652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d654:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d656:	6a3b      	ldr	r3, [r7, #32]
 800d658:	f383 8810 	msr	PRIMASK, r3
}
 800d65c:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	228c      	movs	r2, #140	@ 0x8c
 800d662:	2120      	movs	r1, #32
 800d664:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	2284      	movs	r2, #132	@ 0x84
 800d66a:	2100      	movs	r1, #0
 800d66c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d66e:	2303      	movs	r3, #3
 800d670:	e012      	b.n	800d698 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	2288      	movs	r2, #136	@ 0x88
 800d676:	2120      	movs	r1, #32
 800d678:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	228c      	movs	r2, #140	@ 0x8c
 800d67e:	2120      	movs	r1, #32
 800d680:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	2200      	movs	r2, #0
 800d686:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	2200      	movs	r2, #0
 800d68c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	2284      	movs	r2, #132	@ 0x84
 800d692:	2100      	movs	r1, #0
 800d694:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800d696:	2300      	movs	r3, #0
}
 800d698:	0018      	movs	r0, r3
 800d69a:	46bd      	mov	sp, r7
 800d69c:	b010      	add	sp, #64	@ 0x40
 800d69e:	bd80      	pop	{r7, pc}
 800d6a0:	01ffffff 	.word	0x01ffffff
 800d6a4:	fffffedf 	.word	0xfffffedf

0800d6a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d6a8:	b580      	push	{r7, lr}
 800d6aa:	b084      	sub	sp, #16
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	60f8      	str	r0, [r7, #12]
 800d6b0:	60b9      	str	r1, [r7, #8]
 800d6b2:	603b      	str	r3, [r7, #0]
 800d6b4:	1dfb      	adds	r3, r7, #7
 800d6b6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d6b8:	e051      	b.n	800d75e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d6ba:	69bb      	ldr	r3, [r7, #24]
 800d6bc:	3301      	adds	r3, #1
 800d6be:	d04e      	beq.n	800d75e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d6c0:	f7fa ffd4 	bl	800866c <HAL_GetTick>
 800d6c4:	0002      	movs	r2, r0
 800d6c6:	683b      	ldr	r3, [r7, #0]
 800d6c8:	1ad3      	subs	r3, r2, r3
 800d6ca:	69ba      	ldr	r2, [r7, #24]
 800d6cc:	429a      	cmp	r2, r3
 800d6ce:	d302      	bcc.n	800d6d6 <UART_WaitOnFlagUntilTimeout+0x2e>
 800d6d0:	69bb      	ldr	r3, [r7, #24]
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d101      	bne.n	800d6da <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800d6d6:	2303      	movs	r3, #3
 800d6d8:	e051      	b.n	800d77e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	2204      	movs	r2, #4
 800d6e2:	4013      	ands	r3, r2
 800d6e4:	d03b      	beq.n	800d75e <UART_WaitOnFlagUntilTimeout+0xb6>
 800d6e6:	68bb      	ldr	r3, [r7, #8]
 800d6e8:	2b80      	cmp	r3, #128	@ 0x80
 800d6ea:	d038      	beq.n	800d75e <UART_WaitOnFlagUntilTimeout+0xb6>
 800d6ec:	68bb      	ldr	r3, [r7, #8]
 800d6ee:	2b40      	cmp	r3, #64	@ 0x40
 800d6f0:	d035      	beq.n	800d75e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	69db      	ldr	r3, [r3, #28]
 800d6f8:	2208      	movs	r2, #8
 800d6fa:	4013      	ands	r3, r2
 800d6fc:	2b08      	cmp	r3, #8
 800d6fe:	d111      	bne.n	800d724 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	2208      	movs	r2, #8
 800d706:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	0018      	movs	r0, r3
 800d70c:	f000 f83c 	bl	800d788 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	2290      	movs	r2, #144	@ 0x90
 800d714:	2108      	movs	r1, #8
 800d716:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	2284      	movs	r2, #132	@ 0x84
 800d71c:	2100      	movs	r1, #0
 800d71e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800d720:	2301      	movs	r3, #1
 800d722:	e02c      	b.n	800d77e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	69da      	ldr	r2, [r3, #28]
 800d72a:	2380      	movs	r3, #128	@ 0x80
 800d72c:	011b      	lsls	r3, r3, #4
 800d72e:	401a      	ands	r2, r3
 800d730:	2380      	movs	r3, #128	@ 0x80
 800d732:	011b      	lsls	r3, r3, #4
 800d734:	429a      	cmp	r2, r3
 800d736:	d112      	bne.n	800d75e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	2280      	movs	r2, #128	@ 0x80
 800d73e:	0112      	lsls	r2, r2, #4
 800d740:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	0018      	movs	r0, r3
 800d746:	f000 f81f 	bl	800d788 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	2290      	movs	r2, #144	@ 0x90
 800d74e:	2120      	movs	r1, #32
 800d750:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	2284      	movs	r2, #132	@ 0x84
 800d756:	2100      	movs	r1, #0
 800d758:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800d75a:	2303      	movs	r3, #3
 800d75c:	e00f      	b.n	800d77e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	69db      	ldr	r3, [r3, #28]
 800d764:	68ba      	ldr	r2, [r7, #8]
 800d766:	4013      	ands	r3, r2
 800d768:	68ba      	ldr	r2, [r7, #8]
 800d76a:	1ad3      	subs	r3, r2, r3
 800d76c:	425a      	negs	r2, r3
 800d76e:	4153      	adcs	r3, r2
 800d770:	b2db      	uxtb	r3, r3
 800d772:	001a      	movs	r2, r3
 800d774:	1dfb      	adds	r3, r7, #7
 800d776:	781b      	ldrb	r3, [r3, #0]
 800d778:	429a      	cmp	r2, r3
 800d77a:	d09e      	beq.n	800d6ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d77c:	2300      	movs	r3, #0
}
 800d77e:	0018      	movs	r0, r3
 800d780:	46bd      	mov	sp, r7
 800d782:	b004      	add	sp, #16
 800d784:	bd80      	pop	{r7, pc}
	...

0800d788 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d788:	b580      	push	{r7, lr}
 800d78a:	b08e      	sub	sp, #56	@ 0x38
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d790:	f3ef 8310 	mrs	r3, PRIMASK
 800d794:	617b      	str	r3, [r7, #20]
  return(result);
 800d796:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d798:	637b      	str	r3, [r7, #52]	@ 0x34
 800d79a:	2301      	movs	r3, #1
 800d79c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d79e:	69bb      	ldr	r3, [r7, #24]
 800d7a0:	f383 8810 	msr	PRIMASK, r3
}
 800d7a4:	46c0      	nop			@ (mov r8, r8)
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	681a      	ldr	r2, [r3, #0]
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	4926      	ldr	r1, [pc, #152]	@ (800d84c <UART_EndRxTransfer+0xc4>)
 800d7b2:	400a      	ands	r2, r1
 800d7b4:	601a      	str	r2, [r3, #0]
 800d7b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d7b8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d7ba:	69fb      	ldr	r3, [r7, #28]
 800d7bc:	f383 8810 	msr	PRIMASK, r3
}
 800d7c0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d7c2:	f3ef 8310 	mrs	r3, PRIMASK
 800d7c6:	623b      	str	r3, [r7, #32]
  return(result);
 800d7c8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d7ca:	633b      	str	r3, [r7, #48]	@ 0x30
 800d7cc:	2301      	movs	r3, #1
 800d7ce:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d7d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7d2:	f383 8810 	msr	PRIMASK, r3
}
 800d7d6:	46c0      	nop			@ (mov r8, r8)
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	689a      	ldr	r2, [r3, #8]
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	491b      	ldr	r1, [pc, #108]	@ (800d850 <UART_EndRxTransfer+0xc8>)
 800d7e4:	400a      	ands	r2, r1
 800d7e6:	609a      	str	r2, [r3, #8]
 800d7e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d7ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7ee:	f383 8810 	msr	PRIMASK, r3
}
 800d7f2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d7f8:	2b01      	cmp	r3, #1
 800d7fa:	d118      	bne.n	800d82e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d7fc:	f3ef 8310 	mrs	r3, PRIMASK
 800d800:	60bb      	str	r3, [r7, #8]
  return(result);
 800d802:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d804:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d806:	2301      	movs	r3, #1
 800d808:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	f383 8810 	msr	PRIMASK, r3
}
 800d810:	46c0      	nop			@ (mov r8, r8)
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	681a      	ldr	r2, [r3, #0]
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	2110      	movs	r1, #16
 800d81e:	438a      	bics	r2, r1
 800d820:	601a      	str	r2, [r3, #0]
 800d822:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d824:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d826:	693b      	ldr	r3, [r7, #16]
 800d828:	f383 8810 	msr	PRIMASK, r3
}
 800d82c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	228c      	movs	r2, #140	@ 0x8c
 800d832:	2120      	movs	r1, #32
 800d834:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	2200      	movs	r2, #0
 800d83a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	2200      	movs	r2, #0
 800d840:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800d842:	46c0      	nop			@ (mov r8, r8)
 800d844:	46bd      	mov	sp, r7
 800d846:	b00e      	add	sp, #56	@ 0x38
 800d848:	bd80      	pop	{r7, pc}
 800d84a:	46c0      	nop			@ (mov r8, r8)
 800d84c:	fffffedf 	.word	0xfffffedf
 800d850:	effffffe 	.word	0xeffffffe

0800d854 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d854:	b580      	push	{r7, lr}
 800d856:	b084      	sub	sp, #16
 800d858:	af00      	add	r7, sp, #0
 800d85a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	2284      	movs	r2, #132	@ 0x84
 800d860:	5c9b      	ldrb	r3, [r3, r2]
 800d862:	2b01      	cmp	r3, #1
 800d864:	d101      	bne.n	800d86a <HAL_UARTEx_DisableFifoMode+0x16>
 800d866:	2302      	movs	r3, #2
 800d868:	e027      	b.n	800d8ba <HAL_UARTEx_DisableFifoMode+0x66>
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	2284      	movs	r2, #132	@ 0x84
 800d86e:	2101      	movs	r1, #1
 800d870:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	2288      	movs	r2, #136	@ 0x88
 800d876:	2124      	movs	r1, #36	@ 0x24
 800d878:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	681a      	ldr	r2, [r3, #0]
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	2101      	movs	r1, #1
 800d88e:	438a      	bics	r2, r1
 800d890:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	4a0b      	ldr	r2, [pc, #44]	@ (800d8c4 <HAL_UARTEx_DisableFifoMode+0x70>)
 800d896:	4013      	ands	r3, r2
 800d898:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	2200      	movs	r2, #0
 800d89e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	68fa      	ldr	r2, [r7, #12]
 800d8a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	2288      	movs	r2, #136	@ 0x88
 800d8ac:	2120      	movs	r1, #32
 800d8ae:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	2284      	movs	r2, #132	@ 0x84
 800d8b4:	2100      	movs	r1, #0
 800d8b6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800d8b8:	2300      	movs	r3, #0
}
 800d8ba:	0018      	movs	r0, r3
 800d8bc:	46bd      	mov	sp, r7
 800d8be:	b004      	add	sp, #16
 800d8c0:	bd80      	pop	{r7, pc}
 800d8c2:	46c0      	nop			@ (mov r8, r8)
 800d8c4:	dfffffff 	.word	0xdfffffff

0800d8c8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d8c8:	b580      	push	{r7, lr}
 800d8ca:	b084      	sub	sp, #16
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	6078      	str	r0, [r7, #4]
 800d8d0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	2284      	movs	r2, #132	@ 0x84
 800d8d6:	5c9b      	ldrb	r3, [r3, r2]
 800d8d8:	2b01      	cmp	r3, #1
 800d8da:	d101      	bne.n	800d8e0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d8dc:	2302      	movs	r3, #2
 800d8de:	e02e      	b.n	800d93e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	2284      	movs	r2, #132	@ 0x84
 800d8e4:	2101      	movs	r1, #1
 800d8e6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	2288      	movs	r2, #136	@ 0x88
 800d8ec:	2124      	movs	r1, #36	@ 0x24
 800d8ee:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	681a      	ldr	r2, [r3, #0]
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	2101      	movs	r1, #1
 800d904:	438a      	bics	r2, r1
 800d906:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	689b      	ldr	r3, [r3, #8]
 800d90e:	00db      	lsls	r3, r3, #3
 800d910:	08d9      	lsrs	r1, r3, #3
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	683a      	ldr	r2, [r7, #0]
 800d918:	430a      	orrs	r2, r1
 800d91a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	0018      	movs	r0, r3
 800d920:	f000 f854 	bl	800d9cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	68fa      	ldr	r2, [r7, #12]
 800d92a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	2288      	movs	r2, #136	@ 0x88
 800d930:	2120      	movs	r1, #32
 800d932:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	2284      	movs	r2, #132	@ 0x84
 800d938:	2100      	movs	r1, #0
 800d93a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800d93c:	2300      	movs	r3, #0
}
 800d93e:	0018      	movs	r0, r3
 800d940:	46bd      	mov	sp, r7
 800d942:	b004      	add	sp, #16
 800d944:	bd80      	pop	{r7, pc}
	...

0800d948 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d948:	b580      	push	{r7, lr}
 800d94a:	b084      	sub	sp, #16
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	6078      	str	r0, [r7, #4]
 800d950:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	2284      	movs	r2, #132	@ 0x84
 800d956:	5c9b      	ldrb	r3, [r3, r2]
 800d958:	2b01      	cmp	r3, #1
 800d95a:	d101      	bne.n	800d960 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d95c:	2302      	movs	r3, #2
 800d95e:	e02f      	b.n	800d9c0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	2284      	movs	r2, #132	@ 0x84
 800d964:	2101      	movs	r1, #1
 800d966:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	2288      	movs	r2, #136	@ 0x88
 800d96c:	2124      	movs	r1, #36	@ 0x24
 800d96e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	681a      	ldr	r2, [r3, #0]
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	2101      	movs	r1, #1
 800d984:	438a      	bics	r2, r1
 800d986:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	689b      	ldr	r3, [r3, #8]
 800d98e:	4a0e      	ldr	r2, [pc, #56]	@ (800d9c8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800d990:	4013      	ands	r3, r2
 800d992:	0019      	movs	r1, r3
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	683a      	ldr	r2, [r7, #0]
 800d99a:	430a      	orrs	r2, r1
 800d99c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	0018      	movs	r0, r3
 800d9a2:	f000 f813 	bl	800d9cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	68fa      	ldr	r2, [r7, #12]
 800d9ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	2288      	movs	r2, #136	@ 0x88
 800d9b2:	2120      	movs	r1, #32
 800d9b4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	2284      	movs	r2, #132	@ 0x84
 800d9ba:	2100      	movs	r1, #0
 800d9bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800d9be:	2300      	movs	r3, #0
}
 800d9c0:	0018      	movs	r0, r3
 800d9c2:	46bd      	mov	sp, r7
 800d9c4:	b004      	add	sp, #16
 800d9c6:	bd80      	pop	{r7, pc}
 800d9c8:	f1ffffff 	.word	0xf1ffffff

0800d9cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d9cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d9ce:	b085      	sub	sp, #20
 800d9d0:	af00      	add	r7, sp, #0
 800d9d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d108      	bne.n	800d9ee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	226a      	movs	r2, #106	@ 0x6a
 800d9e0:	2101      	movs	r1, #1
 800d9e2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	2268      	movs	r2, #104	@ 0x68
 800d9e8:	2101      	movs	r1, #1
 800d9ea:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d9ec:	e043      	b.n	800da76 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d9ee:	260f      	movs	r6, #15
 800d9f0:	19bb      	adds	r3, r7, r6
 800d9f2:	2208      	movs	r2, #8
 800d9f4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d9f6:	200e      	movs	r0, #14
 800d9f8:	183b      	adds	r3, r7, r0
 800d9fa:	2208      	movs	r2, #8
 800d9fc:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	689b      	ldr	r3, [r3, #8]
 800da04:	0e5b      	lsrs	r3, r3, #25
 800da06:	b2da      	uxtb	r2, r3
 800da08:	240d      	movs	r4, #13
 800da0a:	193b      	adds	r3, r7, r4
 800da0c:	2107      	movs	r1, #7
 800da0e:	400a      	ands	r2, r1
 800da10:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	689b      	ldr	r3, [r3, #8]
 800da18:	0f5b      	lsrs	r3, r3, #29
 800da1a:	b2da      	uxtb	r2, r3
 800da1c:	250c      	movs	r5, #12
 800da1e:	197b      	adds	r3, r7, r5
 800da20:	2107      	movs	r1, #7
 800da22:	400a      	ands	r2, r1
 800da24:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800da26:	183b      	adds	r3, r7, r0
 800da28:	781b      	ldrb	r3, [r3, #0]
 800da2a:	197a      	adds	r2, r7, r5
 800da2c:	7812      	ldrb	r2, [r2, #0]
 800da2e:	4914      	ldr	r1, [pc, #80]	@ (800da80 <UARTEx_SetNbDataToProcess+0xb4>)
 800da30:	5c8a      	ldrb	r2, [r1, r2]
 800da32:	435a      	muls	r2, r3
 800da34:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800da36:	197b      	adds	r3, r7, r5
 800da38:	781b      	ldrb	r3, [r3, #0]
 800da3a:	4a12      	ldr	r2, [pc, #72]	@ (800da84 <UARTEx_SetNbDataToProcess+0xb8>)
 800da3c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800da3e:	0019      	movs	r1, r3
 800da40:	f7f2 fc10 	bl	8000264 <__divsi3>
 800da44:	0003      	movs	r3, r0
 800da46:	b299      	uxth	r1, r3
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	226a      	movs	r2, #106	@ 0x6a
 800da4c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800da4e:	19bb      	adds	r3, r7, r6
 800da50:	781b      	ldrb	r3, [r3, #0]
 800da52:	193a      	adds	r2, r7, r4
 800da54:	7812      	ldrb	r2, [r2, #0]
 800da56:	490a      	ldr	r1, [pc, #40]	@ (800da80 <UARTEx_SetNbDataToProcess+0xb4>)
 800da58:	5c8a      	ldrb	r2, [r1, r2]
 800da5a:	435a      	muls	r2, r3
 800da5c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800da5e:	193b      	adds	r3, r7, r4
 800da60:	781b      	ldrb	r3, [r3, #0]
 800da62:	4a08      	ldr	r2, [pc, #32]	@ (800da84 <UARTEx_SetNbDataToProcess+0xb8>)
 800da64:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800da66:	0019      	movs	r1, r3
 800da68:	f7f2 fbfc 	bl	8000264 <__divsi3>
 800da6c:	0003      	movs	r3, r0
 800da6e:	b299      	uxth	r1, r3
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	2268      	movs	r2, #104	@ 0x68
 800da74:	5299      	strh	r1, [r3, r2]
}
 800da76:	46c0      	nop			@ (mov r8, r8)
 800da78:	46bd      	mov	sp, r7
 800da7a:	b005      	add	sp, #20
 800da7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da7e:	46c0      	nop			@ (mov r8, r8)
 800da80:	08011db8 	.word	0x08011db8
 800da84:	08011dc0 	.word	0x08011dc0

0800da88 <sulp>:
 800da88:	b570      	push	{r4, r5, r6, lr}
 800da8a:	0016      	movs	r6, r2
 800da8c:	000d      	movs	r5, r1
 800da8e:	f002 f92b 	bl	800fce8 <__ulp>
 800da92:	2e00      	cmp	r6, #0
 800da94:	d00d      	beq.n	800dab2 <sulp+0x2a>
 800da96:	236b      	movs	r3, #107	@ 0x6b
 800da98:	006a      	lsls	r2, r5, #1
 800da9a:	0d52      	lsrs	r2, r2, #21
 800da9c:	1a9b      	subs	r3, r3, r2
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	dd07      	ble.n	800dab2 <sulp+0x2a>
 800daa2:	2400      	movs	r4, #0
 800daa4:	4a03      	ldr	r2, [pc, #12]	@ (800dab4 <sulp+0x2c>)
 800daa6:	051b      	lsls	r3, r3, #20
 800daa8:	189d      	adds	r5, r3, r2
 800daaa:	002b      	movs	r3, r5
 800daac:	0022      	movs	r2, r4
 800daae:	f7f4 ff11 	bl	80028d4 <__aeabi_dmul>
 800dab2:	bd70      	pop	{r4, r5, r6, pc}
 800dab4:	3ff00000 	.word	0x3ff00000

0800dab8 <_strtod_l>:
 800dab8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800daba:	b0a3      	sub	sp, #140	@ 0x8c
 800dabc:	921b      	str	r2, [sp, #108]	@ 0x6c
 800dabe:	2200      	movs	r2, #0
 800dac0:	2600      	movs	r6, #0
 800dac2:	2700      	movs	r7, #0
 800dac4:	9005      	str	r0, [sp, #20]
 800dac6:	9109      	str	r1, [sp, #36]	@ 0x24
 800dac8:	921e      	str	r2, [sp, #120]	@ 0x78
 800daca:	911d      	str	r1, [sp, #116]	@ 0x74
 800dacc:	780a      	ldrb	r2, [r1, #0]
 800dace:	2a2b      	cmp	r2, #43	@ 0x2b
 800dad0:	d053      	beq.n	800db7a <_strtod_l+0xc2>
 800dad2:	d83f      	bhi.n	800db54 <_strtod_l+0x9c>
 800dad4:	2a0d      	cmp	r2, #13
 800dad6:	d839      	bhi.n	800db4c <_strtod_l+0x94>
 800dad8:	2a08      	cmp	r2, #8
 800dada:	d839      	bhi.n	800db50 <_strtod_l+0x98>
 800dadc:	2a00      	cmp	r2, #0
 800dade:	d042      	beq.n	800db66 <_strtod_l+0xae>
 800dae0:	2200      	movs	r2, #0
 800dae2:	9212      	str	r2, [sp, #72]	@ 0x48
 800dae4:	2100      	movs	r1, #0
 800dae6:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 800dae8:	910c      	str	r1, [sp, #48]	@ 0x30
 800daea:	782a      	ldrb	r2, [r5, #0]
 800daec:	2a30      	cmp	r2, #48	@ 0x30
 800daee:	d000      	beq.n	800daf2 <_strtod_l+0x3a>
 800daf0:	e083      	b.n	800dbfa <_strtod_l+0x142>
 800daf2:	786a      	ldrb	r2, [r5, #1]
 800daf4:	3120      	adds	r1, #32
 800daf6:	438a      	bics	r2, r1
 800daf8:	2a58      	cmp	r2, #88	@ 0x58
 800dafa:	d000      	beq.n	800dafe <_strtod_l+0x46>
 800dafc:	e073      	b.n	800dbe6 <_strtod_l+0x12e>
 800dafe:	9302      	str	r3, [sp, #8]
 800db00:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800db02:	4a9b      	ldr	r2, [pc, #620]	@ (800dd70 <_strtod_l+0x2b8>)
 800db04:	9301      	str	r3, [sp, #4]
 800db06:	ab1e      	add	r3, sp, #120	@ 0x78
 800db08:	9300      	str	r3, [sp, #0]
 800db0a:	9805      	ldr	r0, [sp, #20]
 800db0c:	ab1f      	add	r3, sp, #124	@ 0x7c
 800db0e:	a91d      	add	r1, sp, #116	@ 0x74
 800db10:	f001 f9ac 	bl	800ee6c <__gethex>
 800db14:	230f      	movs	r3, #15
 800db16:	0002      	movs	r2, r0
 800db18:	401a      	ands	r2, r3
 800db1a:	0004      	movs	r4, r0
 800db1c:	9206      	str	r2, [sp, #24]
 800db1e:	4218      	tst	r0, r3
 800db20:	d005      	beq.n	800db2e <_strtod_l+0x76>
 800db22:	2a06      	cmp	r2, #6
 800db24:	d12b      	bne.n	800db7e <_strtod_l+0xc6>
 800db26:	2300      	movs	r3, #0
 800db28:	3501      	adds	r5, #1
 800db2a:	951d      	str	r5, [sp, #116]	@ 0x74
 800db2c:	9312      	str	r3, [sp, #72]	@ 0x48
 800db2e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800db30:	2b00      	cmp	r3, #0
 800db32:	d002      	beq.n	800db3a <_strtod_l+0x82>
 800db34:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800db36:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800db38:	6013      	str	r3, [r2, #0]
 800db3a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d019      	beq.n	800db74 <_strtod_l+0xbc>
 800db40:	2380      	movs	r3, #128	@ 0x80
 800db42:	0030      	movs	r0, r6
 800db44:	061b      	lsls	r3, r3, #24
 800db46:	18f9      	adds	r1, r7, r3
 800db48:	b023      	add	sp, #140	@ 0x8c
 800db4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db4c:	2a20      	cmp	r2, #32
 800db4e:	d1c7      	bne.n	800dae0 <_strtod_l+0x28>
 800db50:	3101      	adds	r1, #1
 800db52:	e7ba      	b.n	800daca <_strtod_l+0x12>
 800db54:	2a2d      	cmp	r2, #45	@ 0x2d
 800db56:	d1c3      	bne.n	800dae0 <_strtod_l+0x28>
 800db58:	3a2c      	subs	r2, #44	@ 0x2c
 800db5a:	9212      	str	r2, [sp, #72]	@ 0x48
 800db5c:	1c4a      	adds	r2, r1, #1
 800db5e:	921d      	str	r2, [sp, #116]	@ 0x74
 800db60:	784a      	ldrb	r2, [r1, #1]
 800db62:	2a00      	cmp	r2, #0
 800db64:	d1be      	bne.n	800dae4 <_strtod_l+0x2c>
 800db66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db68:	931d      	str	r3, [sp, #116]	@ 0x74
 800db6a:	2300      	movs	r3, #0
 800db6c:	9312      	str	r3, [sp, #72]	@ 0x48
 800db6e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800db70:	2b00      	cmp	r3, #0
 800db72:	d1df      	bne.n	800db34 <_strtod_l+0x7c>
 800db74:	0030      	movs	r0, r6
 800db76:	0039      	movs	r1, r7
 800db78:	e7e6      	b.n	800db48 <_strtod_l+0x90>
 800db7a:	2200      	movs	r2, #0
 800db7c:	e7ed      	b.n	800db5a <_strtod_l+0xa2>
 800db7e:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 800db80:	2a00      	cmp	r2, #0
 800db82:	d007      	beq.n	800db94 <_strtod_l+0xdc>
 800db84:	2135      	movs	r1, #53	@ 0x35
 800db86:	a820      	add	r0, sp, #128	@ 0x80
 800db88:	f002 f9a4 	bl	800fed4 <__copybits>
 800db8c:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800db8e:	9805      	ldr	r0, [sp, #20]
 800db90:	f001 fd66 	bl	800f660 <_Bfree>
 800db94:	9806      	ldr	r0, [sp, #24]
 800db96:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800db98:	3801      	subs	r0, #1
 800db9a:	2804      	cmp	r0, #4
 800db9c:	d806      	bhi.n	800dbac <_strtod_l+0xf4>
 800db9e:	f7f2 fac3 	bl	8000128 <__gnu_thumb1_case_uqi>
 800dba2:	0312      	.short	0x0312
 800dba4:	1e1c      	.short	0x1e1c
 800dba6:	12          	.byte	0x12
 800dba7:	00          	.byte	0x00
 800dba8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800dbaa:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 800dbac:	05e4      	lsls	r4, r4, #23
 800dbae:	d502      	bpl.n	800dbb6 <_strtod_l+0xfe>
 800dbb0:	2380      	movs	r3, #128	@ 0x80
 800dbb2:	061b      	lsls	r3, r3, #24
 800dbb4:	431f      	orrs	r7, r3
 800dbb6:	4b6f      	ldr	r3, [pc, #444]	@ (800dd74 <_strtod_l+0x2bc>)
 800dbb8:	423b      	tst	r3, r7
 800dbba:	d1b8      	bne.n	800db2e <_strtod_l+0x76>
 800dbbc:	f001 f868 	bl	800ec90 <__errno>
 800dbc0:	2322      	movs	r3, #34	@ 0x22
 800dbc2:	6003      	str	r3, [r0, #0]
 800dbc4:	e7b3      	b.n	800db2e <_strtod_l+0x76>
 800dbc6:	496c      	ldr	r1, [pc, #432]	@ (800dd78 <_strtod_l+0x2c0>)
 800dbc8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800dbca:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800dbcc:	400a      	ands	r2, r1
 800dbce:	496b      	ldr	r1, [pc, #428]	@ (800dd7c <_strtod_l+0x2c4>)
 800dbd0:	185b      	adds	r3, r3, r1
 800dbd2:	051b      	lsls	r3, r3, #20
 800dbd4:	431a      	orrs	r2, r3
 800dbd6:	0017      	movs	r7, r2
 800dbd8:	e7e8      	b.n	800dbac <_strtod_l+0xf4>
 800dbda:	4f66      	ldr	r7, [pc, #408]	@ (800dd74 <_strtod_l+0x2bc>)
 800dbdc:	e7e6      	b.n	800dbac <_strtod_l+0xf4>
 800dbde:	2601      	movs	r6, #1
 800dbe0:	4f67      	ldr	r7, [pc, #412]	@ (800dd80 <_strtod_l+0x2c8>)
 800dbe2:	4276      	negs	r6, r6
 800dbe4:	e7e2      	b.n	800dbac <_strtod_l+0xf4>
 800dbe6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800dbe8:	1c5a      	adds	r2, r3, #1
 800dbea:	921d      	str	r2, [sp, #116]	@ 0x74
 800dbec:	785b      	ldrb	r3, [r3, #1]
 800dbee:	2b30      	cmp	r3, #48	@ 0x30
 800dbf0:	d0f9      	beq.n	800dbe6 <_strtod_l+0x12e>
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d09b      	beq.n	800db2e <_strtod_l+0x76>
 800dbf6:	2301      	movs	r3, #1
 800dbf8:	930c      	str	r3, [sp, #48]	@ 0x30
 800dbfa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800dbfc:	220a      	movs	r2, #10
 800dbfe:	9313      	str	r3, [sp, #76]	@ 0x4c
 800dc00:	2300      	movs	r3, #0
 800dc02:	9310      	str	r3, [sp, #64]	@ 0x40
 800dc04:	930d      	str	r3, [sp, #52]	@ 0x34
 800dc06:	9308      	str	r3, [sp, #32]
 800dc08:	981d      	ldr	r0, [sp, #116]	@ 0x74
 800dc0a:	7804      	ldrb	r4, [r0, #0]
 800dc0c:	0023      	movs	r3, r4
 800dc0e:	3b30      	subs	r3, #48	@ 0x30
 800dc10:	b2d9      	uxtb	r1, r3
 800dc12:	2909      	cmp	r1, #9
 800dc14:	d927      	bls.n	800dc66 <_strtod_l+0x1ae>
 800dc16:	2201      	movs	r2, #1
 800dc18:	495a      	ldr	r1, [pc, #360]	@ (800dd84 <_strtod_l+0x2cc>)
 800dc1a:	f000 ffd9 	bl	800ebd0 <strncmp>
 800dc1e:	2800      	cmp	r0, #0
 800dc20:	d033      	beq.n	800dc8a <_strtod_l+0x1d2>
 800dc22:	2000      	movs	r0, #0
 800dc24:	0023      	movs	r3, r4
 800dc26:	4684      	mov	ip, r0
 800dc28:	9a08      	ldr	r2, [sp, #32]
 800dc2a:	900e      	str	r0, [sp, #56]	@ 0x38
 800dc2c:	9206      	str	r2, [sp, #24]
 800dc2e:	2220      	movs	r2, #32
 800dc30:	0019      	movs	r1, r3
 800dc32:	4391      	bics	r1, r2
 800dc34:	000a      	movs	r2, r1
 800dc36:	2100      	movs	r1, #0
 800dc38:	9107      	str	r1, [sp, #28]
 800dc3a:	2a45      	cmp	r2, #69	@ 0x45
 800dc3c:	d000      	beq.n	800dc40 <_strtod_l+0x188>
 800dc3e:	e0cb      	b.n	800ddd8 <_strtod_l+0x320>
 800dc40:	9b06      	ldr	r3, [sp, #24]
 800dc42:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800dc44:	4303      	orrs	r3, r0
 800dc46:	4313      	orrs	r3, r2
 800dc48:	428b      	cmp	r3, r1
 800dc4a:	d08c      	beq.n	800db66 <_strtod_l+0xae>
 800dc4c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800dc4e:	9309      	str	r3, [sp, #36]	@ 0x24
 800dc50:	3301      	adds	r3, #1
 800dc52:	931d      	str	r3, [sp, #116]	@ 0x74
 800dc54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc56:	785b      	ldrb	r3, [r3, #1]
 800dc58:	2b2b      	cmp	r3, #43	@ 0x2b
 800dc5a:	d07b      	beq.n	800dd54 <_strtod_l+0x29c>
 800dc5c:	000c      	movs	r4, r1
 800dc5e:	2b2d      	cmp	r3, #45	@ 0x2d
 800dc60:	d17e      	bne.n	800dd60 <_strtod_l+0x2a8>
 800dc62:	2401      	movs	r4, #1
 800dc64:	e077      	b.n	800dd56 <_strtod_l+0x29e>
 800dc66:	9908      	ldr	r1, [sp, #32]
 800dc68:	2908      	cmp	r1, #8
 800dc6a:	dc09      	bgt.n	800dc80 <_strtod_l+0x1c8>
 800dc6c:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800dc6e:	4351      	muls	r1, r2
 800dc70:	185b      	adds	r3, r3, r1
 800dc72:	930d      	str	r3, [sp, #52]	@ 0x34
 800dc74:	9b08      	ldr	r3, [sp, #32]
 800dc76:	3001      	adds	r0, #1
 800dc78:	3301      	adds	r3, #1
 800dc7a:	9308      	str	r3, [sp, #32]
 800dc7c:	901d      	str	r0, [sp, #116]	@ 0x74
 800dc7e:	e7c3      	b.n	800dc08 <_strtod_l+0x150>
 800dc80:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800dc82:	4355      	muls	r5, r2
 800dc84:	195b      	adds	r3, r3, r5
 800dc86:	9310      	str	r3, [sp, #64]	@ 0x40
 800dc88:	e7f4      	b.n	800dc74 <_strtod_l+0x1bc>
 800dc8a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800dc8c:	1c5a      	adds	r2, r3, #1
 800dc8e:	921d      	str	r2, [sp, #116]	@ 0x74
 800dc90:	9a08      	ldr	r2, [sp, #32]
 800dc92:	785b      	ldrb	r3, [r3, #1]
 800dc94:	2a00      	cmp	r2, #0
 800dc96:	d03e      	beq.n	800dd16 <_strtod_l+0x25e>
 800dc98:	900e      	str	r0, [sp, #56]	@ 0x38
 800dc9a:	9206      	str	r2, [sp, #24]
 800dc9c:	001a      	movs	r2, r3
 800dc9e:	3a30      	subs	r2, #48	@ 0x30
 800dca0:	2a09      	cmp	r2, #9
 800dca2:	d912      	bls.n	800dcca <_strtod_l+0x212>
 800dca4:	2201      	movs	r2, #1
 800dca6:	4694      	mov	ip, r2
 800dca8:	e7c1      	b.n	800dc2e <_strtod_l+0x176>
 800dcaa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800dcac:	3001      	adds	r0, #1
 800dcae:	1c5a      	adds	r2, r3, #1
 800dcb0:	921d      	str	r2, [sp, #116]	@ 0x74
 800dcb2:	785b      	ldrb	r3, [r3, #1]
 800dcb4:	2b30      	cmp	r3, #48	@ 0x30
 800dcb6:	d0f8      	beq.n	800dcaa <_strtod_l+0x1f2>
 800dcb8:	001a      	movs	r2, r3
 800dcba:	3a31      	subs	r2, #49	@ 0x31
 800dcbc:	2a08      	cmp	r2, #8
 800dcbe:	d844      	bhi.n	800dd4a <_strtod_l+0x292>
 800dcc0:	900e      	str	r0, [sp, #56]	@ 0x38
 800dcc2:	2000      	movs	r0, #0
 800dcc4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800dcc6:	9006      	str	r0, [sp, #24]
 800dcc8:	9213      	str	r2, [sp, #76]	@ 0x4c
 800dcca:	001c      	movs	r4, r3
 800dccc:	1c42      	adds	r2, r0, #1
 800dcce:	3c30      	subs	r4, #48	@ 0x30
 800dcd0:	2b30      	cmp	r3, #48	@ 0x30
 800dcd2:	d01a      	beq.n	800dd0a <_strtod_l+0x252>
 800dcd4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dcd6:	9906      	ldr	r1, [sp, #24]
 800dcd8:	189b      	adds	r3, r3, r2
 800dcda:	930e      	str	r3, [sp, #56]	@ 0x38
 800dcdc:	230a      	movs	r3, #10
 800dcde:	469c      	mov	ip, r3
 800dce0:	9d06      	ldr	r5, [sp, #24]
 800dce2:	1c4b      	adds	r3, r1, #1
 800dce4:	1b5d      	subs	r5, r3, r5
 800dce6:	42aa      	cmp	r2, r5
 800dce8:	dc17      	bgt.n	800dd1a <_strtod_l+0x262>
 800dcea:	43c3      	mvns	r3, r0
 800dcec:	9a06      	ldr	r2, [sp, #24]
 800dcee:	17db      	asrs	r3, r3, #31
 800dcf0:	4003      	ands	r3, r0
 800dcf2:	18d1      	adds	r1, r2, r3
 800dcf4:	3201      	adds	r2, #1
 800dcf6:	18d3      	adds	r3, r2, r3
 800dcf8:	9306      	str	r3, [sp, #24]
 800dcfa:	2908      	cmp	r1, #8
 800dcfc:	dc1c      	bgt.n	800dd38 <_strtod_l+0x280>
 800dcfe:	230a      	movs	r3, #10
 800dd00:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800dd02:	4353      	muls	r3, r2
 800dd04:	2200      	movs	r2, #0
 800dd06:	18e3      	adds	r3, r4, r3
 800dd08:	930d      	str	r3, [sp, #52]	@ 0x34
 800dd0a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800dd0c:	0010      	movs	r0, r2
 800dd0e:	1c59      	adds	r1, r3, #1
 800dd10:	911d      	str	r1, [sp, #116]	@ 0x74
 800dd12:	785b      	ldrb	r3, [r3, #1]
 800dd14:	e7c2      	b.n	800dc9c <_strtod_l+0x1e4>
 800dd16:	9808      	ldr	r0, [sp, #32]
 800dd18:	e7cc      	b.n	800dcb4 <_strtod_l+0x1fc>
 800dd1a:	2908      	cmp	r1, #8
 800dd1c:	dc05      	bgt.n	800dd2a <_strtod_l+0x272>
 800dd1e:	4665      	mov	r5, ip
 800dd20:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800dd22:	4369      	muls	r1, r5
 800dd24:	910d      	str	r1, [sp, #52]	@ 0x34
 800dd26:	0019      	movs	r1, r3
 800dd28:	e7da      	b.n	800dce0 <_strtod_l+0x228>
 800dd2a:	2b10      	cmp	r3, #16
 800dd2c:	dcfb      	bgt.n	800dd26 <_strtod_l+0x26e>
 800dd2e:	4661      	mov	r1, ip
 800dd30:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800dd32:	434d      	muls	r5, r1
 800dd34:	9510      	str	r5, [sp, #64]	@ 0x40
 800dd36:	e7f6      	b.n	800dd26 <_strtod_l+0x26e>
 800dd38:	2200      	movs	r2, #0
 800dd3a:	290f      	cmp	r1, #15
 800dd3c:	dce5      	bgt.n	800dd0a <_strtod_l+0x252>
 800dd3e:	230a      	movs	r3, #10
 800dd40:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800dd42:	435d      	muls	r5, r3
 800dd44:	1963      	adds	r3, r4, r5
 800dd46:	9310      	str	r3, [sp, #64]	@ 0x40
 800dd48:	e7df      	b.n	800dd0a <_strtod_l+0x252>
 800dd4a:	2200      	movs	r2, #0
 800dd4c:	920e      	str	r2, [sp, #56]	@ 0x38
 800dd4e:	9206      	str	r2, [sp, #24]
 800dd50:	3201      	adds	r2, #1
 800dd52:	e7a8      	b.n	800dca6 <_strtod_l+0x1ee>
 800dd54:	2400      	movs	r4, #0
 800dd56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd58:	3302      	adds	r3, #2
 800dd5a:	931d      	str	r3, [sp, #116]	@ 0x74
 800dd5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd5e:	789b      	ldrb	r3, [r3, #2]
 800dd60:	001a      	movs	r2, r3
 800dd62:	3a30      	subs	r2, #48	@ 0x30
 800dd64:	2a09      	cmp	r2, #9
 800dd66:	d913      	bls.n	800dd90 <_strtod_l+0x2d8>
 800dd68:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dd6a:	921d      	str	r2, [sp, #116]	@ 0x74
 800dd6c:	2200      	movs	r2, #0
 800dd6e:	e032      	b.n	800ddd6 <_strtod_l+0x31e>
 800dd70:	08011f44 	.word	0x08011f44
 800dd74:	7ff00000 	.word	0x7ff00000
 800dd78:	ffefffff 	.word	0xffefffff
 800dd7c:	00000433 	.word	0x00000433
 800dd80:	7fffffff 	.word	0x7fffffff
 800dd84:	08011dc8 	.word	0x08011dc8
 800dd88:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800dd8a:	1c5a      	adds	r2, r3, #1
 800dd8c:	921d      	str	r2, [sp, #116]	@ 0x74
 800dd8e:	785b      	ldrb	r3, [r3, #1]
 800dd90:	2b30      	cmp	r3, #48	@ 0x30
 800dd92:	d0f9      	beq.n	800dd88 <_strtod_l+0x2d0>
 800dd94:	2200      	movs	r2, #0
 800dd96:	9207      	str	r2, [sp, #28]
 800dd98:	001a      	movs	r2, r3
 800dd9a:	3a31      	subs	r2, #49	@ 0x31
 800dd9c:	2a08      	cmp	r2, #8
 800dd9e:	d81b      	bhi.n	800ddd8 <_strtod_l+0x320>
 800dda0:	3b30      	subs	r3, #48	@ 0x30
 800dda2:	001a      	movs	r2, r3
 800dda4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800dda6:	9307      	str	r3, [sp, #28]
 800dda8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ddaa:	1c59      	adds	r1, r3, #1
 800ddac:	911d      	str	r1, [sp, #116]	@ 0x74
 800ddae:	785b      	ldrb	r3, [r3, #1]
 800ddb0:	001d      	movs	r5, r3
 800ddb2:	3d30      	subs	r5, #48	@ 0x30
 800ddb4:	2d09      	cmp	r5, #9
 800ddb6:	d93a      	bls.n	800de2e <_strtod_l+0x376>
 800ddb8:	9d07      	ldr	r5, [sp, #28]
 800ddba:	1b49      	subs	r1, r1, r5
 800ddbc:	000d      	movs	r5, r1
 800ddbe:	49b3      	ldr	r1, [pc, #716]	@ (800e08c <_strtod_l+0x5d4>)
 800ddc0:	9107      	str	r1, [sp, #28]
 800ddc2:	2d08      	cmp	r5, #8
 800ddc4:	dc03      	bgt.n	800ddce <_strtod_l+0x316>
 800ddc6:	9207      	str	r2, [sp, #28]
 800ddc8:	428a      	cmp	r2, r1
 800ddca:	dd00      	ble.n	800ddce <_strtod_l+0x316>
 800ddcc:	9107      	str	r1, [sp, #28]
 800ddce:	2c00      	cmp	r4, #0
 800ddd0:	d002      	beq.n	800ddd8 <_strtod_l+0x320>
 800ddd2:	9a07      	ldr	r2, [sp, #28]
 800ddd4:	4252      	negs	r2, r2
 800ddd6:	9207      	str	r2, [sp, #28]
 800ddd8:	9a06      	ldr	r2, [sp, #24]
 800ddda:	2a00      	cmp	r2, #0
 800dddc:	d14b      	bne.n	800de76 <_strtod_l+0x3be>
 800ddde:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800dde0:	4310      	orrs	r0, r2
 800dde2:	d000      	beq.n	800dde6 <_strtod_l+0x32e>
 800dde4:	e6a3      	b.n	800db2e <_strtod_l+0x76>
 800dde6:	4662      	mov	r2, ip
 800dde8:	2a00      	cmp	r2, #0
 800ddea:	d000      	beq.n	800ddee <_strtod_l+0x336>
 800ddec:	e6bb      	b.n	800db66 <_strtod_l+0xae>
 800ddee:	2b69      	cmp	r3, #105	@ 0x69
 800ddf0:	d025      	beq.n	800de3e <_strtod_l+0x386>
 800ddf2:	dc21      	bgt.n	800de38 <_strtod_l+0x380>
 800ddf4:	2b49      	cmp	r3, #73	@ 0x49
 800ddf6:	d022      	beq.n	800de3e <_strtod_l+0x386>
 800ddf8:	2b4e      	cmp	r3, #78	@ 0x4e
 800ddfa:	d000      	beq.n	800ddfe <_strtod_l+0x346>
 800ddfc:	e6b3      	b.n	800db66 <_strtod_l+0xae>
 800ddfe:	49a4      	ldr	r1, [pc, #656]	@ (800e090 <_strtod_l+0x5d8>)
 800de00:	a81d      	add	r0, sp, #116	@ 0x74
 800de02:	f001 fa69 	bl	800f2d8 <__match>
 800de06:	2800      	cmp	r0, #0
 800de08:	d100      	bne.n	800de0c <_strtod_l+0x354>
 800de0a:	e6ac      	b.n	800db66 <_strtod_l+0xae>
 800de0c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800de0e:	781b      	ldrb	r3, [r3, #0]
 800de10:	2b28      	cmp	r3, #40	@ 0x28
 800de12:	d12a      	bne.n	800de6a <_strtod_l+0x3b2>
 800de14:	499f      	ldr	r1, [pc, #636]	@ (800e094 <_strtod_l+0x5dc>)
 800de16:	aa20      	add	r2, sp, #128	@ 0x80
 800de18:	a81d      	add	r0, sp, #116	@ 0x74
 800de1a:	f001 fa71 	bl	800f300 <__hexnan>
 800de1e:	2805      	cmp	r0, #5
 800de20:	d123      	bne.n	800de6a <_strtod_l+0x3b2>
 800de22:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800de24:	4a9c      	ldr	r2, [pc, #624]	@ (800e098 <_strtod_l+0x5e0>)
 800de26:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800de28:	431a      	orrs	r2, r3
 800de2a:	0017      	movs	r7, r2
 800de2c:	e67f      	b.n	800db2e <_strtod_l+0x76>
 800de2e:	210a      	movs	r1, #10
 800de30:	434a      	muls	r2, r1
 800de32:	18d2      	adds	r2, r2, r3
 800de34:	3a30      	subs	r2, #48	@ 0x30
 800de36:	e7b7      	b.n	800dda8 <_strtod_l+0x2f0>
 800de38:	2b6e      	cmp	r3, #110	@ 0x6e
 800de3a:	d0e0      	beq.n	800ddfe <_strtod_l+0x346>
 800de3c:	e693      	b.n	800db66 <_strtod_l+0xae>
 800de3e:	4997      	ldr	r1, [pc, #604]	@ (800e09c <_strtod_l+0x5e4>)
 800de40:	a81d      	add	r0, sp, #116	@ 0x74
 800de42:	f001 fa49 	bl	800f2d8 <__match>
 800de46:	2800      	cmp	r0, #0
 800de48:	d100      	bne.n	800de4c <_strtod_l+0x394>
 800de4a:	e68c      	b.n	800db66 <_strtod_l+0xae>
 800de4c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800de4e:	4994      	ldr	r1, [pc, #592]	@ (800e0a0 <_strtod_l+0x5e8>)
 800de50:	3b01      	subs	r3, #1
 800de52:	a81d      	add	r0, sp, #116	@ 0x74
 800de54:	931d      	str	r3, [sp, #116]	@ 0x74
 800de56:	f001 fa3f 	bl	800f2d8 <__match>
 800de5a:	2800      	cmp	r0, #0
 800de5c:	d102      	bne.n	800de64 <_strtod_l+0x3ac>
 800de5e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800de60:	3301      	adds	r3, #1
 800de62:	931d      	str	r3, [sp, #116]	@ 0x74
 800de64:	2600      	movs	r6, #0
 800de66:	4f8c      	ldr	r7, [pc, #560]	@ (800e098 <_strtod_l+0x5e0>)
 800de68:	e661      	b.n	800db2e <_strtod_l+0x76>
 800de6a:	488e      	ldr	r0, [pc, #568]	@ (800e0a4 <_strtod_l+0x5ec>)
 800de6c:	f000 ff46 	bl	800ecfc <nan>
 800de70:	0006      	movs	r6, r0
 800de72:	000f      	movs	r7, r1
 800de74:	e65b      	b.n	800db2e <_strtod_l+0x76>
 800de76:	9b07      	ldr	r3, [sp, #28]
 800de78:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800de7a:	1a9b      	subs	r3, r3, r2
 800de7c:	930c      	str	r3, [sp, #48]	@ 0x30
 800de7e:	9b08      	ldr	r3, [sp, #32]
 800de80:	2b00      	cmp	r3, #0
 800de82:	d101      	bne.n	800de88 <_strtod_l+0x3d0>
 800de84:	9b06      	ldr	r3, [sp, #24]
 800de86:	9308      	str	r3, [sp, #32]
 800de88:	9c06      	ldr	r4, [sp, #24]
 800de8a:	2c10      	cmp	r4, #16
 800de8c:	dd00      	ble.n	800de90 <_strtod_l+0x3d8>
 800de8e:	2410      	movs	r4, #16
 800de90:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800de92:	f7f5 fc9b 	bl	80037cc <__aeabi_ui2d>
 800de96:	9b06      	ldr	r3, [sp, #24]
 800de98:	0006      	movs	r6, r0
 800de9a:	000f      	movs	r7, r1
 800de9c:	2b09      	cmp	r3, #9
 800de9e:	dc13      	bgt.n	800dec8 <_strtod_l+0x410>
 800dea0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d100      	bne.n	800dea8 <_strtod_l+0x3f0>
 800dea6:	e642      	b.n	800db2e <_strtod_l+0x76>
 800dea8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800deaa:	2b00      	cmp	r3, #0
 800deac:	dc00      	bgt.n	800deb0 <_strtod_l+0x3f8>
 800deae:	e07e      	b.n	800dfae <_strtod_l+0x4f6>
 800deb0:	2b16      	cmp	r3, #22
 800deb2:	dc63      	bgt.n	800df7c <_strtod_l+0x4c4>
 800deb4:	497c      	ldr	r1, [pc, #496]	@ (800e0a8 <_strtod_l+0x5f0>)
 800deb6:	00db      	lsls	r3, r3, #3
 800deb8:	18c9      	adds	r1, r1, r3
 800deba:	0032      	movs	r2, r6
 800debc:	6808      	ldr	r0, [r1, #0]
 800debe:	6849      	ldr	r1, [r1, #4]
 800dec0:	003b      	movs	r3, r7
 800dec2:	f7f4 fd07 	bl	80028d4 <__aeabi_dmul>
 800dec6:	e7d3      	b.n	800de70 <_strtod_l+0x3b8>
 800dec8:	0022      	movs	r2, r4
 800deca:	4b77      	ldr	r3, [pc, #476]	@ (800e0a8 <_strtod_l+0x5f0>)
 800decc:	3a09      	subs	r2, #9
 800dece:	00d2      	lsls	r2, r2, #3
 800ded0:	189b      	adds	r3, r3, r2
 800ded2:	681a      	ldr	r2, [r3, #0]
 800ded4:	685b      	ldr	r3, [r3, #4]
 800ded6:	f7f4 fcfd 	bl	80028d4 <__aeabi_dmul>
 800deda:	0006      	movs	r6, r0
 800dedc:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800dede:	000f      	movs	r7, r1
 800dee0:	f7f5 fc74 	bl	80037cc <__aeabi_ui2d>
 800dee4:	000b      	movs	r3, r1
 800dee6:	0002      	movs	r2, r0
 800dee8:	0039      	movs	r1, r7
 800deea:	0030      	movs	r0, r6
 800deec:	f7f3 fcf2 	bl	80018d4 <__aeabi_dadd>
 800def0:	9b06      	ldr	r3, [sp, #24]
 800def2:	0006      	movs	r6, r0
 800def4:	000f      	movs	r7, r1
 800def6:	2b0f      	cmp	r3, #15
 800def8:	ddd2      	ble.n	800dea0 <_strtod_l+0x3e8>
 800defa:	9b06      	ldr	r3, [sp, #24]
 800defc:	1b1c      	subs	r4, r3, r4
 800defe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800df00:	18e4      	adds	r4, r4, r3
 800df02:	2c00      	cmp	r4, #0
 800df04:	dc00      	bgt.n	800df08 <_strtod_l+0x450>
 800df06:	e09b      	b.n	800e040 <_strtod_l+0x588>
 800df08:	220f      	movs	r2, #15
 800df0a:	0023      	movs	r3, r4
 800df0c:	4013      	ands	r3, r2
 800df0e:	4214      	tst	r4, r2
 800df10:	d00a      	beq.n	800df28 <_strtod_l+0x470>
 800df12:	4965      	ldr	r1, [pc, #404]	@ (800e0a8 <_strtod_l+0x5f0>)
 800df14:	00db      	lsls	r3, r3, #3
 800df16:	18c9      	adds	r1, r1, r3
 800df18:	0032      	movs	r2, r6
 800df1a:	6808      	ldr	r0, [r1, #0]
 800df1c:	6849      	ldr	r1, [r1, #4]
 800df1e:	003b      	movs	r3, r7
 800df20:	f7f4 fcd8 	bl	80028d4 <__aeabi_dmul>
 800df24:	0006      	movs	r6, r0
 800df26:	000f      	movs	r7, r1
 800df28:	230f      	movs	r3, #15
 800df2a:	439c      	bics	r4, r3
 800df2c:	d073      	beq.n	800e016 <_strtod_l+0x55e>
 800df2e:	3326      	adds	r3, #38	@ 0x26
 800df30:	33ff      	adds	r3, #255	@ 0xff
 800df32:	429c      	cmp	r4, r3
 800df34:	dd4b      	ble.n	800dfce <_strtod_l+0x516>
 800df36:	2300      	movs	r3, #0
 800df38:	9306      	str	r3, [sp, #24]
 800df3a:	9307      	str	r3, [sp, #28]
 800df3c:	930d      	str	r3, [sp, #52]	@ 0x34
 800df3e:	9308      	str	r3, [sp, #32]
 800df40:	2322      	movs	r3, #34	@ 0x22
 800df42:	2600      	movs	r6, #0
 800df44:	9a05      	ldr	r2, [sp, #20]
 800df46:	4f54      	ldr	r7, [pc, #336]	@ (800e098 <_strtod_l+0x5e0>)
 800df48:	6013      	str	r3, [r2, #0]
 800df4a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800df4c:	42b3      	cmp	r3, r6
 800df4e:	d100      	bne.n	800df52 <_strtod_l+0x49a>
 800df50:	e5ed      	b.n	800db2e <_strtod_l+0x76>
 800df52:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800df54:	9805      	ldr	r0, [sp, #20]
 800df56:	f001 fb83 	bl	800f660 <_Bfree>
 800df5a:	9908      	ldr	r1, [sp, #32]
 800df5c:	9805      	ldr	r0, [sp, #20]
 800df5e:	f001 fb7f 	bl	800f660 <_Bfree>
 800df62:	9907      	ldr	r1, [sp, #28]
 800df64:	9805      	ldr	r0, [sp, #20]
 800df66:	f001 fb7b 	bl	800f660 <_Bfree>
 800df6a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800df6c:	9805      	ldr	r0, [sp, #20]
 800df6e:	f001 fb77 	bl	800f660 <_Bfree>
 800df72:	9906      	ldr	r1, [sp, #24]
 800df74:	9805      	ldr	r0, [sp, #20]
 800df76:	f001 fb73 	bl	800f660 <_Bfree>
 800df7a:	e5d8      	b.n	800db2e <_strtod_l+0x76>
 800df7c:	2325      	movs	r3, #37	@ 0x25
 800df7e:	9a06      	ldr	r2, [sp, #24]
 800df80:	1a9b      	subs	r3, r3, r2
 800df82:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800df84:	4293      	cmp	r3, r2
 800df86:	dbb8      	blt.n	800defa <_strtod_l+0x442>
 800df88:	240f      	movs	r4, #15
 800df8a:	9b06      	ldr	r3, [sp, #24]
 800df8c:	4d46      	ldr	r5, [pc, #280]	@ (800e0a8 <_strtod_l+0x5f0>)
 800df8e:	1ae4      	subs	r4, r4, r3
 800df90:	00e1      	lsls	r1, r4, #3
 800df92:	1869      	adds	r1, r5, r1
 800df94:	0032      	movs	r2, r6
 800df96:	6808      	ldr	r0, [r1, #0]
 800df98:	6849      	ldr	r1, [r1, #4]
 800df9a:	003b      	movs	r3, r7
 800df9c:	f7f4 fc9a 	bl	80028d4 <__aeabi_dmul>
 800dfa0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dfa2:	1b1c      	subs	r4, r3, r4
 800dfa4:	00e4      	lsls	r4, r4, #3
 800dfa6:	192d      	adds	r5, r5, r4
 800dfa8:	682a      	ldr	r2, [r5, #0]
 800dfaa:	686b      	ldr	r3, [r5, #4]
 800dfac:	e789      	b.n	800dec2 <_strtod_l+0x40a>
 800dfae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dfb0:	3316      	adds	r3, #22
 800dfb2:	dba2      	blt.n	800defa <_strtod_l+0x442>
 800dfb4:	9907      	ldr	r1, [sp, #28]
 800dfb6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dfb8:	4b3b      	ldr	r3, [pc, #236]	@ (800e0a8 <_strtod_l+0x5f0>)
 800dfba:	1a52      	subs	r2, r2, r1
 800dfbc:	00d2      	lsls	r2, r2, #3
 800dfbe:	189b      	adds	r3, r3, r2
 800dfc0:	0030      	movs	r0, r6
 800dfc2:	681a      	ldr	r2, [r3, #0]
 800dfc4:	685b      	ldr	r3, [r3, #4]
 800dfc6:	0039      	movs	r1, r7
 800dfc8:	f7f4 f84a 	bl	8002060 <__aeabi_ddiv>
 800dfcc:	e750      	b.n	800de70 <_strtod_l+0x3b8>
 800dfce:	2300      	movs	r3, #0
 800dfd0:	0030      	movs	r0, r6
 800dfd2:	0039      	movs	r1, r7
 800dfd4:	4d35      	ldr	r5, [pc, #212]	@ (800e0ac <_strtod_l+0x5f4>)
 800dfd6:	1124      	asrs	r4, r4, #4
 800dfd8:	9309      	str	r3, [sp, #36]	@ 0x24
 800dfda:	2c01      	cmp	r4, #1
 800dfdc:	dc1e      	bgt.n	800e01c <_strtod_l+0x564>
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d001      	beq.n	800dfe6 <_strtod_l+0x52e>
 800dfe2:	0006      	movs	r6, r0
 800dfe4:	000f      	movs	r7, r1
 800dfe6:	4b32      	ldr	r3, [pc, #200]	@ (800e0b0 <_strtod_l+0x5f8>)
 800dfe8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dfea:	18ff      	adds	r7, r7, r3
 800dfec:	4b2f      	ldr	r3, [pc, #188]	@ (800e0ac <_strtod_l+0x5f4>)
 800dfee:	00d5      	lsls	r5, r2, #3
 800dff0:	195d      	adds	r5, r3, r5
 800dff2:	0032      	movs	r2, r6
 800dff4:	6828      	ldr	r0, [r5, #0]
 800dff6:	6869      	ldr	r1, [r5, #4]
 800dff8:	003b      	movs	r3, r7
 800dffa:	f7f4 fc6b 	bl	80028d4 <__aeabi_dmul>
 800dffe:	4b26      	ldr	r3, [pc, #152]	@ (800e098 <_strtod_l+0x5e0>)
 800e000:	4a2c      	ldr	r2, [pc, #176]	@ (800e0b4 <_strtod_l+0x5fc>)
 800e002:	0006      	movs	r6, r0
 800e004:	400b      	ands	r3, r1
 800e006:	4293      	cmp	r3, r2
 800e008:	d895      	bhi.n	800df36 <_strtod_l+0x47e>
 800e00a:	4a2b      	ldr	r2, [pc, #172]	@ (800e0b8 <_strtod_l+0x600>)
 800e00c:	4293      	cmp	r3, r2
 800e00e:	d913      	bls.n	800e038 <_strtod_l+0x580>
 800e010:	2601      	movs	r6, #1
 800e012:	4f2a      	ldr	r7, [pc, #168]	@ (800e0bc <_strtod_l+0x604>)
 800e014:	4276      	negs	r6, r6
 800e016:	2300      	movs	r3, #0
 800e018:	9309      	str	r3, [sp, #36]	@ 0x24
 800e01a:	e086      	b.n	800e12a <_strtod_l+0x672>
 800e01c:	2201      	movs	r2, #1
 800e01e:	4214      	tst	r4, r2
 800e020:	d004      	beq.n	800e02c <_strtod_l+0x574>
 800e022:	682a      	ldr	r2, [r5, #0]
 800e024:	686b      	ldr	r3, [r5, #4]
 800e026:	f7f4 fc55 	bl	80028d4 <__aeabi_dmul>
 800e02a:	2301      	movs	r3, #1
 800e02c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e02e:	1064      	asrs	r4, r4, #1
 800e030:	3201      	adds	r2, #1
 800e032:	9209      	str	r2, [sp, #36]	@ 0x24
 800e034:	3508      	adds	r5, #8
 800e036:	e7d0      	b.n	800dfda <_strtod_l+0x522>
 800e038:	23d4      	movs	r3, #212	@ 0xd4
 800e03a:	049b      	lsls	r3, r3, #18
 800e03c:	18cf      	adds	r7, r1, r3
 800e03e:	e7ea      	b.n	800e016 <_strtod_l+0x55e>
 800e040:	2c00      	cmp	r4, #0
 800e042:	d0e8      	beq.n	800e016 <_strtod_l+0x55e>
 800e044:	4264      	negs	r4, r4
 800e046:	230f      	movs	r3, #15
 800e048:	0022      	movs	r2, r4
 800e04a:	401a      	ands	r2, r3
 800e04c:	421c      	tst	r4, r3
 800e04e:	d00a      	beq.n	800e066 <_strtod_l+0x5ae>
 800e050:	4b15      	ldr	r3, [pc, #84]	@ (800e0a8 <_strtod_l+0x5f0>)
 800e052:	00d2      	lsls	r2, r2, #3
 800e054:	189b      	adds	r3, r3, r2
 800e056:	0030      	movs	r0, r6
 800e058:	681a      	ldr	r2, [r3, #0]
 800e05a:	685b      	ldr	r3, [r3, #4]
 800e05c:	0039      	movs	r1, r7
 800e05e:	f7f3 ffff 	bl	8002060 <__aeabi_ddiv>
 800e062:	0006      	movs	r6, r0
 800e064:	000f      	movs	r7, r1
 800e066:	1124      	asrs	r4, r4, #4
 800e068:	d0d5      	beq.n	800e016 <_strtod_l+0x55e>
 800e06a:	2c1f      	cmp	r4, #31
 800e06c:	dd28      	ble.n	800e0c0 <_strtod_l+0x608>
 800e06e:	2300      	movs	r3, #0
 800e070:	9306      	str	r3, [sp, #24]
 800e072:	9307      	str	r3, [sp, #28]
 800e074:	930d      	str	r3, [sp, #52]	@ 0x34
 800e076:	9308      	str	r3, [sp, #32]
 800e078:	2322      	movs	r3, #34	@ 0x22
 800e07a:	9a05      	ldr	r2, [sp, #20]
 800e07c:	2600      	movs	r6, #0
 800e07e:	6013      	str	r3, [r2, #0]
 800e080:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e082:	2700      	movs	r7, #0
 800e084:	2b00      	cmp	r3, #0
 800e086:	d000      	beq.n	800e08a <_strtod_l+0x5d2>
 800e088:	e763      	b.n	800df52 <_strtod_l+0x49a>
 800e08a:	e550      	b.n	800db2e <_strtod_l+0x76>
 800e08c:	00004e1f 	.word	0x00004e1f
 800e090:	08011dd3 	.word	0x08011dd3
 800e094:	08011f30 	.word	0x08011f30
 800e098:	7ff00000 	.word	0x7ff00000
 800e09c:	08011dca 	.word	0x08011dca
 800e0a0:	08011dcd 	.word	0x08011dcd
 800e0a4:	08011f2d 	.word	0x08011f2d
 800e0a8:	080120b8 	.word	0x080120b8
 800e0ac:	08012090 	.word	0x08012090
 800e0b0:	fcb00000 	.word	0xfcb00000
 800e0b4:	7ca00000 	.word	0x7ca00000
 800e0b8:	7c900000 	.word	0x7c900000
 800e0bc:	7fefffff 	.word	0x7fefffff
 800e0c0:	2310      	movs	r3, #16
 800e0c2:	0022      	movs	r2, r4
 800e0c4:	401a      	ands	r2, r3
 800e0c6:	9209      	str	r2, [sp, #36]	@ 0x24
 800e0c8:	421c      	tst	r4, r3
 800e0ca:	d001      	beq.n	800e0d0 <_strtod_l+0x618>
 800e0cc:	335a      	adds	r3, #90	@ 0x5a
 800e0ce:	9309      	str	r3, [sp, #36]	@ 0x24
 800e0d0:	0030      	movs	r0, r6
 800e0d2:	0039      	movs	r1, r7
 800e0d4:	2300      	movs	r3, #0
 800e0d6:	4dc0      	ldr	r5, [pc, #768]	@ (800e3d8 <_strtod_l+0x920>)
 800e0d8:	2201      	movs	r2, #1
 800e0da:	4214      	tst	r4, r2
 800e0dc:	d004      	beq.n	800e0e8 <_strtod_l+0x630>
 800e0de:	682a      	ldr	r2, [r5, #0]
 800e0e0:	686b      	ldr	r3, [r5, #4]
 800e0e2:	f7f4 fbf7 	bl	80028d4 <__aeabi_dmul>
 800e0e6:	2301      	movs	r3, #1
 800e0e8:	1064      	asrs	r4, r4, #1
 800e0ea:	3508      	adds	r5, #8
 800e0ec:	2c00      	cmp	r4, #0
 800e0ee:	d1f3      	bne.n	800e0d8 <_strtod_l+0x620>
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d001      	beq.n	800e0f8 <_strtod_l+0x640>
 800e0f4:	0006      	movs	r6, r0
 800e0f6:	000f      	movs	r7, r1
 800e0f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d00d      	beq.n	800e11a <_strtod_l+0x662>
 800e0fe:	236b      	movs	r3, #107	@ 0x6b
 800e100:	007a      	lsls	r2, r7, #1
 800e102:	0d52      	lsrs	r2, r2, #21
 800e104:	0039      	movs	r1, r7
 800e106:	1a9b      	subs	r3, r3, r2
 800e108:	2b00      	cmp	r3, #0
 800e10a:	dd06      	ble.n	800e11a <_strtod_l+0x662>
 800e10c:	2b1f      	cmp	r3, #31
 800e10e:	dd5c      	ble.n	800e1ca <_strtod_l+0x712>
 800e110:	2600      	movs	r6, #0
 800e112:	2b34      	cmp	r3, #52	@ 0x34
 800e114:	dd52      	ble.n	800e1bc <_strtod_l+0x704>
 800e116:	27dc      	movs	r7, #220	@ 0xdc
 800e118:	04bf      	lsls	r7, r7, #18
 800e11a:	2200      	movs	r2, #0
 800e11c:	2300      	movs	r3, #0
 800e11e:	0030      	movs	r0, r6
 800e120:	0039      	movs	r1, r7
 800e122:	f7f2 f99b 	bl	800045c <__aeabi_dcmpeq>
 800e126:	2800      	cmp	r0, #0
 800e128:	d1a1      	bne.n	800e06e <_strtod_l+0x5b6>
 800e12a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e12c:	9a08      	ldr	r2, [sp, #32]
 800e12e:	9300      	str	r3, [sp, #0]
 800e130:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800e132:	9b06      	ldr	r3, [sp, #24]
 800e134:	9805      	ldr	r0, [sp, #20]
 800e136:	f001 fafb 	bl	800f730 <__s2b>
 800e13a:	900d      	str	r0, [sp, #52]	@ 0x34
 800e13c:	2800      	cmp	r0, #0
 800e13e:	d100      	bne.n	800e142 <_strtod_l+0x68a>
 800e140:	e6f9      	b.n	800df36 <_strtod_l+0x47e>
 800e142:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e144:	9907      	ldr	r1, [sp, #28]
 800e146:	43db      	mvns	r3, r3
 800e148:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e14a:	17db      	asrs	r3, r3, #31
 800e14c:	1a52      	subs	r2, r2, r1
 800e14e:	9214      	str	r2, [sp, #80]	@ 0x50
 800e150:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e152:	9914      	ldr	r1, [sp, #80]	@ 0x50
 800e154:	17d2      	asrs	r2, r2, #31
 800e156:	4011      	ands	r1, r2
 800e158:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e15a:	9114      	str	r1, [sp, #80]	@ 0x50
 800e15c:	401a      	ands	r2, r3
 800e15e:	2300      	movs	r3, #0
 800e160:	921a      	str	r2, [sp, #104]	@ 0x68
 800e162:	9306      	str	r3, [sp, #24]
 800e164:	9307      	str	r3, [sp, #28]
 800e166:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e168:	9805      	ldr	r0, [sp, #20]
 800e16a:	6859      	ldr	r1, [r3, #4]
 800e16c:	f001 fa34 	bl	800f5d8 <_Balloc>
 800e170:	9008      	str	r0, [sp, #32]
 800e172:	2800      	cmp	r0, #0
 800e174:	d100      	bne.n	800e178 <_strtod_l+0x6c0>
 800e176:	e6e3      	b.n	800df40 <_strtod_l+0x488>
 800e178:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e17a:	300c      	adds	r0, #12
 800e17c:	0019      	movs	r1, r3
 800e17e:	691a      	ldr	r2, [r3, #16]
 800e180:	310c      	adds	r1, #12
 800e182:	3202      	adds	r2, #2
 800e184:	0092      	lsls	r2, r2, #2
 800e186:	f000 fdb0 	bl	800ecea <memcpy>
 800e18a:	ab20      	add	r3, sp, #128	@ 0x80
 800e18c:	9301      	str	r3, [sp, #4]
 800e18e:	ab1f      	add	r3, sp, #124	@ 0x7c
 800e190:	9300      	str	r3, [sp, #0]
 800e192:	0032      	movs	r2, r6
 800e194:	003b      	movs	r3, r7
 800e196:	9805      	ldr	r0, [sp, #20]
 800e198:	9610      	str	r6, [sp, #64]	@ 0x40
 800e19a:	9711      	str	r7, [sp, #68]	@ 0x44
 800e19c:	f001 fe10 	bl	800fdc0 <__d2b>
 800e1a0:	901e      	str	r0, [sp, #120]	@ 0x78
 800e1a2:	2800      	cmp	r0, #0
 800e1a4:	d100      	bne.n	800e1a8 <_strtod_l+0x6f0>
 800e1a6:	e6cb      	b.n	800df40 <_strtod_l+0x488>
 800e1a8:	2101      	movs	r1, #1
 800e1aa:	9805      	ldr	r0, [sp, #20]
 800e1ac:	f001 fb5c 	bl	800f868 <__i2b>
 800e1b0:	9007      	str	r0, [sp, #28]
 800e1b2:	2800      	cmp	r0, #0
 800e1b4:	d10e      	bne.n	800e1d4 <_strtod_l+0x71c>
 800e1b6:	2300      	movs	r3, #0
 800e1b8:	9307      	str	r3, [sp, #28]
 800e1ba:	e6c1      	b.n	800df40 <_strtod_l+0x488>
 800e1bc:	234b      	movs	r3, #75	@ 0x4b
 800e1be:	1a9a      	subs	r2, r3, r2
 800e1c0:	3b4c      	subs	r3, #76	@ 0x4c
 800e1c2:	4093      	lsls	r3, r2
 800e1c4:	4019      	ands	r1, r3
 800e1c6:	000f      	movs	r7, r1
 800e1c8:	e7a7      	b.n	800e11a <_strtod_l+0x662>
 800e1ca:	2201      	movs	r2, #1
 800e1cc:	4252      	negs	r2, r2
 800e1ce:	409a      	lsls	r2, r3
 800e1d0:	4016      	ands	r6, r2
 800e1d2:	e7a2      	b.n	800e11a <_strtod_l+0x662>
 800e1d4:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800e1d6:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e1d8:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800e1da:	1ad4      	subs	r4, r2, r3
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	db01      	blt.n	800e1e4 <_strtod_l+0x72c>
 800e1e0:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 800e1e2:	195d      	adds	r5, r3, r5
 800e1e4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e1e6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800e1e8:	1a5b      	subs	r3, r3, r1
 800e1ea:	2136      	movs	r1, #54	@ 0x36
 800e1ec:	189b      	adds	r3, r3, r2
 800e1ee:	1a8a      	subs	r2, r1, r2
 800e1f0:	497a      	ldr	r1, [pc, #488]	@ (800e3dc <_strtod_l+0x924>)
 800e1f2:	2001      	movs	r0, #1
 800e1f4:	468c      	mov	ip, r1
 800e1f6:	2100      	movs	r1, #0
 800e1f8:	3b01      	subs	r3, #1
 800e1fa:	9115      	str	r1, [sp, #84]	@ 0x54
 800e1fc:	9016      	str	r0, [sp, #88]	@ 0x58
 800e1fe:	4563      	cmp	r3, ip
 800e200:	da06      	bge.n	800e210 <_strtod_l+0x758>
 800e202:	4661      	mov	r1, ip
 800e204:	1ac9      	subs	r1, r1, r3
 800e206:	1a52      	subs	r2, r2, r1
 800e208:	291f      	cmp	r1, #31
 800e20a:	dc3f      	bgt.n	800e28c <_strtod_l+0x7d4>
 800e20c:	4088      	lsls	r0, r1
 800e20e:	9016      	str	r0, [sp, #88]	@ 0x58
 800e210:	18ab      	adds	r3, r5, r2
 800e212:	930e      	str	r3, [sp, #56]	@ 0x38
 800e214:	18a4      	adds	r4, r4, r2
 800e216:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e218:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e21a:	191c      	adds	r4, r3, r4
 800e21c:	002b      	movs	r3, r5
 800e21e:	4295      	cmp	r5, r2
 800e220:	dd00      	ble.n	800e224 <_strtod_l+0x76c>
 800e222:	0013      	movs	r3, r2
 800e224:	42a3      	cmp	r3, r4
 800e226:	dd00      	ble.n	800e22a <_strtod_l+0x772>
 800e228:	0023      	movs	r3, r4
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	dd04      	ble.n	800e238 <_strtod_l+0x780>
 800e22e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e230:	1ae4      	subs	r4, r4, r3
 800e232:	1ad2      	subs	r2, r2, r3
 800e234:	920e      	str	r2, [sp, #56]	@ 0x38
 800e236:	1aed      	subs	r5, r5, r3
 800e238:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	dd16      	ble.n	800e26c <_strtod_l+0x7b4>
 800e23e:	001a      	movs	r2, r3
 800e240:	9907      	ldr	r1, [sp, #28]
 800e242:	9805      	ldr	r0, [sp, #20]
 800e244:	f001 fbd2 	bl	800f9ec <__pow5mult>
 800e248:	9007      	str	r0, [sp, #28]
 800e24a:	2800      	cmp	r0, #0
 800e24c:	d0b3      	beq.n	800e1b6 <_strtod_l+0x6fe>
 800e24e:	0001      	movs	r1, r0
 800e250:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 800e252:	9805      	ldr	r0, [sp, #20]
 800e254:	f001 fb20 	bl	800f898 <__multiply>
 800e258:	9013      	str	r0, [sp, #76]	@ 0x4c
 800e25a:	2800      	cmp	r0, #0
 800e25c:	d100      	bne.n	800e260 <_strtod_l+0x7a8>
 800e25e:	e66f      	b.n	800df40 <_strtod_l+0x488>
 800e260:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800e262:	9805      	ldr	r0, [sp, #20]
 800e264:	f001 f9fc 	bl	800f660 <_Bfree>
 800e268:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e26a:	931e      	str	r3, [sp, #120]	@ 0x78
 800e26c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e26e:	2b00      	cmp	r3, #0
 800e270:	dc12      	bgt.n	800e298 <_strtod_l+0x7e0>
 800e272:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e274:	2b00      	cmp	r3, #0
 800e276:	dd18      	ble.n	800e2aa <_strtod_l+0x7f2>
 800e278:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e27a:	9908      	ldr	r1, [sp, #32]
 800e27c:	9805      	ldr	r0, [sp, #20]
 800e27e:	f001 fbb5 	bl	800f9ec <__pow5mult>
 800e282:	9008      	str	r0, [sp, #32]
 800e284:	2800      	cmp	r0, #0
 800e286:	d110      	bne.n	800e2aa <_strtod_l+0x7f2>
 800e288:	2300      	movs	r3, #0
 800e28a:	e658      	b.n	800df3e <_strtod_l+0x486>
 800e28c:	4954      	ldr	r1, [pc, #336]	@ (800e3e0 <_strtod_l+0x928>)
 800e28e:	1acb      	subs	r3, r1, r3
 800e290:	0001      	movs	r1, r0
 800e292:	4099      	lsls	r1, r3
 800e294:	9115      	str	r1, [sp, #84]	@ 0x54
 800e296:	e7ba      	b.n	800e20e <_strtod_l+0x756>
 800e298:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e29a:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800e29c:	9805      	ldr	r0, [sp, #20]
 800e29e:	f001 fc01 	bl	800faa4 <__lshift>
 800e2a2:	901e      	str	r0, [sp, #120]	@ 0x78
 800e2a4:	2800      	cmp	r0, #0
 800e2a6:	d1e4      	bne.n	800e272 <_strtod_l+0x7ba>
 800e2a8:	e64a      	b.n	800df40 <_strtod_l+0x488>
 800e2aa:	2c00      	cmp	r4, #0
 800e2ac:	dd07      	ble.n	800e2be <_strtod_l+0x806>
 800e2ae:	0022      	movs	r2, r4
 800e2b0:	9908      	ldr	r1, [sp, #32]
 800e2b2:	9805      	ldr	r0, [sp, #20]
 800e2b4:	f001 fbf6 	bl	800faa4 <__lshift>
 800e2b8:	9008      	str	r0, [sp, #32]
 800e2ba:	2800      	cmp	r0, #0
 800e2bc:	d0e4      	beq.n	800e288 <_strtod_l+0x7d0>
 800e2be:	2d00      	cmp	r5, #0
 800e2c0:	dd08      	ble.n	800e2d4 <_strtod_l+0x81c>
 800e2c2:	002a      	movs	r2, r5
 800e2c4:	9907      	ldr	r1, [sp, #28]
 800e2c6:	9805      	ldr	r0, [sp, #20]
 800e2c8:	f001 fbec 	bl	800faa4 <__lshift>
 800e2cc:	9007      	str	r0, [sp, #28]
 800e2ce:	2800      	cmp	r0, #0
 800e2d0:	d100      	bne.n	800e2d4 <_strtod_l+0x81c>
 800e2d2:	e635      	b.n	800df40 <_strtod_l+0x488>
 800e2d4:	9a08      	ldr	r2, [sp, #32]
 800e2d6:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800e2d8:	9805      	ldr	r0, [sp, #20]
 800e2da:	f001 fc6b 	bl	800fbb4 <__mdiff>
 800e2de:	9006      	str	r0, [sp, #24]
 800e2e0:	2800      	cmp	r0, #0
 800e2e2:	d100      	bne.n	800e2e6 <_strtod_l+0x82e>
 800e2e4:	e62c      	b.n	800df40 <_strtod_l+0x488>
 800e2e6:	68c3      	ldr	r3, [r0, #12]
 800e2e8:	9907      	ldr	r1, [sp, #28]
 800e2ea:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e2ec:	2300      	movs	r3, #0
 800e2ee:	60c3      	str	r3, [r0, #12]
 800e2f0:	f001 fc44 	bl	800fb7c <__mcmp>
 800e2f4:	2800      	cmp	r0, #0
 800e2f6:	da3b      	bge.n	800e370 <_strtod_l+0x8b8>
 800e2f8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e2fa:	4333      	orrs	r3, r6
 800e2fc:	d167      	bne.n	800e3ce <_strtod_l+0x916>
 800e2fe:	033b      	lsls	r3, r7, #12
 800e300:	d165      	bne.n	800e3ce <_strtod_l+0x916>
 800e302:	22d6      	movs	r2, #214	@ 0xd6
 800e304:	4b37      	ldr	r3, [pc, #220]	@ (800e3e4 <_strtod_l+0x92c>)
 800e306:	04d2      	lsls	r2, r2, #19
 800e308:	403b      	ands	r3, r7
 800e30a:	4293      	cmp	r3, r2
 800e30c:	d95f      	bls.n	800e3ce <_strtod_l+0x916>
 800e30e:	9b06      	ldr	r3, [sp, #24]
 800e310:	695b      	ldr	r3, [r3, #20]
 800e312:	2b00      	cmp	r3, #0
 800e314:	d103      	bne.n	800e31e <_strtod_l+0x866>
 800e316:	9b06      	ldr	r3, [sp, #24]
 800e318:	691b      	ldr	r3, [r3, #16]
 800e31a:	2b01      	cmp	r3, #1
 800e31c:	dd57      	ble.n	800e3ce <_strtod_l+0x916>
 800e31e:	9906      	ldr	r1, [sp, #24]
 800e320:	2201      	movs	r2, #1
 800e322:	9805      	ldr	r0, [sp, #20]
 800e324:	f001 fbbe 	bl	800faa4 <__lshift>
 800e328:	9907      	ldr	r1, [sp, #28]
 800e32a:	9006      	str	r0, [sp, #24]
 800e32c:	f001 fc26 	bl	800fb7c <__mcmp>
 800e330:	2800      	cmp	r0, #0
 800e332:	dd4c      	ble.n	800e3ce <_strtod_l+0x916>
 800e334:	4b2b      	ldr	r3, [pc, #172]	@ (800e3e4 <_strtod_l+0x92c>)
 800e336:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e338:	403b      	ands	r3, r7
 800e33a:	2a00      	cmp	r2, #0
 800e33c:	d074      	beq.n	800e428 <_strtod_l+0x970>
 800e33e:	22d6      	movs	r2, #214	@ 0xd6
 800e340:	04d2      	lsls	r2, r2, #19
 800e342:	4293      	cmp	r3, r2
 800e344:	d870      	bhi.n	800e428 <_strtod_l+0x970>
 800e346:	22dc      	movs	r2, #220	@ 0xdc
 800e348:	0492      	lsls	r2, r2, #18
 800e34a:	4293      	cmp	r3, r2
 800e34c:	d800      	bhi.n	800e350 <_strtod_l+0x898>
 800e34e:	e693      	b.n	800e078 <_strtod_l+0x5c0>
 800e350:	0030      	movs	r0, r6
 800e352:	0039      	movs	r1, r7
 800e354:	4b24      	ldr	r3, [pc, #144]	@ (800e3e8 <_strtod_l+0x930>)
 800e356:	2200      	movs	r2, #0
 800e358:	f7f4 fabc 	bl	80028d4 <__aeabi_dmul>
 800e35c:	4b21      	ldr	r3, [pc, #132]	@ (800e3e4 <_strtod_l+0x92c>)
 800e35e:	0006      	movs	r6, r0
 800e360:	000f      	movs	r7, r1
 800e362:	420b      	tst	r3, r1
 800e364:	d000      	beq.n	800e368 <_strtod_l+0x8b0>
 800e366:	e5f4      	b.n	800df52 <_strtod_l+0x49a>
 800e368:	2322      	movs	r3, #34	@ 0x22
 800e36a:	9a05      	ldr	r2, [sp, #20]
 800e36c:	6013      	str	r3, [r2, #0]
 800e36e:	e5f0      	b.n	800df52 <_strtod_l+0x49a>
 800e370:	970e      	str	r7, [sp, #56]	@ 0x38
 800e372:	2800      	cmp	r0, #0
 800e374:	d175      	bne.n	800e462 <_strtod_l+0x9aa>
 800e376:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e378:	033b      	lsls	r3, r7, #12
 800e37a:	0b1b      	lsrs	r3, r3, #12
 800e37c:	2a00      	cmp	r2, #0
 800e37e:	d039      	beq.n	800e3f4 <_strtod_l+0x93c>
 800e380:	4a1a      	ldr	r2, [pc, #104]	@ (800e3ec <_strtod_l+0x934>)
 800e382:	4293      	cmp	r3, r2
 800e384:	d138      	bne.n	800e3f8 <_strtod_l+0x940>
 800e386:	2101      	movs	r1, #1
 800e388:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e38a:	4249      	negs	r1, r1
 800e38c:	0032      	movs	r2, r6
 800e38e:	0008      	movs	r0, r1
 800e390:	2b00      	cmp	r3, #0
 800e392:	d00b      	beq.n	800e3ac <_strtod_l+0x8f4>
 800e394:	24d4      	movs	r4, #212	@ 0xd4
 800e396:	4b13      	ldr	r3, [pc, #76]	@ (800e3e4 <_strtod_l+0x92c>)
 800e398:	0008      	movs	r0, r1
 800e39a:	403b      	ands	r3, r7
 800e39c:	04e4      	lsls	r4, r4, #19
 800e39e:	42a3      	cmp	r3, r4
 800e3a0:	d804      	bhi.n	800e3ac <_strtod_l+0x8f4>
 800e3a2:	306c      	adds	r0, #108	@ 0x6c
 800e3a4:	0d1b      	lsrs	r3, r3, #20
 800e3a6:	1ac3      	subs	r3, r0, r3
 800e3a8:	4099      	lsls	r1, r3
 800e3aa:	0008      	movs	r0, r1
 800e3ac:	4282      	cmp	r2, r0
 800e3ae:	d123      	bne.n	800e3f8 <_strtod_l+0x940>
 800e3b0:	4b0f      	ldr	r3, [pc, #60]	@ (800e3f0 <_strtod_l+0x938>)
 800e3b2:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800e3b4:	4299      	cmp	r1, r3
 800e3b6:	d102      	bne.n	800e3be <_strtod_l+0x906>
 800e3b8:	3201      	adds	r2, #1
 800e3ba:	d100      	bne.n	800e3be <_strtod_l+0x906>
 800e3bc:	e5c0      	b.n	800df40 <_strtod_l+0x488>
 800e3be:	4b09      	ldr	r3, [pc, #36]	@ (800e3e4 <_strtod_l+0x92c>)
 800e3c0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e3c2:	2600      	movs	r6, #0
 800e3c4:	401a      	ands	r2, r3
 800e3c6:	0013      	movs	r3, r2
 800e3c8:	2280      	movs	r2, #128	@ 0x80
 800e3ca:	0352      	lsls	r2, r2, #13
 800e3cc:	189f      	adds	r7, r3, r2
 800e3ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d1bd      	bne.n	800e350 <_strtod_l+0x898>
 800e3d4:	e5bd      	b.n	800df52 <_strtod_l+0x49a>
 800e3d6:	46c0      	nop			@ (mov r8, r8)
 800e3d8:	08011f58 	.word	0x08011f58
 800e3dc:	fffffc02 	.word	0xfffffc02
 800e3e0:	fffffbe2 	.word	0xfffffbe2
 800e3e4:	7ff00000 	.word	0x7ff00000
 800e3e8:	39500000 	.word	0x39500000
 800e3ec:	000fffff 	.word	0x000fffff
 800e3f0:	7fefffff 	.word	0x7fefffff
 800e3f4:	4333      	orrs	r3, r6
 800e3f6:	d09d      	beq.n	800e334 <_strtod_l+0x87c>
 800e3f8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d01c      	beq.n	800e438 <_strtod_l+0x980>
 800e3fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e400:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800e402:	4213      	tst	r3, r2
 800e404:	d0e3      	beq.n	800e3ce <_strtod_l+0x916>
 800e406:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e408:	0030      	movs	r0, r6
 800e40a:	0039      	movs	r1, r7
 800e40c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d016      	beq.n	800e440 <_strtod_l+0x988>
 800e412:	f7ff fb39 	bl	800da88 <sulp>
 800e416:	0002      	movs	r2, r0
 800e418:	000b      	movs	r3, r1
 800e41a:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800e41c:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800e41e:	f7f3 fa59 	bl	80018d4 <__aeabi_dadd>
 800e422:	0006      	movs	r6, r0
 800e424:	000f      	movs	r7, r1
 800e426:	e7d2      	b.n	800e3ce <_strtod_l+0x916>
 800e428:	2601      	movs	r6, #1
 800e42a:	4a92      	ldr	r2, [pc, #584]	@ (800e674 <_strtod_l+0xbbc>)
 800e42c:	4276      	negs	r6, r6
 800e42e:	189b      	adds	r3, r3, r2
 800e430:	4a91      	ldr	r2, [pc, #580]	@ (800e678 <_strtod_l+0xbc0>)
 800e432:	431a      	orrs	r2, r3
 800e434:	0017      	movs	r7, r2
 800e436:	e7ca      	b.n	800e3ce <_strtod_l+0x916>
 800e438:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e43a:	4233      	tst	r3, r6
 800e43c:	d0c7      	beq.n	800e3ce <_strtod_l+0x916>
 800e43e:	e7e2      	b.n	800e406 <_strtod_l+0x94e>
 800e440:	f7ff fb22 	bl	800da88 <sulp>
 800e444:	0002      	movs	r2, r0
 800e446:	000b      	movs	r3, r1
 800e448:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800e44a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800e44c:	f7f4 fd28 	bl	8002ea0 <__aeabi_dsub>
 800e450:	2200      	movs	r2, #0
 800e452:	2300      	movs	r3, #0
 800e454:	0006      	movs	r6, r0
 800e456:	000f      	movs	r7, r1
 800e458:	f7f2 f800 	bl	800045c <__aeabi_dcmpeq>
 800e45c:	2800      	cmp	r0, #0
 800e45e:	d0b6      	beq.n	800e3ce <_strtod_l+0x916>
 800e460:	e60a      	b.n	800e078 <_strtod_l+0x5c0>
 800e462:	9907      	ldr	r1, [sp, #28]
 800e464:	9806      	ldr	r0, [sp, #24]
 800e466:	f001 fd0b 	bl	800fe80 <__ratio>
 800e46a:	2380      	movs	r3, #128	@ 0x80
 800e46c:	2200      	movs	r2, #0
 800e46e:	05db      	lsls	r3, r3, #23
 800e470:	0004      	movs	r4, r0
 800e472:	000d      	movs	r5, r1
 800e474:	f7f2 f802 	bl	800047c <__aeabi_dcmple>
 800e478:	2800      	cmp	r0, #0
 800e47a:	d06c      	beq.n	800e556 <_strtod_l+0xa9e>
 800e47c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d177      	bne.n	800e572 <_strtod_l+0xaba>
 800e482:	2e00      	cmp	r6, #0
 800e484:	d157      	bne.n	800e536 <_strtod_l+0xa7e>
 800e486:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e488:	031b      	lsls	r3, r3, #12
 800e48a:	d15a      	bne.n	800e542 <_strtod_l+0xa8a>
 800e48c:	2200      	movs	r2, #0
 800e48e:	0020      	movs	r0, r4
 800e490:	0029      	movs	r1, r5
 800e492:	4b7a      	ldr	r3, [pc, #488]	@ (800e67c <_strtod_l+0xbc4>)
 800e494:	f7f1 ffe8 	bl	8000468 <__aeabi_dcmplt>
 800e498:	2800      	cmp	r0, #0
 800e49a:	d159      	bne.n	800e550 <_strtod_l+0xa98>
 800e49c:	0020      	movs	r0, r4
 800e49e:	0029      	movs	r1, r5
 800e4a0:	2200      	movs	r2, #0
 800e4a2:	4b77      	ldr	r3, [pc, #476]	@ (800e680 <_strtod_l+0xbc8>)
 800e4a4:	f7f4 fa16 	bl	80028d4 <__aeabi_dmul>
 800e4a8:	0004      	movs	r4, r0
 800e4aa:	000d      	movs	r5, r1
 800e4ac:	2380      	movs	r3, #128	@ 0x80
 800e4ae:	061b      	lsls	r3, r3, #24
 800e4b0:	18eb      	adds	r3, r5, r3
 800e4b2:	940a      	str	r4, [sp, #40]	@ 0x28
 800e4b4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e4b6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e4b8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e4ba:	9216      	str	r2, [sp, #88]	@ 0x58
 800e4bc:	9317      	str	r3, [sp, #92]	@ 0x5c
 800e4be:	4a71      	ldr	r2, [pc, #452]	@ (800e684 <_strtod_l+0xbcc>)
 800e4c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e4c2:	4013      	ands	r3, r2
 800e4c4:	9315      	str	r3, [sp, #84]	@ 0x54
 800e4c6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800e4c8:	4b6f      	ldr	r3, [pc, #444]	@ (800e688 <_strtod_l+0xbd0>)
 800e4ca:	429a      	cmp	r2, r3
 800e4cc:	d000      	beq.n	800e4d0 <_strtod_l+0xa18>
 800e4ce:	e087      	b.n	800e5e0 <_strtod_l+0xb28>
 800e4d0:	4a6e      	ldr	r2, [pc, #440]	@ (800e68c <_strtod_l+0xbd4>)
 800e4d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e4d4:	4694      	mov	ip, r2
 800e4d6:	4463      	add	r3, ip
 800e4d8:	001f      	movs	r7, r3
 800e4da:	0030      	movs	r0, r6
 800e4dc:	0019      	movs	r1, r3
 800e4de:	f001 fc03 	bl	800fce8 <__ulp>
 800e4e2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e4e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e4e6:	f7f4 f9f5 	bl	80028d4 <__aeabi_dmul>
 800e4ea:	0032      	movs	r2, r6
 800e4ec:	003b      	movs	r3, r7
 800e4ee:	f7f3 f9f1 	bl	80018d4 <__aeabi_dadd>
 800e4f2:	4a64      	ldr	r2, [pc, #400]	@ (800e684 <_strtod_l+0xbcc>)
 800e4f4:	4b66      	ldr	r3, [pc, #408]	@ (800e690 <_strtod_l+0xbd8>)
 800e4f6:	0006      	movs	r6, r0
 800e4f8:	400a      	ands	r2, r1
 800e4fa:	429a      	cmp	r2, r3
 800e4fc:	d940      	bls.n	800e580 <_strtod_l+0xac8>
 800e4fe:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e500:	4a64      	ldr	r2, [pc, #400]	@ (800e694 <_strtod_l+0xbdc>)
 800e502:	4293      	cmp	r3, r2
 800e504:	d103      	bne.n	800e50e <_strtod_l+0xa56>
 800e506:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e508:	3301      	adds	r3, #1
 800e50a:	d100      	bne.n	800e50e <_strtod_l+0xa56>
 800e50c:	e518      	b.n	800df40 <_strtod_l+0x488>
 800e50e:	2601      	movs	r6, #1
 800e510:	4f60      	ldr	r7, [pc, #384]	@ (800e694 <_strtod_l+0xbdc>)
 800e512:	4276      	negs	r6, r6
 800e514:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800e516:	9805      	ldr	r0, [sp, #20]
 800e518:	f001 f8a2 	bl	800f660 <_Bfree>
 800e51c:	9908      	ldr	r1, [sp, #32]
 800e51e:	9805      	ldr	r0, [sp, #20]
 800e520:	f001 f89e 	bl	800f660 <_Bfree>
 800e524:	9907      	ldr	r1, [sp, #28]
 800e526:	9805      	ldr	r0, [sp, #20]
 800e528:	f001 f89a 	bl	800f660 <_Bfree>
 800e52c:	9906      	ldr	r1, [sp, #24]
 800e52e:	9805      	ldr	r0, [sp, #20]
 800e530:	f001 f896 	bl	800f660 <_Bfree>
 800e534:	e617      	b.n	800e166 <_strtod_l+0x6ae>
 800e536:	2e01      	cmp	r6, #1
 800e538:	d103      	bne.n	800e542 <_strtod_l+0xa8a>
 800e53a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d100      	bne.n	800e542 <_strtod_l+0xa8a>
 800e540:	e59a      	b.n	800e078 <_strtod_l+0x5c0>
 800e542:	2300      	movs	r3, #0
 800e544:	4c54      	ldr	r4, [pc, #336]	@ (800e698 <_strtod_l+0xbe0>)
 800e546:	4d4d      	ldr	r5, [pc, #308]	@ (800e67c <_strtod_l+0xbc4>)
 800e548:	930a      	str	r3, [sp, #40]	@ 0x28
 800e54a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e54c:	2400      	movs	r4, #0
 800e54e:	e7b2      	b.n	800e4b6 <_strtod_l+0x9fe>
 800e550:	2400      	movs	r4, #0
 800e552:	4d4b      	ldr	r5, [pc, #300]	@ (800e680 <_strtod_l+0xbc8>)
 800e554:	e7aa      	b.n	800e4ac <_strtod_l+0x9f4>
 800e556:	0020      	movs	r0, r4
 800e558:	0029      	movs	r1, r5
 800e55a:	4b49      	ldr	r3, [pc, #292]	@ (800e680 <_strtod_l+0xbc8>)
 800e55c:	2200      	movs	r2, #0
 800e55e:	f7f4 f9b9 	bl	80028d4 <__aeabi_dmul>
 800e562:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e564:	0004      	movs	r4, r0
 800e566:	000d      	movs	r5, r1
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d09f      	beq.n	800e4ac <_strtod_l+0x9f4>
 800e56c:	940a      	str	r4, [sp, #40]	@ 0x28
 800e56e:	950b      	str	r5, [sp, #44]	@ 0x2c
 800e570:	e7a1      	b.n	800e4b6 <_strtod_l+0x9fe>
 800e572:	2300      	movs	r3, #0
 800e574:	4c41      	ldr	r4, [pc, #260]	@ (800e67c <_strtod_l+0xbc4>)
 800e576:	0025      	movs	r5, r4
 800e578:	930a      	str	r3, [sp, #40]	@ 0x28
 800e57a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e57c:	001c      	movs	r4, r3
 800e57e:	e79a      	b.n	800e4b6 <_strtod_l+0x9fe>
 800e580:	23d4      	movs	r3, #212	@ 0xd4
 800e582:	049b      	lsls	r3, r3, #18
 800e584:	18cf      	adds	r7, r1, r3
 800e586:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e588:	9710      	str	r7, [sp, #64]	@ 0x40
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d1c2      	bne.n	800e514 <_strtod_l+0xa5c>
 800e58e:	4b3d      	ldr	r3, [pc, #244]	@ (800e684 <_strtod_l+0xbcc>)
 800e590:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800e592:	403b      	ands	r3, r7
 800e594:	429a      	cmp	r2, r3
 800e596:	d1bd      	bne.n	800e514 <_strtod_l+0xa5c>
 800e598:	0020      	movs	r0, r4
 800e59a:	0029      	movs	r1, r5
 800e59c:	f7f2 f84a 	bl	8000634 <__aeabi_d2lz>
 800e5a0:	f7f2 f882 	bl	80006a8 <__aeabi_l2d>
 800e5a4:	0002      	movs	r2, r0
 800e5a6:	000b      	movs	r3, r1
 800e5a8:	0020      	movs	r0, r4
 800e5aa:	0029      	movs	r1, r5
 800e5ac:	f7f4 fc78 	bl	8002ea0 <__aeabi_dsub>
 800e5b0:	033c      	lsls	r4, r7, #12
 800e5b2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e5b4:	0b24      	lsrs	r4, r4, #12
 800e5b6:	4334      	orrs	r4, r6
 800e5b8:	900e      	str	r0, [sp, #56]	@ 0x38
 800e5ba:	910f      	str	r1, [sp, #60]	@ 0x3c
 800e5bc:	4a37      	ldr	r2, [pc, #220]	@ (800e69c <_strtod_l+0xbe4>)
 800e5be:	431c      	orrs	r4, r3
 800e5c0:	d052      	beq.n	800e668 <_strtod_l+0xbb0>
 800e5c2:	4b37      	ldr	r3, [pc, #220]	@ (800e6a0 <_strtod_l+0xbe8>)
 800e5c4:	f7f1 ff50 	bl	8000468 <__aeabi_dcmplt>
 800e5c8:	2800      	cmp	r0, #0
 800e5ca:	d000      	beq.n	800e5ce <_strtod_l+0xb16>
 800e5cc:	e4c1      	b.n	800df52 <_strtod_l+0x49a>
 800e5ce:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800e5d0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800e5d2:	4a34      	ldr	r2, [pc, #208]	@ (800e6a4 <_strtod_l+0xbec>)
 800e5d4:	4b2a      	ldr	r3, [pc, #168]	@ (800e680 <_strtod_l+0xbc8>)
 800e5d6:	f7f1 ff5b 	bl	8000490 <__aeabi_dcmpgt>
 800e5da:	2800      	cmp	r0, #0
 800e5dc:	d09a      	beq.n	800e514 <_strtod_l+0xa5c>
 800e5de:	e4b8      	b.n	800df52 <_strtod_l+0x49a>
 800e5e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d02a      	beq.n	800e63c <_strtod_l+0xb84>
 800e5e6:	23d4      	movs	r3, #212	@ 0xd4
 800e5e8:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800e5ea:	04db      	lsls	r3, r3, #19
 800e5ec:	429a      	cmp	r2, r3
 800e5ee:	d825      	bhi.n	800e63c <_strtod_l+0xb84>
 800e5f0:	0020      	movs	r0, r4
 800e5f2:	0029      	movs	r1, r5
 800e5f4:	4a2c      	ldr	r2, [pc, #176]	@ (800e6a8 <_strtod_l+0xbf0>)
 800e5f6:	4b2d      	ldr	r3, [pc, #180]	@ (800e6ac <_strtod_l+0xbf4>)
 800e5f8:	f7f1 ff40 	bl	800047c <__aeabi_dcmple>
 800e5fc:	2800      	cmp	r0, #0
 800e5fe:	d016      	beq.n	800e62e <_strtod_l+0xb76>
 800e600:	0020      	movs	r0, r4
 800e602:	0029      	movs	r1, r5
 800e604:	f7f1 fff8 	bl	80005f8 <__aeabi_d2uiz>
 800e608:	2800      	cmp	r0, #0
 800e60a:	d100      	bne.n	800e60e <_strtod_l+0xb56>
 800e60c:	3001      	adds	r0, #1
 800e60e:	f7f5 f8dd 	bl	80037cc <__aeabi_ui2d>
 800e612:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e614:	0004      	movs	r4, r0
 800e616:	000d      	movs	r5, r1
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d122      	bne.n	800e662 <_strtod_l+0xbaa>
 800e61c:	2380      	movs	r3, #128	@ 0x80
 800e61e:	061b      	lsls	r3, r3, #24
 800e620:	18cb      	adds	r3, r1, r3
 800e622:	9018      	str	r0, [sp, #96]	@ 0x60
 800e624:	9319      	str	r3, [sp, #100]	@ 0x64
 800e626:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800e628:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e62a:	9216      	str	r2, [sp, #88]	@ 0x58
 800e62c:	9317      	str	r3, [sp, #92]	@ 0x5c
 800e62e:	22d6      	movs	r2, #214	@ 0xd6
 800e630:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e632:	04d2      	lsls	r2, r2, #19
 800e634:	189b      	adds	r3, r3, r2
 800e636:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800e638:	1a9b      	subs	r3, r3, r2
 800e63a:	9317      	str	r3, [sp, #92]	@ 0x5c
 800e63c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800e63e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800e640:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 800e642:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 800e644:	f001 fb50 	bl	800fce8 <__ulp>
 800e648:	0002      	movs	r2, r0
 800e64a:	000b      	movs	r3, r1
 800e64c:	0030      	movs	r0, r6
 800e64e:	0039      	movs	r1, r7
 800e650:	f7f4 f940 	bl	80028d4 <__aeabi_dmul>
 800e654:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800e656:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e658:	f7f3 f93c 	bl	80018d4 <__aeabi_dadd>
 800e65c:	0006      	movs	r6, r0
 800e65e:	000f      	movs	r7, r1
 800e660:	e791      	b.n	800e586 <_strtod_l+0xace>
 800e662:	9418      	str	r4, [sp, #96]	@ 0x60
 800e664:	9519      	str	r5, [sp, #100]	@ 0x64
 800e666:	e7de      	b.n	800e626 <_strtod_l+0xb6e>
 800e668:	4b11      	ldr	r3, [pc, #68]	@ (800e6b0 <_strtod_l+0xbf8>)
 800e66a:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800e66c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800e66e:	f7f1 fefb 	bl	8000468 <__aeabi_dcmplt>
 800e672:	e7b2      	b.n	800e5da <_strtod_l+0xb22>
 800e674:	fff00000 	.word	0xfff00000
 800e678:	000fffff 	.word	0x000fffff
 800e67c:	3ff00000 	.word	0x3ff00000
 800e680:	3fe00000 	.word	0x3fe00000
 800e684:	7ff00000 	.word	0x7ff00000
 800e688:	7fe00000 	.word	0x7fe00000
 800e68c:	fcb00000 	.word	0xfcb00000
 800e690:	7c9fffff 	.word	0x7c9fffff
 800e694:	7fefffff 	.word	0x7fefffff
 800e698:	bff00000 	.word	0xbff00000
 800e69c:	94a03595 	.word	0x94a03595
 800e6a0:	3fdfffff 	.word	0x3fdfffff
 800e6a4:	35afe535 	.word	0x35afe535
 800e6a8:	ffc00000 	.word	0xffc00000
 800e6ac:	41dfffff 	.word	0x41dfffff
 800e6b0:	3fcfffff 	.word	0x3fcfffff

0800e6b4 <strtod>:
 800e6b4:	b510      	push	{r4, lr}
 800e6b6:	4c04      	ldr	r4, [pc, #16]	@ (800e6c8 <strtod+0x14>)
 800e6b8:	000a      	movs	r2, r1
 800e6ba:	0001      	movs	r1, r0
 800e6bc:	4b03      	ldr	r3, [pc, #12]	@ (800e6cc <strtod+0x18>)
 800e6be:	6820      	ldr	r0, [r4, #0]
 800e6c0:	f7ff f9fa 	bl	800dab8 <_strtod_l>
 800e6c4:	bd10      	pop	{r4, pc}
 800e6c6:	46c0      	nop			@ (mov r8, r8)
 800e6c8:	20000ebc 	.word	0x20000ebc
 800e6cc:	20000d50 	.word	0x20000d50

0800e6d0 <_strtol_l.isra.0>:
 800e6d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e6d2:	b085      	sub	sp, #20
 800e6d4:	0017      	movs	r7, r2
 800e6d6:	001e      	movs	r6, r3
 800e6d8:	9003      	str	r0, [sp, #12]
 800e6da:	9101      	str	r1, [sp, #4]
 800e6dc:	2b24      	cmp	r3, #36	@ 0x24
 800e6de:	d823      	bhi.n	800e728 <_strtol_l.isra.0+0x58>
 800e6e0:	000c      	movs	r4, r1
 800e6e2:	2b01      	cmp	r3, #1
 800e6e4:	d020      	beq.n	800e728 <_strtol_l.isra.0+0x58>
 800e6e6:	4b3d      	ldr	r3, [pc, #244]	@ (800e7dc <_strtol_l.isra.0+0x10c>)
 800e6e8:	2208      	movs	r2, #8
 800e6ea:	469c      	mov	ip, r3
 800e6ec:	0023      	movs	r3, r4
 800e6ee:	4661      	mov	r1, ip
 800e6f0:	781d      	ldrb	r5, [r3, #0]
 800e6f2:	3401      	adds	r4, #1
 800e6f4:	5d48      	ldrb	r0, [r1, r5]
 800e6f6:	0001      	movs	r1, r0
 800e6f8:	4011      	ands	r1, r2
 800e6fa:	4210      	tst	r0, r2
 800e6fc:	d1f6      	bne.n	800e6ec <_strtol_l.isra.0+0x1c>
 800e6fe:	2d2d      	cmp	r5, #45	@ 0x2d
 800e700:	d119      	bne.n	800e736 <_strtol_l.isra.0+0x66>
 800e702:	7825      	ldrb	r5, [r4, #0]
 800e704:	1c9c      	adds	r4, r3, #2
 800e706:	2301      	movs	r3, #1
 800e708:	9300      	str	r3, [sp, #0]
 800e70a:	2210      	movs	r2, #16
 800e70c:	0033      	movs	r3, r6
 800e70e:	4393      	bics	r3, r2
 800e710:	d11d      	bne.n	800e74e <_strtol_l.isra.0+0x7e>
 800e712:	2d30      	cmp	r5, #48	@ 0x30
 800e714:	d115      	bne.n	800e742 <_strtol_l.isra.0+0x72>
 800e716:	2120      	movs	r1, #32
 800e718:	7823      	ldrb	r3, [r4, #0]
 800e71a:	438b      	bics	r3, r1
 800e71c:	2b58      	cmp	r3, #88	@ 0x58
 800e71e:	d110      	bne.n	800e742 <_strtol_l.isra.0+0x72>
 800e720:	7865      	ldrb	r5, [r4, #1]
 800e722:	3402      	adds	r4, #2
 800e724:	2610      	movs	r6, #16
 800e726:	e012      	b.n	800e74e <_strtol_l.isra.0+0x7e>
 800e728:	f000 fab2 	bl	800ec90 <__errno>
 800e72c:	2316      	movs	r3, #22
 800e72e:	6003      	str	r3, [r0, #0]
 800e730:	2000      	movs	r0, #0
 800e732:	b005      	add	sp, #20
 800e734:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e736:	9100      	str	r1, [sp, #0]
 800e738:	2d2b      	cmp	r5, #43	@ 0x2b
 800e73a:	d1e6      	bne.n	800e70a <_strtol_l.isra.0+0x3a>
 800e73c:	7825      	ldrb	r5, [r4, #0]
 800e73e:	1c9c      	adds	r4, r3, #2
 800e740:	e7e3      	b.n	800e70a <_strtol_l.isra.0+0x3a>
 800e742:	2e00      	cmp	r6, #0
 800e744:	d1ee      	bne.n	800e724 <_strtol_l.isra.0+0x54>
 800e746:	360a      	adds	r6, #10
 800e748:	2d30      	cmp	r5, #48	@ 0x30
 800e74a:	d100      	bne.n	800e74e <_strtol_l.isra.0+0x7e>
 800e74c:	3e02      	subs	r6, #2
 800e74e:	4a24      	ldr	r2, [pc, #144]	@ (800e7e0 <_strtol_l.isra.0+0x110>)
 800e750:	9b00      	ldr	r3, [sp, #0]
 800e752:	4694      	mov	ip, r2
 800e754:	4463      	add	r3, ip
 800e756:	0031      	movs	r1, r6
 800e758:	0018      	movs	r0, r3
 800e75a:	9302      	str	r3, [sp, #8]
 800e75c:	f7f1 fd7e 	bl	800025c <__aeabi_uidivmod>
 800e760:	2200      	movs	r2, #0
 800e762:	4684      	mov	ip, r0
 800e764:	0010      	movs	r0, r2
 800e766:	002b      	movs	r3, r5
 800e768:	3b30      	subs	r3, #48	@ 0x30
 800e76a:	2b09      	cmp	r3, #9
 800e76c:	d811      	bhi.n	800e792 <_strtol_l.isra.0+0xc2>
 800e76e:	001d      	movs	r5, r3
 800e770:	42ae      	cmp	r6, r5
 800e772:	dd1d      	ble.n	800e7b0 <_strtol_l.isra.0+0xe0>
 800e774:	1c53      	adds	r3, r2, #1
 800e776:	d009      	beq.n	800e78c <_strtol_l.isra.0+0xbc>
 800e778:	2201      	movs	r2, #1
 800e77a:	4252      	negs	r2, r2
 800e77c:	4584      	cmp	ip, r0
 800e77e:	d305      	bcc.n	800e78c <_strtol_l.isra.0+0xbc>
 800e780:	d101      	bne.n	800e786 <_strtol_l.isra.0+0xb6>
 800e782:	42a9      	cmp	r1, r5
 800e784:	db11      	blt.n	800e7aa <_strtol_l.isra.0+0xda>
 800e786:	2201      	movs	r2, #1
 800e788:	4370      	muls	r0, r6
 800e78a:	1828      	adds	r0, r5, r0
 800e78c:	7825      	ldrb	r5, [r4, #0]
 800e78e:	3401      	adds	r4, #1
 800e790:	e7e9      	b.n	800e766 <_strtol_l.isra.0+0x96>
 800e792:	002b      	movs	r3, r5
 800e794:	3b41      	subs	r3, #65	@ 0x41
 800e796:	2b19      	cmp	r3, #25
 800e798:	d801      	bhi.n	800e79e <_strtol_l.isra.0+0xce>
 800e79a:	3d37      	subs	r5, #55	@ 0x37
 800e79c:	e7e8      	b.n	800e770 <_strtol_l.isra.0+0xa0>
 800e79e:	002b      	movs	r3, r5
 800e7a0:	3b61      	subs	r3, #97	@ 0x61
 800e7a2:	2b19      	cmp	r3, #25
 800e7a4:	d804      	bhi.n	800e7b0 <_strtol_l.isra.0+0xe0>
 800e7a6:	3d57      	subs	r5, #87	@ 0x57
 800e7a8:	e7e2      	b.n	800e770 <_strtol_l.isra.0+0xa0>
 800e7aa:	2201      	movs	r2, #1
 800e7ac:	4252      	negs	r2, r2
 800e7ae:	e7ed      	b.n	800e78c <_strtol_l.isra.0+0xbc>
 800e7b0:	1c53      	adds	r3, r2, #1
 800e7b2:	d108      	bne.n	800e7c6 <_strtol_l.isra.0+0xf6>
 800e7b4:	2322      	movs	r3, #34	@ 0x22
 800e7b6:	9a03      	ldr	r2, [sp, #12]
 800e7b8:	9802      	ldr	r0, [sp, #8]
 800e7ba:	6013      	str	r3, [r2, #0]
 800e7bc:	2f00      	cmp	r7, #0
 800e7be:	d0b8      	beq.n	800e732 <_strtol_l.isra.0+0x62>
 800e7c0:	1e63      	subs	r3, r4, #1
 800e7c2:	9301      	str	r3, [sp, #4]
 800e7c4:	e007      	b.n	800e7d6 <_strtol_l.isra.0+0x106>
 800e7c6:	9b00      	ldr	r3, [sp, #0]
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d000      	beq.n	800e7ce <_strtol_l.isra.0+0xfe>
 800e7cc:	4240      	negs	r0, r0
 800e7ce:	2f00      	cmp	r7, #0
 800e7d0:	d0af      	beq.n	800e732 <_strtol_l.isra.0+0x62>
 800e7d2:	2a00      	cmp	r2, #0
 800e7d4:	d1f4      	bne.n	800e7c0 <_strtol_l.isra.0+0xf0>
 800e7d6:	9b01      	ldr	r3, [sp, #4]
 800e7d8:	603b      	str	r3, [r7, #0]
 800e7da:	e7aa      	b.n	800e732 <_strtol_l.isra.0+0x62>
 800e7dc:	08011f81 	.word	0x08011f81
 800e7e0:	7fffffff 	.word	0x7fffffff

0800e7e4 <strtol>:
 800e7e4:	b510      	push	{r4, lr}
 800e7e6:	4c04      	ldr	r4, [pc, #16]	@ (800e7f8 <strtol+0x14>)
 800e7e8:	0013      	movs	r3, r2
 800e7ea:	000a      	movs	r2, r1
 800e7ec:	0001      	movs	r1, r0
 800e7ee:	6820      	ldr	r0, [r4, #0]
 800e7f0:	f7ff ff6e 	bl	800e6d0 <_strtol_l.isra.0>
 800e7f4:	bd10      	pop	{r4, pc}
 800e7f6:	46c0      	nop			@ (mov r8, r8)
 800e7f8:	20000ebc 	.word	0x20000ebc

0800e7fc <_strtoll_l.isra.0>:
 800e7fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e7fe:	b08d      	sub	sp, #52	@ 0x34
 800e800:	000c      	movs	r4, r1
 800e802:	9102      	str	r1, [sp, #8]
 800e804:	001e      	movs	r6, r3
 800e806:	2108      	movs	r1, #8
 800e808:	4f4c      	ldr	r7, [pc, #304]	@ (800e93c <_strtoll_l.isra.0+0x140>)
 800e80a:	900a      	str	r0, [sp, #40]	@ 0x28
 800e80c:	9203      	str	r2, [sp, #12]
 800e80e:	0023      	movs	r3, r4
 800e810:	781a      	ldrb	r2, [r3, #0]
 800e812:	3401      	adds	r4, #1
 800e814:	5cbd      	ldrb	r5, [r7, r2]
 800e816:	0028      	movs	r0, r5
 800e818:	4008      	ands	r0, r1
 800e81a:	420d      	tst	r5, r1
 800e81c:	d1f7      	bne.n	800e80e <_strtoll_l.isra.0+0x12>
 800e81e:	0015      	movs	r5, r2
 800e820:	2a2d      	cmp	r2, #45	@ 0x2d
 800e822:	d112      	bne.n	800e84a <_strtoll_l.isra.0+0x4e>
 800e824:	7825      	ldrb	r5, [r4, #0]
 800e826:	1c9c      	adds	r4, r3, #2
 800e828:	2301      	movs	r3, #1
 800e82a:	9301      	str	r3, [sp, #4]
 800e82c:	2210      	movs	r2, #16
 800e82e:	0033      	movs	r3, r6
 800e830:	4393      	bics	r3, r2
 800e832:	d116      	bne.n	800e862 <_strtoll_l.isra.0+0x66>
 800e834:	2d30      	cmp	r5, #48	@ 0x30
 800e836:	d10e      	bne.n	800e856 <_strtoll_l.isra.0+0x5a>
 800e838:	2120      	movs	r1, #32
 800e83a:	7823      	ldrb	r3, [r4, #0]
 800e83c:	438b      	bics	r3, r1
 800e83e:	2b58      	cmp	r3, #88	@ 0x58
 800e840:	d109      	bne.n	800e856 <_strtoll_l.isra.0+0x5a>
 800e842:	7865      	ldrb	r5, [r4, #1]
 800e844:	3402      	adds	r4, #2
 800e846:	2610      	movs	r6, #16
 800e848:	e00b      	b.n	800e862 <_strtoll_l.isra.0+0x66>
 800e84a:	9001      	str	r0, [sp, #4]
 800e84c:	2a2b      	cmp	r2, #43	@ 0x2b
 800e84e:	d1ed      	bne.n	800e82c <_strtoll_l.isra.0+0x30>
 800e850:	7825      	ldrb	r5, [r4, #0]
 800e852:	1c9c      	adds	r4, r3, #2
 800e854:	e7ea      	b.n	800e82c <_strtoll_l.isra.0+0x30>
 800e856:	2e00      	cmp	r6, #0
 800e858:	d1f5      	bne.n	800e846 <_strtoll_l.isra.0+0x4a>
 800e85a:	360a      	adds	r6, #10
 800e85c:	2d30      	cmp	r5, #48	@ 0x30
 800e85e:	d100      	bne.n	800e862 <_strtoll_l.isra.0+0x66>
 800e860:	3e02      	subs	r6, #2
 800e862:	2001      	movs	r0, #1
 800e864:	2300      	movs	r3, #0
 800e866:	4936      	ldr	r1, [pc, #216]	@ (800e940 <_strtoll_l.isra.0+0x144>)
 800e868:	9a01      	ldr	r2, [sp, #4]
 800e86a:	4240      	negs	r0, r0
 800e86c:	1812      	adds	r2, r2, r0
 800e86e:	414b      	adcs	r3, r1
 800e870:	9204      	str	r2, [sp, #16]
 800e872:	9305      	str	r3, [sp, #20]
 800e874:	9804      	ldr	r0, [sp, #16]
 800e876:	9905      	ldr	r1, [sp, #20]
 800e878:	17f3      	asrs	r3, r6, #31
 800e87a:	0032      	movs	r2, r6
 800e87c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e87e:	f7f1 fe55 	bl	800052c <__aeabi_uldivmod>
 800e882:	2300      	movs	r3, #0
 800e884:	000f      	movs	r7, r1
 800e886:	9008      	str	r0, [sp, #32]
 800e888:	2100      	movs	r1, #0
 800e88a:	2000      	movs	r0, #0
 800e88c:	9209      	str	r2, [sp, #36]	@ 0x24
 800e88e:	002a      	movs	r2, r5
 800e890:	3a30      	subs	r2, #48	@ 0x30
 800e892:	2a09      	cmp	r2, #9
 800e894:	d823      	bhi.n	800e8de <_strtoll_l.isra.0+0xe2>
 800e896:	0015      	movs	r5, r2
 800e898:	42ae      	cmp	r6, r5
 800e89a:	dd2f      	ble.n	800e8fc <_strtoll_l.isra.0+0x100>
 800e89c:	1c5a      	adds	r2, r3, #1
 800e89e:	d01b      	beq.n	800e8d8 <_strtoll_l.isra.0+0xdc>
 800e8a0:	42b9      	cmp	r1, r7
 800e8a2:	d828      	bhi.n	800e8f6 <_strtoll_l.isra.0+0xfa>
 800e8a4:	d102      	bne.n	800e8ac <_strtoll_l.isra.0+0xb0>
 800e8a6:	9b08      	ldr	r3, [sp, #32]
 800e8a8:	4298      	cmp	r0, r3
 800e8aa:	d824      	bhi.n	800e8f6 <_strtoll_l.isra.0+0xfa>
 800e8ac:	9b08      	ldr	r3, [sp, #32]
 800e8ae:	4283      	cmp	r3, r0
 800e8b0:	d104      	bne.n	800e8bc <_strtoll_l.isra.0+0xc0>
 800e8b2:	428f      	cmp	r7, r1
 800e8b4:	d102      	bne.n	800e8bc <_strtoll_l.isra.0+0xc0>
 800e8b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e8b8:	42ab      	cmp	r3, r5
 800e8ba:	db1c      	blt.n	800e8f6 <_strtoll_l.isra.0+0xfa>
 800e8bc:	0002      	movs	r2, r0
 800e8be:	000b      	movs	r3, r1
 800e8c0:	0030      	movs	r0, r6
 800e8c2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e8c4:	f7f1 fe52 	bl	800056c <__aeabi_lmul>
 800e8c8:	17eb      	asrs	r3, r5, #31
 800e8ca:	9506      	str	r5, [sp, #24]
 800e8cc:	9307      	str	r3, [sp, #28]
 800e8ce:	9a06      	ldr	r2, [sp, #24]
 800e8d0:	9b07      	ldr	r3, [sp, #28]
 800e8d2:	1880      	adds	r0, r0, r2
 800e8d4:	4159      	adcs	r1, r3
 800e8d6:	2301      	movs	r3, #1
 800e8d8:	7825      	ldrb	r5, [r4, #0]
 800e8da:	3401      	adds	r4, #1
 800e8dc:	e7d7      	b.n	800e88e <_strtoll_l.isra.0+0x92>
 800e8de:	002a      	movs	r2, r5
 800e8e0:	3a41      	subs	r2, #65	@ 0x41
 800e8e2:	2a19      	cmp	r2, #25
 800e8e4:	d801      	bhi.n	800e8ea <_strtoll_l.isra.0+0xee>
 800e8e6:	3d37      	subs	r5, #55	@ 0x37
 800e8e8:	e7d6      	b.n	800e898 <_strtoll_l.isra.0+0x9c>
 800e8ea:	002a      	movs	r2, r5
 800e8ec:	3a61      	subs	r2, #97	@ 0x61
 800e8ee:	2a19      	cmp	r2, #25
 800e8f0:	d804      	bhi.n	800e8fc <_strtoll_l.isra.0+0x100>
 800e8f2:	3d57      	subs	r5, #87	@ 0x57
 800e8f4:	e7d0      	b.n	800e898 <_strtoll_l.isra.0+0x9c>
 800e8f6:	2301      	movs	r3, #1
 800e8f8:	425b      	negs	r3, r3
 800e8fa:	e7ed      	b.n	800e8d8 <_strtoll_l.isra.0+0xdc>
 800e8fc:	1c5a      	adds	r2, r3, #1
 800e8fe:	d109      	bne.n	800e914 <_strtoll_l.isra.0+0x118>
 800e900:	9804      	ldr	r0, [sp, #16]
 800e902:	9905      	ldr	r1, [sp, #20]
 800e904:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e906:	3323      	adds	r3, #35	@ 0x23
 800e908:	6013      	str	r3, [r2, #0]
 800e90a:	9b03      	ldr	r3, [sp, #12]
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d10e      	bne.n	800e92e <_strtoll_l.isra.0+0x132>
 800e910:	b00d      	add	sp, #52	@ 0x34
 800e912:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e914:	9a01      	ldr	r2, [sp, #4]
 800e916:	2a00      	cmp	r2, #0
 800e918:	d004      	beq.n	800e924 <_strtoll_l.isra.0+0x128>
 800e91a:	0005      	movs	r5, r0
 800e91c:	000e      	movs	r6, r1
 800e91e:	2100      	movs	r1, #0
 800e920:	4268      	negs	r0, r5
 800e922:	41b1      	sbcs	r1, r6
 800e924:	9a03      	ldr	r2, [sp, #12]
 800e926:	2a00      	cmp	r2, #0
 800e928:	d0f2      	beq.n	800e910 <_strtoll_l.isra.0+0x114>
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d001      	beq.n	800e932 <_strtoll_l.isra.0+0x136>
 800e92e:	1e63      	subs	r3, r4, #1
 800e930:	9302      	str	r3, [sp, #8]
 800e932:	9b03      	ldr	r3, [sp, #12]
 800e934:	9a02      	ldr	r2, [sp, #8]
 800e936:	601a      	str	r2, [r3, #0]
 800e938:	e7ea      	b.n	800e910 <_strtoll_l.isra.0+0x114>
 800e93a:	46c0      	nop			@ (mov r8, r8)
 800e93c:	08011f81 	.word	0x08011f81
 800e940:	7fffffff 	.word	0x7fffffff

0800e944 <strtoll>:
 800e944:	b510      	push	{r4, lr}
 800e946:	4c04      	ldr	r4, [pc, #16]	@ (800e958 <strtoll+0x14>)
 800e948:	0013      	movs	r3, r2
 800e94a:	000a      	movs	r2, r1
 800e94c:	0001      	movs	r1, r0
 800e94e:	6820      	ldr	r0, [r4, #0]
 800e950:	f7ff ff54 	bl	800e7fc <_strtoll_l.isra.0>
 800e954:	bd10      	pop	{r4, pc}
 800e956:	46c0      	nop			@ (mov r8, r8)
 800e958:	20000ebc 	.word	0x20000ebc

0800e95c <std>:
 800e95c:	2300      	movs	r3, #0
 800e95e:	b510      	push	{r4, lr}
 800e960:	0004      	movs	r4, r0
 800e962:	6003      	str	r3, [r0, #0]
 800e964:	6043      	str	r3, [r0, #4]
 800e966:	6083      	str	r3, [r0, #8]
 800e968:	8181      	strh	r1, [r0, #12]
 800e96a:	6643      	str	r3, [r0, #100]	@ 0x64
 800e96c:	81c2      	strh	r2, [r0, #14]
 800e96e:	6103      	str	r3, [r0, #16]
 800e970:	6143      	str	r3, [r0, #20]
 800e972:	6183      	str	r3, [r0, #24]
 800e974:	0019      	movs	r1, r3
 800e976:	2208      	movs	r2, #8
 800e978:	305c      	adds	r0, #92	@ 0x5c
 800e97a:	f000 f921 	bl	800ebc0 <memset>
 800e97e:	4b0b      	ldr	r3, [pc, #44]	@ (800e9ac <std+0x50>)
 800e980:	6224      	str	r4, [r4, #32]
 800e982:	6263      	str	r3, [r4, #36]	@ 0x24
 800e984:	4b0a      	ldr	r3, [pc, #40]	@ (800e9b0 <std+0x54>)
 800e986:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e988:	4b0a      	ldr	r3, [pc, #40]	@ (800e9b4 <std+0x58>)
 800e98a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e98c:	4b0a      	ldr	r3, [pc, #40]	@ (800e9b8 <std+0x5c>)
 800e98e:	6323      	str	r3, [r4, #48]	@ 0x30
 800e990:	4b0a      	ldr	r3, [pc, #40]	@ (800e9bc <std+0x60>)
 800e992:	429c      	cmp	r4, r3
 800e994:	d005      	beq.n	800e9a2 <std+0x46>
 800e996:	4b0a      	ldr	r3, [pc, #40]	@ (800e9c0 <std+0x64>)
 800e998:	429c      	cmp	r4, r3
 800e99a:	d002      	beq.n	800e9a2 <std+0x46>
 800e99c:	4b09      	ldr	r3, [pc, #36]	@ (800e9c4 <std+0x68>)
 800e99e:	429c      	cmp	r4, r3
 800e9a0:	d103      	bne.n	800e9aa <std+0x4e>
 800e9a2:	0020      	movs	r0, r4
 800e9a4:	3058      	adds	r0, #88	@ 0x58
 800e9a6:	f000 f99d 	bl	800ece4 <__retarget_lock_init_recursive>
 800e9aa:	bd10      	pop	{r4, pc}
 800e9ac:	0800eb29 	.word	0x0800eb29
 800e9b0:	0800eb51 	.word	0x0800eb51
 800e9b4:	0800eb89 	.word	0x0800eb89
 800e9b8:	0800ebb5 	.word	0x0800ebb5
 800e9bc:	200021b4 	.word	0x200021b4
 800e9c0:	2000221c 	.word	0x2000221c
 800e9c4:	20002284 	.word	0x20002284

0800e9c8 <stdio_exit_handler>:
 800e9c8:	b510      	push	{r4, lr}
 800e9ca:	4a03      	ldr	r2, [pc, #12]	@ (800e9d8 <stdio_exit_handler+0x10>)
 800e9cc:	4903      	ldr	r1, [pc, #12]	@ (800e9dc <stdio_exit_handler+0x14>)
 800e9ce:	4804      	ldr	r0, [pc, #16]	@ (800e9e0 <stdio_exit_handler+0x18>)
 800e9d0:	f000 f86c 	bl	800eaac <_fwalk_sglue>
 800e9d4:	bd10      	pop	{r4, pc}
 800e9d6:	46c0      	nop			@ (mov r8, r8)
 800e9d8:	20000d44 	.word	0x20000d44
 800e9dc:	080108c1 	.word	0x080108c1
 800e9e0:	20000ec0 	.word	0x20000ec0

0800e9e4 <cleanup_stdio>:
 800e9e4:	6841      	ldr	r1, [r0, #4]
 800e9e6:	4b0b      	ldr	r3, [pc, #44]	@ (800ea14 <cleanup_stdio+0x30>)
 800e9e8:	b510      	push	{r4, lr}
 800e9ea:	0004      	movs	r4, r0
 800e9ec:	4299      	cmp	r1, r3
 800e9ee:	d001      	beq.n	800e9f4 <cleanup_stdio+0x10>
 800e9f0:	f001 ff66 	bl	80108c0 <_fflush_r>
 800e9f4:	68a1      	ldr	r1, [r4, #8]
 800e9f6:	4b08      	ldr	r3, [pc, #32]	@ (800ea18 <cleanup_stdio+0x34>)
 800e9f8:	4299      	cmp	r1, r3
 800e9fa:	d002      	beq.n	800ea02 <cleanup_stdio+0x1e>
 800e9fc:	0020      	movs	r0, r4
 800e9fe:	f001 ff5f 	bl	80108c0 <_fflush_r>
 800ea02:	68e1      	ldr	r1, [r4, #12]
 800ea04:	4b05      	ldr	r3, [pc, #20]	@ (800ea1c <cleanup_stdio+0x38>)
 800ea06:	4299      	cmp	r1, r3
 800ea08:	d002      	beq.n	800ea10 <cleanup_stdio+0x2c>
 800ea0a:	0020      	movs	r0, r4
 800ea0c:	f001 ff58 	bl	80108c0 <_fflush_r>
 800ea10:	bd10      	pop	{r4, pc}
 800ea12:	46c0      	nop			@ (mov r8, r8)
 800ea14:	200021b4 	.word	0x200021b4
 800ea18:	2000221c 	.word	0x2000221c
 800ea1c:	20002284 	.word	0x20002284

0800ea20 <global_stdio_init.part.0>:
 800ea20:	b510      	push	{r4, lr}
 800ea22:	4b09      	ldr	r3, [pc, #36]	@ (800ea48 <global_stdio_init.part.0+0x28>)
 800ea24:	4a09      	ldr	r2, [pc, #36]	@ (800ea4c <global_stdio_init.part.0+0x2c>)
 800ea26:	2104      	movs	r1, #4
 800ea28:	601a      	str	r2, [r3, #0]
 800ea2a:	4809      	ldr	r0, [pc, #36]	@ (800ea50 <global_stdio_init.part.0+0x30>)
 800ea2c:	2200      	movs	r2, #0
 800ea2e:	f7ff ff95 	bl	800e95c <std>
 800ea32:	2201      	movs	r2, #1
 800ea34:	2109      	movs	r1, #9
 800ea36:	4807      	ldr	r0, [pc, #28]	@ (800ea54 <global_stdio_init.part.0+0x34>)
 800ea38:	f7ff ff90 	bl	800e95c <std>
 800ea3c:	2202      	movs	r2, #2
 800ea3e:	2112      	movs	r1, #18
 800ea40:	4805      	ldr	r0, [pc, #20]	@ (800ea58 <global_stdio_init.part.0+0x38>)
 800ea42:	f7ff ff8b 	bl	800e95c <std>
 800ea46:	bd10      	pop	{r4, pc}
 800ea48:	200022ec 	.word	0x200022ec
 800ea4c:	0800e9c9 	.word	0x0800e9c9
 800ea50:	200021b4 	.word	0x200021b4
 800ea54:	2000221c 	.word	0x2000221c
 800ea58:	20002284 	.word	0x20002284

0800ea5c <__sfp_lock_acquire>:
 800ea5c:	b510      	push	{r4, lr}
 800ea5e:	4802      	ldr	r0, [pc, #8]	@ (800ea68 <__sfp_lock_acquire+0xc>)
 800ea60:	f000 f941 	bl	800ece6 <__retarget_lock_acquire_recursive>
 800ea64:	bd10      	pop	{r4, pc}
 800ea66:	46c0      	nop			@ (mov r8, r8)
 800ea68:	200022f5 	.word	0x200022f5

0800ea6c <__sfp_lock_release>:
 800ea6c:	b510      	push	{r4, lr}
 800ea6e:	4802      	ldr	r0, [pc, #8]	@ (800ea78 <__sfp_lock_release+0xc>)
 800ea70:	f000 f93a 	bl	800ece8 <__retarget_lock_release_recursive>
 800ea74:	bd10      	pop	{r4, pc}
 800ea76:	46c0      	nop			@ (mov r8, r8)
 800ea78:	200022f5 	.word	0x200022f5

0800ea7c <__sinit>:
 800ea7c:	b510      	push	{r4, lr}
 800ea7e:	0004      	movs	r4, r0
 800ea80:	f7ff ffec 	bl	800ea5c <__sfp_lock_acquire>
 800ea84:	6a23      	ldr	r3, [r4, #32]
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d002      	beq.n	800ea90 <__sinit+0x14>
 800ea8a:	f7ff ffef 	bl	800ea6c <__sfp_lock_release>
 800ea8e:	bd10      	pop	{r4, pc}
 800ea90:	4b04      	ldr	r3, [pc, #16]	@ (800eaa4 <__sinit+0x28>)
 800ea92:	6223      	str	r3, [r4, #32]
 800ea94:	4b04      	ldr	r3, [pc, #16]	@ (800eaa8 <__sinit+0x2c>)
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d1f6      	bne.n	800ea8a <__sinit+0xe>
 800ea9c:	f7ff ffc0 	bl	800ea20 <global_stdio_init.part.0>
 800eaa0:	e7f3      	b.n	800ea8a <__sinit+0xe>
 800eaa2:	46c0      	nop			@ (mov r8, r8)
 800eaa4:	0800e9e5 	.word	0x0800e9e5
 800eaa8:	200022ec 	.word	0x200022ec

0800eaac <_fwalk_sglue>:
 800eaac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800eaae:	0014      	movs	r4, r2
 800eab0:	2600      	movs	r6, #0
 800eab2:	9000      	str	r0, [sp, #0]
 800eab4:	9101      	str	r1, [sp, #4]
 800eab6:	68a5      	ldr	r5, [r4, #8]
 800eab8:	6867      	ldr	r7, [r4, #4]
 800eaba:	3f01      	subs	r7, #1
 800eabc:	d504      	bpl.n	800eac8 <_fwalk_sglue+0x1c>
 800eabe:	6824      	ldr	r4, [r4, #0]
 800eac0:	2c00      	cmp	r4, #0
 800eac2:	d1f8      	bne.n	800eab6 <_fwalk_sglue+0xa>
 800eac4:	0030      	movs	r0, r6
 800eac6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800eac8:	89ab      	ldrh	r3, [r5, #12]
 800eaca:	2b01      	cmp	r3, #1
 800eacc:	d908      	bls.n	800eae0 <_fwalk_sglue+0x34>
 800eace:	220e      	movs	r2, #14
 800ead0:	5eab      	ldrsh	r3, [r5, r2]
 800ead2:	3301      	adds	r3, #1
 800ead4:	d004      	beq.n	800eae0 <_fwalk_sglue+0x34>
 800ead6:	0029      	movs	r1, r5
 800ead8:	9800      	ldr	r0, [sp, #0]
 800eada:	9b01      	ldr	r3, [sp, #4]
 800eadc:	4798      	blx	r3
 800eade:	4306      	orrs	r6, r0
 800eae0:	3568      	adds	r5, #104	@ 0x68
 800eae2:	e7ea      	b.n	800eaba <_fwalk_sglue+0xe>

0800eae4 <siprintf>:
 800eae4:	b40e      	push	{r1, r2, r3}
 800eae6:	b510      	push	{r4, lr}
 800eae8:	2400      	movs	r4, #0
 800eaea:	490c      	ldr	r1, [pc, #48]	@ (800eb1c <siprintf+0x38>)
 800eaec:	b09d      	sub	sp, #116	@ 0x74
 800eaee:	ab1f      	add	r3, sp, #124	@ 0x7c
 800eaf0:	9002      	str	r0, [sp, #8]
 800eaf2:	9006      	str	r0, [sp, #24]
 800eaf4:	9107      	str	r1, [sp, #28]
 800eaf6:	9104      	str	r1, [sp, #16]
 800eaf8:	4809      	ldr	r0, [pc, #36]	@ (800eb20 <siprintf+0x3c>)
 800eafa:	490a      	ldr	r1, [pc, #40]	@ (800eb24 <siprintf+0x40>)
 800eafc:	cb04      	ldmia	r3!, {r2}
 800eafe:	9105      	str	r1, [sp, #20]
 800eb00:	6800      	ldr	r0, [r0, #0]
 800eb02:	a902      	add	r1, sp, #8
 800eb04:	9301      	str	r3, [sp, #4]
 800eb06:	941b      	str	r4, [sp, #108]	@ 0x6c
 800eb08:	f001 fa96 	bl	8010038 <_svfiprintf_r>
 800eb0c:	9b02      	ldr	r3, [sp, #8]
 800eb0e:	701c      	strb	r4, [r3, #0]
 800eb10:	b01d      	add	sp, #116	@ 0x74
 800eb12:	bc10      	pop	{r4}
 800eb14:	bc08      	pop	{r3}
 800eb16:	b003      	add	sp, #12
 800eb18:	4718      	bx	r3
 800eb1a:	46c0      	nop			@ (mov r8, r8)
 800eb1c:	7fffffff 	.word	0x7fffffff
 800eb20:	20000ebc 	.word	0x20000ebc
 800eb24:	ffff0208 	.word	0xffff0208

0800eb28 <__sread>:
 800eb28:	b570      	push	{r4, r5, r6, lr}
 800eb2a:	000c      	movs	r4, r1
 800eb2c:	250e      	movs	r5, #14
 800eb2e:	5f49      	ldrsh	r1, [r1, r5]
 800eb30:	f000 f886 	bl	800ec40 <_read_r>
 800eb34:	2800      	cmp	r0, #0
 800eb36:	db03      	blt.n	800eb40 <__sread+0x18>
 800eb38:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800eb3a:	181b      	adds	r3, r3, r0
 800eb3c:	6563      	str	r3, [r4, #84]	@ 0x54
 800eb3e:	bd70      	pop	{r4, r5, r6, pc}
 800eb40:	89a3      	ldrh	r3, [r4, #12]
 800eb42:	4a02      	ldr	r2, [pc, #8]	@ (800eb4c <__sread+0x24>)
 800eb44:	4013      	ands	r3, r2
 800eb46:	81a3      	strh	r3, [r4, #12]
 800eb48:	e7f9      	b.n	800eb3e <__sread+0x16>
 800eb4a:	46c0      	nop			@ (mov r8, r8)
 800eb4c:	ffffefff 	.word	0xffffefff

0800eb50 <__swrite>:
 800eb50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb52:	001f      	movs	r7, r3
 800eb54:	898b      	ldrh	r3, [r1, #12]
 800eb56:	0005      	movs	r5, r0
 800eb58:	000c      	movs	r4, r1
 800eb5a:	0016      	movs	r6, r2
 800eb5c:	05db      	lsls	r3, r3, #23
 800eb5e:	d505      	bpl.n	800eb6c <__swrite+0x1c>
 800eb60:	230e      	movs	r3, #14
 800eb62:	5ec9      	ldrsh	r1, [r1, r3]
 800eb64:	2200      	movs	r2, #0
 800eb66:	2302      	movs	r3, #2
 800eb68:	f000 f856 	bl	800ec18 <_lseek_r>
 800eb6c:	89a3      	ldrh	r3, [r4, #12]
 800eb6e:	4a05      	ldr	r2, [pc, #20]	@ (800eb84 <__swrite+0x34>)
 800eb70:	0028      	movs	r0, r5
 800eb72:	4013      	ands	r3, r2
 800eb74:	81a3      	strh	r3, [r4, #12]
 800eb76:	0032      	movs	r2, r6
 800eb78:	230e      	movs	r3, #14
 800eb7a:	5ee1      	ldrsh	r1, [r4, r3]
 800eb7c:	003b      	movs	r3, r7
 800eb7e:	f000 f873 	bl	800ec68 <_write_r>
 800eb82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eb84:	ffffefff 	.word	0xffffefff

0800eb88 <__sseek>:
 800eb88:	b570      	push	{r4, r5, r6, lr}
 800eb8a:	000c      	movs	r4, r1
 800eb8c:	250e      	movs	r5, #14
 800eb8e:	5f49      	ldrsh	r1, [r1, r5]
 800eb90:	f000 f842 	bl	800ec18 <_lseek_r>
 800eb94:	89a3      	ldrh	r3, [r4, #12]
 800eb96:	1c42      	adds	r2, r0, #1
 800eb98:	d103      	bne.n	800eba2 <__sseek+0x1a>
 800eb9a:	4a05      	ldr	r2, [pc, #20]	@ (800ebb0 <__sseek+0x28>)
 800eb9c:	4013      	ands	r3, r2
 800eb9e:	81a3      	strh	r3, [r4, #12]
 800eba0:	bd70      	pop	{r4, r5, r6, pc}
 800eba2:	2280      	movs	r2, #128	@ 0x80
 800eba4:	0152      	lsls	r2, r2, #5
 800eba6:	4313      	orrs	r3, r2
 800eba8:	81a3      	strh	r3, [r4, #12]
 800ebaa:	6560      	str	r0, [r4, #84]	@ 0x54
 800ebac:	e7f8      	b.n	800eba0 <__sseek+0x18>
 800ebae:	46c0      	nop			@ (mov r8, r8)
 800ebb0:	ffffefff 	.word	0xffffefff

0800ebb4 <__sclose>:
 800ebb4:	b510      	push	{r4, lr}
 800ebb6:	230e      	movs	r3, #14
 800ebb8:	5ec9      	ldrsh	r1, [r1, r3]
 800ebba:	f000 f81b 	bl	800ebf4 <_close_r>
 800ebbe:	bd10      	pop	{r4, pc}

0800ebc0 <memset>:
 800ebc0:	0003      	movs	r3, r0
 800ebc2:	1882      	adds	r2, r0, r2
 800ebc4:	4293      	cmp	r3, r2
 800ebc6:	d100      	bne.n	800ebca <memset+0xa>
 800ebc8:	4770      	bx	lr
 800ebca:	7019      	strb	r1, [r3, #0]
 800ebcc:	3301      	adds	r3, #1
 800ebce:	e7f9      	b.n	800ebc4 <memset+0x4>

0800ebd0 <strncmp>:
 800ebd0:	b530      	push	{r4, r5, lr}
 800ebd2:	0005      	movs	r5, r0
 800ebd4:	1e10      	subs	r0, r2, #0
 800ebd6:	d00b      	beq.n	800ebf0 <strncmp+0x20>
 800ebd8:	2400      	movs	r4, #0
 800ebda:	3a01      	subs	r2, #1
 800ebdc:	5d2b      	ldrb	r3, [r5, r4]
 800ebde:	5d08      	ldrb	r0, [r1, r4]
 800ebe0:	4283      	cmp	r3, r0
 800ebe2:	d104      	bne.n	800ebee <strncmp+0x1e>
 800ebe4:	4294      	cmp	r4, r2
 800ebe6:	d002      	beq.n	800ebee <strncmp+0x1e>
 800ebe8:	3401      	adds	r4, #1
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d1f6      	bne.n	800ebdc <strncmp+0xc>
 800ebee:	1a18      	subs	r0, r3, r0
 800ebf0:	bd30      	pop	{r4, r5, pc}
	...

0800ebf4 <_close_r>:
 800ebf4:	2300      	movs	r3, #0
 800ebf6:	b570      	push	{r4, r5, r6, lr}
 800ebf8:	4d06      	ldr	r5, [pc, #24]	@ (800ec14 <_close_r+0x20>)
 800ebfa:	0004      	movs	r4, r0
 800ebfc:	0008      	movs	r0, r1
 800ebfe:	602b      	str	r3, [r5, #0]
 800ec00:	f7f8 fedc 	bl	80079bc <_close>
 800ec04:	1c43      	adds	r3, r0, #1
 800ec06:	d103      	bne.n	800ec10 <_close_r+0x1c>
 800ec08:	682b      	ldr	r3, [r5, #0]
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d000      	beq.n	800ec10 <_close_r+0x1c>
 800ec0e:	6023      	str	r3, [r4, #0]
 800ec10:	bd70      	pop	{r4, r5, r6, pc}
 800ec12:	46c0      	nop			@ (mov r8, r8)
 800ec14:	200022f0 	.word	0x200022f0

0800ec18 <_lseek_r>:
 800ec18:	b570      	push	{r4, r5, r6, lr}
 800ec1a:	0004      	movs	r4, r0
 800ec1c:	0008      	movs	r0, r1
 800ec1e:	0011      	movs	r1, r2
 800ec20:	001a      	movs	r2, r3
 800ec22:	2300      	movs	r3, #0
 800ec24:	4d05      	ldr	r5, [pc, #20]	@ (800ec3c <_lseek_r+0x24>)
 800ec26:	602b      	str	r3, [r5, #0]
 800ec28:	f7f8 fee9 	bl	80079fe <_lseek>
 800ec2c:	1c43      	adds	r3, r0, #1
 800ec2e:	d103      	bne.n	800ec38 <_lseek_r+0x20>
 800ec30:	682b      	ldr	r3, [r5, #0]
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d000      	beq.n	800ec38 <_lseek_r+0x20>
 800ec36:	6023      	str	r3, [r4, #0]
 800ec38:	bd70      	pop	{r4, r5, r6, pc}
 800ec3a:	46c0      	nop			@ (mov r8, r8)
 800ec3c:	200022f0 	.word	0x200022f0

0800ec40 <_read_r>:
 800ec40:	b570      	push	{r4, r5, r6, lr}
 800ec42:	0004      	movs	r4, r0
 800ec44:	0008      	movs	r0, r1
 800ec46:	0011      	movs	r1, r2
 800ec48:	001a      	movs	r2, r3
 800ec4a:	2300      	movs	r3, #0
 800ec4c:	4d05      	ldr	r5, [pc, #20]	@ (800ec64 <_read_r+0x24>)
 800ec4e:	602b      	str	r3, [r5, #0]
 800ec50:	f7f8 fe7b 	bl	800794a <_read>
 800ec54:	1c43      	adds	r3, r0, #1
 800ec56:	d103      	bne.n	800ec60 <_read_r+0x20>
 800ec58:	682b      	ldr	r3, [r5, #0]
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d000      	beq.n	800ec60 <_read_r+0x20>
 800ec5e:	6023      	str	r3, [r4, #0]
 800ec60:	bd70      	pop	{r4, r5, r6, pc}
 800ec62:	46c0      	nop			@ (mov r8, r8)
 800ec64:	200022f0 	.word	0x200022f0

0800ec68 <_write_r>:
 800ec68:	b570      	push	{r4, r5, r6, lr}
 800ec6a:	0004      	movs	r4, r0
 800ec6c:	0008      	movs	r0, r1
 800ec6e:	0011      	movs	r1, r2
 800ec70:	001a      	movs	r2, r3
 800ec72:	2300      	movs	r3, #0
 800ec74:	4d05      	ldr	r5, [pc, #20]	@ (800ec8c <_write_r+0x24>)
 800ec76:	602b      	str	r3, [r5, #0]
 800ec78:	f7f8 fe84 	bl	8007984 <_write>
 800ec7c:	1c43      	adds	r3, r0, #1
 800ec7e:	d103      	bne.n	800ec88 <_write_r+0x20>
 800ec80:	682b      	ldr	r3, [r5, #0]
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d000      	beq.n	800ec88 <_write_r+0x20>
 800ec86:	6023      	str	r3, [r4, #0]
 800ec88:	bd70      	pop	{r4, r5, r6, pc}
 800ec8a:	46c0      	nop			@ (mov r8, r8)
 800ec8c:	200022f0 	.word	0x200022f0

0800ec90 <__errno>:
 800ec90:	4b01      	ldr	r3, [pc, #4]	@ (800ec98 <__errno+0x8>)
 800ec92:	6818      	ldr	r0, [r3, #0]
 800ec94:	4770      	bx	lr
 800ec96:	46c0      	nop			@ (mov r8, r8)
 800ec98:	20000ebc 	.word	0x20000ebc

0800ec9c <__libc_init_array>:
 800ec9c:	b570      	push	{r4, r5, r6, lr}
 800ec9e:	2600      	movs	r6, #0
 800eca0:	4c0c      	ldr	r4, [pc, #48]	@ (800ecd4 <__libc_init_array+0x38>)
 800eca2:	4d0d      	ldr	r5, [pc, #52]	@ (800ecd8 <__libc_init_array+0x3c>)
 800eca4:	1b64      	subs	r4, r4, r5
 800eca6:	10a4      	asrs	r4, r4, #2
 800eca8:	42a6      	cmp	r6, r4
 800ecaa:	d109      	bne.n	800ecc0 <__libc_init_array+0x24>
 800ecac:	2600      	movs	r6, #0
 800ecae:	f002 facd 	bl	801124c <_init>
 800ecb2:	4c0a      	ldr	r4, [pc, #40]	@ (800ecdc <__libc_init_array+0x40>)
 800ecb4:	4d0a      	ldr	r5, [pc, #40]	@ (800ece0 <__libc_init_array+0x44>)
 800ecb6:	1b64      	subs	r4, r4, r5
 800ecb8:	10a4      	asrs	r4, r4, #2
 800ecba:	42a6      	cmp	r6, r4
 800ecbc:	d105      	bne.n	800ecca <__libc_init_array+0x2e>
 800ecbe:	bd70      	pop	{r4, r5, r6, pc}
 800ecc0:	00b3      	lsls	r3, r6, #2
 800ecc2:	58eb      	ldr	r3, [r5, r3]
 800ecc4:	4798      	blx	r3
 800ecc6:	3601      	adds	r6, #1
 800ecc8:	e7ee      	b.n	800eca8 <__libc_init_array+0xc>
 800ecca:	00b3      	lsls	r3, r6, #2
 800eccc:	58eb      	ldr	r3, [r5, r3]
 800ecce:	4798      	blx	r3
 800ecd0:	3601      	adds	r6, #1
 800ecd2:	e7f2      	b.n	800ecba <__libc_init_array+0x1e>
 800ecd4:	080121a8 	.word	0x080121a8
 800ecd8:	080121a8 	.word	0x080121a8
 800ecdc:	080121ac 	.word	0x080121ac
 800ece0:	080121a8 	.word	0x080121a8

0800ece4 <__retarget_lock_init_recursive>:
 800ece4:	4770      	bx	lr

0800ece6 <__retarget_lock_acquire_recursive>:
 800ece6:	4770      	bx	lr

0800ece8 <__retarget_lock_release_recursive>:
 800ece8:	4770      	bx	lr

0800ecea <memcpy>:
 800ecea:	2300      	movs	r3, #0
 800ecec:	b510      	push	{r4, lr}
 800ecee:	429a      	cmp	r2, r3
 800ecf0:	d100      	bne.n	800ecf4 <memcpy+0xa>
 800ecf2:	bd10      	pop	{r4, pc}
 800ecf4:	5ccc      	ldrb	r4, [r1, r3]
 800ecf6:	54c4      	strb	r4, [r0, r3]
 800ecf8:	3301      	adds	r3, #1
 800ecfa:	e7f8      	b.n	800ecee <memcpy+0x4>

0800ecfc <nan>:
 800ecfc:	2000      	movs	r0, #0
 800ecfe:	4901      	ldr	r1, [pc, #4]	@ (800ed04 <nan+0x8>)
 800ed00:	4770      	bx	lr
 800ed02:	46c0      	nop			@ (mov r8, r8)
 800ed04:	7ff80000 	.word	0x7ff80000

0800ed08 <_free_r>:
 800ed08:	b570      	push	{r4, r5, r6, lr}
 800ed0a:	0005      	movs	r5, r0
 800ed0c:	1e0c      	subs	r4, r1, #0
 800ed0e:	d010      	beq.n	800ed32 <_free_r+0x2a>
 800ed10:	3c04      	subs	r4, #4
 800ed12:	6823      	ldr	r3, [r4, #0]
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	da00      	bge.n	800ed1a <_free_r+0x12>
 800ed18:	18e4      	adds	r4, r4, r3
 800ed1a:	0028      	movs	r0, r5
 800ed1c:	f000 fc4c 	bl	800f5b8 <__malloc_lock>
 800ed20:	4a1d      	ldr	r2, [pc, #116]	@ (800ed98 <_free_r+0x90>)
 800ed22:	6813      	ldr	r3, [r2, #0]
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d105      	bne.n	800ed34 <_free_r+0x2c>
 800ed28:	6063      	str	r3, [r4, #4]
 800ed2a:	6014      	str	r4, [r2, #0]
 800ed2c:	0028      	movs	r0, r5
 800ed2e:	f000 fc4b 	bl	800f5c8 <__malloc_unlock>
 800ed32:	bd70      	pop	{r4, r5, r6, pc}
 800ed34:	42a3      	cmp	r3, r4
 800ed36:	d908      	bls.n	800ed4a <_free_r+0x42>
 800ed38:	6820      	ldr	r0, [r4, #0]
 800ed3a:	1821      	adds	r1, r4, r0
 800ed3c:	428b      	cmp	r3, r1
 800ed3e:	d1f3      	bne.n	800ed28 <_free_r+0x20>
 800ed40:	6819      	ldr	r1, [r3, #0]
 800ed42:	685b      	ldr	r3, [r3, #4]
 800ed44:	1809      	adds	r1, r1, r0
 800ed46:	6021      	str	r1, [r4, #0]
 800ed48:	e7ee      	b.n	800ed28 <_free_r+0x20>
 800ed4a:	001a      	movs	r2, r3
 800ed4c:	685b      	ldr	r3, [r3, #4]
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d001      	beq.n	800ed56 <_free_r+0x4e>
 800ed52:	42a3      	cmp	r3, r4
 800ed54:	d9f9      	bls.n	800ed4a <_free_r+0x42>
 800ed56:	6811      	ldr	r1, [r2, #0]
 800ed58:	1850      	adds	r0, r2, r1
 800ed5a:	42a0      	cmp	r0, r4
 800ed5c:	d10b      	bne.n	800ed76 <_free_r+0x6e>
 800ed5e:	6820      	ldr	r0, [r4, #0]
 800ed60:	1809      	adds	r1, r1, r0
 800ed62:	1850      	adds	r0, r2, r1
 800ed64:	6011      	str	r1, [r2, #0]
 800ed66:	4283      	cmp	r3, r0
 800ed68:	d1e0      	bne.n	800ed2c <_free_r+0x24>
 800ed6a:	6818      	ldr	r0, [r3, #0]
 800ed6c:	685b      	ldr	r3, [r3, #4]
 800ed6e:	1841      	adds	r1, r0, r1
 800ed70:	6011      	str	r1, [r2, #0]
 800ed72:	6053      	str	r3, [r2, #4]
 800ed74:	e7da      	b.n	800ed2c <_free_r+0x24>
 800ed76:	42a0      	cmp	r0, r4
 800ed78:	d902      	bls.n	800ed80 <_free_r+0x78>
 800ed7a:	230c      	movs	r3, #12
 800ed7c:	602b      	str	r3, [r5, #0]
 800ed7e:	e7d5      	b.n	800ed2c <_free_r+0x24>
 800ed80:	6820      	ldr	r0, [r4, #0]
 800ed82:	1821      	adds	r1, r4, r0
 800ed84:	428b      	cmp	r3, r1
 800ed86:	d103      	bne.n	800ed90 <_free_r+0x88>
 800ed88:	6819      	ldr	r1, [r3, #0]
 800ed8a:	685b      	ldr	r3, [r3, #4]
 800ed8c:	1809      	adds	r1, r1, r0
 800ed8e:	6021      	str	r1, [r4, #0]
 800ed90:	6063      	str	r3, [r4, #4]
 800ed92:	6054      	str	r4, [r2, #4]
 800ed94:	e7ca      	b.n	800ed2c <_free_r+0x24>
 800ed96:	46c0      	nop			@ (mov r8, r8)
 800ed98:	200022fc 	.word	0x200022fc

0800ed9c <rshift>:
 800ed9c:	0002      	movs	r2, r0
 800ed9e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eda0:	6904      	ldr	r4, [r0, #16]
 800eda2:	b085      	sub	sp, #20
 800eda4:	3214      	adds	r2, #20
 800eda6:	114b      	asrs	r3, r1, #5
 800eda8:	0016      	movs	r6, r2
 800edaa:	9302      	str	r3, [sp, #8]
 800edac:	429c      	cmp	r4, r3
 800edae:	dd31      	ble.n	800ee14 <rshift+0x78>
 800edb0:	261f      	movs	r6, #31
 800edb2:	000f      	movs	r7, r1
 800edb4:	009b      	lsls	r3, r3, #2
 800edb6:	00a5      	lsls	r5, r4, #2
 800edb8:	18d3      	adds	r3, r2, r3
 800edba:	4037      	ands	r7, r6
 800edbc:	1955      	adds	r5, r2, r5
 800edbe:	9300      	str	r3, [sp, #0]
 800edc0:	9701      	str	r7, [sp, #4]
 800edc2:	4231      	tst	r1, r6
 800edc4:	d10d      	bne.n	800ede2 <rshift+0x46>
 800edc6:	0016      	movs	r6, r2
 800edc8:	0019      	movs	r1, r3
 800edca:	428d      	cmp	r5, r1
 800edcc:	d836      	bhi.n	800ee3c <rshift+0xa0>
 800edce:	9b00      	ldr	r3, [sp, #0]
 800edd0:	2600      	movs	r6, #0
 800edd2:	3b03      	subs	r3, #3
 800edd4:	429d      	cmp	r5, r3
 800edd6:	d302      	bcc.n	800edde <rshift+0x42>
 800edd8:	9b02      	ldr	r3, [sp, #8]
 800edda:	1ae4      	subs	r4, r4, r3
 800eddc:	00a6      	lsls	r6, r4, #2
 800edde:	1996      	adds	r6, r2, r6
 800ede0:	e018      	b.n	800ee14 <rshift+0x78>
 800ede2:	2120      	movs	r1, #32
 800ede4:	9e01      	ldr	r6, [sp, #4]
 800ede6:	9f01      	ldr	r7, [sp, #4]
 800ede8:	1b89      	subs	r1, r1, r6
 800edea:	9e00      	ldr	r6, [sp, #0]
 800edec:	9103      	str	r1, [sp, #12]
 800edee:	ce02      	ldmia	r6!, {r1}
 800edf0:	4694      	mov	ip, r2
 800edf2:	40f9      	lsrs	r1, r7
 800edf4:	42b5      	cmp	r5, r6
 800edf6:	d816      	bhi.n	800ee26 <rshift+0x8a>
 800edf8:	9b00      	ldr	r3, [sp, #0]
 800edfa:	2600      	movs	r6, #0
 800edfc:	3301      	adds	r3, #1
 800edfe:	429d      	cmp	r5, r3
 800ee00:	d303      	bcc.n	800ee0a <rshift+0x6e>
 800ee02:	9b02      	ldr	r3, [sp, #8]
 800ee04:	1ae4      	subs	r4, r4, r3
 800ee06:	00a6      	lsls	r6, r4, #2
 800ee08:	3e04      	subs	r6, #4
 800ee0a:	1996      	adds	r6, r2, r6
 800ee0c:	6031      	str	r1, [r6, #0]
 800ee0e:	2900      	cmp	r1, #0
 800ee10:	d000      	beq.n	800ee14 <rshift+0x78>
 800ee12:	3604      	adds	r6, #4
 800ee14:	1ab1      	subs	r1, r6, r2
 800ee16:	1089      	asrs	r1, r1, #2
 800ee18:	6101      	str	r1, [r0, #16]
 800ee1a:	4296      	cmp	r6, r2
 800ee1c:	d101      	bne.n	800ee22 <rshift+0x86>
 800ee1e:	2300      	movs	r3, #0
 800ee20:	6143      	str	r3, [r0, #20]
 800ee22:	b005      	add	sp, #20
 800ee24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee26:	6837      	ldr	r7, [r6, #0]
 800ee28:	9b03      	ldr	r3, [sp, #12]
 800ee2a:	409f      	lsls	r7, r3
 800ee2c:	430f      	orrs	r7, r1
 800ee2e:	4661      	mov	r1, ip
 800ee30:	c180      	stmia	r1!, {r7}
 800ee32:	468c      	mov	ip, r1
 800ee34:	9b01      	ldr	r3, [sp, #4]
 800ee36:	ce02      	ldmia	r6!, {r1}
 800ee38:	40d9      	lsrs	r1, r3
 800ee3a:	e7db      	b.n	800edf4 <rshift+0x58>
 800ee3c:	c980      	ldmia	r1!, {r7}
 800ee3e:	c680      	stmia	r6!, {r7}
 800ee40:	e7c3      	b.n	800edca <rshift+0x2e>

0800ee42 <__hexdig_fun>:
 800ee42:	0002      	movs	r2, r0
 800ee44:	3a30      	subs	r2, #48	@ 0x30
 800ee46:	0003      	movs	r3, r0
 800ee48:	2a09      	cmp	r2, #9
 800ee4a:	d802      	bhi.n	800ee52 <__hexdig_fun+0x10>
 800ee4c:	3b20      	subs	r3, #32
 800ee4e:	b2d8      	uxtb	r0, r3
 800ee50:	4770      	bx	lr
 800ee52:	0002      	movs	r2, r0
 800ee54:	3a61      	subs	r2, #97	@ 0x61
 800ee56:	2a05      	cmp	r2, #5
 800ee58:	d801      	bhi.n	800ee5e <__hexdig_fun+0x1c>
 800ee5a:	3b47      	subs	r3, #71	@ 0x47
 800ee5c:	e7f7      	b.n	800ee4e <__hexdig_fun+0xc>
 800ee5e:	001a      	movs	r2, r3
 800ee60:	3a41      	subs	r2, #65	@ 0x41
 800ee62:	2000      	movs	r0, #0
 800ee64:	2a05      	cmp	r2, #5
 800ee66:	d8f3      	bhi.n	800ee50 <__hexdig_fun+0xe>
 800ee68:	3b27      	subs	r3, #39	@ 0x27
 800ee6a:	e7f0      	b.n	800ee4e <__hexdig_fun+0xc>

0800ee6c <__gethex>:
 800ee6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee6e:	b089      	sub	sp, #36	@ 0x24
 800ee70:	9307      	str	r3, [sp, #28]
 800ee72:	680b      	ldr	r3, [r1, #0]
 800ee74:	9201      	str	r2, [sp, #4]
 800ee76:	9003      	str	r0, [sp, #12]
 800ee78:	9106      	str	r1, [sp, #24]
 800ee7a:	1c9a      	adds	r2, r3, #2
 800ee7c:	0011      	movs	r1, r2
 800ee7e:	3201      	adds	r2, #1
 800ee80:	1e50      	subs	r0, r2, #1
 800ee82:	7800      	ldrb	r0, [r0, #0]
 800ee84:	2830      	cmp	r0, #48	@ 0x30
 800ee86:	d0f9      	beq.n	800ee7c <__gethex+0x10>
 800ee88:	1acb      	subs	r3, r1, r3
 800ee8a:	3b02      	subs	r3, #2
 800ee8c:	9305      	str	r3, [sp, #20]
 800ee8e:	9100      	str	r1, [sp, #0]
 800ee90:	f7ff ffd7 	bl	800ee42 <__hexdig_fun>
 800ee94:	2300      	movs	r3, #0
 800ee96:	001d      	movs	r5, r3
 800ee98:	9302      	str	r3, [sp, #8]
 800ee9a:	4298      	cmp	r0, r3
 800ee9c:	d11e      	bne.n	800eedc <__gethex+0x70>
 800ee9e:	2201      	movs	r2, #1
 800eea0:	49a6      	ldr	r1, [pc, #664]	@ (800f13c <__gethex+0x2d0>)
 800eea2:	9800      	ldr	r0, [sp, #0]
 800eea4:	f7ff fe94 	bl	800ebd0 <strncmp>
 800eea8:	0007      	movs	r7, r0
 800eeaa:	42a8      	cmp	r0, r5
 800eeac:	d000      	beq.n	800eeb0 <__gethex+0x44>
 800eeae:	e06a      	b.n	800ef86 <__gethex+0x11a>
 800eeb0:	9b00      	ldr	r3, [sp, #0]
 800eeb2:	7858      	ldrb	r0, [r3, #1]
 800eeb4:	1c5c      	adds	r4, r3, #1
 800eeb6:	f7ff ffc4 	bl	800ee42 <__hexdig_fun>
 800eeba:	2301      	movs	r3, #1
 800eebc:	9302      	str	r3, [sp, #8]
 800eebe:	42a8      	cmp	r0, r5
 800eec0:	d02f      	beq.n	800ef22 <__gethex+0xb6>
 800eec2:	9400      	str	r4, [sp, #0]
 800eec4:	9b00      	ldr	r3, [sp, #0]
 800eec6:	7818      	ldrb	r0, [r3, #0]
 800eec8:	2830      	cmp	r0, #48	@ 0x30
 800eeca:	d009      	beq.n	800eee0 <__gethex+0x74>
 800eecc:	f7ff ffb9 	bl	800ee42 <__hexdig_fun>
 800eed0:	4242      	negs	r2, r0
 800eed2:	4142      	adcs	r2, r0
 800eed4:	2301      	movs	r3, #1
 800eed6:	0025      	movs	r5, r4
 800eed8:	9202      	str	r2, [sp, #8]
 800eeda:	9305      	str	r3, [sp, #20]
 800eedc:	9c00      	ldr	r4, [sp, #0]
 800eede:	e004      	b.n	800eeea <__gethex+0x7e>
 800eee0:	9b00      	ldr	r3, [sp, #0]
 800eee2:	3301      	adds	r3, #1
 800eee4:	9300      	str	r3, [sp, #0]
 800eee6:	e7ed      	b.n	800eec4 <__gethex+0x58>
 800eee8:	3401      	adds	r4, #1
 800eeea:	7820      	ldrb	r0, [r4, #0]
 800eeec:	f7ff ffa9 	bl	800ee42 <__hexdig_fun>
 800eef0:	1e07      	subs	r7, r0, #0
 800eef2:	d1f9      	bne.n	800eee8 <__gethex+0x7c>
 800eef4:	2201      	movs	r2, #1
 800eef6:	0020      	movs	r0, r4
 800eef8:	4990      	ldr	r1, [pc, #576]	@ (800f13c <__gethex+0x2d0>)
 800eefa:	f7ff fe69 	bl	800ebd0 <strncmp>
 800eefe:	2800      	cmp	r0, #0
 800ef00:	d10d      	bne.n	800ef1e <__gethex+0xb2>
 800ef02:	2d00      	cmp	r5, #0
 800ef04:	d106      	bne.n	800ef14 <__gethex+0xa8>
 800ef06:	3401      	adds	r4, #1
 800ef08:	0025      	movs	r5, r4
 800ef0a:	7820      	ldrb	r0, [r4, #0]
 800ef0c:	f7ff ff99 	bl	800ee42 <__hexdig_fun>
 800ef10:	2800      	cmp	r0, #0
 800ef12:	d102      	bne.n	800ef1a <__gethex+0xae>
 800ef14:	1b2d      	subs	r5, r5, r4
 800ef16:	00af      	lsls	r7, r5, #2
 800ef18:	e003      	b.n	800ef22 <__gethex+0xb6>
 800ef1a:	3401      	adds	r4, #1
 800ef1c:	e7f5      	b.n	800ef0a <__gethex+0x9e>
 800ef1e:	2d00      	cmp	r5, #0
 800ef20:	d1f8      	bne.n	800ef14 <__gethex+0xa8>
 800ef22:	2220      	movs	r2, #32
 800ef24:	7823      	ldrb	r3, [r4, #0]
 800ef26:	0026      	movs	r6, r4
 800ef28:	4393      	bics	r3, r2
 800ef2a:	2b50      	cmp	r3, #80	@ 0x50
 800ef2c:	d11d      	bne.n	800ef6a <__gethex+0xfe>
 800ef2e:	7863      	ldrb	r3, [r4, #1]
 800ef30:	2b2b      	cmp	r3, #43	@ 0x2b
 800ef32:	d02d      	beq.n	800ef90 <__gethex+0x124>
 800ef34:	2b2d      	cmp	r3, #45	@ 0x2d
 800ef36:	d02f      	beq.n	800ef98 <__gethex+0x12c>
 800ef38:	2300      	movs	r3, #0
 800ef3a:	1c66      	adds	r6, r4, #1
 800ef3c:	9304      	str	r3, [sp, #16]
 800ef3e:	7830      	ldrb	r0, [r6, #0]
 800ef40:	f7ff ff7f 	bl	800ee42 <__hexdig_fun>
 800ef44:	1e43      	subs	r3, r0, #1
 800ef46:	b2db      	uxtb	r3, r3
 800ef48:	0005      	movs	r5, r0
 800ef4a:	2b18      	cmp	r3, #24
 800ef4c:	d82a      	bhi.n	800efa4 <__gethex+0x138>
 800ef4e:	7870      	ldrb	r0, [r6, #1]
 800ef50:	f7ff ff77 	bl	800ee42 <__hexdig_fun>
 800ef54:	1e43      	subs	r3, r0, #1
 800ef56:	b2db      	uxtb	r3, r3
 800ef58:	3601      	adds	r6, #1
 800ef5a:	3d10      	subs	r5, #16
 800ef5c:	2b18      	cmp	r3, #24
 800ef5e:	d91d      	bls.n	800ef9c <__gethex+0x130>
 800ef60:	9b04      	ldr	r3, [sp, #16]
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d000      	beq.n	800ef68 <__gethex+0xfc>
 800ef66:	426d      	negs	r5, r5
 800ef68:	197f      	adds	r7, r7, r5
 800ef6a:	9b06      	ldr	r3, [sp, #24]
 800ef6c:	601e      	str	r6, [r3, #0]
 800ef6e:	9b02      	ldr	r3, [sp, #8]
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d019      	beq.n	800efa8 <__gethex+0x13c>
 800ef74:	9b05      	ldr	r3, [sp, #20]
 800ef76:	2606      	movs	r6, #6
 800ef78:	425a      	negs	r2, r3
 800ef7a:	4153      	adcs	r3, r2
 800ef7c:	425b      	negs	r3, r3
 800ef7e:	401e      	ands	r6, r3
 800ef80:	0030      	movs	r0, r6
 800ef82:	b009      	add	sp, #36	@ 0x24
 800ef84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ef86:	2301      	movs	r3, #1
 800ef88:	2700      	movs	r7, #0
 800ef8a:	9c00      	ldr	r4, [sp, #0]
 800ef8c:	9302      	str	r3, [sp, #8]
 800ef8e:	e7c8      	b.n	800ef22 <__gethex+0xb6>
 800ef90:	2300      	movs	r3, #0
 800ef92:	9304      	str	r3, [sp, #16]
 800ef94:	1ca6      	adds	r6, r4, #2
 800ef96:	e7d2      	b.n	800ef3e <__gethex+0xd2>
 800ef98:	2301      	movs	r3, #1
 800ef9a:	e7fa      	b.n	800ef92 <__gethex+0x126>
 800ef9c:	230a      	movs	r3, #10
 800ef9e:	435d      	muls	r5, r3
 800efa0:	182d      	adds	r5, r5, r0
 800efa2:	e7d4      	b.n	800ef4e <__gethex+0xe2>
 800efa4:	0026      	movs	r6, r4
 800efa6:	e7e0      	b.n	800ef6a <__gethex+0xfe>
 800efa8:	9b00      	ldr	r3, [sp, #0]
 800efaa:	9902      	ldr	r1, [sp, #8]
 800efac:	1ae3      	subs	r3, r4, r3
 800efae:	3b01      	subs	r3, #1
 800efb0:	2b07      	cmp	r3, #7
 800efb2:	dc0a      	bgt.n	800efca <__gethex+0x15e>
 800efb4:	9803      	ldr	r0, [sp, #12]
 800efb6:	f000 fb0f 	bl	800f5d8 <_Balloc>
 800efba:	1e05      	subs	r5, r0, #0
 800efbc:	d108      	bne.n	800efd0 <__gethex+0x164>
 800efbe:	002a      	movs	r2, r5
 800efc0:	21e4      	movs	r1, #228	@ 0xe4
 800efc2:	4b5f      	ldr	r3, [pc, #380]	@ (800f140 <__gethex+0x2d4>)
 800efc4:	485f      	ldr	r0, [pc, #380]	@ (800f144 <__gethex+0x2d8>)
 800efc6:	f001 fd77 	bl	8010ab8 <__assert_func>
 800efca:	3101      	adds	r1, #1
 800efcc:	105b      	asrs	r3, r3, #1
 800efce:	e7ef      	b.n	800efb0 <__gethex+0x144>
 800efd0:	0003      	movs	r3, r0
 800efd2:	3314      	adds	r3, #20
 800efd4:	9302      	str	r3, [sp, #8]
 800efd6:	9305      	str	r3, [sp, #20]
 800efd8:	2300      	movs	r3, #0
 800efda:	001e      	movs	r6, r3
 800efdc:	9304      	str	r3, [sp, #16]
 800efde:	9b00      	ldr	r3, [sp, #0]
 800efe0:	42a3      	cmp	r3, r4
 800efe2:	d338      	bcc.n	800f056 <__gethex+0x1ea>
 800efe4:	9c05      	ldr	r4, [sp, #20]
 800efe6:	9b02      	ldr	r3, [sp, #8]
 800efe8:	c440      	stmia	r4!, {r6}
 800efea:	1ae4      	subs	r4, r4, r3
 800efec:	10a4      	asrs	r4, r4, #2
 800efee:	0030      	movs	r0, r6
 800eff0:	612c      	str	r4, [r5, #16]
 800eff2:	f000 fbe9 	bl	800f7c8 <__hi0bits>
 800eff6:	9b01      	ldr	r3, [sp, #4]
 800eff8:	0164      	lsls	r4, r4, #5
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	1a26      	subs	r6, r4, r0
 800effe:	9300      	str	r3, [sp, #0]
 800f000:	429e      	cmp	r6, r3
 800f002:	dd52      	ble.n	800f0aa <__gethex+0x23e>
 800f004:	1af6      	subs	r6, r6, r3
 800f006:	0031      	movs	r1, r6
 800f008:	0028      	movs	r0, r5
 800f00a:	f000 ff84 	bl	800ff16 <__any_on>
 800f00e:	1e04      	subs	r4, r0, #0
 800f010:	d00f      	beq.n	800f032 <__gethex+0x1c6>
 800f012:	2401      	movs	r4, #1
 800f014:	211f      	movs	r1, #31
 800f016:	0020      	movs	r0, r4
 800f018:	1e73      	subs	r3, r6, #1
 800f01a:	4019      	ands	r1, r3
 800f01c:	4088      	lsls	r0, r1
 800f01e:	0001      	movs	r1, r0
 800f020:	115a      	asrs	r2, r3, #5
 800f022:	9802      	ldr	r0, [sp, #8]
 800f024:	0092      	lsls	r2, r2, #2
 800f026:	5812      	ldr	r2, [r2, r0]
 800f028:	420a      	tst	r2, r1
 800f02a:	d002      	beq.n	800f032 <__gethex+0x1c6>
 800f02c:	42a3      	cmp	r3, r4
 800f02e:	dc34      	bgt.n	800f09a <__gethex+0x22e>
 800f030:	2402      	movs	r4, #2
 800f032:	0031      	movs	r1, r6
 800f034:	0028      	movs	r0, r5
 800f036:	f7ff feb1 	bl	800ed9c <rshift>
 800f03a:	19bf      	adds	r7, r7, r6
 800f03c:	9b01      	ldr	r3, [sp, #4]
 800f03e:	689b      	ldr	r3, [r3, #8]
 800f040:	42bb      	cmp	r3, r7
 800f042:	da42      	bge.n	800f0ca <__gethex+0x25e>
 800f044:	0029      	movs	r1, r5
 800f046:	9803      	ldr	r0, [sp, #12]
 800f048:	f000 fb0a 	bl	800f660 <_Bfree>
 800f04c:	2300      	movs	r3, #0
 800f04e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f050:	26a3      	movs	r6, #163	@ 0xa3
 800f052:	6013      	str	r3, [r2, #0]
 800f054:	e794      	b.n	800ef80 <__gethex+0x114>
 800f056:	3c01      	subs	r4, #1
 800f058:	7823      	ldrb	r3, [r4, #0]
 800f05a:	2b2e      	cmp	r3, #46	@ 0x2e
 800f05c:	d012      	beq.n	800f084 <__gethex+0x218>
 800f05e:	9b04      	ldr	r3, [sp, #16]
 800f060:	2b20      	cmp	r3, #32
 800f062:	d104      	bne.n	800f06e <__gethex+0x202>
 800f064:	9b05      	ldr	r3, [sp, #20]
 800f066:	c340      	stmia	r3!, {r6}
 800f068:	2600      	movs	r6, #0
 800f06a:	9305      	str	r3, [sp, #20]
 800f06c:	9604      	str	r6, [sp, #16]
 800f06e:	7820      	ldrb	r0, [r4, #0]
 800f070:	f7ff fee7 	bl	800ee42 <__hexdig_fun>
 800f074:	230f      	movs	r3, #15
 800f076:	4018      	ands	r0, r3
 800f078:	9b04      	ldr	r3, [sp, #16]
 800f07a:	4098      	lsls	r0, r3
 800f07c:	3304      	adds	r3, #4
 800f07e:	4306      	orrs	r6, r0
 800f080:	9304      	str	r3, [sp, #16]
 800f082:	e7ac      	b.n	800efde <__gethex+0x172>
 800f084:	9b00      	ldr	r3, [sp, #0]
 800f086:	42a3      	cmp	r3, r4
 800f088:	d8e9      	bhi.n	800f05e <__gethex+0x1f2>
 800f08a:	2201      	movs	r2, #1
 800f08c:	0020      	movs	r0, r4
 800f08e:	492b      	ldr	r1, [pc, #172]	@ (800f13c <__gethex+0x2d0>)
 800f090:	f7ff fd9e 	bl	800ebd0 <strncmp>
 800f094:	2800      	cmp	r0, #0
 800f096:	d1e2      	bne.n	800f05e <__gethex+0x1f2>
 800f098:	e7a1      	b.n	800efde <__gethex+0x172>
 800f09a:	0028      	movs	r0, r5
 800f09c:	1eb1      	subs	r1, r6, #2
 800f09e:	f000 ff3a 	bl	800ff16 <__any_on>
 800f0a2:	2800      	cmp	r0, #0
 800f0a4:	d0c4      	beq.n	800f030 <__gethex+0x1c4>
 800f0a6:	2403      	movs	r4, #3
 800f0a8:	e7c3      	b.n	800f032 <__gethex+0x1c6>
 800f0aa:	9b00      	ldr	r3, [sp, #0]
 800f0ac:	2400      	movs	r4, #0
 800f0ae:	429e      	cmp	r6, r3
 800f0b0:	dac4      	bge.n	800f03c <__gethex+0x1d0>
 800f0b2:	1b9e      	subs	r6, r3, r6
 800f0b4:	0029      	movs	r1, r5
 800f0b6:	0032      	movs	r2, r6
 800f0b8:	9803      	ldr	r0, [sp, #12]
 800f0ba:	f000 fcf3 	bl	800faa4 <__lshift>
 800f0be:	0003      	movs	r3, r0
 800f0c0:	3314      	adds	r3, #20
 800f0c2:	0005      	movs	r5, r0
 800f0c4:	1bbf      	subs	r7, r7, r6
 800f0c6:	9302      	str	r3, [sp, #8]
 800f0c8:	e7b8      	b.n	800f03c <__gethex+0x1d0>
 800f0ca:	9b01      	ldr	r3, [sp, #4]
 800f0cc:	685e      	ldr	r6, [r3, #4]
 800f0ce:	42be      	cmp	r6, r7
 800f0d0:	dd6f      	ble.n	800f1b2 <__gethex+0x346>
 800f0d2:	9b00      	ldr	r3, [sp, #0]
 800f0d4:	1bf6      	subs	r6, r6, r7
 800f0d6:	42b3      	cmp	r3, r6
 800f0d8:	dc36      	bgt.n	800f148 <__gethex+0x2dc>
 800f0da:	9b01      	ldr	r3, [sp, #4]
 800f0dc:	68db      	ldr	r3, [r3, #12]
 800f0de:	2b02      	cmp	r3, #2
 800f0e0:	d024      	beq.n	800f12c <__gethex+0x2c0>
 800f0e2:	2b03      	cmp	r3, #3
 800f0e4:	d026      	beq.n	800f134 <__gethex+0x2c8>
 800f0e6:	2b01      	cmp	r3, #1
 800f0e8:	d117      	bne.n	800f11a <__gethex+0x2ae>
 800f0ea:	9b00      	ldr	r3, [sp, #0]
 800f0ec:	42b3      	cmp	r3, r6
 800f0ee:	d114      	bne.n	800f11a <__gethex+0x2ae>
 800f0f0:	2b01      	cmp	r3, #1
 800f0f2:	d10b      	bne.n	800f10c <__gethex+0x2a0>
 800f0f4:	9b01      	ldr	r3, [sp, #4]
 800f0f6:	9a07      	ldr	r2, [sp, #28]
 800f0f8:	685b      	ldr	r3, [r3, #4]
 800f0fa:	2662      	movs	r6, #98	@ 0x62
 800f0fc:	6013      	str	r3, [r2, #0]
 800f0fe:	2301      	movs	r3, #1
 800f100:	9a02      	ldr	r2, [sp, #8]
 800f102:	612b      	str	r3, [r5, #16]
 800f104:	6013      	str	r3, [r2, #0]
 800f106:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f108:	601d      	str	r5, [r3, #0]
 800f10a:	e739      	b.n	800ef80 <__gethex+0x114>
 800f10c:	9900      	ldr	r1, [sp, #0]
 800f10e:	0028      	movs	r0, r5
 800f110:	3901      	subs	r1, #1
 800f112:	f000 ff00 	bl	800ff16 <__any_on>
 800f116:	2800      	cmp	r0, #0
 800f118:	d1ec      	bne.n	800f0f4 <__gethex+0x288>
 800f11a:	0029      	movs	r1, r5
 800f11c:	9803      	ldr	r0, [sp, #12]
 800f11e:	f000 fa9f 	bl	800f660 <_Bfree>
 800f122:	2300      	movs	r3, #0
 800f124:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f126:	2650      	movs	r6, #80	@ 0x50
 800f128:	6013      	str	r3, [r2, #0]
 800f12a:	e729      	b.n	800ef80 <__gethex+0x114>
 800f12c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d1f3      	bne.n	800f11a <__gethex+0x2ae>
 800f132:	e7df      	b.n	800f0f4 <__gethex+0x288>
 800f134:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f136:	2b00      	cmp	r3, #0
 800f138:	d1dc      	bne.n	800f0f4 <__gethex+0x288>
 800f13a:	e7ee      	b.n	800f11a <__gethex+0x2ae>
 800f13c:	08011dc8 	.word	0x08011dc8
 800f140:	08011dde 	.word	0x08011dde
 800f144:	08011def 	.word	0x08011def
 800f148:	1e77      	subs	r7, r6, #1
 800f14a:	2c00      	cmp	r4, #0
 800f14c:	d12f      	bne.n	800f1ae <__gethex+0x342>
 800f14e:	2f00      	cmp	r7, #0
 800f150:	d004      	beq.n	800f15c <__gethex+0x2f0>
 800f152:	0039      	movs	r1, r7
 800f154:	0028      	movs	r0, r5
 800f156:	f000 fede 	bl	800ff16 <__any_on>
 800f15a:	0004      	movs	r4, r0
 800f15c:	231f      	movs	r3, #31
 800f15e:	117a      	asrs	r2, r7, #5
 800f160:	401f      	ands	r7, r3
 800f162:	3b1e      	subs	r3, #30
 800f164:	40bb      	lsls	r3, r7
 800f166:	9902      	ldr	r1, [sp, #8]
 800f168:	0092      	lsls	r2, r2, #2
 800f16a:	5852      	ldr	r2, [r2, r1]
 800f16c:	421a      	tst	r2, r3
 800f16e:	d001      	beq.n	800f174 <__gethex+0x308>
 800f170:	2302      	movs	r3, #2
 800f172:	431c      	orrs	r4, r3
 800f174:	9b00      	ldr	r3, [sp, #0]
 800f176:	0031      	movs	r1, r6
 800f178:	1b9b      	subs	r3, r3, r6
 800f17a:	2602      	movs	r6, #2
 800f17c:	0028      	movs	r0, r5
 800f17e:	9300      	str	r3, [sp, #0]
 800f180:	f7ff fe0c 	bl	800ed9c <rshift>
 800f184:	9b01      	ldr	r3, [sp, #4]
 800f186:	685f      	ldr	r7, [r3, #4]
 800f188:	2c00      	cmp	r4, #0
 800f18a:	d03f      	beq.n	800f20c <__gethex+0x3a0>
 800f18c:	9b01      	ldr	r3, [sp, #4]
 800f18e:	68db      	ldr	r3, [r3, #12]
 800f190:	2b02      	cmp	r3, #2
 800f192:	d010      	beq.n	800f1b6 <__gethex+0x34a>
 800f194:	2b03      	cmp	r3, #3
 800f196:	d012      	beq.n	800f1be <__gethex+0x352>
 800f198:	2b01      	cmp	r3, #1
 800f19a:	d106      	bne.n	800f1aa <__gethex+0x33e>
 800f19c:	07a2      	lsls	r2, r4, #30
 800f19e:	d504      	bpl.n	800f1aa <__gethex+0x33e>
 800f1a0:	9a02      	ldr	r2, [sp, #8]
 800f1a2:	6812      	ldr	r2, [r2, #0]
 800f1a4:	4314      	orrs	r4, r2
 800f1a6:	421c      	tst	r4, r3
 800f1a8:	d10c      	bne.n	800f1c4 <__gethex+0x358>
 800f1aa:	2310      	movs	r3, #16
 800f1ac:	e02d      	b.n	800f20a <__gethex+0x39e>
 800f1ae:	2401      	movs	r4, #1
 800f1b0:	e7d4      	b.n	800f15c <__gethex+0x2f0>
 800f1b2:	2601      	movs	r6, #1
 800f1b4:	e7e8      	b.n	800f188 <__gethex+0x31c>
 800f1b6:	2301      	movs	r3, #1
 800f1b8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f1ba:	1a9b      	subs	r3, r3, r2
 800f1bc:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f1be:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d0f2      	beq.n	800f1aa <__gethex+0x33e>
 800f1c4:	692b      	ldr	r3, [r5, #16]
 800f1c6:	2000      	movs	r0, #0
 800f1c8:	9302      	str	r3, [sp, #8]
 800f1ca:	009b      	lsls	r3, r3, #2
 800f1cc:	9304      	str	r3, [sp, #16]
 800f1ce:	002b      	movs	r3, r5
 800f1d0:	9a04      	ldr	r2, [sp, #16]
 800f1d2:	3314      	adds	r3, #20
 800f1d4:	1899      	adds	r1, r3, r2
 800f1d6:	681a      	ldr	r2, [r3, #0]
 800f1d8:	1c54      	adds	r4, r2, #1
 800f1da:	d01c      	beq.n	800f216 <__gethex+0x3aa>
 800f1dc:	3201      	adds	r2, #1
 800f1de:	601a      	str	r2, [r3, #0]
 800f1e0:	002b      	movs	r3, r5
 800f1e2:	3314      	adds	r3, #20
 800f1e4:	2e02      	cmp	r6, #2
 800f1e6:	d13f      	bne.n	800f268 <__gethex+0x3fc>
 800f1e8:	9a01      	ldr	r2, [sp, #4]
 800f1ea:	9900      	ldr	r1, [sp, #0]
 800f1ec:	6812      	ldr	r2, [r2, #0]
 800f1ee:	3a01      	subs	r2, #1
 800f1f0:	428a      	cmp	r2, r1
 800f1f2:	d109      	bne.n	800f208 <__gethex+0x39c>
 800f1f4:	000a      	movs	r2, r1
 800f1f6:	201f      	movs	r0, #31
 800f1f8:	4010      	ands	r0, r2
 800f1fa:	2201      	movs	r2, #1
 800f1fc:	4082      	lsls	r2, r0
 800f1fe:	1149      	asrs	r1, r1, #5
 800f200:	0089      	lsls	r1, r1, #2
 800f202:	58cb      	ldr	r3, [r1, r3]
 800f204:	4213      	tst	r3, r2
 800f206:	d13d      	bne.n	800f284 <__gethex+0x418>
 800f208:	2320      	movs	r3, #32
 800f20a:	431e      	orrs	r6, r3
 800f20c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f20e:	601d      	str	r5, [r3, #0]
 800f210:	9b07      	ldr	r3, [sp, #28]
 800f212:	601f      	str	r7, [r3, #0]
 800f214:	e6b4      	b.n	800ef80 <__gethex+0x114>
 800f216:	c301      	stmia	r3!, {r0}
 800f218:	4299      	cmp	r1, r3
 800f21a:	d8dc      	bhi.n	800f1d6 <__gethex+0x36a>
 800f21c:	68ab      	ldr	r3, [r5, #8]
 800f21e:	9a02      	ldr	r2, [sp, #8]
 800f220:	429a      	cmp	r2, r3
 800f222:	db18      	blt.n	800f256 <__gethex+0x3ea>
 800f224:	6869      	ldr	r1, [r5, #4]
 800f226:	9803      	ldr	r0, [sp, #12]
 800f228:	3101      	adds	r1, #1
 800f22a:	f000 f9d5 	bl	800f5d8 <_Balloc>
 800f22e:	1e04      	subs	r4, r0, #0
 800f230:	d104      	bne.n	800f23c <__gethex+0x3d0>
 800f232:	0022      	movs	r2, r4
 800f234:	2184      	movs	r1, #132	@ 0x84
 800f236:	4b1d      	ldr	r3, [pc, #116]	@ (800f2ac <__gethex+0x440>)
 800f238:	481d      	ldr	r0, [pc, #116]	@ (800f2b0 <__gethex+0x444>)
 800f23a:	e6c4      	b.n	800efc6 <__gethex+0x15a>
 800f23c:	0029      	movs	r1, r5
 800f23e:	692a      	ldr	r2, [r5, #16]
 800f240:	310c      	adds	r1, #12
 800f242:	3202      	adds	r2, #2
 800f244:	0092      	lsls	r2, r2, #2
 800f246:	300c      	adds	r0, #12
 800f248:	f7ff fd4f 	bl	800ecea <memcpy>
 800f24c:	0029      	movs	r1, r5
 800f24e:	9803      	ldr	r0, [sp, #12]
 800f250:	f000 fa06 	bl	800f660 <_Bfree>
 800f254:	0025      	movs	r5, r4
 800f256:	692b      	ldr	r3, [r5, #16]
 800f258:	1c5a      	adds	r2, r3, #1
 800f25a:	612a      	str	r2, [r5, #16]
 800f25c:	2201      	movs	r2, #1
 800f25e:	3304      	adds	r3, #4
 800f260:	009b      	lsls	r3, r3, #2
 800f262:	18eb      	adds	r3, r5, r3
 800f264:	605a      	str	r2, [r3, #4]
 800f266:	e7bb      	b.n	800f1e0 <__gethex+0x374>
 800f268:	692a      	ldr	r2, [r5, #16]
 800f26a:	9902      	ldr	r1, [sp, #8]
 800f26c:	428a      	cmp	r2, r1
 800f26e:	dd0b      	ble.n	800f288 <__gethex+0x41c>
 800f270:	2101      	movs	r1, #1
 800f272:	0028      	movs	r0, r5
 800f274:	f7ff fd92 	bl	800ed9c <rshift>
 800f278:	9b01      	ldr	r3, [sp, #4]
 800f27a:	3701      	adds	r7, #1
 800f27c:	689b      	ldr	r3, [r3, #8]
 800f27e:	42bb      	cmp	r3, r7
 800f280:	da00      	bge.n	800f284 <__gethex+0x418>
 800f282:	e6df      	b.n	800f044 <__gethex+0x1d8>
 800f284:	2601      	movs	r6, #1
 800f286:	e7bf      	b.n	800f208 <__gethex+0x39c>
 800f288:	221f      	movs	r2, #31
 800f28a:	9c00      	ldr	r4, [sp, #0]
 800f28c:	9900      	ldr	r1, [sp, #0]
 800f28e:	4014      	ands	r4, r2
 800f290:	4211      	tst	r1, r2
 800f292:	d0f7      	beq.n	800f284 <__gethex+0x418>
 800f294:	9a04      	ldr	r2, [sp, #16]
 800f296:	189b      	adds	r3, r3, r2
 800f298:	3b04      	subs	r3, #4
 800f29a:	6818      	ldr	r0, [r3, #0]
 800f29c:	f000 fa94 	bl	800f7c8 <__hi0bits>
 800f2a0:	2320      	movs	r3, #32
 800f2a2:	1b1b      	subs	r3, r3, r4
 800f2a4:	4298      	cmp	r0, r3
 800f2a6:	dbe3      	blt.n	800f270 <__gethex+0x404>
 800f2a8:	e7ec      	b.n	800f284 <__gethex+0x418>
 800f2aa:	46c0      	nop			@ (mov r8, r8)
 800f2ac:	08011dde 	.word	0x08011dde
 800f2b0:	08011def 	.word	0x08011def

0800f2b4 <L_shift>:
 800f2b4:	2308      	movs	r3, #8
 800f2b6:	b570      	push	{r4, r5, r6, lr}
 800f2b8:	2520      	movs	r5, #32
 800f2ba:	1a9a      	subs	r2, r3, r2
 800f2bc:	0092      	lsls	r2, r2, #2
 800f2be:	1aad      	subs	r5, r5, r2
 800f2c0:	6843      	ldr	r3, [r0, #4]
 800f2c2:	6804      	ldr	r4, [r0, #0]
 800f2c4:	001e      	movs	r6, r3
 800f2c6:	40ae      	lsls	r6, r5
 800f2c8:	40d3      	lsrs	r3, r2
 800f2ca:	4334      	orrs	r4, r6
 800f2cc:	6004      	str	r4, [r0, #0]
 800f2ce:	6043      	str	r3, [r0, #4]
 800f2d0:	3004      	adds	r0, #4
 800f2d2:	4288      	cmp	r0, r1
 800f2d4:	d3f4      	bcc.n	800f2c0 <L_shift+0xc>
 800f2d6:	bd70      	pop	{r4, r5, r6, pc}

0800f2d8 <__match>:
 800f2d8:	b530      	push	{r4, r5, lr}
 800f2da:	6803      	ldr	r3, [r0, #0]
 800f2dc:	780c      	ldrb	r4, [r1, #0]
 800f2de:	3301      	adds	r3, #1
 800f2e0:	2c00      	cmp	r4, #0
 800f2e2:	d102      	bne.n	800f2ea <__match+0x12>
 800f2e4:	6003      	str	r3, [r0, #0]
 800f2e6:	2001      	movs	r0, #1
 800f2e8:	bd30      	pop	{r4, r5, pc}
 800f2ea:	781a      	ldrb	r2, [r3, #0]
 800f2ec:	0015      	movs	r5, r2
 800f2ee:	3d41      	subs	r5, #65	@ 0x41
 800f2f0:	2d19      	cmp	r5, #25
 800f2f2:	d800      	bhi.n	800f2f6 <__match+0x1e>
 800f2f4:	3220      	adds	r2, #32
 800f2f6:	3101      	adds	r1, #1
 800f2f8:	42a2      	cmp	r2, r4
 800f2fa:	d0ef      	beq.n	800f2dc <__match+0x4>
 800f2fc:	2000      	movs	r0, #0
 800f2fe:	e7f3      	b.n	800f2e8 <__match+0x10>

0800f300 <__hexnan>:
 800f300:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f302:	680b      	ldr	r3, [r1, #0]
 800f304:	b08b      	sub	sp, #44	@ 0x2c
 800f306:	9201      	str	r2, [sp, #4]
 800f308:	9901      	ldr	r1, [sp, #4]
 800f30a:	115a      	asrs	r2, r3, #5
 800f30c:	0092      	lsls	r2, r2, #2
 800f30e:	188a      	adds	r2, r1, r2
 800f310:	9202      	str	r2, [sp, #8]
 800f312:	0019      	movs	r1, r3
 800f314:	221f      	movs	r2, #31
 800f316:	4011      	ands	r1, r2
 800f318:	9008      	str	r0, [sp, #32]
 800f31a:	9106      	str	r1, [sp, #24]
 800f31c:	4213      	tst	r3, r2
 800f31e:	d002      	beq.n	800f326 <__hexnan+0x26>
 800f320:	9b02      	ldr	r3, [sp, #8]
 800f322:	3304      	adds	r3, #4
 800f324:	9302      	str	r3, [sp, #8]
 800f326:	9b02      	ldr	r3, [sp, #8]
 800f328:	2500      	movs	r5, #0
 800f32a:	1f1f      	subs	r7, r3, #4
 800f32c:	003e      	movs	r6, r7
 800f32e:	003c      	movs	r4, r7
 800f330:	9b08      	ldr	r3, [sp, #32]
 800f332:	603d      	str	r5, [r7, #0]
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	9507      	str	r5, [sp, #28]
 800f338:	9305      	str	r3, [sp, #20]
 800f33a:	9503      	str	r5, [sp, #12]
 800f33c:	9b05      	ldr	r3, [sp, #20]
 800f33e:	3301      	adds	r3, #1
 800f340:	9309      	str	r3, [sp, #36]	@ 0x24
 800f342:	9b05      	ldr	r3, [sp, #20]
 800f344:	785b      	ldrb	r3, [r3, #1]
 800f346:	9304      	str	r3, [sp, #16]
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d028      	beq.n	800f39e <__hexnan+0x9e>
 800f34c:	9804      	ldr	r0, [sp, #16]
 800f34e:	f7ff fd78 	bl	800ee42 <__hexdig_fun>
 800f352:	2800      	cmp	r0, #0
 800f354:	d155      	bne.n	800f402 <__hexnan+0x102>
 800f356:	9b04      	ldr	r3, [sp, #16]
 800f358:	2b20      	cmp	r3, #32
 800f35a:	d819      	bhi.n	800f390 <__hexnan+0x90>
 800f35c:	9b03      	ldr	r3, [sp, #12]
 800f35e:	9a07      	ldr	r2, [sp, #28]
 800f360:	4293      	cmp	r3, r2
 800f362:	dd12      	ble.n	800f38a <__hexnan+0x8a>
 800f364:	42b4      	cmp	r4, r6
 800f366:	d206      	bcs.n	800f376 <__hexnan+0x76>
 800f368:	2d07      	cmp	r5, #7
 800f36a:	dc04      	bgt.n	800f376 <__hexnan+0x76>
 800f36c:	002a      	movs	r2, r5
 800f36e:	0031      	movs	r1, r6
 800f370:	0020      	movs	r0, r4
 800f372:	f7ff ff9f 	bl	800f2b4 <L_shift>
 800f376:	9b01      	ldr	r3, [sp, #4]
 800f378:	2508      	movs	r5, #8
 800f37a:	429c      	cmp	r4, r3
 800f37c:	d905      	bls.n	800f38a <__hexnan+0x8a>
 800f37e:	1f26      	subs	r6, r4, #4
 800f380:	2500      	movs	r5, #0
 800f382:	0034      	movs	r4, r6
 800f384:	9b03      	ldr	r3, [sp, #12]
 800f386:	6035      	str	r5, [r6, #0]
 800f388:	9307      	str	r3, [sp, #28]
 800f38a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f38c:	9305      	str	r3, [sp, #20]
 800f38e:	e7d5      	b.n	800f33c <__hexnan+0x3c>
 800f390:	9b04      	ldr	r3, [sp, #16]
 800f392:	2b29      	cmp	r3, #41	@ 0x29
 800f394:	d15a      	bne.n	800f44c <__hexnan+0x14c>
 800f396:	9b05      	ldr	r3, [sp, #20]
 800f398:	9a08      	ldr	r2, [sp, #32]
 800f39a:	3302      	adds	r3, #2
 800f39c:	6013      	str	r3, [r2, #0]
 800f39e:	9b03      	ldr	r3, [sp, #12]
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d053      	beq.n	800f44c <__hexnan+0x14c>
 800f3a4:	42b4      	cmp	r4, r6
 800f3a6:	d206      	bcs.n	800f3b6 <__hexnan+0xb6>
 800f3a8:	2d07      	cmp	r5, #7
 800f3aa:	dc04      	bgt.n	800f3b6 <__hexnan+0xb6>
 800f3ac:	002a      	movs	r2, r5
 800f3ae:	0031      	movs	r1, r6
 800f3b0:	0020      	movs	r0, r4
 800f3b2:	f7ff ff7f 	bl	800f2b4 <L_shift>
 800f3b6:	9b01      	ldr	r3, [sp, #4]
 800f3b8:	429c      	cmp	r4, r3
 800f3ba:	d936      	bls.n	800f42a <__hexnan+0x12a>
 800f3bc:	001a      	movs	r2, r3
 800f3be:	0023      	movs	r3, r4
 800f3c0:	cb02      	ldmia	r3!, {r1}
 800f3c2:	c202      	stmia	r2!, {r1}
 800f3c4:	429f      	cmp	r7, r3
 800f3c6:	d2fb      	bcs.n	800f3c0 <__hexnan+0xc0>
 800f3c8:	9b02      	ldr	r3, [sp, #8]
 800f3ca:	1c62      	adds	r2, r4, #1
 800f3cc:	1ed9      	subs	r1, r3, #3
 800f3ce:	2304      	movs	r3, #4
 800f3d0:	4291      	cmp	r1, r2
 800f3d2:	d305      	bcc.n	800f3e0 <__hexnan+0xe0>
 800f3d4:	9b02      	ldr	r3, [sp, #8]
 800f3d6:	3b04      	subs	r3, #4
 800f3d8:	1b1b      	subs	r3, r3, r4
 800f3da:	089b      	lsrs	r3, r3, #2
 800f3dc:	3301      	adds	r3, #1
 800f3de:	009b      	lsls	r3, r3, #2
 800f3e0:	9a01      	ldr	r2, [sp, #4]
 800f3e2:	18d3      	adds	r3, r2, r3
 800f3e4:	2200      	movs	r2, #0
 800f3e6:	c304      	stmia	r3!, {r2}
 800f3e8:	429f      	cmp	r7, r3
 800f3ea:	d2fc      	bcs.n	800f3e6 <__hexnan+0xe6>
 800f3ec:	683b      	ldr	r3, [r7, #0]
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d104      	bne.n	800f3fc <__hexnan+0xfc>
 800f3f2:	9b01      	ldr	r3, [sp, #4]
 800f3f4:	429f      	cmp	r7, r3
 800f3f6:	d127      	bne.n	800f448 <__hexnan+0x148>
 800f3f8:	2301      	movs	r3, #1
 800f3fa:	603b      	str	r3, [r7, #0]
 800f3fc:	2005      	movs	r0, #5
 800f3fe:	b00b      	add	sp, #44	@ 0x2c
 800f400:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f402:	9b03      	ldr	r3, [sp, #12]
 800f404:	3501      	adds	r5, #1
 800f406:	3301      	adds	r3, #1
 800f408:	9303      	str	r3, [sp, #12]
 800f40a:	2d08      	cmp	r5, #8
 800f40c:	dd06      	ble.n	800f41c <__hexnan+0x11c>
 800f40e:	9b01      	ldr	r3, [sp, #4]
 800f410:	429c      	cmp	r4, r3
 800f412:	d9ba      	bls.n	800f38a <__hexnan+0x8a>
 800f414:	2300      	movs	r3, #0
 800f416:	2501      	movs	r5, #1
 800f418:	3c04      	subs	r4, #4
 800f41a:	6023      	str	r3, [r4, #0]
 800f41c:	220f      	movs	r2, #15
 800f41e:	6823      	ldr	r3, [r4, #0]
 800f420:	4010      	ands	r0, r2
 800f422:	011b      	lsls	r3, r3, #4
 800f424:	4303      	orrs	r3, r0
 800f426:	6023      	str	r3, [r4, #0]
 800f428:	e7af      	b.n	800f38a <__hexnan+0x8a>
 800f42a:	9b06      	ldr	r3, [sp, #24]
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d0dd      	beq.n	800f3ec <__hexnan+0xec>
 800f430:	2320      	movs	r3, #32
 800f432:	9a06      	ldr	r2, [sp, #24]
 800f434:	9902      	ldr	r1, [sp, #8]
 800f436:	1a9b      	subs	r3, r3, r2
 800f438:	2201      	movs	r2, #1
 800f43a:	4252      	negs	r2, r2
 800f43c:	40da      	lsrs	r2, r3
 800f43e:	3904      	subs	r1, #4
 800f440:	680b      	ldr	r3, [r1, #0]
 800f442:	4013      	ands	r3, r2
 800f444:	600b      	str	r3, [r1, #0]
 800f446:	e7d1      	b.n	800f3ec <__hexnan+0xec>
 800f448:	3f04      	subs	r7, #4
 800f44a:	e7cf      	b.n	800f3ec <__hexnan+0xec>
 800f44c:	2004      	movs	r0, #4
 800f44e:	e7d6      	b.n	800f3fe <__hexnan+0xfe>

0800f450 <sbrk_aligned>:
 800f450:	b570      	push	{r4, r5, r6, lr}
 800f452:	4e0f      	ldr	r6, [pc, #60]	@ (800f490 <sbrk_aligned+0x40>)
 800f454:	000d      	movs	r5, r1
 800f456:	6831      	ldr	r1, [r6, #0]
 800f458:	0004      	movs	r4, r0
 800f45a:	2900      	cmp	r1, #0
 800f45c:	d102      	bne.n	800f464 <sbrk_aligned+0x14>
 800f45e:	f001 fb0d 	bl	8010a7c <_sbrk_r>
 800f462:	6030      	str	r0, [r6, #0]
 800f464:	0029      	movs	r1, r5
 800f466:	0020      	movs	r0, r4
 800f468:	f001 fb08 	bl	8010a7c <_sbrk_r>
 800f46c:	1c43      	adds	r3, r0, #1
 800f46e:	d103      	bne.n	800f478 <sbrk_aligned+0x28>
 800f470:	2501      	movs	r5, #1
 800f472:	426d      	negs	r5, r5
 800f474:	0028      	movs	r0, r5
 800f476:	bd70      	pop	{r4, r5, r6, pc}
 800f478:	2303      	movs	r3, #3
 800f47a:	1cc5      	adds	r5, r0, #3
 800f47c:	439d      	bics	r5, r3
 800f47e:	42a8      	cmp	r0, r5
 800f480:	d0f8      	beq.n	800f474 <sbrk_aligned+0x24>
 800f482:	1a29      	subs	r1, r5, r0
 800f484:	0020      	movs	r0, r4
 800f486:	f001 faf9 	bl	8010a7c <_sbrk_r>
 800f48a:	3001      	adds	r0, #1
 800f48c:	d1f2      	bne.n	800f474 <sbrk_aligned+0x24>
 800f48e:	e7ef      	b.n	800f470 <sbrk_aligned+0x20>
 800f490:	200022f8 	.word	0x200022f8

0800f494 <_malloc_r>:
 800f494:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f496:	2203      	movs	r2, #3
 800f498:	1ccb      	adds	r3, r1, #3
 800f49a:	4393      	bics	r3, r2
 800f49c:	3308      	adds	r3, #8
 800f49e:	0005      	movs	r5, r0
 800f4a0:	001f      	movs	r7, r3
 800f4a2:	2b0c      	cmp	r3, #12
 800f4a4:	d234      	bcs.n	800f510 <_malloc_r+0x7c>
 800f4a6:	270c      	movs	r7, #12
 800f4a8:	42b9      	cmp	r1, r7
 800f4aa:	d833      	bhi.n	800f514 <_malloc_r+0x80>
 800f4ac:	0028      	movs	r0, r5
 800f4ae:	f000 f883 	bl	800f5b8 <__malloc_lock>
 800f4b2:	4e37      	ldr	r6, [pc, #220]	@ (800f590 <_malloc_r+0xfc>)
 800f4b4:	6833      	ldr	r3, [r6, #0]
 800f4b6:	001c      	movs	r4, r3
 800f4b8:	2c00      	cmp	r4, #0
 800f4ba:	d12f      	bne.n	800f51c <_malloc_r+0x88>
 800f4bc:	0039      	movs	r1, r7
 800f4be:	0028      	movs	r0, r5
 800f4c0:	f7ff ffc6 	bl	800f450 <sbrk_aligned>
 800f4c4:	0004      	movs	r4, r0
 800f4c6:	1c43      	adds	r3, r0, #1
 800f4c8:	d15f      	bne.n	800f58a <_malloc_r+0xf6>
 800f4ca:	6834      	ldr	r4, [r6, #0]
 800f4cc:	9400      	str	r4, [sp, #0]
 800f4ce:	9b00      	ldr	r3, [sp, #0]
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d14a      	bne.n	800f56a <_malloc_r+0xd6>
 800f4d4:	2c00      	cmp	r4, #0
 800f4d6:	d052      	beq.n	800f57e <_malloc_r+0xea>
 800f4d8:	6823      	ldr	r3, [r4, #0]
 800f4da:	0028      	movs	r0, r5
 800f4dc:	18e3      	adds	r3, r4, r3
 800f4de:	9900      	ldr	r1, [sp, #0]
 800f4e0:	9301      	str	r3, [sp, #4]
 800f4e2:	f001 facb 	bl	8010a7c <_sbrk_r>
 800f4e6:	9b01      	ldr	r3, [sp, #4]
 800f4e8:	4283      	cmp	r3, r0
 800f4ea:	d148      	bne.n	800f57e <_malloc_r+0xea>
 800f4ec:	6823      	ldr	r3, [r4, #0]
 800f4ee:	0028      	movs	r0, r5
 800f4f0:	1aff      	subs	r7, r7, r3
 800f4f2:	0039      	movs	r1, r7
 800f4f4:	f7ff ffac 	bl	800f450 <sbrk_aligned>
 800f4f8:	3001      	adds	r0, #1
 800f4fa:	d040      	beq.n	800f57e <_malloc_r+0xea>
 800f4fc:	6823      	ldr	r3, [r4, #0]
 800f4fe:	19db      	adds	r3, r3, r7
 800f500:	6023      	str	r3, [r4, #0]
 800f502:	6833      	ldr	r3, [r6, #0]
 800f504:	685a      	ldr	r2, [r3, #4]
 800f506:	2a00      	cmp	r2, #0
 800f508:	d133      	bne.n	800f572 <_malloc_r+0xde>
 800f50a:	9b00      	ldr	r3, [sp, #0]
 800f50c:	6033      	str	r3, [r6, #0]
 800f50e:	e019      	b.n	800f544 <_malloc_r+0xb0>
 800f510:	2b00      	cmp	r3, #0
 800f512:	dac9      	bge.n	800f4a8 <_malloc_r+0x14>
 800f514:	230c      	movs	r3, #12
 800f516:	602b      	str	r3, [r5, #0]
 800f518:	2000      	movs	r0, #0
 800f51a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f51c:	6821      	ldr	r1, [r4, #0]
 800f51e:	1bc9      	subs	r1, r1, r7
 800f520:	d420      	bmi.n	800f564 <_malloc_r+0xd0>
 800f522:	290b      	cmp	r1, #11
 800f524:	d90a      	bls.n	800f53c <_malloc_r+0xa8>
 800f526:	19e2      	adds	r2, r4, r7
 800f528:	6027      	str	r7, [r4, #0]
 800f52a:	42a3      	cmp	r3, r4
 800f52c:	d104      	bne.n	800f538 <_malloc_r+0xa4>
 800f52e:	6032      	str	r2, [r6, #0]
 800f530:	6863      	ldr	r3, [r4, #4]
 800f532:	6011      	str	r1, [r2, #0]
 800f534:	6053      	str	r3, [r2, #4]
 800f536:	e005      	b.n	800f544 <_malloc_r+0xb0>
 800f538:	605a      	str	r2, [r3, #4]
 800f53a:	e7f9      	b.n	800f530 <_malloc_r+0x9c>
 800f53c:	6862      	ldr	r2, [r4, #4]
 800f53e:	42a3      	cmp	r3, r4
 800f540:	d10e      	bne.n	800f560 <_malloc_r+0xcc>
 800f542:	6032      	str	r2, [r6, #0]
 800f544:	0028      	movs	r0, r5
 800f546:	f000 f83f 	bl	800f5c8 <__malloc_unlock>
 800f54a:	0020      	movs	r0, r4
 800f54c:	2207      	movs	r2, #7
 800f54e:	300b      	adds	r0, #11
 800f550:	1d23      	adds	r3, r4, #4
 800f552:	4390      	bics	r0, r2
 800f554:	1ac2      	subs	r2, r0, r3
 800f556:	4298      	cmp	r0, r3
 800f558:	d0df      	beq.n	800f51a <_malloc_r+0x86>
 800f55a:	1a1b      	subs	r3, r3, r0
 800f55c:	50a3      	str	r3, [r4, r2]
 800f55e:	e7dc      	b.n	800f51a <_malloc_r+0x86>
 800f560:	605a      	str	r2, [r3, #4]
 800f562:	e7ef      	b.n	800f544 <_malloc_r+0xb0>
 800f564:	0023      	movs	r3, r4
 800f566:	6864      	ldr	r4, [r4, #4]
 800f568:	e7a6      	b.n	800f4b8 <_malloc_r+0x24>
 800f56a:	9c00      	ldr	r4, [sp, #0]
 800f56c:	6863      	ldr	r3, [r4, #4]
 800f56e:	9300      	str	r3, [sp, #0]
 800f570:	e7ad      	b.n	800f4ce <_malloc_r+0x3a>
 800f572:	001a      	movs	r2, r3
 800f574:	685b      	ldr	r3, [r3, #4]
 800f576:	42a3      	cmp	r3, r4
 800f578:	d1fb      	bne.n	800f572 <_malloc_r+0xde>
 800f57a:	2300      	movs	r3, #0
 800f57c:	e7da      	b.n	800f534 <_malloc_r+0xa0>
 800f57e:	230c      	movs	r3, #12
 800f580:	0028      	movs	r0, r5
 800f582:	602b      	str	r3, [r5, #0]
 800f584:	f000 f820 	bl	800f5c8 <__malloc_unlock>
 800f588:	e7c6      	b.n	800f518 <_malloc_r+0x84>
 800f58a:	6007      	str	r7, [r0, #0]
 800f58c:	e7da      	b.n	800f544 <_malloc_r+0xb0>
 800f58e:	46c0      	nop			@ (mov r8, r8)
 800f590:	200022fc 	.word	0x200022fc

0800f594 <__ascii_mbtowc>:
 800f594:	b082      	sub	sp, #8
 800f596:	2900      	cmp	r1, #0
 800f598:	d100      	bne.n	800f59c <__ascii_mbtowc+0x8>
 800f59a:	a901      	add	r1, sp, #4
 800f59c:	1e10      	subs	r0, r2, #0
 800f59e:	d006      	beq.n	800f5ae <__ascii_mbtowc+0x1a>
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d006      	beq.n	800f5b2 <__ascii_mbtowc+0x1e>
 800f5a4:	7813      	ldrb	r3, [r2, #0]
 800f5a6:	600b      	str	r3, [r1, #0]
 800f5a8:	7810      	ldrb	r0, [r2, #0]
 800f5aa:	1e43      	subs	r3, r0, #1
 800f5ac:	4198      	sbcs	r0, r3
 800f5ae:	b002      	add	sp, #8
 800f5b0:	4770      	bx	lr
 800f5b2:	2002      	movs	r0, #2
 800f5b4:	4240      	negs	r0, r0
 800f5b6:	e7fa      	b.n	800f5ae <__ascii_mbtowc+0x1a>

0800f5b8 <__malloc_lock>:
 800f5b8:	b510      	push	{r4, lr}
 800f5ba:	4802      	ldr	r0, [pc, #8]	@ (800f5c4 <__malloc_lock+0xc>)
 800f5bc:	f7ff fb93 	bl	800ece6 <__retarget_lock_acquire_recursive>
 800f5c0:	bd10      	pop	{r4, pc}
 800f5c2:	46c0      	nop			@ (mov r8, r8)
 800f5c4:	200022f4 	.word	0x200022f4

0800f5c8 <__malloc_unlock>:
 800f5c8:	b510      	push	{r4, lr}
 800f5ca:	4802      	ldr	r0, [pc, #8]	@ (800f5d4 <__malloc_unlock+0xc>)
 800f5cc:	f7ff fb8c 	bl	800ece8 <__retarget_lock_release_recursive>
 800f5d0:	bd10      	pop	{r4, pc}
 800f5d2:	46c0      	nop			@ (mov r8, r8)
 800f5d4:	200022f4 	.word	0x200022f4

0800f5d8 <_Balloc>:
 800f5d8:	b570      	push	{r4, r5, r6, lr}
 800f5da:	69c5      	ldr	r5, [r0, #28]
 800f5dc:	0006      	movs	r6, r0
 800f5de:	000c      	movs	r4, r1
 800f5e0:	2d00      	cmp	r5, #0
 800f5e2:	d10e      	bne.n	800f602 <_Balloc+0x2a>
 800f5e4:	2010      	movs	r0, #16
 800f5e6:	f001 fab3 	bl	8010b50 <malloc>
 800f5ea:	1e02      	subs	r2, r0, #0
 800f5ec:	61f0      	str	r0, [r6, #28]
 800f5ee:	d104      	bne.n	800f5fa <_Balloc+0x22>
 800f5f0:	216b      	movs	r1, #107	@ 0x6b
 800f5f2:	4b19      	ldr	r3, [pc, #100]	@ (800f658 <_Balloc+0x80>)
 800f5f4:	4819      	ldr	r0, [pc, #100]	@ (800f65c <_Balloc+0x84>)
 800f5f6:	f001 fa5f 	bl	8010ab8 <__assert_func>
 800f5fa:	6045      	str	r5, [r0, #4]
 800f5fc:	6085      	str	r5, [r0, #8]
 800f5fe:	6005      	str	r5, [r0, #0]
 800f600:	60c5      	str	r5, [r0, #12]
 800f602:	69f5      	ldr	r5, [r6, #28]
 800f604:	68eb      	ldr	r3, [r5, #12]
 800f606:	2b00      	cmp	r3, #0
 800f608:	d013      	beq.n	800f632 <_Balloc+0x5a>
 800f60a:	69f3      	ldr	r3, [r6, #28]
 800f60c:	00a2      	lsls	r2, r4, #2
 800f60e:	68db      	ldr	r3, [r3, #12]
 800f610:	189b      	adds	r3, r3, r2
 800f612:	6818      	ldr	r0, [r3, #0]
 800f614:	2800      	cmp	r0, #0
 800f616:	d118      	bne.n	800f64a <_Balloc+0x72>
 800f618:	2101      	movs	r1, #1
 800f61a:	000d      	movs	r5, r1
 800f61c:	40a5      	lsls	r5, r4
 800f61e:	1d6a      	adds	r2, r5, #5
 800f620:	0030      	movs	r0, r6
 800f622:	0092      	lsls	r2, r2, #2
 800f624:	f001 fa66 	bl	8010af4 <_calloc_r>
 800f628:	2800      	cmp	r0, #0
 800f62a:	d00c      	beq.n	800f646 <_Balloc+0x6e>
 800f62c:	6044      	str	r4, [r0, #4]
 800f62e:	6085      	str	r5, [r0, #8]
 800f630:	e00d      	b.n	800f64e <_Balloc+0x76>
 800f632:	2221      	movs	r2, #33	@ 0x21
 800f634:	2104      	movs	r1, #4
 800f636:	0030      	movs	r0, r6
 800f638:	f001 fa5c 	bl	8010af4 <_calloc_r>
 800f63c:	69f3      	ldr	r3, [r6, #28]
 800f63e:	60e8      	str	r0, [r5, #12]
 800f640:	68db      	ldr	r3, [r3, #12]
 800f642:	2b00      	cmp	r3, #0
 800f644:	d1e1      	bne.n	800f60a <_Balloc+0x32>
 800f646:	2000      	movs	r0, #0
 800f648:	bd70      	pop	{r4, r5, r6, pc}
 800f64a:	6802      	ldr	r2, [r0, #0]
 800f64c:	601a      	str	r2, [r3, #0]
 800f64e:	2300      	movs	r3, #0
 800f650:	6103      	str	r3, [r0, #16]
 800f652:	60c3      	str	r3, [r0, #12]
 800f654:	e7f8      	b.n	800f648 <_Balloc+0x70>
 800f656:	46c0      	nop			@ (mov r8, r8)
 800f658:	08011e4f 	.word	0x08011e4f
 800f65c:	08011e66 	.word	0x08011e66

0800f660 <_Bfree>:
 800f660:	b570      	push	{r4, r5, r6, lr}
 800f662:	69c6      	ldr	r6, [r0, #28]
 800f664:	0005      	movs	r5, r0
 800f666:	000c      	movs	r4, r1
 800f668:	2e00      	cmp	r6, #0
 800f66a:	d10e      	bne.n	800f68a <_Bfree+0x2a>
 800f66c:	2010      	movs	r0, #16
 800f66e:	f001 fa6f 	bl	8010b50 <malloc>
 800f672:	1e02      	subs	r2, r0, #0
 800f674:	61e8      	str	r0, [r5, #28]
 800f676:	d104      	bne.n	800f682 <_Bfree+0x22>
 800f678:	218f      	movs	r1, #143	@ 0x8f
 800f67a:	4b09      	ldr	r3, [pc, #36]	@ (800f6a0 <_Bfree+0x40>)
 800f67c:	4809      	ldr	r0, [pc, #36]	@ (800f6a4 <_Bfree+0x44>)
 800f67e:	f001 fa1b 	bl	8010ab8 <__assert_func>
 800f682:	6046      	str	r6, [r0, #4]
 800f684:	6086      	str	r6, [r0, #8]
 800f686:	6006      	str	r6, [r0, #0]
 800f688:	60c6      	str	r6, [r0, #12]
 800f68a:	2c00      	cmp	r4, #0
 800f68c:	d007      	beq.n	800f69e <_Bfree+0x3e>
 800f68e:	69eb      	ldr	r3, [r5, #28]
 800f690:	6862      	ldr	r2, [r4, #4]
 800f692:	68db      	ldr	r3, [r3, #12]
 800f694:	0092      	lsls	r2, r2, #2
 800f696:	189b      	adds	r3, r3, r2
 800f698:	681a      	ldr	r2, [r3, #0]
 800f69a:	6022      	str	r2, [r4, #0]
 800f69c:	601c      	str	r4, [r3, #0]
 800f69e:	bd70      	pop	{r4, r5, r6, pc}
 800f6a0:	08011e4f 	.word	0x08011e4f
 800f6a4:	08011e66 	.word	0x08011e66

0800f6a8 <__multadd>:
 800f6a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f6aa:	000f      	movs	r7, r1
 800f6ac:	9001      	str	r0, [sp, #4]
 800f6ae:	000c      	movs	r4, r1
 800f6b0:	001e      	movs	r6, r3
 800f6b2:	2000      	movs	r0, #0
 800f6b4:	690d      	ldr	r5, [r1, #16]
 800f6b6:	3714      	adds	r7, #20
 800f6b8:	683b      	ldr	r3, [r7, #0]
 800f6ba:	3001      	adds	r0, #1
 800f6bc:	b299      	uxth	r1, r3
 800f6be:	4351      	muls	r1, r2
 800f6c0:	0c1b      	lsrs	r3, r3, #16
 800f6c2:	4353      	muls	r3, r2
 800f6c4:	1989      	adds	r1, r1, r6
 800f6c6:	0c0e      	lsrs	r6, r1, #16
 800f6c8:	199b      	adds	r3, r3, r6
 800f6ca:	0c1e      	lsrs	r6, r3, #16
 800f6cc:	b289      	uxth	r1, r1
 800f6ce:	041b      	lsls	r3, r3, #16
 800f6d0:	185b      	adds	r3, r3, r1
 800f6d2:	c708      	stmia	r7!, {r3}
 800f6d4:	4285      	cmp	r5, r0
 800f6d6:	dcef      	bgt.n	800f6b8 <__multadd+0x10>
 800f6d8:	2e00      	cmp	r6, #0
 800f6da:	d022      	beq.n	800f722 <__multadd+0x7a>
 800f6dc:	68a3      	ldr	r3, [r4, #8]
 800f6de:	42ab      	cmp	r3, r5
 800f6e0:	dc19      	bgt.n	800f716 <__multadd+0x6e>
 800f6e2:	6861      	ldr	r1, [r4, #4]
 800f6e4:	9801      	ldr	r0, [sp, #4]
 800f6e6:	3101      	adds	r1, #1
 800f6e8:	f7ff ff76 	bl	800f5d8 <_Balloc>
 800f6ec:	1e07      	subs	r7, r0, #0
 800f6ee:	d105      	bne.n	800f6fc <__multadd+0x54>
 800f6f0:	003a      	movs	r2, r7
 800f6f2:	21ba      	movs	r1, #186	@ 0xba
 800f6f4:	4b0c      	ldr	r3, [pc, #48]	@ (800f728 <__multadd+0x80>)
 800f6f6:	480d      	ldr	r0, [pc, #52]	@ (800f72c <__multadd+0x84>)
 800f6f8:	f001 f9de 	bl	8010ab8 <__assert_func>
 800f6fc:	0021      	movs	r1, r4
 800f6fe:	6922      	ldr	r2, [r4, #16]
 800f700:	310c      	adds	r1, #12
 800f702:	3202      	adds	r2, #2
 800f704:	0092      	lsls	r2, r2, #2
 800f706:	300c      	adds	r0, #12
 800f708:	f7ff faef 	bl	800ecea <memcpy>
 800f70c:	0021      	movs	r1, r4
 800f70e:	9801      	ldr	r0, [sp, #4]
 800f710:	f7ff ffa6 	bl	800f660 <_Bfree>
 800f714:	003c      	movs	r4, r7
 800f716:	1d2b      	adds	r3, r5, #4
 800f718:	009b      	lsls	r3, r3, #2
 800f71a:	18e3      	adds	r3, r4, r3
 800f71c:	3501      	adds	r5, #1
 800f71e:	605e      	str	r6, [r3, #4]
 800f720:	6125      	str	r5, [r4, #16]
 800f722:	0020      	movs	r0, r4
 800f724:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f726:	46c0      	nop			@ (mov r8, r8)
 800f728:	08011dde 	.word	0x08011dde
 800f72c:	08011e66 	.word	0x08011e66

0800f730 <__s2b>:
 800f730:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f732:	0007      	movs	r7, r0
 800f734:	0018      	movs	r0, r3
 800f736:	000c      	movs	r4, r1
 800f738:	3008      	adds	r0, #8
 800f73a:	2109      	movs	r1, #9
 800f73c:	9301      	str	r3, [sp, #4]
 800f73e:	0015      	movs	r5, r2
 800f740:	f7f0 fd90 	bl	8000264 <__divsi3>
 800f744:	2301      	movs	r3, #1
 800f746:	2100      	movs	r1, #0
 800f748:	4283      	cmp	r3, r0
 800f74a:	db0a      	blt.n	800f762 <__s2b+0x32>
 800f74c:	0038      	movs	r0, r7
 800f74e:	f7ff ff43 	bl	800f5d8 <_Balloc>
 800f752:	1e01      	subs	r1, r0, #0
 800f754:	d108      	bne.n	800f768 <__s2b+0x38>
 800f756:	000a      	movs	r2, r1
 800f758:	4b19      	ldr	r3, [pc, #100]	@ (800f7c0 <__s2b+0x90>)
 800f75a:	481a      	ldr	r0, [pc, #104]	@ (800f7c4 <__s2b+0x94>)
 800f75c:	31d3      	adds	r1, #211	@ 0xd3
 800f75e:	f001 f9ab 	bl	8010ab8 <__assert_func>
 800f762:	005b      	lsls	r3, r3, #1
 800f764:	3101      	adds	r1, #1
 800f766:	e7ef      	b.n	800f748 <__s2b+0x18>
 800f768:	9b08      	ldr	r3, [sp, #32]
 800f76a:	6143      	str	r3, [r0, #20]
 800f76c:	2301      	movs	r3, #1
 800f76e:	6103      	str	r3, [r0, #16]
 800f770:	2d09      	cmp	r5, #9
 800f772:	dd18      	ble.n	800f7a6 <__s2b+0x76>
 800f774:	0023      	movs	r3, r4
 800f776:	3309      	adds	r3, #9
 800f778:	001e      	movs	r6, r3
 800f77a:	9300      	str	r3, [sp, #0]
 800f77c:	1964      	adds	r4, r4, r5
 800f77e:	7833      	ldrb	r3, [r6, #0]
 800f780:	220a      	movs	r2, #10
 800f782:	0038      	movs	r0, r7
 800f784:	3b30      	subs	r3, #48	@ 0x30
 800f786:	f7ff ff8f 	bl	800f6a8 <__multadd>
 800f78a:	3601      	adds	r6, #1
 800f78c:	0001      	movs	r1, r0
 800f78e:	42a6      	cmp	r6, r4
 800f790:	d1f5      	bne.n	800f77e <__s2b+0x4e>
 800f792:	002c      	movs	r4, r5
 800f794:	9b00      	ldr	r3, [sp, #0]
 800f796:	3c08      	subs	r4, #8
 800f798:	191c      	adds	r4, r3, r4
 800f79a:	002e      	movs	r6, r5
 800f79c:	9b01      	ldr	r3, [sp, #4]
 800f79e:	429e      	cmp	r6, r3
 800f7a0:	db04      	blt.n	800f7ac <__s2b+0x7c>
 800f7a2:	0008      	movs	r0, r1
 800f7a4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f7a6:	2509      	movs	r5, #9
 800f7a8:	340a      	adds	r4, #10
 800f7aa:	e7f6      	b.n	800f79a <__s2b+0x6a>
 800f7ac:	1b63      	subs	r3, r4, r5
 800f7ae:	5d9b      	ldrb	r3, [r3, r6]
 800f7b0:	220a      	movs	r2, #10
 800f7b2:	0038      	movs	r0, r7
 800f7b4:	3b30      	subs	r3, #48	@ 0x30
 800f7b6:	f7ff ff77 	bl	800f6a8 <__multadd>
 800f7ba:	3601      	adds	r6, #1
 800f7bc:	0001      	movs	r1, r0
 800f7be:	e7ed      	b.n	800f79c <__s2b+0x6c>
 800f7c0:	08011dde 	.word	0x08011dde
 800f7c4:	08011e66 	.word	0x08011e66

0800f7c8 <__hi0bits>:
 800f7c8:	2280      	movs	r2, #128	@ 0x80
 800f7ca:	0003      	movs	r3, r0
 800f7cc:	0252      	lsls	r2, r2, #9
 800f7ce:	2000      	movs	r0, #0
 800f7d0:	4293      	cmp	r3, r2
 800f7d2:	d201      	bcs.n	800f7d8 <__hi0bits+0x10>
 800f7d4:	041b      	lsls	r3, r3, #16
 800f7d6:	3010      	adds	r0, #16
 800f7d8:	2280      	movs	r2, #128	@ 0x80
 800f7da:	0452      	lsls	r2, r2, #17
 800f7dc:	4293      	cmp	r3, r2
 800f7de:	d201      	bcs.n	800f7e4 <__hi0bits+0x1c>
 800f7e0:	3008      	adds	r0, #8
 800f7e2:	021b      	lsls	r3, r3, #8
 800f7e4:	2280      	movs	r2, #128	@ 0x80
 800f7e6:	0552      	lsls	r2, r2, #21
 800f7e8:	4293      	cmp	r3, r2
 800f7ea:	d201      	bcs.n	800f7f0 <__hi0bits+0x28>
 800f7ec:	3004      	adds	r0, #4
 800f7ee:	011b      	lsls	r3, r3, #4
 800f7f0:	2280      	movs	r2, #128	@ 0x80
 800f7f2:	05d2      	lsls	r2, r2, #23
 800f7f4:	4293      	cmp	r3, r2
 800f7f6:	d201      	bcs.n	800f7fc <__hi0bits+0x34>
 800f7f8:	3002      	adds	r0, #2
 800f7fa:	009b      	lsls	r3, r3, #2
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	db03      	blt.n	800f808 <__hi0bits+0x40>
 800f800:	3001      	adds	r0, #1
 800f802:	4213      	tst	r3, r2
 800f804:	d100      	bne.n	800f808 <__hi0bits+0x40>
 800f806:	2020      	movs	r0, #32
 800f808:	4770      	bx	lr

0800f80a <__lo0bits>:
 800f80a:	6803      	ldr	r3, [r0, #0]
 800f80c:	0001      	movs	r1, r0
 800f80e:	2207      	movs	r2, #7
 800f810:	0018      	movs	r0, r3
 800f812:	4010      	ands	r0, r2
 800f814:	4213      	tst	r3, r2
 800f816:	d00d      	beq.n	800f834 <__lo0bits+0x2a>
 800f818:	3a06      	subs	r2, #6
 800f81a:	2000      	movs	r0, #0
 800f81c:	4213      	tst	r3, r2
 800f81e:	d105      	bne.n	800f82c <__lo0bits+0x22>
 800f820:	3002      	adds	r0, #2
 800f822:	4203      	tst	r3, r0
 800f824:	d003      	beq.n	800f82e <__lo0bits+0x24>
 800f826:	40d3      	lsrs	r3, r2
 800f828:	0010      	movs	r0, r2
 800f82a:	600b      	str	r3, [r1, #0]
 800f82c:	4770      	bx	lr
 800f82e:	089b      	lsrs	r3, r3, #2
 800f830:	600b      	str	r3, [r1, #0]
 800f832:	e7fb      	b.n	800f82c <__lo0bits+0x22>
 800f834:	b29a      	uxth	r2, r3
 800f836:	2a00      	cmp	r2, #0
 800f838:	d101      	bne.n	800f83e <__lo0bits+0x34>
 800f83a:	2010      	movs	r0, #16
 800f83c:	0c1b      	lsrs	r3, r3, #16
 800f83e:	b2da      	uxtb	r2, r3
 800f840:	2a00      	cmp	r2, #0
 800f842:	d101      	bne.n	800f848 <__lo0bits+0x3e>
 800f844:	3008      	adds	r0, #8
 800f846:	0a1b      	lsrs	r3, r3, #8
 800f848:	071a      	lsls	r2, r3, #28
 800f84a:	d101      	bne.n	800f850 <__lo0bits+0x46>
 800f84c:	3004      	adds	r0, #4
 800f84e:	091b      	lsrs	r3, r3, #4
 800f850:	079a      	lsls	r2, r3, #30
 800f852:	d101      	bne.n	800f858 <__lo0bits+0x4e>
 800f854:	3002      	adds	r0, #2
 800f856:	089b      	lsrs	r3, r3, #2
 800f858:	07da      	lsls	r2, r3, #31
 800f85a:	d4e9      	bmi.n	800f830 <__lo0bits+0x26>
 800f85c:	3001      	adds	r0, #1
 800f85e:	085b      	lsrs	r3, r3, #1
 800f860:	d1e6      	bne.n	800f830 <__lo0bits+0x26>
 800f862:	2020      	movs	r0, #32
 800f864:	e7e2      	b.n	800f82c <__lo0bits+0x22>
	...

0800f868 <__i2b>:
 800f868:	b510      	push	{r4, lr}
 800f86a:	000c      	movs	r4, r1
 800f86c:	2101      	movs	r1, #1
 800f86e:	f7ff feb3 	bl	800f5d8 <_Balloc>
 800f872:	2800      	cmp	r0, #0
 800f874:	d107      	bne.n	800f886 <__i2b+0x1e>
 800f876:	2146      	movs	r1, #70	@ 0x46
 800f878:	4c05      	ldr	r4, [pc, #20]	@ (800f890 <__i2b+0x28>)
 800f87a:	0002      	movs	r2, r0
 800f87c:	4b05      	ldr	r3, [pc, #20]	@ (800f894 <__i2b+0x2c>)
 800f87e:	0020      	movs	r0, r4
 800f880:	31ff      	adds	r1, #255	@ 0xff
 800f882:	f001 f919 	bl	8010ab8 <__assert_func>
 800f886:	2301      	movs	r3, #1
 800f888:	6144      	str	r4, [r0, #20]
 800f88a:	6103      	str	r3, [r0, #16]
 800f88c:	bd10      	pop	{r4, pc}
 800f88e:	46c0      	nop			@ (mov r8, r8)
 800f890:	08011e66 	.word	0x08011e66
 800f894:	08011dde 	.word	0x08011dde

0800f898 <__multiply>:
 800f898:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f89a:	0014      	movs	r4, r2
 800f89c:	690a      	ldr	r2, [r1, #16]
 800f89e:	6923      	ldr	r3, [r4, #16]
 800f8a0:	000d      	movs	r5, r1
 800f8a2:	b089      	sub	sp, #36	@ 0x24
 800f8a4:	429a      	cmp	r2, r3
 800f8a6:	db02      	blt.n	800f8ae <__multiply+0x16>
 800f8a8:	0023      	movs	r3, r4
 800f8aa:	000c      	movs	r4, r1
 800f8ac:	001d      	movs	r5, r3
 800f8ae:	6927      	ldr	r7, [r4, #16]
 800f8b0:	692e      	ldr	r6, [r5, #16]
 800f8b2:	6861      	ldr	r1, [r4, #4]
 800f8b4:	19bb      	adds	r3, r7, r6
 800f8b6:	9300      	str	r3, [sp, #0]
 800f8b8:	68a3      	ldr	r3, [r4, #8]
 800f8ba:	19ba      	adds	r2, r7, r6
 800f8bc:	4293      	cmp	r3, r2
 800f8be:	da00      	bge.n	800f8c2 <__multiply+0x2a>
 800f8c0:	3101      	adds	r1, #1
 800f8c2:	f7ff fe89 	bl	800f5d8 <_Balloc>
 800f8c6:	4684      	mov	ip, r0
 800f8c8:	2800      	cmp	r0, #0
 800f8ca:	d106      	bne.n	800f8da <__multiply+0x42>
 800f8cc:	21b1      	movs	r1, #177	@ 0xb1
 800f8ce:	4662      	mov	r2, ip
 800f8d0:	4b44      	ldr	r3, [pc, #272]	@ (800f9e4 <__multiply+0x14c>)
 800f8d2:	4845      	ldr	r0, [pc, #276]	@ (800f9e8 <__multiply+0x150>)
 800f8d4:	0049      	lsls	r1, r1, #1
 800f8d6:	f001 f8ef 	bl	8010ab8 <__assert_func>
 800f8da:	0002      	movs	r2, r0
 800f8dc:	19bb      	adds	r3, r7, r6
 800f8de:	3214      	adds	r2, #20
 800f8e0:	009b      	lsls	r3, r3, #2
 800f8e2:	18d3      	adds	r3, r2, r3
 800f8e4:	9301      	str	r3, [sp, #4]
 800f8e6:	2100      	movs	r1, #0
 800f8e8:	0013      	movs	r3, r2
 800f8ea:	9801      	ldr	r0, [sp, #4]
 800f8ec:	4283      	cmp	r3, r0
 800f8ee:	d328      	bcc.n	800f942 <__multiply+0xaa>
 800f8f0:	0023      	movs	r3, r4
 800f8f2:	00bf      	lsls	r7, r7, #2
 800f8f4:	3314      	adds	r3, #20
 800f8f6:	9304      	str	r3, [sp, #16]
 800f8f8:	3514      	adds	r5, #20
 800f8fa:	19db      	adds	r3, r3, r7
 800f8fc:	00b6      	lsls	r6, r6, #2
 800f8fe:	9302      	str	r3, [sp, #8]
 800f900:	19ab      	adds	r3, r5, r6
 800f902:	9307      	str	r3, [sp, #28]
 800f904:	2304      	movs	r3, #4
 800f906:	9305      	str	r3, [sp, #20]
 800f908:	0023      	movs	r3, r4
 800f90a:	9902      	ldr	r1, [sp, #8]
 800f90c:	3315      	adds	r3, #21
 800f90e:	4299      	cmp	r1, r3
 800f910:	d305      	bcc.n	800f91e <__multiply+0x86>
 800f912:	1b0c      	subs	r4, r1, r4
 800f914:	3c15      	subs	r4, #21
 800f916:	08a4      	lsrs	r4, r4, #2
 800f918:	3401      	adds	r4, #1
 800f91a:	00a3      	lsls	r3, r4, #2
 800f91c:	9305      	str	r3, [sp, #20]
 800f91e:	9b07      	ldr	r3, [sp, #28]
 800f920:	429d      	cmp	r5, r3
 800f922:	d310      	bcc.n	800f946 <__multiply+0xae>
 800f924:	9b00      	ldr	r3, [sp, #0]
 800f926:	2b00      	cmp	r3, #0
 800f928:	dd05      	ble.n	800f936 <__multiply+0x9e>
 800f92a:	9b01      	ldr	r3, [sp, #4]
 800f92c:	3b04      	subs	r3, #4
 800f92e:	9301      	str	r3, [sp, #4]
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	2b00      	cmp	r3, #0
 800f934:	d052      	beq.n	800f9dc <__multiply+0x144>
 800f936:	4663      	mov	r3, ip
 800f938:	4660      	mov	r0, ip
 800f93a:	9a00      	ldr	r2, [sp, #0]
 800f93c:	611a      	str	r2, [r3, #16]
 800f93e:	b009      	add	sp, #36	@ 0x24
 800f940:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f942:	c302      	stmia	r3!, {r1}
 800f944:	e7d1      	b.n	800f8ea <__multiply+0x52>
 800f946:	682c      	ldr	r4, [r5, #0]
 800f948:	b2a4      	uxth	r4, r4
 800f94a:	2c00      	cmp	r4, #0
 800f94c:	d01f      	beq.n	800f98e <__multiply+0xf6>
 800f94e:	2300      	movs	r3, #0
 800f950:	0017      	movs	r7, r2
 800f952:	9e04      	ldr	r6, [sp, #16]
 800f954:	9303      	str	r3, [sp, #12]
 800f956:	ce08      	ldmia	r6!, {r3}
 800f958:	6839      	ldr	r1, [r7, #0]
 800f95a:	9306      	str	r3, [sp, #24]
 800f95c:	466b      	mov	r3, sp
 800f95e:	8b1b      	ldrh	r3, [r3, #24]
 800f960:	b288      	uxth	r0, r1
 800f962:	4363      	muls	r3, r4
 800f964:	181b      	adds	r3, r3, r0
 800f966:	9803      	ldr	r0, [sp, #12]
 800f968:	0c09      	lsrs	r1, r1, #16
 800f96a:	181b      	adds	r3, r3, r0
 800f96c:	9806      	ldr	r0, [sp, #24]
 800f96e:	0c00      	lsrs	r0, r0, #16
 800f970:	4360      	muls	r0, r4
 800f972:	1840      	adds	r0, r0, r1
 800f974:	0c19      	lsrs	r1, r3, #16
 800f976:	1841      	adds	r1, r0, r1
 800f978:	0c08      	lsrs	r0, r1, #16
 800f97a:	b29b      	uxth	r3, r3
 800f97c:	0409      	lsls	r1, r1, #16
 800f97e:	4319      	orrs	r1, r3
 800f980:	9b02      	ldr	r3, [sp, #8]
 800f982:	9003      	str	r0, [sp, #12]
 800f984:	c702      	stmia	r7!, {r1}
 800f986:	42b3      	cmp	r3, r6
 800f988:	d8e5      	bhi.n	800f956 <__multiply+0xbe>
 800f98a:	9b05      	ldr	r3, [sp, #20]
 800f98c:	50d0      	str	r0, [r2, r3]
 800f98e:	682c      	ldr	r4, [r5, #0]
 800f990:	0c24      	lsrs	r4, r4, #16
 800f992:	d020      	beq.n	800f9d6 <__multiply+0x13e>
 800f994:	2100      	movs	r1, #0
 800f996:	0010      	movs	r0, r2
 800f998:	6813      	ldr	r3, [r2, #0]
 800f99a:	9e04      	ldr	r6, [sp, #16]
 800f99c:	9103      	str	r1, [sp, #12]
 800f99e:	6831      	ldr	r1, [r6, #0]
 800f9a0:	6807      	ldr	r7, [r0, #0]
 800f9a2:	b289      	uxth	r1, r1
 800f9a4:	4361      	muls	r1, r4
 800f9a6:	0c3f      	lsrs	r7, r7, #16
 800f9a8:	19c9      	adds	r1, r1, r7
 800f9aa:	9f03      	ldr	r7, [sp, #12]
 800f9ac:	b29b      	uxth	r3, r3
 800f9ae:	19c9      	adds	r1, r1, r7
 800f9b0:	040f      	lsls	r7, r1, #16
 800f9b2:	431f      	orrs	r7, r3
 800f9b4:	6007      	str	r7, [r0, #0]
 800f9b6:	ce80      	ldmia	r6!, {r7}
 800f9b8:	6843      	ldr	r3, [r0, #4]
 800f9ba:	0c3f      	lsrs	r7, r7, #16
 800f9bc:	4367      	muls	r7, r4
 800f9be:	b29b      	uxth	r3, r3
 800f9c0:	0c09      	lsrs	r1, r1, #16
 800f9c2:	18fb      	adds	r3, r7, r3
 800f9c4:	185b      	adds	r3, r3, r1
 800f9c6:	0c19      	lsrs	r1, r3, #16
 800f9c8:	9103      	str	r1, [sp, #12]
 800f9ca:	9902      	ldr	r1, [sp, #8]
 800f9cc:	3004      	adds	r0, #4
 800f9ce:	42b1      	cmp	r1, r6
 800f9d0:	d8e5      	bhi.n	800f99e <__multiply+0x106>
 800f9d2:	9905      	ldr	r1, [sp, #20]
 800f9d4:	5053      	str	r3, [r2, r1]
 800f9d6:	3504      	adds	r5, #4
 800f9d8:	3204      	adds	r2, #4
 800f9da:	e7a0      	b.n	800f91e <__multiply+0x86>
 800f9dc:	9b00      	ldr	r3, [sp, #0]
 800f9de:	3b01      	subs	r3, #1
 800f9e0:	9300      	str	r3, [sp, #0]
 800f9e2:	e79f      	b.n	800f924 <__multiply+0x8c>
 800f9e4:	08011dde 	.word	0x08011dde
 800f9e8:	08011e66 	.word	0x08011e66

0800f9ec <__pow5mult>:
 800f9ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f9ee:	2303      	movs	r3, #3
 800f9f0:	0015      	movs	r5, r2
 800f9f2:	0007      	movs	r7, r0
 800f9f4:	000e      	movs	r6, r1
 800f9f6:	401a      	ands	r2, r3
 800f9f8:	421d      	tst	r5, r3
 800f9fa:	d008      	beq.n	800fa0e <__pow5mult+0x22>
 800f9fc:	4925      	ldr	r1, [pc, #148]	@ (800fa94 <__pow5mult+0xa8>)
 800f9fe:	3a01      	subs	r2, #1
 800fa00:	0092      	lsls	r2, r2, #2
 800fa02:	5852      	ldr	r2, [r2, r1]
 800fa04:	2300      	movs	r3, #0
 800fa06:	0031      	movs	r1, r6
 800fa08:	f7ff fe4e 	bl	800f6a8 <__multadd>
 800fa0c:	0006      	movs	r6, r0
 800fa0e:	10ad      	asrs	r5, r5, #2
 800fa10:	d03d      	beq.n	800fa8e <__pow5mult+0xa2>
 800fa12:	69fc      	ldr	r4, [r7, #28]
 800fa14:	2c00      	cmp	r4, #0
 800fa16:	d10f      	bne.n	800fa38 <__pow5mult+0x4c>
 800fa18:	2010      	movs	r0, #16
 800fa1a:	f001 f899 	bl	8010b50 <malloc>
 800fa1e:	1e02      	subs	r2, r0, #0
 800fa20:	61f8      	str	r0, [r7, #28]
 800fa22:	d105      	bne.n	800fa30 <__pow5mult+0x44>
 800fa24:	21b4      	movs	r1, #180	@ 0xb4
 800fa26:	4b1c      	ldr	r3, [pc, #112]	@ (800fa98 <__pow5mult+0xac>)
 800fa28:	481c      	ldr	r0, [pc, #112]	@ (800fa9c <__pow5mult+0xb0>)
 800fa2a:	31ff      	adds	r1, #255	@ 0xff
 800fa2c:	f001 f844 	bl	8010ab8 <__assert_func>
 800fa30:	6044      	str	r4, [r0, #4]
 800fa32:	6084      	str	r4, [r0, #8]
 800fa34:	6004      	str	r4, [r0, #0]
 800fa36:	60c4      	str	r4, [r0, #12]
 800fa38:	69fb      	ldr	r3, [r7, #28]
 800fa3a:	689c      	ldr	r4, [r3, #8]
 800fa3c:	9301      	str	r3, [sp, #4]
 800fa3e:	2c00      	cmp	r4, #0
 800fa40:	d108      	bne.n	800fa54 <__pow5mult+0x68>
 800fa42:	0038      	movs	r0, r7
 800fa44:	4916      	ldr	r1, [pc, #88]	@ (800faa0 <__pow5mult+0xb4>)
 800fa46:	f7ff ff0f 	bl	800f868 <__i2b>
 800fa4a:	9b01      	ldr	r3, [sp, #4]
 800fa4c:	0004      	movs	r4, r0
 800fa4e:	6098      	str	r0, [r3, #8]
 800fa50:	2300      	movs	r3, #0
 800fa52:	6003      	str	r3, [r0, #0]
 800fa54:	2301      	movs	r3, #1
 800fa56:	421d      	tst	r5, r3
 800fa58:	d00a      	beq.n	800fa70 <__pow5mult+0x84>
 800fa5a:	0031      	movs	r1, r6
 800fa5c:	0022      	movs	r2, r4
 800fa5e:	0038      	movs	r0, r7
 800fa60:	f7ff ff1a 	bl	800f898 <__multiply>
 800fa64:	0031      	movs	r1, r6
 800fa66:	9001      	str	r0, [sp, #4]
 800fa68:	0038      	movs	r0, r7
 800fa6a:	f7ff fdf9 	bl	800f660 <_Bfree>
 800fa6e:	9e01      	ldr	r6, [sp, #4]
 800fa70:	106d      	asrs	r5, r5, #1
 800fa72:	d00c      	beq.n	800fa8e <__pow5mult+0xa2>
 800fa74:	6820      	ldr	r0, [r4, #0]
 800fa76:	2800      	cmp	r0, #0
 800fa78:	d107      	bne.n	800fa8a <__pow5mult+0x9e>
 800fa7a:	0022      	movs	r2, r4
 800fa7c:	0021      	movs	r1, r4
 800fa7e:	0038      	movs	r0, r7
 800fa80:	f7ff ff0a 	bl	800f898 <__multiply>
 800fa84:	2300      	movs	r3, #0
 800fa86:	6020      	str	r0, [r4, #0]
 800fa88:	6003      	str	r3, [r0, #0]
 800fa8a:	0004      	movs	r4, r0
 800fa8c:	e7e2      	b.n	800fa54 <__pow5mult+0x68>
 800fa8e:	0030      	movs	r0, r6
 800fa90:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800fa92:	46c0      	nop			@ (mov r8, r8)
 800fa94:	08012084 	.word	0x08012084
 800fa98:	08011e4f 	.word	0x08011e4f
 800fa9c:	08011e66 	.word	0x08011e66
 800faa0:	00000271 	.word	0x00000271

0800faa4 <__lshift>:
 800faa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800faa6:	000c      	movs	r4, r1
 800faa8:	0016      	movs	r6, r2
 800faaa:	6923      	ldr	r3, [r4, #16]
 800faac:	1157      	asrs	r7, r2, #5
 800faae:	b085      	sub	sp, #20
 800fab0:	18fb      	adds	r3, r7, r3
 800fab2:	9301      	str	r3, [sp, #4]
 800fab4:	3301      	adds	r3, #1
 800fab6:	9300      	str	r3, [sp, #0]
 800fab8:	6849      	ldr	r1, [r1, #4]
 800faba:	68a3      	ldr	r3, [r4, #8]
 800fabc:	9002      	str	r0, [sp, #8]
 800fabe:	9a00      	ldr	r2, [sp, #0]
 800fac0:	4293      	cmp	r3, r2
 800fac2:	db10      	blt.n	800fae6 <__lshift+0x42>
 800fac4:	9802      	ldr	r0, [sp, #8]
 800fac6:	f7ff fd87 	bl	800f5d8 <_Balloc>
 800faca:	2300      	movs	r3, #0
 800facc:	0001      	movs	r1, r0
 800face:	0005      	movs	r5, r0
 800fad0:	001a      	movs	r2, r3
 800fad2:	3114      	adds	r1, #20
 800fad4:	4298      	cmp	r0, r3
 800fad6:	d10c      	bne.n	800faf2 <__lshift+0x4e>
 800fad8:	21ef      	movs	r1, #239	@ 0xef
 800fada:	002a      	movs	r2, r5
 800fadc:	4b25      	ldr	r3, [pc, #148]	@ (800fb74 <__lshift+0xd0>)
 800fade:	4826      	ldr	r0, [pc, #152]	@ (800fb78 <__lshift+0xd4>)
 800fae0:	0049      	lsls	r1, r1, #1
 800fae2:	f000 ffe9 	bl	8010ab8 <__assert_func>
 800fae6:	3101      	adds	r1, #1
 800fae8:	005b      	lsls	r3, r3, #1
 800faea:	e7e8      	b.n	800fabe <__lshift+0x1a>
 800faec:	0098      	lsls	r0, r3, #2
 800faee:	500a      	str	r2, [r1, r0]
 800faf0:	3301      	adds	r3, #1
 800faf2:	42bb      	cmp	r3, r7
 800faf4:	dbfa      	blt.n	800faec <__lshift+0x48>
 800faf6:	43fb      	mvns	r3, r7
 800faf8:	17db      	asrs	r3, r3, #31
 800fafa:	401f      	ands	r7, r3
 800fafc:	00bf      	lsls	r7, r7, #2
 800fafe:	0023      	movs	r3, r4
 800fb00:	201f      	movs	r0, #31
 800fb02:	19c9      	adds	r1, r1, r7
 800fb04:	0037      	movs	r7, r6
 800fb06:	6922      	ldr	r2, [r4, #16]
 800fb08:	3314      	adds	r3, #20
 800fb0a:	0092      	lsls	r2, r2, #2
 800fb0c:	189a      	adds	r2, r3, r2
 800fb0e:	4007      	ands	r7, r0
 800fb10:	4206      	tst	r6, r0
 800fb12:	d029      	beq.n	800fb68 <__lshift+0xc4>
 800fb14:	3001      	adds	r0, #1
 800fb16:	1bc0      	subs	r0, r0, r7
 800fb18:	9003      	str	r0, [sp, #12]
 800fb1a:	468c      	mov	ip, r1
 800fb1c:	2000      	movs	r0, #0
 800fb1e:	681e      	ldr	r6, [r3, #0]
 800fb20:	40be      	lsls	r6, r7
 800fb22:	4306      	orrs	r6, r0
 800fb24:	4660      	mov	r0, ip
 800fb26:	c040      	stmia	r0!, {r6}
 800fb28:	4684      	mov	ip, r0
 800fb2a:	9e03      	ldr	r6, [sp, #12]
 800fb2c:	cb01      	ldmia	r3!, {r0}
 800fb2e:	40f0      	lsrs	r0, r6
 800fb30:	429a      	cmp	r2, r3
 800fb32:	d8f4      	bhi.n	800fb1e <__lshift+0x7a>
 800fb34:	0026      	movs	r6, r4
 800fb36:	3615      	adds	r6, #21
 800fb38:	2304      	movs	r3, #4
 800fb3a:	42b2      	cmp	r2, r6
 800fb3c:	d304      	bcc.n	800fb48 <__lshift+0xa4>
 800fb3e:	1b13      	subs	r3, r2, r4
 800fb40:	3b15      	subs	r3, #21
 800fb42:	089b      	lsrs	r3, r3, #2
 800fb44:	3301      	adds	r3, #1
 800fb46:	009b      	lsls	r3, r3, #2
 800fb48:	50c8      	str	r0, [r1, r3]
 800fb4a:	2800      	cmp	r0, #0
 800fb4c:	d002      	beq.n	800fb54 <__lshift+0xb0>
 800fb4e:	9b01      	ldr	r3, [sp, #4]
 800fb50:	3302      	adds	r3, #2
 800fb52:	9300      	str	r3, [sp, #0]
 800fb54:	9b00      	ldr	r3, [sp, #0]
 800fb56:	9802      	ldr	r0, [sp, #8]
 800fb58:	3b01      	subs	r3, #1
 800fb5a:	0021      	movs	r1, r4
 800fb5c:	612b      	str	r3, [r5, #16]
 800fb5e:	f7ff fd7f 	bl	800f660 <_Bfree>
 800fb62:	0028      	movs	r0, r5
 800fb64:	b005      	add	sp, #20
 800fb66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb68:	cb01      	ldmia	r3!, {r0}
 800fb6a:	c101      	stmia	r1!, {r0}
 800fb6c:	429a      	cmp	r2, r3
 800fb6e:	d8fb      	bhi.n	800fb68 <__lshift+0xc4>
 800fb70:	e7f0      	b.n	800fb54 <__lshift+0xb0>
 800fb72:	46c0      	nop			@ (mov r8, r8)
 800fb74:	08011dde 	.word	0x08011dde
 800fb78:	08011e66 	.word	0x08011e66

0800fb7c <__mcmp>:
 800fb7c:	b530      	push	{r4, r5, lr}
 800fb7e:	690b      	ldr	r3, [r1, #16]
 800fb80:	6904      	ldr	r4, [r0, #16]
 800fb82:	0002      	movs	r2, r0
 800fb84:	1ae0      	subs	r0, r4, r3
 800fb86:	429c      	cmp	r4, r3
 800fb88:	d10f      	bne.n	800fbaa <__mcmp+0x2e>
 800fb8a:	3214      	adds	r2, #20
 800fb8c:	009b      	lsls	r3, r3, #2
 800fb8e:	3114      	adds	r1, #20
 800fb90:	0014      	movs	r4, r2
 800fb92:	18c9      	adds	r1, r1, r3
 800fb94:	18d2      	adds	r2, r2, r3
 800fb96:	3a04      	subs	r2, #4
 800fb98:	3904      	subs	r1, #4
 800fb9a:	6815      	ldr	r5, [r2, #0]
 800fb9c:	680b      	ldr	r3, [r1, #0]
 800fb9e:	429d      	cmp	r5, r3
 800fba0:	d004      	beq.n	800fbac <__mcmp+0x30>
 800fba2:	2001      	movs	r0, #1
 800fba4:	429d      	cmp	r5, r3
 800fba6:	d200      	bcs.n	800fbaa <__mcmp+0x2e>
 800fba8:	3802      	subs	r0, #2
 800fbaa:	bd30      	pop	{r4, r5, pc}
 800fbac:	4294      	cmp	r4, r2
 800fbae:	d3f2      	bcc.n	800fb96 <__mcmp+0x1a>
 800fbb0:	e7fb      	b.n	800fbaa <__mcmp+0x2e>
	...

0800fbb4 <__mdiff>:
 800fbb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fbb6:	000c      	movs	r4, r1
 800fbb8:	b087      	sub	sp, #28
 800fbba:	9000      	str	r0, [sp, #0]
 800fbbc:	0011      	movs	r1, r2
 800fbbe:	0020      	movs	r0, r4
 800fbc0:	0017      	movs	r7, r2
 800fbc2:	f7ff ffdb 	bl	800fb7c <__mcmp>
 800fbc6:	1e05      	subs	r5, r0, #0
 800fbc8:	d110      	bne.n	800fbec <__mdiff+0x38>
 800fbca:	0001      	movs	r1, r0
 800fbcc:	9800      	ldr	r0, [sp, #0]
 800fbce:	f7ff fd03 	bl	800f5d8 <_Balloc>
 800fbd2:	1e02      	subs	r2, r0, #0
 800fbd4:	d104      	bne.n	800fbe0 <__mdiff+0x2c>
 800fbd6:	4b40      	ldr	r3, [pc, #256]	@ (800fcd8 <__mdiff+0x124>)
 800fbd8:	4840      	ldr	r0, [pc, #256]	@ (800fcdc <__mdiff+0x128>)
 800fbda:	4941      	ldr	r1, [pc, #260]	@ (800fce0 <__mdiff+0x12c>)
 800fbdc:	f000 ff6c 	bl	8010ab8 <__assert_func>
 800fbe0:	2301      	movs	r3, #1
 800fbe2:	6145      	str	r5, [r0, #20]
 800fbe4:	6103      	str	r3, [r0, #16]
 800fbe6:	0010      	movs	r0, r2
 800fbe8:	b007      	add	sp, #28
 800fbea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fbec:	2600      	movs	r6, #0
 800fbee:	42b0      	cmp	r0, r6
 800fbf0:	da03      	bge.n	800fbfa <__mdiff+0x46>
 800fbf2:	0023      	movs	r3, r4
 800fbf4:	003c      	movs	r4, r7
 800fbf6:	001f      	movs	r7, r3
 800fbf8:	3601      	adds	r6, #1
 800fbfa:	6861      	ldr	r1, [r4, #4]
 800fbfc:	9800      	ldr	r0, [sp, #0]
 800fbfe:	f7ff fceb 	bl	800f5d8 <_Balloc>
 800fc02:	1e02      	subs	r2, r0, #0
 800fc04:	d103      	bne.n	800fc0e <__mdiff+0x5a>
 800fc06:	4b34      	ldr	r3, [pc, #208]	@ (800fcd8 <__mdiff+0x124>)
 800fc08:	4834      	ldr	r0, [pc, #208]	@ (800fcdc <__mdiff+0x128>)
 800fc0a:	4936      	ldr	r1, [pc, #216]	@ (800fce4 <__mdiff+0x130>)
 800fc0c:	e7e6      	b.n	800fbdc <__mdiff+0x28>
 800fc0e:	6923      	ldr	r3, [r4, #16]
 800fc10:	3414      	adds	r4, #20
 800fc12:	9300      	str	r3, [sp, #0]
 800fc14:	009b      	lsls	r3, r3, #2
 800fc16:	18e3      	adds	r3, r4, r3
 800fc18:	0021      	movs	r1, r4
 800fc1a:	9401      	str	r4, [sp, #4]
 800fc1c:	003c      	movs	r4, r7
 800fc1e:	9302      	str	r3, [sp, #8]
 800fc20:	693b      	ldr	r3, [r7, #16]
 800fc22:	3414      	adds	r4, #20
 800fc24:	009b      	lsls	r3, r3, #2
 800fc26:	18e3      	adds	r3, r4, r3
 800fc28:	9303      	str	r3, [sp, #12]
 800fc2a:	0003      	movs	r3, r0
 800fc2c:	60c6      	str	r6, [r0, #12]
 800fc2e:	468c      	mov	ip, r1
 800fc30:	2000      	movs	r0, #0
 800fc32:	3314      	adds	r3, #20
 800fc34:	9304      	str	r3, [sp, #16]
 800fc36:	9305      	str	r3, [sp, #20]
 800fc38:	4663      	mov	r3, ip
 800fc3a:	cb20      	ldmia	r3!, {r5}
 800fc3c:	b2a9      	uxth	r1, r5
 800fc3e:	000e      	movs	r6, r1
 800fc40:	469c      	mov	ip, r3
 800fc42:	cc08      	ldmia	r4!, {r3}
 800fc44:	0c2d      	lsrs	r5, r5, #16
 800fc46:	b299      	uxth	r1, r3
 800fc48:	1a71      	subs	r1, r6, r1
 800fc4a:	1809      	adds	r1, r1, r0
 800fc4c:	0c1b      	lsrs	r3, r3, #16
 800fc4e:	1408      	asrs	r0, r1, #16
 800fc50:	1aeb      	subs	r3, r5, r3
 800fc52:	181b      	adds	r3, r3, r0
 800fc54:	1418      	asrs	r0, r3, #16
 800fc56:	b289      	uxth	r1, r1
 800fc58:	041b      	lsls	r3, r3, #16
 800fc5a:	4319      	orrs	r1, r3
 800fc5c:	9b05      	ldr	r3, [sp, #20]
 800fc5e:	c302      	stmia	r3!, {r1}
 800fc60:	9305      	str	r3, [sp, #20]
 800fc62:	9b03      	ldr	r3, [sp, #12]
 800fc64:	42a3      	cmp	r3, r4
 800fc66:	d8e7      	bhi.n	800fc38 <__mdiff+0x84>
 800fc68:	0039      	movs	r1, r7
 800fc6a:	9c03      	ldr	r4, [sp, #12]
 800fc6c:	3115      	adds	r1, #21
 800fc6e:	2304      	movs	r3, #4
 800fc70:	428c      	cmp	r4, r1
 800fc72:	d304      	bcc.n	800fc7e <__mdiff+0xca>
 800fc74:	1be3      	subs	r3, r4, r7
 800fc76:	3b15      	subs	r3, #21
 800fc78:	089b      	lsrs	r3, r3, #2
 800fc7a:	3301      	adds	r3, #1
 800fc7c:	009b      	lsls	r3, r3, #2
 800fc7e:	9901      	ldr	r1, [sp, #4]
 800fc80:	18cd      	adds	r5, r1, r3
 800fc82:	9904      	ldr	r1, [sp, #16]
 800fc84:	002e      	movs	r6, r5
 800fc86:	18cb      	adds	r3, r1, r3
 800fc88:	001f      	movs	r7, r3
 800fc8a:	9902      	ldr	r1, [sp, #8]
 800fc8c:	428e      	cmp	r6, r1
 800fc8e:	d311      	bcc.n	800fcb4 <__mdiff+0x100>
 800fc90:	9c02      	ldr	r4, [sp, #8]
 800fc92:	1ee9      	subs	r1, r5, #3
 800fc94:	2000      	movs	r0, #0
 800fc96:	428c      	cmp	r4, r1
 800fc98:	d304      	bcc.n	800fca4 <__mdiff+0xf0>
 800fc9a:	0021      	movs	r1, r4
 800fc9c:	3103      	adds	r1, #3
 800fc9e:	1b49      	subs	r1, r1, r5
 800fca0:	0889      	lsrs	r1, r1, #2
 800fca2:	0088      	lsls	r0, r1, #2
 800fca4:	181b      	adds	r3, r3, r0
 800fca6:	3b04      	subs	r3, #4
 800fca8:	6819      	ldr	r1, [r3, #0]
 800fcaa:	2900      	cmp	r1, #0
 800fcac:	d010      	beq.n	800fcd0 <__mdiff+0x11c>
 800fcae:	9b00      	ldr	r3, [sp, #0]
 800fcb0:	6113      	str	r3, [r2, #16]
 800fcb2:	e798      	b.n	800fbe6 <__mdiff+0x32>
 800fcb4:	4684      	mov	ip, r0
 800fcb6:	ce02      	ldmia	r6!, {r1}
 800fcb8:	b288      	uxth	r0, r1
 800fcba:	4460      	add	r0, ip
 800fcbc:	1400      	asrs	r0, r0, #16
 800fcbe:	0c0c      	lsrs	r4, r1, #16
 800fcc0:	1904      	adds	r4, r0, r4
 800fcc2:	4461      	add	r1, ip
 800fcc4:	1420      	asrs	r0, r4, #16
 800fcc6:	b289      	uxth	r1, r1
 800fcc8:	0424      	lsls	r4, r4, #16
 800fcca:	4321      	orrs	r1, r4
 800fccc:	c702      	stmia	r7!, {r1}
 800fcce:	e7dc      	b.n	800fc8a <__mdiff+0xd6>
 800fcd0:	9900      	ldr	r1, [sp, #0]
 800fcd2:	3901      	subs	r1, #1
 800fcd4:	9100      	str	r1, [sp, #0]
 800fcd6:	e7e6      	b.n	800fca6 <__mdiff+0xf2>
 800fcd8:	08011dde 	.word	0x08011dde
 800fcdc:	08011e66 	.word	0x08011e66
 800fce0:	00000237 	.word	0x00000237
 800fce4:	00000245 	.word	0x00000245

0800fce8 <__ulp>:
 800fce8:	b510      	push	{r4, lr}
 800fcea:	2400      	movs	r4, #0
 800fcec:	4b0c      	ldr	r3, [pc, #48]	@ (800fd20 <__ulp+0x38>)
 800fcee:	4a0d      	ldr	r2, [pc, #52]	@ (800fd24 <__ulp+0x3c>)
 800fcf0:	400b      	ands	r3, r1
 800fcf2:	189b      	adds	r3, r3, r2
 800fcf4:	42a3      	cmp	r3, r4
 800fcf6:	dc06      	bgt.n	800fd06 <__ulp+0x1e>
 800fcf8:	425b      	negs	r3, r3
 800fcfa:	151a      	asrs	r2, r3, #20
 800fcfc:	2a13      	cmp	r2, #19
 800fcfe:	dc05      	bgt.n	800fd0c <__ulp+0x24>
 800fd00:	2380      	movs	r3, #128	@ 0x80
 800fd02:	031b      	lsls	r3, r3, #12
 800fd04:	4113      	asrs	r3, r2
 800fd06:	0019      	movs	r1, r3
 800fd08:	0020      	movs	r0, r4
 800fd0a:	bd10      	pop	{r4, pc}
 800fd0c:	3a14      	subs	r2, #20
 800fd0e:	2401      	movs	r4, #1
 800fd10:	2a1e      	cmp	r2, #30
 800fd12:	dc02      	bgt.n	800fd1a <__ulp+0x32>
 800fd14:	2480      	movs	r4, #128	@ 0x80
 800fd16:	0624      	lsls	r4, r4, #24
 800fd18:	40d4      	lsrs	r4, r2
 800fd1a:	2300      	movs	r3, #0
 800fd1c:	e7f3      	b.n	800fd06 <__ulp+0x1e>
 800fd1e:	46c0      	nop			@ (mov r8, r8)
 800fd20:	7ff00000 	.word	0x7ff00000
 800fd24:	fcc00000 	.word	0xfcc00000

0800fd28 <__b2d>:
 800fd28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fd2a:	0006      	movs	r6, r0
 800fd2c:	6903      	ldr	r3, [r0, #16]
 800fd2e:	3614      	adds	r6, #20
 800fd30:	009b      	lsls	r3, r3, #2
 800fd32:	18f3      	adds	r3, r6, r3
 800fd34:	1f1d      	subs	r5, r3, #4
 800fd36:	682c      	ldr	r4, [r5, #0]
 800fd38:	000f      	movs	r7, r1
 800fd3a:	0020      	movs	r0, r4
 800fd3c:	9301      	str	r3, [sp, #4]
 800fd3e:	f7ff fd43 	bl	800f7c8 <__hi0bits>
 800fd42:	2220      	movs	r2, #32
 800fd44:	1a12      	subs	r2, r2, r0
 800fd46:	603a      	str	r2, [r7, #0]
 800fd48:	0003      	movs	r3, r0
 800fd4a:	4a1c      	ldr	r2, [pc, #112]	@ (800fdbc <__b2d+0x94>)
 800fd4c:	280a      	cmp	r0, #10
 800fd4e:	dc15      	bgt.n	800fd7c <__b2d+0x54>
 800fd50:	210b      	movs	r1, #11
 800fd52:	0027      	movs	r7, r4
 800fd54:	1a09      	subs	r1, r1, r0
 800fd56:	40cf      	lsrs	r7, r1
 800fd58:	433a      	orrs	r2, r7
 800fd5a:	468c      	mov	ip, r1
 800fd5c:	0011      	movs	r1, r2
 800fd5e:	2200      	movs	r2, #0
 800fd60:	42ae      	cmp	r6, r5
 800fd62:	d202      	bcs.n	800fd6a <__b2d+0x42>
 800fd64:	9a01      	ldr	r2, [sp, #4]
 800fd66:	3a08      	subs	r2, #8
 800fd68:	6812      	ldr	r2, [r2, #0]
 800fd6a:	3315      	adds	r3, #21
 800fd6c:	409c      	lsls	r4, r3
 800fd6e:	4663      	mov	r3, ip
 800fd70:	0027      	movs	r7, r4
 800fd72:	40da      	lsrs	r2, r3
 800fd74:	4317      	orrs	r7, r2
 800fd76:	0038      	movs	r0, r7
 800fd78:	b003      	add	sp, #12
 800fd7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd7c:	2700      	movs	r7, #0
 800fd7e:	42ae      	cmp	r6, r5
 800fd80:	d202      	bcs.n	800fd88 <__b2d+0x60>
 800fd82:	9d01      	ldr	r5, [sp, #4]
 800fd84:	3d08      	subs	r5, #8
 800fd86:	682f      	ldr	r7, [r5, #0]
 800fd88:	210b      	movs	r1, #11
 800fd8a:	4249      	negs	r1, r1
 800fd8c:	468c      	mov	ip, r1
 800fd8e:	449c      	add	ip, r3
 800fd90:	2b0b      	cmp	r3, #11
 800fd92:	d010      	beq.n	800fdb6 <__b2d+0x8e>
 800fd94:	4661      	mov	r1, ip
 800fd96:	2320      	movs	r3, #32
 800fd98:	408c      	lsls	r4, r1
 800fd9a:	1a5b      	subs	r3, r3, r1
 800fd9c:	0039      	movs	r1, r7
 800fd9e:	40d9      	lsrs	r1, r3
 800fda0:	430c      	orrs	r4, r1
 800fda2:	4322      	orrs	r2, r4
 800fda4:	0011      	movs	r1, r2
 800fda6:	2200      	movs	r2, #0
 800fda8:	42b5      	cmp	r5, r6
 800fdaa:	d901      	bls.n	800fdb0 <__b2d+0x88>
 800fdac:	3d04      	subs	r5, #4
 800fdae:	682a      	ldr	r2, [r5, #0]
 800fdb0:	4664      	mov	r4, ip
 800fdb2:	40a7      	lsls	r7, r4
 800fdb4:	e7dd      	b.n	800fd72 <__b2d+0x4a>
 800fdb6:	4322      	orrs	r2, r4
 800fdb8:	0011      	movs	r1, r2
 800fdba:	e7dc      	b.n	800fd76 <__b2d+0x4e>
 800fdbc:	3ff00000 	.word	0x3ff00000

0800fdc0 <__d2b>:
 800fdc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fdc2:	2101      	movs	r1, #1
 800fdc4:	0016      	movs	r6, r2
 800fdc6:	001f      	movs	r7, r3
 800fdc8:	f7ff fc06 	bl	800f5d8 <_Balloc>
 800fdcc:	1e04      	subs	r4, r0, #0
 800fdce:	d105      	bne.n	800fddc <__d2b+0x1c>
 800fdd0:	0022      	movs	r2, r4
 800fdd2:	4b25      	ldr	r3, [pc, #148]	@ (800fe68 <__d2b+0xa8>)
 800fdd4:	4825      	ldr	r0, [pc, #148]	@ (800fe6c <__d2b+0xac>)
 800fdd6:	4926      	ldr	r1, [pc, #152]	@ (800fe70 <__d2b+0xb0>)
 800fdd8:	f000 fe6e 	bl	8010ab8 <__assert_func>
 800fddc:	033b      	lsls	r3, r7, #12
 800fdde:	007d      	lsls	r5, r7, #1
 800fde0:	0b1b      	lsrs	r3, r3, #12
 800fde2:	0d6d      	lsrs	r5, r5, #21
 800fde4:	d002      	beq.n	800fdec <__d2b+0x2c>
 800fde6:	2280      	movs	r2, #128	@ 0x80
 800fde8:	0352      	lsls	r2, r2, #13
 800fdea:	4313      	orrs	r3, r2
 800fdec:	9301      	str	r3, [sp, #4]
 800fdee:	2e00      	cmp	r6, #0
 800fdf0:	d025      	beq.n	800fe3e <__d2b+0x7e>
 800fdf2:	4668      	mov	r0, sp
 800fdf4:	9600      	str	r6, [sp, #0]
 800fdf6:	f7ff fd08 	bl	800f80a <__lo0bits>
 800fdfa:	9b01      	ldr	r3, [sp, #4]
 800fdfc:	9900      	ldr	r1, [sp, #0]
 800fdfe:	2800      	cmp	r0, #0
 800fe00:	d01b      	beq.n	800fe3a <__d2b+0x7a>
 800fe02:	2220      	movs	r2, #32
 800fe04:	001e      	movs	r6, r3
 800fe06:	1a12      	subs	r2, r2, r0
 800fe08:	4096      	lsls	r6, r2
 800fe0a:	0032      	movs	r2, r6
 800fe0c:	40c3      	lsrs	r3, r0
 800fe0e:	430a      	orrs	r2, r1
 800fe10:	6162      	str	r2, [r4, #20]
 800fe12:	9301      	str	r3, [sp, #4]
 800fe14:	9e01      	ldr	r6, [sp, #4]
 800fe16:	61a6      	str	r6, [r4, #24]
 800fe18:	1e73      	subs	r3, r6, #1
 800fe1a:	419e      	sbcs	r6, r3
 800fe1c:	3601      	adds	r6, #1
 800fe1e:	6126      	str	r6, [r4, #16]
 800fe20:	2d00      	cmp	r5, #0
 800fe22:	d014      	beq.n	800fe4e <__d2b+0x8e>
 800fe24:	2635      	movs	r6, #53	@ 0x35
 800fe26:	4b13      	ldr	r3, [pc, #76]	@ (800fe74 <__d2b+0xb4>)
 800fe28:	18ed      	adds	r5, r5, r3
 800fe2a:	9b08      	ldr	r3, [sp, #32]
 800fe2c:	182d      	adds	r5, r5, r0
 800fe2e:	601d      	str	r5, [r3, #0]
 800fe30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fe32:	1a36      	subs	r6, r6, r0
 800fe34:	601e      	str	r6, [r3, #0]
 800fe36:	0020      	movs	r0, r4
 800fe38:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800fe3a:	6161      	str	r1, [r4, #20]
 800fe3c:	e7ea      	b.n	800fe14 <__d2b+0x54>
 800fe3e:	a801      	add	r0, sp, #4
 800fe40:	f7ff fce3 	bl	800f80a <__lo0bits>
 800fe44:	9b01      	ldr	r3, [sp, #4]
 800fe46:	2601      	movs	r6, #1
 800fe48:	6163      	str	r3, [r4, #20]
 800fe4a:	3020      	adds	r0, #32
 800fe4c:	e7e7      	b.n	800fe1e <__d2b+0x5e>
 800fe4e:	4b0a      	ldr	r3, [pc, #40]	@ (800fe78 <__d2b+0xb8>)
 800fe50:	18c0      	adds	r0, r0, r3
 800fe52:	9b08      	ldr	r3, [sp, #32]
 800fe54:	6018      	str	r0, [r3, #0]
 800fe56:	4b09      	ldr	r3, [pc, #36]	@ (800fe7c <__d2b+0xbc>)
 800fe58:	18f3      	adds	r3, r6, r3
 800fe5a:	009b      	lsls	r3, r3, #2
 800fe5c:	18e3      	adds	r3, r4, r3
 800fe5e:	6958      	ldr	r0, [r3, #20]
 800fe60:	f7ff fcb2 	bl	800f7c8 <__hi0bits>
 800fe64:	0176      	lsls	r6, r6, #5
 800fe66:	e7e3      	b.n	800fe30 <__d2b+0x70>
 800fe68:	08011dde 	.word	0x08011dde
 800fe6c:	08011e66 	.word	0x08011e66
 800fe70:	0000030f 	.word	0x0000030f
 800fe74:	fffffbcd 	.word	0xfffffbcd
 800fe78:	fffffbce 	.word	0xfffffbce
 800fe7c:	3fffffff 	.word	0x3fffffff

0800fe80 <__ratio>:
 800fe80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fe82:	b087      	sub	sp, #28
 800fe84:	000f      	movs	r7, r1
 800fe86:	a904      	add	r1, sp, #16
 800fe88:	0006      	movs	r6, r0
 800fe8a:	f7ff ff4d 	bl	800fd28 <__b2d>
 800fe8e:	9000      	str	r0, [sp, #0]
 800fe90:	9101      	str	r1, [sp, #4]
 800fe92:	9b00      	ldr	r3, [sp, #0]
 800fe94:	9c01      	ldr	r4, [sp, #4]
 800fe96:	0038      	movs	r0, r7
 800fe98:	a905      	add	r1, sp, #20
 800fe9a:	9302      	str	r3, [sp, #8]
 800fe9c:	9403      	str	r4, [sp, #12]
 800fe9e:	f7ff ff43 	bl	800fd28 <__b2d>
 800fea2:	000d      	movs	r5, r1
 800fea4:	0002      	movs	r2, r0
 800fea6:	000b      	movs	r3, r1
 800fea8:	6930      	ldr	r0, [r6, #16]
 800feaa:	6939      	ldr	r1, [r7, #16]
 800feac:	9e04      	ldr	r6, [sp, #16]
 800feae:	1a40      	subs	r0, r0, r1
 800feb0:	9905      	ldr	r1, [sp, #20]
 800feb2:	0140      	lsls	r0, r0, #5
 800feb4:	1a71      	subs	r1, r6, r1
 800feb6:	1841      	adds	r1, r0, r1
 800feb8:	0508      	lsls	r0, r1, #20
 800feba:	2900      	cmp	r1, #0
 800febc:	dd08      	ble.n	800fed0 <__ratio+0x50>
 800febe:	9901      	ldr	r1, [sp, #4]
 800fec0:	1841      	adds	r1, r0, r1
 800fec2:	9103      	str	r1, [sp, #12]
 800fec4:	9802      	ldr	r0, [sp, #8]
 800fec6:	9903      	ldr	r1, [sp, #12]
 800fec8:	f7f2 f8ca 	bl	8002060 <__aeabi_ddiv>
 800fecc:	b007      	add	sp, #28
 800fece:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fed0:	1a2b      	subs	r3, r5, r0
 800fed2:	e7f7      	b.n	800fec4 <__ratio+0x44>

0800fed4 <__copybits>:
 800fed4:	b570      	push	{r4, r5, r6, lr}
 800fed6:	0014      	movs	r4, r2
 800fed8:	0005      	movs	r5, r0
 800feda:	3901      	subs	r1, #1
 800fedc:	6913      	ldr	r3, [r2, #16]
 800fede:	1149      	asrs	r1, r1, #5
 800fee0:	3101      	adds	r1, #1
 800fee2:	0089      	lsls	r1, r1, #2
 800fee4:	3414      	adds	r4, #20
 800fee6:	009b      	lsls	r3, r3, #2
 800fee8:	1841      	adds	r1, r0, r1
 800feea:	18e3      	adds	r3, r4, r3
 800feec:	42a3      	cmp	r3, r4
 800feee:	d80d      	bhi.n	800ff0c <__copybits+0x38>
 800fef0:	0014      	movs	r4, r2
 800fef2:	3411      	adds	r4, #17
 800fef4:	2500      	movs	r5, #0
 800fef6:	42a3      	cmp	r3, r4
 800fef8:	d303      	bcc.n	800ff02 <__copybits+0x2e>
 800fefa:	1a9b      	subs	r3, r3, r2
 800fefc:	3b11      	subs	r3, #17
 800fefe:	089b      	lsrs	r3, r3, #2
 800ff00:	009d      	lsls	r5, r3, #2
 800ff02:	2300      	movs	r3, #0
 800ff04:	1940      	adds	r0, r0, r5
 800ff06:	4281      	cmp	r1, r0
 800ff08:	d803      	bhi.n	800ff12 <__copybits+0x3e>
 800ff0a:	bd70      	pop	{r4, r5, r6, pc}
 800ff0c:	cc40      	ldmia	r4!, {r6}
 800ff0e:	c540      	stmia	r5!, {r6}
 800ff10:	e7ec      	b.n	800feec <__copybits+0x18>
 800ff12:	c008      	stmia	r0!, {r3}
 800ff14:	e7f7      	b.n	800ff06 <__copybits+0x32>

0800ff16 <__any_on>:
 800ff16:	0002      	movs	r2, r0
 800ff18:	6900      	ldr	r0, [r0, #16]
 800ff1a:	b510      	push	{r4, lr}
 800ff1c:	3214      	adds	r2, #20
 800ff1e:	114b      	asrs	r3, r1, #5
 800ff20:	4298      	cmp	r0, r3
 800ff22:	db13      	blt.n	800ff4c <__any_on+0x36>
 800ff24:	dd0c      	ble.n	800ff40 <__any_on+0x2a>
 800ff26:	241f      	movs	r4, #31
 800ff28:	0008      	movs	r0, r1
 800ff2a:	4020      	ands	r0, r4
 800ff2c:	4221      	tst	r1, r4
 800ff2e:	d007      	beq.n	800ff40 <__any_on+0x2a>
 800ff30:	0099      	lsls	r1, r3, #2
 800ff32:	588c      	ldr	r4, [r1, r2]
 800ff34:	0021      	movs	r1, r4
 800ff36:	40c1      	lsrs	r1, r0
 800ff38:	4081      	lsls	r1, r0
 800ff3a:	2001      	movs	r0, #1
 800ff3c:	428c      	cmp	r4, r1
 800ff3e:	d104      	bne.n	800ff4a <__any_on+0x34>
 800ff40:	009b      	lsls	r3, r3, #2
 800ff42:	18d3      	adds	r3, r2, r3
 800ff44:	4293      	cmp	r3, r2
 800ff46:	d803      	bhi.n	800ff50 <__any_on+0x3a>
 800ff48:	2000      	movs	r0, #0
 800ff4a:	bd10      	pop	{r4, pc}
 800ff4c:	0003      	movs	r3, r0
 800ff4e:	e7f7      	b.n	800ff40 <__any_on+0x2a>
 800ff50:	3b04      	subs	r3, #4
 800ff52:	6819      	ldr	r1, [r3, #0]
 800ff54:	2900      	cmp	r1, #0
 800ff56:	d0f5      	beq.n	800ff44 <__any_on+0x2e>
 800ff58:	2001      	movs	r0, #1
 800ff5a:	e7f6      	b.n	800ff4a <__any_on+0x34>

0800ff5c <__ascii_wctomb>:
 800ff5c:	0003      	movs	r3, r0
 800ff5e:	1e08      	subs	r0, r1, #0
 800ff60:	d005      	beq.n	800ff6e <__ascii_wctomb+0x12>
 800ff62:	2aff      	cmp	r2, #255	@ 0xff
 800ff64:	d904      	bls.n	800ff70 <__ascii_wctomb+0x14>
 800ff66:	228a      	movs	r2, #138	@ 0x8a
 800ff68:	2001      	movs	r0, #1
 800ff6a:	601a      	str	r2, [r3, #0]
 800ff6c:	4240      	negs	r0, r0
 800ff6e:	4770      	bx	lr
 800ff70:	2001      	movs	r0, #1
 800ff72:	700a      	strb	r2, [r1, #0]
 800ff74:	e7fb      	b.n	800ff6e <__ascii_wctomb+0x12>
	...

0800ff78 <__ssputs_r>:
 800ff78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff7a:	688e      	ldr	r6, [r1, #8]
 800ff7c:	b085      	sub	sp, #20
 800ff7e:	001f      	movs	r7, r3
 800ff80:	000c      	movs	r4, r1
 800ff82:	680b      	ldr	r3, [r1, #0]
 800ff84:	9002      	str	r0, [sp, #8]
 800ff86:	9203      	str	r2, [sp, #12]
 800ff88:	42be      	cmp	r6, r7
 800ff8a:	d830      	bhi.n	800ffee <__ssputs_r+0x76>
 800ff8c:	210c      	movs	r1, #12
 800ff8e:	5e62      	ldrsh	r2, [r4, r1]
 800ff90:	2190      	movs	r1, #144	@ 0x90
 800ff92:	00c9      	lsls	r1, r1, #3
 800ff94:	420a      	tst	r2, r1
 800ff96:	d028      	beq.n	800ffea <__ssputs_r+0x72>
 800ff98:	2003      	movs	r0, #3
 800ff9a:	6921      	ldr	r1, [r4, #16]
 800ff9c:	1a5b      	subs	r3, r3, r1
 800ff9e:	9301      	str	r3, [sp, #4]
 800ffa0:	6963      	ldr	r3, [r4, #20]
 800ffa2:	4343      	muls	r3, r0
 800ffa4:	9801      	ldr	r0, [sp, #4]
 800ffa6:	0fdd      	lsrs	r5, r3, #31
 800ffa8:	18ed      	adds	r5, r5, r3
 800ffaa:	1c7b      	adds	r3, r7, #1
 800ffac:	181b      	adds	r3, r3, r0
 800ffae:	106d      	asrs	r5, r5, #1
 800ffb0:	42ab      	cmp	r3, r5
 800ffb2:	d900      	bls.n	800ffb6 <__ssputs_r+0x3e>
 800ffb4:	001d      	movs	r5, r3
 800ffb6:	0552      	lsls	r2, r2, #21
 800ffb8:	d528      	bpl.n	801000c <__ssputs_r+0x94>
 800ffba:	0029      	movs	r1, r5
 800ffbc:	9802      	ldr	r0, [sp, #8]
 800ffbe:	f7ff fa69 	bl	800f494 <_malloc_r>
 800ffc2:	1e06      	subs	r6, r0, #0
 800ffc4:	d02c      	beq.n	8010020 <__ssputs_r+0xa8>
 800ffc6:	9a01      	ldr	r2, [sp, #4]
 800ffc8:	6921      	ldr	r1, [r4, #16]
 800ffca:	f7fe fe8e 	bl	800ecea <memcpy>
 800ffce:	89a2      	ldrh	r2, [r4, #12]
 800ffd0:	4b18      	ldr	r3, [pc, #96]	@ (8010034 <__ssputs_r+0xbc>)
 800ffd2:	401a      	ands	r2, r3
 800ffd4:	2380      	movs	r3, #128	@ 0x80
 800ffd6:	4313      	orrs	r3, r2
 800ffd8:	81a3      	strh	r3, [r4, #12]
 800ffda:	9b01      	ldr	r3, [sp, #4]
 800ffdc:	6126      	str	r6, [r4, #16]
 800ffde:	18f6      	adds	r6, r6, r3
 800ffe0:	6026      	str	r6, [r4, #0]
 800ffe2:	003e      	movs	r6, r7
 800ffe4:	6165      	str	r5, [r4, #20]
 800ffe6:	1aed      	subs	r5, r5, r3
 800ffe8:	60a5      	str	r5, [r4, #8]
 800ffea:	42be      	cmp	r6, r7
 800ffec:	d900      	bls.n	800fff0 <__ssputs_r+0x78>
 800ffee:	003e      	movs	r6, r7
 800fff0:	0032      	movs	r2, r6
 800fff2:	9903      	ldr	r1, [sp, #12]
 800fff4:	6820      	ldr	r0, [r4, #0]
 800fff6:	f000 fd2f 	bl	8010a58 <memmove>
 800fffa:	2000      	movs	r0, #0
 800fffc:	68a3      	ldr	r3, [r4, #8]
 800fffe:	1b9b      	subs	r3, r3, r6
 8010000:	60a3      	str	r3, [r4, #8]
 8010002:	6823      	ldr	r3, [r4, #0]
 8010004:	199b      	adds	r3, r3, r6
 8010006:	6023      	str	r3, [r4, #0]
 8010008:	b005      	add	sp, #20
 801000a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801000c:	002a      	movs	r2, r5
 801000e:	9802      	ldr	r0, [sp, #8]
 8010010:	f000 fda8 	bl	8010b64 <_realloc_r>
 8010014:	1e06      	subs	r6, r0, #0
 8010016:	d1e0      	bne.n	800ffda <__ssputs_r+0x62>
 8010018:	6921      	ldr	r1, [r4, #16]
 801001a:	9802      	ldr	r0, [sp, #8]
 801001c:	f7fe fe74 	bl	800ed08 <_free_r>
 8010020:	230c      	movs	r3, #12
 8010022:	2001      	movs	r0, #1
 8010024:	9a02      	ldr	r2, [sp, #8]
 8010026:	4240      	negs	r0, r0
 8010028:	6013      	str	r3, [r2, #0]
 801002a:	89a2      	ldrh	r2, [r4, #12]
 801002c:	3334      	adds	r3, #52	@ 0x34
 801002e:	4313      	orrs	r3, r2
 8010030:	81a3      	strh	r3, [r4, #12]
 8010032:	e7e9      	b.n	8010008 <__ssputs_r+0x90>
 8010034:	fffffb7f 	.word	0xfffffb7f

08010038 <_svfiprintf_r>:
 8010038:	b5f0      	push	{r4, r5, r6, r7, lr}
 801003a:	b0a1      	sub	sp, #132	@ 0x84
 801003c:	9003      	str	r0, [sp, #12]
 801003e:	001d      	movs	r5, r3
 8010040:	898b      	ldrh	r3, [r1, #12]
 8010042:	000f      	movs	r7, r1
 8010044:	0016      	movs	r6, r2
 8010046:	061b      	lsls	r3, r3, #24
 8010048:	d511      	bpl.n	801006e <_svfiprintf_r+0x36>
 801004a:	690b      	ldr	r3, [r1, #16]
 801004c:	2b00      	cmp	r3, #0
 801004e:	d10e      	bne.n	801006e <_svfiprintf_r+0x36>
 8010050:	2140      	movs	r1, #64	@ 0x40
 8010052:	f7ff fa1f 	bl	800f494 <_malloc_r>
 8010056:	6038      	str	r0, [r7, #0]
 8010058:	6138      	str	r0, [r7, #16]
 801005a:	2800      	cmp	r0, #0
 801005c:	d105      	bne.n	801006a <_svfiprintf_r+0x32>
 801005e:	230c      	movs	r3, #12
 8010060:	9a03      	ldr	r2, [sp, #12]
 8010062:	6013      	str	r3, [r2, #0]
 8010064:	2001      	movs	r0, #1
 8010066:	4240      	negs	r0, r0
 8010068:	e0cf      	b.n	801020a <_svfiprintf_r+0x1d2>
 801006a:	2340      	movs	r3, #64	@ 0x40
 801006c:	617b      	str	r3, [r7, #20]
 801006e:	2300      	movs	r3, #0
 8010070:	ac08      	add	r4, sp, #32
 8010072:	6163      	str	r3, [r4, #20]
 8010074:	3320      	adds	r3, #32
 8010076:	7663      	strb	r3, [r4, #25]
 8010078:	3310      	adds	r3, #16
 801007a:	76a3      	strb	r3, [r4, #26]
 801007c:	9507      	str	r5, [sp, #28]
 801007e:	0035      	movs	r5, r6
 8010080:	782b      	ldrb	r3, [r5, #0]
 8010082:	2b00      	cmp	r3, #0
 8010084:	d001      	beq.n	801008a <_svfiprintf_r+0x52>
 8010086:	2b25      	cmp	r3, #37	@ 0x25
 8010088:	d148      	bne.n	801011c <_svfiprintf_r+0xe4>
 801008a:	1bab      	subs	r3, r5, r6
 801008c:	9305      	str	r3, [sp, #20]
 801008e:	42b5      	cmp	r5, r6
 8010090:	d00b      	beq.n	80100aa <_svfiprintf_r+0x72>
 8010092:	0032      	movs	r2, r6
 8010094:	0039      	movs	r1, r7
 8010096:	9803      	ldr	r0, [sp, #12]
 8010098:	f7ff ff6e 	bl	800ff78 <__ssputs_r>
 801009c:	3001      	adds	r0, #1
 801009e:	d100      	bne.n	80100a2 <_svfiprintf_r+0x6a>
 80100a0:	e0ae      	b.n	8010200 <_svfiprintf_r+0x1c8>
 80100a2:	6963      	ldr	r3, [r4, #20]
 80100a4:	9a05      	ldr	r2, [sp, #20]
 80100a6:	189b      	adds	r3, r3, r2
 80100a8:	6163      	str	r3, [r4, #20]
 80100aa:	782b      	ldrb	r3, [r5, #0]
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d100      	bne.n	80100b2 <_svfiprintf_r+0x7a>
 80100b0:	e0a6      	b.n	8010200 <_svfiprintf_r+0x1c8>
 80100b2:	2201      	movs	r2, #1
 80100b4:	2300      	movs	r3, #0
 80100b6:	4252      	negs	r2, r2
 80100b8:	6062      	str	r2, [r4, #4]
 80100ba:	a904      	add	r1, sp, #16
 80100bc:	3254      	adds	r2, #84	@ 0x54
 80100be:	1852      	adds	r2, r2, r1
 80100c0:	1c6e      	adds	r6, r5, #1
 80100c2:	6023      	str	r3, [r4, #0]
 80100c4:	60e3      	str	r3, [r4, #12]
 80100c6:	60a3      	str	r3, [r4, #8]
 80100c8:	7013      	strb	r3, [r2, #0]
 80100ca:	65a3      	str	r3, [r4, #88]	@ 0x58
 80100cc:	4b54      	ldr	r3, [pc, #336]	@ (8010220 <_svfiprintf_r+0x1e8>)
 80100ce:	2205      	movs	r2, #5
 80100d0:	0018      	movs	r0, r3
 80100d2:	7831      	ldrb	r1, [r6, #0]
 80100d4:	9305      	str	r3, [sp, #20]
 80100d6:	f000 fce3 	bl	8010aa0 <memchr>
 80100da:	1c75      	adds	r5, r6, #1
 80100dc:	2800      	cmp	r0, #0
 80100de:	d11f      	bne.n	8010120 <_svfiprintf_r+0xe8>
 80100e0:	6822      	ldr	r2, [r4, #0]
 80100e2:	06d3      	lsls	r3, r2, #27
 80100e4:	d504      	bpl.n	80100f0 <_svfiprintf_r+0xb8>
 80100e6:	2353      	movs	r3, #83	@ 0x53
 80100e8:	a904      	add	r1, sp, #16
 80100ea:	185b      	adds	r3, r3, r1
 80100ec:	2120      	movs	r1, #32
 80100ee:	7019      	strb	r1, [r3, #0]
 80100f0:	0713      	lsls	r3, r2, #28
 80100f2:	d504      	bpl.n	80100fe <_svfiprintf_r+0xc6>
 80100f4:	2353      	movs	r3, #83	@ 0x53
 80100f6:	a904      	add	r1, sp, #16
 80100f8:	185b      	adds	r3, r3, r1
 80100fa:	212b      	movs	r1, #43	@ 0x2b
 80100fc:	7019      	strb	r1, [r3, #0]
 80100fe:	7833      	ldrb	r3, [r6, #0]
 8010100:	2b2a      	cmp	r3, #42	@ 0x2a
 8010102:	d016      	beq.n	8010132 <_svfiprintf_r+0xfa>
 8010104:	0035      	movs	r5, r6
 8010106:	2100      	movs	r1, #0
 8010108:	200a      	movs	r0, #10
 801010a:	68e3      	ldr	r3, [r4, #12]
 801010c:	782a      	ldrb	r2, [r5, #0]
 801010e:	1c6e      	adds	r6, r5, #1
 8010110:	3a30      	subs	r2, #48	@ 0x30
 8010112:	2a09      	cmp	r2, #9
 8010114:	d950      	bls.n	80101b8 <_svfiprintf_r+0x180>
 8010116:	2900      	cmp	r1, #0
 8010118:	d111      	bne.n	801013e <_svfiprintf_r+0x106>
 801011a:	e017      	b.n	801014c <_svfiprintf_r+0x114>
 801011c:	3501      	adds	r5, #1
 801011e:	e7af      	b.n	8010080 <_svfiprintf_r+0x48>
 8010120:	9b05      	ldr	r3, [sp, #20]
 8010122:	6822      	ldr	r2, [r4, #0]
 8010124:	1ac0      	subs	r0, r0, r3
 8010126:	2301      	movs	r3, #1
 8010128:	4083      	lsls	r3, r0
 801012a:	4313      	orrs	r3, r2
 801012c:	002e      	movs	r6, r5
 801012e:	6023      	str	r3, [r4, #0]
 8010130:	e7cc      	b.n	80100cc <_svfiprintf_r+0x94>
 8010132:	9b07      	ldr	r3, [sp, #28]
 8010134:	1d19      	adds	r1, r3, #4
 8010136:	681b      	ldr	r3, [r3, #0]
 8010138:	9107      	str	r1, [sp, #28]
 801013a:	2b00      	cmp	r3, #0
 801013c:	db01      	blt.n	8010142 <_svfiprintf_r+0x10a>
 801013e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010140:	e004      	b.n	801014c <_svfiprintf_r+0x114>
 8010142:	425b      	negs	r3, r3
 8010144:	60e3      	str	r3, [r4, #12]
 8010146:	2302      	movs	r3, #2
 8010148:	4313      	orrs	r3, r2
 801014a:	6023      	str	r3, [r4, #0]
 801014c:	782b      	ldrb	r3, [r5, #0]
 801014e:	2b2e      	cmp	r3, #46	@ 0x2e
 8010150:	d10c      	bne.n	801016c <_svfiprintf_r+0x134>
 8010152:	786b      	ldrb	r3, [r5, #1]
 8010154:	2b2a      	cmp	r3, #42	@ 0x2a
 8010156:	d134      	bne.n	80101c2 <_svfiprintf_r+0x18a>
 8010158:	9b07      	ldr	r3, [sp, #28]
 801015a:	3502      	adds	r5, #2
 801015c:	1d1a      	adds	r2, r3, #4
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	9207      	str	r2, [sp, #28]
 8010162:	2b00      	cmp	r3, #0
 8010164:	da01      	bge.n	801016a <_svfiprintf_r+0x132>
 8010166:	2301      	movs	r3, #1
 8010168:	425b      	negs	r3, r3
 801016a:	9309      	str	r3, [sp, #36]	@ 0x24
 801016c:	4e2d      	ldr	r6, [pc, #180]	@ (8010224 <_svfiprintf_r+0x1ec>)
 801016e:	2203      	movs	r2, #3
 8010170:	0030      	movs	r0, r6
 8010172:	7829      	ldrb	r1, [r5, #0]
 8010174:	f000 fc94 	bl	8010aa0 <memchr>
 8010178:	2800      	cmp	r0, #0
 801017a:	d006      	beq.n	801018a <_svfiprintf_r+0x152>
 801017c:	2340      	movs	r3, #64	@ 0x40
 801017e:	1b80      	subs	r0, r0, r6
 8010180:	4083      	lsls	r3, r0
 8010182:	6822      	ldr	r2, [r4, #0]
 8010184:	3501      	adds	r5, #1
 8010186:	4313      	orrs	r3, r2
 8010188:	6023      	str	r3, [r4, #0]
 801018a:	7829      	ldrb	r1, [r5, #0]
 801018c:	2206      	movs	r2, #6
 801018e:	4826      	ldr	r0, [pc, #152]	@ (8010228 <_svfiprintf_r+0x1f0>)
 8010190:	1c6e      	adds	r6, r5, #1
 8010192:	7621      	strb	r1, [r4, #24]
 8010194:	f000 fc84 	bl	8010aa0 <memchr>
 8010198:	2800      	cmp	r0, #0
 801019a:	d038      	beq.n	801020e <_svfiprintf_r+0x1d6>
 801019c:	4b23      	ldr	r3, [pc, #140]	@ (801022c <_svfiprintf_r+0x1f4>)
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d122      	bne.n	80101e8 <_svfiprintf_r+0x1b0>
 80101a2:	2207      	movs	r2, #7
 80101a4:	9b07      	ldr	r3, [sp, #28]
 80101a6:	3307      	adds	r3, #7
 80101a8:	4393      	bics	r3, r2
 80101aa:	3308      	adds	r3, #8
 80101ac:	9307      	str	r3, [sp, #28]
 80101ae:	6963      	ldr	r3, [r4, #20]
 80101b0:	9a04      	ldr	r2, [sp, #16]
 80101b2:	189b      	adds	r3, r3, r2
 80101b4:	6163      	str	r3, [r4, #20]
 80101b6:	e762      	b.n	801007e <_svfiprintf_r+0x46>
 80101b8:	4343      	muls	r3, r0
 80101ba:	0035      	movs	r5, r6
 80101bc:	2101      	movs	r1, #1
 80101be:	189b      	adds	r3, r3, r2
 80101c0:	e7a4      	b.n	801010c <_svfiprintf_r+0xd4>
 80101c2:	2300      	movs	r3, #0
 80101c4:	200a      	movs	r0, #10
 80101c6:	0019      	movs	r1, r3
 80101c8:	3501      	adds	r5, #1
 80101ca:	6063      	str	r3, [r4, #4]
 80101cc:	782a      	ldrb	r2, [r5, #0]
 80101ce:	1c6e      	adds	r6, r5, #1
 80101d0:	3a30      	subs	r2, #48	@ 0x30
 80101d2:	2a09      	cmp	r2, #9
 80101d4:	d903      	bls.n	80101de <_svfiprintf_r+0x1a6>
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	d0c8      	beq.n	801016c <_svfiprintf_r+0x134>
 80101da:	9109      	str	r1, [sp, #36]	@ 0x24
 80101dc:	e7c6      	b.n	801016c <_svfiprintf_r+0x134>
 80101de:	4341      	muls	r1, r0
 80101e0:	0035      	movs	r5, r6
 80101e2:	2301      	movs	r3, #1
 80101e4:	1889      	adds	r1, r1, r2
 80101e6:	e7f1      	b.n	80101cc <_svfiprintf_r+0x194>
 80101e8:	aa07      	add	r2, sp, #28
 80101ea:	9200      	str	r2, [sp, #0]
 80101ec:	0021      	movs	r1, r4
 80101ee:	003a      	movs	r2, r7
 80101f0:	4b0f      	ldr	r3, [pc, #60]	@ (8010230 <_svfiprintf_r+0x1f8>)
 80101f2:	9803      	ldr	r0, [sp, #12]
 80101f4:	e000      	b.n	80101f8 <_svfiprintf_r+0x1c0>
 80101f6:	bf00      	nop
 80101f8:	9004      	str	r0, [sp, #16]
 80101fa:	9b04      	ldr	r3, [sp, #16]
 80101fc:	3301      	adds	r3, #1
 80101fe:	d1d6      	bne.n	80101ae <_svfiprintf_r+0x176>
 8010200:	89bb      	ldrh	r3, [r7, #12]
 8010202:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8010204:	065b      	lsls	r3, r3, #25
 8010206:	d500      	bpl.n	801020a <_svfiprintf_r+0x1d2>
 8010208:	e72c      	b.n	8010064 <_svfiprintf_r+0x2c>
 801020a:	b021      	add	sp, #132	@ 0x84
 801020c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801020e:	aa07      	add	r2, sp, #28
 8010210:	9200      	str	r2, [sp, #0]
 8010212:	0021      	movs	r1, r4
 8010214:	003a      	movs	r2, r7
 8010216:	4b06      	ldr	r3, [pc, #24]	@ (8010230 <_svfiprintf_r+0x1f8>)
 8010218:	9803      	ldr	r0, [sp, #12]
 801021a:	f000 f9bf 	bl	801059c <_printf_i>
 801021e:	e7eb      	b.n	80101f8 <_svfiprintf_r+0x1c0>
 8010220:	08011ebf 	.word	0x08011ebf
 8010224:	08011ec5 	.word	0x08011ec5
 8010228:	08011ec9 	.word	0x08011ec9
 801022c:	00000000 	.word	0x00000000
 8010230:	0800ff79 	.word	0x0800ff79

08010234 <__sfputc_r>:
 8010234:	6893      	ldr	r3, [r2, #8]
 8010236:	b510      	push	{r4, lr}
 8010238:	3b01      	subs	r3, #1
 801023a:	6093      	str	r3, [r2, #8]
 801023c:	2b00      	cmp	r3, #0
 801023e:	da04      	bge.n	801024a <__sfputc_r+0x16>
 8010240:	6994      	ldr	r4, [r2, #24]
 8010242:	42a3      	cmp	r3, r4
 8010244:	db07      	blt.n	8010256 <__sfputc_r+0x22>
 8010246:	290a      	cmp	r1, #10
 8010248:	d005      	beq.n	8010256 <__sfputc_r+0x22>
 801024a:	6813      	ldr	r3, [r2, #0]
 801024c:	1c58      	adds	r0, r3, #1
 801024e:	6010      	str	r0, [r2, #0]
 8010250:	7019      	strb	r1, [r3, #0]
 8010252:	0008      	movs	r0, r1
 8010254:	bd10      	pop	{r4, pc}
 8010256:	f000 fb5e 	bl	8010916 <__swbuf_r>
 801025a:	0001      	movs	r1, r0
 801025c:	e7f9      	b.n	8010252 <__sfputc_r+0x1e>

0801025e <__sfputs_r>:
 801025e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010260:	0006      	movs	r6, r0
 8010262:	000f      	movs	r7, r1
 8010264:	0014      	movs	r4, r2
 8010266:	18d5      	adds	r5, r2, r3
 8010268:	42ac      	cmp	r4, r5
 801026a:	d101      	bne.n	8010270 <__sfputs_r+0x12>
 801026c:	2000      	movs	r0, #0
 801026e:	e007      	b.n	8010280 <__sfputs_r+0x22>
 8010270:	7821      	ldrb	r1, [r4, #0]
 8010272:	003a      	movs	r2, r7
 8010274:	0030      	movs	r0, r6
 8010276:	f7ff ffdd 	bl	8010234 <__sfputc_r>
 801027a:	3401      	adds	r4, #1
 801027c:	1c43      	adds	r3, r0, #1
 801027e:	d1f3      	bne.n	8010268 <__sfputs_r+0xa>
 8010280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010284 <_vfiprintf_r>:
 8010284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010286:	b0a1      	sub	sp, #132	@ 0x84
 8010288:	000f      	movs	r7, r1
 801028a:	0015      	movs	r5, r2
 801028c:	001e      	movs	r6, r3
 801028e:	9003      	str	r0, [sp, #12]
 8010290:	2800      	cmp	r0, #0
 8010292:	d004      	beq.n	801029e <_vfiprintf_r+0x1a>
 8010294:	6a03      	ldr	r3, [r0, #32]
 8010296:	2b00      	cmp	r3, #0
 8010298:	d101      	bne.n	801029e <_vfiprintf_r+0x1a>
 801029a:	f7fe fbef 	bl	800ea7c <__sinit>
 801029e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80102a0:	07db      	lsls	r3, r3, #31
 80102a2:	d405      	bmi.n	80102b0 <_vfiprintf_r+0x2c>
 80102a4:	89bb      	ldrh	r3, [r7, #12]
 80102a6:	059b      	lsls	r3, r3, #22
 80102a8:	d402      	bmi.n	80102b0 <_vfiprintf_r+0x2c>
 80102aa:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80102ac:	f7fe fd1b 	bl	800ece6 <__retarget_lock_acquire_recursive>
 80102b0:	89bb      	ldrh	r3, [r7, #12]
 80102b2:	071b      	lsls	r3, r3, #28
 80102b4:	d502      	bpl.n	80102bc <_vfiprintf_r+0x38>
 80102b6:	693b      	ldr	r3, [r7, #16]
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d113      	bne.n	80102e4 <_vfiprintf_r+0x60>
 80102bc:	0039      	movs	r1, r7
 80102be:	9803      	ldr	r0, [sp, #12]
 80102c0:	f000 fb6c 	bl	801099c <__swsetup_r>
 80102c4:	2800      	cmp	r0, #0
 80102c6:	d00d      	beq.n	80102e4 <_vfiprintf_r+0x60>
 80102c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80102ca:	07db      	lsls	r3, r3, #31
 80102cc:	d503      	bpl.n	80102d6 <_vfiprintf_r+0x52>
 80102ce:	2001      	movs	r0, #1
 80102d0:	4240      	negs	r0, r0
 80102d2:	b021      	add	sp, #132	@ 0x84
 80102d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80102d6:	89bb      	ldrh	r3, [r7, #12]
 80102d8:	059b      	lsls	r3, r3, #22
 80102da:	d4f8      	bmi.n	80102ce <_vfiprintf_r+0x4a>
 80102dc:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80102de:	f7fe fd03 	bl	800ece8 <__retarget_lock_release_recursive>
 80102e2:	e7f4      	b.n	80102ce <_vfiprintf_r+0x4a>
 80102e4:	2300      	movs	r3, #0
 80102e6:	ac08      	add	r4, sp, #32
 80102e8:	6163      	str	r3, [r4, #20]
 80102ea:	3320      	adds	r3, #32
 80102ec:	7663      	strb	r3, [r4, #25]
 80102ee:	3310      	adds	r3, #16
 80102f0:	76a3      	strb	r3, [r4, #26]
 80102f2:	9607      	str	r6, [sp, #28]
 80102f4:	002e      	movs	r6, r5
 80102f6:	7833      	ldrb	r3, [r6, #0]
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d001      	beq.n	8010300 <_vfiprintf_r+0x7c>
 80102fc:	2b25      	cmp	r3, #37	@ 0x25
 80102fe:	d148      	bne.n	8010392 <_vfiprintf_r+0x10e>
 8010300:	1b73      	subs	r3, r6, r5
 8010302:	9305      	str	r3, [sp, #20]
 8010304:	42ae      	cmp	r6, r5
 8010306:	d00b      	beq.n	8010320 <_vfiprintf_r+0x9c>
 8010308:	002a      	movs	r2, r5
 801030a:	0039      	movs	r1, r7
 801030c:	9803      	ldr	r0, [sp, #12]
 801030e:	f7ff ffa6 	bl	801025e <__sfputs_r>
 8010312:	3001      	adds	r0, #1
 8010314:	d100      	bne.n	8010318 <_vfiprintf_r+0x94>
 8010316:	e0ae      	b.n	8010476 <_vfiprintf_r+0x1f2>
 8010318:	6963      	ldr	r3, [r4, #20]
 801031a:	9a05      	ldr	r2, [sp, #20]
 801031c:	189b      	adds	r3, r3, r2
 801031e:	6163      	str	r3, [r4, #20]
 8010320:	7833      	ldrb	r3, [r6, #0]
 8010322:	2b00      	cmp	r3, #0
 8010324:	d100      	bne.n	8010328 <_vfiprintf_r+0xa4>
 8010326:	e0a6      	b.n	8010476 <_vfiprintf_r+0x1f2>
 8010328:	2201      	movs	r2, #1
 801032a:	2300      	movs	r3, #0
 801032c:	4252      	negs	r2, r2
 801032e:	6062      	str	r2, [r4, #4]
 8010330:	a904      	add	r1, sp, #16
 8010332:	3254      	adds	r2, #84	@ 0x54
 8010334:	1852      	adds	r2, r2, r1
 8010336:	1c75      	adds	r5, r6, #1
 8010338:	6023      	str	r3, [r4, #0]
 801033a:	60e3      	str	r3, [r4, #12]
 801033c:	60a3      	str	r3, [r4, #8]
 801033e:	7013      	strb	r3, [r2, #0]
 8010340:	65a3      	str	r3, [r4, #88]	@ 0x58
 8010342:	4b59      	ldr	r3, [pc, #356]	@ (80104a8 <_vfiprintf_r+0x224>)
 8010344:	2205      	movs	r2, #5
 8010346:	0018      	movs	r0, r3
 8010348:	7829      	ldrb	r1, [r5, #0]
 801034a:	9305      	str	r3, [sp, #20]
 801034c:	f000 fba8 	bl	8010aa0 <memchr>
 8010350:	1c6e      	adds	r6, r5, #1
 8010352:	2800      	cmp	r0, #0
 8010354:	d11f      	bne.n	8010396 <_vfiprintf_r+0x112>
 8010356:	6822      	ldr	r2, [r4, #0]
 8010358:	06d3      	lsls	r3, r2, #27
 801035a:	d504      	bpl.n	8010366 <_vfiprintf_r+0xe2>
 801035c:	2353      	movs	r3, #83	@ 0x53
 801035e:	a904      	add	r1, sp, #16
 8010360:	185b      	adds	r3, r3, r1
 8010362:	2120      	movs	r1, #32
 8010364:	7019      	strb	r1, [r3, #0]
 8010366:	0713      	lsls	r3, r2, #28
 8010368:	d504      	bpl.n	8010374 <_vfiprintf_r+0xf0>
 801036a:	2353      	movs	r3, #83	@ 0x53
 801036c:	a904      	add	r1, sp, #16
 801036e:	185b      	adds	r3, r3, r1
 8010370:	212b      	movs	r1, #43	@ 0x2b
 8010372:	7019      	strb	r1, [r3, #0]
 8010374:	782b      	ldrb	r3, [r5, #0]
 8010376:	2b2a      	cmp	r3, #42	@ 0x2a
 8010378:	d016      	beq.n	80103a8 <_vfiprintf_r+0x124>
 801037a:	002e      	movs	r6, r5
 801037c:	2100      	movs	r1, #0
 801037e:	200a      	movs	r0, #10
 8010380:	68e3      	ldr	r3, [r4, #12]
 8010382:	7832      	ldrb	r2, [r6, #0]
 8010384:	1c75      	adds	r5, r6, #1
 8010386:	3a30      	subs	r2, #48	@ 0x30
 8010388:	2a09      	cmp	r2, #9
 801038a:	d950      	bls.n	801042e <_vfiprintf_r+0x1aa>
 801038c:	2900      	cmp	r1, #0
 801038e:	d111      	bne.n	80103b4 <_vfiprintf_r+0x130>
 8010390:	e017      	b.n	80103c2 <_vfiprintf_r+0x13e>
 8010392:	3601      	adds	r6, #1
 8010394:	e7af      	b.n	80102f6 <_vfiprintf_r+0x72>
 8010396:	9b05      	ldr	r3, [sp, #20]
 8010398:	6822      	ldr	r2, [r4, #0]
 801039a:	1ac0      	subs	r0, r0, r3
 801039c:	2301      	movs	r3, #1
 801039e:	4083      	lsls	r3, r0
 80103a0:	4313      	orrs	r3, r2
 80103a2:	0035      	movs	r5, r6
 80103a4:	6023      	str	r3, [r4, #0]
 80103a6:	e7cc      	b.n	8010342 <_vfiprintf_r+0xbe>
 80103a8:	9b07      	ldr	r3, [sp, #28]
 80103aa:	1d19      	adds	r1, r3, #4
 80103ac:	681b      	ldr	r3, [r3, #0]
 80103ae:	9107      	str	r1, [sp, #28]
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	db01      	blt.n	80103b8 <_vfiprintf_r+0x134>
 80103b4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80103b6:	e004      	b.n	80103c2 <_vfiprintf_r+0x13e>
 80103b8:	425b      	negs	r3, r3
 80103ba:	60e3      	str	r3, [r4, #12]
 80103bc:	2302      	movs	r3, #2
 80103be:	4313      	orrs	r3, r2
 80103c0:	6023      	str	r3, [r4, #0]
 80103c2:	7833      	ldrb	r3, [r6, #0]
 80103c4:	2b2e      	cmp	r3, #46	@ 0x2e
 80103c6:	d10c      	bne.n	80103e2 <_vfiprintf_r+0x15e>
 80103c8:	7873      	ldrb	r3, [r6, #1]
 80103ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80103cc:	d134      	bne.n	8010438 <_vfiprintf_r+0x1b4>
 80103ce:	9b07      	ldr	r3, [sp, #28]
 80103d0:	3602      	adds	r6, #2
 80103d2:	1d1a      	adds	r2, r3, #4
 80103d4:	681b      	ldr	r3, [r3, #0]
 80103d6:	9207      	str	r2, [sp, #28]
 80103d8:	2b00      	cmp	r3, #0
 80103da:	da01      	bge.n	80103e0 <_vfiprintf_r+0x15c>
 80103dc:	2301      	movs	r3, #1
 80103de:	425b      	negs	r3, r3
 80103e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80103e2:	4d32      	ldr	r5, [pc, #200]	@ (80104ac <_vfiprintf_r+0x228>)
 80103e4:	2203      	movs	r2, #3
 80103e6:	0028      	movs	r0, r5
 80103e8:	7831      	ldrb	r1, [r6, #0]
 80103ea:	f000 fb59 	bl	8010aa0 <memchr>
 80103ee:	2800      	cmp	r0, #0
 80103f0:	d006      	beq.n	8010400 <_vfiprintf_r+0x17c>
 80103f2:	2340      	movs	r3, #64	@ 0x40
 80103f4:	1b40      	subs	r0, r0, r5
 80103f6:	4083      	lsls	r3, r0
 80103f8:	6822      	ldr	r2, [r4, #0]
 80103fa:	3601      	adds	r6, #1
 80103fc:	4313      	orrs	r3, r2
 80103fe:	6023      	str	r3, [r4, #0]
 8010400:	7831      	ldrb	r1, [r6, #0]
 8010402:	2206      	movs	r2, #6
 8010404:	482a      	ldr	r0, [pc, #168]	@ (80104b0 <_vfiprintf_r+0x22c>)
 8010406:	1c75      	adds	r5, r6, #1
 8010408:	7621      	strb	r1, [r4, #24]
 801040a:	f000 fb49 	bl	8010aa0 <memchr>
 801040e:	2800      	cmp	r0, #0
 8010410:	d040      	beq.n	8010494 <_vfiprintf_r+0x210>
 8010412:	4b28      	ldr	r3, [pc, #160]	@ (80104b4 <_vfiprintf_r+0x230>)
 8010414:	2b00      	cmp	r3, #0
 8010416:	d122      	bne.n	801045e <_vfiprintf_r+0x1da>
 8010418:	2207      	movs	r2, #7
 801041a:	9b07      	ldr	r3, [sp, #28]
 801041c:	3307      	adds	r3, #7
 801041e:	4393      	bics	r3, r2
 8010420:	3308      	adds	r3, #8
 8010422:	9307      	str	r3, [sp, #28]
 8010424:	6963      	ldr	r3, [r4, #20]
 8010426:	9a04      	ldr	r2, [sp, #16]
 8010428:	189b      	adds	r3, r3, r2
 801042a:	6163      	str	r3, [r4, #20]
 801042c:	e762      	b.n	80102f4 <_vfiprintf_r+0x70>
 801042e:	4343      	muls	r3, r0
 8010430:	002e      	movs	r6, r5
 8010432:	2101      	movs	r1, #1
 8010434:	189b      	adds	r3, r3, r2
 8010436:	e7a4      	b.n	8010382 <_vfiprintf_r+0xfe>
 8010438:	2300      	movs	r3, #0
 801043a:	200a      	movs	r0, #10
 801043c:	0019      	movs	r1, r3
 801043e:	3601      	adds	r6, #1
 8010440:	6063      	str	r3, [r4, #4]
 8010442:	7832      	ldrb	r2, [r6, #0]
 8010444:	1c75      	adds	r5, r6, #1
 8010446:	3a30      	subs	r2, #48	@ 0x30
 8010448:	2a09      	cmp	r2, #9
 801044a:	d903      	bls.n	8010454 <_vfiprintf_r+0x1d0>
 801044c:	2b00      	cmp	r3, #0
 801044e:	d0c8      	beq.n	80103e2 <_vfiprintf_r+0x15e>
 8010450:	9109      	str	r1, [sp, #36]	@ 0x24
 8010452:	e7c6      	b.n	80103e2 <_vfiprintf_r+0x15e>
 8010454:	4341      	muls	r1, r0
 8010456:	002e      	movs	r6, r5
 8010458:	2301      	movs	r3, #1
 801045a:	1889      	adds	r1, r1, r2
 801045c:	e7f1      	b.n	8010442 <_vfiprintf_r+0x1be>
 801045e:	aa07      	add	r2, sp, #28
 8010460:	9200      	str	r2, [sp, #0]
 8010462:	0021      	movs	r1, r4
 8010464:	003a      	movs	r2, r7
 8010466:	4b14      	ldr	r3, [pc, #80]	@ (80104b8 <_vfiprintf_r+0x234>)
 8010468:	9803      	ldr	r0, [sp, #12]
 801046a:	e000      	b.n	801046e <_vfiprintf_r+0x1ea>
 801046c:	bf00      	nop
 801046e:	9004      	str	r0, [sp, #16]
 8010470:	9b04      	ldr	r3, [sp, #16]
 8010472:	3301      	adds	r3, #1
 8010474:	d1d6      	bne.n	8010424 <_vfiprintf_r+0x1a0>
 8010476:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010478:	07db      	lsls	r3, r3, #31
 801047a:	d405      	bmi.n	8010488 <_vfiprintf_r+0x204>
 801047c:	89bb      	ldrh	r3, [r7, #12]
 801047e:	059b      	lsls	r3, r3, #22
 8010480:	d402      	bmi.n	8010488 <_vfiprintf_r+0x204>
 8010482:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8010484:	f7fe fc30 	bl	800ece8 <__retarget_lock_release_recursive>
 8010488:	89bb      	ldrh	r3, [r7, #12]
 801048a:	065b      	lsls	r3, r3, #25
 801048c:	d500      	bpl.n	8010490 <_vfiprintf_r+0x20c>
 801048e:	e71e      	b.n	80102ce <_vfiprintf_r+0x4a>
 8010490:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8010492:	e71e      	b.n	80102d2 <_vfiprintf_r+0x4e>
 8010494:	aa07      	add	r2, sp, #28
 8010496:	9200      	str	r2, [sp, #0]
 8010498:	0021      	movs	r1, r4
 801049a:	003a      	movs	r2, r7
 801049c:	4b06      	ldr	r3, [pc, #24]	@ (80104b8 <_vfiprintf_r+0x234>)
 801049e:	9803      	ldr	r0, [sp, #12]
 80104a0:	f000 f87c 	bl	801059c <_printf_i>
 80104a4:	e7e3      	b.n	801046e <_vfiprintf_r+0x1ea>
 80104a6:	46c0      	nop			@ (mov r8, r8)
 80104a8:	08011ebf 	.word	0x08011ebf
 80104ac:	08011ec5 	.word	0x08011ec5
 80104b0:	08011ec9 	.word	0x08011ec9
 80104b4:	00000000 	.word	0x00000000
 80104b8:	0801025f 	.word	0x0801025f

080104bc <_printf_common>:
 80104bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80104be:	0016      	movs	r6, r2
 80104c0:	9301      	str	r3, [sp, #4]
 80104c2:	688a      	ldr	r2, [r1, #8]
 80104c4:	690b      	ldr	r3, [r1, #16]
 80104c6:	000c      	movs	r4, r1
 80104c8:	9000      	str	r0, [sp, #0]
 80104ca:	4293      	cmp	r3, r2
 80104cc:	da00      	bge.n	80104d0 <_printf_common+0x14>
 80104ce:	0013      	movs	r3, r2
 80104d0:	0022      	movs	r2, r4
 80104d2:	6033      	str	r3, [r6, #0]
 80104d4:	3243      	adds	r2, #67	@ 0x43
 80104d6:	7812      	ldrb	r2, [r2, #0]
 80104d8:	2a00      	cmp	r2, #0
 80104da:	d001      	beq.n	80104e0 <_printf_common+0x24>
 80104dc:	3301      	adds	r3, #1
 80104de:	6033      	str	r3, [r6, #0]
 80104e0:	6823      	ldr	r3, [r4, #0]
 80104e2:	069b      	lsls	r3, r3, #26
 80104e4:	d502      	bpl.n	80104ec <_printf_common+0x30>
 80104e6:	6833      	ldr	r3, [r6, #0]
 80104e8:	3302      	adds	r3, #2
 80104ea:	6033      	str	r3, [r6, #0]
 80104ec:	6822      	ldr	r2, [r4, #0]
 80104ee:	2306      	movs	r3, #6
 80104f0:	0015      	movs	r5, r2
 80104f2:	401d      	ands	r5, r3
 80104f4:	421a      	tst	r2, r3
 80104f6:	d027      	beq.n	8010548 <_printf_common+0x8c>
 80104f8:	0023      	movs	r3, r4
 80104fa:	3343      	adds	r3, #67	@ 0x43
 80104fc:	781b      	ldrb	r3, [r3, #0]
 80104fe:	1e5a      	subs	r2, r3, #1
 8010500:	4193      	sbcs	r3, r2
 8010502:	6822      	ldr	r2, [r4, #0]
 8010504:	0692      	lsls	r2, r2, #26
 8010506:	d430      	bmi.n	801056a <_printf_common+0xae>
 8010508:	0022      	movs	r2, r4
 801050a:	9901      	ldr	r1, [sp, #4]
 801050c:	9800      	ldr	r0, [sp, #0]
 801050e:	9d08      	ldr	r5, [sp, #32]
 8010510:	3243      	adds	r2, #67	@ 0x43
 8010512:	47a8      	blx	r5
 8010514:	3001      	adds	r0, #1
 8010516:	d025      	beq.n	8010564 <_printf_common+0xa8>
 8010518:	2206      	movs	r2, #6
 801051a:	6823      	ldr	r3, [r4, #0]
 801051c:	2500      	movs	r5, #0
 801051e:	4013      	ands	r3, r2
 8010520:	2b04      	cmp	r3, #4
 8010522:	d105      	bne.n	8010530 <_printf_common+0x74>
 8010524:	6833      	ldr	r3, [r6, #0]
 8010526:	68e5      	ldr	r5, [r4, #12]
 8010528:	1aed      	subs	r5, r5, r3
 801052a:	43eb      	mvns	r3, r5
 801052c:	17db      	asrs	r3, r3, #31
 801052e:	401d      	ands	r5, r3
 8010530:	68a3      	ldr	r3, [r4, #8]
 8010532:	6922      	ldr	r2, [r4, #16]
 8010534:	4293      	cmp	r3, r2
 8010536:	dd01      	ble.n	801053c <_printf_common+0x80>
 8010538:	1a9b      	subs	r3, r3, r2
 801053a:	18ed      	adds	r5, r5, r3
 801053c:	2600      	movs	r6, #0
 801053e:	42b5      	cmp	r5, r6
 8010540:	d120      	bne.n	8010584 <_printf_common+0xc8>
 8010542:	2000      	movs	r0, #0
 8010544:	e010      	b.n	8010568 <_printf_common+0xac>
 8010546:	3501      	adds	r5, #1
 8010548:	68e3      	ldr	r3, [r4, #12]
 801054a:	6832      	ldr	r2, [r6, #0]
 801054c:	1a9b      	subs	r3, r3, r2
 801054e:	42ab      	cmp	r3, r5
 8010550:	ddd2      	ble.n	80104f8 <_printf_common+0x3c>
 8010552:	0022      	movs	r2, r4
 8010554:	2301      	movs	r3, #1
 8010556:	9901      	ldr	r1, [sp, #4]
 8010558:	9800      	ldr	r0, [sp, #0]
 801055a:	9f08      	ldr	r7, [sp, #32]
 801055c:	3219      	adds	r2, #25
 801055e:	47b8      	blx	r7
 8010560:	3001      	adds	r0, #1
 8010562:	d1f0      	bne.n	8010546 <_printf_common+0x8a>
 8010564:	2001      	movs	r0, #1
 8010566:	4240      	negs	r0, r0
 8010568:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801056a:	2030      	movs	r0, #48	@ 0x30
 801056c:	18e1      	adds	r1, r4, r3
 801056e:	3143      	adds	r1, #67	@ 0x43
 8010570:	7008      	strb	r0, [r1, #0]
 8010572:	0021      	movs	r1, r4
 8010574:	1c5a      	adds	r2, r3, #1
 8010576:	3145      	adds	r1, #69	@ 0x45
 8010578:	7809      	ldrb	r1, [r1, #0]
 801057a:	18a2      	adds	r2, r4, r2
 801057c:	3243      	adds	r2, #67	@ 0x43
 801057e:	3302      	adds	r3, #2
 8010580:	7011      	strb	r1, [r2, #0]
 8010582:	e7c1      	b.n	8010508 <_printf_common+0x4c>
 8010584:	0022      	movs	r2, r4
 8010586:	2301      	movs	r3, #1
 8010588:	9901      	ldr	r1, [sp, #4]
 801058a:	9800      	ldr	r0, [sp, #0]
 801058c:	9f08      	ldr	r7, [sp, #32]
 801058e:	321a      	adds	r2, #26
 8010590:	47b8      	blx	r7
 8010592:	3001      	adds	r0, #1
 8010594:	d0e6      	beq.n	8010564 <_printf_common+0xa8>
 8010596:	3601      	adds	r6, #1
 8010598:	e7d1      	b.n	801053e <_printf_common+0x82>
	...

0801059c <_printf_i>:
 801059c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801059e:	b08b      	sub	sp, #44	@ 0x2c
 80105a0:	9206      	str	r2, [sp, #24]
 80105a2:	000a      	movs	r2, r1
 80105a4:	3243      	adds	r2, #67	@ 0x43
 80105a6:	9307      	str	r3, [sp, #28]
 80105a8:	9005      	str	r0, [sp, #20]
 80105aa:	9203      	str	r2, [sp, #12]
 80105ac:	7e0a      	ldrb	r2, [r1, #24]
 80105ae:	000c      	movs	r4, r1
 80105b0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80105b2:	2a78      	cmp	r2, #120	@ 0x78
 80105b4:	d809      	bhi.n	80105ca <_printf_i+0x2e>
 80105b6:	2a62      	cmp	r2, #98	@ 0x62
 80105b8:	d80b      	bhi.n	80105d2 <_printf_i+0x36>
 80105ba:	2a00      	cmp	r2, #0
 80105bc:	d100      	bne.n	80105c0 <_printf_i+0x24>
 80105be:	e0ba      	b.n	8010736 <_printf_i+0x19a>
 80105c0:	497a      	ldr	r1, [pc, #488]	@ (80107ac <_printf_i+0x210>)
 80105c2:	9104      	str	r1, [sp, #16]
 80105c4:	2a58      	cmp	r2, #88	@ 0x58
 80105c6:	d100      	bne.n	80105ca <_printf_i+0x2e>
 80105c8:	e08e      	b.n	80106e8 <_printf_i+0x14c>
 80105ca:	0025      	movs	r5, r4
 80105cc:	3542      	adds	r5, #66	@ 0x42
 80105ce:	702a      	strb	r2, [r5, #0]
 80105d0:	e022      	b.n	8010618 <_printf_i+0x7c>
 80105d2:	0010      	movs	r0, r2
 80105d4:	3863      	subs	r0, #99	@ 0x63
 80105d6:	2815      	cmp	r0, #21
 80105d8:	d8f7      	bhi.n	80105ca <_printf_i+0x2e>
 80105da:	f7ef fdaf 	bl	800013c <__gnu_thumb1_case_shi>
 80105de:	0016      	.short	0x0016
 80105e0:	fff6001f 	.word	0xfff6001f
 80105e4:	fff6fff6 	.word	0xfff6fff6
 80105e8:	001ffff6 	.word	0x001ffff6
 80105ec:	fff6fff6 	.word	0xfff6fff6
 80105f0:	fff6fff6 	.word	0xfff6fff6
 80105f4:	0036009f 	.word	0x0036009f
 80105f8:	fff6007e 	.word	0xfff6007e
 80105fc:	00b0fff6 	.word	0x00b0fff6
 8010600:	0036fff6 	.word	0x0036fff6
 8010604:	fff6fff6 	.word	0xfff6fff6
 8010608:	0082      	.short	0x0082
 801060a:	0025      	movs	r5, r4
 801060c:	681a      	ldr	r2, [r3, #0]
 801060e:	3542      	adds	r5, #66	@ 0x42
 8010610:	1d11      	adds	r1, r2, #4
 8010612:	6019      	str	r1, [r3, #0]
 8010614:	6813      	ldr	r3, [r2, #0]
 8010616:	702b      	strb	r3, [r5, #0]
 8010618:	2301      	movs	r3, #1
 801061a:	e09e      	b.n	801075a <_printf_i+0x1be>
 801061c:	6818      	ldr	r0, [r3, #0]
 801061e:	6809      	ldr	r1, [r1, #0]
 8010620:	1d02      	adds	r2, r0, #4
 8010622:	060d      	lsls	r5, r1, #24
 8010624:	d50b      	bpl.n	801063e <_printf_i+0xa2>
 8010626:	6806      	ldr	r6, [r0, #0]
 8010628:	601a      	str	r2, [r3, #0]
 801062a:	2e00      	cmp	r6, #0
 801062c:	da03      	bge.n	8010636 <_printf_i+0x9a>
 801062e:	232d      	movs	r3, #45	@ 0x2d
 8010630:	9a03      	ldr	r2, [sp, #12]
 8010632:	4276      	negs	r6, r6
 8010634:	7013      	strb	r3, [r2, #0]
 8010636:	4b5d      	ldr	r3, [pc, #372]	@ (80107ac <_printf_i+0x210>)
 8010638:	270a      	movs	r7, #10
 801063a:	9304      	str	r3, [sp, #16]
 801063c:	e018      	b.n	8010670 <_printf_i+0xd4>
 801063e:	6806      	ldr	r6, [r0, #0]
 8010640:	601a      	str	r2, [r3, #0]
 8010642:	0649      	lsls	r1, r1, #25
 8010644:	d5f1      	bpl.n	801062a <_printf_i+0x8e>
 8010646:	b236      	sxth	r6, r6
 8010648:	e7ef      	b.n	801062a <_printf_i+0x8e>
 801064a:	6808      	ldr	r0, [r1, #0]
 801064c:	6819      	ldr	r1, [r3, #0]
 801064e:	c940      	ldmia	r1!, {r6}
 8010650:	0605      	lsls	r5, r0, #24
 8010652:	d402      	bmi.n	801065a <_printf_i+0xbe>
 8010654:	0640      	lsls	r0, r0, #25
 8010656:	d500      	bpl.n	801065a <_printf_i+0xbe>
 8010658:	b2b6      	uxth	r6, r6
 801065a:	6019      	str	r1, [r3, #0]
 801065c:	4b53      	ldr	r3, [pc, #332]	@ (80107ac <_printf_i+0x210>)
 801065e:	270a      	movs	r7, #10
 8010660:	9304      	str	r3, [sp, #16]
 8010662:	2a6f      	cmp	r2, #111	@ 0x6f
 8010664:	d100      	bne.n	8010668 <_printf_i+0xcc>
 8010666:	3f02      	subs	r7, #2
 8010668:	0023      	movs	r3, r4
 801066a:	2200      	movs	r2, #0
 801066c:	3343      	adds	r3, #67	@ 0x43
 801066e:	701a      	strb	r2, [r3, #0]
 8010670:	6863      	ldr	r3, [r4, #4]
 8010672:	60a3      	str	r3, [r4, #8]
 8010674:	2b00      	cmp	r3, #0
 8010676:	db06      	blt.n	8010686 <_printf_i+0xea>
 8010678:	2104      	movs	r1, #4
 801067a:	6822      	ldr	r2, [r4, #0]
 801067c:	9d03      	ldr	r5, [sp, #12]
 801067e:	438a      	bics	r2, r1
 8010680:	6022      	str	r2, [r4, #0]
 8010682:	4333      	orrs	r3, r6
 8010684:	d00c      	beq.n	80106a0 <_printf_i+0x104>
 8010686:	9d03      	ldr	r5, [sp, #12]
 8010688:	0030      	movs	r0, r6
 801068a:	0039      	movs	r1, r7
 801068c:	f7ef fde6 	bl	800025c <__aeabi_uidivmod>
 8010690:	9b04      	ldr	r3, [sp, #16]
 8010692:	3d01      	subs	r5, #1
 8010694:	5c5b      	ldrb	r3, [r3, r1]
 8010696:	702b      	strb	r3, [r5, #0]
 8010698:	0033      	movs	r3, r6
 801069a:	0006      	movs	r6, r0
 801069c:	429f      	cmp	r7, r3
 801069e:	d9f3      	bls.n	8010688 <_printf_i+0xec>
 80106a0:	2f08      	cmp	r7, #8
 80106a2:	d109      	bne.n	80106b8 <_printf_i+0x11c>
 80106a4:	6823      	ldr	r3, [r4, #0]
 80106a6:	07db      	lsls	r3, r3, #31
 80106a8:	d506      	bpl.n	80106b8 <_printf_i+0x11c>
 80106aa:	6862      	ldr	r2, [r4, #4]
 80106ac:	6923      	ldr	r3, [r4, #16]
 80106ae:	429a      	cmp	r2, r3
 80106b0:	dc02      	bgt.n	80106b8 <_printf_i+0x11c>
 80106b2:	2330      	movs	r3, #48	@ 0x30
 80106b4:	3d01      	subs	r5, #1
 80106b6:	702b      	strb	r3, [r5, #0]
 80106b8:	9b03      	ldr	r3, [sp, #12]
 80106ba:	1b5b      	subs	r3, r3, r5
 80106bc:	6123      	str	r3, [r4, #16]
 80106be:	9b07      	ldr	r3, [sp, #28]
 80106c0:	0021      	movs	r1, r4
 80106c2:	9300      	str	r3, [sp, #0]
 80106c4:	9805      	ldr	r0, [sp, #20]
 80106c6:	9b06      	ldr	r3, [sp, #24]
 80106c8:	aa09      	add	r2, sp, #36	@ 0x24
 80106ca:	f7ff fef7 	bl	80104bc <_printf_common>
 80106ce:	3001      	adds	r0, #1
 80106d0:	d148      	bne.n	8010764 <_printf_i+0x1c8>
 80106d2:	2001      	movs	r0, #1
 80106d4:	4240      	negs	r0, r0
 80106d6:	b00b      	add	sp, #44	@ 0x2c
 80106d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80106da:	2220      	movs	r2, #32
 80106dc:	6809      	ldr	r1, [r1, #0]
 80106de:	430a      	orrs	r2, r1
 80106e0:	6022      	str	r2, [r4, #0]
 80106e2:	2278      	movs	r2, #120	@ 0x78
 80106e4:	4932      	ldr	r1, [pc, #200]	@ (80107b0 <_printf_i+0x214>)
 80106e6:	9104      	str	r1, [sp, #16]
 80106e8:	0021      	movs	r1, r4
 80106ea:	3145      	adds	r1, #69	@ 0x45
 80106ec:	700a      	strb	r2, [r1, #0]
 80106ee:	6819      	ldr	r1, [r3, #0]
 80106f0:	6822      	ldr	r2, [r4, #0]
 80106f2:	c940      	ldmia	r1!, {r6}
 80106f4:	0610      	lsls	r0, r2, #24
 80106f6:	d402      	bmi.n	80106fe <_printf_i+0x162>
 80106f8:	0650      	lsls	r0, r2, #25
 80106fa:	d500      	bpl.n	80106fe <_printf_i+0x162>
 80106fc:	b2b6      	uxth	r6, r6
 80106fe:	6019      	str	r1, [r3, #0]
 8010700:	07d3      	lsls	r3, r2, #31
 8010702:	d502      	bpl.n	801070a <_printf_i+0x16e>
 8010704:	2320      	movs	r3, #32
 8010706:	4313      	orrs	r3, r2
 8010708:	6023      	str	r3, [r4, #0]
 801070a:	2e00      	cmp	r6, #0
 801070c:	d001      	beq.n	8010712 <_printf_i+0x176>
 801070e:	2710      	movs	r7, #16
 8010710:	e7aa      	b.n	8010668 <_printf_i+0xcc>
 8010712:	2220      	movs	r2, #32
 8010714:	6823      	ldr	r3, [r4, #0]
 8010716:	4393      	bics	r3, r2
 8010718:	6023      	str	r3, [r4, #0]
 801071a:	e7f8      	b.n	801070e <_printf_i+0x172>
 801071c:	681a      	ldr	r2, [r3, #0]
 801071e:	680d      	ldr	r5, [r1, #0]
 8010720:	1d10      	adds	r0, r2, #4
 8010722:	6949      	ldr	r1, [r1, #20]
 8010724:	6018      	str	r0, [r3, #0]
 8010726:	6813      	ldr	r3, [r2, #0]
 8010728:	062e      	lsls	r6, r5, #24
 801072a:	d501      	bpl.n	8010730 <_printf_i+0x194>
 801072c:	6019      	str	r1, [r3, #0]
 801072e:	e002      	b.n	8010736 <_printf_i+0x19a>
 8010730:	066d      	lsls	r5, r5, #25
 8010732:	d5fb      	bpl.n	801072c <_printf_i+0x190>
 8010734:	8019      	strh	r1, [r3, #0]
 8010736:	2300      	movs	r3, #0
 8010738:	9d03      	ldr	r5, [sp, #12]
 801073a:	6123      	str	r3, [r4, #16]
 801073c:	e7bf      	b.n	80106be <_printf_i+0x122>
 801073e:	681a      	ldr	r2, [r3, #0]
 8010740:	1d11      	adds	r1, r2, #4
 8010742:	6019      	str	r1, [r3, #0]
 8010744:	6815      	ldr	r5, [r2, #0]
 8010746:	2100      	movs	r1, #0
 8010748:	0028      	movs	r0, r5
 801074a:	6862      	ldr	r2, [r4, #4]
 801074c:	f000 f9a8 	bl	8010aa0 <memchr>
 8010750:	2800      	cmp	r0, #0
 8010752:	d001      	beq.n	8010758 <_printf_i+0x1bc>
 8010754:	1b40      	subs	r0, r0, r5
 8010756:	6060      	str	r0, [r4, #4]
 8010758:	6863      	ldr	r3, [r4, #4]
 801075a:	6123      	str	r3, [r4, #16]
 801075c:	2300      	movs	r3, #0
 801075e:	9a03      	ldr	r2, [sp, #12]
 8010760:	7013      	strb	r3, [r2, #0]
 8010762:	e7ac      	b.n	80106be <_printf_i+0x122>
 8010764:	002a      	movs	r2, r5
 8010766:	6923      	ldr	r3, [r4, #16]
 8010768:	9906      	ldr	r1, [sp, #24]
 801076a:	9805      	ldr	r0, [sp, #20]
 801076c:	9d07      	ldr	r5, [sp, #28]
 801076e:	47a8      	blx	r5
 8010770:	3001      	adds	r0, #1
 8010772:	d0ae      	beq.n	80106d2 <_printf_i+0x136>
 8010774:	6823      	ldr	r3, [r4, #0]
 8010776:	079b      	lsls	r3, r3, #30
 8010778:	d415      	bmi.n	80107a6 <_printf_i+0x20a>
 801077a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801077c:	68e0      	ldr	r0, [r4, #12]
 801077e:	4298      	cmp	r0, r3
 8010780:	daa9      	bge.n	80106d6 <_printf_i+0x13a>
 8010782:	0018      	movs	r0, r3
 8010784:	e7a7      	b.n	80106d6 <_printf_i+0x13a>
 8010786:	0022      	movs	r2, r4
 8010788:	2301      	movs	r3, #1
 801078a:	9906      	ldr	r1, [sp, #24]
 801078c:	9805      	ldr	r0, [sp, #20]
 801078e:	9e07      	ldr	r6, [sp, #28]
 8010790:	3219      	adds	r2, #25
 8010792:	47b0      	blx	r6
 8010794:	3001      	adds	r0, #1
 8010796:	d09c      	beq.n	80106d2 <_printf_i+0x136>
 8010798:	3501      	adds	r5, #1
 801079a:	68e3      	ldr	r3, [r4, #12]
 801079c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801079e:	1a9b      	subs	r3, r3, r2
 80107a0:	42ab      	cmp	r3, r5
 80107a2:	dcf0      	bgt.n	8010786 <_printf_i+0x1ea>
 80107a4:	e7e9      	b.n	801077a <_printf_i+0x1de>
 80107a6:	2500      	movs	r5, #0
 80107a8:	e7f7      	b.n	801079a <_printf_i+0x1fe>
 80107aa:	46c0      	nop			@ (mov r8, r8)
 80107ac:	08011ed0 	.word	0x08011ed0
 80107b0:	08011ee1 	.word	0x08011ee1

080107b4 <__sflush_r>:
 80107b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80107b6:	220c      	movs	r2, #12
 80107b8:	5e8b      	ldrsh	r3, [r1, r2]
 80107ba:	0005      	movs	r5, r0
 80107bc:	000c      	movs	r4, r1
 80107be:	071a      	lsls	r2, r3, #28
 80107c0:	d456      	bmi.n	8010870 <__sflush_r+0xbc>
 80107c2:	684a      	ldr	r2, [r1, #4]
 80107c4:	2a00      	cmp	r2, #0
 80107c6:	dc02      	bgt.n	80107ce <__sflush_r+0x1a>
 80107c8:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 80107ca:	2a00      	cmp	r2, #0
 80107cc:	dd4e      	ble.n	801086c <__sflush_r+0xb8>
 80107ce:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80107d0:	2f00      	cmp	r7, #0
 80107d2:	d04b      	beq.n	801086c <__sflush_r+0xb8>
 80107d4:	2200      	movs	r2, #0
 80107d6:	2080      	movs	r0, #128	@ 0x80
 80107d8:	682e      	ldr	r6, [r5, #0]
 80107da:	602a      	str	r2, [r5, #0]
 80107dc:	001a      	movs	r2, r3
 80107de:	0140      	lsls	r0, r0, #5
 80107e0:	6a21      	ldr	r1, [r4, #32]
 80107e2:	4002      	ands	r2, r0
 80107e4:	4203      	tst	r3, r0
 80107e6:	d033      	beq.n	8010850 <__sflush_r+0x9c>
 80107e8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80107ea:	89a3      	ldrh	r3, [r4, #12]
 80107ec:	075b      	lsls	r3, r3, #29
 80107ee:	d506      	bpl.n	80107fe <__sflush_r+0x4a>
 80107f0:	6863      	ldr	r3, [r4, #4]
 80107f2:	1ad2      	subs	r2, r2, r3
 80107f4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d001      	beq.n	80107fe <__sflush_r+0x4a>
 80107fa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80107fc:	1ad2      	subs	r2, r2, r3
 80107fe:	2300      	movs	r3, #0
 8010800:	0028      	movs	r0, r5
 8010802:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8010804:	6a21      	ldr	r1, [r4, #32]
 8010806:	47b8      	blx	r7
 8010808:	89a2      	ldrh	r2, [r4, #12]
 801080a:	1c43      	adds	r3, r0, #1
 801080c:	d106      	bne.n	801081c <__sflush_r+0x68>
 801080e:	6829      	ldr	r1, [r5, #0]
 8010810:	291d      	cmp	r1, #29
 8010812:	d846      	bhi.n	80108a2 <__sflush_r+0xee>
 8010814:	4b29      	ldr	r3, [pc, #164]	@ (80108bc <__sflush_r+0x108>)
 8010816:	40cb      	lsrs	r3, r1
 8010818:	07db      	lsls	r3, r3, #31
 801081a:	d542      	bpl.n	80108a2 <__sflush_r+0xee>
 801081c:	2300      	movs	r3, #0
 801081e:	6063      	str	r3, [r4, #4]
 8010820:	6923      	ldr	r3, [r4, #16]
 8010822:	6023      	str	r3, [r4, #0]
 8010824:	04d2      	lsls	r2, r2, #19
 8010826:	d505      	bpl.n	8010834 <__sflush_r+0x80>
 8010828:	1c43      	adds	r3, r0, #1
 801082a:	d102      	bne.n	8010832 <__sflush_r+0x7e>
 801082c:	682b      	ldr	r3, [r5, #0]
 801082e:	2b00      	cmp	r3, #0
 8010830:	d100      	bne.n	8010834 <__sflush_r+0x80>
 8010832:	6560      	str	r0, [r4, #84]	@ 0x54
 8010834:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010836:	602e      	str	r6, [r5, #0]
 8010838:	2900      	cmp	r1, #0
 801083a:	d017      	beq.n	801086c <__sflush_r+0xb8>
 801083c:	0023      	movs	r3, r4
 801083e:	3344      	adds	r3, #68	@ 0x44
 8010840:	4299      	cmp	r1, r3
 8010842:	d002      	beq.n	801084a <__sflush_r+0x96>
 8010844:	0028      	movs	r0, r5
 8010846:	f7fe fa5f 	bl	800ed08 <_free_r>
 801084a:	2300      	movs	r3, #0
 801084c:	6363      	str	r3, [r4, #52]	@ 0x34
 801084e:	e00d      	b.n	801086c <__sflush_r+0xb8>
 8010850:	2301      	movs	r3, #1
 8010852:	0028      	movs	r0, r5
 8010854:	47b8      	blx	r7
 8010856:	0002      	movs	r2, r0
 8010858:	1c43      	adds	r3, r0, #1
 801085a:	d1c6      	bne.n	80107ea <__sflush_r+0x36>
 801085c:	682b      	ldr	r3, [r5, #0]
 801085e:	2b00      	cmp	r3, #0
 8010860:	d0c3      	beq.n	80107ea <__sflush_r+0x36>
 8010862:	2b1d      	cmp	r3, #29
 8010864:	d001      	beq.n	801086a <__sflush_r+0xb6>
 8010866:	2b16      	cmp	r3, #22
 8010868:	d11a      	bne.n	80108a0 <__sflush_r+0xec>
 801086a:	602e      	str	r6, [r5, #0]
 801086c:	2000      	movs	r0, #0
 801086e:	e01e      	b.n	80108ae <__sflush_r+0xfa>
 8010870:	690e      	ldr	r6, [r1, #16]
 8010872:	2e00      	cmp	r6, #0
 8010874:	d0fa      	beq.n	801086c <__sflush_r+0xb8>
 8010876:	680f      	ldr	r7, [r1, #0]
 8010878:	600e      	str	r6, [r1, #0]
 801087a:	1bba      	subs	r2, r7, r6
 801087c:	9201      	str	r2, [sp, #4]
 801087e:	2200      	movs	r2, #0
 8010880:	079b      	lsls	r3, r3, #30
 8010882:	d100      	bne.n	8010886 <__sflush_r+0xd2>
 8010884:	694a      	ldr	r2, [r1, #20]
 8010886:	60a2      	str	r2, [r4, #8]
 8010888:	9b01      	ldr	r3, [sp, #4]
 801088a:	2b00      	cmp	r3, #0
 801088c:	ddee      	ble.n	801086c <__sflush_r+0xb8>
 801088e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8010890:	0032      	movs	r2, r6
 8010892:	001f      	movs	r7, r3
 8010894:	0028      	movs	r0, r5
 8010896:	9b01      	ldr	r3, [sp, #4]
 8010898:	6a21      	ldr	r1, [r4, #32]
 801089a:	47b8      	blx	r7
 801089c:	2800      	cmp	r0, #0
 801089e:	dc07      	bgt.n	80108b0 <__sflush_r+0xfc>
 80108a0:	89a2      	ldrh	r2, [r4, #12]
 80108a2:	2340      	movs	r3, #64	@ 0x40
 80108a4:	2001      	movs	r0, #1
 80108a6:	4313      	orrs	r3, r2
 80108a8:	b21b      	sxth	r3, r3
 80108aa:	81a3      	strh	r3, [r4, #12]
 80108ac:	4240      	negs	r0, r0
 80108ae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80108b0:	9b01      	ldr	r3, [sp, #4]
 80108b2:	1836      	adds	r6, r6, r0
 80108b4:	1a1b      	subs	r3, r3, r0
 80108b6:	9301      	str	r3, [sp, #4]
 80108b8:	e7e6      	b.n	8010888 <__sflush_r+0xd4>
 80108ba:	46c0      	nop			@ (mov r8, r8)
 80108bc:	20400001 	.word	0x20400001

080108c0 <_fflush_r>:
 80108c0:	690b      	ldr	r3, [r1, #16]
 80108c2:	b570      	push	{r4, r5, r6, lr}
 80108c4:	0005      	movs	r5, r0
 80108c6:	000c      	movs	r4, r1
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d102      	bne.n	80108d2 <_fflush_r+0x12>
 80108cc:	2500      	movs	r5, #0
 80108ce:	0028      	movs	r0, r5
 80108d0:	bd70      	pop	{r4, r5, r6, pc}
 80108d2:	2800      	cmp	r0, #0
 80108d4:	d004      	beq.n	80108e0 <_fflush_r+0x20>
 80108d6:	6a03      	ldr	r3, [r0, #32]
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d101      	bne.n	80108e0 <_fflush_r+0x20>
 80108dc:	f7fe f8ce 	bl	800ea7c <__sinit>
 80108e0:	220c      	movs	r2, #12
 80108e2:	5ea3      	ldrsh	r3, [r4, r2]
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d0f1      	beq.n	80108cc <_fflush_r+0xc>
 80108e8:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80108ea:	07d2      	lsls	r2, r2, #31
 80108ec:	d404      	bmi.n	80108f8 <_fflush_r+0x38>
 80108ee:	059b      	lsls	r3, r3, #22
 80108f0:	d402      	bmi.n	80108f8 <_fflush_r+0x38>
 80108f2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80108f4:	f7fe f9f7 	bl	800ece6 <__retarget_lock_acquire_recursive>
 80108f8:	0028      	movs	r0, r5
 80108fa:	0021      	movs	r1, r4
 80108fc:	f7ff ff5a 	bl	80107b4 <__sflush_r>
 8010900:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010902:	0005      	movs	r5, r0
 8010904:	07db      	lsls	r3, r3, #31
 8010906:	d4e2      	bmi.n	80108ce <_fflush_r+0xe>
 8010908:	89a3      	ldrh	r3, [r4, #12]
 801090a:	059b      	lsls	r3, r3, #22
 801090c:	d4df      	bmi.n	80108ce <_fflush_r+0xe>
 801090e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010910:	f7fe f9ea 	bl	800ece8 <__retarget_lock_release_recursive>
 8010914:	e7db      	b.n	80108ce <_fflush_r+0xe>

08010916 <__swbuf_r>:
 8010916:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010918:	0006      	movs	r6, r0
 801091a:	000d      	movs	r5, r1
 801091c:	0014      	movs	r4, r2
 801091e:	2800      	cmp	r0, #0
 8010920:	d004      	beq.n	801092c <__swbuf_r+0x16>
 8010922:	6a03      	ldr	r3, [r0, #32]
 8010924:	2b00      	cmp	r3, #0
 8010926:	d101      	bne.n	801092c <__swbuf_r+0x16>
 8010928:	f7fe f8a8 	bl	800ea7c <__sinit>
 801092c:	69a3      	ldr	r3, [r4, #24]
 801092e:	60a3      	str	r3, [r4, #8]
 8010930:	89a3      	ldrh	r3, [r4, #12]
 8010932:	071b      	lsls	r3, r3, #28
 8010934:	d502      	bpl.n	801093c <__swbuf_r+0x26>
 8010936:	6923      	ldr	r3, [r4, #16]
 8010938:	2b00      	cmp	r3, #0
 801093a:	d109      	bne.n	8010950 <__swbuf_r+0x3a>
 801093c:	0021      	movs	r1, r4
 801093e:	0030      	movs	r0, r6
 8010940:	f000 f82c 	bl	801099c <__swsetup_r>
 8010944:	2800      	cmp	r0, #0
 8010946:	d003      	beq.n	8010950 <__swbuf_r+0x3a>
 8010948:	2501      	movs	r5, #1
 801094a:	426d      	negs	r5, r5
 801094c:	0028      	movs	r0, r5
 801094e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010950:	6923      	ldr	r3, [r4, #16]
 8010952:	6820      	ldr	r0, [r4, #0]
 8010954:	b2ef      	uxtb	r7, r5
 8010956:	1ac0      	subs	r0, r0, r3
 8010958:	6963      	ldr	r3, [r4, #20]
 801095a:	b2ed      	uxtb	r5, r5
 801095c:	4283      	cmp	r3, r0
 801095e:	dc05      	bgt.n	801096c <__swbuf_r+0x56>
 8010960:	0021      	movs	r1, r4
 8010962:	0030      	movs	r0, r6
 8010964:	f7ff ffac 	bl	80108c0 <_fflush_r>
 8010968:	2800      	cmp	r0, #0
 801096a:	d1ed      	bne.n	8010948 <__swbuf_r+0x32>
 801096c:	68a3      	ldr	r3, [r4, #8]
 801096e:	3001      	adds	r0, #1
 8010970:	3b01      	subs	r3, #1
 8010972:	60a3      	str	r3, [r4, #8]
 8010974:	6823      	ldr	r3, [r4, #0]
 8010976:	1c5a      	adds	r2, r3, #1
 8010978:	6022      	str	r2, [r4, #0]
 801097a:	701f      	strb	r7, [r3, #0]
 801097c:	6963      	ldr	r3, [r4, #20]
 801097e:	4283      	cmp	r3, r0
 8010980:	d004      	beq.n	801098c <__swbuf_r+0x76>
 8010982:	89a3      	ldrh	r3, [r4, #12]
 8010984:	07db      	lsls	r3, r3, #31
 8010986:	d5e1      	bpl.n	801094c <__swbuf_r+0x36>
 8010988:	2d0a      	cmp	r5, #10
 801098a:	d1df      	bne.n	801094c <__swbuf_r+0x36>
 801098c:	0021      	movs	r1, r4
 801098e:	0030      	movs	r0, r6
 8010990:	f7ff ff96 	bl	80108c0 <_fflush_r>
 8010994:	2800      	cmp	r0, #0
 8010996:	d0d9      	beq.n	801094c <__swbuf_r+0x36>
 8010998:	e7d6      	b.n	8010948 <__swbuf_r+0x32>
	...

0801099c <__swsetup_r>:
 801099c:	4b2d      	ldr	r3, [pc, #180]	@ (8010a54 <__swsetup_r+0xb8>)
 801099e:	b570      	push	{r4, r5, r6, lr}
 80109a0:	0005      	movs	r5, r0
 80109a2:	6818      	ldr	r0, [r3, #0]
 80109a4:	000c      	movs	r4, r1
 80109a6:	2800      	cmp	r0, #0
 80109a8:	d004      	beq.n	80109b4 <__swsetup_r+0x18>
 80109aa:	6a03      	ldr	r3, [r0, #32]
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d101      	bne.n	80109b4 <__swsetup_r+0x18>
 80109b0:	f7fe f864 	bl	800ea7c <__sinit>
 80109b4:	220c      	movs	r2, #12
 80109b6:	5ea3      	ldrsh	r3, [r4, r2]
 80109b8:	071a      	lsls	r2, r3, #28
 80109ba:	d423      	bmi.n	8010a04 <__swsetup_r+0x68>
 80109bc:	06da      	lsls	r2, r3, #27
 80109be:	d407      	bmi.n	80109d0 <__swsetup_r+0x34>
 80109c0:	2209      	movs	r2, #9
 80109c2:	602a      	str	r2, [r5, #0]
 80109c4:	2240      	movs	r2, #64	@ 0x40
 80109c6:	2001      	movs	r0, #1
 80109c8:	4313      	orrs	r3, r2
 80109ca:	81a3      	strh	r3, [r4, #12]
 80109cc:	4240      	negs	r0, r0
 80109ce:	e03a      	b.n	8010a46 <__swsetup_r+0xaa>
 80109d0:	075b      	lsls	r3, r3, #29
 80109d2:	d513      	bpl.n	80109fc <__swsetup_r+0x60>
 80109d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80109d6:	2900      	cmp	r1, #0
 80109d8:	d008      	beq.n	80109ec <__swsetup_r+0x50>
 80109da:	0023      	movs	r3, r4
 80109dc:	3344      	adds	r3, #68	@ 0x44
 80109de:	4299      	cmp	r1, r3
 80109e0:	d002      	beq.n	80109e8 <__swsetup_r+0x4c>
 80109e2:	0028      	movs	r0, r5
 80109e4:	f7fe f990 	bl	800ed08 <_free_r>
 80109e8:	2300      	movs	r3, #0
 80109ea:	6363      	str	r3, [r4, #52]	@ 0x34
 80109ec:	2224      	movs	r2, #36	@ 0x24
 80109ee:	89a3      	ldrh	r3, [r4, #12]
 80109f0:	4393      	bics	r3, r2
 80109f2:	81a3      	strh	r3, [r4, #12]
 80109f4:	2300      	movs	r3, #0
 80109f6:	6063      	str	r3, [r4, #4]
 80109f8:	6923      	ldr	r3, [r4, #16]
 80109fa:	6023      	str	r3, [r4, #0]
 80109fc:	2308      	movs	r3, #8
 80109fe:	89a2      	ldrh	r2, [r4, #12]
 8010a00:	4313      	orrs	r3, r2
 8010a02:	81a3      	strh	r3, [r4, #12]
 8010a04:	6923      	ldr	r3, [r4, #16]
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d10b      	bne.n	8010a22 <__swsetup_r+0x86>
 8010a0a:	21a0      	movs	r1, #160	@ 0xa0
 8010a0c:	2280      	movs	r2, #128	@ 0x80
 8010a0e:	89a3      	ldrh	r3, [r4, #12]
 8010a10:	0089      	lsls	r1, r1, #2
 8010a12:	0092      	lsls	r2, r2, #2
 8010a14:	400b      	ands	r3, r1
 8010a16:	4293      	cmp	r3, r2
 8010a18:	d003      	beq.n	8010a22 <__swsetup_r+0x86>
 8010a1a:	0021      	movs	r1, r4
 8010a1c:	0028      	movs	r0, r5
 8010a1e:	f000 f90b 	bl	8010c38 <__smakebuf_r>
 8010a22:	220c      	movs	r2, #12
 8010a24:	5ea3      	ldrsh	r3, [r4, r2]
 8010a26:	2101      	movs	r1, #1
 8010a28:	001a      	movs	r2, r3
 8010a2a:	400a      	ands	r2, r1
 8010a2c:	420b      	tst	r3, r1
 8010a2e:	d00b      	beq.n	8010a48 <__swsetup_r+0xac>
 8010a30:	2200      	movs	r2, #0
 8010a32:	60a2      	str	r2, [r4, #8]
 8010a34:	6962      	ldr	r2, [r4, #20]
 8010a36:	4252      	negs	r2, r2
 8010a38:	61a2      	str	r2, [r4, #24]
 8010a3a:	2000      	movs	r0, #0
 8010a3c:	6922      	ldr	r2, [r4, #16]
 8010a3e:	4282      	cmp	r2, r0
 8010a40:	d101      	bne.n	8010a46 <__swsetup_r+0xaa>
 8010a42:	061a      	lsls	r2, r3, #24
 8010a44:	d4be      	bmi.n	80109c4 <__swsetup_r+0x28>
 8010a46:	bd70      	pop	{r4, r5, r6, pc}
 8010a48:	0799      	lsls	r1, r3, #30
 8010a4a:	d400      	bmi.n	8010a4e <__swsetup_r+0xb2>
 8010a4c:	6962      	ldr	r2, [r4, #20]
 8010a4e:	60a2      	str	r2, [r4, #8]
 8010a50:	e7f3      	b.n	8010a3a <__swsetup_r+0x9e>
 8010a52:	46c0      	nop			@ (mov r8, r8)
 8010a54:	20000ebc 	.word	0x20000ebc

08010a58 <memmove>:
 8010a58:	b510      	push	{r4, lr}
 8010a5a:	4288      	cmp	r0, r1
 8010a5c:	d902      	bls.n	8010a64 <memmove+0xc>
 8010a5e:	188b      	adds	r3, r1, r2
 8010a60:	4298      	cmp	r0, r3
 8010a62:	d308      	bcc.n	8010a76 <memmove+0x1e>
 8010a64:	2300      	movs	r3, #0
 8010a66:	429a      	cmp	r2, r3
 8010a68:	d007      	beq.n	8010a7a <memmove+0x22>
 8010a6a:	5ccc      	ldrb	r4, [r1, r3]
 8010a6c:	54c4      	strb	r4, [r0, r3]
 8010a6e:	3301      	adds	r3, #1
 8010a70:	e7f9      	b.n	8010a66 <memmove+0xe>
 8010a72:	5c8b      	ldrb	r3, [r1, r2]
 8010a74:	5483      	strb	r3, [r0, r2]
 8010a76:	3a01      	subs	r2, #1
 8010a78:	d2fb      	bcs.n	8010a72 <memmove+0x1a>
 8010a7a:	bd10      	pop	{r4, pc}

08010a7c <_sbrk_r>:
 8010a7c:	2300      	movs	r3, #0
 8010a7e:	b570      	push	{r4, r5, r6, lr}
 8010a80:	4d06      	ldr	r5, [pc, #24]	@ (8010a9c <_sbrk_r+0x20>)
 8010a82:	0004      	movs	r4, r0
 8010a84:	0008      	movs	r0, r1
 8010a86:	602b      	str	r3, [r5, #0]
 8010a88:	f7f6 ffc4 	bl	8007a14 <_sbrk>
 8010a8c:	1c43      	adds	r3, r0, #1
 8010a8e:	d103      	bne.n	8010a98 <_sbrk_r+0x1c>
 8010a90:	682b      	ldr	r3, [r5, #0]
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d000      	beq.n	8010a98 <_sbrk_r+0x1c>
 8010a96:	6023      	str	r3, [r4, #0]
 8010a98:	bd70      	pop	{r4, r5, r6, pc}
 8010a9a:	46c0      	nop			@ (mov r8, r8)
 8010a9c:	200022f0 	.word	0x200022f0

08010aa0 <memchr>:
 8010aa0:	b2c9      	uxtb	r1, r1
 8010aa2:	1882      	adds	r2, r0, r2
 8010aa4:	4290      	cmp	r0, r2
 8010aa6:	d101      	bne.n	8010aac <memchr+0xc>
 8010aa8:	2000      	movs	r0, #0
 8010aaa:	4770      	bx	lr
 8010aac:	7803      	ldrb	r3, [r0, #0]
 8010aae:	428b      	cmp	r3, r1
 8010ab0:	d0fb      	beq.n	8010aaa <memchr+0xa>
 8010ab2:	3001      	adds	r0, #1
 8010ab4:	e7f6      	b.n	8010aa4 <memchr+0x4>
	...

08010ab8 <__assert_func>:
 8010ab8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8010aba:	0014      	movs	r4, r2
 8010abc:	001a      	movs	r2, r3
 8010abe:	4b09      	ldr	r3, [pc, #36]	@ (8010ae4 <__assert_func+0x2c>)
 8010ac0:	0005      	movs	r5, r0
 8010ac2:	681b      	ldr	r3, [r3, #0]
 8010ac4:	000e      	movs	r6, r1
 8010ac6:	68d8      	ldr	r0, [r3, #12]
 8010ac8:	4b07      	ldr	r3, [pc, #28]	@ (8010ae8 <__assert_func+0x30>)
 8010aca:	2c00      	cmp	r4, #0
 8010acc:	d101      	bne.n	8010ad2 <__assert_func+0x1a>
 8010ace:	4b07      	ldr	r3, [pc, #28]	@ (8010aec <__assert_func+0x34>)
 8010ad0:	001c      	movs	r4, r3
 8010ad2:	4907      	ldr	r1, [pc, #28]	@ (8010af0 <__assert_func+0x38>)
 8010ad4:	9301      	str	r3, [sp, #4]
 8010ad6:	9402      	str	r4, [sp, #8]
 8010ad8:	002b      	movs	r3, r5
 8010ada:	9600      	str	r6, [sp, #0]
 8010adc:	f000 f872 	bl	8010bc4 <fiprintf>
 8010ae0:	f000 f910 	bl	8010d04 <abort>
 8010ae4:	20000ebc 	.word	0x20000ebc
 8010ae8:	08011ef2 	.word	0x08011ef2
 8010aec:	08011f2d 	.word	0x08011f2d
 8010af0:	08011eff 	.word	0x08011eff

08010af4 <_calloc_r>:
 8010af4:	b570      	push	{r4, r5, r6, lr}
 8010af6:	0c0b      	lsrs	r3, r1, #16
 8010af8:	0c15      	lsrs	r5, r2, #16
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d11e      	bne.n	8010b3c <_calloc_r+0x48>
 8010afe:	2d00      	cmp	r5, #0
 8010b00:	d10c      	bne.n	8010b1c <_calloc_r+0x28>
 8010b02:	b289      	uxth	r1, r1
 8010b04:	b294      	uxth	r4, r2
 8010b06:	434c      	muls	r4, r1
 8010b08:	0021      	movs	r1, r4
 8010b0a:	f7fe fcc3 	bl	800f494 <_malloc_r>
 8010b0e:	1e05      	subs	r5, r0, #0
 8010b10:	d01b      	beq.n	8010b4a <_calloc_r+0x56>
 8010b12:	0022      	movs	r2, r4
 8010b14:	2100      	movs	r1, #0
 8010b16:	f7fe f853 	bl	800ebc0 <memset>
 8010b1a:	e016      	b.n	8010b4a <_calloc_r+0x56>
 8010b1c:	1c2b      	adds	r3, r5, #0
 8010b1e:	1c0c      	adds	r4, r1, #0
 8010b20:	b289      	uxth	r1, r1
 8010b22:	b292      	uxth	r2, r2
 8010b24:	434a      	muls	r2, r1
 8010b26:	b29b      	uxth	r3, r3
 8010b28:	b2a1      	uxth	r1, r4
 8010b2a:	4359      	muls	r1, r3
 8010b2c:	0c14      	lsrs	r4, r2, #16
 8010b2e:	190c      	adds	r4, r1, r4
 8010b30:	0c23      	lsrs	r3, r4, #16
 8010b32:	d107      	bne.n	8010b44 <_calloc_r+0x50>
 8010b34:	0424      	lsls	r4, r4, #16
 8010b36:	b292      	uxth	r2, r2
 8010b38:	4314      	orrs	r4, r2
 8010b3a:	e7e5      	b.n	8010b08 <_calloc_r+0x14>
 8010b3c:	2d00      	cmp	r5, #0
 8010b3e:	d101      	bne.n	8010b44 <_calloc_r+0x50>
 8010b40:	1c14      	adds	r4, r2, #0
 8010b42:	e7ed      	b.n	8010b20 <_calloc_r+0x2c>
 8010b44:	230c      	movs	r3, #12
 8010b46:	2500      	movs	r5, #0
 8010b48:	6003      	str	r3, [r0, #0]
 8010b4a:	0028      	movs	r0, r5
 8010b4c:	bd70      	pop	{r4, r5, r6, pc}
	...

08010b50 <malloc>:
 8010b50:	b510      	push	{r4, lr}
 8010b52:	4b03      	ldr	r3, [pc, #12]	@ (8010b60 <malloc+0x10>)
 8010b54:	0001      	movs	r1, r0
 8010b56:	6818      	ldr	r0, [r3, #0]
 8010b58:	f7fe fc9c 	bl	800f494 <_malloc_r>
 8010b5c:	bd10      	pop	{r4, pc}
 8010b5e:	46c0      	nop			@ (mov r8, r8)
 8010b60:	20000ebc 	.word	0x20000ebc

08010b64 <_realloc_r>:
 8010b64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010b66:	0006      	movs	r6, r0
 8010b68:	000c      	movs	r4, r1
 8010b6a:	0015      	movs	r5, r2
 8010b6c:	2900      	cmp	r1, #0
 8010b6e:	d105      	bne.n	8010b7c <_realloc_r+0x18>
 8010b70:	0011      	movs	r1, r2
 8010b72:	f7fe fc8f 	bl	800f494 <_malloc_r>
 8010b76:	0004      	movs	r4, r0
 8010b78:	0020      	movs	r0, r4
 8010b7a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010b7c:	2a00      	cmp	r2, #0
 8010b7e:	d103      	bne.n	8010b88 <_realloc_r+0x24>
 8010b80:	f7fe f8c2 	bl	800ed08 <_free_r>
 8010b84:	002c      	movs	r4, r5
 8010b86:	e7f7      	b.n	8010b78 <_realloc_r+0x14>
 8010b88:	f000 f8c3 	bl	8010d12 <_malloc_usable_size_r>
 8010b8c:	0007      	movs	r7, r0
 8010b8e:	4285      	cmp	r5, r0
 8010b90:	d802      	bhi.n	8010b98 <_realloc_r+0x34>
 8010b92:	0843      	lsrs	r3, r0, #1
 8010b94:	42ab      	cmp	r3, r5
 8010b96:	d3ef      	bcc.n	8010b78 <_realloc_r+0x14>
 8010b98:	0029      	movs	r1, r5
 8010b9a:	0030      	movs	r0, r6
 8010b9c:	f7fe fc7a 	bl	800f494 <_malloc_r>
 8010ba0:	9001      	str	r0, [sp, #4]
 8010ba2:	2800      	cmp	r0, #0
 8010ba4:	d101      	bne.n	8010baa <_realloc_r+0x46>
 8010ba6:	9c01      	ldr	r4, [sp, #4]
 8010ba8:	e7e6      	b.n	8010b78 <_realloc_r+0x14>
 8010baa:	002a      	movs	r2, r5
 8010bac:	42bd      	cmp	r5, r7
 8010bae:	d900      	bls.n	8010bb2 <_realloc_r+0x4e>
 8010bb0:	003a      	movs	r2, r7
 8010bb2:	0021      	movs	r1, r4
 8010bb4:	9801      	ldr	r0, [sp, #4]
 8010bb6:	f7fe f898 	bl	800ecea <memcpy>
 8010bba:	0021      	movs	r1, r4
 8010bbc:	0030      	movs	r0, r6
 8010bbe:	f7fe f8a3 	bl	800ed08 <_free_r>
 8010bc2:	e7f0      	b.n	8010ba6 <_realloc_r+0x42>

08010bc4 <fiprintf>:
 8010bc4:	b40e      	push	{r1, r2, r3}
 8010bc6:	b517      	push	{r0, r1, r2, r4, lr}
 8010bc8:	4c05      	ldr	r4, [pc, #20]	@ (8010be0 <fiprintf+0x1c>)
 8010bca:	ab05      	add	r3, sp, #20
 8010bcc:	cb04      	ldmia	r3!, {r2}
 8010bce:	0001      	movs	r1, r0
 8010bd0:	6820      	ldr	r0, [r4, #0]
 8010bd2:	9301      	str	r3, [sp, #4]
 8010bd4:	f7ff fb56 	bl	8010284 <_vfiprintf_r>
 8010bd8:	bc1e      	pop	{r1, r2, r3, r4}
 8010bda:	bc08      	pop	{r3}
 8010bdc:	b003      	add	sp, #12
 8010bde:	4718      	bx	r3
 8010be0:	20000ebc 	.word	0x20000ebc

08010be4 <__swhatbuf_r>:
 8010be4:	b570      	push	{r4, r5, r6, lr}
 8010be6:	000e      	movs	r6, r1
 8010be8:	001d      	movs	r5, r3
 8010bea:	230e      	movs	r3, #14
 8010bec:	5ec9      	ldrsh	r1, [r1, r3]
 8010bee:	0014      	movs	r4, r2
 8010bf0:	b096      	sub	sp, #88	@ 0x58
 8010bf2:	2900      	cmp	r1, #0
 8010bf4:	da0c      	bge.n	8010c10 <__swhatbuf_r+0x2c>
 8010bf6:	89b2      	ldrh	r2, [r6, #12]
 8010bf8:	2380      	movs	r3, #128	@ 0x80
 8010bfa:	0011      	movs	r1, r2
 8010bfc:	4019      	ands	r1, r3
 8010bfe:	421a      	tst	r2, r3
 8010c00:	d114      	bne.n	8010c2c <__swhatbuf_r+0x48>
 8010c02:	2380      	movs	r3, #128	@ 0x80
 8010c04:	00db      	lsls	r3, r3, #3
 8010c06:	2000      	movs	r0, #0
 8010c08:	6029      	str	r1, [r5, #0]
 8010c0a:	6023      	str	r3, [r4, #0]
 8010c0c:	b016      	add	sp, #88	@ 0x58
 8010c0e:	bd70      	pop	{r4, r5, r6, pc}
 8010c10:	466a      	mov	r2, sp
 8010c12:	f000 f853 	bl	8010cbc <_fstat_r>
 8010c16:	2800      	cmp	r0, #0
 8010c18:	dbed      	blt.n	8010bf6 <__swhatbuf_r+0x12>
 8010c1a:	23f0      	movs	r3, #240	@ 0xf0
 8010c1c:	9901      	ldr	r1, [sp, #4]
 8010c1e:	021b      	lsls	r3, r3, #8
 8010c20:	4019      	ands	r1, r3
 8010c22:	4b04      	ldr	r3, [pc, #16]	@ (8010c34 <__swhatbuf_r+0x50>)
 8010c24:	18c9      	adds	r1, r1, r3
 8010c26:	424b      	negs	r3, r1
 8010c28:	4159      	adcs	r1, r3
 8010c2a:	e7ea      	b.n	8010c02 <__swhatbuf_r+0x1e>
 8010c2c:	2100      	movs	r1, #0
 8010c2e:	2340      	movs	r3, #64	@ 0x40
 8010c30:	e7e9      	b.n	8010c06 <__swhatbuf_r+0x22>
 8010c32:	46c0      	nop			@ (mov r8, r8)
 8010c34:	ffffe000 	.word	0xffffe000

08010c38 <__smakebuf_r>:
 8010c38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010c3a:	2602      	movs	r6, #2
 8010c3c:	898b      	ldrh	r3, [r1, #12]
 8010c3e:	0005      	movs	r5, r0
 8010c40:	000c      	movs	r4, r1
 8010c42:	b085      	sub	sp, #20
 8010c44:	4233      	tst	r3, r6
 8010c46:	d007      	beq.n	8010c58 <__smakebuf_r+0x20>
 8010c48:	0023      	movs	r3, r4
 8010c4a:	3347      	adds	r3, #71	@ 0x47
 8010c4c:	6023      	str	r3, [r4, #0]
 8010c4e:	6123      	str	r3, [r4, #16]
 8010c50:	2301      	movs	r3, #1
 8010c52:	6163      	str	r3, [r4, #20]
 8010c54:	b005      	add	sp, #20
 8010c56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010c58:	ab03      	add	r3, sp, #12
 8010c5a:	aa02      	add	r2, sp, #8
 8010c5c:	f7ff ffc2 	bl	8010be4 <__swhatbuf_r>
 8010c60:	9f02      	ldr	r7, [sp, #8]
 8010c62:	9001      	str	r0, [sp, #4]
 8010c64:	0039      	movs	r1, r7
 8010c66:	0028      	movs	r0, r5
 8010c68:	f7fe fc14 	bl	800f494 <_malloc_r>
 8010c6c:	2800      	cmp	r0, #0
 8010c6e:	d108      	bne.n	8010c82 <__smakebuf_r+0x4a>
 8010c70:	220c      	movs	r2, #12
 8010c72:	5ea3      	ldrsh	r3, [r4, r2]
 8010c74:	059a      	lsls	r2, r3, #22
 8010c76:	d4ed      	bmi.n	8010c54 <__smakebuf_r+0x1c>
 8010c78:	2203      	movs	r2, #3
 8010c7a:	4393      	bics	r3, r2
 8010c7c:	431e      	orrs	r6, r3
 8010c7e:	81a6      	strh	r6, [r4, #12]
 8010c80:	e7e2      	b.n	8010c48 <__smakebuf_r+0x10>
 8010c82:	2380      	movs	r3, #128	@ 0x80
 8010c84:	89a2      	ldrh	r2, [r4, #12]
 8010c86:	6020      	str	r0, [r4, #0]
 8010c88:	4313      	orrs	r3, r2
 8010c8a:	81a3      	strh	r3, [r4, #12]
 8010c8c:	9b03      	ldr	r3, [sp, #12]
 8010c8e:	6120      	str	r0, [r4, #16]
 8010c90:	6167      	str	r7, [r4, #20]
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d00c      	beq.n	8010cb0 <__smakebuf_r+0x78>
 8010c96:	0028      	movs	r0, r5
 8010c98:	230e      	movs	r3, #14
 8010c9a:	5ee1      	ldrsh	r1, [r4, r3]
 8010c9c:	f000 f820 	bl	8010ce0 <_isatty_r>
 8010ca0:	2800      	cmp	r0, #0
 8010ca2:	d005      	beq.n	8010cb0 <__smakebuf_r+0x78>
 8010ca4:	2303      	movs	r3, #3
 8010ca6:	89a2      	ldrh	r2, [r4, #12]
 8010ca8:	439a      	bics	r2, r3
 8010caa:	3b02      	subs	r3, #2
 8010cac:	4313      	orrs	r3, r2
 8010cae:	81a3      	strh	r3, [r4, #12]
 8010cb0:	89a3      	ldrh	r3, [r4, #12]
 8010cb2:	9a01      	ldr	r2, [sp, #4]
 8010cb4:	4313      	orrs	r3, r2
 8010cb6:	81a3      	strh	r3, [r4, #12]
 8010cb8:	e7cc      	b.n	8010c54 <__smakebuf_r+0x1c>
	...

08010cbc <_fstat_r>:
 8010cbc:	2300      	movs	r3, #0
 8010cbe:	b570      	push	{r4, r5, r6, lr}
 8010cc0:	4d06      	ldr	r5, [pc, #24]	@ (8010cdc <_fstat_r+0x20>)
 8010cc2:	0004      	movs	r4, r0
 8010cc4:	0008      	movs	r0, r1
 8010cc6:	0011      	movs	r1, r2
 8010cc8:	602b      	str	r3, [r5, #0]
 8010cca:	f7f6 fe81 	bl	80079d0 <_fstat>
 8010cce:	1c43      	adds	r3, r0, #1
 8010cd0:	d103      	bne.n	8010cda <_fstat_r+0x1e>
 8010cd2:	682b      	ldr	r3, [r5, #0]
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d000      	beq.n	8010cda <_fstat_r+0x1e>
 8010cd8:	6023      	str	r3, [r4, #0]
 8010cda:	bd70      	pop	{r4, r5, r6, pc}
 8010cdc:	200022f0 	.word	0x200022f0

08010ce0 <_isatty_r>:
 8010ce0:	2300      	movs	r3, #0
 8010ce2:	b570      	push	{r4, r5, r6, lr}
 8010ce4:	4d06      	ldr	r5, [pc, #24]	@ (8010d00 <_isatty_r+0x20>)
 8010ce6:	0004      	movs	r4, r0
 8010ce8:	0008      	movs	r0, r1
 8010cea:	602b      	str	r3, [r5, #0]
 8010cec:	f7f6 fe7e 	bl	80079ec <_isatty>
 8010cf0:	1c43      	adds	r3, r0, #1
 8010cf2:	d103      	bne.n	8010cfc <_isatty_r+0x1c>
 8010cf4:	682b      	ldr	r3, [r5, #0]
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	d000      	beq.n	8010cfc <_isatty_r+0x1c>
 8010cfa:	6023      	str	r3, [r4, #0]
 8010cfc:	bd70      	pop	{r4, r5, r6, pc}
 8010cfe:	46c0      	nop			@ (mov r8, r8)
 8010d00:	200022f0 	.word	0x200022f0

08010d04 <abort>:
 8010d04:	2006      	movs	r0, #6
 8010d06:	b510      	push	{r4, lr}
 8010d08:	f000 f834 	bl	8010d74 <raise>
 8010d0c:	2001      	movs	r0, #1
 8010d0e:	f7f6 fe0f 	bl	8007930 <_exit>

08010d12 <_malloc_usable_size_r>:
 8010d12:	1f0b      	subs	r3, r1, #4
 8010d14:	681b      	ldr	r3, [r3, #0]
 8010d16:	1f18      	subs	r0, r3, #4
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	da01      	bge.n	8010d20 <_malloc_usable_size_r+0xe>
 8010d1c:	580b      	ldr	r3, [r1, r0]
 8010d1e:	18c0      	adds	r0, r0, r3
 8010d20:	4770      	bx	lr

08010d22 <_raise_r>:
 8010d22:	b570      	push	{r4, r5, r6, lr}
 8010d24:	0004      	movs	r4, r0
 8010d26:	000d      	movs	r5, r1
 8010d28:	291f      	cmp	r1, #31
 8010d2a:	d904      	bls.n	8010d36 <_raise_r+0x14>
 8010d2c:	2316      	movs	r3, #22
 8010d2e:	6003      	str	r3, [r0, #0]
 8010d30:	2001      	movs	r0, #1
 8010d32:	4240      	negs	r0, r0
 8010d34:	bd70      	pop	{r4, r5, r6, pc}
 8010d36:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	d004      	beq.n	8010d46 <_raise_r+0x24>
 8010d3c:	008a      	lsls	r2, r1, #2
 8010d3e:	189b      	adds	r3, r3, r2
 8010d40:	681a      	ldr	r2, [r3, #0]
 8010d42:	2a00      	cmp	r2, #0
 8010d44:	d108      	bne.n	8010d58 <_raise_r+0x36>
 8010d46:	0020      	movs	r0, r4
 8010d48:	f000 f830 	bl	8010dac <_getpid_r>
 8010d4c:	002a      	movs	r2, r5
 8010d4e:	0001      	movs	r1, r0
 8010d50:	0020      	movs	r0, r4
 8010d52:	f000 f819 	bl	8010d88 <_kill_r>
 8010d56:	e7ed      	b.n	8010d34 <_raise_r+0x12>
 8010d58:	2a01      	cmp	r2, #1
 8010d5a:	d009      	beq.n	8010d70 <_raise_r+0x4e>
 8010d5c:	1c51      	adds	r1, r2, #1
 8010d5e:	d103      	bne.n	8010d68 <_raise_r+0x46>
 8010d60:	2316      	movs	r3, #22
 8010d62:	6003      	str	r3, [r0, #0]
 8010d64:	2001      	movs	r0, #1
 8010d66:	e7e5      	b.n	8010d34 <_raise_r+0x12>
 8010d68:	2100      	movs	r1, #0
 8010d6a:	0028      	movs	r0, r5
 8010d6c:	6019      	str	r1, [r3, #0]
 8010d6e:	4790      	blx	r2
 8010d70:	2000      	movs	r0, #0
 8010d72:	e7df      	b.n	8010d34 <_raise_r+0x12>

08010d74 <raise>:
 8010d74:	b510      	push	{r4, lr}
 8010d76:	4b03      	ldr	r3, [pc, #12]	@ (8010d84 <raise+0x10>)
 8010d78:	0001      	movs	r1, r0
 8010d7a:	6818      	ldr	r0, [r3, #0]
 8010d7c:	f7ff ffd1 	bl	8010d22 <_raise_r>
 8010d80:	bd10      	pop	{r4, pc}
 8010d82:	46c0      	nop			@ (mov r8, r8)
 8010d84:	20000ebc 	.word	0x20000ebc

08010d88 <_kill_r>:
 8010d88:	2300      	movs	r3, #0
 8010d8a:	b570      	push	{r4, r5, r6, lr}
 8010d8c:	4d06      	ldr	r5, [pc, #24]	@ (8010da8 <_kill_r+0x20>)
 8010d8e:	0004      	movs	r4, r0
 8010d90:	0008      	movs	r0, r1
 8010d92:	0011      	movs	r1, r2
 8010d94:	602b      	str	r3, [r5, #0]
 8010d96:	f7f6 fdbb 	bl	8007910 <_kill>
 8010d9a:	1c43      	adds	r3, r0, #1
 8010d9c:	d103      	bne.n	8010da6 <_kill_r+0x1e>
 8010d9e:	682b      	ldr	r3, [r5, #0]
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	d000      	beq.n	8010da6 <_kill_r+0x1e>
 8010da4:	6023      	str	r3, [r4, #0]
 8010da6:	bd70      	pop	{r4, r5, r6, pc}
 8010da8:	200022f0 	.word	0x200022f0

08010dac <_getpid_r>:
 8010dac:	b510      	push	{r4, lr}
 8010dae:	f7f6 fda9 	bl	8007904 <_getpid>
 8010db2:	bd10      	pop	{r4, pc}

08010db4 <fmod>:
 8010db4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010db6:	0014      	movs	r4, r2
 8010db8:	001d      	movs	r5, r3
 8010dba:	9000      	str	r0, [sp, #0]
 8010dbc:	9101      	str	r1, [sp, #4]
 8010dbe:	f000 f92d 	bl	801101c <__ieee754_fmod>
 8010dc2:	0022      	movs	r2, r4
 8010dc4:	0006      	movs	r6, r0
 8010dc6:	000f      	movs	r7, r1
 8010dc8:	9800      	ldr	r0, [sp, #0]
 8010dca:	9901      	ldr	r1, [sp, #4]
 8010dcc:	002b      	movs	r3, r5
 8010dce:	f7f2 fc71 	bl	80036b4 <__aeabi_dcmpun>
 8010dd2:	2800      	cmp	r0, #0
 8010dd4:	d113      	bne.n	8010dfe <fmod+0x4a>
 8010dd6:	2200      	movs	r2, #0
 8010dd8:	2300      	movs	r3, #0
 8010dda:	0020      	movs	r0, r4
 8010ddc:	0029      	movs	r1, r5
 8010dde:	f7ef fb3d 	bl	800045c <__aeabi_dcmpeq>
 8010de2:	2800      	cmp	r0, #0
 8010de4:	d00b      	beq.n	8010dfe <fmod+0x4a>
 8010de6:	f7fd ff53 	bl	800ec90 <__errno>
 8010dea:	2321      	movs	r3, #33	@ 0x21
 8010dec:	2200      	movs	r2, #0
 8010dee:	6003      	str	r3, [r0, #0]
 8010df0:	2300      	movs	r3, #0
 8010df2:	0010      	movs	r0, r2
 8010df4:	0019      	movs	r1, r3
 8010df6:	f7f1 f933 	bl	8002060 <__aeabi_ddiv>
 8010dfa:	0006      	movs	r6, r0
 8010dfc:	000f      	movs	r7, r1
 8010dfe:	0030      	movs	r0, r6
 8010e00:	0039      	movs	r1, r7
 8010e02:	b003      	add	sp, #12
 8010e04:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010e06 <sqrt>:
 8010e06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e08:	0004      	movs	r4, r0
 8010e0a:	000d      	movs	r5, r1
 8010e0c:	f000 f822 	bl	8010e54 <__ieee754_sqrt>
 8010e10:	0022      	movs	r2, r4
 8010e12:	0006      	movs	r6, r0
 8010e14:	000f      	movs	r7, r1
 8010e16:	002b      	movs	r3, r5
 8010e18:	0020      	movs	r0, r4
 8010e1a:	0029      	movs	r1, r5
 8010e1c:	f7f2 fc4a 	bl	80036b4 <__aeabi_dcmpun>
 8010e20:	2800      	cmp	r0, #0
 8010e22:	d113      	bne.n	8010e4c <sqrt+0x46>
 8010e24:	2200      	movs	r2, #0
 8010e26:	2300      	movs	r3, #0
 8010e28:	0020      	movs	r0, r4
 8010e2a:	0029      	movs	r1, r5
 8010e2c:	f7ef fb1c 	bl	8000468 <__aeabi_dcmplt>
 8010e30:	2800      	cmp	r0, #0
 8010e32:	d00b      	beq.n	8010e4c <sqrt+0x46>
 8010e34:	f7fd ff2c 	bl	800ec90 <__errno>
 8010e38:	2321      	movs	r3, #33	@ 0x21
 8010e3a:	2200      	movs	r2, #0
 8010e3c:	6003      	str	r3, [r0, #0]
 8010e3e:	2300      	movs	r3, #0
 8010e40:	0010      	movs	r0, r2
 8010e42:	0019      	movs	r1, r3
 8010e44:	f7f1 f90c 	bl	8002060 <__aeabi_ddiv>
 8010e48:	0006      	movs	r6, r0
 8010e4a:	000f      	movs	r7, r1
 8010e4c:	0030      	movs	r0, r6
 8010e4e:	0039      	movs	r1, r7
 8010e50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010e54 <__ieee754_sqrt>:
 8010e54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e56:	000a      	movs	r2, r1
 8010e58:	000d      	movs	r5, r1
 8010e5a:	496b      	ldr	r1, [pc, #428]	@ (8011008 <__ieee754_sqrt+0x1b4>)
 8010e5c:	0004      	movs	r4, r0
 8010e5e:	0003      	movs	r3, r0
 8010e60:	0008      	movs	r0, r1
 8010e62:	b087      	sub	sp, #28
 8010e64:	4028      	ands	r0, r5
 8010e66:	4288      	cmp	r0, r1
 8010e68:	d111      	bne.n	8010e8e <__ieee754_sqrt+0x3a>
 8010e6a:	0022      	movs	r2, r4
 8010e6c:	002b      	movs	r3, r5
 8010e6e:	0020      	movs	r0, r4
 8010e70:	0029      	movs	r1, r5
 8010e72:	f7f1 fd2f 	bl	80028d4 <__aeabi_dmul>
 8010e76:	0002      	movs	r2, r0
 8010e78:	000b      	movs	r3, r1
 8010e7a:	0020      	movs	r0, r4
 8010e7c:	0029      	movs	r1, r5
 8010e7e:	f7f0 fd29 	bl	80018d4 <__aeabi_dadd>
 8010e82:	0004      	movs	r4, r0
 8010e84:	000d      	movs	r5, r1
 8010e86:	0020      	movs	r0, r4
 8010e88:	0029      	movs	r1, r5
 8010e8a:	b007      	add	sp, #28
 8010e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010e8e:	2d00      	cmp	r5, #0
 8010e90:	dc11      	bgt.n	8010eb6 <__ieee754_sqrt+0x62>
 8010e92:	0069      	lsls	r1, r5, #1
 8010e94:	0849      	lsrs	r1, r1, #1
 8010e96:	4321      	orrs	r1, r4
 8010e98:	d0f5      	beq.n	8010e86 <__ieee754_sqrt+0x32>
 8010e9a:	2000      	movs	r0, #0
 8010e9c:	4285      	cmp	r5, r0
 8010e9e:	d010      	beq.n	8010ec2 <__ieee754_sqrt+0x6e>
 8010ea0:	0022      	movs	r2, r4
 8010ea2:	002b      	movs	r3, r5
 8010ea4:	0020      	movs	r0, r4
 8010ea6:	0029      	movs	r1, r5
 8010ea8:	f7f1 fffa 	bl	8002ea0 <__aeabi_dsub>
 8010eac:	0002      	movs	r2, r0
 8010eae:	000b      	movs	r3, r1
 8010eb0:	f7f1 f8d6 	bl	8002060 <__aeabi_ddiv>
 8010eb4:	e7e5      	b.n	8010e82 <__ieee754_sqrt+0x2e>
 8010eb6:	1528      	asrs	r0, r5, #20
 8010eb8:	d115      	bne.n	8010ee6 <__ieee754_sqrt+0x92>
 8010eba:	2480      	movs	r4, #128	@ 0x80
 8010ebc:	2100      	movs	r1, #0
 8010ebe:	0364      	lsls	r4, r4, #13
 8010ec0:	e007      	b.n	8010ed2 <__ieee754_sqrt+0x7e>
 8010ec2:	0ada      	lsrs	r2, r3, #11
 8010ec4:	3815      	subs	r0, #21
 8010ec6:	055b      	lsls	r3, r3, #21
 8010ec8:	2a00      	cmp	r2, #0
 8010eca:	d0fa      	beq.n	8010ec2 <__ieee754_sqrt+0x6e>
 8010ecc:	e7f5      	b.n	8010eba <__ieee754_sqrt+0x66>
 8010ece:	0052      	lsls	r2, r2, #1
 8010ed0:	3101      	adds	r1, #1
 8010ed2:	4222      	tst	r2, r4
 8010ed4:	d0fb      	beq.n	8010ece <__ieee754_sqrt+0x7a>
 8010ed6:	1e4c      	subs	r4, r1, #1
 8010ed8:	1b00      	subs	r0, r0, r4
 8010eda:	2420      	movs	r4, #32
 8010edc:	001d      	movs	r5, r3
 8010ede:	1a64      	subs	r4, r4, r1
 8010ee0:	40e5      	lsrs	r5, r4
 8010ee2:	408b      	lsls	r3, r1
 8010ee4:	432a      	orrs	r2, r5
 8010ee6:	4949      	ldr	r1, [pc, #292]	@ (801100c <__ieee754_sqrt+0x1b8>)
 8010ee8:	0312      	lsls	r2, r2, #12
 8010eea:	1844      	adds	r4, r0, r1
 8010eec:	2180      	movs	r1, #128	@ 0x80
 8010eee:	0b12      	lsrs	r2, r2, #12
 8010ef0:	0349      	lsls	r1, r1, #13
 8010ef2:	4311      	orrs	r1, r2
 8010ef4:	07c0      	lsls	r0, r0, #31
 8010ef6:	d403      	bmi.n	8010f00 <__ieee754_sqrt+0xac>
 8010ef8:	0fda      	lsrs	r2, r3, #31
 8010efa:	0049      	lsls	r1, r1, #1
 8010efc:	1851      	adds	r1, r2, r1
 8010efe:	005b      	lsls	r3, r3, #1
 8010f00:	2500      	movs	r5, #0
 8010f02:	1062      	asrs	r2, r4, #1
 8010f04:	0049      	lsls	r1, r1, #1
 8010f06:	2480      	movs	r4, #128	@ 0x80
 8010f08:	9205      	str	r2, [sp, #20]
 8010f0a:	0fda      	lsrs	r2, r3, #31
 8010f0c:	1852      	adds	r2, r2, r1
 8010f0e:	2016      	movs	r0, #22
 8010f10:	0029      	movs	r1, r5
 8010f12:	005b      	lsls	r3, r3, #1
 8010f14:	03a4      	lsls	r4, r4, #14
 8010f16:	190e      	adds	r6, r1, r4
 8010f18:	4296      	cmp	r6, r2
 8010f1a:	dc02      	bgt.n	8010f22 <__ieee754_sqrt+0xce>
 8010f1c:	1931      	adds	r1, r6, r4
 8010f1e:	1b92      	subs	r2, r2, r6
 8010f20:	192d      	adds	r5, r5, r4
 8010f22:	0fde      	lsrs	r6, r3, #31
 8010f24:	0052      	lsls	r2, r2, #1
 8010f26:	3801      	subs	r0, #1
 8010f28:	1992      	adds	r2, r2, r6
 8010f2a:	005b      	lsls	r3, r3, #1
 8010f2c:	0864      	lsrs	r4, r4, #1
 8010f2e:	2800      	cmp	r0, #0
 8010f30:	d1f1      	bne.n	8010f16 <__ieee754_sqrt+0xc2>
 8010f32:	2620      	movs	r6, #32
 8010f34:	2780      	movs	r7, #128	@ 0x80
 8010f36:	0004      	movs	r4, r0
 8010f38:	9604      	str	r6, [sp, #16]
 8010f3a:	063f      	lsls	r7, r7, #24
 8010f3c:	183e      	adds	r6, r7, r0
 8010f3e:	46b4      	mov	ip, r6
 8010f40:	428a      	cmp	r2, r1
 8010f42:	dc02      	bgt.n	8010f4a <__ieee754_sqrt+0xf6>
 8010f44:	d114      	bne.n	8010f70 <__ieee754_sqrt+0x11c>
 8010f46:	429e      	cmp	r6, r3
 8010f48:	d812      	bhi.n	8010f70 <__ieee754_sqrt+0x11c>
 8010f4a:	4660      	mov	r0, ip
 8010f4c:	4666      	mov	r6, ip
 8010f4e:	19c0      	adds	r0, r0, r7
 8010f50:	9100      	str	r1, [sp, #0]
 8010f52:	2e00      	cmp	r6, #0
 8010f54:	da03      	bge.n	8010f5e <__ieee754_sqrt+0x10a>
 8010f56:	43c6      	mvns	r6, r0
 8010f58:	0ff6      	lsrs	r6, r6, #31
 8010f5a:	198e      	adds	r6, r1, r6
 8010f5c:	9600      	str	r6, [sp, #0]
 8010f5e:	1a52      	subs	r2, r2, r1
 8010f60:	4563      	cmp	r3, ip
 8010f62:	4189      	sbcs	r1, r1
 8010f64:	4249      	negs	r1, r1
 8010f66:	1a52      	subs	r2, r2, r1
 8010f68:	4661      	mov	r1, ip
 8010f6a:	1a5b      	subs	r3, r3, r1
 8010f6c:	9900      	ldr	r1, [sp, #0]
 8010f6e:	19e4      	adds	r4, r4, r7
 8010f70:	0fde      	lsrs	r6, r3, #31
 8010f72:	0052      	lsls	r2, r2, #1
 8010f74:	1992      	adds	r2, r2, r6
 8010f76:	9e04      	ldr	r6, [sp, #16]
 8010f78:	005b      	lsls	r3, r3, #1
 8010f7a:	3e01      	subs	r6, #1
 8010f7c:	087f      	lsrs	r7, r7, #1
 8010f7e:	9604      	str	r6, [sp, #16]
 8010f80:	2e00      	cmp	r6, #0
 8010f82:	d1db      	bne.n	8010f3c <__ieee754_sqrt+0xe8>
 8010f84:	431a      	orrs	r2, r3
 8010f86:	d01f      	beq.n	8010fc8 <__ieee754_sqrt+0x174>
 8010f88:	4e21      	ldr	r6, [pc, #132]	@ (8011010 <__ieee754_sqrt+0x1bc>)
 8010f8a:	4f22      	ldr	r7, [pc, #136]	@ (8011014 <__ieee754_sqrt+0x1c0>)
 8010f8c:	6830      	ldr	r0, [r6, #0]
 8010f8e:	6871      	ldr	r1, [r6, #4]
 8010f90:	683a      	ldr	r2, [r7, #0]
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	9200      	str	r2, [sp, #0]
 8010f96:	9301      	str	r3, [sp, #4]
 8010f98:	6832      	ldr	r2, [r6, #0]
 8010f9a:	6873      	ldr	r3, [r6, #4]
 8010f9c:	9202      	str	r2, [sp, #8]
 8010f9e:	9303      	str	r3, [sp, #12]
 8010fa0:	9a00      	ldr	r2, [sp, #0]
 8010fa2:	9b01      	ldr	r3, [sp, #4]
 8010fa4:	f7f1 ff7c 	bl	8002ea0 <__aeabi_dsub>
 8010fa8:	0002      	movs	r2, r0
 8010faa:	000b      	movs	r3, r1
 8010fac:	9802      	ldr	r0, [sp, #8]
 8010fae:	9903      	ldr	r1, [sp, #12]
 8010fb0:	f7ef fa64 	bl	800047c <__aeabi_dcmple>
 8010fb4:	2800      	cmp	r0, #0
 8010fb6:	d007      	beq.n	8010fc8 <__ieee754_sqrt+0x174>
 8010fb8:	6830      	ldr	r0, [r6, #0]
 8010fba:	6871      	ldr	r1, [r6, #4]
 8010fbc:	683a      	ldr	r2, [r7, #0]
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	1c67      	adds	r7, r4, #1
 8010fc2:	d10c      	bne.n	8010fde <__ieee754_sqrt+0x18a>
 8010fc4:	9c04      	ldr	r4, [sp, #16]
 8010fc6:	3501      	adds	r5, #1
 8010fc8:	4a13      	ldr	r2, [pc, #76]	@ (8011018 <__ieee754_sqrt+0x1c4>)
 8010fca:	106b      	asrs	r3, r5, #1
 8010fcc:	189b      	adds	r3, r3, r2
 8010fce:	9a05      	ldr	r2, [sp, #20]
 8010fd0:	07ed      	lsls	r5, r5, #31
 8010fd2:	0864      	lsrs	r4, r4, #1
 8010fd4:	0512      	lsls	r2, r2, #20
 8010fd6:	4325      	orrs	r5, r4
 8010fd8:	0028      	movs	r0, r5
 8010fda:	18d1      	adds	r1, r2, r3
 8010fdc:	e751      	b.n	8010e82 <__ieee754_sqrt+0x2e>
 8010fde:	f7f0 fc79 	bl	80018d4 <__aeabi_dadd>
 8010fe2:	6877      	ldr	r7, [r6, #4]
 8010fe4:	6836      	ldr	r6, [r6, #0]
 8010fe6:	0002      	movs	r2, r0
 8010fe8:	000b      	movs	r3, r1
 8010fea:	0030      	movs	r0, r6
 8010fec:	0039      	movs	r1, r7
 8010fee:	f7ef fa3b 	bl	8000468 <__aeabi_dcmplt>
 8010ff2:	2800      	cmp	r0, #0
 8010ff4:	d004      	beq.n	8011000 <__ieee754_sqrt+0x1ac>
 8010ff6:	3402      	adds	r4, #2
 8010ff8:	4263      	negs	r3, r4
 8010ffa:	4163      	adcs	r3, r4
 8010ffc:	18ed      	adds	r5, r5, r3
 8010ffe:	e7e3      	b.n	8010fc8 <__ieee754_sqrt+0x174>
 8011000:	2301      	movs	r3, #1
 8011002:	3401      	adds	r4, #1
 8011004:	439c      	bics	r4, r3
 8011006:	e7df      	b.n	8010fc8 <__ieee754_sqrt+0x174>
 8011008:	7ff00000 	.word	0x7ff00000
 801100c:	fffffc01 	.word	0xfffffc01
 8011010:	08012188 	.word	0x08012188
 8011014:	08012180 	.word	0x08012180
 8011018:	3fe00000 	.word	0x3fe00000

0801101c <__ieee754_fmod>:
 801101c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801101e:	b087      	sub	sp, #28
 8011020:	9200      	str	r2, [sp, #0]
 8011022:	9301      	str	r3, [sp, #4]
 8011024:	9b01      	ldr	r3, [sp, #4]
 8011026:	9e00      	ldr	r6, [sp, #0]
 8011028:	005c      	lsls	r4, r3, #1
 801102a:	0863      	lsrs	r3, r4, #1
 801102c:	001c      	movs	r4, r3
 801102e:	469c      	mov	ip, r3
 8011030:	9604      	str	r6, [sp, #16]
 8011032:	4334      	orrs	r4, r6
 8011034:	d00d      	beq.n	8011052 <__ieee754_fmod+0x36>
 8011036:	4d7b      	ldr	r5, [pc, #492]	@ (8011224 <__ieee754_fmod+0x208>)
 8011038:	004c      	lsls	r4, r1, #1
 801103a:	9105      	str	r1, [sp, #20]
 801103c:	0864      	lsrs	r4, r4, #1
 801103e:	42ac      	cmp	r4, r5
 8011040:	d807      	bhi.n	8011052 <__ieee754_fmod+0x36>
 8011042:	4663      	mov	r3, ip
 8011044:	4275      	negs	r5, r6
 8011046:	4335      	orrs	r5, r6
 8011048:	0fed      	lsrs	r5, r5, #31
 801104a:	431d      	orrs	r5, r3
 801104c:	4b76      	ldr	r3, [pc, #472]	@ (8011228 <__ieee754_fmod+0x20c>)
 801104e:	429d      	cmp	r5, r3
 8011050:	d909      	bls.n	8011066 <__ieee754_fmod+0x4a>
 8011052:	9a00      	ldr	r2, [sp, #0]
 8011054:	9b01      	ldr	r3, [sp, #4]
 8011056:	f7f1 fc3d 	bl	80028d4 <__aeabi_dmul>
 801105a:	0002      	movs	r2, r0
 801105c:	000b      	movs	r3, r1
 801105e:	f7f0 ffff 	bl	8002060 <__aeabi_ddiv>
 8011062:	b007      	add	sp, #28
 8011064:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011066:	9b05      	ldr	r3, [sp, #20]
 8011068:	0007      	movs	r7, r0
 801106a:	0fdb      	lsrs	r3, r3, #31
 801106c:	07db      	lsls	r3, r3, #31
 801106e:	0005      	movs	r5, r0
 8011070:	9303      	str	r3, [sp, #12]
 8011072:	4564      	cmp	r4, ip
 8011074:	dc0a      	bgt.n	801108c <__ieee754_fmod+0x70>
 8011076:	dbf4      	blt.n	8011062 <__ieee754_fmod+0x46>
 8011078:	4286      	cmp	r6, r0
 801107a:	d8f2      	bhi.n	8011062 <__ieee754_fmod+0x46>
 801107c:	d106      	bne.n	801108c <__ieee754_fmod+0x70>
 801107e:	9a03      	ldr	r2, [sp, #12]
 8011080:	4b6a      	ldr	r3, [pc, #424]	@ (801122c <__ieee754_fmod+0x210>)
 8011082:	0f12      	lsrs	r2, r2, #28
 8011084:	189b      	adds	r3, r3, r2
 8011086:	6818      	ldr	r0, [r3, #0]
 8011088:	6859      	ldr	r1, [r3, #4]
 801108a:	e7ea      	b.n	8011062 <__ieee754_fmod+0x46>
 801108c:	9b05      	ldr	r3, [sp, #20]
 801108e:	4a66      	ldr	r2, [pc, #408]	@ (8011228 <__ieee754_fmod+0x20c>)
 8011090:	4213      	tst	r3, r2
 8011092:	d14e      	bne.n	8011132 <__ieee754_fmod+0x116>
 8011094:	2c00      	cmp	r4, #0
 8011096:	d145      	bne.n	8011124 <__ieee754_fmod+0x108>
 8011098:	0039      	movs	r1, r7
 801109a:	4865      	ldr	r0, [pc, #404]	@ (8011230 <__ieee754_fmod+0x214>)
 801109c:	2900      	cmp	r1, #0
 801109e:	dc3e      	bgt.n	801111e <__ieee754_fmod+0x102>
 80110a0:	4b61      	ldr	r3, [pc, #388]	@ (8011228 <__ieee754_fmod+0x20c>)
 80110a2:	9a01      	ldr	r2, [sp, #4]
 80110a4:	4213      	tst	r3, r2
 80110a6:	d152      	bne.n	801114e <__ieee754_fmod+0x132>
 80110a8:	4663      	mov	r3, ip
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	d148      	bne.n	8011140 <__ieee754_fmod+0x124>
 80110ae:	4960      	ldr	r1, [pc, #384]	@ (8011230 <__ieee754_fmod+0x214>)
 80110b0:	2e00      	cmp	r6, #0
 80110b2:	dc42      	bgt.n	801113a <__ieee754_fmod+0x11e>
 80110b4:	4e5f      	ldr	r6, [pc, #380]	@ (8011234 <__ieee754_fmod+0x218>)
 80110b6:	42b0      	cmp	r0, r6
 80110b8:	db4e      	blt.n	8011158 <__ieee754_fmod+0x13c>
 80110ba:	2480      	movs	r4, #128	@ 0x80
 80110bc:	9b05      	ldr	r3, [sp, #20]
 80110be:	0364      	lsls	r4, r4, #13
 80110c0:	031f      	lsls	r7, r3, #12
 80110c2:	0b3f      	lsrs	r7, r7, #12
 80110c4:	433c      	orrs	r4, r7
 80110c6:	42b1      	cmp	r1, r6
 80110c8:	db5a      	blt.n	8011180 <__ieee754_fmod+0x164>
 80110ca:	2280      	movs	r2, #128	@ 0x80
 80110cc:	9b01      	ldr	r3, [sp, #4]
 80110ce:	0352      	lsls	r2, r2, #13
 80110d0:	031b      	lsls	r3, r3, #12
 80110d2:	0b1b      	lsrs	r3, r3, #12
 80110d4:	431a      	orrs	r2, r3
 80110d6:	4694      	mov	ip, r2
 80110d8:	1a40      	subs	r0, r0, r1
 80110da:	4663      	mov	r3, ip
 80110dc:	9a04      	ldr	r2, [sp, #16]
 80110de:	1ae3      	subs	r3, r4, r3
 80110e0:	1aaa      	subs	r2, r5, r2
 80110e2:	2800      	cmp	r0, #0
 80110e4:	d166      	bne.n	80111b4 <__ieee754_fmod+0x198>
 80110e6:	9804      	ldr	r0, [sp, #16]
 80110e8:	4285      	cmp	r5, r0
 80110ea:	4180      	sbcs	r0, r0
 80110ec:	4240      	negs	r0, r0
 80110ee:	1a1b      	subs	r3, r3, r0
 80110f0:	d501      	bpl.n	80110f6 <__ieee754_fmod+0xda>
 80110f2:	002a      	movs	r2, r5
 80110f4:	0023      	movs	r3, r4
 80110f6:	0018      	movs	r0, r3
 80110f8:	4310      	orrs	r0, r2
 80110fa:	d0c0      	beq.n	801107e <__ieee754_fmod+0x62>
 80110fc:	2080      	movs	r0, #128	@ 0x80
 80110fe:	0340      	lsls	r0, r0, #13
 8011100:	4283      	cmp	r3, r0
 8011102:	db6c      	blt.n	80111de <__ieee754_fmod+0x1c2>
 8011104:	42b1      	cmp	r1, r6
 8011106:	db70      	blt.n	80111ea <__ieee754_fmod+0x1ce>
 8011108:	484b      	ldr	r0, [pc, #300]	@ (8011238 <__ieee754_fmod+0x21c>)
 801110a:	181b      	adds	r3, r3, r0
 801110c:	9803      	ldr	r0, [sp, #12]
 801110e:	4303      	orrs	r3, r0
 8011110:	484a      	ldr	r0, [pc, #296]	@ (801123c <__ieee754_fmod+0x220>)
 8011112:	1809      	adds	r1, r1, r0
 8011114:	050c      	lsls	r4, r1, #20
 8011116:	4323      	orrs	r3, r4
 8011118:	0019      	movs	r1, r3
 801111a:	0010      	movs	r0, r2
 801111c:	e7a1      	b.n	8011062 <__ieee754_fmod+0x46>
 801111e:	3801      	subs	r0, #1
 8011120:	0049      	lsls	r1, r1, #1
 8011122:	e7bb      	b.n	801109c <__ieee754_fmod+0x80>
 8011124:	4843      	ldr	r0, [pc, #268]	@ (8011234 <__ieee754_fmod+0x218>)
 8011126:	02e1      	lsls	r1, r4, #11
 8011128:	2900      	cmp	r1, #0
 801112a:	ddb9      	ble.n	80110a0 <__ieee754_fmod+0x84>
 801112c:	3801      	subs	r0, #1
 801112e:	0049      	lsls	r1, r1, #1
 8011130:	e7fa      	b.n	8011128 <__ieee754_fmod+0x10c>
 8011132:	4b43      	ldr	r3, [pc, #268]	@ (8011240 <__ieee754_fmod+0x224>)
 8011134:	1520      	asrs	r0, r4, #20
 8011136:	18c0      	adds	r0, r0, r3
 8011138:	e7b2      	b.n	80110a0 <__ieee754_fmod+0x84>
 801113a:	3901      	subs	r1, #1
 801113c:	0076      	lsls	r6, r6, #1
 801113e:	e7b7      	b.n	80110b0 <__ieee754_fmod+0x94>
 8011140:	493c      	ldr	r1, [pc, #240]	@ (8011234 <__ieee754_fmod+0x218>)
 8011142:	02de      	lsls	r6, r3, #11
 8011144:	2e00      	cmp	r6, #0
 8011146:	ddb5      	ble.n	80110b4 <__ieee754_fmod+0x98>
 8011148:	3901      	subs	r1, #1
 801114a:	0076      	lsls	r6, r6, #1
 801114c:	e7fa      	b.n	8011144 <__ieee754_fmod+0x128>
 801114e:	4663      	mov	r3, ip
 8011150:	1519      	asrs	r1, r3, #20
 8011152:	4b3b      	ldr	r3, [pc, #236]	@ (8011240 <__ieee754_fmod+0x224>)
 8011154:	18c9      	adds	r1, r1, r3
 8011156:	e7ad      	b.n	80110b4 <__ieee754_fmod+0x98>
 8011158:	1a35      	subs	r5, r6, r0
 801115a:	2d1f      	cmp	r5, #31
 801115c:	dc0a      	bgt.n	8011174 <__ieee754_fmod+0x158>
 801115e:	40ac      	lsls	r4, r5
 8011160:	4b38      	ldr	r3, [pc, #224]	@ (8011244 <__ieee754_fmod+0x228>)
 8011162:	0022      	movs	r2, r4
 8011164:	18c4      	adds	r4, r0, r3
 8011166:	003b      	movs	r3, r7
 8011168:	40e3      	lsrs	r3, r4
 801116a:	40af      	lsls	r7, r5
 801116c:	001c      	movs	r4, r3
 801116e:	003d      	movs	r5, r7
 8011170:	4314      	orrs	r4, r2
 8011172:	e7a8      	b.n	80110c6 <__ieee754_fmod+0xaa>
 8011174:	4c34      	ldr	r4, [pc, #208]	@ (8011248 <__ieee754_fmod+0x22c>)
 8011176:	2500      	movs	r5, #0
 8011178:	1a24      	subs	r4, r4, r0
 801117a:	40a7      	lsls	r7, r4
 801117c:	003c      	movs	r4, r7
 801117e:	e7a2      	b.n	80110c6 <__ieee754_fmod+0xaa>
 8011180:	1a77      	subs	r7, r6, r1
 8011182:	2f1f      	cmp	r7, #31
 8011184:	dc0f      	bgt.n	80111a6 <__ieee754_fmod+0x18a>
 8011186:	4663      	mov	r3, ip
 8011188:	4a2e      	ldr	r2, [pc, #184]	@ (8011244 <__ieee754_fmod+0x228>)
 801118a:	40bb      	lsls	r3, r7
 801118c:	4694      	mov	ip, r2
 801118e:	448c      	add	ip, r1
 8011190:	9304      	str	r3, [sp, #16]
 8011192:	4663      	mov	r3, ip
 8011194:	9a00      	ldr	r2, [sp, #0]
 8011196:	40da      	lsrs	r2, r3
 8011198:	9b04      	ldr	r3, [sp, #16]
 801119a:	431a      	orrs	r2, r3
 801119c:	9b00      	ldr	r3, [sp, #0]
 801119e:	4694      	mov	ip, r2
 80111a0:	40bb      	lsls	r3, r7
 80111a2:	9304      	str	r3, [sp, #16]
 80111a4:	e798      	b.n	80110d8 <__ieee754_fmod+0xbc>
 80111a6:	4b28      	ldr	r3, [pc, #160]	@ (8011248 <__ieee754_fmod+0x22c>)
 80111a8:	9a00      	ldr	r2, [sp, #0]
 80111aa:	1a5b      	subs	r3, r3, r1
 80111ac:	409a      	lsls	r2, r3
 80111ae:	2300      	movs	r3, #0
 80111b0:	4694      	mov	ip, r2
 80111b2:	e7f6      	b.n	80111a2 <__ieee754_fmod+0x186>
 80111b4:	9f04      	ldr	r7, [sp, #16]
 80111b6:	42bd      	cmp	r5, r7
 80111b8:	41bf      	sbcs	r7, r7
 80111ba:	427f      	negs	r7, r7
 80111bc:	1bdb      	subs	r3, r3, r7
 80111be:	d505      	bpl.n	80111cc <__ieee754_fmod+0x1b0>
 80111c0:	0feb      	lsrs	r3, r5, #31
 80111c2:	0064      	lsls	r4, r4, #1
 80111c4:	18e4      	adds	r4, r4, r3
 80111c6:	006d      	lsls	r5, r5, #1
 80111c8:	3801      	subs	r0, #1
 80111ca:	e786      	b.n	80110da <__ieee754_fmod+0xbe>
 80111cc:	001c      	movs	r4, r3
 80111ce:	4314      	orrs	r4, r2
 80111d0:	d100      	bne.n	80111d4 <__ieee754_fmod+0x1b8>
 80111d2:	e754      	b.n	801107e <__ieee754_fmod+0x62>
 80111d4:	005b      	lsls	r3, r3, #1
 80111d6:	0fd4      	lsrs	r4, r2, #31
 80111d8:	191c      	adds	r4, r3, r4
 80111da:	0055      	lsls	r5, r2, #1
 80111dc:	e7f4      	b.n	80111c8 <__ieee754_fmod+0x1ac>
 80111de:	0fd4      	lsrs	r4, r2, #31
 80111e0:	005b      	lsls	r3, r3, #1
 80111e2:	191b      	adds	r3, r3, r4
 80111e4:	0052      	lsls	r2, r2, #1
 80111e6:	3901      	subs	r1, #1
 80111e8:	e78a      	b.n	8011100 <__ieee754_fmod+0xe4>
 80111ea:	1a76      	subs	r6, r6, r1
 80111ec:	2e14      	cmp	r6, #20
 80111ee:	dc0b      	bgt.n	8011208 <__ieee754_fmod+0x1ec>
 80111f0:	40f2      	lsrs	r2, r6
 80111f2:	0010      	movs	r0, r2
 80111f4:	4a13      	ldr	r2, [pc, #76]	@ (8011244 <__ieee754_fmod+0x228>)
 80111f6:	1889      	adds	r1, r1, r2
 80111f8:	001a      	movs	r2, r3
 80111fa:	408a      	lsls	r2, r1
 80111fc:	4133      	asrs	r3, r6
 80111fe:	4302      	orrs	r2, r0
 8011200:	9c03      	ldr	r4, [sp, #12]
 8011202:	431c      	orrs	r4, r3
 8011204:	0021      	movs	r1, r4
 8011206:	e788      	b.n	801111a <__ieee754_fmod+0xfe>
 8011208:	2e1f      	cmp	r6, #31
 801120a:	dc06      	bgt.n	801121a <__ieee754_fmod+0x1fe>
 801120c:	480d      	ldr	r0, [pc, #52]	@ (8011244 <__ieee754_fmod+0x228>)
 801120e:	40f2      	lsrs	r2, r6
 8011210:	1809      	adds	r1, r1, r0
 8011212:	408b      	lsls	r3, r1
 8011214:	431a      	orrs	r2, r3
 8011216:	9b03      	ldr	r3, [sp, #12]
 8011218:	e7f2      	b.n	8011200 <__ieee754_fmod+0x1e4>
 801121a:	4a0b      	ldr	r2, [pc, #44]	@ (8011248 <__ieee754_fmod+0x22c>)
 801121c:	1a52      	subs	r2, r2, r1
 801121e:	4113      	asrs	r3, r2
 8011220:	001a      	movs	r2, r3
 8011222:	e7f8      	b.n	8011216 <__ieee754_fmod+0x1fa>
 8011224:	7fefffff 	.word	0x7fefffff
 8011228:	7ff00000 	.word	0x7ff00000
 801122c:	08012190 	.word	0x08012190
 8011230:	fffffbed 	.word	0xfffffbed
 8011234:	fffffc02 	.word	0xfffffc02
 8011238:	fff00000 	.word	0xfff00000
 801123c:	000003ff 	.word	0x000003ff
 8011240:	fffffc01 	.word	0xfffffc01
 8011244:	0000041e 	.word	0x0000041e
 8011248:	fffffbe2 	.word	0xfffffbe2

0801124c <_init>:
 801124c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801124e:	46c0      	nop			@ (mov r8, r8)
 8011250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011252:	bc08      	pop	{r3}
 8011254:	469e      	mov	lr, r3
 8011256:	4770      	bx	lr

08011258 <_fini>:
 8011258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801125a:	46c0      	nop			@ (mov r8, r8)
 801125c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801125e:	bc08      	pop	{r3}
 8011260:	469e      	mov	lr, r3
 8011262:	4770      	bx	lr
