
ynotag.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b74c  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000af0  0800b808  0800b808  0000c808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c2f8  0800c2f8  0000eef0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c2f8  0800c2f8  0000d2f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c300  0800c300  0000eef0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c300  0800c300  0000d300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c304  0800c304  0000d304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000ef0  20000000  0800c308  0000e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006e4  20000ef0  0800d1f8  0000eef0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200015d4  0800d1f8  0000f5d4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000eef0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b5b8  00000000  00000000  0000ef18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003556  00000000  00000000  0002a4d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001860  00000000  00000000  0002da28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001402  00000000  00000000  0002f288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fb00  00000000  00000000  0003068a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001eb90  00000000  00000000  0005018a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cae8c  00000000  00000000  0006ed1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00139ba6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000064b8  00000000  00000000  00139bec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  001400a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000ef0 	.word	0x20000ef0
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800b7f0 	.word	0x0800b7f0

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000ef4 	.word	0x20000ef4
 8000100:	0800b7f0 	.word	0x0800b7f0

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	@ 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	@ 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			@ (mov r8, r8)

08000418 <__aeabi_cdrcmple>:
 8000418:	4684      	mov	ip, r0
 800041a:	0010      	movs	r0, r2
 800041c:	4662      	mov	r2, ip
 800041e:	468c      	mov	ip, r1
 8000420:	0019      	movs	r1, r3
 8000422:	4663      	mov	r3, ip
 8000424:	e000      	b.n	8000428 <__aeabi_cdcmpeq>
 8000426:	46c0      	nop			@ (mov r8, r8)

08000428 <__aeabi_cdcmpeq>:
 8000428:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800042a:	f001 ff65 	bl	80022f8 <__ledf2>
 800042e:	2800      	cmp	r0, #0
 8000430:	d401      	bmi.n	8000436 <__aeabi_cdcmpeq+0xe>
 8000432:	2100      	movs	r1, #0
 8000434:	42c8      	cmn	r0, r1
 8000436:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000438 <__aeabi_dcmpeq>:
 8000438:	b510      	push	{r4, lr}
 800043a:	f001 fea5 	bl	8002188 <__eqdf2>
 800043e:	4240      	negs	r0, r0
 8000440:	3001      	adds	r0, #1
 8000442:	bd10      	pop	{r4, pc}

08000444 <__aeabi_dcmplt>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 ff57 	bl	80022f8 <__ledf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	db01      	blt.n	8000452 <__aeabi_dcmplt+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			@ (mov r8, r8)

08000458 <__aeabi_dcmple>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 ff4d 	bl	80022f8 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	dd01      	ble.n	8000466 <__aeabi_dcmple+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmpgt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fecf 	bl	8002210 <__gedf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dc01      	bgt.n	800047a <__aeabi_dcmpgt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpge>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fec5 	bl	8002210 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	da01      	bge.n	800048e <__aeabi_dcmpge+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_cfrcmple>:
 8000494:	4684      	mov	ip, r0
 8000496:	0008      	movs	r0, r1
 8000498:	4661      	mov	r1, ip
 800049a:	e7ff      	b.n	800049c <__aeabi_cfcmpeq>

0800049c <__aeabi_cfcmpeq>:
 800049c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800049e:	f000 fc59 	bl	8000d54 <__lesf2>
 80004a2:	2800      	cmp	r0, #0
 80004a4:	d401      	bmi.n	80004aa <__aeabi_cfcmpeq+0xe>
 80004a6:	2100      	movs	r1, #0
 80004a8:	42c8      	cmn	r0, r1
 80004aa:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004ac <__aeabi_fcmpeq>:
 80004ac:	b510      	push	{r4, lr}
 80004ae:	f000 fbd9 	bl	8000c64 <__eqsf2>
 80004b2:	4240      	negs	r0, r0
 80004b4:	3001      	adds	r0, #1
 80004b6:	bd10      	pop	{r4, pc}

080004b8 <__aeabi_fcmplt>:
 80004b8:	b510      	push	{r4, lr}
 80004ba:	f000 fc4b 	bl	8000d54 <__lesf2>
 80004be:	2800      	cmp	r0, #0
 80004c0:	db01      	blt.n	80004c6 <__aeabi_fcmplt+0xe>
 80004c2:	2000      	movs	r0, #0
 80004c4:	bd10      	pop	{r4, pc}
 80004c6:	2001      	movs	r0, #1
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	46c0      	nop			@ (mov r8, r8)

080004cc <__aeabi_fcmple>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fc41 	bl	8000d54 <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	dd01      	ble.n	80004da <__aeabi_fcmple+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			@ (mov r8, r8)

080004e0 <__aeabi_fcmpgt>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fbe7 	bl	8000cb4 <__gesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dc01      	bgt.n	80004ee <__aeabi_fcmpgt+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			@ (mov r8, r8)

080004f4 <__aeabi_fcmpge>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fbdd 	bl	8000cb4 <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	da01      	bge.n	8000502 <__aeabi_fcmpge+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			@ (mov r8, r8)

08000508 <__aeabi_uldivmod>:
 8000508:	2b00      	cmp	r3, #0
 800050a:	d111      	bne.n	8000530 <__aeabi_uldivmod+0x28>
 800050c:	2a00      	cmp	r2, #0
 800050e:	d10f      	bne.n	8000530 <__aeabi_uldivmod+0x28>
 8000510:	2900      	cmp	r1, #0
 8000512:	d100      	bne.n	8000516 <__aeabi_uldivmod+0xe>
 8000514:	2800      	cmp	r0, #0
 8000516:	d002      	beq.n	800051e <__aeabi_uldivmod+0x16>
 8000518:	2100      	movs	r1, #0
 800051a:	43c9      	mvns	r1, r1
 800051c:	0008      	movs	r0, r1
 800051e:	b407      	push	{r0, r1, r2}
 8000520:	4802      	ldr	r0, [pc, #8]	@ (800052c <__aeabi_uldivmod+0x24>)
 8000522:	a102      	add	r1, pc, #8	@ (adr r1, 800052c <__aeabi_uldivmod+0x24>)
 8000524:	1840      	adds	r0, r0, r1
 8000526:	9002      	str	r0, [sp, #8]
 8000528:	bd03      	pop	{r0, r1, pc}
 800052a:	46c0      	nop			@ (mov r8, r8)
 800052c:	fffffee9 	.word	0xfffffee9
 8000530:	b403      	push	{r0, r1}
 8000532:	4668      	mov	r0, sp
 8000534:	b501      	push	{r0, lr}
 8000536:	9802      	ldr	r0, [sp, #8]
 8000538:	f000 f81e 	bl	8000578 <__udivmoddi4>
 800053c:	9b01      	ldr	r3, [sp, #4]
 800053e:	469e      	mov	lr, r3
 8000540:	b002      	add	sp, #8
 8000542:	bc0c      	pop	{r2, r3}
 8000544:	4770      	bx	lr
 8000546:	46c0      	nop			@ (mov r8, r8)

08000548 <__aeabi_f2uiz>:
 8000548:	219e      	movs	r1, #158	@ 0x9e
 800054a:	b510      	push	{r4, lr}
 800054c:	05c9      	lsls	r1, r1, #23
 800054e:	1c04      	adds	r4, r0, #0
 8000550:	f7ff ffd0 	bl	80004f4 <__aeabi_fcmpge>
 8000554:	2800      	cmp	r0, #0
 8000556:	d103      	bne.n	8000560 <__aeabi_f2uiz+0x18>
 8000558:	1c20      	adds	r0, r4, #0
 800055a:	f000 ff2b 	bl	80013b4 <__aeabi_f2iz>
 800055e:	bd10      	pop	{r4, pc}
 8000560:	219e      	movs	r1, #158	@ 0x9e
 8000562:	1c20      	adds	r0, r4, #0
 8000564:	05c9      	lsls	r1, r1, #23
 8000566:	f000 fd81 	bl	800106c <__aeabi_fsub>
 800056a:	f000 ff23 	bl	80013b4 <__aeabi_f2iz>
 800056e:	2380      	movs	r3, #128	@ 0x80
 8000570:	061b      	lsls	r3, r3, #24
 8000572:	469c      	mov	ip, r3
 8000574:	4460      	add	r0, ip
 8000576:	e7f2      	b.n	800055e <__aeabi_f2uiz+0x16>

08000578 <__udivmoddi4>:
 8000578:	b5f0      	push	{r4, r5, r6, r7, lr}
 800057a:	4657      	mov	r7, sl
 800057c:	464e      	mov	r6, r9
 800057e:	4645      	mov	r5, r8
 8000580:	46de      	mov	lr, fp
 8000582:	b5e0      	push	{r5, r6, r7, lr}
 8000584:	0004      	movs	r4, r0
 8000586:	000d      	movs	r5, r1
 8000588:	4692      	mov	sl, r2
 800058a:	4699      	mov	r9, r3
 800058c:	b083      	sub	sp, #12
 800058e:	428b      	cmp	r3, r1
 8000590:	d830      	bhi.n	80005f4 <__udivmoddi4+0x7c>
 8000592:	d02d      	beq.n	80005f0 <__udivmoddi4+0x78>
 8000594:	4649      	mov	r1, r9
 8000596:	4650      	mov	r0, sl
 8000598:	f002 fe90 	bl	80032bc <__clzdi2>
 800059c:	0029      	movs	r1, r5
 800059e:	0006      	movs	r6, r0
 80005a0:	0020      	movs	r0, r4
 80005a2:	f002 fe8b 	bl	80032bc <__clzdi2>
 80005a6:	1a33      	subs	r3, r6, r0
 80005a8:	4698      	mov	r8, r3
 80005aa:	3b20      	subs	r3, #32
 80005ac:	d434      	bmi.n	8000618 <__udivmoddi4+0xa0>
 80005ae:	469b      	mov	fp, r3
 80005b0:	4653      	mov	r3, sl
 80005b2:	465a      	mov	r2, fp
 80005b4:	4093      	lsls	r3, r2
 80005b6:	4642      	mov	r2, r8
 80005b8:	001f      	movs	r7, r3
 80005ba:	4653      	mov	r3, sl
 80005bc:	4093      	lsls	r3, r2
 80005be:	001e      	movs	r6, r3
 80005c0:	42af      	cmp	r7, r5
 80005c2:	d83b      	bhi.n	800063c <__udivmoddi4+0xc4>
 80005c4:	42af      	cmp	r7, r5
 80005c6:	d100      	bne.n	80005ca <__udivmoddi4+0x52>
 80005c8:	e079      	b.n	80006be <__udivmoddi4+0x146>
 80005ca:	465b      	mov	r3, fp
 80005cc:	1ba4      	subs	r4, r4, r6
 80005ce:	41bd      	sbcs	r5, r7
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	da00      	bge.n	80005d6 <__udivmoddi4+0x5e>
 80005d4:	e076      	b.n	80006c4 <__udivmoddi4+0x14c>
 80005d6:	2200      	movs	r2, #0
 80005d8:	2300      	movs	r3, #0
 80005da:	9200      	str	r2, [sp, #0]
 80005dc:	9301      	str	r3, [sp, #4]
 80005de:	2301      	movs	r3, #1
 80005e0:	465a      	mov	r2, fp
 80005e2:	4093      	lsls	r3, r2
 80005e4:	9301      	str	r3, [sp, #4]
 80005e6:	2301      	movs	r3, #1
 80005e8:	4642      	mov	r2, r8
 80005ea:	4093      	lsls	r3, r2
 80005ec:	9300      	str	r3, [sp, #0]
 80005ee:	e029      	b.n	8000644 <__udivmoddi4+0xcc>
 80005f0:	4282      	cmp	r2, r0
 80005f2:	d9cf      	bls.n	8000594 <__udivmoddi4+0x1c>
 80005f4:	2200      	movs	r2, #0
 80005f6:	2300      	movs	r3, #0
 80005f8:	9200      	str	r2, [sp, #0]
 80005fa:	9301      	str	r3, [sp, #4]
 80005fc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <__udivmoddi4+0x8e>
 8000602:	601c      	str	r4, [r3, #0]
 8000604:	605d      	str	r5, [r3, #4]
 8000606:	9800      	ldr	r0, [sp, #0]
 8000608:	9901      	ldr	r1, [sp, #4]
 800060a:	b003      	add	sp, #12
 800060c:	bcf0      	pop	{r4, r5, r6, r7}
 800060e:	46bb      	mov	fp, r7
 8000610:	46b2      	mov	sl, r6
 8000612:	46a9      	mov	r9, r5
 8000614:	46a0      	mov	r8, r4
 8000616:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000618:	4642      	mov	r2, r8
 800061a:	469b      	mov	fp, r3
 800061c:	2320      	movs	r3, #32
 800061e:	1a9b      	subs	r3, r3, r2
 8000620:	4652      	mov	r2, sl
 8000622:	40da      	lsrs	r2, r3
 8000624:	4641      	mov	r1, r8
 8000626:	0013      	movs	r3, r2
 8000628:	464a      	mov	r2, r9
 800062a:	408a      	lsls	r2, r1
 800062c:	0017      	movs	r7, r2
 800062e:	4642      	mov	r2, r8
 8000630:	431f      	orrs	r7, r3
 8000632:	4653      	mov	r3, sl
 8000634:	4093      	lsls	r3, r2
 8000636:	001e      	movs	r6, r3
 8000638:	42af      	cmp	r7, r5
 800063a:	d9c3      	bls.n	80005c4 <__udivmoddi4+0x4c>
 800063c:	2200      	movs	r2, #0
 800063e:	2300      	movs	r3, #0
 8000640:	9200      	str	r2, [sp, #0]
 8000642:	9301      	str	r3, [sp, #4]
 8000644:	4643      	mov	r3, r8
 8000646:	2b00      	cmp	r3, #0
 8000648:	d0d8      	beq.n	80005fc <__udivmoddi4+0x84>
 800064a:	07fb      	lsls	r3, r7, #31
 800064c:	0872      	lsrs	r2, r6, #1
 800064e:	431a      	orrs	r2, r3
 8000650:	4646      	mov	r6, r8
 8000652:	087b      	lsrs	r3, r7, #1
 8000654:	e00e      	b.n	8000674 <__udivmoddi4+0xfc>
 8000656:	42ab      	cmp	r3, r5
 8000658:	d101      	bne.n	800065e <__udivmoddi4+0xe6>
 800065a:	42a2      	cmp	r2, r4
 800065c:	d80c      	bhi.n	8000678 <__udivmoddi4+0x100>
 800065e:	1aa4      	subs	r4, r4, r2
 8000660:	419d      	sbcs	r5, r3
 8000662:	2001      	movs	r0, #1
 8000664:	1924      	adds	r4, r4, r4
 8000666:	416d      	adcs	r5, r5
 8000668:	2100      	movs	r1, #0
 800066a:	3e01      	subs	r6, #1
 800066c:	1824      	adds	r4, r4, r0
 800066e:	414d      	adcs	r5, r1
 8000670:	2e00      	cmp	r6, #0
 8000672:	d006      	beq.n	8000682 <__udivmoddi4+0x10a>
 8000674:	42ab      	cmp	r3, r5
 8000676:	d9ee      	bls.n	8000656 <__udivmoddi4+0xde>
 8000678:	3e01      	subs	r6, #1
 800067a:	1924      	adds	r4, r4, r4
 800067c:	416d      	adcs	r5, r5
 800067e:	2e00      	cmp	r6, #0
 8000680:	d1f8      	bne.n	8000674 <__udivmoddi4+0xfc>
 8000682:	9800      	ldr	r0, [sp, #0]
 8000684:	9901      	ldr	r1, [sp, #4]
 8000686:	465b      	mov	r3, fp
 8000688:	1900      	adds	r0, r0, r4
 800068a:	4169      	adcs	r1, r5
 800068c:	2b00      	cmp	r3, #0
 800068e:	db24      	blt.n	80006da <__udivmoddi4+0x162>
 8000690:	002b      	movs	r3, r5
 8000692:	465a      	mov	r2, fp
 8000694:	4644      	mov	r4, r8
 8000696:	40d3      	lsrs	r3, r2
 8000698:	002a      	movs	r2, r5
 800069a:	40e2      	lsrs	r2, r4
 800069c:	001c      	movs	r4, r3
 800069e:	465b      	mov	r3, fp
 80006a0:	0015      	movs	r5, r2
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	db2a      	blt.n	80006fc <__udivmoddi4+0x184>
 80006a6:	0026      	movs	r6, r4
 80006a8:	409e      	lsls	r6, r3
 80006aa:	0033      	movs	r3, r6
 80006ac:	0026      	movs	r6, r4
 80006ae:	4647      	mov	r7, r8
 80006b0:	40be      	lsls	r6, r7
 80006b2:	0032      	movs	r2, r6
 80006b4:	1a80      	subs	r0, r0, r2
 80006b6:	4199      	sbcs	r1, r3
 80006b8:	9000      	str	r0, [sp, #0]
 80006ba:	9101      	str	r1, [sp, #4]
 80006bc:	e79e      	b.n	80005fc <__udivmoddi4+0x84>
 80006be:	42a3      	cmp	r3, r4
 80006c0:	d8bc      	bhi.n	800063c <__udivmoddi4+0xc4>
 80006c2:	e782      	b.n	80005ca <__udivmoddi4+0x52>
 80006c4:	4642      	mov	r2, r8
 80006c6:	2320      	movs	r3, #32
 80006c8:	2100      	movs	r1, #0
 80006ca:	1a9b      	subs	r3, r3, r2
 80006cc:	2200      	movs	r2, #0
 80006ce:	9100      	str	r1, [sp, #0]
 80006d0:	9201      	str	r2, [sp, #4]
 80006d2:	2201      	movs	r2, #1
 80006d4:	40da      	lsrs	r2, r3
 80006d6:	9201      	str	r2, [sp, #4]
 80006d8:	e785      	b.n	80005e6 <__udivmoddi4+0x6e>
 80006da:	4642      	mov	r2, r8
 80006dc:	2320      	movs	r3, #32
 80006de:	1a9b      	subs	r3, r3, r2
 80006e0:	002a      	movs	r2, r5
 80006e2:	4646      	mov	r6, r8
 80006e4:	409a      	lsls	r2, r3
 80006e6:	0023      	movs	r3, r4
 80006e8:	40f3      	lsrs	r3, r6
 80006ea:	4644      	mov	r4, r8
 80006ec:	4313      	orrs	r3, r2
 80006ee:	002a      	movs	r2, r5
 80006f0:	40e2      	lsrs	r2, r4
 80006f2:	001c      	movs	r4, r3
 80006f4:	465b      	mov	r3, fp
 80006f6:	0015      	movs	r5, r2
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	dad4      	bge.n	80006a6 <__udivmoddi4+0x12e>
 80006fc:	4642      	mov	r2, r8
 80006fe:	002f      	movs	r7, r5
 8000700:	2320      	movs	r3, #32
 8000702:	0026      	movs	r6, r4
 8000704:	4097      	lsls	r7, r2
 8000706:	1a9b      	subs	r3, r3, r2
 8000708:	40de      	lsrs	r6, r3
 800070a:	003b      	movs	r3, r7
 800070c:	4333      	orrs	r3, r6
 800070e:	e7cd      	b.n	80006ac <__udivmoddi4+0x134>

08000710 <__aeabi_fadd>:
 8000710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000712:	46ce      	mov	lr, r9
 8000714:	4647      	mov	r7, r8
 8000716:	0243      	lsls	r3, r0, #9
 8000718:	0a5a      	lsrs	r2, r3, #9
 800071a:	024e      	lsls	r6, r1, #9
 800071c:	0045      	lsls	r5, r0, #1
 800071e:	0fc4      	lsrs	r4, r0, #31
 8000720:	0048      	lsls	r0, r1, #1
 8000722:	4691      	mov	r9, r2
 8000724:	0e2d      	lsrs	r5, r5, #24
 8000726:	0a72      	lsrs	r2, r6, #9
 8000728:	0e00      	lsrs	r0, r0, #24
 800072a:	4694      	mov	ip, r2
 800072c:	b580      	push	{r7, lr}
 800072e:	099b      	lsrs	r3, r3, #6
 8000730:	0fc9      	lsrs	r1, r1, #31
 8000732:	09b6      	lsrs	r6, r6, #6
 8000734:	1a2a      	subs	r2, r5, r0
 8000736:	428c      	cmp	r4, r1
 8000738:	d021      	beq.n	800077e <__aeabi_fadd+0x6e>
 800073a:	2a00      	cmp	r2, #0
 800073c:	dd0d      	ble.n	800075a <__aeabi_fadd+0x4a>
 800073e:	2800      	cmp	r0, #0
 8000740:	d12d      	bne.n	800079e <__aeabi_fadd+0x8e>
 8000742:	2e00      	cmp	r6, #0
 8000744:	d100      	bne.n	8000748 <__aeabi_fadd+0x38>
 8000746:	e08d      	b.n	8000864 <__aeabi_fadd+0x154>
 8000748:	1e51      	subs	r1, r2, #1
 800074a:	2a01      	cmp	r2, #1
 800074c:	d100      	bne.n	8000750 <__aeabi_fadd+0x40>
 800074e:	e11d      	b.n	800098c <__aeabi_fadd+0x27c>
 8000750:	2aff      	cmp	r2, #255	@ 0xff
 8000752:	d100      	bne.n	8000756 <__aeabi_fadd+0x46>
 8000754:	e0ab      	b.n	80008ae <__aeabi_fadd+0x19e>
 8000756:	000a      	movs	r2, r1
 8000758:	e027      	b.n	80007aa <__aeabi_fadd+0x9a>
 800075a:	2a00      	cmp	r2, #0
 800075c:	d04d      	beq.n	80007fa <__aeabi_fadd+0xea>
 800075e:	1b42      	subs	r2, r0, r5
 8000760:	2d00      	cmp	r5, #0
 8000762:	d000      	beq.n	8000766 <__aeabi_fadd+0x56>
 8000764:	e0cc      	b.n	8000900 <__aeabi_fadd+0x1f0>
 8000766:	2b00      	cmp	r3, #0
 8000768:	d100      	bne.n	800076c <__aeabi_fadd+0x5c>
 800076a:	e079      	b.n	8000860 <__aeabi_fadd+0x150>
 800076c:	1e54      	subs	r4, r2, #1
 800076e:	2a01      	cmp	r2, #1
 8000770:	d100      	bne.n	8000774 <__aeabi_fadd+0x64>
 8000772:	e128      	b.n	80009c6 <__aeabi_fadd+0x2b6>
 8000774:	2aff      	cmp	r2, #255	@ 0xff
 8000776:	d100      	bne.n	800077a <__aeabi_fadd+0x6a>
 8000778:	e097      	b.n	80008aa <__aeabi_fadd+0x19a>
 800077a:	0022      	movs	r2, r4
 800077c:	e0c5      	b.n	800090a <__aeabi_fadd+0x1fa>
 800077e:	2a00      	cmp	r2, #0
 8000780:	dc00      	bgt.n	8000784 <__aeabi_fadd+0x74>
 8000782:	e096      	b.n	80008b2 <__aeabi_fadd+0x1a2>
 8000784:	2800      	cmp	r0, #0
 8000786:	d04f      	beq.n	8000828 <__aeabi_fadd+0x118>
 8000788:	2dff      	cmp	r5, #255	@ 0xff
 800078a:	d100      	bne.n	800078e <__aeabi_fadd+0x7e>
 800078c:	e08f      	b.n	80008ae <__aeabi_fadd+0x19e>
 800078e:	2180      	movs	r1, #128	@ 0x80
 8000790:	04c9      	lsls	r1, r1, #19
 8000792:	430e      	orrs	r6, r1
 8000794:	2a1b      	cmp	r2, #27
 8000796:	dd51      	ble.n	800083c <__aeabi_fadd+0x12c>
 8000798:	002a      	movs	r2, r5
 800079a:	3301      	adds	r3, #1
 800079c:	e018      	b.n	80007d0 <__aeabi_fadd+0xc0>
 800079e:	2dff      	cmp	r5, #255	@ 0xff
 80007a0:	d100      	bne.n	80007a4 <__aeabi_fadd+0x94>
 80007a2:	e084      	b.n	80008ae <__aeabi_fadd+0x19e>
 80007a4:	2180      	movs	r1, #128	@ 0x80
 80007a6:	04c9      	lsls	r1, r1, #19
 80007a8:	430e      	orrs	r6, r1
 80007aa:	2101      	movs	r1, #1
 80007ac:	2a1b      	cmp	r2, #27
 80007ae:	dc08      	bgt.n	80007c2 <__aeabi_fadd+0xb2>
 80007b0:	0031      	movs	r1, r6
 80007b2:	2020      	movs	r0, #32
 80007b4:	40d1      	lsrs	r1, r2
 80007b6:	1a82      	subs	r2, r0, r2
 80007b8:	4096      	lsls	r6, r2
 80007ba:	0032      	movs	r2, r6
 80007bc:	1e50      	subs	r0, r2, #1
 80007be:	4182      	sbcs	r2, r0
 80007c0:	4311      	orrs	r1, r2
 80007c2:	1a5b      	subs	r3, r3, r1
 80007c4:	015a      	lsls	r2, r3, #5
 80007c6:	d459      	bmi.n	800087c <__aeabi_fadd+0x16c>
 80007c8:	2107      	movs	r1, #7
 80007ca:	002a      	movs	r2, r5
 80007cc:	4019      	ands	r1, r3
 80007ce:	d049      	beq.n	8000864 <__aeabi_fadd+0x154>
 80007d0:	210f      	movs	r1, #15
 80007d2:	4019      	ands	r1, r3
 80007d4:	2904      	cmp	r1, #4
 80007d6:	d000      	beq.n	80007da <__aeabi_fadd+0xca>
 80007d8:	3304      	adds	r3, #4
 80007da:	0159      	lsls	r1, r3, #5
 80007dc:	d542      	bpl.n	8000864 <__aeabi_fadd+0x154>
 80007de:	1c50      	adds	r0, r2, #1
 80007e0:	2afe      	cmp	r2, #254	@ 0xfe
 80007e2:	d03a      	beq.n	800085a <__aeabi_fadd+0x14a>
 80007e4:	019b      	lsls	r3, r3, #6
 80007e6:	b2c0      	uxtb	r0, r0
 80007e8:	0a5b      	lsrs	r3, r3, #9
 80007ea:	05c0      	lsls	r0, r0, #23
 80007ec:	4318      	orrs	r0, r3
 80007ee:	07e4      	lsls	r4, r4, #31
 80007f0:	4320      	orrs	r0, r4
 80007f2:	bcc0      	pop	{r6, r7}
 80007f4:	46b9      	mov	r9, r7
 80007f6:	46b0      	mov	r8, r6
 80007f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80007fa:	20fe      	movs	r0, #254	@ 0xfe
 80007fc:	4680      	mov	r8, r0
 80007fe:	1c6f      	adds	r7, r5, #1
 8000800:	0038      	movs	r0, r7
 8000802:	4647      	mov	r7, r8
 8000804:	4207      	tst	r7, r0
 8000806:	d000      	beq.n	800080a <__aeabi_fadd+0xfa>
 8000808:	e08e      	b.n	8000928 <__aeabi_fadd+0x218>
 800080a:	2d00      	cmp	r5, #0
 800080c:	d000      	beq.n	8000810 <__aeabi_fadd+0x100>
 800080e:	e0b4      	b.n	800097a <__aeabi_fadd+0x26a>
 8000810:	2b00      	cmp	r3, #0
 8000812:	d100      	bne.n	8000816 <__aeabi_fadd+0x106>
 8000814:	e0db      	b.n	80009ce <__aeabi_fadd+0x2be>
 8000816:	2e00      	cmp	r6, #0
 8000818:	d06c      	beq.n	80008f4 <__aeabi_fadd+0x1e4>
 800081a:	1b98      	subs	r0, r3, r6
 800081c:	0145      	lsls	r5, r0, #5
 800081e:	d400      	bmi.n	8000822 <__aeabi_fadd+0x112>
 8000820:	e0f7      	b.n	8000a12 <__aeabi_fadd+0x302>
 8000822:	000c      	movs	r4, r1
 8000824:	1af3      	subs	r3, r6, r3
 8000826:	e03d      	b.n	80008a4 <__aeabi_fadd+0x194>
 8000828:	2e00      	cmp	r6, #0
 800082a:	d01b      	beq.n	8000864 <__aeabi_fadd+0x154>
 800082c:	1e51      	subs	r1, r2, #1
 800082e:	2a01      	cmp	r2, #1
 8000830:	d100      	bne.n	8000834 <__aeabi_fadd+0x124>
 8000832:	e082      	b.n	800093a <__aeabi_fadd+0x22a>
 8000834:	2aff      	cmp	r2, #255	@ 0xff
 8000836:	d03a      	beq.n	80008ae <__aeabi_fadd+0x19e>
 8000838:	000a      	movs	r2, r1
 800083a:	e7ab      	b.n	8000794 <__aeabi_fadd+0x84>
 800083c:	0031      	movs	r1, r6
 800083e:	2020      	movs	r0, #32
 8000840:	40d1      	lsrs	r1, r2
 8000842:	1a82      	subs	r2, r0, r2
 8000844:	4096      	lsls	r6, r2
 8000846:	0032      	movs	r2, r6
 8000848:	1e50      	subs	r0, r2, #1
 800084a:	4182      	sbcs	r2, r0
 800084c:	430a      	orrs	r2, r1
 800084e:	189b      	adds	r3, r3, r2
 8000850:	015a      	lsls	r2, r3, #5
 8000852:	d5b9      	bpl.n	80007c8 <__aeabi_fadd+0xb8>
 8000854:	1c6a      	adds	r2, r5, #1
 8000856:	2dfe      	cmp	r5, #254	@ 0xfe
 8000858:	d175      	bne.n	8000946 <__aeabi_fadd+0x236>
 800085a:	20ff      	movs	r0, #255	@ 0xff
 800085c:	2300      	movs	r3, #0
 800085e:	e7c4      	b.n	80007ea <__aeabi_fadd+0xda>
 8000860:	000c      	movs	r4, r1
 8000862:	0033      	movs	r3, r6
 8000864:	08db      	lsrs	r3, r3, #3
 8000866:	2aff      	cmp	r2, #255	@ 0xff
 8000868:	d146      	bne.n	80008f8 <__aeabi_fadd+0x1e8>
 800086a:	2b00      	cmp	r3, #0
 800086c:	d0f5      	beq.n	800085a <__aeabi_fadd+0x14a>
 800086e:	2280      	movs	r2, #128	@ 0x80
 8000870:	03d2      	lsls	r2, r2, #15
 8000872:	4313      	orrs	r3, r2
 8000874:	025b      	lsls	r3, r3, #9
 8000876:	20ff      	movs	r0, #255	@ 0xff
 8000878:	0a5b      	lsrs	r3, r3, #9
 800087a:	e7b6      	b.n	80007ea <__aeabi_fadd+0xda>
 800087c:	019f      	lsls	r7, r3, #6
 800087e:	09bf      	lsrs	r7, r7, #6
 8000880:	0038      	movs	r0, r7
 8000882:	f002 fcfd 	bl	8003280 <__clzsi2>
 8000886:	3805      	subs	r0, #5
 8000888:	4087      	lsls	r7, r0
 800088a:	4285      	cmp	r5, r0
 800088c:	dc24      	bgt.n	80008d8 <__aeabi_fadd+0x1c8>
 800088e:	003b      	movs	r3, r7
 8000890:	2120      	movs	r1, #32
 8000892:	1b42      	subs	r2, r0, r5
 8000894:	3201      	adds	r2, #1
 8000896:	40d3      	lsrs	r3, r2
 8000898:	1a8a      	subs	r2, r1, r2
 800089a:	4097      	lsls	r7, r2
 800089c:	1e7a      	subs	r2, r7, #1
 800089e:	4197      	sbcs	r7, r2
 80008a0:	2200      	movs	r2, #0
 80008a2:	433b      	orrs	r3, r7
 80008a4:	0759      	lsls	r1, r3, #29
 80008a6:	d193      	bne.n	80007d0 <__aeabi_fadd+0xc0>
 80008a8:	e797      	b.n	80007da <__aeabi_fadd+0xca>
 80008aa:	000c      	movs	r4, r1
 80008ac:	0033      	movs	r3, r6
 80008ae:	08db      	lsrs	r3, r3, #3
 80008b0:	e7db      	b.n	800086a <__aeabi_fadd+0x15a>
 80008b2:	2a00      	cmp	r2, #0
 80008b4:	d014      	beq.n	80008e0 <__aeabi_fadd+0x1d0>
 80008b6:	1b42      	subs	r2, r0, r5
 80008b8:	2d00      	cmp	r5, #0
 80008ba:	d14b      	bne.n	8000954 <__aeabi_fadd+0x244>
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d0d0      	beq.n	8000862 <__aeabi_fadd+0x152>
 80008c0:	1e51      	subs	r1, r2, #1
 80008c2:	2a01      	cmp	r2, #1
 80008c4:	d100      	bne.n	80008c8 <__aeabi_fadd+0x1b8>
 80008c6:	e09e      	b.n	8000a06 <__aeabi_fadd+0x2f6>
 80008c8:	2aff      	cmp	r2, #255	@ 0xff
 80008ca:	d0ef      	beq.n	80008ac <__aeabi_fadd+0x19c>
 80008cc:	000a      	movs	r2, r1
 80008ce:	2a1b      	cmp	r2, #27
 80008d0:	dd5f      	ble.n	8000992 <__aeabi_fadd+0x282>
 80008d2:	0002      	movs	r2, r0
 80008d4:	1c73      	adds	r3, r6, #1
 80008d6:	e77b      	b.n	80007d0 <__aeabi_fadd+0xc0>
 80008d8:	4b50      	ldr	r3, [pc, #320]	@ (8000a1c <__aeabi_fadd+0x30c>)
 80008da:	1a2a      	subs	r2, r5, r0
 80008dc:	403b      	ands	r3, r7
 80008de:	e7e1      	b.n	80008a4 <__aeabi_fadd+0x194>
 80008e0:	21fe      	movs	r1, #254	@ 0xfe
 80008e2:	1c6a      	adds	r2, r5, #1
 80008e4:	4211      	tst	r1, r2
 80008e6:	d13b      	bne.n	8000960 <__aeabi_fadd+0x250>
 80008e8:	2d00      	cmp	r5, #0
 80008ea:	d15d      	bne.n	80009a8 <__aeabi_fadd+0x298>
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d07f      	beq.n	80009f0 <__aeabi_fadd+0x2e0>
 80008f0:	2e00      	cmp	r6, #0
 80008f2:	d17f      	bne.n	80009f4 <__aeabi_fadd+0x2e4>
 80008f4:	2200      	movs	r2, #0
 80008f6:	08db      	lsrs	r3, r3, #3
 80008f8:	025b      	lsls	r3, r3, #9
 80008fa:	0a5b      	lsrs	r3, r3, #9
 80008fc:	b2d0      	uxtb	r0, r2
 80008fe:	e774      	b.n	80007ea <__aeabi_fadd+0xda>
 8000900:	28ff      	cmp	r0, #255	@ 0xff
 8000902:	d0d2      	beq.n	80008aa <__aeabi_fadd+0x19a>
 8000904:	2480      	movs	r4, #128	@ 0x80
 8000906:	04e4      	lsls	r4, r4, #19
 8000908:	4323      	orrs	r3, r4
 800090a:	2401      	movs	r4, #1
 800090c:	2a1b      	cmp	r2, #27
 800090e:	dc07      	bgt.n	8000920 <__aeabi_fadd+0x210>
 8000910:	001c      	movs	r4, r3
 8000912:	2520      	movs	r5, #32
 8000914:	40d4      	lsrs	r4, r2
 8000916:	1aaa      	subs	r2, r5, r2
 8000918:	4093      	lsls	r3, r2
 800091a:	1e5a      	subs	r2, r3, #1
 800091c:	4193      	sbcs	r3, r2
 800091e:	431c      	orrs	r4, r3
 8000920:	1b33      	subs	r3, r6, r4
 8000922:	0005      	movs	r5, r0
 8000924:	000c      	movs	r4, r1
 8000926:	e74d      	b.n	80007c4 <__aeabi_fadd+0xb4>
 8000928:	1b9f      	subs	r7, r3, r6
 800092a:	017a      	lsls	r2, r7, #5
 800092c:	d422      	bmi.n	8000974 <__aeabi_fadd+0x264>
 800092e:	2f00      	cmp	r7, #0
 8000930:	d1a6      	bne.n	8000880 <__aeabi_fadd+0x170>
 8000932:	2400      	movs	r4, #0
 8000934:	2000      	movs	r0, #0
 8000936:	2300      	movs	r3, #0
 8000938:	e757      	b.n	80007ea <__aeabi_fadd+0xda>
 800093a:	199b      	adds	r3, r3, r6
 800093c:	2501      	movs	r5, #1
 800093e:	3201      	adds	r2, #1
 8000940:	0159      	lsls	r1, r3, #5
 8000942:	d400      	bmi.n	8000946 <__aeabi_fadd+0x236>
 8000944:	e740      	b.n	80007c8 <__aeabi_fadd+0xb8>
 8000946:	2101      	movs	r1, #1
 8000948:	4835      	ldr	r0, [pc, #212]	@ (8000a20 <__aeabi_fadd+0x310>)
 800094a:	4019      	ands	r1, r3
 800094c:	085b      	lsrs	r3, r3, #1
 800094e:	4003      	ands	r3, r0
 8000950:	430b      	orrs	r3, r1
 8000952:	e7a7      	b.n	80008a4 <__aeabi_fadd+0x194>
 8000954:	28ff      	cmp	r0, #255	@ 0xff
 8000956:	d0a9      	beq.n	80008ac <__aeabi_fadd+0x19c>
 8000958:	2180      	movs	r1, #128	@ 0x80
 800095a:	04c9      	lsls	r1, r1, #19
 800095c:	430b      	orrs	r3, r1
 800095e:	e7b6      	b.n	80008ce <__aeabi_fadd+0x1be>
 8000960:	2aff      	cmp	r2, #255	@ 0xff
 8000962:	d100      	bne.n	8000966 <__aeabi_fadd+0x256>
 8000964:	e779      	b.n	800085a <__aeabi_fadd+0x14a>
 8000966:	199b      	adds	r3, r3, r6
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	0759      	lsls	r1, r3, #29
 800096c:	d000      	beq.n	8000970 <__aeabi_fadd+0x260>
 800096e:	e72f      	b.n	80007d0 <__aeabi_fadd+0xc0>
 8000970:	08db      	lsrs	r3, r3, #3
 8000972:	e7c1      	b.n	80008f8 <__aeabi_fadd+0x1e8>
 8000974:	000c      	movs	r4, r1
 8000976:	1af7      	subs	r7, r6, r3
 8000978:	e782      	b.n	8000880 <__aeabi_fadd+0x170>
 800097a:	2b00      	cmp	r3, #0
 800097c:	d12c      	bne.n	80009d8 <__aeabi_fadd+0x2c8>
 800097e:	2e00      	cmp	r6, #0
 8000980:	d193      	bne.n	80008aa <__aeabi_fadd+0x19a>
 8000982:	2380      	movs	r3, #128	@ 0x80
 8000984:	2400      	movs	r4, #0
 8000986:	20ff      	movs	r0, #255	@ 0xff
 8000988:	03db      	lsls	r3, r3, #15
 800098a:	e72e      	b.n	80007ea <__aeabi_fadd+0xda>
 800098c:	2501      	movs	r5, #1
 800098e:	1b9b      	subs	r3, r3, r6
 8000990:	e718      	b.n	80007c4 <__aeabi_fadd+0xb4>
 8000992:	0019      	movs	r1, r3
 8000994:	2520      	movs	r5, #32
 8000996:	40d1      	lsrs	r1, r2
 8000998:	1aaa      	subs	r2, r5, r2
 800099a:	4093      	lsls	r3, r2
 800099c:	1e5a      	subs	r2, r3, #1
 800099e:	4193      	sbcs	r3, r2
 80009a0:	430b      	orrs	r3, r1
 80009a2:	0005      	movs	r5, r0
 80009a4:	199b      	adds	r3, r3, r6
 80009a6:	e753      	b.n	8000850 <__aeabi_fadd+0x140>
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d100      	bne.n	80009ae <__aeabi_fadd+0x29e>
 80009ac:	e77e      	b.n	80008ac <__aeabi_fadd+0x19c>
 80009ae:	2e00      	cmp	r6, #0
 80009b0:	d100      	bne.n	80009b4 <__aeabi_fadd+0x2a4>
 80009b2:	e77c      	b.n	80008ae <__aeabi_fadd+0x19e>
 80009b4:	2280      	movs	r2, #128	@ 0x80
 80009b6:	03d2      	lsls	r2, r2, #15
 80009b8:	4591      	cmp	r9, r2
 80009ba:	d302      	bcc.n	80009c2 <__aeabi_fadd+0x2b2>
 80009bc:	4594      	cmp	ip, r2
 80009be:	d200      	bcs.n	80009c2 <__aeabi_fadd+0x2b2>
 80009c0:	0033      	movs	r3, r6
 80009c2:	08db      	lsrs	r3, r3, #3
 80009c4:	e753      	b.n	800086e <__aeabi_fadd+0x15e>
 80009c6:	000c      	movs	r4, r1
 80009c8:	1af3      	subs	r3, r6, r3
 80009ca:	3501      	adds	r5, #1
 80009cc:	e6fa      	b.n	80007c4 <__aeabi_fadd+0xb4>
 80009ce:	2e00      	cmp	r6, #0
 80009d0:	d0af      	beq.n	8000932 <__aeabi_fadd+0x222>
 80009d2:	000c      	movs	r4, r1
 80009d4:	0033      	movs	r3, r6
 80009d6:	e78d      	b.n	80008f4 <__aeabi_fadd+0x1e4>
 80009d8:	2e00      	cmp	r6, #0
 80009da:	d100      	bne.n	80009de <__aeabi_fadd+0x2ce>
 80009dc:	e767      	b.n	80008ae <__aeabi_fadd+0x19e>
 80009de:	2280      	movs	r2, #128	@ 0x80
 80009e0:	03d2      	lsls	r2, r2, #15
 80009e2:	4591      	cmp	r9, r2
 80009e4:	d3ed      	bcc.n	80009c2 <__aeabi_fadd+0x2b2>
 80009e6:	4594      	cmp	ip, r2
 80009e8:	d2eb      	bcs.n	80009c2 <__aeabi_fadd+0x2b2>
 80009ea:	000c      	movs	r4, r1
 80009ec:	0033      	movs	r3, r6
 80009ee:	e7e8      	b.n	80009c2 <__aeabi_fadd+0x2b2>
 80009f0:	0033      	movs	r3, r6
 80009f2:	e77f      	b.n	80008f4 <__aeabi_fadd+0x1e4>
 80009f4:	199b      	adds	r3, r3, r6
 80009f6:	2200      	movs	r2, #0
 80009f8:	0159      	lsls	r1, r3, #5
 80009fa:	d5b9      	bpl.n	8000970 <__aeabi_fadd+0x260>
 80009fc:	4a07      	ldr	r2, [pc, #28]	@ (8000a1c <__aeabi_fadd+0x30c>)
 80009fe:	4013      	ands	r3, r2
 8000a00:	08db      	lsrs	r3, r3, #3
 8000a02:	2201      	movs	r2, #1
 8000a04:	e778      	b.n	80008f8 <__aeabi_fadd+0x1e8>
 8000a06:	199b      	adds	r3, r3, r6
 8000a08:	3201      	adds	r2, #1
 8000a0a:	3501      	adds	r5, #1
 8000a0c:	0159      	lsls	r1, r3, #5
 8000a0e:	d49a      	bmi.n	8000946 <__aeabi_fadd+0x236>
 8000a10:	e6da      	b.n	80007c8 <__aeabi_fadd+0xb8>
 8000a12:	1e03      	subs	r3, r0, #0
 8000a14:	d08d      	beq.n	8000932 <__aeabi_fadd+0x222>
 8000a16:	08db      	lsrs	r3, r3, #3
 8000a18:	e76e      	b.n	80008f8 <__aeabi_fadd+0x1e8>
 8000a1a:	46c0      	nop			@ (mov r8, r8)
 8000a1c:	fbffffff 	.word	0xfbffffff
 8000a20:	7dffffff 	.word	0x7dffffff

08000a24 <__aeabi_fdiv>:
 8000a24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a26:	464f      	mov	r7, r9
 8000a28:	4646      	mov	r6, r8
 8000a2a:	46d6      	mov	lr, sl
 8000a2c:	0244      	lsls	r4, r0, #9
 8000a2e:	b5c0      	push	{r6, r7, lr}
 8000a30:	0047      	lsls	r7, r0, #1
 8000a32:	1c0e      	adds	r6, r1, #0
 8000a34:	0a64      	lsrs	r4, r4, #9
 8000a36:	0e3f      	lsrs	r7, r7, #24
 8000a38:	0fc5      	lsrs	r5, r0, #31
 8000a3a:	2f00      	cmp	r7, #0
 8000a3c:	d03c      	beq.n	8000ab8 <__aeabi_fdiv+0x94>
 8000a3e:	2fff      	cmp	r7, #255	@ 0xff
 8000a40:	d042      	beq.n	8000ac8 <__aeabi_fdiv+0xa4>
 8000a42:	2300      	movs	r3, #0
 8000a44:	2280      	movs	r2, #128	@ 0x80
 8000a46:	4699      	mov	r9, r3
 8000a48:	469a      	mov	sl, r3
 8000a4a:	00e4      	lsls	r4, r4, #3
 8000a4c:	04d2      	lsls	r2, r2, #19
 8000a4e:	4314      	orrs	r4, r2
 8000a50:	3f7f      	subs	r7, #127	@ 0x7f
 8000a52:	0273      	lsls	r3, r6, #9
 8000a54:	0a5b      	lsrs	r3, r3, #9
 8000a56:	4698      	mov	r8, r3
 8000a58:	0073      	lsls	r3, r6, #1
 8000a5a:	0e1b      	lsrs	r3, r3, #24
 8000a5c:	0ff6      	lsrs	r6, r6, #31
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d01b      	beq.n	8000a9a <__aeabi_fdiv+0x76>
 8000a62:	2bff      	cmp	r3, #255	@ 0xff
 8000a64:	d013      	beq.n	8000a8e <__aeabi_fdiv+0x6a>
 8000a66:	4642      	mov	r2, r8
 8000a68:	2180      	movs	r1, #128	@ 0x80
 8000a6a:	00d2      	lsls	r2, r2, #3
 8000a6c:	04c9      	lsls	r1, r1, #19
 8000a6e:	4311      	orrs	r1, r2
 8000a70:	4688      	mov	r8, r1
 8000a72:	2000      	movs	r0, #0
 8000a74:	3b7f      	subs	r3, #127	@ 0x7f
 8000a76:	0029      	movs	r1, r5
 8000a78:	1aff      	subs	r7, r7, r3
 8000a7a:	464b      	mov	r3, r9
 8000a7c:	4071      	eors	r1, r6
 8000a7e:	b2c9      	uxtb	r1, r1
 8000a80:	2b0f      	cmp	r3, #15
 8000a82:	d900      	bls.n	8000a86 <__aeabi_fdiv+0x62>
 8000a84:	e0b5      	b.n	8000bf2 <__aeabi_fdiv+0x1ce>
 8000a86:	4a74      	ldr	r2, [pc, #464]	@ (8000c58 <__aeabi_fdiv+0x234>)
 8000a88:	009b      	lsls	r3, r3, #2
 8000a8a:	58d3      	ldr	r3, [r2, r3]
 8000a8c:	469f      	mov	pc, r3
 8000a8e:	4643      	mov	r3, r8
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d13f      	bne.n	8000b14 <__aeabi_fdiv+0xf0>
 8000a94:	3fff      	subs	r7, #255	@ 0xff
 8000a96:	3302      	adds	r3, #2
 8000a98:	e003      	b.n	8000aa2 <__aeabi_fdiv+0x7e>
 8000a9a:	4643      	mov	r3, r8
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d12d      	bne.n	8000afc <__aeabi_fdiv+0xd8>
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	0029      	movs	r1, r5
 8000aa4:	464a      	mov	r2, r9
 8000aa6:	4071      	eors	r1, r6
 8000aa8:	b2c9      	uxtb	r1, r1
 8000aaa:	431a      	orrs	r2, r3
 8000aac:	2a0e      	cmp	r2, #14
 8000aae:	d838      	bhi.n	8000b22 <__aeabi_fdiv+0xfe>
 8000ab0:	486a      	ldr	r0, [pc, #424]	@ (8000c5c <__aeabi_fdiv+0x238>)
 8000ab2:	0092      	lsls	r2, r2, #2
 8000ab4:	5882      	ldr	r2, [r0, r2]
 8000ab6:	4697      	mov	pc, r2
 8000ab8:	2c00      	cmp	r4, #0
 8000aba:	d113      	bne.n	8000ae4 <__aeabi_fdiv+0xc0>
 8000abc:	2304      	movs	r3, #4
 8000abe:	4699      	mov	r9, r3
 8000ac0:	3b03      	subs	r3, #3
 8000ac2:	2700      	movs	r7, #0
 8000ac4:	469a      	mov	sl, r3
 8000ac6:	e7c4      	b.n	8000a52 <__aeabi_fdiv+0x2e>
 8000ac8:	2c00      	cmp	r4, #0
 8000aca:	d105      	bne.n	8000ad8 <__aeabi_fdiv+0xb4>
 8000acc:	2308      	movs	r3, #8
 8000ace:	4699      	mov	r9, r3
 8000ad0:	3b06      	subs	r3, #6
 8000ad2:	27ff      	movs	r7, #255	@ 0xff
 8000ad4:	469a      	mov	sl, r3
 8000ad6:	e7bc      	b.n	8000a52 <__aeabi_fdiv+0x2e>
 8000ad8:	230c      	movs	r3, #12
 8000ada:	4699      	mov	r9, r3
 8000adc:	3b09      	subs	r3, #9
 8000ade:	27ff      	movs	r7, #255	@ 0xff
 8000ae0:	469a      	mov	sl, r3
 8000ae2:	e7b6      	b.n	8000a52 <__aeabi_fdiv+0x2e>
 8000ae4:	0020      	movs	r0, r4
 8000ae6:	f002 fbcb 	bl	8003280 <__clzsi2>
 8000aea:	2776      	movs	r7, #118	@ 0x76
 8000aec:	1f43      	subs	r3, r0, #5
 8000aee:	409c      	lsls	r4, r3
 8000af0:	2300      	movs	r3, #0
 8000af2:	427f      	negs	r7, r7
 8000af4:	4699      	mov	r9, r3
 8000af6:	469a      	mov	sl, r3
 8000af8:	1a3f      	subs	r7, r7, r0
 8000afa:	e7aa      	b.n	8000a52 <__aeabi_fdiv+0x2e>
 8000afc:	4640      	mov	r0, r8
 8000afe:	f002 fbbf 	bl	8003280 <__clzsi2>
 8000b02:	4642      	mov	r2, r8
 8000b04:	1f43      	subs	r3, r0, #5
 8000b06:	409a      	lsls	r2, r3
 8000b08:	2376      	movs	r3, #118	@ 0x76
 8000b0a:	425b      	negs	r3, r3
 8000b0c:	1a1b      	subs	r3, r3, r0
 8000b0e:	4690      	mov	r8, r2
 8000b10:	2000      	movs	r0, #0
 8000b12:	e7b0      	b.n	8000a76 <__aeabi_fdiv+0x52>
 8000b14:	2303      	movs	r3, #3
 8000b16:	464a      	mov	r2, r9
 8000b18:	431a      	orrs	r2, r3
 8000b1a:	4691      	mov	r9, r2
 8000b1c:	2003      	movs	r0, #3
 8000b1e:	33fc      	adds	r3, #252	@ 0xfc
 8000b20:	e7a9      	b.n	8000a76 <__aeabi_fdiv+0x52>
 8000b22:	000d      	movs	r5, r1
 8000b24:	20ff      	movs	r0, #255	@ 0xff
 8000b26:	2200      	movs	r2, #0
 8000b28:	05c0      	lsls	r0, r0, #23
 8000b2a:	07ed      	lsls	r5, r5, #31
 8000b2c:	4310      	orrs	r0, r2
 8000b2e:	4328      	orrs	r0, r5
 8000b30:	bce0      	pop	{r5, r6, r7}
 8000b32:	46ba      	mov	sl, r7
 8000b34:	46b1      	mov	r9, r6
 8000b36:	46a8      	mov	r8, r5
 8000b38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b3a:	000d      	movs	r5, r1
 8000b3c:	2000      	movs	r0, #0
 8000b3e:	2200      	movs	r2, #0
 8000b40:	e7f2      	b.n	8000b28 <__aeabi_fdiv+0x104>
 8000b42:	4653      	mov	r3, sl
 8000b44:	2b02      	cmp	r3, #2
 8000b46:	d0ed      	beq.n	8000b24 <__aeabi_fdiv+0x100>
 8000b48:	2b03      	cmp	r3, #3
 8000b4a:	d033      	beq.n	8000bb4 <__aeabi_fdiv+0x190>
 8000b4c:	46a0      	mov	r8, r4
 8000b4e:	2b01      	cmp	r3, #1
 8000b50:	d105      	bne.n	8000b5e <__aeabi_fdiv+0x13a>
 8000b52:	2000      	movs	r0, #0
 8000b54:	2200      	movs	r2, #0
 8000b56:	e7e7      	b.n	8000b28 <__aeabi_fdiv+0x104>
 8000b58:	0035      	movs	r5, r6
 8000b5a:	2803      	cmp	r0, #3
 8000b5c:	d07a      	beq.n	8000c54 <__aeabi_fdiv+0x230>
 8000b5e:	003b      	movs	r3, r7
 8000b60:	337f      	adds	r3, #127	@ 0x7f
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	dd2d      	ble.n	8000bc2 <__aeabi_fdiv+0x19e>
 8000b66:	4642      	mov	r2, r8
 8000b68:	0752      	lsls	r2, r2, #29
 8000b6a:	d007      	beq.n	8000b7c <__aeabi_fdiv+0x158>
 8000b6c:	220f      	movs	r2, #15
 8000b6e:	4641      	mov	r1, r8
 8000b70:	400a      	ands	r2, r1
 8000b72:	2a04      	cmp	r2, #4
 8000b74:	d002      	beq.n	8000b7c <__aeabi_fdiv+0x158>
 8000b76:	2204      	movs	r2, #4
 8000b78:	4694      	mov	ip, r2
 8000b7a:	44e0      	add	r8, ip
 8000b7c:	4642      	mov	r2, r8
 8000b7e:	0112      	lsls	r2, r2, #4
 8000b80:	d505      	bpl.n	8000b8e <__aeabi_fdiv+0x16a>
 8000b82:	4642      	mov	r2, r8
 8000b84:	4b36      	ldr	r3, [pc, #216]	@ (8000c60 <__aeabi_fdiv+0x23c>)
 8000b86:	401a      	ands	r2, r3
 8000b88:	003b      	movs	r3, r7
 8000b8a:	4690      	mov	r8, r2
 8000b8c:	3380      	adds	r3, #128	@ 0x80
 8000b8e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000b90:	dcc8      	bgt.n	8000b24 <__aeabi_fdiv+0x100>
 8000b92:	4642      	mov	r2, r8
 8000b94:	0192      	lsls	r2, r2, #6
 8000b96:	0a52      	lsrs	r2, r2, #9
 8000b98:	b2d8      	uxtb	r0, r3
 8000b9a:	e7c5      	b.n	8000b28 <__aeabi_fdiv+0x104>
 8000b9c:	2280      	movs	r2, #128	@ 0x80
 8000b9e:	2500      	movs	r5, #0
 8000ba0:	20ff      	movs	r0, #255	@ 0xff
 8000ba2:	03d2      	lsls	r2, r2, #15
 8000ba4:	e7c0      	b.n	8000b28 <__aeabi_fdiv+0x104>
 8000ba6:	2280      	movs	r2, #128	@ 0x80
 8000ba8:	03d2      	lsls	r2, r2, #15
 8000baa:	4214      	tst	r4, r2
 8000bac:	d002      	beq.n	8000bb4 <__aeabi_fdiv+0x190>
 8000bae:	4643      	mov	r3, r8
 8000bb0:	4213      	tst	r3, r2
 8000bb2:	d049      	beq.n	8000c48 <__aeabi_fdiv+0x224>
 8000bb4:	2280      	movs	r2, #128	@ 0x80
 8000bb6:	03d2      	lsls	r2, r2, #15
 8000bb8:	4322      	orrs	r2, r4
 8000bba:	0252      	lsls	r2, r2, #9
 8000bbc:	20ff      	movs	r0, #255	@ 0xff
 8000bbe:	0a52      	lsrs	r2, r2, #9
 8000bc0:	e7b2      	b.n	8000b28 <__aeabi_fdiv+0x104>
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	1ad3      	subs	r3, r2, r3
 8000bc6:	2b1b      	cmp	r3, #27
 8000bc8:	dcc3      	bgt.n	8000b52 <__aeabi_fdiv+0x12e>
 8000bca:	4642      	mov	r2, r8
 8000bcc:	40da      	lsrs	r2, r3
 8000bce:	4643      	mov	r3, r8
 8000bd0:	379e      	adds	r7, #158	@ 0x9e
 8000bd2:	40bb      	lsls	r3, r7
 8000bd4:	1e59      	subs	r1, r3, #1
 8000bd6:	418b      	sbcs	r3, r1
 8000bd8:	431a      	orrs	r2, r3
 8000bda:	0753      	lsls	r3, r2, #29
 8000bdc:	d004      	beq.n	8000be8 <__aeabi_fdiv+0x1c4>
 8000bde:	230f      	movs	r3, #15
 8000be0:	4013      	ands	r3, r2
 8000be2:	2b04      	cmp	r3, #4
 8000be4:	d000      	beq.n	8000be8 <__aeabi_fdiv+0x1c4>
 8000be6:	3204      	adds	r2, #4
 8000be8:	0153      	lsls	r3, r2, #5
 8000bea:	d529      	bpl.n	8000c40 <__aeabi_fdiv+0x21c>
 8000bec:	2001      	movs	r0, #1
 8000bee:	2200      	movs	r2, #0
 8000bf0:	e79a      	b.n	8000b28 <__aeabi_fdiv+0x104>
 8000bf2:	4642      	mov	r2, r8
 8000bf4:	0163      	lsls	r3, r4, #5
 8000bf6:	0155      	lsls	r5, r2, #5
 8000bf8:	42ab      	cmp	r3, r5
 8000bfa:	d215      	bcs.n	8000c28 <__aeabi_fdiv+0x204>
 8000bfc:	201b      	movs	r0, #27
 8000bfe:	2200      	movs	r2, #0
 8000c00:	3f01      	subs	r7, #1
 8000c02:	2601      	movs	r6, #1
 8000c04:	001c      	movs	r4, r3
 8000c06:	0052      	lsls	r2, r2, #1
 8000c08:	005b      	lsls	r3, r3, #1
 8000c0a:	2c00      	cmp	r4, #0
 8000c0c:	db01      	blt.n	8000c12 <__aeabi_fdiv+0x1ee>
 8000c0e:	429d      	cmp	r5, r3
 8000c10:	d801      	bhi.n	8000c16 <__aeabi_fdiv+0x1f2>
 8000c12:	1b5b      	subs	r3, r3, r5
 8000c14:	4332      	orrs	r2, r6
 8000c16:	3801      	subs	r0, #1
 8000c18:	2800      	cmp	r0, #0
 8000c1a:	d1f3      	bne.n	8000c04 <__aeabi_fdiv+0x1e0>
 8000c1c:	1e58      	subs	r0, r3, #1
 8000c1e:	4183      	sbcs	r3, r0
 8000c20:	4313      	orrs	r3, r2
 8000c22:	4698      	mov	r8, r3
 8000c24:	000d      	movs	r5, r1
 8000c26:	e79a      	b.n	8000b5e <__aeabi_fdiv+0x13a>
 8000c28:	201a      	movs	r0, #26
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	1b5b      	subs	r3, r3, r5
 8000c2e:	e7e8      	b.n	8000c02 <__aeabi_fdiv+0x1de>
 8000c30:	3b02      	subs	r3, #2
 8000c32:	425a      	negs	r2, r3
 8000c34:	4153      	adcs	r3, r2
 8000c36:	425b      	negs	r3, r3
 8000c38:	0035      	movs	r5, r6
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	b2d8      	uxtb	r0, r3
 8000c3e:	e773      	b.n	8000b28 <__aeabi_fdiv+0x104>
 8000c40:	0192      	lsls	r2, r2, #6
 8000c42:	2000      	movs	r0, #0
 8000c44:	0a52      	lsrs	r2, r2, #9
 8000c46:	e76f      	b.n	8000b28 <__aeabi_fdiv+0x104>
 8000c48:	431a      	orrs	r2, r3
 8000c4a:	0252      	lsls	r2, r2, #9
 8000c4c:	0035      	movs	r5, r6
 8000c4e:	20ff      	movs	r0, #255	@ 0xff
 8000c50:	0a52      	lsrs	r2, r2, #9
 8000c52:	e769      	b.n	8000b28 <__aeabi_fdiv+0x104>
 8000c54:	4644      	mov	r4, r8
 8000c56:	e7ad      	b.n	8000bb4 <__aeabi_fdiv+0x190>
 8000c58:	0800b9f8 	.word	0x0800b9f8
 8000c5c:	0800ba38 	.word	0x0800ba38
 8000c60:	f7ffffff 	.word	0xf7ffffff

08000c64 <__eqsf2>:
 8000c64:	b570      	push	{r4, r5, r6, lr}
 8000c66:	0042      	lsls	r2, r0, #1
 8000c68:	024e      	lsls	r6, r1, #9
 8000c6a:	004c      	lsls	r4, r1, #1
 8000c6c:	0245      	lsls	r5, r0, #9
 8000c6e:	0a6d      	lsrs	r5, r5, #9
 8000c70:	0e12      	lsrs	r2, r2, #24
 8000c72:	0fc3      	lsrs	r3, r0, #31
 8000c74:	0a76      	lsrs	r6, r6, #9
 8000c76:	0e24      	lsrs	r4, r4, #24
 8000c78:	0fc9      	lsrs	r1, r1, #31
 8000c7a:	2aff      	cmp	r2, #255	@ 0xff
 8000c7c:	d010      	beq.n	8000ca0 <__eqsf2+0x3c>
 8000c7e:	2cff      	cmp	r4, #255	@ 0xff
 8000c80:	d00c      	beq.n	8000c9c <__eqsf2+0x38>
 8000c82:	2001      	movs	r0, #1
 8000c84:	42a2      	cmp	r2, r4
 8000c86:	d10a      	bne.n	8000c9e <__eqsf2+0x3a>
 8000c88:	42b5      	cmp	r5, r6
 8000c8a:	d108      	bne.n	8000c9e <__eqsf2+0x3a>
 8000c8c:	428b      	cmp	r3, r1
 8000c8e:	d00f      	beq.n	8000cb0 <__eqsf2+0x4c>
 8000c90:	2a00      	cmp	r2, #0
 8000c92:	d104      	bne.n	8000c9e <__eqsf2+0x3a>
 8000c94:	0028      	movs	r0, r5
 8000c96:	1e43      	subs	r3, r0, #1
 8000c98:	4198      	sbcs	r0, r3
 8000c9a:	e000      	b.n	8000c9e <__eqsf2+0x3a>
 8000c9c:	2001      	movs	r0, #1
 8000c9e:	bd70      	pop	{r4, r5, r6, pc}
 8000ca0:	2001      	movs	r0, #1
 8000ca2:	2cff      	cmp	r4, #255	@ 0xff
 8000ca4:	d1fb      	bne.n	8000c9e <__eqsf2+0x3a>
 8000ca6:	4335      	orrs	r5, r6
 8000ca8:	d1f9      	bne.n	8000c9e <__eqsf2+0x3a>
 8000caa:	404b      	eors	r3, r1
 8000cac:	0018      	movs	r0, r3
 8000cae:	e7f6      	b.n	8000c9e <__eqsf2+0x3a>
 8000cb0:	2000      	movs	r0, #0
 8000cb2:	e7f4      	b.n	8000c9e <__eqsf2+0x3a>

08000cb4 <__gesf2>:
 8000cb4:	b530      	push	{r4, r5, lr}
 8000cb6:	0042      	lsls	r2, r0, #1
 8000cb8:	0244      	lsls	r4, r0, #9
 8000cba:	024d      	lsls	r5, r1, #9
 8000cbc:	0fc3      	lsrs	r3, r0, #31
 8000cbe:	0048      	lsls	r0, r1, #1
 8000cc0:	0a64      	lsrs	r4, r4, #9
 8000cc2:	0e12      	lsrs	r2, r2, #24
 8000cc4:	0a6d      	lsrs	r5, r5, #9
 8000cc6:	0e00      	lsrs	r0, r0, #24
 8000cc8:	0fc9      	lsrs	r1, r1, #31
 8000cca:	2aff      	cmp	r2, #255	@ 0xff
 8000ccc:	d019      	beq.n	8000d02 <__gesf2+0x4e>
 8000cce:	28ff      	cmp	r0, #255	@ 0xff
 8000cd0:	d00b      	beq.n	8000cea <__gesf2+0x36>
 8000cd2:	2a00      	cmp	r2, #0
 8000cd4:	d11e      	bne.n	8000d14 <__gesf2+0x60>
 8000cd6:	2800      	cmp	r0, #0
 8000cd8:	d10b      	bne.n	8000cf2 <__gesf2+0x3e>
 8000cda:	2d00      	cmp	r5, #0
 8000cdc:	d027      	beq.n	8000d2e <__gesf2+0x7a>
 8000cde:	2c00      	cmp	r4, #0
 8000ce0:	d134      	bne.n	8000d4c <__gesf2+0x98>
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	d02f      	beq.n	8000d46 <__gesf2+0x92>
 8000ce6:	0008      	movs	r0, r1
 8000ce8:	bd30      	pop	{r4, r5, pc}
 8000cea:	2d00      	cmp	r5, #0
 8000cec:	d128      	bne.n	8000d40 <__gesf2+0x8c>
 8000cee:	2a00      	cmp	r2, #0
 8000cf0:	d101      	bne.n	8000cf6 <__gesf2+0x42>
 8000cf2:	2c00      	cmp	r4, #0
 8000cf4:	d0f5      	beq.n	8000ce2 <__gesf2+0x2e>
 8000cf6:	428b      	cmp	r3, r1
 8000cf8:	d107      	bne.n	8000d0a <__gesf2+0x56>
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d023      	beq.n	8000d46 <__gesf2+0x92>
 8000cfe:	0018      	movs	r0, r3
 8000d00:	e7f2      	b.n	8000ce8 <__gesf2+0x34>
 8000d02:	2c00      	cmp	r4, #0
 8000d04:	d11c      	bne.n	8000d40 <__gesf2+0x8c>
 8000d06:	28ff      	cmp	r0, #255	@ 0xff
 8000d08:	d014      	beq.n	8000d34 <__gesf2+0x80>
 8000d0a:	1e58      	subs	r0, r3, #1
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	4018      	ands	r0, r3
 8000d10:	3801      	subs	r0, #1
 8000d12:	e7e9      	b.n	8000ce8 <__gesf2+0x34>
 8000d14:	2800      	cmp	r0, #0
 8000d16:	d0f8      	beq.n	8000d0a <__gesf2+0x56>
 8000d18:	428b      	cmp	r3, r1
 8000d1a:	d1f6      	bne.n	8000d0a <__gesf2+0x56>
 8000d1c:	4282      	cmp	r2, r0
 8000d1e:	dcf4      	bgt.n	8000d0a <__gesf2+0x56>
 8000d20:	dbeb      	blt.n	8000cfa <__gesf2+0x46>
 8000d22:	42ac      	cmp	r4, r5
 8000d24:	d8f1      	bhi.n	8000d0a <__gesf2+0x56>
 8000d26:	2000      	movs	r0, #0
 8000d28:	42ac      	cmp	r4, r5
 8000d2a:	d2dd      	bcs.n	8000ce8 <__gesf2+0x34>
 8000d2c:	e7e5      	b.n	8000cfa <__gesf2+0x46>
 8000d2e:	2c00      	cmp	r4, #0
 8000d30:	d0da      	beq.n	8000ce8 <__gesf2+0x34>
 8000d32:	e7ea      	b.n	8000d0a <__gesf2+0x56>
 8000d34:	2d00      	cmp	r5, #0
 8000d36:	d103      	bne.n	8000d40 <__gesf2+0x8c>
 8000d38:	428b      	cmp	r3, r1
 8000d3a:	d1e6      	bne.n	8000d0a <__gesf2+0x56>
 8000d3c:	2000      	movs	r0, #0
 8000d3e:	e7d3      	b.n	8000ce8 <__gesf2+0x34>
 8000d40:	2002      	movs	r0, #2
 8000d42:	4240      	negs	r0, r0
 8000d44:	e7d0      	b.n	8000ce8 <__gesf2+0x34>
 8000d46:	2001      	movs	r0, #1
 8000d48:	4240      	negs	r0, r0
 8000d4a:	e7cd      	b.n	8000ce8 <__gesf2+0x34>
 8000d4c:	428b      	cmp	r3, r1
 8000d4e:	d0e8      	beq.n	8000d22 <__gesf2+0x6e>
 8000d50:	e7db      	b.n	8000d0a <__gesf2+0x56>
 8000d52:	46c0      	nop			@ (mov r8, r8)

08000d54 <__lesf2>:
 8000d54:	b530      	push	{r4, r5, lr}
 8000d56:	0042      	lsls	r2, r0, #1
 8000d58:	0244      	lsls	r4, r0, #9
 8000d5a:	024d      	lsls	r5, r1, #9
 8000d5c:	0fc3      	lsrs	r3, r0, #31
 8000d5e:	0048      	lsls	r0, r1, #1
 8000d60:	0a64      	lsrs	r4, r4, #9
 8000d62:	0e12      	lsrs	r2, r2, #24
 8000d64:	0a6d      	lsrs	r5, r5, #9
 8000d66:	0e00      	lsrs	r0, r0, #24
 8000d68:	0fc9      	lsrs	r1, r1, #31
 8000d6a:	2aff      	cmp	r2, #255	@ 0xff
 8000d6c:	d01a      	beq.n	8000da4 <__lesf2+0x50>
 8000d6e:	28ff      	cmp	r0, #255	@ 0xff
 8000d70:	d00e      	beq.n	8000d90 <__lesf2+0x3c>
 8000d72:	2a00      	cmp	r2, #0
 8000d74:	d11e      	bne.n	8000db4 <__lesf2+0x60>
 8000d76:	2800      	cmp	r0, #0
 8000d78:	d10e      	bne.n	8000d98 <__lesf2+0x44>
 8000d7a:	2d00      	cmp	r5, #0
 8000d7c:	d02a      	beq.n	8000dd4 <__lesf2+0x80>
 8000d7e:	2c00      	cmp	r4, #0
 8000d80:	d00c      	beq.n	8000d9c <__lesf2+0x48>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d01d      	beq.n	8000dc2 <__lesf2+0x6e>
 8000d86:	1e58      	subs	r0, r3, #1
 8000d88:	2302      	movs	r3, #2
 8000d8a:	4018      	ands	r0, r3
 8000d8c:	3801      	subs	r0, #1
 8000d8e:	e010      	b.n	8000db2 <__lesf2+0x5e>
 8000d90:	2d00      	cmp	r5, #0
 8000d92:	d10d      	bne.n	8000db0 <__lesf2+0x5c>
 8000d94:	2a00      	cmp	r2, #0
 8000d96:	d120      	bne.n	8000dda <__lesf2+0x86>
 8000d98:	2c00      	cmp	r4, #0
 8000d9a:	d11e      	bne.n	8000dda <__lesf2+0x86>
 8000d9c:	2900      	cmp	r1, #0
 8000d9e:	d023      	beq.n	8000de8 <__lesf2+0x94>
 8000da0:	0008      	movs	r0, r1
 8000da2:	e006      	b.n	8000db2 <__lesf2+0x5e>
 8000da4:	2c00      	cmp	r4, #0
 8000da6:	d103      	bne.n	8000db0 <__lesf2+0x5c>
 8000da8:	28ff      	cmp	r0, #255	@ 0xff
 8000daa:	d1ec      	bne.n	8000d86 <__lesf2+0x32>
 8000dac:	2d00      	cmp	r5, #0
 8000dae:	d017      	beq.n	8000de0 <__lesf2+0x8c>
 8000db0:	2002      	movs	r0, #2
 8000db2:	bd30      	pop	{r4, r5, pc}
 8000db4:	2800      	cmp	r0, #0
 8000db6:	d0e6      	beq.n	8000d86 <__lesf2+0x32>
 8000db8:	428b      	cmp	r3, r1
 8000dba:	d1e4      	bne.n	8000d86 <__lesf2+0x32>
 8000dbc:	4282      	cmp	r2, r0
 8000dbe:	dce2      	bgt.n	8000d86 <__lesf2+0x32>
 8000dc0:	db04      	blt.n	8000dcc <__lesf2+0x78>
 8000dc2:	42ac      	cmp	r4, r5
 8000dc4:	d8df      	bhi.n	8000d86 <__lesf2+0x32>
 8000dc6:	2000      	movs	r0, #0
 8000dc8:	42ac      	cmp	r4, r5
 8000dca:	d2f2      	bcs.n	8000db2 <__lesf2+0x5e>
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d00b      	beq.n	8000de8 <__lesf2+0x94>
 8000dd0:	0018      	movs	r0, r3
 8000dd2:	e7ee      	b.n	8000db2 <__lesf2+0x5e>
 8000dd4:	2c00      	cmp	r4, #0
 8000dd6:	d0ec      	beq.n	8000db2 <__lesf2+0x5e>
 8000dd8:	e7d5      	b.n	8000d86 <__lesf2+0x32>
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d1d3      	bne.n	8000d86 <__lesf2+0x32>
 8000dde:	e7f5      	b.n	8000dcc <__lesf2+0x78>
 8000de0:	2000      	movs	r0, #0
 8000de2:	428b      	cmp	r3, r1
 8000de4:	d0e5      	beq.n	8000db2 <__lesf2+0x5e>
 8000de6:	e7ce      	b.n	8000d86 <__lesf2+0x32>
 8000de8:	2001      	movs	r0, #1
 8000dea:	4240      	negs	r0, r0
 8000dec:	e7e1      	b.n	8000db2 <__lesf2+0x5e>
 8000dee:	46c0      	nop			@ (mov r8, r8)

08000df0 <__aeabi_fmul>:
 8000df0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000df2:	464f      	mov	r7, r9
 8000df4:	4646      	mov	r6, r8
 8000df6:	46d6      	mov	lr, sl
 8000df8:	0243      	lsls	r3, r0, #9
 8000dfa:	0a5b      	lsrs	r3, r3, #9
 8000dfc:	0045      	lsls	r5, r0, #1
 8000dfe:	b5c0      	push	{r6, r7, lr}
 8000e00:	4699      	mov	r9, r3
 8000e02:	1c0f      	adds	r7, r1, #0
 8000e04:	0e2d      	lsrs	r5, r5, #24
 8000e06:	0fc6      	lsrs	r6, r0, #31
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d100      	bne.n	8000e0e <__aeabi_fmul+0x1e>
 8000e0c:	e088      	b.n	8000f20 <__aeabi_fmul+0x130>
 8000e0e:	2dff      	cmp	r5, #255	@ 0xff
 8000e10:	d100      	bne.n	8000e14 <__aeabi_fmul+0x24>
 8000e12:	e08d      	b.n	8000f30 <__aeabi_fmul+0x140>
 8000e14:	2280      	movs	r2, #128	@ 0x80
 8000e16:	00db      	lsls	r3, r3, #3
 8000e18:	04d2      	lsls	r2, r2, #19
 8000e1a:	431a      	orrs	r2, r3
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	4691      	mov	r9, r2
 8000e20:	4698      	mov	r8, r3
 8000e22:	469a      	mov	sl, r3
 8000e24:	3d7f      	subs	r5, #127	@ 0x7f
 8000e26:	027c      	lsls	r4, r7, #9
 8000e28:	007b      	lsls	r3, r7, #1
 8000e2a:	0a64      	lsrs	r4, r4, #9
 8000e2c:	0e1b      	lsrs	r3, r3, #24
 8000e2e:	0fff      	lsrs	r7, r7, #31
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d068      	beq.n	8000f06 <__aeabi_fmul+0x116>
 8000e34:	2bff      	cmp	r3, #255	@ 0xff
 8000e36:	d021      	beq.n	8000e7c <__aeabi_fmul+0x8c>
 8000e38:	2280      	movs	r2, #128	@ 0x80
 8000e3a:	00e4      	lsls	r4, r4, #3
 8000e3c:	04d2      	lsls	r2, r2, #19
 8000e3e:	4314      	orrs	r4, r2
 8000e40:	4642      	mov	r2, r8
 8000e42:	3b7f      	subs	r3, #127	@ 0x7f
 8000e44:	195b      	adds	r3, r3, r5
 8000e46:	2100      	movs	r1, #0
 8000e48:	1c5d      	adds	r5, r3, #1
 8000e4a:	2a0a      	cmp	r2, #10
 8000e4c:	dc2e      	bgt.n	8000eac <__aeabi_fmul+0xbc>
 8000e4e:	407e      	eors	r6, r7
 8000e50:	4642      	mov	r2, r8
 8000e52:	2a02      	cmp	r2, #2
 8000e54:	dc23      	bgt.n	8000e9e <__aeabi_fmul+0xae>
 8000e56:	3a01      	subs	r2, #1
 8000e58:	2a01      	cmp	r2, #1
 8000e5a:	d900      	bls.n	8000e5e <__aeabi_fmul+0x6e>
 8000e5c:	e0bd      	b.n	8000fda <__aeabi_fmul+0x1ea>
 8000e5e:	2902      	cmp	r1, #2
 8000e60:	d06e      	beq.n	8000f40 <__aeabi_fmul+0x150>
 8000e62:	2901      	cmp	r1, #1
 8000e64:	d12c      	bne.n	8000ec0 <__aeabi_fmul+0xd0>
 8000e66:	2000      	movs	r0, #0
 8000e68:	2200      	movs	r2, #0
 8000e6a:	05c0      	lsls	r0, r0, #23
 8000e6c:	07f6      	lsls	r6, r6, #31
 8000e6e:	4310      	orrs	r0, r2
 8000e70:	4330      	orrs	r0, r6
 8000e72:	bce0      	pop	{r5, r6, r7}
 8000e74:	46ba      	mov	sl, r7
 8000e76:	46b1      	mov	r9, r6
 8000e78:	46a8      	mov	r8, r5
 8000e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e7c:	002b      	movs	r3, r5
 8000e7e:	33ff      	adds	r3, #255	@ 0xff
 8000e80:	2c00      	cmp	r4, #0
 8000e82:	d065      	beq.n	8000f50 <__aeabi_fmul+0x160>
 8000e84:	2203      	movs	r2, #3
 8000e86:	4641      	mov	r1, r8
 8000e88:	4311      	orrs	r1, r2
 8000e8a:	0032      	movs	r2, r6
 8000e8c:	3501      	adds	r5, #1
 8000e8e:	4688      	mov	r8, r1
 8000e90:	407a      	eors	r2, r7
 8000e92:	35ff      	adds	r5, #255	@ 0xff
 8000e94:	290a      	cmp	r1, #10
 8000e96:	dd00      	ble.n	8000e9a <__aeabi_fmul+0xaa>
 8000e98:	e0d8      	b.n	800104c <__aeabi_fmul+0x25c>
 8000e9a:	0016      	movs	r6, r2
 8000e9c:	2103      	movs	r1, #3
 8000e9e:	4640      	mov	r0, r8
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	4082      	lsls	r2, r0
 8000ea4:	20a6      	movs	r0, #166	@ 0xa6
 8000ea6:	00c0      	lsls	r0, r0, #3
 8000ea8:	4202      	tst	r2, r0
 8000eaa:	d020      	beq.n	8000eee <__aeabi_fmul+0xfe>
 8000eac:	4653      	mov	r3, sl
 8000eae:	2b02      	cmp	r3, #2
 8000eb0:	d046      	beq.n	8000f40 <__aeabi_fmul+0x150>
 8000eb2:	2b03      	cmp	r3, #3
 8000eb4:	d100      	bne.n	8000eb8 <__aeabi_fmul+0xc8>
 8000eb6:	e0bb      	b.n	8001030 <__aeabi_fmul+0x240>
 8000eb8:	4651      	mov	r1, sl
 8000eba:	464c      	mov	r4, r9
 8000ebc:	2901      	cmp	r1, #1
 8000ebe:	d0d2      	beq.n	8000e66 <__aeabi_fmul+0x76>
 8000ec0:	002b      	movs	r3, r5
 8000ec2:	337f      	adds	r3, #127	@ 0x7f
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	dd70      	ble.n	8000faa <__aeabi_fmul+0x1ba>
 8000ec8:	0762      	lsls	r2, r4, #29
 8000eca:	d004      	beq.n	8000ed6 <__aeabi_fmul+0xe6>
 8000ecc:	220f      	movs	r2, #15
 8000ece:	4022      	ands	r2, r4
 8000ed0:	2a04      	cmp	r2, #4
 8000ed2:	d000      	beq.n	8000ed6 <__aeabi_fmul+0xe6>
 8000ed4:	3404      	adds	r4, #4
 8000ed6:	0122      	lsls	r2, r4, #4
 8000ed8:	d503      	bpl.n	8000ee2 <__aeabi_fmul+0xf2>
 8000eda:	4b63      	ldr	r3, [pc, #396]	@ (8001068 <__aeabi_fmul+0x278>)
 8000edc:	401c      	ands	r4, r3
 8000ede:	002b      	movs	r3, r5
 8000ee0:	3380      	adds	r3, #128	@ 0x80
 8000ee2:	2bfe      	cmp	r3, #254	@ 0xfe
 8000ee4:	dc2c      	bgt.n	8000f40 <__aeabi_fmul+0x150>
 8000ee6:	01a2      	lsls	r2, r4, #6
 8000ee8:	0a52      	lsrs	r2, r2, #9
 8000eea:	b2d8      	uxtb	r0, r3
 8000eec:	e7bd      	b.n	8000e6a <__aeabi_fmul+0x7a>
 8000eee:	2090      	movs	r0, #144	@ 0x90
 8000ef0:	0080      	lsls	r0, r0, #2
 8000ef2:	4202      	tst	r2, r0
 8000ef4:	d127      	bne.n	8000f46 <__aeabi_fmul+0x156>
 8000ef6:	38b9      	subs	r0, #185	@ 0xb9
 8000ef8:	38ff      	subs	r0, #255	@ 0xff
 8000efa:	4210      	tst	r0, r2
 8000efc:	d06d      	beq.n	8000fda <__aeabi_fmul+0x1ea>
 8000efe:	003e      	movs	r6, r7
 8000f00:	46a1      	mov	r9, r4
 8000f02:	468a      	mov	sl, r1
 8000f04:	e7d2      	b.n	8000eac <__aeabi_fmul+0xbc>
 8000f06:	2c00      	cmp	r4, #0
 8000f08:	d141      	bne.n	8000f8e <__aeabi_fmul+0x19e>
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	4642      	mov	r2, r8
 8000f0e:	431a      	orrs	r2, r3
 8000f10:	4690      	mov	r8, r2
 8000f12:	002b      	movs	r3, r5
 8000f14:	4642      	mov	r2, r8
 8000f16:	2101      	movs	r1, #1
 8000f18:	1c5d      	adds	r5, r3, #1
 8000f1a:	2a0a      	cmp	r2, #10
 8000f1c:	dd97      	ble.n	8000e4e <__aeabi_fmul+0x5e>
 8000f1e:	e7c5      	b.n	8000eac <__aeabi_fmul+0xbc>
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d126      	bne.n	8000f72 <__aeabi_fmul+0x182>
 8000f24:	2304      	movs	r3, #4
 8000f26:	4698      	mov	r8, r3
 8000f28:	3b03      	subs	r3, #3
 8000f2a:	2500      	movs	r5, #0
 8000f2c:	469a      	mov	sl, r3
 8000f2e:	e77a      	b.n	8000e26 <__aeabi_fmul+0x36>
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d118      	bne.n	8000f66 <__aeabi_fmul+0x176>
 8000f34:	2308      	movs	r3, #8
 8000f36:	4698      	mov	r8, r3
 8000f38:	3b06      	subs	r3, #6
 8000f3a:	25ff      	movs	r5, #255	@ 0xff
 8000f3c:	469a      	mov	sl, r3
 8000f3e:	e772      	b.n	8000e26 <__aeabi_fmul+0x36>
 8000f40:	20ff      	movs	r0, #255	@ 0xff
 8000f42:	2200      	movs	r2, #0
 8000f44:	e791      	b.n	8000e6a <__aeabi_fmul+0x7a>
 8000f46:	2280      	movs	r2, #128	@ 0x80
 8000f48:	2600      	movs	r6, #0
 8000f4a:	20ff      	movs	r0, #255	@ 0xff
 8000f4c:	03d2      	lsls	r2, r2, #15
 8000f4e:	e78c      	b.n	8000e6a <__aeabi_fmul+0x7a>
 8000f50:	4641      	mov	r1, r8
 8000f52:	2202      	movs	r2, #2
 8000f54:	3501      	adds	r5, #1
 8000f56:	4311      	orrs	r1, r2
 8000f58:	4688      	mov	r8, r1
 8000f5a:	35ff      	adds	r5, #255	@ 0xff
 8000f5c:	290a      	cmp	r1, #10
 8000f5e:	dca5      	bgt.n	8000eac <__aeabi_fmul+0xbc>
 8000f60:	2102      	movs	r1, #2
 8000f62:	407e      	eors	r6, r7
 8000f64:	e774      	b.n	8000e50 <__aeabi_fmul+0x60>
 8000f66:	230c      	movs	r3, #12
 8000f68:	4698      	mov	r8, r3
 8000f6a:	3b09      	subs	r3, #9
 8000f6c:	25ff      	movs	r5, #255	@ 0xff
 8000f6e:	469a      	mov	sl, r3
 8000f70:	e759      	b.n	8000e26 <__aeabi_fmul+0x36>
 8000f72:	0018      	movs	r0, r3
 8000f74:	f002 f984 	bl	8003280 <__clzsi2>
 8000f78:	464a      	mov	r2, r9
 8000f7a:	1f43      	subs	r3, r0, #5
 8000f7c:	2576      	movs	r5, #118	@ 0x76
 8000f7e:	409a      	lsls	r2, r3
 8000f80:	2300      	movs	r3, #0
 8000f82:	426d      	negs	r5, r5
 8000f84:	4691      	mov	r9, r2
 8000f86:	4698      	mov	r8, r3
 8000f88:	469a      	mov	sl, r3
 8000f8a:	1a2d      	subs	r5, r5, r0
 8000f8c:	e74b      	b.n	8000e26 <__aeabi_fmul+0x36>
 8000f8e:	0020      	movs	r0, r4
 8000f90:	f002 f976 	bl	8003280 <__clzsi2>
 8000f94:	4642      	mov	r2, r8
 8000f96:	1f43      	subs	r3, r0, #5
 8000f98:	409c      	lsls	r4, r3
 8000f9a:	1a2b      	subs	r3, r5, r0
 8000f9c:	3b76      	subs	r3, #118	@ 0x76
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	1c5d      	adds	r5, r3, #1
 8000fa2:	2a0a      	cmp	r2, #10
 8000fa4:	dc00      	bgt.n	8000fa8 <__aeabi_fmul+0x1b8>
 8000fa6:	e752      	b.n	8000e4e <__aeabi_fmul+0x5e>
 8000fa8:	e780      	b.n	8000eac <__aeabi_fmul+0xbc>
 8000faa:	2201      	movs	r2, #1
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	2b1b      	cmp	r3, #27
 8000fb0:	dd00      	ble.n	8000fb4 <__aeabi_fmul+0x1c4>
 8000fb2:	e758      	b.n	8000e66 <__aeabi_fmul+0x76>
 8000fb4:	359e      	adds	r5, #158	@ 0x9e
 8000fb6:	0022      	movs	r2, r4
 8000fb8:	40ac      	lsls	r4, r5
 8000fba:	40da      	lsrs	r2, r3
 8000fbc:	1e63      	subs	r3, r4, #1
 8000fbe:	419c      	sbcs	r4, r3
 8000fc0:	4322      	orrs	r2, r4
 8000fc2:	0753      	lsls	r3, r2, #29
 8000fc4:	d004      	beq.n	8000fd0 <__aeabi_fmul+0x1e0>
 8000fc6:	230f      	movs	r3, #15
 8000fc8:	4013      	ands	r3, r2
 8000fca:	2b04      	cmp	r3, #4
 8000fcc:	d000      	beq.n	8000fd0 <__aeabi_fmul+0x1e0>
 8000fce:	3204      	adds	r2, #4
 8000fd0:	0153      	lsls	r3, r2, #5
 8000fd2:	d537      	bpl.n	8001044 <__aeabi_fmul+0x254>
 8000fd4:	2001      	movs	r0, #1
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	e747      	b.n	8000e6a <__aeabi_fmul+0x7a>
 8000fda:	0c21      	lsrs	r1, r4, #16
 8000fdc:	464a      	mov	r2, r9
 8000fde:	0424      	lsls	r4, r4, #16
 8000fe0:	0c24      	lsrs	r4, r4, #16
 8000fe2:	0027      	movs	r7, r4
 8000fe4:	0c10      	lsrs	r0, r2, #16
 8000fe6:	0412      	lsls	r2, r2, #16
 8000fe8:	0c12      	lsrs	r2, r2, #16
 8000fea:	4344      	muls	r4, r0
 8000fec:	4357      	muls	r7, r2
 8000fee:	4348      	muls	r0, r1
 8000ff0:	4351      	muls	r1, r2
 8000ff2:	0c3a      	lsrs	r2, r7, #16
 8000ff4:	1909      	adds	r1, r1, r4
 8000ff6:	1852      	adds	r2, r2, r1
 8000ff8:	4294      	cmp	r4, r2
 8000ffa:	d903      	bls.n	8001004 <__aeabi_fmul+0x214>
 8000ffc:	2180      	movs	r1, #128	@ 0x80
 8000ffe:	0249      	lsls	r1, r1, #9
 8001000:	468c      	mov	ip, r1
 8001002:	4460      	add	r0, ip
 8001004:	043f      	lsls	r7, r7, #16
 8001006:	0411      	lsls	r1, r2, #16
 8001008:	0c3f      	lsrs	r7, r7, #16
 800100a:	19c9      	adds	r1, r1, r7
 800100c:	018c      	lsls	r4, r1, #6
 800100e:	1e67      	subs	r7, r4, #1
 8001010:	41bc      	sbcs	r4, r7
 8001012:	0c12      	lsrs	r2, r2, #16
 8001014:	0e89      	lsrs	r1, r1, #26
 8001016:	1812      	adds	r2, r2, r0
 8001018:	430c      	orrs	r4, r1
 800101a:	0192      	lsls	r2, r2, #6
 800101c:	4314      	orrs	r4, r2
 800101e:	0112      	lsls	r2, r2, #4
 8001020:	d50e      	bpl.n	8001040 <__aeabi_fmul+0x250>
 8001022:	2301      	movs	r3, #1
 8001024:	0862      	lsrs	r2, r4, #1
 8001026:	401c      	ands	r4, r3
 8001028:	4314      	orrs	r4, r2
 800102a:	e749      	b.n	8000ec0 <__aeabi_fmul+0xd0>
 800102c:	003e      	movs	r6, r7
 800102e:	46a1      	mov	r9, r4
 8001030:	2280      	movs	r2, #128	@ 0x80
 8001032:	464b      	mov	r3, r9
 8001034:	03d2      	lsls	r2, r2, #15
 8001036:	431a      	orrs	r2, r3
 8001038:	0252      	lsls	r2, r2, #9
 800103a:	20ff      	movs	r0, #255	@ 0xff
 800103c:	0a52      	lsrs	r2, r2, #9
 800103e:	e714      	b.n	8000e6a <__aeabi_fmul+0x7a>
 8001040:	001d      	movs	r5, r3
 8001042:	e73d      	b.n	8000ec0 <__aeabi_fmul+0xd0>
 8001044:	0192      	lsls	r2, r2, #6
 8001046:	2000      	movs	r0, #0
 8001048:	0a52      	lsrs	r2, r2, #9
 800104a:	e70e      	b.n	8000e6a <__aeabi_fmul+0x7a>
 800104c:	290f      	cmp	r1, #15
 800104e:	d1ed      	bne.n	800102c <__aeabi_fmul+0x23c>
 8001050:	2280      	movs	r2, #128	@ 0x80
 8001052:	464b      	mov	r3, r9
 8001054:	03d2      	lsls	r2, r2, #15
 8001056:	4213      	tst	r3, r2
 8001058:	d0ea      	beq.n	8001030 <__aeabi_fmul+0x240>
 800105a:	4214      	tst	r4, r2
 800105c:	d1e8      	bne.n	8001030 <__aeabi_fmul+0x240>
 800105e:	003e      	movs	r6, r7
 8001060:	20ff      	movs	r0, #255	@ 0xff
 8001062:	4322      	orrs	r2, r4
 8001064:	e701      	b.n	8000e6a <__aeabi_fmul+0x7a>
 8001066:	46c0      	nop			@ (mov r8, r8)
 8001068:	f7ffffff 	.word	0xf7ffffff

0800106c <__aeabi_fsub>:
 800106c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800106e:	4647      	mov	r7, r8
 8001070:	46ce      	mov	lr, r9
 8001072:	024e      	lsls	r6, r1, #9
 8001074:	0243      	lsls	r3, r0, #9
 8001076:	0045      	lsls	r5, r0, #1
 8001078:	0a72      	lsrs	r2, r6, #9
 800107a:	0fc4      	lsrs	r4, r0, #31
 800107c:	0048      	lsls	r0, r1, #1
 800107e:	b580      	push	{r7, lr}
 8001080:	4694      	mov	ip, r2
 8001082:	0a5f      	lsrs	r7, r3, #9
 8001084:	0e2d      	lsrs	r5, r5, #24
 8001086:	099b      	lsrs	r3, r3, #6
 8001088:	0e00      	lsrs	r0, r0, #24
 800108a:	0fc9      	lsrs	r1, r1, #31
 800108c:	09b6      	lsrs	r6, r6, #6
 800108e:	28ff      	cmp	r0, #255	@ 0xff
 8001090:	d024      	beq.n	80010dc <__aeabi_fsub+0x70>
 8001092:	2201      	movs	r2, #1
 8001094:	4051      	eors	r1, r2
 8001096:	1a2a      	subs	r2, r5, r0
 8001098:	428c      	cmp	r4, r1
 800109a:	d00f      	beq.n	80010bc <__aeabi_fsub+0x50>
 800109c:	2a00      	cmp	r2, #0
 800109e:	dc00      	bgt.n	80010a2 <__aeabi_fsub+0x36>
 80010a0:	e16a      	b.n	8001378 <__aeabi_fsub+0x30c>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	d135      	bne.n	8001112 <__aeabi_fsub+0xa6>
 80010a6:	2e00      	cmp	r6, #0
 80010a8:	d100      	bne.n	80010ac <__aeabi_fsub+0x40>
 80010aa:	e0a2      	b.n	80011f2 <__aeabi_fsub+0x186>
 80010ac:	1e51      	subs	r1, r2, #1
 80010ae:	2a01      	cmp	r2, #1
 80010b0:	d100      	bne.n	80010b4 <__aeabi_fsub+0x48>
 80010b2:	e124      	b.n	80012fe <__aeabi_fsub+0x292>
 80010b4:	2aff      	cmp	r2, #255	@ 0xff
 80010b6:	d021      	beq.n	80010fc <__aeabi_fsub+0x90>
 80010b8:	000a      	movs	r2, r1
 80010ba:	e02f      	b.n	800111c <__aeabi_fsub+0xb0>
 80010bc:	2a00      	cmp	r2, #0
 80010be:	dc00      	bgt.n	80010c2 <__aeabi_fsub+0x56>
 80010c0:	e167      	b.n	8001392 <__aeabi_fsub+0x326>
 80010c2:	2800      	cmp	r0, #0
 80010c4:	d05e      	beq.n	8001184 <__aeabi_fsub+0x118>
 80010c6:	2dff      	cmp	r5, #255	@ 0xff
 80010c8:	d018      	beq.n	80010fc <__aeabi_fsub+0x90>
 80010ca:	2180      	movs	r1, #128	@ 0x80
 80010cc:	04c9      	lsls	r1, r1, #19
 80010ce:	430e      	orrs	r6, r1
 80010d0:	2a1b      	cmp	r2, #27
 80010d2:	dc00      	bgt.n	80010d6 <__aeabi_fsub+0x6a>
 80010d4:	e076      	b.n	80011c4 <__aeabi_fsub+0x158>
 80010d6:	002a      	movs	r2, r5
 80010d8:	3301      	adds	r3, #1
 80010da:	e032      	b.n	8001142 <__aeabi_fsub+0xd6>
 80010dc:	002a      	movs	r2, r5
 80010de:	3aff      	subs	r2, #255	@ 0xff
 80010e0:	4691      	mov	r9, r2
 80010e2:	2e00      	cmp	r6, #0
 80010e4:	d042      	beq.n	800116c <__aeabi_fsub+0x100>
 80010e6:	428c      	cmp	r4, r1
 80010e8:	d055      	beq.n	8001196 <__aeabi_fsub+0x12a>
 80010ea:	464a      	mov	r2, r9
 80010ec:	2a00      	cmp	r2, #0
 80010ee:	d100      	bne.n	80010f2 <__aeabi_fsub+0x86>
 80010f0:	e09c      	b.n	800122c <__aeabi_fsub+0x1c0>
 80010f2:	2d00      	cmp	r5, #0
 80010f4:	d100      	bne.n	80010f8 <__aeabi_fsub+0x8c>
 80010f6:	e077      	b.n	80011e8 <__aeabi_fsub+0x17c>
 80010f8:	000c      	movs	r4, r1
 80010fa:	0033      	movs	r3, r6
 80010fc:	08db      	lsrs	r3, r3, #3
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d100      	bne.n	8001104 <__aeabi_fsub+0x98>
 8001102:	e06e      	b.n	80011e2 <__aeabi_fsub+0x176>
 8001104:	2280      	movs	r2, #128	@ 0x80
 8001106:	03d2      	lsls	r2, r2, #15
 8001108:	4313      	orrs	r3, r2
 800110a:	025b      	lsls	r3, r3, #9
 800110c:	20ff      	movs	r0, #255	@ 0xff
 800110e:	0a5b      	lsrs	r3, r3, #9
 8001110:	e024      	b.n	800115c <__aeabi_fsub+0xf0>
 8001112:	2dff      	cmp	r5, #255	@ 0xff
 8001114:	d0f2      	beq.n	80010fc <__aeabi_fsub+0x90>
 8001116:	2180      	movs	r1, #128	@ 0x80
 8001118:	04c9      	lsls	r1, r1, #19
 800111a:	430e      	orrs	r6, r1
 800111c:	2101      	movs	r1, #1
 800111e:	2a1b      	cmp	r2, #27
 8001120:	dc08      	bgt.n	8001134 <__aeabi_fsub+0xc8>
 8001122:	0031      	movs	r1, r6
 8001124:	2020      	movs	r0, #32
 8001126:	40d1      	lsrs	r1, r2
 8001128:	1a82      	subs	r2, r0, r2
 800112a:	4096      	lsls	r6, r2
 800112c:	0032      	movs	r2, r6
 800112e:	1e50      	subs	r0, r2, #1
 8001130:	4182      	sbcs	r2, r0
 8001132:	4311      	orrs	r1, r2
 8001134:	1a5b      	subs	r3, r3, r1
 8001136:	015a      	lsls	r2, r3, #5
 8001138:	d460      	bmi.n	80011fc <__aeabi_fsub+0x190>
 800113a:	2107      	movs	r1, #7
 800113c:	002a      	movs	r2, r5
 800113e:	4019      	ands	r1, r3
 8001140:	d057      	beq.n	80011f2 <__aeabi_fsub+0x186>
 8001142:	210f      	movs	r1, #15
 8001144:	4019      	ands	r1, r3
 8001146:	2904      	cmp	r1, #4
 8001148:	d000      	beq.n	800114c <__aeabi_fsub+0xe0>
 800114a:	3304      	adds	r3, #4
 800114c:	0159      	lsls	r1, r3, #5
 800114e:	d550      	bpl.n	80011f2 <__aeabi_fsub+0x186>
 8001150:	1c50      	adds	r0, r2, #1
 8001152:	2afe      	cmp	r2, #254	@ 0xfe
 8001154:	d045      	beq.n	80011e2 <__aeabi_fsub+0x176>
 8001156:	019b      	lsls	r3, r3, #6
 8001158:	b2c0      	uxtb	r0, r0
 800115a:	0a5b      	lsrs	r3, r3, #9
 800115c:	05c0      	lsls	r0, r0, #23
 800115e:	4318      	orrs	r0, r3
 8001160:	07e4      	lsls	r4, r4, #31
 8001162:	4320      	orrs	r0, r4
 8001164:	bcc0      	pop	{r6, r7}
 8001166:	46b9      	mov	r9, r7
 8001168:	46b0      	mov	r8, r6
 800116a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800116c:	2201      	movs	r2, #1
 800116e:	4051      	eors	r1, r2
 8001170:	428c      	cmp	r4, r1
 8001172:	d1ba      	bne.n	80010ea <__aeabi_fsub+0x7e>
 8001174:	464a      	mov	r2, r9
 8001176:	2a00      	cmp	r2, #0
 8001178:	d010      	beq.n	800119c <__aeabi_fsub+0x130>
 800117a:	2d00      	cmp	r5, #0
 800117c:	d100      	bne.n	8001180 <__aeabi_fsub+0x114>
 800117e:	e098      	b.n	80012b2 <__aeabi_fsub+0x246>
 8001180:	2300      	movs	r3, #0
 8001182:	e7bb      	b.n	80010fc <__aeabi_fsub+0x90>
 8001184:	2e00      	cmp	r6, #0
 8001186:	d034      	beq.n	80011f2 <__aeabi_fsub+0x186>
 8001188:	1e51      	subs	r1, r2, #1
 800118a:	2a01      	cmp	r2, #1
 800118c:	d06e      	beq.n	800126c <__aeabi_fsub+0x200>
 800118e:	2aff      	cmp	r2, #255	@ 0xff
 8001190:	d0b4      	beq.n	80010fc <__aeabi_fsub+0x90>
 8001192:	000a      	movs	r2, r1
 8001194:	e79c      	b.n	80010d0 <__aeabi_fsub+0x64>
 8001196:	2a00      	cmp	r2, #0
 8001198:	d000      	beq.n	800119c <__aeabi_fsub+0x130>
 800119a:	e088      	b.n	80012ae <__aeabi_fsub+0x242>
 800119c:	20fe      	movs	r0, #254	@ 0xfe
 800119e:	1c6a      	adds	r2, r5, #1
 80011a0:	4210      	tst	r0, r2
 80011a2:	d000      	beq.n	80011a6 <__aeabi_fsub+0x13a>
 80011a4:	e092      	b.n	80012cc <__aeabi_fsub+0x260>
 80011a6:	2d00      	cmp	r5, #0
 80011a8:	d000      	beq.n	80011ac <__aeabi_fsub+0x140>
 80011aa:	e0a4      	b.n	80012f6 <__aeabi_fsub+0x28a>
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d100      	bne.n	80011b2 <__aeabi_fsub+0x146>
 80011b0:	e0cb      	b.n	800134a <__aeabi_fsub+0x2de>
 80011b2:	2e00      	cmp	r6, #0
 80011b4:	d000      	beq.n	80011b8 <__aeabi_fsub+0x14c>
 80011b6:	e0ca      	b.n	800134e <__aeabi_fsub+0x2e2>
 80011b8:	2200      	movs	r2, #0
 80011ba:	08db      	lsrs	r3, r3, #3
 80011bc:	025b      	lsls	r3, r3, #9
 80011be:	0a5b      	lsrs	r3, r3, #9
 80011c0:	b2d0      	uxtb	r0, r2
 80011c2:	e7cb      	b.n	800115c <__aeabi_fsub+0xf0>
 80011c4:	0031      	movs	r1, r6
 80011c6:	2020      	movs	r0, #32
 80011c8:	40d1      	lsrs	r1, r2
 80011ca:	1a82      	subs	r2, r0, r2
 80011cc:	4096      	lsls	r6, r2
 80011ce:	0032      	movs	r2, r6
 80011d0:	1e50      	subs	r0, r2, #1
 80011d2:	4182      	sbcs	r2, r0
 80011d4:	430a      	orrs	r2, r1
 80011d6:	189b      	adds	r3, r3, r2
 80011d8:	015a      	lsls	r2, r3, #5
 80011da:	d5ae      	bpl.n	800113a <__aeabi_fsub+0xce>
 80011dc:	1c6a      	adds	r2, r5, #1
 80011de:	2dfe      	cmp	r5, #254	@ 0xfe
 80011e0:	d14a      	bne.n	8001278 <__aeabi_fsub+0x20c>
 80011e2:	20ff      	movs	r0, #255	@ 0xff
 80011e4:	2300      	movs	r3, #0
 80011e6:	e7b9      	b.n	800115c <__aeabi_fsub+0xf0>
 80011e8:	22ff      	movs	r2, #255	@ 0xff
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d14b      	bne.n	8001286 <__aeabi_fsub+0x21a>
 80011ee:	000c      	movs	r4, r1
 80011f0:	0033      	movs	r3, r6
 80011f2:	08db      	lsrs	r3, r3, #3
 80011f4:	2aff      	cmp	r2, #255	@ 0xff
 80011f6:	d100      	bne.n	80011fa <__aeabi_fsub+0x18e>
 80011f8:	e781      	b.n	80010fe <__aeabi_fsub+0x92>
 80011fa:	e7df      	b.n	80011bc <__aeabi_fsub+0x150>
 80011fc:	019f      	lsls	r7, r3, #6
 80011fe:	09bf      	lsrs	r7, r7, #6
 8001200:	0038      	movs	r0, r7
 8001202:	f002 f83d 	bl	8003280 <__clzsi2>
 8001206:	3805      	subs	r0, #5
 8001208:	4087      	lsls	r7, r0
 800120a:	4285      	cmp	r5, r0
 800120c:	dc21      	bgt.n	8001252 <__aeabi_fsub+0x1e6>
 800120e:	003b      	movs	r3, r7
 8001210:	2120      	movs	r1, #32
 8001212:	1b42      	subs	r2, r0, r5
 8001214:	3201      	adds	r2, #1
 8001216:	40d3      	lsrs	r3, r2
 8001218:	1a8a      	subs	r2, r1, r2
 800121a:	4097      	lsls	r7, r2
 800121c:	1e7a      	subs	r2, r7, #1
 800121e:	4197      	sbcs	r7, r2
 8001220:	2200      	movs	r2, #0
 8001222:	433b      	orrs	r3, r7
 8001224:	0759      	lsls	r1, r3, #29
 8001226:	d000      	beq.n	800122a <__aeabi_fsub+0x1be>
 8001228:	e78b      	b.n	8001142 <__aeabi_fsub+0xd6>
 800122a:	e78f      	b.n	800114c <__aeabi_fsub+0xe0>
 800122c:	20fe      	movs	r0, #254	@ 0xfe
 800122e:	1c6a      	adds	r2, r5, #1
 8001230:	4210      	tst	r0, r2
 8001232:	d112      	bne.n	800125a <__aeabi_fsub+0x1ee>
 8001234:	2d00      	cmp	r5, #0
 8001236:	d152      	bne.n	80012de <__aeabi_fsub+0x272>
 8001238:	2b00      	cmp	r3, #0
 800123a:	d07c      	beq.n	8001336 <__aeabi_fsub+0x2ca>
 800123c:	2e00      	cmp	r6, #0
 800123e:	d0bb      	beq.n	80011b8 <__aeabi_fsub+0x14c>
 8001240:	1b9a      	subs	r2, r3, r6
 8001242:	0150      	lsls	r0, r2, #5
 8001244:	d400      	bmi.n	8001248 <__aeabi_fsub+0x1dc>
 8001246:	e08b      	b.n	8001360 <__aeabi_fsub+0x2f4>
 8001248:	2401      	movs	r4, #1
 800124a:	2200      	movs	r2, #0
 800124c:	1af3      	subs	r3, r6, r3
 800124e:	400c      	ands	r4, r1
 8001250:	e7e8      	b.n	8001224 <__aeabi_fsub+0x1b8>
 8001252:	4b56      	ldr	r3, [pc, #344]	@ (80013ac <__aeabi_fsub+0x340>)
 8001254:	1a2a      	subs	r2, r5, r0
 8001256:	403b      	ands	r3, r7
 8001258:	e7e4      	b.n	8001224 <__aeabi_fsub+0x1b8>
 800125a:	1b9f      	subs	r7, r3, r6
 800125c:	017a      	lsls	r2, r7, #5
 800125e:	d446      	bmi.n	80012ee <__aeabi_fsub+0x282>
 8001260:	2f00      	cmp	r7, #0
 8001262:	d1cd      	bne.n	8001200 <__aeabi_fsub+0x194>
 8001264:	2400      	movs	r4, #0
 8001266:	2000      	movs	r0, #0
 8001268:	2300      	movs	r3, #0
 800126a:	e777      	b.n	800115c <__aeabi_fsub+0xf0>
 800126c:	199b      	adds	r3, r3, r6
 800126e:	2501      	movs	r5, #1
 8001270:	3201      	adds	r2, #1
 8001272:	0159      	lsls	r1, r3, #5
 8001274:	d400      	bmi.n	8001278 <__aeabi_fsub+0x20c>
 8001276:	e760      	b.n	800113a <__aeabi_fsub+0xce>
 8001278:	2101      	movs	r1, #1
 800127a:	484d      	ldr	r0, [pc, #308]	@ (80013b0 <__aeabi_fsub+0x344>)
 800127c:	4019      	ands	r1, r3
 800127e:	085b      	lsrs	r3, r3, #1
 8001280:	4003      	ands	r3, r0
 8001282:	430b      	orrs	r3, r1
 8001284:	e7ce      	b.n	8001224 <__aeabi_fsub+0x1b8>
 8001286:	1e57      	subs	r7, r2, #1
 8001288:	2a01      	cmp	r2, #1
 800128a:	d05a      	beq.n	8001342 <__aeabi_fsub+0x2d6>
 800128c:	000c      	movs	r4, r1
 800128e:	2aff      	cmp	r2, #255	@ 0xff
 8001290:	d033      	beq.n	80012fa <__aeabi_fsub+0x28e>
 8001292:	2201      	movs	r2, #1
 8001294:	2f1b      	cmp	r7, #27
 8001296:	dc07      	bgt.n	80012a8 <__aeabi_fsub+0x23c>
 8001298:	2120      	movs	r1, #32
 800129a:	1bc9      	subs	r1, r1, r7
 800129c:	001a      	movs	r2, r3
 800129e:	408b      	lsls	r3, r1
 80012a0:	40fa      	lsrs	r2, r7
 80012a2:	1e59      	subs	r1, r3, #1
 80012a4:	418b      	sbcs	r3, r1
 80012a6:	431a      	orrs	r2, r3
 80012a8:	0005      	movs	r5, r0
 80012aa:	1ab3      	subs	r3, r6, r2
 80012ac:	e743      	b.n	8001136 <__aeabi_fsub+0xca>
 80012ae:	2d00      	cmp	r5, #0
 80012b0:	d123      	bne.n	80012fa <__aeabi_fsub+0x28e>
 80012b2:	22ff      	movs	r2, #255	@ 0xff
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d09b      	beq.n	80011f0 <__aeabi_fsub+0x184>
 80012b8:	1e51      	subs	r1, r2, #1
 80012ba:	2a01      	cmp	r2, #1
 80012bc:	d0d6      	beq.n	800126c <__aeabi_fsub+0x200>
 80012be:	2aff      	cmp	r2, #255	@ 0xff
 80012c0:	d01b      	beq.n	80012fa <__aeabi_fsub+0x28e>
 80012c2:	291b      	cmp	r1, #27
 80012c4:	dd2c      	ble.n	8001320 <__aeabi_fsub+0x2b4>
 80012c6:	0002      	movs	r2, r0
 80012c8:	1c73      	adds	r3, r6, #1
 80012ca:	e73a      	b.n	8001142 <__aeabi_fsub+0xd6>
 80012cc:	2aff      	cmp	r2, #255	@ 0xff
 80012ce:	d088      	beq.n	80011e2 <__aeabi_fsub+0x176>
 80012d0:	199b      	adds	r3, r3, r6
 80012d2:	085b      	lsrs	r3, r3, #1
 80012d4:	0759      	lsls	r1, r3, #29
 80012d6:	d000      	beq.n	80012da <__aeabi_fsub+0x26e>
 80012d8:	e733      	b.n	8001142 <__aeabi_fsub+0xd6>
 80012da:	08db      	lsrs	r3, r3, #3
 80012dc:	e76e      	b.n	80011bc <__aeabi_fsub+0x150>
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d110      	bne.n	8001304 <__aeabi_fsub+0x298>
 80012e2:	2e00      	cmp	r6, #0
 80012e4:	d043      	beq.n	800136e <__aeabi_fsub+0x302>
 80012e6:	2401      	movs	r4, #1
 80012e8:	0033      	movs	r3, r6
 80012ea:	400c      	ands	r4, r1
 80012ec:	e706      	b.n	80010fc <__aeabi_fsub+0x90>
 80012ee:	2401      	movs	r4, #1
 80012f0:	1af7      	subs	r7, r6, r3
 80012f2:	400c      	ands	r4, r1
 80012f4:	e784      	b.n	8001200 <__aeabi_fsub+0x194>
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d104      	bne.n	8001304 <__aeabi_fsub+0x298>
 80012fa:	0033      	movs	r3, r6
 80012fc:	e6fe      	b.n	80010fc <__aeabi_fsub+0x90>
 80012fe:	2501      	movs	r5, #1
 8001300:	1b9b      	subs	r3, r3, r6
 8001302:	e718      	b.n	8001136 <__aeabi_fsub+0xca>
 8001304:	2e00      	cmp	r6, #0
 8001306:	d100      	bne.n	800130a <__aeabi_fsub+0x29e>
 8001308:	e6f8      	b.n	80010fc <__aeabi_fsub+0x90>
 800130a:	2280      	movs	r2, #128	@ 0x80
 800130c:	03d2      	lsls	r2, r2, #15
 800130e:	4297      	cmp	r7, r2
 8001310:	d304      	bcc.n	800131c <__aeabi_fsub+0x2b0>
 8001312:	4594      	cmp	ip, r2
 8001314:	d202      	bcs.n	800131c <__aeabi_fsub+0x2b0>
 8001316:	2401      	movs	r4, #1
 8001318:	0033      	movs	r3, r6
 800131a:	400c      	ands	r4, r1
 800131c:	08db      	lsrs	r3, r3, #3
 800131e:	e6f1      	b.n	8001104 <__aeabi_fsub+0x98>
 8001320:	001a      	movs	r2, r3
 8001322:	2520      	movs	r5, #32
 8001324:	40ca      	lsrs	r2, r1
 8001326:	1a69      	subs	r1, r5, r1
 8001328:	408b      	lsls	r3, r1
 800132a:	1e59      	subs	r1, r3, #1
 800132c:	418b      	sbcs	r3, r1
 800132e:	4313      	orrs	r3, r2
 8001330:	0005      	movs	r5, r0
 8001332:	199b      	adds	r3, r3, r6
 8001334:	e750      	b.n	80011d8 <__aeabi_fsub+0x16c>
 8001336:	2e00      	cmp	r6, #0
 8001338:	d094      	beq.n	8001264 <__aeabi_fsub+0x1f8>
 800133a:	2401      	movs	r4, #1
 800133c:	0033      	movs	r3, r6
 800133e:	400c      	ands	r4, r1
 8001340:	e73a      	b.n	80011b8 <__aeabi_fsub+0x14c>
 8001342:	000c      	movs	r4, r1
 8001344:	2501      	movs	r5, #1
 8001346:	1af3      	subs	r3, r6, r3
 8001348:	e6f5      	b.n	8001136 <__aeabi_fsub+0xca>
 800134a:	0033      	movs	r3, r6
 800134c:	e734      	b.n	80011b8 <__aeabi_fsub+0x14c>
 800134e:	199b      	adds	r3, r3, r6
 8001350:	2200      	movs	r2, #0
 8001352:	0159      	lsls	r1, r3, #5
 8001354:	d5c1      	bpl.n	80012da <__aeabi_fsub+0x26e>
 8001356:	4a15      	ldr	r2, [pc, #84]	@ (80013ac <__aeabi_fsub+0x340>)
 8001358:	4013      	ands	r3, r2
 800135a:	08db      	lsrs	r3, r3, #3
 800135c:	2201      	movs	r2, #1
 800135e:	e72d      	b.n	80011bc <__aeabi_fsub+0x150>
 8001360:	2a00      	cmp	r2, #0
 8001362:	d100      	bne.n	8001366 <__aeabi_fsub+0x2fa>
 8001364:	e77e      	b.n	8001264 <__aeabi_fsub+0x1f8>
 8001366:	0013      	movs	r3, r2
 8001368:	2200      	movs	r2, #0
 800136a:	08db      	lsrs	r3, r3, #3
 800136c:	e726      	b.n	80011bc <__aeabi_fsub+0x150>
 800136e:	2380      	movs	r3, #128	@ 0x80
 8001370:	2400      	movs	r4, #0
 8001372:	20ff      	movs	r0, #255	@ 0xff
 8001374:	03db      	lsls	r3, r3, #15
 8001376:	e6f1      	b.n	800115c <__aeabi_fsub+0xf0>
 8001378:	2a00      	cmp	r2, #0
 800137a:	d100      	bne.n	800137e <__aeabi_fsub+0x312>
 800137c:	e756      	b.n	800122c <__aeabi_fsub+0x1c0>
 800137e:	1b47      	subs	r7, r0, r5
 8001380:	003a      	movs	r2, r7
 8001382:	2d00      	cmp	r5, #0
 8001384:	d100      	bne.n	8001388 <__aeabi_fsub+0x31c>
 8001386:	e730      	b.n	80011ea <__aeabi_fsub+0x17e>
 8001388:	2280      	movs	r2, #128	@ 0x80
 800138a:	04d2      	lsls	r2, r2, #19
 800138c:	000c      	movs	r4, r1
 800138e:	4313      	orrs	r3, r2
 8001390:	e77f      	b.n	8001292 <__aeabi_fsub+0x226>
 8001392:	2a00      	cmp	r2, #0
 8001394:	d100      	bne.n	8001398 <__aeabi_fsub+0x32c>
 8001396:	e701      	b.n	800119c <__aeabi_fsub+0x130>
 8001398:	1b41      	subs	r1, r0, r5
 800139a:	2d00      	cmp	r5, #0
 800139c:	d101      	bne.n	80013a2 <__aeabi_fsub+0x336>
 800139e:	000a      	movs	r2, r1
 80013a0:	e788      	b.n	80012b4 <__aeabi_fsub+0x248>
 80013a2:	2280      	movs	r2, #128	@ 0x80
 80013a4:	04d2      	lsls	r2, r2, #19
 80013a6:	4313      	orrs	r3, r2
 80013a8:	e78b      	b.n	80012c2 <__aeabi_fsub+0x256>
 80013aa:	46c0      	nop			@ (mov r8, r8)
 80013ac:	fbffffff 	.word	0xfbffffff
 80013b0:	7dffffff 	.word	0x7dffffff

080013b4 <__aeabi_f2iz>:
 80013b4:	0241      	lsls	r1, r0, #9
 80013b6:	0042      	lsls	r2, r0, #1
 80013b8:	0fc3      	lsrs	r3, r0, #31
 80013ba:	0a49      	lsrs	r1, r1, #9
 80013bc:	2000      	movs	r0, #0
 80013be:	0e12      	lsrs	r2, r2, #24
 80013c0:	2a7e      	cmp	r2, #126	@ 0x7e
 80013c2:	dd03      	ble.n	80013cc <__aeabi_f2iz+0x18>
 80013c4:	2a9d      	cmp	r2, #157	@ 0x9d
 80013c6:	dd02      	ble.n	80013ce <__aeabi_f2iz+0x1a>
 80013c8:	4a09      	ldr	r2, [pc, #36]	@ (80013f0 <__aeabi_f2iz+0x3c>)
 80013ca:	1898      	adds	r0, r3, r2
 80013cc:	4770      	bx	lr
 80013ce:	2080      	movs	r0, #128	@ 0x80
 80013d0:	0400      	lsls	r0, r0, #16
 80013d2:	4301      	orrs	r1, r0
 80013d4:	2a95      	cmp	r2, #149	@ 0x95
 80013d6:	dc07      	bgt.n	80013e8 <__aeabi_f2iz+0x34>
 80013d8:	2096      	movs	r0, #150	@ 0x96
 80013da:	1a82      	subs	r2, r0, r2
 80013dc:	40d1      	lsrs	r1, r2
 80013de:	4248      	negs	r0, r1
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d1f3      	bne.n	80013cc <__aeabi_f2iz+0x18>
 80013e4:	0008      	movs	r0, r1
 80013e6:	e7f1      	b.n	80013cc <__aeabi_f2iz+0x18>
 80013e8:	3a96      	subs	r2, #150	@ 0x96
 80013ea:	4091      	lsls	r1, r2
 80013ec:	e7f7      	b.n	80013de <__aeabi_f2iz+0x2a>
 80013ee:	46c0      	nop			@ (mov r8, r8)
 80013f0:	7fffffff 	.word	0x7fffffff

080013f4 <__aeabi_i2f>:
 80013f4:	b570      	push	{r4, r5, r6, lr}
 80013f6:	2800      	cmp	r0, #0
 80013f8:	d013      	beq.n	8001422 <__aeabi_i2f+0x2e>
 80013fa:	17c3      	asrs	r3, r0, #31
 80013fc:	18c5      	adds	r5, r0, r3
 80013fe:	405d      	eors	r5, r3
 8001400:	0fc4      	lsrs	r4, r0, #31
 8001402:	0028      	movs	r0, r5
 8001404:	f001 ff3c 	bl	8003280 <__clzsi2>
 8001408:	239e      	movs	r3, #158	@ 0x9e
 800140a:	0001      	movs	r1, r0
 800140c:	1a1b      	subs	r3, r3, r0
 800140e:	2b96      	cmp	r3, #150	@ 0x96
 8001410:	dc0f      	bgt.n	8001432 <__aeabi_i2f+0x3e>
 8001412:	2808      	cmp	r0, #8
 8001414:	d034      	beq.n	8001480 <__aeabi_i2f+0x8c>
 8001416:	3908      	subs	r1, #8
 8001418:	408d      	lsls	r5, r1
 800141a:	026d      	lsls	r5, r5, #9
 800141c:	0a6d      	lsrs	r5, r5, #9
 800141e:	b2d8      	uxtb	r0, r3
 8001420:	e002      	b.n	8001428 <__aeabi_i2f+0x34>
 8001422:	2400      	movs	r4, #0
 8001424:	2000      	movs	r0, #0
 8001426:	2500      	movs	r5, #0
 8001428:	05c0      	lsls	r0, r0, #23
 800142a:	4328      	orrs	r0, r5
 800142c:	07e4      	lsls	r4, r4, #31
 800142e:	4320      	orrs	r0, r4
 8001430:	bd70      	pop	{r4, r5, r6, pc}
 8001432:	2b99      	cmp	r3, #153	@ 0x99
 8001434:	dc16      	bgt.n	8001464 <__aeabi_i2f+0x70>
 8001436:	1f42      	subs	r2, r0, #5
 8001438:	2805      	cmp	r0, #5
 800143a:	d000      	beq.n	800143e <__aeabi_i2f+0x4a>
 800143c:	4095      	lsls	r5, r2
 800143e:	002a      	movs	r2, r5
 8001440:	4811      	ldr	r0, [pc, #68]	@ (8001488 <__aeabi_i2f+0x94>)
 8001442:	4002      	ands	r2, r0
 8001444:	076e      	lsls	r6, r5, #29
 8001446:	d009      	beq.n	800145c <__aeabi_i2f+0x68>
 8001448:	260f      	movs	r6, #15
 800144a:	4035      	ands	r5, r6
 800144c:	2d04      	cmp	r5, #4
 800144e:	d005      	beq.n	800145c <__aeabi_i2f+0x68>
 8001450:	3204      	adds	r2, #4
 8001452:	0155      	lsls	r5, r2, #5
 8001454:	d502      	bpl.n	800145c <__aeabi_i2f+0x68>
 8001456:	239f      	movs	r3, #159	@ 0x9f
 8001458:	4002      	ands	r2, r0
 800145a:	1a5b      	subs	r3, r3, r1
 800145c:	0192      	lsls	r2, r2, #6
 800145e:	0a55      	lsrs	r5, r2, #9
 8001460:	b2d8      	uxtb	r0, r3
 8001462:	e7e1      	b.n	8001428 <__aeabi_i2f+0x34>
 8001464:	2205      	movs	r2, #5
 8001466:	1a12      	subs	r2, r2, r0
 8001468:	0028      	movs	r0, r5
 800146a:	40d0      	lsrs	r0, r2
 800146c:	0002      	movs	r2, r0
 800146e:	0008      	movs	r0, r1
 8001470:	301b      	adds	r0, #27
 8001472:	4085      	lsls	r5, r0
 8001474:	0028      	movs	r0, r5
 8001476:	1e45      	subs	r5, r0, #1
 8001478:	41a8      	sbcs	r0, r5
 800147a:	4302      	orrs	r2, r0
 800147c:	0015      	movs	r5, r2
 800147e:	e7de      	b.n	800143e <__aeabi_i2f+0x4a>
 8001480:	026d      	lsls	r5, r5, #9
 8001482:	2096      	movs	r0, #150	@ 0x96
 8001484:	0a6d      	lsrs	r5, r5, #9
 8001486:	e7cf      	b.n	8001428 <__aeabi_i2f+0x34>
 8001488:	fbffffff 	.word	0xfbffffff

0800148c <__aeabi_dadd>:
 800148c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800148e:	4657      	mov	r7, sl
 8001490:	464e      	mov	r6, r9
 8001492:	4645      	mov	r5, r8
 8001494:	46de      	mov	lr, fp
 8001496:	b5e0      	push	{r5, r6, r7, lr}
 8001498:	b083      	sub	sp, #12
 800149a:	9000      	str	r0, [sp, #0]
 800149c:	9101      	str	r1, [sp, #4]
 800149e:	030c      	lsls	r4, r1, #12
 80014a0:	004f      	lsls	r7, r1, #1
 80014a2:	0fce      	lsrs	r6, r1, #31
 80014a4:	0a61      	lsrs	r1, r4, #9
 80014a6:	9c00      	ldr	r4, [sp, #0]
 80014a8:	031d      	lsls	r5, r3, #12
 80014aa:	0f64      	lsrs	r4, r4, #29
 80014ac:	430c      	orrs	r4, r1
 80014ae:	9900      	ldr	r1, [sp, #0]
 80014b0:	9200      	str	r2, [sp, #0]
 80014b2:	9301      	str	r3, [sp, #4]
 80014b4:	00c8      	lsls	r0, r1, #3
 80014b6:	0059      	lsls	r1, r3, #1
 80014b8:	0d4b      	lsrs	r3, r1, #21
 80014ba:	4699      	mov	r9, r3
 80014bc:	9a00      	ldr	r2, [sp, #0]
 80014be:	9b01      	ldr	r3, [sp, #4]
 80014c0:	0a6d      	lsrs	r5, r5, #9
 80014c2:	0fd9      	lsrs	r1, r3, #31
 80014c4:	0f53      	lsrs	r3, r2, #29
 80014c6:	432b      	orrs	r3, r5
 80014c8:	469a      	mov	sl, r3
 80014ca:	9b00      	ldr	r3, [sp, #0]
 80014cc:	0d7f      	lsrs	r7, r7, #21
 80014ce:	00da      	lsls	r2, r3, #3
 80014d0:	4694      	mov	ip, r2
 80014d2:	464a      	mov	r2, r9
 80014d4:	46b0      	mov	r8, r6
 80014d6:	1aba      	subs	r2, r7, r2
 80014d8:	428e      	cmp	r6, r1
 80014da:	d100      	bne.n	80014de <__aeabi_dadd+0x52>
 80014dc:	e0b0      	b.n	8001640 <__aeabi_dadd+0x1b4>
 80014de:	2a00      	cmp	r2, #0
 80014e0:	dc00      	bgt.n	80014e4 <__aeabi_dadd+0x58>
 80014e2:	e078      	b.n	80015d6 <__aeabi_dadd+0x14a>
 80014e4:	4649      	mov	r1, r9
 80014e6:	2900      	cmp	r1, #0
 80014e8:	d100      	bne.n	80014ec <__aeabi_dadd+0x60>
 80014ea:	e0e9      	b.n	80016c0 <__aeabi_dadd+0x234>
 80014ec:	49c9      	ldr	r1, [pc, #804]	@ (8001814 <__aeabi_dadd+0x388>)
 80014ee:	428f      	cmp	r7, r1
 80014f0:	d100      	bne.n	80014f4 <__aeabi_dadd+0x68>
 80014f2:	e195      	b.n	8001820 <__aeabi_dadd+0x394>
 80014f4:	2501      	movs	r5, #1
 80014f6:	2a38      	cmp	r2, #56	@ 0x38
 80014f8:	dc16      	bgt.n	8001528 <__aeabi_dadd+0x9c>
 80014fa:	2180      	movs	r1, #128	@ 0x80
 80014fc:	4653      	mov	r3, sl
 80014fe:	0409      	lsls	r1, r1, #16
 8001500:	430b      	orrs	r3, r1
 8001502:	469a      	mov	sl, r3
 8001504:	2a1f      	cmp	r2, #31
 8001506:	dd00      	ble.n	800150a <__aeabi_dadd+0x7e>
 8001508:	e1e7      	b.n	80018da <__aeabi_dadd+0x44e>
 800150a:	2120      	movs	r1, #32
 800150c:	4655      	mov	r5, sl
 800150e:	1a8b      	subs	r3, r1, r2
 8001510:	4661      	mov	r1, ip
 8001512:	409d      	lsls	r5, r3
 8001514:	40d1      	lsrs	r1, r2
 8001516:	430d      	orrs	r5, r1
 8001518:	4661      	mov	r1, ip
 800151a:	4099      	lsls	r1, r3
 800151c:	1e4b      	subs	r3, r1, #1
 800151e:	4199      	sbcs	r1, r3
 8001520:	4653      	mov	r3, sl
 8001522:	40d3      	lsrs	r3, r2
 8001524:	430d      	orrs	r5, r1
 8001526:	1ae4      	subs	r4, r4, r3
 8001528:	1b45      	subs	r5, r0, r5
 800152a:	42a8      	cmp	r0, r5
 800152c:	4180      	sbcs	r0, r0
 800152e:	4240      	negs	r0, r0
 8001530:	1a24      	subs	r4, r4, r0
 8001532:	0223      	lsls	r3, r4, #8
 8001534:	d400      	bmi.n	8001538 <__aeabi_dadd+0xac>
 8001536:	e10f      	b.n	8001758 <__aeabi_dadd+0x2cc>
 8001538:	0264      	lsls	r4, r4, #9
 800153a:	0a64      	lsrs	r4, r4, #9
 800153c:	2c00      	cmp	r4, #0
 800153e:	d100      	bne.n	8001542 <__aeabi_dadd+0xb6>
 8001540:	e139      	b.n	80017b6 <__aeabi_dadd+0x32a>
 8001542:	0020      	movs	r0, r4
 8001544:	f001 fe9c 	bl	8003280 <__clzsi2>
 8001548:	0003      	movs	r3, r0
 800154a:	3b08      	subs	r3, #8
 800154c:	2120      	movs	r1, #32
 800154e:	0028      	movs	r0, r5
 8001550:	1aca      	subs	r2, r1, r3
 8001552:	40d0      	lsrs	r0, r2
 8001554:	409c      	lsls	r4, r3
 8001556:	0002      	movs	r2, r0
 8001558:	409d      	lsls	r5, r3
 800155a:	4322      	orrs	r2, r4
 800155c:	429f      	cmp	r7, r3
 800155e:	dd00      	ble.n	8001562 <__aeabi_dadd+0xd6>
 8001560:	e173      	b.n	800184a <__aeabi_dadd+0x3be>
 8001562:	1bd8      	subs	r0, r3, r7
 8001564:	3001      	adds	r0, #1
 8001566:	1a09      	subs	r1, r1, r0
 8001568:	002c      	movs	r4, r5
 800156a:	408d      	lsls	r5, r1
 800156c:	40c4      	lsrs	r4, r0
 800156e:	1e6b      	subs	r3, r5, #1
 8001570:	419d      	sbcs	r5, r3
 8001572:	0013      	movs	r3, r2
 8001574:	40c2      	lsrs	r2, r0
 8001576:	408b      	lsls	r3, r1
 8001578:	4325      	orrs	r5, r4
 800157a:	2700      	movs	r7, #0
 800157c:	0014      	movs	r4, r2
 800157e:	431d      	orrs	r5, r3
 8001580:	076b      	lsls	r3, r5, #29
 8001582:	d009      	beq.n	8001598 <__aeabi_dadd+0x10c>
 8001584:	230f      	movs	r3, #15
 8001586:	402b      	ands	r3, r5
 8001588:	2b04      	cmp	r3, #4
 800158a:	d005      	beq.n	8001598 <__aeabi_dadd+0x10c>
 800158c:	1d2b      	adds	r3, r5, #4
 800158e:	42ab      	cmp	r3, r5
 8001590:	41ad      	sbcs	r5, r5
 8001592:	426d      	negs	r5, r5
 8001594:	1964      	adds	r4, r4, r5
 8001596:	001d      	movs	r5, r3
 8001598:	0223      	lsls	r3, r4, #8
 800159a:	d400      	bmi.n	800159e <__aeabi_dadd+0x112>
 800159c:	e12d      	b.n	80017fa <__aeabi_dadd+0x36e>
 800159e:	4a9d      	ldr	r2, [pc, #628]	@ (8001814 <__aeabi_dadd+0x388>)
 80015a0:	3701      	adds	r7, #1
 80015a2:	4297      	cmp	r7, r2
 80015a4:	d100      	bne.n	80015a8 <__aeabi_dadd+0x11c>
 80015a6:	e0d3      	b.n	8001750 <__aeabi_dadd+0x2c4>
 80015a8:	4646      	mov	r6, r8
 80015aa:	499b      	ldr	r1, [pc, #620]	@ (8001818 <__aeabi_dadd+0x38c>)
 80015ac:	08ed      	lsrs	r5, r5, #3
 80015ae:	4021      	ands	r1, r4
 80015b0:	074a      	lsls	r2, r1, #29
 80015b2:	432a      	orrs	r2, r5
 80015b4:	057c      	lsls	r4, r7, #21
 80015b6:	024d      	lsls	r5, r1, #9
 80015b8:	0b2d      	lsrs	r5, r5, #12
 80015ba:	0d64      	lsrs	r4, r4, #21
 80015bc:	0524      	lsls	r4, r4, #20
 80015be:	432c      	orrs	r4, r5
 80015c0:	07f6      	lsls	r6, r6, #31
 80015c2:	4334      	orrs	r4, r6
 80015c4:	0010      	movs	r0, r2
 80015c6:	0021      	movs	r1, r4
 80015c8:	b003      	add	sp, #12
 80015ca:	bcf0      	pop	{r4, r5, r6, r7}
 80015cc:	46bb      	mov	fp, r7
 80015ce:	46b2      	mov	sl, r6
 80015d0:	46a9      	mov	r9, r5
 80015d2:	46a0      	mov	r8, r4
 80015d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015d6:	2a00      	cmp	r2, #0
 80015d8:	d100      	bne.n	80015dc <__aeabi_dadd+0x150>
 80015da:	e084      	b.n	80016e6 <__aeabi_dadd+0x25a>
 80015dc:	464a      	mov	r2, r9
 80015de:	1bd2      	subs	r2, r2, r7
 80015e0:	2f00      	cmp	r7, #0
 80015e2:	d000      	beq.n	80015e6 <__aeabi_dadd+0x15a>
 80015e4:	e16d      	b.n	80018c2 <__aeabi_dadd+0x436>
 80015e6:	0025      	movs	r5, r4
 80015e8:	4305      	orrs	r5, r0
 80015ea:	d100      	bne.n	80015ee <__aeabi_dadd+0x162>
 80015ec:	e127      	b.n	800183e <__aeabi_dadd+0x3b2>
 80015ee:	1e56      	subs	r6, r2, #1
 80015f0:	2a01      	cmp	r2, #1
 80015f2:	d100      	bne.n	80015f6 <__aeabi_dadd+0x16a>
 80015f4:	e23b      	b.n	8001a6e <__aeabi_dadd+0x5e2>
 80015f6:	4d87      	ldr	r5, [pc, #540]	@ (8001814 <__aeabi_dadd+0x388>)
 80015f8:	42aa      	cmp	r2, r5
 80015fa:	d100      	bne.n	80015fe <__aeabi_dadd+0x172>
 80015fc:	e26a      	b.n	8001ad4 <__aeabi_dadd+0x648>
 80015fe:	2501      	movs	r5, #1
 8001600:	2e38      	cmp	r6, #56	@ 0x38
 8001602:	dc12      	bgt.n	800162a <__aeabi_dadd+0x19e>
 8001604:	0032      	movs	r2, r6
 8001606:	2a1f      	cmp	r2, #31
 8001608:	dd00      	ble.n	800160c <__aeabi_dadd+0x180>
 800160a:	e1f8      	b.n	80019fe <__aeabi_dadd+0x572>
 800160c:	2620      	movs	r6, #32
 800160e:	0025      	movs	r5, r4
 8001610:	1ab6      	subs	r6, r6, r2
 8001612:	0007      	movs	r7, r0
 8001614:	4653      	mov	r3, sl
 8001616:	40b0      	lsls	r0, r6
 8001618:	40d4      	lsrs	r4, r2
 800161a:	40b5      	lsls	r5, r6
 800161c:	40d7      	lsrs	r7, r2
 800161e:	1e46      	subs	r6, r0, #1
 8001620:	41b0      	sbcs	r0, r6
 8001622:	1b1b      	subs	r3, r3, r4
 8001624:	469a      	mov	sl, r3
 8001626:	433d      	orrs	r5, r7
 8001628:	4305      	orrs	r5, r0
 800162a:	4662      	mov	r2, ip
 800162c:	1b55      	subs	r5, r2, r5
 800162e:	45ac      	cmp	ip, r5
 8001630:	4192      	sbcs	r2, r2
 8001632:	4653      	mov	r3, sl
 8001634:	4252      	negs	r2, r2
 8001636:	000e      	movs	r6, r1
 8001638:	464f      	mov	r7, r9
 800163a:	4688      	mov	r8, r1
 800163c:	1a9c      	subs	r4, r3, r2
 800163e:	e778      	b.n	8001532 <__aeabi_dadd+0xa6>
 8001640:	2a00      	cmp	r2, #0
 8001642:	dc00      	bgt.n	8001646 <__aeabi_dadd+0x1ba>
 8001644:	e08e      	b.n	8001764 <__aeabi_dadd+0x2d8>
 8001646:	4649      	mov	r1, r9
 8001648:	2900      	cmp	r1, #0
 800164a:	d175      	bne.n	8001738 <__aeabi_dadd+0x2ac>
 800164c:	4661      	mov	r1, ip
 800164e:	4653      	mov	r3, sl
 8001650:	4319      	orrs	r1, r3
 8001652:	d100      	bne.n	8001656 <__aeabi_dadd+0x1ca>
 8001654:	e0f6      	b.n	8001844 <__aeabi_dadd+0x3b8>
 8001656:	1e51      	subs	r1, r2, #1
 8001658:	2a01      	cmp	r2, #1
 800165a:	d100      	bne.n	800165e <__aeabi_dadd+0x1d2>
 800165c:	e191      	b.n	8001982 <__aeabi_dadd+0x4f6>
 800165e:	4d6d      	ldr	r5, [pc, #436]	@ (8001814 <__aeabi_dadd+0x388>)
 8001660:	42aa      	cmp	r2, r5
 8001662:	d100      	bne.n	8001666 <__aeabi_dadd+0x1da>
 8001664:	e0dc      	b.n	8001820 <__aeabi_dadd+0x394>
 8001666:	2501      	movs	r5, #1
 8001668:	2938      	cmp	r1, #56	@ 0x38
 800166a:	dc14      	bgt.n	8001696 <__aeabi_dadd+0x20a>
 800166c:	000a      	movs	r2, r1
 800166e:	2a1f      	cmp	r2, #31
 8001670:	dd00      	ble.n	8001674 <__aeabi_dadd+0x1e8>
 8001672:	e1a2      	b.n	80019ba <__aeabi_dadd+0x52e>
 8001674:	2120      	movs	r1, #32
 8001676:	4653      	mov	r3, sl
 8001678:	1a89      	subs	r1, r1, r2
 800167a:	408b      	lsls	r3, r1
 800167c:	001d      	movs	r5, r3
 800167e:	4663      	mov	r3, ip
 8001680:	40d3      	lsrs	r3, r2
 8001682:	431d      	orrs	r5, r3
 8001684:	4663      	mov	r3, ip
 8001686:	408b      	lsls	r3, r1
 8001688:	0019      	movs	r1, r3
 800168a:	1e4b      	subs	r3, r1, #1
 800168c:	4199      	sbcs	r1, r3
 800168e:	4653      	mov	r3, sl
 8001690:	40d3      	lsrs	r3, r2
 8001692:	430d      	orrs	r5, r1
 8001694:	18e4      	adds	r4, r4, r3
 8001696:	182d      	adds	r5, r5, r0
 8001698:	4285      	cmp	r5, r0
 800169a:	4180      	sbcs	r0, r0
 800169c:	4240      	negs	r0, r0
 800169e:	1824      	adds	r4, r4, r0
 80016a0:	0223      	lsls	r3, r4, #8
 80016a2:	d559      	bpl.n	8001758 <__aeabi_dadd+0x2cc>
 80016a4:	4b5b      	ldr	r3, [pc, #364]	@ (8001814 <__aeabi_dadd+0x388>)
 80016a6:	3701      	adds	r7, #1
 80016a8:	429f      	cmp	r7, r3
 80016aa:	d051      	beq.n	8001750 <__aeabi_dadd+0x2c4>
 80016ac:	2101      	movs	r1, #1
 80016ae:	4b5a      	ldr	r3, [pc, #360]	@ (8001818 <__aeabi_dadd+0x38c>)
 80016b0:	086a      	lsrs	r2, r5, #1
 80016b2:	401c      	ands	r4, r3
 80016b4:	4029      	ands	r1, r5
 80016b6:	430a      	orrs	r2, r1
 80016b8:	07e5      	lsls	r5, r4, #31
 80016ba:	4315      	orrs	r5, r2
 80016bc:	0864      	lsrs	r4, r4, #1
 80016be:	e75f      	b.n	8001580 <__aeabi_dadd+0xf4>
 80016c0:	4661      	mov	r1, ip
 80016c2:	4653      	mov	r3, sl
 80016c4:	4319      	orrs	r1, r3
 80016c6:	d100      	bne.n	80016ca <__aeabi_dadd+0x23e>
 80016c8:	e0bc      	b.n	8001844 <__aeabi_dadd+0x3b8>
 80016ca:	1e51      	subs	r1, r2, #1
 80016cc:	2a01      	cmp	r2, #1
 80016ce:	d100      	bne.n	80016d2 <__aeabi_dadd+0x246>
 80016d0:	e164      	b.n	800199c <__aeabi_dadd+0x510>
 80016d2:	4d50      	ldr	r5, [pc, #320]	@ (8001814 <__aeabi_dadd+0x388>)
 80016d4:	42aa      	cmp	r2, r5
 80016d6:	d100      	bne.n	80016da <__aeabi_dadd+0x24e>
 80016d8:	e16a      	b.n	80019b0 <__aeabi_dadd+0x524>
 80016da:	2501      	movs	r5, #1
 80016dc:	2938      	cmp	r1, #56	@ 0x38
 80016de:	dd00      	ble.n	80016e2 <__aeabi_dadd+0x256>
 80016e0:	e722      	b.n	8001528 <__aeabi_dadd+0x9c>
 80016e2:	000a      	movs	r2, r1
 80016e4:	e70e      	b.n	8001504 <__aeabi_dadd+0x78>
 80016e6:	4a4d      	ldr	r2, [pc, #308]	@ (800181c <__aeabi_dadd+0x390>)
 80016e8:	1c7d      	adds	r5, r7, #1
 80016ea:	4215      	tst	r5, r2
 80016ec:	d000      	beq.n	80016f0 <__aeabi_dadd+0x264>
 80016ee:	e0d0      	b.n	8001892 <__aeabi_dadd+0x406>
 80016f0:	0025      	movs	r5, r4
 80016f2:	4662      	mov	r2, ip
 80016f4:	4653      	mov	r3, sl
 80016f6:	4305      	orrs	r5, r0
 80016f8:	431a      	orrs	r2, r3
 80016fa:	2f00      	cmp	r7, #0
 80016fc:	d000      	beq.n	8001700 <__aeabi_dadd+0x274>
 80016fe:	e137      	b.n	8001970 <__aeabi_dadd+0x4e4>
 8001700:	2d00      	cmp	r5, #0
 8001702:	d100      	bne.n	8001706 <__aeabi_dadd+0x27a>
 8001704:	e1a8      	b.n	8001a58 <__aeabi_dadd+0x5cc>
 8001706:	2a00      	cmp	r2, #0
 8001708:	d100      	bne.n	800170c <__aeabi_dadd+0x280>
 800170a:	e16a      	b.n	80019e2 <__aeabi_dadd+0x556>
 800170c:	4663      	mov	r3, ip
 800170e:	1ac5      	subs	r5, r0, r3
 8001710:	4653      	mov	r3, sl
 8001712:	1ae2      	subs	r2, r4, r3
 8001714:	42a8      	cmp	r0, r5
 8001716:	419b      	sbcs	r3, r3
 8001718:	425b      	negs	r3, r3
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	021a      	lsls	r2, r3, #8
 800171e:	d400      	bmi.n	8001722 <__aeabi_dadd+0x296>
 8001720:	e203      	b.n	8001b2a <__aeabi_dadd+0x69e>
 8001722:	4663      	mov	r3, ip
 8001724:	1a1d      	subs	r5, r3, r0
 8001726:	45ac      	cmp	ip, r5
 8001728:	4192      	sbcs	r2, r2
 800172a:	4653      	mov	r3, sl
 800172c:	4252      	negs	r2, r2
 800172e:	1b1c      	subs	r4, r3, r4
 8001730:	000e      	movs	r6, r1
 8001732:	4688      	mov	r8, r1
 8001734:	1aa4      	subs	r4, r4, r2
 8001736:	e723      	b.n	8001580 <__aeabi_dadd+0xf4>
 8001738:	4936      	ldr	r1, [pc, #216]	@ (8001814 <__aeabi_dadd+0x388>)
 800173a:	428f      	cmp	r7, r1
 800173c:	d070      	beq.n	8001820 <__aeabi_dadd+0x394>
 800173e:	2501      	movs	r5, #1
 8001740:	2a38      	cmp	r2, #56	@ 0x38
 8001742:	dca8      	bgt.n	8001696 <__aeabi_dadd+0x20a>
 8001744:	2180      	movs	r1, #128	@ 0x80
 8001746:	4653      	mov	r3, sl
 8001748:	0409      	lsls	r1, r1, #16
 800174a:	430b      	orrs	r3, r1
 800174c:	469a      	mov	sl, r3
 800174e:	e78e      	b.n	800166e <__aeabi_dadd+0x1e2>
 8001750:	003c      	movs	r4, r7
 8001752:	2500      	movs	r5, #0
 8001754:	2200      	movs	r2, #0
 8001756:	e731      	b.n	80015bc <__aeabi_dadd+0x130>
 8001758:	2307      	movs	r3, #7
 800175a:	402b      	ands	r3, r5
 800175c:	2b00      	cmp	r3, #0
 800175e:	d000      	beq.n	8001762 <__aeabi_dadd+0x2d6>
 8001760:	e710      	b.n	8001584 <__aeabi_dadd+0xf8>
 8001762:	e093      	b.n	800188c <__aeabi_dadd+0x400>
 8001764:	2a00      	cmp	r2, #0
 8001766:	d074      	beq.n	8001852 <__aeabi_dadd+0x3c6>
 8001768:	464a      	mov	r2, r9
 800176a:	1bd2      	subs	r2, r2, r7
 800176c:	2f00      	cmp	r7, #0
 800176e:	d100      	bne.n	8001772 <__aeabi_dadd+0x2e6>
 8001770:	e0c7      	b.n	8001902 <__aeabi_dadd+0x476>
 8001772:	4928      	ldr	r1, [pc, #160]	@ (8001814 <__aeabi_dadd+0x388>)
 8001774:	4589      	cmp	r9, r1
 8001776:	d100      	bne.n	800177a <__aeabi_dadd+0x2ee>
 8001778:	e185      	b.n	8001a86 <__aeabi_dadd+0x5fa>
 800177a:	2501      	movs	r5, #1
 800177c:	2a38      	cmp	r2, #56	@ 0x38
 800177e:	dc12      	bgt.n	80017a6 <__aeabi_dadd+0x31a>
 8001780:	2180      	movs	r1, #128	@ 0x80
 8001782:	0409      	lsls	r1, r1, #16
 8001784:	430c      	orrs	r4, r1
 8001786:	2a1f      	cmp	r2, #31
 8001788:	dd00      	ble.n	800178c <__aeabi_dadd+0x300>
 800178a:	e1ab      	b.n	8001ae4 <__aeabi_dadd+0x658>
 800178c:	2120      	movs	r1, #32
 800178e:	0025      	movs	r5, r4
 8001790:	1a89      	subs	r1, r1, r2
 8001792:	0007      	movs	r7, r0
 8001794:	4088      	lsls	r0, r1
 8001796:	408d      	lsls	r5, r1
 8001798:	40d7      	lsrs	r7, r2
 800179a:	1e41      	subs	r1, r0, #1
 800179c:	4188      	sbcs	r0, r1
 800179e:	40d4      	lsrs	r4, r2
 80017a0:	433d      	orrs	r5, r7
 80017a2:	4305      	orrs	r5, r0
 80017a4:	44a2      	add	sl, r4
 80017a6:	4465      	add	r5, ip
 80017a8:	4565      	cmp	r5, ip
 80017aa:	4192      	sbcs	r2, r2
 80017ac:	4252      	negs	r2, r2
 80017ae:	4452      	add	r2, sl
 80017b0:	0014      	movs	r4, r2
 80017b2:	464f      	mov	r7, r9
 80017b4:	e774      	b.n	80016a0 <__aeabi_dadd+0x214>
 80017b6:	0028      	movs	r0, r5
 80017b8:	f001 fd62 	bl	8003280 <__clzsi2>
 80017bc:	0003      	movs	r3, r0
 80017be:	3318      	adds	r3, #24
 80017c0:	2b1f      	cmp	r3, #31
 80017c2:	dc00      	bgt.n	80017c6 <__aeabi_dadd+0x33a>
 80017c4:	e6c2      	b.n	800154c <__aeabi_dadd+0xc0>
 80017c6:	002a      	movs	r2, r5
 80017c8:	3808      	subs	r0, #8
 80017ca:	4082      	lsls	r2, r0
 80017cc:	429f      	cmp	r7, r3
 80017ce:	dd00      	ble.n	80017d2 <__aeabi_dadd+0x346>
 80017d0:	e0a9      	b.n	8001926 <__aeabi_dadd+0x49a>
 80017d2:	1bdb      	subs	r3, r3, r7
 80017d4:	1c58      	adds	r0, r3, #1
 80017d6:	281f      	cmp	r0, #31
 80017d8:	dc00      	bgt.n	80017dc <__aeabi_dadd+0x350>
 80017da:	e1ac      	b.n	8001b36 <__aeabi_dadd+0x6aa>
 80017dc:	0015      	movs	r5, r2
 80017de:	3b1f      	subs	r3, #31
 80017e0:	40dd      	lsrs	r5, r3
 80017e2:	2820      	cmp	r0, #32
 80017e4:	d005      	beq.n	80017f2 <__aeabi_dadd+0x366>
 80017e6:	2340      	movs	r3, #64	@ 0x40
 80017e8:	1a1b      	subs	r3, r3, r0
 80017ea:	409a      	lsls	r2, r3
 80017ec:	1e53      	subs	r3, r2, #1
 80017ee:	419a      	sbcs	r2, r3
 80017f0:	4315      	orrs	r5, r2
 80017f2:	2307      	movs	r3, #7
 80017f4:	2700      	movs	r7, #0
 80017f6:	402b      	ands	r3, r5
 80017f8:	e7b0      	b.n	800175c <__aeabi_dadd+0x2d0>
 80017fa:	08ed      	lsrs	r5, r5, #3
 80017fc:	4b05      	ldr	r3, [pc, #20]	@ (8001814 <__aeabi_dadd+0x388>)
 80017fe:	0762      	lsls	r2, r4, #29
 8001800:	432a      	orrs	r2, r5
 8001802:	08e4      	lsrs	r4, r4, #3
 8001804:	429f      	cmp	r7, r3
 8001806:	d00f      	beq.n	8001828 <__aeabi_dadd+0x39c>
 8001808:	0324      	lsls	r4, r4, #12
 800180a:	0b25      	lsrs	r5, r4, #12
 800180c:	057c      	lsls	r4, r7, #21
 800180e:	0d64      	lsrs	r4, r4, #21
 8001810:	e6d4      	b.n	80015bc <__aeabi_dadd+0x130>
 8001812:	46c0      	nop			@ (mov r8, r8)
 8001814:	000007ff 	.word	0x000007ff
 8001818:	ff7fffff 	.word	0xff7fffff
 800181c:	000007fe 	.word	0x000007fe
 8001820:	08c0      	lsrs	r0, r0, #3
 8001822:	0762      	lsls	r2, r4, #29
 8001824:	4302      	orrs	r2, r0
 8001826:	08e4      	lsrs	r4, r4, #3
 8001828:	0013      	movs	r3, r2
 800182a:	4323      	orrs	r3, r4
 800182c:	d100      	bne.n	8001830 <__aeabi_dadd+0x3a4>
 800182e:	e186      	b.n	8001b3e <__aeabi_dadd+0x6b2>
 8001830:	2580      	movs	r5, #128	@ 0x80
 8001832:	032d      	lsls	r5, r5, #12
 8001834:	4325      	orrs	r5, r4
 8001836:	032d      	lsls	r5, r5, #12
 8001838:	4cc3      	ldr	r4, [pc, #780]	@ (8001b48 <__aeabi_dadd+0x6bc>)
 800183a:	0b2d      	lsrs	r5, r5, #12
 800183c:	e6be      	b.n	80015bc <__aeabi_dadd+0x130>
 800183e:	4660      	mov	r0, ip
 8001840:	4654      	mov	r4, sl
 8001842:	000e      	movs	r6, r1
 8001844:	0017      	movs	r7, r2
 8001846:	08c5      	lsrs	r5, r0, #3
 8001848:	e7d8      	b.n	80017fc <__aeabi_dadd+0x370>
 800184a:	4cc0      	ldr	r4, [pc, #768]	@ (8001b4c <__aeabi_dadd+0x6c0>)
 800184c:	1aff      	subs	r7, r7, r3
 800184e:	4014      	ands	r4, r2
 8001850:	e696      	b.n	8001580 <__aeabi_dadd+0xf4>
 8001852:	4abf      	ldr	r2, [pc, #764]	@ (8001b50 <__aeabi_dadd+0x6c4>)
 8001854:	1c79      	adds	r1, r7, #1
 8001856:	4211      	tst	r1, r2
 8001858:	d16b      	bne.n	8001932 <__aeabi_dadd+0x4a6>
 800185a:	0022      	movs	r2, r4
 800185c:	4302      	orrs	r2, r0
 800185e:	2f00      	cmp	r7, #0
 8001860:	d000      	beq.n	8001864 <__aeabi_dadd+0x3d8>
 8001862:	e0db      	b.n	8001a1c <__aeabi_dadd+0x590>
 8001864:	2a00      	cmp	r2, #0
 8001866:	d100      	bne.n	800186a <__aeabi_dadd+0x3de>
 8001868:	e12d      	b.n	8001ac6 <__aeabi_dadd+0x63a>
 800186a:	4662      	mov	r2, ip
 800186c:	4653      	mov	r3, sl
 800186e:	431a      	orrs	r2, r3
 8001870:	d100      	bne.n	8001874 <__aeabi_dadd+0x3e8>
 8001872:	e0b6      	b.n	80019e2 <__aeabi_dadd+0x556>
 8001874:	4663      	mov	r3, ip
 8001876:	18c5      	adds	r5, r0, r3
 8001878:	4285      	cmp	r5, r0
 800187a:	4180      	sbcs	r0, r0
 800187c:	4454      	add	r4, sl
 800187e:	4240      	negs	r0, r0
 8001880:	1824      	adds	r4, r4, r0
 8001882:	0223      	lsls	r3, r4, #8
 8001884:	d502      	bpl.n	800188c <__aeabi_dadd+0x400>
 8001886:	000f      	movs	r7, r1
 8001888:	4bb0      	ldr	r3, [pc, #704]	@ (8001b4c <__aeabi_dadd+0x6c0>)
 800188a:	401c      	ands	r4, r3
 800188c:	003a      	movs	r2, r7
 800188e:	0028      	movs	r0, r5
 8001890:	e7d8      	b.n	8001844 <__aeabi_dadd+0x3b8>
 8001892:	4662      	mov	r2, ip
 8001894:	1a85      	subs	r5, r0, r2
 8001896:	42a8      	cmp	r0, r5
 8001898:	4192      	sbcs	r2, r2
 800189a:	4653      	mov	r3, sl
 800189c:	4252      	negs	r2, r2
 800189e:	4691      	mov	r9, r2
 80018a0:	1ae3      	subs	r3, r4, r3
 80018a2:	001a      	movs	r2, r3
 80018a4:	464b      	mov	r3, r9
 80018a6:	1ad2      	subs	r2, r2, r3
 80018a8:	0013      	movs	r3, r2
 80018aa:	4691      	mov	r9, r2
 80018ac:	021a      	lsls	r2, r3, #8
 80018ae:	d454      	bmi.n	800195a <__aeabi_dadd+0x4ce>
 80018b0:	464a      	mov	r2, r9
 80018b2:	464c      	mov	r4, r9
 80018b4:	432a      	orrs	r2, r5
 80018b6:	d000      	beq.n	80018ba <__aeabi_dadd+0x42e>
 80018b8:	e640      	b.n	800153c <__aeabi_dadd+0xb0>
 80018ba:	2600      	movs	r6, #0
 80018bc:	2400      	movs	r4, #0
 80018be:	2500      	movs	r5, #0
 80018c0:	e67c      	b.n	80015bc <__aeabi_dadd+0x130>
 80018c2:	4da1      	ldr	r5, [pc, #644]	@ (8001b48 <__aeabi_dadd+0x6bc>)
 80018c4:	45a9      	cmp	r9, r5
 80018c6:	d100      	bne.n	80018ca <__aeabi_dadd+0x43e>
 80018c8:	e090      	b.n	80019ec <__aeabi_dadd+0x560>
 80018ca:	2501      	movs	r5, #1
 80018cc:	2a38      	cmp	r2, #56	@ 0x38
 80018ce:	dd00      	ble.n	80018d2 <__aeabi_dadd+0x446>
 80018d0:	e6ab      	b.n	800162a <__aeabi_dadd+0x19e>
 80018d2:	2580      	movs	r5, #128	@ 0x80
 80018d4:	042d      	lsls	r5, r5, #16
 80018d6:	432c      	orrs	r4, r5
 80018d8:	e695      	b.n	8001606 <__aeabi_dadd+0x17a>
 80018da:	0011      	movs	r1, r2
 80018dc:	4655      	mov	r5, sl
 80018de:	3920      	subs	r1, #32
 80018e0:	40cd      	lsrs	r5, r1
 80018e2:	46a9      	mov	r9, r5
 80018e4:	2a20      	cmp	r2, #32
 80018e6:	d006      	beq.n	80018f6 <__aeabi_dadd+0x46a>
 80018e8:	2140      	movs	r1, #64	@ 0x40
 80018ea:	4653      	mov	r3, sl
 80018ec:	1a8a      	subs	r2, r1, r2
 80018ee:	4093      	lsls	r3, r2
 80018f0:	4662      	mov	r2, ip
 80018f2:	431a      	orrs	r2, r3
 80018f4:	4694      	mov	ip, r2
 80018f6:	4665      	mov	r5, ip
 80018f8:	1e6b      	subs	r3, r5, #1
 80018fa:	419d      	sbcs	r5, r3
 80018fc:	464b      	mov	r3, r9
 80018fe:	431d      	orrs	r5, r3
 8001900:	e612      	b.n	8001528 <__aeabi_dadd+0x9c>
 8001902:	0021      	movs	r1, r4
 8001904:	4301      	orrs	r1, r0
 8001906:	d100      	bne.n	800190a <__aeabi_dadd+0x47e>
 8001908:	e0c4      	b.n	8001a94 <__aeabi_dadd+0x608>
 800190a:	1e51      	subs	r1, r2, #1
 800190c:	2a01      	cmp	r2, #1
 800190e:	d100      	bne.n	8001912 <__aeabi_dadd+0x486>
 8001910:	e0fb      	b.n	8001b0a <__aeabi_dadd+0x67e>
 8001912:	4d8d      	ldr	r5, [pc, #564]	@ (8001b48 <__aeabi_dadd+0x6bc>)
 8001914:	42aa      	cmp	r2, r5
 8001916:	d100      	bne.n	800191a <__aeabi_dadd+0x48e>
 8001918:	e0b5      	b.n	8001a86 <__aeabi_dadd+0x5fa>
 800191a:	2501      	movs	r5, #1
 800191c:	2938      	cmp	r1, #56	@ 0x38
 800191e:	dd00      	ble.n	8001922 <__aeabi_dadd+0x496>
 8001920:	e741      	b.n	80017a6 <__aeabi_dadd+0x31a>
 8001922:	000a      	movs	r2, r1
 8001924:	e72f      	b.n	8001786 <__aeabi_dadd+0x2fa>
 8001926:	4c89      	ldr	r4, [pc, #548]	@ (8001b4c <__aeabi_dadd+0x6c0>)
 8001928:	1aff      	subs	r7, r7, r3
 800192a:	4014      	ands	r4, r2
 800192c:	0762      	lsls	r2, r4, #29
 800192e:	08e4      	lsrs	r4, r4, #3
 8001930:	e76a      	b.n	8001808 <__aeabi_dadd+0x37c>
 8001932:	4a85      	ldr	r2, [pc, #532]	@ (8001b48 <__aeabi_dadd+0x6bc>)
 8001934:	4291      	cmp	r1, r2
 8001936:	d100      	bne.n	800193a <__aeabi_dadd+0x4ae>
 8001938:	e0e3      	b.n	8001b02 <__aeabi_dadd+0x676>
 800193a:	4663      	mov	r3, ip
 800193c:	18c2      	adds	r2, r0, r3
 800193e:	4282      	cmp	r2, r0
 8001940:	4180      	sbcs	r0, r0
 8001942:	0023      	movs	r3, r4
 8001944:	4240      	negs	r0, r0
 8001946:	4453      	add	r3, sl
 8001948:	181b      	adds	r3, r3, r0
 800194a:	07dd      	lsls	r5, r3, #31
 800194c:	085c      	lsrs	r4, r3, #1
 800194e:	2307      	movs	r3, #7
 8001950:	0852      	lsrs	r2, r2, #1
 8001952:	4315      	orrs	r5, r2
 8001954:	000f      	movs	r7, r1
 8001956:	402b      	ands	r3, r5
 8001958:	e700      	b.n	800175c <__aeabi_dadd+0x2d0>
 800195a:	4663      	mov	r3, ip
 800195c:	1a1d      	subs	r5, r3, r0
 800195e:	45ac      	cmp	ip, r5
 8001960:	4192      	sbcs	r2, r2
 8001962:	4653      	mov	r3, sl
 8001964:	4252      	negs	r2, r2
 8001966:	1b1c      	subs	r4, r3, r4
 8001968:	000e      	movs	r6, r1
 800196a:	4688      	mov	r8, r1
 800196c:	1aa4      	subs	r4, r4, r2
 800196e:	e5e5      	b.n	800153c <__aeabi_dadd+0xb0>
 8001970:	2d00      	cmp	r5, #0
 8001972:	d000      	beq.n	8001976 <__aeabi_dadd+0x4ea>
 8001974:	e091      	b.n	8001a9a <__aeabi_dadd+0x60e>
 8001976:	2a00      	cmp	r2, #0
 8001978:	d138      	bne.n	80019ec <__aeabi_dadd+0x560>
 800197a:	2480      	movs	r4, #128	@ 0x80
 800197c:	2600      	movs	r6, #0
 800197e:	0324      	lsls	r4, r4, #12
 8001980:	e756      	b.n	8001830 <__aeabi_dadd+0x3a4>
 8001982:	4663      	mov	r3, ip
 8001984:	18c5      	adds	r5, r0, r3
 8001986:	4285      	cmp	r5, r0
 8001988:	4180      	sbcs	r0, r0
 800198a:	4454      	add	r4, sl
 800198c:	4240      	negs	r0, r0
 800198e:	1824      	adds	r4, r4, r0
 8001990:	2701      	movs	r7, #1
 8001992:	0223      	lsls	r3, r4, #8
 8001994:	d400      	bmi.n	8001998 <__aeabi_dadd+0x50c>
 8001996:	e6df      	b.n	8001758 <__aeabi_dadd+0x2cc>
 8001998:	2702      	movs	r7, #2
 800199a:	e687      	b.n	80016ac <__aeabi_dadd+0x220>
 800199c:	4663      	mov	r3, ip
 800199e:	1ac5      	subs	r5, r0, r3
 80019a0:	42a8      	cmp	r0, r5
 80019a2:	4180      	sbcs	r0, r0
 80019a4:	4653      	mov	r3, sl
 80019a6:	4240      	negs	r0, r0
 80019a8:	1ae4      	subs	r4, r4, r3
 80019aa:	2701      	movs	r7, #1
 80019ac:	1a24      	subs	r4, r4, r0
 80019ae:	e5c0      	b.n	8001532 <__aeabi_dadd+0xa6>
 80019b0:	0762      	lsls	r2, r4, #29
 80019b2:	08c0      	lsrs	r0, r0, #3
 80019b4:	4302      	orrs	r2, r0
 80019b6:	08e4      	lsrs	r4, r4, #3
 80019b8:	e736      	b.n	8001828 <__aeabi_dadd+0x39c>
 80019ba:	0011      	movs	r1, r2
 80019bc:	4653      	mov	r3, sl
 80019be:	3920      	subs	r1, #32
 80019c0:	40cb      	lsrs	r3, r1
 80019c2:	4699      	mov	r9, r3
 80019c4:	2a20      	cmp	r2, #32
 80019c6:	d006      	beq.n	80019d6 <__aeabi_dadd+0x54a>
 80019c8:	2140      	movs	r1, #64	@ 0x40
 80019ca:	4653      	mov	r3, sl
 80019cc:	1a8a      	subs	r2, r1, r2
 80019ce:	4093      	lsls	r3, r2
 80019d0:	4662      	mov	r2, ip
 80019d2:	431a      	orrs	r2, r3
 80019d4:	4694      	mov	ip, r2
 80019d6:	4665      	mov	r5, ip
 80019d8:	1e6b      	subs	r3, r5, #1
 80019da:	419d      	sbcs	r5, r3
 80019dc:	464b      	mov	r3, r9
 80019de:	431d      	orrs	r5, r3
 80019e0:	e659      	b.n	8001696 <__aeabi_dadd+0x20a>
 80019e2:	0762      	lsls	r2, r4, #29
 80019e4:	08c0      	lsrs	r0, r0, #3
 80019e6:	4302      	orrs	r2, r0
 80019e8:	08e4      	lsrs	r4, r4, #3
 80019ea:	e70d      	b.n	8001808 <__aeabi_dadd+0x37c>
 80019ec:	4653      	mov	r3, sl
 80019ee:	075a      	lsls	r2, r3, #29
 80019f0:	4663      	mov	r3, ip
 80019f2:	08d8      	lsrs	r0, r3, #3
 80019f4:	4653      	mov	r3, sl
 80019f6:	000e      	movs	r6, r1
 80019f8:	4302      	orrs	r2, r0
 80019fa:	08dc      	lsrs	r4, r3, #3
 80019fc:	e714      	b.n	8001828 <__aeabi_dadd+0x39c>
 80019fe:	0015      	movs	r5, r2
 8001a00:	0026      	movs	r6, r4
 8001a02:	3d20      	subs	r5, #32
 8001a04:	40ee      	lsrs	r6, r5
 8001a06:	2a20      	cmp	r2, #32
 8001a08:	d003      	beq.n	8001a12 <__aeabi_dadd+0x586>
 8001a0a:	2540      	movs	r5, #64	@ 0x40
 8001a0c:	1aaa      	subs	r2, r5, r2
 8001a0e:	4094      	lsls	r4, r2
 8001a10:	4320      	orrs	r0, r4
 8001a12:	1e42      	subs	r2, r0, #1
 8001a14:	4190      	sbcs	r0, r2
 8001a16:	0005      	movs	r5, r0
 8001a18:	4335      	orrs	r5, r6
 8001a1a:	e606      	b.n	800162a <__aeabi_dadd+0x19e>
 8001a1c:	2a00      	cmp	r2, #0
 8001a1e:	d07c      	beq.n	8001b1a <__aeabi_dadd+0x68e>
 8001a20:	4662      	mov	r2, ip
 8001a22:	4653      	mov	r3, sl
 8001a24:	08c0      	lsrs	r0, r0, #3
 8001a26:	431a      	orrs	r2, r3
 8001a28:	d100      	bne.n	8001a2c <__aeabi_dadd+0x5a0>
 8001a2a:	e6fa      	b.n	8001822 <__aeabi_dadd+0x396>
 8001a2c:	0762      	lsls	r2, r4, #29
 8001a2e:	4310      	orrs	r0, r2
 8001a30:	2280      	movs	r2, #128	@ 0x80
 8001a32:	08e4      	lsrs	r4, r4, #3
 8001a34:	0312      	lsls	r2, r2, #12
 8001a36:	4214      	tst	r4, r2
 8001a38:	d008      	beq.n	8001a4c <__aeabi_dadd+0x5c0>
 8001a3a:	08d9      	lsrs	r1, r3, #3
 8001a3c:	4211      	tst	r1, r2
 8001a3e:	d105      	bne.n	8001a4c <__aeabi_dadd+0x5c0>
 8001a40:	4663      	mov	r3, ip
 8001a42:	08d8      	lsrs	r0, r3, #3
 8001a44:	4653      	mov	r3, sl
 8001a46:	000c      	movs	r4, r1
 8001a48:	075b      	lsls	r3, r3, #29
 8001a4a:	4318      	orrs	r0, r3
 8001a4c:	0f42      	lsrs	r2, r0, #29
 8001a4e:	00c0      	lsls	r0, r0, #3
 8001a50:	08c0      	lsrs	r0, r0, #3
 8001a52:	0752      	lsls	r2, r2, #29
 8001a54:	4302      	orrs	r2, r0
 8001a56:	e6e7      	b.n	8001828 <__aeabi_dadd+0x39c>
 8001a58:	2a00      	cmp	r2, #0
 8001a5a:	d100      	bne.n	8001a5e <__aeabi_dadd+0x5d2>
 8001a5c:	e72d      	b.n	80018ba <__aeabi_dadd+0x42e>
 8001a5e:	4663      	mov	r3, ip
 8001a60:	08d8      	lsrs	r0, r3, #3
 8001a62:	4653      	mov	r3, sl
 8001a64:	075a      	lsls	r2, r3, #29
 8001a66:	000e      	movs	r6, r1
 8001a68:	4302      	orrs	r2, r0
 8001a6a:	08dc      	lsrs	r4, r3, #3
 8001a6c:	e6cc      	b.n	8001808 <__aeabi_dadd+0x37c>
 8001a6e:	4663      	mov	r3, ip
 8001a70:	1a1d      	subs	r5, r3, r0
 8001a72:	45ac      	cmp	ip, r5
 8001a74:	4192      	sbcs	r2, r2
 8001a76:	4653      	mov	r3, sl
 8001a78:	4252      	negs	r2, r2
 8001a7a:	1b1c      	subs	r4, r3, r4
 8001a7c:	000e      	movs	r6, r1
 8001a7e:	4688      	mov	r8, r1
 8001a80:	1aa4      	subs	r4, r4, r2
 8001a82:	3701      	adds	r7, #1
 8001a84:	e555      	b.n	8001532 <__aeabi_dadd+0xa6>
 8001a86:	4663      	mov	r3, ip
 8001a88:	08d9      	lsrs	r1, r3, #3
 8001a8a:	4653      	mov	r3, sl
 8001a8c:	075a      	lsls	r2, r3, #29
 8001a8e:	430a      	orrs	r2, r1
 8001a90:	08dc      	lsrs	r4, r3, #3
 8001a92:	e6c9      	b.n	8001828 <__aeabi_dadd+0x39c>
 8001a94:	4660      	mov	r0, ip
 8001a96:	4654      	mov	r4, sl
 8001a98:	e6d4      	b.n	8001844 <__aeabi_dadd+0x3b8>
 8001a9a:	08c0      	lsrs	r0, r0, #3
 8001a9c:	2a00      	cmp	r2, #0
 8001a9e:	d100      	bne.n	8001aa2 <__aeabi_dadd+0x616>
 8001aa0:	e6bf      	b.n	8001822 <__aeabi_dadd+0x396>
 8001aa2:	0762      	lsls	r2, r4, #29
 8001aa4:	4310      	orrs	r0, r2
 8001aa6:	2280      	movs	r2, #128	@ 0x80
 8001aa8:	08e4      	lsrs	r4, r4, #3
 8001aaa:	0312      	lsls	r2, r2, #12
 8001aac:	4214      	tst	r4, r2
 8001aae:	d0cd      	beq.n	8001a4c <__aeabi_dadd+0x5c0>
 8001ab0:	08dd      	lsrs	r5, r3, #3
 8001ab2:	4215      	tst	r5, r2
 8001ab4:	d1ca      	bne.n	8001a4c <__aeabi_dadd+0x5c0>
 8001ab6:	4663      	mov	r3, ip
 8001ab8:	08d8      	lsrs	r0, r3, #3
 8001aba:	4653      	mov	r3, sl
 8001abc:	075b      	lsls	r3, r3, #29
 8001abe:	000e      	movs	r6, r1
 8001ac0:	002c      	movs	r4, r5
 8001ac2:	4318      	orrs	r0, r3
 8001ac4:	e7c2      	b.n	8001a4c <__aeabi_dadd+0x5c0>
 8001ac6:	4663      	mov	r3, ip
 8001ac8:	08d9      	lsrs	r1, r3, #3
 8001aca:	4653      	mov	r3, sl
 8001acc:	075a      	lsls	r2, r3, #29
 8001ace:	430a      	orrs	r2, r1
 8001ad0:	08dc      	lsrs	r4, r3, #3
 8001ad2:	e699      	b.n	8001808 <__aeabi_dadd+0x37c>
 8001ad4:	4663      	mov	r3, ip
 8001ad6:	08d8      	lsrs	r0, r3, #3
 8001ad8:	4653      	mov	r3, sl
 8001ada:	075a      	lsls	r2, r3, #29
 8001adc:	000e      	movs	r6, r1
 8001ade:	4302      	orrs	r2, r0
 8001ae0:	08dc      	lsrs	r4, r3, #3
 8001ae2:	e6a1      	b.n	8001828 <__aeabi_dadd+0x39c>
 8001ae4:	0011      	movs	r1, r2
 8001ae6:	0027      	movs	r7, r4
 8001ae8:	3920      	subs	r1, #32
 8001aea:	40cf      	lsrs	r7, r1
 8001aec:	2a20      	cmp	r2, #32
 8001aee:	d003      	beq.n	8001af8 <__aeabi_dadd+0x66c>
 8001af0:	2140      	movs	r1, #64	@ 0x40
 8001af2:	1a8a      	subs	r2, r1, r2
 8001af4:	4094      	lsls	r4, r2
 8001af6:	4320      	orrs	r0, r4
 8001af8:	1e42      	subs	r2, r0, #1
 8001afa:	4190      	sbcs	r0, r2
 8001afc:	0005      	movs	r5, r0
 8001afe:	433d      	orrs	r5, r7
 8001b00:	e651      	b.n	80017a6 <__aeabi_dadd+0x31a>
 8001b02:	000c      	movs	r4, r1
 8001b04:	2500      	movs	r5, #0
 8001b06:	2200      	movs	r2, #0
 8001b08:	e558      	b.n	80015bc <__aeabi_dadd+0x130>
 8001b0a:	4460      	add	r0, ip
 8001b0c:	4560      	cmp	r0, ip
 8001b0e:	4192      	sbcs	r2, r2
 8001b10:	4454      	add	r4, sl
 8001b12:	4252      	negs	r2, r2
 8001b14:	0005      	movs	r5, r0
 8001b16:	18a4      	adds	r4, r4, r2
 8001b18:	e73a      	b.n	8001990 <__aeabi_dadd+0x504>
 8001b1a:	4653      	mov	r3, sl
 8001b1c:	075a      	lsls	r2, r3, #29
 8001b1e:	4663      	mov	r3, ip
 8001b20:	08d9      	lsrs	r1, r3, #3
 8001b22:	4653      	mov	r3, sl
 8001b24:	430a      	orrs	r2, r1
 8001b26:	08dc      	lsrs	r4, r3, #3
 8001b28:	e67e      	b.n	8001828 <__aeabi_dadd+0x39c>
 8001b2a:	001a      	movs	r2, r3
 8001b2c:	001c      	movs	r4, r3
 8001b2e:	432a      	orrs	r2, r5
 8001b30:	d000      	beq.n	8001b34 <__aeabi_dadd+0x6a8>
 8001b32:	e6ab      	b.n	800188c <__aeabi_dadd+0x400>
 8001b34:	e6c1      	b.n	80018ba <__aeabi_dadd+0x42e>
 8001b36:	2120      	movs	r1, #32
 8001b38:	2500      	movs	r5, #0
 8001b3a:	1a09      	subs	r1, r1, r0
 8001b3c:	e519      	b.n	8001572 <__aeabi_dadd+0xe6>
 8001b3e:	2200      	movs	r2, #0
 8001b40:	2500      	movs	r5, #0
 8001b42:	4c01      	ldr	r4, [pc, #4]	@ (8001b48 <__aeabi_dadd+0x6bc>)
 8001b44:	e53a      	b.n	80015bc <__aeabi_dadd+0x130>
 8001b46:	46c0      	nop			@ (mov r8, r8)
 8001b48:	000007ff 	.word	0x000007ff
 8001b4c:	ff7fffff 	.word	0xff7fffff
 8001b50:	000007fe 	.word	0x000007fe

08001b54 <__aeabi_ddiv>:
 8001b54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b56:	46de      	mov	lr, fp
 8001b58:	4645      	mov	r5, r8
 8001b5a:	4657      	mov	r7, sl
 8001b5c:	464e      	mov	r6, r9
 8001b5e:	b5e0      	push	{r5, r6, r7, lr}
 8001b60:	b087      	sub	sp, #28
 8001b62:	9200      	str	r2, [sp, #0]
 8001b64:	9301      	str	r3, [sp, #4]
 8001b66:	030b      	lsls	r3, r1, #12
 8001b68:	0b1b      	lsrs	r3, r3, #12
 8001b6a:	469b      	mov	fp, r3
 8001b6c:	0fca      	lsrs	r2, r1, #31
 8001b6e:	004b      	lsls	r3, r1, #1
 8001b70:	0004      	movs	r4, r0
 8001b72:	4680      	mov	r8, r0
 8001b74:	0d5b      	lsrs	r3, r3, #21
 8001b76:	9202      	str	r2, [sp, #8]
 8001b78:	d100      	bne.n	8001b7c <__aeabi_ddiv+0x28>
 8001b7a:	e16a      	b.n	8001e52 <__aeabi_ddiv+0x2fe>
 8001b7c:	4ad4      	ldr	r2, [pc, #848]	@ (8001ed0 <__aeabi_ddiv+0x37c>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d100      	bne.n	8001b84 <__aeabi_ddiv+0x30>
 8001b82:	e18c      	b.n	8001e9e <__aeabi_ddiv+0x34a>
 8001b84:	4659      	mov	r1, fp
 8001b86:	0f42      	lsrs	r2, r0, #29
 8001b88:	00c9      	lsls	r1, r1, #3
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	2180      	movs	r1, #128	@ 0x80
 8001b8e:	0409      	lsls	r1, r1, #16
 8001b90:	4311      	orrs	r1, r2
 8001b92:	00c2      	lsls	r2, r0, #3
 8001b94:	4690      	mov	r8, r2
 8001b96:	4acf      	ldr	r2, [pc, #828]	@ (8001ed4 <__aeabi_ddiv+0x380>)
 8001b98:	4689      	mov	r9, r1
 8001b9a:	4692      	mov	sl, r2
 8001b9c:	449a      	add	sl, r3
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	2400      	movs	r4, #0
 8001ba2:	9303      	str	r3, [sp, #12]
 8001ba4:	9e00      	ldr	r6, [sp, #0]
 8001ba6:	9f01      	ldr	r7, [sp, #4]
 8001ba8:	033b      	lsls	r3, r7, #12
 8001baa:	0b1b      	lsrs	r3, r3, #12
 8001bac:	469b      	mov	fp, r3
 8001bae:	007b      	lsls	r3, r7, #1
 8001bb0:	0030      	movs	r0, r6
 8001bb2:	0d5b      	lsrs	r3, r3, #21
 8001bb4:	0ffd      	lsrs	r5, r7, #31
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d100      	bne.n	8001bbc <__aeabi_ddiv+0x68>
 8001bba:	e128      	b.n	8001e0e <__aeabi_ddiv+0x2ba>
 8001bbc:	4ac4      	ldr	r2, [pc, #784]	@ (8001ed0 <__aeabi_ddiv+0x37c>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d100      	bne.n	8001bc4 <__aeabi_ddiv+0x70>
 8001bc2:	e177      	b.n	8001eb4 <__aeabi_ddiv+0x360>
 8001bc4:	4659      	mov	r1, fp
 8001bc6:	0f72      	lsrs	r2, r6, #29
 8001bc8:	00c9      	lsls	r1, r1, #3
 8001bca:	430a      	orrs	r2, r1
 8001bcc:	2180      	movs	r1, #128	@ 0x80
 8001bce:	0409      	lsls	r1, r1, #16
 8001bd0:	4311      	orrs	r1, r2
 8001bd2:	468b      	mov	fp, r1
 8001bd4:	49bf      	ldr	r1, [pc, #764]	@ (8001ed4 <__aeabi_ddiv+0x380>)
 8001bd6:	00f2      	lsls	r2, r6, #3
 8001bd8:	468c      	mov	ip, r1
 8001bda:	4651      	mov	r1, sl
 8001bdc:	4463      	add	r3, ip
 8001bde:	1acb      	subs	r3, r1, r3
 8001be0:	469a      	mov	sl, r3
 8001be2:	2300      	movs	r3, #0
 8001be4:	9e02      	ldr	r6, [sp, #8]
 8001be6:	406e      	eors	r6, r5
 8001be8:	2c0f      	cmp	r4, #15
 8001bea:	d827      	bhi.n	8001c3c <__aeabi_ddiv+0xe8>
 8001bec:	49ba      	ldr	r1, [pc, #744]	@ (8001ed8 <__aeabi_ddiv+0x384>)
 8001bee:	00a4      	lsls	r4, r4, #2
 8001bf0:	5909      	ldr	r1, [r1, r4]
 8001bf2:	468f      	mov	pc, r1
 8001bf4:	46cb      	mov	fp, r9
 8001bf6:	4642      	mov	r2, r8
 8001bf8:	9e02      	ldr	r6, [sp, #8]
 8001bfa:	9b03      	ldr	r3, [sp, #12]
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d016      	beq.n	8001c2e <__aeabi_ddiv+0xda>
 8001c00:	2b03      	cmp	r3, #3
 8001c02:	d100      	bne.n	8001c06 <__aeabi_ddiv+0xb2>
 8001c04:	e2a6      	b.n	8002154 <__aeabi_ddiv+0x600>
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d000      	beq.n	8001c0c <__aeabi_ddiv+0xb8>
 8001c0a:	e0df      	b.n	8001dcc <__aeabi_ddiv+0x278>
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	2300      	movs	r3, #0
 8001c10:	2400      	movs	r4, #0
 8001c12:	4690      	mov	r8, r2
 8001c14:	051b      	lsls	r3, r3, #20
 8001c16:	4323      	orrs	r3, r4
 8001c18:	07f6      	lsls	r6, r6, #31
 8001c1a:	4333      	orrs	r3, r6
 8001c1c:	4640      	mov	r0, r8
 8001c1e:	0019      	movs	r1, r3
 8001c20:	b007      	add	sp, #28
 8001c22:	bcf0      	pop	{r4, r5, r6, r7}
 8001c24:	46bb      	mov	fp, r7
 8001c26:	46b2      	mov	sl, r6
 8001c28:	46a9      	mov	r9, r5
 8001c2a:	46a0      	mov	r8, r4
 8001c2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c2e:	2200      	movs	r2, #0
 8001c30:	2400      	movs	r4, #0
 8001c32:	4690      	mov	r8, r2
 8001c34:	4ba6      	ldr	r3, [pc, #664]	@ (8001ed0 <__aeabi_ddiv+0x37c>)
 8001c36:	e7ed      	b.n	8001c14 <__aeabi_ddiv+0xc0>
 8001c38:	002e      	movs	r6, r5
 8001c3a:	e7df      	b.n	8001bfc <__aeabi_ddiv+0xa8>
 8001c3c:	45cb      	cmp	fp, r9
 8001c3e:	d200      	bcs.n	8001c42 <__aeabi_ddiv+0xee>
 8001c40:	e1d4      	b.n	8001fec <__aeabi_ddiv+0x498>
 8001c42:	d100      	bne.n	8001c46 <__aeabi_ddiv+0xf2>
 8001c44:	e1cf      	b.n	8001fe6 <__aeabi_ddiv+0x492>
 8001c46:	2301      	movs	r3, #1
 8001c48:	425b      	negs	r3, r3
 8001c4a:	469c      	mov	ip, r3
 8001c4c:	4644      	mov	r4, r8
 8001c4e:	4648      	mov	r0, r9
 8001c50:	2700      	movs	r7, #0
 8001c52:	44e2      	add	sl, ip
 8001c54:	465b      	mov	r3, fp
 8001c56:	0e15      	lsrs	r5, r2, #24
 8001c58:	021b      	lsls	r3, r3, #8
 8001c5a:	431d      	orrs	r5, r3
 8001c5c:	0c19      	lsrs	r1, r3, #16
 8001c5e:	042b      	lsls	r3, r5, #16
 8001c60:	0212      	lsls	r2, r2, #8
 8001c62:	9500      	str	r5, [sp, #0]
 8001c64:	0c1d      	lsrs	r5, r3, #16
 8001c66:	4691      	mov	r9, r2
 8001c68:	9102      	str	r1, [sp, #8]
 8001c6a:	9503      	str	r5, [sp, #12]
 8001c6c:	f7fe fae4 	bl	8000238 <__aeabi_uidivmod>
 8001c70:	0002      	movs	r2, r0
 8001c72:	436a      	muls	r2, r5
 8001c74:	040b      	lsls	r3, r1, #16
 8001c76:	0c21      	lsrs	r1, r4, #16
 8001c78:	4680      	mov	r8, r0
 8001c7a:	4319      	orrs	r1, r3
 8001c7c:	428a      	cmp	r2, r1
 8001c7e:	d909      	bls.n	8001c94 <__aeabi_ddiv+0x140>
 8001c80:	9d00      	ldr	r5, [sp, #0]
 8001c82:	2301      	movs	r3, #1
 8001c84:	46ac      	mov	ip, r5
 8001c86:	425b      	negs	r3, r3
 8001c88:	4461      	add	r1, ip
 8001c8a:	469c      	mov	ip, r3
 8001c8c:	44e0      	add	r8, ip
 8001c8e:	428d      	cmp	r5, r1
 8001c90:	d800      	bhi.n	8001c94 <__aeabi_ddiv+0x140>
 8001c92:	e1fb      	b.n	800208c <__aeabi_ddiv+0x538>
 8001c94:	1a88      	subs	r0, r1, r2
 8001c96:	9902      	ldr	r1, [sp, #8]
 8001c98:	f7fe face 	bl	8000238 <__aeabi_uidivmod>
 8001c9c:	9a03      	ldr	r2, [sp, #12]
 8001c9e:	0424      	lsls	r4, r4, #16
 8001ca0:	4342      	muls	r2, r0
 8001ca2:	0409      	lsls	r1, r1, #16
 8001ca4:	0c24      	lsrs	r4, r4, #16
 8001ca6:	0003      	movs	r3, r0
 8001ca8:	430c      	orrs	r4, r1
 8001caa:	42a2      	cmp	r2, r4
 8001cac:	d906      	bls.n	8001cbc <__aeabi_ddiv+0x168>
 8001cae:	9900      	ldr	r1, [sp, #0]
 8001cb0:	3b01      	subs	r3, #1
 8001cb2:	468c      	mov	ip, r1
 8001cb4:	4464      	add	r4, ip
 8001cb6:	42a1      	cmp	r1, r4
 8001cb8:	d800      	bhi.n	8001cbc <__aeabi_ddiv+0x168>
 8001cba:	e1e1      	b.n	8002080 <__aeabi_ddiv+0x52c>
 8001cbc:	1aa0      	subs	r0, r4, r2
 8001cbe:	4642      	mov	r2, r8
 8001cc0:	0412      	lsls	r2, r2, #16
 8001cc2:	431a      	orrs	r2, r3
 8001cc4:	4693      	mov	fp, r2
 8001cc6:	464b      	mov	r3, r9
 8001cc8:	4659      	mov	r1, fp
 8001cca:	0c1b      	lsrs	r3, r3, #16
 8001ccc:	001d      	movs	r5, r3
 8001cce:	9304      	str	r3, [sp, #16]
 8001cd0:	040b      	lsls	r3, r1, #16
 8001cd2:	4649      	mov	r1, r9
 8001cd4:	0409      	lsls	r1, r1, #16
 8001cd6:	0c09      	lsrs	r1, r1, #16
 8001cd8:	000c      	movs	r4, r1
 8001cda:	0c1b      	lsrs	r3, r3, #16
 8001cdc:	435c      	muls	r4, r3
 8001cde:	0c12      	lsrs	r2, r2, #16
 8001ce0:	436b      	muls	r3, r5
 8001ce2:	4688      	mov	r8, r1
 8001ce4:	4351      	muls	r1, r2
 8001ce6:	436a      	muls	r2, r5
 8001ce8:	0c25      	lsrs	r5, r4, #16
 8001cea:	46ac      	mov	ip, r5
 8001cec:	185b      	adds	r3, r3, r1
 8001cee:	4463      	add	r3, ip
 8001cf0:	4299      	cmp	r1, r3
 8001cf2:	d903      	bls.n	8001cfc <__aeabi_ddiv+0x1a8>
 8001cf4:	2180      	movs	r1, #128	@ 0x80
 8001cf6:	0249      	lsls	r1, r1, #9
 8001cf8:	468c      	mov	ip, r1
 8001cfa:	4462      	add	r2, ip
 8001cfc:	0c19      	lsrs	r1, r3, #16
 8001cfe:	0424      	lsls	r4, r4, #16
 8001d00:	041b      	lsls	r3, r3, #16
 8001d02:	0c24      	lsrs	r4, r4, #16
 8001d04:	188a      	adds	r2, r1, r2
 8001d06:	191c      	adds	r4, r3, r4
 8001d08:	4290      	cmp	r0, r2
 8001d0a:	d302      	bcc.n	8001d12 <__aeabi_ddiv+0x1be>
 8001d0c:	d116      	bne.n	8001d3c <__aeabi_ddiv+0x1e8>
 8001d0e:	42a7      	cmp	r7, r4
 8001d10:	d214      	bcs.n	8001d3c <__aeabi_ddiv+0x1e8>
 8001d12:	465b      	mov	r3, fp
 8001d14:	9d00      	ldr	r5, [sp, #0]
 8001d16:	3b01      	subs	r3, #1
 8001d18:	444f      	add	r7, r9
 8001d1a:	9305      	str	r3, [sp, #20]
 8001d1c:	454f      	cmp	r7, r9
 8001d1e:	419b      	sbcs	r3, r3
 8001d20:	46ac      	mov	ip, r5
 8001d22:	425b      	negs	r3, r3
 8001d24:	4463      	add	r3, ip
 8001d26:	18c0      	adds	r0, r0, r3
 8001d28:	4285      	cmp	r5, r0
 8001d2a:	d300      	bcc.n	8001d2e <__aeabi_ddiv+0x1da>
 8001d2c:	e1a1      	b.n	8002072 <__aeabi_ddiv+0x51e>
 8001d2e:	4282      	cmp	r2, r0
 8001d30:	d900      	bls.n	8001d34 <__aeabi_ddiv+0x1e0>
 8001d32:	e1f6      	b.n	8002122 <__aeabi_ddiv+0x5ce>
 8001d34:	d100      	bne.n	8001d38 <__aeabi_ddiv+0x1e4>
 8001d36:	e1f1      	b.n	800211c <__aeabi_ddiv+0x5c8>
 8001d38:	9b05      	ldr	r3, [sp, #20]
 8001d3a:	469b      	mov	fp, r3
 8001d3c:	1b3c      	subs	r4, r7, r4
 8001d3e:	42a7      	cmp	r7, r4
 8001d40:	41bf      	sbcs	r7, r7
 8001d42:	9d00      	ldr	r5, [sp, #0]
 8001d44:	1a80      	subs	r0, r0, r2
 8001d46:	427f      	negs	r7, r7
 8001d48:	1bc0      	subs	r0, r0, r7
 8001d4a:	4285      	cmp	r5, r0
 8001d4c:	d100      	bne.n	8001d50 <__aeabi_ddiv+0x1fc>
 8001d4e:	e1d0      	b.n	80020f2 <__aeabi_ddiv+0x59e>
 8001d50:	9902      	ldr	r1, [sp, #8]
 8001d52:	f7fe fa71 	bl	8000238 <__aeabi_uidivmod>
 8001d56:	9a03      	ldr	r2, [sp, #12]
 8001d58:	040b      	lsls	r3, r1, #16
 8001d5a:	4342      	muls	r2, r0
 8001d5c:	0c21      	lsrs	r1, r4, #16
 8001d5e:	0007      	movs	r7, r0
 8001d60:	4319      	orrs	r1, r3
 8001d62:	428a      	cmp	r2, r1
 8001d64:	d900      	bls.n	8001d68 <__aeabi_ddiv+0x214>
 8001d66:	e178      	b.n	800205a <__aeabi_ddiv+0x506>
 8001d68:	1a88      	subs	r0, r1, r2
 8001d6a:	9902      	ldr	r1, [sp, #8]
 8001d6c:	f7fe fa64 	bl	8000238 <__aeabi_uidivmod>
 8001d70:	9a03      	ldr	r2, [sp, #12]
 8001d72:	0424      	lsls	r4, r4, #16
 8001d74:	4342      	muls	r2, r0
 8001d76:	0409      	lsls	r1, r1, #16
 8001d78:	0c24      	lsrs	r4, r4, #16
 8001d7a:	0003      	movs	r3, r0
 8001d7c:	430c      	orrs	r4, r1
 8001d7e:	42a2      	cmp	r2, r4
 8001d80:	d900      	bls.n	8001d84 <__aeabi_ddiv+0x230>
 8001d82:	e15d      	b.n	8002040 <__aeabi_ddiv+0x4ec>
 8001d84:	4641      	mov	r1, r8
 8001d86:	1aa4      	subs	r4, r4, r2
 8001d88:	043a      	lsls	r2, r7, #16
 8001d8a:	431a      	orrs	r2, r3
 8001d8c:	9d04      	ldr	r5, [sp, #16]
 8001d8e:	0413      	lsls	r3, r2, #16
 8001d90:	0c1b      	lsrs	r3, r3, #16
 8001d92:	4359      	muls	r1, r3
 8001d94:	4647      	mov	r7, r8
 8001d96:	436b      	muls	r3, r5
 8001d98:	469c      	mov	ip, r3
 8001d9a:	0c10      	lsrs	r0, r2, #16
 8001d9c:	4347      	muls	r7, r0
 8001d9e:	0c0b      	lsrs	r3, r1, #16
 8001da0:	44bc      	add	ip, r7
 8001da2:	4463      	add	r3, ip
 8001da4:	4368      	muls	r0, r5
 8001da6:	429f      	cmp	r7, r3
 8001da8:	d903      	bls.n	8001db2 <__aeabi_ddiv+0x25e>
 8001daa:	2580      	movs	r5, #128	@ 0x80
 8001dac:	026d      	lsls	r5, r5, #9
 8001dae:	46ac      	mov	ip, r5
 8001db0:	4460      	add	r0, ip
 8001db2:	0c1f      	lsrs	r7, r3, #16
 8001db4:	0409      	lsls	r1, r1, #16
 8001db6:	041b      	lsls	r3, r3, #16
 8001db8:	0c09      	lsrs	r1, r1, #16
 8001dba:	183f      	adds	r7, r7, r0
 8001dbc:	185b      	adds	r3, r3, r1
 8001dbe:	42bc      	cmp	r4, r7
 8001dc0:	d200      	bcs.n	8001dc4 <__aeabi_ddiv+0x270>
 8001dc2:	e102      	b.n	8001fca <__aeabi_ddiv+0x476>
 8001dc4:	d100      	bne.n	8001dc8 <__aeabi_ddiv+0x274>
 8001dc6:	e0fd      	b.n	8001fc4 <__aeabi_ddiv+0x470>
 8001dc8:	2301      	movs	r3, #1
 8001dca:	431a      	orrs	r2, r3
 8001dcc:	4b43      	ldr	r3, [pc, #268]	@ (8001edc <__aeabi_ddiv+0x388>)
 8001dce:	4453      	add	r3, sl
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	dc00      	bgt.n	8001dd6 <__aeabi_ddiv+0x282>
 8001dd4:	e0ae      	b.n	8001f34 <__aeabi_ddiv+0x3e0>
 8001dd6:	0751      	lsls	r1, r2, #29
 8001dd8:	d000      	beq.n	8001ddc <__aeabi_ddiv+0x288>
 8001dda:	e198      	b.n	800210e <__aeabi_ddiv+0x5ba>
 8001ddc:	4659      	mov	r1, fp
 8001dde:	01c9      	lsls	r1, r1, #7
 8001de0:	d506      	bpl.n	8001df0 <__aeabi_ddiv+0x29c>
 8001de2:	4659      	mov	r1, fp
 8001de4:	4b3e      	ldr	r3, [pc, #248]	@ (8001ee0 <__aeabi_ddiv+0x38c>)
 8001de6:	4019      	ands	r1, r3
 8001de8:	2380      	movs	r3, #128	@ 0x80
 8001dea:	468b      	mov	fp, r1
 8001dec:	00db      	lsls	r3, r3, #3
 8001dee:	4453      	add	r3, sl
 8001df0:	493c      	ldr	r1, [pc, #240]	@ (8001ee4 <__aeabi_ddiv+0x390>)
 8001df2:	428b      	cmp	r3, r1
 8001df4:	dd00      	ble.n	8001df8 <__aeabi_ddiv+0x2a4>
 8001df6:	e71a      	b.n	8001c2e <__aeabi_ddiv+0xda>
 8001df8:	4659      	mov	r1, fp
 8001dfa:	08d2      	lsrs	r2, r2, #3
 8001dfc:	0749      	lsls	r1, r1, #29
 8001dfe:	4311      	orrs	r1, r2
 8001e00:	465a      	mov	r2, fp
 8001e02:	055b      	lsls	r3, r3, #21
 8001e04:	0254      	lsls	r4, r2, #9
 8001e06:	4688      	mov	r8, r1
 8001e08:	0b24      	lsrs	r4, r4, #12
 8001e0a:	0d5b      	lsrs	r3, r3, #21
 8001e0c:	e702      	b.n	8001c14 <__aeabi_ddiv+0xc0>
 8001e0e:	465a      	mov	r2, fp
 8001e10:	9b00      	ldr	r3, [sp, #0]
 8001e12:	431a      	orrs	r2, r3
 8001e14:	d100      	bne.n	8001e18 <__aeabi_ddiv+0x2c4>
 8001e16:	e07e      	b.n	8001f16 <__aeabi_ddiv+0x3c2>
 8001e18:	465b      	mov	r3, fp
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d100      	bne.n	8001e20 <__aeabi_ddiv+0x2cc>
 8001e1e:	e100      	b.n	8002022 <__aeabi_ddiv+0x4ce>
 8001e20:	4658      	mov	r0, fp
 8001e22:	f001 fa2d 	bl	8003280 <__clzsi2>
 8001e26:	0002      	movs	r2, r0
 8001e28:	0003      	movs	r3, r0
 8001e2a:	3a0b      	subs	r2, #11
 8001e2c:	271d      	movs	r7, #29
 8001e2e:	9e00      	ldr	r6, [sp, #0]
 8001e30:	1aba      	subs	r2, r7, r2
 8001e32:	0019      	movs	r1, r3
 8001e34:	4658      	mov	r0, fp
 8001e36:	40d6      	lsrs	r6, r2
 8001e38:	3908      	subs	r1, #8
 8001e3a:	4088      	lsls	r0, r1
 8001e3c:	0032      	movs	r2, r6
 8001e3e:	4302      	orrs	r2, r0
 8001e40:	4693      	mov	fp, r2
 8001e42:	9a00      	ldr	r2, [sp, #0]
 8001e44:	408a      	lsls	r2, r1
 8001e46:	4928      	ldr	r1, [pc, #160]	@ (8001ee8 <__aeabi_ddiv+0x394>)
 8001e48:	4453      	add	r3, sl
 8001e4a:	468a      	mov	sl, r1
 8001e4c:	449a      	add	sl, r3
 8001e4e:	2300      	movs	r3, #0
 8001e50:	e6c8      	b.n	8001be4 <__aeabi_ddiv+0x90>
 8001e52:	465b      	mov	r3, fp
 8001e54:	4303      	orrs	r3, r0
 8001e56:	4699      	mov	r9, r3
 8001e58:	d056      	beq.n	8001f08 <__aeabi_ddiv+0x3b4>
 8001e5a:	465b      	mov	r3, fp
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d100      	bne.n	8001e62 <__aeabi_ddiv+0x30e>
 8001e60:	e0cd      	b.n	8001ffe <__aeabi_ddiv+0x4aa>
 8001e62:	4658      	mov	r0, fp
 8001e64:	f001 fa0c 	bl	8003280 <__clzsi2>
 8001e68:	230b      	movs	r3, #11
 8001e6a:	425b      	negs	r3, r3
 8001e6c:	469c      	mov	ip, r3
 8001e6e:	0002      	movs	r2, r0
 8001e70:	4484      	add	ip, r0
 8001e72:	4666      	mov	r6, ip
 8001e74:	231d      	movs	r3, #29
 8001e76:	1b9b      	subs	r3, r3, r6
 8001e78:	0026      	movs	r6, r4
 8001e7a:	0011      	movs	r1, r2
 8001e7c:	4658      	mov	r0, fp
 8001e7e:	40de      	lsrs	r6, r3
 8001e80:	3908      	subs	r1, #8
 8001e82:	4088      	lsls	r0, r1
 8001e84:	0033      	movs	r3, r6
 8001e86:	4303      	orrs	r3, r0
 8001e88:	4699      	mov	r9, r3
 8001e8a:	0023      	movs	r3, r4
 8001e8c:	408b      	lsls	r3, r1
 8001e8e:	4698      	mov	r8, r3
 8001e90:	4b16      	ldr	r3, [pc, #88]	@ (8001eec <__aeabi_ddiv+0x398>)
 8001e92:	2400      	movs	r4, #0
 8001e94:	1a9b      	subs	r3, r3, r2
 8001e96:	469a      	mov	sl, r3
 8001e98:	2300      	movs	r3, #0
 8001e9a:	9303      	str	r3, [sp, #12]
 8001e9c:	e682      	b.n	8001ba4 <__aeabi_ddiv+0x50>
 8001e9e:	465a      	mov	r2, fp
 8001ea0:	4302      	orrs	r2, r0
 8001ea2:	4691      	mov	r9, r2
 8001ea4:	d12a      	bne.n	8001efc <__aeabi_ddiv+0x3a8>
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	469a      	mov	sl, r3
 8001eaa:	2302      	movs	r3, #2
 8001eac:	4690      	mov	r8, r2
 8001eae:	2408      	movs	r4, #8
 8001eb0:	9303      	str	r3, [sp, #12]
 8001eb2:	e677      	b.n	8001ba4 <__aeabi_ddiv+0x50>
 8001eb4:	465a      	mov	r2, fp
 8001eb6:	9b00      	ldr	r3, [sp, #0]
 8001eb8:	431a      	orrs	r2, r3
 8001eba:	4b0d      	ldr	r3, [pc, #52]	@ (8001ef0 <__aeabi_ddiv+0x39c>)
 8001ebc:	469c      	mov	ip, r3
 8001ebe:	44e2      	add	sl, ip
 8001ec0:	2a00      	cmp	r2, #0
 8001ec2:	d117      	bne.n	8001ef4 <__aeabi_ddiv+0x3a0>
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	431c      	orrs	r4, r3
 8001ec8:	2300      	movs	r3, #0
 8001eca:	469b      	mov	fp, r3
 8001ecc:	3302      	adds	r3, #2
 8001ece:	e689      	b.n	8001be4 <__aeabi_ddiv+0x90>
 8001ed0:	000007ff 	.word	0x000007ff
 8001ed4:	fffffc01 	.word	0xfffffc01
 8001ed8:	0800ba74 	.word	0x0800ba74
 8001edc:	000003ff 	.word	0x000003ff
 8001ee0:	feffffff 	.word	0xfeffffff
 8001ee4:	000007fe 	.word	0x000007fe
 8001ee8:	000003f3 	.word	0x000003f3
 8001eec:	fffffc0d 	.word	0xfffffc0d
 8001ef0:	fffff801 	.word	0xfffff801
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	0032      	movs	r2, r6
 8001ef8:	431c      	orrs	r4, r3
 8001efa:	e673      	b.n	8001be4 <__aeabi_ddiv+0x90>
 8001efc:	469a      	mov	sl, r3
 8001efe:	2303      	movs	r3, #3
 8001f00:	46d9      	mov	r9, fp
 8001f02:	240c      	movs	r4, #12
 8001f04:	9303      	str	r3, [sp, #12]
 8001f06:	e64d      	b.n	8001ba4 <__aeabi_ddiv+0x50>
 8001f08:	2300      	movs	r3, #0
 8001f0a:	4698      	mov	r8, r3
 8001f0c:	469a      	mov	sl, r3
 8001f0e:	3301      	adds	r3, #1
 8001f10:	2404      	movs	r4, #4
 8001f12:	9303      	str	r3, [sp, #12]
 8001f14:	e646      	b.n	8001ba4 <__aeabi_ddiv+0x50>
 8001f16:	2301      	movs	r3, #1
 8001f18:	431c      	orrs	r4, r3
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	469b      	mov	fp, r3
 8001f1e:	3301      	adds	r3, #1
 8001f20:	e660      	b.n	8001be4 <__aeabi_ddiv+0x90>
 8001f22:	2300      	movs	r3, #0
 8001f24:	2480      	movs	r4, #128	@ 0x80
 8001f26:	4698      	mov	r8, r3
 8001f28:	2600      	movs	r6, #0
 8001f2a:	4b92      	ldr	r3, [pc, #584]	@ (8002174 <__aeabi_ddiv+0x620>)
 8001f2c:	0324      	lsls	r4, r4, #12
 8001f2e:	e671      	b.n	8001c14 <__aeabi_ddiv+0xc0>
 8001f30:	2201      	movs	r2, #1
 8001f32:	4252      	negs	r2, r2
 8001f34:	2101      	movs	r1, #1
 8001f36:	1ac9      	subs	r1, r1, r3
 8001f38:	2938      	cmp	r1, #56	@ 0x38
 8001f3a:	dd00      	ble.n	8001f3e <__aeabi_ddiv+0x3ea>
 8001f3c:	e666      	b.n	8001c0c <__aeabi_ddiv+0xb8>
 8001f3e:	291f      	cmp	r1, #31
 8001f40:	dc00      	bgt.n	8001f44 <__aeabi_ddiv+0x3f0>
 8001f42:	e0ab      	b.n	800209c <__aeabi_ddiv+0x548>
 8001f44:	201f      	movs	r0, #31
 8001f46:	4240      	negs	r0, r0
 8001f48:	1ac3      	subs	r3, r0, r3
 8001f4a:	4658      	mov	r0, fp
 8001f4c:	40d8      	lsrs	r0, r3
 8001f4e:	0003      	movs	r3, r0
 8001f50:	2920      	cmp	r1, #32
 8001f52:	d004      	beq.n	8001f5e <__aeabi_ddiv+0x40a>
 8001f54:	4658      	mov	r0, fp
 8001f56:	4988      	ldr	r1, [pc, #544]	@ (8002178 <__aeabi_ddiv+0x624>)
 8001f58:	4451      	add	r1, sl
 8001f5a:	4088      	lsls	r0, r1
 8001f5c:	4302      	orrs	r2, r0
 8001f5e:	1e51      	subs	r1, r2, #1
 8001f60:	418a      	sbcs	r2, r1
 8001f62:	431a      	orrs	r2, r3
 8001f64:	2307      	movs	r3, #7
 8001f66:	0019      	movs	r1, r3
 8001f68:	2400      	movs	r4, #0
 8001f6a:	4011      	ands	r1, r2
 8001f6c:	4213      	tst	r3, r2
 8001f6e:	d00c      	beq.n	8001f8a <__aeabi_ddiv+0x436>
 8001f70:	230f      	movs	r3, #15
 8001f72:	4013      	ands	r3, r2
 8001f74:	2b04      	cmp	r3, #4
 8001f76:	d100      	bne.n	8001f7a <__aeabi_ddiv+0x426>
 8001f78:	e0f9      	b.n	800216e <__aeabi_ddiv+0x61a>
 8001f7a:	1d11      	adds	r1, r2, #4
 8001f7c:	4291      	cmp	r1, r2
 8001f7e:	419b      	sbcs	r3, r3
 8001f80:	000a      	movs	r2, r1
 8001f82:	425b      	negs	r3, r3
 8001f84:	0759      	lsls	r1, r3, #29
 8001f86:	025b      	lsls	r3, r3, #9
 8001f88:	0b1c      	lsrs	r4, r3, #12
 8001f8a:	08d2      	lsrs	r2, r2, #3
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	4690      	mov	r8, r2
 8001f90:	2300      	movs	r3, #0
 8001f92:	e63f      	b.n	8001c14 <__aeabi_ddiv+0xc0>
 8001f94:	2480      	movs	r4, #128	@ 0x80
 8001f96:	464b      	mov	r3, r9
 8001f98:	0324      	lsls	r4, r4, #12
 8001f9a:	4223      	tst	r3, r4
 8001f9c:	d009      	beq.n	8001fb2 <__aeabi_ddiv+0x45e>
 8001f9e:	465b      	mov	r3, fp
 8001fa0:	4223      	tst	r3, r4
 8001fa2:	d106      	bne.n	8001fb2 <__aeabi_ddiv+0x45e>
 8001fa4:	431c      	orrs	r4, r3
 8001fa6:	0324      	lsls	r4, r4, #12
 8001fa8:	002e      	movs	r6, r5
 8001faa:	4690      	mov	r8, r2
 8001fac:	4b71      	ldr	r3, [pc, #452]	@ (8002174 <__aeabi_ddiv+0x620>)
 8001fae:	0b24      	lsrs	r4, r4, #12
 8001fb0:	e630      	b.n	8001c14 <__aeabi_ddiv+0xc0>
 8001fb2:	2480      	movs	r4, #128	@ 0x80
 8001fb4:	464b      	mov	r3, r9
 8001fb6:	0324      	lsls	r4, r4, #12
 8001fb8:	431c      	orrs	r4, r3
 8001fba:	0324      	lsls	r4, r4, #12
 8001fbc:	9e02      	ldr	r6, [sp, #8]
 8001fbe:	4b6d      	ldr	r3, [pc, #436]	@ (8002174 <__aeabi_ddiv+0x620>)
 8001fc0:	0b24      	lsrs	r4, r4, #12
 8001fc2:	e627      	b.n	8001c14 <__aeabi_ddiv+0xc0>
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d100      	bne.n	8001fca <__aeabi_ddiv+0x476>
 8001fc8:	e700      	b.n	8001dcc <__aeabi_ddiv+0x278>
 8001fca:	9800      	ldr	r0, [sp, #0]
 8001fcc:	1e51      	subs	r1, r2, #1
 8001fce:	4684      	mov	ip, r0
 8001fd0:	4464      	add	r4, ip
 8001fd2:	4284      	cmp	r4, r0
 8001fd4:	d200      	bcs.n	8001fd8 <__aeabi_ddiv+0x484>
 8001fd6:	e084      	b.n	80020e2 <__aeabi_ddiv+0x58e>
 8001fd8:	42bc      	cmp	r4, r7
 8001fda:	d200      	bcs.n	8001fde <__aeabi_ddiv+0x48a>
 8001fdc:	e0ae      	b.n	800213c <__aeabi_ddiv+0x5e8>
 8001fde:	d100      	bne.n	8001fe2 <__aeabi_ddiv+0x48e>
 8001fe0:	e0c1      	b.n	8002166 <__aeabi_ddiv+0x612>
 8001fe2:	000a      	movs	r2, r1
 8001fe4:	e6f0      	b.n	8001dc8 <__aeabi_ddiv+0x274>
 8001fe6:	4542      	cmp	r2, r8
 8001fe8:	d900      	bls.n	8001fec <__aeabi_ddiv+0x498>
 8001fea:	e62c      	b.n	8001c46 <__aeabi_ddiv+0xf2>
 8001fec:	464b      	mov	r3, r9
 8001fee:	07dc      	lsls	r4, r3, #31
 8001ff0:	0858      	lsrs	r0, r3, #1
 8001ff2:	4643      	mov	r3, r8
 8001ff4:	085b      	lsrs	r3, r3, #1
 8001ff6:	431c      	orrs	r4, r3
 8001ff8:	4643      	mov	r3, r8
 8001ffa:	07df      	lsls	r7, r3, #31
 8001ffc:	e62a      	b.n	8001c54 <__aeabi_ddiv+0x100>
 8001ffe:	f001 f93f 	bl	8003280 <__clzsi2>
 8002002:	2315      	movs	r3, #21
 8002004:	469c      	mov	ip, r3
 8002006:	4484      	add	ip, r0
 8002008:	0002      	movs	r2, r0
 800200a:	4663      	mov	r3, ip
 800200c:	3220      	adds	r2, #32
 800200e:	2b1c      	cmp	r3, #28
 8002010:	dc00      	bgt.n	8002014 <__aeabi_ddiv+0x4c0>
 8002012:	e72e      	b.n	8001e72 <__aeabi_ddiv+0x31e>
 8002014:	0023      	movs	r3, r4
 8002016:	3808      	subs	r0, #8
 8002018:	4083      	lsls	r3, r0
 800201a:	4699      	mov	r9, r3
 800201c:	2300      	movs	r3, #0
 800201e:	4698      	mov	r8, r3
 8002020:	e736      	b.n	8001e90 <__aeabi_ddiv+0x33c>
 8002022:	f001 f92d 	bl	8003280 <__clzsi2>
 8002026:	0002      	movs	r2, r0
 8002028:	0003      	movs	r3, r0
 800202a:	3215      	adds	r2, #21
 800202c:	3320      	adds	r3, #32
 800202e:	2a1c      	cmp	r2, #28
 8002030:	dc00      	bgt.n	8002034 <__aeabi_ddiv+0x4e0>
 8002032:	e6fb      	b.n	8001e2c <__aeabi_ddiv+0x2d8>
 8002034:	9900      	ldr	r1, [sp, #0]
 8002036:	3808      	subs	r0, #8
 8002038:	4081      	lsls	r1, r0
 800203a:	2200      	movs	r2, #0
 800203c:	468b      	mov	fp, r1
 800203e:	e702      	b.n	8001e46 <__aeabi_ddiv+0x2f2>
 8002040:	9900      	ldr	r1, [sp, #0]
 8002042:	3b01      	subs	r3, #1
 8002044:	468c      	mov	ip, r1
 8002046:	4464      	add	r4, ip
 8002048:	42a1      	cmp	r1, r4
 800204a:	d900      	bls.n	800204e <__aeabi_ddiv+0x4fa>
 800204c:	e69a      	b.n	8001d84 <__aeabi_ddiv+0x230>
 800204e:	42a2      	cmp	r2, r4
 8002050:	d800      	bhi.n	8002054 <__aeabi_ddiv+0x500>
 8002052:	e697      	b.n	8001d84 <__aeabi_ddiv+0x230>
 8002054:	1e83      	subs	r3, r0, #2
 8002056:	4464      	add	r4, ip
 8002058:	e694      	b.n	8001d84 <__aeabi_ddiv+0x230>
 800205a:	46ac      	mov	ip, r5
 800205c:	4461      	add	r1, ip
 800205e:	3f01      	subs	r7, #1
 8002060:	428d      	cmp	r5, r1
 8002062:	d900      	bls.n	8002066 <__aeabi_ddiv+0x512>
 8002064:	e680      	b.n	8001d68 <__aeabi_ddiv+0x214>
 8002066:	428a      	cmp	r2, r1
 8002068:	d800      	bhi.n	800206c <__aeabi_ddiv+0x518>
 800206a:	e67d      	b.n	8001d68 <__aeabi_ddiv+0x214>
 800206c:	1e87      	subs	r7, r0, #2
 800206e:	4461      	add	r1, ip
 8002070:	e67a      	b.n	8001d68 <__aeabi_ddiv+0x214>
 8002072:	4285      	cmp	r5, r0
 8002074:	d000      	beq.n	8002078 <__aeabi_ddiv+0x524>
 8002076:	e65f      	b.n	8001d38 <__aeabi_ddiv+0x1e4>
 8002078:	45b9      	cmp	r9, r7
 800207a:	d900      	bls.n	800207e <__aeabi_ddiv+0x52a>
 800207c:	e65c      	b.n	8001d38 <__aeabi_ddiv+0x1e4>
 800207e:	e656      	b.n	8001d2e <__aeabi_ddiv+0x1da>
 8002080:	42a2      	cmp	r2, r4
 8002082:	d800      	bhi.n	8002086 <__aeabi_ddiv+0x532>
 8002084:	e61a      	b.n	8001cbc <__aeabi_ddiv+0x168>
 8002086:	1e83      	subs	r3, r0, #2
 8002088:	4464      	add	r4, ip
 800208a:	e617      	b.n	8001cbc <__aeabi_ddiv+0x168>
 800208c:	428a      	cmp	r2, r1
 800208e:	d800      	bhi.n	8002092 <__aeabi_ddiv+0x53e>
 8002090:	e600      	b.n	8001c94 <__aeabi_ddiv+0x140>
 8002092:	46ac      	mov	ip, r5
 8002094:	1e83      	subs	r3, r0, #2
 8002096:	4698      	mov	r8, r3
 8002098:	4461      	add	r1, ip
 800209a:	e5fb      	b.n	8001c94 <__aeabi_ddiv+0x140>
 800209c:	4837      	ldr	r0, [pc, #220]	@ (800217c <__aeabi_ddiv+0x628>)
 800209e:	0014      	movs	r4, r2
 80020a0:	4450      	add	r0, sl
 80020a2:	4082      	lsls	r2, r0
 80020a4:	465b      	mov	r3, fp
 80020a6:	0017      	movs	r7, r2
 80020a8:	4083      	lsls	r3, r0
 80020aa:	40cc      	lsrs	r4, r1
 80020ac:	1e7a      	subs	r2, r7, #1
 80020ae:	4197      	sbcs	r7, r2
 80020b0:	4323      	orrs	r3, r4
 80020b2:	433b      	orrs	r3, r7
 80020b4:	001a      	movs	r2, r3
 80020b6:	465b      	mov	r3, fp
 80020b8:	40cb      	lsrs	r3, r1
 80020ba:	0751      	lsls	r1, r2, #29
 80020bc:	d009      	beq.n	80020d2 <__aeabi_ddiv+0x57e>
 80020be:	210f      	movs	r1, #15
 80020c0:	4011      	ands	r1, r2
 80020c2:	2904      	cmp	r1, #4
 80020c4:	d005      	beq.n	80020d2 <__aeabi_ddiv+0x57e>
 80020c6:	1d11      	adds	r1, r2, #4
 80020c8:	4291      	cmp	r1, r2
 80020ca:	4192      	sbcs	r2, r2
 80020cc:	4252      	negs	r2, r2
 80020ce:	189b      	adds	r3, r3, r2
 80020d0:	000a      	movs	r2, r1
 80020d2:	0219      	lsls	r1, r3, #8
 80020d4:	d400      	bmi.n	80020d8 <__aeabi_ddiv+0x584>
 80020d6:	e755      	b.n	8001f84 <__aeabi_ddiv+0x430>
 80020d8:	2200      	movs	r2, #0
 80020da:	2301      	movs	r3, #1
 80020dc:	2400      	movs	r4, #0
 80020de:	4690      	mov	r8, r2
 80020e0:	e598      	b.n	8001c14 <__aeabi_ddiv+0xc0>
 80020e2:	000a      	movs	r2, r1
 80020e4:	42bc      	cmp	r4, r7
 80020e6:	d000      	beq.n	80020ea <__aeabi_ddiv+0x596>
 80020e8:	e66e      	b.n	8001dc8 <__aeabi_ddiv+0x274>
 80020ea:	454b      	cmp	r3, r9
 80020ec:	d000      	beq.n	80020f0 <__aeabi_ddiv+0x59c>
 80020ee:	e66b      	b.n	8001dc8 <__aeabi_ddiv+0x274>
 80020f0:	e66c      	b.n	8001dcc <__aeabi_ddiv+0x278>
 80020f2:	4b23      	ldr	r3, [pc, #140]	@ (8002180 <__aeabi_ddiv+0x62c>)
 80020f4:	4a23      	ldr	r2, [pc, #140]	@ (8002184 <__aeabi_ddiv+0x630>)
 80020f6:	4453      	add	r3, sl
 80020f8:	4592      	cmp	sl, r2
 80020fa:	da00      	bge.n	80020fe <__aeabi_ddiv+0x5aa>
 80020fc:	e718      	b.n	8001f30 <__aeabi_ddiv+0x3dc>
 80020fe:	2101      	movs	r1, #1
 8002100:	4249      	negs	r1, r1
 8002102:	1d0a      	adds	r2, r1, #4
 8002104:	428a      	cmp	r2, r1
 8002106:	4189      	sbcs	r1, r1
 8002108:	4249      	negs	r1, r1
 800210a:	448b      	add	fp, r1
 800210c:	e666      	b.n	8001ddc <__aeabi_ddiv+0x288>
 800210e:	210f      	movs	r1, #15
 8002110:	4011      	ands	r1, r2
 8002112:	2904      	cmp	r1, #4
 8002114:	d100      	bne.n	8002118 <__aeabi_ddiv+0x5c4>
 8002116:	e661      	b.n	8001ddc <__aeabi_ddiv+0x288>
 8002118:	0011      	movs	r1, r2
 800211a:	e7f2      	b.n	8002102 <__aeabi_ddiv+0x5ae>
 800211c:	42bc      	cmp	r4, r7
 800211e:	d800      	bhi.n	8002122 <__aeabi_ddiv+0x5ce>
 8002120:	e60a      	b.n	8001d38 <__aeabi_ddiv+0x1e4>
 8002122:	2302      	movs	r3, #2
 8002124:	425b      	negs	r3, r3
 8002126:	469c      	mov	ip, r3
 8002128:	9900      	ldr	r1, [sp, #0]
 800212a:	444f      	add	r7, r9
 800212c:	454f      	cmp	r7, r9
 800212e:	419b      	sbcs	r3, r3
 8002130:	44e3      	add	fp, ip
 8002132:	468c      	mov	ip, r1
 8002134:	425b      	negs	r3, r3
 8002136:	4463      	add	r3, ip
 8002138:	18c0      	adds	r0, r0, r3
 800213a:	e5ff      	b.n	8001d3c <__aeabi_ddiv+0x1e8>
 800213c:	4649      	mov	r1, r9
 800213e:	9d00      	ldr	r5, [sp, #0]
 8002140:	0048      	lsls	r0, r1, #1
 8002142:	4548      	cmp	r0, r9
 8002144:	4189      	sbcs	r1, r1
 8002146:	46ac      	mov	ip, r5
 8002148:	4249      	negs	r1, r1
 800214a:	4461      	add	r1, ip
 800214c:	4681      	mov	r9, r0
 800214e:	3a02      	subs	r2, #2
 8002150:	1864      	adds	r4, r4, r1
 8002152:	e7c7      	b.n	80020e4 <__aeabi_ddiv+0x590>
 8002154:	2480      	movs	r4, #128	@ 0x80
 8002156:	465b      	mov	r3, fp
 8002158:	0324      	lsls	r4, r4, #12
 800215a:	431c      	orrs	r4, r3
 800215c:	0324      	lsls	r4, r4, #12
 800215e:	4690      	mov	r8, r2
 8002160:	4b04      	ldr	r3, [pc, #16]	@ (8002174 <__aeabi_ddiv+0x620>)
 8002162:	0b24      	lsrs	r4, r4, #12
 8002164:	e556      	b.n	8001c14 <__aeabi_ddiv+0xc0>
 8002166:	4599      	cmp	r9, r3
 8002168:	d3e8      	bcc.n	800213c <__aeabi_ddiv+0x5e8>
 800216a:	000a      	movs	r2, r1
 800216c:	e7bd      	b.n	80020ea <__aeabi_ddiv+0x596>
 800216e:	2300      	movs	r3, #0
 8002170:	e708      	b.n	8001f84 <__aeabi_ddiv+0x430>
 8002172:	46c0      	nop			@ (mov r8, r8)
 8002174:	000007ff 	.word	0x000007ff
 8002178:	0000043e 	.word	0x0000043e
 800217c:	0000041e 	.word	0x0000041e
 8002180:	000003ff 	.word	0x000003ff
 8002184:	fffffc02 	.word	0xfffffc02

08002188 <__eqdf2>:
 8002188:	b5f0      	push	{r4, r5, r6, r7, lr}
 800218a:	4657      	mov	r7, sl
 800218c:	46de      	mov	lr, fp
 800218e:	464e      	mov	r6, r9
 8002190:	4645      	mov	r5, r8
 8002192:	b5e0      	push	{r5, r6, r7, lr}
 8002194:	000d      	movs	r5, r1
 8002196:	0004      	movs	r4, r0
 8002198:	0fe8      	lsrs	r0, r5, #31
 800219a:	4683      	mov	fp, r0
 800219c:	0309      	lsls	r1, r1, #12
 800219e:	0fd8      	lsrs	r0, r3, #31
 80021a0:	0b09      	lsrs	r1, r1, #12
 80021a2:	4682      	mov	sl, r0
 80021a4:	4819      	ldr	r0, [pc, #100]	@ (800220c <__eqdf2+0x84>)
 80021a6:	468c      	mov	ip, r1
 80021a8:	031f      	lsls	r7, r3, #12
 80021aa:	0069      	lsls	r1, r5, #1
 80021ac:	005e      	lsls	r6, r3, #1
 80021ae:	0d49      	lsrs	r1, r1, #21
 80021b0:	0b3f      	lsrs	r7, r7, #12
 80021b2:	0d76      	lsrs	r6, r6, #21
 80021b4:	4281      	cmp	r1, r0
 80021b6:	d018      	beq.n	80021ea <__eqdf2+0x62>
 80021b8:	4286      	cmp	r6, r0
 80021ba:	d00f      	beq.n	80021dc <__eqdf2+0x54>
 80021bc:	2001      	movs	r0, #1
 80021be:	42b1      	cmp	r1, r6
 80021c0:	d10d      	bne.n	80021de <__eqdf2+0x56>
 80021c2:	45bc      	cmp	ip, r7
 80021c4:	d10b      	bne.n	80021de <__eqdf2+0x56>
 80021c6:	4294      	cmp	r4, r2
 80021c8:	d109      	bne.n	80021de <__eqdf2+0x56>
 80021ca:	45d3      	cmp	fp, sl
 80021cc:	d01c      	beq.n	8002208 <__eqdf2+0x80>
 80021ce:	2900      	cmp	r1, #0
 80021d0:	d105      	bne.n	80021de <__eqdf2+0x56>
 80021d2:	4660      	mov	r0, ip
 80021d4:	4320      	orrs	r0, r4
 80021d6:	1e43      	subs	r3, r0, #1
 80021d8:	4198      	sbcs	r0, r3
 80021da:	e000      	b.n	80021de <__eqdf2+0x56>
 80021dc:	2001      	movs	r0, #1
 80021de:	bcf0      	pop	{r4, r5, r6, r7}
 80021e0:	46bb      	mov	fp, r7
 80021e2:	46b2      	mov	sl, r6
 80021e4:	46a9      	mov	r9, r5
 80021e6:	46a0      	mov	r8, r4
 80021e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021ea:	2001      	movs	r0, #1
 80021ec:	428e      	cmp	r6, r1
 80021ee:	d1f6      	bne.n	80021de <__eqdf2+0x56>
 80021f0:	4661      	mov	r1, ip
 80021f2:	4339      	orrs	r1, r7
 80021f4:	000f      	movs	r7, r1
 80021f6:	4317      	orrs	r7, r2
 80021f8:	4327      	orrs	r7, r4
 80021fa:	d1f0      	bne.n	80021de <__eqdf2+0x56>
 80021fc:	465b      	mov	r3, fp
 80021fe:	4652      	mov	r2, sl
 8002200:	1a98      	subs	r0, r3, r2
 8002202:	1e43      	subs	r3, r0, #1
 8002204:	4198      	sbcs	r0, r3
 8002206:	e7ea      	b.n	80021de <__eqdf2+0x56>
 8002208:	2000      	movs	r0, #0
 800220a:	e7e8      	b.n	80021de <__eqdf2+0x56>
 800220c:	000007ff 	.word	0x000007ff

08002210 <__gedf2>:
 8002210:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002212:	4657      	mov	r7, sl
 8002214:	464e      	mov	r6, r9
 8002216:	4645      	mov	r5, r8
 8002218:	46de      	mov	lr, fp
 800221a:	b5e0      	push	{r5, r6, r7, lr}
 800221c:	000d      	movs	r5, r1
 800221e:	030f      	lsls	r7, r1, #12
 8002220:	0b39      	lsrs	r1, r7, #12
 8002222:	b083      	sub	sp, #12
 8002224:	0004      	movs	r4, r0
 8002226:	4680      	mov	r8, r0
 8002228:	9101      	str	r1, [sp, #4]
 800222a:	0058      	lsls	r0, r3, #1
 800222c:	0fe9      	lsrs	r1, r5, #31
 800222e:	4f31      	ldr	r7, [pc, #196]	@ (80022f4 <__gedf2+0xe4>)
 8002230:	0d40      	lsrs	r0, r0, #21
 8002232:	468c      	mov	ip, r1
 8002234:	006e      	lsls	r6, r5, #1
 8002236:	0319      	lsls	r1, r3, #12
 8002238:	4682      	mov	sl, r0
 800223a:	4691      	mov	r9, r2
 800223c:	0d76      	lsrs	r6, r6, #21
 800223e:	0b09      	lsrs	r1, r1, #12
 8002240:	0fd8      	lsrs	r0, r3, #31
 8002242:	42be      	cmp	r6, r7
 8002244:	d01f      	beq.n	8002286 <__gedf2+0x76>
 8002246:	45ba      	cmp	sl, r7
 8002248:	d00f      	beq.n	800226a <__gedf2+0x5a>
 800224a:	2e00      	cmp	r6, #0
 800224c:	d12f      	bne.n	80022ae <__gedf2+0x9e>
 800224e:	4655      	mov	r5, sl
 8002250:	9e01      	ldr	r6, [sp, #4]
 8002252:	4334      	orrs	r4, r6
 8002254:	2d00      	cmp	r5, #0
 8002256:	d127      	bne.n	80022a8 <__gedf2+0x98>
 8002258:	430a      	orrs	r2, r1
 800225a:	d03a      	beq.n	80022d2 <__gedf2+0xc2>
 800225c:	2c00      	cmp	r4, #0
 800225e:	d145      	bne.n	80022ec <__gedf2+0xdc>
 8002260:	2800      	cmp	r0, #0
 8002262:	d11a      	bne.n	800229a <__gedf2+0x8a>
 8002264:	2001      	movs	r0, #1
 8002266:	4240      	negs	r0, r0
 8002268:	e017      	b.n	800229a <__gedf2+0x8a>
 800226a:	4311      	orrs	r1, r2
 800226c:	d13b      	bne.n	80022e6 <__gedf2+0xd6>
 800226e:	2e00      	cmp	r6, #0
 8002270:	d102      	bne.n	8002278 <__gedf2+0x68>
 8002272:	9f01      	ldr	r7, [sp, #4]
 8002274:	4327      	orrs	r7, r4
 8002276:	d0f3      	beq.n	8002260 <__gedf2+0x50>
 8002278:	4584      	cmp	ip, r0
 800227a:	d109      	bne.n	8002290 <__gedf2+0x80>
 800227c:	4663      	mov	r3, ip
 800227e:	2b00      	cmp	r3, #0
 8002280:	d0f0      	beq.n	8002264 <__gedf2+0x54>
 8002282:	4660      	mov	r0, ip
 8002284:	e009      	b.n	800229a <__gedf2+0x8a>
 8002286:	9f01      	ldr	r7, [sp, #4]
 8002288:	4327      	orrs	r7, r4
 800228a:	d12c      	bne.n	80022e6 <__gedf2+0xd6>
 800228c:	45b2      	cmp	sl, r6
 800228e:	d024      	beq.n	80022da <__gedf2+0xca>
 8002290:	4663      	mov	r3, ip
 8002292:	2002      	movs	r0, #2
 8002294:	3b01      	subs	r3, #1
 8002296:	4018      	ands	r0, r3
 8002298:	3801      	subs	r0, #1
 800229a:	b003      	add	sp, #12
 800229c:	bcf0      	pop	{r4, r5, r6, r7}
 800229e:	46bb      	mov	fp, r7
 80022a0:	46b2      	mov	sl, r6
 80022a2:	46a9      	mov	r9, r5
 80022a4:	46a0      	mov	r8, r4
 80022a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022a8:	2c00      	cmp	r4, #0
 80022aa:	d0d9      	beq.n	8002260 <__gedf2+0x50>
 80022ac:	e7e4      	b.n	8002278 <__gedf2+0x68>
 80022ae:	4654      	mov	r4, sl
 80022b0:	2c00      	cmp	r4, #0
 80022b2:	d0ed      	beq.n	8002290 <__gedf2+0x80>
 80022b4:	4584      	cmp	ip, r0
 80022b6:	d1eb      	bne.n	8002290 <__gedf2+0x80>
 80022b8:	4556      	cmp	r6, sl
 80022ba:	dce9      	bgt.n	8002290 <__gedf2+0x80>
 80022bc:	dbde      	blt.n	800227c <__gedf2+0x6c>
 80022be:	9b01      	ldr	r3, [sp, #4]
 80022c0:	428b      	cmp	r3, r1
 80022c2:	d8e5      	bhi.n	8002290 <__gedf2+0x80>
 80022c4:	d1da      	bne.n	800227c <__gedf2+0x6c>
 80022c6:	45c8      	cmp	r8, r9
 80022c8:	d8e2      	bhi.n	8002290 <__gedf2+0x80>
 80022ca:	2000      	movs	r0, #0
 80022cc:	45c8      	cmp	r8, r9
 80022ce:	d2e4      	bcs.n	800229a <__gedf2+0x8a>
 80022d0:	e7d4      	b.n	800227c <__gedf2+0x6c>
 80022d2:	2000      	movs	r0, #0
 80022d4:	2c00      	cmp	r4, #0
 80022d6:	d0e0      	beq.n	800229a <__gedf2+0x8a>
 80022d8:	e7da      	b.n	8002290 <__gedf2+0x80>
 80022da:	4311      	orrs	r1, r2
 80022dc:	d103      	bne.n	80022e6 <__gedf2+0xd6>
 80022de:	4584      	cmp	ip, r0
 80022e0:	d1d6      	bne.n	8002290 <__gedf2+0x80>
 80022e2:	2000      	movs	r0, #0
 80022e4:	e7d9      	b.n	800229a <__gedf2+0x8a>
 80022e6:	2002      	movs	r0, #2
 80022e8:	4240      	negs	r0, r0
 80022ea:	e7d6      	b.n	800229a <__gedf2+0x8a>
 80022ec:	4584      	cmp	ip, r0
 80022ee:	d0e6      	beq.n	80022be <__gedf2+0xae>
 80022f0:	e7ce      	b.n	8002290 <__gedf2+0x80>
 80022f2:	46c0      	nop			@ (mov r8, r8)
 80022f4:	000007ff 	.word	0x000007ff

080022f8 <__ledf2>:
 80022f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022fa:	4657      	mov	r7, sl
 80022fc:	464e      	mov	r6, r9
 80022fe:	4645      	mov	r5, r8
 8002300:	46de      	mov	lr, fp
 8002302:	b5e0      	push	{r5, r6, r7, lr}
 8002304:	000d      	movs	r5, r1
 8002306:	030f      	lsls	r7, r1, #12
 8002308:	0004      	movs	r4, r0
 800230a:	4680      	mov	r8, r0
 800230c:	0fe8      	lsrs	r0, r5, #31
 800230e:	0b39      	lsrs	r1, r7, #12
 8002310:	4684      	mov	ip, r0
 8002312:	b083      	sub	sp, #12
 8002314:	0058      	lsls	r0, r3, #1
 8002316:	4f30      	ldr	r7, [pc, #192]	@ (80023d8 <__ledf2+0xe0>)
 8002318:	0d40      	lsrs	r0, r0, #21
 800231a:	9101      	str	r1, [sp, #4]
 800231c:	031e      	lsls	r6, r3, #12
 800231e:	0069      	lsls	r1, r5, #1
 8002320:	4682      	mov	sl, r0
 8002322:	4691      	mov	r9, r2
 8002324:	0d49      	lsrs	r1, r1, #21
 8002326:	0b36      	lsrs	r6, r6, #12
 8002328:	0fd8      	lsrs	r0, r3, #31
 800232a:	42b9      	cmp	r1, r7
 800232c:	d020      	beq.n	8002370 <__ledf2+0x78>
 800232e:	45ba      	cmp	sl, r7
 8002330:	d00f      	beq.n	8002352 <__ledf2+0x5a>
 8002332:	2900      	cmp	r1, #0
 8002334:	d12b      	bne.n	800238e <__ledf2+0x96>
 8002336:	9901      	ldr	r1, [sp, #4]
 8002338:	430c      	orrs	r4, r1
 800233a:	4651      	mov	r1, sl
 800233c:	2900      	cmp	r1, #0
 800233e:	d137      	bne.n	80023b0 <__ledf2+0xb8>
 8002340:	4332      	orrs	r2, r6
 8002342:	d038      	beq.n	80023b6 <__ledf2+0xbe>
 8002344:	2c00      	cmp	r4, #0
 8002346:	d144      	bne.n	80023d2 <__ledf2+0xda>
 8002348:	2800      	cmp	r0, #0
 800234a:	d119      	bne.n	8002380 <__ledf2+0x88>
 800234c:	2001      	movs	r0, #1
 800234e:	4240      	negs	r0, r0
 8002350:	e016      	b.n	8002380 <__ledf2+0x88>
 8002352:	4316      	orrs	r6, r2
 8002354:	d113      	bne.n	800237e <__ledf2+0x86>
 8002356:	2900      	cmp	r1, #0
 8002358:	d102      	bne.n	8002360 <__ledf2+0x68>
 800235a:	9f01      	ldr	r7, [sp, #4]
 800235c:	4327      	orrs	r7, r4
 800235e:	d0f3      	beq.n	8002348 <__ledf2+0x50>
 8002360:	4584      	cmp	ip, r0
 8002362:	d020      	beq.n	80023a6 <__ledf2+0xae>
 8002364:	4663      	mov	r3, ip
 8002366:	2002      	movs	r0, #2
 8002368:	3b01      	subs	r3, #1
 800236a:	4018      	ands	r0, r3
 800236c:	3801      	subs	r0, #1
 800236e:	e007      	b.n	8002380 <__ledf2+0x88>
 8002370:	9f01      	ldr	r7, [sp, #4]
 8002372:	4327      	orrs	r7, r4
 8002374:	d103      	bne.n	800237e <__ledf2+0x86>
 8002376:	458a      	cmp	sl, r1
 8002378:	d1f4      	bne.n	8002364 <__ledf2+0x6c>
 800237a:	4316      	orrs	r6, r2
 800237c:	d01f      	beq.n	80023be <__ledf2+0xc6>
 800237e:	2002      	movs	r0, #2
 8002380:	b003      	add	sp, #12
 8002382:	bcf0      	pop	{r4, r5, r6, r7}
 8002384:	46bb      	mov	fp, r7
 8002386:	46b2      	mov	sl, r6
 8002388:	46a9      	mov	r9, r5
 800238a:	46a0      	mov	r8, r4
 800238c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800238e:	4654      	mov	r4, sl
 8002390:	2c00      	cmp	r4, #0
 8002392:	d0e7      	beq.n	8002364 <__ledf2+0x6c>
 8002394:	4584      	cmp	ip, r0
 8002396:	d1e5      	bne.n	8002364 <__ledf2+0x6c>
 8002398:	4551      	cmp	r1, sl
 800239a:	dce3      	bgt.n	8002364 <__ledf2+0x6c>
 800239c:	db03      	blt.n	80023a6 <__ledf2+0xae>
 800239e:	9b01      	ldr	r3, [sp, #4]
 80023a0:	42b3      	cmp	r3, r6
 80023a2:	d8df      	bhi.n	8002364 <__ledf2+0x6c>
 80023a4:	d00f      	beq.n	80023c6 <__ledf2+0xce>
 80023a6:	4663      	mov	r3, ip
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d0cf      	beq.n	800234c <__ledf2+0x54>
 80023ac:	4660      	mov	r0, ip
 80023ae:	e7e7      	b.n	8002380 <__ledf2+0x88>
 80023b0:	2c00      	cmp	r4, #0
 80023b2:	d0c9      	beq.n	8002348 <__ledf2+0x50>
 80023b4:	e7d4      	b.n	8002360 <__ledf2+0x68>
 80023b6:	2000      	movs	r0, #0
 80023b8:	2c00      	cmp	r4, #0
 80023ba:	d0e1      	beq.n	8002380 <__ledf2+0x88>
 80023bc:	e7d2      	b.n	8002364 <__ledf2+0x6c>
 80023be:	4584      	cmp	ip, r0
 80023c0:	d1d0      	bne.n	8002364 <__ledf2+0x6c>
 80023c2:	2000      	movs	r0, #0
 80023c4:	e7dc      	b.n	8002380 <__ledf2+0x88>
 80023c6:	45c8      	cmp	r8, r9
 80023c8:	d8cc      	bhi.n	8002364 <__ledf2+0x6c>
 80023ca:	2000      	movs	r0, #0
 80023cc:	45c8      	cmp	r8, r9
 80023ce:	d2d7      	bcs.n	8002380 <__ledf2+0x88>
 80023d0:	e7e9      	b.n	80023a6 <__ledf2+0xae>
 80023d2:	4584      	cmp	ip, r0
 80023d4:	d0e3      	beq.n	800239e <__ledf2+0xa6>
 80023d6:	e7c5      	b.n	8002364 <__ledf2+0x6c>
 80023d8:	000007ff 	.word	0x000007ff

080023dc <__aeabi_dmul>:
 80023dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023de:	4657      	mov	r7, sl
 80023e0:	46de      	mov	lr, fp
 80023e2:	464e      	mov	r6, r9
 80023e4:	4645      	mov	r5, r8
 80023e6:	b5e0      	push	{r5, r6, r7, lr}
 80023e8:	001f      	movs	r7, r3
 80023ea:	030b      	lsls	r3, r1, #12
 80023ec:	0b1b      	lsrs	r3, r3, #12
 80023ee:	0016      	movs	r6, r2
 80023f0:	469a      	mov	sl, r3
 80023f2:	0fca      	lsrs	r2, r1, #31
 80023f4:	004b      	lsls	r3, r1, #1
 80023f6:	0004      	movs	r4, r0
 80023f8:	4693      	mov	fp, r2
 80023fa:	b087      	sub	sp, #28
 80023fc:	0d5b      	lsrs	r3, r3, #21
 80023fe:	d100      	bne.n	8002402 <__aeabi_dmul+0x26>
 8002400:	e0d5      	b.n	80025ae <__aeabi_dmul+0x1d2>
 8002402:	4abb      	ldr	r2, [pc, #748]	@ (80026f0 <__aeabi_dmul+0x314>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d100      	bne.n	800240a <__aeabi_dmul+0x2e>
 8002408:	e0f8      	b.n	80025fc <__aeabi_dmul+0x220>
 800240a:	4651      	mov	r1, sl
 800240c:	0f42      	lsrs	r2, r0, #29
 800240e:	00c9      	lsls	r1, r1, #3
 8002410:	430a      	orrs	r2, r1
 8002412:	2180      	movs	r1, #128	@ 0x80
 8002414:	0409      	lsls	r1, r1, #16
 8002416:	4311      	orrs	r1, r2
 8002418:	00c2      	lsls	r2, r0, #3
 800241a:	4691      	mov	r9, r2
 800241c:	4ab5      	ldr	r2, [pc, #724]	@ (80026f4 <__aeabi_dmul+0x318>)
 800241e:	468a      	mov	sl, r1
 8002420:	189d      	adds	r5, r3, r2
 8002422:	2300      	movs	r3, #0
 8002424:	4698      	mov	r8, r3
 8002426:	9302      	str	r3, [sp, #8]
 8002428:	033c      	lsls	r4, r7, #12
 800242a:	007b      	lsls	r3, r7, #1
 800242c:	0ffa      	lsrs	r2, r7, #31
 800242e:	0030      	movs	r0, r6
 8002430:	0b24      	lsrs	r4, r4, #12
 8002432:	0d5b      	lsrs	r3, r3, #21
 8002434:	9200      	str	r2, [sp, #0]
 8002436:	d100      	bne.n	800243a <__aeabi_dmul+0x5e>
 8002438:	e096      	b.n	8002568 <__aeabi_dmul+0x18c>
 800243a:	4aad      	ldr	r2, [pc, #692]	@ (80026f0 <__aeabi_dmul+0x314>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d031      	beq.n	80024a4 <__aeabi_dmul+0xc8>
 8002440:	0f72      	lsrs	r2, r6, #29
 8002442:	00e4      	lsls	r4, r4, #3
 8002444:	4322      	orrs	r2, r4
 8002446:	2480      	movs	r4, #128	@ 0x80
 8002448:	0424      	lsls	r4, r4, #16
 800244a:	4314      	orrs	r4, r2
 800244c:	4aa9      	ldr	r2, [pc, #676]	@ (80026f4 <__aeabi_dmul+0x318>)
 800244e:	00f0      	lsls	r0, r6, #3
 8002450:	4694      	mov	ip, r2
 8002452:	4463      	add	r3, ip
 8002454:	195b      	adds	r3, r3, r5
 8002456:	1c5a      	adds	r2, r3, #1
 8002458:	9201      	str	r2, [sp, #4]
 800245a:	4642      	mov	r2, r8
 800245c:	2600      	movs	r6, #0
 800245e:	2a0a      	cmp	r2, #10
 8002460:	dc42      	bgt.n	80024e8 <__aeabi_dmul+0x10c>
 8002462:	465a      	mov	r2, fp
 8002464:	9900      	ldr	r1, [sp, #0]
 8002466:	404a      	eors	r2, r1
 8002468:	4693      	mov	fp, r2
 800246a:	4642      	mov	r2, r8
 800246c:	2a02      	cmp	r2, #2
 800246e:	dc32      	bgt.n	80024d6 <__aeabi_dmul+0xfa>
 8002470:	3a01      	subs	r2, #1
 8002472:	2a01      	cmp	r2, #1
 8002474:	d900      	bls.n	8002478 <__aeabi_dmul+0x9c>
 8002476:	e149      	b.n	800270c <__aeabi_dmul+0x330>
 8002478:	2e02      	cmp	r6, #2
 800247a:	d100      	bne.n	800247e <__aeabi_dmul+0xa2>
 800247c:	e0ca      	b.n	8002614 <__aeabi_dmul+0x238>
 800247e:	2e01      	cmp	r6, #1
 8002480:	d13d      	bne.n	80024fe <__aeabi_dmul+0x122>
 8002482:	2300      	movs	r3, #0
 8002484:	2400      	movs	r4, #0
 8002486:	2200      	movs	r2, #0
 8002488:	0010      	movs	r0, r2
 800248a:	465a      	mov	r2, fp
 800248c:	051b      	lsls	r3, r3, #20
 800248e:	4323      	orrs	r3, r4
 8002490:	07d2      	lsls	r2, r2, #31
 8002492:	4313      	orrs	r3, r2
 8002494:	0019      	movs	r1, r3
 8002496:	b007      	add	sp, #28
 8002498:	bcf0      	pop	{r4, r5, r6, r7}
 800249a:	46bb      	mov	fp, r7
 800249c:	46b2      	mov	sl, r6
 800249e:	46a9      	mov	r9, r5
 80024a0:	46a0      	mov	r8, r4
 80024a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024a4:	4b92      	ldr	r3, [pc, #584]	@ (80026f0 <__aeabi_dmul+0x314>)
 80024a6:	4326      	orrs	r6, r4
 80024a8:	18eb      	adds	r3, r5, r3
 80024aa:	2e00      	cmp	r6, #0
 80024ac:	d100      	bne.n	80024b0 <__aeabi_dmul+0xd4>
 80024ae:	e0bb      	b.n	8002628 <__aeabi_dmul+0x24c>
 80024b0:	2203      	movs	r2, #3
 80024b2:	4641      	mov	r1, r8
 80024b4:	4311      	orrs	r1, r2
 80024b6:	465a      	mov	r2, fp
 80024b8:	4688      	mov	r8, r1
 80024ba:	9900      	ldr	r1, [sp, #0]
 80024bc:	404a      	eors	r2, r1
 80024be:	2180      	movs	r1, #128	@ 0x80
 80024c0:	0109      	lsls	r1, r1, #4
 80024c2:	468c      	mov	ip, r1
 80024c4:	0029      	movs	r1, r5
 80024c6:	4461      	add	r1, ip
 80024c8:	9101      	str	r1, [sp, #4]
 80024ca:	4641      	mov	r1, r8
 80024cc:	290a      	cmp	r1, #10
 80024ce:	dd00      	ble.n	80024d2 <__aeabi_dmul+0xf6>
 80024d0:	e233      	b.n	800293a <__aeabi_dmul+0x55e>
 80024d2:	4693      	mov	fp, r2
 80024d4:	2603      	movs	r6, #3
 80024d6:	4642      	mov	r2, r8
 80024d8:	2701      	movs	r7, #1
 80024da:	4097      	lsls	r7, r2
 80024dc:	21a6      	movs	r1, #166	@ 0xa6
 80024de:	003a      	movs	r2, r7
 80024e0:	00c9      	lsls	r1, r1, #3
 80024e2:	400a      	ands	r2, r1
 80024e4:	420f      	tst	r7, r1
 80024e6:	d031      	beq.n	800254c <__aeabi_dmul+0x170>
 80024e8:	9e02      	ldr	r6, [sp, #8]
 80024ea:	2e02      	cmp	r6, #2
 80024ec:	d100      	bne.n	80024f0 <__aeabi_dmul+0x114>
 80024ee:	e235      	b.n	800295c <__aeabi_dmul+0x580>
 80024f0:	2e03      	cmp	r6, #3
 80024f2:	d100      	bne.n	80024f6 <__aeabi_dmul+0x11a>
 80024f4:	e1d2      	b.n	800289c <__aeabi_dmul+0x4c0>
 80024f6:	4654      	mov	r4, sl
 80024f8:	4648      	mov	r0, r9
 80024fa:	2e01      	cmp	r6, #1
 80024fc:	d0c1      	beq.n	8002482 <__aeabi_dmul+0xa6>
 80024fe:	9a01      	ldr	r2, [sp, #4]
 8002500:	4b7d      	ldr	r3, [pc, #500]	@ (80026f8 <__aeabi_dmul+0x31c>)
 8002502:	4694      	mov	ip, r2
 8002504:	4463      	add	r3, ip
 8002506:	2b00      	cmp	r3, #0
 8002508:	dc00      	bgt.n	800250c <__aeabi_dmul+0x130>
 800250a:	e0c0      	b.n	800268e <__aeabi_dmul+0x2b2>
 800250c:	0742      	lsls	r2, r0, #29
 800250e:	d009      	beq.n	8002524 <__aeabi_dmul+0x148>
 8002510:	220f      	movs	r2, #15
 8002512:	4002      	ands	r2, r0
 8002514:	2a04      	cmp	r2, #4
 8002516:	d005      	beq.n	8002524 <__aeabi_dmul+0x148>
 8002518:	1d02      	adds	r2, r0, #4
 800251a:	4282      	cmp	r2, r0
 800251c:	4180      	sbcs	r0, r0
 800251e:	4240      	negs	r0, r0
 8002520:	1824      	adds	r4, r4, r0
 8002522:	0010      	movs	r0, r2
 8002524:	01e2      	lsls	r2, r4, #7
 8002526:	d506      	bpl.n	8002536 <__aeabi_dmul+0x15a>
 8002528:	4b74      	ldr	r3, [pc, #464]	@ (80026fc <__aeabi_dmul+0x320>)
 800252a:	9a01      	ldr	r2, [sp, #4]
 800252c:	401c      	ands	r4, r3
 800252e:	2380      	movs	r3, #128	@ 0x80
 8002530:	4694      	mov	ip, r2
 8002532:	00db      	lsls	r3, r3, #3
 8002534:	4463      	add	r3, ip
 8002536:	4a72      	ldr	r2, [pc, #456]	@ (8002700 <__aeabi_dmul+0x324>)
 8002538:	4293      	cmp	r3, r2
 800253a:	dc6b      	bgt.n	8002614 <__aeabi_dmul+0x238>
 800253c:	0762      	lsls	r2, r4, #29
 800253e:	08c0      	lsrs	r0, r0, #3
 8002540:	0264      	lsls	r4, r4, #9
 8002542:	055b      	lsls	r3, r3, #21
 8002544:	4302      	orrs	r2, r0
 8002546:	0b24      	lsrs	r4, r4, #12
 8002548:	0d5b      	lsrs	r3, r3, #21
 800254a:	e79d      	b.n	8002488 <__aeabi_dmul+0xac>
 800254c:	2190      	movs	r1, #144	@ 0x90
 800254e:	0089      	lsls	r1, r1, #2
 8002550:	420f      	tst	r7, r1
 8002552:	d163      	bne.n	800261c <__aeabi_dmul+0x240>
 8002554:	2288      	movs	r2, #136	@ 0x88
 8002556:	423a      	tst	r2, r7
 8002558:	d100      	bne.n	800255c <__aeabi_dmul+0x180>
 800255a:	e0d7      	b.n	800270c <__aeabi_dmul+0x330>
 800255c:	9b00      	ldr	r3, [sp, #0]
 800255e:	46a2      	mov	sl, r4
 8002560:	469b      	mov	fp, r3
 8002562:	4681      	mov	r9, r0
 8002564:	9602      	str	r6, [sp, #8]
 8002566:	e7bf      	b.n	80024e8 <__aeabi_dmul+0x10c>
 8002568:	0023      	movs	r3, r4
 800256a:	4333      	orrs	r3, r6
 800256c:	d100      	bne.n	8002570 <__aeabi_dmul+0x194>
 800256e:	e07f      	b.n	8002670 <__aeabi_dmul+0x294>
 8002570:	2c00      	cmp	r4, #0
 8002572:	d100      	bne.n	8002576 <__aeabi_dmul+0x19a>
 8002574:	e1ad      	b.n	80028d2 <__aeabi_dmul+0x4f6>
 8002576:	0020      	movs	r0, r4
 8002578:	f000 fe82 	bl	8003280 <__clzsi2>
 800257c:	0002      	movs	r2, r0
 800257e:	0003      	movs	r3, r0
 8002580:	3a0b      	subs	r2, #11
 8002582:	201d      	movs	r0, #29
 8002584:	0019      	movs	r1, r3
 8002586:	1a82      	subs	r2, r0, r2
 8002588:	0030      	movs	r0, r6
 800258a:	3908      	subs	r1, #8
 800258c:	40d0      	lsrs	r0, r2
 800258e:	408c      	lsls	r4, r1
 8002590:	4304      	orrs	r4, r0
 8002592:	0030      	movs	r0, r6
 8002594:	4088      	lsls	r0, r1
 8002596:	4a5b      	ldr	r2, [pc, #364]	@ (8002704 <__aeabi_dmul+0x328>)
 8002598:	1aeb      	subs	r3, r5, r3
 800259a:	4694      	mov	ip, r2
 800259c:	4463      	add	r3, ip
 800259e:	1c5a      	adds	r2, r3, #1
 80025a0:	9201      	str	r2, [sp, #4]
 80025a2:	4642      	mov	r2, r8
 80025a4:	2600      	movs	r6, #0
 80025a6:	2a0a      	cmp	r2, #10
 80025a8:	dc00      	bgt.n	80025ac <__aeabi_dmul+0x1d0>
 80025aa:	e75a      	b.n	8002462 <__aeabi_dmul+0x86>
 80025ac:	e79c      	b.n	80024e8 <__aeabi_dmul+0x10c>
 80025ae:	4653      	mov	r3, sl
 80025b0:	4303      	orrs	r3, r0
 80025b2:	4699      	mov	r9, r3
 80025b4:	d054      	beq.n	8002660 <__aeabi_dmul+0x284>
 80025b6:	4653      	mov	r3, sl
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d100      	bne.n	80025be <__aeabi_dmul+0x1e2>
 80025bc:	e177      	b.n	80028ae <__aeabi_dmul+0x4d2>
 80025be:	4650      	mov	r0, sl
 80025c0:	f000 fe5e 	bl	8003280 <__clzsi2>
 80025c4:	230b      	movs	r3, #11
 80025c6:	425b      	negs	r3, r3
 80025c8:	469c      	mov	ip, r3
 80025ca:	0002      	movs	r2, r0
 80025cc:	4484      	add	ip, r0
 80025ce:	0011      	movs	r1, r2
 80025d0:	4650      	mov	r0, sl
 80025d2:	3908      	subs	r1, #8
 80025d4:	4088      	lsls	r0, r1
 80025d6:	231d      	movs	r3, #29
 80025d8:	4680      	mov	r8, r0
 80025da:	4660      	mov	r0, ip
 80025dc:	1a1b      	subs	r3, r3, r0
 80025de:	0020      	movs	r0, r4
 80025e0:	40d8      	lsrs	r0, r3
 80025e2:	0003      	movs	r3, r0
 80025e4:	4640      	mov	r0, r8
 80025e6:	4303      	orrs	r3, r0
 80025e8:	469a      	mov	sl, r3
 80025ea:	0023      	movs	r3, r4
 80025ec:	408b      	lsls	r3, r1
 80025ee:	4699      	mov	r9, r3
 80025f0:	2300      	movs	r3, #0
 80025f2:	4d44      	ldr	r5, [pc, #272]	@ (8002704 <__aeabi_dmul+0x328>)
 80025f4:	4698      	mov	r8, r3
 80025f6:	1aad      	subs	r5, r5, r2
 80025f8:	9302      	str	r3, [sp, #8]
 80025fa:	e715      	b.n	8002428 <__aeabi_dmul+0x4c>
 80025fc:	4652      	mov	r2, sl
 80025fe:	4302      	orrs	r2, r0
 8002600:	4691      	mov	r9, r2
 8002602:	d126      	bne.n	8002652 <__aeabi_dmul+0x276>
 8002604:	2200      	movs	r2, #0
 8002606:	001d      	movs	r5, r3
 8002608:	2302      	movs	r3, #2
 800260a:	4692      	mov	sl, r2
 800260c:	3208      	adds	r2, #8
 800260e:	4690      	mov	r8, r2
 8002610:	9302      	str	r3, [sp, #8]
 8002612:	e709      	b.n	8002428 <__aeabi_dmul+0x4c>
 8002614:	2400      	movs	r4, #0
 8002616:	2200      	movs	r2, #0
 8002618:	4b35      	ldr	r3, [pc, #212]	@ (80026f0 <__aeabi_dmul+0x314>)
 800261a:	e735      	b.n	8002488 <__aeabi_dmul+0xac>
 800261c:	2300      	movs	r3, #0
 800261e:	2480      	movs	r4, #128	@ 0x80
 8002620:	469b      	mov	fp, r3
 8002622:	0324      	lsls	r4, r4, #12
 8002624:	4b32      	ldr	r3, [pc, #200]	@ (80026f0 <__aeabi_dmul+0x314>)
 8002626:	e72f      	b.n	8002488 <__aeabi_dmul+0xac>
 8002628:	2202      	movs	r2, #2
 800262a:	4641      	mov	r1, r8
 800262c:	4311      	orrs	r1, r2
 800262e:	2280      	movs	r2, #128	@ 0x80
 8002630:	0112      	lsls	r2, r2, #4
 8002632:	4694      	mov	ip, r2
 8002634:	002a      	movs	r2, r5
 8002636:	4462      	add	r2, ip
 8002638:	4688      	mov	r8, r1
 800263a:	9201      	str	r2, [sp, #4]
 800263c:	290a      	cmp	r1, #10
 800263e:	dd00      	ble.n	8002642 <__aeabi_dmul+0x266>
 8002640:	e752      	b.n	80024e8 <__aeabi_dmul+0x10c>
 8002642:	465a      	mov	r2, fp
 8002644:	2000      	movs	r0, #0
 8002646:	9900      	ldr	r1, [sp, #0]
 8002648:	0004      	movs	r4, r0
 800264a:	404a      	eors	r2, r1
 800264c:	4693      	mov	fp, r2
 800264e:	2602      	movs	r6, #2
 8002650:	e70b      	b.n	800246a <__aeabi_dmul+0x8e>
 8002652:	220c      	movs	r2, #12
 8002654:	001d      	movs	r5, r3
 8002656:	2303      	movs	r3, #3
 8002658:	4681      	mov	r9, r0
 800265a:	4690      	mov	r8, r2
 800265c:	9302      	str	r3, [sp, #8]
 800265e:	e6e3      	b.n	8002428 <__aeabi_dmul+0x4c>
 8002660:	2300      	movs	r3, #0
 8002662:	469a      	mov	sl, r3
 8002664:	3304      	adds	r3, #4
 8002666:	4698      	mov	r8, r3
 8002668:	3b03      	subs	r3, #3
 800266a:	2500      	movs	r5, #0
 800266c:	9302      	str	r3, [sp, #8]
 800266e:	e6db      	b.n	8002428 <__aeabi_dmul+0x4c>
 8002670:	4642      	mov	r2, r8
 8002672:	3301      	adds	r3, #1
 8002674:	431a      	orrs	r2, r3
 8002676:	002b      	movs	r3, r5
 8002678:	4690      	mov	r8, r2
 800267a:	1c5a      	adds	r2, r3, #1
 800267c:	9201      	str	r2, [sp, #4]
 800267e:	4642      	mov	r2, r8
 8002680:	2400      	movs	r4, #0
 8002682:	2000      	movs	r0, #0
 8002684:	2601      	movs	r6, #1
 8002686:	2a0a      	cmp	r2, #10
 8002688:	dc00      	bgt.n	800268c <__aeabi_dmul+0x2b0>
 800268a:	e6ea      	b.n	8002462 <__aeabi_dmul+0x86>
 800268c:	e72c      	b.n	80024e8 <__aeabi_dmul+0x10c>
 800268e:	2201      	movs	r2, #1
 8002690:	1ad2      	subs	r2, r2, r3
 8002692:	2a38      	cmp	r2, #56	@ 0x38
 8002694:	dd00      	ble.n	8002698 <__aeabi_dmul+0x2bc>
 8002696:	e6f4      	b.n	8002482 <__aeabi_dmul+0xa6>
 8002698:	2a1f      	cmp	r2, #31
 800269a:	dc00      	bgt.n	800269e <__aeabi_dmul+0x2c2>
 800269c:	e12a      	b.n	80028f4 <__aeabi_dmul+0x518>
 800269e:	211f      	movs	r1, #31
 80026a0:	4249      	negs	r1, r1
 80026a2:	1acb      	subs	r3, r1, r3
 80026a4:	0021      	movs	r1, r4
 80026a6:	40d9      	lsrs	r1, r3
 80026a8:	000b      	movs	r3, r1
 80026aa:	2a20      	cmp	r2, #32
 80026ac:	d005      	beq.n	80026ba <__aeabi_dmul+0x2de>
 80026ae:	4a16      	ldr	r2, [pc, #88]	@ (8002708 <__aeabi_dmul+0x32c>)
 80026b0:	9d01      	ldr	r5, [sp, #4]
 80026b2:	4694      	mov	ip, r2
 80026b4:	4465      	add	r5, ip
 80026b6:	40ac      	lsls	r4, r5
 80026b8:	4320      	orrs	r0, r4
 80026ba:	1e42      	subs	r2, r0, #1
 80026bc:	4190      	sbcs	r0, r2
 80026be:	4318      	orrs	r0, r3
 80026c0:	2307      	movs	r3, #7
 80026c2:	0019      	movs	r1, r3
 80026c4:	2400      	movs	r4, #0
 80026c6:	4001      	ands	r1, r0
 80026c8:	4203      	tst	r3, r0
 80026ca:	d00c      	beq.n	80026e6 <__aeabi_dmul+0x30a>
 80026cc:	230f      	movs	r3, #15
 80026ce:	4003      	ands	r3, r0
 80026d0:	2b04      	cmp	r3, #4
 80026d2:	d100      	bne.n	80026d6 <__aeabi_dmul+0x2fa>
 80026d4:	e140      	b.n	8002958 <__aeabi_dmul+0x57c>
 80026d6:	1d03      	adds	r3, r0, #4
 80026d8:	4283      	cmp	r3, r0
 80026da:	41a4      	sbcs	r4, r4
 80026dc:	0018      	movs	r0, r3
 80026de:	4264      	negs	r4, r4
 80026e0:	0761      	lsls	r1, r4, #29
 80026e2:	0264      	lsls	r4, r4, #9
 80026e4:	0b24      	lsrs	r4, r4, #12
 80026e6:	08c2      	lsrs	r2, r0, #3
 80026e8:	2300      	movs	r3, #0
 80026ea:	430a      	orrs	r2, r1
 80026ec:	e6cc      	b.n	8002488 <__aeabi_dmul+0xac>
 80026ee:	46c0      	nop			@ (mov r8, r8)
 80026f0:	000007ff 	.word	0x000007ff
 80026f4:	fffffc01 	.word	0xfffffc01
 80026f8:	000003ff 	.word	0x000003ff
 80026fc:	feffffff 	.word	0xfeffffff
 8002700:	000007fe 	.word	0x000007fe
 8002704:	fffffc0d 	.word	0xfffffc0d
 8002708:	0000043e 	.word	0x0000043e
 800270c:	4649      	mov	r1, r9
 800270e:	464a      	mov	r2, r9
 8002710:	0409      	lsls	r1, r1, #16
 8002712:	0c09      	lsrs	r1, r1, #16
 8002714:	000d      	movs	r5, r1
 8002716:	0c16      	lsrs	r6, r2, #16
 8002718:	0c02      	lsrs	r2, r0, #16
 800271a:	0400      	lsls	r0, r0, #16
 800271c:	0c00      	lsrs	r0, r0, #16
 800271e:	4345      	muls	r5, r0
 8002720:	46ac      	mov	ip, r5
 8002722:	0005      	movs	r5, r0
 8002724:	4375      	muls	r5, r6
 8002726:	46a8      	mov	r8, r5
 8002728:	0015      	movs	r5, r2
 800272a:	000f      	movs	r7, r1
 800272c:	4375      	muls	r5, r6
 800272e:	9200      	str	r2, [sp, #0]
 8002730:	9502      	str	r5, [sp, #8]
 8002732:	002a      	movs	r2, r5
 8002734:	9d00      	ldr	r5, [sp, #0]
 8002736:	436f      	muls	r7, r5
 8002738:	4665      	mov	r5, ip
 800273a:	0c2d      	lsrs	r5, r5, #16
 800273c:	46a9      	mov	r9, r5
 800273e:	4447      	add	r7, r8
 8002740:	444f      	add	r7, r9
 8002742:	45b8      	cmp	r8, r7
 8002744:	d905      	bls.n	8002752 <__aeabi_dmul+0x376>
 8002746:	0015      	movs	r5, r2
 8002748:	2280      	movs	r2, #128	@ 0x80
 800274a:	0252      	lsls	r2, r2, #9
 800274c:	4690      	mov	r8, r2
 800274e:	4445      	add	r5, r8
 8002750:	9502      	str	r5, [sp, #8]
 8002752:	0c3d      	lsrs	r5, r7, #16
 8002754:	9503      	str	r5, [sp, #12]
 8002756:	4665      	mov	r5, ip
 8002758:	042d      	lsls	r5, r5, #16
 800275a:	043f      	lsls	r7, r7, #16
 800275c:	0c2d      	lsrs	r5, r5, #16
 800275e:	46ac      	mov	ip, r5
 8002760:	003d      	movs	r5, r7
 8002762:	4465      	add	r5, ip
 8002764:	9504      	str	r5, [sp, #16]
 8002766:	0c25      	lsrs	r5, r4, #16
 8002768:	0424      	lsls	r4, r4, #16
 800276a:	0c24      	lsrs	r4, r4, #16
 800276c:	46ac      	mov	ip, r5
 800276e:	0025      	movs	r5, r4
 8002770:	4375      	muls	r5, r6
 8002772:	46a8      	mov	r8, r5
 8002774:	4665      	mov	r5, ip
 8002776:	000f      	movs	r7, r1
 8002778:	4369      	muls	r1, r5
 800277a:	4441      	add	r1, r8
 800277c:	4689      	mov	r9, r1
 800277e:	4367      	muls	r7, r4
 8002780:	0c39      	lsrs	r1, r7, #16
 8002782:	4449      	add	r1, r9
 8002784:	436e      	muls	r6, r5
 8002786:	4588      	cmp	r8, r1
 8002788:	d903      	bls.n	8002792 <__aeabi_dmul+0x3b6>
 800278a:	2280      	movs	r2, #128	@ 0x80
 800278c:	0252      	lsls	r2, r2, #9
 800278e:	4690      	mov	r8, r2
 8002790:	4446      	add	r6, r8
 8002792:	0c0d      	lsrs	r5, r1, #16
 8002794:	46a8      	mov	r8, r5
 8002796:	0035      	movs	r5, r6
 8002798:	4445      	add	r5, r8
 800279a:	9505      	str	r5, [sp, #20]
 800279c:	9d03      	ldr	r5, [sp, #12]
 800279e:	043f      	lsls	r7, r7, #16
 80027a0:	46a8      	mov	r8, r5
 80027a2:	0c3f      	lsrs	r7, r7, #16
 80027a4:	0409      	lsls	r1, r1, #16
 80027a6:	19c9      	adds	r1, r1, r7
 80027a8:	4488      	add	r8, r1
 80027aa:	4645      	mov	r5, r8
 80027ac:	9503      	str	r5, [sp, #12]
 80027ae:	4655      	mov	r5, sl
 80027b0:	042e      	lsls	r6, r5, #16
 80027b2:	0c36      	lsrs	r6, r6, #16
 80027b4:	0c2f      	lsrs	r7, r5, #16
 80027b6:	0035      	movs	r5, r6
 80027b8:	4345      	muls	r5, r0
 80027ba:	4378      	muls	r0, r7
 80027bc:	4681      	mov	r9, r0
 80027be:	0038      	movs	r0, r7
 80027c0:	46a8      	mov	r8, r5
 80027c2:	0c2d      	lsrs	r5, r5, #16
 80027c4:	46aa      	mov	sl, r5
 80027c6:	9a00      	ldr	r2, [sp, #0]
 80027c8:	4350      	muls	r0, r2
 80027ca:	4372      	muls	r2, r6
 80027cc:	444a      	add	r2, r9
 80027ce:	4452      	add	r2, sl
 80027d0:	4591      	cmp	r9, r2
 80027d2:	d903      	bls.n	80027dc <__aeabi_dmul+0x400>
 80027d4:	2580      	movs	r5, #128	@ 0x80
 80027d6:	026d      	lsls	r5, r5, #9
 80027d8:	46a9      	mov	r9, r5
 80027da:	4448      	add	r0, r9
 80027dc:	0c15      	lsrs	r5, r2, #16
 80027de:	46a9      	mov	r9, r5
 80027e0:	4645      	mov	r5, r8
 80027e2:	042d      	lsls	r5, r5, #16
 80027e4:	0c2d      	lsrs	r5, r5, #16
 80027e6:	46a8      	mov	r8, r5
 80027e8:	4665      	mov	r5, ip
 80027ea:	437d      	muls	r5, r7
 80027ec:	0412      	lsls	r2, r2, #16
 80027ee:	4448      	add	r0, r9
 80027f0:	4490      	add	r8, r2
 80027f2:	46a9      	mov	r9, r5
 80027f4:	0032      	movs	r2, r6
 80027f6:	4665      	mov	r5, ip
 80027f8:	4362      	muls	r2, r4
 80027fa:	436e      	muls	r6, r5
 80027fc:	437c      	muls	r4, r7
 80027fe:	0c17      	lsrs	r7, r2, #16
 8002800:	1936      	adds	r6, r6, r4
 8002802:	19bf      	adds	r7, r7, r6
 8002804:	42bc      	cmp	r4, r7
 8002806:	d903      	bls.n	8002810 <__aeabi_dmul+0x434>
 8002808:	2480      	movs	r4, #128	@ 0x80
 800280a:	0264      	lsls	r4, r4, #9
 800280c:	46a4      	mov	ip, r4
 800280e:	44e1      	add	r9, ip
 8002810:	9c02      	ldr	r4, [sp, #8]
 8002812:	9e03      	ldr	r6, [sp, #12]
 8002814:	46a4      	mov	ip, r4
 8002816:	9d05      	ldr	r5, [sp, #20]
 8002818:	4466      	add	r6, ip
 800281a:	428e      	cmp	r6, r1
 800281c:	4189      	sbcs	r1, r1
 800281e:	46ac      	mov	ip, r5
 8002820:	0412      	lsls	r2, r2, #16
 8002822:	043c      	lsls	r4, r7, #16
 8002824:	0c12      	lsrs	r2, r2, #16
 8002826:	18a2      	adds	r2, r4, r2
 8002828:	4462      	add	r2, ip
 800282a:	4249      	negs	r1, r1
 800282c:	1854      	adds	r4, r2, r1
 800282e:	4446      	add	r6, r8
 8002830:	46a4      	mov	ip, r4
 8002832:	4546      	cmp	r6, r8
 8002834:	41a4      	sbcs	r4, r4
 8002836:	4682      	mov	sl, r0
 8002838:	4264      	negs	r4, r4
 800283a:	46a0      	mov	r8, r4
 800283c:	42aa      	cmp	r2, r5
 800283e:	4192      	sbcs	r2, r2
 8002840:	458c      	cmp	ip, r1
 8002842:	4189      	sbcs	r1, r1
 8002844:	44e2      	add	sl, ip
 8002846:	44d0      	add	r8, sl
 8002848:	4249      	negs	r1, r1
 800284a:	4252      	negs	r2, r2
 800284c:	430a      	orrs	r2, r1
 800284e:	45a0      	cmp	r8, r4
 8002850:	41a4      	sbcs	r4, r4
 8002852:	4582      	cmp	sl, r0
 8002854:	4189      	sbcs	r1, r1
 8002856:	4264      	negs	r4, r4
 8002858:	4249      	negs	r1, r1
 800285a:	430c      	orrs	r4, r1
 800285c:	4641      	mov	r1, r8
 800285e:	0c3f      	lsrs	r7, r7, #16
 8002860:	19d2      	adds	r2, r2, r7
 8002862:	1912      	adds	r2, r2, r4
 8002864:	0dcc      	lsrs	r4, r1, #23
 8002866:	9904      	ldr	r1, [sp, #16]
 8002868:	0270      	lsls	r0, r6, #9
 800286a:	4308      	orrs	r0, r1
 800286c:	1e41      	subs	r1, r0, #1
 800286e:	4188      	sbcs	r0, r1
 8002870:	4641      	mov	r1, r8
 8002872:	444a      	add	r2, r9
 8002874:	0df6      	lsrs	r6, r6, #23
 8002876:	0252      	lsls	r2, r2, #9
 8002878:	4330      	orrs	r0, r6
 800287a:	0249      	lsls	r1, r1, #9
 800287c:	4314      	orrs	r4, r2
 800287e:	4308      	orrs	r0, r1
 8002880:	01d2      	lsls	r2, r2, #7
 8002882:	d535      	bpl.n	80028f0 <__aeabi_dmul+0x514>
 8002884:	2201      	movs	r2, #1
 8002886:	0843      	lsrs	r3, r0, #1
 8002888:	4002      	ands	r2, r0
 800288a:	4313      	orrs	r3, r2
 800288c:	07e0      	lsls	r0, r4, #31
 800288e:	4318      	orrs	r0, r3
 8002890:	0864      	lsrs	r4, r4, #1
 8002892:	e634      	b.n	80024fe <__aeabi_dmul+0x122>
 8002894:	9b00      	ldr	r3, [sp, #0]
 8002896:	46a2      	mov	sl, r4
 8002898:	469b      	mov	fp, r3
 800289a:	4681      	mov	r9, r0
 800289c:	2480      	movs	r4, #128	@ 0x80
 800289e:	4653      	mov	r3, sl
 80028a0:	0324      	lsls	r4, r4, #12
 80028a2:	431c      	orrs	r4, r3
 80028a4:	0324      	lsls	r4, r4, #12
 80028a6:	464a      	mov	r2, r9
 80028a8:	4b2e      	ldr	r3, [pc, #184]	@ (8002964 <__aeabi_dmul+0x588>)
 80028aa:	0b24      	lsrs	r4, r4, #12
 80028ac:	e5ec      	b.n	8002488 <__aeabi_dmul+0xac>
 80028ae:	f000 fce7 	bl	8003280 <__clzsi2>
 80028b2:	2315      	movs	r3, #21
 80028b4:	469c      	mov	ip, r3
 80028b6:	4484      	add	ip, r0
 80028b8:	0002      	movs	r2, r0
 80028ba:	4663      	mov	r3, ip
 80028bc:	3220      	adds	r2, #32
 80028be:	2b1c      	cmp	r3, #28
 80028c0:	dc00      	bgt.n	80028c4 <__aeabi_dmul+0x4e8>
 80028c2:	e684      	b.n	80025ce <__aeabi_dmul+0x1f2>
 80028c4:	2300      	movs	r3, #0
 80028c6:	4699      	mov	r9, r3
 80028c8:	0023      	movs	r3, r4
 80028ca:	3808      	subs	r0, #8
 80028cc:	4083      	lsls	r3, r0
 80028ce:	469a      	mov	sl, r3
 80028d0:	e68e      	b.n	80025f0 <__aeabi_dmul+0x214>
 80028d2:	f000 fcd5 	bl	8003280 <__clzsi2>
 80028d6:	0002      	movs	r2, r0
 80028d8:	0003      	movs	r3, r0
 80028da:	3215      	adds	r2, #21
 80028dc:	3320      	adds	r3, #32
 80028de:	2a1c      	cmp	r2, #28
 80028e0:	dc00      	bgt.n	80028e4 <__aeabi_dmul+0x508>
 80028e2:	e64e      	b.n	8002582 <__aeabi_dmul+0x1a6>
 80028e4:	0002      	movs	r2, r0
 80028e6:	0034      	movs	r4, r6
 80028e8:	3a08      	subs	r2, #8
 80028ea:	2000      	movs	r0, #0
 80028ec:	4094      	lsls	r4, r2
 80028ee:	e652      	b.n	8002596 <__aeabi_dmul+0x1ba>
 80028f0:	9301      	str	r3, [sp, #4]
 80028f2:	e604      	b.n	80024fe <__aeabi_dmul+0x122>
 80028f4:	4b1c      	ldr	r3, [pc, #112]	@ (8002968 <__aeabi_dmul+0x58c>)
 80028f6:	0021      	movs	r1, r4
 80028f8:	469c      	mov	ip, r3
 80028fa:	0003      	movs	r3, r0
 80028fc:	9d01      	ldr	r5, [sp, #4]
 80028fe:	40d3      	lsrs	r3, r2
 8002900:	4465      	add	r5, ip
 8002902:	40a9      	lsls	r1, r5
 8002904:	4319      	orrs	r1, r3
 8002906:	0003      	movs	r3, r0
 8002908:	40ab      	lsls	r3, r5
 800290a:	1e58      	subs	r0, r3, #1
 800290c:	4183      	sbcs	r3, r0
 800290e:	4319      	orrs	r1, r3
 8002910:	0008      	movs	r0, r1
 8002912:	40d4      	lsrs	r4, r2
 8002914:	074b      	lsls	r3, r1, #29
 8002916:	d009      	beq.n	800292c <__aeabi_dmul+0x550>
 8002918:	230f      	movs	r3, #15
 800291a:	400b      	ands	r3, r1
 800291c:	2b04      	cmp	r3, #4
 800291e:	d005      	beq.n	800292c <__aeabi_dmul+0x550>
 8002920:	1d0b      	adds	r3, r1, #4
 8002922:	428b      	cmp	r3, r1
 8002924:	4180      	sbcs	r0, r0
 8002926:	4240      	negs	r0, r0
 8002928:	1824      	adds	r4, r4, r0
 800292a:	0018      	movs	r0, r3
 800292c:	0223      	lsls	r3, r4, #8
 800292e:	d400      	bmi.n	8002932 <__aeabi_dmul+0x556>
 8002930:	e6d6      	b.n	80026e0 <__aeabi_dmul+0x304>
 8002932:	2301      	movs	r3, #1
 8002934:	2400      	movs	r4, #0
 8002936:	2200      	movs	r2, #0
 8002938:	e5a6      	b.n	8002488 <__aeabi_dmul+0xac>
 800293a:	290f      	cmp	r1, #15
 800293c:	d1aa      	bne.n	8002894 <__aeabi_dmul+0x4b8>
 800293e:	2380      	movs	r3, #128	@ 0x80
 8002940:	4652      	mov	r2, sl
 8002942:	031b      	lsls	r3, r3, #12
 8002944:	421a      	tst	r2, r3
 8002946:	d0a9      	beq.n	800289c <__aeabi_dmul+0x4c0>
 8002948:	421c      	tst	r4, r3
 800294a:	d1a7      	bne.n	800289c <__aeabi_dmul+0x4c0>
 800294c:	431c      	orrs	r4, r3
 800294e:	9b00      	ldr	r3, [sp, #0]
 8002950:	0002      	movs	r2, r0
 8002952:	469b      	mov	fp, r3
 8002954:	4b03      	ldr	r3, [pc, #12]	@ (8002964 <__aeabi_dmul+0x588>)
 8002956:	e597      	b.n	8002488 <__aeabi_dmul+0xac>
 8002958:	2400      	movs	r4, #0
 800295a:	e6c1      	b.n	80026e0 <__aeabi_dmul+0x304>
 800295c:	2400      	movs	r4, #0
 800295e:	4b01      	ldr	r3, [pc, #4]	@ (8002964 <__aeabi_dmul+0x588>)
 8002960:	0022      	movs	r2, r4
 8002962:	e591      	b.n	8002488 <__aeabi_dmul+0xac>
 8002964:	000007ff 	.word	0x000007ff
 8002968:	0000041e 	.word	0x0000041e

0800296c <__aeabi_dsub>:
 800296c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800296e:	464e      	mov	r6, r9
 8002970:	4645      	mov	r5, r8
 8002972:	46de      	mov	lr, fp
 8002974:	4657      	mov	r7, sl
 8002976:	b5e0      	push	{r5, r6, r7, lr}
 8002978:	b085      	sub	sp, #20
 800297a:	9000      	str	r0, [sp, #0]
 800297c:	9101      	str	r1, [sp, #4]
 800297e:	030c      	lsls	r4, r1, #12
 8002980:	004f      	lsls	r7, r1, #1
 8002982:	0fce      	lsrs	r6, r1, #31
 8002984:	0a61      	lsrs	r1, r4, #9
 8002986:	9c00      	ldr	r4, [sp, #0]
 8002988:	46b0      	mov	r8, r6
 800298a:	0f64      	lsrs	r4, r4, #29
 800298c:	430c      	orrs	r4, r1
 800298e:	9900      	ldr	r1, [sp, #0]
 8002990:	0d7f      	lsrs	r7, r7, #21
 8002992:	00c8      	lsls	r0, r1, #3
 8002994:	0011      	movs	r1, r2
 8002996:	001a      	movs	r2, r3
 8002998:	031b      	lsls	r3, r3, #12
 800299a:	469c      	mov	ip, r3
 800299c:	9100      	str	r1, [sp, #0]
 800299e:	9201      	str	r2, [sp, #4]
 80029a0:	0051      	lsls	r1, r2, #1
 80029a2:	0d4b      	lsrs	r3, r1, #21
 80029a4:	4699      	mov	r9, r3
 80029a6:	9b01      	ldr	r3, [sp, #4]
 80029a8:	9d00      	ldr	r5, [sp, #0]
 80029aa:	0fd9      	lsrs	r1, r3, #31
 80029ac:	4663      	mov	r3, ip
 80029ae:	0f6a      	lsrs	r2, r5, #29
 80029b0:	0a5b      	lsrs	r3, r3, #9
 80029b2:	4313      	orrs	r3, r2
 80029b4:	00ea      	lsls	r2, r5, #3
 80029b6:	4694      	mov	ip, r2
 80029b8:	4693      	mov	fp, r2
 80029ba:	4ac1      	ldr	r2, [pc, #772]	@ (8002cc0 <__aeabi_dsub+0x354>)
 80029bc:	9003      	str	r0, [sp, #12]
 80029be:	9302      	str	r3, [sp, #8]
 80029c0:	4591      	cmp	r9, r2
 80029c2:	d100      	bne.n	80029c6 <__aeabi_dsub+0x5a>
 80029c4:	e0cd      	b.n	8002b62 <__aeabi_dsub+0x1f6>
 80029c6:	2501      	movs	r5, #1
 80029c8:	4069      	eors	r1, r5
 80029ca:	464d      	mov	r5, r9
 80029cc:	1b7d      	subs	r5, r7, r5
 80029ce:	46aa      	mov	sl, r5
 80029d0:	428e      	cmp	r6, r1
 80029d2:	d100      	bne.n	80029d6 <__aeabi_dsub+0x6a>
 80029d4:	e080      	b.n	8002ad8 <__aeabi_dsub+0x16c>
 80029d6:	2d00      	cmp	r5, #0
 80029d8:	dc00      	bgt.n	80029dc <__aeabi_dsub+0x70>
 80029da:	e335      	b.n	8003048 <__aeabi_dsub+0x6dc>
 80029dc:	4649      	mov	r1, r9
 80029de:	2900      	cmp	r1, #0
 80029e0:	d100      	bne.n	80029e4 <__aeabi_dsub+0x78>
 80029e2:	e0df      	b.n	8002ba4 <__aeabi_dsub+0x238>
 80029e4:	4297      	cmp	r7, r2
 80029e6:	d100      	bne.n	80029ea <__aeabi_dsub+0x7e>
 80029e8:	e194      	b.n	8002d14 <__aeabi_dsub+0x3a8>
 80029ea:	4652      	mov	r2, sl
 80029ec:	2501      	movs	r5, #1
 80029ee:	2a38      	cmp	r2, #56	@ 0x38
 80029f0:	dc19      	bgt.n	8002a26 <__aeabi_dsub+0xba>
 80029f2:	2280      	movs	r2, #128	@ 0x80
 80029f4:	9b02      	ldr	r3, [sp, #8]
 80029f6:	0412      	lsls	r2, r2, #16
 80029f8:	4313      	orrs	r3, r2
 80029fa:	9302      	str	r3, [sp, #8]
 80029fc:	4652      	mov	r2, sl
 80029fe:	2a1f      	cmp	r2, #31
 8002a00:	dd00      	ble.n	8002a04 <__aeabi_dsub+0x98>
 8002a02:	e1e3      	b.n	8002dcc <__aeabi_dsub+0x460>
 8002a04:	4653      	mov	r3, sl
 8002a06:	2220      	movs	r2, #32
 8002a08:	4661      	mov	r1, ip
 8002a0a:	9d02      	ldr	r5, [sp, #8]
 8002a0c:	1ad2      	subs	r2, r2, r3
 8002a0e:	4095      	lsls	r5, r2
 8002a10:	40d9      	lsrs	r1, r3
 8002a12:	430d      	orrs	r5, r1
 8002a14:	4661      	mov	r1, ip
 8002a16:	4091      	lsls	r1, r2
 8002a18:	000a      	movs	r2, r1
 8002a1a:	1e51      	subs	r1, r2, #1
 8002a1c:	418a      	sbcs	r2, r1
 8002a1e:	4315      	orrs	r5, r2
 8002a20:	9a02      	ldr	r2, [sp, #8]
 8002a22:	40da      	lsrs	r2, r3
 8002a24:	1aa4      	subs	r4, r4, r2
 8002a26:	1b45      	subs	r5, r0, r5
 8002a28:	42a8      	cmp	r0, r5
 8002a2a:	4180      	sbcs	r0, r0
 8002a2c:	4240      	negs	r0, r0
 8002a2e:	1a24      	subs	r4, r4, r0
 8002a30:	0223      	lsls	r3, r4, #8
 8002a32:	d400      	bmi.n	8002a36 <__aeabi_dsub+0xca>
 8002a34:	e13d      	b.n	8002cb2 <__aeabi_dsub+0x346>
 8002a36:	0264      	lsls	r4, r4, #9
 8002a38:	0a64      	lsrs	r4, r4, #9
 8002a3a:	2c00      	cmp	r4, #0
 8002a3c:	d100      	bne.n	8002a40 <__aeabi_dsub+0xd4>
 8002a3e:	e147      	b.n	8002cd0 <__aeabi_dsub+0x364>
 8002a40:	0020      	movs	r0, r4
 8002a42:	f000 fc1d 	bl	8003280 <__clzsi2>
 8002a46:	0003      	movs	r3, r0
 8002a48:	3b08      	subs	r3, #8
 8002a4a:	2120      	movs	r1, #32
 8002a4c:	0028      	movs	r0, r5
 8002a4e:	1aca      	subs	r2, r1, r3
 8002a50:	40d0      	lsrs	r0, r2
 8002a52:	409c      	lsls	r4, r3
 8002a54:	0002      	movs	r2, r0
 8002a56:	409d      	lsls	r5, r3
 8002a58:	4322      	orrs	r2, r4
 8002a5a:	429f      	cmp	r7, r3
 8002a5c:	dd00      	ble.n	8002a60 <__aeabi_dsub+0xf4>
 8002a5e:	e177      	b.n	8002d50 <__aeabi_dsub+0x3e4>
 8002a60:	1bd8      	subs	r0, r3, r7
 8002a62:	3001      	adds	r0, #1
 8002a64:	1a09      	subs	r1, r1, r0
 8002a66:	002c      	movs	r4, r5
 8002a68:	408d      	lsls	r5, r1
 8002a6a:	40c4      	lsrs	r4, r0
 8002a6c:	1e6b      	subs	r3, r5, #1
 8002a6e:	419d      	sbcs	r5, r3
 8002a70:	0013      	movs	r3, r2
 8002a72:	40c2      	lsrs	r2, r0
 8002a74:	408b      	lsls	r3, r1
 8002a76:	4325      	orrs	r5, r4
 8002a78:	2700      	movs	r7, #0
 8002a7a:	0014      	movs	r4, r2
 8002a7c:	431d      	orrs	r5, r3
 8002a7e:	076b      	lsls	r3, r5, #29
 8002a80:	d009      	beq.n	8002a96 <__aeabi_dsub+0x12a>
 8002a82:	230f      	movs	r3, #15
 8002a84:	402b      	ands	r3, r5
 8002a86:	2b04      	cmp	r3, #4
 8002a88:	d005      	beq.n	8002a96 <__aeabi_dsub+0x12a>
 8002a8a:	1d2b      	adds	r3, r5, #4
 8002a8c:	42ab      	cmp	r3, r5
 8002a8e:	41ad      	sbcs	r5, r5
 8002a90:	426d      	negs	r5, r5
 8002a92:	1964      	adds	r4, r4, r5
 8002a94:	001d      	movs	r5, r3
 8002a96:	0223      	lsls	r3, r4, #8
 8002a98:	d400      	bmi.n	8002a9c <__aeabi_dsub+0x130>
 8002a9a:	e140      	b.n	8002d1e <__aeabi_dsub+0x3b2>
 8002a9c:	4a88      	ldr	r2, [pc, #544]	@ (8002cc0 <__aeabi_dsub+0x354>)
 8002a9e:	3701      	adds	r7, #1
 8002aa0:	4297      	cmp	r7, r2
 8002aa2:	d100      	bne.n	8002aa6 <__aeabi_dsub+0x13a>
 8002aa4:	e101      	b.n	8002caa <__aeabi_dsub+0x33e>
 8002aa6:	2601      	movs	r6, #1
 8002aa8:	4643      	mov	r3, r8
 8002aaa:	4986      	ldr	r1, [pc, #536]	@ (8002cc4 <__aeabi_dsub+0x358>)
 8002aac:	08ed      	lsrs	r5, r5, #3
 8002aae:	4021      	ands	r1, r4
 8002ab0:	074a      	lsls	r2, r1, #29
 8002ab2:	432a      	orrs	r2, r5
 8002ab4:	057c      	lsls	r4, r7, #21
 8002ab6:	024d      	lsls	r5, r1, #9
 8002ab8:	0b2d      	lsrs	r5, r5, #12
 8002aba:	0d64      	lsrs	r4, r4, #21
 8002abc:	401e      	ands	r6, r3
 8002abe:	0524      	lsls	r4, r4, #20
 8002ac0:	432c      	orrs	r4, r5
 8002ac2:	07f6      	lsls	r6, r6, #31
 8002ac4:	4334      	orrs	r4, r6
 8002ac6:	0010      	movs	r0, r2
 8002ac8:	0021      	movs	r1, r4
 8002aca:	b005      	add	sp, #20
 8002acc:	bcf0      	pop	{r4, r5, r6, r7}
 8002ace:	46bb      	mov	fp, r7
 8002ad0:	46b2      	mov	sl, r6
 8002ad2:	46a9      	mov	r9, r5
 8002ad4:	46a0      	mov	r8, r4
 8002ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ad8:	2d00      	cmp	r5, #0
 8002ada:	dc00      	bgt.n	8002ade <__aeabi_dsub+0x172>
 8002adc:	e2d0      	b.n	8003080 <__aeabi_dsub+0x714>
 8002ade:	4649      	mov	r1, r9
 8002ae0:	2900      	cmp	r1, #0
 8002ae2:	d000      	beq.n	8002ae6 <__aeabi_dsub+0x17a>
 8002ae4:	e0d4      	b.n	8002c90 <__aeabi_dsub+0x324>
 8002ae6:	4661      	mov	r1, ip
 8002ae8:	9b02      	ldr	r3, [sp, #8]
 8002aea:	4319      	orrs	r1, r3
 8002aec:	d100      	bne.n	8002af0 <__aeabi_dsub+0x184>
 8002aee:	e12b      	b.n	8002d48 <__aeabi_dsub+0x3dc>
 8002af0:	1e69      	subs	r1, r5, #1
 8002af2:	2d01      	cmp	r5, #1
 8002af4:	d100      	bne.n	8002af8 <__aeabi_dsub+0x18c>
 8002af6:	e1d9      	b.n	8002eac <__aeabi_dsub+0x540>
 8002af8:	4295      	cmp	r5, r2
 8002afa:	d100      	bne.n	8002afe <__aeabi_dsub+0x192>
 8002afc:	e10a      	b.n	8002d14 <__aeabi_dsub+0x3a8>
 8002afe:	2501      	movs	r5, #1
 8002b00:	2938      	cmp	r1, #56	@ 0x38
 8002b02:	dc17      	bgt.n	8002b34 <__aeabi_dsub+0x1c8>
 8002b04:	468a      	mov	sl, r1
 8002b06:	4653      	mov	r3, sl
 8002b08:	2b1f      	cmp	r3, #31
 8002b0a:	dd00      	ble.n	8002b0e <__aeabi_dsub+0x1a2>
 8002b0c:	e1e7      	b.n	8002ede <__aeabi_dsub+0x572>
 8002b0e:	2220      	movs	r2, #32
 8002b10:	1ad2      	subs	r2, r2, r3
 8002b12:	9b02      	ldr	r3, [sp, #8]
 8002b14:	4661      	mov	r1, ip
 8002b16:	4093      	lsls	r3, r2
 8002b18:	001d      	movs	r5, r3
 8002b1a:	4653      	mov	r3, sl
 8002b1c:	40d9      	lsrs	r1, r3
 8002b1e:	4663      	mov	r3, ip
 8002b20:	4093      	lsls	r3, r2
 8002b22:	001a      	movs	r2, r3
 8002b24:	430d      	orrs	r5, r1
 8002b26:	1e51      	subs	r1, r2, #1
 8002b28:	418a      	sbcs	r2, r1
 8002b2a:	4653      	mov	r3, sl
 8002b2c:	4315      	orrs	r5, r2
 8002b2e:	9a02      	ldr	r2, [sp, #8]
 8002b30:	40da      	lsrs	r2, r3
 8002b32:	18a4      	adds	r4, r4, r2
 8002b34:	182d      	adds	r5, r5, r0
 8002b36:	4285      	cmp	r5, r0
 8002b38:	4180      	sbcs	r0, r0
 8002b3a:	4240      	negs	r0, r0
 8002b3c:	1824      	adds	r4, r4, r0
 8002b3e:	0223      	lsls	r3, r4, #8
 8002b40:	d400      	bmi.n	8002b44 <__aeabi_dsub+0x1d8>
 8002b42:	e0b6      	b.n	8002cb2 <__aeabi_dsub+0x346>
 8002b44:	4b5e      	ldr	r3, [pc, #376]	@ (8002cc0 <__aeabi_dsub+0x354>)
 8002b46:	3701      	adds	r7, #1
 8002b48:	429f      	cmp	r7, r3
 8002b4a:	d100      	bne.n	8002b4e <__aeabi_dsub+0x1e2>
 8002b4c:	e0ad      	b.n	8002caa <__aeabi_dsub+0x33e>
 8002b4e:	2101      	movs	r1, #1
 8002b50:	4b5c      	ldr	r3, [pc, #368]	@ (8002cc4 <__aeabi_dsub+0x358>)
 8002b52:	086a      	lsrs	r2, r5, #1
 8002b54:	401c      	ands	r4, r3
 8002b56:	4029      	ands	r1, r5
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	07e5      	lsls	r5, r4, #31
 8002b5c:	4315      	orrs	r5, r2
 8002b5e:	0864      	lsrs	r4, r4, #1
 8002b60:	e78d      	b.n	8002a7e <__aeabi_dsub+0x112>
 8002b62:	4a59      	ldr	r2, [pc, #356]	@ (8002cc8 <__aeabi_dsub+0x35c>)
 8002b64:	9b02      	ldr	r3, [sp, #8]
 8002b66:	4692      	mov	sl, r2
 8002b68:	4662      	mov	r2, ip
 8002b6a:	44ba      	add	sl, r7
 8002b6c:	431a      	orrs	r2, r3
 8002b6e:	d02c      	beq.n	8002bca <__aeabi_dsub+0x25e>
 8002b70:	428e      	cmp	r6, r1
 8002b72:	d02e      	beq.n	8002bd2 <__aeabi_dsub+0x266>
 8002b74:	4652      	mov	r2, sl
 8002b76:	2a00      	cmp	r2, #0
 8002b78:	d060      	beq.n	8002c3c <__aeabi_dsub+0x2d0>
 8002b7a:	2f00      	cmp	r7, #0
 8002b7c:	d100      	bne.n	8002b80 <__aeabi_dsub+0x214>
 8002b7e:	e0db      	b.n	8002d38 <__aeabi_dsub+0x3cc>
 8002b80:	4663      	mov	r3, ip
 8002b82:	000e      	movs	r6, r1
 8002b84:	9c02      	ldr	r4, [sp, #8]
 8002b86:	08d8      	lsrs	r0, r3, #3
 8002b88:	0762      	lsls	r2, r4, #29
 8002b8a:	4302      	orrs	r2, r0
 8002b8c:	08e4      	lsrs	r4, r4, #3
 8002b8e:	0013      	movs	r3, r2
 8002b90:	4323      	orrs	r3, r4
 8002b92:	d100      	bne.n	8002b96 <__aeabi_dsub+0x22a>
 8002b94:	e254      	b.n	8003040 <__aeabi_dsub+0x6d4>
 8002b96:	2580      	movs	r5, #128	@ 0x80
 8002b98:	032d      	lsls	r5, r5, #12
 8002b9a:	4325      	orrs	r5, r4
 8002b9c:	032d      	lsls	r5, r5, #12
 8002b9e:	4c48      	ldr	r4, [pc, #288]	@ (8002cc0 <__aeabi_dsub+0x354>)
 8002ba0:	0b2d      	lsrs	r5, r5, #12
 8002ba2:	e78c      	b.n	8002abe <__aeabi_dsub+0x152>
 8002ba4:	4661      	mov	r1, ip
 8002ba6:	9b02      	ldr	r3, [sp, #8]
 8002ba8:	4319      	orrs	r1, r3
 8002baa:	d100      	bne.n	8002bae <__aeabi_dsub+0x242>
 8002bac:	e0cc      	b.n	8002d48 <__aeabi_dsub+0x3dc>
 8002bae:	0029      	movs	r1, r5
 8002bb0:	3901      	subs	r1, #1
 8002bb2:	2d01      	cmp	r5, #1
 8002bb4:	d100      	bne.n	8002bb8 <__aeabi_dsub+0x24c>
 8002bb6:	e188      	b.n	8002eca <__aeabi_dsub+0x55e>
 8002bb8:	4295      	cmp	r5, r2
 8002bba:	d100      	bne.n	8002bbe <__aeabi_dsub+0x252>
 8002bbc:	e0aa      	b.n	8002d14 <__aeabi_dsub+0x3a8>
 8002bbe:	2501      	movs	r5, #1
 8002bc0:	2938      	cmp	r1, #56	@ 0x38
 8002bc2:	dd00      	ble.n	8002bc6 <__aeabi_dsub+0x25a>
 8002bc4:	e72f      	b.n	8002a26 <__aeabi_dsub+0xba>
 8002bc6:	468a      	mov	sl, r1
 8002bc8:	e718      	b.n	80029fc <__aeabi_dsub+0x90>
 8002bca:	2201      	movs	r2, #1
 8002bcc:	4051      	eors	r1, r2
 8002bce:	428e      	cmp	r6, r1
 8002bd0:	d1d0      	bne.n	8002b74 <__aeabi_dsub+0x208>
 8002bd2:	4653      	mov	r3, sl
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d100      	bne.n	8002bda <__aeabi_dsub+0x26e>
 8002bd8:	e0be      	b.n	8002d58 <__aeabi_dsub+0x3ec>
 8002bda:	2f00      	cmp	r7, #0
 8002bdc:	d000      	beq.n	8002be0 <__aeabi_dsub+0x274>
 8002bde:	e138      	b.n	8002e52 <__aeabi_dsub+0x4e6>
 8002be0:	46ca      	mov	sl, r9
 8002be2:	0022      	movs	r2, r4
 8002be4:	4302      	orrs	r2, r0
 8002be6:	d100      	bne.n	8002bea <__aeabi_dsub+0x27e>
 8002be8:	e1e2      	b.n	8002fb0 <__aeabi_dsub+0x644>
 8002bea:	4653      	mov	r3, sl
 8002bec:	1e59      	subs	r1, r3, #1
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d100      	bne.n	8002bf4 <__aeabi_dsub+0x288>
 8002bf2:	e20d      	b.n	8003010 <__aeabi_dsub+0x6a4>
 8002bf4:	4a32      	ldr	r2, [pc, #200]	@ (8002cc0 <__aeabi_dsub+0x354>)
 8002bf6:	4592      	cmp	sl, r2
 8002bf8:	d100      	bne.n	8002bfc <__aeabi_dsub+0x290>
 8002bfa:	e1d2      	b.n	8002fa2 <__aeabi_dsub+0x636>
 8002bfc:	2701      	movs	r7, #1
 8002bfe:	2938      	cmp	r1, #56	@ 0x38
 8002c00:	dc13      	bgt.n	8002c2a <__aeabi_dsub+0x2be>
 8002c02:	291f      	cmp	r1, #31
 8002c04:	dd00      	ble.n	8002c08 <__aeabi_dsub+0x29c>
 8002c06:	e1ee      	b.n	8002fe6 <__aeabi_dsub+0x67a>
 8002c08:	2220      	movs	r2, #32
 8002c0a:	9b02      	ldr	r3, [sp, #8]
 8002c0c:	1a52      	subs	r2, r2, r1
 8002c0e:	0025      	movs	r5, r4
 8002c10:	0007      	movs	r7, r0
 8002c12:	469a      	mov	sl, r3
 8002c14:	40cc      	lsrs	r4, r1
 8002c16:	4090      	lsls	r0, r2
 8002c18:	4095      	lsls	r5, r2
 8002c1a:	40cf      	lsrs	r7, r1
 8002c1c:	44a2      	add	sl, r4
 8002c1e:	1e42      	subs	r2, r0, #1
 8002c20:	4190      	sbcs	r0, r2
 8002c22:	4653      	mov	r3, sl
 8002c24:	432f      	orrs	r7, r5
 8002c26:	4307      	orrs	r7, r0
 8002c28:	9302      	str	r3, [sp, #8]
 8002c2a:	003d      	movs	r5, r7
 8002c2c:	4465      	add	r5, ip
 8002c2e:	4565      	cmp	r5, ip
 8002c30:	4192      	sbcs	r2, r2
 8002c32:	9b02      	ldr	r3, [sp, #8]
 8002c34:	4252      	negs	r2, r2
 8002c36:	464f      	mov	r7, r9
 8002c38:	18d4      	adds	r4, r2, r3
 8002c3a:	e780      	b.n	8002b3e <__aeabi_dsub+0x1d2>
 8002c3c:	4a23      	ldr	r2, [pc, #140]	@ (8002ccc <__aeabi_dsub+0x360>)
 8002c3e:	1c7d      	adds	r5, r7, #1
 8002c40:	4215      	tst	r5, r2
 8002c42:	d000      	beq.n	8002c46 <__aeabi_dsub+0x2da>
 8002c44:	e0aa      	b.n	8002d9c <__aeabi_dsub+0x430>
 8002c46:	4662      	mov	r2, ip
 8002c48:	0025      	movs	r5, r4
 8002c4a:	9b02      	ldr	r3, [sp, #8]
 8002c4c:	4305      	orrs	r5, r0
 8002c4e:	431a      	orrs	r2, r3
 8002c50:	2f00      	cmp	r7, #0
 8002c52:	d000      	beq.n	8002c56 <__aeabi_dsub+0x2ea>
 8002c54:	e0f5      	b.n	8002e42 <__aeabi_dsub+0x4d6>
 8002c56:	2d00      	cmp	r5, #0
 8002c58:	d100      	bne.n	8002c5c <__aeabi_dsub+0x2f0>
 8002c5a:	e16b      	b.n	8002f34 <__aeabi_dsub+0x5c8>
 8002c5c:	2a00      	cmp	r2, #0
 8002c5e:	d100      	bne.n	8002c62 <__aeabi_dsub+0x2f6>
 8002c60:	e152      	b.n	8002f08 <__aeabi_dsub+0x59c>
 8002c62:	4663      	mov	r3, ip
 8002c64:	1ac5      	subs	r5, r0, r3
 8002c66:	9b02      	ldr	r3, [sp, #8]
 8002c68:	1ae2      	subs	r2, r4, r3
 8002c6a:	42a8      	cmp	r0, r5
 8002c6c:	419b      	sbcs	r3, r3
 8002c6e:	425b      	negs	r3, r3
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	021a      	lsls	r2, r3, #8
 8002c74:	d400      	bmi.n	8002c78 <__aeabi_dsub+0x30c>
 8002c76:	e1d5      	b.n	8003024 <__aeabi_dsub+0x6b8>
 8002c78:	4663      	mov	r3, ip
 8002c7a:	1a1d      	subs	r5, r3, r0
 8002c7c:	45ac      	cmp	ip, r5
 8002c7e:	4192      	sbcs	r2, r2
 8002c80:	2601      	movs	r6, #1
 8002c82:	9b02      	ldr	r3, [sp, #8]
 8002c84:	4252      	negs	r2, r2
 8002c86:	1b1c      	subs	r4, r3, r4
 8002c88:	4688      	mov	r8, r1
 8002c8a:	1aa4      	subs	r4, r4, r2
 8002c8c:	400e      	ands	r6, r1
 8002c8e:	e6f6      	b.n	8002a7e <__aeabi_dsub+0x112>
 8002c90:	4297      	cmp	r7, r2
 8002c92:	d03f      	beq.n	8002d14 <__aeabi_dsub+0x3a8>
 8002c94:	4652      	mov	r2, sl
 8002c96:	2501      	movs	r5, #1
 8002c98:	2a38      	cmp	r2, #56	@ 0x38
 8002c9a:	dd00      	ble.n	8002c9e <__aeabi_dsub+0x332>
 8002c9c:	e74a      	b.n	8002b34 <__aeabi_dsub+0x1c8>
 8002c9e:	2280      	movs	r2, #128	@ 0x80
 8002ca0:	9b02      	ldr	r3, [sp, #8]
 8002ca2:	0412      	lsls	r2, r2, #16
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	9302      	str	r3, [sp, #8]
 8002ca8:	e72d      	b.n	8002b06 <__aeabi_dsub+0x19a>
 8002caa:	003c      	movs	r4, r7
 8002cac:	2500      	movs	r5, #0
 8002cae:	2200      	movs	r2, #0
 8002cb0:	e705      	b.n	8002abe <__aeabi_dsub+0x152>
 8002cb2:	2307      	movs	r3, #7
 8002cb4:	402b      	ands	r3, r5
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d000      	beq.n	8002cbc <__aeabi_dsub+0x350>
 8002cba:	e6e2      	b.n	8002a82 <__aeabi_dsub+0x116>
 8002cbc:	e06b      	b.n	8002d96 <__aeabi_dsub+0x42a>
 8002cbe:	46c0      	nop			@ (mov r8, r8)
 8002cc0:	000007ff 	.word	0x000007ff
 8002cc4:	ff7fffff 	.word	0xff7fffff
 8002cc8:	fffff801 	.word	0xfffff801
 8002ccc:	000007fe 	.word	0x000007fe
 8002cd0:	0028      	movs	r0, r5
 8002cd2:	f000 fad5 	bl	8003280 <__clzsi2>
 8002cd6:	0003      	movs	r3, r0
 8002cd8:	3318      	adds	r3, #24
 8002cda:	2b1f      	cmp	r3, #31
 8002cdc:	dc00      	bgt.n	8002ce0 <__aeabi_dsub+0x374>
 8002cde:	e6b4      	b.n	8002a4a <__aeabi_dsub+0xde>
 8002ce0:	002a      	movs	r2, r5
 8002ce2:	3808      	subs	r0, #8
 8002ce4:	4082      	lsls	r2, r0
 8002ce6:	429f      	cmp	r7, r3
 8002ce8:	dd00      	ble.n	8002cec <__aeabi_dsub+0x380>
 8002cea:	e0b9      	b.n	8002e60 <__aeabi_dsub+0x4f4>
 8002cec:	1bdb      	subs	r3, r3, r7
 8002cee:	1c58      	adds	r0, r3, #1
 8002cf0:	281f      	cmp	r0, #31
 8002cf2:	dc00      	bgt.n	8002cf6 <__aeabi_dsub+0x38a>
 8002cf4:	e1a0      	b.n	8003038 <__aeabi_dsub+0x6cc>
 8002cf6:	0015      	movs	r5, r2
 8002cf8:	3b1f      	subs	r3, #31
 8002cfa:	40dd      	lsrs	r5, r3
 8002cfc:	2820      	cmp	r0, #32
 8002cfe:	d005      	beq.n	8002d0c <__aeabi_dsub+0x3a0>
 8002d00:	2340      	movs	r3, #64	@ 0x40
 8002d02:	1a1b      	subs	r3, r3, r0
 8002d04:	409a      	lsls	r2, r3
 8002d06:	1e53      	subs	r3, r2, #1
 8002d08:	419a      	sbcs	r2, r3
 8002d0a:	4315      	orrs	r5, r2
 8002d0c:	2307      	movs	r3, #7
 8002d0e:	2700      	movs	r7, #0
 8002d10:	402b      	ands	r3, r5
 8002d12:	e7d0      	b.n	8002cb6 <__aeabi_dsub+0x34a>
 8002d14:	08c0      	lsrs	r0, r0, #3
 8002d16:	0762      	lsls	r2, r4, #29
 8002d18:	4302      	orrs	r2, r0
 8002d1a:	08e4      	lsrs	r4, r4, #3
 8002d1c:	e737      	b.n	8002b8e <__aeabi_dsub+0x222>
 8002d1e:	08ea      	lsrs	r2, r5, #3
 8002d20:	0763      	lsls	r3, r4, #29
 8002d22:	431a      	orrs	r2, r3
 8002d24:	4bd3      	ldr	r3, [pc, #844]	@ (8003074 <__aeabi_dsub+0x708>)
 8002d26:	08e4      	lsrs	r4, r4, #3
 8002d28:	429f      	cmp	r7, r3
 8002d2a:	d100      	bne.n	8002d2e <__aeabi_dsub+0x3c2>
 8002d2c:	e72f      	b.n	8002b8e <__aeabi_dsub+0x222>
 8002d2e:	0324      	lsls	r4, r4, #12
 8002d30:	0b25      	lsrs	r5, r4, #12
 8002d32:	057c      	lsls	r4, r7, #21
 8002d34:	0d64      	lsrs	r4, r4, #21
 8002d36:	e6c2      	b.n	8002abe <__aeabi_dsub+0x152>
 8002d38:	46ca      	mov	sl, r9
 8002d3a:	0022      	movs	r2, r4
 8002d3c:	4302      	orrs	r2, r0
 8002d3e:	d158      	bne.n	8002df2 <__aeabi_dsub+0x486>
 8002d40:	4663      	mov	r3, ip
 8002d42:	000e      	movs	r6, r1
 8002d44:	9c02      	ldr	r4, [sp, #8]
 8002d46:	9303      	str	r3, [sp, #12]
 8002d48:	9b03      	ldr	r3, [sp, #12]
 8002d4a:	4657      	mov	r7, sl
 8002d4c:	08da      	lsrs	r2, r3, #3
 8002d4e:	e7e7      	b.n	8002d20 <__aeabi_dsub+0x3b4>
 8002d50:	4cc9      	ldr	r4, [pc, #804]	@ (8003078 <__aeabi_dsub+0x70c>)
 8002d52:	1aff      	subs	r7, r7, r3
 8002d54:	4014      	ands	r4, r2
 8002d56:	e692      	b.n	8002a7e <__aeabi_dsub+0x112>
 8002d58:	4dc8      	ldr	r5, [pc, #800]	@ (800307c <__aeabi_dsub+0x710>)
 8002d5a:	1c7a      	adds	r2, r7, #1
 8002d5c:	422a      	tst	r2, r5
 8002d5e:	d000      	beq.n	8002d62 <__aeabi_dsub+0x3f6>
 8002d60:	e084      	b.n	8002e6c <__aeabi_dsub+0x500>
 8002d62:	0022      	movs	r2, r4
 8002d64:	4302      	orrs	r2, r0
 8002d66:	2f00      	cmp	r7, #0
 8002d68:	d000      	beq.n	8002d6c <__aeabi_dsub+0x400>
 8002d6a:	e0ef      	b.n	8002f4c <__aeabi_dsub+0x5e0>
 8002d6c:	2a00      	cmp	r2, #0
 8002d6e:	d100      	bne.n	8002d72 <__aeabi_dsub+0x406>
 8002d70:	e0e5      	b.n	8002f3e <__aeabi_dsub+0x5d2>
 8002d72:	4662      	mov	r2, ip
 8002d74:	9902      	ldr	r1, [sp, #8]
 8002d76:	430a      	orrs	r2, r1
 8002d78:	d100      	bne.n	8002d7c <__aeabi_dsub+0x410>
 8002d7a:	e0c5      	b.n	8002f08 <__aeabi_dsub+0x59c>
 8002d7c:	4663      	mov	r3, ip
 8002d7e:	18c5      	adds	r5, r0, r3
 8002d80:	468c      	mov	ip, r1
 8002d82:	4285      	cmp	r5, r0
 8002d84:	4180      	sbcs	r0, r0
 8002d86:	4464      	add	r4, ip
 8002d88:	4240      	negs	r0, r0
 8002d8a:	1824      	adds	r4, r4, r0
 8002d8c:	0223      	lsls	r3, r4, #8
 8002d8e:	d502      	bpl.n	8002d96 <__aeabi_dsub+0x42a>
 8002d90:	4bb9      	ldr	r3, [pc, #740]	@ (8003078 <__aeabi_dsub+0x70c>)
 8002d92:	3701      	adds	r7, #1
 8002d94:	401c      	ands	r4, r3
 8002d96:	46ba      	mov	sl, r7
 8002d98:	9503      	str	r5, [sp, #12]
 8002d9a:	e7d5      	b.n	8002d48 <__aeabi_dsub+0x3dc>
 8002d9c:	4662      	mov	r2, ip
 8002d9e:	1a85      	subs	r5, r0, r2
 8002da0:	42a8      	cmp	r0, r5
 8002da2:	4192      	sbcs	r2, r2
 8002da4:	4252      	negs	r2, r2
 8002da6:	4691      	mov	r9, r2
 8002da8:	9b02      	ldr	r3, [sp, #8]
 8002daa:	1ae3      	subs	r3, r4, r3
 8002dac:	001a      	movs	r2, r3
 8002dae:	464b      	mov	r3, r9
 8002db0:	1ad2      	subs	r2, r2, r3
 8002db2:	0013      	movs	r3, r2
 8002db4:	4691      	mov	r9, r2
 8002db6:	021a      	lsls	r2, r3, #8
 8002db8:	d46c      	bmi.n	8002e94 <__aeabi_dsub+0x528>
 8002dba:	464a      	mov	r2, r9
 8002dbc:	464c      	mov	r4, r9
 8002dbe:	432a      	orrs	r2, r5
 8002dc0:	d000      	beq.n	8002dc4 <__aeabi_dsub+0x458>
 8002dc2:	e63a      	b.n	8002a3a <__aeabi_dsub+0xce>
 8002dc4:	2600      	movs	r6, #0
 8002dc6:	2400      	movs	r4, #0
 8002dc8:	2500      	movs	r5, #0
 8002dca:	e678      	b.n	8002abe <__aeabi_dsub+0x152>
 8002dcc:	9902      	ldr	r1, [sp, #8]
 8002dce:	4653      	mov	r3, sl
 8002dd0:	000d      	movs	r5, r1
 8002dd2:	3a20      	subs	r2, #32
 8002dd4:	40d5      	lsrs	r5, r2
 8002dd6:	2b20      	cmp	r3, #32
 8002dd8:	d006      	beq.n	8002de8 <__aeabi_dsub+0x47c>
 8002dda:	2240      	movs	r2, #64	@ 0x40
 8002ddc:	1ad2      	subs	r2, r2, r3
 8002dde:	000b      	movs	r3, r1
 8002de0:	4093      	lsls	r3, r2
 8002de2:	4662      	mov	r2, ip
 8002de4:	431a      	orrs	r2, r3
 8002de6:	4693      	mov	fp, r2
 8002de8:	465b      	mov	r3, fp
 8002dea:	1e5a      	subs	r2, r3, #1
 8002dec:	4193      	sbcs	r3, r2
 8002dee:	431d      	orrs	r5, r3
 8002df0:	e619      	b.n	8002a26 <__aeabi_dsub+0xba>
 8002df2:	4653      	mov	r3, sl
 8002df4:	1e5a      	subs	r2, r3, #1
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d100      	bne.n	8002dfc <__aeabi_dsub+0x490>
 8002dfa:	e0c6      	b.n	8002f8a <__aeabi_dsub+0x61e>
 8002dfc:	4e9d      	ldr	r6, [pc, #628]	@ (8003074 <__aeabi_dsub+0x708>)
 8002dfe:	45b2      	cmp	sl, r6
 8002e00:	d100      	bne.n	8002e04 <__aeabi_dsub+0x498>
 8002e02:	e6bd      	b.n	8002b80 <__aeabi_dsub+0x214>
 8002e04:	4688      	mov	r8, r1
 8002e06:	000e      	movs	r6, r1
 8002e08:	2501      	movs	r5, #1
 8002e0a:	2a38      	cmp	r2, #56	@ 0x38
 8002e0c:	dc10      	bgt.n	8002e30 <__aeabi_dsub+0x4c4>
 8002e0e:	2a1f      	cmp	r2, #31
 8002e10:	dc7f      	bgt.n	8002f12 <__aeabi_dsub+0x5a6>
 8002e12:	2120      	movs	r1, #32
 8002e14:	0025      	movs	r5, r4
 8002e16:	1a89      	subs	r1, r1, r2
 8002e18:	0007      	movs	r7, r0
 8002e1a:	4088      	lsls	r0, r1
 8002e1c:	408d      	lsls	r5, r1
 8002e1e:	40d7      	lsrs	r7, r2
 8002e20:	40d4      	lsrs	r4, r2
 8002e22:	1e41      	subs	r1, r0, #1
 8002e24:	4188      	sbcs	r0, r1
 8002e26:	9b02      	ldr	r3, [sp, #8]
 8002e28:	433d      	orrs	r5, r7
 8002e2a:	1b1b      	subs	r3, r3, r4
 8002e2c:	4305      	orrs	r5, r0
 8002e2e:	9302      	str	r3, [sp, #8]
 8002e30:	4662      	mov	r2, ip
 8002e32:	1b55      	subs	r5, r2, r5
 8002e34:	45ac      	cmp	ip, r5
 8002e36:	4192      	sbcs	r2, r2
 8002e38:	9b02      	ldr	r3, [sp, #8]
 8002e3a:	4252      	negs	r2, r2
 8002e3c:	464f      	mov	r7, r9
 8002e3e:	1a9c      	subs	r4, r3, r2
 8002e40:	e5f6      	b.n	8002a30 <__aeabi_dsub+0xc4>
 8002e42:	2d00      	cmp	r5, #0
 8002e44:	d000      	beq.n	8002e48 <__aeabi_dsub+0x4dc>
 8002e46:	e0b7      	b.n	8002fb8 <__aeabi_dsub+0x64c>
 8002e48:	2a00      	cmp	r2, #0
 8002e4a:	d100      	bne.n	8002e4e <__aeabi_dsub+0x4e2>
 8002e4c:	e0f0      	b.n	8003030 <__aeabi_dsub+0x6c4>
 8002e4e:	2601      	movs	r6, #1
 8002e50:	400e      	ands	r6, r1
 8002e52:	4663      	mov	r3, ip
 8002e54:	9802      	ldr	r0, [sp, #8]
 8002e56:	08d9      	lsrs	r1, r3, #3
 8002e58:	0742      	lsls	r2, r0, #29
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	08c4      	lsrs	r4, r0, #3
 8002e5e:	e696      	b.n	8002b8e <__aeabi_dsub+0x222>
 8002e60:	4c85      	ldr	r4, [pc, #532]	@ (8003078 <__aeabi_dsub+0x70c>)
 8002e62:	1aff      	subs	r7, r7, r3
 8002e64:	4014      	ands	r4, r2
 8002e66:	0762      	lsls	r2, r4, #29
 8002e68:	08e4      	lsrs	r4, r4, #3
 8002e6a:	e760      	b.n	8002d2e <__aeabi_dsub+0x3c2>
 8002e6c:	4981      	ldr	r1, [pc, #516]	@ (8003074 <__aeabi_dsub+0x708>)
 8002e6e:	428a      	cmp	r2, r1
 8002e70:	d100      	bne.n	8002e74 <__aeabi_dsub+0x508>
 8002e72:	e0c9      	b.n	8003008 <__aeabi_dsub+0x69c>
 8002e74:	4663      	mov	r3, ip
 8002e76:	18c1      	adds	r1, r0, r3
 8002e78:	4281      	cmp	r1, r0
 8002e7a:	4180      	sbcs	r0, r0
 8002e7c:	9b02      	ldr	r3, [sp, #8]
 8002e7e:	4240      	negs	r0, r0
 8002e80:	18e3      	adds	r3, r4, r3
 8002e82:	181b      	adds	r3, r3, r0
 8002e84:	07dd      	lsls	r5, r3, #31
 8002e86:	085c      	lsrs	r4, r3, #1
 8002e88:	2307      	movs	r3, #7
 8002e8a:	0849      	lsrs	r1, r1, #1
 8002e8c:	430d      	orrs	r5, r1
 8002e8e:	0017      	movs	r7, r2
 8002e90:	402b      	ands	r3, r5
 8002e92:	e710      	b.n	8002cb6 <__aeabi_dsub+0x34a>
 8002e94:	4663      	mov	r3, ip
 8002e96:	1a1d      	subs	r5, r3, r0
 8002e98:	45ac      	cmp	ip, r5
 8002e9a:	4192      	sbcs	r2, r2
 8002e9c:	2601      	movs	r6, #1
 8002e9e:	9b02      	ldr	r3, [sp, #8]
 8002ea0:	4252      	negs	r2, r2
 8002ea2:	1b1c      	subs	r4, r3, r4
 8002ea4:	4688      	mov	r8, r1
 8002ea6:	1aa4      	subs	r4, r4, r2
 8002ea8:	400e      	ands	r6, r1
 8002eaa:	e5c6      	b.n	8002a3a <__aeabi_dsub+0xce>
 8002eac:	4663      	mov	r3, ip
 8002eae:	18c5      	adds	r5, r0, r3
 8002eb0:	9b02      	ldr	r3, [sp, #8]
 8002eb2:	4285      	cmp	r5, r0
 8002eb4:	4180      	sbcs	r0, r0
 8002eb6:	469c      	mov	ip, r3
 8002eb8:	4240      	negs	r0, r0
 8002eba:	4464      	add	r4, ip
 8002ebc:	1824      	adds	r4, r4, r0
 8002ebe:	2701      	movs	r7, #1
 8002ec0:	0223      	lsls	r3, r4, #8
 8002ec2:	d400      	bmi.n	8002ec6 <__aeabi_dsub+0x55a>
 8002ec4:	e6f5      	b.n	8002cb2 <__aeabi_dsub+0x346>
 8002ec6:	2702      	movs	r7, #2
 8002ec8:	e641      	b.n	8002b4e <__aeabi_dsub+0x1e2>
 8002eca:	4663      	mov	r3, ip
 8002ecc:	1ac5      	subs	r5, r0, r3
 8002ece:	42a8      	cmp	r0, r5
 8002ed0:	4180      	sbcs	r0, r0
 8002ed2:	9b02      	ldr	r3, [sp, #8]
 8002ed4:	4240      	negs	r0, r0
 8002ed6:	1ae4      	subs	r4, r4, r3
 8002ed8:	2701      	movs	r7, #1
 8002eda:	1a24      	subs	r4, r4, r0
 8002edc:	e5a8      	b.n	8002a30 <__aeabi_dsub+0xc4>
 8002ede:	9d02      	ldr	r5, [sp, #8]
 8002ee0:	4652      	mov	r2, sl
 8002ee2:	002b      	movs	r3, r5
 8002ee4:	3a20      	subs	r2, #32
 8002ee6:	40d3      	lsrs	r3, r2
 8002ee8:	0019      	movs	r1, r3
 8002eea:	4653      	mov	r3, sl
 8002eec:	2b20      	cmp	r3, #32
 8002eee:	d006      	beq.n	8002efe <__aeabi_dsub+0x592>
 8002ef0:	2240      	movs	r2, #64	@ 0x40
 8002ef2:	1ad2      	subs	r2, r2, r3
 8002ef4:	002b      	movs	r3, r5
 8002ef6:	4093      	lsls	r3, r2
 8002ef8:	4662      	mov	r2, ip
 8002efa:	431a      	orrs	r2, r3
 8002efc:	4693      	mov	fp, r2
 8002efe:	465d      	mov	r5, fp
 8002f00:	1e6b      	subs	r3, r5, #1
 8002f02:	419d      	sbcs	r5, r3
 8002f04:	430d      	orrs	r5, r1
 8002f06:	e615      	b.n	8002b34 <__aeabi_dsub+0x1c8>
 8002f08:	0762      	lsls	r2, r4, #29
 8002f0a:	08c0      	lsrs	r0, r0, #3
 8002f0c:	4302      	orrs	r2, r0
 8002f0e:	08e4      	lsrs	r4, r4, #3
 8002f10:	e70d      	b.n	8002d2e <__aeabi_dsub+0x3c2>
 8002f12:	0011      	movs	r1, r2
 8002f14:	0027      	movs	r7, r4
 8002f16:	3920      	subs	r1, #32
 8002f18:	40cf      	lsrs	r7, r1
 8002f1a:	2a20      	cmp	r2, #32
 8002f1c:	d005      	beq.n	8002f2a <__aeabi_dsub+0x5be>
 8002f1e:	2140      	movs	r1, #64	@ 0x40
 8002f20:	1a8a      	subs	r2, r1, r2
 8002f22:	4094      	lsls	r4, r2
 8002f24:	0025      	movs	r5, r4
 8002f26:	4305      	orrs	r5, r0
 8002f28:	9503      	str	r5, [sp, #12]
 8002f2a:	9d03      	ldr	r5, [sp, #12]
 8002f2c:	1e6a      	subs	r2, r5, #1
 8002f2e:	4195      	sbcs	r5, r2
 8002f30:	433d      	orrs	r5, r7
 8002f32:	e77d      	b.n	8002e30 <__aeabi_dsub+0x4c4>
 8002f34:	2a00      	cmp	r2, #0
 8002f36:	d100      	bne.n	8002f3a <__aeabi_dsub+0x5ce>
 8002f38:	e744      	b.n	8002dc4 <__aeabi_dsub+0x458>
 8002f3a:	2601      	movs	r6, #1
 8002f3c:	400e      	ands	r6, r1
 8002f3e:	4663      	mov	r3, ip
 8002f40:	08d9      	lsrs	r1, r3, #3
 8002f42:	9b02      	ldr	r3, [sp, #8]
 8002f44:	075a      	lsls	r2, r3, #29
 8002f46:	430a      	orrs	r2, r1
 8002f48:	08dc      	lsrs	r4, r3, #3
 8002f4a:	e6f0      	b.n	8002d2e <__aeabi_dsub+0x3c2>
 8002f4c:	2a00      	cmp	r2, #0
 8002f4e:	d028      	beq.n	8002fa2 <__aeabi_dsub+0x636>
 8002f50:	4662      	mov	r2, ip
 8002f52:	9f02      	ldr	r7, [sp, #8]
 8002f54:	08c0      	lsrs	r0, r0, #3
 8002f56:	433a      	orrs	r2, r7
 8002f58:	d100      	bne.n	8002f5c <__aeabi_dsub+0x5f0>
 8002f5a:	e6dc      	b.n	8002d16 <__aeabi_dsub+0x3aa>
 8002f5c:	0762      	lsls	r2, r4, #29
 8002f5e:	4310      	orrs	r0, r2
 8002f60:	2280      	movs	r2, #128	@ 0x80
 8002f62:	08e4      	lsrs	r4, r4, #3
 8002f64:	0312      	lsls	r2, r2, #12
 8002f66:	4214      	tst	r4, r2
 8002f68:	d009      	beq.n	8002f7e <__aeabi_dsub+0x612>
 8002f6a:	08fd      	lsrs	r5, r7, #3
 8002f6c:	4215      	tst	r5, r2
 8002f6e:	d106      	bne.n	8002f7e <__aeabi_dsub+0x612>
 8002f70:	4663      	mov	r3, ip
 8002f72:	2601      	movs	r6, #1
 8002f74:	002c      	movs	r4, r5
 8002f76:	08d8      	lsrs	r0, r3, #3
 8002f78:	077b      	lsls	r3, r7, #29
 8002f7a:	4318      	orrs	r0, r3
 8002f7c:	400e      	ands	r6, r1
 8002f7e:	0f42      	lsrs	r2, r0, #29
 8002f80:	00c0      	lsls	r0, r0, #3
 8002f82:	08c0      	lsrs	r0, r0, #3
 8002f84:	0752      	lsls	r2, r2, #29
 8002f86:	4302      	orrs	r2, r0
 8002f88:	e601      	b.n	8002b8e <__aeabi_dsub+0x222>
 8002f8a:	4663      	mov	r3, ip
 8002f8c:	1a1d      	subs	r5, r3, r0
 8002f8e:	45ac      	cmp	ip, r5
 8002f90:	4192      	sbcs	r2, r2
 8002f92:	9b02      	ldr	r3, [sp, #8]
 8002f94:	4252      	negs	r2, r2
 8002f96:	1b1c      	subs	r4, r3, r4
 8002f98:	000e      	movs	r6, r1
 8002f9a:	4688      	mov	r8, r1
 8002f9c:	2701      	movs	r7, #1
 8002f9e:	1aa4      	subs	r4, r4, r2
 8002fa0:	e546      	b.n	8002a30 <__aeabi_dsub+0xc4>
 8002fa2:	4663      	mov	r3, ip
 8002fa4:	08d9      	lsrs	r1, r3, #3
 8002fa6:	9b02      	ldr	r3, [sp, #8]
 8002fa8:	075a      	lsls	r2, r3, #29
 8002faa:	430a      	orrs	r2, r1
 8002fac:	08dc      	lsrs	r4, r3, #3
 8002fae:	e5ee      	b.n	8002b8e <__aeabi_dsub+0x222>
 8002fb0:	4663      	mov	r3, ip
 8002fb2:	9c02      	ldr	r4, [sp, #8]
 8002fb4:	9303      	str	r3, [sp, #12]
 8002fb6:	e6c7      	b.n	8002d48 <__aeabi_dsub+0x3dc>
 8002fb8:	08c0      	lsrs	r0, r0, #3
 8002fba:	2a00      	cmp	r2, #0
 8002fbc:	d100      	bne.n	8002fc0 <__aeabi_dsub+0x654>
 8002fbe:	e6aa      	b.n	8002d16 <__aeabi_dsub+0x3aa>
 8002fc0:	0762      	lsls	r2, r4, #29
 8002fc2:	4310      	orrs	r0, r2
 8002fc4:	2280      	movs	r2, #128	@ 0x80
 8002fc6:	08e4      	lsrs	r4, r4, #3
 8002fc8:	0312      	lsls	r2, r2, #12
 8002fca:	4214      	tst	r4, r2
 8002fcc:	d0d7      	beq.n	8002f7e <__aeabi_dsub+0x612>
 8002fce:	9f02      	ldr	r7, [sp, #8]
 8002fd0:	08fd      	lsrs	r5, r7, #3
 8002fd2:	4215      	tst	r5, r2
 8002fd4:	d1d3      	bne.n	8002f7e <__aeabi_dsub+0x612>
 8002fd6:	4663      	mov	r3, ip
 8002fd8:	2601      	movs	r6, #1
 8002fda:	08d8      	lsrs	r0, r3, #3
 8002fdc:	077b      	lsls	r3, r7, #29
 8002fde:	002c      	movs	r4, r5
 8002fe0:	4318      	orrs	r0, r3
 8002fe2:	400e      	ands	r6, r1
 8002fe4:	e7cb      	b.n	8002f7e <__aeabi_dsub+0x612>
 8002fe6:	000a      	movs	r2, r1
 8002fe8:	0027      	movs	r7, r4
 8002fea:	3a20      	subs	r2, #32
 8002fec:	40d7      	lsrs	r7, r2
 8002fee:	2920      	cmp	r1, #32
 8002ff0:	d005      	beq.n	8002ffe <__aeabi_dsub+0x692>
 8002ff2:	2240      	movs	r2, #64	@ 0x40
 8002ff4:	1a52      	subs	r2, r2, r1
 8002ff6:	4094      	lsls	r4, r2
 8002ff8:	0025      	movs	r5, r4
 8002ffa:	4305      	orrs	r5, r0
 8002ffc:	9503      	str	r5, [sp, #12]
 8002ffe:	9d03      	ldr	r5, [sp, #12]
 8003000:	1e6a      	subs	r2, r5, #1
 8003002:	4195      	sbcs	r5, r2
 8003004:	432f      	orrs	r7, r5
 8003006:	e610      	b.n	8002c2a <__aeabi_dsub+0x2be>
 8003008:	0014      	movs	r4, r2
 800300a:	2500      	movs	r5, #0
 800300c:	2200      	movs	r2, #0
 800300e:	e556      	b.n	8002abe <__aeabi_dsub+0x152>
 8003010:	9b02      	ldr	r3, [sp, #8]
 8003012:	4460      	add	r0, ip
 8003014:	4699      	mov	r9, r3
 8003016:	4560      	cmp	r0, ip
 8003018:	4192      	sbcs	r2, r2
 800301a:	444c      	add	r4, r9
 800301c:	4252      	negs	r2, r2
 800301e:	0005      	movs	r5, r0
 8003020:	18a4      	adds	r4, r4, r2
 8003022:	e74c      	b.n	8002ebe <__aeabi_dsub+0x552>
 8003024:	001a      	movs	r2, r3
 8003026:	001c      	movs	r4, r3
 8003028:	432a      	orrs	r2, r5
 800302a:	d000      	beq.n	800302e <__aeabi_dsub+0x6c2>
 800302c:	e6b3      	b.n	8002d96 <__aeabi_dsub+0x42a>
 800302e:	e6c9      	b.n	8002dc4 <__aeabi_dsub+0x458>
 8003030:	2480      	movs	r4, #128	@ 0x80
 8003032:	2600      	movs	r6, #0
 8003034:	0324      	lsls	r4, r4, #12
 8003036:	e5ae      	b.n	8002b96 <__aeabi_dsub+0x22a>
 8003038:	2120      	movs	r1, #32
 800303a:	2500      	movs	r5, #0
 800303c:	1a09      	subs	r1, r1, r0
 800303e:	e517      	b.n	8002a70 <__aeabi_dsub+0x104>
 8003040:	2200      	movs	r2, #0
 8003042:	2500      	movs	r5, #0
 8003044:	4c0b      	ldr	r4, [pc, #44]	@ (8003074 <__aeabi_dsub+0x708>)
 8003046:	e53a      	b.n	8002abe <__aeabi_dsub+0x152>
 8003048:	2d00      	cmp	r5, #0
 800304a:	d100      	bne.n	800304e <__aeabi_dsub+0x6e2>
 800304c:	e5f6      	b.n	8002c3c <__aeabi_dsub+0x2d0>
 800304e:	464b      	mov	r3, r9
 8003050:	1bda      	subs	r2, r3, r7
 8003052:	4692      	mov	sl, r2
 8003054:	2f00      	cmp	r7, #0
 8003056:	d100      	bne.n	800305a <__aeabi_dsub+0x6ee>
 8003058:	e66f      	b.n	8002d3a <__aeabi_dsub+0x3ce>
 800305a:	2a38      	cmp	r2, #56	@ 0x38
 800305c:	dc05      	bgt.n	800306a <__aeabi_dsub+0x6fe>
 800305e:	2680      	movs	r6, #128	@ 0x80
 8003060:	0436      	lsls	r6, r6, #16
 8003062:	4334      	orrs	r4, r6
 8003064:	4688      	mov	r8, r1
 8003066:	000e      	movs	r6, r1
 8003068:	e6d1      	b.n	8002e0e <__aeabi_dsub+0x4a2>
 800306a:	4688      	mov	r8, r1
 800306c:	000e      	movs	r6, r1
 800306e:	2501      	movs	r5, #1
 8003070:	e6de      	b.n	8002e30 <__aeabi_dsub+0x4c4>
 8003072:	46c0      	nop			@ (mov r8, r8)
 8003074:	000007ff 	.word	0x000007ff
 8003078:	ff7fffff 	.word	0xff7fffff
 800307c:	000007fe 	.word	0x000007fe
 8003080:	2d00      	cmp	r5, #0
 8003082:	d100      	bne.n	8003086 <__aeabi_dsub+0x71a>
 8003084:	e668      	b.n	8002d58 <__aeabi_dsub+0x3ec>
 8003086:	464b      	mov	r3, r9
 8003088:	1bd9      	subs	r1, r3, r7
 800308a:	2f00      	cmp	r7, #0
 800308c:	d101      	bne.n	8003092 <__aeabi_dsub+0x726>
 800308e:	468a      	mov	sl, r1
 8003090:	e5a7      	b.n	8002be2 <__aeabi_dsub+0x276>
 8003092:	2701      	movs	r7, #1
 8003094:	2938      	cmp	r1, #56	@ 0x38
 8003096:	dd00      	ble.n	800309a <__aeabi_dsub+0x72e>
 8003098:	e5c7      	b.n	8002c2a <__aeabi_dsub+0x2be>
 800309a:	2280      	movs	r2, #128	@ 0x80
 800309c:	0412      	lsls	r2, r2, #16
 800309e:	4314      	orrs	r4, r2
 80030a0:	e5af      	b.n	8002c02 <__aeabi_dsub+0x296>
 80030a2:	46c0      	nop			@ (mov r8, r8)

080030a4 <__aeabi_dcmpun>:
 80030a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030a6:	46c6      	mov	lr, r8
 80030a8:	031e      	lsls	r6, r3, #12
 80030aa:	0b36      	lsrs	r6, r6, #12
 80030ac:	46b0      	mov	r8, r6
 80030ae:	4e0d      	ldr	r6, [pc, #52]	@ (80030e4 <__aeabi_dcmpun+0x40>)
 80030b0:	030c      	lsls	r4, r1, #12
 80030b2:	004d      	lsls	r5, r1, #1
 80030b4:	005f      	lsls	r7, r3, #1
 80030b6:	b500      	push	{lr}
 80030b8:	0b24      	lsrs	r4, r4, #12
 80030ba:	0d6d      	lsrs	r5, r5, #21
 80030bc:	0d7f      	lsrs	r7, r7, #21
 80030be:	42b5      	cmp	r5, r6
 80030c0:	d00b      	beq.n	80030da <__aeabi_dcmpun+0x36>
 80030c2:	4908      	ldr	r1, [pc, #32]	@ (80030e4 <__aeabi_dcmpun+0x40>)
 80030c4:	2000      	movs	r0, #0
 80030c6:	428f      	cmp	r7, r1
 80030c8:	d104      	bne.n	80030d4 <__aeabi_dcmpun+0x30>
 80030ca:	4646      	mov	r6, r8
 80030cc:	4316      	orrs	r6, r2
 80030ce:	0030      	movs	r0, r6
 80030d0:	1e43      	subs	r3, r0, #1
 80030d2:	4198      	sbcs	r0, r3
 80030d4:	bc80      	pop	{r7}
 80030d6:	46b8      	mov	r8, r7
 80030d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030da:	4304      	orrs	r4, r0
 80030dc:	2001      	movs	r0, #1
 80030de:	2c00      	cmp	r4, #0
 80030e0:	d1f8      	bne.n	80030d4 <__aeabi_dcmpun+0x30>
 80030e2:	e7ee      	b.n	80030c2 <__aeabi_dcmpun+0x1e>
 80030e4:	000007ff 	.word	0x000007ff

080030e8 <__aeabi_f2d>:
 80030e8:	b570      	push	{r4, r5, r6, lr}
 80030ea:	0242      	lsls	r2, r0, #9
 80030ec:	0043      	lsls	r3, r0, #1
 80030ee:	0fc4      	lsrs	r4, r0, #31
 80030f0:	20fe      	movs	r0, #254	@ 0xfe
 80030f2:	0e1b      	lsrs	r3, r3, #24
 80030f4:	1c59      	adds	r1, r3, #1
 80030f6:	0a55      	lsrs	r5, r2, #9
 80030f8:	4208      	tst	r0, r1
 80030fa:	d00c      	beq.n	8003116 <__aeabi_f2d+0x2e>
 80030fc:	21e0      	movs	r1, #224	@ 0xe0
 80030fe:	0089      	lsls	r1, r1, #2
 8003100:	468c      	mov	ip, r1
 8003102:	076d      	lsls	r5, r5, #29
 8003104:	0b12      	lsrs	r2, r2, #12
 8003106:	4463      	add	r3, ip
 8003108:	051b      	lsls	r3, r3, #20
 800310a:	4313      	orrs	r3, r2
 800310c:	07e4      	lsls	r4, r4, #31
 800310e:	4323      	orrs	r3, r4
 8003110:	0028      	movs	r0, r5
 8003112:	0019      	movs	r1, r3
 8003114:	bd70      	pop	{r4, r5, r6, pc}
 8003116:	2b00      	cmp	r3, #0
 8003118:	d114      	bne.n	8003144 <__aeabi_f2d+0x5c>
 800311a:	2d00      	cmp	r5, #0
 800311c:	d01b      	beq.n	8003156 <__aeabi_f2d+0x6e>
 800311e:	0028      	movs	r0, r5
 8003120:	f000 f8ae 	bl	8003280 <__clzsi2>
 8003124:	280a      	cmp	r0, #10
 8003126:	dc1c      	bgt.n	8003162 <__aeabi_f2d+0x7a>
 8003128:	230b      	movs	r3, #11
 800312a:	002a      	movs	r2, r5
 800312c:	1a1b      	subs	r3, r3, r0
 800312e:	40da      	lsrs	r2, r3
 8003130:	0003      	movs	r3, r0
 8003132:	3315      	adds	r3, #21
 8003134:	409d      	lsls	r5, r3
 8003136:	4b0e      	ldr	r3, [pc, #56]	@ (8003170 <__aeabi_f2d+0x88>)
 8003138:	0312      	lsls	r2, r2, #12
 800313a:	1a1b      	subs	r3, r3, r0
 800313c:	055b      	lsls	r3, r3, #21
 800313e:	0b12      	lsrs	r2, r2, #12
 8003140:	0d5b      	lsrs	r3, r3, #21
 8003142:	e7e1      	b.n	8003108 <__aeabi_f2d+0x20>
 8003144:	2d00      	cmp	r5, #0
 8003146:	d009      	beq.n	800315c <__aeabi_f2d+0x74>
 8003148:	0b13      	lsrs	r3, r2, #12
 800314a:	2280      	movs	r2, #128	@ 0x80
 800314c:	0312      	lsls	r2, r2, #12
 800314e:	431a      	orrs	r2, r3
 8003150:	076d      	lsls	r5, r5, #29
 8003152:	4b08      	ldr	r3, [pc, #32]	@ (8003174 <__aeabi_f2d+0x8c>)
 8003154:	e7d8      	b.n	8003108 <__aeabi_f2d+0x20>
 8003156:	2300      	movs	r3, #0
 8003158:	2200      	movs	r2, #0
 800315a:	e7d5      	b.n	8003108 <__aeabi_f2d+0x20>
 800315c:	2200      	movs	r2, #0
 800315e:	4b05      	ldr	r3, [pc, #20]	@ (8003174 <__aeabi_f2d+0x8c>)
 8003160:	e7d2      	b.n	8003108 <__aeabi_f2d+0x20>
 8003162:	0003      	movs	r3, r0
 8003164:	002a      	movs	r2, r5
 8003166:	3b0b      	subs	r3, #11
 8003168:	409a      	lsls	r2, r3
 800316a:	2500      	movs	r5, #0
 800316c:	e7e3      	b.n	8003136 <__aeabi_f2d+0x4e>
 800316e:	46c0      	nop			@ (mov r8, r8)
 8003170:	00000389 	.word	0x00000389
 8003174:	000007ff 	.word	0x000007ff

08003178 <__aeabi_d2f>:
 8003178:	b5f0      	push	{r4, r5, r6, r7, lr}
 800317a:	004b      	lsls	r3, r1, #1
 800317c:	030f      	lsls	r7, r1, #12
 800317e:	0d5b      	lsrs	r3, r3, #21
 8003180:	4c3b      	ldr	r4, [pc, #236]	@ (8003270 <__aeabi_d2f+0xf8>)
 8003182:	0f45      	lsrs	r5, r0, #29
 8003184:	b083      	sub	sp, #12
 8003186:	0a7f      	lsrs	r7, r7, #9
 8003188:	1c5e      	adds	r6, r3, #1
 800318a:	432f      	orrs	r7, r5
 800318c:	9000      	str	r0, [sp, #0]
 800318e:	9101      	str	r1, [sp, #4]
 8003190:	0fca      	lsrs	r2, r1, #31
 8003192:	00c5      	lsls	r5, r0, #3
 8003194:	4226      	tst	r6, r4
 8003196:	d00b      	beq.n	80031b0 <__aeabi_d2f+0x38>
 8003198:	4936      	ldr	r1, [pc, #216]	@ (8003274 <__aeabi_d2f+0xfc>)
 800319a:	185c      	adds	r4, r3, r1
 800319c:	2cfe      	cmp	r4, #254	@ 0xfe
 800319e:	dd13      	ble.n	80031c8 <__aeabi_d2f+0x50>
 80031a0:	20ff      	movs	r0, #255	@ 0xff
 80031a2:	2300      	movs	r3, #0
 80031a4:	05c0      	lsls	r0, r0, #23
 80031a6:	4318      	orrs	r0, r3
 80031a8:	07d2      	lsls	r2, r2, #31
 80031aa:	4310      	orrs	r0, r2
 80031ac:	b003      	add	sp, #12
 80031ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d102      	bne.n	80031ba <__aeabi_d2f+0x42>
 80031b4:	2000      	movs	r0, #0
 80031b6:	2300      	movs	r3, #0
 80031b8:	e7f4      	b.n	80031a4 <__aeabi_d2f+0x2c>
 80031ba:	433d      	orrs	r5, r7
 80031bc:	d0f0      	beq.n	80031a0 <__aeabi_d2f+0x28>
 80031be:	2380      	movs	r3, #128	@ 0x80
 80031c0:	03db      	lsls	r3, r3, #15
 80031c2:	20ff      	movs	r0, #255	@ 0xff
 80031c4:	433b      	orrs	r3, r7
 80031c6:	e7ed      	b.n	80031a4 <__aeabi_d2f+0x2c>
 80031c8:	2c00      	cmp	r4, #0
 80031ca:	dd14      	ble.n	80031f6 <__aeabi_d2f+0x7e>
 80031cc:	9b00      	ldr	r3, [sp, #0]
 80031ce:	00ff      	lsls	r7, r7, #3
 80031d0:	019b      	lsls	r3, r3, #6
 80031d2:	1e58      	subs	r0, r3, #1
 80031d4:	4183      	sbcs	r3, r0
 80031d6:	0f69      	lsrs	r1, r5, #29
 80031d8:	433b      	orrs	r3, r7
 80031da:	430b      	orrs	r3, r1
 80031dc:	0759      	lsls	r1, r3, #29
 80031de:	d041      	beq.n	8003264 <__aeabi_d2f+0xec>
 80031e0:	210f      	movs	r1, #15
 80031e2:	4019      	ands	r1, r3
 80031e4:	2904      	cmp	r1, #4
 80031e6:	d028      	beq.n	800323a <__aeabi_d2f+0xc2>
 80031e8:	3304      	adds	r3, #4
 80031ea:	0159      	lsls	r1, r3, #5
 80031ec:	d525      	bpl.n	800323a <__aeabi_d2f+0xc2>
 80031ee:	3401      	adds	r4, #1
 80031f0:	2300      	movs	r3, #0
 80031f2:	b2e0      	uxtb	r0, r4
 80031f4:	e7d6      	b.n	80031a4 <__aeabi_d2f+0x2c>
 80031f6:	0021      	movs	r1, r4
 80031f8:	3117      	adds	r1, #23
 80031fa:	dbdb      	blt.n	80031b4 <__aeabi_d2f+0x3c>
 80031fc:	2180      	movs	r1, #128	@ 0x80
 80031fe:	201e      	movs	r0, #30
 8003200:	0409      	lsls	r1, r1, #16
 8003202:	4339      	orrs	r1, r7
 8003204:	1b00      	subs	r0, r0, r4
 8003206:	281f      	cmp	r0, #31
 8003208:	dd1b      	ble.n	8003242 <__aeabi_d2f+0xca>
 800320a:	2602      	movs	r6, #2
 800320c:	4276      	negs	r6, r6
 800320e:	1b34      	subs	r4, r6, r4
 8003210:	000e      	movs	r6, r1
 8003212:	40e6      	lsrs	r6, r4
 8003214:	0034      	movs	r4, r6
 8003216:	2820      	cmp	r0, #32
 8003218:	d004      	beq.n	8003224 <__aeabi_d2f+0xac>
 800321a:	4817      	ldr	r0, [pc, #92]	@ (8003278 <__aeabi_d2f+0x100>)
 800321c:	4684      	mov	ip, r0
 800321e:	4463      	add	r3, ip
 8003220:	4099      	lsls	r1, r3
 8003222:	430d      	orrs	r5, r1
 8003224:	002b      	movs	r3, r5
 8003226:	1e59      	subs	r1, r3, #1
 8003228:	418b      	sbcs	r3, r1
 800322a:	4323      	orrs	r3, r4
 800322c:	0759      	lsls	r1, r3, #29
 800322e:	d015      	beq.n	800325c <__aeabi_d2f+0xe4>
 8003230:	210f      	movs	r1, #15
 8003232:	2400      	movs	r4, #0
 8003234:	4019      	ands	r1, r3
 8003236:	2904      	cmp	r1, #4
 8003238:	d117      	bne.n	800326a <__aeabi_d2f+0xf2>
 800323a:	019b      	lsls	r3, r3, #6
 800323c:	0a5b      	lsrs	r3, r3, #9
 800323e:	b2e0      	uxtb	r0, r4
 8003240:	e7b0      	b.n	80031a4 <__aeabi_d2f+0x2c>
 8003242:	4c0e      	ldr	r4, [pc, #56]	@ (800327c <__aeabi_d2f+0x104>)
 8003244:	191c      	adds	r4, r3, r4
 8003246:	002b      	movs	r3, r5
 8003248:	40a5      	lsls	r5, r4
 800324a:	40c3      	lsrs	r3, r0
 800324c:	40a1      	lsls	r1, r4
 800324e:	1e68      	subs	r0, r5, #1
 8003250:	4185      	sbcs	r5, r0
 8003252:	4329      	orrs	r1, r5
 8003254:	430b      	orrs	r3, r1
 8003256:	2400      	movs	r4, #0
 8003258:	0759      	lsls	r1, r3, #29
 800325a:	d1c1      	bne.n	80031e0 <__aeabi_d2f+0x68>
 800325c:	019b      	lsls	r3, r3, #6
 800325e:	2000      	movs	r0, #0
 8003260:	0a5b      	lsrs	r3, r3, #9
 8003262:	e79f      	b.n	80031a4 <__aeabi_d2f+0x2c>
 8003264:	08db      	lsrs	r3, r3, #3
 8003266:	b2e0      	uxtb	r0, r4
 8003268:	e79c      	b.n	80031a4 <__aeabi_d2f+0x2c>
 800326a:	3304      	adds	r3, #4
 800326c:	e7e5      	b.n	800323a <__aeabi_d2f+0xc2>
 800326e:	46c0      	nop			@ (mov r8, r8)
 8003270:	000007fe 	.word	0x000007fe
 8003274:	fffffc80 	.word	0xfffffc80
 8003278:	fffffca2 	.word	0xfffffca2
 800327c:	fffffc82 	.word	0xfffffc82

08003280 <__clzsi2>:
 8003280:	211c      	movs	r1, #28
 8003282:	2301      	movs	r3, #1
 8003284:	041b      	lsls	r3, r3, #16
 8003286:	4298      	cmp	r0, r3
 8003288:	d301      	bcc.n	800328e <__clzsi2+0xe>
 800328a:	0c00      	lsrs	r0, r0, #16
 800328c:	3910      	subs	r1, #16
 800328e:	0a1b      	lsrs	r3, r3, #8
 8003290:	4298      	cmp	r0, r3
 8003292:	d301      	bcc.n	8003298 <__clzsi2+0x18>
 8003294:	0a00      	lsrs	r0, r0, #8
 8003296:	3908      	subs	r1, #8
 8003298:	091b      	lsrs	r3, r3, #4
 800329a:	4298      	cmp	r0, r3
 800329c:	d301      	bcc.n	80032a2 <__clzsi2+0x22>
 800329e:	0900      	lsrs	r0, r0, #4
 80032a0:	3904      	subs	r1, #4
 80032a2:	a202      	add	r2, pc, #8	@ (adr r2, 80032ac <__clzsi2+0x2c>)
 80032a4:	5c10      	ldrb	r0, [r2, r0]
 80032a6:	1840      	adds	r0, r0, r1
 80032a8:	4770      	bx	lr
 80032aa:	46c0      	nop			@ (mov r8, r8)
 80032ac:	02020304 	.word	0x02020304
 80032b0:	01010101 	.word	0x01010101
	...

080032bc <__clzdi2>:
 80032bc:	b510      	push	{r4, lr}
 80032be:	2900      	cmp	r1, #0
 80032c0:	d103      	bne.n	80032ca <__clzdi2+0xe>
 80032c2:	f7ff ffdd 	bl	8003280 <__clzsi2>
 80032c6:	3020      	adds	r0, #32
 80032c8:	e002      	b.n	80032d0 <__clzdi2+0x14>
 80032ca:	0008      	movs	r0, r1
 80032cc:	f7ff ffd8 	bl	8003280 <__clzsi2>
 80032d0:	bd10      	pop	{r4, pc}
 80032d2:	46c0      	nop			@ (mov r8, r8)

080032d4 <drawPixel>:
extern uint8_t _rowstart;       ///< Some displays need this changed to offset
extern uint8_t _xstart;
extern uint8_t _ystart;

void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 80032d4:	b590      	push	{r4, r7, lr}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	0004      	movs	r4, r0
 80032dc:	0008      	movs	r0, r1
 80032de:	0011      	movs	r1, r2
 80032e0:	1dbb      	adds	r3, r7, #6
 80032e2:	1c22      	adds	r2, r4, #0
 80032e4:	801a      	strh	r2, [r3, #0]
 80032e6:	1d3b      	adds	r3, r7, #4
 80032e8:	1c02      	adds	r2, r0, #0
 80032ea:	801a      	strh	r2, [r3, #0]
 80032ec:	1cbb      	adds	r3, r7, #2
 80032ee:	1c0a      	adds	r2, r1, #0
 80032f0:	801a      	strh	r2, [r3, #0]
	ST7735_DrawPixel(y,x, color);
 80032f2:	1d3b      	adds	r3, r7, #4
 80032f4:	8818      	ldrh	r0, [r3, #0]
 80032f6:	1dbb      	adds	r3, r7, #6
 80032f8:	8819      	ldrh	r1, [r3, #0]
 80032fa:	1cbb      	adds	r3, r7, #2
 80032fc:	881b      	ldrh	r3, [r3, #0]
 80032fe:	001a      	movs	r2, r3
 8003300:	f000 fd00 	bl	8003d04 <ST7735_DrawPixel>
}
 8003304:	46c0      	nop			@ (mov r8, r8)
 8003306:	46bd      	mov	sp, r7
 8003308:	b003      	add	sp, #12
 800330a:	bd90      	pop	{r4, r7, pc}

0800330c <fillRect>:

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 800330c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800330e:	46c6      	mov	lr, r8
 8003310:	b500      	push	{lr}
 8003312:	b090      	sub	sp, #64	@ 0x40
 8003314:	af04      	add	r7, sp, #16
 8003316:	468c      	mov	ip, r1
 8003318:	0016      	movs	r6, r2
 800331a:	0019      	movs	r1, r3
 800331c:	221e      	movs	r2, #30
 800331e:	18ba      	adds	r2, r7, r2
 8003320:	1c03      	adds	r3, r0, #0
 8003322:	8013      	strh	r3, [r2, #0]
 8003324:	231c      	movs	r3, #28
 8003326:	18fb      	adds	r3, r7, r3
 8003328:	4662      	mov	r2, ip
 800332a:	801a      	strh	r2, [r3, #0]
 800332c:	201a      	movs	r0, #26
 800332e:	183b      	adds	r3, r7, r0
 8003330:	1c32      	adds	r2, r6, #0
 8003332:	801a      	strh	r2, [r3, #0]
 8003334:	2018      	movs	r0, #24
 8003336:	183b      	adds	r3, r7, r0
 8003338:	1c0a      	adds	r2, r1, #0
 800333a:	801a      	strh	r2, [r3, #0]
 800333c:	466b      	mov	r3, sp
 800333e:	4698      	mov	r8, r3
	uint16_t pallette[] = {color};
 8003340:	230c      	movs	r3, #12
 8003342:	0001      	movs	r1, r0
 8003344:	185e      	adds	r6, r3, r1
 8003346:	19f2      	adds	r2, r6, r7
 8003348:	2030      	movs	r0, #48	@ 0x30
 800334a:	1846      	adds	r6, r0, r1
 800334c:	19f3      	adds	r3, r6, r7
 800334e:	881b      	ldrh	r3, [r3, #0]
 8003350:	8013      	strh	r3, [r2, #0]
	    uint16_t pixels[w*h][2];
 8003352:	201a      	movs	r0, #26
 8003354:	183b      	adds	r3, r7, r0
 8003356:	2200      	movs	r2, #0
 8003358:	5e9b      	ldrsh	r3, [r3, r2]
 800335a:	187a      	adds	r2, r7, r1
 800335c:	2000      	movs	r0, #0
 800335e:	5e12      	ldrsh	r2, [r2, r0]
 8003360:	4353      	muls	r3, r2
 8003362:	1e5a      	subs	r2, r3, #1
 8003364:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003366:	001a      	movs	r2, r3
 8003368:	60ba      	str	r2, [r7, #8]
 800336a:	2200      	movs	r2, #0
 800336c:	60fa      	str	r2, [r7, #12]
 800336e:	68b8      	ldr	r0, [r7, #8]
 8003370:	68f9      	ldr	r1, [r7, #12]
 8003372:	0002      	movs	r2, r0
 8003374:	0ed2      	lsrs	r2, r2, #27
 8003376:	000e      	movs	r6, r1
 8003378:	0176      	lsls	r6, r6, #5
 800337a:	617e      	str	r6, [r7, #20]
 800337c:	697e      	ldr	r6, [r7, #20]
 800337e:	4316      	orrs	r6, r2
 8003380:	617e      	str	r6, [r7, #20]
 8003382:	0002      	movs	r2, r0
 8003384:	0152      	lsls	r2, r2, #5
 8003386:	613a      	str	r2, [r7, #16]
 8003388:	001a      	movs	r2, r3
 800338a:	603a      	str	r2, [r7, #0]
 800338c:	2200      	movs	r2, #0
 800338e:	607a      	str	r2, [r7, #4]
 8003390:	6838      	ldr	r0, [r7, #0]
 8003392:	6879      	ldr	r1, [r7, #4]
 8003394:	0002      	movs	r2, r0
 8003396:	0ed2      	lsrs	r2, r2, #27
 8003398:	000e      	movs	r6, r1
 800339a:	0175      	lsls	r5, r6, #5
 800339c:	4315      	orrs	r5, r2
 800339e:	0002      	movs	r2, r0
 80033a0:	0154      	lsls	r4, r2, #5
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	3307      	adds	r3, #7
 80033a6:	08db      	lsrs	r3, r3, #3
 80033a8:	00db      	lsls	r3, r3, #3
 80033aa:	466a      	mov	r2, sp
 80033ac:	1ad2      	subs	r2, r2, r3
 80033ae:	4695      	mov	sp, r2
 80033b0:	ab04      	add	r3, sp, #16
 80033b2:	3301      	adds	r3, #1
 80033b4:	085b      	lsrs	r3, r3, #1
 80033b6:	005b      	lsls	r3, r3, #1
 80033b8:	62bb      	str	r3, [r7, #40]	@ 0x28

	    pixels[0][0] = 0;
 80033ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033bc:	2200      	movs	r2, #0
 80033be:	801a      	strh	r2, [r3, #0]
	    pixels[0][1] = w*h;
 80033c0:	201a      	movs	r0, #26
 80033c2:	183b      	adds	r3, r7, r0
 80033c4:	881b      	ldrh	r3, [r3, #0]
 80033c6:	2118      	movs	r1, #24
 80033c8:	187a      	adds	r2, r7, r1
 80033ca:	8812      	ldrh	r2, [r2, #0]
 80033cc:	4353      	muls	r3, r2
 80033ce:	b29a      	uxth	r2, r3
 80033d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033d2:	805a      	strh	r2, [r3, #2]
	    drawImage(pixels, pallette, x, y, w, h, 1);
 80033d4:	221e      	movs	r2, #30
 80033d6:	18bb      	adds	r3, r7, r2
 80033d8:	881c      	ldrh	r4, [r3, #0]
 80033da:	231c      	movs	r3, #28
 80033dc:	18fb      	adds	r3, r7, r3
 80033de:	881d      	ldrh	r5, [r3, #0]
 80033e0:	183b      	adds	r3, r7, r0
 80033e2:	881b      	ldrh	r3, [r3, #0]
 80033e4:	0008      	movs	r0, r1
 80033e6:	187a      	adds	r2, r7, r1
 80033e8:	8812      	ldrh	r2, [r2, #0]
 80033ea:	210c      	movs	r1, #12
 80033ec:	1809      	adds	r1, r1, r0
 80033ee:	19c9      	adds	r1, r1, r7
 80033f0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80033f2:	2601      	movs	r6, #1
 80033f4:	46b4      	mov	ip, r6
 80033f6:	4666      	mov	r6, ip
 80033f8:	9602      	str	r6, [sp, #8]
 80033fa:	9201      	str	r2, [sp, #4]
 80033fc:	9300      	str	r3, [sp, #0]
 80033fe:	002b      	movs	r3, r5
 8003400:	0022      	movs	r2, r4
 8003402:	f000 f9dd 	bl	80037c0 <drawImage>
 8003406:	46c5      	mov	sp, r8

	//ST7735_FillRectangle(x, y, w, h, color);
}
 8003408:	46c0      	nop			@ (mov r8, r8)
 800340a:	46bd      	mov	sp, r7
 800340c:	b00c      	add	sp, #48	@ 0x30
 800340e:	bc80      	pop	{r7}
 8003410:	46b8      	mov	r8, r7
 8003412:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003414 <writePixel>:

#define min(a, b) (((a) < (b)) ? (a) : (b))


void writePixel(int16_t x, int16_t y, uint16_t color)
{
 8003414:	b590      	push	{r4, r7, lr}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	0004      	movs	r4, r0
 800341c:	0008      	movs	r0, r1
 800341e:	0011      	movs	r1, r2
 8003420:	1dbb      	adds	r3, r7, #6
 8003422:	1c22      	adds	r2, r4, #0
 8003424:	801a      	strh	r2, [r3, #0]
 8003426:	1d3b      	adds	r3, r7, #4
 8003428:	1c02      	adds	r2, r0, #0
 800342a:	801a      	strh	r2, [r3, #0]
 800342c:	1cbb      	adds	r3, r7, #2
 800342e:	1c0a      	adds	r2, r1, #0
 8003430:	801a      	strh	r2, [r3, #0]
    drawPixel(x, y, color);
 8003432:	1cbb      	adds	r3, r7, #2
 8003434:	881a      	ldrh	r2, [r3, #0]
 8003436:	1d3b      	adds	r3, r7, #4
 8003438:	2100      	movs	r1, #0
 800343a:	5e59      	ldrsh	r1, [r3, r1]
 800343c:	1dbb      	adds	r3, r7, #6
 800343e:	2000      	movs	r0, #0
 8003440:	5e1b      	ldrsh	r3, [r3, r0]
 8003442:	0018      	movs	r0, r3
 8003444:	f7ff ff46 	bl	80032d4 <drawPixel>
}
 8003448:	46c0      	nop			@ (mov r8, r8)
 800344a:	46bd      	mov	sp, r7
 800344c:	b003      	add	sp, #12
 800344e:	bd90      	pop	{r4, r7, pc}

08003450 <drawString>:
    } else {
        writeLine(x0, y0, x1, y1, color);
    }
}
void drawString(int16_t x, int16_t y, char* c, int16_t textColor, int16_t bgColor, uint8_t size, uint8_t spacing)
{
 8003450:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003452:	b089      	sub	sp, #36	@ 0x24
 8003454:	af02      	add	r7, sp, #8
 8003456:	0004      	movs	r4, r0
 8003458:	0008      	movs	r0, r1
 800345a:	60ba      	str	r2, [r7, #8]
 800345c:	0019      	movs	r1, r3
 800345e:	230e      	movs	r3, #14
 8003460:	18fb      	adds	r3, r7, r3
 8003462:	1c22      	adds	r2, r4, #0
 8003464:	801a      	strh	r2, [r3, #0]
 8003466:	230c      	movs	r3, #12
 8003468:	18fb      	adds	r3, r7, r3
 800346a:	1c02      	adds	r2, r0, #0
 800346c:	801a      	strh	r2, [r3, #0]
 800346e:	1dbb      	adds	r3, r7, #6
 8003470:	1c0a      	adds	r2, r1, #0
 8003472:	801a      	strh	r2, [r3, #0]
	uint16_t i =0;
 8003474:	2316      	movs	r3, #22
 8003476:	18fb      	adds	r3, r7, r3
 8003478:	2200      	movs	r2, #0
 800347a:	801a      	strh	r2, [r3, #0]

	while(c[i])
 800347c:	e03f      	b.n	80034fe <drawString+0xae>
	{
		drawChar(x, y, c[i], textColor, bgColor, size);
 800347e:	2516      	movs	r5, #22
 8003480:	197b      	adds	r3, r7, r5
 8003482:	881b      	ldrh	r3, [r3, #0]
 8003484:	68ba      	ldr	r2, [r7, #8]
 8003486:	18d3      	adds	r3, r2, r3
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	469c      	mov	ip, r3
 800348c:	1dbb      	adds	r3, r7, #6
 800348e:	2400      	movs	r4, #0
 8003490:	5f1c      	ldrsh	r4, [r3, r4]
 8003492:	230c      	movs	r3, #12
 8003494:	18fb      	adds	r3, r7, r3
 8003496:	2100      	movs	r1, #0
 8003498:	5e59      	ldrsh	r1, [r3, r1]
 800349a:	260e      	movs	r6, #14
 800349c:	19bb      	adds	r3, r7, r6
 800349e:	2000      	movs	r0, #0
 80034a0:	5e18      	ldrsh	r0, [r3, r0]
 80034a2:	232c      	movs	r3, #44	@ 0x2c
 80034a4:	2208      	movs	r2, #8
 80034a6:	189b      	adds	r3, r3, r2
 80034a8:	19db      	adds	r3, r3, r7
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	9301      	str	r3, [sp, #4]
 80034ae:	2328      	movs	r3, #40	@ 0x28
 80034b0:	189b      	adds	r3, r3, r2
 80034b2:	19db      	adds	r3, r3, r7
 80034b4:	2200      	movs	r2, #0
 80034b6:	5e9b      	ldrsh	r3, [r3, r2]
 80034b8:	9300      	str	r3, [sp, #0]
 80034ba:	0023      	movs	r3, r4
 80034bc:	4662      	mov	r2, ip
 80034be:	f000 f82b 	bl	8003518 <drawChar>
		x+=(size*6)+spacing;
 80034c2:	232c      	movs	r3, #44	@ 0x2c
 80034c4:	2108      	movs	r1, #8
 80034c6:	185b      	adds	r3, r3, r1
 80034c8:	19db      	adds	r3, r3, r7
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	1c1a      	adds	r2, r3, #0
 80034d0:	1c13      	adds	r3, r2, #0
 80034d2:	18db      	adds	r3, r3, r3
 80034d4:	189b      	adds	r3, r3, r2
 80034d6:	18db      	adds	r3, r3, r3
 80034d8:	b29a      	uxth	r2, r3
 80034da:	2330      	movs	r3, #48	@ 0x30
 80034dc:	185b      	adds	r3, r3, r1
 80034de:	19db      	adds	r3, r3, r7
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	18d3      	adds	r3, r2, r3
 80034e6:	b29a      	uxth	r2, r3
 80034e8:	19bb      	adds	r3, r7, r6
 80034ea:	881b      	ldrh	r3, [r3, #0]
 80034ec:	18d3      	adds	r3, r2, r3
 80034ee:	b29a      	uxth	r2, r3
 80034f0:	19bb      	adds	r3, r7, r6
 80034f2:	801a      	strh	r2, [r3, #0]
		i++;
 80034f4:	197b      	adds	r3, r7, r5
 80034f6:	881a      	ldrh	r2, [r3, #0]
 80034f8:	197b      	adds	r3, r7, r5
 80034fa:	3201      	adds	r2, #1
 80034fc:	801a      	strh	r2, [r3, #0]
	while(c[i])
 80034fe:	2316      	movs	r3, #22
 8003500:	18fb      	adds	r3, r7, r3
 8003502:	881b      	ldrh	r3, [r3, #0]
 8003504:	68ba      	ldr	r2, [r7, #8]
 8003506:	18d3      	adds	r3, r2, r3
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d1b7      	bne.n	800347e <drawString+0x2e>
	}
}
 800350e:	46c0      	nop			@ (mov r8, r8)
 8003510:	46c0      	nop			@ (mov r8, r8)
 8003512:	46bd      	mov	sp, r7
 8003514:	b007      	add	sp, #28
 8003516:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003518 <drawChar>:
void drawChar(int16_t x, int16_t y, char c, int16_t textColor, int16_t bgColor, uint8_t size){
 8003518:	b5b0      	push	{r4, r5, r7, lr}
 800351a:	b088      	sub	sp, #32
 800351c:	af02      	add	r7, sp, #8
 800351e:	0005      	movs	r5, r0
 8003520:	000c      	movs	r4, r1
 8003522:	0010      	movs	r0, r2
 8003524:	0019      	movs	r1, r3
 8003526:	1dbb      	adds	r3, r7, #6
 8003528:	1c2a      	adds	r2, r5, #0
 800352a:	801a      	strh	r2, [r3, #0]
 800352c:	1d3b      	adds	r3, r7, #4
 800352e:	1c22      	adds	r2, r4, #0
 8003530:	801a      	strh	r2, [r3, #0]
 8003532:	1cfb      	adds	r3, r7, #3
 8003534:	1c02      	adds	r2, r0, #0
 8003536:	701a      	strb	r2, [r3, #0]
 8003538:	003b      	movs	r3, r7
 800353a:	1c0a      	adds	r2, r1, #0
 800353c:	801a      	strh	r2, [r3, #0]
     //(y >= _height))           //||
     //((x + 5 * size - 1) < 0) ||
     //((y + 8 * size - 1) < 0))
   // return;

  for (i=0; i<6; i++ ) {
 800353e:	2300      	movs	r3, #0
 8003540:	613b      	str	r3, [r7, #16]
 8003542:	e0bd      	b.n	80036c0 <drawChar+0x1a8>
    if ((i) == 5)
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	2b05      	cmp	r3, #5
 8003548:	d104      	bne.n	8003554 <drawChar+0x3c>
      line = 0x0;
 800354a:	2317      	movs	r3, #23
 800354c:	18fb      	adds	r3, r7, r3
 800354e:	2200      	movs	r2, #0
 8003550:	701a      	strb	r2, [r3, #0]
 8003552:	e00b      	b.n	800356c <drawChar+0x54>
    else
      line = Font[(c*5)+(i)];
 8003554:	1cfb      	adds	r3, r7, #3
 8003556:	781a      	ldrb	r2, [r3, #0]
 8003558:	0013      	movs	r3, r2
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	189a      	adds	r2, r3, r2
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	18d2      	adds	r2, r2, r3
 8003562:	2317      	movs	r3, #23
 8003564:	18fb      	adds	r3, r7, r3
 8003566:	495b      	ldr	r1, [pc, #364]	@ (80036d4 <drawChar+0x1bc>)
 8003568:	5c8a      	ldrb	r2, [r1, r2]
 800356a:	701a      	strb	r2, [r3, #0]
    for (j = 0; j<8; j++) {
 800356c:	2300      	movs	r3, #0
 800356e:	60fb      	str	r3, [r7, #12]
 8003570:	e09f      	b.n	80036b2 <drawChar+0x19a>
      if (line & 0x1) {
 8003572:	2317      	movs	r3, #23
 8003574:	18fb      	adds	r3, r7, r3
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	2201      	movs	r2, #1
 800357a:	4013      	ands	r3, r2
 800357c:	d043      	beq.n	8003606 <drawChar+0xee>
        if (size == 1)
 800357e:	232c      	movs	r3, #44	@ 0x2c
 8003580:	18fb      	adds	r3, r7, r3
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	2b01      	cmp	r3, #1
 8003586:	d115      	bne.n	80035b4 <drawChar+0x9c>
          writePixel(x+(i), y+(7-j), textColor);
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	b29a      	uxth	r2, r3
 800358c:	1dbb      	adds	r3, r7, #6
 800358e:	881b      	ldrh	r3, [r3, #0]
 8003590:	18d3      	adds	r3, r2, r3
 8003592:	b29b      	uxth	r3, r3
 8003594:	b218      	sxth	r0, r3
 8003596:	1d3b      	adds	r3, r7, #4
 8003598:	881a      	ldrh	r2, [r3, #0]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	b29b      	uxth	r3, r3
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	3307      	adds	r3, #7
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	b219      	sxth	r1, r3
 80035a8:	003b      	movs	r3, r7
 80035aa:	881b      	ldrh	r3, [r3, #0]
 80035ac:	001a      	movs	r2, r3
 80035ae:	f7ff ff31 	bl	8003414 <writePixel>
 80035b2:	e075      	b.n	80036a0 <drawChar+0x188>
        else {
          fillRect(x+((i)*size), y+((7-j)*size), size, size, textColor);
 80035b4:	212c      	movs	r1, #44	@ 0x2c
 80035b6:	187b      	adds	r3, r7, r1
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	693a      	ldr	r2, [r7, #16]
 80035be:	b292      	uxth	r2, r2
 80035c0:	4353      	muls	r3, r2
 80035c2:	b29a      	uxth	r2, r3
 80035c4:	1dbb      	adds	r3, r7, #6
 80035c6:	881b      	ldrh	r3, [r3, #0]
 80035c8:	18d3      	adds	r3, r2, r3
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	b218      	sxth	r0, r3
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2207      	movs	r2, #7
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	000c      	movs	r4, r1
 80035d8:	187a      	adds	r2, r7, r1
 80035da:	7812      	ldrb	r2, [r2, #0]
 80035dc:	b292      	uxth	r2, r2
 80035de:	4353      	muls	r3, r2
 80035e0:	b29a      	uxth	r2, r3
 80035e2:	1d3b      	adds	r3, r7, #4
 80035e4:	881b      	ldrh	r3, [r3, #0]
 80035e6:	18d3      	adds	r3, r2, r3
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	b219      	sxth	r1, r3
 80035ec:	193b      	adds	r3, r7, r4
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	b21a      	sxth	r2, r3
 80035f2:	193b      	adds	r3, r7, r4
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	b21c      	sxth	r4, r3
 80035f8:	003b      	movs	r3, r7
 80035fa:	881b      	ldrh	r3, [r3, #0]
 80035fc:	9300      	str	r3, [sp, #0]
 80035fe:	0023      	movs	r3, r4
 8003600:	f7ff fe84 	bl	800330c <fillRect>
 8003604:	e04c      	b.n	80036a0 <drawChar+0x188>
        }
      } else if (bgColor != textColor) {
 8003606:	2428      	movs	r4, #40	@ 0x28
 8003608:	193b      	adds	r3, r7, r4
 800360a:	0039      	movs	r1, r7
 800360c:	2200      	movs	r2, #0
 800360e:	5e9a      	ldrsh	r2, [r3, r2]
 8003610:	2300      	movs	r3, #0
 8003612:	5ecb      	ldrsh	r3, [r1, r3]
 8003614:	429a      	cmp	r2, r3
 8003616:	d043      	beq.n	80036a0 <drawChar+0x188>
        if (size == 1) // default size
 8003618:	232c      	movs	r3, #44	@ 0x2c
 800361a:	18fb      	adds	r3, r7, r3
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	2b01      	cmp	r3, #1
 8003620:	d115      	bne.n	800364e <drawChar+0x136>
          writePixel(x+(i), y+(7-j), bgColor);
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	b29a      	uxth	r2, r3
 8003626:	1dbb      	adds	r3, r7, #6
 8003628:	881b      	ldrh	r3, [r3, #0]
 800362a:	18d3      	adds	r3, r2, r3
 800362c:	b29b      	uxth	r3, r3
 800362e:	b218      	sxth	r0, r3
 8003630:	1d3b      	adds	r3, r7, #4
 8003632:	881a      	ldrh	r2, [r3, #0]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	b29b      	uxth	r3, r3
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	b29b      	uxth	r3, r3
 800363c:	3307      	adds	r3, #7
 800363e:	b29b      	uxth	r3, r3
 8003640:	b219      	sxth	r1, r3
 8003642:	193b      	adds	r3, r7, r4
 8003644:	881b      	ldrh	r3, [r3, #0]
 8003646:	001a      	movs	r2, r3
 8003648:	f7ff fee4 	bl	8003414 <writePixel>
 800364c:	e028      	b.n	80036a0 <drawChar+0x188>
        else {  // big size
          fillRect(x+(i)*size, y+(7-j)*size, size, size, bgColor);
 800364e:	212c      	movs	r1, #44	@ 0x2c
 8003650:	187b      	adds	r3, r7, r1
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	b29b      	uxth	r3, r3
 8003656:	693a      	ldr	r2, [r7, #16]
 8003658:	b292      	uxth	r2, r2
 800365a:	4353      	muls	r3, r2
 800365c:	b29a      	uxth	r2, r3
 800365e:	1dbb      	adds	r3, r7, #6
 8003660:	881b      	ldrh	r3, [r3, #0]
 8003662:	18d3      	adds	r3, r2, r3
 8003664:	b29b      	uxth	r3, r3
 8003666:	b218      	sxth	r0, r3
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2207      	movs	r2, #7
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	b29b      	uxth	r3, r3
 8003670:	000c      	movs	r4, r1
 8003672:	187a      	adds	r2, r7, r1
 8003674:	7812      	ldrb	r2, [r2, #0]
 8003676:	b292      	uxth	r2, r2
 8003678:	4353      	muls	r3, r2
 800367a:	b29a      	uxth	r2, r3
 800367c:	1d3b      	adds	r3, r7, #4
 800367e:	881b      	ldrh	r3, [r3, #0]
 8003680:	18d3      	adds	r3, r2, r3
 8003682:	b29b      	uxth	r3, r3
 8003684:	b219      	sxth	r1, r3
 8003686:	193b      	adds	r3, r7, r4
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	b21a      	sxth	r2, r3
 800368c:	193b      	adds	r3, r7, r4
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	b21c      	sxth	r4, r3
 8003692:	2328      	movs	r3, #40	@ 0x28
 8003694:	18fb      	adds	r3, r7, r3
 8003696:	881b      	ldrh	r3, [r3, #0]
 8003698:	9300      	str	r3, [sp, #0]
 800369a:	0023      	movs	r3, r4
 800369c:	f7ff fe36 	bl	800330c <fillRect>
        }
      }
      line >>= 1;
 80036a0:	2217      	movs	r2, #23
 80036a2:	18bb      	adds	r3, r7, r2
 80036a4:	18ba      	adds	r2, r7, r2
 80036a6:	7812      	ldrb	r2, [r2, #0]
 80036a8:	0852      	lsrs	r2, r2, #1
 80036aa:	701a      	strb	r2, [r3, #0]
    for (j = 0; j<8; j++) {
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	3301      	adds	r3, #1
 80036b0:	60fb      	str	r3, [r7, #12]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2b07      	cmp	r3, #7
 80036b6:	dc00      	bgt.n	80036ba <drawChar+0x1a2>
 80036b8:	e75b      	b.n	8003572 <drawChar+0x5a>
  for (i=0; i<6; i++ ) {
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	3301      	adds	r3, #1
 80036be:	613b      	str	r3, [r7, #16]
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	2b05      	cmp	r3, #5
 80036c4:	dc00      	bgt.n	80036c8 <drawChar+0x1b0>
 80036c6:	e73d      	b.n	8003544 <drawChar+0x2c>
    }
  }
}
 80036c8:	46c0      	nop			@ (mov r8, r8)
 80036ca:	46c0      	nop			@ (mov r8, r8)
 80036cc:	46bd      	mov	sp, r7
 80036ce:	b006      	add	sp, #24
 80036d0:	bdb0      	pop	{r4, r5, r7, pc}
 80036d2:	46c0      	nop			@ (mov r8, r8)
 80036d4:	0800bab4 	.word	0x0800bab4

080036d8 <fillScreen>:
        if(a > b) _swap_int16_t(a,b);
        drawFastHLine(a, y, b-a+1, color);
    }
}

void fillScreen(uint16_t color) {
 80036d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036da:	b091      	sub	sp, #68	@ 0x44
 80036dc:	af04      	add	r7, sp, #16
 80036de:	231e      	movs	r3, #30
 80036e0:	18f9      	adds	r1, r7, r3
 80036e2:	8008      	strh	r0, [r1, #0]
 80036e4:	4669      	mov	r1, sp
 80036e6:	000e      	movs	r6, r1
    uint16_t pallette[] = {color};
 80036e8:	210c      	movs	r1, #12
 80036ea:	2318      	movs	r3, #24
 80036ec:	18cb      	adds	r3, r1, r3
 80036ee:	19d9      	adds	r1, r3, r7
 80036f0:	231e      	movs	r3, #30
 80036f2:	18f8      	adds	r0, r7, r3
 80036f4:	8800      	ldrh	r0, [r0, #0]
 80036f6:	8008      	strh	r0, [r1, #0]
    uint16_t pixels[_width*_height][2];
 80036f8:	492f      	ldr	r1, [pc, #188]	@ (80037b8 <fillScreen+0xe0>)
 80036fa:	2300      	movs	r3, #0
 80036fc:	5ec9      	ldrsh	r1, [r1, r3]
 80036fe:	0008      	movs	r0, r1
 8003700:	492e      	ldr	r1, [pc, #184]	@ (80037bc <fillScreen+0xe4>)
 8003702:	2300      	movs	r3, #0
 8003704:	5ec9      	ldrsh	r1, [r1, r3]
 8003706:	4341      	muls	r1, r0
 8003708:	1e48      	subs	r0, r1, #1
 800370a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800370c:	0008      	movs	r0, r1
 800370e:	6138      	str	r0, [r7, #16]
 8003710:	2000      	movs	r0, #0
 8003712:	6178      	str	r0, [r7, #20]
 8003714:	693a      	ldr	r2, [r7, #16]
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	0010      	movs	r0, r2
 800371a:	0ec0      	lsrs	r0, r0, #27
 800371c:	613a      	str	r2, [r7, #16]
 800371e:	617b      	str	r3, [r7, #20]
 8003720:	015d      	lsls	r5, r3, #5
 8003722:	4305      	orrs	r5, r0
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	015c      	lsls	r4, r3, #5
 8003728:	0008      	movs	r0, r1
 800372a:	6038      	str	r0, [r7, #0]
 800372c:	2000      	movs	r0, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	683c      	ldr	r4, [r7, #0]
 8003732:	687d      	ldr	r5, [r7, #4]
 8003734:	0023      	movs	r3, r4
 8003736:	0ed8      	lsrs	r0, r3, #27
 8003738:	002b      	movs	r3, r5
 800373a:	015b      	lsls	r3, r3, #5
 800373c:	60fb      	str	r3, [r7, #12]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	4303      	orrs	r3, r0
 8003742:	60fb      	str	r3, [r7, #12]
 8003744:	0023      	movs	r3, r4
 8003746:	015b      	lsls	r3, r3, #5
 8003748:	60bb      	str	r3, [r7, #8]
 800374a:	000b      	movs	r3, r1
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	3307      	adds	r3, #7
 8003750:	08db      	lsrs	r3, r3, #3
 8003752:	00db      	lsls	r3, r3, #3
 8003754:	466a      	mov	r2, sp
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	469d      	mov	sp, r3
 800375a:	ab04      	add	r3, sp, #16
 800375c:	3301      	adds	r3, #1
 800375e:	085b      	lsrs	r3, r3, #1
 8003760:	005b      	lsls	r3, r3, #1
 8003762:	62bb      	str	r3, [r7, #40]	@ 0x28

    pixels[0][0] = 0;
 8003764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003766:	2200      	movs	r2, #0
 8003768:	801a      	strh	r2, [r3, #0]
    pixels[0][1] = _width*_height;
 800376a:	4b13      	ldr	r3, [pc, #76]	@ (80037b8 <fillScreen+0xe0>)
 800376c:	2200      	movs	r2, #0
 800376e:	5e9b      	ldrsh	r3, [r3, r2]
 8003770:	b29b      	uxth	r3, r3
 8003772:	4a12      	ldr	r2, [pc, #72]	@ (80037bc <fillScreen+0xe4>)
 8003774:	2000      	movs	r0, #0
 8003776:	5e12      	ldrsh	r2, [r2, r0]
 8003778:	b292      	uxth	r2, r2
 800377a:	4353      	muls	r3, r2
 800377c:	b29a      	uxth	r2, r3
 800377e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003780:	805a      	strh	r2, [r3, #2]
    drawImage(pixels, pallette, 0, 0, _width, _height, 1);
 8003782:	4b0d      	ldr	r3, [pc, #52]	@ (80037b8 <fillScreen+0xe0>)
 8003784:	2200      	movs	r2, #0
 8003786:	5e9b      	ldrsh	r3, [r3, r2]
 8003788:	b29b      	uxth	r3, r3
 800378a:	4a0c      	ldr	r2, [pc, #48]	@ (80037bc <fillScreen+0xe4>)
 800378c:	2000      	movs	r0, #0
 800378e:	5e12      	ldrsh	r2, [r2, r0]
 8003790:	b292      	uxth	r2, r2
 8003792:	210c      	movs	r1, #12
 8003794:	2018      	movs	r0, #24
 8003796:	1809      	adds	r1, r1, r0
 8003798:	19c9      	adds	r1, r1, r7
 800379a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800379c:	2401      	movs	r4, #1
 800379e:	9402      	str	r4, [sp, #8]
 80037a0:	9201      	str	r2, [sp, #4]
 80037a2:	9300      	str	r3, [sp, #0]
 80037a4:	2300      	movs	r3, #0
 80037a6:	2200      	movs	r2, #0
 80037a8:	f000 f80a 	bl	80037c0 <drawImage>
 80037ac:	46b5      	mov	sp, r6
	//fillRect(0, 0, _width, _height, color);
}
 80037ae:	46c0      	nop			@ (mov r8, r8)
 80037b0:	46bd      	mov	sp, r7
 80037b2:	b00d      	add	sp, #52	@ 0x34
 80037b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037b6:	46c0      	nop			@ (mov r8, r8)
 80037b8:	20000f0c 	.word	0x20000f0c
 80037bc:	20000f0e 	.word	0x20000f0e

080037c0 <drawImage>:

void drawImage(uint16_t image[][2], uint16_t palette[], uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t c)
{
 80037c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037c2:	46c6      	mov	lr, r8
 80037c4:	b500      	push	{lr}
 80037c6:	b092      	sub	sp, #72	@ 0x48
 80037c8:	af02      	add	r7, sp, #8
 80037ca:	6278      	str	r0, [r7, #36]	@ 0x24
 80037cc:	6239      	str	r1, [r7, #32]
 80037ce:	0019      	movs	r1, r3
 80037d0:	231e      	movs	r3, #30
 80037d2:	18fb      	adds	r3, r7, r3
 80037d4:	801a      	strh	r2, [r3, #0]
 80037d6:	231c      	movs	r3, #28
 80037d8:	18fb      	adds	r3, r7, r3
 80037da:	1c0a      	adds	r2, r1, #0
 80037dc:	801a      	strh	r2, [r3, #0]
 80037de:	466b      	mov	r3, sp
 80037e0:	4698      	mov	r8, r3
	uint16_t i;
	uint16_t j;
	uint16_t totalInd =0;
 80037e2:	2322      	movs	r3, #34	@ 0x22
 80037e4:	2118      	movs	r1, #24
 80037e6:	185b      	adds	r3, r3, r1
 80037e8:	19db      	adds	r3, r3, r7
 80037ea:	2200      	movs	r2, #0
 80037ec:	801a      	strh	r2, [r3, #0]
	uint16_t ind;
	uint16_t count;
	uint16_t bufffer[w*h];
 80037ee:	2340      	movs	r3, #64	@ 0x40
 80037f0:	185b      	adds	r3, r3, r1
 80037f2:	19db      	adds	r3, r3, r7
 80037f4:	881b      	ldrh	r3, [r3, #0]
 80037f6:	2244      	movs	r2, #68	@ 0x44
 80037f8:	1852      	adds	r2, r2, r1
 80037fa:	19d2      	adds	r2, r2, r7
 80037fc:	8812      	ldrh	r2, [r2, #0]
 80037fe:	4353      	muls	r3, r2
 8003800:	1e5a      	subs	r2, r3, #1
 8003802:	637a      	str	r2, [r7, #52]	@ 0x34
 8003804:	001a      	movs	r2, r3
 8003806:	60ba      	str	r2, [r7, #8]
 8003808:	2200      	movs	r2, #0
 800380a:	60fa      	str	r2, [r7, #12]
 800380c:	68b8      	ldr	r0, [r7, #8]
 800380e:	68f9      	ldr	r1, [r7, #12]
 8003810:	0002      	movs	r2, r0
 8003812:	0f12      	lsrs	r2, r2, #28
 8003814:	000e      	movs	r6, r1
 8003816:	0136      	lsls	r6, r6, #4
 8003818:	617e      	str	r6, [r7, #20]
 800381a:	697e      	ldr	r6, [r7, #20]
 800381c:	4316      	orrs	r6, r2
 800381e:	617e      	str	r6, [r7, #20]
 8003820:	0002      	movs	r2, r0
 8003822:	0112      	lsls	r2, r2, #4
 8003824:	613a      	str	r2, [r7, #16]
 8003826:	001a      	movs	r2, r3
 8003828:	603a      	str	r2, [r7, #0]
 800382a:	2200      	movs	r2, #0
 800382c:	607a      	str	r2, [r7, #4]
 800382e:	6838      	ldr	r0, [r7, #0]
 8003830:	6879      	ldr	r1, [r7, #4]
 8003832:	0002      	movs	r2, r0
 8003834:	0f12      	lsrs	r2, r2, #28
 8003836:	000e      	movs	r6, r1
 8003838:	0135      	lsls	r5, r6, #4
 800383a:	4315      	orrs	r5, r2
 800383c:	0002      	movs	r2, r0
 800383e:	0114      	lsls	r4, r2, #4
 8003840:	005b      	lsls	r3, r3, #1
 8003842:	3307      	adds	r3, #7
 8003844:	08db      	lsrs	r3, r3, #3
 8003846:	00db      	lsls	r3, r3, #3
 8003848:	466a      	mov	r2, sp
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	469d      	mov	sp, r3
 800384e:	ab02      	add	r3, sp, #8
 8003850:	3301      	adds	r3, #1
 8003852:	085b      	lsrs	r3, r3, #1
 8003854:	005b      	lsls	r3, r3, #1
 8003856:	633b      	str	r3, [r7, #48]	@ 0x30
for(i=0; i<c; i++)
 8003858:	2326      	movs	r3, #38	@ 0x26
 800385a:	2118      	movs	r1, #24
 800385c:	185b      	adds	r3, r3, r1
 800385e:	19db      	adds	r3, r3, r7
 8003860:	2200      	movs	r2, #0
 8003862:	801a      	strh	r2, [r3, #0]
 8003864:	e04d      	b.n	8003902 <drawImage+0x142>
{
	ind = image[i][0];
 8003866:	2126      	movs	r1, #38	@ 0x26
 8003868:	2018      	movs	r0, #24
 800386a:	180b      	adds	r3, r1, r0
 800386c:	19db      	adds	r3, r3, r7
 800386e:	881b      	ldrh	r3, [r3, #0]
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003874:	18d2      	adds	r2, r2, r3
 8003876:	2316      	movs	r3, #22
 8003878:	181b      	adds	r3, r3, r0
 800387a:	19db      	adds	r3, r3, r7
 800387c:	8812      	ldrh	r2, [r2, #0]
 800387e:	801a      	strh	r2, [r3, #0]
	count = image[i][1];
 8003880:	180b      	adds	r3, r1, r0
 8003882:	19db      	adds	r3, r3, r7
 8003884:	881b      	ldrh	r3, [r3, #0]
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800388a:	18d2      	adds	r2, r2, r3
 800388c:	2314      	movs	r3, #20
 800388e:	181b      	adds	r3, r3, r0
 8003890:	19db      	adds	r3, r3, r7
 8003892:	8852      	ldrh	r2, [r2, #2]
 8003894:	801a      	strh	r2, [r3, #0]
	for(j=0; j<count; j++)
 8003896:	2324      	movs	r3, #36	@ 0x24
 8003898:	181b      	adds	r3, r3, r0
 800389a:	19db      	adds	r3, r3, r7
 800389c:	2200      	movs	r2, #0
 800389e:	801a      	strh	r2, [r3, #0]
 80038a0:	e01c      	b.n	80038dc <drawImage+0x11c>
	{
		bufffer[totalInd++] = palette[ind];
 80038a2:	2316      	movs	r3, #22
 80038a4:	2418      	movs	r4, #24
 80038a6:	191b      	adds	r3, r3, r4
 80038a8:	19db      	adds	r3, r3, r7
 80038aa:	881b      	ldrh	r3, [r3, #0]
 80038ac:	005b      	lsls	r3, r3, #1
 80038ae:	6a3a      	ldr	r2, [r7, #32]
 80038b0:	18d2      	adds	r2, r2, r3
 80038b2:	2122      	movs	r1, #34	@ 0x22
 80038b4:	190b      	adds	r3, r1, r4
 80038b6:	19db      	adds	r3, r3, r7
 80038b8:	881b      	ldrh	r3, [r3, #0]
 80038ba:	1909      	adds	r1, r1, r4
 80038bc:	19c9      	adds	r1, r1, r7
 80038be:	1c58      	adds	r0, r3, #1
 80038c0:	8008      	strh	r0, [r1, #0]
 80038c2:	0018      	movs	r0, r3
 80038c4:	8811      	ldrh	r1, [r2, #0]
 80038c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038c8:	0042      	lsls	r2, r0, #1
 80038ca:	52d1      	strh	r1, [r2, r3]
	for(j=0; j<count; j++)
 80038cc:	2124      	movs	r1, #36	@ 0x24
 80038ce:	190b      	adds	r3, r1, r4
 80038d0:	19db      	adds	r3, r3, r7
 80038d2:	881a      	ldrh	r2, [r3, #0]
 80038d4:	190b      	adds	r3, r1, r4
 80038d6:	19db      	adds	r3, r3, r7
 80038d8:	3201      	adds	r2, #1
 80038da:	801a      	strh	r2, [r3, #0]
 80038dc:	2324      	movs	r3, #36	@ 0x24
 80038de:	2018      	movs	r0, #24
 80038e0:	181b      	adds	r3, r3, r0
 80038e2:	19da      	adds	r2, r3, r7
 80038e4:	2314      	movs	r3, #20
 80038e6:	181b      	adds	r3, r3, r0
 80038e8:	19db      	adds	r3, r3, r7
 80038ea:	8812      	ldrh	r2, [r2, #0]
 80038ec:	881b      	ldrh	r3, [r3, #0]
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d3d7      	bcc.n	80038a2 <drawImage+0xe2>
for(i=0; i<c; i++)
 80038f2:	2126      	movs	r1, #38	@ 0x26
 80038f4:	180b      	adds	r3, r1, r0
 80038f6:	19db      	adds	r3, r3, r7
 80038f8:	881a      	ldrh	r2, [r3, #0]
 80038fa:	180b      	adds	r3, r1, r0
 80038fc:	19db      	adds	r3, r3, r7
 80038fe:	3201      	adds	r2, #1
 8003900:	801a      	strh	r2, [r3, #0]
 8003902:	2326      	movs	r3, #38	@ 0x26
 8003904:	2118      	movs	r1, #24
 8003906:	185b      	adds	r3, r3, r1
 8003908:	19da      	adds	r2, r3, r7
 800390a:	2348      	movs	r3, #72	@ 0x48
 800390c:	185b      	adds	r3, r3, r1
 800390e:	19db      	adds	r3, r3, r7
 8003910:	8812      	ldrh	r2, [r2, #0]
 8003912:	881b      	ldrh	r3, [r3, #0]
 8003914:	429a      	cmp	r2, r3
 8003916:	d3a6      	bcc.n	8003866 <drawImage+0xa6>
	}
}
ST7735_DrawImage(y, x, w, h, bufffer);
 8003918:	2344      	movs	r3, #68	@ 0x44
 800391a:	185b      	adds	r3, r3, r1
 800391c:	19db      	adds	r3, r3, r7
 800391e:	881c      	ldrh	r4, [r3, #0]
 8003920:	2340      	movs	r3, #64	@ 0x40
 8003922:	185b      	adds	r3, r3, r1
 8003924:	19db      	adds	r3, r3, r7
 8003926:	881a      	ldrh	r2, [r3, #0]
 8003928:	231e      	movs	r3, #30
 800392a:	18fb      	adds	r3, r7, r3
 800392c:	8819      	ldrh	r1, [r3, #0]
 800392e:	231c      	movs	r3, #28
 8003930:	18fb      	adds	r3, r7, r3
 8003932:	8818      	ldrh	r0, [r3, #0]
 8003934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003936:	9300      	str	r3, [sp, #0]
 8003938:	0023      	movs	r3, r4
 800393a:	f000 fa31 	bl	8003da0 <ST7735_DrawImage>
 800393e:	46c5      	mov	sp, r8
}
 8003940:	46c0      	nop			@ (mov r8, r8)
 8003942:	46bd      	mov	sp, r7
 8003944:	b010      	add	sp, #64	@ 0x40
 8003946:	bc80      	pop	{r7}
 8003948:	46b8      	mov	r8, r7
 800394a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800394c <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 800394c:	b580      	push	{r7, lr}
 800394e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8003950:	23a0      	movs	r3, #160	@ 0xa0
 8003952:	05db      	lsls	r3, r3, #23
 8003954:	2200      	movs	r2, #0
 8003956:	2120      	movs	r1, #32
 8003958:	0018      	movs	r0, r3
 800395a:	f002 fd9e 	bl	800649a <HAL_GPIO_WritePin>
}
 800395e:	46c0      	nop			@ (mov r8, r8)
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <ST7735_Unselect>:

void ST7735_Unselect()
{
 8003964:	b580      	push	{r7, lr}
 8003966:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8003968:	23a0      	movs	r3, #160	@ 0xa0
 800396a:	05db      	lsls	r3, r3, #23
 800396c:	2201      	movs	r2, #1
 800396e:	2120      	movs	r1, #32
 8003970:	0018      	movs	r0, r3
 8003972:	f002 fd92 	bl	800649a <HAL_GPIO_WritePin>
}
 8003976:	46c0      	nop			@ (mov r8, r8)
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <ST7735_Reset>:

void ST7735_Reset()
{
 800397c:	b580      	push	{r7, lr}
 800397e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 8003980:	2380      	movs	r3, #128	@ 0x80
 8003982:	0219      	lsls	r1, r3, #8
 8003984:	23a0      	movs	r3, #160	@ 0xa0
 8003986:	05db      	lsls	r3, r3, #23
 8003988:	2200      	movs	r2, #0
 800398a:	0018      	movs	r0, r3
 800398c:	f002 fd85 	bl	800649a <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8003990:	2005      	movs	r0, #5
 8003992:	f002 fb0b 	bl	8005fac <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 8003996:	2380      	movs	r3, #128	@ 0x80
 8003998:	0219      	lsls	r1, r3, #8
 800399a:	23a0      	movs	r3, #160	@ 0xa0
 800399c:	05db      	lsls	r3, r3, #23
 800399e:	2201      	movs	r2, #1
 80039a0:	0018      	movs	r0, r3
 80039a2:	f002 fd7a 	bl	800649a <HAL_GPIO_WritePin>
}
 80039a6:	46c0      	nop			@ (mov r8, r8)
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}

080039ac <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	0002      	movs	r2, r0
 80039b4:	1dfb      	adds	r3, r7, #7
 80039b6:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 80039b8:	23a0      	movs	r3, #160	@ 0xa0
 80039ba:	05db      	lsls	r3, r3, #23
 80039bc:	2200      	movs	r2, #0
 80039be:	2110      	movs	r1, #16
 80039c0:	0018      	movs	r0, r3
 80039c2:	f002 fd6a 	bl	800649a <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80039c6:	2301      	movs	r3, #1
 80039c8:	425b      	negs	r3, r3
 80039ca:	1df9      	adds	r1, r7, #7
 80039cc:	4803      	ldr	r0, [pc, #12]	@ (80039dc <ST7735_WriteCommand+0x30>)
 80039ce:	2201      	movs	r2, #1
 80039d0:	f004 fec6 	bl	8008760 <HAL_SPI_Transmit>
}
 80039d4:	46c0      	nop			@ (mov r8, r8)
 80039d6:	46bd      	mov	sp, r7
 80039d8:	b002      	add	sp, #8
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	200012ac 	.word	0x200012ac

080039e0 <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 80039ea:	23a0      	movs	r3, #160	@ 0xa0
 80039ec:	05db      	lsls	r3, r3, #23
 80039ee:	2201      	movs	r2, #1
 80039f0:	2110      	movs	r1, #16
 80039f2:	0018      	movs	r0, r3
 80039f4:	f002 fd51 	bl	800649a <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	b29a      	uxth	r2, r3
 80039fc:	2301      	movs	r3, #1
 80039fe:	425b      	negs	r3, r3
 8003a00:	6879      	ldr	r1, [r7, #4]
 8003a02:	4803      	ldr	r0, [pc, #12]	@ (8003a10 <ST7735_WriteData+0x30>)
 8003a04:	f004 feac 	bl	8008760 <HAL_SPI_Transmit>
}
 8003a08:	46c0      	nop			@ (mov r8, r8)
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	b002      	add	sp, #8
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	200012ac 	.word	0x200012ac

08003a14 <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 8003a14:	b590      	push	{r4, r7, lr}
 8003a16:	b085      	sub	sp, #20
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	1c5a      	adds	r2, r3, #1
 8003a20:	607a      	str	r2, [r7, #4]
 8003a22:	220f      	movs	r2, #15
 8003a24:	18ba      	adds	r2, r7, r2
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	7013      	strb	r3, [r2, #0]
    while(numCommands--) {
 8003a2a:	e04a      	b.n	8003ac2 <DisplayInit+0xae>
        uint8_t cmd = *addr++;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	1c5a      	adds	r2, r3, #1
 8003a30:	607a      	str	r2, [r7, #4]
 8003a32:	210b      	movs	r1, #11
 8003a34:	187a      	adds	r2, r7, r1
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	7013      	strb	r3, [r2, #0]
        ST7735_WriteCommand(cmd);
 8003a3a:	187b      	adds	r3, r7, r1
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	0018      	movs	r0, r3
 8003a40:	f7ff ffb4 	bl	80039ac <ST7735_WriteCommand>

        numArgs = *addr++;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	1c5a      	adds	r2, r3, #1
 8003a48:	607a      	str	r2, [r7, #4]
 8003a4a:	200a      	movs	r0, #10
 8003a4c:	183a      	adds	r2, r7, r0
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	7013      	strb	r3, [r2, #0]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8003a52:	183b      	adds	r3, r7, r0
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	b29a      	uxth	r2, r3
 8003a58:	230c      	movs	r3, #12
 8003a5a:	18fb      	adds	r3, r7, r3
 8003a5c:	2180      	movs	r1, #128	@ 0x80
 8003a5e:	400a      	ands	r2, r1
 8003a60:	801a      	strh	r2, [r3, #0]
        numArgs &= ~DELAY;
 8003a62:	183b      	adds	r3, r7, r0
 8003a64:	183a      	adds	r2, r7, r0
 8003a66:	7812      	ldrb	r2, [r2, #0]
 8003a68:	217f      	movs	r1, #127	@ 0x7f
 8003a6a:	400a      	ands	r2, r1
 8003a6c:	701a      	strb	r2, [r3, #0]
        if(numArgs) {
 8003a6e:	183b      	adds	r3, r7, r0
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d00c      	beq.n	8003a90 <DisplayInit+0x7c>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8003a76:	0004      	movs	r4, r0
 8003a78:	183b      	adds	r3, r7, r0
 8003a7a:	781a      	ldrb	r2, [r3, #0]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	0011      	movs	r1, r2
 8003a80:	0018      	movs	r0, r3
 8003a82:	f7ff ffad 	bl	80039e0 <ST7735_WriteData>
            addr += numArgs;
 8003a86:	193b      	adds	r3, r7, r4
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	18d3      	adds	r3, r2, r3
 8003a8e:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8003a90:	210c      	movs	r1, #12
 8003a92:	187b      	adds	r3, r7, r1
 8003a94:	881b      	ldrh	r3, [r3, #0]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d013      	beq.n	8003ac2 <DisplayInit+0xae>
            ms = *addr++;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	1c5a      	adds	r2, r3, #1
 8003a9e:	607a      	str	r2, [r7, #4]
 8003aa0:	781a      	ldrb	r2, [r3, #0]
 8003aa2:	187b      	adds	r3, r7, r1
 8003aa4:	801a      	strh	r2, [r3, #0]
            if(ms == 255) ms = 500;
 8003aa6:	187b      	adds	r3, r7, r1
 8003aa8:	881b      	ldrh	r3, [r3, #0]
 8003aaa:	2bff      	cmp	r3, #255	@ 0xff
 8003aac:	d103      	bne.n	8003ab6 <DisplayInit+0xa2>
 8003aae:	187b      	adds	r3, r7, r1
 8003ab0:	22fa      	movs	r2, #250	@ 0xfa
 8003ab2:	0052      	lsls	r2, r2, #1
 8003ab4:	801a      	strh	r2, [r3, #0]
            HAL_Delay(ms);
 8003ab6:	230c      	movs	r3, #12
 8003ab8:	18fb      	adds	r3, r7, r3
 8003aba:	881b      	ldrh	r3, [r3, #0]
 8003abc:	0018      	movs	r0, r3
 8003abe:	f002 fa75 	bl	8005fac <HAL_Delay>
    while(numCommands--) {
 8003ac2:	220f      	movs	r2, #15
 8003ac4:	18bb      	adds	r3, r7, r2
 8003ac6:	781b      	ldrb	r3, [r3, #0]
 8003ac8:	18ba      	adds	r2, r7, r2
 8003aca:	1e59      	subs	r1, r3, #1
 8003acc:	7011      	strb	r1, [r2, #0]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d1ac      	bne.n	8003a2c <DisplayInit+0x18>
        }
    }
}
 8003ad2:	46c0      	nop			@ (mov r8, r8)
 8003ad4:	46c0      	nop			@ (mov r8, r8)
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	b005      	add	sp, #20
 8003ada:	bd90      	pop	{r4, r7, pc}

08003adc <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8003adc:	b5b0      	push	{r4, r5, r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	0005      	movs	r5, r0
 8003ae4:	000c      	movs	r4, r1
 8003ae6:	0010      	movs	r0, r2
 8003ae8:	0019      	movs	r1, r3
 8003aea:	1dfb      	adds	r3, r7, #7
 8003aec:	1c2a      	adds	r2, r5, #0
 8003aee:	701a      	strb	r2, [r3, #0]
 8003af0:	1dbb      	adds	r3, r7, #6
 8003af2:	1c22      	adds	r2, r4, #0
 8003af4:	701a      	strb	r2, [r3, #0]
 8003af6:	1d7b      	adds	r3, r7, #5
 8003af8:	1c02      	adds	r2, r0, #0
 8003afa:	701a      	strb	r2, [r3, #0]
 8003afc:	1d3b      	adds	r3, r7, #4
 8003afe:	1c0a      	adds	r2, r1, #0
 8003b00:	701a      	strb	r2, [r3, #0]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8003b02:	202a      	movs	r0, #42	@ 0x2a
 8003b04:	f7ff ff52 	bl	80039ac <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 8003b08:	210c      	movs	r1, #12
 8003b0a:	187b      	adds	r3, r7, r1
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	701a      	strb	r2, [r3, #0]
 8003b10:	4b1c      	ldr	r3, [pc, #112]	@ (8003b84 <ST7735_SetAddressWindow+0xa8>)
 8003b12:	781a      	ldrb	r2, [r3, #0]
 8003b14:	1dfb      	adds	r3, r7, #7
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	18d3      	adds	r3, r2, r3
 8003b1a:	b2da      	uxtb	r2, r3
 8003b1c:	187b      	adds	r3, r7, r1
 8003b1e:	705a      	strb	r2, [r3, #1]
 8003b20:	187b      	adds	r3, r7, r1
 8003b22:	2200      	movs	r2, #0
 8003b24:	709a      	strb	r2, [r3, #2]
 8003b26:	4b17      	ldr	r3, [pc, #92]	@ (8003b84 <ST7735_SetAddressWindow+0xa8>)
 8003b28:	781a      	ldrb	r2, [r3, #0]
 8003b2a:	1d7b      	adds	r3, r7, #5
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	18d3      	adds	r3, r2, r3
 8003b30:	b2da      	uxtb	r2, r3
 8003b32:	187b      	adds	r3, r7, r1
 8003b34:	70da      	strb	r2, [r3, #3]
    ST7735_WriteData(data, sizeof(data));
 8003b36:	000c      	movs	r4, r1
 8003b38:	187b      	adds	r3, r7, r1
 8003b3a:	2104      	movs	r1, #4
 8003b3c:	0018      	movs	r0, r3
 8003b3e:	f7ff ff4f 	bl	80039e0 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8003b42:	202b      	movs	r0, #43	@ 0x2b
 8003b44:	f7ff ff32 	bl	80039ac <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 8003b48:	4b0f      	ldr	r3, [pc, #60]	@ (8003b88 <ST7735_SetAddressWindow+0xac>)
 8003b4a:	781a      	ldrb	r2, [r3, #0]
 8003b4c:	1dbb      	adds	r3, r7, #6
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	18d3      	adds	r3, r2, r3
 8003b52:	b2da      	uxtb	r2, r3
 8003b54:	0021      	movs	r1, r4
 8003b56:	187b      	adds	r3, r7, r1
 8003b58:	705a      	strb	r2, [r3, #1]
    data[3] = y1 + _ystart;
 8003b5a:	4b0b      	ldr	r3, [pc, #44]	@ (8003b88 <ST7735_SetAddressWindow+0xac>)
 8003b5c:	781a      	ldrb	r2, [r3, #0]
 8003b5e:	1d3b      	adds	r3, r7, #4
 8003b60:	781b      	ldrb	r3, [r3, #0]
 8003b62:	18d3      	adds	r3, r2, r3
 8003b64:	b2da      	uxtb	r2, r3
 8003b66:	187b      	adds	r3, r7, r1
 8003b68:	70da      	strb	r2, [r3, #3]
    ST7735_WriteData(data, sizeof(data));
 8003b6a:	187b      	adds	r3, r7, r1
 8003b6c:	2104      	movs	r1, #4
 8003b6e:	0018      	movs	r0, r3
 8003b70:	f7ff ff36 	bl	80039e0 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8003b74:	202c      	movs	r0, #44	@ 0x2c
 8003b76:	f7ff ff19 	bl	80039ac <ST7735_WriteCommand>
}
 8003b7a:	46c0      	nop			@ (mov r8, r8)
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	b004      	add	sp, #16
 8003b80:	bdb0      	pop	{r4, r5, r7, pc}
 8003b82:	46c0      	nop			@ (mov r8, r8)
 8003b84:	20000f13 	.word	0x20000f13
 8003b88:	20000f14 	.word	0x20000f14

08003b8c <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b082      	sub	sp, #8
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	0002      	movs	r2, r0
 8003b94:	1dfb      	adds	r3, r7, #7
 8003b96:	701a      	strb	r2, [r3, #0]
    ST7735_Select();
 8003b98:	f7ff fed8 	bl	800394c <ST7735_Select>
    ST7735_Reset();
 8003b9c:	f7ff feee 	bl	800397c <ST7735_Reset>
    DisplayInit(init_cmds1);
 8003ba0:	4b0e      	ldr	r3, [pc, #56]	@ (8003bdc <ST7735_Init+0x50>)
 8003ba2:	0018      	movs	r0, r3
 8003ba4:	f7ff ff36 	bl	8003a14 <DisplayInit>
    DisplayInit(init_cmds2);
 8003ba8:	4b0d      	ldr	r3, [pc, #52]	@ (8003be0 <ST7735_Init+0x54>)
 8003baa:	0018      	movs	r0, r3
 8003bac:	f7ff ff32 	bl	8003a14 <DisplayInit>
    DisplayInit(init_cmds3);
 8003bb0:	4b0c      	ldr	r3, [pc, #48]	@ (8003be4 <ST7735_Init+0x58>)
 8003bb2:	0018      	movs	r0, r3
 8003bb4:	f7ff ff2e 	bl	8003a14 <DisplayInit>

#elif ST7735_IS_128X128
    _colstart = 2;
    _rowstart = 3;
#else
    _colstart = 0;
 8003bb8:	4b0b      	ldr	r3, [pc, #44]	@ (8003be8 <ST7735_Init+0x5c>)
 8003bba:	2200      	movs	r2, #0
 8003bbc:	701a      	strb	r2, [r3, #0]
    _rowstart = 0;
 8003bbe:	4b0b      	ldr	r3, [pc, #44]	@ (8003bec <ST7735_Init+0x60>)
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	701a      	strb	r2, [r3, #0]
#endif
    ST7735_SetRotation (rotation);
 8003bc4:	1dfb      	adds	r3, r7, #7
 8003bc6:	781b      	ldrb	r3, [r3, #0]
 8003bc8:	0018      	movs	r0, r3
 8003bca:	f000 f811 	bl	8003bf0 <ST7735_SetRotation>
    ST7735_Unselect();
 8003bce:	f7ff fec9 	bl	8003964 <ST7735_Unselect>

}
 8003bd2:	46c0      	nop			@ (mov r8, r8)
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	b002      	add	sp, #8
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	46c0      	nop			@ (mov r8, r8)
 8003bdc:	0800bfb0 	.word	0x0800bfb0
 8003be0:	0800bfe8 	.word	0x0800bfe8
 8003be4:	0800bff8 	.word	0x0800bff8
 8003be8:	20000f11 	.word	0x20000f11
 8003bec:	20000f12 	.word	0x20000f12

08003bf0 <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	0002      	movs	r2, r0
 8003bf8:	1dfb      	adds	r3, r7, #7
 8003bfa:	701a      	strb	r2, [r3, #0]

  uint8_t madctl = 0;
 8003bfc:	230f      	movs	r3, #15
 8003bfe:	18fb      	adds	r3, r7, r3
 8003c00:	2200      	movs	r2, #0
 8003c02:	701a      	strb	r2, [r3, #0]

  rotation = m % 4; // can't be higher than 3
 8003c04:	1dfb      	adds	r3, r7, #7
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	2203      	movs	r2, #3
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	b2da      	uxtb	r2, r3
 8003c0e:	4b36      	ldr	r3, [pc, #216]	@ (8003ce8 <ST7735_SetRotation+0xf8>)
 8003c10:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 8003c12:	4b35      	ldr	r3, [pc, #212]	@ (8003ce8 <ST7735_SetRotation+0xf8>)
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	2b03      	cmp	r3, #3
 8003c18:	d041      	beq.n	8003c9e <ST7735_SetRotation+0xae>
 8003c1a:	dc53      	bgt.n	8003cc4 <ST7735_SetRotation+0xd4>
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d02b      	beq.n	8003c78 <ST7735_SetRotation+0x88>
 8003c20:	dc50      	bgt.n	8003cc4 <ST7735_SetRotation+0xd4>
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d002      	beq.n	8003c2c <ST7735_SetRotation+0x3c>
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d013      	beq.n	8003c52 <ST7735_SetRotation+0x62>
 8003c2a:	e04b      	b.n	8003cc4 <ST7735_SetRotation+0xd4>
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 8003c2c:	230f      	movs	r3, #15
 8003c2e:	18fb      	adds	r3, r7, r3
 8003c30:	22c0      	movs	r2, #192	@ 0xc0
 8003c32:	701a      	strb	r2, [r3, #0]
      _height = ST7735_HEIGHT;
 8003c34:	4b2d      	ldr	r3, [pc, #180]	@ (8003cec <ST7735_SetRotation+0xfc>)
 8003c36:	22a0      	movs	r2, #160	@ 0xa0
 8003c38:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8003c3a:	4b2d      	ldr	r3, [pc, #180]	@ (8003cf0 <ST7735_SetRotation+0x100>)
 8003c3c:	2280      	movs	r2, #128	@ 0x80
 8003c3e:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 8003c40:	4b2c      	ldr	r3, [pc, #176]	@ (8003cf4 <ST7735_SetRotation+0x104>)
 8003c42:	781a      	ldrb	r2, [r3, #0]
 8003c44:	4b2c      	ldr	r3, [pc, #176]	@ (8003cf8 <ST7735_SetRotation+0x108>)
 8003c46:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 8003c48:	4b2c      	ldr	r3, [pc, #176]	@ (8003cfc <ST7735_SetRotation+0x10c>)
 8003c4a:	781a      	ldrb	r2, [r3, #0]
 8003c4c:	4b2c      	ldr	r3, [pc, #176]	@ (8003d00 <ST7735_SetRotation+0x110>)
 8003c4e:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8003c50:	e038      	b.n	8003cc4 <ST7735_SetRotation+0xd4>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8003c52:	230f      	movs	r3, #15
 8003c54:	18fb      	adds	r3, r7, r3
 8003c56:	22a0      	movs	r2, #160	@ 0xa0
 8003c58:	701a      	strb	r2, [r3, #0]
      _width = ST7735_HEIGHT;
 8003c5a:	4b25      	ldr	r3, [pc, #148]	@ (8003cf0 <ST7735_SetRotation+0x100>)
 8003c5c:	22a0      	movs	r2, #160	@ 0xa0
 8003c5e:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8003c60:	4b22      	ldr	r3, [pc, #136]	@ (8003cec <ST7735_SetRotation+0xfc>)
 8003c62:	2280      	movs	r2, #128	@ 0x80
 8003c64:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8003c66:	4b23      	ldr	r3, [pc, #140]	@ (8003cf4 <ST7735_SetRotation+0x104>)
 8003c68:	781a      	ldrb	r2, [r3, #0]
 8003c6a:	4b25      	ldr	r3, [pc, #148]	@ (8003d00 <ST7735_SetRotation+0x110>)
 8003c6c:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8003c6e:	4b23      	ldr	r3, [pc, #140]	@ (8003cfc <ST7735_SetRotation+0x10c>)
 8003c70:	781a      	ldrb	r2, [r3, #0]
 8003c72:	4b21      	ldr	r3, [pc, #132]	@ (8003cf8 <ST7735_SetRotation+0x108>)
 8003c74:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8003c76:	e025      	b.n	8003cc4 <ST7735_SetRotation+0xd4>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 8003c78:	230f      	movs	r3, #15
 8003c7a:	18fb      	adds	r3, r7, r3
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	701a      	strb	r2, [r3, #0]
      _height = ST7735_HEIGHT;
 8003c80:	4b1a      	ldr	r3, [pc, #104]	@ (8003cec <ST7735_SetRotation+0xfc>)
 8003c82:	22a0      	movs	r2, #160	@ 0xa0
 8003c84:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8003c86:	4b1a      	ldr	r3, [pc, #104]	@ (8003cf0 <ST7735_SetRotation+0x100>)
 8003c88:	2280      	movs	r2, #128	@ 0x80
 8003c8a:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 8003c8c:	4b19      	ldr	r3, [pc, #100]	@ (8003cf4 <ST7735_SetRotation+0x104>)
 8003c8e:	781a      	ldrb	r2, [r3, #0]
 8003c90:	4b19      	ldr	r3, [pc, #100]	@ (8003cf8 <ST7735_SetRotation+0x108>)
 8003c92:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 8003c94:	4b19      	ldr	r3, [pc, #100]	@ (8003cfc <ST7735_SetRotation+0x10c>)
 8003c96:	781a      	ldrb	r2, [r3, #0]
 8003c98:	4b19      	ldr	r3, [pc, #100]	@ (8003d00 <ST7735_SetRotation+0x110>)
 8003c9a:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8003c9c:	e012      	b.n	8003cc4 <ST7735_SetRotation+0xd4>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8003c9e:	230f      	movs	r3, #15
 8003ca0:	18fb      	adds	r3, r7, r3
 8003ca2:	2260      	movs	r2, #96	@ 0x60
 8003ca4:	701a      	strb	r2, [r3, #0]
      _width = ST7735_HEIGHT;
 8003ca6:	4b12      	ldr	r3, [pc, #72]	@ (8003cf0 <ST7735_SetRotation+0x100>)
 8003ca8:	22a0      	movs	r2, #160	@ 0xa0
 8003caa:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8003cac:	4b0f      	ldr	r3, [pc, #60]	@ (8003cec <ST7735_SetRotation+0xfc>)
 8003cae:	2280      	movs	r2, #128	@ 0x80
 8003cb0:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8003cb2:	4b10      	ldr	r3, [pc, #64]	@ (8003cf4 <ST7735_SetRotation+0x104>)
 8003cb4:	781a      	ldrb	r2, [r3, #0]
 8003cb6:	4b12      	ldr	r3, [pc, #72]	@ (8003d00 <ST7735_SetRotation+0x110>)
 8003cb8:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8003cba:	4b10      	ldr	r3, [pc, #64]	@ (8003cfc <ST7735_SetRotation+0x10c>)
 8003cbc:	781a      	ldrb	r2, [r3, #0]
 8003cbe:	4b0e      	ldr	r3, [pc, #56]	@ (8003cf8 <ST7735_SetRotation+0x108>)
 8003cc0:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8003cc2:	46c0      	nop			@ (mov r8, r8)
  }
  ST7735_Select();
 8003cc4:	f7ff fe42 	bl	800394c <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 8003cc8:	2036      	movs	r0, #54	@ 0x36
 8003cca:	f7ff fe6f 	bl	80039ac <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 8003cce:	230f      	movs	r3, #15
 8003cd0:	18fb      	adds	r3, r7, r3
 8003cd2:	2101      	movs	r1, #1
 8003cd4:	0018      	movs	r0, r3
 8003cd6:	f7ff fe83 	bl	80039e0 <ST7735_WriteData>
  ST7735_Unselect();
 8003cda:	f7ff fe43 	bl	8003964 <ST7735_Unselect>
}
 8003cde:	46c0      	nop			@ (mov r8, r8)
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	b004      	add	sp, #16
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	46c0      	nop			@ (mov r8, r8)
 8003ce8:	20000f10 	.word	0x20000f10
 8003cec:	20000f0e 	.word	0x20000f0e
 8003cf0:	20000f0c 	.word	0x20000f0c
 8003cf4:	20000f11 	.word	0x20000f11
 8003cf8:	20000f13 	.word	0x20000f13
 8003cfc:	20000f12 	.word	0x20000f12
 8003d00:	20000f14 	.word	0x20000f14

08003d04 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8003d04:	b590      	push	{r4, r7, lr}
 8003d06:	b085      	sub	sp, #20
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	0004      	movs	r4, r0
 8003d0c:	0008      	movs	r0, r1
 8003d0e:	0011      	movs	r1, r2
 8003d10:	1dbb      	adds	r3, r7, #6
 8003d12:	1c22      	adds	r2, r4, #0
 8003d14:	801a      	strh	r2, [r3, #0]
 8003d16:	1d3b      	adds	r3, r7, #4
 8003d18:	1c02      	adds	r2, r0, #0
 8003d1a:	801a      	strh	r2, [r3, #0]
 8003d1c:	1cbb      	adds	r3, r7, #2
 8003d1e:	1c0a      	adds	r2, r1, #0
 8003d20:	801a      	strh	r2, [r3, #0]
    if((x >= _width) || (y >= _height))
 8003d22:	1dbb      	adds	r3, r7, #6
 8003d24:	881b      	ldrh	r3, [r3, #0]
 8003d26:	4a1c      	ldr	r2, [pc, #112]	@ (8003d98 <ST7735_DrawPixel+0x94>)
 8003d28:	2100      	movs	r1, #0
 8003d2a:	5e52      	ldrsh	r2, [r2, r1]
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	da2f      	bge.n	8003d90 <ST7735_DrawPixel+0x8c>
 8003d30:	1d3b      	adds	r3, r7, #4
 8003d32:	881b      	ldrh	r3, [r3, #0]
 8003d34:	4a19      	ldr	r2, [pc, #100]	@ (8003d9c <ST7735_DrawPixel+0x98>)
 8003d36:	2100      	movs	r1, #0
 8003d38:	5e52      	ldrsh	r2, [r2, r1]
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	da28      	bge.n	8003d90 <ST7735_DrawPixel+0x8c>
        return;

    ST7735_Select();
 8003d3e:	f7ff fe05 	bl	800394c <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 8003d42:	1dbb      	adds	r3, r7, #6
 8003d44:	881b      	ldrh	r3, [r3, #0]
 8003d46:	b2d8      	uxtb	r0, r3
 8003d48:	1d3b      	adds	r3, r7, #4
 8003d4a:	881b      	ldrh	r3, [r3, #0]
 8003d4c:	b2d9      	uxtb	r1, r3
 8003d4e:	1dbb      	adds	r3, r7, #6
 8003d50:	881b      	ldrh	r3, [r3, #0]
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	3301      	adds	r3, #1
 8003d56:	b2da      	uxtb	r2, r3
 8003d58:	1d3b      	adds	r3, r7, #4
 8003d5a:	881b      	ldrh	r3, [r3, #0]
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	3301      	adds	r3, #1
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	f7ff febb 	bl	8003adc <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 8003d66:	1cbb      	adds	r3, r7, #2
 8003d68:	881b      	ldrh	r3, [r3, #0]
 8003d6a:	0a1b      	lsrs	r3, r3, #8
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	b2da      	uxtb	r2, r3
 8003d70:	210c      	movs	r1, #12
 8003d72:	187b      	adds	r3, r7, r1
 8003d74:	701a      	strb	r2, [r3, #0]
 8003d76:	1cbb      	adds	r3, r7, #2
 8003d78:	881b      	ldrh	r3, [r3, #0]
 8003d7a:	b2da      	uxtb	r2, r3
 8003d7c:	187b      	adds	r3, r7, r1
 8003d7e:	705a      	strb	r2, [r3, #1]
    ST7735_WriteData(data, sizeof(data));
 8003d80:	187b      	adds	r3, r7, r1
 8003d82:	2102      	movs	r1, #2
 8003d84:	0018      	movs	r0, r3
 8003d86:	f7ff fe2b 	bl	80039e0 <ST7735_WriteData>

    ST7735_Unselect();
 8003d8a:	f7ff fdeb 	bl	8003964 <ST7735_Unselect>
 8003d8e:	e000      	b.n	8003d92 <ST7735_DrawPixel+0x8e>
        return;
 8003d90:	46c0      	nop			@ (mov r8, r8)
}
 8003d92:	46bd      	mov	sp, r7
 8003d94:	b005      	add	sp, #20
 8003d96:	bd90      	pop	{r4, r7, pc}
 8003d98:	20000f0c 	.word	0x20000f0c
 8003d9c:	20000f0e 	.word	0x20000f0e

08003da0 <ST7735_DrawImage>:
    }

    ST7735_Unselect();
}

void ST7735_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data) {
 8003da0:	b5b0      	push	{r4, r5, r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	0005      	movs	r5, r0
 8003da8:	000c      	movs	r4, r1
 8003daa:	0010      	movs	r0, r2
 8003dac:	0019      	movs	r1, r3
 8003dae:	1dbb      	adds	r3, r7, #6
 8003db0:	1c2a      	adds	r2, r5, #0
 8003db2:	801a      	strh	r2, [r3, #0]
 8003db4:	1d3b      	adds	r3, r7, #4
 8003db6:	1c22      	adds	r2, r4, #0
 8003db8:	801a      	strh	r2, [r3, #0]
 8003dba:	1cbb      	adds	r3, r7, #2
 8003dbc:	1c02      	adds	r2, r0, #0
 8003dbe:	801a      	strh	r2, [r3, #0]
 8003dc0:	003b      	movs	r3, r7
 8003dc2:	1c0a      	adds	r2, r1, #0
 8003dc4:	801a      	strh	r2, [r3, #0]
    if((x >= _width) || (y >= _height)) return;
 8003dc6:	1dbb      	adds	r3, r7, #6
 8003dc8:	881b      	ldrh	r3, [r3, #0]
 8003dca:	4a2a      	ldr	r2, [pc, #168]	@ (8003e74 <ST7735_DrawImage+0xd4>)
 8003dcc:	2100      	movs	r1, #0
 8003dce:	5e52      	ldrsh	r2, [r2, r1]
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	da47      	bge.n	8003e64 <ST7735_DrawImage+0xc4>
 8003dd4:	1d3b      	adds	r3, r7, #4
 8003dd6:	881b      	ldrh	r3, [r3, #0]
 8003dd8:	4a27      	ldr	r2, [pc, #156]	@ (8003e78 <ST7735_DrawImage+0xd8>)
 8003dda:	2100      	movs	r1, #0
 8003ddc:	5e52      	ldrsh	r2, [r2, r1]
 8003dde:	4293      	cmp	r3, r2
 8003de0:	da40      	bge.n	8003e64 <ST7735_DrawImage+0xc4>
    if((x + w - 1) >= _width) return;
 8003de2:	1dbb      	adds	r3, r7, #6
 8003de4:	881a      	ldrh	r2, [r3, #0]
 8003de6:	1cbb      	adds	r3, r7, #2
 8003de8:	881b      	ldrh	r3, [r3, #0]
 8003dea:	18d3      	adds	r3, r2, r3
 8003dec:	4a21      	ldr	r2, [pc, #132]	@ (8003e74 <ST7735_DrawImage+0xd4>)
 8003dee:	2100      	movs	r1, #0
 8003df0:	5e52      	ldrsh	r2, [r2, r1]
 8003df2:	4293      	cmp	r3, r2
 8003df4:	dc38      	bgt.n	8003e68 <ST7735_DrawImage+0xc8>
    if((y + h - 1) >= _height) return;
 8003df6:	1d3b      	adds	r3, r7, #4
 8003df8:	881a      	ldrh	r2, [r3, #0]
 8003dfa:	003b      	movs	r3, r7
 8003dfc:	881b      	ldrh	r3, [r3, #0]
 8003dfe:	18d3      	adds	r3, r2, r3
 8003e00:	4a1d      	ldr	r2, [pc, #116]	@ (8003e78 <ST7735_DrawImage+0xd8>)
 8003e02:	2100      	movs	r1, #0
 8003e04:	5e52      	ldrsh	r2, [r2, r1]
 8003e06:	4293      	cmp	r3, r2
 8003e08:	dc30      	bgt.n	8003e6c <ST7735_DrawImage+0xcc>

    ST7735_Select();
 8003e0a:	f7ff fd9f 	bl	800394c <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8003e0e:	1dbb      	adds	r3, r7, #6
 8003e10:	881b      	ldrh	r3, [r3, #0]
 8003e12:	b2d8      	uxtb	r0, r3
 8003e14:	1d3b      	adds	r3, r7, #4
 8003e16:	881b      	ldrh	r3, [r3, #0]
 8003e18:	b2d9      	uxtb	r1, r3
 8003e1a:	1dbb      	adds	r3, r7, #6
 8003e1c:	881b      	ldrh	r3, [r3, #0]
 8003e1e:	b2da      	uxtb	r2, r3
 8003e20:	1cbb      	adds	r3, r7, #2
 8003e22:	881b      	ldrh	r3, [r3, #0]
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	18d3      	adds	r3, r2, r3
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	3b01      	subs	r3, #1
 8003e2c:	b2dc      	uxtb	r4, r3
 8003e2e:	1d3b      	adds	r3, r7, #4
 8003e30:	881b      	ldrh	r3, [r3, #0]
 8003e32:	b2da      	uxtb	r2, r3
 8003e34:	003b      	movs	r3, r7
 8003e36:	881b      	ldrh	r3, [r3, #0]
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	18d3      	adds	r3, r2, r3
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	3b01      	subs	r3, #1
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	0022      	movs	r2, r4
 8003e44:	f7ff fe4a 	bl	8003adc <ST7735_SetAddressWindow>
    ST7735_WriteData((uint8_t*)data, sizeof(uint16_t)*w*h);
 8003e48:	1cbb      	adds	r3, r7, #2
 8003e4a:	881b      	ldrh	r3, [r3, #0]
 8003e4c:	003a      	movs	r2, r7
 8003e4e:	8812      	ldrh	r2, [r2, #0]
 8003e50:	4353      	muls	r3, r2
 8003e52:	005a      	lsls	r2, r3, #1
 8003e54:	69bb      	ldr	r3, [r7, #24]
 8003e56:	0011      	movs	r1, r2
 8003e58:	0018      	movs	r0, r3
 8003e5a:	f7ff fdc1 	bl	80039e0 <ST7735_WriteData>
    ST7735_Unselect();
 8003e5e:	f7ff fd81 	bl	8003964 <ST7735_Unselect>
 8003e62:	e004      	b.n	8003e6e <ST7735_DrawImage+0xce>
    if((x >= _width) || (y >= _height)) return;
 8003e64:	46c0      	nop			@ (mov r8, r8)
 8003e66:	e002      	b.n	8003e6e <ST7735_DrawImage+0xce>
    if((x + w - 1) >= _width) return;
 8003e68:	46c0      	nop			@ (mov r8, r8)
 8003e6a:	e000      	b.n	8003e6e <ST7735_DrawImage+0xce>
    if((y + h - 1) >= _height) return;
 8003e6c:	46c0      	nop			@ (mov r8, r8)
}
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	b002      	add	sp, #8
 8003e72:	bdb0      	pop	{r4, r5, r7, pc}
 8003e74:	20000f0c 	.word	0x20000f0c
 8003e78:	20000f0e 	.word	0x20000f0e

08003e7c <minmea_tocoord>:
/**
 * Convert a raw coordinate to a floating point DD.DDD... value.
 * Returns NaN for "unknown" values.
 */
static inline float minmea_tocoord(struct minmea_float *f)
{
 8003e7c:	b5b0      	push	{r4, r5, r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
    if (f->scale == 0)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d101      	bne.n	8003e90 <minmea_tocoord+0x14>
        return NAN;
 8003e8c:	4b1c      	ldr	r3, [pc, #112]	@ (8003f00 <minmea_tocoord+0x84>)
 8003e8e:	e033      	b.n	8003ef8 <minmea_tocoord+0x7c>
    int_least32_t degrees = f->value / (f->scale * 100);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	2164      	movs	r1, #100	@ 0x64
 8003e9a:	434b      	muls	r3, r1
 8003e9c:	0019      	movs	r1, r3
 8003e9e:	0010      	movs	r0, r2
 8003ea0:	f7fc f9ce 	bl	8000240 <__divsi3>
 8003ea4:	0003      	movs	r3, r0
 8003ea6:	60fb      	str	r3, [r7, #12]
    int_least32_t minutes = f->value % (f->scale * 100);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	2164      	movs	r1, #100	@ 0x64
 8003eb2:	434b      	muls	r3, r1
 8003eb4:	0019      	movs	r1, r3
 8003eb6:	0010      	movs	r0, r2
 8003eb8:	f7fc faa8 	bl	800040c <__aeabi_idivmod>
 8003ebc:	000b      	movs	r3, r1
 8003ebe:	60bb      	str	r3, [r7, #8]
    return (float) degrees + (float) minutes / (60 * f->scale);
 8003ec0:	68f8      	ldr	r0, [r7, #12]
 8003ec2:	f7fd fa97 	bl	80013f4 <__aeabi_i2f>
 8003ec6:	1c04      	adds	r4, r0, #0
 8003ec8:	68b8      	ldr	r0, [r7, #8]
 8003eca:	f7fd fa93 	bl	80013f4 <__aeabi_i2f>
 8003ece:	1c05      	adds	r5, r0, #0
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	685a      	ldr	r2, [r3, #4]
 8003ed4:	0013      	movs	r3, r2
 8003ed6:	011b      	lsls	r3, r3, #4
 8003ed8:	1a9b      	subs	r3, r3, r2
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	0018      	movs	r0, r3
 8003ede:	f7fd fa89 	bl	80013f4 <__aeabi_i2f>
 8003ee2:	1c03      	adds	r3, r0, #0
 8003ee4:	1c19      	adds	r1, r3, #0
 8003ee6:	1c28      	adds	r0, r5, #0
 8003ee8:	f7fc fd9c 	bl	8000a24 <__aeabi_fdiv>
 8003eec:	1c03      	adds	r3, r0, #0
 8003eee:	1c19      	adds	r1, r3, #0
 8003ef0:	1c20      	adds	r0, r4, #0
 8003ef2:	f7fc fc0d 	bl	8000710 <__aeabi_fadd>
 8003ef6:	1c03      	adds	r3, r0, #0
}
 8003ef8:	1c18      	adds	r0, r3, #0
 8003efa:	46bd      	mov	sp, r7
 8003efc:	b004      	add	sp, #16
 8003efe:	bdb0      	pop	{r4, r5, r7, pc}
 8003f00:	7fc00000 	.word	0x7fc00000

08003f04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003f04:	b590      	push	{r4, r7, lr}
 8003f06:	b087      	sub	sp, #28
 8003f08:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003f0a:	f001 ffc9 	bl	8005ea0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003f0e:	f000 fb5b 	bl	80045c8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  steps=0;
 8003f12:	4bba      	ldr	r3, [pc, #744]	@ (80041fc <main+0x2f8>)
 8003f14:	2200      	movs	r2, #0
 8003f16:	701a      	strb	r2, [r3, #0]
  sitting0.Body = *imgSitting0;
 8003f18:	4bb9      	ldr	r3, [pc, #740]	@ (8004200 <main+0x2fc>)
 8003f1a:	4aba      	ldr	r2, [pc, #744]	@ (8004204 <main+0x300>)
 8003f1c:	601a      	str	r2, [r3, #0]
  sitting0.Size = 307;
 8003f1e:	4bb8      	ldr	r3, [pc, #736]	@ (8004200 <main+0x2fc>)
 8003f20:	2234      	movs	r2, #52	@ 0x34
 8003f22:	32ff      	adds	r2, #255	@ 0xff
 8003f24:	605a      	str	r2, [r3, #4]
  sitting1.Body = *imgSitting1;
 8003f26:	4bb8      	ldr	r3, [pc, #736]	@ (8004208 <main+0x304>)
 8003f28:	4ab8      	ldr	r2, [pc, #736]	@ (800420c <main+0x308>)
 8003f2a:	601a      	str	r2, [r3, #0]
  sitting1.Size = 305;
 8003f2c:	4bb6      	ldr	r3, [pc, #728]	@ (8004208 <main+0x304>)
 8003f2e:	2232      	movs	r2, #50	@ 0x32
 8003f30:	32ff      	adds	r2, #255	@ 0xff
 8003f32:	605a      	str	r2, [r3, #4]
  animSitting[0] = sitting0;
 8003f34:	4bb6      	ldr	r3, [pc, #728]	@ (8004210 <main+0x30c>)
 8003f36:	4ab2      	ldr	r2, [pc, #712]	@ (8004200 <main+0x2fc>)
 8003f38:	ca03      	ldmia	r2!, {r0, r1}
 8003f3a:	c303      	stmia	r3!, {r0, r1}
  animSitting[1] = sitting1;
 8003f3c:	4bb4      	ldr	r3, [pc, #720]	@ (8004210 <main+0x30c>)
 8003f3e:	4ab2      	ldr	r2, [pc, #712]	@ (8004208 <main+0x304>)
 8003f40:	3308      	adds	r3, #8
 8003f42:	ca03      	ldmia	r2!, {r0, r1}
 8003f44:	c303      	stmia	r3!, {r0, r1}
  game.evo=0;
 8003f46:	4bb3      	ldr	r3, [pc, #716]	@ (8004214 <main+0x310>)
 8003f48:	2200      	movs	r2, #0
 8003f4a:	741a      	strb	r2, [r3, #16]
  game.uid[0]='h';
 8003f4c:	4ab1      	ldr	r2, [pc, #708]	@ (8004214 <main+0x310>)
 8003f4e:	2394      	movs	r3, #148	@ 0x94
 8003f50:	005b      	lsls	r3, r3, #1
 8003f52:	2168      	movs	r1, #104	@ 0x68
 8003f54:	54d1      	strb	r1, [r2, r3]
  game.uid[1]='i';
 8003f56:	4aaf      	ldr	r2, [pc, #700]	@ (8004214 <main+0x310>)
 8003f58:	232a      	movs	r3, #42	@ 0x2a
 8003f5a:	33ff      	adds	r3, #255	@ 0xff
 8003f5c:	2169      	movs	r1, #105	@ 0x69
 8003f5e:	54d1      	strb	r1, [r2, r3]
  game.allSteps=0;
 8003f60:	4aac      	ldr	r2, [pc, #688]	@ (8004214 <main+0x310>)
 8003f62:	238c      	movs	r3, #140	@ 0x8c
 8003f64:	005b      	lsls	r3, r3, #1
 8003f66:	2100      	movs	r1, #0
 8003f68:	50d1      	str	r1, [r2, r3]
  game.mood=100;
 8003f6a:	4baa      	ldr	r3, [pc, #680]	@ (8004214 <main+0x310>)
 8003f6c:	2264      	movs	r2, #100	@ 0x64
 8003f6e:	745a      	strb	r2, [r3, #17]
  game.numLocations=3;
 8003f70:	4ba8      	ldr	r3, [pc, #672]	@ (8004214 <main+0x310>)
 8003f72:	2203      	movs	r2, #3
 8003f74:	615a      	str	r2, [r3, #20]
  game.stepsToday=0;
 8003f76:	4aa7      	ldr	r2, [pc, #668]	@ (8004214 <main+0x310>)
 8003f78:	2390      	movs	r3, #144	@ 0x90
 8003f7a:	005b      	lsls	r3, r3, #1
 8003f7c:	2100      	movs	r1, #0
 8003f7e:	50d1      	str	r1, [r2, r3]
  game.weeklySteps=0;
 8003f80:	4aa4      	ldr	r2, [pc, #656]	@ (8004214 <main+0x310>)
 8003f82:	238e      	movs	r3, #142	@ 0x8e
 8003f84:	005b      	lsls	r3, r3, #1
 8003f86:	2100      	movs	r1, #0
 8003f88:	50d1      	str	r1, [r2, r3]
  game.challengeGoal=20000;
 8003f8a:	4aa2      	ldr	r2, [pc, #648]	@ (8004214 <main+0x310>)
 8003f8c:	2392      	movs	r3, #146	@ 0x92
 8003f8e:	005b      	lsls	r3, r3, #1
 8003f90:	49a1      	ldr	r1, [pc, #644]	@ (8004218 <main+0x314>)
 8003f92:	50d1      	str	r1, [r2, r3]
  dummy.lat=12.34567;
 8003f94:	4ba1      	ldr	r3, [pc, #644]	@ (800421c <main+0x318>)
 8003f96:	4aa2      	ldr	r2, [pc, #648]	@ (8004220 <main+0x31c>)
 8003f98:	601a      	str	r2, [r3, #0]
  dummy.lon=-89.10111;
 8003f9a:	4ba0      	ldr	r3, [pc, #640]	@ (800421c <main+0x318>)
 8003f9c:	4aa1      	ldr	r2, [pc, #644]	@ (8004224 <main+0x320>)
 8003f9e:	605a      	str	r2, [r3, #4]
  game.positions[0]=dummy;
 8003fa0:	4b9c      	ldr	r3, [pc, #624]	@ (8004214 <main+0x310>)
 8003fa2:	4a9e      	ldr	r2, [pc, #632]	@ (800421c <main+0x318>)
 8003fa4:	3318      	adds	r3, #24
 8003fa6:	ca03      	ldmia	r2!, {r0, r1}
 8003fa8:	c303      	stmia	r3!, {r0, r1}
  game.positions[1]=dummy;
 8003faa:	4b9a      	ldr	r3, [pc, #616]	@ (8004214 <main+0x310>)
 8003fac:	4a9b      	ldr	r2, [pc, #620]	@ (800421c <main+0x318>)
 8003fae:	3320      	adds	r3, #32
 8003fb0:	ca03      	ldmia	r2!, {r0, r1}
 8003fb2:	c303      	stmia	r3!, {r0, r1}
  game.positions[2]=dummy;
 8003fb4:	4b97      	ldr	r3, [pc, #604]	@ (8004214 <main+0x310>)
 8003fb6:	4a99      	ldr	r2, [pc, #612]	@ (800421c <main+0x318>)
 8003fb8:	3328      	adds	r3, #40	@ 0x28
 8003fba:	ca03      	ldmia	r2!, {r0, r1}
 8003fbc:	c303      	stmia	r3!, {r0, r1}
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003fbe:	f000 fd09 	bl	80049d4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8003fc2:	f000 fb63 	bl	800468c <MX_I2C1_Init>
  MX_SPI1_Init();
 8003fc6:	f000 fba1 	bl	800470c <MX_SPI1_Init>
  MX_TIM17_Init();
 8003fca:	f000 fbdf 	bl	800478c <MX_TIM17_Init>
  MX_USART1_UART_Init();
 8003fce:	f000 fc65 	bl	800489c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8003fd2:	f000 fcb1 	bl	8004938 <MX_USART2_UART_Init>
  //MX_RTC_Init();
  /* USER CODE BEGIN 2 */
  //HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
  ST7735_Unselect();
 8003fd6:	f7ff fcc5 	bl	8003964 <ST7735_Unselect>
  ST7735_Init(1);
 8003fda:	2001      	movs	r0, #1
 8003fdc:	f7ff fdd6 	bl	8003b8c <ST7735_Init>
  //testAll();
  buffer[0] = 'A';
 8003fe0:	4b91      	ldr	r3, [pc, #580]	@ (8004228 <main+0x324>)
 8003fe2:	2241      	movs	r2, #65	@ 0x41
 8003fe4:	701a      	strb	r2, [r3, #0]
  buffer[1] = 'B';
 8003fe6:	4b90      	ldr	r3, [pc, #576]	@ (8004228 <main+0x324>)
 8003fe8:	2242      	movs	r2, #66	@ 0x42
 8003fea:	705a      	strb	r2, [r3, #1]
  TIM17->CCR1 = 5;
 8003fec:	4b8f      	ldr	r3, [pc, #572]	@ (800422c <main+0x328>)
 8003fee:	2205      	movs	r2, #5
 8003ff0:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM17->PSC=64;
 8003ff2:	4b8e      	ldr	r3, [pc, #568]	@ (800422c <main+0x328>)
 8003ff4:	2240      	movs	r2, #64	@ 0x40
 8003ff6:	629a      	str	r2, [r3, #40]	@ 0x28
  uint8_t ret=0;
 8003ff8:	1dfb      	adds	r3, r7, #7
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	701a      	strb	r2, [r3, #0]
    //_ADXL343_Init();

      //Pedometer Setup
      _ADXL343_WriteReg8(0x19, 0x02);
 8003ffe:	2102      	movs	r1, #2
 8004000:	2019      	movs	r0, #25
 8004002:	f000 fdbf 	bl	8004b84 <_ADXL343_WriteReg8>
      ////wait

      _ADXL343_WriteReg8(0x7C, 0x01);
 8004006:	2101      	movs	r1, #1
 8004008:	207c      	movs	r0, #124	@ 0x7c
 800400a:	f000 fdbb 	bl	8004b84 <_ADXL343_WriteReg8>
       _ADXL343_WriteReg8(0x1A, 0x38);
 800400e:	2138      	movs	r1, #56	@ 0x38
 8004010:	201a      	movs	r0, #26
 8004012:	f000 fdb7 	bl	8004b84 <_ADXL343_WriteReg8>
      _ADXL343_WriteReg8(0x1B, 0x04);
 8004016:	2104      	movs	r1, #4
 8004018:	201b      	movs	r0, #27
 800401a:	f000 fdb3 	bl	8004b84 <_ADXL343_WriteReg8>
      _ADXL343_WriteReg8(0x1F, 0x80);
 800401e:	2180      	movs	r1, #128	@ 0x80
 8004020:	201f      	movs	r0, #31
 8004022:	f000 fdaf 	bl	8004b84 <_ADXL343_WriteReg8>
      _ADXL343_WriteReg8(0x21, 0x80);
 8004026:	2180      	movs	r1, #128	@ 0x80
 8004028:	2021      	movs	r0, #33	@ 0x21
 800402a:	f000 fdab 	bl	8004b84 <_ADXL343_WriteReg8>



      //  //Step Counter
      _ADXL343_WriteReg8(0x18, 0x01); // enable walking mode
 800402e:	2101      	movs	r1, #1
 8004030:	2018      	movs	r0, #24
 8004032:	f000 fda7 	bl	8004b84 <_ADXL343_WriteReg8>
      _ADXL343_WriteReg8(0x20, 0x01); // enable step interrupt
 8004036:	2101      	movs	r1, #1
 8004038:	2020      	movs	r0, #32
 800403a:	f000 fda3 	bl	8004b84 <_ADXL343_WriteReg8>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
      //Before entering the while, fill the screen to clear it once
      fillScreen(BLACK);
 800403e:	2000      	movs	r0, #0
 8004040:	f7ff fb4a 	bl	80036d8 <fillScreen>
  while (1)
  {

	  if((totalFrames++)%600==0) GetLatLon();
 8004044:	4b7a      	ldr	r3, [pc, #488]	@ (8004230 <main+0x32c>)
 8004046:	881b      	ldrh	r3, [r3, #0]
 8004048:	1c5a      	adds	r2, r3, #1
 800404a:	b291      	uxth	r1, r2
 800404c:	4a78      	ldr	r2, [pc, #480]	@ (8004230 <main+0x32c>)
 800404e:	8011      	strh	r1, [r2, #0]
 8004050:	2296      	movs	r2, #150	@ 0x96
 8004052:	0091      	lsls	r1, r2, #2
 8004054:	0018      	movs	r0, r3
 8004056:	f7fc f8ef 	bl	8000238 <__aeabi_uidivmod>
 800405a:	000b      	movs	r3, r1
 800405c:	b29b      	uxth	r3, r3
 800405e:	2b00      	cmp	r3, #0
 8004060:	d101      	bne.n	8004066 <main+0x162>
 8004062:	f000 fdb5 	bl	8004bd0 <GetLatLon>
	  //SendData();
	  //ReceiveData();
	  if((game.time.hours%dayLength)==0&&game.time.hours>0) game.stepsToday=0;
 8004066:	4b6b      	ldr	r3, [pc, #428]	@ (8004214 <main+0x310>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	2218      	movs	r2, #24
 800406c:	0011      	movs	r1, r2
 800406e:	0018      	movs	r0, r3
 8004070:	f7fc f9cc 	bl	800040c <__aeabi_idivmod>
 8004074:	1e0b      	subs	r3, r1, #0
 8004076:	d108      	bne.n	800408a <main+0x186>
 8004078:	4b66      	ldr	r3, [pc, #408]	@ (8004214 <main+0x310>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2b00      	cmp	r3, #0
 800407e:	dd04      	ble.n	800408a <main+0x186>
 8004080:	4a64      	ldr	r2, [pc, #400]	@ (8004214 <main+0x310>)
 8004082:	2390      	movs	r3, #144	@ 0x90
 8004084:	005b      	lsls	r3, r3, #1
 8004086:	2100      	movs	r1, #0
 8004088:	50d1      	str	r1, [r2, r3]
	  if((game.time.hours%weekLength)==0&&game.time.hours>0) game.weeklySteps=0;
 800408a:	4b62      	ldr	r3, [pc, #392]	@ (8004214 <main+0x310>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	22a8      	movs	r2, #168	@ 0xa8
 8004090:	0011      	movs	r1, r2
 8004092:	0018      	movs	r0, r3
 8004094:	f7fc f9ba 	bl	800040c <__aeabi_idivmod>
 8004098:	1e0b      	subs	r3, r1, #0
 800409a:	d108      	bne.n	80040ae <main+0x1aa>
 800409c:	4b5d      	ldr	r3, [pc, #372]	@ (8004214 <main+0x310>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	dd04      	ble.n	80040ae <main+0x1aa>
 80040a4:	4a5b      	ldr	r2, [pc, #364]	@ (8004214 <main+0x310>)
 80040a6:	238e      	movs	r3, #142	@ 0x8e
 80040a8:	005b      	lsls	r3, r3, #1
 80040aa:	2100      	movs	r1, #0
 80040ac:	50d1      	str	r1, [r2, r3]
	  if(steps!=0){
 80040ae:	4b53      	ldr	r3, [pc, #332]	@ (80041fc <main+0x2f8>)
 80040b0:	781b      	ldrb	r3, [r3, #0]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d033      	beq.n	800411e <main+0x21a>
	  game.stepsToday +=steps*game.numLocations;
 80040b6:	4a57      	ldr	r2, [pc, #348]	@ (8004214 <main+0x310>)
 80040b8:	2390      	movs	r3, #144	@ 0x90
 80040ba:	005b      	lsls	r3, r3, #1
 80040bc:	58d2      	ldr	r2, [r2, r3]
 80040be:	4b4f      	ldr	r3, [pc, #316]	@ (80041fc <main+0x2f8>)
 80040c0:	781b      	ldrb	r3, [r3, #0]
 80040c2:	0019      	movs	r1, r3
 80040c4:	4b53      	ldr	r3, [pc, #332]	@ (8004214 <main+0x310>)
 80040c6:	695b      	ldr	r3, [r3, #20]
 80040c8:	434b      	muls	r3, r1
 80040ca:	18d1      	adds	r1, r2, r3
 80040cc:	4a51      	ldr	r2, [pc, #324]	@ (8004214 <main+0x310>)
 80040ce:	2390      	movs	r3, #144	@ 0x90
 80040d0:	005b      	lsls	r3, r3, #1
 80040d2:	50d1      	str	r1, [r2, r3]
	  game.weeklySteps+=steps*game.numLocations;
 80040d4:	4a4f      	ldr	r2, [pc, #316]	@ (8004214 <main+0x310>)
 80040d6:	238e      	movs	r3, #142	@ 0x8e
 80040d8:	005b      	lsls	r3, r3, #1
 80040da:	58d2      	ldr	r2, [r2, r3]
 80040dc:	4b47      	ldr	r3, [pc, #284]	@ (80041fc <main+0x2f8>)
 80040de:	781b      	ldrb	r3, [r3, #0]
 80040e0:	0019      	movs	r1, r3
 80040e2:	4b4c      	ldr	r3, [pc, #304]	@ (8004214 <main+0x310>)
 80040e4:	695b      	ldr	r3, [r3, #20]
 80040e6:	434b      	muls	r3, r1
 80040e8:	18d1      	adds	r1, r2, r3
 80040ea:	4a4a      	ldr	r2, [pc, #296]	@ (8004214 <main+0x310>)
 80040ec:	238e      	movs	r3, #142	@ 0x8e
 80040ee:	005b      	lsls	r3, r3, #1
 80040f0:	50d1      	str	r1, [r2, r3]
	  game.allSteps+=steps*game.numLocations;
 80040f2:	4a48      	ldr	r2, [pc, #288]	@ (8004214 <main+0x310>)
 80040f4:	238c      	movs	r3, #140	@ 0x8c
 80040f6:	005b      	lsls	r3, r3, #1
 80040f8:	58d2      	ldr	r2, [r2, r3]
 80040fa:	4b40      	ldr	r3, [pc, #256]	@ (80041fc <main+0x2f8>)
 80040fc:	781b      	ldrb	r3, [r3, #0]
 80040fe:	0019      	movs	r1, r3
 8004100:	4b44      	ldr	r3, [pc, #272]	@ (8004214 <main+0x310>)
 8004102:	695b      	ldr	r3, [r3, #20]
 8004104:	434b      	muls	r3, r1
 8004106:	18d1      	adds	r1, r2, r3
 8004108:	4a42      	ldr	r2, [pc, #264]	@ (8004214 <main+0x310>)
 800410a:	238c      	movs	r3, #140	@ 0x8c
 800410c:	005b      	lsls	r3, r3, #1
 800410e:	50d1      	str	r1, [r2, r3]
	  steps=0;
 8004110:	4b3a      	ldr	r3, [pc, #232]	@ (80041fc <main+0x2f8>)
 8004112:	2200      	movs	r2, #0
 8004114:	701a      	strb	r2, [r3, #0]
	  _ADXL343_WriteReg8(0x7E, 0xB1);
 8004116:	21b1      	movs	r1, #177	@ 0xb1
 8004118:	207e      	movs	r0, #126	@ 0x7e
 800411a:	f000 fd33 	bl	8004b84 <_ADXL343_WriteReg8>
	  }
	  //SendData();
	  //HAL_UART_Transmit(&huart2, "hello", 5, 100);
	  switch(currentMenu){
 800411e:	4b45      	ldr	r3, [pc, #276]	@ (8004234 <main+0x330>)
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	2b03      	cmp	r3, #3
 8004124:	d100      	bne.n	8004128 <main+0x224>
 8004126:	e148      	b.n	80043ba <main+0x4b6>
 8004128:	dc8c      	bgt.n	8004044 <main+0x140>
 800412a:	2b02      	cmp	r3, #2
 800412c:	d100      	bne.n	8004130 <main+0x22c>
 800412e:	e101      	b.n	8004334 <main+0x430>
 8004130:	dc88      	bgt.n	8004044 <main+0x140>
 8004132:	2b00      	cmp	r3, #0
 8004134:	d100      	bne.n	8004138 <main+0x234>
 8004136:	e089      	b.n	800424c <main+0x348>
 8004138:	2b01      	cmp	r3, #1
 800413a:	d000      	beq.n	800413e <main+0x23a>
 800413c:	e782      	b.n	8004044 <main+0x140>
	  case Main:


		  if((++updateScreen)>=5)
 800413e:	4b3e      	ldr	r3, [pc, #248]	@ (8004238 <main+0x334>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	1c5a      	adds	r2, r3, #1
 8004144:	4b3c      	ldr	r3, [pc, #240]	@ (8004238 <main+0x334>)
 8004146:	601a      	str	r2, [r3, #0]
 8004148:	4b3b      	ldr	r3, [pc, #236]	@ (8004238 <main+0x334>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2b04      	cmp	r3, #4
 800414e:	d922      	bls.n	8004196 <main+0x292>
		  {
			  //Animate character
			  Animate(animSitting,1);
 8004150:	4b2f      	ldr	r3, [pc, #188]	@ (8004210 <main+0x30c>)
 8004152:	2101      	movs	r1, #1
 8004154:	0018      	movs	r0, r3
 8004156:	f000 fcb1 	bl	8004abc <Animate>
			  updateScreen = 0;
 800415a:	4b37      	ldr	r3, [pc, #220]	@ (8004238 <main+0x334>)
 800415c:	2200      	movs	r2, #0
 800415e:	601a      	str	r2, [r3, #0]
			  //Update steps
			  _ADXL343_ReadReg8(0x15, &steps, 1);
 8004160:	4b26      	ldr	r3, [pc, #152]	@ (80041fc <main+0x2f8>)
 8004162:	2201      	movs	r2, #1
 8004164:	0019      	movs	r1, r3
 8004166:	2015      	movs	r0, #21
 8004168:	f000 fcda 	bl	8004b20 <_ADXL343_ReadReg8>
			  sprintf(buffer2, "Steps today: %d ", steps);
 800416c:	4b23      	ldr	r3, [pc, #140]	@ (80041fc <main+0x2f8>)
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	001a      	movs	r2, r3
 8004172:	4932      	ldr	r1, [pc, #200]	@ (800423c <main+0x338>)
 8004174:	4b32      	ldr	r3, [pc, #200]	@ (8004240 <main+0x33c>)
 8004176:	0018      	movs	r0, r3
 8004178:	f006 fd8e 	bl	800ac98 <siprintf>
			  drawString(0, 20, buffer2, WHITE, BLACK, 1, 1);
 800417c:	2301      	movs	r3, #1
 800417e:	425b      	negs	r3, r3
 8004180:	4a2f      	ldr	r2, [pc, #188]	@ (8004240 <main+0x33c>)
 8004182:	2101      	movs	r1, #1
 8004184:	9102      	str	r1, [sp, #8]
 8004186:	2101      	movs	r1, #1
 8004188:	9101      	str	r1, [sp, #4]
 800418a:	2100      	movs	r1, #0
 800418c:	9100      	str	r1, [sp, #0]
 800418e:	2114      	movs	r1, #20
 8004190:	2000      	movs	r0, #0
 8004192:	f7ff f95d 	bl	8003450 <drawString>
		  }


		  //Change current Menu
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12) == GPIO_PIN_SET ) {
 8004196:	2380      	movs	r3, #128	@ 0x80
 8004198:	015a      	lsls	r2, r3, #5
 800419a:	23a0      	movs	r3, #160	@ 0xa0
 800419c:	05db      	lsls	r3, r3, #23
 800419e:	0011      	movs	r1, r2
 80041a0:	0018      	movs	r0, r3
 80041a2:	f002 f95d 	bl	8006460 <HAL_GPIO_ReadPin>
 80041a6:	0003      	movs	r3, r0
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d10e      	bne.n	80041ca <main+0x2c6>
			  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 80041ac:	4b25      	ldr	r3, [pc, #148]	@ (8004244 <main+0x340>)
 80041ae:	2100      	movs	r1, #0
 80041b0:	0018      	movs	r0, r3
 80041b2:	f004 fe63 	bl	8008e7c <HAL_TIM_PWM_Start>
			  currentMenu = MusicTest;
 80041b6:	4b1f      	ldr	r3, [pc, #124]	@ (8004234 <main+0x330>)
 80041b8:	2202      	movs	r2, #2
 80041ba:	701a      	strb	r2, [r3, #0]
			  canChange = 0;
 80041bc:	4b22      	ldr	r3, [pc, #136]	@ (8004248 <main+0x344>)
 80041be:	2200      	movs	r2, #0
 80041c0:	701a      	strb	r2, [r3, #0]
			  fillScreen(BLACK);
 80041c2:	2000      	movs	r0, #0
 80041c4:	f7ff fa88 	bl	80036d8 <fillScreen>
		  }
		  else
			  canChange = 1;


		  break;
 80041c8:	e1c2      	b.n	8004550 <main+0x64c>
		  else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_SET ) {
 80041ca:	2380      	movs	r3, #128	@ 0x80
 80041cc:	011a      	lsls	r2, r3, #4
 80041ce:	23a0      	movs	r3, #160	@ 0xa0
 80041d0:	05db      	lsls	r3, r3, #23
 80041d2:	0011      	movs	r1, r2
 80041d4:	0018      	movs	r0, r3
 80041d6:	f002 f943 	bl	8006460 <HAL_GPIO_ReadPin>
 80041da:	0003      	movs	r3, r0
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d109      	bne.n	80041f4 <main+0x2f0>
			  currentMenu = StatsDisplay;
 80041e0:	4b14      	ldr	r3, [pc, #80]	@ (8004234 <main+0x330>)
 80041e2:	2200      	movs	r2, #0
 80041e4:	701a      	strb	r2, [r3, #0]
			  canChange = 0;
 80041e6:	4b18      	ldr	r3, [pc, #96]	@ (8004248 <main+0x344>)
 80041e8:	2200      	movs	r2, #0
 80041ea:	701a      	strb	r2, [r3, #0]
			  fillScreen(BLACK);
 80041ec:	2000      	movs	r0, #0
 80041ee:	f7ff fa73 	bl	80036d8 <fillScreen>
		  break;
 80041f2:	e1ad      	b.n	8004550 <main+0x64c>
			  canChange = 1;
 80041f4:	4b14      	ldr	r3, [pc, #80]	@ (8004248 <main+0x344>)
 80041f6:	2201      	movs	r2, #1
 80041f8:	701a      	strb	r2, [r3, #0]
		  break;
 80041fa:	e1a9      	b.n	8004550 <main+0x64c>
 80041fc:	2000122b 	.word	0x2000122b
 8004200:	2000118c 	.word	0x2000118c
 8004204:	200004a0 	.word	0x200004a0
 8004208:	20001194 	.word	0x20001194
 800420c:	2000096c 	.word	0x2000096c
 8004210:	2000119c 	.word	0x2000119c
 8004214:	20000f18 	.word	0x20000f18
 8004218:	00004e20 	.word	0x00004e20
 800421c:	20001060 	.word	0x20001060
 8004220:	414587dd 	.word	0x414587dd
 8004224:	c2b233c5 	.word	0xc2b233c5
 8004228:	20001108 	.word	0x20001108
 800422c:	40014800 	.word	0x40014800
 8004230:	20001104 	.word	0x20001104
 8004234:	20000e80 	.word	0x20000e80
 8004238:	20001188 	.word	0x20001188
 800423c:	0800b808 	.word	0x0800b808
 8004240:	200011c4 	.word	0x200011c4
 8004244:	20001310 	.word	0x20001310
 8004248:	20000e81 	.word	0x20000e81
	  case StatsDisplay:

		  if((++updateScreen)>=5)
 800424c:	4bc1      	ldr	r3, [pc, #772]	@ (8004554 <main+0x650>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	1c5a      	adds	r2, r3, #1
 8004252:	4bc0      	ldr	r3, [pc, #768]	@ (8004554 <main+0x650>)
 8004254:	601a      	str	r2, [r3, #0]
 8004256:	4bbf      	ldr	r3, [pc, #764]	@ (8004554 <main+0x650>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	2b04      	cmp	r3, #4
 800425c:	d951      	bls.n	8004302 <main+0x3fe>
		  {
			  //fillScreen(BLACK);

			  drawString(0, 150, "STEPS", WHITE, BLACK, 1, 1);
 800425e:	2301      	movs	r3, #1
 8004260:	425b      	negs	r3, r3
 8004262:	4abd      	ldr	r2, [pc, #756]	@ (8004558 <main+0x654>)
 8004264:	2101      	movs	r1, #1
 8004266:	9102      	str	r1, [sp, #8]
 8004268:	2101      	movs	r1, #1
 800426a:	9101      	str	r1, [sp, #4]
 800426c:	2100      	movs	r1, #0
 800426e:	9100      	str	r1, [sp, #0]
 8004270:	2196      	movs	r1, #150	@ 0x96
 8004272:	2000      	movs	r0, #0
 8004274:	f7ff f8ec 	bl	8003450 <drawString>
			  sprintf(buffer2, "Today: %d ", game.stepsToday);
 8004278:	4ab8      	ldr	r2, [pc, #736]	@ (800455c <main+0x658>)
 800427a:	2390      	movs	r3, #144	@ 0x90
 800427c:	005b      	lsls	r3, r3, #1
 800427e:	58d2      	ldr	r2, [r2, r3]
 8004280:	49b7      	ldr	r1, [pc, #732]	@ (8004560 <main+0x65c>)
 8004282:	4bb8      	ldr	r3, [pc, #736]	@ (8004564 <main+0x660>)
 8004284:	0018      	movs	r0, r3
 8004286:	f006 fd07 	bl	800ac98 <siprintf>
			  drawString(0, 140, buffer2, WHITE, BLACK, 1, 1);
 800428a:	2301      	movs	r3, #1
 800428c:	425b      	negs	r3, r3
 800428e:	4ab5      	ldr	r2, [pc, #724]	@ (8004564 <main+0x660>)
 8004290:	2101      	movs	r1, #1
 8004292:	9102      	str	r1, [sp, #8]
 8004294:	2101      	movs	r1, #1
 8004296:	9101      	str	r1, [sp, #4]
 8004298:	2100      	movs	r1, #0
 800429a:	9100      	str	r1, [sp, #0]
 800429c:	218c      	movs	r1, #140	@ 0x8c
 800429e:	2000      	movs	r0, #0
 80042a0:	f7ff f8d6 	bl	8003450 <drawString>
			  sprintf(buffer2, "This week: %d ", game.weeklySteps);
 80042a4:	4aad      	ldr	r2, [pc, #692]	@ (800455c <main+0x658>)
 80042a6:	238e      	movs	r3, #142	@ 0x8e
 80042a8:	005b      	lsls	r3, r3, #1
 80042aa:	58d2      	ldr	r2, [r2, r3]
 80042ac:	49ae      	ldr	r1, [pc, #696]	@ (8004568 <main+0x664>)
 80042ae:	4bad      	ldr	r3, [pc, #692]	@ (8004564 <main+0x660>)
 80042b0:	0018      	movs	r0, r3
 80042b2:	f006 fcf1 	bl	800ac98 <siprintf>
			  drawString(0, 130, buffer2, WHITE, BLACK, 1, 1);
 80042b6:	2301      	movs	r3, #1
 80042b8:	425b      	negs	r3, r3
 80042ba:	4aaa      	ldr	r2, [pc, #680]	@ (8004564 <main+0x660>)
 80042bc:	2101      	movs	r1, #1
 80042be:	9102      	str	r1, [sp, #8]
 80042c0:	2101      	movs	r1, #1
 80042c2:	9101      	str	r1, [sp, #4]
 80042c4:	2100      	movs	r1, #0
 80042c6:	9100      	str	r1, [sp, #0]
 80042c8:	2182      	movs	r1, #130	@ 0x82
 80042ca:	2000      	movs	r0, #0
 80042cc:	f7ff f8c0 	bl	8003450 <drawString>
			  sprintf(buffer2, "All time: %d ", game.allSteps);
 80042d0:	4aa2      	ldr	r2, [pc, #648]	@ (800455c <main+0x658>)
 80042d2:	238c      	movs	r3, #140	@ 0x8c
 80042d4:	005b      	lsls	r3, r3, #1
 80042d6:	58d2      	ldr	r2, [r2, r3]
 80042d8:	49a4      	ldr	r1, [pc, #656]	@ (800456c <main+0x668>)
 80042da:	4ba2      	ldr	r3, [pc, #648]	@ (8004564 <main+0x660>)
 80042dc:	0018      	movs	r0, r3
 80042de:	f006 fcdb 	bl	800ac98 <siprintf>
			  drawString(0, 120, buffer2, WHITE, BLACK, 1, 1);
 80042e2:	2301      	movs	r3, #1
 80042e4:	425b      	negs	r3, r3
 80042e6:	4a9f      	ldr	r2, [pc, #636]	@ (8004564 <main+0x660>)
 80042e8:	2101      	movs	r1, #1
 80042ea:	9102      	str	r1, [sp, #8]
 80042ec:	2101      	movs	r1, #1
 80042ee:	9101      	str	r1, [sp, #4]
 80042f0:	2100      	movs	r1, #0
 80042f2:	9100      	str	r1, [sp, #0]
 80042f4:	2178      	movs	r1, #120	@ 0x78
 80042f6:	2000      	movs	r0, #0
 80042f8:	f7ff f8aa 	bl	8003450 <drawString>

			  //drawString(0, 70, "PET", WHITE, BLACK, 1, 1);
			  updateScreen = 0;
 80042fc:	4b95      	ldr	r3, [pc, #596]	@ (8004554 <main+0x650>)
 80042fe:	2200      	movs	r2, #0
 8004300:	601a      	str	r2, [r3, #0]
		  }
	  	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12) == GPIO_PIN_SET ){
 8004302:	2380      	movs	r3, #128	@ 0x80
 8004304:	015a      	lsls	r2, r3, #5
 8004306:	23a0      	movs	r3, #160	@ 0xa0
 8004308:	05db      	lsls	r3, r3, #23
 800430a:	0011      	movs	r1, r2
 800430c:	0018      	movs	r0, r3
 800430e:	f002 f8a7 	bl	8006460 <HAL_GPIO_ReadPin>
 8004312:	0003      	movs	r3, r0
 8004314:	2b01      	cmp	r3, #1
 8004316:	d109      	bne.n	800432c <main+0x428>
	  		currentMenu = Main;
 8004318:	4b95      	ldr	r3, [pc, #596]	@ (8004570 <main+0x66c>)
 800431a:	2201      	movs	r2, #1
 800431c:	701a      	strb	r2, [r3, #0]
	  		canChange = 0;
 800431e:	4b95      	ldr	r3, [pc, #596]	@ (8004574 <main+0x670>)
 8004320:	2200      	movs	r2, #0
 8004322:	701a      	strb	r2, [r3, #0]
	  		fillScreen(BLACK);
 8004324:	2000      	movs	r0, #0
 8004326:	f7ff f9d7 	bl	80036d8 <fillScreen>
	  	  }
	  	  else
	  	      canChange = 1;

	  	  break;
 800432a:	e111      	b.n	8004550 <main+0x64c>
	  	      canChange = 1;
 800432c:	4b91      	ldr	r3, [pc, #580]	@ (8004574 <main+0x670>)
 800432e:	2201      	movs	r2, #1
 8004330:	701a      	strb	r2, [r3, #0]
	  	  break;
 8004332:	e10d      	b.n	8004550 <main+0x64c>
	  case MusicTest:
		  //fillScreen(BLUE);

		  freq = freqs[(toneIndex++)%8];
 8004334:	4b90      	ldr	r3, [pc, #576]	@ (8004578 <main+0x674>)
 8004336:	881b      	ldrh	r3, [r3, #0]
 8004338:	b29b      	uxth	r3, r3
 800433a:	1c5a      	adds	r2, r3, #1
 800433c:	b291      	uxth	r1, r2
 800433e:	4a8e      	ldr	r2, [pc, #568]	@ (8004578 <main+0x674>)
 8004340:	8011      	strh	r1, [r2, #0]
 8004342:	001a      	movs	r2, r3
 8004344:	2307      	movs	r3, #7
 8004346:	4013      	ands	r3, r2
 8004348:	4a8c      	ldr	r2, [pc, #560]	@ (800457c <main+0x678>)
 800434a:	00db      	lsls	r3, r3, #3
 800434c:	18d3      	adds	r3, r2, r3
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	498b      	ldr	r1, [pc, #556]	@ (8004580 <main+0x67c>)
 8004354:	600a      	str	r2, [r1, #0]
 8004356:	604b      	str	r3, [r1, #4]
		  TIM17->ARR=(uint32_t)(987*(float)1000/(float)freq);
 8004358:	4b89      	ldr	r3, [pc, #548]	@ (8004580 <main+0x67c>)
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	0010      	movs	r0, r2
 8004360:	0019      	movs	r1, r3
 8004362:	f7fe ff09 	bl	8003178 <__aeabi_d2f>
 8004366:	1c03      	adds	r3, r0, #0
 8004368:	1c19      	adds	r1, r3, #0
 800436a:	4886      	ldr	r0, [pc, #536]	@ (8004584 <main+0x680>)
 800436c:	f7fc fb5a 	bl	8000a24 <__aeabi_fdiv>
 8004370:	1c03      	adds	r3, r0, #0
 8004372:	4c85      	ldr	r4, [pc, #532]	@ (8004588 <main+0x684>)
 8004374:	1c18      	adds	r0, r3, #0
 8004376:	f7fc f8e7 	bl	8000548 <__aeabi_f2uiz>
 800437a:	0003      	movs	r3, r0
 800437c:	62e3      	str	r3, [r4, #44]	@ 0x2c

		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_SET) {
 800437e:	2380      	movs	r3, #128	@ 0x80
 8004380:	011a      	lsls	r2, r3, #4
 8004382:	23a0      	movs	r3, #160	@ 0xa0
 8004384:	05db      	lsls	r3, r3, #23
 8004386:	0011      	movs	r1, r2
 8004388:	0018      	movs	r0, r3
 800438a:	f002 f869 	bl	8006460 <HAL_GPIO_ReadPin>
 800438e:	0003      	movs	r3, r0
 8004390:	2b01      	cmp	r3, #1
 8004392:	d10e      	bne.n	80043b2 <main+0x4ae>
			  currentMenu = Main;
 8004394:	4b76      	ldr	r3, [pc, #472]	@ (8004570 <main+0x66c>)
 8004396:	2201      	movs	r2, #1
 8004398:	701a      	strb	r2, [r3, #0]
			  canChange = 0;
 800439a:	4b76      	ldr	r3, [pc, #472]	@ (8004574 <main+0x670>)
 800439c:	2200      	movs	r2, #0
 800439e:	701a      	strb	r2, [r3, #0]
			  HAL_TIM_PWM_Stop(&htim17, TIM_CHANNEL_1);
 80043a0:	4b7a      	ldr	r3, [pc, #488]	@ (800458c <main+0x688>)
 80043a2:	2100      	movs	r1, #0
 80043a4:	0018      	movs	r0, r3
 80043a6:	f004 fe59 	bl	800905c <HAL_TIM_PWM_Stop>
			  fillScreen(BLACK);
 80043aa:	2000      	movs	r0, #0
 80043ac:	f7ff f994 	bl	80036d8 <fillScreen>
		  }
		  else
			  canChange = 1;

		  break;
 80043b0:	e0ce      	b.n	8004550 <main+0x64c>
			  canChange = 1;
 80043b2:	4b70      	ldr	r3, [pc, #448]	@ (8004574 <main+0x670>)
 80043b4:	2201      	movs	r2, #1
 80043b6:	701a      	strb	r2, [r3, #0]
		  break;
 80043b8:	e0ca      	b.n	8004550 <main+0x64c>
	  case ConnorDemo:
		  	  steps=0;
 80043ba:	4b75      	ldr	r3, [pc, #468]	@ (8004590 <main+0x68c>)
 80043bc:	2200      	movs	r2, #0
 80043be:	701a      	strb	r2, [r3, #0]

		  	  if((whileI++)%3==0)
 80043c0:	4b74      	ldr	r3, [pc, #464]	@ (8004594 <main+0x690>)
 80043c2:	881b      	ldrh	r3, [r3, #0]
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	1c5a      	adds	r2, r3, #1
 80043c8:	b291      	uxth	r1, r2
 80043ca:	4a72      	ldr	r2, [pc, #456]	@ (8004594 <main+0x690>)
 80043cc:	8011      	strh	r1, [r2, #0]
 80043ce:	2103      	movs	r1, #3
 80043d0:	0018      	movs	r0, r3
 80043d2:	f7fb ff31 	bl	8000238 <__aeabi_uidivmod>
 80043d6:	000b      	movs	r3, r1
 80043d8:	b29b      	uxth	r3, r3
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d10f      	bne.n	80043fe <main+0x4fa>
		  		  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1) == GPIO_PIN_SET)
 80043de:	4b6e      	ldr	r3, [pc, #440]	@ (8004598 <main+0x694>)
 80043e0:	2102      	movs	r1, #2
 80043e2:	0018      	movs	r0, r3
 80043e4:	f002 f83c 	bl	8006460 <HAL_GPIO_ReadPin>
 80043e8:	0003      	movs	r3, r0
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d104      	bne.n	80043f8 <main+0x4f4>
		  		  		  fillScreen(WHITE);
 80043ee:	4b6b      	ldr	r3, [pc, #428]	@ (800459c <main+0x698>)
 80043f0:	0018      	movs	r0, r3
 80043f2:	f7ff f971 	bl	80036d8 <fillScreen>
 80043f6:	e002      	b.n	80043fe <main+0x4fa>
		  		  	  else
		  		  		  fillScreen(BLACK);
 80043f8:	2000      	movs	r0, #0
 80043fa:	f7ff f96d 	bl	80036d8 <fillScreen>
		  	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_SET)
 80043fe:	2380      	movs	r3, #128	@ 0x80
 8004400:	011a      	lsls	r2, r3, #4
 8004402:	23a0      	movs	r3, #160	@ 0xa0
 8004404:	05db      	lsls	r3, r3, #23
 8004406:	0011      	movs	r1, r2
 8004408:	0018      	movs	r0, r3
 800440a:	f002 f829 	bl	8006460 <HAL_GPIO_ReadPin>
 800440e:	0003      	movs	r3, r0
 8004410:	2b01      	cmp	r3, #1
 8004412:	d106      	bne.n	8004422 <main+0x51e>
		  		  petXPos-=5;
 8004414:	4b62      	ldr	r3, [pc, #392]	@ (80045a0 <main+0x69c>)
 8004416:	881b      	ldrh	r3, [r3, #0]
 8004418:	b29b      	uxth	r3, r3
 800441a:	3b05      	subs	r3, #5
 800441c:	b29a      	uxth	r2, r3
 800441e:	4b60      	ldr	r3, [pc, #384]	@ (80045a0 <main+0x69c>)
 8004420:	801a      	strh	r2, [r3, #0]
		  	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12) == GPIO_PIN_SET)
 8004422:	2380      	movs	r3, #128	@ 0x80
 8004424:	015a      	lsls	r2, r3, #5
 8004426:	23a0      	movs	r3, #160	@ 0xa0
 8004428:	05db      	lsls	r3, r3, #23
 800442a:	0011      	movs	r1, r2
 800442c:	0018      	movs	r0, r3
 800442e:	f002 f817 	bl	8006460 <HAL_GPIO_ReadPin>
 8004432:	0003      	movs	r3, r0
 8004434:	2b01      	cmp	r3, #1
 8004436:	d106      	bne.n	8004446 <main+0x542>
		  		  petXPos+=5;
 8004438:	4b59      	ldr	r3, [pc, #356]	@ (80045a0 <main+0x69c>)
 800443a:	881b      	ldrh	r3, [r3, #0]
 800443c:	b29b      	uxth	r3, r3
 800443e:	3305      	adds	r3, #5
 8004440:	b29a      	uxth	r2, r3
 8004442:	4b57      	ldr	r3, [pc, #348]	@ (80045a0 <main+0x69c>)
 8004444:	801a      	strh	r2, [r3, #0]
		  	  if(petXPos<3)petXPos=0;
 8004446:	4b56      	ldr	r3, [pc, #344]	@ (80045a0 <main+0x69c>)
 8004448:	881b      	ldrh	r3, [r3, #0]
 800444a:	b29b      	uxth	r3, r3
 800444c:	2b02      	cmp	r3, #2
 800444e:	d802      	bhi.n	8004456 <main+0x552>
 8004450:	4b53      	ldr	r3, [pc, #332]	@ (80045a0 <main+0x69c>)
 8004452:	2200      	movs	r2, #0
 8004454:	801a      	strh	r2, [r3, #0]
		  	  if(petXPos>60) petXPos=60;
 8004456:	4b52      	ldr	r3, [pc, #328]	@ (80045a0 <main+0x69c>)
 8004458:	881b      	ldrh	r3, [r3, #0]
 800445a:	b29b      	uxth	r3, r3
 800445c:	2b3c      	cmp	r3, #60	@ 0x3c
 800445e:	d902      	bls.n	8004466 <main+0x562>
 8004460:	4b4f      	ldr	r3, [pc, #316]	@ (80045a0 <main+0x69c>)
 8004462:	223c      	movs	r2, #60	@ 0x3c
 8004464:	801a      	strh	r2, [r3, #0]
		  	  freq = freqs[(toneIndex++)%8];
 8004466:	4b44      	ldr	r3, [pc, #272]	@ (8004578 <main+0x674>)
 8004468:	881b      	ldrh	r3, [r3, #0]
 800446a:	b29b      	uxth	r3, r3
 800446c:	1c5a      	adds	r2, r3, #1
 800446e:	b291      	uxth	r1, r2
 8004470:	4a41      	ldr	r2, [pc, #260]	@ (8004578 <main+0x674>)
 8004472:	8011      	strh	r1, [r2, #0]
 8004474:	001a      	movs	r2, r3
 8004476:	2307      	movs	r3, #7
 8004478:	4013      	ands	r3, r2
 800447a:	4a40      	ldr	r2, [pc, #256]	@ (800457c <main+0x678>)
 800447c:	00db      	lsls	r3, r3, #3
 800447e:	18d3      	adds	r3, r2, r3
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	493e      	ldr	r1, [pc, #248]	@ (8004580 <main+0x67c>)
 8004486:	600a      	str	r2, [r1, #0]
 8004488:	604b      	str	r3, [r1, #4]
		  	  TIM17->ARR=(uint32_t)(987*(float)1000/(float)freq);
 800448a:	4b3d      	ldr	r3, [pc, #244]	@ (8004580 <main+0x67c>)
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	0010      	movs	r0, r2
 8004492:	0019      	movs	r1, r3
 8004494:	f7fe fe70 	bl	8003178 <__aeabi_d2f>
 8004498:	1c03      	adds	r3, r0, #0
 800449a:	1c19      	adds	r1, r3, #0
 800449c:	4839      	ldr	r0, [pc, #228]	@ (8004584 <main+0x680>)
 800449e:	f7fc fac1 	bl	8000a24 <__aeabi_fdiv>
 80044a2:	1c03      	adds	r3, r0, #0
 80044a4:	4c38      	ldr	r4, [pc, #224]	@ (8004588 <main+0x684>)
 80044a6:	1c18      	adds	r0, r3, #0
 80044a8:	f7fc f84e 	bl	8000548 <__aeabi_f2uiz>
 80044ac:	0003      	movs	r3, r0
 80044ae:	62e3      	str	r3, [r4, #44]	@ 0x2c
		  	  //fillScreen(WHITE);
		  	  drawImage(testImage, palette, petXPos, 40, 64, 64, 296);
 80044b0:	4b3b      	ldr	r3, [pc, #236]	@ (80045a0 <main+0x69c>)
 80044b2:	881b      	ldrh	r3, [r3, #0]
 80044b4:	b29a      	uxth	r2, r3
 80044b6:	493b      	ldr	r1, [pc, #236]	@ (80045a4 <main+0x6a0>)
 80044b8:	483b      	ldr	r0, [pc, #236]	@ (80045a8 <main+0x6a4>)
 80044ba:	2394      	movs	r3, #148	@ 0x94
 80044bc:	005b      	lsls	r3, r3, #1
 80044be:	9302      	str	r3, [sp, #8]
 80044c0:	2340      	movs	r3, #64	@ 0x40
 80044c2:	9301      	str	r3, [sp, #4]
 80044c4:	2340      	movs	r3, #64	@ 0x40
 80044c6:	9300      	str	r3, [sp, #0]
 80044c8:	2328      	movs	r3, #40	@ 0x28
 80044ca:	f7ff f979 	bl	80037c0 <drawImage>
//		  	  _ADXL343_ReadReg8(0x06, &accelZ, 1);
//		  	  _ADXL343_ReadReg8(0x07, &accelX, 1);
//		  	  _ADXL343_ReadReg8(0x08, &accelY, 1);
//		  	  _ADXL343_ReadReg8(0x09, &accelZ, 1);

		  	  sprintf(buffer2, "X:%d - Y:%d - Z:%d ", accelX, accelY, accelZ);
 80044ce:	4b37      	ldr	r3, [pc, #220]	@ (80045ac <main+0x6a8>)
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	001a      	movs	r2, r3
 80044d4:	4b36      	ldr	r3, [pc, #216]	@ (80045b0 <main+0x6ac>)
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	001c      	movs	r4, r3
 80044da:	4b36      	ldr	r3, [pc, #216]	@ (80045b4 <main+0x6b0>)
 80044dc:	781b      	ldrb	r3, [r3, #0]
 80044de:	4936      	ldr	r1, [pc, #216]	@ (80045b8 <main+0x6b4>)
 80044e0:	4820      	ldr	r0, [pc, #128]	@ (8004564 <main+0x660>)
 80044e2:	9300      	str	r3, [sp, #0]
 80044e4:	0023      	movs	r3, r4
 80044e6:	f006 fbd7 	bl	800ac98 <siprintf>
		  	  drawString(0, 10, buffer2, BLACK, GREEN, 1, 1);
 80044ea:	4a1e      	ldr	r2, [pc, #120]	@ (8004564 <main+0x660>)
 80044ec:	2301      	movs	r3, #1
 80044ee:	9302      	str	r3, [sp, #8]
 80044f0:	2301      	movs	r3, #1
 80044f2:	9301      	str	r3, [sp, #4]
 80044f4:	4b31      	ldr	r3, [pc, #196]	@ (80045bc <main+0x6b8>)
 80044f6:	9300      	str	r3, [sp, #0]
 80044f8:	2300      	movs	r3, #0
 80044fa:	210a      	movs	r1, #10
 80044fc:	2000      	movs	r0, #0
 80044fe:	f7fe ffa7 	bl	8003450 <drawString>

		  	  _ADXL343_ReadReg8(0x15, &steps, 1);
 8004502:	4b23      	ldr	r3, [pc, #140]	@ (8004590 <main+0x68c>)
 8004504:	2201      	movs	r2, #1
 8004506:	0019      	movs	r1, r3
 8004508:	2015      	movs	r0, #21
 800450a:	f000 fb09 	bl	8004b20 <_ADXL343_ReadReg8>
		  	  sprintf(buffer2, "Steps: %d ", steps);
 800450e:	4b20      	ldr	r3, [pc, #128]	@ (8004590 <main+0x68c>)
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	001a      	movs	r2, r3
 8004514:	492a      	ldr	r1, [pc, #168]	@ (80045c0 <main+0x6bc>)
 8004516:	4b13      	ldr	r3, [pc, #76]	@ (8004564 <main+0x660>)
 8004518:	0018      	movs	r0, r3
 800451a:	f006 fbbd 	bl	800ac98 <siprintf>
		  	  drawString(0, 20, buffer2, BLACK, GREEN, 1, 1);
 800451e:	4a11      	ldr	r2, [pc, #68]	@ (8004564 <main+0x660>)
 8004520:	2301      	movs	r3, #1
 8004522:	9302      	str	r3, [sp, #8]
 8004524:	2301      	movs	r3, #1
 8004526:	9301      	str	r3, [sp, #4]
 8004528:	4b24      	ldr	r3, [pc, #144]	@ (80045bc <main+0x6b8>)
 800452a:	9300      	str	r3, [sp, #0]
 800452c:	2300      	movs	r3, #0
 800452e:	2114      	movs	r1, #20
 8004530:	2000      	movs	r0, #0
 8004532:	f7fe ff8d 	bl	8003450 <drawString>

		  	  	  //only run this code every few seconds

		  	  drawString(70, 70, buffer, BLACK, GREEN, 1, 1);
 8004536:	4a23      	ldr	r2, [pc, #140]	@ (80045c4 <main+0x6c0>)
 8004538:	2301      	movs	r3, #1
 800453a:	9302      	str	r3, [sp, #8]
 800453c:	2301      	movs	r3, #1
 800453e:	9301      	str	r3, [sp, #4]
 8004540:	4b1e      	ldr	r3, [pc, #120]	@ (80045bc <main+0x6b8>)
 8004542:	9300      	str	r3, [sp, #0]
 8004544:	2300      	movs	r3, #0
 8004546:	2146      	movs	r1, #70	@ 0x46
 8004548:	2046      	movs	r0, #70	@ 0x46
 800454a:	f7fe ff81 	bl	8003450 <drawString>

		  break;
 800454e:	46c0      	nop			@ (mov r8, r8)
	  if((totalFrames++)%600==0) GetLatLon();
 8004550:	e578      	b.n	8004044 <main+0x140>
 8004552:	46c0      	nop			@ (mov r8, r8)
 8004554:	20001188 	.word	0x20001188
 8004558:	0800b81c 	.word	0x0800b81c
 800455c:	20000f18 	.word	0x20000f18
 8004560:	0800b824 	.word	0x0800b824
 8004564:	200011c4 	.word	0x200011c4
 8004568:	0800b830 	.word	0x0800b830
 800456c:	0800b840 	.word	0x0800b840
 8004570:	20000e80 	.word	0x20000e80
 8004574:	20000e81 	.word	0x20000e81
 8004578:	200011c0 	.word	0x200011c0
 800457c:	20000e40 	.word	0x20000e40
 8004580:	200011b8 	.word	0x200011b8
 8004584:	4970f780 	.word	0x4970f780
 8004588:	40014800 	.word	0x40014800
 800458c:	20001310 	.word	0x20001310
 8004590:	2000122b 	.word	0x2000122b
 8004594:	2000106a 	.word	0x2000106a
 8004598:	50000800 	.word	0x50000800
 800459c:	0000ffff 	.word	0x0000ffff
 80045a0:	2000106c 	.word	0x2000106c
 80045a4:	20000e30 	.word	0x20000e30
 80045a8:	20000000 	.word	0x20000000
 80045ac:	20001228 	.word	0x20001228
 80045b0:	20001229 	.word	0x20001229
 80045b4:	2000122a 	.word	0x2000122a
 80045b8:	0800b850 	.word	0x0800b850
 80045bc:	ffffe007 	.word	0xffffe007
 80045c0:	0800b864 	.word	0x0800b864
 80045c4:	20001108 	.word	0x20001108

080045c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80045c8:	b590      	push	{r4, r7, lr}
 80045ca:	b095      	sub	sp, #84	@ 0x54
 80045cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80045ce:	2414      	movs	r4, #20
 80045d0:	193b      	adds	r3, r7, r4
 80045d2:	0018      	movs	r0, r3
 80045d4:	233c      	movs	r3, #60	@ 0x3c
 80045d6:	001a      	movs	r2, r3
 80045d8:	2100      	movs	r1, #0
 80045da:	f006 fb7d 	bl	800acd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80045de:	1d3b      	adds	r3, r7, #4
 80045e0:	0018      	movs	r0, r3
 80045e2:	2310      	movs	r3, #16
 80045e4:	001a      	movs	r2, r3
 80045e6:	2100      	movs	r1, #0
 80045e8:	f006 fb76 	bl	800acd8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80045ec:	2380      	movs	r3, #128	@ 0x80
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	0018      	movs	r0, r3
 80045f2:	f002 fdb3 	bl	800715c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80045f6:	193b      	adds	r3, r7, r4
 80045f8:	220a      	movs	r2, #10
 80045fa:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80045fc:	193b      	adds	r3, r7, r4
 80045fe:	2280      	movs	r2, #128	@ 0x80
 8004600:	0052      	lsls	r2, r2, #1
 8004602:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8004604:	0021      	movs	r1, r4
 8004606:	187b      	adds	r3, r7, r1
 8004608:	2200      	movs	r2, #0
 800460a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800460c:	187b      	adds	r3, r7, r1
 800460e:	2240      	movs	r2, #64	@ 0x40
 8004610:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004612:	187b      	adds	r3, r7, r1
 8004614:	2201      	movs	r2, #1
 8004616:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004618:	187b      	adds	r3, r7, r1
 800461a:	2202      	movs	r2, #2
 800461c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800461e:	187b      	adds	r3, r7, r1
 8004620:	2202      	movs	r2, #2
 8004622:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8004624:	187b      	adds	r3, r7, r1
 8004626:	2200      	movs	r2, #0
 8004628:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 800462a:	187b      	adds	r3, r7, r1
 800462c:	2208      	movs	r2, #8
 800462e:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004630:	187b      	adds	r3, r7, r1
 8004632:	2280      	movs	r2, #128	@ 0x80
 8004634:	0292      	lsls	r2, r2, #10
 8004636:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004638:	187b      	adds	r3, r7, r1
 800463a:	2280      	movs	r2, #128	@ 0x80
 800463c:	0492      	lsls	r2, r2, #18
 800463e:	635a      	str	r2, [r3, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004640:	187b      	adds	r3, r7, r1
 8004642:	2280      	movs	r2, #128	@ 0x80
 8004644:	0592      	lsls	r2, r2, #22
 8004646:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004648:	187b      	adds	r3, r7, r1
 800464a:	0018      	movs	r0, r3
 800464c:	f002 fdd2 	bl	80071f4 <HAL_RCC_OscConfig>
 8004650:	1e03      	subs	r3, r0, #0
 8004652:	d001      	beq.n	8004658 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8004654:	f000 fcc0 	bl	8004fd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004658:	1d3b      	adds	r3, r7, #4
 800465a:	2207      	movs	r2, #7
 800465c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800465e:	1d3b      	adds	r3, r7, #4
 8004660:	2202      	movs	r2, #2
 8004662:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004664:	1d3b      	adds	r3, r7, #4
 8004666:	2200      	movs	r2, #0
 8004668:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800466a:	1d3b      	adds	r3, r7, #4
 800466c:	2200      	movs	r2, #0
 800466e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004670:	1d3b      	adds	r3, r7, #4
 8004672:	2102      	movs	r1, #2
 8004674:	0018      	movs	r0, r3
 8004676:	f003 f91d 	bl	80078b4 <HAL_RCC_ClockConfig>
 800467a:	1e03      	subs	r3, r0, #0
 800467c:	d001      	beq.n	8004682 <SystemClock_Config+0xba>
  {
    Error_Handler();
 800467e:	f000 fcab 	bl	8004fd8 <Error_Handler>
  }
}
 8004682:	46c0      	nop			@ (mov r8, r8)
 8004684:	46bd      	mov	sp, r7
 8004686:	b015      	add	sp, #84	@ 0x54
 8004688:	bd90      	pop	{r4, r7, pc}
	...

0800468c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004690:	4b1b      	ldr	r3, [pc, #108]	@ (8004700 <MX_I2C1_Init+0x74>)
 8004692:	4a1c      	ldr	r2, [pc, #112]	@ (8004704 <MX_I2C1_Init+0x78>)
 8004694:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10B17DB5;
 8004696:	4b1a      	ldr	r3, [pc, #104]	@ (8004700 <MX_I2C1_Init+0x74>)
 8004698:	4a1b      	ldr	r2, [pc, #108]	@ (8004708 <MX_I2C1_Init+0x7c>)
 800469a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800469c:	4b18      	ldr	r3, [pc, #96]	@ (8004700 <MX_I2C1_Init+0x74>)
 800469e:	2200      	movs	r2, #0
 80046a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80046a2:	4b17      	ldr	r3, [pc, #92]	@ (8004700 <MX_I2C1_Init+0x74>)
 80046a4:	2201      	movs	r2, #1
 80046a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80046a8:	4b15      	ldr	r3, [pc, #84]	@ (8004700 <MX_I2C1_Init+0x74>)
 80046aa:	2200      	movs	r2, #0
 80046ac:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80046ae:	4b14      	ldr	r3, [pc, #80]	@ (8004700 <MX_I2C1_Init+0x74>)
 80046b0:	2200      	movs	r2, #0
 80046b2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80046b4:	4b12      	ldr	r3, [pc, #72]	@ (8004700 <MX_I2C1_Init+0x74>)
 80046b6:	2200      	movs	r2, #0
 80046b8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80046ba:	4b11      	ldr	r3, [pc, #68]	@ (8004700 <MX_I2C1_Init+0x74>)
 80046bc:	2200      	movs	r2, #0
 80046be:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80046c0:	4b0f      	ldr	r3, [pc, #60]	@ (8004700 <MX_I2C1_Init+0x74>)
 80046c2:	2200      	movs	r2, #0
 80046c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80046c6:	4b0e      	ldr	r3, [pc, #56]	@ (8004700 <MX_I2C1_Init+0x74>)
 80046c8:	0018      	movs	r0, r3
 80046ca:	f001 ff03 	bl	80064d4 <HAL_I2C_Init>
 80046ce:	1e03      	subs	r3, r0, #0
 80046d0:	d001      	beq.n	80046d6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80046d2:	f000 fc81 	bl	8004fd8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80046d6:	4b0a      	ldr	r3, [pc, #40]	@ (8004700 <MX_I2C1_Init+0x74>)
 80046d8:	2100      	movs	r1, #0
 80046da:	0018      	movs	r0, r3
 80046dc:	f002 fca6 	bl	800702c <HAL_I2CEx_ConfigAnalogFilter>
 80046e0:	1e03      	subs	r3, r0, #0
 80046e2:	d001      	beq.n	80046e8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80046e4:	f000 fc78 	bl	8004fd8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80046e8:	4b05      	ldr	r3, [pc, #20]	@ (8004700 <MX_I2C1_Init+0x74>)
 80046ea:	2100      	movs	r1, #0
 80046ec:	0018      	movs	r0, r3
 80046ee:	f002 fce9 	bl	80070c4 <HAL_I2CEx_ConfigDigitalFilter>
 80046f2:	1e03      	subs	r3, r0, #0
 80046f4:	d001      	beq.n	80046fa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80046f6:	f000 fc6f 	bl	8004fd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80046fa:	46c0      	nop			@ (mov r8, r8)
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}
 8004700:	2000122c 	.word	0x2000122c
 8004704:	40005400 	.word	0x40005400
 8004708:	10b17db5 	.word	0x10b17db5

0800470c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004710:	4b1c      	ldr	r3, [pc, #112]	@ (8004784 <MX_SPI1_Init+0x78>)
 8004712:	4a1d      	ldr	r2, [pc, #116]	@ (8004788 <MX_SPI1_Init+0x7c>)
 8004714:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004716:	4b1b      	ldr	r3, [pc, #108]	@ (8004784 <MX_SPI1_Init+0x78>)
 8004718:	2282      	movs	r2, #130	@ 0x82
 800471a:	0052      	lsls	r2, r2, #1
 800471c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800471e:	4b19      	ldr	r3, [pc, #100]	@ (8004784 <MX_SPI1_Init+0x78>)
 8004720:	2280      	movs	r2, #128	@ 0x80
 8004722:	0212      	lsls	r2, r2, #8
 8004724:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004726:	4b17      	ldr	r3, [pc, #92]	@ (8004784 <MX_SPI1_Init+0x78>)
 8004728:	22e0      	movs	r2, #224	@ 0xe0
 800472a:	00d2      	lsls	r2, r2, #3
 800472c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800472e:	4b15      	ldr	r3, [pc, #84]	@ (8004784 <MX_SPI1_Init+0x78>)
 8004730:	2200      	movs	r2, #0
 8004732:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004734:	4b13      	ldr	r3, [pc, #76]	@ (8004784 <MX_SPI1_Init+0x78>)
 8004736:	2200      	movs	r2, #0
 8004738:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800473a:	4b12      	ldr	r3, [pc, #72]	@ (8004784 <MX_SPI1_Init+0x78>)
 800473c:	2280      	movs	r2, #128	@ 0x80
 800473e:	0092      	lsls	r2, r2, #2
 8004740:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8004742:	4b10      	ldr	r3, [pc, #64]	@ (8004784 <MX_SPI1_Init+0x78>)
 8004744:	2220      	movs	r2, #32
 8004746:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004748:	4b0e      	ldr	r3, [pc, #56]	@ (8004784 <MX_SPI1_Init+0x78>)
 800474a:	2200      	movs	r2, #0
 800474c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800474e:	4b0d      	ldr	r3, [pc, #52]	@ (8004784 <MX_SPI1_Init+0x78>)
 8004750:	2200      	movs	r2, #0
 8004752:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004754:	4b0b      	ldr	r3, [pc, #44]	@ (8004784 <MX_SPI1_Init+0x78>)
 8004756:	2200      	movs	r2, #0
 8004758:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800475a:	4b0a      	ldr	r3, [pc, #40]	@ (8004784 <MX_SPI1_Init+0x78>)
 800475c:	2207      	movs	r2, #7
 800475e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004760:	4b08      	ldr	r3, [pc, #32]	@ (8004784 <MX_SPI1_Init+0x78>)
 8004762:	2200      	movs	r2, #0
 8004764:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004766:	4b07      	ldr	r3, [pc, #28]	@ (8004784 <MX_SPI1_Init+0x78>)
 8004768:	2208      	movs	r2, #8
 800476a:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800476c:	4b05      	ldr	r3, [pc, #20]	@ (8004784 <MX_SPI1_Init+0x78>)
 800476e:	0018      	movs	r0, r3
 8004770:	f003 ff3e 	bl	80085f0 <HAL_SPI_Init>
 8004774:	1e03      	subs	r3, r0, #0
 8004776:	d001      	beq.n	800477c <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8004778:	f000 fc2e 	bl	8004fd8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800477c:	46c0      	nop			@ (mov r8, r8)
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
 8004782:	46c0      	nop			@ (mov r8, r8)
 8004784:	200012ac 	.word	0x200012ac
 8004788:	40013000 	.word	0x40013000

0800478c <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b094      	sub	sp, #80	@ 0x50
 8004790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8004792:	2334      	movs	r3, #52	@ 0x34
 8004794:	18fb      	adds	r3, r7, r3
 8004796:	0018      	movs	r0, r3
 8004798:	231c      	movs	r3, #28
 800479a:	001a      	movs	r2, r3
 800479c:	2100      	movs	r1, #0
 800479e:	f006 fa9b 	bl	800acd8 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80047a2:	003b      	movs	r3, r7
 80047a4:	0018      	movs	r0, r3
 80047a6:	2334      	movs	r3, #52	@ 0x34
 80047a8:	001a      	movs	r2, r3
 80047aa:	2100      	movs	r1, #0
 80047ac:	f006 fa94 	bl	800acd8 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80047b0:	4b37      	ldr	r3, [pc, #220]	@ (8004890 <MX_TIM17_Init+0x104>)
 80047b2:	4a38      	ldr	r2, [pc, #224]	@ (8004894 <MX_TIM17_Init+0x108>)
 80047b4:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 80047b6:	4b36      	ldr	r3, [pc, #216]	@ (8004890 <MX_TIM17_Init+0x104>)
 80047b8:	2200      	movs	r2, #0
 80047ba:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80047bc:	4b34      	ldr	r3, [pc, #208]	@ (8004890 <MX_TIM17_Init+0x104>)
 80047be:	2200      	movs	r2, #0
 80047c0:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 80047c2:	4b33      	ldr	r3, [pc, #204]	@ (8004890 <MX_TIM17_Init+0x104>)
 80047c4:	4a34      	ldr	r2, [pc, #208]	@ (8004898 <MX_TIM17_Init+0x10c>)
 80047c6:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80047c8:	4b31      	ldr	r3, [pc, #196]	@ (8004890 <MX_TIM17_Init+0x104>)
 80047ca:	2200      	movs	r2, #0
 80047cc:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80047ce:	4b30      	ldr	r3, [pc, #192]	@ (8004890 <MX_TIM17_Init+0x104>)
 80047d0:	2200      	movs	r2, #0
 80047d2:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80047d4:	4b2e      	ldr	r3, [pc, #184]	@ (8004890 <MX_TIM17_Init+0x104>)
 80047d6:	2200      	movs	r2, #0
 80047d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80047da:	4b2d      	ldr	r3, [pc, #180]	@ (8004890 <MX_TIM17_Init+0x104>)
 80047dc:	0018      	movs	r0, r3
 80047de:	f004 fa95 	bl	8008d0c <HAL_TIM_Base_Init>
 80047e2:	1e03      	subs	r3, r0, #0
 80047e4:	d001      	beq.n	80047ea <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 80047e6:	f000 fbf7 	bl	8004fd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 80047ea:	4b29      	ldr	r3, [pc, #164]	@ (8004890 <MX_TIM17_Init+0x104>)
 80047ec:	0018      	movs	r0, r3
 80047ee:	f004 fae5 	bl	8008dbc <HAL_TIM_PWM_Init>
 80047f2:	1e03      	subs	r3, r0, #0
 80047f4:	d001      	beq.n	80047fa <MX_TIM17_Init+0x6e>
  {
    Error_Handler();
 80047f6:	f000 fbef 	bl	8004fd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80047fa:	2134      	movs	r1, #52	@ 0x34
 80047fc:	187b      	adds	r3, r7, r1
 80047fe:	2260      	movs	r2, #96	@ 0x60
 8004800:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8004802:	187b      	adds	r3, r7, r1
 8004804:	2200      	movs	r2, #0
 8004806:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004808:	187b      	adds	r3, r7, r1
 800480a:	2200      	movs	r2, #0
 800480c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800480e:	187b      	adds	r3, r7, r1
 8004810:	2200      	movs	r2, #0
 8004812:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004814:	187b      	adds	r3, r7, r1
 8004816:	2200      	movs	r2, #0
 8004818:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800481a:	187b      	adds	r3, r7, r1
 800481c:	2200      	movs	r2, #0
 800481e:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004820:	187b      	adds	r3, r7, r1
 8004822:	2200      	movs	r2, #0
 8004824:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004826:	1879      	adds	r1, r7, r1
 8004828:	4b19      	ldr	r3, [pc, #100]	@ (8004890 <MX_TIM17_Init+0x104>)
 800482a:	2200      	movs	r2, #0
 800482c:	0018      	movs	r0, r3
 800482e:	f004 fca1 	bl	8009174 <HAL_TIM_PWM_ConfigChannel>
 8004832:	1e03      	subs	r3, r0, #0
 8004834:	d001      	beq.n	800483a <MX_TIM17_Init+0xae>
  {
    Error_Handler();
 8004836:	f000 fbcf 	bl	8004fd8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800483a:	003b      	movs	r3, r7
 800483c:	2200      	movs	r2, #0
 800483e:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004840:	003b      	movs	r3, r7
 8004842:	2200      	movs	r2, #0
 8004844:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004846:	003b      	movs	r3, r7
 8004848:	2200      	movs	r2, #0
 800484a:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800484c:	003b      	movs	r3, r7
 800484e:	2200      	movs	r2, #0
 8004850:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004852:	003b      	movs	r3, r7
 8004854:	2200      	movs	r2, #0
 8004856:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004858:	003b      	movs	r3, r7
 800485a:	2280      	movs	r2, #128	@ 0x80
 800485c:	0192      	lsls	r2, r2, #6
 800485e:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004860:	003b      	movs	r3, r7
 8004862:	2200      	movs	r2, #0
 8004864:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004866:	003b      	movs	r3, r7
 8004868:	2200      	movs	r2, #0
 800486a:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 800486c:	003a      	movs	r2, r7
 800486e:	4b08      	ldr	r3, [pc, #32]	@ (8004890 <MX_TIM17_Init+0x104>)
 8004870:	0011      	movs	r1, r2
 8004872:	0018      	movs	r0, r3
 8004874:	f005 f8fe 	bl	8009a74 <HAL_TIMEx_ConfigBreakDeadTime>
 8004878:	1e03      	subs	r3, r0, #0
 800487a:	d001      	beq.n	8004880 <MX_TIM17_Init+0xf4>
  {
    Error_Handler();
 800487c:	f000 fbac 	bl	8004fd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8004880:	4b03      	ldr	r3, [pc, #12]	@ (8004890 <MX_TIM17_Init+0x104>)
 8004882:	0018      	movs	r0, r3
 8004884:	f001 f986 	bl	8005b94 <HAL_TIM_MspPostInit>

}
 8004888:	46c0      	nop			@ (mov r8, r8)
 800488a:	46bd      	mov	sp, r7
 800488c:	b014      	add	sp, #80	@ 0x50
 800488e:	bd80      	pop	{r7, pc}
 8004890:	20001310 	.word	0x20001310
 8004894:	40014800 	.word	0x40014800
 8004898:	0000ffff 	.word	0x0000ffff

0800489c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80048a0:	4b23      	ldr	r3, [pc, #140]	@ (8004930 <MX_USART1_UART_Init+0x94>)
 80048a2:	4a24      	ldr	r2, [pc, #144]	@ (8004934 <MX_USART1_UART_Init+0x98>)
 80048a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80048a6:	4b22      	ldr	r3, [pc, #136]	@ (8004930 <MX_USART1_UART_Init+0x94>)
 80048a8:	2296      	movs	r2, #150	@ 0x96
 80048aa:	0192      	lsls	r2, r2, #6
 80048ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80048ae:	4b20      	ldr	r3, [pc, #128]	@ (8004930 <MX_USART1_UART_Init+0x94>)
 80048b0:	2200      	movs	r2, #0
 80048b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80048b4:	4b1e      	ldr	r3, [pc, #120]	@ (8004930 <MX_USART1_UART_Init+0x94>)
 80048b6:	2200      	movs	r2, #0
 80048b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80048ba:	4b1d      	ldr	r3, [pc, #116]	@ (8004930 <MX_USART1_UART_Init+0x94>)
 80048bc:	2200      	movs	r2, #0
 80048be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80048c0:	4b1b      	ldr	r3, [pc, #108]	@ (8004930 <MX_USART1_UART_Init+0x94>)
 80048c2:	220c      	movs	r2, #12
 80048c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80048c6:	4b1a      	ldr	r3, [pc, #104]	@ (8004930 <MX_USART1_UART_Init+0x94>)
 80048c8:	2200      	movs	r2, #0
 80048ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80048cc:	4b18      	ldr	r3, [pc, #96]	@ (8004930 <MX_USART1_UART_Init+0x94>)
 80048ce:	2200      	movs	r2, #0
 80048d0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80048d2:	4b17      	ldr	r3, [pc, #92]	@ (8004930 <MX_USART1_UART_Init+0x94>)
 80048d4:	2200      	movs	r2, #0
 80048d6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80048d8:	4b15      	ldr	r3, [pc, #84]	@ (8004930 <MX_USART1_UART_Init+0x94>)
 80048da:	2200      	movs	r2, #0
 80048dc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80048de:	4b14      	ldr	r3, [pc, #80]	@ (8004930 <MX_USART1_UART_Init+0x94>)
 80048e0:	2200      	movs	r2, #0
 80048e2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80048e4:	4b12      	ldr	r3, [pc, #72]	@ (8004930 <MX_USART1_UART_Init+0x94>)
 80048e6:	0018      	movs	r0, r3
 80048e8:	f005 f960 	bl	8009bac <HAL_UART_Init>
 80048ec:	1e03      	subs	r3, r0, #0
 80048ee:	d001      	beq.n	80048f4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80048f0:	f000 fb72 	bl	8004fd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80048f4:	4b0e      	ldr	r3, [pc, #56]	@ (8004930 <MX_USART1_UART_Init+0x94>)
 80048f6:	2100      	movs	r1, #0
 80048f8:	0018      	movs	r0, r3
 80048fa:	f006 f857 	bl	800a9ac <HAL_UARTEx_SetTxFifoThreshold>
 80048fe:	1e03      	subs	r3, r0, #0
 8004900:	d001      	beq.n	8004906 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8004902:	f000 fb69 	bl	8004fd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004906:	4b0a      	ldr	r3, [pc, #40]	@ (8004930 <MX_USART1_UART_Init+0x94>)
 8004908:	2100      	movs	r1, #0
 800490a:	0018      	movs	r0, r3
 800490c:	f006 f88e 	bl	800aa2c <HAL_UARTEx_SetRxFifoThreshold>
 8004910:	1e03      	subs	r3, r0, #0
 8004912:	d001      	beq.n	8004918 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8004914:	f000 fb60 	bl	8004fd8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8004918:	4b05      	ldr	r3, [pc, #20]	@ (8004930 <MX_USART1_UART_Init+0x94>)
 800491a:	0018      	movs	r0, r3
 800491c:	f006 f80c 	bl	800a938 <HAL_UARTEx_DisableFifoMode>
 8004920:	1e03      	subs	r3, r0, #0
 8004922:	d001      	beq.n	8004928 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8004924:	f000 fb58 	bl	8004fd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004928:	46c0      	nop			@ (mov r8, r8)
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
 800492e:	46c0      	nop			@ (mov r8, r8)
 8004930:	2000135c 	.word	0x2000135c
 8004934:	40013800 	.word	0x40013800

08004938 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800493c:	4b23      	ldr	r3, [pc, #140]	@ (80049cc <MX_USART2_UART_Init+0x94>)
 800493e:	4a24      	ldr	r2, [pc, #144]	@ (80049d0 <MX_USART2_UART_Init+0x98>)
 8004940:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004942:	4b22      	ldr	r3, [pc, #136]	@ (80049cc <MX_USART2_UART_Init+0x94>)
 8004944:	22e1      	movs	r2, #225	@ 0xe1
 8004946:	0252      	lsls	r2, r2, #9
 8004948:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800494a:	4b20      	ldr	r3, [pc, #128]	@ (80049cc <MX_USART2_UART_Init+0x94>)
 800494c:	2200      	movs	r2, #0
 800494e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004950:	4b1e      	ldr	r3, [pc, #120]	@ (80049cc <MX_USART2_UART_Init+0x94>)
 8004952:	2200      	movs	r2, #0
 8004954:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004956:	4b1d      	ldr	r3, [pc, #116]	@ (80049cc <MX_USART2_UART_Init+0x94>)
 8004958:	2200      	movs	r2, #0
 800495a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800495c:	4b1b      	ldr	r3, [pc, #108]	@ (80049cc <MX_USART2_UART_Init+0x94>)
 800495e:	220c      	movs	r2, #12
 8004960:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004962:	4b1a      	ldr	r3, [pc, #104]	@ (80049cc <MX_USART2_UART_Init+0x94>)
 8004964:	2200      	movs	r2, #0
 8004966:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004968:	4b18      	ldr	r3, [pc, #96]	@ (80049cc <MX_USART2_UART_Init+0x94>)
 800496a:	2200      	movs	r2, #0
 800496c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800496e:	4b17      	ldr	r3, [pc, #92]	@ (80049cc <MX_USART2_UART_Init+0x94>)
 8004970:	2200      	movs	r2, #0
 8004972:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004974:	4b15      	ldr	r3, [pc, #84]	@ (80049cc <MX_USART2_UART_Init+0x94>)
 8004976:	2200      	movs	r2, #0
 8004978:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800497a:	4b14      	ldr	r3, [pc, #80]	@ (80049cc <MX_USART2_UART_Init+0x94>)
 800497c:	2200      	movs	r2, #0
 800497e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004980:	4b12      	ldr	r3, [pc, #72]	@ (80049cc <MX_USART2_UART_Init+0x94>)
 8004982:	0018      	movs	r0, r3
 8004984:	f005 f912 	bl	8009bac <HAL_UART_Init>
 8004988:	1e03      	subs	r3, r0, #0
 800498a:	d001      	beq.n	8004990 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800498c:	f000 fb24 	bl	8004fd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004990:	4b0e      	ldr	r3, [pc, #56]	@ (80049cc <MX_USART2_UART_Init+0x94>)
 8004992:	2100      	movs	r1, #0
 8004994:	0018      	movs	r0, r3
 8004996:	f006 f809 	bl	800a9ac <HAL_UARTEx_SetTxFifoThreshold>
 800499a:	1e03      	subs	r3, r0, #0
 800499c:	d001      	beq.n	80049a2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800499e:	f000 fb1b 	bl	8004fd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80049a2:	4b0a      	ldr	r3, [pc, #40]	@ (80049cc <MX_USART2_UART_Init+0x94>)
 80049a4:	2100      	movs	r1, #0
 80049a6:	0018      	movs	r0, r3
 80049a8:	f006 f840 	bl	800aa2c <HAL_UARTEx_SetRxFifoThreshold>
 80049ac:	1e03      	subs	r3, r0, #0
 80049ae:	d001      	beq.n	80049b4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80049b0:	f000 fb12 	bl	8004fd8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80049b4:	4b05      	ldr	r3, [pc, #20]	@ (80049cc <MX_USART2_UART_Init+0x94>)
 80049b6:	0018      	movs	r0, r3
 80049b8:	f005 ffbe 	bl	800a938 <HAL_UARTEx_DisableFifoMode>
 80049bc:	1e03      	subs	r3, r0, #0
 80049be:	d001      	beq.n	80049c4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80049c0:	f000 fb0a 	bl	8004fd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80049c4:	46c0      	nop			@ (mov r8, r8)
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	46c0      	nop			@ (mov r8, r8)
 80049cc:	200013f0 	.word	0x200013f0
 80049d0:	40004400 	.word	0x40004400

080049d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80049d4:	b590      	push	{r4, r7, lr}
 80049d6:	b089      	sub	sp, #36	@ 0x24
 80049d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049da:	240c      	movs	r4, #12
 80049dc:	193b      	adds	r3, r7, r4
 80049de:	0018      	movs	r0, r3
 80049e0:	2314      	movs	r3, #20
 80049e2:	001a      	movs	r2, r3
 80049e4:	2100      	movs	r1, #0
 80049e6:	f006 f977 	bl	800acd8 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80049ea:	4b31      	ldr	r3, [pc, #196]	@ (8004ab0 <MX_GPIO_Init+0xdc>)
 80049ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80049ee:	4b30      	ldr	r3, [pc, #192]	@ (8004ab0 <MX_GPIO_Init+0xdc>)
 80049f0:	2104      	movs	r1, #4
 80049f2:	430a      	orrs	r2, r1
 80049f4:	635a      	str	r2, [r3, #52]	@ 0x34
 80049f6:	4b2e      	ldr	r3, [pc, #184]	@ (8004ab0 <MX_GPIO_Init+0xdc>)
 80049f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049fa:	2204      	movs	r2, #4
 80049fc:	4013      	ands	r3, r2
 80049fe:	60bb      	str	r3, [r7, #8]
 8004a00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a02:	4b2b      	ldr	r3, [pc, #172]	@ (8004ab0 <MX_GPIO_Init+0xdc>)
 8004a04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a06:	4b2a      	ldr	r3, [pc, #168]	@ (8004ab0 <MX_GPIO_Init+0xdc>)
 8004a08:	2101      	movs	r1, #1
 8004a0a:	430a      	orrs	r2, r1
 8004a0c:	635a      	str	r2, [r3, #52]	@ 0x34
 8004a0e:	4b28      	ldr	r3, [pc, #160]	@ (8004ab0 <MX_GPIO_Init+0xdc>)
 8004a10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a12:	2201      	movs	r2, #1
 8004a14:	4013      	ands	r3, r2
 8004a16:	607b      	str	r3, [r7, #4]
 8004a18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004a1a:	4b25      	ldr	r3, [pc, #148]	@ (8004ab0 <MX_GPIO_Init+0xdc>)
 8004a1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a1e:	4b24      	ldr	r3, [pc, #144]	@ (8004ab0 <MX_GPIO_Init+0xdc>)
 8004a20:	2108      	movs	r1, #8
 8004a22:	430a      	orrs	r2, r1
 8004a24:	635a      	str	r2, [r3, #52]	@ 0x34
 8004a26:	4b22      	ldr	r3, [pc, #136]	@ (8004ab0 <MX_GPIO_Init+0xdc>)
 8004a28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a2a:	2208      	movs	r2, #8
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	603b      	str	r3, [r7, #0]
 8004a30:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_15, GPIO_PIN_RESET);
 8004a32:	4920      	ldr	r1, [pc, #128]	@ (8004ab4 <MX_GPIO_Init+0xe0>)
 8004a34:	23a0      	movs	r3, #160	@ 0xa0
 8004a36:	05db      	lsls	r3, r3, #23
 8004a38:	2200      	movs	r2, #0
 8004a3a:	0018      	movs	r0, r3
 8004a3c:	f001 fd2d 	bl	800649a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004a40:	193b      	adds	r3, r7, r4
 8004a42:	2202      	movs	r2, #2
 8004a44:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004a46:	193b      	adds	r3, r7, r4
 8004a48:	2200      	movs	r2, #0
 8004a4a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a4c:	193b      	adds	r3, r7, r4
 8004a4e:	2200      	movs	r2, #0
 8004a50:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a52:	193b      	adds	r3, r7, r4
 8004a54:	4a18      	ldr	r2, [pc, #96]	@ (8004ab8 <MX_GPIO_Init+0xe4>)
 8004a56:	0019      	movs	r1, r3
 8004a58:	0010      	movs	r0, r2
 8004a5a:	f001 fb95 	bl	8006188 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_15;
 8004a5e:	193b      	adds	r3, r7, r4
 8004a60:	4a14      	ldr	r2, [pc, #80]	@ (8004ab4 <MX_GPIO_Init+0xe0>)
 8004a62:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a64:	193b      	adds	r3, r7, r4
 8004a66:	2201      	movs	r2, #1
 8004a68:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a6a:	193b      	adds	r3, r7, r4
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a70:	193b      	adds	r3, r7, r4
 8004a72:	2200      	movs	r2, #0
 8004a74:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a76:	193a      	adds	r2, r7, r4
 8004a78:	23a0      	movs	r3, #160	@ 0xa0
 8004a7a:	05db      	lsls	r3, r3, #23
 8004a7c:	0011      	movs	r1, r2
 8004a7e:	0018      	movs	r0, r3
 8004a80:	f001 fb82 	bl	8006188 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004a84:	0021      	movs	r1, r4
 8004a86:	187b      	adds	r3, r7, r1
 8004a88:	22c0      	movs	r2, #192	@ 0xc0
 8004a8a:	0152      	lsls	r2, r2, #5
 8004a8c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004a8e:	187b      	adds	r3, r7, r1
 8004a90:	2200      	movs	r2, #0
 8004a92:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a94:	187b      	adds	r3, r7, r1
 8004a96:	2200      	movs	r2, #0
 8004a98:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a9a:	187a      	adds	r2, r7, r1
 8004a9c:	23a0      	movs	r3, #160	@ 0xa0
 8004a9e:	05db      	lsls	r3, r3, #23
 8004aa0:	0011      	movs	r1, r2
 8004aa2:	0018      	movs	r0, r3
 8004aa4:	f001 fb70 	bl	8006188 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8004aa8:	46c0      	nop			@ (mov r8, r8)
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	b009      	add	sp, #36	@ 0x24
 8004aae:	bd90      	pop	{r4, r7, pc}
 8004ab0:	40021000 	.word	0x40021000
 8004ab4:	00008030 	.word	0x00008030
 8004ab8:	50000800 	.word	0x50000800

08004abc <Animate>:

/* USER CODE BEGIN 4 */
//AURORA: Put custom functions here!
void Animate (struct Img* animation, unsigned int size)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b086      	sub	sp, #24
 8004ac0:	af04      	add	r7, sp, #16
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	6039      	str	r1, [r7, #0]
	++currentFrame;
 8004ac6:	4b14      	ldr	r3, [pc, #80]	@ (8004b18 <Animate+0x5c>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	1c5a      	adds	r2, r3, #1
 8004acc:	4b12      	ldr	r3, [pc, #72]	@ (8004b18 <Animate+0x5c>)
 8004ace:	601a      	str	r2, [r3, #0]
	if(currentFrame > size)
 8004ad0:	4b11      	ldr	r3, [pc, #68]	@ (8004b18 <Animate+0x5c>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	683a      	ldr	r2, [r7, #0]
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d202      	bcs.n	8004ae0 <Animate+0x24>
	{
		currentFrame = 0;
 8004ada:	4b0f      	ldr	r3, [pc, #60]	@ (8004b18 <Animate+0x5c>)
 8004adc:	2200      	movs	r2, #0
 8004ade:	601a      	str	r2, [r3, #0]
	}
	drawImage(animation[currentFrame].Body, palette, 40, 40, 64, 64, animation[currentFrame].Size);
 8004ae0:	4b0d      	ldr	r3, [pc, #52]	@ (8004b18 <Animate+0x5c>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	00db      	lsls	r3, r3, #3
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	18d3      	adds	r3, r2, r3
 8004aea:	6818      	ldr	r0, [r3, #0]
 8004aec:	4b0a      	ldr	r3, [pc, #40]	@ (8004b18 <Animate+0x5c>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	00db      	lsls	r3, r3, #3
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	18d3      	adds	r3, r2, r3
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	4908      	ldr	r1, [pc, #32]	@ (8004b1c <Animate+0x60>)
 8004afc:	9302      	str	r3, [sp, #8]
 8004afe:	2340      	movs	r3, #64	@ 0x40
 8004b00:	9301      	str	r3, [sp, #4]
 8004b02:	2340      	movs	r3, #64	@ 0x40
 8004b04:	9300      	str	r3, [sp, #0]
 8004b06:	2328      	movs	r3, #40	@ 0x28
 8004b08:	2228      	movs	r2, #40	@ 0x28
 8004b0a:	f7fe fe59 	bl	80037c0 <drawImage>
	return;
 8004b0e:	46c0      	nop			@ (mov r8, r8)
}
 8004b10:	46bd      	mov	sp, r7
 8004b12:	b002      	add	sp, #8
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	46c0      	nop			@ (mov r8, r8)
 8004b18:	200011ac 	.word	0x200011ac
 8004b1c:	20000e30 	.word	0x20000e30

08004b20 <_ADXL343_ReadReg8>:
int _ADXL343_ReadReg8 (unsigned char TargetRegister, unsigned char * TargetValue, uint8_t size)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b084      	sub	sp, #16
 8004b24:	af02      	add	r7, sp, #8
 8004b26:	6039      	str	r1, [r7, #0]
 8004b28:	0011      	movs	r1, r2
 8004b2a:	1dfb      	adds	r3, r7, #7
 8004b2c:	1c02      	adds	r2, r0, #0
 8004b2e:	701a      	strb	r2, [r3, #0]
 8004b30:	1dbb      	adds	r3, r7, #6
 8004b32:	1c0a      	adds	r2, r1, #0
 8004b34:	701a      	strb	r2, [r3, #0]
  if (!HAL_I2C_Master_Transmit(&hi2c1, 0x14<<1, &TargetRegister, 1, 1000)==HAL_OK)
 8004b36:	1dfa      	adds	r2, r7, #7
 8004b38:	4811      	ldr	r0, [pc, #68]	@ (8004b80 <_ADXL343_ReadReg8+0x60>)
 8004b3a:	23fa      	movs	r3, #250	@ 0xfa
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	9300      	str	r3, [sp, #0]
 8004b40:	2301      	movs	r3, #1
 8004b42:	2128      	movs	r1, #40	@ 0x28
 8004b44:	f001 fd6c 	bl	8006620 <HAL_I2C_Master_Transmit>
 8004b48:	1e03      	subs	r3, r0, #0
 8004b4a:	d002      	beq.n	8004b52 <_ADXL343_ReadReg8+0x32>
      return -1;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	425b      	negs	r3, r3
 8004b50:	e011      	b.n	8004b76 <_ADXL343_ReadReg8+0x56>

  if (!HAL_I2C_Master_Receive(&hi2c1, 0x14<<1, TargetValue, size, 1000)==HAL_OK)
 8004b52:	1dbb      	adds	r3, r7, #6
 8004b54:	781b      	ldrb	r3, [r3, #0]
 8004b56:	b299      	uxth	r1, r3
 8004b58:	683a      	ldr	r2, [r7, #0]
 8004b5a:	4809      	ldr	r0, [pc, #36]	@ (8004b80 <_ADXL343_ReadReg8+0x60>)
 8004b5c:	23fa      	movs	r3, #250	@ 0xfa
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	9300      	str	r3, [sp, #0]
 8004b62:	000b      	movs	r3, r1
 8004b64:	2128      	movs	r1, #40	@ 0x28
 8004b66:	f001 fe85 	bl	8006874 <HAL_I2C_Master_Receive>
 8004b6a:	1e03      	subs	r3, r0, #0
 8004b6c:	d002      	beq.n	8004b74 <_ADXL343_ReadReg8+0x54>
    return -2;
 8004b6e:	2302      	movs	r3, #2
 8004b70:	425b      	negs	r3, r3
 8004b72:	e000      	b.n	8004b76 <_ADXL343_ReadReg8+0x56>

  return 0;
 8004b74:	2300      	movs	r3, #0
}
 8004b76:	0018      	movs	r0, r3
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	b002      	add	sp, #8
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	46c0      	nop			@ (mov r8, r8)
 8004b80:	2000122c 	.word	0x2000122c

08004b84 <_ADXL343_WriteReg8>:

int _ADXL343_WriteReg8 (unsigned char TargetRegister, unsigned char TargetValue)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b086      	sub	sp, #24
 8004b88:	af02      	add	r7, sp, #8
 8004b8a:	0002      	movs	r2, r0
 8004b8c:	1dfb      	adds	r3, r7, #7
 8004b8e:	701a      	strb	r2, [r3, #0]
 8004b90:	1dbb      	adds	r3, r7, #6
 8004b92:	1c0a      	adds	r2, r1, #0
 8004b94:	701a      	strb	r2, [r3, #0]
  unsigned char buff [2];
  buff[0] = TargetRegister;
 8004b96:	210c      	movs	r1, #12
 8004b98:	187b      	adds	r3, r7, r1
 8004b9a:	1dfa      	adds	r2, r7, #7
 8004b9c:	7812      	ldrb	r2, [r2, #0]
 8004b9e:	701a      	strb	r2, [r3, #0]
  buff[1] = TargetValue;
 8004ba0:	187b      	adds	r3, r7, r1
 8004ba2:	1dba      	adds	r2, r7, #6
 8004ba4:	7812      	ldrb	r2, [r2, #0]
 8004ba6:	705a      	strb	r2, [r3, #1]

  if (HAL_I2C_Master_Transmit(&hi2c1, 0x14<<1, buff, 2, 100))
 8004ba8:	187a      	adds	r2, r7, r1
 8004baa:	4808      	ldr	r0, [pc, #32]	@ (8004bcc <_ADXL343_WriteReg8+0x48>)
 8004bac:	2364      	movs	r3, #100	@ 0x64
 8004bae:	9300      	str	r3, [sp, #0]
 8004bb0:	2302      	movs	r3, #2
 8004bb2:	2128      	movs	r1, #40	@ 0x28
 8004bb4:	f001 fd34 	bl	8006620 <HAL_I2C_Master_Transmit>
 8004bb8:	1e03      	subs	r3, r0, #0
 8004bba:	d002      	beq.n	8004bc2 <_ADXL343_WriteReg8+0x3e>
      return -1;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	425b      	negs	r3, r3
 8004bc0:	e000      	b.n	8004bc4 <_ADXL343_WriteReg8+0x40>

  return 0;
 8004bc2:	2300      	movs	r3, #0
}
 8004bc4:	0018      	movs	r0, r3
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	b004      	add	sp, #16
 8004bca:	bd80      	pop	{r7, pc}
 8004bcc:	2000122c 	.word	0x2000122c

08004bd0 <GetLatLon>:
	}
}

}
void GetLatLon()
{
 8004bd0:	b5b0      	push	{r4, r5, r7, lr}
 8004bd2:	b08a      	sub	sp, #40	@ 0x28
 8004bd4:	af00      	add	r7, sp, #0
	int gpsI=0;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	627b      	str	r3, [r7, #36]	@ 0x24
	struct latLon tempPos;
	float checkW;
	float checkH;

	//HAL_UART_Recieve();
	while(HAL_UART_Receive(&huart1, &(buffer[gpsI]), 1, 1000)==HAL_OK||1)
 8004bda:	e193      	b.n	8004f04 <GetLatLon+0x334>
			  		  	{
							if(buffer[gpsI]=='$')
							{
								for(ii=0;ii<=127;ii++) buffer[ii]=0;
 8004bdc:	4bd5      	ldr	r3, [pc, #852]	@ (8004f34 <GetLatLon+0x364>)
 8004bde:	2200      	movs	r2, #0
 8004be0:	801a      	strh	r2, [r3, #0]
 8004be2:	e00d      	b.n	8004c00 <GetLatLon+0x30>
 8004be4:	4bd3      	ldr	r3, [pc, #844]	@ (8004f34 <GetLatLon+0x364>)
 8004be6:	881b      	ldrh	r3, [r3, #0]
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	001a      	movs	r2, r3
 8004bec:	4bd2      	ldr	r3, [pc, #840]	@ (8004f38 <GetLatLon+0x368>)
 8004bee:	2100      	movs	r1, #0
 8004bf0:	5499      	strb	r1, [r3, r2]
 8004bf2:	4bd0      	ldr	r3, [pc, #832]	@ (8004f34 <GetLatLon+0x364>)
 8004bf4:	881b      	ldrh	r3, [r3, #0]
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	3301      	adds	r3, #1
 8004bfa:	b29a      	uxth	r2, r3
 8004bfc:	4bcd      	ldr	r3, [pc, #820]	@ (8004f34 <GetLatLon+0x364>)
 8004bfe:	801a      	strh	r2, [r3, #0]
 8004c00:	4bcc      	ldr	r3, [pc, #816]	@ (8004f34 <GetLatLon+0x364>)
 8004c02:	881b      	ldrh	r3, [r3, #0]
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	2b7f      	cmp	r3, #127	@ 0x7f
 8004c08:	d9ec      	bls.n	8004be4 <GetLatLon+0x14>
								buffer[0]='$';
 8004c0a:	4bcb      	ldr	r3, [pc, #812]	@ (8004f38 <GetLatLon+0x368>)
 8004c0c:	2224      	movs	r2, #36	@ 0x24
 8004c0e:	701a      	strb	r2, [r3, #0]
								gpsI=0;
 8004c10:	2300      	movs	r3, #0
 8004c12:	627b      	str	r3, [r7, #36]	@ 0x24
							}//HAL_UART_Transmit(&huart2, buffer[i], 1, 1000);
			  			  if(buffer[gpsI]=='\n')
 8004c14:	4ac8      	ldr	r2, [pc, #800]	@ (8004f38 <GetLatLon+0x368>)
 8004c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c18:	18d3      	adds	r3, r2, r3
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	2b0a      	cmp	r3, #10
 8004c1e:	d000      	beq.n	8004c22 <GetLatLon+0x52>
 8004c20:	e16d      	b.n	8004efe <GetLatLon+0x32e>
			  				  {
			  				  if(minmea_parse_rmc(&rmcStruct, &(buffer))){
 8004c22:	4ac5      	ldr	r2, [pc, #788]	@ (8004f38 <GetLatLon+0x368>)
 8004c24:	4bc5      	ldr	r3, [pc, #788]	@ (8004f3c <GetLatLon+0x36c>)
 8004c26:	0011      	movs	r1, r2
 8004c28:	0018      	movs	r0, r3
 8004c2a:	f000 fd91 	bl	8005750 <minmea_parse_rmc>
 8004c2e:	1e03      	subs	r3, r0, #0
 8004c30:	d100      	bne.n	8004c34 <GetLatLon+0x64>
 8004c32:	e0a2      	b.n	8004d7a <GetLatLon+0x1aa>
			  				      pos.lat = minmea_tocoord(&rmcStruct.latitude);
 8004c34:	4bc2      	ldr	r3, [pc, #776]	@ (8004f40 <GetLatLon+0x370>)
 8004c36:	0018      	movs	r0, r3
 8004c38:	f7ff f920 	bl	8003e7c <minmea_tocoord>
 8004c3c:	1c02      	adds	r2, r0, #0
 8004c3e:	240c      	movs	r4, #12
 8004c40:	193b      	adds	r3, r7, r4
 8004c42:	601a      	str	r2, [r3, #0]
			  				      pos.lon = minmea_tocoord(&rmcStruct.longitude);
 8004c44:	4bbf      	ldr	r3, [pc, #764]	@ (8004f44 <GetLatLon+0x374>)
 8004c46:	0018      	movs	r0, r3
 8004c48:	f7ff f918 	bl	8003e7c <minmea_tocoord>
 8004c4c:	1c02      	adds	r2, r0, #0
 8004c4e:	193b      	adds	r3, r7, r4
 8004c50:	605a      	str	r2, [r3, #4]
			  				      game.time = rmcStruct.time;
 8004c52:	4bbd      	ldr	r3, [pc, #756]	@ (8004f48 <GetLatLon+0x378>)
 8004c54:	4ab9      	ldr	r2, [pc, #740]	@ (8004f3c <GetLatLon+0x36c>)
 8004c56:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004c58:	c313      	stmia	r3!, {r0, r1, r4}
 8004c5a:	6812      	ldr	r2, [r2, #0]
 8004c5c:	601a      	str	r2, [r3, #0]
			  				      frameGot=1;
 8004c5e:	4bbb      	ldr	r3, [pc, #748]	@ (8004f4c <GetLatLon+0x37c>)
 8004c60:	2201      	movs	r2, #1
 8004c62:	701a      	strb	r2, [r3, #0]
			  				      for(int posCheckI=0;posCheckI<game.numLocations;posCheckI++)
 8004c64:	2300      	movs	r3, #0
 8004c66:	623b      	str	r3, [r7, #32]
 8004c68:	e071      	b.n	8004d4e <GetLatLon+0x17e>
			  				      {

			  				    	  tempPos = game.positions[posCheckI];
 8004c6a:	1d3a      	adds	r2, r7, #4
 8004c6c:	49b6      	ldr	r1, [pc, #728]	@ (8004f48 <GetLatLon+0x378>)
 8004c6e:	6a3b      	ldr	r3, [r7, #32]
 8004c70:	3303      	adds	r3, #3
 8004c72:	00db      	lsls	r3, r3, #3
 8004c74:	18cb      	adds	r3, r1, r3
 8004c76:	cb03      	ldmia	r3!, {r0, r1}
 8004c78:	c203      	stmia	r2!, {r0, r1}
			  				    	if(tempPos.lat&&pos.lat){
 8004c7a:	1d3b      	adds	r3, r7, #4
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	2100      	movs	r1, #0
 8004c80:	1c18      	adds	r0, r3, #0
 8004c82:	f7fb fc13 	bl	80004ac <__aeabi_fcmpeq>
 8004c86:	1e03      	subs	r3, r0, #0
 8004c88:	d000      	beq.n	8004c8c <GetLatLon+0xbc>
			  				    	  checkW = abs(tempPos.lat-pos.lat);
			  				    	  checkH = abs(tempPos.lon-pos.lon);
			  				    	  if(sqrt((checkW*checkW)+(checkH*checkH))<gpsThreshold) return;
			  				    	  }
			  				    	  else return;
 8004c8a:	e14f      	b.n	8004f2c <GetLatLon+0x35c>
			  				    	if(tempPos.lat&&pos.lat){
 8004c8c:	230c      	movs	r3, #12
 8004c8e:	18fb      	adds	r3, r7, r3
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	2100      	movs	r1, #0
 8004c94:	1c18      	adds	r0, r3, #0
 8004c96:	f7fb fc09 	bl	80004ac <__aeabi_fcmpeq>
 8004c9a:	1e03      	subs	r3, r0, #0
 8004c9c:	d000      	beq.n	8004ca0 <GetLatLon+0xd0>
			  				    	  else return;
 8004c9e:	e145      	b.n	8004f2c <GetLatLon+0x35c>
			  				    	  checkW = abs(tempPos.lat-pos.lat);
 8004ca0:	1d3b      	adds	r3, r7, #4
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	240c      	movs	r4, #12
 8004ca6:	193b      	adds	r3, r7, r4
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	1c19      	adds	r1, r3, #0
 8004cac:	1c10      	adds	r0, r2, #0
 8004cae:	f7fc f9dd 	bl	800106c <__aeabi_fsub>
 8004cb2:	1c03      	adds	r3, r0, #0
 8004cb4:	1c18      	adds	r0, r3, #0
 8004cb6:	f7fc fb7d 	bl	80013b4 <__aeabi_f2iz>
 8004cba:	0003      	movs	r3, r0
 8004cbc:	17da      	asrs	r2, r3, #31
 8004cbe:	189b      	adds	r3, r3, r2
 8004cc0:	4053      	eors	r3, r2
 8004cc2:	0018      	movs	r0, r3
 8004cc4:	f7fc fb96 	bl	80013f4 <__aeabi_i2f>
 8004cc8:	1c03      	adds	r3, r0, #0
 8004cca:	61bb      	str	r3, [r7, #24]
			  				    	  checkH = abs(tempPos.lon-pos.lon);
 8004ccc:	1d3b      	adds	r3, r7, #4
 8004cce:	685a      	ldr	r2, [r3, #4]
 8004cd0:	193b      	adds	r3, r7, r4
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	1c19      	adds	r1, r3, #0
 8004cd6:	1c10      	adds	r0, r2, #0
 8004cd8:	f7fc f9c8 	bl	800106c <__aeabi_fsub>
 8004cdc:	1c03      	adds	r3, r0, #0
 8004cde:	1c18      	adds	r0, r3, #0
 8004ce0:	f7fc fb68 	bl	80013b4 <__aeabi_f2iz>
 8004ce4:	0003      	movs	r3, r0
 8004ce6:	17da      	asrs	r2, r3, #31
 8004ce8:	189b      	adds	r3, r3, r2
 8004cea:	4053      	eors	r3, r2
 8004cec:	0018      	movs	r0, r3
 8004cee:	f7fc fb81 	bl	80013f4 <__aeabi_i2f>
 8004cf2:	1c03      	adds	r3, r0, #0
 8004cf4:	617b      	str	r3, [r7, #20]
			  				    	  if(sqrt((checkW*checkW)+(checkH*checkH))<gpsThreshold) return;
 8004cf6:	69b9      	ldr	r1, [r7, #24]
 8004cf8:	69b8      	ldr	r0, [r7, #24]
 8004cfa:	f7fc f879 	bl	8000df0 <__aeabi_fmul>
 8004cfe:	1c03      	adds	r3, r0, #0
 8004d00:	1c1c      	adds	r4, r3, #0
 8004d02:	6979      	ldr	r1, [r7, #20]
 8004d04:	6978      	ldr	r0, [r7, #20]
 8004d06:	f7fc f873 	bl	8000df0 <__aeabi_fmul>
 8004d0a:	1c03      	adds	r3, r0, #0
 8004d0c:	1c19      	adds	r1, r3, #0
 8004d0e:	1c20      	adds	r0, r4, #0
 8004d10:	f7fb fcfe 	bl	8000710 <__aeabi_fadd>
 8004d14:	1c03      	adds	r3, r0, #0
 8004d16:	1c18      	adds	r0, r3, #0
 8004d18:	f7fe f9e6 	bl	80030e8 <__aeabi_f2d>
 8004d1c:	0002      	movs	r2, r0
 8004d1e:	000b      	movs	r3, r1
 8004d20:	0010      	movs	r0, r2
 8004d22:	0019      	movs	r1, r3
 8004d24:	f006 fc56 	bl	800b5d4 <sqrt>
 8004d28:	0004      	movs	r4, r0
 8004d2a:	000d      	movs	r5, r1
 8004d2c:	4b88      	ldr	r3, [pc, #544]	@ (8004f50 <GetLatLon+0x380>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	1c18      	adds	r0, r3, #0
 8004d32:	f7fe f9d9 	bl	80030e8 <__aeabi_f2d>
 8004d36:	0002      	movs	r2, r0
 8004d38:	000b      	movs	r3, r1
 8004d3a:	0020      	movs	r0, r4
 8004d3c:	0029      	movs	r1, r5
 8004d3e:	f7fb fb81 	bl	8000444 <__aeabi_dcmplt>
 8004d42:	1e03      	subs	r3, r0, #0
 8004d44:	d000      	beq.n	8004d48 <GetLatLon+0x178>
 8004d46:	e0ee      	b.n	8004f26 <GetLatLon+0x356>
			  				      for(int posCheckI=0;posCheckI<game.numLocations;posCheckI++)
 8004d48:	6a3b      	ldr	r3, [r7, #32]
 8004d4a:	3301      	adds	r3, #1
 8004d4c:	623b      	str	r3, [r7, #32]
 8004d4e:	4b7e      	ldr	r3, [pc, #504]	@ (8004f48 <GetLatLon+0x378>)
 8004d50:	695a      	ldr	r2, [r3, #20]
 8004d52:	6a3b      	ldr	r3, [r7, #32]
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d888      	bhi.n	8004c6a <GetLatLon+0x9a>
			  				      }
			  				      game.positions[game.numLocations] = pos;
 8004d58:	4b7b      	ldr	r3, [pc, #492]	@ (8004f48 <GetLatLon+0x378>)
 8004d5a:	695b      	ldr	r3, [r3, #20]
 8004d5c:	4a7a      	ldr	r2, [pc, #488]	@ (8004f48 <GetLatLon+0x378>)
 8004d5e:	3303      	adds	r3, #3
 8004d60:	00db      	lsls	r3, r3, #3
 8004d62:	210c      	movs	r1, #12
 8004d64:	1879      	adds	r1, r7, r1
 8004d66:	18d3      	adds	r3, r2, r3
 8004d68:	000a      	movs	r2, r1
 8004d6a:	ca03      	ldmia	r2!, {r0, r1}
 8004d6c:	c303      	stmia	r3!, {r0, r1}
								  game.numLocations++;
 8004d6e:	4b76      	ldr	r3, [pc, #472]	@ (8004f48 <GetLatLon+0x378>)
 8004d70:	695b      	ldr	r3, [r3, #20]
 8004d72:	1c5a      	adds	r2, r3, #1
 8004d74:	4b74      	ldr	r3, [pc, #464]	@ (8004f48 <GetLatLon+0x378>)
 8004d76:	615a      	str	r2, [r3, #20]
			  				      break;
 8004d78:	e0d8      	b.n	8004f2c <GetLatLon+0x35c>
			  				  }
			  				if(minmea_parse_gga(&ggaStruct, &(buffer))){
 8004d7a:	4a6f      	ldr	r2, [pc, #444]	@ (8004f38 <GetLatLon+0x368>)
 8004d7c:	4b75      	ldr	r3, [pc, #468]	@ (8004f54 <GetLatLon+0x384>)
 8004d7e:	0011      	movs	r1, r2
 8004d80:	0018      	movs	r0, r3
 8004d82:	f000 fd59 	bl	8005838 <minmea_parse_gga>
 8004d86:	1e03      	subs	r3, r0, #0
 8004d88:	d100      	bne.n	8004d8c <GetLatLon+0x1bc>
 8004d8a:	e0a1      	b.n	8004ed0 <GetLatLon+0x300>
			  							  				      pos.lat = minmea_tocoord(&ggaStruct.latitude);
 8004d8c:	4b72      	ldr	r3, [pc, #456]	@ (8004f58 <GetLatLon+0x388>)
 8004d8e:	0018      	movs	r0, r3
 8004d90:	f7ff f874 	bl	8003e7c <minmea_tocoord>
 8004d94:	1c02      	adds	r2, r0, #0
 8004d96:	240c      	movs	r4, #12
 8004d98:	193b      	adds	r3, r7, r4
 8004d9a:	601a      	str	r2, [r3, #0]
			  							  				      pos.lon = minmea_tocoord(&ggaStruct.longitude);
 8004d9c:	4b6f      	ldr	r3, [pc, #444]	@ (8004f5c <GetLatLon+0x38c>)
 8004d9e:	0018      	movs	r0, r3
 8004da0:	f7ff f86c 	bl	8003e7c <minmea_tocoord>
 8004da4:	1c02      	adds	r2, r0, #0
 8004da6:	193b      	adds	r3, r7, r4
 8004da8:	605a      	str	r2, [r3, #4]
			  							  				      game.time = ggaStruct.time;
 8004daa:	4b67      	ldr	r3, [pc, #412]	@ (8004f48 <GetLatLon+0x378>)
 8004dac:	4a69      	ldr	r2, [pc, #420]	@ (8004f54 <GetLatLon+0x384>)
 8004dae:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004db0:	c313      	stmia	r3!, {r0, r1, r4}
 8004db2:	6812      	ldr	r2, [r2, #0]
 8004db4:	601a      	str	r2, [r3, #0]
			  							  				      frameGot=1;
 8004db6:	4b65      	ldr	r3, [pc, #404]	@ (8004f4c <GetLatLon+0x37c>)
 8004db8:	2201      	movs	r2, #1
 8004dba:	701a      	strb	r2, [r3, #0]
			  							  				  for(int posCheckI=0;posCheckI<game.numLocations;posCheckI++)
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	61fb      	str	r3, [r7, #28]
 8004dc0:	e070      	b.n	8004ea4 <GetLatLon+0x2d4>
			  							  				  			  				      {

			  							  				  			  				    	  tempPos = game.positions[posCheckI];
 8004dc2:	1d3a      	adds	r2, r7, #4
 8004dc4:	4960      	ldr	r1, [pc, #384]	@ (8004f48 <GetLatLon+0x378>)
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	3303      	adds	r3, #3
 8004dca:	00db      	lsls	r3, r3, #3
 8004dcc:	18cb      	adds	r3, r1, r3
 8004dce:	cb03      	ldmia	r3!, {r0, r1}
 8004dd0:	c203      	stmia	r2!, {r0, r1}
			  							  				  			  				    	  if(tempPos.lat&&pos.lat){
 8004dd2:	1d3b      	adds	r3, r7, #4
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	2100      	movs	r1, #0
 8004dd8:	1c18      	adds	r0, r3, #0
 8004dda:	f7fb fb67 	bl	80004ac <__aeabi_fcmpeq>
 8004dde:	1e03      	subs	r3, r0, #0
 8004de0:	d000      	beq.n	8004de4 <GetLatLon+0x214>
			  							  				  			  				    	  checkW = abs(tempPos.lat-pos.lat);
			  							  				  			  				    	  checkH = abs(tempPos.lon-pos.lon);
			  							  				  			  				    	  if(sqrt((checkW*checkW)+(checkH*checkH))<gpsThreshold) return;
			  							  				  			  				    	  }
			  							  				  			  				    	  else return;
 8004de2:	e0a3      	b.n	8004f2c <GetLatLon+0x35c>
			  							  				  			  				    	  if(tempPos.lat&&pos.lat){
 8004de4:	230c      	movs	r3, #12
 8004de6:	18fb      	adds	r3, r7, r3
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	2100      	movs	r1, #0
 8004dec:	1c18      	adds	r0, r3, #0
 8004dee:	f7fb fb5d 	bl	80004ac <__aeabi_fcmpeq>
 8004df2:	1e03      	subs	r3, r0, #0
 8004df4:	d000      	beq.n	8004df8 <GetLatLon+0x228>
			  							  				  			  				    	  else return;
 8004df6:	e099      	b.n	8004f2c <GetLatLon+0x35c>
			  							  				  			  				    	  checkW = abs(tempPos.lat-pos.lat);
 8004df8:	1d3b      	adds	r3, r7, #4
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	240c      	movs	r4, #12
 8004dfe:	193b      	adds	r3, r7, r4
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	1c19      	adds	r1, r3, #0
 8004e04:	1c10      	adds	r0, r2, #0
 8004e06:	f7fc f931 	bl	800106c <__aeabi_fsub>
 8004e0a:	1c03      	adds	r3, r0, #0
 8004e0c:	1c18      	adds	r0, r3, #0
 8004e0e:	f7fc fad1 	bl	80013b4 <__aeabi_f2iz>
 8004e12:	0003      	movs	r3, r0
 8004e14:	17da      	asrs	r2, r3, #31
 8004e16:	189b      	adds	r3, r3, r2
 8004e18:	4053      	eors	r3, r2
 8004e1a:	0018      	movs	r0, r3
 8004e1c:	f7fc faea 	bl	80013f4 <__aeabi_i2f>
 8004e20:	1c03      	adds	r3, r0, #0
 8004e22:	61bb      	str	r3, [r7, #24]
			  							  				  			  				    	  checkH = abs(tempPos.lon-pos.lon);
 8004e24:	1d3b      	adds	r3, r7, #4
 8004e26:	685a      	ldr	r2, [r3, #4]
 8004e28:	193b      	adds	r3, r7, r4
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	1c19      	adds	r1, r3, #0
 8004e2e:	1c10      	adds	r0, r2, #0
 8004e30:	f7fc f91c 	bl	800106c <__aeabi_fsub>
 8004e34:	1c03      	adds	r3, r0, #0
 8004e36:	1c18      	adds	r0, r3, #0
 8004e38:	f7fc fabc 	bl	80013b4 <__aeabi_f2iz>
 8004e3c:	0003      	movs	r3, r0
 8004e3e:	17da      	asrs	r2, r3, #31
 8004e40:	189b      	adds	r3, r3, r2
 8004e42:	4053      	eors	r3, r2
 8004e44:	0018      	movs	r0, r3
 8004e46:	f7fc fad5 	bl	80013f4 <__aeabi_i2f>
 8004e4a:	1c03      	adds	r3, r0, #0
 8004e4c:	617b      	str	r3, [r7, #20]
			  							  				  			  				    	  if(sqrt((checkW*checkW)+(checkH*checkH))<gpsThreshold) return;
 8004e4e:	69b9      	ldr	r1, [r7, #24]
 8004e50:	69b8      	ldr	r0, [r7, #24]
 8004e52:	f7fb ffcd 	bl	8000df0 <__aeabi_fmul>
 8004e56:	1c03      	adds	r3, r0, #0
 8004e58:	1c1c      	adds	r4, r3, #0
 8004e5a:	6979      	ldr	r1, [r7, #20]
 8004e5c:	6978      	ldr	r0, [r7, #20]
 8004e5e:	f7fb ffc7 	bl	8000df0 <__aeabi_fmul>
 8004e62:	1c03      	adds	r3, r0, #0
 8004e64:	1c19      	adds	r1, r3, #0
 8004e66:	1c20      	adds	r0, r4, #0
 8004e68:	f7fb fc52 	bl	8000710 <__aeabi_fadd>
 8004e6c:	1c03      	adds	r3, r0, #0
 8004e6e:	1c18      	adds	r0, r3, #0
 8004e70:	f7fe f93a 	bl	80030e8 <__aeabi_f2d>
 8004e74:	0002      	movs	r2, r0
 8004e76:	000b      	movs	r3, r1
 8004e78:	0010      	movs	r0, r2
 8004e7a:	0019      	movs	r1, r3
 8004e7c:	f006 fbaa 	bl	800b5d4 <sqrt>
 8004e80:	0004      	movs	r4, r0
 8004e82:	000d      	movs	r5, r1
 8004e84:	4b32      	ldr	r3, [pc, #200]	@ (8004f50 <GetLatLon+0x380>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	1c18      	adds	r0, r3, #0
 8004e8a:	f7fe f92d 	bl	80030e8 <__aeabi_f2d>
 8004e8e:	0002      	movs	r2, r0
 8004e90:	000b      	movs	r3, r1
 8004e92:	0020      	movs	r0, r4
 8004e94:	0029      	movs	r1, r5
 8004e96:	f7fb fad5 	bl	8000444 <__aeabi_dcmplt>
 8004e9a:	1e03      	subs	r3, r0, #0
 8004e9c:	d145      	bne.n	8004f2a <GetLatLon+0x35a>
			  							  				  for(int posCheckI=0;posCheckI<game.numLocations;posCheckI++)
 8004e9e:	69fb      	ldr	r3, [r7, #28]
 8004ea0:	3301      	adds	r3, #1
 8004ea2:	61fb      	str	r3, [r7, #28]
 8004ea4:	4b28      	ldr	r3, [pc, #160]	@ (8004f48 <GetLatLon+0x378>)
 8004ea6:	695a      	ldr	r2, [r3, #20]
 8004ea8:	69fb      	ldr	r3, [r7, #28]
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d889      	bhi.n	8004dc2 <GetLatLon+0x1f2>
			  							  				  			  				      }
			  							  				      game.positions[game.numLocations] = pos;
 8004eae:	4b26      	ldr	r3, [pc, #152]	@ (8004f48 <GetLatLon+0x378>)
 8004eb0:	695b      	ldr	r3, [r3, #20]
 8004eb2:	4a25      	ldr	r2, [pc, #148]	@ (8004f48 <GetLatLon+0x378>)
 8004eb4:	3303      	adds	r3, #3
 8004eb6:	00db      	lsls	r3, r3, #3
 8004eb8:	210c      	movs	r1, #12
 8004eba:	1879      	adds	r1, r7, r1
 8004ebc:	18d3      	adds	r3, r2, r3
 8004ebe:	000a      	movs	r2, r1
 8004ec0:	ca03      	ldmia	r2!, {r0, r1}
 8004ec2:	c303      	stmia	r3!, {r0, r1}
															  game.numLocations++;
 8004ec4:	4b20      	ldr	r3, [pc, #128]	@ (8004f48 <GetLatLon+0x378>)
 8004ec6:	695b      	ldr	r3, [r3, #20]
 8004ec8:	1c5a      	adds	r2, r3, #1
 8004eca:	4b1f      	ldr	r3, [pc, #124]	@ (8004f48 <GetLatLon+0x378>)
 8004ecc:	615a      	str	r2, [r3, #20]
			  							  				      break;
 8004ece:	e02d      	b.n	8004f2c <GetLatLon+0x35c>
			  							  				  }

			  				for(ii=0;ii<=127;ii++) buffer[ii]=0;
 8004ed0:	4b18      	ldr	r3, [pc, #96]	@ (8004f34 <GetLatLon+0x364>)
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	801a      	strh	r2, [r3, #0]
 8004ed6:	e00d      	b.n	8004ef4 <GetLatLon+0x324>
 8004ed8:	4b16      	ldr	r3, [pc, #88]	@ (8004f34 <GetLatLon+0x364>)
 8004eda:	881b      	ldrh	r3, [r3, #0]
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	001a      	movs	r2, r3
 8004ee0:	4b15      	ldr	r3, [pc, #84]	@ (8004f38 <GetLatLon+0x368>)
 8004ee2:	2100      	movs	r1, #0
 8004ee4:	5499      	strb	r1, [r3, r2]
 8004ee6:	4b13      	ldr	r3, [pc, #76]	@ (8004f34 <GetLatLon+0x364>)
 8004ee8:	881b      	ldrh	r3, [r3, #0]
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	3301      	adds	r3, #1
 8004eee:	b29a      	uxth	r2, r3
 8004ef0:	4b10      	ldr	r3, [pc, #64]	@ (8004f34 <GetLatLon+0x364>)
 8004ef2:	801a      	strh	r2, [r3, #0]
 8004ef4:	4b0f      	ldr	r3, [pc, #60]	@ (8004f34 <GetLatLon+0x364>)
 8004ef6:	881b      	ldrh	r3, [r3, #0]
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	2b7f      	cmp	r3, #127	@ 0x7f
 8004efc:	d9ec      	bls.n	8004ed8 <GetLatLon+0x308>
			  				  }
			  			  gpsI++;
 8004efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f00:	3301      	adds	r3, #1
 8004f02:	627b      	str	r3, [r7, #36]	@ 0x24
	while(HAL_UART_Receive(&huart1, &(buffer[gpsI]), 1, 1000)==HAL_OK||1)
 8004f04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f06:	4b0c      	ldr	r3, [pc, #48]	@ (8004f38 <GetLatLon+0x368>)
 8004f08:	18d1      	adds	r1, r2, r3
 8004f0a:	23fa      	movs	r3, #250	@ 0xfa
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	4814      	ldr	r0, [pc, #80]	@ (8004f60 <GetLatLon+0x390>)
 8004f10:	2201      	movs	r2, #1
 8004f12:	f004 fea1 	bl	8009c58 <HAL_UART_Receive>
							if(buffer[gpsI]=='$')
 8004f16:	4a08      	ldr	r2, [pc, #32]	@ (8004f38 <GetLatLon+0x368>)
 8004f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f1a:	18d3      	adds	r3, r2, r3
 8004f1c:	781b      	ldrb	r3, [r3, #0]
 8004f1e:	2b24      	cmp	r3, #36	@ 0x24
 8004f20:	d000      	beq.n	8004f24 <GetLatLon+0x354>
 8004f22:	e677      	b.n	8004c14 <GetLatLon+0x44>
 8004f24:	e65a      	b.n	8004bdc <GetLatLon+0xc>
			  				    	  if(sqrt((checkW*checkW)+(checkH*checkH))<gpsThreshold) return;
 8004f26:	46c0      	nop			@ (mov r8, r8)
 8004f28:	e000      	b.n	8004f2c <GetLatLon+0x35c>
			  							  				  			  				    	  if(sqrt((checkW*checkW)+(checkH*checkH))<gpsThreshold) return;
 8004f2a:	46c0      	nop			@ (mov r8, r8)


			  		  	}


}
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	b00a      	add	sp, #40	@ 0x28
 8004f30:	bdb0      	pop	{r4, r5, r7, pc}
 8004f32:	46c0      	nop			@ (mov r8, r8)
 8004f34:	20001068 	.word	0x20001068
 8004f38:	20001108 	.word	0x20001108
 8004f3c:	20001070 	.word	0x20001070
 8004f40:	20001084 	.word	0x20001084
 8004f44:	2000108c 	.word	0x2000108c
 8004f48:	20000f18 	.word	0x20000f18
 8004f4c:	20001106 	.word	0x20001106
 8004f50:	200011b0 	.word	0x200011b0
 8004f54:	200010b8 	.word	0x200010b8
 8004f58:	200010c8 	.word	0x200010c8
 8004f5c:	200010d0 	.word	0x200010d0
 8004f60:	2000135c 	.word	0x2000135c

08004f64 <HAL_RTC_AlarmAEventCallback>:
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8004f64:	b590      	push	{r4, r7, lr}
 8004f66:	b091      	sub	sp, #68	@ 0x44
 8004f68:	af04      	add	r7, sp, #16
 8004f6a:	6078      	str	r0, [r7, #4]
  RTC_AlarmTypeDef sAlarm;
  HAL_RTC_GetAlarm(hrtc,&sAlarm,RTC_ALARM_A,FORMAT_BIN);
 8004f6c:	2380      	movs	r3, #128	@ 0x80
 8004f6e:	005a      	lsls	r2, r3, #1
 8004f70:	2408      	movs	r4, #8
 8004f72:	1939      	adds	r1, r7, r4
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	2300      	movs	r3, #0
 8004f78:	f003 f9c2 	bl	8008300 <HAL_RTC_GetAlarm>
  if(sAlarm.AlarmTime.Seconds>58) {
 8004f7c:	0022      	movs	r2, r4
 8004f7e:	18bb      	adds	r3, r7, r2
 8004f80:	789b      	ldrb	r3, [r3, #2]
 8004f82:	2b3a      	cmp	r3, #58	@ 0x3a
 8004f84:	d903      	bls.n	8004f8e <HAL_RTC_AlarmAEventCallback+0x2a>
    sAlarm.AlarmTime.Seconds=0;
 8004f86:	18bb      	adds	r3, r7, r2
 8004f88:	2200      	movs	r2, #0
 8004f8a:	709a      	strb	r2, [r3, #2]
 8004f8c:	e006      	b.n	8004f9c <HAL_RTC_AlarmAEventCallback+0x38>
  }else{
    sAlarm.AlarmTime.Seconds=sAlarm.AlarmTime.Seconds+1;
 8004f8e:	2108      	movs	r1, #8
 8004f90:	187b      	adds	r3, r7, r1
 8004f92:	789b      	ldrb	r3, [r3, #2]
 8004f94:	3301      	adds	r3, #1
 8004f96:	b2da      	uxtb	r2, r3
 8004f98:	187b      	adds	r3, r7, r1
 8004f9a:	709a      	strb	r2, [r3, #2]
  }
    while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){}
 8004f9c:	46c0      	nop			@ (mov r8, r8)
 8004f9e:	2308      	movs	r3, #8
 8004fa0:	18f9      	adds	r1, r7, r3
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	0018      	movs	r0, r3
 8004fa8:	f003 f86a 	bl	8008080 <HAL_RTC_SetAlarm_IT>
 8004fac:	1e03      	subs	r3, r0, #0
 8004fae:	d1f6      	bne.n	8004f9e <HAL_RTC_AlarmAEventCallback+0x3a>
  	  drawString(30, 30, "testTime", BLACK, GREEN, 1, 1);
 8004fb0:	4a07      	ldr	r2, [pc, #28]	@ (8004fd0 <HAL_RTC_AlarmAEventCallback+0x6c>)
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	9302      	str	r3, [sp, #8]
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	9301      	str	r3, [sp, #4]
 8004fba:	4b06      	ldr	r3, [pc, #24]	@ (8004fd4 <HAL_RTC_AlarmAEventCallback+0x70>)
 8004fbc:	9300      	str	r3, [sp, #0]
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	211e      	movs	r1, #30
 8004fc2:	201e      	movs	r0, #30
 8004fc4:	f7fe fa44 	bl	8003450 <drawString>
}
 8004fc8:	46c0      	nop			@ (mov r8, r8)
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	b00d      	add	sp, #52	@ 0x34
 8004fce:	bd90      	pop	{r4, r7, pc}
 8004fd0:	0800b96c 	.word	0x0800b96c
 8004fd4:	ffffe007 	.word	0xffffe007

08004fd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004fdc:	b672      	cpsid	i
}
 8004fde:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004fe0:	46c0      	nop			@ (mov r8, r8)
 8004fe2:	e7fd      	b.n	8004fe0 <Error_Handler+0x8>

08004fe4 <minmea_isfield>:
        return false;

    return true;
}

static inline bool minmea_isfield(char c) {
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b082      	sub	sp, #8
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	0002      	movs	r2, r0
 8004fec:	1dfb      	adds	r3, r7, #7
 8004fee:	701a      	strb	r2, [r3, #0]
    return isprint((unsigned char) c) && c != ',' && c != '*';
 8004ff0:	1dfb      	adds	r3, r7, #7
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	1c5a      	adds	r2, r3, #1
 8004ff6:	4b0d      	ldr	r3, [pc, #52]	@ (800502c <minmea_isfield+0x48>)
 8004ff8:	18d3      	adds	r3, r2, r3
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	001a      	movs	r2, r3
 8004ffe:	2397      	movs	r3, #151	@ 0x97
 8005000:	4013      	ands	r3, r2
 8005002:	d009      	beq.n	8005018 <minmea_isfield+0x34>
 8005004:	1dfb      	adds	r3, r7, #7
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	2b2c      	cmp	r3, #44	@ 0x2c
 800500a:	d005      	beq.n	8005018 <minmea_isfield+0x34>
 800500c:	1dfb      	adds	r3, r7, #7
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	2b2a      	cmp	r3, #42	@ 0x2a
 8005012:	d001      	beq.n	8005018 <minmea_isfield+0x34>
 8005014:	2301      	movs	r3, #1
 8005016:	e000      	b.n	800501a <minmea_isfield+0x36>
 8005018:	2300      	movs	r3, #0
 800501a:	1c1a      	adds	r2, r3, #0
 800501c:	2301      	movs	r3, #1
 800501e:	4013      	ands	r3, r2
 8005020:	b2db      	uxtb	r3, r3
}
 8005022:	0018      	movs	r0, r3
 8005024:	46bd      	mov	sp, r7
 8005026:	b002      	add	sp, #8
 8005028:	bd80      	pop	{r7, pc}
 800502a:	46c0      	nop			@ (mov r8, r8)
 800502c:	0800c1c4 	.word	0x0800c1c4

08005030 <minmea_scan>:

bool minmea_scan(const char *sentence, const char *format, ...)
{
 8005030:	b40e      	push	{r1, r2, r3}
 8005032:	b5b0      	push	{r4, r5, r7, lr}
 8005034:	b0a7      	sub	sp, #156	@ 0x9c
 8005036:	af00      	add	r7, sp, #0
 8005038:	6078      	str	r0, [r7, #4]
    bool result = false;
 800503a:	2397      	movs	r3, #151	@ 0x97
 800503c:	18fb      	adds	r3, r7, r3
 800503e:	2200      	movs	r2, #0
 8005040:	701a      	strb	r2, [r3, #0]
    bool optional = false;
 8005042:	2396      	movs	r3, #150	@ 0x96
 8005044:	18fb      	adds	r3, r7, r3
 8005046:	2200      	movs	r2, #0
 8005048:	701a      	strb	r2, [r3, #0]
    va_list ap;
    va_start(ap, format);
 800504a:	23a8      	movs	r3, #168	@ 0xa8
 800504c:	2208      	movs	r2, #8
 800504e:	189b      	adds	r3, r3, r2
 8005050:	19db      	adds	r3, r3, r7
 8005052:	62fb      	str	r3, [r7, #44]	@ 0x2c

    const char *field = sentence;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2290      	movs	r2, #144	@ 0x90
 8005058:	18ba      	adds	r2, r7, r2
 800505a:	6013      	str	r3, [r2, #0]
        } else { \
            field = NULL; \
        } \
    } while (0)

    while (*format) {
 800505c:	e345      	b.n	80056ea <minmea_scan+0x6ba>
        char type = *format++;
 800505e:	21a4      	movs	r1, #164	@ 0xa4
 8005060:	2008      	movs	r0, #8
 8005062:	180b      	adds	r3, r1, r0
 8005064:	19db      	adds	r3, r3, r7
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	1c5a      	adds	r2, r3, #1
 800506a:	1809      	adds	r1, r1, r0
 800506c:	19c9      	adds	r1, r1, r7
 800506e:	600a      	str	r2, [r1, #0]
 8005070:	2143      	movs	r1, #67	@ 0x43
 8005072:	187a      	adds	r2, r7, r1
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	7013      	strb	r3, [r2, #0]

        if (type == ';') {
 8005078:	187b      	adds	r3, r7, r1
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	2b3b      	cmp	r3, #59	@ 0x3b
 800507e:	d104      	bne.n	800508a <minmea_scan+0x5a>
            // All further fields are optional.
            optional = true;
 8005080:	2396      	movs	r3, #150	@ 0x96
 8005082:	18fb      	adds	r3, r7, r3
 8005084:	2201      	movs	r2, #1
 8005086:	701a      	strb	r2, [r3, #0]
            continue;
 8005088:	e32f      	b.n	80056ea <minmea_scan+0x6ba>
        }

        if (!field && !optional) {
 800508a:	2390      	movs	r3, #144	@ 0x90
 800508c:	18fb      	adds	r3, r7, r3
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d108      	bne.n	80050a6 <minmea_scan+0x76>
 8005094:	2396      	movs	r3, #150	@ 0x96
 8005096:	18fb      	adds	r3, r7, r3
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	2201      	movs	r2, #1
 800509c:	4053      	eors	r3, r2
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d000      	beq.n	80050a6 <minmea_scan+0x76>
 80050a4:	e32f      	b.n	8005706 <minmea_scan+0x6d6>
            // Field requested but we ran out if input. Bail out.
            goto parse_error;
        }

        switch (type) {
 80050a6:	2343      	movs	r3, #67	@ 0x43
 80050a8:	18fb      	adds	r3, r7, r3
 80050aa:	781b      	ldrb	r3, [r3, #0]
 80050ac:	3b44      	subs	r3, #68	@ 0x44
 80050ae:	2b30      	cmp	r3, #48	@ 0x30
 80050b0:	d900      	bls.n	80050b4 <minmea_scan+0x84>
 80050b2:	e32a      	b.n	800570a <minmea_scan+0x6da>
 80050b4:	009a      	lsls	r2, r3, #2
 80050b6:	4bbd      	ldr	r3, [pc, #756]	@ (80053ac <minmea_scan+0x37c>)
 80050b8:	18d3      	adds	r3, r2, r3
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	469f      	mov	pc, r3
            case 'c': { // Single character field (char).
                char value = '\0';
 80050be:	258f      	movs	r5, #143	@ 0x8f
 80050c0:	197b      	adds	r3, r7, r5
 80050c2:	2200      	movs	r2, #0
 80050c4:	701a      	strb	r2, [r3, #0]

                if (field && minmea_isfield(*field))
 80050c6:	2490      	movs	r4, #144	@ 0x90
 80050c8:	193b      	adds	r3, r7, r4
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d00c      	beq.n	80050ea <minmea_scan+0xba>
 80050d0:	193b      	adds	r3, r7, r4
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	0018      	movs	r0, r3
 80050d8:	f7ff ff84 	bl	8004fe4 <minmea_isfield>
 80050dc:	1e03      	subs	r3, r0, #0
 80050de:	d004      	beq.n	80050ea <minmea_scan+0xba>
                    value = *field;
 80050e0:	197b      	adds	r3, r7, r5
 80050e2:	193a      	adds	r2, r7, r4
 80050e4:	6812      	ldr	r2, [r2, #0]
 80050e6:	7812      	ldrb	r2, [r2, #0]
 80050e8:	701a      	strb	r2, [r3, #0]

                *va_arg(ap, char *) = value;
 80050ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050ec:	1d1a      	adds	r2, r3, #4
 80050ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	228f      	movs	r2, #143	@ 0x8f
 80050f4:	18ba      	adds	r2, r7, r2
 80050f6:	7812      	ldrb	r2, [r2, #0]
 80050f8:	701a      	strb	r2, [r3, #0]
            } break;
 80050fa:	e2db      	b.n	80056b4 <minmea_scan+0x684>

            case 'd': { // Single character direction field (int).
                int value = 0;
 80050fc:	2300      	movs	r3, #0
 80050fe:	2288      	movs	r2, #136	@ 0x88
 8005100:	18ba      	adds	r2, r7, r2
 8005102:	6013      	str	r3, [r2, #0]

                if (field && minmea_isfield(*field)) {
 8005104:	2490      	movs	r4, #144	@ 0x90
 8005106:	193b      	adds	r3, r7, r4
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d022      	beq.n	8005154 <minmea_scan+0x124>
 800510e:	193b      	adds	r3, r7, r4
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	0018      	movs	r0, r3
 8005116:	f7ff ff65 	bl	8004fe4 <minmea_isfield>
 800511a:	1e03      	subs	r3, r0, #0
 800511c:	d01a      	beq.n	8005154 <minmea_scan+0x124>
                    switch (*field) {
 800511e:	193b      	adds	r3, r7, r4
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	781b      	ldrb	r3, [r3, #0]
 8005124:	2b57      	cmp	r3, #87	@ 0x57
 8005126:	d00f      	beq.n	8005148 <minmea_scan+0x118>
 8005128:	dd00      	ble.n	800512c <minmea_scan+0xfc>
 800512a:	e2f0      	b.n	800570e <minmea_scan+0x6de>
 800512c:	2b53      	cmp	r3, #83	@ 0x53
 800512e:	d00b      	beq.n	8005148 <minmea_scan+0x118>
 8005130:	dd00      	ble.n	8005134 <minmea_scan+0x104>
 8005132:	e2ec      	b.n	800570e <minmea_scan+0x6de>
 8005134:	2b45      	cmp	r3, #69	@ 0x45
 8005136:	d002      	beq.n	800513e <minmea_scan+0x10e>
 8005138:	2b4e      	cmp	r3, #78	@ 0x4e
 800513a:	d000      	beq.n	800513e <minmea_scan+0x10e>
 800513c:	e2e7      	b.n	800570e <minmea_scan+0x6de>
                        case 'N':
                        case 'E':
                            value = 1;
 800513e:	2301      	movs	r3, #1
 8005140:	2288      	movs	r2, #136	@ 0x88
 8005142:	18ba      	adds	r2, r7, r2
 8005144:	6013      	str	r3, [r2, #0]
                            break;
 8005146:	e005      	b.n	8005154 <minmea_scan+0x124>
                        case 'S':
                        case 'W':
                            value = -1;
 8005148:	2301      	movs	r3, #1
 800514a:	425b      	negs	r3, r3
 800514c:	2288      	movs	r2, #136	@ 0x88
 800514e:	18ba      	adds	r2, r7, r2
 8005150:	6013      	str	r3, [r2, #0]
                            break;
 8005152:	46c0      	nop			@ (mov r8, r8)
                        default:
                            goto parse_error;
                    }
                }

                *va_arg(ap, int *) = value;
 8005154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005156:	1d1a      	adds	r2, r3, #4
 8005158:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2288      	movs	r2, #136	@ 0x88
 800515e:	18ba      	adds	r2, r7, r2
 8005160:	6812      	ldr	r2, [r2, #0]
 8005162:	601a      	str	r2, [r3, #0]
            } break;
 8005164:	e2a6      	b.n	80056b4 <minmea_scan+0x684>

            case 'f': { // Fractional value with scale (struct minmea_float).
                int sign = 0;
 8005166:	2300      	movs	r3, #0
 8005168:	2284      	movs	r2, #132	@ 0x84
 800516a:	18ba      	adds	r2, r7, r2
 800516c:	6013      	str	r3, [r2, #0]
                int_least32_t value = -1;
 800516e:	2301      	movs	r3, #1
 8005170:	425b      	negs	r3, r3
 8005172:	2280      	movs	r2, #128	@ 0x80
 8005174:	18ba      	adds	r2, r7, r2
 8005176:	6013      	str	r3, [r2, #0]
                int_least32_t scale = 0;
 8005178:	2300      	movs	r3, #0
 800517a:	67fb      	str	r3, [r7, #124]	@ 0x7c

                if (field) {
 800517c:	2390      	movs	r3, #144	@ 0x90
 800517e:	18fb      	adds	r3, r7, r3
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d100      	bne.n	8005188 <minmea_scan+0x158>
 8005186:	e088      	b.n	800529a <minmea_scan+0x26a>
                    while (minmea_isfield(*field)) {
 8005188:	e07d      	b.n	8005286 <minmea_scan+0x256>
                        if (*field == '+' && !sign && value == -1) {
 800518a:	2390      	movs	r3, #144	@ 0x90
 800518c:	18fb      	adds	r3, r7, r3
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	781b      	ldrb	r3, [r3, #0]
 8005192:	2b2b      	cmp	r3, #43	@ 0x2b
 8005194:	d10d      	bne.n	80051b2 <minmea_scan+0x182>
 8005196:	2284      	movs	r2, #132	@ 0x84
 8005198:	18bb      	adds	r3, r7, r2
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d108      	bne.n	80051b2 <minmea_scan+0x182>
 80051a0:	2380      	movs	r3, #128	@ 0x80
 80051a2:	18fb      	adds	r3, r7, r3
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	3301      	adds	r3, #1
 80051a8:	d103      	bne.n	80051b2 <minmea_scan+0x182>
                            sign = 1;
 80051aa:	2301      	movs	r3, #1
 80051ac:	18ba      	adds	r2, r7, r2
 80051ae:	6013      	str	r3, [r2, #0]
 80051b0:	e063      	b.n	800527a <minmea_scan+0x24a>
                        } else if (*field == '-' && !sign && value == -1) {
 80051b2:	2390      	movs	r3, #144	@ 0x90
 80051b4:	18fb      	adds	r3, r7, r3
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	781b      	ldrb	r3, [r3, #0]
 80051ba:	2b2d      	cmp	r3, #45	@ 0x2d
 80051bc:	d10e      	bne.n	80051dc <minmea_scan+0x1ac>
 80051be:	2284      	movs	r2, #132	@ 0x84
 80051c0:	18bb      	adds	r3, r7, r2
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d109      	bne.n	80051dc <minmea_scan+0x1ac>
 80051c8:	2380      	movs	r3, #128	@ 0x80
 80051ca:	18fb      	adds	r3, r7, r3
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	3301      	adds	r3, #1
 80051d0:	d104      	bne.n	80051dc <minmea_scan+0x1ac>
                            sign = -1;
 80051d2:	2301      	movs	r3, #1
 80051d4:	425b      	negs	r3, r3
 80051d6:	18ba      	adds	r2, r7, r2
 80051d8:	6013      	str	r3, [r2, #0]
 80051da:	e04e      	b.n	800527a <minmea_scan+0x24a>
                        } else if (isdigit((unsigned char) *field)) {
 80051dc:	2190      	movs	r1, #144	@ 0x90
 80051de:	187b      	adds	r3, r7, r1
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	781b      	ldrb	r3, [r3, #0]
 80051e4:	1c5a      	adds	r2, r3, #1
 80051e6:	4b72      	ldr	r3, [pc, #456]	@ (80053b0 <minmea_scan+0x380>)
 80051e8:	18d3      	adds	r3, r2, r3
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	001a      	movs	r2, r3
 80051ee:	2304      	movs	r3, #4
 80051f0:	4013      	ands	r3, r2
 80051f2:	d035      	beq.n	8005260 <minmea_scan+0x230>
                            int digit = *field - '0';
 80051f4:	187b      	adds	r3, r7, r1
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	781b      	ldrb	r3, [r3, #0]
 80051fa:	3b30      	subs	r3, #48	@ 0x30
 80051fc:	63bb      	str	r3, [r7, #56]	@ 0x38
                            if (value == -1)
 80051fe:	2280      	movs	r2, #128	@ 0x80
 8005200:	18bb      	adds	r3, r7, r2
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	3301      	adds	r3, #1
 8005206:	d102      	bne.n	800520e <minmea_scan+0x1de>
                                value = 0;
 8005208:	2300      	movs	r3, #0
 800520a:	18ba      	adds	r2, r7, r2
 800520c:	6013      	str	r3, [r2, #0]
                            if (value > (INT_LEAST32_MAX-digit) / 10) {
 800520e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005210:	4a68      	ldr	r2, [pc, #416]	@ (80053b4 <minmea_scan+0x384>)
 8005212:	1ad3      	subs	r3, r2, r3
 8005214:	210a      	movs	r1, #10
 8005216:	0018      	movs	r0, r3
 8005218:	f7fb f812 	bl	8000240 <__divsi3>
 800521c:	0003      	movs	r3, r0
 800521e:	001a      	movs	r2, r3
 8005220:	2380      	movs	r3, #128	@ 0x80
 8005222:	18fb      	adds	r3, r7, r3
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4293      	cmp	r3, r2
 8005228:	dd04      	ble.n	8005234 <minmea_scan+0x204>
                                /* we ran out of bits, what do we do? */
                                if (scale) {
 800522a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800522c:	2b00      	cmp	r3, #0
 800522e:	d100      	bne.n	8005232 <minmea_scan+0x202>
 8005230:	e26f      	b.n	8005712 <minmea_scan+0x6e2>
                                    /* truncate extra precision */
                                    break;
 8005232:	e032      	b.n	800529a <minmea_scan+0x26a>
                                } else {
                                    /* integer overflow. bail out. */
                                    goto parse_error;
                                }
                            }
                            value = (10 * value) + digit;
 8005234:	2180      	movs	r1, #128	@ 0x80
 8005236:	187b      	adds	r3, r7, r1
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	0013      	movs	r3, r2
 800523c:	009b      	lsls	r3, r3, #2
 800523e:	189b      	adds	r3, r3, r2
 8005240:	005b      	lsls	r3, r3, #1
 8005242:	001a      	movs	r2, r3
 8005244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005246:	189b      	adds	r3, r3, r2
 8005248:	187a      	adds	r2, r7, r1
 800524a:	6013      	str	r3, [r2, #0]
                            if (scale)
 800524c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800524e:	2b00      	cmp	r3, #0
 8005250:	d013      	beq.n	800527a <minmea_scan+0x24a>
                                scale *= 10;
 8005252:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005254:	0013      	movs	r3, r2
 8005256:	009b      	lsls	r3, r3, #2
 8005258:	189b      	adds	r3, r3, r2
 800525a:	005b      	lsls	r3, r3, #1
 800525c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800525e:	e00c      	b.n	800527a <minmea_scan+0x24a>
                        } else if (*field == '.' && scale == 0) {
 8005260:	2390      	movs	r3, #144	@ 0x90
 8005262:	18fb      	adds	r3, r7, r3
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	2b2e      	cmp	r3, #46	@ 0x2e
 800526a:	d000      	beq.n	800526e <minmea_scan+0x23e>
 800526c:	e253      	b.n	8005716 <minmea_scan+0x6e6>
 800526e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005270:	2b00      	cmp	r3, #0
 8005272:	d000      	beq.n	8005276 <minmea_scan+0x246>
 8005274:	e24f      	b.n	8005716 <minmea_scan+0x6e6>
                            scale = 1;
 8005276:	2301      	movs	r3, #1
 8005278:	67fb      	str	r3, [r7, #124]	@ 0x7c
                        } else {
                            goto parse_error;
                        }
                        field++;
 800527a:	2290      	movs	r2, #144	@ 0x90
 800527c:	18bb      	adds	r3, r7, r2
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	3301      	adds	r3, #1
 8005282:	18ba      	adds	r2, r7, r2
 8005284:	6013      	str	r3, [r2, #0]
                    while (minmea_isfield(*field)) {
 8005286:	2390      	movs	r3, #144	@ 0x90
 8005288:	18fb      	adds	r3, r7, r3
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	781b      	ldrb	r3, [r3, #0]
 800528e:	0018      	movs	r0, r3
 8005290:	f7ff fea8 	bl	8004fe4 <minmea_isfield>
 8005294:	1e03      	subs	r3, r0, #0
 8005296:	d000      	beq.n	800529a <minmea_scan+0x26a>
 8005298:	e777      	b.n	800518a <minmea_scan+0x15a>
                    }
                }

                if ((sign || scale) && value == -1)
 800529a:	2384      	movs	r3, #132	@ 0x84
 800529c:	18fb      	adds	r3, r7, r3
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d102      	bne.n	80052aa <minmea_scan+0x27a>
 80052a4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d005      	beq.n	80052b6 <minmea_scan+0x286>
 80052aa:	2380      	movs	r3, #128	@ 0x80
 80052ac:	18fb      	adds	r3, r7, r3
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	3301      	adds	r3, #1
 80052b2:	d100      	bne.n	80052b6 <minmea_scan+0x286>
 80052b4:	e231      	b.n	800571a <minmea_scan+0x6ea>
                    goto parse_error;

                if (value == -1) {
 80052b6:	2280      	movs	r2, #128	@ 0x80
 80052b8:	18bb      	adds	r3, r7, r2
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	3301      	adds	r3, #1
 80052be:	d105      	bne.n	80052cc <minmea_scan+0x29c>
                    /* No digits were scanned. */
                    value = 0;
 80052c0:	2300      	movs	r3, #0
 80052c2:	18ba      	adds	r2, r7, r2
 80052c4:	6013      	str	r3, [r2, #0]
                    scale = 0;
 80052c6:	2300      	movs	r3, #0
 80052c8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80052ca:	e004      	b.n	80052d6 <minmea_scan+0x2a6>
                } else if (scale == 0) {
 80052cc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d101      	bne.n	80052d6 <minmea_scan+0x2a6>
                    /* No decimal point. */
                    scale = 1;
 80052d2:	2301      	movs	r3, #1
 80052d4:	67fb      	str	r3, [r7, #124]	@ 0x7c
                }
                if (sign)
 80052d6:	2284      	movs	r2, #132	@ 0x84
 80052d8:	18bb      	adds	r3, r7, r2
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d007      	beq.n	80052f0 <minmea_scan+0x2c0>
                    value *= sign;
 80052e0:	2180      	movs	r1, #128	@ 0x80
 80052e2:	187b      	adds	r3, r7, r1
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	18ba      	adds	r2, r7, r2
 80052e8:	6812      	ldr	r2, [r2, #0]
 80052ea:	4353      	muls	r3, r2
 80052ec:	187a      	adds	r2, r7, r1
 80052ee:	6013      	str	r3, [r2, #0]

                *va_arg(ap, struct minmea_float *) = (struct minmea_float) {value, scale};
 80052f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052f2:	1d1a      	adds	r2, r3, #4
 80052f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2280      	movs	r2, #128	@ 0x80
 80052fa:	18ba      	adds	r2, r7, r2
 80052fc:	6812      	ldr	r2, [r2, #0]
 80052fe:	601a      	str	r2, [r3, #0]
 8005300:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005302:	605a      	str	r2, [r3, #4]
            } break;
 8005304:	e1d6      	b.n	80056b4 <minmea_scan+0x684>

            case 'i': { // Integer value, default 0 (int).
                int value = 0;
 8005306:	2300      	movs	r3, #0
 8005308:	67bb      	str	r3, [r7, #120]	@ 0x78

                if (field) {
 800530a:	2290      	movs	r2, #144	@ 0x90
 800530c:	18bb      	adds	r3, r7, r2
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d011      	beq.n	8005338 <minmea_scan+0x308>
                    char *endptr;
                    value = strtol(field, &endptr, 10);
 8005314:	2320      	movs	r3, #32
 8005316:	18f9      	adds	r1, r7, r3
 8005318:	18bb      	adds	r3, r7, r2
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	220a      	movs	r2, #10
 800531e:	0018      	movs	r0, r3
 8005320:	f005 fcae 	bl	800ac80 <strtol>
 8005324:	0003      	movs	r3, r0
 8005326:	67bb      	str	r3, [r7, #120]	@ 0x78
                    if (minmea_isfield(*endptr))
 8005328:	6a3b      	ldr	r3, [r7, #32]
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	0018      	movs	r0, r3
 800532e:	f7ff fe59 	bl	8004fe4 <minmea_isfield>
 8005332:	1e03      	subs	r3, r0, #0
 8005334:	d000      	beq.n	8005338 <minmea_scan+0x308>
 8005336:	e1f2      	b.n	800571e <minmea_scan+0x6ee>
                        goto parse_error;
                }

                *va_arg(ap, int *) = value;
 8005338:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800533a:	1d1a      	adds	r2, r3, #4
 800533c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8005342:	601a      	str	r2, [r3, #0]
            } break;
 8005344:	e1b6      	b.n	80056b4 <minmea_scan+0x684>

            case 's': { // String value (char *).
                char *buf = va_arg(ap, char *);
 8005346:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005348:	1d1a      	adds	r2, r3, #4
 800534a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	677b      	str	r3, [r7, #116]	@ 0x74

                if (field) {
 8005350:	2390      	movs	r3, #144	@ 0x90
 8005352:	18fb      	adds	r3, r7, r3
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d014      	beq.n	8005384 <minmea_scan+0x354>
                    while (minmea_isfield(*field))
 800535a:	e00a      	b.n	8005372 <minmea_scan+0x342>
                        *buf++ = *field++;
 800535c:	2190      	movs	r1, #144	@ 0x90
 800535e:	187b      	adds	r3, r7, r1
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	1c53      	adds	r3, r2, #1
 8005364:	1879      	adds	r1, r7, r1
 8005366:	600b      	str	r3, [r1, #0]
 8005368:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800536a:	1c59      	adds	r1, r3, #1
 800536c:	6779      	str	r1, [r7, #116]	@ 0x74
 800536e:	7812      	ldrb	r2, [r2, #0]
 8005370:	701a      	strb	r2, [r3, #0]
                    while (minmea_isfield(*field))
 8005372:	2390      	movs	r3, #144	@ 0x90
 8005374:	18fb      	adds	r3, r7, r3
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	781b      	ldrb	r3, [r3, #0]
 800537a:	0018      	movs	r0, r3
 800537c:	f7ff fe32 	bl	8004fe4 <minmea_isfield>
 8005380:	1e03      	subs	r3, r0, #0
 8005382:	d1eb      	bne.n	800535c <minmea_scan+0x32c>
                }

                *buf = '\0';
 8005384:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005386:	2200      	movs	r2, #0
 8005388:	701a      	strb	r2, [r3, #0]
            } break;
 800538a:	e193      	b.n	80056b4 <minmea_scan+0x684>

            case 't': { // NMEA talker+sentence identifier (char *).
                // This field is always mandatory.
                if (!field)
 800538c:	2290      	movs	r2, #144	@ 0x90
 800538e:	18bb      	adds	r3, r7, r2
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d100      	bne.n	8005398 <minmea_scan+0x368>
 8005396:	e1c4      	b.n	8005722 <minmea_scan+0x6f2>
                    goto parse_error;

                if (field[0] != '$')
 8005398:	18bb      	adds	r3, r7, r2
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	781b      	ldrb	r3, [r3, #0]
 800539e:	2b24      	cmp	r3, #36	@ 0x24
 80053a0:	d000      	beq.n	80053a4 <minmea_scan+0x374>
 80053a2:	e1c0      	b.n	8005726 <minmea_scan+0x6f6>
                    goto parse_error;
                for (int i=0; i<5; i++)
 80053a4:	2300      	movs	r3, #0
 80053a6:	673b      	str	r3, [r7, #112]	@ 0x70
 80053a8:	e01c      	b.n	80053e4 <minmea_scan+0x3b4>
 80053aa:	46c0      	nop			@ (mov r8, r8)
 80053ac:	0800c024 	.word	0x0800c024
 80053b0:	0800c1c4 	.word	0x0800c1c4
 80053b4:	7fffffff 	.word	0x7fffffff
                    if (!minmea_isfield(field[1+i]))
 80053b8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80053ba:	3301      	adds	r3, #1
 80053bc:	001a      	movs	r2, r3
 80053be:	2390      	movs	r3, #144	@ 0x90
 80053c0:	18fb      	adds	r3, r7, r3
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	189b      	adds	r3, r3, r2
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	0018      	movs	r0, r3
 80053ca:	f7ff fe0b 	bl	8004fe4 <minmea_isfield>
 80053ce:	0003      	movs	r3, r0
 80053d0:	001a      	movs	r2, r3
 80053d2:	2301      	movs	r3, #1
 80053d4:	4053      	eors	r3, r2
 80053d6:	b2db      	uxtb	r3, r3
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d000      	beq.n	80053de <minmea_scan+0x3ae>
 80053dc:	e1a5      	b.n	800572a <minmea_scan+0x6fa>
                for (int i=0; i<5; i++)
 80053de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80053e0:	3301      	adds	r3, #1
 80053e2:	673b      	str	r3, [r7, #112]	@ 0x70
 80053e4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80053e6:	2b04      	cmp	r3, #4
 80053e8:	dde6      	ble.n	80053b8 <minmea_scan+0x388>
                        goto parse_error;

                char *buf = va_arg(ap, char *);
 80053ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053ec:	1d1a      	adds	r2, r3, #4
 80053ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
                memcpy(buf, field+1, 5);
 80053f4:	2390      	movs	r3, #144	@ 0x90
 80053f6:	18fb      	adds	r3, r7, r3
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	1c59      	adds	r1, r3, #1
 80053fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053fe:	2205      	movs	r2, #5
 8005400:	0018      	movs	r0, r3
 8005402:	f005 fc9d 	bl	800ad40 <memcpy>
                buf[5] = '\0';
 8005406:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005408:	3305      	adds	r3, #5
 800540a:	2200      	movs	r2, #0
 800540c:	701a      	strb	r2, [r3, #0]
            } break;
 800540e:	e151      	b.n	80056b4 <minmea_scan+0x684>

            case 'D': { // Date (int, int, int), -1 if empty.
                struct minmea_date *date = va_arg(ap, struct minmea_date *);
 8005410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005412:	1d1a      	adds	r2, r3, #4
 8005414:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	633b      	str	r3, [r7, #48]	@ 0x30

                int d = -1, m = -1, y = -1;
 800541a:	2301      	movs	r3, #1
 800541c:	425b      	negs	r3, r3
 800541e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005420:	2301      	movs	r3, #1
 8005422:	425b      	negs	r3, r3
 8005424:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005426:	2301      	movs	r3, #1
 8005428:	425b      	negs	r3, r3
 800542a:	667b      	str	r3, [r7, #100]	@ 0x64

                if (field && minmea_isfield(*field)) {
 800542c:	2290      	movs	r2, #144	@ 0x90
 800542e:	18bb      	adds	r3, r7, r2
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d067      	beq.n	8005506 <minmea_scan+0x4d6>
 8005436:	18bb      	adds	r3, r7, r2
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	781b      	ldrb	r3, [r3, #0]
 800543c:	0018      	movs	r0, r3
 800543e:	f7ff fdd1 	bl	8004fe4 <minmea_isfield>
 8005442:	1e03      	subs	r3, r0, #0
 8005444:	d05f      	beq.n	8005506 <minmea_scan+0x4d6>
                    // Always six digits.
                    for (int i=0; i<6; i++)
 8005446:	2300      	movs	r3, #0
 8005448:	663b      	str	r3, [r7, #96]	@ 0x60
 800544a:	e011      	b.n	8005470 <minmea_scan+0x440>
                        if (!isdigit((unsigned char) field[i]))
 800544c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800544e:	2290      	movs	r2, #144	@ 0x90
 8005450:	18ba      	adds	r2, r7, r2
 8005452:	6812      	ldr	r2, [r2, #0]
 8005454:	18d3      	adds	r3, r2, r3
 8005456:	781b      	ldrb	r3, [r3, #0]
 8005458:	1c5a      	adds	r2, r3, #1
 800545a:	4bbb      	ldr	r3, [pc, #748]	@ (8005748 <minmea_scan+0x718>)
 800545c:	18d3      	adds	r3, r2, r3
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	001a      	movs	r2, r3
 8005462:	2304      	movs	r3, #4
 8005464:	4013      	ands	r3, r2
 8005466:	d100      	bne.n	800546a <minmea_scan+0x43a>
 8005468:	e161      	b.n	800572e <minmea_scan+0x6fe>
                    for (int i=0; i<6; i++)
 800546a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800546c:	3301      	adds	r3, #1
 800546e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005470:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005472:	2b05      	cmp	r3, #5
 8005474:	ddea      	ble.n	800544c <minmea_scan+0x41c>
                            goto parse_error;

                    d = strtol((char[]) {field[0], field[1], '\0'}, NULL, 10);
 8005476:	2490      	movs	r4, #144	@ 0x90
 8005478:	193b      	adds	r3, r7, r4
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	781a      	ldrb	r2, [r3, #0]
 800547e:	211c      	movs	r1, #28
 8005480:	187b      	adds	r3, r7, r1
 8005482:	701a      	strb	r2, [r3, #0]
 8005484:	193b      	adds	r3, r7, r4
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	3301      	adds	r3, #1
 800548a:	781a      	ldrb	r2, [r3, #0]
 800548c:	187b      	adds	r3, r7, r1
 800548e:	705a      	strb	r2, [r3, #1]
 8005490:	187b      	adds	r3, r7, r1
 8005492:	2200      	movs	r2, #0
 8005494:	709a      	strb	r2, [r3, #2]
 8005496:	187b      	adds	r3, r7, r1
 8005498:	220a      	movs	r2, #10
 800549a:	2100      	movs	r1, #0
 800549c:	0018      	movs	r0, r3
 800549e:	f005 fbef 	bl	800ac80 <strtol>
 80054a2:	0003      	movs	r3, r0
 80054a4:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    m = strtol((char[]) {field[2], field[3], '\0'}, NULL, 10);
 80054a6:	193b      	adds	r3, r7, r4
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	3302      	adds	r3, #2
 80054ac:	781a      	ldrb	r2, [r3, #0]
 80054ae:	2118      	movs	r1, #24
 80054b0:	187b      	adds	r3, r7, r1
 80054b2:	701a      	strb	r2, [r3, #0]
 80054b4:	193b      	adds	r3, r7, r4
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	3303      	adds	r3, #3
 80054ba:	781a      	ldrb	r2, [r3, #0]
 80054bc:	187b      	adds	r3, r7, r1
 80054be:	705a      	strb	r2, [r3, #1]
 80054c0:	187b      	adds	r3, r7, r1
 80054c2:	2200      	movs	r2, #0
 80054c4:	709a      	strb	r2, [r3, #2]
 80054c6:	187b      	adds	r3, r7, r1
 80054c8:	220a      	movs	r2, #10
 80054ca:	2100      	movs	r1, #0
 80054cc:	0018      	movs	r0, r3
 80054ce:	f005 fbd7 	bl	800ac80 <strtol>
 80054d2:	0003      	movs	r3, r0
 80054d4:	66bb      	str	r3, [r7, #104]	@ 0x68
                    y = strtol((char[]) {field[4], field[5], '\0'}, NULL, 10);
 80054d6:	193b      	adds	r3, r7, r4
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	3304      	adds	r3, #4
 80054dc:	781a      	ldrb	r2, [r3, #0]
 80054de:	2114      	movs	r1, #20
 80054e0:	187b      	adds	r3, r7, r1
 80054e2:	701a      	strb	r2, [r3, #0]
 80054e4:	193b      	adds	r3, r7, r4
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	3305      	adds	r3, #5
 80054ea:	781a      	ldrb	r2, [r3, #0]
 80054ec:	187b      	adds	r3, r7, r1
 80054ee:	705a      	strb	r2, [r3, #1]
 80054f0:	187b      	adds	r3, r7, r1
 80054f2:	2200      	movs	r2, #0
 80054f4:	709a      	strb	r2, [r3, #2]
 80054f6:	187b      	adds	r3, r7, r1
 80054f8:	220a      	movs	r2, #10
 80054fa:	2100      	movs	r1, #0
 80054fc:	0018      	movs	r0, r3
 80054fe:	f005 fbbf 	bl	800ac80 <strtol>
 8005502:	0003      	movs	r3, r0
 8005504:	667b      	str	r3, [r7, #100]	@ 0x64
                }

                date->day = d;
 8005506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005508:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800550a:	601a      	str	r2, [r3, #0]
                date->month = m;
 800550c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800550e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005510:	605a      	str	r2, [r3, #4]
                date->year = y;
 8005512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005514:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005516:	609a      	str	r2, [r3, #8]
            } break;
 8005518:	e0cc      	b.n	80056b4 <minmea_scan+0x684>

            case 'T': { // Time (int, int, int, int), -1 if empty.
                struct minmea_time *time = va_arg(ap, struct minmea_time *);
 800551a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800551c:	1d1a      	adds	r2, r3, #4
 800551e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	637b      	str	r3, [r7, #52]	@ 0x34

                int h = -1, i = -1, s = -1, u = -1;
 8005524:	2301      	movs	r3, #1
 8005526:	425b      	negs	r3, r3
 8005528:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800552a:	2301      	movs	r3, #1
 800552c:	425b      	negs	r3, r3
 800552e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005530:	2301      	movs	r3, #1
 8005532:	425b      	negs	r3, r3
 8005534:	657b      	str	r3, [r7, #84]	@ 0x54
 8005536:	2301      	movs	r3, #1
 8005538:	425b      	negs	r3, r3
 800553a:	653b      	str	r3, [r7, #80]	@ 0x50

                if (field && minmea_isfield(*field)) {
 800553c:	2290      	movs	r2, #144	@ 0x90
 800553e:	18bb      	adds	r3, r7, r2
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d100      	bne.n	8005548 <minmea_scan+0x518>
 8005546:	e0a7      	b.n	8005698 <minmea_scan+0x668>
 8005548:	18bb      	adds	r3, r7, r2
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	781b      	ldrb	r3, [r3, #0]
 800554e:	0018      	movs	r0, r3
 8005550:	f7ff fd48 	bl	8004fe4 <minmea_isfield>
 8005554:	1e03      	subs	r3, r0, #0
 8005556:	d100      	bne.n	800555a <minmea_scan+0x52a>
 8005558:	e09e      	b.n	8005698 <minmea_scan+0x668>
                    // Minimum required: integer time.
                    for (int i=0; i<6; i++)
 800555a:	2300      	movs	r3, #0
 800555c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800555e:	e011      	b.n	8005584 <minmea_scan+0x554>
                        if (!isdigit((unsigned char) field[i]))
 8005560:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005562:	2290      	movs	r2, #144	@ 0x90
 8005564:	18ba      	adds	r2, r7, r2
 8005566:	6812      	ldr	r2, [r2, #0]
 8005568:	18d3      	adds	r3, r2, r3
 800556a:	781b      	ldrb	r3, [r3, #0]
 800556c:	1c5a      	adds	r2, r3, #1
 800556e:	4b76      	ldr	r3, [pc, #472]	@ (8005748 <minmea_scan+0x718>)
 8005570:	18d3      	adds	r3, r2, r3
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	001a      	movs	r2, r3
 8005576:	2304      	movs	r3, #4
 8005578:	4013      	ands	r3, r2
 800557a:	d100      	bne.n	800557e <minmea_scan+0x54e>
 800557c:	e0d9      	b.n	8005732 <minmea_scan+0x702>
                    for (int i=0; i<6; i++)
 800557e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005580:	3301      	adds	r3, #1
 8005582:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005584:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005586:	2b05      	cmp	r3, #5
 8005588:	ddea      	ble.n	8005560 <minmea_scan+0x530>
                            goto parse_error;

                    h = strtol((char[]) {field[0], field[1], '\0'}, NULL, 10);
 800558a:	2490      	movs	r4, #144	@ 0x90
 800558c:	193b      	adds	r3, r7, r4
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	781a      	ldrb	r2, [r3, #0]
 8005592:	2110      	movs	r1, #16
 8005594:	187b      	adds	r3, r7, r1
 8005596:	701a      	strb	r2, [r3, #0]
 8005598:	193b      	adds	r3, r7, r4
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	3301      	adds	r3, #1
 800559e:	781a      	ldrb	r2, [r3, #0]
 80055a0:	187b      	adds	r3, r7, r1
 80055a2:	705a      	strb	r2, [r3, #1]
 80055a4:	187b      	adds	r3, r7, r1
 80055a6:	2200      	movs	r2, #0
 80055a8:	709a      	strb	r2, [r3, #2]
 80055aa:	187b      	adds	r3, r7, r1
 80055ac:	220a      	movs	r2, #10
 80055ae:	2100      	movs	r1, #0
 80055b0:	0018      	movs	r0, r3
 80055b2:	f005 fb65 	bl	800ac80 <strtol>
 80055b6:	0003      	movs	r3, r0
 80055b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
                    i = strtol((char[]) {field[2], field[3], '\0'}, NULL, 10);
 80055ba:	193b      	adds	r3, r7, r4
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	3302      	adds	r3, #2
 80055c0:	781a      	ldrb	r2, [r3, #0]
 80055c2:	210c      	movs	r1, #12
 80055c4:	187b      	adds	r3, r7, r1
 80055c6:	701a      	strb	r2, [r3, #0]
 80055c8:	193b      	adds	r3, r7, r4
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	3303      	adds	r3, #3
 80055ce:	781a      	ldrb	r2, [r3, #0]
 80055d0:	187b      	adds	r3, r7, r1
 80055d2:	705a      	strb	r2, [r3, #1]
 80055d4:	187b      	adds	r3, r7, r1
 80055d6:	2200      	movs	r2, #0
 80055d8:	709a      	strb	r2, [r3, #2]
 80055da:	187b      	adds	r3, r7, r1
 80055dc:	220a      	movs	r2, #10
 80055de:	2100      	movs	r1, #0
 80055e0:	0018      	movs	r0, r3
 80055e2:	f005 fb4d 	bl	800ac80 <strtol>
 80055e6:	0003      	movs	r3, r0
 80055e8:	65bb      	str	r3, [r7, #88]	@ 0x58
                    s = strtol((char[]) {field[4], field[5], '\0'}, NULL, 10);
 80055ea:	193b      	adds	r3, r7, r4
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	3304      	adds	r3, #4
 80055f0:	781a      	ldrb	r2, [r3, #0]
 80055f2:	2108      	movs	r1, #8
 80055f4:	187b      	adds	r3, r7, r1
 80055f6:	701a      	strb	r2, [r3, #0]
 80055f8:	193b      	adds	r3, r7, r4
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	3305      	adds	r3, #5
 80055fe:	781a      	ldrb	r2, [r3, #0]
 8005600:	187b      	adds	r3, r7, r1
 8005602:	705a      	strb	r2, [r3, #1]
 8005604:	187b      	adds	r3, r7, r1
 8005606:	2200      	movs	r2, #0
 8005608:	709a      	strb	r2, [r3, #2]
 800560a:	187b      	adds	r3, r7, r1
 800560c:	220a      	movs	r2, #10
 800560e:	2100      	movs	r1, #0
 8005610:	0018      	movs	r0, r3
 8005612:	f005 fb35 	bl	800ac80 <strtol>
 8005616:	0003      	movs	r3, r0
 8005618:	657b      	str	r3, [r7, #84]	@ 0x54
                    field += 6;
 800561a:	193b      	adds	r3, r7, r4
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	3306      	adds	r3, #6
 8005620:	193a      	adds	r2, r7, r4
 8005622:	6013      	str	r3, [r2, #0]

                    // Extra: fractional time. Saved as microseconds.
                    if (*field++ == '.') {
 8005624:	193b      	adds	r3, r7, r4
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	1c5a      	adds	r2, r3, #1
 800562a:	1939      	adds	r1, r7, r4
 800562c:	600a      	str	r2, [r1, #0]
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	2b2e      	cmp	r3, #46	@ 0x2e
 8005632:	d12f      	bne.n	8005694 <minmea_scan+0x664>
                        int value = 0;
 8005634:	2300      	movs	r3, #0
 8005636:	64bb      	str	r3, [r7, #72]	@ 0x48
                        int scale = 1000000;
 8005638:	4b44      	ldr	r3, [pc, #272]	@ (800574c <minmea_scan+0x71c>)
 800563a:	647b      	str	r3, [r7, #68]	@ 0x44
                        while (isdigit((unsigned char) *field) && scale > 1) {
 800563c:	e016      	b.n	800566c <minmea_scan+0x63c>
                            value = (value * 10) + (*field++ - '0');
 800563e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005640:	0013      	movs	r3, r2
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	189b      	adds	r3, r3, r2
 8005646:	005b      	lsls	r3, r3, #1
 8005648:	0019      	movs	r1, r3
 800564a:	2090      	movs	r0, #144	@ 0x90
 800564c:	183b      	adds	r3, r7, r0
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	1c5a      	adds	r2, r3, #1
 8005652:	1838      	adds	r0, r7, r0
 8005654:	6002      	str	r2, [r0, #0]
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	3b30      	subs	r3, #48	@ 0x30
 800565a:	18cb      	adds	r3, r1, r3
 800565c:	64bb      	str	r3, [r7, #72]	@ 0x48
                            scale /= 10;
 800565e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005660:	210a      	movs	r1, #10
 8005662:	0018      	movs	r0, r3
 8005664:	f7fa fdec 	bl	8000240 <__divsi3>
 8005668:	0003      	movs	r3, r0
 800566a:	647b      	str	r3, [r7, #68]	@ 0x44
                        while (isdigit((unsigned char) *field) && scale > 1) {
 800566c:	2390      	movs	r3, #144	@ 0x90
 800566e:	18fb      	adds	r3, r7, r3
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	1c5a      	adds	r2, r3, #1
 8005676:	4b34      	ldr	r3, [pc, #208]	@ (8005748 <minmea_scan+0x718>)
 8005678:	18d3      	adds	r3, r2, r3
 800567a:	781b      	ldrb	r3, [r3, #0]
 800567c:	001a      	movs	r2, r3
 800567e:	2304      	movs	r3, #4
 8005680:	4013      	ands	r3, r2
 8005682:	d002      	beq.n	800568a <minmea_scan+0x65a>
 8005684:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005686:	2b01      	cmp	r3, #1
 8005688:	dcd9      	bgt.n	800563e <minmea_scan+0x60e>
                        }
                        u = value * scale;
 800568a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800568c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800568e:	4353      	muls	r3, r2
 8005690:	653b      	str	r3, [r7, #80]	@ 0x50
 8005692:	e001      	b.n	8005698 <minmea_scan+0x668>
                    } else {
                        u = 0;
 8005694:	2300      	movs	r3, #0
 8005696:	653b      	str	r3, [r7, #80]	@ 0x50
                    }
                }

                time->hours = h;
 8005698:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800569a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800569c:	601a      	str	r2, [r3, #0]
                time->minutes = i;
 800569e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056a0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80056a2:	605a      	str	r2, [r3, #4]
                time->seconds = s;
 80056a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056a6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80056a8:	609a      	str	r2, [r3, #8]
                time->microseconds = u;
 80056aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056ac:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80056ae:	60da      	str	r2, [r3, #12]
            } break;
 80056b0:	e000      	b.n	80056b4 <minmea_scan+0x684>

            case '_': { // Ignore the field.
            } break;
 80056b2:	46c0      	nop			@ (mov r8, r8)
            default: { // Unknown.
                goto parse_error;
            } break;
        }

        next_field();
 80056b4:	e002      	b.n	80056bc <minmea_scan+0x68c>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	3301      	adds	r3, #1
 80056ba:	607b      	str	r3, [r7, #4]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	0018      	movs	r0, r3
 80056c2:	f7ff fc8f 	bl	8004fe4 <minmea_isfield>
 80056c6:	1e03      	subs	r3, r0, #0
 80056c8:	d1f5      	bne.n	80056b6 <minmea_scan+0x686>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	2b2c      	cmp	r3, #44	@ 0x2c
 80056d0:	d107      	bne.n	80056e2 <minmea_scan+0x6b2>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	3301      	adds	r3, #1
 80056d6:	607b      	str	r3, [r7, #4]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2290      	movs	r2, #144	@ 0x90
 80056dc:	18ba      	adds	r2, r7, r2
 80056de:	6013      	str	r3, [r2, #0]
 80056e0:	e003      	b.n	80056ea <minmea_scan+0x6ba>
 80056e2:	2300      	movs	r3, #0
 80056e4:	2290      	movs	r2, #144	@ 0x90
 80056e6:	18ba      	adds	r2, r7, r2
 80056e8:	6013      	str	r3, [r2, #0]
    while (*format) {
 80056ea:	23a4      	movs	r3, #164	@ 0xa4
 80056ec:	2208      	movs	r2, #8
 80056ee:	189b      	adds	r3, r3, r2
 80056f0:	19db      	adds	r3, r3, r7
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	781b      	ldrb	r3, [r3, #0]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d000      	beq.n	80056fc <minmea_scan+0x6cc>
 80056fa:	e4b0      	b.n	800505e <minmea_scan+0x2e>
    }

    result = true;
 80056fc:	2397      	movs	r3, #151	@ 0x97
 80056fe:	18fb      	adds	r3, r7, r3
 8005700:	2201      	movs	r2, #1
 8005702:	701a      	strb	r2, [r3, #0]
 8005704:	e016      	b.n	8005734 <minmea_scan+0x704>
            goto parse_error;
 8005706:	46c0      	nop			@ (mov r8, r8)
 8005708:	e014      	b.n	8005734 <minmea_scan+0x704>
                goto parse_error;
 800570a:	46c0      	nop			@ (mov r8, r8)
 800570c:	e012      	b.n	8005734 <minmea_scan+0x704>
                            goto parse_error;
 800570e:	46c0      	nop			@ (mov r8, r8)
 8005710:	e010      	b.n	8005734 <minmea_scan+0x704>
                                    goto parse_error;
 8005712:	46c0      	nop			@ (mov r8, r8)
 8005714:	e00e      	b.n	8005734 <minmea_scan+0x704>
                            goto parse_error;
 8005716:	46c0      	nop			@ (mov r8, r8)
 8005718:	e00c      	b.n	8005734 <minmea_scan+0x704>
                    goto parse_error;
 800571a:	46c0      	nop			@ (mov r8, r8)
 800571c:	e00a      	b.n	8005734 <minmea_scan+0x704>
                        goto parse_error;
 800571e:	46c0      	nop			@ (mov r8, r8)
 8005720:	e008      	b.n	8005734 <minmea_scan+0x704>
                    goto parse_error;
 8005722:	46c0      	nop			@ (mov r8, r8)
 8005724:	e006      	b.n	8005734 <minmea_scan+0x704>
                    goto parse_error;
 8005726:	46c0      	nop			@ (mov r8, r8)
 8005728:	e004      	b.n	8005734 <minmea_scan+0x704>
                        goto parse_error;
 800572a:	46c0      	nop			@ (mov r8, r8)
 800572c:	e002      	b.n	8005734 <minmea_scan+0x704>
                            goto parse_error;
 800572e:	46c0      	nop			@ (mov r8, r8)
 8005730:	e000      	b.n	8005734 <minmea_scan+0x704>
                            goto parse_error;
 8005732:	46c0      	nop			@ (mov r8, r8)

parse_error:
    va_end(ap);
    return result;
 8005734:	2397      	movs	r3, #151	@ 0x97
 8005736:	18fb      	adds	r3, r7, r3
 8005738:	781b      	ldrb	r3, [r3, #0]
}
 800573a:	0018      	movs	r0, r3
 800573c:	46bd      	mov	sp, r7
 800573e:	b027      	add	sp, #156	@ 0x9c
 8005740:	bcb0      	pop	{r4, r5, r7}
 8005742:	bc08      	pop	{r3}
 8005744:	b003      	add	sp, #12
 8005746:	4718      	bx	r3
 8005748:	0800c1c4 	.word	0x0800c1c4
 800574c:	000f4240 	.word	0x000f4240

08005750 <minmea_parse_rmc>:

    return MINMEA_UNKNOWN;
}

bool minmea_parse_rmc(struct minmea_sentence_rmc *frame, const char *sentence)
{
 8005750:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005752:	46d6      	mov	lr, sl
 8005754:	464f      	mov	r7, r9
 8005756:	4646      	mov	r6, r8
 8005758:	b5c0      	push	{r6, r7, lr}
 800575a:	b092      	sub	sp, #72	@ 0x48
 800575c:	af0a      	add	r7, sp, #40	@ 0x28
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	6039      	str	r1, [r7, #0]
    char type[6];
    char validity;
    int latitude_direction;
    int longitude_direction;
    int variation_direction;
    if (!minmea_scan(sentence, "tTcfdfdffDfd",
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	469a      	mov	sl, r3
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	3314      	adds	r3, #20
 800576a:	687a      	ldr	r2, [r7, #4]
 800576c:	321c      	adds	r2, #28
 800576e:	6879      	ldr	r1, [r7, #4]
 8005770:	3124      	adds	r1, #36	@ 0x24
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	302c      	adds	r0, #44	@ 0x2c
 8005776:	687c      	ldr	r4, [r7, #4]
 8005778:	3434      	adds	r4, #52	@ 0x34
 800577a:	687d      	ldr	r5, [r7, #4]
 800577c:	3540      	adds	r5, #64	@ 0x40
 800577e:	2618      	movs	r6, #24
 8005780:	46b1      	mov	r9, r6
 8005782:	44b9      	add	r9, r7
 8005784:	4e2a      	ldr	r6, [pc, #168]	@ (8005830 <minmea_parse_rmc+0xe0>)
 8005786:	46b0      	mov	r8, r6
 8005788:	683e      	ldr	r6, [r7, #0]
 800578a:	46b4      	mov	ip, r6
 800578c:	2608      	movs	r6, #8
 800578e:	19be      	adds	r6, r7, r6
 8005790:	9609      	str	r6, [sp, #36]	@ 0x24
 8005792:	9508      	str	r5, [sp, #32]
 8005794:	9407      	str	r4, [sp, #28]
 8005796:	9006      	str	r0, [sp, #24]
 8005798:	9105      	str	r1, [sp, #20]
 800579a:	210c      	movs	r1, #12
 800579c:	1879      	adds	r1, r7, r1
 800579e:	9104      	str	r1, [sp, #16]
 80057a0:	9203      	str	r2, [sp, #12]
 80057a2:	2210      	movs	r2, #16
 80057a4:	18ba      	adds	r2, r7, r2
 80057a6:	9202      	str	r2, [sp, #8]
 80057a8:	9301      	str	r3, [sp, #4]
 80057aa:	2317      	movs	r3, #23
 80057ac:	18fb      	adds	r3, r7, r3
 80057ae:	9300      	str	r3, [sp, #0]
 80057b0:	4653      	mov	r3, sl
 80057b2:	464a      	mov	r2, r9
 80057b4:	4641      	mov	r1, r8
 80057b6:	4660      	mov	r0, ip
 80057b8:	f7ff fc3a 	bl	8005030 <minmea_scan>
 80057bc:	0003      	movs	r3, r0
 80057be:	001a      	movs	r2, r3
 80057c0:	2301      	movs	r3, #1
 80057c2:	4053      	eors	r3, r2
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d001      	beq.n	80057ce <minmea_parse_rmc+0x7e>
            &frame->longitude, &longitude_direction,
            &frame->speed,
            &frame->course,
            &frame->date,
            &frame->variation, &variation_direction))
        return false;
 80057ca:	2300      	movs	r3, #0
 80057cc:	e027      	b.n	800581e <minmea_parse_rmc+0xce>
    if (strcmp(type+2, "RMC"))
 80057ce:	2318      	movs	r3, #24
 80057d0:	18fb      	adds	r3, r7, r3
 80057d2:	3302      	adds	r3, #2
 80057d4:	4a17      	ldr	r2, [pc, #92]	@ (8005834 <minmea_parse_rmc+0xe4>)
 80057d6:	0011      	movs	r1, r2
 80057d8:	0018      	movs	r0, r3
 80057da:	f7fa fc93 	bl	8000104 <strcmp>
 80057de:	1e03      	subs	r3, r0, #0
 80057e0:	d001      	beq.n	80057e6 <minmea_parse_rmc+0x96>
        return false;
 80057e2:	2300      	movs	r3, #0
 80057e4:	e01b      	b.n	800581e <minmea_parse_rmc+0xce>

    frame->valid = (validity == 'A');
 80057e6:	2317      	movs	r3, #23
 80057e8:	18fb      	adds	r3, r7, r3
 80057ea:	781b      	ldrb	r3, [r3, #0]
 80057ec:	3b41      	subs	r3, #65	@ 0x41
 80057ee:	425a      	negs	r2, r3
 80057f0:	4153      	adcs	r3, r2
 80057f2:	b2da      	uxtb	r2, r3
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	741a      	strb	r2, [r3, #16]
    frame->latitude.value *= latitude_direction;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	695b      	ldr	r3, [r3, #20]
 80057fc:	693a      	ldr	r2, [r7, #16]
 80057fe:	435a      	muls	r2, r3
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	615a      	str	r2, [r3, #20]
    frame->longitude.value *= longitude_direction;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	69db      	ldr	r3, [r3, #28]
 8005808:	68fa      	ldr	r2, [r7, #12]
 800580a:	435a      	muls	r2, r3
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	61da      	str	r2, [r3, #28]
    frame->variation.value *= variation_direction;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005814:	68ba      	ldr	r2, [r7, #8]
 8005816:	435a      	muls	r2, r3
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	641a      	str	r2, [r3, #64]	@ 0x40

    return true;
 800581c:	2301      	movs	r3, #1
}
 800581e:	0018      	movs	r0, r3
 8005820:	46bd      	mov	sp, r7
 8005822:	b008      	add	sp, #32
 8005824:	bce0      	pop	{r5, r6, r7}
 8005826:	46ba      	mov	sl, r7
 8005828:	46b1      	mov	r9, r6
 800582a:	46a8      	mov	r8, r5
 800582c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800582e:	46c0      	nop			@ (mov r8, r8)
 8005830:	0800b998 	.word	0x0800b998
 8005834:	0800b984 	.word	0x0800b984

08005838 <minmea_parse_gga>:

bool minmea_parse_gga(struct minmea_sentence_gga *frame, const char *sentence)
{
 8005838:	b5f0      	push	{r4, r5, r6, r7, lr}
 800583a:	46de      	mov	lr, fp
 800583c:	4657      	mov	r7, sl
 800583e:	464e      	mov	r6, r9
 8005840:	4645      	mov	r5, r8
 8005842:	b5e0      	push	{r5, r6, r7, lr}
 8005844:	b097      	sub	sp, #92	@ 0x5c
 8005846:	af0c      	add	r7, sp, #48	@ 0x30
 8005848:	6178      	str	r0, [r7, #20]
 800584a:	6139      	str	r1, [r7, #16]
    // $GPGGA,123519,4807.038,N,01131.000,E,1,08,0.9,545.4,M,46.9,M,,*47
    char type[6];
    int latitude_direction;
    int longitude_direction;

    if (!minmea_scan(sentence, "tTfdfdiiffcfci_",
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	60fb      	str	r3, [r7, #12]
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	001a      	movs	r2, r3
 8005854:	3210      	adds	r2, #16
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	0019      	movs	r1, r3
 800585a:	3118      	adds	r1, #24
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	001c      	movs	r4, r3
 8005860:	3420      	adds	r4, #32
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	001d      	movs	r5, r3
 8005866:	3524      	adds	r5, #36	@ 0x24
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	001e      	movs	r6, r3
 800586c:	3628      	adds	r6, #40	@ 0x28
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	2030      	movs	r0, #48	@ 0x30
 8005872:	4684      	mov	ip, r0
 8005874:	449c      	add	ip, r3
 8005876:	4663      	mov	r3, ip
 8005878:	607b      	str	r3, [r7, #4]
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	2038      	movs	r0, #56	@ 0x38
 800587e:	4680      	mov	r8, r0
 8005880:	4498      	add	r8, r3
 8005882:	4643      	mov	r3, r8
 8005884:	603b      	str	r3, [r7, #0]
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	203c      	movs	r0, #60	@ 0x3c
 800588a:	4681      	mov	r9, r0
 800588c:	4499      	add	r9, r3
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	2044      	movs	r0, #68	@ 0x44
 8005892:	4682      	mov	sl, r0
 8005894:	449a      	add	sl, r3
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	3348      	adds	r3, #72	@ 0x48
 800589a:	2010      	movs	r0, #16
 800589c:	4683      	mov	fp, r0
 800589e:	2008      	movs	r0, #8
 80058a0:	4684      	mov	ip, r0
 80058a2:	2008      	movs	r0, #8
 80058a4:	4680      	mov	r8, r0
 80058a6:	44b8      	add	r8, r7
 80058a8:	44c4      	add	ip, r8
 80058aa:	44e3      	add	fp, ip
 80058ac:	4658      	mov	r0, fp
 80058ae:	60b8      	str	r0, [r7, #8]
 80058b0:	482a      	ldr	r0, [pc, #168]	@ (800595c <minmea_parse_gga+0x124>)
 80058b2:	4683      	mov	fp, r0
 80058b4:	6938      	ldr	r0, [r7, #16]
 80058b6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80058b8:	4653      	mov	r3, sl
 80058ba:	930a      	str	r3, [sp, #40]	@ 0x28
 80058bc:	464b      	mov	r3, r9
 80058be:	9309      	str	r3, [sp, #36]	@ 0x24
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	9308      	str	r3, [sp, #32]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	9307      	str	r3, [sp, #28]
 80058c8:	9606      	str	r6, [sp, #24]
 80058ca:	9505      	str	r5, [sp, #20]
 80058cc:	9404      	str	r4, [sp, #16]
 80058ce:	2408      	movs	r4, #8
 80058d0:	2508      	movs	r5, #8
 80058d2:	1963      	adds	r3, r4, r5
 80058d4:	2408      	movs	r4, #8
 80058d6:	46a4      	mov	ip, r4
 80058d8:	44bc      	add	ip, r7
 80058da:	4463      	add	r3, ip
 80058dc:	9303      	str	r3, [sp, #12]
 80058de:	9102      	str	r1, [sp, #8]
 80058e0:	210c      	movs	r1, #12
 80058e2:	194b      	adds	r3, r1, r5
 80058e4:	2108      	movs	r1, #8
 80058e6:	468c      	mov	ip, r1
 80058e8:	44bc      	add	ip, r7
 80058ea:	4463      	add	r3, ip
 80058ec:	9301      	str	r3, [sp, #4]
 80058ee:	9200      	str	r2, [sp, #0]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	68ba      	ldr	r2, [r7, #8]
 80058f4:	4659      	mov	r1, fp
 80058f6:	f7ff fb9b 	bl	8005030 <minmea_scan>
 80058fa:	0003      	movs	r3, r0
 80058fc:	001a      	movs	r2, r3
 80058fe:	2301      	movs	r3, #1
 8005900:	4053      	eors	r3, r2
 8005902:	b2db      	uxtb	r3, r3
 8005904:	2b00      	cmp	r3, #0
 8005906:	d001      	beq.n	800590c <minmea_parse_gga+0xd4>
            &frame->satellites_tracked,
            &frame->hdop,
            &frame->altitude, &frame->altitude_units,
            &frame->height, &frame->height_units,
            &frame->dgps_age))
        return false;
 8005908:	2300      	movs	r3, #0
 800590a:	e01d      	b.n	8005948 <minmea_parse_gga+0x110>
    if (strcmp(type+2, "GGA"))
 800590c:	2310      	movs	r3, #16
 800590e:	2208      	movs	r2, #8
 8005910:	189b      	adds	r3, r3, r2
 8005912:	2208      	movs	r2, #8
 8005914:	4694      	mov	ip, r2
 8005916:	44bc      	add	ip, r7
 8005918:	4463      	add	r3, ip
 800591a:	3302      	adds	r3, #2
 800591c:	4a10      	ldr	r2, [pc, #64]	@ (8005960 <minmea_parse_gga+0x128>)
 800591e:	0011      	movs	r1, r2
 8005920:	0018      	movs	r0, r3
 8005922:	f7fa fbef 	bl	8000104 <strcmp>
 8005926:	1e03      	subs	r3, r0, #0
 8005928:	d001      	beq.n	800592e <minmea_parse_gga+0xf6>
        return false;
 800592a:	2300      	movs	r3, #0
 800592c:	e00c      	b.n	8005948 <minmea_parse_gga+0x110>

    frame->latitude.value *= latitude_direction;
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	691b      	ldr	r3, [r3, #16]
 8005932:	69fa      	ldr	r2, [r7, #28]
 8005934:	435a      	muls	r2, r3
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	611a      	str	r2, [r3, #16]
    frame->longitude.value *= longitude_direction;
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	699b      	ldr	r3, [r3, #24]
 800593e:	69ba      	ldr	r2, [r7, #24]
 8005940:	435a      	muls	r2, r3
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	619a      	str	r2, [r3, #24]

    return true;
 8005946:	2301      	movs	r3, #1
}
 8005948:	0018      	movs	r0, r3
 800594a:	46bd      	mov	sp, r7
 800594c:	b00b      	add	sp, #44	@ 0x2c
 800594e:	bcf0      	pop	{r4, r5, r6, r7}
 8005950:	46bb      	mov	fp, r7
 8005952:	46b2      	mov	sl, r6
 8005954:	46a9      	mov	r9, r5
 8005956:	46a0      	mov	r8, r4
 8005958:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800595a:	46c0      	nop			@ (mov r8, r8)
 800595c:	0800b9a8 	.word	0x0800b9a8
 8005960:	0800b988 	.word	0x0800b988

08005964 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b082      	sub	sp, #8
 8005968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800596a:	4b11      	ldr	r3, [pc, #68]	@ (80059b0 <HAL_MspInit+0x4c>)
 800596c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800596e:	4b10      	ldr	r3, [pc, #64]	@ (80059b0 <HAL_MspInit+0x4c>)
 8005970:	2101      	movs	r1, #1
 8005972:	430a      	orrs	r2, r1
 8005974:	641a      	str	r2, [r3, #64]	@ 0x40
 8005976:	4b0e      	ldr	r3, [pc, #56]	@ (80059b0 <HAL_MspInit+0x4c>)
 8005978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800597a:	2201      	movs	r2, #1
 800597c:	4013      	ands	r3, r2
 800597e:	607b      	str	r3, [r7, #4]
 8005980:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005982:	4b0b      	ldr	r3, [pc, #44]	@ (80059b0 <HAL_MspInit+0x4c>)
 8005984:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005986:	4b0a      	ldr	r3, [pc, #40]	@ (80059b0 <HAL_MspInit+0x4c>)
 8005988:	2180      	movs	r1, #128	@ 0x80
 800598a:	0549      	lsls	r1, r1, #21
 800598c:	430a      	orrs	r2, r1
 800598e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005990:	4b07      	ldr	r3, [pc, #28]	@ (80059b0 <HAL_MspInit+0x4c>)
 8005992:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005994:	2380      	movs	r3, #128	@ 0x80
 8005996:	055b      	lsls	r3, r3, #21
 8005998:	4013      	ands	r3, r2
 800599a:	603b      	str	r3, [r7, #0]
 800599c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 800599e:	23c0      	movs	r3, #192	@ 0xc0
 80059a0:	00db      	lsls	r3, r3, #3
 80059a2:	0018      	movs	r0, r3
 80059a4:	f000 fb26 	bl	8005ff4 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80059a8:	46c0      	nop			@ (mov r8, r8)
 80059aa:	46bd      	mov	sp, r7
 80059ac:	b002      	add	sp, #8
 80059ae:	bd80      	pop	{r7, pc}
 80059b0:	40021000 	.word	0x40021000

080059b4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80059b4:	b590      	push	{r4, r7, lr}
 80059b6:	b09d      	sub	sp, #116	@ 0x74
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059bc:	235c      	movs	r3, #92	@ 0x5c
 80059be:	18fb      	adds	r3, r7, r3
 80059c0:	0018      	movs	r0, r3
 80059c2:	2314      	movs	r3, #20
 80059c4:	001a      	movs	r2, r3
 80059c6:	2100      	movs	r1, #0
 80059c8:	f005 f986 	bl	800acd8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80059cc:	2410      	movs	r4, #16
 80059ce:	193b      	adds	r3, r7, r4
 80059d0:	0018      	movs	r0, r3
 80059d2:	234c      	movs	r3, #76	@ 0x4c
 80059d4:	001a      	movs	r2, r3
 80059d6:	2100      	movs	r1, #0
 80059d8:	f005 f97e 	bl	800acd8 <memset>
  if(hi2c->Instance==I2C1)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a23      	ldr	r2, [pc, #140]	@ (8005a70 <HAL_I2C_MspInit+0xbc>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d13f      	bne.n	8005a66 <HAL_I2C_MspInit+0xb2>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80059e6:	193b      	adds	r3, r7, r4
 80059e8:	2220      	movs	r2, #32
 80059ea:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80059ec:	193b      	adds	r3, r7, r4
 80059ee:	2200      	movs	r2, #0
 80059f0:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80059f2:	193b      	adds	r3, r7, r4
 80059f4:	0018      	movs	r0, r3
 80059f6:	f002 f907 	bl	8007c08 <HAL_RCCEx_PeriphCLKConfig>
 80059fa:	1e03      	subs	r3, r0, #0
 80059fc:	d001      	beq.n	8005a02 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80059fe:	f7ff faeb 	bl	8004fd8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a02:	4b1c      	ldr	r3, [pc, #112]	@ (8005a74 <HAL_I2C_MspInit+0xc0>)
 8005a04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a06:	4b1b      	ldr	r3, [pc, #108]	@ (8005a74 <HAL_I2C_MspInit+0xc0>)
 8005a08:	2101      	movs	r1, #1
 8005a0a:	430a      	orrs	r2, r1
 8005a0c:	635a      	str	r2, [r3, #52]	@ 0x34
 8005a0e:	4b19      	ldr	r3, [pc, #100]	@ (8005a74 <HAL_I2C_MspInit+0xc0>)
 8005a10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a12:	2201      	movs	r2, #1
 8005a14:	4013      	ands	r3, r2
 8005a16:	60fb      	str	r3, [r7, #12]
 8005a18:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005a1a:	215c      	movs	r1, #92	@ 0x5c
 8005a1c:	187b      	adds	r3, r7, r1
 8005a1e:	22c0      	movs	r2, #192	@ 0xc0
 8005a20:	00d2      	lsls	r2, r2, #3
 8005a22:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005a24:	187b      	adds	r3, r7, r1
 8005a26:	2212      	movs	r2, #18
 8005a28:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a2a:	187b      	adds	r3, r7, r1
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a30:	187b      	adds	r3, r7, r1
 8005a32:	2200      	movs	r2, #0
 8005a34:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8005a36:	187b      	adds	r3, r7, r1
 8005a38:	2206      	movs	r2, #6
 8005a3a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a3c:	187a      	adds	r2, r7, r1
 8005a3e:	23a0      	movs	r3, #160	@ 0xa0
 8005a40:	05db      	lsls	r3, r3, #23
 8005a42:	0011      	movs	r1, r2
 8005a44:	0018      	movs	r0, r3
 8005a46:	f000 fb9f 	bl	8006188 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005a4a:	4b0a      	ldr	r3, [pc, #40]	@ (8005a74 <HAL_I2C_MspInit+0xc0>)
 8005a4c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a4e:	4b09      	ldr	r3, [pc, #36]	@ (8005a74 <HAL_I2C_MspInit+0xc0>)
 8005a50:	2180      	movs	r1, #128	@ 0x80
 8005a52:	0389      	lsls	r1, r1, #14
 8005a54:	430a      	orrs	r2, r1
 8005a56:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005a58:	4b06      	ldr	r3, [pc, #24]	@ (8005a74 <HAL_I2C_MspInit+0xc0>)
 8005a5a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a5c:	2380      	movs	r3, #128	@ 0x80
 8005a5e:	039b      	lsls	r3, r3, #14
 8005a60:	4013      	ands	r3, r2
 8005a62:	60bb      	str	r3, [r7, #8]
 8005a64:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8005a66:	46c0      	nop			@ (mov r8, r8)
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	b01d      	add	sp, #116	@ 0x74
 8005a6c:	bd90      	pop	{r4, r7, pc}
 8005a6e:	46c0      	nop			@ (mov r8, r8)
 8005a70:	40005400 	.word	0x40005400
 8005a74:	40021000 	.word	0x40021000

08005a78 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005a78:	b590      	push	{r4, r7, lr}
 8005a7a:	b08b      	sub	sp, #44	@ 0x2c
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a80:	2414      	movs	r4, #20
 8005a82:	193b      	adds	r3, r7, r4
 8005a84:	0018      	movs	r0, r3
 8005a86:	2314      	movs	r3, #20
 8005a88:	001a      	movs	r2, r3
 8005a8a:	2100      	movs	r1, #0
 8005a8c:	f005 f924 	bl	800acd8 <memset>
  if(hspi->Instance==SPI1)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a2c      	ldr	r2, [pc, #176]	@ (8005b48 <HAL_SPI_MspInit+0xd0>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d151      	bne.n	8005b3e <HAL_SPI_MspInit+0xc6>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005a9a:	4b2c      	ldr	r3, [pc, #176]	@ (8005b4c <HAL_SPI_MspInit+0xd4>)
 8005a9c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005a9e:	4b2b      	ldr	r3, [pc, #172]	@ (8005b4c <HAL_SPI_MspInit+0xd4>)
 8005aa0:	2180      	movs	r1, #128	@ 0x80
 8005aa2:	0149      	lsls	r1, r1, #5
 8005aa4:	430a      	orrs	r2, r1
 8005aa6:	641a      	str	r2, [r3, #64]	@ 0x40
 8005aa8:	4b28      	ldr	r3, [pc, #160]	@ (8005b4c <HAL_SPI_MspInit+0xd4>)
 8005aaa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005aac:	2380      	movs	r3, #128	@ 0x80
 8005aae:	015b      	lsls	r3, r3, #5
 8005ab0:	4013      	ands	r3, r2
 8005ab2:	613b      	str	r3, [r7, #16]
 8005ab4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ab6:	4b25      	ldr	r3, [pc, #148]	@ (8005b4c <HAL_SPI_MspInit+0xd4>)
 8005ab8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005aba:	4b24      	ldr	r3, [pc, #144]	@ (8005b4c <HAL_SPI_MspInit+0xd4>)
 8005abc:	2101      	movs	r1, #1
 8005abe:	430a      	orrs	r2, r1
 8005ac0:	635a      	str	r2, [r3, #52]	@ 0x34
 8005ac2:	4b22      	ldr	r3, [pc, #136]	@ (8005b4c <HAL_SPI_MspInit+0xd4>)
 8005ac4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	4013      	ands	r3, r2
 8005aca:	60fb      	str	r3, [r7, #12]
 8005acc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005ace:	4b1f      	ldr	r3, [pc, #124]	@ (8005b4c <HAL_SPI_MspInit+0xd4>)
 8005ad0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ad2:	4b1e      	ldr	r3, [pc, #120]	@ (8005b4c <HAL_SPI_MspInit+0xd4>)
 8005ad4:	2108      	movs	r1, #8
 8005ad6:	430a      	orrs	r2, r1
 8005ad8:	635a      	str	r2, [r3, #52]	@ 0x34
 8005ada:	4b1c      	ldr	r3, [pc, #112]	@ (8005b4c <HAL_SPI_MspInit+0xd4>)
 8005adc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ade:	2208      	movs	r2, #8
 8005ae0:	4013      	ands	r3, r2
 8005ae2:	60bb      	str	r3, [r7, #8]
 8005ae4:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PD5     ------> SPI1_MISO
    PD6     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8005ae6:	193b      	adds	r3, r7, r4
 8005ae8:	2202      	movs	r2, #2
 8005aea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005aec:	193b      	adds	r3, r7, r4
 8005aee:	2202      	movs	r2, #2
 8005af0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005af2:	193b      	adds	r3, r7, r4
 8005af4:	2200      	movs	r2, #0
 8005af6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005af8:	193b      	adds	r3, r7, r4
 8005afa:	2200      	movs	r2, #0
 8005afc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8005afe:	193b      	adds	r3, r7, r4
 8005b00:	2200      	movs	r2, #0
 8005b02:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b04:	193a      	adds	r2, r7, r4
 8005b06:	23a0      	movs	r3, #160	@ 0xa0
 8005b08:	05db      	lsls	r3, r3, #23
 8005b0a:	0011      	movs	r1, r2
 8005b0c:	0018      	movs	r0, r3
 8005b0e:	f000 fb3b 	bl	8006188 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8005b12:	0021      	movs	r1, r4
 8005b14:	187b      	adds	r3, r7, r1
 8005b16:	2260      	movs	r2, #96	@ 0x60
 8005b18:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b1a:	187b      	adds	r3, r7, r1
 8005b1c:	2202      	movs	r2, #2
 8005b1e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b20:	187b      	adds	r3, r7, r1
 8005b22:	2200      	movs	r2, #0
 8005b24:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b26:	187b      	adds	r3, r7, r1
 8005b28:	2200      	movs	r2, #0
 8005b2a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI1;
 8005b2c:	187b      	adds	r3, r7, r1
 8005b2e:	2201      	movs	r2, #1
 8005b30:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005b32:	187b      	adds	r3, r7, r1
 8005b34:	4a06      	ldr	r2, [pc, #24]	@ (8005b50 <HAL_SPI_MspInit+0xd8>)
 8005b36:	0019      	movs	r1, r3
 8005b38:	0010      	movs	r0, r2
 8005b3a:	f000 fb25 	bl	8006188 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8005b3e:	46c0      	nop			@ (mov r8, r8)
 8005b40:	46bd      	mov	sp, r7
 8005b42:	b00b      	add	sp, #44	@ 0x2c
 8005b44:	bd90      	pop	{r4, r7, pc}
 8005b46:	46c0      	nop			@ (mov r8, r8)
 8005b48:	40013000 	.word	0x40013000
 8005b4c:	40021000 	.word	0x40021000
 8005b50:	50000c00 	.word	0x50000c00

08005b54 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b084      	sub	sp, #16
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a0a      	ldr	r2, [pc, #40]	@ (8005b8c <HAL_TIM_Base_MspInit+0x38>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d10d      	bne.n	8005b82 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM17_MspInit 0 */

    /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8005b66:	4b0a      	ldr	r3, [pc, #40]	@ (8005b90 <HAL_TIM_Base_MspInit+0x3c>)
 8005b68:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005b6a:	4b09      	ldr	r3, [pc, #36]	@ (8005b90 <HAL_TIM_Base_MspInit+0x3c>)
 8005b6c:	2180      	movs	r1, #128	@ 0x80
 8005b6e:	02c9      	lsls	r1, r1, #11
 8005b70:	430a      	orrs	r2, r1
 8005b72:	641a      	str	r2, [r3, #64]	@ 0x40
 8005b74:	4b06      	ldr	r3, [pc, #24]	@ (8005b90 <HAL_TIM_Base_MspInit+0x3c>)
 8005b76:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005b78:	2380      	movs	r3, #128	@ 0x80
 8005b7a:	02db      	lsls	r3, r3, #11
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	60fb      	str	r3, [r7, #12]
 8005b80:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM17_MspInit 1 */

  }

}
 8005b82:	46c0      	nop			@ (mov r8, r8)
 8005b84:	46bd      	mov	sp, r7
 8005b86:	b004      	add	sp, #16
 8005b88:	bd80      	pop	{r7, pc}
 8005b8a:	46c0      	nop			@ (mov r8, r8)
 8005b8c:	40014800 	.word	0x40014800
 8005b90:	40021000 	.word	0x40021000

08005b94 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005b94:	b590      	push	{r4, r7, lr}
 8005b96:	b089      	sub	sp, #36	@ 0x24
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b9c:	240c      	movs	r4, #12
 8005b9e:	193b      	adds	r3, r7, r4
 8005ba0:	0018      	movs	r0, r3
 8005ba2:	2314      	movs	r3, #20
 8005ba4:	001a      	movs	r2, r3
 8005ba6:	2100      	movs	r1, #0
 8005ba8:	f005 f896 	bl	800acd8 <memset>
  if(htim->Instance==TIM17)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a14      	ldr	r2, [pc, #80]	@ (8005c04 <HAL_TIM_MspPostInit+0x70>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d122      	bne.n	8005bfc <HAL_TIM_MspPostInit+0x68>
  {
    /* USER CODE BEGIN TIM17_MspPostInit 0 */

    /* USER CODE END TIM17_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005bb6:	4b14      	ldr	r3, [pc, #80]	@ (8005c08 <HAL_TIM_MspPostInit+0x74>)
 8005bb8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005bba:	4b13      	ldr	r3, [pc, #76]	@ (8005c08 <HAL_TIM_MspPostInit+0x74>)
 8005bbc:	2101      	movs	r1, #1
 8005bbe:	430a      	orrs	r2, r1
 8005bc0:	635a      	str	r2, [r3, #52]	@ 0x34
 8005bc2:	4b11      	ldr	r3, [pc, #68]	@ (8005c08 <HAL_TIM_MspPostInit+0x74>)
 8005bc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	4013      	ands	r3, r2
 8005bca:	60bb      	str	r3, [r7, #8]
 8005bcc:	68bb      	ldr	r3, [r7, #8]
    /**TIM17 GPIO Configuration
    PA7     ------> TIM17_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8005bce:	0021      	movs	r1, r4
 8005bd0:	187b      	adds	r3, r7, r1
 8005bd2:	2280      	movs	r2, #128	@ 0x80
 8005bd4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bd6:	187b      	adds	r3, r7, r1
 8005bd8:	2202      	movs	r2, #2
 8005bda:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bdc:	187b      	adds	r3, r7, r1
 8005bde:	2200      	movs	r2, #0
 8005be0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005be2:	187b      	adds	r3, r7, r1
 8005be4:	2200      	movs	r2, #0
 8005be6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM17;
 8005be8:	187b      	adds	r3, r7, r1
 8005bea:	2205      	movs	r2, #5
 8005bec:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005bee:	187a      	adds	r2, r7, r1
 8005bf0:	23a0      	movs	r3, #160	@ 0xa0
 8005bf2:	05db      	lsls	r3, r3, #23
 8005bf4:	0011      	movs	r1, r2
 8005bf6:	0018      	movs	r0, r3
 8005bf8:	f000 fac6 	bl	8006188 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM17_MspPostInit 1 */

    /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8005bfc:	46c0      	nop			@ (mov r8, r8)
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	b009      	add	sp, #36	@ 0x24
 8005c02:	bd90      	pop	{r4, r7, pc}
 8005c04:	40014800 	.word	0x40014800
 8005c08:	40021000 	.word	0x40021000

08005c0c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005c0c:	b590      	push	{r4, r7, lr}
 8005c0e:	b09f      	sub	sp, #124	@ 0x7c
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c14:	2364      	movs	r3, #100	@ 0x64
 8005c16:	18fb      	adds	r3, r7, r3
 8005c18:	0018      	movs	r0, r3
 8005c1a:	2314      	movs	r3, #20
 8005c1c:	001a      	movs	r2, r3
 8005c1e:	2100      	movs	r1, #0
 8005c20:	f005 f85a 	bl	800acd8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005c24:	2418      	movs	r4, #24
 8005c26:	193b      	adds	r3, r7, r4
 8005c28:	0018      	movs	r0, r3
 8005c2a:	234c      	movs	r3, #76	@ 0x4c
 8005c2c:	001a      	movs	r2, r3
 8005c2e:	2100      	movs	r1, #0
 8005c30:	f005 f852 	bl	800acd8 <memset>
  if(huart->Instance==USART1)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a45      	ldr	r2, [pc, #276]	@ (8005d50 <HAL_UART_MspInit+0x144>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d13e      	bne.n	8005cbc <HAL_UART_MspInit+0xb0>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005c3e:	193b      	adds	r3, r7, r4
 8005c40:	2201      	movs	r2, #1
 8005c42:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8005c44:	193b      	adds	r3, r7, r4
 8005c46:	2200      	movs	r2, #0
 8005c48:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005c4a:	193b      	adds	r3, r7, r4
 8005c4c:	0018      	movs	r0, r3
 8005c4e:	f001 ffdb 	bl	8007c08 <HAL_RCCEx_PeriphCLKConfig>
 8005c52:	1e03      	subs	r3, r0, #0
 8005c54:	d001      	beq.n	8005c5a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8005c56:	f7ff f9bf 	bl	8004fd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005c5a:	4b3e      	ldr	r3, [pc, #248]	@ (8005d54 <HAL_UART_MspInit+0x148>)
 8005c5c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005c5e:	4b3d      	ldr	r3, [pc, #244]	@ (8005d54 <HAL_UART_MspInit+0x148>)
 8005c60:	2180      	movs	r1, #128	@ 0x80
 8005c62:	01c9      	lsls	r1, r1, #7
 8005c64:	430a      	orrs	r2, r1
 8005c66:	641a      	str	r2, [r3, #64]	@ 0x40
 8005c68:	4b3a      	ldr	r3, [pc, #232]	@ (8005d54 <HAL_UART_MspInit+0x148>)
 8005c6a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005c6c:	2380      	movs	r3, #128	@ 0x80
 8005c6e:	01db      	lsls	r3, r3, #7
 8005c70:	4013      	ands	r3, r2
 8005c72:	617b      	str	r3, [r7, #20]
 8005c74:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005c76:	4b37      	ldr	r3, [pc, #220]	@ (8005d54 <HAL_UART_MspInit+0x148>)
 8005c78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005c7a:	4b36      	ldr	r3, [pc, #216]	@ (8005d54 <HAL_UART_MspInit+0x148>)
 8005c7c:	2104      	movs	r1, #4
 8005c7e:	430a      	orrs	r2, r1
 8005c80:	635a      	str	r2, [r3, #52]	@ 0x34
 8005c82:	4b34      	ldr	r3, [pc, #208]	@ (8005d54 <HAL_UART_MspInit+0x148>)
 8005c84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c86:	2204      	movs	r2, #4
 8005c88:	4013      	ands	r3, r2
 8005c8a:	613b      	str	r3, [r7, #16]
 8005c8c:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005c8e:	2164      	movs	r1, #100	@ 0x64
 8005c90:	187b      	adds	r3, r7, r1
 8005c92:	2230      	movs	r2, #48	@ 0x30
 8005c94:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c96:	187b      	adds	r3, r7, r1
 8005c98:	2202      	movs	r2, #2
 8005c9a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c9c:	187b      	adds	r3, r7, r1
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ca2:	187b      	adds	r3, r7, r1
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8005ca8:	187b      	adds	r3, r7, r1
 8005caa:	2201      	movs	r2, #1
 8005cac:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005cae:	187b      	adds	r3, r7, r1
 8005cb0:	4a29      	ldr	r2, [pc, #164]	@ (8005d58 <HAL_UART_MspInit+0x14c>)
 8005cb2:	0019      	movs	r1, r3
 8005cb4:	0010      	movs	r0, r2
 8005cb6:	f000 fa67 	bl	8006188 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8005cba:	e044      	b.n	8005d46 <HAL_UART_MspInit+0x13a>
  else if(huart->Instance==USART2)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a26      	ldr	r2, [pc, #152]	@ (8005d5c <HAL_UART_MspInit+0x150>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d13f      	bne.n	8005d46 <HAL_UART_MspInit+0x13a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005cc6:	2118      	movs	r1, #24
 8005cc8:	187b      	adds	r3, r7, r1
 8005cca:	2202      	movs	r2, #2
 8005ccc:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8005cce:	187b      	adds	r3, r7, r1
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005cd4:	187b      	adds	r3, r7, r1
 8005cd6:	0018      	movs	r0, r3
 8005cd8:	f001 ff96 	bl	8007c08 <HAL_RCCEx_PeriphCLKConfig>
 8005cdc:	1e03      	subs	r3, r0, #0
 8005cde:	d001      	beq.n	8005ce4 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8005ce0:	f7ff f97a 	bl	8004fd8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005ce4:	4b1b      	ldr	r3, [pc, #108]	@ (8005d54 <HAL_UART_MspInit+0x148>)
 8005ce6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005ce8:	4b1a      	ldr	r3, [pc, #104]	@ (8005d54 <HAL_UART_MspInit+0x148>)
 8005cea:	2180      	movs	r1, #128	@ 0x80
 8005cec:	0289      	lsls	r1, r1, #10
 8005cee:	430a      	orrs	r2, r1
 8005cf0:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005cf2:	4b18      	ldr	r3, [pc, #96]	@ (8005d54 <HAL_UART_MspInit+0x148>)
 8005cf4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005cf6:	2380      	movs	r3, #128	@ 0x80
 8005cf8:	029b      	lsls	r3, r3, #10
 8005cfa:	4013      	ands	r3, r2
 8005cfc:	60fb      	str	r3, [r7, #12]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d00:	4b14      	ldr	r3, [pc, #80]	@ (8005d54 <HAL_UART_MspInit+0x148>)
 8005d02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d04:	4b13      	ldr	r3, [pc, #76]	@ (8005d54 <HAL_UART_MspInit+0x148>)
 8005d06:	2101      	movs	r1, #1
 8005d08:	430a      	orrs	r2, r1
 8005d0a:	635a      	str	r2, [r3, #52]	@ 0x34
 8005d0c:	4b11      	ldr	r3, [pc, #68]	@ (8005d54 <HAL_UART_MspInit+0x148>)
 8005d0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d10:	2201      	movs	r2, #1
 8005d12:	4013      	ands	r3, r2
 8005d14:	60bb      	str	r3, [r7, #8]
 8005d16:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005d18:	2164      	movs	r1, #100	@ 0x64
 8005d1a:	187b      	adds	r3, r7, r1
 8005d1c:	220c      	movs	r2, #12
 8005d1e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d20:	187b      	adds	r3, r7, r1
 8005d22:	2202      	movs	r2, #2
 8005d24:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d26:	187b      	adds	r3, r7, r1
 8005d28:	2200      	movs	r2, #0
 8005d2a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d2c:	187b      	adds	r3, r7, r1
 8005d2e:	2200      	movs	r2, #0
 8005d30:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8005d32:	187b      	adds	r3, r7, r1
 8005d34:	2201      	movs	r2, #1
 8005d36:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d38:	187a      	adds	r2, r7, r1
 8005d3a:	23a0      	movs	r3, #160	@ 0xa0
 8005d3c:	05db      	lsls	r3, r3, #23
 8005d3e:	0011      	movs	r1, r2
 8005d40:	0018      	movs	r0, r3
 8005d42:	f000 fa21 	bl	8006188 <HAL_GPIO_Init>
}
 8005d46:	46c0      	nop			@ (mov r8, r8)
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	b01f      	add	sp, #124	@ 0x7c
 8005d4c:	bd90      	pop	{r4, r7, pc}
 8005d4e:	46c0      	nop			@ (mov r8, r8)
 8005d50:	40013800 	.word	0x40013800
 8005d54:	40021000 	.word	0x40021000
 8005d58:	50000800 	.word	0x50000800
 8005d5c:	40004400 	.word	0x40004400

08005d60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005d64:	46c0      	nop			@ (mov r8, r8)
 8005d66:	e7fd      	b.n	8005d64 <NMI_Handler+0x4>

08005d68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b084      	sub	sp, #16
 8005d6c:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN HardFault_IRQn 0 */
	drawString(0, 150, "ERROR", WHITE, BLACK, 10, 10);
 8005d6e:	2301      	movs	r3, #1
 8005d70:	425b      	negs	r3, r3
 8005d72:	4a06      	ldr	r2, [pc, #24]	@ (8005d8c <HardFault_Handler+0x24>)
 8005d74:	210a      	movs	r1, #10
 8005d76:	9102      	str	r1, [sp, #8]
 8005d78:	210a      	movs	r1, #10
 8005d7a:	9101      	str	r1, [sp, #4]
 8005d7c:	2100      	movs	r1, #0
 8005d7e:	9100      	str	r1, [sp, #0]
 8005d80:	2196      	movs	r1, #150	@ 0x96
 8005d82:	2000      	movs	r0, #0
 8005d84:	f7fd fb64 	bl	8003450 <drawString>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005d88:	46c0      	nop			@ (mov r8, r8)
 8005d8a:	e7fd      	b.n	8005d88 <HardFault_Handler+0x20>
 8005d8c:	0800b9f0 	.word	0x0800b9f0

08005d90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8005d94:	46c0      	nop			@ (mov r8, r8)
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}

08005d9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005d9a:	b580      	push	{r7, lr}
 8005d9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005d9e:	46c0      	nop			@ (mov r8, r8)
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}

08005da4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005da8:	f000 f8e4 	bl	8005f74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005dac:	46c0      	nop			@ (mov r8, r8)
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}
	...

08005db4 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8005db8:	4b05      	ldr	r3, [pc, #20]	@ (8005dd0 <RTC_TAMP_IRQHandler+0x1c>)
 8005dba:	0018      	movs	r0, r3
 8005dbc:	f002 fb66 	bl	800848c <HAL_RTC_AlarmIRQHandler>
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8005dc0:	4b03      	ldr	r3, [pc, #12]	@ (8005dd0 <RTC_TAMP_IRQHandler+0x1c>)
 8005dc2:	0018      	movs	r0, r3
 8005dc4:	f002 fbe5 	bl	8008592 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 8005dc8:	46c0      	nop			@ (mov r8, r8)
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	46c0      	nop			@ (mov r8, r8)
 8005dd0:	20001280 	.word	0x20001280

08005dd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b086      	sub	sp, #24
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005ddc:	4a14      	ldr	r2, [pc, #80]	@ (8005e30 <_sbrk+0x5c>)
 8005dde:	4b15      	ldr	r3, [pc, #84]	@ (8005e34 <_sbrk+0x60>)
 8005de0:	1ad3      	subs	r3, r2, r3
 8005de2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005de8:	4b13      	ldr	r3, [pc, #76]	@ (8005e38 <_sbrk+0x64>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d102      	bne.n	8005df6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005df0:	4b11      	ldr	r3, [pc, #68]	@ (8005e38 <_sbrk+0x64>)
 8005df2:	4a12      	ldr	r2, [pc, #72]	@ (8005e3c <_sbrk+0x68>)
 8005df4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005df6:	4b10      	ldr	r3, [pc, #64]	@ (8005e38 <_sbrk+0x64>)
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	18d3      	adds	r3, r2, r3
 8005dfe:	693a      	ldr	r2, [r7, #16]
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d207      	bcs.n	8005e14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005e04:	f004 ff70 	bl	800ace8 <__errno>
 8005e08:	0003      	movs	r3, r0
 8005e0a:	220c      	movs	r2, #12
 8005e0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	425b      	negs	r3, r3
 8005e12:	e009      	b.n	8005e28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005e14:	4b08      	ldr	r3, [pc, #32]	@ (8005e38 <_sbrk+0x64>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005e1a:	4b07      	ldr	r3, [pc, #28]	@ (8005e38 <_sbrk+0x64>)
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	18d2      	adds	r2, r2, r3
 8005e22:	4b05      	ldr	r3, [pc, #20]	@ (8005e38 <_sbrk+0x64>)
 8005e24:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8005e26:	68fb      	ldr	r3, [r7, #12]
}
 8005e28:	0018      	movs	r0, r3
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	b006      	add	sp, #24
 8005e2e:	bd80      	pop	{r7, pc}
 8005e30:	20024000 	.word	0x20024000
 8005e34:	00000400 	.word	0x00000400
 8005e38:	20001484 	.word	0x20001484
 8005e3c:	200015d8 	.word	0x200015d8

08005e40 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005e44:	46c0      	nop			@ (mov r8, r8)
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}
	...

08005e4c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005e4c:	480d      	ldr	r0, [pc, #52]	@ (8005e84 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005e4e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8005e50:	f7ff fff6 	bl	8005e40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005e54:	480c      	ldr	r0, [pc, #48]	@ (8005e88 <LoopForever+0x6>)
  ldr r1, =_edata
 8005e56:	490d      	ldr	r1, [pc, #52]	@ (8005e8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8005e58:	4a0d      	ldr	r2, [pc, #52]	@ (8005e90 <LoopForever+0xe>)
  movs r3, #0
 8005e5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005e5c:	e002      	b.n	8005e64 <LoopCopyDataInit>

08005e5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005e5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005e60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005e62:	3304      	adds	r3, #4

08005e64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005e64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005e66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005e68:	d3f9      	bcc.n	8005e5e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005e6a:	4a0a      	ldr	r2, [pc, #40]	@ (8005e94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005e6c:	4c0a      	ldr	r4, [pc, #40]	@ (8005e98 <LoopForever+0x16>)
  movs r3, #0
 8005e6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005e70:	e001      	b.n	8005e76 <LoopFillZerobss>

08005e72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005e72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005e74:	3204      	adds	r2, #4

08005e76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005e76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005e78:	d3fb      	bcc.n	8005e72 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8005e7a:	f004 ff3b 	bl	800acf4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8005e7e:	f7fe f841 	bl	8003f04 <main>

08005e82 <LoopForever>:

LoopForever:
  b LoopForever
 8005e82:	e7fe      	b.n	8005e82 <LoopForever>
  ldr   r0, =_estack
 8005e84:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8005e88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005e8c:	20000ef0 	.word	0x20000ef0
  ldr r2, =_sidata
 8005e90:	0800c308 	.word	0x0800c308
  ldr r2, =_sbss
 8005e94:	20000ef0 	.word	0x20000ef0
  ldr r4, =_ebss
 8005e98:	200015d4 	.word	0x200015d4

08005e9c <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005e9c:	e7fe      	b.n	8005e9c <ADC1_COMP_IRQHandler>
	...

08005ea0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b082      	sub	sp, #8
 8005ea4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005ea6:	1dfb      	adds	r3, r7, #7
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005eac:	4b0b      	ldr	r3, [pc, #44]	@ (8005edc <HAL_Init+0x3c>)
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	4b0a      	ldr	r3, [pc, #40]	@ (8005edc <HAL_Init+0x3c>)
 8005eb2:	2180      	movs	r1, #128	@ 0x80
 8005eb4:	0049      	lsls	r1, r1, #1
 8005eb6:	430a      	orrs	r2, r1
 8005eb8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005eba:	2003      	movs	r0, #3
 8005ebc:	f000 f810 	bl	8005ee0 <HAL_InitTick>
 8005ec0:	1e03      	subs	r3, r0, #0
 8005ec2:	d003      	beq.n	8005ecc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8005ec4:	1dfb      	adds	r3, r7, #7
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	701a      	strb	r2, [r3, #0]
 8005eca:	e001      	b.n	8005ed0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8005ecc:	f7ff fd4a 	bl	8005964 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005ed0:	1dfb      	adds	r3, r7, #7
 8005ed2:	781b      	ldrb	r3, [r3, #0]
}
 8005ed4:	0018      	movs	r0, r3
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	b002      	add	sp, #8
 8005eda:	bd80      	pop	{r7, pc}
 8005edc:	40022000 	.word	0x40022000

08005ee0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005ee0:	b590      	push	{r4, r7, lr}
 8005ee2:	b085      	sub	sp, #20
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005ee8:	230f      	movs	r3, #15
 8005eea:	18fb      	adds	r3, r7, r3
 8005eec:	2200      	movs	r2, #0
 8005eee:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8005ef0:	4b1d      	ldr	r3, [pc, #116]	@ (8005f68 <HAL_InitTick+0x88>)
 8005ef2:	781b      	ldrb	r3, [r3, #0]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d02b      	beq.n	8005f50 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8005ef8:	4b1c      	ldr	r3, [pc, #112]	@ (8005f6c <HAL_InitTick+0x8c>)
 8005efa:	681c      	ldr	r4, [r3, #0]
 8005efc:	4b1a      	ldr	r3, [pc, #104]	@ (8005f68 <HAL_InitTick+0x88>)
 8005efe:	781b      	ldrb	r3, [r3, #0]
 8005f00:	0019      	movs	r1, r3
 8005f02:	23fa      	movs	r3, #250	@ 0xfa
 8005f04:	0098      	lsls	r0, r3, #2
 8005f06:	f7fa f911 	bl	800012c <__udivsi3>
 8005f0a:	0003      	movs	r3, r0
 8005f0c:	0019      	movs	r1, r3
 8005f0e:	0020      	movs	r0, r4
 8005f10:	f7fa f90c 	bl	800012c <__udivsi3>
 8005f14:	0003      	movs	r3, r0
 8005f16:	0018      	movs	r0, r3
 8005f18:	f000 f929 	bl	800616e <HAL_SYSTICK_Config>
 8005f1c:	1e03      	subs	r3, r0, #0
 8005f1e:	d112      	bne.n	8005f46 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2b03      	cmp	r3, #3
 8005f24:	d80a      	bhi.n	8005f3c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005f26:	6879      	ldr	r1, [r7, #4]
 8005f28:	2301      	movs	r3, #1
 8005f2a:	425b      	negs	r3, r3
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	0018      	movs	r0, r3
 8005f30:	f000 f908 	bl	8006144 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005f34:	4b0e      	ldr	r3, [pc, #56]	@ (8005f70 <HAL_InitTick+0x90>)
 8005f36:	687a      	ldr	r2, [r7, #4]
 8005f38:	601a      	str	r2, [r3, #0]
 8005f3a:	e00d      	b.n	8005f58 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8005f3c:	230f      	movs	r3, #15
 8005f3e:	18fb      	adds	r3, r7, r3
 8005f40:	2201      	movs	r2, #1
 8005f42:	701a      	strb	r2, [r3, #0]
 8005f44:	e008      	b.n	8005f58 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005f46:	230f      	movs	r3, #15
 8005f48:	18fb      	adds	r3, r7, r3
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	701a      	strb	r2, [r3, #0]
 8005f4e:	e003      	b.n	8005f58 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005f50:	230f      	movs	r3, #15
 8005f52:	18fb      	adds	r3, r7, r3
 8005f54:	2201      	movs	r2, #1
 8005f56:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8005f58:	230f      	movs	r3, #15
 8005f5a:	18fb      	adds	r3, r7, r3
 8005f5c:	781b      	ldrb	r3, [r3, #0]
}
 8005f5e:	0018      	movs	r0, r3
 8005f60:	46bd      	mov	sp, r7
 8005f62:	b005      	add	sp, #20
 8005f64:	bd90      	pop	{r4, r7, pc}
 8005f66:	46c0      	nop			@ (mov r8, r8)
 8005f68:	20000e8c 	.word	0x20000e8c
 8005f6c:	20000e84 	.word	0x20000e84
 8005f70:	20000e88 	.word	0x20000e88

08005f74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005f78:	4b05      	ldr	r3, [pc, #20]	@ (8005f90 <HAL_IncTick+0x1c>)
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	001a      	movs	r2, r3
 8005f7e:	4b05      	ldr	r3, [pc, #20]	@ (8005f94 <HAL_IncTick+0x20>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	18d2      	adds	r2, r2, r3
 8005f84:	4b03      	ldr	r3, [pc, #12]	@ (8005f94 <HAL_IncTick+0x20>)
 8005f86:	601a      	str	r2, [r3, #0]
}
 8005f88:	46c0      	nop			@ (mov r8, r8)
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}
 8005f8e:	46c0      	nop			@ (mov r8, r8)
 8005f90:	20000e8c 	.word	0x20000e8c
 8005f94:	20001488 	.word	0x20001488

08005f98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	af00      	add	r7, sp, #0
  return uwTick;
 8005f9c:	4b02      	ldr	r3, [pc, #8]	@ (8005fa8 <HAL_GetTick+0x10>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
}
 8005fa0:	0018      	movs	r0, r3
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
 8005fa6:	46c0      	nop			@ (mov r8, r8)
 8005fa8:	20001488 	.word	0x20001488

08005fac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b084      	sub	sp, #16
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005fb4:	f7ff fff0 	bl	8005f98 <HAL_GetTick>
 8005fb8:	0003      	movs	r3, r0
 8005fba:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	3301      	adds	r3, #1
 8005fc4:	d005      	beq.n	8005fd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005fc6:	4b0a      	ldr	r3, [pc, #40]	@ (8005ff0 <HAL_Delay+0x44>)
 8005fc8:	781b      	ldrb	r3, [r3, #0]
 8005fca:	001a      	movs	r2, r3
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	189b      	adds	r3, r3, r2
 8005fd0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005fd2:	46c0      	nop			@ (mov r8, r8)
 8005fd4:	f7ff ffe0 	bl	8005f98 <HAL_GetTick>
 8005fd8:	0002      	movs	r2, r0
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	1ad3      	subs	r3, r2, r3
 8005fde:	68fa      	ldr	r2, [r7, #12]
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d8f7      	bhi.n	8005fd4 <HAL_Delay+0x28>
  {
  }
}
 8005fe4:	46c0      	nop			@ (mov r8, r8)
 8005fe6:	46c0      	nop			@ (mov r8, r8)
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	b004      	add	sp, #16
 8005fec:	bd80      	pop	{r7, pc}
 8005fee:	46c0      	nop			@ (mov r8, r8)
 8005ff0:	20000e8c 	.word	0x20000e8c

08005ff4 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b082      	sub	sp, #8
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8005ffc:	4b06      	ldr	r3, [pc, #24]	@ (8006018 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a06      	ldr	r2, [pc, #24]	@ (800601c <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8006002:	4013      	ands	r3, r2
 8006004:	0019      	movs	r1, r3
 8006006:	4b04      	ldr	r3, [pc, #16]	@ (8006018 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	430a      	orrs	r2, r1
 800600c:	601a      	str	r2, [r3, #0]
}
 800600e:	46c0      	nop			@ (mov r8, r8)
 8006010:	46bd      	mov	sp, r7
 8006012:	b002      	add	sp, #8
 8006014:	bd80      	pop	{r7, pc}
 8006016:	46c0      	nop			@ (mov r8, r8)
 8006018:	40010000 	.word	0x40010000
 800601c:	fffff9ff 	.word	0xfffff9ff

08006020 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006020:	b590      	push	{r4, r7, lr}
 8006022:	b083      	sub	sp, #12
 8006024:	af00      	add	r7, sp, #0
 8006026:	0002      	movs	r2, r0
 8006028:	6039      	str	r1, [r7, #0]
 800602a:	1dfb      	adds	r3, r7, #7
 800602c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800602e:	1dfb      	adds	r3, r7, #7
 8006030:	781b      	ldrb	r3, [r3, #0]
 8006032:	2b7f      	cmp	r3, #127	@ 0x7f
 8006034:	d828      	bhi.n	8006088 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006036:	4a2f      	ldr	r2, [pc, #188]	@ (80060f4 <__NVIC_SetPriority+0xd4>)
 8006038:	1dfb      	adds	r3, r7, #7
 800603a:	781b      	ldrb	r3, [r3, #0]
 800603c:	b25b      	sxtb	r3, r3
 800603e:	089b      	lsrs	r3, r3, #2
 8006040:	33c0      	adds	r3, #192	@ 0xc0
 8006042:	009b      	lsls	r3, r3, #2
 8006044:	589b      	ldr	r3, [r3, r2]
 8006046:	1dfa      	adds	r2, r7, #7
 8006048:	7812      	ldrb	r2, [r2, #0]
 800604a:	0011      	movs	r1, r2
 800604c:	2203      	movs	r2, #3
 800604e:	400a      	ands	r2, r1
 8006050:	00d2      	lsls	r2, r2, #3
 8006052:	21ff      	movs	r1, #255	@ 0xff
 8006054:	4091      	lsls	r1, r2
 8006056:	000a      	movs	r2, r1
 8006058:	43d2      	mvns	r2, r2
 800605a:	401a      	ands	r2, r3
 800605c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	019b      	lsls	r3, r3, #6
 8006062:	22ff      	movs	r2, #255	@ 0xff
 8006064:	401a      	ands	r2, r3
 8006066:	1dfb      	adds	r3, r7, #7
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	0018      	movs	r0, r3
 800606c:	2303      	movs	r3, #3
 800606e:	4003      	ands	r3, r0
 8006070:	00db      	lsls	r3, r3, #3
 8006072:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006074:	481f      	ldr	r0, [pc, #124]	@ (80060f4 <__NVIC_SetPriority+0xd4>)
 8006076:	1dfb      	adds	r3, r7, #7
 8006078:	781b      	ldrb	r3, [r3, #0]
 800607a:	b25b      	sxtb	r3, r3
 800607c:	089b      	lsrs	r3, r3, #2
 800607e:	430a      	orrs	r2, r1
 8006080:	33c0      	adds	r3, #192	@ 0xc0
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8006086:	e031      	b.n	80060ec <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006088:	4a1b      	ldr	r2, [pc, #108]	@ (80060f8 <__NVIC_SetPriority+0xd8>)
 800608a:	1dfb      	adds	r3, r7, #7
 800608c:	781b      	ldrb	r3, [r3, #0]
 800608e:	0019      	movs	r1, r3
 8006090:	230f      	movs	r3, #15
 8006092:	400b      	ands	r3, r1
 8006094:	3b08      	subs	r3, #8
 8006096:	089b      	lsrs	r3, r3, #2
 8006098:	3306      	adds	r3, #6
 800609a:	009b      	lsls	r3, r3, #2
 800609c:	18d3      	adds	r3, r2, r3
 800609e:	3304      	adds	r3, #4
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	1dfa      	adds	r2, r7, #7
 80060a4:	7812      	ldrb	r2, [r2, #0]
 80060a6:	0011      	movs	r1, r2
 80060a8:	2203      	movs	r2, #3
 80060aa:	400a      	ands	r2, r1
 80060ac:	00d2      	lsls	r2, r2, #3
 80060ae:	21ff      	movs	r1, #255	@ 0xff
 80060b0:	4091      	lsls	r1, r2
 80060b2:	000a      	movs	r2, r1
 80060b4:	43d2      	mvns	r2, r2
 80060b6:	401a      	ands	r2, r3
 80060b8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	019b      	lsls	r3, r3, #6
 80060be:	22ff      	movs	r2, #255	@ 0xff
 80060c0:	401a      	ands	r2, r3
 80060c2:	1dfb      	adds	r3, r7, #7
 80060c4:	781b      	ldrb	r3, [r3, #0]
 80060c6:	0018      	movs	r0, r3
 80060c8:	2303      	movs	r3, #3
 80060ca:	4003      	ands	r3, r0
 80060cc:	00db      	lsls	r3, r3, #3
 80060ce:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80060d0:	4809      	ldr	r0, [pc, #36]	@ (80060f8 <__NVIC_SetPriority+0xd8>)
 80060d2:	1dfb      	adds	r3, r7, #7
 80060d4:	781b      	ldrb	r3, [r3, #0]
 80060d6:	001c      	movs	r4, r3
 80060d8:	230f      	movs	r3, #15
 80060da:	4023      	ands	r3, r4
 80060dc:	3b08      	subs	r3, #8
 80060de:	089b      	lsrs	r3, r3, #2
 80060e0:	430a      	orrs	r2, r1
 80060e2:	3306      	adds	r3, #6
 80060e4:	009b      	lsls	r3, r3, #2
 80060e6:	18c3      	adds	r3, r0, r3
 80060e8:	3304      	adds	r3, #4
 80060ea:	601a      	str	r2, [r3, #0]
}
 80060ec:	46c0      	nop			@ (mov r8, r8)
 80060ee:	46bd      	mov	sp, r7
 80060f0:	b003      	add	sp, #12
 80060f2:	bd90      	pop	{r4, r7, pc}
 80060f4:	e000e100 	.word	0xe000e100
 80060f8:	e000ed00 	.word	0xe000ed00

080060fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b082      	sub	sp, #8
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	1e5a      	subs	r2, r3, #1
 8006108:	2380      	movs	r3, #128	@ 0x80
 800610a:	045b      	lsls	r3, r3, #17
 800610c:	429a      	cmp	r2, r3
 800610e:	d301      	bcc.n	8006114 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006110:	2301      	movs	r3, #1
 8006112:	e010      	b.n	8006136 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006114:	4b0a      	ldr	r3, [pc, #40]	@ (8006140 <SysTick_Config+0x44>)
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	3a01      	subs	r2, #1
 800611a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800611c:	2301      	movs	r3, #1
 800611e:	425b      	negs	r3, r3
 8006120:	2103      	movs	r1, #3
 8006122:	0018      	movs	r0, r3
 8006124:	f7ff ff7c 	bl	8006020 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006128:	4b05      	ldr	r3, [pc, #20]	@ (8006140 <SysTick_Config+0x44>)
 800612a:	2200      	movs	r2, #0
 800612c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800612e:	4b04      	ldr	r3, [pc, #16]	@ (8006140 <SysTick_Config+0x44>)
 8006130:	2207      	movs	r2, #7
 8006132:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006134:	2300      	movs	r3, #0
}
 8006136:	0018      	movs	r0, r3
 8006138:	46bd      	mov	sp, r7
 800613a:	b002      	add	sp, #8
 800613c:	bd80      	pop	{r7, pc}
 800613e:	46c0      	nop			@ (mov r8, r8)
 8006140:	e000e010 	.word	0xe000e010

08006144 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b084      	sub	sp, #16
 8006148:	af00      	add	r7, sp, #0
 800614a:	60b9      	str	r1, [r7, #8]
 800614c:	607a      	str	r2, [r7, #4]
 800614e:	210f      	movs	r1, #15
 8006150:	187b      	adds	r3, r7, r1
 8006152:	1c02      	adds	r2, r0, #0
 8006154:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8006156:	68ba      	ldr	r2, [r7, #8]
 8006158:	187b      	adds	r3, r7, r1
 800615a:	781b      	ldrb	r3, [r3, #0]
 800615c:	b25b      	sxtb	r3, r3
 800615e:	0011      	movs	r1, r2
 8006160:	0018      	movs	r0, r3
 8006162:	f7ff ff5d 	bl	8006020 <__NVIC_SetPriority>
}
 8006166:	46c0      	nop			@ (mov r8, r8)
 8006168:	46bd      	mov	sp, r7
 800616a:	b004      	add	sp, #16
 800616c:	bd80      	pop	{r7, pc}

0800616e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800616e:	b580      	push	{r7, lr}
 8006170:	b082      	sub	sp, #8
 8006172:	af00      	add	r7, sp, #0
 8006174:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	0018      	movs	r0, r3
 800617a:	f7ff ffbf 	bl	80060fc <SysTick_Config>
 800617e:	0003      	movs	r3, r0
}
 8006180:	0018      	movs	r0, r3
 8006182:	46bd      	mov	sp, r7
 8006184:	b002      	add	sp, #8
 8006186:	bd80      	pop	{r7, pc}

08006188 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b086      	sub	sp, #24
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006192:	2300      	movs	r3, #0
 8006194:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006196:	e14d      	b.n	8006434 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	2101      	movs	r1, #1
 800619e:	697a      	ldr	r2, [r7, #20]
 80061a0:	4091      	lsls	r1, r2
 80061a2:	000a      	movs	r2, r1
 80061a4:	4013      	ands	r3, r2
 80061a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d100      	bne.n	80061b0 <HAL_GPIO_Init+0x28>
 80061ae:	e13e      	b.n	800642e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	2203      	movs	r2, #3
 80061b6:	4013      	ands	r3, r2
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d005      	beq.n	80061c8 <HAL_GPIO_Init+0x40>
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	2203      	movs	r2, #3
 80061c2:	4013      	ands	r3, r2
 80061c4:	2b02      	cmp	r3, #2
 80061c6:	d130      	bne.n	800622a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	689b      	ldr	r3, [r3, #8]
 80061cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	005b      	lsls	r3, r3, #1
 80061d2:	2203      	movs	r2, #3
 80061d4:	409a      	lsls	r2, r3
 80061d6:	0013      	movs	r3, r2
 80061d8:	43da      	mvns	r2, r3
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	4013      	ands	r3, r2
 80061de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	68da      	ldr	r2, [r3, #12]
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	005b      	lsls	r3, r3, #1
 80061e8:	409a      	lsls	r2, r3
 80061ea:	0013      	movs	r3, r2
 80061ec:	693a      	ldr	r2, [r7, #16]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	693a      	ldr	r2, [r7, #16]
 80061f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80061fe:	2201      	movs	r2, #1
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	409a      	lsls	r2, r3
 8006204:	0013      	movs	r3, r2
 8006206:	43da      	mvns	r2, r3
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	4013      	ands	r3, r2
 800620c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	091b      	lsrs	r3, r3, #4
 8006214:	2201      	movs	r2, #1
 8006216:	401a      	ands	r2, r3
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	409a      	lsls	r2, r3
 800621c:	0013      	movs	r3, r2
 800621e:	693a      	ldr	r2, [r7, #16]
 8006220:	4313      	orrs	r3, r2
 8006222:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	693a      	ldr	r2, [r7, #16]
 8006228:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	2203      	movs	r2, #3
 8006230:	4013      	ands	r3, r2
 8006232:	2b03      	cmp	r3, #3
 8006234:	d017      	beq.n	8006266 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	68db      	ldr	r3, [r3, #12]
 800623a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	005b      	lsls	r3, r3, #1
 8006240:	2203      	movs	r2, #3
 8006242:	409a      	lsls	r2, r3
 8006244:	0013      	movs	r3, r2
 8006246:	43da      	mvns	r2, r3
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	4013      	ands	r3, r2
 800624c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	689a      	ldr	r2, [r3, #8]
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	005b      	lsls	r3, r3, #1
 8006256:	409a      	lsls	r2, r3
 8006258:	0013      	movs	r3, r2
 800625a:	693a      	ldr	r2, [r7, #16]
 800625c:	4313      	orrs	r3, r2
 800625e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	693a      	ldr	r2, [r7, #16]
 8006264:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	2203      	movs	r2, #3
 800626c:	4013      	ands	r3, r2
 800626e:	2b02      	cmp	r3, #2
 8006270:	d123      	bne.n	80062ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	08da      	lsrs	r2, r3, #3
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	3208      	adds	r2, #8
 800627a:	0092      	lsls	r2, r2, #2
 800627c:	58d3      	ldr	r3, [r2, r3]
 800627e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	2207      	movs	r2, #7
 8006284:	4013      	ands	r3, r2
 8006286:	009b      	lsls	r3, r3, #2
 8006288:	220f      	movs	r2, #15
 800628a:	409a      	lsls	r2, r3
 800628c:	0013      	movs	r3, r2
 800628e:	43da      	mvns	r2, r3
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	4013      	ands	r3, r2
 8006294:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	691a      	ldr	r2, [r3, #16]
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	2107      	movs	r1, #7
 800629e:	400b      	ands	r3, r1
 80062a0:	009b      	lsls	r3, r3, #2
 80062a2:	409a      	lsls	r2, r3
 80062a4:	0013      	movs	r3, r2
 80062a6:	693a      	ldr	r2, [r7, #16]
 80062a8:	4313      	orrs	r3, r2
 80062aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	08da      	lsrs	r2, r3, #3
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	3208      	adds	r2, #8
 80062b4:	0092      	lsls	r2, r2, #2
 80062b6:	6939      	ldr	r1, [r7, #16]
 80062b8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	005b      	lsls	r3, r3, #1
 80062c4:	2203      	movs	r2, #3
 80062c6:	409a      	lsls	r2, r3
 80062c8:	0013      	movs	r3, r2
 80062ca:	43da      	mvns	r2, r3
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	4013      	ands	r3, r2
 80062d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	2203      	movs	r2, #3
 80062d8:	401a      	ands	r2, r3
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	005b      	lsls	r3, r3, #1
 80062de:	409a      	lsls	r2, r3
 80062e0:	0013      	movs	r3, r2
 80062e2:	693a      	ldr	r2, [r7, #16]
 80062e4:	4313      	orrs	r3, r2
 80062e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	693a      	ldr	r2, [r7, #16]
 80062ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	685a      	ldr	r2, [r3, #4]
 80062f2:	23c0      	movs	r3, #192	@ 0xc0
 80062f4:	029b      	lsls	r3, r3, #10
 80062f6:	4013      	ands	r3, r2
 80062f8:	d100      	bne.n	80062fc <HAL_GPIO_Init+0x174>
 80062fa:	e098      	b.n	800642e <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80062fc:	4a53      	ldr	r2, [pc, #332]	@ (800644c <HAL_GPIO_Init+0x2c4>)
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	089b      	lsrs	r3, r3, #2
 8006302:	3318      	adds	r3, #24
 8006304:	009b      	lsls	r3, r3, #2
 8006306:	589b      	ldr	r3, [r3, r2]
 8006308:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	2203      	movs	r2, #3
 800630e:	4013      	ands	r3, r2
 8006310:	00db      	lsls	r3, r3, #3
 8006312:	220f      	movs	r2, #15
 8006314:	409a      	lsls	r2, r3
 8006316:	0013      	movs	r3, r2
 8006318:	43da      	mvns	r2, r3
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	4013      	ands	r3, r2
 800631e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	23a0      	movs	r3, #160	@ 0xa0
 8006324:	05db      	lsls	r3, r3, #23
 8006326:	429a      	cmp	r2, r3
 8006328:	d019      	beq.n	800635e <HAL_GPIO_Init+0x1d6>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	4a48      	ldr	r2, [pc, #288]	@ (8006450 <HAL_GPIO_Init+0x2c8>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d013      	beq.n	800635a <HAL_GPIO_Init+0x1d2>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	4a47      	ldr	r2, [pc, #284]	@ (8006454 <HAL_GPIO_Init+0x2cc>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d00d      	beq.n	8006356 <HAL_GPIO_Init+0x1ce>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	4a46      	ldr	r2, [pc, #280]	@ (8006458 <HAL_GPIO_Init+0x2d0>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d007      	beq.n	8006352 <HAL_GPIO_Init+0x1ca>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	4a45      	ldr	r2, [pc, #276]	@ (800645c <HAL_GPIO_Init+0x2d4>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d101      	bne.n	800634e <HAL_GPIO_Init+0x1c6>
 800634a:	2304      	movs	r3, #4
 800634c:	e008      	b.n	8006360 <HAL_GPIO_Init+0x1d8>
 800634e:	2305      	movs	r3, #5
 8006350:	e006      	b.n	8006360 <HAL_GPIO_Init+0x1d8>
 8006352:	2303      	movs	r3, #3
 8006354:	e004      	b.n	8006360 <HAL_GPIO_Init+0x1d8>
 8006356:	2302      	movs	r3, #2
 8006358:	e002      	b.n	8006360 <HAL_GPIO_Init+0x1d8>
 800635a:	2301      	movs	r3, #1
 800635c:	e000      	b.n	8006360 <HAL_GPIO_Init+0x1d8>
 800635e:	2300      	movs	r3, #0
 8006360:	697a      	ldr	r2, [r7, #20]
 8006362:	2103      	movs	r1, #3
 8006364:	400a      	ands	r2, r1
 8006366:	00d2      	lsls	r2, r2, #3
 8006368:	4093      	lsls	r3, r2
 800636a:	693a      	ldr	r2, [r7, #16]
 800636c:	4313      	orrs	r3, r2
 800636e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8006370:	4936      	ldr	r1, [pc, #216]	@ (800644c <HAL_GPIO_Init+0x2c4>)
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	089b      	lsrs	r3, r3, #2
 8006376:	3318      	adds	r3, #24
 8006378:	009b      	lsls	r3, r3, #2
 800637a:	693a      	ldr	r2, [r7, #16]
 800637c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800637e:	4b33      	ldr	r3, [pc, #204]	@ (800644c <HAL_GPIO_Init+0x2c4>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	43da      	mvns	r2, r3
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	4013      	ands	r3, r2
 800638c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	685a      	ldr	r2, [r3, #4]
 8006392:	2380      	movs	r3, #128	@ 0x80
 8006394:	035b      	lsls	r3, r3, #13
 8006396:	4013      	ands	r3, r2
 8006398:	d003      	beq.n	80063a2 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800639a:	693a      	ldr	r2, [r7, #16]
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	4313      	orrs	r3, r2
 80063a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80063a2:	4b2a      	ldr	r3, [pc, #168]	@ (800644c <HAL_GPIO_Init+0x2c4>)
 80063a4:	693a      	ldr	r2, [r7, #16]
 80063a6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80063a8:	4b28      	ldr	r3, [pc, #160]	@ (800644c <HAL_GPIO_Init+0x2c4>)
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	43da      	mvns	r2, r3
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	4013      	ands	r3, r2
 80063b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	685a      	ldr	r2, [r3, #4]
 80063bc:	2380      	movs	r3, #128	@ 0x80
 80063be:	039b      	lsls	r3, r3, #14
 80063c0:	4013      	ands	r3, r2
 80063c2:	d003      	beq.n	80063cc <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80063c4:	693a      	ldr	r2, [r7, #16]
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	4313      	orrs	r3, r2
 80063ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80063cc:	4b1f      	ldr	r3, [pc, #124]	@ (800644c <HAL_GPIO_Init+0x2c4>)
 80063ce:	693a      	ldr	r2, [r7, #16]
 80063d0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80063d2:	4a1e      	ldr	r2, [pc, #120]	@ (800644c <HAL_GPIO_Init+0x2c4>)
 80063d4:	2384      	movs	r3, #132	@ 0x84
 80063d6:	58d3      	ldr	r3, [r2, r3]
 80063d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	43da      	mvns	r2, r3
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	4013      	ands	r3, r2
 80063e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	685a      	ldr	r2, [r3, #4]
 80063e8:	2380      	movs	r3, #128	@ 0x80
 80063ea:	029b      	lsls	r3, r3, #10
 80063ec:	4013      	ands	r3, r2
 80063ee:	d003      	beq.n	80063f8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80063f0:	693a      	ldr	r2, [r7, #16]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	4313      	orrs	r3, r2
 80063f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80063f8:	4914      	ldr	r1, [pc, #80]	@ (800644c <HAL_GPIO_Init+0x2c4>)
 80063fa:	2284      	movs	r2, #132	@ 0x84
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8006400:	4a12      	ldr	r2, [pc, #72]	@ (800644c <HAL_GPIO_Init+0x2c4>)
 8006402:	2380      	movs	r3, #128	@ 0x80
 8006404:	58d3      	ldr	r3, [r2, r3]
 8006406:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	43da      	mvns	r2, r3
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	4013      	ands	r3, r2
 8006410:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	685a      	ldr	r2, [r3, #4]
 8006416:	2380      	movs	r3, #128	@ 0x80
 8006418:	025b      	lsls	r3, r3, #9
 800641a:	4013      	ands	r3, r2
 800641c:	d003      	beq.n	8006426 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800641e:	693a      	ldr	r2, [r7, #16]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	4313      	orrs	r3, r2
 8006424:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006426:	4909      	ldr	r1, [pc, #36]	@ (800644c <HAL_GPIO_Init+0x2c4>)
 8006428:	2280      	movs	r2, #128	@ 0x80
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	3301      	adds	r3, #1
 8006432:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	681a      	ldr	r2, [r3, #0]
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	40da      	lsrs	r2, r3
 800643c:	1e13      	subs	r3, r2, #0
 800643e:	d000      	beq.n	8006442 <HAL_GPIO_Init+0x2ba>
 8006440:	e6aa      	b.n	8006198 <HAL_GPIO_Init+0x10>
  }
}
 8006442:	46c0      	nop			@ (mov r8, r8)
 8006444:	46c0      	nop			@ (mov r8, r8)
 8006446:	46bd      	mov	sp, r7
 8006448:	b006      	add	sp, #24
 800644a:	bd80      	pop	{r7, pc}
 800644c:	40021800 	.word	0x40021800
 8006450:	50000400 	.word	0x50000400
 8006454:	50000800 	.word	0x50000800
 8006458:	50000c00 	.word	0x50000c00
 800645c:	50001000 	.word	0x50001000

08006460 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b084      	sub	sp, #16
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	000a      	movs	r2, r1
 800646a:	1cbb      	adds	r3, r7, #2
 800646c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	691b      	ldr	r3, [r3, #16]
 8006472:	1cba      	adds	r2, r7, #2
 8006474:	8812      	ldrh	r2, [r2, #0]
 8006476:	4013      	ands	r3, r2
 8006478:	d004      	beq.n	8006484 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800647a:	230f      	movs	r3, #15
 800647c:	18fb      	adds	r3, r7, r3
 800647e:	2201      	movs	r2, #1
 8006480:	701a      	strb	r2, [r3, #0]
 8006482:	e003      	b.n	800648c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006484:	230f      	movs	r3, #15
 8006486:	18fb      	adds	r3, r7, r3
 8006488:	2200      	movs	r2, #0
 800648a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800648c:	230f      	movs	r3, #15
 800648e:	18fb      	adds	r3, r7, r3
 8006490:	781b      	ldrb	r3, [r3, #0]
}
 8006492:	0018      	movs	r0, r3
 8006494:	46bd      	mov	sp, r7
 8006496:	b004      	add	sp, #16
 8006498:	bd80      	pop	{r7, pc}

0800649a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800649a:	b580      	push	{r7, lr}
 800649c:	b082      	sub	sp, #8
 800649e:	af00      	add	r7, sp, #0
 80064a0:	6078      	str	r0, [r7, #4]
 80064a2:	0008      	movs	r0, r1
 80064a4:	0011      	movs	r1, r2
 80064a6:	1cbb      	adds	r3, r7, #2
 80064a8:	1c02      	adds	r2, r0, #0
 80064aa:	801a      	strh	r2, [r3, #0]
 80064ac:	1c7b      	adds	r3, r7, #1
 80064ae:	1c0a      	adds	r2, r1, #0
 80064b0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80064b2:	1c7b      	adds	r3, r7, #1
 80064b4:	781b      	ldrb	r3, [r3, #0]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d004      	beq.n	80064c4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80064ba:	1cbb      	adds	r3, r7, #2
 80064bc:	881a      	ldrh	r2, [r3, #0]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80064c2:	e003      	b.n	80064cc <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80064c4:	1cbb      	adds	r3, r7, #2
 80064c6:	881a      	ldrh	r2, [r3, #0]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80064cc:	46c0      	nop			@ (mov r8, r8)
 80064ce:	46bd      	mov	sp, r7
 80064d0:	b002      	add	sp, #8
 80064d2:	bd80      	pop	{r7, pc}

080064d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b082      	sub	sp, #8
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d101      	bne.n	80064e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80064e2:	2301      	movs	r3, #1
 80064e4:	e08f      	b.n	8006606 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2241      	movs	r2, #65	@ 0x41
 80064ea:	5c9b      	ldrb	r3, [r3, r2]
 80064ec:	b2db      	uxtb	r3, r3
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d107      	bne.n	8006502 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2240      	movs	r2, #64	@ 0x40
 80064f6:	2100      	movs	r1, #0
 80064f8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	0018      	movs	r0, r3
 80064fe:	f7ff fa59 	bl	80059b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2241      	movs	r2, #65	@ 0x41
 8006506:	2124      	movs	r1, #36	@ 0x24
 8006508:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	2101      	movs	r1, #1
 8006516:	438a      	bics	r2, r1
 8006518:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	685a      	ldr	r2, [r3, #4]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	493b      	ldr	r1, [pc, #236]	@ (8006610 <HAL_I2C_Init+0x13c>)
 8006524:	400a      	ands	r2, r1
 8006526:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	689a      	ldr	r2, [r3, #8]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4938      	ldr	r1, [pc, #224]	@ (8006614 <HAL_I2C_Init+0x140>)
 8006534:	400a      	ands	r2, r1
 8006536:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	68db      	ldr	r3, [r3, #12]
 800653c:	2b01      	cmp	r3, #1
 800653e:	d108      	bne.n	8006552 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	689a      	ldr	r2, [r3, #8]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	2180      	movs	r1, #128	@ 0x80
 800654a:	0209      	lsls	r1, r1, #8
 800654c:	430a      	orrs	r2, r1
 800654e:	609a      	str	r2, [r3, #8]
 8006550:	e007      	b.n	8006562 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	689a      	ldr	r2, [r3, #8]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	2184      	movs	r1, #132	@ 0x84
 800655c:	0209      	lsls	r1, r1, #8
 800655e:	430a      	orrs	r2, r1
 8006560:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	68db      	ldr	r3, [r3, #12]
 8006566:	2b02      	cmp	r3, #2
 8006568:	d109      	bne.n	800657e <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	685a      	ldr	r2, [r3, #4]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	2180      	movs	r1, #128	@ 0x80
 8006576:	0109      	lsls	r1, r1, #4
 8006578:	430a      	orrs	r2, r1
 800657a:	605a      	str	r2, [r3, #4]
 800657c:	e007      	b.n	800658e <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	685a      	ldr	r2, [r3, #4]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4923      	ldr	r1, [pc, #140]	@ (8006618 <HAL_I2C_Init+0x144>)
 800658a:	400a      	ands	r2, r1
 800658c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	685a      	ldr	r2, [r3, #4]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4920      	ldr	r1, [pc, #128]	@ (800661c <HAL_I2C_Init+0x148>)
 800659a:	430a      	orrs	r2, r1
 800659c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	68da      	ldr	r2, [r3, #12]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	491a      	ldr	r1, [pc, #104]	@ (8006614 <HAL_I2C_Init+0x140>)
 80065aa:	400a      	ands	r2, r1
 80065ac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	691a      	ldr	r2, [r3, #16]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	695b      	ldr	r3, [r3, #20]
 80065b6:	431a      	orrs	r2, r3
 80065b8:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	699b      	ldr	r3, [r3, #24]
 80065be:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	430a      	orrs	r2, r1
 80065c6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	69d9      	ldr	r1, [r3, #28]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6a1a      	ldr	r2, [r3, #32]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	430a      	orrs	r2, r1
 80065d6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	2101      	movs	r1, #1
 80065e4:	430a      	orrs	r2, r1
 80065e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2200      	movs	r2, #0
 80065ec:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2241      	movs	r2, #65	@ 0x41
 80065f2:	2120      	movs	r1, #32
 80065f4:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2200      	movs	r2, #0
 80065fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2242      	movs	r2, #66	@ 0x42
 8006600:	2100      	movs	r1, #0
 8006602:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006604:	2300      	movs	r3, #0
}
 8006606:	0018      	movs	r0, r3
 8006608:	46bd      	mov	sp, r7
 800660a:	b002      	add	sp, #8
 800660c:	bd80      	pop	{r7, pc}
 800660e:	46c0      	nop			@ (mov r8, r8)
 8006610:	f0ffffff 	.word	0xf0ffffff
 8006614:	ffff7fff 	.word	0xffff7fff
 8006618:	fffff7ff 	.word	0xfffff7ff
 800661c:	02008000 	.word	0x02008000

08006620 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006620:	b590      	push	{r4, r7, lr}
 8006622:	b089      	sub	sp, #36	@ 0x24
 8006624:	af02      	add	r7, sp, #8
 8006626:	60f8      	str	r0, [r7, #12]
 8006628:	0008      	movs	r0, r1
 800662a:	607a      	str	r2, [r7, #4]
 800662c:	0019      	movs	r1, r3
 800662e:	230a      	movs	r3, #10
 8006630:	18fb      	adds	r3, r7, r3
 8006632:	1c02      	adds	r2, r0, #0
 8006634:	801a      	strh	r2, [r3, #0]
 8006636:	2308      	movs	r3, #8
 8006638:	18fb      	adds	r3, r7, r3
 800663a:	1c0a      	adds	r2, r1, #0
 800663c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2241      	movs	r2, #65	@ 0x41
 8006642:	5c9b      	ldrb	r3, [r3, r2]
 8006644:	b2db      	uxtb	r3, r3
 8006646:	2b20      	cmp	r3, #32
 8006648:	d000      	beq.n	800664c <HAL_I2C_Master_Transmit+0x2c>
 800664a:	e10a      	b.n	8006862 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2240      	movs	r2, #64	@ 0x40
 8006650:	5c9b      	ldrb	r3, [r3, r2]
 8006652:	2b01      	cmp	r3, #1
 8006654:	d101      	bne.n	800665a <HAL_I2C_Master_Transmit+0x3a>
 8006656:	2302      	movs	r3, #2
 8006658:	e104      	b.n	8006864 <HAL_I2C_Master_Transmit+0x244>
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2240      	movs	r2, #64	@ 0x40
 800665e:	2101      	movs	r1, #1
 8006660:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006662:	f7ff fc99 	bl	8005f98 <HAL_GetTick>
 8006666:	0003      	movs	r3, r0
 8006668:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800666a:	2380      	movs	r3, #128	@ 0x80
 800666c:	0219      	lsls	r1, r3, #8
 800666e:	68f8      	ldr	r0, [r7, #12]
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	9300      	str	r3, [sp, #0]
 8006674:	2319      	movs	r3, #25
 8006676:	2201      	movs	r2, #1
 8006678:	f000 fa26 	bl	8006ac8 <I2C_WaitOnFlagUntilTimeout>
 800667c:	1e03      	subs	r3, r0, #0
 800667e:	d001      	beq.n	8006684 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8006680:	2301      	movs	r3, #1
 8006682:	e0ef      	b.n	8006864 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2241      	movs	r2, #65	@ 0x41
 8006688:	2121      	movs	r1, #33	@ 0x21
 800668a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2242      	movs	r2, #66	@ 0x42
 8006690:	2110      	movs	r1, #16
 8006692:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2200      	movs	r2, #0
 8006698:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	687a      	ldr	r2, [r7, #4]
 800669e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2208      	movs	r2, #8
 80066a4:	18ba      	adds	r2, r7, r2
 80066a6:	8812      	ldrh	r2, [r2, #0]
 80066a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2200      	movs	r2, #0
 80066ae:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	2bff      	cmp	r3, #255	@ 0xff
 80066b8:	d906      	bls.n	80066c8 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	22ff      	movs	r2, #255	@ 0xff
 80066be:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80066c0:	2380      	movs	r3, #128	@ 0x80
 80066c2:	045b      	lsls	r3, r3, #17
 80066c4:	617b      	str	r3, [r7, #20]
 80066c6:	e007      	b.n	80066d8 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066cc:	b29a      	uxth	r2, r3
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80066d2:	2380      	movs	r3, #128	@ 0x80
 80066d4:	049b      	lsls	r3, r3, #18
 80066d6:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d027      	beq.n	8006730 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066e4:	781a      	ldrb	r2, [r3, #0]
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066f0:	1c5a      	adds	r2, r3, #1
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	3b01      	subs	r3, #1
 80066fe:	b29a      	uxth	r2, r3
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006708:	3b01      	subs	r3, #1
 800670a:	b29a      	uxth	r2, r3
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006714:	b2db      	uxtb	r3, r3
 8006716:	3301      	adds	r3, #1
 8006718:	b2da      	uxtb	r2, r3
 800671a:	697c      	ldr	r4, [r7, #20]
 800671c:	230a      	movs	r3, #10
 800671e:	18fb      	adds	r3, r7, r3
 8006720:	8819      	ldrh	r1, [r3, #0]
 8006722:	68f8      	ldr	r0, [r7, #12]
 8006724:	4b51      	ldr	r3, [pc, #324]	@ (800686c <HAL_I2C_Master_Transmit+0x24c>)
 8006726:	9300      	str	r3, [sp, #0]
 8006728:	0023      	movs	r3, r4
 800672a:	f000 fc45 	bl	8006fb8 <I2C_TransferConfig>
 800672e:	e06f      	b.n	8006810 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006734:	b2da      	uxtb	r2, r3
 8006736:	697c      	ldr	r4, [r7, #20]
 8006738:	230a      	movs	r3, #10
 800673a:	18fb      	adds	r3, r7, r3
 800673c:	8819      	ldrh	r1, [r3, #0]
 800673e:	68f8      	ldr	r0, [r7, #12]
 8006740:	4b4a      	ldr	r3, [pc, #296]	@ (800686c <HAL_I2C_Master_Transmit+0x24c>)
 8006742:	9300      	str	r3, [sp, #0]
 8006744:	0023      	movs	r3, r4
 8006746:	f000 fc37 	bl	8006fb8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800674a:	e061      	b.n	8006810 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800674c:	693a      	ldr	r2, [r7, #16]
 800674e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	0018      	movs	r0, r3
 8006754:	f000 fa10 	bl	8006b78 <I2C_WaitOnTXISFlagUntilTimeout>
 8006758:	1e03      	subs	r3, r0, #0
 800675a:	d001      	beq.n	8006760 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 800675c:	2301      	movs	r3, #1
 800675e:	e081      	b.n	8006864 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006764:	781a      	ldrb	r2, [r3, #0]
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006770:	1c5a      	adds	r2, r3, #1
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800677a:	b29b      	uxth	r3, r3
 800677c:	3b01      	subs	r3, #1
 800677e:	b29a      	uxth	r2, r3
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006788:	3b01      	subs	r3, #1
 800678a:	b29a      	uxth	r2, r3
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006794:	b29b      	uxth	r3, r3
 8006796:	2b00      	cmp	r3, #0
 8006798:	d03a      	beq.n	8006810 <HAL_I2C_Master_Transmit+0x1f0>
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d136      	bne.n	8006810 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80067a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80067a4:	68f8      	ldr	r0, [r7, #12]
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	9300      	str	r3, [sp, #0]
 80067aa:	0013      	movs	r3, r2
 80067ac:	2200      	movs	r2, #0
 80067ae:	2180      	movs	r1, #128	@ 0x80
 80067b0:	f000 f98a 	bl	8006ac8 <I2C_WaitOnFlagUntilTimeout>
 80067b4:	1e03      	subs	r3, r0, #0
 80067b6:	d001      	beq.n	80067bc <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 80067b8:	2301      	movs	r3, #1
 80067ba:	e053      	b.n	8006864 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	2bff      	cmp	r3, #255	@ 0xff
 80067c4:	d911      	bls.n	80067ea <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	22ff      	movs	r2, #255	@ 0xff
 80067ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067d0:	b2da      	uxtb	r2, r3
 80067d2:	2380      	movs	r3, #128	@ 0x80
 80067d4:	045c      	lsls	r4, r3, #17
 80067d6:	230a      	movs	r3, #10
 80067d8:	18fb      	adds	r3, r7, r3
 80067da:	8819      	ldrh	r1, [r3, #0]
 80067dc:	68f8      	ldr	r0, [r7, #12]
 80067de:	2300      	movs	r3, #0
 80067e0:	9300      	str	r3, [sp, #0]
 80067e2:	0023      	movs	r3, r4
 80067e4:	f000 fbe8 	bl	8006fb8 <I2C_TransferConfig>
 80067e8:	e012      	b.n	8006810 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067ee:	b29a      	uxth	r2, r3
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067f8:	b2da      	uxtb	r2, r3
 80067fa:	2380      	movs	r3, #128	@ 0x80
 80067fc:	049c      	lsls	r4, r3, #18
 80067fe:	230a      	movs	r3, #10
 8006800:	18fb      	adds	r3, r7, r3
 8006802:	8819      	ldrh	r1, [r3, #0]
 8006804:	68f8      	ldr	r0, [r7, #12]
 8006806:	2300      	movs	r3, #0
 8006808:	9300      	str	r3, [sp, #0]
 800680a:	0023      	movs	r3, r4
 800680c:	f000 fbd4 	bl	8006fb8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006814:	b29b      	uxth	r3, r3
 8006816:	2b00      	cmp	r3, #0
 8006818:	d198      	bne.n	800674c <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800681a:	693a      	ldr	r2, [r7, #16]
 800681c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	0018      	movs	r0, r3
 8006822:	f000 f9ef 	bl	8006c04 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006826:	1e03      	subs	r3, r0, #0
 8006828:	d001      	beq.n	800682e <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 800682a:	2301      	movs	r3, #1
 800682c:	e01a      	b.n	8006864 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	2220      	movs	r2, #32
 8006834:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	685a      	ldr	r2, [r3, #4]
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	490b      	ldr	r1, [pc, #44]	@ (8006870 <HAL_I2C_Master_Transmit+0x250>)
 8006842:	400a      	ands	r2, r1
 8006844:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2241      	movs	r2, #65	@ 0x41
 800684a:	2120      	movs	r1, #32
 800684c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2242      	movs	r2, #66	@ 0x42
 8006852:	2100      	movs	r1, #0
 8006854:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2240      	movs	r2, #64	@ 0x40
 800685a:	2100      	movs	r1, #0
 800685c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800685e:	2300      	movs	r3, #0
 8006860:	e000      	b.n	8006864 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8006862:	2302      	movs	r3, #2
  }
}
 8006864:	0018      	movs	r0, r3
 8006866:	46bd      	mov	sp, r7
 8006868:	b007      	add	sp, #28
 800686a:	bd90      	pop	{r4, r7, pc}
 800686c:	80002000 	.word	0x80002000
 8006870:	fe00e800 	.word	0xfe00e800

08006874 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8006874:	b590      	push	{r4, r7, lr}
 8006876:	b089      	sub	sp, #36	@ 0x24
 8006878:	af02      	add	r7, sp, #8
 800687a:	60f8      	str	r0, [r7, #12]
 800687c:	0008      	movs	r0, r1
 800687e:	607a      	str	r2, [r7, #4]
 8006880:	0019      	movs	r1, r3
 8006882:	230a      	movs	r3, #10
 8006884:	18fb      	adds	r3, r7, r3
 8006886:	1c02      	adds	r2, r0, #0
 8006888:	801a      	strh	r2, [r3, #0]
 800688a:	2308      	movs	r3, #8
 800688c:	18fb      	adds	r3, r7, r3
 800688e:	1c0a      	adds	r2, r1, #0
 8006890:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2241      	movs	r2, #65	@ 0x41
 8006896:	5c9b      	ldrb	r3, [r3, r2]
 8006898:	b2db      	uxtb	r3, r3
 800689a:	2b20      	cmp	r3, #32
 800689c:	d000      	beq.n	80068a0 <HAL_I2C_Master_Receive+0x2c>
 800689e:	e0e8      	b.n	8006a72 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2240      	movs	r2, #64	@ 0x40
 80068a4:	5c9b      	ldrb	r3, [r3, r2]
 80068a6:	2b01      	cmp	r3, #1
 80068a8:	d101      	bne.n	80068ae <HAL_I2C_Master_Receive+0x3a>
 80068aa:	2302      	movs	r3, #2
 80068ac:	e0e2      	b.n	8006a74 <HAL_I2C_Master_Receive+0x200>
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2240      	movs	r2, #64	@ 0x40
 80068b2:	2101      	movs	r1, #1
 80068b4:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80068b6:	f7ff fb6f 	bl	8005f98 <HAL_GetTick>
 80068ba:	0003      	movs	r3, r0
 80068bc:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80068be:	2380      	movs	r3, #128	@ 0x80
 80068c0:	0219      	lsls	r1, r3, #8
 80068c2:	68f8      	ldr	r0, [r7, #12]
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	9300      	str	r3, [sp, #0]
 80068c8:	2319      	movs	r3, #25
 80068ca:	2201      	movs	r2, #1
 80068cc:	f000 f8fc 	bl	8006ac8 <I2C_WaitOnFlagUntilTimeout>
 80068d0:	1e03      	subs	r3, r0, #0
 80068d2:	d001      	beq.n	80068d8 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 80068d4:	2301      	movs	r3, #1
 80068d6:	e0cd      	b.n	8006a74 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2241      	movs	r2, #65	@ 0x41
 80068dc:	2122      	movs	r1, #34	@ 0x22
 80068de:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2242      	movs	r2, #66	@ 0x42
 80068e4:	2110      	movs	r1, #16
 80068e6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2200      	movs	r2, #0
 80068ec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	687a      	ldr	r2, [r7, #4]
 80068f2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2208      	movs	r2, #8
 80068f8:	18ba      	adds	r2, r7, r2
 80068fa:	8812      	ldrh	r2, [r2, #0]
 80068fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2200      	movs	r2, #0
 8006902:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006908:	b29b      	uxth	r3, r3
 800690a:	2bff      	cmp	r3, #255	@ 0xff
 800690c:	d911      	bls.n	8006932 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	22ff      	movs	r2, #255	@ 0xff
 8006912:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006918:	b2da      	uxtb	r2, r3
 800691a:	2380      	movs	r3, #128	@ 0x80
 800691c:	045c      	lsls	r4, r3, #17
 800691e:	230a      	movs	r3, #10
 8006920:	18fb      	adds	r3, r7, r3
 8006922:	8819      	ldrh	r1, [r3, #0]
 8006924:	68f8      	ldr	r0, [r7, #12]
 8006926:	4b55      	ldr	r3, [pc, #340]	@ (8006a7c <HAL_I2C_Master_Receive+0x208>)
 8006928:	9300      	str	r3, [sp, #0]
 800692a:	0023      	movs	r3, r4
 800692c:	f000 fb44 	bl	8006fb8 <I2C_TransferConfig>
 8006930:	e076      	b.n	8006a20 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006936:	b29a      	uxth	r2, r3
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006940:	b2da      	uxtb	r2, r3
 8006942:	2380      	movs	r3, #128	@ 0x80
 8006944:	049c      	lsls	r4, r3, #18
 8006946:	230a      	movs	r3, #10
 8006948:	18fb      	adds	r3, r7, r3
 800694a:	8819      	ldrh	r1, [r3, #0]
 800694c:	68f8      	ldr	r0, [r7, #12]
 800694e:	4b4b      	ldr	r3, [pc, #300]	@ (8006a7c <HAL_I2C_Master_Receive+0x208>)
 8006950:	9300      	str	r3, [sp, #0]
 8006952:	0023      	movs	r3, r4
 8006954:	f000 fb30 	bl	8006fb8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8006958:	e062      	b.n	8006a20 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800695a:	697a      	ldr	r2, [r7, #20]
 800695c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	0018      	movs	r0, r3
 8006962:	f000 f993 	bl	8006c8c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006966:	1e03      	subs	r3, r0, #0
 8006968:	d001      	beq.n	800696e <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 800696a:	2301      	movs	r3, #1
 800696c:	e082      	b.n	8006a74 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006978:	b2d2      	uxtb	r2, r2
 800697a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006980:	1c5a      	adds	r2, r3, #1
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800698a:	3b01      	subs	r3, #1
 800698c:	b29a      	uxth	r2, r3
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006996:	b29b      	uxth	r3, r3
 8006998:	3b01      	subs	r3, #1
 800699a:	b29a      	uxth	r2, r3
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d03a      	beq.n	8006a20 <HAL_I2C_Master_Receive+0x1ac>
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d136      	bne.n	8006a20 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80069b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80069b4:	68f8      	ldr	r0, [r7, #12]
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	9300      	str	r3, [sp, #0]
 80069ba:	0013      	movs	r3, r2
 80069bc:	2200      	movs	r2, #0
 80069be:	2180      	movs	r1, #128	@ 0x80
 80069c0:	f000 f882 	bl	8006ac8 <I2C_WaitOnFlagUntilTimeout>
 80069c4:	1e03      	subs	r3, r0, #0
 80069c6:	d001      	beq.n	80069cc <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 80069c8:	2301      	movs	r3, #1
 80069ca:	e053      	b.n	8006a74 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	2bff      	cmp	r3, #255	@ 0xff
 80069d4:	d911      	bls.n	80069fa <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	22ff      	movs	r2, #255	@ 0xff
 80069da:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069e0:	b2da      	uxtb	r2, r3
 80069e2:	2380      	movs	r3, #128	@ 0x80
 80069e4:	045c      	lsls	r4, r3, #17
 80069e6:	230a      	movs	r3, #10
 80069e8:	18fb      	adds	r3, r7, r3
 80069ea:	8819      	ldrh	r1, [r3, #0]
 80069ec:	68f8      	ldr	r0, [r7, #12]
 80069ee:	2300      	movs	r3, #0
 80069f0:	9300      	str	r3, [sp, #0]
 80069f2:	0023      	movs	r3, r4
 80069f4:	f000 fae0 	bl	8006fb8 <I2C_TransferConfig>
 80069f8:	e012      	b.n	8006a20 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069fe:	b29a      	uxth	r2, r3
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a08:	b2da      	uxtb	r2, r3
 8006a0a:	2380      	movs	r3, #128	@ 0x80
 8006a0c:	049c      	lsls	r4, r3, #18
 8006a0e:	230a      	movs	r3, #10
 8006a10:	18fb      	adds	r3, r7, r3
 8006a12:	8819      	ldrh	r1, [r3, #0]
 8006a14:	68f8      	ldr	r0, [r7, #12]
 8006a16:	2300      	movs	r3, #0
 8006a18:	9300      	str	r3, [sp, #0]
 8006a1a:	0023      	movs	r3, r4
 8006a1c:	f000 facc 	bl	8006fb8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a24:	b29b      	uxth	r3, r3
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d197      	bne.n	800695a <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a2a:	697a      	ldr	r2, [r7, #20]
 8006a2c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	0018      	movs	r0, r3
 8006a32:	f000 f8e7 	bl	8006c04 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006a36:	1e03      	subs	r3, r0, #0
 8006a38:	d001      	beq.n	8006a3e <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	e01a      	b.n	8006a74 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	2220      	movs	r2, #32
 8006a44:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	685a      	ldr	r2, [r3, #4]
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	490b      	ldr	r1, [pc, #44]	@ (8006a80 <HAL_I2C_Master_Receive+0x20c>)
 8006a52:	400a      	ands	r2, r1
 8006a54:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2241      	movs	r2, #65	@ 0x41
 8006a5a:	2120      	movs	r1, #32
 8006a5c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2242      	movs	r2, #66	@ 0x42
 8006a62:	2100      	movs	r1, #0
 8006a64:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2240      	movs	r2, #64	@ 0x40
 8006a6a:	2100      	movs	r1, #0
 8006a6c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	e000      	b.n	8006a74 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8006a72:	2302      	movs	r3, #2
  }
}
 8006a74:	0018      	movs	r0, r3
 8006a76:	46bd      	mov	sp, r7
 8006a78:	b007      	add	sp, #28
 8006a7a:	bd90      	pop	{r4, r7, pc}
 8006a7c:	80002400 	.word	0x80002400
 8006a80:	fe00e800 	.word	0xfe00e800

08006a84 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b082      	sub	sp, #8
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	699b      	ldr	r3, [r3, #24]
 8006a92:	2202      	movs	r2, #2
 8006a94:	4013      	ands	r3, r2
 8006a96:	2b02      	cmp	r3, #2
 8006a98:	d103      	bne.n	8006aa2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	699b      	ldr	r3, [r3, #24]
 8006aa8:	2201      	movs	r2, #1
 8006aaa:	4013      	ands	r3, r2
 8006aac:	2b01      	cmp	r3, #1
 8006aae:	d007      	beq.n	8006ac0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	699a      	ldr	r2, [r3, #24]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	2101      	movs	r1, #1
 8006abc:	430a      	orrs	r2, r1
 8006abe:	619a      	str	r2, [r3, #24]
  }
}
 8006ac0:	46c0      	nop			@ (mov r8, r8)
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	b002      	add	sp, #8
 8006ac6:	bd80      	pop	{r7, pc}

08006ac8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b084      	sub	sp, #16
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	60f8      	str	r0, [r7, #12]
 8006ad0:	60b9      	str	r1, [r7, #8]
 8006ad2:	603b      	str	r3, [r7, #0]
 8006ad4:	1dfb      	adds	r3, r7, #7
 8006ad6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006ad8:	e03a      	b.n	8006b50 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ada:	69ba      	ldr	r2, [r7, #24]
 8006adc:	6839      	ldr	r1, [r7, #0]
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	0018      	movs	r0, r3
 8006ae2:	f000 f971 	bl	8006dc8 <I2C_IsErrorOccurred>
 8006ae6:	1e03      	subs	r3, r0, #0
 8006ae8:	d001      	beq.n	8006aee <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8006aea:	2301      	movs	r3, #1
 8006aec:	e040      	b.n	8006b70 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	3301      	adds	r3, #1
 8006af2:	d02d      	beq.n	8006b50 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006af4:	f7ff fa50 	bl	8005f98 <HAL_GetTick>
 8006af8:	0002      	movs	r2, r0
 8006afa:	69bb      	ldr	r3, [r7, #24]
 8006afc:	1ad3      	subs	r3, r2, r3
 8006afe:	683a      	ldr	r2, [r7, #0]
 8006b00:	429a      	cmp	r2, r3
 8006b02:	d302      	bcc.n	8006b0a <I2C_WaitOnFlagUntilTimeout+0x42>
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d122      	bne.n	8006b50 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	699b      	ldr	r3, [r3, #24]
 8006b10:	68ba      	ldr	r2, [r7, #8]
 8006b12:	4013      	ands	r3, r2
 8006b14:	68ba      	ldr	r2, [r7, #8]
 8006b16:	1ad3      	subs	r3, r2, r3
 8006b18:	425a      	negs	r2, r3
 8006b1a:	4153      	adcs	r3, r2
 8006b1c:	b2db      	uxtb	r3, r3
 8006b1e:	001a      	movs	r2, r3
 8006b20:	1dfb      	adds	r3, r7, #7
 8006b22:	781b      	ldrb	r3, [r3, #0]
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d113      	bne.n	8006b50 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b2c:	2220      	movs	r2, #32
 8006b2e:	431a      	orrs	r2, r3
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2241      	movs	r2, #65	@ 0x41
 8006b38:	2120      	movs	r1, #32
 8006b3a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	2242      	movs	r2, #66	@ 0x42
 8006b40:	2100      	movs	r1, #0
 8006b42:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2240      	movs	r2, #64	@ 0x40
 8006b48:	2100      	movs	r1, #0
 8006b4a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	e00f      	b.n	8006b70 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	699b      	ldr	r3, [r3, #24]
 8006b56:	68ba      	ldr	r2, [r7, #8]
 8006b58:	4013      	ands	r3, r2
 8006b5a:	68ba      	ldr	r2, [r7, #8]
 8006b5c:	1ad3      	subs	r3, r2, r3
 8006b5e:	425a      	negs	r2, r3
 8006b60:	4153      	adcs	r3, r2
 8006b62:	b2db      	uxtb	r3, r3
 8006b64:	001a      	movs	r2, r3
 8006b66:	1dfb      	adds	r3, r7, #7
 8006b68:	781b      	ldrb	r3, [r3, #0]
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d0b5      	beq.n	8006ada <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b6e:	2300      	movs	r3, #0
}
 8006b70:	0018      	movs	r0, r3
 8006b72:	46bd      	mov	sp, r7
 8006b74:	b004      	add	sp, #16
 8006b76:	bd80      	pop	{r7, pc}

08006b78 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b084      	sub	sp, #16
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	60f8      	str	r0, [r7, #12]
 8006b80:	60b9      	str	r1, [r7, #8]
 8006b82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006b84:	e032      	b.n	8006bec <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	68b9      	ldr	r1, [r7, #8]
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	0018      	movs	r0, r3
 8006b8e:	f000 f91b 	bl	8006dc8 <I2C_IsErrorOccurred>
 8006b92:	1e03      	subs	r3, r0, #0
 8006b94:	d001      	beq.n	8006b9a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006b96:	2301      	movs	r3, #1
 8006b98:	e030      	b.n	8006bfc <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	3301      	adds	r3, #1
 8006b9e:	d025      	beq.n	8006bec <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ba0:	f7ff f9fa 	bl	8005f98 <HAL_GetTick>
 8006ba4:	0002      	movs	r2, r0
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	1ad3      	subs	r3, r2, r3
 8006baa:	68ba      	ldr	r2, [r7, #8]
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d302      	bcc.n	8006bb6 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d11a      	bne.n	8006bec <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	699b      	ldr	r3, [r3, #24]
 8006bbc:	2202      	movs	r2, #2
 8006bbe:	4013      	ands	r3, r2
 8006bc0:	2b02      	cmp	r3, #2
 8006bc2:	d013      	beq.n	8006bec <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bc8:	2220      	movs	r2, #32
 8006bca:	431a      	orrs	r2, r3
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2241      	movs	r2, #65	@ 0x41
 8006bd4:	2120      	movs	r1, #32
 8006bd6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2242      	movs	r2, #66	@ 0x42
 8006bdc:	2100      	movs	r1, #0
 8006bde:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2240      	movs	r2, #64	@ 0x40
 8006be4:	2100      	movs	r1, #0
 8006be6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8006be8:	2301      	movs	r3, #1
 8006bea:	e007      	b.n	8006bfc <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	699b      	ldr	r3, [r3, #24]
 8006bf2:	2202      	movs	r2, #2
 8006bf4:	4013      	ands	r3, r2
 8006bf6:	2b02      	cmp	r3, #2
 8006bf8:	d1c5      	bne.n	8006b86 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006bfa:	2300      	movs	r3, #0
}
 8006bfc:	0018      	movs	r0, r3
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	b004      	add	sp, #16
 8006c02:	bd80      	pop	{r7, pc}

08006c04 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b084      	sub	sp, #16
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	60f8      	str	r0, [r7, #12]
 8006c0c:	60b9      	str	r1, [r7, #8]
 8006c0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006c10:	e02f      	b.n	8006c72 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	68b9      	ldr	r1, [r7, #8]
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	0018      	movs	r0, r3
 8006c1a:	f000 f8d5 	bl	8006dc8 <I2C_IsErrorOccurred>
 8006c1e:	1e03      	subs	r3, r0, #0
 8006c20:	d001      	beq.n	8006c26 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006c22:	2301      	movs	r3, #1
 8006c24:	e02d      	b.n	8006c82 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c26:	f7ff f9b7 	bl	8005f98 <HAL_GetTick>
 8006c2a:	0002      	movs	r2, r0
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	1ad3      	subs	r3, r2, r3
 8006c30:	68ba      	ldr	r2, [r7, #8]
 8006c32:	429a      	cmp	r2, r3
 8006c34:	d302      	bcc.n	8006c3c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d11a      	bne.n	8006c72 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	699b      	ldr	r3, [r3, #24]
 8006c42:	2220      	movs	r2, #32
 8006c44:	4013      	ands	r3, r2
 8006c46:	2b20      	cmp	r3, #32
 8006c48:	d013      	beq.n	8006c72 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c4e:	2220      	movs	r2, #32
 8006c50:	431a      	orrs	r2, r3
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2241      	movs	r2, #65	@ 0x41
 8006c5a:	2120      	movs	r1, #32
 8006c5c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2242      	movs	r2, #66	@ 0x42
 8006c62:	2100      	movs	r1, #0
 8006c64:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2240      	movs	r2, #64	@ 0x40
 8006c6a:	2100      	movs	r1, #0
 8006c6c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8006c6e:	2301      	movs	r3, #1
 8006c70:	e007      	b.n	8006c82 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	699b      	ldr	r3, [r3, #24]
 8006c78:	2220      	movs	r2, #32
 8006c7a:	4013      	ands	r3, r2
 8006c7c:	2b20      	cmp	r3, #32
 8006c7e:	d1c8      	bne.n	8006c12 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006c80:	2300      	movs	r3, #0
}
 8006c82:	0018      	movs	r0, r3
 8006c84:	46bd      	mov	sp, r7
 8006c86:	b004      	add	sp, #16
 8006c88:	bd80      	pop	{r7, pc}
	...

08006c8c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b086      	sub	sp, #24
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	60f8      	str	r0, [r7, #12]
 8006c94:	60b9      	str	r1, [r7, #8]
 8006c96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c98:	2317      	movs	r3, #23
 8006c9a:	18fb      	adds	r3, r7, r3
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8006ca0:	e07b      	b.n	8006d9a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ca2:	687a      	ldr	r2, [r7, #4]
 8006ca4:	68b9      	ldr	r1, [r7, #8]
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	0018      	movs	r0, r3
 8006caa:	f000 f88d 	bl	8006dc8 <I2C_IsErrorOccurred>
 8006cae:	1e03      	subs	r3, r0, #0
 8006cb0:	d003      	beq.n	8006cba <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 8006cb2:	2317      	movs	r3, #23
 8006cb4:	18fb      	adds	r3, r7, r3
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	699b      	ldr	r3, [r3, #24]
 8006cc0:	2220      	movs	r2, #32
 8006cc2:	4013      	ands	r3, r2
 8006cc4:	2b20      	cmp	r3, #32
 8006cc6:	d140      	bne.n	8006d4a <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 8006cc8:	2117      	movs	r1, #23
 8006cca:	187b      	adds	r3, r7, r1
 8006ccc:	781b      	ldrb	r3, [r3, #0]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d13b      	bne.n	8006d4a <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	699b      	ldr	r3, [r3, #24]
 8006cd8:	2204      	movs	r2, #4
 8006cda:	4013      	ands	r3, r2
 8006cdc:	2b04      	cmp	r3, #4
 8006cde:	d106      	bne.n	8006cee <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d002      	beq.n	8006cee <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8006ce8:	187b      	adds	r3, r7, r1
 8006cea:	2200      	movs	r2, #0
 8006cec:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	699b      	ldr	r3, [r3, #24]
 8006cf4:	2210      	movs	r2, #16
 8006cf6:	4013      	ands	r3, r2
 8006cf8:	2b10      	cmp	r3, #16
 8006cfa:	d123      	bne.n	8006d44 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	2210      	movs	r2, #16
 8006d02:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2204      	movs	r2, #4
 8006d08:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	2220      	movs	r2, #32
 8006d10:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	685a      	ldr	r2, [r3, #4]
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4929      	ldr	r1, [pc, #164]	@ (8006dc4 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 8006d1e:	400a      	ands	r2, r1
 8006d20:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2241      	movs	r2, #65	@ 0x41
 8006d26:	2120      	movs	r1, #32
 8006d28:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2242      	movs	r2, #66	@ 0x42
 8006d2e:	2100      	movs	r1, #0
 8006d30:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2240      	movs	r2, #64	@ 0x40
 8006d36:	2100      	movs	r1, #0
 8006d38:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8006d3a:	2317      	movs	r3, #23
 8006d3c:	18fb      	adds	r3, r7, r3
 8006d3e:	2201      	movs	r2, #1
 8006d40:	701a      	strb	r2, [r3, #0]
 8006d42:	e002      	b.n	8006d4a <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2200      	movs	r2, #0
 8006d48:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8006d4a:	f7ff f925 	bl	8005f98 <HAL_GetTick>
 8006d4e:	0002      	movs	r2, r0
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	1ad3      	subs	r3, r2, r3
 8006d54:	68ba      	ldr	r2, [r7, #8]
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d302      	bcc.n	8006d60 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d11c      	bne.n	8006d9a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 8006d60:	2017      	movs	r0, #23
 8006d62:	183b      	adds	r3, r7, r0
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d117      	bne.n	8006d9a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	699b      	ldr	r3, [r3, #24]
 8006d70:	2204      	movs	r2, #4
 8006d72:	4013      	ands	r3, r2
 8006d74:	2b04      	cmp	r3, #4
 8006d76:	d010      	beq.n	8006d9a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d7c:	2220      	movs	r2, #32
 8006d7e:	431a      	orrs	r2, r3
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2241      	movs	r2, #65	@ 0x41
 8006d88:	2120      	movs	r1, #32
 8006d8a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2240      	movs	r2, #64	@ 0x40
 8006d90:	2100      	movs	r1, #0
 8006d92:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8006d94:	183b      	adds	r3, r7, r0
 8006d96:	2201      	movs	r2, #1
 8006d98:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	699b      	ldr	r3, [r3, #24]
 8006da0:	2204      	movs	r2, #4
 8006da2:	4013      	ands	r3, r2
 8006da4:	2b04      	cmp	r3, #4
 8006da6:	d005      	beq.n	8006db4 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8006da8:	2317      	movs	r3, #23
 8006daa:	18fb      	adds	r3, r7, r3
 8006dac:	781b      	ldrb	r3, [r3, #0]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d100      	bne.n	8006db4 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8006db2:	e776      	b.n	8006ca2 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 8006db4:	2317      	movs	r3, #23
 8006db6:	18fb      	adds	r3, r7, r3
 8006db8:	781b      	ldrb	r3, [r3, #0]
}
 8006dba:	0018      	movs	r0, r3
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	b006      	add	sp, #24
 8006dc0:	bd80      	pop	{r7, pc}
 8006dc2:	46c0      	nop			@ (mov r8, r8)
 8006dc4:	fe00e800 	.word	0xfe00e800

08006dc8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b08a      	sub	sp, #40	@ 0x28
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	60f8      	str	r0, [r7, #12]
 8006dd0:	60b9      	str	r1, [r7, #8]
 8006dd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006dd4:	2327      	movs	r3, #39	@ 0x27
 8006dd6:	18fb      	adds	r3, r7, r3
 8006dd8:	2200      	movs	r2, #0
 8006dda:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	699b      	ldr	r3, [r3, #24]
 8006de2:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006de4:	2300      	movs	r3, #0
 8006de6:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006dec:	69bb      	ldr	r3, [r7, #24]
 8006dee:	2210      	movs	r2, #16
 8006df0:	4013      	ands	r3, r2
 8006df2:	d100      	bne.n	8006df6 <I2C_IsErrorOccurred+0x2e>
 8006df4:	e079      	b.n	8006eea <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	2210      	movs	r2, #16
 8006dfc:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006dfe:	e057      	b.n	8006eb0 <I2C_IsErrorOccurred+0xe8>
 8006e00:	2227      	movs	r2, #39	@ 0x27
 8006e02:	18bb      	adds	r3, r7, r2
 8006e04:	18ba      	adds	r2, r7, r2
 8006e06:	7812      	ldrb	r2, [r2, #0]
 8006e08:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	3301      	adds	r3, #1
 8006e0e:	d04f      	beq.n	8006eb0 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006e10:	f7ff f8c2 	bl	8005f98 <HAL_GetTick>
 8006e14:	0002      	movs	r2, r0
 8006e16:	69fb      	ldr	r3, [r7, #28]
 8006e18:	1ad3      	subs	r3, r2, r3
 8006e1a:	68ba      	ldr	r2, [r7, #8]
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	d302      	bcc.n	8006e26 <I2C_IsErrorOccurred+0x5e>
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d144      	bne.n	8006eb0 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	685a      	ldr	r2, [r3, #4]
 8006e2c:	2380      	movs	r3, #128	@ 0x80
 8006e2e:	01db      	lsls	r3, r3, #7
 8006e30:	4013      	ands	r3, r2
 8006e32:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006e34:	2013      	movs	r0, #19
 8006e36:	183b      	adds	r3, r7, r0
 8006e38:	68fa      	ldr	r2, [r7, #12]
 8006e3a:	2142      	movs	r1, #66	@ 0x42
 8006e3c:	5c52      	ldrb	r2, [r2, r1]
 8006e3e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	699a      	ldr	r2, [r3, #24]
 8006e46:	2380      	movs	r3, #128	@ 0x80
 8006e48:	021b      	lsls	r3, r3, #8
 8006e4a:	401a      	ands	r2, r3
 8006e4c:	2380      	movs	r3, #128	@ 0x80
 8006e4e:	021b      	lsls	r3, r3, #8
 8006e50:	429a      	cmp	r2, r3
 8006e52:	d126      	bne.n	8006ea2 <I2C_IsErrorOccurred+0xda>
 8006e54:	697a      	ldr	r2, [r7, #20]
 8006e56:	2380      	movs	r3, #128	@ 0x80
 8006e58:	01db      	lsls	r3, r3, #7
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	d021      	beq.n	8006ea2 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8006e5e:	183b      	adds	r3, r7, r0
 8006e60:	781b      	ldrb	r3, [r3, #0]
 8006e62:	2b20      	cmp	r3, #32
 8006e64:	d01d      	beq.n	8006ea2 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	685a      	ldr	r2, [r3, #4]
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	2180      	movs	r1, #128	@ 0x80
 8006e72:	01c9      	lsls	r1, r1, #7
 8006e74:	430a      	orrs	r2, r1
 8006e76:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006e78:	f7ff f88e 	bl	8005f98 <HAL_GetTick>
 8006e7c:	0003      	movs	r3, r0
 8006e7e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006e80:	e00f      	b.n	8006ea2 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006e82:	f7ff f889 	bl	8005f98 <HAL_GetTick>
 8006e86:	0002      	movs	r2, r0
 8006e88:	69fb      	ldr	r3, [r7, #28]
 8006e8a:	1ad3      	subs	r3, r2, r3
 8006e8c:	2b19      	cmp	r3, #25
 8006e8e:	d908      	bls.n	8006ea2 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006e90:	6a3b      	ldr	r3, [r7, #32]
 8006e92:	2220      	movs	r2, #32
 8006e94:	4313      	orrs	r3, r2
 8006e96:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006e98:	2327      	movs	r3, #39	@ 0x27
 8006e9a:	18fb      	adds	r3, r7, r3
 8006e9c:	2201      	movs	r2, #1
 8006e9e:	701a      	strb	r2, [r3, #0]

              break;
 8006ea0:	e006      	b.n	8006eb0 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	699b      	ldr	r3, [r3, #24]
 8006ea8:	2220      	movs	r2, #32
 8006eaa:	4013      	ands	r3, r2
 8006eac:	2b20      	cmp	r3, #32
 8006eae:	d1e8      	bne.n	8006e82 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	699b      	ldr	r3, [r3, #24]
 8006eb6:	2220      	movs	r2, #32
 8006eb8:	4013      	ands	r3, r2
 8006eba:	2b20      	cmp	r3, #32
 8006ebc:	d004      	beq.n	8006ec8 <I2C_IsErrorOccurred+0x100>
 8006ebe:	2327      	movs	r3, #39	@ 0x27
 8006ec0:	18fb      	adds	r3, r7, r3
 8006ec2:	781b      	ldrb	r3, [r3, #0]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d09b      	beq.n	8006e00 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006ec8:	2327      	movs	r3, #39	@ 0x27
 8006eca:	18fb      	adds	r3, r7, r3
 8006ecc:	781b      	ldrb	r3, [r3, #0]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d103      	bne.n	8006eda <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	2220      	movs	r2, #32
 8006ed8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006eda:	6a3b      	ldr	r3, [r7, #32]
 8006edc:	2204      	movs	r2, #4
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006ee2:	2327      	movs	r3, #39	@ 0x27
 8006ee4:	18fb      	adds	r3, r7, r3
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	699b      	ldr	r3, [r3, #24]
 8006ef0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006ef2:	69ba      	ldr	r2, [r7, #24]
 8006ef4:	2380      	movs	r3, #128	@ 0x80
 8006ef6:	005b      	lsls	r3, r3, #1
 8006ef8:	4013      	ands	r3, r2
 8006efa:	d00c      	beq.n	8006f16 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006efc:	6a3b      	ldr	r3, [r7, #32]
 8006efe:	2201      	movs	r2, #1
 8006f00:	4313      	orrs	r3, r2
 8006f02:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	2280      	movs	r2, #128	@ 0x80
 8006f0a:	0052      	lsls	r2, r2, #1
 8006f0c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006f0e:	2327      	movs	r3, #39	@ 0x27
 8006f10:	18fb      	adds	r3, r7, r3
 8006f12:	2201      	movs	r2, #1
 8006f14:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006f16:	69ba      	ldr	r2, [r7, #24]
 8006f18:	2380      	movs	r3, #128	@ 0x80
 8006f1a:	00db      	lsls	r3, r3, #3
 8006f1c:	4013      	ands	r3, r2
 8006f1e:	d00c      	beq.n	8006f3a <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006f20:	6a3b      	ldr	r3, [r7, #32]
 8006f22:	2208      	movs	r2, #8
 8006f24:	4313      	orrs	r3, r2
 8006f26:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	2280      	movs	r2, #128	@ 0x80
 8006f2e:	00d2      	lsls	r2, r2, #3
 8006f30:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006f32:	2327      	movs	r3, #39	@ 0x27
 8006f34:	18fb      	adds	r3, r7, r3
 8006f36:	2201      	movs	r2, #1
 8006f38:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006f3a:	69ba      	ldr	r2, [r7, #24]
 8006f3c:	2380      	movs	r3, #128	@ 0x80
 8006f3e:	009b      	lsls	r3, r3, #2
 8006f40:	4013      	ands	r3, r2
 8006f42:	d00c      	beq.n	8006f5e <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006f44:	6a3b      	ldr	r3, [r7, #32]
 8006f46:	2202      	movs	r2, #2
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	2280      	movs	r2, #128	@ 0x80
 8006f52:	0092      	lsls	r2, r2, #2
 8006f54:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006f56:	2327      	movs	r3, #39	@ 0x27
 8006f58:	18fb      	adds	r3, r7, r3
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8006f5e:	2327      	movs	r3, #39	@ 0x27
 8006f60:	18fb      	adds	r3, r7, r3
 8006f62:	781b      	ldrb	r3, [r3, #0]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d01d      	beq.n	8006fa4 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	0018      	movs	r0, r3
 8006f6c:	f7ff fd8a 	bl	8006a84 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	685a      	ldr	r2, [r3, #4]
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	490e      	ldr	r1, [pc, #56]	@ (8006fb4 <I2C_IsErrorOccurred+0x1ec>)
 8006f7c:	400a      	ands	r2, r1
 8006f7e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006f84:	6a3b      	ldr	r3, [r7, #32]
 8006f86:	431a      	orrs	r2, r3
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	2241      	movs	r2, #65	@ 0x41
 8006f90:	2120      	movs	r1, #32
 8006f92:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2242      	movs	r2, #66	@ 0x42
 8006f98:	2100      	movs	r1, #0
 8006f9a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	2240      	movs	r2, #64	@ 0x40
 8006fa0:	2100      	movs	r1, #0
 8006fa2:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8006fa4:	2327      	movs	r3, #39	@ 0x27
 8006fa6:	18fb      	adds	r3, r7, r3
 8006fa8:	781b      	ldrb	r3, [r3, #0]
}
 8006faa:	0018      	movs	r0, r3
 8006fac:	46bd      	mov	sp, r7
 8006fae:	b00a      	add	sp, #40	@ 0x28
 8006fb0:	bd80      	pop	{r7, pc}
 8006fb2:	46c0      	nop			@ (mov r8, r8)
 8006fb4:	fe00e800 	.word	0xfe00e800

08006fb8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006fb8:	b590      	push	{r4, r7, lr}
 8006fba:	b087      	sub	sp, #28
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	60f8      	str	r0, [r7, #12]
 8006fc0:	0008      	movs	r0, r1
 8006fc2:	0011      	movs	r1, r2
 8006fc4:	607b      	str	r3, [r7, #4]
 8006fc6:	240a      	movs	r4, #10
 8006fc8:	193b      	adds	r3, r7, r4
 8006fca:	1c02      	adds	r2, r0, #0
 8006fcc:	801a      	strh	r2, [r3, #0]
 8006fce:	2009      	movs	r0, #9
 8006fd0:	183b      	adds	r3, r7, r0
 8006fd2:	1c0a      	adds	r2, r1, #0
 8006fd4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006fd6:	193b      	adds	r3, r7, r4
 8006fd8:	881b      	ldrh	r3, [r3, #0]
 8006fda:	059b      	lsls	r3, r3, #22
 8006fdc:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006fde:	183b      	adds	r3, r7, r0
 8006fe0:	781b      	ldrb	r3, [r3, #0]
 8006fe2:	0419      	lsls	r1, r3, #16
 8006fe4:	23ff      	movs	r3, #255	@ 0xff
 8006fe6:	041b      	lsls	r3, r3, #16
 8006fe8:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006fea:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006ff0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	005b      	lsls	r3, r3, #1
 8006ff6:	085b      	lsrs	r3, r3, #1
 8006ff8:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007002:	0d51      	lsrs	r1, r2, #21
 8007004:	2280      	movs	r2, #128	@ 0x80
 8007006:	00d2      	lsls	r2, r2, #3
 8007008:	400a      	ands	r2, r1
 800700a:	4907      	ldr	r1, [pc, #28]	@ (8007028 <I2C_TransferConfig+0x70>)
 800700c:	430a      	orrs	r2, r1
 800700e:	43d2      	mvns	r2, r2
 8007010:	401a      	ands	r2, r3
 8007012:	0011      	movs	r1, r2
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	697a      	ldr	r2, [r7, #20]
 800701a:	430a      	orrs	r2, r1
 800701c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800701e:	46c0      	nop			@ (mov r8, r8)
 8007020:	46bd      	mov	sp, r7
 8007022:	b007      	add	sp, #28
 8007024:	bd90      	pop	{r4, r7, pc}
 8007026:	46c0      	nop			@ (mov r8, r8)
 8007028:	03ff63ff 	.word	0x03ff63ff

0800702c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b082      	sub	sp, #8
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
 8007034:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2241      	movs	r2, #65	@ 0x41
 800703a:	5c9b      	ldrb	r3, [r3, r2]
 800703c:	b2db      	uxtb	r3, r3
 800703e:	2b20      	cmp	r3, #32
 8007040:	d138      	bne.n	80070b4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2240      	movs	r2, #64	@ 0x40
 8007046:	5c9b      	ldrb	r3, [r3, r2]
 8007048:	2b01      	cmp	r3, #1
 800704a:	d101      	bne.n	8007050 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800704c:	2302      	movs	r3, #2
 800704e:	e032      	b.n	80070b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2240      	movs	r2, #64	@ 0x40
 8007054:	2101      	movs	r1, #1
 8007056:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2241      	movs	r2, #65	@ 0x41
 800705c:	2124      	movs	r1, #36	@ 0x24
 800705e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	681a      	ldr	r2, [r3, #0]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	2101      	movs	r1, #1
 800706c:	438a      	bics	r2, r1
 800706e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	681a      	ldr	r2, [r3, #0]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4911      	ldr	r1, [pc, #68]	@ (80070c0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800707c:	400a      	ands	r2, r1
 800707e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	6819      	ldr	r1, [r3, #0]
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	683a      	ldr	r2, [r7, #0]
 800708c:	430a      	orrs	r2, r1
 800708e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	681a      	ldr	r2, [r3, #0]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	2101      	movs	r1, #1
 800709c:	430a      	orrs	r2, r1
 800709e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2241      	movs	r2, #65	@ 0x41
 80070a4:	2120      	movs	r1, #32
 80070a6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2240      	movs	r2, #64	@ 0x40
 80070ac:	2100      	movs	r1, #0
 80070ae:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80070b0:	2300      	movs	r3, #0
 80070b2:	e000      	b.n	80070b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80070b4:	2302      	movs	r3, #2
  }
}
 80070b6:	0018      	movs	r0, r3
 80070b8:	46bd      	mov	sp, r7
 80070ba:	b002      	add	sp, #8
 80070bc:	bd80      	pop	{r7, pc}
 80070be:	46c0      	nop			@ (mov r8, r8)
 80070c0:	ffffefff 	.word	0xffffefff

080070c4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b084      	sub	sp, #16
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
 80070cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2241      	movs	r2, #65	@ 0x41
 80070d2:	5c9b      	ldrb	r3, [r3, r2]
 80070d4:	b2db      	uxtb	r3, r3
 80070d6:	2b20      	cmp	r3, #32
 80070d8:	d139      	bne.n	800714e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2240      	movs	r2, #64	@ 0x40
 80070de:	5c9b      	ldrb	r3, [r3, r2]
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	d101      	bne.n	80070e8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80070e4:	2302      	movs	r3, #2
 80070e6:	e033      	b.n	8007150 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2240      	movs	r2, #64	@ 0x40
 80070ec:	2101      	movs	r1, #1
 80070ee:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2241      	movs	r2, #65	@ 0x41
 80070f4:	2124      	movs	r1, #36	@ 0x24
 80070f6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	681a      	ldr	r2, [r3, #0]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	2101      	movs	r1, #1
 8007104:	438a      	bics	r2, r1
 8007106:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	4a11      	ldr	r2, [pc, #68]	@ (8007158 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8007114:	4013      	ands	r3, r2
 8007116:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	021b      	lsls	r3, r3, #8
 800711c:	68fa      	ldr	r2, [r7, #12]
 800711e:	4313      	orrs	r3, r2
 8007120:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	68fa      	ldr	r2, [r7, #12]
 8007128:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	681a      	ldr	r2, [r3, #0]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	2101      	movs	r1, #1
 8007136:	430a      	orrs	r2, r1
 8007138:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2241      	movs	r2, #65	@ 0x41
 800713e:	2120      	movs	r1, #32
 8007140:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2240      	movs	r2, #64	@ 0x40
 8007146:	2100      	movs	r1, #0
 8007148:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800714a:	2300      	movs	r3, #0
 800714c:	e000      	b.n	8007150 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800714e:	2302      	movs	r3, #2
  }
}
 8007150:	0018      	movs	r0, r3
 8007152:	46bd      	mov	sp, r7
 8007154:	b004      	add	sp, #16
 8007156:	bd80      	pop	{r7, pc}
 8007158:	fffff0ff 	.word	0xfffff0ff

0800715c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b084      	sub	sp, #16
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8007164:	4b19      	ldr	r3, [pc, #100]	@ (80071cc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a19      	ldr	r2, [pc, #100]	@ (80071d0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800716a:	4013      	ands	r3, r2
 800716c:	0019      	movs	r1, r3
 800716e:	4b17      	ldr	r3, [pc, #92]	@ (80071cc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8007170:	687a      	ldr	r2, [r7, #4]
 8007172:	430a      	orrs	r2, r1
 8007174:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007176:	687a      	ldr	r2, [r7, #4]
 8007178:	2380      	movs	r3, #128	@ 0x80
 800717a:	009b      	lsls	r3, r3, #2
 800717c:	429a      	cmp	r2, r3
 800717e:	d11f      	bne.n	80071c0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8007180:	4b14      	ldr	r3, [pc, #80]	@ (80071d4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8007182:	681a      	ldr	r2, [r3, #0]
 8007184:	0013      	movs	r3, r2
 8007186:	005b      	lsls	r3, r3, #1
 8007188:	189b      	adds	r3, r3, r2
 800718a:	005b      	lsls	r3, r3, #1
 800718c:	4912      	ldr	r1, [pc, #72]	@ (80071d8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800718e:	0018      	movs	r0, r3
 8007190:	f7f8 ffcc 	bl	800012c <__udivsi3>
 8007194:	0003      	movs	r3, r0
 8007196:	3301      	adds	r3, #1
 8007198:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800719a:	e008      	b.n	80071ae <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d003      	beq.n	80071aa <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	3b01      	subs	r3, #1
 80071a6:	60fb      	str	r3, [r7, #12]
 80071a8:	e001      	b.n	80071ae <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80071aa:	2303      	movs	r3, #3
 80071ac:	e009      	b.n	80071c2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80071ae:	4b07      	ldr	r3, [pc, #28]	@ (80071cc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80071b0:	695a      	ldr	r2, [r3, #20]
 80071b2:	2380      	movs	r3, #128	@ 0x80
 80071b4:	00db      	lsls	r3, r3, #3
 80071b6:	401a      	ands	r2, r3
 80071b8:	2380      	movs	r3, #128	@ 0x80
 80071ba:	00db      	lsls	r3, r3, #3
 80071bc:	429a      	cmp	r2, r3
 80071be:	d0ed      	beq.n	800719c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80071c0:	2300      	movs	r3, #0
}
 80071c2:	0018      	movs	r0, r3
 80071c4:	46bd      	mov	sp, r7
 80071c6:	b004      	add	sp, #16
 80071c8:	bd80      	pop	{r7, pc}
 80071ca:	46c0      	nop			@ (mov r8, r8)
 80071cc:	40007000 	.word	0x40007000
 80071d0:	fffff9ff 	.word	0xfffff9ff
 80071d4:	20000e84 	.word	0x20000e84
 80071d8:	000f4240 	.word	0x000f4240

080071dc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80071e0:	4b03      	ldr	r3, [pc, #12]	@ (80071f0 <LL_RCC_GetAPB1Prescaler+0x14>)
 80071e2:	689a      	ldr	r2, [r3, #8]
 80071e4:	23e0      	movs	r3, #224	@ 0xe0
 80071e6:	01db      	lsls	r3, r3, #7
 80071e8:	4013      	ands	r3, r2
}
 80071ea:	0018      	movs	r0, r3
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}
 80071f0:	40021000 	.word	0x40021000

080071f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b088      	sub	sp, #32
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d102      	bne.n	8007208 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007202:	2301      	movs	r3, #1
 8007204:	f000 fb50 	bl	80078a8 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	2201      	movs	r2, #1
 800720e:	4013      	ands	r3, r2
 8007210:	d100      	bne.n	8007214 <HAL_RCC_OscConfig+0x20>
 8007212:	e07c      	b.n	800730e <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007214:	4bc3      	ldr	r3, [pc, #780]	@ (8007524 <HAL_RCC_OscConfig+0x330>)
 8007216:	689b      	ldr	r3, [r3, #8]
 8007218:	2238      	movs	r2, #56	@ 0x38
 800721a:	4013      	ands	r3, r2
 800721c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800721e:	4bc1      	ldr	r3, [pc, #772]	@ (8007524 <HAL_RCC_OscConfig+0x330>)
 8007220:	68db      	ldr	r3, [r3, #12]
 8007222:	2203      	movs	r2, #3
 8007224:	4013      	ands	r3, r2
 8007226:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8007228:	69bb      	ldr	r3, [r7, #24]
 800722a:	2b10      	cmp	r3, #16
 800722c:	d102      	bne.n	8007234 <HAL_RCC_OscConfig+0x40>
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	2b03      	cmp	r3, #3
 8007232:	d002      	beq.n	800723a <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8007234:	69bb      	ldr	r3, [r7, #24]
 8007236:	2b08      	cmp	r3, #8
 8007238:	d10b      	bne.n	8007252 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800723a:	4bba      	ldr	r3, [pc, #744]	@ (8007524 <HAL_RCC_OscConfig+0x330>)
 800723c:	681a      	ldr	r2, [r3, #0]
 800723e:	2380      	movs	r3, #128	@ 0x80
 8007240:	029b      	lsls	r3, r3, #10
 8007242:	4013      	ands	r3, r2
 8007244:	d062      	beq.n	800730c <HAL_RCC_OscConfig+0x118>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d15e      	bne.n	800730c <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 800724e:	2301      	movs	r3, #1
 8007250:	e32a      	b.n	80078a8 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	685a      	ldr	r2, [r3, #4]
 8007256:	2380      	movs	r3, #128	@ 0x80
 8007258:	025b      	lsls	r3, r3, #9
 800725a:	429a      	cmp	r2, r3
 800725c:	d107      	bne.n	800726e <HAL_RCC_OscConfig+0x7a>
 800725e:	4bb1      	ldr	r3, [pc, #708]	@ (8007524 <HAL_RCC_OscConfig+0x330>)
 8007260:	681a      	ldr	r2, [r3, #0]
 8007262:	4bb0      	ldr	r3, [pc, #704]	@ (8007524 <HAL_RCC_OscConfig+0x330>)
 8007264:	2180      	movs	r1, #128	@ 0x80
 8007266:	0249      	lsls	r1, r1, #9
 8007268:	430a      	orrs	r2, r1
 800726a:	601a      	str	r2, [r3, #0]
 800726c:	e020      	b.n	80072b0 <HAL_RCC_OscConfig+0xbc>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	685a      	ldr	r2, [r3, #4]
 8007272:	23a0      	movs	r3, #160	@ 0xa0
 8007274:	02db      	lsls	r3, r3, #11
 8007276:	429a      	cmp	r2, r3
 8007278:	d10e      	bne.n	8007298 <HAL_RCC_OscConfig+0xa4>
 800727a:	4baa      	ldr	r3, [pc, #680]	@ (8007524 <HAL_RCC_OscConfig+0x330>)
 800727c:	681a      	ldr	r2, [r3, #0]
 800727e:	4ba9      	ldr	r3, [pc, #676]	@ (8007524 <HAL_RCC_OscConfig+0x330>)
 8007280:	2180      	movs	r1, #128	@ 0x80
 8007282:	02c9      	lsls	r1, r1, #11
 8007284:	430a      	orrs	r2, r1
 8007286:	601a      	str	r2, [r3, #0]
 8007288:	4ba6      	ldr	r3, [pc, #664]	@ (8007524 <HAL_RCC_OscConfig+0x330>)
 800728a:	681a      	ldr	r2, [r3, #0]
 800728c:	4ba5      	ldr	r3, [pc, #660]	@ (8007524 <HAL_RCC_OscConfig+0x330>)
 800728e:	2180      	movs	r1, #128	@ 0x80
 8007290:	0249      	lsls	r1, r1, #9
 8007292:	430a      	orrs	r2, r1
 8007294:	601a      	str	r2, [r3, #0]
 8007296:	e00b      	b.n	80072b0 <HAL_RCC_OscConfig+0xbc>
 8007298:	4ba2      	ldr	r3, [pc, #648]	@ (8007524 <HAL_RCC_OscConfig+0x330>)
 800729a:	681a      	ldr	r2, [r3, #0]
 800729c:	4ba1      	ldr	r3, [pc, #644]	@ (8007524 <HAL_RCC_OscConfig+0x330>)
 800729e:	49a2      	ldr	r1, [pc, #648]	@ (8007528 <HAL_RCC_OscConfig+0x334>)
 80072a0:	400a      	ands	r2, r1
 80072a2:	601a      	str	r2, [r3, #0]
 80072a4:	4b9f      	ldr	r3, [pc, #636]	@ (8007524 <HAL_RCC_OscConfig+0x330>)
 80072a6:	681a      	ldr	r2, [r3, #0]
 80072a8:	4b9e      	ldr	r3, [pc, #632]	@ (8007524 <HAL_RCC_OscConfig+0x330>)
 80072aa:	49a0      	ldr	r1, [pc, #640]	@ (800752c <HAL_RCC_OscConfig+0x338>)
 80072ac:	400a      	ands	r2, r1
 80072ae:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d014      	beq.n	80072e2 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072b8:	f7fe fe6e 	bl	8005f98 <HAL_GetTick>
 80072bc:	0003      	movs	r3, r0
 80072be:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80072c0:	e008      	b.n	80072d4 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80072c2:	f7fe fe69 	bl	8005f98 <HAL_GetTick>
 80072c6:	0002      	movs	r2, r0
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	1ad3      	subs	r3, r2, r3
 80072cc:	2b64      	cmp	r3, #100	@ 0x64
 80072ce:	d901      	bls.n	80072d4 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80072d0:	2303      	movs	r3, #3
 80072d2:	e2e9      	b.n	80078a8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80072d4:	4b93      	ldr	r3, [pc, #588]	@ (8007524 <HAL_RCC_OscConfig+0x330>)
 80072d6:	681a      	ldr	r2, [r3, #0]
 80072d8:	2380      	movs	r3, #128	@ 0x80
 80072da:	029b      	lsls	r3, r3, #10
 80072dc:	4013      	ands	r3, r2
 80072de:	d0f0      	beq.n	80072c2 <HAL_RCC_OscConfig+0xce>
 80072e0:	e015      	b.n	800730e <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072e2:	f7fe fe59 	bl	8005f98 <HAL_GetTick>
 80072e6:	0003      	movs	r3, r0
 80072e8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80072ea:	e008      	b.n	80072fe <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80072ec:	f7fe fe54 	bl	8005f98 <HAL_GetTick>
 80072f0:	0002      	movs	r2, r0
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	1ad3      	subs	r3, r2, r3
 80072f6:	2b64      	cmp	r3, #100	@ 0x64
 80072f8:	d901      	bls.n	80072fe <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80072fa:	2303      	movs	r3, #3
 80072fc:	e2d4      	b.n	80078a8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80072fe:	4b89      	ldr	r3, [pc, #548]	@ (8007524 <HAL_RCC_OscConfig+0x330>)
 8007300:	681a      	ldr	r2, [r3, #0]
 8007302:	2380      	movs	r3, #128	@ 0x80
 8007304:	029b      	lsls	r3, r3, #10
 8007306:	4013      	ands	r3, r2
 8007308:	d1f0      	bne.n	80072ec <HAL_RCC_OscConfig+0xf8>
 800730a:	e000      	b.n	800730e <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800730c:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	2202      	movs	r2, #2
 8007314:	4013      	ands	r3, r2
 8007316:	d100      	bne.n	800731a <HAL_RCC_OscConfig+0x126>
 8007318:	e099      	b.n	800744e <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800731a:	4b82      	ldr	r3, [pc, #520]	@ (8007524 <HAL_RCC_OscConfig+0x330>)
 800731c:	689b      	ldr	r3, [r3, #8]
 800731e:	2238      	movs	r2, #56	@ 0x38
 8007320:	4013      	ands	r3, r2
 8007322:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007324:	4b7f      	ldr	r3, [pc, #508]	@ (8007524 <HAL_RCC_OscConfig+0x330>)
 8007326:	68db      	ldr	r3, [r3, #12]
 8007328:	2203      	movs	r2, #3
 800732a:	4013      	ands	r3, r2
 800732c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800732e:	69bb      	ldr	r3, [r7, #24]
 8007330:	2b10      	cmp	r3, #16
 8007332:	d102      	bne.n	800733a <HAL_RCC_OscConfig+0x146>
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	2b02      	cmp	r3, #2
 8007338:	d002      	beq.n	8007340 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800733a:	69bb      	ldr	r3, [r7, #24]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d135      	bne.n	80073ac <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007340:	4b78      	ldr	r3, [pc, #480]	@ (8007524 <HAL_RCC_OscConfig+0x330>)
 8007342:	681a      	ldr	r2, [r3, #0]
 8007344:	2380      	movs	r3, #128	@ 0x80
 8007346:	00db      	lsls	r3, r3, #3
 8007348:	4013      	ands	r3, r2
 800734a:	d005      	beq.n	8007358 <HAL_RCC_OscConfig+0x164>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	68db      	ldr	r3, [r3, #12]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d101      	bne.n	8007358 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8007354:	2301      	movs	r3, #1
 8007356:	e2a7      	b.n	80078a8 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007358:	4b72      	ldr	r3, [pc, #456]	@ (8007524 <HAL_RCC_OscConfig+0x330>)
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	4a74      	ldr	r2, [pc, #464]	@ (8007530 <HAL_RCC_OscConfig+0x33c>)
 800735e:	4013      	ands	r3, r2
 8007360:	0019      	movs	r1, r3
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	695b      	ldr	r3, [r3, #20]
 8007366:	021a      	lsls	r2, r3, #8
 8007368:	4b6e      	ldr	r3, [pc, #440]	@ (8007524 <HAL_RCC_OscConfig+0x330>)
 800736a:	430a      	orrs	r2, r1
 800736c:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800736e:	69bb      	ldr	r3, [r7, #24]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d112      	bne.n	800739a <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8007374:	4b6b      	ldr	r3, [pc, #428]	@ (8007524 <HAL_RCC_OscConfig+0x330>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a6e      	ldr	r2, [pc, #440]	@ (8007534 <HAL_RCC_OscConfig+0x340>)
 800737a:	4013      	ands	r3, r2
 800737c:	0019      	movs	r1, r3
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	691a      	ldr	r2, [r3, #16]
 8007382:	4b68      	ldr	r3, [pc, #416]	@ (8007524 <HAL_RCC_OscConfig+0x330>)
 8007384:	430a      	orrs	r2, r1
 8007386:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8007388:	4b66      	ldr	r3, [pc, #408]	@ (8007524 <HAL_RCC_OscConfig+0x330>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	0adb      	lsrs	r3, r3, #11
 800738e:	2207      	movs	r2, #7
 8007390:	4013      	ands	r3, r2
 8007392:	4a69      	ldr	r2, [pc, #420]	@ (8007538 <HAL_RCC_OscConfig+0x344>)
 8007394:	40da      	lsrs	r2, r3
 8007396:	4b69      	ldr	r3, [pc, #420]	@ (800753c <HAL_RCC_OscConfig+0x348>)
 8007398:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800739a:	4b69      	ldr	r3, [pc, #420]	@ (8007540 <HAL_RCC_OscConfig+0x34c>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	0018      	movs	r0, r3
 80073a0:	f7fe fd9e 	bl	8005ee0 <HAL_InitTick>
 80073a4:	1e03      	subs	r3, r0, #0
 80073a6:	d051      	beq.n	800744c <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 80073a8:	2301      	movs	r3, #1
 80073aa:	e27d      	b.n	80078a8 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	68db      	ldr	r3, [r3, #12]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d030      	beq.n	8007416 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80073b4:	4b5b      	ldr	r3, [pc, #364]	@ (8007524 <HAL_RCC_OscConfig+0x330>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a5e      	ldr	r2, [pc, #376]	@ (8007534 <HAL_RCC_OscConfig+0x340>)
 80073ba:	4013      	ands	r3, r2
 80073bc:	0019      	movs	r1, r3
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	691a      	ldr	r2, [r3, #16]
 80073c2:	4b58      	ldr	r3, [pc, #352]	@ (8007524 <HAL_RCC_OscConfig+0x330>)
 80073c4:	430a      	orrs	r2, r1
 80073c6:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80073c8:	4b56      	ldr	r3, [pc, #344]	@ (8007524 <HAL_RCC_OscConfig+0x330>)
 80073ca:	681a      	ldr	r2, [r3, #0]
 80073cc:	4b55      	ldr	r3, [pc, #340]	@ (8007524 <HAL_RCC_OscConfig+0x330>)
 80073ce:	2180      	movs	r1, #128	@ 0x80
 80073d0:	0049      	lsls	r1, r1, #1
 80073d2:	430a      	orrs	r2, r1
 80073d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073d6:	f7fe fddf 	bl	8005f98 <HAL_GetTick>
 80073da:	0003      	movs	r3, r0
 80073dc:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80073de:	e008      	b.n	80073f2 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80073e0:	f7fe fdda 	bl	8005f98 <HAL_GetTick>
 80073e4:	0002      	movs	r2, r0
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	1ad3      	subs	r3, r2, r3
 80073ea:	2b02      	cmp	r3, #2
 80073ec:	d901      	bls.n	80073f2 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80073ee:	2303      	movs	r3, #3
 80073f0:	e25a      	b.n	80078a8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80073f2:	4b4c      	ldr	r3, [pc, #304]	@ (8007524 <HAL_RCC_OscConfig+0x330>)
 80073f4:	681a      	ldr	r2, [r3, #0]
 80073f6:	2380      	movs	r3, #128	@ 0x80
 80073f8:	00db      	lsls	r3, r3, #3
 80073fa:	4013      	ands	r3, r2
 80073fc:	d0f0      	beq.n	80073e0 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80073fe:	4b49      	ldr	r3, [pc, #292]	@ (8007524 <HAL_RCC_OscConfig+0x330>)
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	4a4b      	ldr	r2, [pc, #300]	@ (8007530 <HAL_RCC_OscConfig+0x33c>)
 8007404:	4013      	ands	r3, r2
 8007406:	0019      	movs	r1, r3
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	695b      	ldr	r3, [r3, #20]
 800740c:	021a      	lsls	r2, r3, #8
 800740e:	4b45      	ldr	r3, [pc, #276]	@ (8007524 <HAL_RCC_OscConfig+0x330>)
 8007410:	430a      	orrs	r2, r1
 8007412:	605a      	str	r2, [r3, #4]
 8007414:	e01b      	b.n	800744e <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8007416:	4b43      	ldr	r3, [pc, #268]	@ (8007524 <HAL_RCC_OscConfig+0x330>)
 8007418:	681a      	ldr	r2, [r3, #0]
 800741a:	4b42      	ldr	r3, [pc, #264]	@ (8007524 <HAL_RCC_OscConfig+0x330>)
 800741c:	4949      	ldr	r1, [pc, #292]	@ (8007544 <HAL_RCC_OscConfig+0x350>)
 800741e:	400a      	ands	r2, r1
 8007420:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007422:	f7fe fdb9 	bl	8005f98 <HAL_GetTick>
 8007426:	0003      	movs	r3, r0
 8007428:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800742a:	e008      	b.n	800743e <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800742c:	f7fe fdb4 	bl	8005f98 <HAL_GetTick>
 8007430:	0002      	movs	r2, r0
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	1ad3      	subs	r3, r2, r3
 8007436:	2b02      	cmp	r3, #2
 8007438:	d901      	bls.n	800743e <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 800743a:	2303      	movs	r3, #3
 800743c:	e234      	b.n	80078a8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800743e:	4b39      	ldr	r3, [pc, #228]	@ (8007524 <HAL_RCC_OscConfig+0x330>)
 8007440:	681a      	ldr	r2, [r3, #0]
 8007442:	2380      	movs	r3, #128	@ 0x80
 8007444:	00db      	lsls	r3, r3, #3
 8007446:	4013      	ands	r3, r2
 8007448:	d1f0      	bne.n	800742c <HAL_RCC_OscConfig+0x238>
 800744a:	e000      	b.n	800744e <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800744c:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	2208      	movs	r2, #8
 8007454:	4013      	ands	r3, r2
 8007456:	d047      	beq.n	80074e8 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8007458:	4b32      	ldr	r3, [pc, #200]	@ (8007524 <HAL_RCC_OscConfig+0x330>)
 800745a:	689b      	ldr	r3, [r3, #8]
 800745c:	2238      	movs	r2, #56	@ 0x38
 800745e:	4013      	ands	r3, r2
 8007460:	2b18      	cmp	r3, #24
 8007462:	d10a      	bne.n	800747a <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8007464:	4b2f      	ldr	r3, [pc, #188]	@ (8007524 <HAL_RCC_OscConfig+0x330>)
 8007466:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007468:	2202      	movs	r2, #2
 800746a:	4013      	ands	r3, r2
 800746c:	d03c      	beq.n	80074e8 <HAL_RCC_OscConfig+0x2f4>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	699b      	ldr	r3, [r3, #24]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d138      	bne.n	80074e8 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8007476:	2301      	movs	r3, #1
 8007478:	e216      	b.n	80078a8 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	699b      	ldr	r3, [r3, #24]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d019      	beq.n	80074b6 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8007482:	4b28      	ldr	r3, [pc, #160]	@ (8007524 <HAL_RCC_OscConfig+0x330>)
 8007484:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007486:	4b27      	ldr	r3, [pc, #156]	@ (8007524 <HAL_RCC_OscConfig+0x330>)
 8007488:	2101      	movs	r1, #1
 800748a:	430a      	orrs	r2, r1
 800748c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800748e:	f7fe fd83 	bl	8005f98 <HAL_GetTick>
 8007492:	0003      	movs	r3, r0
 8007494:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007496:	e008      	b.n	80074aa <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007498:	f7fe fd7e 	bl	8005f98 <HAL_GetTick>
 800749c:	0002      	movs	r2, r0
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	1ad3      	subs	r3, r2, r3
 80074a2:	2b02      	cmp	r3, #2
 80074a4:	d901      	bls.n	80074aa <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 80074a6:	2303      	movs	r3, #3
 80074a8:	e1fe      	b.n	80078a8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80074aa:	4b1e      	ldr	r3, [pc, #120]	@ (8007524 <HAL_RCC_OscConfig+0x330>)
 80074ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074ae:	2202      	movs	r2, #2
 80074b0:	4013      	ands	r3, r2
 80074b2:	d0f1      	beq.n	8007498 <HAL_RCC_OscConfig+0x2a4>
 80074b4:	e018      	b.n	80074e8 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80074b6:	4b1b      	ldr	r3, [pc, #108]	@ (8007524 <HAL_RCC_OscConfig+0x330>)
 80074b8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80074ba:	4b1a      	ldr	r3, [pc, #104]	@ (8007524 <HAL_RCC_OscConfig+0x330>)
 80074bc:	2101      	movs	r1, #1
 80074be:	438a      	bics	r2, r1
 80074c0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074c2:	f7fe fd69 	bl	8005f98 <HAL_GetTick>
 80074c6:	0003      	movs	r3, r0
 80074c8:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80074ca:	e008      	b.n	80074de <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80074cc:	f7fe fd64 	bl	8005f98 <HAL_GetTick>
 80074d0:	0002      	movs	r2, r0
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	1ad3      	subs	r3, r2, r3
 80074d6:	2b02      	cmp	r3, #2
 80074d8:	d901      	bls.n	80074de <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 80074da:	2303      	movs	r3, #3
 80074dc:	e1e4      	b.n	80078a8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80074de:	4b11      	ldr	r3, [pc, #68]	@ (8007524 <HAL_RCC_OscConfig+0x330>)
 80074e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074e2:	2202      	movs	r2, #2
 80074e4:	4013      	ands	r3, r2
 80074e6:	d1f1      	bne.n	80074cc <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	2204      	movs	r2, #4
 80074ee:	4013      	ands	r3, r2
 80074f0:	d100      	bne.n	80074f4 <HAL_RCC_OscConfig+0x300>
 80074f2:	e0c7      	b.n	8007684 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 80074f4:	231f      	movs	r3, #31
 80074f6:	18fb      	adds	r3, r7, r3
 80074f8:	2200      	movs	r2, #0
 80074fa:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80074fc:	4b09      	ldr	r3, [pc, #36]	@ (8007524 <HAL_RCC_OscConfig+0x330>)
 80074fe:	689b      	ldr	r3, [r3, #8]
 8007500:	2238      	movs	r2, #56	@ 0x38
 8007502:	4013      	ands	r3, r2
 8007504:	2b20      	cmp	r3, #32
 8007506:	d11f      	bne.n	8007548 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8007508:	4b06      	ldr	r3, [pc, #24]	@ (8007524 <HAL_RCC_OscConfig+0x330>)
 800750a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800750c:	2202      	movs	r2, #2
 800750e:	4013      	ands	r3, r2
 8007510:	d100      	bne.n	8007514 <HAL_RCC_OscConfig+0x320>
 8007512:	e0b7      	b.n	8007684 <HAL_RCC_OscConfig+0x490>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	689b      	ldr	r3, [r3, #8]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d000      	beq.n	800751e <HAL_RCC_OscConfig+0x32a>
 800751c:	e0b2      	b.n	8007684 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 800751e:	2301      	movs	r3, #1
 8007520:	e1c2      	b.n	80078a8 <HAL_RCC_OscConfig+0x6b4>
 8007522:	46c0      	nop			@ (mov r8, r8)
 8007524:	40021000 	.word	0x40021000
 8007528:	fffeffff 	.word	0xfffeffff
 800752c:	fffbffff 	.word	0xfffbffff
 8007530:	ffff80ff 	.word	0xffff80ff
 8007534:	ffffc7ff 	.word	0xffffc7ff
 8007538:	00f42400 	.word	0x00f42400
 800753c:	20000e84 	.word	0x20000e84
 8007540:	20000e88 	.word	0x20000e88
 8007544:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007548:	4bb5      	ldr	r3, [pc, #724]	@ (8007820 <HAL_RCC_OscConfig+0x62c>)
 800754a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800754c:	2380      	movs	r3, #128	@ 0x80
 800754e:	055b      	lsls	r3, r3, #21
 8007550:	4013      	ands	r3, r2
 8007552:	d101      	bne.n	8007558 <HAL_RCC_OscConfig+0x364>
 8007554:	2301      	movs	r3, #1
 8007556:	e000      	b.n	800755a <HAL_RCC_OscConfig+0x366>
 8007558:	2300      	movs	r3, #0
 800755a:	2b00      	cmp	r3, #0
 800755c:	d011      	beq.n	8007582 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800755e:	4bb0      	ldr	r3, [pc, #704]	@ (8007820 <HAL_RCC_OscConfig+0x62c>)
 8007560:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007562:	4baf      	ldr	r3, [pc, #700]	@ (8007820 <HAL_RCC_OscConfig+0x62c>)
 8007564:	2180      	movs	r1, #128	@ 0x80
 8007566:	0549      	lsls	r1, r1, #21
 8007568:	430a      	orrs	r2, r1
 800756a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800756c:	4bac      	ldr	r3, [pc, #688]	@ (8007820 <HAL_RCC_OscConfig+0x62c>)
 800756e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007570:	2380      	movs	r3, #128	@ 0x80
 8007572:	055b      	lsls	r3, r3, #21
 8007574:	4013      	ands	r3, r2
 8007576:	60fb      	str	r3, [r7, #12]
 8007578:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800757a:	231f      	movs	r3, #31
 800757c:	18fb      	adds	r3, r7, r3
 800757e:	2201      	movs	r2, #1
 8007580:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007582:	4ba8      	ldr	r3, [pc, #672]	@ (8007824 <HAL_RCC_OscConfig+0x630>)
 8007584:	681a      	ldr	r2, [r3, #0]
 8007586:	2380      	movs	r3, #128	@ 0x80
 8007588:	005b      	lsls	r3, r3, #1
 800758a:	4013      	ands	r3, r2
 800758c:	d11a      	bne.n	80075c4 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800758e:	4ba5      	ldr	r3, [pc, #660]	@ (8007824 <HAL_RCC_OscConfig+0x630>)
 8007590:	681a      	ldr	r2, [r3, #0]
 8007592:	4ba4      	ldr	r3, [pc, #656]	@ (8007824 <HAL_RCC_OscConfig+0x630>)
 8007594:	2180      	movs	r1, #128	@ 0x80
 8007596:	0049      	lsls	r1, r1, #1
 8007598:	430a      	orrs	r2, r1
 800759a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800759c:	f7fe fcfc 	bl	8005f98 <HAL_GetTick>
 80075a0:	0003      	movs	r3, r0
 80075a2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80075a4:	e008      	b.n	80075b8 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80075a6:	f7fe fcf7 	bl	8005f98 <HAL_GetTick>
 80075aa:	0002      	movs	r2, r0
 80075ac:	693b      	ldr	r3, [r7, #16]
 80075ae:	1ad3      	subs	r3, r2, r3
 80075b0:	2b02      	cmp	r3, #2
 80075b2:	d901      	bls.n	80075b8 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 80075b4:	2303      	movs	r3, #3
 80075b6:	e177      	b.n	80078a8 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80075b8:	4b9a      	ldr	r3, [pc, #616]	@ (8007824 <HAL_RCC_OscConfig+0x630>)
 80075ba:	681a      	ldr	r2, [r3, #0]
 80075bc:	2380      	movs	r3, #128	@ 0x80
 80075be:	005b      	lsls	r3, r3, #1
 80075c0:	4013      	ands	r3, r2
 80075c2:	d0f0      	beq.n	80075a6 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	689b      	ldr	r3, [r3, #8]
 80075c8:	2b01      	cmp	r3, #1
 80075ca:	d106      	bne.n	80075da <HAL_RCC_OscConfig+0x3e6>
 80075cc:	4b94      	ldr	r3, [pc, #592]	@ (8007820 <HAL_RCC_OscConfig+0x62c>)
 80075ce:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80075d0:	4b93      	ldr	r3, [pc, #588]	@ (8007820 <HAL_RCC_OscConfig+0x62c>)
 80075d2:	2101      	movs	r1, #1
 80075d4:	430a      	orrs	r2, r1
 80075d6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80075d8:	e01c      	b.n	8007614 <HAL_RCC_OscConfig+0x420>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	689b      	ldr	r3, [r3, #8]
 80075de:	2b05      	cmp	r3, #5
 80075e0:	d10c      	bne.n	80075fc <HAL_RCC_OscConfig+0x408>
 80075e2:	4b8f      	ldr	r3, [pc, #572]	@ (8007820 <HAL_RCC_OscConfig+0x62c>)
 80075e4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80075e6:	4b8e      	ldr	r3, [pc, #568]	@ (8007820 <HAL_RCC_OscConfig+0x62c>)
 80075e8:	2104      	movs	r1, #4
 80075ea:	430a      	orrs	r2, r1
 80075ec:	65da      	str	r2, [r3, #92]	@ 0x5c
 80075ee:	4b8c      	ldr	r3, [pc, #560]	@ (8007820 <HAL_RCC_OscConfig+0x62c>)
 80075f0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80075f2:	4b8b      	ldr	r3, [pc, #556]	@ (8007820 <HAL_RCC_OscConfig+0x62c>)
 80075f4:	2101      	movs	r1, #1
 80075f6:	430a      	orrs	r2, r1
 80075f8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80075fa:	e00b      	b.n	8007614 <HAL_RCC_OscConfig+0x420>
 80075fc:	4b88      	ldr	r3, [pc, #544]	@ (8007820 <HAL_RCC_OscConfig+0x62c>)
 80075fe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007600:	4b87      	ldr	r3, [pc, #540]	@ (8007820 <HAL_RCC_OscConfig+0x62c>)
 8007602:	2101      	movs	r1, #1
 8007604:	438a      	bics	r2, r1
 8007606:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007608:	4b85      	ldr	r3, [pc, #532]	@ (8007820 <HAL_RCC_OscConfig+0x62c>)
 800760a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800760c:	4b84      	ldr	r3, [pc, #528]	@ (8007820 <HAL_RCC_OscConfig+0x62c>)
 800760e:	2104      	movs	r1, #4
 8007610:	438a      	bics	r2, r1
 8007612:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	689b      	ldr	r3, [r3, #8]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d014      	beq.n	8007646 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800761c:	f7fe fcbc 	bl	8005f98 <HAL_GetTick>
 8007620:	0003      	movs	r3, r0
 8007622:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007624:	e009      	b.n	800763a <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007626:	f7fe fcb7 	bl	8005f98 <HAL_GetTick>
 800762a:	0002      	movs	r2, r0
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	1ad3      	subs	r3, r2, r3
 8007630:	4a7d      	ldr	r2, [pc, #500]	@ (8007828 <HAL_RCC_OscConfig+0x634>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d901      	bls.n	800763a <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8007636:	2303      	movs	r3, #3
 8007638:	e136      	b.n	80078a8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800763a:	4b79      	ldr	r3, [pc, #484]	@ (8007820 <HAL_RCC_OscConfig+0x62c>)
 800763c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800763e:	2202      	movs	r2, #2
 8007640:	4013      	ands	r3, r2
 8007642:	d0f0      	beq.n	8007626 <HAL_RCC_OscConfig+0x432>
 8007644:	e013      	b.n	800766e <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007646:	f7fe fca7 	bl	8005f98 <HAL_GetTick>
 800764a:	0003      	movs	r3, r0
 800764c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800764e:	e009      	b.n	8007664 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007650:	f7fe fca2 	bl	8005f98 <HAL_GetTick>
 8007654:	0002      	movs	r2, r0
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	1ad3      	subs	r3, r2, r3
 800765a:	4a73      	ldr	r2, [pc, #460]	@ (8007828 <HAL_RCC_OscConfig+0x634>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d901      	bls.n	8007664 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8007660:	2303      	movs	r3, #3
 8007662:	e121      	b.n	80078a8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007664:	4b6e      	ldr	r3, [pc, #440]	@ (8007820 <HAL_RCC_OscConfig+0x62c>)
 8007666:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007668:	2202      	movs	r2, #2
 800766a:	4013      	ands	r3, r2
 800766c:	d1f0      	bne.n	8007650 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800766e:	231f      	movs	r3, #31
 8007670:	18fb      	adds	r3, r7, r3
 8007672:	781b      	ldrb	r3, [r3, #0]
 8007674:	2b01      	cmp	r3, #1
 8007676:	d105      	bne.n	8007684 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8007678:	4b69      	ldr	r3, [pc, #420]	@ (8007820 <HAL_RCC_OscConfig+0x62c>)
 800767a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800767c:	4b68      	ldr	r3, [pc, #416]	@ (8007820 <HAL_RCC_OscConfig+0x62c>)
 800767e:	496b      	ldr	r1, [pc, #428]	@ (800782c <HAL_RCC_OscConfig+0x638>)
 8007680:	400a      	ands	r2, r1
 8007682:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	2220      	movs	r2, #32
 800768a:	4013      	ands	r3, r2
 800768c:	d039      	beq.n	8007702 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	69db      	ldr	r3, [r3, #28]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d01b      	beq.n	80076ce <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007696:	4b62      	ldr	r3, [pc, #392]	@ (8007820 <HAL_RCC_OscConfig+0x62c>)
 8007698:	681a      	ldr	r2, [r3, #0]
 800769a:	4b61      	ldr	r3, [pc, #388]	@ (8007820 <HAL_RCC_OscConfig+0x62c>)
 800769c:	2180      	movs	r1, #128	@ 0x80
 800769e:	03c9      	lsls	r1, r1, #15
 80076a0:	430a      	orrs	r2, r1
 80076a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076a4:	f7fe fc78 	bl	8005f98 <HAL_GetTick>
 80076a8:	0003      	movs	r3, r0
 80076aa:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80076ac:	e008      	b.n	80076c0 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80076ae:	f7fe fc73 	bl	8005f98 <HAL_GetTick>
 80076b2:	0002      	movs	r2, r0
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	1ad3      	subs	r3, r2, r3
 80076b8:	2b02      	cmp	r3, #2
 80076ba:	d901      	bls.n	80076c0 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 80076bc:	2303      	movs	r3, #3
 80076be:	e0f3      	b.n	80078a8 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80076c0:	4b57      	ldr	r3, [pc, #348]	@ (8007820 <HAL_RCC_OscConfig+0x62c>)
 80076c2:	681a      	ldr	r2, [r3, #0]
 80076c4:	2380      	movs	r3, #128	@ 0x80
 80076c6:	041b      	lsls	r3, r3, #16
 80076c8:	4013      	ands	r3, r2
 80076ca:	d0f0      	beq.n	80076ae <HAL_RCC_OscConfig+0x4ba>
 80076cc:	e019      	b.n	8007702 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80076ce:	4b54      	ldr	r3, [pc, #336]	@ (8007820 <HAL_RCC_OscConfig+0x62c>)
 80076d0:	681a      	ldr	r2, [r3, #0]
 80076d2:	4b53      	ldr	r3, [pc, #332]	@ (8007820 <HAL_RCC_OscConfig+0x62c>)
 80076d4:	4956      	ldr	r1, [pc, #344]	@ (8007830 <HAL_RCC_OscConfig+0x63c>)
 80076d6:	400a      	ands	r2, r1
 80076d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076da:	f7fe fc5d 	bl	8005f98 <HAL_GetTick>
 80076de:	0003      	movs	r3, r0
 80076e0:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80076e2:	e008      	b.n	80076f6 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80076e4:	f7fe fc58 	bl	8005f98 <HAL_GetTick>
 80076e8:	0002      	movs	r2, r0
 80076ea:	693b      	ldr	r3, [r7, #16]
 80076ec:	1ad3      	subs	r3, r2, r3
 80076ee:	2b02      	cmp	r3, #2
 80076f0:	d901      	bls.n	80076f6 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 80076f2:	2303      	movs	r3, #3
 80076f4:	e0d8      	b.n	80078a8 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80076f6:	4b4a      	ldr	r3, [pc, #296]	@ (8007820 <HAL_RCC_OscConfig+0x62c>)
 80076f8:	681a      	ldr	r2, [r3, #0]
 80076fa:	2380      	movs	r3, #128	@ 0x80
 80076fc:	041b      	lsls	r3, r3, #16
 80076fe:	4013      	ands	r3, r2
 8007700:	d1f0      	bne.n	80076e4 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6a1b      	ldr	r3, [r3, #32]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d100      	bne.n	800770c <HAL_RCC_OscConfig+0x518>
 800770a:	e0cc      	b.n	80078a6 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800770c:	4b44      	ldr	r3, [pc, #272]	@ (8007820 <HAL_RCC_OscConfig+0x62c>)
 800770e:	689b      	ldr	r3, [r3, #8]
 8007710:	2238      	movs	r2, #56	@ 0x38
 8007712:	4013      	ands	r3, r2
 8007714:	2b10      	cmp	r3, #16
 8007716:	d100      	bne.n	800771a <HAL_RCC_OscConfig+0x526>
 8007718:	e07b      	b.n	8007812 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6a1b      	ldr	r3, [r3, #32]
 800771e:	2b02      	cmp	r3, #2
 8007720:	d156      	bne.n	80077d0 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007722:	4b3f      	ldr	r3, [pc, #252]	@ (8007820 <HAL_RCC_OscConfig+0x62c>)
 8007724:	681a      	ldr	r2, [r3, #0]
 8007726:	4b3e      	ldr	r3, [pc, #248]	@ (8007820 <HAL_RCC_OscConfig+0x62c>)
 8007728:	4942      	ldr	r1, [pc, #264]	@ (8007834 <HAL_RCC_OscConfig+0x640>)
 800772a:	400a      	ands	r2, r1
 800772c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800772e:	f7fe fc33 	bl	8005f98 <HAL_GetTick>
 8007732:	0003      	movs	r3, r0
 8007734:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007736:	e008      	b.n	800774a <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007738:	f7fe fc2e 	bl	8005f98 <HAL_GetTick>
 800773c:	0002      	movs	r2, r0
 800773e:	693b      	ldr	r3, [r7, #16]
 8007740:	1ad3      	subs	r3, r2, r3
 8007742:	2b02      	cmp	r3, #2
 8007744:	d901      	bls.n	800774a <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8007746:	2303      	movs	r3, #3
 8007748:	e0ae      	b.n	80078a8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800774a:	4b35      	ldr	r3, [pc, #212]	@ (8007820 <HAL_RCC_OscConfig+0x62c>)
 800774c:	681a      	ldr	r2, [r3, #0]
 800774e:	2380      	movs	r3, #128	@ 0x80
 8007750:	049b      	lsls	r3, r3, #18
 8007752:	4013      	ands	r3, r2
 8007754:	d1f0      	bne.n	8007738 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007756:	4b32      	ldr	r3, [pc, #200]	@ (8007820 <HAL_RCC_OscConfig+0x62c>)
 8007758:	68db      	ldr	r3, [r3, #12]
 800775a:	4a37      	ldr	r2, [pc, #220]	@ (8007838 <HAL_RCC_OscConfig+0x644>)
 800775c:	4013      	ands	r3, r2
 800775e:	0019      	movs	r1, r3
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007768:	431a      	orrs	r2, r3
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800776e:	021b      	lsls	r3, r3, #8
 8007770:	431a      	orrs	r2, r3
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007776:	431a      	orrs	r2, r3
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800777c:	431a      	orrs	r2, r3
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007782:	431a      	orrs	r2, r3
 8007784:	4b26      	ldr	r3, [pc, #152]	@ (8007820 <HAL_RCC_OscConfig+0x62c>)
 8007786:	430a      	orrs	r2, r1
 8007788:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800778a:	4b25      	ldr	r3, [pc, #148]	@ (8007820 <HAL_RCC_OscConfig+0x62c>)
 800778c:	681a      	ldr	r2, [r3, #0]
 800778e:	4b24      	ldr	r3, [pc, #144]	@ (8007820 <HAL_RCC_OscConfig+0x62c>)
 8007790:	2180      	movs	r1, #128	@ 0x80
 8007792:	0449      	lsls	r1, r1, #17
 8007794:	430a      	orrs	r2, r1
 8007796:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8007798:	4b21      	ldr	r3, [pc, #132]	@ (8007820 <HAL_RCC_OscConfig+0x62c>)
 800779a:	68da      	ldr	r2, [r3, #12]
 800779c:	4b20      	ldr	r3, [pc, #128]	@ (8007820 <HAL_RCC_OscConfig+0x62c>)
 800779e:	2180      	movs	r1, #128	@ 0x80
 80077a0:	0549      	lsls	r1, r1, #21
 80077a2:	430a      	orrs	r2, r1
 80077a4:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077a6:	f7fe fbf7 	bl	8005f98 <HAL_GetTick>
 80077aa:	0003      	movs	r3, r0
 80077ac:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80077ae:	e008      	b.n	80077c2 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80077b0:	f7fe fbf2 	bl	8005f98 <HAL_GetTick>
 80077b4:	0002      	movs	r2, r0
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	1ad3      	subs	r3, r2, r3
 80077ba:	2b02      	cmp	r3, #2
 80077bc:	d901      	bls.n	80077c2 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 80077be:	2303      	movs	r3, #3
 80077c0:	e072      	b.n	80078a8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80077c2:	4b17      	ldr	r3, [pc, #92]	@ (8007820 <HAL_RCC_OscConfig+0x62c>)
 80077c4:	681a      	ldr	r2, [r3, #0]
 80077c6:	2380      	movs	r3, #128	@ 0x80
 80077c8:	049b      	lsls	r3, r3, #18
 80077ca:	4013      	ands	r3, r2
 80077cc:	d0f0      	beq.n	80077b0 <HAL_RCC_OscConfig+0x5bc>
 80077ce:	e06a      	b.n	80078a6 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80077d0:	4b13      	ldr	r3, [pc, #76]	@ (8007820 <HAL_RCC_OscConfig+0x62c>)
 80077d2:	681a      	ldr	r2, [r3, #0]
 80077d4:	4b12      	ldr	r3, [pc, #72]	@ (8007820 <HAL_RCC_OscConfig+0x62c>)
 80077d6:	4917      	ldr	r1, [pc, #92]	@ (8007834 <HAL_RCC_OscConfig+0x640>)
 80077d8:	400a      	ands	r2, r1
 80077da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077dc:	f7fe fbdc 	bl	8005f98 <HAL_GetTick>
 80077e0:	0003      	movs	r3, r0
 80077e2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80077e4:	e008      	b.n	80077f8 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80077e6:	f7fe fbd7 	bl	8005f98 <HAL_GetTick>
 80077ea:	0002      	movs	r2, r0
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	1ad3      	subs	r3, r2, r3
 80077f0:	2b02      	cmp	r3, #2
 80077f2:	d901      	bls.n	80077f8 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 80077f4:	2303      	movs	r3, #3
 80077f6:	e057      	b.n	80078a8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80077f8:	4b09      	ldr	r3, [pc, #36]	@ (8007820 <HAL_RCC_OscConfig+0x62c>)
 80077fa:	681a      	ldr	r2, [r3, #0]
 80077fc:	2380      	movs	r3, #128	@ 0x80
 80077fe:	049b      	lsls	r3, r3, #18
 8007800:	4013      	ands	r3, r2
 8007802:	d1f0      	bne.n	80077e6 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8007804:	4b06      	ldr	r3, [pc, #24]	@ (8007820 <HAL_RCC_OscConfig+0x62c>)
 8007806:	68da      	ldr	r2, [r3, #12]
 8007808:	4b05      	ldr	r3, [pc, #20]	@ (8007820 <HAL_RCC_OscConfig+0x62c>)
 800780a:	490c      	ldr	r1, [pc, #48]	@ (800783c <HAL_RCC_OscConfig+0x648>)
 800780c:	400a      	ands	r2, r1
 800780e:	60da      	str	r2, [r3, #12]
 8007810:	e049      	b.n	80078a6 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6a1b      	ldr	r3, [r3, #32]
 8007816:	2b01      	cmp	r3, #1
 8007818:	d112      	bne.n	8007840 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 800781a:	2301      	movs	r3, #1
 800781c:	e044      	b.n	80078a8 <HAL_RCC_OscConfig+0x6b4>
 800781e:	46c0      	nop			@ (mov r8, r8)
 8007820:	40021000 	.word	0x40021000
 8007824:	40007000 	.word	0x40007000
 8007828:	00001388 	.word	0x00001388
 800782c:	efffffff 	.word	0xefffffff
 8007830:	ffbfffff 	.word	0xffbfffff
 8007834:	feffffff 	.word	0xfeffffff
 8007838:	11c1808c 	.word	0x11c1808c
 800783c:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8007840:	4b1b      	ldr	r3, [pc, #108]	@ (80078b0 <HAL_RCC_OscConfig+0x6bc>)
 8007842:	68db      	ldr	r3, [r3, #12]
 8007844:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	2203      	movs	r2, #3
 800784a:	401a      	ands	r2, r3
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007850:	429a      	cmp	r2, r3
 8007852:	d126      	bne.n	80078a2 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	2270      	movs	r2, #112	@ 0x70
 8007858:	401a      	ands	r2, r3
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800785e:	429a      	cmp	r2, r3
 8007860:	d11f      	bne.n	80078a2 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007862:	697a      	ldr	r2, [r7, #20]
 8007864:	23fe      	movs	r3, #254	@ 0xfe
 8007866:	01db      	lsls	r3, r3, #7
 8007868:	401a      	ands	r2, r3
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800786e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007870:	429a      	cmp	r2, r3
 8007872:	d116      	bne.n	80078a2 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007874:	697a      	ldr	r2, [r7, #20]
 8007876:	23f8      	movs	r3, #248	@ 0xf8
 8007878:	039b      	lsls	r3, r3, #14
 800787a:	401a      	ands	r2, r3
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007880:	429a      	cmp	r2, r3
 8007882:	d10e      	bne.n	80078a2 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8007884:	697a      	ldr	r2, [r7, #20]
 8007886:	23e0      	movs	r3, #224	@ 0xe0
 8007888:	051b      	lsls	r3, r3, #20
 800788a:	401a      	ands	r2, r3
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007890:	429a      	cmp	r2, r3
 8007892:	d106      	bne.n	80078a2 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	0f5b      	lsrs	r3, r3, #29
 8007898:	075a      	lsls	r2, r3, #29
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800789e:	429a      	cmp	r2, r3
 80078a0:	d001      	beq.n	80078a6 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 80078a2:	2301      	movs	r3, #1
 80078a4:	e000      	b.n	80078a8 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 80078a6:	2300      	movs	r3, #0
}
 80078a8:	0018      	movs	r0, r3
 80078aa:	46bd      	mov	sp, r7
 80078ac:	b008      	add	sp, #32
 80078ae:	bd80      	pop	{r7, pc}
 80078b0:	40021000 	.word	0x40021000

080078b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b084      	sub	sp, #16
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
 80078bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d101      	bne.n	80078c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80078c4:	2301      	movs	r3, #1
 80078c6:	e0e9      	b.n	8007a9c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80078c8:	4b76      	ldr	r3, [pc, #472]	@ (8007aa4 <HAL_RCC_ClockConfig+0x1f0>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	2207      	movs	r2, #7
 80078ce:	4013      	ands	r3, r2
 80078d0:	683a      	ldr	r2, [r7, #0]
 80078d2:	429a      	cmp	r2, r3
 80078d4:	d91e      	bls.n	8007914 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80078d6:	4b73      	ldr	r3, [pc, #460]	@ (8007aa4 <HAL_RCC_ClockConfig+0x1f0>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	2207      	movs	r2, #7
 80078dc:	4393      	bics	r3, r2
 80078de:	0019      	movs	r1, r3
 80078e0:	4b70      	ldr	r3, [pc, #448]	@ (8007aa4 <HAL_RCC_ClockConfig+0x1f0>)
 80078e2:	683a      	ldr	r2, [r7, #0]
 80078e4:	430a      	orrs	r2, r1
 80078e6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80078e8:	f7fe fb56 	bl	8005f98 <HAL_GetTick>
 80078ec:	0003      	movs	r3, r0
 80078ee:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80078f0:	e009      	b.n	8007906 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80078f2:	f7fe fb51 	bl	8005f98 <HAL_GetTick>
 80078f6:	0002      	movs	r2, r0
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	1ad3      	subs	r3, r2, r3
 80078fc:	4a6a      	ldr	r2, [pc, #424]	@ (8007aa8 <HAL_RCC_ClockConfig+0x1f4>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d901      	bls.n	8007906 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8007902:	2303      	movs	r3, #3
 8007904:	e0ca      	b.n	8007a9c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007906:	4b67      	ldr	r3, [pc, #412]	@ (8007aa4 <HAL_RCC_ClockConfig+0x1f0>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	2207      	movs	r2, #7
 800790c:	4013      	ands	r3, r2
 800790e:	683a      	ldr	r2, [r7, #0]
 8007910:	429a      	cmp	r2, r3
 8007912:	d1ee      	bne.n	80078f2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	2202      	movs	r2, #2
 800791a:	4013      	ands	r3, r2
 800791c:	d015      	beq.n	800794a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	2204      	movs	r2, #4
 8007924:	4013      	ands	r3, r2
 8007926:	d006      	beq.n	8007936 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8007928:	4b60      	ldr	r3, [pc, #384]	@ (8007aac <HAL_RCC_ClockConfig+0x1f8>)
 800792a:	689a      	ldr	r2, [r3, #8]
 800792c:	4b5f      	ldr	r3, [pc, #380]	@ (8007aac <HAL_RCC_ClockConfig+0x1f8>)
 800792e:	21e0      	movs	r1, #224	@ 0xe0
 8007930:	01c9      	lsls	r1, r1, #7
 8007932:	430a      	orrs	r2, r1
 8007934:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007936:	4b5d      	ldr	r3, [pc, #372]	@ (8007aac <HAL_RCC_ClockConfig+0x1f8>)
 8007938:	689b      	ldr	r3, [r3, #8]
 800793a:	4a5d      	ldr	r2, [pc, #372]	@ (8007ab0 <HAL_RCC_ClockConfig+0x1fc>)
 800793c:	4013      	ands	r3, r2
 800793e:	0019      	movs	r1, r3
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	689a      	ldr	r2, [r3, #8]
 8007944:	4b59      	ldr	r3, [pc, #356]	@ (8007aac <HAL_RCC_ClockConfig+0x1f8>)
 8007946:	430a      	orrs	r2, r1
 8007948:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	2201      	movs	r2, #1
 8007950:	4013      	ands	r3, r2
 8007952:	d057      	beq.n	8007a04 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	685b      	ldr	r3, [r3, #4]
 8007958:	2b01      	cmp	r3, #1
 800795a:	d107      	bne.n	800796c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800795c:	4b53      	ldr	r3, [pc, #332]	@ (8007aac <HAL_RCC_ClockConfig+0x1f8>)
 800795e:	681a      	ldr	r2, [r3, #0]
 8007960:	2380      	movs	r3, #128	@ 0x80
 8007962:	029b      	lsls	r3, r3, #10
 8007964:	4013      	ands	r3, r2
 8007966:	d12b      	bne.n	80079c0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007968:	2301      	movs	r3, #1
 800796a:	e097      	b.n	8007a9c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	2b02      	cmp	r3, #2
 8007972:	d107      	bne.n	8007984 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007974:	4b4d      	ldr	r3, [pc, #308]	@ (8007aac <HAL_RCC_ClockConfig+0x1f8>)
 8007976:	681a      	ldr	r2, [r3, #0]
 8007978:	2380      	movs	r3, #128	@ 0x80
 800797a:	049b      	lsls	r3, r3, #18
 800797c:	4013      	ands	r3, r2
 800797e:	d11f      	bne.n	80079c0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007980:	2301      	movs	r3, #1
 8007982:	e08b      	b.n	8007a9c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	685b      	ldr	r3, [r3, #4]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d107      	bne.n	800799c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800798c:	4b47      	ldr	r3, [pc, #284]	@ (8007aac <HAL_RCC_ClockConfig+0x1f8>)
 800798e:	681a      	ldr	r2, [r3, #0]
 8007990:	2380      	movs	r3, #128	@ 0x80
 8007992:	00db      	lsls	r3, r3, #3
 8007994:	4013      	ands	r3, r2
 8007996:	d113      	bne.n	80079c0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007998:	2301      	movs	r3, #1
 800799a:	e07f      	b.n	8007a9c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	2b03      	cmp	r3, #3
 80079a2:	d106      	bne.n	80079b2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80079a4:	4b41      	ldr	r3, [pc, #260]	@ (8007aac <HAL_RCC_ClockConfig+0x1f8>)
 80079a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80079a8:	2202      	movs	r2, #2
 80079aa:	4013      	ands	r3, r2
 80079ac:	d108      	bne.n	80079c0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80079ae:	2301      	movs	r3, #1
 80079b0:	e074      	b.n	8007a9c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80079b2:	4b3e      	ldr	r3, [pc, #248]	@ (8007aac <HAL_RCC_ClockConfig+0x1f8>)
 80079b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80079b6:	2202      	movs	r2, #2
 80079b8:	4013      	ands	r3, r2
 80079ba:	d101      	bne.n	80079c0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80079bc:	2301      	movs	r3, #1
 80079be:	e06d      	b.n	8007a9c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80079c0:	4b3a      	ldr	r3, [pc, #232]	@ (8007aac <HAL_RCC_ClockConfig+0x1f8>)
 80079c2:	689b      	ldr	r3, [r3, #8]
 80079c4:	2207      	movs	r2, #7
 80079c6:	4393      	bics	r3, r2
 80079c8:	0019      	movs	r1, r3
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	685a      	ldr	r2, [r3, #4]
 80079ce:	4b37      	ldr	r3, [pc, #220]	@ (8007aac <HAL_RCC_ClockConfig+0x1f8>)
 80079d0:	430a      	orrs	r2, r1
 80079d2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079d4:	f7fe fae0 	bl	8005f98 <HAL_GetTick>
 80079d8:	0003      	movs	r3, r0
 80079da:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80079dc:	e009      	b.n	80079f2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80079de:	f7fe fadb 	bl	8005f98 <HAL_GetTick>
 80079e2:	0002      	movs	r2, r0
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	1ad3      	subs	r3, r2, r3
 80079e8:	4a2f      	ldr	r2, [pc, #188]	@ (8007aa8 <HAL_RCC_ClockConfig+0x1f4>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d901      	bls.n	80079f2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80079ee:	2303      	movs	r3, #3
 80079f0:	e054      	b.n	8007a9c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80079f2:	4b2e      	ldr	r3, [pc, #184]	@ (8007aac <HAL_RCC_ClockConfig+0x1f8>)
 80079f4:	689b      	ldr	r3, [r3, #8]
 80079f6:	2238      	movs	r2, #56	@ 0x38
 80079f8:	401a      	ands	r2, r3
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	00db      	lsls	r3, r3, #3
 8007a00:	429a      	cmp	r2, r3
 8007a02:	d1ec      	bne.n	80079de <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007a04:	4b27      	ldr	r3, [pc, #156]	@ (8007aa4 <HAL_RCC_ClockConfig+0x1f0>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	2207      	movs	r2, #7
 8007a0a:	4013      	ands	r3, r2
 8007a0c:	683a      	ldr	r2, [r7, #0]
 8007a0e:	429a      	cmp	r2, r3
 8007a10:	d21e      	bcs.n	8007a50 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a12:	4b24      	ldr	r3, [pc, #144]	@ (8007aa4 <HAL_RCC_ClockConfig+0x1f0>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	2207      	movs	r2, #7
 8007a18:	4393      	bics	r3, r2
 8007a1a:	0019      	movs	r1, r3
 8007a1c:	4b21      	ldr	r3, [pc, #132]	@ (8007aa4 <HAL_RCC_ClockConfig+0x1f0>)
 8007a1e:	683a      	ldr	r2, [r7, #0]
 8007a20:	430a      	orrs	r2, r1
 8007a22:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007a24:	f7fe fab8 	bl	8005f98 <HAL_GetTick>
 8007a28:	0003      	movs	r3, r0
 8007a2a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007a2c:	e009      	b.n	8007a42 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007a2e:	f7fe fab3 	bl	8005f98 <HAL_GetTick>
 8007a32:	0002      	movs	r2, r0
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	1ad3      	subs	r3, r2, r3
 8007a38:	4a1b      	ldr	r2, [pc, #108]	@ (8007aa8 <HAL_RCC_ClockConfig+0x1f4>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d901      	bls.n	8007a42 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8007a3e:	2303      	movs	r3, #3
 8007a40:	e02c      	b.n	8007a9c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007a42:	4b18      	ldr	r3, [pc, #96]	@ (8007aa4 <HAL_RCC_ClockConfig+0x1f0>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	2207      	movs	r2, #7
 8007a48:	4013      	ands	r3, r2
 8007a4a:	683a      	ldr	r2, [r7, #0]
 8007a4c:	429a      	cmp	r2, r3
 8007a4e:	d1ee      	bne.n	8007a2e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	2204      	movs	r2, #4
 8007a56:	4013      	ands	r3, r2
 8007a58:	d009      	beq.n	8007a6e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8007a5a:	4b14      	ldr	r3, [pc, #80]	@ (8007aac <HAL_RCC_ClockConfig+0x1f8>)
 8007a5c:	689b      	ldr	r3, [r3, #8]
 8007a5e:	4a15      	ldr	r2, [pc, #84]	@ (8007ab4 <HAL_RCC_ClockConfig+0x200>)
 8007a60:	4013      	ands	r3, r2
 8007a62:	0019      	movs	r1, r3
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	68da      	ldr	r2, [r3, #12]
 8007a68:	4b10      	ldr	r3, [pc, #64]	@ (8007aac <HAL_RCC_ClockConfig+0x1f8>)
 8007a6a:	430a      	orrs	r2, r1
 8007a6c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8007a6e:	f000 f829 	bl	8007ac4 <HAL_RCC_GetSysClockFreq>
 8007a72:	0001      	movs	r1, r0
 8007a74:	4b0d      	ldr	r3, [pc, #52]	@ (8007aac <HAL_RCC_ClockConfig+0x1f8>)
 8007a76:	689b      	ldr	r3, [r3, #8]
 8007a78:	0a1b      	lsrs	r3, r3, #8
 8007a7a:	220f      	movs	r2, #15
 8007a7c:	401a      	ands	r2, r3
 8007a7e:	4b0e      	ldr	r3, [pc, #56]	@ (8007ab8 <HAL_RCC_ClockConfig+0x204>)
 8007a80:	0092      	lsls	r2, r2, #2
 8007a82:	58d3      	ldr	r3, [r2, r3]
 8007a84:	221f      	movs	r2, #31
 8007a86:	4013      	ands	r3, r2
 8007a88:	000a      	movs	r2, r1
 8007a8a:	40da      	lsrs	r2, r3
 8007a8c:	4b0b      	ldr	r3, [pc, #44]	@ (8007abc <HAL_RCC_ClockConfig+0x208>)
 8007a8e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007a90:	4b0b      	ldr	r3, [pc, #44]	@ (8007ac0 <HAL_RCC_ClockConfig+0x20c>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	0018      	movs	r0, r3
 8007a96:	f7fe fa23 	bl	8005ee0 <HAL_InitTick>
 8007a9a:	0003      	movs	r3, r0
}
 8007a9c:	0018      	movs	r0, r3
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	b004      	add	sp, #16
 8007aa2:	bd80      	pop	{r7, pc}
 8007aa4:	40022000 	.word	0x40022000
 8007aa8:	00001388 	.word	0x00001388
 8007aac:	40021000 	.word	0x40021000
 8007ab0:	fffff0ff 	.word	0xfffff0ff
 8007ab4:	ffff8fff 	.word	0xffff8fff
 8007ab8:	0800c0e8 	.word	0x0800c0e8
 8007abc:	20000e84 	.word	0x20000e84
 8007ac0:	20000e88 	.word	0x20000e88

08007ac4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b086      	sub	sp, #24
 8007ac8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007aca:	4b3c      	ldr	r3, [pc, #240]	@ (8007bbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8007acc:	689b      	ldr	r3, [r3, #8]
 8007ace:	2238      	movs	r2, #56	@ 0x38
 8007ad0:	4013      	ands	r3, r2
 8007ad2:	d10f      	bne.n	8007af4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8007ad4:	4b39      	ldr	r3, [pc, #228]	@ (8007bbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	0adb      	lsrs	r3, r3, #11
 8007ada:	2207      	movs	r2, #7
 8007adc:	4013      	ands	r3, r2
 8007ade:	2201      	movs	r2, #1
 8007ae0:	409a      	lsls	r2, r3
 8007ae2:	0013      	movs	r3, r2
 8007ae4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8007ae6:	6839      	ldr	r1, [r7, #0]
 8007ae8:	4835      	ldr	r0, [pc, #212]	@ (8007bc0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8007aea:	f7f8 fb1f 	bl	800012c <__udivsi3>
 8007aee:	0003      	movs	r3, r0
 8007af0:	613b      	str	r3, [r7, #16]
 8007af2:	e05d      	b.n	8007bb0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007af4:	4b31      	ldr	r3, [pc, #196]	@ (8007bbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8007af6:	689b      	ldr	r3, [r3, #8]
 8007af8:	2238      	movs	r2, #56	@ 0x38
 8007afa:	4013      	ands	r3, r2
 8007afc:	2b08      	cmp	r3, #8
 8007afe:	d102      	bne.n	8007b06 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007b00:	4b30      	ldr	r3, [pc, #192]	@ (8007bc4 <HAL_RCC_GetSysClockFreq+0x100>)
 8007b02:	613b      	str	r3, [r7, #16]
 8007b04:	e054      	b.n	8007bb0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007b06:	4b2d      	ldr	r3, [pc, #180]	@ (8007bbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8007b08:	689b      	ldr	r3, [r3, #8]
 8007b0a:	2238      	movs	r2, #56	@ 0x38
 8007b0c:	4013      	ands	r3, r2
 8007b0e:	2b10      	cmp	r3, #16
 8007b10:	d138      	bne.n	8007b84 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8007b12:	4b2a      	ldr	r3, [pc, #168]	@ (8007bbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8007b14:	68db      	ldr	r3, [r3, #12]
 8007b16:	2203      	movs	r2, #3
 8007b18:	4013      	ands	r3, r2
 8007b1a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007b1c:	4b27      	ldr	r3, [pc, #156]	@ (8007bbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8007b1e:	68db      	ldr	r3, [r3, #12]
 8007b20:	091b      	lsrs	r3, r3, #4
 8007b22:	2207      	movs	r2, #7
 8007b24:	4013      	ands	r3, r2
 8007b26:	3301      	adds	r3, #1
 8007b28:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	2b03      	cmp	r3, #3
 8007b2e:	d10d      	bne.n	8007b4c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007b30:	68b9      	ldr	r1, [r7, #8]
 8007b32:	4824      	ldr	r0, [pc, #144]	@ (8007bc4 <HAL_RCC_GetSysClockFreq+0x100>)
 8007b34:	f7f8 fafa 	bl	800012c <__udivsi3>
 8007b38:	0003      	movs	r3, r0
 8007b3a:	0019      	movs	r1, r3
 8007b3c:	4b1f      	ldr	r3, [pc, #124]	@ (8007bbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8007b3e:	68db      	ldr	r3, [r3, #12]
 8007b40:	0a1b      	lsrs	r3, r3, #8
 8007b42:	227f      	movs	r2, #127	@ 0x7f
 8007b44:	4013      	ands	r3, r2
 8007b46:	434b      	muls	r3, r1
 8007b48:	617b      	str	r3, [r7, #20]
        break;
 8007b4a:	e00d      	b.n	8007b68 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8007b4c:	68b9      	ldr	r1, [r7, #8]
 8007b4e:	481c      	ldr	r0, [pc, #112]	@ (8007bc0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8007b50:	f7f8 faec 	bl	800012c <__udivsi3>
 8007b54:	0003      	movs	r3, r0
 8007b56:	0019      	movs	r1, r3
 8007b58:	4b18      	ldr	r3, [pc, #96]	@ (8007bbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8007b5a:	68db      	ldr	r3, [r3, #12]
 8007b5c:	0a1b      	lsrs	r3, r3, #8
 8007b5e:	227f      	movs	r2, #127	@ 0x7f
 8007b60:	4013      	ands	r3, r2
 8007b62:	434b      	muls	r3, r1
 8007b64:	617b      	str	r3, [r7, #20]
        break;
 8007b66:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8007b68:	4b14      	ldr	r3, [pc, #80]	@ (8007bbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8007b6a:	68db      	ldr	r3, [r3, #12]
 8007b6c:	0f5b      	lsrs	r3, r3, #29
 8007b6e:	2207      	movs	r2, #7
 8007b70:	4013      	ands	r3, r2
 8007b72:	3301      	adds	r3, #1
 8007b74:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8007b76:	6879      	ldr	r1, [r7, #4]
 8007b78:	6978      	ldr	r0, [r7, #20]
 8007b7a:	f7f8 fad7 	bl	800012c <__udivsi3>
 8007b7e:	0003      	movs	r3, r0
 8007b80:	613b      	str	r3, [r7, #16]
 8007b82:	e015      	b.n	8007bb0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8007b84:	4b0d      	ldr	r3, [pc, #52]	@ (8007bbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8007b86:	689b      	ldr	r3, [r3, #8]
 8007b88:	2238      	movs	r2, #56	@ 0x38
 8007b8a:	4013      	ands	r3, r2
 8007b8c:	2b20      	cmp	r3, #32
 8007b8e:	d103      	bne.n	8007b98 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8007b90:	2380      	movs	r3, #128	@ 0x80
 8007b92:	021b      	lsls	r3, r3, #8
 8007b94:	613b      	str	r3, [r7, #16]
 8007b96:	e00b      	b.n	8007bb0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8007b98:	4b08      	ldr	r3, [pc, #32]	@ (8007bbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8007b9a:	689b      	ldr	r3, [r3, #8]
 8007b9c:	2238      	movs	r2, #56	@ 0x38
 8007b9e:	4013      	ands	r3, r2
 8007ba0:	2b18      	cmp	r3, #24
 8007ba2:	d103      	bne.n	8007bac <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8007ba4:	23fa      	movs	r3, #250	@ 0xfa
 8007ba6:	01db      	lsls	r3, r3, #7
 8007ba8:	613b      	str	r3, [r7, #16]
 8007baa:	e001      	b.n	8007bb0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8007bac:	2300      	movs	r3, #0
 8007bae:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007bb0:	693b      	ldr	r3, [r7, #16]
}
 8007bb2:	0018      	movs	r0, r3
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	b006      	add	sp, #24
 8007bb8:	bd80      	pop	{r7, pc}
 8007bba:	46c0      	nop			@ (mov r8, r8)
 8007bbc:	40021000 	.word	0x40021000
 8007bc0:	00f42400 	.word	0x00f42400
 8007bc4:	007a1200 	.word	0x007a1200

08007bc8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007bcc:	4b02      	ldr	r3, [pc, #8]	@ (8007bd8 <HAL_RCC_GetHCLKFreq+0x10>)
 8007bce:	681b      	ldr	r3, [r3, #0]
}
 8007bd0:	0018      	movs	r0, r3
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}
 8007bd6:	46c0      	nop			@ (mov r8, r8)
 8007bd8:	20000e84 	.word	0x20000e84

08007bdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007bdc:	b5b0      	push	{r4, r5, r7, lr}
 8007bde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8007be0:	f7ff fff2 	bl	8007bc8 <HAL_RCC_GetHCLKFreq>
 8007be4:	0004      	movs	r4, r0
 8007be6:	f7ff faf9 	bl	80071dc <LL_RCC_GetAPB1Prescaler>
 8007bea:	0003      	movs	r3, r0
 8007bec:	0b1a      	lsrs	r2, r3, #12
 8007bee:	4b05      	ldr	r3, [pc, #20]	@ (8007c04 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007bf0:	0092      	lsls	r2, r2, #2
 8007bf2:	58d3      	ldr	r3, [r2, r3]
 8007bf4:	221f      	movs	r2, #31
 8007bf6:	4013      	ands	r3, r2
 8007bf8:	40dc      	lsrs	r4, r3
 8007bfa:	0023      	movs	r3, r4
}
 8007bfc:	0018      	movs	r0, r3
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bdb0      	pop	{r4, r5, r7, pc}
 8007c02:	46c0      	nop			@ (mov r8, r8)
 8007c04:	0800c128 	.word	0x0800c128

08007c08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b086      	sub	sp, #24
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8007c10:	2313      	movs	r3, #19
 8007c12:	18fb      	adds	r3, r7, r3
 8007c14:	2200      	movs	r2, #0
 8007c16:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007c18:	2312      	movs	r3, #18
 8007c1a:	18fb      	adds	r3, r7, r3
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681a      	ldr	r2, [r3, #0]
 8007c24:	2380      	movs	r3, #128	@ 0x80
 8007c26:	029b      	lsls	r3, r3, #10
 8007c28:	4013      	ands	r3, r2
 8007c2a:	d100      	bne.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8007c2c:	e0ad      	b.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007c2e:	2011      	movs	r0, #17
 8007c30:	183b      	adds	r3, r7, r0
 8007c32:	2200      	movs	r2, #0
 8007c34:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007c36:	4b47      	ldr	r3, [pc, #284]	@ (8007d54 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8007c38:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007c3a:	2380      	movs	r3, #128	@ 0x80
 8007c3c:	055b      	lsls	r3, r3, #21
 8007c3e:	4013      	ands	r3, r2
 8007c40:	d110      	bne.n	8007c64 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c42:	4b44      	ldr	r3, [pc, #272]	@ (8007d54 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8007c44:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007c46:	4b43      	ldr	r3, [pc, #268]	@ (8007d54 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8007c48:	2180      	movs	r1, #128	@ 0x80
 8007c4a:	0549      	lsls	r1, r1, #21
 8007c4c:	430a      	orrs	r2, r1
 8007c4e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007c50:	4b40      	ldr	r3, [pc, #256]	@ (8007d54 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8007c52:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007c54:	2380      	movs	r3, #128	@ 0x80
 8007c56:	055b      	lsls	r3, r3, #21
 8007c58:	4013      	ands	r3, r2
 8007c5a:	60bb      	str	r3, [r7, #8]
 8007c5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007c5e:	183b      	adds	r3, r7, r0
 8007c60:	2201      	movs	r2, #1
 8007c62:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007c64:	4b3c      	ldr	r3, [pc, #240]	@ (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8007c66:	681a      	ldr	r2, [r3, #0]
 8007c68:	4b3b      	ldr	r3, [pc, #236]	@ (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8007c6a:	2180      	movs	r1, #128	@ 0x80
 8007c6c:	0049      	lsls	r1, r1, #1
 8007c6e:	430a      	orrs	r2, r1
 8007c70:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007c72:	f7fe f991 	bl	8005f98 <HAL_GetTick>
 8007c76:	0003      	movs	r3, r0
 8007c78:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007c7a:	e00b      	b.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c7c:	f7fe f98c 	bl	8005f98 <HAL_GetTick>
 8007c80:	0002      	movs	r2, r0
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	1ad3      	subs	r3, r2, r3
 8007c86:	2b02      	cmp	r3, #2
 8007c88:	d904      	bls.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8007c8a:	2313      	movs	r3, #19
 8007c8c:	18fb      	adds	r3, r7, r3
 8007c8e:	2203      	movs	r2, #3
 8007c90:	701a      	strb	r2, [r3, #0]
        break;
 8007c92:	e005      	b.n	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007c94:	4b30      	ldr	r3, [pc, #192]	@ (8007d58 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8007c96:	681a      	ldr	r2, [r3, #0]
 8007c98:	2380      	movs	r3, #128	@ 0x80
 8007c9a:	005b      	lsls	r3, r3, #1
 8007c9c:	4013      	ands	r3, r2
 8007c9e:	d0ed      	beq.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8007ca0:	2313      	movs	r3, #19
 8007ca2:	18fb      	adds	r3, r7, r3
 8007ca4:	781b      	ldrb	r3, [r3, #0]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d15e      	bne.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007caa:	4b2a      	ldr	r3, [pc, #168]	@ (8007d54 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8007cac:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007cae:	23c0      	movs	r3, #192	@ 0xc0
 8007cb0:	009b      	lsls	r3, r3, #2
 8007cb2:	4013      	ands	r3, r2
 8007cb4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d019      	beq.n	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cc0:	697a      	ldr	r2, [r7, #20]
 8007cc2:	429a      	cmp	r2, r3
 8007cc4:	d014      	beq.n	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007cc6:	4b23      	ldr	r3, [pc, #140]	@ (8007d54 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8007cc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007cca:	4a24      	ldr	r2, [pc, #144]	@ (8007d5c <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8007ccc:	4013      	ands	r3, r2
 8007cce:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007cd0:	4b20      	ldr	r3, [pc, #128]	@ (8007d54 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8007cd2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007cd4:	4b1f      	ldr	r3, [pc, #124]	@ (8007d54 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8007cd6:	2180      	movs	r1, #128	@ 0x80
 8007cd8:	0249      	lsls	r1, r1, #9
 8007cda:	430a      	orrs	r2, r1
 8007cdc:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007cde:	4b1d      	ldr	r3, [pc, #116]	@ (8007d54 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8007ce0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007ce2:	4b1c      	ldr	r3, [pc, #112]	@ (8007d54 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8007ce4:	491e      	ldr	r1, [pc, #120]	@ (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8007ce6:	400a      	ands	r2, r1
 8007ce8:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007cea:	4b1a      	ldr	r3, [pc, #104]	@ (8007d54 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8007cec:	697a      	ldr	r2, [r7, #20]
 8007cee:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	2201      	movs	r2, #1
 8007cf4:	4013      	ands	r3, r2
 8007cf6:	d016      	beq.n	8007d26 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cf8:	f7fe f94e 	bl	8005f98 <HAL_GetTick>
 8007cfc:	0003      	movs	r3, r0
 8007cfe:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007d00:	e00c      	b.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d02:	f7fe f949 	bl	8005f98 <HAL_GetTick>
 8007d06:	0002      	movs	r2, r0
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	1ad3      	subs	r3, r2, r3
 8007d0c:	4a15      	ldr	r2, [pc, #84]	@ (8007d64 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d904      	bls.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8007d12:	2313      	movs	r3, #19
 8007d14:	18fb      	adds	r3, r7, r3
 8007d16:	2203      	movs	r2, #3
 8007d18:	701a      	strb	r2, [r3, #0]
            break;
 8007d1a:	e004      	b.n	8007d26 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007d1c:	4b0d      	ldr	r3, [pc, #52]	@ (8007d54 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8007d1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d20:	2202      	movs	r2, #2
 8007d22:	4013      	ands	r3, r2
 8007d24:	d0ed      	beq.n	8007d02 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8007d26:	2313      	movs	r3, #19
 8007d28:	18fb      	adds	r3, r7, r3
 8007d2a:	781b      	ldrb	r3, [r3, #0]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d10a      	bne.n	8007d46 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007d30:	4b08      	ldr	r3, [pc, #32]	@ (8007d54 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8007d32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d34:	4a09      	ldr	r2, [pc, #36]	@ (8007d5c <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8007d36:	4013      	ands	r3, r2
 8007d38:	0019      	movs	r1, r3
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007d3e:	4b05      	ldr	r3, [pc, #20]	@ (8007d54 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8007d40:	430a      	orrs	r2, r1
 8007d42:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007d44:	e016      	b.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007d46:	2312      	movs	r3, #18
 8007d48:	18fb      	adds	r3, r7, r3
 8007d4a:	2213      	movs	r2, #19
 8007d4c:	18ba      	adds	r2, r7, r2
 8007d4e:	7812      	ldrb	r2, [r2, #0]
 8007d50:	701a      	strb	r2, [r3, #0]
 8007d52:	e00f      	b.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8007d54:	40021000 	.word	0x40021000
 8007d58:	40007000 	.word	0x40007000
 8007d5c:	fffffcff 	.word	0xfffffcff
 8007d60:	fffeffff 	.word	0xfffeffff
 8007d64:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d68:	2312      	movs	r3, #18
 8007d6a:	18fb      	adds	r3, r7, r3
 8007d6c:	2213      	movs	r2, #19
 8007d6e:	18ba      	adds	r2, r7, r2
 8007d70:	7812      	ldrb	r2, [r2, #0]
 8007d72:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007d74:	2311      	movs	r3, #17
 8007d76:	18fb      	adds	r3, r7, r3
 8007d78:	781b      	ldrb	r3, [r3, #0]
 8007d7a:	2b01      	cmp	r3, #1
 8007d7c:	d105      	bne.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d7e:	4bb6      	ldr	r3, [pc, #728]	@ (8008058 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007d80:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007d82:	4bb5      	ldr	r3, [pc, #724]	@ (8008058 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007d84:	49b5      	ldr	r1, [pc, #724]	@ (800805c <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8007d86:	400a      	ands	r2, r1
 8007d88:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	2201      	movs	r2, #1
 8007d90:	4013      	ands	r3, r2
 8007d92:	d009      	beq.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007d94:	4bb0      	ldr	r3, [pc, #704]	@ (8008058 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007d96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d98:	2203      	movs	r2, #3
 8007d9a:	4393      	bics	r3, r2
 8007d9c:	0019      	movs	r1, r3
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	685a      	ldr	r2, [r3, #4]
 8007da2:	4bad      	ldr	r3, [pc, #692]	@ (8008058 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007da4:	430a      	orrs	r2, r1
 8007da6:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	2202      	movs	r2, #2
 8007dae:	4013      	ands	r3, r2
 8007db0:	d009      	beq.n	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007db2:	4ba9      	ldr	r3, [pc, #676]	@ (8008058 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007db4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007db6:	220c      	movs	r2, #12
 8007db8:	4393      	bics	r3, r2
 8007dba:	0019      	movs	r1, r3
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	689a      	ldr	r2, [r3, #8]
 8007dc0:	4ba5      	ldr	r3, [pc, #660]	@ (8008058 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007dc2:	430a      	orrs	r2, r1
 8007dc4:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	2204      	movs	r2, #4
 8007dcc:	4013      	ands	r3, r2
 8007dce:	d009      	beq.n	8007de4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007dd0:	4ba1      	ldr	r3, [pc, #644]	@ (8008058 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007dd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007dd4:	2230      	movs	r2, #48	@ 0x30
 8007dd6:	4393      	bics	r3, r2
 8007dd8:	0019      	movs	r1, r3
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	68da      	ldr	r2, [r3, #12]
 8007dde:	4b9e      	ldr	r3, [pc, #632]	@ (8008058 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007de0:	430a      	orrs	r2, r1
 8007de2:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	2210      	movs	r2, #16
 8007dea:	4013      	ands	r3, r2
 8007dec:	d009      	beq.n	8007e02 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007dee:	4b9a      	ldr	r3, [pc, #616]	@ (8008058 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007df0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007df2:	4a9b      	ldr	r2, [pc, #620]	@ (8008060 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8007df4:	4013      	ands	r3, r2
 8007df6:	0019      	movs	r1, r3
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	691a      	ldr	r2, [r3, #16]
 8007dfc:	4b96      	ldr	r3, [pc, #600]	@ (8008058 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007dfe:	430a      	orrs	r2, r1
 8007e00:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681a      	ldr	r2, [r3, #0]
 8007e06:	2380      	movs	r3, #128	@ 0x80
 8007e08:	015b      	lsls	r3, r3, #5
 8007e0a:	4013      	ands	r3, r2
 8007e0c:	d009      	beq.n	8007e22 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8007e0e:	4b92      	ldr	r3, [pc, #584]	@ (8008058 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007e10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e12:	4a94      	ldr	r2, [pc, #592]	@ (8008064 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007e14:	4013      	ands	r3, r2
 8007e16:	0019      	movs	r1, r3
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	695a      	ldr	r2, [r3, #20]
 8007e1c:	4b8e      	ldr	r3, [pc, #568]	@ (8008058 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007e1e:	430a      	orrs	r2, r1
 8007e20:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681a      	ldr	r2, [r3, #0]
 8007e26:	2380      	movs	r3, #128	@ 0x80
 8007e28:	009b      	lsls	r3, r3, #2
 8007e2a:	4013      	ands	r3, r2
 8007e2c:	d009      	beq.n	8007e42 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007e2e:	4b8a      	ldr	r3, [pc, #552]	@ (8008058 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007e30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e32:	4a8d      	ldr	r2, [pc, #564]	@ (8008068 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8007e34:	4013      	ands	r3, r2
 8007e36:	0019      	movs	r1, r3
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007e3c:	4b86      	ldr	r3, [pc, #536]	@ (8008058 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007e3e:	430a      	orrs	r2, r1
 8007e40:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681a      	ldr	r2, [r3, #0]
 8007e46:	2380      	movs	r3, #128	@ 0x80
 8007e48:	00db      	lsls	r3, r3, #3
 8007e4a:	4013      	ands	r3, r2
 8007e4c:	d009      	beq.n	8007e62 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007e4e:	4b82      	ldr	r3, [pc, #520]	@ (8008058 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007e50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e52:	4a86      	ldr	r2, [pc, #536]	@ (800806c <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8007e54:	4013      	ands	r3, r2
 8007e56:	0019      	movs	r1, r3
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e5c:	4b7e      	ldr	r3, [pc, #504]	@ (8008058 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007e5e:	430a      	orrs	r2, r1
 8007e60:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	2220      	movs	r2, #32
 8007e68:	4013      	ands	r3, r2
 8007e6a:	d009      	beq.n	8007e80 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007e6c:	4b7a      	ldr	r3, [pc, #488]	@ (8008058 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007e6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e70:	4a7f      	ldr	r2, [pc, #508]	@ (8008070 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007e72:	4013      	ands	r3, r2
 8007e74:	0019      	movs	r1, r3
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	699a      	ldr	r2, [r3, #24]
 8007e7a:	4b77      	ldr	r3, [pc, #476]	@ (8008058 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007e7c:	430a      	orrs	r2, r1
 8007e7e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	2240      	movs	r2, #64	@ 0x40
 8007e86:	4013      	ands	r3, r2
 8007e88:	d009      	beq.n	8007e9e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007e8a:	4b73      	ldr	r3, [pc, #460]	@ (8008058 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007e8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e8e:	4a79      	ldr	r2, [pc, #484]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8007e90:	4013      	ands	r3, r2
 8007e92:	0019      	movs	r1, r3
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	69da      	ldr	r2, [r3, #28]
 8007e98:	4b6f      	ldr	r3, [pc, #444]	@ (8008058 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007e9a:	430a      	orrs	r2, r1
 8007e9c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681a      	ldr	r2, [r3, #0]
 8007ea2:	2380      	movs	r3, #128	@ 0x80
 8007ea4:	01db      	lsls	r3, r3, #7
 8007ea6:	4013      	ands	r3, r2
 8007ea8:	d015      	beq.n	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007eaa:	4b6b      	ldr	r3, [pc, #428]	@ (8008058 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007eac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007eae:	009b      	lsls	r3, r3, #2
 8007eb0:	0899      	lsrs	r1, r3, #2
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007eb6:	4b68      	ldr	r3, [pc, #416]	@ (8008058 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007eb8:	430a      	orrs	r2, r1
 8007eba:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007ec0:	2380      	movs	r3, #128	@ 0x80
 8007ec2:	05db      	lsls	r3, r3, #23
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	d106      	bne.n	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8007ec8:	4b63      	ldr	r3, [pc, #396]	@ (8008058 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007eca:	68da      	ldr	r2, [r3, #12]
 8007ecc:	4b62      	ldr	r3, [pc, #392]	@ (8008058 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007ece:	2180      	movs	r1, #128	@ 0x80
 8007ed0:	0249      	lsls	r1, r1, #9
 8007ed2:	430a      	orrs	r2, r1
 8007ed4:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681a      	ldr	r2, [r3, #0]
 8007eda:	2380      	movs	r3, #128	@ 0x80
 8007edc:	031b      	lsls	r3, r3, #12
 8007ede:	4013      	ands	r3, r2
 8007ee0:	d009      	beq.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007ee2:	4b5d      	ldr	r3, [pc, #372]	@ (8008058 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007ee4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ee6:	2240      	movs	r2, #64	@ 0x40
 8007ee8:	4393      	bics	r3, r2
 8007eea:	0019      	movs	r1, r3
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007ef0:	4b59      	ldr	r3, [pc, #356]	@ (8008058 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007ef2:	430a      	orrs	r2, r1
 8007ef4:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681a      	ldr	r2, [r3, #0]
 8007efa:	2380      	movs	r3, #128	@ 0x80
 8007efc:	039b      	lsls	r3, r3, #14
 8007efe:	4013      	ands	r3, r2
 8007f00:	d016      	beq.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8007f02:	4b55      	ldr	r3, [pc, #340]	@ (8008058 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007f04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f06:	4a5c      	ldr	r2, [pc, #368]	@ (8008078 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8007f08:	4013      	ands	r3, r2
 8007f0a:	0019      	movs	r1, r3
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007f10:	4b51      	ldr	r3, [pc, #324]	@ (8008058 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007f12:	430a      	orrs	r2, r1
 8007f14:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007f1a:	2380      	movs	r3, #128	@ 0x80
 8007f1c:	03db      	lsls	r3, r3, #15
 8007f1e:	429a      	cmp	r2, r3
 8007f20:	d106      	bne.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8007f22:	4b4d      	ldr	r3, [pc, #308]	@ (8008058 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007f24:	68da      	ldr	r2, [r3, #12]
 8007f26:	4b4c      	ldr	r3, [pc, #304]	@ (8008058 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007f28:	2180      	movs	r1, #128	@ 0x80
 8007f2a:	0449      	lsls	r1, r1, #17
 8007f2c:	430a      	orrs	r2, r1
 8007f2e:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681a      	ldr	r2, [r3, #0]
 8007f34:	2380      	movs	r3, #128	@ 0x80
 8007f36:	03db      	lsls	r3, r3, #15
 8007f38:	4013      	ands	r3, r2
 8007f3a:	d016      	beq.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8007f3c:	4b46      	ldr	r3, [pc, #280]	@ (8008058 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007f3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f40:	4a4e      	ldr	r2, [pc, #312]	@ (800807c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007f42:	4013      	ands	r3, r2
 8007f44:	0019      	movs	r1, r3
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007f4a:	4b43      	ldr	r3, [pc, #268]	@ (8008058 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007f4c:	430a      	orrs	r2, r1
 8007f4e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007f54:	2380      	movs	r3, #128	@ 0x80
 8007f56:	045b      	lsls	r3, r3, #17
 8007f58:	429a      	cmp	r2, r3
 8007f5a:	d106      	bne.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8007f5c:	4b3e      	ldr	r3, [pc, #248]	@ (8008058 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007f5e:	68da      	ldr	r2, [r3, #12]
 8007f60:	4b3d      	ldr	r3, [pc, #244]	@ (8008058 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007f62:	2180      	movs	r1, #128	@ 0x80
 8007f64:	0449      	lsls	r1, r1, #17
 8007f66:	430a      	orrs	r2, r1
 8007f68:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681a      	ldr	r2, [r3, #0]
 8007f6e:	2380      	movs	r3, #128	@ 0x80
 8007f70:	011b      	lsls	r3, r3, #4
 8007f72:	4013      	ands	r3, r2
 8007f74:	d014      	beq.n	8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8007f76:	4b38      	ldr	r3, [pc, #224]	@ (8008058 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007f78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f7a:	2203      	movs	r2, #3
 8007f7c:	4393      	bics	r3, r2
 8007f7e:	0019      	movs	r1, r3
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6a1a      	ldr	r2, [r3, #32]
 8007f84:	4b34      	ldr	r3, [pc, #208]	@ (8008058 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007f86:	430a      	orrs	r2, r1
 8007f88:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6a1b      	ldr	r3, [r3, #32]
 8007f8e:	2b01      	cmp	r3, #1
 8007f90:	d106      	bne.n	8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8007f92:	4b31      	ldr	r3, [pc, #196]	@ (8008058 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007f94:	68da      	ldr	r2, [r3, #12]
 8007f96:	4b30      	ldr	r3, [pc, #192]	@ (8008058 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007f98:	2180      	movs	r1, #128	@ 0x80
 8007f9a:	0249      	lsls	r1, r1, #9
 8007f9c:	430a      	orrs	r2, r1
 8007f9e:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681a      	ldr	r2, [r3, #0]
 8007fa4:	2380      	movs	r3, #128	@ 0x80
 8007fa6:	019b      	lsls	r3, r3, #6
 8007fa8:	4013      	ands	r3, r2
 8007faa:	d014      	beq.n	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8007fac:	4b2a      	ldr	r3, [pc, #168]	@ (8008058 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007fae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007fb0:	220c      	movs	r2, #12
 8007fb2:	4393      	bics	r3, r2
 8007fb4:	0019      	movs	r1, r3
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007fba:	4b27      	ldr	r3, [pc, #156]	@ (8008058 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007fbc:	430a      	orrs	r2, r1
 8007fbe:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fc4:	2b04      	cmp	r3, #4
 8007fc6:	d106      	bne.n	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8007fc8:	4b23      	ldr	r3, [pc, #140]	@ (8008058 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007fca:	68da      	ldr	r2, [r3, #12]
 8007fcc:	4b22      	ldr	r3, [pc, #136]	@ (8008058 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007fce:	2180      	movs	r1, #128	@ 0x80
 8007fd0:	0249      	lsls	r1, r1, #9
 8007fd2:	430a      	orrs	r2, r1
 8007fd4:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681a      	ldr	r2, [r3, #0]
 8007fda:	2380      	movs	r3, #128	@ 0x80
 8007fdc:	045b      	lsls	r3, r3, #17
 8007fde:	4013      	ands	r3, r2
 8007fe0:	d016      	beq.n	8008010 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007fe2:	4b1d      	ldr	r3, [pc, #116]	@ (8008058 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007fe4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007fe6:	4a22      	ldr	r2, [pc, #136]	@ (8008070 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007fe8:	4013      	ands	r3, r2
 8007fea:	0019      	movs	r1, r3
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007ff0:	4b19      	ldr	r3, [pc, #100]	@ (8008058 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007ff2:	430a      	orrs	r2, r1
 8007ff4:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007ffa:	2380      	movs	r3, #128	@ 0x80
 8007ffc:	019b      	lsls	r3, r3, #6
 8007ffe:	429a      	cmp	r2, r3
 8008000:	d106      	bne.n	8008010 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8008002:	4b15      	ldr	r3, [pc, #84]	@ (8008058 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008004:	68da      	ldr	r2, [r3, #12]
 8008006:	4b14      	ldr	r3, [pc, #80]	@ (8008058 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008008:	2180      	movs	r1, #128	@ 0x80
 800800a:	0449      	lsls	r1, r1, #17
 800800c:	430a      	orrs	r2, r1
 800800e:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681a      	ldr	r2, [r3, #0]
 8008014:	2380      	movs	r3, #128	@ 0x80
 8008016:	049b      	lsls	r3, r3, #18
 8008018:	4013      	ands	r3, r2
 800801a:	d016      	beq.n	800804a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800801c:	4b0e      	ldr	r3, [pc, #56]	@ (8008058 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800801e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008020:	4a10      	ldr	r2, [pc, #64]	@ (8008064 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8008022:	4013      	ands	r3, r2
 8008024:	0019      	movs	r1, r3
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800802a:	4b0b      	ldr	r3, [pc, #44]	@ (8008058 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800802c:	430a      	orrs	r2, r1
 800802e:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008034:	2380      	movs	r3, #128	@ 0x80
 8008036:	005b      	lsls	r3, r3, #1
 8008038:	429a      	cmp	r2, r3
 800803a:	d106      	bne.n	800804a <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800803c:	4b06      	ldr	r3, [pc, #24]	@ (8008058 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800803e:	68da      	ldr	r2, [r3, #12]
 8008040:	4b05      	ldr	r3, [pc, #20]	@ (8008058 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008042:	2180      	movs	r1, #128	@ 0x80
 8008044:	0449      	lsls	r1, r1, #17
 8008046:	430a      	orrs	r2, r1
 8008048:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800804a:	2312      	movs	r3, #18
 800804c:	18fb      	adds	r3, r7, r3
 800804e:	781b      	ldrb	r3, [r3, #0]
}
 8008050:	0018      	movs	r0, r3
 8008052:	46bd      	mov	sp, r7
 8008054:	b006      	add	sp, #24
 8008056:	bd80      	pop	{r7, pc}
 8008058:	40021000 	.word	0x40021000
 800805c:	efffffff 	.word	0xefffffff
 8008060:	fffff3ff 	.word	0xfffff3ff
 8008064:	fffffcff 	.word	0xfffffcff
 8008068:	fff3ffff 	.word	0xfff3ffff
 800806c:	ffcfffff 	.word	0xffcfffff
 8008070:	ffffcfff 	.word	0xffffcfff
 8008074:	ffff3fff 	.word	0xffff3fff
 8008078:	ffbfffff 	.word	0xffbfffff
 800807c:	feffffff 	.word	0xfeffffff

08008080 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008080:	b590      	push	{r4, r7, lr}
 8008082:	b089      	sub	sp, #36	@ 0x24
 8008084:	af00      	add	r7, sp, #0
 8008086:	60f8      	str	r0, [r7, #12]
 8008088:	60b9      	str	r1, [r7, #8]
 800808a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	2228      	movs	r2, #40	@ 0x28
 8008090:	5c9b      	ldrb	r3, [r3, r2]
 8008092:	2b01      	cmp	r3, #1
 8008094:	d101      	bne.n	800809a <HAL_RTC_SetAlarm_IT+0x1a>
 8008096:	2302      	movs	r3, #2
 8008098:	e127      	b.n	80082ea <HAL_RTC_SetAlarm_IT+0x26a>
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	2228      	movs	r2, #40	@ 0x28
 800809e:	2101      	movs	r1, #1
 80080a0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	2229      	movs	r2, #41	@ 0x29
 80080a6:	2102      	movs	r1, #2
 80080a8:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d136      	bne.n	800811e <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	699b      	ldr	r3, [r3, #24]
 80080b6:	2240      	movs	r2, #64	@ 0x40
 80080b8:	4013      	ands	r3, r2
 80080ba:	d102      	bne.n	80080c2 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	2200      	movs	r2, #0
 80080c0:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	781b      	ldrb	r3, [r3, #0]
 80080c6:	0018      	movs	r0, r3
 80080c8:	f000 fa1e 	bl	8008508 <RTC_ByteToBcd2>
 80080cc:	0003      	movs	r3, r0
 80080ce:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	785b      	ldrb	r3, [r3, #1]
 80080d4:	0018      	movs	r0, r3
 80080d6:	f000 fa17 	bl	8008508 <RTC_ByteToBcd2>
 80080da:	0003      	movs	r3, r0
 80080dc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80080de:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	789b      	ldrb	r3, [r3, #2]
 80080e4:	0018      	movs	r0, r3
 80080e6:	f000 fa0f 	bl	8008508 <RTC_ByteToBcd2>
 80080ea:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80080ec:	0022      	movs	r2, r4
 80080ee:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	78db      	ldrb	r3, [r3, #3]
 80080f4:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80080f6:	431a      	orrs	r2, r3
 80080f8:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	2220      	movs	r2, #32
 80080fe:	5c9b      	ldrb	r3, [r3, r2]
 8008100:	0018      	movs	r0, r3
 8008102:	f000 fa01 	bl	8008508 <RTC_ByteToBcd2>
 8008106:	0003      	movs	r3, r0
 8008108:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800810a:	0022      	movs	r2, r4
 800810c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8008112:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008118:	4313      	orrs	r3, r2
 800811a:	61fb      	str	r3, [r7, #28]
 800811c:	e022      	b.n	8008164 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	699b      	ldr	r3, [r3, #24]
 8008124:	2240      	movs	r2, #64	@ 0x40
 8008126:	4013      	ands	r3, r2
 8008128:	d102      	bne.n	8008130 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	2200      	movs	r2, #0
 800812e:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	781b      	ldrb	r3, [r3, #0]
 8008134:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	785b      	ldrb	r3, [r3, #1]
 800813a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800813c:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800813e:	68ba      	ldr	r2, [r7, #8]
 8008140:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008142:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	78db      	ldrb	r3, [r3, #3]
 8008148:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800814a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	2120      	movs	r1, #32
 8008150:	5c5b      	ldrb	r3, [r3, r1]
 8008152:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8008154:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800815a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008160:	4313      	orrs	r3, r2
 8008162:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	685a      	ldr	r2, [r3, #4]
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	699b      	ldr	r3, [r3, #24]
 800816c:	4313      	orrs	r3, r2
 800816e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	22ca      	movs	r2, #202	@ 0xca
 8008176:	625a      	str	r2, [r3, #36]	@ 0x24
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	2253      	movs	r2, #83	@ 0x53
 800817e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008184:	2380      	movs	r3, #128	@ 0x80
 8008186:	005b      	lsls	r3, r3, #1
 8008188:	429a      	cmp	r2, r3
 800818a:	d14c      	bne.n	8008226 <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	699a      	ldr	r2, [r3, #24]
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	4957      	ldr	r1, [pc, #348]	@ (80082f4 <HAL_RTC_SetAlarm_IT+0x274>)
 8008198:	400a      	ands	r2, r1
 800819a:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	2101      	movs	r1, #1
 80081a8:	430a      	orrs	r2, r1
 80081aa:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 80081ac:	f7fd fef4 	bl	8005f98 <HAL_GetTick>
 80081b0:	0003      	movs	r3, r0
 80081b2:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80081b4:	e016      	b.n	80081e4 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80081b6:	f7fd feef 	bl	8005f98 <HAL_GetTick>
 80081ba:	0002      	movs	r2, r0
 80081bc:	697b      	ldr	r3, [r7, #20]
 80081be:	1ad2      	subs	r2, r2, r3
 80081c0:	23fa      	movs	r3, #250	@ 0xfa
 80081c2:	009b      	lsls	r3, r3, #2
 80081c4:	429a      	cmp	r2, r3
 80081c6:	d90d      	bls.n	80081e4 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	22ff      	movs	r2, #255	@ 0xff
 80081ce:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	2229      	movs	r2, #41	@ 0x29
 80081d4:	2103      	movs	r1, #3
 80081d6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	2228      	movs	r2, #40	@ 0x28
 80081dc:	2100      	movs	r1, #0
 80081de:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80081e0:	2303      	movs	r3, #3
 80081e2:	e082      	b.n	80082ea <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	68db      	ldr	r3, [r3, #12]
 80081ea:	2201      	movs	r2, #1
 80081ec:	4013      	ands	r3, r2
 80081ee:	d0e2      	beq.n	80081b6 <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	69fa      	ldr	r2, [r7, #28]
 80081f6:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	69ba      	ldr	r2, [r7, #24]
 80081fe:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	699a      	ldr	r2, [r3, #24]
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	2180      	movs	r1, #128	@ 0x80
 800820c:	0049      	lsls	r1, r1, #1
 800820e:	430a      	orrs	r2, r1
 8008210:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	699a      	ldr	r2, [r3, #24]
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	2180      	movs	r1, #128	@ 0x80
 800821e:	0149      	lsls	r1, r1, #5
 8008220:	430a      	orrs	r2, r1
 8008222:	619a      	str	r2, [r3, #24]
 8008224:	e04b      	b.n	80082be <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	699a      	ldr	r2, [r3, #24]
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	4931      	ldr	r1, [pc, #196]	@ (80082f8 <HAL_RTC_SetAlarm_IT+0x278>)
 8008232:	400a      	ands	r2, r1
 8008234:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	2102      	movs	r1, #2
 8008242:	430a      	orrs	r2, r1
 8008244:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 8008246:	f7fd fea7 	bl	8005f98 <HAL_GetTick>
 800824a:	0003      	movs	r3, r0
 800824c:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800824e:	e016      	b.n	800827e <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008250:	f7fd fea2 	bl	8005f98 <HAL_GetTick>
 8008254:	0002      	movs	r2, r0
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	1ad2      	subs	r2, r2, r3
 800825a:	23fa      	movs	r3, #250	@ 0xfa
 800825c:	009b      	lsls	r3, r3, #2
 800825e:	429a      	cmp	r2, r3
 8008260:	d90d      	bls.n	800827e <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	22ff      	movs	r2, #255	@ 0xff
 8008268:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	2229      	movs	r2, #41	@ 0x29
 800826e:	2103      	movs	r1, #3
 8008270:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	2228      	movs	r2, #40	@ 0x28
 8008276:	2100      	movs	r1, #0
 8008278:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800827a:	2303      	movs	r3, #3
 800827c:	e035      	b.n	80082ea <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	68db      	ldr	r3, [r3, #12]
 8008284:	2202      	movs	r2, #2
 8008286:	4013      	ands	r3, r2
 8008288:	d0e2      	beq.n	8008250 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	69fa      	ldr	r2, [r7, #28]
 8008290:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	69ba      	ldr	r2, [r7, #24]
 8008298:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	699a      	ldr	r2, [r3, #24]
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	2180      	movs	r1, #128	@ 0x80
 80082a6:	0089      	lsls	r1, r1, #2
 80082a8:	430a      	orrs	r2, r1
 80082aa:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	699a      	ldr	r2, [r3, #24]
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	2180      	movs	r1, #128	@ 0x80
 80082b8:	0189      	lsls	r1, r1, #6
 80082ba:	430a      	orrs	r2, r1
 80082bc:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80082be:	4a0f      	ldr	r2, [pc, #60]	@ (80082fc <HAL_RTC_SetAlarm_IT+0x27c>)
 80082c0:	2380      	movs	r3, #128	@ 0x80
 80082c2:	58d3      	ldr	r3, [r2, r3]
 80082c4:	490d      	ldr	r1, [pc, #52]	@ (80082fc <HAL_RTC_SetAlarm_IT+0x27c>)
 80082c6:	2280      	movs	r2, #128	@ 0x80
 80082c8:	0312      	lsls	r2, r2, #12
 80082ca:	4313      	orrs	r3, r2
 80082cc:	2280      	movs	r2, #128	@ 0x80
 80082ce:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	22ff      	movs	r2, #255	@ 0xff
 80082d6:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	2229      	movs	r2, #41	@ 0x29
 80082dc:	2101      	movs	r1, #1
 80082de:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	2228      	movs	r2, #40	@ 0x28
 80082e4:	2100      	movs	r1, #0
 80082e6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80082e8:	2300      	movs	r3, #0
}
 80082ea:	0018      	movs	r0, r3
 80082ec:	46bd      	mov	sp, r7
 80082ee:	b009      	add	sp, #36	@ 0x24
 80082f0:	bd90      	pop	{r4, r7, pc}
 80082f2:	46c0      	nop			@ (mov r8, r8)
 80082f4:	fffffeff 	.word	0xfffffeff
 80082f8:	fffffdff 	.word	0xfffffdff
 80082fc:	40021800 	.word	0x40021800

08008300 <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b086      	sub	sp, #24
 8008304:	af00      	add	r7, sp, #0
 8008306:	60f8      	str	r0, [r7, #12]
 8008308:	60b9      	str	r1, [r7, #8]
 800830a:	607a      	str	r2, [r7, #4]
 800830c:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if(Alarm == RTC_ALARM_A)
 800830e:	687a      	ldr	r2, [r7, #4]
 8008310:	2380      	movs	r3, #128	@ 0x80
 8008312:	005b      	lsls	r3, r3, #1
 8008314:	429a      	cmp	r2, r3
 8008316:	d144      	bne.n	80083a2 <HAL_RTC_GetAlarm+0xa2>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	2280      	movs	r2, #128	@ 0x80
 800831c:	0052      	lsls	r2, r2, #1
 800831e:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008326:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR ) & RTC_ALRMASSR_SS);
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800832e:	045b      	lsls	r3, r3, #17
 8008330:	0c5b      	lsrs	r3, r3, #17
 8008332:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> RTC_ALRMAR_HU_Pos);
 8008334:	697b      	ldr	r3, [r7, #20]
 8008336:	0c1b      	lsrs	r3, r3, #16
 8008338:	b2db      	uxtb	r3, r3
 800833a:	223f      	movs	r2, #63	@ 0x3f
 800833c:	4013      	ands	r3, r2
 800833e:	b2da      	uxtb	r2, r3
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 8008344:	697b      	ldr	r3, [r7, #20]
 8008346:	0a1b      	lsrs	r3, r3, #8
 8008348:	b2db      	uxtb	r3, r3
 800834a:	227f      	movs	r2, #127	@ 0x7f
 800834c:	4013      	ands	r3, r2
 800834e:	b2da      	uxtb	r2, r3
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU)) >> RTC_ALRMAR_SU_Pos);
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	b2db      	uxtb	r3, r3
 8008358:	227f      	movs	r2, #127	@ 0x7f
 800835a:	4013      	ands	r3, r2
 800835c:	b2da      	uxtb	r2, r3
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMAR_PM) >> RTC_ALRMAR_PM_Pos);
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	0d9b      	lsrs	r3, r3, #22
 8008366:	b2db      	uxtb	r3, r3
 8008368:	2201      	movs	r2, #1
 800836a:	4013      	ands	r3, r2
 800836c:	b2da      	uxtb	r2, r3
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	693a      	ldr	r2, [r7, #16]
 8008376:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> RTC_ALRMAR_DU_Pos);
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	0e1b      	lsrs	r3, r3, #24
 800837c:	b2db      	uxtb	r3, r3
 800837e:	223f      	movs	r2, #63	@ 0x3f
 8008380:	4013      	ands	r3, r2
 8008382:	b2d9      	uxtb	r1, r3
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	2220      	movs	r2, #32
 8008388:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 800838a:	697a      	ldr	r2, [r7, #20]
 800838c:	2380      	movs	r3, #128	@ 0x80
 800838e:	05db      	lsls	r3, r3, #23
 8008390:	401a      	ands	r2, r3
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8008396:	697b      	ldr	r3, [r7, #20]
 8008398:	4a3b      	ldr	r2, [pc, #236]	@ (8008488 <HAL_RTC_GetAlarm+0x188>)
 800839a:	401a      	ands	r2, r3
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	615a      	str	r2, [r3, #20]
 80083a0:	e043      	b.n	800842a <HAL_RTC_GetAlarm+0x12a>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	2280      	movs	r2, #128	@ 0x80
 80083a6:	0092      	lsls	r2, r2, #2
 80083a8:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80083b0:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80083b8:	045b      	lsls	r3, r3, #17
 80083ba:	0c5b      	lsrs	r3, r3, #17
 80083bc:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMBR_HT | RTC_ALRMBR_HU)) >> RTC_ALRMBR_HU_Pos);
 80083be:	697b      	ldr	r3, [r7, #20]
 80083c0:	0c1b      	lsrs	r3, r3, #16
 80083c2:	b2db      	uxtb	r3, r3
 80083c4:	223f      	movs	r2, #63	@ 0x3f
 80083c6:	4013      	ands	r3, r2
 80083c8:	b2da      	uxtb	r2, r3
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> RTC_ALRMBR_MNU_Pos);
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	0a1b      	lsrs	r3, r3, #8
 80083d2:	b2db      	uxtb	r3, r3
 80083d4:	227f      	movs	r2, #127	@ 0x7f
 80083d6:	4013      	ands	r3, r2
 80083d8:	b2da      	uxtb	r2, r3
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMBR_ST | RTC_ALRMBR_SU)) >> RTC_ALRMBR_SU_Pos);
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	b2db      	uxtb	r3, r3
 80083e2:	227f      	movs	r2, #127	@ 0x7f
 80083e4:	4013      	ands	r3, r2
 80083e6:	b2da      	uxtb	r2, r3
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMBR_PM) >> RTC_ALRMBR_PM_Pos);
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	0d9b      	lsrs	r3, r3, #22
 80083f0:	b2db      	uxtb	r3, r3
 80083f2:	2201      	movs	r2, #1
 80083f4:	4013      	ands	r3, r2
 80083f6:	b2da      	uxtb	r2, r3
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	693a      	ldr	r2, [r7, #16]
 8008400:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU)) >> RTC_ALRMBR_DU_Pos);
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	0e1b      	lsrs	r3, r3, #24
 8008406:	b2db      	uxtb	r3, r3
 8008408:	223f      	movs	r2, #63	@ 0x3f
 800840a:	4013      	ands	r3, r2
 800840c:	b2d9      	uxtb	r1, r3
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	2220      	movs	r2, #32
 8008412:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMBR_WDSEL);
 8008414:	697a      	ldr	r2, [r7, #20]
 8008416:	2380      	movs	r3, #128	@ 0x80
 8008418:	05db      	lsls	r3, r3, #23
 800841a:	401a      	ands	r2, r3
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8008420:	697b      	ldr	r3, [r7, #20]
 8008422:	4a19      	ldr	r2, [pc, #100]	@ (8008488 <HAL_RTC_GetAlarm+0x188>)
 8008424:	401a      	ands	r2, r3
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	615a      	str	r2, [r3, #20]
  }

  if(Format == RTC_FORMAT_BIN)
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d125      	bne.n	800847c <HAL_RTC_GetAlarm+0x17c>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	781b      	ldrb	r3, [r3, #0]
 8008434:	0018      	movs	r0, r3
 8008436:	f000 f88f 	bl	8008558 <RTC_Bcd2ToByte>
 800843a:	0003      	movs	r3, r0
 800843c:	001a      	movs	r2, r3
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	785b      	ldrb	r3, [r3, #1]
 8008446:	0018      	movs	r0, r3
 8008448:	f000 f886 	bl	8008558 <RTC_Bcd2ToByte>
 800844c:	0003      	movs	r3, r0
 800844e:	001a      	movs	r2, r3
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	789b      	ldrb	r3, [r3, #2]
 8008458:	0018      	movs	r0, r3
 800845a:	f000 f87d 	bl	8008558 <RTC_Bcd2ToByte>
 800845e:	0003      	movs	r3, r0
 8008460:	001a      	movs	r2, r3
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	2220      	movs	r2, #32
 800846a:	5c9b      	ldrb	r3, [r3, r2]
 800846c:	0018      	movs	r0, r3
 800846e:	f000 f873 	bl	8008558 <RTC_Bcd2ToByte>
 8008472:	0003      	movs	r3, r0
 8008474:	0019      	movs	r1, r3
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	2220      	movs	r2, #32
 800847a:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 800847c:	2300      	movs	r3, #0
}
 800847e:	0018      	movs	r0, r3
 8008480:	46bd      	mov	sp, r7
 8008482:	b006      	add	sp, #24
 8008484:	bd80      	pop	{r7, pc}
 8008486:	46c0      	nop			@ (mov r8, r8)
 8008488:	80808080 	.word	0x80808080

0800848c <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b082      	sub	sp, #8
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	699a      	ldr	r2, [r3, #24]
 800849a:	2380      	movs	r3, #128	@ 0x80
 800849c:	015b      	lsls	r3, r3, #5
 800849e:	4013      	ands	r3, r2
 80084a0:	d011      	beq.n	80084c6 <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084a8:	2201      	movs	r2, #1
 80084aa:	4013      	ands	r3, r2
 80084ac:	d00b      	beq.n	80084c6 <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	2101      	movs	r1, #1
 80084ba:	430a      	orrs	r2, r1
 80084bc:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	0018      	movs	r0, r3
 80084c2:	f7fc fd4f 	bl	8004f64 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	699a      	ldr	r2, [r3, #24]
 80084cc:	2380      	movs	r3, #128	@ 0x80
 80084ce:	019b      	lsls	r3, r3, #6
 80084d0:	4013      	ands	r3, r2
 80084d2:	d011      	beq.n	80084f8 <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084da:	2202      	movs	r2, #2
 80084dc:	4013      	ands	r3, r2
 80084de:	d00b      	beq.n	80084f8 <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	2102      	movs	r1, #2
 80084ec:	430a      	orrs	r2, r1
 80084ee:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	0018      	movs	r0, r3
 80084f4:	f000 f873 	bl	80085de <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2229      	movs	r2, #41	@ 0x29
 80084fc:	2101      	movs	r1, #1
 80084fe:	5499      	strb	r1, [r3, r2]
}
 8008500:	46c0      	nop			@ (mov r8, r8)
 8008502:	46bd      	mov	sp, r7
 8008504:	b002      	add	sp, #8
 8008506:	bd80      	pop	{r7, pc}

08008508 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b084      	sub	sp, #16
 800850c:	af00      	add	r7, sp, #0
 800850e:	0002      	movs	r2, r0
 8008510:	1dfb      	adds	r3, r7, #7
 8008512:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8008514:	2300      	movs	r3, #0
 8008516:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8008518:	230b      	movs	r3, #11
 800851a:	18fb      	adds	r3, r7, r3
 800851c:	1dfa      	adds	r2, r7, #7
 800851e:	7812      	ldrb	r2, [r2, #0]
 8008520:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8008522:	e008      	b.n	8008536 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	3301      	adds	r3, #1
 8008528:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800852a:	220b      	movs	r2, #11
 800852c:	18bb      	adds	r3, r7, r2
 800852e:	18ba      	adds	r2, r7, r2
 8008530:	7812      	ldrb	r2, [r2, #0]
 8008532:	3a0a      	subs	r2, #10
 8008534:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8008536:	210b      	movs	r1, #11
 8008538:	187b      	adds	r3, r7, r1
 800853a:	781b      	ldrb	r3, [r3, #0]
 800853c:	2b09      	cmp	r3, #9
 800853e:	d8f1      	bhi.n	8008524 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	b2db      	uxtb	r3, r3
 8008544:	011b      	lsls	r3, r3, #4
 8008546:	b2da      	uxtb	r2, r3
 8008548:	187b      	adds	r3, r7, r1
 800854a:	781b      	ldrb	r3, [r3, #0]
 800854c:	4313      	orrs	r3, r2
 800854e:	b2db      	uxtb	r3, r3
}
 8008550:	0018      	movs	r0, r3
 8008552:	46bd      	mov	sp, r7
 8008554:	b004      	add	sp, #16
 8008556:	bd80      	pop	{r7, pc}

08008558 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b084      	sub	sp, #16
 800855c:	af00      	add	r7, sp, #0
 800855e:	0002      	movs	r2, r0
 8008560:	1dfb      	adds	r3, r7, #7
 8008562:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8008564:	1dfb      	adds	r3, r7, #7
 8008566:	781b      	ldrb	r3, [r3, #0]
 8008568:	091b      	lsrs	r3, r3, #4
 800856a:	b2db      	uxtb	r3, r3
 800856c:	001a      	movs	r2, r3
 800856e:	0013      	movs	r3, r2
 8008570:	009b      	lsls	r3, r3, #2
 8008572:	189b      	adds	r3, r3, r2
 8008574:	005b      	lsls	r3, r3, #1
 8008576:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	b2da      	uxtb	r2, r3
 800857c:	1dfb      	adds	r3, r7, #7
 800857e:	781b      	ldrb	r3, [r3, #0]
 8008580:	210f      	movs	r1, #15
 8008582:	400b      	ands	r3, r1
 8008584:	b2db      	uxtb	r3, r3
 8008586:	18d3      	adds	r3, r2, r3
 8008588:	b2db      	uxtb	r3, r3
}
 800858a:	0018      	movs	r0, r3
 800858c:	46bd      	mov	sp, r7
 800858e:	b004      	add	sp, #16
 8008590:	bd80      	pop	{r7, pc}

08008592 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8008592:	b580      	push	{r7, lr}
 8008594:	b082      	sub	sp, #8
 8008596:	af00      	add	r7, sp, #0
 8008598:	6078      	str	r0, [r7, #4]
    /* Get the pending status of the WAKEUPTIMER Interrupt */
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085a0:	2204      	movs	r2, #4
 80085a2:	4013      	ands	r3, r2
 80085a4:	d00b      	beq.n	80085be <HAL_RTCEx_WakeUpTimerIRQHandler+0x2c>
    {
      /* Clear the WAKEUPTIMER interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	2104      	movs	r1, #4
 80085b2:	430a      	orrs	r2, r1
 80085b4:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call WakeUpTimerEvent registered Callback */
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      /* WAKEUPTIMER callback */
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	0018      	movs	r0, r3
 80085ba:	f000 f808 	bl	80085ce <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2229      	movs	r2, #41	@ 0x29
 80085c2:	2101      	movs	r1, #1
 80085c4:	5499      	strb	r1, [r3, r2]
}
 80085c6:	46c0      	nop			@ (mov r8, r8)
 80085c8:	46bd      	mov	sp, r7
 80085ca:	b002      	add	sp, #8
 80085cc:	bd80      	pop	{r7, pc}

080085ce <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 80085ce:	b580      	push	{r7, lr}
 80085d0:	b082      	sub	sp, #8
 80085d2:	af00      	add	r7, sp, #0
 80085d4:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 80085d6:	46c0      	nop			@ (mov r8, r8)
 80085d8:	46bd      	mov	sp, r7
 80085da:	b002      	add	sp, #8
 80085dc:	bd80      	pop	{r7, pc}

080085de <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80085de:	b580      	push	{r7, lr}
 80085e0:	b082      	sub	sp, #8
 80085e2:	af00      	add	r7, sp, #0
 80085e4:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80085e6:	46c0      	nop			@ (mov r8, r8)
 80085e8:	46bd      	mov	sp, r7
 80085ea:	b002      	add	sp, #8
 80085ec:	bd80      	pop	{r7, pc}
	...

080085f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b084      	sub	sp, #16
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d101      	bne.n	8008602 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80085fe:	2301      	movs	r3, #1
 8008600:	e0a8      	b.n	8008754 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008606:	2b00      	cmp	r3, #0
 8008608:	d109      	bne.n	800861e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	685a      	ldr	r2, [r3, #4]
 800860e:	2382      	movs	r3, #130	@ 0x82
 8008610:	005b      	lsls	r3, r3, #1
 8008612:	429a      	cmp	r2, r3
 8008614:	d009      	beq.n	800862a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2200      	movs	r2, #0
 800861a:	61da      	str	r2, [r3, #28]
 800861c:	e005      	b.n	800862a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2200      	movs	r2, #0
 8008622:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2200      	movs	r2, #0
 8008628:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2200      	movs	r2, #0
 800862e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	225d      	movs	r2, #93	@ 0x5d
 8008634:	5c9b      	ldrb	r3, [r3, r2]
 8008636:	b2db      	uxtb	r3, r3
 8008638:	2b00      	cmp	r3, #0
 800863a:	d107      	bne.n	800864c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	225c      	movs	r2, #92	@ 0x5c
 8008640:	2100      	movs	r1, #0
 8008642:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	0018      	movs	r0, r3
 8008648:	f7fd fa16 	bl	8005a78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	225d      	movs	r2, #93	@ 0x5d
 8008650:	2102      	movs	r1, #2
 8008652:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	681a      	ldr	r2, [r3, #0]
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	2140      	movs	r1, #64	@ 0x40
 8008660:	438a      	bics	r2, r1
 8008662:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	68da      	ldr	r2, [r3, #12]
 8008668:	23e0      	movs	r3, #224	@ 0xe0
 800866a:	00db      	lsls	r3, r3, #3
 800866c:	429a      	cmp	r2, r3
 800866e:	d902      	bls.n	8008676 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008670:	2300      	movs	r3, #0
 8008672:	60fb      	str	r3, [r7, #12]
 8008674:	e002      	b.n	800867c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008676:	2380      	movs	r3, #128	@ 0x80
 8008678:	015b      	lsls	r3, r3, #5
 800867a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	68da      	ldr	r2, [r3, #12]
 8008680:	23f0      	movs	r3, #240	@ 0xf0
 8008682:	011b      	lsls	r3, r3, #4
 8008684:	429a      	cmp	r2, r3
 8008686:	d008      	beq.n	800869a <HAL_SPI_Init+0xaa>
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	68da      	ldr	r2, [r3, #12]
 800868c:	23e0      	movs	r3, #224	@ 0xe0
 800868e:	00db      	lsls	r3, r3, #3
 8008690:	429a      	cmp	r2, r3
 8008692:	d002      	beq.n	800869a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2200      	movs	r2, #0
 8008698:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	685a      	ldr	r2, [r3, #4]
 800869e:	2382      	movs	r3, #130	@ 0x82
 80086a0:	005b      	lsls	r3, r3, #1
 80086a2:	401a      	ands	r2, r3
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6899      	ldr	r1, [r3, #8]
 80086a8:	2384      	movs	r3, #132	@ 0x84
 80086aa:	021b      	lsls	r3, r3, #8
 80086ac:	400b      	ands	r3, r1
 80086ae:	431a      	orrs	r2, r3
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	691b      	ldr	r3, [r3, #16]
 80086b4:	2102      	movs	r1, #2
 80086b6:	400b      	ands	r3, r1
 80086b8:	431a      	orrs	r2, r3
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	695b      	ldr	r3, [r3, #20]
 80086be:	2101      	movs	r1, #1
 80086c0:	400b      	ands	r3, r1
 80086c2:	431a      	orrs	r2, r3
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6999      	ldr	r1, [r3, #24]
 80086c8:	2380      	movs	r3, #128	@ 0x80
 80086ca:	009b      	lsls	r3, r3, #2
 80086cc:	400b      	ands	r3, r1
 80086ce:	431a      	orrs	r2, r3
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	69db      	ldr	r3, [r3, #28]
 80086d4:	2138      	movs	r1, #56	@ 0x38
 80086d6:	400b      	ands	r3, r1
 80086d8:	431a      	orrs	r2, r3
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6a1b      	ldr	r3, [r3, #32]
 80086de:	2180      	movs	r1, #128	@ 0x80
 80086e0:	400b      	ands	r3, r1
 80086e2:	431a      	orrs	r2, r3
 80086e4:	0011      	movs	r1, r2
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80086ea:	2380      	movs	r3, #128	@ 0x80
 80086ec:	019b      	lsls	r3, r3, #6
 80086ee:	401a      	ands	r2, r3
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	430a      	orrs	r2, r1
 80086f6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	699b      	ldr	r3, [r3, #24]
 80086fc:	0c1b      	lsrs	r3, r3, #16
 80086fe:	2204      	movs	r2, #4
 8008700:	401a      	ands	r2, r3
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008706:	2110      	movs	r1, #16
 8008708:	400b      	ands	r3, r1
 800870a:	431a      	orrs	r2, r3
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008710:	2108      	movs	r1, #8
 8008712:	400b      	ands	r3, r1
 8008714:	431a      	orrs	r2, r3
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	68d9      	ldr	r1, [r3, #12]
 800871a:	23f0      	movs	r3, #240	@ 0xf0
 800871c:	011b      	lsls	r3, r3, #4
 800871e:	400b      	ands	r3, r1
 8008720:	431a      	orrs	r2, r3
 8008722:	0011      	movs	r1, r2
 8008724:	68fa      	ldr	r2, [r7, #12]
 8008726:	2380      	movs	r3, #128	@ 0x80
 8008728:	015b      	lsls	r3, r3, #5
 800872a:	401a      	ands	r2, r3
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	430a      	orrs	r2, r1
 8008732:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	69da      	ldr	r2, [r3, #28]
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	4907      	ldr	r1, [pc, #28]	@ (800875c <HAL_SPI_Init+0x16c>)
 8008740:	400a      	ands	r2, r1
 8008742:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2200      	movs	r2, #0
 8008748:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	225d      	movs	r2, #93	@ 0x5d
 800874e:	2101      	movs	r1, #1
 8008750:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008752:	2300      	movs	r3, #0
}
 8008754:	0018      	movs	r0, r3
 8008756:	46bd      	mov	sp, r7
 8008758:	b004      	add	sp, #16
 800875a:	bd80      	pop	{r7, pc}
 800875c:	fffff7ff 	.word	0xfffff7ff

08008760 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b088      	sub	sp, #32
 8008764:	af00      	add	r7, sp, #0
 8008766:	60f8      	str	r0, [r7, #12]
 8008768:	60b9      	str	r1, [r7, #8]
 800876a:	603b      	str	r3, [r7, #0]
 800876c:	1dbb      	adds	r3, r7, #6
 800876e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008770:	231f      	movs	r3, #31
 8008772:	18fb      	adds	r3, r7, r3
 8008774:	2200      	movs	r2, #0
 8008776:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	225c      	movs	r2, #92	@ 0x5c
 800877c:	5c9b      	ldrb	r3, [r3, r2]
 800877e:	2b01      	cmp	r3, #1
 8008780:	d101      	bne.n	8008786 <HAL_SPI_Transmit+0x26>
 8008782:	2302      	movs	r3, #2
 8008784:	e147      	b.n	8008a16 <HAL_SPI_Transmit+0x2b6>
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	225c      	movs	r2, #92	@ 0x5c
 800878a:	2101      	movs	r1, #1
 800878c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800878e:	f7fd fc03 	bl	8005f98 <HAL_GetTick>
 8008792:	0003      	movs	r3, r0
 8008794:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8008796:	2316      	movs	r3, #22
 8008798:	18fb      	adds	r3, r7, r3
 800879a:	1dba      	adds	r2, r7, #6
 800879c:	8812      	ldrh	r2, [r2, #0]
 800879e:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	225d      	movs	r2, #93	@ 0x5d
 80087a4:	5c9b      	ldrb	r3, [r3, r2]
 80087a6:	b2db      	uxtb	r3, r3
 80087a8:	2b01      	cmp	r3, #1
 80087aa:	d004      	beq.n	80087b6 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80087ac:	231f      	movs	r3, #31
 80087ae:	18fb      	adds	r3, r7, r3
 80087b0:	2202      	movs	r2, #2
 80087b2:	701a      	strb	r2, [r3, #0]
    goto error;
 80087b4:	e128      	b.n	8008a08 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d003      	beq.n	80087c4 <HAL_SPI_Transmit+0x64>
 80087bc:	1dbb      	adds	r3, r7, #6
 80087be:	881b      	ldrh	r3, [r3, #0]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d104      	bne.n	80087ce <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80087c4:	231f      	movs	r3, #31
 80087c6:	18fb      	adds	r3, r7, r3
 80087c8:	2201      	movs	r2, #1
 80087ca:	701a      	strb	r2, [r3, #0]
    goto error;
 80087cc:	e11c      	b.n	8008a08 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	225d      	movs	r2, #93	@ 0x5d
 80087d2:	2103      	movs	r1, #3
 80087d4:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	2200      	movs	r2, #0
 80087da:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	68ba      	ldr	r2, [r7, #8]
 80087e0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	1dba      	adds	r2, r7, #6
 80087e6:	8812      	ldrh	r2, [r2, #0]
 80087e8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	1dba      	adds	r2, r7, #6
 80087ee:	8812      	ldrh	r2, [r2, #0]
 80087f0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	2200      	movs	r2, #0
 80087f6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	2244      	movs	r2, #68	@ 0x44
 80087fc:	2100      	movs	r1, #0
 80087fe:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	2246      	movs	r2, #70	@ 0x46
 8008804:	2100      	movs	r1, #0
 8008806:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	2200      	movs	r2, #0
 800880c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	2200      	movs	r2, #0
 8008812:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	689a      	ldr	r2, [r3, #8]
 8008818:	2380      	movs	r3, #128	@ 0x80
 800881a:	021b      	lsls	r3, r3, #8
 800881c:	429a      	cmp	r2, r3
 800881e:	d110      	bne.n	8008842 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	681a      	ldr	r2, [r3, #0]
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	2140      	movs	r1, #64	@ 0x40
 800882c:	438a      	bics	r2, r1
 800882e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	681a      	ldr	r2, [r3, #0]
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	2180      	movs	r1, #128	@ 0x80
 800883c:	01c9      	lsls	r1, r1, #7
 800883e:	430a      	orrs	r2, r1
 8008840:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	2240      	movs	r2, #64	@ 0x40
 800884a:	4013      	ands	r3, r2
 800884c:	2b40      	cmp	r3, #64	@ 0x40
 800884e:	d007      	beq.n	8008860 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	681a      	ldr	r2, [r3, #0]
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	2140      	movs	r1, #64	@ 0x40
 800885c:	430a      	orrs	r2, r1
 800885e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	68da      	ldr	r2, [r3, #12]
 8008864:	23e0      	movs	r3, #224	@ 0xe0
 8008866:	00db      	lsls	r3, r3, #3
 8008868:	429a      	cmp	r2, r3
 800886a:	d952      	bls.n	8008912 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	685b      	ldr	r3, [r3, #4]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d004      	beq.n	800887e <HAL_SPI_Transmit+0x11e>
 8008874:	2316      	movs	r3, #22
 8008876:	18fb      	adds	r3, r7, r3
 8008878:	881b      	ldrh	r3, [r3, #0]
 800887a:	2b01      	cmp	r3, #1
 800887c:	d143      	bne.n	8008906 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008882:	881a      	ldrh	r2, [r3, #0]
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800888e:	1c9a      	adds	r2, r3, #2
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008898:	b29b      	uxth	r3, r3
 800889a:	3b01      	subs	r3, #1
 800889c:	b29a      	uxth	r2, r3
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80088a2:	e030      	b.n	8008906 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	689b      	ldr	r3, [r3, #8]
 80088aa:	2202      	movs	r2, #2
 80088ac:	4013      	ands	r3, r2
 80088ae:	2b02      	cmp	r3, #2
 80088b0:	d112      	bne.n	80088d8 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088b6:	881a      	ldrh	r2, [r3, #0]
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088c2:	1c9a      	adds	r2, r3, #2
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80088cc:	b29b      	uxth	r3, r3
 80088ce:	3b01      	subs	r3, #1
 80088d0:	b29a      	uxth	r2, r3
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80088d6:	e016      	b.n	8008906 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80088d8:	f7fd fb5e 	bl	8005f98 <HAL_GetTick>
 80088dc:	0002      	movs	r2, r0
 80088de:	69bb      	ldr	r3, [r7, #24]
 80088e0:	1ad3      	subs	r3, r2, r3
 80088e2:	683a      	ldr	r2, [r7, #0]
 80088e4:	429a      	cmp	r2, r3
 80088e6:	d802      	bhi.n	80088ee <HAL_SPI_Transmit+0x18e>
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	3301      	adds	r3, #1
 80088ec:	d102      	bne.n	80088f4 <HAL_SPI_Transmit+0x194>
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d108      	bne.n	8008906 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 80088f4:	231f      	movs	r3, #31
 80088f6:	18fb      	adds	r3, r7, r3
 80088f8:	2203      	movs	r2, #3
 80088fa:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	225d      	movs	r2, #93	@ 0x5d
 8008900:	2101      	movs	r1, #1
 8008902:	5499      	strb	r1, [r3, r2]
          goto error;
 8008904:	e080      	b.n	8008a08 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800890a:	b29b      	uxth	r3, r3
 800890c:	2b00      	cmp	r3, #0
 800890e:	d1c9      	bne.n	80088a4 <HAL_SPI_Transmit+0x144>
 8008910:	e053      	b.n	80089ba <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	685b      	ldr	r3, [r3, #4]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d004      	beq.n	8008924 <HAL_SPI_Transmit+0x1c4>
 800891a:	2316      	movs	r3, #22
 800891c:	18fb      	adds	r3, r7, r3
 800891e:	881b      	ldrh	r3, [r3, #0]
 8008920:	2b01      	cmp	r3, #1
 8008922:	d145      	bne.n	80089b0 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	330c      	adds	r3, #12
 800892e:	7812      	ldrb	r2, [r2, #0]
 8008930:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008936:	1c5a      	adds	r2, r3, #1
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008940:	b29b      	uxth	r3, r3
 8008942:	3b01      	subs	r3, #1
 8008944:	b29a      	uxth	r2, r3
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800894a:	e031      	b.n	80089b0 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	689b      	ldr	r3, [r3, #8]
 8008952:	2202      	movs	r2, #2
 8008954:	4013      	ands	r3, r2
 8008956:	2b02      	cmp	r3, #2
 8008958:	d113      	bne.n	8008982 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	330c      	adds	r3, #12
 8008964:	7812      	ldrb	r2, [r2, #0]
 8008966:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800896c:	1c5a      	adds	r2, r3, #1
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008976:	b29b      	uxth	r3, r3
 8008978:	3b01      	subs	r3, #1
 800897a:	b29a      	uxth	r2, r3
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008980:	e016      	b.n	80089b0 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008982:	f7fd fb09 	bl	8005f98 <HAL_GetTick>
 8008986:	0002      	movs	r2, r0
 8008988:	69bb      	ldr	r3, [r7, #24]
 800898a:	1ad3      	subs	r3, r2, r3
 800898c:	683a      	ldr	r2, [r7, #0]
 800898e:	429a      	cmp	r2, r3
 8008990:	d802      	bhi.n	8008998 <HAL_SPI_Transmit+0x238>
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	3301      	adds	r3, #1
 8008996:	d102      	bne.n	800899e <HAL_SPI_Transmit+0x23e>
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d108      	bne.n	80089b0 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 800899e:	231f      	movs	r3, #31
 80089a0:	18fb      	adds	r3, r7, r3
 80089a2:	2203      	movs	r2, #3
 80089a4:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	225d      	movs	r2, #93	@ 0x5d
 80089aa:	2101      	movs	r1, #1
 80089ac:	5499      	strb	r1, [r3, r2]
          goto error;
 80089ae:	e02b      	b.n	8008a08 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80089b4:	b29b      	uxth	r3, r3
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d1c8      	bne.n	800894c <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80089ba:	69ba      	ldr	r2, [r7, #24]
 80089bc:	6839      	ldr	r1, [r7, #0]
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	0018      	movs	r0, r3
 80089c2:	f000 f95d 	bl	8008c80 <SPI_EndRxTxTransaction>
 80089c6:	1e03      	subs	r3, r0, #0
 80089c8:	d002      	beq.n	80089d0 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	2220      	movs	r2, #32
 80089ce:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	689b      	ldr	r3, [r3, #8]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d10a      	bne.n	80089ee <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80089d8:	2300      	movs	r3, #0
 80089da:	613b      	str	r3, [r7, #16]
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	68db      	ldr	r3, [r3, #12]
 80089e2:	613b      	str	r3, [r7, #16]
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	689b      	ldr	r3, [r3, #8]
 80089ea:	613b      	str	r3, [r7, #16]
 80089ec:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d004      	beq.n	8008a00 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 80089f6:	231f      	movs	r3, #31
 80089f8:	18fb      	adds	r3, r7, r3
 80089fa:	2201      	movs	r2, #1
 80089fc:	701a      	strb	r2, [r3, #0]
 80089fe:	e003      	b.n	8008a08 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	225d      	movs	r2, #93	@ 0x5d
 8008a04:	2101      	movs	r1, #1
 8008a06:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	225c      	movs	r2, #92	@ 0x5c
 8008a0c:	2100      	movs	r1, #0
 8008a0e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8008a10:	231f      	movs	r3, #31
 8008a12:	18fb      	adds	r3, r7, r3
 8008a14:	781b      	ldrb	r3, [r3, #0]
}
 8008a16:	0018      	movs	r0, r3
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	b008      	add	sp, #32
 8008a1c:	bd80      	pop	{r7, pc}
	...

08008a20 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b088      	sub	sp, #32
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	60f8      	str	r0, [r7, #12]
 8008a28:	60b9      	str	r1, [r7, #8]
 8008a2a:	603b      	str	r3, [r7, #0]
 8008a2c:	1dfb      	adds	r3, r7, #7
 8008a2e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008a30:	f7fd fab2 	bl	8005f98 <HAL_GetTick>
 8008a34:	0002      	movs	r2, r0
 8008a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a38:	1a9b      	subs	r3, r3, r2
 8008a3a:	683a      	ldr	r2, [r7, #0]
 8008a3c:	18d3      	adds	r3, r2, r3
 8008a3e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008a40:	f7fd faaa 	bl	8005f98 <HAL_GetTick>
 8008a44:	0003      	movs	r3, r0
 8008a46:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008a48:	4b3a      	ldr	r3, [pc, #232]	@ (8008b34 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	015b      	lsls	r3, r3, #5
 8008a4e:	0d1b      	lsrs	r3, r3, #20
 8008a50:	69fa      	ldr	r2, [r7, #28]
 8008a52:	4353      	muls	r3, r2
 8008a54:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008a56:	e058      	b.n	8008b0a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	3301      	adds	r3, #1
 8008a5c:	d055      	beq.n	8008b0a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008a5e:	f7fd fa9b 	bl	8005f98 <HAL_GetTick>
 8008a62:	0002      	movs	r2, r0
 8008a64:	69bb      	ldr	r3, [r7, #24]
 8008a66:	1ad3      	subs	r3, r2, r3
 8008a68:	69fa      	ldr	r2, [r7, #28]
 8008a6a:	429a      	cmp	r2, r3
 8008a6c:	d902      	bls.n	8008a74 <SPI_WaitFlagStateUntilTimeout+0x54>
 8008a6e:	69fb      	ldr	r3, [r7, #28]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d142      	bne.n	8008afa <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	685a      	ldr	r2, [r3, #4]
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	21e0      	movs	r1, #224	@ 0xe0
 8008a80:	438a      	bics	r2, r1
 8008a82:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	685a      	ldr	r2, [r3, #4]
 8008a88:	2382      	movs	r3, #130	@ 0x82
 8008a8a:	005b      	lsls	r3, r3, #1
 8008a8c:	429a      	cmp	r2, r3
 8008a8e:	d113      	bne.n	8008ab8 <SPI_WaitFlagStateUntilTimeout+0x98>
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	689a      	ldr	r2, [r3, #8]
 8008a94:	2380      	movs	r3, #128	@ 0x80
 8008a96:	021b      	lsls	r3, r3, #8
 8008a98:	429a      	cmp	r2, r3
 8008a9a:	d005      	beq.n	8008aa8 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	689a      	ldr	r2, [r3, #8]
 8008aa0:	2380      	movs	r3, #128	@ 0x80
 8008aa2:	00db      	lsls	r3, r3, #3
 8008aa4:	429a      	cmp	r2, r3
 8008aa6:	d107      	bne.n	8008ab8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	681a      	ldr	r2, [r3, #0]
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	2140      	movs	r1, #64	@ 0x40
 8008ab4:	438a      	bics	r2, r1
 8008ab6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008abc:	2380      	movs	r3, #128	@ 0x80
 8008abe:	019b      	lsls	r3, r3, #6
 8008ac0:	429a      	cmp	r2, r3
 8008ac2:	d110      	bne.n	8008ae6 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	681a      	ldr	r2, [r3, #0]
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	491a      	ldr	r1, [pc, #104]	@ (8008b38 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8008ad0:	400a      	ands	r2, r1
 8008ad2:	601a      	str	r2, [r3, #0]
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	681a      	ldr	r2, [r3, #0]
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	2180      	movs	r1, #128	@ 0x80
 8008ae0:	0189      	lsls	r1, r1, #6
 8008ae2:	430a      	orrs	r2, r1
 8008ae4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	225d      	movs	r2, #93	@ 0x5d
 8008aea:	2101      	movs	r1, #1
 8008aec:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	225c      	movs	r2, #92	@ 0x5c
 8008af2:	2100      	movs	r1, #0
 8008af4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008af6:	2303      	movs	r3, #3
 8008af8:	e017      	b.n	8008b2a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d101      	bne.n	8008b04 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8008b00:	2300      	movs	r3, #0
 8008b02:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008b04:	697b      	ldr	r3, [r7, #20]
 8008b06:	3b01      	subs	r3, #1
 8008b08:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	689b      	ldr	r3, [r3, #8]
 8008b10:	68ba      	ldr	r2, [r7, #8]
 8008b12:	4013      	ands	r3, r2
 8008b14:	68ba      	ldr	r2, [r7, #8]
 8008b16:	1ad3      	subs	r3, r2, r3
 8008b18:	425a      	negs	r2, r3
 8008b1a:	4153      	adcs	r3, r2
 8008b1c:	b2db      	uxtb	r3, r3
 8008b1e:	001a      	movs	r2, r3
 8008b20:	1dfb      	adds	r3, r7, #7
 8008b22:	781b      	ldrb	r3, [r3, #0]
 8008b24:	429a      	cmp	r2, r3
 8008b26:	d197      	bne.n	8008a58 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008b28:	2300      	movs	r3, #0
}
 8008b2a:	0018      	movs	r0, r3
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	b008      	add	sp, #32
 8008b30:	bd80      	pop	{r7, pc}
 8008b32:	46c0      	nop			@ (mov r8, r8)
 8008b34:	20000e84 	.word	0x20000e84
 8008b38:	ffffdfff 	.word	0xffffdfff

08008b3c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b08a      	sub	sp, #40	@ 0x28
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	60f8      	str	r0, [r7, #12]
 8008b44:	60b9      	str	r1, [r7, #8]
 8008b46:	607a      	str	r2, [r7, #4]
 8008b48:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008b4a:	2317      	movs	r3, #23
 8008b4c:	18fb      	adds	r3, r7, r3
 8008b4e:	2200      	movs	r2, #0
 8008b50:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008b52:	f7fd fa21 	bl	8005f98 <HAL_GetTick>
 8008b56:	0002      	movs	r2, r0
 8008b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b5a:	1a9b      	subs	r3, r3, r2
 8008b5c:	683a      	ldr	r2, [r7, #0]
 8008b5e:	18d3      	adds	r3, r2, r3
 8008b60:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8008b62:	f7fd fa19 	bl	8005f98 <HAL_GetTick>
 8008b66:	0003      	movs	r3, r0
 8008b68:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	330c      	adds	r3, #12
 8008b70:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008b72:	4b41      	ldr	r3, [pc, #260]	@ (8008c78 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8008b74:	681a      	ldr	r2, [r3, #0]
 8008b76:	0013      	movs	r3, r2
 8008b78:	009b      	lsls	r3, r3, #2
 8008b7a:	189b      	adds	r3, r3, r2
 8008b7c:	00da      	lsls	r2, r3, #3
 8008b7e:	1ad3      	subs	r3, r2, r3
 8008b80:	0d1b      	lsrs	r3, r3, #20
 8008b82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b84:	4353      	muls	r3, r2
 8008b86:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008b88:	e068      	b.n	8008c5c <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008b8a:	68ba      	ldr	r2, [r7, #8]
 8008b8c:	23c0      	movs	r3, #192	@ 0xc0
 8008b8e:	00db      	lsls	r3, r3, #3
 8008b90:	429a      	cmp	r2, r3
 8008b92:	d10a      	bne.n	8008baa <SPI_WaitFifoStateUntilTimeout+0x6e>
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d107      	bne.n	8008baa <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008b9a:	69fb      	ldr	r3, [r7, #28]
 8008b9c:	781b      	ldrb	r3, [r3, #0]
 8008b9e:	b2da      	uxtb	r2, r3
 8008ba0:	2117      	movs	r1, #23
 8008ba2:	187b      	adds	r3, r7, r1
 8008ba4:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008ba6:	187b      	adds	r3, r7, r1
 8008ba8:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	3301      	adds	r3, #1
 8008bae:	d055      	beq.n	8008c5c <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008bb0:	f7fd f9f2 	bl	8005f98 <HAL_GetTick>
 8008bb4:	0002      	movs	r2, r0
 8008bb6:	6a3b      	ldr	r3, [r7, #32]
 8008bb8:	1ad3      	subs	r3, r2, r3
 8008bba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	d902      	bls.n	8008bc6 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8008bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d142      	bne.n	8008c4c <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	685a      	ldr	r2, [r3, #4]
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	21e0      	movs	r1, #224	@ 0xe0
 8008bd2:	438a      	bics	r2, r1
 8008bd4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	685a      	ldr	r2, [r3, #4]
 8008bda:	2382      	movs	r3, #130	@ 0x82
 8008bdc:	005b      	lsls	r3, r3, #1
 8008bde:	429a      	cmp	r2, r3
 8008be0:	d113      	bne.n	8008c0a <SPI_WaitFifoStateUntilTimeout+0xce>
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	689a      	ldr	r2, [r3, #8]
 8008be6:	2380      	movs	r3, #128	@ 0x80
 8008be8:	021b      	lsls	r3, r3, #8
 8008bea:	429a      	cmp	r2, r3
 8008bec:	d005      	beq.n	8008bfa <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	689a      	ldr	r2, [r3, #8]
 8008bf2:	2380      	movs	r3, #128	@ 0x80
 8008bf4:	00db      	lsls	r3, r3, #3
 8008bf6:	429a      	cmp	r2, r3
 8008bf8:	d107      	bne.n	8008c0a <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	681a      	ldr	r2, [r3, #0]
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	2140      	movs	r1, #64	@ 0x40
 8008c06:	438a      	bics	r2, r1
 8008c08:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008c0e:	2380      	movs	r3, #128	@ 0x80
 8008c10:	019b      	lsls	r3, r3, #6
 8008c12:	429a      	cmp	r2, r3
 8008c14:	d110      	bne.n	8008c38 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	681a      	ldr	r2, [r3, #0]
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	4916      	ldr	r1, [pc, #88]	@ (8008c7c <SPI_WaitFifoStateUntilTimeout+0x140>)
 8008c22:	400a      	ands	r2, r1
 8008c24:	601a      	str	r2, [r3, #0]
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	681a      	ldr	r2, [r3, #0]
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	2180      	movs	r1, #128	@ 0x80
 8008c32:	0189      	lsls	r1, r1, #6
 8008c34:	430a      	orrs	r2, r1
 8008c36:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	225d      	movs	r2, #93	@ 0x5d
 8008c3c:	2101      	movs	r1, #1
 8008c3e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	225c      	movs	r2, #92	@ 0x5c
 8008c44:	2100      	movs	r1, #0
 8008c46:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008c48:	2303      	movs	r3, #3
 8008c4a:	e010      	b.n	8008c6e <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008c4c:	69bb      	ldr	r3, [r7, #24]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d101      	bne.n	8008c56 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8008c52:	2300      	movs	r3, #0
 8008c54:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8008c56:	69bb      	ldr	r3, [r7, #24]
 8008c58:	3b01      	subs	r3, #1
 8008c5a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	689b      	ldr	r3, [r3, #8]
 8008c62:	68ba      	ldr	r2, [r7, #8]
 8008c64:	4013      	ands	r3, r2
 8008c66:	687a      	ldr	r2, [r7, #4]
 8008c68:	429a      	cmp	r2, r3
 8008c6a:	d18e      	bne.n	8008b8a <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8008c6c:	2300      	movs	r3, #0
}
 8008c6e:	0018      	movs	r0, r3
 8008c70:	46bd      	mov	sp, r7
 8008c72:	b00a      	add	sp, #40	@ 0x28
 8008c74:	bd80      	pop	{r7, pc}
 8008c76:	46c0      	nop			@ (mov r8, r8)
 8008c78:	20000e84 	.word	0x20000e84
 8008c7c:	ffffdfff 	.word	0xffffdfff

08008c80 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b086      	sub	sp, #24
 8008c84:	af02      	add	r7, sp, #8
 8008c86:	60f8      	str	r0, [r7, #12]
 8008c88:	60b9      	str	r1, [r7, #8]
 8008c8a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008c8c:	68ba      	ldr	r2, [r7, #8]
 8008c8e:	23c0      	movs	r3, #192	@ 0xc0
 8008c90:	0159      	lsls	r1, r3, #5
 8008c92:	68f8      	ldr	r0, [r7, #12]
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	9300      	str	r3, [sp, #0]
 8008c98:	0013      	movs	r3, r2
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	f7ff ff4e 	bl	8008b3c <SPI_WaitFifoStateUntilTimeout>
 8008ca0:	1e03      	subs	r3, r0, #0
 8008ca2:	d007      	beq.n	8008cb4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008ca8:	2220      	movs	r2, #32
 8008caa:	431a      	orrs	r2, r3
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008cb0:	2303      	movs	r3, #3
 8008cb2:	e027      	b.n	8008d04 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008cb4:	68ba      	ldr	r2, [r7, #8]
 8008cb6:	68f8      	ldr	r0, [r7, #12]
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	9300      	str	r3, [sp, #0]
 8008cbc:	0013      	movs	r3, r2
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	2180      	movs	r1, #128	@ 0x80
 8008cc2:	f7ff fead 	bl	8008a20 <SPI_WaitFlagStateUntilTimeout>
 8008cc6:	1e03      	subs	r3, r0, #0
 8008cc8:	d007      	beq.n	8008cda <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008cce:	2220      	movs	r2, #32
 8008cd0:	431a      	orrs	r2, r3
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008cd6:	2303      	movs	r3, #3
 8008cd8:	e014      	b.n	8008d04 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008cda:	68ba      	ldr	r2, [r7, #8]
 8008cdc:	23c0      	movs	r3, #192	@ 0xc0
 8008cde:	00d9      	lsls	r1, r3, #3
 8008ce0:	68f8      	ldr	r0, [r7, #12]
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	9300      	str	r3, [sp, #0]
 8008ce6:	0013      	movs	r3, r2
 8008ce8:	2200      	movs	r2, #0
 8008cea:	f7ff ff27 	bl	8008b3c <SPI_WaitFifoStateUntilTimeout>
 8008cee:	1e03      	subs	r3, r0, #0
 8008cf0:	d007      	beq.n	8008d02 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008cf6:	2220      	movs	r2, #32
 8008cf8:	431a      	orrs	r2, r3
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008cfe:	2303      	movs	r3, #3
 8008d00:	e000      	b.n	8008d04 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008d02:	2300      	movs	r3, #0
}
 8008d04:	0018      	movs	r0, r3
 8008d06:	46bd      	mov	sp, r7
 8008d08:	b004      	add	sp, #16
 8008d0a:	bd80      	pop	{r7, pc}

08008d0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b082      	sub	sp, #8
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d101      	bne.n	8008d1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	e04a      	b.n	8008db4 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	223d      	movs	r2, #61	@ 0x3d
 8008d22:	5c9b      	ldrb	r3, [r3, r2]
 8008d24:	b2db      	uxtb	r3, r3
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d107      	bne.n	8008d3a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	223c      	movs	r2, #60	@ 0x3c
 8008d2e:	2100      	movs	r1, #0
 8008d30:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	0018      	movs	r0, r3
 8008d36:	f7fc ff0d 	bl	8005b54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	223d      	movs	r2, #61	@ 0x3d
 8008d3e:	2102      	movs	r1, #2
 8008d40:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681a      	ldr	r2, [r3, #0]
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	3304      	adds	r3, #4
 8008d4a:	0019      	movs	r1, r3
 8008d4c:	0010      	movs	r0, r2
 8008d4e:	f000 fb11 	bl	8009374 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2248      	movs	r2, #72	@ 0x48
 8008d56:	2101      	movs	r1, #1
 8008d58:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	223e      	movs	r2, #62	@ 0x3e
 8008d5e:	2101      	movs	r1, #1
 8008d60:	5499      	strb	r1, [r3, r2]
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	223f      	movs	r2, #63	@ 0x3f
 8008d66:	2101      	movs	r1, #1
 8008d68:	5499      	strb	r1, [r3, r2]
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2240      	movs	r2, #64	@ 0x40
 8008d6e:	2101      	movs	r1, #1
 8008d70:	5499      	strb	r1, [r3, r2]
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2241      	movs	r2, #65	@ 0x41
 8008d76:	2101      	movs	r1, #1
 8008d78:	5499      	strb	r1, [r3, r2]
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2242      	movs	r2, #66	@ 0x42
 8008d7e:	2101      	movs	r1, #1
 8008d80:	5499      	strb	r1, [r3, r2]
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2243      	movs	r2, #67	@ 0x43
 8008d86:	2101      	movs	r1, #1
 8008d88:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2244      	movs	r2, #68	@ 0x44
 8008d8e:	2101      	movs	r1, #1
 8008d90:	5499      	strb	r1, [r3, r2]
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2245      	movs	r2, #69	@ 0x45
 8008d96:	2101      	movs	r1, #1
 8008d98:	5499      	strb	r1, [r3, r2]
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2246      	movs	r2, #70	@ 0x46
 8008d9e:	2101      	movs	r1, #1
 8008da0:	5499      	strb	r1, [r3, r2]
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2247      	movs	r2, #71	@ 0x47
 8008da6:	2101      	movs	r1, #1
 8008da8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	223d      	movs	r2, #61	@ 0x3d
 8008dae:	2101      	movs	r1, #1
 8008db0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008db2:	2300      	movs	r3, #0
}
 8008db4:	0018      	movs	r0, r3
 8008db6:	46bd      	mov	sp, r7
 8008db8:	b002      	add	sp, #8
 8008dba:	bd80      	pop	{r7, pc}

08008dbc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b082      	sub	sp, #8
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d101      	bne.n	8008dce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008dca:	2301      	movs	r3, #1
 8008dcc:	e04a      	b.n	8008e64 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	223d      	movs	r2, #61	@ 0x3d
 8008dd2:	5c9b      	ldrb	r3, [r3, r2]
 8008dd4:	b2db      	uxtb	r3, r3
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d107      	bne.n	8008dea <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	223c      	movs	r2, #60	@ 0x3c
 8008dde:	2100      	movs	r1, #0
 8008de0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	0018      	movs	r0, r3
 8008de6:	f000 f841 	bl	8008e6c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	223d      	movs	r2, #61	@ 0x3d
 8008dee:	2102      	movs	r1, #2
 8008df0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681a      	ldr	r2, [r3, #0]
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	3304      	adds	r3, #4
 8008dfa:	0019      	movs	r1, r3
 8008dfc:	0010      	movs	r0, r2
 8008dfe:	f000 fab9 	bl	8009374 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2248      	movs	r2, #72	@ 0x48
 8008e06:	2101      	movs	r1, #1
 8008e08:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	223e      	movs	r2, #62	@ 0x3e
 8008e0e:	2101      	movs	r1, #1
 8008e10:	5499      	strb	r1, [r3, r2]
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	223f      	movs	r2, #63	@ 0x3f
 8008e16:	2101      	movs	r1, #1
 8008e18:	5499      	strb	r1, [r3, r2]
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2240      	movs	r2, #64	@ 0x40
 8008e1e:	2101      	movs	r1, #1
 8008e20:	5499      	strb	r1, [r3, r2]
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2241      	movs	r2, #65	@ 0x41
 8008e26:	2101      	movs	r1, #1
 8008e28:	5499      	strb	r1, [r3, r2]
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2242      	movs	r2, #66	@ 0x42
 8008e2e:	2101      	movs	r1, #1
 8008e30:	5499      	strb	r1, [r3, r2]
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2243      	movs	r2, #67	@ 0x43
 8008e36:	2101      	movs	r1, #1
 8008e38:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2244      	movs	r2, #68	@ 0x44
 8008e3e:	2101      	movs	r1, #1
 8008e40:	5499      	strb	r1, [r3, r2]
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2245      	movs	r2, #69	@ 0x45
 8008e46:	2101      	movs	r1, #1
 8008e48:	5499      	strb	r1, [r3, r2]
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2246      	movs	r2, #70	@ 0x46
 8008e4e:	2101      	movs	r1, #1
 8008e50:	5499      	strb	r1, [r3, r2]
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2247      	movs	r2, #71	@ 0x47
 8008e56:	2101      	movs	r1, #1
 8008e58:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	223d      	movs	r2, #61	@ 0x3d
 8008e5e:	2101      	movs	r1, #1
 8008e60:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008e62:	2300      	movs	r3, #0
}
 8008e64:	0018      	movs	r0, r3
 8008e66:	46bd      	mov	sp, r7
 8008e68:	b002      	add	sp, #8
 8008e6a:	bd80      	pop	{r7, pc}

08008e6c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b082      	sub	sp, #8
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008e74:	46c0      	nop			@ (mov r8, r8)
 8008e76:	46bd      	mov	sp, r7
 8008e78:	b002      	add	sp, #8
 8008e7a:	bd80      	pop	{r7, pc}

08008e7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b084      	sub	sp, #16
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
 8008e84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d108      	bne.n	8008e9e <HAL_TIM_PWM_Start+0x22>
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	223e      	movs	r2, #62	@ 0x3e
 8008e90:	5c9b      	ldrb	r3, [r3, r2]
 8008e92:	b2db      	uxtb	r3, r3
 8008e94:	3b01      	subs	r3, #1
 8008e96:	1e5a      	subs	r2, r3, #1
 8008e98:	4193      	sbcs	r3, r2
 8008e9a:	b2db      	uxtb	r3, r3
 8008e9c:	e037      	b.n	8008f0e <HAL_TIM_PWM_Start+0x92>
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	2b04      	cmp	r3, #4
 8008ea2:	d108      	bne.n	8008eb6 <HAL_TIM_PWM_Start+0x3a>
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	223f      	movs	r2, #63	@ 0x3f
 8008ea8:	5c9b      	ldrb	r3, [r3, r2]
 8008eaa:	b2db      	uxtb	r3, r3
 8008eac:	3b01      	subs	r3, #1
 8008eae:	1e5a      	subs	r2, r3, #1
 8008eb0:	4193      	sbcs	r3, r2
 8008eb2:	b2db      	uxtb	r3, r3
 8008eb4:	e02b      	b.n	8008f0e <HAL_TIM_PWM_Start+0x92>
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	2b08      	cmp	r3, #8
 8008eba:	d108      	bne.n	8008ece <HAL_TIM_PWM_Start+0x52>
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2240      	movs	r2, #64	@ 0x40
 8008ec0:	5c9b      	ldrb	r3, [r3, r2]
 8008ec2:	b2db      	uxtb	r3, r3
 8008ec4:	3b01      	subs	r3, #1
 8008ec6:	1e5a      	subs	r2, r3, #1
 8008ec8:	4193      	sbcs	r3, r2
 8008eca:	b2db      	uxtb	r3, r3
 8008ecc:	e01f      	b.n	8008f0e <HAL_TIM_PWM_Start+0x92>
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	2b0c      	cmp	r3, #12
 8008ed2:	d108      	bne.n	8008ee6 <HAL_TIM_PWM_Start+0x6a>
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2241      	movs	r2, #65	@ 0x41
 8008ed8:	5c9b      	ldrb	r3, [r3, r2]
 8008eda:	b2db      	uxtb	r3, r3
 8008edc:	3b01      	subs	r3, #1
 8008ede:	1e5a      	subs	r2, r3, #1
 8008ee0:	4193      	sbcs	r3, r2
 8008ee2:	b2db      	uxtb	r3, r3
 8008ee4:	e013      	b.n	8008f0e <HAL_TIM_PWM_Start+0x92>
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	2b10      	cmp	r3, #16
 8008eea:	d108      	bne.n	8008efe <HAL_TIM_PWM_Start+0x82>
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2242      	movs	r2, #66	@ 0x42
 8008ef0:	5c9b      	ldrb	r3, [r3, r2]
 8008ef2:	b2db      	uxtb	r3, r3
 8008ef4:	3b01      	subs	r3, #1
 8008ef6:	1e5a      	subs	r2, r3, #1
 8008ef8:	4193      	sbcs	r3, r2
 8008efa:	b2db      	uxtb	r3, r3
 8008efc:	e007      	b.n	8008f0e <HAL_TIM_PWM_Start+0x92>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2243      	movs	r2, #67	@ 0x43
 8008f02:	5c9b      	ldrb	r3, [r3, r2]
 8008f04:	b2db      	uxtb	r3, r3
 8008f06:	3b01      	subs	r3, #1
 8008f08:	1e5a      	subs	r2, r3, #1
 8008f0a:	4193      	sbcs	r3, r2
 8008f0c:	b2db      	uxtb	r3, r3
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d001      	beq.n	8008f16 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8008f12:	2301      	movs	r3, #1
 8008f14:	e090      	b.n	8009038 <HAL_TIM_PWM_Start+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d104      	bne.n	8008f26 <HAL_TIM_PWM_Start+0xaa>
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	223e      	movs	r2, #62	@ 0x3e
 8008f20:	2102      	movs	r1, #2
 8008f22:	5499      	strb	r1, [r3, r2]
 8008f24:	e023      	b.n	8008f6e <HAL_TIM_PWM_Start+0xf2>
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	2b04      	cmp	r3, #4
 8008f2a:	d104      	bne.n	8008f36 <HAL_TIM_PWM_Start+0xba>
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	223f      	movs	r2, #63	@ 0x3f
 8008f30:	2102      	movs	r1, #2
 8008f32:	5499      	strb	r1, [r3, r2]
 8008f34:	e01b      	b.n	8008f6e <HAL_TIM_PWM_Start+0xf2>
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	2b08      	cmp	r3, #8
 8008f3a:	d104      	bne.n	8008f46 <HAL_TIM_PWM_Start+0xca>
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2240      	movs	r2, #64	@ 0x40
 8008f40:	2102      	movs	r1, #2
 8008f42:	5499      	strb	r1, [r3, r2]
 8008f44:	e013      	b.n	8008f6e <HAL_TIM_PWM_Start+0xf2>
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	2b0c      	cmp	r3, #12
 8008f4a:	d104      	bne.n	8008f56 <HAL_TIM_PWM_Start+0xda>
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2241      	movs	r2, #65	@ 0x41
 8008f50:	2102      	movs	r1, #2
 8008f52:	5499      	strb	r1, [r3, r2]
 8008f54:	e00b      	b.n	8008f6e <HAL_TIM_PWM_Start+0xf2>
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	2b10      	cmp	r3, #16
 8008f5a:	d104      	bne.n	8008f66 <HAL_TIM_PWM_Start+0xea>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2242      	movs	r2, #66	@ 0x42
 8008f60:	2102      	movs	r1, #2
 8008f62:	5499      	strb	r1, [r3, r2]
 8008f64:	e003      	b.n	8008f6e <HAL_TIM_PWM_Start+0xf2>
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2243      	movs	r2, #67	@ 0x43
 8008f6a:	2102      	movs	r1, #2
 8008f6c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	6839      	ldr	r1, [r7, #0]
 8008f74:	2201      	movs	r2, #1
 8008f76:	0018      	movs	r0, r3
 8008f78:	f000 fd58 	bl	8009a2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	4a2f      	ldr	r2, [pc, #188]	@ (8009040 <HAL_TIM_PWM_Start+0x1c4>)
 8008f82:	4293      	cmp	r3, r2
 8008f84:	d00e      	beq.n	8008fa4 <HAL_TIM_PWM_Start+0x128>
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	4a2e      	ldr	r2, [pc, #184]	@ (8009044 <HAL_TIM_PWM_Start+0x1c8>)
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d009      	beq.n	8008fa4 <HAL_TIM_PWM_Start+0x128>
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	4a2c      	ldr	r2, [pc, #176]	@ (8009048 <HAL_TIM_PWM_Start+0x1cc>)
 8008f96:	4293      	cmp	r3, r2
 8008f98:	d004      	beq.n	8008fa4 <HAL_TIM_PWM_Start+0x128>
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	4a2b      	ldr	r2, [pc, #172]	@ (800904c <HAL_TIM_PWM_Start+0x1d0>)
 8008fa0:	4293      	cmp	r3, r2
 8008fa2:	d101      	bne.n	8008fa8 <HAL_TIM_PWM_Start+0x12c>
 8008fa4:	2301      	movs	r3, #1
 8008fa6:	e000      	b.n	8008faa <HAL_TIM_PWM_Start+0x12e>
 8008fa8:	2300      	movs	r3, #0
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d008      	beq.n	8008fc0 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	2180      	movs	r1, #128	@ 0x80
 8008fba:	0209      	lsls	r1, r1, #8
 8008fbc:	430a      	orrs	r2, r1
 8008fbe:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	4a1e      	ldr	r2, [pc, #120]	@ (8009040 <HAL_TIM_PWM_Start+0x1c4>)
 8008fc6:	4293      	cmp	r3, r2
 8008fc8:	d014      	beq.n	8008ff4 <HAL_TIM_PWM_Start+0x178>
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681a      	ldr	r2, [r3, #0]
 8008fce:	2380      	movs	r3, #128	@ 0x80
 8008fd0:	05db      	lsls	r3, r3, #23
 8008fd2:	429a      	cmp	r2, r3
 8008fd4:	d00e      	beq.n	8008ff4 <HAL_TIM_PWM_Start+0x178>
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	4a1d      	ldr	r2, [pc, #116]	@ (8009050 <HAL_TIM_PWM_Start+0x1d4>)
 8008fdc:	4293      	cmp	r3, r2
 8008fde:	d009      	beq.n	8008ff4 <HAL_TIM_PWM_Start+0x178>
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	4a1b      	ldr	r2, [pc, #108]	@ (8009054 <HAL_TIM_PWM_Start+0x1d8>)
 8008fe6:	4293      	cmp	r3, r2
 8008fe8:	d004      	beq.n	8008ff4 <HAL_TIM_PWM_Start+0x178>
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	4a15      	ldr	r2, [pc, #84]	@ (8009044 <HAL_TIM_PWM_Start+0x1c8>)
 8008ff0:	4293      	cmp	r3, r2
 8008ff2:	d116      	bne.n	8009022 <HAL_TIM_PWM_Start+0x1a6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	689b      	ldr	r3, [r3, #8]
 8008ffa:	4a17      	ldr	r2, [pc, #92]	@ (8009058 <HAL_TIM_PWM_Start+0x1dc>)
 8008ffc:	4013      	ands	r3, r2
 8008ffe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	2b06      	cmp	r3, #6
 8009004:	d016      	beq.n	8009034 <HAL_TIM_PWM_Start+0x1b8>
 8009006:	68fa      	ldr	r2, [r7, #12]
 8009008:	2380      	movs	r3, #128	@ 0x80
 800900a:	025b      	lsls	r3, r3, #9
 800900c:	429a      	cmp	r2, r3
 800900e:	d011      	beq.n	8009034 <HAL_TIM_PWM_Start+0x1b8>
    {
      __HAL_TIM_ENABLE(htim);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	681a      	ldr	r2, [r3, #0]
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	2101      	movs	r1, #1
 800901c:	430a      	orrs	r2, r1
 800901e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009020:	e008      	b.n	8009034 <HAL_TIM_PWM_Start+0x1b8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	681a      	ldr	r2, [r3, #0]
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	2101      	movs	r1, #1
 800902e:	430a      	orrs	r2, r1
 8009030:	601a      	str	r2, [r3, #0]
 8009032:	e000      	b.n	8009036 <HAL_TIM_PWM_Start+0x1ba>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009034:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8009036:	2300      	movs	r3, #0
}
 8009038:	0018      	movs	r0, r3
 800903a:	46bd      	mov	sp, r7
 800903c:	b004      	add	sp, #16
 800903e:	bd80      	pop	{r7, pc}
 8009040:	40012c00 	.word	0x40012c00
 8009044:	40014000 	.word	0x40014000
 8009048:	40014400 	.word	0x40014400
 800904c:	40014800 	.word	0x40014800
 8009050:	40000400 	.word	0x40000400
 8009054:	40000800 	.word	0x40000800
 8009058:	00010007 	.word	0x00010007

0800905c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b082      	sub	sp, #8
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
 8009064:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	6839      	ldr	r1, [r7, #0]
 800906c:	2200      	movs	r2, #0
 800906e:	0018      	movs	r0, r3
 8009070:	f000 fcdc 	bl	8009a2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	4a37      	ldr	r2, [pc, #220]	@ (8009158 <HAL_TIM_PWM_Stop+0xfc>)
 800907a:	4293      	cmp	r3, r2
 800907c:	d00e      	beq.n	800909c <HAL_TIM_PWM_Stop+0x40>
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	4a36      	ldr	r2, [pc, #216]	@ (800915c <HAL_TIM_PWM_Stop+0x100>)
 8009084:	4293      	cmp	r3, r2
 8009086:	d009      	beq.n	800909c <HAL_TIM_PWM_Stop+0x40>
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	4a34      	ldr	r2, [pc, #208]	@ (8009160 <HAL_TIM_PWM_Stop+0x104>)
 800908e:	4293      	cmp	r3, r2
 8009090:	d004      	beq.n	800909c <HAL_TIM_PWM_Stop+0x40>
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	4a33      	ldr	r2, [pc, #204]	@ (8009164 <HAL_TIM_PWM_Stop+0x108>)
 8009098:	4293      	cmp	r3, r2
 800909a:	d101      	bne.n	80090a0 <HAL_TIM_PWM_Stop+0x44>
 800909c:	2301      	movs	r3, #1
 800909e:	e000      	b.n	80090a2 <HAL_TIM_PWM_Stop+0x46>
 80090a0:	2300      	movs	r3, #0
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d013      	beq.n	80090ce <HAL_TIM_PWM_Stop+0x72>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	6a1b      	ldr	r3, [r3, #32]
 80090ac:	4a2e      	ldr	r2, [pc, #184]	@ (8009168 <HAL_TIM_PWM_Stop+0x10c>)
 80090ae:	4013      	ands	r3, r2
 80090b0:	d10d      	bne.n	80090ce <HAL_TIM_PWM_Stop+0x72>
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	6a1b      	ldr	r3, [r3, #32]
 80090b8:	4a2c      	ldr	r2, [pc, #176]	@ (800916c <HAL_TIM_PWM_Stop+0x110>)
 80090ba:	4013      	ands	r3, r2
 80090bc:	d107      	bne.n	80090ce <HAL_TIM_PWM_Stop+0x72>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	4929      	ldr	r1, [pc, #164]	@ (8009170 <HAL_TIM_PWM_Stop+0x114>)
 80090ca:	400a      	ands	r2, r1
 80090cc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	6a1b      	ldr	r3, [r3, #32]
 80090d4:	4a24      	ldr	r2, [pc, #144]	@ (8009168 <HAL_TIM_PWM_Stop+0x10c>)
 80090d6:	4013      	ands	r3, r2
 80090d8:	d10d      	bne.n	80090f6 <HAL_TIM_PWM_Stop+0x9a>
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	6a1b      	ldr	r3, [r3, #32]
 80090e0:	4a22      	ldr	r2, [pc, #136]	@ (800916c <HAL_TIM_PWM_Stop+0x110>)
 80090e2:	4013      	ands	r3, r2
 80090e4:	d107      	bne.n	80090f6 <HAL_TIM_PWM_Stop+0x9a>
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	681a      	ldr	r2, [r3, #0]
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	2101      	movs	r1, #1
 80090f2:	438a      	bics	r2, r1
 80090f4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d104      	bne.n	8009106 <HAL_TIM_PWM_Stop+0xaa>
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	223e      	movs	r2, #62	@ 0x3e
 8009100:	2101      	movs	r1, #1
 8009102:	5499      	strb	r1, [r3, r2]
 8009104:	e023      	b.n	800914e <HAL_TIM_PWM_Stop+0xf2>
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	2b04      	cmp	r3, #4
 800910a:	d104      	bne.n	8009116 <HAL_TIM_PWM_Stop+0xba>
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	223f      	movs	r2, #63	@ 0x3f
 8009110:	2101      	movs	r1, #1
 8009112:	5499      	strb	r1, [r3, r2]
 8009114:	e01b      	b.n	800914e <HAL_TIM_PWM_Stop+0xf2>
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	2b08      	cmp	r3, #8
 800911a:	d104      	bne.n	8009126 <HAL_TIM_PWM_Stop+0xca>
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2240      	movs	r2, #64	@ 0x40
 8009120:	2101      	movs	r1, #1
 8009122:	5499      	strb	r1, [r3, r2]
 8009124:	e013      	b.n	800914e <HAL_TIM_PWM_Stop+0xf2>
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	2b0c      	cmp	r3, #12
 800912a:	d104      	bne.n	8009136 <HAL_TIM_PWM_Stop+0xda>
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2241      	movs	r2, #65	@ 0x41
 8009130:	2101      	movs	r1, #1
 8009132:	5499      	strb	r1, [r3, r2]
 8009134:	e00b      	b.n	800914e <HAL_TIM_PWM_Stop+0xf2>
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	2b10      	cmp	r3, #16
 800913a:	d104      	bne.n	8009146 <HAL_TIM_PWM_Stop+0xea>
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2242      	movs	r2, #66	@ 0x42
 8009140:	2101      	movs	r1, #1
 8009142:	5499      	strb	r1, [r3, r2]
 8009144:	e003      	b.n	800914e <HAL_TIM_PWM_Stop+0xf2>
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2243      	movs	r2, #67	@ 0x43
 800914a:	2101      	movs	r1, #1
 800914c:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800914e:	2300      	movs	r3, #0
}
 8009150:	0018      	movs	r0, r3
 8009152:	46bd      	mov	sp, r7
 8009154:	b002      	add	sp, #8
 8009156:	bd80      	pop	{r7, pc}
 8009158:	40012c00 	.word	0x40012c00
 800915c:	40014000 	.word	0x40014000
 8009160:	40014400 	.word	0x40014400
 8009164:	40014800 	.word	0x40014800
 8009168:	00001111 	.word	0x00001111
 800916c:	00000444 	.word	0x00000444
 8009170:	ffff7fff 	.word	0xffff7fff

08009174 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b086      	sub	sp, #24
 8009178:	af00      	add	r7, sp, #0
 800917a:	60f8      	str	r0, [r7, #12]
 800917c:	60b9      	str	r1, [r7, #8]
 800917e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009180:	2317      	movs	r3, #23
 8009182:	18fb      	adds	r3, r7, r3
 8009184:	2200      	movs	r2, #0
 8009186:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	223c      	movs	r2, #60	@ 0x3c
 800918c:	5c9b      	ldrb	r3, [r3, r2]
 800918e:	2b01      	cmp	r3, #1
 8009190:	d101      	bne.n	8009196 <HAL_TIM_PWM_ConfigChannel+0x22>
 8009192:	2302      	movs	r3, #2
 8009194:	e0e5      	b.n	8009362 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	223c      	movs	r2, #60	@ 0x3c
 800919a:	2101      	movs	r1, #1
 800919c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2b14      	cmp	r3, #20
 80091a2:	d900      	bls.n	80091a6 <HAL_TIM_PWM_ConfigChannel+0x32>
 80091a4:	e0d1      	b.n	800934a <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	009a      	lsls	r2, r3, #2
 80091aa:	4b70      	ldr	r3, [pc, #448]	@ (800936c <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80091ac:	18d3      	adds	r3, r2, r3
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	68ba      	ldr	r2, [r7, #8]
 80091b8:	0011      	movs	r1, r2
 80091ba:	0018      	movs	r0, r3
 80091bc:	f000 f972 	bl	80094a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	699a      	ldr	r2, [r3, #24]
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	2108      	movs	r1, #8
 80091cc:	430a      	orrs	r2, r1
 80091ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	699a      	ldr	r2, [r3, #24]
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	2104      	movs	r1, #4
 80091dc:	438a      	bics	r2, r1
 80091de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	6999      	ldr	r1, [r3, #24]
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	691a      	ldr	r2, [r3, #16]
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	430a      	orrs	r2, r1
 80091f0:	619a      	str	r2, [r3, #24]
      break;
 80091f2:	e0af      	b.n	8009354 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	68ba      	ldr	r2, [r7, #8]
 80091fa:	0011      	movs	r1, r2
 80091fc:	0018      	movs	r0, r3
 80091fe:	f000 f9db 	bl	80095b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	699a      	ldr	r2, [r3, #24]
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	2180      	movs	r1, #128	@ 0x80
 800920e:	0109      	lsls	r1, r1, #4
 8009210:	430a      	orrs	r2, r1
 8009212:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	699a      	ldr	r2, [r3, #24]
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	4954      	ldr	r1, [pc, #336]	@ (8009370 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8009220:	400a      	ands	r2, r1
 8009222:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	6999      	ldr	r1, [r3, #24]
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	691b      	ldr	r3, [r3, #16]
 800922e:	021a      	lsls	r2, r3, #8
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	430a      	orrs	r2, r1
 8009236:	619a      	str	r2, [r3, #24]
      break;
 8009238:	e08c      	b.n	8009354 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	68ba      	ldr	r2, [r7, #8]
 8009240:	0011      	movs	r1, r2
 8009242:	0018      	movs	r0, r3
 8009244:	f000 fa3c 	bl	80096c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	69da      	ldr	r2, [r3, #28]
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	2108      	movs	r1, #8
 8009254:	430a      	orrs	r2, r1
 8009256:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	69da      	ldr	r2, [r3, #28]
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	2104      	movs	r1, #4
 8009264:	438a      	bics	r2, r1
 8009266:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	69d9      	ldr	r1, [r3, #28]
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	691a      	ldr	r2, [r3, #16]
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	430a      	orrs	r2, r1
 8009278:	61da      	str	r2, [r3, #28]
      break;
 800927a:	e06b      	b.n	8009354 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	68ba      	ldr	r2, [r7, #8]
 8009282:	0011      	movs	r1, r2
 8009284:	0018      	movs	r0, r3
 8009286:	f000 faa3 	bl	80097d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	69da      	ldr	r2, [r3, #28]
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	2180      	movs	r1, #128	@ 0x80
 8009296:	0109      	lsls	r1, r1, #4
 8009298:	430a      	orrs	r2, r1
 800929a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	69da      	ldr	r2, [r3, #28]
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	4932      	ldr	r1, [pc, #200]	@ (8009370 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80092a8:	400a      	ands	r2, r1
 80092aa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	69d9      	ldr	r1, [r3, #28]
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	691b      	ldr	r3, [r3, #16]
 80092b6:	021a      	lsls	r2, r3, #8
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	430a      	orrs	r2, r1
 80092be:	61da      	str	r2, [r3, #28]
      break;
 80092c0:	e048      	b.n	8009354 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	68ba      	ldr	r2, [r7, #8]
 80092c8:	0011      	movs	r1, r2
 80092ca:	0018      	movs	r0, r3
 80092cc:	f000 faea 	bl	80098a4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	2108      	movs	r1, #8
 80092dc:	430a      	orrs	r2, r1
 80092de:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	2104      	movs	r1, #4
 80092ec:	438a      	bics	r2, r1
 80092ee:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80092f6:	68bb      	ldr	r3, [r7, #8]
 80092f8:	691a      	ldr	r2, [r3, #16]
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	430a      	orrs	r2, r1
 8009300:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8009302:	e027      	b.n	8009354 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	68ba      	ldr	r2, [r7, #8]
 800930a:	0011      	movs	r1, r2
 800930c:	0018      	movs	r0, r3
 800930e:	f000 fb29 	bl	8009964 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	2180      	movs	r1, #128	@ 0x80
 800931e:	0109      	lsls	r1, r1, #4
 8009320:	430a      	orrs	r2, r1
 8009322:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	4910      	ldr	r1, [pc, #64]	@ (8009370 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8009330:	400a      	ands	r2, r1
 8009332:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800933a:	68bb      	ldr	r3, [r7, #8]
 800933c:	691b      	ldr	r3, [r3, #16]
 800933e:	021a      	lsls	r2, r3, #8
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	430a      	orrs	r2, r1
 8009346:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8009348:	e004      	b.n	8009354 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800934a:	2317      	movs	r3, #23
 800934c:	18fb      	adds	r3, r7, r3
 800934e:	2201      	movs	r2, #1
 8009350:	701a      	strb	r2, [r3, #0]
      break;
 8009352:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	223c      	movs	r2, #60	@ 0x3c
 8009358:	2100      	movs	r1, #0
 800935a:	5499      	strb	r1, [r3, r2]

  return status;
 800935c:	2317      	movs	r3, #23
 800935e:	18fb      	adds	r3, r7, r3
 8009360:	781b      	ldrb	r3, [r3, #0]
}
 8009362:	0018      	movs	r0, r3
 8009364:	46bd      	mov	sp, r7
 8009366:	b006      	add	sp, #24
 8009368:	bd80      	pop	{r7, pc}
 800936a:	46c0      	nop			@ (mov r8, r8)
 800936c:	0800c148 	.word	0x0800c148
 8009370:	fffffbff 	.word	0xfffffbff

08009374 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b084      	sub	sp, #16
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
 800937c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	4a3f      	ldr	r2, [pc, #252]	@ (8009484 <TIM_Base_SetConfig+0x110>)
 8009388:	4293      	cmp	r3, r2
 800938a:	d00c      	beq.n	80093a6 <TIM_Base_SetConfig+0x32>
 800938c:	687a      	ldr	r2, [r7, #4]
 800938e:	2380      	movs	r3, #128	@ 0x80
 8009390:	05db      	lsls	r3, r3, #23
 8009392:	429a      	cmp	r2, r3
 8009394:	d007      	beq.n	80093a6 <TIM_Base_SetConfig+0x32>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	4a3b      	ldr	r2, [pc, #236]	@ (8009488 <TIM_Base_SetConfig+0x114>)
 800939a:	4293      	cmp	r3, r2
 800939c:	d003      	beq.n	80093a6 <TIM_Base_SetConfig+0x32>
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	4a3a      	ldr	r2, [pc, #232]	@ (800948c <TIM_Base_SetConfig+0x118>)
 80093a2:	4293      	cmp	r3, r2
 80093a4:	d108      	bne.n	80093b8 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	2270      	movs	r2, #112	@ 0x70
 80093aa:	4393      	bics	r3, r2
 80093ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	685b      	ldr	r3, [r3, #4]
 80093b2:	68fa      	ldr	r2, [r7, #12]
 80093b4:	4313      	orrs	r3, r2
 80093b6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	4a32      	ldr	r2, [pc, #200]	@ (8009484 <TIM_Base_SetConfig+0x110>)
 80093bc:	4293      	cmp	r3, r2
 80093be:	d01c      	beq.n	80093fa <TIM_Base_SetConfig+0x86>
 80093c0:	687a      	ldr	r2, [r7, #4]
 80093c2:	2380      	movs	r3, #128	@ 0x80
 80093c4:	05db      	lsls	r3, r3, #23
 80093c6:	429a      	cmp	r2, r3
 80093c8:	d017      	beq.n	80093fa <TIM_Base_SetConfig+0x86>
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	4a2e      	ldr	r2, [pc, #184]	@ (8009488 <TIM_Base_SetConfig+0x114>)
 80093ce:	4293      	cmp	r3, r2
 80093d0:	d013      	beq.n	80093fa <TIM_Base_SetConfig+0x86>
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	4a2d      	ldr	r2, [pc, #180]	@ (800948c <TIM_Base_SetConfig+0x118>)
 80093d6:	4293      	cmp	r3, r2
 80093d8:	d00f      	beq.n	80093fa <TIM_Base_SetConfig+0x86>
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	4a2c      	ldr	r2, [pc, #176]	@ (8009490 <TIM_Base_SetConfig+0x11c>)
 80093de:	4293      	cmp	r3, r2
 80093e0:	d00b      	beq.n	80093fa <TIM_Base_SetConfig+0x86>
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	4a2b      	ldr	r2, [pc, #172]	@ (8009494 <TIM_Base_SetConfig+0x120>)
 80093e6:	4293      	cmp	r3, r2
 80093e8:	d007      	beq.n	80093fa <TIM_Base_SetConfig+0x86>
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	4a2a      	ldr	r2, [pc, #168]	@ (8009498 <TIM_Base_SetConfig+0x124>)
 80093ee:	4293      	cmp	r3, r2
 80093f0:	d003      	beq.n	80093fa <TIM_Base_SetConfig+0x86>
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	4a29      	ldr	r2, [pc, #164]	@ (800949c <TIM_Base_SetConfig+0x128>)
 80093f6:	4293      	cmp	r3, r2
 80093f8:	d108      	bne.n	800940c <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	4a28      	ldr	r2, [pc, #160]	@ (80094a0 <TIM_Base_SetConfig+0x12c>)
 80093fe:	4013      	ands	r3, r2
 8009400:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	68db      	ldr	r3, [r3, #12]
 8009406:	68fa      	ldr	r2, [r7, #12]
 8009408:	4313      	orrs	r3, r2
 800940a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	2280      	movs	r2, #128	@ 0x80
 8009410:	4393      	bics	r3, r2
 8009412:	001a      	movs	r2, r3
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	695b      	ldr	r3, [r3, #20]
 8009418:	4313      	orrs	r3, r2
 800941a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	68fa      	ldr	r2, [r7, #12]
 8009420:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	689a      	ldr	r2, [r3, #8]
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	681a      	ldr	r2, [r3, #0]
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	4a13      	ldr	r2, [pc, #76]	@ (8009484 <TIM_Base_SetConfig+0x110>)
 8009436:	4293      	cmp	r3, r2
 8009438:	d00b      	beq.n	8009452 <TIM_Base_SetConfig+0xde>
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	4a15      	ldr	r2, [pc, #84]	@ (8009494 <TIM_Base_SetConfig+0x120>)
 800943e:	4293      	cmp	r3, r2
 8009440:	d007      	beq.n	8009452 <TIM_Base_SetConfig+0xde>
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	4a14      	ldr	r2, [pc, #80]	@ (8009498 <TIM_Base_SetConfig+0x124>)
 8009446:	4293      	cmp	r3, r2
 8009448:	d003      	beq.n	8009452 <TIM_Base_SetConfig+0xde>
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	4a13      	ldr	r2, [pc, #76]	@ (800949c <TIM_Base_SetConfig+0x128>)
 800944e:	4293      	cmp	r3, r2
 8009450:	d103      	bne.n	800945a <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	691a      	ldr	r2, [r3, #16]
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2201      	movs	r2, #1
 800945e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	691b      	ldr	r3, [r3, #16]
 8009464:	2201      	movs	r2, #1
 8009466:	4013      	ands	r3, r2
 8009468:	2b01      	cmp	r3, #1
 800946a:	d106      	bne.n	800947a <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	691b      	ldr	r3, [r3, #16]
 8009470:	2201      	movs	r2, #1
 8009472:	4393      	bics	r3, r2
 8009474:	001a      	movs	r2, r3
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	611a      	str	r2, [r3, #16]
  }
}
 800947a:	46c0      	nop			@ (mov r8, r8)
 800947c:	46bd      	mov	sp, r7
 800947e:	b004      	add	sp, #16
 8009480:	bd80      	pop	{r7, pc}
 8009482:	46c0      	nop			@ (mov r8, r8)
 8009484:	40012c00 	.word	0x40012c00
 8009488:	40000400 	.word	0x40000400
 800948c:	40000800 	.word	0x40000800
 8009490:	40002000 	.word	0x40002000
 8009494:	40014000 	.word	0x40014000
 8009498:	40014400 	.word	0x40014400
 800949c:	40014800 	.word	0x40014800
 80094a0:	fffffcff 	.word	0xfffffcff

080094a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b086      	sub	sp, #24
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
 80094ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	6a1b      	ldr	r3, [r3, #32]
 80094b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	6a1b      	ldr	r3, [r3, #32]
 80094b8:	2201      	movs	r2, #1
 80094ba:	4393      	bics	r3, r2
 80094bc:	001a      	movs	r2, r3
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	685b      	ldr	r3, [r3, #4]
 80094c6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	699b      	ldr	r3, [r3, #24]
 80094cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	4a32      	ldr	r2, [pc, #200]	@ (800959c <TIM_OC1_SetConfig+0xf8>)
 80094d2:	4013      	ands	r3, r2
 80094d4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	2203      	movs	r2, #3
 80094da:	4393      	bics	r3, r2
 80094dc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	68fa      	ldr	r2, [r7, #12]
 80094e4:	4313      	orrs	r3, r2
 80094e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80094e8:	697b      	ldr	r3, [r7, #20]
 80094ea:	2202      	movs	r2, #2
 80094ec:	4393      	bics	r3, r2
 80094ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	689b      	ldr	r3, [r3, #8]
 80094f4:	697a      	ldr	r2, [r7, #20]
 80094f6:	4313      	orrs	r3, r2
 80094f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	4a28      	ldr	r2, [pc, #160]	@ (80095a0 <TIM_OC1_SetConfig+0xfc>)
 80094fe:	4293      	cmp	r3, r2
 8009500:	d00b      	beq.n	800951a <TIM_OC1_SetConfig+0x76>
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	4a27      	ldr	r2, [pc, #156]	@ (80095a4 <TIM_OC1_SetConfig+0x100>)
 8009506:	4293      	cmp	r3, r2
 8009508:	d007      	beq.n	800951a <TIM_OC1_SetConfig+0x76>
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	4a26      	ldr	r2, [pc, #152]	@ (80095a8 <TIM_OC1_SetConfig+0x104>)
 800950e:	4293      	cmp	r3, r2
 8009510:	d003      	beq.n	800951a <TIM_OC1_SetConfig+0x76>
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	4a25      	ldr	r2, [pc, #148]	@ (80095ac <TIM_OC1_SetConfig+0x108>)
 8009516:	4293      	cmp	r3, r2
 8009518:	d10c      	bne.n	8009534 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800951a:	697b      	ldr	r3, [r7, #20]
 800951c:	2208      	movs	r2, #8
 800951e:	4393      	bics	r3, r2
 8009520:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	68db      	ldr	r3, [r3, #12]
 8009526:	697a      	ldr	r2, [r7, #20]
 8009528:	4313      	orrs	r3, r2
 800952a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800952c:	697b      	ldr	r3, [r7, #20]
 800952e:	2204      	movs	r2, #4
 8009530:	4393      	bics	r3, r2
 8009532:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	4a1a      	ldr	r2, [pc, #104]	@ (80095a0 <TIM_OC1_SetConfig+0xfc>)
 8009538:	4293      	cmp	r3, r2
 800953a:	d00b      	beq.n	8009554 <TIM_OC1_SetConfig+0xb0>
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	4a19      	ldr	r2, [pc, #100]	@ (80095a4 <TIM_OC1_SetConfig+0x100>)
 8009540:	4293      	cmp	r3, r2
 8009542:	d007      	beq.n	8009554 <TIM_OC1_SetConfig+0xb0>
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	4a18      	ldr	r2, [pc, #96]	@ (80095a8 <TIM_OC1_SetConfig+0x104>)
 8009548:	4293      	cmp	r3, r2
 800954a:	d003      	beq.n	8009554 <TIM_OC1_SetConfig+0xb0>
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	4a17      	ldr	r2, [pc, #92]	@ (80095ac <TIM_OC1_SetConfig+0x108>)
 8009550:	4293      	cmp	r3, r2
 8009552:	d111      	bne.n	8009578 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009554:	693b      	ldr	r3, [r7, #16]
 8009556:	4a16      	ldr	r2, [pc, #88]	@ (80095b0 <TIM_OC1_SetConfig+0x10c>)
 8009558:	4013      	ands	r3, r2
 800955a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800955c:	693b      	ldr	r3, [r7, #16]
 800955e:	4a15      	ldr	r2, [pc, #84]	@ (80095b4 <TIM_OC1_SetConfig+0x110>)
 8009560:	4013      	ands	r3, r2
 8009562:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	695b      	ldr	r3, [r3, #20]
 8009568:	693a      	ldr	r2, [r7, #16]
 800956a:	4313      	orrs	r3, r2
 800956c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	699b      	ldr	r3, [r3, #24]
 8009572:	693a      	ldr	r2, [r7, #16]
 8009574:	4313      	orrs	r3, r2
 8009576:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	693a      	ldr	r2, [r7, #16]
 800957c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	68fa      	ldr	r2, [r7, #12]
 8009582:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	685a      	ldr	r2, [r3, #4]
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	697a      	ldr	r2, [r7, #20]
 8009590:	621a      	str	r2, [r3, #32]
}
 8009592:	46c0      	nop			@ (mov r8, r8)
 8009594:	46bd      	mov	sp, r7
 8009596:	b006      	add	sp, #24
 8009598:	bd80      	pop	{r7, pc}
 800959a:	46c0      	nop			@ (mov r8, r8)
 800959c:	fffeff8f 	.word	0xfffeff8f
 80095a0:	40012c00 	.word	0x40012c00
 80095a4:	40014000 	.word	0x40014000
 80095a8:	40014400 	.word	0x40014400
 80095ac:	40014800 	.word	0x40014800
 80095b0:	fffffeff 	.word	0xfffffeff
 80095b4:	fffffdff 	.word	0xfffffdff

080095b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b086      	sub	sp, #24
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
 80095c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6a1b      	ldr	r3, [r3, #32]
 80095c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	6a1b      	ldr	r3, [r3, #32]
 80095cc:	2210      	movs	r2, #16
 80095ce:	4393      	bics	r3, r2
 80095d0:	001a      	movs	r2, r3
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	685b      	ldr	r3, [r3, #4]
 80095da:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	699b      	ldr	r3, [r3, #24]
 80095e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	4a2e      	ldr	r2, [pc, #184]	@ (80096a0 <TIM_OC2_SetConfig+0xe8>)
 80095e6:	4013      	ands	r3, r2
 80095e8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	4a2d      	ldr	r2, [pc, #180]	@ (80096a4 <TIM_OC2_SetConfig+0xec>)
 80095ee:	4013      	ands	r3, r2
 80095f0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	021b      	lsls	r3, r3, #8
 80095f8:	68fa      	ldr	r2, [r7, #12]
 80095fa:	4313      	orrs	r3, r2
 80095fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80095fe:	697b      	ldr	r3, [r7, #20]
 8009600:	2220      	movs	r2, #32
 8009602:	4393      	bics	r3, r2
 8009604:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	689b      	ldr	r3, [r3, #8]
 800960a:	011b      	lsls	r3, r3, #4
 800960c:	697a      	ldr	r2, [r7, #20]
 800960e:	4313      	orrs	r3, r2
 8009610:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	4a24      	ldr	r2, [pc, #144]	@ (80096a8 <TIM_OC2_SetConfig+0xf0>)
 8009616:	4293      	cmp	r3, r2
 8009618:	d10d      	bne.n	8009636 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800961a:	697b      	ldr	r3, [r7, #20]
 800961c:	2280      	movs	r2, #128	@ 0x80
 800961e:	4393      	bics	r3, r2
 8009620:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	68db      	ldr	r3, [r3, #12]
 8009626:	011b      	lsls	r3, r3, #4
 8009628:	697a      	ldr	r2, [r7, #20]
 800962a:	4313      	orrs	r3, r2
 800962c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800962e:	697b      	ldr	r3, [r7, #20]
 8009630:	2240      	movs	r2, #64	@ 0x40
 8009632:	4393      	bics	r3, r2
 8009634:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	4a1b      	ldr	r2, [pc, #108]	@ (80096a8 <TIM_OC2_SetConfig+0xf0>)
 800963a:	4293      	cmp	r3, r2
 800963c:	d00b      	beq.n	8009656 <TIM_OC2_SetConfig+0x9e>
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	4a1a      	ldr	r2, [pc, #104]	@ (80096ac <TIM_OC2_SetConfig+0xf4>)
 8009642:	4293      	cmp	r3, r2
 8009644:	d007      	beq.n	8009656 <TIM_OC2_SetConfig+0x9e>
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	4a19      	ldr	r2, [pc, #100]	@ (80096b0 <TIM_OC2_SetConfig+0xf8>)
 800964a:	4293      	cmp	r3, r2
 800964c:	d003      	beq.n	8009656 <TIM_OC2_SetConfig+0x9e>
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	4a18      	ldr	r2, [pc, #96]	@ (80096b4 <TIM_OC2_SetConfig+0xfc>)
 8009652:	4293      	cmp	r3, r2
 8009654:	d113      	bne.n	800967e <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009656:	693b      	ldr	r3, [r7, #16]
 8009658:	4a17      	ldr	r2, [pc, #92]	@ (80096b8 <TIM_OC2_SetConfig+0x100>)
 800965a:	4013      	ands	r3, r2
 800965c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800965e:	693b      	ldr	r3, [r7, #16]
 8009660:	4a16      	ldr	r2, [pc, #88]	@ (80096bc <TIM_OC2_SetConfig+0x104>)
 8009662:	4013      	ands	r3, r2
 8009664:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	695b      	ldr	r3, [r3, #20]
 800966a:	009b      	lsls	r3, r3, #2
 800966c:	693a      	ldr	r2, [r7, #16]
 800966e:	4313      	orrs	r3, r2
 8009670:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	699b      	ldr	r3, [r3, #24]
 8009676:	009b      	lsls	r3, r3, #2
 8009678:	693a      	ldr	r2, [r7, #16]
 800967a:	4313      	orrs	r3, r2
 800967c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	693a      	ldr	r2, [r7, #16]
 8009682:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	68fa      	ldr	r2, [r7, #12]
 8009688:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	685a      	ldr	r2, [r3, #4]
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	697a      	ldr	r2, [r7, #20]
 8009696:	621a      	str	r2, [r3, #32]
}
 8009698:	46c0      	nop			@ (mov r8, r8)
 800969a:	46bd      	mov	sp, r7
 800969c:	b006      	add	sp, #24
 800969e:	bd80      	pop	{r7, pc}
 80096a0:	feff8fff 	.word	0xfeff8fff
 80096a4:	fffffcff 	.word	0xfffffcff
 80096a8:	40012c00 	.word	0x40012c00
 80096ac:	40014000 	.word	0x40014000
 80096b0:	40014400 	.word	0x40014400
 80096b4:	40014800 	.word	0x40014800
 80096b8:	fffffbff 	.word	0xfffffbff
 80096bc:	fffff7ff 	.word	0xfffff7ff

080096c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b086      	sub	sp, #24
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
 80096c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6a1b      	ldr	r3, [r3, #32]
 80096ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	6a1b      	ldr	r3, [r3, #32]
 80096d4:	4a33      	ldr	r2, [pc, #204]	@ (80097a4 <TIM_OC3_SetConfig+0xe4>)
 80096d6:	401a      	ands	r2, r3
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	685b      	ldr	r3, [r3, #4]
 80096e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	69db      	ldr	r3, [r3, #28]
 80096e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	4a2f      	ldr	r2, [pc, #188]	@ (80097a8 <TIM_OC3_SetConfig+0xe8>)
 80096ec:	4013      	ands	r3, r2
 80096ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	2203      	movs	r2, #3
 80096f4:	4393      	bics	r3, r2
 80096f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	68fa      	ldr	r2, [r7, #12]
 80096fe:	4313      	orrs	r3, r2
 8009700:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009702:	697b      	ldr	r3, [r7, #20]
 8009704:	4a29      	ldr	r2, [pc, #164]	@ (80097ac <TIM_OC3_SetConfig+0xec>)
 8009706:	4013      	ands	r3, r2
 8009708:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	689b      	ldr	r3, [r3, #8]
 800970e:	021b      	lsls	r3, r3, #8
 8009710:	697a      	ldr	r2, [r7, #20]
 8009712:	4313      	orrs	r3, r2
 8009714:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	4a25      	ldr	r2, [pc, #148]	@ (80097b0 <TIM_OC3_SetConfig+0xf0>)
 800971a:	4293      	cmp	r3, r2
 800971c:	d10d      	bne.n	800973a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800971e:	697b      	ldr	r3, [r7, #20]
 8009720:	4a24      	ldr	r2, [pc, #144]	@ (80097b4 <TIM_OC3_SetConfig+0xf4>)
 8009722:	4013      	ands	r3, r2
 8009724:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	68db      	ldr	r3, [r3, #12]
 800972a:	021b      	lsls	r3, r3, #8
 800972c:	697a      	ldr	r2, [r7, #20]
 800972e:	4313      	orrs	r3, r2
 8009730:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009732:	697b      	ldr	r3, [r7, #20]
 8009734:	4a20      	ldr	r2, [pc, #128]	@ (80097b8 <TIM_OC3_SetConfig+0xf8>)
 8009736:	4013      	ands	r3, r2
 8009738:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	4a1c      	ldr	r2, [pc, #112]	@ (80097b0 <TIM_OC3_SetConfig+0xf0>)
 800973e:	4293      	cmp	r3, r2
 8009740:	d00b      	beq.n	800975a <TIM_OC3_SetConfig+0x9a>
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	4a1d      	ldr	r2, [pc, #116]	@ (80097bc <TIM_OC3_SetConfig+0xfc>)
 8009746:	4293      	cmp	r3, r2
 8009748:	d007      	beq.n	800975a <TIM_OC3_SetConfig+0x9a>
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	4a1c      	ldr	r2, [pc, #112]	@ (80097c0 <TIM_OC3_SetConfig+0x100>)
 800974e:	4293      	cmp	r3, r2
 8009750:	d003      	beq.n	800975a <TIM_OC3_SetConfig+0x9a>
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	4a1b      	ldr	r2, [pc, #108]	@ (80097c4 <TIM_OC3_SetConfig+0x104>)
 8009756:	4293      	cmp	r3, r2
 8009758:	d113      	bne.n	8009782 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800975a:	693b      	ldr	r3, [r7, #16]
 800975c:	4a1a      	ldr	r2, [pc, #104]	@ (80097c8 <TIM_OC3_SetConfig+0x108>)
 800975e:	4013      	ands	r3, r2
 8009760:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009762:	693b      	ldr	r3, [r7, #16]
 8009764:	4a19      	ldr	r2, [pc, #100]	@ (80097cc <TIM_OC3_SetConfig+0x10c>)
 8009766:	4013      	ands	r3, r2
 8009768:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	695b      	ldr	r3, [r3, #20]
 800976e:	011b      	lsls	r3, r3, #4
 8009770:	693a      	ldr	r2, [r7, #16]
 8009772:	4313      	orrs	r3, r2
 8009774:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	699b      	ldr	r3, [r3, #24]
 800977a:	011b      	lsls	r3, r3, #4
 800977c:	693a      	ldr	r2, [r7, #16]
 800977e:	4313      	orrs	r3, r2
 8009780:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	693a      	ldr	r2, [r7, #16]
 8009786:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	68fa      	ldr	r2, [r7, #12]
 800978c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	685a      	ldr	r2, [r3, #4]
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	697a      	ldr	r2, [r7, #20]
 800979a:	621a      	str	r2, [r3, #32]
}
 800979c:	46c0      	nop			@ (mov r8, r8)
 800979e:	46bd      	mov	sp, r7
 80097a0:	b006      	add	sp, #24
 80097a2:	bd80      	pop	{r7, pc}
 80097a4:	fffffeff 	.word	0xfffffeff
 80097a8:	fffeff8f 	.word	0xfffeff8f
 80097ac:	fffffdff 	.word	0xfffffdff
 80097b0:	40012c00 	.word	0x40012c00
 80097b4:	fffff7ff 	.word	0xfffff7ff
 80097b8:	fffffbff 	.word	0xfffffbff
 80097bc:	40014000 	.word	0x40014000
 80097c0:	40014400 	.word	0x40014400
 80097c4:	40014800 	.word	0x40014800
 80097c8:	ffffefff 	.word	0xffffefff
 80097cc:	ffffdfff 	.word	0xffffdfff

080097d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b086      	sub	sp, #24
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
 80097d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	6a1b      	ldr	r3, [r3, #32]
 80097de:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	6a1b      	ldr	r3, [r3, #32]
 80097e4:	4a26      	ldr	r2, [pc, #152]	@ (8009880 <TIM_OC4_SetConfig+0xb0>)
 80097e6:	401a      	ands	r2, r3
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	685b      	ldr	r3, [r3, #4]
 80097f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	69db      	ldr	r3, [r3, #28]
 80097f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	4a22      	ldr	r2, [pc, #136]	@ (8009884 <TIM_OC4_SetConfig+0xb4>)
 80097fc:	4013      	ands	r3, r2
 80097fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	4a21      	ldr	r2, [pc, #132]	@ (8009888 <TIM_OC4_SetConfig+0xb8>)
 8009804:	4013      	ands	r3, r2
 8009806:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	021b      	lsls	r3, r3, #8
 800980e:	68fa      	ldr	r2, [r7, #12]
 8009810:	4313      	orrs	r3, r2
 8009812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009814:	693b      	ldr	r3, [r7, #16]
 8009816:	4a1d      	ldr	r2, [pc, #116]	@ (800988c <TIM_OC4_SetConfig+0xbc>)
 8009818:	4013      	ands	r3, r2
 800981a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	689b      	ldr	r3, [r3, #8]
 8009820:	031b      	lsls	r3, r3, #12
 8009822:	693a      	ldr	r2, [r7, #16]
 8009824:	4313      	orrs	r3, r2
 8009826:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	4a19      	ldr	r2, [pc, #100]	@ (8009890 <TIM_OC4_SetConfig+0xc0>)
 800982c:	4293      	cmp	r3, r2
 800982e:	d00b      	beq.n	8009848 <TIM_OC4_SetConfig+0x78>
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	4a18      	ldr	r2, [pc, #96]	@ (8009894 <TIM_OC4_SetConfig+0xc4>)
 8009834:	4293      	cmp	r3, r2
 8009836:	d007      	beq.n	8009848 <TIM_OC4_SetConfig+0x78>
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	4a17      	ldr	r2, [pc, #92]	@ (8009898 <TIM_OC4_SetConfig+0xc8>)
 800983c:	4293      	cmp	r3, r2
 800983e:	d003      	beq.n	8009848 <TIM_OC4_SetConfig+0x78>
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	4a16      	ldr	r2, [pc, #88]	@ (800989c <TIM_OC4_SetConfig+0xcc>)
 8009844:	4293      	cmp	r3, r2
 8009846:	d109      	bne.n	800985c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009848:	697b      	ldr	r3, [r7, #20]
 800984a:	4a15      	ldr	r2, [pc, #84]	@ (80098a0 <TIM_OC4_SetConfig+0xd0>)
 800984c:	4013      	ands	r3, r2
 800984e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	695b      	ldr	r3, [r3, #20]
 8009854:	019b      	lsls	r3, r3, #6
 8009856:	697a      	ldr	r2, [r7, #20]
 8009858:	4313      	orrs	r3, r2
 800985a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	697a      	ldr	r2, [r7, #20]
 8009860:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	68fa      	ldr	r2, [r7, #12]
 8009866:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	685a      	ldr	r2, [r3, #4]
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	693a      	ldr	r2, [r7, #16]
 8009874:	621a      	str	r2, [r3, #32]
}
 8009876:	46c0      	nop			@ (mov r8, r8)
 8009878:	46bd      	mov	sp, r7
 800987a:	b006      	add	sp, #24
 800987c:	bd80      	pop	{r7, pc}
 800987e:	46c0      	nop			@ (mov r8, r8)
 8009880:	ffffefff 	.word	0xffffefff
 8009884:	feff8fff 	.word	0xfeff8fff
 8009888:	fffffcff 	.word	0xfffffcff
 800988c:	ffffdfff 	.word	0xffffdfff
 8009890:	40012c00 	.word	0x40012c00
 8009894:	40014000 	.word	0x40014000
 8009898:	40014400 	.word	0x40014400
 800989c:	40014800 	.word	0x40014800
 80098a0:	ffffbfff 	.word	0xffffbfff

080098a4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b086      	sub	sp, #24
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
 80098ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6a1b      	ldr	r3, [r3, #32]
 80098b2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	6a1b      	ldr	r3, [r3, #32]
 80098b8:	4a23      	ldr	r2, [pc, #140]	@ (8009948 <TIM_OC5_SetConfig+0xa4>)
 80098ba:	401a      	ands	r2, r3
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	685b      	ldr	r3, [r3, #4]
 80098c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	4a1f      	ldr	r2, [pc, #124]	@ (800994c <TIM_OC5_SetConfig+0xa8>)
 80098d0:	4013      	ands	r3, r2
 80098d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	68fa      	ldr	r2, [r7, #12]
 80098da:	4313      	orrs	r3, r2
 80098dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80098de:	693b      	ldr	r3, [r7, #16]
 80098e0:	4a1b      	ldr	r2, [pc, #108]	@ (8009950 <TIM_OC5_SetConfig+0xac>)
 80098e2:	4013      	ands	r3, r2
 80098e4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	689b      	ldr	r3, [r3, #8]
 80098ea:	041b      	lsls	r3, r3, #16
 80098ec:	693a      	ldr	r2, [r7, #16]
 80098ee:	4313      	orrs	r3, r2
 80098f0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	4a17      	ldr	r2, [pc, #92]	@ (8009954 <TIM_OC5_SetConfig+0xb0>)
 80098f6:	4293      	cmp	r3, r2
 80098f8:	d00b      	beq.n	8009912 <TIM_OC5_SetConfig+0x6e>
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	4a16      	ldr	r2, [pc, #88]	@ (8009958 <TIM_OC5_SetConfig+0xb4>)
 80098fe:	4293      	cmp	r3, r2
 8009900:	d007      	beq.n	8009912 <TIM_OC5_SetConfig+0x6e>
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	4a15      	ldr	r2, [pc, #84]	@ (800995c <TIM_OC5_SetConfig+0xb8>)
 8009906:	4293      	cmp	r3, r2
 8009908:	d003      	beq.n	8009912 <TIM_OC5_SetConfig+0x6e>
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	4a14      	ldr	r2, [pc, #80]	@ (8009960 <TIM_OC5_SetConfig+0xbc>)
 800990e:	4293      	cmp	r3, r2
 8009910:	d109      	bne.n	8009926 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009912:	697b      	ldr	r3, [r7, #20]
 8009914:	4a0c      	ldr	r2, [pc, #48]	@ (8009948 <TIM_OC5_SetConfig+0xa4>)
 8009916:	4013      	ands	r3, r2
 8009918:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	695b      	ldr	r3, [r3, #20]
 800991e:	021b      	lsls	r3, r3, #8
 8009920:	697a      	ldr	r2, [r7, #20]
 8009922:	4313      	orrs	r3, r2
 8009924:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	697a      	ldr	r2, [r7, #20]
 800992a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	68fa      	ldr	r2, [r7, #12]
 8009930:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	685a      	ldr	r2, [r3, #4]
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	693a      	ldr	r2, [r7, #16]
 800993e:	621a      	str	r2, [r3, #32]
}
 8009940:	46c0      	nop			@ (mov r8, r8)
 8009942:	46bd      	mov	sp, r7
 8009944:	b006      	add	sp, #24
 8009946:	bd80      	pop	{r7, pc}
 8009948:	fffeffff 	.word	0xfffeffff
 800994c:	fffeff8f 	.word	0xfffeff8f
 8009950:	fffdffff 	.word	0xfffdffff
 8009954:	40012c00 	.word	0x40012c00
 8009958:	40014000 	.word	0x40014000
 800995c:	40014400 	.word	0x40014400
 8009960:	40014800 	.word	0x40014800

08009964 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b086      	sub	sp, #24
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
 800996c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	6a1b      	ldr	r3, [r3, #32]
 8009972:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	6a1b      	ldr	r3, [r3, #32]
 8009978:	4a24      	ldr	r2, [pc, #144]	@ (8009a0c <TIM_OC6_SetConfig+0xa8>)
 800997a:	401a      	ands	r2, r3
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	685b      	ldr	r3, [r3, #4]
 8009984:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800998a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	4a20      	ldr	r2, [pc, #128]	@ (8009a10 <TIM_OC6_SetConfig+0xac>)
 8009990:	4013      	ands	r3, r2
 8009992:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	021b      	lsls	r3, r3, #8
 800999a:	68fa      	ldr	r2, [r7, #12]
 800999c:	4313      	orrs	r3, r2
 800999e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80099a0:	693b      	ldr	r3, [r7, #16]
 80099a2:	4a1c      	ldr	r2, [pc, #112]	@ (8009a14 <TIM_OC6_SetConfig+0xb0>)
 80099a4:	4013      	ands	r3, r2
 80099a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	689b      	ldr	r3, [r3, #8]
 80099ac:	051b      	lsls	r3, r3, #20
 80099ae:	693a      	ldr	r2, [r7, #16]
 80099b0:	4313      	orrs	r3, r2
 80099b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	4a18      	ldr	r2, [pc, #96]	@ (8009a18 <TIM_OC6_SetConfig+0xb4>)
 80099b8:	4293      	cmp	r3, r2
 80099ba:	d00b      	beq.n	80099d4 <TIM_OC6_SetConfig+0x70>
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	4a17      	ldr	r2, [pc, #92]	@ (8009a1c <TIM_OC6_SetConfig+0xb8>)
 80099c0:	4293      	cmp	r3, r2
 80099c2:	d007      	beq.n	80099d4 <TIM_OC6_SetConfig+0x70>
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	4a16      	ldr	r2, [pc, #88]	@ (8009a20 <TIM_OC6_SetConfig+0xbc>)
 80099c8:	4293      	cmp	r3, r2
 80099ca:	d003      	beq.n	80099d4 <TIM_OC6_SetConfig+0x70>
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	4a15      	ldr	r2, [pc, #84]	@ (8009a24 <TIM_OC6_SetConfig+0xc0>)
 80099d0:	4293      	cmp	r3, r2
 80099d2:	d109      	bne.n	80099e8 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80099d4:	697b      	ldr	r3, [r7, #20]
 80099d6:	4a14      	ldr	r2, [pc, #80]	@ (8009a28 <TIM_OC6_SetConfig+0xc4>)
 80099d8:	4013      	ands	r3, r2
 80099da:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	695b      	ldr	r3, [r3, #20]
 80099e0:	029b      	lsls	r3, r3, #10
 80099e2:	697a      	ldr	r2, [r7, #20]
 80099e4:	4313      	orrs	r3, r2
 80099e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	697a      	ldr	r2, [r7, #20]
 80099ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	68fa      	ldr	r2, [r7, #12]
 80099f2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	685a      	ldr	r2, [r3, #4]
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	693a      	ldr	r2, [r7, #16]
 8009a00:	621a      	str	r2, [r3, #32]
}
 8009a02:	46c0      	nop			@ (mov r8, r8)
 8009a04:	46bd      	mov	sp, r7
 8009a06:	b006      	add	sp, #24
 8009a08:	bd80      	pop	{r7, pc}
 8009a0a:	46c0      	nop			@ (mov r8, r8)
 8009a0c:	ffefffff 	.word	0xffefffff
 8009a10:	feff8fff 	.word	0xfeff8fff
 8009a14:	ffdfffff 	.word	0xffdfffff
 8009a18:	40012c00 	.word	0x40012c00
 8009a1c:	40014000 	.word	0x40014000
 8009a20:	40014400 	.word	0x40014400
 8009a24:	40014800 	.word	0x40014800
 8009a28:	fffbffff 	.word	0xfffbffff

08009a2c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b086      	sub	sp, #24
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	60f8      	str	r0, [r7, #12]
 8009a34:	60b9      	str	r1, [r7, #8]
 8009a36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009a38:	68bb      	ldr	r3, [r7, #8]
 8009a3a:	221f      	movs	r2, #31
 8009a3c:	4013      	ands	r3, r2
 8009a3e:	2201      	movs	r2, #1
 8009a40:	409a      	lsls	r2, r3
 8009a42:	0013      	movs	r3, r2
 8009a44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	6a1b      	ldr	r3, [r3, #32]
 8009a4a:	697a      	ldr	r2, [r7, #20]
 8009a4c:	43d2      	mvns	r2, r2
 8009a4e:	401a      	ands	r2, r3
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	6a1a      	ldr	r2, [r3, #32]
 8009a58:	68bb      	ldr	r3, [r7, #8]
 8009a5a:	211f      	movs	r1, #31
 8009a5c:	400b      	ands	r3, r1
 8009a5e:	6879      	ldr	r1, [r7, #4]
 8009a60:	4099      	lsls	r1, r3
 8009a62:	000b      	movs	r3, r1
 8009a64:	431a      	orrs	r2, r3
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	621a      	str	r2, [r3, #32]
}
 8009a6a:	46c0      	nop			@ (mov r8, r8)
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	b006      	add	sp, #24
 8009a70:	bd80      	pop	{r7, pc}
	...

08009a74 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b084      	sub	sp, #16
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
 8009a7c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	223c      	movs	r2, #60	@ 0x3c
 8009a86:	5c9b      	ldrb	r3, [r3, r2]
 8009a88:	2b01      	cmp	r3, #1
 8009a8a:	d101      	bne.n	8009a90 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009a8c:	2302      	movs	r3, #2
 8009a8e:	e06f      	b.n	8009b70 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	223c      	movs	r2, #60	@ 0x3c
 8009a94:	2101      	movs	r1, #1
 8009a96:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	22ff      	movs	r2, #255	@ 0xff
 8009a9c:	4393      	bics	r3, r2
 8009a9e:	001a      	movs	r2, r3
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	68db      	ldr	r3, [r3, #12]
 8009aa4:	4313      	orrs	r3, r2
 8009aa6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	4a33      	ldr	r2, [pc, #204]	@ (8009b78 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8009aac:	401a      	ands	r2, r3
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	689b      	ldr	r3, [r3, #8]
 8009ab2:	4313      	orrs	r3, r2
 8009ab4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	4a30      	ldr	r2, [pc, #192]	@ (8009b7c <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8009aba:	401a      	ands	r2, r3
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	685b      	ldr	r3, [r3, #4]
 8009ac0:	4313      	orrs	r3, r2
 8009ac2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	4a2e      	ldr	r2, [pc, #184]	@ (8009b80 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8009ac8:	401a      	ands	r2, r3
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	4313      	orrs	r3, r2
 8009ad0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	4a2b      	ldr	r2, [pc, #172]	@ (8009b84 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8009ad6:	401a      	ands	r2, r3
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	691b      	ldr	r3, [r3, #16]
 8009adc:	4313      	orrs	r3, r2
 8009ade:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	4a29      	ldr	r2, [pc, #164]	@ (8009b88 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8009ae4:	401a      	ands	r2, r3
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	695b      	ldr	r3, [r3, #20]
 8009aea:	4313      	orrs	r3, r2
 8009aec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	4a26      	ldr	r2, [pc, #152]	@ (8009b8c <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8009af2:	401a      	ands	r2, r3
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009af8:	4313      	orrs	r3, r2
 8009afa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	4a24      	ldr	r2, [pc, #144]	@ (8009b90 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8009b00:	401a      	ands	r2, r3
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	699b      	ldr	r3, [r3, #24]
 8009b06:	041b      	lsls	r3, r3, #16
 8009b08:	4313      	orrs	r3, r2
 8009b0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	4a21      	ldr	r2, [pc, #132]	@ (8009b94 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8009b10:	401a      	ands	r2, r3
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	69db      	ldr	r3, [r3, #28]
 8009b16:	4313      	orrs	r3, r2
 8009b18:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	4a1e      	ldr	r2, [pc, #120]	@ (8009b98 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8009b20:	4293      	cmp	r3, r2
 8009b22:	d11c      	bne.n	8009b5e <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	4a1d      	ldr	r2, [pc, #116]	@ (8009b9c <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8009b28:	401a      	ands	r2, r3
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b2e:	051b      	lsls	r3, r3, #20
 8009b30:	4313      	orrs	r3, r2
 8009b32:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	4a1a      	ldr	r2, [pc, #104]	@ (8009ba0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8009b38:	401a      	ands	r2, r3
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	6a1b      	ldr	r3, [r3, #32]
 8009b3e:	4313      	orrs	r3, r2
 8009b40:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	4a17      	ldr	r2, [pc, #92]	@ (8009ba4 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8009b46:	401a      	ands	r2, r3
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b4c:	4313      	orrs	r3, r2
 8009b4e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	4a15      	ldr	r2, [pc, #84]	@ (8009ba8 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8009b54:	401a      	ands	r2, r3
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b5a:	4313      	orrs	r3, r2
 8009b5c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	68fa      	ldr	r2, [r7, #12]
 8009b64:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	223c      	movs	r2, #60	@ 0x3c
 8009b6a:	2100      	movs	r1, #0
 8009b6c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009b6e:	2300      	movs	r3, #0
}
 8009b70:	0018      	movs	r0, r3
 8009b72:	46bd      	mov	sp, r7
 8009b74:	b004      	add	sp, #16
 8009b76:	bd80      	pop	{r7, pc}
 8009b78:	fffffcff 	.word	0xfffffcff
 8009b7c:	fffffbff 	.word	0xfffffbff
 8009b80:	fffff7ff 	.word	0xfffff7ff
 8009b84:	ffffefff 	.word	0xffffefff
 8009b88:	ffffdfff 	.word	0xffffdfff
 8009b8c:	ffffbfff 	.word	0xffffbfff
 8009b90:	fff0ffff 	.word	0xfff0ffff
 8009b94:	efffffff 	.word	0xefffffff
 8009b98:	40012c00 	.word	0x40012c00
 8009b9c:	ff0fffff 	.word	0xff0fffff
 8009ba0:	feffffff 	.word	0xfeffffff
 8009ba4:	fdffffff 	.word	0xfdffffff
 8009ba8:	dfffffff 	.word	0xdfffffff

08009bac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b082      	sub	sp, #8
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d101      	bne.n	8009bbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009bba:	2301      	movs	r3, #1
 8009bbc:	e046      	b.n	8009c4c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	2288      	movs	r2, #136	@ 0x88
 8009bc2:	589b      	ldr	r3, [r3, r2]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d107      	bne.n	8009bd8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2284      	movs	r2, #132	@ 0x84
 8009bcc:	2100      	movs	r1, #0
 8009bce:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	0018      	movs	r0, r3
 8009bd4:	f7fc f81a 	bl	8005c0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2288      	movs	r2, #136	@ 0x88
 8009bdc:	2124      	movs	r1, #36	@ 0x24
 8009bde:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	681a      	ldr	r2, [r3, #0]
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	2101      	movs	r1, #1
 8009bec:	438a      	bics	r2, r1
 8009bee:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d003      	beq.n	8009c00 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	0018      	movs	r0, r3
 8009bfc:	f000 fc68 	bl	800a4d0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	0018      	movs	r0, r3
 8009c04:	f000 f90e 	bl	8009e24 <UART_SetConfig>
 8009c08:	0003      	movs	r3, r0
 8009c0a:	2b01      	cmp	r3, #1
 8009c0c:	d101      	bne.n	8009c12 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8009c0e:	2301      	movs	r3, #1
 8009c10:	e01c      	b.n	8009c4c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	685a      	ldr	r2, [r3, #4]
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	490d      	ldr	r1, [pc, #52]	@ (8009c54 <HAL_UART_Init+0xa8>)
 8009c1e:	400a      	ands	r2, r1
 8009c20:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	689a      	ldr	r2, [r3, #8]
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	212a      	movs	r1, #42	@ 0x2a
 8009c2e:	438a      	bics	r2, r1
 8009c30:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	681a      	ldr	r2, [r3, #0]
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	2101      	movs	r1, #1
 8009c3e:	430a      	orrs	r2, r1
 8009c40:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	0018      	movs	r0, r3
 8009c46:	f000 fcf7 	bl	800a638 <UART_CheckIdleState>
 8009c4a:	0003      	movs	r3, r0
}
 8009c4c:	0018      	movs	r0, r3
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	b002      	add	sp, #8
 8009c52:	bd80      	pop	{r7, pc}
 8009c54:	ffffb7ff 	.word	0xffffb7ff

08009c58 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b08a      	sub	sp, #40	@ 0x28
 8009c5c:	af02      	add	r7, sp, #8
 8009c5e:	60f8      	str	r0, [r7, #12]
 8009c60:	60b9      	str	r1, [r7, #8]
 8009c62:	603b      	str	r3, [r7, #0]
 8009c64:	1dbb      	adds	r3, r7, #6
 8009c66:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	228c      	movs	r2, #140	@ 0x8c
 8009c6c:	589b      	ldr	r3, [r3, r2]
 8009c6e:	2b20      	cmp	r3, #32
 8009c70:	d000      	beq.n	8009c74 <HAL_UART_Receive+0x1c>
 8009c72:	e0d0      	b.n	8009e16 <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 8009c74:	68bb      	ldr	r3, [r7, #8]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d003      	beq.n	8009c82 <HAL_UART_Receive+0x2a>
 8009c7a:	1dbb      	adds	r3, r7, #6
 8009c7c:	881b      	ldrh	r3, [r3, #0]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d101      	bne.n	8009c86 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8009c82:	2301      	movs	r3, #1
 8009c84:	e0c8      	b.n	8009e18 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	689a      	ldr	r2, [r3, #8]
 8009c8a:	2380      	movs	r3, #128	@ 0x80
 8009c8c:	015b      	lsls	r3, r3, #5
 8009c8e:	429a      	cmp	r2, r3
 8009c90:	d109      	bne.n	8009ca6 <HAL_UART_Receive+0x4e>
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	691b      	ldr	r3, [r3, #16]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d105      	bne.n	8009ca6 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	2201      	movs	r2, #1
 8009c9e:	4013      	ands	r3, r2
 8009ca0:	d001      	beq.n	8009ca6 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8009ca2:	2301      	movs	r3, #1
 8009ca4:	e0b8      	b.n	8009e18 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	2290      	movs	r2, #144	@ 0x90
 8009caa:	2100      	movs	r1, #0
 8009cac:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	228c      	movs	r2, #140	@ 0x8c
 8009cb2:	2122      	movs	r1, #34	@ 0x22
 8009cb4:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	2200      	movs	r2, #0
 8009cba:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009cbc:	f7fc f96c 	bl	8005f98 <HAL_GetTick>
 8009cc0:	0003      	movs	r3, r0
 8009cc2:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	1dba      	adds	r2, r7, #6
 8009cc8:	215c      	movs	r1, #92	@ 0x5c
 8009cca:	8812      	ldrh	r2, [r2, #0]
 8009ccc:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	1dba      	adds	r2, r7, #6
 8009cd2:	215e      	movs	r1, #94	@ 0x5e
 8009cd4:	8812      	ldrh	r2, [r2, #0]
 8009cd6:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	689a      	ldr	r2, [r3, #8]
 8009cdc:	2380      	movs	r3, #128	@ 0x80
 8009cde:	015b      	lsls	r3, r3, #5
 8009ce0:	429a      	cmp	r2, r3
 8009ce2:	d10d      	bne.n	8009d00 <HAL_UART_Receive+0xa8>
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	691b      	ldr	r3, [r3, #16]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d104      	bne.n	8009cf6 <HAL_UART_Receive+0x9e>
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	2260      	movs	r2, #96	@ 0x60
 8009cf0:	494b      	ldr	r1, [pc, #300]	@ (8009e20 <HAL_UART_Receive+0x1c8>)
 8009cf2:	5299      	strh	r1, [r3, r2]
 8009cf4:	e02e      	b.n	8009d54 <HAL_UART_Receive+0xfc>
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	2260      	movs	r2, #96	@ 0x60
 8009cfa:	21ff      	movs	r1, #255	@ 0xff
 8009cfc:	5299      	strh	r1, [r3, r2]
 8009cfe:	e029      	b.n	8009d54 <HAL_UART_Receive+0xfc>
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	689b      	ldr	r3, [r3, #8]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d10d      	bne.n	8009d24 <HAL_UART_Receive+0xcc>
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	691b      	ldr	r3, [r3, #16]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d104      	bne.n	8009d1a <HAL_UART_Receive+0xc2>
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	2260      	movs	r2, #96	@ 0x60
 8009d14:	21ff      	movs	r1, #255	@ 0xff
 8009d16:	5299      	strh	r1, [r3, r2]
 8009d18:	e01c      	b.n	8009d54 <HAL_UART_Receive+0xfc>
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	2260      	movs	r2, #96	@ 0x60
 8009d1e:	217f      	movs	r1, #127	@ 0x7f
 8009d20:	5299      	strh	r1, [r3, r2]
 8009d22:	e017      	b.n	8009d54 <HAL_UART_Receive+0xfc>
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	689a      	ldr	r2, [r3, #8]
 8009d28:	2380      	movs	r3, #128	@ 0x80
 8009d2a:	055b      	lsls	r3, r3, #21
 8009d2c:	429a      	cmp	r2, r3
 8009d2e:	d10d      	bne.n	8009d4c <HAL_UART_Receive+0xf4>
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	691b      	ldr	r3, [r3, #16]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d104      	bne.n	8009d42 <HAL_UART_Receive+0xea>
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	2260      	movs	r2, #96	@ 0x60
 8009d3c:	217f      	movs	r1, #127	@ 0x7f
 8009d3e:	5299      	strh	r1, [r3, r2]
 8009d40:	e008      	b.n	8009d54 <HAL_UART_Receive+0xfc>
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	2260      	movs	r2, #96	@ 0x60
 8009d46:	213f      	movs	r1, #63	@ 0x3f
 8009d48:	5299      	strh	r1, [r3, r2]
 8009d4a:	e003      	b.n	8009d54 <HAL_UART_Receive+0xfc>
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	2260      	movs	r2, #96	@ 0x60
 8009d50:	2100      	movs	r1, #0
 8009d52:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8009d54:	2312      	movs	r3, #18
 8009d56:	18fb      	adds	r3, r7, r3
 8009d58:	68fa      	ldr	r2, [r7, #12]
 8009d5a:	2160      	movs	r1, #96	@ 0x60
 8009d5c:	5a52      	ldrh	r2, [r2, r1]
 8009d5e:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	689a      	ldr	r2, [r3, #8]
 8009d64:	2380      	movs	r3, #128	@ 0x80
 8009d66:	015b      	lsls	r3, r3, #5
 8009d68:	429a      	cmp	r2, r3
 8009d6a:	d108      	bne.n	8009d7e <HAL_UART_Receive+0x126>
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	691b      	ldr	r3, [r3, #16]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d104      	bne.n	8009d7e <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8009d74:	2300      	movs	r3, #0
 8009d76:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	61bb      	str	r3, [r7, #24]
 8009d7c:	e003      	b.n	8009d86 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8009d7e:	68bb      	ldr	r3, [r7, #8]
 8009d80:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009d82:	2300      	movs	r3, #0
 8009d84:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8009d86:	e03a      	b.n	8009dfe <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009d88:	697a      	ldr	r2, [r7, #20]
 8009d8a:	68f8      	ldr	r0, [r7, #12]
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	9300      	str	r3, [sp, #0]
 8009d90:	0013      	movs	r3, r2
 8009d92:	2200      	movs	r2, #0
 8009d94:	2120      	movs	r1, #32
 8009d96:	f000 fcf9 	bl	800a78c <UART_WaitOnFlagUntilTimeout>
 8009d9a:	1e03      	subs	r3, r0, #0
 8009d9c:	d005      	beq.n	8009daa <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	228c      	movs	r2, #140	@ 0x8c
 8009da2:	2120      	movs	r1, #32
 8009da4:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009da6:	2303      	movs	r3, #3
 8009da8:	e036      	b.n	8009e18 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 8009daa:	69fb      	ldr	r3, [r7, #28]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d10e      	bne.n	8009dce <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009db6:	b29b      	uxth	r3, r3
 8009db8:	2212      	movs	r2, #18
 8009dba:	18ba      	adds	r2, r7, r2
 8009dbc:	8812      	ldrh	r2, [r2, #0]
 8009dbe:	4013      	ands	r3, r2
 8009dc0:	b29a      	uxth	r2, r3
 8009dc2:	69bb      	ldr	r3, [r7, #24]
 8009dc4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8009dc6:	69bb      	ldr	r3, [r7, #24]
 8009dc8:	3302      	adds	r3, #2
 8009dca:	61bb      	str	r3, [r7, #24]
 8009dcc:	e00e      	b.n	8009dec <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dd4:	b2db      	uxtb	r3, r3
 8009dd6:	2212      	movs	r2, #18
 8009dd8:	18ba      	adds	r2, r7, r2
 8009dda:	8812      	ldrh	r2, [r2, #0]
 8009ddc:	b2d2      	uxtb	r2, r2
 8009dde:	4013      	ands	r3, r2
 8009de0:	b2da      	uxtb	r2, r3
 8009de2:	69fb      	ldr	r3, [r7, #28]
 8009de4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8009de6:	69fb      	ldr	r3, [r7, #28]
 8009de8:	3301      	adds	r3, #1
 8009dea:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	225e      	movs	r2, #94	@ 0x5e
 8009df0:	5a9b      	ldrh	r3, [r3, r2]
 8009df2:	b29b      	uxth	r3, r3
 8009df4:	3b01      	subs	r3, #1
 8009df6:	b299      	uxth	r1, r3
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	225e      	movs	r2, #94	@ 0x5e
 8009dfc:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	225e      	movs	r2, #94	@ 0x5e
 8009e02:	5a9b      	ldrh	r3, [r3, r2]
 8009e04:	b29b      	uxth	r3, r3
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d1be      	bne.n	8009d88 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	228c      	movs	r2, #140	@ 0x8c
 8009e0e:	2120      	movs	r1, #32
 8009e10:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8009e12:	2300      	movs	r3, #0
 8009e14:	e000      	b.n	8009e18 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 8009e16:	2302      	movs	r3, #2
  }
}
 8009e18:	0018      	movs	r0, r3
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	b008      	add	sp, #32
 8009e1e:	bd80      	pop	{r7, pc}
 8009e20:	000001ff 	.word	0x000001ff

08009e24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009e24:	b5b0      	push	{r4, r5, r7, lr}
 8009e26:	b090      	sub	sp, #64	@ 0x40
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009e2c:	231a      	movs	r3, #26
 8009e2e:	2220      	movs	r2, #32
 8009e30:	189b      	adds	r3, r3, r2
 8009e32:	19db      	adds	r3, r3, r7
 8009e34:	2200      	movs	r2, #0
 8009e36:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e3a:	689a      	ldr	r2, [r3, #8]
 8009e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e3e:	691b      	ldr	r3, [r3, #16]
 8009e40:	431a      	orrs	r2, r3
 8009e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e44:	695b      	ldr	r3, [r3, #20]
 8009e46:	431a      	orrs	r2, r3
 8009e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e4a:	69db      	ldr	r3, [r3, #28]
 8009e4c:	4313      	orrs	r3, r2
 8009e4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	4ac1      	ldr	r2, [pc, #772]	@ (800a15c <UART_SetConfig+0x338>)
 8009e58:	4013      	ands	r3, r2
 8009e5a:	0019      	movs	r1, r3
 8009e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e5e:	681a      	ldr	r2, [r3, #0]
 8009e60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e62:	430b      	orrs	r3, r1
 8009e64:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	685b      	ldr	r3, [r3, #4]
 8009e6c:	4abc      	ldr	r2, [pc, #752]	@ (800a160 <UART_SetConfig+0x33c>)
 8009e6e:	4013      	ands	r3, r2
 8009e70:	0018      	movs	r0, r3
 8009e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e74:	68d9      	ldr	r1, [r3, #12]
 8009e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e78:	681a      	ldr	r2, [r3, #0]
 8009e7a:	0003      	movs	r3, r0
 8009e7c:	430b      	orrs	r3, r1
 8009e7e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e82:	699b      	ldr	r3, [r3, #24]
 8009e84:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	4ab6      	ldr	r2, [pc, #728]	@ (800a164 <UART_SetConfig+0x340>)
 8009e8c:	4293      	cmp	r3, r2
 8009e8e:	d009      	beq.n	8009ea4 <UART_SetConfig+0x80>
 8009e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	4ab4      	ldr	r2, [pc, #720]	@ (800a168 <UART_SetConfig+0x344>)
 8009e96:	4293      	cmp	r3, r2
 8009e98:	d004      	beq.n	8009ea4 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e9c:	6a1b      	ldr	r3, [r3, #32]
 8009e9e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009ea0:	4313      	orrs	r3, r2
 8009ea2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	689b      	ldr	r3, [r3, #8]
 8009eaa:	4ab0      	ldr	r2, [pc, #704]	@ (800a16c <UART_SetConfig+0x348>)
 8009eac:	4013      	ands	r3, r2
 8009eae:	0019      	movs	r1, r3
 8009eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009eb2:	681a      	ldr	r2, [r3, #0]
 8009eb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009eb6:	430b      	orrs	r3, r1
 8009eb8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ec0:	220f      	movs	r2, #15
 8009ec2:	4393      	bics	r3, r2
 8009ec4:	0018      	movs	r0, r3
 8009ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ec8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8009eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ecc:	681a      	ldr	r2, [r3, #0]
 8009ece:	0003      	movs	r3, r0
 8009ed0:	430b      	orrs	r3, r1
 8009ed2:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	4aa5      	ldr	r2, [pc, #660]	@ (800a170 <UART_SetConfig+0x34c>)
 8009eda:	4293      	cmp	r3, r2
 8009edc:	d131      	bne.n	8009f42 <UART_SetConfig+0x11e>
 8009ede:	4ba5      	ldr	r3, [pc, #660]	@ (800a174 <UART_SetConfig+0x350>)
 8009ee0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ee2:	2203      	movs	r2, #3
 8009ee4:	4013      	ands	r3, r2
 8009ee6:	2b03      	cmp	r3, #3
 8009ee8:	d01d      	beq.n	8009f26 <UART_SetConfig+0x102>
 8009eea:	d823      	bhi.n	8009f34 <UART_SetConfig+0x110>
 8009eec:	2b02      	cmp	r3, #2
 8009eee:	d00c      	beq.n	8009f0a <UART_SetConfig+0xe6>
 8009ef0:	d820      	bhi.n	8009f34 <UART_SetConfig+0x110>
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d002      	beq.n	8009efc <UART_SetConfig+0xd8>
 8009ef6:	2b01      	cmp	r3, #1
 8009ef8:	d00e      	beq.n	8009f18 <UART_SetConfig+0xf4>
 8009efa:	e01b      	b.n	8009f34 <UART_SetConfig+0x110>
 8009efc:	231b      	movs	r3, #27
 8009efe:	2220      	movs	r2, #32
 8009f00:	189b      	adds	r3, r3, r2
 8009f02:	19db      	adds	r3, r3, r7
 8009f04:	2200      	movs	r2, #0
 8009f06:	701a      	strb	r2, [r3, #0]
 8009f08:	e154      	b.n	800a1b4 <UART_SetConfig+0x390>
 8009f0a:	231b      	movs	r3, #27
 8009f0c:	2220      	movs	r2, #32
 8009f0e:	189b      	adds	r3, r3, r2
 8009f10:	19db      	adds	r3, r3, r7
 8009f12:	2202      	movs	r2, #2
 8009f14:	701a      	strb	r2, [r3, #0]
 8009f16:	e14d      	b.n	800a1b4 <UART_SetConfig+0x390>
 8009f18:	231b      	movs	r3, #27
 8009f1a:	2220      	movs	r2, #32
 8009f1c:	189b      	adds	r3, r3, r2
 8009f1e:	19db      	adds	r3, r3, r7
 8009f20:	2204      	movs	r2, #4
 8009f22:	701a      	strb	r2, [r3, #0]
 8009f24:	e146      	b.n	800a1b4 <UART_SetConfig+0x390>
 8009f26:	231b      	movs	r3, #27
 8009f28:	2220      	movs	r2, #32
 8009f2a:	189b      	adds	r3, r3, r2
 8009f2c:	19db      	adds	r3, r3, r7
 8009f2e:	2208      	movs	r2, #8
 8009f30:	701a      	strb	r2, [r3, #0]
 8009f32:	e13f      	b.n	800a1b4 <UART_SetConfig+0x390>
 8009f34:	231b      	movs	r3, #27
 8009f36:	2220      	movs	r2, #32
 8009f38:	189b      	adds	r3, r3, r2
 8009f3a:	19db      	adds	r3, r3, r7
 8009f3c:	2210      	movs	r2, #16
 8009f3e:	701a      	strb	r2, [r3, #0]
 8009f40:	e138      	b.n	800a1b4 <UART_SetConfig+0x390>
 8009f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	4a8c      	ldr	r2, [pc, #560]	@ (800a178 <UART_SetConfig+0x354>)
 8009f48:	4293      	cmp	r3, r2
 8009f4a:	d131      	bne.n	8009fb0 <UART_SetConfig+0x18c>
 8009f4c:	4b89      	ldr	r3, [pc, #548]	@ (800a174 <UART_SetConfig+0x350>)
 8009f4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f50:	220c      	movs	r2, #12
 8009f52:	4013      	ands	r3, r2
 8009f54:	2b0c      	cmp	r3, #12
 8009f56:	d01d      	beq.n	8009f94 <UART_SetConfig+0x170>
 8009f58:	d823      	bhi.n	8009fa2 <UART_SetConfig+0x17e>
 8009f5a:	2b08      	cmp	r3, #8
 8009f5c:	d00c      	beq.n	8009f78 <UART_SetConfig+0x154>
 8009f5e:	d820      	bhi.n	8009fa2 <UART_SetConfig+0x17e>
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d002      	beq.n	8009f6a <UART_SetConfig+0x146>
 8009f64:	2b04      	cmp	r3, #4
 8009f66:	d00e      	beq.n	8009f86 <UART_SetConfig+0x162>
 8009f68:	e01b      	b.n	8009fa2 <UART_SetConfig+0x17e>
 8009f6a:	231b      	movs	r3, #27
 8009f6c:	2220      	movs	r2, #32
 8009f6e:	189b      	adds	r3, r3, r2
 8009f70:	19db      	adds	r3, r3, r7
 8009f72:	2200      	movs	r2, #0
 8009f74:	701a      	strb	r2, [r3, #0]
 8009f76:	e11d      	b.n	800a1b4 <UART_SetConfig+0x390>
 8009f78:	231b      	movs	r3, #27
 8009f7a:	2220      	movs	r2, #32
 8009f7c:	189b      	adds	r3, r3, r2
 8009f7e:	19db      	adds	r3, r3, r7
 8009f80:	2202      	movs	r2, #2
 8009f82:	701a      	strb	r2, [r3, #0]
 8009f84:	e116      	b.n	800a1b4 <UART_SetConfig+0x390>
 8009f86:	231b      	movs	r3, #27
 8009f88:	2220      	movs	r2, #32
 8009f8a:	189b      	adds	r3, r3, r2
 8009f8c:	19db      	adds	r3, r3, r7
 8009f8e:	2204      	movs	r2, #4
 8009f90:	701a      	strb	r2, [r3, #0]
 8009f92:	e10f      	b.n	800a1b4 <UART_SetConfig+0x390>
 8009f94:	231b      	movs	r3, #27
 8009f96:	2220      	movs	r2, #32
 8009f98:	189b      	adds	r3, r3, r2
 8009f9a:	19db      	adds	r3, r3, r7
 8009f9c:	2208      	movs	r2, #8
 8009f9e:	701a      	strb	r2, [r3, #0]
 8009fa0:	e108      	b.n	800a1b4 <UART_SetConfig+0x390>
 8009fa2:	231b      	movs	r3, #27
 8009fa4:	2220      	movs	r2, #32
 8009fa6:	189b      	adds	r3, r3, r2
 8009fa8:	19db      	adds	r3, r3, r7
 8009faa:	2210      	movs	r2, #16
 8009fac:	701a      	strb	r2, [r3, #0]
 8009fae:	e101      	b.n	800a1b4 <UART_SetConfig+0x390>
 8009fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	4a71      	ldr	r2, [pc, #452]	@ (800a17c <UART_SetConfig+0x358>)
 8009fb6:	4293      	cmp	r3, r2
 8009fb8:	d131      	bne.n	800a01e <UART_SetConfig+0x1fa>
 8009fba:	4b6e      	ldr	r3, [pc, #440]	@ (800a174 <UART_SetConfig+0x350>)
 8009fbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009fbe:	2230      	movs	r2, #48	@ 0x30
 8009fc0:	4013      	ands	r3, r2
 8009fc2:	2b30      	cmp	r3, #48	@ 0x30
 8009fc4:	d01d      	beq.n	800a002 <UART_SetConfig+0x1de>
 8009fc6:	d823      	bhi.n	800a010 <UART_SetConfig+0x1ec>
 8009fc8:	2b20      	cmp	r3, #32
 8009fca:	d00c      	beq.n	8009fe6 <UART_SetConfig+0x1c2>
 8009fcc:	d820      	bhi.n	800a010 <UART_SetConfig+0x1ec>
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d002      	beq.n	8009fd8 <UART_SetConfig+0x1b4>
 8009fd2:	2b10      	cmp	r3, #16
 8009fd4:	d00e      	beq.n	8009ff4 <UART_SetConfig+0x1d0>
 8009fd6:	e01b      	b.n	800a010 <UART_SetConfig+0x1ec>
 8009fd8:	231b      	movs	r3, #27
 8009fda:	2220      	movs	r2, #32
 8009fdc:	189b      	adds	r3, r3, r2
 8009fde:	19db      	adds	r3, r3, r7
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	701a      	strb	r2, [r3, #0]
 8009fe4:	e0e6      	b.n	800a1b4 <UART_SetConfig+0x390>
 8009fe6:	231b      	movs	r3, #27
 8009fe8:	2220      	movs	r2, #32
 8009fea:	189b      	adds	r3, r3, r2
 8009fec:	19db      	adds	r3, r3, r7
 8009fee:	2202      	movs	r2, #2
 8009ff0:	701a      	strb	r2, [r3, #0]
 8009ff2:	e0df      	b.n	800a1b4 <UART_SetConfig+0x390>
 8009ff4:	231b      	movs	r3, #27
 8009ff6:	2220      	movs	r2, #32
 8009ff8:	189b      	adds	r3, r3, r2
 8009ffa:	19db      	adds	r3, r3, r7
 8009ffc:	2204      	movs	r2, #4
 8009ffe:	701a      	strb	r2, [r3, #0]
 800a000:	e0d8      	b.n	800a1b4 <UART_SetConfig+0x390>
 800a002:	231b      	movs	r3, #27
 800a004:	2220      	movs	r2, #32
 800a006:	189b      	adds	r3, r3, r2
 800a008:	19db      	adds	r3, r3, r7
 800a00a:	2208      	movs	r2, #8
 800a00c:	701a      	strb	r2, [r3, #0]
 800a00e:	e0d1      	b.n	800a1b4 <UART_SetConfig+0x390>
 800a010:	231b      	movs	r3, #27
 800a012:	2220      	movs	r2, #32
 800a014:	189b      	adds	r3, r3, r2
 800a016:	19db      	adds	r3, r3, r7
 800a018:	2210      	movs	r2, #16
 800a01a:	701a      	strb	r2, [r3, #0]
 800a01c:	e0ca      	b.n	800a1b4 <UART_SetConfig+0x390>
 800a01e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	4a57      	ldr	r2, [pc, #348]	@ (800a180 <UART_SetConfig+0x35c>)
 800a024:	4293      	cmp	r3, r2
 800a026:	d106      	bne.n	800a036 <UART_SetConfig+0x212>
 800a028:	231b      	movs	r3, #27
 800a02a:	2220      	movs	r2, #32
 800a02c:	189b      	adds	r3, r3, r2
 800a02e:	19db      	adds	r3, r3, r7
 800a030:	2200      	movs	r2, #0
 800a032:	701a      	strb	r2, [r3, #0]
 800a034:	e0be      	b.n	800a1b4 <UART_SetConfig+0x390>
 800a036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	4a52      	ldr	r2, [pc, #328]	@ (800a184 <UART_SetConfig+0x360>)
 800a03c:	4293      	cmp	r3, r2
 800a03e:	d106      	bne.n	800a04e <UART_SetConfig+0x22a>
 800a040:	231b      	movs	r3, #27
 800a042:	2220      	movs	r2, #32
 800a044:	189b      	adds	r3, r3, r2
 800a046:	19db      	adds	r3, r3, r7
 800a048:	2200      	movs	r2, #0
 800a04a:	701a      	strb	r2, [r3, #0]
 800a04c:	e0b2      	b.n	800a1b4 <UART_SetConfig+0x390>
 800a04e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	4a4d      	ldr	r2, [pc, #308]	@ (800a188 <UART_SetConfig+0x364>)
 800a054:	4293      	cmp	r3, r2
 800a056:	d106      	bne.n	800a066 <UART_SetConfig+0x242>
 800a058:	231b      	movs	r3, #27
 800a05a:	2220      	movs	r2, #32
 800a05c:	189b      	adds	r3, r3, r2
 800a05e:	19db      	adds	r3, r3, r7
 800a060:	2200      	movs	r2, #0
 800a062:	701a      	strb	r2, [r3, #0]
 800a064:	e0a6      	b.n	800a1b4 <UART_SetConfig+0x390>
 800a066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	4a3e      	ldr	r2, [pc, #248]	@ (800a164 <UART_SetConfig+0x340>)
 800a06c:	4293      	cmp	r3, r2
 800a06e:	d13e      	bne.n	800a0ee <UART_SetConfig+0x2ca>
 800a070:	4b40      	ldr	r3, [pc, #256]	@ (800a174 <UART_SetConfig+0x350>)
 800a072:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a074:	23c0      	movs	r3, #192	@ 0xc0
 800a076:	011b      	lsls	r3, r3, #4
 800a078:	4013      	ands	r3, r2
 800a07a:	22c0      	movs	r2, #192	@ 0xc0
 800a07c:	0112      	lsls	r2, r2, #4
 800a07e:	4293      	cmp	r3, r2
 800a080:	d027      	beq.n	800a0d2 <UART_SetConfig+0x2ae>
 800a082:	22c0      	movs	r2, #192	@ 0xc0
 800a084:	0112      	lsls	r2, r2, #4
 800a086:	4293      	cmp	r3, r2
 800a088:	d82a      	bhi.n	800a0e0 <UART_SetConfig+0x2bc>
 800a08a:	2280      	movs	r2, #128	@ 0x80
 800a08c:	0112      	lsls	r2, r2, #4
 800a08e:	4293      	cmp	r3, r2
 800a090:	d011      	beq.n	800a0b6 <UART_SetConfig+0x292>
 800a092:	2280      	movs	r2, #128	@ 0x80
 800a094:	0112      	lsls	r2, r2, #4
 800a096:	4293      	cmp	r3, r2
 800a098:	d822      	bhi.n	800a0e0 <UART_SetConfig+0x2bc>
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d004      	beq.n	800a0a8 <UART_SetConfig+0x284>
 800a09e:	2280      	movs	r2, #128	@ 0x80
 800a0a0:	00d2      	lsls	r2, r2, #3
 800a0a2:	4293      	cmp	r3, r2
 800a0a4:	d00e      	beq.n	800a0c4 <UART_SetConfig+0x2a0>
 800a0a6:	e01b      	b.n	800a0e0 <UART_SetConfig+0x2bc>
 800a0a8:	231b      	movs	r3, #27
 800a0aa:	2220      	movs	r2, #32
 800a0ac:	189b      	adds	r3, r3, r2
 800a0ae:	19db      	adds	r3, r3, r7
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	701a      	strb	r2, [r3, #0]
 800a0b4:	e07e      	b.n	800a1b4 <UART_SetConfig+0x390>
 800a0b6:	231b      	movs	r3, #27
 800a0b8:	2220      	movs	r2, #32
 800a0ba:	189b      	adds	r3, r3, r2
 800a0bc:	19db      	adds	r3, r3, r7
 800a0be:	2202      	movs	r2, #2
 800a0c0:	701a      	strb	r2, [r3, #0]
 800a0c2:	e077      	b.n	800a1b4 <UART_SetConfig+0x390>
 800a0c4:	231b      	movs	r3, #27
 800a0c6:	2220      	movs	r2, #32
 800a0c8:	189b      	adds	r3, r3, r2
 800a0ca:	19db      	adds	r3, r3, r7
 800a0cc:	2204      	movs	r2, #4
 800a0ce:	701a      	strb	r2, [r3, #0]
 800a0d0:	e070      	b.n	800a1b4 <UART_SetConfig+0x390>
 800a0d2:	231b      	movs	r3, #27
 800a0d4:	2220      	movs	r2, #32
 800a0d6:	189b      	adds	r3, r3, r2
 800a0d8:	19db      	adds	r3, r3, r7
 800a0da:	2208      	movs	r2, #8
 800a0dc:	701a      	strb	r2, [r3, #0]
 800a0de:	e069      	b.n	800a1b4 <UART_SetConfig+0x390>
 800a0e0:	231b      	movs	r3, #27
 800a0e2:	2220      	movs	r2, #32
 800a0e4:	189b      	adds	r3, r3, r2
 800a0e6:	19db      	adds	r3, r3, r7
 800a0e8:	2210      	movs	r2, #16
 800a0ea:	701a      	strb	r2, [r3, #0]
 800a0ec:	e062      	b.n	800a1b4 <UART_SetConfig+0x390>
 800a0ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	4a1d      	ldr	r2, [pc, #116]	@ (800a168 <UART_SetConfig+0x344>)
 800a0f4:	4293      	cmp	r3, r2
 800a0f6:	d157      	bne.n	800a1a8 <UART_SetConfig+0x384>
 800a0f8:	4b1e      	ldr	r3, [pc, #120]	@ (800a174 <UART_SetConfig+0x350>)
 800a0fa:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a0fc:	23c0      	movs	r3, #192	@ 0xc0
 800a0fe:	009b      	lsls	r3, r3, #2
 800a100:	4013      	ands	r3, r2
 800a102:	22c0      	movs	r2, #192	@ 0xc0
 800a104:	0092      	lsls	r2, r2, #2
 800a106:	4293      	cmp	r3, r2
 800a108:	d040      	beq.n	800a18c <UART_SetConfig+0x368>
 800a10a:	22c0      	movs	r2, #192	@ 0xc0
 800a10c:	0092      	lsls	r2, r2, #2
 800a10e:	4293      	cmp	r3, r2
 800a110:	d843      	bhi.n	800a19a <UART_SetConfig+0x376>
 800a112:	2280      	movs	r2, #128	@ 0x80
 800a114:	0092      	lsls	r2, r2, #2
 800a116:	4293      	cmp	r3, r2
 800a118:	d011      	beq.n	800a13e <UART_SetConfig+0x31a>
 800a11a:	2280      	movs	r2, #128	@ 0x80
 800a11c:	0092      	lsls	r2, r2, #2
 800a11e:	4293      	cmp	r3, r2
 800a120:	d83b      	bhi.n	800a19a <UART_SetConfig+0x376>
 800a122:	2b00      	cmp	r3, #0
 800a124:	d004      	beq.n	800a130 <UART_SetConfig+0x30c>
 800a126:	2280      	movs	r2, #128	@ 0x80
 800a128:	0052      	lsls	r2, r2, #1
 800a12a:	4293      	cmp	r3, r2
 800a12c:	d00e      	beq.n	800a14c <UART_SetConfig+0x328>
 800a12e:	e034      	b.n	800a19a <UART_SetConfig+0x376>
 800a130:	231b      	movs	r3, #27
 800a132:	2220      	movs	r2, #32
 800a134:	189b      	adds	r3, r3, r2
 800a136:	19db      	adds	r3, r3, r7
 800a138:	2200      	movs	r2, #0
 800a13a:	701a      	strb	r2, [r3, #0]
 800a13c:	e03a      	b.n	800a1b4 <UART_SetConfig+0x390>
 800a13e:	231b      	movs	r3, #27
 800a140:	2220      	movs	r2, #32
 800a142:	189b      	adds	r3, r3, r2
 800a144:	19db      	adds	r3, r3, r7
 800a146:	2202      	movs	r2, #2
 800a148:	701a      	strb	r2, [r3, #0]
 800a14a:	e033      	b.n	800a1b4 <UART_SetConfig+0x390>
 800a14c:	231b      	movs	r3, #27
 800a14e:	2220      	movs	r2, #32
 800a150:	189b      	adds	r3, r3, r2
 800a152:	19db      	adds	r3, r3, r7
 800a154:	2204      	movs	r2, #4
 800a156:	701a      	strb	r2, [r3, #0]
 800a158:	e02c      	b.n	800a1b4 <UART_SetConfig+0x390>
 800a15a:	46c0      	nop			@ (mov r8, r8)
 800a15c:	cfff69f3 	.word	0xcfff69f3
 800a160:	ffffcfff 	.word	0xffffcfff
 800a164:	40008000 	.word	0x40008000
 800a168:	40008400 	.word	0x40008400
 800a16c:	11fff4ff 	.word	0x11fff4ff
 800a170:	40013800 	.word	0x40013800
 800a174:	40021000 	.word	0x40021000
 800a178:	40004400 	.word	0x40004400
 800a17c:	40004800 	.word	0x40004800
 800a180:	40004c00 	.word	0x40004c00
 800a184:	40005000 	.word	0x40005000
 800a188:	40013c00 	.word	0x40013c00
 800a18c:	231b      	movs	r3, #27
 800a18e:	2220      	movs	r2, #32
 800a190:	189b      	adds	r3, r3, r2
 800a192:	19db      	adds	r3, r3, r7
 800a194:	2208      	movs	r2, #8
 800a196:	701a      	strb	r2, [r3, #0]
 800a198:	e00c      	b.n	800a1b4 <UART_SetConfig+0x390>
 800a19a:	231b      	movs	r3, #27
 800a19c:	2220      	movs	r2, #32
 800a19e:	189b      	adds	r3, r3, r2
 800a1a0:	19db      	adds	r3, r3, r7
 800a1a2:	2210      	movs	r2, #16
 800a1a4:	701a      	strb	r2, [r3, #0]
 800a1a6:	e005      	b.n	800a1b4 <UART_SetConfig+0x390>
 800a1a8:	231b      	movs	r3, #27
 800a1aa:	2220      	movs	r2, #32
 800a1ac:	189b      	adds	r3, r3, r2
 800a1ae:	19db      	adds	r3, r3, r7
 800a1b0:	2210      	movs	r2, #16
 800a1b2:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a1b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	4ac1      	ldr	r2, [pc, #772]	@ (800a4c0 <UART_SetConfig+0x69c>)
 800a1ba:	4293      	cmp	r3, r2
 800a1bc:	d005      	beq.n	800a1ca <UART_SetConfig+0x3a6>
 800a1be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	4ac0      	ldr	r2, [pc, #768]	@ (800a4c4 <UART_SetConfig+0x6a0>)
 800a1c4:	4293      	cmp	r3, r2
 800a1c6:	d000      	beq.n	800a1ca <UART_SetConfig+0x3a6>
 800a1c8:	e093      	b.n	800a2f2 <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a1ca:	231b      	movs	r3, #27
 800a1cc:	2220      	movs	r2, #32
 800a1ce:	189b      	adds	r3, r3, r2
 800a1d0:	19db      	adds	r3, r3, r7
 800a1d2:	781b      	ldrb	r3, [r3, #0]
 800a1d4:	2b08      	cmp	r3, #8
 800a1d6:	d015      	beq.n	800a204 <UART_SetConfig+0x3e0>
 800a1d8:	dc18      	bgt.n	800a20c <UART_SetConfig+0x3e8>
 800a1da:	2b04      	cmp	r3, #4
 800a1dc:	d00d      	beq.n	800a1fa <UART_SetConfig+0x3d6>
 800a1de:	dc15      	bgt.n	800a20c <UART_SetConfig+0x3e8>
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d002      	beq.n	800a1ea <UART_SetConfig+0x3c6>
 800a1e4:	2b02      	cmp	r3, #2
 800a1e6:	d005      	beq.n	800a1f4 <UART_SetConfig+0x3d0>
 800a1e8:	e010      	b.n	800a20c <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a1ea:	f7fd fcf7 	bl	8007bdc <HAL_RCC_GetPCLK1Freq>
 800a1ee:	0003      	movs	r3, r0
 800a1f0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a1f2:	e014      	b.n	800a21e <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a1f4:	4bb4      	ldr	r3, [pc, #720]	@ (800a4c8 <UART_SetConfig+0x6a4>)
 800a1f6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a1f8:	e011      	b.n	800a21e <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a1fa:	f7fd fc63 	bl	8007ac4 <HAL_RCC_GetSysClockFreq>
 800a1fe:	0003      	movs	r3, r0
 800a200:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a202:	e00c      	b.n	800a21e <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a204:	2380      	movs	r3, #128	@ 0x80
 800a206:	021b      	lsls	r3, r3, #8
 800a208:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a20a:	e008      	b.n	800a21e <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 800a20c:	2300      	movs	r3, #0
 800a20e:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800a210:	231a      	movs	r3, #26
 800a212:	2220      	movs	r2, #32
 800a214:	189b      	adds	r3, r3, r2
 800a216:	19db      	adds	r3, r3, r7
 800a218:	2201      	movs	r2, #1
 800a21a:	701a      	strb	r2, [r3, #0]
        break;
 800a21c:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a21e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a220:	2b00      	cmp	r3, #0
 800a222:	d100      	bne.n	800a226 <UART_SetConfig+0x402>
 800a224:	e135      	b.n	800a492 <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a228:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a22a:	4ba8      	ldr	r3, [pc, #672]	@ (800a4cc <UART_SetConfig+0x6a8>)
 800a22c:	0052      	lsls	r2, r2, #1
 800a22e:	5ad3      	ldrh	r3, [r2, r3]
 800a230:	0019      	movs	r1, r3
 800a232:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800a234:	f7f5 ff7a 	bl	800012c <__udivsi3>
 800a238:	0003      	movs	r3, r0
 800a23a:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a23c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a23e:	685a      	ldr	r2, [r3, #4]
 800a240:	0013      	movs	r3, r2
 800a242:	005b      	lsls	r3, r3, #1
 800a244:	189b      	adds	r3, r3, r2
 800a246:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a248:	429a      	cmp	r2, r3
 800a24a:	d305      	bcc.n	800a258 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a24c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a24e:	685b      	ldr	r3, [r3, #4]
 800a250:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a252:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a254:	429a      	cmp	r2, r3
 800a256:	d906      	bls.n	800a266 <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 800a258:	231a      	movs	r3, #26
 800a25a:	2220      	movs	r2, #32
 800a25c:	189b      	adds	r3, r3, r2
 800a25e:	19db      	adds	r3, r3, r7
 800a260:	2201      	movs	r2, #1
 800a262:	701a      	strb	r2, [r3, #0]
 800a264:	e044      	b.n	800a2f0 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a266:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a268:	61bb      	str	r3, [r7, #24]
 800a26a:	2300      	movs	r3, #0
 800a26c:	61fb      	str	r3, [r7, #28]
 800a26e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a270:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a272:	4b96      	ldr	r3, [pc, #600]	@ (800a4cc <UART_SetConfig+0x6a8>)
 800a274:	0052      	lsls	r2, r2, #1
 800a276:	5ad3      	ldrh	r3, [r2, r3]
 800a278:	613b      	str	r3, [r7, #16]
 800a27a:	2300      	movs	r3, #0
 800a27c:	617b      	str	r3, [r7, #20]
 800a27e:	693a      	ldr	r2, [r7, #16]
 800a280:	697b      	ldr	r3, [r7, #20]
 800a282:	69b8      	ldr	r0, [r7, #24]
 800a284:	69f9      	ldr	r1, [r7, #28]
 800a286:	f7f6 f93f 	bl	8000508 <__aeabi_uldivmod>
 800a28a:	0002      	movs	r2, r0
 800a28c:	000b      	movs	r3, r1
 800a28e:	0e11      	lsrs	r1, r2, #24
 800a290:	021d      	lsls	r5, r3, #8
 800a292:	430d      	orrs	r5, r1
 800a294:	0214      	lsls	r4, r2, #8
 800a296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a298:	685b      	ldr	r3, [r3, #4]
 800a29a:	085b      	lsrs	r3, r3, #1
 800a29c:	60bb      	str	r3, [r7, #8]
 800a29e:	2300      	movs	r3, #0
 800a2a0:	60fb      	str	r3, [r7, #12]
 800a2a2:	68b8      	ldr	r0, [r7, #8]
 800a2a4:	68f9      	ldr	r1, [r7, #12]
 800a2a6:	1900      	adds	r0, r0, r4
 800a2a8:	4169      	adcs	r1, r5
 800a2aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2ac:	685b      	ldr	r3, [r3, #4]
 800a2ae:	603b      	str	r3, [r7, #0]
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	607b      	str	r3, [r7, #4]
 800a2b4:	683a      	ldr	r2, [r7, #0]
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	f7f6 f926 	bl	8000508 <__aeabi_uldivmod>
 800a2bc:	0002      	movs	r2, r0
 800a2be:	000b      	movs	r3, r1
 800a2c0:	0013      	movs	r3, r2
 800a2c2:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a2c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a2c6:	23c0      	movs	r3, #192	@ 0xc0
 800a2c8:	009b      	lsls	r3, r3, #2
 800a2ca:	429a      	cmp	r2, r3
 800a2cc:	d309      	bcc.n	800a2e2 <UART_SetConfig+0x4be>
 800a2ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a2d0:	2380      	movs	r3, #128	@ 0x80
 800a2d2:	035b      	lsls	r3, r3, #13
 800a2d4:	429a      	cmp	r2, r3
 800a2d6:	d204      	bcs.n	800a2e2 <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 800a2d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a2de:	60da      	str	r2, [r3, #12]
 800a2e0:	e006      	b.n	800a2f0 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 800a2e2:	231a      	movs	r3, #26
 800a2e4:	2220      	movs	r2, #32
 800a2e6:	189b      	adds	r3, r3, r2
 800a2e8:	19db      	adds	r3, r3, r7
 800a2ea:	2201      	movs	r2, #1
 800a2ec:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 800a2ee:	e0d0      	b.n	800a492 <UART_SetConfig+0x66e>
 800a2f0:	e0cf      	b.n	800a492 <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a2f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2f4:	69da      	ldr	r2, [r3, #28]
 800a2f6:	2380      	movs	r3, #128	@ 0x80
 800a2f8:	021b      	lsls	r3, r3, #8
 800a2fa:	429a      	cmp	r2, r3
 800a2fc:	d000      	beq.n	800a300 <UART_SetConfig+0x4dc>
 800a2fe:	e070      	b.n	800a3e2 <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 800a300:	231b      	movs	r3, #27
 800a302:	2220      	movs	r2, #32
 800a304:	189b      	adds	r3, r3, r2
 800a306:	19db      	adds	r3, r3, r7
 800a308:	781b      	ldrb	r3, [r3, #0]
 800a30a:	2b08      	cmp	r3, #8
 800a30c:	d015      	beq.n	800a33a <UART_SetConfig+0x516>
 800a30e:	dc18      	bgt.n	800a342 <UART_SetConfig+0x51e>
 800a310:	2b04      	cmp	r3, #4
 800a312:	d00d      	beq.n	800a330 <UART_SetConfig+0x50c>
 800a314:	dc15      	bgt.n	800a342 <UART_SetConfig+0x51e>
 800a316:	2b00      	cmp	r3, #0
 800a318:	d002      	beq.n	800a320 <UART_SetConfig+0x4fc>
 800a31a:	2b02      	cmp	r3, #2
 800a31c:	d005      	beq.n	800a32a <UART_SetConfig+0x506>
 800a31e:	e010      	b.n	800a342 <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a320:	f7fd fc5c 	bl	8007bdc <HAL_RCC_GetPCLK1Freq>
 800a324:	0003      	movs	r3, r0
 800a326:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a328:	e014      	b.n	800a354 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a32a:	4b67      	ldr	r3, [pc, #412]	@ (800a4c8 <UART_SetConfig+0x6a4>)
 800a32c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a32e:	e011      	b.n	800a354 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a330:	f7fd fbc8 	bl	8007ac4 <HAL_RCC_GetSysClockFreq>
 800a334:	0003      	movs	r3, r0
 800a336:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a338:	e00c      	b.n	800a354 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a33a:	2380      	movs	r3, #128	@ 0x80
 800a33c:	021b      	lsls	r3, r3, #8
 800a33e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a340:	e008      	b.n	800a354 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 800a342:	2300      	movs	r3, #0
 800a344:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800a346:	231a      	movs	r3, #26
 800a348:	2220      	movs	r2, #32
 800a34a:	189b      	adds	r3, r3, r2
 800a34c:	19db      	adds	r3, r3, r7
 800a34e:	2201      	movs	r2, #1
 800a350:	701a      	strb	r2, [r3, #0]
        break;
 800a352:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a354:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a356:	2b00      	cmp	r3, #0
 800a358:	d100      	bne.n	800a35c <UART_SetConfig+0x538>
 800a35a:	e09a      	b.n	800a492 <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a35c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a35e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a360:	4b5a      	ldr	r3, [pc, #360]	@ (800a4cc <UART_SetConfig+0x6a8>)
 800a362:	0052      	lsls	r2, r2, #1
 800a364:	5ad3      	ldrh	r3, [r2, r3]
 800a366:	0019      	movs	r1, r3
 800a368:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800a36a:	f7f5 fedf 	bl	800012c <__udivsi3>
 800a36e:	0003      	movs	r3, r0
 800a370:	005a      	lsls	r2, r3, #1
 800a372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a374:	685b      	ldr	r3, [r3, #4]
 800a376:	085b      	lsrs	r3, r3, #1
 800a378:	18d2      	adds	r2, r2, r3
 800a37a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a37c:	685b      	ldr	r3, [r3, #4]
 800a37e:	0019      	movs	r1, r3
 800a380:	0010      	movs	r0, r2
 800a382:	f7f5 fed3 	bl	800012c <__udivsi3>
 800a386:	0003      	movs	r3, r0
 800a388:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a38a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a38c:	2b0f      	cmp	r3, #15
 800a38e:	d921      	bls.n	800a3d4 <UART_SetConfig+0x5b0>
 800a390:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a392:	2380      	movs	r3, #128	@ 0x80
 800a394:	025b      	lsls	r3, r3, #9
 800a396:	429a      	cmp	r2, r3
 800a398:	d21c      	bcs.n	800a3d4 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a39a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a39c:	b29a      	uxth	r2, r3
 800a39e:	200e      	movs	r0, #14
 800a3a0:	2420      	movs	r4, #32
 800a3a2:	1903      	adds	r3, r0, r4
 800a3a4:	19db      	adds	r3, r3, r7
 800a3a6:	210f      	movs	r1, #15
 800a3a8:	438a      	bics	r2, r1
 800a3aa:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a3ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3ae:	085b      	lsrs	r3, r3, #1
 800a3b0:	b29b      	uxth	r3, r3
 800a3b2:	2207      	movs	r2, #7
 800a3b4:	4013      	ands	r3, r2
 800a3b6:	b299      	uxth	r1, r3
 800a3b8:	1903      	adds	r3, r0, r4
 800a3ba:	19db      	adds	r3, r3, r7
 800a3bc:	1902      	adds	r2, r0, r4
 800a3be:	19d2      	adds	r2, r2, r7
 800a3c0:	8812      	ldrh	r2, [r2, #0]
 800a3c2:	430a      	orrs	r2, r1
 800a3c4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800a3c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	1902      	adds	r2, r0, r4
 800a3cc:	19d2      	adds	r2, r2, r7
 800a3ce:	8812      	ldrh	r2, [r2, #0]
 800a3d0:	60da      	str	r2, [r3, #12]
 800a3d2:	e05e      	b.n	800a492 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 800a3d4:	231a      	movs	r3, #26
 800a3d6:	2220      	movs	r2, #32
 800a3d8:	189b      	adds	r3, r3, r2
 800a3da:	19db      	adds	r3, r3, r7
 800a3dc:	2201      	movs	r2, #1
 800a3de:	701a      	strb	r2, [r3, #0]
 800a3e0:	e057      	b.n	800a492 <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a3e2:	231b      	movs	r3, #27
 800a3e4:	2220      	movs	r2, #32
 800a3e6:	189b      	adds	r3, r3, r2
 800a3e8:	19db      	adds	r3, r3, r7
 800a3ea:	781b      	ldrb	r3, [r3, #0]
 800a3ec:	2b08      	cmp	r3, #8
 800a3ee:	d015      	beq.n	800a41c <UART_SetConfig+0x5f8>
 800a3f0:	dc18      	bgt.n	800a424 <UART_SetConfig+0x600>
 800a3f2:	2b04      	cmp	r3, #4
 800a3f4:	d00d      	beq.n	800a412 <UART_SetConfig+0x5ee>
 800a3f6:	dc15      	bgt.n	800a424 <UART_SetConfig+0x600>
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d002      	beq.n	800a402 <UART_SetConfig+0x5de>
 800a3fc:	2b02      	cmp	r3, #2
 800a3fe:	d005      	beq.n	800a40c <UART_SetConfig+0x5e8>
 800a400:	e010      	b.n	800a424 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a402:	f7fd fbeb 	bl	8007bdc <HAL_RCC_GetPCLK1Freq>
 800a406:	0003      	movs	r3, r0
 800a408:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a40a:	e014      	b.n	800a436 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a40c:	4b2e      	ldr	r3, [pc, #184]	@ (800a4c8 <UART_SetConfig+0x6a4>)
 800a40e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a410:	e011      	b.n	800a436 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a412:	f7fd fb57 	bl	8007ac4 <HAL_RCC_GetSysClockFreq>
 800a416:	0003      	movs	r3, r0
 800a418:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a41a:	e00c      	b.n	800a436 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a41c:	2380      	movs	r3, #128	@ 0x80
 800a41e:	021b      	lsls	r3, r3, #8
 800a420:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a422:	e008      	b.n	800a436 <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 800a424:	2300      	movs	r3, #0
 800a426:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800a428:	231a      	movs	r3, #26
 800a42a:	2220      	movs	r2, #32
 800a42c:	189b      	adds	r3, r3, r2
 800a42e:	19db      	adds	r3, r3, r7
 800a430:	2201      	movs	r2, #1
 800a432:	701a      	strb	r2, [r3, #0]
        break;
 800a434:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800a436:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d02a      	beq.n	800a492 <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a43c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a43e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a440:	4b22      	ldr	r3, [pc, #136]	@ (800a4cc <UART_SetConfig+0x6a8>)
 800a442:	0052      	lsls	r2, r2, #1
 800a444:	5ad3      	ldrh	r3, [r2, r3]
 800a446:	0019      	movs	r1, r3
 800a448:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800a44a:	f7f5 fe6f 	bl	800012c <__udivsi3>
 800a44e:	0003      	movs	r3, r0
 800a450:	001a      	movs	r2, r3
 800a452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a454:	685b      	ldr	r3, [r3, #4]
 800a456:	085b      	lsrs	r3, r3, #1
 800a458:	18d2      	adds	r2, r2, r3
 800a45a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a45c:	685b      	ldr	r3, [r3, #4]
 800a45e:	0019      	movs	r1, r3
 800a460:	0010      	movs	r0, r2
 800a462:	f7f5 fe63 	bl	800012c <__udivsi3>
 800a466:	0003      	movs	r3, r0
 800a468:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a46a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a46c:	2b0f      	cmp	r3, #15
 800a46e:	d90a      	bls.n	800a486 <UART_SetConfig+0x662>
 800a470:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a472:	2380      	movs	r3, #128	@ 0x80
 800a474:	025b      	lsls	r3, r3, #9
 800a476:	429a      	cmp	r2, r3
 800a478:	d205      	bcs.n	800a486 <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a47a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a47c:	b29a      	uxth	r2, r3
 800a47e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	60da      	str	r2, [r3, #12]
 800a484:	e005      	b.n	800a492 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 800a486:	231a      	movs	r3, #26
 800a488:	2220      	movs	r2, #32
 800a48a:	189b      	adds	r3, r3, r2
 800a48c:	19db      	adds	r3, r3, r7
 800a48e:	2201      	movs	r2, #1
 800a490:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a494:	226a      	movs	r2, #106	@ 0x6a
 800a496:	2101      	movs	r1, #1
 800a498:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800a49a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a49c:	2268      	movs	r2, #104	@ 0x68
 800a49e:	2101      	movs	r1, #1
 800a4a0:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a4a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a4a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a4ae:	231a      	movs	r3, #26
 800a4b0:	2220      	movs	r2, #32
 800a4b2:	189b      	adds	r3, r3, r2
 800a4b4:	19db      	adds	r3, r3, r7
 800a4b6:	781b      	ldrb	r3, [r3, #0]
}
 800a4b8:	0018      	movs	r0, r3
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	b010      	add	sp, #64	@ 0x40
 800a4be:	bdb0      	pop	{r4, r5, r7, pc}
 800a4c0:	40008000 	.word	0x40008000
 800a4c4:	40008400 	.word	0x40008400
 800a4c8:	00f42400 	.word	0x00f42400
 800a4cc:	0800c19c 	.word	0x0800c19c

0800a4d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b082      	sub	sp, #8
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4dc:	2208      	movs	r2, #8
 800a4de:	4013      	ands	r3, r2
 800a4e0:	d00b      	beq.n	800a4fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	685b      	ldr	r3, [r3, #4]
 800a4e8:	4a4a      	ldr	r2, [pc, #296]	@ (800a614 <UART_AdvFeatureConfig+0x144>)
 800a4ea:	4013      	ands	r3, r2
 800a4ec:	0019      	movs	r1, r3
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	430a      	orrs	r2, r1
 800a4f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4fe:	2201      	movs	r2, #1
 800a500:	4013      	ands	r3, r2
 800a502:	d00b      	beq.n	800a51c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	685b      	ldr	r3, [r3, #4]
 800a50a:	4a43      	ldr	r2, [pc, #268]	@ (800a618 <UART_AdvFeatureConfig+0x148>)
 800a50c:	4013      	ands	r3, r2
 800a50e:	0019      	movs	r1, r3
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	430a      	orrs	r2, r1
 800a51a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a520:	2202      	movs	r2, #2
 800a522:	4013      	ands	r3, r2
 800a524:	d00b      	beq.n	800a53e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	685b      	ldr	r3, [r3, #4]
 800a52c:	4a3b      	ldr	r2, [pc, #236]	@ (800a61c <UART_AdvFeatureConfig+0x14c>)
 800a52e:	4013      	ands	r3, r2
 800a530:	0019      	movs	r1, r3
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	430a      	orrs	r2, r1
 800a53c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a542:	2204      	movs	r2, #4
 800a544:	4013      	ands	r3, r2
 800a546:	d00b      	beq.n	800a560 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	685b      	ldr	r3, [r3, #4]
 800a54e:	4a34      	ldr	r2, [pc, #208]	@ (800a620 <UART_AdvFeatureConfig+0x150>)
 800a550:	4013      	ands	r3, r2
 800a552:	0019      	movs	r1, r3
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	430a      	orrs	r2, r1
 800a55e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a564:	2210      	movs	r2, #16
 800a566:	4013      	ands	r3, r2
 800a568:	d00b      	beq.n	800a582 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	689b      	ldr	r3, [r3, #8]
 800a570:	4a2c      	ldr	r2, [pc, #176]	@ (800a624 <UART_AdvFeatureConfig+0x154>)
 800a572:	4013      	ands	r3, r2
 800a574:	0019      	movs	r1, r3
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	430a      	orrs	r2, r1
 800a580:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a586:	2220      	movs	r2, #32
 800a588:	4013      	ands	r3, r2
 800a58a:	d00b      	beq.n	800a5a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	689b      	ldr	r3, [r3, #8]
 800a592:	4a25      	ldr	r2, [pc, #148]	@ (800a628 <UART_AdvFeatureConfig+0x158>)
 800a594:	4013      	ands	r3, r2
 800a596:	0019      	movs	r1, r3
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	430a      	orrs	r2, r1
 800a5a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5a8:	2240      	movs	r2, #64	@ 0x40
 800a5aa:	4013      	ands	r3, r2
 800a5ac:	d01d      	beq.n	800a5ea <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	685b      	ldr	r3, [r3, #4]
 800a5b4:	4a1d      	ldr	r2, [pc, #116]	@ (800a62c <UART_AdvFeatureConfig+0x15c>)
 800a5b6:	4013      	ands	r3, r2
 800a5b8:	0019      	movs	r1, r3
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	430a      	orrs	r2, r1
 800a5c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a5ca:	2380      	movs	r3, #128	@ 0x80
 800a5cc:	035b      	lsls	r3, r3, #13
 800a5ce:	429a      	cmp	r2, r3
 800a5d0:	d10b      	bne.n	800a5ea <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	685b      	ldr	r3, [r3, #4]
 800a5d8:	4a15      	ldr	r2, [pc, #84]	@ (800a630 <UART_AdvFeatureConfig+0x160>)
 800a5da:	4013      	ands	r3, r2
 800a5dc:	0019      	movs	r1, r3
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	430a      	orrs	r2, r1
 800a5e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5ee:	2280      	movs	r2, #128	@ 0x80
 800a5f0:	4013      	ands	r3, r2
 800a5f2:	d00b      	beq.n	800a60c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	685b      	ldr	r3, [r3, #4]
 800a5fa:	4a0e      	ldr	r2, [pc, #56]	@ (800a634 <UART_AdvFeatureConfig+0x164>)
 800a5fc:	4013      	ands	r3, r2
 800a5fe:	0019      	movs	r1, r3
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	430a      	orrs	r2, r1
 800a60a:	605a      	str	r2, [r3, #4]
  }
}
 800a60c:	46c0      	nop			@ (mov r8, r8)
 800a60e:	46bd      	mov	sp, r7
 800a610:	b002      	add	sp, #8
 800a612:	bd80      	pop	{r7, pc}
 800a614:	ffff7fff 	.word	0xffff7fff
 800a618:	fffdffff 	.word	0xfffdffff
 800a61c:	fffeffff 	.word	0xfffeffff
 800a620:	fffbffff 	.word	0xfffbffff
 800a624:	ffffefff 	.word	0xffffefff
 800a628:	ffffdfff 	.word	0xffffdfff
 800a62c:	ffefffff 	.word	0xffefffff
 800a630:	ff9fffff 	.word	0xff9fffff
 800a634:	fff7ffff 	.word	0xfff7ffff

0800a638 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b092      	sub	sp, #72	@ 0x48
 800a63c:	af02      	add	r7, sp, #8
 800a63e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2290      	movs	r2, #144	@ 0x90
 800a644:	2100      	movs	r1, #0
 800a646:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a648:	f7fb fca6 	bl	8005f98 <HAL_GetTick>
 800a64c:	0003      	movs	r3, r0
 800a64e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	2208      	movs	r2, #8
 800a658:	4013      	ands	r3, r2
 800a65a:	2b08      	cmp	r3, #8
 800a65c:	d12d      	bne.n	800a6ba <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a65e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a660:	2280      	movs	r2, #128	@ 0x80
 800a662:	0391      	lsls	r1, r2, #14
 800a664:	6878      	ldr	r0, [r7, #4]
 800a666:	4a47      	ldr	r2, [pc, #284]	@ (800a784 <UART_CheckIdleState+0x14c>)
 800a668:	9200      	str	r2, [sp, #0]
 800a66a:	2200      	movs	r2, #0
 800a66c:	f000 f88e 	bl	800a78c <UART_WaitOnFlagUntilTimeout>
 800a670:	1e03      	subs	r3, r0, #0
 800a672:	d022      	beq.n	800a6ba <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a674:	f3ef 8310 	mrs	r3, PRIMASK
 800a678:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800a67a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a67c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a67e:	2301      	movs	r3, #1
 800a680:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a684:	f383 8810 	msr	PRIMASK, r3
}
 800a688:	46c0      	nop			@ (mov r8, r8)
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	681a      	ldr	r2, [r3, #0]
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	2180      	movs	r1, #128	@ 0x80
 800a696:	438a      	bics	r2, r1
 800a698:	601a      	str	r2, [r3, #0]
 800a69a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a69c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a69e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6a0:	f383 8810 	msr	PRIMASK, r3
}
 800a6a4:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	2288      	movs	r2, #136	@ 0x88
 800a6aa:	2120      	movs	r1, #32
 800a6ac:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	2284      	movs	r2, #132	@ 0x84
 800a6b2:	2100      	movs	r1, #0
 800a6b4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a6b6:	2303      	movs	r3, #3
 800a6b8:	e060      	b.n	800a77c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	2204      	movs	r2, #4
 800a6c2:	4013      	ands	r3, r2
 800a6c4:	2b04      	cmp	r3, #4
 800a6c6:	d146      	bne.n	800a756 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a6c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a6ca:	2280      	movs	r2, #128	@ 0x80
 800a6cc:	03d1      	lsls	r1, r2, #15
 800a6ce:	6878      	ldr	r0, [r7, #4]
 800a6d0:	4a2c      	ldr	r2, [pc, #176]	@ (800a784 <UART_CheckIdleState+0x14c>)
 800a6d2:	9200      	str	r2, [sp, #0]
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	f000 f859 	bl	800a78c <UART_WaitOnFlagUntilTimeout>
 800a6da:	1e03      	subs	r3, r0, #0
 800a6dc:	d03b      	beq.n	800a756 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a6de:	f3ef 8310 	mrs	r3, PRIMASK
 800a6e2:	60fb      	str	r3, [r7, #12]
  return(result);
 800a6e4:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a6e6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a6e8:	2301      	movs	r3, #1
 800a6ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a6ec:	693b      	ldr	r3, [r7, #16]
 800a6ee:	f383 8810 	msr	PRIMASK, r3
}
 800a6f2:	46c0      	nop			@ (mov r8, r8)
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	681a      	ldr	r2, [r3, #0]
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	4922      	ldr	r1, [pc, #136]	@ (800a788 <UART_CheckIdleState+0x150>)
 800a700:	400a      	ands	r2, r1
 800a702:	601a      	str	r2, [r3, #0]
 800a704:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a706:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a708:	697b      	ldr	r3, [r7, #20]
 800a70a:	f383 8810 	msr	PRIMASK, r3
}
 800a70e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a710:	f3ef 8310 	mrs	r3, PRIMASK
 800a714:	61bb      	str	r3, [r7, #24]
  return(result);
 800a716:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a718:	633b      	str	r3, [r7, #48]	@ 0x30
 800a71a:	2301      	movs	r3, #1
 800a71c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a71e:	69fb      	ldr	r3, [r7, #28]
 800a720:	f383 8810 	msr	PRIMASK, r3
}
 800a724:	46c0      	nop			@ (mov r8, r8)
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	689a      	ldr	r2, [r3, #8]
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	2101      	movs	r1, #1
 800a732:	438a      	bics	r2, r1
 800a734:	609a      	str	r2, [r3, #8]
 800a736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a738:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a73a:	6a3b      	ldr	r3, [r7, #32]
 800a73c:	f383 8810 	msr	PRIMASK, r3
}
 800a740:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	228c      	movs	r2, #140	@ 0x8c
 800a746:	2120      	movs	r1, #32
 800a748:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	2284      	movs	r2, #132	@ 0x84
 800a74e:	2100      	movs	r1, #0
 800a750:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a752:	2303      	movs	r3, #3
 800a754:	e012      	b.n	800a77c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	2288      	movs	r2, #136	@ 0x88
 800a75a:	2120      	movs	r1, #32
 800a75c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	228c      	movs	r2, #140	@ 0x8c
 800a762:	2120      	movs	r1, #32
 800a764:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	2200      	movs	r2, #0
 800a76a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2200      	movs	r2, #0
 800a770:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	2284      	movs	r2, #132	@ 0x84
 800a776:	2100      	movs	r1, #0
 800a778:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a77a:	2300      	movs	r3, #0
}
 800a77c:	0018      	movs	r0, r3
 800a77e:	46bd      	mov	sp, r7
 800a780:	b010      	add	sp, #64	@ 0x40
 800a782:	bd80      	pop	{r7, pc}
 800a784:	01ffffff 	.word	0x01ffffff
 800a788:	fffffedf 	.word	0xfffffedf

0800a78c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b084      	sub	sp, #16
 800a790:	af00      	add	r7, sp, #0
 800a792:	60f8      	str	r0, [r7, #12]
 800a794:	60b9      	str	r1, [r7, #8]
 800a796:	603b      	str	r3, [r7, #0]
 800a798:	1dfb      	adds	r3, r7, #7
 800a79a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a79c:	e051      	b.n	800a842 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a79e:	69bb      	ldr	r3, [r7, #24]
 800a7a0:	3301      	adds	r3, #1
 800a7a2:	d04e      	beq.n	800a842 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a7a4:	f7fb fbf8 	bl	8005f98 <HAL_GetTick>
 800a7a8:	0002      	movs	r2, r0
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	1ad3      	subs	r3, r2, r3
 800a7ae:	69ba      	ldr	r2, [r7, #24]
 800a7b0:	429a      	cmp	r2, r3
 800a7b2:	d302      	bcc.n	800a7ba <UART_WaitOnFlagUntilTimeout+0x2e>
 800a7b4:	69bb      	ldr	r3, [r7, #24]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d101      	bne.n	800a7be <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800a7ba:	2303      	movs	r3, #3
 800a7bc:	e051      	b.n	800a862 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	2204      	movs	r2, #4
 800a7c6:	4013      	ands	r3, r2
 800a7c8:	d03b      	beq.n	800a842 <UART_WaitOnFlagUntilTimeout+0xb6>
 800a7ca:	68bb      	ldr	r3, [r7, #8]
 800a7cc:	2b80      	cmp	r3, #128	@ 0x80
 800a7ce:	d038      	beq.n	800a842 <UART_WaitOnFlagUntilTimeout+0xb6>
 800a7d0:	68bb      	ldr	r3, [r7, #8]
 800a7d2:	2b40      	cmp	r3, #64	@ 0x40
 800a7d4:	d035      	beq.n	800a842 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	69db      	ldr	r3, [r3, #28]
 800a7dc:	2208      	movs	r2, #8
 800a7de:	4013      	ands	r3, r2
 800a7e0:	2b08      	cmp	r3, #8
 800a7e2:	d111      	bne.n	800a808 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	2208      	movs	r2, #8
 800a7ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	0018      	movs	r0, r3
 800a7f0:	f000 f83c 	bl	800a86c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	2290      	movs	r2, #144	@ 0x90
 800a7f8:	2108      	movs	r1, #8
 800a7fa:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	2284      	movs	r2, #132	@ 0x84
 800a800:	2100      	movs	r1, #0
 800a802:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800a804:	2301      	movs	r3, #1
 800a806:	e02c      	b.n	800a862 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	69da      	ldr	r2, [r3, #28]
 800a80e:	2380      	movs	r3, #128	@ 0x80
 800a810:	011b      	lsls	r3, r3, #4
 800a812:	401a      	ands	r2, r3
 800a814:	2380      	movs	r3, #128	@ 0x80
 800a816:	011b      	lsls	r3, r3, #4
 800a818:	429a      	cmp	r2, r3
 800a81a:	d112      	bne.n	800a842 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	2280      	movs	r2, #128	@ 0x80
 800a822:	0112      	lsls	r2, r2, #4
 800a824:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	0018      	movs	r0, r3
 800a82a:	f000 f81f 	bl	800a86c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	2290      	movs	r2, #144	@ 0x90
 800a832:	2120      	movs	r1, #32
 800a834:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	2284      	movs	r2, #132	@ 0x84
 800a83a:	2100      	movs	r1, #0
 800a83c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800a83e:	2303      	movs	r3, #3
 800a840:	e00f      	b.n	800a862 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	69db      	ldr	r3, [r3, #28]
 800a848:	68ba      	ldr	r2, [r7, #8]
 800a84a:	4013      	ands	r3, r2
 800a84c:	68ba      	ldr	r2, [r7, #8]
 800a84e:	1ad3      	subs	r3, r2, r3
 800a850:	425a      	negs	r2, r3
 800a852:	4153      	adcs	r3, r2
 800a854:	b2db      	uxtb	r3, r3
 800a856:	001a      	movs	r2, r3
 800a858:	1dfb      	adds	r3, r7, #7
 800a85a:	781b      	ldrb	r3, [r3, #0]
 800a85c:	429a      	cmp	r2, r3
 800a85e:	d09e      	beq.n	800a79e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a860:	2300      	movs	r3, #0
}
 800a862:	0018      	movs	r0, r3
 800a864:	46bd      	mov	sp, r7
 800a866:	b004      	add	sp, #16
 800a868:	bd80      	pop	{r7, pc}
	...

0800a86c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b08e      	sub	sp, #56	@ 0x38
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a874:	f3ef 8310 	mrs	r3, PRIMASK
 800a878:	617b      	str	r3, [r7, #20]
  return(result);
 800a87a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a87c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a87e:	2301      	movs	r3, #1
 800a880:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a882:	69bb      	ldr	r3, [r7, #24]
 800a884:	f383 8810 	msr	PRIMASK, r3
}
 800a888:	46c0      	nop			@ (mov r8, r8)
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	681a      	ldr	r2, [r3, #0]
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	4926      	ldr	r1, [pc, #152]	@ (800a930 <UART_EndRxTransfer+0xc4>)
 800a896:	400a      	ands	r2, r1
 800a898:	601a      	str	r2, [r3, #0]
 800a89a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a89c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a89e:	69fb      	ldr	r3, [r7, #28]
 800a8a0:	f383 8810 	msr	PRIMASK, r3
}
 800a8a4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a8a6:	f3ef 8310 	mrs	r3, PRIMASK
 800a8aa:	623b      	str	r3, [r7, #32]
  return(result);
 800a8ac:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a8ae:	633b      	str	r3, [r7, #48]	@ 0x30
 800a8b0:	2301      	movs	r3, #1
 800a8b2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a8b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8b6:	f383 8810 	msr	PRIMASK, r3
}
 800a8ba:	46c0      	nop			@ (mov r8, r8)
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	689a      	ldr	r2, [r3, #8]
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	491b      	ldr	r1, [pc, #108]	@ (800a934 <UART_EndRxTransfer+0xc8>)
 800a8c8:	400a      	ands	r2, r1
 800a8ca:	609a      	str	r2, [r3, #8]
 800a8cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a8d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8d2:	f383 8810 	msr	PRIMASK, r3
}
 800a8d6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a8dc:	2b01      	cmp	r3, #1
 800a8de:	d118      	bne.n	800a912 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a8e0:	f3ef 8310 	mrs	r3, PRIMASK
 800a8e4:	60bb      	str	r3, [r7, #8]
  return(result);
 800a8e6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a8e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a8ea:	2301      	movs	r3, #1
 800a8ec:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	f383 8810 	msr	PRIMASK, r3
}
 800a8f4:	46c0      	nop			@ (mov r8, r8)
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	681a      	ldr	r2, [r3, #0]
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	2110      	movs	r1, #16
 800a902:	438a      	bics	r2, r1
 800a904:	601a      	str	r2, [r3, #0]
 800a906:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a908:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a90a:	693b      	ldr	r3, [r7, #16]
 800a90c:	f383 8810 	msr	PRIMASK, r3
}
 800a910:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	228c      	movs	r2, #140	@ 0x8c
 800a916:	2120      	movs	r1, #32
 800a918:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2200      	movs	r2, #0
 800a91e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2200      	movs	r2, #0
 800a924:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a926:	46c0      	nop			@ (mov r8, r8)
 800a928:	46bd      	mov	sp, r7
 800a92a:	b00e      	add	sp, #56	@ 0x38
 800a92c:	bd80      	pop	{r7, pc}
 800a92e:	46c0      	nop			@ (mov r8, r8)
 800a930:	fffffedf 	.word	0xfffffedf
 800a934:	effffffe 	.word	0xeffffffe

0800a938 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b084      	sub	sp, #16
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2284      	movs	r2, #132	@ 0x84
 800a944:	5c9b      	ldrb	r3, [r3, r2]
 800a946:	2b01      	cmp	r3, #1
 800a948:	d101      	bne.n	800a94e <HAL_UARTEx_DisableFifoMode+0x16>
 800a94a:	2302      	movs	r3, #2
 800a94c:	e027      	b.n	800a99e <HAL_UARTEx_DisableFifoMode+0x66>
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	2284      	movs	r2, #132	@ 0x84
 800a952:	2101      	movs	r1, #1
 800a954:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	2288      	movs	r2, #136	@ 0x88
 800a95a:	2124      	movs	r1, #36	@ 0x24
 800a95c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	681a      	ldr	r2, [r3, #0]
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	2101      	movs	r1, #1
 800a972:	438a      	bics	r2, r1
 800a974:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	4a0b      	ldr	r2, [pc, #44]	@ (800a9a8 <HAL_UARTEx_DisableFifoMode+0x70>)
 800a97a:	4013      	ands	r3, r2
 800a97c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	2200      	movs	r2, #0
 800a982:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	68fa      	ldr	r2, [r7, #12]
 800a98a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2288      	movs	r2, #136	@ 0x88
 800a990:	2120      	movs	r1, #32
 800a992:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2284      	movs	r2, #132	@ 0x84
 800a998:	2100      	movs	r1, #0
 800a99a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a99c:	2300      	movs	r3, #0
}
 800a99e:	0018      	movs	r0, r3
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	b004      	add	sp, #16
 800a9a4:	bd80      	pop	{r7, pc}
 800a9a6:	46c0      	nop			@ (mov r8, r8)
 800a9a8:	dfffffff 	.word	0xdfffffff

0800a9ac <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b084      	sub	sp, #16
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
 800a9b4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	2284      	movs	r2, #132	@ 0x84
 800a9ba:	5c9b      	ldrb	r3, [r3, r2]
 800a9bc:	2b01      	cmp	r3, #1
 800a9be:	d101      	bne.n	800a9c4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a9c0:	2302      	movs	r3, #2
 800a9c2:	e02e      	b.n	800aa22 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2284      	movs	r2, #132	@ 0x84
 800a9c8:	2101      	movs	r1, #1
 800a9ca:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	2288      	movs	r2, #136	@ 0x88
 800a9d0:	2124      	movs	r1, #36	@ 0x24
 800a9d2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	681a      	ldr	r2, [r3, #0]
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	2101      	movs	r1, #1
 800a9e8:	438a      	bics	r2, r1
 800a9ea:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	689b      	ldr	r3, [r3, #8]
 800a9f2:	00db      	lsls	r3, r3, #3
 800a9f4:	08d9      	lsrs	r1, r3, #3
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	683a      	ldr	r2, [r7, #0]
 800a9fc:	430a      	orrs	r2, r1
 800a9fe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	0018      	movs	r0, r3
 800aa04:	f000 f854 	bl	800aab0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	68fa      	ldr	r2, [r7, #12]
 800aa0e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	2288      	movs	r2, #136	@ 0x88
 800aa14:	2120      	movs	r1, #32
 800aa16:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	2284      	movs	r2, #132	@ 0x84
 800aa1c:	2100      	movs	r1, #0
 800aa1e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800aa20:	2300      	movs	r3, #0
}
 800aa22:	0018      	movs	r0, r3
 800aa24:	46bd      	mov	sp, r7
 800aa26:	b004      	add	sp, #16
 800aa28:	bd80      	pop	{r7, pc}
	...

0800aa2c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b084      	sub	sp, #16
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
 800aa34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	2284      	movs	r2, #132	@ 0x84
 800aa3a:	5c9b      	ldrb	r3, [r3, r2]
 800aa3c:	2b01      	cmp	r3, #1
 800aa3e:	d101      	bne.n	800aa44 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800aa40:	2302      	movs	r3, #2
 800aa42:	e02f      	b.n	800aaa4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2284      	movs	r2, #132	@ 0x84
 800aa48:	2101      	movs	r1, #1
 800aa4a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2288      	movs	r2, #136	@ 0x88
 800aa50:	2124      	movs	r1, #36	@ 0x24
 800aa52:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	681a      	ldr	r2, [r3, #0]
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	2101      	movs	r1, #1
 800aa68:	438a      	bics	r2, r1
 800aa6a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	689b      	ldr	r3, [r3, #8]
 800aa72:	4a0e      	ldr	r2, [pc, #56]	@ (800aaac <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800aa74:	4013      	ands	r3, r2
 800aa76:	0019      	movs	r1, r3
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	683a      	ldr	r2, [r7, #0]
 800aa7e:	430a      	orrs	r2, r1
 800aa80:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	0018      	movs	r0, r3
 800aa86:	f000 f813 	bl	800aab0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	68fa      	ldr	r2, [r7, #12]
 800aa90:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	2288      	movs	r2, #136	@ 0x88
 800aa96:	2120      	movs	r1, #32
 800aa98:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	2284      	movs	r2, #132	@ 0x84
 800aa9e:	2100      	movs	r1, #0
 800aaa0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800aaa2:	2300      	movs	r3, #0
}
 800aaa4:	0018      	movs	r0, r3
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	b004      	add	sp, #16
 800aaaa:	bd80      	pop	{r7, pc}
 800aaac:	f1ffffff 	.word	0xf1ffffff

0800aab0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800aab0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aab2:	b085      	sub	sp, #20
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d108      	bne.n	800aad2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	226a      	movs	r2, #106	@ 0x6a
 800aac4:	2101      	movs	r1, #1
 800aac6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2268      	movs	r2, #104	@ 0x68
 800aacc:	2101      	movs	r1, #1
 800aace:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800aad0:	e043      	b.n	800ab5a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800aad2:	260f      	movs	r6, #15
 800aad4:	19bb      	adds	r3, r7, r6
 800aad6:	2208      	movs	r2, #8
 800aad8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800aada:	200e      	movs	r0, #14
 800aadc:	183b      	adds	r3, r7, r0
 800aade:	2208      	movs	r2, #8
 800aae0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	689b      	ldr	r3, [r3, #8]
 800aae8:	0e5b      	lsrs	r3, r3, #25
 800aaea:	b2da      	uxtb	r2, r3
 800aaec:	240d      	movs	r4, #13
 800aaee:	193b      	adds	r3, r7, r4
 800aaf0:	2107      	movs	r1, #7
 800aaf2:	400a      	ands	r2, r1
 800aaf4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	689b      	ldr	r3, [r3, #8]
 800aafc:	0f5b      	lsrs	r3, r3, #29
 800aafe:	b2da      	uxtb	r2, r3
 800ab00:	250c      	movs	r5, #12
 800ab02:	197b      	adds	r3, r7, r5
 800ab04:	2107      	movs	r1, #7
 800ab06:	400a      	ands	r2, r1
 800ab08:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ab0a:	183b      	adds	r3, r7, r0
 800ab0c:	781b      	ldrb	r3, [r3, #0]
 800ab0e:	197a      	adds	r2, r7, r5
 800ab10:	7812      	ldrb	r2, [r2, #0]
 800ab12:	4914      	ldr	r1, [pc, #80]	@ (800ab64 <UARTEx_SetNbDataToProcess+0xb4>)
 800ab14:	5c8a      	ldrb	r2, [r1, r2]
 800ab16:	435a      	muls	r2, r3
 800ab18:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800ab1a:	197b      	adds	r3, r7, r5
 800ab1c:	781b      	ldrb	r3, [r3, #0]
 800ab1e:	4a12      	ldr	r2, [pc, #72]	@ (800ab68 <UARTEx_SetNbDataToProcess+0xb8>)
 800ab20:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ab22:	0019      	movs	r1, r3
 800ab24:	f7f5 fb8c 	bl	8000240 <__divsi3>
 800ab28:	0003      	movs	r3, r0
 800ab2a:	b299      	uxth	r1, r3
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	226a      	movs	r2, #106	@ 0x6a
 800ab30:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ab32:	19bb      	adds	r3, r7, r6
 800ab34:	781b      	ldrb	r3, [r3, #0]
 800ab36:	193a      	adds	r2, r7, r4
 800ab38:	7812      	ldrb	r2, [r2, #0]
 800ab3a:	490a      	ldr	r1, [pc, #40]	@ (800ab64 <UARTEx_SetNbDataToProcess+0xb4>)
 800ab3c:	5c8a      	ldrb	r2, [r1, r2]
 800ab3e:	435a      	muls	r2, r3
 800ab40:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800ab42:	193b      	adds	r3, r7, r4
 800ab44:	781b      	ldrb	r3, [r3, #0]
 800ab46:	4a08      	ldr	r2, [pc, #32]	@ (800ab68 <UARTEx_SetNbDataToProcess+0xb8>)
 800ab48:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ab4a:	0019      	movs	r1, r3
 800ab4c:	f7f5 fb78 	bl	8000240 <__divsi3>
 800ab50:	0003      	movs	r3, r0
 800ab52:	b299      	uxth	r1, r3
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	2268      	movs	r2, #104	@ 0x68
 800ab58:	5299      	strh	r1, [r3, r2]
}
 800ab5a:	46c0      	nop			@ (mov r8, r8)
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	b005      	add	sp, #20
 800ab60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab62:	46c0      	nop			@ (mov r8, r8)
 800ab64:	0800c1b4 	.word	0x0800c1b4
 800ab68:	0800c1bc 	.word	0x0800c1bc

0800ab6c <_strtol_l.constprop.0>:
 800ab6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab6e:	b085      	sub	sp, #20
 800ab70:	0017      	movs	r7, r2
 800ab72:	001e      	movs	r6, r3
 800ab74:	9003      	str	r0, [sp, #12]
 800ab76:	9101      	str	r1, [sp, #4]
 800ab78:	2b24      	cmp	r3, #36	@ 0x24
 800ab7a:	d844      	bhi.n	800ac06 <_strtol_l.constprop.0+0x9a>
 800ab7c:	000c      	movs	r4, r1
 800ab7e:	2b01      	cmp	r3, #1
 800ab80:	d041      	beq.n	800ac06 <_strtol_l.constprop.0+0x9a>
 800ab82:	4b3d      	ldr	r3, [pc, #244]	@ (800ac78 <_strtol_l.constprop.0+0x10c>)
 800ab84:	2208      	movs	r2, #8
 800ab86:	469c      	mov	ip, r3
 800ab88:	0023      	movs	r3, r4
 800ab8a:	4661      	mov	r1, ip
 800ab8c:	781d      	ldrb	r5, [r3, #0]
 800ab8e:	3401      	adds	r4, #1
 800ab90:	5d48      	ldrb	r0, [r1, r5]
 800ab92:	0001      	movs	r1, r0
 800ab94:	4011      	ands	r1, r2
 800ab96:	4210      	tst	r0, r2
 800ab98:	d1f6      	bne.n	800ab88 <_strtol_l.constprop.0+0x1c>
 800ab9a:	2d2d      	cmp	r5, #45	@ 0x2d
 800ab9c:	d13a      	bne.n	800ac14 <_strtol_l.constprop.0+0xa8>
 800ab9e:	7825      	ldrb	r5, [r4, #0]
 800aba0:	1c9c      	adds	r4, r3, #2
 800aba2:	2301      	movs	r3, #1
 800aba4:	9300      	str	r3, [sp, #0]
 800aba6:	2210      	movs	r2, #16
 800aba8:	0033      	movs	r3, r6
 800abaa:	4393      	bics	r3, r2
 800abac:	d109      	bne.n	800abc2 <_strtol_l.constprop.0+0x56>
 800abae:	2d30      	cmp	r5, #48	@ 0x30
 800abb0:	d136      	bne.n	800ac20 <_strtol_l.constprop.0+0xb4>
 800abb2:	2120      	movs	r1, #32
 800abb4:	7823      	ldrb	r3, [r4, #0]
 800abb6:	438b      	bics	r3, r1
 800abb8:	2b58      	cmp	r3, #88	@ 0x58
 800abba:	d131      	bne.n	800ac20 <_strtol_l.constprop.0+0xb4>
 800abbc:	0016      	movs	r6, r2
 800abbe:	7865      	ldrb	r5, [r4, #1]
 800abc0:	3402      	adds	r4, #2
 800abc2:	4a2e      	ldr	r2, [pc, #184]	@ (800ac7c <_strtol_l.constprop.0+0x110>)
 800abc4:	9b00      	ldr	r3, [sp, #0]
 800abc6:	4694      	mov	ip, r2
 800abc8:	4463      	add	r3, ip
 800abca:	0031      	movs	r1, r6
 800abcc:	0018      	movs	r0, r3
 800abce:	9302      	str	r3, [sp, #8]
 800abd0:	f7f5 fb32 	bl	8000238 <__aeabi_uidivmod>
 800abd4:	2200      	movs	r2, #0
 800abd6:	4684      	mov	ip, r0
 800abd8:	0010      	movs	r0, r2
 800abda:	002b      	movs	r3, r5
 800abdc:	3b30      	subs	r3, #48	@ 0x30
 800abde:	2b09      	cmp	r3, #9
 800abe0:	d825      	bhi.n	800ac2e <_strtol_l.constprop.0+0xc2>
 800abe2:	001d      	movs	r5, r3
 800abe4:	42ae      	cmp	r6, r5
 800abe6:	dd31      	ble.n	800ac4c <_strtol_l.constprop.0+0xe0>
 800abe8:	1c53      	adds	r3, r2, #1
 800abea:	d009      	beq.n	800ac00 <_strtol_l.constprop.0+0x94>
 800abec:	2201      	movs	r2, #1
 800abee:	4252      	negs	r2, r2
 800abf0:	4584      	cmp	ip, r0
 800abf2:	d305      	bcc.n	800ac00 <_strtol_l.constprop.0+0x94>
 800abf4:	d101      	bne.n	800abfa <_strtol_l.constprop.0+0x8e>
 800abf6:	42a9      	cmp	r1, r5
 800abf8:	db25      	blt.n	800ac46 <_strtol_l.constprop.0+0xda>
 800abfa:	2201      	movs	r2, #1
 800abfc:	4370      	muls	r0, r6
 800abfe:	1828      	adds	r0, r5, r0
 800ac00:	7825      	ldrb	r5, [r4, #0]
 800ac02:	3401      	adds	r4, #1
 800ac04:	e7e9      	b.n	800abda <_strtol_l.constprop.0+0x6e>
 800ac06:	f000 f86f 	bl	800ace8 <__errno>
 800ac0a:	2316      	movs	r3, #22
 800ac0c:	6003      	str	r3, [r0, #0]
 800ac0e:	2000      	movs	r0, #0
 800ac10:	b005      	add	sp, #20
 800ac12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac14:	9100      	str	r1, [sp, #0]
 800ac16:	2d2b      	cmp	r5, #43	@ 0x2b
 800ac18:	d1c5      	bne.n	800aba6 <_strtol_l.constprop.0+0x3a>
 800ac1a:	7825      	ldrb	r5, [r4, #0]
 800ac1c:	1c9c      	adds	r4, r3, #2
 800ac1e:	e7c2      	b.n	800aba6 <_strtol_l.constprop.0+0x3a>
 800ac20:	2e00      	cmp	r6, #0
 800ac22:	d1ce      	bne.n	800abc2 <_strtol_l.constprop.0+0x56>
 800ac24:	3608      	adds	r6, #8
 800ac26:	2d30      	cmp	r5, #48	@ 0x30
 800ac28:	d0cb      	beq.n	800abc2 <_strtol_l.constprop.0+0x56>
 800ac2a:	3602      	adds	r6, #2
 800ac2c:	e7c9      	b.n	800abc2 <_strtol_l.constprop.0+0x56>
 800ac2e:	002b      	movs	r3, r5
 800ac30:	3b41      	subs	r3, #65	@ 0x41
 800ac32:	2b19      	cmp	r3, #25
 800ac34:	d801      	bhi.n	800ac3a <_strtol_l.constprop.0+0xce>
 800ac36:	3d37      	subs	r5, #55	@ 0x37
 800ac38:	e7d4      	b.n	800abe4 <_strtol_l.constprop.0+0x78>
 800ac3a:	002b      	movs	r3, r5
 800ac3c:	3b61      	subs	r3, #97	@ 0x61
 800ac3e:	2b19      	cmp	r3, #25
 800ac40:	d804      	bhi.n	800ac4c <_strtol_l.constprop.0+0xe0>
 800ac42:	3d57      	subs	r5, #87	@ 0x57
 800ac44:	e7ce      	b.n	800abe4 <_strtol_l.constprop.0+0x78>
 800ac46:	2201      	movs	r2, #1
 800ac48:	4252      	negs	r2, r2
 800ac4a:	e7d9      	b.n	800ac00 <_strtol_l.constprop.0+0x94>
 800ac4c:	1c53      	adds	r3, r2, #1
 800ac4e:	d108      	bne.n	800ac62 <_strtol_l.constprop.0+0xf6>
 800ac50:	2322      	movs	r3, #34	@ 0x22
 800ac52:	9a03      	ldr	r2, [sp, #12]
 800ac54:	9802      	ldr	r0, [sp, #8]
 800ac56:	6013      	str	r3, [r2, #0]
 800ac58:	2f00      	cmp	r7, #0
 800ac5a:	d0d9      	beq.n	800ac10 <_strtol_l.constprop.0+0xa4>
 800ac5c:	1e63      	subs	r3, r4, #1
 800ac5e:	9301      	str	r3, [sp, #4]
 800ac60:	e007      	b.n	800ac72 <_strtol_l.constprop.0+0x106>
 800ac62:	9b00      	ldr	r3, [sp, #0]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d000      	beq.n	800ac6a <_strtol_l.constprop.0+0xfe>
 800ac68:	4240      	negs	r0, r0
 800ac6a:	2f00      	cmp	r7, #0
 800ac6c:	d0d0      	beq.n	800ac10 <_strtol_l.constprop.0+0xa4>
 800ac6e:	2a00      	cmp	r2, #0
 800ac70:	d1f4      	bne.n	800ac5c <_strtol_l.constprop.0+0xf0>
 800ac72:	9b01      	ldr	r3, [sp, #4]
 800ac74:	603b      	str	r3, [r7, #0]
 800ac76:	e7cb      	b.n	800ac10 <_strtol_l.constprop.0+0xa4>
 800ac78:	0800c1c5 	.word	0x0800c1c5
 800ac7c:	7fffffff 	.word	0x7fffffff

0800ac80 <strtol>:
 800ac80:	b510      	push	{r4, lr}
 800ac82:	4c04      	ldr	r4, [pc, #16]	@ (800ac94 <strtol+0x14>)
 800ac84:	0013      	movs	r3, r2
 800ac86:	000a      	movs	r2, r1
 800ac88:	0001      	movs	r1, r0
 800ac8a:	6820      	ldr	r0, [r4, #0]
 800ac8c:	f7ff ff6e 	bl	800ab6c <_strtol_l.constprop.0>
 800ac90:	bd10      	pop	{r4, pc}
 800ac92:	46c0      	nop			@ (mov r8, r8)
 800ac94:	20000e90 	.word	0x20000e90

0800ac98 <siprintf>:
 800ac98:	b40e      	push	{r1, r2, r3}
 800ac9a:	b500      	push	{lr}
 800ac9c:	490b      	ldr	r1, [pc, #44]	@ (800accc <siprintf+0x34>)
 800ac9e:	b09c      	sub	sp, #112	@ 0x70
 800aca0:	ab1d      	add	r3, sp, #116	@ 0x74
 800aca2:	9002      	str	r0, [sp, #8]
 800aca4:	9006      	str	r0, [sp, #24]
 800aca6:	9107      	str	r1, [sp, #28]
 800aca8:	9104      	str	r1, [sp, #16]
 800acaa:	4809      	ldr	r0, [pc, #36]	@ (800acd0 <siprintf+0x38>)
 800acac:	4909      	ldr	r1, [pc, #36]	@ (800acd4 <siprintf+0x3c>)
 800acae:	cb04      	ldmia	r3!, {r2}
 800acb0:	9105      	str	r1, [sp, #20]
 800acb2:	6800      	ldr	r0, [r0, #0]
 800acb4:	a902      	add	r1, sp, #8
 800acb6:	9301      	str	r3, [sp, #4]
 800acb8:	f000 f9a8 	bl	800b00c <_svfiprintf_r>
 800acbc:	2200      	movs	r2, #0
 800acbe:	9b02      	ldr	r3, [sp, #8]
 800acc0:	701a      	strb	r2, [r3, #0]
 800acc2:	b01c      	add	sp, #112	@ 0x70
 800acc4:	bc08      	pop	{r3}
 800acc6:	b003      	add	sp, #12
 800acc8:	4718      	bx	r3
 800acca:	46c0      	nop			@ (mov r8, r8)
 800accc:	7fffffff 	.word	0x7fffffff
 800acd0:	20000e90 	.word	0x20000e90
 800acd4:	ffff0208 	.word	0xffff0208

0800acd8 <memset>:
 800acd8:	0003      	movs	r3, r0
 800acda:	1882      	adds	r2, r0, r2
 800acdc:	4293      	cmp	r3, r2
 800acde:	d100      	bne.n	800ace2 <memset+0xa>
 800ace0:	4770      	bx	lr
 800ace2:	7019      	strb	r1, [r3, #0]
 800ace4:	3301      	adds	r3, #1
 800ace6:	e7f9      	b.n	800acdc <memset+0x4>

0800ace8 <__errno>:
 800ace8:	4b01      	ldr	r3, [pc, #4]	@ (800acf0 <__errno+0x8>)
 800acea:	6818      	ldr	r0, [r3, #0]
 800acec:	4770      	bx	lr
 800acee:	46c0      	nop			@ (mov r8, r8)
 800acf0:	20000e90 	.word	0x20000e90

0800acf4 <__libc_init_array>:
 800acf4:	b570      	push	{r4, r5, r6, lr}
 800acf6:	2600      	movs	r6, #0
 800acf8:	4c0c      	ldr	r4, [pc, #48]	@ (800ad2c <__libc_init_array+0x38>)
 800acfa:	4d0d      	ldr	r5, [pc, #52]	@ (800ad30 <__libc_init_array+0x3c>)
 800acfc:	1b64      	subs	r4, r4, r5
 800acfe:	10a4      	asrs	r4, r4, #2
 800ad00:	42a6      	cmp	r6, r4
 800ad02:	d109      	bne.n	800ad18 <__libc_init_array+0x24>
 800ad04:	2600      	movs	r6, #0
 800ad06:	f000 fd73 	bl	800b7f0 <_init>
 800ad0a:	4c0a      	ldr	r4, [pc, #40]	@ (800ad34 <__libc_init_array+0x40>)
 800ad0c:	4d0a      	ldr	r5, [pc, #40]	@ (800ad38 <__libc_init_array+0x44>)
 800ad0e:	1b64      	subs	r4, r4, r5
 800ad10:	10a4      	asrs	r4, r4, #2
 800ad12:	42a6      	cmp	r6, r4
 800ad14:	d105      	bne.n	800ad22 <__libc_init_array+0x2e>
 800ad16:	bd70      	pop	{r4, r5, r6, pc}
 800ad18:	00b3      	lsls	r3, r6, #2
 800ad1a:	58eb      	ldr	r3, [r5, r3]
 800ad1c:	4798      	blx	r3
 800ad1e:	3601      	adds	r6, #1
 800ad20:	e7ee      	b.n	800ad00 <__libc_init_array+0xc>
 800ad22:	00b3      	lsls	r3, r6, #2
 800ad24:	58eb      	ldr	r3, [r5, r3]
 800ad26:	4798      	blx	r3
 800ad28:	3601      	adds	r6, #1
 800ad2a:	e7f2      	b.n	800ad12 <__libc_init_array+0x1e>
 800ad2c:	0800c300 	.word	0x0800c300
 800ad30:	0800c300 	.word	0x0800c300
 800ad34:	0800c304 	.word	0x0800c304
 800ad38:	0800c300 	.word	0x0800c300

0800ad3c <__retarget_lock_acquire_recursive>:
 800ad3c:	4770      	bx	lr

0800ad3e <__retarget_lock_release_recursive>:
 800ad3e:	4770      	bx	lr

0800ad40 <memcpy>:
 800ad40:	2300      	movs	r3, #0
 800ad42:	b510      	push	{r4, lr}
 800ad44:	429a      	cmp	r2, r3
 800ad46:	d100      	bne.n	800ad4a <memcpy+0xa>
 800ad48:	bd10      	pop	{r4, pc}
 800ad4a:	5ccc      	ldrb	r4, [r1, r3]
 800ad4c:	54c4      	strb	r4, [r0, r3]
 800ad4e:	3301      	adds	r3, #1
 800ad50:	e7f8      	b.n	800ad44 <memcpy+0x4>
	...

0800ad54 <_free_r>:
 800ad54:	b570      	push	{r4, r5, r6, lr}
 800ad56:	0005      	movs	r5, r0
 800ad58:	1e0c      	subs	r4, r1, #0
 800ad5a:	d010      	beq.n	800ad7e <_free_r+0x2a>
 800ad5c:	3c04      	subs	r4, #4
 800ad5e:	6823      	ldr	r3, [r4, #0]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	da00      	bge.n	800ad66 <_free_r+0x12>
 800ad64:	18e4      	adds	r4, r4, r3
 800ad66:	0028      	movs	r0, r5
 800ad68:	f000 f8e0 	bl	800af2c <__malloc_lock>
 800ad6c:	4a1d      	ldr	r2, [pc, #116]	@ (800ade4 <_free_r+0x90>)
 800ad6e:	6813      	ldr	r3, [r2, #0]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d105      	bne.n	800ad80 <_free_r+0x2c>
 800ad74:	6063      	str	r3, [r4, #4]
 800ad76:	6014      	str	r4, [r2, #0]
 800ad78:	0028      	movs	r0, r5
 800ad7a:	f000 f8df 	bl	800af3c <__malloc_unlock>
 800ad7e:	bd70      	pop	{r4, r5, r6, pc}
 800ad80:	42a3      	cmp	r3, r4
 800ad82:	d908      	bls.n	800ad96 <_free_r+0x42>
 800ad84:	6820      	ldr	r0, [r4, #0]
 800ad86:	1821      	adds	r1, r4, r0
 800ad88:	428b      	cmp	r3, r1
 800ad8a:	d1f3      	bne.n	800ad74 <_free_r+0x20>
 800ad8c:	6819      	ldr	r1, [r3, #0]
 800ad8e:	685b      	ldr	r3, [r3, #4]
 800ad90:	1809      	adds	r1, r1, r0
 800ad92:	6021      	str	r1, [r4, #0]
 800ad94:	e7ee      	b.n	800ad74 <_free_r+0x20>
 800ad96:	001a      	movs	r2, r3
 800ad98:	685b      	ldr	r3, [r3, #4]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d001      	beq.n	800ada2 <_free_r+0x4e>
 800ad9e:	42a3      	cmp	r3, r4
 800ada0:	d9f9      	bls.n	800ad96 <_free_r+0x42>
 800ada2:	6811      	ldr	r1, [r2, #0]
 800ada4:	1850      	adds	r0, r2, r1
 800ada6:	42a0      	cmp	r0, r4
 800ada8:	d10b      	bne.n	800adc2 <_free_r+0x6e>
 800adaa:	6820      	ldr	r0, [r4, #0]
 800adac:	1809      	adds	r1, r1, r0
 800adae:	1850      	adds	r0, r2, r1
 800adb0:	6011      	str	r1, [r2, #0]
 800adb2:	4283      	cmp	r3, r0
 800adb4:	d1e0      	bne.n	800ad78 <_free_r+0x24>
 800adb6:	6818      	ldr	r0, [r3, #0]
 800adb8:	685b      	ldr	r3, [r3, #4]
 800adba:	1841      	adds	r1, r0, r1
 800adbc:	6011      	str	r1, [r2, #0]
 800adbe:	6053      	str	r3, [r2, #4]
 800adc0:	e7da      	b.n	800ad78 <_free_r+0x24>
 800adc2:	42a0      	cmp	r0, r4
 800adc4:	d902      	bls.n	800adcc <_free_r+0x78>
 800adc6:	230c      	movs	r3, #12
 800adc8:	602b      	str	r3, [r5, #0]
 800adca:	e7d5      	b.n	800ad78 <_free_r+0x24>
 800adcc:	6820      	ldr	r0, [r4, #0]
 800adce:	1821      	adds	r1, r4, r0
 800add0:	428b      	cmp	r3, r1
 800add2:	d103      	bne.n	800addc <_free_r+0x88>
 800add4:	6819      	ldr	r1, [r3, #0]
 800add6:	685b      	ldr	r3, [r3, #4]
 800add8:	1809      	adds	r1, r1, r0
 800adda:	6021      	str	r1, [r4, #0]
 800addc:	6063      	str	r3, [r4, #4]
 800adde:	6054      	str	r4, [r2, #4]
 800ade0:	e7ca      	b.n	800ad78 <_free_r+0x24>
 800ade2:	46c0      	nop			@ (mov r8, r8)
 800ade4:	200015d0 	.word	0x200015d0

0800ade8 <sbrk_aligned>:
 800ade8:	b570      	push	{r4, r5, r6, lr}
 800adea:	4e0f      	ldr	r6, [pc, #60]	@ (800ae28 <sbrk_aligned+0x40>)
 800adec:	000d      	movs	r5, r1
 800adee:	6831      	ldr	r1, [r6, #0]
 800adf0:	0004      	movs	r4, r0
 800adf2:	2900      	cmp	r1, #0
 800adf4:	d102      	bne.n	800adfc <sbrk_aligned+0x14>
 800adf6:	f000 fb99 	bl	800b52c <_sbrk_r>
 800adfa:	6030      	str	r0, [r6, #0]
 800adfc:	0029      	movs	r1, r5
 800adfe:	0020      	movs	r0, r4
 800ae00:	f000 fb94 	bl	800b52c <_sbrk_r>
 800ae04:	1c43      	adds	r3, r0, #1
 800ae06:	d103      	bne.n	800ae10 <sbrk_aligned+0x28>
 800ae08:	2501      	movs	r5, #1
 800ae0a:	426d      	negs	r5, r5
 800ae0c:	0028      	movs	r0, r5
 800ae0e:	bd70      	pop	{r4, r5, r6, pc}
 800ae10:	2303      	movs	r3, #3
 800ae12:	1cc5      	adds	r5, r0, #3
 800ae14:	439d      	bics	r5, r3
 800ae16:	42a8      	cmp	r0, r5
 800ae18:	d0f8      	beq.n	800ae0c <sbrk_aligned+0x24>
 800ae1a:	1a29      	subs	r1, r5, r0
 800ae1c:	0020      	movs	r0, r4
 800ae1e:	f000 fb85 	bl	800b52c <_sbrk_r>
 800ae22:	3001      	adds	r0, #1
 800ae24:	d1f2      	bne.n	800ae0c <sbrk_aligned+0x24>
 800ae26:	e7ef      	b.n	800ae08 <sbrk_aligned+0x20>
 800ae28:	200015cc 	.word	0x200015cc

0800ae2c <_malloc_r>:
 800ae2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ae2e:	2203      	movs	r2, #3
 800ae30:	1ccb      	adds	r3, r1, #3
 800ae32:	4393      	bics	r3, r2
 800ae34:	3308      	adds	r3, #8
 800ae36:	0005      	movs	r5, r0
 800ae38:	001f      	movs	r7, r3
 800ae3a:	2b0c      	cmp	r3, #12
 800ae3c:	d234      	bcs.n	800aea8 <_malloc_r+0x7c>
 800ae3e:	270c      	movs	r7, #12
 800ae40:	42b9      	cmp	r1, r7
 800ae42:	d833      	bhi.n	800aeac <_malloc_r+0x80>
 800ae44:	0028      	movs	r0, r5
 800ae46:	f000 f871 	bl	800af2c <__malloc_lock>
 800ae4a:	4e37      	ldr	r6, [pc, #220]	@ (800af28 <_malloc_r+0xfc>)
 800ae4c:	6833      	ldr	r3, [r6, #0]
 800ae4e:	001c      	movs	r4, r3
 800ae50:	2c00      	cmp	r4, #0
 800ae52:	d12f      	bne.n	800aeb4 <_malloc_r+0x88>
 800ae54:	0039      	movs	r1, r7
 800ae56:	0028      	movs	r0, r5
 800ae58:	f7ff ffc6 	bl	800ade8 <sbrk_aligned>
 800ae5c:	0004      	movs	r4, r0
 800ae5e:	1c43      	adds	r3, r0, #1
 800ae60:	d15f      	bne.n	800af22 <_malloc_r+0xf6>
 800ae62:	6834      	ldr	r4, [r6, #0]
 800ae64:	9400      	str	r4, [sp, #0]
 800ae66:	9b00      	ldr	r3, [sp, #0]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d14a      	bne.n	800af02 <_malloc_r+0xd6>
 800ae6c:	2c00      	cmp	r4, #0
 800ae6e:	d052      	beq.n	800af16 <_malloc_r+0xea>
 800ae70:	6823      	ldr	r3, [r4, #0]
 800ae72:	0028      	movs	r0, r5
 800ae74:	18e3      	adds	r3, r4, r3
 800ae76:	9900      	ldr	r1, [sp, #0]
 800ae78:	9301      	str	r3, [sp, #4]
 800ae7a:	f000 fb57 	bl	800b52c <_sbrk_r>
 800ae7e:	9b01      	ldr	r3, [sp, #4]
 800ae80:	4283      	cmp	r3, r0
 800ae82:	d148      	bne.n	800af16 <_malloc_r+0xea>
 800ae84:	6823      	ldr	r3, [r4, #0]
 800ae86:	0028      	movs	r0, r5
 800ae88:	1aff      	subs	r7, r7, r3
 800ae8a:	0039      	movs	r1, r7
 800ae8c:	f7ff ffac 	bl	800ade8 <sbrk_aligned>
 800ae90:	3001      	adds	r0, #1
 800ae92:	d040      	beq.n	800af16 <_malloc_r+0xea>
 800ae94:	6823      	ldr	r3, [r4, #0]
 800ae96:	19db      	adds	r3, r3, r7
 800ae98:	6023      	str	r3, [r4, #0]
 800ae9a:	6833      	ldr	r3, [r6, #0]
 800ae9c:	685a      	ldr	r2, [r3, #4]
 800ae9e:	2a00      	cmp	r2, #0
 800aea0:	d133      	bne.n	800af0a <_malloc_r+0xde>
 800aea2:	9b00      	ldr	r3, [sp, #0]
 800aea4:	6033      	str	r3, [r6, #0]
 800aea6:	e019      	b.n	800aedc <_malloc_r+0xb0>
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	dac9      	bge.n	800ae40 <_malloc_r+0x14>
 800aeac:	230c      	movs	r3, #12
 800aeae:	602b      	str	r3, [r5, #0]
 800aeb0:	2000      	movs	r0, #0
 800aeb2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800aeb4:	6821      	ldr	r1, [r4, #0]
 800aeb6:	1bc9      	subs	r1, r1, r7
 800aeb8:	d420      	bmi.n	800aefc <_malloc_r+0xd0>
 800aeba:	290b      	cmp	r1, #11
 800aebc:	d90a      	bls.n	800aed4 <_malloc_r+0xa8>
 800aebe:	19e2      	adds	r2, r4, r7
 800aec0:	6027      	str	r7, [r4, #0]
 800aec2:	42a3      	cmp	r3, r4
 800aec4:	d104      	bne.n	800aed0 <_malloc_r+0xa4>
 800aec6:	6032      	str	r2, [r6, #0]
 800aec8:	6863      	ldr	r3, [r4, #4]
 800aeca:	6011      	str	r1, [r2, #0]
 800aecc:	6053      	str	r3, [r2, #4]
 800aece:	e005      	b.n	800aedc <_malloc_r+0xb0>
 800aed0:	605a      	str	r2, [r3, #4]
 800aed2:	e7f9      	b.n	800aec8 <_malloc_r+0x9c>
 800aed4:	6862      	ldr	r2, [r4, #4]
 800aed6:	42a3      	cmp	r3, r4
 800aed8:	d10e      	bne.n	800aef8 <_malloc_r+0xcc>
 800aeda:	6032      	str	r2, [r6, #0]
 800aedc:	0028      	movs	r0, r5
 800aede:	f000 f82d 	bl	800af3c <__malloc_unlock>
 800aee2:	0020      	movs	r0, r4
 800aee4:	2207      	movs	r2, #7
 800aee6:	300b      	adds	r0, #11
 800aee8:	1d23      	adds	r3, r4, #4
 800aeea:	4390      	bics	r0, r2
 800aeec:	1ac2      	subs	r2, r0, r3
 800aeee:	4298      	cmp	r0, r3
 800aef0:	d0df      	beq.n	800aeb2 <_malloc_r+0x86>
 800aef2:	1a1b      	subs	r3, r3, r0
 800aef4:	50a3      	str	r3, [r4, r2]
 800aef6:	e7dc      	b.n	800aeb2 <_malloc_r+0x86>
 800aef8:	605a      	str	r2, [r3, #4]
 800aefa:	e7ef      	b.n	800aedc <_malloc_r+0xb0>
 800aefc:	0023      	movs	r3, r4
 800aefe:	6864      	ldr	r4, [r4, #4]
 800af00:	e7a6      	b.n	800ae50 <_malloc_r+0x24>
 800af02:	9c00      	ldr	r4, [sp, #0]
 800af04:	6863      	ldr	r3, [r4, #4]
 800af06:	9300      	str	r3, [sp, #0]
 800af08:	e7ad      	b.n	800ae66 <_malloc_r+0x3a>
 800af0a:	001a      	movs	r2, r3
 800af0c:	685b      	ldr	r3, [r3, #4]
 800af0e:	42a3      	cmp	r3, r4
 800af10:	d1fb      	bne.n	800af0a <_malloc_r+0xde>
 800af12:	2300      	movs	r3, #0
 800af14:	e7da      	b.n	800aecc <_malloc_r+0xa0>
 800af16:	230c      	movs	r3, #12
 800af18:	0028      	movs	r0, r5
 800af1a:	602b      	str	r3, [r5, #0]
 800af1c:	f000 f80e 	bl	800af3c <__malloc_unlock>
 800af20:	e7c6      	b.n	800aeb0 <_malloc_r+0x84>
 800af22:	6007      	str	r7, [r0, #0]
 800af24:	e7da      	b.n	800aedc <_malloc_r+0xb0>
 800af26:	46c0      	nop			@ (mov r8, r8)
 800af28:	200015d0 	.word	0x200015d0

0800af2c <__malloc_lock>:
 800af2c:	b510      	push	{r4, lr}
 800af2e:	4802      	ldr	r0, [pc, #8]	@ (800af38 <__malloc_lock+0xc>)
 800af30:	f7ff ff04 	bl	800ad3c <__retarget_lock_acquire_recursive>
 800af34:	bd10      	pop	{r4, pc}
 800af36:	46c0      	nop			@ (mov r8, r8)
 800af38:	200015c8 	.word	0x200015c8

0800af3c <__malloc_unlock>:
 800af3c:	b510      	push	{r4, lr}
 800af3e:	4802      	ldr	r0, [pc, #8]	@ (800af48 <__malloc_unlock+0xc>)
 800af40:	f7ff fefd 	bl	800ad3e <__retarget_lock_release_recursive>
 800af44:	bd10      	pop	{r4, pc}
 800af46:	46c0      	nop			@ (mov r8, r8)
 800af48:	200015c8 	.word	0x200015c8

0800af4c <__ssputs_r>:
 800af4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af4e:	688e      	ldr	r6, [r1, #8]
 800af50:	b085      	sub	sp, #20
 800af52:	001f      	movs	r7, r3
 800af54:	000c      	movs	r4, r1
 800af56:	680b      	ldr	r3, [r1, #0]
 800af58:	9002      	str	r0, [sp, #8]
 800af5a:	9203      	str	r2, [sp, #12]
 800af5c:	42be      	cmp	r6, r7
 800af5e:	d830      	bhi.n	800afc2 <__ssputs_r+0x76>
 800af60:	210c      	movs	r1, #12
 800af62:	5e62      	ldrsh	r2, [r4, r1]
 800af64:	2190      	movs	r1, #144	@ 0x90
 800af66:	00c9      	lsls	r1, r1, #3
 800af68:	420a      	tst	r2, r1
 800af6a:	d028      	beq.n	800afbe <__ssputs_r+0x72>
 800af6c:	2003      	movs	r0, #3
 800af6e:	6921      	ldr	r1, [r4, #16]
 800af70:	1a5b      	subs	r3, r3, r1
 800af72:	9301      	str	r3, [sp, #4]
 800af74:	6963      	ldr	r3, [r4, #20]
 800af76:	4343      	muls	r3, r0
 800af78:	9801      	ldr	r0, [sp, #4]
 800af7a:	0fdd      	lsrs	r5, r3, #31
 800af7c:	18ed      	adds	r5, r5, r3
 800af7e:	1c7b      	adds	r3, r7, #1
 800af80:	181b      	adds	r3, r3, r0
 800af82:	106d      	asrs	r5, r5, #1
 800af84:	42ab      	cmp	r3, r5
 800af86:	d900      	bls.n	800af8a <__ssputs_r+0x3e>
 800af88:	001d      	movs	r5, r3
 800af8a:	0552      	lsls	r2, r2, #21
 800af8c:	d528      	bpl.n	800afe0 <__ssputs_r+0x94>
 800af8e:	0029      	movs	r1, r5
 800af90:	9802      	ldr	r0, [sp, #8]
 800af92:	f7ff ff4b 	bl	800ae2c <_malloc_r>
 800af96:	1e06      	subs	r6, r0, #0
 800af98:	d02c      	beq.n	800aff4 <__ssputs_r+0xa8>
 800af9a:	9a01      	ldr	r2, [sp, #4]
 800af9c:	6921      	ldr	r1, [r4, #16]
 800af9e:	f7ff fecf 	bl	800ad40 <memcpy>
 800afa2:	89a2      	ldrh	r2, [r4, #12]
 800afa4:	4b18      	ldr	r3, [pc, #96]	@ (800b008 <__ssputs_r+0xbc>)
 800afa6:	401a      	ands	r2, r3
 800afa8:	2380      	movs	r3, #128	@ 0x80
 800afaa:	4313      	orrs	r3, r2
 800afac:	81a3      	strh	r3, [r4, #12]
 800afae:	9b01      	ldr	r3, [sp, #4]
 800afb0:	6126      	str	r6, [r4, #16]
 800afb2:	18f6      	adds	r6, r6, r3
 800afb4:	6026      	str	r6, [r4, #0]
 800afb6:	003e      	movs	r6, r7
 800afb8:	6165      	str	r5, [r4, #20]
 800afba:	1aed      	subs	r5, r5, r3
 800afbc:	60a5      	str	r5, [r4, #8]
 800afbe:	42be      	cmp	r6, r7
 800afc0:	d900      	bls.n	800afc4 <__ssputs_r+0x78>
 800afc2:	003e      	movs	r6, r7
 800afc4:	0032      	movs	r2, r6
 800afc6:	9903      	ldr	r1, [sp, #12]
 800afc8:	6820      	ldr	r0, [r4, #0]
 800afca:	f000 fa9b 	bl	800b504 <memmove>
 800afce:	2000      	movs	r0, #0
 800afd0:	68a3      	ldr	r3, [r4, #8]
 800afd2:	1b9b      	subs	r3, r3, r6
 800afd4:	60a3      	str	r3, [r4, #8]
 800afd6:	6823      	ldr	r3, [r4, #0]
 800afd8:	199b      	adds	r3, r3, r6
 800afda:	6023      	str	r3, [r4, #0]
 800afdc:	b005      	add	sp, #20
 800afde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800afe0:	002a      	movs	r2, r5
 800afe2:	9802      	ldr	r0, [sp, #8]
 800afe4:	f000 fabf 	bl	800b566 <_realloc_r>
 800afe8:	1e06      	subs	r6, r0, #0
 800afea:	d1e0      	bne.n	800afae <__ssputs_r+0x62>
 800afec:	6921      	ldr	r1, [r4, #16]
 800afee:	9802      	ldr	r0, [sp, #8]
 800aff0:	f7ff feb0 	bl	800ad54 <_free_r>
 800aff4:	230c      	movs	r3, #12
 800aff6:	2001      	movs	r0, #1
 800aff8:	9a02      	ldr	r2, [sp, #8]
 800affa:	4240      	negs	r0, r0
 800affc:	6013      	str	r3, [r2, #0]
 800affe:	89a2      	ldrh	r2, [r4, #12]
 800b000:	3334      	adds	r3, #52	@ 0x34
 800b002:	4313      	orrs	r3, r2
 800b004:	81a3      	strh	r3, [r4, #12]
 800b006:	e7e9      	b.n	800afdc <__ssputs_r+0x90>
 800b008:	fffffb7f 	.word	0xfffffb7f

0800b00c <_svfiprintf_r>:
 800b00c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b00e:	b0a1      	sub	sp, #132	@ 0x84
 800b010:	9003      	str	r0, [sp, #12]
 800b012:	001d      	movs	r5, r3
 800b014:	898b      	ldrh	r3, [r1, #12]
 800b016:	000f      	movs	r7, r1
 800b018:	0016      	movs	r6, r2
 800b01a:	061b      	lsls	r3, r3, #24
 800b01c:	d511      	bpl.n	800b042 <_svfiprintf_r+0x36>
 800b01e:	690b      	ldr	r3, [r1, #16]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d10e      	bne.n	800b042 <_svfiprintf_r+0x36>
 800b024:	2140      	movs	r1, #64	@ 0x40
 800b026:	f7ff ff01 	bl	800ae2c <_malloc_r>
 800b02a:	6038      	str	r0, [r7, #0]
 800b02c:	6138      	str	r0, [r7, #16]
 800b02e:	2800      	cmp	r0, #0
 800b030:	d105      	bne.n	800b03e <_svfiprintf_r+0x32>
 800b032:	230c      	movs	r3, #12
 800b034:	9a03      	ldr	r2, [sp, #12]
 800b036:	6013      	str	r3, [r2, #0]
 800b038:	2001      	movs	r0, #1
 800b03a:	4240      	negs	r0, r0
 800b03c:	e0cf      	b.n	800b1de <_svfiprintf_r+0x1d2>
 800b03e:	2340      	movs	r3, #64	@ 0x40
 800b040:	617b      	str	r3, [r7, #20]
 800b042:	2300      	movs	r3, #0
 800b044:	ac08      	add	r4, sp, #32
 800b046:	6163      	str	r3, [r4, #20]
 800b048:	3320      	adds	r3, #32
 800b04a:	7663      	strb	r3, [r4, #25]
 800b04c:	3310      	adds	r3, #16
 800b04e:	76a3      	strb	r3, [r4, #26]
 800b050:	9507      	str	r5, [sp, #28]
 800b052:	0035      	movs	r5, r6
 800b054:	782b      	ldrb	r3, [r5, #0]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d001      	beq.n	800b05e <_svfiprintf_r+0x52>
 800b05a:	2b25      	cmp	r3, #37	@ 0x25
 800b05c:	d148      	bne.n	800b0f0 <_svfiprintf_r+0xe4>
 800b05e:	1bab      	subs	r3, r5, r6
 800b060:	9305      	str	r3, [sp, #20]
 800b062:	42b5      	cmp	r5, r6
 800b064:	d00b      	beq.n	800b07e <_svfiprintf_r+0x72>
 800b066:	0032      	movs	r2, r6
 800b068:	0039      	movs	r1, r7
 800b06a:	9803      	ldr	r0, [sp, #12]
 800b06c:	f7ff ff6e 	bl	800af4c <__ssputs_r>
 800b070:	3001      	adds	r0, #1
 800b072:	d100      	bne.n	800b076 <_svfiprintf_r+0x6a>
 800b074:	e0ae      	b.n	800b1d4 <_svfiprintf_r+0x1c8>
 800b076:	6963      	ldr	r3, [r4, #20]
 800b078:	9a05      	ldr	r2, [sp, #20]
 800b07a:	189b      	adds	r3, r3, r2
 800b07c:	6163      	str	r3, [r4, #20]
 800b07e:	782b      	ldrb	r3, [r5, #0]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d100      	bne.n	800b086 <_svfiprintf_r+0x7a>
 800b084:	e0a6      	b.n	800b1d4 <_svfiprintf_r+0x1c8>
 800b086:	2201      	movs	r2, #1
 800b088:	2300      	movs	r3, #0
 800b08a:	4252      	negs	r2, r2
 800b08c:	6062      	str	r2, [r4, #4]
 800b08e:	a904      	add	r1, sp, #16
 800b090:	3254      	adds	r2, #84	@ 0x54
 800b092:	1852      	adds	r2, r2, r1
 800b094:	1c6e      	adds	r6, r5, #1
 800b096:	6023      	str	r3, [r4, #0]
 800b098:	60e3      	str	r3, [r4, #12]
 800b09a:	60a3      	str	r3, [r4, #8]
 800b09c:	7013      	strb	r3, [r2, #0]
 800b09e:	65a3      	str	r3, [r4, #88]	@ 0x58
 800b0a0:	4b54      	ldr	r3, [pc, #336]	@ (800b1f4 <_svfiprintf_r+0x1e8>)
 800b0a2:	2205      	movs	r2, #5
 800b0a4:	0018      	movs	r0, r3
 800b0a6:	7831      	ldrb	r1, [r6, #0]
 800b0a8:	9305      	str	r3, [sp, #20]
 800b0aa:	f000 fa51 	bl	800b550 <memchr>
 800b0ae:	1c75      	adds	r5, r6, #1
 800b0b0:	2800      	cmp	r0, #0
 800b0b2:	d11f      	bne.n	800b0f4 <_svfiprintf_r+0xe8>
 800b0b4:	6822      	ldr	r2, [r4, #0]
 800b0b6:	06d3      	lsls	r3, r2, #27
 800b0b8:	d504      	bpl.n	800b0c4 <_svfiprintf_r+0xb8>
 800b0ba:	2353      	movs	r3, #83	@ 0x53
 800b0bc:	a904      	add	r1, sp, #16
 800b0be:	185b      	adds	r3, r3, r1
 800b0c0:	2120      	movs	r1, #32
 800b0c2:	7019      	strb	r1, [r3, #0]
 800b0c4:	0713      	lsls	r3, r2, #28
 800b0c6:	d504      	bpl.n	800b0d2 <_svfiprintf_r+0xc6>
 800b0c8:	2353      	movs	r3, #83	@ 0x53
 800b0ca:	a904      	add	r1, sp, #16
 800b0cc:	185b      	adds	r3, r3, r1
 800b0ce:	212b      	movs	r1, #43	@ 0x2b
 800b0d0:	7019      	strb	r1, [r3, #0]
 800b0d2:	7833      	ldrb	r3, [r6, #0]
 800b0d4:	2b2a      	cmp	r3, #42	@ 0x2a
 800b0d6:	d016      	beq.n	800b106 <_svfiprintf_r+0xfa>
 800b0d8:	0035      	movs	r5, r6
 800b0da:	2100      	movs	r1, #0
 800b0dc:	200a      	movs	r0, #10
 800b0de:	68e3      	ldr	r3, [r4, #12]
 800b0e0:	782a      	ldrb	r2, [r5, #0]
 800b0e2:	1c6e      	adds	r6, r5, #1
 800b0e4:	3a30      	subs	r2, #48	@ 0x30
 800b0e6:	2a09      	cmp	r2, #9
 800b0e8:	d950      	bls.n	800b18c <_svfiprintf_r+0x180>
 800b0ea:	2900      	cmp	r1, #0
 800b0ec:	d111      	bne.n	800b112 <_svfiprintf_r+0x106>
 800b0ee:	e017      	b.n	800b120 <_svfiprintf_r+0x114>
 800b0f0:	3501      	adds	r5, #1
 800b0f2:	e7af      	b.n	800b054 <_svfiprintf_r+0x48>
 800b0f4:	9b05      	ldr	r3, [sp, #20]
 800b0f6:	6822      	ldr	r2, [r4, #0]
 800b0f8:	1ac0      	subs	r0, r0, r3
 800b0fa:	2301      	movs	r3, #1
 800b0fc:	4083      	lsls	r3, r0
 800b0fe:	4313      	orrs	r3, r2
 800b100:	002e      	movs	r6, r5
 800b102:	6023      	str	r3, [r4, #0]
 800b104:	e7cc      	b.n	800b0a0 <_svfiprintf_r+0x94>
 800b106:	9b07      	ldr	r3, [sp, #28]
 800b108:	1d19      	adds	r1, r3, #4
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	9107      	str	r1, [sp, #28]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	db01      	blt.n	800b116 <_svfiprintf_r+0x10a>
 800b112:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b114:	e004      	b.n	800b120 <_svfiprintf_r+0x114>
 800b116:	425b      	negs	r3, r3
 800b118:	60e3      	str	r3, [r4, #12]
 800b11a:	2302      	movs	r3, #2
 800b11c:	4313      	orrs	r3, r2
 800b11e:	6023      	str	r3, [r4, #0]
 800b120:	782b      	ldrb	r3, [r5, #0]
 800b122:	2b2e      	cmp	r3, #46	@ 0x2e
 800b124:	d10c      	bne.n	800b140 <_svfiprintf_r+0x134>
 800b126:	786b      	ldrb	r3, [r5, #1]
 800b128:	2b2a      	cmp	r3, #42	@ 0x2a
 800b12a:	d134      	bne.n	800b196 <_svfiprintf_r+0x18a>
 800b12c:	9b07      	ldr	r3, [sp, #28]
 800b12e:	3502      	adds	r5, #2
 800b130:	1d1a      	adds	r2, r3, #4
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	9207      	str	r2, [sp, #28]
 800b136:	2b00      	cmp	r3, #0
 800b138:	da01      	bge.n	800b13e <_svfiprintf_r+0x132>
 800b13a:	2301      	movs	r3, #1
 800b13c:	425b      	negs	r3, r3
 800b13e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b140:	4e2d      	ldr	r6, [pc, #180]	@ (800b1f8 <_svfiprintf_r+0x1ec>)
 800b142:	2203      	movs	r2, #3
 800b144:	0030      	movs	r0, r6
 800b146:	7829      	ldrb	r1, [r5, #0]
 800b148:	f000 fa02 	bl	800b550 <memchr>
 800b14c:	2800      	cmp	r0, #0
 800b14e:	d006      	beq.n	800b15e <_svfiprintf_r+0x152>
 800b150:	2340      	movs	r3, #64	@ 0x40
 800b152:	1b80      	subs	r0, r0, r6
 800b154:	4083      	lsls	r3, r0
 800b156:	6822      	ldr	r2, [r4, #0]
 800b158:	3501      	adds	r5, #1
 800b15a:	4313      	orrs	r3, r2
 800b15c:	6023      	str	r3, [r4, #0]
 800b15e:	7829      	ldrb	r1, [r5, #0]
 800b160:	2206      	movs	r2, #6
 800b162:	4826      	ldr	r0, [pc, #152]	@ (800b1fc <_svfiprintf_r+0x1f0>)
 800b164:	1c6e      	adds	r6, r5, #1
 800b166:	7621      	strb	r1, [r4, #24]
 800b168:	f000 f9f2 	bl	800b550 <memchr>
 800b16c:	2800      	cmp	r0, #0
 800b16e:	d038      	beq.n	800b1e2 <_svfiprintf_r+0x1d6>
 800b170:	4b23      	ldr	r3, [pc, #140]	@ (800b200 <_svfiprintf_r+0x1f4>)
 800b172:	2b00      	cmp	r3, #0
 800b174:	d122      	bne.n	800b1bc <_svfiprintf_r+0x1b0>
 800b176:	2207      	movs	r2, #7
 800b178:	9b07      	ldr	r3, [sp, #28]
 800b17a:	3307      	adds	r3, #7
 800b17c:	4393      	bics	r3, r2
 800b17e:	3308      	adds	r3, #8
 800b180:	9307      	str	r3, [sp, #28]
 800b182:	6963      	ldr	r3, [r4, #20]
 800b184:	9a04      	ldr	r2, [sp, #16]
 800b186:	189b      	adds	r3, r3, r2
 800b188:	6163      	str	r3, [r4, #20]
 800b18a:	e762      	b.n	800b052 <_svfiprintf_r+0x46>
 800b18c:	4343      	muls	r3, r0
 800b18e:	0035      	movs	r5, r6
 800b190:	2101      	movs	r1, #1
 800b192:	189b      	adds	r3, r3, r2
 800b194:	e7a4      	b.n	800b0e0 <_svfiprintf_r+0xd4>
 800b196:	2300      	movs	r3, #0
 800b198:	200a      	movs	r0, #10
 800b19a:	0019      	movs	r1, r3
 800b19c:	3501      	adds	r5, #1
 800b19e:	6063      	str	r3, [r4, #4]
 800b1a0:	782a      	ldrb	r2, [r5, #0]
 800b1a2:	1c6e      	adds	r6, r5, #1
 800b1a4:	3a30      	subs	r2, #48	@ 0x30
 800b1a6:	2a09      	cmp	r2, #9
 800b1a8:	d903      	bls.n	800b1b2 <_svfiprintf_r+0x1a6>
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d0c8      	beq.n	800b140 <_svfiprintf_r+0x134>
 800b1ae:	9109      	str	r1, [sp, #36]	@ 0x24
 800b1b0:	e7c6      	b.n	800b140 <_svfiprintf_r+0x134>
 800b1b2:	4341      	muls	r1, r0
 800b1b4:	0035      	movs	r5, r6
 800b1b6:	2301      	movs	r3, #1
 800b1b8:	1889      	adds	r1, r1, r2
 800b1ba:	e7f1      	b.n	800b1a0 <_svfiprintf_r+0x194>
 800b1bc:	aa07      	add	r2, sp, #28
 800b1be:	9200      	str	r2, [sp, #0]
 800b1c0:	0021      	movs	r1, r4
 800b1c2:	003a      	movs	r2, r7
 800b1c4:	4b0f      	ldr	r3, [pc, #60]	@ (800b204 <_svfiprintf_r+0x1f8>)
 800b1c6:	9803      	ldr	r0, [sp, #12]
 800b1c8:	e000      	b.n	800b1cc <_svfiprintf_r+0x1c0>
 800b1ca:	bf00      	nop
 800b1cc:	9004      	str	r0, [sp, #16]
 800b1ce:	9b04      	ldr	r3, [sp, #16]
 800b1d0:	3301      	adds	r3, #1
 800b1d2:	d1d6      	bne.n	800b182 <_svfiprintf_r+0x176>
 800b1d4:	89bb      	ldrh	r3, [r7, #12]
 800b1d6:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800b1d8:	065b      	lsls	r3, r3, #25
 800b1da:	d500      	bpl.n	800b1de <_svfiprintf_r+0x1d2>
 800b1dc:	e72c      	b.n	800b038 <_svfiprintf_r+0x2c>
 800b1de:	b021      	add	sp, #132	@ 0x84
 800b1e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b1e2:	aa07      	add	r2, sp, #28
 800b1e4:	9200      	str	r2, [sp, #0]
 800b1e6:	0021      	movs	r1, r4
 800b1e8:	003a      	movs	r2, r7
 800b1ea:	4b06      	ldr	r3, [pc, #24]	@ (800b204 <_svfiprintf_r+0x1f8>)
 800b1ec:	9803      	ldr	r0, [sp, #12]
 800b1ee:	f000 f87b 	bl	800b2e8 <_printf_i>
 800b1f2:	e7eb      	b.n	800b1cc <_svfiprintf_r+0x1c0>
 800b1f4:	0800c2c5 	.word	0x0800c2c5
 800b1f8:	0800c2cb 	.word	0x0800c2cb
 800b1fc:	0800c2cf 	.word	0x0800c2cf
 800b200:	00000000 	.word	0x00000000
 800b204:	0800af4d 	.word	0x0800af4d

0800b208 <_printf_common>:
 800b208:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b20a:	0016      	movs	r6, r2
 800b20c:	9301      	str	r3, [sp, #4]
 800b20e:	688a      	ldr	r2, [r1, #8]
 800b210:	690b      	ldr	r3, [r1, #16]
 800b212:	000c      	movs	r4, r1
 800b214:	9000      	str	r0, [sp, #0]
 800b216:	4293      	cmp	r3, r2
 800b218:	da00      	bge.n	800b21c <_printf_common+0x14>
 800b21a:	0013      	movs	r3, r2
 800b21c:	0022      	movs	r2, r4
 800b21e:	6033      	str	r3, [r6, #0]
 800b220:	3243      	adds	r2, #67	@ 0x43
 800b222:	7812      	ldrb	r2, [r2, #0]
 800b224:	2a00      	cmp	r2, #0
 800b226:	d001      	beq.n	800b22c <_printf_common+0x24>
 800b228:	3301      	adds	r3, #1
 800b22a:	6033      	str	r3, [r6, #0]
 800b22c:	6823      	ldr	r3, [r4, #0]
 800b22e:	069b      	lsls	r3, r3, #26
 800b230:	d502      	bpl.n	800b238 <_printf_common+0x30>
 800b232:	6833      	ldr	r3, [r6, #0]
 800b234:	3302      	adds	r3, #2
 800b236:	6033      	str	r3, [r6, #0]
 800b238:	6822      	ldr	r2, [r4, #0]
 800b23a:	2306      	movs	r3, #6
 800b23c:	0015      	movs	r5, r2
 800b23e:	401d      	ands	r5, r3
 800b240:	421a      	tst	r2, r3
 800b242:	d027      	beq.n	800b294 <_printf_common+0x8c>
 800b244:	0023      	movs	r3, r4
 800b246:	3343      	adds	r3, #67	@ 0x43
 800b248:	781b      	ldrb	r3, [r3, #0]
 800b24a:	1e5a      	subs	r2, r3, #1
 800b24c:	4193      	sbcs	r3, r2
 800b24e:	6822      	ldr	r2, [r4, #0]
 800b250:	0692      	lsls	r2, r2, #26
 800b252:	d430      	bmi.n	800b2b6 <_printf_common+0xae>
 800b254:	0022      	movs	r2, r4
 800b256:	9901      	ldr	r1, [sp, #4]
 800b258:	9800      	ldr	r0, [sp, #0]
 800b25a:	9d08      	ldr	r5, [sp, #32]
 800b25c:	3243      	adds	r2, #67	@ 0x43
 800b25e:	47a8      	blx	r5
 800b260:	3001      	adds	r0, #1
 800b262:	d025      	beq.n	800b2b0 <_printf_common+0xa8>
 800b264:	2206      	movs	r2, #6
 800b266:	6823      	ldr	r3, [r4, #0]
 800b268:	2500      	movs	r5, #0
 800b26a:	4013      	ands	r3, r2
 800b26c:	2b04      	cmp	r3, #4
 800b26e:	d105      	bne.n	800b27c <_printf_common+0x74>
 800b270:	6833      	ldr	r3, [r6, #0]
 800b272:	68e5      	ldr	r5, [r4, #12]
 800b274:	1aed      	subs	r5, r5, r3
 800b276:	43eb      	mvns	r3, r5
 800b278:	17db      	asrs	r3, r3, #31
 800b27a:	401d      	ands	r5, r3
 800b27c:	68a3      	ldr	r3, [r4, #8]
 800b27e:	6922      	ldr	r2, [r4, #16]
 800b280:	4293      	cmp	r3, r2
 800b282:	dd01      	ble.n	800b288 <_printf_common+0x80>
 800b284:	1a9b      	subs	r3, r3, r2
 800b286:	18ed      	adds	r5, r5, r3
 800b288:	2600      	movs	r6, #0
 800b28a:	42b5      	cmp	r5, r6
 800b28c:	d120      	bne.n	800b2d0 <_printf_common+0xc8>
 800b28e:	2000      	movs	r0, #0
 800b290:	e010      	b.n	800b2b4 <_printf_common+0xac>
 800b292:	3501      	adds	r5, #1
 800b294:	68e3      	ldr	r3, [r4, #12]
 800b296:	6832      	ldr	r2, [r6, #0]
 800b298:	1a9b      	subs	r3, r3, r2
 800b29a:	42ab      	cmp	r3, r5
 800b29c:	ddd2      	ble.n	800b244 <_printf_common+0x3c>
 800b29e:	0022      	movs	r2, r4
 800b2a0:	2301      	movs	r3, #1
 800b2a2:	9901      	ldr	r1, [sp, #4]
 800b2a4:	9800      	ldr	r0, [sp, #0]
 800b2a6:	9f08      	ldr	r7, [sp, #32]
 800b2a8:	3219      	adds	r2, #25
 800b2aa:	47b8      	blx	r7
 800b2ac:	3001      	adds	r0, #1
 800b2ae:	d1f0      	bne.n	800b292 <_printf_common+0x8a>
 800b2b0:	2001      	movs	r0, #1
 800b2b2:	4240      	negs	r0, r0
 800b2b4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b2b6:	2030      	movs	r0, #48	@ 0x30
 800b2b8:	18e1      	adds	r1, r4, r3
 800b2ba:	3143      	adds	r1, #67	@ 0x43
 800b2bc:	7008      	strb	r0, [r1, #0]
 800b2be:	0021      	movs	r1, r4
 800b2c0:	1c5a      	adds	r2, r3, #1
 800b2c2:	3145      	adds	r1, #69	@ 0x45
 800b2c4:	7809      	ldrb	r1, [r1, #0]
 800b2c6:	18a2      	adds	r2, r4, r2
 800b2c8:	3243      	adds	r2, #67	@ 0x43
 800b2ca:	3302      	adds	r3, #2
 800b2cc:	7011      	strb	r1, [r2, #0]
 800b2ce:	e7c1      	b.n	800b254 <_printf_common+0x4c>
 800b2d0:	0022      	movs	r2, r4
 800b2d2:	2301      	movs	r3, #1
 800b2d4:	9901      	ldr	r1, [sp, #4]
 800b2d6:	9800      	ldr	r0, [sp, #0]
 800b2d8:	9f08      	ldr	r7, [sp, #32]
 800b2da:	321a      	adds	r2, #26
 800b2dc:	47b8      	blx	r7
 800b2de:	3001      	adds	r0, #1
 800b2e0:	d0e6      	beq.n	800b2b0 <_printf_common+0xa8>
 800b2e2:	3601      	adds	r6, #1
 800b2e4:	e7d1      	b.n	800b28a <_printf_common+0x82>
	...

0800b2e8 <_printf_i>:
 800b2e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b2ea:	b08b      	sub	sp, #44	@ 0x2c
 800b2ec:	9206      	str	r2, [sp, #24]
 800b2ee:	000a      	movs	r2, r1
 800b2f0:	3243      	adds	r2, #67	@ 0x43
 800b2f2:	9307      	str	r3, [sp, #28]
 800b2f4:	9005      	str	r0, [sp, #20]
 800b2f6:	9203      	str	r2, [sp, #12]
 800b2f8:	7e0a      	ldrb	r2, [r1, #24]
 800b2fa:	000c      	movs	r4, r1
 800b2fc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b2fe:	2a78      	cmp	r2, #120	@ 0x78
 800b300:	d809      	bhi.n	800b316 <_printf_i+0x2e>
 800b302:	2a62      	cmp	r2, #98	@ 0x62
 800b304:	d80b      	bhi.n	800b31e <_printf_i+0x36>
 800b306:	2a00      	cmp	r2, #0
 800b308:	d100      	bne.n	800b30c <_printf_i+0x24>
 800b30a:	e0bc      	b.n	800b486 <_printf_i+0x19e>
 800b30c:	497b      	ldr	r1, [pc, #492]	@ (800b4fc <_printf_i+0x214>)
 800b30e:	9104      	str	r1, [sp, #16]
 800b310:	2a58      	cmp	r2, #88	@ 0x58
 800b312:	d100      	bne.n	800b316 <_printf_i+0x2e>
 800b314:	e090      	b.n	800b438 <_printf_i+0x150>
 800b316:	0025      	movs	r5, r4
 800b318:	3542      	adds	r5, #66	@ 0x42
 800b31a:	702a      	strb	r2, [r5, #0]
 800b31c:	e022      	b.n	800b364 <_printf_i+0x7c>
 800b31e:	0010      	movs	r0, r2
 800b320:	3863      	subs	r0, #99	@ 0x63
 800b322:	2815      	cmp	r0, #21
 800b324:	d8f7      	bhi.n	800b316 <_printf_i+0x2e>
 800b326:	f7f4 fef7 	bl	8000118 <__gnu_thumb1_case_shi>
 800b32a:	0016      	.short	0x0016
 800b32c:	fff6001f 	.word	0xfff6001f
 800b330:	fff6fff6 	.word	0xfff6fff6
 800b334:	001ffff6 	.word	0x001ffff6
 800b338:	fff6fff6 	.word	0xfff6fff6
 800b33c:	fff6fff6 	.word	0xfff6fff6
 800b340:	003600a1 	.word	0x003600a1
 800b344:	fff60080 	.word	0xfff60080
 800b348:	00b2fff6 	.word	0x00b2fff6
 800b34c:	0036fff6 	.word	0x0036fff6
 800b350:	fff6fff6 	.word	0xfff6fff6
 800b354:	0084      	.short	0x0084
 800b356:	0025      	movs	r5, r4
 800b358:	681a      	ldr	r2, [r3, #0]
 800b35a:	3542      	adds	r5, #66	@ 0x42
 800b35c:	1d11      	adds	r1, r2, #4
 800b35e:	6019      	str	r1, [r3, #0]
 800b360:	6813      	ldr	r3, [r2, #0]
 800b362:	702b      	strb	r3, [r5, #0]
 800b364:	2301      	movs	r3, #1
 800b366:	e0a0      	b.n	800b4aa <_printf_i+0x1c2>
 800b368:	6818      	ldr	r0, [r3, #0]
 800b36a:	6809      	ldr	r1, [r1, #0]
 800b36c:	1d02      	adds	r2, r0, #4
 800b36e:	060d      	lsls	r5, r1, #24
 800b370:	d50b      	bpl.n	800b38a <_printf_i+0xa2>
 800b372:	6806      	ldr	r6, [r0, #0]
 800b374:	601a      	str	r2, [r3, #0]
 800b376:	2e00      	cmp	r6, #0
 800b378:	da03      	bge.n	800b382 <_printf_i+0x9a>
 800b37a:	232d      	movs	r3, #45	@ 0x2d
 800b37c:	9a03      	ldr	r2, [sp, #12]
 800b37e:	4276      	negs	r6, r6
 800b380:	7013      	strb	r3, [r2, #0]
 800b382:	4b5e      	ldr	r3, [pc, #376]	@ (800b4fc <_printf_i+0x214>)
 800b384:	270a      	movs	r7, #10
 800b386:	9304      	str	r3, [sp, #16]
 800b388:	e018      	b.n	800b3bc <_printf_i+0xd4>
 800b38a:	6806      	ldr	r6, [r0, #0]
 800b38c:	601a      	str	r2, [r3, #0]
 800b38e:	0649      	lsls	r1, r1, #25
 800b390:	d5f1      	bpl.n	800b376 <_printf_i+0x8e>
 800b392:	b236      	sxth	r6, r6
 800b394:	e7ef      	b.n	800b376 <_printf_i+0x8e>
 800b396:	6808      	ldr	r0, [r1, #0]
 800b398:	6819      	ldr	r1, [r3, #0]
 800b39a:	c940      	ldmia	r1!, {r6}
 800b39c:	0605      	lsls	r5, r0, #24
 800b39e:	d402      	bmi.n	800b3a6 <_printf_i+0xbe>
 800b3a0:	0640      	lsls	r0, r0, #25
 800b3a2:	d500      	bpl.n	800b3a6 <_printf_i+0xbe>
 800b3a4:	b2b6      	uxth	r6, r6
 800b3a6:	6019      	str	r1, [r3, #0]
 800b3a8:	4b54      	ldr	r3, [pc, #336]	@ (800b4fc <_printf_i+0x214>)
 800b3aa:	270a      	movs	r7, #10
 800b3ac:	9304      	str	r3, [sp, #16]
 800b3ae:	2a6f      	cmp	r2, #111	@ 0x6f
 800b3b0:	d100      	bne.n	800b3b4 <_printf_i+0xcc>
 800b3b2:	3f02      	subs	r7, #2
 800b3b4:	0023      	movs	r3, r4
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	3343      	adds	r3, #67	@ 0x43
 800b3ba:	701a      	strb	r2, [r3, #0]
 800b3bc:	6863      	ldr	r3, [r4, #4]
 800b3be:	60a3      	str	r3, [r4, #8]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	db03      	blt.n	800b3cc <_printf_i+0xe4>
 800b3c4:	2104      	movs	r1, #4
 800b3c6:	6822      	ldr	r2, [r4, #0]
 800b3c8:	438a      	bics	r2, r1
 800b3ca:	6022      	str	r2, [r4, #0]
 800b3cc:	2e00      	cmp	r6, #0
 800b3ce:	d102      	bne.n	800b3d6 <_printf_i+0xee>
 800b3d0:	9d03      	ldr	r5, [sp, #12]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d00c      	beq.n	800b3f0 <_printf_i+0x108>
 800b3d6:	9d03      	ldr	r5, [sp, #12]
 800b3d8:	0030      	movs	r0, r6
 800b3da:	0039      	movs	r1, r7
 800b3dc:	f7f4 ff2c 	bl	8000238 <__aeabi_uidivmod>
 800b3e0:	9b04      	ldr	r3, [sp, #16]
 800b3e2:	3d01      	subs	r5, #1
 800b3e4:	5c5b      	ldrb	r3, [r3, r1]
 800b3e6:	702b      	strb	r3, [r5, #0]
 800b3e8:	0033      	movs	r3, r6
 800b3ea:	0006      	movs	r6, r0
 800b3ec:	429f      	cmp	r7, r3
 800b3ee:	d9f3      	bls.n	800b3d8 <_printf_i+0xf0>
 800b3f0:	2f08      	cmp	r7, #8
 800b3f2:	d109      	bne.n	800b408 <_printf_i+0x120>
 800b3f4:	6823      	ldr	r3, [r4, #0]
 800b3f6:	07db      	lsls	r3, r3, #31
 800b3f8:	d506      	bpl.n	800b408 <_printf_i+0x120>
 800b3fa:	6862      	ldr	r2, [r4, #4]
 800b3fc:	6923      	ldr	r3, [r4, #16]
 800b3fe:	429a      	cmp	r2, r3
 800b400:	dc02      	bgt.n	800b408 <_printf_i+0x120>
 800b402:	2330      	movs	r3, #48	@ 0x30
 800b404:	3d01      	subs	r5, #1
 800b406:	702b      	strb	r3, [r5, #0]
 800b408:	9b03      	ldr	r3, [sp, #12]
 800b40a:	1b5b      	subs	r3, r3, r5
 800b40c:	6123      	str	r3, [r4, #16]
 800b40e:	9b07      	ldr	r3, [sp, #28]
 800b410:	0021      	movs	r1, r4
 800b412:	9300      	str	r3, [sp, #0]
 800b414:	9805      	ldr	r0, [sp, #20]
 800b416:	9b06      	ldr	r3, [sp, #24]
 800b418:	aa09      	add	r2, sp, #36	@ 0x24
 800b41a:	f7ff fef5 	bl	800b208 <_printf_common>
 800b41e:	3001      	adds	r0, #1
 800b420:	d148      	bne.n	800b4b4 <_printf_i+0x1cc>
 800b422:	2001      	movs	r0, #1
 800b424:	4240      	negs	r0, r0
 800b426:	b00b      	add	sp, #44	@ 0x2c
 800b428:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b42a:	2220      	movs	r2, #32
 800b42c:	6809      	ldr	r1, [r1, #0]
 800b42e:	430a      	orrs	r2, r1
 800b430:	6022      	str	r2, [r4, #0]
 800b432:	2278      	movs	r2, #120	@ 0x78
 800b434:	4932      	ldr	r1, [pc, #200]	@ (800b500 <_printf_i+0x218>)
 800b436:	9104      	str	r1, [sp, #16]
 800b438:	0021      	movs	r1, r4
 800b43a:	3145      	adds	r1, #69	@ 0x45
 800b43c:	700a      	strb	r2, [r1, #0]
 800b43e:	6819      	ldr	r1, [r3, #0]
 800b440:	6822      	ldr	r2, [r4, #0]
 800b442:	c940      	ldmia	r1!, {r6}
 800b444:	0610      	lsls	r0, r2, #24
 800b446:	d402      	bmi.n	800b44e <_printf_i+0x166>
 800b448:	0650      	lsls	r0, r2, #25
 800b44a:	d500      	bpl.n	800b44e <_printf_i+0x166>
 800b44c:	b2b6      	uxth	r6, r6
 800b44e:	6019      	str	r1, [r3, #0]
 800b450:	07d3      	lsls	r3, r2, #31
 800b452:	d502      	bpl.n	800b45a <_printf_i+0x172>
 800b454:	2320      	movs	r3, #32
 800b456:	4313      	orrs	r3, r2
 800b458:	6023      	str	r3, [r4, #0]
 800b45a:	2e00      	cmp	r6, #0
 800b45c:	d001      	beq.n	800b462 <_printf_i+0x17a>
 800b45e:	2710      	movs	r7, #16
 800b460:	e7a8      	b.n	800b3b4 <_printf_i+0xcc>
 800b462:	2220      	movs	r2, #32
 800b464:	6823      	ldr	r3, [r4, #0]
 800b466:	4393      	bics	r3, r2
 800b468:	6023      	str	r3, [r4, #0]
 800b46a:	e7f8      	b.n	800b45e <_printf_i+0x176>
 800b46c:	681a      	ldr	r2, [r3, #0]
 800b46e:	680d      	ldr	r5, [r1, #0]
 800b470:	1d10      	adds	r0, r2, #4
 800b472:	6949      	ldr	r1, [r1, #20]
 800b474:	6018      	str	r0, [r3, #0]
 800b476:	6813      	ldr	r3, [r2, #0]
 800b478:	062e      	lsls	r6, r5, #24
 800b47a:	d501      	bpl.n	800b480 <_printf_i+0x198>
 800b47c:	6019      	str	r1, [r3, #0]
 800b47e:	e002      	b.n	800b486 <_printf_i+0x19e>
 800b480:	066d      	lsls	r5, r5, #25
 800b482:	d5fb      	bpl.n	800b47c <_printf_i+0x194>
 800b484:	8019      	strh	r1, [r3, #0]
 800b486:	2300      	movs	r3, #0
 800b488:	9d03      	ldr	r5, [sp, #12]
 800b48a:	6123      	str	r3, [r4, #16]
 800b48c:	e7bf      	b.n	800b40e <_printf_i+0x126>
 800b48e:	681a      	ldr	r2, [r3, #0]
 800b490:	1d11      	adds	r1, r2, #4
 800b492:	6019      	str	r1, [r3, #0]
 800b494:	6815      	ldr	r5, [r2, #0]
 800b496:	2100      	movs	r1, #0
 800b498:	0028      	movs	r0, r5
 800b49a:	6862      	ldr	r2, [r4, #4]
 800b49c:	f000 f858 	bl	800b550 <memchr>
 800b4a0:	2800      	cmp	r0, #0
 800b4a2:	d001      	beq.n	800b4a8 <_printf_i+0x1c0>
 800b4a4:	1b40      	subs	r0, r0, r5
 800b4a6:	6060      	str	r0, [r4, #4]
 800b4a8:	6863      	ldr	r3, [r4, #4]
 800b4aa:	6123      	str	r3, [r4, #16]
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	9a03      	ldr	r2, [sp, #12]
 800b4b0:	7013      	strb	r3, [r2, #0]
 800b4b2:	e7ac      	b.n	800b40e <_printf_i+0x126>
 800b4b4:	002a      	movs	r2, r5
 800b4b6:	6923      	ldr	r3, [r4, #16]
 800b4b8:	9906      	ldr	r1, [sp, #24]
 800b4ba:	9805      	ldr	r0, [sp, #20]
 800b4bc:	9d07      	ldr	r5, [sp, #28]
 800b4be:	47a8      	blx	r5
 800b4c0:	3001      	adds	r0, #1
 800b4c2:	d0ae      	beq.n	800b422 <_printf_i+0x13a>
 800b4c4:	6823      	ldr	r3, [r4, #0]
 800b4c6:	079b      	lsls	r3, r3, #30
 800b4c8:	d415      	bmi.n	800b4f6 <_printf_i+0x20e>
 800b4ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4cc:	68e0      	ldr	r0, [r4, #12]
 800b4ce:	4298      	cmp	r0, r3
 800b4d0:	daa9      	bge.n	800b426 <_printf_i+0x13e>
 800b4d2:	0018      	movs	r0, r3
 800b4d4:	e7a7      	b.n	800b426 <_printf_i+0x13e>
 800b4d6:	0022      	movs	r2, r4
 800b4d8:	2301      	movs	r3, #1
 800b4da:	9906      	ldr	r1, [sp, #24]
 800b4dc:	9805      	ldr	r0, [sp, #20]
 800b4de:	9e07      	ldr	r6, [sp, #28]
 800b4e0:	3219      	adds	r2, #25
 800b4e2:	47b0      	blx	r6
 800b4e4:	3001      	adds	r0, #1
 800b4e6:	d09c      	beq.n	800b422 <_printf_i+0x13a>
 800b4e8:	3501      	adds	r5, #1
 800b4ea:	68e3      	ldr	r3, [r4, #12]
 800b4ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b4ee:	1a9b      	subs	r3, r3, r2
 800b4f0:	42ab      	cmp	r3, r5
 800b4f2:	dcf0      	bgt.n	800b4d6 <_printf_i+0x1ee>
 800b4f4:	e7e9      	b.n	800b4ca <_printf_i+0x1e2>
 800b4f6:	2500      	movs	r5, #0
 800b4f8:	e7f7      	b.n	800b4ea <_printf_i+0x202>
 800b4fa:	46c0      	nop			@ (mov r8, r8)
 800b4fc:	0800c2d6 	.word	0x0800c2d6
 800b500:	0800c2e7 	.word	0x0800c2e7

0800b504 <memmove>:
 800b504:	b510      	push	{r4, lr}
 800b506:	4288      	cmp	r0, r1
 800b508:	d806      	bhi.n	800b518 <memmove+0x14>
 800b50a:	2300      	movs	r3, #0
 800b50c:	429a      	cmp	r2, r3
 800b50e:	d008      	beq.n	800b522 <memmove+0x1e>
 800b510:	5ccc      	ldrb	r4, [r1, r3]
 800b512:	54c4      	strb	r4, [r0, r3]
 800b514:	3301      	adds	r3, #1
 800b516:	e7f9      	b.n	800b50c <memmove+0x8>
 800b518:	188b      	adds	r3, r1, r2
 800b51a:	4298      	cmp	r0, r3
 800b51c:	d2f5      	bcs.n	800b50a <memmove+0x6>
 800b51e:	3a01      	subs	r2, #1
 800b520:	d200      	bcs.n	800b524 <memmove+0x20>
 800b522:	bd10      	pop	{r4, pc}
 800b524:	5c8b      	ldrb	r3, [r1, r2]
 800b526:	5483      	strb	r3, [r0, r2]
 800b528:	e7f9      	b.n	800b51e <memmove+0x1a>
	...

0800b52c <_sbrk_r>:
 800b52c:	2300      	movs	r3, #0
 800b52e:	b570      	push	{r4, r5, r6, lr}
 800b530:	4d06      	ldr	r5, [pc, #24]	@ (800b54c <_sbrk_r+0x20>)
 800b532:	0004      	movs	r4, r0
 800b534:	0008      	movs	r0, r1
 800b536:	602b      	str	r3, [r5, #0]
 800b538:	f7fa fc4c 	bl	8005dd4 <_sbrk>
 800b53c:	1c43      	adds	r3, r0, #1
 800b53e:	d103      	bne.n	800b548 <_sbrk_r+0x1c>
 800b540:	682b      	ldr	r3, [r5, #0]
 800b542:	2b00      	cmp	r3, #0
 800b544:	d000      	beq.n	800b548 <_sbrk_r+0x1c>
 800b546:	6023      	str	r3, [r4, #0]
 800b548:	bd70      	pop	{r4, r5, r6, pc}
 800b54a:	46c0      	nop			@ (mov r8, r8)
 800b54c:	200015c4 	.word	0x200015c4

0800b550 <memchr>:
 800b550:	b2c9      	uxtb	r1, r1
 800b552:	1882      	adds	r2, r0, r2
 800b554:	4290      	cmp	r0, r2
 800b556:	d101      	bne.n	800b55c <memchr+0xc>
 800b558:	2000      	movs	r0, #0
 800b55a:	4770      	bx	lr
 800b55c:	7803      	ldrb	r3, [r0, #0]
 800b55e:	428b      	cmp	r3, r1
 800b560:	d0fb      	beq.n	800b55a <memchr+0xa>
 800b562:	3001      	adds	r0, #1
 800b564:	e7f6      	b.n	800b554 <memchr+0x4>

0800b566 <_realloc_r>:
 800b566:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b568:	0006      	movs	r6, r0
 800b56a:	000c      	movs	r4, r1
 800b56c:	0015      	movs	r5, r2
 800b56e:	2900      	cmp	r1, #0
 800b570:	d105      	bne.n	800b57e <_realloc_r+0x18>
 800b572:	0011      	movs	r1, r2
 800b574:	f7ff fc5a 	bl	800ae2c <_malloc_r>
 800b578:	0004      	movs	r4, r0
 800b57a:	0020      	movs	r0, r4
 800b57c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b57e:	2a00      	cmp	r2, #0
 800b580:	d103      	bne.n	800b58a <_realloc_r+0x24>
 800b582:	f7ff fbe7 	bl	800ad54 <_free_r>
 800b586:	2400      	movs	r4, #0
 800b588:	e7f7      	b.n	800b57a <_realloc_r+0x14>
 800b58a:	f000 f81b 	bl	800b5c4 <_malloc_usable_size_r>
 800b58e:	0007      	movs	r7, r0
 800b590:	4285      	cmp	r5, r0
 800b592:	d802      	bhi.n	800b59a <_realloc_r+0x34>
 800b594:	0843      	lsrs	r3, r0, #1
 800b596:	42ab      	cmp	r3, r5
 800b598:	d3ef      	bcc.n	800b57a <_realloc_r+0x14>
 800b59a:	0029      	movs	r1, r5
 800b59c:	0030      	movs	r0, r6
 800b59e:	f7ff fc45 	bl	800ae2c <_malloc_r>
 800b5a2:	9001      	str	r0, [sp, #4]
 800b5a4:	2800      	cmp	r0, #0
 800b5a6:	d0ee      	beq.n	800b586 <_realloc_r+0x20>
 800b5a8:	002a      	movs	r2, r5
 800b5aa:	42bd      	cmp	r5, r7
 800b5ac:	d900      	bls.n	800b5b0 <_realloc_r+0x4a>
 800b5ae:	003a      	movs	r2, r7
 800b5b0:	0021      	movs	r1, r4
 800b5b2:	9801      	ldr	r0, [sp, #4]
 800b5b4:	f7ff fbc4 	bl	800ad40 <memcpy>
 800b5b8:	0021      	movs	r1, r4
 800b5ba:	0030      	movs	r0, r6
 800b5bc:	f7ff fbca 	bl	800ad54 <_free_r>
 800b5c0:	9c01      	ldr	r4, [sp, #4]
 800b5c2:	e7da      	b.n	800b57a <_realloc_r+0x14>

0800b5c4 <_malloc_usable_size_r>:
 800b5c4:	1f0b      	subs	r3, r1, #4
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	1f18      	subs	r0, r3, #4
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	da01      	bge.n	800b5d2 <_malloc_usable_size_r+0xe>
 800b5ce:	580b      	ldr	r3, [r1, r0]
 800b5d0:	18c0      	adds	r0, r0, r3
 800b5d2:	4770      	bx	lr

0800b5d4 <sqrt>:
 800b5d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5d6:	0004      	movs	r4, r0
 800b5d8:	000d      	movs	r5, r1
 800b5da:	f000 f821 	bl	800b620 <__ieee754_sqrt>
 800b5de:	0022      	movs	r2, r4
 800b5e0:	0006      	movs	r6, r0
 800b5e2:	000f      	movs	r7, r1
 800b5e4:	002b      	movs	r3, r5
 800b5e6:	0020      	movs	r0, r4
 800b5e8:	0029      	movs	r1, r5
 800b5ea:	f7f7 fd5b 	bl	80030a4 <__aeabi_dcmpun>
 800b5ee:	2800      	cmp	r0, #0
 800b5f0:	d113      	bne.n	800b61a <sqrt+0x46>
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	0020      	movs	r0, r4
 800b5f8:	0029      	movs	r1, r5
 800b5fa:	f7f4 ff23 	bl	8000444 <__aeabi_dcmplt>
 800b5fe:	2800      	cmp	r0, #0
 800b600:	d00b      	beq.n	800b61a <sqrt+0x46>
 800b602:	f7ff fb71 	bl	800ace8 <__errno>
 800b606:	2321      	movs	r3, #33	@ 0x21
 800b608:	2200      	movs	r2, #0
 800b60a:	6003      	str	r3, [r0, #0]
 800b60c:	2300      	movs	r3, #0
 800b60e:	0010      	movs	r0, r2
 800b610:	0019      	movs	r1, r3
 800b612:	f7f6 fa9f 	bl	8001b54 <__aeabi_ddiv>
 800b616:	0006      	movs	r6, r0
 800b618:	000f      	movs	r7, r1
 800b61a:	0030      	movs	r0, r6
 800b61c:	0039      	movs	r1, r7
 800b61e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b620 <__ieee754_sqrt>:
 800b620:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b622:	000a      	movs	r2, r1
 800b624:	000d      	movs	r5, r1
 800b626:	496d      	ldr	r1, [pc, #436]	@ (800b7dc <__ieee754_sqrt+0x1bc>)
 800b628:	0004      	movs	r4, r0
 800b62a:	0003      	movs	r3, r0
 800b62c:	0008      	movs	r0, r1
 800b62e:	b087      	sub	sp, #28
 800b630:	4028      	ands	r0, r5
 800b632:	4288      	cmp	r0, r1
 800b634:	d111      	bne.n	800b65a <__ieee754_sqrt+0x3a>
 800b636:	0022      	movs	r2, r4
 800b638:	002b      	movs	r3, r5
 800b63a:	0020      	movs	r0, r4
 800b63c:	0029      	movs	r1, r5
 800b63e:	f7f6 fecd 	bl	80023dc <__aeabi_dmul>
 800b642:	0002      	movs	r2, r0
 800b644:	000b      	movs	r3, r1
 800b646:	0020      	movs	r0, r4
 800b648:	0029      	movs	r1, r5
 800b64a:	f7f5 ff1f 	bl	800148c <__aeabi_dadd>
 800b64e:	0004      	movs	r4, r0
 800b650:	000d      	movs	r5, r1
 800b652:	0020      	movs	r0, r4
 800b654:	0029      	movs	r1, r5
 800b656:	b007      	add	sp, #28
 800b658:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b65a:	2d00      	cmp	r5, #0
 800b65c:	dc11      	bgt.n	800b682 <__ieee754_sqrt+0x62>
 800b65e:	0069      	lsls	r1, r5, #1
 800b660:	0849      	lsrs	r1, r1, #1
 800b662:	4321      	orrs	r1, r4
 800b664:	d0f5      	beq.n	800b652 <__ieee754_sqrt+0x32>
 800b666:	2000      	movs	r0, #0
 800b668:	4285      	cmp	r5, r0
 800b66a:	d010      	beq.n	800b68e <__ieee754_sqrt+0x6e>
 800b66c:	0022      	movs	r2, r4
 800b66e:	002b      	movs	r3, r5
 800b670:	0020      	movs	r0, r4
 800b672:	0029      	movs	r1, r5
 800b674:	f7f7 f97a 	bl	800296c <__aeabi_dsub>
 800b678:	0002      	movs	r2, r0
 800b67a:	000b      	movs	r3, r1
 800b67c:	f7f6 fa6a 	bl	8001b54 <__aeabi_ddiv>
 800b680:	e7e5      	b.n	800b64e <__ieee754_sqrt+0x2e>
 800b682:	1528      	asrs	r0, r5, #20
 800b684:	d115      	bne.n	800b6b2 <__ieee754_sqrt+0x92>
 800b686:	2480      	movs	r4, #128	@ 0x80
 800b688:	2100      	movs	r1, #0
 800b68a:	0364      	lsls	r4, r4, #13
 800b68c:	e007      	b.n	800b69e <__ieee754_sqrt+0x7e>
 800b68e:	0ada      	lsrs	r2, r3, #11
 800b690:	3815      	subs	r0, #21
 800b692:	055b      	lsls	r3, r3, #21
 800b694:	2a00      	cmp	r2, #0
 800b696:	d0fa      	beq.n	800b68e <__ieee754_sqrt+0x6e>
 800b698:	e7f5      	b.n	800b686 <__ieee754_sqrt+0x66>
 800b69a:	0052      	lsls	r2, r2, #1
 800b69c:	3101      	adds	r1, #1
 800b69e:	4222      	tst	r2, r4
 800b6a0:	d0fb      	beq.n	800b69a <__ieee754_sqrt+0x7a>
 800b6a2:	1e4c      	subs	r4, r1, #1
 800b6a4:	1b00      	subs	r0, r0, r4
 800b6a6:	2420      	movs	r4, #32
 800b6a8:	001d      	movs	r5, r3
 800b6aa:	1a64      	subs	r4, r4, r1
 800b6ac:	40e5      	lsrs	r5, r4
 800b6ae:	408b      	lsls	r3, r1
 800b6b0:	432a      	orrs	r2, r5
 800b6b2:	494b      	ldr	r1, [pc, #300]	@ (800b7e0 <__ieee754_sqrt+0x1c0>)
 800b6b4:	0312      	lsls	r2, r2, #12
 800b6b6:	1844      	adds	r4, r0, r1
 800b6b8:	2180      	movs	r1, #128	@ 0x80
 800b6ba:	0b12      	lsrs	r2, r2, #12
 800b6bc:	0349      	lsls	r1, r1, #13
 800b6be:	4311      	orrs	r1, r2
 800b6c0:	07c0      	lsls	r0, r0, #31
 800b6c2:	d403      	bmi.n	800b6cc <__ieee754_sqrt+0xac>
 800b6c4:	0fda      	lsrs	r2, r3, #31
 800b6c6:	0049      	lsls	r1, r1, #1
 800b6c8:	1851      	adds	r1, r2, r1
 800b6ca:	005b      	lsls	r3, r3, #1
 800b6cc:	2500      	movs	r5, #0
 800b6ce:	1062      	asrs	r2, r4, #1
 800b6d0:	0049      	lsls	r1, r1, #1
 800b6d2:	2480      	movs	r4, #128	@ 0x80
 800b6d4:	9205      	str	r2, [sp, #20]
 800b6d6:	0fda      	lsrs	r2, r3, #31
 800b6d8:	1852      	adds	r2, r2, r1
 800b6da:	2016      	movs	r0, #22
 800b6dc:	0029      	movs	r1, r5
 800b6de:	005b      	lsls	r3, r3, #1
 800b6e0:	03a4      	lsls	r4, r4, #14
 800b6e2:	190e      	adds	r6, r1, r4
 800b6e4:	4296      	cmp	r6, r2
 800b6e6:	dc02      	bgt.n	800b6ee <__ieee754_sqrt+0xce>
 800b6e8:	1931      	adds	r1, r6, r4
 800b6ea:	1b92      	subs	r2, r2, r6
 800b6ec:	192d      	adds	r5, r5, r4
 800b6ee:	0fde      	lsrs	r6, r3, #31
 800b6f0:	0052      	lsls	r2, r2, #1
 800b6f2:	3801      	subs	r0, #1
 800b6f4:	1992      	adds	r2, r2, r6
 800b6f6:	005b      	lsls	r3, r3, #1
 800b6f8:	0864      	lsrs	r4, r4, #1
 800b6fa:	2800      	cmp	r0, #0
 800b6fc:	d1f1      	bne.n	800b6e2 <__ieee754_sqrt+0xc2>
 800b6fe:	2620      	movs	r6, #32
 800b700:	2780      	movs	r7, #128	@ 0x80
 800b702:	0004      	movs	r4, r0
 800b704:	9604      	str	r6, [sp, #16]
 800b706:	063f      	lsls	r7, r7, #24
 800b708:	19c6      	adds	r6, r0, r7
 800b70a:	46b4      	mov	ip, r6
 800b70c:	4291      	cmp	r1, r2
 800b70e:	db02      	blt.n	800b716 <__ieee754_sqrt+0xf6>
 800b710:	d114      	bne.n	800b73c <__ieee754_sqrt+0x11c>
 800b712:	429e      	cmp	r6, r3
 800b714:	d812      	bhi.n	800b73c <__ieee754_sqrt+0x11c>
 800b716:	4660      	mov	r0, ip
 800b718:	4666      	mov	r6, ip
 800b71a:	19c0      	adds	r0, r0, r7
 800b71c:	9100      	str	r1, [sp, #0]
 800b71e:	2e00      	cmp	r6, #0
 800b720:	da03      	bge.n	800b72a <__ieee754_sqrt+0x10a>
 800b722:	43c6      	mvns	r6, r0
 800b724:	0ff6      	lsrs	r6, r6, #31
 800b726:	198e      	adds	r6, r1, r6
 800b728:	9600      	str	r6, [sp, #0]
 800b72a:	1a52      	subs	r2, r2, r1
 800b72c:	4563      	cmp	r3, ip
 800b72e:	4189      	sbcs	r1, r1
 800b730:	4249      	negs	r1, r1
 800b732:	1a52      	subs	r2, r2, r1
 800b734:	4661      	mov	r1, ip
 800b736:	1a5b      	subs	r3, r3, r1
 800b738:	9900      	ldr	r1, [sp, #0]
 800b73a:	19e4      	adds	r4, r4, r7
 800b73c:	0fde      	lsrs	r6, r3, #31
 800b73e:	0052      	lsls	r2, r2, #1
 800b740:	1992      	adds	r2, r2, r6
 800b742:	9e04      	ldr	r6, [sp, #16]
 800b744:	005b      	lsls	r3, r3, #1
 800b746:	3e01      	subs	r6, #1
 800b748:	087f      	lsrs	r7, r7, #1
 800b74a:	9604      	str	r6, [sp, #16]
 800b74c:	2e00      	cmp	r6, #0
 800b74e:	d1db      	bne.n	800b708 <__ieee754_sqrt+0xe8>
 800b750:	431a      	orrs	r2, r3
 800b752:	d01f      	beq.n	800b794 <__ieee754_sqrt+0x174>
 800b754:	4e23      	ldr	r6, [pc, #140]	@ (800b7e4 <__ieee754_sqrt+0x1c4>)
 800b756:	4f24      	ldr	r7, [pc, #144]	@ (800b7e8 <__ieee754_sqrt+0x1c8>)
 800b758:	6830      	ldr	r0, [r6, #0]
 800b75a:	6871      	ldr	r1, [r6, #4]
 800b75c:	683a      	ldr	r2, [r7, #0]
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	9200      	str	r2, [sp, #0]
 800b762:	9301      	str	r3, [sp, #4]
 800b764:	6832      	ldr	r2, [r6, #0]
 800b766:	6873      	ldr	r3, [r6, #4]
 800b768:	9202      	str	r2, [sp, #8]
 800b76a:	9303      	str	r3, [sp, #12]
 800b76c:	9a00      	ldr	r2, [sp, #0]
 800b76e:	9b01      	ldr	r3, [sp, #4]
 800b770:	f7f7 f8fc 	bl	800296c <__aeabi_dsub>
 800b774:	0002      	movs	r2, r0
 800b776:	000b      	movs	r3, r1
 800b778:	9802      	ldr	r0, [sp, #8]
 800b77a:	9903      	ldr	r1, [sp, #12]
 800b77c:	f7f4 fe6c 	bl	8000458 <__aeabi_dcmple>
 800b780:	2800      	cmp	r0, #0
 800b782:	d007      	beq.n	800b794 <__ieee754_sqrt+0x174>
 800b784:	6830      	ldr	r0, [r6, #0]
 800b786:	6871      	ldr	r1, [r6, #4]
 800b788:	683a      	ldr	r2, [r7, #0]
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	1c67      	adds	r7, r4, #1
 800b78e:	d10f      	bne.n	800b7b0 <__ieee754_sqrt+0x190>
 800b790:	9c04      	ldr	r4, [sp, #16]
 800b792:	3501      	adds	r5, #1
 800b794:	4b15      	ldr	r3, [pc, #84]	@ (800b7ec <__ieee754_sqrt+0x1cc>)
 800b796:	106a      	asrs	r2, r5, #1
 800b798:	18d2      	adds	r2, r2, r3
 800b79a:	0863      	lsrs	r3, r4, #1
 800b79c:	07ed      	lsls	r5, r5, #31
 800b79e:	d502      	bpl.n	800b7a6 <__ieee754_sqrt+0x186>
 800b7a0:	2180      	movs	r1, #128	@ 0x80
 800b7a2:	0609      	lsls	r1, r1, #24
 800b7a4:	430b      	orrs	r3, r1
 800b7a6:	9905      	ldr	r1, [sp, #20]
 800b7a8:	001c      	movs	r4, r3
 800b7aa:	0509      	lsls	r1, r1, #20
 800b7ac:	188d      	adds	r5, r1, r2
 800b7ae:	e750      	b.n	800b652 <__ieee754_sqrt+0x32>
 800b7b0:	f7f5 fe6c 	bl	800148c <__aeabi_dadd>
 800b7b4:	6877      	ldr	r7, [r6, #4]
 800b7b6:	6836      	ldr	r6, [r6, #0]
 800b7b8:	0002      	movs	r2, r0
 800b7ba:	000b      	movs	r3, r1
 800b7bc:	0030      	movs	r0, r6
 800b7be:	0039      	movs	r1, r7
 800b7c0:	f7f4 fe40 	bl	8000444 <__aeabi_dcmplt>
 800b7c4:	2800      	cmp	r0, #0
 800b7c6:	d004      	beq.n	800b7d2 <__ieee754_sqrt+0x1b2>
 800b7c8:	3402      	adds	r4, #2
 800b7ca:	4263      	negs	r3, r4
 800b7cc:	4163      	adcs	r3, r4
 800b7ce:	18ed      	adds	r5, r5, r3
 800b7d0:	e7e0      	b.n	800b794 <__ieee754_sqrt+0x174>
 800b7d2:	2301      	movs	r3, #1
 800b7d4:	3401      	adds	r4, #1
 800b7d6:	439c      	bics	r4, r3
 800b7d8:	e7dc      	b.n	800b794 <__ieee754_sqrt+0x174>
 800b7da:	46c0      	nop			@ (mov r8, r8)
 800b7dc:	7ff00000 	.word	0x7ff00000
 800b7e0:	fffffc01 	.word	0xfffffc01
 800b7e4:	20000ee8 	.word	0x20000ee8
 800b7e8:	20000ee0 	.word	0x20000ee0
 800b7ec:	3fe00000 	.word	0x3fe00000

0800b7f0 <_init>:
 800b7f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7f2:	46c0      	nop			@ (mov r8, r8)
 800b7f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7f6:	bc08      	pop	{r3}
 800b7f8:	469e      	mov	lr, r3
 800b7fa:	4770      	bx	lr

0800b7fc <_fini>:
 800b7fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7fe:	46c0      	nop			@ (mov r8, r8)
 800b800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b802:	bc08      	pop	{r3}
 800b804:	469e      	mov	lr, r3
 800b806:	4770      	bx	lr
